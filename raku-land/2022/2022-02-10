[08:21] *** qorg11 left
[12:44] *** qorg11 joined
[14:10] *** qorg11 left
[14:13] *** qorg11 joined
[19:25] <JRaspass> Shipped some shiny new RL features for the first time a while. We now render :emoji: in markdown, we provide the "long name" of a dist in the top right for copying into META/zef ie Foo:ver<1>:auth<bar>:api<2>, and a bunch of minor tweaks and fixes.

[19:26] <lizmat> Cool!

[19:27] <lizmat> JRaspass: the next version of Ecosystem will support a .river method that provides a hash that can be used to show the modules most upriver

[19:28] <JRaspass> oh that's useful, yeah i need to see how easy it would be to integrate your ecosystem module into the rl builder

[19:28] <JRaspass> i kinda want to avoid having two caches etc

[19:28] <lizmat> should be pretty easy: it uses the zef's caches  :-)

[19:28] <lizmat> the rest is in memory

[19:29] <lizmat> it was built with having it run as a Cro process in mind

[19:29] <lizmat> so all the updates are thread-safe

[19:29] <JRaspass> yeah so we don't have a zef cache, that's my concern

[19:29] <JRaspass> we manually cache the three ecos

[19:31] <lizmat> why ?

[19:32] <JRaspass> it's just it was never designed to sit on top of zef

[19:32] <lizmat> wrt River:

[19:32] <lizmat> my $eco = Ecosystem.new;

[19:32] <lizmat> say "Top five modules on the Raku Ecosystem River:";

[19:32] <lizmat> .say for $eco.river.sort(-*.value.elems).map(*.key).head(5);

[19:33] <lizmat> JSON::Fast

[19:33] <lizmat> File::Directory::Tree

[19:33] <lizmat> URI

[19:33] <lizmat> MIME::Base64

[19:33] <lizmat> File::Temp

[19:34] <JRaspass> i like the idea of displaying river stats but i think it makes more sense to built it on top of the sql representation of RL, your module will be fantastic for double checking the values though

[19:34] <lizmat> fair enough :-)

[19:34] <JRaspass> we have a many to many deps table already, it should be doable

[19:35] <JRaspass> do you give them a numeric value like metacpan does?

[19:35] <lizmat> no, .river gives a hash with the names of the dependees as list

[19:35] <lizmat> so if you just want numbers, use .elems on them

[19:35] <JRaspass> i'm more thinking from the ui side, i like the three vertical lines metacpan uses

[19:36] <lizmat> URL ?

[19:36] <JRaspass> after the name of each dist https://metacpan.org/search?q=util

[19:36] <JRaspass> afaik the metacpan api will give you that level as 0-5

[20:06] <JRaspass> lizmat & tonyo: before i commit to it (hah!), i'm toying with adding a banner when the uploaded auth doesn't match the meta auth, what do you think? e.g. https://raku.land/cpan:ANTONOV/Data::Reshapers

[20:06] <JRaspass> it's a bit like meacpan's unauthorised red text

[20:07] <lizmat> I think that's valid  :-)

[20:08] <JRaspass> there's also a few dists where the auth is missing from meta that i could highlight too

[20:08] <JRaspass> obviously both of these "problems" don't exist with the fez eco :-)

[20:11] <JRaspass> it's a bit like https://modules.raku.org/todo but intentionally much more front and centre in the hope of encouraging fixes

[20:13] <lizmat> *phew* /me is not listed there  :-)

[20:15] <JRaspass> hah, yeah there's one of those i might steal for RL too, the asterisk version is really bloody silly, another thing fez forbids iirc

[20:24] <tonyo> i like it

[20:24] <tonyo> yes fez forbids * version

[20:25] <tonyo> it will get chosen over every other version in that case

[20:25] <tonyo> in the case where :ver is not specified*

[20:29] <lizmat> looks like there are 252 distributions in the ecosystem with * in their version 

[20:30] <lizmat> but unclear how many of them are "current"

[20:33] <lizmat> JRaspass: BTW, don't worry if you see a lot fewer CPAN modules in the ecosystem in the coming week or so

[20:33] <lizmat> I've scheduled all of my modules for deletion

[20:33] <lizmat> on CPAN

[20:33] <lizmat> which will mean I will no longer be number 1 and 2 on the Prolific Authors list  :-)

[20:34] <lizmat> just number 1  :-)

[20:34] <lizmat> afk&

