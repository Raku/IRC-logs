[00:01] *** sena_kun left
[00:02] *** moony is now known as pushpoppeekbop

[00:12] *** Manifest0 left
[00:17] *** Manifest0 joined
[00:30] *** Manifest0 left
[00:34] *** aborazmeh joined
[00:34] *** aborazmeh left
[00:34] *** aborazmeh joined
[00:39] *** Manifest0 joined
[00:44] *** Manifest0 left
[00:49] *** Manifest0 joined
[01:06] *** Manifest0 left
[01:11] *** Manifest0 joined
[01:18] *** Manifest0 left
[01:21] *** Manifest0 joined
[01:28] *** Manifest0 left
[01:33] *** Manifest0 joined
[01:40] *** Manifest0 left
[01:45] *** Manifest0 joined
[01:48] *** noisegul left
[01:50] *** Manifest0 left
[01:51] *** molaf left
[01:52] *** mniip left
[01:55] *** noisegul joined
[01:55] *** Manifest0 joined
[02:02] *** Manifest0 left
[02:03] *** mniip joined
[02:03] *** molaf joined
[02:08] *** Manifest0 joined
[02:18] *** Manifest0 left
[02:21] *** Manifest0 joined
[02:31] *** Manifest0 left
[02:38] *** Manifest0 joined
[02:42] *** Manifest0 left
[02:45] *** hythm joined
[02:47] *** Manifest0 joined
[02:56] *** Manifest0 left
[03:01] *** Manifest0 joined
[03:24] *** Manifest0 left
[03:29] *** aborazmeh left
[03:30] *** Manifest0 joined
[03:38] *** Manifest0 left
[03:44] *** Manifest0 joined
[03:48] *** Manifest0 left
[03:54] *** Manifest0 joined
[03:58] *** veesh left
[03:59] *** Manifest0 left
[04:07] *** Manifest0 joined
[04:13] *** Manifest0 left
[04:19] *** Manifest0 joined
[04:39] *** Manifest0 left
[04:39] *** veesh joined
[04:41] *** hythm left
[04:41] *** hythm joined
[04:43] *** Manifest0 joined
[04:44] *** hythm left
[04:56] *** Manifest0 left
[05:02] *** Manifest0 joined
[05:04] *** vrurg left
[05:07] *** zacts joined
[05:09] *** Manifest0 left
[05:14] *** Manifest0 joined
[05:19] *** Manifest0 left
[05:22] *** Manifest0 joined
[05:26] *** Manifest0 left
[05:32] *** Manifest0 joined
[05:39] *** Manifest0 left
[05:44] *** Manifest0 joined
[05:49] *** Manifest0 left
[05:54] *** espadrine_ joined
[05:55] *** Manifest0 joined
[06:03] *** Manifest0 left
[06:08] *** Manifest0 joined
[06:09] *** cpan-p6 left
[06:11] *** cpan-p6 joined
[06:11] *** cpan-p6 left
[06:11] *** cpan-p6 joined
[06:11] <cpan-p6> New module released to CPAN! FindBin (0.3.4) by 03LEMBARK

[06:16] <Xliff> m: my enum TriLet <AAA BBB CCC>; my %h = ( AAA => 'aaaaa' ); say TriLet.enums.Hash{'AAA'}

[06:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «0␤»

[06:18] *** espadrine_ left
[06:24] *** Manifest0 left
[06:30] *** Manifest0 joined
[06:53] *** Manifest0 left
[06:57] *** atweiden-air joined
[06:58] *** ravenousmoose joined
[06:59] *** Manifest0 joined
[07:16] *** zacts left
[07:16] *** Manifest0 left
[07:21] *** Manifest0 joined
[07:24] *** jmerelo joined
[07:30] *** Manifest0 left
[07:35] *** Manifest0 joined
[07:46] *** ravenousmoose left
[07:46] *** squashable6 left
[07:49] *** rindolf joined
[07:51] *** squashable6 joined
[07:51] *** ChanServ sets mode: +v squashable6

[07:57] *** Manifest0 left
[07:57] *** yqt joined
[08:04] <Geth> ¦ doc: 9374e16717 | (JJ Merelo)++ | doc/Type/Hash.pod6

[08:04] <Geth> ¦ doc: Improves examples for Hash, closes #1380, helps #2113

[08:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9374e16717

[08:04] <synopsebot> Link: https://doc.perl6.org/type/Hash

[08:08] *** Manifest0 joined
[08:09] *** kurahaupo joined
[08:12] <jmerelo> squashable6: status

[08:12] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 4 days and ≈19 hours (2019-06-01 UTC-14⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:18] <atweiden-air> is there a more idiomatic way to do shell('head -c 64 /dev/random > /mnt/boot/volume.key');

[08:18] *** ravenousmoose joined
[08:23] <timotimo> atweiden-air: you can build a Proc::Async and .bind-stdout("/mnt/boot/volume.key".IO.open(:w))

[08:23] <timotimo> i mean, you don't have to use proc stuff at all

[08:24] <timotimo> m: say "/dev/random".IO.open(:bin).read(64)

[08:24] <camelia> rakudo-moar a643b8be1: OUTPUT: «Buf[uint8]:0x<46 D9 47 7D 1C 17 BA EA 27 C3 46 5E A0 12 C7 6F 96 78 0F 0D D8 52 11 BE 93 F8 54 3C D7 F3 F2 8F 43 71 E3 44 2C 7F AD 7C 91 E0 2B 95 FC 5F 6D 84 58 36 59 4B 23 9A 58 5A 07 9F EB 49 46 DF 6C ED>␤»

[08:25] *** Manifest0 left
[08:29] *** kurahaupo_ joined
[08:30] *** Manifest0 joined
[08:30] *** kurahaupo left
[08:33] *** nadim_ left
[08:39] <atweiden-air> timotimo: thanks.

[08:40] <jmerelo> timotimo: cool

[08:41] *** Manifest0 left
[08:42] *** rindolf left
[08:45] <atweiden-air> timotimo: does the fh for /dev/random need to be closed somehow?

[08:46] <timotimo> in a one-liner, no :)

[08:47] <atweiden-air> with my Buf:D $buf = $src.IO.open(:bin).read($bytes); ?

[08:47] <timotimo> m: say (my $fh will LEAVE { .close } = "/dev/random".IO.open(:bin)).read(64)

[08:47] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'will' -> 'LEAVE' in a variable declaration.␤at <tmp>:1␤------> 3say (my $fh will LEAVE { .close }7⏏5 = "/dev/random".IO.open(:bin)).read(64)␤    expecting any of:␤…»

[08:47] <timotimo> m: say (my $fh will leave { .close } = "/dev/random".IO.open(:bin)).read(64)

[08:47] <camelia> rakudo-moar a643b8be1: OUTPUT: «Buf[uint8]:0x<1F 58 DC 2A B1 2D 29 6D F1 A8 52 DD 46 F9 09 45 F6 DC 01 F9 36 31 02 8D BC CE 92 5D 16 CC F7 F8 0E 87 EE 68 3D 30 6D A1 F3 EE 11 EF 81 BE DC 54 8D 7A 65 0E C8 CD 66 58 E8 1D CC E7 C3 0C 9F AC>␤»

[08:48] *** Manifest0 joined
[08:48] <jmerelo> timotimo: tch, tch, using undocumented features...

[08:48] <jmerelo> timotimo: that will force us poor doccers to document them...

[08:48] <timotimo> damn, undocumented?

[08:49] <jmerelo> timotimo: underdocumented https://docs.perl6.org/language/phasers#index-entry-Phasers__will_trait

[08:49] <jmerelo> timotimo: it's kinda documented under phasers, with an example and a paragraph. Probably deserves more...

[08:50] <timotimo> :)

[08:50] <jmerelo> Also, most anchors are not working. I suspect it's because the new setup does not use .htaccess...

[08:50] *** rindolf joined
[08:57] *** yqt left
[09:00] *** adu left
[09:10] *** yqt joined
[09:21] *** Manifest0 left
[09:23] <xinming_> Anyone here knows which MQ implementation is best to be used in perl6?

[09:23] <xinming_> I plan to use rabbit mQ

[09:23] <xinming_> releasable6: status

[09:24] <releasable6> xinming_, Next release in ≈25 days and ≈9 hours. 2 blockers. 140 out of 464 commits logged (⚠ 2 warnings)

[09:24] <releasable6> xinming_, Details: https://gist.github.com/16542ba049b3275dccc05c9e03421000

[09:28] *** Manifest0 joined
[09:38] *** yqt left
[09:43] <jmerelo> xinming_: seem to remember that there was some AMQP driver. But you'll not have a whole lot of choices, I guess.

[09:44] *** Manifest0 left
[09:45] *** jmerelo left
[09:49] *** kurahaupo_ left
[09:49] *** Manifest0 joined
[09:53] *** nadim_ joined
[09:57] *** kurahaupo joined
[09:58] *** Manifest0 left
[10:00] *** yqt joined
[10:03] *** Manifest0 joined
[10:07] *** sena_kun joined
[10:14] *** Manifest0 left
[10:19] *** Manifest0 joined
[10:21] *** HarmtH left
[10:21] *** HarmtH joined
[10:22] *** leont joined
[10:22] * leont isn't fully understanding the $foo does RoleName($argument) syntax

[10:23] <leont> Is it documented anywhere?

[10:25] <timotimo> do you have an example?

[10:25] <timotimo> i know RoleName[$argument]

[10:26] <MasterDuke> i think there was some discussion a little while ago about how RoleName($argument) only works for a role with a single argument, you can't use it if there are multiple

[10:27] <timotimo> oh, ok

[10:27] <leont> Yeah, and right now I need to add a second argument :-/

[10:28] *** HarmtH left
[10:29] *** netrino joined
[10:30] <leont> I think I can fix in in my case by using two roles, but it's not particularly pretty :-/

[10:31] <timotimo> then just use [$arg1, $arg2]?

[10:38] <MasterDuke> m: role AB[::T1, ::T2] { has T1 $.a; has T2 $.b; method ab() { dd $.a, $.b }; }; my $a = AB[Int, Str].new(a => 2, b => "cd"); $a.ab

[10:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «2␤"cd"␤»

[10:40] *** Manifest0 left
[10:42] *** epony left
[10:42] <leont> m: role AB[::T1, ::T2] { has T1 $.a; has T2 $.b; method ab() { dd $.a, $.b }; }; my $a = "foo" but AB[Int, Str].new(a => 2, b => "cd"); $a.ab

[10:42] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'ab' for invocant of type 'Str+{<anon|1>}'. Did you mean 'abs'?␤  in block <unit> at <tmp> line 1␤␤»

[10:45] *** Manifest0 joined
[10:49] *** Manifest0 left
[10:49] <timotimo> m: role AB[::T1, ::T2] { has T1 $.a; has T2 $.b; method ab() { dd $.a, $.b }; }; my $a = "foo" but AB[Int, Str]; $a.a = 2; $a.b = "cd"; say $a.ab

[10:49] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot modify an immutable 'T1' type object␤  in block <unit> at <tmp> line 1␤␤»

[10:50] <timotimo> m: role AB[::T1, ::T2] { has T1 $.a is rw; has T2 $.b is rw; method ab() { dd $.a, $.b }; }; my $a = "foo" but AB[Int, Str]; $a.a = 2; $a.b = "cd"; say $a.ab

[10:50] <camelia> rakudo-moar a643b8be1: OUTPUT: «Int $!a = 2␤Nil␤Str $!b = "cd"␤»

[10:50] <timotimo> m: role AB[::T1, ::T2] { has T1 $.a is rw; has T2 $.b is rw; method ab() { dd $.a, $.b }; }; my $a = "foo" but AB[Int, Str]; $a.a = 2; $a.b = "cd"; $a.ab

[10:50] <camelia> rakudo-moar a643b8be1: OUTPUT: «Int $!a = 2␤Str $!b = "cd"␤»

[10:50] <timotimo> the nil went in the middle because stderr/stdout ordering is funny

[10:51] *** folex[m] joined
[10:51] <timotimo> leont: if this isn't acceptable, you can use the arguments to AB to hold your values rather than the types

[10:52] <timotimo> of course that will mean that AB with different values but the same types won't type-match

[10:56] *** Manifest0 joined
[10:58] *** atweiden-air left
[11:02] <leont> Is there any way to get the short message out of an exception. .message appears to give me the long one including backtrace

[11:03] <timotimo> .message should only give the text of the exception

[11:03] <timotimo> maybe you're accidentally not-catching it?

[11:03] <timotimo> or not marking it as handled when you do catch it?

[11:05] <leont> That's what I would think. I'm calling a «say .message» in a catch handler.

[11:06] <timotimo> do you have a default { ... } or some "when" clause?

[11:06] <leont> fg

[11:07] <leont> It's in a when clause, but I also have a default clause after it

[11:07] <timotimo> OK, that should cause the exception to not be rethrown at least

[11:07] <timotimo> m: die "oh no!"; CATCH { default { .message.say } }

[11:07] <leont> Putting a say before and after the message confirms it's blowing up right there

[11:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «oh no!␤»

[11:09] <timotimo> perhaps the exception in question wrongfully puts a backtrace in its message method

[11:09] <timotimo> that would be odd, but stranger things have happened

[11:10] <timotimo> also possible: the message method itself throws an extra exception

[11:10] <leont> It's X::TypeCheck::Assignment

[11:10] <timotimo> try writing out the type of the exception before saying the .message

[11:12] <timotimo> that shouldn't output a stack trace i don't think

[11:12] <leont> Ah, if its $.got argument is a Failure, it does the thing

[11:12] <timotimo> oh, haha

[11:12] <timotimo> that's quite unfortunate :D

[11:13] <timotimo> my $is-itself := try $.expected =:= $.got;

[11:13] <timotimo> that doesn't disarm the failure?

[11:13] <leont> It puts the backtrace of the Failure object ahead of the message

[11:13] <leont> I just added a «use fatal» to my code, and then everything works as I would want it to

[11:13] <timotimo> oh

[11:13] <timotimo> that's just part of the stringification, then

[11:14] <timotimo> a ticket is in order

[11:14] <timotimo> including a little investigation of what other exception "message" methods do in the case of Failure being put in unexpected places

[11:14] <leont> This is explicitly doing this

[11:15] <leont> https://github.com/rakudo/rakudo/blob/master/src/core/Exception.pm6#L2277

[11:16] <timotimo> oh

[11:16] <timotimo> you didn't mention it has the "Earlier Failure:" header

[11:17] <leont> Yeah, I should have pasted it. I should have realised what it was.

[11:17] <timotimo> no worries

[11:22] *** Manifest0 left
[11:26] <Xliff> m: role AB[::T1, ::T2] { has T1 $.a is rw; has T2 $.b is rw; method ab() { dd $!a, $!b }; }; my $a = "foo" but AB[Int, Str]; $a.a = 2; $a.b = "cd"; $a.ab; sleep 2; $a.say

[11:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «Int $!a = 2␤foo␤Str $!b = "cd"␤»

[11:26] <Xliff> WTF??

[11:26] <Xliff> Why is "foo" in the middle?

[11:28] *** Manifest0 joined
[11:28] <timotimo> because stdout and stderr

[11:28] <Xliff> O

[11:29] <Xliff> m: role AB[::T1, ::T2] { has T1 $.a is rw; has T2 $.b is rw; method ab() { dd $!a, $!b }; }; my $a = "foo" but AB[Int, Str]; $a.a = 2; $a.b = "cd"; $a.ab; sleep 2; $*ERR.say: $a

[11:29] <camelia> rakudo-moar a643b8be1: OUTPUT: «Int $!a = 2␤Str $!b = "cd"␤foo␤»

[11:29] <Xliff> m: role AB[::T1, ::T2] { has T1 $.a is rw; has T2 $.b is rw; method ab() { dd $!a, $!b }; }; my $a = "foo" but AB[Int, Str]; $a.a = 2; $a.b = "cd"; $a.ab; $*ERR.say: $a

[11:29] <camelia> rakudo-moar a643b8be1: OUTPUT: «Int $!a = 2␤Str $!b = "cd"␤foo␤»

[11:30] <Xliff> Morning, timotimo

[11:30] <timotimo> m: my $letter = "a"; for ^20 { if Bool.pick { ($letter.=succ).lc.&say } else { ($letter.=succ).uc.&note  } }

[11:30] <camelia> rakudo-moar a643b8be1: OUTPUT: «b␤D␤c␤e␤g␤j␤k␤l␤n␤o␤q␤t␤u␤F␤H␤I␤M␤P␤R␤S␤»

[11:30] <timotimo> m: my $letter = "a"; for ^20 { if Bool.pick { ($letter.=succ).pred.lc.&say } else { ($letter.=succ).pred.uc.&note  } }

[11:30] <camelia> rakudo-moar a643b8be1: OUTPUT: «A␤b␤g␤i␤k␤l␤m␤n␤s␤C␤D␤E␤F␤H␤J␤O␤P␤Q␤R␤T␤»

[11:31] <timotimo> that's a funny ordering i guess?

[11:31] <Xliff> Yah

[11:31] *** andrzejku joined
[11:31] *** andrzejku left
[11:32] *** andrzejku joined
[11:32] <andrzejku> hello

[11:32] <andrzejku> :)

[11:32] <timotimo> ohai

[11:33] <andrzejku> I am just thinking today as Perl was created also as substitution of sed and awk

[11:33] <andrzejku> so is it better to learn awk in modern times?

[11:33] <andrzejku> or just programming language which allow to do all those staff

[11:37] <timotimo> sed and awk are probably also present in, for example, a busybox installation

[11:37] <timotimo> perl on the other hand, probably not

[11:43] *** Manifest0 left
[11:43] *** Manifest0 joined
[11:44] <timotimo> if you run "execsnoop" while some shell script is running, you'll see an incredible amount of forks/execs for all the little commands, btw. it's kind of amusing

[11:44] <timotimo> if you have a munin running, it's quite a firehose

[11:55] *** ravenousmoose left
[12:08] *** Manifest0 left
[12:13] *** Manifest0 joined
[12:21] *** Manifest0 left
[12:26] *** yqt left
[12:27] *** Manifest0 joined
[12:32] *** Manifest0 left
[12:37] *** andrzejku left
[12:37] *** Manifest0 joined
[12:44] *** Manifest0 left
[12:49] *** andrzejku joined
[12:49] <nadim_> timotimo: nice example you gave above, I need to remember that!  I had to test of course  ddt :flat(0), "/dev/random".IO.open(:bin).read(8) ;  

[12:50] *** Manifest0 joined
[12:53] <nadim_> I posted this yesterday, maybe someone can have a look at it. I am not understanding how to use .VAR properly and get an exception, on the other hand dd shows perfectly  formated output https://nopaste.linux-dev.org/?1204113

[12:54] <nadim_> m: my @a = [1] ; dd @a ; my $b = 1 ; dd $b ; my $c = [1] ; dd $c ;

[12:54] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array @a = [1]␤Int $b = 1␤Array $c = $[1]␤»

[12:59] *** Maylay left
[13:02] *** Maylay joined
[13:05] <tobs> m: my $a = 1; say $a.VAR.name; say $a.VAR.?name

[13:05] <camelia> rakudo-moar a643b8be1: OUTPUT: «$a␤Nil␤»

[13:06] <tobs> that doesn't seem right

[13:08] *** Manifest0 left
[13:14] *** Manifest0 joined
[13:16] *** andrzejku left
[13:18] *** Manifest0 left
[13:22] <cpan-p6> New module released to CPAN! Getopt::Long (0.1.1) by 03LEONT

[13:24] *** Manifest0 joined
[13:27] <tobs> nadim_: I went ahead and filed R#2928

[13:27] <synopsebot> R#2928 [open]: https://github.com/rakudo/rakudo/issues/2928 .VAR.?name and .VAR.name differ

[13:28] *** andrzejku joined
[13:31] <leont> Running into weird issues now on a module that both imports and exports an is trait

[13:33] <leont> It doesn't appear to be exporting the new one :-/

[13:38] *** andrzejku left
[13:40] <nadim_> tobs: thanks :)

[13:48] *** leont left
[13:50] *** Manifest0 left
[13:55] *** Manifest0 joined
[14:07] *** aborazmeh joined
[14:07] *** aborazmeh left
[14:07] *** aborazmeh joined
[14:09] *** aindilis left
[14:10] *** aindilis joined
[14:14] *** Sgeo__ left
[14:14] *** Sgeo__ joined
[14:19] *** Manifest0 left
[14:22] *** vrurg joined
[14:23] *** aindilis left
[14:23] *** ravenousmoose joined
[14:24] *** Manifest0 joined
[14:25] *** vrurg left
[14:26] *** aindilis joined
[14:29] *** atweiden-air joined
[14:33] *** ravenousmoose left
[14:34] *** adu joined
[14:34] *** ravenousmoose joined
[14:41] *** Sgeo_ joined
[14:42] *** Manifest0 left
[14:44] *** Sgeo__ left
[14:49] *** Manifest0 joined
[14:49] *** aborazmeh left
[14:49] <Altreus> I'm playing with Red but I can't figure out how to organise my schema properly. All of the examples use a flat system with no lib directory and no namespaces

[14:50] <Altreus> So now I've come along with An::App::Schema::* and I have no idea what Red is trying to do to find things

[14:51] <Altreus> e.g. if I have MyApp::Schema::Person with «model Person» I can't elsewhere use «:model<Person>» because it tries to find lib/Person.pm6

[14:51] *** atweiden-air left
[14:51] <Altreus> I was expecting «model Person» to register itself with Red and «:model<Person>» to use that

[14:51] <Altreus> Otherwise it's going to be grossly verbose

[14:57] *** yqt joined
[14:57] *** Manifest0 left
[14:59] <Altreus> uh no wait, it doesn't work even if I put it all in one file

[14:59] <Altreus> https://gist.github.com/Altreus/7007e0eefa0e21942a6fd2d0c6d72213  # This says Could not find Reward at line 0 in: <list of INC directories>

[15:01] *** aindilis left
[15:01] *** SCHAPiE left
[15:02] *** Manifest0 joined
[15:06] *** kurahaupo left
[15:06] *** aindilis joined
[15:07] *** Manifest0 left
[15:08] *** kurahaupo joined
[15:10] *** molaf left
[15:11] *** SCHAPiE joined
[15:11] *** aindilis left
[15:12] *** Manifest0 joined
[15:16] *** Manifest0 left
[15:21] *** Manifest0 joined
[15:24] *** SCHAPiE left
[15:27] *** SCHAPiE joined
[15:31] *** kurahaupo left
[15:40] *** Manifest0 left
[15:43] *** lucs left
[15:45] *** adu left
[15:45] *** Manifest0 joined
[15:46] *** aindilis joined
[15:50] *** Manifest0 left
[15:53] *** kurahaupo joined
[15:55] *** kurahaupo left
[15:55] *** ravenousmoose left
[15:55] *** Manifest0 joined
[15:57] *** kurahaupo joined
[15:57] *** SCHAPiE left
[15:57] *** cpan-p6 left
[16:01] *** cpan-p6 joined
[16:01] *** cpan-p6 left
[16:01] *** cpan-p6 joined
[16:02] *** Manifest0 left
[16:03] *** kurahaupo left
[16:04] *** yqt left
[16:04] *** SCHAPiE joined
[16:05] *** MilkmanDan left
[16:05] *** MilkmanDan joined
[16:08] *** Manifest0 joined
[16:13] *** kurahaupo joined
[16:15] *** Manifest0 left
[16:17] *** SCHAAP137 joined
[16:17] *** kurahaupo left
[16:17] *** SCHAPiE left
[16:17] *** SCHAAP137 is now known as SCHAPiE

[16:20] *** Manifest0 joined
[16:23] *** kurahaupo joined
[16:25] *** ravenousmoose joined
[16:28] *** HarmtH joined
[16:33] *** reach_satori left
[16:33] *** reach_satori_ joined
[16:39] *** HarmtH left
[16:46] *** HarmtH joined
[16:47] *** kurahaupo_ joined
[16:47] *** kurahaupo left
[16:47] *** kurahaupo_ left
[16:48] *** kurahaupo joined
[16:51] *** kurahaupo left
[16:51] *** kurahaupo joined
[16:51] *** kurahaupo left
[16:52] *** kurahaupo joined
[16:54] *** kurahaupo left
[16:54] *** kurahaupo joined
[16:55] *** kurahaupo left
[16:55] *** kurahaupo joined
[16:56] <lizmat> weekly: https://rage.powered.ninja/2019/05/26/unique-square-and-rank.html

[16:56] <notable6> lizmat, Noted!

[16:57] <timotimo> weekly: https://gist.github.com/timo/7cfe71a667bbdfa0dbd1510431da45a4

[16:57] <notable6> timotimo, Noted!

[16:57] <timotimo> lizmat: did you already see this? :)

[16:57] <timotimo> i should upload screenshots to that gist, too

[16:58] <lizmat> no, didn't yet

[16:58] <lizmat> so what do you need to do to make that work on github ?

[17:03] <timotimo> have something like TamperMonkey installed on your browser

[17:03] <timotimo> in tampermonkey's "dashboard" there's an "utilities" tab at the top right

[17:04] <timotimo> it'll let you "import url" where you use the "Raw" url of the script file

[17:04] <timotimo> the screenshots are there now

[17:04] *** Manifest0 left
[17:05] <xinming_> How do we create a method with method name contains .   ?

[17:06] <xinming_> I saw https://github.com/bbkr/jsonrpc   there is a rpc.batch method, which need to be invoked with   $obj.'rpc.batch'()

[17:06] <xinming_> That makes me curious how to declare the method name with dot.

[17:06] <timotimo> probably only with .^add_method

[17:06] <xinming_> I know we can may use .^add_method

[17:06] <xinming_> Ok, thanks. :-)

[17:07] <timotimo> m: class test { method "foo.bar"($a) { say $a } }

[17:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3class test { method7⏏5 "foo.bar"($a) { say $a } }␤»

[17:07] <sena_kun> https://github.com/bbkr/jsonrpc/blob/ebccb25d505ef544e016038f39e21ad9c59c3bd6/lib/JSON/RPC/Client.pm6#L151 <-

[17:07] <sena_kun> no?

[17:07] <xinming_> m: class A { ::?CLASS.^add_method("a.b", { "test".say; }); }; A.new."a.b"();

[17:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «test␤»

[17:07] <xinming_> This does work.

[17:07] <xinming_> It's ok if no syntax support this.

[17:08] <sena_kun> m: class A { method ::('foo.bar') {42.say} }; A.'foo.bar'()

[17:08] <camelia> rakudo-moar a643b8be1: OUTPUT: «42␤»

[17:08] <xinming_> Ok, thanks.

[17:08] *** kurahaupo left
[17:08] *** kurahaupo joined
[17:08] *** kurahaupo left
[17:09] *** kurahaupo joined
[17:09] *** Manifest0 joined
[17:13] <jnthn> m: class C { method ::('foo.bar') { say 42 } }; C.'foo.bar'

[17:13] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3 ::('foo.bar') { say 42 } }; C.'foo.bar'7⏏5<EOL>␤»

[17:13] <jnthn> m: class C { method ::('foo.bar') { say 42 } }; C.'foo.bar'()

[17:13] <camelia> rakudo-moar a643b8be1: OUTPUT: «42␤»

[17:13] <jnthn> Don't need .^add_method for that :)

[17:14] <HarmtH> m: my @a; my $neg=-1; say @a[$neg;0]:exists

[17:14] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[17:15] <HarmtH> Bug or as-intended?

[17:15] <lizmat> HarmtH: feels like a bug

[17:16] <lizmat> hmmm.. more like a WAT maybe:

[17:16] <lizmat> m: my @a; my $neg=-1; say @a[$neg;0]

[17:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «Index out of range. Is: -1, should be in 0..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[17:17] <lizmat> m: my @a; my $neg=-1; say @a[$neg;0].Bool

[17:17] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤»

[17:17] *** kurahaupo left
[17:17] <lizmat> HarmtH: yeah, bug, please make an issue   :-)

[17:17] <HarmtH> Okay, will do

[17:17] *** kurahaupo joined
[17:19] <AlexDaniel> timotimo: I'd prefer a bot that edits tickets

[17:20] <timotimo> to put the links in?

[17:20] <AlexDaniel> yeah

[17:20] <timotimo> i don't think that's possible on github

[17:20] *** farcas82 joined
[17:20] <AlexDaniel> timotimo: huh?

[17:20] <AlexDaniel> aaaah they're in the code block, dammit

[17:20] <timotimo> does GFMD allow that?

[17:20] <timotimo> yeah

[17:20] <AlexDaniel> well, it's possible…

[17:20] <timotimo> would it allow putting <pre> in there as html?

[17:20] <AlexDaniel> you'll need to use <code></code> I think

[17:21] <timotimo> can you experiment a little and get back to me?

[17:23] <AlexDaniel> timotimo: https://github.com/perl6/whateverable/issues/11#issuecomment-496017166

[17:24] <AlexDaniel> you'll need to escape things, and nobody knows the exact rules for escaping…

[17:24] <AlexDaniel> and it'll work differently in wikis and gists

[17:24] *** kurahaupo left
[17:24] *** kurahaupo_ joined
[17:25] *** kurahaupo_ left
[17:25] <timotimo> don't think i need to support wikis, but figuring out the escaping rules when nobody knows them ... sounds absolutely terrible

[17:25] *** kurahaupo joined
[17:26] <AlexDaniel> timotimo: don't worry it'll work most of the time

[17:26] <timotimo> ugh

[17:26] <AlexDaniel> :)

[17:27] <AlexDaniel> hmm what does whateverable use to add links to gists

[17:27] <AlexDaniel> like if the bot gets an exception in its own code

[17:28] <AlexDaniel> timotimo: https://github.com/perl6/whateverable/blob/3612910a839b601bb4c4b3e495eda519622d4ae1/lib/Whateverable/Messages.pm6#L70

[17:29] <AlexDaniel> # let's hope for the best ↓

[17:29] <AlexDaniel> “<a href="$href">{$<path>}</a>” ~

[17:29] <timotimo> ahahaha

[17:31] <AlexDaniel> heh, role Enough 

[17:32] <AlexDaniel> that codebase is fun to read sometimes

[17:39] *** ravenousmoose left
[17:39] *** Manifest0 left
[17:40] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/05/perl-weekly-challenge-9-square-numbers-and-functional-programming-in-perl.html

[17:40] <notable6> lizmat, Noted!

[17:42] *** kurahaupo_ joined
[17:42] *** kurahaupo left
[17:43] *** kurahaupo_ left
[17:43] *** kurahaupo joined
[17:45] *** Manifest0 joined
[17:52] *** telex left
[17:53] *** telex joined
[17:54] *** Manifest0 left
[17:59] *** Manifest0 joined
[18:04] <nadim_> is there a short notation to check id an array only contains a specific value or type? something like @a ~~ only_one(True)

[18:06] <nadim_> ie I want to  check if @a only contains True

[18:06] <xinming_> all?

[18:06] *** Manifest0 left
[18:07] <nadim_> hmm, maybe I check

[18:08] <timotimo> @a.all eqv True

[18:08] <xinming_> m: my @a = (True xx 5); (@a.unique.elems == 1 and @a[0] == True).perl.say;

[18:08] <camelia> rakudo-moar a643b8be1: OUTPUT: «Bool::True␤»

[18:08] <xinming_> This is shortest I can get

[18:08] <xinming_> Can we use == to compare Bool value?

[18:08] <timotimo> you can

[18:08] <nadim_> yes

[18:08] <timotimo> but then 1 will also match True and 0 will also match False

[18:09] <xinming_> m: my @a = (True xx 5); (@a.all eqv True).perl.say;;

[18:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «all(Bool::True, Bool::True, Bool::True, Bool::True, Bool::True)␤»

[18:09] <xinming_> m: my @a = (True xx 5); (@a.all eqv True).perl.say;

[18:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «all(Bool::True, Bool::True, Bool::True, Bool::True, Bool::True)␤»

[18:09] <nadim_> m: my @a = (True, True) ; @a.all eqv True

[18:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "eqv" in expression ".all eqv True" in sink context (line 1)␤»

[18:09] <xinming_> m: my @a = (True xx 5); ?(@a.all eqv True).perl.say;

[18:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «WARNINGS for <tmp>:␤all(Bool::True, Bool::True, Bool::True, Bool::True, Bool::True)␤Useless use of "?" in expression "?(@a.all eqv True).perl.say" in sink context (line 1)␤»

[18:09] <xinming_> m: my @a = (True xx 5); (?(@a.all eqv True)).perl.say;

[18:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «Bool::True␤»

[18:10] <xinming_> m: my @a = (True xx 5, False); (?(@a.all eqv True)).perl.say;

[18:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «Bool::False␤»

[18:10] <xinming_> So, ?(@a.all eqv True)   is what we want.

[18:10] *** MitarashiDango[m joined
[18:10] <nadim_> m: my @a = (True, True) ; ?(@a.all eqv True)

[18:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "?" in expression "?(@a.all eqv True)" in sink context (line 1)␤»

[18:10] <nadim_> m: my @a = (True, True) ; (?(@a.all eqv True)).say

[18:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[18:10] *** Manifest0 joined
[18:11] <nadim_> no since more than one True is still true

[18:11] <nadim_> m: my @a = (True, True) ; (?(@al eqv [True])).say

[18:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@al' is not declared␤at <tmp>:1␤------> 3my @a = (True, True) ; (?(7⏏5@al eqv [True])).say␤»

[18:11] <nadim_> m: my @a = (True, True) ; (?(@a eqv [True])).say

[18:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤»

[18:11] <nadim_> m: my @a = (True) ; (?(@a eqv [True])).say

[18:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[18:12] <xinming_> m: my @a = (True xx 5, False); (?(@a.all eqv True)).perl.say;

[18:12] <camelia> rakudo-moar a643b8be1: OUTPUT: «Bool::False␤»

[18:12] <nadim_> a simple eqv works best

[18:12] <xinming_> m: my @a = (True xx 5); (?(@a eqv True)).perl.say;

[18:12] <camelia> rakudo-moar a643b8be1: OUTPUT: «Bool::False␤»

[18:12] <nadim_> m: my @a = (True) ; (?(@a ~~ [True])).say

[18:12] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[18:12] <nadim_> m: my @a = (True, True) ; (?(@a ~~ [True])).say

[18:12] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤»

[18:14] *** ravenousmoose joined
[18:16] <nadim_> while on this short notition trip, is there a way to write $a ~~ 'x' ?? $a !! 'y' ?

[18:17] <timotimo> if $a is a long variable name you can use postfix given to shorten it to $_

[18:19] <nadim_> that's one good idea but what I really meant was another way to write ?? !! but now I write it down I see that it's a bit silly  :)

[18:20] <nadim_> the real code is this: $clone.flat ~~ [True] ?? [0] !! $clone.flat

[18:20] <nadim_> I want to replace a single True with 0

[18:21] <nadim_> because @.flat, if I set it with :flat gets True inside the array and I want :flat to mean "initialize" the array with a single zero

[18:21] <timotimo> there's "and" and "or", but that might still not be what you want

[18:22] <nadim_> I want :flat to put a singlezeroin flat, not True

[18:22] *** zakharyas joined
[18:22] <nadim_> at other times :flat can be initialized with more arguments but without arguments I want a single 0

[18:28] *** Manifest0 left
[18:32] *** Manifest0 joined
[18:37] <xinming_> m: sub x ($x) { temp $x = "5"; $x.perl.say; };  x(3);

[18:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot assign to a readonly variable or a value␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:37] <xinming_> Is this a bug?

[18:37] <xinming_> or, we can't temp a ro variable is desired behavior.

[18:40] <nadim_> m: sub x ($y) { temp $x = "5"; $x.perl.say; };  x(3);

[18:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3sub x ($y) { temp 7⏏5$x = "5"; $x.perl.say; };  x(3);␤»

[18:41] <xinming_> temp no exist var is definitely error, but to the ro variable, I think we should allow it to be temp'ed

[18:42] <timotimo> that was just a typo i think?

[18:42] <timotimo> i thought you can only use temp with a variable name that exists further outside?

[18:42] <nadim_> xinming_: I think it is intended as you can't re assign the variable upon inner scope exit

[18:43] <nadim_> timotimo: yes it was a typo, I wnated to make a change, removed it but not all of it

[18:43] <nadim_> docs says "Upon exiting the scope, the variable will be restored to its original value"

[18:44] <nadim_> maybe a warning when temporizing a ro would be nice, even though it will generate a fault at scope exit 

[18:45] <xinming_> timotimo: So, it's designed like this, right?

[18:49] <timotimo> i think so?

[19:17] *** Manifest0 left
[19:24] *** Manifest0 joined
[19:28] <xinming_> timotimo: I mean, we can't temp a ro variable, it's not a bug, right?

[19:33] *** Manifest0 left
[19:35] <timotimo> i don't know :(

[19:38] *** kaare__ left
[19:39] *** kaare__ joined
[19:40] *** Manifest0 joined
[19:48] *** Manifest0 left
[19:52] *** Manifest0 joined
[19:56] *** Manifest0 left
[20:03] *** Manifest0 joined
[20:07] *** Manifest0 left
[20:10] *** ufobat_ joined
[20:13] *** ufobat__ left
[20:14] *** Manifest0 joined
[20:16] *** molaf joined
[20:19] *** pecastro joined
[20:22] *** adu joined
[20:27] *** |oLa| joined
[20:28] *** [Sno] left
[20:29] *** Manifest0 left
[20:31] *** [Sno] joined
[20:33] *** Manifest0 joined
[20:39] *** ravenousmoose left
[20:46] <xinming_> Is there a way to enter a readline interpreter after the script reaches end?

[20:47] <xinming_> I mean set the breakpoint

[21:03] *** Sgeo_ left
[21:03] *** Sgeo_ joined
[21:13] <zostay> m: IO::Socket::Async.udp(:broadcast);

[21:13] <camelia> rakudo-moar a643b8be1: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    bad file descriptor␤      in block <unit> at <tmp> line 1␤␤»

[21:14] <zostay> That's documented on docs.perl6.org, but I don't see the :broadcast flag listed in roast. I can't figure out how to get it to work.

[21:16] <Geth> ¦ perl6.org: 079961d179 | lukasvalle++ | 2 files

[21:16] <Geth> ¦ perl6.org: fix broken links

[21:16] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/079961d179

[21:17] *** Sgeo_ left
[21:17] *** Sgeo_ joined
[21:22] <Voldenet> Why not just: use MONKEY-SEE-NO-EVAL; for lines() { CATCH { .say; next }; EVAL($_) }

[21:23] <Voldenet> Yeah, it's not readline interpreter, but it probably covers a lot of use cases

[21:24] <Voldenet> + rlwrap

[21:24] *** sena_kun left
[21:25] *** farcas82 left
[21:31] *** Manifest0 left
[21:32] *** zakharyas left
[21:36] *** Manifest0 joined
[21:40] *** Manifest0 left
[21:45] *** Manifest0 joined
[21:51] *** MilkmanDan left
[21:52] *** Manifest0 left
[21:53] *** MilkmanDan joined
[21:53] *** reportable6 left
[21:53] *** undersightable6 left
[21:53] *** committable6 left
[21:53] *** shareable6 left
[21:53] *** notable6 left
[21:54] *** committable6 joined
[21:54] *** shareable6 joined
[21:54] *** ChanServ sets mode: +v shareable6

[21:55] *** reportable6 joined
[21:55] *** notable6 joined
[21:58] *** undersightable6 joined
[21:58] *** ChanServ sets mode: +v undersightable6

[21:59] *** Manifest0 joined
[22:05] *** Manifest0 left
[22:10] *** Manifest0 joined
[22:14] <TreyHarris> I'm getting warned by the perl6-users ezmlm daemon that some of my messages are bouncing. But the report says Gmail's rejecting them with, "Our system has detected that this message does not meet IPv6 sending guidelines regarding PTR records and authentication. Please review https://support.google.com/mail/?p=IPv6AuthError for more information." Could someone point me in the direction of the person I should

[22:14] <TreyHarris> direct this to?

[22:14] <timotimo> maybe it's a noc.perl.org thing?

[22:14] *** Sgeo__ joined
[22:18] *** Sgeo_ left
[22:18] <TreyHarris> timotimo: Thanks

[22:35] *** netrino left
[22:52] *** rindolf left
[22:58] *** Manifest0 left
[23:02] *** Manifest0 joined
[23:05] *** netrino joined
[23:05] *** undersightable6 left
[23:05] *** shareable6 left
[23:05] *** squashable6 left
[23:05] *** committable6 left
[23:05] *** unicodable6 left
[23:05] *** greppable6 left
[23:05] *** notable6 left
[23:05] *** evalable6 left
[23:05] *** nativecallable6 left
[23:05] *** benchable6 left
[23:05] *** bloatable6 left
[23:05] *** statisfiable6 left
[23:05] *** bisectable6 left
[23:05] *** releasable6 left
[23:05] *** coverable6 left
[23:05] *** quotable6 left
[23:05] *** reportable6 left
[23:07] *** leont joined
[23:07] *** Manifest0 left
[23:08] *** notable6 joined
[23:08] *** coverable6 joined
[23:09] *** statisfiable6 joined
[23:09] *** ChanServ sets mode: +v statisfiable6

[23:09] *** greppable6 joined
[23:09] *** ChanServ sets mode: +v greppable6

[23:09] *** unicodable6 joined
[23:10] *** benchable6 joined
[23:10] *** evalable6 joined
[23:10] *** ChanServ sets mode: +v evalable6

[23:10] *** undersightable6 joined
[23:10] *** ChanServ sets mode: +v undersightable6

[23:11] *** reportable6 joined
[23:11] *** ChanServ sets mode: +v reportable6

[23:11] *** quotable6 joined
[23:11] *** ChanServ sets mode: +v quotable6

[23:11] *** bisectable6 joined
[23:11] *** bloatable6 joined
[23:11] *** farcas82 joined
[23:12] *** Manifest0 joined
[23:12] *** shareable6 joined
[23:12] *** ChanServ sets mode: +v shareable6

[23:12] *** committable6 joined
[23:12] *** nativecallable6 joined
[23:12] *** ChanServ sets mode: +v nativecallable6

[23:13] *** releasable6 joined
[23:13] *** ChanServ sets mode: +v releasable6

[23:13] *** squashable6 joined
[23:13] *** ChanServ sets mode: +v squashable6

[23:19] *** Manifest0 left
[23:24] *** Manifest0 joined
[23:30] *** pecastro left
[23:48] *** vrurg joined
[23:50] *** Manifest0 left
[23:56] *** Manifest0 joined
