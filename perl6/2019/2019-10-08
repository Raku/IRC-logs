[00:03] *** reach_satori left
[00:07] *** reach_satori joined
[00:15] *** wildtrees left
[00:37] *** reportable6 left
[00:37] *** reportable6 joined
[00:52] *** Actualeyes left
[00:52] *** Actualeyes joined
[00:55] *** khisanth_ left
[00:59] *** Kaiepi left
[01:03] *** Kaiepi joined
[01:05] *** softmoth_ joined
[01:06] *** MasterDuke left
[01:06] *** Kaiepi left
[01:07] *** Kaiepi joined
[01:07] *** softmoth left
[01:09] *** khisanth_ joined
[01:09] *** molaf left
[01:11] *** ChoHag left
[01:11] *** ChoHag joined
[01:22] *** molaf joined
[01:53] *** ravenousmoose joined
[01:57] *** ravenousmoose left
[02:10] *** ctilmes joined
[02:12] <ctilmes> tony-o: I use DB::Pg a lot.  It is the most mature and most tested.  DB::MySQL and DB::SQLite are based on code extracted from DB::Pg, but are less tested themselves.

[02:12] <tellable6> 2019-10-07T18:36:31Z #perl6 <tony-o> ctilmes how production ready do you suppose 

[02:12] <tellable6> 2019-10-07T18:36:48Z #perl6 <tony-o> ctilmes DB::MySQL is?

[02:14] *** ctilmes left
[02:23] *** Cabanossi left
[02:25] *** Cabanoss- joined
[02:28] *** Actualeyes left
[02:29] *** Actualeyes joined
[02:29] *** squashable6 left
[02:31] *** lucasb left
[02:35] *** squashable6 joined
[02:45] <cpan-p6> New module released to CPAN! Tomtit (0.1.5) by 03MELEZHIK

[02:45] *** __jrjsmrtn__ left
[02:46] *** __jrjsmrtn__ joined
[03:28] *** reach_satori left
[03:37] *** Woodi left
[03:49] *** Woodi joined
[04:02] *** softmoth_ is now known as softmoth

[04:05] *** sno left
[04:05] *** Some-body_ joined
[04:07] *** DarthGandalf left
[04:07] *** Some-body_ is now known as DarthGandalf

[04:24] <guifa> Someone joking talked about using ¿? and ¡! as circumfixes and tried it out. The ¿? works fine but ¡ ! doesn’t for some reason, even though I’m fairly certain they have the same level of precedence

[04:27] <guifa> Ah, it’s because ! is a meta operator, but if there’s no operator coming after it, but there is a defined circumfix using !, perhaps the grammar is failing too quickly to try to provide that helpful error message?

[04:38] *** ravenousmoose joined
[04:42] *** ravenousmoose left
[05:04] *** jmerelo joined
[05:16] *** khisanth_ left
[05:29] *** softmoth left
[05:34] *** khisanth_ joined
[05:35] *** Doc_Holliwood left
[05:49] <Geth_> ¦ doc: d1c5b4ccf4 | (JJ Merelo)++ | doc/Language/grammars.pod6

[05:49] <synopsebot> Link: https://doc.perl6.org/language/grammars

[05:49] <Geth_> ¦ doc: Includes the example and explanation

[05:49] <Geth_> ¦ doc: 

[05:49] <Geth_> ¦ doc: Adding commentary line complicated the grammar a bit too much, and I wasn't clear what the message was anyway. I guess that for exemplifying the reuse of grammars and corresponding actions it's OK, as well as for showing off some kinda complicated grammars.

[05:49] <Geth_> ¦ doc: 

[05:49] <Geth_> ¦ doc: This closes #1759, if this is not what you were looking for, feel free to clarify and reopen.

[05:49] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/d1c5b4ccf4

[05:55] <Xliff> m: class A { has $.able = 2; has $.baker = 'β'; }; say A.new».<able baker> 

[05:55] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Type A does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[05:57] <Xliff> m: class A { has $.able = 2; has $.baker = 'β'; }; my $a = A.new; say <able baker>».&{ $a."$_"() }

[05:57] <camelia> rakudo-moar 7e76762c5: OUTPUT: «(2 β)␤»

[05:57] *** molaf left
[05:57] <Xliff> m: class A { has $.able is rw = 2; has $.baker is rw = 'β'; }; my $a = A.new; <able baker>».&{ $a."$_"() } = ('ni', 'mo'); say <able baker>».&{ $a."$_"() }

[05:57] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Cannot assign to a readonly variable or a value␤  in block <unit> at <tmp> line 1␤␤»

[05:58] <Xliff> m: class A { has $.able is rw = 2; has $.baker is rw = 'β'; }; my $a = A.new; <able baker>».&{ return-rw $a."$_"() } = ('ni', 'mo'); say <able baker>».&{ $a."$_"() }

[05:58] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[05:58] <Xliff> m: class A { has $.able is rw = 2; has $.baker is rw = 'β'; }; my $a = A.new; <able baker>».&{ sub { return-rw $a."$_"() } } = ('ni', 'mo'); say <able baker>».&{ $a."$_"() }

[05:58] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Cannot modify an immutable Sub (sub { })␤  in block <unit> at <tmp> line 1␤␤»

[05:59] <Xliff> m: class A { has $.able is rw = 2; has $.baker is rw = 'β'; }; my $a = A.new; <able baker>».&{ sub { return-rw $a."$_"() }() } = ('ni', 'mo'); say <able baker>».&{ $a."$_"() }

[05:59] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Use of uninitialized value $_ of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in sub  at <tmp> line 1␤No such method '' for invocant of type 'A'. Did you mean any of the…»

[05:59] <Xliff> m: class A { has $.able is rw = 2; has $.baker is rw = 'β'; }; my $a = A.new; <able baker>».&{ sub { return-rw $a."$^a"() }($_) } = ('ni', 'mo'); say <able baker>».&{ $a."$_"() }

[05:59] <camelia> rakudo-moar 7e76762c5: OUTPUT: «No such method 'able' for invocant of type 'Str'. Did you mean any of these?␤    abs␤    all␤␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:00] <Xliff> m: class A { has $.able = 2; has $.baker = 'β'; }; my $a = A.new; ($a, $b) = <able baker>».&{ $a."$_"() }; $a.say; $b.say

[06:00] <camelia> rakudo-moar 7e76762c5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3s $.baker = 'β'; }; my $a = A.new; ($a, 7⏏5$b) = <able baker>».&{ $a."$_"() }; $a.s␤»

[06:00] <Xliff> m: class A { has $.able = 2; has $.baker = 'β'; }; my $a = A.new; my ($a, $b) = <able baker>».&{ $a."$_"() }; $a.say; $b.say

[06:00] <camelia> rakudo-moar 7e76762c5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol '$a'␤at <tmp>:1␤------> 3 $.baker = 'β'; }; my $a = A.new; my ($a7⏏5, $b) = <able baker>».&{ $a."$_"() }; $a␤    expecting any of:␤        shape declaration␤»

[06:00] *** domidumont joined
[06:01] <Xliff> m: class A { has $.able = 2; has $.baker = 'β'; }; my $A = A.new; my ($a, $b) = <able baker>».&{ $A."$_"() }; $a.say; $b.say

[06:01] <camelia> rakudo-moar 7e76762c5: OUTPUT: «2␤β␤»

[06:01] <Geth_> ¦ doc: a3b39c4f32 | (JJ Merelo)++ | doc/Language/grammars.pod6

[06:01] <Geth_> ¦ doc: No tabs

[06:01] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/a3b39c4f32

[06:01] <synopsebot> Link: https://doc.perl6.org/language/grammars

[06:07] *** jmerelo left
[06:09] *** sarna joined
[06:09] <sarna> hello, is there any html parser written in raku, or do I have to resort to inline::perl5?

[06:10] *** hankache joined
[06:10] <Xliff> sarna: There's HTML::Marser::XML. Don't know how good that is.

[06:11] <sarna> I found bindings for Gumbo too, I'll try both

[06:11] <sarna> thanks Xliff 

[06:14] *** domidumont left
[06:14] *** hankache left
[06:22] *** squashable6 left
[06:28] *** squashable6 joined
[06:32] *** cpan-p6 left
[06:33] *** cpan-p6 joined
[06:33] *** cpan-p6 left
[06:33] *** cpan-p6 joined
[06:44] *** kensanata joined
[07:05] *** domidumont joined
[07:06] <Geth_> ¦ doc: sarna++ created pull request #3047: Fix wrong output

[07:06] <Geth_> ¦ doc: review: https://github.com/perl6/doc/pull/3047

[07:08] <sarna> oh geez that's me

[07:08] *** daxim joined
[07:15] *** sena_kun joined
[07:16] <Geth_> ¦ doc: 2c35861159 | sarna++ | doc/Language/list.pod6

[07:16] <Geth_> ¦ doc: Fix wrong output

[07:16] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/2c35861159

[07:16] <Geth_> ¦ doc: bec6bdb7c0 | sarna++ (committed using GitHub Web editor) | doc/Language/list.pod6

[07:16] <Geth_> ¦ doc: Merge pull request #3047 from sarna/master

[07:16] <synopsebot> Link: https://doc.perl6.org/language/list

[07:16] <Geth_> ¦ doc: 

[07:16] <Geth_> ¦ doc: Fix wrong output

[07:16] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/bec6bdb7c0

[07:29] *** rindolf3 joined
[07:29] <Geth_> ¦ modules.perl6.org: d17c8c140e | (Roman Baumer)++ | update-modules.perl6.org

[07:29] <Geth_> ¦ modules.perl6.org: pngcrush chech refine

[07:29] <Geth_> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/d17c8c140e

[07:39] *** dakkar joined
[07:53] *** isBEKaml joined
[07:53] *** isBEKaml left
[07:54] *** zakharyas joined
[07:55] *** wamba joined
[07:56] *** rindolf3 left
[08:05] *** antoniogamiz joined
[08:05] <antoniogamiz> o/

[08:06] <antoniogamiz> m: say "/a/".Regex

[08:06] <camelia> rakudo-moar 7e76762c5: OUTPUT: «No such method 'Regex' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[08:06] <antoniogamiz> how can i convert strings to regexs? mm

[08:08] <antoniogamiz> m: my $regex="a?"; say "a" ~~ /$regex/

[08:08] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Nil␤»

[08:08] <antoniogamiz> mmm

[08:10] <Xliff> m: my $regex="a?"; say "a" ~~ / "$regex" /

[08:10] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Nil␤»

[08:10] <Xliff> m: my $regex="a?"; say "a" ~~ / { $regex } /

[08:10] <camelia> rakudo-moar 7e76762c5: OUTPUT: «｢｣␤»

[08:10] <Xliff> m: my $regex="a?"; say "a" ~~ / a? /

[08:10] <camelia> rakudo-moar 7e76762c5: OUTPUT: «｢a｣␤»

[08:10] <Xliff> m: my $regex="a?"; say "a" ~~ / <{ $regex }> /

[08:10] <camelia> rakudo-moar 7e76762c5: OUTPUT: «｢a｣␤»

[08:10] <Xliff> ^^

[08:11] <antoniogamiz> uoh, thanks a lot! :D

[08:11] <Xliff> :)

[08:31] *** wamba left
[08:32] *** ChoHag left
[08:33] *** ChoHag joined
[08:43] *** sarna left
[08:53] *** Sgeo left
[08:57] *** zakharyas left
[08:59] *** zakharyas joined
[09:04] *** xinming joined
[09:07] *** xinming_ left
[09:20] *** Cabanoss- left
[09:26] *** Cabanossi joined
[09:31] *** domidumont1 joined
[09:32] *** ChoHag left
[09:32] *** ChoHag joined
[09:34] *** domidumont left
[09:37] *** antoniogamiz left
[10:13] *** aborazmeh joined
[10:13] *** aborazmeh left
[10:13] *** aborazmeh joined
[10:19] *** softmoth joined
[10:21] *** cpan-p6 left
[10:26] *** cpan-p6 joined
[10:26] *** cpan-p6 left
[10:26] *** cpan-p6 joined
[10:43] *** pat_js joined
[11:01] <AlexDaniel> Gumbo is pretty great, especially now given that the segfaults were fixed

[11:05] <Xliff> Gumbo? 

[11:05] <Xliff> HTML parsing lib?

[11:05] <Xliff> How is that compared to Mojo::DOM?

[11:05] <jast> no segfaults sounds like a great feature for sure :-)

[11:06] *** aborazmeh left
[11:13] *** Black_Ribbon left
[11:14] *** zakharyas left
[11:33] *** xinming left
[11:34] *** xinming joined
[11:42] <AlexDaniel> Xliff: I'm pretty sure it's much faster and it handles slightly broken html better

[11:43] <Xliff> Ah.

[11:55] *** wamba joined
[12:21] *** sarna joined
[12:21] <sarna> hey, is there a way to install all packages from the "depends" section in META6.json?

[12:21] <sarna> with zef/mi6/some other tool

[12:21] <Xliff> zef --install-deps .

[12:21] <sarna> thanks!

[12:22] <sarna> doesn't work :D

[12:22] <Xliff> What error did it give you?

[12:22] <sarna> it printed usage

[12:22] <Xliff> Are you in the directory with the META6.json?

[12:22] <sarna> yes

[12:22] <lizmat> old version of zef ?

[12:23] <sarna> 0.7.1

[12:23] <Xliff> I'm on 0.7.4

[12:23] <lizmat> --deps-only  

[12:23] <sarna> damn, alright

[12:23] <Xliff> Ah --deps-only. My bad.

[12:24] <lizmat> Xliff: fwiw, you're suggestion made complete sense to me  :-)

[12:24] <lizmat> *your

[12:24] *** cwilson left
[12:24] <Xliff> Ah! --serial exists! 

[12:24] <Xliff> Wish there were configurable options. I would make that default.

[12:25] <sarna> okay, this one works :)  thanks y'all

[12:27] *** gabiruh joined
[12:31] *** Sgeo joined
[12:38] *** Guest3346 left
[12:55] *** mensvaga joined
[12:57] *** sarna left
[13:06] *** pmurias joined
[13:06] <pmurias> .

[13:06] <tellable6> 2019-10-07T17:17:06Z #perl6 <SmokeMachine> pmurias: look how interesting: https://perl6.github.io/6pad/#9789cd026063730cd45d617aaa2d489f

[13:10] *** pmurias left
[13:11] *** nino_ joined
[13:12] *** zakharyas joined
[13:12] *** pmurias joined
[13:14] <SmokeMachine> pmurias: has the ->result hanged for you on $p4?

[13:15] *** rindolf3 joined
[13:15] <rindolf3> Hi all.

[13:15] <pmurias> SmokeMachine: I'm checking that out

[13:16] <pmurias> SmokeMachine: take a long time to load on my crappy mobile internet

[13:16] <pmurias> rindolf3: hi

[13:16] <pmurias> * takes

[13:17] <rindolf3> TimToady: and all! Hi: hope i''m not trolling but I think we might as well admit that the perl 6 implementation and that  the perl 6 deskign takes too long to implement and will take too long to reimplement every time. perhaps let's do a "third system design" of some less ambitious and less perfect but more realizable design.

[13:20] *** cwilson joined
[13:21] <pmurias> rindolf3: there have been various mini Perl6s in the past and people didn't really seem to be interested in them

[13:21] <Xliff> rindolf3: Why try another implementation when the current one works fine?

[13:28] *** Guest3346 joined
[13:28] *** rindolf3 left
[13:28] *** rindolf3 joined
[13:30] <rindolf3> Xliff: we will need to redo it sometimes in the future

[13:31] *** lucasb joined
[13:32] *** ravenousmoose joined
[13:32] <Xliff> rindolf3: And I ask again... why?

[13:32] *** ravenousmoose left
[13:32] <rindolf3> Xliff: perhaps we can admit that perl 5 competitors like python, ruby, julia, go, JS, typescript, etc. are decent enough, and that we can recommend people to use them instead of p5 or in addition to it, and many of them were inspired by p5 to a certain degree.

[13:33] <Xliff> I would recommend that someone use the right tool for the job.

[13:34] <Xliff> And the current implementation of Perl6 is rapidly becoming an option as the "right tool" for many jobs.

[13:34] <rindolf3> Xliff: i actually used Inline::Python to embed http://hspell.ivrix.org.il/ into my perl 5 code

[13:34] <Xliff> And while Python, Julia, Go and the rest have their strengths and weaknesses, I think Perl6 covers more bases than any single language I have used.

[13:34] <rindolf3> well, think about it

[13:35] <rindolf3> so far it seems I won't waste too much time writing my euler solutions in p6.

[13:35] <Xliff> What is the deficiency you are running into?

[13:36] <SmokeMachine> rindolf3: Sorry, but I can't understand (probably my terrible english's fault), what are you suggesting?

[13:36] <Xliff> rindolf3: Do you have example euler code in Perl 5?

[13:36] <pmurias> rindolf3: who do you mean as "we", in your admit suggestion

[13:37] <rindolf3> SmokeMachine, Xliff: yes, the code performs slower than p5, cpy3 and usually much slower than pypy

[13:37] <Xliff> Ah! 

[13:37] <jnthn> Despite many folks making the waterfall model the butt of their jokes, it's surprising how many of them seem to think language design/implementation happens that way, rather than implementation feeding back into design, until they converge on something implementable and good to use.

[13:37] <Xliff> Now I understand. 

[13:38] <rindolf3> pmurias: the perl 6 design community

[13:38] <Xliff> rindolf3: Have you tried implementing thise solutions in nqp?

[13:38] <rindolf3> Xliff: nqp is unreadable

[13:38] <rindolf3> Xliff: and requires a lot more work

[13:39] <Xliff> rindolf3: Ah.

[13:39] <rindolf3> Xliff: I think zoffix implemented it once or twice for me

[13:39] <Xliff> rindolf3: Can you show me some of the euler code you did in perl6?

[13:39] <Xliff> Or even perl5?

[13:39] <sena_kun> if one wants to make moarvm+rakudo slower, one needs to help or sponsor its development. there are already cases when Perl 6 performance is on par or better with other languages and it is pretty clear that other parts of it can be improved.

[13:40] <jnthn> sena_kun: I hope you mean "faster" ;)

[13:40] <Xliff> heh

[13:40] <sena_kun> you don't need to throw everything away and start from scratch again and again, just polish the thing we already have

[13:40] <rindolf3> Xliff: anyway, I also have decided to stop using mageia because mageia cauldron is not as good as fedora and it has a much smaller community

[13:40] <sena_kun> jnthn, ah, indeed

[13:40] <sena_kun> :)

[13:41] <pmurias> rindolf3: I'm sure a lot of the members of the Perl 6 design community consider a lot of other languages decent enough for use

[13:41] <pmurias> rindolf3: but I don't see a collective "recommendation" accomplishing anything

[13:41] <rindolf3> Xliff: sooner or later ppl can admit they were wrong: https://www.shlomifish.org/humour/Selina-Mandrake/ongoing-text.html#from-dispeller-to-selina

[13:42] <Xliff> rindolf3: Code?

[13:42] <rindolf3> Xliff: sorry - itis a private repo due to PE policy

[13:43] *** ravenousmoose joined
[13:43] <Xliff> Ah. 

[13:43] <Xliff> What about some of the things Zoffix helped you with?

[13:43] <Xliff> Are those anywhere?

[13:43] <rindolf3> Xliff: i can share after i get back home - i''m at the ward now

[13:43] <Xliff> OK.

[13:43] <rindolf3> Xliff:  they should be

[13:46] <Xliff> m: sub lpf($n is copy) { for 2, 3, *+2 ... * { while $n %% $ { $n div= $; return $_ if $_ > $n }; }; }; lpf( 600_851_475_143 )

[13:46] <camelia> rakudo-moar 7e76762c5: OUTPUT: «(timeout)»

[13:46] <Xliff> Hmmm... 

[13:46] <Xliff> According to this page, that should have completed in 2.6 seconds -- https://perl6advent.wordpress.com/2012/12/04/day-4-having-fun-with-rakudo-and-project-euler/

[13:47] <Xliff> m: sub lpf($n is copy) { for 2, 3, *+2 ... * { while $n %% $_ { $n div= $_; return $_ if $_ > $n }; }; }; lpf( 600_851_475_143 )

[13:47] <camelia> rakudo-moar 7e76762c5: ( no output )

[13:47] <Xliff> m: sub lpf($n is copy) { for 2, 3, *+2 ... * { while $n %% $_ { $n div= $_; return $_ if $_ > $n }; }; }; lpf( 600_851_475_143 ); say now - BEGIN now

[13:47] <camelia> rakudo-moar 7e76762c5: OUTPUT: «0.12019765␤»

[13:47] <Xliff> m: sub lpf($n is copy) { for 2, 3, *+2 ... * { while $n %% $_ { $n div= $_; return $_ if $_ > $n }; }; }; say lpf( 600_851_475_143 ); say now - BEGIN now

[13:47] <camelia> rakudo-moar 7e76762c5: OUTPUT: «6857␤0.14821175␤»

[13:47] <Xliff> There we go. 

[13:47] <Xliff> Note the difference 7 years makes.

[13:47] <Xliff> 2.6s down to 0.14s

[13:48] <Xliff> m: sub lpf($n is copy) { for 2, 3, *+2 ... * { while $n %% $_ { $n div= $_; return $_ if $_ > $n }; }; }; say lpf( 600_851_475_143 ); say now - INIT now

[13:48] <camelia> rakudo-moar 7e76762c5: OUTPUT: «6857␤0.081017␤»

[13:48] <Xliff> And that result eliminates parsing time.

[13:49] <sena_kun> .oO ( and this is without PEA )

[13:49] <SmokeMachine> PEA?

[13:49] <sena_kun> partial escape analysis, https://en.wikipedia.org/wiki/Escape_analysis

[13:50] <Xliff> [1], -> @p { [0, @p Z+ @p, 0] } ... * ==> (*[0..100])() ==> map *.list ==> grep * > 1000000 ==> elems ==> say; say now - INIT now

[13:50] <Xliff> m: [1], -> @p { [0, @p Z+ @p, 0] } ... * ==> (*[0..100])() ==> map *.list ==> grep * > 1000000 ==> elems ==> say; say now - INIT now

[13:50] <camelia> rakudo-moar 7e76762c5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix ==> instead.␤at <tmp>:1␤------> 3.list ==> grep * > 1000000 ==> elems ==>7⏏5 say; say now - INIT now␤»

[13:50] <Xliff> m: [1], -> @p { [0, @p Z+ @p, 0] } ... * ==> (*[0..100])() ==> map *.list ==> grep * > 1000000 ==> elems() ==> say; say now - INIT now

[13:50] <camelia> rakudo-moar 7e76762c5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at <tmp>:1…»

[13:50] <Xliff> m: [1], -> @p { [0, @p Z+ @p, 0] } ... * ==> (*[0..100])() ==> map *.list ==> grep * > 1000000 ==> elems() ==> say(); say now - INIT now

[13:50] <camelia> rakudo-moar 7e76762c5: OUTPUT: «0␤0.02288661␤»

[13:54] <Xliff> m: [1], -> @p { [0, @p Z+ @p, 0] } ... * ==> (*[0..100])() ==> map: *.list ==> grep: * > 1000000 ==> elems() ==> say(); say now - INIT now

[13:54] <camelia> rakudo-moar 7e76762c5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3p, 0] } ... * ==> (*[0..100])() ==> map:7⏏5 *.list ==> grep: * > 1000000 ==> elems(␤    expecting any of:␤        colon pair␤»

[13:55] <Xliff> m: [1], -> @p { [0, @p Z+ @p, 0] } ... * ==> (*[0..100])() ==> map *.list ==> grep * > 1000000 ==> elems() ==> say(); say now - INIT now

[13:55] <camelia> rakudo-moar 7e76762c5: OUTPUT: «0␤0.02185019␤»

[13:55] <Xliff> I don't think I've got the invocation of that right. 

[13:56] <pmurias> SmokeMachine: I'll investigate what's wrong with the promises

[14:00] <pmurias> SmokeMachine: ahh, it seem the Perl 6 Promises are broken/NYI

[14:01] <pmurias> will investigate further

[14:06] *** molaf joined
[14:11] <SmokeMachine> pmurias: but that happened for you too?

[14:14] *** Doc_Holliwood joined
[14:21] <pmurias> SmokeMachine: yes the same thing

[14:25] *** softmoth left
[14:29] <AlexDaniel> rindolf3: you're not entirely wrong, I can probably agree that we can simplify things a little bit by deprecating and then removing some parts or features

[14:30] <AlexDaniel> but I don't think that'll really make it easier to implement the language, it'll just make it a little bit smaller and maybe more consistent

[14:30] *** softmoth joined
[14:32] *** pat_js left
[14:33] <AlexDaniel> I also wouldn't mind if somebody creates a speed-oriented compiler that implements a subset of Raku. Why not!

[14:33] <moritz> niecza!

[14:33] <AlexDaniel> but rakudo is already fast enough for all the things I do, and it is constantly getting faster

[14:34] *** ravenousmoose left
[14:34] <AlexDaniel> so it'll be a bit tough to sell that to me, maybe if it can produce code for microcontrollers or something then I'll use it

[14:36] <AlexDaniel> rindolf3: for example, have you seen this? https://www.youtube.com/watch?v=QNeu0wK92NE

[14:37] <pmurias> AlexDaniel: implementing a tiny subset of Perl 6 that runs super fast is certainly doable

[14:37] <AlexDaniel> pmurias: it was actually attempted just recently, I just can't remember the name of the thing…

[14:37] <pmurias> AlexDaniel: but just simplifing it a bit won't help significantly

[14:37] <AlexDaniel> it also wasn't open-source

[14:38] <pmurias> AlexDaniel: forgot a name of that to lua thing, but I remember that too

[14:38] <AlexDaniel> ah, this thing: https://twitter.com/agentzh/status/826922812099043328

[14:53] *** kensanata left
[14:58] *** wamba left
[15:02] *** wamba joined
[15:08] *** pat_js joined
[15:10] *** pmurias left
[15:11] *** Sgeo_ joined
[15:14] *** Sgeo left
[15:23] *** Sgeo__ joined
[15:26] *** Sgeo_ left
[15:31] *** jmerelo joined
[15:31] *** xdecimal joined
[15:32] *** xdecimal left
[15:35] *** wildtrees joined
[15:36] *** wildtrees left
[15:37] *** wildtrees joined
[15:54] *** Kaiepi left
[15:57] *** patrickb joined
[16:08] *** lgtaube left
[16:12] *** rindolf3 left
[16:12] *** squashable6 left
[16:14] <moon_child> AlexDaniel: sounds like nqp

[16:14] *** pat_js left
[16:14] *** domidumont1 left
[16:15] *** squashable6 joined
[16:39] *** dakkar left
[17:20] *** Cabanossi left
[17:32] <tony-o> .tell ctilmes something is up with the DB::MySQL , it is flapping segfaults, works fine, and randomly exiting on OSX, it seems a lot more stable on linux but i'm still testing

[17:32] <tellable6> tony-o, I'll pass your message to ctilmes

[17:33] *** Kaiepi joined
[17:35] *** Cabanossi joined
[17:36] *** zakharyas left
[17:43] *** molaf left
[17:43] *** ctilmes joined
[17:44] <ctilmes> tony-o: I develop under linux, but appreciate any guidance to bugs you can narrow down

[17:44] <tellable6> 2019-10-08T17:32:12Z #perl6 <tony-o> ctilmes something is up with the DB::MySQL , it is flapping segfaults, works fine, and randomly exiting on OSX, it seems a lot more stable on linux but i'm still testing

[17:44] <nino_> so I read perl is dying, any comments?

[17:46] <Kaiepi> is it that article that was on hn

[17:48] <guifa> Programming languages don’t really die, particularly ones that have been around as long as perl has.  There are people still using COBOL and FORTRAN for crying out loud

[17:48] *** wamba left
[17:50] <vrurg> With regard to that article, we have a good proverb on this: dogs barking, caravan is walking.

[17:51] <vrurg> Dogs always bark...

[17:55] *** Itaipu_ joined
[17:55] *** SCHAPiE left
[17:55] *** Itaipu left
[17:56] <Kaiepi> print in perl 5 does the same thing as it does in perl 6 wrt newlines, right?

[17:57] <guifa> Indeed

[17:58] <Kaiepi> aight, so i thought that article was pretty silly when they say it's hard to tell what code written in it is doing, then explain what print does wrong. of course it'd be hard to tell what it's doing if you can't write hello world with it

[17:58] *** SCHAPiE joined
[18:01] <guifa> The difference comes in when you add in say

[18:01] <guifa> say in P5 is (AFAIA) just print + NL

[18:02] <guifa> in P6, say/put have NL, print does not.  say reads from .gist, put/print from .Str

[18:06] *** chloekek joined
[18:14] <tobs> m: $*OUT.nl-out = "\r\n"; say "Content-Type: text/plain"  # can also set the line separator for a stream

[18:14] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Content-Type: text/plain

[18:15] <tobs> P5 has $\ to which print, not say, reacts I think

[18:16] *** krychu joined
[18:17] *** pecastro joined
[18:18] *** [Coke] joined
[18:18] <[Coke]> m: say "\xA66E"

[18:18] <camelia> rakudo-moar 7e76762c5: OUTPUT: «ꙮ␤»

[18:19] *** krychu left
[18:23] *** wamba joined
[18:29] *** ravenousmoose joined
[18:32] *** sno joined
[18:33] *** ctilmes left
[18:33] *** ctilmes joined
[18:35] *** sno left
[18:38] *** ctilmes left
[18:39] *** Kaiepi left
[18:47] <[Coke]> m: say "\xA66E".charnames

[18:47] <camelia> rakudo-moar 7e76762c5: OUTPUT: «No such method 'charnames' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[18:49] <[Coke]> m: say "\xA66E".uninames

[18:49] <camelia> rakudo-moar 7e76762c5: OUTPUT: «(CYRILLIC LETTER MULTIOCULAR O)␤»

[18:50] *** Guest93 left
[18:51] *** jmerelo left
[18:51] *** sno joined
[18:59] *** patrickb left
[19:06] *** wamba left
[19:07] *** wamba joined
[19:07] *** Black_Ribbon joined
[19:20] *** Sgeo__ left
[19:21] *** Sgeo joined
[19:28] *** squashable6 left
[19:31] *** squashable6 joined
[19:33] *** sena_kun left
[19:40] *** abraxxa left
[19:41] *** agentzh left
[19:43] *** agentzh joined
[19:49] *** ravenousmoose left
[19:51] *** |oLa| joined
[20:01] *** MasterDuke joined
[20:08] <cpan-p6> New module released to CPAN! LibCurl (0.9) by 03CTILMES

[20:09] *** [Coke] left
[20:09] <Xliff> .

[20:11] *** krychu joined
[20:24] *** softmoth left
[20:25] *** |oLa| left
[20:33] *** SCHAPiE left
[20:36] *** Kaiepi joined
[20:44] *** SCHAPiE joined
[20:46] <Xliff> m: class A { method A { say $*PACKAGE.WHICH }; }; A.a; A.new.a

[20:46] <camelia> rakudo-moar 7e76762c5: OUTPUT: «No such method 'a' for invocant of type 'A'. Did you mean 'A'?␤  in block <unit> at <tmp> line 1␤␤»

[20:46] <Xliff> m: class A { method A { say $*PACKAGE.WHICH }; }; A.new.a

[20:46] <camelia> rakudo-moar 7e76762c5: OUTPUT: «No such method 'a' for invocant of type 'A'. Did you mean 'A'?␤  in block <unit> at <tmp> line 1␤␤»

[20:46] <Xliff> m: class A { method a { say $*PACKAGE.WHICH }; }; A.new.a

[20:46] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Failure|75623200␤»

[20:46] <Xliff> m: class A { method a { say $*PACKAGE.WHICH }; }; A.a; A.new.a

[20:46] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Failure|78780160␤Failure|78935320␤»

[20:46] <Xliff> m: class A { method a { say $*PACKAGE }; }; A.a; A.new.a

[20:46] <camelia> rakudo-moar 7e76762c5: OUTPUT: «Dynamic variable $*PACKAGE not found␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:47] <Xliff> m: class A { method a { say ::?CLASS.WHICH }; }; A.a; A.new.a

[20:47] <camelia> rakudo-moar 7e76762c5: OUTPUT: «A|U78873760␤A|U78873760␤»

[20:51] *** quester joined
[20:55] <Xliff> m: my %h = ( a => 1, b => 2, c => 4 ); my %d = %h; my @a = ( %d.pairs.map({ .value *= 2; .clone }).flat ); %d.pairs.say; h.pairs.say; 

[20:55] <camelia> rakudo-moar 7e76762c5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    h used at line 1␤␤»

[20:55] <Xliff> m: my %h = ( a => 1, b => 2, c => 4 ); my %d = %h; my @a = ( %d.pairs.map({ .value *= 2; .clone }).flat ); %d.pairs.say; %h.pairs.say; 

[20:55] <camelia> rakudo-moar 7e76762c5: OUTPUT: «(a => 2 c => 8 b => 4)␤(b => 2 a => 1 c => 4)␤»

[21:01] *** molaf joined
[21:04] *** MilkmanDan left
[21:05] *** MilkmanDan joined
[21:13] *** ChoHag left
[21:15] *** ChoHag joined
[21:40] *** lgtaube joined
[21:41] *** d84 joined
[22:01] *** Actualeyes left
[22:01] *** Actualeyes joined
[22:06] *** chloekek left
[22:22] *** pecastro left
[22:36] *** batmanaod[m] left
[22:38] *** reach_satori joined
[22:40] *** MilkmanDan left
[22:40] *** MilkmanDan joined
[22:52] *** softmoth joined
[22:52] *** Black_Ribbon left
[22:53] *** wamba left
[22:57] <Geth_> ¦ doc: gdonald++ created pull request #3048: Roles can also be mixed in using 'is'.

[22:57] <Geth_> ¦ doc: review: https://github.com/perl6/doc/pull/3048

[23:00] * guifa literally just wrote “Dateish-ish” in a comment 

[23:02] *** |oLa| joined
[23:06] *** |oLa| left
[23:08] *** Doc_Holliwood left
[23:16] <vrurg> .ask jnthn I'd like to merge R#3199 if you don't mind of .-, .?+, and .?- operators.

[23:16] <synopsebot> R#3199 [open]: https://github.com/rakudo/rakudo/pull/3199 [WIP][roles] [WIP] Implement perl6/problem-solving#103

[23:16] <tellable6> vrurg, I'll pass your message to jnthn

[23:51] *** reach_satori_ joined
[23:53] <guifa> Okay, here comes a typical guifa-can’t-decide-what-to-name-something 

[23:54] <guifa> For some of the calendars I’m implementing there’s the possibility for there to be a margin of error for certain functions

[23:54] *** Kaiepi left
[23:54] *** reach_satori left
[23:54] <Xliff> guifa: FuzCal?

[23:54] <Xliff> :)\

[23:54] <guifa> Haha

[23:54] <Xliff> *:)

[23:55] <guifa> More or less actually.  I thought margin of error, but that’s normally thought of as a percentage

[23:56] <guifa> But for me it’ll be given as a range value (e.g. -1..2) so margin-of-error doesn’t quite sound right.  .spread, .accuracy, .precision are all short but don’t quite seem accurate 

[23:56] <guifa> .potential-deviation sounds … long

[23:56] <Xliff> RangeCal?

[23:57] <Xliff> RangeDates?

[23:57] <guifa> The roll will get applied to an Int

[23:58] <Xliff> You mean role?

[23:58] <guifa> so like, $date.day-of-year would return “2 but PotentialError.new(-1..2)”

[23:59] <guifa> And then one could use it as an Int (and get 2), but also say $foo.potential-error-range and get -1..2

[23:59] <Xliff> DayRange?

