[00:23] *** uzl joined
[00:25] <uzl> .tell dolmen Concerning https://colabti.org/irclogger/irclogger_log/perl6?date=2019-06-27#l293, why don't you try using a slurpy hash?

[00:25] <yoleaux> uzl: I'll pass your message to dolmen.

[00:25] <uzl> .tell dolmen Like this: perl6 -e 'unit sub MAIN(Str $arg1, *%flags) {put %flags.values}' --flag=X --flag=Y --flag=Z A

[00:25] <yoleaux> uzl: I'll pass your message to dolmen.

[00:28] <uzl> Can somebody show an example of an our-declared class variable and its use across a class hierarchy? As alluded here: https://docs.perl6.org/language/classtut#State

[00:29] *** uzl left
[00:43] *** empee0 left
[01:15] <AlexDaniel> xinming: we're getting there!

[01:35] *** nepugia_ joined
[01:37] *** nepugia left
[01:40] *** patrickb left
[01:44] *** guifa2 left
[01:51] *** mbp joined
[01:52] *** Sgeo__ joined
[01:55] *** Sgeo_ left
[01:58] *** Sgeo joined
[02:00] *** Sgeo__ left
[02:14] *** nadim left
[02:14] *** guifa2 joined
[02:18] <Xliff> m: my @a = (Any, Nil, Any, Any).grep({ .defined }).elems.say

[02:18] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´0‚ê§¬ª

[02:18] <Xliff> m: my @a = (Any, Nil, Any, Any, ()).grep({ .defined }).elems.say

[02:18] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´1‚ê§¬ª

[02:19] *** guifa2 left
[02:22] *** guifa2 joined
[02:31] *** guifa2 left
[02:33] *** Sgeo_ joined
[02:34] *** guifa2 joined
[02:34] *** Cabanossi left
[02:37] *** Sgeo left
[02:38] *** Cabanossi joined
[02:47] *** sauvin joined
[02:48] *** nepugia_ is now known as nepugia

[02:51] *** Actualeyes left
[03:01] *** nepugia left
[03:08] *** mowcat joined
[03:23] <Xliff> .tell jnthn Is this a known issue for IO::Socket::Async -> Type check failed for return value; expected OpenSSL::Bio::BIO_METHOD but got Whatever (*)

[03:23] <yoleaux> Xliff: I'll pass your message to jnthn.

[03:23] <Xliff> .tell jnthn Is there a workaround?

[03:23] <yoleaux> Xliff: I'll pass your message to jnthn.

[04:05] *** vrurg left
[04:05] *** vrurg joined
[04:31] *** Sgeo__ joined
[04:33] *** mowcat left
[04:34] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/06/perl-weekly-challenge-14-van-ecks-sequence-and-us-states.html

[04:34] <notable6> lizmat, Noted!

[04:34] *** Sgeo_ left
[04:34] <lizmat> weekly: http://ajs.github.io/tools/perl-6-list-concat-op/

[04:34] <notable6> lizmat, Noted!

[04:36] *** farcas82regreg left
[04:39] *** guifa2 left
[04:51] *** guifa2 joined
[05:51] *** coverable6 left
[05:51] *** unicodable6 left
[05:51] *** nativecallable6 left
[05:51] *** bloatable6 left
[05:51] *** statisfiable6 left
[05:51] *** quotable6 left
[05:51] *** notable6 left
[05:51] *** evalable6 left
[05:51] *** reportable6 left
[05:51] *** committable6 left
[05:51] *** releasable6 left
[05:51] *** benchable6 left
[05:51] *** greppable6 left
[05:51] *** bisectable6 left
[05:51] *** squashable6 left
[05:51] *** undersightable6 left
[05:51] *** shareable6 left
[05:52] *** bisectable6 joined
[05:52] *** releasable6 joined
[05:52] *** unicodable6 joined
[05:52] *** ChanServ sets mode: +v unicodable6

[05:52] *** greppable6 joined
[05:52] *** ChanServ sets mode: +v greppable6

[05:53] *** statisfiable6 joined
[05:53] *** quotable6 joined
[05:53] *** undersightable6 joined
[05:53] *** ChanServ sets mode: +v undersightable6

[05:54] *** reportable6 joined
[05:54] *** evalable6 joined
[05:54] *** squashable6 joined
[05:55] *** notable6 joined
[05:55] *** coverable6 joined
[05:55] *** ChanServ sets mode: +v coverable6

[05:56] *** shareable6 joined
[05:56] *** nativecallable6 joined
[05:56] *** bloatable6 joined
[05:56] *** ChanServ sets mode: +v bloatable6

[05:56] *** benchable6 joined
[05:56] *** ChanServ sets mode: +v benchable6

[05:56] *** committable6 joined
[05:56] *** ChanServ sets mode: +v committable6

[06:20] *** ufobat__ joined
[06:25] *** ufobat_ left
[06:33] *** farcas82regreg joined
[06:51] *** vrurg left
[06:51] *** vrurg joined
[06:56] *** hankache joined
[06:57] *** hankache left
[06:59] *** dolmen joined
[06:59] *** dolmen left
[07:00] *** dolmen joined
[07:02] *** rindolf joined
[07:02] *** dolmen left
[07:44] *** sjm_uk joined
[07:53] *** sena_kun joined
[08:17] *** nadim joined
[08:36] *** |oLa| joined
[08:45] *** hankache joined
[08:57] *** nadim left
[09:05] *** tyil left
[09:08] *** tyilanmenyn joined
[09:15] *** nadim joined
[09:19] *** sjm_uk left
[09:23] *** sjm_uk joined
[09:27] <lizmat> weekly: http://blogs.perl.org/users/athanasius/2019/06/perl-weekly-challenge-014.html

[09:27] <notable6> lizmat, Noted!

[09:31] *** tyilanmenyn is now known as tyil

[09:37] *** nadim left
[09:44] *** hankache left
[09:45] *** sjm_uk left
[09:56] *** nadim joined
[09:56] *** sjm_uk joined
[09:58] *** Actualeyes joined
[10:00] *** pmurias joined
[10:08] *** Woodi left
[10:12] *** Sgeo joined
[10:13] *** Sgeo__ left
[10:14] *** Sgeo_ joined
[10:16] *** Sgeo left
[10:16] *** Sgeo__ joined
[10:18] *** domidumont joined
[10:20] *** Sgeo_ left
[10:25] <pmurias> For use foo:from<node.js> (and for the equivalents for other dynamic languages) I'm considering two approaches: 1. forbid accessing foo at compile time and 2. allow it but reload the module at runtime with forgot state

[10:25] <pmurias> Which of those too seem sane?

[10:26] <pmurias> hmm, I could allow either using it at runtime or at compile time (so if you use it before it's serialized then it's a stub at runtime)

[10:31] *** pmurias left
[10:43] *** natrys joined
[10:45] *** Black_Ribbon left
[10:55] *** domidumont left
[11:01] *** sjm_uk left
[11:08] *** pmurias joined
[11:16] *** tyil is now known as akagi

[11:19] *** nepugia joined
[11:30] *** akagi is now known as tyil

[11:38] *** pmurias left
[11:43] *** hankache joined
[12:02] *** Woodi joined
[12:21] *** patrickb joined
[12:22] *** discord6 left
[12:23] *** discord6 joined
[12:23] *** discord6 left
[12:23] *** discord6 joined
[12:24] *** Geth joined
[12:24] *** telex left
[12:25] *** synopsebot joined
[12:35] *** kent\n joined
[12:35] <Geth> ¬¶ p6-sake: 31303e400e | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[12:35] <Geth> ¬¶ p6-sake: Let users have their own help task

[12:35] <Geth> ¬¶ p6-sake: 

[12:35] <Geth> ¬¶ p6-sake: Without an override mechanism, the error for duplicate task names

[12:35] <Geth> ¬¶ p6-sake: prevents users from creating their own help task.

[12:35] <Geth> ¬¶ p6-sake: 

[12:35] <Geth> ¬¶ p6-sake: Resolves #22, but I'd be happy to see a better solution.

[12:35] <Geth> ¬¶ p6-sake: review: https://github.com/perl6/p6-sake/commit/31303e400e

[12:36] <AlexDaniel> gosh I love tests in sake :)

[12:39] *** telex joined
[13:12] *** kent\n left
[13:18] *** kent\n joined
[13:21] *** molaf joined
[13:28] *** sftp left
[13:29] *** sftp joined
[13:30] *** empee0 joined
[13:39] <Xliff> AlexDaniel: Is sake designed to be an alternative to Test?

[13:39] <yoleaux> 12:46Z <jnthn> Xliff: Did you mean IO::Socket::Async::SSL? I've not seen that error before; please open an issue.

[13:41] *** Sgeo__ left
[14:02] *** sjm_uk joined
[14:03] *** hankache left
[14:09] *** Itaipu left
[14:10] *** Itaipu joined
[14:16] <kawaii> `Type check failed in assignment to $how-many; expected Int but got Str ("1")`

[14:17] <kawaii> uh, are these kind of things not supposed to just coerce automatically?

[14:18] <kawaii> `my Int $how-many = $cmd-obj.args;` got passed a string of "1", I assumed it would not freak out about this

[14:19] <kawaii> If I remove the `Int` constraint, I get `Use of uninitialized value of type Any in numeric context`

[14:20] <sena_kun> kawaii, you need to coerce in this case

[14:21] *** empee0 left
[14:21] <sena_kun> you can use allomorphs

[14:21] <sena_kun> m: my Int $a = <1>; my Str $b = <1>; say $a; say $b;

[14:21] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´1‚ê§1‚ê§¬ª

[14:22] <sena_kun> m: my Int $a = <1>; my Str $b = <1>; say $a; say $b; my Str $b = $a;

[14:22] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '$b'‚ê§    at <tmp>:1‚ê§    ------> 3 Str $b = <1>; say $a; say $b; my Str $b7‚èè5 = $a;‚ê§1‚ê§1‚ê§¬ª

[14:23] <kawaii> sena_kun: `Type check failed in assignment to $how-many; expected IntStr but got Str ("\$cmd-obj.args")`

[14:23] <kawaii> I don't think I got it :) `my IntStr $how-many = <$cmd-obj.args>;`

[14:23] <sena_kun> no-no

[14:24] <sena_kun> you need to populate `args` with a number in <1> in the first place

[14:24] <kawaii> ahhh okay

[14:24] <sena_kun> of course, 1 is change-able

[14:24] <sena_kun> though I am not sure what to do with something other than constants...

[14:24] <timotimo> if you want the <1> semantics, you need the "val" sub

[14:25] <timotimo> automatic coercion happens with operators usually, because operators tend to carry with them an intended type

[14:25] <timotimo> like + in perl6 is always numeric in nature, that's why "a" + "b" is wrong instead of giving "ab"

[14:26] <sena_kun> m: my $input = '1234' #`(get may be here); my $a = IntStr.new($input.Int, $input); say $a ~~ Int; say $a ~~ Str;

[14:26] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[14:26] <kawaii> I think I'm getting closer... `Type check failed in assignment to $how-many; expected IntStr but got Str ("3")`

[14:26] <kawaii> `my IntStr $how-many = <1>; $how-many = $cmd-obj.args;`

[14:26] <kawaii> so it got passed the first part, and died on the actual value

[14:27] <timotimo> yeah, that variable will only accept an actual IntStr, rather than coercing

[14:28] <kawaii> method purge-messages($cmd-obj) {

[14:28] <kawaii>     my %payload = $cmd-obj.payload;

[14:28] <kawaii>     my $channel = %payload<channel>;

[14:28] <kawaii>     my IntStr $how-many = <1>;

[14:28] <kawaii>     $how-many = $cmd-obj.args;

[14:28] <kawaii>     return content => "$channel $how-many";

[14:28] <kawaii> }

[14:28] <kawaii> ugh, oops

[14:29] <timotimo> i recommend just using +$cmd-obj.args if you want to coerce the value to an Int

[14:31] <timotimo> m: my Int() $foo = "123" # ISTR this doesn't work?

[14:31] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Int(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Int() $foo7‚èè5 = "123" # ISTR this doesn't work?‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[14:32] *** Manifest0 left
[14:34] *** Manifest0 joined
[14:34] *** patrickb left
[14:42] *** rindolf left
[14:44] *** natrys left
[14:45] *** mniip joined
[14:54] *** empee0 joined
[14:55] *** natrys joined
[14:56] *** discord6 left
[14:56] *** tyil left
[14:57] *** Geth left
[14:57] *** synopsebot left
[14:58] *** discord6 joined
[14:58] *** discord6 left
[14:58] *** discord6 joined
[14:58] *** molaf left
[14:58] *** synopsebot joined
[14:58] *** Geth joined
[14:59] *** discord6 left
[15:00] *** synopsebot left
[15:00] *** Geth left
[15:01] *** discord6 joined
[15:01] *** discord6 left
[15:01] *** discord6 joined
[15:01] *** synopsebot joined
[15:02] *** Geth joined
[15:03] *** tyilanmenyn joined
[15:03] *** tyilanmenyn is now known as tyil

[15:04] <kawaii> trying to call this method here https://github.com/shuppet/p6-api-discord/blob/master/lib/API/Discord/Channel.pm6#L82-L98

[15:04] <kawaii> have tried not awaiting and awaiting, get the same issue each time

[15:04] <kawaii> `    No such method 'fetch-messages' for invocant of type 'Promise'`

[15:04] <kawaii> from `    my @messages = await $channel.fetch-messages($how-many);

[15:04] <kawaii> `

[15:06] <jnthn> dd @messages

[15:08] <kawaii> uh well, @messages is what I've declared as the result of the method, and I assume it dies when I call it with the $how-many param

[15:08] <kawaii> so not sure if that will give you anything useful jnthn 

[15:08] <timotimo> you may want (await $channel).fetch-messages($how-many)

[15:09] <jnthn> Ah, right...yes, founds like $channel is the Promise

[15:09] <kawaii> timotimo: you were right :)

[15:09] <kawaii> now back to grappling with type cast issues

[15:10] <kawaii> Seems like nothing I do will coerce $how-many to be an Int :( https://www.irccloud.com/pastebin/gsqHrZul/

[15:12] <jnthn> <(\d+)> / just means there's an integer somewhere in the string, not that it would coerce to an Int successfully becasue that's all that is in there

[15:12] <jnthn> Add ^ and $ to make sure of that

[15:13] <kawaii> like `^<(\d+)>$` or did I misinterpret jnthn? :)

[15:14] <jnthn> Yes, like that, but I don't see why <( and )> are needed in that case :)

[15:15] <kawaii> right that still works but in any case, it's a string still

[15:17] <jnthn> Well, sure, you've just checked if the string matches a pattern; you'd need to stick on .Int to coerce it

[15:17] <jnthn> The pattern is just saying, "supposing I tried to .Int this thing, would it work?"

[15:18] <kawaii> ah okay so this no longer errors but doesn't return anything, progress!

[15:21] <kawaii> so I notice that when between double-quotes, $variables evaluate but @arrays do not?

[15:26] <jnthn> Correct, you'd need something like @arrays[] to force that

[15:26] <jnthn> Or @arrays.join(',') or whatever if you want to specify the joiner

[15:27] <nadim> good afternoon P6!

[15:27] <nadim> Woodi reported that rendering a HTML file with DDT grabbed 4 GB, I also noticed that it uses loads of memory and is Sloooow.

[15:28] <nadim> Any tips, tools that can help? or someone helping me to learn how to not botch up the job and write proper P6

[15:30] <Xliff> m: my @a = <a b c>; @a.VAR.name.say

[15:30] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´@a‚ê§¬ª

[15:34] <kawaii> method purge-messages($cmd-obj) {

[15:34] <kawaii>     my %payload = $cmd-obj.payload;

[15:34] <kawaii>     my $channel = %payload<channel>;

[15:34] <kawaii>     my $how-many = $cmd-obj.args;

[15:34] <kawaii>     unless $how-many ~~ / ^\d+$ / { return content => 'You must provide an Int value for this command.'; }

[15:34] <kawaii>     my @messages = (await $channel).fetch-messages($how-many.Int);

[15:34] <kawaii>     #(await $channel).bulk-delete(@messages);

[15:34] <kawaii>     my $debug = @messages.join(',');

[15:34] <kawaii>     return content => "$debug";

[15:34] <kawaii> }

[15:34] <kawaii> I really wish my client would stop doing that

[15:35] <kawaii> anyhow, the contents of $debug was literally `Promise<140146062359872>` jnthn 

[15:35] *** pmurias joined
[15:44] <Xliff> m: my @a = <a b c>; say "Hi, @a";

[15:44] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Hi, @a‚ê§¬ª

[15:44] <Xliff> m: my @a = <a b c>; say "Hi, {@a}";

[15:44] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Hi, a b c‚ê§¬ª

[15:44] <Xliff> Huh! I've always used {}, so didn't realize that...

[15:45] <moritz> m: my @a = <a b c>; say "Hi, @a[]";

[15:45] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Hi, a b c‚ê§¬ª

[15:45] <moritz> m: my @a = <a b c>; say "Hi, @a[1]";

[15:45] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Hi, b‚ê§¬ª

[15:47] *** vrurg left
[15:47] *** vrurg joined
[15:54] *** pmurias left
[16:01] <ugexe> m: say "Hi {$++}" for 1..10;

[16:01] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§Hi 0‚ê§¬ª

[16:01] <ugexe> m: say "$++"

[16:01] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Non-variable $ must be backslashed‚ê§at <tmp>:1‚ê§------> 3say "7‚èè5$++"‚ê§    expecting any of:‚ê§        argument list‚ê§        double quotes‚ê§        prefix‚ê§        term‚ê§¬ª

[16:10] *** nadim left
[16:18] *** molaf joined
[16:32] *** khisanth_ left
[16:33] <sjm_uk> nbd

[16:34] *** sjm_uk left
[16:45] *** khisanth_ joined
[16:59] *** jaldhar joined
[17:07] *** zakharyas joined
[17:15] *** molaf left
[17:17] *** vrurg left
[17:17] *** vrurg joined
[17:34] *** nadim joined
[17:42] *** jmerelo joined
[17:42] <jmerelo> releasable6: status

[17:43] <releasable6> jmerelo, Next release will happen when it's ready. R6 is down. At least 1 blocker. 262 out of 666 commits logged (‚ö† 1 warnings)

[17:43] <releasable6> jmerelo, Details: https://gist.github.com/e599840beffbcd52a451aad8870f4720

[17:45] *** pamplemousse joined
[17:49] *** kaare_ left
[17:49] *** kaare_ joined
[17:57] *** molaf joined
[18:00] * timotimo doesn't even know what R6 is

[18:00] *** patrickb joined
[18:01] *** irced joined
[18:11] *** pamplemousse left
[18:11] *** pamplemousse joined
[18:14] <sena_kun> timotimo, https://github.com/perl6/whateverable/blob/ac1d66a018b37165ba41e1e4d13e118921dd4f19/bin/Releasable.p6#L137 and the URL being https://fail.rakudo.party/release/blockers.json

[18:14] <sena_kun> which is indeed down

[18:15] <moritz> yes, that's an old zoffix domain

[18:16] <AlexDaniel> timotimo: you might like this rant: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-06-29#l194

[18:17] <AlexDaniel> btw Zoffix's server is still working, from what I can tell

[18:17] <AlexDaniel> it's just that a bunch of services are down, I think

[18:17] <AlexDaniel> so if that's accidental and we kindly ask to bring them back up‚Ä¶

[18:20] <timotimo> i'm not sure where the complaint about "with cuid 1 has not appeared" comes from in that context

[18:20] <timotimo> oh

[18:20] <timotimo> there it is

[18:21] * irced eyes the couch.

[18:22] <AlexDaniel> point is, it's easy and cute to give things some obscure names, but IMO there are better ways to do things

[18:22] <AlexDaniel> which is why I like ‚Äúbisectable‚Äù :)

[18:23] <AlexDaniel> like it could've been janice or any other random name, right

[18:23] * irced asks Camelia out for a date.

[18:24] <lizmat> AlexDaniel: I've updated my commits in the Changelog Draft

[18:24] <AlexDaniel> lizmat: thank you! I'll get the changelog finished asap

[18:25] <AlexDaniel> kawaii: is it done now?

[18:26] *** pamplemousse left
[18:26] <timotimo> i'm not sure i see the value in making an error about a QAST::Block being referenced but not showing up in the final tree that the compiler gets fed more easily understood to an outsider. it's not like there's any action they could take if they weren't already a core developer for a long time

[18:26] *** pamplemousse joined
[18:28] *** pamplemousse left
[18:29] *** domidumont joined
[18:29] <AlexDaniel> timotimo: I'm talking about a general problem when it's OK to give things obscure names for no good reason

[18:29] <AlexDaniel> it's just a single example and maybe not the best one, sure

[18:30] <AlexDaniel> but to overturn this some minds need to be changed, and your remark is not exactly helping

[18:30] *** rindolf joined
[18:31] <timotimo> i'm sure there's examples where it makes a lot more sense to have more easily understood terms

[18:34] *** empee0 left
[18:38] <AlexDaniel> timotimo: honestly, I have a problem with many terms that we have. Like most of them. Maybe I'll put them all in a list so that it's easier to see which ones can be changed without too much pain

[18:38] <AlexDaniel> but even the basic stuff, like ‚Äúroast‚Äù

[18:38] <AlexDaniel> goddamit just call it perl6-spec

[18:38] *** domidumont left
[18:39] <ugexe> that wont be confusing with perl6/specs

[18:39] <AlexDaniel> sure won't be

[18:39] <AlexDaniel> because that'll be perl6/old-design-docs

[18:40] <ugexe> thats one way to kill more backlinks i guess

[18:40] <AlexDaniel> it depends

[18:41] <AlexDaniel> ‚ÄúWe keep redirects for moved and renamed repos indefinitely‚Äù

[18:41] <AlexDaniel> so it won't break unless you create a new repo with the same name

[18:41] * irced votes for all unique hexadecimal names.

[18:42] <AlexDaniel> but I mean, what's the alternative

[18:42] <AlexDaniel> keeps old-design-docs as specs forever?

[18:42] * irced votes for all unique (floating point) hexadecimal names.

[18:42] <ugexe> have you ever heard of the term bug compatibility?

[18:43] <timotimo> be compatible with camelia?

[18:43] <AlexDaniel> it's not like our whole infrastructure just collapsed and nothing is working and most of the links are broken

[18:43] <AlexDaniel> and we care about links to outdated design docs

[18:44] <irced> insect compatibility!

[18:44] <lizmat> weekly: https://perl6.eu/van-eck-state.html

[18:44] <notable6> lizmat, Noted!

[18:44] <AlexDaniel> and it's not like RT is shutting down

[18:45] <AlexDaniel> but we can't move a fresh issue tracker because links are going to break

[18:45] <ugexe> RT shutting down isn't a license to clean house

[18:46] <ugexe> its easy to say just use the latest greatest. the hard part is someone coming up with a real plan of how such a thing can be accomplished, including how various pitfalls will be handled.

[18:47] <AlexDaniel> you need a license to clean a house?

[18:47] *** vrurg left
[18:47] <AlexDaniel> :)

[18:48] *** vrurg joined
[18:50] <ugexe> the maid must sign a CLA before stepping foot into my house

[18:54] <irced> whoa maids that that not only clean code but will implement as well! I feel like I missed the future!

[18:55] * irced asks multiple people what date it is.

[18:55] <lizmat> irced: it's the last day of the first half

[18:55] <irced> not the mention the kitchen sink, countertop, carpet, windows, etc.

[18:56] * irced thanks lizmat heartily confusedly.

[18:59] *** patrickb left
[19:02] *** zakharyas left
[19:03] * irced envisions an advertisements: mobile maids, we clean and refactor on the go! 1800-ref-actor.

[19:20] <jmerelo> It hasn't moved for a few days, so please last answers for the Perl 6 user survey https://docs.google.com/forms/d/e/1FAIpQLSfX6cjuhen2xepsr_Cg8eYSdlEE4wbhufgOR1BrDwStby_hNg/viewform

[19:20] <jmerelo> I'll be processing and publishing results next week

[19:20] <Kaiepi> i forgot about that

[19:35] *** pecastro joined
[19:46] *** Sgeo joined
[19:47] *** Cabanossi left
[19:50] *** Cabanossi joined
[19:56] *** lucasb joined
[19:56] *** jmerelo left
[19:56] *** farcas82regreg left
[20:05] <tadzik> https://www.nntp.perl.org/group/perl.perl5.porters/2019/06/msg255336.html this is a very valid point :(

[20:06] <tadzik> I remember it being the case with the perl6 bugtracker too

[20:06] <tadzik> it's also a bit of a symbol: if the Perl community can't be expected to endorse/support Perl products, how can it expect anyone else to do the same

[20:07] *** mowcat joined
[20:11] <lizmat> tadzik: fwiw, RT for Perl 6 is being shut down as well: https://github.com/perl6/problem-solving/issues/49

[20:11] *** guifa2 left
[20:13] <tadzik> lizmat: yeah. Somehow I found it less troubling, as perl 6 is already developed on github anyway

[20:14] *** cooper joined
[20:15] <ugexe> could always set up an email bot, similar to how the discord bot works in irc

[20:17] <timotimo> "bugbear"

[20:31] <lizmat> perhaps https://gitreports.com is a solution ?

[20:32] <lizmat> privately hosted as part of the Perl 6 infrastructure ?

[20:47] *** irced left
[20:48] *** irced joined
[20:48] <Kaiepi> when's the next weekly?

[20:48] <Kaiepi> wait thought it was monday, not sunday

[20:53] *** molaf left
[21:00] <lizmat> it's still Sun here  :-)

[21:00] *** natrys left
[21:03] <tadzik> oh gitreports is nice

[21:05] *** irced left
[21:09] <AlexDaniel> lizmat: they can also come here, tell us about the problem and someone will help file a bug report

[21:09] <lizmat> well, sometimes, when channels are being spammed, it's not so easy to report something on IRC either

[21:10] <AlexDaniel> I do understand where they are coming from, and I agree to some extent, but I somehow doubt that a github-less way of submitting tickets is worth the trouble

[21:11] <lizmat> well... fwiw, I think the potential for high quality bug reports is higher with people who consciously refuse to use Github  :-)

[21:12] <AlexDaniel> I doubt it

[21:12] <AlexDaniel> means they never file any bug reports

[21:12] <AlexDaniel> because everyone is using github nowadays

[21:12] <lizmat> but a low maintenance solution would be creating an email address for bug reporting that would get passed on to some core developer "on duty"  :-)

[21:13] *** SCHAPiE joined
[21:13] <AlexDaniel> lizmat: just add you email address here and that's it: https://rakudo.org/bugs

[21:14] <AlexDaniel> or well, encourage someone else to volunteer :)

[21:14] <lizmat> I don't think it would be a good idea to publish a non perl6.org mail address for this

[21:15] <lizmat> I would not be against receiving all of that mail (including spam) for the foreseeable future

[21:47] *** Cabanossi left
[21:57] *** Cabanossi joined
[22:57] *** evalable6 left
[22:58] *** evalable6 joined
[23:07] <Kaiepi> m: sub foo { (:$key, :$value) }; say foo :1a

[23:07] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$key' is not declared‚ê§at <tmp>:1‚ê§------> 3sub foo { (:7‚èè5$key, :$value) }; say foo :1a‚ê§¬ª

[23:07] <Kaiepi> oh

[23:08] <Kaiepi> i was misreading the code in #perl6-dev, was confused why that "worked"

[23:08] <timotimo> ha

[23:09] <Kaiepi> m: sub foo { say $^a, ' ', $^b }; foo 'ayy', 'lmao'

[23:09] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´ayy lmao‚ê§¬ª

[23:11] <Kaiepi> m: sub foo { say $^a, $^b, $_ }; foo 'ayy', 'lmao'

[23:11] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´ayylmao(Any)‚ê§¬ª

[23:22] <Kaiepi> m: sub scream-obscenities( (:$filthy-remark) ) { say $filthy-remark.uc }; class Obscenity { has $.filthy-remark }; my Obscenity $obs .= new: filthy-remark => "Why don't you just use node.js instead of worrying about threads? It's non-blocking."; scream-obscenities $obs

[23:22] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´WHY DON'T YOU JUST USE NODE.JS INSTEAD OF WORRYING ABOUT THREADS? IT'S NON-BLOCKING.‚ê§¬ª

[23:22] <Kaiepi> huh

[23:22] <Kaiepi> didn't know you could do that

[23:25] <Kaiepi> m: sub test( (:$^name) ) { say $^name }; test &test

[23:25] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´5===SORRY!5===‚ê§In signature parameter $^name, it is illegal to use the ^ twigil‚ê§at <tmp>:1‚ê§------> 3sub test( (:$^name7‚èè5) ) { say $^name }; test &test‚ê§Placeholder variable '$^name' cannot override existing signature‚ê§at <tmp>:1‚ê§-‚Ä¶¬ª

[23:25] <Kaiepi> m: sub test( (HOW => (:$name)) ) { say $name }; test &test

[23:25] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Invalid typename 'HOW' in parameter declaration.‚ê§at <tmp>:1‚ê§------> 3sub test( (HOW7‚èè5 => (:$name)) ) { say $name }; test &tes‚ê§¬ª

[23:26] <Kaiepi> m: sub test( (:HOW{:$name}) ) { say $name }; test &test

[23:26] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub test( (:7‚èè5HOW{:$name}) ) { say $name }; test &test‚ê§¬ª

[23:26] <Kaiepi> m: sub test( (:HOW(:$name)) ) { say $name }; test &test

[23:26] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Cannot unpack or Capture `&test`.‚ê§To create a Capture, add parentheses: \(...)‚ê§If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}‚ê§or missed `:` in signature unpacking? -> &c:(Int) {}‚ê§  in sub test at ‚Ä¶¬ª

[23:26] <Kaiepi> m: sub test( (:$HOW(:$name)) ) { say $name }; test &test

[23:26] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Shape declaration with () is reserved;‚ê§  please use whitespace if you meant a subsignature for unpacking,‚ê§  or use the :() form if you meant to add signature info to the function's type‚ê§at <tmp>:1‚Ä¶¬ª

[23:27] <Kaiepi> m: sub test( (:$HOW) ) { say $HOW.name }; test &test

[23:27] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Cannot unpack or Capture `&test`.‚ê§To create a Capture, add parentheses: \(...)‚ê§If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}‚ê§or missed `:` in signature unpacking? -> &c:(Int) {}‚ê§  in sub test at ‚Ä¶¬ª

[23:31] <ugexe> not to mention .name takes 1 not 0 argument

[23:31] *** sena_kun left
[23:31] <Kaiepi> oh right

[23:38] *** Actualeyes left
[23:39] <Kaiepi> m: sub test( ($name = $_.HOW.name($_), |) ) { say $name }; test &test

[23:39] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Cannot unpack or Capture `&test`.‚ê§To create a Capture, add parentheses: \(...)‚ê§If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}‚ê§or missed `:` in signature unpacking? -> &c:(Int) {}‚ê§  in sub test at ‚Ä¶¬ª

[23:39] <Kaiepi> m: sub test( ($name = $_.HOW.name($_), |) ) { say $name }; test Promise.new

[23:39] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Any‚ê§¬ª

[23:40] <Kaiepi> m: sub test(:$name = *.HOW.name(*)) { say $name }; test Promise.new

[23:40] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub test at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:40] <timotimo> where would that $_ come from, i wonder

[23:40] <Kaiepi> m: sub test($, :$name = *.HOW.name(*)) { say $name }; test Promise.new

[23:40] <camelia> rakudo-moar a26e95bab: OUTPUT: ¬´Whatever‚ê§¬ª

[23:40] <timotimo> using the * in the method call like that will pass a literal Whatever constant

[23:43] *** aborazmeh joined
[23:43] *** aborazmeh left
[23:43] *** aborazmeh joined
[23:46] *** pecastro left
[23:47] *** Cabanossi left
[23:50] *** aborazmeh left
[23:52] *** aborazmeh joined
[23:52] *** aborazmeh left
[23:52] *** aborazmeh joined
[23:54] *** Cabanossi joined
[23:55] *** lucasb left
