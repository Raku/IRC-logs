[00:05] *** nepugia left
[00:22] *** kst` is now known as kst

[00:33] *** MilkmanDan left
[00:34] *** MilkmanDan joined
[00:40] *** rindolf left
[00:49] *** redhands left
[01:00] *** ufobat_ joined
[01:01] *** MilkmanDan left
[01:02] *** noisegul_ joined
[01:03] *** ufobat left
[01:05] *** noisegul left
[01:09] *** adu_ joined
[01:09] <discord6> <Tyler (Aearnus)> hmm. what's the easiest way to get json data from a REST request from within perl6?

[01:11] *** adu left
[01:11] *** adu_ is now known as adu

[01:18] *** molaf left
[01:28] *** MilkmanDan joined
[01:30] *** molaf joined
[01:42] *** noisegul_ left
[02:53] *** gerry83 joined
[02:55] <gerry83> downloaded Rakuko for Mac OS; but sometning is missing

[02:59] *** Cabanossi left
[03:02] *** gerry83 left
[03:04] *** gerry83 joined
[03:05] *** Cabanossi joined
[03:07] *** gerry83 left
[03:24] *** aborazmeh left
[03:29] *** irced joined
[04:13] *** Sgeo joined
[04:14] *** redhands joined
[04:16] *** Sgeo__ left
[04:35] *** adu left
[04:57] *** adu joined
[05:01] *** redhands left
[05:13] *** molaf left
[05:23] *** sauvin joined
[05:28] *** antoniogamiz joined
[05:37] *** robertle left
[06:03] *** jmerelo joined
[06:40] *** gerry83 joined
[06:42] <Geth> ¦ doc: threadless-screw++ created pull request #2917: Correction of link in Markdown rather than Pod6

[06:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2917

[06:43] *** gerry83 left
[06:45] <jmerelo> Nice StackOverflow question https://stackoverflow.com/questions/57210795/math-with-undefined-perl6-values. I have the vague idea it's related to reduce operators, as he says, but who knows...

[06:45] <Geth> ¦ doc: 95e1462e77 | threadless-screw++ | doc/Language/regexes.pod6

[06:45] <Geth> ¦ doc: Correction of link in Markdown rather than Pod6

[06:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/95e1462e77

[06:45] <Geth> ¦ doc: 295e59b4c0 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[06:45] <Geth> ¦ doc: Merge pull request #2917 from threadless-screw/regex

[06:45] <synopsebot> Link: https://doc.perl6.org/language/regexes

[06:45] <Geth> ¦ doc: 

[06:45] <Geth> ¦ doc: Correction of link in Markdown rather than Pod6

[06:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/295e59b4c0

[06:46] <irced> p6: my $x; $x *= 3;

[06:46] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[06:46] <irced> p6: my $x; say {$x *= 3};

[06:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-> ;; $_? is raw { #`(Block|87419368) ... }␤»

[06:46] <irced> p6: my $x; say "{$x *= 3}";

[06:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3␤»

[06:48] <irced> p6: print do {[*]()}

[06:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1»

[06:49] <irced> yikes!

[06:49] <irced> p6: print do {[+]()}

[06:49] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0»

[06:49] <irced> p6: print do {$x += 3}

[06:49] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3print do {7⏏5$x += 3}␤»

[06:49] <irced> p6: my $x; print do {$x += 3};

[06:49] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3»

[06:51] <irced> I'm with the poster, when an Any is multplied it is used as an identity.

[06:53] <irced> identity, in the language of mathematics, means the product is the same as that to which the identity was multiplied

[06:54] <irced> so nothing is loss when an undefined variable is used as an operand in an arithmetic operation

[06:55] <irced> since if it is added to, you get what was added to it and if it is multiplied to you get that which was multiplied to it. and perl6 takes identify to the next level making it applicable in addition.

[06:55] <irced> kew

[06:55] <irced> kewl

[06:59] *** domidumont joined
[07:00] *** domidumont left
[07:00] <irced> the only snag is [*](). but given that identity is "one" it makes sense that identify * identity is ... identify :-)

[07:00] <irced> or in this case, that it is 1 when used in multiplication

[07:01] <irced> thus [*](1) = 1

[07:02] *** domidumont joined
[07:03] *** nadim joined
[07:13] *** antoniogamiz left
[07:22] <Geth> ¦ doc: JJ assigned to antoniogamiz Issue Sharing Pod 6 caches https://github.com/perl6/doc/issues/1952

[07:22] <Geth> ¦ doc: JJ unassigned from coke Issue Sharing Pod 6 caches https://github.com/perl6/doc/issues/1952

[07:24] <Geth> ¦ doc: JJ assigned to antoniogamiz Issue There must be a better way of putting index pages together https://github.com/perl6/doc/issues/2579

[07:24] <Geth> ¦ doc: JJ assigned to noisegul Issue There must be a better way of putting index pages together https://github.com/perl6/doc/issues/2579

[07:32] <Geth> ¦ doc: 409249ff7e | (JJ Merelo)++ | doc/Type/HyperSeq.pod6

[07:32] <Geth> ¦ doc: First stage adapting methods from Seq refs #1897

[07:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/409249ff7e

[07:32] <Geth> ¦ doc: a305a9445f | (JJ Merelo)++ | doc/Type/HyperSeq.pod6

[07:32] <Geth> ¦ doc: Writes all methods for HyperSeq, refs #1897

[07:32] <synopsebot> Link: https://doc.perl6.org/type/HyperSeq

[07:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a305a9445f

[07:32] <Geth> ¦ doc: 5b8e85c130 | (JJ Merelo)++ | 3 files

[07:32] <Geth> ¦ doc: Documents RaceSeq, some fixes and adds to type-graph.txt closes #1897

[07:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5b8e85c130

[07:33] <jmerelo> irced: you should probably create an issue in the documentation so that gets written down, either in Any itself or as a trap.

[07:35] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue What's up with hyper/race semantics? https://github.com/perl6/problem-solving/issues/77

[07:37] <AlexDaniel> c: all my $x; $x *= 3; say $x

[07:37] <AlexDaniel>  

[07:37] <committable6> AlexDaniel, ¦all (61 commits): «3␤»

[07:37] <jmerelo> AlexDaniel: strangely consistent, that's Perl 6 motto

[07:38] <AlexDaniel> very nice question indeed, very interesting behavior :)

[07:39] <AlexDaniel> I think it's reasonable and this is what I expected, actually

[07:39] <AlexDaniel> but it's interesting to see how $x behaves as different values, if you look at it that way

[07:40] <jmerelo> AlexDaniel: and this is the issue you created a year ago: https://github.com/perl6/doc/issues/2129

[07:40] <AlexDaniel> ah fucking blobs

[07:41] <AlexDaniel> but yeah, it's a good ticket

[07:42] * jmerelo excited to go to Riga and finally meet people I've never met before and people I've met lots of times before

[07:42] <SmokeMachine> AlexDaniel: I'm sorry... I'm trying... but I can't explain that better... :(

[07:43] <Geth> ¦ problem-solving: AlexDaniel self-assigned Make Rakudo read from META6 modules with :ver<>, :auth<> and :api<> https://github.com/perl6/problem-solving/issues/76

[07:44] <AlexDaniel> jmerelo: yes yes, me too :)

[07:45] <SmokeMachine> AlexDaniel: What mean the fallback label?

[07:47] <AlexDaniel> SmokeMachine: usually tickets are assigned to a developer who works on issues with a particular label, but we don't yet have a dev who works on the ecosystem/meta6.json stuff https://github.com/perl6/problem-solving/issues/45

[07:47] <SmokeMachine> AlexDaniel: hum... thanks!

[07:48] *** antoniogamiz joined
[07:48] <SmokeMachine> AlexDaniel: did the log link help?

[07:49] <AlexDaniel> SmokeMachine: example did, it's clearer now :)

[07:49] <SmokeMachine> :)

[07:49] <antoniogamiz> jmerelo: what should I do with 5to6-perlfunc?

[07:50] *** Cabanossi left
[07:51] *** Cabanossi joined
[07:51] <SmokeMachine> AlexDaniel: and on log there is ugexe saying how it should be done... I was trying to do... but Rakudo is not being compiled on my machine... it's hanging...

[07:51] <AlexDaniel> SmokeMachine: interesting

[07:52] <SmokeMachine> AlexDaniel: https://www.irccloud.com/pastebin/G5acEGip/

[07:54] *** robertle joined
[07:54] *** chloekek joined
[08:01] *** ravenousmoose left
[08:04] *** ravenousmoose joined
[08:09] <irced> jmerelo: i just thought the discussion was interesting!

[08:10] <jmerelo> antoniogamiz: good question. At this point, it should probably be treated like everything else. You can raise an issue in /doc just in case people want to discuss...

[08:11] <antoniogamiz> mmm, I will do that then. But if we want it to be treated like everything else we should change the current headers

[08:11] <antoniogamiz> of 5to6-perlfunc

[08:11] *** molaf joined
[08:13] <irced> jmerelo: and not an issue so much as a nominal feature. thanks for sharing the stackoverflow question.

[08:13] <irced> jmerelo: but i suppose it could be an issue if a programmer expects an error from using an undefined value in an arithmetical expression!

[08:15] <irced> c: my ($x, $y); print do { $x + 3 + $y }

[08:15] <committable6> irced, ¦my: «Cannot find this revision (did you mean “all”?)»

[08:16] <jmerelo> irced: it's a documentation issue, something that should be documented.

[08:17] <irced> jmerelo: yeah, the poster did not note that an error does in fact occur when not using *= += etc, as in $x where $x is Any + 3 gives use of uninitialized value

[08:17] <jmerelo> AlexDaniel: I requested to be in charge (or in co-charge) of ecosystem stuff... 

[08:17] *** jmerelo left
[08:18] <AlexDaniel> m: my ($x, $y); print do { $x + 3 + $y }

[08:18] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤3  in block  at <tmp> line 1␤Use of uninitialized value of type Any in numeric context␤  in block  at <tmp> line 1␤»

[08:18] <irced> c: my ($x, $y); print do { $x + 3 + $y }

[08:18] <committable6> irced, ¦my: «Cannot find this revision (did you mean “all”?)»

[08:18] <irced> m: my ($x, $y); print do { $x + 3 + $y }

[08:18] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤3  in block  at <tmp> line 1␤Use of uninitialized value of type Any in numeric context␤  in block  at <tmp> line 1␤»

[08:19] <irced> AlexDaniel: right

[08:19] <irced> m: my ($x, $y); print do {$x*=3 + $y+=1}

[08:19] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤  in block  at <tmp> line 1␤Cannot modify an immutable Int (3)␤  in block <unit> at <tmp> line 1␤␤»

[08:19] <irced> m: my ($x, $y); print do {$x*=3}

[08:19] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3»

[08:19] <irced> m: my ($x, $y); print do {$y+=3}

[08:19] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3»

[08:20] <irced> m: my ($x, $y); print do { {$x*=3} + {$y+=1}}; #4 ?

[08:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Cannot resolve caller Numeric(Block:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[08:20] <irced> m: my ($x, $y); print do { {$x*=3} + {$y+=1} };

[08:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Cannot resolve caller Numeric(Block:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[08:20] <irced> m: my ($x, $y); print  "{$x*=3} + {$y+=1}";

[08:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3 + 1»

[08:20] <irced> m: my ($x, $y); print  "{{$x*=3} + {$y+=1}}";

[08:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Cannot resolve caller Numeric(Block:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[08:21] <irced> m: my ($x, $y); print  "{val({$x*=3}) + val({$y+=1})}";

[08:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Value of type Block uselessly passed to val()␤  in block  at <tmp> line 1␤Value of type Block uselessly passed to val()␤  in block  at <tmp> line 1␤Cannot resolve caller Numeric(Block:D: ); none of these signatures match:␤    (Mu:U \v: *%_)…»

[08:21] <irced> m: my ($x, $y); print  "{val($x*=3) + val($y+=1)}";

[08:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Value of type Int uselessly passed to val()␤4  in block  at <tmp> line 1␤Value of type Int uselessly passed to val()␤  in block  at <tmp> line 1␤»

[08:22] <irced> m: my ($x, $y); print do { val($x*=3) + val($y+=1) };

[08:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Value of type Int uselessly passed to val()␤4  in block  at <tmp> line 1␤Value of type Int uselessly passed to val()␤  in block  at <tmp> line 1␤»

[08:22] <irced> m: my ($x, $y); print do { ($x*=3).^name };

[08:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Int»

[08:22] <irced> m: my ($x, $y); print do { ($x*=3) + ($y+=1) };

[08:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «4»

[08:23] <irced> m: my ($x, $y); print do { ($x*=3) + ($y+=1) }; # huh

[08:23] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «4»

[08:24] <irced> so an object knows only its own identity

[08:24] <irced> so to speak

[08:25] <irced> m: my ($x, $y); print do { $x = ($x+=3) }

[08:25] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3»

[08:26] * irced goes mentally insane.

[08:26] *** reach_satori left
[08:28] <AlexDaniel> irced: I'm a bit lost, what's the issue again?

[08:30] *** Elronnd left
[08:31] <irced> AlexDaniel: well

[08:32] <irced> m: my $x; say "{$x+3}"

[08:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤3␤  in block  at <tmp> line 1␤»

[08:32] <irced> m: my $x; say "{$x+=3}"

[08:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3␤»

[08:33] <irced> m: my $x; do {$x+=3; print $x}

[08:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3»

[08:33] <irced> m: my $x; do {$x=$x+3; print $x}

[08:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤3  in block  at <tmp> line 1␤»

[08:34] *** go|dfish left
[08:34] <irced> AlexDaniel: the last two statements are equivalent

[08:34] <irced> AlexDaniel: but the interpreter says otherwise

[08:35] <irced> AlexDaniel: so, Any behaves differently depending on whether the assignment is long hand or short hand.

[08:35] <irced> AlexDaniel: observe/

[08:35] <irced> m: my $x; do {$x*=4; print $x}

[08:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «4»

[08:35] <AlexDaniel> so

[08:35] <irced> m: my $x; do {$x=$x*4; print $x}

[08:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0  in block  at <tmp> line 1␤»

[08:35] <AlexDaniel> m: my $x; $x += 3

[08:35] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[08:35] <AlexDaniel> but

[08:36] <AlexDaniel> m: my $x; $x = $x + 3

[08:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤»

[08:36] <irced> and observe

[08:36] <lizmat> the lack of warning with `+=` is intentional, afaik

[08:36] <irced> m: my $x; print do {[*]$x}

[08:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $x; print do {[*]7⏏5$x}␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤       …»

[08:36] <irced> m: my $x; do print {[*]$x}

[08:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $x; do print {[*]7⏏5$x}␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤       …»

[08:37] <irced> m: my $x; print "{[*]$x}"

[08:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $x; print "{[*]7⏏5$x}"␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        …»

[08:37] <irced> m: print "{[*]()}"

[08:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1»

[08:37] <irced> m: print "{[+]()}"

[08:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0»

[08:38] <irced> the any is assigned a value of 1 in multiplication or 0 in addition only in operations that are not longhand

[08:39] <irced> lizmat: intentional lack of warning, but it is not even an exception when

[08:39] <irced> m: my $x; print "{$x=$x+5}"

[08:39] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Use of uninitialized value of type Any in numeric context␤5  in block  at <tmp> line 1␤»

[08:41] *** Elronnd joined
[08:42] *** Elronnd left
[08:42] *** Elronnd joined
[08:44] *** Elronnd left
[08:44] *** rindolf joined
[08:46] *** Elronnd joined
[08:46] *** Elronnd left
[08:47] *** reach_satori joined
[08:49] <irced> so jmerelo suggested i should create an issue in the documentation, how do i do that?

[08:50] *** ravenousmoose left
[08:50] *** ravenousmoose joined
[08:52] <irced> m: my $x; print $x+=3;

[08:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3»

[08:57] <lizmat> irced: https://github.com/perl6/doc/issues/new

[08:58] *** cpan-p6 left
[08:59] *** cpan-p6 joined
[08:59] *** cpan-p6 left
[08:59] *** cpan-p6 joined
[09:00] <irced> oh, i found it documented at least for +=

[09:04] *** Elronnd joined
[09:06] <irced> m: print [*]()

[09:06] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1»

[09:08] <lizmat> m: dd [~]()

[09:09] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «""␤»

[09:09] <lizmat> it also goes for stringy infixes  :-)

[09:09] <irced> lizmat: thanks

[09:16] *** Actualeyes joined
[09:21] *** jmerelo joined
[09:23] *** pat_js joined
[09:31] <irced> m: print [~]().^name

[09:31] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Str»

[09:32] <irced> m: my $x = [~](); say $x.DEFINITE.so;

[09:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «True␤»

[09:33] *** ravenousmoose_ joined
[09:36] *** ravenousmoose left
[09:36] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/07/perl-weekly-challenge-18-priority-queues-and-binary-heaps-in-perl-6.html

[09:36] <notable6> lizmat, Noted!

[09:37] * irced thanks lizmat for the blog.

[09:40] *** domidumont left
[10:20] *** ilogger2 joined
[10:20] *** ChanServ sets mode: +v ilogger2

[10:24] *** ravenousmoose_ joined
[10:29] *** ravenousmoose_ left
[10:29] *** ravenousmoose_ joined
[10:43] *** ravenousmoose_ left
[10:43] *** ravenousmoose_ joined
[11:05] *** zakharyas joined
[11:05] *** aborazmeh joined
[11:05] *** aborazmeh left
[11:05] *** aborazmeh joined
[11:42] *** sena_kun joined
[11:45] *** zakharyas left
[11:56] *** ravenousmoose_ left
[11:56] *** ravenousmoose_ joined
[12:00] *** ravenousmoose_ left
[12:02] *** ChoHag joined
[12:03] *** domidumont joined
[12:21] *** greppable6 joined
[12:27] *** nepugia joined
[12:44] *** pat_js joined
[12:53] *** molaf joined
[12:57] *** lucasb joined
[13:05] <timotimo> sena_kun: i think you may want to re-read that tweet you just answered to; they said "a dead end", rather than "dead", which is an important difference

[13:08] *** pat_js left
[13:09] <masak> though neither is all that good, usually

[13:10] <timotimo> aye

[13:10] <timotimo> i just thought the response was a little off because of what i perceive as a misunderstanding

[13:10] <masak> dead ends are where one gets mugged :P

[13:11] <masak> hey! maybe that should be our new slogan: "there's nowhere to run. yer money or yer life" -- Perl 6

[13:12] <timotimo> a stroke of genius for our PR

[13:14] <masak> "we suck at marketing -- but at least we're loaded"

[13:15] <perlbot> Arianhaseist pasted a new file at https://perl.bot/p/6h8atx - 

[13:19] *** pat_js joined
[13:31] *** aborazmeh left
[13:34] *** MilkmanDan joined
[13:38] *** molaf left
[13:38] *** antoniogamiz joined
[13:43] *** SCHAPiE joined
[13:45] <ugexe> i live on a dead-end street and its nice because there isn't a bunch of assholes speeding both ways down the street

[13:51] <lizmat> so you only get one-way speeders?  Won't that make a lot more noise when they hit the wall ??  :-)

[13:52] <antoniogamiz> lizmat: uh haha

[13:53] <ugexe> i'm only able to get up to 40mph when peeling out of the driveway before i reach the stop sign so not really

[13:54] <El_Che> is perl 6 also a dead end (cfr stevan's talk). What did I miss?

[13:56] <sena_kun> timotimo, an important difference in what?

[13:56] *** pamplemousse joined
[13:57] <sena_kun> timotimo, can't argue with misunderstanding part, though, I see fake news of "Perl 6 is dead" sort pretty often, now I might be seeing things. :S

[14:00] <antoniogamiz> handle urls in perl6 is tough

[14:03] <sena_kun> antoniogamiz, what part is confusing?

[14:04] <antoniogamiz> make them valid ones

[14:04] <antoniogamiz> (I'm trying to fix url in the new doc system)

[14:05] <sena_kun> antoniogamiz, this is not very specific. :) if there is some issue you tinker on, maybe we can help?

[14:05] <antoniogamiz> ah no, I just told it idk..

[14:06] <ugexe> you just puny-encode it. nothing difficult or confusing

[14:06] <antoniogamiz> that does not work with / ^ %

[14:07] <ugexe> wouldnt you just percent encode them?

[14:08] <antoniogamiz> If I do that, would it be converted to a valid unix path?

[14:09] <sena_kun> ^ is %5E, % is %25, / is %2F

[14:09] <sena_kun> https://www.w3schools.com/tags/ref_urlencode.asp

[14:09] <antoniogamiz> but then I would have to encode % too

[14:10] <sena_kun> % is %25

[14:10] <ugexe> you don't reencode the percent symbol of the percent encoded entities

[14:10] <antoniogamiz> I mean. there's path containing ^ % /

[14:10] <antoniogamiz> if I encode them, and write them to that path

[14:10] <sena_kun> so if you have "/foo/bar/%", you encode it as "/foo/bar/%25" and that's all

[14:10] <antoniogamiz> when you type %25 in the browser, it does not work

[14:11] <ugexe> technically it should

[14:11] <antoniogamiz> it doesnt, or at least not in my case

[14:11] <sena_kun> I have a feeling that browser is too user-friendly and will convert `%` for you

[14:11] <sena_kun> just as it encodes emoji you can type into address bar into something normal

[14:12] <sena_kun> also, does it work in url on page?

[14:12] <antoniogamiz> ?

[14:13] <sena_kun> if you have a page that is served on path with %25, and you have another page that contains <a href="...%25">foo</a>, then you open up this second page, can you go to the first one?

[14:14] *** ravenousmoose joined
[14:14] <antoniogamiz> ah I think not

[14:14] *** pamplemousse left
[14:15] <sena_kun> did you try it or?

[14:15] <antoniogamiz> but if I reencode the % i can

[14:15] <sena_kun> reencode from what to what?

[14:15] *** cpan-p6 joined
[14:15] *** cpan-p6 left
[14:15] *** cpan-p6 joined
[14:16] <ugexe> 點看foo^bar --> xn--foo%5Ebar-qg2rk18z

[14:16] <antoniogamiz> %25

[14:16] <antoniogamiz> in my case I tested fff^

[14:16] *** pamplemousse joined
[14:16] <antoniogamiz> and fff%5E did not work

[14:17] <antoniogamiz> so I encode % too => fff%255E

[14:17] <ugexe> thats a security flaw

[14:18] <antoniogamiz> (now I'm using uninames, as it was used before)

[14:18] <antoniogamiz> ugexe: it is? I did not know

[14:18] <ugexe> https://www.cgisecurity.com/lib/URLEmbeddedAttacks.html

[14:19] <ugexe> grep for Multiple Decoding

[14:21] <ugexe> well maybe i misunderstood "so I encode % too => fff%255E"

[14:21] <antoniogamiz> oh I didn't have any idea, thanks for th einfo

[14:22] <ugexe> basically if you have a percent encoded entity like %25 you must be sure you never double decode it into something like %2525

[14:22] <antoniogamiz> got it :D

[14:23] <antoniogamiz> someone knows what (elem) routine is?

[14:23] <antoniogamiz> https://github.com/perl6/doc/blob/5b8e85c130362fde01ada8675097b6162fd112a1/doc/Language/101-basics.pod6#L436

[14:24] <jnthn> Infix operator for testing set membership

[14:25] <antoniogamiz> mmm so it exists, but its page is not being generated

[14:25] <antoniogamiz> is called (elem)? or have another name?

[14:27] <ugexe> https://docs.perl6.org/language/operators#infix_(elem),_infix_%E2%88%88

[14:28] <antoniogamiz> mm so it's actually documented

[14:28] <antoniogamiz> time to investigate what's going on

[14:30] <antoniogamiz> oohhh it's the header! it does not match any of the current rules

[14:31] <antoniogamiz> ups, there's quite a few cases mmm

[14:34] *** poohman_ joined
[14:37] <Geth> ¦ doc: 5933c30179 | Coke++ | xt/words.pws

[14:37] <Geth> ¦ doc: newly docced classes

[14:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5933c30179

[14:37] <Geth> ¦ doc: 2377cab050 | Coke++ | type-graph.txt

[14:37] <Geth> ¦ doc: Sequence is a role; Fix for #1897

[14:37] <Geth> ¦ doc: 

[14:37] <Geth> ¦ doc: xt/type-graph.t needs to know if something is a role, and

[14:37] <Geth> ¦ doc: will fail if assumes incorrectly. Be explicit.

[14:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2377cab050

[14:38] *** poohman_ left
[14:54] <antoniogamiz> m: [1,2,3][0:*-1]

[14:54] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3[1,2,3][0:7⏏5*-1]␤    expecting any of:␤        colon pair␤»

[14:54] <antoniogamiz> i thought it was like in python

[14:54] <tobs> antoniogamiz: you have to rotate the :

[14:55] <tobs> m: [1,2,3][0..*-1]

[14:55] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[14:55] <tobs> m: [1,2,3][0..*-1].say

[14:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(1 2 3)␤»

[14:55] <antoniogamiz> :oo

[14:55] <antoniogamiz> it makes sense x'd

[14:55] <antoniogamiz> ty

[14:56] <tobs> not sure what 0:-1 would do in python, maybe it would omit the last element? Note that it doesn't here.

[14:56] <lucasb> >>> [1,2,3][0:-1]  #=> [1, 2]

[14:57] <antoniogamiz> tobs: the same that ..

[15:00] <sena_kun> m: [1,2,3][0..*-2].say;

[15:00] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(1 2)␤»

[15:00] <sena_kun> the reason is that `*` gives you length, and you have to return index, so lenth is 3 and -1 is 2, so indexes are 0,1,2 and you get last element

[15:02] <sena_kun> so you need to actually get index before last one, hence -2, because first -1 is a shift because indexes are starting from zero, when length is not, and the second one is because you want an element that is before last

[15:03] <tobs> fwiw, there is a problem solving ticket about indexing with ranges and whatevercodes as it's not always clear what does (or even *is*) what in a subscript: https://github.com/perl6/problem-solving/issues/50

[15:03] <tobs> afk&

[15:07] *** pamplemousse left
[15:14] *** domidumont left
[15:14] *** noisegul joined
[15:15] *** Sgeo_ joined
[15:20] *** jmerelo joined
[15:26] *** pamplemousse joined
[15:28] *** Sgeo__ joined
[15:32] *** Sgeo_ left
[15:41] *** ChoHag left
[15:44] *** nadim_ joined
[16:04] *** pat_js left
[16:05] *** wildtrees joined
[16:07] *** go|dfish joined
[16:16] *** nadim_ left
[16:27] <antoniogamiz> m: "postcircumfix « »" ~~ /postcircumfix « »/

[16:27] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[16:27] <antoniogamiz> that should match, shouldn't it?

[16:34] <jmerelo> m: "postcircumfix « »" ~~ /"postcircumfix « »"/ 

[16:34] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[16:34] <jmerelo> m: say "postcircumfix « »" ~~ /"postcircumfix « »"/ 

[16:34] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢postcircumfix « »｣␤»

[16:35] <antoniogamiz> oh mm

[16:35] <sena_kun> m: say "postcircumfix « »" ~~ /\« \»/ 

[16:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Nil␤»

[16:36] <sena_kun> m: say "«" ~~ /\«/ 

[16:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢«｣␤»

[16:36] <sena_kun> m: say "postcircumfix « »" ~~ /\« ' ' \»/ 

[16:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢« »｣␤»

[16:36] <sena_kun> m: say "postcircumfix « »" ~~ /«post»/ 

[16:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Nil␤»

[16:36] <sena_kun> m: say "postcircumfix « »" ~~ /«[p]»/ 

[16:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Nil␤»

[16:43] <hahainternet> could someone point me to the docs on matching unicode character classes or groups or whatever the term actually is?

[16:44] <sena_kun> hahainternet, maybe https://docs.perl6.org/language/regexes#Unicode_properties ?

[16:45] <hahainternet> ah yes i think that will do, thank you very much :)

[16:46] *** antoniogamiz left
[16:47] *** jmerelo left
[16:51] *** redhands joined
[16:52] *** nepugia left
[17:03] *** opitzs joined
[17:05] <opitzs> Hi, I'm trying to set the LD_LIBRARY_PATH from within perl, so it finds the oracle instant client directory, however, "%*ENV<LD_LIBRARY_PATH>   = '/path';" doesn't seem to work.Any idea where I'm going wrong? Thank you versy much!

[17:06] *** MilkmanDan left
[17:08] *** MilkmanDan joined
[17:16] *** zakharyas joined
[17:17] *** khisanth_ joined
[17:17] *** nadim_ joined
[17:31] <vrurg> opitzs: You have a chance for it to work if you set it in BEGIN before using the module.

[17:32] <vrurg> It won't work on macOS anyway though.

[17:33] *** [particle] joined
[17:33] <opitzs> vrurg: Thank you!

[17:35] <opitzs> vrurg: Thank you, works like a charm!

[17:35] <chloekek> p6: use NativeCall; sub getenv(Str:D $k --> Str) is native {*}; %*ENV<FOO> = 'foo'; say getenv('FOO')

[17:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Str)␤»

[17:35] <chloekek> Setting on %*ENV doesn't update the environment of the process.

[17:36] <chloekek> %*ENV is read by e.g. run, but perhaps not by the dynamic linker?

[17:38] <vrurg> opitzs: welcome!

[17:39] <opitzs> chloekek: It works in the begin block, so it cant be simply that the dynamic linker doesn't work with it. As this is my first perl6 script, I can't comment. Thank you!

[17:40] <vrurg> m: $*ENV<FOO_VAR> = 42; use nqp; say nqp::getenvhash<FOO_VAR>

[17:40] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Dynamic variable $*ENV not found␤  in block <unit> at <tmp> line 1␤␤»

[17:40] <chloekek> s/\$/%/

[17:40] <vrurg> m: %*ENV<FOO_VAR> = 42; use nqp; say nqp::getenvhash<FOO_VAR>

[17:40] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Any)␤»

[17:40] <chloekek> p6: %*ENV<FOO_VAR> = 42; use MONKEY-GUTS; say nqp::getenvhash<FOO_VAR>

[17:40] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Any)␤»

[17:41] <ugexe> a module probably does something like `is native(%*ENV<foo>)`. by using BEGIN you force the ENV to be set before the signature is reached

[17:41] <vrurg> But the linker perhaps considers %*ENV. I don't know.

[17:42] * chloekek wrote some Perl 5 today. Wasn't a bad experience, but "weird" :D

[17:42] <chloekek> Had used Perl 5 a lot until a few years ago.

[17:44] <vrurg> ===> Fetching [FAIL]: Data::MessagePack:ver<0.1.2> from [email@hidden.address]
[17:44] <vrurg> ugexe: ^ any idea what this could be?

[17:47] *** rindolf joined
[18:13] *** Black_Ribbon joined
[18:13] *** pamplemousse left
[18:15] *** wildtrees left
[18:17] *** opitzs left
[18:33] <SmokeMachine> ugexe: Should print this? https://www.irccloud.com/pastebin/n47yjjsv/

[18:33] *** zakharyas left
[18:39] *** wildtrees joined
[18:47] <timotimo> i wonder if zef should get support for the perl6-all-modules repo :)

[18:47] <timotimo> OTOH, you could literally just cd in there and do the installing

[18:47] <timotimo> though not automatically finding the dependencies in there

[18:49] <moritz> fwiw I've tried setting up the updater for perl6-all-modules on a different machine, and failed so far

[18:50] <moritz> it seems that git-subrepo now behaves differently, or something

[18:51] <El_Che> git-subrepo has the tendance of exploting sooner or later

[18:52] <El_Che> for me

[18:52] <El_Che> (not in general)

[19:04] *** molaf joined
[19:04] *** molaf left
[19:07] *** chloekek joined
[19:32] <ugexe> vrurg: i don't see why it should work. does `git clone [email@hidden.address] work?

[19:33] <vrurg> ugexe: it does. 

[19:33] <ugexe> it doesnt for me

[19:33] <ugexe> i dont have their ssh key

[19:34] <vrurg> Perhaps because I have git configured for github account.

[19:37] <ugexe> i mean my git is configured to work with e.g. github

[19:39] <ugexe> anywho in the config under the git plugin you can change scheme (I think its set to https?). maybe it is not working right for the [email@hidden.address] format

[19:39] <ugexe> https://github.com/ugexe/zef/blob/e73897378b36cbf53f2ed8d98363d94bac70767d/lib/Zef/Service/Shell/git.pm6#L144-L147

[19:40] <ugexe> the intention is so user can override ssh based urls with https

[19:40] <ugexe> notably the `:` after the .com

[19:45] <timotimo> .o( zef could also have Log::Timeline support )

[19:46] <ugexe> most of zef output goes through a "logger", and the logger prints it to the screen

[19:47] <ugexe> https://github.com/ugexe/zef/blob/e73897378b36cbf53f2ed8d98363d94bac70767d/lib/Zef/Fetch.pm6#L24-L28

[19:47] <timotimo> the thing about Log::Timeline is that there's not only events, but also "tasks", and all those will "nest"

[19:48] <timotimo> ah, there's phase => START, and i suppose a corresponding phase => FINISH?

[19:48] <ugexe> enum PHASE is export <BEFORE START LIVE STOP AFTER>;

[19:49] *** reach_satori joined
[19:49] <timotimo> Log::Timeline theoretically wants classes to be created for the different things that can "happen"

[19:50] <ugexe> we do not know what all the tasks are before we start

[19:51] <timotimo> right

[19:52] <ugexe> if zef implemented Log::Timeline it would also essentially obsolete that module

[19:52] <timotimo> the logger module you mean?

[19:52] <ugexe> whatever it does period

[19:52] <ugexe> since its not quite the thing that can be implemented with like a plugin

[19:52] <timotimo> it's very cross-cutting

[19:53] <timotimo> it doesn't have to be the only logger, of course

[19:54] <ugexe> right but what im getting at is zef will never `use Some::External::Module` unless it can be made to work like a plugin. So for zef to implement Log::Timeline is to essentially EOL Log::Timeline because everyone has zef if they want to install Log::Timeline so why bother

[19:54] <timotimo> haha

[19:54] <timotimo> i see

[19:56] <ugexe> along those lines i've pondered on zef generating makefiles which is requires something similar

[19:57] <timotimo> makefiles that would do what?

[19:57] <timotimo> to do building of perl6 modules based on Build.pm and the stuff in the meta json?

[19:57] <timotimo> so a little bit like ufo, but a whole lot more stuff?

[19:57] <ugexe> fetch, extract, install, everything

[19:57] <ugexe> pretty much everything zef does can be broken down into simple shell commands

[19:58] <ugexe> except for determining the dependency graph

[19:58] <timotimo> interesting, so when such a makefile is spat out, you don't need zef any more?

[19:58] <ugexe> yeah

[20:00] <ugexe> i'm not even sure how useful that will ultimately prove. but it seemed like a fun idea

[20:00] <timotimo> i definitely see why it'd be interesting i think

[20:01] <ugexe> SmokeMachine: not quite. fields without entries are wrong

[20:01] <ugexe> m: say CompUnit::DependencySpecification.new(:short-name<Test>).perl

[20:01] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «CompUnit::DependencySpecification.new(short-name => "Test", source-line-number => 0, from => "Perl6", version-matcher => Bool::True, auth-matcher => Bool::True, api-matcher => Bool::True)␤»

[20:01] <ugexe> not blank string

[20:03] <ugexe> blank string would be :auth<> ala Test:auth<> and nobody does that

[20:04] <timotimo> we should try putting a module with that in the ecosystem to see if anything breaks

[20:04] <ugexe> you *can* have a module with a blank string as auth

[20:04] <timotimo> right

[20:04] <ugexe> m: use Test:auth(""); # but it must exist

[20:04] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Could not find Test:auth<> at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-1/shar…»

[20:05] <timotimo> right

[20:05] <ugexe> Could not find Test:auth<> -- is a bit disengenious tho

[20:05] <ugexe> m: use Test:auth<>

[20:05] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Potential difficulties:␤    Pair with <> really means an empty list, not null string; use :auth('') to represent the null string,␤      or :auth() to represent the empty list more accurately␤    at <tmp>:1␤    ------> 3use Test:auth<>7⏏5<…»

[20:06] <ugexe> m: use Test:auth<<>>; # and this just doesn't look right :P

[20:06] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Could not find Test:auth<> at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-1/shar…»

[20:11] <masak> do people use `temp` a lot? I feel it's a bit underused, especially with dynamic variables

[20:11] <masak> (I'm building a recursive thing that keeps $*indent, and `temp` goes very well with that)

[20:21] *** Altai-man_ joined
[20:24] *** sena_kun left
[20:28] *** Altai-man_ left
[20:38] <ugexe> from what i remember it was pretty buggy

[20:38] <ugexe> when i used it circa 4 years ago

[20:42] <ugexe> i was wanting to use a pattern like `use Test; my $foo = ...; subtest "1" { ... }; subtest "2" { temp $foo = ...; ... };`

[20:47] *** rindolf left
[20:55] <masak> seems to work fine with my use cases, at least

[20:55] <masak> ugexe: if you find something that's still unambiguously buggy, I'd be interested to know about it

[20:55] <masak> I still haven't found a good, concrete use of `let`. I'm interested to be told how to use it in practice.

[20:58] *** SyrupThinker joined
[21:06] *** molaf joined
[21:11] *** irced joined
[21:23] *** wildtrees left
[21:28] *** chloekek left
[21:55] *** |oLa| joined
[21:56] <SmokeMachine> ugexe: thanks!

[21:56] *** |oLa| left
[22:07] *** |oLa| joined
[22:08] *** |oLa| left
[22:18] *** noisegul left
[23:23] *** evalable6 joined
[23:23] *** holyghost joined
[23:57] *** aborazmeh joined
[23:57] *** aborazmeh left
[23:57] *** aborazmeh joined
