[00:00] <Kaypie> thanks Xliff 

[00:00] *** greppable6 joined
[00:00] *** Kaypie left
[00:03] *** lelf left
[00:04] <Xliff> yw

[00:04] <Xliff> That will actually work for any perl6 project, so... =)

[00:38] *** kurahaupo left
[00:38] *** kurahaupo joined
[00:49] *** zachk left
[00:57] *** kurahaupo left
[00:57] *** kurahaupo_ joined
[00:58] *** Kaiepi joined
[01:01] *** stux|RC-only left
[01:04] *** lucasb left
[01:08] *** klapperl_ joined
[01:10] *** klapperl left
[01:20] <ugexe> bisectable6: say (1,2,3).any.Str.WHAT

[01:20] <bisectable6> ugexe, Bisecting by output (old=2015.12 new=d5044de) because on both starting points the exit code is 0

[01:21] <bisectable6> ugexe, bisect log: https://gist.github.com/eb6c41c80ab7ea31ba64f66a18ba22c8

[01:21] <bisectable6> ugexe, (2017-08-27) https://github.com/rakudo/rakudo/commit/7cd153f43fdec4fd09638e3b91b73d2339f64ce6

[01:21] <ugexe> lizmat: ^

[01:22] <ugexe> this is sort of tied to the classify with a junction thing

[01:23] *** molaf left
[01:23] *** cpan-p6 left
[01:24] *** cpan-p6 joined
[01:24] *** cpan-p6 left
[01:24] *** cpan-p6 joined
[01:27] <ugexe> m: my $j := any(1,2,3); my $hash := Hash[Int, Junction].new: $j => 42; say $hash.perl; say $hash{$j}

[01:27] <evalable6> ugexe, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) (my Int %{Junction} = (any(1, 2, 3)) => 42)‚ê§Type check failed in binding to parameter 'key'; expected Junction but got Int (1)‚ê§  in block <unit> at /tmp/nVFPKY9x9c line 1‚ê§‚ê§¬ª

[01:31] *** jeromelanteri joined
[01:31] *** AlexDaniel left
[01:31] *** kurahaupo_ left
[01:32] *** AlexDaniel joined
[01:33] <ugexe> bisectable6: my $j := any(1,2,3); my $hash := Hash[Int, Junction].new: $j => 42; say $hash{$j}

[01:33] <bisectable6> ugexe, Bisecting by output (old=2015.12 new=d5044de) because on both starting points the exit code is 1

[01:33] <Kaiepi> Xliff, i'll be a little bit longer, i had to upgrade my os and am upgrading packages now

[01:33] <Kaiepi> what is it you wanted me to do again?

[01:33] <bisectable6> ugexe, bisect log: https://gist.github.com/4b7b1c1217f95bd327035209addd5e74

[01:33] <bisectable6> ugexe, (2016-02-18) https://github.com/rakudo/rakudo/commit/9983c2c8434ed81c532a5706996f284283b48d0a

[01:35] *** molaf joined
[01:36] <ugexe> m: my $j := any(1,2,3); my $hash := Hash[Int, Junction].new: $j => 42; say $hash.perl; say $hash.AT-KEY($j)

[01:36] <evalable6> ugexe, rakudo-moar d5044de2f: OUTPUT: ¬´(my Int %{Junction} = (any(1, 2, 3)) => 42)‚ê§42‚ê§¬ª

[01:38] <ugexe> then again maybe its impossible to have both the general %hash{1|2|3} to match up to 3 keys while also allowing for a typed hash to a match only a single key that consist of that junction

[01:39] <ugexe> since it could also be a junction of junctions

[01:39] <ugexe> fuck you junction of junctions

[01:40] <Kaiepi> i asked earlier in #perl6-dev but i have a sum type package that's almost finished that subclasses Perl6::Metamodel::SubsetHOW. should i call it Type::Sum or Metamodel::SumHOW?

[01:40] *** kurahaupo joined
[01:45] *** kurahaupo_ joined
[01:47] *** kurahaupo left
[02:01] *** Kaiepi left
[02:01] *** aindilis left
[02:05] *** Kaiepi joined
[02:05] *** jeromelanteri left
[02:07] *** kent\n left
[02:07] *** squashable6 left
[02:08] *** kurahaupo_ left
[02:10] <Kaiepi>  Cannot locate native library '/home/morfent/.perl6/share/perl6/site/resources/088D535EA9C2EAB9857D294E19C785EEE166CFE9.so': Cannot load specified object

[02:10] <Kaiepi> how do i find out which library this is from?

[02:11] *** squashable6 joined
[02:11] *** ChanServ sets mode: +v squashable6

[02:12] <ugexe> zef locate 088D535EA9C2EAB9857D294E19C785EEE166CFE9.so --sha1

[02:12] <ugexe> im not sure why that even works though

[02:13] <ugexe> since it requires the .so *and* --sha1

[02:14] <ugexe> m: run("zef","locate","A6385C8D3FC58E9CD0BFF898227CEFEDC28AFCC4.json","--sha1")

[02:14] <evalable6> ugexe, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) The spawned command 'zef' exited unsuccessfully (exit code: 1)‚ê§  in block <unit> at /tmp/zAs9RZCKHC line 1‚ê§‚ê§¬ª

[02:14] *** squashable6 left
[02:15] <ugexe> ===> From Distribution: zef:ver<0.7.2>:auth<github:ugexe>:api<0>

[02:15] <ugexe> resources/config.json => A6385C8D3FC58E9CD0BFF898227CEFEDC28AFCC4.json

[02:16] *** Kaiepi left
[02:17] *** squashable6 joined
[02:17] *** ChanServ sets mode: +v squashable6

[02:27] *** Kaiepi joined
[02:32] <Xliff> Kaiepi: No worries. You can take your time. I just want other eyes on some codfe.

[02:34] <Xliff> Kaiepi: I ported this: https://github.com/GNOME/pango/blob/master/examples/cairotwisted.c

[02:34] <Xliff> To this: https://github.com/Xliff/p6-Pango/blob/master/t/02-twisted.t

[02:34] *** Kaiepi left
[02:34] <Xliff> And can't get the text to render properly.

[02:35] <Xliff> It's a large mouthful, for sure. So if you can help, do it when you can. No rush.

[02:41] *** buffet joined
[02:41] *** kurahaupo joined
[02:41] *** buffet_ left
[02:53] *** stux|RC-only joined
[02:55] *** Kaiepi joined
[03:01] <Kaiepi> .

[03:01] <Xliff> ,

[03:01] <Kaiepi> was checking if i had any tells

[03:01] <Xliff> Yeah, I figured.

[03:01] <Kaiepi> was on/off constantly because i was setting up my dac

[03:01] <Kaiepi> finally supported by openbsd 6.5!

[03:02] <AlexDaniel> what an interesting failure mode! Just executed a python script that had no proper shebang, and it started taking screenshots because `import`

[03:02] <Xliff> Kaiepi: https://colabti.org/irclogger/irclogger_log/perl6?date=2019-04-06#l73

[03:03] <AlexDaniel> well‚Ä¶ that goddamn library is not compatible with python3 anyway :S

[03:05] *** araraloren joined
[03:11] *** vrurg left
[03:16] *** vrurg joined
[03:21] <Kaiepi> Xliff, why aren't you calling $path.destroy before calling $c.fill(:preserve) like in the example?

[03:24] <Xliff> Hmmm.... 

[03:25] <Xliff> Looking.

[03:26] <Xliff> I am thinking that line got nixed because it broke the output in some way.

[03:27] <Xliff> Or... calling destroy on the path caused a SEGV

[03:30] <Xliff> Adding it back doesn't cause a SEGV so I guess that's been fixed since then.

[03:30] <Xliff> Thanks for checking! ;)

[03:30] *** Cabanossi left
[03:36] <Xliff> Kaiepi: Yeah. It was a SEGV. If you uncomment the call to draw_twisted in draw_dream, any call to $path.destroy in draw_twisted will cause a double-free and a SEGV.

[03:37] <Xliff> Uncommenting that line also makes the code run much slower. But it will try to draw the twisted text. Forgot to mention that. *sheepish grin*

[03:38] <Seance[m]> Can anyone exlpain this error to me?

[03:38] <Seance[m]> "Cannot negate % because multiplicative operators are not iffy enough"

[03:39] *** Cabanossi joined
[03:39] <Seance[m]> I wasn't able to google it :|

[03:39] <Xliff> Seance[m]: Can you post some code?

[03:40] <Xliff> Just guessing, but did you try and do something like !($a % $b) ?

[03:40] <Xliff> m: say !(0 % 2)

[03:40] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´True‚ê§¬ª

[03:40] <Seance[m]> I changed to not test for negativity

[03:40] <Seance[m]> here is the resulting line: 	$i + 2 % 2 ?? @placeholder[i] = operate(@placeholder[i]) !! proceed;

[03:41] <Seance[m]> so i previously had $i + 1 !% 2

[03:41] <Seance[m]> as the condition

[03:41] <Seance[m]> there are other errors in that line I'm sorting too :P

[03:41] <Seance[m]> i.e. precedence for ternary operator

[03:42] <Xliff> m:  !((0 + 1) % 2) ?? 2 !! 1

[03:42] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´WARNINGS for /tmp/SBh8AJp2oo:‚ê§Useless use of constant integer 2 in sink context (line 1)‚ê§Useless use of constant integer 1 in sink context (line 1)‚ê§¬ª

[03:42] <Xliff> m: my $a = !((0 + 1) % 2) ?? 2 !! 1; $a.say

[03:42] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´1‚ê§¬ª

[03:43] <Xliff> Seance[m]: Probably better written as: !(($i + 1) % 2)

[03:43] <Seance[m]> ok

[03:43] <Xliff> Or: (($i + 1) % 2).so.not

[03:43] <Seance[m]> i was probably jumbling the precedence

[03:44] <Xliff> m: say (5 !% 2)

[03:44] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/D9BfnNAa4U‚ê§Cannot ‚Ä¶¬ª

[03:44] <evalable6> Xliff, Full output: https://gist.github.com/e8d08c82776869405e325aa71afd9577

[03:44] <Seance[m]> i love using ternary operators and just wrecking my code with them

[03:44] <Xliff> Yeah. I think that is better written without the ternary since one condition isn't doing the same as the other.

[03:47] <Xliff> Seance[m]: That is probably better written as: "proceed unless ($i + 2) % 2; @placeholder[$i] = operate(@placeholder[i]);"

[03:47] <Xliff> Errr...

[03:48] <Xliff> proceed unless ($i + 2) % 2; @placeholder[$i] = operate(@placeholder[$i]);

[03:48] <Seance[m]> iirc proceed only works in given/when

[03:48] <Xliff> .oO( Even I forgot the $i! )

[03:48] <Seance[m]> 'proceed without when clause'

[03:50] <AlexDaniel`> Seance: basically, you can only negate operators that return Bool

[03:50] <AlexDaniel`> Seance: and `%` is not one of them, did you mean `%%`?

[03:51] <Xliff> Ah. I keep forgetting that.

[03:51] <Xliff> m: say 5 %% 3; say 5 % 3;

[03:51] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´False‚ê§2‚ê§¬ª

[03:51] *** araraloren left
[03:51] <Xliff> m: say 5 !%% 3; say 5 % 3;

[03:51] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´True‚ê§2‚ê§¬ª

[03:51] <Xliff> Seance[m]: ^^

[03:51] *** araraloren joined
[03:51] <Seance[m]> I was initially using the divisibility operator, then used modulo to work around my error, effectively triggering the exact opposite conditions I was intending

[03:52] <Seance[m]> I thought 0 was false

[03:52] <Seance[m]> and anything else was true

[03:52] *** aborazmeh joined
[03:52] *** aborazmeh left
[03:52] *** aborazmeh joined
[03:52] <Xliff> so your condition would be: ($i + 1) !%% 2

[03:52] <Seance[m]> so if i used modulo and returned 0 it'd be false

[03:52] <Xliff> Yes, but !% does not exist.

[03:52] <Xliff> !%% does

[03:52] <Seance[m]> ahhhhh, I see now

[03:53] <Seance[m]> because modulo isn't boolean

[03:53] <Seance[m]> derp

[03:53] <Xliff> Yeah. I know that feeling. :D

[04:09] *** Kaiepi left
[04:12] *** abraxxa joined
[04:14] <Seance[m]> I have a second question, I seem to be getting blank indices added to a positional when i call .split

[04:15] *** stux|RC-only left
[04:15] <Seance[m]> my @placeholder = $input.trim.split("");

[04:16] <Seance[m]> 	say @placeholder;

[04:16] <Seance[m]> 	

[04:16] <Seance[m]> 	for @placeholder {say "current index is " ~ $_}

[04:16] *** aborazmeh left
[04:17] *** abraxxa left
[04:17] * Seance[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/XiuUjAlcDiCBcOJQpuDcjluc >

[04:19] *** andrzejku joined
[04:20] *** abraxxa joined
[04:20] *** abraxxa left
[04:22] *** Kaiepi joined
[04:24] <Seance[m]> sorry, just read the 'split' section in the docs

[04:24] <Seance[m]> disregard

[04:25] <Seance[m]> didn't remember the empty index at beginning an end in previous uses

[04:26] <Seance[m]> there must be an obvious use for such a function that I don't understand

[04:28] *** stux|RC-only joined
[04:35] *** stux|RC-only left
[04:40] *** Kaiepi left
[04:47] *** Kaiepi joined
[04:50] <Xliff> m: my %a = ( a => 1, b => 2 ); my %b = ( c=> 3, d => 4); %a.append(%b); %a.gist.sat

[04:50] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) No such method 'sat' for invocant of type 'Str'. Did you mean any of these?‚ê§    Rat‚ê§    say‚ê§‚ê§  in block <unit> at /tmp/9BxWGLcRQW line 1‚ê§‚ê§¬ª

[04:50] <Xliff> m: my %a = ( a => 1, b => 2 ); my %b = ( c=> 3, d => 4); %a.append(%b); %a.gist.say

[04:50] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´{a => 1, b => 2, c => 3, d => 4}‚ê§¬ª

[04:55] *** Kaiepi left
[05:17] *** benjikun_ left
[05:27] *** sauvin joined
[05:30] *** aborazmeh joined
[05:30] *** aborazmeh left
[05:30] *** aborazmeh joined
[05:39] *** Kaiepi joined
[05:41] *** vrurg left
[05:51] *** andrzejku left
[05:53] *** Kaiepi left
[06:00] *** aborazmeh left
[06:01] *** aborazmeh joined
[06:01] *** aborazmeh left
[06:01] *** aborazmeh joined
[06:06] *** jmerelo joined
[06:06] <jmerelo> squashable6: status

[06:06] <squashable6> jmerelo, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà7 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:06] <squashable6> jmerelo, Log and stats: https://gist.github.com/8b2df1943b354d6c963699922461e8b4

[06:06] *** Kaiepi joined
[06:07] <Kaiepi> ok i give up on setting up my dac

[06:07] <Kaiepi> openbsd really doesn't like usb audio v2 using usb 3 and guess what all the ports on my laptop are!

[06:08] <Kaiepi> anyways that means i can finally get around to taking a look at what's wrong Xliff 

[06:08] *** skyscout left
[06:11] <squashable6> Webhook for perl6-community-modules/perl6-http-server is now active! Keep it logically awesome.

[06:12] *** hasuwiz joined
[06:12] <hasuwiz> Good morning #Perl6!

[06:12] <moritz> good morning hasuwiz 

[06:13] <squashable6> Webhook for perl6/perl6-most-wanted is now active! Encourage flow.

[06:13] <jmerelo> hey

[06:16] <Kaiepi> morning hasuwiz 

[06:16] <jmerelo> Here are the instructions for today's squashathon: https://github.com/rakudo/rakudo/wiki/Squashathon:-Perl-6-community-and-most-wanted-modules

[06:20] <Kaiepi> i made some issues on Net::Telnet, which is in the most wanted page, for this squashathon https://github.com/Kaiepi/p6-Net-Telnet/issues/

[06:20] <Kaiepi> some of them don't require knowledge of telnet's protocol

[06:21] <jmerelo> Kaiepi: can you please add a hook?

[06:21] <Kaiepi> where?

[06:21] <jmerelo> Kaiepi: to the webhooks in your repo

[06:22] <jmerelo> Kaiepi: http://whateverable.6lang.org:4243/ , pass squashathonmostwanted format application/json

[06:23] <Kaiepi> do i check send me everything or just push?

[06:24] <jmerelo> Kaiepi: Everything, I guess. That includes issues, for instance.

[06:26] <AlexDaniel> Kaiepi: hold on‚Ä¶

[06:26] <AlexDaniel> Kaiepi: squashathonmostwanted

[06:26] <ugexe> I've implemented a polyglot Perl 5/6 levenshtein damerau algorithm: https://gist.github.com/ugexe/e2436e5685bbf18951dc722babfe3c15

[06:26] <jmerelo> ugexe: wow

[06:26] <AlexDaniel> Kaiepi: ah omg, it was already mentioned

[06:26] * AlexDaniel goes back to bed :)

[06:27] <squashable6> Webhook for Kaiepi/p6-Net-Telnet is now active! Approachable is better than simple.

[06:27] <AlexDaniel> \o/

[06:28] <ugexe> Juerd: ^^^... array access was harder than expected (resulting in that splice madness)

[06:29] <Geth> ¬¶ perl6-most-wanted: 4663403a18 | (JJ Merelo)++ | README.md

[06:29] <Geth> ¬¶ perl6-most-wanted: Minor editing

[06:29] <Geth> ¬¶ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/4663403a18

[06:29] <squashable6> üçïüçïüçï  First contribution by JJ++! ‚ô•

[06:30] <squashable6> üçï JJ++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480478784

[06:31] <jmerelo> Kaiepi: added to the squashathon page: https://github.com/rakudo/rakudo/wiki/Squashathon:-Perl-6-community-and-most-wanted-modules

[06:32] <Kaiepi> awesome

[06:33] <Kaiepi> those issues are the main things preventing me from uploading it to cpan atm

[06:50] *** jmerelo left
[06:52] <squashable6> üçï Kaiepi++ opened issue ‚ÄúDebug logging should onl‚Ä¶‚Äù: https://github.com/Kaiepi/p6-Net-Telnet/issues/12

[06:52] <squashable6> üçïüçïüçï  First contribution by Kaiepi++! ‚ô•

[06:52] <squashable6> üçï Kaiepi++ labeled issue ‚ÄúDebug logging should onl‚Ä¶‚Äù (good first issue): https://github.com/Kaiepi/p6-Net-Telnet/issues/12

[07:13] <discord6> <Tyler (Aearnus)> how do you require that a certain role is only implemented on objects which implement another role?

[07:14] <discord6> <Tyler (Aearnus)> e.x. i only want REPL objects to be able to do FileWatch

[07:14] <Kaiepi> where's the perl6 discord? i'm more active there than on irc

[07:15] *** molaf left
[07:15] <discord6> <Tyler (Aearnus)> Kaiepi: https://discord.gg/gg2a3T6

[07:15] *** molaf joined
[07:16] *** molaf left
[07:29] *** netrino joined
[07:32] *** domidumont joined
[07:41] *** patrickb joined
[07:43] <discord6> <Tyler (Aearnus)> hey all, i finished the new perl6 repl I was working on. it's past feature parity with the default repl when used with rlwrap. it supports loading files and interacting directly with them. example here: https://asciinema.org/a/d4ThnRboPC7i0C01RgoOKn1h2

[07:44] <discord6> <Tyler (Aearnus)> (i accidentally end the video with a ^D instead of a ^C causing it to vomit a little bit -- but i just fixed that)

[07:44] *** rtw_ joined
[07:47] *** rtw_ left
[07:49] *** ChoHag left
[07:54] *** rindolf joined
[08:00] *** ChoHag joined
[08:05] *** aborazmeh left
[08:05] *** sena_kun joined
[08:08] <patrickb> tadzik: I have made some extensive changes in rakudobrew. They are backwards incompatible (wrt to `rakudobrew self-upgrade`) and can't be automatically post-upgrade-repaired.

[08:09] <patrickb> tadzik: What do you think would be a good way forward?

[08:09] <patrickb> I thought about creating a new repository in a newly created project also called rakudobrew and just start afresh there...

[08:28] *** atweiden-air joined
[08:31] <tadzik> patrickb: where can I see the changes?

[08:32] <patrickb> https://github.com/patzim/rakudobrew

[08:34] <patrickb> New features: PATH-modification mode as alterantive to shim based mode, bash commandline completion, new folder structure, split of rakudobrew into several files.

[08:35] <patrickb> I still plan to implement a command to register an external rakudo build so it can be switched to using rakudobrew

[08:43] <atweiden-air> anyone been able to install rakudo-2019.03 system-wide on linux lately?

[08:44] <atweiden-air> `No writeable path found, /pkgbuilds/rakudo/pkg/rakudo/usr/share/perl6 not writeable in block <unit> at tools/build/install-core-dist.p6 line 28`

[08:45] <atweiden-air> have `mkdir -p "$pkgdir/usr/share/perl6"`, and postop the path exists with multiple subdirs

[08:45] <atweiden-air> no idea why, but this seems only broken on archlinux; voidlinux is fine

[08:47] *** oftl left
[08:51] <patrickb> nine, ugexe: ^ # Those two might have an idea.

[09:04] <tadzik> patrickb: I see you implemented you own slurp() and spurt(); may I interest you in a core module, Path::Tiny? :)

[09:05] <tadzik> and damn, that's a lot of changes indeed :)

[09:09] <squashable6> üçï bduggan++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480488356

[09:09] <squashable6> üçïüçïüçï  First contribution by bduggan++! ‚ô•

[09:10] *** japh left
[09:14] <patrickb> tadzik: If I remember correctly you were the one implementing slurp() and spurt() in rakudobrew a long time ago. Path::Tiny looks promising. :-)

[09:15] <tadzik> patrickb: could be! Maybe I didn't know about it then :)

[09:15] <tadzik> I work with plenty of my old code and always sigh at the sight of File::Slurp these days

[09:16] <tadzik> ooh, it's actually not a core module

[09:16] <tadzik> that explains it :)

[09:16] <tadzik> then yeah, fair enough having it reimplemented there

[09:17] <patrickb> Well it is possible to just copy it hard.

[09:18] <patrickb> Not sure it's worth it though...

[09:19] <patrickb> What's bad about File::Slurp if I may ask?

[09:20] <tyil> is there a way with DB::Pg to execute an SQL file? I'm trying to use $pg.query($file.slurp);, but this gives me an error that I cannot insert multiple commands into a prepared statement :<

[09:20] <patrickb> tadzik: Ah I actually use FIle::Slurper most of the time. That superseded File::Slurp as well.

[09:20] <tyil> (I was able to run a sql file in a similar fashion with DBIish, but iirc DB::Pg was better if you wanted to work with multithreading)

[09:31] *** powerbit joined
[09:31] *** aindilis joined
[09:35] *** nevack joined
[09:36] *** oftl joined
[09:38] <nevack> Hi, may i ask you to help me with this one-liner? https://pastebin.com/wX3d8RPv Task is to say what value f(x) -> ? when x -> Inf

[09:39] *** molaf joined
[09:40] <hahainternet> nevack: it'd be polite to un-golf the sample before asking for generic help

[09:42] <nevack> hahainternet: how can i do this? is there any tool?

[09:45] *** gng joined
[09:53] <sena_kun> nevack, first write it in long, but easy to understand form ("ungolfed"), and get it working right. once it works, you can make it shorter and shorter ("to golf").

[09:57] <nevack> sena_kun: ok, thanks. Also i need to optimise this, cause it works too long for x = 30, but i need x -> Inf.

[09:58] <patrickb> tadzik: So what do you think would be a good way forward?

[09:59] <patrickb> The basic incompatibility is that I moved the installations to a sub directory. Since all builds up to very recently are not relocatable, it's not possible to just move them over.

[09:59] <squashable6> üçï Altai-man++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480491431

[10:04] *** nevack left
[10:05] *** aindilis` joined
[10:06] *** aindilis left
[10:07] *** pmurias_ left
[10:13] *** gng left
[10:17] <Kaiepi> m: say %*ENV<$ORIGIN>

[10:17] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´(Any)‚ê§¬ª

[10:18] *** squashable6 left
[10:19] *** araraloren left
[10:19] *** cpan-p6 left
[10:19] *** araraloren joined
[10:20] *** cpan-p6 joined
[10:20] *** cpan-p6 left
[10:20] *** cpan-p6 joined
[10:22] *** rindolf left
[10:23] *** squashable6 joined
[10:27] *** aindilis` left
[10:28] *** aindilis joined
[10:30] *** AlexDaniel left
[10:33] *** pistacch_ left
[10:34] *** pistacchio joined
[10:35] *** fatguy joined
[10:36] <fatguy> what is the use case of using submethod TWEAK, looks like i can do all in BUILD ?

[10:43] <lizmat> TWEAK is called *after* the object is already completely built

[10:43] <lizmat> so you can use the normal initialization features and then tweak them to your liking

[10:45] <timotimo> also, having a submethod BUILD will override everything else in that class, like default values for your attributes

[10:49] <fatguy> so looks like the common use case is using TWEAK rather than BUILD ? i still can't think of the use case when to use BUILD and TWEAK, can you help by example or point me to right direction

[10:50] <lizmat> nowadays, using TWEAK is probably the best way to go

[10:51] <fatguy> ok, thanks @lizmat, @timotimo for the advice

[10:58] *** aindilis left
[10:59] *** aindilis joined
[11:04] *** netrino left
[11:11] *** ravenousmoose joined
[11:20] <cpan-p6> New module released to CPAN! Archive::Libarchive::Raw (0.0.9) by 03FRITH

[11:21] *** awwaiid joined
[11:24] *** pmurias joined
[11:31] *** molaf left
[11:31] *** samcv_ is now known as samcv

[11:33] *** squashable6 left
[11:35] *** squashable6 joined
[11:39] *** molaf joined
[11:45] *** Black_Ribbon left
[11:49] *** MidCheck joined
[11:50] *** pmurias left
[11:52] *** ravenousmoose left
[11:56] *** rindolf joined
[12:00] *** fatguy left
[12:01] *** pmurias joined
[12:09] *** molaf left
[12:12] *** vsss left
[12:14] *** pmurias left
[12:34] *** nevack joined
[12:35] *** nevack left
[12:38] *** atweiden-air left
[12:42] *** araraloren left
[12:42] *** araraloren_ joined
[12:46] *** domidumont left
[12:56] *** netrino joined
[12:58] *** ctilmes1 joined
[13:00] <ctilmes1> tyil: You can do multiple statements (not queries to get results) with DB::Pg.execute

[13:00] <ctilmes1> tyil: $pg.execute('insert into foo values (42); insert into foo values(57)');

[13:00] <ctilmes1> tyil: also no placeholders/arguments

[13:01] *** ctilmes1 left
[13:01] *** cpan-p6 left
[13:03] *** cpan-p6 joined
[13:03] *** cpan-p6 left
[13:03] *** cpan-p6 joined
[13:07] <Juerd> ugexe: It's interesting how the 5/6 polyglots look like 5 from a distance, not 6.

[13:08] <Juerd> ugexe: And it's painful that in this example, 6 takes 10 times as long :(

[13:10] *** rindolf left
[13:11] *** ufobat__ joined
[13:11] <jnthn> Juerd: I'm looking through the log here but don't see the code in question; link? :)

[13:12] <Juerd> jnthn: https://gist.github.com/ugexe/e2436e5685bbf18951dc722babfe3c15

[13:14] *** ufobat_ left
[13:15] *** MilkmanDan left
[13:15] *** MilkmanDan joined
[13:18] *** nevack joined
[13:24] *** rtw_ joined
[13:25] *** sena_kun left
[13:26] *** rtw_ left
[13:27] <tyil> ctilmes: ah, thanks!

[13:28] <tyil> it's all stand-alone scripts to create the database, so I don't need to pass in arguments from the Perl side of things

[13:31] *** rtw_ joined
[13:33] *** rtw_ left
[13:37] *** ChoHag left
[13:43] *** lucasb joined
[13:44] *** rindolf joined
[13:45] *** pmurias joined
[13:50] *** pmurias left
[13:51] *** pmurias joined
[13:52] *** sena_kun joined
[13:56] *** ChoHag joined
[13:59] *** random_yanek left
[14:00] *** hasuwiz left
[14:00] *** hasuwiz joined
[14:00] *** zakharyas joined
[14:08] *** vrurg joined
[14:11] *** random_yanek joined
[14:11] * guifa just realized that module names can have single apostrophes.  That seems ‚Ä¶ like it could be abused haha

[14:11] <guifa> Or identifiers in general wow

[14:12] *** MilkmanDan left
[14:14] <sena_kun> m: class Isn'tItFun {}; say Isn'tItFun.new;

[14:14] <evalable6> sena_kun, rakudo-moar c99ae9b32: OUTPUT: ¬´Isn'tItFun.new‚ê§¬ª

[14:15] <sena_kun> m: class Isn'tItF'un {}; say Isn'tItF'un.new;

[14:15] <evalable6> sena_kun, rakudo-moar c99ae9b32: OUTPUT: ¬´Isn'tItF'un.new‚ê§¬ª

[14:15] <lizmat> m: my don't = True; say $don't

[14:15] <evalable6> lizmat, rakudo-moar c99ae9b32: OUTPUT: ¬´(exit code 1) 04===SORRY!04===‚ê§Type 'don't' is not declared‚ê§at /tmp/XXutiBWS‚Ä¶¬ª

[14:15] <evalable6> lizmat, Full output: https://gist.github.com/7b657e131956dd70dfb79ba5e1c5c3b2

[14:16] <lizmat> m: my $don't = True; say $don't

[14:16] <evalable6> lizmat, rakudo-moar c99ae9b32: OUTPUT: ¬´True‚ê§¬ª

[14:17] <guifa> Kinda makes me happy though because Ge‚Äôez is best spelt with an apostrophe

[14:17] *** MilkmanDan joined
[14:19] <guifa> m: my $‚Äô = 9; say $‚Äô

[14:19] <evalable6> guifa, rakudo-moar c99ae9b32: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/eIczGsfGZ8‚ê§Name mu‚Ä¶¬ª

[14:19] <evalable6> guifa, Full output: https://gist.github.com/22a14ceb07162c7775b508547eb69452

[14:25] *** AlexDaniel joined
[14:29] <ugexe> Perl 5 has allowed ‚Äò in package names as the separator since forever 

[14:31] <mst> it's somewhat deprecated but used for jokes a fair bit

[14:33] <squashable6> üçï Xliff++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480508857

[14:33] <squashable6> üçïüçïüçï  First contribution by Xliff++! ‚ô•

[14:35] <squashable6> üçï JJ++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480509046

[14:39] *** zakharyas left
[14:43] <squashable6> üçï alabamenhu++ wrote a comment on ‚ÄúAdd Intl-CLDR‚Äù: https://github.com/perl6/ecosystem/pull/445#issuecomment-480509572

[14:43] <squashable6> üçïüçïüçï  First contribution by alabamenhu++! ‚ô•

[14:44] <squashable6> üçï JJ++ wrote a comment on ‚ÄúAdd Intl-CLDR‚Äù: https://github.com/perl6/ecosystem/pull/445#issuecomment-480509639

[14:47] <squashable6> üçï taboege++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480509868

[14:47] <squashable6> üçïüçïüçï  First contribution by taboege++! ‚ô•

[14:54] *** lgtaube left
[14:59] *** jeromelanteri joined
[15:06] <ugexe> Juerd: changing it to use the perl6 built in min/max is 10s slower than the polymin/polymax

[15:07] *** pmurias left
[15:09] *** lgtaube joined
[15:09] *** MidCheck left
[15:11] <squashable6> üçï AlexDaniel++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480511719

[15:16] *** squashable6 left
[15:19] *** squashable6 joined
[15:26] *** mowcat joined
[15:26] *** mowcat left
[15:27] *** mowcat joined
[15:29] *** molaf joined
[15:44] <guifa> In case anyone were desperately wanting them, I just added roman and ge‚Äôez numerals to Intl::CLDR :-)

[15:46] *** MidCheck joined
[15:59] <Geth> ¬¶ mu: dc4d901a94 | (JJ Merelo)++ | examples/functional/monads.p6

[15:59] <Geth> ¬¶ mu: Arregla los tests

[15:59] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/dc4d901a94

[16:05] *** molaf left
[16:05] *** jeromelanteri left
[16:07] *** clarkema joined
[16:20] <Juerd> ugexe: Built-in is slower than the weird sub? Whoa.

[16:23] *** stux|RC-only joined
[16:27] *** vrurg left
[16:29] *** |oLa| joined
[16:34] *** ctilmes_ joined
[16:36] *** ChoHag left
[16:38] *** ctilmes left
[16:50] <MasterDuke> huh, just tried to --profile ugexe's most recent polyglot and the OOM killer got it

[16:50] *** ctilmes_ left
[16:50] *** ctilmes joined
[16:52] *** ChoHag joined
[16:56] <ugexe> https://github.com/ugexe/Acme--Polyglot--Levenshtein--Damerau

[16:56] <ugexe> installable / testable Perl5/6 polyglot distribution :facemelt:

[16:57] <ugexe> [zef install | cpanm] https://github.com/ugexe/Acme--Polyglot--Levenshtein--Damerau.git

[16:58] <ugexe> the secret export sauce is string interpolation

[16:58] <ugexe> "{gist(&GLOBAL::Acme::Polyglot::Levenshtein::Damerau::dld = &dld)}";

[16:58] *** pmurias joined
[16:59] <timotimo> that's certainly impressive

[16:59] <AlexDaniel> weekly: https://colabti.org/irclogger/irclogger_log/perl6?date=2019-04-06#l473

[16:59] <notable6> AlexDaniel, Noted!

[16:59] <guifa> Wow

[17:12] <ugexe> couldnt find a nice way to do `"0" and plan(5) or plan(tests => 5);` as single plan ala `plan("0" and ...)`

[17:13] <MasterDuke> heh, finally got a profile by reducing the number of iterations in the benchmark to 20. this is the number of interpreted frames: -0.14% (-25,746)

[17:15] <MasterDuke> huh. reify-until-lazy at SETTING::List:99 had 113k entries, and 112k de-opt ones and 112k OSRs

[17:21] <ugexe> fwiw a more idiomatic perl6 version (use native types) runs in 4.5s instead of 12s https://github.com/ugexe/Perl6-Text--Levenshtein--Damerau/blob/master/lib/Text/Levenshtein/Damerau.pm6

[17:23] <ugexe> but is otherwise the same algorithm

[17:25] <timotimo> i can just plop that at the beginning of the benchmark to compare, yeah?

[17:26] <timotimo> oh, i see MD already put it into the profiler

[17:26] <timotimo> that's an odd result for sure

[17:28] <ugexe> no, i plopped the benchmarking loop into the module noted above and ran it via `perl6 lib/Text/Levenshtein/Damerau.pm6`

[17:28] <ugexe> it doesn't otherwise have the proper full namespace

[17:29] <ugexe> well it might work if you just plop it in there

[17:29] <ugexe> i dunno how it'll work with an existing &dld and importing another &dld

[17:30] <MasterDuke> ugexe: if you're interested in string difference algorithms, have you seen my implementation of Sift4? it runs that benchmark in ~0.3s compared to ~7s for lev-dam

[17:31] <MasterDuke> using your lev-dam from github, not the polyglot versino

[17:33] <ugexe> i think the transposition is what dominates performance (if i remember correctly from implementing the non-damerau variant). but i needed the additional accuracy of transposition scores since i was working with lots of shorter works (mostly names)

[17:35] <MasterDuke> i first came across sift4 because my usecase didn't need the exactness of lev, but did need to be faster

[17:36] <MasterDuke> sift4 obviously makes different tradeoffs

[17:40] <AlexDaniel> MasterDuke: yeah but that's using nqp ops?

[17:41] <AlexDaniel> and you have to multiply that by 13 if you can't use nqp ops, right?

[17:41] <AlexDaniel> ( https://github.com/MasterDuke17/Text-Diff-Sift4/commit/524f98cdc95c3dc0d982c0ce0782406c61e4a772 )

[17:42] <MasterDuke> would be interesting to revert that and see how much slower the original version is now

[17:44] *** andrzejku joined
[17:46] <ugexe> you could release a `nqp` module to cpan -- Not Quite Polyglot` -- to get you most of the way to a polyglot version

[17:46] *** araraloren_ left
[17:46] *** mowcat left
[17:48] <ugexe> kinda like the butterfly project in reverse

[17:53] <MasterDuke> oooo, it's only about twice as slow now. ~0.8s instead of ~0.3s

[17:55] <AlexDaniel> MasterDuke: wait what, 0.3s with nqp ops and 0.8s without?

[17:57] *** domidumont joined
[17:57] <MasterDuke> AlexDaniel: yep

[17:59] <AlexDaniel> still unacceptable but pretty cool

[17:59] *** ravenousmoose joined
[18:00] <squashable6> üçï bduggan++ wrote a comment on ‚ÄúMost wanted, 2019 edition‚Äù: https://github.com/perl6/perl6-most-wanted/issues/46#issuecomment-480524583

[18:02] <Woodi> 0.8s with start up ?

[18:03] <MasterDuke> yeah, just using `time` on the command line

[18:03] <AlexDaniel> ah‚Ä¶ well‚Ä¶

[18:03] *** vrurg joined
[18:04] <AlexDaniel> m: say (0.8 - .5) / (0.3 - .5)

[18:04] <evalable6> AlexDaniel, rakudo-moar 5e8451f79: OUTPUT: ¬´-1.5‚ê§¬ª

[18:04] <AlexDaniel> m: say (0.8 - .15) / (0.3 - .15)

[18:04] <evalable6> AlexDaniel, rakudo-moar 5e8451f79: OUTPUT: ¬´4.333333‚ê§¬ª

[18:05] *** vrurg left
[18:06] *** vrurg joined
[18:07] <MasterDuke> Deopt one requested by JIT in frame 'reify-until-lazy' (cuid '5076') (108 -> 120)     Failed to find deopt index for offset 108     Completed deopt_one in 'reify-until-lazy' (cuid '5076') with potential uninlining

[18:08] <MasterDuke> that doesn't seem to say why the deopt one was requested?

[18:10] *** zachk joined
[18:11] *** zachk left
[18:12] *** zachk joined
[18:12] *** zachk left
[18:12] *** zachk joined
[18:14] <MasterDuke> jnthn, timotimo: ^^^ ?

[18:23] <timotimo> does it ever?

[18:25] <MasterDuke> dunno. i turned on the deopt log to get that output. any way to tell why?

[18:25] <timotimo> with GDB and a bit of fiddling

[18:25] <timotimo> exposing more info about deopts is on the menu for my profiler grant. it's a bit hairy, though

[18:29] *** MidCheck left
[18:29] *** ravenousmoose left
[18:31] *** hasuwiz left
[18:31] *** amfabasti joined
[18:38] *** otulp joined
[18:39] *** andrzejku left
[18:49] *** vrurg left
[18:49] *** agentzh left
[18:49] *** domidumont left
[18:50] *** dgl joined
[18:51] *** agentzh joined
[18:51] *** agentzh left
[18:51] *** agentzh joined
[18:54] *** dgl left
[19:03] *** vrurg joined
[19:06] *** nevack left
[19:13] *** zakharyas joined
[19:15] *** Black_Ribbon joined
[19:17] *** vrurg left
[19:19] *** TreyHarris left
[19:19] *** vrurg joined
[19:21] *** vrurg left
[19:21] <Kaiepi> perl 6 needs an equivalent to n or nvm on node

[19:21] <Kaiepi> something that allows you to install multiple versions of perl 6 and switch between them whenever

[19:21] *** vrurg joined
[19:24] *** vrurg left
[19:25] <lizmat> Kaiepi: have you looked at rakudobrew?

[19:25] *** vrurg joined
[19:29] <Kaiepi> rakudobrew isn't quite what i'm looking for

[19:31] <sjn> Kaiepi: maybe p6env then? https://github.com/skaji/p6env

[19:33] *** TreyHarris joined
[19:33] <Kaiepi> that's more like it

[19:33] <Kaiepi> thanks

[19:34] <sjn> yw

[19:39] *** andrzejku joined
[19:41] *** kybr_ is now known as kybr

[19:42] *** lucasb left
[19:53] *** clarkema left
[19:58] <ugexe> hmmm, PAUSE will treat any tar.gz with a META6.json as perl 6 (even if I dont put it in the perl 6 folder) so it wont be visible on e.g. metacpan.org

[19:59] <cpan-p6> New module released to CPAN! Acme::Polyglot::Levenshtein::Damerau (0.1) by 03UGEXE

[20:00] <Geth> ¬¶ perl6-most-wanted: 32f59771c2 | (Tom Browder)++ (committed using GitHub Web editor) | most-wanted/bindings.md

[20:00] <Geth> ¬¶ perl6-most-wanted: my most desired at the momen

[20:00] <Geth> ¬¶ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/32f59771c2

[20:00] <squashable6> üçïüçïüçï  First contribution by tbrowder++! ‚ô•

[20:20] *** andrzejku left
[20:21] *** clarkema joined
[20:21] *** lichtkind joined
[20:22] <lichtkind> does someone know if alread can ==> and >>  implicitly parallel?

[20:23] <lichtkind> thanks

[20:24] <lizmat> neither one is currently

[20:29] *** kurahaupo_ joined
[20:33] *** kurahaupo left
[20:36] *** vrurg left
[20:37] *** domidumont joined
[20:37] *** domidumont left
[20:47] <lichtkind> thank you liz

[20:47] <lichtkind> lizmat++

[20:48] <lichtkind> lizmat all good at the low lands?

[20:50] *** molaf joined
[21:02] <discord6> <Bearhug> Hey everyone, just learning Perl6. I don't seem to see a difference between Z+ and <<+>> other than the hyper operator generates an Array and Z returns a Seq, is there anything else?

[21:07] <timotimo> yes, Z+ will stop at the shorter sequence when both aren't the same length

[21:07] <timotimo> whereas <<+>> will extend the shorter one by repeating it from the beginning

[21:07] <timotimo> and >>+<< will throw an exception when they aren't the same length

[21:08] <timotimo> on top of that, Z is lazy, i.e. works fine with infinite sequences, but hyper-operators are eager (in fact, hyper is past eager on the lazy-eager scale)

[21:10] <discord6> <Bearhug> I see, very similar but the differences are in the details. Thanks :)

[21:10] <timotimo> yup! :)

[21:17] <discord6> <timotimo> feel free to ask loads of questions

[21:17] *** molaf left
[21:37] *** MidCheck joined
[21:41] *** zakharyas left
[21:41] *** kent\n joined
[21:43] *** ayerhart joined
[21:47] *** vrurg joined
[21:54] *** clarkema left
[22:03] <Xliff> m: say (1, 2, 3) Z+ (2, 3, 4)

[22:03] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(3 5 7)‚ê§¬ª

[22:03] <Xliff> m: say (1, 2, 3) Z (2, 3, 4)

[22:04] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´((1 2) (2 3) (3 4))‚ê§¬ª

[22:04] <Xliff> m: say (1, 2, 3) Z- (2, 3, 4)

[22:04] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(-1 -1 -1)‚ê§¬ª

[22:04] <Xliff> m: say (1, 2, 3) Z* (2, 3, 4)

[22:04] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(2 6 12)‚ê§¬ª

[22:04] <Xliff> m: say (1, 2, 3) Z/ (2, 3, 4)

[22:04] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(0.5 0.666667 0.75)‚ê§¬ª

[22:04] <Xliff> m: say (1, 2, 3) ¬´+¬ª 2

[22:04] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(3 4 5)‚ê§¬ª

[22:09] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; @b.map(/^{ @a }/).gist.say

[22:09] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(exit code 1) No such method '!cursor_start' for invocant of type 'Str'‚ê§  in block <unit> at /tmp/XPGczLUcbs line 1‚ê§‚ê§¬ª

[22:09] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; @b.map(* ~~ /^{ @a }/).gist.say

[22:09] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(ÔΩ¢ÔΩ£ ÔΩ¢ÔΩ£ ÔΩ¢ÔΩ£)‚ê§¬ª

[22:09] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; @b.grep( /^{ @a }/ ).gist.say

[22:09] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(lions tigers bears)‚ê§¬ª

[22:09] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; @b.grep( * ~~ /^{ @a }/ ).gist.say

[22:09] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´(lions tigers bears)‚ê§¬ª

[22:10] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; say @b[1] ~~ /^ { @a }/

[22:10] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢ÔΩ£‚ê§¬ª

[22:10] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; say @b[2] ~~ /^ { @a }/

[22:10] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢ÔΩ£‚ê§¬ª

[22:10] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; say @b[2] ~~ /^ "@a"/

[22:10] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´Nil‚ê§¬ª

[22:10] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; say @b[2] ~~ /^ @a/

[22:10] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢bÔΩ£‚ê§¬ª

[22:11] <Xliff> m: my @a = <a b c>; my @b = <lions tigers bears>; say @b[1] ~~ /^ @a/

[22:11] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´Nil‚ê§¬ª

[22:11] <Xliff> m: my @a = <li be>; my @b = <lions tigers bears>; say @b[1] ~~ /^ @a/

[22:11] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´Nil‚ê§¬ª

[22:11] <Xliff> m: my @a = <li be>; my @b = <lions tigers bears>; say @b[0, 1] ~~ /^ @a/

[22:11] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢liÔΩ£‚ê§¬ª

[22:11] <Xliff> m: my @a = <li be>; my @b = <lions tigers bears>; say @b ~~ /^ @a/

[22:11] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢liÔΩ£‚ê§¬ª

[22:11] <Xliff> m: my @a = <li be>; my @b = <lions tigers bears>; say @b[2] ~~ /^ @a/

[22:11] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢beÔΩ£‚ê§¬ª

[22:11] <Xliff> Sorry for the evalable spam, but no one seems to be talking soo.....

[22:17] <Xliff> m: my @a = <li be>; my @b = <lions tigers bears>; say @b[2] ~~ s/^ (@a)/{ $0.uc }/

[22:17] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢beÔΩ£‚ê§ 0 => ÔΩ¢beÔΩ£‚ê§¬ª

[22:17] <Xliff> m: my @a = <li be>; my @b = <lions tigers bears>; say @b[2] ~~ s/^ (@a)/{ $0.uc }/; say @b[2]

[22:17] <evalable6> Xliff, rakudo-moar 728ed87b2: OUTPUT: ¬´ÔΩ¢beÔΩ£‚ê§ 0 => ÔΩ¢beÔΩ£‚ê§BEars‚ê§¬ª

[22:35] *** nekomune left
[22:36] *** nekomune joined
[22:39] *** hamhu3 joined
[22:39] <Geth> ¬¶ docker: jstuder-gh++ created pull request #24: Update Rakudo Star version to 2019.03

[22:39] <Geth> ¬¶ docker: review: https://github.com/perl6/docker/pull/24

[22:41] *** nekomune left
[22:41] *** nekomune joined
[22:43] *** sena_kun left
[22:52] <AlexDaniel> Xliff: just fyi, perlbot can answer private messages

[22:52] <AlexDaniel> r: say 42

[22:52] <perlbot> AlexDaniel: 42‚ê§

[22:53] *** cpan-p6 left
[22:54] *** nekomune left
[22:54] *** nekomune joined
[22:54] *** cpan-p6 joined
[22:54] *** cpan-p6 left
[22:54] *** cpan-p6 joined
[23:02] *** rindolf left
[23:03] *** patrickb left
[23:03] *** quester joined
[23:04] *** Sgeo__ joined
[23:06] <Xliff> AlexDaniel: OK.¬†I tried evalable, but he was too shy.

[23:06] *** TreyHarris left
[23:06] *** Xliff left
[23:07] *** Sgeo_ left
[23:20] *** quester left
[23:20] *** quester joined
[23:24] *** vike left
[23:26] *** vike joined
[23:27] *** pmurias left
[23:34] *** AlexDani` joined
[23:35] *** AlexDaniel left
[23:37] *** quester left
[23:38] *** quester joined
[23:39] *** AlexDani` left
[23:41] *** quester left
[23:41] *** quester joined
[23:46] *** quester left
[23:46] *** MidCheck left
[23:47] *** quester joined
[23:54] *** kurahaupo_ left
[23:54] *** kurahaupo joined
