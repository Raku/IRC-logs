[00:04] *** netrino_ joined
[00:18] *** aborazmeh left
[00:32] *** cpup joined
[00:33] *** aborazmeh joined
[00:33] *** aborazmeh left
[00:33] *** aborazmeh joined
[00:38] *** netrino_ left
[00:43] *** netrino_ joined
[00:49] *** espadrine_ left
[01:10] *** sena_kun left
[01:16] *** netrino_ left
[01:22] *** netrino_ joined
[01:23] *** adu joined
[01:34] *** cpan-p6 left
[01:35] *** cpan-p6 joined
[01:35] *** cpan-p6 left
[01:35] *** cpan-p6 joined
[01:36] *** Cabanossi left
[01:37] <Xliff> m: my $a = 'z'; my $content = 'abcdzf'; say $content ~~ / { $a }/

[01:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢｣␤»

[01:37] <Xliff> m: my $a = 'z'; my $content = 'abcdzf'; say $content ~~ / $a /

[01:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢z｣␤»

[01:37] <Xliff> m: my $a = 'z'; my $content = 'abcdzf'; say $content ~~ /{ $a }/

[01:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢｣␤»

[01:38] <Xliff> m: my %a<data> = 'z'; my $content = 'abcdzf'; say $content ~~ /{ $a }/

[01:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Shaped variable declarations not yet implemented. Sorry.␤at <tmp>:1␤------> 3my %a<data>7⏏5 = 'z'; my $content = 'abcdzf'; say $con␤»

[01:38] <Xliff> m: my %a; %a<data> = 'z'; my $content = 'abcdzf'; say $content ~~ /{ $a }/

[01:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared. Did you mean '%a'?␤at <tmp>:1␤------> 3$content = 'abcdzf'; say $content ~~ /{ 7⏏5$a }/␤»

[01:38] <Xliff> m: my %a; %a<data> = 'z'; my $content = 'abcdzf'; say $content ~~ / %a<data> /

[01:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤The use of hash variables in regexes is reserved␤at <tmp>:1␤------> 3content = 'abcdzf'; say $content ~~ / %a7⏏5<data> /␤Other potential difficulties:␤    Apparent subscript will be treated as regex␤    at <tmp>:1…»

[01:38] <Xliff> m: my %a; %a<data> = 'z'; my $content = 'abcdzf'; say $content ~~ / "%a<data>" /

[01:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢z｣␤»

[01:38] <Xliff> m: my %a; %a<data> = 'z'; my $content = 'abcdzf'; say $content ~~ / %a<data> /

[01:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤The use of hash variables in regexes is reserved␤at <tmp>:1␤------> 3content = 'abcdzf'; say $content ~~ / %a7⏏5<data> /␤Other potential difficulties:␤    Apparent subscript will be treated as regex␤    at <tmp>:1…»

[01:38] <Xliff> m: my %a; %a<data> = 'z'; my $content = 'abcdzf'; say $content ~~ / {%a<data>} /

[01:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢｣␤»

[01:39] *** molaf left
[01:45] *** Cabanossi joined
[01:47] *** noisegul joined
[01:48] *** qiqi joined
[01:50] *** noisegul_ left
[01:51] *** molaf joined
[01:55] *** netrino_ left
[01:55] <Xliff> my %p = ( actions => :shade, :hmax ); %p.gist.say

[01:55] <evalable6> Xliff, rakudo-moar c4fdb6423: OUTPUT: «{actions => shade => True, hmax => True}␤»

[02:01] *** Manifest0 left
[02:01] *** netrino_ joined
[02:03] *** Manifest0 joined
[02:05] <MasterDuke> m: my $a = 'z'; my $content = 'abcdzf'; say $content ~~ /<{ $a }>/

[02:05] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢z｣␤»

[02:14] <Xliff> MasterDuke: OH! I forgot to add the angle-brackets?

[02:15] <Xliff> m: my %a; %a<data> = 'z'; my $content = 'abcdzf'; say $content ~~ / <{%a<data>}> /

[02:15] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢z｣␤»

[02:21] <MasterDuke> m: my $a = 'z'; my $content = 'abcdzf'; say $content ~~ /{ say "hi"; $a >/

[02:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3dzf'; say $content ~~ /{ say "hi"; $a >/7⏏5<EOL>␤Regex not terminated.␤at <tmp>:1␤------> 3dzf'; say $content ~~ /{ say "hi"; $a >/7⏏5<EOL>␤Unable to parse regex; c…»

[02:21] <MasterDuke> m: my $a = 'z'; my $content = 'abcdzf'; say $content ~~ /{ say "hi"; $a }/

[02:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «hi␤｢｣␤»

[02:22] <MasterDuke> Xliff: yeah, bare {} executes code, but doesn't interpolate it into the regex

[02:29] *** Sgeo__ left
[02:31] *** Sgeo joined
[02:35] *** moony left
[02:35] *** netrino_ left
[02:36] <Xliff> m: my token dim { <[\+\-]>\d+ }; "300,-420 400x+30" ~~ / $<x=dim>,$<y=dim> \s* $<w=dim>'x'$<h=dim> /;

[02:36] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter , (must be quoted to match literally)␤at <tmp>:1␤------> 3>\d+ }; "300,-420 400x+30" ~~ / $<x=dim>7⏏5,$<y=dim> \s* $<w=dim>'x'$<h=dim> /;␤Unable to parse regex; couldn't find final '/'…»

[02:36] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,-420 400x+30" ~~ / $<x=dim>,$<y=dim> \s* $<w=dim>'x'$<h=dim> /;

[02:36] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter , (must be quoted to match literally)␤at <tmp>:1␤------> 3 }; say "300,-420 400x+30" ~~ / $<x=dim>7⏏5,$<y=dim> \s* $<w=dim>'x'$<h=dim> /;␤Unable to parse regex; couldn't find final '/'…»

[02:37] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,-420 400x+30" ~~ / $<x=dim>','$<y=dim> \s* $<w=dim>'x'$<h=dim> /;

[02:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:37] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,-420 ~~ / $<x=dim>','$<y=dim>/;

[02:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3say "300,-420 ~~ / $<x=dim>','$<y=dim>/;7⏏5<EOL>␤    expecting …»

[02:37] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,-420" ~~ / $<x=dim>','$<y=dim>/;

[02:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:37] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,-420" ~~ / <x=dim>','<y=dim>/;

[02:37] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:38] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,-420" ~~ / <dim>','<dim>/;

[02:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:38] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,420" ~~ / <dim>','<dim>/;

[02:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:38] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,420" ~~ /\d+/;

[02:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢300｣␤»

[02:38] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,420" ~~ /<dim>\/;

[02:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at <tmp>:1␤------> 3<[\+\-]>\d+ }; say "300,420" ~~ /<dim>\/7⏏5;␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3[\+\-]>\d+…»

[02:38] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,420" ~~ /<dim>\/;

[02:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at <tmp>:1␤------> 3<[\+\-]>\d+ }; say "300,420" ~~ /<dim>\/7⏏5;␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3[\+\-]>\d+…»

[02:38] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,420" ~~ /<dim>/;

[02:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:38] <Xliff> m: my token dim { <[+-]>\d+ }; say "300,420" ~~ /<dim>\/;

[02:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at <tmp>:1␤------> 3{ <[+-]>\d+ }; say "300,420" ~~ /<dim>\/7⏏5;␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3 <[+-]>\d+…»

[02:39] <Xliff> m: my token dim { <[+-]>\d+ }; say "300,420" ~~ /<dim>/;

[02:39] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:39] <Xliff> m: my token dim { \d+ }; say "300,420" ~~ /<dim>/;

[02:39] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢300｣␤ dim => ｢300｣␤»

[02:39] <Xliff> m: my token dim { <[+-]>\d+ }; say "300,420" ~~ /<dim>/;

[02:39] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:39] <Xliff> m: my token dim { <[\+\-]>\d+ }; say "300,420" ~~ /<dim>/;

[02:39] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:39] <Xliff> m: my token dim { <[\+\-]> \d+ }; say "300,420" ~~ /<dim>/;

[02:39] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:39] <Xliff> m: my token dim { <[\+\-]> \d+ }; say "+300,420" ~~ /<dim>/;

[02:39] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢+300｣␤ dim => ｢+300｣␤»

[02:40] <Xliff> m: my token dim { <[\+\-]>?\d+ }; say "300,-420 400x+30" ~~ / $<x=dim>','$<y=dim> \s* $<w=dim>'x'$<h=dim> /;

[02:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[02:40] <Xliff> m: my token dim { <[\+\-]>?\d+ }; say "300,-420 400x+30" ~~ / <x=dim>','<y=dim> \s* <w=dim>'x'\<h=dim> /;

[02:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter = (must be quoted to match literally)␤at <tmp>:1␤------> 3~~ / <x=dim>','<y=dim> \s* <w=dim>'x'\<h7⏏5=dim> /;␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3~ /…»

[02:40] <Xliff> m: my token dim { <[\+\-]>?\d+ }; say "300,-420 400x+30" ~~ / <x=dim>','<y=dim> \s* <w=dim>'x'<h=dim> /;

[02:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢300,-420 400x+30｣␤ dim => ｢300｣␤ x => ｢300｣␤ dim => ｢-420｣␤ y => ｢-420｣␤ w => ｢400｣␤ dim => ｢400｣␤ h => ｢+30｣␤ dim => ｢+30｣␤»

[02:40] *** netrino_ joined
[02:40] <Xliff> m: my token dim { <[\+\-]>?\d+ }; say "300,-420 400x+30" ~~ / <x=.dim>','<y=.dim> \s* <w=.dim>'x'<h=.dim> /;

[02:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'dim' for invocant of type 'Match'␤  in block <unit> at <tmp> line 1␤␤»

[02:41] <Xliff> m: my token dim { <[\+\-]>?\d+ }; say "300,-420 400x+30" ~~ / <x=dim>','<y=dim> \s* <w=dim>'x'<h=dim> /;

[02:41] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢300,-420 400x+30｣␤ x => ｢300｣␤ dim => ｢300｣␤ y => ｢-420｣␤ dim => ｢-420｣␤ w => ｢400｣␤ dim => ｢400｣␤ h => ｢+30｣␤ dim => ｢+30｣␤»

[02:48] <Xliff> m: $a = 'adlkjhee'; say $a.ends-with(/ee/)

[02:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$a = 'adlkjhee'; say $a.ends-with(/ee/)␤»

[02:48] <Xliff> m: my $a = 'adlkjhee'; say $a.ends-with(/ee/)

[02:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot resolve caller ends-with(Str:D: Regex:D); none of these signatures match:␤    (Str:D: Cool:D $suffix, *%_ --> Bool)␤    (Str:D: Str:D $suffix, *%_ --> Bool)␤  in block <unit> at <tmp> line 1␤␤»

[02:50] *** moony joined
[03:04] *** kurahaupo_ joined
[03:06] *** kurahaupo left
[03:07] <AndroidKitKat> Is the best way to iterate though a string using substrs?

[03:07] <AndroidKitKat> like m: say substr("Long string", 1..1)

[03:08] <AndroidKitKat> err

[03:08] <AndroidKitKat> m: say substr("Long string", 1..1)

[03:08] <camelia> rakudo-moar a643b8be1: OUTPUT: «o␤»

[03:12] *** kurahaupo_ left
[03:13] *** kurahaupo joined
[03:13] *** netrino_ left
[03:20] *** kurahaupo left
[03:23] *** Cabanossi left
[03:27] *** Xliff left
[03:27] *** netrino_ joined
[03:31] *** kurahaupo joined
[03:32] *** kurahaupo left
[03:34] *** Cabanossi joined
[03:39] *** aborazmeh left
[03:52] *** kurahaupo joined
[03:57] *** kurahaupo left
[03:57] *** MidCHeck joined
[03:58] *** MidCHeck left
[03:59] *** kurahaupo joined
[03:59] *** netrino_ left
[04:03] *** kurahaupo left
[04:06] *** netrino_ joined
[04:09] *** qiqi left
[04:14] *** kurahaupo joined
[04:18] *** kurahaupo left
[04:39] *** netrino_ left
[04:40] *** qiqi joined
[04:45] *** netrino_ joined
[04:53] *** quester joined
[04:57] *** curan joined
[05:04] *** kjk left
[05:08] *** vrurg left
[05:14] *** qiqi left
[05:21] *** sauvin joined
[05:28] *** feldspath left
[05:33] *** nadim_ left
[05:35] *** rindolf joined
[05:41] *** qiqi joined
[05:50] *** nadim_ joined
[05:58] *** ufobat joined
[05:59] *** domidumont joined
[06:03] *** vrurg joined
[06:08] *** vrurg left
[06:08] *** jmerelo joined
[06:18] *** netrino_ left
[06:19] *** netrino_ joined
[06:22] *** Sgeo_ joined
[06:22] *** Sgeo_ left
[06:23] *** tholyghos joined
[06:23] *** vrurg joined
[06:23] *** tholyghos is now known as holyghost

[06:26] *** Sgeo left
[06:27] *** netrino__ joined
[06:29] *** netrino_ left
[06:29] <Geth> ¦ doc: f328984196 | (JJ Merelo)++ | doc/Type/independent-routines.pod6

[06:29] <Geth> ¦ doc: Moves flat to the page of independent routines

[06:29] <Geth> ¦ doc: 

[06:29] <Geth> ¦ doc: Adds another definition, and also eliminates implementation

[06:29] <Geth> ¦ doc: details. Refs #2823, #1518

[06:29] <synopsebot> Link: https://doc.perl6.org/type/independent-routines

[06:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f328984196

[06:30] *** nadim_ left
[06:31] *** nadim_ joined
[06:34] *** vrurg left
[06:55] *** molaf left
[06:56] *** Sgeo joined
[07:00] *** Sgeo_ joined
[07:04] *** Sgeo left
[07:08] *** robertle joined
[07:09] *** vrurg joined
[07:15] <SyrupThinker> m: 

[07:16] <SyrupThinker> m: .say for "A long string".comb

[07:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «A␤ ␤l␤o␤n␤g␤ ␤s␤t␤r␤i␤n␤g␤»

[07:16] <SyrupThinker> AndroidKitKat: Like this^ ?

[07:18] *** zakharyas joined
[07:22] *** vrurg left
[07:22] *** quester left
[07:25] *** nebuchad` joined
[07:26] *** a3r0 left
[07:26] *** a3r0 joined
[07:27] *** sftp_ joined
[07:28] *** nebuchadnezzar left
[07:28] *** sftp left
[07:28] *** sftp_ is now known as sftp

[07:33] *** nebuchad` is now known as nebuchadnezzar

[07:34] <holyghost> I've put docs in Game::AI::Messaging

[07:35] <holyghost> release 0.1.9

[07:35] <cpan-p6> New module released to CPAN! Game::AI::Messaging (0.1.9) by 03HOLYGHOST

[07:36] *** dakkar joined
[07:39] <holyghost> I'm out for a coffee

[07:40] *** Sgeo__ joined
[07:44] *** Sgeo_ left
[07:47] *** discord6 left
[07:52] *** vrurg joined
[07:57] *** netrino__ left
[08:02] *** ravenousmoose left
[08:02] *** ravenousmoose joined
[08:04] *** nadim_ left
[08:11] *** ravenousmoose left
[08:11] *** Manifest0 left
[08:13] *** vrurg left
[08:16] <jmerelo> holyghost: the tests do not do anything. The actual use is commented out. I don't really think you should keep doing this.

[08:17] <jmerelo> holyghost: commenting is not documenting. Some methods are simply empty. I don't really think this is ready to be published, yet this seems to be version whatever number.

[08:18] <jmerelo> holyghost: uploading incorrect modules to Perl6 does not benefit anyone. It does not benefit the community, it does not benefit whoever finds it, even more so when you don't even have a repo for reporting issues.

[08:18] *** Manifest0 joined
[08:19] *** feldspath joined
[08:19] <jmerelo> holyghost: so I would please ask you to stop doing that. If you want us to review your code or help you with that, upload them to a public repo and request reviews or comments.

[08:20] <jmerelo> holyghost: so until a person or persons say they are ready for publication in CPAN or anywhere else, I would kindly ask you to retire your modules from the ecosystem and refrain from uploading them again.

[08:22] <jmerelo> holyghost: you're very welcome to upload your code to a GitHub repo and learn #perl6 while doing so, and you're very welcome to request comments from us and we'll be happy to provide it

[08:22] <jmerelo> holyghost: unfortunately, CPAN is not your private repo and uploading it there has consequences, like these modules showing up in searches, and people actually downloading them and trying to do something. 

[08:24] <jmerelo> holyghost: I'm sorry to be so harsh, but we have told you this several times already yet you keep doing the same. So again I would kindly ask you to not do it any more.

[08:31] *** netrino__ joined
[08:35] <masak> jmerelo: how come when I search for Game::AI::Messaging on metacpan, I get an empty search result?

[08:37] *** Manifest0 left
[08:42] *** Manifest0 joined
[08:46] *** vrurg joined
[08:55] <timotimo> masak: metacpan doesn't show any perl6 i think

[09:01] *** netrino joined
[09:04] *** netrino__ left
[09:10] *** ravenousmoose joined
[09:10] *** vrurg left
[09:12] <lizmat> masak: modules.perl6.org

[09:13] <lizmat> masak: also https://github.com/perl6/problem-solving/issues/26

[09:13] <lizmat> fwiw, I agree with jmerelo 

[09:26] *** Woodi_ left
[09:27] *** Woodi joined
[09:28] *** sena_kun joined
[09:28] <jmerelo> thanks, lizmat 

[09:32] *** Manifest0 left
[09:38] *** Manifest0 joined
[09:38] *** domidumont left
[09:41] *** vrurg joined
[09:42] *** nadim_ joined
[09:45] *** antoniogamiz joined
[09:51] *** nadim_ left
[09:51] <jmerelo> I thought that roles in the way we use them, by mixing them in runtime, was more common. I don't think they are. Any idea if there's any other language that supports this?

[09:51] <jmerelo> m: my $foo = 3 but set(3,4); say $foo.Set

[09:51] <camelia> rakudo-moar a643b8be1: OUTPUT: «Unexpected named argument 'value' passed␤  in block <unit> at <tmp> line 1␤␤»

[09:52] <jmerelo> m: my $foo = 3 but 3.0; say $foo.Num

[09:52] <camelia> rakudo-moar a643b8be1: OUTPUT: «3␤»

[09:52] <masak> fwiw, I agree with jmerelo too.

[09:52] <jmerelo> masak: thanks.

[09:52] <jmerelo> m: my $foo = 3 but "bar"; say $foo.Str

[09:52] <camelia> rakudo-moar a643b8be1: OUTPUT: «bar␤»

[09:53] <jmerelo> masak: you're the language expert here. One of them, anyway. Any idea if there's any language that does that thing above like Perl6

[09:53] <masak> the README of Game::AI::Messaging tells me nothing. there's _one_ test file, and it has zero tests. I don't see why this module should be published at all. it's ridiculous that it has v0.1.8

[09:53] *** molaf joined
[09:54] <masak> jmerelo: depends what you mean by "that thing". I know of no other language with the `but` operator. but Python, for example, allows you to shove a method into an object.

[09:54] <jnthn> jmerelo: https://en.wikipedia.org/wiki/Mixin#Examples

[09:54] <jmerelo> jnthn: yep, I'm seeing that, but most of them only allow mixing at compile time, not mixing into containers.

[09:54] <masak> I think the Smalltalk languages allows you to change the type of an object at runtime. there's also an operator for _swapping_ two objects in memory at runtime.

[09:55] <masak> I forget its name

[09:55] <jmerelo> jnthn: my actual question is anything like "but" in other languages? Or is that (also) unique?

[09:56] <jnthn> masak: become, maybe?

[09:56] <masak> yeah, something of that ilk

[09:56] <masak> holyghost: seconding jmerelo's plea -- please don't pollute module-space with untested, undocumented code that only you can use

[09:57] <jnthn> jmerelo: The JavaScript one kinda is, though it's prototype OO so maybe not direclty comparable

[09:58] <jmerelo> jnthn: you add it to all instances of that class, right?

[09:58] <jnthn> There are no classes in JavaScript

[09:59] <jnthn> Object.assign(...) is adding to a particular object for sure

[09:59] <jmerelo> jnthn: right. Whatever looks like a class in JS. Functions with self. Whatever.

[10:00] <jnthn> I'm not aware of any other language that's exposed this kind of functionality as infix operators does/but, at least. :)

[10:00] <jnthn> So probably Perl 6 is interesting in how comparatively easy it makes this

[10:00] <jmerelo> jnthn: hum. 

[10:01] <jnthn> Unfortunately, it's an implementation/performance nightmare :)

[10:01] <jmerelo> jnthn: point is. I'm giving a talk about perl6 next Saturday. I've made a list of 10 cool features of modern programming languages, all of which are in Perl6

[10:01] <jmerelo> jnthn: and that's the last one...

[10:02] <jmerelo> jnthn: adding a trait with but allows us to do "type tunnelling". We have a function that returns A, we can make it return A but B. We can check for B on reception. That's kinda cool, and also typesafe

[10:03] <jnthn> *nod*

[10:03] <jnthn> Yeah, it's a nice way to sneak in extra "ad-hoc" data/functionality to an object

[10:03] <jnthn> Though of course comes with risks if over-done :)

[10:04] *** vrurg left
[10:04] <jmerelo> jnthn: with great power comes great responsability

[10:05] <timotimo> great power, great composability

[10:06] <jmerelo> timotimo: lol

[10:06] <masak> I might be an outlier, but I can't recall using the `but` and `does` operators at all in production code...

[10:08] <jnthn> I use them relatively occasionally

[10:08] <jmerelo> masak: from time to time. We still have to produce programming patterns for most features in perl6

[10:09] *** nadim_ joined
[10:11] <jnthn> Just don't put it in any hot-path code :)

[10:17] *** Manifest0 left
[10:22] *** Manifest0 joined
[10:24] <sena_kun> speaking of `but`, I am still in awe of https://github.com/Altai-man/cro-ldap/blob/master/lib/Cro/LDAP/Client.pm6#L74 which is just _so_ elegantly fits there.

[10:24] <jnthn> :D

[10:24] <jnthn> That's cute

[10:24] <sena_kun> s/which is/which/

[10:33] *** Manifest0 left
[10:38] <antoniogamiz> |%_ is the same as %_.list ?

[10:40] *** nadim_ left
[10:40] *** vrurg joined
[10:40] *** Manifest0 joined
[10:40] *** mniip left
[10:40] *** mniip joined
[10:50] <timotimo> antoniogamiz: | corresponds to .Slip

[10:51] <jmerelo> sena_kun: absolutely.

[10:53] *** nadim_ joined
[11:10] *** Manifest0 left
[11:11] *** vrurg left
[11:12] *** kensanata joined
[11:13] <jmerelo> Anyone has tried to apply for GitHub sponsors? https://help.github.com/en/articles/about-github-sponsors

[11:13] <jmerelo> It might be a good idea to get some of us supported by anonymous donor + matching donation by GitHub

[11:15] *** Manifest0 joined
[11:21] *** qiqi left
[11:22] *** Manifest0 left
[11:27] *** Manifest0 joined
[11:29] *** jmerelo left
[11:35] *** Manifest0 left
[11:41] *** Manifest0 joined
[11:44] *** vrurg joined
[11:45] *** domidumont joined
[11:53] *** Manifest0 left
[11:56] *** netrino left
[11:57] *** netrino_ joined
[11:58] *** Manifest0 joined
[12:05] *** Manifest0 left
[12:09] <masak> sena_kun: nice usage!

[12:10] <masak> unfortunately, me saying "I never use that feature" keeps bringing up nice/cool usages of a feature, so it's not really encouraging me to stop doing that, is it? :P

[12:10] *** netrino__ joined
[12:11] *** Manifest0 joined
[12:11] *** netrino_ left
[12:12] <timotimo> haha

[12:13] <sena_kun> well, to be honest, when I firstly saw people doing stuff like `1 but Bool`, I was suprised to "Who on Earth would do that?" extent, but once I thought of "Oh, so you can mix in some roles into the type" it turned out to be pretty nice. I mean, you can always write a wrapper, and it is not a daily feature, but still can be useful.

[12:14] *** vrurg left
[12:15] <masak> aye

[12:15] <masak> I'm curious how it would mix/blend with static typing

[12:16] *** netrino__ left
[12:16] *** netrino joined
[12:21] <Geth> ¦ ecosystem: allsopp++ created pull request #455: Add Operator::dB

[12:21] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/455

[12:21] *** molaf left
[12:24] *** allsopp joined
[12:30] *** Manifest0 left
[12:37] <Geth> ¦ ecosystem: 725313b14c | (Owen Allsopp)++ | META.list

[12:37] <Geth> ¦ ecosystem: Add Operator::dB

[12:37] <Geth> ¦ ecosystem: 

[12:37] <Geth> ¦ ecosystem: https://github.com/allsopp/p6-Operator-dB

[12:37] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/725313b14c

[12:37] <Geth> ¦ ecosystem: c1f08fb9fe | Altai-man++ (committed using GitHub Web editor) | META.list

[12:37] <Geth> ¦ ecosystem: Merge pull request #455 from allsopp/master

[12:37] <Geth> ¦ ecosystem: 

[12:37] <Geth> ¦ ecosystem: Add Operator::dB

[12:38] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/c1f08fb9fe

[12:38] *** Manifest0 joined
[12:38] *** antoniogamiz left
[12:49] *** vrurg joined
[12:53] *** Manifest0 left
[12:56] *** feldspath left
[12:56] *** feldspath joined
[12:58] *** Manifest0 joined
[13:02] *** aborazmeh joined
[13:02] *** aborazmeh left
[13:02] *** aborazmeh joined
[13:03] *** Sgeo_ joined
[13:04] <kawaii> I'm probably being a bit ambitious in this next project but are there any good guides for using NativeCall? I'd like to create a Perl 6 port of Crypt::Argon2 using the C lib (https://github.com/P-H-C/phc-winner-argon2)

[13:04] *** molaf joined
[13:05] <sena_kun> kawaii, have you seen https://github.com/skinkade/p6-crypt-argon2 ?

[13:06] <kawaii> problem solved - thanks sena_kun!

[13:06] <sena_kun> : )

[13:07] *** Sgeo__ left
[13:09] *** zakharyas left
[13:10] <holyghost> vrurg : I might test out openbsd stuff for you, next week preferably, I saw you mention it in a post here

[13:10] <holyghost> just .tell me stuff if I don;t answer

[13:12] <holyghost> I'm on a amd64 openbsd

[13:19] *** vrurg left
[13:23] <holyghost> It's a macbook running 5.7 FWIW

[13:25] *** feldspath left
[13:29] *** robertle left
[13:30] *** vrurg joined
[13:31] *** Manifest0 left
[13:31] *** curan left
[13:32] *** robertle joined
[13:35] *** ChoHag left
[13:35] *** Even9 joined
[13:36] *** Even9 left
[13:36] *** Manifest0 joined
[13:50] <vrurg> .tell holyghost Thanks! Any help with any platform is welcome for sure. I would most likely close the existing openbsd ticket. So, feel free to open a new one.

[13:50] <yoleaux> vrurg: I'll pass your message to holyghost.

[13:55] *** skids joined
[14:05] *** zakharyas joined
[14:07] *** ChoHag joined
[14:07] *** domidumont left
[14:20] *** feldspath joined
[14:22] *** robertle left
[14:25] *** robertle joined
[14:29] *** allsopp left
[14:38] *** ChoHag left
[14:42] *** jmerelo joined
[14:43] *** feldspath left
[14:44] *** feldspath joined
[14:45] *** A_ joined
[14:45] *** robertle left
[14:48] *** MasterDuke left
[14:51] *** feldspath left
[14:51] *** A_ left
[14:52] *** aborazmeh left
[14:58] *** Manifest0 left
[14:58] *** feldspath joined
[15:04] *** Manifest0 joined
[15:10] *** molaf left
[15:28] *** feldspath left
[15:31] *** zakharyas left
[15:31] <jmerelo> squashable6: status

[15:31] <squashable6> jmerelo, Next SQUASHathon in 7 days and ≈12 hours (2019-06-01 UTC-14⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:33] *** nadim_ left
[15:33] *** kurahaupo joined
[15:39] *** angelds joined
[15:45] *** ChoHag joined
[15:53] <jmerelo> Next question in StackOverflow will be the 1100 https://stackoverflow.com/questions/tagged/perl6

[15:53] <jmerelo> Not a incredibly beautiful number, but still.

[15:57] *** abraxxa left
[15:59] *** robertle joined
[16:02] *** cpup left
[16:06] <timotimo> squashathon will be right during gpn hmm

[16:06] <jmerelo> gpn?

[16:07] <timotimo> gulaschprogrammiernacht

[16:07] <moritz> Gulashprogrammiernacht

[16:07] <moritz> a hacking event in Germany

[16:07] <jmerelo> that sounds... German

[16:07] <timotimo> it's a very cozy event

[16:07] *** lukasv joined
[16:08] <lukasv> weekly: http://blogs.perl.org/users/damian_conway/2019/05/why-i-love-perl-6.html

[16:08] <notable6> lukasv, Noted!

[16:09] *** lukasv left
[16:17] *** Manifest0 left
[16:22] *** Manifest0 joined
[16:28] *** nadim_ joined
[16:37] *** dakkar left
[16:37] *** angelds left
[16:38] *** pecastro joined
[16:45] *** cpan-p6 left
[16:45] *** cpan-p6 joined
[16:45] *** cpan-p6 left
[16:45] *** cpan-p6 joined
[16:50] *** cpup joined
[16:52] *** Manifest0 left
[16:57] *** Manifest0 joined
[16:58] <ugexe> how does one use race with functional map?

[16:58] <ugexe> it isn't `ace map { sleep 0.5; print $_ }, 1..10;`

[16:59] <ugexe> no matter where i put the `race` it seems to run sequentially 

[17:06] <jnthn> m: race map { say $*THREAD.id }, 1..100

[17:06] <camelia> rakudo-moar a643b8be1: OUTPUT: «4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4…»

[17:07] <jnthn> m: race map { sleep rand; say $*THREAD.id }, 1..100

[17:07] <jnthn> ugexe: I think it is, just the default minimum batch size is too large for it to be visible there

[17:07] <jnthn> (And the only way to set that is with the method)

[17:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «(timeout)4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4␤4…»

[17:07] *** Manifest0 left
[17:08] <tadzik> curious that it takes so much more than 1 second for it to run thouhg

[17:09] <jnthn> oh, hang on...I'm not sure that's going to work out at all, since you need to be in race mode before starting

[17:09] <jnthn> Hmm

[17:12] *** kensanata left
[17:13] *** Manifest0 joined
[17:14] *** adu left
[17:15] <lizmat> weekly: http://blogs.perl.org/users/damian_conway/2019/05/why-i-love-perl-6.html

[17:15] <notable6> lizmat, Noted!

[17:15] <tadzik> m: say Date.today.truncated-to('day')

[17:15] <camelia> rakudo-moar a643b8be1: OUTPUT: «2019-05-01␤»

[17:16] <tadzik> ^ LTA?

[17:16] <lizmat> that feels wrong ?

[17:16] <tadzik> very much so :)

[17:16] <lizmat> could you make an issue  ?

[17:16] <tadzik> should be a no-op imho

[17:16] <tadzik> sure

[17:16] <tadzik> do we still use [email@hidden.address]
[17:17] * tadzik is out of the loop

[17:17] <lizmat> nope, that's dead

[17:17] <tadzik> [`] Github then, I assume?

[17:17] <lizmat> indeed

[17:17] *** zacts joined
[17:17] <tadzik> alrighty, will do :)

[17:17] <tadzik> actually, I could probably just fix it myself...

[17:18] <lizmat> yeah, only needs an elsif, by the looks of it

[17:18] <lizmat> in Dateish

[17:18] <lizmat> in !truncate-ymd

[17:18] <nadim_> m: dd [1..2] ;

[17:18] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array element = [1, 2]␤»

[17:19] <tadzik> while filing the report I noticed that I'm on rakudo 2017.10. Wow

[17:19] <lizmat> yes, looks like you're missing out on a lot of goodies / performance

[17:20] <nadim_> hi all, why is 'element' returned by .VAR.?name when there's no variable?

[17:20] <tadzik> just on my desktop though, interestingly

[17:21] <nadim_> m: dd [1..2] ;

[17:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array element = [1, 2]␤»

[17:21] <nadim_> like in this example

[17:22] <lizmat> nadim_: actually am not sure why that is

[17:23] <nadim_> I don't think it used to do that before, before like the last time I paid attention 

[17:28] *** Manifest0 left
[17:28] *** zacts left
[17:32] <ugexe> I thought `map { sleep rand; print $*THREAD.id }, race 1..100;` might work since it creates a RaceSeq for 1..100, but its sequential too

[17:34] *** Manifest0 joined
[17:38] <nadim_> m: [1, 2, 3].VAR.^name.say

[17:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array␤»

[17:38] <nadim_> m: [1, 2, 3].VAR.?name.say

[17:38] <camelia> rakudo-moar a643b8be1: OUTPUT: «element␤»

[17:38] <nadim_> lizmat: does the above seem logical to you?

[17:38] *** epony left
[17:40] <nadim_> m: [1, 2, 3][0].VAR.^name.say

[17:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «Scalar␤»

[17:40] <nadim_> m: [1, 2, 3][0].VAR.?name.say

[17:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «Nil␤»

[17:40] <lizmat> yes, because .?name and .^name are two different things

[17:40] <timotimo> m: [1, 2, 3].name.say

[17:40] <camelia> rakudo-moar a643b8be1: OUTPUT: «element␤»

[17:40] <timotimo> .VAR on this just gives the same thing as without VAR

[17:41] <nadim_> I though ?methos was like cam().method

[17:41] <nadim_> can

[17:41] <timotimo> yeah, if the method exists it's called, otherwise Nil is returned

[17:43] <nadim_> ? calls the method on the object and ^ on the class, right?

[17:43] <timotimo> no, ^ calls on the metaobject

[17:43] <timotimo> which is often an instance of ClassHOW

[17:43] <nadim_> that's what I meant

[17:44] <timotimo> OK. it's a big difference, at least in how i understand what calling a method "on the class" means

[17:44] <nadim_> I agree, bad vocabulary frommy part

[17:44] <timotimo> OK, that's cleared up, then :)

[17:44] <nadim_> that yes but the "element" not yet

[17:45] <nadim_> m: dd [1..2] ;

[17:45] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array element = [1, 2]␤»

[17:48] <nadim_> it's even "element =" !

[17:49] *** ravenous_ joined
[17:50] <timotimo> method name() { nqp::isnull($!descriptor) ?? Nil !! $!descriptor.name }

[17:50] <timotimo> https://github.com/rakudo/rakudo/blob/master/src/core/Array.pm6#L1352

[17:51] <nadim_> https://nopaste.linux-dev.org/?1203161

[17:53] <timotimo> m: say $_ === $_.VAR given [1, 2, 3]

[17:53] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[17:53] <timotimo> .VAR is a no-op on the arra

[17:54] <timotimo> so comparing it to how the scalar behaves is, IMO, wrong

[17:54] <timotimo> m: say Array[int8].new(1, 2, 3).name

[17:54] <camelia> rakudo-moar a643b8be1: OUTPUT: «Type check failed in assignment to ; expected int8 but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[17:54] <nadim_> more than a comparison it was meant to show the different results, and it's a bit unexpected

[17:54] <timotimo> m: say Array[int8].new().name

[17:54] <camelia> rakudo-moar a643b8be1: OUTPUT: «␤»

[17:55] <timotimo> m: say Array[Routine].new().name

[17:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «␤»

[17:59] *** Manifest0 left
[18:04] *** Manifest0 joined
[18:04] *** kurahaupo left
[18:05] *** kurahaupo joined
[18:14] *** epony joined
[18:25] *** Manifest0 left
[18:29] *** epony left
[18:29] *** epony joined
[18:30] *** Manifest0 joined
[18:35] *** sauvin left
[18:35] *** Manifest0 left
[18:40] *** Manifest0 joined
[18:49] *** Manifest0 left
[18:54] *** Manifest0 joined
[18:56] *** jmerelo left
[18:58] *** Manifest0 left
[19:05] *** Manifest0 joined
[19:08] *** adu joined
[19:10] *** Manifest0 left
[19:16] *** Manifest0 joined
[19:28] *** Manifest0 left
[19:32] *** Manifest0 joined
[19:39] *** Manifest0 left
[19:43] *** netrino left
[19:44] *** ravenous_ left
[19:44] *** Manifest0 joined
[19:45] *** netrino joined
[19:50] *** Manifest0 left
[19:53] *** zakharyas joined
[19:55] *** Manifest0 joined
[19:58] *** Sgeo__ joined
[19:59] *** espadrine_ joined
[20:00] *** Manifest0 left
[20:01] *** Sgeo_ left
[20:05] *** Manifest0 joined
[20:09] *** ufobat_ joined
[20:14] *** ufobat left
[20:16] *** Sgeo__ left
[20:16] *** Sgeo__ joined
[20:26] *** redhands joined
[20:28] *** johnjohn101 joined
[20:29] *** molaf joined
[20:48] *** Sgeo_ joined
[20:51] *** redhands left
[20:52] *** Sgeo__ left
[20:55] *** Sgeo__ joined
[20:59] *** Sgeo_ left
[21:03] *** skids left
[21:10] *** Manifest0 left
[21:10] <lizmat> weekly: https://www.reddit.com/r/perl6/comments/bs8a0b/sparrow6_progress_report/

[21:10] <notable6> lizmat, Noted!

[21:11] *** melezhik joined
[21:13] <melezhik> Hi, just wrote some update on Sparrow to Perl6 migration progress to, feel free to message me if someone is interested in Sparrow6/Perl6 automation - https://www.reddit.com/r/perl6/comments/bs8a0b/sparrow6_progress_report/

[21:13] <lizmat> melezhik++

[21:15] *** Manifest0 joined
[21:16] <melezhik> I actually would like to test the water if it could be applicable for any Perl6 related projects / Perl6 development, now when Sparrow is pure Perl6, so I am open for ideas/discussions ((=; 

[21:18] <melezhik> sadly my current employer does not allow to use any Perl6 ... I have to put up with using Sparrow6 limited to my laptop/Sandbox environment

[21:18] *** zakharyas left
[21:20] <lizmat> :-(

[21:31] *** MasterDuke joined
[21:31] *** MasterDuke left
[21:31] *** MasterDuke joined
[21:39] *** aindilis left
[21:48] *** pecastro left
[21:54] <rba> are there any subdomains on either rakudo.org or moarvm.org with a website?

[21:57] *** adu left
[21:59] *** Manifest0 left
[22:01] <lizmat> rba: not to my knowledge, jnthn might be able to tell wrt moarvm.org

[22:01] <lizmat> try doing an axfr on the DNS ?  :-)

[22:02] <nadim_> m: my $s = <1 2 3>.slip ; dd $s

[22:02] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'slip' for invocant of type 'List'. Did you mean any of these?␤    Slip␤    flip␤    sin␤    skip␤␤  in block <unit> at <tmp> line 1␤␤»

[22:02] <lizmat> m: my $s = <1 2 3>.Slip ; dd $s

[22:02] <camelia> rakudo-moar a643b8be1: OUTPUT: «Slip $s = $(slip(IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")))␤»

[22:02] <nadim_> m: my $s = (1, 2, 3).slip ; dd $s

[22:02] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'slip' for invocant of type 'List'. Did you mean any of these?␤    Slip␤    flip␤    sin␤    skip␤␤  in block <unit> at <tmp> line 1␤␤»

[22:03] <nadim_> m: my $s = (1, 2, 3).Slip ; dd $s

[22:03] <camelia> rakudo-moar a643b8be1: OUTPUT: «Slip $s = $(slip(1, 2, 3))␤»

[22:03] <nadim_> m: my $s = (1, 2, 3).Slip ; dd $s ; sub s(Mu $s) { dd $s} ; s($s)

[22:03] <camelia> rakudo-moar a643b8be1: OUTPUT: «Slip $s = $(slip(1, 2, 3))␤$(slip(1, 2, 3))␤»

[22:03] *** Manifest0 joined
[22:05] <nadim_> m: my $s = (1, 2, 3).Slip ; dd $s ; sub s(Mu $s, 'Begin', $s, 'end') { dd $s} ; dd s($s) ;

[22:05] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol '$s'␤at <tmp>:1␤------> 3.Slip ; dd $s ; sub s(Mu $s, 'Begin', $s7⏏5, 'end') { dd $s} ; dd s($s) ;␤    expecting any of:␤        shape declaration␤»

[22:05] <nadim_> m: my $s = (1, 2, 3).Slip ; dd $s ; sub s(Mu $s){ 'Begin', $s, 'end') { dd $s} ; dd s($s) ;

[22:05] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3dd $s ; sub s(Mu $s){ 'Begin', $s, 'end'7⏏5) { dd $s} ; dd s($s) ;␤    expecting any of:␤        statement end␤        statement modifier␤        stat…»

[22:07] <jnthn> rba: Just checked; no

[22:07] <nadim_> m: my $s = (1, 2, 3).Slip ; dd $s ; sub s(Mu $s){ 'Begin', $s, 'end'} ;  dd s($s) 

[22:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «Slip $s = $(slip(1, 2, 3))␤("Begin", 1, 2, 3, "end")␤»

[22:08] <nadim_> m: my $s = (1, 2, 3).Slip ; dd $s ; sub s(Mu $s){ 'Begin', $s, 'end'} ;  my ($b, Mu $s2, $e) = s($s) ; dd $s2

[22:08] <camelia> rakudo-moar a643b8be1: OUTPUT: «Slip $s = $(slip(1, 2, 3))␤Int $s2 = 1␤»

[22:09] <nadim_> is it even possible to return a Slip?

[22:09] <nadim_> m: my $s = (1, 2, 3).Slip ; dd $s ; sub s(Mu $s){ 'Begin', $s, 'end'} ;  my ($b, \s2, $e) = s($s) ; dd s2

[22:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «Slip $s = $(slip(1, 2, 3))␤1␤»

[22:09] <nadim_> m: my $s = (1, 2, 3).Slip ;  sub s(Mu $s){ 'Begin', $s, 'end'} ;  my ($b, \s2, $e) = s($s) ; dd s2

[22:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[22:11] <nadim_> m: my $s = (1, 2, 3).Slip ;  sub s(Mu $s){ $s} ;  my ($b, \s2, $e) = s($s) ; dd s2

[22:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «2␤»

[22:11] *** sena_kun left
[22:11] *** sena_kun joined
[22:12] <nadim_> jnthn, lizmat: is it possible to return a Slip? or does it get flattened when used (returned)

[22:12] *** melezhik left
[22:12] <lizmat> yes, you can return a Slip, and it gets flattened when returned

[22:13] <timotimo> you're really multi-value-assigning there, so that'll invoke flattening

[22:13] *** johnjohn101 left
[22:13] <lizmat> m: dd (1,2,3).map: { |(42,$_,666) }

[22:13] <camelia> rakudo-moar a643b8be1: OUTPUT: «(42, 1, 666, 42, 2, 666, 42, 3, 666).Seq␤»

[22:13] <timotimo> if you want to keep the Slip, you'd just assign or perhaps even bind the return value

[22:13] <lizmat> sleep&

[22:14] <timotimo> gnite lizmat 

[22:15] <nadim_> but it has to be returned on its own, returned  with other values will always flatten it, right?

[22:17] <jnthn> Yes, a Slip disappears into any list it is placed in

[22:19] <ugexe> jnthn: seems like map { }, race (1..10000) should technically work (although ugly), but doesnt because `sub map(&code, +values)` the +values turns RaceSeq into a List. is it worth making this DWIM?

[22:20] *** rindolf left
[22:21] <jnthn> ugexe: I've thought about that one before, and can argue it both ways.

[22:26] *** Celelibi left
[22:27] <rba> jnthn: thanks.

[22:28] <rba> Made a temporary setup of the examples websites here: https://examples.p6c.dev/

[22:29] <ugexe> does that mean somehow making `race map { }, (1..100)` work would be desirable?

[22:30] <jnthn> That'd be preferable. Thing is, `race` is something you opt into at a source

[22:30] <jnthn> race for foo() { } is actually sugar for `do for foo().race { }`

[22:30] <ugexe> preferable but impossible then heh

[22:31] <jnthn> So the question is, can be find something useful for it to `.race` that isn't going to cause an utter WAT too often.

[22:32] *** Celelibi joined
[22:37] *** Cabanossi left
[22:38] *** Manifest0 left
[22:44] *** Manifest0 joined
[22:46] *** Cabanossi joined
[22:54] *** Manifest0 left
[22:54] *** nadim_ left
[22:59] *** Manifest0 joined
[23:00] *** netrino left
[23:04] *** Manifest0 left
[23:09] *** Manifest0 joined
[23:17] *** aborazmeh joined
[23:17] *** aborazmeh left
[23:17] *** aborazmeh joined
[23:18] *** redhands joined
[23:26] *** Manifest0 left
[23:32] *** netrino joined
[23:32] *** Manifest0 joined
[23:38] <MasterDuke> .ask pmurias wasn't bigint support a blocker for rakudo.js in firefox? if so, looks like it will be good soon https://wingolog.org/archives/2019/05/23/bigint-shipping-in-firefox

[23:38] <yoleaux> MasterDuke: I'll pass your message to pmurias.

[23:40] <MasterDuke> and if anybody who has a HN account wants to comment, there's some discussion about big integers and floating point and decimals, etc and how differen langs implement them https://news.ycombinator.com/item?id=19991405

[23:47] *** Manifest0 left
[23:48] *** espadrine_ left
[23:51] *** Manifest0 joined
