[00:00] <timotimo> https://en.wikipedia.org/wiki/Angela_Gossow ?

[00:04] *** nepugia joined
[00:17] *** nepugia left
[00:22] *** aborazmeh joined
[00:22] *** aborazmeh left
[00:22] *** aborazmeh joined
[00:29] <Xliff> Could someone take a quick look at https://github.com/Xliff/p6-Amazon-AWS-EC2/blob/DescribeImageAttribute/lib/Amazon/AWS/EC2/Tests/DescribeImageAttribute.pm6

[00:29] <Xliff> And tell me why uncommenting the use statement on line 5 results in the require statement on line 20 to return Nil rather than a ClassHOW?

[00:30] *** aborazmeh left
[00:30] <Xliff> s/ClassHOW/class or package/

[00:34] <vrurg> Xliff: I would assume you're require'ing same module you've already used.

[00:35] *** squashable6 left
[00:40] *** squashable6 joined
[00:40] *** ChanServ sets mode: +v squashable6

[00:46] *** Cabanossi left
[00:50] *** noisegul left
[00:58] *** Cabanossi joined
[01:01] *** pamplemousse left
[01:10] *** Sgeo_ joined
[01:14] *** Sgeo__ left
[01:43] * irced yawns loudly so as to disturb the entire neighborhood.

[01:46] <Kaiepi> releasable6, status

[01:46] <releasable6> Kaiepi, Next release will happen when it's ready. R6 is down. At least 2 blockers. 262 out of 664 commits logged (⚠ 1 warnings)

[01:46] <releasable6> Kaiepi, Details: https://gist.github.com/38507f4ca5a62a77dd9405e28afe82a7

[01:47] <Kaiepi> guess i have a few more days to work on nativecall wide string support

[01:52] * irced cheers Kaiepi on.

[01:53] *** molaf left
[01:58] *** Kaiepi left
[01:58] *** mowcat left
[01:59] *** Kaiepi joined
[02:05] *** Kaiepi left
[02:05] *** Kaiepi joined
[02:05] *** molaf joined
[02:20] <Xliff> vrurg: How can I tell if I've already loaded a module?

[02:20] <vrurg> Xliff: try checking for ::('Module::Name')

[02:21] <Xliff> Yeah. Am doing that, and it comes out as Nil

[02:21] <Xliff> But it's a thought. *sigh*

[02:22] <Xliff> m: my $r = ::('Test'); $r.^name.say

[02:22] <camelia> rakudo-moar 2dc68c922: OUTPUT: «Failure␤»

[02:22] <Xliff> m: my $r = ::('Test'); $r.^name.say; my %class; %class<Test> = ::('Test'); %class.gist.say

[02:22] <camelia> rakudo-moar 2dc68c922: OUTPUT: «Failure␤No such symbol 'Test'␤  in block <unit> at <tmp> line 1␤␤»

[02:22] * irced slaps camelia in the face.

[02:22] <vrurg> perl6 -MTest -e 'say ::("Test").HOW.^name'                                                                                                                                                                                                                                                                          28-06-19 22:21:52

[02:22] <vrurg> Perl6::Metamodel::ModuleHOW

[02:22] <vrurg> That what it should be.

[02:23] <Xliff> vrurg++

[02:23] <vrurg> And if for any reason a module is not loaded you get Failure as a result.

[02:23] <Xliff> I'll rework things and see if that helps.

[02:23] <vrurg> Xliff: good luck!

[02:23] * vrurg leaves. 

[02:23] <vrurg> o/

[02:24] <Xliff> vrurg: So do you know why "(require ::('Module::Name'))" would return Nil?

[02:24] <Xliff> Oh. Well. o/

[02:24] <vrurg> Ok. :)

[02:24] <vrurg> You wrapped it in try {} – that's why. It masks away the problem.

[02:25] <vrurg> https://docs.perl6.org/language/modules#index-entry-require

[02:26] <Xliff> No. Those weren't curlies

[02:26] <vrurg> It doesn't matter. 

[02:26] <Xliff> So remove the try?

[02:26] <vrurg> Curly braces are often optional. See BEGIN say "ok"; and BEGIN { say "ok" }

[02:27] <Xliff> So... "my $c; try { $c = require ::("Module::Name") }"

[02:27] <Xliff> ??

[02:28] <vrurg> Depends on what you need. Basically, if it returns nil – it's a sign of a problem. Then if you check the return of ::('module') and get Failure – this is a problem.

[02:28] <Xliff> Yeah. Getting that . It's finding the root problem thats...well... the problem! :)

[02:28] <vrurg> ok, really time to go. Try the docs, they're pretty good on this subject.

[02:28] <vrurg> o/

[02:28] <Xliff> Yeah. I've been reading them left right and sideways.

[02:28] <Xliff> One more go won't hurt.

[02:28] <Xliff> o/

[02:29] <Xliff> m: Nil.HOW.^name.say

[02:29] <camelia> rakudo-moar 2dc68c922: OUTPUT: «Perl6::Metamodel::ClassHOW␤»

[02:29] <Xliff> ^^ That also

[02:30] <Xliff> m: ::('Test').^\name.say

[02:30] <camelia> rakudo-moar 2dc68c922: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3::('Test').^7⏏5\name.say␤»

[02:30] <Xliff> m: ::('Test').^name.say

[02:30] <camelia> rakudo-moar 2dc68c922: OUTPUT: «Failure␤»

[02:36] *** Cabanossi left
[02:37] *** aborazmeh joined
[02:37] *** aborazmeh left
[02:37] *** aborazmeh joined
[02:42] *** Cabanossi joined
[03:42] *** evalable6 left
[03:42] *** squashable6 left
[03:42] *** committable6 joined
[03:42] *** ChanServ sets mode: +v committable6

[03:42] *** releasable6 joined
[03:42] *** ChanServ sets mode: +v releasable6

[03:43] *** notable6 joined
[03:43] *** shareable6 joined
[03:43] *** coverable6 joined
[03:43] *** ChanServ sets mode: +v coverable6

[03:43] *** unicodable6 joined
[03:43] *** ChanServ sets mode: +v unicodable6

[03:44] *** squashable6 joined
[03:45] *** bloatable6 joined
[03:45] *** ChanServ sets mode: +v bloatable6

[03:46] *** evalable6 joined
[03:46] *** ChanServ sets mode: +v evalable6

[03:46] *** greppable6 joined
[03:46] *** ChanServ sets mode: +v greppable6

[03:46] *** quotable6 joined
[03:46] *** undersightable6 joined
[03:46] *** statisfiable6 joined
[03:46] *** benchable6 joined
[03:46] *** ChanServ sets mode: +v benchable6

[03:46] *** bisectable6 joined
[03:47] *** nativecallable6 joined
[03:47] *** reportable6 joined
[03:47] *** ChanServ sets mode: +v reportable6

[03:47] * irced asks Camelia what she thinks about Julia.

[04:09] <Xliff> ugexe vrurg timotimo: If you're interested, this is what seems to work --> https://github.com/Xliff/p6-Amazon-AWS-EC2/blob/DescribeImageAttribute/lib/Amazon/AWS/EC2/Tests/DescribeImageAttribute.pm6

[04:47] *** evalable6 left
[04:51] *** evalable6 joined
[04:51] *** ChanServ sets mode: +v evalable6

[04:53] *** irced left
[05:08] *** aborazmeh left
[05:26] *** sauvin joined
[05:27] *** sauvin left
[05:33] *** khisanth_ left
[05:39] *** sauvin joined
[05:59] *** khisanth_ joined
[06:11] *** molaf left
[06:19] *** nadim joined
[06:19] <nadim> morning P6

[06:19] <yoleaux> 23 Jun 2019 08:01Z <Woodi> nadim: to install via zef DDT required: s/pm/pm6/ in META6.json, line 14

[06:19] <yoleaux> 23 Jun 2019 08:04Z <Woodi> nadim: I tried to parse 132k html file but it instantly got 3G of 4G RAM and I killed it when swap was almoust 1G...

[06:20] *** ufobat_ joined
[06:24] *** ufobat left
[06:43] <Kaiepi> .

[07:07] *** aborazmeh joined
[07:07] *** aborazmeh left
[07:07] *** aborazmeh joined
[07:17] *** xinming left
[07:23] *** xinming joined
[07:41] *** sena_kun joined
[07:54] *** titsuki joined
[08:37] <Kaiepi> aaand done implementing support for wchar_t, wint_t, char16_t, and char32_t! now i just need to implement support for wide strings themselves

[08:51] *** rindolf joined
[08:59] <sena_kun>  

[09:16] *** natrys joined
[09:22] *** aborazmeh left
[09:24] *** aborazmeh joined
[09:24] *** aborazmeh left
[09:24] *** aborazmeh joined
[09:29] *** aborazmeh left
[10:03] *** Sgeo_ left
[10:09] *** Black_Ribbon left
[10:27] <Xliff> Kaiep++

[10:44] *** Sgeo joined
[11:03] *** reach_satori left
[11:17] *** nepugia joined
[11:33] *** reach_satori joined
[11:37] *** reach_satori_ joined
[11:40] *** reach_satori left
[11:45] <sena_kun> Woodi, ping with https://github.com/slunski/perl6-text-ldif/pull/3

[11:59] *** docdoctor joined
[12:02] *** mowcat joined
[12:20] *** docdoctor left
[12:45] *** natrys left
[12:52] *** molaf joined
[12:57] *** natrys joined
[12:58] *** mowcat left
[13:17] *** lucasb joined
[13:20] *** hankache joined
[13:23] *** bittersweetsymph joined
[13:46] *** Cabanossi left
[13:53] *** Cabanossi joined
[14:00] *** bittersweetsymph left
[14:02] *** reach_satori_ left
[14:33] <Woodi> hallo #perl6 :)

[14:33] <yoleaux> 28 Jun 2019 22:06Z <sena_kun> Woodi: I re-did the module, now it parses all RFC examples, still exports hashes, but the structure is more complex. will update documentation tomorrow and do a PR

[14:33] <sena_kun> o/

[14:33] <Woodi> sena_kun: merged and seems working :)

[14:33] <sena_kun> \o/

[14:33] <sena_kun> thanks!

[14:33] <Woodi> sena_kun: loots of work you have done !

[14:35] <sena_kun> wasn't worse than patching ASN::META to get a proper support of OCTET STRING type. :)

[14:36] <Woodi> sena_kun: if you want to do more work on it you can just make yourself maintainer and point ecosystem to your repo

[14:37] <Woodi> but if not then that's ok too

[14:38] <sena_kun> Woodi, I think now it does everything that I'd expect from "Text::LDIF" name, hence I bumped its version to 1.0. Maybe I'd add some serializer, but it can as well live in some other place.

[14:39] <sena_kun> Woodi, if you insist on passing the maintainence to me, I don't mind too much, but I had no intention of "stealing" the module, just wanted it to support more features.

[14:40] *** hankache left
[14:41] *** AlexDaniel left
[14:42] *** AlexDaniel joined
[14:54] <Woodi> sena_kun: ok, then if you do more work then just change location in ecosystem to your repo for easy of work. then if you want to have less modules you maintain I voluntire to take it back

[14:55] <sena_kun> Woodi, sure, will do so if something other will be needed.

[15:13] *** sftp joined
[15:36] *** Cabanossi left
[15:43] *** mowcat joined
[15:46] *** Cabanossi joined
[15:48] *** pamplemousse joined
[15:55] *** hankache joined
[16:07] *** AlexDaniel left
[16:17] *** hankache left
[16:30] *** nepugia left
[16:31] *** AlexDaniel joined
[16:48] *** nepugia joined
[16:51] *** pamplemousse left
[16:53] <Woodi> sena_kun: by "serialization" you mean converting hashes to ldif ? that would be nice to have

[16:54] *** nepugia_ joined
[16:54] <sena_kun> yes

[16:55] *** nepugia left
[16:57] *** guifa2 joined
[16:58] <guifa2> Is there any way to do a non-recursive hyper? maybe a › instead of » ?

[17:07] *** zakharyas joined
[17:09] *** nepugia_ left
[17:32] <ugexe> .hyper

[17:32] <yoleaux> 28 Jun 2019 23:50Z <patrickb83> ugexe: I'd appreciate a look: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-06-28#l257

[17:32] <ugexe> m: (1,(1,2),).hyper.map(*.say)

[17:32] <camelia> rakudo-moar c227693a6: OUTPUT: «1␤(1 2)␤»

[17:32] <ugexe> m: (1,(1,2),)>>.say

[17:32] <camelia> rakudo-moar c227693a6: OUTPUT: «1␤1␤2␤»

[17:33] <ugexe> and that isn't what recursion is

[17:37] *** sena_kun left
[17:37] *** sena_kun joined
[17:46] *** pamplemousse joined
[18:16] *** tyilanmenyn joined
[18:19] <TreyHarris> m: FatRat(e**(i * pi))

[18:19] <camelia> rakudo-moar c227693a6: ( no output )

[18:20] <TreyHarris> m: say FatRat(e**(i * pi))

[18:20] <camelia> rakudo-moar c227693a6: OUTPUT: «-1␤»

[18:20] *** tyilanmenyn left
[18:23] <TreyHarris> I don't see how that gives the right answer, I don't see a special case that rounds when the denominator gets too large nor do I see where the Euler identity is handled trigonometrically, which can give the correct answer numerically. It looks like it's doing algebra. It's mathemagical ;-)

[18:23] <TreyHarris> m: Rat(e**(i * pi))

[18:23] <camelia> rakudo-moar c227693a6: ( no output )

[18:23] <TreyHarris> m: say Rat(e**(i * pi))

[18:23] <camelia> rakudo-moar c227693a6: OUTPUT: «-1␤»

[18:23] <TreyHarris> That makes perfect sense, because it underflows to -1

[18:25] *** tyilanmenyn joined
[18:28] <TreyHarris> If there were a Complex[Fat]Rat, I could delve into this further without hand-tracing code. Seminumerical algorithms have never been my strong suit...

[18:31] <TreyHarris> m: my $eu = e**(i * (pi/2)); say FatRat($eu); 

[18:31] <camelia> rakudo-moar c227693a6: OUTPUT: «Cannot convert 6.123233995736766e-17+1i to FatRat: imaginary part not zero␤  in block <unit> at <tmp> line 1␤␤»

[18:31] <TreyHarris> m: my $eu = e**(i * (pi/2)); say FatRat($eu**2); 

[18:31] <camelia> rakudo-moar c227693a6: OUTPUT: «-1␤»

[18:32] <TreyHarris> Oh, is this logic in the Complex bridge? Hrm...

[18:34] <TreyHarris> lol, I was briefly thinking "what's is a non-imaginary value that I can multiply by something (positively) proportional to itself to get a negative so I can test this?" (The answer is quaternions, obviously.)

[18:38] <Xliff> m: unit package Bleah; say $*PACKAGE

[18:38] <camelia> rakudo-moar c227693a6: OUTPUT: «Dynamic variable $*PACKAGE not found␤  in block <unit> at <tmp> line 1␤␤»

[18:38] <Xliff> m: package Bleah { say $*PACKAGE }

[18:38] <camelia> rakudo-moar c227693a6: OUTPUT: «Dynamic variable $*PACKAGE not found␤  in block <unit> at <tmp> line 1␤␤»

[18:38] <Xliff> m: package Bleah { say $?PACKAGE }

[18:38] <camelia> rakudo-moar c227693a6: OUTPUT: «(Bleah)␤»

[18:38] *** guifa2 left
[18:39] *** guifa2 joined
[18:39] <Xliff> m: package A::B::Bleah { say $?PACKAGE }

[18:39] <camelia> rakudo-moar c227693a6: OUTPUT: «(Bleah)␤»

[18:39] <Xliff> m: package A::B::Bleah { say $?PACKAGE.^name }

[18:39] <camelia> rakudo-moar c227693a6: OUTPUT: «A::B::Bleah␤»

[18:39] <Xliff> m: package A::B::Bleah { say $?PACKAGE.Str }

[18:39] <camelia> rakudo-moar c227693a6: OUTPUT: «Use of uninitialized value of type A::B::Bleah in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block  at <tmp> line 1␤»

[18:39] <Xliff> m: package A::B::Bleah { say $?PACKAGE.^shortname }

[18:39] <camelia> rakudo-moar c227693a6: OUTPUT: «Bleah␤»

[18:41] *** tyilanmenyn left
[18:41] *** tyilanmenyn joined
[18:42] *** Sgeo_ joined
[18:42] *** muzyka joined
[18:42] *** Sgeo left
[18:43] *** tyilanmenyn left
[18:44] *** tyilanmenyn joined
[18:45] <muzyka> https://www.youtube.com/watch?v=5iqjRhe88UI

[18:46] <guifa2> ugexe: it's for code golf :-)  I guess I should have said "that doesn't operate on embedded lists" lol

[18:46] <guifa2> (yes, I'm just looking for a map shorthand ha)

[18:46] *** mowcat left
[18:46] <guifa2> https://codegolf.stackexchange.com/questions/67611/hamilton-is-coming-to-town/187450#187450

[18:46] *** Cabanossi left
[18:47] <guifa2> I'm fairly certain that is now officially the ugliest P6 code I've ever written

[18:48] *** Cabanossi joined
[18:49] *** Sgeo joined
[18:49] *** Sgeo_ left
[19:02] *** tyilanmenyn left
[19:05] *** pmurias joined
[19:06] *** tyilanmenyn joined
[19:09] *** molaf left
[19:09] *** nepugia joined
[19:09] * sena_kun appreciates how code like `5.new(10)` just works

[19:13] <AlexDaniel> sena_kun: it's not very explicit though

[19:13] *** hankache joined
[19:18] *** hankache left
[19:19] *** nadim left
[19:21] <sena_kun> AlexDaniel, what do you mean?

[19:21] <AlexDaniel> sena_kun: I don't find it readable

[19:22] <AlexDaniel> m: say 5.WHAT.new(10) # kinda better but relies on dodgy WHAT

[19:22] <camelia> rakudo-moar c227693a6: OUTPUT: «10␤»

[19:23] <sena_kun> well, of course, the example is just an example. I am using it to create correct subclasses when it is not very nice to push metadata around.

[19:23] *** tyilanmenyn left
[19:23] <sena_kun> `$str.new(Blob.new($input));` to be precise. :)

[19:24] * sena_kun patches ASN stack to treat OCTET STRING as Blob|Str instead of just Str

[19:24] *** tyilanmenyn joined
[19:25] *** Black_Ribbon joined
[19:34] *** empee0 joined
[19:35] <Xliff> If I get a 401 with Cro::HTTP::Client, is there any way to get the error body?

[19:36] *** zakharyas left
[19:38] <sena_kun> can't you await $resp.body?

[19:39] *** pamplemousse left
[19:39] *** pamplemousse joined
[19:39] <sena_kun> ah, you have a Client exception, right? The response is in its $.response attribute, so you can try `CATCH { when X::Cro...::Client { note await .response.body } }`

[19:39] <sena_kun> or something along the lines

[19:39] <sena_kun> Xliff, ^

[19:41] *** guifa2 left
[19:46] *** guifa2 joined
[19:46] *** lucasb left
[19:51] *** pamplemousse left
[19:51] *** pamplemousse joined
[19:56] *** patrickb joined
[19:59] *** sauvin left
[20:05] *** pamplemousse left
[20:05] *** pamplemousse joined
[20:05] <Xliff> m: say 5 ~~ 1..10

[20:05] <camelia> rakudo-moar c227693a6: OUTPUT: «True␤»

[20:05] <Xliff> m: say 5 ~~ 1...10

[20:05] <camelia> rakudo-moar c227693a6: OUTPUT: «(False True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True…»

[20:06] <Xliff> m: say 5 ~~ 1..10

[20:06] <camelia> rakudo-moar c227693a6: OUTPUT: «True␤»

[20:06] <Xliff> m: say -1 ~~ 1..10

[20:06] <camelia> rakudo-moar c227693a6: OUTPUT: «False␤»

[20:07] *** muzyka left
[20:07] <Xliff> sena_kun++: LOL! That's exactly what I ended up doing! Thanks.

[20:08] <sena_kun> np

[20:10] *** guifa2 left
[20:22] *** tyilanmenyn left
[20:30] *** guifa2 joined
[20:33] *** veesh joined
[20:34] *** veesh left
[20:34] *** veesh joined
[20:34] *** pamplemousse_ joined
[20:37] *** pamplemousse left
[20:38] *** nadim joined
[21:04] *** sena_kun left
[21:07] *** HarmtH_ joined
[21:13] *** pamplemousse_ left
[21:30] *** tyilanmenyn joined
[21:33] *** aindilis left
[21:37] *** tyilanmenyn is now known as tyil

[21:40] *** aindilis joined
[21:47] *** Cabanossi left
[21:47] *** aindilis left
[21:48] *** aindilis joined
[21:50] *** Cabanossi joined
[21:51] *** |oLa| joined
[21:52] *** veesh left
[21:57] *** |oLa| left
[21:58] *** pmurias left
[22:06] *** pamplemousse_ joined
[22:11] *** Sgeo_ joined
[22:13] *** molaf joined
[22:15] *** Sgeo left
[22:16] *** pamplemousse_ left
[22:20] *** pmurias joined
[22:21] *** reach_satori_ joined
[22:32] *** natrys left
[22:37] *** molaf left
[23:07] *** vrurg left
[23:08] *** vrurg joined
[23:15] *** vrurg left
[23:18] *** vrurg joined
[23:32] *** rindolf left
[23:33] *** pmurias left
[23:44] *** patrickb left
[23:45] *** patrickb joined
[23:59] <xinming> releasable6: status

[23:59] <releasable6> xinming, Next release will happen when it's ready. R6 is down. At least 1 blocker. 262 out of 666 commits logged (⚠ 1 warnings)

[23:59] <releasable6> xinming, Details: https://gist.github.com/6f7f7559f9ba9d6758f19e2fc4c6d5aa

