[00:00] *** lizmat joined
[00:16] <Geth> ¦ doc: taboege self-assigned Checklist for 2019.03 https://github.com/perl6/doc/issues/2673

[00:19] *** syntaxman_ is now known as syntaxman

[00:20] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); my Attribute $attr .= new: :name<$!bar>, :type(Any), :package(Enum); Enum.^add_attribute($attr); my &accessor := my method (Enum:U --> Any) { nqp::getattr(self, Enum, '$!bar') }; nqp::bindattr(&accessor, Method, '$!name', 'bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «P6opaque: invalid native bind to attribute '$!name' in type Attribute for kind str␤  in block <unit> at <tmp> line 1␤␤»

[00:21] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); my Attribute $attr .= new: :name('$!bar'), :type(Any), :package(Enum); Enum.^add_attribute($attr); my &accessor := my method (Enum:U --> Any) { nqp::getattr(self, Enum, '$!bar') }; nqp::bindattr(&accessor, Method, '$!name', 'bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «P6opaque: invalid native bind to attribute '$!name' in type Attribute for kind str␤  in block <unit> at <tmp> line 1␤␤»

[00:22] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum)); my &accessor := my method (Enum:U --> Any) { nqp::getattr(self, Enum, '$!bar') }; nqp::bindattr(&accessor, Method, '$!name', 'bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3tr(Enum, Enum, '$!bar', 1); say Enum.bar7⏏5<EOL>␤    expecting …»

[00:22] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := my method (Enum:U --> Any) { nqp::getattr(self, Enum, '$!bar') }; nqp::bindattr(&accessor, Method, '$!name', 'bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «P6opaque: no such attribute '$!name' on type Method in a Method when trying to bind a value␤  in block <unit> at <tmp> line 1␤␤»

[00:23] *** ijneb joined
[00:24] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); &accessor.set_name('bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:24] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    accessor used at line 1␤␤»

[00:25] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := anon method(Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); &accessor.set_name('bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:25] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Type 'method' is not declared. Did you mean 'Method'?␤at <tmp>:1␤------> 3age(Enum))); my &accessor := anon method7⏏5(Enum:U: --> Any) { nqp::getattr(self, E␤Malformed anon␤at <tmp>:1␤------> 3, :package(Enum))); …»

[00:26] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := anon method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); &accessor.set_name('bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3tr(Enum, Enum, '$!bar', 1); say Enum.bar7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[00:26] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := anon method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); }; &accessor.set_name('bar'); Enum.^add_method(nqp::getstaticcode(&accessor)); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[00:26] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := anon method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); }; &accessor.set_name('bar'); Enum.^add_method(nqp::getstaticcode(nqp::decont(&accessor))); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[00:27] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := anon method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); }; &accessor.set_name('bar'); Enum.^add_method(&accessor); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:27] <camelia> rakudo-moar a643b8be1: OUTPUT: «Too few positionals passed; expected 4 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[00:28] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := anon method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar', Any); }; &accessor.set_name('bar'); Enum.^add_method(&accessor); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:28] <camelia> rakudo-moar a643b8be1: OUTPUT: «Too few positionals passed; expected 4 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[00:28] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := anon method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); }; &accessor.set_name('bar'); Enum.^add_method(&accessor); say Enum.bar

[00:28] <camelia> rakudo-moar a643b8be1: OUTPUT: «Too few positionals passed; expected 4 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[00:30] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := my method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); }; &accessor.set_name('bar'); Enum.^add_method('bar', &accessor); nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:30] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot bind attributes in a Enum type object␤  in block <unit> at <tmp> line 1␤␤»

[00:31] <Kaiepi> m: use nqp; my constant Enum := Metamodel::EnumHOW.new_type: :name<Enum>, :base_type(Any); Enum.^add_attribute(Attribute.new(:name<$!bar>, :type(Any), :package(Enum))); my &accessor := my method (Enum:U: --> Any) { nqp::getattr(self, Enum, '$!bar'); }; &accessor.set_name('bar'); Enum.^add_method('bar', &accessor); Enum.^compose; nqp::bindattr(Enum, Enum, '$!bar', 1); say Enum.bar

[00:31] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot bind attributes in a Enum type object␤  in block <unit> at <tmp> line 1␤␤»

[00:31] <Kaiepi> oh right i'm an idiot

[00:32] *** quipa_ joined
[00:35] *** quipa left
[00:41] *** kurahaupo_ joined
[00:41] *** kurahaupo left
[00:43] *** espadrine left
[00:47] <Kaiepi> m: use nqp; my $foo := method () {}; nqp::getstaticcode($foo)

[00:47] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[00:48] <Kaiepi> m: use nqp; nqp::getstaticcode(method () {})

[00:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[00:48] <Kaiepi> m: use nqp; constant FOO = method () {}; nqp::getstaticcode(FOO)

[00:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[00:48] <Kaiepi> m: use nqp; constant FOO = method () {}; BEGIN nqp::getstaticcode(FOO)

[00:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  getstaticcode requires a static coderef␤  at :␤»

[00:59] <Kaiepi> m: use nqp; constant FOO = method () {}; BEGIN nqp::getstaticcode(nqp::decont(FOO))

[00:59] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  getstaticcode requires a static coderef␤  at :␤»

[00:59] <Kaiepi> how do i use nqp::getstaticcode?

[01:00] <Kaiepi> m: use nqp; my &foo := sub () {}; nqp::getstaticcode(&foo)

[01:00] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[01:00] <Kaiepi> m: use nqp; my &foo := sub () {}; nqp::getstaticcode(nqp::decont(&foo))

[01:00] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[01:00] <Kaiepi> m: use nqp; nqp::getstaticcode(sub {})

[01:00] <camelia> rakudo-moar a643b8be1: OUTPUT: «getstaticcode requires a static coderef␤  in block <unit> at <tmp> line 1␤␤»

[01:00] <Kaiepi> m: use nqp; BEGIN nqp::getstaticcode(sub {})

[01:00] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  getstaticcode requires a static coderef␤  at :␤»

[01:01] <Kaiepi> m: use nqp; nqp::getstaticcode(nqp::getattr(sub {}, Code, '$!do'))

[01:01] <camelia> rakudo-moar a643b8be1: ( no output )

[01:01] <Kaiepi> oh

[01:01] <Kaiepi> m: use nqp; say nqp::getstaticcode(nqp::getattr(sub {}, Code, '$!do'))

[01:01] <camelia> rakudo-moar a643b8be1: OUTPUT: «The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside␤»

[01:21] *** AlexDaniel joined
[01:27] *** Sgeo__ joined
[01:30] *** Sgeo_ left
[01:39] <tobs> `make html-nohighlight` fails for me in a clean checkout of the docs repo. "Failed to get the directory contents of '/tmp/doc/build/Programs': Failed to open dir: No such file or directory" in htmlify.p6

[01:39] <yoleaux> 18 May 2019 06:30Z <jmerelo> tobs: I don't think so. It's systematically failing. I'll take a look.

[01:40] <tobs> does someone have experience with that error? I think I used to make html-nohighlight just like that before.

[01:42] *** ChoHag left
[01:52] *** noisegul_ joined
[01:55] *** noisegul left
[02:05] *** quipa_ left
[02:09] *** hythm joined
[02:18] *** aborazmeh left
[02:22] *** molaf joined
[02:24] *** hythm left
[02:24] *** hythm joined
[02:29] *** hythm left
[02:30] *** hythm joined
[02:36] *** hythm left
[02:36] *** hythm_ joined
[02:39] *** hythm_ left
[02:41] *** hythm joined
[02:53] *** hythm_ joined
[02:55] *** hythm left
[03:07] *** hythm_ left
[03:11] *** hythm joined
[03:19] <Kaiepi> m: use nqp; BEGIN $*W.install_lexical_symbol($*W.symbol_lookup(nqp::list('MY'), Nil), 'foo', 1); say foo

[03:19] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Cannot find method 'symbol' on object of type QAST::Op␤  at :␤»

[03:19] *** mowcat left
[03:20] <Kaiepi> m: use nqp; BEGIN $*W.install_lexical_symbol($*UNIT, 'foo', 1); say foo

[03:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[03:21] <Kaiepi> m: BEGIN say $*UNIT.dump

[03:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «- QAST::Block  :outer<?> :in_stmt_mod<?> :also_uses<?> :IN_DECL<mainline>␤  - QAST::Stmts ␤    - QAST::Var(lexical $¢ :decl(contvar)) ␤    - QAST::Var(lexical $! :decl(contvar)) ␤    - QAST::Var(lexical $/ :decl(contvar)) ␤    - QAST::Var(l…»

[03:31] <Kaiepi> m: sub a { $*W.install_lexical_symbol($*UNIT, 'a', 1) }; BEGIN a; say a

[03:31] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[03:32] <Kaiepi> m: sub a { $*W.install_lexical_symbol($*UNIT, 'a', 1) }; BEGIN a; say UNIT::<a>

[03:32] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[03:33] <Kaiepi> m: sub a { use nqp; $*W.install_lexical_symbol($*W.symbol_lookup(nqp::list('CALLER', 'MY'), Nil), 'a', 1) }; BEGIN a; say a

[03:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Cannot find method 'symbol' on object of type QAST::Op␤  at :␤»

[03:33] <Kaiepi> damn

[03:33] <Kaiepi> m: BEGIN { use QAST }

[03:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «===SORRY!===␤Could not find QAST at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6…»

[03:34] <Kaiepi> m: BEGIN QAST::Block.new()

[03:34] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  Could not find symbol '&Block'␤    in code  at <tmp> line 1␤␤»

[03:44] <Kaiepi> m: sub evil { $*W.install_lexical_symbol: $*W.cur_lexpad, 'foo', 1 }; BEGIN evil; say foo

[03:44] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[03:44] <Kaiepi> ah hah

[03:45] <Kaiepi> m: sub evil { $*W.install_lexical_symbol: $*W.cur_lexpad, 'foo', 1 }; BEGIN evil; say so UNIT::.keys.first(* eq 'foo'); say so UNIT::MY::.keys.first(* eq 'foo')

[03:45] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤True␤»

[03:45] <Kaiepi> m: sub evil { $*W.install_lexical_symbol: $*W.cur_lexpad, 'foo', 1 }; BEGIN evil; say so UNIT::.keys

[03:45] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[03:46] <Kaiepi> m: sub evil { $*W.install_lexical_symbol: $*W.cur_lexpad, 'foo', 1 }; BEGIN evil; say UNIT::.keys

[03:46] <camelia> rakudo-moar a643b8be1: OUTPUT: «(GLOBALish foo !UNIT_MARKER ::?PACKAGE &evil EXPORT $_ $! $=finish $?PACKAGE $¢ $=pod $/)␤»

[03:46] *** jeromelanteri joined
[03:49] <Kaiepi> m: sub evil { $*W.install_lexical_symbol: $*W.cur_lexpad, 'foo', 1 }; BEGIN evil; say MY::.keys

[03:49] <camelia> rakudo-moar a643b8be1: OUTPUT: «(GLOBALish !UNIT_MARKER $=pod $¢ $_ EXPORT ::?PACKAGE $/ foo $! $?PACKAGE $=finish &evil)␤»

[03:49] <Kaiepi> m: sub evil { $*W.install_lexical_symbol: $*W.cur_lexpad, 'foo', 1 }; BEGIN evil; say OUR::.keys

[03:49] <camelia> rakudo-moar a643b8be1: OUTPUT: «()␤»

[03:51] *** adu left
[04:03] *** jerome_ joined
[04:04] *** jeromelanteri left
[04:13] *** qiqi joined
[04:32] *** qiqi left
[04:34] *** nacyro joined
[04:34] *** hythm left
[04:35] *** hythm joined
[05:02] *** hythm left
[05:13] *** vrurg left
[05:13] *** AlexDaniel left
[05:24] <Kaiepi> m: class Type::EnumHOW is Metamodel::EnumHOW {}

[05:24] <camelia> rakudo-moar a643b8be1: ( no output )

[05:24] <Kaiepi> m: unit class Type::EnumHOW is Metamodel::EnumHOW {}

[05:24] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use 'unit' with block form of class declaration␤at <tmp>:1␤------> 3lass Type::EnumHOW is Metamodel::EnumHOW7⏏5 {}␤»

[05:24] <Kaiepi> m: unit class Type::EnumHOW is Metamodel::EnumHOW

[05:24] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> 3lass Type::EnumHOW is Metamodel::EnumHOW7⏏5<EOL>␤»

[05:24] <Kaiepi> m: unit class Type::EnumHOW is Metamodel::EnumHOW;

[05:24] <camelia> rakudo-moar a643b8be1: ( no output )

[05:39] <Kaiepi> ok weird

[05:39] <Kaiepi> bastille% perl6 -Ilib -MType::EnumHOW

[05:39] <Kaiepi> ===SORRY!===

[05:39] <Kaiepi> Unknown QAST node type NQPMu

[05:39] <Kaiepi> how do i debug this?

[05:39] <Kaiepi> i know which method's causing it, but not what in the method

[05:53] <Kaiepi> ah hah

[05:53] <Kaiepi> m: use nqp; nqp::getattr($*VM. VM, 'osname')

[05:53] <camelia> rakudo-moar a643b8be1: OUTPUT: «===SORRY!===␤Unknown QAST node type NQPMu␤»

[05:55] *** maettu left
[06:11] *** nacyro left
[06:21] *** cpup left
[06:24] *** jmerelo joined
[06:28] *** cpup joined
[06:35] *** ufobat joined
[06:36] *** lizmat left
[06:41] *** maettu joined
[06:42] <Geth> ¦ doc/master: 4 commits pushed by (Tobias Boege)++, (Juan Julián Merelo Guervós)++

[06:42] <Geth> ¦ doc/master: 017530c502 | Make one subtest per file in xt/examples-compilation.t

[06:42] <Geth> ¦ doc/master: 95e3a46ba3 | xt/examples-compilation.t: Remove some unneeded code

[06:42] <Geth> ¦ doc/master: e9fdd1fdad | Add :lang<pod6>'s to make examples compile

[06:42] <Geth> ¦ doc/master: 64d2f35391 | Merge pull request #2812 from taboege/examples-compilation-memory

[06:42] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/14c60815f9b2...64d2f3539182

[07:01] *** kurahaupo_ left
[07:02] *** kurahaupo joined
[07:22] *** kurahaupo left
[07:24] *** ravenousmoose joined
[07:26] *** domidumont joined
[07:43] *** AlexDaniel joined
[07:47] *** espadrine joined
[07:50] *** lizmat joined
[07:54] *** robertle left
[07:55] *** robertle joined
[07:58] <cpan-p6> New module released to CPAN! App::Game::Concentration (0.0.1) by 03JMERELO

[08:19] <Geth> ¦ doc: fa0a8fe0e7 | (JJ Merelo)++ | doc/Language/variables.pod6

[08:19] <Geth> ¦ doc: Reorganizes dynamic variables closes #2813

[08:19] <Geth> ¦ doc: 

[08:19] <Geth> ¦ doc: Adds `$*DEFAULT-READ-ELEMS` closes #2802 in the new section.

[08:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fa0a8fe0e7

[08:19] <synopsebot> Link: https://doc.perl6.org/language/variables

[08:32] *** ChoHag joined
[08:36] <Woodi> hi #perl6 :)

[08:36] <jmerelo> Hi, Woodi!

[08:37] <Woodi> was just reading about Python wanting to remove GIL by having multiple interpreters https://hackernoon.com/has-the-python-gil-been-slain-9440d28fa93d  ...

[08:39] <Woodi> and got to thinking that that Garbage Collection is a problem. maybe there should to be more then one GC with "localised" allocations and cleanup ?

[08:39] <jmerelo> Woodi: if I remember correctly, something like that was done in Perl years ago

[08:39] <jmerelo> Woodi: no idea about that. I'm pretty sure MoarVM takes care of the thing pretty well.

[08:42] <Woodi> jmerelo: but I think (maybe I'm wrong) that all languages have just one GC. when mem is managed manually free() is much often used. maybe Global GC is a problem ?

[08:43] <jmerelo> Woodi: that's waaay above my pay grade. Sounds about right, but I have no idea.

[08:45] <jmerelo> Woodi: the folks at #moarvm surely know a lot more about that.

[08:46] <Woodi> just theory, #moarvm have lot's of work atm :)

[08:47] *** lizmat left
[09:07] *** sena_kun joined
[09:10] *** yqt joined
[09:10] *** TeamBlast left
[09:10] *** jerome_ left
[09:18] *** TeamBlast joined
[09:19] *** HarmtH left
[09:20] *** HarmtH joined
[09:23] *** ravenousmoose left
[09:24] *** rindolf joined
[09:45] *** espadrine left
[09:47] <Geth> ¦ doc: 5abe71418a | (JJ Merelo)++ | 2 files

[09:47] <Geth> ¦ doc: Fixing links and reflow

[09:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5abe71418a

[09:47] <Geth> ¦ doc: 48b008e8fc | (JJ Merelo)++ | doc/Type/independent-routines.pod6

[09:47] <Geth> ¦ doc: Adds correct definition refs #2814

[09:47] <synopsebot> Link: https://doc.perl6.org/type/independent-routines

[09:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/48b008e8fc

[09:48] *** molaf left
[10:07] *** espadrine joined
[10:07] <ufobat> m: sub foo($i) {my $i; say $i}

[10:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «===SORRY!===␤Cannot find method 'default' on object of type NQPMu␤»

[10:10] *** quipa joined
[10:20] <sena_kun> 6c: sub foo($i) {my $i; say $i}

[10:20] <committable6> sena_kun, https://gist.github.com/a94c3d1d6d8f10192b82ba18ea318279

[10:21] <sena_kun> ufobat, sounds like a regression

[10:21] <sena_kun> ufobat, rakudo issues want it for sure, and I'd give it a blocker status even

[10:21] <sena_kun> ufobat, ah, you are quick. :)

[10:22] <sena_kun> bisectable6, help

[10:22] <bisectable6> sena_kun, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[10:22] <ufobat> :D

[10:23] <sena_kun> bisectable6: old=2018.12 new=2019.03 sub foo($i) {my $i; say $i}

[10:23] <bisectable6> sena_kun, Bisecting by exit code (old=2018.12 new=2019.03). Old exit code: 0

[10:23] <bisectable6> sena_kun, bisect log: https://gist.github.com/08fe8c3198ffb14d7f78607078872188

[10:23] <bisectable6> sena_kun, (2019-01-02) https://github.com/rakudo/rakudo/commit/42024539877fbebfdfbbc9b006106454cdaf5187

[10:31] *** kensanata joined
[10:46] *** netrino_ joined
[10:49] *** Praise left
[11:21] *** espadrine_ joined
[11:22] *** espadrine left
[11:33] *** arkaitz joined
[11:34] *** jmerelo left
[11:56] <Geth> ¦ ecosystem: f841b0170d | (Ben Davies)++ (committed using GitHub Web editor) | META.list

[11:56] <Geth> ¦ ecosystem: Add Kaiepi's Type::EnumHOW to the ecosystem

[11:56] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/f841b0170d

[12:03] *** quipa_ joined
[12:03] *** quipa left
[12:04] <Kaiepi> Type::EnumHOW is sugar for enum's MOP

[12:06] <Kaiepi> it does the work done by actions and the world for you and makes it so you don't need to use nqp at all to do stuff like add attributes

[12:06] <sena_kun> Kaiepi, I'll use this one!

[12:07] <Kaiepi> lemme know if you run into any issues with it :)

[12:07] <Kaiepi> or have any feature requests

[12:07] <sena_kun> need to try to rewrite a nqp::rebless piece with this.

[12:07] <sena_kun> Kaiepi, roger.

[12:10] *** dogbert11 joined
[12:13] *** dogbert17 left
[12:20] *** aborazmeh joined
[12:20] *** aborazmeh left
[12:20] *** aborazmeh joined
[12:21] *** arkaitz left
[12:23] <cpan-p6> New module released to CPAN! Type::EnumHOW (0.0.1) by 03KAIEPI

[12:35] *** ufobat left
[12:46] *** wamba joined
[12:56] *** Praise joined
[12:56] *** Praise left
[12:56] *** Praise joined
[13:32] *** qiqi joined
[13:45] *** zacts joined
[13:45] *** zacts left
[13:46] *** zacts joined
[13:47] *** aborazmeh left
[13:51] *** zacts left
[14:21] *** qiqi left
[14:27] *** zacts joined
[14:37] *** espadrine_ left
[14:43] *** zacts left
[14:45] *** zakharyas joined
[14:55] *** antoniogamiz joined
[15:09] *** zakharyas left
[15:11] *** zakharyas joined
[15:18] *** jmerelo joined
[15:21] *** MilkmanDan left
[15:22] <tobs> jmerelo: in the doc repo, `make html-nohighlight` needs gen-pod6-source to be run before; the html target does have that as a prerequisite. But the source of manage-page-order.p6 tells me not to run it twice without a make clean in between.

[15:23] <tobs> Would it be okay to add gen-pod6-source as a prereq to html-nohighlight as well? I've run into non-building docs a few times too often

[15:23] <tobs> and it was always the same cause which I forget two days later.

[15:25] *** kensanata left
[15:26] <jmerelo> tobs: that makes sense

[15:28] <Geth> ¦ doc: 0e8531a235 | (Tobias Boege)++ | Makefile

[15:28] <Geth> ¦ doc: Add gen-pod6-source as a prereq to html-nohighlight

[15:28] <Geth> ¦ doc: 

[15:28] <Geth> ¦ doc: Otherwise htmlify can't find its sources in build.

[15:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0e8531a235

[15:28] <jmerelo> tobs++

[15:29] <tobs> (looks like I do have a commit bit)

[15:29] *** MilkmanDan joined
[15:29] <jmerelo> tobs: use it wisely. I know you will :-)

[15:35] *** cpan-p6 left
[15:36] *** cpan-p6 joined
[15:36] *** cpan-p6 left
[15:36] *** cpan-p6 joined
[15:55] *** ufobat joined
[16:05] *** antoniogamiz left
[16:10] *** guifa joined
[16:12] <guifa> Is it possible to capture the raw in-between text for a circumfix operator or would that require doing a slang?  

[16:22] <jmerelo> guifa: with a regex?

[16:23] <jmerelo> guifa: most probably

[16:23] <jmerelo> guifa: you can use Unicode properties in regexes.

[16:23] <guifa> I was thinking more about doing something of the sort

[16:23] <guifa> my $foo = '''some specialized language here''';

[16:23] <jmerelo> oh, wait, you're talking about an operator, not a tilde

[16:24] <jmerelo> guifa: just a regex would do.

[16:24] <guifa> Where ''' ''' is a circumfix operator

[16:25] * guifa realized using ''' as the example kind of obviates the benefit of not needing to do interior quotes ha

[16:25] <timotimo> i mean, you can always q'''''' foo ''''''

[16:27] <guifa> timtimo: actually I guess better restated is, how easy is it to make our own quote operator, a la q?

[16:27] <timotimo> not possible without slangs at the moment :(

[16:27] <guifa> I don't think I'd actually do the implementation for it, but I was thinking it could be kind a nice proof of concept to show, e.g., chemical formulae 

[16:30] <guifa> (or symbolic math)

[16:31] <guifa> my $p = ´4x^2 + 3´; my $q = ´y + 8´; $p + $q; --> 4x^2 + y + 11

[16:32] <guifa> (I *am* toying with the idea of porting a sym math library when I'm done with all the international stuff, but the thought just came to me on how P6 might actually make accessing such stuff easier than most other languages)

[16:32] <tobs> I've had a Slang::Literals on my mind for some time. I often find myself needing custom literals or constructors as short as possible when I try to write math in Perl 6

[16:34] <timotimo> you can sometimes get around stuff with just terms and circumfix operators, but that still requires string-like things to be quoted additionally

[16:35] <tobs> I've used `:string (where ` is a prefix that takes a Pair) to construct symbolic variable objects and ⬛<....> (where ⬛ is a prefix taking a string) to denote faces of the cube as literal as possible, for example.

[16:35] <timotimo> ah, not bad actually

[16:38] <guifa> Yeah, I think so long as spaces are non-significant length-wise, X< ... > is probably a good method

[16:38] <timotimo> i mean, shouldn't X"blerp" also work?

[16:46] <guifa> Probably, just not as visually jumpy (although absent a specialized keyboard there also aren't very many great options either)

[16:51] <timotimo> try X‚foo‘ :P

[16:51] <timotimo> m: sub prefix:<X>($a) { say $a }; X‚lol’

[16:51] <camelia> rakudo-moar a643b8be1: OUTPUT: «lol␤»

[16:52] <timotimo> m: sub prefix:<X>($a) { say $a }; X‚lol‚

[16:52] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in low curly single quotes; couldn't find final <[’‘]> (corresponding starter was at line 1)␤at <tmp>:1␤------> 3sub prefix:<X>($a) { say $a }; X‚lol‚7⏏5<EOL>…»

[16:52] <timotimo> right.

[16:56] <guifa> But yeah … I'm going to go ahead and set my post-Intl:: goal as porting Maxima or Axiom to P6

[16:57] <timotimo> cool

[16:58] <jmerelo> guifa: all of Maxima?

[16:58] <guifa> jmarelo: I never said I'd do it in a year haha

[16:59] <jmerelo> guifa: you might want to start wih Minima or Nanoma and take it from there :-)

[17:00] <guifa> Are they compatible at all?  

[17:00] <jmerelo> guifa: just kidding (mini -> micro -> nano and so forth)

[17:01] <guifa> oh, I literally thought those were subset libraries I just hadn't heard of :-)

[17:01] <tobs> guifa: do you know about OSCAR (https://oscar.computeralgebra.de/)? If would be a terrific thing if we had something like that targeting Perl 6 instead of Julia as the interface language.

[17:01] <tobs> Given Inline:: modules exist, it might just be possible, but I didn't have time to play around with or understanding the Inline:: modules.

[17:05] <jmerelo> tobs: the thing is it would be nice to have a tool that generates a minimal NativeCall implementation from .h files or something like that... 

[17:06] <cpan-p6> New module released to CPAN! App::Game::Concentration (0.0.2) by 03JMERELO

[17:06] <jmerelo> tobs: I don't think you would even need those modules. Just wrap the library.

[17:07] <guifa> I haven't used OSCAR, but I'm not a huuuuuge math person admittedly (that's my dad's field, not much complex math in the medieval period for me ha)

[17:08] <tobs> jmerelo: true, writing code for them inline would not be required. What made me think about Inline::* is the term "representational polymorphism" that I heard flying around and that's supposedly used in those modules and would be required to bridge these systems properly.

[17:09] <tobs> But again, I don't know what I'm talking about

[17:09] <timotimo> jmerelo: gptrixie isn't good enough?

[17:10] <jmerelo> No idea that existed, timotimo

[17:10] *** evalable6 left
[17:11] *** evalable6 joined
[17:11] *** ChanServ sets mode: +v evalable6

[17:12] <timotimo> no idea?!

[17:12] <guifa> (my initial thought was "It'd be cool to say my $term = '2x² + 5x + 4'; $term *= 2; #4x² + 10x + 8; $term.solve( :x(1)); # 22" but then I figured it might be better to port some sort of existing CAS)

[17:12] <timotimo> damn, we've gotta do more loud declarations of cool things that exist

[17:12] <guifa> timotimo: isn't that the story of P6 though?

[17:14] *** ravenousmoose joined
[17:18] <jmerelo> guifa: I mean, there are _so_ many things...

[17:23] <ugexe> CAS is compare and swap :P

[17:25] <guifa> ugexe: CAS here is Computer Algebra System :-)

[17:26] <jmerelo> CAS has always been cellular automata simulator.

[17:27] * guifa thinks naming the module CAS::Maxima or CAS::Axiom might not be best 

[17:30] *** natrys joined
[17:31] *** ravenousmoose left
[17:52] *** rindolf left
[17:55] *** espadrine_ joined
[17:56] *** quipa_ left
[18:03] *** MidCheck joined
[18:12] *** guifa left
[18:21] *** zakharyas left
[18:25] *** vrurg joined
[18:25] *** veesh left
[18:26] *** rindolf joined
[18:28] *** ravenousmoose joined
[18:28] *** veesh joined
[18:29] *** natrys left
[18:34] *** natrys joined
[18:50] *** domidumont left
[18:52] *** jmerelo left
[18:52] <timotimo> i've done a lot of stuff with CAs, but i've never called a CA simulator a CAS

[19:06] *** leont joined
[19:06] <leont> Apparently, a «sub MAIN(|args) { ... }» will never match any arguments sent to that program

[19:07] <leont> Causing a usage message instead.

[19:07] <leont> I guess that is not on purpose, is it?

[19:09] <timotimo> probably not on purpose, no

[19:09] <timotimo> does *@bloop, *%bleep work?

[19:10] *** zakharyas joined
[19:10] <ugexe> $ perl6 -e 'sub MAIN(|c) { say c.perl }' 42

[19:10] <ugexe> \(IntStr.new(42, "42"))

[19:11] <ugexe> $ perl6 -e 'sub MAIN(|c) { say c.perl }' 42 --foo=42

[19:11] <ugexe> \(IntStr.new(42, "42"), "--foo=42")

[19:12] <ugexe> wrong order i suppose

[19:13] <leont> timotimo: yes it does

[19:13] *** antoniogamiz joined
[19:13] <leont> That's what I'm using now

[19:13] <timotimo> ugexe's code seems to suggest |foo also works

[19:13] <ugexe> $ perl6 -e 'sub MAIN(|c) { say c.perl }' --foo=42 42

[19:13] <ugexe> Usage:

[19:14] <leont> Yeah, I tried without a positional argument

[19:14] <leont> $ perl6 -e 'sub MAIN(|c) { say c.perl }' --foo=42

[19:14] <timotimo> that requires "named argument anywhere" maybe?

[19:15] <leont> timotimo: no, the named argument stops the argument parsing

[19:15] <leont> Erm, the non-named argument

[19:15] <leont> This probably means that Sub.cando doesn't do the right thing

[19:24] *** kaare_ left
[19:39] <antoniogamiz> anyone can help me with this error? https://travis-ci.com/antoniogamiz/doc/jobs/201235739

[19:40] <antoniogamiz> it fails with the whole set doc, but not in my local build (with a tiny set)

[19:40] <timotimo> potentially trouble with the pod syntax

[19:41] <antoniogamiz> oh I thought the error was about an await operation

[19:42] <timotimo> no, an operation that was awaited

[19:42] <timotimo> i.e. some task got started and threw an exception

[19:42] <antoniogamiz> though it still does not make sense because with less pod files it works

[19:42] <timotimo> the point where the result of the task was asked for is the place that is shown

[19:42] <antoniogamiz> ah ok right mmm

[19:42] <timotimo> if it works with less pod files, then the "less pod files" maybe doesn't include the file with the broken pod syntax?

[19:43] *** kensanata joined
[19:43] <antoniogamiz> mmmmmmmmm

[19:43] <antoniogamiz> I will check that, ty :)

[19:44] <timotimo> good luck!

[19:47] *** natrys left
[19:51] *** arkaitz joined
[19:58] *** ravenousmoose left
[20:01] *** zakharyas left
[20:02] <antoniogamiz> timotimo: do you know how I could get more info about the error?

[20:03] <timotimo> unfortunately it's not giving a lot of detail

[20:03] <timotimo> so you can barely even tell what it's evaling

[20:03] <timotimo> only that it's at least 114 lines long

[20:04] <antoniogamiz> mmmm 

[20:04] <timotimo> i mean, it's probable that it's from 01-debugging.pod6

[20:05] <antoniogamiz> I think the same but I have tried it locally and it works :(

[20:05] <timotimo> yeah

[20:05] <timotimo> you could try putting debug output into htmlify.p6 or where it's doing the actual eval

[20:06] *** yqt left
[20:06] <timotimo> so if an exception happens, it could output the source it's trying to compile

[20:06] <antoniogamiz> mmm good idea, ty :)

[20:06] <timotimo> ugliest hack possible, use &EVAL.wrap

[20:09] *** ufobat_ joined
[20:11] <antoniogamiz> definetely it has to do something with how travis works mm

[20:13] *** MidCheck left
[20:13] *** ufobat left
[20:16] <antoniogamiz> I still dont see the point of test all modules you use every time you use them

[20:18] <ugexe> because you want to be aware of any issues anyone installing your module might be encountering

[20:18] <ugexe> otherwise nothing is stopping you from not testing

[20:19] <ugexe> zef install . --deps-only --/test && zef install .

[20:20] <antoniogamiz> mmm I still think that is not worth the time 

[20:20] <antoniogamiz> what does that command do?

[20:21] <ugexe> what do you think it does having never seen it before?

[20:22] <antoniogamiz> I should have asked what --/test does, I suppose it passes the tests?

[20:23] <antoniogamiz> I just thought maybe it does something different, idk why have you passed then 

[20:23] <ugexe> it is like --no-test

[20:23] <antoniogamiz> ah right, now I understand sorry

[20:23] <antoniogamiz> ty for the info

[20:33] *** Manifest0 left
[20:35] *** antoniogamiz left
[20:39] *** Xliff left
[20:41] *** Manifest0 joined
[20:44] *** woolfy joined
[20:48] <leont> I think I found my issue

[20:49] <leont> has-unexpected-named-arguments shouldn't just return False when first named argument is slurpy, but also if it's a capture

[20:49] <leont> (Main.pm6's RUN-MAIN)

[20:51] <Geth> ¦ doc: lukasvalle++ created pull request #2817:  Add list method in Map documentation

[20:51] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2817

[21:08] *** ayerhart left
[21:09] *** SCHAPiE left
[21:10] *** Manifest0 left
[21:11] *** SCHAPiE joined
[21:12] *** espadrine_ left
[21:15] *** Manifest0 joined
[21:32] *** Manifest0 left
[21:33] *** woolfy left
[21:35] *** woolfy joined
[21:36] *** kensanata left
[21:37] *** Manifest0 joined
[21:39] *** lizmat joined
[21:47] *** pecastro left
[21:50] *** molaf joined
[21:56] *** Manifest0 left
[21:57] *** arkaitz left
[22:02] *** Manifest0 joined
[22:06] *** SCHAAP137 joined
[22:06] *** SCHAPiE left
[22:06] *** SCHAAP137 is now known as SCHAPiE

[22:09] *** ChoHag left
[22:21] *** rindolf left
[22:23] *** sauvin left
[22:24] *** wamba left
[22:25] *** sauvin joined
[22:33] *** molaf left
[22:35] *** Cabanossi left
[22:39] *** Cabanossi joined
[22:57] *** vrurg left
[22:57] *** gfldex left
[22:58] *** gfldex joined
[23:24] *** MilkmanDan left
[23:25] *** MilkmanDan joined
[23:37] *** netrino_ left
[23:44] *** khisanth_ left
