[00:07] *** vrurg joined
[00:31] *** aindilis left
[00:33] *** noisegul joined
[00:37] *** noisegul left
[00:49] *** aindilis joined
[00:50] *** aborazmeh joined
[00:50] *** aborazmeh left
[00:50] *** aborazmeh joined
[00:52] *** aborazmeh left
[01:08] *** Manifest0 left
[01:10] *** lucasb left
[01:16] *** Manifest0 joined
[01:19] *** Sgeo left
[01:20] *** Sgeo joined
[01:27] *** mowcat joined
[01:37] *** Manifest0 left
[01:40] *** Manifest0 joined
[01:48] *** wu_ joined
[01:50] *** sono__ joined
[01:51] *** zakharyas joined
[01:51] *** Black_Ribbon left
[01:55] *** wu_ left
[01:56] *** hythm joined
[01:58] *** squashable6 left
[01:59] *** squashable6 joined
[01:59] *** ChanServ sets mode: +v squashable6

[02:30] *** eseyman left
[02:31] *** eseyman joined
[02:38] *** mowcat left
[03:14] *** hythm left
[03:28] *** SCHAPiE left
[03:35] *** matiasli1a joined
[03:36] *** SCHAPiE joined
[03:36] *** noisegul joined
[03:41] *** noisegul left
[03:43] *** webstrand left
[03:44] *** webstrand joined
[03:53] *** webstrand left
[03:56] *** oodani left
[03:56] *** oodani joined
[03:57] *** webstrand joined
[04:04] *** matiasli1a left
[04:08] *** matiasli1a joined
[04:09] *** matiasli1a left
[04:10] *** matiaslina joined
[04:15] *** kaare__ left
[04:15] *** kaare__ joined
[04:19] *** holyghost left
[04:19] *** holyghost_ is now known as holyghost

[04:34] *** AlexDaniel left
[04:38] *** noisegul joined
[04:42] *** noisegul left
[04:43] *** curan joined
[04:50] *** abraxxa joined
[04:50] *** abraxxa left
[04:50] *** abraxxa joined
[04:54] *** nadim joined
[04:55] *** abraxxa left
[04:55] *** abraxxa joined
[05:00] *** nadim left
[05:12] *** sauvin joined
[05:30] *** cgfbee left
[05:30] *** nadim joined
[05:31] *** abraxxa left
[05:31] *** abraxxa joined
[05:32] *** abraxxa left
[05:35] *** nadim left
[05:35] *** iviv left
[05:36] *** iviv joined
[05:36] *** peteretep left
[05:36] *** spycrab0 left
[05:36] *** scott left
[05:36] *** reu left
[05:37] *** peteretep joined
[05:37] *** scott joined
[05:38] *** spycrab0 joined
[05:39] *** reu joined
[05:42] *** nadim joined
[05:43] *** cgfbee joined
[05:47] *** nadim left
[05:49] *** squashable6 left
[05:51] *** squashable6 joined
[06:17] *** antoniogamiz joined
[06:30] *** patrickb joined
[06:33] *** Summertime left
[06:34] *** Summertime joined
[06:39] *** rindolf joined
[06:50] *** ZzZombo_ joined
[06:52] *** ZzZombo left
[06:52] *** ZzZombo_ is now known as ZzZombo

[07:01] *** goon_ left
[07:09] *** leont joined
[07:12] *** adu left
[07:13] *** adu joined
[07:16] <holyghost> I have bettered Game::Bayes but it seems it still has some serious bugs

[07:16] <antoniogamiz> while{ {once {some code}} } and while { some code } has any differences?

[07:16] <holyghost> I'm writing a game of risk with risk-o-matic, which takes time

[07:17] <antoniogamiz> (notice the extra curly braces surrounding the once block)

[07:17] <antoniogamiz> holyghost++

[07:18] <antoniogamiz> holyghost: what's the theme of the game?

[07:19] *** domidumont joined
[07:19] <holyghost> a game of risk, the tabletop game

[07:19] <holyghost> in a terminal

[07:20] <holyghost> without ncurses TBH

[07:23] *** noisegul joined
[07:24] <antoniogamiz> aahhh I had understood it was a game where you must take risks haha

[07:24] <antoniogamiz> risk is a very good game 

[07:24] <antoniogamiz> ncurses?

[07:25] <holyghost> ncurses/curses, the terminal window and widget set

[07:25] <holyghost> risk is perfect for risk functions, although this sounds odd

[07:26] <antoniogamiz> yep haha

[07:26] <holyghost> It's a test for Game::Bayes

[07:26] <holyghost> from rogue-o-matic => risk-o-matic

[07:26] <holyghost> where rogue is a precessor of nethack

[07:26] <holyghost> http://nethack.org

[07:27] *** crouton joined
[07:27] <antoniogamiz> uoh a little CSS could be used

[07:27] <holyghost> It's an ancient game, I know :-)

[07:31] <antoniogamiz> » is that a regex operator?

[07:32] *** cpan-p6 left
[07:33] *** dakkar joined
[07:34] *** sono__ left
[07:34] *** Black_Ribbon joined
[07:35] *** cpan-p6 joined
[07:35] *** cpan-p6 left
[07:35] *** cpan-p6 joined
[07:40] *** rindolf left
[07:42] <moritz> » can be used in a regex, and means "right word boundary"

[07:42] <moritz> outside of regexes, it can be used to apply an operation to a list of items

[07:43] <moritz> m: say <a b c>».uc.join(', ')

[07:43] <camelia> rakudo-moar f05b1b080: OUTPUT: «A, B, C␤»

[07:43] <antoniogamiz> thanks moritz! I should look up in the docs before asking this kind of questions

[07:44] *** abraxxa joined
[07:46] *** adu left
[07:46] <antoniogamiz> moritz: what should be the proper subkinds of a routine?

[07:47] <antoniogamiz> (I know you did this a long time ago, sorry for asking so many questions)

[07:48] <moritz> antoniogamiz: if a routine exists as just one variant (sub, method, regex), then that

[07:48] <moritz> otherwise, "routine"

[07:48] <moritz> iirc

[07:48] *** rindolf joined
[07:50] <antoniogamiz> mmm and are you sure is done like in find-definitions?

[07:50] <antoniogamiz> the last part I mean

[07:51] <antoniogamiz> like that in*

[07:51] *** aindilis left
[07:52] <moritz> no, not sure

[07:52] <antoniogamiz> For instance, in Any.pm6 there's only one routine defined as multi sub and multi method, and it gets the subkind "sub" instead of routine

[07:52] *** aindilis joined
[08:04] *** veesh left
[08:10] *** veesh joined
[08:11] *** zakharyas left
[08:21] <moritz> hm

[08:26] *** dolmen joined
[08:29] *** crouton left
[08:30] *** pecastro joined
[08:30] *** grumble left
[08:31] <moritz> I'd still say that "routine" would be correct

[08:35] *** grumble joined
[08:40] <antoniogamiz> mmm ok :)

[08:40] *** antoniogamiz left
[08:42] * lizmat clickbaits https://p6weekly.wordpress.com/2019/06/17/2019-24-sequences-of-int/

[08:48] *** Cabanossi left
[08:49] *** Cabanossi joined
[08:57] *** goon_ joined
[09:04] *** squashable6 left
[09:08] *** squashable6 joined
[09:08] *** ChanServ sets mode: +v squashable6

[09:19] *** nadim_ joined
[09:28] *** nadim_ left
[09:51] *** pecastro_ joined
[09:54] *** pecastro left
[09:58] *** pecastro joined
[10:01] *** pecastro_ left
[10:07] *** ChoHag left
[10:21] *** domidumont left
[10:28] *** pmurias joined
[10:28] <pmurias> wheren doing a use chalk:from<node.js> from where should the node.js modules be looked up?

[10:41] *** pmurias left
[10:52] <moritz> pmurias from node? I don't quite understand your question. Do you mean from which paths?

[10:53] *** pmurias joined
[10:55] *** dolmen left
[11:39] *** pmurias left
[11:39] *** Black_Ribbon left
[11:41] *** wamiks left
[11:43] *** dolmen joined
[11:51] *** vrurg left
[12:05] *** ravenousmoose_ joined
[12:05] *** vrurg joined
[12:07] *** ravenousmoose left
[12:14] *** vrurg_ joined
[12:15] *** vrurg left
[12:15] *** vrurg_ is now known as vrurg

[12:17] *** domidumont joined
[12:20] *** ThePacketBender joined
[12:25] *** ilogger2 joined
[12:25] *** ChanServ sets mode: +v ilogger2

[12:28] <SmokeMachine> should it do the same as it would `require("chalk")` on node.js?

[12:28] <yoleaux> 16 Jun 2019 14:45Z <vrurg> SmokeMachine: Sorry, I saw your replies but was preparing/commuting and now attending the conference. Will asnwer ASAP.

[12:28] <lizmat> weekly: http://blogs.perl.org/users/damian_conway/2019/06/coding-with-an-even-fuller-toolset.html

[12:28] <notable6> lizmat, Noted!

[12:31] <vrurg> SmokeMachine: I still don't have time to concentrate on the right answer. But I thought that relationship columns are kind of lazy attributes and are fetched upon request.

[12:39] *** vrurg joined
[12:39] *** vrurg left
[12:49] *** vrurg joined
[13:03] *** lucasb joined
[13:07] *** k-man joined
[13:08] <lucs> Is there a more idiomatic way to say this?:  $s.defined && $s.length > 0

[13:12] <lucs> (er, 'chars', not 'length')

[13:14] <lizmat> .defined && .length > 0 with $s

[13:14] <lizmat> actually

[13:14] <lizmat> .length with $s

[13:14] <lizmat> the "with" takes care of the defined check

[13:14] <lucs> Aha, cool :)

[13:14] <lucs> Th

[13:14] <lizmat> .chars > 0 with $s

[13:14] <yoleaux> $ 0 > h i s t w

[13:15] <lucs> Thanks

[13:16] *** nadim_ joined
[13:16] *** pmurias joined
[13:28] <ugexe> if $x.?chars { }

[13:29] <ugexe> i guess that doesn't work for some things like native typed vars

[13:29] <ugexe> m: my int $x; say $x.chars

[13:29] <camelia> rakudo-moar f05b1b080: OUTPUT: «1␤»

[13:30] <ugexe> although maybe it does work for you since its defined either way

[13:33] <pmurias> moritz: yes

[13:34] <moritz> pmurias: can't that be configured through environment variables?

[13:34] <moritz> or maybe a "use lib"-like mechanism?

[13:34] <pmurias> SmokeMachine: you mean it should look it up relative to the Perl 6 file which has the use statement

[13:35] <pmurias> moritz: use lib is trash because it screws up precompilation

[13:35] <ugexe> i assumed it would go to $HOME/.npm-global/lib/node_modules

[13:36] <ugexe> maybe it is possible to avoid recompilation for those cases. like instead of "if any repo id changes re-precompile" do "if any PERL6 repo id changes re-precompile"

[13:36] <ugexe> nine: ^ ?

[13:38] <pmurias> ugexe: is installing modules globally for use by rakudo.js something that we want to do/encourage?

[13:38] <ugexe> pmurias: it would match what we do for Inline::Perl5 at least

[13:38] <ugexe> and is what I would expect from inline Perl5 code (not sure what I expect from js)

[13:39] <pmurias> ugexe: the issue with matching Inline::Perl5 is that in node.js they handle dependencies a lot differently

[13:40] <pmurias> they tend to be installed per project (in a node_modules that's resolved relatively to which file the require is in)

[13:41] *** antoniogamiz joined
[13:41] <ugexe> per-project dependencies used via `use lib "..."` though

[13:41] <ugexe> er, exposed rather

[13:43] <SmokeMachine> pmurias: yes...

[13:44] <ugexe> for instance: use lib "js#./

[13:44] <ugexe> if re-precompilation is the only thing stopping you from that then maybe we should see if re-precompilation is required when non-perl6 repos change

[13:46] <pmurias> use lib "js#./" ~ $?FILE.IO.parent.add("node_modules");

[13:46] <pmurias> use lib "js#" ~ $?FILE.IO.parent.add("node_modules"); actually

[13:46] <ugexe> yea, although better is

[13:47] <ugexe> use lib "js#" ~ $*PROGRAM.parent.add("node_modules").absolute;

[13:48] <lucs> ugexe: Thanks (re. $x.?chars)

[13:48] *** farcas82regreg joined
[13:48] *** dakkar joined
[13:49] <pmurias> ugexe: isn't re-precompilation required if the Perl 6 modules that where precompiled used a js dependency at compile time

[13:51] <ugexe> pmurias: yeah i suppose it would

[13:52] *** vrurg left
[13:54] <antoniogamiz> what's the best form of completely flatening an array with sub arrays?

[13:56] <antoniogamiz> I have seen the flatenning semicolons in the doc but I think should be another way

[13:56] <pmurias> ugexe: also I think we should aim at being able to specify node.js depedencies in META6.json

[13:56] <pmurias> do we have a spec for that somewhere?

[13:57] <pmurias> design.perl6.org/S22.html#META6.json is broken

[13:57] <ugexe> pmurias: no, but we seem to be moving towards just defining them in depends like everything else: "foo:from<node.js>"

[14:00] <pmurias> ugexe: I meant a spec for META6.json 

[14:00] <ugexe> yes, that is what i mean

[14:00] <ugexe> same as Perl6 modules

[14:00] <ugexe> except for Perl6 modules the :from<Perl6> is implied

[14:01] <ugexe> depends contains "use" strings

[14:02] <ugexe> antoniogamiz: if you know the depth of your data structure you can use tree. here is an example that flattens up to 3 levels: @foo.tree(*.Slip, *.Slip, *.Slip)

[14:03] <pmurias> https://github.com/perl6/specs/blob/master/S22-package-format.pod - this is the META6.json specification?

[14:04] *** skids joined
[14:04] <ugexe> the META6.json specULATIONs yeah

[14:04] <ugexe> i.e. there is obviously no https://github.com/perl6/specs/blob/master/S22-package-format.pod#distributionlocaltar

[14:05] <pmurias> so we have no META6.json spec? :(

[14:05] <antoniogamiz> ugexe: thank you

[14:06] <ugexe> the META6.json isn't being designed waterfall style. its being handled in a more... agile manner

[14:07] <pmurias> that's terrible :(

[14:07] <ugexe> that is what happens when you release based on a specific date instead of when something is ready

[14:08] <pmurias> (the not having a specification part, not the not waterfall part)

[14:11] <pmurias> is anything other from tuits stopping us from having a link to a description of what META6.json actually does in the docs?

[14:12] <ugexe> what it does depends on what is consuming it

[14:12] <ugexe> rakudo doesn't care about depends field period

[14:14] <ugexe> rakudo ultimately cares about name, version, api, auth, provides. thats it

[14:14] <ugexe> resources

[14:15] <ugexe> those things *are* documented

[14:15] <pmurias> so the current situation is that module writers should cargo-cult a META6.json without being able to look up what the fields are supposed to be?

[14:15] <pmurias> http://doc.perl6.org/language/modules - that's our module creations docs

[14:16] <pmurias> https://docs.npmjs.com/files/package.json - example from node.js how things should be documented

[14:17] <ugexe> if you want to use fields that we have not fully thought out or implemented, then yes you will need to cargo cult. if you are using fields that are fully thought out (and hence likely documentet) then no

[14:18] <nine> ugexe: a repo has full control over its own id. So if a repo does not contain anything that should affect precompilation, the id may just stay constant

[14:18] <ugexe> a repo can affect the id of the repo prior

[14:19] <ugexe> https://github.com/rakudo/rakudo/blob/f05b1b08035df6f15ebff5cca9847088752d41b5/src/core/CompUnit/Repository/FileSystem.pm6#L43

[14:20] <pmurias> ugexe: if we don't have META6.json documentation nothing is documented

[14:20] <kawaii> timotimo: something reminded me, I never got a chance to try your patch

[14:20] <kawaii> timotimo: can you link me the gist again please Sir? :)

[14:21] <ugexe> pmurias: but it is documented on the page you linked

[14:21] <ugexe> maybe not in the format you like, but it describes the fields that rakudo understands

[14:21] <pmurias> ugexe: you mean in http://doc.perl6.org/language/modules?

[14:22] <ugexe> yes

[14:25] <nadim_> afternoon, how do I get a method (taking args) reference and call it?  is it documented with a simple example somewhere?

[14:25] <ugexe> pmurias: also im not familiar enough with js to say for sure, but is that spec specific to npm? if i create an alternative installer (yarn, etc) and add custom fields is that part of the spec too?

[14:26] <moritz> m: my $method = 4.find_method('sqrt'); say $method(9)

[14:26] <camelia> rakudo-moar f05b1b080: OUTPUT: «No such method 'find_method' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[14:26] <moritz> m: my $method = 4.^find_method('sqrt'); say $method(9)

[14:26] <camelia> rakudo-moar f05b1b080: OUTPUT: «3␤»

[14:26] <moritz> nadim_: ^^

[14:26] <nadim_> moritz++

[14:26] <moritz> note that the method is not curried (so not tied to the invocant)

[14:27] <moritz> m: my $method = 4.^find_method('sqrt').assuming(4); say $method()

[14:27] <camelia> rakudo-moar f05b1b080: OUTPUT: «2␤»

[14:28] <nadim_> so it needs to be called with an object, right? I need to decided between two methods when I am inside a method (to avoid code duplication)

[14:29] <nadim_> moritz: did you reallly mean _not_ tied to the invoquant? 

[14:29] <moritz> yes

[14:30] <moritz> you can see that I call $method(9), where 9 is the invocant

[14:30] <moritz> compared by pthon's method = obj.methodname; method()

[14:30] <moritz> where method contains a reference to obj right away

[14:30] <nadim_> but the example you called gave 2 as an answer when it was called without argument

[14:30] <moritz> that's because of the extra .assuming(4) step

[14:31] <moritz> which does the currying

[14:31] <nadim_> ok

[14:31] *** vrurg joined
[14:31] <moritz> sorry, too much information at once is not always helpful :D

[14:32] <nadim_> not too much, it was two examples and I thought the first comment was aout the second example :)

[14:32] <nadim_> moritz: what's the difference betwen ^find and ^lookup?

[14:32] <pmurias> ugexe: what's stopping taking an already implemented by zef subset of the META6.json speculations and using it as description of how things are?

[14:35] <moritz> nadim_: I don't remember the specifics; I think it has something to do with roles, where .^lookup returns something subtly different or so

[14:35] <moritz> I'm sure jnthn++ knows

[14:36] <moritz> https://docs.perl6.org/routine/lookup "Note that lookup is supposed to be used for introspection, if you're after something which can be invoked you probably want to use find_method instead."

[14:36] <moritz> that's good enough for me right now

[14:37] *** vrurg_ joined
[14:37] *** vrurg left
[14:37] *** vrurg_ is now known as vrurg

[14:37] <nadim_> the only answer, with details, I found was this https://stackoverflow.com/questions/48080366/how-to-pass-a-class-method-as-argument-to-another-method-of-the-class-in-perl-6, an example in the docs would be nice

[14:39] <tobs> m: my $meth = 4.^find_method('sqrt'); say 25.$meth  # do you take sugar?

[14:39] <camelia> rakudo-moar f05b1b080: OUTPUT: «5␤»

[14:41] *** vrurg_ joined
[14:42] *** vrurg left
[14:42] *** vrurg_ is now known as vrurg

[14:42] <moritz> .oO( $meth heads all around :D )

[14:42] <pmurias> nadim_: I looked at lookup source

[14:43] <pmurias> nadim_: and it behaves differently with submethods (it finds submethods from parent classes)

[14:44] <moritz> m: role R[A] {method x() { }}; say R.^lookup('x'); say R.^find_method('x')

[14:44] <camelia> rakudo-moar f05b1b080: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'A' in parameter declaration.␤at <tmp>:1␤------> 3role R[A7⏏5] {method x() { }}; say R.^lookup('x'); ␤»

[14:45] <moritz> m: role R[$A] {method x() { }}; say R.^lookup('x'); say R.^find_method('x')

[14:45] <camelia> rakudo-moar f05b1b080: OUTPUT: «x␤No appropriate parametric role variant available for 'R'␤  in block <unit> at <tmp> line 1␤␤»

[14:45] <moritz> that's the difference I was thinking of

[14:45] <pmurias> nadim_: and when there is a FALLBACK lookup finds nothings while find_method returns the fallback

[14:46] <nadim_> pmurias++

[14:47] <pmurias> nadim_: honestly the submethod difference looks like just a bug

[14:48] *** AlexDaniel joined
[14:48] *** ravenousmoose_ joined
[14:48] <pmurias> nine: is there a way from CompUnit::Repository to load stuff relative to the file where the 'use statement' is in?

[14:53] <nine> pmurias: now, that just doesn't sound right

[14:59] <pmurias> nine: I thinking about replicating the node.js module finding semantics: https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders

[15:00] <pmurias> nine: but this seems like mixing up the Perl 6 and node.js ways of doing stuff together in a horrible manner

[15:02] <daxim> ᴞ  # help, I've fallen and can't get up

[15:02] <pmurias> btw what's the state of the Perl 6 docs google summer of code projects

[15:03] <pmurias> afk & # will backlock

[15:04] *** ravenousmoose_ left
[15:06] <nine> pmurias: I think it'd be ok for us to require the user to add the repos with -I or use lib.

[15:10] *** pmurias left
[15:30] *** vrurg left
[15:31] *** vrurg joined
[15:32] <timotimo> kawaii: https://gist.github.com/timo/b5fedaf5bea40e8d97ebf257addb25d0

[15:32] <kawaii> ah! thank you!

[15:35] *** debprav joined
[15:39] *** [particle]1 joined
[15:40] *** spycrab0 joined
[15:40] *** scott joined
[15:42] *** reu joined
[15:45] *** JosefZetaOsiris joined
[15:51] *** dha joined
[16:02] *** vrurg left
[16:04] *** patrickb joined
[16:05] *** dha left
[16:07] *** debprav left
[16:10] <lizmat> weekly: https://www.youtube.com/channel/UC7y4qaRSb5w2O8cCHOsKZDw

[16:10] <notable6> lizmat, Noted!

[16:10] <lizmat> Video of TCPiP

[16:16] *** molaf joined
[16:16] <ugexe> pmurias: we could, i guess. but there are still details that exist now but probably shouldnt

[16:17] <ugexe> like depends can have either a module name or a distribution name. that exists right now, but maybe it shouldnt

[16:17] <ugexe> if we document it then its even harder to fix/change later

[16:18] <ugexe> if someone wanted to write a document for it i could review it and say what should be left out. 

[16:19] <ugexe> however i am mostly incapable of writing that document myself because i get bogged down in the endless details i have in my head

[16:22] <El_Che> lo

[16:32] <El_Che> lizmat: are you in the US?

[16:35] *** dakkar left
[16:36] <Geth> ¦ doc: 7ad9cd108f | (Moritz Lenz)++ | doc/Type/Metamodel/MethodContainer.pod6

[16:36] <Geth> ¦ doc: Document difference between find_method and lookup

[16:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7ad9cd108f

[16:36] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::MethodContainer

[16:37] *** molaf left
[16:48] <lizmat> El_Che: no

[16:48] * lizmat will not visit the US until the orange blob is gone, and possibly not after that either

[16:52] <El_Che> yeah, I have a similar feeling

[16:54] *** ChoHag joined
[16:59] *** vrurg joined
[17:02] <nadim_> lizmat++

[17:04] <nadim_> timotimo: (other are welcome with an opinion too of course) I implemented  coloring per level in DDT, it's a different way to present data, I put some examples here http://distracted-gates-4eb889.netlify.com/

[17:04] <nadim_> It's a larger patch, not sure I include it or not

[17:07] *** alexghacker joined
[17:08] *** antoniogamiz left
[17:09] <timotimo> nadim_: i would prefer more muted colors, but it does seem helpful for very big things

[17:11] *** alexghacker left
[17:12] <nadim_> you get to chose your color of course :)

[17:13] <timotimo> i assumed so d)

[17:13] <timotimo> :)

[17:13] <nadim_> rendering a christmas tree is of no help but you can control what gets colored or not, in the example it is by level but you can chose to highlight classes or specific instances

[17:13] <timotimo> that's how i interpreted the later examples

[17:15] <nadim_> but  thiis mode is for rendering with :!color, as you can see in the last examples the color rendering stops the background coloring, because it makes little sense

[17:15] <timotimo> yeah, that could turn out pretty unreadable

[17:17] <nadim_> I actually wrote this for very large rendering where only a few pieces are important

[17:18] <timotimo> ah, yeah, i can see how that would be useful

[17:19] <timotimo> i wonder how complicated it is to write something in js that when scrolling downwards will pin the pieces of the tree that make up the path towards the root to the top

[17:19] <timotimo> inspired by https://twitter.com/jckarter/status/1140131108564062213 and the "frame editor" further below in that thread

[17:21] *** guifa joined
[17:23] <nadim_> timotimo: that's cool. the latest DDT has a flatten example where the path is added and the elements are rendered separated with tabs so you can use a bash pipeline on the data structure

[17:26] <timotimo> yes, i remember!

[17:30] <nadim_> timotimo: pinning up the part of the tree could be made quite easy if the path is put in the html for each entry so you can display it or have a have a popup display it

[17:35] <nadim_> if you need it, and  write the part that display the path in the web page (I suck at this stuff), I'll add the path to the generated html

[17:37] <timotimo> i should concentrate on other stuff at the moment :(

[17:38] *** lgtaube joined
[17:38] <nadim_> sure :)  just say if you need it and help with it

[17:39] *** vrurg left
[17:39] <timotimo> thanks :)

[17:39] <nadim_> thank you for the feedback

[17:41] <timotimo> NP

[17:44] *** vrurg joined
[17:46] *** alexghacker joined
[17:47] *** vrurg_ joined
[17:48] *** vrurg left
[17:48] *** vrurg_ is now known as vrurg

[17:50] *** alexghacker left
[17:53] <guifa> Well that was a ridiculously easy code golf 

[17:53] <guifa> https://codegolf.stackexchange.com/a/187050/30284

[17:54] *** Cabanossi joined
[17:57] *** molaf joined
[18:02] *** Exodist joined
[18:16] *** vrurg left
[18:22] *** vrurg joined
[18:26] *** SCHAPiE joined
[18:31] *** dha joined
[18:37] *** dylanwh left
[18:37] *** khisanth_ joined
[18:39] *** mowcat joined
[18:43] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue require with non-sigiled arguments https://github.com/perl6/problem-solving/issues/43

[18:49] *** john_parr joined
[18:58] *** molaf left
[19:39] *** vrurg left
[19:43] <AlexDaniel> guifa: I'm not satisfied with its performance though :)

[19:43] <AlexDaniel> guifa: .comb.unique.permutations in numeric context shouldn't even generate any elements, I think

[19:44] <Elronnd> is there a way to block until *one* item is available from a supply?

[19:44] <AlexDaniel> and there is a mathy way to make the answer right, I think

[19:45] <AlexDaniel> Elronnd: not sure, but what about .Channel.receive ?

[19:45] *** vrurg joined
[19:45] <lizmat> Elronnd: make sure the first item on a supply is a Promise, and await that ?

[19:46] <Elronnd> AlexDaniel: I think that would work

[19:46] <AlexDaniel> Elronnd: also maybe `react whenever $supply { …; done }`

[19:56] *** pmurias joined
[20:04] *** adu joined
[20:09] <guifa> AlexDaniel: I don’t follow. The numeric context applies to the result of the *.comb.etc.  It gets parsed as (+) (*.comb.etc) which is similar to +@foo.list-ops, where @foo.list-ops is evaluted first, and then numified:

[20:09] <guifa> p6: my @a = <a b b>; say +@a.permutations

[20:09] <camelia> rakudo-moar f05b1b080: OUTPUT: «6␤»

[20:09] <AlexDaniel> guifa: yes but for permutations».join.unique you'll actually need to generate all permutations and keep them in memory

[20:09] <timotimo> Elronnd: i think you can $supply.head actually?

[20:10] <guifa> AlexDaniel: sure, but it’s code golf.  Who cares about performance? :-)

[20:10] <AlexDaniel> guifa: yes :)

[20:10] <AlexDaniel> though I'd also like to see a golfed version that actually works for bigger strings :)

[20:11] <guifa> There’s a formula, which is probably the best next option.  I tried golfing it to P6 but it was longer

[20:11] <AlexDaniel> “permutations” is a really long word, however, maybe avoiding the builtin is a way to go…

[20:12] <AlexDaniel> guifa: speaking of code golf, have you tried https://code-golf.io/ ?

[20:12] <AlexDaniel> guifa: also there's https://github.com/AlexDaniel/raku-golf-cheatsheet

[20:16] <guifa> Actually I just realized that .Set can be shorter than .unique and accomplish the same.  

[20:18] <timotimo> true. if you just need the number, that's the same. otherwise you'd need .Set.keys to get the same thing

[20:22] <guifa> I just need the number so ha.  

[20:24] <timotimo> m: say +(1, 2, 3,4) .perl

[20:24] <camelia> rakudo-moar f05b1b080: OUTPUT: «4␤»

[20:24] <timotimo> m: say +(1, 2, 3,4).perl

[20:24] <camelia> rakudo-moar f05b1b080: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5(1, 2, 3, 4)' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[20:24] <timotimo> ^- cool trick

[20:25] <guifa> Although does make me think, surely there’s quite a few common combinations of methods that could be optimized (like the .permutations.unique).  Would there be a way to potentially capture that and override with a more efficient method?

[20:26] <timotimo> hm. so it'd want to first build a Bag and treat things that are in there multiple times as the same value

[20:26] <timotimo> though .Bag doesn't allow the same parameters as .unique

[20:31] <timotimo> surely there's some smart algorithm for this case

[20:32] <tobs> m: ('A' .. 'z').permutations.elems.say

[20:32] <camelia> rakudo-moar f05b1b080: OUTPUT: «Cowardly refusing to permutate more than 20 elements, tried 58␤  in block <unit> at <tmp> line 1␤␤»

[20:33] <guifa> Ha!

[20:33] <tobs> so this could use a PredictiveIterator or how it's called

[20:33] <tobs> but .unique…

[20:33] <timotimo> PredictiveIterator is for when .elems can be done very easily, yeah

[20:34] <tobs> sounds like a fun project going through the builtins and spotting predictable iterators

[20:35] *** skids left
[20:37] <guifa> It feels like there ought to be some way to let .permutations be both lazy and hoarder-less, and pass its values one by one to unique, but not needing to store them.  Kinda…sounds like a channel lol.  And yet I can’t think how that would work in practice

[20:37] <tobs> huh, that coward error is in the CORE.setting

[20:38] <timotimo> unique will still need to store stuff

[20:38] <timotimo> worst case, the exact same amount that .permutations.eager would

[20:47] <lizmat> m: dd +<a b c b a>.Set   # guifa

[20:47] <camelia> rakudo-moar f05b1b080: OUTPUT: «3␤»

[20:47] <guifa> @lizmat that’s what I’m using now :-)

[20:49] *** dylanwh joined
[20:50] <guifa> I think the issue is that .permutations at some point must store all of it in memory at once.  But if we know we’re going to eventually grep/unique/whatever it (and permutations can be deterministically generated, e.g., given fully predictable determinative), it seems silly to generate and store all of them in memory.  A lazy list could prevent needing to get all of the permutations until used, but wouldn’t get rid of the memory issue. 

[20:50] <guifa> (not that this is unique to P6 at all)

[20:58] <pmurias> do we have something like Carton for Perl 6?

[20:59] *** vrurg left
[20:59] <pmurias> nine: I guess -I will have to do

[20:59] *** vrurg joined
[20:59] <pmurias> nine: I don't feel like recommending 'use lib' as it seems to be very harmful garbage

[21:00] *** cpan-p6 joined
[21:00] *** cpan-p6 left
[21:00] *** cpan-p6 joined
[21:01] <pmurias> nine: as it both kill precompilation and takes paths relative to the current working directory by default

[21:03] *** lucasb left
[21:07] <tobs> guifa: the permutations are lazily produced already and apparently the iterator is even predictive already. It's just that there is a `die` blocking you from passing arguments which are too large for a certain native int counter used in the algorithm.

[21:14] <MasterDuke> lizmat: still around?

[21:24] *** vrurg left
[21:35] *** vrurg joined
[21:37] *** farcas82regreg left
[21:40] *** vrurg left
[21:41] *** dha left
[21:41] *** sno joined
[21:45] <lizmat> MasterDuke: not really

[21:46] <MasterDuke> heh. then i'll ping later

[21:48] *** vrurg joined
[21:49] *** vrurg left
[22:11] *** pmurias left
[22:19] *** ChoppedBacon joined
[22:20] *** Black_Ribbon joined
[22:30] *** vrurg joined
[22:44] *** mowcat left
[23:28] *** patrickb left
