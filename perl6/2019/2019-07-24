[00:04] *** rindolf left
[00:07] *** sena_kun left
[00:11] *** lucasb left
[00:18] *** __jrjsmrtn__ left
[00:18] *** _jrjsmrtn joined
[00:26] *** natrys left
[00:29] *** pamplemousse left
[00:33] *** cpan-p6 left
[00:33] *** cpan-p6 joined
[00:33] *** cpan-p6 left
[00:33] *** cpan-p6 joined
[00:43] <gdonald> https://pastebin.com/zd30xK5v is "bar" available inside $b somewhere?

[00:44] <timotimo> m: my Block $b = -> "bar" { say "baz" }; say $b.signature.parameters[0]

[00:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'parameters' for invocant of type 'Signature'␤  in block <unit> at <tmp> line 1␤␤»

[00:45] <timotimo> m: my Block $b = -> "bar" { say "baz" }; say $b.signature.params[0]

[00:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «"bar"␤»

[00:45] <timotimo> m: my Block $b = -> "bar" { say "baz" }; say $b.signature.params[0].perl

[00:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «"bar"␤»

[00:45] <timotimo> m: my Block $b = -> "bar" { say "baz" }; say $b.signature.params[0].^name

[00:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Parameter␤»

[00:45] <timotimo> m: my Block $b = -> "bar" { say "baz" }; say $b.signature.params[0].^methods

[00:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside The 'ForeignCode' class is a Rakudo-specific␤implementation detail and has no serviceable parts inside The 'ForeignCode' class is a Rakudo-spec…»

[00:45] <timotimo> haha

[00:45] <timotimo> m: my Block $b = -> "bar" { say "baz" }; .name.say for $b.signature.params[0].^methods

[00:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤<anon>␤BUILD␤name␤usage-name␤sigil␤twigil␤modifier␤constraint_list␤constraints␤type␤coerce_type␤named_names␤named␤positional␤slurpy␤optional␤raw␤…»

[00:46] <timotimo> m: my Block $b = -> "bar" { say "baz" }; .name.say for $b.signature.params[0].constraint_list[0]

[00:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'name' for invocant of type 'Str'. Did you mean any of these?␤    none␤    note␤    take␤␤  in block <unit> at <tmp> line 1␤␤»

[00:46] <timotimo> er

[00:46] <timotimo> m: my Block $b = -> "bar" { say "baz" }; .perl.say for $b.signature.params[0].constraint_list[0]

[00:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «"bar"␤»

[00:46] <timotimo> there you go, this gives you the "bar" you're looking for

[00:48] <timotimo> gdonald: ^

[00:49] <gdonald> thank you

[00:53] <timotimo> YW

[00:55] *** aborazmeh joined
[00:55] *** aborazmeh left
[00:55] *** aborazmeh joined
[01:10] <mst> where would I read for a full explanation of how the undef+Failure stuff works

[01:11] <timotimo> i wonder if we have an advent calendar post that goes into every detail

[01:11] <timotimo> other than that my guess is as good as yours as to where to find it

[01:11] <mst> heh, fair

[01:13] *** noisegul_ joined
[01:16] *** noisegul left
[01:23] *** Actualeyes joined
[01:25] *** Actualeyes left
[01:47] *** noisegul_ is now known as noisegul

[01:58] *** molaf left
[02:07] *** vrurg left
[02:08] *** vrurg joined
[02:10] *** molaf joined
[02:17] *** vike left
[02:33] *** aborazmeh left
[02:37] *** pamplemousse joined
[02:48] *** vike joined
[02:53] *** redhands joined
[03:18] *** Poohmaan left
[03:18] *** Poohmaan joined
[03:18] *** klapperl left
[03:21] *** klapperl joined
[03:35] *** AlexDaniel joined
[03:44] *** pamplemousse left
[03:48] *** van_zerro joined
[03:49] *** abraxxa joined
[03:49] *** pamplemousse joined
[03:49] *** abraxxa left
[03:50] *** abraxxa joined
[03:50] *** kst joined
[03:50] *** Actualeyes joined
[03:54] *** abraxxa left
[03:55] *** abraxxa joined
[03:58] *** adu left
[03:59] *** adu joined
[04:05] *** kst left
[04:08] *** van_zerro left
[04:08] *** aeruder left
[04:09] *** aeruder_ joined
[04:18] *** [Sno] left
[04:24] *** molaf left
[04:49] <Xliff> Has there been any progress on this front? https://stackoverflow.com/questions/48772284/putting-function-pointers-in-a-perl6-nativecall-cstruct

[04:56] *** pamplemousse left
[05:13] <Xliff> Also, where is the discussion of 6.e occurring?

[05:19] *** silug left
[05:27] <tadzik> damn, Riga is stuffed :o

[05:30] *** silug joined
[05:35] *** sauvin joined
[05:36] *** abraxxa left
[05:47] <Xliff> Oh. THAT'S where everyone is.

[05:47] <Xliff> I wish I was there.

[05:48] <Xliff> Oh. Not til august.

[06:09] *** Sgeo left
[06:09] *** Sgeo joined
[06:24] <Xliff> How would I upgrade all installed packages with zef?

[06:25] <Xliff> "zef upgrade" just gives me usage info.

[06:37] *** abraxxa joined
[06:42] *** domidumont joined
[06:45] *** redhands left
[06:45] *** redhands joined
[06:49] *** domidumont left
[06:51] *** reach_satori left
[06:58] *** patrickb joined
[07:14] *** ChoHag left
[07:16] *** domidumont joined
[07:21] *** chloekek joined
[07:21] *** reach_satori joined
[07:24] *** nepugia joined
[07:38] <Xliff> Can anyone tell me what I'm doing wrong, here: https://gist.github.com/Xliff/f19d33100a8c34bd7136ed65f33d15dc

[07:44] *** antoniogamiz joined
[07:44] <antoniogamiz> o/

[07:45] *** dakkar joined
[07:50] *** Xliff_ joined
[07:50] *** Actualeyes left
[07:53] *** Xliff left
[07:58] *** ravenousmoose joined
[08:00] *** ravenousmoose_ left
[08:01] *** zakharyas joined
[08:09] *** redhands left
[08:17] <chloekek> p6: my @xs; push @xs, 1; say @xs

[08:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «[1]␤»

[08:20] <chloekek> Xliff_: are you actually receiving anything on the socket?

[08:24] *** nepugia left
[08:29] *** AlexDaniel left
[08:29] *** rindolf joined
[08:34] *** Xliff_ is now known as Xliff

[08:34] <Xliff> chloekek: I don't know.

[08:35] <Xliff> The problem is that the socket needs to get a response from the client before it will send anything. 

[08:35] <Xliff> That should be done with this line: 

[08:35] <Xliff> await $conn.print: to-json(%handshake-obj, :!pretty);

[08:37] <chloekek> That line does finish execution.

[08:37] <chloekek> You could add .say to the body of the first whatever block and see if you receive anything.

[08:37] <Xliff> Thanks.

[08:38] *** Itaipu_ left
[08:38] *** Itaipu joined
[08:39] <Xliff> Nope. Getting nothing from the server.

[08:40] <chloekek> Then that's why it reaches the timeout. :')

[08:40] *** Itaipu_ joined
[08:42] *** Itaipu left
[08:50] <chloekek> Maybe you have to connect first and log afterwards.

[08:51] <antoniogamiz> mmmm how can avoid to capture the t here => rule def1 {^\s*(T|t)'he' <name> <subkind>\s*$}

[08:52] <chloekek> antoniogamiz: To avoid capture use [] instead of ()

[08:52] <antoniogamiz> oh, thanks :D

[08:53] <chloekek> p6: say 'The' ~~ / (T|t)he /;

[08:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢The｣␤ 0 => ｢T｣␤»

[08:53] <chloekek> p6: say 'The' ~~ / [T|t]he /;

[08:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢The｣␤»

[08:53] <chloekek> p6: say 'The' ~~ / <[Tt]>he /;

[08:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢The｣␤»

[08:54] *** ccntrq joined
[08:55] <antoniogamiz> goooood :D

[08:58] <chloekek> p6: .list.say for 'The' «~~« (/(T|t)he/, /[T|t]he/, /<[Tt]>he/);

[08:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(｢T｣)␤()␤()␤»

[08:59] <chloekek> p6: .list.say for 'The' «~~« (/(T|t)he/, /[T|t]he/, /(<[Tt]>)he/, /<[Tt]>he/);

[08:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(｢T｣)␤()␤(｢T｣)␤()␤»

[09:00] *** ravenousmoose left
[09:01] *** ravenousmoose joined
[09:02] <chloekek> Is Rakudo called so because it does Raku?

[09:05] *** sena_kun joined
[09:08] *** pat_js joined
[09:10] *** reach_satori left
[09:12] <lizmat> weekly: http://blogs.perl.org/users/damian_conway/2019/07/six-slices-of-pie.html

[09:13] <notable6> lizmat, Noted!

[09:28] *** cygx joined
[09:28] <cygx> o/

[09:29] <cygx> chloekek: the Rakudo name came first, cf https://en.wikipedia.org/wiki/Rakudo_Perl_6#Name

[09:30] <cygx> chloekek: the Raku alias is a more recent development, chosen by TimToady in response to repeated requests for renaming the language

[09:32] <chloekek> Nice!

[09:36] <chloekek> p6: say '駱駝道'.chars

[09:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3␤»

[09:42] *** antoniogamiz left
[09:46] *** robertle joined
[09:46] <Xliff> «~~« ??

[09:47] *** melezhik left
[09:47] <Xliff> Geez! These hyper ops!

[09:48] <timotimo> hyped for those hyper ops

[09:51] *** aborazmeh joined
[09:51] *** aborazmeh left
[09:51] *** aborazmeh joined
[09:53] <daxim> here's an opportunity for a shining v6 answer:  do something every 10 seconds until external process is finished.  should be a one liner.   https://perlmonks.org/?node_id=11103281

[09:55] <cygx> Xliff: that's nothing - I once used the 'fish operator' <<=><<

[09:56] <Xliff> cygx: O_o

[09:56] <cygx> m: say ('key' <<=><< (1,2,3)).perl

[09:56] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(:key(1), :key(2), :key(3))␤»

[09:56] <Xliff> Ok. Now I'm able to read them.

[09:56] *** antoniogamiz joined
[09:56] <Xliff> aaand.. I'd be wrong.

[09:56] *** Poohmaan left
[09:56] *** Poohmaan joined
[09:57] <Xliff> m: say ('key' «=>« 4...6).perl

[09:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'pred' for invocant of type 'Pair'. Did you mean any of these?␤    grep␤    tree␤␤  in block <unit> at <tmp> line 1␤␤»

[09:57] <Xliff> m: say ('key' «=>« (4...6)).perl

[09:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(:key(4), :key(5), :key(6))␤»

[09:58] <antoniogamiz> patrickb: I have seen in your proposed changes to p6doc something about :api in the META6

[09:59] <antoniogamiz> can you send me a link where that setting is described?

[10:01] <antoniogamiz> oh, are implicit returns faster than explicit returns? I did not know that :ooo

[10:03] <patrickb> antoniogamiz: You probably got the wrong person. Which proposed changes are you refering to?

[10:03] <antoniogamiz> agh, you are right, sorry

[10:04] <antoniogamiz> I wanted to refer to tyil

[10:04] <tyil> hi

[10:04] <patrickb> Ah, the other Patrick :-)

[10:04] <tyil> that's me

[10:04] *** Guest1109 left
[10:04] *** mack[m] left
[10:04] <antoniogamiz> yep, sorry for the confusion, I only typed patr and pressed tab

[10:04] <antoniogamiz> tyil: I wanted to ask you about :api setting in META6

[10:04] <tyil> no worries :(

[10:04] <tyil> :) *

[10:04] *** Seance[m] left
[10:04] *** Garland_g[m] left
[10:05] <tyil> it's a little used feature, let me grab a link to the docs

[10:05] <antoniogamiz> I have seen you prefer to use that but none of the modules actually specify that part

[10:05] <tyil> http://docs.perl6.org/language/modules#index-entry-META6.json-META6.json this describes it as an optional field (because it is)

[10:06] <antoniogamiz> oh it looks like we I need for Documentable when the new documentation system comes

[10:06] <tyil> I hoped that comment would spark interest in more people to use an api field in the META6.json, as it makes semantic versioning possible (which, in my opinion, is the most sane versioning scheme we have)

[10:06] <antoniogamiz> (which will not be compatible with 1.x.x)

[10:07] <antoniogamiz> tyil: thanks a lot for mentioning that in the proposed changes, I did not have any idea about it

[10:07] <tyil> App::Assixt has been putting it in META6.jsons for months!

[10:07] <tyil> jk, it's not a common thing to see anywhere :p

[10:08] *** TravisRt2botio[m left
[10:08] <tyil> in general, I keep the value of the api field the same as the major release number

[10:08] *** folex left
[10:08] *** Matthew[m] left
[10:08] <antoniogamiz> that makes sense

[10:08] *** matiaslina left
[10:08] *** rba[m] left
[10:08] <tyil> since major release numbers get bumped when something backwards incompatible change is introduced in semantic versioning

[10:08] *** unclechu left
[10:08] *** Demos[m] left
[10:08] *** EuAndreh[m] left
[10:09] *** AlexDaniel` left
[10:09] *** lance_w[m] left
[10:09] *** sergiotarxz[m] left
[10:10] *** irdr left
[10:11] *** irdr joined
[10:14] *** aborazmeh left
[10:15] *** cygx left
[10:21] <chloekek> p6: "foo:bar".perl.say

[10:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «"foo:bar"␤»

[10:21] <chloekek> p6: qw[foo:bar].perl.say

[10:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «"foo:bar"␤»

[10:21] <chloekek> p6: qqw[foo:bar].perl.say

[10:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «"foo:bar"␤»

[10:21] <chloekek> p6: qqww[foo:bar].perl.say

[10:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «("foo", :bar)␤»

[10:21] <chloekek> p6: <<foo:bar>>.perl.say

[10:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «("foo", :bar)␤»

[10:22] <chloekek> I was surprised that it would do this when there is no space before the colon.

[10:22] *** mowcat joined
[10:24] *** Itaipu joined
[10:25] *** Itaipu_ left
[10:32] <Xliff> How would you execute the following bash commands using Proc::Async?

[10:32] <Xliff> echo "Hallo, sleeping for 120 seconds ..."; sleep 10

[10:33] *** Itaipu left
[10:33] *** Itaipu joined
[10:35] <Xliff> my $a = Proc::Async.new: "bash", "-c", "echo \"Hallo, sleeping for 120 seconds ...\"; sleep 10"

[10:35] <Xliff> It's the quoting... it;s always the quoting.

[10:36] <timotimo> oh, you don't want to have the sleep in perl6 code

[10:39] <Xliff> It's in bash

[10:43] *** _jrjsmrtn left
[10:46] *** AlexDaniel` joined
[10:52] *** __jrjsmrtn__ joined
[10:53] *** pat_js left
[10:53] *** tune left
[10:55] <Xliff> daxim: https://perlmonks.org/?node_id=11103288

[10:56] <daxim> that's delicious

[10:57] <daxim> Xliff++

[10:57] *** Matthew[m] joined
[10:57] *** lance_w[m] joined
[10:57] *** EuAndreh[m] joined
[10:57] *** rba[m] joined
[10:57] *** Guest92358 joined
[10:57] *** TravisRt2botio[m joined
[10:57] *** sergiotarxz[m] joined
[10:58] *** unclechu joined
[10:58] *** mack[m] joined
[10:58] *** Garland_g[m] joined
[10:58] *** Demos[m] joined
[10:58] *** matiaslina joined
[10:58] *** folex joined
[10:58] *** Seance[m] joined
[10:58] <daxim> why does proc::async print to stdout instead of capturing the echo output in the `out` attribute (IO::Pipe type)?

[10:59] <daxim> the sync Proc counterpart does not print

[10:59] <Xliff> Probably because I didn't spec that in the call.

[10:59] <timotimo> you have to :out for that to happen

[10:59] <Xliff> Yeah.

[10:59] <Xliff> Hence my entreaty to read the Proc::Async page.

[11:00] <timotimo> you expect far too much goodwill from perlmonks, i think

[11:00] <daxim> adding `, :out` to the new: method call does not help, can you show me how it's done right?

[11:01] <jnthn> Proc::Async doesn't take a :out; one subscribes to the stdout Supply

[11:02] <jnthn> The very first example at https://doc.perl6.org/type/Proc::Async shows how to do it.

[11:02] <jnthn> (I'm glad to see it uses a react block too :))

[11:02] <chloekek> Why are ENV and cwd capitalized differently in Proc::Async.start?

[11:02] *** TreyHarris left
[11:03] <timotimo> ah, right

[11:03] <tadzik> heh, good question...

[11:04] <daxim> how do we combine supply with the code xliff posted?

[11:04] <Xliff> very carefully. It stops being a one-liner, then.

[11:04] <daxim> perhaps it's easier to make `shell` async somehow

[11:05] <Xliff> For one thing, I'd like to postpone the scheduler until after the command has started.

[11:05] <Xliff> I don't think I can do that in "whatever $a.start { }"

[11:06] <jnthn> I'd probably have not used $*SCHEDULER directly, but instead Supply.interval(2, 1).tap: { say "in handler..." }

[11:06] <Xliff> jnthn++

[11:07] <jnthn> And then it's easy to move into to react block. And better still, stick a `done` in the whenever that handles process termination, and it will automatically turn off that timer too :)

[11:07] <Xliff> Ooh!

[11:07] <jnthn> lunch, bbl

[11:07] <Xliff> That solves everything.

[11:07] <daxim> can you amend the posted code? I want to learn

[11:08] <chloekek> Is it ok to begin the signature for BUILD with ::?CLASS:D:?

[11:08] <Xliff> I'll post another comment.

[11:08] <chloekek> Afaik it doesn't make sense to call it on the type object.

[11:14] *** TreyHarris joined
[11:15] *** zakharyas left
[11:16] <Xliff> daxim: https://perlmonks.org/?node_id=11103289

[11:18] <daxim> didn't run the code, but I think $a at the top should be $proc

[11:20] <timotimo> true

[11:21] *** cpage left
[11:21] <Xliff> Whoops!

[11:22] <Xliff> Fixed.

[11:24] *** cpage joined
[11:26] *** Guest37021 joined
[11:27] *** Poohman joined
[11:29] *** Poohmaan left
[11:30] *** rindolf left
[11:30] *** matiaslina left
[11:32] *** lance_w[m] left
[11:32] *** EuAndreh[m] left
[11:37] *** matiaslina joined
[11:37] *** antoniogamiz left
[11:38] *** EuAndreh[m] joined
[11:38] *** lance_w[m] joined
[11:38] *** rindolf joined
[11:54] *** pat_js joined
[11:59] <chloekek> p6: grammar A { token TOP { <bla> }; token bla { .* } }; A.bla

[11:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Cannot look up attributes in a A type object␤  in regex bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:00] <chloekek> p6: grammar A { token TOP { <bla> }; token bla { .* } }; A.new.bla.perl.say

[12:00] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Match.new(list => (), hash => Map.new(()), orig => "", pos => 0, made => Any, from => 0)␤»

[12:42] *** cygx joined
[12:42] <cygx> m: sub work($n) { sleep (0.01, 0.05, 0.1).pick; put "$n on {$*THREAD.id}" }; map &work, (^10).race(:1batch); put "-"; (^10).race(:1batch).map(&work)

[12:42] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0 on 1␤1 on 1␤2 on 1␤3 on 1␤4 on 1␤5 on 1␤6 on 1␤7 on 1␤8 on 1␤9 on 1␤-␤1 on 6␤2 on 6␤4 on 6␤0 on 4␤3 on 7␤6 on 8␤5 on 6␤9 on 8␤7 on 4␤8 on 7␤»

[12:43] <cygx> why is there no parallelism in case of sub map?

[12:45] <jnthn> The sub forms consistently deal in lists, following the 1-arg rule (e.g. sub map(&code, +values))

[12:46] <jnthn> So `map` the sub is always sequential map.

[12:47] *** zakharyas joined
[12:49] *** sena_kun left
[12:49] *** sena_kun joined
[12:50] <cygx> thanks

[12:51] <cygx> another question: is there a way to set the batch size on a `race for`?

[12:51] <cygx> havint to write `race for @list.race(:batch(42)) {...}` seems sub-optimal...

[12:51] <cygx> *having

[12:52] <jnthn> Yes, you do it like that; if you don't want to repeat the `race`, then just write `@list.race(:42batch).map: { ... }`

[12:53] <jnthn> It's sub-optimal, but otoh the hope is that in the future, needing to set the batch manually would be a lot less common than it is today.

[12:54] <cygx> perhaps a dynamic variable as default for the batch argument coult also work?

[12:54] <cygx> my $*BATCH = 4; race for ...

[12:55] <jnthn> That's a bit too leaky

[12:55] <jnthn> If anything, we might find a way to sneak in the colonpair to configure `race`, such as `race :batch(42) for ...`

[12:56] <jnthn> Though not sure how wise that is

[12:58] *** Voldenet left
[13:03] *** Voldenet joined
[13:03] *** Voldenet left
[13:03] *** Voldenet joined
[13:06] *** Black_Ribbon left
[13:09] *** x[LGWs4x4i]uG2N0 joined
[13:22] *** cygx left
[13:25] *** pamplemousse joined
[13:29] *** Altai-man_ joined
[13:30] *** sena_kun left
[13:34] <Xliff> R#3075

[13:34] <synopsebot> R#3075 [open]: https://github.com/rakudo/rakudo/issues/3075 Conflicting use statement does not produce an error, but fails dynamic compilation.

[13:35] <Xliff> Has anyone at least tried the replication steps?!

[13:35] *** Altai-man_ left
[13:43] <vrurg> Xliff: I wanted to have a look at it, but have no time for this. If nobody other helps, try pinging me next week, pls.

[13:45] <vrurg> Xliff: BTW, did you try the code on, say, 2019.03?

[13:51] <chloekek> p6: sub f { $^X + $^Y }; say f(1, 2)

[13:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE-NAME␤at <tmp>:1␤------> 3sub f { $^X7⏏5 + $^Y }; say f(1, 2)␤»

[13:51] <chloekek> Is it possible to disable this error and get a two-argument routine?

[13:54] <timotimo> m: use isms; sub f { $^X + $^Y }; say f(1, 2)

[13:54] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE-NAME␤at <tmp>:1␤------> 3use isms; sub f { $^X7⏏5 + $^Y }; say f(1, 2)␤»

[13:54] <timotimo> m: use isms :P5; sub f { $^X + $^Y }; say f(1, 2)

[13:54] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤This type cannot unbox to a native string: P6opaque, Pair␤»

[13:54] <timotimo> m: use isms <Perl5>; sub f { $^X + $^Y }; say f(1, 2)

[13:54] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE-NAME␤at <tmp>:1␤------> 3use isms <Perl5>; sub f { $^X7⏏5 + $^Y }; say f(1, 2)␤»

[13:54] <timotimo> how does isms

[13:55] <chloekek> p6: use isms; sub f { $^X + $^Y }; say f(1, 2)

[13:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE-NAME␤at <tmp>:1␤------> 3use isms; sub f { $^X7⏏5 + $^Y }; say f(1, 2)␤»

[13:55] <chloekek> p6: no worries; sub f { $^X + $^Y }; say f(1, 2)

[13:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE-NAME␤at <tmp>:1␤------> 3no worries; sub f { $^X7⏏5 + $^Y }; say f(1, 2)␤»

[13:56] <chloekek> p6: sub f { $^Χ + $^Y }; say f(1, 2)

[13:56] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^Y variable␤at <tmp>:1␤------> 3sub f { $^Χ + $^Y7⏏5 }; say f(1, 2)␤»

[13:56] <chloekek> p6: sub f { $^Χ + $^Υ }; say f(1, 2)

[13:56] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3␤»

[13:56] <chloekek> Ha, nice.

[14:06] *** lucasb joined
[14:07] *** molaf joined
[14:09] *** antoniogamiz joined
[14:10] <Xliff> vrurg: Yes. It was discovered in 2019.3 and it has continued through 2019.7 -- I didn't report it until 2019.7 as I hadn't yet broken it down into something as easy as what was reported.

[14:15] *** gregf_ joined
[14:16] <vrurg> Xliff: I wonder if you could be loosing an exception there. Try checking out if you're getting not real Nil but Failure. And if so – what exception does it wrap.

[14:19] <Xliff> vrurg: I agree. I have tried endlessly to see what the exception is, but nothing is reported.

[14:19] <vrurg> Xliff: if you remove try the outcome is the same?

[14:19] <Xliff> Yes.

[14:19] <Xliff> I will run it again to verify.

[14:20] <Xliff> Hrm.

[14:20] <Xliff> If I remove the try, it will not run because of the assignment.

[14:21] *** pat_js left
[14:21] <vrurg> Xliff: you could do require and then bind ::("Class") to the hash. Should be ok.

[14:22] <Xliff> Hoping if there is an exception it will be visible.

[14:23] <Xliff> It's running now. It will be a second.

[14:23] <Geth> ¦ doc: 625f9a4a04 | Coke++ | doc/Language/regexes.pod6

[14:23] <Geth> ¦ doc: brace vs. bracket

[14:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/625f9a4a04

[14:23] <Geth> ¦ doc: a90982c9ae | Coke++ | xt/code.pws

[14:23] <Geth> ¦ doc: new "words" from code sample

[14:23] <synopsebot> Link: https://doc.perl6.org/language/regexes

[14:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a90982c9ae

[14:35] <Xliff> vrurg: It's a Failure.

[14:36] <Xliff> But there's nothing reported

[14:36] <Xliff> If I run perl6 -e "use OffendingModule" then nothing is reported.

[14:37] <vrurg> I.e. $failure.exception is empty??? That's weird. Ok, I'll try to remember to look at it.

[14:37] <Xliff> There is a Failure.exception?

[14:37] <Xliff> Let me see if I can get it.

[14:38] <vrurg> https://docs.perl6.org/type/Failure

[14:39] <vrurg> Xliff: I'll be away for ~1hr.

[14:39] <Xliff> kay.

[14:40] <Xliff> The failure exception is "No such symbol "OffendingModule"

[14:41] <Xliff> vrurg: The failure exception is 'No such symbol "OffendingModule"'. I expect this is happening because 'require ::("OffendingModule")' hits something that is not being reported and the Failure comes from ::("OffendingModule") not being there because...it wasn't actually loaded.

[14:41] *** molaf left
[14:47] *** gregf_ left
[15:06] *** ctilmes joined
[15:14] <antoniogamiz> mm how can I clone an object in an assignment?

[15:14] <antoniogamiz> I mean, my $a = $b.clone;

[15:14] <antoniogamiz> or something alike

[15:16] <antoniogamiz> (this is a question about style => https://gist.github.com/antoniogamiz/8e9e8c336584b7aa4a0f01e34efa8ee7)

[15:24] *** rindolf left
[15:27] *** chloekek left
[15:30] <tyil> I'm making an API to export metrics about the Perl 6 ecosystem for Prometheus (so I can make a Grafana dashboard out of it), and want to extract the role and two classes in this module (https://gitlab.com/tyil/perl6-app-cpan/blob/api/lib/App/CPAN/API/V1/PrometheusExporter.pm6#L13) to make exporting Prometheus-style metrics in other projects easier as well

[15:30] <tyil> however, how should I name the module that contains these Prometheus roles/classes?

[15:33] *** antoniogamiz left
[15:43] *** robertle left
[15:45] *** patrickb left
[15:45] *** Sgeo_ joined
[15:47] *** Sgeo left
[15:54] *** patrickb joined
[15:55] *** discord6 left
[15:55] *** discord6 joined
[15:55] *** discord6 left
[15:55] *** discord6 joined
[15:59] *** discord6 left
[16:00] *** discord6 joined
[16:06] *** Sgeo__ joined
[16:09] *** Sgeo_ left
[16:20] *** domidumont left
[16:24] *** Sgeo_ joined
[16:26] *** ctilmes left
[16:28] *** Sgeo__ left
[16:32] *** dakkar left
[16:38] *** wildtrees joined
[16:39] *** SCHAPiE left
[16:41] <Xliff> tyil: Hmmm.... it really boils down to what you want your names to declare.

[16:42] <Xliff> If you want just a name, you could use Prometheus::Classes

[16:43] *** SCHAPiE joined
[16:48] <Kaiepi> m: class A is Int {}; say A.REPR

[16:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «P6opaque␤»

[16:49] <Kaiepi> m: class A is Int is repr('P6int') {}; say A.REPR

[16:49] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «P6int␤»

[16:49] <Kaiepi> m: class A is int {}; say A.REPR

[16:49] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤int does not support inheritance, so A cannot inherit from it␤at <tmp>:1␤»

[16:51] <wildtrees> so I can have parametrized roles but not parametrized classes? 

[16:51] <Kaiepi> you can make parametric classes if you use the MOP

[16:51] <wildtrees> oh, is it hard? should be avoided?

[16:51] <lizmat> wildtrees: a parameterized role puns to a class by itself

[16:51] <wildtrees> yea I am gonna try that next

[16:52] <Kaiepi> m: class Foo { method ^parameterize(Mu $, Mu \T) { self.^mixin: T; self.^set_name: 'Foo[' ~ T.^name ~ ']'; self } }; say Foo[Int].^name

[16:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Cannot find method 'specialize' on object of type Perl6::Metamodel::ClassHOW␤»

[16:52] <Kaiepi> m: class Foo { method ^parameterize(Mu \T) { self.^mixin: T; self.^set_name: 'Foo[' ~ T.^name ~ ']'; self } }; say Foo[Int].^name

[16:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Too many positionals passed; expected 2 arguments but got 3␤»

[16:53] <Kaiepi> m: class Foo { method ^parameterize(Mu \S, \T) { S.^mixin: T; S.^set_name: 'Foo[' ~ T.^name ~ ']'; S } }; say Foo[Int].^name

[16:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Cannot find method 'specialize' on object of type Perl6::Metamodel::ClassHOW␤»

[16:53] *** [Sno] joined
[16:53] <Kaiepi> m: class Foo { method ^parameterize(Mu \S, \T) { S.^mixin: T; S } }; say Foo[Int]

[16:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Cannot find method 'specialize' on object of type Perl6::Metamodel::ClassHOW␤»

[16:53] <Kaiepi> hm

[16:53] <Xliff> !!

[16:53] <Kaiepi> i could've sworn that worked

[16:53] <lizmat> m: role A[\answer] { method question() { answer } }; say  A[42].new   # wildtrees 

[16:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «A[Int].new␤»

[16:53] <Xliff> Might have changed?

[16:55] <Kaiepi> m: class Failable { method ^parameterize(Mu \S, Mu \T) { Metamodel::SubsetHOW.new: :name('Failable[' ~ T.^name ~ ']'), :refinee(T ~~ Junction ?? Mu !! Any), :refinement(T | Junction) } }; say Failable[Int]

[16:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Unexpected named argument 'name' passed␤»

[16:55] <Kaiepi> m: class Failable { method ^parameterize(Mu \S, Mu \T) { Metamodel::SubsetHOW.new: :refinee(T ~~ Junction ?? Mu !! Any), :refinement(T | Junction) } }; say Failable[Int]

[16:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Perl6::Metamodel::SubsetHOW.new␤»

[16:55] <Xliff> m: role A-role[\answer] { method question() { answer } }; my $a = (class :: does A-Role[42] {}).new; # equivalent?

[16:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'A-Role'. Did you mean 'A-role'?␤at <tmp>:1␤------> 3nswer } }; my $a = (class :: does A-Role7⏏5[42] {}).new; # equivalent?␤»

[16:55] <Xliff> m: role A-Role[\answer] { method question() { answer } }; my $a = (class :: does A-Role[42] {}).new; # equivalent?

[16:55] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[16:55] <Xliff> m: role A-Role[\answer] { method question() { answer } }; my $a = (class :: does A-Role[42] {}).new; $a.say; # equivalent?

[16:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «<anon|1>.new␤»

[16:55] <Xliff> Not as nicely outputted, tho

[16:56] <wildtrees> can I parametrized roles over values of types, not just types? 

[16:56] <Kaiepi> m: class Foo { method ^parameterize(Mu \S, \T) { T.^mixin: S; T } }; say Foo[Int]

[16:56] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Cannot find method 'specialize' on object of type Perl6::Metamodel::ClassHOW+{<anon>}␤»

[16:57] <Kaiepi> m: class Foo { method ^parameterize(Mu \S, Mu \T --> Mu) { T.^mixin: S; T } }; say Foo[Int]

[16:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Cannot find method 'specialize' on object of type Perl6::Metamodel::ClassHOW+{<anon>}␤»

[16:57] <Kaiepi> m: class Foo { method ^parameterize(Mu $, Mu \T --> A) { self.^mixin: T; self } }; say Foo[Int]

[16:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type 'A' is not declared␤at <tmp>:1␤------> 3{ method ^parameterize(Mu $, Mu \T --> A7⏏5) { self.^mixin: T; self } }; say Foo[In␤»

[16:57] <Kaiepi> m: class Foo { method ^parameterize(Mu $, Mu \T --> Mu) { self.^mixin: T; self } }; say Foo[Int]

[16:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «===SORRY!===␤Cannot find method 'specialize' on object of type Perl6::Metamodel::ClassHOW␤»

[16:58] <Kaiepi> m: class Foo { method parameterize(Mu $, Mu \T --> Mu) { self.^mixin: T; self } }; say Foo[Int]

[16:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Foo cannot be parameterized␤at <tmp>:1␤------> 3{ self.^mixin: T; self } }; say Foo[Int]7⏏5<EOL>␤»

[16:58] <Kaiepi> either i'm doing this wrong or something's broken because i know CArray does something like this

[16:59] <Kaiepi> m: class Foo { method parameterize(Mu $, Mu \T --> Mu) { self.^mixin: T; self } }; say Foo[IO]

[16:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Foo cannot be parameterized␤at <tmp>:1␤------> 3 { self.^mixin: T; self } }; say Foo[IO]7⏏5<EOL>␤»

[16:59] <Kaiepi> m: class Foo { method ^parameterize(Mu $, Mu \T --> Mu) { self.^mixin: T; self } }; say Foo[IO]

[16:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Perl6::Metamodel::ClassHOW+{<anon>}+{IO}.new␤»

[16:59] <Kaiepi> oh T needs to be a role for that to work

[17:00] <Kaiepi> anyway yeah wildtrees, you just slap a ^parameterize method on it like this

[17:00] <Kaiepi> first argument's irrelevant since it's always identical to self

[17:00] <jnthn> But really...just write a role :)

[17:01] <jnthn> And yes, you can pass the role values as well as types.

[17:02] <wildtrees> how would I type the values? 

[17:04] <wildtrees> oh its working, just not showing up when I say the role 

[17:04] <wildtrees> er instance of the role

[17:06] <wildtrees> I am passing in 5 but it is coming out with say and .perl as [Int] 

[17:10] *** khisanth_ left
[17:10] <jnthn> m: role R[Int $x] { method m { say $x } }; R[5].m

[17:10] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5␤»

[17:13] <wildtrees> m: role R[Int $x] {} ; say R[5].new.perl ;

[17:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «R[Int].new␤»

[17:14] <wildtrees> looking for something kind of like dependent type , or values as types in perl6 

[17:14] <jnthn> I think that's just about how it's being displayed rather than whether the value is being used.

[17:15] <wildtrees> m: role R[Int $x] {} ; say R[5].new.WHAT ;

[17:15] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(R[Int])␤»

[17:17] <wildtrees> hmmm comparing them using ~~ and .WHAT they seem different :) 

[17:20] *** redhands joined
[17:22] <Xliff> "NativeLibs:ver<0.0.5+>" <- Is that how you specify version dependency in META6.json?

[17:23] *** khisanth_ joined
[17:26] *** AlexDaniel joined
[17:26] <AlexDaniel> Xliff: Discussions about 6.e used to be here https://github.com/rakudo/rakudo/labels/6.e but all new tickets are expected here https://github.com/perl6/problem-solving/labels/6.e

[17:26] <yoleaux> 07:18Z <patrickb> AlexDaniel: Those changes are fixes for the big spaces-in-path PRs. Those were not part of 2019.07. So as long as we don't want to get the spaces-in-path PRs into the point release as well we have to leave out those fixup PRs.

[17:27] *** JackFly26 joined
[17:27] <AlexDaniel> m: use v6.e.PREVIEW; say 42

[17:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[17:27] <AlexDaniel> Xliff: ↑ v6.e.PREVIEW already works, though there's nothing new in it yet (I think)

[17:28] <JackFly26> So is that like beta perl6

[17:28] <yoleaux> 4 Apr 2019 02:30Z <Xliff> JackFly26: What was the solution to the eval issue?

[17:28] <Xliff> OK. No I just wanted to know where discussions so I could ask a question.

[17:28] <Xliff> Hah!

[17:28] <Xliff> JackFly26: o/

[17:29] <JackFly26> What eval issue

[17:29] <Xliff> Dude...that was from back in April... I forgot!

[17:29] <JackFly26> With the parrotvm? 

[17:29] <Xliff> Maybe

[17:29] <Xliff> I'd have to check the logs.

[17:29] <JackFly26> That's what I mostly used this for

[17:29] <AlexDaniel> JackFly26: yes, it's for those who want to experiment with newest features that will be available in the next language release

[17:29] <JackFly26> Ok nice

[17:29] <JackFly26> Rn I'm just dropping in. 

[17:30] <wildtrees> can a role have more than one parameter? whats the syntax for that if so 

[17:31] <JackFly26> I decided to try my lang with parser combinators first

[17:31] <lucasb> wildtrees: role R[$x, $y] {...}

[17:31] <JackFly26> Instead of parrotvm tools

[17:31] <lucasb> or role R[::T, ::U] {...}

[17:33] <Xliff> https://github.com/perl6/problem-solving/issues/75

[17:34] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Mechanism for Reusing Function Definitions in NativeCall https://github.com/perl6/problem-solving/issues/75

[17:35] <JackFly26> Would type aliases fix that problem? 

[17:35] <AlexDaniel> daxim: my $proc = Proc::Async.new: ‘sleep’, ‘15’; react { whenever Supply.interval(10) { say ‘So am I still waiting’ }; whenever $proc.stdout.lines { say “Got: $_” }; whenever $proc.start { say ‘Finished’; done } };

[17:35] <Xliff> AlexDaniel: Already handled and posted. :)

[17:36] <Xliff> You're answer is fairly close to what I ended up with.

[17:36] <Xliff> I'm still new to react/whenever so...

[17:36] <AlexDaniel> it's much more readable when written not in one line: https://gist.github.com/AlexDaniel/e18da4b04fd9a9d2d2e0218c149c0115 :)

[17:37] <Xliff> I know.

[17:37] <AlexDaniel> Xliff: I see your answer now, yes. Nice

[17:38] <JackFly26> Nice your timestamp was 1337

[17:38] *** Sgeo__ joined
[17:38] <JackFly26> Hola

[17:39] <JackFly26> Bienvenidos

[17:39] <Xliff> Mine was :00 !! \o/

[17:39] <wildtrees> m: role SizeAndType[::Type, Int $size] { has Type @.list is rw } ; say SizeAndType[Str, 10].new() ; 

[17:39] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'perl' for invocant of type 'Type'␤  in block <unit> at <tmp> line 1␤␤»

[17:39] <wildtrees> :(

[17:39] <JackFly26> Puedo hablar un pico español lol

[17:40] <JackFly26> Ok back to english

[17:40] <lucasb> wildtrees: I think you hit a bug. one sec :)

[17:41] <lucasb> m: role R[::Type] { has Type $.x }; dd R[Int].new

[17:41] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'perl' for invocant of type 'Type'␤  in block <unit> at <tmp> line 1␤␤»

[17:41] <lucasb> m: role R[::Type] { has Type $.x = Type }; dd R[Int].new

[17:41] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «R[Int].new(x => Int)␤»

[17:42] <AlexDaniel> Xliff: so https://github.com/rakudo/rakudo/issues/3075 wasn't an issue before 2019.03?

[17:42] <lucasb> IMO, both snippets should have evaluated to the same result

[17:42] *** Sgeo_ left
[17:42] <lucasb> since, they should be equivalent

[17:43] <lucasb> IOW, the type passed as argument isn't properly captured by the parameter. Note I had to explicit initialize the attribute.

[17:44] *** antoniogamiz joined
[17:44] <wildtrees> oh

[17:44] <wildtrees> m: role SizeAndType[::Type, Int $size] { has Type @.list is rw } ; say SizeAndType[Str, 10].new(list => ["hello","world"]) ; 

[17:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'perl' for invocant of type 'Type'␤  in block <unit> at <tmp> line 1␤␤»

[17:45] <wildtrees> anyways, how could I enforce a check for the size of the list from the parametrized type? 

[17:45] <antoniogamiz> you could create a type

[17:45] <antoniogamiz> with subset and where

[17:45] <Xliff> AlexDaniel: No. It WAS an issue before 2019.3

[17:46] <Xliff> I just couldn't easily isolate it until after 2019.7 was released.

[17:46] <Xliff> Is there a way I could download all of Bisectable so I could see if it ever was NOT a problem? I have a test script.

[17:48] <JackFly26> m: say Str

[17:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Str)␤»

[17:48] <JackFly26> m: say Str.perl

[17:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Str␤»

[17:49] <JackFly26> m: say Str.WHAT

[17:49] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Str)␤»

[17:49] <JackFly26> Oh

[17:49] <JackFly26> That's why

[17:49] <lucasb> no, that's WHAT :D

[17:50] <timotimo> m: say 42.WHY

[17:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No documentation available for type 'Int'.␤Perhaps it can be found at https://docs.perl6.org/type/Int␤»

[17:50] <timotimo> m: say "Life, the Universe and Everything.WHY

[17:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3y "Life, the Universe and Everything.WHY7⏏5<EOL>␤    expecting …»

[17:50] <timotimo> damn it

[17:50] <timotimo> m: say "Life, the Universe and Everything".WHY

[17:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[17:50] <timotimo> there it is

[17:50] <antoniogamiz> weird x'd

[17:51] <timotimo> WHY?

[17:51] <tadzik> :>

[17:52] <AlexDaniel> Xliff: yes, you can use Blin

[17:54] <AlexDaniel> Xliff: blin.p6 --old=2019.03.1 --new=HEAD --custom-script=useTestBug.p6

[17:54] <AlexDaniel> Xliff: you'd need to do `use lib ‘…………’` inside your test script

[17:57] <AlexDaniel> Xliff: oh, and the deps…

[17:57] *** Black_Ribbon joined
[17:58] <Xliff> What was in that use lib line again?

[17:58] <Xliff> It looks like morse code over here.

[17:59] <Xliff> So... I finally install Sake.

[17:59] <AlexDaniel> Xliff: just whatever the path is to your lib

[17:59] <Xliff> Full path spec?

[17:59] <AlexDaniel> Xliff: as for Blin, you only need this: https://github.com/perl6/Blin

[17:59] <AlexDaniel> Xliff: yeah preferably

[17:59] <Xliff> k

[18:00] <Xliff> Is there a command to only check releases?

[18:01] <Xliff> And what about the deps. Do I have to specify those in the Blin line?

[18:01] <AlexDaniel> Xliff: yes, like this: ./bin/blin.p6 --old=2019.03.1 --new=HEAD --custom-script=useTestBug.p6 Base64 Base64::Native Config::INI Cro::Core Cro::HTTP::Client Cro::TLS Crypt::Random Data::Dump::Tree DateTime::Format DateTime::Parse Dependency::Sort Digest Digest::HMAC Digest::SHA256::Native File::Directory::Tree File::Find File::Temp File::Which HTTP::HPACK IO::Path::ChildSecure IO::Socket::Async::SSL JSON::Class JSON::Fast JSON::JWT

[18:01] <AlexDaniel> JSON::Marshal JSON::Name JSON::Unmarshal LibraryMake License::SPDX Log::Timeline META6 MIME::Base64 Method::Also OO::Monitors OpenSSL Shell::Command Term::termios Terminal::ANSIColor Terminal::Print Test::META Text::Table::Simple URI XML XML::Class if

[18:02] <Xliff> kk

[18:02] <AlexDaniel> here as a gist: https://gist.github.com/AlexDaniel/bc92de829660b8d43bde2279c76c0d75

[18:02] <AlexDaniel> these are the actual dependencies your module has… :)

[18:03] <Xliff> Thanks! :)

[18:03] <Xliff> I knew those looked familiar.

[18:05] <antoniogamiz> my $a = $b.clone

[18:05] <antoniogamiz> is like pass $b to a function using 'is copy`?

[18:13] *** pamplemousse left
[18:13] <tobs> m: sub f ($x is copy) { $x.o++ }; my $x = class { has $.o is rw }.new: :10o; f $x; dd $x

[18:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «<anon|1> $x = <anon|1>.new(o => 11)␤»

[18:13] <tobs> m: my $x = class { has $.o is rw }.new: :10o; my $b = $x.clone; $b.o++; dd $x

[18:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «<anon|1> $x = <anon|1>.new(o => 10)␤»

[18:14] <tobs> antoniogamiz: ^ no, .clone will make a shallow copy of the object whereas `is copy` will just pass the same object in a new container.

[18:16] <antoniogamiz> mmm

[18:16] <antoniogamiz> good, thanks :D

[18:16] *** chloekek joined
[18:16] *** sauvin left
[18:17] *** sauvin joined
[18:19] *** cpan-p6 left
[18:19] *** cpan-p6 joined
[18:19] *** cpan-p6 left
[18:19] *** cpan-p6 joined
[18:20] *** zakharyas left
[18:20] *** sauvin left
[18:21] *** sauvin joined
[18:22] <Kaiepi> m: role A { method a { say ::?CLASS.^name } }; class B does A {}; B.new.a

[18:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «B␤»

[18:22] <AlexDaniel> Xliff: any progress?

[18:24] *** sauvin left
[18:24] *** sauvin joined
[18:26] <Xliff> blin is installed.

[18:28] *** JackFly26 left
[18:28] *** sauvin left
[18:28] <wildtrees> whats the sigil, or how do I assignv values to a subset of Array[Str] lets say ? 

[18:31] *** pamplemousse joined
[18:31] *** Possum left
[18:32] <Xliff> o/ Madeleien!

[18:33] *** Possum joined
[18:38] <Xliff> AlexDaniel:  Failed to open file /usr/local/home/cbwood/Projects/p6-Amazon-AWS-EC2/config-default.json

[18:49] *** antoniogamiz left
[18:50] *** JackFly26 joined
[18:51] <AlexDaniel> m: my Array[Str] $x; $x.push(‘foo’, ‘bar’); say $x

[18:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «[foo bar]␤»

[18:52] <AlexDaniel> m: my Array[Str] $x; $x = Array[Str].new(‘foo’, ‘bar’); say $x

[18:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «[foo bar]␤»

[18:52] *** llfourn left
[18:52] <AlexDaniel> wildtrees: ↑ like this

[18:52] <AlexDaniel> m: my @x := Array[Str].new(); @x.push(‘foo’, ‘bar’); say @x

[18:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «[foo bar]␤»

[18:52] <AlexDaniel> or like this

[18:54] *** Black_Ribbon left
[19:01] *** mowcat left
[19:02] <AlexDaniel> Xliff: what about now? :)

[19:02] <AlexDaniel> oooh, Blin installed via zef… interesting!

[19:02] <Xliff> Yeah. :)

[19:03] <AlexDaniel> Xliff: here: https://github.com/perl6/Blin/blob/master/config-default.json

[19:03] <chloekek> I love that I can put a has $.foo in a role, make a class that does the role, and then initialize foo with new, without writing my own constructor.

[19:03] <AlexDaniel> just copy it into whatever directory it expects it to be in, no modifications needed

[19:03] <chloekek> It's something I've always missed in other languages that feature inheritance.

[19:03] *** JackFly26 left
[19:04] <Xliff> AlexDaniel: Oh.... yeeeah.

[19:04] <Xliff> I may need to put this off until I can do it on the raw metal.

[19:05] <Xliff> On the VM, this is going to take FOREVER.

[19:05] <Xliff> I guess I'll let it run for a while though. Will let you know what I find.

[19:05] <AlexDaniel> Xliff: just let it run for a bit, it shouldn't take too long

[19:05] <AlexDaniel> Xliff: it will take exactly the same amount of time it takes to install these modules

[19:05] <AlexDaniel> unless something needs to be bisected

[19:06] <Xliff> True.

[19:06] <Xliff> Ooh! I like. Using different threads to install the modules in dep order?

[19:06] <AlexDaniel> if so, then times 11 for that module :)

[19:06] <AlexDaniel> yes

[19:06] <Xliff> Oh, god no!

[19:06] <Xliff> I hope that doesn't happen.

[19:07] <AlexDaniel> Xliff: ah, which --old commit did you choose?

[19:07] <Xliff> The one you gave

[19:07] <AlexDaniel> in my example it was 2019.03.1 but your script fails on that and we know that alread

[19:07] <AlexDaniel> y

[19:07] <AlexDaniel> so maybe ctrl+c it and give it something older

[19:07] <Xliff> Pick one.

[19:08] <AlexDaniel> let's try 2017.01

[19:08] <Xliff> !!

[19:08] <Xliff> OK

[19:08] *** redhands left
[19:09] <AlexDaniel> “it will take exactly the same amount of time it takes to install these modules” oh yeah, I guess faster given that it installs modules in parallel :)

[19:09] <AlexDaniel> unless that's already implemented in zef, I'm not sure?

[19:09] <Xliff>  /tmp/whateverable/rakudo-moar/dcf8c16d43adf168646fcf7e31758454a3fb026d is locked. Waiting...

[19:10] <Xliff>  /tmp/whateverable/rakudo-moar/dcf8c16d43adf168646fcf7e31758454a3fb026d is locked. Waiting...

[19:11] <Xliff> Had to blow away /tmp/whateverable

[19:15] <AlexDaniel> Xliff: that's OK I think

[19:15] <AlexDaniel> now that rakudo is relocatable, I should fix that…

[19:19] *** mowcat joined
[19:19] *** patrickb left
[19:19] *** klapperl left
[19:21] <Xliff> Now testing useTest.pl6

[19:21] <AlexDaniel> Xliff: \o/

[19:21] <Xliff> That took a while.

[19:22] <Xliff> No regressions found. That means the output was the same, right?

[19:22] <Xliff> Hmmm...

[19:23] <Xliff> Rerunning with a miner change.

[19:23] <AlexDaniel> Xliff: you can go into installed/ directory

[19:23] <Xliff> *minor

[19:23] <AlexDaniel> and see the output on both endpoints

[19:23] <Xliff> crap. I restarted. Will the old results be there?

[19:23] <AlexDaniel> Xliff: yes

[19:25] <Xliff> Huh!

[19:25] *** klapperl joined
[19:26] *** MasterDuke joined
[19:27] <Xliff> I only see log-new

[19:28] <AlexDaniel> Xliff: sounds like it succeeded in on `new`

[19:28] <AlexDaniel> Xliff: what's in output/overview ?

[19:28] <Xliff> useTest.pl6 – Unknown

[19:28] <Xliff> Crap. What exit codes does it need?

[19:29] <AlexDaniel> ah, *that* is overwritten :)

[19:29] <AlexDaniel> non-zero exit code or non-zero signal

[19:29] <Xliff> Shit.

[19:29] <Xliff> Will it compare output?

[19:30] *** MasterDuke left
[19:30] <Xliff> So non-zero for a problem and 0 for no problem?

[19:30] <AlexDaniel> no, it won't compare output https://github.com/perl6/Blin/blob/dc94598f052e8690dbb0708fd95a72acbe3f7ef3/lib/Blin/Processing.pm6#L468

[19:30] <AlexDaniel> yes, non-zero for a problem

[19:30] <AlexDaniel> also that's the wrong line!! :)

[19:31] <Xliff> *sigh*

[19:31] <Xliff> Rerunning again.

[19:31] <Xliff> I had to make a slight change to script

[19:31] <Xliff> Getting locked message again.

[19:32] <AlexDaniel> Xliff: yeah, remove that directory if you get that

[19:32] <AlexDaniel> hmmm https://github.com/perl6/Blin/commit/6da7c3c36e271129e060ace8f20323634de93668#diff-026d2668ae41b2887ccc09f420dd20bfR380

[19:32] <AlexDaniel> now that I look at it, maybe it does compare the output for custom scripts. But better give it a proper exit code to be sure

[19:34] <AlexDaniel> Xliff: if you learn to use that, I'll be able to retire :)

[19:35] <Xliff> :P

[19:35] <Xliff> We'll always draggs you backs in...

[19:35] <AlexDaniel> I know

[19:37] *** mowotter joined
[19:39] *** Black_Ribbon joined
[19:39] *** mowcat left
[19:40] *** robertle joined
[19:45] <Xliff> useTest.pl6 – AlwaysFail

[19:45] <Xliff> So... long standing issue, if it is one.

[19:45] *** pamplemousse left
[19:45] <Xliff> I think it is a silent exception or something.

[19:46] <Xliff> I think the only thing left is to start commenting things out of Amazon::AWS::Util until it works and see what causes the problem.

[19:46] <Xliff> Even though every Action object in the project uses that module.

[19:46] <Xliff> And they don't fail.

[19:48] *** |Sno| joined
[19:49] *** kaare_ left
[19:49] *** kaare_ joined
[19:51] *** [Sno] left
[19:52] <AlexDaniel> Xliff: and you can see the right error in log-new and log-old?

[19:52] <AlexDaniel> if so, then success, that's a perfectly fine result :)

[19:58] <SmokeMachine> is there a way to extend the EnumHOW and use it with a different keyword the same way we do with class?

[19:59] <SmokeMachine> I mean, with the enum syntax and not class syntax?

[20:02] <SmokeMachine> something like this: https://www.irccloud.com/pastebin/Odx4BqTl/

[20:12] *** patrickb joined
[20:25] *** lucasb left
[20:29] <Xliff> AlexDaniel: It's not a perfectly fine result for me.

[20:29] <Xliff> #3075 is still an issue, because the code is failing and I don't know why.

[20:30] <Xliff> Please read the entire description.

[20:30] <AlexDaniel> Xliff: yeah but we tried to bisect it and looks like it's not a regression :)

[20:30] <Xliff> Oh. Yeah. That.

[20:30] <Xliff> Means no one found the bug yet. 

[20:30] <AlexDaniel> you're the first! Woohoo!

[20:30] <Xliff> *snerk* OIC

[20:36] *** robertle left
[20:37] *** rindolf joined
[20:37] *** |oLa| left
[20:46] *** pamplemousse joined
[20:52] *** mowotter left
[21:03] *** chloekek left
[21:21] <cpan-p6> New module released to CPAN! PDF::ISO_32000 (0.0.6) by 03WARRINGD

[21:29] *** Sgeo_ joined
[21:30] *** redhands joined
[21:32] *** Sgeo__ left
[21:56] <cpan-p6> New module released to CPAN! IO::Socket::Async::SSL (0.7.4) by 03JNTHN

[22:04] *** patrickb left
[22:06] <Xliff> jnthn: Just a version bump?

[22:07] <Xliff> Ah! Last version release was in December.... nevermind.

[22:11] <jnthn> Contains a fix for a race in .supports-alpn

[22:14] <jnthn> (Practical upshot: if the first use of Cro::HTTP::Client was a mass of concurrent requests, you could end up with a crash)

[22:17] <cpan-p6> New module released to CPAN! Concurrent::Stack (1.2) by 03JNTHN

[22:22] <jnthn> Can you feel the CDD? :)

[22:32] *** pamplemousse left
[22:34] *** rindolf left
[22:37] <tyil> I should rename "module" to distribution to be more in line with the metrics I gather, if it's just an update

[22:48] *** khisanth_ left
[22:52] *** Black_Ribbon left
[22:52] *** Black_Ribbon joined
[22:56] *** tharkun joined
[22:59] <cpan-p6> New module released to CPAN! Concurrent::Queue (1.1) by 03JNTHN

[23:10] <timotimo> jnthn:     say $queue.Seq;             # (what why)

[23:10] <timotimo> ￼     say $queue.list;            # (what why)

[23:10] <timotimo> ￼ 

[23:10] <timotimo> :D

[23:10] <timotimo> that looks like you forgot to put the explanation in :D

[23:15] *** khisanth_ joined
[23:22] <jnthn> haha

[23:25] * timotimo has been kicking off the modules.perl6.org rebuild script every time a dist got pushed

[23:27] *** |oLa| joined
[23:27] *** |oLa| left
[23:29] *** wildtrees left
[23:35] <Kaiepi> m: class Foo { proto method foo(Str() $bar) {*}; multi method foo(Str $bar) { say $bar } }; Foo.new.foo: 1

[23:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Cannot resolve caller foo(Foo:D: Int:D); none of these signatures match:␤    (Foo: Str $bar, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[23:36] <Kaiepi> damn, thought the proto would coerce it for me instead of having to coerce it in all dispatchees

[23:42] *** aborazmeh joined
[23:42] *** aborazmeh left
[23:42] *** aborazmeh joined
[23:43] *** holyghost joined
[23:48] *** john_parr left
[23:49] *** [particle]1 joined
[23:51] *** [particle] left
[23:56] *** pamplemousse joined
