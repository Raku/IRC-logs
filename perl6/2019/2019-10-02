[00:09] *** shadowpaste joined
[00:13] *** leont left
[00:14] *** molaf left
[00:23] *** wildtrees joined
[00:45] *** Sgeo_ joined
[00:48] *** wildtrees left
[00:48] *** Xliff left
[00:49] *** Sgeo left
[00:50] *** aborazmeh joined
[00:50] *** aborazmeh left
[00:50] *** aborazmeh joined
[00:52] *** Sgeo__ joined
[00:55] *** Sgeo_ left
[01:12] *** Itaipu left
[01:13] *** Itaipu joined
[01:28] *** aborazmeh left
[01:35] *** ChoHag joined
[01:37] *** KotH left
[01:37] *** KotH joined
[02:08] *** Doc_Holliwood left
[02:14] *** Xliff joined
[02:14] <Xliff> \o

[02:15] <Xliff> AlexDaniel, you around?

[02:15] <Xliff> m: use Method::Also

[02:15] <camelia> rakudo-moar 1e2b0ec59: OUTPUT: «===SORRY!===␤Could not find Method::Also at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-2/sha…»

[02:38] *** Cabanossi left
[02:47] *** Cabanossi joined
[02:53] *** go|dfish joined
[03:07] *** MilkmanDan left
[03:09] *** MilkmanDan joined
[04:02] *** sno left
[04:04] *** wamba joined
[04:35] *** cwilson1 joined
[04:37] *** hernan605 joined
[04:38] *** MikeyG joined
[04:38] *** cwilson left
[04:38] *** abraxxa left
[04:38] *** AlexDaniel left
[04:38] *** dotdotdot left
[04:38] *** hernan604 left
[04:38] *** shadowpaste left
[04:38] *** awwaiid left
[04:39] *** sftp left
[04:40] *** abraxxa joined
[04:42] *** xi- joined
[04:43] *** jnthn joined
[04:45] *** dotdotdot joined
[04:46] *** sftp joined
[04:46] *** Sgeo_ joined
[04:50] *** Sgeo__ left
[04:50] *** awwaiid joined
[04:55] *** wmoxam joined
[04:59] *** shadowpaste joined
[05:12] *** molaf joined
[05:19] *** wamba left
[05:22] *** wamba joined
[05:32] *** nebuchadnezzar left
[05:34] *** nebuchadnezzar joined
[05:38] *** jmerelo joined
[05:42] *** Cabanossi left
[05:45] *** Cabanossi joined
[05:57] *** wamba left
[06:14] <jmerelo> releasable6: status

[06:14] <releasable6> jmerelo, Next release in ≈17 days and ≈12 hours. R6 is down. At least 4 blockers. Unknown changelog format

[06:14] <releasable6> jmerelo, Details: https://gist.github.com/b3465eceae4948392e81ac588177a6e4

[06:19] *** domidumont joined
[06:33] *** domidumont left
[06:34] *** domidumont joined
[06:38] *** kensanata joined
[06:48] *** wamba joined
[06:55] <AlexDaniel`> Xliff: yes

[06:57] *** AlexDaniel joined
[06:57] *** wamba left
[06:58] *** AlexDaniel left
[06:58] *** AlexDaniel joined
[06:58] *** Doc_Holliwood joined
[07:01] *** wamba joined
[07:04] *** cpan-p6 left
[07:05] <Xliff> Well, THAT took forever. :)

[07:05] <Xliff> Actually, I was about to ask what it would take to load a module onto the bots, but I think I have it under control, now.

[07:06] <Xliff> But just for shiz and giggles...what WOULD it take?

[07:06] *** cpan-p6 joined
[07:06] *** cpan-p6 left
[07:06] *** cpan-p6 joined
[07:13] <AlexDaniel> e: use lib ‘data/all-modules/cpan/TIMOTIMO/JSON-Fast’; use JSON::Fast;

[07:13] <evalable6> AlexDaniel, rakudo-moar 168c9c2fb: OUTPUT: «»

[07:13] <AlexDaniel> Xliff: pretty much nothing, but it depends on your deps

[07:13] <Xliff> Oooh! Nifty!

[07:14] <Xliff> e: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also;

[07:14] <evalable6> Xliff, rakudo-moar 168c9c2fb: OUTPUT: «»

[07:14] <Xliff> \o/

[07:14] <Xliff> AlexDaniel++!

[07:15] <Xliff> Now will that work with bisectable?

[07:16] <AlexDaniel> same

[07:17] <AlexDaniel> so yes, of course it will

[07:18] <AlexDaniel> I misread as “how will that work” :)

[07:18] <Xliff> e: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also; role A { proto method my_method (|) is also<my-method> { * }; multi method my_method (Str $a) { say 'Str!'; }; multi method my_method (Int $b) { say 'Int!'; }; }; A.new.my_method(42); A.new.my_method('b'); A.new.my-method(42); 

[07:18] <evalable6> Xliff, rakudo-moar 168c9c2fb: OUTPUT: «(exit code 1) Int!␤Cannot resolve caller my_method(A:D, Int:D); Routine does not have any candidates. Is only the proto defined?␤  in block <unit> at /tmp/dyQIhJk1hF line 1␤␤Str!␤»

[07:19] <Xliff> e: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also; role A { proto method my_method (|) is also<my-method> { * }; multi method my_method (Str $a) { say 'Str!'; }; multi method my_method (Int $b) { say 'Int!'; }; }; 

[07:19] <evalable6> Xliff, rakudo-moar 168c9c2fb: OUTPUT: «»

[07:19] <Xliff> e: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also; role A { proto method my_method (|) is also<my-method> { * }; multi method my_method (Str $a) { say 'Str!'; }; multi method my_method (Int $b) { say 'Int!'; }; }; A.new.my_method(42)

[07:19] <evalable6> Xliff, rakudo-moar 168c9c2fb: OUTPUT: «Int!␤»

[07:20] <Xliff> e: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also; role A { proto method my_method (|) is also<my-method> { * }; multi method my_method (Str $a) { say 'Str!'; }; multi method my_method (Int $b) { say 'Int!'; }; }; A.new.my_method(42); A.new.my_method('b')

[07:20] <evalable6> Xliff, rakudo-moar 168c9c2fb: OUTPUT: «Int!␤Str!␤»

[07:20] <Xliff> e: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also; role A { proto method my_method (|) is also<my-method> { * }; multi method my_method (Str $a) { say 'Str!'; }; multi method my_method (Int $b) { say 'Int!'; }; }; A.new.my_method(42); A.new.my_method('b'); A.new.my-method(42)

[07:20] <evalable6> Xliff, rakudo-moar 168c9c2fb: OUTPUT: «(exit code 1) Int!␤Cannot resolve caller my_method(A:D, Int:D); Routine does not have any candidates. Is only the proto defined?␤  in block <unit> at /tmp/213o62gPef line 1␤␤Str!␤»

[07:20] <Xliff> Oh, LOL!

[07:20] <Xliff> STDERROR stepped on STDOUT.

[07:21] <Xliff> bisect: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also; role A { proto method my_method (|) is also<my-method> { * }; multi method my_method (Str $a) { say 'Str!'; }; multi method my_method (Int $b) { say 'Int!'; }; }; A.new.my_method(42); A.new.my_method('b'); A.new.my-method(42)

[07:21] <bisectable6> Xliff, Bisecting by output (old=2015.12 new=168c9c2) because on both starting points the exit code is 1

[07:22] <bisectable6> Xliff, bisect log: https://gist.github.com/6ad41ee17e9251bd8ea61f3f7674e004

[07:22] <bisectable6> Xliff, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[07:22] <bisectable6> Xliff, The result looks a bit unrealistic. Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[07:23] <AlexDaniel> 6c: use lib 'data/all-modules/cpan/ELIZABETH/Method-Also'; use Method::Also; role A { proto method my_method (|) is also<my-method> { * }; multi method my_method (Str $a) { say 'Str!'; }; multi method my_method (Int $b) { say 'Int!'; }; }; A.new.my_method(42); A.new.my_method('b'); A.new.my-method(42)

[07:23] <committable6> AlexDaniel, https://gist.github.com/1bdf9422213a9245b2c3f328ee11e673

[07:24] <AlexDaniel> so what's the right output?

[07:24] *** sena_kun joined
[07:24] <Xliff> None of them.

[07:25] <Xliff> As a matter of fact, the response I get above is the best of the lot. Says there's a defect in either Method::Also or rakudo.

[07:25] <Xliff> Given the size of Method::Also and what it does, it's looking like a composition problem.

[07:25] <Xliff> Since I use this all over GIO and GTK, I just want some clarification.

[07:30] *** Sgeo__ joined
[07:31] *** molaf left
[07:33] *** Sgeo_ left
[07:37] *** ChoHag left
[07:38] *** ChoHag joined
[07:51] *** zakharyas joined
[07:59] *** Doc_Holliwood left
[08:00] *** Doc_Holliwood joined
[08:09] *** cxreg left
[08:12] *** Xliff left
[08:33] *** molaf joined
[08:43] *** dakkar joined
[08:53] *** ufobat__ joined
[08:57] *** ufobat_ left
[08:57] *** molaf left
[09:01] *** Doc_Holliwood left
[09:23] *** pecastro joined
[09:29] *** Black_Ribbon left
[09:36] *** domidumont left
[09:39] *** domidumont joined
[09:51] *** pat_js joined
[10:05] *** Sgeo_ joined
[10:09] *** Sgeo__ left
[10:27] <kawaii> AlexDaniel: started a Blin run just now, had to burn and rebuild my old toasting VM so sorry for the delay

[10:27] <AlexDaniel> cool

[10:29] *** domidumont left
[10:30] *** softmoth joined
[10:35] *** pmurias joined
[10:36] <pmurias> https://gist.github.com/pmurias/b37a7b924cc9a0105a518af6b55a757b - are the docs for JS interop clear anyone (any suggestion/questions are welcome)

[10:36] <jmerelo> kawaii++

[10:39] <kawaii> ===> Install [FAIL] for Whateverabe:ver<1.0.3>: ===SORRY!===

[10:39] <kawaii> Hmm can't find Whateverabe::Discordable

[10:39] <kawaii> When installing Blin deps AlexDaniel 

[10:41] <kawaii> Whateverable*

[10:41] <kawaii> I typed that out since I'm on mobile currently

[10:43] <kawaii> Huh okay nevermind

[10:43] <kawaii> Oh wait no yes do mind

[10:43] <AlexDaniel> wellll

[10:44] <kawaii> has Whateverable::Discordable been removed from the ecosystem or something?

[10:44] *** wamba left
[10:45] <Geth_> ¦ whateverable: 54f736b842 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META6.json

[10:45] <Geth_> ¦ whateverable: Fix META6.json (missing module)

[10:45] <Geth_> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/54f736b842

[10:45] <Geth_> ¦ whateverable: b2ef7846b8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META6.json

[10:45] <Geth_> ¦ whateverable: Bump version

[10:45] <Geth_> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/b2ef7846b8

[10:46] <AlexDaniel> kawaii: should be fixed now

[10:46] <kawaii> Ah yeah it will be, how do I force an ecosystem update? IIRC they trigger every few hours only

[10:47] <AlexDaniel> kawaii: what about zef install https://github.com/perl6/whateverable.git

[10:47] <kawaii> I forget that Zef is that clever sometimes :)

[10:47] *** wamba joined
[11:00] *** molaf joined
[11:00] *** scimon joined
[11:01] <scimon> Saw this from yesterday 

[11:01] <scimon> m: (("Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Jack","Queen","King") X ("Hearts","Clubs","Diamonds","Spades")).map( -> ($a, $b) { "playing card {$a} of {$b}".uc.uniparse } ).pick(*).head(5)>>.say

[11:01] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «🂹␤🂻␤🂥␤🂡␤🃕␤»

[11:01] <scimon> :D

[11:02] <scimon> (So that makes a deck of cards, shuffles it and deals 5) 

[11:02] *** abraxxa left
[11:04] *** wamba left
[11:07] *** batmanaod[m] left
[11:07] *** lance_w[m] left
[11:07] *** TravisRt2botio[m left
[11:07] *** matiaslina left
[11:07] *** JulianF left
[11:07] *** EuAndreh[m] left
[11:07] *** roy[m] left
[11:07] *** Seance[m] left
[11:07] *** sergiotarxz[m] left
[11:07] *** uzl[m] left
[11:07] *** Guest19607 left
[11:07] *** Matthew[m] left
[11:07] *** Demos[m] left
[11:07] *** unclechu left
[11:07] *** BlackChaosNL[m] left
[11:07] *** AlexDaniel` left
[11:07] *** xliff[m] left
[11:07] *** rba[m] left
[11:07] *** folex left
[11:07] *** aearnus[m] left
[11:07] *** wamba joined
[11:07] *** mack[m]1 left
[11:10] *** aborazmeh joined
[11:10] *** aborazmeh left
[11:10] *** aborazmeh joined
[11:13] *** zakharyas left
[11:14] *** MasterDuke left
[11:16] *** AlexDaniel` joined
[11:17] <lizmat> scimon: >>.say is a code smell, although in this case it wouldn't matter as they're random anyway

[11:19] *** robertle joined
[11:26] *** abraxxa joined
[11:26] <pmurias> re use lib example in the docs: https://docs.perl6.org/language/pragmas#index-entry-lib__pragma

[11:27] <pmurias> isn't that misleading as it uses /usr/local/lib and that doesn't seem like a sane place to store Perl 6 modules

[11:29] *** Demos[m] joined
[11:29] *** EuAndreh[m] joined
[11:29] *** BlackChaosNL[m] joined
[11:29] *** lance_w[m] joined
[11:29] *** TravisRt2botio[m joined
[11:29] *** rba[m] joined
[11:29] *** Matthew[m] joined
[11:29] *** tyil[m] joined
[11:29] *** JulianF joined
[11:29] *** sergiotarxz[m] joined
[11:29] *** roy[m] joined
[11:29] *** unclechu joined
[11:29] *** batmanaod[m] joined
[11:29] *** aearnus[m] joined
[11:29] *** matiaslina joined
[11:29] *** folex joined
[11:29] *** xliff[m] joined
[11:29] *** Seance[m] joined
[11:29] *** mack[m]1 joined
[11:29] *** uzl[m] joined
[11:31] *** Altai-man_ joined
[11:32] *** sena_kun left
[11:34] *** snarkyboojum joined
[11:34] *** snarkyboojum left
[11:35] *** snarkyboojum joined
[11:35] *** MasterDuke joined
[11:35] *** snarkyboojum left
[11:35] *** snarkyboojum joined
[11:35] *** snarkyboojum left
[11:36] *** snarkyboojum_ joined
[11:36] <scimon> lizmat: I know I was just trying to fit it into a one liner. (Or a tweet ;) )

[11:37] <lizmat> m: say  (("Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Jack","Queen","King") X ("Hearts","Clubs","Diamonds","Spades")).map( -> ($a, $b) { "playing card {$a} of {$b}".uc.uniparse } ).pick(*).head(5)   # works just as good as is fewer characters

[11:37] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(🂳 🃁 🂸 🂦 🃝)␤»

[11:38] <lizmat> *and

[11:38] *** domidumont joined
[11:38] <jjatria> m: say 1 ≰ 2 # I was surprised to see this break today

[11:38] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 17⏏5 ≰ 2 # I was surprised to see this break␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤    …»

[11:40] <jjatria> Is this intentional? Or just an omission?

[11:40] <lizmat> m: say "≰".uninames

[11:40] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(NEITHER LESS-THAN NOR EQUAL TO)␤»

[11:40] <lizmat> feels like an omission

[11:40] <lizmat> did we miss more than these ?

[11:41] <jjatria> There's ≱ as well

[11:41] <scimon> lizmat~~ :)

[11:41] <jjatria> m: say "≱".uninames

[11:41] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(NEITHER GREATER-THAN NOR EQUAL TO)␤»

[11:41] <scimon> lizmat++ even 

[11:41] <jjatria> In the spirit of Hacktoberfest, I'd be happy to volunteer

[11:42] <lizmat> please make a PR if you think you can  :-)

[11:42] *** ravenousmoose joined
[11:42] <jjatria> Where would something like this be specified?

[11:46] <MasterDuke> take a look around https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L4086 and https://github.com/rakudo/rakudo/blob/master/src/core.c/Numeric.pm6#L330

[11:46] <jjatria> Thanks! I'll see if I can come up with something :)

[11:48] *** pmurias left
[11:49] *** aborazmeh left
[11:50] <lizmat> jjatria: I don't think you can consider that low hanging fruit

[11:51] <lizmat> jjatria: you could start with looking for "≥" everywhere in the Rakudo code base (particularly src/Perl6/Grammar|Actions and src/core.c/*)

[11:52] <lizmat> and give ≱ and ≰ similar treatment 

[11:52] <lizmat> and turn that into a PR

[11:53] <jjatria> lizmat: Thanks. I'll see how it goes. If I get burned, I know where to come back to

[11:55] <jmerelo> jjatria: good luck

[11:57] *** pmurias joined
[12:05] *** Xliff joined
[12:05] <Xliff> .

[12:05] <Xliff> lizmat: You around?

[12:08] <lizmat> Xliff: around but pretty distracted

[12:12] *** domidumont left
[12:13] *** domidumont joined
[12:20] *** abraxxa left
[12:22] *** gabiruh joined
[12:23] *** Sgeo_ left
[12:23] *** Sgeo_ joined
[12:25] *** gabiruh_ left
[12:26] <AlexDaniel> lizmat, jjatria: I don't think it's an omission

[12:27] <AlexDaniel> ≤ and such were added as alternatives to <=

[12:27] *** wamba left
[12:28] <AlexDaniel> and even these were very prolbematic

[12:28] <AlexDaniel> for example, there was a performance difference

[12:28] <AlexDaniel> so adding more unicode ops should be justified

[12:28] <AlexDaniel> there's this page which lists some good reasons for addition of new unicode ops: https://github.com/rakudo/rakudo/wiki/save-me-from-ASCII

[12:29] <MasterDuke> i thought the performance difference was mitigated a while ago?

[12:29] *** abraxxa joined
[12:29] <AlexDaniel> yes, I think it is now fixed, but point is that extra fancy operators make our lives harder

[12:29] <AlexDaniel> and so their addition should be justified

[12:30] *** lucasb joined
[12:30] <AlexDaniel> out of 4 reasons listed on the wiki page ≰ satisfies about 0.5

[12:31] <AlexDaniel> we even reverted ⁇ ‼

[12:31] <AlexDaniel> “TL;DR: it fails to satisfy criteria mentioned on top of this page. That is, there is no reason to add it (and we are not adding unicode ops just for fun).”

[12:33] <AlexDaniel> also see https://github.com/rakudo/rakudo/pull/1348

[12:33] <jjatria> AlexDaniel: yeah, makes sense. That doesn't actually surprise me

[12:34] <jjatria> Thanks for the info! I'll have a read

[12:37] *** Doc_Holliwood joined
[12:38] *** wamba joined
[12:39] <lizmat> jjatria: fwiw, I think it would be a good exercise  :-)

[12:42] *** Cabanossi left
[12:43] <pmurias> AlexDaniel: ⁇ ‼ isn't usefull at all

[12:43] *** wamba left
[12:48] <tadzik> While it makes sense in some cases, #↓ and #← can be misleading in others

[12:48] <tadzik> eh, I find #| and #= misleading at all times :)

[12:50] <jjatria> lizmat: Yeah, I do think I might try it, even if only to learn a little about the internals

[12:51] <tadzik> regarding ∤ for |%% (U+2224 DOES NOT DIVIDE [Sm] (∤)): this does look very similar to polish ł in some fonts, which is actually a legal variable name

[12:51] <tadzik> m: my \ł = 5;

[12:51] <camelia> rakudo-moar 168c9c2fb: ( no output )

[12:52] *** Cabanossi joined
[12:56] *** zakharyas joined
[12:58] <Xliff> m: my $a = 'ABC\o0\o0\o0'; say $a eq 'ABC'

[12:58] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «False␤»

[12:59] <Xliff> How can I make this true? ^^

[12:59] <guifa> Interestingly a lot of those Unicode op proposals could already be done through modules for people to try out

[13:00] <guifa> And the sqrt vs √’s precedence issue would seem okay to me, for instance, in that || && are tighter than and or, so I’d expect √ tighter than sqrt

[13:01] <guifa> the pointy block proposal actually already happens with my editor font automatically via ligatures

[13:01] *** khisanth_ left
[13:04] *** go|dfish left
[13:04] *** jmerelo left
[13:04] *** mensvaga joined
[13:07] <Xliff> m: my $a = "abc\o0\0o\0o"; $a.comb.map( *.ord ).say; $a .= subst("\o0", ''); 

[13:08] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(97 98 99 0 0 111 0 111)␤»

[13:08] <Xliff> m: my $a = "abc\o0\0o\0o"; $a.comb.map( *.ord ).say; $a .= subst("\o0", ''); $a.comb.map( *.ord ).say

[13:08] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(97 98 99 0 0 111 0 111)␤(97 98 99 0 111 0 111)␤»

[13:08] <mensvaga> Is there a perl6 interpreter that isn't implemented in java?

[13:08] <lizmat> mensvaga: yeah, the default one, in MoarVM

[13:08] <Xliff> mensvaga: Yes, there is one implemented in MoarVM. This is the one most of us use.

[13:08] <Xliff> lizmat: Do you think you'll have time to look at my issue, today?

[13:09] <Xliff> m: my $a = "abc\0\0\0"; $a.comb.map( *.ord ).say; $a .= subst("\o0", ''); $a.comb.map( *.ord ).say

[13:09] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(97 98 99 0 0 0)␤(97 98 99 0 0)␤»

[13:09] <Xliff> m: my $a = "abc\0\0\0"; $a.comb.map( *.ord ).say; $a .= subst("\o0", '', :g); $a.comb.map( *.ord ).say

[13:09] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(97 98 99 0 0 0)␤(97 98 99)␤»

[13:09] <mensvaga> lizmat , Xliff, thanks

[13:09] *** wamba joined
[13:10] *** llfourn_ joined
[13:10] *** llfourn left
[13:11] <Xliff> m: my $a = "abc\0\0\0"; $a.comb.map( *.ord ).say; $a .= subst("\0", '', :g); $a.comb.map( *.ord ).say

[13:11] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(97 98 99 0 0 0)␤(97 98 99)␤»

[13:11] <Xliff> m: my $a = "abc\0\0\0"; $a.comb.map( *.ord ).say; $a .= trans("\0" => ''); $a.comb.map( *.ord ).say

[13:11] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «(97 98 99 0 0 0)␤(97 98 99)␤»

[13:14] *** khisanth_ joined
[13:16] *** pecastro left
[13:24] *** abraxxa left
[13:24] *** pecastro joined
[13:25] *** abraxxa joined
[13:48] *** ravenousmoose left
[13:53] *** pmurias left
[13:55] <Xliff> What's the proper type to use for const void *? I know Pointer will work, but how about Blob or Buf?

[13:56] <Xliff> Of course, if I use either of the later 2, I get a MoarVM panic

[14:07] *** Sgeo_ left
[14:23] <SmokeMachine> pmurias

[14:24] *** ravenousmoose joined
[14:33] *** pmurias joined
[14:34] <pmurias> SmokeMachine: pong

[14:36] <SmokeMachine> pmurias: sorry, I would ask if `EVAL(:lang<JavaScript>, "return false").Bool` would return `True` but I already got it... that's true only for wrapped objects, that's not the case of `false`...

[14:36] <SmokeMachine> pmurias: very good solution! :)

[14:39] <pmurias> I'm not sure how to deal with Symbols

[14:42] <SmokeMachine> pmurias: I'm not sure if it make any sense... but how about `JavaScript::Symbols::mySymbol`?

[14:44] *** pmurias left
[14:45] *** pmurias joined
[14:53] <discord6> <RaycatWhoDat> Aren't Symbols supposed to be like gensym in Common Lisp?

[14:53] <discord6> <RaycatWhoDat> That is to say, they are names generated by the implementation that are always unique?

[14:57] *** go|dfish joined
[15:00] <pmurias> RaycatWhoDat: yes

[15:00] <pmurias> RaycatWhoDat: for now I'm handling them as regular wrapped JS objects

[15:01] <discord6> <RaycatWhoDat> That's a bit weird, since they're primitive.

[15:03] <pmurias> but we don't have a matching Perl 6 primitive right?

[15:03] <discord6> <RaycatWhoDat> How do you plan on unwrapping it?

[15:03] <discord6> <RaycatWhoDat> Right, makes sense.

[15:03] *** MilkmanDan left
[15:03] <pmurias> if you pass them back to js they get unwrapped

[15:04] *** MilkmanDan joined
[15:04] <pmurias> you can call methods and get attributes from all the wrapped js objects

[15:06] *** robertle left
[15:11] *** MilkmanDan left
[15:11] *** pmurias left
[15:13] *** MilkmanDan joined
[15:22] *** MilkmanDan left
[15:23] *** wamba left
[15:23] *** wamba1 joined
[15:24] *** wamba1 left
[15:24] *** MilkmanDan joined
[15:27] *** jmerelo joined
[15:30] *** Doc_Holliwood left
[15:32] *** ravenousmoose left
[15:39] *** lucasb left
[15:40] *** Doc_Holliwood joined
[15:57] *** wamba joined
[15:59] *** domidumont left
[16:00] *** domidumont joined
[16:00] *** zakharyas left
[16:04] *** pat_js left
[16:05] *** Kaiepi left
[16:07] *** Kaiepi joined
[16:08] *** Kaiepi left
[16:11] <xinming> SmokeMachine: BTW, Please think about how to handle something like, dynamically switching the "table_name" for the model, This is can be also a must feature. :-)

[16:12] <SmokeMachine> xinming: If I got it right, it's already possible...

[16:12] <xinming> let's say, in perl5 DBIC, we can do something like this with    local $result_source->{table_name} = 'another_table';

[16:13] <xinming> Ok, thanks, I just check my project, and I realized something like that. :-)

[16:13] <SmokeMachine> xinming: like this? https://github.com/FCO/Red/issues/173

[16:14] <xinming> Yes

[16:14] <xinming> Something like that.

[16:15] <xinming> Is it safe to do something like  temp Bla.^table = "xx"   ?

[16:15] <SmokeMachine> yes

[16:15] <xinming> If not, maybe we can make it a rw container

[16:15] <xinming> Ok, THanks.

[16:15] <SmokeMachine> (it is a rw container...)

[16:15] <xinming> I'll trouble you next time I have new thoughts.  still haven't tried Red yet.

[16:15] <xinming> got it.

[16:16] <SmokeMachine> https://github.com/FCO/Red/blob/master/lib/MetamodelX/Red/Model.pm6#L68

[16:17] <SmokeMachine> xinming: please, do that!

[16:30] *** scimon left
[16:30] *** xxpor joined
[16:37] *** kensanata left
[16:42] *** robertle joined
[16:53] *** dakkar left
[17:10] *** domidumont left
[17:46] *** wamba left
[17:47] *** wamba joined
[17:57] *** mensvaga left
[18:07] *** krychu joined
[18:16] *** _jrjsmrtn joined
[18:18] *** __jrjsmrtn__ left
[18:22] *** Kaiepi joined
[18:22] *** wildtrees joined
[18:24] *** area51stormer joined
[18:26] <area51stormer> hey mst can you stop making shit up about other users?

[18:27] <tadzik> can we stay on topic? :)

[18:27] *** sauvin left
[18:32] *** area51stormer left
[18:33] *** lucasb joined
[18:38] *** rbt joined
[18:38] *** rbt left
[18:39] *** rbt joined
[18:39] *** rbt left
[18:39] *** rbt joined
[18:39] *** rbt left
[18:40] *** rbt joined
[18:41] *** jmerelo left
[18:42] *** Cabanossi left
[18:44] *** molaf left
[18:48] *** Cabanossi joined
[19:01] *** rbt left
[19:08] <Doc_Holliwood> m: use MONKEY; augment class Any { method foo() { say "foo"; } }; 1.foo;

[19:08] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «No such method 'foo' for invocant of type 'Int'. Did you mean 'foo'?␤  in block <unit> at <tmp> line 1␤␤»

[19:08] <Doc_Holliwood> Yes, I did. Tyvm

[19:10] <MasterDuke> ugh, i keep forgetting to fix that

[19:10] <MasterDuke> could you create a rakudo issue?

[19:11] *** pmurias joined
[19:14] *** krychu left
[19:23] *** Altai-man_ left
[19:25] *** Ven`` joined
[19:30] *** molaf joined
[19:35] *** sno joined
[19:43] <Doc_Holliwood> sure

[19:44] <Doc_Holliwood> by "fix" you mean?

[19:46] <MasterDuke> it suggests the same name it said it couldn't find

[20:00] <cpan-p6> New module released to CPAN! LibXSLT (0.0.1) by 03WARRINGD

[20:00] *** wamba left
[20:05] <Doc_Holliwood> nah, i mean wether that code is supposed to work, or wether it should get a better error message

[20:08] <MasterDuke> oh, ha. i didn't even look if it's supposed to work

[20:08] <MasterDuke> you would have to .^compose after augmenting

[20:09] <MasterDuke> m: use MONKEY; augment class Any { method foo() { say "foo"; } }; Int.^compose; 1.foo;

[20:09] <camelia> rakudo-moar 168c9c2fb: OUTPUT: «foo␤»

[20:12] *** AlexDaniel left
[20:14] *** remi_ness joined
[20:15] *** AlexDaniel joined
[20:15] *** AlexDaniel left
[20:15] *** AlexDaniel joined
[20:16] *** wamba joined
[20:31] <Doc_Holliwood> maybe add to the error message "Did you forget to ^compose?" ?

[20:32] <MasterDuke> hm, good idea

[20:34] *** krychu joined
[20:37] *** pmurias left
[20:52] *** Black_Ribbon joined
[20:52] *** MasterDuke left
[20:54] *** remi_ness left
[20:56] *** wamba left
[20:58] *** Kaiepi left
[21:04] *** pmurias joined
[21:28] *** xinming left
[21:28] *** xinming joined
[22:03] <jnthn> I don't think "did you forget to .^compose" is really relevant 99% of the time in such an error, since most of the time there really isn't such a method. The burden should be on the advanced folks doing MOP stuff.

[22:04] *** krychu left
[22:05] *** xinming left
[22:05] *** xinming joined
[22:08] *** Kaiepi joined
[22:12] <timotimo> that's kind of like when windows says "contact your administrator" with an error, which often stumped me when i was the administrator

[22:19] *** softmoth left
[22:21] <Grinnz> better than when it says "permission denied" when running as admin

[22:22] <timotimo> linux does that when you try to ./ a file that's not +x even if you're root, that can throw a beginner off easily

[22:23] <Grinnz> or if selinux gets in the way :P

[22:23] <Grinnz> the windows occurrences have no such excuse however

[22:27] *** Ven`` left
[22:28] <phogg> Nothing beats the old "Error: Success" message.

[22:29] <Elronnd> better than Error: an error was encountered handing a thrown error

[22:45] <Xliff> Ooh.... war stories!

[22:53] *** lucasb left
[23:06] *** pecastro left
[23:10] *** cpan-p6 left
[23:12] *** pmurias left
[23:12] *** cpan-p6 joined
[23:12] *** cpan-p6 left
[23:12] *** cpan-p6 joined
[23:13] *** pmurias joined
[23:14] <SmokeMachine> jnthn: but wouldn’t that make sense when the expected method exists on the class?

[23:20] *** pmurias left
[23:32] *** [particle]1 joined
[23:33] *** [particle] left
[23:34] *** Doc_Holliwood left
