[00:14] *** kurahaupo joined
[00:14] *** farcas82regreg joined
[00:37] *** leont left
[00:45] *** aborazmeh left
[00:49] *** Guest79246 left
[00:52] *** zakharyas joined
[00:53] *** aborazmeh joined
[00:53] *** aborazmeh left
[00:53] *** aborazmeh joined
[01:53] *** evalable6 left
[01:54] *** mowcat left
[01:54] *** evalable6 joined
[02:54] *** evalable6 left
[02:59] *** evalable6 joined
[02:59] *** ChanServ sets mode: +v evalable6

[03:06] *** AlexDani` joined
[03:11] *** AlexDaniel left
[03:24] *** aborazmeh left
[03:34] *** dyske left
[03:35] *** dyske joined
[03:45] *** mtg joined
[03:58] *** dyske left
[03:58] *** dyske joined
[04:00] *** aborazmeh joined
[04:00] *** aborazmeh left
[04:00] *** aborazmeh joined
[04:02] *** Cabanossi left
[04:05] *** Cabanossi joined
[04:06] <Xliff> m: my @a = <a b c d e>; say @a «Z» True;

[04:06] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/uZNG7qovwQ␤Missing…»

[04:06] <evalable6> Xliff, Full output: https://gist.github.com/636ef4e6f4f5752c1288c622c72dd7e7

[04:06] <Xliff> m: my @a = <a b c d e>; say @a »Z« True;

[04:06] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/B3AjOoD3no␤Missing…»

[04:06] <evalable6> Xliff, Full output: https://gist.github.com/f13cc20cfdcc5ffb6687827a56feb7f4

[04:07] <Xliff> m: my @a = <a b c d e>; say @a »Z« True xx @a.elems;

[04:07] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/p7RqxB7EZz␤Missing…»

[04:07] <evalable6> Xliff, Full output: https://gist.github.com/7b673ce695719ebafda4f0f865f330db

[04:07] <Xliff> m: my @a = <a b c d e>; say @a Z True xx @a.elems;

[04:07] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «((a True) (b True) (c True) (d True) (e True))␤»

[04:10] <Xliff> m: my @a = 'a'..'g'; sub sayLetter ($a) { $a.say }; @a.batch(2)».&sayLetter()

[04:10] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤»

[04:10] *** cpan-p6 left
[04:10] <Xliff> m: my @a = 'a'..'g'; sub sayLetter ($a, $b) { say "$a,$b" }; @a.batch(2)».&sayLetter()

[04:10] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) Too few positionals passed; expected 2 arguments but got 1␤  in sub sayLetter at /tmp/3Y2XDYo2S0 line 1␤  in block <unit> at /tmp/3Y2XDYo2S0 line 1␤␤»

[04:12] *** cpan-p6 joined
[04:12] *** cpan-p6 left
[04:12] *** cpan-p6 joined
[04:13] <Xliff> m: my @a = 'a'..'g'; @a = @a Z True xx @a.elems; sub sayLetter ($a, $b) { say "$a,$b" }; @a.race.map({ sayLetter(|$_) })

[04:13] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «a,True␤b,True␤c,True␤d,True␤e,True␤f,True␤g,True␤»

[04:14] <Xliff> m: my @a = 'a'..'g'; @a = @a Z Pair.new(whee, True) xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$b" }; @a.race.map({ sayLetter(|$_) })

[04:14] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Tut0qnlMja␤Variabl…»

[04:14] <evalable6> Xliff, Full output: https://gist.github.com/e2d810b541d58bdece1cfba3e5f00760

[04:14] <Xliff> m: my @a = 'a'..'g'; @a = @a Z Pair.new(whee, True) xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.race.map({ sayLetter(|$_) })

[04:14] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/AQ3UDyKAvu␤Undeclared routine:␤    whee used at line 1␤␤»

[04:14] <Xliff> m: my @a = 'a'..'g'; @a = @a Z Pair.new('whee', True) xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.race.map({ sayLetter(|$_) })

[04:14] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) A worker in a parallel iteration (hyper or race) initiated here:␤  in block …»

[04:14] <evalable6> Xliff, Full output: https://gist.github.com/f37bf9ae29c14fc7a15270406a015786

[04:15] <Xliff> m: my @a = 'a'..'g'; @a = @a Z whee => True xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.race.map({ sayLetter(|$_) })

[04:15] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) A worker in a parallel iteration (hyper or race) initiated here:␤  in block …»

[04:15] <evalable6> Xliff, Full output: https://gist.github.com/e1aee0ea643627fefe79b38c68a0554b

[04:15] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True xx @a.elems).flat; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.race.map({ sayLetter(|$_) })

[04:15] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) A worker in a parallel iteration (hyper or race) initiated here:␤  in block …»

[04:15] <evalable6> Xliff, Full output: https://gist.github.com/ed1efd50934bfa8b4af0e9d3d65c8568

[04:16] <Xliff> *snarl*

[04:16] <Xliff> m: my @a = 'a'..'g'; @a = @a True xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.race.map({ sayLetter($_[0], whee => $_[1]) })

[04:16] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/tWQj2QfSXo␤Two ter…»

[04:16] <evalable6> Xliff, Full output: https://gist.github.com/0bfc66236c30fe75fb2320a3dc152fd2

[04:17] <Xliff> m: my @a = 'a'..'g'; @a = @a True xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.say

[04:17] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/a6qzNKIDWV␤Two ter…»

[04:17] <evalable6> Xliff, Full output: https://gist.github.com/167367ee855e2b74787feaccf3bb0735

[04:17] <Xliff> m: my @a = 'a'..'g'; @a = @a Z True xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.say

[04:17] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «[(a True) (b True) (c True) (d True) (e True) (f True) (g True)]␤»

[04:18] <Xliff> m: my @a = 'a'..'g'; @a = @a Z Pair.new('whee', True) xx @a.elems; sub sayLetter ($a, :$whee) { say "$a,$whee" }; @a.race.map({ sayLetter(|$_) })

[04:18] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) A worker in a parallel iteration (hyper or race) initiated here:␤  in block …»

[04:18] <evalable6> Xliff, Full output: https://gist.github.com/bda2f70fd7e05669c74143942c35d187

[04:20] *** mtg left
[04:20] <Xliff> m: my @a = 'a'..'g'; @a = @a Z whee => True xx @a.elems; @a.say

[04:20] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «[(a whee => (True True True True True True True))]␤»

[04:20] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True xx @a.elems); @a.say

[04:20] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «[(a whee => (True True True True True True True))]␤»

[04:20] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True) xx @a.elems; @a.say

[04:20] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «[(a whee => True) (b whee => True) (c whee => True) (d whee => True) (e whee => True) (f whee => True) (g whee => True)]␤»

[04:21] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True) xx @a.elems; sub sayLetter($a, :$whee) { say "$a, $whee" }; @a.race.map({ sayLetter(|$)) })

[04:21] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/m1yE_GxYqV␤Missing…»

[04:21] <evalable6> Xliff, Full output: https://gist.github.com/f34b8a3d94da53e4dc693a6f6e695b13

[04:22] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True) xx @a.elems; sub sayLetter($a, :$whee) { say "$a, $whee" }; @a.race.map({ sayLetter(|$_)) })

[04:22] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/h_rvX1Nt2j␤Missing…»

[04:22] <evalable6> Xliff, Full output: https://gist.github.com/c495c454ab806c5fa7237d0e69bca946

[04:22] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True) xx @a.elems; sub sayLetter($a, :$whee) { say "$a, $whee" }; @a.race.map({ sayLetter(|$_) })

[04:22] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) A worker in a parallel iteration (hyper or race) initiated here:␤  in block …»

[04:22] <evalable6> Xliff, Full output: https://gist.github.com/77ce589b9faf63c938ff01de4d113551

[04:22] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True) xx @a.elems; sub sayLetter($a, :$whee) { say "$a, $whee" }; @a.race.map({ sayLetter(|$_.flat) })

[04:22] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) A worker in a parallel iteration (hyper or race) initiated here:␤  in block …»

[04:22] <evalable6> Xliff, Full output: https://gist.github.com/a9b91195b9bf338d1318b6a5e33dc97a

[04:23] <Xliff> m: my @a = 'a'..'g'; @a = @a Z (whee => True) xx @a.elems; sub sayLetter($a, :$whee) { say "$a, $whee" }; @a.race.map({ sayLetter(|$_[0], |$_[1]) })

[04:23] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «a, True␤b, True␤c, True␤d, True␤e, True␤f, True␤g, True␤»

[04:37] *** aborazmeh left
[05:12] *** mtg joined
[05:13] *** dyske left
[05:13] *** dyske joined
[05:17] *** jmerelo joined
[05:19] *** rindolf joined
[05:33] <jmerelo> .tell AlexDaniel it's not compulsory not to publish the source. It's in your hands to do it.

[05:33] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[05:34] <Xliff> m: class A-R {}; A-R.new.say

[05:34] <evalable6> Xliff, rakudo-moar b8669fe6f: OUTPUT: «A-R.new␤»

[05:58] *** mtg left
[06:02] *** ravenousmoose joined
[06:20] *** jmerelo left
[06:25] *** nadim_ left
[06:32] *** eseyman left
[06:36] *** molaf joined
[06:39] *** eseyman joined
[06:40] *** kurahaupo_ joined
[06:41] *** kurahaupo left
[06:41] *** farcas82regreg left
[06:45] <Xliff> Is there a maximum limit to class names?

[06:48] *** aindilis left
[06:54] *** nadim_ joined
[06:54] <Xliff> Attempting to rakudobrew: Can't locate object method "note" via package "NQP::Config::NQP

[06:55] <Xliff> Doing a "git submodule update" does NOT fix the issue.

[06:57] <Xliff> Blowing away old moar-master DID fix the problem.

[06:57] <Xliff> Seriously, guys. Blowing away directories after installing LOAD of modules is NOT a fix for a broken build system.

[06:57] <Xliff> This WILL get Perl6 LEFT BEHIND in the development community if it continues.

[06:58] <Xliff> ^^ timotimo jnthn lizmat jmerelo AlexDaniel vrurg ugexe

[06:59] <Geth> ¦ doc: lukasvalle++ created pull request #2846: Make pairup doc more consistent.

[06:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2846

[07:03] <Xliff> Inline::Perl5 is broken, now. I am submitting a bug report.

[07:07] <Geth> ¦ doc: 99c009a752 | lukasvalle++ | doc/Type/Any.pod6

[07:07] <Geth> ¦ doc: Make it more consistent to current implementation and other parts of Any doc (antipairs).

[07:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/99c009a752

[07:07] <Geth> ¦ doc: 54443e8db2 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Any.pod6

[07:07] <Geth> ¦ doc: Merge pull request #2846 from lukasvalle/master

[07:07] <synopsebot> Link: https://doc.perl6.org/type/Any

[07:07] <Geth> ¦ doc: 

[07:07] <Geth> ¦ doc: Make pairup doc more consistent.

[07:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/54443e8db2

[07:12] *** Sgeo__ joined
[07:15] *** Voldenet left
[07:16] *** Sgeo_ left
[07:16] *** nadim_ left
[07:20] *** Voldenet joined
[07:20] *** Voldenet left
[07:20] *** Voldenet joined
[07:25] *** klapperl_ left
[07:25] *** Black_Ribbon joined
[07:25] *** klapperl joined
[07:26] *** Sgeo_ joined
[07:29] *** Sgeo__ left
[07:32] <discord6> <ca53> Hello everyone. Is it still impossible to do language specific collation? I didn't find a way to change language in $*COLLATION nor anything concerning language choice in the documentation, but I'd like to be sure I'm not missing something.

[07:47] *** adu left
[07:50] *** noisegul joined
[07:53] *** nadim_ joined
[08:02] *** dakkar joined
[08:40] *** Black_Ribbon left
[08:41] <woolfy> mst jmerely ugexe : I was reading the last day's backlog and stumbled on your discussion on whitespace and I know I am late and maybe this has nothing to do with it, but...

[08:42] <woolfy> mst jmerelo ugexe : I do remember that Tux wanted some whitespace-specific thing in Perl 6 and he got it: https://github.com/FROGGS/p6-Slang-Tuxic

[08:42] <woolfy> So maybe that is useful, or too specific.

[08:50] *** adu joined
[08:50] *** adu left
[08:51] *** adu joined
[08:51] *** adu left
[08:52] *** adu joined
[08:52] *** adu left
[08:57] <lizmat> Xliff: been there, done that.  I hope it was a one time occurrence, only felt by people on the bleeding edge

[08:57] <yoleaux> 00:54Z <Kaiepi> lizmat: the RI::JSON optimization broke the JVM since it doesn't support NFD yet

[09:05] *** holyghost joined
[09:05] <holyghost> hi

[09:06] <holyghost> I'm probably going to transform the name of Mathx::Stat to Game::Stats and Bayes::Learn to Game::Bayes

[09:06] *** molaf left
[09:07] <holyghost> These are approximation algorithms they don't match class breadth and so on of normal statistics packages

[09:07] <holyghost> mathx class breadth I mean

[09:07] <holyghost> *math

[09:11] <jnthn> Xliff: If you're looking for stability, use releases. That said, I've stayed reasonably close to HEAD and didn't have to blow away my installed stuff to fix it; did need one manual intervention when install layout changed a bit, and that fix already got automated, so shouldn't be felt by anyone using releases.

[09:15] *** domidumont joined
[09:39] <holyghost> I've put Mathx-Stat and Bayes-Learn on github private, they're now at p6-Game-Stats and p6-Game-Bayes

[09:39] <holyghost> I need to fix issues for them still

[09:40] <holyghost> again, these use approximate statistic algorithms so they run faster

[09:40] <holyghost> built for games, hence the new names

[09:41] *** leont joined
[09:43] *** sena_kun joined
[09:45] <holyghost> hi leont, sena_kun

[09:45] <holyghost> I'm afk

[09:47] *** zakharyas left
[09:54] *** aindilis joined
[10:03] *** dyske left
[10:04] *** dyske joined
[10:10] *** kurahaupo_ left
[10:13] <Xliff> lizmat: 3 times in the last week across 2 environments.

[10:13] <lizmat> did I do what ?

[10:13] <Xliff> That's how many times I've had to start from scratch.

[10:15] <lizmat> ah...  /me only once

[10:15] * lizmat remembers the day that was needed after *every* re-compilation of the setting

[10:16] <Xliff> Well, at least those days are gone...

[10:16] <lizmat> indeed...and the configure system did need an overhaul by someone knowledgable

[10:18] <Xliff> lizmat: Any idea as to why it is the same error message as a week-or-so ago?

[10:18] <lizmat> no

[10:24] <Xliff> jnthn: Unfortunately, I cannot go the release route, as there are fixes in later versions of Perl6 that I am depending on.

[10:26] <lizmat> not having had 2 releases in the past months, doesn't help either  :-(

[10:26] <Xliff> Yes.

[10:29] *** ravenousmoose left
[10:39] <Xliff> Is there a maximum size for class names?

[10:40] <jnthn> Can't think any anywhere that'd enforce one

[10:43] *** leont left
[10:43] *** dyske left
[10:43] *** AlexDani` is now known as AlexDaniel

[10:43] *** AlexDaniel left
[10:43] *** AlexDaniel joined
[10:44] *** dyske joined
[10:48] *** dyske left
[10:49] *** dyske joined
[10:51] *** farcas82 joined
[10:51] *** farcas82 is now known as farcas82regreg

[10:55] <Xliff> Does anyone see anything glaringly wrong with this class definition?

[10:55] <Xliff> https://bitbucket.org/clifton-wood/p6-amazon-aws-ec2/src/obj-testing/lib/Amazon/AWS/EC2/Filters/DescribeInstancesFilter.pm6

[10:58] <sena_kun> Xliff, are there other libraries for this in other languages? Did you check their naming schemes? It hurts a bit to me, even if I consider IDE auto-complete.

[11:00] <sena_kun> I think at at least "Amazon::AWS" is kind of redundancy, because "Amazon::AmazonWebServices"...

[11:01] <sena_kun> Xliff, maybe https://metacpan.org/pod/Net::Amazon::EC2 can inspire you a little? Not suggesting to copy-paste the API that might be unnatural to Perl 6, but the naming organization.

[11:04] <timotimo> NT::NewTechnology

[11:09] <tobs> Net::Internet::IP::Protocol

[11:10] <tobs> but if you ask me, Amazon::AWS is the more appropriate namespace. Amazon might have more services (going into Amazon::), or more things might be called "AWS".

[11:13] *** Kaiepi left
[11:15] *** Kaiepi joined
[11:20] <Xliff> sena_kun: I feel your pain regarding the redundancy. I've tried shorter, believe me.

[11:20] <sena_kun> :/

[11:21] <Xliff> But naming conflicts have forced the issue. Longer is better

[11:21] *** mowcat joined
[11:21] <sena_kun> then let your autocomplete be strong...

[11:21] <Xliff> It's actually not bad. Plus.... "is export"!

[11:26] <Xliff> OK, so I have this test file: 

[11:26] <Xliff> https://bitbucket.org/clifton-wood/p6-amazon-aws-ec2/src/obj-testing/t/01-types.t

[11:27] <Xliff> And it's behavior is not matching the command line for some reason.

[11:52] <holyghost> .

[11:57] <holyghost> My SDL2 module is FUBAR, if someone would like to test PaganVisions2.p6 in http://github.com/theholyghost2/pagan

[11:58] <holyghost> and create issues or PRS

[12:08] *** jeromelanteri joined
[12:13] *** dyske left
[12:15] *** dyske joined
[12:29] *** aborazmeh joined
[12:29] *** aborazmeh left
[12:29] *** aborazmeh joined
[12:39] *** aborazmeh left
[12:59] *** pmurias joined
[13:09] <cpan-p6> New module released to CPAN! XML::Class (0.0.7) by 03JSTOWE

[13:15] *** antononcube joined
[13:17] *** antononcube_ joined
[13:17] <antononcube_> Hi! I am trying to figure out how to generate random "sentences" from the grammars I have implemented. 

[13:18] <antononcube_> I have seen related efforts in GitHub, like generating grammars from BNF and parsing Perl6 codes. Also, of course Grammar::Tracer.

[13:20] *** antononcube left
[13:21] <sena_kun> antononcube_, is there something specific you want to ask? grammars are intended to parse, not generate. To generate you likely need to build some sort of automata with transitions being a bit random.

[13:21] <antononcube_> I guess I can/should use MOP, but that has not been easy for me. 

[13:21] <sena_kun> antononcube_, can you provide a small gist of what you want to do / get?

[13:22] <antononcube_> Ok, I will do that in 5 min.

[13:26] <antononcube_> From the grammar shown here in EBNF (in Mathematica): https://github.com/antononcube/ConversationalAgents/blob/master/Projects/DataScienceSalon-Miami-Nov-2018-Workshop/Code/LoveFood/LoveFood.wl

[13:26] <antononcube_> I can generate random sentences with the command: GrammarRandomSentences[GrammarNormalize[ebnfCode], 6]

[13:26] <antononcube_> Here is the result:{"i love chocolates", "i crave 67 tangerines", "i demand sushi", "i \ crave milks and ice creams and 49 ice-creams and 49 sushi and sushi", \ "you love 72 sushi", "i crave 97 tangerines"}

[13:28] <Xliff> The trick is paring the BNF

[13:28] <antononcube_> Here is the result:{"i love chocolates", "i crave 67 tangerines", "i demand sushi", "i crave milks and ice creams and 49 ice-creams and 49 sushi and sushi", "you love 72 sushi", "i crave 97 tangerines"}

[13:29] <Xliff> So... at the risk of being confusing, you'd use a Perl6 grammar to parse the BNF. Then use the AST to write your generator.

[13:30] <antononcube_> That is a fine idea, and I considered it. But I already gave fairly large grammars written in Perl6.

[13:31] <Xliff> Unfortunately, I am not well versed enough in BNF to give you anything more. Sorry.

[13:31] <antononcube_> So, following that idea means that I should derive the corresponding BNF from Perl6 grammars.

[13:33] <tobs> antononcube_: that will not be possible in general as a Perl 6 grammar can execute arbitrary code inlined into the rule. This is also why I don't think there's a mechanism to turn a grammar accepting a language into a generator.

[13:33] <sena_kun> I saw Grammar::Generative, but it is three years old and kinda broken and no API...

[13:34] * sena_kun .oO ( would be nice to try to revive it )

[13:34] <antononcube_> BNF is simple enough. Generating Perl6 from BNF is not that hard using MOP. (I do/dif not know how to do it, but I saw code in GitHub.) Generating BNF from a Perl6 grammar seems harder...

[13:35] <vrurg> Xliff: did you manage with `no method note` problem?

[13:36] <antononcube_> @tobs Good point. I guess that is why rules are just Regex functions, so decomposing them BNF-wise is hard. 

[13:41] *** skids joined
[13:43] <Xliff> vrurg: Yes. Thanks for checking up. I had to blow away moar-master... again.

[13:43] *** dyske left
[13:44] <Xliff> vrurg: So it appears to be that something gets stuck and you have to clean out and rebuild moar entirely with the new system. 

[13:44] <vrurg> Xliff: where did you update the module? Because the problem stemmed from nqp, this is where you needed to do it.

[13:44] <Xliff> I've noticed it always occurs after a MoarVM bump.

[13:44] <Xliff> I did it from top-level.

[13:44] <Xliff> Let me move back and see if that solves the problem.

[13:45] *** dyske joined
[13:45] *** clarkema joined
[13:46] <Xliff> vrurg: That did the trick!

[13:46] <vrurg> That's it. nqp-configure is a submodule because it is shared by rakudo and nqp. You only updated it for rakduo where nqp was left with an old version. But that's only happens now once with people who did not update for a long time. The update is automated already.

[13:46] <vrurg> Great! :)

[13:47] <Xliff> OK, thanks!

[13:51] <antononcube_> sena_kun: Thanks for pointing out Grammar::Generative ! I did not find / see that code until you pointed it out...

[13:52] <sena_kun> antononcube_, well, I saw http://www.jnthn.net/papers/2013-yapcna-grammar-generate.pdf but it is dated back to 2013, so I really don't think it is useable right now, unfortunately. I can only suggest writing stuff manually, but that's not the best option.

[13:52] <lucs> x

[13:53] <timotimo> there's also the video recording to that talk i think

[13:54] <sena_kun> it doesn't have a META file too... needs some bitrotting. :)

[13:54] <timotimo> you mean bitunrotting? %)

[13:54] <sena_kun> ugh

[13:54] <sena_kun> this is the hardest word in my Engrish

[13:55] <antononcube_> sena_kun: Well, I can write a parser of Perl6 grammars into EBNF's and generate random sentences with Mathematica.

[13:55] *** veesh left
[13:55] <sena_kun> so hard I can't write it correctly...

[13:55] <cpan-p6> New module released to CPAN! Path::Through (0.0.1) by 03HYTHM

[13:56] <sena_kun> antononcube_, Perl 6 is parsed with Perl 6 grammar, which is pretty _huge_... On the other hand, if you need only some subset, it might be more do-able.

[13:56] <dakkar> even better if the Grammar type had useful introspection abilities

[13:57] <dakkar> p6: grammar Foo { token one { 'one' } }; Foo.^methods».say

[13:57] <evalable6> dakkar, rakudo-moar bed0695df: OUTPUT: «(exit code 1) token one { 'one' }␤Died with X::Method::NotFound␤  in block <unit> at /tmp/aY9QeQZsA3 line 1␤␤BUILDALL␤subparse␤parse␤parsefile␤BUILDALL␤»

[13:57] *** veesh joined
[13:57] <dakkar> notice that it prints all the (one) tokens, and that it fails to print some method (I don't know which one)

[13:58] <dakkar> but I don't know how to distinguish a token from a rule, regex, or normal method, nor do I know how to look inside any of them

[13:58] <timotimo> m: grammar Foo { token one { 'one' } }; Foo.^methods.map({ try .say })

[13:58] <evalable6> timotimo, rakudo-moar bed0695df: OUTPUT: «token one { 'one' }␤BUILDALL␤parsefile␤parse␤subparse␤BUILDALL␤Bool␤postmatch␤OTHERGRAMMAR…»

[13:58] <evalable6> timotimo, Full output: https://gist.github.com/87dcf02ee63a0188450e9f9106aacebd

[13:58] <timotimo> m: grammar Foo { token one { 'one' } }; Foo.^methods.map({ try .say; CATCH { say "errored"; say .^name } })

[13:58] <evalable6> timotimo, rakudo-moar bed0695df: OUTPUT: «token one { 'one' }␤BUILDALL␤parsefile␤subparse␤parse␤BUILDALL␤WHICH␤INTERPOLATE␤ast␤Bool␤…»

[13:58] <evalable6> timotimo, Full output: https://gist.github.com/f36a4f0839ac04e8adfa31ff92287438

[13:58] <dakkar> timotimo: should ».?say do the same thing?

[13:58] <timotimo> hm, perhaps?

[13:59] <dakkar> because it doesn't ☺

[13:59] <timotimo> m: grammar Foo { token one { 'one' } }; Foo.^methods(:all).map({ try .say; CATCH { say "errored"; say .^name } })

[13:59] <evalable6> timotimo, rakudo-moar bed0695df: OUTPUT: «token one { 'one' }␤BUILDALL␤subparse␤parse␤parsefile␤BUILDALL␤made␤MATCH␤CURSOR_NEXT␤RECU…»

[13:59] <evalable6> timotimo, Full output: https://gist.github.com/e3b7d99332f29e7b1e38f67e850adc67

[13:59] <dakkar> the 'try' looks in the wrong places

[13:59] <timotimo> it doesn't throw an exception though

[14:00] <dakkar>  m: grammar Foo { token one { 'one' } }; Foo.^methods(:all).map({ .say; CATCH { say "errored"; say .^name } })

[14:00] <evalable6> dakkar, rakudo-moar bed0695df: OUTPUT: «(exit code 1) token one { 'one' }␤Died with X::Method::NotFound␤  in block <unit> at /tmp/oueKSdpWPw line 1␤␤BUILDALL␤parse␤parsefile␤subparse␤BUILDALL␤DYNQUANT_LIMITS␤errored␤X::Method::NotFound␤»

[14:00] * dakkar clearly doesn't understand CATCH

[14:00] <timotimo> if the CATCH block doesn't match the exception it will be rethrown

[14:00] <timotimo> but you're right, with that try in my code it wouldn't ever hit the catch block

[14:01] <timotimo> m: grammar Foo { token one { 'one' } }; Foo.^methods(:all).map(-> $meth { $meth.say; CATCH { default { say "errored"; say $meth.^name } } })

[14:01] <evalable6> timotimo, rakudo-moar bed0695df: OUTPUT: «token one { 'one' }␤BUILDALL␤parsefile␤subparse␤parse␤BUILDALL␤errored␤NQPRoutine␤errored␤…»

[14:01] <evalable6> timotimo, Full output: https://gist.github.com/2842b95cfe4b767b18b59fb91e8d1f45

[14:01] <dakkar> oh, a bunch of NQPRoutine

[14:01] <timotimo> yeah, very low-level stuff in there

[14:05] <antononcube_> sena_kun: "Perl 6 is parsed with Perl 6 grammar, which is pretty _huge_..."  -- I know/agree. Perl6 grammars are the reason I started using Perl6. But coming from languages like LISP/Mathematica that is sort of expected that kind of homoiconicity is expected.

[14:05] *** espadrine_ joined
[14:09] *** antononcube_ left
[14:10] <sena_kun> andrewalker, you can play with `.perl`/`EVAL` to some extent, I guess...

[14:11] <sena_kun> m: use MONKEY-SEE-NO-EVAL; my $a = /.oo/.perl; say 'foo' ~~ EVAL $a;

[14:11] <evalable6> sena_kun, rakudo-moar bed0695df: OUTPUT: «｢foo｣␤»

[14:12] <sena_kun> m: use MONKEY-SEE-NO-EVAL; my $a = regex /.oo/; say 'foo' ~~ EVAL ($a.perl); # with $a.perl being a string

[14:12] <evalable6> sena_kun, rakudo-moar bed0695df: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/kSwdaU7hDK␤Malform…»

[14:12] <evalable6> sena_kun, Full output: https://gist.github.com/5a416391a89b510d1f500fa1fd2f698b

[14:13] <sena_kun> m: use MONKEY-SEE-NO-EVAL; my $a = regex { .oo }; say \'foo\' ~~ EVAL ($a.perl); # with $a.perl being a string

[14:13] <evalable6> sena_kun, rakudo-moar bed0695df: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/BEipmuUBtN␤Unable …»

[14:13] <evalable6> sena_kun, Full output: https://gist.github.com/8b082633b0b862b975e4483d87d592a0

[14:13] <sena_kun> hmm...

[14:13] <sena_kun> m: use MONKEY-SEE-NO-EVAL; my $a = regex { .oo }; say 'foo' ~~ EVAL ($a.perl); # with $a.perl being a string

[14:13] <evalable6> sena_kun, rakudo-moar bed0695df: OUTPUT: «｢foo｣␤»

[14:14] <sena_kun> m: grammar A { token AAA { abc } }; say A.^methods[0];

[14:14] <evalable6> sena_kun, rakudo-moar bed0695df: OUTPUT: «token AAA { abc }␤»

[14:15] <sena_kun> and having a regex string you can convert it into some other syntax, e.g. see https://github.com/edumentab/p6-ecma262regex

[14:16] <sena_kun> all of this is not very elegant, but probably some path can be paved with this. and I am not really an expert. ;)

[14:19] *** dyske left
[14:20] <timotimo> aaw i wish there was one in the other direction

[14:20] <timotimo> so i can get from perl6 regex syntax to javascript regexes

[14:20] <sena_kun> timotimo, you wanted to write "a subset of perl6 regex syntax"? :)

[14:20] <timotimo> yeah

[14:20] *** dyske joined
[14:20] <timotimo> there's not much you can do for many things perl6 has

[14:21] <timotimo> unless you build your own js regex engine that implements perl6 regex; i'm not sure how hard it is to include "only that part" of rakudo.js

[14:22] *** espadrine_ left
[14:30] <mst> woolfy: suspect that was slang tuxish, which did admittedly help us convince @larry to allow fluent method calls, which was my whitespace annoyance around *that* time

[14:32] <mst> woolfy: I think in this case though ugexe's explanation showing how he's used <.ws> has got me going again :D

[14:35] <pmurias> timotimo: for the subset of stuff that maps to js regexes that should be possible

[14:36] <pmurias> timotimo: but I don't recommend the path of extracting a part of rakudo.js

[14:38] *** dyske left
[14:39] *** dyske joined
[14:40] <tadzik> computer, messsages

[14:40] <tadzik> huh

[14:41] <cpan-p6> New module released to CPAN! FindBin (0.4.1) by 03LEMBARK

[14:42] *** leah2 left
[14:44] <skids> you have no new messsages, sssire!

[14:46] *** leah2 joined
[14:48] <Xliff> Does someone who is familiar with the common failure modes of ::(...) have some time to look at something for me?

[14:48] <Xliff> Check Out this: https://bitbucket.org/clifton-wood/p6-amazon-aws-ec2/src/obj-testing/

[14:49] <Xliff> Run this:

[14:49] *** cpan-p6 left
[14:50] <Xliff> perl6 -Ilib -e 'use Amazon::AWS::Utils; my $a = "Amazon::AWS::EC2::Response::CopyFpgaImageResponse"; try require ::($a); my $class := ::($a); say $class; populateTestObject($class.new, blanks => False).gist.say'

[14:50] <Xliff> Then run "perl6 -Ilib t/02-response.t". Why does the command line succeed and the script not?

[14:50] <Xliff> If you've cloned in the last 2 minutes, you may need to pull.

[14:50] <Xliff> Thanks.

[14:51] *** cpan-p6 joined
[14:51] *** cpan-p6 left
[14:51] *** cpan-p6 joined
[14:52] <ugexe> i would suggest actually pushing the failing test

[14:53] <mst> yeah, I mean, just throw it into a branch

[14:56] <cpan-p6> New module released to CPAN! FileSystem::Parent (0.3.1) by 03LEMBARK

[14:56] <cpan-p6> New module released to CPAN! FindBin::libs (0.1.2) by 03LEMBARK

[14:56] <Xliff> Yeah. One sec. LOL

[14:56] <Xliff> If you are not getting that failing test, then "git checkout -b obj-testing"

[14:56] <ugexe> im looking at the web ui

[14:57] <ugexe> https://bitbucket.org/clifton-wood/p6-amazon-aws-ec2/src/obj-testing/t/

[14:58] <Xliff> Done

[14:59] <ugexe> what is the difference between that test and t/01-types.t

[14:59] <Xliff> t/01-types tests the classes in Amazon::AWS::EC2::Types. That test works.

[15:00] <Xliff> t/02-response works on the classes in Amazon::AWS::EC2::Response. Those don't, and I can't figure out why.

[15:00] <ugexe> lives-ok { try require ::($_);                           } # this doesn't make sense

[15:00] <Xliff> I know it has to be something simple.

[15:00] <ugexe> of course it lives ok, its enclosed in a try

[15:01] <Xliff> Fine. Change made. No difference. :(

[15:01] <Xliff> s/\(/)/

[15:01] <ugexe> you are also adding lexical scope to the require which is outside that of where it gets called

[15:02] <ugexe> { require Foo; } { #`(Foo not available here) }

[15:02] <Xliff> Suggestion?

[15:03] <ugexe> put require Foo in an appropriate scope?

[15:03] <Xliff> So why does that same code in t/01-types.t work?

[15:03] <ugexe> or do something like `my $foo-obj = (try require ::($_)); $foo-obj::blorg(...)`

[15:04] <Xliff> Or maybe I'm getting false passes.

[15:04] <ugexe> i would guess your test is bogus

[15:04] <ugexe> i dont have time to dive any deeper

[15:04] <Xliff> OK. Making some changes. Thanks for looking.

[15:05] *** khisanth_ left
[15:12] *** pmurias left
[15:18] *** khisanth_ joined
[15:19] *** mtg joined
[15:42] *** Wenjie1991 joined
[15:45] *** jmerelo joined
[15:47] *** Wenjie1991 left
[15:47] *** arkaitz joined
[15:49] *** Kaiepi left
[15:52] *** pamplemousse joined
[15:54] *** jeromelanteri left
[16:03] *** natrys joined
[16:07] *** clarkema left
[16:08] *** molaf joined
[16:15] *** Xliff left
[16:16] <jmerelo> releasable6: status

[16:17] <releasable6> jmerelo, Next release in ≈10 days and ≈2 hours. 1 blocker. 140 out of 594 commits logged (⚠ 2 warnings)

[16:17] <releasable6> jmerelo, Details: https://gist.github.com/ab36dda0224018db466aa869769617e6

[16:17] <jmerelo> How's that release coming along? Anyone knows?

[16:21] *** pamplemousse left
[16:23] *** pamplemousse joined
[16:28] *** arkaitz left
[16:30] *** adu joined
[16:34] *** pamplemousse_ joined
[16:35] *** pamplemousse left
[16:39] <Geth> ¦ doc: b9cd6f4b63 | (JJ Merelo)++ | doc/Type/Backtrace.pod6

[16:39] <Geth> ¦ doc: Learn new words

[16:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b9cd6f4b63

[16:39] <Geth> ¦ doc: b24a050a46 | (JJ Merelo)++ | 3 files

[16:39] <Geth> ¦ doc: Learn new words

[16:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b24a050a46

[16:39] <synopsebot> Link: https://doc.perl6.org/type/Backtrace

[16:39] <Geth> ¦ doc: ffdd098f84 | (JJ Merelo)++ | doc/Language/testing.pod6

[16:39] <synopsebot> Link: https://doc.perl6.org/language/testing

[16:39] <Geth> ¦ doc: Adds no-break space closes #2847

[16:39] <kawaii> jmerelo: AlexDaniel and I are going to handle it in the second-half of this month, when his time permits

[16:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ffdd098f84

[16:42] <lizmat> kawaii AlexDaniel please let us know as soon as possible if it does *not* work out

[16:42] <jmerelo> kawaii: great to hear that. Good luck.

[16:43] *** dakkar left
[16:44] <cpan-p6> New module released to CPAN! Inline::Perl5 (0.39) by 03NINE

[16:48] *** nadim_ left
[16:53] <woolfy> mst Looks like you will give a presentation about Perl 6 at your next Perl event, like "how I am no longer annoyed by whitespace"...

[16:54] <mst> woolfy: oh how I wish that were true

[16:54] <mst> but I *have* kitbashed together a grammar that appears to parse the things I wanted it to

[16:54] <mst> just need to add the actions to produce a simple data structure

[16:56] *** pamplemousse_ is now known as pamplemousse

[16:56] <jmerelo> mst: you get the data structure from the start. You can use actions to prune it or deal with it otherwise. You probably know that, anyway.

[16:57] <woolfy> mst : Good luck

[16:58] <jmerelo> mst: but I'd love to hear that, too.

[16:58] <mst> jmerelo: I mean convert a match structure to a simple AoA

[16:59] *** arkaitz joined
[16:59] <mst> lots of method foo ($/) { make [ foo => $<inner>.made ] }

[16:59] <jmerelo> mst: that's the ticket :-)

[16:59] <mst> right, the action code is going to be trivial

[16:59] <mst> largely because I've got an intentionally v. restricted syntax model

[17:02] <AlexDaniel> lizmat: you can help with the changelog :)

[17:02] <yoleaux> 05:33Z <jmerelo> AlexDaniel: it's not compulsory not to publish the source. It's in your hands to do it.

[17:03] <lizmat> AlexDaniel: will do after the P6W

[17:04] <AlexDaniel> jmerelo: yeah, so that it's more convenient for other folks who don't publish any sources

[17:07] *** pamplemousse left
[17:07] <holyghost> jmerelo : if you have some time this week, I need to fix your issues in all my 3 modules (p6-Game-Stats,p6-Game-Bayes) and you I need a debugger for pagan

[17:08] <holyghost> just thre graphics backend of pagan needs to be tested

[17:08] *** nadim_ joined
[17:08] <holyghost> Just post some issues or prs and I'll be allright

[17:11] <mst> has anybody experimented with static compilation of rakudo apps btw?

[17:11] *** pamplemousse joined
[17:13] <lizmat> mst: https://yakshavingcream.blogspot.com/2019/06/the-linker-for-perl-6.html ?

[17:14] <lizmat> and: https://summerofcode.withgoogle.com/projects/#4873743862595584

[17:16] *** farcas82regreg left
[17:16] <mst> lizmat: aha, that looks promising

[17:16] *** clarkema joined
[17:17] * mst is sort of expecting to end up wanting to smash perl5, rakudo, and rust into one binary at some point

[17:17] <lizmat> she hangs out on #moarvm as pamplemousse

[17:17] <lizmat> or even here, it seems  :-)

[17:18] <pamplemousse> \o

[17:18] <holyghost> *lol* irc brain damage

[17:19] <mst> don't worry about me, this is like yak-made-entirely-out-of-crazy at stack position 7 or something

[17:20] <holyghost> IF you have enough flex I believe

[17:20] <holyghost> *If

[17:20] <clarkema> Perl6 + Rust would be a pretty sweet combo

[17:21] <Geth> ¦ doc: e9e141291f | (JJ Merelo)++ | doc/Language/packages.pod6

[17:21] <Geth> ¦ doc: Clarifies scopes of classes and subs, closes #2848

[17:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e9e141291f

[17:21] <synopsebot> Link: https://doc.perl6.org/language/packages

[17:21] <jmerelo> holyghost: you need my time for your issues?

[17:22] <jmerelo> AlexDaniel: I still think it's convenient to publish sources. If it's not reproducible, it's not science.

[17:22] <holyghost> jmerelo : yes http://github.com/theholyghost2/pagan

[17:22] <jmerelo> hi, pamplemousse How's your Summer of Code going along?

[17:23] <holyghost> jmerelo : Just the SDL2 gfx backend, run PaganVisions2.p6 for the SDL2 backend

[17:24] <jmerelo> holyghost: I'm not going to do that, sorry.

[17:24] <holyghost> ok

[17:24] <pamplemousse> jmerelo: Hello! It's going decently. Still working on properly converting MoarVM bytecode into an ELF executable for a basic hello world program, but I'm making progress

[17:25] <jmerelo> pamplemousse: good to hear that. Keep on doing the good work!

[17:25] <sena_kun> pamplemousse++

[17:25] <clarkema> that sounds awesome!

[17:27] <pamplemousse> It's fun to work on! I really appreciate having the opportunity to do it. I'll be posting another progress update to my blog in the next day or two.

[17:28] <mst> note that http://p3rl.org/App::staticperl is a somewhat-related version for perl5

[17:28] <mst> no idea if there'll be ideas you can steal or not

[17:28] <jmerelo> pamplemousse++

[17:29] *** sergiotarxz[m] joined
[17:31] *** nadim_ left
[17:33] <pamplemousse> mst: Thanks, I'll take a look at it

[17:46] *** Kaiepi joined
[18:07] *** rindolf left
[18:09] *** pamplemousse_ joined
[18:13] *** pamplemousse left
[18:14] *** pamplemousse_ is now known as pamplemousse

[18:17] *** rindolf joined
[18:22] *** Rayler joined
[18:23] <Rayler> Hiya people

[18:28] <Rayler> Is anyone working on `Linking Perl 6 Compiler and Programs` or `Improving Decoding Modularity` projects. I saw them on the GSoC and although I didn't end up applying for Perl, they still seem interesting

[18:29] *** arkaitz left
[18:29] *** arkaitz joined
[18:36] *** dyske left
[18:36] <sena_kun> Rayler, hi! The first one is already taken. As for the second one, afaik not, but I am not sure if it is possible to apply, if late or not.

[18:36] *** dyske joined
[18:37] *** arkaitz left
[18:37] *** arkaitz joined
[18:38] <pamplemousse> Rayler: Hi! The only ones that are taken as GSoC projects are listed at the bottom of the page here: https://summerofcode.withgoogle.com/organizations/4713351599357952/

[18:38] <sena_kun> Rayler, judging by https://summerofcode.withgoogle.com/how-it-works/#timeline student application has ended April 9.

[18:39] <sena_kun> Rayler, of course, if you want to volunteer, I don't think anyone would stop you from doing so. :)

[18:40] <Rayler> Hi Senna, I am quite aware that the GSoC period has ended.I just wanted to contribute independent of GSoC

[18:40] <sena_kun> Rayler, ah, great. For decoding modularity project, I am sure you can ping samcv for details.

[18:41] <Rayler> pamplemousse, thanks for link.

[18:42] <sena_kun> Rayler, there is also an e-mail at the bottom of the readme, you can likely drop a letter for something more reliable than irc pings.

[18:42] *** Kaiepi left
[18:43] <mst> Rayler: https://yakshavingcream.blogspot.com/2019/06/the-linker-for-perl-6.html appears to be where to follow along wrt pamplemousse's work

[18:43] <mst> Rayler: and if you want to play around, volunteering to be a crash test dummy for people is always appreciated

[18:44] <Rayler> I emailed her prior to GSoC and got a lot of helpful reading articles from sam. But then I got caught up in midterms and finals and ultimately didn't feel confident enough to deliver on the Project. However I am always open to learning new things and trying this out

[18:44] <jmerelo> Rayler: that project you mention was not taken, I'm afraid. However, you can check with samcv to see if you can work independently on it, just by addressing inssues.

[18:44] <jmerelo> (issues)

[18:45] <Rayler> Since I won't have the pressure from GSoC to meet strict deadlines, I can be a bit more liberal with my approach towards this

[18:45] <jmerelo> Rayler: sure, by all means.

[18:46] *** Sgeo__ joined
[18:46] <Rayler> I just got a fresh new install of Arch today because I was getting tired of all that compiling in Gentoo(my computer was getting too hot!). Any official first step advice

[18:47] <moritz> Hi all, please comment on http://news.perlfoundation.org/2019/06/grant-proposal-a-complete-perl.html and tell me what you all think

[18:50] <ugexe> are you a Andrew Shitov's doppleganger?

[18:50] <pamplemousse> Rayler: I wrote about what I did to get set up, what sorts of resources I found useful to get me off the ground, and some specific things about contributing to Perl6 that threw me for a bit of a loop here: https://yakshavingcream.blogspot.com/2019/05/getting-started-developing-for-perl-6.html

[18:50] *** Sgeo_ left
[18:52] <Rayler> pamplemousse, Thank you, that's helpful. Always hard to figure out where to start

[18:52] <pamplemousse> Rayler: I'm still pretty green, so it's likely far from comprehensive, but I think it might be a helpful starting point. You also can probably ignore the linker specific books unless you have a deep passion for learning about linkers :)

[18:52] *** arkaitz left
[18:52] <pamplemousse> No problem! Happy to help if I can :)

[18:53] <Rayler> I am an incoming CS Sophomore, so I am also pretty green

[18:53] *** arkaitz joined
[18:53] <Rayler> Never touched FOSS contributions before this year, so this is new for me too

[18:54] <jmerelo> Rayler: good luck then. We'll be around to help. 

[18:55] *** jmerelo left
[18:55] <Rayler> So step 1 is to just compile Rakudo right? and then build Moar VM from source?

[18:57] <lizmat> compiling Rakudo requires MoarVM / nqp having been built

[18:58] <lizmat> but not to worry, with --gen-moar and --gen-nqp, that will be done automatically for you

[18:58] *** domidumont left
[19:00] <Rayler> lizmat, Compiling happily now, any way you can use multiple threads?

[19:01] <lizmat> for compiling?

[19:01] <lizmat> alas, no...

[19:02] <lizmat> ugexe: or are some aspects of installing modules parallelized already ?

[19:07] *** arkaitz left
[19:08] *** arkaitz joined
[19:10] *** rindolf left
[19:11] <ugexe> nope

[19:11] <ugexe> although since module loading isn't thread safe i'm not sure that precompilation would be either

[19:12] <lizmat> ah?  module loading not thread safe?  why?

[19:13] <ugexe> https://github.com/rakudo/rakudo/issues/1920

[19:22] *** arkaitz left
[19:23] *** arkaitz joined
[19:25] *** espadrine_ joined
[19:29] *** Rayler left
[19:32] <kawaii> so, I have a `common-functions.pm6` module which houses a bunch of common functions into other files regardless of if they're needed or not - is there a way to 'lazy-load' specific functions depending on if they're actually used in the target code?

[19:32] <lizmat> not at the moment

[19:33] <kawaii> oh, at the moment? :O

[19:33] <kawaii> meaning... one day? :)

[19:33] <lizmat> but I wonder if we could create a hook for that from the optimizer, when it comes to the conclusion that a call to a sub will never work because it is missing

[19:33] <lizmat> m: a()

[19:33] <evalable6> lizmat, rakudo-moar 1ccfc0134: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/2cH7knUQCo␤Undeclared routine:␤    a used at line 1␤␤»

[19:33] <lizmat> kawaii: maybe worth making an issue for

[19:35] *** wolo joined
[19:35] <ugexe> how would it possibly handle &::(...)()

[19:36] <ugexe> i guess that would work the same

[19:36] <lizmat> weekly: http://news.perlfoundation.org/2019/06/tpf-grants-committee-moritz-le.html

[19:36] <notable6> lizmat, Noted!

[19:36] *** espadrine_ left
[19:37] <lizmat> moritz: congrats and welcome!

[19:38] *** arkaitz left
[19:38] *** arkaitz joined
[19:49] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/06/10/2019-23-complete-course/

[19:53] *** arkaitz left
[19:53] *** arkaitz joined
[20:01] *** davidromero55 joined
[20:09] *** Sgeo__ left
[20:10] *** Sgeo__ joined
[20:25] <Ulti> lizmat++

[20:39] *** Kaiepi joined
[20:39] <Geth> ¦ doc: lukasvalle++ created pull request #2849: Exception for infix:<x> and infix:<xx> with -Inf and NaN

[20:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2849

[20:39] *** nadim_ joined
[20:51] *** arkaitz left
[20:51] *** pamplemousse left
[20:52] *** wolo left
[20:52] *** pamplemousse joined
[21:01] *** Altai-man_ joined
[21:02] <nadim_>  evening all, https://nopaste.linux-dev.org/?1216793, I have a role defined in a mudule I require, I get error "Cannot mix in non-composable type Any into object of type Data::Dump::Tree"

[21:02] <nadim_> But if I have the role in the same file, IE not required, it works fine.

[21:03] *** sena_kun left
[21:05] <cpan-p6> New module released to CPAN! Gnome::Gtk3 (0.15.0) by 03MARTIMM

[21:05] *** natrys left
[21:17] *** clarkema left
[21:17] <lizmat> j: say $*VM.name

[21:25] *** skids left
[21:34] <nadim_> Do we really want to let users handle SIGPIPE?    perl6 -e '"".say for 1..3' | head -n 1 ends in an unhandled exception

[21:37] <ugexe> of course not. thats why you cant catch it

[21:38] <ugexe> seems like a bug to me

[21:40] <nadim_> I'd have no problen adding a signal handler but it's the opposite of what P5 does, I was a bit surprised and had to "sponge" it to run

[21:41] <nadim_> ugexe: any idea about the problem I posted about a few lines up?

[21:41] <jnthn> fwiw, I think things ended up this way because if you let it got unhandled then we were getting killed if a spawned child process sent it to us

[21:43] <ugexe> maybe its getting namespaced different than you think when its in a different file

[21:43] <nadim_> I have another equivalent example that works

[21:44] *** rindolf joined
[21:44] <nadim_> jnthn: so the right thing is for the user to handke it?

[21:45] <ugexe> m: role Foo::Bar { }; my $x = 1 but Foo

[21:45] <evalable6> ugexe, rakudo-moar 1ccfc0134: OUTPUT: «(exit code 1) Cannot mix in non-composable type Foo into object of type Int␤  in block <unit> at /tmp/3Xt9sPQ2lY line 1␤␤»

[21:47] *** johnjohn101 joined
[21:51] *** adu left
[21:52] *** davidromero55 left
[21:52] *** kurahaupo joined
[21:55] <AlexDaniel> it's nice that evalable6 works so nicely, but…

[21:55] <AlexDaniel> where's camelia?

[21:56] *** Woodi left
[22:07] <woolfy> AlexDaniel : lizmat and I still got 500+ of them in our cellar...

[22:08] <AlexDaniel> woolfy: mmm :)

[22:08] <AlexDaniel> talking about the digital one, though

[22:08] <woolfy> Oh, that's even easier, here she is: https://commons.wikimedia.org/wiki/File:Camelia.svg

[22:08] <Altai-man_> it was present yesterday, but somehow left. :|

[22:09] *** Altai-man_ is now known as sena_kun

[22:22] *** johnjohn101 left
[22:27] *** pamplemousse left
[22:31] *** pamplemousse joined
[22:45] *** pamplemousse left
[22:48] *** rindolf left
[22:59] *** Kaiepi left
[23:21] *** mowcat left
[23:32] *** mtg left
