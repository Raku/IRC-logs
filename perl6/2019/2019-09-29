[00:00] <Xliff> No. It can exist in a module.

[00:00] <Xliff> It can exist anywhere, really, but it's better in a module.

[00:00] <Xliff> It sorta loses its usefulness in program code, since it occurs after compile-time but before precomp.

[00:00] <Xliff> Scripts are always compiled, so....

[00:02] <Xliff> s/precomp/serialization to disk/

[00:06] *** pecastro left
[00:11] *** aborazmeh joined
[00:11] *** aborazmeh left
[00:11] *** aborazmeh joined
[00:12] *** wildtrees left
[00:25] *** MilkmanDan left
[00:26] *** MilkmanDan joined
[00:33] <tbrowder>  so, how about this: global var exported vi

[00:35] <tbrowder> *via a local module. then, in the program script, run BEGIN (or INIT?) the

[00:35] <tbrowder> *to calculate its value.

[00:44] *** aborazmeh left
[00:46] *** aborazmeh joined
[00:46] *** aborazmeh left
[00:46] *** aborazmeh joined
[00:46] <Xliff> Um.

[00:46] <Xliff> Why not in the local module?

[00:46] <Xliff> If you are going to do this in the script, INIT makes more sense.

[00:47] <Xliff> tbrowder: Do you have some code?

[00:49] <tbrowder> no yet, its a wip for a PR for Documentable and i haven't pushed any code to my fork yet.

[00:49] <Xliff> Can you coble together a quick example of what you are trying to do?

[00:49] <tbrowder> i'll try the module first and see how that goes.

[00:50] <tbrowder> Xliff: thnx, bye for now.

[00:50] <Xliff> o7

[00:56] *** cwilson1 joined
[00:59] *** aborazmeh left
[01:00] *** cwilson left
[01:14] *** Doc_Holliwood left
[01:18] *** cwilson joined
[01:18] *** cwilson1 left
[01:30] *** cpan-p6 left
[01:34] *** cpan-p6 joined
[01:34] *** cpan-p6 left
[01:34] *** cpan-p6 joined
[01:42] *** isBEKaml joined
[01:49] *** cwilson left
[01:55] *** lucasb left
[01:55] *** xiaoyafeng joined
[01:56] *** Black_Ribbon left
[02:17] <Grinnz> timotimo: https://perl.bot can do neat stuff with editing and executing, though i think the rakudo there is out of date

[02:18] *** netrino left
[02:40] *** vrurg left
[02:42] *** Cabanossi left
[02:47] *** Cabanossi joined
[02:50] *** vrurg joined
[03:09] *** MilkmanDan left
[03:11] *** MilkmanDan joined
[03:12] *** Xliff left
[03:33] *** kst left
[04:16] *** isBEKaml left
[04:21] *** Black_Ribbon joined
[04:45] *** Black_Ribbon left
[05:18] *** wamba joined
[06:07] *** Actualeyes left
[06:08] *** Actualeyes joined
[06:16] *** Xliff joined
[06:36] *** Doc_Holliwood joined
[07:00] *** k0Le left
[07:01] *** molaf joined
[07:05] *** xiaoyafeng left
[07:16] *** k0Le joined
[07:21] *** domidumont joined
[07:22] *** domidumont left
[07:23] *** domidumont joined
[07:33] <Xliff> https://gist.github.com/Xliff/236bca60acd97cdb74fddde2abd2ba54

[07:33] <Xliff> :>

[07:35] *** k0Le left
[08:19] *** cpan-p6 left
[08:24] *** cpan-p6 joined
[08:24] *** cpan-p6 left
[08:24] *** cpan-p6 joined
[08:25] *** xiaoyafeng joined
[08:32] *** molaf left
[08:34] *** domidumont left
[08:46] *** Xliff left
[08:46] *** chloekek joined
[08:47] *** Doc_Holliwood left
[08:48] *** domidumont joined
[09:21] *** p9s` joined
[09:25] *** p9s left
[09:45] *** chloekek left
[09:46] *** sftp left
[09:46] *** sftp joined
[09:48] *** wamba left
[09:51] *** pecastro joined
[10:10] *** xiaoyafeng left
[10:32] *** wamba joined
[10:36] *** reach_satori left
[10:41] *** chloekek joined
[10:49] *** molaf joined
[10:50] *** Actualeyes left
[10:50] *** Actualeyes joined
[10:58] *** sftp left
[10:58] *** sftp joined
[11:04] *** chloekek left
[11:07] *** Doc_Holliwood joined
[11:16] *** reach_satori joined
[11:21] *** sena_kun joined
[12:13] *** domidumont left
[12:21] *** ordchr joined
[12:26] *** ordchr left
[12:29] *** APic left
[12:36] *** Ven`` joined
[12:44] *** perlmaros joined
[12:46] *** chloekek joined
[12:52] *** reach_satori left
[12:52] <perlmaros> hi, i started recently with my first perl6 project. however i do have an issue with the type system that i don't know how to solve (well apart from not using types at all)

[12:52] <perlmaros> http://paste.scsys.co.uk/586185

[12:53] *** APic joined
[12:53] <perlmaros> is there a way to predeclare class types? "class BearManager {} class Bear { ... } augument BearManager { ... }" didn't work as expected

[13:02] <sena_kun> perlmaros, try `class Foo {...}`

[13:02] <sena_kun> m: class Foo {...}; class Bar {...}; class Foo { has Bar $.bar; }; class Bar { has Foo $.foo }

[13:02] <camelia> rakudo-moar 17d036ad4: ( no output )

[13:03] <sena_kun> ^ something like this

[13:04] <perlmaros> that does the trick. thank you sena_kun 

[13:04] *** chloekek left
[13:04] <sena_kun> perlmaros, my pleasure

[13:09] *** rbt left
[13:14] *** aborazmeh joined
[13:14] *** aborazmeh left
[13:14] *** aborazmeh joined
[13:15] <timotimo> the "illegally post-declared type" error could totally spit out a hint how to pre-declare the type

[13:15] *** Ven`` left
[13:15] <timotimo> but without looking ahead to find the actual declaration it can't know what kind of type it is, i.e. grammar vs class etc

[13:16] *** Ven`` joined
[13:16] *** Ven`` left
[13:17] <timotimo> unicodable6: ↑⃗

[13:17] <unicodable6> timotimo, U+2191 UPWARDS ARROW [Sm] (↑)

[13:17] <unicodable6> timotimo, U+20D7 COMBINING RIGHT ARROW ABOVE [Mn] ( ⃗)

[13:18] <timotimo> m: my \v⃗ = (1, 10); say sqrt v⃗[0] ** 2 + v⃗[1] ** 2

[13:18] <camelia> rakudo-moar 17d036ad4: OUTPUT: «10.04987562112089␤»

[13:20] <timotimo> m: sub infix:<+⃗>($a, $b) { $a >>+<< $b }; say (3, 4) +⃗ (9, 9)

[13:20] <camelia> rakudo-moar 17d036ad4: OUTPUT: «(12 13)␤»

[13:21] <timotimo> turns out neo2 has capslock + numberpad 9 as combining  ⃗

[13:24] *** perlmaros left
[13:27] *** lucasb joined
[13:27] *** isBEKaml joined
[13:43] *** isBEKaml left
[13:53] *** aborazmeh left
[13:58] *** cpan-p6 left
[13:59] *** cpan-p6 joined
[13:59] *** cpan-p6 left
[13:59] *** cpan-p6 joined
[14:09] *** perlmaros joined
[14:19] *** netrino joined
[14:33] *** perlmaros left
[14:35] *** perlmaros joined
[14:53] *** cinch joined
[14:58] *** perlmaros left
[15:03] *** rbt joined
[15:11] *** cinch left
[15:18] *** APic left
[15:21] *** perlmaros joined
[15:36] *** APic joined
[15:50] *** MilkmanDan left
[15:52] *** MilkmanDan joined
[16:03] *** Black_Ribbon joined
[16:04] <guifa> perlmaros: also another way to do it (in particular if you have things in different modules) is to use ::(‘ClassName’) as a reference which is resolved runtime rather than compile time.  It’s a bit inelegant but in some situations I’ve found it’s the optimal route to use

[16:07] *** Ven`` joined
[16:13] *** domidumont joined
[16:40] <discord6> <RaycatWhoDat> it me

[16:47] <discord6> <Rogue> Who dat? It's Raycat

[16:56] *** zakharyas joined
[16:57] <Kaiepi> does a library for writing stuff involving graph theory exist?

[17:01] <guifa> Kaiepi: all I found was a gist someoen posted on github I’m afraid

[17:01] <guifa> https://gist.github.com/MadcapJake/efbcb2400c061c30fc9cb713a263c7c7

[17:06] <discord6> <RaycatWhoDat> ye

[17:06] <discord6> <RaycatWhoDat> Also, Ripcord's having a bit of a fit

[17:07] <discord6> <RaycatWhoDat> Never mind, we good

[17:08] *** f0x left
[17:11] <guifa> Is it possible to grab Unicode data from a given char?

[17:11] *** f0x joined
[17:11] <guifa> Like that it’s UC/LC/digit/ws/etc

[17:13] <sena_kun> .u a

[17:13] <unicodable6> sena_kun, U+000A <control-000A> [Cc] (control character)

[17:13] <unicodable6> sena_kun, U+001A <control-001A> [Cc] (control character)

[17:13] <unicodable6> sena_kun, Cowardly refusing to gist more than 5000 lines

[17:13] <sena_kun> unicodable6, help

[17:13] <unicodable6> sena_kun, Just type any Unicode character or part of a character name. Alternatively, you can also provide a code snippet. # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Unicodable

[17:13] <sena_kun> unicodable6, ふ

[17:13] <unicodable6> sena_kun, U+3075 HIRAGANA LETTER HU [Lo] (ふ)

[17:13] <sena_kun> guifa, I think you may want to look at unicodable6 source code

[17:14] <sena_kun> unicodable6, source

[17:14] <unicodable6> sena_kun, https://github.com/perl6/whateverable

[17:14] <sena_kun> guifa, ^

[17:14] <AlexDaniel> you mean this stuff?

[17:14] <AlexDaniel> uniprop: aふ

[17:14] <AlexDaniel> unidump: aふ

[17:14] <unicodable6> AlexDaniel, https://gist.github.com/b0ee086cba2b1cc6eeae969d247e5650

[17:15] *** Sgeo__ joined
[17:18] *** Sgeo_ left
[17:18] <guifa> aha

[17:18] <guifa> it was under Cool not Str that’s why I missed it

[17:18] <guifa> .uniprop

[17:21] <guifa> actually, even better with .unimatch

[17:22] <guifa> (I’m rewriting a weird token I had to see if I can improve speed with straight code instead 

[17:24] *** sftp left
[17:25] <AlexDaniel> guifa: example of some fancy matching based on properties and other stuff: https://github.com/perl6/whateverable/blob/10a6d8a92489d7b8a7d448b320354cebcc3957be/xbin/Unicodable.p6#L99-L107

[17:26] <guifa> AD++ right now I’m trying to port over my number parser.  After coming back to it after a while, I have a far better way to integrate it

[17:26] <guifa> goal is to have you be able to say

[17:27] *** sftp joined
[17:28] *** perlmaros left
[17:28] <guifa> grammar PercentComplete { use Intl::Regex::Numbers; #`(name tbd) token TOP ( <local-number(:percent)> complete ) }

[17:29] *** perlmaros joined
[17:33] *** kst joined
[17:35] *** cinch joined
[17:49] <guifa> Err NM I think I found a far less clunky way to do it ha

[17:51] <guifa> Actually, a *really* elegant way to do it

[18:03] <discord6> <RaycatWhoDat> So, I don't think I know enough about Perl 6 yet but, are there any good first issues I could try my hand at?

[18:04] <discord6> <RaycatWhoDat> Or is this a question better suited for #perl6-dev?

[18:05] *** finanalyst joined
[18:06] <tobs> RaycatWhoDat: Rakudo issues have a "good first issue" label. Browse that for something that's to your liking: https://github.com/rakudo/rakudo/labels/good%20first%20issue

[18:08] *** jmerelo joined
[18:09] <discord6> <RaycatWhoDat> oh neat

[18:09] <discord6> <RaycatWhoDat> thanks

[18:09] <finanalyst> I'm just updating a META6.json file for Pod-To-Cached, which is now in the perl6 organisation. I want to change the auth field. Is `auth: perl6` correct? or `auth: perl6/Pod-To-Cached`?

[18:09] <tellable6> 2019-09-17T15:37:28Z #perl6 <[Coke]> finanalyst Sent you several emails, looks like you missed the first one, check your spam filter?

[18:10] *** netrino left
[18:11] <guifa> <.foo> in grammars is supposed to just be non-capturing?  It seems to execute in a different scope than <foo>?

[18:11] <jmerelo> guifa: what kind of scope?

[18:11] <guifa> so I have a module that exports a single token, which uses other private tokens

[18:12] <finanalyst> jmerelo: hi

[18:12] <guifa> if I use <private-token> in the exported token, there’s no problem, it calls the token from inside my module

[18:12] <jmerelo> finanalyst: hi, Richard!

[18:12] <finanalyst> jmerelo: did you see my question about the auth  field?

[18:12] <guifa> but if I use <.private-token> it seems to want to use the scope from the grammar, rather than from my module, and bombs

[18:13] <jmerelo> finanalyst: I don't think so. Just arrived home from the beach

[18:13] *** mtj left
[18:13] *** mtj_ joined
[18:14] <jmerelo> finanalyst: where is that?

[18:14] <finanalyst> jmerelo: in the META6.json file for Pod-To-Cached, should the 'auth' field be set to 'perl6'?

[18:14] *** netrino joined
[18:14] <jmerelo> finanalyst: it's simply the repo it's in

[18:14] <finanalyst> if so I will commit a change now to test my setup.

[18:15] *** _jrjsmrtn joined
[18:15] <finanalyst> jmerelo: comma was giving me a warning that the auth field was missing

[18:15] <jmerelo> finanalyst: so, yes... Comma complained that that field wasn't set, so I used that, which is standard. 

[18:15] <finanalyst> ok

[18:15] <jmerelo> finanalyst: ah, so I didn't do it for Pod-To_Cached... I thought I had.

[18:16] <jmerelo> finanalyst: You've seen I spun off CompUnit::RepositoryWhatever::Document and am kinda rewriting it... Pod::To::Cached will go next

[18:17] <jmerelo> finanalyst: I'm trying to hide all nqp calls in the class itself. You do have access to that repo, right?

[18:17] *** __jrjsmrtn__ left
[18:20] *** sftp left
[18:21] *** sftp joined
[18:27] <guifa> jmarelo: details in this SE post: https://stackoverflow.com/questions/58158010/difference-in-capturing-and-non-capturing-regex-scope

[18:29] *** domidumont left
[18:31] <SyrupThinker> p6: (0..*).kv.is-lazy # This should be true, right?

[18:31] <camelia> rakudo-moar 17d036ad4: ( no output )

[18:31] <SyrupThinker> p6: say (0..*).kv.is-lazy

[18:31] <camelia> rakudo-moar 17d036ad4: OUTPUT: «True␤»

[18:31] <SyrupThinker> Hmm, nevermind I guess

[18:33] <tbrowder> question about a local compunit repository for installed distribution: are the contents of each actually compressed in the local filesystem? i.e., does a module author need to compress large resource sets to minimize space in the installed module?

[18:34] *** Ven`` left
[18:43] *** perlmaros left
[18:47] *** molaf left
[18:54] <AlexDaniel> SyrupThinker: is-lazy is weird sometimes

[18:54] <AlexDaniel> SyrupThinker: see https://github.com/rakudo/rakudo/wiki/is-lazy

[18:54] <finanalyst> jmerelo: back from dinner

[18:55] <finanalyst> jmerelo: I saw you spun off Cu--Doc 

[18:55] <tbrowder> jmerelo: hi

[18:56] <finanalyst> tbrowder: ho

[18:56] <tbrowder> the merryostill fooling with Documentable.

[18:58] <tbrowder> can you answer the question ref CURI? are the installed distros actually compressed?

[18:58] <finanalyst> tbrowder: the cache would be in the local system. So far it is only for the perl6 documentation

[19:00] <finanalyst> Don't know much about CompUnit at all. I only subclassed Documentable for the documentation system so that changes in Documentation files were not frozen.

[19:00] <tbrowder> right, but i'm talking about modules in general. when one does "zef install Foo", is the installation representatio of that module actually compressed on the file system?

[19:00] <finanalyst> don't know

[19:01] <tbrowder> jmerelo?

[19:01] <tbrowder> .seen ugexe

[19:01] <tellable6> tbrowder, I saw ugexe 2019-09-24T11:24:41Z in #perl6-dev: <ugexe> te Example doesn’t explicitly use .p6 but it just as easily could

[19:01] *** perlmaros joined
[19:02] <finanalyst> tbrowder: I'm told you're the person to ask about the behaviour of --doc=Module in perl6

[19:02] <tbrowder> finananlyst: hi, long time no see!

[19:02] *** cpan-p6 left
[19:02] <finanalyst> It calls Module::render twice

[19:03] <tbrowder> ugh, spelling..l

[19:03] <finanalyst> jbrowder: relocated from Hong Kong to UK. 

[19:03] <finanalyst> Only just settling in

[19:03] *** jmerelo left
[19:03] *** cpan-p6 joined
[19:03] *** cpan-p6 left
[19:03] *** cpan-p6 joined
[19:04] <finanalyst> tbrowder: spelling? I'm English :)

[19:04] <tbrowder> i'm sorry i can't answer about doc=Module. and i'm behind on my self-inflicted todo list :-(

[19:04] <tbrowder> i meant my finger fumbling

[19:05] <finanalyst> i found the issue a while ago. JJ said I might need to deal with it myself. It might be in nqp

[19:05] <cpan-p6> New module released to CPAN! ORM::ActiveRecord (0.0.6) by 03GDONALD

[19:06] <finanalyst> Basically, I tried to replace --doc=HTML with --doc=HTML2 (my module), but HTML2 was 2x slower

[19:06] <finanalyst> Couldn't work out why. Then I found HTML2::render was called twice.

[19:06] <tbrowder> i think he's right.

[19:07] <finanalyst> Couldn't think how to work around the problem. Any hints?

[19:07] <finanalyst> JJ said the ast tree wasn't being passed to the render ????

[19:09] <tbrowder> does the output look as expected?

[19:10] <sena_kun> finanalyst, I am sorry to jam in, but do you know the two places where the module is called? I mean the stacktraces.

[19:10] <sena_kun> if you know the second path, you can likely trace it down to why it happens and write a patch

[19:11] <finanalyst> sena_kun: thanks for the help. I reduced the problem to a short class with a do nothing render function. That was some months ago. I will need to go back and look. 

[19:13] <sena_kun> finanalyst, you can add `note Backtrace.new.Str` inside of the `render` function and get the code that calls it.

[19:13] * sena_kun goes afk

[19:13] <finanalyst> sena_kun: just about to ask you that. You're a mind reader

[19:20] <tbrowder> sena_kun: does the bactrace show nqp code?

[19:31] *** chloekek joined
[19:33] <sena_kun> tbrowder, dunno, but it should

[19:33] <tbrowder> ok, thnx.

[19:35] <tbrowder> btw, i published my version of a File::Copy module which you helped me with. i would appreciate any suggestions or bug reports.

[19:36] <sena_kun> tbrowder, saw that, was very happy to see inlined documentation. :)

[19:38] <tbrowder> well, that is my first use of it. formatting could use some work from the pod handler in core, but that is NYI.

[19:38] *** awwaiid joined
[19:41] <tbrowder> the module definitely needs some tweaking. for instance, i'm not real sure about when one really needs to specify .IO on a name.

[19:41] <tbrowder> afk..

[19:41] <Doc_Holliwood> i hate inline documentation. 

[19:42] <Doc_Holliwood> it's so distracting

[19:43] <El_Che> Doc_Holliwood: indeed

[19:43] <guifa> Doc_Holliwoo: it depends on the project, I think.  

[20:00] *** chloekek left
[20:26] <finanalyst> sena_kun: Backtrace does not provide much info. My Pod::To::HTML2 has a `sub render($podtree)` function with `note Backtrace ...` and `say $podtree` . Backtrace only gives the line numbers of these two statements, twice for each call to perl6 --doc=HTML2

[20:27] <sena_kun> finanalyst, this is odd. :/ how can I try to reproduce it?

[20:30] <finanalyst> sena_kun: Write a short module Pod::To::HTML2 , eg. .../lib/Pod/To/HTML2.pm6 . Have a sub render($pod) is export with just a say. In directory ... run `perl6 --doc=HTML2 -I lib some-perl6-prog-with-pod-in-it.p6`

[20:30] <finanalyst> sena_kun: is that clear?

[20:31] <sena_kun> finanalyst, should be, let me see...

[20:34] <sena_kun> finanalyst, I am getting "No such symbol 'Pod::To::Foo'" for `perl6 -Ilib --doc=Foo a.pm6` and `lib/Pod/To/Foo.pm6` contains `sub render($pod) is export {...}`

[20:35] <MasterDuke> does `Backtrace.new.full` give more useful info?

[20:37] <finanalyst> sena_kun: trying to send you my HTML2.pm6 file by IRC. 

[20:37] <finanalyst> I can cancel if this is bad ettiquette

[20:38] <finanalyst> MasterDuke: trying ...full

[20:38] <sena_kun> well, I am trying to get it, but the connection is not going anywhere...

[20:39] <sena_kun> finanalyst, and timeout. :S

[20:41] <sena_kun> finanalyst, ok, changed that to class and `render` being a method, now it works, and is indeed called twice

[20:42] <sena_kun> and backtrace is not horribly helpful even with .full

[20:42] <finanalyst> sena_kun: https://pastebin.com/z3zUssgZ

[20:42] <MasterDuke> also, instead of manually inserting Backtraces, you could --profile=foo.sql and then look at the profile in moarperf. it'll give you callers/callees of functions

[20:45] <finanalyst> sena_kun: my bad. I'm just coming back to the Module after a long time, and forgot the detail.

[20:45] <sena_kun> finanalyst, no problem, and the thing I suggested is useless anyway, as I see...

[20:47] <finanalyst> I raised this as an issue somewhere, in rakudo I think, when I first came across it. But it is a low priority thing.

[20:47] <sena_kun> https://github.com/rakudo/rakudo/issues/2588

[20:49] <finanalyst> I have rewritten Pod::To::HTML so that everything is in templates. That way, the same Module could be used to render eg MarkDown by changing the templates. But the Module is 2x slower than the standard Pod::To::HTML and I can;t work out why

[20:49] <finanalyst> I think Pod::To::HTML (the default for perl6) is special-cased in some way inside perl6

[20:50] <finanalyst> s/perl6/rakudo/

[20:53] *** zakharyas left
[20:54] <sena_kun> ok, so I see it is installed to be called in Actions.nqp, method `install_doc_phaser`

[20:55] <sena_kun> the rule in Grammar.nqp is token install_doc_phaser { <?> } which obviously always matched, and is referenced in `comp_unit` rule

[20:55] <sena_kun> the question is how many times `comp_unit` rule is matched for this situation we are in

[20:56] <MasterDuke> finanalyst: i'm not sure what special casing there would be. have you looked at any profiles of the default compared to using your module?

[20:57] <sena_kun> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L1416

[20:57] <sena_kun> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L833

[20:57] <sena_kun> maybe the fix is to check if it was called once?

[20:58] <sena_kun> unfortunately, I am not much of a core hacker to know how to do that

[21:00] <finanalyst> I tried to use a state variable in the render method, but since the method is being called by the compiler, it isn't recognising existing state.

[21:00] <sena_kun> finanalyst, I mean to check if the phaser is already installed in rakudo itself, not in the module

[21:02] <lizmat> weekly: https://perl6.eu/historical-intersection.html

[21:02] <notable6> lizmat, Noted! (weekly)

[21:03] <finanalyst> MasterDuke: "looked at profiles of the default ..." I haven't because I don't know how. I'm running on Ubuntu. Can a profile be generated with perl6, or do I need another tool?

[21:03] <MasterDuke> finanalyst: there's a built in profiling tool

[21:05] <MasterDuke> `perl6 --profile` will create an html file you can just open in a browser. if the file is too big for the browser or you want some more functionality, timotimo++ is working on https://github.com/timo/moarperf. you use it with .sql files from the profiler

[21:06] <MasterDuke> https://docs.perl6.org/language/performance#Profile_locally has some more details/examples

[21:07] <sena_kun> MasterDuke, the profiler says `render` is called twice for core#sources/D47B7F04B51CBB19CDF1E266B32AF87ACAE3A08B (Pod::To::Text):3 too

[21:07] <sena_kun> as well as for /home/koto/Devel/tester/lib/Pod/To/Foo.pm6 (Pod::To::Foo):3

[21:07] <sena_kun> so that means that it is a universal bug

[21:07] <MasterDuke> yep, looks like

[21:08] * sena_kun left a comment at https://github.com/rakudo/rakudo/issues/2588#issuecomment-536341002

[21:11] <finanalyst> MasterDuke: was just reading about profiling, then came back here. I see that sena_kun has already identified there is a double call, but the default still works 2x faster than mine. I'll work on this more

[21:13] <MasterDuke> cool, hope the profiles help

[21:13] *** krychu joined
[21:16] *** Xliff joined
[21:17] <Xliff> \o

[21:21] *** perlmaros left
[21:37] *** molaf joined
[21:38] *** Ven`` joined
[21:38] <finanalyst> MasterDuke: Something odd with Pod::To::HTML. I cloned it locally, then ran perl6 --I <path to local lib> --doc=HTML and I got an error that there is no render method. True Pod::To::HTML is written using sub's. So how does rakudo  use Pod::To::HTML?

[21:40] <MasterDuke> finanalyst:i'm not sure, i haven't looked at how the doc stuff is implemented in a while, definitely not since the recent refactor

[21:41] <MasterDuke> but i'd suggest looking at the output of --target=ast

[21:41] <MasterDuke> when it's working

[21:41] <MasterDuke> that should show you what's going to be executed

[21:42] <finanalyst> MasterDuke: Thanx. Getting late for me. Fuzzy thinking now. I'll look again tomorrow.

[21:43] <MasterDuke> same here. i'd also suggest .asking jmerelo, he might be able to give a definite answer

[21:44] <sena_kun> ast has two `QAST::Op(callmethod render)`

[21:44] <finanalyst> JJ doesn't know. He suggested asking TBrowder, who also can't remember.

[21:46] <finanalyst> At first glance, it seems that rakudo uses the Pod::To::HTML module to create HMTL. But that doesn't seem to be true.

[21:49] <finanalyst> or perhaps not the whole truth

[21:49] *** sena_kun left
[21:52] <MasterDuke> finanalyst: hm, i can repro. `perl6 -I Pod-To-HTML/lib/ --doc=HTML -e ''` gives `No such method 'render' for invocant of type 'Pod::To::HTML'`

[21:52] <finanalyst> yes thats what I get. 

[21:54] <tbrowder> try adding a mini pod block in the expression

[21:54] <MasterDuke> same with `-e '=pod hi'`

[21:55] <tbrowder> the incantation looks wrong

[21:56] <MasterDuke> finanalyst: do you get the same thing if you install Pod::To::HTML with zef and don't try to -I the local clone?

[21:57] <finanalyst> i'm trying that now

[21:57] <finanalyst> I tried to install a local version of Pod::To::HTML and it didn't work

[21:58] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/09/perl-weekly-challenge-27-intersection-point-and-historical-values.html

[21:58] <notable6> lizmat, Noted! (weekly)

[22:00] <finanalyst> MasterDuke: uninstalled Pod::To:HTML, then installed. --doc=HTML does not work at all!!!!!

[22:00] *** pecastro left
[22:00] <finanalyst> 'no such method 'render' for invocant of type ....

[22:01] <MasterDuke> finanalyst: i'd suggest creating an issue in the repo

[22:02] <MasterDuke> but i'm to bed. later all...

[22:02] <tbrowder> bye

[22:02] <finanalyst> me too. goodnight

[22:03] <tbrowder> g'night

[22:03] *** finanalyst left
[22:17] *** khisanth_ left
[22:30] *** khisanth_ joined
[22:42] *** krychu left
[22:55] *** Doc_Holliwood left
[23:03] *** Ven`` left
[23:06] *** lucasb left
[23:14] *** redhands joined
[23:35] *** uvb joined
[23:39] *** uvb left
