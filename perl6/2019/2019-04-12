[00:00] <ctilmes_> I stand corrected -- it does not work

[00:01] <ctilmes_> I went back to the module I thought I used it in -- I mapped the same symbol to multiple different subs, then had multi methods call the right sub

[00:06] <guifa> If you have a multidimension hash, is there a better way to loop through several dimensions while capturing each level‚Äôs key other than for %h.keys -> $a {¬†for %h{$a}.keys -> $b {¬†for %h{$a}{$b}.keys -> $c {¬†do something }}} ?

[00:10] <Juerd> guifa: I don't know. I suspect not.

[00:10] <Juerd> guifa: But note that the term "multidimensional hash", although conceptually sufficient to describe the thing, is actually a hash with hashes in it.

[00:11] <Juerd> guifa: The easiest generic approach is probably a recursive function, although that has its obvious limits.

[00:12] <Juerd> Or a stack of things to iterate over

[00:12] <guifa> Yeah.  I may come up with a generic solution fo some sorts where I could do

[00:13] <guifa> for %hash.multilevel(3) -> $level-1, $level-2, $level-3 { ‚Ä¶ }

[00:14] * guifa . o O ( actually, that‚Äôd be a really useful hash util function, come to think of it )

[00:25] <Juerd> my %hoh = foo => { bar => 1, xyzzy => { quux => 42 }, baz => { aoeu => { snth => 23 } } }; my @stack = :%hoh; while @stack { my $p = @stack.shift; for $p.value.pairs -> $p { when $p.value ~~ Hash { @stack.append: $p; }; say "$p.key() is $p.value()"; } }

[00:25] <evalable6> Juerd, rakudo-moar e6cbbcc82: OUTPUT: ¬´bar is 1‚ê§quux is 42‚ê§snth is 23‚ê§¬ª

[00:29] <Juerd> If you only care about values

[00:29] <Juerd> my %hoh = foo => { bar => 1, xyzzy => { quux => 42 }, baz => { aoeu => { snth => 23 } } }; say gather { %hoh.deepmap({ $_ }) }

[00:29] <evalable6> Juerd, rakudo-moar e6cbbcc82: OUTPUT: ¬´()‚ê§¬ª

[00:29] <Juerd> Er

[00:29] <Juerd> my %hoh = foo => { bar => 1, xyzzy => { quux => 42 }, baz => { aoeu => { snth => 23 } } }; say gather { %hoh.deepmap({ .take }) }

[00:29] <evalable6> Juerd, rakudo-moar e6cbbcc82: OUTPUT: ¬´(23 1 42)‚ê§¬ª

[00:33] *** lucasb left
[00:34] *** cpan-p6 left
[00:34] *** cpan-p6 joined
[00:34] *** cpan-p6 left
[00:34] *** cpan-p6 joined
[00:39] *** Kaiepi left
[00:40] *** vrurg left
[00:41] *** zachk left
[00:42] *** zachk joined
[00:44] *** zachk left
[00:49] *** demanuel left
[00:55] <guifa> Juerd: this is what I went with. 

[00:55] <guifa> https://tio.run/##1ZJNTsMwEIXX9immlSvFyK1UKrEgapsVLEDcwQGXRHHSyGksRZAdF@JH4ha9BAcJHieEfXfd2H7jvDefoymV0VddlzcwS2SVwBoCSiSsNzBzB3J8H4/k582LpejFF4rLQXyjWHnBcT1@nOj7PM2HS3yW1I9nSc1DSnd7A3mtD2mmmsBPj1gJuLZS14rDfANMy0NaCGDPRqnM7dneKImFos5jZeCFkko2ML3H7yCtRsctGnxhsN55p6/8hTz0GVjq46YhbSmlVR2PWBCwxLXTyipdCbiISgfIPKGb9BupK0fqKNz4RyakBJ/EWLLIrOdHZov3JDILWZaqeAqGMJjDErbb/x/A7NgI7wS8YjOWcZhMIBiEcEAW0h30DJxzSlrq0mnbdb8

[00:56] <guifa> err copied wrong version

[00:56] *** w_richard_w joined
[00:57] <Xliff> m: „Ñ±.uniname.say

[00:57] <evalable6> Xliff, rakudo-moar e6cbbcc82: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/FOFbWiNwdS‚ê§Undeclared routine:‚ê§    „Ñ± used at line 1‚ê§‚ê§¬ª

[00:57] <Xliff> u: „Ñ±

[00:57] <unicodable6> Xliff, U+3131 HANGUL LETTER KIYEOK [Lo] („Ñ±)

[00:57] <Xliff> Is that the HANGUL equivalent of A?

[00:57] <guifa> https://tio.run/##1VJLTsMwEF3bp5hWrpQgt1KpxIKobVawAHEHl7okipNGdmMpguy4EB@JW/QSHCR4nDTsu@vG8RvP@2Q0pdTqpm3zGiaJMAksIaBEwHIFE3chx4/hSn7fPZjzDnwjuO7BD4KFByGex88zeV/n8fDYXGTq54tMHUaU7vYa8kod0kzWgd8evuBwa4WqZAjTFTAlDmnBgb1oKTP3zfZaCiwUVb6RGl4pMaKG8SP2QWoGxj0SfKGnPnimr5xEnjoNLHVy44g2lFJTbYZYELDE2SlppTIcruLSBWQ@odv0O6GMS@pSuPWPdUQJ/hJLZpn18TGyxWcS65koS1ls/bB6PZjCHBCT9fp/EMwOhtjA4Q1NnVbvG3aU0QiC04tLaSHdQd8Q4owpaaizpU3b/gE

[00:57] <guifa> Corrected one

[00:58] <guifa> Korean equivalent of K

[00:58] <Xliff> Why K?

[00:58] <Xliff> And what are the others? =)

[00:58] <guifa> First letter of their alphabet :P 

[00:58] <Xliff> So it is the equivalent of A

[00:58] <guifa> Well, in the ordinal sense yes :-)

[00:59] <Xliff> Hahaha! :)

[00:59] *** MidCheck joined
[00:59] <guifa> That multikey function is going to help out so much with parsing the CLDR where I sometimes have a 6-level nested hash :(

[01:25] *** llfourn joined
[01:27] *** buffet_ joined
[01:29] *** buffet left
[01:30] *** llfourn left
[01:32] <Xliff> guifa: Nice! Good luck!

[01:32] <guifa> I‚Äôm like this close || to releasing a huge update for number formatting.

[01:33] <guifa> Probably release it tomorrow at some point

[01:43] *** ctilmes_ left
[01:46] *** ctilmes_ joined
[02:27] *** ctilmes_ left
[02:32] *** ctilmes_ joined
[02:43] *** stux|RC-only joined
[02:47] *** i1nfusion left
[02:48] *** i1nfusion joined
[02:50] *** ctilmes_ left
[02:51] *** Kaiepi joined
[03:11] *** kiwi_45 joined
[03:18] *** zacts left
[03:26] *** llfourn joined
[03:26] *** netrino left
[03:26] *** bleep joined
[03:30] *** llfourn left
[03:42] *** bleep left
[03:44] *** bleep joined
[03:50] *** zacts joined
[04:03] *** atroxaper joined
[04:09] *** MidCheck left
[04:21] *** Kaiepi left
[04:29] *** andrzejku joined
[04:35] *** Xliff_ joined
[04:38] *** Xliff left
[05:18] *** bleep left
[05:25] *** bleep joined
[05:27] *** llfourn joined
[05:28] *** jmerelo joined
[05:30] *** bleep left
[05:32] *** llfourn left
[05:32] *** khisanth_ left
[05:33] *** robertle left
[05:45] *** cpan-p6 left
[05:45] *** cpan-p6 joined
[05:45] *** cpan-p6 left
[05:45] *** cpan-p6 joined
[05:46] *** khisanth_ joined
[05:47] <Geth> ¬¶ doc: daee46f091 | (JJ Merelo)++ | doc/Language/operators.pod6

[05:47] <Geth> ¬¶ doc: Comments >> on list of Callables, closes #1643

[05:47] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/daee46f091

[05:47] <synopsebot> Link: https://doc.perl6.org/language/operators

[05:52] <discord6> <Tyler (Aearnus)> hey y'all, i wrote some code to manipulate notes & chords on a stringed instrument (not in perl6) https://github.com/Aearnus/chord-finder/blob/master/src/Chords.hs is there any module like this in perl6 though? i'd much rather be writing my full application in that

[06:02] *** irco joined
[06:02] *** oftl joined
[06:02] <jmerelo> Tyler: not as far as I know... Check out modules.perl6.org

[06:04] <masak> aearnus: cool!

[06:05] <masak> aearnus: https://github.com/Aearnus/chord-finder/blob/master/src/Chords.hs#L31 -- surely there must be some shorter way to write that in Haskell? some kind of abstraction that means "N iterated `succ` calls"

[06:12] <masak> aearnus: something based on https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:iterate maybe

[06:16] *** w_richard_w left
[06:19] *** andrzejku left
[06:22] <discord6> <Tyler (Aearnus)> jmerelo: thanks for that link!

[06:22] <discord6> <Tyler (Aearnus)> masak: there's the incNote function there that I should be using but I haven't rewritten it yet :^)

[06:23] <masak> aearnus: it felt like a case of (f^n)(x) if you know what I mean :)

[06:24] <discord6> <Tyler (Aearnus)> indeed it does... is that something perl6 can do?

[06:29] *** ravenousmoose_ left
[06:32] *** Kaiepi joined
[06:42] *** domidumont joined
[06:43] *** kiwi_45 left
[06:45] *** jmerelo left
[06:51] <masak> m: multi infix:<**>(&fn, Int $n) { -> $v { my $result = $v; $result.=&fn() for ^$n; $result } }; sub inc($n) { $n + 1 }; say (&inc ** 30)(12)

[06:51] <evalable6> masak, rakudo-moar 0f3bdfb82: OUTPUT: ¬´42‚ê§¬ª

[06:52] <masak> aearnus: ^

[06:52] *** zacts left
[07:04] *** dalek left
[07:05] *** dalek joined
[07:05] *** ChanServ sets mode: +v dalek

[07:05] *** SmokeMachine left
[07:05] <discord6> <Tyler (Aearnus)> ah, sweet!

[07:06] *** SmokeMachine joined
[07:06] *** p6lert_ left
[07:06] *** synopsebot left
[07:07] *** Geth left
[07:11] *** rindolf joined
[07:16] *** i1nfusion left
[07:17] *** i1nfusion joined
[07:17] <moritz> m: sub inc($n) { $n + 1 }; say ([o] &inc xx 10)[12]

[07:17] <evalable6> moritz, rakudo-moar 0f3bdfb82: OUTPUT: ¬´(exit code 1) Index out of range. Is: 12, should be in 0..0‚ê§  in block <unit> at /tmp/cQ9_3fWbJv line 1‚ê§‚ê§¬ª

[07:17] <moritz> m: sub inc($n) { $n + 1 }; say ([o] &inc xx 10)(12)

[07:17] <evalable6> moritz, rakudo-moar 0f3bdfb82: OUTPUT: ¬´22‚ê§¬ª

[07:18] <moritz> using the built-in o operator for function composition in reduce mode :D

[07:19] *** ravenousmoose joined
[07:19] <discord6> <Tyler (Aearnus)> üòÆ

[07:21] <moritz> today, I feel like a functional wizard :D

[07:28] *** llfourn joined
[07:33] *** llfourn left
[07:38] <masak> moritz: you will always be my functional wizard <3

[07:38] <masak> like the one on the cover of the SICP book

[07:39] <moritz> masak: :-)

[07:39] <masak> "behold, the holy eval/apply ball!"

[07:39] <moritz> I usually get the impression that you work much better with all that functional stuff than me

[07:40] <masak> that's very nice of you to say

[07:40] <masak> I'm just an amateur, really. but a dedicated one.

[07:41] <masak> I went back not long ago and re-read nothingmuch's Harrorth diary, and discovered to my delight that Haskell (up to and including the Writer monad) isn't weird black magic to me anymore

[07:42] <discord6> <Tyler (Aearnus)> it's kind of my style to get familiar enough with a language to destroy it in awful, black magick-y ways

[07:42] <discord6> <Tyler (Aearnus)> perl6 included

[07:43] <discord6> <Tyler (Aearnus)> this was my Haskell magnum opus https://github.com/Aearnus/type-level-fib/blob/master/main.hs

[07:44] *** atroxaper left
[07:44] <moritz> so far, I have had tried three incursions in Haskell land

[07:45] <moritz> in the first, everything was weird, and I didn't understand much

[07:45] <moritz> in the second, things up to and excluding monads made sense

[07:45] <moritz> in the third, I had the feeling that I understood monads and their purpose, but I still couldn't manage to get any program to compile that contained monads

[07:47] <El_Che> moritz: you're on a higher plain of existence now. I wonder if you can hear me

[07:48] <discord6> <Tyler (Aearnus)> m: role Monad[::A] { only method bind((&f where (.signature.elems ~~ 1 and .returns ~~ :(::A))) --> ::A) { ... }; only method wrap(::T --> Monad[::A]) { ... } }

[07:48] <moritz> El_Che: I bounced back right to this plane of existence after the haskell compiler told me in no uncertain terms "no, you just *think* you understood it"

[07:48] <discord6> <Tyler (Aearnus)> üò† evalable6 doesn't work through IRC-discord boundaries

[07:48] <El_Che> hehe

[07:48] <moritz> m: role Monad[::A] { only method bind((&f 

[07:48] <moritz>                   where (.signature.elems ~~ 1 and .returns ~~ :(::A))) --> 

[07:48] <evalable6> moritz, rakudo-moar 0f3bdfb82: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/PR9AK0XRPo‚ê§Malform‚Ä¶¬ª

[07:48] <evalable6> moritz, Full output: https://gist.github.com/3cf4a6fb0f23af036c0f2ff36c60c6bd

[07:48] <moritz> eeks

[07:49] <moritz> m: role Monad[::A] { only method bind((&f where (.signature.elems ~~ 1 and .returns ~~ :(::A))) --> ::A) { ... }; only method wrap(::T --> Monad[::A]) { ... } }

[07:49] <evalable6> moritz, rakudo-moar 0f3bdfb82: OUTPUT: ¬´¬ª

[07:49] <discord6> <Tyler (Aearnus)> looking back on it, i don't think that code's even right

[07:49] *** eseyman joined
[08:06] *** dakkar joined
[08:09] *** llfourn joined
[08:20] *** [Sno] left
[08:22] *** epony left
[08:23] *** [Sno] joined
[08:32] *** zakharyas joined
[08:35] *** ravenousmoose left
[08:43] <kawaii> I assume unpublishing a module from the ecosystem is as simple as making a PR to that repo to remove the line to the module

[08:43] <moritz> that's correct

[08:44] <lizmat> kawaii: and if it's on CPAN, remove all of the distributions from CPAN

[08:55] *** w_richard_w joined
[08:58] *** epony joined
[09:07] *** zacts joined
[09:18] *** zacts left
[09:18] *** w_richard_w left
[09:24] *** kurahaupo joined
[09:27] *** Black_Ribbon left
[09:48] *** domidumont left
[09:48] *** |oLa| joined
[09:50] *** cpan-p6 left
[09:50] *** cpan-p6 joined
[09:50] *** cpan-p6 left
[09:50] *** cpan-p6 joined
[09:52] *** domidumont joined
[09:53] *** epony left
[09:54] *** epony joined
[09:55] *** Geth joined
[09:55] *** ChanServ sets mode: +v Geth

[09:59] *** domidumont left
[10:00] *** demanuel joined
[10:09] *** buffet_ is now known as buffet

[10:16] *** ctilmes left
[10:20] *** atroxaper joined
[10:20] *** atroxaper left
[10:20] *** netrino joined
[10:21] *** atroxaper joined
[10:22] *** jeromelanteri joined
[10:28] *** ctilmes joined
[10:30] *** ctilmes_ joined
[10:31] *** MidCheck joined
[10:52] <SmokeMachine> Is there a way where I could modify the Scalar class to call one of its methods without need to call `.VAR`?

[10:53] <timotimo> all method calls will decont before invoking, unless you put a .VAR in front, i believe

[10:53] <SmokeMachine> m: subset Bla of Any; my Bla $a = 42; say $a.VAR.of

[10:53] <evalable6> SmokeMachine, rakudo-moar f1c80fdd9: OUTPUT: ¬´(Bla)‚ê§¬ª

[10:55] *** dotdotdot left
[10:55] <SmokeMachine> timotimo: Im trying to create a type of subset with methods... I was thinking on creating a fallback on Scalar if its `.of` is of this kind of subset it would run its methods...

[10:57] <SmokeMachine> so I could do something like: every value that match this subset automatically has this method...

[10:57] *** dotdotdot joined
[11:00] <atroxaper> Does somebody know how WRITE/READ methods work in IO::Handle? Can not find code for that in Rakudo/MoarVM/nqp. I want to write my IO::Handle for writing and worry about buffering. Need I '.out-buffer = False' in case I need to turn it off in custom IO::Handle?

[11:00] <SmokeMachine> class C {method ble { 42 }}; protocol Bla { method ble { ... }; method say-ble { say self.ble } }; my Bla $a = C.new; $a.say-ble # prints 42

[11:00] <SmokeMachine> Im trying to make this possible...

[11:00] <SmokeMachine> it looks like a role, but its different from a role because I don need to do `class C does Bla`...

[11:01] <timotimo> that's not how that works :)

[11:01] <timotimo> if you don't assign the value to something that is .of that subset, it won't have the methods

[11:01] *** patrickb joined
[11:12] *** agentzh left
[11:15] *** aborazmeh joined
[11:15] *** aborazmeh left
[11:15] *** aborazmeh joined
[11:19] *** agentzh joined
[11:19] *** agentzh left
[11:19] *** agentzh joined
[11:29] *** sena_kun joined
[11:29] <timotimo> how do y'all feel about adding methods to Buf that is a combination of buf8.new and .write-[u]int[8|16|32|64|128], and maybe also adding .write-* and .read-* to IO::Handle?

[11:44] *** ctilmes_ left
[11:53] *** zakharyas left
[11:53] *** ctilmes_ joined
[11:59] *** abraxxa left
[12:00] *** abraxxa joined
[12:00] *** abraxxa left
[12:06] *** jeromelanteri left
[12:18] *** jeromelanteri joined
[12:19] <SmokeMachine> timotimo: do you know where it is deconted?

[12:20] <timotimo> somewhere in code gen / compilation i guess?

[12:21] *** i1nfusion left
[12:21] <SmokeMachine> do you know where the .VAR is implemented?

[12:22] *** jeromelanteri left
[12:22] *** i1nfusion joined
[12:24] <jnthn> SmokeMachine: It's a primitive, grep for `p6var`

[12:24] <SmokeMachine> jnthn: thanks

[12:26] <SmokeMachine> I think my example will have to be used like: `Bla.say-ble: $a`

[12:32] *** aborazmeh left
[12:34] *** ctilmes_ left
[12:41] *** MidCheck left
[12:41] <SmokeMachine> m: subset Bla of Any; multi infix:<call>($var is raw where { .VAR.of ~~ Bla }, $meth) { $var.VAR.of."$meth"($var) }; my Bla $a = 42; $a call "ble" # maybe I'll need something like this...

[12:41] *** ctilmes_ joined
[12:41] <evalable6> SmokeMachine, rakudo-moar f1c80fdd9: OUTPUT: ¬´(exit code 1) No such method 'ble' for invocant of type 'Bla'‚ê§  in sub infix:<call> at /tmp/IouxH_nQ8u line 1‚ê§  in block <unit> at /tmp/IouxH_nQ8u line 1‚ê§‚ê§¬ª

[12:43] <SmokeMachine> is there any way to remove the needed " from the method name without macros and is parsed?

[12:43] *** domidumont joined
[12:45] *** committable6 left
[12:45] *** committable6 joined
[12:45] *** unicodable6 left
[12:46] *** unicodable6 joined
[12:46] *** ribasushi left
[12:48] <jnthn> No

[12:49] <jnthn> Well, unless you have a method ref rather than method name in $meth

[12:50] *** ribasushi joined
[12:51] <SmokeMachine> I mean on the infix call...

[12:51] <SmokeMachine> my %m = bla => my method bla() { "bla: { self }" }; subset Bla of Any; multi infix:<!!>($var is raw where { .VAR.of ~~ Bla }, $meth) { %m{$meth}.assuming: $var }; my Bla $a = 42; say ($a!!"bla")()

[12:51] <evalable6> SmokeMachine, rakudo-moar f1c80fdd9: OUTPUT: ¬´bla: 42‚ê§¬ª

[12:53] *** domidumont1 joined
[12:56] *** domidumont left
[12:57] *** harrison joined
[13:01] <jnthn> Oh, no, that's certainly in langauge tweak territory

[13:19] *** aborazmeh joined
[13:19] *** aborazmeh left
[13:19] *** aborazmeh joined
[13:21] *** synopsebot joined
[13:21] *** ChanServ sets mode: +v synopsebot

[13:24] *** vrurg joined
[13:28] *** skids joined
[13:32] *** lucasb joined
[13:41] *** mowcat left
[13:53] *** aborazmeh left
[13:55] *** zakharyas joined
[13:58] *** MidCheck joined
[14:18] *** cpan-p6 left
[14:18] *** cpan-p6 joined
[14:18] *** cpan-p6 left
[14:18] *** cpan-p6 joined
[14:25] *** domidumont joined
[14:27] *** domidumont1 left
[14:34] *** telex left
[14:35] *** kaare__ left
[14:36] *** telex joined
[14:39] *** harrison left
[14:47] *** kurahaupo left
[14:53] *** skids left
[15:02] *** robertle joined
[15:03] *** tyil left
[15:04] *** tyilanmenyn joined
[15:05] *** MilkmanDan left
[15:05] *** MilkmanDan joined
[15:13] *** tyilanmenyn left
[15:14] *** tyilanmenyn joined
[15:15] *** tyilanmenyn is now known as tyil

[15:20] *** jmerelo joined
[15:20] <jmerelo> releasable6: status

[15:20] <releasable6> jmerelo, Next release in ‚âà8 days and ‚âà3 hours. 12 blockers. 0 out of 197 commits logged

[15:20] <releasable6> jmerelo, Details: https://gist.github.com/c8e47d33810232343e6fb33f7f519b94

[15:33] <Woodi> hi #perl6

[15:33] <sena_kun> o/

[15:38] <Woodi> C++ have RVO optimisation and looks like using pointer to variable that will be assigned when function returns. so function do not need to create tmp value + one less copy... do we have such thing in Moar ?   https://en.wikipedia.org/wiki/Copy_elision

[15:38] <sena_kun> Woodi, perhaps #moarvm?

[15:39] <Woodi> right...

[15:52] *** zakharyas left
[15:54] <jmerelo> If no one is against, next Squashathon is going to be about...

[15:54] <jmerelo> ... wait for it ...

[15:54] <jmerelo> ... documentation

[15:55] *** domidumont left
[15:56] <jmerelo> I know last one wasn't very successful, but lately there's been very little movement there. Last commit by non-me was 4 days ago, and this last month has seen the lowest number in contributions in like years.

[15:56] <jmerelo> So we need more people there. And a good introduction might be a squashathon.

[15:56] <jmerelo> So if no one is against it, I think that's going to be it. I will push the rest of the planned squashathons down one month.

[15:59] <Geth> ¬¶ docker: 60f1dd961d | (Jeremy Studer)++ | Dockerfile

[15:59] <Geth> ¬¶ docker: Update Rakudo Star version to 2019.03

[15:59] <Geth> ¬¶ docker: 

[15:59] <Geth> ¬¶ docker: This updates the Rakudo Star version to 2019.03 from 2018.10.

[15:59] <Geth> ¬¶ docker: 

[15:59] <Geth> ¬¶ docker: The maintainer for Rakudo Star changed between 2018.10 and 2019.03 so

[15:59] <Geth> ¬¶ docker: the existing fingerprint used to retrieve the key and verify the tarball

[15:59] <Geth> ¬¶ docker: is not valid for the new release. Updating to include the new

[15:59] <Geth> ¬¶ docker: <‚Ä¶commit message has 5 more lines‚Ä¶>

[15:59] <Geth> ¬¶ docker: review: https://github.com/perl6/docker/commit/60f1dd961d

[15:59] <Geth> ¬¶ docker: d203319367 | (Jeremy Studer)++ | Dockerfile

[15:59] <Geth> ¬¶ docker: Remove branching fingerprint selection

[15:59] <Geth> ¬¶ docker: 

[15:59] <Geth> ¬¶ docker: It is unnecessary. It is much easier to just include multiple

[15:59] <Geth> ¬¶ docker: fingerprints.

[15:59] <Geth> ¬¶ docker: review: https://github.com/perl6/docker/commit/d203319367

[16:00] <Geth> ¬¶ docker: 2c1918ca12 | (Jeremy Studer)++ (committed using GitHub Web editor) | Dockerfile

[16:00] <Geth> ¬¶ docker: Merge pull request #24 from jstuder-gh/update_to_2019.03

[16:00] <Geth> ¬¶ docker: 

[16:00] <Geth> ¬¶ docker: Update Rakudo Star version to 2019.03

[16:00] <Geth> ¬¶ docker: review: https://github.com/perl6/docker/commit/2c1918ca12

[16:04] *** vrurg left
[16:11] *** random_yanek left
[16:12] *** cpan-p6 left
[16:15] *** random_yanek joined
[16:18] *** cpan-p6_ joined
[16:18] *** cpan-p6_ left
[16:18] *** cpan-p6_ joined
[16:19] <Geth> ¬¶ doc: 21b82802cd | (JJ Merelo)++ | doc/Type/Metamodel/ConcreteRoleHOW.pod6

[16:19] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::ConcreteRoleHOW

[16:19] <Geth> ¬¶ doc: Adds stub for ConcreRoleHOW, although there's not much of it

[16:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/21b82802cd

[16:23] *** i1nfusion left
[16:24] *** Xliff_ left
[16:24] *** i1nfusion joined
[16:27] *** Xliff joined
[16:27] *** dakkar left
[16:34] *** i1nfusion left
[16:35] *** kurahaupo joined
[16:36] *** i1nfusion joined
[16:52] *** lucasb left
[17:01] *** i1nfusion left
[17:02] *** i1nfusion1 joined
[17:02] <jmerelo> squashable6: status

[17:02] <squashable6> jmerelo, Next SQUASHathon in 20 days and ‚âà18 hours (2019-05-04 UTC-14‚åÅUTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:23] *** ChoppedBacon joined
[17:32] *** dustinm` left
[17:37] *** dustinm` joined
[17:46] *** Kaiepi left
[17:46] *** skids joined
[17:51] *** ctilmes__ joined
[17:51] *** ctilmes_ left
[17:52] *** zakharyas joined
[17:53] *** zacts joined
[17:54] *** ctilmes left
[17:54] *** i1nfusion1 left
[17:54] <Xliff> m: my $a = 0; say $a.WHAT; say $a.WHERE; say $a.WHY; say $a.WHEN; say $a.HOW

[17:54] <evalable6> Xliff, rakudo-moar f1c80fdd9: OUTPUT: ¬´(exit code 1) (Int)‚ê§No such method 'WHEN' for invocant of type 'Int'. Did you mean any of ‚Ä¶¬ª

[17:54] <evalable6> Xliff, Full output: https://gist.github.com/030caa5008b1b10667fe767c2a5430ec

[17:54] <Xliff> m: my $a = 0; say $a.WHAT; say $a.WHERE; say $a.WHY; say $a.HOW

[17:54] <evalable6> Xliff, rakudo-moar f1c80fdd9: OUTPUT: ¬´(Int)‚ê§140223334613584‚ê§No documentation available for type 'Int'.‚ê§Perhaps it can be found at https://docs.perl6.org/type/Int‚ê§Perl6::Metamodel::ClassHOW.new‚ê§¬ª

[17:55] <Xliff> m: my $a = 0; say $a.WHAT; say $a.WHERE; say $a.HOW

[17:55] <evalable6> Xliff, rakudo-moar f1c80fdd9: OUTPUT: ¬´(Int)‚ê§139648950334032‚ê§Perl6::Metamodel::ClassHOW.new‚ê§¬ª

[17:55] *** i1nfusion joined
[17:55] <Xliff> .WHEN should return when the value was created.

[17:55] <Xliff> Or at least something silly like "42"

[18:01] <jmerelo> Xliff: there's a new problem-solving repo to propose that kind of things... :-)

[18:01] <Xliff> Oh? What's the link?

[18:01] <Xliff> Going to shoot stuff. BBL

[18:17] *** Sgeo__ joined
[18:20] *** Sgeo_ left
[18:31] *** atroxaper left
[18:31] *** zachk joined
[18:33] *** zachk left
[18:33] *** zachk joined
[18:34] *** zachk left
[18:34] *** zachk joined
[18:36] *** MidCheck left
[18:38] *** zakharyas left
[18:39] <jmerelo> Xliff: https://github.com/perl6/problem-solving :-) Sorry...

[18:40] <jmerelo> .tell Xliff https://github.com/perl6/problem-solving :-) Sorry...

[18:40] <yoleaux> jmerelo: I'll pass your message to Xliff.

[18:40] *** jmerelo left
[18:50] *** zacts left
[18:54] *** ctilmes__ left
[18:59] *** sena_kun left
[19:01] *** ctilmes joined
[19:04] *** vrurg joined
[19:06] *** kst` is now known as kst

[19:17] *** ctilmes_ joined
[19:17] *** ctilmes left
[19:22] *** ctilmes joined
[19:42] *** Kaiepi joined
[19:42] *** kurahaupo left
[19:43] *** kurahaupo joined
[19:46] *** i1nfusion left
[19:51] <Xliff> m: my %h; %a<a> = 1; %a<b> = 2; say %a<a>.WHERE; say %a<b>.WHERE

[19:51] <yoleaux> 18:40Z <jmerelo> Xliff: https://github.com/perl6/problem-solving :-) Sorry...

[19:51] <evalable6> Xliff, rakudo-moar f1c80fdd9: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Fa_bsgbFfD‚ê§Variable '%a' is not declared‚ê§at /tmp/Fa_bsgbFfD:1‚ê§------> 03my %h; 08‚èè04%a<a> = 1; %a<b> = 2; say %a<a>.WHERE; s‚ê§¬ª

[19:51] <Xliff> m: my %a; %a<a> = 1; %a<b> = 2; say %a<a>.WHERE; say %a<b>.WHERE

[19:51] <evalable6> Xliff, rakudo-moar f1c80fdd9: OUTPUT: ¬´139630733337208‚ê§139630733337248‚ê§¬ª

[19:51] *** Kaiepi left
[19:53] <Xliff> OK. .WHEN created.

[19:56] <Xliff> m: $a.HOW.say

[19:56] <evalable6> Xliff, rakudo-moar f1c80fdd9: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/mgWIprlmsm‚ê§Variable '$a' is not declared‚ê§at /tmp/mgWIprlmsm:1‚ê§------> 03<BOL>08‚èè04$a.HOW.say‚ê§¬ª

[19:56] <Xliff> m: my $a = 1; $a.HOW.say

[19:56] <evalable6> Xliff, rakudo-moar f1c80fdd9: OUTPUT: ¬´Perl6::Metamodel::ClassHOW.new‚ê§¬ª

[20:06] *** random_yanek left
[20:07] *** nekomune left
[20:09] *** SCHAPiE left
[20:10] *** nekomune joined
[20:12] *** SCHAAP137 joined
[20:14] *** SCHAAP137 is now known as SCHAPiE

[20:18] <Xliff> nqp ops list?

[20:18] <Xliff> Is there one?

[20:18] *** random_yanek joined
[20:19] <Xliff> nevermind

[20:19] <Xliff> https://github.com/perl6/nqp/blob/master/docs/ops.markdown

[20:21] <Xliff> time perl6 -e 'use nqp; class Foo { has $.WHEN = nqp::time_n(); }; for 1..1000000 { Foo.new }'

[20:23] *** nekomune left
[20:26] *** nekomune joined
[20:28] <Geth> ¬¶ doc: 9bc4630da6 | Coke++ | doc/Language/js-nutshell.pod6

[20:28] <synopsebot> Link: https://doc.perl6.org/language/js-nutshell

[20:28] <Geth> ¬¶ doc: whitespace

[20:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9bc4630da6

[20:28] <Geth> ¬¶ doc: 5a3a5f4417 | Coke++ | doc/Language/js-nutshell.pod6

[20:28] <Geth> ¬¶ doc: avoid variable redecl. errors when compiling

[20:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5a3a5f4417

[20:28] <Geth> ¬¶ doc: ef7677f904 | Coke++ | 2 files

[20:28] <Geth> ¬¶ doc: learn new words

[20:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ef7677f904

[20:40] *** ctilmes left
[20:52] *** Xliff left
[20:55] *** ChoHag left
[20:56] *** ChoHag joined
[20:57] *** Black_Ribbon joined
[21:18] *** skids left
[21:47] *** vrurg left
[21:47] *** Kaiepi joined
[21:47] *** vrurg joined
[21:48] *** ctilmes_ left
[21:48] *** ctilmes joined
[22:00] <patrickb> Just implemented support for zsh, fish and sh in rakudobrew \o/

[22:09] *** ctilmes_ joined
[22:11] *** ctilmes left
[22:11] *** Xliff joined
[22:12] <Xliff> \o

[22:24] *** cpan-p6_ left
[22:25] *** cpan-p6 joined
[22:25] *** cpan-p6 left
[22:25] *** cpan-p6 joined
[22:29] *** ctilmes_ left
[22:29] *** ctilmes joined
[22:50] <guifa> Is there any particular reason NOT to use hyper if there are no side effects in the block? Performance penalty if it‚Äôs constantly used with small loops?

[22:51] *** ayerhart left
[22:57] *** Summertime left
[22:58] *** Summertime joined
[23:07] <AlexDaniel> guifa: I don't see any other reason

[23:10] *** ayerhart joined
[23:11] *** ayerhart left
[23:11] *** ayerhart joined
[23:13] <AlexDaniel> weekly: over 31000 commits in rakudo! https://github.com/rakudo/rakudo

[23:13] <notable6> AlexDaniel, Noted!

[23:13] <ugexe> well its eager for one

[23:14] *** patrickb left
[23:14] <ugexe> and i'd say its not just the size of the loop, but more importantly if the work being done lends itself to the overhead

[23:25] <discord6> <Tyler (Aearnus)> guifa:'sometimes the overhead of starting extra threads just isn't worth it

[23:30] *** ayerhart left
[23:34] *** ayerhart joined
[23:45] <timotimo> every thread has its own nursery, which starts small, but it grows to 2 * 4 megabytes

[23:51] *** Manifest0 left
[23:53] *** zachk left
[23:56] *** Manifest0 joined
