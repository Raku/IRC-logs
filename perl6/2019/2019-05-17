[00:06] *** Kaiepi joined
[00:07] *** Manifest0 left
[00:09] *** eseyman left
[00:11] *** xiaoyafeng left
[00:12] *** Manifest0 joined
[00:18] *** eseyman joined
[00:20] *** Sgeo left
[00:22] *** zacts joined
[00:28] *** zacts left
[00:30] *** zacts joined
[00:34] *** sivoais left
[00:34] *** sivoais joined
[00:35] *** Manifest0 left
[00:39] *** zacts left
[00:40] *** Manifest0 joined
[00:45] *** Sgeo joined
[00:49] *** Manifest0 left
[00:55] *** Manifest0 joined
[01:00] *** zacts joined
[01:02] *** Manifest0 left
[01:04] *** zacts left
[01:07] *** Manifest0 joined
[01:26] *** aborazmeh left
[01:27] *** Manifest0 left
[01:33] *** Manifest0 joined
[01:40] *** qiqi joined
[01:48] *** Manifest0 left
[01:52] *** molaf left
[01:53] *** Manifest0 joined
[01:54] *** noisegul_ joined
[01:57] *** noisegul left
[02:03] *** Manifest0 left
[02:04] *** molaf joined
[02:05] *** Sgeo_ joined
[02:07] *** Manifest0 joined
[02:08] *** Sgeo left
[02:19] *** Manifest0 left
[02:24] *** Manifest0 joined
[02:26] *** squashable6 left
[02:29] *** kst joined
[02:30] *** squashable6 joined
[02:30] *** ChanServ sets mode: +v squashable6

[02:31] *** Manifest0 left
[02:38] *** Manifest0 joined
[02:53] *** Manifest0 left
[02:58] *** Manifest0 joined
[03:04] *** Manifest0 left
[03:09] *** epony left
[03:09] *** Manifest0 joined
[03:16] <AndroidKitKat> Is there a more graceful way to "pop" an item from the front of an array other than to delete[0]

[03:17] <AndroidKitKat> I'm used to Python lists where a .pop() removes an item from the front so if you had list = [1, 2, 3] and did num = list.pop()

[03:17] <AndroidKitKat> you would get 1

[03:19] <MasterDuke> AndroidKitKat: that's `shift` in perl (5|6)

[03:19] <AndroidKitKat> Thanks!

[03:19] <MasterDuke> np

[03:19] <AndroidKitKat> I was looking through the docs for that, appreciate it

[03:20] <AndroidKitKat> I must've failed reading comprehension lmao

[03:21] <MasterDuke> hm, wonder if the docs for `pop` should mention `shift`...

[03:23] *** xiaoyafeng joined
[03:25] *** Manifest0 left
[03:30] *** Manifest0 joined
[03:34] *** Manifest0 left
[03:35] <cpan-p6> New module released to CPAN! FileSystem::Parent (0.2.1) by 03LEMBARK

[03:37] *** xiaoyafeng left
[03:40] *** Manifest0 joined
[03:43] *** epony joined
[03:44] *** mowcat left
[03:50] *** Manifest0 left
[03:54] *** Manifest0 joined
[03:59] *** Manifest0 left
[04:05] *** Manifest0 joined
[04:06] *** grayrider joined
[04:18] *** cpan-p6 left
[04:20] *** cpan-p6 joined
[04:20] *** cpan-p6 left
[04:20] *** cpan-p6 joined
[04:24] *** Actualey` left
[04:29] *** Manifest0 left
[04:37] *** Manifest0 joined
[04:49] *** ayerhart joined
[04:50] *** curan joined
[04:59] *** qiqi left
[05:09] <holyghost> I'm off to my kids

[05:09] *** holyghost left
[05:12] <Geth> ¦ doc: Elronnd++ created pull request #2795: Replace "two's complement" with "logical negation" to better reflect the meaning and usage of the operator

[05:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2795

[05:15] <Elronnd> Arghh

[05:15] <Elronnd> why does it say logical negation

[05:17] *** sauvin joined
[05:22] *** ufobat__ left
[05:23] *** feldspath joined
[05:28] <Voldenet> bitwise negation may be technically incorrect when the two's complement doesn't match bitwise negation of the number

[05:28] *** qiqi joined
[05:28] *** Manifest0 left
[05:30] <Elronnd> is what it's doing not bitwise negation?

[05:31] <Voldenet> I'm not sure how is "163**251" stored or if it's even specified anywhere

[05:32] <Voldenet> bitwise negation implies that it flips the bits in given bytes

[05:33] <Elronnd> ohh because width is ambiguous

[05:34] <Voldenet> indeed, and length is certainly not flipped

[05:34] <Elronnd> hah

[05:34] <Elronnd> hmmm

[05:35] <Elronnd> I just think that _the_ two's complement is an odd phrasing because there are any number of those

[05:35] <Voldenet> https://docs.perl6.org/language/5to6-perlop does this right

[05:36] <Voldenet> >use prefix +^ for bitwise integer negation. Assumes two's complement.

[05:36] *** Manifest0 joined
[05:38] *** feldspath left
[05:40] *** Woodi left
[05:41] *** domidumont joined
[05:44] *** molaf left
[05:49] *** jmerelo joined
[05:49] <jmerelo> squashable6: status

[05:49] <squashable6> jmerelo, Next SQUASHathon in 13 days and ≈22 hours (2019-06-01 UTC-14⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[05:51] *** Manifest0 left
[05:54] <Geth> ¦ doc: a640eda155 | Elronnd++ | doc/Language/js-nutshell.pod6

[05:54] <Geth> ¦ doc: Replace "two's complement" with "bitwise negation" to better reflect the meaning and usage of the operator

[05:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a640eda155

[05:54] <Geth> ¦ doc: a69bccb37d | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/js-nutshell.pod6

[05:54] <Geth> ¦ doc: Merge pull request #2795 from Elronnd/master

[05:54] <synopsebot> Link: https://doc.perl6.org/language/js-nutshell

[05:54] <Geth> ¦ doc: 

[05:54] <Geth> ¦ doc: Replace "two's complement" with "bitwise negation" to better reflect the meaning and usage of the operator

[05:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a69bccb37d

[05:56] *** Manifest0 joined
[05:59] *** squashable6 left
[06:00] *** Manifest0 left
[06:02] <Elronnd> Has anyone used Terminal::Print?  How can I move the cursor to a specific spot?

[06:02] *** squashable6 joined
[06:02] *** ChanServ sets mode: +v squashable6

[06:03] <jmerelo> Elronnd: not me, sorry...

[06:03] <Elronnd> it looks really nice but...no docs, compared with ncurses

[06:04] <jmerelo> .seen japhb

[06:04] <yoleaux> I saw japhb 16 May 2019 17:58Z in #moarvm: <japhb> I love that algorithm.

[06:05] <jmerelo> Elronnd: you can try and talk to him in that channel ^^^

[06:05] <Elronnd> alright, I will take a look there

[06:06] <Elronnd> thanks!

[06:06] <jmerelo> Elronnd: sure. Good luck!

[06:06] <Elronnd> err, here is here too :P

[06:06] *** Manifest0 joined
[06:07] <Elronnd> japhb: do you know how I can move the cursor to a specific place with Terminal::Print?

[06:11] *** feldspath joined
[06:19] *** Manifest0 left
[06:22] *** Woodi joined
[06:24] *** ChoHag joined
[06:24] *** Manifest0 joined
[06:31] *** feldspath left
[06:35] *** feldspath joined
[06:39] *** Manifest0 left
[06:40] *** antoniogamiz joined
[06:45] *** Manifest0 joined
[06:48] *** jmerelo left
[06:50] *** Manifest0 left
[06:53] *** netrino joined
[06:53] *** feldspath left
[06:55] *** Manifest0 joined
[06:56] *** abraxxa joined
[06:59] *** feldspath joined
[07:07] *** ChoHag left
[07:08] *** Manifest0 left
[07:08] *** robertle joined
[07:10] *** lizmat joined
[07:14] *** Manifest0 joined
[07:14] *** feldspath left
[07:14] *** feldspath joined
[07:20] *** lizmat left
[07:20] *** Manifest0 left
[07:21] *** ChoHag joined
[07:23] *** feldspath_ joined
[07:23] *** woolfy left
[07:23] *** feldspath left
[07:25] *** Manifest0 joined
[07:28] <masak> morning, #perl6

[07:29] *** Actualeyes joined
[07:30] *** Manifest0 left
[07:33] <antoniogamiz> masak: o/

[07:33] <antoniogamiz> mm is there an operator to compare lists despite the order of the elements?

[07:36] *** rindolf joined
[07:37] *** Manifest0 joined
[07:43] <masak> antoniogamiz: if multiplicity also doesn't matter, I'd throw the lists into Sets, and compare

[07:43] <masak> antoniogamiz: otherwise, call .unique on both and compare

[07:43] *** Manifest0 left
[07:44] <masak> hm, I wonder if one could write an `infix:<eqv>` multi with an `:under(&transform)` adverb...

[07:45] *** feldspath_ left
[07:46] <masak> m: multi infix:<eqv>($l, $r, :under(&transform)!) { transform($l) eqv transform($r) }; say([1, 2, 3] eqv [1, 3, 2] :under(*.unique))

[07:46] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb &infix:<eqv>␤at <tmp>:1␤------> 3[1, 2, 3] eqv [1, 3, 2] :under(*.unique)7⏏5)␤»

[07:46] <antoniogamiz> mmm ty masak :)

[07:46] <masak> aww

[07:46] <masak> why can't I adverb &infix:<eqv>? it'd be so much fun! :)

[07:46] *** feldspath_ joined
[07:46] <masak> I think I've hit this limitation before. can't adverb built-in operators

[07:48] <masak> m: sub infix:<EQV>($l, $r, :under(&transform)!) { transform($l) eqv transform($r) }; say([1, 2, 3] EQV [1, 3, 2] :under(*.unique))

[07:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤»

[07:48] <masak> dunno why that one doesn't say `True`...

[07:48] <masak> (halp)

[07:49] <masak> having an operator like that would be genuinely useful -- not arguing for dumping it in CORE right now, but I'd sure like to be able to define it in my code

[07:49] *** Manifest0 joined
[07:50] *** netrino left
[07:51] *** dolmen joined
[07:55] *** qiqi left
[07:56] *** feldspath_ left
[07:56] *** Manifest0 left
[08:01] *** Manifest0 joined
[08:02] <tobs> m: sub infix:<EQV>($l, $r, :under(&transform)!) { transform($l) eqv transform($r) }; say([1, 2, 3] EQV [1, 3, 2] :under(*.sort))

[08:02] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[08:02] *** antoniogamiz left
[08:02] <tobs> masak: unique didn't do anything on those operands, you wanted to sort them

[08:05] *** netrino joined
[08:05] <masak> oh, right *facepalm*

[08:06] * masak can't even blame lack of coffee

[08:07] *** netrino_ joined
[08:07] <masak> anyway, adverbs are underused (and mostly for good reason; they're dangerous/weird), but this is exactly what they're good for

[08:09] *** feldspath_ joined
[08:10] *** netrino left
[08:12] *** nadim_ joined
[08:16] *** reach_satori joined
[08:18] *** ChoHag left
[08:19] *** ChoHag joined
[08:24] *** Manifest0 left
[08:25] *** Ekho left
[08:25] *** zakharyas joined
[08:26] *** qiqi joined
[08:26] *** pecastro joined
[08:31] *** Manifest0 joined
[08:37] *** Ekho joined
[08:38] *** Manifest0 left
[08:43] *** Manifest0 joined
[08:56] *** Manifest0 left
[08:59] *** aindilis left
[08:59] *** qiqi left
[09:01] *** aindilis joined
[09:02] *** Manifest0 joined
[09:04] *** qiqi joined
[09:13] <Geth> ¦ doc: lukasvalle++ created pull request #2796: document antipairs for Setty

[09:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2796

[09:13] *** SergiusUA joined
[09:19] *** Manifest0 left
[09:23] *** domidumont1 joined
[09:24] *** Manifest0 joined
[09:26] *** domidumont left
[09:26] *** aindilis left
[09:27] *** aindilis joined
[09:31] *** qiqi left
[09:34] *** Cabanossi left
[09:35] <Geth> ¦ doc: 5ddf5a7585 | lukasvalle++ | doc/Type/Setty.pod6

[09:35] <Geth> ¦ doc: document antipairs for Setty

[09:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5ddf5a7585

[09:35] <Geth> ¦ doc: af5b559f6a | lukasvalle++ | doc/Type/Setty.pod6

[09:35] <Geth> ¦ doc: document antipairs for Setty,reorder in page

[09:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/af5b559f6a

[09:35] <Geth> ¦ doc: a7c427895d | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Setty.pod6

[09:35] <synopsebot> Link: https://doc.perl6.org/type/Setty

[09:35] <Geth> ¦ doc: Merge pull request #2796 from lukasvalle/master

[09:35] <Geth> ¦ doc: 

[09:35] <Geth> ¦ doc: document antipairs for Setty

[09:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a7c427895d

[09:36] *** rgrau left
[09:38] *** qiqi joined
[09:45] *** Manifest0 left
[09:47] *** Cabanossi joined
[09:50] *** Manifest0 joined
[09:59] *** Manifest0 left
[10:04] *** Manifest0 joined
[10:17] *** sena_kun joined
[10:19] *** Sgeo_ left
[10:20] *** Sgeo_ joined
[10:26] *** klapperl left
[10:28] <sena_kun> 6c: sub a { fail "One" }; try a.new; say $!.message

[10:28] <committable6> sena_kun, ¦6c (37 commits): «One␤»

[10:33] *** klapperl joined
[10:33] *** Manifest0 left
[10:38] *** Manifest0 joined
[10:43] *** dolmen left
[10:43] *** Manifest0 left
[10:49] *** Manifest0 joined
[10:58] *** Manifest0 left
[11:01] *** zakharyas left
[11:03] *** Manifest0 joined
[11:05] *** filthyjvmuser joined
[11:05] <filthyjvmuser> hello

[11:06] <moritz> hi there. Nice nickname :D

[11:06] <filthyjvmuser> thanks, it's very related to the questions i'm going to ask really quick

[11:06] *** dolmen joined
[11:08] <filthyjvmuser> can you use Java annotations on a Perl 6 function? and are there any documented examples of using Perl 6 to integrate within a more complicated Java framework?

[11:08] <filthyjvmuser> specifically, i'd like to write plugins for this Minecraft server: https://www.spongepowered.org/

[11:09] <filthyjvmuser> but i don't expect there to be any examples for that

[11:09] <filthyjvmuser> but maybe there's something for Spring or another more common Java framework

[11:09] <timotimo> oh, interesting. i don't think we have something for that yet

[11:09] <timotimo> i.e. getting a function be annotated some specific way

[11:10] <filthyjvmuser> got it

[11:10] <timotimo> would be a fascinating puzzle to figure out i'm sure

[11:11] <timotimo> you should be able to write a thin wrapper in java that just has the functions annotated with the annotations you need and they just call into perl6 code, though

[11:12] *** qiqi left
[11:12] <filthyjvmuser> that's still way better than writing Java directly :-)

[11:12] <filthyjvmuser> thanks for the advice

[11:12] <timotimo> i hope it works! :)

[11:13] <filthyjvmuser> me too! thanks again :-)

[11:13] *** filthyjvmuser left
[11:19] *** Manifest0 left
[11:24] *** Manifest0 joined
[11:29] *** SergiusUA left
[11:30] *** SergiusUA joined
[11:31] *** Manifest0 left
[11:34] *** Cabanossi left
[11:36] *** Manifest0 joined
[11:47] *** Manifest0 left
[11:48] *** Cabanossi joined
[11:52] *** Manifest0 joined
[12:14] <hahainternet> i see there's a couple of language server implementations on github, is there one that people prefer?

[12:19] *** Manifest0 left
[12:20] <Kaiepi> m: my Instant $b = now; (my @ = (1..100)) for 1..10_000; say now - $b

[12:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.118631␤»

[12:20] <Kaiepi> m: my Instant $b = now; (my @foo; @foo.STORE: (1..100)) for 1..10_000; say now - $b

[12:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.12148629␤»

[12:20] <timotimo> m: my Instant $b = now; (my @foo; @foo.STORE: (1..100)) for 1..10_000; say now - $b

[12:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.1338259␤»

[12:20] <timotimo> oops

[12:20] <timotimo> m: my Instant $b = now; ((my @).STORE: (1..100)) for 1..10_000; say now - $b

[12:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.116912␤»

[12:21] <timotimo> watch out for noisy timings on camelia

[12:22] *** Guest5089 joined
[12:23] <Kaiepi> .STORE gets called on assignment to @ sigilled variables right?

[12:23] <timotimo> i believe so, yeah

[12:23] <timotimo> it might be .STORE directly or it might be nqp::p6store

[12:23] <Kaiepi> nqp::p6store?

[12:24] <timotimo> find it in src/vm/moar/Perl6/Ops.nqp

[12:24] <timotimo> it's a bit more than just calling .STORE

[12:24] *** Manifest0 joined
[12:24] <timotimo> first it checks if there is a container

[12:25] <timotimo> if it's a container, it will nqp::assign instead

[12:25] <Kaiepi> m: use nqp; my @foo; nqp::p6store(@foo, [1,2,3]); @foo

[12:25] <camelia> rakudo-moar a643b8be1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of @foo in sink context (line 1)␤»

[12:25] <Kaiepi> m: use nqp; my @foo; nqp::p6store(@foo, [1,2,3]); say @foo

[12:25] <camelia> rakudo-moar a643b8be1: OUTPUT: «[1 2 3]␤»

[12:26] <Kaiepi> m: my Instant $b = now; nqp::p6store(my @, (1...*)) for 1..10_000; say now - $b

[12:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::p6store, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nt $b = now; nqp::p6store(my @, (1...*))7⏏5 for 1..10_000; say now - $b␤»

[12:26] <Kaiepi> m: use nqp; my Instant $b = now; nqp::p6store(my @, (1...*)) for 1..10_000; say now - $b

[12:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.0973934␤»

[12:26] <Kaiepi> m: use nqp; my Instant $b = now; ((my @).STORE: (1...*)) for 1..10_000; say now - $b

[12:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.0988337␤»

[12:27] <Kaiepi> m: use nqp; my Instant $b = now; nqp::p6store(my @, (1...*)) for 1..100_000; say now - $b

[12:27] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.6454862␤»

[12:27] <Kaiepi> m: use nqp; my Instant $b = now; ((my @).STORE: (1...*)) for 1..100_000; say now - $b

[12:27] <camelia> rakudo-moar a643b8be1: OUTPUT: «0.6283517␤»

[12:27] <Kaiepi> should bench my feed operator parallelization pullreq with nqp::p6store vs STORE method calls

[12:28] <Kaiepi> even though they look to be the same speed

[12:28] <timotimo> yeah, i wouldn't expect a speed difference

[12:35] *** Manifest0 left
[12:37] *** zakharyas joined
[12:41] *** Manifest0 joined
[12:47] *** Manifest0 left
[12:51] <Kaiepi> timotimo, p6store is actually faster than the method call to STORE

[12:52] <timotimo> that's a little odd

[12:54] *** Manifest0 joined
[12:54] <Kaiepi> this is what i used to bench https://hastebin.com/azijorohis.pl

[12:54] <Kaiepi> nqp::p6store's average is 3 seconds faster than the STORE method call

[12:54] <Kaiepi> 's

[12:54] <timotimo> oh

[12:55] <timotimo> try switching the two run-with-blah around

[12:55] <timotimo> also, you can drop the "gather" and "take" by just putting a "do" before the "for"

[12:58] *** abraxxa left
[13:01] <timotimo> not very important, just an optimization opportunity

[13:02] *** Manifest0 left
[13:05] *** MasterDuke left
[13:06] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.('a')

[13:06] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'CALL-ME' for invocant of type 'A'␤  in block <unit> at <tmp> line 1␤␤»

[13:06] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.'a'

[13:06] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3Int) { 1 } }; my A $a .= new; say $a.'a'7⏏5<EOL>␤»

[13:07] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.('A::a')

[13:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'CALL-ME' for invocant of type 'A'␤  in block <unit> at <tmp> line 1␤␤»

[13:07] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.A::{'a'}

[13:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'A' for invocant of type 'A'. Did you mean 'a'?␤  in block <unit> at <tmp> line 1␤␤»

[13:07] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.{'a'}

[13:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «Type A does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[13:07] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.::{'a'}

[13:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed class-qualified postfix call␤at <tmp>:1␤------> 3-> Int) { 1 } }; my A $a .= new; say $a.7⏏5::{'a'}␤    expecting any of:␤        dotty method or postfix␤        postfix␤»

[13:08] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.A::<a>

[13:08] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'A' for invocant of type 'A'. Did you mean 'a'?␤  in block <unit> at <tmp> line 1␤␤»

[13:08] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.<a>

[13:08] <camelia> rakudo-moar a643b8be1: OUTPUT: «Type A does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[13:08] <Kaiepi> m: use nqp; my class A { method a(--> Int) { 1 } }; my A $a .= new; say nqp::callmethod(nqp::decont($a), 'a')

[13:08] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[13:09] *** Manifest0 joined
[13:15] <Kaiepi> m: my class A { method a(--> Int) { 1 } }; my A $a .= new; say $a.^lookup('a')($a)

[13:15] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[13:16] <Kaiepi> surely there's a better way to call a method given a method name as a string

[13:16] <jnthn> $a."$the-string"()

[13:17] *** Manifest0 left
[13:25] *** Manifest0 joined
[13:29] *** curan left
[13:29] *** jeromelanteri joined
[13:30] *** kurahaupo_ joined
[13:32] *** SergiusUA left
[13:33] *** kurahaupo left
[13:34] *** skids joined
[13:43] *** SergiusUA joined
[13:45] *** SergiusUA left
[13:45] *** SergiusUA joined
[13:57] *** Manifest0 left
[14:02] *** Manifest0 joined
[14:04] *** jelkner joined
[14:11] *** Manifest0 left
[14:11] *** aborazmeh joined
[14:11] *** aborazmeh left
[14:11] *** aborazmeh joined
[14:14] *** nadim_ left
[14:15] <Geth> ¦ doc: lukasvalle++ created pull request #2797: add .map, .flat, .concise, and .summary for Backtrace

[14:15] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2797

[14:16] *** Manifest0 joined
[14:21] *** zacts joined
[14:23] *** Manifest0 left
[14:28] *** Manifest0 joined
[14:30] *** domidumont joined
[14:32] <Geth> ¦ doc: 3b6c405aa7 | Coke++ | doc/Language/control.pod6

[14:32] <Geth> ¦ doc: fix typo

[14:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3b6c405aa7

[14:32] <synopsebot> Link: https://doc.perl6.org/language/control

[14:32] *** zacts left
[14:33] *** domidumont1 left
[14:33] *** pmurias joined
[14:33] <pmurias> .

[14:36] *** zacts joined
[14:37] *** mornfall joined
[14:37] *** lizmat joined
[14:39] *** dolmen left
[14:40] *** lizmat_ joined
[14:43] *** powerbit left
[14:43] *** dolmen joined
[14:43] *** lizmat left
[14:47] *** lizmat_ left
[14:48] *** quipa joined
[14:49] *** robertle left
[14:55] *** Guest1336 left
[14:56] *** aborazmeh left
[15:06] *** feldspath_ left
[15:11] *** Manifest0 left
[15:15] *** sauvin left
[15:16] *** Manifest0 joined
[15:18] *** ravenousmoose_ joined
[15:19] *** MilkmanDan left
[15:20] *** MilkmanDan joined
[15:23] *** domidumont left
[15:27] *** sauvin joined
[15:31] *** sauvin left
[15:32] *** sauvin joined
[15:35] *** sauvin left
[15:40] *** zacts left
[15:45] *** reach_satori left
[15:47] *** jmerelo joined
[15:48] <jmerelo> releasable6: status

[15:48] <releasable6> jmerelo, Next release in ≈34 days and ≈3 hours. 1 blocker. 140 out of 405 commits logged (⚠ 2 warnings)

[15:48] <releasable6> jmerelo, Details: https://gist.github.com/8b1c52402183b1adfe256ca8d05a09d3

[15:53] *** sauvin joined
[15:55] *** ravenousmoose_ left
[15:55] *** zakharyas left
[16:02] *** Manifest0 left
[16:07] *** Manifest0 joined
[16:12] <El_Che> we had a release?

[16:13] <Geth> ¦ doc: f1e7907e66 | (JJ Merelo)++ | type-graph.txt

[16:13] <Geth> ¦ doc: VM not correctly included in type-graph.txt

[16:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f1e7907e66

[16:14] *** ravenousmoose_ joined
[16:15] <sena_kun> El_Che, we didn't, just the date was delayed to June

[16:16] *** kurahaupo_ left
[16:16] *** kurahaupo joined
[16:21] *** Manifest0 left
[16:24] <Geth> ¦ doc: 8c2c9828a0 | (JJ Merelo)++ | doc/Type/Iterable.pod6

[16:24] <Geth> ¦ doc: Reflow and check definition

[16:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8c2c9828a0

[16:24] <Geth> ¦ doc: 7b9506cc08 | (JJ Merelo)++ | doc/Type/Test.pod6

[16:24] <Geth> ¦ doc: Eliminates wrong preamble (for a method), closes #2799

[16:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7b9506cc08

[16:24] <synopsebot> Link: https://doc.perl6.org/type/Iterable

[16:24] <synopsebot> Link: https://doc.perl6.org/type/Test

[16:24] <AndroidKitKat> I know this is a noob question, but I'm not sure why I can't do what I'm doing on line 21 https://gist.github.com/c5ce0d0e8d16994e5bcc59e177eee30a

[16:25] <AndroidKitKat> are members of an array not mutable?

[16:25] <jnthn> No, scalar parameters to a block are immutable by default

[16:25] <jmerelo> AndroidKitKat: that might be a list, not an array. lists are immutable

[16:25] <jnthn> Use <-> instead of -> 

[16:25] <jmerelo> m: my @numbers; say @numbers.^name

[16:25] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array␤»

[16:25] <jnthn> Which will default to rw

[16:26] <jmerelo> jnthn++

[16:26] <AndroidKitKat> Thanks

[16:26] <AndroidKitKat> I'll probably have more questions later, I appreciate it

[16:26] <jmerelo> AndroidKitKat: use this or StackOverflow (or both). You'll be very welcome.

[16:26] <jmerelo> sena_kun: what was the problem with this release?

[16:26] <jmerelo> sena_kun: there was only one blocker...

[16:27] <sena_kun> jmerelo, no idea, ping kawaii

[16:27] <sena_kun> probably personal reasons

[16:27] *** lizmat joined
[16:27] <jmerelo> sena_kun: OK.

[16:27] <El_Che> sena_kun: ah good, I thought I was out of the loop :)

[16:29] *** lizmat left
[16:30] *** lizmat joined
[16:31] *** Manifest0 joined
[16:32] <namibj> Fuck, I just dropped my phone screen-first from like 120~130cm onto an i think basalt paving stone.

[16:33] <namibj> Screen works, touch works, glass is pretty shattered.

[16:33] <namibj> Oh sorry, wrong chat ;)

[16:35] *** dolmen left
[16:36] <AndroidKitKat> Sorry to hear about your phone though

[16:37] <jmerelo> AndroidKitKat: :-)

[16:40] *** jeromelanteri left
[16:53] <kurahaupo> jmerelo: have a break, have a … ?

[16:53] *** pmurias left
[16:55] *** robertle joined
[16:55] *** zacts joined
[16:56] *** domidumont joined
[16:59] <jmerelo> kurahaupo: :-)

[17:00] *** feldspath_ joined
[17:01] *** natrys joined
[17:01] *** reach_satori joined
[17:04] *** feldspath joined
[17:05] *** feldspath_ left
[17:07] *** ravenousmoose joined
[17:10] *** dolmen joined
[17:10] *** ravenousmoose_ left
[17:10] *** dolmen left
[17:10] *** feldspath left
[17:11] <HarmtH> Is there a way to set a default value for a multi-dimensional hash?

[17:12] <jmerelo> HarmtH: as in, all values being the same? I don't think so. A  multidimensional hash is a hash of hashes... So I don't see how you could do that. But I might be wrong.

[17:13] <jmerelo> HarmtH: why do you want to do that?

[17:13] *** domidumont left
[17:13] *** reach_satori left
[17:13] *** reach_satori joined
[17:13] <HarmtH> In my particular case? A programming puzzle. Have a 2-dimensional grid for which I would like a default value.

[17:13] *** ravenousmoose left
[17:14] <jmerelo> HarmtH: wouldn't a multidimensional array be better?

[17:14] *** ravenousmoose joined
[17:15] *** zacts left
[17:15] *** reach_satori left
[17:15] *** reach_satori joined
[17:15] <HarmtH> Sometimes

[17:17] <HarmtH> But sometimes the array is sparse, or you'd like to use negative indices

[17:17] *** reach_satori_ joined
[17:17] *** a3f left
[17:18] *** spaceotter joined
[17:18] *** reach_satori left
[17:19] *** satori__ joined
[17:21] <jmerelo> lizmat has published this: https://modules.perl6.org/dist/Array::Sparse:cpan:ELIZABETH Maybe it can be useful.

[17:21] <spaceotter> Hey guys I have a small issuse with the repl. If I type characters like üöä§ and want to delete them i get a wired questionmark :o

[17:22] *** reach_satori_ left
[17:22] *** satori__ left
[17:23] *** satori__ joined
[17:24] <SyrupThinker> HarmtH: Is the // operator viable for your usecase?

[17:24] <HarmtH> SyrupThinker: Mostly, yes

[17:24] <HarmtH> SyrupThinker: But a default value is more elegant imho

[17:25] <jmerelo> spaceotter: yep, that will happen in most consoles. I use the emacs console for that reason.

[17:25] *** a3f joined
[17:26] *** satori__ left
[17:29] <b2gills> spaceotter: You could just keep hitting backspace until the question marks disappear. Or you could use `rlwrap` or I think the readline binding fixes that. (I use `$ rlwrap perl6` when I use the REPL.)

[17:29] *** reach_satori joined
[17:30] <spaceotter> Oh, good to know. Thank you guys :) 

[17:30] *** molaf joined
[17:30] *** reach_satori_ joined
[17:33] *** rindolf left
[17:33] *** reach_satori left
[17:33] *** molaf left
[17:34] *** molaf joined
[17:35] *** rindolf joined
[17:40] <Geth> ¦ doc: 7bc42b8329 | (JJ Merelo)++ | doc/Language/exceptions.pod6

[17:40] <Geth> ¦ doc: Reflow and some clarifications

[17:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7bc42b8329

[17:40] <synopsebot> Link: https://doc.perl6.org/language/exceptions

[17:40] <jmerelo> Anyone can help with this? https://stackoverflow.com/questions/56190676/checking-syntax-of-a-string-or-file

[17:41] *** reach_satori joined
[17:41] *** lala_ joined
[17:41] *** reach_satori_ left
[17:41] *** lala_ left
[17:44] <timotimo> jmerelo: i think you have to set the :target to "syntaxcheck" in EVAL

[17:44] <timotimo> what do you mean "safe", though?

[17:45] *** reach_satori left
[17:45] *** pmurias joined
[17:49] <timotimo> because syntaxcheck will also cause some code to run

[17:50] *** zakharyas joined
[17:50] <ugexe> https://gist.github.com/ugexe/b3de0a3a78290061f116 :facemelt:

[17:51] <ugexe> ah that doesn't take a string though

[17:55] <jmerelo> timotimo: mainly not gobbling up a lot of memory like it happened here https://github.com/perl6/doc/issues/2764#

[17:56] <jmerelo> ugexe: right. It will maybe be a bit faster than perl6 -c, but I think the slowest part is creating the file and calling that on it.

[17:58] <jmerelo> timotimo: and I'm not sure that's documented... 

[17:58] <timotimo> huh, really?

[18:00] *** quipa left
[18:01] <jmerelo> timotimo: where's that :target defined? https://github.com/rakudo/rakudo/blob/1ec4f171dd343441a47a2313f115d116864a39b1/src/core/ForeignCode.pm6

[18:01] <tobs> m: use nqp; say so try { nqp::getcomp('perl6').compile($_) } for 'my $s = π', 'my $s = π-'

[18:01] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤False␤»

[18:01] <jmerelo> tobs: hey, that's cool...

[18:01] <tobs> that's what I managed to read, but if there's an option to EVAL that'd be much less nqp-y

[18:01] <timotimo> it's part of %n

[18:02] <timotimo> but apparently it calls compiler.compile without passing that

[18:02] <jmerelo> timotimo: so you say it's not really working?

[18:02] <timotimo> so actually there doesn't appear to be a way to reach it with the official EVAL sub

[18:02] <jmerelo> timotimo: %n is not used actually there...

[18:03] <jmerelo> timotimo: that a bug?

[18:03] <timotimo> not sure

[18:03] <ugexe> I'm not sure if you'd want to reuse the same compiler object

[18:04] <tobs> good point

[18:04] <timotimo> yaeh, with nqp::getcomp you can get at everything the compiler offers

[18:04] <timotimo> i think the compiler objects we currently have don't store any state that changes just because of compilation

[18:04] <timotimo> so re-using it should be fine

[18:05] <timotimo> on the other hand, the objects are so lightweight that making a new one should have barely any cost to it

[18:05] <ugexe> i was thinking if you have 2 unrelated files, that both do something like change the grammar, which are both compiled with the same object

[18:06] <timotimo> ah, no i believe the grammar, actions, and world object are built inside the compile method and not shared

[18:07] <timotimo> and changes to the grammar like with slangs and such are lexically scoped, which means we make copies and revert later as well

[18:07] <jmerelo> oh wow

[18:07] <jmerelo> that's fast

[18:07] <jmerelo> tobs++

[18:08] <tobs> glad I could contribute a bit to my own issue :p

[18:08] <timotimo> \o/

[18:12] *** vrurg left
[18:12] <jmerelo> tobs: :-)

[18:13] *** vrurg joined
[18:13] *** dotdotdot joined
[18:16] <ugexe> fwiw you dont need to call .compile if you are just interested if it will .parse

[18:16] <jmerelo> tobs: it's not failing for errors, however, I don't know why... 

[18:16] *** elmer667 joined
[18:18] *** espadrine_ joined
[18:18] <jmerelo> ugexe: thanks. But it's not failing, for some reason

[18:19] <jmerelo> 20:01:11          tobs | m: use nqp; say so try { nqp::getcomp('perl6').compile($_) } for 'my $s = π', 'my $s = π-'                                        │+squashable6

[18:19] <jmerelo> m: use nqp; say so try { nqp::getcomp('perl6').parse($_) } for 'bad code', 'my $s = π-'

[18:19] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤False␤»

[18:22] <timotimo> m: say bad code

[18:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    bad used at line 1. Did you mean 'bag'?␤    code used at line 1␤␤»

[18:22] <ugexe> fwiw probably need a `my $*LINEPOSCACHE;`

[18:23] <jmerelo> m: use nqp; say so try { nqp::getcomp('perl6').parse($_) } for '2+3', 'my $s = π-'

[18:23] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤False␤»

[18:23] <jmerelo> m: use nqp; say so try { nqp::getcomp('perl6').parse($_) } for 'bad code', 'my $s = π-'

[18:23] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤False␤»

[18:23] <tobs> that seems to work, or am I missing something?

[18:24] *** sauvin left
[18:24] <ugexe> m: use nqp; say nqp::getcomp("perl6").parse($_).so for q|bad code|, q|my $s = π|

[18:24] <camelia> rakudo-moar a643b8be1: OUTPUT: «Dynamic variable '$*LINEPOSCACHE' not found␤␤»

[18:25] <ugexe> m: use nqp; my $*LINEPOSCACHE; say nqp::getcomp("perl6").parse($_).so for q|bad code|, q|my $s = π|

[18:25] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    bad used at line 1. Did you mean 'bag'?␤    code used at line 1␤␤»

[18:26] <tobs> ahh, I think .compile took care of setting that up, which is why it worked initially

[18:26] <ugexe> well you used try, which i removed

[18:26] <tobs> m: use nqp; say so nqp::getcomp('perl6').compile($_) for 'my $s = π'

[18:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[18:27] <tobs> m: use nqp; say so nqp::getcomp('perl6').parse($_) for 'my $s = π'

[18:27] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[18:27] <ugexe> the LINEPOSCACHE is probably for reporting the error

[18:27] <tobs> I see, that makes sense

[18:28] *** CepriN joined
[18:29] <jmerelo> ugexe: parse is faster and does not produce warnings, which were not caught by the redirected $*ERR since they were produced in NQP

[18:30] <jmerelo> ugexe: it's producing an error in "<anon|4047>::Metamodel::MethodContainer is not composable, so <anon|4071>::Metamodel::ParametricRoleHOW cannot compose it

[18:30] <jmerelo> I remember I fixed that somehow... That error was produced before with EVAL too.

[18:31] *** SergiusUA left
[18:31] *** espadrine_ left
[18:32] <jmerelo> m: use nqp; say so nqp::getcomp('perl6').parse($_) for 'my $s = πp' 

[18:32] <camelia> rakudo-moar a643b8be1: OUTPUT: «Dynamic variable '$*LINEPOSCACHE' not found␤␤»

[18:33] <jmerelo> m: use nqp; my $*LINEPOSCACHE; say so nqp::getcomp('perl6').parse($_) for 'my $s = πp' 

[18:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    πp used at line 1␤␤»

[18:33] <jmerelo> right

[18:33] <jmerelo> we need the try anyway to avoid that.

[18:38] *** Manifest0 left
[18:38] <Geth> ¦ doc: d51503be0d | (JJ Merelo)++ | 2 files

[18:38] <Geth> ¦ doc: Using low-level parse to speed up things

[18:38] <Geth> ¦ doc: 

[18:38] <Geth> ¦ doc: Thanks to @ugexe and @taboege for hints on how to make this. I've

[18:38] <Geth> ¦ doc: checked memory, and it's actually taking quite a bit of memory, but

[18:38] <Geth> ¦ doc: not as much as EVAL and it's actually faster than that.

[18:38] <Geth> ¦ doc: 

[18:38] <Geth> ¦ doc: It's also producing a false positive with `class

[18:38] <Geth> ¦ doc: <…commit message has 6 more lines…>

[18:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d51503be0d

[18:39] <jmerelo> ugexe , taboege: you might want to answer it in StackOverflow. Thanks a lot.

[18:41] <tobs> m: use nqp; say so try nqp::getcomp('perl6').parse('class Metamodel::ParametricRoleHOW {}')

[18:41] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤»

[18:42] <tobs> m: use nqp; my $*LINEPOSCACHE; say so try nqp::getcomp('perl6').parse('class Metamodel::ParametricRoleHOW')

[18:42] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤»

[18:42] <tobs> m: use nqp; my $*LINEPOSCACHE; say so try nqp::getcomp('perl6').parse('class Metamodel::ParametricRoleHOW {}')

[18:42] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[18:43] <tobs> I don't know why it's 1 under `so` and why it again needs LINEPOSCACHE but there's a difference at least.

[18:43] *** Manifest0 joined
[18:45] <tobs> jmerelo: I might be able to fix that, having touched the heuristic that adds empty blocks after things to make them compile last squasthon

[18:53] <jmerelo> tobs: that would be nice. I don't know why it happens, and precisely in that class. There are others like it

[18:55] <Geth> ¦ doc: taboege++ created pull request #2803: Point out difference between finite and infinite Range subscripts

[18:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2803

[18:56] <Geth> ¦ doc: 68fbdb7d40 | (Tobias Boege)++ | doc/Language/list.pod6

[18:56] <Geth> ¦ doc: Point out difference between finite and infinite Range subscripts

[18:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/68fbdb7d40

[18:56] <Geth> ¦ doc: d8b0b50613 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/list.pod6

[18:56] <Geth> ¦ doc: Merge pull request #2803 from taboege/subscript-range-whatever

[18:56] <Geth> ¦ doc: 

[18:56] <Geth> ¦ doc: Point out difference between finite and infinite Range subscripts

[18:56] <synopsebot> Link: https://doc.perl6.org/language/list

[18:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d8b0b50613

[18:56] <jmerelo> tobs: but you have privs, right?

[18:56] <tobs> oh, then I'm not sure I understand what's going on, but will investigate…

[18:56] *** zakharyas left
[18:57] <tobs> jmerelo: do I? I'm "in the perl6 organization", but I'm not sure what it entails to be honest

[18:57] <tobs> (maybe whoever invited me placed too much trust in me)

[18:57] <jmerelo> tobs: it entails a great honor and a great responsability :-)

[18:58] <jmerelo> tobs: but that includes perl6/doc, too. I'm happy to review your PRs if you're not sure, of course. 

[18:58] <jmerelo> (but I'll also review most commits anyhow, so... )

[18:58] *** jmerelo left
[18:59] <tobs> .tell jmerelo good, will read up and keep that in mind for easy changes

[18:59] <yoleaux> tobs: I'll pass your message to jmerelo.

[19:04] *** CepriN left
[19:10] *** Manifest0 left
[19:12] *** spaceotter left
[19:18] *** jelkner left
[19:18] *** Manifest0 joined
[19:19] <tobs> .tell jmerelo huh, the only mention of that class is in Type/Metamodel/ParametricRoleHOW.pod6 and that tested successfully 10 times in a row for me just now. Is it maybe flapping for you?

[19:19] <yoleaux> tobs: I'll pass your message to jmerelo.

[19:22] *** molaf left
[19:29] *** Manifest0 left
[19:31] *** lizmat left
[19:32] *** lizmat joined
[19:35] *** Manifest0 joined
[19:36] *** lizmat left
[19:38] *** reach_satori joined
[19:41] <ugexe> timotimo: wouldn't augments live across compiler objects?

[19:42] <ugexe> er, across compiles from the same compiler object

[19:43] <ugexe> class Foo { }; EVAL(q|use MONKEY-TYPING; augment class Foo { method bar { say 42 } }|); Foo.bar

[19:43] <evalable6> ugexe, rakudo-moar 7a7a23df6: OUTPUT: «42␤»

[19:43] <ugexe> that also shows a problem with using EVAL

[19:44] <ugexe> so if you have two unrelated modules and one augments a core class, the second module will not have the expected class

[19:47] <ugexe> m: use nqp; my $*LINEPOSCACHE; nqp::getcomp("perl6").compile(q|use MONKEY-TYPING; augment class Int { method bar { die 42 } }|); nqp::getcomp("perl6").compile(q|BEGIN say Int.bar|);

[19:47] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  42␤    in method bar at <tmp> line 1␤    in code  at <tmp> line 1␤␤»

[19:47] <ugexe> ^

[19:49] <ugexe> similar if calling .parse

[19:49] <ugexe> when instead i think what is expected is an error about method bar not existing on Int

[19:50] <ugexe> well, what is expected of a solution to the earlier problem rather

[19:53] *** cpan-p6 left
[19:54] *** elmer667 left
[19:58] <ugexe> creating a new compiler object doesn't change the outcome though...

[19:58] <ugexe> m: use nqp; use Perl6::Grammar:from<NQP>; use Perl6::Actions:from<NQP>; use Perl6::Compiler:from<NQP>; my $*LINEPOSCACHE;

[19:58] <camelia> rakudo-moar a643b8be1: ( no output )

[19:58] <ugexe> sub compiler() { my $c = Perl6::Compiler.new; $c.parseactions(Perl6::Actions.new); $c.parsegrammar(Perl6::Grammar.new); $c }; my $c1 = compiler(); my $c2 = compiler(); $c1.compile(q|use MONKEY-TYPING; augment class Int { method bar { die 42 } }|); $c2.compile(q|BEGIN say Int.bar|);

[20:02] <timotimo> ugexe: ouch :)

[20:02] *** HoloIRCUser joined
[20:03] *** HoloIRCUser is now known as zzzzzzzzz

[20:03] *** cpan-p6 joined
[20:03] *** cpan-p6 left
[20:03] *** cpan-p6 joined
[20:03] *** zzzzzzzzz is now known as Guest62255

[20:05] <tobs> hmm, could I change &ok to always succeed that way?

[20:06] <timotimo> you could .wrap it

[20:06] <ugexe> and if it was a class it would require supercedes instead of augments

[20:06] *** Guest62255 left
[20:09] *** zacts joined
[20:15] *** Manifest0 left
[20:17] *** xinming_ joined
[20:19] *** xinming left
[20:22] *** Manifest0 joined
[20:23] *** espadrine_ joined
[20:25] *** zacts left
[20:27] *** pmurias left
[20:37] *** reach_satori_ joined
[20:39] <Geth> ¦ doc/master: 5 commits pushed by lukasvalle++, Altai-man++

[20:39] <Geth> ¦ doc/master: 24f1c4727b | add .map, .flat, .concise, and .summary for Backtrace

[20:39] <Geth> ¦ doc/master: 659178e765 | change sample output format

[20:39] <Geth> ¦ doc/master: a40259ac63 | Improve structure

[20:39] <Geth> ¦ doc/master: 48bfed14a4 | Match name in description with signature one

[20:39] <Geth> ¦ doc/master: 3bbea96687 | Merge pull request #2797 from lukasvalle/master

[20:39] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/d8b0b5061389...3bbea96687db

[20:40] *** reach_satori left
[20:56] *** dolmen joined
[20:57] *** ravenousmoose left
[21:02] <Geth> ¦ doc/note-start-special-vars: 9025ba0559 | Altai-man++ | doc/Language/control.pod6

[21:02] <Geth> ¦ doc/note-start-special-vars: Explain $! and $/ in start block

[21:02] <Geth> ¦ doc/note-start-special-vars: review: https://github.com/perl6/doc/commit/9025ba0559

[21:02] <Geth> ¦ doc: Altai-man++ created pull request #2804: Explain $! and $/ in start block

[21:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2804

[21:03] *** skids left
[21:04] <sena_kun> 6c: my $a = anon sub foo {}; my $b = anon sub bar {}

[21:04] <committable6> sena_kun, ¦6c (37 commits): «»

[21:04] <sena_kun> 6c: my $a = anon sub foo {}; my $b = anon sub foo {}

[21:04] <committable6> sena_kun, ¦6c (37 commits): «»

[21:06] *** zacts joined
[21:07] *** Sgeo_ left
[21:07] *** Sgeo_ joined
[21:16] *** natrys left
[21:18] <sena_kun> 6c: say (1, 2, 3).Seq eqv (1, 2, 3)

[21:19] <committable6> sena_kun, https://gist.github.com/2e8260c96c6cd73380e00098a81d0bf3

[21:20] *** molaf joined
[21:23] <sena_kun> 6c: Num.new(5).WHAT.say

[21:23] <committable6> sena_kun, ¦6c (37 commits): «(Num)␤»

[21:24] <sena_kun> 6c: say Nil.chrs;

[21:24] <committable6> sena_kun, https://gist.github.com/0e9e83fbbd5f32d98e9a6eeb68ea2875

[21:26] <sena_kun> 6c: say Hash<foo>:delete;

[21:26] <committable6> sena_kun, https://gist.github.com/faf21ad658eb57027508fc4ad153146b

[21:30] *** zacts left
[21:38] <Geth> ¦ doc/add-cando-example: b25e802cfe | Altai-man++ | doc/Type/Code.pod6

[21:38] <Geth> ¦ doc/add-cando-example: Add cando example with Block

[21:38] <Geth> ¦ doc/add-cando-example: review: https://github.com/perl6/doc/commit/b25e802cfe

[21:40] <cpan-p6> New module released to CPAN! Font::FreeType (0.1.9) by 03WARRINGD

[21:40] <Geth> ¦ doc: Altai-man++ created pull request #2805: Add cando example with Block

[21:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2805

[21:43] *** dolmen left
[21:45] <Geth> ¦ doc/pair-pair-method: 1719332eec | Altai-man++ | doc/Type/Pair.pod6

[21:45] <Geth> ¦ doc/pair-pair-method: Document Pair.Pair method

[21:45] <Geth> ¦ doc/pair-pair-method: review: https://github.com/perl6/doc/commit/1719332eec

[21:45] <Geth> ¦ doc: Altai-man++ created pull request #2806: Document Pair.Pair method

[21:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2806

[21:48] *** |oLa| joined
[21:49] *** |oLa| left
[21:59] <Geth> ¦ doc/Enumeration-Int-method: 619fa6a1d3 | Altai-man++ | doc/Type/Enumeration.pod6

[21:59] <Geth> ¦ doc/Enumeration-Int-method: Document Enumeration.Int

[21:59] <Geth> ¦ doc/Enumeration-Int-method: review: https://github.com/perl6/doc/commit/619fa6a1d3

[22:00] <Geth> ¦ doc: Altai-man++ created pull request #2807: Document Enumeration.Int

[22:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2807

[22:05] *** adu joined
[22:09] * sena_kun just loves it when theere are docs available

[22:12] *** rindolf left
[22:16] *** zacts joined
[22:17] *** netrino_ left
[22:17] <Geth> ¦ doc/note-start-special-vars: 1124099187 | Altai-man++ | doc/Language/control.pod6

[22:17] <Geth> ¦ doc/note-start-special-vars: Clarify a sentence; jnthn++

[22:17] <Geth> ¦ doc/note-start-special-vars: review: https://github.com/perl6/doc/commit/1124099187

[22:18] <jnthn> sena_kun++ # working on docs

[22:18] <sena_kun> slightly easier than fixing rakudo bugs. :)

[22:18] * sena_kun is still a bit sad about & && issue though

[22:20] *** MasterDuke joined
[22:20] *** MasterDuke left
[22:20] *** MasterDuke joined
[22:20] <jnthn> sena_kun: haha... https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L5585

[22:20] *** rindolf joined
[22:21] <jnthn> That's...suspect :)

[22:21] <jnthn> A space matches \W

[22:21] <jnthn> That's why 'a' & 'a' is OK but a & a is not :P

[22:21] <jnthn> I bet if you tighten up that lookahead it'll be OK

[22:22] <sena_kun> >a totally different bug location

[22:22] <sena_kun> https://www.youtube.com/watch?v=tXKTkZ8gyUA

[22:22] <jnthn> Maybe try <+[\W]-[\s]> instead of the \W

[22:22] <sena_kun> jnthn, thanks!

[22:22] <jnthn> Though maybe <:punct> is better

[22:22] <sena_kun> I'll try it out now...

[22:25] *** woolfy joined
[22:31] <sena_kun> yay, the first fix works. running spectest...

[22:31] <jnthn> Cool; it might just have an impact on what's considered the declarative prefix, but I hope not an adverse one.

[22:32] <jnthn> (In theory it shouldn't, but iirc there's some small gremlins there...)

[22:33] <sena_kun> do you recommend <:punct> over it?

[22:36] *** rindolf left
[22:37] *** zacts left
[22:40] <jnthn> sena_kun: Yes, but I might have totally made it up :)

[22:42] <jnthn> m: say '!.?:*' ~~ /<:punct>+/

[22:42] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢!.?:*｣␤»

[22:42] <jnthn> Hm, seems workable

[22:43] <jnthn> May be a bit cheaper, and should be free of LTM concerns

[22:43] * sena_kun is sad to kill spectest, so will keep it until the end to show respect

[22:43] <jnthn> Hm, not sure we complete those <:uniprop> things in Comma yet. Another once for the wish list. :)

[22:43] <jnthn> *one

[22:45] <sena_kun> Result: FAIL

[22:45] <sena_kun> oops

[22:46] <sena_kun> t/spec/S05-mass/rx.rakudo.moar, no TAP plan found... trying out with <:punct>

[22:51] <jnthn> Did it fix the bug despite the regression? :)

[22:51] <jnthn> 'cus if we so at least we know we're fixing the right place :)

[22:51] <sena_kun> it did

[22:52] <jnthn> I did a bigint opt today and failed precisely one spectest. It was an off-by-one. :)

[22:52] <jnthn> (In my code)

[22:52] <sena_kun> I also see tons of warnings like `Space is not significant here`, so I am rebuilding it with \W to check if they were there before...

[22:53] <sena_kun> yes, warnings were there from the start

[22:54] <jnthn> btw, for those here who don't follow MoarVM/Rakudo guts: factor of > 2 speedup on Rat math is coming. :)

[22:55] <sena_kun> jnthn, it means an opportunity to do some math grinding and not being too shy when folks ask e.g. "Do you have numpy here?"?

[22:56] <sena_kun> (yes, I know that numpy is based a lot on arrays, not just numbers, but it has plenty of math things included too)

[22:57] <jnthn> Well, for that you probably want natives anyway

[22:57] <jnthn> I did some opt on those recently, though there's certainly more to come :)

[22:57] <timotimo> at some point i hope we can get 128bit floating points into moarvm :)

[22:58] <sena_kun> isn't PEA based on lowering objects on heap into natives in registers?

[22:58] <sena_kun> (if you super-duper simplify it, just so I could get it a tiny bit)

[22:59] <timotimo> that's the "scalar replacement" bit

[22:59] <timotimo> PEA is the analysis that we do to figure out when that's possible, and when it has to be undone in the code for things to stay safe

[23:00] *** zacts joined
[23:00] <timotimo> EA would let us do scalar replacement when objects that are created will never be seen again, but PEA will allow us to do scalar replacement in cases where the object has some secape routes, but they aren't too commonly used

[23:00] <sena_kun> well, I mean the "action" part, not the "deciding" part.

[23:01] <jnthn> sena_kun: What timotimo said, but: yes, it's true that for Num it is a pretty much "straight" unbox, and once we get good at that then for scalars `num` vs `Num` will matter a bit less. BUT, with arrays, there's still quite a significant difference in storage size, and thus in cache efficiency.

[23:01] <sena_kun> so the test case is fixed, but https://gist.github.com/Altai-man/0ced0c83920e3b400708918e78bdd04e

[23:01] <jnthn> Int vs. int is far less clear-cut because that's not a straight unboxing

[23:02] <sena_kun> are .rakudo.moar files generated from .t ones or not?

[23:02] <jnthn> Since Int is auto-upgrade to big integer

[23:02] <sena_kun> seems like the answer is "yes"

[23:02] <jnthn> And so we need upgrade checks in the JIT output

[23:02] <ugexe> yes

[23:03] <jnthn> sena_kun: make t/spec/foo/bar.t will do the fudge and then run the .rakudo.moar if one is produced; spectest does that at the start too; only ever edit the .t file

[23:04] <jnthn> (the the .rakudo.moar is good to read)

[23:04] <jnthn> ('cus the line numbers match up)

[23:04] <sena_kun> so it seems that `/a |& b/` regex cannot be parsed with <:punct> instead of \W.

[23:04] <jnthn> What on earth...

[23:05] <jnthn> What does the diff you have look like?

[23:05] <sena_kun> or I might got the wrong line...

[23:05] <sena_kun> diff of the "fix"?

[23:05] <jnthn> Yeah

[23:05] <jnthn> But...is that even valid syntax?

[23:05] <sena_kun> one second

[23:05] <jnthn> The leading & is only allowed at the start of a regex for a [...] group, ain't it?

[23:06] <sena_kun> https://gist.github.com/Altai-man/baf7fa4df8f7ef6cd9dab19f2c049284

[23:06] <sena_kun> ^ diff

[23:06] <jnthn> m: use Test; ok 'a' ~~ /a |⏏& b/, 'alternation and conjunction (|&) 

[23:06] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter ⏏ (must be quoted to match literally)␤at <tmp>:1␤------> 3use Test; ok 'a' ~~ /a |7⏏5⏏& b/, 'alternation and conjunction (|&)␤Unable to parse expression in single quotes; couldn't f…»

[23:06] <jnthn> m: use Test; ok 'a' ~~ /a |& b/, 'alternation and conjunction (|&) 

[23:06] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3|& b/, 'alternation and conjunction (|&)7⏏5<EOL>␤    expecting …»

[23:06] <jnthn> m: use Test; ok 'a' ~~ /a |& b/, 'alternation and conjunction (|&)'

[23:06] <camelia> rakudo-moar a643b8be1: OUTPUT: «ok 1 - alternation and conjunction (|&)␤»

[23:07] <sena_kun> https://github.com/perl6/roast/blob/master/S05-mass/rx.t#L828 <- from roast

[23:07] <jnthn> I'm not sure I trust this test at all

[23:07] <jnthn> Moment, let me check something

[23:08] <jnthn> Yes, the "allow a leading alternation/conjunction operator" is a nibbler level thing, like I thought

[23:09] *** woolfy left
[23:09] <jnthn> m: use Test; ok 'a' ~~ /a | [& b]/, 'alternation and conjunction (|&)'

[23:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «ok 1 - alternation and conjunction (|&)␤»

[23:10] *** zacts left
[23:12] <jnthn> Seems to me the test was passing for the completely wrong reason before now, and I'm not entirely sure its expectation is legitimate.

[23:12] <jnthn> Though I wouldn't mind a second opinion...

[23:12] <sena_kun> well, I see a commit...

[23:13] <sena_kun> https://github.com/perl6/roast/commit/ee1bd8d63256affa75ffb2753cbdb58f6ad039f6#diff-4149f4a4f6ad1730d0d001f26fd21c0b <- this one, by TimToady

[23:13] <jnthn> ooh, that's an answer then

[23:13] <sena_kun> it says that the precedence differs

[23:13] <jnthn> Yeah, it's right on that

[23:14] <jnthn> OK, so if we want to fix the immediate bug, we need to fix something else first :)

[23:14] <jnthn> The something else being src/QRegex/P6Regex/Grammar.nqp in the NQP repo

[23:15] * sena_kun looked there from the start

[23:15] <sena_kun> hmm

[23:15] <jnthn> Yeah, in nibbler at the moment we have an alternation of those things to just silently "eat" at the start

[23:16] <jnthn> But I guess we need to move those

[23:16] <sena_kun> jnthn, if you are fancy to bring the fight to the floor^W^W^W^W^W^W hunt it down, I'll present results nicely, otherwise I'll at least update the ticket description with findings

[23:17] * sena_kun .oO ( https://www.youtube.com/watch?v=NM7wpkL-Amw )

[23:18] <jnthn> sena_kun: If you fancy trying it: probably toss the group starting line 135 in nibbler. Then in termaltseq put [ <!rxstopper> '||' { $*SEQ := 1; } <.ws> ]? at the start. And in termalt put at the start [ <!rxstopper> '|' <.ws> ]?, etc.

[23:19] <sena_kun> let's see...

[23:19] <jnthn> So we just move the eating of the initial throw-away thingy into the rule that parses things at that level

[23:19] <jnthn> Rather than doing them all at the top nibbler level

[23:19] <jnthn> It's only termaltseq that is "weird" and sets a $*SEQ, the rest are just simple matchings.

[23:20] <sena_kun> let's see if I can work as a simple diff applier here...

[23:21] <jnthn> :)

[23:22] <sena_kun> jnthn, is `etc.` and the end implies something after `termalt`? :)

[23:22] <jnthn> I figure you've written enough grammars it makes some kind of sense too. Admittedly writing the grammar for grammars is a tiny bit meta, but that's compiler life...

[23:22] <sena_kun> well, to be fully honest I cannot say I have a lot of concentration right now

[23:23] <jnthn> sena_kun: Yes, the leading && handling goes in termconjseq, and the leading & in termconj :)

[23:23] <jnthn> haha, me either :D

[23:23] <sena_kun> ok, building nqp-rakudo and then trying out the test...

[23:24] <jnthn> Spent all my brane on graph theory and the horrors of the x64 instruction set today :P

[23:25] <sena_kun> I just a bit non-chalantly downloaded newest Idea... Just to see that we have a lot of exceptions on mere attempt to run Comma from run configuration

[23:26] <sena_kun> and they say "You need at least 183 to work with 191", but the truth it - it _doesn't_ work at all, you still need 191.

[23:26] <jnthn> Oh heck, yes

[23:27] * sena_kun apparently failed as patch, because there is still a null

[23:27] <sena_kun> let me re-read it again and try to grasp...

[23:28] <jnthn> And you can't use 191 to develop something built on an earlier enough platform version either. 

[23:28] <jnthn> Or at least, not without more fun than I was willing to have :)

[23:28] <sena_kun> ah, I see what I did wrong, likely...

[23:28] <jnthn> Feel free to send a diff if you want me to chck

[23:28] <jnthn> *czech

[23:29] <jnthn> oh goodness, *check

[23:29] *** aborazmeh joined
[23:29] *** aborazmeh left
[23:29] *** aborazmeh joined
[23:30] <sena_kun> https://gist.github.com/Altai-man/588562b134535c84a5ddbcc06cec79a4

[23:30] *** pecastro left
[23:30] <jnthn> Yeah, that's what I had in mind

[23:31] * sena_kun does a build/test

[23:31] <jnthn> make test in NQP should give some clue of if it's right-ish :)

[23:31] <sena_kun> nqp has a test suite itself?

[23:31] <sena_kun> I see, that's admirable

[23:33] <sena_kun> rx.t passes, regex.t passes. \o/

[23:33] <sena_kun> running spectest again...

[23:41] <jnthn> :)

[23:48] <sena_kun> Unrecognized regex metacharacter @ (must be quoted to match literally)

[23:48] <sena_kun> sigh

[23:49] <sena_kun> https://gist.github.com/Altai-man/806a226e637b3196f35488e877455c9e <- output

[23:50] *** Elronnd left
[23:51] <sena_kun> `my @var = <a b ab c>; my \$aref = @var; 'a0' ~~ m/@\$aref[0]/` fails

[23:51] <sena_kun> m: my @var = <a b ab c>; my $aref = @var; 'a0' ~~ m/@$aref[0]/;

[23:51] <camelia> rakudo-moar a643b8be1: OUTPUT: «Potential difficulties:␤    Apparent subscript will be treated as regex␤    at <tmp>:1␤    ------> 3ab c>; my $aref = @var; 'a0' ~~ m/@$aref7⏏5[0]/;␤»

[23:51] <sena_kun> m: my @var = <a b ab c>; my $aref = @var; say 'a0' ~~ m/@$aref[0]/;

[23:51] <camelia> rakudo-moar a643b8be1: OUTPUT: «Potential difficulties:␤    Apparent subscript will be treated as regex␤    at <tmp>:1␤    ------> 3>; my $aref = @var; say 'a0' ~~ m/@$aref7⏏5[0]/;␤｢a0｣␤»

[23:54] <sena_kun> https://github.com/perl6/roast/blob/master/S05-metasyntax/litvar.t#L34-L35 <- those two are not too ok

[23:58] <sena_kun> m: '@' ~~ /<:punct>/

[23:58] <camelia> rakudo-moar a643b8be1: ( no output )

[23:58] <sena_kun> m: say '@' ~~ /<:punct>/

[23:58] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢@｣␤»

[23:58] <sena_kun> m: say '@' ~~ /\W/

[23:58] <camelia> rakudo-moar a643b8be1: OUTPUT: «｢@｣␤»

