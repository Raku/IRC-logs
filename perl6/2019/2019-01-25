[00:07] *** dct left
[00:09] *** rindolf left
[00:16] *** coet left
[00:16] <vrurg> Looks like the autogenerated BUILDALL doesn't call BUILDALL from ancestors. Am I right in this guess?

[00:17] *** w_richard_w joined
[00:31] *** xi- left
[00:31] *** kurahaupo_ left
[00:31] *** kurahaupo joined
[00:33] *** xi joined
[00:46] *** aborazmeh joined
[00:46] *** aborazmeh left
[00:46] *** aborazmeh joined
[00:48] *** xi left
[00:52] *** xi joined
[00:53] *** hph^ left
[00:53] *** hph^ joined
[00:53] *** hph^ left
[00:54] *** hph^ joined
[00:55] *** hph^ left
[00:55] *** hph^ joined
[00:55] *** hph^ left
[00:55] *** hph^ joined
[00:55] *** Kaiepi left
[00:55] *** hph^ left
[00:56] *** hph^ joined
[00:56] *** hph^ left
[00:56] *** hph^ joined
[00:56] *** hph^ left
[00:56] *** hph^ joined
[00:56] *** hph^ left
[01:00] *** _isomorphismes joined
[01:04] *** _isomorphismes left
[01:18] *** kurahaupo_ joined
[01:18] *** chacewells left
[01:18] *** kurahaupo_ left
[01:19] *** kurahaupo_ joined
[01:19] *** kurahaupo left
[01:20] *** kurahaupo joined
[01:21] *** kurahaupo_ left
[01:21] *** aindilis left
[01:21] *** kurahaupo left
[01:22] *** kurahaupo joined
[01:23] <leont> Yet another ¬´Cannot invoke this object (REPR: Null; VMNull)¬ª

[01:23] <leont> Adding --ll-exception doesn't change a bit of the output, that's all I'm going to get

[01:24] <leont> I keep running into precompilation issues when doing meta-programming :-(

[01:30] <sena_kun> leont, can you provide a gist please? maybe I can help, have been doing a lot of this lately.

[01:31] <sena_kun> though my solutions are most often "try to rewrite it some other way that doesn't die" or "report as a bug with a golfed gist", so not sure if qualified enough. :)

[01:32] *** kurahaupo left
[01:32] *** kurahaupo_ joined
[01:32] *** kurahaupo_ left
[01:33] *** kurahaupo joined
[01:34] <leont> I'm using a trait to mix in a role into a Sub

[01:35] <leont> So far I've "solved this" by postponing this whole approach of using a trait to make something happen at compile-time, as it was an optimization anyway

[01:37] <sena_kun> hmm, I have used traits to mix in roles into simpler types like Str.

[01:37] <sena_kun> though it was for traits on attributes, not subroutines.

[01:45] *** aborazmeh left
[01:49] <AlexDaniel> sena_kun, jnthn: so what about `zef install Cro::WebSocket`? Does that work for you? Should it work?

[01:49] <AlexDaniel> it's the last one in R#2638 and I was hoping that it is a flapper, but it does not look so

[01:49] <synopsebot> R#2638 [open]: https://github.com/rakudo/rakudo/issues/2638 [‚ö† blocker ‚ö†] [WIP] Blin 2019.01

[01:50] * sena_kun is still on 2018.12-211-ge87b7afb0

[01:51] <sena_kun> Cro::WebSocket is known to be somewhat unstable as in "it can fail tests at 1/100 rate", but it doesn't just dies and it definetely doesn't fail tests every time.

[01:51] <AlexDaniel> here's what I see, fwiw: https://gist.github.com/AlexDaniel/6447ca01b53664305e2b2fa7866b91df

[01:51] <AlexDaniel> also it eats memory like crazy

[01:52] *** zachk left
[01:52] <sena_kun> this is another issue from known ones.

[01:52] <AlexDaniel> and that happens almost every time if not every time

[01:52] <sena_kun> and is reported at https://github.com/croservices/cro-websocket/issues/19

[01:52] <sena_kun> AlexDaniel, I think it is a regression.

[01:53] <sena_kun> please ping or .tell jnthn to look into it later, I think.

[01:53] <sena_kun> let me check what the test does exactly...

[01:53] <sena_kun> ah, frame parser.

[01:54] <sena_kun> it's a regression for sure.

[01:55] <sena_kun> as in, there are no particulary unstable parts, but I see at least `$parser.transformer($fake-in.Supply).schedule-on($*SCHEDULER).tap: -> $frame` and similar "smarty" code which was stable as a rock since its creation.

[01:55] <sena_kun> so a regression and a leak.

[01:56] <AlexDaniel> R#2644

[01:56] <synopsebot> R#2644 [open]: https://github.com/rakudo/rakudo/issues/2644 [regression][‚ö† blocker ‚ö†] Some regression with Cro::WebSocket

[01:56] * sena_kun hopes his head is still here after bringing bad news

[01:56] <sena_kun> AlexDaniel++

[02:01] <leont> Apparent, I found a bug in the multi-dispatcher -_-

[02:01] <leont> m: perl6 -e 'sub foo ($foo, Str :@bar) { .say for @bar }; foo(1)'

[02:01] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3perl6 -e7‚èè5 'sub foo ($foo, Str :@bar) { .say for @‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement‚Ä¶¬ª

[02:02] <leont> Erm

[02:02] <leont> m: sub foo ($foo, Str :@bar) { .say for @bar }; foo(1)

[02:02] <camelia> rakudo-moar 4fd8e8731: ( no output )

[02:02] <leont> m: multi foo ($foo, Str :@bar) { .say for @bar }; multi foo () {}; foo(1)

[02:02] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´Cannot resolve caller foo(Int:D); none of these signatures match:‚ê§    ($foo, Str :@bar)‚ê§    ()‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[02:02] <leont> There's no reason why the latter shouldn't work if the former does

[02:02] <AlexDaniel> m: multi foo ($foo, Str :@bar) { .say for @bar }; foo(1)

[02:02] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´Cannot resolve caller foo(Int:D); none of these signatures match:‚ê§    ($foo, Str :@bar)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[02:03] <AlexDaniel> 6c: multi foo ($foo, Str :@bar) { .say for @bar }; foo(1)

[02:03] <committable6> AlexDaniel, https://gist.github.com/1bf7e369bd0e949a33cfc0851f4f2de5

[02:03] *** sena_kun left
[02:05] *** huyna joined
[02:05] <leont> m: multi foo ($foo, Str :@bar = Array[Str].new) { .say for @bar }; multi foo () {}; foo(1)

[02:05] <camelia> rakudo-moar 4fd8e8731: ( no output )

[02:06] <AlexDaniel> leont: yeah, weird‚Ä¶ file a bug report

[02:10] <leont> Just did that, #2645

[02:13] *** kurahaupo left
[02:13] *** kurahaupo joined
[02:17] *** markoong left
[02:18] *** Kaiepi joined
[02:19] *** Cabanossi left
[02:20] *** kurahaupo_ joined
[02:20] *** molaf left
[02:20] *** Cabanossi joined
[02:21] *** kurahaupo left
[02:21] *** kurahaupo_ left
[02:22] *** kurahaupo joined
[02:22] *** kurahaupo left
[02:22] *** isomorphismes joined
[02:22] *** kurahaupo joined
[02:23] *** kurahaupo left
[02:24] *** kurahaupo joined
[02:24] *** atweiden-air left
[02:26] *** Kaiepi left
[02:26] <huyna> say "Testing the VM"

[02:26] <evalable6> huyna, rakudo-moar 4fd8e8731: OUTPUT: ¬´Testing the VM‚ê§¬ª

[02:31] <MasterDuke> the memory growth in R#2644 seems like it might be because of some weird array splicing

[02:31] <synopsebot> R#2644 [open]: https://github.com/rakudo/rakudo/issues/2644 [regression][‚ö† blocker ‚ö†] Some regression with Cro::WebSocket

[02:33] *** molaf joined
[02:33] <MasterDuke> there are a lot of splice calls where the offset is some large increasing value (e.g., 1520800320 or 50573760) and the count is 0

[02:33] <SmokeMachine> m: Mu.ACCEPTS: Set.HOW

[02:33] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´Cannot resolve caller ACCEPTS(Mu:U: Perl6::Metamodel::ClassHOW+{<anon>}); none of these signatures match:‚ê§    (Mu:U: \topic, *%_)‚ê§    (Mu:U: Mu:U \topic, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[02:34] <SmokeMachine> m: Set.^compose; Mu.ACCEPTS: Set.HOW

[02:34] <camelia> rakudo-moar 4fd8e8731: ( no output )

[02:38] <SmokeMachine> I think it‚Äôs just not being composed...

[02:38] <SmokeMachine> m: Set.^compose; say Set.HOW ~~ Metamodel::EnumHOW

[02:38] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´False‚ê§¬ª

[02:38] *** kurahaupo_ joined
[02:40] *** kurahaupo left
[02:40] *** kurahaupo_ left
[02:40] *** kurahaupo joined
[02:44] *** AlexDani` joined
[02:45] *** AlexDaniel left
[02:48] *** kurahaupo_ joined
[02:51] *** kurahaupo left
[02:54] *** w17t left
[03:01] *** _isomorphismes joined
[03:02] *** aindilis joined
[03:02] <isomorphismes> https://examples.perl6.org/categories/parsers/SimpleStrings.html "for now ... a rakudo binding issue"

[03:03] <isomorphismes> lookatme_q: is there a way to require either both ( and ) or neither ( nor )  in a regex? thanks.

[03:06] *** _isomorphismes left
[03:12] *** w_richard_w left
[03:14] *** Kaiepi joined
[03:18] <Geth> ¬¶ doc: 9c057a411b | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/HomePage.pod6

[03:18] <Geth> ¬¶ doc: Update HomePage.pod6

[03:18] <Geth> ¬¶ doc: 

[03:18] <Geth> ¬¶ doc: removed commented out `html` referring to core modules that includes a  link to a non-existent file

[03:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9c057a411b

[03:18] *** lizmat left
[03:25] *** kurahaupo_ left
[03:29] <isomorphismes> how long is the "for now" in the {} rakudo binding issue?

[03:29] <Geth> ¬¶ doc: 1ce5d971b1 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/5to6-nutshell.pod6

[03:29] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[03:29] <Geth> ¬¶ doc: Update 5to6-nutshell.pod6

[03:29] <Geth> ¬¶ doc: 

[03:29] <Geth> ¬¶ doc: Fix link with extra trailing space `.../Blue_Tiger/ `

[03:29] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1ce5d971b1

[03:30] *** leont left
[03:31] *** mowcat left
[03:33] *** guifa joined
[03:41] *** _isomorphismes joined
[03:46] *** jme` left
[03:50] *** ufobat_ joined
[03:53] <guifa> If you have a typed array, you can figure out the type of its values using .of, and you can get its class + value type using .WHAT (or .^name as a Str).  Is there any built in to isolate the base class sans the value type?

[03:54] *** ufobat left
[03:54] *** zacts joined
[04:08] <AlexDani`> m: my Str @a; say @a.of; say @a.^name; say @a.^mro

[04:08] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´(Str)‚ê§Array[Str]‚ê§((Array[Str]) (Array) (List) (Cool) (Any) (Mu))‚ê§¬ª

[04:08] *** AlexDani` is now known as AlexDaniel

[04:09] <AlexDaniel> guifa: hm, by any chance are you trying to do something like `$foo ~~ Array` ?

[04:10] <guifa> AlexDaniel: I have a (probably overly ambitious) idea to try to create a coercing assignment operator

[04:12] <guifa> so that @str-typed-array =~~ <a b c> will not fail

[04:12] <guifa> (where =~~ is going to be my operator)

[04:13] <MasterDuke> m: my Str @a; say @a.HOW.mixin_base(@a)

[04:13] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´(Array)‚ê§¬ª

[04:13] *** aborazmeh joined
[04:13] *** aborazmeh left
[04:13] *** aborazmeh joined
[04:14] <AlexDaniel> m: my Str @a; say @a.^mixin_base

[04:14] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´(Array)‚ê§¬ª

[04:14] *** Kaiepi left
[04:14] <guifa> MasterDuke: thanks!

[04:14] <AlexDaniel> m: my Str @a; say @a.^mixin_base.^name

[04:14] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´Array‚ê§¬ª

[04:15] <AlexDaniel> guifa: what's the result of `@str-typed-array =~~ <a b c>` ?

[04:15] <MasterDuke> isomorphismes: i think that {} rakudo binding issue has been around for a while'

[04:15] <AlexDaniel> intended result I mean

[04:17] <guifa> Intended result is to basically place Array[Str].new(<a b c>) (obviously, I'm overly simplifying it) into @str-typed-array

[04:17] <guifa> Because if you use = it fails because the types don't match, even though <a b c> can easily be coerced into Array[Str]

[04:17] *** Kaiepi joined
[04:19] <AlexDaniel> but‚Ä¶

[04:19] <AlexDaniel> m: my Str @a; @a = <42 b 50>; say @a

[04:19] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´[42 b 50]‚ê§¬ª

[04:20] <guifa> m: my Array[Str]¬†$a = <a b c >

[04:20] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´Type check failed in assignment to $a; expected Array[Str] but got List ($("a", "b", "c"))‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:22] <AlexDaniel> I see

[04:22] <guifa> I get why the type check fails, but I think it might be useful to have an operator that does its best to do coercions

[04:23] <guifa> (at least where they can be reasonably done, e.g., if the right term has a coercion method for the left, or for certain built in types that are predictable)

[04:23] <AlexDaniel> I don't understand this:

[04:23] <AlexDaniel> m: my Array[Str] $a; my @b := $a; @b = <a b c>

[04:23] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´Invocant of method 'STORE' must be an object instance of type 'Array', not a type object of type 'Array[Str]'.  Did you forget a '.new'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:24] <AlexDaniel> ahh, actually

[04:24] <AlexDaniel> m: my Array[Str] $a = Array[Str].new; @$a = <a b c>; say $a

[04:24] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´[a b c]‚ê§¬ª

[04:24] *** Possum left
[04:25] <AlexDaniel> guifa: what about something like this? ‚Üë

[04:25] <SmokeMachine> m: say Set.^mro

[04:25] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´((Set) (Any) (Mu))‚ê§¬ª

[04:25] <SmokeMachine> m: say Set.HOW.^mro

[04:25] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´No such method 'gist' for invocant of type 'Perl6::Metamodel::ClassHOW+{<anon>}'. Did you mean 'isa'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:26] *** Possum joined
[04:27] *** Sgeo_ joined
[04:28] <guifa> AlexDaniel: hmm... interesting

[04:29] <guifa> Although that wouldn't do much for something like this I don't think:

[04:29] <guifa> m: my Str @a; @a = (1,2);

[04:29] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´Type check failed in assignment to @a; expected Str but got Int (1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:29] <guifa> But of course

[04:30] <guifa> m: my Int $a = 1; $a.Str

[04:30] <camelia> rakudo-moar 4fd8e8731: ( no output )

[04:30] *** molaf left
[04:30] *** Sgeo left
[04:30] <guifa> m: my Int $a = 1; say $a.Str

[04:30] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´1‚ê§¬ª

[04:31] <guifa> So the idea would be that using =~~ would allow you to do @str-typed = (1,2,3,4) because all of the elements can be coerced.   

[04:34] <AlexDaniel> m: my Str @a; @a = ~¬´ (1,2,3,4); say @

[04:34] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´[]‚ê§¬ª

[04:35] <AlexDaniel> m: my Str @a; @a = ~¬´ (1,2,3,4); say @a

[04:35] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´[1 2 3 4]‚ê§¬ª

[04:35] <AlexDaniel> I wish `my Str() @a` worked

[04:37] *** dant left
[04:38] <guifa> Yeah.  What I'm thinking is beyond that though. If the classes were custom, or for fully (k/v) typed hashes. I figured a single catch all similar-ish to the smart match could be a nice tool, especially if it covers 80-90% of the typed gotchas 

[04:39] <guifa> Not sure how good I can get it to work, but hey, experimenting around is half the fun 

[04:40] <AlexDaniel> I guess people don't use typed arrays often enough

[04:40] <AlexDaniel> there are many small but painful things that need to be fixed, I think

[04:41] <guifa> I definitely overused them in my first biggish project (consequence of having done way too much Java in the past few years no doubt) and I came across it a lot

[04:43] *** Kaiepi left
[04:44] *** Kaiepi joined
[04:45] *** silug left
[04:48] <SmokeMachine> m: my Str() @a; @a = 1,2,3; day @a

[04:48] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5===‚ê§Coercion Str(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str() @a7‚èè5; @a = 1,2,3; day @a‚ê§Undeclared routine:‚ê§    day used at line 1. Did you mean 'say'?‚ê§‚ê§‚ê§¬ª

[04:48] <SmokeMachine> m: my Str() @a; @a = 1,2,3; say @a

[04:48] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str() @a7‚èè5; @a = 1,2,3; say @a‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[04:49] <SmokeMachine> m: my Str() $a; $a = 1; say $a

[04:49] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str() $a7‚èè5; $a = 1; say $a‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[04:49] <SmokeMachine> m: my Str() @a = 1,2,3; say @a

[04:49] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str() @a7‚èè5 = 1,2,3; say @a‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[04:50] <SmokeMachine> m: my Str() $a = 1; say $a

[04:50] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str() $a7‚èè5 = 1; say $a‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[04:50] <SmokeMachine> m: my Str(Int) $a = 1; say $a

[04:50] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Int) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str(Int) $a7‚èè5 = 1; say $a‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[04:51] <SmokeMachine> m: my Str() $a = 1.Str; say $a

[04:51] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str() $a7‚èè5 = 1.Str; say $a‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[04:51] *** kurahaupo joined
[04:51] <SmokeMachine> bisect: old=2018.11 my Str() $a = 1; say $a

[04:51] <bisectable6> SmokeMachine, On both starting points (old=2018.11 new=4fd8e87) the exit code is 1 and the output is identical as well

[04:51] <bisectable6> SmokeMachine, https://gist.github.com/5e24412763b5253ff65a72f78c50c79a

[04:52] <SmokeMachine> bisect: old=2018.01 my Str() $a = 1; say $a

[04:52] <bisectable6> SmokeMachine, On both starting points (old=2018.01 new=4fd8e87) the exit code is 1 and the output is identical as well

[04:52] <bisectable6> SmokeMachine, https://gist.github.com/b3d90ddbe141a2a61434eb5fe68d8d0c

[04:59] <SmokeMachine> m: sub a(Str() $a) { say $a }; a 42

[04:59] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´42‚ê§¬ª

[05:00] <SmokeMachine> I think I‚Äôm too tired to play... :( of course that doesn‚Äôt work... and the error was trying to tell me that...

[05:00] <AlexDaniel> yeah

[05:01] <guifa> doesn't work for assignment, but did give me an idea for handling things in my operator :-)

[05:03] *** huyna left
[05:06] *** zacts left
[05:06] *** shiftyp joined
[05:08] *** shiftyp left
[05:09] <guifa> In fact, if you only wanted to handle scalar assignments, would be as simple as 

[05:09] <guifa> sub infix:<=~~>(::T $a is rw, T() $b) { $a = $b }

[05:13] *** kurahaupo left
[05:14] *** meuirkat joined
[05:14] <meuirkat> anything for MSSQL server (DBIish?)... jsut getting back into perl!

[05:23] <Geth> ¬¶ doc: 2b599545dd | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/system.pod6

[05:23] <synopsebot> Link: https://doc.perl6.org/language/system

[05:23] <Geth> ¬¶ doc: Update system.pod6

[05:23] <Geth> ¬¶ doc: 

[05:23] <Geth> ¬¶ doc: Fix bad link (missing |) and change from entry target to target.

[05:23] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2b599545dd

[05:25] *** silug joined
[05:25] *** jme` joined
[05:26] <holyghost> I've managed to make a virtual loopback system for WAV files, 16 and 32 bit. I have the base widgets for my perl6 DAW working with event loop.

[05:26] *** holyghost left
[05:34] *** guifa left
[05:37] <Geth> ¬¶ doc: c8748d981a | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/traits.pod6

[05:37] <synopsebot> Link: https://doc.perl6.org/language/traits

[05:37] <Geth> ¬¶ doc: Update traits.pod6

[05:37] <Geth> ¬¶ doc: 

[05:37] <Geth> ¬¶ doc: fixed bad link

[05:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c8748d981a

[05:41] *** aborazmeh left
[05:53] <Geth> ¬¶ doc: fdef767720 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/contexts.pod6

[05:53] <synopsebot> Link: https://doc.perl6.org/language/contexts

[05:53] <Geth> ¬¶ doc: Update contexts.pod6

[05:53] <Geth> ¬¶ doc: 

[05:53] <Geth> ¬¶ doc: bad link fix

[05:53] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/fdef767720

[05:55] <Geth> ¬¶ doc: a045b7da74 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/traits.pod6

[05:55] <synopsebot> Link: https://doc.perl6.org/language/traits

[05:55] <Geth> ¬¶ doc: Update traits.pod6

[05:55] <Geth> ¬¶ doc: 

[05:55] <Geth> ¬¶ doc: bad link fix

[05:55] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a045b7da74

[06:08] *** silug left
[06:09] <Geth> ¬¶ doc: f668750c32 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[06:09] <synopsebot> Link: https://doc.perl6.org/language/faq

[06:09] <Geth> ¬¶ doc: Update faq.pod6

[06:09] <Geth> ¬¶ doc: 

[06:09] <Geth> ¬¶ doc: Attempt to fix bad link. `L<language|/language.html>` is good pod, but creates an error with htmlify.p6. Removing the extension, which is added by the site automatically, should produce a good link

[06:09] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f668750c32

[06:12] *** vrurg left
[06:14] *** jmerelo joined
[06:14] <jmerelo> releasable6: status

[06:15] <releasable6> jmerelo, Next release will happen when it's ready. 11 blockers. 158 out of 251 commits logged

[06:15] <releasable6> jmerelo, Details: https://gist.github.com/fa67cbce6ad9bbd66b3463cdb4e4cdf1

[06:15] <jmerelo> Oh, one blocker more...

[06:15] <Geth> ¬¶ doc: 28f4d6c677 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/containers.pod6

[06:15] <synopsebot> Link: https://doc.perl6.org/language/containers

[06:15] <Geth> ¬¶ doc: Update containers.pod6

[06:15] <Geth> ¬¶ doc: 

[06:15] <Geth> ¬¶ doc: fix bad link

[06:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/28f4d6c677

[06:23] <AlexDaniel> squashable6: next

[06:23] <squashable6> AlexDaniel, Next SQUASHathon in 7 days and ‚âà3 hours (2019-02-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:23] <AlexDaniel> jmerelo: what about this? ‚Üë :)

[06:23] <AlexDaniel> are you ready?

[06:24] <Geth> ¬¶ doc: f0b22bc62b | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/list.pod6

[06:24] <synopsebot> Link: https://doc.perl6.org/language/list

[06:24] <Geth> ¬¶ doc: Update list.pod6

[06:24] <Geth> ¬¶ doc: 

[06:24] <Geth> ¬¶ doc: bad link fix

[06:24] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f0b22bc62b

[06:24] <AlexDaniel> I can run blin for you, whenever you tell me to

[06:24] <jmerelo> AlexDaniel: yep, I need to do that

[06:24] <jmerelo> squashable6: status

[06:24] <squashable6> jmerelo, Next SQUASHathon in 7 days and ‚âà3 hours (2019-02-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:25] <jmerelo> AlexDaniel: I'll try to set some time aside tomorrow or Wednesday at the latest

[06:25] <jmerelo> It's been a busy end of the term

[06:26] <Geth> ¬¶ doc: 2b1185208d | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Associative.pod6

[06:26] <synopsebot> Link: https://doc.perl6.org/type/Associative

[06:26] <Geth> ¬¶ doc: Update Associative.pod6

[06:26] <Geth> ¬¶ doc: 

[06:26] <Geth> ¬¶ doc: bad link fix.

[06:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2b1185208d

[06:26] *** meuirkat left
[06:31] <Geth> ¬¶ doc: 4d79601374 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[06:31] <synopsebot> Link: https://doc.perl6.org/language/traps

[06:31] <Geth> ¬¶ doc: Update traps.pod6

[06:31] <Geth> ¬¶ doc: 

[06:31] <Geth> ¬¶ doc: bad link fix

[06:31] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4d79601374

[06:33] *** sno left
[06:38] *** cpan-p6_ joined
[06:38] <cpan-p6_> 03cpan-p6_ reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[06:40] *** cpan-p6 left
[06:47] <Xliff> I'm getting this error: ===SORRY!=== Cannot call method 'typed_panic' on a null object (definite LTA!)

[06:47] <Xliff> Part of a larger object that is not golfable at this time.

[06:49] *** ToddAndMargo joined
[06:49] <Geth> ¬¶ doc: a0c7d61a74 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/modules.pod6

[06:49] <synopsebot> Link: https://doc.perl6.org/language/modules

[06:49] <Geth> ¬¶ doc: Update modules.pod6

[06:49] <Geth> ¬¶ doc: 

[06:49] <Geth> ¬¶ doc: Remove the Link to upload to Pause because it generates an error in testing because there are no authentication parameters. Someone who gets as far as registering on Pause will find the link to upload.

[06:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a0c7d61a74

[06:49] <ToddAndMargo> Hi All.  How do I get rid of the extra space?  p6 'my $x="abc1abc2abc"; $x ~~ s| (.*) abc | $0 |; print "<$x>\n";' < abc1abc2 >

[06:49] <ToddAndMargo> I just want to delete that final "abc"

[06:51] <ToddAndMargo> never mind.   p6 'my $x="abc1abc2abc"; $x ~~ s| (.*) abc |$0|; print "<$x>\n";' <abc1abc2>

[06:51] <jmerelo> m: my $x="abc1abc2abc"; $x ~~ s| (.*) abc | $0 |; print "<$x>\n";

[06:51] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´< abc1abc2 >‚ê§¬ª

[06:51] *** domidumont joined
[06:51] <jmerelo> m: my $x="abc1abc2abc"; $x ~~ s| (.*) abc | $0 |; print $x.trim;

[06:51] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´abc1abc2¬ª

[06:51] <jmerelo> ToddAndMargo: ^^^^ 

[06:52] <ToddAndMargo> I forgot that the sub part is litteral and can't use spaces

[06:52] <Geth> ¬¶ doc: b1342b96db | (JJ Merelo)++ | doc/Language/syntax.pod6

[06:52] <synopsebot> Link: https://doc.perl6.org/language/syntax

[06:52] <Geth> ¬¶ doc: Fixes identifiers, closes #2568

[06:52] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b1342b96db

[06:52] *** Tormod joined
[06:53] <jmerelo> m: my $x="abc1abc2abc"; $x ~~ s| (.*) abc | $0 |; print $x.perl

[06:53] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´" abc1abc2 "¬ª

[06:53] <jmerelo> m: my $x="abc1abc2abc"; $x ~~ s| (.*) abc |$0|; print $x.perl

[06:53] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´"abc1abc2"¬ª

[06:53] <jmerelo> ToddAndMargo: ^^^^

[06:56] <Xliff> typed_panic issue results from a misnamed package. The right package name is issued in the use statement, but in that file, the "unit package" declaration does NOT use the correct name.

[06:56] <Xliff> Still not golfable, but maybe someone can try some tests and see if they can trigger it.

[06:57] <Xliff> Nope. Still there, but further along, this time.

[06:57] *** ChoHag left
[06:58] <Xliff> m: use v6.vc; say 1

[06:58] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´===SORRY!===‚ê§Cannot call method 'typed_panic' on a null object‚ê§¬ª

[06:58] <Xliff> ^^

[06:59] <jmerelo> Xliff: wow.

[06:59] <Xliff> jmerelo: Yeah.

[06:59] *** ToddAndMargo left
[07:00] *** rindolf joined
[07:04] *** Tormod left
[07:06] *** Tormod joined
[07:13] *** ravenousmoose joined
[07:18] *** sno joined
[07:21] *** huyna joined
[07:24] *** cpan-p6_ left
[07:24] *** cpan-p6 joined
[07:24] <cpan-p6> 03cpan-p6 reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[07:27] *** domidumont1 joined
[07:31] *** domidumont left
[07:33] *** sauvin joined
[07:34] *** huyna left
[07:38] *** jmerelo left
[07:52] <tyil> >:(

[07:52] <tyil> stop dying

[07:52] <tyil> or I'm going to rewrite you

[07:53] *** powerbit left
[07:54] *** patrickb joined
[07:55] <Xliff> \o/

[07:55] <Xliff> I can run javascript in a simple browser via WebKit in Perl6!!!!

[07:55] <Xliff> JavaScript and Perl6 can now communicate! :D :D

[07:56] <Xliff> tyil: I feel your pain. Was just there not 5 minutes ago.

[07:57] <tyil> ;~;

[07:57] <tyil> I need to rewrite it anyway since I have better infra to work with for those updates now

[07:59] *** patrickb left
[08:10] <tyil> I should setup grafana and start gathering stats on my infra and services as well tbh

[08:14] <Xliff> UPDATED -- JavaScript!! -- https://gist.github.com/Xliff/afed9c58e738dec8e144d76645520c8f

[08:33] *** saki joined
[08:33] *** saki left
[08:36] *** w17t joined
[08:37] *** aborazmeh joined
[08:37] *** aborazmeh left
[08:37] *** aborazmeh joined
[08:41] <tyil> good timing tbh, it seems chrom(e|ium) and firefox are going to break adblocking

[08:41] <tyil> so we need a new browser

[08:42] *** yqt joined
[08:47] *** ravenousmoose_ joined
[08:49] *** ravenousmoose left
[08:52] *** saki joined
[08:53] *** saki left
[09:00] *** lizmat joined
[09:01] *** saki joined
[09:01] *** saki left
[09:13] *** reach_satori_ left
[09:14] *** _isomorphismes left
[09:21] *** zakharyas joined
[09:22] *** dakkar joined
[09:24] *** abraxxa left
[09:25] *** abraxxa joined
[09:26] *** someuser joined
[09:42] *** robertle joined
[09:43] *** reach_satori joined
[09:47] *** aborazmeh left
[09:48] *** gregf_ joined
[10:08] <El_Che> tyil: firefox?

[10:17] *** pmurias joined
[10:21] <Altreus> Presumably there will be a fork that doesn't

[10:21] <Altreus> good thing you said though, because I was about to try switching back to firefox even though it's so slow

[10:32] * Altreus installs brave browser

[10:33] <pmurias> Altreus: doesn't brave replace ads with their own ads or something like that?

[10:34] <Altreus> gonna see

[10:40] *** pmurias left
[10:42] <tyil> pmichaud: yes

[10:43] <tyil> I'm waiting for Xliff's Perl 6 browser :'D

[10:43] <cpan-p6> New module released to CPAN! FastCGI-NativeCall (0.0.6) by 03JSTOWE

[10:46] <Xliff> WTF? Why break ad-blockers?

[10:46] <Xliff> Stupid things will block the site contents if left to run rampant!

[10:49] <Xliff> >:(

[11:03] *** reach_satori left
[11:10] *** pmurias joined
[11:11] <tyil> welcome to google, who's sole purpose is to show more ads

[11:11] <tyil> I'm not sure why anyone expected google to not try and break everything to ensure people look at more ads

[11:15] <Xliff> Google was supposed to be the good guy. I'm so disappointed.

[11:15] *** reach_satori joined
[11:16] <Xliff> And now, I can't get to YouTube without a forced ad going down my throat.

[11:18] *** leont joined
[11:21] <tadzik> google, the good guy? Lol

[11:22] <tadzik> they're ad company. Their product is you. All the software they create is merely a platform to sell you on

[11:22] <tadzik> when your entire business model revolves around showing people ads, it's a reasonable plan to dominate the web browser market, and when no real competition exists just force everyone to bend over

[11:24] <tadzik> using anything that uses chromium/blink under the hood just adds to the problem: Chrome-alike keeps being the dominant web client, and google keeps being able to decide how to shape the web around it

[11:25] <tadzik> (sorry for the vent :P)

[11:29] *** scimon joined
[11:33] *** MasterDuke left
[11:35] *** pecastro joined
[11:44] *** molaf joined
[11:48] *** markoong joined
[12:00] <moritz> that's why I'm a nearly-religious firefox user :)

[12:05] *** powerbit joined
[12:09] *** sena_kun joined
[12:15] *** kurahaupo joined
[12:15] *** pmurias left
[12:15] *** pmurias joined
[12:17] * leont has been a mozilla user for so long that he even ran netscape 5 for a while (yes that existed, and it was easily their worst.

[12:25] <pmurias> tadzik: OTOH if there are other serious users and developers of blink then there is a least a threat of someone forking it

[12:32] <leont> Yeah, this is an issue worth forking over, even though it's kind of unsustainable in the long term

[12:35] <tadzik> the other side is that maining a separate browser engine is also unsustainable in the long term

[12:35] <tadzik> this is what Opera realized a few years back, and Microsoft recently

[12:44] *** zakharyas left
[12:45] <pmurias> I would assume Microsoft has enough resources to maintain a browser

[12:46] <pmurias> making their browser behave exactly like Chrome is a better strategy if they want to challenge it

[12:49] <leont> Microsoft forking chrome would be an interesting turn of events

[12:49] <El_Che> leont: netscape 5? you youngster

[12:50] <El_Che> anyway, never got on the the chrome wagon, FF since Phoenix

[12:53] <leont> I did use 2, 3, and 4 as well, but netscape 5 never even got out of alpha, and hence I've never met anyone else who used it

[12:53] <El_Che> I was backpacking on those days and I had a cd with early Phoenix and Firebird I installed on cybercaf√©s to work around their stupid browsers (skinned IE or something)

[12:53] <El_Che> So I must have installed FF and predecessors in around 40 countries :)

[12:54] <tyil> moritz: imo, Firefox has gone downhill very fast in the past couple years as well anyway

[12:54] <leont> It's the start of the rewrite that would later become mozilla, and even later than that firefox

[12:54] <tyil> there are no good browsers nowadays, firefox is only reasonably acceptable because the alternatives are worse

[12:54] <leont> Firefox went copying chrome, and I hated it at every turn

[12:54] <El_Che> UI?

[12:54] <tadzik> copying chrome in what way?>

[12:54] <leont> Mainly UI

[12:55] <tyil> leont: and making garbage plugins like pocket and looking glass

[12:55] <tyil> which came installed and enabled by default for some reason

[12:55] <tyil> breaking all customization by breaking XUL

[12:55] <El_Che> lookily you can disable pocket, but it shoudn't be on by default

[12:55] <El_Che> luckily

[12:55] <tyil> I just compile Firefox without pocket

[12:55] <moritz> I'm pretty OK with firefox since Quantum

[12:55] <tyil> its the only way to be sure Mozilla won't fuck you over 

[12:56] <El_Che> pocket.enabled to false in about:config does the trick

[12:56] <tyil> untill they "accidentally" switch it on again

[12:56] <El_Che> They haven't so far

[12:56] <tyil> I'm not taking any chances, I'll just remove it altogether

[12:56] <El_Che> and if it's enabled you'll see it right away

[12:57] <El_Che> (before I had a decent volume allowence on mobile I use to use pocket before FF integrated it)

[12:58] <tyil> I've lost confidence in Mozilla's good will these days, so I just prefer to compile it without all that garbage they throw in

[12:59] *** domidumont joined
[13:02] *** domidumont1 left
[13:10] *** pmurias left
[13:11] *** pmurias joined
[13:20] <tbrowder> hi, #perl6

[13:21] <tbrowder> .tell lizmat i have a p6 pic that might be suitable for next p6 weekly

[13:21] <yoleaux> tbrowder: I'll pass your message to lizmat.

[13:21] <lizmat> .

[13:21] <yoleaux> 13:21Z <tbrowder> lizmat: i have a p6 pic that might be suitable for next p6 weekly

[13:21] <lizmat> do tell

[13:22] *** jc_atikon joined
[13:22] *** jc_atikon left
[13:22] <tbrowder> it's a pic of my new personal florida car tag with "PERL 6" on it

[13:22] *** jcarty joined
[13:24] <tbrowder> small jpg, 44kb

[13:25] <lizmat> could you gist it somewhere or mail it to me

[13:25] <tbrowder> email addr?

[13:28] *** lucasb joined
[13:29] <jcarty> Can someone tell me where I can find out what the significants of a *% is in the arguments for this method.   https://github.com/perl6-community-modules/perl6-WWW/blob/master/lib/WWW.pm6#L14

[13:29] <jcarty> I was trying to give it a hash with some headers but it did not seem to like that.

[13:31] <sena_kun> you have to pass named arguments there.

[13:31] *** someuser left
[13:31] <sena_kun> or if you have a Hash, then you need to make it a Capture. Like...

[13:31] <leont> That's slurpy named arguments

[13:32] <sena_kun> m: sub a($a, *%rest) { say %rest; }; a(1, a => 1, b => 2); my %args = a => 1, b => 2; a(1, |%args);

[13:32] <camelia> rakudo-moar 4fd8e8731: OUTPUT: ¬´{a => 1, b => 2}‚ê§{a => 1, b => 2}‚ê§¬ª

[13:33] <tbrowder> lizmat: what'cha think?

[13:35] <lizmat> it's a bit small ?

[13:35] *** ravenousmoose[aw joined
[13:35] <lizmat> I guess I'll wait for the picture with the truck  :-)

[13:36] *** ravenousmoose[aw left
[13:36] <tbrowder> i can make it bigger, full size is about 1.3 Mb

[13:37] <jcarty> Ah thank you Sena. I've never really seen * or a | appearing in the parameters and I wasn't sure where to find out what they meant.

[13:38] <sena_kun> jcarty, https://docs.perl6.org/language/functions#Slurpy_conventions <- also see this.

[13:38] <tbrowder> lizmat: of course it's b&w because it's a pic of the proof, not the real plate which will be more colorful--i'll wait for that and resend.

[13:38] <lizmat> tbrowder: yeah, think that'll be better

[13:39] <tobs> jcarty: fwiw you can also type "*%" into the search bar on the docs site and it'll show you the relevant result. It can handle non-alphabetic characters better than your average websearch.

[13:40] <lizmat> tbrowder: you'll be competing with https://twitter.com/zoffix/status/1022612337088450560

[13:41] <jcarty> You're right, not sure how I missed. I must have only looked at the first few results which were about infix

[13:41] <tbrowder> well mine says "PERL  6" (but I still love p5 folks if they are nice)

[13:50] *** natrys joined
[13:53] *** andrzejku joined
[13:53] <El_Che> If I would get plate related with Perl names it would be "ITS COMPLICATED"

[13:54] *** w17t left
[14:08] *** mowcat joined
[14:18] *** zakharyas joined
[14:20] *** gregf_ left
[14:28] *** pmurias left
[14:29] *** pmurias joined
[14:41] *** molaf left
[14:46] *** cpup left
[14:47] *** Tormod left
[14:57] *** pmurias left
[14:58] *** pmurias joined
[15:05] *** jcarty left
[15:06] *** ravenousmoose[aw joined
[15:07] *** ravenousmoose[aw left
[15:12] <leont> Despite being fairly small, it seems moving prove6 to a module and keeping a tiny two line script significantly improves startup performance (because precompilation)

[15:14] <timotimo> yeah, it's usually worth a lot to do that

[15:14] <Juerd> :|

[15:14] <timotimo> it'd be cool if we could make -MBlah -e'' completely skip loading parser and grammar for this purpose

[15:15] <Juerd> timotimo: Maybe even a command line flag that just calls a method on Blah

[15:15] <Juerd> IIRC -r is available. It could be "run"

[15:15] <jnthn> Hm, if Blah exports a MAIN then I think that will be run automatically?

[15:15] <timotimo> yeah, it should

[15:16] <Juerd> jnthn: Good point :)

[15:16] <Juerd> Still the empty -e is kind of ugly

[15:16] <leont> It's 70 lines of code and 100 lines of pod, that shouldn't take more than a milisecond per line to process

[15:16] <timotimo> we could have an extremely slimmed-down version of the grammar that fails over to the full grammar when it fails or the input has a sufficient length

[15:16] <timotimo> leont: can you --stagestats ?

[15:16] <Juerd> leont: Parsing's slow :(

[15:17] <timotimo> when it sees a "use" statement, it'll go to the module loader immediately and only resume parsing when that's done

[15:17] *** reach_satori left
[15:18] <timotimo> with a gigantic bit of cheating we could speculatively continue parsing on the assumption that the use statement doesn't have an effect "yet"

[15:18] *** pmurias left
[15:19] <leont> It takes 0.45 seconds as a script, and 0.19 seconds when mostly a module

[15:19] <leont> (That is stage parse times)

[15:20] <timotimo> a --profile-compile could be interesting; what rakudo version do you have?

[15:21] <leont> 2018.12

[15:21] <timotimo> OK, cool. if you give me the result of --profile-compile --profile-filename=profile.sql i can have a closer look if anything stands out

[15:21] *** pmurias joined
[15:21] <leont> Before? After? Both?

[15:22] <pmurias> timotimo: what would the slimmed down grammar do?

[15:22] <timotimo> pmurias: 1) consume only a tiny bit of memory, 2) be very quick to run, 3) be enough for very simple scripts

[15:22] <timotimo> both would be fine :)

[15:24] *** ravenousmoose[aw joined
[15:24] *** ravenousmoose[aw left
[15:25] *** sno left
[15:25] <pmurias> timotimo: so the mini grammar would be used for wrappers that call only call to a module or for simple scripts?

[15:25] <timotimo> for example

[15:25] <timotimo> though it may be a waste either way

[15:27] <pmurias> isn't that just an ugly workaround for lack of precompilation for scripts?

[15:27] <timotimo> perhaps

[15:28] *** pmurias left
[15:31] <jnthn> Precomp for scripts, even only for installed ones, would be nice

[15:31] <jnthn> I don't know of any reason we can't do that, other than somebody spending time to work through the problems blocking it

[15:40] *** yqt left
[15:40] *** ravenousmoose joined
[15:40] *** ravenousmoose is now known as ravenousmoose[aw

[15:41] *** ravenousmoose[aw left
[15:43] *** domidumont1 joined
[15:45] <Geth> ¬¶ doc: 8ceae43acd | cfa++ | doc/Language/routines.pod6

[15:45] <Geth> ¬¶ doc: /type/Empty ‚Üí /type/Slip#index-entry-Empty-Empty

[15:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/8ceae43acd

[15:45] <synopsebot> Link: https://doc.perl6.org/language/routines

[15:45] *** andrzejku_ joined
[15:46] *** domidumont left
[15:48] *** andrzejku left
[15:48] *** andrzejku_ is now known as andrzejku

[15:55] *** pmurias_ joined
[15:57] *** jme` left
[15:57] *** ravenousmoose[aw joined
[15:58] *** ravenousmoose[aw left
[16:00] *** pmurias_ left
[16:08] *** cpup joined
[16:11] *** molaf joined
[16:14] *** molaf left
[16:16] *** robertle left
[16:28] *** pmurias_ joined
[16:35] *** pmurias joined
[16:39] *** jmerelo joined
[16:41] *** domidumont1 left
[16:42] *** zakharyas left
[16:51] *** reach_satori joined
[16:51] *** ravenousmoose[aw joined
[16:51] *** ravenousmoose[aw is now known as ravenousmoose

[16:51] *** ravenousmoose is now known as ravenousmoose[aw

[16:52] *** ravenousmoose[aw left
[16:54] *** ravenousmoose_ left
[16:55] *** reach_satori left
[17:02] <SmokeMachine> m: say Mu.ACCEPTS: Array.HOW

[17:02] <camelia> rakudo-moar d499bd4bc: OUTPUT: ¬´Cannot resolve caller ACCEPTS(Mu:U: Perl6::Metamodel::ClassHOW+{<anon>}); none of these signatures match:‚ê§    (Mu:U: \topic, *%_)‚ê§    (Mu:U: Mu:U \topic, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:03] <SmokeMachine> m: Array.^compose; say Mu.ACCEPTS: Array.HOW

[17:03] <camelia> rakudo-moar d499bd4bc: OUTPUT: ¬´True‚ê§¬ª

[17:04] *** sca_ left
[17:04] *** caa51h_ is now known as caa51h

[17:06] *** pmurias left
[17:06] *** pmurias_ left
[17:06] <SmokeMachine> .tell guifa the =~~ operator is a great idea!

[17:06] <yoleaux> SmokeMachine: I'll pass your message to guifa.

[17:09] *** ravenousmoose[aw joined
[17:09] *** ravenousmoose[aw left
[17:12] *** sca joined
[17:17] *** pmurias joined
[17:17] <jmerelo> SmokeMachine: what does it do?

[17:17] *** pmurias_ joined
[17:18] <SmokeMachine> jmerelo: auto coerce...

[17:18] *** cosimo left
[17:18] <jmerelo> SmokeMachine: interesting.

[17:19] <SmokeMachine> jmerelo: https://colabti.org/irclogger/irclogger_log/perl6?date=2019-01-25#l271

[17:20] <jmerelo> SmokeMachine: is that already in the code? In the next release?

[17:21] <jmerelo> releasable6: status

[17:21] <releasable6> jmerelo, Next release will happen when it's ready. 10 blockers. 158 out of 254 commits logged

[17:21] <releasable6> jmerelo, Details: https://gist.github.com/eda3c084aa470cf85df9d9d00643c2c1

[17:21] <SmokeMachine> jmerelo: no!

[17:21] <jmerelo> SmokeMachine: ah, just an operator defined somewhere. Interesting anyway.

[17:21] <jmerelo> (I was also afraid I'd have to document it)

[17:22] <SmokeMachine> :)

[17:22] *** dakkar left
[17:22] *** scimon left
[17:27] *** molaf joined
[17:38] *** cpan-p6 left
[17:40] *** cpan-p6 joined
[17:40] *** WqZtM52a is now known as daemon

[17:40] <cpan-p6> 03cpan-p6 reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[17:40] *** pmurias left
[17:40] *** pmurias_ left
[17:41] *** ravenousmoose joined
[17:41] *** ravenousmoose is now known as ravenousmoose[aw

[17:42] *** ravenousmoose[aw left
[17:45] *** robertle joined
[17:47] *** reach_satori joined
[17:55] <daxim> m: grammar {rule TOP { x <Y> z }; rule Y { y };}.parse('x y z').perl.say

[17:55] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´Match.new(orig => "x y z", made => Any, list => (), pos => 5, from => 0, hash => Map.new((:Y(Match.new(hash => Map.new(()), pos => 4, from => 2, list => (), made => Any, orig => "x y z")))))‚ê§¬ª

[17:55] <daxim> how do I keep the tokens as part of the tree, like in other parsers?

[17:56] <jmerelo> daxim: you do have the Y token in the hash key

[17:56] <daxim> in regexp-grammars, I can assign to $MATCH, but assigning to $<something> apparently makes no difference

[17:57] <daxim> jmerelo, Y is a rule

[17:57] <daxim> the tokens are x, y and z

[17:57] <jmerelo> It could be a token

[17:57] <jmerelo>  m: grammar {rule TOP { x <Y> z }; token Y { y };}.parse('x y z').perl.say

[17:57] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´Match.new(list => (), from => 0, orig => "x y z", pos => 5, made => Any, hash => Map.new((:Y(Match.new(list => (), from => 2, orig => "x y z", pos => 3, made => Any, hash => Map.new(()))))))‚ê§¬ª

[17:58] <daxim> ok

[17:58] *** ravenousmoose[aw joined
[17:58] <daxim> I want to keep the terminals.

[17:58] <jmerelo> daxim: you can do the same with the others. If you want them tokenized, you'll have to create a token for them.

[17:58] <daxim> is there no other way?

[17:59] <jmerelo>  m: grammar {rule TOP { <TERM> <Y> <TERM> }; token TERM { \w+ }; token Y { y };}.parse('x y z').perl.say

[17:59] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´Match.new(hash => Map.new((:TERM([Match.new(pos => 1, made => Any, from => 0, hash => Map.new(()), list => (), orig => "x y z"), Match.new(made => Any, from => 4, hash => Map.new(()), list => (), orig => "x y z", pos => 5)]),:Y(Match.new(made => Any, ‚Ä¶¬ª

[17:59] <jmerelo> Hey, that worked.

[17:59] *** ravenousmoose[aw left
[17:59] <jmerelo> daxim: afraid not. They're explicitly called tokens for a reason... if you want to tokenize, you have to create a token for them...

[18:00] <daxim> I'm thoroughly disappointed

[18:00] <daxim> btw there is no separate 'y' in the result of your code, either

[18:00] *** reach_satori_ joined
[18:01] <timotimo> daxim: getting the "x y z" for TOP and "y" for Y is not good enough?

[18:01] *** pmurias joined
[18:02] *** pmurias_ joined
[18:02] <timotimo> and there is a separate y, it just doesn't get output as "y", it gets output as "orig was x y z, the result was from 2 to 3"

[18:02] <timotimo> m: grammar {rule TOP { <TERM> <Y> <TERM> }; token TERM { \w+ }; token Y { y };}.parse('x y z').say

[18:02] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´ÔΩ¢x y zÔΩ£‚ê§ TERM => ÔΩ¢xÔΩ£‚ê§ Y => ÔΩ¢yÔΩ£‚ê§ TERM => ÔΩ¢zÔΩ£‚ê§¬ª

[18:02] <jmerelo> daxim: ^^^ right.

[18:02] <timotimo> the gist output is a lot more readable

[18:03] <timotimo> which is why .gist is what's "for humans" and .perl is what's "for compilers"

[18:03] *** reach_satori left
[18:05] <timotimo> daxim: does that solve your troubles or do you need something more?

[18:06] <timotimo> also, you can still totally just have positional captures with ( ), that way you have no need to introduce new tokens/regex/rule things in your grammar

[18:06] <timotimo> if you'd prefer a name over having numbers, go with $<bloop>=[x y z] instead

[18:09] *** Kaiepi left
[18:13] *** Kaiepi joined
[18:13] <daxim> m: grammar {rule TOP { $<bloop>=(x) $<bloop>=(<Y>) $<bloop>=(z) }; rule Y { $<bloop>=(y) };}.parse('x y z').perl.say

[18:13] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´Match.new(from => 0, list => (), orig => "x y z", hash => Map.new((:bloop([Match.new(hash => Map.new(()), pos => 1, made => Any, from => 0, orig => "x y z", list => ()), Match.new(hash => Map.new((:Y(Match.new(hash => Map.new((:bloop(Match.new(pos => ‚Ä¶¬ª

[18:14] <timotimo> using $<bloop>=(abc) will give you the name as well as the number

[18:14] <daxim> can you show me a working example?

[18:14] <timotimo> m: grammar {rule TOP { $<bloop>=(x) $<bloop>=(<Y>) $<bloop>=(z) }; rule Y { $<bloop>=(y) };}.parse('x y z').say

[18:14] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´ÔΩ¢x y zÔΩ£‚ê§ bloop => ÔΩ¢xÔΩ£‚ê§ bloop => ÔΩ¢y ÔΩ£‚ê§  Y => ÔΩ¢y ÔΩ£‚ê§   bloop => ÔΩ¢yÔΩ£‚ê§ bloop => ÔΩ¢zÔΩ£‚ê§¬ª

[18:15] <timotimo> oh? was i wrong about the round parenthsis?

[18:15] <timotimo> perhaps i was :)

[18:15] <timotimo> anyway, that's just your code again, but with .say instead of .perl.say

[18:17] <timotimo> i need to be AFK for a bit, but i think you're on the right track here, just make sure not to look at the .perl output :)

[18:17] <timotimo> Data::Dump::Tree has a special role you can mix in to dump match objects especially

[18:17] <timotimo> that could maybe make things clearer

[18:17] <timotimo> o/

[18:17] <daxim> nothing is clear

[18:18] <daxim> how can I override the parse method? I want to customise the return value with a callback or something

[18:19] <lizmat> m: role A { method Str() { say "foo"; callsame } }; my $a = 42 but A; say $a.Str

[18:19] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´foo‚ê§42‚ê§¬ª

[18:20] <lizmat> daxim: ^^

[18:21] <lizmat> https://docs.perl6.org/language/functions#Re-dispatching

[18:21] <daxim> yes but that fires only once the whole tree has already been assembled with Match-es, right?

[18:22] <lizmat> is this for debugging ?

[18:23] <daxim> this is for keeping nonterminals

[18:23] <daxim> terminals

[18:24] <lizmat> which return value do you want to customize?

[18:25] <daxim> the whole return value, recursively.  e.g. just ["TOP","x",["Y","y"],"z"] instead of nested Match objects

[18:26] <lizmat> well, that's a bit hard in cases where you have positional and named matches at the same level

[18:26] <lizmat> as the Match object is the only type of object that can keep both an Array as well as a Hash

[18:28] *** Kaiepi left
[18:29] *** zachk joined
[18:29] *** Kaiepi joined
[18:29] <lizmat> afk for a bit&

[18:30] *** manjaroCinnamon joined
[18:30] *** zachk left
[18:30] *** zachk joined
[18:30] <isomorphismes> Is mojolicious, dancer, or another framework more adopted in perl6?

[18:30] <isomorphismes> or does it not matter?

[18:30] *** manjaroCinnamon left
[18:34] <daxim> dancer port: https://modules.perl6.org/dist/Bailador:cpan:UFOBAT   another web framework:  https://cro.services/

[18:35] *** zachk left
[18:35] *** zachk joined
[18:36] <jmerelo> Hi, isomorphismes 

[18:36] <jmerelo> isomorphismes: it's not that it does not matter. It's simply a different language. You can't simply "adopt" it. You can either use some modules in lizmat's butterfly project to convert your code, or rewrite it

[18:37] <jmerelo> isomorphismes: that's been the approach of Bailador, which is a translation of Dancer concepts to Perl 6

[18:39] <zachk> isomorphismes, I'd say check out cro, it can do more then just web services, I wrote a chat server in it using under 50 lines of code

[18:43] <isomorphismes> jmerelo: gotcha. thanks

[18:43] <isomorphismes> zachk: thank you

[18:43] <jmerelo> isomorphismes: sure :-) Any time.

[18:45] <isomorphismes> zachk: did you post your chat server on github?

[18:45] <isomorphismes> daxim: thank you

[18:46] <zachk> isomorphismes, yes with incomplete global variable interpolation for chat extension

[18:46] <zachk> it's my first big perl6 program

[18:46] <zachk> hold on...

[18:47] <zachk> https://github.com/ArchaicArchon/tchat/blob/master/tchat.p6 

[18:47] <jmerelo> zachk: congrats :-)

[18:47] <zachk> you could just sort of ignore the interpolate sub/function and take it out of the code and tidy it up a bit

[18:47] <zachk> thank you

[18:48] <zachk> I have written quite a few simple chat servers, this is the smallest so far 

[18:51] <isomorphismes> is there a command-line (non-browser) way to search the v6 version of CPAN? I'm trying to compare Cro::TCP to whatever base TCP rakudo has. Not sure of the workflow. cheers

[18:52] <zachk> you probably want to zef install cro like it says on cro's website 

[18:52] <zachk> oh compare, nvm 

[18:53] <isomorphismes> zachk: yeah I mean without searching github repos through google, can I do in two panes zef search TCP | zef info -    ~versus~   zef info Cro::TCP

[18:53] <zachk> isomorphismes, you know more zef than me! 

[18:54] <zachk> cro uses supplies and messages , you dont have to handle raw sockets or do much error handling afaik 

[19:09] *** Kaiepi left
[19:09] *** Kaiepi joined
[19:11] *** someuser joined
[19:13] <isomorphismes> tks

[19:15] *** Kaiepi left
[19:16] <jmerelo> isomorphismes: there are actually two versions of CPAN v6, one is called "ecosystem" (it's simply a file in a repo) and the other is the Perl 6 directory in CPAN. As you have pointed out, you can search both with zef

[19:16] <jmerelo> also modules.perl6.org

[19:17] <jmerelo> That only searches module names, not "provides" names https://modules.perl6.org/search/?q=TCP

[19:19] <jmerelo> Also, they return different things. Well... modules.perl6.org looks up descriptions and names, while zef searches "provides", but apparently not descriptions.

[19:20] <isomorphismes> jmerelo: thanks. yeah, I am not having good luck with zef search

[19:20] <isomorphismes> I like the name though

[19:20] <jmerelo> isomorphismes: I'm looking up the source, anyways. Sometimes it's got goodies that are not immediately available to non-initiated

[19:20] *** pmurias left
[19:20] *** pmurias_ left
[19:21] *** Cabanossi left
[19:22] <isomorphismes> jmerelo: sounds like simplest thing to do to stay in terminal is have a clone of github.com/perl6/ecosystem and search in there for things. I'm fine with that

[19:22] *** Kaiepi joined
[19:22] <isomorphismes> techniaclly calling otu to the net is just more work anyway (and not accessible in the mountains)

[19:22] *** sauvin left
[19:26] *** pmurias joined
[19:28] *** Kaiepi left
[19:28] <jmerelo> isomorphismes: two things

[19:29] *** Kaiepi joined
[19:29] <jmerelo> isomorphismes: first, if you see when zef operates it downloads a couple of files. They're probably stored somewhere, but you can just download them from the repo.

[19:29] <jmerelo> isomorphismes: second, I'm checking out the source and it might have something like that.

[19:29] <jmerelo> I mean, to search for other fields.

[19:31] *** pmurias_ joined
[19:32] *** Cabanossi joined
[19:33] <isomorphismes> yeah I had that thougth as well

[19:34] <isomorphismes> it's also a little shocking to not have man rakudo etc.

[19:34] <isomorphismes> man zef

[19:35] *** lizmat left
[19:36] *** Tormod joined
[19:36] <jmerelo> isomorphismes: checking out sources. Looks like internally it's prepared to look source up based on other fields, but it's not in the CLI

[19:37] <cpan-p6> New module released to CPAN! AttrX-Mooish (v0.6.0) by 03VRURG

[19:37] <jmerelo> isomorphismes: so, modules.perl6.org or files

[19:37] <sena_kun> jmerelo, what are you trying to find?

[19:38] <sena_kun> a complete ecosystem metadata dump file(s)?

[19:42] <jmerelo> sena_kun: look up info fields and other fields of distros

[19:42] <jmerelo> isomorphismes: this does something, at least: curl https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json | jq ".[] | .description  "  | grep TCP

[19:43] <jmerelo> But you need to repeat it for the two sources, and then for every field.

[19:43] <jmerelo> sena_kun I keep thinking an alternate installation tool would really help Perl 6

[19:43] <isomorphismes> anybody in here knows Gabor Szabo's email / way to ge tinvitation to perl6-bailador.slack.com ?

[19:44] <jmerelo> .seen szabgab

[19:44] <yoleaux> I saw szabgab 30 Jan 2018 15:26Z in #perl6: <szabgab> It is linked under "smoke testing" on https://perl6.org/community/  so if that site is not in use then maybe it should not be linked either.

[19:44] <isomorphismes> thanks jmerelo 

[19:44] <jmerelo> isomorphismes: it's as above at gmail, probably.

[19:44] <sena_kun> jmerelo, who knows, maybe a zef plugin will do the job.

[19:44] <jmerelo> But he's not very active in Bailador lately... I think ufobat is now carrying on the work

[19:45] *** ferreira left
[19:45] <jmerelo> isomorphismes: and, come to think of it, I'm in that slack and it's been inactive for some time now...

[19:45] <isomorphismes> sena_kun: general idea being, from the cli it would be nice to be able to curl an api that gives one the information that's useful to compare multiple options.

[19:45] <jmerelo> sena_kun: if only that was documented too... 

[19:46] <jmerelo> isomorphismes: right. That would be nice. 

[19:46] <isomorphismes> npm sort of has this but you can't tell how many users, the version #, number of "stars" (stupid design anyway), or which of the packages claiming to implement [topic] actually work. no filtering..

[19:46] <isomorphismes> jmerelo: sena_kun: I'd be up for working on this another day, right now I want to add aliases for =begin boring and =begin extra to pod v6

[19:47] <isomorphismes> I think aliasing them to footnote and comment are a fine start

[19:47] <sena_kun> sounds like an idea for a service and a small client tool.

[19:47] <isomorphismes> sena_kun: definitely

[19:47] *** Cabanossi left
[19:48] <isomorphismes> but the larger problem of cheap, clear communication I want to address in a different way which Iw ill share in this chat later

[19:48] * jmerelo goes AFK for dinner

[19:48] *** jmerelo left
[19:53] <tobs> I have a character in a variable $X. How do I match anything but $X with a regex? I can't seem to find a way to interpolate into a negated character class.

[19:54] *** skids joined
[19:55] <sena_kun> m: my $a = 'a'; say  'a' ~~ /<[$a]>/; say 'a' ~~ /<-[$a]>/;

[19:55] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§Nil‚ê§¬ª

[19:55] <pmurias> random idea: would having a dancer style sugar layer on top of Cro make sense?

[19:55] <moritz> it would, especially if it stills allows some asynchronicity

[19:55] <sena_kun> pmurias, can you show an example of dancer style sugar, please?

[19:56] <tobs> m: my $X = 'a'; say  '$' ~~ /<[$X]>/; say 'a' ~~ /<-[$X]>/;

[19:56] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´ÔΩ¢$ÔΩ£‚ê§ÔΩ¢aÔΩ£‚ê§¬ª

[19:57] <tobs> sena_kun: it doesn't insert the contents of $X but Q[$X] into the character class

[19:57] <pmurias> sena_kun: I mean offering an interface like Dancer does, I would have to play around with it a bit to see how it looks like

[19:58] <sena_kun> pmurias, based on `get '/profile/:id' => sub` style stuff I see at perldancer.org, cro already has it, even cooler version of it. Of course, I may be missing something as I literaly just looked up some examples. :)

[19:58] <daxim> I have typed up my problem on SO: https://stackoverflow.com/questions/54371979/customising-the-parse-return-value-retaining-unnamed-terminals

[19:58] <sena_kun> pmurias, did you see examples of Cro::HTTP::Router usage?

[19:59] <sena_kun> tobs, oh, I am dumb, sorry.

[20:00] *** Cabanossi joined
[20:00] <tobs> ... and that's how fuzzy testing was born :)

[20:07] <pmurias> sena_kun: yes, the interface seems very similiar

[20:07] <sena_kun> :)

[20:08] *** kurahaupo_ joined
[20:10] <sena_kun> and I somehow suspect Cro has some things made nicer, or, at least, that'd be odd to jnthn to make a possibly similar interface but worse. And, as I said before, Cro is not a web framework, though parts for web framework were written using it. :)

[20:11] *** kurahaupo left
[20:12] <moritz> daxim: I've written an answer; please let me know if that goes into the right direction

[20:13] <daxim> ‚åõ processing ‚åõ

[20:20] *** andrzejku_ joined
[20:21] *** AlexDani` joined
[20:23] *** AlexDaniel left
[20:23] *** andrzejku left
[20:23] *** andrzejku_ is now known as andrzejku

[20:29] *** lizmat joined
[20:31] *** andrzejku left
[20:43] <daxim> looks good.  that's munging the tree after it's been built up fully, any possibility to transform the caps at the time they are created?

[20:45] *** kurahaupo_ left
[20:46] *** kurahaupo joined
[20:50] *** kurahaupo left
[20:52] *** AlexDani` left
[20:53] *** AlexDani` joined
[20:54] <timotimo> you might be able to override some of the allcaps methods

[20:54] *** ferreira joined
[20:54] <timotimo> m: grammar Test { rule TOP { x <Y> z }; rule Y { y }; method CAPS(|c) { say "caps called with {c.perl}" }}; Test.parse("x y z")

[20:54] <camelia> rakudo-moar 9517c3779: ( no output )

[20:54] <timotimo> m: grammar Test { rule TOP { x <Y> z }; rule Y { y }; method MATCH(|c) { say "MATCH called with {c.perl}" }}; Test.parse("x y z")

[20:54] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´MATCH called with \()‚ê§P6opaque: no such attribute '$!pos' on type Match in a Bool when trying to get a value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§MATCH called with \()‚ê§¬ª

[20:55] <timotimo> m: grammar Test { rule TOP { x <Y> z }; rule Y { y }; method MATCH(|c) { say "MATCH called with {c.perl}"; self }}; Test.parse("x y z")

[20:55] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´MATCH called with \()‚ê§MATCH called with \()‚ê§¬ª

[20:55] <timotimo> hum.

[20:55] <timotimo> m: grammar Test { rule TOP { x <Y> z }; rule Y { y }; method MATCH(|c) { say "MATCH called with {c.perl} on {self.perl}"; self }}; Test.parse("x y z")

[20:55] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´MATCH called with \() on Match.new(made => Any, pos => 5, from => 0, hash => Map.new(()), list => (), orig => "x y z")‚ê§MATCH called with \() on Match.new(list => (), orig => "x y z", made => Any, from => 0, pos => 5, hash => Map.new(()))‚ê§¬ª

[20:55] <timotimo> m: grammar Test { rule TOP { x <Y> z }; rule Y { y }; method MATCH(|c) { say "MATCH called with {c.perl} on {self.perl}"; self.ast = $++; self }}; Test.parse("x y z")

[20:55] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´MATCH called with \() on Match.new(from => 0, made => Any, orig => "x y z", list => (), pos => 5, hash => Map.new(()))‚ê§Cannot modify an immutable Str (Nil)‚ê§  in method MATCH at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:56] <timotimo> m: grammar Test { rule TOP { x <Y> z }; rule Y { y }; method MATCH(|c) { say "MATCH called with {c.perl} on {self.perl}"; self.make: $++; self }}; Test.parse("x y z")

[20:56] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´MATCH called with \() on Match.new(pos => 5, list => (), made => Any, hash => Map.new(()), from => 0, orig => "x y z")‚ê§MATCH called with \() on Match.new(made => 0, hash => Map.new(()), pos => 5, list => (), orig => "x y z", from => 0)‚ê§¬ª

[20:56] <timotimo> would need more levels of depth, doesn't seem to run on the TOP method

[20:56] <timotimo> m: grammar Test { rule TOP { <MYTOP> }; rule MYTOP { x <Y> z }; rule Y { y }; method MATCH(|c) { say "MATCH called with {c.perl} on {self.perl}"; self.make: $++; self }}; Test.parse("x y z")

[20:56] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´MATCH called with \() on Match.new(hash => Map.new(()), pos => 5, from => 0, orig => "x y z", made => Any, list => ())‚ê§MATCH called with \() on Match.new(hash => Map.new(()), pos => 5, made => 0, list => (), from => 0, orig => "x y z")‚ê§¬ª

[20:56] <timotimo> hmm

[20:56] <timotimo> ah, of course, i'd set the value before i print the object

[20:57] <timotimo> m: grammar Test { rule TOP { <MYTOP> }; rule MYTOP { x <Y> z }; rule Y { y }; method MATCH(|c) { self.make: $++; say "MATCH called with {c.perl} on {self.perl}"; self }}; Test.parse("x y z")

[20:57] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´MATCH called with \() on Match.new(orig => "x y z", made => 0, hash => Map.new(()), list => (), from => 0, pos => 5)‚ê§MATCH called with \() on Match.new(made => 1, hash => Map.new(()), orig => "x y z", pos => 5, from => 0, list => ())‚ê§¬ª

[20:59] <timotimo> btw you can totally just override the match method inside the grammar, since grammars are just slightly funky classes

[20:59] <daxim> I didn't even know about method MATCH until now

[21:00] <daxim> where the heck is it documented?

[21:00] *** Cabanossi left
[21:02] *** kurahaupo joined
[21:03] <timotimo> it isn't

[21:04] <timotimo> it's not user-facing API .. so probably not what you want in the end

[21:04] <daxim> WELL IT'S PUBLIC NOW

[21:04] <timotimo> welp, the gig is up!

[21:06] <timotimo> i think moritz' transform sub isn't bad. you can put it into the grammar's parse method and that'll make YourGrammar.parse return the datastructure you want immediately

[21:07] <timotimo> may also want to override method "subparse", if you want to offer the functionality to your users

[21:07] <daxim> hm hm

[21:07] <timotimo> m: grammar Trickery { method parse($input, :$rule) { $input.comb } }; Trickery.parse("hello how are you").perl.say

[21:07] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´("h", "e", "l", "l", "o", " ", "h", "o", "w", " ", "a", "r", "e", " ", "y", "o", "u").Seq‚ê§¬ª

[21:09] <isomorphismes> another good cli tool would be something like bro or tldr. Pulling from examples.perl.com.

[21:13] <AlexDani`> oh yeah, I did try tldr recently

[21:13] *** AlexDani` is now known as AlexDaniel

[21:13] <AlexDaniel> and wondered if perl6 should be added there somehow

[21:13] <AlexDaniel> it does have something for perl5, so why not perl6 :)

[21:15] *** kurahaupo left
[21:16] *** cosimo joined
[21:18] <SmokeMachine> m: given Mu.^find_method(‚ÄúACCEPTS‚Äù) { say .file; say .line }

[21:18] <camelia> rakudo-moar 9517c3779: OUTPUT: ¬´SETTING::src/core/Mu.pm6‚ê§15‚ê§¬ª

[21:21] *** kurahaupo joined
[21:22] <perlbot> Randy pasted a new file at https://perlbot.pl/p/ljxspo - 

[21:25] *** sno joined
[21:25] <timotimo> lols

[21:27] <sena_kun> I am glad perl interpreter stopped at line 5 and rejected the program as invalid. :)

[21:27] * sena_kun .oO ( in many senses )

[21:37] *** kurahaupo_ joined
[21:40] *** kurahaupo left
[21:41] *** Cabanossi joined
[21:46] <lucs> Grammar question : https://gist.github.com/lucs/0f64cd5448ccfb8a94d18285bea34f7e

[21:57] *** kurahaupo_ left
[21:57] *** kurahaupo joined
[21:58] *** lucasb left
[22:02] *** niceperl joined
[22:02] *** sivoais joined
[22:06] <lucs> Gotta go. Please .tell me if any of you folks have ideas for my grammar question.

[22:06] * lucs goes to see a Hommage √† Gilles Tremblay concert.

[22:16] *** pmurias_ left
[22:16] *** pmurias left
[22:21] *** pmurias joined
[22:22] *** pmurias_ joined
[22:28] <moritz> .tell lucs I've answered in a gist comment. You might also want to check out https://www.apress.com/us/book/9781484232279 :D

[22:28] <yoleaux> moritz: I'll pass your message to lucs.

[22:31] *** pmurias left
[22:31] *** pmurias_ left
[22:32] *** pmurias joined
[22:32] *** pmurias_ joined
[22:35] *** pmurias_ left
[22:35] *** pmurias left
[22:37] *** pmurias joined
[22:37] *** pmurias_ joined
[22:40] *** pmurias left
[22:40] *** pmurias_ left
[22:42] *** pmurias joined
[22:42] *** pmurias_ joined
[22:46] *** guifa joined
[22:51] *** rindolf left
[22:54] *** Manifest0 joined
[22:56] *** kurahaupo left
[22:57] *** pmurias left
[22:57] *** pmurias joined
[22:58] *** pmurias_ left
[22:58] *** pmurias left
[22:58] *** pmurias joined
[23:02] *** pmurias_ joined
[23:02] *** SyrupThinker left
[23:07] *** pmurias left
[23:07] *** pmurias_ left
[23:08] *** pmurias joined
[23:13] *** pmurias_ joined
[23:13] *** natrys left
[23:14] *** sena_kun left
[23:15] *** cosimo left
[23:19] *** Tormod left
[23:19] *** pmurias left
[23:19] *** pmurias_ left
[23:20] *** niceperl left
[23:26] *** aborazmeh joined
[23:26] *** aborazmeh left
[23:26] *** aborazmeh joined
[23:30] *** kensanata joined
[23:37] *** kurahaupo joined
[23:37] *** kurahaupo left
[23:37] *** kurahaupo joined
