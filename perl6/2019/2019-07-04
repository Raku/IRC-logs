[00:04] *** Manifest0 joined
[00:21] *** Manifest0 left
[00:26] *** Manifest0 joined
[00:33] *** Manifest0 left
[00:38] *** nebuchadnezzar joined
[00:40] *** Manifest0 joined
[00:43] *** Celelibi joined
[00:44] *** squashable6 left
[00:45] *** Manifest0 left
[00:47] *** squashable6 joined
[00:47] *** ChanServ sets mode: +v squashable6

[00:49] *** Manifest0 joined
[00:53] *** Manifest0 left
[00:58] *** Manifest0 joined
[01:03] *** Manifest0 left
[01:06] *** aindilis left
[01:07] *** Manifest0 joined
[01:08] *** reach_satori_ joined
[01:15] *** lizmat left
[01:15] *** lizmat joined
[01:16] *** lucasb left
[01:18] *** kaare_ joined
[01:22] *** aindilis joined
[01:22] *** kaare__ left
[01:24] *** Manifest0 left
[01:25] *** nadim_ left
[01:30] *** Manifest0 joined
[01:35] *** randc joined
[01:37] *** molaf left
[01:37] <randc> it seems like if I create a multi-line string with qq:to/END/ and then print it later with say there an extra newline... is there a way to not have an ending new line in my string or do I need do go through and change all my says to prints?

[01:39] <timotimo> you can have qq:to/END/.chomp for that purpose

[01:39] <randc> oh cool... let me try that

[01:41] <randc> that worked perfectly. thanks!

[01:41] *** nadim_ joined
[01:42] <timotimo> glad to hear it

[01:49] *** molaf joined
[01:51] *** Manifest0 left
[01:55] *** nadim_ left
[01:56] *** Manifest0 joined
[02:00] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:12] *** Manifest0 left
[02:17] *** Manifest0 joined
[02:22] *** randc left
[02:38] *** mowcat joined
[02:59] *** rba left
[03:20] *** lembark left
[03:21] *** molaf left
[03:32] *** yht_ joined
[03:33] *** yht_ left
[03:34] *** Manifest0 left
[03:41] *** Manifest0 joined
[03:45] *** Manifest0 left
[03:50] *** Manifest0 joined
[03:54] *** Manifest0 left
[04:00] *** Manifest0 joined
[04:05] *** Manifest0 left
[04:09] *** Manifest0 joined
[04:16] *** Manifest0 left
[04:16] *** AlexDaniel left
[04:16] *** AlexDaniel joined
[04:21] *** Manifest0 joined
[04:40] *** Manifest0 left
[04:46] *** Manifest0 joined
[04:53] *** Manifest0 left
[04:53] *** |oLa|1 joined
[04:58] *** Manifest0 joined
[05:06] *** Manifest0 left
[05:11] *** Manifest0 joined
[05:15] *** Manifest0 left
[05:19] *** rba joined
[05:20] *** Manifest0 joined
[05:22] *** rba left
[05:23] *** jeromelanteri joined
[05:23] *** rba joined
[05:27] *** charsbar left
[05:28] *** nadim_ joined
[05:29] *** Manifest0 left
[05:35] *** rba left
[05:35] *** Manifest0 joined
[05:35] *** rba joined
[05:38] *** charsbar joined
[05:39] *** aborazmeh joined
[05:39] *** aborazmeh left
[05:39] *** aborazmeh joined
[05:41] *** jaldhar joined
[05:45] *** rba left
[05:45] *** rba joined
[05:48] *** nadim_ left
[05:51] *** nadim_ joined
[05:55] *** Manifest0 left
[06:03] *** Manifest0 joined
[06:03] *** nadim_ left
[06:05] *** jmerelo joined
[06:05] *** nadim_ joined
[06:05] *** reach_satori_ left
[06:09] *** sauvin joined
[06:10] *** Manifest0 left
[06:11] *** Sgeo_ joined
[06:14] *** Sgeo left
[06:15] *** nadim_ left
[06:17] *** Manifest0 joined
[06:20] *** MilkmanDan left
[06:22] *** MilkmanDan joined
[06:24] <jmerelo> squashable6: status

[06:24] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon in ‚âà21 hours (2019-07-06 UTC-14‚åÅUTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:24] <jmerelo> We're almost there!

[06:29] *** Manifest0 left
[06:31] *** vrurg left
[06:31] *** vrurg joined
[06:32] *** nadim_ joined
[06:34] *** Manifest0 joined
[06:38] *** aborazmeh left
[06:44] *** Manifest0 left
[06:46] *** lizmat left
[06:49] *** Manifest0 joined
[06:50] *** domidumont joined
[06:55] *** noisegul joined
[07:01] *** Manifest0 left
[07:03] *** lizmat joined
[07:04] *** ravenousmoose joined
[07:05] <Geth> ¬¶ doc: a314d6d61d | (JJ Merelo)++ | doc/Language/classtut.pod6

[07:05] <Geth> ¬¶ doc: Adds clarification and examples for class and class hierarchy vars

[07:05] <Geth> ¬¶ doc: 

[07:05] <Geth> ¬¶ doc: This closes #2876 which, besides, did have a bug using attribute

[07:05] <Geth> ¬¶ doc: syntax for class variables, which does not make a lot of sense.

[07:05] <synopsebot> Link: https://doc.perl6.org/language/classtut

[07:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a314d6d61d

[07:05] <Geth> ¬¶ doc: ef8b0d2c3e | (JJ Merelo)++ | doc/Language/classtut.pod6

[07:05] <Geth> ¬¶ doc: Clarifying visibility of variables refs #2876

[07:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ef8b0d2c3e

[07:07] *** patrickb joined
[07:07] *** sno left
[07:07] *** Manifest0 joined
[07:11] *** lizmat left
[07:12] *** Manifest0 left
[07:17] *** Manifest0 joined
[07:19] *** kaare_ left
[07:19] *** kaare__ joined
[07:21] *** kaare__ left
[07:21] *** kaare__ joined
[07:21] *** Manifest0 left
[07:23] *** kaare__ left
[07:26] *** Manifest0 joined
[07:34] *** dakkar joined
[07:37] *** aborazmeh joined
[07:37] *** aborazmeh left
[07:37] *** aborazmeh joined
[07:40] *** antoniog1miz joined
[07:52] *** lizmat joined
[07:56] *** zakharyas joined
[07:56] *** dolmen joined
[08:06] *** rindolf joined
[08:06] *** dolmen left
[08:09] *** lizmat left
[08:14] *** Manifest0 left
[08:16] *** dolmen joined
[08:21] *** Manifest0 joined
[08:27] *** kensanata joined
[08:32] *** lizmat joined
[08:34] *** ravenousmoose left
[08:34] *** Manifest0 left
[08:39] *** Manifest0 joined
[08:40] *** jmerelo left
[08:42] *** ravenousmoose joined
[08:42] *** sena_kun joined
[08:49] *** Manifest0 left
[08:53] <lizmat> .

[08:54] *** Manifest0 joined
[08:59] *** Manifest0 left
[09:02] *** tcloud joined
[09:04] *** Manifest0 joined
[09:08] *** scimon joined
[09:10] <El_Che> lizmat: ...

[09:13] <lizmat> dot

[09:24] *** ravenousmoose left
[09:25] *** Manifest0 left
[09:26] *** dolmen left
[09:28] *** aborazmeh left
[09:30] *** Manifest0 joined
[09:30] *** dolmen joined
[09:32] *** domidumont left
[09:34] *** smash joined
[09:38] *** Manifest0 left
[09:40] <antoniog1miz> m: sub b(){say "b";}; "b"();

[09:40] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´No such method 'CALL-ME' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:40] <antoniog1miz> what's the correct way of do that?

[09:41] <antoniog1miz> s/do/doing

[09:42] *** __jrjsmrtn__ joined
[09:44] <sena_kun> just "b"

[09:44] <sena_kun> ah, stop

[09:45] <sena_kun> m: sub b(){say "best" }; ::('&b')();

[09:45] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´best‚ê§¬ª

[09:45] <sena_kun> why you want to do it is another question

[09:45] *** Manifest0 joined
[09:46] <antoniog1miz> I have several functions which a share a part of the name and I need to call them all

[09:46] <antoniog1miz> so I though it would useful to use that

[09:47] <antoniog1miz> though seeing the syntax I do not know if will be helpful for the code readability

[09:47] <antoniog1miz> sena_kun: ty :D

[09:47] <sena_kun> if you know them beforehand, why not just create a list of names and iterate?

[09:48] <sena_kun> m: sub a {1.say}; sub b {2.say}; my @a = &a, &b; for @a -> &f { &f() }

[09:48] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´1‚ê§2‚ê§¬ª

[09:48] <antoniog1miz> :o

[09:48] <antoniog1miz> you're a magician

[09:48] <antoniog1miz> well, perl6 is magic

[09:49] <sena_kun> routines are first-class citizens, so they are not much different from "normal" values you can operate on.

[09:54] *** aborazmeh joined
[09:54] *** aborazmeh left
[09:54] *** aborazmeh joined
[09:55] *** Manifest0 left
[09:55] *** ravenousmoose joined
[10:00] *** Manifest0 joined
[10:03] *** ravenousmoose left
[10:09] *** Manifest0 left
[10:14] *** Manifest0 joined
[10:15] *** antoniog1miz left
[10:16] *** jeromelanteri left
[10:21] *** kensanata left
[10:27] *** Manifest0 left
[10:27] *** dolmen left
[10:32] *** Manifest0 joined
[10:34] *** aborazmeh left
[10:34] *** natrys joined
[10:36] *** Manifest0 left
[10:39] *** Black_Ribbon left
[10:41] *** Manifest0 joined
[10:54] *** Manifest0 left
[10:59] *** Manifest0 joined
[11:03] *** antoniog1miz joined
[11:06] *** Manifest0 left
[11:12] *** Manifest0 joined
[11:17] *** Manifest0 left
[11:24] *** Manifest0 joined
[11:33] *** MilkmanDan left
[11:35] *** zakharyas left
[11:35] *** MilkmanDan joined
[11:41] *** Manifest0 left
[11:43] *** antoniog1miz left
[11:46] *** Manifest0 joined
[11:52] *** ravenousmoose joined
[11:53] *** Manifest0 left
[11:59] *** Manifest0 joined
[12:01] *** kent\n left
[12:02] <xinming_> :(@ra1, @ra2) := <10 20>.map(...);

[12:02] <xinming_> https://stackoverflow.com/questions/56467377/assign-a-seqseq-into-arrays     The example is from this url, What does the : infront of (@ra1, @ra2) mean?

[12:02] <xinming_> IIRC< :(...) is syntax for signature

[12:02] <xinming_> Why can we make use of it in this case?

[12:03] *** domidumont joined
[12:05] *** reach_satori_ joined
[12:06] *** kent\n joined
[12:14] *** Manifest0 left
[12:20] *** dolmen joined
[12:20] *** dolmen left
[12:20] *** Manifest0 joined
[12:20] <jnthn> Because destructuring in Perl 6 is achieved using signatures

[12:20] <jnthn> The :(...) is a signature literal

[12:21] <jnthn> And a bind to a signature triggers signature binding

[12:31] *** dolmen joined
[12:31] *** dolmen left
[12:33] *** Manifest0 left
[12:33] *** scimon left
[12:34] *** PavelB joined
[12:37] *** scimon joined
[12:38] *** Manifest0 joined
[12:49] *** Manifest0 left
[12:53] *** domidumont1 joined
[12:54] *** Manifest0 joined
[12:56] *** domidumont left
[12:59] *** Manifest0 left
[13:04] *** Manifest0 joined
[13:07] *** molaf joined
[13:12] *** dolmen joined
[13:12] *** Manifest0 left
[13:14] *** dolmen left
[13:16] *** antoniog1miz joined
[13:17] *** lucasb joined
[13:17] *** zakharyas joined
[13:17] *** vrurg left
[13:18] *** Manifest0 joined
[13:18] *** vrurg joined
[13:22] *** Manifest0 left
[13:23] *** vrurg left
[13:26] *** |oLa|1 left
[13:29] *** Manifest0 joined
[13:32] *** dolmen joined
[13:33] *** abraxxa left
[13:39] *** vrurg joined
[13:41] *** Cabanossi left
[13:45] *** dolmen left
[13:49] *** Cabanossi joined
[13:50] *** dolmen joined
[13:54] *** abraxxa joined
[13:56] *** mahafyi joined
[14:01] *** nadim_ left
[14:02] *** Manifest0 left
[14:07] *** Manifest0 joined
[14:12] *** Manifest0 left
[14:15] *** rindolf left
[14:16] *** nadim_ joined
[14:18] *** Manifest0 joined
[14:23] *** rindolf joined
[14:24] *** vrurg left
[14:25] *** asprillia joined
[14:26] *** vrurg joined
[14:27] *** uzl joined
[14:29] <uzl> .seen jmerelo

[14:29] <yoleaux> 1 Jul 2019 14:20Z <AlexDaniel> uzl: plz :) https://gitlab.com/uzluisf/quine-mccluskey/merge_requests/1

[14:29] <yoleaux> I saw jmerelo 06:24Z in #perl6: <jmerelo> We're almost there!

[14:30] <timotimo> cool, i remember doing that algorithm in school

[14:30] <uzl> .tell jmerelo What does mean the "Class variables use the same syntax" here: https://github.com/perl6/doc/commit/a314d6d61df39a5e0f61eed84b97d9990cd12f27?diff=unified#diff-4ec2ba3fd007f2cd8c73ce98784df696R300?

[14:30] <yoleaux> uzl: I'll pass your message to jmerelo.

[14:31] <uzl> .tell What comes to mind is that they use twigils but I'm probably mistaken though.

[14:31] <yoleaux> uzl: I'll pass your message to What.

[14:32] <uzl> AlexDaniel: Will take care of that. Thanks!

[14:33] <antoniog1miz> uzl: you put .tell What

[14:34] <antoniog1miz> s/put/typed

[14:34] <uzl> antoniog1miz: Oh, my! Thanks!

[14:35] <uzl> .tell jmerelo What comes to mind is that they use twigils but I'm probably mistaken though.

[14:35] <yoleaux> uzl: I'll pass your message to jmerelo.

[14:35] <antoniog1miz> :D

[14:43] *** Manifest0 left
[14:47] *** vrurg_ joined
[14:48] *** Manifest0 joined
[14:49] *** vrurg left
[14:49] *** vrurg_ is now known as vrurg

[14:55] *** uzl left
[14:56] *** nadim_ left
[15:01] *** Manifest0 left
[15:06] *** jaldhar left
[15:06] *** jaldhar joined
[15:07] *** khisanth_ left
[15:07] *** Manifest0 joined
[15:08] *** MilkmanDan left
[15:10] *** MilkmanDan joined
[15:17] *** Manifest0 left
[15:19] <antoniog1miz> man curl

[15:19] *** nadim_ joined
[15:19] <antoniog1miz> ups

[15:20] *** khisanth_ joined
[15:20] *** jmerelo joined
[15:21] *** Manifest0 joined
[15:21] <jmerelo> releasable6: status

[15:21] <yoleaux> 14:30Z <uzl> jmerelo: What does mean the "Class variables use the same syntax" here: https://github.com/perl6/doc/commit/a314d6d61df39a5e0f61eed84b97d9990cd12f27?diff=unified#diff-4ec2ba3fd007f2cd8c73ce98784df696R300?

[15:22] <yoleaux> 14:35Z <uzl> jmerelo: What comes to mind is that they use twigils but I'm probably mistaken though.

[15:22] <releasable6> jmerelo, Next release will happen when it's ready. R6 is down. At least 1 blocker. 492 out of 667 commits logged

[15:22] <releasable6> jmerelo, Details: https://gist.github.com/c2d24c49a5b5d3ae78618de1f60f24cb

[15:22] <jmerelo> .tell uzl: you're probably right...

[15:22] <yoleaux> jmerelo: What kind of a name is "uzl:"?!

[15:23] <jmerelo> .tell uzl you're probably right...

[15:23] <yoleaux> jmerelo: I'll pass your message to uzl.

[15:25] *** ravenousmoose left
[15:27] *** natrys left
[15:30] *** antoniog1miz left
[15:32] *** Manifest0 left
[15:39] *** Manifest0 joined
[15:42] *** patrickb left
[15:43] *** Manifest0 left
[15:47] *** domidumont joined
[15:48] *** Manifest0 joined
[15:50] *** domidumont1 left
[15:57] *** scimon left
[16:01] *** Manifest0 left
[16:04] *** asprillia left
[16:04] *** ravenousmoose joined
[16:04] *** tcloud left
[16:06] *** Manifest0 joined
[16:06] <xinming_> why can't unicode be used as enum value directly?

[16:07] <xinming_> We need to use fully qualified quoted name for that. Isn't enum value a normal unicode indentifier?

[16:09] <jnthn> m: enum –ø–∏—Ç–∏ <–≤–∏–Ω–æ –ø–∏–≤–æ>; say –ø–∏–≤–æ;

[16:09] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´–ø–∏–≤–æ‚ê§¬ª

[16:09] <jnthn> Looks OK to me?

[16:10] <jnthn> It'd need to be word characters, though, to follow the identifier rules.

[16:11] *** lizmat left
[16:12] <jmerelo> jnthn: right. We can only use alphabetic characters directly.

[16:13] <jmerelo> xinming_: enums with "identifier" syntax can be used directly, if I remember correctly. For any other you need to use its FQN

[16:14] <jmerelo> m: enum numbers <1 2 3>; say 1

[16:14] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´1‚ê§¬ª

[16:14] <jmerelo> m: enum numbers <1 2 3>; say numbers::<1>

[16:14] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´1‚ê§¬ª

[16:15] <jmerelo> m: enum numbers <don't you-say that_thing>; say numbers::<don't>

[16:15] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´don't‚ê§¬ª

[16:15] <jmerelo> m: enum numbers <don't you-say that_thing>; say numbers::<ss>

[16:15] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´(Any)‚ê§¬ª

[16:16] <jmerelo> m: enum numbers <don't you-say that_thing>; say don't

[16:16] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´don't‚ê§¬ª

[16:16] <jmerelo> So right, identifier syntax.

[16:17] <ugexe> m: enum x <1s 2s 3s>; say ::("1s")

[16:17] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´1s‚ê§¬ª

[16:18] <ugexe> no FQN required

[16:18] *** |oLa| joined
[16:18] *** ravenousmoose left
[16:18] <ugexe> then again its indirect, so pick your poison

[16:19] <jmerelo> ugexe++ 

[16:28] *** antoniog1miz joined
[16:35] *** dolmen left
[16:37] <TimToady> you can still make anything a term with term:<>

[16:37] <jmerelo> TimToady: but you would need to term-ize a set of unicode codepoints to make them members of a enum posse, right?

[16:37] <jmerelo> TimToady: you would save some typing, though...

[16:38] <TimToady> yes, it's in the category of things that are possible, not the things that are easy :)

[16:39] <jmerelo> m: enum termizer ( term<1s>, term<2s> ); say 2s

[16:39] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    term used at line 1‚ê§‚ê§¬ª

[16:39] <jmerelo> m: enum termizer ( term:<1s>, term:<2s> ); say 2s

[16:39] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routines:‚ê§    term:<1s> used at line 1. Did you mean 'term:<now>'?‚ê§    term:<2s> used at line 1. Did you mean 'term:<now>'?‚ê§‚ê§¬ª

[16:41] <vrurg> m: sub term<1s> { "1s?" }; say 1s

[16:41] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub term7‚èè5<1s> { "1s?" }; say 1s‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[16:41] <vrurg> sub term:<1s> { "1s?" }; say 1s

[16:41] <evalable6> vrurg, rakudo-moar d4ceb97e0: OUTPUT: ¬´1s?‚ê§¬ª

[16:41] <jmerelo> m: sub term:<1s> {"1s"}; term:<2s> {"2s"} ; enum termized <1s 2s>; say 1s

[16:41] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    term:<2s> used at line 1. Did you mean 'term:<1s>', 'term:<now>'?‚ê§‚ê§¬ª

[16:41] <jmerelo> m: sub term:<1s> {"1s"}; sub term:<2s> {"2s"} ; enum termized <1s 2s>; say 1s

[16:41] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´1s‚ê§¬ª

[16:42] <jmerelo> m: sub term:<1s> {"1s!"}; sub term:<2s> {"2s!"} ; enum termized <1s 2s>; say 1s

[16:42] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´1s!‚ê§¬ª

[16:42] <jmerelo> Well, we are not earning much there...

[16:43] <TimToady> m: enum termizer ( (constant term:<1s> = "1S"), (constant term:<2s> = "2S") ); say 2s

[16:43] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´2S‚ê§¬ª

[16:44] <jmerelo> TimToady: ah, OK.

[16:44] <TimToady> m: ( (constant term:<1s> = "1S"), (constant term:<2s> = "2S") ); say 2s

[16:44] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´2S‚ê§¬ª

[16:44] <TimToady> the enum isn't actually necessary there...

[16:45] <jmerelo> m: enum termizer ( (constant term:<1s> = "1S"), (constant term:<2s> = "2S") ); say termizer

[16:45] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´(termizer)‚ê§¬ª

[16:45] <jmerelo> m: enum termizer ( (constant term:<1s> = "1S"), (constant term:<2s> = "2S") ); say termizer.pick

[16:45] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´2S‚ê§¬ª

[16:45] <jmerelo> Hum

[16:46] <jmerelo> m: enum termizer <1S 2S>; say termizer.pick

[16:46] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´2S‚ê§¬ª

[16:46] <jmerelo> m: enum termizer ( (constant term:<1s> = "1S"), (constant term:<2s> = "2S") ); say ::("1s")

[16:46] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´No such symbol '1s'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:46] <jmerelo> m: enum termizer ( (constant term:<1s> = "1S"), (constant term:<2s> = "2S") ); say ::("1S")

[16:46] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´1S‚ê§¬ª

[16:46] *** lucasb left
[16:50] *** jasonc left
[17:00] *** asprillia1 joined
[17:02] *** asprillia1 left
[17:02] *** rfold joined
[17:07] *** sjm_uk joined
[17:19] *** Manifest0 left
[17:19] *** |oLa| left
[17:22] *** jmerelo left
[17:23] <TreyHarris> Any cases to think about where `cmp-ok($got, &[==], $expected)` should be preferred over `is($got, $expected)` except for allomorphs? I was about to write an `is-equal` but I realized that's so obvious there must be a reason it isn't included. (I know `ok` is even simpler but you don't get the automatic diagnostics; OTOH, `cmp-ok`'s saying `# expected: 5‚ê§#  matcher: 'infix:<==>'‚ê§#      got: 4` is kinda

[17:23] <TreyHarris> crufty itself

[17:23] <TreyHarris> s:s/cases to think/cases (of Numerics) to think/

[17:25] *** Manifest0 joined
[17:27] *** dakkar left
[17:27] *** vike left
[17:27] *** Black_Ribbon joined
[17:31] * TimToady still thinks we want to have a way of turning any comparison operator used in sink context into a test that knows how to report its arguments

[17:36] <TimToady> then you just write $got == $expected plus some kind of title

[17:36] *** zakharyas left
[17:39] <TimToady> and maybe without 'use Test' such tests are optimized out, or merely warned about if false

[17:40] <TimToady> or maybe we turn 'ok' into a macro that can disect a comparison

[17:40] *** |oLa| joined
[17:41] <TreyHarris> TimToady: hah, we were thinking along the same lines, I was just squinting at pragmas to see if I could fake it that way

[17:41] <TreyHarris> I mean, cmp-ok is nearly there already if it were generalized and turned inside-out. If that makes any sense

[17:42] *** SCHAPiE left
[17:43] <TreyHarris> Wait... we currently don't have wantarray _and_ we can't multi on context?

[17:43] <TimToady> either of those would involve time travel

[17:44] <TreyHarris> So how do you write something that behaves differently in sink context?

[17:44] *** epony left
[17:44] <TimToady> the parser knows what is in sink context

[17:45] <TimToady> or it couldn't warn about it :)

[17:45] <TreyHarris> Right, but user code doesn't have access to that like Perl 5 did?

[17:45] <TimToady> m: 1 == 2

[17:45] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "==" in expression "1 == 2" in sink context (line 1)‚ê§¬ª

[17:45] <jnthn> You return an object with a `sink` method. It will be called if the thing is in sink context.

[17:45] <moritz> m: class A { method sink() { say "thunk"} }; A.new()

[17:45] <camelia> rakudo-moar d4ceb97e0: OUTPUT: ¬´thunk‚ê§¬ª

[17:45] <TimToady> we are not users :)

[17:46] <TimToady> it seems to me that there's a large piece of syntactic relief we could provide here

[17:47] <TreyHarris> Sorry, I was thinking #perl6 vs #perl6-dev. Changing how the language works has a proud tradition in Perl, but I think there's a bright line between what can be done in pure-Perl ("user code", I was calling it) and what requires nqp or other other languages

[17:47] *** sno joined
[17:47] <TimToady> well, anything is possible

[17:47] <TreyHarris> jnthn: but yes, I forgot about that; that's generalizable, is it not, for `list`, etc.? This doesn't seem to be documented

[17:48] <jnthn> Yes, .list and .hash are similar context-y things

[17:49] <TreyHarris> jnthn: but it isn't productive, is it... and is it even currently exhaustive? how do you specify stringy or numy context?

[17:49] <TreyHarris> ah, .Numeric

[17:49] <jnthn> .Stringy, .Numeric

[17:50] <evalable6> jnthn, rakudo-moar d4ceb97e0: OUTPUT: ¬´Use of uninitialized value $_ of type Any in string context.‚ê§Methods .^name, .perl, .gist,‚Ä¶¬ª

[17:50] <evalable6> jnthn, Full output: https://gist.github.com/c75c8a3516907250770402c1bce0156d

[17:50] <jnthn> haha

[17:50] <jnthn> dinner time &

[17:50] <TreyHarris> that's a bit odd though, being uppercased unlike .sink and .list and .hash... I get why, since context isn't congruent with coercion except when it is, and when it is it might as well look like coercion

[17:51] <TimToady> you know that all human languages are most irregular in the most used bits

[17:52] <TreyHarris> Huffman encoding in action, or linguistic drift by regularization, take your pick

[17:52] *** SCHAPiE joined
[17:52] <TreyHarris> Er... Huffman "coding". I said "coding". I never called it "encoding".

[17:52] <TimToady> well, and it's also an information theory thing, where irregularity provides more redundancy in some cases

[17:59] *** |oLa| left
[17:59] <TreyHarris> TimToady: off-topic, I bet you know the term I've been wracking my brain for... a loop structure first described as being distinct from the classical for-foreach-while-until in the 60's or 70's I think, by Wirth or Dijkstra maybe? Its most common application is for I/O loops or pipeline operators and has the property that there is code both before and after the condition, which is typically invariant. if a

[17:59] <TreyHarris> language like Perl 6 supports it, it lets you easily do stuff like join(); languages that don't have to fake it out somehow by including (often redundant) code outside the loop or having unwieldy logic inside it to handly first and last cases

[18:02] *** molaf left
[18:05] <TimToady> these days those are called loop-and-a-half, but I do have a hazy recollection of some more esoteric term once

[18:08] *** patrickb joined
[18:08] <TreyHarris> When the condition is a flip-flop and the code below the condition should make the loop exit after it flips, it's a guarded command. But I think there's another term besides loop-and-a-half, but yes, that will do for now, thanks

[18:16] *** Manifest0 left
[18:18] <TimToady> I think Dijkstra actually called it Premature Loop Exit when he was trying to discourage it

[18:18] <TreyHarris> It was Dijkstra, and he apparently first called it "loop and a half" in reply to Knuth's reply to Go To Considered Harmful

[18:18] <TreyHarris> Yes

[18:18] <TreyHarris> exactly

[18:19] <TreyHarris> "loop and a half" was intended to be pejorative, but Knuth liked it and adopted the term and it stuck, looks like

[18:20] <TimToady> from googling, looks like Wirth tended to call them 'multi-exit'

[18:20] <TreyHarris> Wirth was involved in that he proposed an extension to Pascal to have "sentinel loops" and his post-Pascal languages all... okay, we're doing the same Googling now :-)

[18:22] *** Manifest0 joined
[18:23] <TimToady> though obviously if you write an explicit infinite loop, a loop-and-a-half has only one exit :)

[18:23] <TreyHarris> TimToady: could you feel the quake where you are?

[18:23] *** epony joined
[18:23] <TimToady> it comes with quakes?

[18:24] <TreyHarris> 6.6 in LA?

[18:24] <TreyHarris> Er, Ridgecrest.

[18:26] <TimToady> and Searles Valley, wherever that is...

[18:27] <antoniog1miz> tbrowder: thanks a lot for your commits :)

[18:27] <TimToady> that's at least 200 miles from here

[18:29] <TimToady> I think we might feel one from that far away only if California were a solid piece of rock, which it ain't

[18:30] * TimToady blames earthquakes...

[18:30] <TreyHarris> It was felt more than 200 miles away to the southwest, but that's the other side of most of the faults

[18:31] <TimToady> I did feel the old Coalinga quake from Camarillo, but that was closer and bigger

[18:32] <TimToady> where a quake is felt in California has more to do with resonances than distance

[18:36] <TimToady> deep coastal sediments tend to amplify the lower frequencies of distant quakes

[18:37] <TimToady> where we felt the Coalinga quake, it had a period of about 2 seconds

[18:41] <TimToady> Mountain View is in a relatively shallow bowl of sediment, compared to San Jose, so they might've felt it there

[18:42] <TimToady> probably also depends on the directionality of the focal mechanism

[18:42] *** antoniog1miz left
[18:43] *** domidumont left
[18:47] *** |oLa| joined
[18:50] *** empee0 joined
[18:53] <TreyHarris> The shakealert app apparently didn't work, though from USGS's end they say it should have, they got the prediction in time. Can't wait to see that post-mortem. Dollars to donuts it's bad UI design like happened with the Hawaii false missile alert.

[18:54] <TimToady> well, the USGS doesn't *really* care about SoCal, since they're up here in Menlo Park :)

[18:54] <TreyHarris> Like a pop-up that if the operator is already using the system and happens to click at the right (wrong) moment in the right (wrong) place they dismiss it and suppress the alert

[18:55] <TreyHarris> TimToady: the briefing I just watched was the CalTech geology department's office

[18:55] <TimToady> ah, yes, they care about SoCal a bit more for some reason...

[18:57] <TimToady> the last time I was at CalTech was to sneak onto campus to watch their big-screen coverage of Voyager's Uranus flyby...

[18:58] <TimToady> (by Neptune I could watch it at JPL :)

[18:58] <TreyHarris> 'course, the problem with shakealert (and why there's been little enthusiasm for pushing it on people) is that it only starts becoming effective at a distance where damage and injury becomes less likely

[18:59] <TimToady> well, they really want it for the Big One, which will come from a distance and that won't matter much :)

[19:00] <TimToady> (that it comes from a distance, that is)

[19:02] <TimToady> that being said, I'd much rather go through an 8.0 in California than a 7.0 in any city constructed of unreinforced masonry

[19:05] <timotimo> aye, same problem with climates that are uncharacteristically hot, cold, and/or dry hitting places

[19:06] <timotimo> you can probably survive 40degC in a place that has 35degC almost every year, but a place that usually sees up to 15degC will be constructed with houses that keep the heat in as effectively as possible, and the outside is probably sprinkled with places where people can conveniently take in the sun if and when it comes

[19:07] <timotimo> rather than having shade accessible all over the place

[19:08] <TreyHarris> like Anchorage... a city that's only once before hit 30degC once is about to have four days in a row at 31

[19:08] <timotimo> that's terrible

[19:08] <timotimo> my heart goes out to the people having to suffer through that

[19:09] <timotimo> i hope the elderly are all cared for, i seem to remember they are especially at risk?

[19:10] <timotimo> OTOH, a heatwave is always a fantastic opportunity for people to sell fresh water at exorbitantly high prices

[19:10] <timotimo> and if a few people have to die so that someone can make good profits, i guess that's a socially accepted trade-off by now

[19:10] <TimToady> well, they have plenty of ice nearby they can visit

[19:11] <timotimo> oh, anchorage is pretty tiny it seems like

[19:12] <timotimo> oops, that's just one city i suppose

[19:12] <timotimo> oh, i was completely mistaken

[19:13] *** lizmat joined
[19:14] <TreyHarris> tiny in poplation, perhaps. It's actually the largest city in area in the country because it has a mountain in the middle of it (and Alaska consolidates city and country governments into "boroughs", so Anchorage city legally is much larger than the settlements)

[19:14] *** zakharyas joined
[19:14] <TimToady> of course, if you're up there, the earthquake can be a 9.2, and then it doesn't matter much how well things are built...

[19:15] <TimToady> jk, it still matters, but most structures don't have to put up with harder shaking, just longer

[19:16] *** zakharyas1 joined
[19:16] <masak> TimToady: maybe I'm being too conservative here, but I wouldn't mind at all prefixing an assertion expression with a keyword-like marker/listop, such as `assert $expected == actual();` or `expect $expected == actual();`. without that, at least to me, it feels "too magical"

[19:17] <TimToady> sure, I can buy that

[19:17] <TimToady> though assert is a bit long and has historical fatal baggage

[19:17] <timotimo> yeah, we live in a capitalist society, you can literally buy anything

[19:17] <masak> aye, I like `expect` slightly better.

[19:17] <timotimo> "hopefully"

[19:18] <TimToady> I like "ok" since we already claimed it

[19:18] <TreyHarris> how about an overloaded "so" in sink context? "so, $foo equals $bar. (given that), I'm now going to...."

[19:18] *** zakharyas left
[19:18] <TimToady> just make it capable of taking its first expr to bits

[19:19] <timotimo> "so, $foo eq $bar, right?"

[19:19] <TimToady> so in sink context could still be an unintentional error

[19:19] <timotimo> TreyHarris: have you seen "Like, Python"?

[19:19] <TreyHarris> "so" and "ok" are semantically equal in vernacular in that usage.

[19:19] <TimToady> .oO(as opposed to an intentional error?)

[19:20] <TimToady> so, $foo eq $bar, like, and stuff?

[19:20] <TreyHarris> "ok, $foo equals $bar. in that case, I can now..." s/ok/so/, same idea

[19:20] *** sjm_uk left
[19:20] <timotimo> i mean, you can literally make that a slang

[19:21] <TimToady> $foo eq $bar means "The foo matches the bar"

[19:22] <TimToady> but then the comment isn't optional, which is arguably a feature

[19:22] <TreyHarris> stuff like "so $foo eq $bar or die" seems very likely to confuse... I'd vote "ok". "ok $foo eq $bar or die" will be clearly weird

[19:23] <TimToady> yes, 'ok' is already in the correcter semantic slot

[19:23] <TimToady> 'ok' is expected to have side effects, while 'so' is not

[19:24] <TimToady> .oO(Please okay this.)

[19:25] *** vike joined
[19:25] <timotimo> has anybody considered a ternary for this purpose

[19:25] <TreyHarris> I'll never come up with a better name for some semantics than you, TimToady. Except the one time I did, and I remember being pleased for days that you had agreed to my suggestion, but I can't remember what it was. I'd have to re-read the original Apocalypses to remind myself.

[19:25] <TimToady> but it seems to me we could make ok that sort of macro, with the current syntax, and if it didn't find a comparison as the topmost operator of the first expr, just revert to the current behavior

[19:27] *** |oLa| left
[19:29] <TreyHarris> .oO(Possibly it was a case where I suggested `else` replacing a dedicated word that didn't need to be reserved for the purpose? Or vice versa when `else` was originally there but sounded very wrong? Hmm.)

[19:31] <TreyHarris> (It was back in Pugs days so at least 11 years ago, when we could finally write running Perl 6 code and started to see some rubber/road interactions.)

[19:32] <TreyHarris> TimToady: Yes, I like that. A word that's already devoted to testing can be more easily optimized out, too

[19:33] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/07/perl-weekly-challenge-15-strong-and-weak-primes-and-vigenere-encryption.html

[19:33] <notable6> lizmat, Noted!

[19:33] <TreyHarris> Assuming there were an optimization flag that would end up turning most .t files into semantic nothingness

[19:40] *** netrino joined
[19:46] *** |oLa| joined
[19:53] *** Manifest0 left
[19:58] *** Manifest0 joined
[19:59] *** pecastro joined
[20:02] *** antoniog1miz joined
[20:06] *** nepugia joined
[20:11] *** molaf joined
[20:11] *** Manifest0 left
[20:20] *** Manifest0 joined
[20:21] *** mowcat left
[20:24] *** mowcat joined
[20:24] *** sena_kun left
[20:31] *** Manifest0 left
[20:34] *** |oLa| left
[20:36] <Kaiepi> squashable6, status

[20:36] <squashable6> Kaiepi, ‚ö†üçï Next SQUASHathon in ‚âà7 hours (2019-07-06 UTC-14‚åÅUTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[20:36] <Kaiepi> oh, thought it was today

[20:36] *** Manifest0 joined
[20:48] *** zakharyas1 left
[20:49] *** Manifest0 left
[20:54] *** Manifest0 joined
[21:07] *** nepugia left
[21:09] *** antoniog1miz left
[21:18] *** noisegul left
[21:33] *** Manifest0 left
[21:39] *** Manifest0 joined
[21:44] *** ihavenohead left
[21:44] *** ihavenohead joined
[21:49] *** rfold left
[21:51] *** Manifest0 left
[21:55] *** DarthGandalf left
[21:56] *** Manifest0 joined
[21:58] *** DarthGandalf joined
[22:00] *** vrurg left
[22:04] *** sftp left
[22:05] *** sftp joined
[22:06] *** xinming-pad joined
[22:06] *** xinming-pad left
[22:06] *** xinming-pad joined
[22:06] *** xinming-pad left
[22:06] *** xinming-pad joined
[22:07] *** xinming-pad left
[22:07] *** xinming-pad joined
[22:07] *** xinming-pad left
[22:07] *** xinming-pad joined
[22:08] *** xinming-pad left
[22:08] *** xinming-pad joined
[22:08] *** xinming-pad left
[22:08] *** xinming-pad joined
[22:08] *** xinming-pad left
[22:09] *** xinming-pad joined
[22:09] *** xinming-pad left
[22:09] *** xinming-pad joined
[22:09] *** xinming-pad left
[22:09] *** xinming-pad joined
[22:10] *** xinming-pad left
[22:10] *** xinming-pad joined
[22:10] *** xinming-pad left
[22:10] *** xinming-pad joined
[22:10] *** xinming-pad left
[22:11] *** xinming-pad joined
[22:11] *** xinming-pad left
[22:11] *** xinming-pad joined
[22:11] *** xinming-pad left
[22:12] *** xinming-pad joined
[22:12] *** xinming-pad left
[22:12] *** xinming-pad joined
[22:12] *** xinming-pad left
[22:13] *** xinming-pad joined
[22:13] *** xinming-pad left
[22:13] *** xinming-pad joined
[22:13] *** xinming-pad left
[22:13] *** xinming-pad joined
[22:14] *** xinming-pad left
[22:14] *** xinming-pad joined
[22:14] *** xinming-pad left
[22:14] *** xinming-pad joined
[22:14] *** xinming-pad left
[22:15] *** xinming-pad joined
[22:15] *** xinming-pad left
[22:15] *** xinming-pad joined
[22:15] *** xinming-pad left
[22:16] *** xinming-pad joined
[22:16] *** xinming-pad left
[22:16] *** xinming-pad joined
[22:16] *** xinming-pad left
[22:16] *** xinming-pad joined
[22:17] *** xinming-pad left
[22:17] *** xinming-pad joined
[22:17] *** xinming-pad left
[22:17] *** xinming-pad joined
[22:18] *** xinming-pad left
[22:18] *** xinming-pad joined
[22:18] *** xinming-pad left
[22:18] *** xinming-pad joined
[22:18] *** xinming-pad left
[22:19] *** xinming-pad joined
[22:19] *** xinming-pad left
[22:19] *** xinming-pad joined
[22:19] *** xinming-pad left
[22:29] *** rindolf left
[22:40] *** Manifest0 left
[22:45] *** Manifest0 joined
[22:50] *** patrickb left
[22:53] *** reach_satori_ left
[22:57] *** mowcat left
[22:59] *** kaare_ joined
[22:59] *** empee0 left
[23:15] *** dominix joined
[23:22] <tbrowder> .tell antoniogamiz you're welcome, but you've done the hard part!

[23:22] <yoleaux> tbrowder: I'll pass your message to antoniogamiz.

[23:31] *** ravenousmoose joined
[23:33] *** netrino left
[23:37] *** Manifest0 left
[23:42] *** Manifest0 joined
[23:42] *** pecastro left
[23:43] *** vike left
[23:46] *** irced joined
[23:47] <irced> hey all, I started several promises but they do not seem to be running asynchronously. do I need to go lower level?

[23:49] *** reach_satori_ joined
[23:55] <irced> any suggestions on calling a subroutine asynchronously to do work on several threads besides promise?

[23:57] <jnthn> Depends on the work you're trying to parallelize, really.

[23:58] <jnthn> What does your code look like, and what measurements lead you to believe that things aren't running asynchronously?

