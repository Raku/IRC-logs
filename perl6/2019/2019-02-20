[00:07] *** snarkyboojum left
[00:08] *** w_richard_w joined
[00:19] *** MasterDuke joined
[00:19] *** MasterDuke left
[00:19] *** MasterDuke joined
[00:22] <Xliff> New type for Method+{NativeCall::Native[Method,List]}+{NativeCall::NativeCallSymbol[Str]} must have a matching representation (P6opaque vs Uninstantiable)

[00:22] <Xliff> WTF?

[00:23] *** rindolf left
[00:24] <Xliff> Can track it back to here: /home/cbwood/Projects/p6-GtkSheet/t/.precomp/63E4AAE64C7542EB0B85901B40F60D2087BC5BAA/08/08C89E729EB43D174A13395D8BC408A1A8637630:

[00:24] <Xliff> And yet another instance in which it would be Very Good for P6 to be able to do Module -> Hash resolution.

[00:40] *** AlexDaniel left
[00:50] *** dominix__ is now known as dominix

[01:03] *** kurahaupo left
[01:05] *** irco left
[01:05] *** zachk left
[01:12] <Xliff> m: my @p = <GTK:: GTKSheet>; say "GTK::Roles::CSSProvider" ~~ /^ @p/

[01:12] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «｢GTK::｣␤»

[01:13] <Xliff> m: my @p = <GTK:: GTKSheet>; say "GTKSheet" ~~ /^ @p/

[01:13] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «｢GTKSheet｣␤»

[01:13] <Xliff> m: my @p = <GTK:: GTKSheet>; say "GTSheet" ~~ /^ @p/

[01:13] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «Nil␤»

[01:24] <timotimo> Ulti: you still there?

[01:28] *** kerrhau left
[01:36] *** agentzh joined
[01:36] *** agentzh left
[01:36] *** agentzh joined
[01:38] *** mahafyi left
[01:42] <timotimo> Ulti: we put something into configure.pl because when you have a mix of gnu binutils and xcode you'll get an extremely confusing message a la "this library has been compiled for x86, but you're trying to link it into a 64bit binary"

[01:43] <El_Che> damn, John Oliver's show about Brexit was funny

[02:02] *** choiboi joined
[02:02] <choiboi> p6: say "Hello, World!";

[02:02] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «Hello, World!␤»

[02:03] <choiboi> I have been reading around the docs and I wanted to know why someone would want to use immutable variables instead of mutable ones. Does it offer more speed?

[02:04] <timotimo> it can offer clarity

[02:04] <timotimo> are you refering to "my \foo = 1" here?

[02:06] <timotimo> actually, yeah, a sigil-less variable comes without a Scalar container, so there's one less indirection for accessing

[02:07] <timotimo> the run-time optimizer aka spesh can now do better with scalars, but that's mostly in the next release

[02:11] <choiboi> timotimo: Yeah I'm refering to `\bar` variables. Thanks for your answer. Is following the docs a good way to learn Perl6?

[02:13] <timotimo> i think you'll have much more luck with something more tutorial- or book-like

[02:13] <timotimo> the docs are really meant to be a reference where you go when you're not sure about something, forgot about something, or want all the details

[02:14] <timotimo> https://perl6book.com/ - we have this cool site for Actual Books

[02:14] <timotimo> https://perl6.org/resources/ - this page links to lots of learning stuff

[02:15] <timotimo> we've just recently found out that putting the "go here to learn stuff" right next to the documentation instead of visibly in front of it will keep most people away from these

[02:16] <timotimo> oh, if you like video-learning, there's just recently been like a 1 hour video on youtube by someone who took inspiration from the "learning perl 6" book from brian d foy

[02:16] <timotimo> https://www.youtube.com/watch?v=l0zPwhgWTgM - this one

[02:16] <Xliff> Anyone know how to debug this one?

[02:16] <Xliff> #3  0x00007ffff79f4f37 in MVM_interp_run (tc=tc@entry=0x555555559ca0, initial_invoke=0x7ffff7f04ac0 <Uninstantiable_this_repr>, invoke_data=0x55555659ba60)

[02:16] <Xliff>     at src/core/interp.c:3142

[02:16] *** mowcat left
[02:16] <Xliff> I'm particularly worried about "<Uninstantiable_this_repr>"

[02:16] *** mowcat joined
[02:17] <timotimo> that's a repr for things that you're not allowed to instantiate

[02:17] <Xliff> Hrm.

[02:17] <choiboi> timotimo: I'm gonna check those out, thanks! (I'm language hopping, I love language hopping)

[02:18] <Xliff> timotimo: How can I track that down?

[02:18] <timotimo> have fun! feel free to ask lots of questions in irc

[02:18] <timotimo> Xliff: actually, the "initial_invoke" parameter to interp_run isn't important

[02:19] <timotimo> what kind of error are you getting?

[02:19] <Xliff> It's a SEGV

[02:20] <timotimo> is that in the deserialize op?

[02:20] <Xliff> Trying to expand what I've done with GtkSheet

[02:20] <Xliff> MVM_serialization_deserialize

[02:20] <Xliff> Yeah. Next frame up

[02:20] <Xliff> Or down... depending on how you look at it.

[02:20] <timotimo> can you paste some more of that stack trace?

[02:21] <Xliff> https://paste.fedoraproject.org/paste/iynbatl3vI8rx-EX7CVFww

[02:22] <timotimo> is the address of the tc actually sane? looks funny with all the 5s in it

[02:22] <timotimo> have you tried some things like turning off spesh or the jit or inlining? and recompiling moar with --debug=3 --optimize=0 will make debugging easier

[02:24] <Xliff> I usually compile with --debug=3

[02:24] <timotimo> the optimize flag is the important one :)

[02:25] *** choiboi left
[02:25] <Xliff> MVM_SPESH_DISABLE and MVM_JIT_DISABLE?

[02:25] *** choiboi joined
[02:25] <timotimo> disabling spesh will also disable the jit, so try each in turn

[02:27] <Xliff> Same crash. Recompiling rakudo.

[02:29] <Xliff> This will take a sec.

[02:34] <choiboi> timotimo: Can I interpolate 

[02:34] <choiboi> timotimo: Can I interpolate \vars in ""?

[02:34] <timotimo> yep, either {thevar} or $(thevar)

[02:35] <timotimo> there's more ways, but they get longer and longer :P

[02:35] <Xliff> timotimo: OK. Rakudo recompiled.

[02:35] <choiboi> timotimo: ahhh just like Ruby, you can do things more than one way. That's always nice

[02:35] <timotimo> yup! the "TIMTOWTDI" principle has been with perl for the longest time

[02:35] <timotimo> "there is more than one way to do it"

[02:36] <timotimo> works a little better than python's "there should only be one way and it should be the obvious one"

[02:36] <El_Che> Ruby's is probably TIMTOWTDIAEIAO

[02:36] <El_Che> "there is more than one way to do it and everything is an object"

[02:36] <timotimo> well, in rakudo everything's an object, too

[02:38] <choiboi> Woah Perl6 is amazing. Why did I have to learn Python in school? I could have learned things like there is more than one way to do it

[02:39] <El_Che> In Rakudo everything is Mu

[02:39] <choiboi> El_Che: What's Mu?

[02:39] <El_Che> damn, Mu and Cool should have changed places

[02:40] <El_Che> The root of the Perl 6 type hierarchy.

[02:40] <El_Che> The Japanese and Korean term mu (Japanese: 無; Korean: 무) or Chinese wu (traditional Chinese: 無; simplified Chinese: 无), meaning "not have; without", is a key word in Buddhism, especially Zen traditions. 

[02:44] <choiboi> El_Che: oh like wuwei?

[02:44] <choiboi> El_Che: (I know what cool is C Object Oriented Library right?)

[02:44] <timotimo> almost

[02:45] <timotimo> it's the Convenient OO Loopbacks"

[02:45] <choiboi> oof

[02:46] <Xliff> m: my @p = ('GTK::'); say 'GTK::CSSProvider.BUILD' ~~ /^ @p/

[02:46] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «｢GTK::｣␤»

[02:46] <timotimo> everything that derives from Cool implements methods by looping back to a different type that's cool

[02:46] <timotimo> like "that method? i'm cool with that"

[02:46] <Xliff> m: my @p = ('GTK::'); die 'Hunh?' unless 'GTK::CSSProvider.BUILD' ~~ /^ @p/

[02:46] <camelia> rakudo-moar 5b62bb1b5: ( no output )

[02:46] *** molaf left
[02:46] <Xliff> m: my @p = ('GTK::'); die 'Hunh?' without 'GTK::CSSProvider.BUILD' ~~ /^ @p/

[02:46] <camelia> rakudo-moar 5b62bb1b5: ( no output )

[02:48] *** kkielak left
[02:48] <choiboi> timotimo: That's so cool

[02:48] <timotimo> m: say Whatever but Cool

[02:48] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «Cannot mix in non-composable type Cool into object of type Whatever␤  in block <unit> at <tmp> line 1␤␤»

[02:48] <timotimo> that used to work, haha

[02:49] <timotimo> we're now more strict about that

[02:49] <choiboi> timotimo: reimplement it xD

[02:49] <timotimo> nah, it's good for performance

[02:50] <choiboi> timotimo: Who needs performance? What is this, C? jk jk

[02:51] <timotimo> would be nice to outperform python and perl5 for most things

[02:51] <timotimo> currently we outperform them for some things

[02:52] <choiboi> timotimo: Isn't Perl5 ancient? I'm surprised that Perl6 isn't faster, especially since I read that a lot of unnecassary stuff was dropped from backwards compatibility.

[02:53] <timotimo> no perl5 is continuously being developed

[02:53] <Xliff> Ancient == Well Tested

[02:53] <timotimo> that, too

[02:53] <timotimo> perl5 has had a loooot of time for performance optimization and tuning

[02:53] <timotimo> the regex engine in particular is something we lag far behind in terms of performance

[02:53] <timotimo> but the syntax and features usually make up for it

[02:54] <timotimo> and you can always use Inline::Python, Inline::Perl5 or Inline::C or NativeCall in those cases

[02:54] <Xliff> 'GTK::CSSProvider.BUILD'.starts-with('GTK::').say

[02:54] <evalable6> Xliff, rakudo-moar 5b62bb1b5: OUTPUT: «True␤»

[02:54] <Xliff> ^ Is there any way to turn that into a junction?

[02:54] <choiboi> timotimo: Perl6 has inline python and inline c??? oh my gosh this is so cool

[02:54] <timotimo> yup

[02:54] <Xliff> 'GTK::CSSProvider.BUILD'.starts-with('A::' | 'B::' | 'C::' | 'GTK::').say

[02:54] <evalable6> Xliff, rakudo-moar 5b62bb1b5: OUTPUT: «any(False, False, False, True)␤»

[02:54] <timotimo> Xliff: not sure how you'd want a junction there

[02:55] <timotimo> yeah, that works

[02:55] <Xliff> my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); 'GTK::CSSProvider.BUILD'.starts-with(@p.any).say

[02:55] <evalable6> Xliff, rakudo-moar 5b62bb1b5: OUTPUT: «any(any(False, False, False, True))␤»

[02:55] <Xliff> my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); 'GTK::CSSProvider.BUILD'.starts-with(@p.any).so

[02:55] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); 'GTK::CSSProvider.BUILD'.starts-with(@p.any).so

[02:55] <camelia> rakudo-moar 5b62bb1b5: ( no output )

[02:55] <timotimo> you have a junction in @p already there

[02:55] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); 'GTK::CSSProvider.BUILD'.starts-with(@p.any).so.say

[02:55] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «True␤»

[02:55] *** w17t left
[02:55] <Xliff> OK.

[02:56] <timotimo> m: my @p = 'a::' | 'b::' | 'c::' | 'gtk::'; say @p.perl

[02:56] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «[any("a::", "b::", "c::", "gtk::")]␤»

[02:56] <Xliff> Would that be a better way to write it?

[02:57] <Xliff> The thing is... @p can change during runtime.

[02:57] <timotimo> just make @p a regular array of strings and use @p.any

[02:57] <Xliff> Just did. :)

[02:57] <timotimo> good good

[02:59] *** molaf joined
[02:59] <Xliff> How slow are junctions compared to: 'my $t = False; for (@p) { last if ($t = $s.starts-with($_)) }; die "Bad" unless $t'

[03:00] <timotimo> junctions aren't very fast :)

[03:01] <Xliff> OK. So we rewrite again! ;)

[03:03] <Xliff> m: die "WTF" unless True

[03:03] <camelia> rakudo-moar 5b62bb1b5: ( no output )

[03:03] <MasterDuke> benchable6: HEAD compare my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $a; $a = 'GTK::CSSProvider.BUILD'.starts-with(@p.any).so for ^10_000 ||| my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if ($t = $s.starts-with($_)) } };

[03:03] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[03:03] <benchable6> MasterDuke, No new data found

[03:04] <timotimo> huh, what's wrong with the head commit?

[03:05] <MasterDuke> benchable6: HEAD compare my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $a; $a = 'GTK::CSSProvider.BUILD'.starts-with(@p.any).so for ^10_000 ||| my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if $t = "GTK::CSSProvider.BUILD".starts-with($_) } };

[03:05] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[03:05] <benchable6> MasterDuke, No new data found

[03:05] <MasterDuke> timotimo: the "No new data found"?

[03:05] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $a; $a = 'GTK::CSSProvider.BUILD'.starts-with(@p.any).so for ^10_000; say now - INIT now

[03:05] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «0.47781275␤»

[03:05] <timotimo> yeah

[03:06] <timotimo> committable6: HEAD say "hi"

[03:06] <committable6> timotimo, ¦HEAD(5b62bb1): «hi␤»

[03:06] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if ($t = $s.starts-with($_)) } }; say now - INIT now;

[03:06] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$s' is not declared␤at <tmp>:1␤------> 3 for ^10_000 { for (@p) { last if ($t = 7⏏5$s.starts-with($_)) } }; say now - INIT ␤»

[03:06] <MasterDuke> that's just a bug in benchable6's output, there isn't actually a problem

[03:06] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if ($t = 'GTK::CssProvider.BUILD'.starts-with($_)) } }; say now - INIT now;

[03:06] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «0.43574032␤»

[03:06] <Xliff> Oooh! Not bad.

[03:06] <Xliff> .0.04 seconds

[03:08] <MasterDuke> my @p = ('A::', 'B::', 'C::', 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if ($t = 'GTK::CssProvider.BUILD'.starts-with($_)) } }; say now - INIT now;

[03:08] <evalable6> MasterDuke, rakudo-moar 5b62bb1b5: OUTPUT: «0.0280982␤»

[03:09] <kybr> maybe dumb question. why doesn't "a b c".split get me (a b c)? with no args, i would expect behaviour like .split(/\s+/).

[03:09] <MasterDuke> benchable6: compare HEAD my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $a; $a = 'GTK::CSSProvider.BUILD'.starts-with(@p.any).so for ^10_000 ||| my @p = ('A::', 'B::', 'C::', 'GTK::'); my $t = False; for ^10_000 { for @p { last if $t = "GTK::CSSProvider.BUILD".starts-with($_) } };

[03:09] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[03:09] <benchable6> MasterDuke, https://gist.github.com/e50ba1bf0b67e026557f904440a19842

[03:10] <timotimo> kybr: that's .words :)

[03:10] <kybr> yay!

[03:10] <kybr> so, th

[03:10] <kybr> it's there to teach me to find .words, cool

[03:10] <timotimo> haha

[03:10] <Xliff> MasterDuke: Why such wildly different numbers? 

[03:11] <timotimo> server's busy with other stuff making the measurements unreliable perhaps?

[03:11] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if $t = 'GTK::CssProvider.BUILD'.starts-with($_) } }; say now - INIT now;

[03:11] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «0.3752258␤»

[03:11] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if $t = 'GTK::CssProvider.BUILD'.starts-with($_) } }; say now - INIT now;

[03:11] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «0.3713326␤»

[03:11] <Xliff> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { for (@p) { last if $t = 'GTK::CssProvider.BUILD'.starts-with($_) } }; say now - INIT now;

[03:11] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «0.357421␤»

[03:11] <MasterDuke> because junctions are slower. and camelia is running on a different server than benchable6 

[03:13] <timotimo> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { $t = so @p.first("GTK::CSSProvider.BUILD".starts-with: $_) } say now - INIT now;

[03:13] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3K::CSSProvider.BUILD".starts-with: $_) }7⏏5 say now - INIT now;␤»

[03:13] <timotimo> m: my @p = ('A::' | 'B::' | 'C::' | 'GTK::'); my $t = False; for ^10_000 { $t = so @p.first("GTK::CSSProvider.BUILD".starts-with: $_) }; say now - INIT now;

[03:13] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «0.397291␤»

[03:13] <Xliff> m: role A { has @!a = ('A'); }; class AA does A { submethod BUILD { self.a; }; }; AA.new

[03:13] <MasterDuke> timotimo, Xliff: your @p is still a junction

[03:13] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «No such method 'a' for invocant of type 'AA'␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:13] <timotimo> haha whoops

[03:14] <timotimo> c: HEAD my @p = ('A::', 'B::', 'C::', 'GTK::'); my $t = False; for ^10_000 { $t = so @p.first("GTK::CSSProvider.BUILD".starts-with: $_) }; say now - INIT now;

[03:14] <committable6> timotimo, ¦HEAD(5b62bb1): «0.36790072␤»

[03:14] <timotimo> c: HEAD my @p = ('A::', 'B::', 'C::', 'GTK::'); my $t = False; for ^10_000 { $t = so @p.first("GTK::CSSProvider.BUILD".starts-with: $_) }; say now - INIT now;

[03:14] <committable6> timotimo, ¦HEAD(5b62bb1): «0.3716581␤»

[03:14] <timotimo> ho-hum

[03:14] <Xliff> m: role A { has @!a = ('A'); }; class AA does A { submethod BUILD { self.a.say; }; }; AA.new

[03:14] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «No such method 'a' for invocant of type 'AA'␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:14] <Xliff> m: role A { has @!a = ('A'); method a { say @!a }; }; class AA does A { submethod BUILD { self.a.say; }; }; AA.new

[03:14] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «[]␤True␤»

[03:14] <Xliff> ^^ ???

[03:15] <Xliff> Lemme guess. Can't initialize attributes in a role? This was working before I recompiled.

[03:15] <timotimo> having a BUILD will make defaults and such no longer work

[03:15] <timotimo> at least i think that's what it is

[03:15] <Xliff> Well... that's what I'm running into, now. Not the crash, but this new thing.

[03:16] *** mowcat left
[03:16] <timotimo> m: role A { has @!a = ('A'); method a { say @!a }; }; class AA does A { submethod TWEAK { self.a.say; }; }; AA.new

[03:16] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «[A]␤True␤»

[03:17] <Xliff> m: role A { has @!a = ('A'); method a { say @!a }; }; class AA does A { }; AA.new

[03:17] <camelia> rakudo-moar 5b62bb1b5: ( no output )

[03:17] <Xliff> m: role A { has @!a = ('A'); method a { say @!a }; }; class AA does A { }; AA.new.a

[03:17] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «[A]␤»

[03:17] <Xliff> So roles can't provide a reasonable default, anymore?

[03:18] <timotimo> i'm sorry, what?

[03:18] <timotimo> that's just a custom BUILD overriding the default stuff

[03:19] <timotimo> also the reason why TWEAK was invented

[03:19] <Xliff> can roles implement TWEAK?

[03:19] <timotimo> yes, but applying a role to a class will copy everything in, so a class' TWEAK would be overwritten

[03:20] <timotimo> i think someone's working on a patch to make all submethod BUILD or TWEAK be called

[03:29] *** w_richard_w left
[03:38] <kybr> i think i want to 1) extend the Perl6 grammar in a few minor ways, then 2) run the REPL with these change. what should i look at? is there an example of that somewhere?

[03:39] <timotimo> sounds like you want a slang

[03:39] <timotimo> there's a few slangs already up on modules.perl6.org

[03:39] <timotimo> you should be able to either use the slang from the repl, or at least start the repl with -MTheSlang

[03:41] <Xliff> MasterDuke / timotimo: https://github.com/Xliff/p6-GTKSheet

[03:42] <MasterDuke> cool

[03:43] <Xliff> Do roles have an init method?

[03:44] <Xliff> Or is that up to the composing type?

[03:45] <Xliff> m: my @a = <a b c>; .say for 'A', @a;

[03:45] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «A␤[a b c]␤»

[03:46] <Xliff> m: my @a = <a b c>; .say for 'A', |@a;

[03:46] <camelia> rakudo-moar 5b62bb1b5: OUTPUT: «A␤a␤b␤c␤»

[03:48] <timotimo> it's currently up to the composing type

[04:25] *** ferreira joined
[04:26] *** ferreira1 left
[04:30] *** ferreira1 joined
[04:30] *** ferreira left
[04:35] *** ferreira1 left
[05:05] *** w17t joined
[05:07] *** molaf left
[05:07] *** sno left
[05:23] *** zacts joined
[05:41] *** hkdtam joined
[05:51] *** curan joined
[05:54] *** jmerelo joined
[05:56] <Geth> ¦ ecosystem: 876fe01e78 | (Michael T. Wolfinger)++ (committed using GitHub Web editor) | META.list

[05:57] <Geth> ¦ ecosystem: Add Bio::ViennaNGS

[05:57] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/876fe01e78

[05:57] <Geth> ¦ ecosystem: 6e069a88e3 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[05:57] <Geth> ¦ ecosystem: Merge pull request #428 from mtw/patch-1

[05:57] <Geth> ¦ ecosystem: 

[05:57] <Geth> ¦ ecosystem: Add Bio::ViennaNGS

[05:57] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/6e069a88e3

[06:00] <jmerelo> releasable6: status

[06:00] <releasable6> jmerelo, Next release will happen when it's ready. 5 blockers. 175 out of 311 commits logged (⚠ 1 warnings)

[06:00] <releasable6> jmerelo, Details: https://gist.github.com/a7b33367fa5d338ccf6c493c8bf86a33

[06:07] <hkdtam> p6: say  "test"

[06:07] <camelia> rakudo-moar d6563816e: OUTPUT: «test␤»

[06:08] <hkdtam> p6: my @tmp1 = (2,3); my @tmp2 = (5,6); my @LIST; for ^4 -> \j { @tmp2[0] = rand; @LIST[j] = flat @tmp1, @tmp2, j } ; say @LIST; for ^4 -> \j { say @tmp2[0] = rand; }

[06:08] <camelia> rakudo-moar d6563816e: OUTPUT: «[(2 3 0.6656873832204571 6 0) (2 3 0.6656873832204571 6 1) (2 3 0.6656873832204571 6 2) (2 3 0.6656873832204571 6 3)]␤0.9875624674225565␤0.715286121908144␤0.38004383073687487␤0.44438911168658923␤»

[06:08] <hkdtam> sorry for bothering, i wonder why in the first loop the rand @tmp2[0] remain the same ? thx in advance.

[06:11] <jmerelo> hkdtam: I think it's because @tmp2 is a list, and thus immutable

[06:13] <jmerelo> m: my @tmp = [1,2]; @tmp[0]=3; @tmp.say

[06:13] <camelia> rakudo-moar d6563816e: OUTPUT: «[3 2]␤»

[06:13] <jmerelo> m: my @tmp = (1,2); @tmp[0]=3; @tmp.say

[06:13] <camelia> rakudo-moar d6563816e: OUTPUT: «[3 2]␤»

[06:14] <jmerelo> No, it's not that...

[06:15] *** sauvin joined
[06:15] <jmerelo> hkdtam: in the code above, you are only writing the result of the last iteration when you print @LIST; tha is, it's the same as if you write flat @tmp1, @tmp2, 4.

[06:17] <jmerelo> hkdtam: the second loop just prints the result of the random number generation

[06:17] <jmerelo> Ah, OK, scratch that. 

[06:18] <jmerelo> @LIST[j] contains a list, and in that list you're only assigning a value to the third element, which is the one that changes, besides the last one.

[06:19] <jmerelo> hkdtam: now I see what you mean. The result of the rand is alway sthe same. Right.

[06:19] <jmerelo> m: my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; } say @tmp2

[06:19] <camelia> rakudo-moar d6563816e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3(1,2); for ^4 -> \j { @tmp2[0] = rand; }7⏏5 say @tmp2␤»

[06:20] <jmerelo> m: my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; }; say @tmp2

[06:20] <camelia> rakudo-moar d6563816e: OUTPUT: «[0.33248703132673585 2]␤»

[06:20] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; @results.push: @tmp2 }; say @results

[06:20] <camelia> rakudo-moar d6563816e: OUTPUT: «[[0.7745583856154056 2] [0.7745583856154056 2] [0.7745583856154056 2] [0.7745583856154056 2]]␤»

[06:22] <jmerelo> hkdtam: the result is not itemized until it's printed with "say". When you do that assignment, you are actually assigning the container to a function; that function will only be called when say is invoked

[06:22] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] := rand; @results.push: @tmp2 }; say @results

[06:22] <camelia> rakudo-moar d6563816e: OUTPUT: «[[0.6521014370969498 2] [0.6521014370969498 2] [0.6521014370969498 2] [0.6521014370969498 2]]␤»

[06:24] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = +rand; @results.push: @tmp2 }; say @results

[06:24] <camelia> rakudo-moar d6563816e: OUTPUT: «[[0.2056152893160691 2] [0.2056152893160691 2] [0.2056152893160691 2] [0.2056152893160691 2]]␤»

[06:25] <jmerelo> hkdtam: see https://docs.perl6.org/language/traps#Containers_versus_values_in_a_capture

[06:25] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand.item; @results.push: @tmp2 }; say @results

[06:25] <camelia> rakudo-moar d6563816e: OUTPUT: «[[0.6968494569424182 2] [0.6968494569424182 2] [0.6968494569424182 2] [0.6968494569424182 2]]␤»

[06:25] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; @results.push: @tmp2.item }; say @results

[06:25] <camelia> rakudo-moar d6563816e: OUTPUT: «[[0.5414524115922716 2] [0.5414524115922716 2] [0.5414524115922716 2] [0.5414524115922716 2]]␤»

[06:25] <jmerelo> Really

[06:26] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; @results.push: @tmp2.map( .item ) }; say @results

[06:26] <camelia> rakudo-moar d6563816e: OUTPUT: «Cannot resolve caller map(Array:D: Any:U); none of these signatures match:␤    ($: Hash \h, *%_)␤    (\SELF: &block;; :$label, :$item, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[06:26] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; @results.push: @tmp2.map: .item }; say @results

[06:26] <camelia> rakudo-moar d6563816e: OUTPUT: «Cannot resolve caller map(Array:D: Any:U); none of these signatures match:␤    ($: Hash \h, *%_)␤    (\SELF: &block;; :$label, :$item, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[06:26] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; @results.push: @tmp2.map: *.item }; say @results

[06:26] <camelia> rakudo-moar d6563816e: OUTPUT: «[(0.8396110202543787 2) (0.8396110202543787 2) (0.8396110202543787 2) (0.8396110202543787 2)]␤»

[06:27] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; @results.push: (@tmp2[0].item, @tmp2[1]) }; say @results

[06:27] <camelia> rakudo-moar d6563816e: OUTPUT: «[(0.7153743994110374 2) (0.7153743994110374 2) (0.7153743994110374 2) (0.7153743994110374 2)]␤»

[06:28] <jmerelo> m: my @results; my @tmp2=(1,2); for ^4 -> \j { @tmp2[0] = rand; say @tmp2; @results.push: @tmp2 }; say @results

[06:28] <camelia> rakudo-moar d6563816e: OUTPUT: «[0.3566023730683954 2]␤[0.1302139115723132 2]␤[0.6624795923696042 2]␤[0.6985133821404953 2]␤[[0.6985133821404953 2] [0.6985133821404953 2] [0.6985133821404953 2] [0.6985133821404953 2]]␤»

[06:30] <hkdtam> jmerelo: thank you very much for the help, i reduced/reproduced this from a case where all values from @LIST[i] = @tmp where @tmp were different but every items on @LIST   had the same value 

[06:31] <jmerelo> hkdtam: I wish I could have nailed it from the beginning, but I'm still kind of sleepy. Sorry.

[06:31] <hkdtam> jmerelo: thank you very much indeed, good night

[06:45] *** zacts left
[06:49] <Xliff> m: my $mls = "One\nTwo\nThree"; .say for $mls.lines.map( *.lc )

[06:49] <camelia> rakudo-moar d6563816e: OUTPUT: «one␤two␤three␤»

[06:50] <Xliff> m: my $mls = "One\nTwo\nThree"; .say for $mls.lines.map({ $_ .= chomp; .lc })

[06:50] <camelia> rakudo-moar d6563816e: OUTPUT: «Cannot modify an immutable Str (One)␤  in block <unit> at <tmp> line 1␤␤»

[06:50] <Xliff> m: my $mls = "One\nTwo\nThree"; .say for $mls.lines.map({ .chomp; .lc })

[06:50] <camelia> rakudo-moar d6563816e: OUTPUT: «one␤two␤three␤»

[06:51] <Geth> ¦ doc/master: 4 commits pushed by (JJ Merelo)++

[06:51] <Geth> ¦ doc/master: 72773cbe30 | Fixes pairs refs #1731

[06:51] <Geth> ¦ doc/master: fdcab8f420 | Fixes antipairs refs #1731

[06:51] <Geth> ¦ doc/master: 2d918cfe76 | Fixes keys refs #1731

[06:51] <Geth> ¦ doc/master: 2e328ee0cd | Fixes a bit tree, #1731. Could be improved

[06:51] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/201056003cf1...2e328ee0cd84

[06:59] *** jeromelanteri joined
[07:04] *** dominix_ joined
[07:05] *** w17t left
[07:07] *** dominix left
[07:32] <Xliff> \o/

[07:34] <Xliff> https://gist.github.com/Xliff/395ac11d29c3e9640ac5c8ed552bde6d

[07:34] <Xliff> See second screenie!

[07:34] <Xliff> And with that... I nap! 

[07:34] <jmerelo> Gnight Xliff

[07:35] <jmerelo> Xliff: that's pretty cool!

[07:36] *** jmerelo left
[07:36] <Xliff> :)

[07:36] <Xliff> jmerelo

[07:37] <Xliff> https://github.com/Xliff/p6-GTKSheet/blob/master/t/02-testgtksheet.t

[07:38] *** jeromelanteri left
[07:52] *** yoleaux joined
[07:52] *** ChanServ sets mode: +v yoleaux

[08:14] *** hkdtam left
[08:15] *** hc1^ joined
[09:07] *** dakkar joined
[09:08] *** rindolf joined
[09:38] *** w17t joined
[09:46] *** eseyman left
[09:48] *** ravenousmoose_ left
[09:49] *** ravenousmoose_ joined
[09:55] *** gregf_ joined
[09:58] *** eseyman joined
[10:18] *** dominix_ left
[10:26] *** dominix_ joined
[10:38] *** gregf_ left
[10:40] *** gregf_ joined
[10:48] *** eseyman left
[10:52] *** ravenousmoose_ left
[10:52] *** ravenousmoose_ joined
[10:59] *** ravenousmoose_ left
[10:59] *** ravenousmoose_ joined
[11:04] *** ravenousmoose_ left
[11:06] *** gregf_ left
[11:08] *** gregf_ joined
[11:19] *** mowcat joined
[11:49] *** choiboi-mobile joined
[11:58] * lizmat snores

[11:59] *** choiboi-mobile left
[12:05] *** choi-mobile joined
[12:05] <choi-mobile> hey guys!

[12:07] <lizmat> choi-mobile o/

[12:08] <choi-mobile> liznat: \o

[12:08] <lizmat> choi-nobile /o

[12:10] <choi-mobile> lizmat: 0\

[12:10] <lizmat> :-)

[12:12] <choi-mobile> 😊

[12:12] <choi-mobile> is there an emoji library for Perl6?

[12:13] <lizmat> choi-mobile: what would you expect that to do ?

[12:15] *** choi-mobile2 joined
[12:16] <choi-mobile2> lizmat: to be able to replace text like :smile: :stuck_out_tongue: with the corresponding emoji

[12:17] *** choi-mobile left
[12:21] *** choi-mobile2 left
[12:21] <lizmat> m: say "\c[FACE WITH STUCK-OUT TONGUE]"

[12:21] <camelia> rakudo-moar d6563816e: OUTPUT: «😛␤»

[12:21] *** choi-mobile joined
[12:22] <lizmat> m: say "\c[FACE WITH STUCK-OUT TONGUE]"

[12:22] <camelia> rakudo-moar d6563816e: OUTPUT: «😛␤»

[12:22] <lizmat> choi-mobile: ^^  I don't think you need a library per se ?

[12:22] <choi-mobile> lizmat: nope :(

[12:24] <lizmat> m: say "FACE WITH STUCK-OUT TONGUE, BUTTERFLY".uniparse   # this perhaps ?

[12:24] <camelia> rakudo-moar d6563816e: OUTPUT: «😛🦋␤»

[12:24] <lizmat> choi-mobile: I'm not sure what you want to achieve

[12:25] <choi-mobile> I just thought implementing emoji would be something cool I could do to add to the Perl6 project but I guess its already been done.

[12:26] <lizmat> well, maybe the interface could be improved ?

[12:26] <lizmat> the current interface is rather rigid, and does not allow for any errors

[12:26] <choi-mobile> oh yeah, like a more lazy evaluation of emoji code?

[12:26] <lizmat> m: say "FACE WITH STUCKOUT TONGUE, BUTTERFLY".uniparse   # not very helpful

[12:26] <camelia> rakudo-moar d6563816e: OUTPUT: «Unrecognized character name [FACE WITH STUCKOUT TONGUE]␤  in block <unit> at <tmp> line 1␤␤»

[12:26] <timotimo> i wonder where most people look to for what to call these short emojis

[12:26] <yoleaux> 19 Feb 2019 05:36Z <jmerelo> timotimo: *.perl6.org seems to be down

[12:27] <timotimo> like, the unicode consortium doesn't define that :stuck_out_tongue: should be FACE WITH STUCK-OUT TONGUE

[12:28] <choi-mobile> yeah I will definitely work on this (I want it to be similar to emoji.cr)

[12:29] * lizmat looks

[12:30] <lizmat> choi-mobile: you mean like https://github.com/veelenga/emoji.cr ?

[12:30] <choi-mobile> lizmat: yes

[12:30] <lizmat> ++choi-mobile

[12:32] *** ravenousmoose_ joined
[12:32] <choi-mobile> what does the ++ do?

[12:35] <moritz> karma/recognition/praise

[12:35] <yoleaux> 19 Feb 2019 05:35Z <jmerelo> moritz: perl6.org seems to be down

[12:36] <moritz> and typically applied as a prefix for things planned, and as a postfix for things done

[12:36] <choi-mobile> mortiz: oh thanks

[12:36] <choi-mobile> lizmat: thanks

[12:37] <guifa> Also, lizmat, the current implementation won’t handle for non-English languages, although there is data for it 

[12:37] <lizmat> guifa: link ?

[12:39] <lizmat> afk&

[12:40] <guifa> lizmat: for example https://www.unicode.org/cldr/charts/34/annotations/germanic.html

[12:41] <guifa> The XML data is contained in the common/annotation/$langcode.xml file in this file http://unicode.org/Public/cldr/34/cldr-common-34.0.zip

[12:44] <guifa> oh and also in common/annotationsDerived/$langcode.xml 

[12:45] *** choi-mobile left
[12:46] *** choi-mobile joined
[12:47] * guifa just thought for libraries that access this data, this would make a fairly nice use casefor a BEGIN phaser (maybe with an INIT that runs the same once every so often).  You’d always have the most up to date data even if the library author doesn’t update

[13:03] <choi-mobile> p6: say "FACE WITH SMILE".uniparse

[13:03] <camelia> rakudo-moar d6563816e: OUTPUT: «Unrecognized character name [FACE WITH SMILE]␤  in block <unit> at <tmp> line 1␤␤»

[13:03] <choi-mobile> p6: say "SMILE".uniparse

[13:03] <camelia> rakudo-moar d6563816e: OUTPUT: «⌣␤»

[13:03] *** choi-mobile left
[13:12] *** AlexDaniel joined
[13:24] *** sena_kun joined
[13:29] *** mahafyi joined
[13:39] <Geth> ¦ doc: 3099e5c02b | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/packages.pod6

[13:39] <Geth> ¦ doc: expand with more paractical examples

[13:39] <synopsebot> Link: https://doc.perl6.org/language/packages

[13:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3099e5c02b

[13:39] *** w17t left
[13:43] <tbrowder> can a doc link be put in a =head2 element?

[13:45] <sena_kun> I don't think so.

[13:46] <sena_kun> at least, they are already automatically navigating to specific places.

[13:59] *** choi-mobile joined
[13:59] <choi-mobile> is the evalbot open source and if so where is its code?

[14:00] <jnthn> choi-mobile: https://github.com/perl6/evalbot I believe

[14:01] *** rindolf left
[14:02] <choi-mobile> jnthn: thanks

[14:04] <AlexDaniel> choi-mobile: yeah, that's the right link, but what are you looking for specifically? There's also whateverable that offers similar functionality: https://github.com/perl6/whateverable

[14:11] <timotimo> camelia: source

[14:11] *** choi-mobile left
[14:11] <timotimo> camelia: help

[14:11] <camelia> timotimo: Usage: <(star-m|nqp-jvm|nqp-moarvm|debug-cat|p5-to-p6|nqp-js|rakudo-moar|rakudo-jvm|prof-m|perl6|rm|master|r-jvm|nqp|sm|p56|nqp-q|r|nqp-m|star|rakudo|r-m|rj|nqp-mvm|j|p6|m|r-j)(?^::\s(?!OUTPUT)) $perl6_program>

[14:13] *** lucasb joined
[14:23] <choiboi> AlexDaniel: I just wanted to see how it works. I was thinking of writing a IRC bot that can get emoji for users.

[14:24] <AlexDaniel> unicodable6: emoji

[14:24] <unicodable6> AlexDaniel, U+1F3FB EMOJI MODIFIER FITZPATRICK TYPE-1-2 [Sk] (🏻)

[14:24] <unicodable6> AlexDaniel, U+1F3FC EMOJI MODIFIER FITZPATRICK TYPE-3 [Sk] (🏼)

[14:24] <unicodable6> AlexDaniel, 5 characters in total (🏻🏼🏽🏾🏿): https://gist.github.com/f8aa48d67f765b89d01830a650dc319b

[14:24] <AlexDaniel> unicodable6: tears of joy

[14:24] <unicodable6> AlexDaniel, U+1F602 FACE WITH TEARS OF JOY [So] (😂)

[14:24] <unicodable6> AlexDaniel, U+1F639 CAT FACE WITH TEARS OF JOY [So] (😹)

[14:24] <AlexDaniel> choiboi: like this?

[14:24] <AlexDaniel> unicodable6: pile of

[14:24] <unicodable6> AlexDaniel, U+1F4A9 PILE OF POO [So] (💩)

[14:24] <AlexDaniel> hmm where's the sad one

[14:25] <AlexDaniel> “the frowning pile of poo emoji was removed from the list of emoji candidates” oh noes :(

[14:25] <choiboi> choiboi: Something that /msg [usr] the actual emoji

[14:26] <AlexDaniel> choiboi: evalbot is written in perl5, whateverable is in perl 6

[14:26] <choiboi> AlexDaniel: I'll checkout whateverable

[14:27] <AlexDaniel> choiboi: perhaps you should consider using IRC::Client directly, whateverable is a bit too heavy for your purposes. See https://github.com/perl6-community-modules/perl6-IRC-Client#synopsis

[14:27] <choiboi> AlexDaniel: Perfect!

[14:30] *** random_yanek left
[14:33] *** random_yanek joined
[14:33] *** random_yanek left
[14:33] <choiboi> Is Perl6 more lazy in its type evaluation than Python?

[14:34] *** random_yanek joined
[14:35] <timotimo> when is Cro::IRC? :)

[14:37] <choiboi> timotimo: What is Cro::IRC?

[14:40] *** zacts joined
[14:41] *** skids joined
[14:48] <AlexDaniel> timotimo: btw I found Cro::ZeroMQ recently and I'm depending on that heavily…

[14:48] <AlexDaniel> tests are not passing for some reason, but the module works just fine

[14:49] *** ravenousmoose joined
[14:50] <AlexDaniel> maybe Cro::mDNS? ;) ;)

[14:50] <AlexDaniel> then I wouldn't need to run avahi command line tools…

[14:51] *** zacts left
[14:51] *** ravenousmoose_ left
[14:55] *** curan left
[15:00] *** zacts joined
[15:02] <timotimo> ha

[15:02] <timotimo> choiboi: Cro is a framework for developing microservices. it is very cool

[15:02] <timotimo> choiboi: check out https://my.cro.services/

[15:02] <timotimo> oh the https certificate isn't for my.

[15:02] *** zacts left
[15:03] <choiboi> timotimo: That's cool. I added an exemption

[15:03] <lizmat> http://my.cro.services

[15:03] <timotimo> or just https://cro.services/

[15:03] <lizmat> it will redirect to https://cro.services

[15:03] <choiboi> I have implemented 7 emoji so far and 9 codes (It's less strict so it will take both :stuckouttongue: and :stuck-out-tongue:)

[15:04] <choiboi> And it doesn't care about capitalization

[15:04] *** w17t joined
[15:10] *** molaf joined
[15:33] <choiboi> I'm up to 51 codes!

[15:33] *** molaf left
[15:49] *** melezhik joined
[15:50] *** zacts joined
[15:50] <melezhik> Hi! Sorry for such a stupid question, but how do I sort hash keys in numeric manner?

[15:50] <melezhik> %a = %("1" => "one", "2" => "two")

[15:51] <melezhik> m: my %a = %("1" => "one", "2" => "two"); for %a.keys.sort -> $k { say $k }

[15:51] <camelia> rakudo-moar d6563816e: OUTPUT: «1␤2␤»

[15:51] <melezhik> m: my %a = %("1" => "one", "2" => "two"); for %a.keys.sort -> $k { say $k }

[15:51] <camelia> rakudo-moar d6563816e: OUTPUT: «1␤2␤»

[15:51] <MasterDuke> my %a = %("1" => "one", "2" => "two"); say %a.keys.sort(+*)

[15:51] <evalable6> MasterDuke, rakudo-moar d6563816e: OUTPUT: «(1 2)␤»

[15:51] <melezhik> m: my %a = %("1" => "one", "4" => "two"); for %a.keys.sort -> $k { say $k }

[15:51] <camelia> rakudo-moar d6563816e: OUTPUT: «1␤4␤»

[15:51] <MasterDuke> my %a = %("1" => "one", "2" => "two"); say %a.keys.sort(-*)

[15:51] <evalable6> MasterDuke, rakudo-moar d6563816e: OUTPUT: «(2 1)␤»

[15:53] <melezhik> let me try your option, MasterDuke:

[15:53] <melezhik> it works, thanks.

[15:53] <MasterDuke> np

[15:54] *** rindolf joined
[16:04] <Geth> ¦ doc: 84b95e529a | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/packages.pod6

[16:04] <Geth> ¦ doc: add a link

[16:04] <synopsebot> Link: https://doc.perl6.org/language/packages

[16:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/84b95e529a

[16:04] *** ferreira1 joined
[16:07] <kybr> what do destructors look like?

[16:08] *** zacts left
[16:08] <sena_kun> `DESTROY` method

[16:08] *** jmerelo joined
[16:08] <sena_kun> but you cannot guarantee when it will be called, as garbage collecting, iirc.

[16:09] <sena_kun> hmm...

[16:10] <sena_kun> kybr, e.g., see https://docs.perl6.org/language/nativecall#Basic_use_of_pointers <- this example, the last method is it.

[16:11] <Geth> ¦ doc: 749f06d79c | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/packages.pod6

[16:11] <synopsebot> Link: https://doc.perl6.org/language/packages

[16:11] <Geth> ¦ doc: narrow the link

[16:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/749f06d79c

[16:12] *** melezhik left
[16:12] <sena_kun> kybr, https://github.com/perl6/doc/issues/1606 <- an here is a ticket with some explanations about it, while it sadly isn't documented in the official documentation yet.

[16:16] *** ravenousmoose left
[16:16] <jmerelo> sena_kun: right. Those tickets need some time to study and reflect on the documentation.

[16:16] <jmerelo> sena_kun: and there are quite a few of them, so...

[16:16] <sena_kun> sigh

[16:17] <jmerelo> sena_kun: can try and prioritize it, if you need it.

[16:17] <sena_kun> jmerelo, no, I'm not. I was just pointing out the ticket for kybr who asked for destructors. :)

[16:18] <sena_kun> at least, I have my hands full with practical part of programming now. :S

[16:23] *** ferreira1 left
[16:24] *** jmerelo left
[16:30] <Geth> ¦ doc: 5699e365f2 | cfa++ | 2 files

[16:30] <Geth> ¦ doc: Spelling.

[16:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5699e365f2

[16:35] *** zacts joined
[16:48] *** lucasb left
[16:50] *** w17t left
[16:52] *** w17t joined
[17:13] *** ferreira1 joined
[17:26] *** kurahaupo joined
[17:32] *** zacts left
[17:43] *** dakkar left
[17:50] *** kurahaupo left
[17:51] *** kurahaupo joined
[17:57] *** patrickb joined
[18:11] *** mahafyi left
[18:12] *** mahafyi joined
[18:19] *** choi-mobile joined
[18:19] <choi-mobile> Larry Wal seems really cool

[18:21] *** sno joined
[18:24] *** Matthew[m] is now known as matthew[m]

[18:29] <timotimo> yeah, he's a really pleasant fellow

[18:36] <guifa> Any preferences on adverbs when there’s a three way option?

[18:37] <guifa> Language tag matching has 3 styles.  I thought about :filter-type(‘basic/extended/lookup”) but was also thinking that just :basic, :extended, :lookup would be nice, but if someone adds two or all of them, I’d need to choose defaults.  

[18:37] <guifa> It’s all the same to me, I just wanna do what most folks would find most useful :-)

[18:38] *** choi-mobile left
[18:38] <timotimo> if there's multiple different named args, you'll have to think about how it should behave when someone passes multiple

[18:38] *** kkielak joined
[18:40] <sena_kun> guifa, I'd go with an enum.

[18:41] <sena_kun> enum Style <A B C>; sub a(Style :$style) {...}

[18:41] <Geth> ¦ doc: a241b5aa65 | cfa++ | doc/Language/glossary.pod6

[18:41] <Geth> ¦ doc: Update S26 link text to match internal target.

[18:41] <synopsebot> Link: https://doc.perl6.org/language/glossary

[18:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a241b5aa65

[18:42] <guifa> Sena: I haven’t played with enums yet.  Sounds like a good thing except… nevermind. I’m reading the RFC in more detail and it’s better to split one of the options as a separate function

[18:42] <sena_kun> _nods_

[18:42] <sena_kun> whatever floats your boat. :)

[18:42] <guifa> haha

[18:43] <timotimo> whatever doubles your boat

[18:43] <guifa> Two are filtering algorithms, basically “out of all these language tags, which match with any of all of these language tags”

[18:43] * sena_kun .oO ( whenever reacts to a boat )

[18:43] *** phogg left
[18:43] <guifa> Which’ll be super awesome for .grep’ing 

[18:44] <timotimo> gre ping

[18:44] <guifa> The other is a single best choice (for like interface language selection)

[18:45] <Xliff> \o

[18:46] <sena_kun> o/

[18:49] *** zachk joined
[18:50] *** kkielak left
[18:50] <dominix_> m: die "WTF" unless True

[18:50] <camelia> rakudo-moar d6563816e: ( no output )

[18:50] *** zachk left
[18:51] *** zachk joined
[18:52] *** zachk left
[18:52] *** zachk joined
[18:53] *** jmerelo joined
[18:57] *** kkielak joined
[18:58] *** phogg joined
[18:58] *** phogg left
[18:58] *** phogg joined
[19:00] *** abraxxa1 joined
[19:00] *** Kaiepi joined
[19:02] <Xliff> sena_kun: Seen this, yet? https://gist.github.com/Xliff/395ac11d29c3e9640ac5c8ed552bde6d

[19:05] *** cfa joined
[19:05] <sena_kun> Xliff, seems like your NativeCall Power has reached the infinity and beyond. :)

[19:05] <cfa> o/

[19:06] <cfa> hmm, is there an api to get the pod parse tree from a string?  i only know of modules that spurt before using compiler to generate pod

[19:07] <cfa> (or is this internal atm?)

[19:07] <cfa> like, i want to be able to feed input to Pod::To::Text's pod2text 

[19:08] <jmerelo> cfa: use Pod::Load

[19:08] <cfa> jmerelo: yes, i just saw that

[19:08] <cfa> but you're spurting right?

[19:08] <jmerelo> cfa: you can also have it in a variable

[19:09] <cfa> sure, but https://modules.perl6.org/dist/Pod::Load:cpan:JMERELO/lib/Pod/Load.pm6#L63

[19:09] <Xliff> sena_kun: LOL. No where near. But I'm having fun and that's the whole point, right?

[19:09] <cfa> this is pod via the filesystem

[19:09] <sena_kun> Xliff, I bet. :)

[19:09] <jmerelo> cfa: you are going to have that no matter what, because it precompiles as any other module

[19:09] <jmerelo> cfa: the alternative is using EVAL, which is not nice.

[19:11] <jmerelo> You can check out pod2onebigpage, which does that

[19:13] <cfa> jmerelo: no, that's helpful thanks

[19:13] <jmerelo> cfa: several other options are also here: https://stackoverflow.com/questions/50990701/access-pod-from-another-perl-6-file

[19:13] <cfa> this is really for demonstrating something right here

[19:13] <cfa> m: use Pod::To::Text; my $pod = EVAL "\$=pod;\n=begin pod\nThis is a testN<footnote>.\n=end pod"; say $pod; say pod2text($pod)

[19:13] <camelia> rakudo-moar d6563816e: OUTPUT: «[Pod::Block::Named{:name("pod")}␤  Pod::Block::Para␤    This is a test␤    Pod::FormattingCode{:type("N")}␤      footnote␤    .␤]␤This is a testfootnote.␤»

[19:13] <cfa> there we go

[19:14] <cfa> notice that Pod::To::Text strips the footnote N<> but fails to insert a space

[19:14] <cfa> so we end up with 'testfootnote'

[19:14] <tadzik> this suit is blacknot

[19:15] <cfa> (found during one of my pedantic spelling sweeps)

[19:15] <jmerelo> cfa: I love them. Kudos.

[19:17] <cfa> i just feel dorky submitting 'Spelling.' commits all the time 

[19:18] <cfa> anyway!

[19:18] <cfa> aspell caught 'asThese' which was 'asN<These...>'

[19:18] <cfa> which led me to the above issue

[19:19] <jmerelo> That's a pod2text issue, and that's a core library, if I'm not wrong?

[19:19] <cfa> right

[19:20] <cfa> https://github.com/rakudo/rakudo/blob/master/lib/Pod/To/Text.pm6

[19:20] <cfa> fix to formatting2text, i guess

[19:20] <cfa> because that's just joining contents and not processing N, so we end up with this run together string

[19:25] *** sauvin left
[19:27] *** kkielak left
[19:39] <El_Che> jmerelo: you have mail

[19:40] <jmerelo> El_Che: origin? Maybe it's gone to spam

[19:41] <El_Che> my apt-get.be domain

[19:41] <El_Che> to gmail

[19:41] <jmerelo> OK, got it now.

[19:41] <jmerelo> Will take a look :-)

[19:42] <El_Che> \o/

[19:42] *** Kaiepi left
[19:43] *** Kaiepi joined
[19:47] <cfa> jmerelo: https://github.com/rakudo/rakudo/issues/2711

[19:47] <Geth> ¦ ecosystem: XiKuuKy++ created pull request #429: Add Avolution::Emoji

[19:47] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/429

[19:49] <choiboi> lol that's me

[19:57] *** seance left
[20:00] <jmerelo> Waiting for tests...

[20:03] *** ferreira1 left
[20:03] *** pecastro joined
[20:03] <jmerelo> cfa: great!

[20:06] <jmerelo> choiboi: you need to use this URL: https://raw.githubusercontent.com/XiKuuKy/Avolution-Emoji/master/META6.json

[20:07] <jmerelo> choiboi: I changed that. Let's wait for the test again...

[20:08] <choiboi> jmerelo: Thank you!

[20:12] *** agentzh left
[20:14] *** agentzh joined
[20:14] *** agentzh left
[20:14] *** agentzh joined
[20:17] *** molaf joined
[20:27] <jmerelo> choiboi: now it's erroring I have no idea why

[20:27] <jmerelo> I'll accept it, what the heck

[20:27] <guifa> Actually, that reminds me I need to do a PR for BCP47

[20:28] *** titsuki left
[20:29] <Geth> ¦ ecosystem: 0b265c2933 | (Simon Harms)++ (committed using GitHub Web editor) | META.list

[20:29] <Geth> ¦ ecosystem: Add Avolution::Emoji

[20:29] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0b265c2933

[20:29] <Geth> ¦ ecosystem: 80ec2c7f46 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[20:29] <Geth> ¦ ecosystem: Changes to raw URL.

[20:29] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/80ec2c7f46

[20:29] <Geth> ¦ ecosystem: 8668902770 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[20:29] <Geth> ¦ ecosystem: Merge pull request #429 from XiKuuKy/patch-1

[20:29] <Geth> ¦ ecosystem: 

[20:29] <Geth> ¦ ecosystem: Add Avolution::Emoji

[20:29] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/8668902770

[20:31] <jmerelo> choiboi: there are no tests in that module, it would be nice if you added a few. That might have been why it failed, because it looks OK.

[20:32] <jmerelo> choiboi: also, it's better if you use the web URL and not the clone url; like https://github.com/XiKuuKy/Avolution-Emoji

[20:32] <jmerelo> choiboi: it might fail installation in that case.

[20:32] <jmerelo> choiboi: thanks a lot anyway, it looks like a nice addition to the ecosystem.

[20:33] <Geth> ¦ ecosystem: alabamenhu++ created pull request #430: Update META.list with the BCP57 module

[20:33] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/430

[20:34] <jmerelo> guifa++

[20:36] <sena_kun> guifa++

[20:36] <jmerelo> This CI takes entirely too much. I will have to change it also to a docker container...

[20:37] <jmerelo> Doesn't make sense that it compiles rakudo every single time...

[20:37] * guifa wonders if basic or extended filtering should be the default. Like, basic sounds like it should be default but … extended is what most people would probably expect

[20:38] * sena_kun doesn't know a bit about the actual context, but I'd go with... Hmm, well, that's difficult to decide here.

[20:38] <sena_kun> for example, what other implementations do in this case?

[20:40] *** ChoHag left
[20:41] *** ChoHag joined
[20:43] <guifa> I’m not sure I’ve seen an actual implementation.  I’m just reading over the RFC’s.  It seems the basic filter (where a language code like de-Latn-DE would not be matched to a query of de-DE because it first lowercases, then goes hyphen-delimited element at a time) was designed to be fast but not particularly comprehensive

[20:44] <guifa> More I think about it, the “extended” should probably be default, as it’s a bit more DWIM 

[20:44] <jmerelo> guifa: it wouldn't be that difficult to go for both. You only have to count the number of dashes.

[20:45] <jmerelo> guifa: (without having any idea about the actual implementation, of course. maybe it's not so easy)

[20:46] *** snarkyboojum joined
[20:47] * jmerelo thinks the docker container needs to be ready tomorrow.

[20:47] <jmerelo> guifa: there's an error in the JSON

[20:48] <jmerelo> guifa: you need to delete the comma after the last "provides".

[20:49] <guifa> Yeah I just fixed it.  Lemme see if I can figure out how to commit just a single file

[20:49] <jmerelo> I'll run again the test

[20:49] <sena_kun> git commit META6.json -m 'Fix json'

[20:49] <guifa> is done

[20:50] <jmerelo> OK, I've restarted the build but I'm AFK right now. Somebody else might have seen it and will accept the PR, or I'll do it tomorrow mornign.

[20:50] <jmerelo> (and I'll have a faster way of checking stuff tomorrow)

[20:50] *** jmerelo left
[20:55] *** kkielak joined
[21:01] <sena_kun> > Failed test 'Checking correctness of https://raw.githubusercontent.com/alabamenhu/BCP47/master/META6.json'

[21:01] <sena_kun> oops

[21:01] <sena_kun> I wonder what's wrong.

[21:01] <sena_kun> ah, I see

[21:01] <sena_kun> >    "Intl:BCP47::Classes" : "lib/Intl/BCP47/Classes.pm6",

[21:01] <sena_kun> no `,` there

[21:01] <sena_kun> as it is the last element of json object. :(

[21:02] <sena_kun> guifa, ^?

[21:02] *** niceperl joined
[21:03] <sena_kun> https://jsonlint.com/ (no, it's not an ad, just first result from google for "json checker") shows that it'll be ok after this comma removal.

[21:03] *** twistedbot joined
[21:04] <guifa> Failed again?  I thought I updated it to not have it. 

[21:04] * guifa is a github n00b

[21:04] <sena_kun> hmm...

[21:04] <sena_kun> oops, sorry

[21:04] <sena_kun> that's just me looking at an old log

[21:04] <sena_kun> o\

[21:05] * sena_kun is apparently dumb after $work

[21:05] <guifa> lol I’m the one that upped an invalid JSON

[21:05] <sena_kun> guifa, did you `git push origin master` your latest commit with the fix?

[21:05] *** robertle joined
[21:05] *** twistedbot left
[21:06] *** perl007 joined
[21:06] <guifa> Oh

[21:07] <guifa> There was still another button to click on in the GUI after “Commit to master”

[21:09] <sena_kun> that'll do it, I hope. :)

[21:11] <sena_kun> don't worry, from my point of view, being able to "just read over the RFC" and implement things is pretty awesome.

[21:11] <guifa> I mean, I did learn to paint by numbers in school :P

[21:12] *** ferreira joined
[21:12] * sena_kun restarted the build and went to wash hair

[21:24] <choiboi> I know jmerelo isn't on but thank you!

[21:27] *** sortiz joined
[21:27] <guifa> You can use .tell [user] [message] on here and it’ll get delivered

[21:27] <guifa> .tell choiboi like this

[21:27] <yoleaux> guifa: I'll pass your message to choiboi.

[21:28] *** snarkyboojum left
[21:31] <choiboi> tell jmerelo Thank you!

[21:31] <yoleaux> 21:27Z <guifa> choiboi: like this

[21:32] <choiboi> .tell jmerelo Thank you!

[21:32] <yoleaux> choiboi: I'll pass your message to jmerelo.

[21:38] *** Cabanossi left
[21:38] *** Cabanossi joined
[21:38] *** nebuchadnezzar left
[21:49] <sena_kun> guifa, ping

[21:49] <guifa> Yeah I saw the e-mail haha

[21:49] * guifa puts on his dunce hat

[21:50] <sena_kun> you likely want to just accept the pull request using github web-interface after reviewing the proposed changes.

[21:52] <Geth> ¦ ecosystem: 44b8944640 | L'Alabameñu++ (committed using GitHub Web editor) | META.list

[21:52] <Geth> ¦ ecosystem: Update META.list with the BCP57 module

[21:52] <Geth> ¦ ecosystem: 

[21:52] <Geth> ¦ ecosystem: - [X] I **agree** to the usage of the META file as listed [here](https://github.com/perl6/ecosystem#legal).

[21:52] <Geth> ¦ ecosystem: 

[21:52] <Geth> ¦ ecosystem: - [X] I have a license field listed in my META file that is one of https://spdx.org/licenses

[21:52] <Geth> ¦ ecosystem:   - [ ] My license is not one of those found on spdx.org but I **do** have a license field.

[21:52] <Geth> ¦ ecosystem:         In this case make sure you have a license URL listed under support. [See this example](https://github.com/samcv/URL-Find/blob/master/META6.json).

[21:52] <Geth> ¦ ecosystem:    - [ ] I **don't** have a license field. Yes, I understand this is **not recommended**.

[21:52] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/44b8944640

[21:52] <Geth> ¦ ecosystem: 3c32e8a660 | Altai-man++ (committed using GitHub Web editor) | META.list

[21:52] <Geth> ¦ ecosystem: Merge pull request #430 from alabamenhu/patch-1

[21:52] <Geth> ¦ ecosystem: 

[21:53] <Geth> ¦ ecosystem: Update META.list with the BCP57 module

[21:53] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/3c32e8a660

[21:53] <sena_kun> \o/

[21:55] <sena_kun> sleep time now. 'night, #perl6!

[21:55] <El_Che> bye sena_kun 

[21:56] *** sena_kun left
[21:56] <choiboi> I made an emoji bot, if anyone wants to try it, I hosted it on #perl6bottest

[21:56] *** niceperl left
[22:14] *** abraxxa1 left
[22:15] *** skids left
[22:16] *** rindolf left
[22:17] *** robertle left
[22:18] *** rindolf joined
[22:19] *** abraxxa1 joined
[22:20] <tbrowder> jmerelo: ever hear from Sean (aka Chris) Morrison?

[22:22] *** kkielak left
[22:23] *** aindilis left
[22:24] *** aindilis joined
[22:26] *** dominix__ joined
[22:27] *** cozachk joined
[22:29] *** zachk left
[22:30] *** dominix_ left
[22:30] *** MasterDuke left
[22:32] *** cozachk left
[22:36] *** zachk joined
[22:48] *** choiboi left
[22:49] *** Kaiepi left
[22:49] *** Kaiepi joined
[22:53] *** aindilis left
[22:54] *** guifa left
[22:55] *** guifa joined
[22:59] <tbrowder> .ask jmerelo have you heard from sean morrison?

[22:59] <yoleaux> tbrowder: I'll pass your message to jmerelo.

[23:02] *** rindolf left
[23:03] *** rindolf joined
[23:06] *** snarkyboojum joined
[23:07] *** ayerhart joined
[23:08] *** abraxxa1 left
[23:09] <Geth> ¦ doc: 13631fa1da | cfa++ | doc/Language/numerics.pod6

[23:09] <Geth> ¦ doc: Phrasing tweak.

[23:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/13631fa1da

[23:09] <synopsebot> Link: https://doc.perl6.org/language/numerics

[23:16] <samcv> anybody have suggestions for Perl Confderence 2020 europe "theme"? send topics to this channel (highlight me) or by pm

[23:21] <Geth> ¦ doc: d3922e5474 | cfa++ | xt/code.pws

[23:21] <Geth> ¦ doc: Spelling.

[23:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d3922e5474

[23:24] *** perl007 left
[23:27] *** rindolf left
[23:36] <Geth> ¦ doc: cfa++ created pull request #2630: Workaround for aspell backslash escaping issues (#975).

[23:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2630

[23:38] *** ferreira left
[23:39] <cfa> parking that for now

[23:39] *** ferreira joined
[23:54] *** w_richard_w joined
