[00:08] *** atweiden-air joined
[00:09] *** p6bannerbot sets mode: +v atweiden-air

[00:09] <atweiden-air> rakudo has landed in homebrew https://github.com/Homebrew/homebrew-core/commit/9e6c35ddd4ec3f89edb395555737571c9fce7b68

[00:10] *** Jmlv joined
[00:10] *** p6bannerbot sets mode: +v Jmlv

[00:11] *** Jmlv left
[00:14] *** scovit left
[00:14] *** dct left
[00:15] <Geth> ¬¶ doc: 2dcce0a0b0 | cfa++ | doc/Language/traps.pod6

[00:15] <Geth> ¬¶ doc: Formatting.

[00:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2dcce0a0b0

[00:15] <synopsebot> Link: https://doc.perl6.org/language/traps

[00:17] *** cpage_ joined
[00:18] *** p6bannerbot sets mode: +v cpage_

[00:19] *** cpage left
[00:19] *** cpage_ is now known as cpage

[00:19] *** MilkmanDan left
[00:20] *** MilkmanDan joined
[00:20] *** p6bannerbot sets mode: +v MilkmanDan

[00:23] *** rindolf left
[00:29] *** cfa left
[00:40] *** MorayJ left
[00:43] <lookatme_q> morning #perl6

[00:46] <sena_kun> o/

[00:46] *** atweiden-air left
[00:47] <lookatme_q> sena_kun, o/

[00:47] <sena_kun> though it's 02:47 here. :)

[00:48] <lookatme_q> here is 08:47

[00:49] <sena_kun> all hail timezones!

[00:50] <lookatme_q> haha :)

[00:51] <sena_kun> anyway, I'll go to sleep soon, I think

[00:52] <lookatme_q> sena_kun, good night, bye :)

[00:52] <sena_kun> just give me 5 more minutes to stare into to code...

[01:10] *** scovit joined
[01:11] *** p6bannerbot sets mode: +v scovit

[01:14] *** DarthGandalf joined
[01:14] *** p6bannerbot sets mode: +v DarthGandalf

[01:18] *** lizmat left
[01:19] *** sena_kun left
[01:29] <zachk> how can i compare types of variables?

[01:29] <timotimo> you can get an object's type object with the .WHAT pseudo-method

[01:30] <timotimo> if you are interested in the variable, actually, like the constraint it was declared with, you'll need to access the .VAR

[01:34] *** Ven`` joined
[01:35] *** p6bannerbot sets mode: +v Ven``

[01:47] <zachk> but say i want to compare two variables and see if their types are equal?

[01:51] *** kurahaupo_ joined
[01:52] *** kurahaupo left
[01:52] *** p6bannerbot sets mode: +v kurahaupo_

[01:58] <timotimo> there are many different ways to interpret that

[01:58] <timotimo> m: my Int $foo; my Str $bar; say "$foo.VAR.WHAT.^name() equal to $bar.VAR.WHAT.^name()?"

[01:58] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´Scalar equal to Scalar?‚ê§¬ª

[01:59] <timotimo> m: my Int $foo; my Str $bar; say "$foo.VAR.of.^name() equal to $bar.VAR.of.^name()?"

[01:59] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´Int equal to Str?‚ê§¬ª

[01:59] <timotimo> m: my Int $foo = <0xff>; my Int $bar = 255; say "$foo.VAR.of.^name() equal to $bar.VAR.of.^name()?"; say "$foo equal to $bar?"

[01:59] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´Int equal to Int?‚ê§0xff equal to 255?‚ê§¬ª

[01:59] <timotimo> m: my Int $foo = <0xff>; my Int $bar = 255; say "$foo.WHAT.^name() equal to $bar.WHAT.^name()?"; say "$foo equal to $bar?"

[01:59] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´IntStr equal to Int?‚ê§0xff equal to 255?‚ê§¬ª

[02:00] <timotimo> what semantics are you interested in?

[02:01] <timotimo> the kind of variable, aka Scalar vs Proxy vs Native Reference?

[02:01] <timotimo> the constraint the variable was declared with? i.e. my Int $foo vs my Str $bar?

[02:01] <timotimo> the type of the value that's in the variable? that'd be $foo.WHAT vs $bar.WHAT

[02:01] <timotimo> and do you want to accept subclasses of one in the other?

[02:02] *** mowcat joined
[02:02] *** p6bannerbot sets mode: +v mowcat

[02:03] <timotimo> i think what you want will be $foo.WHAT === $bar.WHAT

[02:04] <timotimo> not many prog languages have first-class scalar variables or introspectable lexicals or stuff like that

[02:14] * Ven`` certainly can't think of many off the top of their head

[02:15] <Ven``> m: subset MyInt of Int; say MyInt ~~ Int; say Int ~~ MyInt;

[02:15] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[02:15] <Ven``> interesting

[02:22] *** jme` joined
[02:23] *** p6bannerbot sets mode: +v jme`

[02:23] *** Ven`` left
[02:26] <vrurg> Can I have own control exceptions defined? I.e. to have them processed in a CONTROL block? Application of X::Control is not sufficient, seemingly.

[02:27] <zachk> whats that triple equals? === ? 

[02:28] <vrurg> zachk: same object equality. 

[02:28] <vrurg> m: my $a = 1; my $b = 1; say $a === $b; $b := $a; say $b === $a

[02:28] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[02:30] <vrurg> Ah, constant.

[02:30] <vrurg> m: class Foo {}; say Foo.new === Foo.new

[02:30] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´False‚ê§¬ª

[02:32] <lookatme_q> m: say 1 == True; say 1 === True; say True === True;

[02:32] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´True‚ê§False‚ê§True‚ê§¬ª

[02:32] <lookatme_q> zachk, you can using === check if they are same object

[02:33] <zachk> does that compare instance variables too inside an object instance? 

[02:38] *** ryn1x joined
[02:39] *** p6bannerbot sets mode: +v ryn1x

[02:41] <vrurg> zachk: It would compare whatever is in the variables.

[02:51] *** melezhik joined
[02:51] *** p6bannerbot sets mode: +v melezhik

[02:52] <melezhik> Hi! How do I declare dependency on version equal or greater in META.json file?

[02:54] *** molaf left
[02:54] <lookatme_q> melezhik, I don't think they support that things

[02:55] <melezhik> yeah ... I guessed ... just wanted to ensure ...

[02:58] *** Kaiepi left
[02:59] <lookatme_q> melezhik, maybe you can submit a ticket for that, but IDK which repo to

[03:02] <zachk> so my code was working, compiled and installed the latest perl6, now I get this This Seq has already been iterated, and its values consumed

[03:03] <lookatme_q> zachk, refer this documents: https://docs.perl6.org/type/Seq

[03:09] *** kurahaupo_ left
[03:10] *** kurahaupo joined
[03:10] *** p6bannerbot sets mode: +v kurahaupo

[03:11] <zachk> do i still need to apply the execstack fix for ubuntu on windows to rakudo?

[03:11] <zachk> er moarvm or whichever

[03:11] <lookatme_q> yes, I think so, for moarvm

[03:23] *** ryn1x left
[03:27] *** zachk left
[03:32] *** w_richard_w left
[03:42] *** melezhik left
[03:52] *** leont left
[04:34] *** Cabanossi joined
[04:34] *** Cabanoss- left
[04:35] *** p6bannerbot sets mode: +v Cabanossi

[04:42] *** sauvin joined
[04:42] *** p6bannerbot sets mode: +v sauvin

[04:47] *** jast left
[04:50] *** jast joined
[04:51] *** p6bannerbot sets mode: +v jast

[05:02] *** ferreira left
[05:05] *** jme` left
[05:16] *** molaf joined
[05:17] *** p6bannerbot sets mode: +v molaf

[05:23] *** w17t joined
[05:23] *** p6bannerbot sets mode: +v w17t

[05:28] *** reach_satori left
[05:41] *** w_richard_w joined
[05:42] *** p6bannerbot sets mode: +v w_richard_w

[05:44] *** w_richard_w1 joined
[05:45] *** p6bannerbot sets mode: +v w_richard_w1

[05:45] *** w_richard_w left
[05:46] *** zacts joined
[05:46] *** p6bannerbot sets mode: +v zacts

[05:48] *** MilkmanDan left
[05:49] *** kurahaupo left
[05:49] *** MilkmanDan joined
[05:49] *** p6bannerbot sets mode: +v MilkmanDan

[05:49] *** kurahaupo joined
[05:50] *** p6bannerbot sets mode: +v kurahaupo

[05:52] *** curan joined
[05:52] *** p6bannerbot sets mode: +v curan

[05:56] *** reach_satori joined
[05:57] *** p6bannerbot sets mode: +v reach_satori

[06:03] *** ZzZombo joined
[06:03] *** p6bannerbot sets mode: +v ZzZombo

[06:10] *** zacts left
[06:18] *** vrurg left
[06:20] *** jmerelo joined
[06:21] *** p6bannerbot sets mode: +v jmerelo

[06:26] *** domidumont joined
[06:26] *** p6bannerbot sets mode: +v domidumont

[06:27] *** molaf left
[06:28] <SmokeMachine> Isn‚Äôt just: ‚ÄúMudileName:ver<2.0>‚Äù?

[06:29] *** vrurg joined
[06:30] *** p6bannerbot sets mode: +v vrurg

[06:36] <SmokeMachine> .tell melezhik something like this: "Pod::To::Markdown:ver<0.1.4+>"

[06:36] <yoleaux> SmokeMachine: I'll pass your message to melezhik.

[06:36] <SmokeMachine> lookatme_q: something like this: "Pod::To::Markdown:ver<0.1.4+>"

[06:44] *** vrurg left
[06:45] <jmerelo> squashable6: status

[06:45] <squashable6> jmerelo, Next SQUASHathon in 24 days and ‚âà3 hours (2019-02-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:45] <jmerelo> releasable6: status

[06:45] <releasable6> jmerelo, Next release in ‚âà11 days and ‚âà12 hours. 3 blockers. 0 out of 173 commits logged

[06:45] <releasable6> jmerelo, Details: https://gist.github.com/64dbb6ca855c7b2ebf280eee28ce5ce1

[06:46] *** domidumont left
[06:47] <jmerelo> .tell AlexDaniel I'll go for Kaiepi as a winner. Actually, you made the most contributions, but I guess you're not eligible

[06:47] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[06:47] <jmerelo> .tell Kaiepi congratulations! You're the winner of the plush Camelia for your contributions to the last Squashathon!

[06:47] <yoleaux> jmerelo: I'll pass your message to Kaiepi.

[06:53] <jmerelo> .tell Kaiepi to contact lizmat to get your plush Camelia shipped to you.

[06:53] <yoleaux> jmerelo: I'll pass your message to Kaiepi.

[06:59] <jmerelo> .tell AlexDaniel I'm going to propose Squashathons for the next 6 months. Feedback is welcomed and appreciated.

[06:59] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[07:00] <jmerelo> .tell AlexDaniel do you have some script to extract info from the log? I seem to remember you did...

[07:00] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[07:02] *** domidumont joined
[07:02] *** p6bannerbot sets mode: +v domidumont

[07:08] <jmerelo> SmokeMachine: Why did you remove Red from the ecosystem? Any major problem?

[07:19] <jmerelo> squashable6: status

[07:19] <squashable6> jmerelo, Next SQUASHathon in 24 days and ‚âà2 hours (2019-02-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[07:19] <jmerelo> ^^^^ OK, I have inserted squashathon proposals for the next 6 months. Comments and suggestions welcome and appreciated

[07:20] <jmerelo> And we're still commenting on the issue of splitting the doc repository: https://github.com/perl6/doc/issues/2542

[07:21] *** scovit_ joined
[07:21] *** p6bannerbot sets mode: +v scovit_

[07:24] *** scovit left
[07:26] *** jmerelo left
[07:53] *** mowcat left
[08:11] *** w_richard_w1 left
[08:15] *** robertle_ joined
[08:16] *** p6bannerbot sets mode: +v robertle_

[08:27] *** kurahaupo left
[08:28] *** w_richard_w joined
[08:28] *** p6bannerbot sets mode: +v w_richard_w

[08:31] *** sftp left
[08:35] <Geth> ¬¶ doc: d7841111e6 | (JJ Merelo)++ | doc/Language/modules.pod6

[08:35] <Geth> ¬¶ doc: Restores the information on the `api` field

[08:35] <Geth> ¬¶ doc: 

[08:35] <Geth> ¬¶ doc: As requested by @jonathanstowe and @ugexe

[08:35] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d7841111e6

[08:35] <synopsebot> Link: https://doc.perl6.org/language/modules

[08:38] *** sftp joined
[08:38] *** p6bannerbot sets mode: +v sftp

[08:42] *** w_richard_w left
[08:45] *** dakkar joined
[08:45] *** p6bannerbot sets mode: +v dakkar

[08:50] *** patrickb joined
[08:51] *** p6bannerbot sets mode: +v patrickb

[09:00] *** w17t left
[09:02] <lookatme_q> SmokeMachine, don't know this usage, is that mention in the documents ? :)

[09:08] *** w17t joined
[09:08] *** p6bannerbot sets mode: +v w17t

[09:18] *** rindolf joined
[09:18] *** p6bannerbot sets mode: +v rindolf

[09:26] *** ZzZombo left
[09:41] *** reach_satori left
[09:42] <AlexDaniel> .

[09:42] <yoleaux> 06:47Z <jmerelo> AlexDaniel: I'll go for Kaiepi as a winner. Actually, you made the most contributions, but I guess you're not eligible

[09:42] <yoleaux> 06:59Z <jmerelo> AlexDaniel: I'm going to propose Squashathons for the next 6 months. Feedback is welcomed and appreciated.

[09:42] <yoleaux> 07:00Z <jmerelo> AlexDaniel: do you have some script to extract info from the log? I seem to remember you did...

[09:56] *** kensanata joined
[09:56] *** p6bannerbot sets mode: +v kensanata

[10:09] *** scovit_ left
[10:13] *** dpk joined
[10:14] *** p6bannerbot sets mode: +v dpk

[10:15] *** w17t left
[10:16] *** Kaiepi joined
[10:17] *** p6bannerbot sets mode: +v Kaiepi

[10:21] *** lizmat joined
[10:21] *** p6bannerbot sets mode: +v lizmat

[10:22] *** w17t joined
[10:22] *** p6bannerbot sets mode: +v w17t

[10:34] *** Kaiepi left
[10:34] *** zakharyas joined
[10:34] *** reach_satori joined
[10:34] *** w17t left
[10:35] *** p6bannerbot sets mode: +v zakharyas

[10:35] *** p6bannerbot sets mode: +v reach_satori

[10:36] *** w17t joined
[10:36] *** p6bannerbot sets mode: +v w17t

[10:37] *** Kaiepi joined
[10:38] *** p6bannerbot sets mode: +v Kaiepi

[11:10] *** mbichon joined
[11:10] *** p6bannerbot sets mode: +v mbichon

[11:14] *** mbichon left
[11:21] *** domidumont left
[11:41] *** sena_kun joined
[11:42] *** scovit joined
[11:42] *** p6bannerbot sets mode: +v sena_kun

[11:43] *** p6bannerbot sets mode: +v scovit

[11:45] *** Xliff_ left
[11:47] *** Xliff joined
[11:48] *** p6bannerbot sets mode: +v Xliff

[11:51] *** Xliff left
[11:51] *** Xliff joined
[11:51] *** mike_swie joined
[11:51] *** p6bannerbot sets mode: +v mike_swie

[11:52] *** p6bannerbot sets mode: +v Xliff

[11:57] <lizmat> And yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/01/08/2019-01-wishes-for-2019/

[11:59] *** rindolf left
[11:59] *** Xliff left
[12:01] *** rindolf joined
[12:01] <moritz> lizmat++

[12:01] <moritz> retweeted

[12:02] *** p6bannerbot sets mode: +v rindolf

[12:02] *** Xliff joined
[12:02] <mike_swie> lizmat++

[12:03] *** p6bannerbot sets mode: +v Xliff

[12:03] <mike_swie> I'm assuming the ++ is a thanks, or like, or complimentary.  If I got that wrong, please forgive the accidental etiquette breach.

[12:04] <lizmat> mike_swie: it's interpreted as such

[12:04] *** scovit left
[12:04] <lizmat> the usage is from the days that bots where roaming the channels assigning karma  :-)

[12:05] <lizmat> it indicates an increase in karma after things done

[12:05] *** yoleaux joined
[12:05] *** ChanServ sets mode: +v yoleaux

[12:05] <lizmat> prefix ++ indicates karma to assigned for things to be done still

[12:05] <mike_swie> Heh.  I was using telnet chat in the '90s, I never got into IRC, Usenet, and similar.  Funny how I missed them all at the time.

[12:06] *** p6bannerbot sets mode: +v yoleaux

[12:06] *** AlexDaniel left
[12:07] <masak> it doesn't matter that bots are not actually accumulating karma at any given moment

[12:08] <masak> somewhere, somehow, A Score is Being Kept

[12:08] <moritz> Karma keeps score :)

[12:08] <masak> exactly

[12:08] <masak> anyway, lizmat++ for the post

[12:08] <Xliff> masak: Ah! Spirituality! Surprising! :)

[12:08] <yoleaux> 1 Jan 2019 12:34Z <jjmerelo> Xliff: it was a generic "Advent calendar" post, not specifically devoted to Perl 6. It was published Dec 2nd, I think.

[12:09] <masak> and I had missed the thing with Zoffix leaving. that's sad. :/

[12:09] *** reach_satori left
[12:09] <Xliff> Ah.... Slashdot. Those were the days.

[12:10] * masak almost wrote something about the Naming/Alias issue, but instead decides not to

[12:17] <SmokeMachine> .tell jmerelo I removed Red from the ecosystem because I sent it to CPAN

[12:17] <yoleaux> SmokeMachine: I'll pass your message to jmerelo.

[12:25] <SmokeMachine> .tell lizmat Any reason to not mentioning Red on p6weekly?

[12:25] <yoleaux> SmokeMachine: I'll pass your message to lizmat.

[12:26] <lizmat> SmokeMachine: it's mentioned in the New Modules section

[12:26] <yoleaux> 12:25Z <SmokeMachine> lizmat: Any reason to not mentioning Red on p6weekly?

[12:26] <SmokeMachine> Sorry o just saw it!!!

[12:26] <lizmat> and it's the module I consider the potential killer feature

[12:27] <SmokeMachine> I think I‚Äôm becoming blind...

[12:27] <lizmat> just write a nice blog post about it and you'll get much more exposure  :-)

[12:27] <SmokeMachine> lizmat: thanks!

[12:28] *** reach_satori joined
[12:29] <SmokeMachine> lizmat: I didn‚Äôt mean mentioning outside the new modules... I couldn‚Äôt see the on the new modules area... (I‚Äôve just waked up)

[12:29] *** Xliff left
[12:29] *** p6bannerbot sets mode: +v reach_satori

[12:29] <SmokeMachine> lizmat: sorry...

[12:32] <lizmat> SmokeMachine: should I mention it as RED (in full capitals) in the future ?

[12:33] <lizmat> then it will stand out more ?

[12:34] <SmokeMachine> I call it Red... I have not decided why it‚Äôs called Red yet... :)

[12:35] <lizmat> Really Excellent Databaseabstraction

[12:35] <timotimo> 04Red

[12:35] <SmokeMachine> :)

[12:35] <timotimo> ReDorm

[12:37] *** MorayJ joined
[12:37] *** p6bannerbot sets mode: +v MorayJ

[12:40] *** Guest87s joined
[12:40] *** p6bannerbot sets mode: +v Guest87s

[12:46] <lizmat> afk for a bit&

[12:50] *** reach_satori left
[12:55] *** scovit joined
[12:56] *** p6bannerbot sets mode: +v scovit

[12:58] *** domidumont joined
[12:59] *** p6bannerbot sets mode: +v domidumont

[12:59] *** tobs` joined
[13:00] *** p6bannerbot sets mode: +v tobs`

[13:03] *** scovit left
[13:05] *** Guest87s left
[13:08] *** lucasb joined
[13:08] *** p6bannerbot sets mode: +v lucasb

[13:08] *** AlexDaniel joined
[13:08] *** p6bannerbot sets mode: +v AlexDaniel

[13:29] *** salva joined
[13:30] *** p6bannerbot sets mode: +v salva

[13:32] *** w17t left
[13:47] <lucasb> I just noticed the comments about the departure of our fellow developer. I'm sorry to hear that and hope he returns when he wants.

[13:49] <lucasb> His modules should be preserved. Anyone did that already?

[13:49] <lucasb> maybe a github.com/zoffixmirror org? :)

[13:51] <lizmat> AlexDaniel has rights to Zoffix' repos as far as I knonw

[13:51] <lizmat> *know

[13:51] <sena_kun> isn't moving those under perl6-community-modules org enough?

[13:52] <lucasb> yes, that should work

[13:57] *** Xliff joined
[13:57] *** sjoshi joined
[13:57] *** sjoshi left
[13:57] *** p6bannerbot sets mode: +v Xliff

[14:05] *** AlexDaniel left
[14:06] *** reach_satori joined
[14:06] *** leont joined
[14:07] *** p6bannerbot sets mode: +v reach_satori

[14:07] *** p6bannerbot sets mode: +v leont

[14:12] *** HaraldJoerg joined
[14:13] *** p6bannerbot sets mode: +v HaraldJoerg

[14:13] <HaraldJoerg> p6: say ‡•®‡•¶‡•ß‡•Ø;

[14:13] <camelia> rakudo-moar 225d2f966: OUTPUT: ¬´2019‚ê§¬ª

[14:14] <tadzik> :o

[14:14] *** scovit joined
[14:14] <HaraldJoerg> p6: say '‡•®‡•¶‡•ß‡•Ø'

[14:14] <camelia> rakudo-moar 225d2f966: OUTPUT: ¬´‡•®‡•¶‡•ß‡•Ø‚ê§¬ª

[14:15] *** p6bannerbot sets mode: +v scovit

[14:16] <HaraldJoerg> p6: say ‡•®‡•¶‡•ß‡•Ø - Ÿ¢Ÿ†Ÿ°Ÿ©

[14:16] <camelia> rakudo-moar 225d2f966: OUTPUT: ¬´0‚ê§¬ª

[14:17] <HaraldJoerg> Is there a way to have Perl 6 *write* integers as non-ASCII numerals?

[14:18] <timotimo> well, there is a module for roman numerals

[14:18] <SmokeMachine> there is a module for japanese too...

[14:19] <HaraldJoerg> I know this one, but I'm more interested in extant systems

[14:22] *** vrurg joined
[14:22] <timotimo> it's relatively easy if the other numeral system is 10-based

[14:23] *** p6bannerbot sets mode: +v vrurg

[14:23] <HaraldJoerg> I've used two 10-based here: indian and devanagari

[14:23] <Geth> ¬¶ DBIish: jnthn++ created pull request #137: Performance improvements, with a focus on SQLite and re-use of statement handles

[14:23] <Geth> ¬¶ DBIish: review: https://github.com/perl6/DBIish/pull/137

[14:23] *** leont left
[14:23] <jnthn> 5x-6x faster DBIish, anyone? :)

[14:24] <jnthn> (OK, only for one benchmark, but still... :))

[14:24] <timotimo> um, yes please?!?

[14:24] <sena_kun> >+16 ‚àí14

[14:24] <masak> \o/

[14:24] <sena_kun> line count is just wow. :)

[14:25] *** tankf33der joined
[14:25] *** p6bannerbot sets mode: +v tankf33der

[14:27] *** andrzejku left
[14:27] <masak> I read "TRUE_ZERO" entirely the wrong way :)

[14:27] <jnthn> :P

[14:27] <masak> "wait, but isn't that... hasn't it been... oooooooh"

[14:28] *** curan left
[14:28] <lizmat> commute to Amsterdam.pm&

[14:29] *** lizmat left
[14:36] <AlexDaniel`> Yes, I should move the modules eventually

[14:36] <[Coke]> the memory panic I got for 32-bit moarvm on windows doesn't happen on the R* 64bit distro.

[14:39] <HaraldJoerg> p6: my $year= ‡•®‡•¶‡•ß‡•Ø; $year++

[14:39] <camelia> rakudo-moar 225d2f966: ( no output )

[14:39] <HaraldJoerg> p6: my $year= ‡•®‡•¶‡•ß‡•Ø;  say ++$year

[14:39] <camelia> rakudo-moar 225d2f966: OUTPUT: ¬´2020‚ê§¬ª

[14:40] <HaraldJoerg> p6: my $year= "‡•®‡•¶‡•ß‡•Ø";  say ++$year

[14:40] <camelia> rakudo-moar 225d2f966: OUTPUT: ¬´‡•®‡•¶‡•®‡•¶‚ê§¬ª

[14:53] *** fluca1978 joined
[14:54] *** p6bannerbot sets mode: +v fluca1978

[14:59] *** zakharyas left
[15:05] <HaraldJoerg> my $year = ùüêùüéùüèùüó; say ++$year

[15:05] <evalable6> HaraldJoerg, rakudo-moar 6b078a052: OUTPUT: ¬´2020‚ê§¬ª

[15:05] <HaraldJoerg> p6: my $year = "ùüêùüéùüèùüó"; say ++$year

[15:05] <camelia> rakudo-moar 6b078a052: OUTPUT: ¬´ùüêùüéùüèùüó‚ê§¬ª

[15:05] <HaraldJoerg> p6: my $year = ùüêùüéùüèùüó; say ++$year

[15:05] <camelia> rakudo-moar 6b078a052: OUTPUT: ¬´2020‚ê§¬ª

[15:23] *** fluca1978 left
[15:25] *** fluca1978 joined
[15:26] *** p6bannerbot sets mode: +v fluca1978

[15:26] *** zacts joined
[15:27] *** p6bannerbot sets mode: +v zacts

[15:28] <Geth> ¬¶ DBIish/master: 7 commits pushed by (Jonathan Worthington)++, (Salvador Ortiz)++

[15:28] <Geth> ¬¶ DBIish/master: 1137c6dbf0 | Use much cheaper conditional method call construct

[15:28] <Geth> ¬¶ DBIish/master: 2952d6780f | Only reset error once per SQLite execute

[15:28] <Geth> ¬¶ DBIish/master: b4d162bebb | Avoid repeated use of mixins

[15:28] <Geth> ¬¶ DBIish/master: 3e70fd502a | Use faster loop for parameter bind in SQLite

[15:28] <Geth> ¬¶ DBIish/master: d1ed36b3b0 | Tweaks to reduce allocations

[15:28] <Geth> ¬¶ DBIish/master: 97247e2dcf | Cache the .WHICH of a statement handle

[15:28] <Geth> ¬¶ DBIish/master: 05d716d397 | Merge pull request #137 from jnthn/improve-perf

[15:28] <Geth> ¬¶ DBIish/master: review: https://github.com/perl6/DBIish/compare/71d97d49e78c...05d716d39708

[15:28] *** aindilis left
[15:29] <Kaiepi> aw man zoffix quit?

[15:29] <yoleaux> 06:47Z <jmerelo> Kaiepi: congratulations! You're the winner of the plush Camelia for your contributions to the last Squashathon!

[15:29] <yoleaux> 06:53Z <jmerelo> Kaiepi: to contact lizmat to get your plush Camelia shipped to you.

[15:30] <Kaiepi> oh sweet

[15:31] <Kaiepi> .tell lizmat msg me once you're on

[15:31] <yoleaux> Kaiepi: I'll pass your message to lizmat.

[15:31] *** aindilis joined
[15:32] *** p6bannerbot sets mode: +v aindilis

[15:33] *** glom joined
[15:33] *** p6bannerbot sets mode: +v glom

[15:38] <tadzik> the backstories of those commits are fun to read, like https://github.com/perl6/DBIish/commit/1137c6dbf0d85e600315ec652fdae9c237e6b656

[15:40] <tadzik> https://github.com/perl6/DBIish/commit/97247e2dcf0a80c2dcf6fa5991c127b5392e715d I find the most surprising

[15:40] <Kaiepi> i had no idea conditional method calls were possible

[15:41] *** glom left
[15:46] <fluca1978> I read about conditional method calls in brian d foy's book

[15:47] <fluca1978> however I did not realized it was optimized with regard to .^can

[15:48] <jnthn> It's optimized to the point that, if in type-specialized code, it can even throw out the conditional part, rendering it as a constant or a normal method call, and the latter is then an inline candidate.

[15:48] <Kaiepi> brian d foy's book?

[15:48] <jnthn> So in the best cases it's "free"

[15:49] <fluca1978> Kaiepi:Learning Perl 6: Keeping the Easy, Hard, and Impossible

[15:49] <jnthn> Goodness, punctuation really saves that book title :P

[15:51] <fluca1978> anyone can help me understanding the relationship between nqp and rakudo? I mean, nqp is somehow used to implement rakudo (bootstrapping) or am I misunderstanding?

[15:51] <Kaiepi> is it worth giving a read if you've already been using perl 6 for around a year?

[15:52] <jnthn> fluca1978: It's a little confusing in that we tend to use "NQP" to refer to two things. One of them is NQP the language, which is a bootstrapped subset of Perl 6 that's easier to implement and optimize.

[15:52] <fluca1978> Kaiepi: I don't think, one year is enough to get all the concepts expressed in the book. But, on the other side, brian is a very proficent developer and writer, so...

[15:53] <jnthn> However, also contained in the NQP repository is a bunch of compiler infrastructure (such as code generation) that Rakudo uses too

[15:53] <jnthn> So you can see NQP as being a mini Perl 6 that includes a compiler toolkit in its standard library. :)

[15:54] <fluca1978> jnthn: but what compiles NQP then?

[15:55] <jnthn> fluca1978: NQP. The repository includes a snapshot that is good enough to compile the current version.

[15:55] <jnthn> fluca1978: Of course, if you go back enough years, there was an NQP written in something else.

[15:56] <jnthn> Just like there was a first C compiler not written in C, for example.

[15:57] <fluca1978> jnthn: therefore, there is a binary snapshot of NQP to bootstrap the compiler that in turn compiles NQP the language, so in this sense it is meta-circular, right?

[15:58] <sena_kun> it is

[15:58] <jnthn> fluca1978: Yes

[15:59] <jnthn> At some point it stops hurting to think about. :)

[15:59] <fluca1978> and what does it mean that NQP is lighter than Perl6? I mean, NQP has classes itself, so what makes the runtime smaller?

[16:00] <[Coke]> supports less language syntax, for example

[16:00] <[Coke]> fewer builtin classes.

[16:00] <jnthn> It has simplified/cheating versions of a lot of Perl 6 language features, and then excludes quite a number of other features.

[16:01] <[Coke]> only binding, no assignment.

[16:01] <jnthn> That also, which is a big simplification.

[16:01] <jnthn> Also no laziness

[16:01] <jnthn> No high-level concurrency stuff

[16:02] <jnthn> No operator overloading or custom operators, etc.

[16:02] <fluca1978> got it

[16:03] <vrurg> The above mentioning of .^can reminded me: what is the best way of getting method object of a class? So far, I'm stuck to find_method.

[16:03] <jnthn> vrurg: What does "best" mean? .^find_method is best if you're just after something to invoke; .^lookup is best if you're after it for introspection.

[16:04] <Xliff> jnthn: At which point does it stop hurting, and when it does, should I worry?

[16:04] *** simple joined
[16:04] *** p6bannerbot sets mode: +v simple

[16:04] <Xliff> (and you are right about that title! LOL)

[16:05] <vrurg> jnthn: For invoking. Thanks! I just thought that I might be missing something like &sub but for methods.

[16:06] <jnthn> Xliff: I guess the point I really got settled with it was when I was working on the JVM porting, and realized that one can write a bytecode generator, then run the compiler on the VM that already exists but have it "cross-compile", and then use that cross-compiler to compile NQP itself.

[16:06] <jnthn> So basically, you get it to spit itself out but for another virtual machine

[16:06] <jnthn> I've done that twice over by now. Whether that's worrying, well... :-)

[16:07] <Xliff> So kinda like Java and Android?!?

[16:07] *** jmerelo joined
[16:07] <jmerelo> O/

[16:07] <yoleaux> 09:51Z <AlexDaniel> jmerelo: no, I just looked at the numbers and wrote the summary :)

[16:07] <yoleaux> 12:17Z <SmokeMachine> jmerelo: I removed Red from the ecosystem because I sent it to CPAN

[16:07] <fluca1978> Xliff: java and jikesrvm

[16:08] *** p6bannerbot sets mode: +v jmerelo

[16:08] <Xliff> fluca1978: So similar situation. jikesrvm uses the Java language spec, but does not compile to the JVM

[16:08] <Xliff> Android apps work in the same way.

[16:09] <fluca1978> Xliff: jikesrvm is written in java and does compile to java bytecode (JIT), it bootstraps out of an image obtained by another virtual machine

[16:09] <jnthn> Yeah, it's all the same kind of stuff.

[16:11] *** ferreira1 joined
[16:11] *** p6bannerbot sets mode: +v ferreira1

[16:12] <Xliff> OK. So meta-circular. Got it.

[16:12] <Xliff> Would that mean that NQP should be on this list: https://en.wikipedia.org/wiki/Meta-circular_evaluator

[16:12] *** fluca1978 left
[16:13] <sena_kun> is NQP interpreting though?

[16:14] <sena_kun> as in, a C compiler written in C doesn't really belong to the list.

[16:14] <jnthn> Yeah, I'd tend to refer to it as a "bootstrapped compiler" 

[16:14] <sena_kun> yup

[16:17] <Kaiepi> i only just noticed the MONKEY-SEE-NO-EVAL pragma's a pun

[16:17] *** cfa joined
[16:17] *** p6bannerbot sets mode: +v cfa

[16:18] <Kaiepi> smh putting puns in my code

[16:19] *** kensanata left
[16:28] *** zacts left
[16:32] <SmokeMachine> how can I create a function that `is native` and returns this (https://code.woboq.org/gcc/gcc/jit/libgccjit.h.html#gcc_jit_context)? 

[16:34] <SmokeMachine> I mean this function: https://code.woboq.org/gcc/gcc/jit/libgccjit.h.html#gcc_jit_context_acquire

[16:34] <Xliff> SmokeMachine: Any reason you can't use a CPointer repr for that?

[16:35] <Xliff> class gcc_jit_context is repr('CPointer') { }; 

[16:35] <SmokeMachine> Xliff: Im trying this... but doesnt feel right...  https://www.irccloud.com/pastebin/EMO9XDFb/

[16:35] <Xliff> sub my_jit_func(...) returns gcc_hit_context is native (...)

[16:36] <Xliff> Why doesn't it feel right?

[16:37] <SmokeMachine> Xliff: this? https://www.irccloud.com/pastebin/nB4tDswi/

[16:37] *** qqq joined
[16:37] *** p6bannerbot sets mode: +v qqq

[16:37] <Xliff> No. Your first one was better.

[16:38] *** qqq left
[16:38] <Xliff> 2nd one isn't wrong. You just wouldn't need GccJitContext.new.

[16:38] <Xliff> GccJitCont3ext.new doesn't really do anything.

[16:39] <Xliff> my $jitc = gcc_jit_context_aquire() would return a GccJitContext, though.

[16:39] *** zacts joined
[16:39] *** p6bannerbot sets mode: +v zacts

[16:45] <SmokeMachine> Xliff: you mean this? https://www.irccloud.com/pastebin/YwxZ69N9/

[16:47] *** domidumont left
[16:47] <Xliff> Looks fine. You won't know until to try to do something with that pointer.

[16:48] <sjn> o/

[16:48] <Xliff> You used gcc_jit_context_get_type() and got something back. That's a good sign.

[16:48] <Xliff> \o sjn

[16:51] *** robertle_ left
[16:52] <sjn> .tell lizmat link in 2019.01 weekly to Brad Gilbert's tweet seems wrong

[16:52] <yoleaux> sjn: I'll pass your message to lizmat.

[17:00] *** mux__ joined
[17:00] *** p6bannerbot sets mode: +v mux__

[17:01] <mux__> I'm experiencing a strange behavior from perl6 + tmux. I want to record the cursor position and restore it using tput.

[17:01] <mux__> This works as expected in a bare Xterm or VT: perl6 -e'print "save"; run <tput sc>; say ""; sleep 1; print "restore"; run <tput rc>; sleep 1; print 42'

[17:01] <mux__> But running it in tmux seems to only restore the column, not the row.

[17:01] <mux__> Using tput in the shell works just fine everywhere though: echo -n save; tput sc; sleep 1; echo; sleep 1; echo -n restore; sleep 1; tput rc; echo 42

[17:02] <mux__> Maybe someone here has a clue whats going on?

[17:04] *** domidumont joined
[17:05] <timotimo> huh, interesting. can you try outputting %*ENV<TERM> inside perl6 and echo $TERM outside perl6?

[17:05] <timotimo> i see no reason for them to differ, but if they do it'd be a sure sign for trouble

[17:05] *** p6bannerbot sets mode: +v domidumont

[17:08] <mux__> timotimo: No, it's the same in both

[17:08] <Kaiepi> how do i get the \c name for a character?

[17:08] *** AlexDaniel joined
[17:08] *** p6bannerbot sets mode: +v AlexDaniel

[17:15] <SmokeMachine> Xliff: until the CArray it was working...  https://www.irccloud.com/pastebin/FdNjcm7R/

[17:15] <jnthn> Kaiepi: If you have the codepoint? uniname, I think

[17:18] <SmokeMachine> Xliff: wrong parameter value...

[17:18] <SmokeMachine> but with error yet...

[17:18] <SmokeMachine> xLIFF:  https://www.irccloud.com/pastebin/eoP5pRIQ/

[17:18] <SmokeMachine> Xliff: ^^

[17:19] <Kaiepi> m: 'üòÇ'.uniname

[17:19] <camelia> rakudo-moar 4d7cdc0f4: ( no output )

[17:19] <Xliff> I'm reading. Be aware, I am also trying to eat lunch. :)

[17:19] <Kaiepi> m: say 'üòÇ'.uniname

[17:19] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´FACE WITH TEARS OF JOY‚ê§¬ª

[17:19] <Kaiepi> thanks

[17:20] <Kaiepi> m: sub term:<<\c[FACE WITH TEARS OF JOY]>> is rw { state $ = 0 }; üòÇ = e ** (i * pi); say üòÇ

[17:20] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´-1+1.2246467991473532e-16i‚ê§¬ª

[17:20] <Kaiepi> shouldn't that be -1?

[17:21] <SmokeMachine> Fixed!!! wrong parameters!

[17:23] <Xliff> Ah! OK. 

[17:23] *** zacts left
[17:27] <Xliff> m: i¬≤.say

[17:27] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´-1+1.2246467991473532e-16i‚ê§¬ª

[17:27] <AlexDaniel> Kaiepi: isn't it close enough?

[17:27] <AlexDaniel> e-16 that's really small

[17:27] <Xliff> That's a really small imaginary portion.

[17:28] <AlexDaniel> yeah

[17:28] *** lizmat joined
[17:28] *** p6bannerbot sets mode: +v lizmat

[17:28] <Xliff> Not smallest representable floating point value, though.

[17:29] <Xliff> That's probably a residue of the imaginary math, though.

[17:30] *** dakkar left
[17:31] *** dakkar joined
[17:31] *** zacts joined
[17:31] *** p6bannerbot sets mode: +v zacts

[17:31] *** p6bannerbot sets mode: +v dakkar

[17:31] <[Coke]> e and pi are approximate constants here.

[17:32] <moritz> just standard floating point arithmetics

[17:32] <SmokeMachine> how can I receive a function pointer?

[17:33] <Xliff> SmokeMahcine: That's one thing NativeCall does NOT make easy.

[17:33] <Xliff> s/SmokeMahcine/SmokeMachine/

[17:33] <SmokeMachine> :(

[17:33] <Xliff> Besides... what good is a C function pointer going to do for you in Perl6?

[17:33] <SmokeMachine> I think that's the last think I need to make my sample work...

[17:34] <Kaiepi> how do i generate a range like 1,2,3,3,4,5,5,6,7,7,8,9?

[17:34] <Xliff> (there is utility, but it's limited)

[17:34] *** rindolf left
[17:34] <SmokeMachine> Xliff: please, show me

[17:34] <Xliff> SmokeMachine: I can't. 

[17:34] *** rindolf joined
[17:35] <Xliff> I mean, about the best you can do is say "returns Pointer"

[17:35] <sena_kun> Kaiepi, what's the rule of this progression? are 1,2,9 hard-coded?

[17:35] *** p6bannerbot sets mode: +v rindolf

[17:36] <Kaiepi> it starts with 1,2,3, then the next three digits are the last digit of the previous triple and its consecutive digits

[17:36] <Kaiepi> so 1,2,3, then 3,4,5, then 5,6,7, etc.

[17:36] <SmokeMachine> Xliff: but how do I call it?

[17:37] <Xliff> SmokeMachine: You can't.

[17:37] <Xliff> Not from Perl6.

[17:37] <sena_kun> hmm... that seems quite specific to me, I'd go with a simple iterative approach to make later understanding easier. though it sounds like a golfing task where cryptic == better, yes?

[17:37] <Xliff> SmokeMachine: About the only thing you could do is write a wrapper that would take the pointer and do the invocation from C. Then you have the whole hassle of parameters.

[17:38] <Xliff> C calling C is best left to C.

[17:39] <Xliff> sena_kun, Kaiepi: That looks like something better for Iterator.pull-one

[17:39] <Xliff> s/better/better-suited/

[17:39] <Xliff> Since some numbers in the sequence are duped.

[17:39] <Kaiepi> m: my @nums = lazy gather { my $x = 1; loop { take ($x, ++$x, ++$x) } }; say @nums[0..^3]

[17:39] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´((7 2 3) (7 4 5) (7 6 7))‚ê§¬ª

[17:40] *** molaf joined
[17:40] <Kaiepi> 7?

[17:40] <Kaiepi> m: my @nums = lazy gather { my $x = 1; loop { take ($x, $x + 1, $x + 2); $x += 2 } }; say @nums[0..^3]

[17:40] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´((5 2 3) (5 4 5) (5 6 7))‚ê§¬ª

[17:40] *** p6bannerbot sets mode: +v molaf

[17:41] <Kaiepi> m: my @nums = lazy gather { my $x = 1; loop { take $x..$x+2; $x += 2 } }; say @nums[0..^3]

[17:41] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1..3 3..5 5..7)‚ê§¬ª

[17:41] <Kaiepi> m: my @nums = lazy gather { my $x = 1; loop { take $x..$x+2.flat; $x += 2 } }; say @nums[0..^3]

[17:41] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1..2 3..4 5..6)‚ê§¬ª

[17:41] <Kaiepi> m: my @nums = lazy gather { my $x = 1; loop { take $x..$x+2.List; $x += 2 } }; say @nums[0..^3]

[17:41] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1..2 3..4 5..6)‚ê§¬ª

[17:41] <Kaiepi> m: my @nums = lazy gather { my $x = 1; loop { take $x..$x+2.list; $x += 2 } }; say @nums[0..^3]

[17:41] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1..2 3..4 5..6)‚ê§¬ª

[17:42] <Kaiepi> m: my @nums = lazy gather { my $x = 1; loop { take ($x..$x+2).list; $x += 2 } }; say @nums[0..^3]

[17:42] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´((1 2 3) (3 4 5) (5 6 7))‚ê§¬ª

[17:42] * [Coke] wonders if he can get unicode working this cmd.bat/ssh/tmux combo

[17:42] <Kaiepi> there we go

[17:43] *** dakkar left
[17:45] <Geth> ¬¶ doc: 1075133cef | (JJ Merelo)++ | doc/Language/modules.pod6

[17:45] <Geth> ¬¶ doc: Moves `source-type` to a footnote refs #2543

[17:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1075133cef

[17:45] <Geth> ¬¶ doc: 72c02cbfe0 | (JJ Merelo)++ | 2 files

[17:45] <Geth> ¬¶ doc: Extends the description of the *-depends fields.

[17:45] <synopsebot> Link: https://doc.perl6.org/language/modules

[17:45] <Geth> ¬¶ doc: 

[17:45] <Geth> ¬¶ doc: Including the *hash* form, with examples. Closes #2543.

[17:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/72c02cbfe0

[17:52] *** mux__ left
[17:53] <Xliff> m: my @nums = lazy gather { my $x = 1; loop { take ($x..$x+2).list; $x += 2 } }; @nums[0..2].map(|*).say

[17:53] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1 2 3 3 4 5 5 6 7)‚ê§¬ª

[17:54] <sena_kun> m: my @nums = lazy gather { my $x = 1; loop { take ($x..$x+2).list; $x += 2 } }; @nums[0..2].join.say

[17:54] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´1 2 33 4 55 6 7‚ê§¬ª

[17:54] <sena_kun> ouch

[17:54] <Xliff> :)

[17:54] <sena_kun> shame on me. :P

[17:56] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my Rat $total = 3.Rat; for @denominators -> $a, $b { $total = $total + 4/$a - 4/$b; }; $total }; say pi(100)

[17:56] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Type check failed in assignment to $total; expected Rat but got Num (3.1415766854350315e0)‚ê§  in sub pi at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:56] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my Num $total = 3.Num; for @denominators -> $a, $b { $total = $total + 4/$a - 4/$b; }; $total }; say pi(100)

[17:56] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my Num $total = 3.Num; for @denominators -> $a, $b { $total = $total + 4/$a - 4/$b; }; $total }; say pi(1)

[17:56] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my $total = 3; for @denominators -> $a, $b { $total = $total + 4/$a - 4/$b; }; $total }; say pi(100)

[17:57] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my $total = 3; for @denominators[0..$prec] -> $a, $b { $total = $total + 4/$a - 4/$b; }; $total }; say pi(100)

[17:57] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(timeout)¬ª

[17:57] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in sub pi at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:57] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my $total = 3; for @denominators[0..^$prec].rotor(2) -> ($a, $b) { $total = $total + 4/$a - 4/$b; }; $total }; say pi(100)

[17:57] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´3.141592410971983‚ê§¬ª

[17:57] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my $total = 3; for @denominators[0..^$prec].rotor(2) -> ($a, $b) { $total = $total + 4/$a - 4/$b; }; $total }; say pi(1000)

[17:57] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´3.1415926533405445‚ê§¬ª

[17:58] <[Coke]> m: say (1..*).rotor(3=>-1).flat[^10]

[17:58] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1 2 3 3 4 5 5 6 7 7)‚ê§¬ª

[17:59] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my Rat $total = 3.Rat; for @denominators[0..^$prec].rotor(2) -> ($a, $b) { $total = $total + Rat(4/$a) - Rat(4/$b); }; $total }; say pi(10000)

[17:59] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Type check failed in assignment to $total; expected Rat but got Num (3.1415766854350315e0)‚ê§  in sub pi at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:59] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my Rat $total = 3.Rat; for @denominators[0..^$prec].rotor(2) -> ($a, $b) { $total = Rat($total + 4/$a - 4/$b); }; $total }; say pi(10000)

[17:59] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´3.141592920353982451‚ê§¬ª

[18:00] <Kaiepi> m: sub pi(Int $prec) { my @denominators = lazy gather { my Int $x = 2; loop { take [*] ($x..$x+2).list; $x += 2; } }; my Rat $total = 3.Rat; for @denominators[0..^$prec].rotor(2) -> ($a, $b) { $total = Rat($total + 4/$a - 4/$b); }; $total }; say e ** (i * pi(10000))

[18:00] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´-0.9999999999999645-2.6676418928249877e-07i‚ê§¬ª

[18:00] <Kaiepi> m: say (1..*).rotor(3 => -1).rotor(3).first(10)

[18:01] <Kaiepi> m: say (1..*).list.rotor(3 => -1).rotor(3).first(10)

[18:01] <Kaiepi> m: say (1..*).list.rotor(3 => -1).rotor(3).first

[18:01] <Kaiepi> evalable6, say 1

[18:01] <evalable6> Kaiepi, rakudo-moar 4d7cdc0f4: OUTPUT: ¬´1‚ê§¬ª

[18:01] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(timeout)¬ª

[18:01] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´((1 2 3) (3 4 5) (5 6 7))‚ê§¬ª

[18:02] <Kaiepi> evalable6, say (2..*).rotor(3 => -1).first(10)

[18:02] <Kaiepi> evalable6, say (2..*).list.rotor(3 => -1).first(10)

[18:02] <Kaiepi> evalable6, [1,2,3].first(2)

[18:02] <evalable6> Kaiepi, rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(signal SIGHUP) ¬´timed out after 25 seconds¬ª¬ª

[18:03] <evalable6> Kaiepi, rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(signal SIGHUP) ¬´timed out after 25 seconds¬ª¬ª

[18:03] <evalable6> Kaiepi, rakudo-moar 4d7cdc0f4: OUTPUT: ¬´¬ª

[18:03] <Kaiepi> evalable6, say [1,2,3].first(3)

[18:03] <evalable6> Kaiepi, rakudo-moar 4d7cdc0f4: OUTPUT: ¬´3‚ê§¬ª

[18:03] <Kaiepi> evalable6, say [1,2,3].first(0..^3)

[18:03] <evalable6> Kaiepi, rakudo-moar 4d7cdc0f4: OUTPUT: ¬´1‚ê§¬ª

[18:03] <Kaiepi> evalable6, say [1,2,3].head(3)

[18:03] <evalable6> Kaiepi, rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1 2 3)‚ê§¬ª

[18:04] * [Coke] wonders why rotor takes a pair to indicate the special arg, and not a named parameter

[18:04] <Kaiepi> what does the pair in rotor do?

[18:04] <Kaiepi> the way you used it

[18:06] <[Coke]> If the element of @cycle is a Pair instead, the key of the pair specifies the length of the return sublist, and the value the gap between sublists; negative gaps produce overlap:

[18:06] <[Coke]> (from the docs)

[18:07] <Kaiepi> ah

[18:09] <[Coke]> ah, because you can have multiple pair rules also, duh.

[18:09] <[Coke]> m: say (^100).rotor: 3=>-1, 2=>2

[18:09] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´((0 1 2) (2 3) (6 7 8) (8 9) (12 13 14) (14 15) (18 19 20) (20 21) (24 25 26) (26 27) (30 31 32) (32 33) (36 37 38) (38 39) (42 43 44) (44 45) (48 49 50) (50 51) (54 55 56) (56 57) (60 61 62) (62 63) (66 67 68) (68 69) (72 73 74) (74 75) (78 79 80) (8‚Ä¶¬ª

[18:10] *** tobs` left
[18:11] <Xliff> m: say (1..*).rotor(3=>-1).flat[^12]

[18:11] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1 2 3 3 4 5 5 6 7 7 8 9)‚ê§¬ª

[18:11] <Xliff> Now why couldn't I come up with that?!

[18:11] <Xliff> m: say (1..*).rotor(3=>-2).flat[^12]

[18:11] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(1 2 3 2 3 4 3 4 5 4 5 6)‚ê§¬ª

[18:12] <[Coke]> beacus rotor is weird.

[18:12] <Xliff> LOL!

[18:13] *** ExtraCrispy left
[18:16] *** Kaiepi left
[18:18] <[Coke]> *because

[18:18] <Xliff> I got it.

[18:19] *** zakharyas joined
[18:19] *** vrurg left
[18:20] *** p6bannerbot sets mode: +v zakharyas

[18:20] <simple> what's the perl6 equivalent of perl5's " $var =~ /(.begin .* .end)/smg " ?

[18:20] <simple> i tried m:smg

[18:20] <simple> but that adverb inot allowed on m

[18:22] *** Kaiepi joined
[18:22] *** p6bannerbot sets mode: +v Kaiepi

[18:25] *** rindolf left
[18:25] *** sauvin left
[18:25] <[Coke]> . already matches \n, so you don't need s

[18:25] <simple> ah

[18:26] <[Coke]> you're not using ^ or $, so you don't need m even on the p5 side

[18:26] <simple> well, same error, just one less letter now

[18:26] <simple> oh, true

[18:27] <simple> that's all better then =)  thanks

[18:27] <[Coke]> m: say "i have a hat" ~~ m:g/ 'ha' /

[18:27] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(ÔΩ¢haÔΩ£ ÔΩ¢haÔΩ£)‚ê§¬ª

[18:27] <[Coke]> :)

[18:37] *** lucasb left
[18:42] <Xliff> Is this Rakudo's way of telling me I have an endless loop? -- "Failed to register: Timeout was reached"

[18:45] <Xliff> If there's an endless look, it's in compile then. Weird!

[18:47] *** molaf left
[18:55] <[Coke]> failed to register doesn't sound rakudo specific.

[19:02] <Xliff> Actually, no it was GTK, weirdly enough.

[19:02] <Xliff> What's the best way to get the types passed into a signature capture?

[19:02] <Xliff> Ala "method something(|c)

[19:03] <Xliff> m: sub cap(|c) { 

[19:03] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub cap(|c) {7‚èè5<EOL>‚ê§¬ª

[19:03] <Xliff> m: sub cap(|c) { say c.^name }

[19:03] <camelia> rakudo-moar 4d7cdc0f4: ( no output )

[19:03] <Xliff> m: sub cap(|c) { say c.^name }; cap(1, 2, 'A')

[19:03] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Capture‚ê§¬ª

[19:03] <Xliff> m: sub cap(|c) { say c.signature.^name }; cap(1, 2, 'A')

[19:03] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´No such method 'signature' for invocant of type 'Capture'‚ê§  in sub cap at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:04] <Xliff> m: sub cap(|c) { .^name say for c }; cap(1, 2, 'A')

[19:04] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3sub cap(|c) { .^name7‚èè5 say for c }; cap(1, 2, 'A')‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        sta‚Ä¶¬ª

[19:05] <Xliff> m: sub cap(|c) { .^name.say for c }; cap(1, 2, 'A')

[19:05] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Int‚ê§Int‚ê§Str‚ê§¬ª

[19:11] <SmokeMachine> Xliff: its working!!! \o/ https://www.irccloud.com/pastebin/FdZRxIbF/

[19:12] <SmokeMachine> Xliff: getting home, Ill make a nice oo frontend to it!

[19:15] *** zacts left
[19:20] <Xliff> SmokeMachine: :-O \o/

[19:20] <Xliff> NICE!

[19:24] * SmokeMachine needs to go back to Red...

[19:25] * SmokeMachine is loosing to much time playing with bernalang...

[19:26] *** guifa joined
[19:26] *** p6bannerbot sets mode: +v guifa

[19:28] <guifa> When calling a grammar with an action, the grammar can refer directly to its action class with .actions but is there any built-in way to do the reverse (reference the grammar in the action)

[19:29] <masak> no

[19:29] <masak> what is it you want to do, more broadly?

[19:30] <SmokeMachine> can you, from the Grammar, do something like `self.actions.grammar = self`?

[19:34] <guifa> Just trying to better separate grammar from actions.  I'm writing a pretty extensive/customizable brainfuck interpreter using grammar/actions, the main stumbling block I've had is handling the loops.  Their inner code has to parsed separate from regular code to avoid early execution, but then sent back to get parsed as runnable code, which is easily done with the actions code is embedded in the grammar, but no really elegant way to do

[19:36] <masak> hm

[19:36] <masak> what you do sounds like a bit of a grammar code smell, if you don't mind me saying

[19:37] <masak> notably, I'm pretty sure it should be possible to parse everything with one pass, and then not again

[19:37] <masak> that should be your goal, too ;)

[19:37] <guifa> Single pass would be optimal haha, but I'm a bit stumped at doing that

[19:38] <guifa> I mean, obviously there are more efficient ways to process BF, but I wanted to try to learn Grammar/Actions and it's actually be pretty useful as a exercise in learning

[19:41] <SmokeMachine> guifa: I've been doing something like it... not with brainfuck, but with bernalang... https://github.com/FCO/bernalang

[19:42] <SmokeMachine> guifa: here is my grammar: https://github.com/FCO/bernalang/blob/master/lib/Berna/Grammar.pm6

[19:43] <SmokeMachine> Xliff: Im thinking of doing a machine-code bernalang^^ compiler using gccjit... :)

[19:44] *** zakharyas left
[19:46] <guifa> I'm glancing it over really fast but it looks like you're parsing/compiling and then doing a separate execution phase yeah?

[19:47] <masak> oh, you're not? then I understand your predicament better

[19:47] <masak> so your actions are basically an interpreter?

[19:47] <guifa> Indeed.  BF is sufficiently simple enough that you can do that.  When it parses a +, it increments the value at the point as the action right then and there.

[19:49] *** cfa left
[19:49] <masak> I think you'll find the order the actions fire is a bad fit for your interpreter idea

[19:50] <masak> with the example of a +, at the point the action sees it, you don't know if that + is inside a loop (and should be deferred) or not inside one (and shouldn't)

[19:50] <masak> because actions fire bottom-up, and loops (kinda) are more top-down :)

[19:50] <guifa> Yeah.  That was something that took me a bit to work around, but I did get it all working.

[19:50] <masak> heh :)

[19:51] <masak> don't really know what to say except it seems you're working against the grain

[19:51] <guifa> Probably :-)

[19:51] <masak> I think you'll find it's a lot easier to write a brainfuck *compiler* than a brainfuck *interpreter* using grammar/actions

[19:53] <guifa> Possibly.  I might do a later modification for that.  My real goal wasn't so much learning to write compilers, but just getting a good feel for grammar rules that adequately catch stuff, and then attaching some actions.  I had tortured myself way back when making an Applescript Brainfuck interpreter so figured what the hell ;-)

[19:53] <guifa> but as is typical for me, once I start, I like to see how far I can take it

[19:54] <masak> moritz++ might amend what I'm about to say here, but...

[19:54] <masak> ...I find actions work best when you exploit the fact that they're bottom-up, rather than try to fight it

[19:54] *** sena_kun left
[19:54] <masak> it's one of those things, I realize that nowadays I've started to *think* that way, and I try to do stuff bottom-up even outside of actions sometimes

[19:56] *** xinming_ joined
[19:56] *** p6bannerbot sets mode: +v xinming_

[19:58] *** abraxxa1 joined
[19:58] <moritz> I agree

[19:59] *** xinming left
[19:59] *** p6bannerbot sets mode: +v abraxxa1

[20:00] <masak> second more advanced rule (for free, even though nobody asked):

[20:00] *** El_Che joined
[20:00] <masak> never *ever* fire a side effect before you know you're in the right rule

[20:00] <guifa> Yeah, the only way to handle (AFAICT) a loop is to do a separate inner code rule from the main rule that doesn't have actions attached, and then inside the action call .parse(:rule<maincode>, :actions(self.actions) repeatedly.  For anything more complex than BF I don't think an interpreter inside of the grammar itself is really feasible just because you'd have to include both executing and not executing rules for all code

[20:00] *** p6bannerbot sets mode: +v El_Che

[20:01] <masak> also, you're multiple-parsing, which is maybe fine for an interpreter, but just generally problematic :)

[20:01] <masak> how do you handle missing `]` ?

[20:02] <guifa> At the moment, I don't.  The joys of BF is there's no single specification (which did let me have fun with some adverbs)

[20:03] <guifa> :8bit :16bit :32bit for instance is a cool way to take advantage of the adverbs

[20:05] *** rindolf joined
[20:06] *** p6bannerbot sets mode: +v rindolf

[20:06] <masak> yes, that reads quite well :)

[20:09] <guifa> I originally included ? as a built in dump command, but then I figured it'd be cooler as a grammar extension.  I get that the not-best-practices in handling the loop but‚Ä¶ I think I can make a pretty cool tutorial with it to show off some of the nicer features of p6 (while including a warning that it's probably best not to make an interpreter out of grammars in the real world ;-) )

[20:09] *** El_Che left
[20:11] *** domidumont left
[20:11] *** El_Che joined
[20:12] *** p6bannerbot sets mode: +v El_Che

[20:16] *** El_Che left
[20:18] *** El_Che joined
[20:19] *** p6bannerbot sets mode: +v El_Che

[20:23] *** jmerelo left
[20:32] *** guifa left
[20:34] *** MorayJ left
[20:38] <scovit> Hello, can anybody here help me to make an object of type Signature? Not a literal

[20:39] <moritz> I can try :-)

[20:40] <moritz> what's your question?

[20:40] <masak> m: say Signature.new

[20:40] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´()‚ê§¬ª

[20:40] <masak> ...do I win an internet? :P

[20:41] <moritz> m: say :().^name

[20:41] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Signature‚ê§¬ª

[21:12] *** jast left
[21:18] *** rindolf left
[21:18] *** patrickb left
[21:22] *** sena_kun joined
[21:22] <Xliff> m: use MONKEY-SEE-NO-EVAL; my $m = 42; EVAL 'say $m';

[21:22] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´42‚ê§¬ª

[21:22] *** p6bannerbot sets mode: +v sena_kun

[21:26] *** molaf joined
[21:27] *** p6bannerbot sets mode: +v molaf

[21:28] *** abraxxa1 left
[21:29] *** Kaiepi left
[21:32] *** lizmat left
[21:40] <sena_kun> can someone point me to how names declared as enum values are promoted to types? I am reading https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L4851 but no much luck. When I am constructing an enum using MOP with base_type == Int and with a simple `add_enum_value($str-int-pair))`, is type created? If yes, how can I get it to set it a name and export appropriately? If not, how can I create one?

[21:40] <sena_kun> As in...

[21:40] <sena_kun> m: enum Normal <One Two>; say Two;

[21:41] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Two‚ê§¬ª

[21:41] <sena_kun> but...

[21:41] <sena_kun> m: my $new-enum = Metamodel::EnumHOW.new_type(name => 'custom', base_type => Int); $new-enum.^add_enum_value((Two => 2)); $new-enum.^add_role(Enumeration); $new-enum.^add_role(NumericEnumeration); $new-enum.^compose; say $new-enum.^enum_values;

[21:41] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´{Two => 2}‚ê§¬ª

[21:43] <sena_kun> `Two` here is just a Str key, not a type object that can be assigned to e.g. `my Custom $aa`.

[21:45] <sena_kun> looking at how `add_enum_value` implementation simply binds pair value to an internal storage, it seems that I have to create each "type object" manually.

[21:48] *** zachk joined
[21:48] <simple> m: (5802..5830).map( {.chr} )[*-10..*-5]

[21:48] <camelia> rakudo-moar 4d7cdc0f4: ( no output )

[21:48] *** p6bannerbot sets mode: +v zachk

[21:49] <simple> =(

[21:50] <scovit> sorry moritz, I explain

[21:51] <scovit> I have a slurpy argument

[21:51] <scovit> I want to use the types passed in this slurpy

[21:51] <scovit> to setup a signature that corresponds to it

[21:51] *** zachk left
[21:52] *** zachk joined
[21:52] *** cherryh.freenode.net sets mode: +v zachk

[21:52] *** p6bannerbot sets mode: +v zachk

[21:52] <scovit> Signature.new(params => (do for @args { $_.WHAT }), returns => Str)

[21:52] <scovit> something like this

[21:52] <scovit> but probably needs nqp

[21:53] <scovit> i need this signature to pass it to NativeCall

[21:53] *** Kaiepi joined
[21:53] <scovit> I do not care about performances now (I plan to add caching)

[21:54] *** p6bannerbot sets mode: +v Kaiepi

[21:54] *** Cabanossi left
[21:56] *** Cabanossi joined
[21:56] *** p6bannerbot sets mode: +v Cabanossi

[21:56] <Kaiepi> is it possible to hotpatch a module?

[21:58] *** tadzik joined
[21:59] *** p6bannerbot sets mode: +v tadzik

[22:01] *** rindolf joined
[22:02] *** p6bannerbot sets mode: +v rindolf

[22:09] *** Kaypie joined
[22:09] *** Kaiepi left
[22:10] *** p6bannerbot sets mode: +v Kaypie

[22:11] *** melezhik joined
[22:11] *** p6bannerbot sets mode: +v melezhik

[22:12] <Xliff> Does $a infix:<eqv> $b do the equivalent of $a.eqv($b) ??

[22:15] <sena_kun> m: 1.eqv(5)

[22:15] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´No such method 'eqv' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:15] <Xliff> m: 1 eqv 5

[22:15] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "eqv" in expression "1 eqv 5" in sink context (line 1)‚ê§¬ª

[22:15] <sena_kun> Xliff, if $a type has `eqv` method implemented using infix op, maybe?

[22:16] <Xliff> m: role Comp { method eqv(Cool $b) { $b.eqv(self) } }; my $a = 1 but Comp; my $b = 2 but comp; say $a eqv $b

[22:16] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    comp used at line 1. Did you mean 'chomp', 'comb'?‚ê§‚ê§¬ª

[22:16] <Xliff> m: role Comp { method eqv(Cool $b) { $b.eqv(self) } }; my $a = 1 but Comp; my $b = 2 but Comp; say $a eqv $b

[22:16] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´False‚ê§¬ª

[22:17] <Xliff> m: role Comp { method eqv(Cool $b) { $b.eqv(self) } }; my $a = 1 but Comp; my $b = 1 but Comp; say $a eqv $b

[22:17] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´True‚ê§¬ª

[22:18] <Xliff> m: my ($a, $b) = (1, 1); $a eqv $b;

[22:18] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "eqv" in expression "$a eqv $b" in sink context (line 1)‚ê§¬ª

[22:18] <Xliff> m: my ($a, $b) = (1, 1); say $a eqv $b;

[22:18] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´True‚ê§¬ª

[22:18] <Xliff> m: say 1 eqv 5

[22:18] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´False‚ê§¬ª

[22:18] <Xliff> OK. So not as elegant as I was expecting, but...

[22:22] <Xliff> m: my $gtext = 'grammar Phil'; my $name = ($gtext ~~ /^^ \s* 'grammar' \s+ (\w+) // [])[0]; say $name

[22:22] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Cannot resolve caller Numeric(Regex:D: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:22] <Xliff> m: my $gtext = 'grammar Phil'; my $name = ($gtext ~~ /^ \s* 'grammar' \s+ (\w+) // [])[0]; say $name

[22:22] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Cannot resolve caller Numeric(Regex:D: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:22] <Xliff> m: my $gtext = 'grammar Phil'; my $name = ($gtext ~~ /^ \s* 'grammar' \s+ (\w+)/ // [])[0]; say $name

[22:22] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´ÔΩ¢PhilÔΩ£‚ê§¬ª

[22:22] <Xliff> m: my $gtext = 'grammar Phil'; my $name = ($gtext ~~ /^ \s* 'grammar' \s+ (\w+)/ // [])[0].Str; say $name

[22:22] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Phil‚ê§¬ª

[22:23] <Xliff> m: my $gtext = 'rammar Phil'; my $name = ($gtext ~~ /^ \s* 'grammar' \s+ (\w+)/ // [])[0].Str; say $name

[22:23] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Use of uninitialized value of type Any in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[22:25] <Xliff> m: my $gtext = 'grammar Phil'; my $name = ($gtext ~~ /^^ \s* 'grammar' \s+ (\w+)/ // [])[0].Str; say $name

[22:25] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Phil‚ê§¬ª

[22:33] *** sena_kun left
[22:33] *** sena_kun joined
[22:34] *** p6bannerbot sets mode: +v sena_kun

[22:36] *** rindolf left
[22:36] *** rindolf joined
[22:37] *** p6bannerbot sets mode: +v rindolf

[22:38] <rindolf> hi all

[22:38] <sena_kun> o/

[22:38] <rindolf> how was the squashathon?

[22:40] <sena_kun> testneeded tickets... Some were closed, I think. :)

[22:41] <AlexDaniel> not very active actually

[22:41] <AlexDaniel> there were many easy tickets but people didn't feel like resolving any of them

[22:41] <AlexDaniel> maybe every month is too often, I dunno :)

[22:42] <sena_kun> any ideas on how to imitate nqp::rebless op from high level code? I really don't want to do `use nqp` and copy-paste what rakudo does.

[22:56] <Kaypie> i'm surprised i was considered to have made the most/best prs during the squashathon in order to win the camelia plushie

[22:56] <Kaypie> i only made one pullreq and it was like 5 lines

[22:56] *** molaf left
[23:02] <sena_kun> next one may be more popular. :)

[23:03] *** Ven`` joined
[23:04] *** p6bannerbot sets mode: +v Ven``

[23:06] <scovit> I do not care about performances now (I plan to add caching)

[23:06] <scovit> sorry

[23:15] <jnthn> sena_kun: nqp::rebless is used by .^mixin, so that's probably what you want

[23:15] <jnthn> (This is in turn what's used to implement does and but)

[23:16] <jnthn> (Which is also what would normally be used)

[23:21] <sena_kun> jnthn, so if I want to turn `1` into my created enum type, it'd be like... hmm. `but` gives me `Int+{foo-enum}`, which fails a check against plain `my custom $a` type. 

[23:22] <sena_kun> I have found https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L3900 but not yet sure how to recreate it without nqp. :)

[23:23] <jnthn> sena_kun: You don't want to do that :)

[23:23] <jnthn> m: enum A <B C D>; say A(1)

[23:23] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´C‚ê§¬ª

[23:23] <jnthn> Just use the coercion form like that

[23:25] <sena_kun> jnthn, well, I have to create enum without using explicit `enum Foo <>`. And I hope to do it without EVAL. This is what I "want" to do. :)

[23:26] <jnthn> Ah

[23:26] <sena_kun> or, rather, I can create it, but values.

[23:26] <sena_kun> that's the issue.

[23:26] <sena_kun> as in, well...

[23:27] <sena_kun> I can create a type, but `add_enum_value` MOP call just does a binding, so I cannot just bind some Int as a value, it'll break typing.

[23:27] <jnthn> Can you do $the-enum-type-object.new($the-integer) ?

[23:27] <sena_kun> so I looked at how rakudo creates stuff and found out that e.g. Int value can be reblessed to newly created enum type(not even composed yed as I get it), but... Nope, I can't.

[23:28] <sena_kun>  my $new-enum = Metamodel::EnumHOW.new_type(name => 'custom', base_type => Int); $new-enum.new(1).say;

[23:28] <sena_kun> m: my $new-enum = Metamodel::EnumHOW.new_type(name => 'custom', base_type => Int); $new-enum.new(1).say;

[23:28] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´P6opaque: must compose custom before allocating‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:28] <sena_kun> not how it would work.

[23:28] <jnthn> Try $new-enum.^compose before the .new call

[23:28] <jnthn> Or at least .^compose_repr

[23:29] <sena_kun> jnthn, will it be possible to still `^add_enum_value` after compose? That's why I avoided it... Let me try...

[23:29] <jnthn> I think yes, and if there's issues you can perhaps always re-compose

[23:29] <jnthn> I wonder if we should provide some nice MOP method to save people figuring this all out...

[23:30] <sena_kun> woooah

[23:30] <sena_kun> ^compose_repr

[23:30] <sena_kun> ugh

[23:30] <sena_kun> sorry. *compose_repr has helped. \o/

[23:30] <jnthn> yay ;)

[23:30] <jnthn> *:)

[23:30] <sena_kun> m:  my $new-enum = Metamodel::EnumHOW.new_type(name => 'custom', base_type => Int); $new-enum.^compose_repr; my \Two = $new-enum.new(2); say Two;

[23:30] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´2‚ê§¬ª

[23:30] <sena_kun> m:  my $new-enum = Metamodel::EnumHOW.new_type(name => 'custom', base_type => Int); $new-enum.^compose_repr; my \Two = $new-enum.new(2); say Two.^name;

[23:30] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´custom‚ê§¬ª

[23:31] <sena_kun> one less issue towards the goal. \o/

[23:31] <sena_kun> jnthn, thanks a lot!

[23:32] <jnthn> Welcome :)

[23:33] <scovit> m: https://gist.github.com/scovit/d328be9817eef73fbe98cc98f99ee3a3

[23:33] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´Signature $sign = :(Int $roof, Str $banter --> Str)‚ê§¬ª

[23:34] <scovit> no idea what I did here!

[23:34] <scovit> but it might wojust some cargo cult code, it might work

[23:40] *** rindolf left
[23:46] *** melezhik left
[23:53] *** vrurg joined
[23:54] *** p6bannerbot sets mode: +v vrurg

[23:55] <scovit> m: https://gist.github.com/scovit/d328be9817eef73fbe98cc98f99ee3a3

[23:55] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´(signal SEGV)Signature $sign = :(Str $text --> int32)‚ê§¬ª

[23:56] <scovit> is working on my mac

[23:58] <scovit> :(

[23:59] <scovit> ok, works on mac

[23:59] <scovit> dies on linux

