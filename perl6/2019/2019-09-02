[00:02] *** irced joined
[00:05] <irced> hi when I launch a process via Proc::Async.new and start it, the process appears to be killed when my script exits, even after I call start. Maybe it is not starting before the script exits? or maybe it is actually killing the process upon exit? how can I ensure that a process is fired and forgotten upon exit?

[00:05] <tellable6> 2019-08-26T22:03:34Z #perl6 <guifa> irced: Take a look at the name token.  Two things: 

[00:08] <irced> guifa: thanks for your feedback on subparse on august 26

[00:09] <irced> got that tellable6?

[00:10] <AlexDaniel> irced: no, because guifa is here :)

[00:10] *** |oLa| left
[00:10] <AlexDaniel> but you can use .tell to force it to pass the message

[00:10] * irced rubs his eyes.

[00:10] <irced> AlexDaniel: thanks!

[00:11] <irced> .tell guifa: thanks for your feedback on subparse on august 26

[00:11] <tellable6> irced, I'll pass your message to guifa

[00:11] <AlexDaniel> irced: it's not a perl6 issue, I'm pretty sure you'll see the same behavior everywhere else

[00:11] <irced> basically, with Proc::Async (or any process launcher) I want a script that launches the process and exits immediately.

[00:12] <irced> i have a bash script that with & proceeds even after exit

[00:12] <AlexDaniel> it doesn't, try closing your terminal

[00:13] <irced> AlexDaniel: well basically i want to reproduce what I can do when calling my bash script from an open terminal session but use perl6 not the bash script.

[00:14] <irced> AlexDaniel: that is call the perl6 script instead of the bash script and get the same behavior that & after the command results in

[00:14] <irced> AlexBaniel: from my bash shell, while the terminal is still open.

[00:15] <irced> so I have a command, which specifically is the sox play command that in a bash script I can do play whatever.wav &

[00:15] <irced> or actually it's play.whatever.wav 2>/dev/null &

[00:15] <irced> anyway, the bash script will start playing as expected and in the meantime exit and return me to my bash prompt

[00:16] <irced> can a perl script also exit to my bash prompt and still allow the process to start-finish ?

[00:16] <irced> perl6

[00:16] * irced maybe should be looking at exec

[00:17] <AlexDaniel> irced: no you should be looking for a way to detach the child process

[00:17] <irced> AlexDaniel: sounds about right.

[00:17] * irced starts thinking.

[00:18] <AlexDaniel> see this for some info: https://unix.stackexchange.com/a/148698/221501

[00:18] * irced starts reading.

[00:20] <AlexDaniel> but that's not it

[00:20] <irced> i dunno, could be something there

[00:21] <irced> there's disown for one

[00:21] <irced> disown [-h] [-ar] [jobspec ... | pid ...]

[00:21] * irced eyes the pid.

[00:22] <irced> then there's nohup

[00:22] <irced> disown is a builtin, that might be an obstacle .. .. ..

[00:22] <AlexDaniel> no, cuz you don't need disown‚Ä¶

[00:23] * irced decides to roll a nohup.

[00:23] * irced starts editing.

[00:24] <AlexDaniel> I guess it would've been easier if we had `fork`, but we don't

[00:24] <AlexDaniel> maybe nativecall and popen? I'm not sure, really‚Ä¶

[00:25] <irced> AlexDaniel: yes, that is certainly an avenue to consider!

[00:25] <irced> AlexDaniel: an asynchronous native call could be just the thing.

[00:26] * irced has not lost faith in nohup / disown as of yet.

[00:28] * irced moves on to disown utilizing pid

[00:29] <AlexDaniel> no-no, hold on

[00:29] <AlexDaniel> you have to understand what's going on there exactly

[00:30] <AlexDaniel> but have you tried something like this? perl6 -e 'start { run <nohup play -n synth 3 triangle 800-500> }; sleep 0.1'

[00:31] <AlexDaniel> should also work with Proc::Async

[00:31] <AlexDaniel> `sleep` is there to make sure it doesn't exit before the process is started, with Proc::Async you can handle it better

[00:32] * irced eyes the sleep command.

[00:32] <AlexDaniel> the sound lasts much longer than 0.1s

[00:32] <irced> i was thinking about that

[00:32] <irced> lessee

[00:32] * irced smiles.

[00:33] *** Sgeo__ joined
[00:36] *** Sgeo_ left
[00:37] <AlexDaniel> honestly, I myself don't quite get it. So the parent exits, and nohup prevents SIGHUP from terminating the process, and that's it?

[00:38] <AlexDaniel> I thought it required a bit more than just letting the process become an orphan

[00:38] <AlexDaniel> anyway, someone probably knows much more about this stuff and will likely scream at my once they read these messages :)

[00:39] <irced> AlexDaniel: interesting, i have confirmed it works with a short sound sample but not with Proc::Async (that is it won't work with Proc::Async).trying now with a longer sound

[00:43] <irced> wow, it is working with a longer sound sample

[00:43] * irced smiles.

[00:44] * irced starts making some adjustments.

[00:44] <irced> AlexDaniel: thanks for your creative input on this!

[00:44] <irced> I'll see if I can speak to the nohup part of it after I try without.

[00:45] <irced> so, nohup is just another way of suppressing the standard outputs it appears

[00:46] * irced continues to tweak.

[00:47] <irced> but without nohup run bombs if the :err adverb .. hmm

[00:50] <irced> even with nohup. so this worked but nohup (without any arguments anyway) outputs some bleeps which means it is only satisfying part of my objective of reproducing play whateversound.wav 2>/dev/null &

[00:50] * irced reconsiders async and grabbing the pid and operating on it with the builtin disown

[00:53] <irced> note that the process seems to run if I don't try to redirect err

[00:59] <irced> ok, for some reason things are behaving as expected even with super short sound samples (whereas before it wasn't but i wasn't doing much differently). anyway, i settled on the following:

[00:59] <irced> my $proc = Proc::Async.new('play', $cmd-arg, :err); my $h = '/dev/null'.IO.open(:w); $proc.bind-stderr($h); $proc.start;

[01:01] <irced> now another can of worms is i have to type stty sane afterwards doh!

[01:01] <irced> solved it, added :out adverb (which apparently is used by SoX to make thing sane ?? üòÉ)

[01:02] <irced> so fingers crossed looks like with your help discussing it i arrived at a solution. thanks again AlexDaniel.

[01:07] * irced added $proc.bind-stdout($h)

[01:08] <irced> i think i just pulled a nohup üòÉ

[01:11] *** molaf left
[01:24] *** molaf joined
[01:33] *** rindolf left
[01:51] *** hythm joined
[02:01] <hythm> hello, Where can I find a list of all modules available in json format? https://ecosystem-api.p6c.org/projects.json this doesn't seem to have all available modules

[02:04] *** Manifest0 left
[02:04] *** Manifest0 joined
[02:04] *** kurahaupo joined
[02:06] *** adu joined
[02:13] <vrurg> hythm: try modules.perl6.org

[02:13] <vrurg> https://modules.perl6.org/search/?q=json

[02:17] <hythm> vrurg: sorry about the confusion, this lists all modules have tagged with "json", I did not mean all json modules, I meant to get list of all the modules, similar to this https://ecosystem-api.p6c.org/projects.json (this does not have every available modules in module.perl6.org) 

[02:20] <vrurg> hythm: Oh, I see. I confused myself. I'm afraid, ecosystem is the fullest list you could get.

[02:20] <AlexDaniel> hythm: what about https://ecosystem-api.p6c.org/projects.json and https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan.json

[02:21] <AlexDaniel> hythm: ah, now I see you linked projects.json :) I think cpan.json is the one you are missing

[02:22] <AlexDaniel> hythm: if both these files together are not full please let me know as that's exactly what I use in Blin https://github.com/perl6/Blin/blob/30d894c679f1d0b716b40f282c65701f3f7c5e46/bin/blin.p6#L35-L38

[02:22] <hythm> Thanks AlexDaniel, checking...

[02:31] *** Cabanossi left
[02:35] *** Cabanossi joined
[03:13] *** ravenous_ joined
[03:18] *** ravenous_ left
[03:27] *** AlexDani` joined
[03:31] *** AlexDaniel left
[03:48] *** AlexDani` is now known as AlexDaniel

[03:48] *** AlexDaniel left
[03:48] *** AlexDaniel joined
[04:00] *** molaf left
[04:32] *** irced left
[04:35] *** proc joined
[04:39] *** Black_Ribbon left
[04:39] <proc> What's the correct way to use a variable within a character class?  I've been trying to do something similar to the following which isn't working:  "my $aa = 'abc'; my $bb = 'yabba'; say so $bb ~~ /<[$aa]>/;"

[04:40] <proc> an error get printed that says:  "Repeated character (a) unexpectedly found in character class"

[04:40] <Grinnz> =~ is the match binder not ~~

[04:41] <Grinnz> anyway that looks right to me

[04:42] <proc> when attempting to replace the ~~ with a =~ I get "Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~"

[04:45] <proc> There's a thread on the perl6-users mailing list w/ this very question.  There have been lots of guesses, but no one actually knows how to do it.  I just figured I ask here.

[04:53] *** MilkmanDan left
[04:54] *** MilkmanDan joined
[04:55] <hythm> how to write an array content to file without stratifying it first? the below code outputs "a     1", instead of "{a => 1}"

[04:55] <hythm> m: my %h = :1a; my @a = %h; 'test'.IO.spurt: @a; say slurp 'test';

[04:56] <evalable6> hythm, rakudo-moar 0f3c59c77: OUTPUT: ¬´(exit code 1) Failed to open file /home/bisectable/git/whateverable/test: Read-only file system‚ê§  in block <unit> at /tmp/Ie09BxRR_B line 1‚ê§‚ê§¬ª

[04:56] <hythm> stringifying*

[04:57] <Grinnz> whoops, didn't see the channel name :)

[04:58] <proc> s'ok

[05:07] <discord6> <Aearnus> hythm: try .perl

[05:08] <discord6> <Aearnus> m: my %h = :1a; %h.perl.say

[05:08] <evalable6> Aearnus, rakudo-moar 0f3c59c77: OUTPUT: ¬´{:a(1)}‚ê§¬ª

[05:08] <discord6> <Aearnus> Oh. Huh.

[05:08] <discord6> <Aearnus> Thought that did what you wanted

[05:10] *** MilkmanDan left
[05:10] <hythm> Aearnus: Thanks anyway, yeah it did not work, the array contains JSON and .perl makes from-json not able to parse it

[05:11] <hythm> I think looping through the array and :append to the files works

[05:11] <hythm> file*

[05:11] <hythm> may be not

[05:12] *** MilkmanDan joined
[05:14] *** aborazmeh joined
[05:14] *** aborazmeh left
[05:14] *** aborazmeh joined
[05:17] *** [particle] joined
[05:18] *** [particle]1 left
[05:21] <Xliff> irced++: You might want to consider adding that to the docs!

[05:34] *** [particle] left
[05:44] *** cpan-p6 left
[05:45] *** cpan-p6 joined
[05:45] *** cpan-p6 left
[05:45] *** cpan-p6 joined
[05:46] *** [particle] joined
[05:51] *** [particle]1 joined
[05:52] *** [particle] left
[05:52] *** kurahaupo left
[05:55] *** kurahaupo joined
[05:59] <aearnus[m]> https://codegolf.stackexchange.com/a/191104 how does this work?

[06:00] <aearnus[m]> i've never seen the `~m/<regex>/` syntax before

[06:00] <aearnus[m]> also... where is the argument there?

[06:03] *** jmerelo joined
[06:03] *** [particle] joined
[06:04] <moritz> m/.../ matches against $_

[06:04] *** [particle]1 left
[06:05] <aearnus[m]> ahh

[06:10] *** cgfbee joined
[06:22] *** [particle]1 joined
[06:24] *** [particle] left
[06:24] *** antoniogamiz joined
[06:25] <antoniogamiz> o(

[06:25] <aearnus[m]> o/

[06:26] <jmerelo> hi!

[06:27] <jmerelo> antoniogamiz: checking out [Coke]'s report?

[06:27] <antoniogamiz> yep

[06:27] <jmerelo> antoniogamiz: just seen that. Let's wait for the answer. Although we can test 0.3.3 right now, and check if it's OK (maybe it's not)

[06:27] <jmerelo> Leaving for $dayjob

[06:28] *** jmerelo left
[06:28] <antoniogamiz> ok

[06:32] <Xliff> Where is [Coke]'s report?

[06:32] <antoniogamiz> https://github.com/finanalyst/pod-cached/issues/25

[06:34] <Xliff> Ah.

[06:37] *** [particle]1 left
[06:47] *** abraxxa joined
[06:49] <tobs> proc: chances are interpolation into a character class "literal" is not supported, but I don't know for sure either. The regex interpolation mechanism sits further outside:

[06:50] <tobs> m: my @aa = 'a' .. 'f'; say "0123def" ~~ /^ <{ "<[0..9 @aa.join() ]>" }>+ $/  # based on https://stackoverflow.com/a/47265426

[06:50] <evalable6> tobs, rakudo-moar 0f3c59c77: OUTPUT: ¬´ÔΩ¢0123defÔΩ£‚ê§¬ª

[06:52] <tobs> m: my @aa = flat '0' .. '9', 'a' .. 'f'; "0123def" ~~ /^ @aa+ $/  # proc: or if you have the entire character class in an array anyway, you can use that in matching

[06:52] <evalable6> tobs, rakudo-moar 0f3c59c77: OUTPUT: ¬´¬ª

[06:52] <tobs> m: my @aa = flat '0' .. '9', 'a' .. 'f'; say "0123def" ~~ /^ @aa+ $/

[06:52] <evalable6> tobs, rakudo-moar 0f3c59c77: OUTPUT: ¬´ÔΩ¢0123defÔΩ£‚ê§¬ª

[07:02] <Xliff> \o tobs

[07:02] *** hythm left
[07:03] *** domidumont joined
[07:08] *** dolmen joined
[07:12] <tobs> Xliff: o/

[07:25] *** reach_satori left
[07:31] *** robertle_ joined
[07:31] *** ravenous_ joined
[07:37] *** AlexDaniel left
[07:43] *** dolmen left
[07:51] *** pmurias joined
[08:06] *** adu left
[08:08] *** reach_satori joined
[08:10] *** sena_kun joined
[08:27] *** Kaiepi left
[08:31] <El_Che> last commenter on the renaming thread is trolling, right?

[08:34] *** ravenous_ left
[08:39] *** reach_satori left
[08:39] *** chloekek joined
[08:41] *** zakharyas joined
[08:43] *** antoniogamiz left
[08:53] *** chloekek left
[08:59] <pmurias> El_Che: hard to distinguish weird and trolling

[08:59] <El_Che> good point

[09:06] <tadzik> I don't think the comments in that thread have value anymore :)

[09:07] <El_Che> I wouldn't mind the weird, but it's clear that some commenters haven't read the thread or even the title of the issue

[09:07] *** pmurias left
[09:09] *** zakharyas left
[09:11] *** chloekek joined
[09:17] <cpan-p6> New module released to CPAN! LibXML (0.0.1) by 03WARRINGD

[09:25] *** pecastro joined
[09:33] *** pat_js joined
[09:34] *** pmurias joined
[09:45] <Geth> ¬¶ doc: 9065702106 | (JJ Merelo)++ | 2 files

[09:45] <Geth> ¬¶ doc: Removes tests that are now in Documentable, refs #2996

[09:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9065702106

[09:45] <Geth> ¬¶ doc: 21546ff149 | (JJ Merelo)++ | META6.json

[09:45] <Geth> ¬¶ doc: Eliminates from META6

[09:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/21546ff149

[09:47] <Geth> ¬¶ doc: 1e1b878fc3 | (JJ Merelo)++ | util/travis-test.sh

[09:47] <Geth> ¬¶ doc: Eliminates htmlify.p6 from test refs #2996

[09:47] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1e1b878fc3

[09:47] *** Itaipu left
[09:48] *** dolmen joined
[09:48] *** aborazmeh left
[09:49] *** Itaipu joined
[09:56] <pmurias> vrurg: ping

[09:57] <pmurias> vrurg: if we want to get rid of the code gen step for the js makefile, what would be a good plan to do it?

[09:58] <pmurias> vrurg: I guess I should fix the build after the revision changes first

[09:58] *** pat_js left
[09:58] <pmurias> vrurg: and then just replacing the script with it's output and cleaning it up?

[09:58] *** dolmen left
[10:06] *** dolmen joined
[10:11] *** dolmen left
[10:11] *** dolmen joined
[10:16] *** rindolf joined
[10:16] *** rindolf left
[10:16] *** kamog joined
[10:18] *** netrino joined
[10:24] *** Kaiepi joined
[10:25] *** antoniogamiz joined
[10:29] *** pat_js joined
[10:37] *** antoniogamiz left
[10:58] *** dolmen left
[11:08] *** matiaslina left
[11:08] *** Matthew[m] left
[11:08] *** AlexDaniel` left
[11:12] *** AlexDaniel` joined
[11:19] *** chloekek left
[11:26] *** BlackChaosNL[m] joined
[11:26] *** EuAndreh[m] joined
[11:26] *** rba[m] joined
[11:26] *** lance_w[m] joined
[11:26] *** sergiotarxz[m] joined
[11:26] *** TravisRt2botio[m joined
[11:26] *** Matthew[m] joined
[11:26] *** Guest55169 joined
[11:26] *** unclechu joined
[11:26] *** aearnus[m] joined
[11:26] *** Demos[m] joined
[11:26] *** matiaslina joined
[11:26] *** mack[m]1 joined
[11:26] *** Seance[m] joined
[11:26] *** uzl[m] joined
[11:26] *** folex joined
[11:26] *** CIAvash joined
[11:26] *** xliff[m] joined
[11:32] *** domidumont left
[11:34] *** domidumont joined
[11:36] *** rindolf joined
[11:47] <El_Che> https://www.heise.de/developer/meldung/Perl-Entwickler-ringen-um-einen-neuen-Namen-fuer-Perl-6-4510571.html

[11:47] <El_Che> for those that read German

[11:47] <El_Che> (or know of Google Translate)

[11:49] <daxim> https://github.com/perl6/problem-solving/issues/81#issuecomment-526596745  # the uncharitable interpretation is that strika is trying to fool us.  what is the charitable interpretation for that post?

[11:50] *** jaldhar left
[11:52] <El_Che> according google translate, the servian word is –†–∞–∫

[11:53] <El_Che> Raku is probably phonetically similar to the word in cyrilic

[11:54] <El_Che> it has the sound of the first 3 letters (long a), but no u

[11:54] <jast> I believe that refers to the animal, not to the medical thing? just from looking at the list of translations on translate

[11:54] <El_Che> both

[11:54] <jast> oh yeah, I can't read, never mind :}

[11:55] <El_Che> as in several languages

[11:55] <El_Che> and the constallation

[11:55] <Xliff> m: class A { method a { $*CLASS.^name.say } }; A.a

[11:55] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´Failure‚ê§¬ª

[11:55] <El_Che> because it looks like the animal

[11:55] *** scimon joined
[11:55] <El_Che> (with some imagination like all constillations :) )

[11:55] <jast> yeah, I just try to avoid making assumptions about one language from another

[11:55] <El_Che> good principle

[11:55] <Xliff> m: class A { method a { ::?CLASS.^name.say } }; A.a

[11:55] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´A‚ê§¬ª

[11:56] <jast> anyway, I guess the charitable interpretation is that the response was a little too literal? it's not *exactly* raku

[11:57] <daxim> -u is the masculine dative ending, so raku would mean e.g. (with) cancer

[11:57] <jast> also I suspect it will be quite hard to find a combination of syllables none of which has a negative association in *some* language ;)

[11:57] <daxim> certainly

[11:57] <jast> I see

[11:58] <El_Che> in estonian is tranlating as "cell"

[11:58] <El_Che> that would be pretty cool

[11:58] <El_Che> OO to the next level

[11:59] <jast> cells, the true microservices

[12:00] <moritz> now we can have powerpoints with cell microscopy instead of container ships. I'm all for it :D

[12:04] <El_Che> A fork could be called "mitosis"

[12:06] *** dolmen joined
[12:13] <Xliff> m: "Hello".substr(0, 1).say

[12:13] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´H‚ê§¬ª

[12:13] <Xliff> m: "Hello".substr(0).say

[12:13] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´Hello‚ê§¬ª

[12:14] <Xliff> m: "Hello".comb[0].say

[12:14] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´H‚ê§¬ª

[12:15] <Xliff> Which is faster? .comb or .substr?

[12:15] <El_Che> write a for loop and time it?

[12:15] <El_Che> I would bet on substr

[12:16] <Xliff> k

[12:16] <sena_kun> benchable6, help

[12:16] <benchable6> sena_kun, Like this: benchable6: f583f22,HEAD my $a = ‚Äòa‚Äô x 2¬π‚Å∂; for ^1000 {my $b = $a.chop($_)} # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Benchable

[12:16] <Xliff> m: "Hello".comb[0] ^10000; say now - INIT now

[12:16] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´WARNINGS for /tmp/aAoEKZoCrG:‚ê§0.00396207‚ê§Useless use of "^" in expression "[0] ^10000" in sink context (line 1)‚ê§¬ª

[12:16] <Xliff> m: "Hello".comb[0] for ^10000; say now - INIT now

[12:16] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´0.0454392‚ê§¬ª

[12:16] <Xliff> m: "Hello".substr(0, 1) for ^10000; say now - INIT now

[12:16] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´0.0135736‚ê§¬ª

[12:16] <timotimo> i would also bet on substr

[12:16] <Xliff> And substr is da winnah

[12:17] <Xliff> .comb is less typing, tho. :(

[12:17] <timotimo> m: say "foo".chop

[12:17] <evalable6> timotimo, rakudo-moar b380fd207: OUTPUT: ¬´fo‚ê§¬ª

[12:17] <timotimo> not quite

[12:17] <El_Che> (that's the one jnthn used on his performance talk when comparing to p5 regex :P )

[12:17] <sena_kun> benchable6, compare HEAD "Hello".comb[0] for ^1000 ||| "Hello".substr(0, 1) for ^1000

[12:17] <benchable6> sena_kun, starting to benchmark the 1 given commit

[12:17] <benchable6> sena_kun, https://gist.github.com/3639712f3d2464b2ac1217000b72604c

[12:17] <sena_kun> Xliff, ^

[12:19] <timotimo> 1000 is really not enough by far

[12:19] <timotimo> benchable6, compare HEAD "Hello".comb[0] for ^100_000 ||| "Hello".substr(0, 1) for ^100_000

[12:19] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:19] <benchable6> timotimo, https://gist.github.com/01ca063d4c79fccca19084b71d5512ca

[12:20] <timotimo> there the difference is a lot more, about 10x

[12:20] <sena_kun> timotimo, it still was correct with who is faster in general. :P

[12:20] <timotimo> well, yeah

[12:21] <timotimo> benchable6, compare HEAD "Hello".comb[0] for ^1_000_000 ||| "Hello".substr(0, 1) for ^1_000_000

[12:21] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:21] <benchable6> timotimo, ¬¶HEAD: ¬´Benchmark: ‚ê§¬´timed out after 10 seconds¬ª¬ª

[12:21] <timotimo> wow, only 10 seconds?

[12:21] <timotimo> benchable6, compare HEAD "Hello".comb[0] for ^300_000 ||| "Hello".substr(0, 1) for ^300_000

[12:21] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:21] <benchable6> timotimo, https://gist.github.com/740e1275a59a4fd9ad12a78e843fa30b

[12:22] <timotimo> wow, that is very wobbly

[12:22] <Xliff> Which one is 0 and which one is 1?

[12:23] <timotimo> the first is 0, the second is 1

[12:23] <Xliff> It's kinda hard to tell from the output.

[12:23] <timotimo> agreed

[12:27] *** pmurias left
[12:30] <scimon> So I'm thinking the longer the string the worse comb with get (as unless the compiler is smart it's going to make an array of all the characters). 

[12:30] <scimon> s/with/will/

[12:33] <scimon> Wierdly... not as bad as I'd thought 

[12:33] <scimon> m: p6 '( "a" x 4294967295 ).substr(0,1).say;say now - BEGIN now'

[12:33] <evalable6> scimon, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/jqjCHPDJ1x‚ê§Undeclared routine:‚ê§    p6 used at line 1‚ê§‚ê§¬ª

[12:33] <scimon> m: ( "a" x 4294967295 ).substr(0,1).say;say now - BEGIN now

[12:33] <evalable6> scimon, rakudo-moar b380fd207: OUTPUT: ¬´a‚ê§0.0123537‚ê§¬ª

[12:33] <scimon> m: ( "a" x 4294967295 ).comb[0].say;say now - BEGIN now

[12:33] <evalable6> scimon, rakudo-moar b380fd207: OUTPUT: ¬´a‚ê§0.0114297‚ê§¬ª

[12:33] <jnthn> I think comb works lazily

[12:34] *** pmurias joined
[12:34] <scimon> (p6 is my alias for perl6 -e and 4294967295 is apparently the longest string length)

[12:34] <scimon> jnthn: Looks like it! Awesome.

[12:34] <scimon> I did love this error message "Repeat count (100000000000) cannot be greater than max allowed number of graphemes 4294967295"

[12:37] <scimon> (But... if you want the 10 millionth character? Yeah... use substr)

[12:37] <scimon> m: ( "a" x 4294967295 ).substr(9_999_999,1).say;say now - BEGIN now

[12:37] <evalable6> scimon, rakudo-moar b380fd207: OUTPUT: ¬´a‚ê§0.01058806‚ê§¬ª

[12:37] <scimon> m: ( "a" x 4294967295 ).comb[10_000_000].say;say now - BEGIN now

[12:37] <evalable6> scimon, rakudo-moar b380fd207: OUTPUT: ¬´(signal SIGHUP) ¬´timed out after 10 seconds¬ª¬ª

[12:43] <scimon> (Takes 20 seconds on my laptop. The other takes 0.009.)

[12:44] <timotimo> ha

[12:45] <timotimo> perhaps the comb iterator can be taught to skip, or maybe you need to .skip manually to make it fast

[12:45] <timotimo> m: ( "a" x 4294967295 ).skip(9_999_999).head(1).say;say now - BEGIN now

[12:45] <evalable6> timotimo, rakudo-moar b380fd207: OUTPUT: ¬´()‚ê§0.0110685‚ê§¬ª

[12:45] <timotimo> oh look

[12:45] <timotimo> it can skip very quickly

[12:45] <timotimo> d'oh

[12:45] <timotimo> m: ( "a" x 4294967295 ).comb.skip(9_999_999).head(1).say;say now - BEGIN now

[12:45] <evalable6> timotimo, rakudo-moar b380fd207: OUTPUT: ¬´(a)‚ê§3.6842543‚ê§¬ª

[12:46] <timotimo> that's still not terribly slow, but pretty slow none the less

[12:46] *** reach_satori joined
[12:53] <scimon> Really depends on what you want to do I think (but yeah that's a LOT better than it was).

[12:58] *** lucasb joined
[13:23] *** reach_satori left
[13:25] <SmokeMachine> m: ( "a" x 4294967295 ).comb.last.say; say now - BEGIN now

[13:25] <evalable6> SmokeMachine, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) No such method 'last' for invocant of type 'Seq'. Did you mean any of these?‚ê§    Hash‚ê§    List‚ê§    Rat‚ê§    flat‚ê§‚ê§  in block <unit> at /tmp/f0UexesTI2 line 1‚ê§‚ê§¬ª

[13:25] <SmokeMachine> m: ( "a" x 4294967295 ).comb.tail.say; say now - BEGIN now

[13:26] <evalable6> SmokeMachine, rakudo-moar b380fd207: OUTPUT: ¬´(signal SIGHUP) ¬´timed out after 10 seconds¬ª¬ª

[13:26] <SmokeMachine> m: ( "a" x 4294967295 ).comb.skip(*-1).say; say now - BEGIN now

[13:26] <evalable6> SmokeMachine, rakudo-moar b380fd207: OUTPUT: ¬´(signal SIGHUP) ¬´timed out after 10 seconds¬ª¬ª

[13:27] <SmokeMachine> m: ( "a" x 4294967295 ).comb.skip(*-1).head.say; say now - BEGIN now

[13:27] <evalable6> SmokeMachine, rakudo-moar b380fd207: OUTPUT: ¬´(signal SIGHUP) ¬´timed out after 10 seconds¬ª¬ª

[13:27] *** antoniogamiz joined
[13:32] *** antoniogamiz left
[13:34] <KotH> stupid question: is there an equivalent of the camel book for perl6?

[13:35] *** pat_js left
[13:39] <Xliff> m: use NativeCall; my Str $s = 'Hello'; my $sp = nativecast(Pointer, $s); say $sp;

[13:39] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) Native call cast expected return type with CPointer, CStruct, CArray, or VMA‚Ä¶¬ª

[13:39] <evalable6> Xliff, Full output: https://gist.github.com/634c6c9e7d5d61410f1c6a7b7b97f4fd

[13:39] <Xliff> m: use NativeCall; my str $s = 'Hello'; my $sp = nativecast(Pointer, $s); say $sp;

[13:39] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) Native call cast expected return type with CPointer, CStruct, CArray, or VMA‚Ä¶¬ª

[13:40] <evalable6> Xliff, Full output: https://gist.github.com/039d7b5b2963a245efd80819087521fd

[13:40] <Kaiepi> so in a chat bot i'm writing, i'm doing a huge refactor and now it deadlocks when i try to use a command. i have a feeling it's because it's trying to lock a lock while it's already locked, but it's not very easy to tell where that's actually happening

[13:40] <Kaiepi> is there a way to debug this?

[13:40] <Xliff> jnthn: If you have a CArray[Str] that's pulling data from C, do you have to worry about freeing the contents?

[13:46] *** pat_js joined
[13:48] <Xliff> m: $*STDIN.fd.say

[13:48] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) Dynamic variable $*STDIN not found‚ê§  in block <unit> at /tmp/LlGNk0_Ymq line 1‚ê§‚ê§¬ª

[13:48] <Xliff> m: $*IN.fd.say

[13:48] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) No such method 'fd' for invocant of type 'IO::Handle'‚ê§  in block <unit> at /tmp/3cxLq0TPnV line 1‚ê§‚ê§¬ª

[13:48] <Xliff> m: $*IN.native-descriptor

[13:48] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´¬ª

[13:48] <Xliff> m: $*IN.native-descriptor.say

[13:48] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´0‚ê§¬ª

[13:49] <Xliff> m: $*ERR.native-descriptor.say

[13:49] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´2‚ê§¬ª

[13:49] <Xliff> m: $*OUT.native-descriptor.say

[13:49] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´1‚ê§¬ª

[13:49] <scimon> KotH: Probably Perl6 Deep Dive at the moment. 

[13:50] <jnthn> Kaiepi: Run under debugger, pause execution, look at the call stacks, if it's a real lock

[13:51] <Kaiepi> perl6-debug-m jnthn?

[13:52] <jnthn> No, that doesn't understand threads

[13:52] <jnthn> The MoarVM remote debugger; I use it with Comma but timotimo++ wrote a command line client too and I guess it can also do what you want

[13:52] <jnthn> Also, https://gist.github.com/jnthn/25349dee44f20b932c8663dbe504c39e may help you too

[13:53] <jnthn> Xliff: Not immediately sure, sorry.

[13:55] *** antoniogamiz joined
[13:55] <timotimo> that's outstanding

[13:56] *** mowcat joined
[13:57] *** ravenous_ joined
[14:00] <KotH> scimon: thanks!

[14:03] *** [particle] joined
[14:03] *** ravenous_ left
[14:03] *** robertle_ left
[14:05] *** robertle_ joined
[14:09] *** cheese16 joined
[14:12] *** antoniogamiz left
[14:13] *** antoniogamiz joined
[14:13] <antoniogamiz> it looks like comma does not recognize routines declared in others modules

[14:13] <antoniogamiz> it should detect 'lives-ok' and 'ok' from Test module, shouldn't it?

[14:15] <jnthn> antoniogamiz: If you `use Test` then yes; check in File > Project Structure that a valid Perl 6 interpreter is selected though, that's the usual problem.

[14:18] <cheese16> moritz: GPW is a great idea! Will be there. Currently working on a p5 script to talk about maybe. Marketing team is considering a booth (probably not gonna happen, but I appreciate that they are considering it). just so you know. BTW some stuff on the website is still labeled "GPW 2019" and the 2019 archive is not so easy to open, because the drop 

[14:18] <cheese16> down does not have a 2020 entry (at least when i last looked) and it is only loaded onchange IIRC. looking forward to the schedule / submission deadlines etc. until then I will probably be passively following here as always ;)  best regards to all

[14:18] <tellable6> 2019-08-29T18:06:42Z #perl6 <moritz> cheese16 come to the German Perl Workshop 2020, I'll be there (and I'm one of the organizers) :D

[14:19] <proc> What's the proper way to use variables within a character class? I.E.:  my $aa = 'abc'; my $bb = 'yabba'; say so $bb ~~ /<[$aa]>/;

[14:19] *** cheese16 left
[14:20] <antoniogamiz> jnthn: oh, you're right, thanks :)

[14:25] *** aborazmeh joined
[14:25] *** aborazmeh left
[14:25] *** aborazmeh joined
[14:32] *** Kaiepi left
[14:34] <sena_kun> m: my $aa = '<[abc]>'; my $bb = 'aaa'; say $bb ~~ /<$aa>+/;

[14:34] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´ÔΩ¢aaaÔΩ£‚ê§¬ª

[14:35] *** chloekek joined
[14:36] *** molaf joined
[14:36] <sena_kun> m: my $aa = 'abc'; my $bb = 'aaa'; say $bb ~~ /<$_>/ given "<[$aa]>"; say $aa;

[14:36] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´ÔΩ¢aaaÔΩ£‚ê§abc‚ê§¬ª

[14:36] *** Kaiepi joined
[14:36] <sena_kun> proc, ^

[14:40] <proc> thanks sena_kun.  How would you handle the case if you had multiple character classes that were defined in variables?

[14:41] *** pmurias left
[14:41] <sena_kun> proc, e.g. `my $a = 'abc'; my @b = 'def'`?

[14:42] *** Sgeo_ joined
[14:42] <sena_kun> m: my $aa = 'abc'; my $cc = 'def'; my $bb = 'aaaeee'; say $bb ~~ /<$_>/ given "<[{join $aa, $cc}]>";

[14:42] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´ÔΩ¢aaaeeeÔΩ£‚ê§¬ª

[14:42] <sena_kun> though in reality I'd use a separate variable to do joining

[14:43] *** pmurias joined
[14:43] <sena_kun> because doing it on every match (?) is a very, very bad idea

[14:43] <proc> like:  my $aa = 'abc'; my $bb = 'def'; my $cc = 'yabda'; say so $bb ~~ /<[$aa]><[$bb]>/;

[14:43] <proc> err

[14:43] <proc> like:  my $aa = 'abc'; my $bb = 'def'; my $cc = 'yabda'; say so $cc ~~ /<[$aa]><[$bb]>/;

[14:43] <proc> something like that

[14:44] <sena_kun> m: my $aa = 'abc'; my $cc = 'def'; my $bb = 'aaaeee'; say $bb ~~ /<$_>/ given "<[$aa]>+<[$bb]>+";

[14:44] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´ÔΩ¢aaaeeeÔΩ£‚ê§¬ª

[14:44] <proc> in perl5, you could simply enbed the variables directory within the character class.  Trying to wrap my head around how to do it in perl6.

[14:44] <proc> ah ok

[14:44] <sena_kun> well, you can always just construct regex by hands and interpolate it

[14:45] *** Sgeo__ left
[14:46] <proc> cool.  Thanks.

[14:46] *** Kaiepi left
[14:47] <sena_kun> m: my @foo := <a b c>; say 'aeee' ~~ /@foo/;

[14:47] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[14:47] <sena_kun> proc, ^ this one should feel more natural. :)

[14:47] <sena_kun> and is probably to be cheaper

[14:47] *** Kaiepi joined
[14:48] <sena_kun> m: my @foo = <a b c>; say 'abbbbccceee' ~~ /@foo+/;

[14:48] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´ÔΩ¢abbbbcccÔΩ£‚ê§¬ª

[14:48] <sena_kun> https://docs.perl6.org/language/regexes#Regex_interpolation helps a lot

[14:50] <antoniogamiz> can someone try to execute 'zef install Pod::To::Cached' please?

[14:50] <proc> Thanks for the information.  This question was posted on the #perl6-users mailing list and no one truly knows the answer.  I just figured I'd pop in here and ask the horses mouth as it were.

[14:50] <proc> Thanks for the info.  Also, I read that page and it clearly states "$variable	Interpolates stringified contents of variable literally." ..... which I took to mean   <[$variable]> would work as expected.

[14:51] <vrurg> antoniogamiz: installed ok

[14:51] <antoniogamiz> ok, thanks! can you tell me your perl6 version?

[14:51] <vrurg> antoniogamiz: the HEAD

[14:51] <antoniogamiz> mm ok, thanks a lot for your help :)

[14:51] <sena_kun> proc, well, interpolating @foo is the suitable answer, I hope. :) as for why `<[$foo]>` does not work - it treats `$` and the rest as literals, so no interpolation, but interpolating a @ does roughtly the same thing for this case

[14:52] <sena_kun> *roughly

[14:52] <sena_kun> antoniogamiz, installs on 07

[14:52] <proc> sena_kun yeah cool.  Thanks.

[14:53] <antoniogamiz> sena_kun: installs on 07?

[14:53] *** tester87 joined
[14:53] <sena_kun> antoniogamiz, Pod::To::Cached installs fine on 2019.07.

[14:54] <antoniogamiz> ah ok, thanks for testing it out

[14:57] *** tester87 left
[15:02] *** chloekek left
[15:04] <proc> sena_kun - I wonder if it's worth updating the documentation to make the mention that character classes interpret their contents literally with an example showing how to circumvent it using `given`.

[15:05] <proc> only because, this specific thing had quite a few people stumped.  Myself included.

[15:06] <sena_kun> proc, I would not do that. The reason is that `given` thing is a hack I quickly put up because I did not remember exactly how @ interpolation works, was too lazy to look up the docs, and made it work "by force" using a more generic approach (which is usually bad). @ is documented and that's the way I'd prefer like 100% of time.

[15:07] *** aborazmeh left
[15:07] <sena_kun> The real question here is how to make "Interpolating variables" section more prominent to people.

[15:10] <proc> I'd agree.  People coming from other languages like perl5 for example, would expect [$var] to work, so it needs to be clear.  As of right now, @var doesn't really come to mind.

[15:11] <proc> and even the documentation mentions $var would get interpreted....yet doesn't in this specific case.....that's gotta count for something.

[15:11] <sena_kun> I am not sure how many other languages other than perl5 allow to do it so easily with programmers being aware about it, but probably due to my lack of knowledge.

[15:11] <jnthn> Might be worth a mention in character classes noting that they don't interpolate anything, and with a link to the docs on how to do that

[15:12] <sena_kun> but there is 5 to 6 guide - https://docs.perl6.org/language/5to6-nutshell <- maybe it wants some tweaks, imho.

[15:13] <proc> When people look up regex documentation they aren't hitting that page.   They are hitting the regex page.  Should really be there IMHO.

[15:14] <sena_kun> proc, can't really object that. A ticket for https://github.com/perl6/doc/ or a patch will be welcome. :)

[15:15] *** pmurias left
[15:15] <proc> alright.  ;)

[15:18] *** ChoHag left
[15:25] *** ChoHag joined
[15:26] *** jmerelo joined
[15:27] <jmerelo> squashable6: next

[15:27] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon in 3 days and ‚âà12 hours (2019-09-07 UTC-12‚åÅUTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:27] <jmerelo> Everyone's ready for the squashathon?

[15:28] *** robertle_ left
[15:42] *** Sgeo__ joined
[15:45] *** Sgeo_ left
[15:49] *** domidumont left
[16:07] *** mowcat left
[16:07] *** dolmen left
[16:25] *** antoniogamiz left
[16:26] *** scimon left
[16:27] *** Cabanossi left
[16:30] *** Cabanossi joined
[16:32] *** dolmen joined
[16:35] *** domidumont joined
[16:39] *** dolmen left
[16:40] <uzl[m]> I thought the Github renaming issue was locked to the members who will make the final decision. It seems the issue is getting some trolling comments that adds nothing to the discussion. And furthermore almost everything that had to be said about it had been said already üòÖÔøΩ.

[16:40] <Grinnz> it was locked for a week or two, then reopened

[16:40] *** ChoHag left
[16:41] *** ChoHag joined
[16:42] <Grinnz> there will always be trolling comments, the more common problem seems to be comments from people who can't read the first post :/

[16:44] <uzl[m]> Oh, I see. It seems they had a kneejerk reaction and didn't even bothered going through the previous comments.

[16:45] <Grinnz> well, i don't blame people for not catching up on the massive amount of comments

[16:45] <Grinnz> but at least understand the opening premise :)

[16:48] *** dolmen joined
[16:51] *** pat_js left
[16:51] <tadzik> amazing how there's suddenly all these people interested in Perl 6's future :P

[16:55] *** domidumont left
[17:00] *** dolmen left
[17:01] *** dolmen joined
[17:04] <Xliff> Is there a way to fire a method in a role when it is composed to an object?

[17:04] <Xliff> m: role A { }; my $a = 1 but A;

[17:04] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´¬ª

[17:05] <Xliff> I want a method to fire off when $a is assigned. Is that possible?

[17:06] *** dolmen left
[17:09] *** reach_satori joined
[17:09] *** aborazmeh joined
[17:09] *** aborazmeh left
[17:09] *** aborazmeh joined
[17:21] <Xliff> m: class A { method a { say callframe(1).perl }; }; class B { method a { A.a } }; B.a

[17:21] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´CallFrame.new(annotations => {:file("/tmp/dH86KGRNcl"), :line("1")}, my => {"\$!" => Nil, ‚Ä¶¬ª

[17:21] <evalable6> Xliff, Full output: https://gist.github.com/82ac6a78b63800cbab65b8c8cb91fc57

[17:21] <Xliff> m: class A { method a { callframe(1) }; }; class B { method a { A.a.code.^name.say } }; B.a

[17:21] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´Method‚ê§¬ª

[17:21] <Xliff> m: class A { method a { callframe(1) }; }; class B { method a { A.a.code.name.say } }; B.a

[17:21] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´a‚ê§¬ª

[17:21] <Xliff> m: class A { method a { callframe(1) }; }; class B { method a { A.a.code.name.package.say } }; B.a

[17:21] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) No such method 'package' for invocant of type 'Str'‚ê§  in method a at /tmp/6eR8xruaab line 1‚ê§  in block <unit> at /tmp/6eR8xruaab line 1‚ê§‚ê§¬ª

[17:22] <Xliff> m: class A { method a { callframe(1) }; }; class B { method a { A.a.code.package.say } }; B.a

[17:22] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(B)‚ê§¬ª

[17:23] *** AlexDaniel joined
[17:23] *** AlexDaniel left
[17:23] *** AlexDaniel joined
[17:28] *** pecastro left
[17:30] <Xliff> m: class X::My::Type::Œ©::NotListening is Exception { }; throw X::My::Type::Œ©::NotListening (message => 'Lalalalala');

[17:30] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/LBoahEjCzC‚ê§Two ter‚Ä¶¬ª

[17:30] <evalable6> Xliff, Full output: https://gist.github.com/df621bfd9202ba5c56ba85082e910ffa

[17:30] <Xliff> m: class X::My::Type::Œ©::NotListening is Exception { }; throw X::My::Type::Œ©::NotListening(message => 'Lalalalala');

[17:30] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/cOXqd6uUaj‚ê§Undeclared routine:‚ê§    throw used at line 1. Did you mean 'THROW'?‚ê§‚ê§¬ª

[17:30] <Xliff> m: class X::My::Type::Œ©::NotListening is Exception { }; X::My::Type::Œ©::NotListening(message => 'Lalalalala').throw;

[17:30] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) Cannot coerce to X::My::Type::Œ©::NotListening with named arguments‚ê§  in block <unit> at /tmp/ydQ7yhzikh line 1‚ê§‚ê§¬ª

[17:31] <Xliff> m: class X::My::Type::Œ©::NotListening is Exception { }; X::My::Type::Œ©::NotListening.new(message => 'Lalalalala').throw;

[17:31] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) Died with X::My::Type::Œ©::NotListening‚ê§  in block <unit> at /tmp/oLY0RNpuU5 line 1‚ê§‚ê§¬ª

[17:38] *** molaf left
[17:38] *** pecastro joined
[17:40] <Xliff> m: class A { method a { * }; }; A.new;

[17:40] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´¬ª

[17:40] <Xliff> m: class A { method a { * }; }; A.new.a

[17:40] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´¬ª

[17:40] <Xliff> m: class A { method a { * }; }; A.new.a.say

[17:40] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´*‚ê§¬ª

[17:40] <Xliff> m: class A { method a { }; }; A.new.a.say

[17:40] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´Nil‚ê§¬ª

[17:41] *** vrurg left
[17:58] *** proc left
[18:02] *** wildtrees joined
[18:10] *** vrurg joined
[18:11] *** jmerelo left
[18:15] *** chloekek joined
[18:33] *** ravenous_ joined
[18:37] *** khisanth_ left
[18:39] *** aborazmeh left
[18:53] *** khisanth_ joined
[18:55] <rindolf> Hi all!

[18:57] <rindolf> eval: my @nums = (1, 20, 333, 40, 55); my @sums=(0); for @nums -> $n { @sums.push(@sums[*-1]+$n}; @sums

[18:57] <evalable6> rindolf, rakudo-moar b380fd207: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Hj8xQxRpjT‚ê§Unable ‚Ä¶¬ª

[18:57] <evalable6> rindolf, Full output: https://gist.github.com/0c0fb1e733744e421d52ea3dd3cd4aa6

[18:57] <rindolf> eval: my @nums = (1, 20, 333, 40, 55); my @sums=(0); for @nums -> $n { @sums.push(@sums[*-1]+$n);}; @sums

[18:57] <evalable6> rindolf, rakudo-moar b380fd207: OUTPUT: ¬´WARNINGS for /tmp/aLip2M8f4F:‚ê§Useless use of @sums in sink context (line 1)‚ê§¬ª

[18:58] <rindolf> eval: my @nums = (1, 20, 333, 40, 55); my @sums=(0); for @nums -> $n { @sums.push(@sums[*-1]+$n);}; say @sums

[18:58] <evalable6> rindolf, rakudo-moar b380fd207: OUTPUT: ¬´[0 1 21 354 394 449]‚ê§¬ª

[18:58] *** [Sno] joined
[18:58] <rindolf> is there a more idiomatic way to write it? tried ddg

[19:02] <sena_kun> m: my @nums = (1, 20, 333, 40, 55); gather { my $sum = 0; for @nums -> $n { take $sum += $n } }[4].say;

[19:02] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´449‚ê§¬ª

[19:02] <sena_kun> m: my @nums = (1, 20, 333, 40, 55); my $seq = gather { my $sum = 0; for @nums -> $n { take $sum += $n } }; .say for $seq; # can work with $seq Seq lazily...

[19:02] <evalable6> sena_kun, rakudo-moar b380fd207: OUTPUT: ¬´(1 21 354 394 449)‚ê§¬ª

[19:03] <sena_kun> rindolf, ^

[19:04] <rindolf> sena_kun: ah

[19:04] <sena_kun> imho, this one is cleaner, though has some penalty for laziness, to avoid that just a loop with $sum variable will be a bit easier to grasp than @sums.push(@sums[*-1]+$n)

[19:05] <rindolf> sena_kun: ok

[19:06] <nine> m: my @nums = (1, 20, 333, 40, 55); @nums.map($ += *).say

[19:06] <evalable6> nine, rakudo-moar b380fd207: OUTPUT: ¬´(1 21 354 394 449)‚ê§¬ª

[19:06] <nine> rindolf: ^^^

[19:07] <rindolf> nine: thanks !

[19:09] <cpan-p6> New module released to CPAN! BDD::Behave (0.0.1) by 03GDONALD

[19:13] *** MasterDuke joined
[19:19] <CIAvash> m: my @nums = (1, 20, 333, 40, 55); say [\+] @nums

[19:19] <evalable6> CIAvash, rakudo-moar b380fd207: OUTPUT: ¬´(1 21 354 394 449)‚ê§¬ª

[19:20] *** veesh left
[19:27] *** Cabanossi left
[19:27] *** netrino left
[19:36] *** molaf joined
[19:37] *** Black_Ribbon joined
[19:42] *** pmurias joined
[19:42] *** Cabanossi joined
[19:46] *** kaare__ joined
[19:46] *** moritz joined
[19:47] *** a3f joined
[19:55] <cpan-p6> New module released to CPAN! Channel::Pauseable (1.0.0) by 03THINCH

[20:06] *** sena_kun left
[20:11] *** epony left
[20:13] *** Guest71418 joined
[20:17] *** mack[m]1 left
[20:17] *** sergiotarxz[m] left
[20:17] *** Harzilein left
[20:21] *** Guest71418 left
[20:21] *** sergiotarxz[m] joined
[20:22] *** aborazmeh joined
[20:22] *** aborazmeh left
[20:22] *** aborazmeh joined
[20:23] *** mack[m]1 joined
[20:23] *** mack[m]1 left
[20:23] *** mack[m]1 joined
[20:25] <Kaiepi> argh, i really don't like how IO::Socket::INET handles URIs, but i didn't think to include anything remotely related to that in my grant, so i'll be stuck waiting until i'm finished before i can really do anything about it

[20:26] *** aborazmeh left
[20:28] *** aborazmeh joined
[20:28] *** aborazmeh left
[20:28] *** aborazmeh joined
[21:00] <Xliff> Anyone else know how to get a role method to automatically call a method when it is composed into a class?

[21:02] *** ravenous_ left
[21:04] *** wildtrees left
[21:04] *** reach_satori_ joined
[21:04] *** reach_satori left
[21:04] <discord6> <Aearnus> Xliff: maybe TWEAK on the role?

[21:04] <discord6> <Aearnus> don't the roles have to get instantiated when they're composed

[21:05] <Xliff> will try TWEAK

[21:06] <Xliff> m: role A { submethod TWEAK { say 'BOO!' }; }; my $a = 1 but A;

[21:06] <evalable6> Xliff, rakudo-moar b380fd207: OUTPUT: ¬´BOO!‚ê§¬ª

[21:06] <Xliff> \o/

[21:06] <Xliff> Aearnus++

[21:07] <discord6> <Aearnus> :D

[21:08] *** lichtkind joined
[21:14] *** mowcat joined
[21:29] *** abc3354 joined
[21:30] <abc3354> Hi 

[21:30] <abc3354> Just here to test the bridge

[21:30] <discord6> <abc3354> Sorry for the spam

[21:31] *** abc3354 left
[21:31] *** krunen left
[21:31] *** krunen joined
[21:32] *** aborazmeh left
[21:35] *** Cabanossi left
[21:45] <discord6> <RaycatWhoDat> Running into a bit of a problem.

[21:46] <discord6> <RaycatWhoDat> I'm trying to pass a list of integers as a single parameter.

[21:46] *** Cabanossi joined
[21:46] <discord6> <RaycatWhoDat> But I want the subroutine to treat it as a list.

[21:47] <discord6> <RaycatWhoDat> What step am I missing?

[21:48] <discord6> <RaycatWhoDat> https://gist.github.com/RayMPerry/e38337cc48e389fe15796d5642871a19

[21:54] <tobs> m: (1..25).tail.say

[21:54] <evalable6> tobs, rakudo-moar b380fd207: OUTPUT: ¬´25‚ê§¬ª

[21:55] <tobs> RaycatWhoDat: tail only returns the very last element by default. You probably expected it to return a list of everything except the head?

[21:55] <tobs> and that int does not pass as an array of int

[21:56] <discord6> <abc3354> It seems to be be the problem for me too @RaycatWhoDat ?

[21:57] *** netrino joined
[21:57] <tobs> but if you pass a parameter "how much tail?", it will give you something sufficiently positional

[21:58] <tbrowder> .tell jjmerelo doc v2 is looking good structurally, but i wish i could launch it local

[21:58] <tellable6> tbrowder, I'll pass your message to jmerelo

[21:58] <tobs> m: sub f (@numbers) { say @numbers.head; f @numbers.tail(*-1) #`(everything but the head) if @numbers }; f 1..10

[21:58] <evalable6> tobs, rakudo-moar b380fd207: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§Nil‚ê§¬ª

[22:05] *** Itaipu_ joined
[22:06] *** Cabanossi left
[22:06] *** Itaipu left
[22:11] <discord6> <RaycatWhoDat> Ahh, gotcha.

[22:11] <discord6> <RaycatWhoDat> Thanks!

[22:17] <discord6> <RaycatWhoDat> Now, to reduce the lines...

[22:18] *** Cabanossi joined
[22:21] *** grumble joined
[22:23] *** pmurias left
[22:28] <Geth> ¬¶ ecosystem: pheix++ created pull request #466: Add LZW::Revolunet to ecosystem

[22:28] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/466

[22:30] *** agentzh joined
[22:30] *** agentzh left
[22:30] *** agentzh joined
[22:42] *** cpan-p6 left
[22:43] *** cpan-p6 joined
[22:43] *** cpan-p6 left
[22:43] *** cpan-p6 joined
[22:43] *** MasterDuke left
[23:08] *** lichtkind left
[23:09] *** |oLa| joined
[23:21] *** mowcat left
[23:21] *** rindolf left
[23:25] *** MilkmanDan left
[23:25] *** chloekek left
[23:26] *** MilkmanDan joined
[23:33] *** pecastro left
[23:36] *** Cabanossi left
[23:41] *** Cabanossi joined
[23:44] <cpan-p6> New module released to CPAN! Net::BGP (0.1.3) by 03JMASLAK

[23:57] *** lucasb left
