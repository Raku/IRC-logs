[00:00] *** Sgeo left
[00:02] <samcv> no problem

[00:09] *** nadim_ left
[00:12] *** pamplemousse joined
[00:19] *** vike joined
[00:23] *** eseyman joined
[00:25] *** sena_kun left
[00:29] *** kensanata left
[00:40] *** netrino left
[00:55] *** aborazmeh left
[01:02] *** pamplemousse left
[01:02] *** pamplemousse joined
[01:16] *** MasterDuke left
[01:29] *** squashable6 left
[01:29] *** squashable6 joined
[01:29] *** MilkmanDan left
[01:31] *** MilkmanDan joined
[01:36] *** pamplemousse left
[01:44] *** lucasb left
[02:40] *** aborazmeh joined
[02:40] *** aborazmeh left
[02:40] *** aborazmeh joined
[03:10] *** Sgeo__ joined
[03:13] *** Sgeo_ left
[03:26] *** quester joined
[03:31] *** aborazmeh left
[03:34] *** AlexDani` joined
[03:38] *** araraloren joined
[04:05] *** khisanth_ left
[04:08] *** squashable6 left
[04:10] *** squashable6 joined
[04:10] *** ChanServ sets mode: +v squashable6

[04:15] *** rindolf joined
[04:24] *** khisanth_ joined
[04:41] *** jeromelanteri joined
[04:54] *** araraloren left
[05:30] *** AlexDani` is now known as AlexDaniel

[05:30] *** AlexDaniel left
[05:30] *** AlexDaniel joined
[06:22] *** jeromelanteri left
[06:54] <Geth> ¬¶ doc/master: 6 commits pushed by threadless-screw++, (Juan Juli√°n Merelo Guerv√≥s)++

[06:54] <Geth> ¬¶ doc/master: 81b64c4058 | Some redactional changes and corrections

[06:54] <Geth> ¬¶ doc/master: 1a3cb975c9 | Clarification of . match behaviour in relation to newline

[06:54] <Geth> ¬¶ doc/master: c0412e37c1 | Undo textual change in relation to alphabetic character definition

[06:54] <Geth> ¬¶ doc/master: ce7fad7df3 | Clarification: alphabetic characters do not "include" underscore

[06:54] <Geth> ¬¶ doc/master: 02d6697ebd | Miscellaneous; incl. clarification of use of comments in regexes

[06:54] <Geth> ¬¶ doc/master: 53ac477b4b | Merge pull request #2922 from threadless-screw/regexes

[06:54] <Geth> ¬¶ doc/master: review: https://github.com/perl6/doc/compare/791582d92d37...53ac477b4beb

[06:54] *** domidumont joined
[07:19] *** domidumont left
[07:26] <Geth> ¬¶ doc: b28632f769 | (JJ Merelo)++ | 2 files

[07:26] <Geth> ¬¶ doc: Adds headings to the return type arrow, closes #2921

[07:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b28632f769

[07:26] <Geth> ¬¶ doc: b0d5cf9da8 | (JJ Merelo)++ | doc/Type/Signature.pod6

[07:26] <Geth> ¬¶ doc: Deindent for #2921

[07:26] <synopsebot> Link: https://doc.perl6.org/type/Signature

[07:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b0d5cf9da8

[07:37] *** quester left
[07:45] *** Black_Ribbon left
[07:56] *** chloekek joined
[08:00] *** antoniogamiz joined
[08:00] <antoniogamiz> o/

[08:08] *** antoniogamiz left
[08:13] <AlexDaniel> any MacOS users here? Can you try following these steps? https://github.com/rakudo/rakudo/issues/3063#issuecomment-515742084

[08:15] <AlexDaniel> and then `use NativeCall` using the installed binary

[08:24] *** antoniogamiz joined
[08:32] <chloekek> When I run with --profile and I get "Could not locate profiler/template.html" did I configure MoarVM wrong?

[08:42] <chloekek> I see what is wrong. It tries to look for share/nqp/lib/profiler/template.html under the MoarVM prefix but the file is under the NQP prefix.

[08:51] *** rindolf left
[08:58] <lizmat> chloekek: please, make an issue  :-)

[08:58] <chloekek> Yeah I did :) https://github.com/perl6/nqp/issues/567

[08:58] <lizmat> chloekek++

[09:19] *** rindolf joined
[09:43] *** dudz joined
[10:09] *** nepugia joined
[10:23] *** rindolf left
[10:29] *** aborazmeh joined
[10:29] *** aborazmeh left
[10:29] *** aborazmeh joined
[10:32] *** leah2 left
[10:41] <Geth> ¬¶ doc: threadless-screw++ created pull request #2923: Minor corrections to regexes section; also fixes #2873

[10:41] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2923

[10:48] *** leah2 joined
[10:48] *** aborazmeh left
[11:46] *** sena_kun joined
[12:05] *** nadim_ joined
[12:08] <antoniogamiz> sena_kun: what do you think about this? => https://github.com/croservices/cro-http/issues/80

[12:09] *** antoniogamiz left
[12:10] <sena_kun> let's see...

[12:13] <sena_kun> hmm, curl understands it, I think so should we

[12:27] *** rindolf joined
[12:36] <sena_kun> hmm, this is a bit involved...

[12:40] <sena_kun> ah, it is not

[12:50] <ugexe> maybe because \_ isn‚Äôt a valid escape sequence 

[12:50] <sena_kun> yeah

[12:50] <sena_kun> writing an answer now...

[12:55] *** draxil joined
[12:57] <draxil> Hi. Is there a perl6y way to do "which $MYCOMMAND"? Basically I want to test for the presence of a command in a test, and bail out if it's not present. 

[12:58] <sena_kun> https://github.com/azawawi/perl6-file-which ?

[13:00] <sena_kun> you can, of course, write it by hands

[13:01] <draxil> Thanks.Good to know that exists. I probably don't want to add a dependency here. In hindsight I should probably just try and run the command and bail out.

[13:01] <sena_kun> give me a second...

[13:01] <draxil> ..if it fails. Perhaps I should look at the error you get for not being able to find the thing

[13:01] <nepugia> draxil: if you want to run the command run "command -v" not which

[13:01] <sena_kun> I am now writing a two-liner...

[13:02] <draxil> thanks.

[13:02] <sena_kun> m: my @paths = %*ENV<PATH>.split(':'); for @paths -> $path { if $path.IO.child('cat').e { say "cat is found at $path" } }

[13:02] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´cat is found at /usr/bin‚ê§cat is found at /bin‚ê§¬ª

[13:03] <sena_kun> this is GNU/Linux only, so apparently won't work on Windows and probably OSX

[13:03] <sena_kun> alternatively, of course, you can just try to run it and see the output

[13:03] <draxil> thanks .

[13:03] <nepugia> command -v is POSIX anyhow, that should def work on osx

[13:05] <ugexe> The not nice thing about trying commands that might not exist is that enough of those tries will deadlock you 

[13:05] <draxil> that's just leave windows, which would probably require other modifications anyway. Is there much perl6 in windows? Anyway. You've been helpful cheers.

[13:06] <ugexe> Yes people are using perl6 on windows 

[13:07] * ugexe wonders if one dependency is really that bad

[13:08] <nepugia> You start with one dep, and soon you have two :)

[13:08] <timotimo> i think we have a variable that gives you the separator of $PATH

[13:08] <ugexe> So you grow an entire project with 0 dependencies out of fear of a second dependency?

[13:09] <nepugia> but of course ;)

[13:09] <draxil> probably not, I haven't gotten to the packaging side yet.. I'm probably overthinking every step as this but I haven't released anything into the wild for Perl6 yet so I don;t have confirmed biases and habits yet :)

[13:11] <ugexe> Something that requires a bunch of crap to work cross platform is a good candidate for a dependency, unlike e.g. leftpad 

[13:13] <timotimo> i mean, it's easy to get leftpad wrong

[13:14] <ugexe> Chances are they are already doing a bunch of shit wrong because they are programmers. So who cares 

[13:14] <timotimo> yeah, maybe

[13:15] <timotimo> at least in perl6 you're not accidentally cutting characters in half

[13:15] * sena_kun does that in repl all the time

[13:16] <ugexe> Leftpad, but multithreaded 

[13:17] <timotimo> multipadding

[13:17] <chloekek> One thread for each transitive dependency, be careful not to reach threads-max!

[13:19] <timotimo> if your node_modules doesn't fit into l3 cache, i've got bad news for you

[13:19] *** Sgeo__ left
[13:19] *** Sgeo__ joined
[13:21] *** mowcat joined
[13:22] *** mowcat left
[13:22] *** mowcat joined
[13:23] *** Cabanossi left
[13:25] <nepugia> Cpu vendors will add l4? :)

[13:27] *** Cabanossi joined
[13:27] <chloekek> ARM already has an instruction to aid float to integer conversion specifically for JS bitwise operations

[13:28] <chloekek> The name of the instruction even mentions JS

[13:32] *** Black_Ribbon joined
[13:36] *** draxil left
[14:06] *** lucasb joined
[14:46] *** pamplemousse joined
[14:59] *** tokomer joined
[14:59] *** Actualeyes joined
[15:01] *** pamplemousse left
[15:08] *** pamplemousse joined
[15:45] *** Sgeo__ left
[15:46] *** pamplemousse left
[15:46] *** ayerhart joined
[15:53] *** dotdotdot joined
[16:47] <chloekek> p6: sub f($x is rw, $y is rw) { $x = 2; say $y; }; my $x = 1; f($x, $x);

[16:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´2‚ê§¬ª

[16:50] *** pamplemousse joined
[16:54] *** Sgeo joined
[16:55] *** leah2 left
[16:57] *** Manifest0 joined
[17:03] *** pecastro joined
[17:09] *** leah2 joined
[17:14] *** pamplemousse left
[17:14] *** pamplemousse joined
[17:19] *** pamplemousse left
[17:20] *** pamplemousse joined
[17:23] *** jmerelo joined
[17:30] *** domidumont joined
[17:47] *** pamplemousse left
[18:06] *** patrickb joined
[18:13] *** cpan-p6 left
[18:14] *** cpan-p6 joined
[18:14] *** cpan-p6 left
[18:14] *** cpan-p6 joined
[18:24] *** leah2 left
[18:26] *** lucasb left
[18:39] *** leah2 joined
[18:46] *** pamplemousse joined
[18:50] *** netrino joined
[19:00] *** leah2 left
[19:01] *** domidumont left
[19:02] *** jmerelo left
[19:09] *** pamplemousse left
[19:09] *** pamplemousse joined
[19:14] *** leah2 joined
[19:18] <Xliff> Can someone tell me why Perl6 throws an error when two signatures match, but they are at a different level of the MRO?

[19:19] <Xliff> If I have a class C, that is a descendant of class A, why isn't class C's method chosen over class A's?

[19:19] <Xliff> Both methods have a matching signature.

[19:20] <timotimo> is it the type constraint on the invocant that's doing it?

[19:20] <Xliff> yep.

[19:22] <Xliff> class A { multi x method x (IntOrStr $xv) { say "A: $xv"; }; }; class C is A { my subset IntOrStr where Int | Str; multi method x (IntOrStr $xv) { say "C: $xv" }; }; C.new.xv('Hi')

[19:22] <Xliff> m: class A { multi x method x (IntOrStr $xv) { say "A: $xv"; }; }; class C is A { my subset IntOrStr where Int | Str; multi method x (IntOrStr $xv) { say "C: $xv" }; }; C.new.xv('Hi')

[19:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3class A { multi x7‚èè5 method x (IntOrStr $xv) { say "A: $xv";‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[19:22] *** pamplemousse left
[19:22] <Xliff> m: class A { multi method x (IntOrStr $xv) { say "A: $xv"; }; }; class C is A { my subset IntOrStr where Int | Str; multi method x (IntOrStr $xv) { say "C: $xv" }; }; C.new.xv('Hi')

[19:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Invalid typename 'IntOrStr' in parameter declaration. Did you mean 'IntStr'?‚ê§at <tmp>:1‚ê§------> 3class A { multi method x (IntOrStr7‚èè5 $xv) { say "A: $xv"; }; }; class C is A‚ê§¬ª

[19:23] <Xliff> m: my subset IntOrStr where Int | Str; class A { multi method x (IntOrStr $xv) { say "A: $xv"; }; }; class C is A { multi method x (IntOrStr $xv) { say "C: $xv" }; }; C.new.xv('Hi')

[19:23] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´No such method 'xv' for invocant of type 'C'. Did you mean any of these?‚ê§    kv‚ê§    x‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:23] <Xliff> m: my subset IntOrStr where Int | Str; class A { multi method x (IntOrStr $xv) { say "A: $xv"; }; }; class C is A { multi method xv (IntOrStr $xv) { say "C: $xv" }; }; C.new.xv('Hi')

[19:23] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´C: Hi‚ê§¬ª

[19:23] <Xliff> ^^ THAT is what I am expecting!

[19:24] *** pamplemousse joined
[19:28] <Xliff> https://gist.github.com/Xliff/2123bdc09b0fd5afa192201d748e0700

[19:29] <timotimo> hm, the Mu is less specific, but the where { ... } makes it more specific, maybe they end up at the same "level"?

[19:29] <timotimo> could try an "is default"

[19:29] <Xliff> Oh!

[19:30] <Xliff> I didn't know that existed!

[19:31] <Xliff> \o/

[19:31] <Xliff> timotimo++

[19:35] <Xliff> m: class C is B { multi method a is default {}; }; class B is A { multi method a is default {}; }; class A { multi method a {}; };  C.new.a

[19:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§'C' cannot inherit from 'B' because it is unknown.‚ê§at <tmp>:1‚ê§¬ª

[19:35] *** kawaii joined
[19:36] <Xliff> m: class A { multi method a {}; }; class B is A { multi method a is default {}; }; class C is B { multi method a is default {}; };  C.new.a

[19:36] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[19:36] <Xliff> m: class A { multi method a {}; }; class B is A { multi method a is default {}; }; class C is B { multi method a is default { 'C'.say }; };  C.new.a

[19:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´C‚ê§¬ª

[19:36] <Xliff> \o/ \o/

[19:36] <Xliff> m: class A { multi method a {}; }; class B is A { multi method a is default {}; }; class C is B { multi method a is default { 'C'.say }; };  B.new.a

[19:36] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[19:36] <Xliff> m: class A { multi method a {}; }; class B is A { multi method a is default { 'B'.say }; }; class C is B { multi method a is default { 'C'.say }; };  B.new.a

[19:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´B‚ê§¬ª

[19:39] *** pamplemousse left
[19:46] <cpan-p6> New module released to CPAN! Async::Workers (0.0.7) by 03VRURG

[19:47] *** pamplemousse joined
[19:53] *** someuser joined
[19:56] *** nepugia is now known as nephele

[20:05] *** tokomer left
[20:24] *** _jrjsmrtn joined
[20:24] *** patrickb left
[20:26] *** jlinahan joined
[20:26] *** someuser left
[20:26] *** __jrjsmrtn__ left
[20:29] *** MasterDuke joined
[20:38] *** MasterDuke left
[20:39] *** jlinahan left
[20:41] *** MasterDuke joined
[20:49] *** irced joined
[20:51] <cpan-p6> New module released to CPAN! Gnome::Gtk3 (0.17.7) by 03MARTIMM

[20:53] *** _jrjsmrtn left
[20:58] <irced> I getting a failed test on ===> Testing: Gnome::GObject:ver<0.13.13> when zef'ing Gnome::Gtk3. any1 know if this is an issue?

[21:02] *** Sgeo_ joined
[21:05] *** Sgeo left
[21:25] *** rindolf left
[21:25] <sena_kun> irced, can you provide a bit more of your log? I am sure there should be some reasons for tests to fail, but nobody can guess them with only a fact that tests are failing for someone somewhere?

[21:26] <irced> sena_kun: cpan-p6 announced the new module. perhaps you can try yourself?

[21:26] <sena_kun> irced, I tried, I don't have libgtk-3 installed.

[21:26] <irced> sena_kun: i do have libgtk-3 installed. did you get the same error tho?

[21:27] <sena_kun> irced, I don't know what error you are getting, so I can't tell if they are the same.

[21:28] <irced> sena_kun: well, without getting too specific, the the test failed on  ===> Testing: 

[21:28] <irced>                Gnome::GObject:ver<0.13.13> when zef'ing Gnome::Gtk3

[21:33] <lizmat> weekly: https://perl6.eu/substring-queues.html

[21:33] <notable6> lizmat, Noted!

[21:35] <irced> so let me start with a more general question, has anyone successfully zef'd Gnome::Gtk3 (0.17.7) ?

[21:36] *** Sgeo__ joined
[21:37] *** reach_satori_ joined
[21:39] *** Sgeo_ left
[21:40] *** reach_satori left
[21:45] <ugexe> 0.17.7 isnt on cpan. the source-url on the github/ecosystem version is wrong. surprised you are getting to test phase

[21:47] *** nephele left
[21:47] <irced> ugexe: thanks for looking into it!

[21:48] <Elronnd> irced: I just got the same error as you

[21:48] <ugexe> oh i see it was *just* released to cpan. it must not be in the index yet

[21:48] <Elronnd> "Could not find Gnome::Gdk3::Events at line 40 in"

[21:49] <irced> Elronnd: thanks for confirming it's not an isolated issue (at least not completely)

[21:50] <lizmat> weekly: https://p6steve.wordpress.com/2019/07/28/mind-the-gap/

[21:50] <notable6> lizmat, Noted!

[21:55] <irced> maybe it's just a 0.17.6 thing and 0.17.7 will be available shortly

[21:58] * irced found the tarbell for 0.17.7. same deal

[21:58] <irced> has anyone successfully installed a recent version of Gnome::Gtk3 ?

[21:58] <irced> Elronnd: what linux distribution are you using?

[21:58] <Elronnd> arch

[21:59] <irced> gentoo here. do you have gtk3 development files installed?

[21:59] <Elronnd> (also, how do you know I'm running linux?)

[21:59] <Elronnd> you don't need development files

[21:59] <irced> Elronnd: have you installed this module before?

[21:59] <Elronnd> what are called 'dev files' are for developing with c.  These *are* dev files for p6

[21:59] <irced> Elronnd: just libraries

[21:59] <Elronnd> I don't think I have

[22:00] <irced> Elronnd: just libraries i see

[22:00] <Elronnd> on arch they're not separate

[22:00] <irced> Elronnd: or that :-)

[22:00] <Elronnd> :)

[22:04] <irced> Elronnd: I just assume everyone runs linux and is as scared of microsoft as i am.

[22:04] <irced> Elronnd: and other big tech.

[22:05] <Elronnd> ms is not very scary.  Nor apple.  I can't stand windows nor macos but they're fine

[22:05] <Elronnd> Scary is google and facebook and tencent

[22:06] <irced> Elronnd: oh, ok, well, that's good, you're well adjusted üòÑat least more than I am

[22:06] <Elronnd> lol

[22:07] <Elronnd> the main thing is just, ms can survive without windows.  They can sell support contracts for exactly the same price.  Google can't survive without taking away everyone's freedom

[22:08] <irced> Elronnd: I see, some are relatively scarier. Nice observation.

[22:09] <irced> Elronnd: how long you been coding in perl6?

[22:09] <Elronnd> well

[22:10] <Elronnd> I started learning it seriously a good few months ago

[22:10] <Elronnd> but I dropped off.  Been focusing on other things

[22:10] <Elronnd> you?

[22:12] <irced> Elronnd: I started and dropped off a few months ago and am now getting into the details.

[22:16] <irced> Elronnd: these types are a mental trip. like Range List Seq Array and their relations feel like astronomical science with relativity in the mix.

[22:18] <irced> Elronnd: in other words, positionals. did i miss one?

[22:18] <Elronnd> no idea

[22:18] <Elronnd> I never got that deep into all the types

[22:18] <irced> üòÑ

[22:19] <irced> Elronnd: well, you will üòÑ

[22:20] <Elronnd> if I get the time!

[22:20] <Elronnd> I have too many projects in other languages

[22:21] <irced> Elronnd: right, time. time is the key to learning a programming language. what other languages?

[22:21] <Elronnd> main one right now is d

[22:21] <irced> Elronnd: whoa, you like to stay on the fringe.

[22:21] <Elronnd> heh

[22:22] <Elronnd> also gonna write a WM for arcan

[22:22] <Elronnd> also want to fix the web, which probably involves a lot of c++ and python

[22:23] *** Cabanossi left
[22:23] <irced> Elronnd: what's arcan ? yeah, the web feels like a spider web what with privacy concerns abound.

[22:24] <sena_kun> Array is, well, an array of things you can address by index, List is an immutable array, range is a range of usually numbers of strings, think "from 1 to 10", "from a to z", "from pi to infinity" and so on, Seq is something that produces values lazily.

[22:24] <Elronnd> arcan is a display server, competitor to x11 and wayland except unlike both of them it's actually sanely designed

[22:24] <Elronnd> I actually don't want to fix the privacy issues.  I mean, I'd like them to be solved but I don't think that can be done

[22:24] <Elronnd> I mainly want to solve the developing-for-web-is-a-clusterfuck and using-web-is-a-clusterfuck problems

[22:26] <irced> Elronnd: yeah, i hope to use perl6 to help me develop more fluidly in other languages, which it seems to be in part made for, supposedly trumping all lex'ers with its versatility....

[22:26] <irced> sena_kun: good summary

[22:27] <Elronnd> hmm.  I didn't take anything from it to other languages.  But yeah that was what I took from it; it's so fluid I can do whatever I want

[22:27] <irced> m: my $seq = (1 ... 10); for $seq { say $_ }

[22:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(1 2 3 4 5 6 7 8 9 10)‚ê§¬ª

[22:27] <irced> m: my $seq = ( 1 ... 10); for @$seq { say $_ }

[22:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[22:28] <irced> m: my $seq = (1 ... 10); for $seq.eager { say $_ }

[22:28] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[22:28] <irced> i once was blind and now i can see!

[22:28] <Elronnd> m: .say for (1 ... 10)

[22:28] <irced> thanks sena_kun. i made the sequence non-lazy and it behaved like a list

[22:28] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[22:29] <Elronnd> m: .say for (1 ... 10).eager

[22:29] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[22:29] <Elronnd> hmm

[22:30] <irced> for seems to take ( ... ) as a list when you define the sequence in the for statement

[22:30] <irced> that it, it assumes it will not be lazy

[22:30] <irced> as after all, every value will be iterated upon

[22:30] <irced> now i can see even better

[22:30] <irced> thanks Elronnd

[22:31] <Elronnd> I don't see!

[22:31] <irced> yeah, well, there is a missing piece

[22:31] <irced> since

[22:32] <irced> m: my $seq = ( 1.. 10 ); for $seq { say "$++: $_" }

[22:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Non-variable $ must be backslashed‚ê§at <tmp>:1‚ê§------> 3my $seq = ( 1.. 10 ); for $seq { say "7‚èè5$++: $_" }‚ê§    expecting any of:‚ê§        argument list‚ê§        double quotes‚ê§        pre‚Ä¶¬ª

[22:32] <irced> oops

[22:32] <ugexe> what do you expect it to do?

[22:32] <irced> m: my $seq = ( 1.. 10 ); for $seq { say "$++: $_"; }

[22:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Non-variable $ must be backslashed‚ê§at <tmp>:1‚ê§------> 3my $seq = ( 1.. 10 ); for $seq { say "7‚èè5$++: $_"; }‚ê§    expecting any of:‚ê§        argument list‚ê§        double quotes‚ê§        pr‚Ä¶¬ª

[22:32] <irced> to not fail

[22:32] <irced> üòÑ

[22:33] <ugexe> {$++}

[22:33] <ugexe> but besides that

[22:33] <irced> m: my $seq = ( 1 .. 10 ); for $seq { say "{$++}: $_"; }

[22:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 1 2 3 4 5 6 7 8 9 10‚ê§¬ª

[22:33] <ugexe> you are acting like lazyness is the cause of some issue

[22:33] <irced> duh, thanks ugexe

[22:33] <irced> i thought it was

[22:33] <irced> since

[22:33] <irced> m: my $seq = ( 1 .. 10 ); for $seq.eager { say "{$++}: $_"; }

[22:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 1‚ê§0: 2‚ê§0: 3‚ê§0: 4‚ê§0: 5‚ê§0: 6‚ê§0: 7‚ê§0: 8‚ê§0: 9‚ê§0: 10‚ê§¬ª

[22:34] *** pecastro left
[22:34] <irced> m: my $seq = ( 1 .. 10 ); my $counter=0; for $seq.eager { say "{counter++}: $_"; }

[22:34] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    counter used at line 1‚ê§‚ê§¬ª

[22:34] <irced> m: my $seq = ( 1 .. 10 ); my $counter=0; for $seq.eager { say "{$counter++}: $_"; }

[22:34] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 1‚ê§1: 2‚ê§2: 3‚ê§3: 4‚ê§4: 5‚ê§5: 6‚ê§6: 7‚ê§7: 8‚ê§8: 9‚ê§9: 10‚ê§¬ª

[22:34] <ugexe> i guess you beed $++ ~ ": $_"

[22:34] <irced> m: my $seq = ( 20 .. 30 ); my $counter=0; for $seq.eager { say "{$counter++}: $_"; }

[22:34] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20‚ê§1: 21‚ê§2: 22‚ê§3: 23‚ê§4: 24‚ê§5: 25‚ê§6: 26‚ê§7: 27‚ê§8: 28‚ê§9: 29‚ê§10: 30‚ê§¬ª

[22:35] *** chloekek left
[22:35] <ugexe> $seq.list

[22:35] <irced> right, which makes it non-lazy

[22:35] <irced> m: my $seq = ( 20 .. 30 ); my $counter=0; for $seq.List { say "{$counter++}: $_"; }

[22:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20‚ê§1: 21‚ê§2: 22‚ê§3: 23‚ê§4: 24‚ê§5: 25‚ê§6: 26‚ê§7: 27‚ê§8: 28‚ê§9: 29‚ê§10: 30‚ê§¬ª

[22:35] <irced> m: my $seq = ( 20 .. 30 ); my $counter=0; for $seq { say "{$counter++}: $_"; }

[22:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20 21 22 23 24 25 26 27 28 29 30‚ê§¬ª

[22:35] <ugexe> what do you mean?

[22:36] <irced> for operates on a lazy type differently than on a  non-lazy type

[22:36] <tobs> it's not laziness, it's itemization

[22:36] <irced> m: my $seq = ( 20 .. 30 ); my $counter=0; for @$seq { say "{$counter++}: $_"; }

[22:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20‚ê§1: 21‚ê§2: 22‚ê§3: 23‚ê§4: 24‚ê§5: 25‚ê§6: 26‚ê§7: 27‚ê§8: 28‚ê§9: 29‚ê§10: 30‚ê§¬ª

[22:36] <tobs> m: my $seq = ( 20 .. 30 ); my $counter=0; for $seq.self { say "{$counter++}: $_"; }

[22:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20‚ê§1: 21‚ê§2: 22‚ê§3: 23‚ê§4: 24‚ê§5: 25‚ê§6: 26‚ê§7: 27‚ê§8: 28‚ê§9: 29‚ê§10: 30‚ê§¬ª

[22:36] *** Cabanossi joined
[22:36] <irced> tobs: self, cool, haven't seen that one

[22:37] <irced> tobs: itemization of a sequence, that's new to me, thanks

[22:37] <ugexe> .cache, .Array, etc

[22:37] <tobs> $seq is inside a scalar container, so for sees only a single element. If you call a method like .eager or even .self (which doesn't remove the laziness), you get rid of the container.

[22:37] <irced> m: my $seq = ( 20 .. 30 ); my $counter=0; for |$seq { say "{$counter++}: $_"; }

[22:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20‚ê§1: 21‚ê§2: 22‚ê§3: 23‚ê§4: 24‚ê§5: 25‚ê§6: 26‚ê§7: 27‚ê§8: 28‚ê§9: 29‚ê§10: 30‚ê§¬ª

[22:37] <irced> a hah!

[22:37] <irced> a ha!

[22:37] <irced> m: my $seq = ( 20 .. 30 ); my $counter=0; for $seq.slip { say "{$counter++}: $_"; }

[22:37] <tobs> or use binding

[22:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´No such method 'slip' for invocant of type 'Range'. Did you mean any of these?‚ê§    Slip‚ê§    flip‚ê§    sin‚ê§    skip‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:37] <irced> m: my $seq = ( 20 .. 30 ); my $counter=0; for $seq.Slip { say "{$counter++}: $_"; }

[22:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20‚ê§1: 21‚ê§2: 22‚ê§3: 23‚ê§4: 24‚ê§5: 25‚ê§6: 26‚ê§7: 27‚ê§8: 28‚ê§9: 29‚ê§10: 30‚ê§¬ª

[22:37] <tobs> m: my $seq := ( 20 .. 30 ); my $counter=0; for $seq { say "{$counter++}: $_"; }

[22:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 20‚ê§1: 21‚ê§2: 22‚ê§3: 23‚ê§4: 24‚ê§5: 25‚ê§6: 26‚ê§7: 27‚ê§8: 28‚ê§9: 29‚ê§10: 30‚ê§¬ª

[22:38] <irced> tobs: excellent!

[22:38] <irced> itemization of a sequence is key for "for" to iterate over each member of the sequence

[22:38] * irced now can see.

[22:38] * irced no really.

[22:39] <irced> üòÑ

[22:39] <irced> tobs: the binding part is going to take awhile for me to get completely i think

[22:39] <irced> my $seq := ( 20 .. 30 ); say $seq.^name; say $seq.perl;

[22:39] <evalable6> irced, rakudo-moar d1f9d2848: OUTPUT: ¬´Range‚ê§20..30‚ê§¬ª

[22:40] <irced> m: my $seq := ( 20 .. 30 ); say $seq.^name; say $seq.perl;

[22:40] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´Range‚ê§20..30‚ê§¬ª

[22:40] <irced> m: my $seq := ( 20 ... 30 ); say $seq.^name; say $seq.perl;

[22:40] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´Seq‚ê§(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30).Seq‚ê§¬ª

[22:40] <irced> oops i might have been making ranges with two dots for awhile there

[22:41] <ugexe> you do make ranges with 2 dots

[22:41] <irced> yeah, i started with sequences

[22:41] <tobs> irced: I found this helpful (and it became more ever more helpful after I read it the 10th time): https://perl6advent.wordpress.com/2017/12/02/perl-6-sigils-variables-and-containers/

[22:41] <irced> but anyway, either need to be itemized for "for"

[22:41] <irced> tobs: thanks

[22:42] <irced> m: my $seq = ( 10 ... 0 ); my $counter=0; for $seq { say "{$counter++}: $_"; }

[22:42] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 10 9 8 7 6 5 4 3 2 1 0‚ê§¬ª

[22:42] <irced> m: my $seq = ( 10 ... 0 ); my $counter=0; for |$seq { say "{$counter++}: $_"; }

[22:42] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 10‚ê§1: 9‚ê§2: 8‚ê§3: 7‚ê§4: 6‚ê§5: 5‚ê§6: 4‚ê§7: 3‚ê§8: 2‚ê§9: 1‚ê§10: 0‚ê§¬ª

[22:42] <ugexe> those ranges should be using ..

[22:42] <irced> m: my $seq := ( 10 ... 0 ); my $counter=0; for $seq { say "{$counter++}: $_"; }

[22:42] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0: 10‚ê§1: 9‚ê§2: 8‚ê§3: 7‚ê§4: 6‚ê§5: 5‚ê§6: 4‚ê§7: 3‚ê§8: 2‚ê§9: 1‚ê§10: 0‚ê§¬ª

[22:43] <irced> m: my $seq := ( 10 ... 0 ); say $seq.^name;

[22:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´Seq‚ê§¬ª

[22:43] <ugexe> m: say 5, 10 ... 20;

[22:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(5 10 15 20)‚ê§¬ª

[22:43] <ugexe> note the difference

[22:43] <irced> i guess binding itemizes it

[22:43] <irced> m: my $seq := ( 10, 8 ... 0 ); say $seq.^name;

[22:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´Seq‚ê§¬ª

[22:43] <irced> m: my $seq := ( 10, 8 ... 0 ); say $seq;

[22:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(10 8 6 4 2 0)‚ê§¬ª

[22:43] <irced> m: my $seq := ( 10, 8 ... 0 ); say |$seq;

[22:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´1086420‚ê§¬ª

[22:44] <ugexe> you understand .. is not the same as ... now?

[22:44] <irced> m: my $seq := ( 10, 8 ... 0 ); say $seq.eager;

[22:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(10 8 6 4 2 0)‚ê§¬ª

[22:44] <irced> oh yes, i know, but it's the for loop operating on ranges and sequences requiring itemization that i was not really seeing until now

[22:45] <irced> the for loop treats the sequence/range as a single entity unless itemized or slipped

[22:46] <ugexe> no its treating the sequence as a *single item*

[22:46] <irced> m: my $seqs = ( (5 ... 0), (20 ... 25) );  for $seqs { for |$_ { say $_ } }

[22:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(5 4 3 2 1 0)‚ê§(20 21 22 23 24 25)‚ê§¬ª

[22:46] <ugexe> its not about the sequence needing to itemize its contents

[22:46] <irced> m: my $seqs = ( (5 ... 0), (20 ... 25) );  for $seqs { for $_.List { say $_ } }

[22:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(5 4 3 2 1 0)‚ê§(20 21 22 23 24 25)‚ê§¬ª

[22:47] <irced> m: my $seqs =  (5 ... 0), (20 ... 25) ;  for $seqs { for $_.List { say $_ } }

[22:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5‚ê§4‚ê§3‚ê§2‚ê§1‚ê§0‚ê§¬ª

[22:47] <irced> m: my $seqs =  ((5 ... 0), (20 ... 25)) ;  for |$seqs { for $_ { say $_ } }

[22:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5‚ê§4‚ê§3‚ê§2‚ê§1‚ê§0‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§¬ª

[22:47] <irced> m: my $seqs =  ((5 ... 0), (20 ... 25)) ;  for |$seqs { for $_ { say $_ }; say "next" }

[22:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5‚ê§4‚ê§3‚ê§2‚ê§1‚ê§0‚ê§next‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§next‚ê§¬ª

[22:47] <irced> m: my $seqs =  ((5 ... 0), (20 ... 25)) ;  for |$seqs { for $_ { say $_ }; NEXT {say "next";} }

[22:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5‚ê§4‚ê§3‚ê§2‚ê§1‚ê§0‚ê§next‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§next‚ê§¬ª

[22:48] <ugexe> for flat ...

[22:51] <irced> m: my $seqs =  ((5 ... 0), (20 ... 25)) ;  for |$seqs { for $_ { say $_; say "next";} }

[22:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5‚ê§next‚ê§4‚ê§next‚ê§3‚ê§next‚ê§2‚ê§next‚ê§1‚ê§next‚ê§0‚ê§next‚ê§20‚ê§next‚ê§21‚ê§next‚ê§22‚ê§next‚ê§23‚ê§next‚ê§24‚ê§next‚ê§25‚ê§next‚ê§¬ª

[23:01] <irced> anyway, thanks for the discussioin

[23:02] *** nadim_ left
[23:03] *** MasterDuke left
[23:08] <irced> m: my $seqs =  ((5 ... 0), (20 ... 25)) ;  for |$seqs { for $_ { say $_;} unless ++$ == $seqs.elems { say " next "; } }

[23:09] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3. 25)) ;  for |$seqs { for $_ { say $_;}7‚èè5 unless ++$ == $seqs.elems { say " next ‚ê§¬ª

[23:11] <irced> m: my $seqs =  ((5 ... 0), (20 ... 25)) ;  for |$seqs { for $_ { say $_}; unless ++$ == $seqs.elems { say " next "; } }

[23:11] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5‚ê§4‚ê§3‚ê§2‚ê§1‚ê§0‚ê§ next ‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§¬ª

[23:17] <irced> m: my $seq = ( 7 ... 2 ); say $seq;

[23:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(7 6 5 4 3 2)‚ê§¬ª

[23:17] <irced> m: my $seq = |( 7 ... 2 ); say $seq;

[23:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(7 6 5 4 3 2)‚ê§¬ª

[23:17] <irced> m: my $seq = |( 7 ... 2 ); for $seq { say " $_ " };

[23:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´ 7 ‚ê§ 6 ‚ê§ 5 ‚ê§ 4 ‚ê§ 3 ‚ê§ 2 ‚ê§¬ª

[23:18] <irced> m: my $seq = ( 7 ... 2 ); for $seq { say " $_ " };

[23:18] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´ 7 6 5 4 3 2 ‚ê§¬ª

[23:18] <irced> m: my $seq = |( 7 ... 2 ); say $seq.perl;

[23:18] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´$(slip(7, 6, 5, 4, 3, 2))‚ê§¬ª

[23:19] <irced> itemize a seq/range with slip, List, Array etc is my takeaway. flat doesn't work if there are sublists.

[23:21] <irced> m: my $seq = ( 7 ... 2 ); for $seq<> { say " $_ " };

[23:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´ 7 ‚ê§ 6 ‚ê§ 5 ‚ê§ 4 ‚ê§ 3 ‚ê§ 2 ‚ê§¬ª

[23:22] <irced> as per the blog, apparently the Decont methodop <> is suited for this. thanks again tobs.

[23:28] *** sauvin joined
[23:41] <ugexe> just use `for flat $seq { }` if you want people to be able to understand your code

[23:42] * irced considers.

[23:42] <ugexe> no one besides us grizzled perl6 users are going to know wtf $seq<> means

[23:43] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for flat $seq { say "{$++} : $_" }

[23:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´0 : 7‚ê§0 : 6‚ê§0 : 5‚ê§0 : 4‚ê§0 : 3‚ê§0 : 2‚ê§0 : 16‚ê§0 : 15‚ê§0 : 14‚ê§0 : 13‚ê§¬ª

[23:43] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq { say "{++$}----$_" }

[23:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´1----7 6 5 4 3 2 16 15 14 13‚ê§¬ª

[23:44] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for flat $seq { say "{++$}----$_" }

[23:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´1----7‚ê§1----6‚ê§1----5‚ê§1----4‚ê§1----3‚ê§1----2‚ê§1----16‚ê§1----15‚ê§1----14‚ê§1----13‚ê§¬ª

[23:44] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for flat $seq { say "=={++$}== $_" }

[23:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7‚ê§==1== 6‚ê§==1== 5‚ê§==1== 4‚ê§==1== 3‚ê§==1== 2‚ê§==1== 16‚ê§==1== 15‚ê§==1== 14‚ê§==1== 13‚ê§¬ª

[23:44] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for flat $seq { say "=={++$}== $_ " }

[23:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 ‚ê§==1== 6 ‚ê§==1== 5 ‚ê§==1== 4 ‚ê§==1== 3 ‚ê§==1== 2 ‚ê§==1== 16 ‚ê§==1== 15 ‚ê§==1== 14 ‚ê§==1== 13 ‚ê§¬ª

[23:44] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { say "=={++$}== $_ " }

[23:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 6 5 4 3 2 ‚ê§==1== 16 15 14 13 ‚ê§¬ª

[23:45] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for |$seq { say "=={++$}== $_ " }

[23:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 6 5 4 3 2 ‚ê§==1== 16 15 14 13 ‚ê§¬ª

[23:45] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for $_<> { say "=={++$}== $_ " } }

[23:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 ‚ê§==1== 6 ‚ê§==1== 5 ‚ê§==1== 4 ‚ê§==1== 3 ‚ê§==1== 2 ‚ê§==1== 16 ‚ê§==1== 15 ‚ê§==1== 14 ‚ê§==1== 13 ‚ê§¬ª

[23:46] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for $_<> { say "=={++$}== $_ " unless ++$ = $seq.elems {say "and then"} } }

[23:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3 "=={++$}== $_ " unless ++$ = $seq.elems7‚èè5 {say "and then"} } }‚ê§    expecting ‚Ä¶¬ª

[23:46] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for $_<> { say "=={++$}== $_ "; unless ++$ = $seq.elems {say "and then"} } }

[23:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 ‚ê§Cannot modify an immutable Int (1)‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:46] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for $_<> { say "=={++$}== $_ "; unless ++$ == $seq.elems {say "and then"} } }

[23:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 ‚ê§and then‚ê§==1== 6 ‚ê§==1== 5 ‚ê§and then‚ê§==1== 4 ‚ê§and then‚ê§==1== 3 ‚ê§and then‚ê§==1== 2 ‚ê§and then‚ê§==1== 16 ‚ê§and then‚ê§==1== 15 ‚ê§==1== 14 ‚ê§and then‚ê§==1== 13 ‚ê§and then‚ê§¬ª

[23:46] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for $_ { say "=={++$}== $_ "; unless ++$ == $seq.elems {say "and then"} } }

[23:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 ‚ê§and then‚ê§==1== 6 ‚ê§==1== 5 ‚ê§and then‚ê§==1== 4 ‚ê§and then‚ê§==1== 3 ‚ê§and then‚ê§==1== 2 ‚ê§and then‚ê§==1== 16 ‚ê§and then‚ê§==1== 15 ‚ê§==1== 14 ‚ê§and then‚ê§==1== 13 ‚ê§and then‚ê§¬ª

[23:47] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for |$_ { say "=={++$}== $_ "; unless ++$ == $seq.elems {say "and then"} } }

[23:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´==1== 7 ‚ê§and then‚ê§==1== 6 ‚ê§==1== 5 ‚ê§and then‚ê§==1== 4 ‚ê§and then‚ê§==1== 3 ‚ê§and then‚ê§==1== 2 ‚ê§and then‚ê§==1== 16 ‚ê§and then‚ê§==1== 15 ‚ê§==1== 14 ‚ê§and then‚ê§==1== 13 ‚ê§and then‚ê§¬ª

[23:47] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for |$_ { say "=={++$}== $_ "; } unless ++$ == $seq.elems {say "and then"} } }

[23:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3seq<> { for |$_ { say "=={++$}== $_ "; }7‚èè5 unless ++$ == $seq.elems {say "and then‚ê§¬ª

[23:47] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for |$_ { say "=={++$}== $_ " }; unless ++$ == $seq.elems {say "and then"} } }

[23:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected closing bracket‚ê§at <tmp>:1‚ê§------> 3ss ++$ == $seq.elems {say "and then"} } 7‚èè5}‚ê§¬ª

[23:48] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for $seq<> { for |$_ { say "--{++$}-- $_ " }; unless ++$ == $seq.elems {say "and then"} }

[23:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´--1-- 7 ‚ê§--1-- 6 ‚ê§--1-- 5 ‚ê§--1-- 4 ‚ê§--1-- 3 ‚ê§--1-- 2 ‚ê§and then‚ê§--1-- 16 ‚ê§--1-- 15 ‚ê§--1-- 14 ‚ê§--1-- 13 ‚ê§¬ª

[23:48] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for flat $seq { for |$_ { say "--{++$}-->$_ " }; unless ++$ == $seq.elems {say "and then"} }

[23:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´--1-->7 ‚ê§and then‚ê§--1-->6 ‚ê§--1-->5 ‚ê§and then‚ê§--1-->4 ‚ê§and then‚ê§--1-->3 ‚ê§and then‚ê§--1-->2 ‚ê§and then‚ê§--1-->16 ‚ê§and then‚ê§--1-->15 ‚ê§and then‚ê§--1-->14 ‚ê§and then‚ê§--1-->13 ‚ê§and then‚ê§¬ª

[23:48] <irced> it is hard to see, but flat does not treat the sublists individually

[23:48] <irced> nevertheless, i appreciate your observation about archaic syntax

[23:49] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for |$seq { for |$_ { say "--{++$}-->$_ " }; unless ++$ == $seq.elems {say "and then"} }

[23:49] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´--1-->7 ‚ê§--1-->6 ‚ê§--1-->5 ‚ê§--1-->4 ‚ê§--1-->3 ‚ê§--1-->2 ‚ê§and then‚ê§--1-->16 ‚ê§--1-->15 ‚ê§--1-->14 ‚ê§--1-->13 ‚ê§¬ª

[23:49] <irced> i'll stick with slip i think

[23:50] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for |$seq { for |$_ { state $count=0; say "--{++count}-->$_ " }; unless ++$ == $seq.elems {say "and then"} }

[23:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    count used at line 1. Did you mean 'round'?‚ê§‚ê§¬ª

[23:50] <irced> m: my $seq = ( (7 ... 2), (16 ... 13) ); for |$seq { for |$_ { state $count=0; say "--{++$count}-->$_ " }; unless ++$ == $seq.elems {say "and then"} }

[23:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´--1-->7 ‚ê§--2-->6 ‚ê§--3-->5 ‚ê§--4-->4 ‚ê§--5-->3 ‚ê§--6-->2 ‚ê§and then‚ê§--1-->16 ‚ê§--2-->15 ‚ê§--3-->14 ‚ê§--4-->13 ‚ê§¬ª

[23:50] <irced> m: my $seq = ( ('c' ... 'h'), ( ... 13) ); for |$seq { for |$_ { state $count=0; say "--{++$count}-->$_ " }; unless ++$ == $seq.elems {say "and then"} }

[23:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´13‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:51] <irced> m: my $seq = ( ('c' ... 'h'), ( 'p' ... 'l') ); for |$seq { for |$_ { state $count=0; say "--{++$count}-->$_ " }; unless ++$ == $seq.elems {say "and then"} }

[23:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´--1-->c ‚ê§--2-->d ‚ê§--3-->e ‚ê§--4-->f ‚ê§--5-->g ‚ê§--6-->h ‚ê§and then‚ê§--1-->p ‚ê§--2-->o ‚ê§--3-->n ‚ê§--4-->m ‚ê§--5-->l ‚ê§¬ª

[23:51] <irced> sorry for the spam, anyway, ugexe, flat does not treat sublists individually in the for loop, but i see what you're saying, thanks again

[23:51] *** sauvin left
[23:52] *** sauvin joined
[23:53] <irced> ugexe, though i could use flat in the innermost for loop

[23:53] <irced> üòÑ

[23:53] * irced gives camelia a break.

[23:55] *** aborazmeh joined
[23:55] *** aborazmeh left
[23:55] *** aborazmeh joined
[23:59] <irced> ugexe, then again, I moved the discussion beyond iterating over a sequence and the outer loop was not a sequence or a range so you're absolutely right. thanks again.

