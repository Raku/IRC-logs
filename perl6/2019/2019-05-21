[00:06] *** zacts left
[00:27] *** mowcat joined
[01:10] *** silug_ left
[01:19] *** adu joined
[01:21] *** silug_ joined
[01:37] *** aborazmeh left
[01:42] *** xiaoyafeng joined
[01:43] *** claudio joined
[01:47] *** qiqi joined
[01:49] *** noisegul_ joined
[01:52] *** noisegul left
[02:03] *** aborazmeh joined
[02:03] *** aborazmeh left
[02:03] *** aborazmeh joined
[02:07] *** kurahaupo joined
[02:10] *** AlexDaniel joined
[02:11] *** rindolf left
[02:11] *** cwilson left
[02:17] *** mowcat left
[02:17] *** cwilson1 joined
[02:17] *** lembark joined
[02:18] <lembark> Q: Anyone have experience with CompUnit::Repository  & friends?  

[02:19] <lembark> I'm trying to get a  BEGIN block to programatically add at list of dirs; basically a dynamic version of perl6 -I.

[02:24] <lembark> Or being able to load %*ENV{ PERL6LIB } w/o resorting to /usr/bin/find.

[02:36] *** cwilson1 left
[02:39] *** huy joined
[02:41] *** kst` joined
[02:42] *** kst left
[02:44] *** huy left
[02:51] *** claudio left
[02:53] *** MilkmanDan left
[02:53] *** MilkmanDan joined
[02:57] <lembark> Good evening.

[03:12] *** kst` left
[03:12] *** kst joined
[03:17] *** xiaoyafeng left
[03:29] *** kurahaupo_ joined
[03:33] *** kurahaupo left
[03:35] *** kaare_ joined
[03:38] *** kurahaupo_ left
[03:38] *** kurahaupo joined
[03:51] *** kaare_ left
[03:52] *** kaare_ joined
[03:53] *** Kaiepi left
[04:02] *** aborazmeh left
[04:20] *** adu left
[04:21] *** Xliff joined
[04:21] <Xliff> \o

[04:21] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; &( $aa )()

[04:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$aa' is not declared. Did you mean '&aa'?␤at <tmp>:1␤------> 3aa { say "OHAI!" }; my $name = 'aa'; &( 7⏏5$aa )()␤»

[04:21] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; &( $name )()

[04:21] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[04:22] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; "$name"()

[04:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[04:22] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; &"$name"()

[04:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Name must begin with alphabetic character␤at <tmp>:1␤------> 3b aa { say "OHAI!" }; my $name = 'aa'; &7⏏5"$name"()␤    expecting any of:␤        infix␤        infix stopper␤        sta…»

[04:22] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; &$name()

[04:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[04:22] <Xliff> I can never remember how to do this.

[04:22] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; $name()

[04:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[04:22] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; ::( $name )()

[04:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such symbol 'aa'␤  in block <unit> at <tmp> line 1␤␤»

[04:23] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; ::( "&$name" )()

[04:23] <camelia> rakudo-moar a643b8be1: OUTPUT: «OHAI!␤»

[04:23] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; ::( "\&$name" )()

[04:23] <camelia> rakudo-moar a643b8be1: OUTPUT: «OHAI!␤»

[04:23] <Xliff> m: sub aa { say "OHAI!" }; my $name = 'aa'; ::( "\&$name" )

[04:23] <camelia> rakudo-moar a643b8be1: ( no output )

[04:35] *** Kaiepi joined
[04:42] *** holyghost joined
[04:42] <holyghost> hi, good morning

[04:43] <Kaiepi> gm

[04:46] *** curan joined
[04:52] *** MasterDuke left
[04:58] *** qiqi left
[05:19] *** phogg left
[05:20] *** Xliff_ joined
[05:20] *** Xliff left
[05:21] *** skids left
[05:23] <holyghost> ok, docs for Bayes::Learn are about done, they're a bit knurky though

[05:23] <holyghost> 'lo Xliff, good night ! :-)

[05:25] *** phogg joined
[05:25] <holyghost> hello phogg

[05:32] *** qiqi joined
[05:39] *** kurahaupo_ joined
[05:41] *** veesh left
[05:42] *** kurahaupo left
[05:48] <holyghost> And the docs of Mathx::Stat have been written too

[05:49] <holyghost> I'll upload later on after fixing some tests

[05:51] *** abraxxa joined
[05:52] *** domidumont joined
[05:55] <Xliff_> m: my $a = 3; my $b = 0; my $c = do given $a { when 3 { Three' }; when $_ % 2.so.nod { 'Even' }; when $b.so.not { 'B'; } default { 'none' }; $c.say

[05:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 0; my $c = do given $a { when 3 { Three7⏏5' }; when $_ % 2.so.nod { 'Even' }; when␤    expecting any of:␤        infix␤        infix stopper␤   …»

[05:55] <Xliff_> m: my $a = 3; my $b = 0; my $c = do given $a { when 3 { 'Three' }; when $_ % 2.so.nod { 'Even' }; when $b.so.not { 'B'; } default { 'none' }; $c.say

[05:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3.nod { 'Even' }; when $b.so.not { 'B'; }7⏏5 default { 'none' }; $c.say␤»

[05:55] <Xliff_> m: my $a = 3; my $b = 0; my $c = do given $a { when 3 { 'Three' }; when $_ % 2.so.nod { 'Even' }; when $b.so.not { 'B' }; default { 'none' }; $c.say

[05:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3.not { 'B' }; default { 'none' }; $c.say7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loo…»

[05:55] <Xliff_> m: my $a = 3; my $b = 0; my $c = do given $a { when 3 { 'Three' }; when $_ % 2.so.nod { 'Even' }; when $b.so.not { 'B' }; default { 'none' }; }; $c.say

[05:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «Three␤»

[05:55] <Xliff_> m: my $a = 5; my $b = 0; my $c = do given $a { when 3 { 'Three' }; when $_ % 2.so.nod { 'Even' }; when $b.so.not { 'B' }; default { 'none' }; }; $c.say

[05:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'nod' for invocant of type 'Bool'. Did you mean 'not'?␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[05:55] <Xliff_> m: my $a = 5; my $b = 0; my $c = do given $a { when 3 { 'Three' }; when $_ % 2.so.not { 'Even' }; when $b.so.not { 'B' }; default { 'none' }; }; $c.say

[05:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «B␤»

[05:56] <Xliff_> m: my $a = 5; my $b = 0; my $c = do given $a { when 3 { 'Three' }; when $_ % 2.so.not { 'Even' }; when $b.defined && $b.so.not { 'B' }; default { 'none' }; }; $c.say

[05:56] <camelia> rakudo-moar a643b8be1: OUTPUT: «B␤»

[05:56] <Xliff_> m: my $a = 5; my $b; my $c = do given $a { when 3 { 'Three' }; when $_ % 2.so.not { 'Even' }; when $b.defined && $b.so.not { 'B' }; default { 'none' }; }; $c.say

[05:56] <camelia> rakudo-moar a643b8be1: OUTPUT: «none␤»

[05:58] *** abraxxa left
[05:59] <Xliff_> m: my $a = 5; my $b; my $c = do given $a { when > 3 { 'Three' }; when $_ % 2.so.not { 'Even' }; when $b.defined && $b.so.not { 'B' }; default { 'none' }; }; $c.say

[05:59] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix > instead.␤at <tmp>:1␤------> 3= 5; my $b; my $c = do given $a { when >7⏏5 3 { 'Three' }; when $_ % 2.so.not { 'Ev␤»

[05:59] *** ChoHag left
[05:59] <Xliff_> m: my $a = 5; my $b; my $c = do given $a { when $_ > 3 { 'Three' }; when $_ % 2.so.not { 'Even' }; when $b.defined && $b.so.not { 'B' }; default { 'none' }; }; $c.say

[05:59] <camelia> rakudo-moar a643b8be1: OUTPUT: «Three␤»

[05:59] *** abraxxa joined
[06:03] *** sauvin joined
[06:03] *** abraxxa left
[06:17] *** abraxxa joined
[06:18] <holyghost> I've uploaded Mathx::Stat 0.2.9 to CPAN, docs are in now, enjoy!

[06:19] <holyghost> the cpan-p6 bot is stupid with my additions, it'll show up much later

[06:21] <cpan-p6> New module released to CPAN! Mathx::Stat (0.2.9) by 03HOLYGHOST

[06:21] *** xiaoyafeng joined
[06:22] <holyghost> ^-- ah ok, nm

[06:28] <holyghost> It seems the bot parses my additions correctly again

[06:31] <Geth> ¦ doc: a795b55476 | (JJ Merelo)++ | doc/Type/Proc.pod6

[06:31] <Geth> ¦ doc: Fixes pid definition, closes #2821

[06:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a795b55476

[06:31] <synopsebot> Link: https://doc.perl6.org/type/Proc

[06:32] <holyghost> *lol*, go JJ ! :-)

[06:47] *** feldspath joined
[06:52] *** feldspath left
[06:52] *** feldspath joined
[07:13] *** [Sno] left
[07:18] *** feldspath_ joined
[07:19] *** feldspath left
[07:28] *** feldspath_ left
[07:28] *** zakharyas joined
[07:30] *** feldspath_ joined
[07:32] *** feldspath_ left
[07:33] *** feldspath_ joined
[07:36] *** arkaitz joined
[07:37] *** arkaitz left
[07:41] * lizmat clickbaits https://p6weekly.wordpress.com/2019/05/20/2019-20-newsletters-may/

[07:43] *** dakkar joined
[07:55] <cpan-p6> New module released to CPAN! Bayes::Learn (0.2.5) by 03HOLYGHOST

[07:55] <holyghost> ^-- includes docs, enjoy!

[07:55] <holyghost> ^-- I just need to add some more tests

[07:58] *** feldspath_ left
[07:59] *** vrurg left
[08:00] *** kurahaupo_ left
[08:10] <Xliff_> m: my @a = <a b c d>; .say for @a.keys;

[08:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «0␤1␤2␤3␤»

[08:12] *** qiqi left
[08:14] <Xliff_> m: sub a ($a, $b, :$c!) {}; &a.arity.say;

[08:14] <camelia> rakudo-moar a643b8be1: OUTPUT: «2␤»

[08:14] <Xliff_> m: sub a ($a, $b, $c) {}; &a.arity.say;

[08:14] <camelia> rakudo-moar a643b8be1: OUTPUT: «3␤»

[08:14] <Xliff_> m: sub a ($a, $b, $c?) {}; &a.arity.say;

[08:14] <camelia> rakudo-moar a643b8be1: OUTPUT: «2␤»

[08:16] *** qiqi joined
[08:42] *** antoniogamiz joined
[08:42] <antoniogamiz> o/

[08:43] *** veesh joined
[08:50] *** yqt joined
[09:04] *** kanbas joined
[09:22] *** Ven`` joined
[09:22] <Ven``> o/

[09:27] *** rindolf joined
[09:30] *** kanbas left
[09:31] *** takside joined
[09:33] *** reach_satori left
[09:39] *** feldspath_ joined
[09:52] *** Ven``` joined
[09:54] *** Ven`` left
[10:06] *** cono joined
[10:08] <cono> hi all, does any1 know why slurp definition dissapeared from Configure.pl ? Undefined subroutine &main::slurp called at Configure.pl line 48.

[10:10] <timotimo> huh, a version or features pragma got lost?

[10:10] <timotimo> oh, you may have to re-run Configure.pl in moar, nqp, rakudo, and perhaps do some aggressive submodule updating or something?!

[10:12] *** domidumont left
[10:12] <cono> previously I was needed just do Configure.pl --gen-moar --gen-nqp --backends=moar --make-install

[10:13] <cono> now it fails for me, if I put sub slurp { local $/; ...} it works

[10:13] *** xiaoyafeng left
[10:16] <timotimo> "git submodule status"?

[10:17] <cono>  5f0a01ae29557c533ab39d34a8ca6bce235ec091 3rdparty/nqp-configure (remotes/origin/HEAD)

[10:18] *** gabiruh left
[10:18] *** reach_satori joined
[10:19] <timotimo> that means it's checked out and at the right revision, right?

[10:19] <timotimo> yes, indeed

[10:19] <cono> yup

[10:20] <timotimo> odd. why does it b0rk on your machine but not in CI?

[10:21] <timotimo> oh, also, slurp isn't behind "use feature", it's an actual module, isn't it

[10:22] <cono> dunno, I usually write it by my own, for 3 lines of code, no need to use module :D

[10:22] <cono> I'm building rakudo on 3 different machines, and on all 3 its broken :(

[10:22] <cono> 2 linux boxes and 1 mac

[10:22] <timotimo> perhaps it's just --gen-moar or --gen-nqp that's broken and nobody else uses it?!

[10:23] <cono> could be

[10:23] <timotimo> lib/NQP/Config/Rakudo.pm

[10:23] <timotimo> 9:use NQP::Config qw<slurp read_config cmp_rev system_or_die run_or_die>;

[10:24] <cono> where is this lib/NQP ?

[10:24] <timotimo> that module has slurp in its @EXPORT_OK, but i don't see a "use" corresponding to slurp

[10:24] <timotimo> that's in build/ i think

[10:24] <timotimo> and the one with the EXPORT_OK in it is in 3rdparty-nqp-configure/lib/NQP/Config.pm

[10:26] <cono> grep "NQP::Config " Configure.pl :  use NQP::Config qw<system_or_die>;

[10:26] <cono> NQP::Config qw<system_or_die slurp>;

[10:26] <cono> fixes the problem

[10:28] *** reach_satori left
[10:28] <timotimo> it looks like slurp is only used when a config.default exists?

[10:29] <cono> yeah

[10:29] <timotimo> i don't seem to have that

[10:29] <cono> `/usr/bin/perl Configure.pl "--gen-moar" "--backends=moar" "--make-install" $*`

[10:29] <cono> pretty usable

[10:30] <timotimo> oh, you put that in there and then just running Configure.pl without arguments uses what's in there?

[10:31] <cono> yup

[10:31] <cono> https://github.com/rakudo/rakudo/pull/2911

[10:32] <timotimo> merged

[10:32] <timotimo> TYVM

[10:32] <cono> :thumbsup:

[10:32] <timotimo> does nqp have the same problem?

[10:34] *** reach_satori joined
[10:41] *** reach_satori left
[10:41] <cono> let me re-run and check

[10:43] <cono> everything works

[10:54] *** aborazmeh joined
[10:54] *** aborazmeh left
[10:54] *** aborazmeh joined
[10:56] <timotimo> ok, cool

[11:14] *** qiqi left
[11:16] *** noisegul_ is now known as noisegul

[11:26] *** zakharyas left
[11:27] *** antoniogamiz left
[11:27] *** kensanata joined
[11:29] *** reach_satori joined
[11:38] *** domidumont joined
[11:42] *** domidumont1 joined
[11:45] *** domidumont left
[11:55] *** MilkmanDan left
[11:57] *** wanderer_ joined
[11:57] <wanderer_> Hello!

[11:57] *** MilkmanDan joined
[11:59] <wanderer_> I found some time to try out Perl 6. The task I set for myself was a user-defined operator symbol for subfactorial as in https://en.wikipedia.org/wiki/Derangement.

[12:00] <AlexDaniel> :)

[12:00] <wanderer_> Not sure I can copy-paste here.

[12:00] <AlexDaniel> if it's not a single line of code it's better to use http://gist.github.com/

[12:01] <wanderer_> I’m unto it.

[12:02] <jast> FWIW, gist now requires an account to post, and there are plenty of alternatives that don't

[12:04] <wanderer_> https://glot.io/snippets/fcf5jkh4nl/raw/main.pl6

[12:04] <wanderer_> That’ll do.

[12:08] <wanderer_> Take notice of the anonymous function passed into map... Ugh. 💕😭

[12:19] *** syb joined
[12:19] <masak> wanderer_: `is tighter(&infix:<*>)` -- that's still pretty loose for a prefix :)

[12:20] *** syb left
[12:20] <masak> for example, `!2 ** 3` would mean `!(2 ** 3)`

[12:20] <masak> against, I think, most people's expectations

[12:21] <masak> aside from that, it looks good, IMO :)

[12:21] <wanderer_> Thanks!

[12:22] <masak> not sure why your prefix:<!> doesn't conflict with the built-in one...

[12:22] <wanderer_> Are there any published benchmarks for the MoarVM in comparison to some other JIT compiler?

[12:23] <wanderer_> As in https://benchmarksgame-team.pages.debian.net/benchmarksgame/which-programs-are-fast.html

[12:23] <wanderer_> I thought it might. I’m going by intuition. That is literally my first ever script.

[12:26] <cono> its getting better every week. I follow it all the time and running my sandbox programs, and really like the progress1

[12:27] *** john_parr left
[12:29] <wanderer_> masak_: Is it because I must declare the argument type and return type for prefix:<!>?

[12:30] <wanderer_> Would you also recommend `is tighter(&postfix:<**>`?

[12:33] <wanderer_> Or `is tighter(&infix:<**>)` or whatever...

[12:34] <masak> I wouldn't anchor it in an infix at all; I'd probably `is equiv(&prefix:<?>)` or some such

[12:35] <masak> the (tight) prefixes are all on the same precedence level, and that's likely the one you want to be on

[12:36] <cpan-p6> New module released to CPAN! Term::Form (1.2.4) by 03KUERBIS

[12:50] <wanderer_> masak_:  I’m now trying to get !3**3 to return `8` under `equiv(&prefix:<?>)`. It won’t. Not even under `tighter(&infix:<**>)`.

[12:54] *** zakharyas joined
[12:57] *** Ven```` joined
[12:59] *** reach_satori left
[12:59] *** Ven``` left
[13:00] *** pamplemousse joined
[13:05] *** grayrider left
[13:05] *** reach_satori joined
[13:08] *** HarmtH left
[13:08] *** [Sno] joined
[13:10] *** reach_satori left
[13:11] *** HarmtH joined
[13:14] *** curan left
[13:20] <lembark> I'm working to bencmark Moar now, both on memory use and performance.

[13:20] <lembark> Q: What is an example of what you'd like to do with Perl6?

[13:22] <timotimo> oh hey lembark 

[13:22] <timotimo> good to see you here

[13:23] <wanderer_> Mostly numerical computation.'

[13:25] <jnthn> Also object-y stuff (instantiation, accessors, method calls, etc.)

[13:26] <jnthn> Perhaps hash/array bits too, given those are widely used

[13:27] *** vrurg joined
[13:27] <Ven````> APIs, serving static content too :)

[13:29] *** sena_kun joined
[13:31] *** [Sno] left
[13:32] <timotimo> lembark: have you seen perl6-bench? it has a bunch of microbenchmarks, perhaps there's a little bit of inspiration to be had here or there

[13:33] <timotimo> also, will you present the code you're using to us to see if you're using idioms that are slower than what an experienced perl6 user would write?

[13:35] <lembark> Trying it now...

[13:42] <timotimo> wanderer_: did you know about this:

[13:43] <timotimo> m: say (^9).combinations(*).elems; say (^9).permutations.elems

[13:43] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'Int' for invocant of type 'Whatever'␤  in block <unit> at <tmp> line 1␤␤»

[13:43] <timotimo> m: say (^9).combinations(9).elems; say (^9).permutations.elems

[13:43] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤362880␤»

[13:43] <timotimo> oh, haha

[13:43] <timotimo> not the same thing

[13:45] <Ven````> m: say ^9 .combinations(9).elems

[13:45] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[13:45] <Ven````> m: say ^9 .combinations(9)

[13:45] <camelia> rakudo-moar a643b8be1: OUTPUT: «((0 1 2 3 4 5 6 7 8))␤»

[13:46] <Ven````> I forgot about that. Would've been helpful for some code-golfing techniques...

[13:48] <wanderer_> m: say 'Is there a built-in REPL in this chat?'

[13:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «Is there a built-in REPL in this chat?␤»

[13:48] <wanderer_> Oh, dear...

[13:48] <wanderer_> Yes, there is.

[13:49] <timotimo> yup! :)

[13:52] <wanderer_> I think some of you should contribute Perl 6 programs to _The Computer Language Benchmarks Game_. The language should deserves a spot here: https://benchmarksgame-team.pages.debian.net/benchmarksgame/which-programs-are-fast.html

[13:53] *** [Sno] joined
[13:55] <timotimo> if the game wants the fastest version of an algo written in each language, it'd be fine to write programs with lots of nqp:: ops to get more speed but also a program that looks like nothing any regular perl6 user would prite

[13:55] <timotimo> write*

[13:57] *** Kaypie joined
[13:57] *** |Sno| joined
[13:58] *** dogbert17 joined
[13:58] *** Some-body_ joined
[13:59] *** kaare__ joined
[13:59] *** feldspath joined
[14:00] *** simcop2387_ joined
[14:00] *** jargan joined
[14:00] *** titsuki_ joined
[14:00] *** nebuchad` joined
[14:00] *** oftl_ joined
[14:01] *** klapperl_ joined
[14:01] *** markk joined
[14:01] *** Woodi_ joined
[14:01] *** cosimo_ joined
[14:01] *** sca_ joined
[14:01] *** MikeyG joined
[14:01] *** syntaxma1 joined
[14:01] *** broquain1 joined
[14:01] *** jeek_ joined
[14:02] *** ccntrq joined
[14:03] *** xi- joined
[14:04] *** andrewalker_ joined
[14:04] *** exodist_ joined
[14:04] *** robins joined
[14:05] *** fvox joined
[14:06] *** feldspath_ left
[14:06] *** sauvin left
[14:06] *** Kaiepi left
[14:06] *** kaare_ left
[14:06] *** SqrtNegI_ left
[14:06] *** andrewalker left
[14:06] *** dogbert11 left
[14:06] *** Actualey` left
[14:06] *** klapperl left
[14:06] *** DarthGandalf left
[14:06] *** robinsmidsrod left
[14:06] *** TreyHarris left
[14:06] *** llfourn left
[14:06] *** jast left
[14:06] *** cosimo left
[14:06] *** APic left
[14:06] *** xi| left
[14:06] *** oftl left
[14:06] *** Exodist left
[14:06] *** go|dfish left
[14:06] *** raydiak__ left
[14:06] *** markk_ left
[14:06] *** sca left
[14:06] *** exodist_ is now known as Exodist

[14:06] *** Some-body_ is now known as DarthGandalf

[14:06] *** jargan is now known as jast

[14:06] *** llfourn joined
[14:06] *** [Sno] left
[14:06] *** syntaxman left
[14:06] *** Ekho left
[14:06] *** Woodi left
[14:06] *** nebuchadnezzar left
[14:06] *** ccntrq- left
[14:06] *** Mikey_ left
[14:06] *** fvox_ left
[14:06] *** titsuki left
[14:06] *** broquaint left
[14:06] *** simcop2387 left
[14:06] *** jeek left
[14:06] *** simcop2387_ is now known as simcop2387

[14:06] *** cpan-p6 left
[14:07] *** cpan-p6 joined
[14:07] *** cpan-p6 left
[14:07] *** cpan-p6 joined
[14:07] *** cgfbee left
[14:07] <timotimo> welcome to netsplit time

[14:07] *** robins is now known as robinsmidsrod

[14:07] *** Ekho- joined
[14:08] *** cgfbee joined
[14:09] *** irdr left
[14:09] <Ven````> weeeeeeeee

[14:09] *** nebuchad` is now known as nebuchadnezzar

[14:10] *** irdr joined
[14:12] *** APic joined
[14:12] *** go|dfish joined
[14:12] *** TreyHarris joined
[14:12] *** sauvin joined
[14:13] *** raydiak__ joined
[14:16] *** domidumont joined
[14:18] *** domidumont1 left
[14:19] *** wanderer_ left
[14:36] *** mowcat joined
[14:37] *** cwilson joined
[14:41] <masak> timotimo: today, our guests are... hold on... no, wait...

[14:52] <Ven````> .oO( Join-part revolving guests )

[14:57] <timotimo> we could brag about how many people come and go

[14:59] <moritz> .oO( you can /quit any time you like, but you can neeeever /leave )

[15:00] *** domidumont left
[15:00] <Ven````> .oO( We're in for the long run, but we do take breaks )

[15:01] *** kurahaupo joined
[15:02] *** khisanth_ left
[15:05] *** aborazmeh left
[15:10] *** Ekho- is now known as Ekho

[15:13] <timotimo> m: my @foo is default(1); @foo[2] = 1; my int @bar = @foo

[15:13] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot unbox a type object (VMNull) to an int.␤  in block <unit> at <tmp> line 1␤␤»

[15:13] <timotimo> bisect: my @foo is default(1); @foo[2] = 1; my int @bar = @foo

[15:13] <bisectable6> timotimo, Bisecting by exit code (old=2015.12 new=672fd6e). Old exit code: 0

[15:13] <bisectable6> timotimo, bisect log: https://gist.github.com/e62aa038034a25e2c6ce383075fb1236

[15:13] <bisectable6> timotimo, (2018-04-08) https://github.com/rakudo/rakudo/commit/b5318e6ef2c42fd08341cba8e4da61e884b0d5f6

[15:14] *** khisanth_ joined
[15:14] <timotimo> anybody wants to fix this? :)

[15:21] <sena_kun> timotimo, I don't know, but can I help? :)

[15:22] <sena_kun> 6c: my @foo is default(1); @foo[2] = 1; my int @bar = @foo

[15:23] <committable6> sena_kun, https://gist.github.com/c4e46c06a5d4da89a467bfa30e35cd3f

[15:24] <timotimo> sure you can

[15:25] <timotimo> one sec

[15:26] <timotimo> https://github.com/rakudo/rakudo/blob/master/src/core/native_array.pm6#L656 - this here blindly tries to nqp::unbox_i something in the $!reified of the List, but if there's holes in the list, there'll be a VMNull there

[15:26] <timotimo> of course you need to change the code in the script that generates these files

[15:26] <timotimo> tools/build/makeNATIVE_ARRAY.pm6

[15:26] <sena_kun> I see, thanks

[15:27] <sena_kun> do we have a ticket for this?

[15:27] <timotimo> not yet

[15:27] <timotimo> well

[15:27] <timotimo> i didn't look

[15:27] <timotimo> a good fix would also not degrade performance for lists without a default

[15:31] *** reach_satori joined
[15:35] *** feldspath left
[15:38] *** kensanata left
[15:49] *** discord6 left
[15:49] *** discord6 joined
[15:50] * sena_kun wasn't able to find such a ticket

[15:55] <lizmat> sena_kun timotimo if you don't feel up to it, make a ticket and assign it to me

[15:56] <sena_kun> lizmat, I am interesting in looking at the code and trying to think, but as I know almost nothing about Rakudo internals, I will be super-grateful for advices. Also, it is very likely that I will be unable to solve the issue and handle it over then. :)

[15:56] <lizmat> sena_kun: works for me

[15:56] <sena_kun> I am opening a ticket nonetheless...

[15:58] <sena_kun> m: my @foo; @foo[0] = 5; @foo[2] = 14; my int @bar = @foo

[15:58] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot unbox a type object (VMNull) to an int.␤  in block <unit> at <tmp> line 1␤␤»

[15:58] <sena_kun> it seems that `is default` is not even necessary, just a hole is enough

[16:01] *** abraxxa left
[16:01] *** abraxxa joined
[16:02] *** Ven````` joined
[16:03] *** Ven````` is now known as Ven``

[16:04] <lizmat> sena_kun: I guess the safest would be to *not* bind if the value is nqp::isnull

[16:04] <sena_kun> a ticket is opened at https://github.com/rakudo/rakudo/issues/2912

[16:05] *** Ven```` left
[16:11] *** yqt left
[16:13] <lembark> Q: Is there any way to write a test to prefer ./lib without having to set PERL6LIB prior to executing the tests?

[16:14] <lembark> use lib requires a hard-coded value, which doesn't always work.

[16:15] <moritz> what's wrong with "use lib 'lib';"?

[16:15] <moritz> it makes assumptions about the working directory, but I think that's workable

[16:15] <lembark> e.g., ./t/x/y/01-frobnicate.t.

[16:16] <moritz> you can use non-constant expressions with use lib, as long as they can be evaluated at compile time

[16:16] <lembark> Rather use FindBin at which point I can use Bin.

[16:16] <lembark> I can have the list included via use.

[16:17] <lembark> Question is how to add an entry to $*Repo in BEGIN block.

[16:17] <lembark> I may also have multiple dir's above the current one w/in a project. Would like to find things there without having to hard-code and update them every time a new part of the project is added.

[16:18] <lembark> is there nothing anywhere which can manage $*REPO?

[16:19] *** reach_satori left
[16:19] <timotimo> lizmat: if you just don't bind anything, then that's rather strange semantics for STOREing into arrays that already have some values in them

[16:20] <lizmat> timotimo: good point  :-)

[16:20] <timotimo> lembark: "use lib" is how you manage REPO, i think?

[16:20] <lizmat> then we can use nqp::ifnull, we just need to tell the generator somehow what the "empty" value is

[16:20] <timotimo> right

[16:21] <timotimo> can the "is default" also be code that runs to generate value, or just plain values that get cloned?

[16:21] <lizmat> plain values, at least in the current situation

[16:21] <lizmat> if you make the default a Callable, then that Callable is what you'll get

[16:21] *** cpan-p6 left
[16:22] <lizmat> which may be useful for the default case in dispatch tables, specifically when based on hashes

[16:22] *** cpan-p6 joined
[16:22] *** cpan-p6 left
[16:22] *** cpan-p6 joined
[16:22] <timotimo> right

[16:23] <moritz> lembark: I've looked through https://github.com/moritz/perl6-all-modules/ for mentions of $*REPO, and most only read it. github/ugexe/Perl6-CompUnit--Repository--Github and github/zostay/p6-CompUnit-DynamicLib might be more interesting to you

[16:23] * lizmat tries to remember the name of the load balancing algorithm that jnthn had in mind for hyper

[16:24] <timotimo> round robin? exponential back-off? TCP slow-start? %)

[16:24] <timotimo> none of these make too much sense

[16:25] <moritz> winner-takes-it-all

[16:25] <timotimo> first-come-first-worm

[16:25] <timotimo> i wonder if we should try to re-use the batcher and combiner from HyperSeq for feeds

[16:25] <lembark> Checking it now, thank you.

[16:26] <timotimo> lembark: you can always "constant thing-to-use = do { #`( this code runs at compile time, because of the ‘constant’ keyword ) }; use lib thing-to-use

[16:27] <lizmat> timotimo: re-use of something we want to re-imagine, does not look very useful

[16:28] <timotimo> my thoughts are that the difference between hyper and feed are in the stages in between, not the beginning and end

[16:28] <timotimo> for hyper, you batch the input up and feed them to multiple workers; each worker does the desired work from start to finish and submits to the combiner

[16:29] <timotimo> for feed, you batch the input up and feed it to the first worker, which does the first bit of work. then the first worker passes the batch to the second worker, and at the end the combiner puts them back together

[16:29] <lizmat> https://gist.github.com/lizmat/8652e4a403fffe64e84b392b31cc6ad4  is an implementation of a parallel feed operator

[16:29] <lizmat> timotimo: ^^

[16:30] <lizmat> brb&

[16:31] <timotimo> at first look that seems good

[16:32] *** molaf joined
[16:35] <Geth> ¦ ecosystem/master: 7 commits pushed by (Steven Lembark)++, (Juan Julián Merelo Guervós)++, lembark++

[16:35] <Geth> ¦ ecosystem/master: 155615b1f3 | Add FindBin to ecosystem

[16:35] <Geth> ¦ ecosystem/master: a94534a410 | Changes URL to raw

[16:35] <Geth> ¦ ecosystem/master: 6f62ba39d3 | Add FileSystem::Parent to ecosystem

[16:35] <Geth> ¦ ecosystem/master: 35a812887f | update URL for FindBin & parent-dirs

[16:35] <Geth> ¦ ecosystem/master: e48da59ce0 | Merge branch 'master' into master

[16:35] <Geth> ¦ ecosystem/master: c144f07c96 | Merge branch 'master' into master

[16:35] <Geth> ¦ ecosystem/master: 12c3d27089 | Merge pull request #443 from lembark/master

[16:35] <Geth> ¦ ecosystem/master: review: https://github.com/perl6/ecosystem/compare/f841b0170d66...12c3d27089f1

[16:37] <lembark> ignore it. simplest fix was to remove FindBin as it lacks a ::.

[16:37] <lembark> Sanity check: if a module is on CPAN can it be located by zef, or is zef restricted to only files in the ecosystem?

[16:47] *** dakkar left
[16:49] *** pamplemousse left
[16:49] *** pamplemousse joined
[16:51] <lizmat> lembark: zef knows about both

[16:51] *** abraxxa left
[16:51] <lembark> Thank you.

[16:56] *** |oLa| left
[17:10] *** zakharyas left
[17:12] *** |oLa| joined
[17:12] <sena_kun> lizmat, how to run makeNATIVE_ARRAY correctly?

[17:15] <lizmat> perl6 tools/build/makeNATIVE_ARRAY.p6 <src/core/native_array >new && mv new src/core/native_array.pm6

[17:15] <lizmat> oops

[17:15] <lizmat> perl6 tools/build/makeNATIVE_ARRAY.p6 <src/core/native_array.pm6 >new && mv new src/core/native_array.pm6

[17:16] <sena_kun> also, there is a thing I don't understand...

[17:16] <moritz> quantum field theory? :D

[17:17] <sena_kun> in the code that throws we are using Array(my @foo; @foo[1] = 5;), but the suggested place for a patch is for List candidate... So I was wondering about this one.

[17:17] <sena_kun> moritz, yup,this one too.

[17:18] *** |oLa| left
[17:19] <lizmat> sena_kun: hmmm... maybe we don't need the @values candidate then ?

[17:19] <lizmat> worth a try  :-)

[17:27] <lucs> Can I run 'bisect' in a private channel?

[17:27] <timotimo> you can do it in #whateverable

[17:29] *** |oLa| joined
[17:30] *** |oLa| left
[17:31] *** robertle joined
[17:31] <lucs> timotimo: What's that channel for exacty?

[17:31] <timotimo> the whateverable bots

[17:32] *** Ven``_ joined
[17:32] <lucs> Sure, mais encore? (pardon my French, but it's really the best question :-)

[17:32] <lucs> Lets say: tell me more.

[17:33] <lucs> Is it just a place to poke those bots more privately than here?

[17:33] *** vrurg left
[17:34] <sena_kun> lucs, yes, to not spam this channel with a lot of queries

[17:34] <lucs> Makes sense, thanks.

[17:34] <sena_kun> lucs, it isn't too "private" as it is a public channel, but if you don't want to disturb anyone, that's the rigt channel

[17:35] <sena_kun> *right

[17:37] <lucs> Welp, turns out my bisection turned up no problem, yet I do have a problem here (perhaps due to my 32-bit system here -- will attempt to bisect here).

[17:37] <timotimo> it's also the channel for whateverable development

[17:37] <timotimo> like, debugging versions of the bots will go there, but not in the other perl6 channels

[17:38] *** coldforged joined
[17:38] <coldforged> hello everybody..

[17:38] <coldforged> i just joined to check up on perl6

[17:38] <sena_kun> coldforged, o/

[17:38] *** nadim joined
[17:38] <coldforged> and am wondering if there's a stable version i can use in production?

[17:39] <coldforged> of freebsd 11 servers

[17:39] <coldforged> /of/on/

[17:39] <timotimo> aye, you can run the rakudo star releases, they are stable

[17:40] <coldforged> oh great! been wanting to get started on it. been using perl since the 90's for alsorts of things, including web apps 

[17:41] <coldforged> as i understand it, 6 is something different from the previous versions

[17:43] <coldforged> is it in the freebsd ports tree already?

[17:43] <timotimo> i'm not sure about bsd, but we have someone working on bsd stuff

[17:44] <timotimo> Kaypie: can you help?

[17:44] <coldforged> oh i see it is! :) lang/rakudo

[17:45] <timotimo> cool

[17:45] <coldforged> then it's just a question if it's the current one

[17:45] <coldforged> bsd ports are always behind a little

[17:46] <Kaypie> i'm pretty sure it's in ports but it's an old version

[17:46] *** Kaypie is now known as Kaiepi

[17:46] <coldforged> so i'd have to get a release and compile it myself

[17:47] <Kaiepi> on openbsd and netbsd they're at least a year old, which is before 6.d

[17:47] <Kaiepi> yes

[17:47] <coldforged> these ones will do? http://rakudoport.sourceforge.net/

[17:48] *** feldspath joined
[17:48] <coldforged> ah wait. that's the ports again. 

[17:49] <coldforged> is there a page that will tell me what to install if i go with source? as i see it, there's a couple of things i will have to compile and install

[17:50] <coldforged> like parrot, rakudo..

[17:50] <moritz> parrot is dead

[17:50] <sena_kun> parrot is no longer a thing for a while. there is an instruction at https://perl6.org/downloads/ <- see "installing from sources"

[17:51] <moritz> as a rule of thumb, everthing about perl 6 that mentions parrot is sufficiently out of date to best be ignored

[17:51] <coldforged> maybe if i understand it all better, i can make a port (or at least a tgz file) for it 

[17:51] <moritz> the build order is MoarVM -> nqp -> rakudo

[17:51] <coldforged> so, don't bother with parrot and only go for rakudo

[17:52] *** natrys joined
[17:52] <moritz> and if you download rakudo from source, and run perl Makefile.pl --gen-moar, it'll download and build MoarVM and NQP for you

[17:52] <coldforged> that's perl.. 5? (the makefile) ;)

[17:53] <coldforged> i will go and try on a virgin freebsd vm, and see what happend!

[17:53] <coldforged> happens..

[17:53] <moritz> yes

[17:53] <coldforged> thanks for the info! :)

[17:54] <moritz> fwiw perl5 is only used at build time

[17:55] <coldforged> i guess that's the case up to the point that perl6 is installed by default in the OS

[17:55] <coldforged> at the moment, it's 5 allover

[17:55] <coldforged> maybe push the fbsd guys a bit and move to 6! 

[17:57] <coldforged> i take it, not all modules of 5 are available in 6.. but is there a thing like cpan up and running for 6 already?

[17:58] <sena_kun> coldforged, 1)Perl 6 modules can be uploaded on CPAN; 2)there is a github-based ecosystem too that is slightly easier to use, but that's preference; 3)currently most popular package manager works with both;

[18:01] <timotimo> coldforged: if you use a --prefix that's system-wide, please be advised that --gen-moar will build *and install* moar and then nqp, which will fail if you don't have write access. yes, we are aware that doing "make install" during a Configure.pl is bad, but we haven't been able to make it much better yet.

[18:05] *** pecastro joined
[18:07] *** adu joined
[18:09] <lembark> Q: Anyone know where "CompUnit::RepositoryRegistry" is documented?

[18:09] *** feldspath left
[18:09] <moritz> if it's not documented on docs.perl6.org, it's not documented at all

[18:10] <timotimo> yeah, hopefully/likely there are tests

[18:13] *** Xliff_ is now known as Xliff

[18:13] <Xliff> \o

[18:15] *** sena_kun left
[18:16] *** sena_kun joined
[18:27] *** ravenous_ joined
[18:27] *** ravenous_ left
[18:28] *** ravenous_ joined
[18:30] *** sauvin left
[18:31] *** pamplemousse_ joined
[18:31] *** pamplemousse_ left
[18:33] *** pamplemousse_ joined
[18:34] *** pamplemousse left
[18:34] *** pamplemousse_ is now known as pamplemousse

[18:36] *** natrys left
[18:36] *** natrys joined
[18:38] <nadim> Evening everyone, I am a bit curious about what a Rakudo::Internals::LoweredAwayLexical is (found in a CallFrame.$.my) as  well as ForeignCode (found in a Backtrace) 

[18:38] *** sena_kun left
[18:39] *** sena_kun joined
[18:39] *** molaf left
[18:40] <timotimo> nadim: the "LoweredAwayLexical" is when a lexical value was decided to not need a full lexical because no inner scopes were accessing it

[18:40] <nadim> ahhhh!

[18:40] <timotimo> by the optimizer

[18:46] <nadim> timotimo: why differentiate between a lexical that's used in the current scope and one that is not used in inner scopes?

[18:47] <timotimo> locals are a whole lot cheaper

[18:47] <timotimo> every frame has one piece of memory for locals ando ne piece of memory for lexicals

[18:47] <timotimo> when a frame is left, the locals can be thrown away, but lexicals have to be kept around for things like closures

[18:48] <nadim> OK

[18:51] <timotimo> and the dynamic optimizer knows more about handling locals compared to lexicals

[18:51] <nadim> and ForeignCode? that poped up in  a BackTrace::Frame->$.code->$!do and gotmy dumper in a loop trying to dump it. 

[18:52] <nadim> Not that I think people are going to use DDT to dump BackTraces ;)

[18:55] <timotimo> i think ForeignCode is more or less just an object you can barely do anything at all with, except maybe invoke it

[19:06] *** yqt joined
[19:06] *** espadrine_ joined
[19:08] *** SqrtNegInf joined
[19:08] *** Ven``` joined
[19:10] *** feldspath joined
[19:10] *** Ven`` left
[19:13] *** reach_satori joined
[19:15] *** |oLa| joined
[19:17] *** reach_satori_ joined
[19:17] <nadim> timotimo++

[19:19] *** reach_satori left
[19:20] *** DarthGandalf left
[19:21] *** DarthGandalf joined
[19:24] <coldforged> timotimo: ah thnx! :) but i will be installing on a local VM, which i have root privilege on. So no problem with write access :)

[19:24] <timotimo> that will also run the compilation as root, which isn't pretty

[19:25] <timotimo> i generally just have a --prefix that points into my home directory, in my case ~/perl6/install

[19:25] *** kaare__ left
[19:25] <coldforged> and why not borrow from the ports idea.. you start with perl and do the rest as 'dependencies' with their own install routine

[19:25] *** kaare__ joined
[19:26] <coldforged> what is the problem with running the compilation as root? 

[19:27] <coldforged> as long as the perl scripts run with the user rights..

[19:28] *** ravenous_ left
[19:31] *** |oLa| left
[19:31] <ufobat_> BEGIN and CHECK blocks are compile time?

[19:32] <lizmat> https://docs.perl6.org/syntax/%20CHECK

[19:34] <timotimo> what the heck is the space in front of CHECK for there?

[19:35] <coldforged> whoah.. i see i have to do some catching up on stuff in 6 alright.. 

[19:35] <lizmat> not sure

[19:35] <nadim> m: multi sub xx(){} ; say %xx.package

[19:35] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%xx' is not declared. Did you mean '&xx'?␤at <tmp>:1␤------> 3multi sub xx(){} ; say 7⏏5%xx.package␤»

[19:35] <coldforged> looking at pdf::api6... the api6.pm makes no sense to me in some things lol

[19:36] <nadim> m: multi sub xx(){} ; say &xx.package

[19:36] <camelia> rakudo-moar a643b8be1: OUTPUT: «(GLOBAL)␤»

[19:43] *** molaf joined
[19:54] <nadim> m: class C{multi sub xx(){}} ; dd C ; dd C::xx

[19:54] <camelia> rakudo-moar a643b8be1: OUTPUT: «C␤Could not find symbol '&xx'␤  in block <unit> at <tmp> line 1␤␤»

[19:55] <nadim> m: class C{ multi sub xx(){} } ; dd C; dd &C:xx

[19:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    C:xx used at line 1␤␤»

[19:55] <nadim> m: class C{ multi sub xx(){} } ; dd C; dd &C::xx

[19:55] <camelia> rakudo-moar a643b8be1: OUTPUT: «C␤Any element{'&xx'} = Any␤»

[19:56] *** robertle left
[19:57] <nadim> can someoneenlighten me? I though &C::xx would be a sub but it say the above ^

[19:57] <timotimo> it has to be an "our sub" i think?

[19:57] <timotimo> m: class C{ our multi sub xx(){} } ; dd C; dd &C::xx

[19:57] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use 'our' with individual multi candidates. Please declare an our-scoped proto instead␤at <tmp>:1␤------> 3class C{ our multi sub xx(){}7⏏5 } ; dd C; dd &C::xx␤    expecting any of:…»

[19:58] <timotimo> m: class C{ our proto xx(){*}; multi sub xx(){} } ; dd C; dd &C::xx

[19:58] <camelia> rakudo-moar a643b8be1: OUTPUT: «C␤Sub xx = proto sub xx {*}␤»

[19:58] <timotimo> m: class C{ our proto xx(){*}; multi sub xx(){ say "hello"} } ; dd C; dd &C::xx; C::xx()

[19:58] <camelia> rakudo-moar a643b8be1: OUTPUT: «C␤hello␤Sub xx = proto sub xx {*}␤»

[19:58] <timotimo> ^- out of order because dd goes to stderr and say goes to stdout

[20:00] <nadim> m: class C{ sub xx(){} } ; dd C; dd &C::xx

[20:00] <camelia> rakudo-moar a643b8be1: OUTPUT: «C␤Any element{'&xx'} = Any␤»

[20:00] <nadim> m: class C{ method xx(){} } ; dd C; dd &C::xx

[20:00] <camelia> rakudo-moar a643b8be1: OUTPUT: «C␤Any element{'&xx'} = Any␤»

[20:00] <timotimo> methods are never in the package

[20:01] <timotimo> m: class C{ our sub xx(){} } ; dd C; dd &C::xx

[20:01] <camelia> rakudo-moar a643b8be1: OUTPUT: «C␤Sub xx = sub xx { #`(Sub|76585552) ... }␤»

[20:01] *** yqt left
[20:05] *** johnjohn101 joined
[20:06] *** telex left
[20:07] *** telex joined
[20:07] <nadim> where are they then?

[20:07] *** Kaiepi left
[20:08] *** Kaiepi joined
[20:09] *** ufobat__ joined
[20:12] *** ufobat_ left
[20:14] *** feldspath left
[20:15] <timotimo> they are in the metaobject's method table

[20:16] <timotimo> m: .name.say for Array.HOW.^roles

[20:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «Required named parameter 'local' not passed␤  in block <unit> at <tmp> line 1␤␤»

[20:16] <timotimo> m: .name.say for Array.HOW.^roles(:local)

[20:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'name' for invocant of type '<anon>'␤  in block <unit> at <tmp> line 1␤␤»

[20:16] <timotimo> m: .^name.say for Array.HOW.^roles(:local)

[20:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «<anon>␤»

[20:16] <timotimo> ...

[20:16] *** sena_kun left
[20:17] *** xinming joined
[20:20] *** xinming_ left
[20:35] *** natrys left
[20:40] *** netrino_ joined
[20:45] *** molaf left
[20:47] <lucs> I have some questions, but I'm not sure what they are...: https://gist.github.com/lucs/9bf69520a94f8472fdaed4cdcb451973

[20:50] <lucs> It took me a while to whittle it down to that, and now I must go do a bit of shopping.

[20:50] <timotimo> lucs: hm. spesh/jit/exprjit/something problem?

[20:50] <lucs> timotimo: Um, not sure what you mean...

[20:51] <timotimo> dynamic optimizer getting confused maybe?

[20:51] <timotimo> you can turn it all off with MVM_SPESH_DISABLE=yes or the entire jit with MVM_JIT_DISABLE=1 or only the exprjit with MVM_JIT_EXPR_DISABLE=1

[20:51] <lucs> Wow, no idea, really, I don't understand the implementation at all :/

[20:51] *** MasterDuke joined
[20:52] *** MasterDuke left
[20:52] *** MasterDuke joined
[20:52] <lucs> Okay, I'll try later and let you know -- gotta go get food!

[20:52] <timotimo> good luck!

[20:53] <jnthn> Well, if it's on 32-bit then it won't be JIT; the JIT only works on x64 :)

[20:53] <timotimo> true

[20:53] *** Ven``_ left
[20:54] <ugexe> that might be bisectable unlike the windows failure

[20:54] <ugexe> er, bisectable doesnt do moarvm commits though

[20:54] <timotimo> it can give a start at least

[20:54] *** netrino joined
[20:54] <ugexe> well if its like the windows failure its the Int optimizations in moarvm from a few days ago

[20:55] *** netrino left
[20:55] <jnthn> If we can figure out one, I guess an immediate workaround will be to #ifdef it to the slower thing on Windows

[20:55] <jnthn> *which one

[20:55] *** netrino joined
[20:55] <ugexe> yeah i was gonna bisect manually but i can't git clone at the hotel im staying at :/

[20:55] *** netrino_ left
[20:56] <jnthn> "No noise after 10pm. No dogs. No git clone."

[20:56] <ugexe> or they'll charge me $4 per git clone

[20:56] <timotimo> urgh

[21:04] *** molaf joined
[21:06] *** sena_kun joined
[21:08] *** netrino_ joined
[21:13] *** netrino left
[21:13] *** netrino_ left
[21:13] *** netrino joined
[21:16] <Geth> ¦ problem-solving: rba self-assigned perl6-infra: rules and guidelines https://github.com/perl6/problem-solving/issues/28

[21:17] <Geth> ¦ problem-solving: rba assigned to maettu Issue perl6-infra: rules and guidelines https://github.com/perl6/problem-solving/issues/28

[21:17] <Geth> ¦ problem-solving: rba self-assigned perl6-infra: group of services: DNS hosting https://github.com/perl6/problem-solving/issues/29

[21:17] <Geth> ¦ problem-solving: rba assigned to maettu Issue perl6-infra: group of services: DNS hosting https://github.com/perl6/problem-solving/issues/29

[21:18] <Geth> ¦ problem-solving: rba self-assigned perl6-infra: service: Password handling https://github.com/perl6/problem-solving/issues/30

[21:18] <Geth> ¦ problem-solving: rba assigned to maettu Issue perl6-infra: service: Password handling https://github.com/perl6/problem-solving/issues/30

[21:18] *** netrino left
[21:19] *** netrino joined
[21:20] *** netrino left
[21:20] *** netrino joined
[21:24] *** rindolf left
[21:34] *** espadrine_ left
[21:38] *** feldspath joined
[21:45] <cpan-p6> New module released to CPAN! FileSystem::Parent (0.3.0) by 03LEMBARK

[21:55] *** pamplemousse left
[22:03] *** stux|RC-- joined
[22:05] *** johnjohn101 left
[22:05] *** stux|RC left
[22:07] <ugexe> alright im going to bisect via appveyor + rakudo PRs

[22:12] <ugexe> noooo

[22:13] <ugexe> Configure.pl looks broke on appveyor now

[22:13] <ugexe> on moar master

[22:13] <ugexe> not sure how thats possible

[22:13] *** Ven```` joined
[22:14] <ugexe> ah ha, i need a slightly older nqp

[22:15] *** Ven``` left
[22:26] *** mowcat left
[22:28] <MasterDuke> moritz: looks like perl6-all-modules hasn't been updated since april 19th

[22:36] *** pecastro left
[22:38] *** feldspath left
[22:55] *** netrino left
[22:59] *** gabc left
[23:03] <Elronnd> is there something like the expect lib for perl6

[23:04] *** tobs left
[23:06] *** sena_kun left
[23:08] *** adu left
[23:11] *** Kaiepi left
[23:12] *** Kaiepi joined
[23:18] *** tobs joined
[23:28] *** netrino joined
[23:38] *** aborazmeh joined
[23:38] *** aborazmeh left
[23:38] *** aborazmeh joined
[23:40] *** Sgeo_ joined
[23:43] *** Sgeo__ left
[23:49] *** DarthGandalf left
