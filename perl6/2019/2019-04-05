[00:03] *** mowcat joined
[00:06] *** Kaiepi left
[00:12] *** Kaiepi joined
[00:15] *** MidCheck left
[00:19] *** zachk left
[00:34] *** pecastro left
[00:44] *** lucasb left
[00:45] *** success joined
[00:46] *** success is now known as Guest55896

[00:48] *** MasterDuke joined
[00:48] *** MasterDuke left
[00:48] *** MasterDuke joined
[00:50] *** w_richard_w joined
[00:58] <guifa> So long story short ‚Ä¶ using EVAL in phasers in modules is ‚Ä¶ dicey. Went about a totally different way and it‚Äôs working fine now, although I should probably learn NQP so I can better parse it 

[01:04] *** mowcat left
[01:18] *** cpan-p6 left
[01:19] *** cpan-p6 joined
[01:19] *** cpan-p6 left
[01:19] *** cpan-p6 joined
[01:19] *** Guest55896 left
[01:19] *** failure joined
[01:20] *** failure is now known as Guest46214

[01:23] <ugexe> pretty sure using MONKEY-SEE-NO-EVAL is going to disable precomp altogether, so its not surprising it acts strangely inside a BEGIN

[01:35] *** hythm joined
[01:36] <guifa> Aaah, that could explain a lot.

[01:37] <guifa> When I was poking around another error I was finding, the solution someone found for their same error message was to delete precomp, but I noticed curiously I wasn‚Äôt seeing much activity in the precomp folder

[01:38] <hythm> hello, is there array method that alternates between array elements, for exampe: my @ = < a b >; @a.next gives 'a'; @a.next gives 'b', @a.next gives 'a', and so on?

[01:39] <hythm> s/my @/my @a/

[01:40] <guifa> p6: my @a = |<a b> xx Inf; say @a.shift for 0..10;

[01:40] <evalable6> guifa, rakudo-moar 7b4dd3006: OUTPUT: ¬´a‚ê§b‚ê§a‚ê§b‚ê§a‚ê§b‚ê§a‚ê§b‚ê§a‚ê§b‚ê§a‚ê§¬ª

[01:41] <guifa> It‚Äôs not quite an alternator properly said but ‚Ä¶ if you‚Äôre not going to be doing anything else with the array it should work

[01:42] <hythm> Thanks guifa, that works 

[01:51] <guifa> ugexe: do you think for down the road I should look towards having my modules generate their own QAST?  Right now I‚Äôm basically holding onto a large tree of objects that, though lightweight, feel ‚Ä¶ excessive.

[02:00] <ugexe> you could try removing use MONKEY-SEE-NO-EVAL, and using &EVAL(...) instead of EVAL ...

[02:01] <ugexe> your example isn't runable because it has a dependency

[02:03] <ugexe> anyways im suggesting this based on an assumption that precomp doesn't happen because MONKEY means augment might be used, not because of EVAL

[02:04] <guifa> I‚Äôll try that.  I kept both Action classes just in case (and for performance tests down the road if I came up with an EVAL solution)

[02:05] <guifa> But first I‚Äôm going to take the number/currency formatting

[02:22] <MasterDuke> amusing..."93% of Paint Splatters Are Valid Perl Programs" https://news.ycombinator.com/item?id=19576425

[02:29] *** japh left
[02:36] *** htc^ left
[02:41] *** buffet joined
[02:42] *** buffet_ left
[02:53] *** Guest46214 left
[03:01] *** vsss joined
[03:08] *** success joined
[03:08] *** success is now known as Guest67067

[03:14] *** zanzubarf joined
[03:16] *** Guest67067 left
[03:16] *** zanzubarf left
[03:17] *** MidCheck joined
[03:29] *** kurahaupo left
[03:30] *** kurahaupo joined
[03:42] *** w_richard_w left
[03:52] *** hythm left
[03:53] <discord6> <Tyler (Aearnus)> hey all, wrote a blog post about things I've liked while learning perl6 https://aearnus.github.io/2019/04/03/a-whirlwind-tour-of-perl6-s-best-features

[03:55] <discord6> <Tyler (Aearnus)> i also posted it to the subreddit

[03:56] <AlexDaniel> hm, why not * %% 2

[03:56] <AlexDaniel> m: (1..2 X 1..2).map: { .grep(!(* % 2)).say }

[03:56] <evalable6> AlexDaniel, rakudo-moar 7b4dd3006: OUTPUT: ¬´()‚ê§(2)‚ê§(2)‚ê§(2 2)‚ê§¬ª

[03:56] <AlexDaniel> m: (1..2 X 1..2).map: { .grep(* %% 2).say }

[03:56] <evalable6> AlexDaniel, rakudo-moar 7b4dd3006: OUTPUT: ¬´()‚ê§(2)‚ê§(2)‚ê§(2 2)‚ê§¬ª

[04:19] * masak loves %%

[04:21] <masak> aearnus++ # blog post

[04:31] <guifa> aearnus++

[04:33] *** molaf joined
[04:35] <discord6> <Tyler (Aearnus)> Hmm?

[04:38] <AlexDaniel> Tyler: you're using !(* % 2) which can be written better as * %% 2

[04:38] <AlexDaniel> or what was your ‚ÄúHmm?‚Äù about? :)

[04:41] <discord6> <Tyler (Aearnus)> the hmm was about the aearnus++. But I see what you're saying, let me edit the blog post real fast. Thanks

[04:45] <masak> "aearnus++" means "good job, aearnus!"

[04:45] <discord6> <Tyler (Aearnus)> ah heck, thanks üòÉ

[04:46] <masak> we're incrementing your karma, which is stored in the substrate of the universe

[04:48] <discord6> <Tyler (Aearnus)> AlexDaniel: fixed it & credited you in the post

[04:49] <discord6> <Tyler (Aearnus)> and I will gladly accept the cosmic karma heading my way üòÉ

[04:51] *** curan joined
[04:56] <masak> as if you have any choice in the matter... :P

[05:08] *** sauvin joined
[05:15] *** jmerelo joined
[05:15] <jmerelo> squashable6: status

[05:15] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon in ‚âà6 hours (2019-04-06 UTC-14‚åÅUTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[05:27] *** MidCheck left
[05:27] *** kurahaupo_ joined
[05:29] *** kurahaupo left
[05:31] *** domidumont joined
[05:32] *** kurahaupo_ left
[05:47] *** w_richard_w joined
[05:49] *** domidumont left
[05:52] *** MidCheck joined
[06:01] <Geth> ¬¶ doc: 615058ecab | (JJ Merelo)++ | doc/Type/Junction.pod6

[06:01] <Geth> ¬¶ doc: Adds explanation of autothreading closes #2708

[06:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/615058ecab

[06:01] <Geth> ¬¶ doc: 3fa8c94c42 | (JJ Merelo)++ | doc/Type/Any.pod6

[06:01] <Geth> ¬¶ doc: Adds a simple note saying classify works with Junctions.

[06:01] <synopsebot_> Link: https://doc.perl6.org/type/Junction

[06:01] <synopsebot_> Link: https://doc.perl6.org/type/Any

[06:01] <Geth> ¬¶ doc: 

[06:01] <Geth> ¬¶ doc: Maybe add an example under request or when the Rakudo issue is clarified.

[06:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3fa8c94c42

[06:10] *** domidumont joined
[06:31] *** mack[m] left
[06:31] *** Demos[m] left
[06:31] *** Matthew[m] left
[06:31] *** MitarashiDango[m left
[06:31] *** tyil[m] left
[06:31] *** AlexDaniel` left
[06:31] *** Garland_g[m] left
[06:31] *** Seance[m] left
[06:31] *** tyil[m]1 left
[06:31] *** lance_w[m] left
[06:31] *** irdr left
[06:33] <tony-o> jmerelo: #2814, that output seems sane to me

[06:34] *** success joined
[06:34] <tony-o> added an explanation to it

[06:34] *** vsss left
[06:34] *** success is now known as Guest79393

[06:35] *** vsss joined
[06:35] *** vsss left
[06:35] *** cgfbee left
[06:35] *** vsss joined
[06:35] *** vsss left
[06:36] *** vsss joined
[06:36] *** vsss left
[06:36] *** vsss joined
[06:36] *** irdr joined
[06:36] *** netrino joined
[06:39] *** AlexDaniel` joined
[06:41] *** cgfbee joined
[06:42] <jmerelo> tony-o: There seems to be two layers of autothreading going on

[06:43] <jmerelo> tony-o: and they don't seem to be working well with each other. For instance, why is the first element in the list only repeated once, while the rest are repeated either the junction cardinality of that minus one if it does not match?

[06:43] *** pistacchio left
[06:43] *** pistacchio joined
[06:43] <jmerelo> tony-o: the difference with ~~ is that maybe it does not autothread, or works differently with Junctions

[06:43] * jmerelo has to leave for $work

[06:43] *** jmerelo left
[06:44] <tony-o> it produces differently from junctions

[06:45] <tony-o> it returns the result of any(True, False, False) rather than (True, False, False) itself

[06:45] *** Matthew[m] joined
[06:45] *** lance_w[m] joined
[06:45] *** Demos[m] joined
[06:45] *** MatrixTravelerbo joined
[06:45] *** tyil[m]1 joined
[06:45] *** tyil[m] joined
[06:45] *** Garland_g[m] joined
[06:45] *** MitarashiDango[m joined
[06:45] *** Seance[m] joined
[06:45] *** mack[m] joined
[06:57] *** rindolf joined
[07:01] *** rtw_ joined
[07:04] <discord6> <timotimo> cool post @Tyler (Aearnus)

[07:04] <discord6> <timotimo> may i ask what you like more about the ~~~ operator compared to heredocs? i happen to love heredocs

[07:05] *** rtw_ left
[07:18] *** guifa left
[07:19] *** guifa joined
[07:24] <discord6> <Tyler (Aearnus)> @timotimo what I ran into was that the indentation on the heredoc went kind of wonky -- I wanted to keep the indentation aligned with the indentation level of my function

[07:24] <discord6> <Tyler (Aearnus)> just looked prettier in the code imo

[07:25] <discord6> <timotimo> heredocs will de-indent based on the indentation of the end marker, or at least they're supposed to

[07:26] <discord6> <timotimo> can always have bugs

[07:27] <masak> aearnus: http://strangelyconsistent.org/blog/here-be-heredocs -- might be a helpful read

[07:30] <masak> (that's my favorite use of the Whatever star `*`, by the way) :)

[07:31] <discord6> <Tyler (Aearnus)> ah, that's a nice article. Thanks!

[07:32] <discord6> <Vendethiel> .oO( we should invent a *** )

[07:32] <discord6> <Tyler (Aearnus)> hyper-hyper-whatever

[07:32] <timotimo> m: (** % 2)((1..2) X (1..2)).say

[07:32] <evalable6> timotimo, rakudo-moar 7b4dd3006: OUTPUT: ¬´(1 1 1 0 0 1 0 0)‚ê§¬ª

[07:32] <discord6> <Vendethiel> Well, it‚Äôs currently valid, so...

[07:41] *** Sgeo_ left
[07:41] *** Sgeo_ joined
[07:46] *** rtw_ joined
[07:53] *** netrino left
[07:57] *** maettu left
[07:58] *** rtw_ left
[07:58] *** rtw_ joined
[08:00] *** aindilis joined
[08:06] *** rtw_ left
[08:10] *** andrzejku joined
[08:10] *** zakharyas joined
[08:11] *** rtw_ joined
[08:14] *** rtw_ left
[08:17] *** robertle_ joined
[08:29] * masak is playing with NFAs today

[08:30] *** rindolf left
[08:33] <masak> when people are writing grammars, do you usually establish a whitespace convention, like "every rule expects whitespace to have been parsed before itself, and commits to always handle whitespace at its end (either directly or through tailcalls)"

[08:33] <masak> ...?

[08:35] <timotimo> what kind of play are we talking about here? :)

[08:35] <timotimo> oh, i think i might never actually have merged nqp::nfatostatelist

[08:37] <tadzik> masak: off the top of my head, "each rule handles whitespace between its children" seems natural to me

[08:37] *** rindolf joined
[08:39] <masak> timotimo: https://github.com/masak/007/issues/485

[08:39] <timotimo> oooh, "is parsed"!

[08:39] <masak> timotimo: my fairly immediate goal is to have a parser that can be (lexically) extended at parse-time

[08:40] <masak> NFAs enter the picture, because when you mutate your parser as you parse, you need something flexible to dispatch into the rules, new and old

[08:42] <masak> tadzik: hm, I need to think about that. :) in my grammar right now it looks more like "after children"

[08:42] * masak wrote a grammar for grammars, to translate into the NFA

[08:43] <masak> heh. 15 years with Perl 6, and I'm still all "what the heck is a Seq?" :P

[08:44] <masak> it's an immutable... somethingsomething of, um, and containers, no, of elements. yeah.

[08:45] <Chaz6> it reminds me a bit of rust

[08:45] *** w_richard_w left
[08:45] <Chaz6> i'm too dumb for rust :(

[08:45] <Woodi> hi #perl6 :)

[08:46] *** aborazmeh joined
[08:46] <masak> Chaz6: Rust isn't the language we're smart enough for, but it's the language we deserve :D

[08:46] <Woodi> where to buy moritz++ book in paper form ? apress is somewhere in Europe ? :)

[08:46] <masak> Woodi: ahoj

[08:46] <Woodi> *book about grammars :)

[08:47] <Woodi> I realy need to learn this...

[08:49] <tyil> trying to install LibUUID fails during testing phase: "Cannot locate native library 'libuuid.so': /usr/lib64/libuuid.so: invalid ELF header", if I install with --/test that error comes up when I want to use it

[08:50] <tyil> (I'm trying to use DB::Pg)

[08:50] *** aborazmeh left
[08:50] <timotimo> tyil: cat that file, it's probably a so script

[08:50] <timotimo> we don't have support for those yet

[08:51] <tyil> :<

[08:51] <tyil> is there a way to work around it?

[08:52] <timotimo> yeah, replace it with a symlink or put an explicit version into th "is native", or at least i think that'd do it

[08:54] <timotimo> i don't remember where i last encountered those

[08:54] <timotimo> in theory we can put a parser for them into NativeCall

[08:54] <tyil> they appear on Gentoo it seems

[08:54] <tyil> (with a comment in the file, and a reference to a bug number)

[08:57] <tyil> timotimo: that seems to work around the issue for now

[08:57] <tyil> thanks :>

[08:57] <timotimo> what's that gentoo bug about?

[08:58] <tyil> https://bugs.gentoo.org/4411, sys-devel/gcc uses static libs in /usr/lib before it will use a dynamic lib in /lib

[08:58] <timotimo> i wonder if that's still necessary?

[08:59] <timotimo> Bug 290974 - linker scripts and dlopening direct library names - https://bugs.gentoo.org/290974

[08:59] <timotimo> this is surely also relevant

[09:00] <timotimo> (Note: for ghc I have a patch that reads the linker script and uses a regular expression to find the GROUP ( ... ) command. Is this generalizable? Is it the right way to go?)

[09:00] <tyil> I am not familiar with Gentoo internals on a level to give a valuable reply here, sorry

[09:00] <timotimo> ^- if we make something that's bug-compatible with ghc, surely we will run into less problems with existing libraries and less resistance from distro maintainers to making stuff work

[09:01] <tyil> I can test things if you want to, though

[09:01] <timotimo> i don't have a good idea yet, though it ought to be easy for me to set up my own gentoo; the installation procedure hasn't changed in the last 5 years, has it? :)

[09:02] <timotimo> i still remember when "modular x.org" was the "hot new thing"

[09:02] <moritz> Woodi: apress is part of springer, which is US. You can also buy it from amazon

[09:03] <tyil> installing Gentoo isn't the hardest part, and afaik not much has changed

[09:03] <tyil> if it'd help you, I have a binhost available on https://home.tyil.nl/packages/, it may contain some things

[09:04] <timotimo> oh, binhost is actually not a thing i've tried yet

[09:04] <timotimo> is eix still the search tool of choice?

[09:04] <tyil> it is to me :)

[09:04] <Woodi> moritz: oki, thanx

[09:05] *** pradip joined
[09:08] *** pradip left
[09:10] <moritz> also, author's rant here: I feel much better about my regexes + grammar book than about fundamentals, but fundamentals sells much better

[09:11] <tyil> possibly because fundamentals touches upon more aspects, whereas regex/grammar is a more specific aspect of the language not everyone needs to know in-depth?

[09:11] <moritz> regexes + grammars have a much clearer defined scope, and that makes it possible to go much more in depth and cover it well

[09:11] <moritz> tyil: exactly

[09:11] <moritz> I feel I could write a 500 pages "Perl 6 Fundamentals" book :/

[09:11] <tyil> I haven't read the fundamentals book, but I like the regex/grammar book so far :>

[09:12] <moritz> tyil: you're not in the target audience for fundamentals, I believe :D

[09:12] <tyil> I wonder if someone's working on a Perl 6 book outlining all the ways to do multi-process stuff, with examples, pros/cons etc...

[09:13] <tyil> I don't think I am in that target audience anymore, but I generally like to work through beginner stuff on Perl 6 to get a feel of how to best explain things to non-perlers

[09:14] *** aborazmeh joined
[09:14] *** aborazmeh left
[09:15] *** aborazmeh joined
[09:15] <tyil> then again, reading books is time-consuming

[09:15] <tyil> and I have plenty of bugs to resolve in my own code :'D

[09:15] <Woodi> if someone wants idea for book: learn basic programming in 90% of languages at once. variables/types/if/for/while/functions/classes :)

[09:16] <Woodi> why limit reader to one language only ???

[09:18] *** aborazmeh left
[09:25] <discord6> <Tyler (Aearnus)> huh, that blog post is on the front page of /r/programming

[09:25] <discord6> <Tyler (Aearnus)> I'd have never thought

[09:25] <discord6> <timotimo> oh, congrats!

[09:30] *** Sgeo__ joined
[09:33] *** rindolf left
[09:33] *** Sgeo_ left
[09:38] <discord6> <Vendethiel> masak: I always get confused and let tests help me (with regards to whitespace)

[09:38] <timotimo> you know ...

[09:38] <perlbot> Patrickwoump pasted a new file at https://perlbot.pl/p/nj8vvg - 

[09:38] <timotimo> there should be a test module especially for dealing with grammars to make sure a given character was parsed by a particular rule

[09:38] <timotimo> that could be a cool thing

[09:39] <timotimo> or maybe just using xliff's gtk grammar visualization tool

[09:46] *** japh joined
[09:49] *** aborazmeh joined
[09:49] *** aborazmeh left
[09:49] *** aborazmeh joined
[09:52] *** domidumont left
[09:52] <masak> Vendethiel: yeah, you don't say. I don't know any other way to develop grammars and get the whitespace *right*, except to use tests ;)

[09:53] *** cpan-p6 left
[09:53] *** Demos[m] left
[09:53] *** tyil[m] left
[09:53] *** MatrixTravelerbo left
[09:53] *** mack[m] left
[09:53] *** lance_w[m] left
[09:53] *** Garland_g[m] left
[09:53] *** Matthew[m] left
[09:53] <masak> I mean, that goes for most things that are even moderately complex. but especially for whitespace in grammars.

[09:53] *** irdr left
[09:53] *** cpan-p6 joined
[09:53] *** cpan-p6 left
[09:53] *** cpan-p6 joined
[09:54] *** sena_kun joined
[09:56] *** vsss left
[09:56] <jnthn> Having the places that rules match sigspace marked by the editor is also kinda helpful :)

[09:56] *** irdr joined
[09:56] *** AlexDaniel` left
[09:57] *** MitarashiDango[m left
[09:57] *** vsss joined
[09:57] *** vsss left
[09:57] *** rindolf joined
[09:57] *** vsss joined
[09:57] *** vsss left
[09:57] *** Seance[m] left
[09:57] *** tyil[m]1 left
[09:57] *** vsss joined
[09:58] *** vsss left
[09:58] *** vsss joined
[09:58] <masak> jnthn: conversely, _not_ having any feedback about that is kinda insane :P

[09:59] <jnthn> Well, one can know the rules also :)

[10:00] *** AlexDaniel` joined
[10:00] <jnthn> But yeah, it's much nicer :)

[10:00] *** aindilis left
[10:01] *** aindilis joined
[10:01] <discord6> <Vendethiel> masak: I think it's the thing I'm most excited about in Comma :)

[10:01] <discord6> <Vendethiel> having a visual cue for whitespace-ness

[10:23] *** aborazmeh left
[10:28] *** Black_Ribbon left
[10:39] <masak> jnthn: every time I hear an argument that's a variation of "it's sufficient for the programmer simply to not commit the mistakes", my brain goes "yeah... no" :)

[10:40] *** Demos[m] joined
[10:40] *** Matthew[m] joined
[10:40] *** lance_w[m] joined
[10:40] <masak> (and now someone is going to chew me over for my split infinitive, and we can have a nice discussion about vestigial rules from Latin) :P

[10:40] *** Garland_g[m] joined
[10:40] *** tyil[m] joined
[10:40] *** tyil[m]1 joined
[10:40] *** MitarashiDango[m joined
[10:41] *** Seance[m] joined
[10:41] *** mack[m] joined
[10:41] *** pistacchio left
[10:41] *** pistacchio joined
[10:42] *** pecastro joined
[10:50] *** kensanata joined
[10:53] <discord6> <Tyler (Aearnus)> it's very late here and I ought to sleep, but I finished up another thing that I've been writing and I want to share it with you all https://aearnus.github.io/2019/04/05/perl6-is-the-world-s-worst-ml

[10:56] *** sftp left
[10:58] *** psm joined
[10:59] *** irco joined
[11:00] *** zakharyas left
[11:00] <sjn> After reading that, I'm left thinking "This Apple is the World's Worst Orange!"

[11:01] <lizmat> sjn: and your right thinking says?

[11:01] <sjn> I don't think right :)

[11:01] <masak> "Thinking right is left as an exercise for the reader."

[11:02] <sena_kun> well, a "good" programmer in FORTRAN can write a FORTRAN program in any... you get the idea.

[11:03] <masak> sena_kun: ah, "Real Programmers Don't Use Pascal". been a while since I read it.

[11:03] <hahainternet> masak: i'm going to chew you out for "that's" instead of "which" :)

[11:04] <masak> haha

[11:04] <hahainternet> also, are there really 'good' programmers?

[11:04] <hahainternet> what does that even mean?

[11:04] <hahainternet> there are knowledgable programmers, and highly skilled programmers

[11:04] <masak> hahainternet: they taste good

[11:04] <hahainternet> but the closest to good i think we come is having good days

[11:04] <hahainternet> masak: lots of fat and a hint of cheeto? :p

[11:04] <sjn> There are also programmers that are aware of the True Scotsman fallacy

[11:04] <discord6> <Tyler (Aearnus)> only the ones who can redirect solar waves using butterfly wings really qualify as good

[11:05] <masak> sjn: being aware of the True Scotsman fallacy is indicative of being a Real Programmer :P

[11:05] <sjn> There are No True Scotsmen :)

[11:06] <lizmat> I thought there only could be one ?

[11:06] <masak> that's an approximation

[11:06] <sjn> possible off-by-one error

[11:10] * masak .oO( Real Programmers only make off-by-two errors )

[11:10] <hahainternet> real programmers have programmed subordinates to do the work for them

[11:14] <lizmat> which explains why real programmers make bad real managers: programming real subordinates is not logical

[11:15] <masak> oh, like Agatha in Girl Genius -- who is such a strong Spark (inventive, Mad Scientist-style person) that even her mechanical inventions are Sparks

[11:15] <hahainternet> alternately: the best programmers are those who can deal with illogical programming languages

[11:15] <hahainternet> ultimately my point here is that there's no generic attribute 'programming skill'

[11:15] <hahainternet> it's a composite

[11:15] <hahainternet> and a big factor is how are you feeling that day, get enough sleep? got too much stress?

[11:16] <masak> that's why I like to write tests. I never know what kind of day I'm having.

[11:16] <hahainternet> so it's silly to talk as if there's an inherent attribute that makes people 'good'

[11:16] <hahainternet> in reality there is only well written code, or non well written code

[11:16] <hahainternet> and what that means is fully contextual

[11:21] *** Sgeo_ joined
[11:24] *** Sgeo__ left
[11:34] *** jmerelo joined
[11:34] <jmerelo> squashable6: status

[11:34] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon is in 25 minutes (2019-04-06 UTC-14‚åÅUTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:34] <jmerelo> I have created instructions for this squashathon: https://github.com/rakudo/rakudo/wiki/Squashathon:-Perl-6-community-and-most-wanted-modules

[11:35] <jmerelo> Basically is: work on the community modules, tell everyone via an issue which module you'll be focusing in, let someone else add the hook

[11:35] <masak> right. Alan Turing wrote awful code, for example. all the code in his paper is made up of state machines; computed gotos and emulation.

[11:35] <hahainternet> masak: totally agree, so we can use words like 'visionary' and 'paradigm shifting'

[11:35] <hahainternet> but not 'good programmer' :p

[11:35] <jmerelo> I think I know how to do that... But if I fail, please ask AlexDaniel to add the hook to that particular repo

[11:35] <hahainternet> (i'm aware babbage and lovelace predated turing)

[11:36] <jmerelo> Everyone's invited!

[11:37] *** jmerelo left
[11:40] *** vrurg left
[11:44] *** domidumont joined
[11:44] *** agentzh left
[11:45] *** sftp joined
[11:46] *** agentzh joined
[11:46] *** pistacchio left
[11:46] *** pistacchio joined
[11:50] *** Sgeo__ joined
[11:53] *** Sgeo_ left
[11:53] *** psm left
[11:53] *** aborazmeh joined
[11:53] *** aborazmeh left
[11:53] *** aborazmeh joined
[11:57] *** mowcat joined
[11:57] *** MidCheck left
[11:58] *** jhill left
[12:00] *** jhill joined
[12:10] *** jhill left
[12:12] *** SergiusUA joined
[12:12] *** jhill joined
[12:12] *** araraloren joined
[12:16] *** __jrjsmr_ joined
[12:16] <kawaii> is there anywhere selling those Camelia plushies?

[12:20] *** pmurias joined
[12:20] <discord6> <timotimo> @Tyler (Aearnus) you don't have to given $maybe.WHAT when you're when-ing types, as types will already do typechecks as their smart match behaviour üòÉ

[12:27] *** aborazmeh left
[12:34] <pmurias> masak: is code by alan turing available somewhere?

[12:35] <Juerd> kawaii: lizmat and woolfy know everything about the stuffed camelias :)

[12:36] <kawaii> lizmat: ... :)

[12:42] *** Actualeyes joined
[12:44] *** Sgeo_ joined
[12:47] *** Sgeo__ left
[12:50] *** zakharyas joined
[12:52] <SmokeMachine> I think I proposed some time ago new named args to `classify`... I don't remember if someone has given any opinion... the suggestion was to add: `:&reduce`, `:&produce`and `:$initial-value`, so, `^10.classify: * %% 2, :reduce(&[+])` would return `{True => 25, False => 20}`

[12:56] <SmokeMachine> and `^10.classify: * %% 2, :produce(&[+])` would return `({}, {True => 0}, {True => 0, False => 1}, {True => 2, False => 1}, {True => 2, False => 4}, {True => 6, False => 4}, {True => 6, False => 9}, {True => 12, False => 9}, {True => 12, False => 16}, {True => 20, False => 16}, {True => 20, False => 25}).Seq`

[12:57] <sena_kun> SmokeMachine, maybe https://github.com/perl6/problem-solving/blob/00000001/README.md can help?

[12:58] <SmokeMachine> sena_kun: yes, maybe...

[12:58] <SmokeMachine> sena_kun: thanks!

[12:59] <tadzik> I thought 00000001 is the commit hash

[12:59] <tadzik> now I'm super disappointed :(

[13:03] <timotimo> there's a nice tool that'll bruteforce commit hashes

[13:07] *** SergiusUA left
[13:09] *** robertle_ left
[13:10] *** ufobat_ joined
[13:14] *** ufobat__ left
[13:14] *** abraxxa left
[13:15] *** vrurg joined
[13:16] <SmokeMachine> sena_kun: https://github.com/perl6/problem-solving/issues/6

[13:16] *** __jrjsmr_ left
[13:18] <lizmat> kawaii: become the winner of the Squashathon this weekend, and we'll send you one for free!

[13:18] *** lelf joined
[13:19] <SmokeMachine> m: say given 42 {}

[13:19] <evalable6> SmokeMachine, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/d9n57jmzv7‚ê§Unsuppo‚Ä¶¬ª

[13:19] <evalable6> SmokeMachine, Full output: https://gist.github.com/7e5769aaf7227a584200ca3194430a17

[13:19] <SmokeMachine> m: given 42 { .say }

[13:19] <evalable6> SmokeMachine, rakudo-moar 7b4dd3006: OUTPUT: ¬´42‚ê§¬ª

[13:20] <SmokeMachine> m: say given 42 { .say }

[13:20] <evalable6> SmokeMachine, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ONDn3BESBI‚ê§Unsuppo‚Ä¶¬ª

[13:20] <evalable6> SmokeMachine, Full output: https://gist.github.com/e75122bfff4ea7d546d8e99bfb3b1f3b

[13:20] <SmokeMachine> m: say do given 42 { .say }

[13:20] <evalable6> SmokeMachine, rakudo-moar 7b4dd3006: OUTPUT: ¬´42‚ê§True‚ê§¬ª

[13:20] <lelf> Hi. There is no built-in way to do (unicode) segmentation, is it?

[13:21] <timotimo> lelf: by segmentation you mean going from utf8 to codepoints?

[13:21] *** curan left
[13:21] <lelf> timotimo: No. Word segmentation for example

[13:21] <SmokeMachine> I don't know why, but in my mind, I would expect the `do given 42 { "bla" }` (that is correct) and `given 42 { "bla" }` to return 42...

[13:22] *** skids joined
[13:22] <timotimo> huh, like .words?

[13:22] <tadzik> yeah, after seeing more statements being expressions in other languages I always miss them when they aren't there

[13:23] <SmokeMachine> m: sub bla(Int $bla is copy) { given $copy { $copy++ } }; bla 41 # it would be great if it return 42...

[13:23] <evalable6> SmokeMachine, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/xlwREfqr4d‚ê§Variabl‚Ä¶¬ª

[13:23] <evalable6> SmokeMachine, Full output: https://gist.github.com/eb798b02010aaa855a5dd28c95ad88b5

[13:25] <lelf> timotimo: No. Like https://unicode.org/reports/tr29 :)

[13:25] <timotimo> ah, ok; i think we only have built-in grapheme cluster segmentation?

[13:26] <masak> pmurias: I was thinking of his https://en.wikipedia.org/wiki/Turing%27s_proof paper ("On Computable Numbers, with an Application to the Entscheidungsproblem")

[13:26] <timotimo> but you can use the word_break property in reegxes

[13:27] *** Guest16965 joined
[13:27] <timotimo> lelf: some parts of the word break algo are already forced by how perl6 does NFG, like "do not break within CRLF" or "do not break within emoji zwj sequences"

[13:28] <timotimo> i believe also "do not break within emoji flag sequences"

[13:28] <lelf> timotimo: that's not enough

[13:29] <SmokeMachine> correcting my sentence: I don't know why, but in my mind, I would expect the `do given 42 { "bla" }` return "bla" (that is correct) and `given 42 { "bla" }` to return 42...

[13:29] <lelf> timotimo: would be great to have something like icu. but seems there are no perl6 libs yet

[13:29] <timotimo> unicodable6: Îäî

[13:29] <unicodable6> timotimo, U+B294 HANGUL SYLLABLE NEUN [Lo] (Îäî)

[13:30] <timotimo> unicodable6: help

[13:30] <unicodable6> timotimo, Just type any Unicode character or part of a character name. Alternatively, you can also provide a code snippet. # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Unicodable

[13:30] <lelf> timotimo: like icu = ability segment chinese (using dictionary)

[13:30] <timotimo> unidump: Îäî

[13:30] <unicodable6> timotimo, https://gist.github.com/f9daaedbf2c122bcc98ef1c102d33b8e

[13:30] <timotimo> ^- what info is missing from there?

[13:31] <masak> SmokeMachine: the former is immediate to me, but the latter is not. it's not even clear to me that statements need to have a value at all.

[13:31] *** mowcat left
[13:33] <lelf> m: say 'ÂáΩÊï∞ÁöÑË∞ÉÁî®‰ΩøÁî®Á©∫Ê†ºÁ¨¶ËÄå‰∏çÊòØÊã¨Âè∑'.uniprops('word_break')

[13:33] <SmokeMachine> masak: I think a `given` (if without a `do`) would make more sense if return what's being given...

[13:33] <evalable6> lelf, rakudo-moar 7b4dd3006: OUTPUT: ¬´(Other Other Other Other Other Other Other Other Other Other Other Other Other Other Other)‚ê§¬ª

[13:34] <lelf> timotimo: ^^ yet there are 9 words

[13:34] <timotimo> OK, so without an actual dictionary we can't get this right?

[13:35] <SmokeMachine> masak: I am repeating my self doing `sub bla($obj) { given $obj { ... }; $obj }` every time...

[13:36] <pmurias> masak: Turing didn't live to see the creation of high level programming languages, so comparing how good he was at something that didn't really exist is a bit of philosophical discussion

[13:37] <lelf> timotimo: yep. but look at icu, it can do it (although it'd be a lot to write). But even just TR29 would be great to have. I mean just ÔΩ¢.segment(:words)ÔΩ£

[13:39] *** kensanata left
[13:39] *** SergiusUA joined
[13:40] *** molaf left
[13:41] <SmokeMachine> masak: Id like to be able to use `given` as this: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/also.html

[13:44] *** __jrjsmrtn__ joined
[13:45] *** __jrjsmrtn__ left
[13:48] <masak> SmokeMachine: I hear you, about the intuition. not sure I share that intuition, though. for one, I'd be terribly confused if `do given` and `given` started giving back different values.

[13:49] <SmokeMachine> masak: yes... that would be confuse...

[13:50] <SmokeMachine> masak: that way Kotlin can attach methods to another classes without changing it is something I miss in perl6...

[13:50] *** __jrjsmrtn__ joined
[13:52] <jnthn> SmokeMachine: .&foo lets you call something much as if it was a method, though

[13:52] *** __jrjsmrtn__ left
[13:53] * masak loves .&foo

[13:53] <SmokeMachine> jnthn: yes... but that's not declared like that... I mean this: https://kotlinlang.org/docs/reference/functions.html#infix-notation

[13:53] <masak> I love how .&foo is essentially a *discovered* feature, because it wasn't designed with the & sigil specifically in mind

[13:54] <masak> SmokeMachine: I've been looking at generic functions today, like CLOS and Dylan have. been musing whether to switch 007 over to them, instead of methods.

[13:55] *** __jrjsmrtn__ joined
[13:55] *** ctilmes joined
[13:58] <pmurias> in the Kernel docs it would be good to have proper descriptions of what .arch and other uname using methods really return

[14:00] * masak .oO( it returns a vaulted doorway )

[14:01] <jnthn> SmokeMachine: Isn't that just `sub infix:<shl>($a, $b) { $a.shl($b) }`?

[14:02] <SmokeMachine> jnthn: it wouldn't change the self...

[14:04] <SmokeMachine> jnthn: no... it wouldn't call a method on $a... the method do not exist in $a...

[14:06] *** ravenousmoose_ left
[14:07] *** lucasb joined
[14:08] <cpan-p6> New module released to CPAN! LibUUID (0.3) by 03CTILMES

[14:08] <skids> .oO( maybe sub bla ($_--> $_) {  } could be made towork (currently "malformed retuen value") )

[14:09] <ctilmes> tyil: I uploaded a new LibUUID that explicitly uses libuuid v1 instead of relying on the link from libuuid.so to it

[14:10] <kawaii> ctilmes: unrelated but thank you for making Redis::Async :)

[14:11] <ctilmes> kawaii: ty -- I've learned a lot since I did that -- I may need to revisit it at some point.  I used it to dump a bunch of data into redis much faster than the Perlish Redis module though..

[14:11] <SmokeMachine> jnthn: sorry, that was the wrong anchor...

[14:12] <SmokeMachine> I was meaning this: https://glot.io/snippets/fb0j9x5ujq

[14:12] <SmokeMachine> jnthn: it's not an augment... its not changing the Int...

[14:14] *** ravenousmoose joined
[14:16] <ugexe> ctilmes: that broke libuuid on my system

[14:17] <ctilmes> ugexe: Do you have libuuid.so.1? or just libuuid.so?

[14:17] <ugexe> just libuuid.so

[14:17] <ugexe> really libuuid.dynlib

[14:17] <ctilmes> Oh... Mac... Any hints how I should handle it?

[14:18] <SmokeMachine> AlexDaniel: Have I used the repo for the wrong propose?

[14:18] <ugexe> i dont think it'll be only broken on osx, and am willing to bet many linuxes also don't create the .1 etc

[14:18] <AlexDaniel> SmokeMachine: no, it's the right repo

[14:18] <AlexDaniel> SmokeMachine: but you're proposing a solution without stating a problem

[14:19] <ugexe> im not sure there is a good solution for determining if you need mylib.so.1 vs mylib.so

[14:19] <ctilmes> Some people have libuuid.so, some have libuuid.so.1, some have both

[14:19] <ugexe> right

[14:19] <ctilmes> or .dylib, or .dll

[14:20] <ugexe> its probably a problem NativeCall should be solving, but im not sure how it would do it

[14:21] <SmokeMachine> AlexDaniel: I have to do that by hand some times before, and ended up not using classify because it would be worst to write and have to loop throw each key and reduce each value (on reduce case)...

[14:21] <ugexe> m: use NativeCall; my $throwaway-sub = sub { }; $throwaway-sub does NativeCall::Native[$throwaway-sub, sub { "libuuid.dylib" } ]; $throwaway-sub()

[14:21] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, y‚Ä¶¬ª

[14:21] <evalable6> ugexe, Full output: https://gist.github.com/e819f3133144484f65a3a51f7ac9d9a7

[14:21] <AlexDaniel> SmokeMachine: in the ticket, please

[14:21] <ugexe> you can use that to determine if they have specifically "libuuid.dylib"

[14:21] <ugexe> if the error says "Cannot locate symbol '' in native library 'libuuid.dylib'" then they have that lib

[14:22] <ctilmes> ugexe: Should I make LibUUID use https://github.com/salortiz/NativeLibs

[14:22] <AlexDaniel> SmokeMachine: also maybe it'd be nice to see the code that does looping and stuff, so that's it's easier to see that there's actually an issue

[14:22] <ctilmes> ugexe: I think it just does what you described

[14:23] <ugexe> yeah then that might be an ok interm solution

[14:23] <SmokeMachine> AlexDaniel: Im answering... Ill try to find the example when I get home...

[14:24] <ugexe> im not sure that module is doing what i did though... i think its actually looking for files whereas mine was seeing if known variants work

[14:25] <ugexe> either way it seems to try to solve that problem

[14:28] <SmokeMachine> jnthn: Now I've found it: https://kotlinlang.org/docs/reference/extensions.html

[14:29] <AlexDaniel> squashable6: status

[14:29] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà23 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[14:30] <ctilmes> ugexe: NativeLibs lets me specify a list of versions to try, but not 'no version'

[14:31] *** squashable6 left
[14:33] *** squashable6 joined
[14:33] *** ChanServ sets mode: +v squashable6

[14:34] <ctilmes> ugexe: https://github.com/salortiz/NativeLibs/issues/4

[14:35] <squashable6> Webhook for perl6/ecosystem is now active! Responsive is better than fast.

[14:53] <cpan-p6> New module released to CPAN! LibUUID (0.4) by 03CTILMES

[14:53] <ctilmes> ugexe -- Try LibUUID now -- should support both version 1 and no version

[14:54] <ctilmes> ugexe: -- Try LibUUID now -- should support both version 1 and no version

[14:54] <ctilmes> Now I have to re-release all my modules using NativeLibs to find their libraries

[14:55] *** pmurias left
[14:56] <SmokeMachine> jnthn: this kind of extension would be great to define cast on core types for custom ones...

[15:05] *** jmerelo joined
[15:05] *** abraxxa joined
[15:06] <jmerelo> squashable6: status

[15:06] <squashable6> jmerelo, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà22 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:06] <squashable6> jmerelo, Log and stats: https://gist.github.com/70131c2fe466cecf5a78c384bff79736

[15:06] <jmerelo> Not unexpected...

[15:08] <sena_kun> I am planning to write a LDIF module for some time already, just need some free time, which is a big no-no. It is on most wanted list, so will be removed later.

[15:08] <ugexe> ctilmes: actually that way is broken as well

[15:08] <jmerelo> sena_kun: that would be great. During this weekend?

[15:08] <ugexe> beacuse DBIish includes its own NativeLibs module

[15:08] <sena_kun> jmerelo, also note that it is still Friday for a lot of people, not Saturday.

[15:08] <ugexe> and gets chosen over the standalone lib

[15:09] <sena_kun> jmerelo, well, I can try to get it after work, yes.

[15:09] <ugexe> you can see via `zef info DBIish`

[15:10] *** abraxxa left
[15:10] <ctilmes> Ah.  I see -- If I 'use NativeLibs:auth<github:salortiz>' would that do it?

[15:10] <ugexe> yeah

[15:11] <ugexe> and `depends : ["NativeLibs:auth<github:salortiz>"]`

[15:11] *** pmurias joined
[15:12] *** ravenousmoose left
[15:20] *** kurahaupo joined
[15:23] <cpan-p6> New module released to CPAN! LibUUID (0.5) by 03CTILMES

[15:23] *** abraxxa joined
[15:27] *** __jrjsmrtn__ left
[15:30] *** hythm_ joined
[15:30] <jmerelo> sena_kun: including me... thanks!

[15:31] <hythm_> p6: $*IN.put: 'test'; # how to properly write text to STDIN?

[15:31] <evalable6> hythm_, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) Failed to write bytes to filehandle: Bad file descriptor‚ê§  in block <unit> at /tmp/1vbjR1l2av line 1‚ê§‚ê§¬ª

[15:32] <ugexe> ctilmes: bad news -- NativeLibs doesn't pass its tests (on osx at least)

[15:32] <hythm_> the above works in repl, but it adds 'True' to the end of text

[15:33] <ctilmes> ugexe: Argh..

[15:34] <ugexe> it might just be a poorly written test though

[15:34] <ugexe> https://github.com/salortiz/NativeLibs/blob/master/t/10-search.t#L30-L31

[15:35] <ugexe> they never adjust the test count

[15:35] *** andrzejku left
[15:35] <ugexe> based on the system and differing number of tests

[15:35] <ctilmes> needs a 'skip "no test for darwin", 4;' in there?

[15:36] <ugexe> i think it needs to remove the plan altogether, because windows doesn't have the same test count as linux either

[15:36] <ctilmes> ah

[15:36] <ctilmes> should be refactored with subtest maybe?

[15:37] <ugexe> that or remove `plan` in favor of just 'done-testing()'

[15:45] *** lookatme_q left
[15:45] *** lookatme_q joined
[15:47] *** pmurias left
[15:49] <lucs> How do I declare a MAIN that can handle 0 or more of the same named argument, like 'foo.p6 -a=42 -b=abc -a=66 -b=def'?

[15:52] *** zakharyas left
[15:52] <araraloren> maybe using :@b ?

[15:52] <araraloren> maybe using :@a ?

[15:54] <El_Che> named parameters are optional, yes

[15:59] <lucs> r: @*ARGS = <-a=42 -a=66>; sub MAIN ( :@a ) { .say for @a }

[15:59] <perlbot> lucs: 42‚ê§66‚ê§

[15:59] <lucs> r: @*ARGS = <-a=42>; sub MAIN ( :@a ) { .say for @a }

[15:59] <perlbot> lucs: Usage:‚ê§  /tmp/xXPOVxGlZi [-a=<Positional>]‚ê§[Exited 2]

[15:59] <lucs> :(

[16:00] *** __jrjsmrtn__ joined
[16:00] <lucs> (not sure how to test for 0)

[16:00] <lucs> r: @*ARGS = (); sub MAIN ( :@a ) { .say for @a }

[16:00] <perlbot> lucs: No output.

[16:01] <araraloren> bisectable6: @*ARGS = <-a=42>; sub MAIN ( :@a ) { .say for @a }

[16:01] <bisectable6> araraloren, Bisecting by exit code (old=2015.12 new=7b4dd30). Old exit code: 2

[16:01] <bisectable6> araraloren, bisect log: https://gist.github.com/e261abca6d91d0fea89f81161eb4a89e

[16:01] <bisectable6> araraloren, (2019-03-26) https://github.com/rakudo/rakudo/commit/87d219ee68f53855957f6f151fa9f88106ce7dfa

[16:02] <lucs> Holy moly, there's a neat tool.

[16:03] *** jdv79 left
[16:04] <araraloren> lucs seems like it fixed in new version

[16:04] <araraloren> https://github.com/rakudo/rakudo/commit/87d219ee68f53855957f6f151fa9f88106ce7dfa

[16:04] <AlexDaniel> https://github.com/rakudo/rakudo/issues/2797

[16:05] <lucs> This language is too cool. Things get fixed so quickly :)

[16:06] * lucs goes to rebuild his perl6

[16:07] <lucs> The language is cool, and so are all the great people who make it happen!

[16:07] <araraloren> yeah, and if you want you will find replacement :)

[16:07] *** pistacchio left
[16:08] *** pistacchio joined
[16:08] <Woodi> sena_kun: about ldif: there is something like this: https://github.com/slunski/perl6-text-ldif  but it dormant for some time. and what features your planned module need to have ?

[16:09] *** Possum left
[16:10] <sena_kun> Woodi, oh-oh... then we don't need one, I guess. Still have to check how much it's rotten. Its item in wanted modules list can be removed then.

[16:11] <sena_kun> >No candidates found matching identity: Text::LDIF

[16:11] <sena_kun> seems like it isn't added to the ecosystem though

[16:11] *** cpan-p6 left
[16:12] <Geth> ¬¶ perl6-most-wanted: 494970ef80 | Altai-man++ (committed using GitHub Web editor) | most-wanted/modules.md

[16:12] <Geth> ¬¶ perl6-most-wanted: Remove LDIF module

[16:12] <Geth> ¬¶ perl6-most-wanted: 

[16:12] <Geth> ¬¶ perl6-most-wanted: We already have one.

[16:12] <Geth> ¬¶ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/494970ef80

[16:12] *** pistacchio left
[16:12] *** cpan-p6 joined
[16:12] *** cpan-p6 left
[16:12] *** cpan-p6 joined
[16:13] *** pistacchio joined
[16:13] *** Kaiepi left
[16:13] *** pistacchio left
[16:13] *** Kaiepi joined
[16:14] *** pistacchio joined
[16:15] <sena_kun> pushed a PR that fixes tests

[16:15] <sena_kun> Woodi++

[16:16] <tony-o> Woodi sena_kun maybe just needs a maintainer, slunski is active but hasn't shipped since sep 2016

[16:16] <tony-o> shipped p6*

[16:17] <sena_kun> tony-o, I'll gladly be a maintainer, just opening an issue would be fine?

[16:17] <Geth> ¬¶ doc: 9dabfb67d1 | Coke++ | xt/words.pws

[16:17] <Geth> ¬¶ doc: learn new variant

[16:17] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9dabfb67d1

[16:17] <Geth> ¬¶ doc: 06c05be73b | Coke++ | xt/words.pws

[16:17] <Geth> ¬¶ doc: T is typically used as a placeholder for a Type.

[16:17] <Geth> ¬¶ doc: 

[16:17] <Geth> ¬¶ doc: TT used in recent addition to refer to a second Type

[16:17] <Geth> ¬¶ doc: in the same context.

[16:17] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/06c05be73b

[16:18] <Woodi> I am autor of that ldif stuff, just never had energy to desipher adding to ecosystem... and if it looks usefull just fork it and use properly

[16:19] <tony-o> sena_kun: i would think so, if you don't get a response you could fork and redistribute/update with some restriction

[16:19] <tony-o> Woodi ah, hah.  i can add to ecosystem

[16:20] <sena_kun> but tests are failing

[16:20] <Woodi> tony-o: pleas, if you can ! I will be wery glad for that :)

[16:21] *** pistacchio left
[16:21] <Woodi> 2 of them ? :)

[16:21] <sena_kun> Woodi, can you check https://github.com/slunski/perl6-text-ldif/pull/1 ?

[16:21] <tony-o> send me a link to the other meta

[16:22] <Geth> ¬¶ ecosystem: ed1b86457c | Altai-man++ (committed using GitHub Web editor) | META.list

[16:22] <Geth> ¬¶ ecosystem: Add Text::LDIF

[16:22] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/ed1b86457c

[16:22] <squashable6> üçïüçïüçï  First contribution by Altai-man++! ‚ô•

[16:22] <sena_kun> added the module

[16:22] <Woodi> sena_kun: checked ! what to do now ?

[16:23] <sena_kun> Woodi, just accept it, there should be a button for that if you have admin/writer rights for the repo.

[16:25] <sena_kun> \o/

[16:25] <sena_kun> Woodi++, thanks. Sooner or later I'll use it and we'll see if it is good enough or something should be tweaked.

[16:25] <tony-o> ++

[16:26] <Woodi> clicked merge, ok now ?

[16:26] <sena_kun> Woodi, yes.

[16:27] <Woodi> sena_kun: when I was writing this it parsed all OpenLDAP test ldif files except few entries with binary attributes and empty dn. never saw such entries in real life but it's not complete...

[16:28] <tony-o> lizmat: thoughts on the behavior for 2814 ?

[16:44] <guifa> lelf and timotimo: if you‚Äôre needing a smarter word breaker, that‚Äôs in the plans for Intl::CLDR

[16:44] <Woodi> any chance that 'samewith' do tail call optimization ?

[16:46] *** jdv79 joined
[16:49] <araraloren> Rakudo don't have that optimization

[16:50] *** pistacchio joined
[16:53] *** vrurg left
[16:53] *** khisanth_ left
[16:55] *** abraxxa left
[16:55] *** abraxxa joined
[16:56] <discord6> <Tyler (Aearnus)> would be nice if it did

[16:57] *** vrurg joined
[16:58] <choiboi> Hey guys, I know I haven't been on for a while but I wrote a little toy language in Perl6 and documented how I made it and put the code on Github, if anyone wants to check out the post its xikuuky.insomnia247.nl/3.html

[17:00] *** abraxxa left
[17:04] <araraloren> so it's non-readable language :/

[17:06] <tony-o> dutch isn't _that_ bad araraloren (hah)

[17:07] *** khisanth_ joined
[17:10] *** domidumont left
[17:11] *** daemon is now known as pingu2

[17:12] *** pingu2 is now known as tnViking

[17:13] *** tnViking is now known as cortana

[17:20] *** domidumont joined
[17:30] *** domidumont left
[17:32] <tony-o> m: say <a b c>.classify({ [True, False] })

[17:32] <evalable6> tony-o, rakudo-moar d5044de2f: OUTPUT: ¬´{True => {False => [a b c]}}‚ê§¬ª

[17:32] <tony-o> not what i'd expect

[17:36] <ugexe> thats a bit contrived 

[17:39] <ugexe> conceptually that is categorize

[17:39] <ugexe> m: say <a b c>.categorize({ [True, False] })

[17:39] <evalable6> ugexe, rakudo-moar d5044de2f: OUTPUT: ¬´{False => [a b c], True => [a b c]}‚ê§¬ª

[17:50] *** Kaiepi left
[17:51] *** Kaiepi joined
[17:52] *** Kaiepi left
[17:53] *** Kaiepi joined
[17:55] *** kurahaupo left
[17:55] *** kurahaupo joined
[17:55] *** araraloren left
[18:00] *** agentzh left
[18:02] *** agentzh joined
[18:02] *** agentzh left
[18:02] *** agentzh joined
[18:07] *** Possum joined
[18:13] *** mowcat joined
[18:19] *** natrys joined
[18:29] <tyil> ctilmes: awesome! thanks!

[18:30] <tony-o> boils down to 

[18:30] <tony-o> m: my %x; %x{any(True, False, False)}.push: 5; %x{any(True, False, False)}.push: 15; %x.say

[18:30] <evalable6> tony-o, rakudo-moar d5044de2f: OUTPUT: ¬´{False => [5 15 15], True => [5 15]}‚ê§¬ª

[18:31] *** sauvin left
[18:43] *** jmerelo left
[18:48] *** netrino joined
[18:53] <lucs> Hmm... How can I tell if zef is being (unusually?) quiet or whether it's hung?

[18:54] <lucs> It's been stuck at  ===> Searching for: p6doc  for over 12 minutes now.

[18:56] *** zachk joined
[18:58] *** zachk left
[18:58] *** zachk joined
[19:02] <ugexe> you can always run with --verbose or --debug to get more output

[19:03] *** zachk left
[19:03] *** zachk joined
[19:04] <lucs> Ok, will start again (still stuck).

[19:06] *** kurahaupo left
[19:06] *** kurahaupo joined
[19:07] *** __jrjsmr_ joined
[19:08] *** __jrjsmr_ left
[19:10] *** andrzejku joined
[19:17] *** Black_Ribbon joined
[19:18] *** Xliff joined
[19:18] <Xliff> \o

[19:18] <lucs> Hiya

[19:19] <Xliff> I have the first part of a substitution regex that looks like this: s!'<template class='<quoted>' parent='<quoted>!

[19:19] <Xliff> How do I refer to the first and second <quoted> values in the second part?

[19:20] <Xliff> s!'<template class='<quoted>' parent='<quoted>!<object class="$/<quoted>[1]" id="$/<quoted>[0]"! ??

[19:22] <Xliff> m: my regex quoted { \" ~~ \" <-[\"]>+ }; my $a = '"This is a test"'; say $a ~~ /<quoted>/

[19:22] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) 04===SORRY!04===‚ê§Unrecognized regex metacharacter ~ (must be q‚Ä¶¬ª

[19:22] <evalable6> Xliff, Full output: https://gist.github.com/6a3e951ad4d69413d0943138ca492f10

[19:22] <Xliff> m: my regex quoted { \" ~ \" <-[\"]>+ }; my $a = '"This is a test"'; say $a ~~ /<quoted>/

[19:22] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´ÔΩ¢"This is a test"ÔΩ£‚ê§ quoted => ÔΩ¢"This is a test"ÔΩ£‚ê§¬ª

[19:22] <Xliff> m: my regex quoted { \" ~ \" (<-[\"]>+) }; my $a = '"This is a test"'; say $a ~~ /<quoted>/

[19:23] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´ÔΩ¢"This is a test"ÔΩ£‚ê§ quoted => ÔΩ¢"This is a test"ÔΩ£‚ê§  0 => ÔΩ¢This is a testÔΩ£‚ê§¬ª

[19:23] <Xliff> So...

[19:23] <Xliff> s!'<template class='<quoted>' parent='<quoted>!<object class=$/<quoted>[1] id=$/<quoted>[0]! ??

[19:24] <tony-o> m: my $x = "abcdef"; $x ~~ s:x/ { token quote { "d"|"f" } } <quote> \w+ <quote> /{ $/<quote>[0] }{ $/<quote>[0] }/; $x.say;

[19:24] <evalable6> tony-o, rakudo-moar d5044de2f: OUTPUT: ¬´abcdd‚ê§¬ª

[19:26] <Xliff> m: my regex quoted { \" ~ \" (<-[\"]>+) }; my $a = '<template class="A" parent="B" the rest>'; $a ~~ s!'<template class='<quoted>' parent='<quoted>!<object class=$/<quoted>[1] id=$/<quoted>[0]!; say $a

[19:26] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´<object class="B" id="A" the rest>‚ê§¬ª

[19:26] <Xliff> \o/

[19:27] <Xliff> tony-o++ 

[19:29] *** pistacchio left
[19:29] *** pistacchio joined
[19:30] *** epony joined
[19:34] *** kurahaupo left
[19:34] *** kurahaupo_ joined
[19:35] *** cortana is now known as daemon

[19:42] <Kaiepi> what is $¬¢ ?

[19:45] <ugexe> cursor

[19:48] *** vrurg left
[19:49] *** vrurg joined
[19:49] <tony-o> m: my $x = any("a", "f"); say $x.Str.WHAT

[19:49] <evalable6> tony-o, rakudo-moar d5044de2f: OUTPUT: ¬´(Junction)‚ê§¬ª

[19:50] <tony-o> conjunction junction

[19:51] <Kaiepi> m: say defined my $

[19:51] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´False‚ê§¬ª

[19:51] <Kaiepi> m: say defined my @

[19:51] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´True‚ê§¬ª

[19:51] <Kaiepi> m: say defined my %

[19:51] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´True‚ê§¬ª

[19:51] <Kaiepi> m: say defined my &

[19:51] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´False‚ê§¬ª

[19:52] <Kaiepi> should this be documented as a trap?

[19:52] <Kaiepi> same with this:

[19:52] <Kaiepi> m: class Foo { has Str $.bar; submethod BUILD(:$!bar = 'baz') {} }; my Foo $foo .= new; say $foo.bar

[19:52] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´baz‚ê§¬ª

[19:52] <Kaiepi> oh wait what

[19:52] <ugexe> that containers are defined?

[19:53] <Kaiepi> that unassigned @ and % variables are still defined

[19:53] <Kaiepi> i ran into a bug in my code that confused the hell out of me because i assumed they weren't like variables that use $

[19:54] <Kaiepi> s/weren't/were/

[19:54] <Kaiepi> er

[19:54] <Kaiepi> i was right originally

[19:54] <ugexe> m: say {}.defined; # im not sure its surprising when put this way

[19:54] <evalable6> ugexe, rakudo-moar d5044de2f: OUTPUT: ¬´True‚ê§¬ª

[19:56] <Kaiepi> put that way, yeah

[19:56] <discord6> <Tyler (Aearnus)> hey, is there a list of good beginner's bugs in rakudo anywhere? I want to do some bug squashing

[19:57] <Kaiepi> m: class Foo { has Str $.bar; submethod BUILD(:$!bar = 'baz') {}; method new(:$bar) { self.bless: :$bar } }; my Foo $foo .= new; say $foo.bar

[19:57] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) Type check failed in assignment to $!bar; expected Str but got Any (Any)‚ê§  in submethod BUILD at /tmp/5tA907HR4J line 1‚ê§  in method new at /tmp/5tA907HR4J line 1‚ê§  in block <unit> at /tmp/5tA907HR4J line 1‚ê§‚ê§¬ª

[19:57] <Kaiepi> m: class Foo { has $.bar; submethod BUILD(:$!bar = 'baz') {}; method new(:$bar) { self.bless: :$bar } }; my Foo $foo .= new; say $foo.bar

[19:57] <evalable6> Kaiepi, rakudo-moar d5044de2f: OUTPUT: ¬´(Any)‚ê§¬ª

[19:57] <Kaiepi> could this be a trap or is it just a dumb mistake on my part

[19:59] *** pmurias joined
[20:02] *** SergiusUA left
[20:03] *** andrzejku left
[20:04] <tony-o> you're not assigning anything $bar in the `new`

[20:04] <tony-o> m: class Foo { has $.bar; submethod BUILD(:$!bar = 'baz') {}; method new(:$bar = 'dang it') { self.bless: :$bar } }; my Foo $foo .= new; say $foo.bar

[20:04] <evalable6> tony-o, rakudo-moar d5044de2f: OUTPUT: ¬´dang it‚ê§¬ª

[20:05] <tony-o> and BUILD is reflecting the passed value of Any

[20:05] <ugexe> its because parameters use binding, not assignment

[20:05] <ugexe> m: my $foo is default(42) = Nil; say $foo;

[20:05] <evalable6> ugexe, rakudo-moar d5044de2f: OUTPUT: ¬´42‚ê§¬ª

[20:05] <ugexe> m: my $foo is default(42) := Nil; say $foo;

[20:05] <evalable6> ugexe, rakudo-moar d5044de2f: OUTPUT: ¬´Nil‚ê§¬ª

[20:07] <Kaiepi> i know tony-o 

[20:08] <Kaiepi> but is it likely that other people will try to do that and run into the same issue?

[20:08] <Xliff> Kaiepi: I know that looks like a trap. I would think that if a parameter is passed and hits a sig with a default value it should take that value.

[20:08] <Xliff> But technically, Any is a value.

[20:08] <Xliff> So without the default on method new... Any gets through and BUILD ignores the default.

[20:08] <Xliff> It's not a trap, but probably should be documented.

[20:08] <Kaiepi> i assumed $bar would be Nil, not Any

[20:09] <Xliff> Kaiepi: Even if its Nil, that would pass through as a value to BUILD

[20:09] <Xliff> I have been caught by same.

[20:09] <tony-o> what definition of trap are you using?

[20:09] <Xliff> "Something new users would run into"

[20:10] <Kaiepi> a mistake that people could make based off assumptions on how the language works

[20:10] <Xliff> ^ or that

[20:10] <tony-o> ah, doesn't the doc for `.new` say you shouldn't be using that unless you know what you're doing?

[20:11] <Xliff> tony-o: How do you "know what you are doing" if the docs don't explain things like this?

[20:12] <tony-o> because you are willing to do stuff you know you probably shouldn't and know the reasons why it's required for your purpose

[20:12] <Xliff> method new(:$bar) { } is the equivalent of saying method new (:$bar = Any) { }

[20:12] <Xliff> ^^ THAT would be sufficient notice.

[20:13] <tony-o> the docs do discourage use of `method new` with preference to `BUILD|TWEAK` 

[20:13] <tony-o> and say not to use `method`, preferring `multi method`

[20:13] <Xliff> Discouraging is not enough, though.

[20:13] <Kaiepi> in my case i was using BUILD because i was assigning to private attributes

[20:13] <Xliff> Most people are familiar with C++ or C# and those use new as the constructor. Not BUILD.

[20:14] <Xliff> Until people understand WHY it is discouraged, just saying "we prefer you do this" really isn't good enough.

[20:14] <tony-o> it explains why in the docs

[20:15] <tony-o> Declaring new as a method and not a multi method prevents us from using the default constructor; this implicit constructor uses the attributes as named parameters. That is one of the reasons why using new is discouraged.

[20:15] <tony-o> which, ironically, is related to that ^ `.new` 

[20:16] <Xliff> Yes, but sometimes using the default constructor in complex inheritance chains, is also a trap.

[20:16] <Xliff> Never the less, that wording is a lot better than I remember, so....

[20:16] <tony-o> i'd like to know more about the inheritance chain trap

[20:16] <ugexe> using .new makes inheritance more difficult

[20:17] <tony-o> do you have a bug or example i can look at Xliff ?

[20:17] *** redhands joined
[20:17] <ugexe> but does make some advanced cases possible

[20:17] <ugexe> the obvious one: having an api with positionals

[20:18] <ugexe> also s/using .new/defining your own .new/

[20:18] <Xliff> m: class A { has $.a; submethod BUILD (:$!a($a)) { }; multi method new (Int $a) { self.bless(:$a) }; }; my $a = A.new('aa');

[20:18] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/BSVefKAlJ7‚ê§Shape d‚Ä¶¬ª

[20:18] <evalable6> Xliff, Full output: https://gist.github.com/01601cdf61d92dcec5fefc0d8467b365

[20:18] <Xliff> m: class A { has $.a; submethod BUILD (:$!a:($a)) { }; multi method new (Int $a) { self.bless(:$a) }; }; my $a = A.new('aa');

[20:18] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/rCZD2xzmbG‚ê§Attribu‚Ä¶¬ª

[20:18] <evalable6> Xliff, Full output: https://gist.github.com/6516fd3ecfb1e6c778505c77c8a9eee9

[20:19] <Xliff> m: class A { has $.a; submethod BUILD (:$a)) { $!a = $a }; multi method new (Int $a) { self.bless(:$a) }; }; my $a = A.new('aa');

[20:19] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/6fiYmj3ihj‚ê§Missing‚Ä¶¬ª

[20:19] <evalable6> Xliff, Full output: https://gist.github.com/763a72003ce751f9c601b07775ed6dd4

[20:19] <Xliff> Grrrr....

[20:19] <AlexDaniel> Tyler (Aearnus): maybe try https://github.com/rakudo/rakudo/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22

[20:19] *** clarkema_ joined
[20:20] *** clarkema joined
[20:20] *** clarkema left
[20:20] *** clarkema_ is now known as clarkema

[20:20] <Xliff> m: class A { has $.a; submethod BUILD (:$a) { $!a = $a }; multi method new (Int $a) { self.bless(:$a) }; }; my $a = A.new('aa');

[20:20] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) Default constructor for 'A' only takes named arguments‚ê§  in block <unit> at /tmp/X9Lq_J81tY line 1‚ê§‚ê§¬ª

[20:20] <Xliff> There.

[20:21] <timotimo> aye, needs a proto in there

[20:21] <Xliff> Yes.

[20:21] <Xliff> Was just about to make that point.

[20:21] <Xliff> Going by the docs though, that error message would be confusing because class A doesn't defined a constructor that takes named arguments.

[20:22] <timotimo> you think it should perhaps inspect the class that had "new" called on it?

[20:22] <timotimo> to generate a better error message?

[20:22] <Xliff> Something like that.

[20:22] <ugexe> the constructor is defined through declarative syntax of the class itself

[20:22] <Xliff> Or maybe add "did you forget to add a proto new" method to class A?

[20:22] <timotimo> kind of like when we have "candidates that would match if there were a writable argument" one

[20:23] <Xliff> m: class A { has $.a; submethod BUILD (:$a) { $!a = $a }; method new (Int $a) { self.bless(:$a) }; }; my $a = A.new('aa');

[20:23] <evalable6> Xliff, rakudo-moar d5044de2f: OUTPUT: ¬´(exit code 1) Type check failed in binding to parameter '$a'; expected Int but got Str ("aa")‚ê§  in method new at /tmp/9vQrcSkS2C line 1‚ê§  in block <unit> at /tmp/9vQrcSkS2C line 1‚ê§‚ê§¬ª

[20:23] <kybr> do we have a regex/grammar explorer like https://regexr.com or https://pegjs.org/online yet? i find myself craving the immediacy of these tools.

[20:23] <Xliff> ^^ That's good, but it goes against the docs when they say use "multi method" 

[20:24] <Xliff> kybr: What do you mean?

[20:24] <Xliff> I've done this: https://github.com/Xliff/p6-VisualGrammar/

[20:24] <Xliff> But it's a bear of an install.

[20:24] <tony-o> oh that's cool

[20:24] *** redhands left
[20:25] <Xliff> tony-o: Thanks! :)

[20:25] <kybr> Xliff: i'd call that a qualified yes.

[20:25] <tony-o> seems like introspecting and saying doesn't match signatures (like other methods do) would make that error clearer

[20:26] <Xliff> kybr: Experimental and work in progress. I haven't touched it in a bit, so changes may have introduced bitrot.

[20:26] <Xliff> kybr: If you run into ANY problems, or have suggestions, please create issues and notify me here via PM or .tell

[20:27] <Xliff> Please note, I have not tested it with large grammars, so that may be sketchy.

[20:38] *** molaf joined
[20:40] <cpan-p6> New module released to CPAN! FindBin (0.2.4) by 03LEMBARK

[20:46] *** domidumont joined
[20:50] <lizmat> weekly: https://aearnus.github.io/2019/04/03/a-whirlwind-tour-of-perl6-s-best-features

[20:50] <notable6> lizmat, Noted!

[20:50] <lizmat> weekly: https://aearnus.github.io/2019/04/05/perl6-is-the-world-s-worst-ml

[20:50] <notable6> lizmat, Noted!

[20:51] <discord6> <Tyler (Aearnus)> :o

[20:52] <ctilmes> ugexe: FYI: salortiz patched the failing test: https://github.com/salortiz/NativeLibs/issues/5

[20:53] *** domidumont left
[21:01] *** skids left
[21:01] *** pecastro left
[21:10] *** releasable6 left
[21:14] *** releasable6 joined
[21:17] <squashable6> üçï lembark++ wrote a comment on a review for ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#discussion_r272746792

[21:17] <squashable6> üçïüçïüçï  First contribution by lembark++! ‚ô•

[21:17] <squashable6> üçï lembark++ submitted a review on pull request ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#pullrequestreview-223483191

[21:19] <squashable6> üçï AlexDaniel++ wrote a comment on a review for ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#discussion_r272747208

[21:19] <squashable6> üçïüçïüçï  First contribution by AlexDaniel++! ‚ô•

[21:19] <squashable6> üçï AlexDaniel++ submitted a review on pull request ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#pullrequestreview-223483718

[21:20] <squashable6> üçï timo++ submitted a review on pull request ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#pullrequestreview-223484104

[21:20] <squashable6> üçïüçïüçï  First contribution by timo++! ‚ô•

[21:20] <squashable6> üçï timo++ wrote a comment on a review for ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#discussion_r272747504

[21:21] <squashable6> üçï AlexDaniel++ submitted a review on pull request ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#pullrequestreview-223484231

[21:21] <squashable6> üçï AlexDaniel++ wrote a comment on a review for ‚ÄúAdd FindBin to ecosystem‚Äù: https://github.com/perl6/ecosystem/pull/443#discussion_r272747609

[21:32] <Kaiepi> squashable6, help

[21:32] <squashable6> Kaiepi, Available commands: status, log, quiet, loud # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Squashable

[21:32] <Kaiepi> squashable6, status

[21:32] <squashable6> Kaiepi, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà16 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:32] <squashable6> Kaiepi, Log and stats: https://gist.github.com/f1364de041785813e4c5c642a4c4965e

[21:33] <Kaiepi> oh sweet

[21:35] <Kaiepi> anyone up for working on my Net::Telnet package? i'll throw up some issues on features i want added before i can upload it to cpan

[21:40] <Kaiepi> i'll work on other people's modules in exchange

[21:46] <timotimo> what kind of programming stuff do you enjoy? :)

[21:51] *** mowcat left
[21:51] *** clarkema left
[21:56] *** pochi joined
[21:56] *** ctilmes1 joined
[21:56] *** pistacch_ joined
[21:56] *** Kaypie joined
[21:58] *** tobs` joined
[21:58] *** aindilis` joined
[21:58] <Xliff> Ooh! Kaiepi! If you can look at the twisted example in p6-Pango, I'll be your huckleberry! :D

[21:58] *** buffet_ joined
[21:59] *** kaare__ joined
[21:59] <Xliff> https://github.com/Xliff/p6-Pango/blob/master/t/02-twisted.t <-- Text don't twist.

[22:00] *** irdr_ joined
[22:00] *** Praise- joined
[22:00] *** Praise- left
[22:00] *** Praise- joined
[22:00] <Kaypie> timotimo, networking mainly

[22:00] *** namibj_ joined
[22:00] *** samcv_ joined
[22:00] *** breinbaa1 joined
[22:00] *** choiboi_ joined
[22:00] *** telex left
[22:00] *** MilkmanD1n joined
[22:00] *** kybr_ joined
[22:00] *** telex joined
[22:00] *** smash_ joined
[22:00] *** pmurias_ joined
[22:00] <Kaypie> Xliff, i'll see if i can install pango on openbsd or not

[22:01] <timotimo> i can't actually tell if i can help you at all for Net::Telnet, but ... any interest in HTTP3 for cro? :D

[22:01] *** natrys_ joined
[22:01] *** benjikun_ joined
[22:01] *** irdr left
[22:01] *** MilkmanDan left
[22:01] *** choiboi left
[22:01] *** Ekho left
[22:01] *** kybr left
[22:01] *** pistacchio left
[22:01] *** khisanth_ left
[22:01] *** irco left
[22:01] *** aindilis left
[22:01] *** Voldenet left
[22:01] *** stux|RC-only left
[22:01] *** samcv left
[22:01] *** benjikun left
[22:01] *** APic left
[22:01] *** smash left
[22:01] *** Praise left
[22:01] *** renormalist left
[22:01] *** Ulti_ joined
[22:01] *** buffet left
[22:01] *** natrys left
[22:01] *** namibj left
[22:01] *** breinbaas left
[22:01] *** pmurias left
[22:01] *** dylanwh left
[22:01] *** woolfy left
[22:01] *** Ulti left
[22:01] *** Kaiepi left
[22:01] *** ctilmes left
[22:01] *** rindolf left
[22:01] *** pochi_ left
[22:01] *** jeek left
[22:01] *** kaare_ left
[22:01] *** tobs left
[22:01] *** lookatme_q left
[22:01] *** ambs left
[22:01] *** jeek joined
[22:01] *** tobs` is now known as tobs

[22:01] <Kaypie> you mean http2 right?

[22:01] *** renormalist joined
[22:01] *** ambs_ joined
[22:01] <Kaypie> timotimo, here's the list of issues i wrote up https://github.com/Kaiepi/p6-Net-Telnet/issues

[22:01] *** APic joined
[22:01] <Xliff> Ooh! And the net decides to do a banana and split! :P

[22:01] <Kaypie> some of them require no knowledge on telnet

[22:01] *** cpan-p6 left
[22:02] *** lookatme_q joined
[22:02] *** rindolf joined
[22:02] *** cpan-p6 joined
[22:02] *** cpan-p6 left
[22:02] *** cpan-p6 joined
[22:02] *** woolfy joined
[22:02] <Kaypie> perfect, i can install pango-1.42.4p1

[22:02] *** khisanth_ joined
[22:03] *** Praise- is now known as Praise

[22:04] *** Voldenet joined
[22:04] *** Voldenet left
[22:04] *** Voldenet joined
[22:04] *** Ekho joined
[22:05] *** stux|RC-only joined
[22:08] <Kaypie> timotimo, idk much about http2 but i could skim through the rfc for it and see what i can do

[22:08] <Kaypie> Xliff, i'll be a while since i need to update all the packages on my system before i can get pango installed

[22:09] *** natrys_ left
[22:09] <timotimo> don't feel obligated; after all, cro is a product of edument after all ;)

[22:10] <Xliff> Kaypie: No worries.

[22:10] <ugexe> cro already is http2 capable

[22:10] <ugexe> its not http3

[22:11] <timotimo> yeah

[22:11] <timotimo> oh

[22:11] <Kaypie> wait http3 exists?

[22:11] <timotimo> Kaypie: i didn't see when you wrote "you mean http2"

[22:11] <timotimo> yeah, it's pretty fresh out of the oven

[22:11] <Kaypie> huh

[22:12] <timotimo> it's based on QUIC

[22:12] <Kaypie> what's QUIC?

[22:12] <timotimo> "like SPDY, but UDP"

[22:12] <timotimo> (i don't know enough about it to give an adequate explanation)

[22:12] <ugexe> the better to serve you ads with my dear

[22:12] <timotimo> :D

[22:13] *** dylanwh joined
[22:13] <Xliff> ugexe++ # LOL

[22:15] <Kaypie> ...what's spdy

[22:15] <Kaypie> i know i've heard of it before

[22:16] <timotimo> it was what HTTP2 was based on

[22:17] <ugexe> but it didnt serve ads fast enough because it still suffers from head-of-line TCP shit

[22:23] *** sena_kun left
[22:28] *** hythm_ left
[22:36] *** skyscout joined
[22:36] * skyscout waves

[22:37] *** MilkmanD1n is now known as MilkmanDan

[22:37] <skyscout> (don't mind me, just playing fly on the wall while I dig out my tutorials and try some more p6)

[23:02] *** aindilis` left
[23:03] *** netrino left
[23:19] *** ctilmes1 left
[23:21] *** ctilmes joined
[23:21] *** ctilmes left
[23:22] *** ctilmes joined
[23:25] *** AlexDaniel left
[23:27] <cpan-p6> New module released to CPAN! FindBin (0.2.5) by 03LEMBARK

[23:28] *** ExtraCrispy left
[23:29] *** AlexDaniel joined
[23:35] *** rindolf left
[23:41] *** aindilis joined
[23:42] <Xliff> Kaypie: I have a doc making script for you.

[23:42] <Xliff> It's not perfect, but...

[23:42] *** kurahaupo_ left
[23:42] *** kurahaupo joined
[23:43] <Xliff> Kaypie: https://pastebin.com/bJCqJCRz

[23:59] *** greppable6 left
