[00:00] <TreyHarris> Xliff: since you ventured an opinion, would you do the same--write it as a class rather than a module?

[00:01] <TreyHarris> Kaiepi: no, I'm not sure I'm suggesting that--like I said, I may be missing something. (And sorry, I didn't realize I was in "hold" mode so wasn't seeing your reply before)

[00:04] *** cpan-p6 left
[00:04] *** cpan-p6 joined
[00:04] <cpan-p6> 03cpan-p6 reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[00:05] <tyil> now I just hope it'll behave as it did during testing :)

[00:05] *** p6bannerbot sets mode: +v cpan-p6

[00:09] *** kurahaupo joined
[00:10] <tyil> is there a(n easy) way for a module to retrieve it's own META6.json content, so I can refer it's own version without hardcoding it?

[00:10] *** p6bannerbot sets mode: +v kurahaupo

[00:10] <Xliff> TreyHarris: Yes. Especially if the functions were part of a coherent set.

[00:10] <Xliff> I just did that, as a matter of fact! :)

[00:11] <TreyHarris> Xliff: what is the advantage over a module, though? I only see disadvantages

[00:12] <Xliff> It's easier for you to tell me the disadvantages you see, than for me to tell you the advantages.

[00:12] <Xliff> The largest advantage is that it gives you a namespace to keep your routines in and prevents subroutine name collisions.

[00:13] *** kurahaupo left
[00:14] *** Ven`` joined
[00:14] <TreyHarris> Xliff: As I wrote above, if it were `unit module Digest::BubbleBabble; our sub encode....`, then you just do `need Digest::BubbleBabble; Digest::BubbleBabble::encode($data); my $encoder = &Digest::BubbleBabble::encode; $encoder($data);` to call it directly or indirectly. As a class, you have to write a shim routine or do ugly MOP stuff like ^lookup to call it indirectly

[00:15] *** lizmat left
[00:15] *** p6bannerbot sets mode: +v Ven``

[00:15] <TreyHarris> It doesn't pollute any namespace either way

[00:16] <Xliff> TreyHarris: Then do it that way!

[00:17] <Xliff> I am not familiar with Digest::BubbleBabble. I don't know what problems you are having with it. Do you have an example of how you are working around it and how you would prefer to use it?

[00:17] <Xliff> (I have not been paying much attention to IRC over the last few hours. Fixing dinner. Coding. Cats! ...)

[00:19] <El_Che> Xliff: be very suspicious of cats: https://twitter.com/i/status/1081392923659382784

[00:20] <TreyHarris> Xliff: I wanted to compare several encoders. The natural way to do that was to put them in a list and create a harness to compare them however I want. But, as a class, even though it has no instance state, I can't assign the .encode method to a variable or as an item in a list directly. That caused me to wonder why, as a design question, one would prefer a class over a module when there's no object state and

[00:20] <TreyHarris> no OO semantics.

[00:20] *** lizmat joined
[00:20] *** p6bannerbot sets mode: +v lizmat

[00:20] <Xliff> El_Che: DON'T BLINK!

[00:21] <El_Che> hehe

[00:21] <El_Che> Was thinking that as well

[00:22] <Xliff> TreyHarris: As a module designer, I have no clue how my modules will be used. All I can do is make them as usable as possible and hope for the best. The author of Digest::BubbleBabble never expected your use case. 

[00:22] <El_Che> (I have a weeping angel statuette at work)

[00:22] <Xliff> That's software development for you. Code up a workaround and submit a PR. :/

[00:22] <Xliff> El_Che: You live dangerously. I hope you have some tear droppers in your desk drawer!

[00:23] <TreyHarris> Xliff: But I was asking because I do happen to be writing a module that I want to release that is like this--a collection of functions. I've written it as a module with our subs. But seeing this example leads me to ask: what use cases others have am *I* missing where, if I do it that way, users will wish I did it as a class with static methods?

[00:24] <timotimo> TreyHarris: you can get the method into a variable, though. you can also just have a tiny closure that calls it and then that can go into the list

[00:24] <El_Che> Xliff: lol

[00:24] <Xliff> timotimo++

[00:25] <TreyHarris> timotimo: I understand that. I'm just wondering what use cases the module makes harder, since I've identified one the class makes harder.

[00:26] <TreyHarris> Some languages don't let you write any callables that aren't methods. Perl 6 does. So I feel like I should understand the tradeoffs

[00:29] *** kurahaupo joined
[00:29] *** p6bannerbot sets mode: +v kurahaupo

[00:36] *** kurahaupo left
[00:42] <timotimo> classes make it a little easier to have multi candidates extended by users i guess

[00:44] *** w_richard_w left
[00:48] <TreyHarris> timotimo: "Because a non-multi will hide multi candidates of the same name in any parent scope or child scope. The same is true for imported non-multi candidates" quoting from the docs? Is that true in this case, though, since you don't actually import our subs?

[00:50] <timotimo> hm, well, you'll be refering to the proto valid at the exact point you do the assignment of the sub to the list or what-have-you

[00:50] <timotimo> so i suppose multis would still work fine as well

[00:50] <timotimo> and since you can just as well hold state in subs ...

[00:50] *** cydf left
[00:50] <timotimo> what's the difference between anything, really

[00:57] <TreyHarris> timotimo: I think it's a case of the obviousness of the syntax for any higher-order metaprogramming. Like, if I wanted to wrap a static method, how would I do it? `my $wrapper = &Some::UnitModule::func.wrap(sub ...);` feels quite obvious to me. But if it's a `Some::UnitModule.func(...)` static method... I'm not sure how you do it

[00:59] *** kurahaupo joined
[00:59] <timotimo> right, you'd .^find_method

[00:59] <timotimo> since methods aren't a simple "contains" thing

[00:59] *** p6bannerbot sets mode: +v kurahaupo

[01:00] <timotimo> the object is completely in charge of what a method call means

[01:05] <TreyHarris> Of course. I'm not someone who eschews OO in general, or even when not absolutely required--I know our community includes many who do. But a collection of stateless functions, the Perl 6 equivalent of a math.h or something--I can't see any reason to implement them as static methods. TMTOWTDI always, of course--but as a module author you want to choose the most flexible syntax for users that does what you need

[01:05] <TreyHarris> without requiring you as the module author to jump through hoops either, I think.

[01:05] *** Ven`` left
[01:05] *** sena_kun left
[01:05] *** kurahaupo left
[01:06] <timotimo> true

[01:06] <TreyHarris> Sorry--*"them as static methods in a Math class" I meant

[01:07] *** rindolf left
[01:07] <timotimo> my school didn't have carpets, so there was no static in math class

[01:07] <TreyHarris> heh ;-)

[01:13] *** MilkmanDan left
[01:15] *** MilkmanDan joined
[01:15] *** p6bannerbot sets mode: +v MilkmanDan

[01:17] *** guifa left
[01:21] *** Zachk joined
[01:21] *** p6bannerbot sets mode: +v Zachk

[01:35] <simple> oh, ffs, perl6 has no proper 'goto <label>;' statement =/

[01:36] <timotimo> true, that's not yet implemented

[01:36] <timotimo> you can have labelled loops at least, and "next" or "break" with a label

[01:36] <simple> that makes me a sad panda

[01:37] *** Zachk left
[01:39] <simple> so.. can someone go ahead and implement that now plz kthx, i'll need it by morning...

[01:39] <timotimo> well volunteered!

[01:39] <timotimo> it should be simple! (get it? it's a joke)

[01:40] <simple> i suppose if my C were as good as my perl5, i could give it a shot

[01:40] <simple> but alas, 'tis not so simple in this case

[01:43] <timotimo> not everything that hasn't been implemented is hard, but i reckon this isn't easy

[01:44] <TreyHarris> I think it's more complex than it appears... I know there has been lots of desire for a way to replace the current calling stack like perl 5'ss `goto &sub`

[01:44] <simple> i'd reckon so

[01:44] <simple> i don't even want to call a sub, just jump to a label in the same method

[01:46] <timotimo> i mean, you can abuse try/catch probably :S

[01:46] <TreyHarris> A goto that was limited to just a label in the same method and scope might be fairly easy. But would a patch to implement goto in that sub-case by accepted? (I don't know)

[01:47] <timotimo> do we already have the semantics defined for something gosub-like? especially with regards to the leave queue?

[01:47] <simple> i'd even be happy with a separate implementation, like 'goto-label label1;'

[01:48] <timotimo> unfortunately, that'd be the easiest part

[01:48] <simple> then you could make a 'goto-sub &whatnot;' separately

[01:49] <simple> making all the goto use-cases fit into a single 'goto' might be nice, but hardly necessary, at least in my opinion

[01:49] <timotimo> i think it'd literally be exactly as easy to have both be "goto" than to have two different ones

[01:50] <TreyHarris> With a pragma it might be allowable. But ease of working within Rakudo's implementation shouldn't drive language constructs. The behavior of goto has already been defined by TimToady. See https://github.com/perl6/roast/blob/master/S04-statements/goto.t

[01:51] <timotimo> huh, goto a string is supposed to look up the label by name, eh?

[01:51] <simple> https://design.perl6.org/S04.html#The_goto_statement

[01:53] <timotimo> do note however that the design docs are not authoritative

[01:54] * simple nods

[01:56] <MasterDuke> timotimo: does implementing some form of 'goto' require MoarVM work (i.e., C)? or could it be done in Rakudo/NQP?

[01:56] <Xliff> simple: Do you have code to show where you need goto?\

[01:56] <TreyHarris> I don't want to dissuade you... Adding variants of goto's with a Rakudo-only pragma would probably be okay, and if one turns out to be especially useful, maybe it'll make it into the language separate from the general goto

[01:57] <Xliff> You could work around it (since you "need it by morning") and refactor back when it's in-place.

[01:58] <TreyHarris> Personally I've never used the goto statement in other languages for anything but frame replacement so I can blame errors on the caller when I can identify them

[01:58] <TreyHarris> So examples would probably be helpful, yeah

[01:58] <simple> Xliff: i'm doing text processing on decomplied code, so not really

[01:59] <simple> decompiled*

[01:59] <Xliff> simple: Ah! Sorry. Wish I could be of more help. :/

[01:59] <simple> thanks anyway =)

[01:59] <Xliff> simple: Using grammars?

[01:59] <Xliff> If not, it might be too late to convert, now.

[02:01] <timotimo> MasterDuke: i don't really know tbh, it might be possible to do without

[02:11] *** zacts joined
[02:11] *** p6bannerbot sets mode: +v zacts

[02:11] *** zacts left
[02:15] *** BeaconAlumna joined
[02:16] *** p6bannerbot sets mode: +v BeaconAlumna

[02:16] *** SqrtNegInf left
[02:20] <SmokeMachine> m: given 42 { say |(do if False { $_ } else { $_ }) }

[02:20] <camelia> rakudo-moar e87b7afb0: OUTPUT: «(LoweredAwayLexical)␤»

[02:21] <SmokeMachine> from where is the LoweredAwayLexical comming?

[02:21] <SmokeMachine> is that expected?

[02:22] <SmokeMachine> m: given 42 { say |(do if True { $_ } else { $_ }) }

[02:22] <camelia> rakudo-moar e87b7afb0: OUTPUT: «(LoweredAwayLexical)␤»

[02:22] <SmokeMachine> m: given 42 { say do if True { $_ } else { $_ } }

[02:22] <camelia> rakudo-moar e87b7afb0: OUTPUT: «(LoweredAwayLexical)␤»

[02:23] <timotimo> wow, that's impressive

[02:23] <SmokeMachine> m: given 42 { if True { .say } else { .say } }

[02:23] <camelia> rakudo-moar e87b7afb0: OUTPUT: «42␤»

[02:23] <timotimo> clearly it's not doing the lowering fully correctly

[02:23] <MasterDuke> bisectable6: old=2018.12 given 42 { say do if True { $_ } else { $_ } }

[02:23] <bisectable6> MasterDuke, Problem with e87b7af commit: Commit exists, but a perl6 executable could not be built for it

[02:23] <MasterDuke> bisectable6: old=2018.11 given 42 { say do if True { $_ } else { $_ } }

[02:23] <bisectable6> MasterDuke, Problem with e87b7af commit: Commit exists, but a perl6 executable could not be built for it

[02:24] <Xliff> MasterDuke: There is no "goto" opcode for Moar, so unless you can convert it to an existing loop control structure, I don't see how it would work without changes to moar.

[02:24] <SmokeMachine> m: say do given 42 { $_ }

[02:24] <camelia> rakudo-moar e87b7afb0: OUTPUT: «42␤»

[02:24] <SmokeMachine> m: say do if 42 { $_ }

[02:24] <camelia> rakudo-moar e87b7afb0: OUTPUT: «(LoweredAwayLexical)␤»

[02:25] <SmokeMachine> m: say do for 42 { $_ }

[02:25] <camelia> rakudo-moar e87b7afb0: OUTPUT: «(42)␤»

[02:25] <timotimo> Xliff: there actually is a goto opcode for moar, though?

[02:25] <Xliff> timotimo: It's not listed here: https://github.com/perl6/nqp/blob/master/docs/ops.markdown

[02:25] <Xliff> Oh! But that's NQP. :/

[02:25] <timotimo> there's lots of stuff in moarvm that can't be reached with nqp::blah

[02:26] <timotimo> https://github.com/MoarVM/MoarVM/blob/master/src/core/oplist

[02:26] <timotimo> this is the more interesting file for this purpose

[02:26] <Xliff> https://github.com/MoarVM/MoarVM/blob/master/src/core/interp.c#L238

[02:26] <Xliff> :-O

[02:27] <timotimo> yup

[02:28] <SmokeMachine> m: say do { $_ }

[02:28] <camelia> rakudo-moar e87b7afb0: OUTPUT: «(Any)␤»

[02:28] <timotimo> m: say do { } or do { not * }

[02:28] <camelia> rakudo-moar e87b7afb0: OUTPUT: «WARNINGS for <tmp>:␤Nil␤Useless use of "not " in expression "not *" in sink context (line 1)␤»

[02:33] *** simple left
[02:36] <Xliff> I'm seeing op_goto statements in nqp, so it there. I stand corrected!

[02:36] <Xliff> Still would need Perl6 grammar and action changes. 

[02:42] <AlexDaniel> SmokeMachine, MasterDuke please leave a comment on R#2601

[02:42] <synopsebot> R#2601 [open]: https://github.com/rakudo/rakudo/issues/2601 [regression][⚠ blocker ⚠] Scope flattening causes inner scope to lose value of topic variable

[02:46] *** kurahaupo joined
[02:46] *** p6bannerbot sets mode: +v kurahaupo

[02:50] *** kurahaupo left
[02:57] *** Xliff_ joined
[02:58] *** p6bannerbot sets mode: +v Xliff_

[03:00] *** Xliff left
[03:01] *** remi_ness left
[03:02] *** guifa joined
[03:02] *** p6bannerbot sets mode: +v guifa

[03:05] *** martin__ joined
[03:06] *** p6bannerbot sets mode: +v martin__

[03:09] *** ufobat left
[03:12] *** dncefan left
[03:15] *** remi_ness joined
[03:16] *** p6bannerbot sets mode: +v remi_ness

[03:18] *** MilkmanDan left
[03:19] *** MilkmanDan joined
[03:19] *** p6bannerbot sets mode: +v MilkmanDan

[03:21] *** kurahaupo joined
[03:22] *** p6bannerbot sets mode: +v kurahaupo

[03:34] *** kurahaupo left
[03:37] *** kurahaupo joined
[03:38] *** p6bannerbot sets mode: +v kurahaupo

[03:56] *** kurahaupo left
[04:08] *** SqrtNegInf joined
[04:09] *** p6bannerbot sets mode: +v SqrtNegInf

[04:13] *** kurahaupo joined
[04:13] *** p6bannerbot sets mode: +v kurahaupo

[04:27] *** Cabanoss- joined
[04:27] *** kurahaupo left
[04:28] *** Cabanossi left
[04:28] *** p6bannerbot sets mode: +v Cabanoss-

[04:35] *** sauvin_ joined
[04:35] *** p6bannerbot sets mode: +v sauvin_

[04:35] *** sauvin left
[04:45] *** kurahaupo joined
[04:45] *** p6bannerbot sets mode: +v kurahaupo

[04:49] *** MasterDuke left
[04:52] *** dncefan joined
[04:52] *** p6bannerbot sets mode: +v dncefan

[04:56] *** pierrot left
[04:59] *** kurahaupo left
[05:01] *** MilkmanDan left
[05:02] *** MilkmanDan joined
[05:02] *** p6bannerbot sets mode: +v MilkmanDan

[05:06] *** sauvin_ is now known as Sauvin

[05:18] *** pierrot joined
[05:18] *** p6bannerbot sets mode: +v pierrot

[05:35] <Geth> ¦ doc: Xliff++ created pull request #2565: - Improved wording for IO::Path.slurp and IO::Path.spurt.

[05:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2565

[05:37] *** kurahaupo joined
[05:38] *** p6bannerbot sets mode: +v kurahaupo

[05:38] *** molaf joined
[05:39] *** APic joined
[05:39] *** p6bannerbot sets mode: +v molaf

[05:40] *** p6bannerbot sets mode: +v APic

[05:46] *** kurahaupo left
[06:15] *** sno left
[06:17] *** jmerelo joined
[06:18] *** p6bannerbot sets mode: +v jmerelo

[06:22] *** martin__ is now known as ufobat

[06:25] <Geth> ¦ doc: 8f4063e8e7 | Xliff++ | doc/Type/IO/Path.pod6

[06:25] <Geth> ¦ doc: - Improved wording for IO::Path.slurp and IO::Path.spurt.

[06:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8f4063e8e7

[06:25] <Geth> ¦ doc: ec67ab3dc1 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[06:25] <Geth> ¦ doc: Merge pull request #2565 from Xliff/master

[06:25] <synopsebot> Link: https://doc.perl6.org/type/IO::Path

[06:25] <Geth> ¦ doc: 

[06:25] <Geth> ¦ doc: - Improved wording for IO::Path.slurp and IO::Path.spurt.

[06:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ec67ab3dc1

[06:28] *** molaf left
[06:30] *** eseyman left
[06:38] *** domidumont joined
[06:38] *** eseyman joined
[06:38] *** p6bannerbot sets mode: +v domidumont

[06:39] *** p6bannerbot sets mode: +v eseyman

[06:41] *** sno joined
[06:41] *** p6bannerbot sets mode: +v sno

[06:51] *** remi_ness left
[07:05] *** domidumont left
[07:06] *** w_richard_w joined
[07:07] *** p6bannerbot sets mode: +v w_richard_w

[07:16] <Geth> ¦ doc: aafb12525d | (JJ Merelo)++ | 2 files

[07:16] <Geth> ¦ doc: Documents HOME(DRIVE|PATH). Closes #2566

[07:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/aafb12525d

[07:19] <Xliff_> m: my $a; my $b = 0; say "set" with $a && $b

[07:19] <camelia> rakudo-moar 5fcba5b36: ( no output )

[07:19] <Xliff_> m: my $a = 1; my $b = 0; say "set" with $a && $b

[07:19] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «set␤»

[07:19] <Xliff_> m: my $a = 0; my $b = 0; say "set" with $a && $b

[07:19] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «set␤»

[07:26] *** w_richard_w left
[07:32] *** domidumont joined
[07:32] *** p6bannerbot sets mode: +v domidumont

[07:35] *** jmerelo left
[07:40] <Xliff_> m: my @a = ^6; @a.rotor(1).say

[07:40] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «((0) (1) (2) (3) (4) (5))␤»

[07:40] <Xliff_> m: my @a = ^6; @a.rotor(1 => 1).say

[07:40] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «((0) (2) (4))␤»

[07:54] *** [Sno] joined
[07:54] *** sno left
[07:55] *** p6bannerbot sets mode: +v [Sno]

[08:05] *** abraxxa joined
[08:06] *** p6bannerbot sets mode: +v abraxxa

[08:07] *** xinming left
[08:07] *** xinming joined
[08:08] *** p6bannerbot sets mode: +v xinming

[08:13] *** kensanata joined
[08:13] *** p6bannerbot sets mode: +v kensanata

[08:20] *** [Sno] left
[08:26] *** Bri joined
[08:26] *** p6bannerbot sets mode: +v Bri

[08:27] <Bri> 3

[08:27] *** sno joined
[08:27] *** p6bannerbot sets mode: +v sno

[08:35] *** Bri left
[08:43] <cpan-p6> New module released to CPAN! Inline-Perl5 (0.37) by 03NINE

[08:51] *** dakkar joined
[08:52] *** p6bannerbot sets mode: +v dakkar

[08:56] *** dakkar left
[08:57] *** dakkar joined
[08:58] *** p6bannerbot sets mode: +v dakkar

[09:07] *** rindolf joined
[09:07] *** p6bannerbot sets mode: +v rindolf

[09:46] <cpan-p6> New module released to CPAN! Log-Syslog-Native (0.0.8) by 03JSTOWE

[09:47] *** w17t joined
[09:47] *** p6bannerbot sets mode: +v w17t

[09:50] *** cydf joined
[09:51] *** p6bannerbot sets mode: +v cydf

[10:09] *** mowcat left
[10:12] <lizmat> weekly: https://www.reddit.com/r/perl6/comments/afpe5i/mis_using_perl_6_grammars_decompressing_zelda_3/

[10:12] <notable6> lizmat, Noted!

[10:12] <lizmat> urg

[10:13] <lizmat> weekly: http://blogs.perl.org/users/sylvain_colinet/2019/01/mis-using-perl-6-grammars-decompressing-zelda-3-gfx.html

[10:13] <notable6> lizmat, Noted!

[10:18] *** aborazmeh joined
[10:18] *** aborazmeh left
[10:18] *** aborazmeh joined
[10:18] *** p6bannerbot sets mode: +v aborazmeh

[10:18] <Xliff_> lizmat: How odd! :)

[10:18] *** p6bannerbot sets mode: +v aborazmeh

[10:19] *** Xliff_ left
[10:30] <SmokeMachine> m: sub bla(::T Int $a --> T) { $a * 2 }; bla 21

[10:30] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «Died with X::TypeCheck::Return␤  in sub bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:32] <SmokeMachine> m: sub bla(::T Int $a) { say T }; bla 42

[10:32] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «(Int)␤»

[10:33] <lizmat> SmokeMachine: it probably shouldn't do that

[10:33] <SmokeMachine> lizmat: do you mean the first or the second one?

[10:33] <lizmat> the error means there's an error in the exception

[10:33] <lizmat> the first

[10:34] <lizmat> it's probably got to do with the value that it got, which cannot be represented

[10:34] <SmokeMachine> Yes... I added it here: https://github.com/rakudo/rakudo/issues/1417

[10:36] <lizmat> sorry, no quick fix

[10:39] *** Sauvin left
[10:40] *** aborazmeh left
[10:43] *** aborazmeh joined
[10:43] *** aborazmeh left
[10:43] *** aborazmeh joined
[10:43] *** p6bannerbot sets mode: +v aborazmeh

[10:43] *** sauvin joined
[10:43] *** p6bannerbot sets mode: +v sauvin

[10:43] *** p6bannerbot sets mode: +v aborazmeh

[10:47] *** aborazmeh left
[10:50] *** sauvin_ joined
[10:50] *** p6bannerbot sets mode: +v sauvin_

[10:51] *** sauvin left
[10:53] *** reach_satori left
[10:56] *** sauvin_ is now known as Sauvin

[11:02] *** sena_kun joined
[11:03] *** sena_kun left
[11:04] *** sena_kun joined
[11:05] *** p6bannerbot sets mode: +v sena_kun

[11:06] *** domidumont left
[11:09] *** gregf_ joined
[11:09] *** p6bannerbot sets mode: +v gregf_

[11:11] <SmokeMachine> :(

[11:11] <SmokeMachine> lizmat: thanks!

[11:22] *** robertle_ joined
[11:23] *** p6bannerbot sets mode: +v robertle_

[11:31] *** scimon joined
[11:31] *** domidumont joined
[11:31] *** p6bannerbot sets mode: +v scimon

[11:32] *** p6bannerbot sets mode: +v domidumont

[11:32] *** sno left
[11:35] *** dncefan left
[11:35] <Kaiepi> m: my Instant $now = now; dd DateTime.new($now).Instant == $now

[11:35] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «Bool::True␤»

[11:36] <Kaiepi> m: my Instant $now = now; dd DateTime.new($now.Num).Instant == $now

[11:36] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «Bool::False␤»

[11:36] <Kaiepi> m: my Instant $now = now; dd DateTime.new($now.Num).Instant; dd $now

[11:36] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «Instant.from-posix(<1295228906581/837>, Bool::False)␤Instant $now = Instant.from-posix(<1295228875612/837>, Bool::False)␤»

[11:36] <Kaiepi> why are they different?

[11:37] <lizmat> the CPAN upload Twitter feed was offline from 7-11 Jan...  

[11:37] <lizmat> does anybody know of a log of uploads to CPAN for that period?

[11:40] <moritz> I'd expect PAUSE to have such logs, but I currently can't login, TLS SNAFU

[11:40] <scimon> Johnathon Stowe was doing a LOT recently. AFAIK moving his non CPAN stuff to CPAN.

[11:41] *** dncefan joined
[11:42] *** p6bannerbot sets mode: +v dncefan

[11:50] *** dncefan left
[12:04] *** mowcat joined
[12:04] *** mowcat left
[12:04] *** sno joined
[12:05] *** mowcat joined
[12:05] *** ExtraCrispy left
[12:05] *** p6bannerbot sets mode: +v sno

[12:05] *** p6bannerbot sets mode: +v mowcat

[12:07] *** ExtraCrispy joined
[12:07] *** p6bannerbot sets mode: +v ExtraCrispy

[12:08] *** mowcat left
[12:19] <lizmat> scimon moritz: thanks, in the end I went through the ecosystem commits at https://github.com/ugexe/Perl6-ecosystems

[12:35] *** Ven`` joined
[12:36] *** p6bannerbot sets mode: +v Ven``

[12:37] *** gregf_ left
[12:39] *** aborazmeh joined
[12:39] *** aborazmeh left
[12:39] *** aborazmeh joined
[12:39] *** p6bannerbot sets mode: +v aborazmeh

[12:39] *** p6bannerbot sets mode: +v aborazmeh

[12:42] *** domidumont left
[12:53] *** MasterDuke joined
[12:53] *** p6bannerbot sets mode: +v MasterDuke

[12:54] *** MasterDuke left
[12:54] *** MasterDuke joined
[12:54] *** herbert.freenode.net sets mode: +v MasterDuke

[12:54] *** p6bannerbot sets mode: +v MasterDuke

[12:57] *** domidumont joined
[12:57] *** p6bannerbot sets mode: +v domidumont

[13:00] *** sftp left
[13:08] *** dncefan joined
[13:09] *** p6bannerbot sets mode: +v dncefan

[13:10] *** daotoad joined
[13:10] *** molaf joined
[13:11] *** p6bannerbot sets mode: +v daotoad

[13:11] *** p6bannerbot sets mode: +v molaf

[13:12] *** aindilis left
[13:15] *** zakharyas joined
[13:16] *** p6bannerbot sets mode: +v zakharyas

[13:17] *** aindilis joined
[13:17] *** p6bannerbot sets mode: +v aindilis

[13:23] *** gregf_ joined
[13:23] *** p6bannerbot sets mode: +v gregf_

[13:31] *** aborazmeh left
[13:34] *** guifa left
[13:51] *** dakkar_ joined
[13:51] *** dakkar left
[13:51] *** dakkar_ is now known as dakkar

[13:52] *** p6bannerbot sets mode: +v dakkar

[13:56] *** reach_satori joined
[13:57] *** p6bannerbot sets mode: +v reach_satori

[13:58] <cpan-p6> New module released to CPAN! BSON (0.11.5) by 03MARTIMM

[13:58] <cpan-p6> New module released to CPAN! Crypt-Libcrypt (0.0.9) by 03JSTOWE

[14:01] *** Ven`` left
[14:11] *** daotoad left
[14:12] *** dncefan left
[14:12] *** dncefan joined
[14:12] *** p6bannerbot sets mode: +v dncefan

[14:15] *** molaf left
[14:18] *** Ven`` joined
[14:19] *** p6bannerbot sets mode: +v Ven``

[14:32] *** titsuki left
[14:35] *** titsuki joined
[14:36] *** p6bannerbot sets mode: +v titsuki

[14:56] *** ChoHag joined
[14:56] *** p6bannerbot sets mode: +v ChoHag

[15:00] *** domidumont left
[15:01] <cpan-p6> New module released to CPAN! Util-Bitfield (0.0.4) by 03JSTOWE

[15:03] *** sena_kun left
[15:07] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/01/14/2019-02-is-it-spring/

[15:09] *** domidumont joined
[15:10] *** p6bannerbot sets mode: +v domidumont

[15:10] *** apathor joined
[15:10] <tyil> lizmat++

[15:11] *** p6bannerbot sets mode: +v apathor

[15:15] <timotimo> m: say do if 42 { $_ }

[15:15] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «(LoweredAwayLexical)␤»

[15:15] <timotimo> jnthn: ^- did you see this? :)

[15:17] <cpan-p6> New module released to CPAN! Tomtit (0.0.27) by 03MELEZHIK

[15:18] <jnthn> timotimo: Yeah

[15:18] <jnthn> No idea what it thinks it's doing there

[15:19] <MasterDuke> lizmat++

[15:22] <SmokeMachine> Is Red a problem to the users? https://stackoverflow.com/questions/54143036/class-method-name-with-doesnt-get-invoked-properly

[15:34] <tbrowder> o/ #perl6

[15:35] *** Ven`` left
[15:35] <tbrowder> i’m trying to debug a regex attempt given an eps file line that looks like this:

[15:36] <tbrowder> %%BoundingBox: 0 -1 210 320

[15:39] <lizmat> SmokeMachine: I'm not sure I follow

[15:39] <tbrowder> i’m trying this regex: / ‘%%BoundingBox:’ \s+ ([\+\-]? \d+) \s+ ([\+\-]? \d+) /

[15:40] <tbrowder> which doesn’t work with my p6 2018.06

[15:40] <tbrowder> however, if i drop the second grouping it works!

[15:40] <SmokeMachine> lizmat: Red is one of those modules that uses metamethods extensively...

[15:40] <lucs> I think you mean something like <[+-]> (with appropriate escapes, eh)

[15:41] <lucs> (I keep forgetting the <> for character classes in p6)

[15:41] <lizmat> SmokeMachine: there's a difference between using ^methods and writing them yourself

[15:41] <lizmat> the latter case requires more knowledge

[15:41] *** Manifest0 joined
[15:42] <tbrowder> arg,

[15:42] *** p6bannerbot sets mode: +v Manifest0

[15:42] <tbrowder> lucs: thanks!

[15:42] <lucs> You're welcome

[15:45] <SmokeMachine> lizmat: I mean Red creates and exports ^methods...

[15:49] *** MilkmanDan left
[15:49] *** MilkmanDan joined
[15:49] *** p6bannerbot sets mode: +v MilkmanDan

[15:53] <lizmat> SmokeMachine: that's fine, is it not ?

[15:56] *** marcusr left
[15:56] <SmokeMachine> lizmat: I think so... I am just in doubt if it is making the users think ^methods are common methods...

[16:02] *** marcusr joined
[16:02] *** marcusr left
[16:02] *** marcusr joined
[16:02] *** p6bannerbot sets mode: +v marcusr

[16:03] *** p6bannerbot sets mode: +v marcusr

[16:04] *** scimon left
[16:05] *** scimon joined
[16:06] *** p6bannerbot sets mode: +v scimon

[16:13] *** w17t left
[16:16] *** kensanata left
[16:23] *** sena_kun joined
[16:24] *** p6bannerbot sets mode: +v sena_kun

[16:28] <Geth> ¦ doc: 1f15419fcf | cfa++ | doc/Type/IO/Path.pod6

[16:28] <Geth> ¦ doc: Whitespace.

[16:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1f15419fcf

[16:28] <synopsebot> Link: https://doc.perl6.org/type/IO::Path

[16:30] *** domidumont left
[16:30] *** marmor joined
[16:31] *** p6bannerbot sets mode: +v marmor

[16:32] *** scimon left
[16:33] *** scimon joined
[16:34] *** p6bannerbot sets mode: +v scimon

[17:04] *** sftp joined
[17:04] *** p6bannerbot sets mode: +v sftp

[17:07] *** domidumont joined
[17:07] *** zakharyas left
[17:08] *** p6bannerbot sets mode: +v domidumont

[17:16] *** patrickb joined
[17:17] *** p6bannerbot sets mode: +v patrickb

[17:22] *** Xliff joined
[17:23] *** p6bannerbot sets mode: +v Xliff

[17:25] *** huyna joined
[17:25] *** p6bannerbot sets mode: +v huyna

[17:25] <huyna> Hi

[17:26] *** huyna left
[17:26] *** jme` left
[17:28] <sena_kun> o/

[17:29] *** scimon left
[17:29] <Xliff> \o

[17:29] *** dakkar left
[17:33] *** [Sno] joined
[17:33] *** sno left
[17:34] *** p6bannerbot sets mode: +v [Sno]

[17:34] *** Khisanth left
[17:37] *** lookatme_q left
[17:38] *** lookatme_q joined
[17:39] *** p6bannerbot sets mode: +v lookatme_q

[17:42] <Manifest0> How do i defined a type constraint for an array that can only contain digits or the letter 'x'? Example: ['1','2','3','x']

[17:42] <Manifest0> I'm doing: subset Number-or-X where {$_ ~~ /\d/ || $_ eq 'x' }; 

[17:42] <Manifest0> and then: multi my_func(Number-or-X @input where Array), but it's not working :-(. What am i doing wrong/missing?

[17:43] <timotimo> doing it like that will only work when the value passed was declared as that type already

[17:43] <timotimo> it's probably easier to use a $-sigiled parameter and have the subset be of Positional, then check all members in that

[17:44] <timotimo> m: subset NumOrX of Positional where { .all eq any("1".."9", "x") and .all ~~ Str }; my NumOrX $foo = Array.new("1", "2", "x")

[17:44] <camelia> rakudo-moar 1c101a04f: OUTPUT: «Type check failed in assignment to $foo; expected NumOrX but got Array ($["1", "2", "x"])␤  in block <unit> at <tmp> line 1␤␤»

[17:44] <timotimo> hm, not quite

[17:45] <timotimo> m: subset NumOrX of Positional where { .all eq any(|("1".."9"), "x") and .all ~~ Str }; my NumOrX $foo = Array.new("1", "2", "x")

[17:45] <camelia> rakudo-moar 1c101a04f: ( no output )

[17:45] <timotimo> this is how it works

[17:46] <timotimo> m: subset NumOrX of Positional where { .all eq any(|("1".."9"), "x") and .all ~~ Str }; multi my_func(NumOrX $foo) { say "it's all right" }; multi my_func($anything) { say "not correct: $anything" }; my_func([1, 2, 3]); my_func(["1", "2"]); my_func([])

[17:46] <camelia> rakudo-moar 1c101a04f: OUTPUT: «not correct: 1 2 3␤it's all right␤it's all right␤»

[17:46] <timotimo> there's also a module that helps with subsets

[17:47] <timotimo> https://github.com/zoffixznet/perl6-Subset-Helper

[17:47] *** Khisanth joined
[17:47] <Manifest0> Ah! Thanks! I will give it a try

[17:47] <Manifest0> Super! I'm going to look at that module :-)

[17:47] <timotimo> hm, not entirely sure if that also helps with arrays of things

[17:48] *** p6bannerbot sets mode: +v Khisanth

[17:48] <timotimo> anyway, i gotta go, see you later!

[17:48] <Manifest0> bye :-)

[17:50] *** marmor left
[17:51] *** cpan-p6 left
[17:51] *** cpan-p6 joined
[17:51] <cpan-p6> New module released to CPAN! Inline-Perl5 (0.38) by 03NINE

[17:51] <cpan-p6> 03cpan-p6 reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[17:52] *** p6bannerbot sets mode: +v cpan-p6

[17:55] *** w17t joined
[17:55] *** p6bannerbot sets mode: +v w17t

[18:01] *** robertle_ left
[18:01] *** AlexDaniel left
[18:06] *** jme` joined
[18:07] *** p6bannerbot sets mode: +v jme`

[18:13] *** aeruder left
[18:15] *** aeruder joined
[18:16] *** p6bannerbot sets mode: +v aeruder

[18:19] *** gfldex left
[18:20] *** Sauvin left
[18:22] <tbrowder> back again with my prob regex. the eps file claims it is Clean7bit”

[18:22] <tbrowder> will that affect “normal” regexes expecting unicode files?

[18:23] <Kaiepi> in a project i'm working on i want to test some methods but they make database queries

[18:23] *** [Sno] left
[18:23] <Kaiepi> is there a way i can prevent them from being made while running tests?

[18:23] <tbrowder> i get my regex working with a test string but it fails on the read-in line

[18:24] <Kaiepi> like an env var or something?

[18:25] <tbrowder> going to look at “od”...

[18:28] <Xliff> Kaiepi: Why not code in a switch to such a var?

[18:29] <Kaiepi> wdym?

[18:29] <Xliff> Kaiepi: Can you show me some code?

[18:30] <Kaiepi> this is the database module https://hastebin.com/dohomirono.pl

[18:30] *** jme` left
[18:31] <Kaiepi> this is a method that uses the database https://hastebin.com/aziranizar.pl

[18:32] <Xliff> You could wrap the methods if an env-var is present.

[18:32] <Kaiepi> i was thinking of doing something like adding BEGIN %*ENV<TESTING> = 1 before including the modules in the unit tests and returning from the database methods if the env var is present

[18:32] <Kaiepi> but i was wondering if there's a better way

[18:34] <Xliff> This accomplishes the same thing, without all of the work: submethod BUILD(:$!dbh) { if %*ENV<TESTING] { self.^find_method($_).wrap(-> | { return }) for self.^methods }; }; 

[18:34] <Xliff> Correction: submethod BUILD(:$!dbh) { if %*ENV<TESTING> { self.^find_method($_).wrap(-> | { return }) for self.^methods }; }; 

[18:34] <Xliff> Basically, if TESTING is present, all methods become no-ops

[18:35] *** kiwi_81 joined
[18:35] *** p6bannerbot sets mode: +v kiwi_81

[18:36] <Xliff> m: Int.^methods.say

[18:36] <camelia> rakudo-moar bcc8054a4: OUTPUT: «(new Capture Int Num Rat FatRat abs Bridge chr sqrt base polymod expmod is-prime floor ceiling round lsb msb narrow Range unival asech atanh exp sech atan2 acosh Complex conj sec sin roots cosech rand cosh tan cotan sign truncate sinh cos succ pred ci…»

[18:37] <Xliff> You wouldn't even need the return, really.

[18:39] *** kiwi_81 left
[18:39] <Xliff> The problem after that would be that the ode in aziranizar.pl is expecting a hash, with values. You'd have to Nil proof the code.

[18:45] *** AlexDaniel joined
[18:45] *** p6bannerbot sets mode: +v AlexDaniel

[18:45] <AlexDaniel> sooo there was no spam?

[18:46] *** sno joined
[18:47] *** p6bannerbot sets mode: +v sno

[18:47] <AlexDaniel> I just removed +m from #moarvm and #perl6-dev

[18:47] <AlexDaniel> maybe p6bannerbot can take a break, too

[18:47] *** remi_ness joined
[18:47] <AlexDaniel> I can reverse that in minutes if bullshit reappears

[18:48] *** p6bannerbot sets mode: +v remi_ness

[18:48] <Kaiepi> m: for Nil { .say }

[18:48] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Nil␤»

[18:48] <Kaiepi> oh nice that works

[18:48] <Kaiepi> m: +Nil

[18:48] <camelia> rakudo-moar bcc8054a4: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "+" in expression "+Nil" in sink context (line 1)␤Use of Nil in numeric context␤  in block <unit> at <tmp> line 1␤»

[18:49] <Kaiepi> m: say +Nil

[18:49] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Use of Nil in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[18:49] <Kaiepi> ok there's not a lot of Nil-proofing i have to do

[18:49] <Kaiepi> thanks Xliff 

[18:49] <AlexDaniel> p6bannerbot: help

[18:49] <AlexDaniel> hmm

[18:51] *** jmerelo joined
[18:51] *** p6bannerbot sets mode: +v jmerelo

[18:53] <Kaiepi> m: class Foo { submethod BUILD { self.^find-method($_).wrap({ return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:53] <camelia> rakudo-moar bcc8054a4: OUTPUT: «No such method 'find-method' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean 'find_method'?␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:53] <Kaiepi> m: class Foo { submethod BUILD { self.^find_method($_).wrap({ return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:53] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Submethod object coerced to string (please use .gist or .perl to do that)␤  in block  at <tmp> line 1␤Submethod object coerced to string (please use .gist or .perl to do that)␤  in block  at <tmp> line 1␤Method object coerced to string (please…»

[18:53] <Kaiepi> m: class Foo { submethod BUILD { self.^find_method($_).wrap(-> | { return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:53] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Submethod object coerced to string (please use .gist or .perl to do that)␤  in block  at <tmp> line 1␤Submethod object coerced to string (please use .gist or .perl to do that)␤  in block  at <tmp> line 1␤Method object coerced to string (please…»

[18:54] *** remi_ness left
[18:56] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(-> | { return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:56] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Attempt to return outside of immediately-enclosing Routine (i.e. `return` execution is outside the dynamic scope of the Routine where `return` was used)␤  in block <unit> at <tmp> line 1␤␤»

[18:57] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(-> *@, *% { return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:57] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Attempt to return outside of immediately-enclosing Routine (i.e. `return` execution is outside the dynamic scope of the Routine where `return` was used)␤  in block <unit> at <tmp> line 1␤␤»

[18:58] <Kaiepi> m: class Foo { submethod BUILD { self.^find_method($_.^name).wrap(-> | { return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:58] <camelia> rakudo-moar bcc8054a4: OUTPUT: «No such method 'wrap' for invocant of type 'Mu'␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:58] <Kaiepi> m: class Foo { submethod BUILD { self.^find_method($_.name).wrap(-> | { return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:58] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Attempt to return outside of immediately-enclosing Routine (i.e. `return` execution is outside the dynamic scope of the Routine where `return` was used)␤  in block <unit> at <tmp> line 1␤␤»

[18:59] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(anon sub (|) { return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[18:59] <camelia> rakudo-moar bcc8054a4: ( no output )

[18:59] <Kaiepi> there we go

[19:00] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(anon method (|) { return }) for self.^methods }; method foo { 1 } }; my Foo $foo .= new; $foo.foo

[19:00] <camelia> rakudo-moar bcc8054a4: ( no output )

[19:02] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(anon method (|) { return $_.signature.returns; }) for self.^methods }; method foo(--> Int) { 1 } }; my Foo $foo .= new; $foo.foo

[19:02] <camelia> rakudo-moar bcc8054a4: OUTPUT: «No such method 'signature' for invocant of type 'Any'␤  in method <anon> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:03] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(anon method (|) { return $_.signature.returns if $_.signature; }) for self.^methods }; method foo(--> Int) { 1 } }; my Foo $foo .= new; $foo.foo

[19:03] <camelia> rakudo-moar bcc8054a4: OUTPUT: «No such method 'signature' for invocant of type 'Any'␤  in method <anon> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:03] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(anon method (|) { return $_.signature.returns if $_; return; }) for self.^methods }; method foo(--> Int) { 1 } }; my Foo $foo .= new; $foo.foo

[19:03] <camelia> rakudo-moar bcc8054a4: ( no output )

[19:04] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(anon method (|) { return $_.signature.returns if $_; return; }) for self.^methods }; method foo(--> Int) { 1 } }; my Foo $foo .= new; say $foo.foo

[19:04] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Nil␤»

[19:04] <Kaiepi> m: class Foo { submethod BUILD { $_.wrap(anon method (|) { return $_.signature.returns.new if $_; return; }) for self.^methods }; method foo(--> Int) { 1 } }; my Foo $foo .= new; say $foo.foo

[19:04] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Nil␤»

[19:05] <Xliff> m: @a; @a[0;1] =1;

[19:05] <camelia> rakudo-moar bcc8054a4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5@a; @a[0;1] =1;␤»

[19:05] <Xliff> m: my @a; @a[0;1] =1;

[19:05] <camelia> rakudo-moar bcc8054a4: ( no output )

[19:06] <Xliff> m: my @a; @a[0;1] =1; @a.gist.say

[19:06] <camelia> rakudo-moar bcc8054a4: OUTPUT: «[[(Any) 1]]␤»

[19:06] <Kaiepi> m: class Foo { submethod BUILD { for self.^methods -> &method { my \returns = &method.signature.returns; &method.wrap(anon method (|) { return returns; }) } }; method foo(--> Int) { 1 } }; my Foo $foo .= new; say $foo.foo

[19:06] <camelia> rakudo-moar bcc8054a4: OUTPUT: «(Int)␤»

[19:14] <Kaiepi> m: for Array:U { .say }

[19:14] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Invocant of method 'iterator' must be an object instance of type 'Array', not a type object of type 'Array:U'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[19:25] *** remi_ness joined
[19:26] *** p6bannerbot sets mode: +v remi_ness

[19:27] <tyil> 503 errors on modules.perl6.org :(

[19:34] <moritz> please try again

[19:40] <tyil> works again :D

[19:40] *** nightfrog joined
[19:41] *** p6bannerbot sets mode: +v nightfrog

[19:41] <jmerelo> moritz: what happened?

[19:43] *** cpan-p6 left
[19:46] *** domidumont left
[19:46] <moritz> jmerelo: no idea

[19:47] <moritz> I started the webservice again

[19:48] <jmerelo> moritz++

[19:52] *** jmerelo left
[19:56] *** cpan-p6 joined
[19:56] <cpan-p6> 03cpan-p6 reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[19:56] *** p6bannerbot sets mode: +v cpan-p6

[19:58] <AlexDaniel> weekly: https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot (new buggable)

[19:58] <notable6> AlexDaniel, Noted!

[19:59] <AlexDaniel> tyil: please see which features buggable has, maybe you can implement them so that we can deprecate buggable https://github.com/zoffixznet/perl6-buggable

[20:00] <tyil> AlexDaniel: noted :)

[20:00] <tyil> I'm applying some finishing touches on cpan-p6, which now has NickServ auth and other cool tricks

[20:01] *** patrickb left
[20:01] <tyil> once it's "done", I want to rename the "App::CPAN" module (that contains the code to keep track of updates on cpan) to something more sensible, and migrate it to my k8s infra instaed of running it on my desktop

[20:03] <AlexDaniel> although to me it's a bit unclear why buggable is being reimplemented…

[20:03] <tyil> idk, I just felt bored and noticed we didnt have CPAN notifications anymore

[20:04] <tyil> so I became unbored by solving that specific issue

[20:04] <AlexDaniel> hmmm…

[20:05] *** remi_ness left
[20:05] *** ferreira left
[20:06] <AlexDaniel> buggable had a bunch of features beyond cpan notifications, so it'll be sad to lose them

[20:06] <AlexDaniel> but chances are you can just use these plugins: https://github.com/zoffixznet/perl6-buggable/tree/master/lib/Buggable/Plugin

[20:10] <tyil> the rest is Perl 6 huh

[20:11] <tyil> that makes it easier

[20:12] <AlexDaniel> there's no license specified in that repo, but we can fix that

[20:13] <AlexDaniel> ooooooooooooooooh I don't have access to that particular repo!

[20:13] <tyil> oh

[20:13] <AlexDaniel> OK that needs to be figured out, I think?

[20:13] <tyil> preferably

[20:14] <tyil> I don't think Zoffix will get mad if I were to fork it, but it'd still be better to have a clear license attached to it

[20:15] <tyil> I'm not in a hurry anyway

[20:19] <AlexDaniel> OK, I filed an issue, I think it wouldn't take too long to resolve that

[20:20] <tyil> neat, thanks

[20:23] *** PavelB joined
[20:23] *** p6bannerbot sets mode: +v PavelB

[20:35] <ufobat> does zoffix still maintain his perl6 modules, or not?

[20:36] <lizmat> he does not intend to afaik, as he's given the keys to AlexDaniel

[20:36] <ufobat> okay

[20:36] <AlexDaniel> yeah, and they're up for grabs, I'd say

[20:36] <AlexDaniel> I will be moving them to perl6-community-modules soon, I think

[20:37] <tyil> I wouldn't mind hosting buggable on my infra, together with cpan-p6

[20:37] <ufobat> the perl6-community github group is just a small grp of people, i noticed

[20:38] <ufobat> perl6-community-modules

[20:50] *** pecastro joined
[20:51] *** p6bannerbot sets mode: +v pecastro

[21:04] *** d4l3k_ joined
[21:04] *** ChanServ sets mode: +v d4l3k_

[21:04] *** mrsolo_ joined
[21:04] *** p6bannerbot sets mode: +v mrsolo_

[21:05] *** p6bannerbot sets mode: +v d4l3k_

[21:05] *** timeless_ joined
[21:05] *** p6bannerbot sets mode: +v timeless_

[21:05] *** ccntrq- joined
[21:06] *** p6bannerbot sets mode: +v ccntrq-

[21:06] *** timeless_ is now known as timeless

[21:07] *** eiro1 joined
[21:07] *** cono_ joined
[21:07] *** p6bannerbot sets mode: +v eiro1

[21:08] *** p6bannerbot sets mode: +v cono_

[21:10] *** Circlepuller joined
[21:11] *** sftp_ joined
[21:11] *** p6bannerbot sets mode: +v sftp_

[21:11] *** p6bannerbot sets mode: +v Circlepuller

[21:11] *** sftp left
[21:11] *** wictory[m] left
[21:11] *** sftp_ is now known as sftp

[21:11] *** mrsolo_ is now known as mrsolo

[21:11] *** d4l3k_ is now known as dalek

[21:12] *** ferreira joined
[21:13] *** p6bannerbot sets mode: +v ferreira

[21:13] *** wictory[m] joined
[21:13] *** p6bannerbot sets mode: +v wictory[m]

[21:17] <ufobat> is there a ascii only version of \w and \d and so on?

[21:19] <AlexDaniel> ufobat: I don't think so, but you can create your own tokens for convenience, and generally <[a..zA..Z]> is explicit and short enough in many cases

[21:19] <lizmat> <[0123456789]> 

[21:19] <AlexDaniel> m: say ‘25719’ ~~ /<[0..9]>/

[21:19] <camelia> rakudo-moar bcc8054a4: OUTPUT: «｢2｣␤»

[21:19] <AlexDaniel> m: say ‘25719’ ~~ /<[0..9]>+/

[21:19] <camelia> rakudo-moar bcc8054a4: OUTPUT: «｢25719｣␤»

[21:19] <ufobat> okay, ty :)

[21:20] <AlexDaniel> ufobat: I wonder if this should be documented as a trap…

[21:20] <AlexDaniel> because when parsing human-written text of course it makes sense to include unicode stuff

[21:20] <AlexDaniel> but for protocols, it may be tempting to use \w \d

[21:21] <AlexDaniel> because 1) it's short and 2) newcomers may not know that it includes unicode stuff

[21:21] <ufobat> exactly

[21:21] <El_Che> AlexDaniel: it should be a "principle": Asume it's utf-8 unless otherwise documented

[21:21] <AlexDaniel> ufobat: can you file a ticket on https://github.com/perl6/doc/issues/ ?

[21:21] <ufobat> sure :)

[21:22] <AlexDaniel> I wonder how many modules are out there that would happily take non-ascii characters in places where they shouldn't

[21:22] *** gfldex joined
[21:22] <AlexDaniel> greppable6: \\d

[21:22] <greppable6> AlexDaniel, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/0f400ac0be138fa1c7dbb7132e74ef9f

[21:23] <AlexDaniel> what? :)

[21:23] *** p6bannerbot sets mode: +v gfldex

[21:30] <ufobat> issue created

[21:30] <cpan-p6> New module released to CPAN! MongoDB (0.43.3) by 03MARTIMM

[21:33] <ufobat> omg thats so funny. my new laptop addapts the brightness of the screen to the environmental brightnes. I am sitting in a dark room, when I switch from my dark themed IRC to a white github website, the room gets so much brighter then the screen of my laptop gets even more brighter.. then a recursion starts

[21:45] <El_Che> ufobat: I *hate* that with passion. My TV has it (but I could disable it), my cheap dell inspiron has it but it can not be disabled on the OS.

[21:45] <ufobat> cant you just "disable" the sensor?

[21:46] <moritz> tape over it?

[21:47] <moritz> ftr I love automatic brightness adjustments with mobile phones

[21:48] *** molaf joined
[21:48] *** mowcat joined
[21:48] *** p6bannerbot sets mode: +v molaf

[21:49] *** p6bannerbot sets mode: +v mowcat

[21:50] <ufobat> moritz, will you attend the erlangen pm in 2 days?

[21:51] <El_Che> ufobat: I think it's the screen and not a sensor

[21:52] <El_Che> anyway, it's my "desktop" laptop connected to a big screen, so it's not annoying

[21:52] <El_Che> but when I used it as a laptop, it sucked

[21:53] <El_Che> on xps models they added a bios setting to disable it

[21:53] <El_Che> my work latitudes don't have the "feature"

[21:53] <El_Che> the macbook air doesn't have it either

[21:54] <ufobat> El_Che, I dont know my sensor, but it isnt the webcam :-(

[21:54] <El_Che> Actually it's not measuring the room

[21:54] <El_Che> but the colours on the screen

[21:54] <El_Che> (if it's the same thing)

[21:55] <ufobat> what is the sense of making a white screen brighter and a dark screen darker?

[21:56] <El_Che> a line on a sticker

[21:57] <El_Che> I thought it was a Linux driver problem, but Win 7 has exact the same problem

[21:57] <El_Che> and people are complaining on the dell forums :)

[22:01] <ufobat> m: subset ET of Str:D where * ~~ m / <[abc]>+ /; sub foo(ET $x) { say $x}; foo("a")

[22:01] <camelia> rakudo-moar bcc8054a4: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in whatevercode  at <tmp> line 1␤Use of uninitialized value of type Any in string context.␤M…»

[22:01] <ufobat> what did i do wrong?

[22:01] <ufobat> El_Che, I've got a old (5year old) lenovo yoga

[22:02] *** abaiste left
[22:04] <ufobat> m: subset ET of Str:D where  m / <[abc]>+ /; sub foo(ET $x) { say $x}; foo("a")

[22:04] <camelia> rakudo-moar bcc8054a4: OUTPUT: «a␤»

[22:04] <ufobat> odd ;)

[22:06] <ufobat> m: subset ET of Str:D where { $_ ~~ m / <[abc]>+ /}; sub foo(ET $x) { say $x}; foo("a")

[22:06] <camelia> rakudo-moar bcc8054a4: OUTPUT: «a␤»

[22:06] <ufobat> why doesn't it work with *

[22:15] *** cydf left
[22:20] *** cfa joined
[22:20] *** p6bannerbot sets mode: +v cfa

[22:20] <cfa> 👋🏽

[22:23] * lizmat waves back in ASCII

[22:26] <cfa> :)

[22:26] <tbrowder> ref my eps file bbox regex prob: stupidly i forgot the '\' (backslashes0 in front of the 'd's and so it wasn't finding the bbox group of 4 ints!  old people need programming aides as well as they need nurses for mobility problems!

[22:28] *** ExtraCrispy left
[22:51] *** kkrev joined
[22:51] *** p6bannerbot sets mode: +v kkrev

[22:52] <kkrev> say IO::Path.new('C:\Program Files\Windows NT\Accessories\wordpad.exe').x(); # prints 'False'. Bug?

[22:58] *** w17t left
[23:14] <pony> try it with Q{\} or '\\'

[23:16] *** rindolf left
[23:20] <kkrev> it's parsing the string fine. That's not the issue.

[23:21] <kkrev> It can correctly report the size, etc. It just seems rakudo doesn't have a concept of "executable" on windows?

[23:26] *** pecastro left
[23:27] *** Geth joined
[23:27] *** ChanServ sets mode: +v Geth

[23:28] *** p6bannerbot sets mode: +v Geth

[23:30] <AlexDaniel> tyil: ok, I have access! Zoffix++

[23:30] <AlexDaniel> tyil: where do you want me to move it?

[23:30] <AlexDaniel> community modules or your account, or anywhere else?

[23:35] *** cfa left
[23:43] <pony> m: my $list = (1 ... *).map({ sleep 0.2; $_ }); react { whenever $list.Supply { .put }; whenever Promise.in(3) { done } }

[23:43] <camelia> rakudo-moar 54fe8a1a8: OUTPUT: «(timeout)1␤»

[23:43] <pony> it seems here that the done stops the counting, but after that the program hangs

[23:44] <pony> is this a bug?

[23:45] <AlexDaniel> c: 2018.10 my $list = (1 ... *).map({ sleep 0.2; $_ }); react { whenever $list.Supply { .put }; whenever Promise.in(3) { done } }

[23:46] <committable6> AlexDaniel, ¦2018.10: «1␤«timed out after 40 seconds» «exit signal = SIGHUP (1)»»

[23:51] <AlexDaniel> pony: it does look like a bug

[23:51] <pony> any idea what could be causing it?

[23:53] <pony> m: react { whenever Supply.interval(0.2) { put $_ + 1 }; whenever Promise.in(3) { done } }

[23:53] <camelia> rakudo-moar 54fe8a1a8: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤»

[23:55] <AlexDaniel> pony: it seems like it is trying to iterate $list till the end

[23:55] <pony> ahh

[23:55] <AlexDaniel> even though the `whenever` does not fire, it's still tapping on the values

[23:55] <pony> I see

[23:56] <AlexDaniel> please file a ticket here: https://github.com/rakudo/rakudo/issues

[23:56] <AlexDaniel> I think it's a legit bug

[23:56] <pony> all right

