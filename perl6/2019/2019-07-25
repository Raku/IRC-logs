[00:09] *** [particle] joined
[00:10] *** [particle]1 left
[00:34] *** Kaiepi left
[00:34] *** aborazmeh left
[00:34] *** Kaypie joined
[00:49] *** Cabanossi left
[00:53] *** Kaypie left
[00:53] *** Kaypie joined
[01:01] *** Cabanossi joined
[01:12] *** noisegul_ joined
[01:14] *** ayerhart joined
[01:15] *** noisegul left
[01:19] *** redhands left
[01:33] *** kst joined
[02:14] *** pamplemousse left
[02:21] *** klapperl_ joined
[02:21] *** klapperl left
[02:29] *** Kaypie left
[02:29] *** Kaypie joined
[02:29] *** redhands joined
[02:33] *** Kaypie left
[02:34] *** Kaypie joined
[02:53] *** Cabanossi left
[03:00] *** Cabanoss- joined
[03:29] *** Sgeo__ joined
[03:32] *** Sgeo_ left
[03:59] *** k-man left
[04:00] *** k-man joined
[04:02] *** Sgeo_ joined
[04:03] *** El_Che left
[04:05] *** Sgeo__ left
[04:16] *** El_Che joined
[04:32] *** MilkmanDan left
[04:34] *** MilkmanDan joined
[04:42] *** [particle]1 joined
[04:44] *** kst` joined
[04:44] *** [particle] left
[04:45] *** kst left
[05:21] *** sauvin joined
[06:03] <Geth> ¦ doc: 0436eaba21 | Antonio++ (committed using GitHub Web editor) | doc/Type/List.pod6

[06:03] <Geth> ¦ doc: fix definition of map not being considered code

[06:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0436eaba21

[06:03] <synopsebot> Link: https://doc.perl6.org/type/List

[06:15] *** chloekek joined
[06:22] *** antoniogamiz joined
[06:22] <antoniogamiz> morning o/

[06:25] *** Black_Ribbon left
[06:25] <Xliff> \o

[06:26] *** Black_Ribbon joined
[06:30] *** patrickb joined
[06:31] *** ufobat joined
[06:33] *** Black_Ribbon left
[06:35] *** aindilis left
[06:41] *** aindilis joined
[06:51] *** domidumont joined
[06:51] *** antoniogamiz left
[06:52] <chloekek> p6: my $x := 1; say $x.VAR.perl;

[06:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤»

[06:52] <chloekek> p6: my $x = 1; say $x.VAR.perl;

[06:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤»

[06:53] <lizmat> m: my $x := 1; say $x.VAR.^name

[06:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Int␤»

[06:53] <lizmat> m: my $x = 1; say $x.VAR.^name

[06:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Scalar␤»

[06:54] <chloekek> Is VAR special cased in the compiler or is it a method?

[06:56] *** antoniogamiz joined
[06:58] <lizmat> special cased, afaik

[06:59] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L5998

[07:01] *** redhands left
[07:02] <chloekek> Thanks.

[07:03] <chloekek> p6: my $x := 1; say $x.REPR

[07:03] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «P6opaque␤»

[07:05] <lizmat> m: my int $x = 42; say $x.REPR

[07:05] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «P6opaque␤»

[07:05] <lizmat> hmmm...

[07:06] *** robertle joined
[07:06] <lizmat> guess it gets HLLized first

[07:10] *** dakkar joined
[07:13] <chloekek> p6: use NativeCall; class A is repr('CPointer') { }; my $x = A.new; say $x.REPR

[07:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «CPointer␤»

[07:14] *** mniip joined
[07:19] *** aborazmeh joined
[07:19] *** aborazmeh left
[07:19] *** aborazmeh joined
[07:28] <daxim> lizmat, did you delete http://redd.it/ch5su7 as submitter or was it a subreddit moderator?

[07:29] *** rindolf joined
[07:29] <lizmat> daxim: I did

[07:29] <lizmat> also: I will no longer post on r/perl

[07:30] <Geth> ¦ perl6.org/more-adult-intro: 505b5152f8 | (Elizabeth Mattijsen)++ | source/index.html

[07:30] <Geth> ¦ perl6.org/more-adult-intro: Give Perl 6 a more adult intro

[07:30] <Geth> ¦ perl6.org/more-adult-intro: 

[07:30] <Geth> ¦ perl6.org/more-adult-intro: - de-emphasize being the sister of Perl 5

[07:30] <Geth> ¦ perl6.org/more-adult-intro: - emphasize part of the Perl community

[07:30] <Geth> ¦ perl6.org/more-adult-intro: - emphasize continued development, rather than being just new

[07:30] <Geth> ¦ perl6.org/more-adult-intro: review: https://github.com/perl6/perl6.org/commit/505b5152f8

[07:31] <Geth> ¦ perl6.org: lizmat++ created pull request #132: Give Perl 6 a more adult intro

[07:31] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/pull/132

[07:53] *** zakharyas joined
[07:55] *** rindolf left
[07:56] <cpan-p6> New module released to CPAN! Gnome::Gtk3 (0.17.5) by 03MARTIMM

[07:56] <cpan-p6> New module released to CPAN! Gnome::GObject (0.13.13) by 03MARTIMM

[07:57] *** antoniogamiz left
[07:59] *** scimon joined
[07:59] *** rindolf joined
[08:03] *** rindolf left
[08:03] *** aborazmeh left
[08:06] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/07/perl-weekly-challenge-18-longest-common-substrings-priority-queues-and-a-functional-object-system.html

[08:06] <notable6> lizmat, Noted!

[08:10] *** rindolf joined
[08:18] *** reach_satori joined
[08:27] *** stux|RC-only joined
[08:33] *** robertle left
[08:33] *** Cabanoss- left
[08:45] *** Cabanossi joined
[08:59] *** stux|RC-only left
[09:08] *** stux|RC-only joined
[09:09] *** pat_js joined
[09:26] *** patrickb left
[09:27] <scimon> lizmat: Should I tell you about a blog post? Or just use weekly to note it?

[09:27] <scimon> (Hi BTW)

[09:38] *** patrickb joined
[09:38] <jnthn> lizmat: .REPR is an object operation (like .WHAT), so doing it on a native will first auto-box the native

[09:41] *** rindolf left
[09:54] <lizmat> weekly: http://www.khanate.co.uk/blog/2019/07/24/perl6-load-testing/

[09:54] <yoleaux> 09:35Z <jnthn> lizmat: It wouldn't help much, since the issue is ultimately that one thread sees it's the first into the state block and runs the state initializer (which is what a `once` block is treated as, effectively), and then the second thread would (correctly) see it's not the first thing, so just sail on through and read the (so far uninitialized) state variable.

[09:54] <notable6> lizmat, Noted!

[09:55] *** rindolf joined
[09:57] *** nepugia joined
[10:01] <chloekek> Never realised I could write ^∞ instead of 0 .. ∞! 😮

[10:03] <chloekek> p6: sub prefix:<Z> { ^∞ Z @^a }; for Z qw[a b c] -> ($i, $s) { say "$i: $s" };

[10:03] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0: a␤1: b␤2: c␤»

[10:03] *** pat_js left
[10:49] *** Cabanossi left
[10:55] *** Cabanossi joined
[10:59] *** reach_satori left
[11:06] *** pat_js joined
[11:25] <lizmat> scimon: A couple of noted on the argument   s/noted/notes/

[11:25] <scimon> Oh yes. Thanks

[11:26] <lizmat> and the value got is used    s/got/gotten/  ???   not sure about that one

[11:26] <lizmat> the amout of time    s/amout/amount

[11:26] *** Poohmaan joined
[11:28] <lizmat> scimon: that's it  :-)

[11:30] *** pat_js left
[11:30] *** Poohman left
[11:35] <timotimo> scimon: how do you "use up Perl6"? :)

[11:36] *** pat_js joined
[11:38] <timotimo> scimon: does HTTP::UserAgent return a Failure or throw when an error is returned, like a 500 or a 404 or something?

[11:39] <scimon> timotimo: Yeah probably. Like I say if I was being serious about it I'd add some tests for that kind of thing.

[11:40] <scimon> I think "The value got" is allowed.

[11:42] *** MasterDuke joined
[11:43] <scimon> (I've made changes)

[11:44] <scimon> And I tagged it perl6 programming so tiobe should be happy ;)

[11:44] <lizmat> scimon++

[11:48] <timotimo> do they search "perl6 programmnig" or "perl 6 programming"?

[11:49] <scimon> .... Ummm

[11:52] *** john_parr joined
[11:57] <timotimo> i wonder if it'd be better to "use MAIN :named-anywhere" instead of "my %*SUB-MAIN-OPTS = :named-anywhere"

[11:57] <timotimo> really just a syntactic sugar cube

[11:57] <lizmat> timotimo: you can't export dynamic vars yet  :-(

[11:57] <timotimo> dang

[11:58] <lizmat> I mean, they *do* get exported, but they're uninitialized

[11:58] <scimon> I do love to auto generated usage stuff. :)

[11:59] *** Poohman joined
[12:01] *** Poohmaan left
[12:06] *** MasterDuke left
[12:06] *** zakharyas left
[12:09] <timotimo> yeah

[12:19] *** __jrjsmrtn__ left
[12:19] *** __jrjsmr- joined
[12:30] *** ChoHag joined
[12:36] *** molaf joined
[12:39] *** xinming_ joined
[12:42] *** xinming left
[12:43] *** scimon left
[12:46] *** scimon joined
[12:55] *** llfourn joined
[12:59] *** rindolf left
[13:04] *** john_parr left
[13:05] *** Xliff_ joined
[13:06] *** Xliff left
[13:08] *** vike left
[13:10] *** vike joined
[13:17] <chloekek> p6: module M { our $x = 2; }; say 1; say $M::y; # why does this not fail at compile time?

[13:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤(Any)␤»

[13:21] <chloekek> Also surprised it succeeds without no strict;

[13:23] *** Xliff_ left
[13:24] <lizmat> chloekek: $M::y is short for M::<$y>, basically a stash lookup at runtime

[13:24] *** Xliff joined
[13:24] <chloekek> Aha.

[13:25] *** cpan-p6 left
[13:25] *** cpan-p6 joined
[13:25] *** cpan-p6 left
[13:25] *** cpan-p6 joined
[13:26] *** Voldenet left
[13:27] <lizmat> m: class A {}; dd A::<$foo>

[13:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Any element{'$foo'} = Any␤»

[13:27] <lizmat> m: class A {}; dd $A::foo

[13:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Any element{'$foo'} = Any␤»

[13:27] <lizmat> m: class A { our $foo = 42 }; dd A::<$foo>

[13:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Int $foo = 42␤»

[13:28] <lizmat> m: class A { our $foo = 42 }; dd A::.keys

[13:28] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «("\$foo",).Seq␤»

[13:31] *** lucasb joined
[13:32] *** Voldenet joined
[13:32] *** Voldenet left
[13:32] *** Voldenet joined
[13:33] *** john_parr joined
[13:34] *** rindolf joined
[13:35] *** reach_satori joined
[13:36] *** robertle joined
[13:36] *** molaf left
[13:37] <chloekek> p6: class A { our $foo = 42 }; dd A::

[13:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Stash element = {"\$foo" => 42}␤»

[13:39] <chloekek> p6: module M { our $foo = 1; our sub f { say $foo } }; M::<$foo> = 2; M::f; M::<$foo>:delete; M::f; M::<$foo> = 3; M::f;

[13:39] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2␤2␤2␤»

[13:40] <chloekek> Seems like the scalar container foor $foo is lexically captured by f.

[13:42] <chloekek> p6: module M { our $foo := 1; our sub f { say $foo } }; M::<$foo> = 2; M::f; M::<$foo>:delete; M::f; M::<$foo> = 3; M::f;

[13:42] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤1␤1␤»

[13:45] <chloekek> Make sense; lexically referenced ours aren't looked up in the stash at runtime.

[13:48] *** AlexDaniel left
[13:48] *** AlexDaniel joined
[14:18] <Xliff> m: class X::Me is exception { has $.a; has $.b; method message { "{ $.a } / { $.b }" }; }; X::Me.new(a => 1, b => 2).throw

[14:18] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'X::Me' cannot inherit from 'exception' because it is unknown.␤Did you mean one of these?␤    'Exception'␤    'Exceptions'␤␤at <tmp>:1␤»

[14:18] <Xliff> m: class X::Me is Exception { has $.a; has $.b; method message { "{ $.a } / { $.b }" }; }; X::Me.new(a => 1, b => 2).throw

[14:18] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1 / 2␤  in block <unit> at <tmp> line 1␤␤»

[14:19] <Xliff> Huh.

[14:20] *** zakharyas joined
[14:22] <Xliff> m: class X::Me is Exception { has $.a; has $.b; method message { "{ $.a } / { $.b }" }; }; my $a = 1; $b = 2; X::Me.new(:$a, :$b).throw

[14:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3 { "{ $.a } / { $.b }" }; }; my $a = 1; 7⏏5$b = 2; X::Me.new(:$a, :$b).throw␤»

[14:22] <Xliff> m: class X::Me is Exception { has $.a; has $.b; method message { "{ $.a } / { $.b }" }; }; my ($a, $b) = (1,2); X::Me.new(:$a, :$b).throw

[14:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1 / 2␤  in block <unit> at <tmp> line 1␤␤»

[14:27] *** patrickb left
[14:36] *** chloekek left
[14:39] *** Kaypie left
[14:41] *** Kaiepi joined
[14:42] *** pat_js left
[14:56] *** ChoHag left
[14:57] *** pamplemousse joined
[15:06] *** domidumont left
[15:07] *** abraxxa left
[15:25] *** Sgeo__ joined
[15:28] *** Sgeo_ left
[15:31] *** chloekek joined
[15:40] <perryprog> Weird question, but does anyone have some favorite perl 6 answers for https://codegolf.stackexchange.com?

[15:43] *** robertle left
[15:49] *** Cabanossi left
[15:50] *** antoniogamiz joined
[16:00] *** Cabanossi joined
[16:09] *** xelak joined
[16:09] *** jmerelo joined
[16:10] <jmerelo> squashable6: 

[16:10] <squashable6> jmerelo, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Squashable

[16:10] <jmerelo> squashable6: status

[16:10] <squashable6> jmerelo, Next SQUASHathon in 7 days and ≈11 hours (2019-08-03 UTC-14⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:10] <jmerelo> We've got to do something about this, I guess...

[16:13] *** vike left
[16:14] <xelak> m: class Intx is Int {}; my Intx $i = 42;

[16:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Type check failed in assignment to $i; expected Intx but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[16:14] <xelak> Is there a way to overload the assigment operator so that this ^^^^ works?

[16:15] <jmerelo> xelak: internal classes are tricky.

[16:15] <jmerelo>  m: class Intx is Int {}; my Intx $i := 42

[16:15] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Type check failed in binding; expected Intx but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[16:15] <jmerelo>  m: class Intx is Int {}; my Intx $i .= new(42)

[16:16] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[16:16] <jmerelo>  m: class Intx is Int {}; my Intx $i .= new(42); say $i.perl

[16:16] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[16:16] <jmerelo> well, who knew. That worked...

[16:16] <jmerelo> xelak ^^^^

[16:18] *** dakkar left
[16:22] <xelak> jmerelo: I know it works this way, but I would prefer it if it'd work the other way :-) ... 

[16:23] <El_Che> jmerelo: did the heatwave reach Granada?

[16:23] <El_Che> not the regular one, I mean :)

[16:27] <antoniogamiz> so... I have a strange problem.. I have changed a file, I have executed and the changes have not appeared

[16:28] <antoniogamiz> I even have deleted the .precomp dir and still nothing

[16:31] <El_Che> you probably didn't delere the correct one :)

[16:31] *** scimon left
[16:31] <antoniogamiz> I have deleted the one in the working dir and the one lib/

[16:32] <El_Che> in ~/.perl6?

[16:33] <jmerelo> xelak: yep... but again, internal types are tricky. That's going to always work. Take into account that 42 is not supposed to be an Intx automatically; it's an Int literal, so you have to make it go through the hoops to make it become Intx

[16:33] <El_Che> quick test: mv ~/.perl6 ~/perl6-backup

[16:33] <jmerelo> El_Che: I just came back from Western Spain. Yep, it was hot there...

[16:33] <El_Che> (except f you installed modules there :) )

[16:34] <antoniogamiz> I did :*

[16:35] <antoniogamiz> :(*

[16:36] *** pamplemousse left
[16:37] <antoniogamiz> he, if I execute the tests it recognizes the changes, but if I execute the program in bin/ it doesnt

[16:37] <El_Che> jmerelo: for me Wastern Spain still sounds like being a poor hidalgo going there (and further) to make it big :)

[16:38] <El_Che> the price of too many history books still floating around in my head :)

[16:39] <jmerelo> El_Che: a bit further west, but yep, kinda the same place. 

[16:40] <El_Che> jmerelo: I saw your twitter feed, travelling a lot lately it seems

[16:41] <jmerelo> yep, I've been doing that a lot lately. Next destination: Riga!

[16:42] <El_Che> jmerelo: taking (some of) your family?

[16:44] <jmerelo> El_Che: 4/5 of it :-)

[16:45] *** robertle joined
[16:46] <El_Che> ah nice!

[16:46] *** Poohman left
[16:48] *** Poohman joined
[17:00] *** jmerelo left
[17:07] *** xelak left
[17:15] *** sena_kun joined
[17:16] <antoniogamiz> have you ever heard about 'RaceSeq'?

[17:16] <antoniogamiz> as a type in perl6 I mean

[17:16] <jnthn> Yes

[17:17] <antoniogamiz> mm, then it's not documented

[17:17] <jnthn> m: [1..5].race.WHT.say

[17:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'WHT' for invocant of type 'RaceSeq'. Did you mean 'WHY'?␤  in block <unit> at <tmp> line 1␤␤»

[17:17] <jnthn> m: [1..5].race.WHAT.say

[17:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(RaceSeq)␤»

[17:17] <jnthn> It's what `race` returns

[17:18] <antoniogamiz> good, then I will open an issue because HyperSeq and RaceSeq does not appear in the docs

[17:21] *** noisegul_ is now known as noisegul

[17:25] <antoniogamiz> s/does/do sorry 

[17:29] *** pamplemousse joined
[17:35] *** antoniogamiz left
[17:38] *** pamplemousse_ joined
[17:40] *** pamplemousse left
[17:41] *** pamplemousse_ is now known as pamplemousse

[17:44] *** chloekek left
[17:48] *** redhands joined
[18:07] *** vike joined
[18:10] *** Poohmaan joined
[18:13] *** Poohman left
[18:13] *** Poohman joined
[18:14] *** Poohmaan left
[18:20] *** AlexDaniel left
[18:22] *** pamplemousse_ joined
[18:24] *** pamplemousse left
[18:24] *** pamplemousse_ is now known as pamplemousse

[18:29] *** sauvin left
[18:32] *** zakharyas left
[18:36] *** AlexDaniel joined
[18:46] *** wildtrees joined
[18:49] *** nepugia left
[18:54] *** natrys joined
[19:01] *** pamplemousse_ joined
[19:02] *** Black_Ribbon joined
[19:03] *** pamplemousse left
[19:18] <cpan-p6> New module released to CPAN! PDF::Class (0.3.7) by 03WARRINGD

[19:19] *** mowcat joined
[19:50] *** pamplemousse_ is now known as pamplemousse

[20:06] *** mowcat left
[20:10] *** MasterDuke joined
[20:16] <SmokeMachine> should `perl6 -I.` use META6.json to know where to look for modules?

[20:17] *** TimToady left
[20:17] *** TimToady joined
[20:29] <SmokeMachine> Should this work? https://www.irccloud.com/pastebin/DjZJGnoA/

[20:32] <SmokeMachine> https://www.irccloud.com/pastebin/J1WzfZ3q/

[20:33] <ugexe> if -I points to a directory with META6.json then it will use that as the authority of what modules are available

[20:33] <ugexe> if -I points to a directory with no META6.json then the file system acts as the authority of what modules are available

[20:34] <ugexe> the problem is you are using versions inside your provides section, which rakudo doesn't understand yet

[20:34] <ugexe> zef already understands that though, so whatever rakudo does it will Just Work

[20:34] <ugexe> s/whatever/whenever/

[20:35] <SmokeMachine> rakudo do not understand :ver<> inside of the META6?

[20:36] <ugexe> not inside the `provides`

[20:36] <ugexe> well, it doesn't undestand it anywhere either yeah

[20:37] <SmokeMachine> :(

[20:37] <ugexe> zef parses those names with https://github.com/ugexe/zef/blob/e73897378b36cbf53f2ed8d98363d94bac70767d/lib/Zef/Identity.pm6#L13-L30 -- if someone wanted to write that parser in nqp it we could put it into core and use it internally

[20:38] <SmokeMachine> ugexe: I was trying to use META6 to track database migrations with versions... do you think there is a better way to do that?

[20:38] <ugexe> CompUnit::DependencySpecification.from-string("Foo::Bar:ver<1.0>")

[20:38] <ugexe> theoretically where it might exist in the future^

[20:40] <SmokeMachine> about the link... it doesn't seem to be extremely complex... I think I could try to implement it...

[20:40] <ugexe> just remember it has to parse stuff like `Foo::Bar:auth<First Last [email@hidden.address]
[20:41] <ugexe> but yeah other than that it shouldnt be hard

[20:44] <ugexe> m: $*REPO.resolve(CompUnit::DependencySpecification.new(:short-name<Test>)).distribution.Str.say;

[20:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «CORE:ver<6.d>:auth<perl>:api<0>␤»

[20:45] <ugexe> distribution stringify the namespace to the format that requires a parser

[20:45] <SmokeMachine> ugexe: should it be here? https://github.com/rakudo/rakudo/blob/612d071b83f07a8da91f441484f948418dc7cb26/src/core/CompUnit/DependencySpecification.pm6

[20:47] <ugexe> yeah that is where i would put it

[20:48] <SmokeMachine> ugexe: great! I'll start coping the perl6 version you sent me (the grammar) to there and test it... if it works, I'll try to convert that to nap, does that make sense?

[20:49] <ugexe> sure

[20:49] <MasterDuke> why does it have to be in nqp?

[20:50] *** Cabanossi left
[20:51] <SmokeMachine> speed?

[20:52] *** Cabanossi joined
[20:54] <ugexe> i mean it could prove it never gets used significantly on start-up to actually matter, but i suspect something needs to be added somewhere for figuring out the precomp path parts

[21:02] <SmokeMachine> it's taking too long just too pull the repo...

[21:04] *** Kaiepi left
[21:08] <discord6> <Tyler (Aearnus)> what's the current weekly challenge?

[21:17] *** Kaiepi joined
[21:21] *** natrys left
[21:21] *** natrys joined
[21:23] <SmokeMachine> ugexe: What should be populated on that class?

[21:26] *** molaf joined
[21:30] *** MasterDuke left
[21:59] <SmokeMachine> I'm not being able to compile...

[21:59] <SmokeMachine> it hangs...

[22:05] *** rindolf left
[22:08] <SmokeMachine> https://www.irccloud.com/pastebin/G5acEGip/

[22:08] *** sena_kun left
[22:14] *** natrys left
[22:16] *** rindolf joined
[22:26] *** natrys joined
[22:26] *** natrys left
[22:59] *** noisegul left
[23:01] *** pamplemousse left
[23:01] *** noisegul joined
[23:11] *** lucasb left
[23:44] *** aborazmeh joined
[23:44] *** aborazmeh left
[23:44] *** aborazmeh joined
[23:51] *** nepugia joined
[23:59] *** wildtrees left
