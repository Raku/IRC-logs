[00:04] <SmokeMachine> m: my \c = 42; c := 13; say c # this is not valid

[00:04] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use bind operator with this left-hand side‚ê§at <tmp>:1‚ê§------> 3my \c = 42; c := 137‚èè5; say c # this is not valid‚ê§¬ª

[00:05] <SmokeMachine> m: my \c = 42; :(\c) := \(13); say c # should it be valid?

[00:05] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´13‚ê§¬ª

[00:06] <Xliff> m: my \c = 42; :(\c) := 13;

[00:06] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Cannot unpack or Capture `13`.‚ê§To create a Capture, add parentheses: \(...)‚ê§If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}‚ê§or missed `:` in signature unpacking? -> &c:(Int) {}‚ê§  in block <unit> at‚Ä¶¬ª

[00:06] <Xliff> m: my \c = 42; :(\c) := \(13);

[00:06] <camelia> rakudo-moar 17d036ad4: ( no output )

[00:06] <Xliff> m: \(13).^name.say

[00:06] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Capture‚ê§¬ª

[00:07] <Xliff> m: my \c = 42; c.^name.say

[00:07] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Int‚ê§¬ª

[00:07] <SmokeMachine> and :() is a signature...

[00:07] <Xliff> SmokeMachine: Apples and non-apples?

[00:07] <SmokeMachine> Xliff: no, that makes sense...

[00:08] <Xliff> \c is the same as saying "$c is raw"

[00:08] <Xliff> Which makes me want to say "is containerless"

[00:08] <SmokeMachine> m: my $a, $b; :(Int $a, Str :$b) := (42, :13b); dd [:$a, :$b]

[00:08] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$b' is not declared‚ê§at <tmp>:1‚ê§------> 3my $a, 7‚èè5$b; :(Int $a, Str :$b) := (42, :13b); dd‚ê§¬ª

[00:09] <SmokeMachine> m: my ($a, $b); :(Int $a, Str :$b) := (42, :b<bla>); dd [:$a, :$b]

[00:09] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Array element = [:a(42), :b("bla")]‚ê§¬ª

[00:10] <SmokeMachine> m: my ($a, $b); :(Int $a, Str :$b) := \(42, :b<bla>); dd [:$a, :$b]

[00:10] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Array element = [:a(42), :b("bla")]‚ê§¬ª

[00:12] <SmokeMachine> m: my ($a, $b); my \c = \(); :(Int $a, Str :$b, |c) := \(42, :b<bla>, 1, 2, 3); dd [:$a, :$b, :c(c)]

[00:12] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Array element = [:a(42), :b("bla"), :c(\(1, 2, 3))]‚ê§¬ª

[00:13] <SmokeMachine> I hope it's valid! I'm start using it on Red... :)

[00:14] *** wildtrees left
[00:16] <SmokeMachine> s/start//

[00:33] *** StPetersburgh left
[01:04] *** hythm joined
[01:06] *** xelxebar left
[01:07] *** xelxebar joined
[01:12] <Elronnd> Xliff: ok, I got to an actual problem!

[01:13] <Elronnd> I have this on the c side: http://ix.io/1Wj1/c, and this p6 http://ix.io/1WiZ/perl6

[01:13] <Elronnd> is outputs what looks like a pointer

[01:15] <Elronnd> I can dereference it to get 17--which is interesting; in my actual code, I can't do that

[01:18] <hythm> hello, how bad is it (for someone with no experience in Perl 6 internals) to write a slang module to make `my var = "something";` equals to `my \var = "something";`? I'm not a big fan of sigilless variables, but sometimes when writing small programs I like to use sigiless vars. also I think this might attracts some of the Python folks.

[01:28] *** p9s joined
[01:29] *** rindolf joined
[01:31] *** molaf left
[01:33] *** p9s left
[01:34] <Xliff> Elronnd: OK. One sec.

[01:35] *** mowcat left
[01:35] <Xliff> Elronnd: Let me finish up this module so I can give that my full attention. BBIAB.

[01:41] *** nepugia left
[01:43] *** nepugia joined
[01:44] *** molaf joined
[01:55] <Elronnd> Xliff: gonna be gone for a couple hours.  Sorry... :P

[02:01] <Xliff> Elronnd: OK. I'll look into it in the meantime.

[02:03] *** rindolf left
[02:06] *** nepugia left
[02:13] *** Cabanossi left
[02:15] *** rindolf joined
[02:15] *** Cabanoss- joined
[02:19] <Xliff> .tell Elronnd For some reason, Rakudo is creating a pointer for the CUnion, irrespective of the HAS>

[02:19] <tellable6> Xliff, I'll pass your message to Elronnd

[02:19] <Xliff> .tell Elronnd That smells like a bug to me.

[02:19] <tellable6> Xliff, I'll pass your message to Elronnd

[02:25] <SmokeMachine> vrurg: https://github.com/FCO/Red/issues/400#issuecomment-533844271

[02:26] <SmokeMachine> xinming: I think this can help to use code accessing more than one database ^^

[02:28] <SmokeMachine> Xliff: opinions? ^ 

[02:32] <vrurg> SmokeMachine: looks great. Especially use of adverb with a code block.

[02:32] <vrurg> SmokeMachine: what does .batch do?

[02:33] <SmokeMachine> vrurg: returns a ResultSeqSeq (please help me to find a better name for it!) that is a "Seq of ResultSeqs"

[02:33] <SmokeMachine> vrurg: That is a good way for pagination...

[02:35] <vrurg> SmokeMachine: perhaps it was better to have ResultSeq named just Results. Then ResultsSeq would look better. Otherwise I'm too exhausted now to have clear thinking.

[02:35] <SmokeMachine> vrurg: so `Model.^all.batch(5)[2].say` will run something like `SELECT * FROM model LIMIT 5 OFFSET 10`

[02:36] <vrurg> You do damn magic here. ;)

[02:36] <SmokeMachine> :)

[02:36] <vrurg> Anyway, time to get over with it for today. Those makefiles are killing me. 

[02:36] <vrurg> cu! o/

[02:37] <Xliff> SmokeMachine: Looks good. Although a bit tired to really eval.

[02:39] <SmokeMachine> vrurg: and `.classify`returns a ResultAssociative... so `Model.^all.classify(*.col)<key>` will run something like: `SELECT * FROM model WHERE col = 'key'`

[02:39] <SmokeMachine> Xliff: thanks!

[02:44] *** Actualeyes joined
[02:45] <SmokeMachine> .tell vrug Have you seen that Elronnd was trying to compile rakudo for iOS and (if I got ir right) was having troubles with the build system?

[02:45] <tellable6> SmokeMachine, I haven't seen vrug around, did you mean vrurg?

[02:46] <SmokeMachine> .tell vrurg Have you seen that Elronnd was trying to compile rakudo for iOS and (if I got ir right) was having troubles with the build system?

[02:46] <tellable6> SmokeMachine, I'll pass your message to vrurg

[02:53] *** Actualeyes left
[03:05] <Elronnd> Xliff: ok.  Wat do?

[03:05] <tellable6> 2019-09-22T02:19:31Z #perl6 <Xliff> Elronnd For some reason, Rakudo is creating a pointer for the CUnion, irrespective of the HAS>

[03:05] <tellable6> 2019-09-22T02:19:46Z #perl6 <Xliff> Elronnd That smells like a bug to me.

[03:05] *** cpan-p6 left
[03:05] <Elronnd> Just report it on the github thingy?

[03:05] *** cpan-p6 joined
[03:05] *** cpan-p6 left
[03:05] *** cpan-p6 joined
[03:17] *** dogbert11 left
[03:23] <Xliff> Yeah. Just report it on the github thingy.

[03:24] <Xliff> Elronnd: IIRC, there were issues with CUnions, so I'

[03:24] <Xliff> *I'd avoid them, if possible.

[03:25] <Xliff> If you do need them, try to keep them to from-c structures.

[03:25] <Elronnd> well...it's a bit late for that

[03:25] <Elronnd> :P

[03:25] <Xliff> Well.. not my fault.

[03:25] <Xliff> Um. 

[03:26] <Xliff> The only other way I think it would work, would be if you set the data from the union and memcpy'd it to the place where the Union needs to go.

[03:26] <Xliff> That's real messy, though.

[03:26] <Elronnd> does gtk have no unions?  How did you work around that?

[03:27] <Xliff> Yes, GTK has unions. Gratefully, I don't need to access them... much.

[03:27] <Xliff> Mostly there are functions to do that for me.

[03:27] <Elronnd> ahh

[03:27] <Xliff> The typing system is a noteable one. I avoid that like the plague.

[03:27] <Elronnd> yeah, that's how I've been working with it, but adds quite a bit overhead I'd like to avoid

[03:27] <Xliff> I feel your pain.

[03:28] *** awwaiid left
[03:47] <Xliff> Elronnd: What are you working on?

[04:25] *** hythm left
[04:30] *** isBEKaml joined
[05:04] <Elronnd> Xliff: a thingy to embed perl6 as a scripting language

[05:04] <Elronnd> github.com/elronnd/libport

[05:18] *** wamba joined
[05:22] *** sivoais left
[05:23] *** sivoais joined
[05:23] *** Mithaldu joined
[05:24] *** rjbs joined
[05:27] *** isBEKaml left
[06:27] *** statisfiable6 left
[06:27] *** unicodable6 left
[06:27] *** greppable6 left
[06:27] *** benchable6 left
[06:27] *** evalable6 left
[06:27] *** bloatable6 left
[06:27] *** nativecallable6 left
[06:27] *** coverable6 left
[06:27] *** notable6 left
[06:27] *** quotable6 left
[06:27] *** releasable6 left
[06:27] *** reportable6 left
[06:27] *** bisectable6 left
[06:27] *** shareable6 left
[06:27] *** tellable6 left
[06:27] *** squashable6 left
[06:27] *** committable6 left
[06:27] *** releasable6 joined
[06:27] *** ChanServ sets mode: +v releasable6

[06:28] *** unicodable6 joined
[06:28] *** ChanServ sets mode: +v unicodable6

[06:28] *** benchable6 joined
[06:28] *** ChanServ sets mode: +v benchable6

[06:29] *** squashable6 joined
[06:29] *** ChanServ sets mode: +v squashable6

[06:29] *** bloatable6 joined
[06:29] *** notable6 joined
[06:29] *** ChanServ sets mode: +v notable6

[06:30] *** reportable6 joined
[06:30] *** ChanServ sets mode: +v reportable6

[06:30] *** shareable6 joined
[06:30] *** ChanServ sets mode: +v shareable6

[06:31] *** nativecallable6 joined
[06:31] *** coverable6 joined
[06:31] *** ChanServ sets mode: +v coverable6

[06:31] *** quotable6 joined
[06:31] *** ChanServ sets mode: +v quotable6

[06:31] *** bisectable6 joined
[06:31] *** committable6 joined
[06:32] *** evalable6 joined
[06:32] *** greppable6 joined
[06:32] *** ChanServ sets mode: +v greppable6

[06:32] *** statisfiable6 joined
[06:32] *** tellable6 joined
[06:32] *** ChanServ sets mode: +v tellable6

[06:57] <Geth_> ¬¶ doc: 54a8abedbe | (JJ Merelo)++ | 3 files

[06:57] <Geth_> ¬¶ doc: Eliminates word variants, refs #3024

[06:57] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/54a8abedbe

[06:57] <Geth_> ¬¶ doc: ecdfd66bd9 | (JJ Merelo)++ | 3 files

[06:57] <Geth_> ¬¶ doc: Fixes last word variants, closes #3024

[06:57] <Geth_> ¬¶ doc: 

[06:57] <Geth_> ¬¶ doc: Also false positives have been taken care of or circumvented. Closes #2966

[06:57] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/ecdfd66bd9

[06:58] *** StPetersburgh joined
[07:18] *** eseyman left
[07:22] *** eseyman joined
[07:30] *** sno left
[07:36] *** vycb joined
[07:37] *** vycb left
[07:49] *** isBEKaml joined
[08:10] *** m_v_m_m joined
[08:10] <m_v_m_m> Hi. I still have some problems with those 2d arrays. https://pastebin.com/ZeqKMMPR This is the code with an error message. I really don't get it....

[08:20] *** isBEKaml left
[08:20] *** sena_kun joined
[08:26] *** patrickb joined
[08:33] *** sono__ left
[08:45] *** domidumont joined
[08:45] *** domidumont left
[08:46] *** domidumont joined
[08:52] *** wamba left
[08:58] *** molaf left
[09:39] *** AlexDaniel left
[09:47] *** StPetersburgh left
[09:47] *** domidumont left
[09:50] *** marmor joined
[09:54] *** pecastro joined
[09:57] *** ChoHag left
[09:58] *** ChoHag joined
[10:09] *** filehandle32 joined
[10:12] *** sena_kun left
[10:29] *** dogbert11 joined
[10:30] <timotimo> m_v_m_m: when you're assigning to [$x_i][$y_i] you'll be autovivifying an array in the $x_i slot if there isn't one yet. however, the default for autovivification is an untyped array, which doesn't fit the constraint of Array[Int]

[10:30] <timotimo> i would recommend replacing the whole of generate_new_empty_map with:

[10:31] <timotimo> m: my $x_dim = 3; my $y_dim = 4; my Array[Int] @t_map = Array[Int].new(0 xx $y_dim) xx $x_dim; say @t_map.perl

[10:31] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Array[Array[Int]].new(Array[Int].new(0, 0, 0, 0), Array[Int].new(0, 0, 0, 0), Array[Int].new(0, 0, 0, 0))‚ê§¬ª

[10:32] <m_v_m_m> Those perl one liners...;) Thank you. It should be somewhere in the perl6 documentation about arrays. 

[10:35] *** marmor left
[10:41] <timotimo> indeed

[10:41] <timotimo> m: my Array[Int] @t_map is default(Array[Int].new); @t_map[4][4] = 9; say @t_map.perl

[10:41] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Array[Array[Int]].new()‚ê§¬ª

[10:42] <timotimo> that's not it ...

[10:45] <Voldenet> array situation is quite complicated, tbh

[10:45] <Voldenet> m: my Array[Int] $a = [1, 2, 3]; say $a

[10:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Type check failed in assignment to $a; expected Array[Int] but got Array ($[1, 2, 3])‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:46] <Voldenet> I know why it doesn't work, but eh, it's a bit confusing

[10:46] <timotimo> shaped arrays make this a bit better, but they aren't sufficiently fleshed out yet :(

[10:49] *** Itaipu left
[10:56] *** m_v_m_m left
[11:11] <timotimo> m: my int @map[4;3] = 0 xx (4 * 3); say @map.perl

[11:11] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Died with X::Assignment::ToShaped‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:11] <timotimo> m: my int @map[4;3] = 0 xx 4 xx 3; say @map.perl

[11:11] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Index 3 for dimension 2 out of range (must be 0..2)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:11] <timotimo> m: my int @map[3;4] = 0 xx 4 xx 3; say @map.perl

[11:11] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´array[int].new(:shape(3, 4), [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0])‚ê§¬ª

[11:19] *** andrzejku joined
[11:30] *** Kaiepi left
[11:31] *** Kaiepi joined
[11:37] *** krychu joined
[11:39] *** StPetersburgh joined
[11:43] <cpan-p6> New module released to CPAN! XML::Actions (0.4.0) by 03MARTIMM

[11:48] *** mowcat joined
[11:54] *** molaf joined
[12:12] *** domidumont joined
[12:13] *** nepugia joined
[12:16] *** holyghost left
[12:21] *** gabiruh left
[12:22] *** gabiruh joined
[12:23] <timotimo> https://notamonadtutorial.com/weld-accelerating-numpy-scikit-and-pandas-as-much-as-100x-with-rust-and-llvm-12ec1c630a1 - it sounds like this library would be a nice target for a perl6 binding

[12:29] *** filehandle32 left
[12:34] *** isBEKaml joined
[12:38] <timotimo> https://shoumik.xyz/static/papers/mozart-sosp19final.pdf - also quite interesting

[12:48] *** sena_kun joined
[12:52] <timotimo> these Split Annotations are vaguely similar to how HyperSeq and friends work

[12:52] <timotimo> but only very vaguely

[12:52] <timotimo> however, hyper only knows how to deal with one-dimensional array workloads

[12:53] <timotimo> whereas split annotations would understand higher-dimensional data, too

[12:53] <timotimo> like having to split a 2d array into patches rather than parallelizing over rows or columns

[12:57] *** pecastro left
[13:10] *** StPetersburgh left
[13:25] *** lucasb joined
[13:27] *** AlexDaniel joined
[13:27] *** AlexDaniel left
[13:27] *** AlexDaniel joined
[13:55] *** krychu left
[14:00] <cpan-p6> New module released to CPAN! ORM::ActiveRecord (0.0.5) by 03GDONALD

[14:16] *** Sgeo_ joined
[14:16] *** molaf_ joined
[14:16] *** molaf_ left
[14:16] *** molaf left
[14:18] *** gabiruh left
[14:19] *** Sgeo__ left
[14:21] *** Sgeo_ left
[14:35] *** ryoshu joined
[14:55] *** awwaiid joined
[15:02] *** wamba joined
[16:26] *** StPetersburgh joined
[16:32] <Geth_> ¬¶ perl6.org: 8aa62a620c | (Roman Baumer)++ (committed using GitHub Web editor) | fetch-recent-blog-posts.pl

[16:32] <Geth_> ¬¶ perl6.org: get https

[16:32] <Geth_> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/8aa62a620c

[16:32] *** veesh left
[16:35] *** MilkmanDan left
[16:36] *** zakharyas joined
[16:36] <Geth_> ¬¶ perl6.org: 80c68cc38e | (Roman Baumer)++ (committed using GitHub Web editor) | README.md

[16:36] <Geth_> ¬¶ perl6.org: updated module dependency

[16:36] <Geth_> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/80c68cc38e

[16:37] *** MilkmanDan joined
[16:39] *** Sgeo joined
[16:39] *** cjkinni joined
[16:50] <thowe> I have a manually created array of hashes.  If I loop through them like this: "for @things -> $thing"  or like this: "for @things -> %thing"  both seem to work if I "say $thing<key>"  or "say %thing<key>"

[16:52] <thowe> In perl5 one is a scalar and one is a hash and they aren't really the same.  One might be a Hashref, but the same syntax wouldn't work.  What's happening here?  Is Perl6 doing some sort of auto conversion?

[16:55] <thowe>  $thing.^name and %thing.^name both say they are Hash...

[16:56] <sena_kun> https://docs.perl6.org/language/5to6-nutshell#Sigils <- maybe this can help

[16:57] <sena_kun> >In Perl 5, arrays and hashes use changing sigils depending on how they are being accessed. In Perl 6 the sigils are invariant, no matter how the variable is being used - you can think of them as part of the variable's name.

[16:58] <thowe> So the sigil is just convention?  It serves no purpose?

[17:01] <sena_kun> well, @ is always used for arrays, % is always for hashes, & refers to a subroutine object, while $ is for scalars (and it is not changed when you are indexing something).

[17:01] <sena_kun> it gives you a nice ability to see quickly what you can do with a variable

[17:02] <sena_kun> m: my @a = 1,2,3; say @a[0];

[17:02] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´1‚ê§¬ª

[17:02] <thowe> Yeah, but a hash named with a $ sigil behaves the same as a hash named with a % sigil?

[17:02] <thowe> meaning it is by convention and doesn't tell the parser anything?

[17:03] <sena_kun> thowe, as the page from the docs states - yes.

[17:03] *** patrickb left
[17:03] <sena_kun> I don't know Perl 5, but if e.g. `my @a = 1, 2; $a[0]` works there, in Perl 6 the sigil does not change

[17:04] <sena_kun> as for what it tells to the parser - it tells the roles that the thing does

[17:04] <thowe> wild.  So you can just use % and @ and $ and it doesn't effect behavior.  It's just style.

[17:05] <sena_kun> well, with @ you always know something is Positional, with % you always know something is Associative

[17:05] <sena_kun> m: my %a = 42;

[17:05] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Odd number of elements found where hash initializer expected:‚ê§Only saw: 42‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:06] <sena_kun> ^ you can't just randomly shuffle sigils around

[17:06] <sena_kun> m: my @a = a => 42, b => 55; say @a.^name;

[17:06] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Array‚ê§¬ª

[17:06] <sena_kun> ^ @a becomes Array, not a Hash

[17:07] <thowe> OK...  then how was my $thing and my %thing both a Hash?

[17:07] <sena_kun> it might be unusual compared to Perl 5, but I hardly see it as unreasonable. Maybe that's just me.

[17:08] <sena_kun> thowe, the thing is, when you use $, you get a scalar thing and no array/hash/callable contracts

[17:09] <sena_kun> m: my $foo = [1, 2, 3]; #`( an array? ) for $foo { $_.say };

[17:09] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[17:09] <sena_kun> m: my @foo = 1, 2, 3; #`( an array too ) for @foo { $_.say };

[17:09] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[17:09] <thowe> I'm not quite sure what that means, but both $thing<key> and %thing<key> worked the same

[17:09] <sena_kun> thowe, ^ in the first case, if you try to iterate over $foo, it is treated as a single item, a scalar, but in a second case it is positional

[17:12] <Geth_> ¬¶ doc: 5300185466 | Coke++ | xt/words.pws

[17:12] <Geth_> ¬¶ doc: new word/tool

[17:12] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/5300185466

[17:13] <sena_kun> thowe, if you just index it, it doesn't matter, but it is not so for all cases

[17:14] <sena_kun> m: my %foo = a => 42; for %foo { $_.say }; my $foo = a => 42; for $foo { $_.say }

[17:14] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´a => 42‚ê§a => 42‚ê§¬ª

[17:14] <sena_kun> hmm, not the best example...

[17:14] *** MasterDuke left
[17:15] <sena_kun> m: my %foo = a => 42; for %foo { .say }; my $foo = { a => 42, b => 55 }; for $foo { .say }

[17:15] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´a => 42‚ê§{a => 42, b => 55}‚ê§¬ª

[17:16] <sena_kun> ^ once again, $ gives you "treat this as a single thing", while the % gives you pairs

[17:16] *** cjkinni left
[17:16] *** isBEKaml left
[17:17] <thowe> https://gist.github.com/thowe/d3def7012a9c6df43949ecae7890b604

[17:17] <thowe> So what is correct to do in this case if both work such that I can't tell the difference?

[17:18] *** aborazmeh joined
[17:18] *** aborazmeh left
[17:18] *** aborazmeh joined
[17:18] <sena_kun> thowe, I'd use % because you keep the code clear that the thing you work with is a hash

[17:19] <thowe> That's what I was thinking, but it seemed as though I was just doing it by convention with no detectable functional difference.  Thus my original question.

[17:20] <sena_kun> thowe, technically, you can "descalar" things when needed and use only $ for everything, but people who would support your code would be sad.

[17:20] <thowe> And then I was like "well what's the dang sigil for then?"

[17:20] <sena_kun> thowe, there is a technical difference if you do something else than just accessing by index

[17:21] <thowe> but ^name said they are both "Hash".  How do I know what "contracts" are in place?

[17:21] <thowe> don't know what a contract is, BTW, I just saw that term used in this thread.

[17:22] <thowe> not sure my question even makes sense.

[17:22] <sena_kun> thowe, I just wanted to say something like "If you see sigil X, you can safely assume you can do things Y and Z to it and it will do what you mean" using the word "contract".

[17:23] <thowe> From my current point of view, it seems Perl6 tried to make sigils easier, but I now find them more confusing.

[17:23] <thowe> So, "context" really is still a thing, then.  It just takes a different form?

[17:23] <sena_kun> thowe, @ means it is https://docs.perl6.org/type/Positional and % means it is https://docs.perl6.org/type/Associative

[17:24] <sena_kun> thowe, well, if you are not used to it and used to some other behavior, I bet it'd feel confusing at first.

[17:24] <sena_kun> and maybe I just suck at explaining

[17:24] <thowe> Yeah, I keep reading those words, but I'm not getting how they effect behavior.

[17:26] <thowe> At least, not in my case.  I do see very different behavior when assigning things to @array.  It seems to just treat it as a list if I assign to scalar.

[17:26] <thowe> So it "feels" like the perl5 concept of "context".

[17:27] <thowe> At least to me, who is just beginning to play with Perl6 and was never exactly a perl5 expert.

[17:27] * sena_kun double sucks at explaning, having a very vague idea at best about how context works in Perl 5

[17:28] <thowe> if "for @test_services -> %tservice" works correctly, I like it better.  but I don't really understand the implications.

[17:29] <thowe> especially since I'm being told by perl6 they are the same thing.  I think they are just the same thing for my small use case, but they signal different things if used as an lvalue or something.

[17:30] <sena_kun> thowe, well, the type is the same

[17:32] <sena_kun> I know a very nice article by lizmat explaning differences in sigils: https://opensource.com/article/18/9/using-sigils-perl-6

[17:32] *** Elronnd left
[17:33] <sena_kun> alternatively https://perl6advent.wordpress.com/2017/12/02/perl-6-sigils-variables-and-containers/ is an awesome reading

[17:34] <El_Che> lizmat: the UNIX studentclub of my University contacted me about the Perl 6 rename. They print a very nice poster with the history of programming languages and Perl 6 is there because of my request. They have to send stuff to the printers and wanted to know if they put Raku :)

[17:34] *** jmerelo joined
[17:34] <thowe> sena_kun, OK, cool.  Thanks

[17:36] <thowe> Ah, so the sigils are somewhat related to the gradual typing underpinning

[17:37] <thowe> They signal a constraint

[17:40] *** Elronnd joined
[17:42] <thowe> how do you see what roles an object can do?  Is there some kind of a "can be iterated over" role?

[17:43] <sena_kun> it is called Positional, you can $foo ~~ Positional

[17:43] <sena_kun> and you can use metamethods to get all roles

[17:43] <sena_kun> m: say 42.^roles;

[17:43] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´((Real) (Numeric))‚ê§¬ª

[17:43] <sena_kun> ^ 42 is Real and Numeric

[17:44] <sena_kun> and you can use them with your custom classes

[17:44] <thowe> m: my $things = { do => 1, re => 2, me => 3 }

[17:44] <camelia> rakudo-moar 17d036ad4: ( no output )

[17:45] <thowe> m: my $things = { do => 1, re => 2, me => 3 }; say $things<do>

[17:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´1‚ê§¬ª

[17:45] <jmerelo> m: say 42.

[17:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5===‚ê§Decimal point must be followed by digit‚ê§at <tmp>:1‚ê§------> 3say 42.7‚èè5<EOL>‚ê§Malformed postfix call‚ê§at <tmp>:1‚ê§------> 3say 42.7‚èè5<EOL>‚ê§‚ê§¬ª

[17:45] <jmerelo> m: say 42.0.^roles

[17:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´((Rational[Int,Int]) (Real) (Numeric))‚ê§¬ª

[17:45] <thowe> m: my $things = { do => 1, re => 2, me => 3 }; say $things.^name

[17:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Hash‚ê§¬ª

[17:45] <thowe> m: my $things = { do => 1, re => 2, me => 3 }; say $things.^roles

[17:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´((Associative) (Iterable))‚ê§¬ª

[17:46] <thowe> m: my %things = { do => 1, re => 2, me => 3 }; say %things.^roles

[17:46] <Xliff> thowe: It's best to think of them like this "what type of value is this"? -> $ = single value, @ = positional value, % = associative value

[17:46] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3 %things = { do => 1, re => 2, me => 3 }7‚èè5; say %things.^roles‚ê§((Associative) (Iterable))‚ê§¬ª

[17:46] <Xliff> & = functional value

[17:46] <Xliff> If there is no sigil there is no limitation.

[17:46] <thowe> $things and %things were both Associative.  So I'm still trying to figure the difference...

[17:47] <Xliff> Since you must be able to pass things as a single value, $ has to be able to represent all of them

[17:47] <thowe> m: my $things = { do => 1, re => 2, me => 3 }; say $things.^roles

[17:47] <Xliff> Yes. $ means that the % is being treated as a singular value.

[17:47] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´((Associative) (Iterable))‚ê§¬ª

[17:48] <Xliff> If you are going to pass things around, "$" must be able to wear more than one hat.

[17:48] <thowe> m: my $things = { do => 1, re => 2, me => 3 }; say $things<me>

[17:48] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´3‚ê§¬ª

[17:49] *** ilbelkyr joined
[17:49] <sena_kun> m: my $a = { a => 42 }; say $a.AT-KEY('a');

[17:49] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´42‚ê§¬ª

[17:50] <Xliff> thowe: This is why the smartmatch operator (~~) exists;

[17:50] <sena_kun> ^ a method AT-KEY is called when you do <> or {}, and as a single value it works ok

[17:50] <Xliff> m: $a = 42; say $a ~~ Hash; say $a ~~ Int; say $a ~~ Positional

[17:50] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5$a = 42; say $a ~~ Hash; say $a ~~ Int; ‚ê§¬ª

[17:50] <Xliff> m: my $a = 42; say $a ~~ Hash; say $a ~~ Int; say $a ~~ Positional

[17:50] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´False‚ê§True‚ê§False‚ê§¬ª

[17:51] <Xliff> So if you are confused about what $a is, just query it.

[17:51] <thowe> m: my $things = { do => 1, re => 2, me => 3 }; say $things.keys

[17:51] <Xliff> But if it is @, you are ASSURED it is Positional

[17:51] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(re do me)‚ê§¬ª

[17:51] <Xliff> If % then you are ASSURED associative

[17:51] <thowe> Ah, OK, so it /is/ like a type constraint then.

[17:52] <Xliff> Yes

[17:52] <Xliff> But more role, less content.

[17:52] <Xliff> m: $a = ( a => 42 ); say $a ~~ Associative

[17:53] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5$a = ( a => 42 ); say $a ~~ Associative‚ê§¬ª

[17:53] <Xliff> m: my $a = ( a => 42 ); say $a ~~ Associative

[17:53] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´True‚ê§¬ª

[17:53] <Xliff> m: my $a = ( a => 42 ); say $a ~~ Positional

[17:53] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´False‚ê§¬ª

[17:53] <Xliff> m: my $a = [a => 42]; say $a ~~ Positional; say $a ~~ Associative

[17:53] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[17:53] *** Black_Ribbon joined
[17:53] <Xliff> m: my $a = a => 42; say $a.^name

[17:54] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Pair‚ê§¬ª

[17:54] <Xliff> Associative and Positional are roles. Pair is the value class name (type)

[17:54] <Xliff> Everything in Perl6 is an object

[17:55] <Xliff> An object can have one class, but many roles.

[17:55] <Xliff> And yes... something can be both Positional AND Associative at the same time. Careful of the rabbit hole, there.

[17:56] <Xliff> It's deep.

[17:56] <thowe> heh.  That much I get.  Many years ago I started looking at Perl6.  Before I ever touched Ruby or Perl5.  I realized it wasn't ready for me, and I eneded up finding Ruby instead as sort of a similar language to my eye.  This is maybe 2002.

[17:56] <Xliff> Welcome, to 2020 (rounded up) ;)

[17:57] <Xliff> (bad joke... I'm known for those)

[17:57] <thowe> I loved Ruby.  And then Rails came out.  I was a ready-made fan of Rails...  Except I tried it out and hated it.

[17:58] <thowe> complicated, but my hate of Rails led me to DBIx::Class.  I liked it so much I got into Perl5.

[17:58] <lizmat> El_Che: what is the deadline?

[17:58] <Xliff> Oh, nice!

[17:59] <Xliff> You might like Red, then. It's an ORM in development for Perl6.

[17:59] <Xliff> https://github.com/FCO/Red

[17:59] <thowe> I did stuff in Catalyst, then found Mojolicious which I still love and now we have several work projects using it.

[18:00] <thowe> Mojo introduced me to some advanced topics which led me to Perl6.  Now I feel I am out of my depth.

[18:00] <Xliff> Mojolicious is one of my go-to tools. Yes, it's Perl5, but Perl5 code is readily available to Perl6.

[18:00] <Xliff> And don't worry. We've all been there. Perl6 can be daunting if you try to take in too much at once.

[18:00] <Xliff> Thne thing is, you aren't FORCED to use all of the features to get things done. You can start gradually.

[18:00] <thowe> Playing with Perl6 has made me understand why Python is popular in academia.

[18:01] <Xliff> I'm hoping Perl6 will suck up some of that mindscape. I've never been attracted to either Ruby or Python.

[18:01] <Xliff> IK'm happiest when my language does not try to get in the way of my problem solving.

[18:02] <Xliff> *I'm

[18:03] <thowe> I think some tools need to be out there to help with that.  One humble suggestion of mine is a Perl6 replacement for fail2ban.

[18:03] <Xliff> fail2ban?

[18:04] <Xliff> oooo

[18:04] <Xliff> That might be a fun project.

[18:04] <thowe> Very popular with server admins.  VERY.  If you aren't using it or something like it you are sysadmin beginner.

[18:04] <Xliff> Either that or a masochist. I'm the latter.

[18:05] <thowe> It strikes me as the kind of thing Perl should be the goto tool for.

[18:05] <Xliff> Seriously. I've done something similar. Instead of using fail2ban, I wrote my own tool.

[18:05] <Xliff> Yes.

[18:05] <thowe> Bugs me that it is a Python project.

[18:05] <Xliff> Well, let's consider what problems you have with the Python project?

[18:06] *** saorge joined
[18:06] <thowe> For some reason there's something weird about it that makes it less portable than one would think.  Not available for OpenBSD for some reason I forget.

[18:06] <Xliff> I can see 2 things that might make a perl6 version attractive: modular firewall support and modular rules

[18:06] <thowe> Also, its in Python, which I tried to learn and decided it wasn't any fun.

[18:07] <Xliff> And therin lies the rub.

[18:07] <Xliff> modular rules IMPLIES regular expressions. 

[18:07] <Xliff> https://docs.perl6.org/language/regexes

[18:07] <thowe> fail2ban is pretty modular and uses regex

[18:08] <Xliff> So... you thinking a straight up fork and port?

[18:09] <thowe> mmm, no.  I thought the problem should be rethunk from the perspective of workflow...  It's hard to explain without a common frame of reference, but fail2ban can often be the source of confusing problems and it isn't intuative how to see when it is.

[18:10] <thowe> Screws up my junior admins all the time.  In at least one case for days.

[18:10] <Xliff> Well, that sounds neat!

[18:10] <Xliff> I'm sure you could find some people willing to help with a project like that. Consider me one of them! :)

[18:11] <thowe> It seems to be an eco system that isn't tied together as well as I would like.

[18:12] <thowe> Well, give me a chance to figure out Perl6 first...  I'm just a hobbyist.

[18:12] <Xliff> Sounds like you know enough to spec it out.

[18:12] <thowe> I will probably rewrite my invoice processing program first.

[18:13] <thowe> I have a vague idea what I don't like, but I'm not confident enough in my ideas for change.  I think I need to think on it more.

[18:15] <thowe> And I have other itches to scratch.  The Perl community also has a way of showing me how ignorant I am as a hobbyist/tourist

[18:17] *** pecastro joined
[18:17] <thowe> and I get bogged down by details, as you can see

[18:18] <thowe> If I start playing with it I will put something on github

[18:20] <thowe> Xliff do you program professionally?

[18:21] <Xliff> Yes.

[18:21] <thowe> with Perl?

[18:21] <Xliff> I did a professional stint with Perl5 almost 20 years ago. It was called Slashdot.

[18:22] <Xliff> With Perl6 ,though? No. Not yet...

[18:22] <thowe> never heard of it ;)

[18:22] <Xliff> https://github.com/Xliff <- My current workload on github

[18:22] <Elronnd> Xliff: you worked on /.?

[18:22] <Elronnd> cool!

[18:23] <Xliff> Elronnd: Yep! :)

[18:23] <thowe> Red is yours?

[18:23] * Elronnd also knows the guy who made sourceforge

[18:24] <Xliff> No. SmokeMachine is writing Red. I am just a contributor.,

[18:24] <Elronnd> what's red?

[18:24] * thowe doesn't know people

[18:24] <Elronnd> thowe: spend more time on irc!

[18:25] <thowe> I used to...  I've actually met Perl people.  I went to a couple YAPCs a few years ago.

[18:26] <Xliff> https://slashdot.org/story/06/05/16/2127212/do-you-care-if-your-website-is-w3c-compliant <- One of my /. articles from years ago.

[18:26] <thowe> Met Larry.  Met Liz.  Met rjbs.  Met mst

[18:26] <Xliff> US or Europe?

[18:26] <Xliff> As in... where are you?

[18:26] *** MasterDuke joined
[18:27] <thowe> US.  I live in Central Oregon

[18:27] <Xliff> Ah! Nice place!

[18:27] <Xliff> I'm all the way across the continent in DC.

[18:27] <thowe> Yeah, We like it.

[18:28] <thowe> Ah, a guy who started in my dept at works just left to take a job in DC.

[18:28] <Xliff> Well, keep working on Perl6 at your own speed!

[18:28] <Xliff> If you have any questions, just ask them. We're here to help!

[18:29] <Xliff> Also, keep thinking about how you want a fail2ban equivalent to work. I'm pretty sure you'll find folks here who can help you get there.

[18:30] <thowe> My speed is variable.  What I really need is to replace some really old code at work, so that's probably where I will focus.  That and I need to finish my Mojo port of my IPAM.

[18:31] <thowe> I also think a Perl6 whois server would be better than current options, but that's just me.

[18:31] <Xliff> Hmmm...

[18:31] <Xliff> That's a lot of projects there.

[18:32] <Xliff> You should think about writing them down ... or keeping track of them as they come to mind.

[18:32] *** andrzejku left
[18:34] <thowe> yeah, I'm a bit all over the place.

[18:36] <thowe> what's going to happen with this name change?  Why do they keep trying to rename it fake words?

[18:37] <gdonald> the fail2ban design docs make it sound approachable. I've used it for years and will volunteer to test your Perl 6 implementation.

[18:37] <Xliff> thowe: Acutally "Raku" is japanese

[18:38] <Xliff> And the whole rename thing is really devoted to trying to heal the wound between Perl5 and Perl6 programmers.

[18:38] <Xliff> You know. Feelings.

[18:38] <Xliff> Those are important.

[18:38] <thowe> gdonald, that's flatering, but there isn't one.  I was just thinking out loud.  I do that too much.  Some guy is probably going to get rich on an idea I threw out once as a joke.

[18:38] <Xliff> Many in Perl5 think that Perl6 is a competitor and not a sister language. They may have a point.

[18:39] <timotimo> probably more outside of perl5 than inside, no?

[18:39] <Xliff> thowe: Don't worry. If it's me, I'll remember the "small people". =)

[18:39] * Xliff flees.

[18:39] <thowe> Well, the public confusion that was created is real.

[18:40] <thowe> No, I was at an Arduino hobbyist meeting and they were talking about a guy there who invented a toy that now sells at Disneyland and he made goood money.

[18:40] *** jmerelo left
[18:40] <thowe> I was showing off and said that "ideas are easy, I got a hundred of them".

[18:41] <thowe> So I threw out a bunch and a few months later a couple of the guys were talking about their progress in implementing one of them

[18:42] <thowe> It's basically a sensor strip you can put on the side of a beer keg and it will transmit how full it is to a tap handle that has an indicator built in.

[18:44] <discord6> <RaycatWhoDat> re: Perl 6 public confusion, I can't help but feel like a lot of it is conflated with not one but three different stigmas: 1) "Something something Perl is unreadable/Why Perl when you can Python?", 2) "Perl 6 missed the boat because of its development time", and 3) "Perl is slow". But, I have an uninformed perspective; these are just observations from my circles.

[18:44] <timotimo> don't forget "perl6 never came out, and because everybody waited for perl6 before starting new projects, perl5 died"

[18:45] <discord6> <RaycatWhoDat> Ah. The classic.

[18:45] *** krychu joined
[18:46] <discord6> <RaycatWhoDat> Outside of performance, I don't really understand what people are expecting us to fix.

[18:46] *** krychu left
[18:46] <discord6> <RaycatWhoDat> The initial impression/reception?

[18:47] <discord6> <RaycatWhoDat> I dunno. Feels bad that so many things have to align for a language to take off these days.

[18:47] <discord6> <RaycatWhoDat> "take off" in this case, meaning "be in the eye of hobbyists and corporations alike"

[18:47] <timotimo> people want "the one killer app", the framework that'll become "The Framework" for a week or two

[18:48] <timotimo> even though it'll just be replaced shortly thereafter

[18:48] <thowe> Yeah, there's some of that.  But regardless of the reason, and there are many, the biggest thing I run into is "nobody uses it".  language use is a tribal, virtue signaling thing.  That's why I think you need projects that end up having general appeal...  Sometimes top projects are what gets the language they are implemented in mindshare and cache.  There's nothing out there that non-perl people care about.

[18:48] <discord6> <RaycatWhoDat> It's a bit more nuanced than that, I'd think.

[18:49] <discord6> <RaycatWhoDat> People want to just walk into a language that has all of these things but those same people don't want to help the language get off the ground.

[18:49] <discord6> <RaycatWhoDat> You end up with these weird chicken-egg scenarios.

[18:49] * sena_kun can ++ this

[18:50] <thowe> I sit in at gatherings of students and venture capitalists and entrepreneurs.  They are all concerned with what "the cool kids are doing".

[18:50] *** aborazmeh left
[18:50] <timotimo> i mean, why would a regular programmer be expected to "help a programming language off the ground"?

[18:50] <discord6> <RaycatWhoDat> For the love of programming.

[18:51] <sena_kun> I took some of my time to answer rare Perl 6 related threads in a particular Russian community, and a looooot of responses were about "no libs", "nobody uses it except for a couple of obscure companies you named". At the same time you have a vicious circle you can't do anything about other than just untie it little by little.

[18:52] <thowe> They wouldn't.  It takes the weirdos to make something cool before the rest of the world gets interested "because its cool".

[18:52] <discord6> <RaycatWhoDat> Bit confused on your meaning at the end there. What does "untie it little by little" mean here?

[18:53] <sena_kun> the nice thing is that some people were genuinely interested if you point out good things about the language calmly

[18:54] <sena_kun> I mean, you can only write and write software, help others when they try establish some migration or a new project in Perl 6, doing it in a slow manner until a critical mass will be gathered

[18:54] <sena_kun> it is like a snowball

[18:54] <discord6> <RaycatWhoDat> I agree.

[18:54] <timotimo> Inline::Python and Inline::Perl5 and Inline::Perl6 should get much more publicity i think

[18:55] <timotimo> they are woefully underrepresented

[18:55] <thowe> Yeah, sure.  But most programmers spend time learning the new language that they think makes them employable.  The early adopting weirdos have to help a language hit that milestone.

[18:55] <discord6> <RaycatWhoDat> Shame, really.

[18:56] <discord6> <RaycatWhoDat> I get that you have to make money. I understand learning one or two to make that happen. But after that, then what? Do you only consign yourself to learning languages with money attached?

[18:56] <Xliff> Make a good language.

[18:57] <Xliff> Make decent apps with that language.

[18:57] <Xliff> The money should naturally follow.

[18:57] <Xliff> But what to I know?

[18:57] <Xliff> *do

[18:57] <timotimo> you can do your day-to-day productivity stuff with perl6 and accelerate your work that way

[18:57] <discord6> <RaycatWhoDat> ^

[18:57] <Xliff> That's what I'm doing.

[18:57] <timotimo> like, you can hack up a simple data munging thing in python, but you can't easily multithread it

[18:58] <thowe> I know a lot of folks in the local developer community.  They don't do much if anything outside of their current community.

[18:59] <discord6> <RaycatWhoDat> Hot take: I don't feel like Perl 6 will have a single killer app.

[18:59] <Xliff> Naw. It will have many and they will probably all get recognized at the same time.

[18:59] <timotimo> i'd imagine cro can come close

[18:59] <Xliff> Cro needs mindshare, but yes.

[19:00] <thowe> It will have to be something built with cro

[19:00] <timotimo> i haven't yet had a use case for more than one service, so i couldn't try link templates and the orchestration stuff at all yet

[19:00] <thowe> Something that targets non-developers

[19:00] <discord6> <RaycatWhoDat> It strikes me as a language where multiple niceties and quality-of-life changes will make the developer experience worth talking about. The problem with that approach is that it's SLOW.

[19:00] <gdonald> what are people using for a templating language with cro?  is there anything like haml?

[19:01] <sena_kun> gdonald, cro::webapp, template6, mustache, whatever you like more

[19:01] <timotimo> my cro thing is moarperf, which does all the UI stuff clientside with react

[19:02] <discord6> <RaycatWhoDat> For the record, D falls into the same pit. Tons of QoL and improvements, slow advocacy and marketing.

[19:02] <timotimo> there was also the time when it had two standard libraries

[19:02] <timotimo> which was kinda weird

[19:03] <discord6> <RaycatWhoDat> Yeah, the Tango/Phobos split was horrible for the language

[19:03] <timotimo> but i think it's now all open source and everything

[19:03] <discord6> <RaycatWhoDat> ye

[19:03] <timotimo> Inline::D would probably be cool

[19:03] <timotimo> also, Inline::Zig

[19:03] <discord6> <RaycatWhoDat> I would KILL for that.

[19:03] <discord6> <RaycatWhoDat> I dunno how to do that myself, tho ;_;

[19:04] <discord6> <RaycatWhoDat> Hell, I don't even know Perl 6

[19:04] <discord6> <RaycatWhoDat> I'm just here

[19:04] <Xliff> Hmm....

[19:04] <Xliff> Inline::D would probably need to work the same way as Inline::Perl5 and Inline::Python?

[19:04] *** domidumont left
[19:05] <timotimo> Inline::D won'- be very much like Inline::Python, it'll mostly be "grab some inlined code, put it into a file and invoke the compiler, then NativeCall into the result"

[19:05] <Xliff> Ah.

[19:05] *** domidumont joined
[19:05] *** domidumont left
[19:05] *** vike left
[19:05] <discord6> <RaycatWhoDat> You'll probably use rdmd because you have to resolve DUB dependancies as well.

[19:05] <timotimo> with Inline::Python there's so much introspection and such that you can do with the runtime

[19:05] <discord6> <RaycatWhoDat> Or one of the compilers that understands what it needs to fetch.

[19:06] <discord6> <RaycatWhoDat> I should read up on garbage collectors.

[19:07] <Grinnz> Inline::D would work more like Inline::C i assume

[19:07] <discord6> <RaycatWhoDat> ye

[19:09] <Elronnd> Inline::C wouldn't have to be like that

[19:10] <Elronnd> I started making a c compiler at one point

[19:10] <Elronnd> never got past super basic tokenizationand preprocessing, but it is possible

[19:10] <timotimo> yeah, just port TCC

[19:10] <timotimo> port or bind

[19:11] <Elronnd> tcc doesn't have all the gnu exts, though

[19:12] <timotimo> well, you're not going to have a great time porting all of gcc :)

[19:12] <Elronnd> tru

[19:13] <Elronnd> but binding to libclang *is* a thing

[19:13] <vrurg> Elronnd: "we call it 'beta' 'cause it's betah than nothing" Call it Inline::TCC for clarity. :)

[19:13] <tellable6> 2019-09-22T02:46:20Z #perl6 <SmokeMachine> vrurg Have you seen that Elronnd was trying to compile rakudo for iOS and (if I got ir right) was having troubles with the build system?

[19:13] <timotimo> it's a thing that's happening

[19:13] <Elronnd> o_O?

[19:13] <timotimo> yup

[19:14] <Elronnd> linky?

[19:14] <thowe> how do you do "do this if this, else do this"  Is there a way to have an else of the if condition is second?

[19:14] <vrurg> Elronnd: with regard to SmokeMachine message ‚Äì is there anything worth reporting on github?

[19:15] <timotimo> i thought it might be this: https://repl.it/@theangryepicbanana/llvm-p6-thing

[19:15] <thowe> nm, I see here it isn't allowed

[19:15] <vrurg> thowe: no, it's no supposed to work this way.

[19:15] <Elronnd> vrurg: I don't think so.  It's not a *problem* with the build system, just that I'm trying to make it do something it wasn't designed to do in order to work on a broken system

[19:15] <discord6> <theangryepicbanana> yeet

[19:15] <discord6> <theangryepicbanana> also that link pinged me lmao

[19:16] <vrurg> Elronnd: perhaps we can make that thing easier? It could help porting on other non-standard systems, for example.

[19:16] <thowe> if ( condition in parens ) seems to not be the Perl6 way, instead its just: if bare condition;  yeah?

[19:16] <timotimo> yep

[19:16] <timotimo> we call them "superstitious parens"

[19:16] <thowe> why?

[19:17] <timotimo> because you don't need them

[19:17] <thowe> no, why are they called superstitious?

[19:17] <timotimo> you believe you need them but you don't

[19:17] <thowe> ah

[19:17] <Elronnd> vrurg: maybe.  I just don't feel it's worth it.  How many platforms have a broken libtool/ar, but a working llvm-ar?

[19:18] <Elronnd> we would probably want to cross-compile for ios instead of compiling *on* it, anyway, which would pretty much get rid of the proble

[19:18] <Elronnd> I just don't have a mac

[19:18] <timotimo> we should build a C compiler in polyglot sh and windows batch files

[19:18] <thowe> that's funny in that it speaks to Perl6 culture, I think

[19:18] <timotimo> that ought to work everywhere

[19:18] <Elronnd> timotimo: that might actually be possible

[19:18] <vrurg> Elronnd: no idea. But sounds like you're right here. 

[19:18] <timotimo> yes, but don't

[19:18] <discord6> <theangryepicbanana> Or powershell

[19:19] <Elronnd> someone made a decent-ish language that compiles to both shell and batch.  And there is a pretty simple scheme for making shell/batch polyglots

[19:19] <discord6> <theangryepicbanana> that would technically work everywhere

[19:19] <Elronnd> @theangryepicbanana yes, but you would have to install pwsh

[19:19] <timotimo> we want something you don't have to install

[19:19] <discord6> <theangryepicbanana> yea I guess

[19:19] <timotimo> otherwise we can just install whatever we want instead

[19:20] <discord6> <theangryepicbanana> what about lua? you don't even need to install it

[19:20] <thowe> when I try to install p6doc I get an error that OpenSSL didn't pass tests.

[19:22] <timotimo> do you have libopenssl-devel or similar installed?

[19:25] <thowe> timotimo, good question.  I'm trying out a debian machine, so not as familiar.  I used OpenBSD for 20 years...  lemme try that.

[19:26] <Xliff> Weird. Ubuntu doesn't have an openssl-dev

[19:27] <thowe> libssl-dev might be it, installing now

[19:27] <timotimo> could be

[19:27] <timotimo> i tend to just use the "provides" query to find files like that

[19:27] <Xliff> Yeah. That's the one.

[19:28] <thowe> hm, now it segfaults...

[19:28] <Xliff> Oh, joy.

[19:28] <thowe> ===> Searching for missing dependencies: LWP::Simple:ver<0.101+>, URI, File::Temp, JSON::Fast, Pod::To::BigPage:ver<0.4.0+>, Pod::To::HTML:ver<0.3.19+>, OO::Monitors, File::Find, Test::META

[19:28] <thowe> zsh: segmentation fault  zef install p6doc

[19:28] <timotimo> whoa, that's not good

[19:28] <timotimo> what's your perl6 --version please?

[19:28] <thowe> hm, not too new:  This is Rakudo version 2019.07.1 built on MoarVM version 2019.07.1

[19:29] <timotimo> that's recent enough

[19:29] <thowe> oh well, I can nuke from orbit, I might have screwed something up

[19:29] <Xliff> heh

[19:29] <timotimo> would oyu have the patience to debug, though?

[19:29] <Xliff> It's the only way to be sure.

[19:30] <Xliff> But debugging would help someone else who doesn't have nuclear release authority.

[19:30] <timotimo> first thing to try is turning spesh off, that'll also disable the jit compiler

[19:30] <thowe> how do you just blow rakudobrew out of the water and everything with it?

[19:31] <Xliff> Are you using the latest rakudobrew?

[19:31] <thowe>  .rakudobrew I guess

[19:31] <Xliff> No.

[19:31] <timotimo> i think rakudobrew has a "nuke" subcommand?

[19:31] <Xliff> Yes.

[19:31] <thowe> do tell...

[19:31] <Xliff> That's the best way to do it.

[19:31] <Xliff> Do "rakudobrew versions"

[19:31] <thowe> fuckin hell, thought I was kidding when I said that.

[19:31] <timotimo> zef also has a "nuke" subcommand

[19:31] <Xliff> The one with the "*" next to it is the version you want to nuke.

[19:32] <thowe> how are you supposed to install p6doc?

[19:32] <Xliff> thowe: Still, I would run through some things with timotimo, first.

[19:32] <Xliff> That way if there is a problem to be solved, it can be.

[19:32] <thowe>  * moar-2019.07.1

[19:32] <Xliff> perl6 should never segfault. Neither should zef (which uses perl6)

[19:33] <thowe> timotimo, spesh?

[19:33] <Xliff> So the command you want is "rakudobrew nuke moar-2019.07.1" -- but please hold off until you try a few things.

[19:33] <thowe> how do I turn spesh off

[19:33] <timotimo> env MVM_SPESH_DISABLE=yes zef install p6doc

[19:34] <thowe> doing that...  what is spesh?

[19:34] <timotimo> moarvm's dynamic specializer + jit

[19:34] <SmokeMachine> Elronnd: https://fco.github.io/Red/tutorials/start

[19:34] <thowe> OK, still segfaulted.

[19:34] *** patrickb joined
[19:35] *** Ven`` joined
[19:35] *** patrickb left
[19:35] <thowe> https://gist.github.com/thowe/fc72ba376f467e169e902b088ea63f21

[19:37] *** patrickb joined
[19:38] <SmokeMachine> Elronnd: Red is a ORM for perl6

[19:41] <thowe> should I nuke as a next step, or should I try something else?

[19:42] <thowe> rakudobrew versions also shows "system".  What's that?

[19:42] <timotimo> sorry i was afk'd

[19:42] <thowe> no prob

[19:43] <Xliff> That means that rakudobrew is relying on the system to determine your perl6, not it's internal tracking.

[19:43] <Xliff> So if there is a root-installed version of Perl6, you can go back to it.

[19:43] <thowe> ah.  Well, it doesn't have a * by it, so I assume its not.

[19:44] <timotimo> in theory you could "perl6-gdb-m (which zef) install p6doc", but i think rakudobrew installs some forwarder scripts that may mess with that

[19:45] *** krychu joined
[19:52] <thowe> so, do you want me to try something else, or should I try to rebuild it?

[19:52] *** patrickb left
[19:54] *** Altreus joined
[19:58] <timotimo> ah sorry

[19:58] <timotimo> i guess nuking and rebuilding could be a good first step

[20:00] *** _jrjsmrtn joined
[20:00] <thowe> OK, so I did rakudobrew build zef and it doesn't segfault anymore.  Now it just fails the openssl testing again.

[20:01] *** __jrjsmrtn__ left
[20:01] *** domidumont joined
[20:01] <thowe> https://gist.github.com/thowe/19cbad1081b01817e5d888a79827df83

[20:02] <thowe> still seems to be a libssl thing on my machine

[20:03] <thowe> hm...  https://github.com/sergot/openssl/issues/68

[20:08] *** reach_satori joined
[20:08] <thowe> Xliff, looks like this is an issue you had seen before.  The linked comment is by you

[20:09] *** squashable6 left
[20:12] *** squashable6 joined
[20:19] <Xliff> Was that a fix?

[20:19] *** domidumont left
[20:20] <thowe> I didn't try it..  yet.  Not sure what the full implications would be.  Certainly not a permanent fix.

[20:20] <Xliff> I only saw "segfault", so it didn't trip my memory.

[20:20] <thowe> no, the original OpenSSL failure to run tests

[20:21] <Xliff> Ah.

[20:21] *** wamba left
[20:21] <Xliff> Well, again... I never got to see the original error!

[20:22] <thowe> https://gist.github.com/thowe/19cbad1081b01817e5d888a79827df83

[20:22] <Xliff> Ah! Well, that IS the problem referenced!

[20:23] <timotimo> ah, that's the version difference

[20:23] <Xliff> So the workaround should fix your issue assuming all of the links are still valid.

[20:23] <timotimo> you can try installing with --force-test, maybe not every usage of the lib needs that function

[20:23] <Xliff> No. You need to use the workaround.

[20:23] <Xliff> sk_num is necessary for initialization

[20:24] <timotimo> dang

[20:24] <timotimo> why is nobody fixing this :)

[20:24] <Xliff> *shrug*

[20:24] <timotimo> nobody needs ssl

[20:27] <sena_kun> timotimo, there _is_ a fix for this issue, but it still appears for some people and nobody knows why, that's why nobody fixes that

[20:27] <timotimo> brilliant

[20:27] <sena_kun> inb4: if it doesn't work, there is _no_ fix

[20:28] <thowe> I just wanted to have p6doc command

[20:28] <timotimo> does the p6doc command even do much?

[20:28] <timotimo> can it display pages from the documentation we have on doc.perl6.org?

[20:28] <thowe> shows docs for perl 6 libs

[20:28] <sena_kun> https://github.com/sergot/openssl/blob/032e4d380e3f41adfe496db98cf02492c05074d2/lib/OpenSSL/Stack.pm6#L15 <- this sub constructs a correct name

[20:29] *** gabiruh joined
[20:29] *** reach_satori left
[20:29] <thowe> also, learning Perl 6 book uses it to show you how to read docs...

[20:32] *** reach_satori joined
[20:33] <timotimo> i don't have the book, i can't comment :|

[20:40] <thowe> why does p6doc need openssl?  isn't libressl the new hotness?

[20:42] <timotimo> it's an indirect dependency surely

[20:42] <Xliff> Hah. "the new hotness"

[20:43] <Xliff> I like my solutions mature and well-tested.

[20:43] <Xliff> m: sub f ($a) { $a ** 2 }; (1, 2, 3, 4, 5).map( f(*) ).say

[20:43] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in sub f at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:44] <Xliff> m: sub f ($a) { $a ** 2 }; (1, 2, 3, 4, 5).map({ f($_) }).say

[20:44] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(1 4 9 16 25)‚ê§¬ª

[20:44] <Xliff> How can I get f to work with whatever?

[20:45] <MasterDuke> m: sub f ($a) { $a ** 2 }; (1, 2, 3, 4, 5).map( *.&f ).say # Xliff

[20:46] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(1 4 9 16 25)‚ê§¬ª

[20:46] *** zakharyas left
[20:46] <Xliff> Ahhh!

[20:46] <Xliff> MasterDuke++ !

[20:52] *** andrzejku joined
[20:55] *** vike joined
[20:57] <timotimo> m: sub f($a) { $a ** 2 }; (1, 2, 3, 4, 5).map(&f).say

[20:57] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(1 4 9 16 25)‚ê§¬ª

[20:57] <timotimo> ^- why not the easiest way

[21:00] *** andrzejku left
[21:01] *** Sgeo_ joined
[21:04] *** Sgeo left
[21:04] *** krychu left
[21:08] *** pecastro left
[21:15] <thowe> gotta make with a reboot

[21:16] *** thowe left
[21:17] *** daxim left
[21:22] *** daxim joined
[21:30] *** pmurias joined
[21:31] <pmurias> timotimo: re using Inline::{Python,Perl5} doesn't that interfere with multithreading?

[21:43] <timotimo> yeah, may not want to use the same foreign interpreter on switching threads

[21:43] <Xliff> 291 KLOC! \o/

[21:44] <gdonald> m: (1..5).map:{2.exp($_)}

[21:45] <camelia> rakudo-moar 17d036ad4: ( no output )

[21:45] <gdonald> m: (1..5).map:{2.exp($_)}.say

[21:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´-> ;; $_? is raw { #`(Block|65616168) ... }‚ê§Cannot map a Range using 'Bool::True'‚ê§Did a * (Whatever) get absorbed by a list?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:45] <gdonald> :(

[21:45] <timotimo> the .say got eaten

[21:45] <gdonald> m: (1..5).map:{2.exp($_).say}

[21:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´1‚ê§4‚ê§9‚ê§16‚ê§25‚ê§¬ª

[21:45] <Xliff> https://drive.google.com/file/d/12j1Dy6zIcmZP8EOWFYJzKElohGkj9IyL/view?usp=sharing

[21:47] <timotimo> impressive work

[21:47] <Xliff> :)

[21:56] *** sno joined
[22:00] <discord6> <theangryepicbanana> m: 2.exp($_).say for 1..5

[22:00] <evalable6> theangryepicbanana, rakudo-moar ca5e3f1c8: OUTPUT: ¬´1‚ê§4‚ê§9‚ê§16‚ê§25‚ê§¬ª

[22:01] <discord6> <theangryepicbanana> actually

[22:02] <discord6> <theangryepicbanana> m: (1..5)R¬ª.exp(2).say

[22:02] <evalable6> theangryepicbanana, rakudo-moar ca5e3f1c8: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/k4TH5jwmyf‚ê§Missing ¬´ or ¬ª‚ê§at /tmp/k4TH5jwmyf:1‚ê§------> 03(1..5)R¬ª.08‚èè04exp(2).say‚ê§¬ª

[22:02] <discord6> <theangryepicbanana> oh guess reverse op doesn't work like that

[22:02] <timotimo> m: say 2 <<**<< 1..5

[22:03] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´2..5‚ê§¬ª

[22:03] <timotimo> haha

[22:03] <timotimo> m: say 2 <<**<< (1..5).list

[22:03] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(2 4 8 16 32)‚ê§¬ª

[22:04] <discord6> <theangryepicbanana> m: say 2 ¬´R**¬´ flat 1..5

[22:04] <evalable6> theangryepicbanana, rakudo-moar ca5e3f1c8: OUTPUT: ¬´(1 4 9 16 25)‚ê§¬ª

[22:04] <discord6> <theangryepicbanana> yeyeyeye

[22:06] *** dogbert11 left
[22:09] <discord6> <theangryepicbanana> m: 2 R** | 1..5

[22:09] <evalable6> theangryepicbanana, rakudo-moar ca5e3f1c8: OUTPUT: ¬´WARNINGS for /tmp/iriSb6PRaJ:‚ê§Useless use of ".." in expression "R** | 1..5" in sink context (line 1)‚ê§¬ª

[22:09] <discord6> <theangryepicbanana> m: 2 R** any 1..5

[22:09] <evalable6> theangryepicbanana, rakudo-moar ca5e3f1c8: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of R** in sink context‚ê§    at /tmp/JCgR9p8YJD:1‚ê§    ------> 032 08‚èè04R** any 1..5‚ê§¬ª

[22:09] <discord6> <theangryepicbanana> what

[22:10] <timotimo> forgot to say or similar

[22:10] <timotimo> m: say 2 R** any 1..5

[22:10] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´any(1, 4, 9, 16, 25)‚ê§¬ª

[22:17] *** pmurias left
[22:27] <gdonald> sweet.

[22:30] *** reach_satori_ joined
[22:31] *** Ven`` left
[22:31] *** reach_satori left
[22:31] <discord6> <theangryepicbanana> lol

[22:31] <nepugia> a discord bridge?

[22:31] <discord6> <theangryepicbanana> yep

[22:31] <discord6> <theangryepicbanana> it's easier on mobile devices

[22:32] <nepugia> Well, I'll have you know that bridging me is both illegal and against discords TOS :), but i'll make it easier for you and just leave the room...

[22:32] *** nepugia left
[22:32] <discord6> <theangryepicbanana> nepugia: well ask the person who made it

[22:32] <tellable6> theangryepicbanana, I'll pass your message to nepugia

[22:33] <discord6> <RaycatWhoDat> That was the most ridiculous interaction I've read here.

[22:33] <discord6> <theangryepicbanana> yea lol

[22:34] <Xliff> ?!?

[22:34] <discord6> <RaycatWhoDat> Xliff, you have enough scrollback to see that? Dunno if you just joined.

[22:34] <Xliff> (1..5)R.say

[22:34] <Xliff> m: (1..5)R.say

[22:34] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot reverse the args of . because dotty infix operators are too fiddly‚ê§at <tmp>:1‚ê§------> 3(1..5)R.7‚èè5say‚ê§¬ª

[22:34] <timotimo> that's not a thing we have to my knowledge

[22:34] <discord6> <theangryepicbanana> https://cdn.discordapp.com/attachments/557612644127997983/625460045613629501/image0.png

[22:34] <Xliff> m: (1..5).reverse.say

[22:34] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(5 4 3 2 1)‚ê§¬ª

[22:35] <discord6> <RaycatWhoDat> @theangryepicbanana They're on IRC.

[22:35] <discord6> <RaycatWhoDat> Dunno if that works.

[22:35] <discord6> <theangryepicbanana> ik

[22:35] <discord6> <theangryepicbanana> they can see it

[22:35] <discord6> <theangryepicbanana> it's a link

[22:35] <Xliff> m: say (1..5).reverse ¬ª**¬ª 2 

[22:35] <discord6> <RaycatWhoDat> Oh, sweet.

[22:35] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(25 16 9 4 1)‚ê§¬ª

[22:36] <Xliff> m: say ((1..5) ¬ª**¬ª 2).reverse

[22:36] <tobs> "dotty infix operators are too fiddly"

[22:36] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(25 16 9 4 1)‚ê§¬ª

[22:36] * tobs gets his dictionary :D

[22:36] *** reach_satori_ left
[22:36] <Xliff> m: say reverse (1..5) ¬ª**¬ª 2

[22:36] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(25 16 9 4 1)‚ê§¬ª

[22:36] <lizmat> m: say 5 ... 1 >>**>> 2

[22:36] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(5 4 3 2 1)‚ê§¬ª

[22:36] *** reach_satori_ joined
[22:36] <timotimo> ohai lizmat :)

[22:36] <Xliff> lizmat: o/

[22:36] <lizmat> timotimo Xliff o/

[22:37] <lizmat> m: say (5 ... 1) >>**>> 2

[22:37] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(25 16 9 4 1)‚ê§¬ª

[22:37] <lizmat> m: say (5 ... 1 >>**>> 2)

[22:37] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(5 4 3 2 1)‚ê§¬ª

[22:37] <lizmat> hmmm

[22:37] <Xliff> theangryepicbanana: Where did you get `R` from?

[22:38] <timotimo> yeah "..." has very loose precedence

[22:38] <discord6> <theangryepicbanana> Xliff: found it somewhere

[22:38] <discord6> <theangryepicbanana> it's a meta operator

[22:38] <discord6> <theangryepicbanana> kinda like Z or X

[22:38] <lizmat> aahh... duh  :-)

[22:38] <lizmat> m: say 5 ... (1 >>**>> 2)

[22:38] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(5 4 3 2 1)‚ê§¬ª

[22:39] <lizmat> m: say (5 ... 2 >>**>> 2)

[22:39] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(5 4)‚ê§¬ª

[22:39] <cpan-p6> New module released to CPAN! LibXML (0.0.9) by 03WARRINGD

[22:40] <Xliff> m: say 4 R< 5

[22:40] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´False‚ê§¬ª

[22:40] *** cpan-p6 left
[22:40] <Xliff> m: say 4 R* 5

[22:40] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´20‚ê§¬ª

[22:40] <Xliff> LOL!

[22:40] <Xliff> m: say 4 R+ 5

[22:40] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´9‚ê§¬ª

[22:40] <discord6> <theangryepicbanana> very fun

[22:40] <discord6> <theangryepicbanana> R= also works

[22:40] *** cpan-p6 joined
[22:40] *** cpan-p6 left
[22:40] *** cpan-p6 joined
[22:41] <tobs> let's not forget

[22:41] <lizmat> afk&

[22:41] <tobs> m: say 4 RR+ 5

[22:41] <Xliff> Why isn't that documented?

[22:41] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´9‚ê§¬ª

[22:41] <tobs> Xliff: it is, on the operators page

[22:41] <tobs> with all the other meta and hyperoperators

[22:42] <Xliff> It's not on the sidebar

[22:42] <Xliff> Oh. It is, but not in the R form.

[22:42] <tobs> it's not indexed though

[22:42] <Xliff> "Reversed operators"

[22:44] <Xliff> m: say [R*] (1,2,3), (4, 5, 6)

[22:44] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´9‚ê§¬ª

[22:45] <Xliff> m: say [R*] [1, 2 ,3], [4, 5, 6]

[22:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´9‚ê§¬ª

[22:45] <xq> m: say 4 RRRR+ 5

[22:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´9‚ê§¬ª

[22:45] <Xliff> O_o

[22:45] <Xliff> m: say [R~] [1, 2 ,3], [4, 5, 6]

[22:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´4 5 61 2 3‚ê§¬ª

[22:45] <Xliff> m: say [RZ~] [1, 2 ,3], [4, 5, 6]

[22:45] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(41 52 63)‚ê§¬ª

[22:46] <Xliff> m: say [*] [1, 2 ,3], [4, 5, 6]

[22:46] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´9‚ê§¬ª

[22:46] <Xliff> m: say [*] [1, 2 ,3]

[22:46] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´6‚ê§¬ª

[22:47] <Xliff> m: say [*] [4, 5 ,6]

[22:47] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´120‚ê§¬ª

[22:49] *** satori__ joined
[22:51] *** reach_satori_ left
[22:52] *** kamog joined
[22:55] <tobs> I dunno, maybe nepugia had a point (or I'm reading too much into it): For some people there might be a difference between having all of their messages publicly logged by colabti vs. sent directly to discord. Should the topic include mention of the discord bridge? tyil, AlexDaniel, ops?

[22:55] <timotimo> would probably be good

[22:59] <Xliff> Matlab documentation sucks!

[23:08] *** Cabanoss- left
[23:10] *** Cabanossi joined
[23:28] *** mowcat left
[23:29] *** sena_kun left
[23:38] *** lel joined
[23:54] <Xliff> timotimo: Remember the discussion we had re: visualization

[23:55] <Xliff> Can you remember what packages we were talking about?

[23:59] *** reach_satori_ joined
[23:59] *** satori__ left
[23:59] *** thowe joined
