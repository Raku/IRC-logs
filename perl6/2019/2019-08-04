[00:00] *** reportable6 left
[00:01] *** Kaypie is now known as Kaiepi

[00:01] <squashable6> 🍕 tbrowder++ edited wiki page “Document file specification”: https://github.com/perl6/doc/wiki/Document-file-specification

[00:01] <squashable6> 🍕🍕🍕  First contribution by tbrowder++! ♥

[00:02] *** reportable6 joined
[00:04] <Kaiepi> i ran into an issue with some custom metamodel code i'm writing where trying to call a method on anything that uses it at runtime doesn't call the method once, it keeps calling it repeatedly until moarvm runs out of memory. does anyone have a general idea of what's going on here?

[00:05] *** dolmen left
[00:05] <timotimo> is it a meta method or a regular method? are you providing the method via find_method? is there anything with the method cache?

[00:08] *** Kaypie joined
[00:09] <Kaypie> this started happening after i changed it not to extend Metamodel::ParametricRoleHOW anymore, rather do the roles it does that the class needs and implementing everything else myself

[00:09] <timotimo> when you say "uses it at run time" does it work right at compile time?

[00:09] <Kaypie> i haven't checked

[00:09] <Kaypie> i can post the code if needed but it's like 300 lines

[00:09] *** Kaiepi left
[00:13] <Kaypie> timotimo, `BEGIN say <type>.gist` does the same thing

[00:15] <Kaypie> it also calls type_check on the meta class way more than i actually use the type in my code, but i'm not sure if that's a bug or just how it's supposed to work

[00:17] <Kaypie> actually wait it doesn't do the same thing, i'm not sure what it's doing but it still makes moarvm run out of memory before it tries to call the method

[00:18] <Kaypie> wait i was forgetting .new, it does do the same thing

[00:19] <timotimo> "run out of memory" is often endless recursion

[00:20] <timotimo> if you run perl6-gdb-m you can ctrl-c it at a random point, "up" however often needed to get to a frame that has a "tc"

[00:20] <timotimo> and then "call MVM_dump_backtrace(tc)"

[00:24] *** wildtrees left
[00:40] *** jaldhar left
[00:40] *** jaldhar joined
[00:43] <Kaypie> timotimo, i can't get any backtrace since it interrupted in the middle of a call to uv_cond_wait every time i tried it but it looks like an issue somewhere either in something that uses the ConcBlockingQueue REPR or the REPR itself

[00:43] <timotimo> may have to find the right thread to look at

[00:44] <timotimo> oh, disable the JIT, otherwise stack frames in gdb will appear totally messed up

[00:45] *** Garland_g[m] left
[00:46] <Kaypie> how do i find the right thread?

[00:48] *** jaldhar left
[00:48] *** lucasb left
[00:48] *** jaldhar joined
[00:56] *** TeamBlast joined
[00:58] *** jaldhar left
[00:58] *** jaldhar joined
[01:00] *** jaldhar left
[01:00] *** jaldhar joined
[01:02] <timotimo> just go through all of them

[01:02] <timotimo> "info threads", then "thread 1" and so on

[01:02] <timotimo> maybe "thread apply all bt"

[01:04] *** jaldhar left
[01:04] *** jaldhar joined
[01:08] *** squashable6 left
[01:11] *** squashable6 joined
[01:13] *** jaldhar left
[01:14] <timotimo> bedtime o/

[01:41] <Kaypie> aight, thanks for the help

[01:47] *** vrurg joined
[01:51] *** syb joined
[01:52] *** syb left
[01:55] *** Kaypie left
[01:55] *** Kaypie joined
[02:53] *** cpan-p6 left
[02:53] *** cpan-p6 joined
[02:53] *** cpan-p6 left
[02:53] *** cpan-p6 joined
[03:11] <Elronnd> I'm getting an error compiling perl6 on arch linux

[03:12] <Elronnd> I run this 3perl Configure.pl --backends=ALL --gen-moar --gen-nqp --prefix=$HOME/.perl6install0, and get this error http://ix.io/1Qy7

[03:35] <squashable6> 🍕 Altai-man++ submitted a review on pull request “Proofread several documents”: https://github.com/perl6/doc/pull/2936#pullrequestreview-270479436

[03:35] <squashable6> 🍕🍕🍕  First contribution by Altai-man++! ♥

[03:35] <squashable6> 🍕 Altai-man++ wrote a comment on a review for “Proofread several documents”: https://github.com/perl6/doc/pull/2936#discussion_r310368985

[03:50] *** jaldhar joined
[03:51] *** jaldhar left
[03:52] *** jaldhar joined
[03:52] *** jaldhar left
[03:53] *** jaldhar joined
[03:54] *** AlexDani` joined
[03:58] *** AlexDaniel left
[04:06] *** jaldhar left
[04:06] *** jaldhar joined
[04:08] *** jaldhar_ joined
[04:08] *** jaldhar left
[04:10] *** jaldhar_ left
[04:10] *** jaldhar_ joined
[04:12] *** molaf joined
[04:14] *** jaldhar_ left
[04:14] *** jaldhar_ joined
[04:18] *** jaldhar_ left
[04:18] *** jaldhar_ joined
[04:20] *** jaldhar_ left
[04:20] *** jaldhar_ joined
[04:21] *** sjm_uk joined
[04:30] *** jaldhar_ left
[04:30] *** jaldhar_ joined
[04:34] *** jaldhar_ left
[04:34] *** jaldhar_ joined
[04:36] *** jaldhar_ left
[04:36] *** jaldhar_ joined
[04:40] *** jaldhar_ left
[04:40] *** jaldhar_ joined
[04:44] *** jaldhar joined
[04:46] *** jaldhar_ left
[04:46] *** jaldhar left
[04:46] *** jaldhar joined
[04:52] *** jaldhar left
[04:52] *** jaldhar joined
[04:56] *** jaldhar left
[04:56] *** jaldhar joined
[05:04] *** jaldhar left
[05:04] *** jaldhar joined
[05:08] *** jaldhar left
[05:08] *** jaldhar joined
[05:10] *** jaldhar left
[05:10] *** jaldhar joined
[05:16] *** jaldhar left
[05:16] *** jaldhar joined
[05:20] *** jaldhar left
[05:20] *** jaldhar joined
[05:21] <cpan-p6> New module released to CPAN! Algorithm::NaiveBayes (0.0.4) by 03TITSUKI

[05:22] *** jaldhar left
[05:22] *** jaldhar joined
[05:23] <squashable6> 🍕 JJ++ submitted a review on pull request “Correct all methods' sig…”: https://github.com/perl6/doc/pull/2934#pullrequestreview-270481158

[05:23] <Geth> ¦ doc: 19fc625e58 | (Ben Davies)++ | doc/Type/Metamodel/EnumHOW.pod6

[05:23] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::EnumHOW

[05:23] <Geth> ¦ doc: Correct all methods' signatures in Metamodel::EnumHOW's page

[05:23] <Geth> ¦ doc: 

[05:23] <Geth> ¦ doc: None of its methods actually specify what type the object the method is

[05:23] <Geth> ¦ doc: called on must be.

[05:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/19fc625e58

[05:23] <Geth> ¦ doc: 6b7a514e5e | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Metamodel/EnumHOW.pod6

[05:23] <Geth> ¦ doc: Merge pull request #2934 from Kaiepi/squashathon

[05:23] <squashable6> 🍕 JJ++ merged pull request “Correct all methods' sig…”: https://github.com/perl6/doc/pull/2934

[05:23] <Geth> ¦ doc: 

[05:23] <Geth> ¦ doc: Correct all methods' signatures in Metamodel::EnumHOW's page

[05:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6b7a514e5e

[05:23] *** lizmat left
[05:36] *** jaldhar left
[05:36] *** jaldhar joined
[05:40] *** nepugia joined
[05:44] *** jaldhar left
[05:44] *** jaldhar joined
[05:48] *** jaldhar left
[05:48] *** jaldhar joined
[05:54] *** jaldhar left
[05:54] *** jaldhar joined
[05:56] *** squashable6 left
[05:58] *** squashable6 joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:03] *** ChanServ sets mode: +v reportable6

[06:04] *** jaldhar left
[06:04] *** jaldhar joined
[06:06] *** jaldhar left
[06:06] *** jaldhar joined
[06:08] *** jaldhar left
[06:08] *** jaldhar joined
[06:10] *** jaldhar left
[06:10] *** jaldhar joined
[06:12] *** jaldhar left
[06:12] *** jaldhar joined
[06:14] *** jaldhar left
[06:14] *** jaldhar joined
[06:18] *** jaldhar left
[06:18] *** jaldhar joined
[06:19] <MasterDuke> Elronnd: i think i've had the same error when trying to build the JS backend. does it work for you if you just specify moar and jvm?

[06:19] <Elronnd> MasterDuke: it does

[06:20] <MasterDuke> probably want to ping pmurias then

[06:22] *** jaldhar left
[06:22] *** jaldhar joined
[06:28] *** jaldhar left
[06:28] *** woolfy left
[06:28] *** jaldhar joined
[06:30] *** jaldhar left
[06:30] *** jaldhar joined
[06:32] *** jaldhar left
[06:32] *** jaldhar joined
[06:33] *** [particle]1 left
[06:34] *** jaldhar left
[06:34] *** jaldhar joined
[06:36] *** jaldhar left
[06:36] *** jaldhar joined
[06:38] *** jaldhar left
[06:38] *** jaldhar joined
[06:40] *** jaldhar left
[06:40] *** jaldhar joined
[06:41] <nine> camelia's build is failing with: /usr/bin/perl Configure.pl --prefix=/home/camelia/rakudo-m-inst-2 --make-install --git-protocol=https --backends=moar --gen-moar

[06:41] <nine> "read_config_from_command" is not exported by the NQP::Config module

[06:41] <nine> Can't continue after import errors at /home/camelia/rakudo-m-2/nqp/tools/lib/NQP/Config/NQP.pm line 8.

[06:42] <nine> vrurg: ^^^

[06:44] *** jaldhar left
[06:44] *** jaldhar joined
[06:46] *** marcel_ joined
[06:48] *** jaldhar left
[06:48] *** jaldhar joined
[06:52] *** jaldhar left
[06:52] *** jaldhar joined
[06:54] *** rindolf joined
[06:56] *** jaldhar left
[06:56] *** jaldhar joined
[06:58] *** jaldhar left
[06:58] *** jaldhar joined
[07:00] *** jaldhar left
[07:00] *** jaldhar joined
[07:08] *** jaldhar left
[07:08] *** jaldhar joined
[07:09] *** chloekek joined
[07:10] *** jaldhar left
[07:10] *** jaldhar joined
[07:12] *** jaldhar left
[07:12] *** jaldhar joined
[07:13] *** holyghost left
[07:16] *** jaldhar left
[07:16] *** jaldhar joined
[07:18] *** jaldhar left
[07:18] *** jaldhar joined
[07:20] *** jaldhar left
[07:20] *** jaldhar joined
[07:22] *** jaldhar left
[07:22] *** jaldhar joined
[07:24] *** jaldhar left
[07:24] *** jaldhar joined
[07:28] *** jaldhar left
[07:34] *** nepugia left
[07:37] *** MasterDuke left
[07:41] *** ayerhart_ left
[07:42] *** ayerhart joined
[08:09] *** marcel_ left
[08:48] *** marcel_ joined
[08:59] *** pecastro joined
[09:07] *** AlexDani` is now known as AlexDaniel

[09:07] *** AlexDaniel left
[09:07] *** AlexDaniel joined
[09:11] *** sjm_uk left
[09:12] *** Black_Ribbon left
[09:14] *** antoniogamiz joined
[09:30] <AlexDaniel> squashable6: status

[09:30] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈2 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:30] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/2e30e5934af0696c3ffbdbab2e993aa1

[09:30] *** sjm_uk joined
[09:32] *** marcel_ left
[09:56] *** Doc_Holliwood joined
[10:00] <Doc_Holliwood> I'm confused about the latest SoPW on Perlmonks. There is syntax like "my $a = &#948;t" but that's not valid Perl6, is it?

[10:00] <Doc_Holliwood> Maybe a C&P fragment?

[10:00] <Doc_Holliwood> https://www.perlmonks.org/?parent=11103847;node_id=3333

[10:03] <Doc_Holliwood> meh. corrected link: https://www.perlmonks.org/?node_id=11103847

[10:05] <chloekek> p6: my $a = &#948;t

[10:05] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[10:06] <AlexDaniel> m: say &

[10:06] <chloekek> #948;t is a comment and & is a subroutine.

[10:06] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Callable)␤»

[10:06] *** cygx joined
[10:06] <AlexDaniel> what's &#948; though

[10:06] <chloekek> & is a state variable like $ and @ and %

[10:07] <chloekek> AlexDaniel: it's a combining character

[10:07] <chloekek> No, I'm a fool. That's decimal.

[10:07] <AlexDaniel> is it Δ ?

[10:07] <cygx> Doc_Holliwood: that's a HTML entity, encoding the Greek letter delta

[10:08] <cygx> AlexDaniel: no, a small delta

[10:08] <chloekek> So that makes sense, my $a = δt

[10:09] <AlexDaniel> it's defined a bit earlier: return -> \t, \y, δt {

[10:09] <AlexDaniel>  

[10:09] <chloekek> Probably someone escaped it before posting it to PerlMonks, and then PerlMonks escaped it again.

[10:09] <Doc_Holliwood> PM has some problems with Unicode methinks

[10:09] <chloekek> Rewrite it in Perl 6.

[10:09] <AlexDaniel> Doc_Holliwood: so yeah, that code snippet just had a little bit of unicode :)

[10:11] <AlexDaniel> e: https://gist.github.com/AlexDaniel/c05920c1acf4adb7a9030f643b1edabf

[10:11] <evalable6> AlexDaniel, rakudo-moar bc45af3b8: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /home/bisectable/git/wh…»

[10:12] <evalable6> AlexDaniel, Full output: https://gist.github.com/f124456ac6ff53754a10fcb03ed068ae

[10:12] <AlexDaniel> e: https://gist.github.com/AlexDaniel/c05920c1acf4adb7a9030f643b1edabf

[10:12] <evalable6> AlexDaniel, rakudo-moar bc45af3b8: OUTPUT: «t = 0.00 : +0.000e+00 +0.000e+00 +0.000e+00 +1.500e+11 +0.000e+00 +0.000e+00 +1.497e+11 +0…»

[10:12] <evalable6> AlexDaniel, Full output: https://gist.github.com/56b1a1a80e606cbc1b5be24da7288f7c

[10:12] <AlexDaniel> I guess that's the right output?

[10:18] <cygx> You'd have to plot it to check that it makes sense

[10:19] <cygx> I have yet to set up my phone to be able to do that ;)

[10:20] <AlexDaniel> actually evalable should probably learn to do that

[10:21] <AlexDaniel> https://github.com/perl6/whateverable/issues/352

[10:27] <Doc_Holliwood> perl6: (1..2 X* 3..4).say

[10:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(3 4 6 8)␤»

[10:27] <camelia> ..rakudo-jvm 08b449e1a: ( no output )

[10:27] <Doc_Holliwood> perl6: (1..2 X 3..4).say

[10:27] <camelia> rakudo-jvm 08b449e1a: OUTPUT: «␤(timeout)␤»

[10:27] <camelia> ..rakudo-moar ecf2b1e4f: OUTPUT: «((1 3) (1 4) (2 3) (2 4))␤»

[10:28] <Doc_Holliwood> neat. it takes the cross product and applies the operator 

[10:30] <squashable6> 🍕 AlexDaniel++ edited issue “Proofread documentation …”: https://github.com/perl6/doc/issues/2924

[10:32] <Doc_Holliwood> multi infix:<°>($a, $b) { ($a+$b+65).chr  }; (1..2 X° 3..4).say

[10:32] <evalable6> Doc_Holliwood, rakudo-moar bc45af3b8: OUTPUT: «(E F F G)␤»

[10:33] *** veesh1 joined
[10:34] <Doc_Holliwood> Such a wonderful language. Shame nobody is pouring a few million dollars onto it

[10:34] <Geth> ¦ doc: 6995071999 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/containers.pod6

[10:34] <synopsebot> Link: https://doc.perl6.org/language/containers

[10:34] <Geth> ¦ doc: Remove unnecessary word

[10:34] <Geth> ¦ doc: 

[10:34] <Geth> ¦ doc: @Altai-man++

[10:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6995071999

[10:34] <squashable6> 🍕 AlexDaniel++ submitted a review on pull request “Proofread several documents”: https://github.com/perl6/doc/pull/2936#pullrequestreview-270491216

[10:34] <squashable6> 🍕 AlexDaniel++ wrote a comment on a review for “Proofread several documents”: https://github.com/perl6/doc/pull/2936#discussion_r310381027

[10:36] <AlexDaniel> Doc_Holliwood: yeah, but honestly we get enough code contributions regularly

[10:37] <AlexDaniel> Doc_Holliwood: and the development pace of rakudo is quite crazy in the last few months

[10:38] <Doc_Holliwood> You would not have to be involved honestly. I'd be just as happy if Google came along with their own project that compiles P6 to Rust

[10:39] <Doc_Holliwood> I mean, that's why we have the spec, right? 

[10:39] <AlexDaniel> yeah, everyone is free to implement their own perl 6 compiler, that's right :)

[10:40] <AlexDaniel> or transpiler, or whatever you want :)

[10:41] <chloekek> It seems like Pod::Load can't cope with unit modules.

[10:42] <chloekek> Oh, it greps for =begin pod and =end pod.

[10:42] <antoniogamiz> chloekek: raise an issue!

[10:43] <antoniogamiz> that module was made to work with the documentation pod file

[10:43] <antoniogamiz> s

[10:43] <chloekek> Yeah, not with normal source files.

[10:44] <chloekek> Pod::To::HTML can cope with such files if invoked with perl6 --doc=HTML, but then you can't specify a custom template.

[10:45] <chloekek> So I'll have to patch that.

[10:54] <Geth> ¦ doc: 48de16184b | Antonio++ | 3 files

[10:54] <Geth> ¦ doc: move output blocks inside pod section

[10:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/48de16184b

[10:56] <AlexDaniel> squashable6: status

[10:56] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈1 hour. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:56] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/f26ff69bf76ee264103c611b70a2cb1f

[11:04] <Geth> ¦ doc: 5955a99402 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/unicode_ascii.pod6

[11:04] <synopsebot> Link: https://doc.perl6.org/language/unicode_ascii

[11:04] <Geth> ¦ doc: Proofreading: unicode_ascii.pod6

[11:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5955a99402

[11:05] <squashable6> 🍕 AlexDaniel++ edited issue “Proofread documentation …”: https://github.com/perl6/doc/issues/2924

[11:06] <squashable6> 🍕 AlexDaniel++ edited issue “Proofread documentation …”: https://github.com/perl6/doc/issues/2924

[11:06] *** antoniogamiz left
[11:09] *** squashable6 left
[11:11] *** squashable6 joined
[11:11] *** ChanServ sets mode: +v squashable6

[11:13] <Geth> ¦ doc: 9468f59044 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/nativetypes.pod6

[11:13] <synopsebot> Link: https://doc.perl6.org/language/nativetypes

[11:13] <Geth> ¦ doc: Simplify the table by not mentioning char/short/etc

[11:13] <Geth> ¦ doc: 

[11:13] <Geth> ¦ doc: Not only it makes the table easier to understand, it is actually more

[11:13] <Geth> ¦ doc: correct given that `int` can be of different size depending on

[11:13] <Geth> ¦ doc: architecture and compiler.

[11:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9468f59044

[11:16] <Geth> ¦ doc: 770a850947 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/nativetypes.pod6

[11:16] <synopsebot> Link: https://doc.perl6.org/language/nativetypes

[11:16] <Geth> ¦ doc: Remove unnecessary space

[11:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/770a850947

[11:17] <squashable6> 🍕 AlexDaniel++ edited issue “Proofread documentation …”: https://github.com/perl6/doc/issues/2924

[11:17] *** veesh1 left
[11:30] *** veesh1 joined
[11:42] *** marcel_ joined
[11:43] *** MasterDuke joined
[12:00] *** reportable6 left
[12:01] *** gdonald joined
[12:02] *** reportable6 joined
[12:07] *** abraxxa joined
[12:17] *** cygx left
[12:20] *** Manifest0 joined
[12:38] *** abraxxa left
[13:05] *** daxim joined
[13:27] *** squashable6 left
[13:29] *** squashable6 joined
[13:29] *** ChanServ sets mode: +v squashable6

[13:57] *** nepugia joined
[14:00] *** john_parr left
[14:11] *** Xliff joined
[14:11] <Xliff> \o

[14:12] <Xliff> m: my $S = Supplier.new; my $s = $s.Supply; $s.tap({ once { say "Hi!" }; say "Boo!" }); $s.emit for ^3;

[14:12] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $s in declaration to initialize itself␤at <tmp>:1␤------> 3my $S = Supplier.new; my $s = $7⏏5s.Supply; $s.tap({ once { say "Hi!" }; s␤    expecting any of:␤        term␤»

[14:12] <Xliff> m: my $S = Supplier.new; my $s = $S.Supply; $s.tap({ once { say "Hi!" }; say "Boo!" }); $s.emit for ^3;

[14:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «emit without supply or react␤  in block <unit> at <tmp> line 1␤␤»

[14:13] <Xliff> m: my $S = Supplier.new; my $s = $S.Supply; $s.tap({ once { say "Hi!" }; say "Boo!" }); $s.emit($s) for ^3;

[14:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[14:13] <Xliff> m: my $S = Supplier.new; my $s = $S.Supply; $s.tap({ once { say "Hi!" }; say "Boo!" }); $s.emit([$s]) for ^3;

[14:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[14:13] <Xliff> m: my $S = Supplier.new; my $s = $S.Supply; $s.tap(-> *@a { once { say "Hi!" }; say "Boo!" }); $s.emit([$s]) for ^3;

[14:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[14:14] *** dolmen joined
[14:14] <Xliff> m: my $S = Supplier.new; my $s = $S.Supply; $s.tap({ once { say "Hi!" }; say "Boo!" }); $S.emit([$s]) for ^3;

[14:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Hi!␤Boo!␤Boo!␤Boo!␤»

[14:14] <Xliff> \o/

[14:15] *** niceplace joined
[14:17] *** niceplace left
[14:17] *** veesh1 left
[14:18] *** niceplace joined
[14:20] *** niceplace left
[14:20] *** niceplace joined
[14:21] *** niceplace left
[14:21] *** niceplace joined
[14:21] *** niceplace left
[14:21] *** niceplace joined
[14:26] <timotimo> m: my $S = Supplier.new; my $s = $S.Supply; $s.once.tap({ say "oh my" }); $s.tap({ say "boo!" }); $S.emit(1) for ^3;

[14:26] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'once' for invocant of type 'Supply'. Did you mean any of these?␤    none␤    one␤␤  in block <unit> at <tmp> line 1␤␤»

[14:26] <timotimo> m: my $S = Supplier.new; my $s = $S.Supply; $s.first.tap({ say "oh my" }); $s.tap({ say "boo!" }); $S.emit(1) for ^3;

[14:26] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «oh my␤boo!␤boo!␤boo!␤»

[14:36] *** lucasb joined
[14:38] *** andrzejku joined
[14:55] *** MilkmanDan left
[14:58] *** MilkmanDan joined
[14:59] <chloekek> p6: split(/\s+ <:Pd> \s+/, "Foo::Bar $_ Foo the bars", 2).say for < - ‐ ‑ – — 〜 ⸻  >

[14:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Foo::Bar Foo the bars)␤(Foo::Bar Foo the bars)␤(Foo::Bar Foo the bars)␤(Foo::Bar Foo the bars)␤(Foo::Bar Foo the bars)␤(Foo::Bar Foo the bars)␤(Foo::Bar Foo the bars)␤»

[14:59] <chloekek> Exactly what I need for parsing NAME sections in PODs.

[15:07] *** squashable6 left
[15:11] *** [particle] joined
[15:12] *** squashable6 joined
[15:18] *** marcel_ left
[15:20] *** lgtaube joined
[15:32] *** pilne left
[15:35] *** pilne joined
[15:40] *** echoprinter joined
[15:46] *** Sgeo left
[15:47] *** camelCaser joined
[15:49] *** Sgeo joined
[15:54] *** molaf left
[15:56] *** andrzejku left
[16:01] *** ajs35 joined
[16:04] *** empee0 joined
[16:05] *** andrzejku joined
[16:12] *** daxim left
[16:18] *** daxim joined
[16:20] *** andrzejku left
[16:29] *** uzl joined
[16:29] *** niceplace left
[16:30] <uzl> .seen jmerelo

[16:35] *** antoniogamiz joined
[16:38] *** pmurias joined
[16:40] <pmurias> timotimo: re binding a game engine, I think that would be the most practical way to get a performant game in Perl 6

[16:40] <timotimo> yeah

[16:44] <uzl> Can somebody explain this => https://docs.perl6.org/language/glossary#diffy ? ;-)

[16:46] <timotimo> m: my $foo = 1; $foo ..= 5; say $foo

[16:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot make assignment out of .. because structural infix operators are too diffy␤at <tmp>:1␤------> 3my $foo = 1; $foo ..=7⏏5 5; say $foo␤»

[16:47] <timotimo> m: my $bar = 0; $bar cmp= 99

[16:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot make assignment out of cmp because structural infix operators are too diffy␤at <tmp>:1␤------> 3my $bar = 0; $bar cmp=7⏏5 99␤»

[16:47] <timotimo> m: my $bloop = "hi"; $bloop (elem)= set "a", "b", "c"

[16:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot make assignment out of (elem) because chaining operators are too diffy␤at <tmp>:1␤------> 3my $bloop = "hi"; $bloop (elem)=7⏏5 set "a", "b", "c"␤»

[16:48] <timotimo> uzl: here's some examples

[16:50] *** dolmen left
[16:50] *** sena_kun joined
[16:52] *** [Sno] joined
[16:53] <uzl> m: (2 cmp 3).^name.say

[16:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Order␤»

[16:55] <uzl> I think I get it. So the type of the operator (e.g, cmp) result (e.g, Order) is so different to its arguments (integers in this case) that it makes little to no sense to perform the op= operation.

[16:56] <timotimo> right

[16:57] <antoniogamiz> :tag element at =begin pod is currently used for something?

[16:57] <uzl> timotimo: Thanks for the examples. I was like what? It'd be great to have some examples illustrating ;-).

[16:58] <uzl> So is diffy a shortening of different?

[16:58] <timotimo> if you're wondering how i found them, i grepped "diffy" in the rakudo source code, it was mentioned in the Grammar (which i expected) and there's two "kinds" of operators that have the diffy bit set; %structural and %chaining

[16:58] <timotimo> and just searching for mentions of %structural and %chaining gives you a bunch of ops that behave like that

[17:01] *** ajs35 left
[17:01] *** sjm_uk left
[17:05] *** sena_kun left
[17:05] *** sena_kun joined
[17:06] <chloekek> My web app can now search modules and display their rendered POD :D

[17:06] <timotimo> cool

[17:06] <pmurias> timotimo: is this https://bitbucket.org/gtkshooter/p6-gtk-shooter/src/master/snippets/spaceship.p6 supposed to have the cool pilot cabin like on the livecoding video?

[17:06] <timotimo> i might not yet have put it in, actually

[17:06] <timotimo> yeah, it doesn't have that yet

[17:07] <timotimo> https://bitbucket.org/gtkshooter/p6-gtk-shooter/src/cursor_display_interaction/snippets/spaceship.p6

[17:07] <timotimo> this should have it

[17:07] <antoniogamiz> cholekek: link please? :D

[17:09] <pmurias> timotimo: I'm first translating the code the js using the canvas and was wondering why my spaceship didn't end up nearly as cool ;)

[17:09] <chloekek> antoniogamiz: I don't have it hosted anywhere but the source code is here: https://github.com/chloekek/cp6t/tree/master/p6al Building the database requires Nix and patience, but I want to do that in CI later.

[17:09] <timotimo> it's not that much cooler with the cabin in it tho :P

[17:09] <timotimo> i'm hoping to add some lighting effects

[17:10] *** harmil joined
[17:10] *** andrzejku joined
[17:10] <timotimo> it'd be great to have like a set of masks for different "directions" and whenever the ship turns or a light source is nearby, the masks could individually have light values calculated based on normals

[17:10] <timotimo> i.e. the simplest lighting you can come up with in, say, an opengl scene

[17:10] <antoniogamiz> ty

[17:10] *** MilkmanDan left
[17:11] <harmil> What is the most up-to-date source of info on writing slangs?

[17:11] *** MilkmanDan joined
[17:16] *** sena_kun left
[17:16] <timotimo> harmil: i'd probably cargo-cult stuff from the different slangs we have; Tuxic is in active use, so it's kept working with newest rakudo releases and such

[17:17] *** sena_kun joined
[17:17] *** sena_kun left
[17:19] <harmil> timotimo: thanks

[17:21] <harmil> second question: is there a way to ask an operator for its associativity? I had assumed &infix:<+>.assoc would be something like 'left' but there's no such method.

[17:22] <timotimo> m: say &infix:<+>.prec.perl

[17:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «{:assoc("left"), :prec("t=")}␤»

[17:22] <timotimo> it's hidden inside the precedence attribute

[17:22] <harmil> Thanks again!

[17:22] <timotimo> NP

[17:24] *** echoprinter left
[17:26] <harmil> Oh good, "sub infix:<foo>($a, $b) is assoc(&infix:<+>.prec<assoc>) {...}" just works.

[17:28] <antoniogamiz> is there a way to modify the first line of a file without having to rewrite the entire file?

[17:28] <timotimo> only if the file ends up the same size afterwards

[17:29] <timotimo> i.e. if your stuff is shorter post-rewrite, you can fill it up with whitespace or so

[17:29] <antoniogamiz> mmm

[17:29] <antoniogamiz> I will have to rewrite it then 

[17:29] <antoniogamiz> ty

[17:38] <rba> timotimo: did you do the fine-tuning for the temp hosting of rakudo.org?

[17:38] <timotimo> what is fine-tuning? :)

[17:38] <timotimo> i'll gist you the /etc/nginx/sites-enabled/rakudoorg

[17:38] <rba> There are a lot of rewrite rules in the apache config.

[17:39] <rba> great.

[17:39] <timotimo> https://gist.github.com/timo/3c8f6f7ad0f66e6ebfed2ce118afd35e - we have only these active

[17:39] <rba> I have all the rakudo/nqp releases ready for the download dir. Do we still like rakudostar.com?

[17:40] <timotimo> not sure

[17:41] <rba> I will setup everything temporary on rakudo.p6c.org and then we can have a look, wha'ts missing or need to be changed...

[17:43] *** uzl left
[17:48] *** sjm_uk joined
[17:53] <chloekek> antoniogamiz: I'll see if I can set up hosting later, but I have to figure out licensing issues first, since it'll display documentation from third parties.

[17:53] <antoniogamiz> chloekek: oh right

[17:53] <antoniogamiz> are you going to highlight the code in the html output?

[17:54] <chloekek> Syntax highlighting of code inside POD isn't implemented yet, and displaying source code of a comp unit isn't either.

[17:55] <antoniogamiz> ah ok, I would recommend you to take a look at Text::VimColour

[17:55] <chloekek> Thanks, I will.

[17:56] <chloekek> Hmm, Vim as a build dependency. No problem.

[17:58] <chloekek> I thought of using Pygments first but I don't know how well that works with Perl 6 input.

[17:58] <antoniogamiz> highlighters are quite hard for perl and perl6

[17:59] <antoniogamiz> in the docs we use perl6-atom-language

[17:59] <antoniogamiz> but it needs node and more additional setup

[17:59] <chloekek> Yeah, I use perl6-atom-language fork for VS Code in my editor, and it sometimes chokes on <!before ...> :)

[17:59] <chloekek> Dependencies aren't an issue for me as long as they're in Nixpkgs.

[18:00] *** reportable6 left
[18:00] <rba> So, temp rakudo.p6c.org on new server is ready. 

[18:00] <timotimo> node_modules oh my

[18:01] <chloekek> E.g. https://i.imgur.com/E6BJjY3.png

[18:01] <antoniogamiz> ah good then :)

[18:01] <chloekek> Oh yeah the use of npm is a security vulnerability, can't do that.

[18:02] *** reportable6 joined
[18:02] *** ChanServ sets mode: +v reportable6

[18:04] <chloekek> antoniogamiz: I suppose I also have to patch Pod::To::HTML if I want to add syntax highlighting support? Or does docs.perl6.org also use that?

[18:05] <antoniogamiz> you can use a dynamic variable called %*POD2HTML-CALLBACKS

[18:05] <chloekek> Oh sick.

[18:05] <antoniogamiz> https://github.com/perl6/doc/blob/770a850947ec44ddbe4e0752a6874e7936804cf9/htmlify.p6#L1050

[18:05] <antoniogamiz> that's how is done in the docs

[18:05] <antoniogamiz> but it uses coffe script too

[18:06] <antoniogamiz> with Text::Colour is easier

[18:06] <chloekek> Ah yeah cool I see it.

[18:06] <antoniogamiz> see => https://github.com/perl6/perl6-examples/blob/35fb254c17ae53ac43c122a1bd134b9332479c9b/lib/Pod/Htmlify.pm6#L192

[18:07] <chloekek> I'll see how well it goes. Currently I generate build scripts for each library, and those build the docs, which means I can't build docs for Pod::To::HTML and its dependencies. :( Have to figure out a way to break that cycle.

[18:07] <chloekek> Probably by making docs building a separate step.

[18:09] <antoniogamiz> mmm yep, make it a separate setp makes sense

[18:11] <chloekek> Or I could manage the dependencies of Pod::To::HTML separately, that's a little easier.

[18:11] <chloekek> Add a flag to the build script generator indicating whether it should include code to generate the docs.

[18:12] <chloekek> That ultimately causes them to be built twice: once without docs and once with docs.

[18:13] <antoniogamiz> mmm I do not know, I'm a bit lost sorry haha

[18:14] <chloekek> That's fine, I was rubber duck debugging.

[18:18] <antoniogamiz> someone here is going to record the TPCIR?

[18:18] *** nepugia left
[18:19] <rba> .tell hankache I will revert the changes on https://github.com/perl6/rakudo.org to use local dir and not rakudostar.com any more.

[18:19] <rba> tell hankache I will revert the changes on https://github.com/perl6/rakudo.org to use local dir and not rakudostar.com any more.

[18:20] <rba> where is yoleaux ?

[18:21] *** pamplemousse joined
[18:21] <chloekek> yoleaux is dead.

[18:21] <chloekek> https://colabti.org/irclogger/irclogger_log/perl6?date=2019-07-29#l367

[18:21] <rba> just realised: https://colabti.org/irclogger/irclogger_log/perl6?date=2019-07-29#l371

[18:22] <AlexDaniel> rba: I have a replacement for it

[18:22] <rba> AlexDaniel: Cool.

[18:22] <AlexDaniel> it was up yesterday until I realized that the db dump I received wasn't full enough, that was quickly fixed and now I should just replace the file and run the bot

[18:23] <AlexDaniel> so should be up really soon, unless I keep getting distracted with fun stuff like the squashathon and other things :)

[18:23] <chloekek> If yoleaux ever comes back the name is a lie.

[18:25] <timotimo> "i've not been dead! that was but a flesh wound!"

[18:26] <antoniogamiz> how can i check is something is a role?

[18:26] <timotimo> check what .HOW it has

[18:27] <AlexDaniel> .tell uzl re fiddly/diffy/iffy, these words are never used in the docs and honestly never used anywhere, but they do appear in error messages. I think it's fun to come up with cute names for things but it makes life harder for other people in the end. So if you have a decent more explicit replacement for these I'd be happy to see the terms removed from the glossary and error messages tweaked accordingly.

[18:27] <AlexDaniel> ahhhhhh shoot

[18:27] <antoniogamiz> x'd

[18:27] <antoniogamiz> timotine:  see:

[18:27] <antoniogamiz> m: CX::Warn.HOW

[18:27] <AlexDaniel> and of course right after discussing yoleaux I forgot that .tell doesn't work xD

[18:27] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[18:27] <timotimo> m: say CX::Warn.HOW

[18:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»

[18:28] <antoniogamiz> then is a class?

[18:28] <timotimo> oh, does calling .HOW immediately pun the class?

[18:28] <antoniogamiz> idk

[18:29] <timotimo> i'm sure someone else will be able to help with that

[18:29] <timotimo> i think i need a short nap

[18:29] <antoniogamiz> good dreams :D

[18:33] <vrurg> nine: ping

[18:36] *** Kaypie is now known as Kaiepi

[18:36] *** pamplemousse left
[18:45] <Harzilein> a

[18:45] <Geth> ¦ doc/master: 6 commits pushed by Antonio++

[18:45] <Geth> ¦ doc/master: cc571edf81 | adds beginning section #2935

[18:45] <Geth> ¦ doc/master: 4bb14d625e | adds metadata for all Language files #2935

[18:45] <Geth> ¦ doc/master: 5b097bdedf | adds metadata to Native #2935

[18:45] <Geth> ¦ doc/master: 13de664468 | adds metadata to programs #2935

[18:45] <Geth> ¦ doc/master: f916c02d44 | adds metadata to Type files, close #2935

[18:45] <Geth> ¦ doc/master: b670785d4f | fix pod file extension

[18:45] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/770a850947ec...b670785d4f91

[18:46] <harmil> I kept writing things like: $x.defined ?? $x ~ " " !! "" -- so I thought this would be a nice place for a metaoperator, e.g. $x ///~ " " where /// is the meta-operator for definedness and so ///~ is "concatenate if defined". So I started writing a slang, but it turns out that would mean redefining infixish from Actions and that in turn relies on LO

[18:46] <harmil> TS of other stuff from Actions. Is there a simpler way to add an infix_prefix_meta_operator other than modifying rakudo directly?

[18:49] *** sjm_uk left
[18:49] *** pmurias left
[18:49] <AlexDaniel> harmil: it does seem to be a pain point indeed. In whateverable I recently added this: https://github.com/perl6/whateverable/blob/17fb275cc29dc0be461d048858ed8f6f3cad7a43/lib/Whateverable/Bits.pm6#L47

[18:50] <AlexDaniel> example on how it's used: https://github.com/perl6/whateverable/blob/17fb275cc29dc0be461d048858ed8f6f3cad7a43/xbin/Tellable.p6#L95

[18:52] *** uzl joined
[18:52] <APic> Harzilein: b

[18:52] <AlexDaniel> uzl: re fiddly/diffy/iffy, these words are never used in the docs and honestly never used anywhere, but they do appear in error messages. I think it's fun to come up with cute names for things but it makes life harder for other people in the end. So if you have a decent more explicit replacement for these I'd be happy to see the terms removed from the glossary and error messages tweaked accordingly.

[18:54] *** Doc_Holliwood left
[18:58] *** marcel_ joined
[19:01] *** antoniogamiz left
[19:07] <uzl> AlexDaniel: They're used in the Rakudo source code. If it wasn't for timotimo (https://colabti.org/irclogger/irclogger_log/perl6?date=2019-08-04#l428), I'd have never figured it out. It seems it's part of the Perl culture to give things cute names but it can be confusing sometimes. However, after timotimo provided some examples I think got the gist of their meaning (well, at least for diffy). Thus if they're not removed from the glossary, a few 

[19:07] <uzl> examples could clarify them.

[19:07] <AlexDaniel> in my opinion, it's the shitty part

[19:08] <AlexDaniel> and we should be working to fix that, which is why I think a PR fixing the error message is a good start for this particular case

[19:08] *** marcel_ left
[19:09] *** quester joined
[19:16] <Kaiepi> m: grammar ExcitedAgreement { token TOP { '^ ' <agreement> <.ws> {} <yelled-agreement: ~$<agreement>> }; token agreement { "this" }; token yelled-agreement($agreement) { <{ $agreement.uc }> } }; say ExcitedAgreement.parse: '^ this THIS'

[19:16] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢^ this THIS｣␤ agreement => ｢this｣␤ yelled-agreement => ｢THIS｣␤»

[19:18] <Kaiepi> sweet

[19:20] *** pamplemousse joined
[19:23] <Kaiepi> m: grammar Foo { token TOP { <{ self.foo: "foo" }> }; token foo($foo) { $foo } }; say Foo.parse: 'foo';

[19:23] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «｢foo｣␤»

[19:24] *** marcel_ joined
[19:25] *** pamplemousse left
[19:25] *** pamplemousse joined
[19:30] *** molaf joined
[19:34] *** pecastro left
[19:35] *** andrzejku left
[19:35] <uzl> Should the "use keyword" link point to "/language/modules#index-entry-use" instead of "/language/5to6-nutshell#index-entry-import"?

[19:35] <uzl> What I'm referring to: https://docs.perl6.org/language/glossary#iffy

[19:36] <AlexDaniel> uzl: yes definitely not to the 5to6 docs

[19:36] <uzl> OK

[19:40] *** pecastro joined
[20:01] *** pmurias joined
[20:04] *** andrzejku joined
[20:09] *** dolmen joined
[20:15] <uzl> In " ... classes are objects too, which inherit from the ur-class which, in our case, is Mu.", what's "ur-class"?

[20:15] *** molaf left
[20:17] *** pamplemousse left
[20:20] *** pamplemousse joined
[20:24] <AlexDaniel> uzl: O_o

[20:25] *** chloekek left
[20:25] <AlexDaniel> uzl: you're really brave for proofreading the glossary

[20:25] <uzl> AlexDaniel: It's from here: https://docs.perl6.org/language/glossary#Type_objects

[20:25] <AlexDaniel> yeah I see that

[20:26] <uzl> I'm inclined to believe it might a typo?!

[20:26] <uzl> * might be ...

[20:26] <tobs> I don't think so

[20:26] <AlexDaniel> uzl: I think it means something

[20:27] <AlexDaniel> you should remove it from that sentence for sure, but it was put there intentionally :)

[20:27] <tobs> I believe it's a non-technical term the documenter made up, but the prefix ur- exists in German for example. It could be understood like pre-, I'd say.

[20:28] <MasterDuke> prefix ur exists in english too

[20:29] <uzl> Probably the root class? That's what Mu is in the class hierarchy.

[20:29] <MasterDuke> e.g., from dictionary.com: a combining form meaning “earliest, original,” used in words denoting the primal stage of a historical or cultural entity or phenomenon: ur-civilization; urtext.

[20:31] <AlexDaniel> uzl: “Classes are objects too, and they inherit from Mu.” Something simple like that should work, probably

[20:31] <uzl> MasterDuke: The more one knows. Never heard of it before ;-)

[20:31] <AlexDaniel> the way things are named drives me mad

[20:32] <AlexDaniel> like, Mu?

[20:32] <AlexDaniel> there must have been a better name for that…

[20:32] <uzl> AlexDaniel: I'll go with that then.

[20:33] <tobs> AlexDaniel: maybe UrClass? :)

[20:34] <uzl> AlexDaniel: Mu has quite the transcendental meaning ;-), https://en.wikipedia.org/wiki/Mu_(negative)

[20:40] *** [particle]1 joined
[20:41] *** [particle] left
[20:44] *** irced joined
[20:45] *** marcel_ left
[20:47] *** ayerhart left
[20:48] <irced> hi, i'm trying to give a nested class access to the parent classes private variables. i've looked at this a few ways including passing self into the nested class but without success. any suggestions?

[20:48] <irced> i guess i could methodize the private variable

[20:49] <irced> but any suggestions that maybe wouldn't require passing self into the nested class in the first place maybe?

[20:50] <irced> exposing private variables seems to defeat the purpose a bit

[20:50] *** nepugia joined
[20:50] <irced> a bit not much

[20:51] <irced> just that methodizing the private variable means exposure to non nested classes

[20:58] *** lizmat joined
[20:58] <tobs> irced: by nested class you lexically nested, like `class A { ... class B {} }`? In that case, you are just creating two independent classes A and A::B. The instances of those classes are not nested and neither has a special kind of access to the data of the other. In particular A.new does not create an instance of B. It's really just the class *declaration* that is nested.

[20:58] <irced> tobs: thanks for that point. right class A { class B {} } or class A { my class B {} }

[20:59] *** pmurias left
[20:59] <lizmat> please note that classes are by default "our"

[20:59] <lizmat> m: class A { class B { } }; dd A::B.new   # this works

[20:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «A::B.new␤»

[21:00] *** pmurias joined
[21:00] <lizmat> m: class A { my class B { } }; dd A::B.new   # a lexical class is only visible inside the scope

[21:00] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Could not find symbol '&B'␤  in block <unit> at <tmp> line 1␤␤»

[21:00] <lizmat> ah, I guess I missed part of that conversation :-)

[21:00] <irced> lizmat: thanks for that finer point. i only need the class from within

[21:01] <tobs> lizmat: appreciate the point nevertheless

[21:02] <tobs> still, nesting the declaration of class B into class A doesn't give instances of B access to privates of instances of A (right?)

[21:03] <irced> tobs: that's the issue. but i can pass in a reference to self and also define the accessor/mutator for the private variable. but this workaround exposes the private variable to other objects

[21:06] <irced> maybe there is something equivalent to c++ friend ? I think that might work.

[21:06] <tobs> yes, that is exactly what I was searching for :)

[21:06] <irced> might being the operative word, since private variables are really tightly scoped

[21:07] <irced> in the syntax it seems.

[21:07] <irced> still it would require passing a reference to self but at least it would minimize exposure

[21:10] <irced> i haven't tried a private method in the nested class, who knows, trying now

[21:11] <lizmat> private methods won't work

[21:11] <lizmat> subs would work, though: normal lexical scoping rules apply

[21:12] <irced> lizmat: confirmed, private methods are not granted to the nested class.

[21:12] <irced> lizmat: ok, considering subs now.

[21:12] <tobs> on the other end of the spectrum, Rosetta Code shows how to use the MOP to intrude any class' privacy https://rosettacode.org/wiki/Break_OO_privacy#Perl_6

[21:12] <irced> tobs: i will take a look at that after thanks

[21:12] <lizmat> tobs: that works. but it will not perform very well

[21:13] <lizmat> but yeah, it's objects all the way down  :-)

[21:13] <lizmat> well, almost, anyway  :-)

[21:14] <tobs> I've been wondering about the underlying question here before: what is the general sentiment about hiding data inside objects? It seems that here either nobody or everybody gets to read an class' attributes.

[21:15] <tobs> a class' attribute*, singular

[21:16] <lizmat> you could make a private attribute, and create an accessor with access checks...

[21:16] <irced> lizmat: ok, i will consider that next. playing with sub.

[21:16] <lizmat> class A { has $!foo; method foo($secret) { $secret eq "foobar" ?? $!foo !! Nil } }

[21:18] <irced> lizmat: yeah i could go that route maybe with smart match against the type being the class that is calling it or a .isa perhaps...

[21:19] <lizmat> not sure *why* you would do that, but yeah, those are options

[21:21] <irced> lizmat: not sure why? let nested class be a class that has access to the outer classes private properties. that would be the answer to *why* no ?

[21:21] *** andrzejku left
[21:22] <irced> outer class's

[21:23] <lizmat> feels to me that maybe role composition would be a better route ?

[21:23] <lizmat> I mean, if you have 2 classes that need access to the same attributes, maybe those should be in a role ?

[21:24] <irced> lizmat: i've considered it... let me see if i can explain why it does not suit my purpose..

[21:25] <irced> lizmat: maybe i can't explain it . so i am rethinking it ...

[21:25] <lizmat> I don't mind being rubberducked  :-)

[21:25] <irced> lizmat: basically i have a map that both classes need access to (the outer class and the nested class)

[21:25] <irced> lizmat: i don't want to create the map twice

[21:26] <lizmat> why do you need two classes?

[21:26] <irced> lizmat: if both classes have a role that provide the map, the map is created in two places in memory

[21:26] <lizmat> perhaps the map should be its own class, and each class should have an attribute for the same map

[21:27] *** andrzejku joined
[21:27] <lizmat> and "handles" for the method it should handle ?

[21:27] <lizmat> *methods

[21:27] <tobs> m: class B { … }; class A { trusts B; has $!x }; class B { method f ($a) { $a!A::x++ } }; my $a = A.new(:20x); $b = B.new; dd $a; $b.f($a); dd $a

[21:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3) { $a!A::x++ } }; my $a = A.new(:20x); 7⏏5$b = B.new; dd $a; $b.f($a); dd $a␤»

[21:27] <irced> lizmat: hmm. well, i still think the map will be created with every instance

[21:27] <lizmat> https://docs.perl6.org/language/typesystem#index-entry-handles_trait-handles

[21:27] <tobs> m: class B { … }; class A { trusts B; has $!x }; class B { method f ($a) { $a!A::x++ } }; my $a = A.new(:20x); my $b = B.new; dd $a; $b.f($a); dd $a

[21:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such private method '!x' for invocant of type 'A'␤at <tmp>:1␤------> 3has $!x }; class B { method f ($a) { $a!7⏏5A::x++ } }; my $a = A.new(:20x); my $b =␤»

[21:27] <tobs> hmmm

[21:28] *** andrzejku left
[21:28] <tobs> but I think I found the "friends" surrogate: trusts.

[21:28] <irced> lizmat: i am looking at the link

[21:28] <irced> tobs: oh?

[21:28] <tobs> https://docs.perl6.org/routine/trusts

[21:28] <lizmat> that's also an option, but again, that feels to me like bad design / a hack

[21:29] <irced> tobs: okay looks like trusts will work so long as I have a private accessor(/mutator). let's see.

[21:29] <irced> lizmat: i will come back to handles if needed

[21:29] *** cpan-p6 left
[21:29] <lizmat> sure, TIMTOWTDI

[21:29] *** cpan-p6 joined
[21:29] *** cpan-p6 left
[21:29] *** cpan-p6 joined
[21:30] <irced> lizmat: handles might be better but trusts looks more familiar atm

[21:36] <irced> tobs: that works! thanks! short battle with the tight syntax but I overcame!

[21:36] <Geth> ¦ doc: uzluisf++ created pull request #2937: Proofread several documents

[21:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2937

[21:37] *** uzl left
[21:37] <irced> the solution is a little kludgy as lizmat suggested. i needed to forward declare the class then trust then define the nested class.

[21:37] <tobs> The "friend" thing was nagging on my mind. I knew I had seen that before in Perl 6 land :P

[21:37] <irced> now i will consider handles

[21:38] <irced> of course, trusts will be cleaner with non-nested paradigms

[21:39] <tobs> I would personally not mind exposing attributes of my class as soon as another class has a reasonable need to access it. That's a... what now? Fourth option? :)

[21:40] <irced> tobs: sacre bleu!

[21:42] <irced> tobs: what i mean is that's object oriented recklessness

[21:43] <irced> tobs: but to each their own

[21:45] <irced> 😃

[21:45] *** Sgeo left
[21:46] <Xliff> I heard mention of writing NativeCall bindings for game engine. If anyone is game, I am!  ... pun intended!

[21:46] <Xliff> I prolly will be writing COGL bindings, soon.

[21:53] <irced> lizmat: trait handles is not cooperating at the moment, i'll come back to it again, thanks!

[21:57] *** Sgeo joined
[22:01] <irced> how can i ensure that a getter method returns a reference instead of a copy. apparently when I call a gettor to return a private variable object it is mutable..?

[22:03] <timotimo> is your attribute marked "is rw"? if so, then assigning to what it returns re-assigns the thing in the attribute as well

[22:03] <irced> scratch that last observation, i haven't thoroughly tested it. but anyway, what is the most memory efficient way of creating a query getter

[22:03] <timotimo> what's a query getter?

[22:03] <irced> a query is a getter that returns an immutable (reference) to the attribute. as opposed to rw, which is get and optionally set

[22:04] <timotimo> ah

[22:04] <timotimo> well, if you're accessing something that's innately mutable, you'd have to do a defensive copy

[22:05] <irced> i might be stretching "query" traditionally a query is a method that does not change a value during its call

[22:05] <irced> that is a query method will get and guarantee no change occurred to the attributes of the object internally during that call

[22:06] <irced> but anyway, rw is obviously a reference and not a whole copy. how could i get an attribute without getting a whole copy like a pointer to it but a constant pointer

[22:06] <irced> so i have method private-attribute is rw {!private-attribute} which means i can change it and such

[22:07] <irced> implying it's a pointer

[22:07] <Xliff> irced: I'm thinking you'd want "method private-attribute { $!private-attribute.clone }"

[22:07] <irced> but i want to get the private-attribute like method private-attribut is r but not w {!private-attribute} where of course !private-attribute is defined via a has declaration in the class

[22:08] <irced> Xliff: hey that looks neat lemme see

[22:08] * irced opens the docs.

[22:08] <Geth> ¦ doc: 3315e00bc9 | (Luis F. Uceta)++ | 4 files

[22:08] <Geth> ¦ doc: Proofread several documents

[22:08] <Geth> ¦ doc: 

[22:08] <Geth> ¦ doc: glossary.pod6, newline.pod6, quoting.pod6 and syntax.pod6

[22:08] <Geth> ¦ doc: 

[22:08] <Geth> ¦ doc: Changes include minor wording, text reflow, whitespace, unindenting

[22:08] <Geth> ¦ doc: =code-wrapped code samples, etc.

[22:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3315e00bc9

[22:09] <Geth> ¦ doc: 2fe2ce6b7f | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 4 files

[22:09] <Geth> ¦ doc: Merge pull request #2937 from uzluisf/doc-proofreading-04

[22:09] <Geth> ¦ doc: 

[22:09] <Geth> ¦ doc: Proofread several documents

[22:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2fe2ce6b7f

[22:11] <Xliff> m: sub a (+@p) { .gist.say for @p }; a( [1, 'a'], [2, 'b'], [3, 'c'] )

[22:11] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «[1 a]␤[2 b]␤[3 c]␤»

[22:12] <Xliff> m: sub a (*@p) { .gist.say for @p }; a( [1, 'a'], [2, 'b'], [3, 'c'] )

[22:12] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤a␤2␤b␤3␤c␤»

[22:12] <irced> hmm, don't think so. i will go it tobs style and say, if the property is accessible then it deserves to be completely accessible

[22:12] <irced> and stick with rw

[22:12] <irced> 😃

[22:12] <Xliff> irced: Good luck!

[22:14] *** rindolf left
[22:14] <irced> Xliff: thanks

[22:14] <Xliff> m: sub a (*@p) { .gist.say for @p }; my $a = ( [1, 'a'], [2, 'b'], [3, 'c'] ); a(|$a);

[22:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤a␤2␤b␤3␤c␤»

[22:14] <Xliff> m: sub a (*@p) { .gist.say for @p }; my $a = ( [1, 'a'], [2, 'b'], [3, 'c'] ); a($a);

[22:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «([1 a] [2 b] [3 c])␤»

[22:19] <Xliff> "Abby said stop".contains( <said stop>.any ).say

[22:19] <evalable6> Xliff, rakudo-moar bc45af3b8: OUTPUT: «any(True, True)␤»

[22:26] *** pmurias left
[22:29] <irced> timotimo: formally, "UML defines a query as an operation that gets a value from a class without changing the system state....Strictly, the idfference between query and modifiers is whether they change the observable state. The observable state is what can be perceived from the outside. An opration that updates a cache would alter the internal state but would have no effect that's observable from the 

[22:29] <irced> outside." -UML Distilled, Fowler # so i stretched stretched it

[22:33] <timotimo> an rw accessor would also be a query method then :)

[22:35] <irced> timotimo: so i guess a query is like a getter with a little guarantee that says anything that can be manipulated public won't look different after the call.

[22:35] *** lizmat left
[22:35] <irced> timotimo: yeah, i stretched stretched

[22:35] * irced might have pulled a muscle.

[22:35] <timotimo> you stretched the definition?

[22:35] *** dolmen left
[22:36] *** jaldhar joined
[22:36] <jaldhar> quick question: what is the perl6 equivalent of /gc and \G?

[22:36] <irced> timotimo: yeah, i mean in OOP probably UML query is the definition most often referred to and Fowler is the big name in UML

[22:38] *** nepugia left
[22:38] <irced> ｢/gc and \G｣ the first looks like a regex perl5? modifier and what's \G ?

[22:39] <jaldhar> irced: yeah from perl5.  \G is the position of the last match.

[22:40] <jaldhar> ah in perl6 its m:g:c/ ... / apparently.  So I just need to know the equivalent to /G

[22:41] <timotimo> i think you may have to use lookbehind assertions

[22:41] <timotimo> what does perl5 do if you have multiple \G in your regex?

[22:43] <jaldhar> timotimo: I just have the one.  I'm using it to match successive words in a while loop.

[22:43] <irced> jaldhar: dunno if this applies, but the last match is assigned to ｢$/｣

[22:44] <irced> jaldhar: which should apply in the case of looping

[22:44] <irced> jaldhar: but in complex expressions not so sure, i'm a neophyte in that area

[22:45] <irced> jaldhar: unless you just matched and wanted the match from before :-p

[22:45] <irced> jaldhar: but in that case you can just put it in a loop state variable?

[22:45] <irced> jaldhar: can you give an example?

[22:47] <jaldhar> irced: thanks but I've gone a different way now.

[22:47] <irced> jaldhar: ok, just realized too it's not a "position" instead a match

[22:50] *** pamplemousse left
[23:18] *** empee0 left
[23:27] *** jaldhar left
[23:27] *** jaldhar joined
[23:35] *** jaldhar left
[23:35] *** jaldhar joined
[23:40] *** john_parr joined
[23:52] *** jaldhar left
[23:52] *** jaldhar joined
[23:58] *** lucasb left
