[00:03] *** DarthGandalf joined
[00:03] *** MasterDuke joined
[00:03] *** MasterDuke left
[00:03] *** MasterDuke joined
[00:06] *** lucasb left
[00:12] *** zacts left
[00:12] *** zacts joined
[00:21] *** Actualeyes left
[00:26] *** aborazmeh left
[00:30] *** cozachk joined
[00:32] *** zachk left
[00:32] *** cpage left
[00:32] *** kurahaupo left
[00:32] *** Kaiepi left
[00:32] *** aindilis left
[00:32] *** perlbot left
[00:32] *** buffet left
[00:32] *** kst` joined
[00:32] *** Praise left
[00:32] *** perlbot_ joined
[00:32] *** perlbot_ is now known as perlbot

[00:33] *** buffet joined
[00:33] *** Praise joined
[00:33] *** Praise left
[00:33] *** Praise joined
[00:35] *** dotdotdot left
[00:35] *** kst left
[00:36] *** MidCheck joined
[00:37] *** dotdotdot joined
[00:38] *** vrurg left
[00:39] *** vrurg joined
[00:42] *** kurahaupo joined
[00:48] *** w_richard_w joined
[00:57] <Geth> ¬¶ doc: b2367a396c | (JJ Merelo)++ | 2 files

[00:57] <Geth> ¬¶ doc: Some reflow, also adds subtitle

[00:57] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b2367a396c

[01:31] *** buffet_ joined
[01:32] *** buffet left
[01:55] *** adu joined
[02:01] *** ctilmes left
[02:27] *** Kaiepi joined
[02:34] *** cozachk left
[02:39] *** TimToady left
[02:40] *** TimToady joined
[02:58] <ugexe> https://gist.github.com/ugexe/2fa62c2d498f9e206d693f47e4a231aa my polyglot variant of the hamming number challenge 

[03:06] <guifa> ugexe: is it possible to do an entire directory or wildcard matched resources include?

[03:07] <guifa> Or does each file need to be named individually?

[03:08] <ugexe> they need to be named individually. the fact this isn't done for bin/ is something that will eventually change

[03:09] <guifa> Alright, that‚Äôs what it seemed like when I was testing out foo/* and foo/ but wanted to check.

[03:09] <ugexe> the reason is we want to be able to reason about what a distribution contains without having to even download the distribution

[03:10] <guifa> That makes sense.  I‚Äôm trying to limit memory consumption so I‚Äôve started separating things out into per-language files so they can be loaded as needed rather than all at once

[03:11] <guifa> There‚Äôs just‚Ä¶ 750 language files ü§¶

[03:12] *** jaldhar_ joined
[03:13] *** w_richard_w left
[03:14] *** Cabanossi left
[03:17] *** vrurg left
[03:22] *** Cabanoss- joined
[03:22] *** hythm joined
[03:24] <hythm> hello, When I add LAST phaser inside a sub body, looks like, every loop increment "$" var 

[03:24] <hythm> p6: my @a = <1 2>; sub run { my $v = @a.first; loop { say $v; $v = @a[++$ mod 2]; LAST {} } }; run

[03:25] <hythm> p6: my @a = <1 2>; sub run { my $v = @a.first; loop { say $v; $v = @a[++$ mod 2]; } }; run # removing LAST {}  works as expected

[03:25] <AlexDaniel> m: my @a = <1 2>; sub run { my $v = @a.first; loop { say $v; $v = @a[++$ mod 2]; LAST {} } }; run

[03:25] <evalable6> hythm, rakudo-moar dc02335dd: OUTPUT: ¬´(signal SIGHUP) 1‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§‚Ä¶¬ª

[03:25] <evalable6> hythm, Full output: https://gist.github.com/bd535af15c91bd9bb5f666b8eff4f142

[03:25] <AlexDaniel> ah‚Ä¶ :)

[03:25] *** jaldhar_ left
[03:26] <AlexDaniel> very nice of evalable6 to gist the whole thing

[03:26] *** jaldhar_ joined
[03:26] <evalable6> AlexDaniel, rakudo-moar dc02335dd: OUTPUT: ¬´(signal SIGHUP) 1‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§2‚ê§‚Ä¶¬ª

[03:26] <evalable6> AlexDaniel, Full output: https://gist.github.com/38ebc08f67ea1c2febdba0eb42b3bebb

[03:26] <evalable6> hythm, rakudo-moar dc02335dd: OUTPUT: ¬´(signal SIGHUP) 1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§‚Ä¶¬ª

[03:26] <hythm> in repl the version without LAST {}, shows 12121212...

[03:27] <evalable6> hythm, Full output: https://gist.github.com/dcbfc4dbc59e5f73952b3879bc123e60

[03:27] <hythm> if not inside sub block it works fine in both cases

[03:28] <AlexDaniel> m: my @a = <1 2>; sub run { my $v = @a.first; for ^10 { say $v; $v = @a[++$ mod 2]; LAST {} } }; run

[03:28] <evalable6> AlexDaniel, rakudo-moar dc02335dd: OUTPUT: ¬´1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§¬ª

[03:28] <AlexDaniel> m: my @a = <1 2>; sub run { my $v = @a.first; for ^10 { say $v; $v = @a[++$ mod 2] } }; run

[03:28] <evalable6> AlexDaniel, rakudo-moar dc02335dd: OUTPUT: ¬´1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§¬ª

[03:28] <AlexDaniel> so that's only in `loop`?

[03:29] <hythm> no

[03:31] <hythm> m: my @a = <1 2>; my $v = @a.first; loop { say $v; $v = @a[++$ mod 2]; LAST {} } # withput sub {} its working fine

[03:31] <hythm> if inside sub {} it shows 222222222, like the first one I pasted

[03:32] <evalable6> hythm, rakudo-moar dc02335dd: OUTPUT: ¬´(signal SIGHUP) 1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§‚Ä¶¬ª

[03:33] <evalable6> hythm, Full output: https://gist.github.com/ee0b825a4c2bf4387fe1d680e9e90268

[03:33] <hythm> aaah, I see, yeah looks like inside loop only, since it worked fine with `for' 

[03:33] *** ctilmes joined
[03:33] *** ctilmes left
[03:33] *** choiboi left
[03:34] *** choiboi joined
[03:37] <AlexDaniel> m: my @a = <1 2>; sub run { my $v = @a.first; my $a = 0; loop { exit if $a++ > 10; say $v; $v = @a[++$ mod 2] } }; run

[03:37] <evalable6> AlexDaniel, rakudo-moar dc02335dd: OUTPUT: ¬´1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§2‚ê§1‚ê§¬ª

[03:37] <AlexDaniel> easier on the bot a bit :)

[03:39] <hythm> yeah sorry about that, I should have added exit condition :)

[03:39] *** ctilmes joined
[03:39] <hythm> so is this a bug so I can report?

[03:42] <hythm> also using explicit var `$i` instead of `$` works fine without issue

[03:43] *** zacts left
[03:46] <discord6> <Tyler (Aearnus)> hey all, is it possible to define an operator as a method a la ruby?

[03:48] *** kurahaupo left
[03:48] *** kurahaupo joined
[03:48] *** kurahaupo left
[03:49] *** kurahaupo joined
[03:55] *** hythm left
[04:12] <lookatme_q> I am afraid not

[04:13] <lookatme_q> You can checkout how they implemented `[]` with AT-POS

[04:24] *** xinming joined
[04:26] *** atroxaper left
[04:27] *** xinming_ left
[04:31] *** zacts joined
[04:38] *** khisanth_ left
[04:46] *** MidCheck left
[04:52] *** kurahaupo_ joined
[04:54] *** kurahaupo left
[05:06] *** khisanth_ joined
[05:16] *** jcallen joined
[05:18] *** aborazmeh joined
[05:18] *** aborazmeh left
[05:18] *** aborazmeh joined
[05:18] <moritz> you can't, because an operator has lexical scope, but a method is scoped to the invocant

[05:32] *** zacts left
[05:34] *** zacts joined
[05:34] *** zacts left
[05:51] <Elronnd> I have an error of 'missing block' '<BOL>‚èè<EOL>' - 'expecting any of: statement end'

[05:51] <Elronnd> how am I supposed to parse that?

[05:52] <moritz> BOL stands for "begin of line", EOL for "end of line"

[05:52] <moritz> so, there's an empty line, where Perl 6 expects a statement end

[05:53] <Elronnd> yes

[05:53] <Elronnd> ah, I forgot to close a brace

[05:58] *** kktt joined
[06:01] *** atroxaper joined
[06:13] <Xliff> .tell sena_kun Where are all the types you have here coming from? https://github.com/Altai-man/cro-ldap/blob/master/lib/Cro/LDAP/Types.pm6

[06:13] <yoleaux> Xliff: I'll pass your message to sena_kun.

[06:15] *** sauvin joined
[06:21] <Elronnd> you know what would be really nice?  If the 'use of uninitialized value of type Any' error told you the name of the variable you were trying to access

[06:26] <moritz> m: my $x; say "foo $x"

[06:26] <evalable6> moritz, rakudo-moar dc02335dd: OUTPUT: ¬´Use of uninitialized value of type Any in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§foo ‚ê§  in block <unit> at /tmp/1bn0TvBLvC line 1‚ê§¬ª

[06:28] *** adu left
[06:35] *** ayerhart left
[06:37] *** manemobiili joined
[06:47] *** ayerhart joined
[06:51] *** daxim joined
[06:58] *** manemobiili left
[07:02] *** domidumont joined
[07:13] <discord6> <Tyler (Aearnus)> just watched Conway's "on the shoulders of giants" talk it was very good

[07:20] *** powerbit joined
[07:21] *** robertle joined
[07:21] *** zakharyas joined
[07:25] *** cpan-p6 left
[07:25] *** cpan-p6 joined
[07:25] *** cpan-p6 left
[07:25] *** cpan-p6 joined
[07:25] *** patrickb joined
[07:26] *** Sgeo_ left
[07:27] *** Sgeo_ joined
[07:28] *** bhm joined
[07:28] *** bhm left
[07:29] *** bhm joined
[07:36] *** dakkar joined
[07:38] *** scimon joined
[07:57] *** atweiden-air joined
[08:04] *** Sgeo_ left
[08:05] *** Xliff left
[08:05] *** Sgeo_ joined
[08:12] *** MidCheck joined
[08:16] *** Chaz6 left
[08:20] *** puffin99 joined
[08:21] *** puffin99 left
[08:32] *** sena_kun joined
[08:32] <sena_kun>  

[08:32] <yoleaux> 06:10Z <Xliff> sena_kun: Where are all the types you have here coming from? https://github.com/Altai-man/cro-ldap/blob/master/lib/Cro/LDAP/Types.pm6

[08:35] <sena_kun> .tell Xliff they are generated and exported during precompilation, so technically from https://github.com/Altai-man/cro-ldap/blob/master/lib/Cro/LDAP/Types.pm6#L3 <- this line

[08:35] <yoleaux> sena_kun: I'll pass your message to Xliff.

[08:36] <kawaii> good morning :)

[08:37] <sena_kun> o/

[08:40] *** atweiden-air left
[08:47] <kawaii> AlexDaniel: got a nice big server for doing build/blin stuff, will kick off Blin later today

[08:57] *** aborazmeh left
[09:01] *** atweiden-air joined
[09:39] *** buffet_ is now known as buffet

[09:44] *** demanuel joined
[09:47] *** rindolf joined
[09:50] *** atweiden-air left
[09:54] <kawaii> AlexDaniel: I have Blin questions, if you have time to answer them :)

[09:55] <AlexDaniel> kawaii: what's the question? :)

[09:56] <kawaii> So, testing modules from the ecosystem - I just ran a basic blin test for Cro::HTTP against 2019.03 and HEAD, which worked fine.... So should I be testing the entire ecosystem here? What about the modules with deps that need to be sourced and compiled manually? Sounds like a lot of work

[09:56] <kawaii> Or are there a set of common modules I should always test

[09:57] <kawaii> I don't know that it's our duty to check that everything in the ecosystem works all the time

[09:57] <kawaii> especially when the language is 'new' and in constant rapid development

[09:57] *** kktt left
[09:58] <AlexDaniel> kawaii: see this: https://github.com/perl6/ecosystem-unbitrot/wiki

[09:58] <AlexDaniel> kawaii: IIRC you might have a problem installing a package or two, but otherwise that list is correct

[09:58] <kawaii> Yep, but take a module like Redis::Async for example, which requires a C library you need to download and compile yourself, there is no package  for eredis

[09:59] <AlexDaniel> kawaii: I don't see it in the list here: https://github.com/perl6/ecosystem-unbitrot/issues

[10:00] <AlexDaniel> ===> Install [OK] for Redis::Async:ver<0.6>:auth<github:CurtTilmes>

[10:00] <kawaii> wiki page might need updating https://www.irccloud.com/pastebin/wG2aFrq4/

[10:01] <AlexDaniel> kawaii: libcurl4 is in debian testing/unstable

[10:01] *** rindolf left
[10:02] <AlexDaniel> kawaii: same for other packages in that ilst, actually

[10:03] <AlexDaniel> IMO it's ok to be unable to install deps for a few modules, especially if they require packages that are not readily available in debian yet

[10:04] *** atweiden-air joined
[10:05] <kawaii> https://www.irccloud.com/pastebin/7hVHCXd0/

[10:05] <kawaii> AlexDaniel: ¬Ø\_(„ÉÑ)_/¬Ø

[10:05] <kawaii> I guess this is okay

[10:05] <kawaii> I assume it has no tests then that actually use the module

[10:05] <kawaii> and just tests if it installs correctly

[10:10] *** domidumont left
[10:10] *** Black_Ribbon left
[10:10] *** rindolf joined
[10:12] *** atweiden-air left
[10:27] *** kensanata joined
[10:28] *** woolfy left
[10:34] *** lizmat left
[10:46] *** kurahaupo_ left
[10:46] *** kurahaupo joined
[10:48] *** kurahaupo left
[10:49] *** kurahaupo joined
[11:12] *** ctilmes_ joined
[11:12] *** ctilmes_ left
[11:18] *** kurahaupo left
[11:18] *** kurahaupo joined
[11:19] *** kurahaupo left
[11:19] *** kurahaupo joined
[11:24] *** atroxaper left
[11:26] *** zakharyas left
[11:37] <kawaii> AlexDaniel: `‚è≥ 137 out of 1260 modules processed`

[11:38] <kawaii> seems to be going well

[12:00] *** llfourn left
[12:03] * holyghost is going to look into freecol.org for gigs and perl6

[12:11] *** mack[m] left
[12:11] *** AlexDaniel` left
[12:11] *** unclechu left
[12:11] *** Matthew[m] left
[12:11] *** Demos[m] left
[12:12] *** lance_w[m] left
[12:12] *** tyil[m]1 left
[12:12] *** MitarashiDango[m left
[12:12] *** tyil[m] left
[12:12] *** Seance[m] left
[12:12] *** Garland_g[m] left
[12:15] *** irdr_ left
[12:15] *** domidumont joined
[12:16] *** irdr joined
[12:20] *** Sgeo_ left
[12:21] *** Sgeo_ joined
[12:35] *** llfourn joined
[12:41] *** llfourn left
[12:42] *** Pikk3wyn joined
[12:48] *** araraloren joined
[12:51] *** MidCheck left
[12:58] *** zakharyas joined
[13:07] <kawaii> `‚è≥ 761 out of 1260 modules processed`

[13:07] <kawaii> zzzz

[13:09] *** MidCheck joined
[13:17] *** vrurg joined
[13:27] *** zacts joined
[13:28] *** skids joined
[13:33] *** lucasb joined
[13:34] *** scimon left
[13:34] *** scimon joined
[13:40] *** __jrjsmrtn__ joined
[13:42] *** _jrjsmrtn left
[13:45] <AlexDaniel> kawaii: if you get ‚Äú/tmp/blah blah is locked‚Äù messages, that is fine

[13:46] <AlexDaniel> it's about two modules being bisected at the same time and hitting the same rakudo commit

[13:46] <AlexDaniel> one has to wait because that's a limitation in whateverable

[13:46] <AlexDaniel> it can be easily lifted now given that rakudo is relocatable

[13:52] <kawaii> haven't seen it yet! we're just over 1000 modules tested niw

[13:52] <kawaii> now**

[13:55] *** zacts left
[13:59] *** ctilmes1 joined
[14:07] *** silug joined
[14:11] *** aindilis joined
[14:19] *** Actualeyes joined
[14:36] *** llfourn joined
[14:41] *** llfourn left
[14:51] <AlexDaniel> kawaii: how is it? :)

[14:51] <kawaii> AlexDaniel: `‚è≥ 1156 out of 1260 modules processed`

[14:51] <kawaii> nearly done :)

[14:58] *** llfourn joined
[15:03] *** llfourn left
[15:10] *** i1nfusion joined
[15:11] *** MidCheck left
[15:11] *** domidumont left
[15:12] *** i1nfusion left
[15:14] *** i1nfusion joined
[15:26] *** atroxaper joined
[15:28] *** araraloren left
[15:35] *** ayerhart left
[15:35] *** kensanata left
[15:38] *** kurahaupo left
[15:39] *** ayerhart joined
[15:41] <sena_kun> I can't call ^compose on newly created type twice, can I?

[15:43] <timotimo> you can; i'm not sure we guarantee it'll be fine, though?

[15:44] *** MidCheck joined
[15:44] <kawaii> a https://usercontent.irccloud-cdn.com/file/r1MzS38O/data.json

[15:44] <kawaii> AlexDaniel: ^ done!

[15:45] <sena_kun> well, I meant guarantees, as I am having weird behavior with attributes: they are present, but somehow when I am doing `.new(foo => 1)`, $.foo is still Int.

[15:45] <kawaii> I think I may need to do this again, as I didn't have _all_ of the module deps, the ones from Debian unstable

[15:45] <sena_kun> now trying to golf...

[15:45] <timotimo> ah, the constructor may only be built once

[15:45] <sena_kun> I wonder if it is too dark magic and I am already run out of Luck points...

[15:45] <timotimo> we do compile custom code for that

[15:45] <timotimo> at a certain point

[15:46] <sena_kun> hmmm...

[15:46] <timotimo> it's triggered in Mu.pm6 i believe

[15:46] <sena_kun> well, mind if I describe a problem A instead of problem B?

[15:46] <timotimo> and it lives in the compiler services part of rakudo

[15:47] *** llfourn joined
[15:50] *** vrurg left
[15:52] *** llfourn left
[15:53] <sena_kun> ok, so... I am generating types using MOP, types can be nested(so a class has typed attributes) and, a lot worse, types can be recursive. So I wrote a simple detector for recursive cases and when I see that an inner type is the same as its parent, it doesn't try to generate it and loop, but sets a stub like "Here is a stub, it will be updated later" as the attribute value. Later I am checking my generated types and if it sees a stub, I 

[15:53] <sena_kun> am re-generating it, given that the parent type is compiled already and the chain is un-tied. But if the parent type had another parent, this one will have the old version with stubs in its attribute type.

[15:54] *** melezhik joined
[15:54] <timotimo> can always make things run-time type-checked

[15:54] <sena_kun> So I was thinking "I can store not yet composed parent and then update it too, when recursive type will be un-tied", but apparently I cannot do anything with not yet composed types, I cannot say "Ok, here is a base, sometime in the future it will be composed".

[15:54] <sena_kun> I must use explicit typing.

[15:55] <sena_kun> I store ASN metadata this way, no other option.

[15:55] <timotimo> mhm

[15:55] <melezhik> Hi! How to pass perl6 inc when run perl6 under sudo? for example: perl6 -MFoo works fine , provided that Foo module is installed for the current user. However sudo perl6 -MFoo fails , because Foo is not installed into system path

[15:55] <sena_kun> *it will be composed in the future, and when we will deal with its child, we will update the parent attribute type too

[15:56] *** Pikk3wyn left
[15:56] <timotimo> melezhik: you can use -I to put an inst# thingie in there

[15:56] <timotimo> m: say $*REPO.repo-chain

[15:56] <evalable6> timotimo, rakudo-moar e6cbbcc82: OUTPUT: ¬´(file#/home/bisectable/git/whateverable/sandbox/lib inst#/home/bisectable/.perl6 inst#/tmp‚Ä¶¬ª

[15:56] <evalable6> timotimo, Full output: https://gist.github.com/ad7e105036c0a73bc6be602864b2edf7

[15:56] <timotimo> use this to find the right thing to pass

[15:56] <melezhik> the workaround is sudo env USER=$USER perl6 -MFoo, but I don't like it for other reasons 

[15:57] <melezhik> unfortunately I can only tweak PELR6LIB or ether env vars , but have no control over options when run perl6 interpreter  

[15:58] <timotimo> ok, but that can also go in PERL6LIB i believe

[15:58] <AlexDaniel> kawaii: looks about right, this is what update-issues.p6 script in ecosystem-unbitrot repo will do: https://gist.github.com/AlexDaniel/411765646a2ddfc976b087f67d7c196f

[15:58] <sena_kun> please, never mind my issue...

[15:58] <melezhik> I also think that

[15:58] *** llfourn joined
[15:58] <melezhik> however sudo env PERL6LIB=~/.perl6 perl6 -MFoo does not work

[15:59] <AlexDaniel> kawaii: you can check out the new ones to see if there's anything you can install for them

[16:00] *** vrurg joined
[16:03] *** llfourn left
[16:04] <timotimo> yeah, that's not correct

[16:05] <timotimo> as i said, use $*REPO.repo-chain's contents to see what you have to pass

[16:05] <timotimo> it has to be the right type, which is what goes in front of the #

[16:05] <timotimo> BBL

[16:11] <atroxaper>  

[16:11] *** robertle left
[16:14] <melezhik> ok, timotimo: what should I do ? I'm basically looking for the way through setting PERL6LIB properly ...

[16:14] *** i1nfusion left
[16:15] *** i1nfusion joined
[16:22] <Geth> ¬¶ doc: pmqs++ created pull request #2715: Fix broken link for IO::Glob

[16:22] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2715

[16:25] *** patrickb left
[16:26] <ugexe> melezhik: compare the output of `say $*REPO.repo-chain` with and without sudo. the difference will show you what path is missing/incorrect

[16:28] *** scimon left
[16:31] *** Xliff joined
[16:31] <Xliff> .

[16:31] <yoleaux> 08:35Z <sena_kun> Xliff: they are generated and exported during precompilation, so technically from https://github.com/Altai-man/cro-ldap/blob/master/lib/Cro/LDAP/Types.pm6#L3 <- this line

[16:32] <melezhik> ugexe: thanks, will try

[16:33] <melezhik> well, it's (inst#/home/melezhik/.perl6 inst#/opt/rakudo-pkg/share/perl6/site inst#/opt/rakudo-pkg/share/perl6/vendor inst#/opt/rakudo-pkg/share/perl6 ap# nqp# perl5#) for user

[16:33] <melezhik> and is inst#/root/.perl6 inst#/opt/rakudo-pkg/share/perl6/site inst#/opt/rakudo-pkg/share/perl6/vendor inst#/opt/rakudo-pkg/share/perl6 ap# nqp# perl5# for sudo

[16:34] <melezhik> the question is what value should I add to PERL6LIB for sudo?

[16:35] *** zacts joined
[16:36] <Xliff> sena_kun: No such method 'tc' for invocant of type 'ASN::RawType'

[16:36] <sena_kun> Xliff, I am in the middle of super-huge refactoring, so don't bother. Sorry.

[16:36] <AlexDaniel> kawaii: I'm surprised that none of the modules were bisected‚Ä¶ weird

[16:37] <Xliff> sena_kun: Awww.

[16:37] <AlexDaniel> kawaii: is it really possible that there are no regressions found in modules during this month?

[16:37] <Xliff> sena_kun: Commit has before the refactor started?

[16:37] <AlexDaniel> I have never seen that in a year

[16:38] <sena_kun> Xliff, though I hope that I am closer to the end of it, because it is a third day of straight hell already... You can install ASN::Grammar with latest commit removed.

[16:38] <sena_kun> Xliff, but better to wait until I'll push everything.

[16:38] <Xliff> Well, I was hoping to try something to help clean up Cro::LDAP

[16:39] <sena_kun> Xliff, can you wait a day or two? :)

[16:39] <Xliff> Sure! I will continue to peck though. ;)

[16:40] <sena_kun> Xliff, roger.

[16:40] <kawaii> AlexDaniel: it certainly seems that way?

[16:41] <AlexDaniel> kawaii: maybe double check the ones that have ZefFailure but no timeout in the output

[16:42] *** zakharyas left
[16:44] *** dogbert17 joined
[16:48] <ugexe> melezhik: its pretty clearly a shell expansion issue

[16:48] <ugexe> give the full path instead of ~/ which might point at the root home or user home depending on how you invoke it

[16:48] <ugexe> nothing related to perl6

[16:49] *** dakkar left
[16:53] <ugexe> so you'll want something like

[16:53] <ugexe> PERL6LIB=inst#/home/melezhik/.perl6

[16:53] <timotimo> does rakudo actually home-expand paths in perl6lib?

[16:53] <ugexe> no

[16:53] <timotimo> OK

[16:53] <ugexe> but the shell does

[16:53] <ugexe> although it cant in the above example

[16:54] <ugexe> inst#~/.perl6 wouldnt expand for instance

[16:54] <timotimo> right

[16:59] <MasterDuke> Xliff: what module is 'Color'?

[17:00] <Xliff> MasterDuke: That was Zoffix's

[17:00] <MasterDuke> ah, thanks

[17:00] <Xliff> np

[17:03] *** zacts left
[17:16] *** hasuwiz left
[17:21] *** apathor left
[17:22] *** ctilmes1 left
[17:31] *** melezhik left
[17:34] *** atroxaper left
[17:44] *** ayerhart_ joined
[17:45] *** ayerhart left
[17:51] *** ayerhart joined
[17:51] *** melezhik joined
[17:51] *** MidCheck left
[17:51] <melezhik> ugexe: does not work - https://gist.github.com/melezhik/2151efe82a18f686a3e2899810c6c52e

[17:52] *** ayerhart_ left
[17:52] <timotimo> why do you have PERL6LIB=PERL6LIB= there?

[17:54] *** robertle joined
[17:55] <Geth> ¬¶ ecosystem: petrkol72++ created pull request #447: Add vCard::Parser

[17:55] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/447

[17:55] <melezhik> sorry. typo . sudo env PATH=$PATH PERL6LIB=inst#/home/melezhik/.perl6  perl6 -MJSON::Tiny did the trick!

[17:55] <melezhik> yeah. thanks

[17:55] <melezhik> so it's just a shell expansion error

[17:56] <melezhik> thanks to all

[17:56] <melezhik> ((

[17:56] *** jaldhar_ left
[17:57] <guifa> Ooh!  So this is cool

[17:57] <guifa> Normally when you dump a has it uses {¬†key => val, key => val¬†}

[17:57] <guifa> But if the key is RTL, it uses {¬†val <= key }

[17:58] <AlexDaniel> ? O_o

[17:58] <guifa> Well, it‚Äôs not consistent, but it did for one of my print outs

[17:59] <timotimo> hahaha

[17:59] <guifa> {, ;%-+E√ó‚Ä∞‚àûNaN: => 2, ,.;%-+E¬∑‚Ä∞‚àûNaN: => 0, ‚Ä¶ Ÿ´Ÿ¨ÿõŸ™ÿúÿú-ÿú+ÿßÿ≥√óÿâ‚àûŸÑŸäÿ≥ ÿ±ŸÇŸÖ: => 0}

[17:59] *** llfourn joined
[18:04] *** llfourn left
[18:05] *** jmerelo joined
[18:06] <jmerelo> hi!

[18:06] <Xliff> m: %h = ( 1 <= a, 2 <= b ); %h.gist.say

[18:06] <evalable6> Xliff, rakudo-moar e6cbbcc82: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/OPB6PJsrMS‚ê§Variable '%h' is not declared‚ê§at /tmp/OPB6PJsrMS:1‚ê§------> 03<BOL>08‚èè04%h = ( 1 <= a, 2 <= b ); %h.gist.say‚ê§¬ª

[18:06] <Xliff> m: my %h = ( 1 <= a, 2 <= b ); %h.gist.say

[18:06] <evalable6> Xliff, rakudo-moar e6cbbcc82: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/P5ynGkhXRg‚ê§Undeclared routines:‚ê§    a used at line 1‚ê§    b used at line 1‚ê§‚ê§¬ª

[18:06] <Xliff> m: my %h = ( 1 <= 'a', 2 <= 'b' ); %h.gist.say

[18:06] <evalable6> Xliff, rakudo-moar e6cbbcc82: OUTPUT: ¬´(exit code 1) Cannot convert string to number: base-10 number must begin with valid digits or '.' in '03‚èè04a' (indicated by ‚èè)‚ê§  in block <unit> at /tmp/evjIaSNyFl line 1‚ê§‚ê§¬ª

[18:06] <Xliff> OK... guifa got me. :P

[18:07] *** ayerhart left
[18:08] <guifa> I don‚Äôt think it works for defining them in code, just for printing out

[18:09] <guifa> <= is others just less than or equal to, so ‚Äòa‚Äô can‚Äôt convert to a number

[18:09] <Geth> ¬¶ ecosystem: f7f522a8e4 | petrkol72++ (committed using GitHub Web editor) | META.list

[18:09] <Geth> ¬¶ ecosystem: Add vCard::Parser

[18:09] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/f7f522a8e4

[18:09] <Geth> ¬¶ ecosystem: a1891be8ef | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[18:09] <Geth> ¬¶ ecosystem: Merge pull request #447 from petrkol72/patch-1

[18:09] <Geth> ¬¶ ecosystem: 

[18:09] <Geth> ¬¶ ecosystem: Add vCard::Parser

[18:09] <Geth> ¬¶ ecosystem: Thanks!

[18:09] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/a1891be8ef

[18:09] *** ayerhart joined
[18:10] <guifa> oh!  It actually isn‚Äôt perl‚Äôs doing.  It‚Äôs from the bidi print out.  The <= is actually sequenced internally as equals followed by less than

[18:10] <guifa> err a greater than

[18:11] <guifa> But because the text is RTL, it flips it to <= just like it would do a question mark

[18:15] <ugexe> m: my %h = "value1" R=> "key1", "value2" R=> "key2"; say %h

[18:15] <evalable6> ugexe, rakudo-moar e6cbbcc82: OUTPUT: ¬´{key1 => value1, key2 => value2}‚ê§¬ª

[18:16] <guifa> m: my %h = ("\x661" => "\x6F1\x6F2\x6F3","\x664" => "\x6F4\x6F5\x6F6"); say %h;

[18:16] <evalable6> guifa, rakudo-moar e6cbbcc82: OUTPUT: ¬´{Ÿ° => €±€≤€≥, Ÿ§ => €¥€µ€∂}‚ê§¬ª

[18:16] <guifa> hrm, that didn‚Äôt trigger it

[18:17] <guifa> m: my %h = ('ÿ≠' => '€¥€µ€∂', 'ÿØ' => '€±€≤€≥',); say %h;

[18:17] <evalable6> guifa, rakudo-moar e6cbbcc82: OUTPUT: ¬´{ÿ≠ => €¥€µ€∂, ÿØ => €±€≤€≥}‚ê§¬ª

[18:33] *** Black_Ribbon joined
[18:46] <El_Che> https://insights.stackoverflow.com/survey/2019/

[18:47] <El_Che> grep for Perl if you want to be sad

[18:49] <El_Che> Als je het helemaal wilt maken, moet je een Perl 5 IPV6 module schrijven :)

[18:52] <moritz> let's say that when I tink about long-term employment prospects, I'm not mad that I learned python at $work

[18:53] <El_Che> my work skills are kind of compensated by devops and go, but it's sad that Perl 5 is not even on the dreaded list

[18:53] <El_Che> aka bad publicity is publicity

[18:56] <El_Che> oops (ignore the dutch)

[19:00] *** Elronnd left
[19:01] *** Elronnd joined
[19:05] <El_Che> moritz: I am pretty much having a confirmation bias on the name and infighting thingy :)

[19:13] <AlexDaniel> ‚Äúalmost 70% of respondents say they are above average‚Äù hehe

[19:13] <El_Che>  AlexDaniel: Fake it until you make it, baby

[19:19] *** jmerelo left
[19:19] <moritz> this could be either classical Dunning-Kruger effect, or selection bias

[19:20] <sena_kun> Xliff, ping?

[19:23] <sena_kun> .tell Xliff I have finished patching ASN::META, so now everything should just work(at least travis and my machine both satisfied with tests). Not sure what you want to look at, but if you want to, it's the time. :)

[19:23] <yoleaux> sena_kun: I'll pass your message to Xliff.

[19:25] <Xliff> .

[19:25] <yoleaux> 19:23Z <sena_kun> Xliff: I have finished patching ASN::META, so now everything should just work(at least travis and my machine both satisfied with tests). Not sure what you want to look at, but if you want to, it's the time. :)

[19:25] <Xliff> \o/

[19:26] <Xliff> sena_kun: That was fast. I haven't even finished lunch, yet! :)

[19:27] <Xliff> sena_kun: Getting error "No such method 'type' for invocant of type 'Str'. Did you mean any of these?

[19:27] <Xliff> "

[19:27] <Xliff> No other information specified.

[19:27] <sena_kun> Xliff, well, the amount of mind bending I had to do in order to make recursive types work consistently was extreme for my petty programming skills, so I wasn't sure how fast it'll be.

[19:27] <Xliff> Hehe.

[19:28] <sena_kun> Xliff, I think you want to un-install all modules if any installed: ASN::Grammar, ASN::META, ASN::BER, Cro::LDAP.

[19:28] <Xliff> I know the feeling. I have a test for GTKSourceView that isn't working as well as the C version. Appears that I was porting an older version and now I have to go back over everytrhing.

[19:28] <sena_kun> and then just `zef install Cro::LDAP`.

[19:28] <Xliff> OK.

[19:29] *** Brilpikk3wyn joined
[19:29] <sena_kun> and, by the way, it isn't really ready yet

[19:29] <sena_kun> so you might be more interesting in getting the sources

[19:29] <Xliff> Nope. Zef can't get it.

[19:29] <sena_kun> :(

[19:30] <sena_kun> that's odd

[19:30] <sena_kun> travis is ok: https://travis-ci.org/Altai-man/cro-ldap

[19:30] <sena_kun> aaaaah

[19:30] *** roguelazer joined
[19:30] <sena_kun> I know why zef doesn't know about it: it is not in the ecosystem yet. :)

[19:30] <Xliff> I am installing from git

[19:30] *** cpan-p6 left
[19:30] <sena_kun> so you have to checkout sources.

[19:30] <sena_kun> right

[19:30] <Xliff> Figgers. 

[19:31] *** cpan-p6 joined
[19:31] *** cpan-p6 left
[19:31] *** cpan-p6 joined
[19:31] *** Brilpikk3wyn is now known as Pikk3wyn

[19:31] <Xliff> OK. Installs clean.

[19:32] *** roguelazer left
[19:32] <sena_kun> \o/

[19:32] <sena_kun> not now sure what you can do with it

[19:33] <sena_kun> are you interested in something particular? maybe I can focus on bringing this features first.

[19:33] <sena_kun> and thanks for testing the installation - at least this insane precomp thing works for someone else than me. :)

[19:33] <Xliff> OK. Gotta /query you

[19:33] * sena_kun nods

[19:35] *** vike left
[19:42] *** zachk joined
[19:50] *** vike joined
[19:51] *** Actualeyes left
[20:00] *** llfourn joined
[20:04] *** zakharyas joined
[20:05] *** llfourn left
[20:08] *** Pikk3wyn left
[20:11] *** woolfy joined
[20:17] *** lizmat joined
[20:18] *** i1nfusion left
[20:19] *** i1nfusion joined
[20:25] *** ctilmes_ joined
[20:27] *** ctilmes left
[20:34] *** ctilmes_ left
[20:34] *** ctilmes joined
[20:48] *** zakharyas left
[20:50] *** imcsk8 left
[20:58] *** imcsk8 joined
[21:02] *** vrurg left
[21:10] *** skids left
[21:15] *** vrurg joined
[21:15] *** vrurg left
[21:23] *** llfourn joined
[21:26] <Xliff> OK. There is a serious problem with compile times with recent rakudos.

[21:26] <Xliff> I have a module GTK.pm6 which is full of need statements.

[21:27] <Xliff> If I change a file that would force a recompile in one of these need statements, it acts like all of the need statements in this module are recompiled, however there are no spawned process that would indicate this is happening until the module that is actually recompiled is reached.

[21:27] <Xliff> The issue is that it takes way too long to reach that point. 

[21:28] <Xliff> Changing this one module should not take 30 minutes to recompile.

[21:28] *** llfourn left
[21:29] <Xliff> OK. Now finally hit the module that needed to be recompiled. Took 5 minutes, not 30.

[21:30] <timotimo> i think we might actually be doing multiple precomps in one process nowadays?

[21:30] <timotimo> the RAKUDO_MODULE_DEBUG env var could give insight

[21:30] <Xliff> timotimo: OK. Next time I make a change, I will preserve the log.

[21:31] <Xliff> Stage parse      : 393.504

[21:35] <Xliff> Wow! PROGRESS! :)

[21:35] <Xliff> Still... it now SEGVs at the end.

[21:35] <Xliff> I think I will take a break, for now. BBL

[21:35] <timotimo> OK

[21:48] *** SCHAPiE left
[21:51] *** SCHAPiE joined
[21:57] *** vrurg joined
[21:58] *** stux|RC-only left
[22:06] <SmokeMachine> m: say((‚Äòfizz‚Äôx$_%%3)~(‚Äòbuzz‚Äôx$_%%5)||$_)for ^20

[22:07] <evalable6> SmokeMachine, rakudo-moar e6cbbcc82: OUTPUT: ¬´fizzbuzz‚ê§1‚ê§2‚ê§fizz‚ê§4‚ê§buzz‚ê§fizz‚ê§7‚ê§8‚ê§fizz‚ê§buzz‚ê§11‚ê§fizz‚ê§13‚ê§14‚ê§fizzbuzz‚ê§16‚ê§17‚ê§fizz‚ê§19‚ê§¬ª

[22:07] <ugexe> if you are working with a distribution, and not a single file, then changing 1 file currently requires all files o be recompiled because the sha1 of the distribution itself has changed

[22:08] <ugexe> the checksum of the entire distribution is essentially used to seed the precomp files path

[22:17] *** sena_kun left
[22:19] <ugexe> i'd almost bet there is no difference in compile times when using -I. instead of -Ilib (-Ilib being fast because it was severely broken)

[22:19] <ugexe> e.g. you would have had the longer compile time in older rakudos when using -I.

[22:19] <ugexe> which was doing the right thing unlike -Ilib

[22:20] <timotimo> oooh

[22:23] *** melezhik left
[22:23] <ugexe> it might be possible to now fix compile times by determining if/how to replace the sha1 fast lookup bits for precomp to not be based on the entire distribution contents. and not in a fundamentally broken way like before (when using -Ilib each file/module was its own distribution by itself)

[22:24] <timotimo> yeah, sounds tricky

[22:30] *** Cabanoss- left
[22:38] *** Cabanossi joined
[22:54] <ugexe> to oversimplify: when you reinstall a distribution with an identical version (using :force, which is CUR api, not zef specific) it reinstalls all the files not just whatever is different

[23:03] <ugexe> i will give an alternative (but flawed solution) to help outline what happens: https://github.com/rakudo/rakudo/blob/e6cbbcc822836e4d87a7f0bfec4bd01bba9a92d5/src/core/CompUnit/Repository/FileSystem.pm6#L45

[23:06] <ugexe> if -- instead of slurping that file -- we do something like CURI and use a namespace like ":file<{$_}>:ver<{$distribution.meta<ver>}>"

[23:07] <ugexe> it will only work if you change your meta6.json info every time you change any file

[23:07] <ugexe> but -Ilib (i.e. -I $doesnt-pount-at-authoratative-meta6) is :ver<*>:api<*>:auth<>

[23:07] <ugexe> since we cannot know what those things are

[23:20] *** rindolf left
[23:21] *** Sgeo_ left
[23:21] *** buffet left
[23:21] *** MilkmanDan left
[23:21] *** TreyHarris left
[23:21] *** epony left
[23:21] *** agentzh left
[23:21] *** kubrat left
[23:21] *** jdv79 left
[23:21] *** b2gills left
[23:21] *** revdiablo left
[23:21] *** Woodi left
[23:21] *** sjn left
[23:21] *** alnk left
[23:21] *** avar left
[23:22] *** zacts joined
[23:24] *** llfourn joined
[23:27] *** Sgeo_ joined
[23:27] *** buffet joined
[23:27] *** MilkmanDan joined
[23:27] *** TreyHarris joined
[23:27] *** epony joined
[23:27] *** agentzh joined
[23:27] *** kubrat joined
[23:27] *** jdv79 joined
[23:27] *** b2gills joined
[23:27] *** revdiablo joined
[23:27] *** Woodi joined
[23:27] *** sjn joined
[23:27] *** alnk joined
[23:27] *** avar joined
[23:29] *** llfourn left
[23:38] <Xliff> Does rakudo properly work with multi subs and nativecall?

[23:38] <Xliff> I tried something like this recently, and I think the answer was "No"

[23:38] *** netrino joined
[23:46] *** ctilmes_ joined
[23:47] <ctilmes_> Xliff: You can make multi subs with different but compatible arguments each be 'is native is symbol()' to the same nativecall routine

[23:48] <ctilmes_> (or multi methods on a CPointer or CStruct)

[23:54] <Xliff> Yeah. Did that and it turned out to not work so well.

[23:55] <Xliff> Probably because the only argument that was different was the &handler. 

[23:55] <Xliff> The signature was the only difference and I think that confused rakudo.

[23:57] *** i1nfusion left
[23:58] *** i1nfusion joined
