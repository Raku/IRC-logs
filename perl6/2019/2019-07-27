[00:05] *** pamplemousse joined
[00:18] *** __jrjsmrtn__ joined
[00:46] *** lucasb left
[00:50] *** adu joined
[00:55] *** redhands left
[01:06] *** pamplemousse_ joined
[01:06] *** nadim_ left
[01:09] *** pamplemousse left
[01:13] *** pamplemousse_ left
[01:15] *** pamplemousse_ joined
[01:17] *** molaf left
[01:19] *** aborazmeh left
[01:25] *** pamplemousse joined
[01:28] *** pamplemousse_ left
[01:29] *** molaf joined
[01:50] *** pamplemousse left
[01:55] *** pamplemousse joined
[02:09] *** pamplemousse left
[02:19] <cpan-p6> New module released to CPAN! Sparrow6 (0.0.5) by 03MELEZHIK

[02:29] *** irced left
[02:57] *** Cabanossi joined
[03:23] <AlexDaniel> grep: temp

[03:24] *** irced joined
[03:24] <greppable6> AlexDaniel, 5734 lines, 486 modules: https://gist.github.com/c3666d09d31c8fdcea4aead2e6196200

[03:30] <AlexDaniel> grep: temp.*\$

[03:30] <greppable6> AlexDaniel, 1168 lines, 177 modules: https://gist.github.com/d2a13b0429de300da48b1ff53ce0352b

[03:30] <AlexDaniel> grep: temp\s*\$

[03:31] <greppable6> AlexDaniel, 209 lines, 41 modules: https://gist.github.com/fad73f4b6ed2b7c5cfdcd5d7d2495351

[03:36] *** araraloren joined
[03:53] <araraloren> Hi, I found some weird things when using require load a module :D

[03:54] <araraloren> The test repository : https://github.com/araraloren/for-perl6-bug

[03:54] <araraloren> Just clone the code run the main.p6

[04:22] *** xinming joined
[04:39] *** Black_Ribbon left
[04:43] *** llfourn joined
[04:48] *** Black_Ribbon joined
[04:49] *** Sgeo_ joined
[04:52] *** Sgeo__ left
[05:08] *** Black_Ribbon left
[05:13] *** Black_Ribbon joined
[05:30] *** araraloren left
[06:30] *** evalable6 left
[06:30] *** greppable6 left
[06:31] *** coverable6 joined
[06:31] *** greppable6 joined
[06:31] *** notable6 joined
[06:32] *** shareable6 joined
[06:32] *** bloatable6 joined
[06:32] *** bisectable6 joined
[06:32] *** statisfiable6 joined
[06:32] *** ChanServ sets mode: +v statisfiable6

[06:33] *** undersightable6 joined
[06:33] *** ChanServ sets mode: +v undersightable6

[06:33] *** committable6 joined
[06:33] *** nativecallable6 joined
[06:33] *** ChanServ sets mode: +v nativecallable6

[06:34] *** benchable6 joined
[06:34] *** evalable6 joined
[06:34] *** releasable6 joined
[06:34] *** unicodable6 joined
[06:34] *** ChanServ sets mode: +v unicodable6

[06:34] *** reportable6 joined
[06:35] *** squashable6 joined
[06:35] *** ChanServ sets mode: +v squashable6

[06:35] *** quotable6 joined
[06:35] *** ChanServ sets mode: +v quotable6

[06:46] *** __jrjsmrtn__ left
[06:49] *** nadim_ joined
[07:13] *** rindolf joined
[07:20] *** aborazmeh joined
[07:20] *** aborazmeh left
[07:20] *** aborazmeh joined
[07:26] *** araraloren joined
[07:30] *** irced left
[07:50] *** xinming left
[07:51] *** xinming joined
[08:23] *** __jrjsmrtn__ joined
[08:27] *** chloekek joined
[08:48] *** aborazmeh left
[08:52] *** aborazmeh joined
[08:52] *** aborazmeh left
[08:52] *** aborazmeh joined
[09:11] *** sarna joined
[09:16] *** molaf left
[09:17] <chloekek> masak: what does temp offer over my when using *-twigiled variables?

[09:37] *** sarna left
[09:44] *** araraloren_ joined
[09:47] *** araraloren left
[09:51] *** aborazmeh left
[09:54] *** rindolf left
[09:56] *** rindolf joined
[09:59] *** nepugia joined
[09:59] *** cpan-p6 left
[10:00] *** cpan-p6 joined
[10:00] *** cpan-p6 left
[10:00] *** cpan-p6 joined
[10:01] <ugexe> You can’t ‘my’ a class member 

[10:02] <ugexe> you can temp $foo.bar

[10:26] *** Black_Ribbon left
[10:40] <chloekek> But those aren't *-twigiled.

[10:41] <chloekek> p6: class C { has $.bar; }; my $*foo = C.new(:bar(1)); temp $*foo.bar = 2;

[10:41] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Can only use 'temp' on a container␤  in block <unit> at <tmp> line 1␤␤»

[10:42] <chloekek> p6: class C { has $.bar; }; my $foo = C.new(:bar(1)); temp $foo.bar = 2;

[10:42] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Can only use 'temp' on a container␤  in block <unit> at <tmp> line 1␤␤»

[10:42] <chloekek> p6: class C { has $.bar is rw; }; my $*foo = C.new(:bar(1)); temp $*foo.bar = 2;

[10:42] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[10:42] <chloekek> That makes sense thanks ugexe.

[10:43] *** MasterDuke joined
[10:50] *** netrino joined
[10:58] *** rindolf left
[11:01] *** sena_kun joined
[11:06] *** rindolf joined
[11:09] *** |oLa| joined
[11:20] <Geth> ¦ doc: threadless-screw++ created pull request #2922: Some redactional changes and corrections

[11:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2922

[11:32] <chloekek> Is there a Str-like type that admits only the BMP/

[11:33] <lizmat> windows Bitmap ?

[11:34] <chloekek> Basic Multilingual Plane

[11:34] <chloekek> I think what I want is UCS-2. I need to work with a C library that uses UTF-16 except it can't cope with surrogates.

[11:36] <chloekek> p6: say 'hello'.encode('utf16').perl

[11:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «utf16.new(104,101,108,108,111)␤»

[11:36] <lizmat> we don't have a "bmp" encoding atm... but we do have UTF-16... perhaps some hacking on that might work?

[11:36] <chloekek> I think if that works with NativeCall I'll just use that.

[11:37] <chloekek> p6: use NativeCall; sub bla(utf16:D $s --> utf16:D) is native {*}

[11:37] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[11:47] *** robertle joined
[11:53] *** |oLa| left
[12:25] *** [particle]1 joined
[12:27] *** [particle] left
[12:40] *** nepugia left
[12:54] *** [particle] joined
[12:54] *** [particle]2 joined
[12:56] *** [particle]1 left
[12:57] *** [particle]1 joined
[12:59] *** [particle] left
[12:59] *** [particle]2 left
[13:05] *** [particle]1 left
[13:34] *** lucasb joined
[13:48] *** [particle] joined
[13:54] *** aborazmeh joined
[13:54] *** aborazmeh left
[13:54] *** aborazmeh joined
[13:57] *** MilkmanDan left
[13:59] *** MilkmanDan joined
[14:02] *** aborazmeh left
[14:08] *** araraloren_ left
[14:09] *** araraloren joined
[14:35] *** araraloren left
[14:36] *** araraloren joined
[15:44] *** tokomer joined
[15:45] *** wildtrees joined
[15:54] *** domidumont joined
[15:59] *** domidumont left
[16:24] *** araraloren left
[16:44] *** leah2 joined
[16:46] *** Sgeo joined
[16:48] *** Sgeo_ left
[16:50] *** Sgeo left
[16:51] <Geth> ¦ ecosystem: c36aae2be1 | Altai-man++ (committed using GitHub Web editor) | META.list

[16:51] <Geth> ¦ ecosystem: Promote fork of Text::LDIF

[16:51] <Geth> ¦ ecosystem: 

[16:51] <Geth> ¦ ecosystem: As the original module author has suggested at https://colabti.org/irclogger/irclogger_log/perl6?date=2019-06-29#l178

[16:51] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/c36aae2be1

[16:53] *** leah2 left
[16:55] *** Poohmaan joined
[16:56] *** Sgeo joined
[16:56] *** redhands joined
[16:59] *** cpan-p6 left
[17:00] *** cpan-p6 joined
[17:00] *** cpan-p6 left
[17:00] *** cpan-p6 joined
[17:01] *** redhands left
[17:01] *** rindolf left
[17:06] *** Poohmaan left
[17:06] *** leah2 joined
[17:11] *** a41 joined
[17:17] *** domidumont joined
[17:19] *** leah2 left
[17:20] *** a41 left
[17:23] *** Black_Ribbon joined
[17:50] *** anser joined
[17:59] *** rindolf joined
[18:17] *** rindolf left
[18:17] *** rindolf joined
[18:18] *** leah2 joined
[18:24] *** epony joined
[18:43] *** wildtrees left
[18:47] *** rindolf left
[18:50] *** Harzilein joined
[18:50] <Harzilein> hi

[18:51] <timotimo> moin

[18:58] *** anser left
[19:04] *** domidumont left
[19:05] *** domidumont joined
[19:09] *** |oLa| joined
[19:09] *** netrino left
[19:23] *** wildtrees joined
[19:24] *** tokomer left
[19:25] *** domidumont left
[19:40] <Kaiepi> if i wanted to get the uptime of a program, would it be more accurate to use BEGIN or INIT with my Instant constant START = now;?

[19:40] <Kaiepi> i might add an uptime function to $*VM or something at some point, but a cpan module for older versions of perl 6 would be nice to have

[19:42] <kawaii> I was curious about this too

[19:42] <yoleaux> 23 Jul 2019 14:01Z <hankache> kawaii: regarding the Rakudo Star release we'll start as soon 2019.07.1 is released

[19:45] <Kaiepi> also, does mi6 new <module> segfault for anyone else on a version of perl 6 at some point past 2019.07 or is it just a bug in the IO refactor i'm dogfooding?

[19:47] *** john_parr joined
[19:48] <sena_kun> I can't check if Lock is taken by someone and e.g. throw an exception instead of waiting?

[19:48] <jnthn> sena_kun: No, but see Lock::Async; you get a Promise and can then choose not to `await` it, or do a timeout, etc.

[19:48] <jnthn> m: say $*INITTIME;

[19:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Dynamic variable $*INITTIME not found␤  in block <unit> at <tmp> line 1␤␤»

[19:48] <jnthn> m: say $*INIT-TIME;

[19:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Dynamic variable $*INIT-TIME not found␤  in block <unit> at <tmp> line 1␤␤»

[19:48] <jnthn> Hm, thought something like that existing

[19:49] <jnthn> Kaiepi: You'd want INIT, as BEGIN is precomp'd. Also, a constant is calculated at BEGIN time (because it's constant :))

[19:49] <jnthn> m: say $*INIT-INSTANT

[19:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Instant:1564257037.245931␤»

[19:50] <jnthn> Kaiepi: But ^^ already exists :)

[19:50] <sena_kun> jnthn, I wonder if I am doing it wrong, the general thing is that all my Cro::LDAP ops are concurrent, _EXCEPT_ binding, which must be synced, so I thought of taking a lock for how much it is needed to send request and await for response, but in other methods I need to not await(because yikes, where is my concurrency then), but to check if we are in the middle of binding or not.

[19:50] <Kaiepi> oh

[19:50] <Kaiepi> thanks

[19:51] <jnthn> sena_kun: Hm, I'd probably just have some Promise that I don't keep until binding is done

[19:52] <jnthn> And make sure to await that before doing another operation

[19:53] <sena_kun> jnthn, I am not yet convinced I want to queue operations instead of throwing an exception.

[19:53] <sena_kun> Maybe I want, though. Just not sure.

[19:53] <jnthn> sena_kun: Ah, then you can just check the Promise isn't kept yet :)

[19:53] <jnthn> Or if it's broken, throw that exception :)

[19:54] <sena_kun> I am also worried that things like `$!bind-p = Promise.new` are not very, ahem, thread-safe.

[19:54] <sena_kun> inb4: just create an atomic semaphore

[19:55] <sena_kun> hmm, though one can't nicely await for it...

[19:57] <sena_kun> ah, as a source of possible misunderstanding: binding is not always happening at the beginning of the session and it can be done many times, that's why I am thinking that on every bind doing `$bind-in-progress = Promise.new` is not very safe.

[19:58] <Kaiepi> ok the segfault is a bug in my own code, MVM_decoder_set_separators was getting passed a type object

[19:59] <jnthn> sena_kun: Ah...you're worried about two bindings being started concurrently?

[19:59] <Kaiepi> should probably panic with a decent error when that happens

[19:59] <jnthn> sena_kun: Well, you can always try to cas in the Promise :)

[19:59] <sena_kun> jnthn, how can I?

[20:00] <jnthn> Something like `my $p = Promise.new; cas($!bind-p, Any, $p) === Any or die "NO! ur already binding!"` :)

[20:00] <sena_kun> interesting...

[20:02] *** john_parr left
[20:08] *** [dpk] joined
[20:10] <sena_kun> eeeerm

[20:10] <sena_kun> >Will reliably only ever print Master! one time

[20:10] <sena_kun> for me it reliably prints nothing. :S

[20:11] <sena_kun> https://docs.perl6.org/routine/cas#(Scalar)_sub_cas <- this example

[20:11] <sena_kun> with `else { say 'Not' }` it says `Not` four times.

[20:11] <timotimo> why would it === Any?

[20:11] <timotimo> when the two constants are Any.new?

[20:12] <sena_kun> no idea

[20:12] <timotimo> that seems wrong

[20:12] <sena_kun> if I replace it with `NOT_STARTED`, it is correct

[20:12] <sena_kun> I'll patch it now...

[20:13] <timotimo> that was in jonathan's original check-in, even

[20:13] <Geth> ¦ doc: 791582d92d | Altai-man++ (committed using GitHub Web editor) | doc/Type/Scalar.pod6

[20:13] <Geth> ¦ doc: Correct example code

[20:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/791582d92d

[20:13] <synopsebot> Link: https://doc.perl6.org/type/Scalar

[20:14] *** netrino joined
[20:15] *** gfldex joined
[20:17] <sena_kun> are you mah mastah...

[20:18] *** rindolf joined
[20:24] <cpan-p6> New module released to CPAN! Gnome::Gtk3 (0.17.6) by 03MARTIMM

[20:37] *** [dpk] left
[20:48] <vrurg> timotimo: https://gist.github.com/vrurg/00d8166c28f716bf42ec4231e93c7e17 - do you know what could this be?

[20:50] *** chloekek left
[20:51] <timotimo> any number of things; you can get more info from the moar process you're attached to with the env var MDS_PROTOCOL

[20:52] <vrurg> Damn it, that's the case where I started it without this variable. Ok, thanks!

[20:52] <timotimo> ;(

[20:53] <vrurg> Will have to wait for another 20mins when the process hangs. ;) 

[20:53] <timotimo> oh no :(

[20:53] <vrurg> lunch time anyway....

[20:53] <timotimo> https://www.youtube.com/watch?v=Sw5tHvnUu7k&t=241s - have some good vidya game music while you wait?

[21:25] *** squashable6 left
[21:27] *** squashable6 joined
[21:32] *** nepugia joined
[21:37] *** echoprinter_ joined
[21:39] *** echoprinter_ left
[21:46] <MasterDuke> m: say (-77371252455337) +> 3

[21:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-9671406556918␤»

[21:46] <MasterDuke> m: say -(77371252455337 +> 3)

[21:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-9671406556917␤»

[21:46] <MasterDuke> is ^^^ correct?

[21:46] *** dpk joined
[21:52] <tobs> MasterDuke: that seems to be the theme in roast tests: https://github.com/perl6/roast/blob/master/S03-operators/numeric-shift.t

[21:53] <tobs> the difference by one, I mean

[21:59] <MasterDuke> tobs++

[22:12] <samcv> there's crazy new unicode numbers

[22:12] <samcv> TAMIL FRACTION THREE SIXTY-FOURTHS is 

[22:13] <samcv> their values are 0.046875, 0.03125, 0.015625, 0.0125 and 0.003125

[22:13] *** |oLa| left
[22:17] *** squashable6 left
[22:21] *** rindolf left
[22:21] *** squashable6 joined
[22:22] *** squashable6 left
[22:22] *** squashable6 joined
[22:26] <tbrowder> hi, folks: \o/

[22:28] *** squashable6 left
[22:29] <tbrowder> i need some help rebuilding rakudo master branch after working on a local branch with changes

[22:29] *** squashable6 joined
[22:31] *** cpan-p6 left
[22:31] <tbrowder> i generally build with --gen-moar --gen-nqp --backends=moar

[22:31] *** cpan-p6 joined
[22:31] *** cpan-p6 left
[22:31] *** cpan-p6 joined
[22:32] <tbrowder> and that gets me a fresh nqp and moarvm in the local dir

[22:32] <tbrowder> then i checkout my dev barnch and cobble away...

[22:35] <tbrowder> when i want to go back and rebuild an updated master, i don't always get a clean start with a make clean or make distclean

[22:36] *** nepugia left
[22:36] <tbrowder> is there a good way to start over in the local dir or do i have to blow the whole mess away and reclone?

[22:37] *** kensanata joined
[22:39] <tbrowder> i seem to be having conflicts with the nqp-configure submodule and am not sure how to deal with it when switching between master and another branch.

[22:39] <samcv> tbrowder, i usually don't use --gen-moar and --gen-nqp and just compile each separately. since i had similar issues to you

[22:40] <tbrowder> that should be "3rdparty/nqp-configure"

[22:41] <samcv> tbrowder, wait so did you modify nqp or moarvm. or rakudo

[22:42] <tbrowder> i'm working on rakudo only but it does get changed.

[22:42] <tbrowder> i

[22:42] <sena_kun> how can a type object print its type correctly with `say $foo`, but `say $foo.WHAT` prints Scalar instead of type?

[22:42] <timotimo> $foo<>.WHAT

[22:42] <sena_kun> hmmm...

[22:43] <tbrowder> samcv: actually, i'm modifying rakudo's nqp as well as its pm6 files (but not touching the real nqp or moarvm source)

[22:45] <sena_kun> the odd thing here is that I am doing all types of type generation with MOP, and when I added `trait_mod:<is>($attribute-to-add-into-class, :rw)`, then I got scalars, but without it there are no wrapper.

[22:45] <sena_kun> I wonder if that's a bug or not.

[22:45] <timotimo> without "it"?

[22:45] <tbrowder> keeping nqp and moarvm outside the rakudo clone is probably the way to go as you are doing.

[22:45] <sena_kun> without rw trait

[22:46] <sena_kun> ooooh

[22:46] <sena_kun> it actually may be just natural thing...

[22:46] <timotimo> well, when you want to assign to what an accessor method returns, it's gotta be a scalar

[22:46] <timotimo> otherwise there's no assignment possible

[22:47] <sena_kun> m: constant C := Metamodel::ClassHOW.new_type(name => 'Foo'); my $attr = Attribute.new(name => '$!aa', type => Str, package => C, :has_accessor); trait_mod:<is>($attr, :rw); C.^add_attribute($attr); C.^compose; my $ca = C.new; say $ca.aa.WHAT;

[22:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Str)␤»

[22:47] <sena_kun> I can't reproduce it with this golf. :S

[22:47] <sena_kun> m: class A { has Int $.a is rw; }; A.new.a.WHAT.say;

[22:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Int)␤»

[22:47] <sena_kun> and with this

[22:52] <AlexDaniel> samcv: heh, nice. More stuff to work with when golfing https://github.com/AlexDaniel/raku-golf-cheatsheet#unicode-numeric-literals

[23:06] <tbrowder> hm, looking at Configure.pl --help i don't see anything like --with-moarvm=<path to moarvm>

[23:06] *** wildtrees left
[23:08] <MasterDuke> tbrowder: --prefix

[23:09] *** wildtrees joined
[23:11] <vrurg> tbrowder: --with-moarvm is nqp's Configure option.

[23:11] <vrurg> But as MasterDuke noted, --prefix is prefereable.

[23:20] <tbrowder> arg, mea culpa ref nqp config and moarvm

[23:22] *** Cabanossi left
[23:22] *** wildtrees left
[23:23] <tbrowder> but, ref option --prefix, how do you use it? do you not configure and build in the rakudo cloned repo!

[23:23] *** Cabanossi joined
[23:23] <tbrowder> s/!/?/

[23:24] <timotimo> --prefix is where everything lands, there'll be a "bin" folder with moar and perl6-m and nqp-m and all that

[23:24] <timotimo> and there'll be a lib folder i think

[23:24] <timotimo> bin, include, lib, and share

[23:25] <tbrowder> i'm assuming my probs are stemming from the recent major changes to  Configure.pl since i have been using my build process for a long time without the current probs

[23:26] <timotimo> maybe all you need is a "git submodule update"

[23:27] <tbrowder> ah, maybe...

[23:30] <tbrowder> erg, that didn't work...i'll try the separate moarvm and nqp method

[23:31] *** |oLa| joined
[23:31] <tbrowder> thanks all (samcv, vrug, timotimo)

[23:32] <tbrowder> and MasterDuke

[23:32] *** |oLa| left
[23:34] *** MilkmanDan left
[23:36] *** MilkmanDan joined
[23:57] *** Sgeo_ joined
[23:58] *** aborazmeh joined
[23:58] *** aborazmeh left
[23:58] *** aborazmeh joined
