[00:00] *** reportable6 left
[00:00] <Kaiepi> i'm writing a slang and want to call a lexical routine used in Perl6::Actions. how can i do that, if it's possible?

[00:02] <Kaiepi> i tried poking around in OUTER, CALLER, etc. from the method of the role that gets mixed in but i can't find it

[00:02] *** Kaypie left
[00:03] *** reportable6 joined
[00:03] *** ChanServ sets mode: +v reportable6

[00:05] *** [particle] left
[00:06] <Geth> ¦ whateverable: 263a682de4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Bits.pm6

[00:06] <Geth> ¦ whateverable: Plus sign can't be part of the nickname

[00:06] <Geth> ¦ whateverable: 

[00:06] <Geth> ¦ whateverable: I don't know what I was thinking.

[00:06] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/263a682de4

[00:08] *** tellable6 left
[00:10] *** evalable6 joined
[00:10] *** ChanServ sets mode: +v evalable6

[00:11] <AlexDaniel> m: say 42

[00:11] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[00:12] *** [particle] joined
[00:13] *** tellable6 joined
[00:21] *** [particle]1 joined
[00:23] *** [particle] left
[00:23] *** aborazmeh joined
[00:23] *** aborazmeh left
[00:23] *** aborazmeh joined
[00:27] *** [particle]1 left
[00:31] *** [particle] joined
[00:45] *** aborazmeh left
[00:57] *** pamplemousse joined
[01:10] *** evalable6 left
[01:12] *** evalable6 joined
[01:23] *** tellable6 left
[01:24] *** Sgeo_ left
[01:25] <aearnus[m]> got around to submitting an issue for zef based on what I was talking about the other day

[01:25] <aearnus[m]> https://github.com/ugexe/zef/issues/310

[01:26] *** Sgeo joined
[01:27] *** tellable6 joined
[01:27] *** ChanServ sets mode: +v tellable6

[01:34] *** xinming_ left
[01:41] *** molaf left
[01:54] *** molaf joined
[01:57] *** mahafyi left
[02:00] *** [particle] left
[02:01] *** Manifest0 left
[02:02] *** Manifest0 joined
[02:03] <aearnus[m]> currently trying to nuke my entire perl6 install and test from scratch to see if it'll work

[02:09] *** aborazmeh joined
[02:09] *** aborazmeh left
[02:09] *** aborazmeh joined
[02:11] *** pamplemousse left
[02:23] *** pamplemousse joined
[02:26] <Geth> ¦ whateverable: 91a097da66 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Userlist.pm6

[02:26] <Geth> ¦ whateverable: Pass along userlist events

[02:26] <Geth> ¦ whateverable: 

[02:26] <Geth> ¦ whateverable: Otherwise nothing else will be able to catch them. Heartbeat doesn't

[02:26] <Geth> ¦ whateverable: work without this.

[02:26] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/91a097da66

[02:27] *** evalable6 left
[02:28] *** tellable6 left
[02:29] *** Cabanossi left
[02:30] *** evalable6 joined
[02:31] *** tellable6 joined
[02:31] *** ChanServ sets mode: +v tellable6

[02:37] *** molaf left
[02:40] *** Cabanossi joined
[02:43] *** pamplemousse left
[02:43] *** pamplemousse joined
[02:51] *** aborazmeh left
[02:59] *** pamplemousse left
[03:02] *** lucasb left
[03:54] *** guifa joined
[03:55] * guifa returns from the depths of the unknown

[04:00] *** [particle] joined
[04:05] *** [particle] left
[04:20] *** [particle] joined
[04:22] <aearnus[m]> it's on the tip of my tongue, but is there a more elegant way to write this? https://github.com/Aearnus/crystallarium/blob/master/lib/Crystallarium/MicroAccount.p6#L17-L21

[04:29] <Elronnd> @!tokens.push(LoginToken.new).tail

[04:33] <aearnus[m]> m: (given 5 { }).say

[04:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Nil␤»

[04:33] <aearnus[m]> Elronnd: clever! that went right over my head somehow

[04:33] <aearnus[m]> thanks

[04:49] *** curan joined
[05:23] *** xinming joined
[05:34] *** nadim_ joined
[05:45] *** rindolf joined
[05:47] *** xinming left
[05:52] *** stanleytam joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:03] *** ChanServ sets mode: +v reportable6

[06:30] *** jmerelo joined
[06:35] <masak> it might be just my personal taste, but taking .tail there while you yourself constructed the object feels... excessive

[06:36] <aearnus[m]> it looks so much nicer than the 3 lines of construction -> pushing -> returning tho

[06:36] <masak> how about `@!tokens.push(LEAVE return LoginToken.new);`? *grin*

[06:37] <masak> m: my @a; sub foo { @a.push(LEAVE return 42) }; say foo(); say @a.perl

[06:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Attempt to return outside of any Routine␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:37] <masak> aww

[06:38] <masak> ...is that a bug? I thought LEAVE executed dynamically inside the scope of the routine, before unwinding?

[06:38] * masak tries to confirm this with S04

[06:40] <aearnus[m]> in theory that's really slick

[06:40] <masak> I couldn't find anything substantiating that. closest thing I read was "`LEAVE` can see its lexical variables", but it seems it's silent on when exactly `LEAVE` fires

[06:41] * masak consults the spectests

[06:43] <masak> hm, the spectests are silent on this as well

[06:44] <masak> jnthn: what do you think -- do you have any intuition on when `LEAVE` runs -- before or after leaving the dynamic scope of a routine ("returning")? specifically, does it make sense to `return` from a `LEAVE`? (the way one can `return` from a `CATCH`)

[06:45] <masak> hm, could be there's a catch-22 there. don't want the `return` to trigger a new `LEAVE` process. clearly we're already LEAVEing at that point

[06:48] *** ravenous_ joined
[06:49] <aearnus[m]> Solution: make `LoginToken.new` throw & and put the return in a `CATCH` phaser instead :^)

[06:49] <aearnus[m]> hehe, that's too much dark magic

[06:52] *** xinming joined
[06:59] <masak> haha

[06:59] <masak> I like the way you think, though

[07:09] *** __jrjsmrtn__ joined
[07:11] *** Sgeo_ joined
[07:12] *** _jrjsmrtn left
[07:14] *** Sgeo left
[07:28] <Geth> ¦ doc: 6be75b81ef | (JJ Merelo)++ | 2 files

[07:28] <Geth> ¦ doc: Some clarification for integer bitwise XOR operators and others

[07:28] <Geth> ¦ doc: 

[07:28] <Geth> ¦ doc: Works towards #2939. The main problem is that Boolean bitwise

[07:28] <Geth> ¦ doc: operators are not indexed, so they are hard to find. Coming up next.

[07:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6be75b81ef

[07:28] <Geth> ¦ doc: 95d5707238 | (JJ Merelo)++ | doc/Language/operators.pod6

[07:28] <synopsebot> Link: https://doc.perl6.org/language/operators

[07:28] <Geth> ¦ doc: Adds the Boolean bitwise XOR operator

[07:28] <Geth> ¦ doc: 

[07:28] <Geth> ¦ doc: Which was not documented. That closes #2939

[07:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/95d5707238

[07:48] *** ravenous_ left
[07:49] *** nepugia joined
[07:49] *** dolmen joined
[07:51] *** zakharyas joined
[07:55] *** tilpner left
[07:55] *** scimon joined
[07:56] *** tilpner joined
[08:10] *** chsanch joined
[08:16] *** satori__ left
[08:26] *** Sgeo__ joined
[08:29] *** Sgeo_ left
[08:39] *** chloekek joined
[08:56] *** jmerelo left
[08:58] *** leont joined
[09:03] *** satori__ joined
[09:07] *** ravenous_ joined
[09:10] *** sena_kun joined
[09:11] *** ravenous_ left
[09:24] <chloekek> p6: my $x = 0 but True; say +$x; say ?$x;

[09:24] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0␤True␤»

[09:25] <chloekek> No more need for '0 but true' :P

[09:29] *** leont left
[09:32] <jnthn> masak: LEAVE runs when we're already certainly leaving the routine; while it's sufficiently in dynamic scope that we can see any my $*foo declared in there, we're already outsie of the `return` control exception handler

[09:32] <jnthn> masak: Basically it's done as part of the stack unwind, so we've already done the VM-level return instruction by the point it's triggered

[09:32] <jnthn> So you can't sensibly initiate another round of returning

[09:33] <jnthn> m: sub foo() { LEAVE .say; return 42 }; foo()

[09:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Any)␤»

[09:33] <jnthn> m: sub foo() { KEEP .say; return 42 }; foo()

[09:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Any)␤»

[09:33] <jnthn> m: sub foo() { LEAVE { .say }; return 42 }; foo()

[09:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Any)␤»

[09:33] <jnthn> Oh, right...I'm thinking of POST :)

[09:34] <jnthn> But POST runs at that point too but it gets teh return value

[09:34] <jnthn> m: sub foo() { POST { .say }; return 42 }; foo()

[09:34] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[09:34] <jnthn> Like that

[09:34] <jnthn> So we need to have already been returning for that also 

[09:47] *** cpan-p6 left
[09:47] *** cpan-p6 joined
[09:47] *** cpan-p6 left
[09:47] *** cpan-p6 joined
[09:51] *** fake_space_whale joined
[09:55] *** pilne left
[10:05] *** cpage joined
[10:07] *** stanleytam left
[10:26] <Kaiepi> my networking grant's off to a bit of a slow start since i chose to start with bug fixes mainly, but at some point this week probably i'll be getting started on some of the more exciting changes

[10:26] <Kaiepi> synchronous udp/unix/raw socket support soon(tm)

[10:41] *** dolmen left
[10:43] <moritz> \o/

[11:09] *** dolmen joined
[11:31] *** ravenousmoose left
[11:31] *** ravenousmoose joined
[11:31] <AlexDaniel> Kaiepi++ :)

[11:44] <El_Che> (Damn, I like the Rakudo name. Can we call the language Rakudo and the compiler raku?)

[11:44] * El_Che ducks

[11:49] <moritz> let's name the compiler doraku and the language rakudo -- what could possibly go wrong? :-)

[11:52] <El_Che> moritz: <insert Fry's gif "I don't know if serious or actually a great idea" here>

[11:53] <moritz> FTR, that was not serious

[11:53] *** mowcat joined
[11:53] <El_Che> I know :)

[11:56] *** Black_Ribbon left
[11:59] *** dolmen left
[11:59] *** nepugia left
[12:00] *** reportable6 left
[12:04] *** reportable6 joined
[12:06] *** ravenousmoose left
[12:10] *** ravenousmoose joined
[12:12] *** dolmen joined
[12:13] <Geth> ¦ problem-solving/path-to-raku: 04108b11a0 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[12:13] <Geth> ¦ problem-solving/path-to-raku: Remove suggestion of .code, go for .raku.

[12:13] <Geth> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/04108b11a0

[12:15] <Geth> ¦ problem-solving/path-to-raku: 9301d09db5 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[12:15] <Geth> ¦ problem-solving/path-to-raku: Remove suggestion for new backcronym for NQP

[12:15] <Geth> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/9301d09db5

[12:16] *** pamplemousse joined
[12:20] *** Visitor joined
[12:23] *** Cabanossi left
[12:33] *** zakharyas left
[12:34] *** Cabanossi joined
[12:40] *** pamplemousse left
[12:40] *** Visitor is now known as pamplemousse

[12:41] *** lucasb joined
[12:42] *** Guest93 joined
[12:59] *** domidumont joined
[13:06] *** curan left
[13:08] *** aborazmeh joined
[13:08] *** aborazmeh left
[13:08] *** aborazmeh joined
[13:22] *** epony left
[13:26] *** Guest93053 joined
[13:27] *** reportable6 left
[13:32] *** reportable6 joined
[13:32] *** ChanServ sets mode: +v reportable6

[13:34] *** shareable6 left
[13:34] *** committable6 left
[13:34] *** greppable6 left
[13:35] *** squashable6 left
[13:35] *** committable6 joined
[13:35] *** guifa left
[13:37] *** shareable6 joined
[13:37] *** ChanServ sets mode: +v shareable6

[13:38] <scimon> Trying to make points about Perl6 as a language and one of the criteria is "Hireability" I'm trying to make the point that is we advertise jobs with Perl6 as a valid language we'll basically be the only company in London doing so. 

[13:38] <scimon> Which to my mind is a good thing.

[13:38] *** squashable6 joined
[13:38] *** ChanServ sets mode: +v squashable6

[13:38] *** greppable6 joined
[13:39] <timotimo> i personally am not going to relocate to not-so-great britain :)

[13:41] <scimon> Point.

[13:41] <tadzik> well, if you're looking for remotes... :)

[13:41] <scimon> (I will hopefully be relocating to soon to be independent Scotland)

[13:41] <El_Che> scimon: if your ambition is to fill a small team, sure

[13:42] <tadzik> I can imagine that attracting some adventurous Perl 5 developers

[13:42] <El_Che> scimon: in a wider scope Perl[56] is not a magnet for the younger generation

[13:43] <scimon> Well that's the thing. We do seem to be getting interest in Perl6 from all over. 

[13:43] <scimon> Heck I find getting Perl5 devs to try it quite hard to do. 

[13:43] *** epony joined
[13:44] <El_Che> scimon: it would trigger my interest, certainly. But a alarm would be triggered about the marketability of Perl 6 in my resume

[13:52] <lizmat> scimon: in my opinion, the only Perl 5 devs that want to try out Perl 6 are no longer programming Perl 5 for a living

[13:53] *** mahafyi joined
[13:55] <El_Che> scimon: if you convert Perl 5 programmers to 6, Booking will send hitmen to get you

[13:56] <El_Che> it's difficult enough to find Perl 5 people as it is :)

[13:56] <lizmat> El_Che: please don't try to spread any funny FUD

[13:57] <El_Che> lizmat: do you thing people would really believe the hitmen story?

[13:57] <lizmat> people believe a lot of things about Booking

[13:57] <El_Che> wow

[13:58] <El_Che> we live in a funny time

[13:58] <lizmat> yes, indeed we do

[13:58] <El_Che> for the record, the hitmen story is fake news, they were already fully booked for the Epstein case

[14:00] <lizmat> :-)

[14:04] <El_Che> (however, finding perl 5 people is not simple)

[14:05] <El_Che> scimon does hiring, so maybe he has a different experience (it's been a while for me)

[14:05] <lizmat> finding people *wanting to do Perl 5* is hard

[14:06] *** satori__ left
[14:06] <robertle> I wonder whether it makes sense to focus on the product during the hiringm not the tech stack, and look for people that are comfortable with multiple languages

[14:07] <robertle> it's kinda weird to look for a Java developer as well. I mean I don't care about the java part and neither should the applicant, we should both care about the product we want to build and use whatever to achieve it. 

[14:07] <El_Che> robertle: ideally, yes. In practice, when enough jobs are available, people look specifically for a certain tech or stack

[14:07] <robertle> "whatever" could be java in one environment, or fortran in another

[14:07] <El_Che> lots of people I know are "Java Spring(boot)" people

[14:07] <El_Che> and won't look at nothing else

[14:08] <El_Che> people doing dynamic languages seem more flexible

[14:08] <robertle> yeah I know, just saying that sometimes companies make matters worse by explicitely stating a tech stack as a role description

[14:09] <El_Che> robertle: it's often out of despair. Someone added a "go scripting" to a description on a job we had open :)

[14:09] <El_Che> some HR people are technical enough to be dangerous :)

[14:09] <timotimo> "visual perl6"? :)

[14:09] <robertle> just to make it sound appealing? we have similar things here, where pretty random buzzwords get added to job ads to make them more likely to be googled :)

[14:10] <El_Che> timotimo++

[14:10] <timotimo> "no dogs"

[14:10] <timotimo> "60 years experience in perl6 a must"

[14:13] *** Guest93 left
[14:13] *** Guest93 joined
[14:24] *** dolmen left
[14:29] *** dolmen joined
[14:32] *** aborazmeh left
[14:32] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue .perl should be replaced with a pluggable system https://github.com/perl6/problem-solving/issues/91

[14:51] *** lembark joined
[14:57] *** lembark left
[15:23] *** Guest93053 left
[15:26] *** chloekek left
[15:45] <Guest93> Hi! So, i've been looking into learning more about grammars, made this simple calculator as an exercise https://pastebin.com/VTVRMteJ but found the case in which my implementation performs very poorly (the last line in the paste). My understanding is that it tries to match every subgrammar prior to getting to the trivial case, and the time spent in

[15:45] <Guest93> creases exponentially. Is there a common way to address this? Do i simply avoid this recursive style of definitions?

[15:46] <moritz> Guest93: it generally helps to factor out alternations on the left

[15:47] <moritz> rule term { <factor> [ $<op>=['+' | '-'] <expression> ]? }

[15:48] <Guest93> I see

[15:48] <moritz> erm, mixed up the symbols, but the structure should be clear

[15:49] <Guest93> Yes, pretty clear, i'll try that, thanks!

[15:49] <moritz> good luck! :D

[15:49] <jnthn> When I do such things I typically just parse like <term> [<infix> <term>]* and then do a precedence sort in the actions

[15:52] <Guest93> Interesting, i'll try that too after, seems a bit more complex, but would be helpful to understand these better :D  Thanks!

[15:57] *** mowcat left
[15:58] <woolfy> Guest93 : This book might be of interest to you too...  https://www.apress.com/gp/book/9781484232279

[15:59] *** satori__ joined
[16:10] *** aborazmeh joined
[16:10] *** aborazmeh left
[16:10] *** aborazmeh joined
[16:14] <Geth> ¦ whateverable: c46a08fc66 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Tellable.p6

[16:14] <Geth> ¦ whateverable: Do not pass messages if the user reacts immediately

[16:14] <Geth> ¦ whateverable: 

[16:14] <Geth> ¦ whateverable: Implements #353, but no tests are added.

[16:14] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/c46a08fc66

[16:14] *** tellable6 left
[16:15] *** holyghost left
[16:15] <Guest93> moritz instantaneous now! woolfy, i'll check it out, thanks again, everyone :)

[16:15] *** holyghost joined
[16:17] *** tellable6 joined
[16:23] *** MilkmanDan left
[16:24] *** MilkmanDan joined
[16:30] <scimon> lizmat: The Perl5 hiring thing is part of the problem we have

[16:30] <scimon> (Right running away)

[16:30] *** nadim_ left
[16:30] *** scimon left
[16:32] *** MilkmanDan left
[16:32] *** aborazmeh left
[16:34] *** MilkmanDan joined
[16:41] *** molaf joined
[16:43] *** stux|RC-only left
[16:43] *** dolmen left
[16:45] *** sena_kun left
[16:49] *** domidumont left
[16:50] *** Doc_Holliwood joined
[16:50] *** domidumont joined
[16:51] <Doc_Holliwood> Can somebody explain this whenever Promise.Kept idiom to me? ( https://pastebin.com/QNs1SULU )

[16:51] <Doc_Holliwood> I don't understand why this asynchronizes the supply

[16:54] *** stux|RC-only joined
[16:54] <AlexDaniel> Doc_Holliwood: where did you find that? I don't think it does anything useful…

[16:56] <Doc_Holliwood> It works as intended. I just don't understand why it does that. The asynchronize sub was written by jnthn over on stackoverflow

[16:56] <Doc_Holliwood> https://stackoverflow.com/questions/57486372/concurrency-react-ing-to-more-than-one-supply-at-a-time

[16:57] <AlexDaniel> ahhh

[16:57] *** maettu joined
[17:07] *** wildtrees joined
[17:07] *** leont joined
[17:09] *** wildtrees left
[17:11] <AlexDaniel> Doc_Holliwood: I don't get it too :)

[17:13] <Doc_Holliwood> Thank you, that helps :-D

[17:17] *** pat_js joined
[17:17] *** pat_js left
[17:21] *** Sgeo joined
[17:23] *** Cabanossi left
[17:24] *** Sgeo__ left
[17:25] *** pilne joined
[17:34] *** Cabanossi joined
[17:58] <cpan-p6> New module released to CPAN! Red (0.0.4) by 03FCO

[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:05] <Kaiepi> i tried reading the code for Promise to see if i could work out why Promise.kept is there and... yeah i don't get it either

[18:06] *** sjm_uk joined
[18:06] <timotimo> Promise.kept(1) creates a promise that is already kept with the value 1

[18:06] <tellable6> 2019-08-19T16:18:08Z #moarvm <AlexDaniel> timotimo it should work now

[18:06] <timotimo> Promise.kept creates one that's kept with the value True

[18:07] <lizmat> Kaiepi: if your API requires you to return a Promise, but you do not have anything to wait for, Promise.kept allows you to return one without having to wait

[18:07] <AlexDaniel> timotimo: so it doesn't work!

[18:07] <timotimo> so all it does is immediately launch the whenever when the supply block's setup is finished

[18:07] <timotimo> AlexDaniel: whoops

[18:10] <Kaiepi> yeah, i got that part but why isn't it redundant to have there?

[18:11] <timotimo> because here you want to make it be installed after initial setup has finished

[18:15] *** Black_Ribbon joined
[18:17] <Doc_Holliwood> timotimo: yes, but what in that statement is saying "async from here on?" 

[18:18] <Doc_Holliwood> the output of that snippet is 221222 you see, the two supplies run in parallel

[18:18] <Doc_Holliwood> but why?

[18:26] <timotimo> i believe it's because the setup code runs synchronously, and subscribing to the $supply1 and $supply2 will run the setup code of these synchronously, too, and they have await in them

[18:27] *** sauvin left
[18:27] <timotimo> but if you whenever Promise.kept, it'll finish the outermost setup code first, and then the "await" can get execution to go back to other tasks

[18:27] <timotimo> that could be wrong

[18:27] *** sena_kun joined
[18:28] <timotimo> BBL

[18:36] *** ravenous_ joined
[18:41] <Geth> ¦ whateverable: 72b3976633 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Tellable.p6

[18:41] <Geth> ¦ whateverable: Sleep a little bit between messages

[18:41] <Geth> ¦ whateverable: 

[18:41] <Geth> ¦ whateverable: Otherwise they are sometimes delivered out of order.

[18:41] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/72b3976633

[19:12] *** mowcat joined
[19:13] *** aborazmeh joined
[19:13] *** aborazmeh left
[19:13] *** aborazmeh joined
[19:21] <Geth> ¦ doc/master: 4 commits pushed by Coke++

[19:21] <Geth> ¦ doc/master: a269195667 | add new word.

[19:21] <Geth> ¦ doc/master: e3fd076232 | add possessive

[19:21] <Geth> ¦ doc/master: 9a6a63e664 | pass fussy link test

[19:21] <Geth> ¦ doc/master: 6986a510b5 | learn new word

[19:21] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/95d570723831...6986a510b5fc

[19:21] *** [Coke] joined
[19:22] * [Coke] waves.

[19:22] *** nepugia joined
[19:27] *** domidumont left
[19:30] *** Sgeo_ joined
[19:33] *** Sgeo left
[19:37] *** [Sno] left
[19:41] *** [Sno] joined
[19:46] *** adu joined
[19:49] *** quester joined
[19:50] *** aborazmeh left
[19:55] *** Altai-man_ joined
[19:56] <robertle> what's a good, modern example of a perl module with native code inside? 

[19:57] *** sjm_uk left
[19:58] *** sena_kun left
[19:58] <Doc_Holliwood> by definition all perl6 is modern, isn't it? do you mean, idiomatic?

[19:58] *** Kaiepi left
[19:59] *** Kaiepi joined
[20:03] <robertle> mostly non-panda :)

[20:06] *** fake_space_whale left
[20:07] *** cpup left
[20:08] <tadzik> :(

[20:08] *** [Sno] left
[20:09] <Doc_Holliwood> what's wrong tadzik? did somebody steal your closures?

[20:10] * [Coke] remembers when he used to be able to write code at work.

[20:10] *** [Sno] joined
[20:10] * lizmat hugs tadzik

[20:13] *** |Sno| joined
[20:14] *** [Sno] left
[20:17] *** Altai-man_ left
[20:19] *** fake_space_whale joined
[20:22] *** ravenous_ left
[20:22] <tadzik> :)

[20:30] <aearnus[m]> if I wanted to give a mini talk about Perl 6 at my local hackathon, who would I have to talk to / get permission from?

[20:30] *** dolmen joined
[20:31] <[Coke]> ... no one?

[20:31] <[Coke]> we like it when people talk about Perl 6

[20:31] *** pmurias joined
[20:31] <[Coke]> or do you mean a *specific* talk that someone already gave?

[20:32] <aearnus[m]> isn't the branding under some sort of licensing [Coke]

[20:32] <aearnus[m]> Nah nah I just meant stuff like using the Camelia logo

[20:32] <moritz> aearnus[m]: you get permission from your hackathon organizers :-)

[20:32] <moritz> aearnus[m]: you can use Camelia and the Perl trademark for communication about Perl 6 without any need for permission

[20:33] <moritz> https://github.com/perl6/mu/blob/master/misc/camelia.txt

[20:33] <moritz> The Camelia image is a trademark of Larry Wall, and permission is

[20:33] <moritz> granted for non-exclusive use to label anything related to Perl 6,

[20:33] <moritz> provided the image is labeled as a trademark when used as a main logo

[20:33] <moritz> on a page.  (It is not necessary to so label icons, or other casual

[20:33] <moritz> uses not related to business.)  Such labeling may be done either by

[20:33] <moritz> footnote or with a TM mark.

[20:34] <moritz> see https://github.com/perl6/marketing/tree/master/LOGOs for logo variants

[20:36] *** |Sno| left
[20:36] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/08/19/2019-31-32-33-and-were-back/

[20:36] <aearnus[m]> awesome! thank you moritz !

[20:36] <aearnus[m]> lizmat++

[20:38] <moritz> lizmat++

[20:53] <leont> Is spider-mario also in this chat by another name? The rakudo package for arch hasn't been updated since april (and I think we've had a stable release since)

[20:57] *** ravenous_ joined
[20:58] <timotimo> .seen spider-mario

[20:58] <tellable6> timotimo, I saw spider-mario 2017-03-23T10:08:23Z in #perl6: <spider-mario> (wow, already)

[20:59] <timotimo> oof, that has been a while

[21:02] *** dolmen left
[21:02] *** ravenous_ left
[21:02] <MasterDuke> leont: i think he filed a rakudo issue because the change to the build process messed with his pkgbuild

[21:02] *** khisanth_ left
[21:03] <MasterDuke> R#3090

[21:03] <synopsebot> R#3090 [open]: https://github.com/rakudo/rakudo/issues/3090 [BLOCKER][build] Installer does not play well with Arch Linux’s makepkg

[21:03] <leont> Ah, that would explain the situation

[21:09] *** pamplemousse left
[21:09] *** pamplemousse joined
[21:10] *** dolmen joined
[21:13] *** dolmen left
[21:16] *** khisanth_ joined
[21:20] *** parrot_raiser joined
[21:22] <parrot_raiser> I've just tried to run p6doc after installing rakudo. It aborts with a fairly complex error message, ultimately about "too many positionals" in build_index.  Any suggestions?

[21:23] <parrot_raiser> Sorry, that's "p6doc build"

[21:23] <[Coke]> what version of rakudo, p6doc, and OS?

[21:24] <[Coke]> (maybe update?)

[21:26] <parrot_raiser> rakudo 2019.03.1, the p6doc that came with it, Mageia 7 Linux - I'd quote uname but can't get a screen scrape.

[21:28] <parrot_raiser> Linux localhost 5.2.7-desktop-1.mga7 #1 SMP Wed Aug 7 10:32:19 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

[21:29] *** dolmen joined
[21:35] <pamplemousse> lizmat++ #p6 weekly

[21:36] *** Doc_Holliwood left
[21:36] *** eythian left
[21:37] <MasterDuke> parrot_raiser: huh, it doesn't seem to do anything for me (runs for a second or two, but no output or errors)

[21:39] <parrot_raiser> Is there somewhere I can post the complete error message chain?

[21:40] <MasterDuke> https://github.com/perl6/doc/issues

[21:41] <MasterDuke> or do you mean a gist/pastebin site?

[21:41] *** eythian joined
[21:41] *** eythian left
[21:41] *** eythian joined
[21:46] <parrot_raiser> MasterDuke I was actually asking about pastebin, but I see issue # 2387 was exactly the same problem

[21:47] *** eythian left
[21:48] *** eythian joined
[21:48] *** eythian left
[21:48] *** eythian joined
[21:50] <MasterDuke> parrot_raiser: huh, says it's fixed, but you have a newer version than when that was said. i'd suggest commenting or creating a new issue

[21:59] <parrot_raiser> MasterDuke I've added the details in a comment to the issue. If it's been fixed, the fix apparently hasn't reached Rakudo*

[22:01] <MasterDuke> parrot_raiser: cool, thanks

[22:03] *** kiwi_50 joined
[22:05] *** vike joined
[22:06] *** pamplemousse left
[22:06] *** dolmen left
[22:14] *** dolmen joined
[22:17] *** dolmen left
[22:21] *** guifa joined
[22:22] * guifa is wondering the best interface for a CLDR item and looking for advice

[22:23] *** parrot_raiser left
[22:23] <guifa> It’s to compute the grammatical gender of a list.  E.g. in Spanish m+m = m, f+f = f, but f+m = m, but in other languages the calculating might be different. 

[22:26] <guifa> I’m thinking list-gender(**@list, language) which is what I’ve used for other CLDR-based submodules but that kind of ruins the whole slurpy factor.  OTOH I don’t really like the idea of making most things need :language($foo) instead of just $foo (and I’d prefer consistency so I don’t want some to take it as a named and others as a positional).

[22:26] *** dolmen joined
[22:27] <Geth> ¦ problem-solving: AlexDaniel self-assigned there is no security process for receiving security critical bug reports https://github.com/perl6/problem-solving/issues/92

[22:29] <guifa> I imagine most people will be accessing it by passing a list or by generating the list in place, FWIW.  E.g, list-gender(@people».gender) or by list-gender(@list-of-genders) but I kind of want to keep it open to use list-gender($cat,$dog,$desk,$chair), hence hte condundrum

[22:34] *** pmurias left
[22:50] *** mowcat left
[22:51] <Geth> ¦ doc/rx-corr: 2c3fcc92df | threadless-screw++ | doc/Language/regexes.pod6

[22:51] <Geth> ¦ doc/rx-corr: Literals and metacharacters: layout correction, introduction of new examples, minor corrections

[22:51] <Geth> ¦ doc/rx-corr: review: https://github.com/perl6/doc/commit/2c3fcc92df

[22:52] <Geth> ¦ doc: threadless-screw++ created pull request #2957: Literals and metacharacters: layout correction, introduction of new e…

[22:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2957

[22:59] *** dolmen left
[23:06] <tbrowder> .tell lizmat great catchup weekly!

[23:06] <tellable6> tbrowder, I'll pass your message to lizmat

[23:10] *** rba left
[23:10] *** lembark joined
[23:12] *** rba joined
[23:12] *** [particle]1 joined
[23:14] *** rba left
[23:14] *** rba joined
[23:15] *** [particle] left
[23:16] *** [particle] joined
[23:17] *** [particle]1 left
[23:22] *** lembark left
[23:22] *** [particle] left
[23:23] *** [particle] joined
[23:24] *** rindolf left
[23:28] *** rba left
[23:28] *** rba joined
[23:29] *** rba left
[23:29] *** rba joined
[23:29] *** rba left
[23:30] *** rba joined
[23:36] *** kiwi_50 left
[23:54] <SmokeMachine> vrurg: just to let you know, there is a new Red release! \o/

[23:55] *** [particle]1 joined
[23:55] <vrurg> SmokeMachine: My congrats! \o/ :)

[23:55] * vrurg is totally back to core development again...

[23:56] <SmokeMachine> vrurg: and I’m probably releasing a new :api version soon... I’m changing the `is referencing` interface...

[23:56] <vrurg> Interesting. How is it looking now?

[23:57] *** [particle] left
[23:59] <SmokeMachine> vrurg: it’s block will receive de model it should use... I mean, instead of { MyModel.id } something like: { .id }, :model<MyModel>

[23:59] *** [particle]1 left
[23:59] *** [particle] joined
