[00:01] <irced> m: for <'bleh' blah bloop' 'bleep meep> { say $_ }

[00:01] <camelia> rakudo-moar cf6f6d926: OUTPUT: «'bleh'␤blah␤bloop'␤'bleep␤meep␤»

[00:02] <irced> m: for <'bleh' blah bloop' 'bleep meep> { say $_ ~~ / .* / }

[00:02] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢'bleh'｣␤｢blah｣␤｢bloop'｣␤｢'bleep｣␤｢meep｣␤»

[00:02] *** rindolf left
[00:02] <irced> m: for <'bleh' blah bloop' 'bleep meep> { say $_ ~~ / <[']>? (.*) <[']>? / }

[00:02] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢'bleh'｣␤ 0 => ｢bleh'｣␤｢blah｣␤ 0 => ｢blah｣␤｢bloop'｣␤ 0 => ｢bloop'｣␤｢'bleep｣␤ 0 => ｢bleep｣␤｢meep｣␤ 0 => ｢meep｣␤»

[00:03] * irced eyes cross.

[00:04] <irced> m: for <'bleh' blah bloop' 'bleep meep> { $_ ~~ / <[']>? (.*) <[']>? /; say ~$0; }

[00:04] <camelia> rakudo-moar cf6f6d926: OUTPUT: «bleh'␤blah␤bloop'␤bleep␤meep␤»

[00:04] *** pecastro left
[00:05] <irced> m: for <'bleh' blah bloop' 'bleep meep> { $_ ~~ / <[']>? (.*) <[']>? /; say ~$1; }

[00:05] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Use of Nil in string context␤␤␤␤␤␤  in block  at <tmp> line 1␤Use of Nil in string context␤  in block  at <tmp> line 1␤Use of Nil in string context␤  in block  at <tmp> line 1␤Use of Nil in string context␤  in block  at <tmp> l…»

[00:05] <irced> m: for <'bleh' blah bloop' 'bleep meep> { $_ ~~ / <[']>? ([^']*) <[']>? /; say ~$0; }

[00:05] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<( )>; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3leep meep> { $_ ~~ / <[']>? ([^']*) <[']7⏏5>? /; say ~$0; }…»

[00:06] <irced> m: for <'bleh' blah bloop' 'bleep meep> { $_ ~~ / <[']>? (<-[']>*) <[']>? /; say $0; }

[00:07] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢bleh｣␤｢blah｣␤｢bloop｣␤｢bleep｣␤｢meep｣␤»

[00:07] <irced> that's somewhat perly

[00:07] <irced> maybe I can go sed on it

[00:08] <irced> but i'll spare you the spam, any suggestions on making that more perly?

[00:08] *** kotrcka left
[00:09] *** nepugia left
[00:09] <timotimo> m: for <'bleh' blah bloop' 'bleep meep> { say m/"'"? <( .*? )> "'"? }

[00:09] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Couldn't find terminator / (corresponding / was at line 1)␤at <tmp>:1␤------> 3bleep meep> { say m/"'"? <( .*? )> "'"? 7⏏5}␤    expecting any of:␤        /␤»

[00:09] <timotimo> m: for <'bleh' blah bloop' 'bleep meep> { say m/"'"? <( .*? )> "'"?/.Str }

[00:09] <camelia> rakudo-moar cf6f6d926: OUTPUT: «␤␤␤␤␤»

[00:09] <timotimo> m: for <'bleh' blah bloop' 'bleep meep> { say m/"'"? <( .*? )> "'"?/ }

[00:09] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢｣␤｢｣␤｢｣␤｢｣␤｢｣␤»

[00:09] * irced begins to applaud but stops mid air.

[00:10] <timotimo> yeah that didn't work

[00:10] <timotimo> m: for <'bleh' blah bloop' 'bleep meep> { say $_ ~~ /"'"? <( .*? )> "'"?/ }

[00:10] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢｣␤｢｣␤｢｣␤｢｣␤｢｣␤»

[00:10] * irced checks his watch.

[00:10] <timotimo> m: for <'bleh' blah bloop' 'bleep meep> { say $_ ~~ /"'"? <( .* )> "'"?/ }

[00:10] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢bleh'｣␤｢blah｣␤｢bloop'｣␤｢bleep｣␤｢meep｣␤»

[00:10] *** candr joined
[00:10] * irced looks up from his watch face for an ephemeral moment.

[00:11] <timotimo> the trim methods and subs are only for whitespace

[00:12] <timotimo> m: for <'bleh' blah bloop' 'bleep meep> { say $_ ~~ /^"'"? <( .*? )> "'"?$/ }

[00:12] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢bleh｣␤｢blah｣␤｢bloop｣␤｢bleep｣␤｢meep｣␤»

[00:12] <timotimo> that's the important bit

[00:12] <irced> hmm

[00:12] <AlexDaniel> tobs: nice

[00:13] <timotimo> anchoring it, else it'll just get the shortest match it can

[00:13] * irced golf claps.

[00:13] <candr> does a nested module have access to it's parent's modules private subs and variables?  or does it even make sense to nest modules in perl6?

[00:14] <timotimo> "private" is something only methods have

[00:14] <timotimo> subs meanwhile are usually lexically scoped

[00:14] <irced> timotimo: upon inspection, that is indeed quite perly. thanks!

[00:15] <irced> i'll give the floor to candr though there are some wrinkles I think worth ironing

[00:16] <timotimo> if you put the one module lexically into the other, then it will have access, too

[00:18] <candr> maybe a better question is this.. i want to break up some source code into multiple files and wars thinking of making a few new .pm6 files with a single module in each. Those modules need to share a few boolean variables though so i war thinking of making a module Foo with what needs to be shared and a then a Foo::A and Foo::B

[00:25] <timotimo> not sure what the bast way for that is, maybe it's better to have your users handle that? dunno

[00:27] *** Manifest0 left
[00:27] <thundergnat> m:  say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''" ~~ m:g| \w \w* [\S+ \w*]* \w |; # without other comment

[00:27] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(｢bleh｣ ｢blah｣ ｢bloop｣ ｢bleep｣ ｢meep｣ ｢can't｣ ｢up-to-date｣ ｢jack-o'-lantern｣ ｢1990's｣)␤»

[00:29] <thundergnat> actually, that probably should have been jack-'o-lantern. ah well, same, same.

[00:29] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-latnern 1990's''" ~~ m:g| ^^"'"? <(.*?)> "'"?$$|

[00:29] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(｢bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-latnern 1990's'｣)␤»

[00:30] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''" ~~ m:g| ^^"'"? <(.*?)> "'"?$$|

[00:30] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(｢bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's'｣)␤»

[00:30] <irced> ack

[00:31] <irced> err, that's right in a way tho

[00:31] *** Manifest0 joined
[00:31] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''" ~~ m:| ^^"'"? <(.*?)> "'"?$$|

[00:31] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Colons may not be used to delimit quoting constructs␤at <tmp>:1␤------> 3to-date' jack-o'-lantern 1990's''" ~~ m:7⏏5| ^^"'"? <(.*?)> "'"?$$|␤    expecting any of:␤        colon pair (restr…»

[00:31] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''" ~~ / ^^"'"? <(.*?)> "'"?$$ /

[00:31] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's'｣␤»

[00:32] <irced> thundergnat: good work, still dissecting it thanks

[00:33] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''".split(" ") ~~ / ^^"'"? <(.*?)> "'"?$$ /

[00:33] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢bleh｣␤»

[00:33] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''".split(" ").lines ~~ / ^^"'"? <(.*?)> "'"?$$ /

[00:33] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's'｣␤»

[00:35] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''".split(" ").lines ~~ / ^^"'"? <(.*)> "'"?$$ /

[00:35] <camelia> rakudo-moar cf6f6d926: OUTPUT: «｢bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''｣␤»

[00:35] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''".split(" ").lines ~~ / ^^"'"? <(-[ ' ])> "'"?$$ /

[00:35] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at <tmp>:1␤------> 03990's''".split(" ").lines ~~ / ^^"'"? <(7⏏5-[ ' ])> "'"?$$ /␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤---…»

[00:35] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''".split(" ").lines ~~ / ^^"'"? (<-[ ' ]>) "'"?$$ /

[00:35] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Nil␤»

[00:36] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''".split(" ").lines ~~ / ^^"'"? (<-[ ' ]>*) "'"?$$ /

[00:36] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Nil␤»

[00:36] <irced> m: say "'bleh' blah bloop' 'bleep meep 'can't' '''''up-to-date' jack-o'-lantern 1990's''".split(" ").lines ~~ / ^^"'"? (<-[ ' ]*>) "'"?$$ /

[00:36] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3'".split(" ").lines ~~ / ^^"'"? (<-[ ' ]7⏏5*>) "'"?$$ /␤»

[00:36] <irced> anywayz

[00:36] <irced> thanks all

[00:42] *** aborazmeh left
[00:42] *** reach_satori_ joined
[00:48] *** Manifest0 left
[00:53] *** Manifest0 joined
[01:00] *** Manifest0 left
[01:01] <AlexDaniel> m: my $s = (1…∞); say $s.iterator.pull-one; say $s.iterator.pull-one

[01:01] <camelia> rakudo-moar cf6f6d926: OUTPUT: «1␤The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[01:01] <AlexDaniel> eh, what am I missing? I want to pull values from $s one by one when I need

[01:01] <AlexDaniel> so I can store the iterator, right, but… I'm not sure that I like that

[01:03] <AlexDaniel> m: my $s = (1…∞); say $s[0]; say $s.skip(1)

[01:03] <camelia> rakudo-moar cf6f6d926: OUTPUT: «1␤(...)␤»

[01:03] <AlexDaniel> m: my $s = (1…∞); say $s[0]; say $s.skip(1); say $s[0]; say $s.skip(1)

[01:03] <camelia> rakudo-moar cf6f6d926: OUTPUT: «1␤(...)␤1␤(...)␤»

[01:03] <AlexDaniel> whoops, not what I wanted :)

[01:04] <thundergnat> m: my $s = cache (1…∞); say $s.iterator.pull-one; say $s.iterator.pull-one

[01:04] <camelia> rakudo-moar cf6f6d926: OUTPUT: «1␤1␤»

[01:04] <AlexDaniel> thundergnat: no, I don't want caching

[01:04] <thundergnat> Right but pulling one didn't change the sequence.

[01:04] <thundergnat> returned 1 each time.

[01:04] *** empee0 left
[01:05] *** Manifest0 joined
[01:05] <AlexDaniel> thundergnat: it kinda did, except that it gave you a new iterator for the cached Seq

[01:06] <thundergnat> Ah. D'oh. Right.

[01:07] <AlexDaniel> m: my $s = (1…∞); $it = $s.iterator; $it.pull-one; say Seq.new($it)

[01:07] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$it' is not declared␤at <tmp>:1␤------> 3my $s = (1…∞); 7⏏5$it = $s.iterator; $it.pull-one; say Seq␤»

[01:07] <AlexDaniel> m: my $s = (1…∞); my $it = $s.iterator; $it.pull-one; say Seq.new($it)

[01:07] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(...)␤»

[01:07] <AlexDaniel> m: my $s = (1…∞); my $it = $s.iterator; say $it.pull-one; say Seq.new($it)[^10]

[01:07] <camelia> rakudo-moar cf6f6d926: OUTPUT: «1␤(2 3 4 5 6 7 8 9 10 11)␤»

[01:07] <AlexDaniel> ok so I need to rewrap the iterator?

[01:07] <AlexDaniel> I don't mind that, I guess…

[01:11] *** khisanth_ left
[01:12] *** Manifest0 left
[01:17] *** noisegul_ joined
[01:19] *** Manifest0 joined
[01:21] *** noisegul left
[01:24] *** khisanth_ joined
[01:30] *** Manifest0 left
[01:31] *** kaare_ joined
[01:33] <tobs> AlexDaniel: that seems to be required, yeah. I once did this https://github.com/taboege/p6-Seq-Partial (without putting it into the ecosystem it seems :/)

[01:34] <irced> anywayz

[01:34] *** molaf left
[01:36] <irced> i ended up using the UCD code point quote as in my $regex-pattern = rx / ^<:!quote>? (.*?) <:!quote>? /;

[01:37] *** Manifest0 joined
[01:38] <irced> which covers the other quote character as well

[01:43] <irced> amazingly, but i can't see where it's explicitly documented at www.unicode.org

[01:45] *** Manifest0 left
[01:47] <irced> any1 know where the exhaustive list of such names Unicode properties can be found?

[01:47] *** molaf joined
[01:50] *** Manifest0 joined
[01:50] <vrurg> irced: did you try wikipedia's 'unicode character property' topic? There is a link to a PDF at the references section. Could be what you're looking for.

[01:50] <irced> vrurg: cool let me see

[01:51] <vrurg> To justify myself: I googled it! ;)

[01:52] <vrurg> I mean, to excuse myself...

[01:52] <irced> vrurg: I don't see it in there

[01:53] <vrurg> https://www.unicode.org/versions/Unicode12.0.0/ch04.pdf – this one?

[01:53] <irced> vrurg: i tried duck duck go on some working names

[01:53] <vrurg> https://en.wikipedia.org/wiki/Unicode_character_property 

[01:53] <irced> vrug: yep yep

[01:54] <vrurg> The wiki page might have even more info. 

[01:54] * vrurg still prefers google over duckduck due to better relevance

[01:55] <irced> oh, I am allergic to google and microsoft.

[01:58] <irced> found something that might work with perl6

[02:00] <irced> found something that might work with perl6

[02:01] *** jaldhar left
[02:02] <irced> nope, could only find the code points for specific unicode, I am interested in these names that cover complex matches i.e. several code points lumped into one

[02:02] <irced> i see many code points that can match via \c[LONG NAME FOR UNICODE]

[02:03] <irced> which is cool, so thanks for the help

[02:05] <AlexDaniel> m: my $i = 3; my $it = ((1…∞).rotor(1 => 1).flat.rotor(2 => 1).flat).skip(2).iterator; say (1, 3, { $i++; my $val = $it.pull-one; $it = Seq.new($it).rotor($val - $i => 1, ($val - 1 => 1) xx ∞).flat.iterator; $val} … ∞)[^100]

[02:05] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(1 3 7 9 13 15 21 25 31 33 37 43 49 51 63 67 69 73 75 79 87 93 99 105 111 115 127 129 133 135 141 151 159 163 169 171 189 193 195 201 205 211 219 223 231 235 237 241 259 261 267 273 283 285 289 297 303 307 319 321 327 331 339 349 357 361 367 385 391 3…»

[02:05] <irced> vrurg: i also see some ranges so that's cool.

[02:06] <AlexDaniel> .tell lizmat maybe this is a good benchmark: https://colabti.org/irclogger/irclogger_log/perl6?date=2019-07-06#l154

[02:06] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[02:06] <irced> in fact, looks like i was mistaken about the specific named property :quote

[02:06] <AlexDaniel> .tell lizmat it's really slow but I don't think it should be

[02:06] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[02:06] <candr> if i have an `our class A` in a `module Foo`, how can I bring A into the current scope? if I `use Foo` i need to access A with Foo::A everywhere. I don't want to `class A is export` in Foo because that forces it into the current scope which doesn't always seem appropriate. I would think there is something `use Foo::A` or `from Foo use A` .... can't

[02:06] <candr>  find it in the docs though...

[02:06] <irced> nevertheless, such named properties are available in perl6 without \c[CODE POINT NAME] via <:concise property name>

[02:08] <vrurg> candr: use import classes. like is export(:FOO)

[02:09] <vrurg> irced: I didn't work that much with unicode classes. Usually I'm ok with what's documented for Regex'es.

[02:11] <irced> vrurg: you helped me get a more proper solution anyway as follows

[02:11] <candr> So if i want to be able to arbitrarily bring any thing from Foo into the current scope I have to assign a separate import class to every "our" in the module ahead of time? Seems... redundant...

[02:12] <irced> my regex quote { <[\c[QUOTATION MARK]\c[APOSTROPHE]]> }; my $regex-pat = rx / ^<quote>? (.*?) <quote>?$ /; ~~ $regex-pattern etc. i yield for other discussions now.

[02:13] <vrurg> candr: Look at https://docs.perl6.org/language/modules#is_export – perhaps you'll have some better ideas. Besides, you can always define your own EXPORT sub for the purpose.

[02:13] <vrurg> candr: moreover, EXPORT would be the best solution for you, perhaps.

[02:15] <candr> i am just not liking how export leaves to trace as to where something came from... seems like that could get confusing quick... 

[02:15] *** MasterDuke left
[02:16] <AlexDaniel> .tell lizmat I looked at the profile but I don't see anything obvious. I think it's an interesting case, unless I'm missing something obvious, it should be just a bunch of iterators glued together in interesting ways. The logic basically skips values at certain indexes (that's it!). Even though it's not fun to have 100 iterators on top of each other, it should still be really really fast.

[02:16] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[02:16] <vrurg> candr: Usually it doesn't.

[02:17] <vrurg> candr: If one needs to know where something came from then there're ways to introspect concrete objects and type objects as well.

[02:21] <candr> just seems like you should be able to know where something came from by just reading the source code... either from the use statement or by a fully qualified name.

[02:21] <candr> "Note: there currently is no way for the user to import a single object if the module author hasn't made provision for that, and it is not an easy task at the moment (see RT #127305). One way the author can provide such access is to give each export trait its own unique tag. (And the tag can be the object name!)."

[02:21] <synopsebot> RT#127305 [open]: https://rt.perl.org/Ticket/Display.html?id=127305 EXPORT ignored when unit module/package is used

[02:21] <candr> ^ found that in the docs

[02:22] <candr> seems it has been thought of, but is a tricky issue...

[02:23] <vrurg> candr: That ticket is not valid. EXPORT must be defined outside of any module/package/class declaration.

[02:24] <vrurg> Note that EXPORT can be multi. With that one has numerous possibilities of exporting symbols in any combinations, including aliasing and re-exporting from other modules. That's pretty much enough, I think.

[02:25] <vrurg> candr: You can have a look at Red sources. It's using EXPORT and does't pretty much in a self-explanatory way.

[02:26] <vrurg> s/does't/doest it/

[02:28] <candr> I'll take a look... it does seem to have a similar file structure as what I am working on now..

[02:30] *** irced left
[02:30] <candr> thanks vrurg

[02:31] <vrurg> candr: welcome :)

[02:41] *** Cabanossi joined
[02:42] *** Manifest0 left
[02:42] *** Cabanoss- left
[02:47] *** Manifest0 joined
[02:54] *** jaldhar joined
[02:54] *** Manifest0 left
[03:00] *** candr left
[03:00] *** Manifest0 joined
[03:02] *** kaare_ left
[03:06] *** jaldhar left
[03:06] *** jaldhar joined
[03:10] <AlexDaniel> .tell lizmat here's a more readable version: https://github.com/ajs/perl6-Math-Sequences/pull/41/commits/fd15438b4b8f33666646ce0ebed0d769f6c12b8d

[03:10] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[03:23] *** Manifest0 left
[03:29] *** Manifest0 joined
[03:36] *** Manifest0 left
[03:37] *** candr joined
[03:40] <candr> Ok I must be missing something simple.. I have a Foo.pm6 with a module Foo and an `our sub a()` in the module... from main.p6 I `use Foo;` and call the sub with `Foo::a;` , but get a runtime error: Could not find symbol '&a'

[03:41] *** Manifest0 joined
[03:45] *** Manifest0 left
[03:52] *** Manifest0 joined
[03:56] *** Manifest0 left
[03:58] <candr> interesting... seems to be a conflict in use... i have some other modules that use the one i need and when i comment those out the sub is found... seems like i might need the equivelent of #ifndef #define.... guards... so modules don't get used more than once...

[03:59] <AlexDaniel> candr: it should be working just fine

[04:00] <AlexDaniel> candr: can you golf it?

[04:00] <AlexDaniel> what's the minimal set of files to reproduce the issue?

[04:00] <candr> yeah... let me write something up...

[04:02] *** dominix_ joined
[04:02] *** Manifest0 joined
[04:04] <AlexDaniel> I need to get some sleep, will check it later

[04:05] *** dominix__ left
[04:06] *** Manifest0 left
[04:11] <candr> I got a minimal test if you have just a sec... it is interesting... seems module order also matters...

[04:11] *** Manifest0 joined
[04:16] <candr> https://pastebin.com/yvcgzjza

[04:16] <candr> https://pastebin.com/yvcgzjza

[04:17] <candr> main.p6 (https://pastebin.com/yvcgzjza)    Foo.pm6 (https://pastebin.com/gFs5whC6)    Foo_Bar.pm6 (https://pastebin.com/XVa9UJF0)

[04:19] <candr> oh shoot... I think I just figured it out... I think I need `use lib` in Foo_Bar also .... 

[04:20] <candr> nope... that gives another error ... 'use lib' may not be pre-compiled

[04:24] <candr> ah got it.... the `use Foo;` in Foo_Bar.pm6 needs to be outside of the module.

[04:54] *** marmor joined
[05:05] *** Manifest0 left
[05:09] *** Manifest0 joined
[05:17] *** candr left
[05:22] *** Manifest0 left
[05:25] *** marmor left
[05:26] *** Manifest0 joined
[05:31] *** Manifest0 left
[05:37] *** Manifest0 joined
[05:37] *** aborazmeh joined
[05:37] *** aborazmeh left
[05:37] *** aborazmeh joined
[05:45] *** domidumont joined
[05:49] *** Manifest0 left
[05:51] *** molaf left
[05:51] *** ryn1x joined
[05:54] <ryn1x> is this a bug? https://gist.github.com/ryn1x/360e63f89075b0c0c6d3a6879ffc507a

[05:55] *** ryn1x left
[05:55] *** ryn1x joined
[05:55] *** Manifest0 joined
[05:56] <ryn1x> using the traditional if statement works fine, but the postfix style errors with a strange List error...

[06:04] *** Manifest0 left
[06:07] *** lizmat left
[06:07] <Kaiepi> m: module M { our sub foo { say 'foo' } }; M::foo() if 1

[06:07] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Cannot find method 'Nil' on object of type List␤  in block <unit> at <tmp> line 1␤␤»

[06:07] <Kaiepi> oh

[06:07] <Kaiepi> m: module M { our sub foo { say 'foo' } }; &M::foo() if 1

[06:07] <camelia> rakudo-moar cf6f6d926: OUTPUT: «foo␤»

[06:07] <Kaiepi> that's how you use it ryn1x 

[06:08] <Kaiepi> the problem is `our sub foo` is actually named &foo

[06:09] <Kaiepi> m: module M { OUR::<foo> := anon sub foo { say 'foo' } }; M::foo if 1

[06:09] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Could not find symbol '&foo'␤  in block <unit> at <tmp> line 1␤␤»

[06:09] *** Manifest0 joined
[06:09] <ryn1x> ah ok... but the & is only required with the if...

[06:10] *** marmor joined
[06:10] <Kaiepi> m: module M { our sub foo { say 'foo' } }; M::foo

[06:10] <camelia> rakudo-moar cf6f6d926: OUTPUT: «foo␤»

[06:10] <ryn1x> something about the postfix if needs it's "real" name...

[06:10] <Kaiepi> hm

[06:13] *** domidumont left
[06:14] <Kaiepi> m: module M { OUR::<foo> := anon sub { say 'foo' } }; M::foo

[06:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Could not find symbol '&foo'␤  in block <unit> at <tmp> line 1␤␤»

[06:14] <Kaiepi> m: module M { OUR::<foo> := anon sub { say 'foo' } }; M::foo()

[06:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Could not find symbol '&foo'␤  in block <unit> at <tmp> line 1␤␤»

[06:14] *** domidumont joined
[06:14] <Kaiepi> m: module M { BEGIN OUR::<foo> := anon sub { say 'foo' } }; M::foo()

[06:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «foo␤»

[06:14] <Kaiepi> m: module M { BEGIN OUR::<foo> := anon sub { say 'foo' } }; M::foo

[06:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant value M::foo in sink context (line 1)␤»

[06:15] <Kaiepi> m: module M { BEGIN OUR::<foo> := anon sub { say 'foo' } }; M::foo() if 1

[06:15] <camelia> rakudo-moar cf6f6d926: OUTPUT: «foo␤»

[06:15] <Kaiepi> there's another way to go about it

[06:16] *** Manifest0 left
[06:16] *** domidumont left
[06:16] <ryn1x> adding the & works fine... I just wonder if the inconstancy is a bug...

[06:20] *** Manifest0 joined
[06:22] <Kaiepi> possibly

[06:22] <Kaiepi> it's hard to say until someone more familiar with that part of perl 6's internals logs in

[06:25] *** marmor left
[06:35] *** kybr left
[06:37] *** Manifest0 left
[06:38] *** kybr joined
[06:38] <ryn1x> https://github.com/rakudo/rakudo/issues/3034 opened an issue just in case

[06:39] *** lizmat joined
[06:42] *** Manifest0 joined
[06:47] *** Manifest0 left
[06:48] <ryn1x> huh... not only do you need to add the & when calling the sub with the if statement modifier, but you also have to add the parens.... without the parens there is no error, but the sub does not do anything....

[06:48] *** rindolf joined
[06:51] *** Manifest0 joined
[06:58] *** Manifest0 left
[07:01] *** lizmat left
[07:03] *** Manifest0 joined
[07:08] *** Manifest0 left
[07:10] *** antoniogamiz joined
[07:12] *** MasterDuke joined
[07:14] *** Manifest0 joined
[07:18] *** domidumont joined
[07:21] *** Manifest0 left
[07:25] *** marmor joined
[07:25] *** Manifest0 joined
[07:26] *** vrurg left
[07:34] *** marmor left
[07:34] *** domidumont left
[07:35] *** domidumont joined
[07:44] *** Manifest0 left
[07:47] *** Celelibi left
[07:47] *** domidumont left
[07:49] *** Manifest0 joined
[08:02] *** molaf joined
[08:09] *** aborazmeh left
[08:18] *** telex left
[08:19] *** Manifest0 left
[08:19] *** telex joined
[08:24] *** Manifest0 joined
[08:31] *** Manifest0 left
[08:38] *** Manifest0 joined
[08:42] *** lancew joined
[08:43] *** molaf left
[08:49] *** Manifest0 left
[08:54] *** Manifest0 joined
[08:55] *** antoniogamiz left
[08:57] *** ryn1x left
[09:00] *** antoniogamiz joined
[09:00] *** antoniogamiz left
[09:06] *** Manifest0 left
[09:12] *** Manifest0 joined
[09:14] *** rfold joined
[09:16] *** Manifest0 left
[09:17] *** kylese joined
[09:20] *** mniip left
[09:21] *** Manifest0 joined
[09:29] *** kylese left
[09:29] *** kylese joined
[09:31] *** Manifest0 left
[09:35] *** Manifest0 joined
[09:40] *** Manifest0 left
[09:41] *** kylese left
[09:44] *** Kaiepi left
[09:45] *** Manifest0 joined
[09:45] *** Kaiepi joined
[09:46] *** Sgeo__ joined
[09:49] *** Sgeo_ left
[09:50] *** sena_kun joined
[09:51] *** Manifest0 left
[10:00] *** Manifest0 joined
[10:01] *** Kaiepi left
[10:05] *** Kaiepi joined
[10:07] *** nepugia joined
[10:21] *** Kaiepi left
[10:21] *** Kaiepi joined
[10:24] *** Black_Ribbon left
[10:29] *** Manifest0 left
[10:37] *** Manifest0 joined
[10:38] *** Kaiepi left
[10:39] *** Kaiepi joined
[10:45] *** Manifest0 left
[10:49] *** aborazmeh joined
[10:49] *** aborazmeh left
[10:49] *** aborazmeh joined
[10:49] *** Manifest0 joined
[10:54] *** Manifest0 left
[11:01] *** Manifest0 joined
[11:10] <Kaiepi> > wcswidth "\c[FACE WITH TEARS OF JOY]\0", 1

[11:10] <Kaiepi> 4294967295

[11:11] <Kaiepi> still really buggy but wide string support for nativecall is coming along!

[11:11] *** Manifest0 left
[11:15] <AlexDaniel> squashable6: status

[11:15] *** lancew left
[11:15] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in 1 day and ≈2 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:15] <Kaiepi> how can i pass NULL to a nativecall sub that takes a string?

[11:17] *** lancew joined
[11:19] <timotimo> just pass Str

[11:20] *** Manifest0 joined
[11:21] <Kaiepi> thanks

[11:23] *** pecastro joined
[11:30] *** Manifest0 left
[11:35] *** Manifest0 joined
[11:39] *** Manifest0 left
[11:43] <AlexDaniel> aaand I just merged a bunch of PRs

[11:46] *** Manifest0 joined
[11:51] <lancew> :)

[11:53] <lucs> My perl6 is installed by root.

[11:53] <lucs> I can install a module as non-root with 'zef --install-to=/some/dir install Some::Module'.

[11:53] <lucs> How do I make the module visible to my programs; something like PERL6LIB=...?

[11:54] <lucs> Is this the correct approach?

[12:01] *** Manifest0 left
[12:06] *** Manifest0 joined
[12:09] <ugexe> ryn1x: my &foo — how else would one test this for truth *without* invoking it?

[12:10] <ugexe> hence needing to invoke it to test the result 

[12:11] <ugexe> otherwise yku are testing the symbol for truth not the result 

[12:17] *** noisegul_ left
[12:17] *** Manifest0 left
[12:18] *** kaare_ joined
[12:18] *** lancew left
[12:19] *** marmor joined
[12:19] *** aborazmeh left
[12:22] *** Manifest0 joined
[12:26] *** goon_ left
[12:26] *** Manifest0 left
[12:33] *** Manifest0 joined
[12:40] *** kaare_ left
[12:40] *** marmor left
[12:41] *** denis666 joined
[12:43] *** denis666 left
[12:43] <lucs> ...?

[12:45] <El_Che> .tell lizmat: https://sungo.wtf/2019/07/05/leaving-irc.perl.org.html

[12:45] <yoleaux> El_Che: What kind of a name is "lizmat:"?!

[12:45] <El_Che> .tell lizmat https://sungo.wtf/2019/07/05/leaving-irc.perl.org.html

[12:45] <yoleaux> El_Che: I'll pass your message to lizmat.

[12:47] <timotimo> lucs: i think you address it with -I inst#/some/dir

[12:49] <lucs> timotimo: I'm kinda looking for a solution where I don't have to specify the directory on each invocation.

[12:50] <lucs> Also, what if I install more than one module locally?

[12:55] <AlexDaniel> wheeeew I think things are alright now

[12:55] <AlexDaniel> there's a lot of fun going on in https://github.com/ajs/perl6-Math-Sequences :)

[12:55] <AlexDaniel> please join :)

[12:56] <sena_kun> AlexDaniel++

[12:56] <AlexDaniel> we might not have a webhook but that's not going to stop us :)

[13:00] *** Manifest0 left
[13:01] *** jeromelanteri joined
[13:04] * lucs attempts a cheap trick...

[13:04] <lucs> So I guess it's impossible to install modules locally and to have them visible by default to my (root owned) perl6 executable, eh.

[13:04] <El_Che> export PERL6LIB ?

[13:04] <El_Che> (didn't read the backlog)

[13:05] <thundergnat>  AlexDaniel: It may be worth putting up a file somewhere editable like this: https://gist.github.com/thundergnat/474ec2808e20dd1fa08c26f3f4bbad7d so people can "claim" a sequence and not step all over each other.

[13:05] <thundergnat> And update it every time you push.

[13:06] *** Manifest0 joined
[13:06] <lucs> El_Che: Yeah, something like that, but not sure how.

[13:07] <El_Che> lucs: yeah, the infamous sha1

[13:09] <woolfy> Claudio Ramirez: Thanks, that is one heavy blog by sungo...  wow...  Anyway lizmat is on the road driving home from another country after 4 days of intense work and she might not read / react soon.  

[13:09] *** marmor joined
[13:09] <El_Che> woolfy: hi, have fun. Take some time to decompress!

[13:12] <woolfy> Claudio Ramirez: I am at home, not with lizmat (does not happen often that we are 4 days apart from eachother, we both had different things to do), and I will make sure lizmat will take time to decompress.

[13:12] <El_Che> woolfy: good she's coming back then!

[13:13] *** marmor left
[13:16] <timotimo> lucs: yeah, PERL6LIB will also accept that value

[13:18] <woolfy> Claudio Ramirez: indeed.

[13:19] *** Manifest0 left
[13:19] <AlexDaniel> thundergnat: maybe, or maybe we should just merge things faster

[13:20] <thundergnat> AlexDaniel: Or that. :-)

[13:20] <lucs> timotimo: Maybe I should have tried :/ Thanks, I'll let you know how it goes.

[13:21] <AlexDaniel> thundergnat: I wonder, do you actually need `lazy` ?

[13:22] <timotimo> lucs: if ".say for $*REPO.repo-chain" outputs an inst# in your home, you can also probably use --to with that

[13:22] <MasterDuke> AlexDaniel: is there a way to tell what sequences are missing/wanted?

[13:23] <AlexDaniel> MasterDuke: grep -B 1 '&NOSEQ ...' ./lib/Math/Sequences/Integer.pm6

[13:23] <thundergnat> AlexDaniel: Some do, some don't. At least one of the sequences I added hung without it so I started adding it defensively.

[13:23] *** Manifest0 joined
[13:23] <AlexDaniel> thundergnat: there are just 69 sequences that are not implemented yet. Should I file a ticket for each of them?

[13:23] <thundergnat> Or perhaps superstitiously may be a better term...

[13:24] <AlexDaniel> thundergnat: that'd serve as a todo list and as a discussion platform… also with a mechanism to assign yourself :)

[13:25] <thundergnat> AlexDaniel: Seems like it might be helpful but I don't want to make more work for you (and JJ), you guys do a lot as it is.

[13:25] <AlexDaniel> that's just 3 pagefuls of tickets

[13:25] <thundergnat> burnout is a thing

[13:25] <AlexDaniel> well, I have a script! Let me try that

[13:27] <AlexDaniel> thundergnat: says a person who implemented a jaw-dropping amount of sequences :)

[13:27] * sena_kun agrees with thundergnat and wants to express gratitude for such amounts of work

[13:29] <thundergnat> AlexDaniel: Yeah, but I'm not in public and don't have people expectantly watching me. 

[13:29] * thundergnat watches expectantly :-)

[13:30] *** nepugia left
[13:31] <lucs> timotimo: Makes sense. A problem I have: for personal project handling reasons, even as $USER, I change the value of $HOME a lot.

[13:31] <MasterDuke> AlexDaniel: i don't know. wasn't there some picture posted of you programming on the bus? that seems pretty public to me

[13:31] <AlexDaniel> MasterDuke: yes :D

[13:31] <lucs> Hmm... Maybe I can simply symlink those $HOME/.perl6 to /home/$USER/.perl6, that should work.

[13:32] <AlexDaniel> thundergnat: what should I write in the ticket body?

[13:32] <AlexDaniel> qq:to/TEMPLATE/

[13:32] <AlexDaniel> Sequence [$sequence](https://oeis.org/$sequence) is not implemented yet.

[13:32] <AlexDaniel> TEMPLATE

[13:32] <AlexDaniel> anything else?

[13:32] *** rindolf left
[13:35] <thundergnat> AlexDaniel: Um. Not really... Though it might be nice if you can capture the comment line above each unimplemented sequence. Has the common name for the sequence to ease wikipedia searching. I suppose users can get that from OEIS though.

[13:36] <tbrowder> AlexDaniel: i just submitted pr for math-seq

[13:38] <AlexDaniel> thundergnat: yeah, the name of the sequence is kinda important, I agree

[13:39] <AlexDaniel> thundergnat: let's see what info OEIS module can provide…

[13:39] *** rindolf joined
[13:44] *** Manifest0 left
[13:49] *** Manifest0 joined
[13:51] <AlexDaniel> thundergnat: ok, more feedback please? https://gist.github.com/AlexDaniel/2c62bc0e92b13f1030496b65ca550f24#file-populate-issues-p6-L11

[13:52] <AlexDaniel> thundergnat: like, I have access to all of the fields: https://modules.perl6.org/dist/OEIS:cpan:TOBS/lib/OEIS/Entry.pm6#L232

[13:52] <AlexDaniel> so I can put anything in the ticket description

[13:52] *** mowcat joined
[13:56] <thundergnat> AlexDaniel: That looks pretty good to me. Really, the critical parts to me are the ID, the NAME and a link directly to the oeis page. Everything else is going to be a little manual anyway as there is o much variation between sequences   

[13:57] <thundergnat> * so

[13:57] <tobs> AlexDaniel: I wish that module was more helpful already. OEIS supports searching for all sequences tagged 'core' for example (wrt https://github.com/ajs/perl6-Math-Sequences/pull/42#issuecomment-508919554), but I couldn't design a cute interface to the advanced search syntaxes in time.

[14:00] <tobs> AlexDaniel: other than that, this script would be really helpful. I had the same idea but suppressed it yesterday :/

[14:00] <AlexDaniel> tobs: testing it right now :)

[14:00] *** jeromelanteri left
[14:01] <AlexDaniel> tobs: it's good that we first implemented a bunch of sequences before populating the ticket list, less spammy this way

[14:01] <AlexDaniel> tobs: is there a short name of some sort?

[14:02] <AlexDaniel> tobs: right now the format of the issue title is like A000005 / d(n) (also called tau(n) or sigma_0(n)), the number of divisors of n.

[14:02] <tobs> this doesn't exist afaik. Struck me as something ajs came up with

[14:03] <AlexDaniel> tobs: no way? They have no short identifiers whatsoever???

[14:04] <tobs> let me double check

[14:05] <tobs> AlexDaniel: no, there is only the ID and the full name (https://oeis.org/eishelp1.html)

[14:05] <AlexDaniel> yes, I guess you're right… ew

[14:06] <AlexDaniel> alright

[14:06] <AlexDaniel> MasterDuke: can't find that pic btw, somewhere on Zoffix's twitter I think. But it's really old, couldn't scroll that far

[14:07] <tobs> I'll be back later, have to arrange and catch a train

[14:08] <AlexDaniel> thundergnat: anyway, ready for the first automated ticket?

[14:08] <thundergnat> AlexDaniel: There is a hash %oeis-core in ./lib/Math/Sequences/Integer.pm6 that has ajs's short names

[14:08] <AlexDaniel> thundergnat: yeah but uh… do I want to import that and do a lookup?

[14:08] <thundergnat> AlexDaniel: Woot! lay it on us! 

[14:08] <AlexDaniel> wait, let's try with short naes

[14:09] <AlexDaniel> long titles are really annoying

[14:09] * thundergnat watches expectantly. SCNR

[14:10] <AlexDaniel> thundergnat: but is there a short-name <=> id mapping?

[14:11] <thundergnat> The hash is short_name => seq_id pairs.

[14:11] <thundergnat> in Integer.pm6, if that wasn't clear.

[14:12] <AlexDaniel> thundergnat: the value is the variable, so maybe…

[14:12] <thundergnat> Could invert it and get id => short_name pretty easily

[14:13] <AlexDaniel> thundergnat: there's no id, just the @ variable

[14:13] <AlexDaniel> I can format it with macros in emacs but I'd prefer something that can work live…

[14:13] <AlexDaniel> m: say @foobar; say @foobar.VAR

[14:13] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@foobar' is not declared␤at <tmp>:1␤------> 3say 7⏏5@foobar; say @foobar.VAR␤»

[14:13] <AlexDaniel> m: my @foobar; say @foobar.VAR

[14:13] <camelia> rakudo-moar cf6f6d926: OUTPUT: «[]␤»

[14:14] <AlexDaniel> what's the trick to get the variable name?

[14:14] <Kaiepi> m: my @foobr; say @foobar.^name

[14:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@foobar' is not declared. Did you mean '@foobr'?␤at <tmp>:1␤------> 3my @foobr; say 7⏏5@foobar.^name␤»

[14:14] <sena_kun> .name

[14:14] <Kaiepi> m: my @foobar; say @foobar.name

[14:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «@foobar␤»

[14:14] <sena_kun> m: my @foobar; say @foobar.VAR.name;

[14:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «@foobar␤»

[14:14] <Kaiepi> m: my @foobar; say @foobar.^name

[14:14] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Array␤»

[14:15] <Kaiepi> oh right

[14:16] <AlexDaniel> weird I'm getting %oeis-core

[14:17] <AlexDaniel> it's like: our %oeis-core is export = ( "groups" => @A000001, )

[14:17] <AlexDaniel> and I want A000001

[14:18] <AlexDaniel> m: my @A000001; my @A000002; my %oeis-core = ("groups" => @A000001, "kolakoski" => @A000002,); for %oeis-core { say .value.VAR.name }

[14:18] <camelia> rakudo-moar cf6f6d926: OUTPUT: «%oeis-core␤%oeis-core␤»

[14:18] <MasterDuke> m: my @A000001; my @A000002; my %oeis-core = ("groups" => @A000001, "kolakoski" => @A000002,); for %oeis-core { say .value.name }

[14:18] <camelia> rakudo-moar cf6f6d926: OUTPUT: «@A000002␤@A000001␤»

[14:19] <AlexDaniel> pfffffffffft

[14:19] *** HarmtH_ left
[14:19] <AlexDaniel> MasterDuke: thank you :)

[14:19] <MasterDuke> heh

[14:19] *** HarmtH_ joined
[14:21] <thundergnat> Ah. too slow. https://gist.github.com/thundergnat/e2021bee0c8c764c951917b3c7ccfdd4

[14:21] *** HarmtH_ is now known as HarmtH

[14:22] <AlexDaniel> yeah I think it's just this or something: my %short-names = %oeis-core.map({.value.name.substr(1) => .key});

[14:22] <thundergnat> alex

[14:22] *** goon_ joined
[14:22] <AlexDaniel> yes? :)

[14:22] <thundergnat> AlexDaniel: ^^^ see above gist

[14:23] <thundergnat> Sorry, fatfingers

[14:27] *** vrurg joined
[14:27] <AlexDaniel> thundergnat: https://github.com/ajs/perl6-Math-Sequences/issues/52

[14:27] <AlexDaniel> what do you think?

[14:27] <AlexDaniel> the “name” has a dot at the end :S

[14:28] *** mniip joined
[14:28] <AlexDaniel> thundergnat: https://github.com/ajs/perl6-Math-Sequences/issues/53 ?

[14:29] <thundergnat> AlexDaniel: Looks good to me.

[14:30] <MasterDuke> wow. the initial compile of Math::Sequences::Integer is slow!!

[14:30] <AlexDaniel> thundergnat: I can also put these keywords as labels. Should I?

[14:31] <thundergnat> AlexDaniel: May be useful. Can't see how it would hurt.

[14:31] <MasterDuke> was it this slow for everybody else? `perl6 -I lib/ -e 'use Math::Sequences::Integer'` has been running for about 3 min now...

[14:32] <thundergnat> Even after the squashathon, any tickets for sequences left undone will be useful for bookkeeping. 

[14:33] <thundergnat> MasterDuke: Hmm. Compiled in about 25 seconds for me earlier. Sounds like there may be a sequence that needs a lazy.

[14:33] <thundergnat> Let me try pulling again and compiling

[14:33] *** lancew joined
[14:36] <AlexDaniel> MasterDuke: checkout an earlier version and measure again? Then bisect?

[14:36] <thundergnat> MasterDuke: I got a bunch of timeouts in individual sequences on latest master so something is up

[14:39] <MasterDuke> took just a couple seconds at 082c440702f1c9db41d75614380ceb0d78143b52

[14:39] <thundergnat> Hmm. I'm getting a timeout in A000793 that wasn't happening earlier. (only the one actualy)

[14:42] <AlexDaniel> thundergnat: is there a description for OEIS keywords somewhere?

[14:42] <AlexDaniel> thundergnat: yeah, that test is ticketed here: https://github.com/ajs/perl6-Math-Sequences/issues/48

[14:43] <AlexDaniel> but nothing should be using that sequence during the compilation so I don't think it's the problem

[14:43] <MasterDuke> huh. now HEAD just takes a couple seconds

[14:43] <AlexDaniel> MasterDuke: heh… very precompiled now? :P

[14:43] <AlexDaniel> MasterDuke: and if you purge your .precomp folder?

[14:43] <MasterDuke> i rm -rf'ed lib/.precomp

[14:44] <MasterDuke> heh. seems the culprit is my change

[14:44] <AlexDaniel> found it: http://oeis.org/wiki/Keywords

[14:44] <thundergnat> AlexDaniel: Maybe the OEIS glossary? http://oeis.org/wiki/Index_to_OEIS:_Section_Cor <-- Core sequences entry 

[14:44] <thundergnat> Arrgh. to slow again. (and wrong too.)

[14:45] <MasterDuke> -our @A000364 is export = 1, &NOSEQ ... *;

[14:45] <MasterDuke> +our @A000364 is export = lazy @A000111[0, 2 ... *];

[14:48] *** lancew left
[14:53] *** Manifest0 left
[14:58] <AlexDaniel> thundergnat: it works :) https://github.com/ajs/perl6-Math-Sequences/issues/55

[15:00] <thundergnat> AlexDaniel: Cool! May not be strictly necessary but cool nonetheless.

[15:00] <MasterDuke> oh wow. `@A000111` is slow! `say @A000111[0]` is instant, but `say @A000111[1]` hasn't finished after a 1.5min

[15:02] <AlexDaniel> https://github.com/ajs/perl6-Math-Sequences/issues

[15:02] <AlexDaniel> MasterDuke: ↑ which ones are not implemented yet :)

[15:02] <thundergnat> MasterDuke: That sound suspicious. I would it expect it to get slow quickly, but not that quickly.

[15:03] <MasterDuke> is it the same for you?

[15:03] *** Manifest0 joined
[15:04] <AlexDaniel> just imagine ajs coming back from vacation or whatever, and seeing what we've done to their repo :D

[15:05] <AlexDaniel> thundergnat: look, this one doesn't have a short name: https://github.com/ajs/perl6-Math-Sequences/issues/77

[15:05] <AlexDaniel> maybe add one? I'll take a small break

[15:10] *** Manifest0 left
[15:11] <thundergnat> AlexDaniel: Hm. Looks like there is collision with  A005588 which is also named binary-rooted-trees.

[15:11] <MasterDuke> an implementation of @A000111 done with multi Entringer subs takes 3s for the first 10 numbers

[15:13] <AlexDaniel> thundergnat: very cool that we noticed it :)

[15:15] <thundergnat> AlexDaniel: Seems like A005588 should be named "free-binary-rooted-trees" and A002572 "binary-rooted-trees". I'll make a pull request.

[15:17] *** Manifest0 joined
[15:17] <AlexDaniel> tobs: it's a relatively short script: https://github.com/ajs/perl6-Math-Sequences/blob/master/utils/populate-issues.p6

[15:17] <AlexDaniel> tobs: I ♥ Perl 6 :)

[15:18] <AlexDaniel> squashable6: status

[15:18] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈22 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:19] <MasterDuke> m: my @a = lazy (^Inf); say @a[^5]; my @b = lazy @a[0,2...*]; say @b[^5]

[15:19] <AlexDaniel> Now with an issue tracker! https://github.com/ajs/perl6-Math-Sequences/issues

[15:19] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(timeout)(0 1 2 3 4)␤»

[15:19] <MasterDuke> huh, i thought you could make a lazy list from a lazy list

[15:20] <AlexDaniel> MasterDuke: btw you might also like this one: https://github.com/ajs/perl6-Math-Sequences/commit/fd15438b4b8f33666646ce0ebed0d769f6c12b8d

[15:21] <AlexDaniel> MasterDuke: some explanation: https://colabti.org/irclogger/irclogger_log/perl6?date=2019-07-06#l174

[15:21] <AlexDaniel> MasterDuke: and then on top of that it causes this: https://github.com/ajs/perl6-Math-Sequences/issues/47

[15:21] <rfold> p6: sub f { my @xs = 1, 2, 3; my $x = 1; [<=] @xs>>.sqrt, $x; }; say f.perl

[15:21] <camelia> rakudo-moar cf6f6d926: OUTPUT: «Bool::False␤»

[15:22] <rfold> Amn't I supposed to slip @xs>>.sqrt before using it with [<=]? Like so: [<=] |@xs>>.sqrt, $x

[15:23] <timotimo> if you want the $x to be part of that comparison, you'll need to flatten the @xs>>.sqrt list into it somehow, yeah

[15:23] <rfold> Then why doesn't it crash?

[15:23] <MasterDuke> AlexDaniel: can you assign https://github.com/ajs/perl6-Math-Sequences/issues/100 to me?

[15:24] <rfold> p6: say([1, 2, 3] <= 3);

[15:24] <camelia> rakudo-moar cf6f6d926: OUTPUT: «True␤»

[15:25] <rfold> Apparently <= with a list and an integer compares the length of the list.

[15:26] <MasterDuke> thundergnat, AlexDaniel: have you tried `say @A000111[1]`?

[15:26] <rfold> Which happens because it calls .Real on the argument:

[15:26] <rfold> p6: say [1, 2, 3].Real;

[15:26] <camelia> rakudo-moar cf6f6d926: OUTPUT: «3␤»

[15:27] <rfold> timotimo: thanks I get it!

[15:27] <thundergnat> MasterDuke: Yes. it IS ridiculously slow, but haven't investigated it yet.

[15:27] <MasterDuke> k. i'll submit a PR with an alternate implementation. still slow, but not as much

[15:28] <AlexDaniel> MasterDuke: yeah but I wonder why tests are skipping that sequence…

[15:30] <AlexDaniel> down to 0 PRs again! :)

[15:31] <thundergnat> AlexDaniel: https://github.com/ajs/perl6-Math-Sequences/blob/5d9289dcbe1f68415f021191920eab4102161561/lib/Math/Sequences/Integer.pm6#L158

[15:31] <AlexDaniel> ah

[15:31] <AlexDaniel> so is it broken or just slow?

[15:31] <MasterDuke> ha!

[15:32] <AlexDaniel> well, I guess both

[15:33] *** Cabanossi left
[15:35] *** Cabanossi joined
[15:37] *** natrys joined
[15:44] <thundergnat> AlexDaniel: https://github.com/ajs/perl6-Math-Sequences/issues/74 is already done. (That was one of my pull requests while you were still writing the generator script.)

[15:46] *** Manifest0 left
[15:49] <thundergnat> AlexDaniel: Also, assign #66 to me when you have a moment. https://github.com/ajs/perl6-Math-Sequences/issues/66  Thanks!

[15:51] *** Manifest0 joined
[15:55] <MasterDuke> afk, going to take my daughter to a festival in the nearby park

[16:00] <AlexDaniel> thundergnat: just leave a comment saying you're working on it

[16:00] <AlexDaniel> thundergnat: again, a weird limitation of github… can't assign anyone who doesn't have write permissions to the repo

[16:01] <thundergnat> AlexDaniel: Ah. Ok. Weird, but not a real problem.

[16:02] *** dominix__ joined
[16:05] *** dominix_ left
[16:12] *** Manifest0 left
[16:17] *** Manifest0 joined
[16:36] *** Manifest0 left
[16:41] *** Manifest0 joined
[16:47] *** Manifest0 left
[16:53] *** Manifest0 joined
[17:03] *** Manifest0 left
[17:08] *** Manifest0 joined
[17:12] *** vike left
[17:14] *** Joe65 joined
[17:21] *** Manifest0 left
[17:22] <Joe65> Anyone have a good example of p6 script that implements the usual command-line input behavior (stdin by default, one or more files on cmdline, "-", etc)? Do I have to explicitly parse arguments or is there a simpler way? I can't seem to find a complete example for perl6.

[17:23] *** vike joined
[17:26] *** Manifest0 joined
[17:28] <rfold> Joe65: here's a full program that reads stdin by default, otherwise reads files given as arguments, again treating - as stdin: $*ARGFILES.slurp.uc.say; 

[17:32] *** mowcat left
[17:34] <Joe65> Thanks! Let me play `with that a bit. I had trouble using $*ARGFILES when I tried it previously.

[17:36] <tobs> AlexDaniel: yay, I did something useful \o/

[17:45] *** mniip left
[17:50] *** mniip joined
[17:51] *** Manifest0 left
[17:56] *** Manifest0 joined
[18:12] <Joe65> Here's an example (I forgot to mention named cmdline args):

[18:13] <Joe65> Oops. Best way to paste a few lines of code (I forget)?

[18:14] <sena_kun> any paste service? github gists?

[18:20] <Joe65> nm thx

[18:20] *** Joe65 left
[18:22] *** Manifest0 left
[18:26] *** Manifest0 joined
[18:34] *** Joe65 joined
[18:34] <Joe65> ok, sample code here: <script src="https://gist.github.com/nd3i/80e5da536fa73bb14a42371d32ce7dc7.js"></script>

[18:36] <sena_kun> Joe65, can you post a link to gist page here?

[18:37] <Joe65> I'm trying to get named args and standard cmdline input filename(s). Running the script with a named argument, --fmt='%5d' seems to interfere with getting a following file name into $*ARGFILES

[18:38] <Joe65> Oops. Sry. I pasted the embed link. Share link: https://gist.github.com/nd3i/80e5da536fa73bb14a42371d32ce7dc7

[18:40] <tbrowder> AlexDaniel: i added another minor pr to math-seq

[18:41] <sena_kun> Joe65, the thing is, MAIN gives you a new signature that overrides the default one

[18:44] <Joe65> ok

[18:46] <sena_kun> I am not very familliar with MAIN, but playing with it now...

[18:46] <sena_kun> to get something you might want...

[18:47] <timotimo> if you want, you can use *@*ARGS as the last argument to your MAIN

[18:48] <sena_kun> timotimo, hmm, I am doing `$fmt = '%d ', *@*ARGS`, but on `perl6 perl6.pl6 test.lua` @*ARGS is empty

[18:49] <timotimo> that's not where to put the * :)

[18:49] * sena_kun is confused

[18:50] <sena_kun> ok, made it working...

[18:50] <sena_kun> timotimo++

[18:51] <sena_kun> https://gist.github.com/Altai-man/44aee25611146c96705275a16539c837 <- Joe65

[18:53] *** robertle joined
[18:59] *** lizmat joined
[18:59] <timotimo> i didn't come up with that trick :)

[18:59] <timotimo> i think it might have been bdf?

[19:01] <sena_kun> Ballroom Dancers' Federation?

[19:02] <Joe65> ok tnx! Any advantage using $*ARGFILES there in place of $*ARGS?  It seems that either works.

[19:04] <sena_kun> Joe65, unrelated to MAIN(which changes things a bit), @*ARGS are just all arguments passed to script, while $*ARGFILES is an object of https://docs.perl6.org/type/IO::ArgFiles class, constructed from @*ARGS, so they are different beasts.

[19:04] <sena_kun> but considering you are overloading this processing with a MAIN subroutine, any name can be there, actually, even e.g. @files.

[19:05] <sena_kun> so I'd use *@files in signature and just @files in body.

[19:06] <sena_kun> I'd even say that my gist is bad because it uses @*ARGS, it is really unrelated here, just any suitable name will be less confuseable for the reader.

[19:13] *** Black_Ribbon joined
[19:15] *** Manifest0 left
[19:17] <Joe65> ok, i feel like there should be something more concise @files.IO.lines but that seems to give the whole file for each $line.

[19:17] <AlexDaniel> thundergnat: if you say in your commit message “Resolves #123” then #123 will be closed automatically when your PR is merged

[19:17] <Joe65> Thanks for the help. something to start with at least. TYVM

[19:18] <AlexDaniel> squashable6: status

[19:18] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈18 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:18] <AlexDaniel> going strong! Still 65 tickets to resolve! https://github.com/ajs/perl6-Math-Sequences/issues

[19:19] <thundergnat> AlexDaniel: Ah. Well that's handy to know. Sorry for not doing that. My git foo is not so great.

[19:19] <AlexDaniel> thundergnat: it's not git foo, it's github foo :)

[19:19] <thundergnat> Indeed. :-/

[19:20] *** Joe65 left
[19:20] *** Manifest0 joined
[19:25] *** anon joined
[19:25] <AlexDaniel> thundergnat: it'd be really cool to get that ticket count to 0 (so that all core sequences have a perl6 implementation)

[19:25] <anon> hello

[19:25] <anon> anyone here?

[19:25] <AlexDaniel> anon: hi!

[19:26] <sena_kun> anon, hi

[19:26] *** anon is now known as Guest96979

[19:26] <AlexDaniel> thundergnat: by the way now I'm wondering, are any of the sequences already implemented on rosettacode?

[19:26] <Guest96979> i love scripting and love writing bash scripts the most

[19:26] <Guest96979> i am considering perl

[19:27] <Guest96979> could any1 please highlight whether perl is better for scripting tasks for a system?

[19:27] <Guest96979> than bash

[19:27] <sena_kun> Guest96979, perl or perl 6? they are pretty different languages.

[19:27] <Guest96979> and i am also confused about perl5 or perl6

[19:27] <Guest96979> sorry

[19:28] <Guest96979> is perl6 just improvement on perl5 or complete change in syntax?

[19:28] <El_Che> Bash is a great language for procedural, step-by-step talks

[19:28] <thundergnat> AlexDaniel:  Yep, several of them. 

[19:28] <sena_kun> no problem, there is a bit of confusion around this topic. perl(5) is one language, perl 6 is a different one. it is a complete change of a lot of things.

[19:28] <lizmat> weekly: https://perlweeklychallenge.org/blog/meet-the-champion-014/

[19:28] <yoleaux> 02:06Z <AlexDaniel> lizmat: maybe this is a good benchmark: https://colabti.org/irclogger/irclogger_log/perl6?date=2019-07-06#l154

[19:28] <yoleaux> 02:06Z <AlexDaniel> lizmat: it's really slow but I don't think it should be

[19:28] <notable6> lizmat, Noted!

[19:28] <yoleaux> 02:16Z <AlexDaniel> lizmat: I looked at the profile but I don't see anything obvious. I think it's an interesting case, unless I'm missing something obvious, it should be just a bunch of iterators glued together in interesting ways. The logic basically skips values at certain indexes (that's it!). Even though it's not fun to have 100 iterators on top of each other, it should still be really really fast.

[19:28] <yoleaux> 03:10Z <AlexDaniel> lizmat: here's a more readable version: https://github.com/ajs/perl6-Math-Sequences/pull/41/commits/fd15438b4b8f33666646ce0ebed0d769f6c12b8d

[19:28] <yoleaux> 12:23Z <AlexDaniel> lizmat: another weird bug: https://github.com/ajs/perl6-Math-Sequences/issues/47

[19:28] <El_Che> Perl and other programming languages are better suited when you need to transform data or when the logic is more complicated

[19:28] <yoleaux> 12:23Z <AlexDaniel> lizmat: (with the same code)

[19:28] <Guest96979> we can use parallel command for running tasks in concurrently..is perl capable of that?

[19:28] <yoleaux> 12:45Z <El_Che> lizmat: https://sungo.wtf/2019/07/05/leaving-irc.perl.org.html

[19:29] <sena_kun> Guest96979, it sure is.

[19:29] <El_Che> Guest96979: Perl 6, yes, very nicely. Perl 5 can use forks

[19:29] <AlexDaniel> well, piping in bash is much easier

[19:29] <Guest96979> El_Che, is it like awk then?

[19:30] <El_Che> bigger, with a bigger standard library

[19:30] <Guest96979> ok

[19:30] <El_Che> more datatypes

[19:30] <Guest96979> sounds interesting..

[19:30] <Guest96979> which one would u recommend to a newbie ? perl5 or perl6

[19:31] <El_Che> They are both different languages, so it depends on you usage. As a bash replacement I think perl6 is more fun

[19:31] <El_Che> (but you're in a perl 6 channel)

[19:31] <AlexDaniel> also bash is not a bad choice for a lot of small tasks

[19:32] <Guest96979> how does piping look like in perl6 though?

[19:32] <thundergnat> AlexDaniel: E.G. A000602 hydrocarbons is on there, but it called Paraffins on Rosettacode http://rosettacode.org/wiki/Paraffins#Perl_6 

[19:32] <Guest96979> is it as simple as chaining |

[19:32] <Guest96979> "|"

[19:33] <AlexDaniel> a bit more verbose

[19:33] <Guest96979> would it require constructing objects and passing them as parameter?'

[19:33] <AlexDaniel> Guest96979: see some examples here: https://docs.perl6.org/type/Proc

[19:33] * sena_kun .oO ( need to write a library with | operator, as Haskell has )

[19:33] <thundergnat> AlexDaniel: But it isn't implemented as a lazy list, and I'm not sure how easy it may be to convert it. (You have to specify how many terms you want up front)

[19:34] <El_Che> Guest96979: you tend to do a lot of less piping in programming languages in my experience

[19:34] <El_Che> you transform the data along the way

[19:34] <El_Che> and more often than not you don't need to run shell commands 

[19:34] <AlexDaniel> thundergnat: you can make almost any code lazy with gather/take

[19:35] <Guest96979> i guess then recommended way is to get required output through bash and transform using perl/perl6 and again filter using pipes in bash?

[19:35] <thundergnat> afk for a bit

[19:35] <AlexDaniel> thundergnat: actually, it already uses gather take, so why is it not lazy?

[19:35] <AlexDaniel> oooh because you have to provide N?

[19:36] <AlexDaniel> Guest96979: why not do the processing in perl 6 ?

[19:37] <AlexDaniel> thundergnat: fwiw https://github.com/ajs/perl6-Math-Sequences/issues/87 is the only remaining sequence that is covered on wikipedia

[19:37] <Guest96979> ok.if it can get the job done then that's great

[19:38] <Guest96979> but in that doc page, is it really required to construct your command as "run process, arg1, arg2, arg3,..."?

[19:38] <Guest96979> why not a simple string of entire command?

[19:42] <AlexDaniel> Guest96979: because then you're more likely to introduce shell injection bugs

[19:42] <AlexDaniel> Guest96979: but yes, you can do "shell 'some cmd | here | no prob'"

[19:44] <Guest96979> ok..thanks m8

[19:44] <Guest96979> will give it a try

[19:45] <Guest96979> any1 here uses scala here?

[19:46] *** Guest96979 left
[19:50] *** mowcat joined
[19:50] <TreyHarris> Guest43313: I have, but it's been some years...

[19:51] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Need a substitute for Perl 5 die with newline for raising end-user errors? https://github.com/perl6/problem-solving/issues/59

[19:52] <AlexDaniel> TreyHarris: that's a wrong guest :)

[19:53] <TreyHarris> oops

[19:57] *** pecastro left
[19:58] *** Manifest0 left
[20:04] *** Manifest0 joined
[20:06] *** mowcat left
[20:11] *** Manifest0 left
[20:17] *** |oLa| left
[20:17] *** Manifest0 joined
[20:22] *** Manifest0 left
[20:26] *** Manifest0 joined
[20:30] *** Manifest0 left
[20:31] *** kaare_ joined
[20:35] *** Manifest0 joined
[20:42] *** lancew joined
[20:45] *** lizmat_ joined
[20:49] *** lizmat left
[20:50] *** Manifest0 left
[20:53] *** lizmat_ is now known as lizmat

[20:56] *** Manifest0 joined
[21:01] *** lancew left
[21:05] *** Manifest0 left
[21:11] *** Manifest0 joined
[21:17] *** Manifest0 left
[21:19] *** jaldhar left
[21:19] *** jaldhar joined
[21:23] *** Manifest0 joined
[21:24] *** |oLa| joined
[21:31] *** Manifest0 left
[21:37] *** Manifest0 joined
[21:43] *** Manifest0 left
[21:46] *** kaare_ left
[21:46] *** kaare_ joined
[21:49] *** Manifest0 joined
[21:49] *** rfold left
[21:52] *** rindolf left
[21:52] *** kaare_ left
[22:03] *** Manifest0 left
[22:10] *** Manifest0 joined
[22:17] *** Manifest0 left
[22:19] *** natrys left
[22:22] *** Manifest0 joined
[22:26] *** Manifest0 left
[22:32] *** Manifest0 joined
[22:36] *** Manifest0 left
[22:42] *** Manifest0 joined
[22:42] *** denix13 joined
[22:46] *** denix13 left
[22:47] *** _jrjsmrtn joined
[22:48] *** __jrjsmrtn__ left
[22:48] *** Manifest0 left
[22:54] *** Manifest0 joined
[22:54] <AlexDaniel> thundergnat: what's @_.clone ?

[22:55] <AlexDaniel> thundergnat: btw “Resolves #123” needs to be in the commit message, not in the PR title. I don't think it'll work :)

[22:58] <thundergnat> AlexDaniel: Ah phooey.

[22:58] <thundergnat> AlexDaniel: @_ is the sequence up to that point. I'm cloning it so I can iterate it several times. 

[22:59] <AlexDaniel> thundergnat: that sounds weird…

[22:59] <AlexDaniel> thundergnat: isn't @ cached anyway?

[22:59] <AlexDaniel> thundergnat: what if you use @A000311 instead? Can you iterate it then?

[23:00] <AlexDaniel> thundergnat: or is this the problem: @seq.tail ?

[23:00] <AlexDaniel> you have $n, so you don't need .tail, just access it using the index

[23:00] <AlexDaniel> I just dislike the idea of cloning the whole sequence for every next element…

[23:00] <thundergnat> AlexDaniel: you would think so but using @_ directly or the sequence id results in "sequence already iterated" errors.

[23:01] <AlexDaniel> m: my @A000311 = 0, 1, { state $n = 1; my @seq = @_.clone; ++$n; -($n-1) * @seq.tail + sum (1 .. ($n - 1)).map: -> $k { ($n choose $k) * @seq[$k] * @seq[$n - $k] } } ... *; say @A000311[^10]

[23:01] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3l + sum (1 .. ($n - 1)).map: -> $k { ($n7⏏5 choose $k) * @seq[$k] * @seq[$n - $k] }␤    expecting any of:␤        infix␤        infix stopper␤   …»

[23:01] <AlexDaniel> ah sheesh no `choose`

[23:01] <AlexDaniel> thundergnat: isn't it because of .tail though?

[23:02] <AlexDaniel> thundergnat: accessing by the index should be just fine

[23:02] <thundergnat> AlexDaniel: possibly... probably

[23:14] <thundergnat> AlexDaniel: Pushing a fix in few seconds 

[23:14] <Kaiepi> i'm hesitant to say i'm completely done implementing wide string support on moarvm since i'm wary of how nativecall handles a few things but i'm at the point where i can have a basic implementation working once i finish my work on the rakudo end!

[23:15] *** Manifest0 left
[23:16] <AlexDaniel> what do you guys think about https://github.com/ajs/perl6-Math-Sequences/pull/129 ?

[23:16] <AlexDaniel> thundergnat, MasterDuke

[23:18] <thundergnat> Looking:

[23:20] *** Manifest0 joined
[23:21] <thundergnat> AlexDaniel: I agree. The only thing I would suggest is to add as many items as OEIS has to the sequence before &NOSEQ marker. (You may have already, I didn't dig that deep)

[23:22] <AlexDaniel> thundergnat: yes, I did

[23:22] <AlexDaniel> these sequences tend to be very short though

[23:22] <AlexDaniel> that's what the PR does :)

[23:23] <AlexDaniel> OK I'll start merging stuff

[23:24] <thundergnat> AlexDaniel: Ok, I pushed better code for A000311. No more cloning the entire sequence on each iteration. Thanks for the nudge.

[23:25] <AlexDaniel> thundergnat: nice!

[23:25] <AlexDaniel> I merged everything

[23:26] <AlexDaniel> squashable6: status

[23:26] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈14 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[23:27] <AlexDaniel> thundergnat: the labels were very useful :)

[23:28] <thundergnat> AlexDaniel: Turns out they were quite useful, I look smart in retrospect but I was just spitballing at the time ;-)

[23:28] <AlexDaniel> :)

[23:29] <AlexDaniel> how many sequences are there in total?

[23:29] <thundergnat> AlexDaniel: I am in moderate awe of how fast you knocked all the scripting together and really made the squashathon move along.

[23:30] <AlexDaniel> 184, and only 50 left to implement

[23:30] <AlexDaniel> thundergnat: I stole some code from my past self

[23:31] <AlexDaniel> thundergnat: here, we did it before: https://github.com/perl6/ecosystem-unbitrot/blob/master/scripts/populate-issues.p6

[23:31] <thundergnat> AlexDaniel: That past self guy is a damn useful fellow to have around!

[23:31] <AlexDaniel> thundergnat: last time it was a bit more fun though, because unbitrot repo was in perl6 org and github used to autosubscribe all people in the organization

[23:32] <AlexDaniel> thundergnat: so we sent like more than 300 notifications, to each person out of 300 people subscribed, if I'm not mistaken

[23:33] <AlexDaniel> it was great :)

[23:35] <AlexDaniel> ahhh, there's no license in that repo??

[23:39] <AlexDaniel> m: my %A001519; multi sub A001519(0 --> 1) { }; multi sub A001519(1 --> 1) { }; multi sub A001519($n) { %A001519{$n} //= 3 * A001519($n - 1) - A001519($n - 2) }; our @A001519 = lazy 𝕀.map: -> $n { A001519($n) }; say @A001519[^10]

[23:39] <camelia> rakudo-moar cf6f6d926: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    𝕀 used at line 1␤␤»

[23:40] <thundergnat> AlexDaniel: Hm. Indeed there isn't. That puts a little damper on my enthusiasm. Several of his other repos are MIT or Artistic licensed. Hopefully it's just an oversite.

[23:40] <AlexDaniel> m: my %A001519; multi sub A001519(0 --> 1) { }; multi sub A001519(1 --> 1) { }; multi sub A001519($n) { %A001519{$n} //= 3 * A001519($n - 1) - A001519($n - 2) }; our @A001519 = lazy (1…∞).map: -> $n { A001519($n) }; say @A001519[^10]

[23:40] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(1 2 5 13 34 89 233 610 1597 4181)␤»

[23:40] <AlexDaniel> thundergnat: yeah, I'm pretty sure it's a mistake

[23:40] <AlexDaniel> thundergnat: btw where are they, I saw some commits from them today

[23:41] <thundergnat> AlexDaniel: shrug. Your guess is as good as mine.

[23:42] <AlexDaniel> m: our @A001519 = 1, 1, -> $n2, $n1 { 3 * $n1 - $n1 }; say @A001519[^10]

[23:42] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(1 1 -> $n2, $n1 { #`(Block|72919064) ... } (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[23:42] <AlexDaniel> m: our @A001519 = 1, 1, -> $n2, $n1 { 3 * $n1 - $n1 } … ∞; say @A001519[^10]

[23:42] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(1 1 2 4 8 16 32 64 128 256)␤»

[23:42] <AlexDaniel> m: our @A001519 = 1, 1, -> $n2, $n1 { 3 * $n1 - $n2 } … ∞; say @A001519[^10]

[23:42] <camelia> rakudo-moar cf6f6d926: OUTPUT: «(1 1 2 5 13 34 89 233 610 1597)␤»

[23:48] *** sena_kun left
[23:52] *** Manifest0 left
[23:57] *** Manifest0 joined
