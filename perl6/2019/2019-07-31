[00:00] *** reportable6 left
[00:03] *** |oLa| left
[00:04] *** reportable6 joined
[00:21] *** |oLa| joined
[00:22] *** |oLa| left
[00:22] *** |oLa|1 joined
[00:23] *** aindilis joined
[00:34] <SmokeMachine> vrurg: the tests are broken...

[00:38] <vrurg> SmokeMachine: passing on my side. Er, what PR is breaking them?

[00:40] <vrurg> I see, travis... Dunno, I'm running on HEAD, this could be the reason.

[00:50] *** Voldenet joined
[00:50] *** Voldenet left
[00:50] *** Voldenet joined
[00:55] *** lucasb left
[01:00] *** ufobat_ joined
[01:04] *** ufobat left
[01:11] *** wildtrees left
[01:17] <pilne> yanno

[01:17] <pilne> perl6 might be the language to build a fantastic irc client

[01:20] *** SCHAPiE left
[01:23] *** Cabanossi left
[01:25] <pilne> would reliance on the moarvm make the program larger than say something hacked together in electron/kivy/java like, would the size of the vm make it a "ridiculous" dependency?

[01:26] *** SCHAPiE joined
[01:30] <discord6> <Tyler (Aearnus)> pilne: libmoar.so is 8.0269012 megabytes on my system

[01:30] <discord6> <Tyler (Aearnus)> i guarentee that's smaller than electron at the very least

[01:33] <Elronnd> 7.7m on mine

[01:37] <pilne> sweeet

[01:38] *** Cabanossi joined
[01:38] <discord6> <Tyler (Aearnus)> the irc bridge is already written in perl6 pilne

[01:38] <discord6> <Tyler (Aearnus)> it's just not very stable

[01:45] *** Voldenet left
[01:48] <pilne> so it's low hanging fruit for a hobbyist/noob? :D

[01:51] *** Voldenet joined
[01:51] *** Voldenet left
[01:51] *** Voldenet joined
[01:58] <Elronnd> pilne: there's not really a good way to build UI yet in perl6.  Terminal::Print sucks, and gtk is afaik immature

[01:59] <discord6> <Tyler (Aearnus)> https://github.com/azawawi/perl6-ncurses ?

[01:59] <discord6> <Tyler (Aearnus)> might be a good time to start on a perl6 bindgen

[01:59] <Elronnd> I started working on a c compiler in perl6 a while back

[02:00] <Elronnd> pretty much finished the tokenizer, but burnt out on the preprocessor

[02:01] <discord6> <Tyler (Aearnus)> Elronnd: much easier to just make a yacc clone and use the C yacc/lex rules

[02:01] <Elronnd> ncurses is awful

[02:01] <Elronnd> discord6: I wanted to have super pretty error messages

[02:01] <discord6> <Tyler (Aearnus)> that's what they did here https://github.com/gmasching/cl-c-parse

[02:01] <Elronnd> and do, like, static analysis and stuff

[02:01] *** Manifest0 left
[02:02] *** Manifest0 joined
[02:02] <discord6> <Tyler (Aearnus)> it's a cool diea

[02:02] <discord6> <Tyler (Aearnus)> idea

[02:03] <Elronnd> I also wanted to do pipelined compilation, where you start at the top, keep munching characters until you get a preprocessor token, munch preprocessor tokens until you get a lex token, munch lex tokens until you get something you can parse, etc.

[02:03] <discord6> <Tyler (Aearnus)> i don't know why we don't have automatic bindings generators

[02:03] <Elronnd> so it's almost like it's single-pass

[02:03] <discord6> <Tyler (Aearnus)> huh, that's interesting. never heard of that

[02:04] <discord6> <Tyler (Aearnus)> i'm pretty firmly in the camp of parser combinators being the most elegant parsing solution

[02:05] *** adu_ joined
[02:05] *** adu left
[02:05] *** adu_ is now known as adu

[02:05] <Elronnd> parser combinators sound cool, but I've never really gotten into them

[02:13] *** kaare__ left
[02:13] *** kaare__ joined
[02:26] *** kaare__ left
[02:26] *** kaare__ joined
[02:29] *** Cabanossi left
[02:34] *** Cabanossi joined
[02:36] *** discoD joined
[02:51] *** aborazmeh left
[03:31] *** molaf joined
[03:40] *** molaf left
[03:53] *** curan joined
[04:09] <cpan-p6> New module released to CPAN! App::nm2perl6 (0.0.1) by 03JGOFF

[04:14] <cpan-p6> New module released to CPAN! Sparrow6 (0.0.8) by 03MELEZHIK

[04:14] *** dudz left
[04:35] *** discoD left
[05:13] <discord6> <Tyler (Aearnus)> do literal arguments to nativecall functions get GC'ed?

[05:13] <discord6> <Tyler (Aearnus)> i have a tight loop for this game project i'm working on, and the only things I do in it are call like 3 nativecall functions

[05:14] <discord6> <Tyler (Aearnus)> but every 10-ish seconds the framerate drops from an already iffy 60fps to 1fps for a frame or so

[05:18] *** dudz joined
[05:18] *** tilpner joined
[05:19] *** SCHAPiE left
[05:21] *** cpan-p6 left
[05:21] *** SCHAPiE joined
[05:21] *** Technaton joined
[05:24] *** sauvin joined
[05:44] *** AlexDaniel joined
[05:45] *** jmerelo joined
[05:46] *** Sgeo__ joined
[05:48] <AlexDaniel> El_Che: yeah, it was

[05:49] *** Sgeo_ left
[05:50] <AlexDaniel> El_Che: https://github.com/rakudo/rakudo/commit/bd29d3f64345ca2f9cf3e37f2331e36b0449ab01

[05:50] <AlexDaniel> El_Che: part of the 2019.07.1 release

[05:50] <AlexDaniel> El_Che: is it still flapping for you?

[05:56] *** Itaipu left
[06:00] *** reportable6 left
[06:00] *** reportable6 joined
[06:00] *** ChanServ sets mode: +v reportable6

[06:22] <Geth> ¦ doc: 722b41dee3 | (JJ Merelo)++ | doc/Language/contexts.pod6

[06:22] <synopsebot> Link: https://doc.perl6.org/language/contexts

[06:22] <Geth> ¦ doc: Adds section on list contexts, refs #1225

[06:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/722b41dee3

[06:24] <jmerelo> Both links to logs above are wrong. Is there a way to change them?

[06:39] *** reach_satori_ left
[06:43] <jmerelo> Does anyone think we should release another survey just in time for the PerlCon? (And maybe swiss perl workshop too)

[06:47] *** dyske joined
[07:06] <AlexDaniel> 🤷

[07:06] *** reach_satori_ joined
[07:14] *** patrickb joined
[07:29] *** Coffee-N-Donuts joined
[07:29] *** Coffee-N-Donuts left
[07:32] *** nepugia joined
[07:34] *** jaldhar joined
[07:40] *** MARTIMM joined
[07:46] *** chloekek joined
[07:54] *** Marcool joined
[07:56] *** zakharyas joined
[07:59] *** dolmen joined
[07:59] *** ravenousmoose left
[08:00] *** ravenousmoose joined
[08:00] <chloekek> jmerelo: I finished a prototype of the Nix expressions, although I wrote them by hand instead of generating them. Now I can build a Perl 6 program that has dependencies on some ecosystem libraries and it generates a script that sets up PERL6LIB and execs Rakudo. :)

[08:01] *** satori__ joined
[08:02] *** robertle joined
[08:03] <jmerelo> chloekek: cool!

[08:04] *** reach_satori_ left
[08:05] *** dudz left
[08:05] *** dudz joined
[08:07] *** scimon joined
[08:09] *** MARTIMM left
[08:09] *** marcel_ joined
[08:10] <chloekek> jmerelo: They look like this, and I want to generate them automatically from META6.json files: https://github.com/chloekek/meta62nix/blob/master/example/META6.nix https://github.com/chloekek/meta62nix/blob/master/ecosystem.nix

[08:11] <chloekek> Generating ecosystem.nix will be a little tricky since I need to download all the tarballs to find their hashes. But once that works I can set up CI and test all the packages automatically and test that they're compatible with each other. :)

[08:18] *** nepugia left
[08:22] <jmerelo> chloekek: much cleaner than JSON.

[08:23] <jmerelo> chloekek: the problem is that for the ecosystem there's no such thing as a fixed hash. That was in the issue.

[08:24] *** dakkar joined
[08:25] <chloekek> If a new version of a package is available then ecosystem.nix must be updated.

[08:26] <chloekek> I'll take another look at the issue.

[08:28] <chloekek> Nix can't cope with sudden changes in downloaded artifacts. They must be exactly the same each time, otherwise the build won't be reproducible. This means you need to give a hash.

[08:29] <chloekek> Which is what I want anyway, even if I'd be using something else. Not knowing what you'll get, and then executing it, is a big security issue (which we see happen often in then npm ecosystem).

[08:30] <chloekek> What I imagine is having a cronjob that automatically checks for new versions of packages, computes their hashes, and commits to the repo a new ecosystem.nix file. Then it's always up-to-date. But indeed the question is, how do you efficiently check for new versions of packages?

[08:31] <chloekek> Regarding security, it might be that this automatically committed ecosystem.nix file now points to malware. But that won't affect users who are currently using an old version of the ecosystem.nix file (unless they too automatically update that, but that would be foolish).

[08:32] *** domidumont joined
[08:33] <jmerelo> chloekek: if there's no explicit version in META.list, zef download whatever is there. It checks the version in META6.json against what's installed, but not the rest of the source.

[08:33] *** domidumont left
[08:33] <jmerelo> chloekek: that's why I proposed that releases should be tagged, and maybe announced too in META.list

[08:33] <chloekek> Yeah that would be a good idea.

[08:33] <chloekek> Still, Git allows removal of tags, and then you can create a new tag for a different commit. So even then, it should point to commits directly by hash.

[08:34] <jmerelo> chloekek: then you could compute hashes, for instance, and (roughly) guarantee that the sources for a particular version are constant.

[08:34] <chloekek> For example: today v1.0.0 points to commit abcdef. And tomorrow, v1.0.0 points to commit 123456 which contains malware.

[08:35] *** rindolf joined
[08:35] <jmerelo> chloekek: well, you can check the commit hash, and bind it to the tag. If you remove and replace the tag later, that's not a big deal.

[08:35] <chloekek> Yeah but those hashes would need to be in META.list for Zef to download them safely. Otherwise if you run Zef on a new machine, or deleted ~/.zef before downloading the package a second time, it won't be the same.

[08:36] <jmerelo> chloekek: so you could retrieve the tagged release, note down the commit hash, hash it too so that you can check them...

[08:36] <jmerelo> chloekek: I'm not thinking about zef. zef is not going to do that. 

[08:36] <chloekek> Well, or any package manager that derives the package list from META.list.

[08:37] *** Marcool left
[08:37] <jmerelo> chloekek: right now, there's a zef spider that indexes CPAN and ecosystem every two hours and creates an index out of that. The new sytem, let's call it fez, would store the commit hash and the distro hash and never change it.

[08:38] <jmerelo> chloekek: as a matter of fact, it could check periodically that what's in a tag is effectively what's indexed and flag a distro if it's not.

[08:38] <chloekek> Ah right, yeah that would work.

[08:38] <jmerelo> chloekek: zef right now stores everything in a .json in a repo; same could be done here. Or maybe store it in a .nix somewhere...

[08:39] <chloekek> Could generate a Nix expression for each version of each package, and don't touch them if they already exist.

[08:39] <jmerelo> chloekek: right

[08:39] <jmerelo> chloekek: that would be cool.

[08:39] <chloekek> Yeah that makes sense.

[08:39] <jmerelo> chloekek: are you attending PerlCon?

[08:39] <chloekek> No I don't think I am.

[08:40] <jmerelo> chloekek: I was thinking about doing a BoF with this

[08:40] <jmerelo> chloekek: there're a couple of functionalities in zef that are quite interesting and could be spun off. First, the logic to find dependencies. Second, the testing logic, which uses one of several systems available.

[08:41] <chloekek> By the way, Nix also doesn't care about package versions. If you have two packages that are similar but have different version numbers, Nix treats them as completely independent packages. Which is usually what you want for executables on a workstation, but I don't know how Rakudo copes with different versions of packages that use the same package names (e.g. Foo::Bar). I believe you can pass a version number

[08:41] <chloekek> to use?

[08:41] <jmerelo> chloekek: also auth

[08:41] <chloekek> Can you have multiple libraries in PERL6LIB that expose packages with the same name?

[08:42] <jmerelo> chloekek: yep, as long as they use different versions and/or different authors.

[08:42] <chloekek> Ah that's nice. :)

[08:42] <jmerelo> chloekek: you can also specify the API and let perl 6 find out which one does that API.

[08:42] <jmerelo> chloekek: (not seen anyone using that in the wild, but still...)

[08:43] <chloekek> That's neat, could be useful for libraries with platform-specific implementations.

[08:43] <chloekek> Thanks for the tips, I'll give some more thought to how to generate ecosystem.nix and deal with (version, auth) pairs.

[08:43] <jmerelo> chloekek: hadn't thought about that, but that's right. :api is in principle (and in examples) taking a number, but I guess it could be anything in principle.

[08:43] <jmerelo> chloekek: my pleasure.

[08:44] <chloekek> What's a BoF?

[08:51] <patrickb> chloekek: https://en.wikipedia.org/wiki/Birds_of_a_feather_(computing)

[08:51] <chloekek> Thanks.

[09:01] <chloekek> jmerelo: When Foo depends on Baz, Bar depends on Baz:ver<1.2.3>, and Qux depends on Foo and Bar, which version of Baz should be used in PERL6LIB? Both the latest version and version 1.2.3?

[09:01] <chloekek> in PERL6LIB when running Qux*

[09:02] <chloekek> Because that would be rather easy. :D

[09:03] <chloekek> It seems that depends can specify version ranges, so I suppose it's not that simple and actually needs some resolution.

[09:11] <chloekek> If Rakudo can cope with multiple versions of a package then I think you can just find all upper bounds that satisfy the constraints and then put those in PERL6LIB.

[09:14] *** ravenousmoose left
[09:14] <chloekek> In the first version I'll just completely ignore versions and get something working. vOv

[09:18] *** ravenousmoose joined
[09:24] *** Cabanossi left
[09:35] *** dyske left
[09:38] *** Cabanossi joined
[09:38] *** Itaipu joined
[09:44] *** pilne left
[09:49] <jmerelo> chloekek: I think so, both. But I would have to look it up. 

[09:49] <jmerelo> chloekek: it's probably OK to ignore versions :-)

[09:59] *** scimon_ joined
[10:00] *** dyske joined
[10:02] *** scimon left
[10:03] *** sena_kun joined
[10:09] *** Black_Ribbon left
[10:13] *** pat_js joined
[10:20] *** [Sno] left
[10:27] *** dolmen left
[10:43] *** aborazmeh joined
[10:43] *** aborazmeh left
[10:43] *** aborazmeh joined
[10:58] *** epony left
[11:04] *** aborazmeh left
[11:12] *** epony joined
[11:14] *** zakharyas left
[11:20] <chloekek> jmerelo: I've been looking at META.list and META6.json and I see what's the problem.

[11:20] <chloekek> All you have is source-url and version and there's no connection between the two.

[11:23] *** dolmen joined
[11:26] <chloekek> I think it'd work a lot better if people had to make releases and upload tarballs somewhere, like with CPAN Perl 5.

[11:27] <chloekek> In fact I think I'll not bother with automatically generating ecosystem.nix for now, and just add packages to it manually whenever I need one. Or at best integrate it with CPAN only.

[11:27] *** ravenousmoose left
[11:28] *** ravenousmoose joined
[11:30] <chloekek> Making release tarballs is also a process which can do arbitrary things such as generating code, which is currently not possible unless you want to commit that to your git repo.

[11:30] <chloekek> Separating releases from version control avoids a lot of problems.

[11:31] <ugexe> Uh a git tag in META6 json has no extra protections against changes

[11:32] <jmerelo> chloekek: as a matter of fact the version in source-url and in META6.json can be different, as just happened in a question in perl6-users

[11:32] <ugexe> i wish we’d quit making shit up

[11:32] <chloekek> jmerelo: yes, hence "no connection between the two"

[11:33] <jmerelo> chloekek: right, that's what you meant. Sorry.

[11:33] <chloekek> The problem boils down to: you have a URL, and if you fetch the resource it points to twice, you might get something different each time.

[11:34] <jmerelo> chloekek: we could encourage people to tag a release _and_ upload a release tarball too.

[11:34] <jmerelo> chloekek: as a matter of fact, GitHub (and probably gitlab) do that automatically for you, even from the command line.

[11:34] <Geth> ¦ perl6.org: 505b5152f8 | (Elizabeth Mattijsen)++ | source/index.html

[11:34] <Geth> ¦ perl6.org: Give Perl 6 a more adult intro

[11:34] <Geth> ¦ perl6.org: 

[11:34] <Geth> ¦ perl6.org: - de-emphasize being the sister of Perl 5

[11:34] <Geth> ¦ perl6.org: - emphasize part of the Perl community

[11:34] <Geth> ¦ perl6.org: - emphasize continued development, rather than being just new

[11:34] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/505b5152f8

[11:34] <Geth> ¦ perl6.org: ef32dfc071 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | source/index.html

[11:34] <chloekek> With GitHub you can get a tarball for anything that rev-parse can parse.

[11:34] <Geth> ¦ perl6.org: Merge pull request #132 from perl6/more-adult-intro

[11:34] <Geth> ¦ perl6.org: 

[11:34] <Geth> ¦ perl6.org: Give Perl 6 a more adult intro

[11:34] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/ef32dfc071

[11:34] <jmerelo> chloekek: come to think of it, I think it does it even if you don't ask explicitly.

[11:35] *** scimon_ left
[11:35] <chloekek> Yeah it just generates the tarball on the fly when requested.

[11:35] <ugexe> ...which I’ve pointed out in the issue stating using gut tags is superior 

[11:35] <chloekek> The URL template is https://github.com/<user>/<repo>/archive/<rev-parse>.tar.gz

[11:36] <chloekek> I think you can even do stuff like HEAD@{2019-01-01} to get the version at that date (although it's a bad idea).

[11:36] <jmerelo> chloekek: still, it can change if you remove the tag and assign it somewhere else; but that would be byzantine. 

[11:36] <jmerelo> chloekek: as said above, we can hash the tarball and the commit and bind it to the release. If you move the tag, it would be noticed.

[11:37] <chloekek> Hash validation is a requirement, I can't live without it.

[11:37] <jmerelo> chloekek: right, date not a good idea. Tagging at least is a (more) human way to refer to specific commits.

[11:38] <chloekek> Even if you got the tarball for a commit hash, you still want to verify the hash of the tarball after downloading, because GitHub itself may be compromised. :)

[11:38] <jmerelo> chloekek: right, you can have different levels of checking. As long as you store the hash associated to the release somewhere, not a big deal.

[11:39] <chloekek> Yeah then it's fine.

[11:40] <chloekek> The problem with META.list is that it doesn't store any of this information. What you'd have preferably would be a file/database with information about each release as (name, rev, auth, archive URL, archive hash) tuples.

[11:40] <jmerelo> chloekek: right. You can store it anywhere, in another git repo, for instance.

[11:40] <chloekek> And when making a release, this database must somehow be updated (perhaps as an extra step as with CPAN, or automatically by scraping Git repositories).

[11:40] <ugexe> You can’t just find the upper bounds. Two modules may depend on a two different but specific versions

[11:41] <chloekek> The database can also include dependency information to aid resolution and allow parallel downloads.

[11:41] <jmerelo> chloekek: right now it's scraped. 

[11:41] <chloekek> Do we have one already? Where is it?

[11:42] <jmerelo> chloekek: in one of ugexe's repos, https://github.com/ugexe/Perl6-ecosystems The scraping tool is here: https://github.com/ugexe/Perl6-App--ecogen

[11:42] <chloekek> Cool1

[11:42] <jmerelo> ugexe++ 

[11:42] *** marcel_ left
[11:42] <jmerelo> sorry, off to cook.

[11:43] *** jmerelo left
[11:45] <chloekek> Thanks, I'll look more into how CPAN works and update the list for non-CPAN packages manually.

[11:58] *** satori__ left
[12:00] *** reportable6 left
[12:04] *** reportable6 joined
[12:04] *** ChanServ sets mode: +v reportable6

[12:06] *** epony left
[12:11] *** cpan-p6 joined
[12:11] *** cpan-p6 left
[12:11] *** cpan-p6 joined
[12:27] <El_Che> v2017.07.1 packages build is being triggered from Bruges :)

[12:28] <timotimo> oooh, like a fuckin' fairy tale!

[12:29] <timotimo> did they tell you about the alcoves?

[12:29] *** pat_js left
[12:31] <El_Che> timotimo: hehe

[12:32] <El_Che> (I am semi local, about 120 km further east :) )

[12:33] <El_Che> (the flopping failting test for performance is mostly hitting i386 of my builds)

[12:41] *** scimon joined
[12:42] *** molaf joined
[12:44] *** zakharyas joined
[12:47] *** discord6 joined
[12:50] *** MilkmanDan left
[12:51] *** MilkmanDan joined
[12:53] *** chloekek left
[12:53] *** sena_kun left
[13:06] <Xliff> \o

[13:12] *** pat_js joined
[13:19] *** pamplemousse joined
[13:19] <El_Che> lo

[13:27] *** sena_kun joined
[13:29] *** chloekek joined
[13:36] *** epony joined
[13:39] *** lucasb joined
[13:41] *** curan left
[13:43] *** pmurias joined
[13:43] <pmurias> timotimo: is you livecoding spaceship drawing thing available somewhere

[13:43] <pmurias> ?

[13:44] <timotimo> yep

[13:44] <pmurias> timotimo: I have been thinking about porting it over to rakudo.js

[13:44] <timotimo> https://bitbucket.org/gtkshooter/p6-gtk-shooter/src

[13:44] <El_Che> pretty neat stuff

[13:46] <pmurias> timotimo: thanks

[13:54] *** Itaipu_ joined
[13:56] *** Itaipu left
[13:58] *** Itaipu joined
[14:01] *** Itaipu_ left
[14:04] *** Itaipu left
[14:04] *** Itaipu joined
[14:20] <pmurias> timotimo: the spaceship snippet just draw a static spaceship image?

[14:21] <timotimo> yes

[14:22] <timotimo> there's a branch that you may want to check out, too

[14:24] *** jaldhar left
[14:24] *** jaldhar joined
[14:27] *** pmurias left
[14:27] *** Itaipu_ joined
[14:28] *** pmurias joined
[14:30] *** Itaipu left
[14:31] *** dyske left
[14:31] <tony-o_> any of you guys around zürich know of an inexpensive place to stay?

[14:33] *** pmurias left
[14:48] <SmokeMachine> is there any plan to make comma accept custom keywords as `model` for Red, for example?

[14:48] <timotimo> there's already "monitor" and "actor" in it

[14:48] <timotimo> i'd imagine adding "model" wouldn't be a big deal

[14:49] <sena_kun> SmokeMachine, the dirty way is very fast, can add it to next complete release, the proper way is not so easy and, more like, very not easy.

[14:51] <El_Che> it pretty much depends on how many people use p6 to create DSL

[14:51] <El_Che> I have SparrowDo in mind (and indeed Red)

[14:53] *** marcel_ joined
[14:53] <SmokeMachine> sena_kun: how dirty would be the dirty way?

[14:53] <sena_kun> well, a self-modifying language means we either execute it and look at how it looks like(which we must not, of course) or we just try to be as good in assuming things as we can.

[14:53] <timotimo> literally just add "model" to the list of accepted thingies

[14:54] <timotimo> maybe with a check (or suggestion) that Red is use'd

[14:54] <sena_kun> SmokeMachine, not really, I guess.

[14:55] <sena_kun> I have a feeling that a proper way will be something of a framework support, e.g. you can add some groovy to your java project, that'd be nice to tick `Red` or something else of this sort in project creator / project settings and have additional keywords, checks and such.

[14:55] <chloekek> Add some Perl 6 to your Java project!

[14:56] <sena_kun> chloekek, we do have Perl 6 parts in our Java-based Comma. ;)

[14:57] <SmokeMachine> sena_kun: would it be possible add something on META6.json of a module saying that it "exports" the model keyword and when a project includes (as dependency) that module comma automatically accepts model?

[15:00] <sena_kun> SmokeMachine, I think that a metamodel symbol is exported anyway and we do look into that, so... the question is how to nicely tie it into the parser. I can't say much, unfortunately, as I didn't work with it a lot.

[15:01] <SmokeMachine> sena_kun: Oh! Sorry I've misunderstood... I thought comma would not look at the exported symbols...

[15:01] <sena_kun> SmokeMachine, anyway, creating a ticket for it right now...

[15:01] <SmokeMachine> sena_kun: :) thanks!

[15:03] <sena_kun> SmokeMachine, well, Comma does completion for e.g. variables, subs from outside, no? If it's not for you, it should to. Of course, there is a lot of work to do for it to become better and more useful.

[15:04] <SmokeMachine> sena_kun: I meant metamodel symbols...

[15:04] <SmokeMachine> I've tried to use comma to write Red... but: https://usercontent.irccloud-cdn.com/file/UdSKMfPL/image.png

[15:05] *** sauvin left
[15:06] <sena_kun> SmokeMachine, this is a mis-parse for sure. Anyway, a ticket is created, thanks for your interest in Comma.

[15:06] *** patrickb left
[15:07] <SmokeMachine> thanks!

[15:09] <timotimo> SmokeMachine: it does look like comma lets you write lots of Red

[15:10] <timotimo> Red words, Red squiggly lines, Red background

[15:10] <SmokeMachine> timotimo: :P

[15:16] *** jmerelo joined
[15:21] *** pat_js left
[15:27] *** dolmen left
[15:30] *** dolmen joined
[15:30] *** robertle left
[15:34] *** wildtrees joined
[15:37] <cpan-p6> New module released to CPAN! Gnome::Gdk3 (0.14.7) by 03MARTIMM

[15:43] *** chloekek left
[15:48] <cpan-p6> New module released to CPAN! Gnome::Gdk3 (0.14.9) by 03MARTIMM

[15:53] <zostay> How is it possible for a uint16 value to hold a -256? That's the value I seem to be getting out of a native type when I'm trying to convert what should be 65280 to a UInt.

[15:55] *** dolmen left
[15:55] <zostay> Since the impossible has happened, I'm not even sure where to begin.

[16:02] <tobs> zostay: 65280 is 0xff00 which is also how -256 looks in two's complement in a 16-bit integer

[16:03] <tobs> so the data is correct, the one who's printing the data has a wrong idea about the data being signed or unsigned though

[16:03] <zostay> Yes, I actually inferred the 65280 from the -256.

[16:04] <zostay> All I'm doing is using NativeCall to pull in a CStruct and then using dd $obj.value and it comes out -256.

[16:04] <zostay> I can only assume it must actually mean the 2's complement.

[16:04] <zostay> As I don't know what this data is supposed to look like yet.

[16:05] <zostay> But it mustn't be negative.

[16:05] <tobs> m: use NativeCall; my uint16 $x = -256; dd $x

[16:05] *** evalable6 left
[16:05] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «65280␤»

[16:08] *** evalable6 joined
[16:08] *** ChanServ sets mode: +v evalable6

[16:08] <zostay> Right. I'm letting NativeCall convert a pointer to an object and then trying to wrap that in something easier to work with in pure Perl, https://github.com/zostay/p6-Device-HIDAPI/blob/master/lib/Device/HIDAPI.pm6#L73

[16:09] <zostay> That dd line is just me trying to figure out what's going on and it outputting what shouldn't be possible on my machine. I don't know if it will happen if you install hidapi and then try it on yours because it would depend on the usage-pages of the devices connected to your machine (and I'm only barely familiar with HID at this point to know whether this is a common one or not).

[16:10] *** MilkmanDan left
[16:10] <zostay> I'm probably doing something wrong at this point since I just drafted this code last night while at my son's taekwondo, but suringly uint16 should never be able to store -256.

[16:11] <zostay> *surely

[16:11] *** MilkmanDan joined
[16:14] <tobs> m: use NativeCall; class X is repr<CStruct> { has uint16 $.x }; with X.new(:x<-256>) { dd .x; dd .x.UInt }

[16:14] *** evalable6 left
[16:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-256␤Failure.new(exception => X::OutOfRange.new(what => "Coercion to UInt", got => -256, range => "0..^Inf", comment => Any), backtrace => Backtrace.new)␤»

[16:15] <tobs> I have no real idea about the issue but this at least reduces the amount of code you need to get -256 out of an uint16

[16:15] <tobs> (and was I killing evalable6 with every `m:`?)

[16:15] <tobs> m: say «test»

[16:15] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «test␤»

[16:16] *** evalable6 joined
[16:17] <tobs> m: say «test»

[16:17] *** evalable6 left
[16:17] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «test␤»

[16:17] <tobs> AlexDaniel: ↑ there seems to be an issue with evalable

[16:17] <AlexDaniel> e: say 42

[16:18] <tobs> it's not back yet

[16:18] <AlexDaniel> indeed

[16:18] <AlexDaniel> Attempt to return outside of immediately-enclosing Routine

[16:18] <zostay> Botocide.

[16:19] <AlexDaniel> https://github.com/perl6/whateverable/blob/10ef56636537cff3dce126821bf7aa4ae7c24bf2/lib/Whateverable/Replaceable.pm6#L39

[16:20] <zostay> I'll dig into this again when I have some time, but finding a -256 in a uint16 was the weirdest thing I'd encountered in awhile and I just sat there trying to figure out if my brain broke or that really did just happen. :-p

[16:21] <AlexDaniel> zostay: it's a known issue. Most uint bugs were fixed though

[16:21] <AlexDaniel> but if you want to break you brain even more

[16:21] <AlexDaniel> m: my int @x[-2**63]; say +@x

[16:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-9223372036854775808␤»

[16:22] <AlexDaniel> that's an array with a negative size :)

[16:22] *** evalable6 joined
[16:22] <tobs> that's one way to cheat at memory consumption

[16:27] *** chloekek joined
[16:29] *** scimon left
[16:32] *** pamplemousse left
[16:32] *** Cabanossi left
[16:38] *** dogbert17 joined
[16:40] *** dakkar left
[16:42] <jaldhar> Hello.  Take a look at this code: @suffixes.sort( { $^a.chars <=> $^b.chars }).reverse.grep({ @strings.grep(/$_/) ~~ @strings }).first

[16:43] <jaldhar> It is for finding the longest common substring in @strings.  It works but I feel it could be more idiomatic/efficient.  In particular I don't like the grep part.  I feel I should be using junctions (i.e. all) but I couldn't get it to work.

[16:44] <jaldhar> Any advice?

[16:45] <AlexDaniel> jaldhar: sort(*.chars)

[16:45] <AlexDaniel> that's for the first part :)

[16:45] <jaldhar> AlexDaniel: ah yes.  ok.

[16:46] <tony-o_> jaldhar: there is also https://codegolf.stackexchange.com/a/182141

[16:48] <jaldhar> tony-o_: interesting but thats a different approach and i don't want to just copy someone elses code, I want to get mine working.

[16:49] *** Cabanossi joined
[16:49] *** jmerelo left
[16:49] <AlexDaniel> jaldhar: what about @strings.all.contains($_)

[16:50] <jaldhar> I was trying to do @strings.all ~~ /$_/ but the error is that you cannot coerce a junction to a string

[16:50] <jaldhar> but that might do the trick...

[16:50] <AlexDaniel> so: @suffixes.sort(*.chars).reverse.grep({ @strings.all.contains($_) }).first

[16:50] <ugexe> dont do that

[16:50] <ugexe> m: my @a = <hello world>; say @a.contains("o w")

[16:50] *** evalable6 left
[16:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «True␤»

[16:50] <AlexDaniel> ».contains

[16:50] <AlexDaniel> or not

[16:51] <AlexDaniel> ok now I'm getting confused :)

[16:51] *** evalable6 joined
[16:51] <AlexDaniel> m: my @a = <hello world>; say @a.all.contains("o w")

[16:51] *** evalable6 left
[16:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «all(False, False)␤»

[16:51] <AlexDaniel> ugexe: so?

[16:51] <ugexe> i didn't expect that to do that

[16:51] <AlexDaniel> what else is it supposed to do then :)

[16:52] *** evalable6 joined
[16:53] <ugexe> i expected it to try and do contains on a stringified version of all(hello, world)

[16:54] <ugexe> "expect" based on how contains otherwise works

[16:54] <jaldhar> btw it does work though

[16:54] <ugexe> as honestly i'd expect @a.contains to not do what it does currently

[16:54] <AlexDaniel> jaldhar: I'd assume the performance is not that great but yes, technically it should work :)

[16:55] <tony-o_> you can get rid of the reverse by doing $^b <=> $^a rather than $^a <=> $^b

[16:55] *** molaf left
[16:55] <ugexe> -*.chars

[16:55] <tony-o_> yea

[16:56] <jaldhar> tony-o_: it's a habit from perl5 because "Perl Best Practices" recommends it.

[16:56] <lizmat> weekly: https://medium.com/@jcoterhals/perl-6-small-stuff-21-its-a-date-or-learn-from-an-overly-complex-solution-to-a-simple-task-cf469252724f

[16:56] <notable6> lizmat, Noted! (weekly)

[16:58] <chloekek> Is there a nice way to turn a two-element Seq into a Pair?

[16:59] <tony-o_> jaldhar: https://gist.github.com/tony-o/f3d9378eb0da16ca72299da5afe5e2d2

[16:59] <tony-o_> not using reverse is faster and it's easier to grok imo

[17:00] <tony-o_> but, then again, i'm just some guy on the internet

[17:01] <jaldhar> tony-o_:  interesting.  I'll have to bear that in mind for the future.

[17:01] <chloekek> Ah, this works: my Str:D % = $path.lines».split(‘ ’).map({ $_[0] => $_[1] });

[17:03] <jaldhar> tony-o_: though of course if I use sort (*.chars) I'll still need the .reverse

[17:03] <tony-o_> i'm not recommending *.chars

[17:04] <AlexDaniel> jaldhar: as ugexe++ mentioned, -*.chars should work

[17:04] <AlexDaniel> chloekek: maybe `[=>] $seq` works too

[17:04] <jaldhar> oh I didn't see that - there

[17:04] <tony-o_> m: my @a = qw<abc cd e d defg>; my @b = qw<abcdef cdefg>; say @a.sort(-*.chars).grep({ @b.contains: $_ }).first;

[17:04] *** evalable6 left
[17:04] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «defg␤»

[17:04] <tony-o_> m: my @a = qw<abc cd e d>; my @b = qw<abcdef cdefg>; say @a.sort(-*.chars).grep({ @b.contains: $_ }).first;

[17:04] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «abc␤»

[17:05] <tony-o_> seems concise enough

[17:06] *** evalable6 joined
[17:06] <AlexDaniel> tony-o_: wrong

[17:06] <zostay> Schwartzian transform does not buy you much on object attributes lookup. In fact, it probably buys you nothing in that case.

[17:07] <AlexDaniel> tony-o_: as ugexe++ mentioned, you can't do that

[17:07] <zostay> If you used some calculation instead of .chars, though, the Schwartzian will probably be faster.

[17:07] <AlexDaniel> tony-o_: can't .contains without .all

[17:08] <ugexe> .reverse has like no overhead

[17:08] <ugexe> say @a and say @a.reverse should take the same time

[17:09] <zostay> Right, I'm suggesting the Schwartzian is actually costing you in this case.

[17:09] <chloekek> AlexDaniel: wouldn't that create pairs that have pairs as keys?

[17:10] <ugexe> for some reason i interpreted your point as the opposite 

[17:10] <zostay> sort(*.chars) is like .map({ (.chars, $_) }).sort({ $^a[0] <=> $^b[0] }).map({ .[1] }), but just using .chars should be super fast already.

[17:10] <chloekek> p6: [=>] ((1, 2).Seq, (3, 4).Seq, (5, 6).Seq).Seq

[17:10] *** evalable6 left
[17:10] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Potential difficulties:␤    Useless use of [=>] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[=>] ((1, 2).Seq, (3, 4).Seq, (5, 6).Seq␤»

[17:10] <AlexDaniel> m: dd [=>] ‘fo’.comb

[17:10] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «:f("o")␤»

[17:10] <chloekek> p6: say [=>] ((1, 2).Seq, (3, 4).Seq, (5, 6).Seq).Seq

[17:10] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(1 2) => (3 4) => (5 6)␤»

[17:10] <AlexDaniel> m: dd ([=>] ‘fo’.comb)

[17:10] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «:f("o")␤»

[17:10] <AlexDaniel> chloekek: yes, but if you know you only have two elements… :)

[17:10] <chloekek> Oh, right.

[17:10] <chloekek> p6: ((1, 2).Seq, (3, 4).Seq, (5, 6).Seq).Seq.map([=>] *).say

[17:10] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[17:11] <chloekek> p6: ((1, 2).Seq, (3, 4).Seq, (5, 6).Seq).Seq.map({[=>] $_}).say

[17:11] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(1 => 2 3 => 4 5 => 6)␤»

[17:11] <chloekek> Lol neat.

[17:11] <chloekek> Yeah I like { .[0] => .[1] } better but thanks anyway. :D

[17:12] <Geth> ¦ whateverable: dc02c9d801 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xt/evalable.t

[17:12] <Geth> ¦ whateverable: Remove r: shortcut from tests

[17:12] <Geth> ¦ whateverable: 

[17:12] <Geth> ¦ whateverable: It's no longer used, see 0df60933433a9becd7dfff73f913ef24f2c0312c.

[17:12] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/dc02c9d801

[17:12] <Geth> ¦ whateverable: ce2fde35a5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Replaceable.pm6

[17:12] <Geth> ¦ whateverable: Remove use of `return` outside a routine

[17:12] <Geth> ¦ whateverable: 

[17:12] <Geth> ¦ whateverable: After rakudo upgrade it now correctly says:

[17:12] *** evalable6 joined
[17:12] *** ChanServ sets mode: +v evalable6

[17:12] <Geth> ¦ whateverable: 

[17:12] <Geth> ¦ whateverable:     Attempt to return outside of immediately-enclosing Routine

[17:12] <Geth> ¦ whateverable: 

[17:12] <Geth> ¦ whateverable: And I'm surprised it didn't cause any issues before.

[17:12] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/ce2fde35a5

[17:12] <AlexDaniel> m: say ‘die one more time please’

[17:12] *** evalable6 left
[17:12] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «die one more time please␤»

[17:13] <AlexDaniel> tobs: thank you, it should be fixed now, I think

[17:13] *** evalable6 joined
[17:13] <AlexDaniel> m: say 42

[17:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[17:13] <AlexDaniel> e: say 42

[17:13] <evalable6> AlexDaniel, rakudo-moar 082c09e0e: OUTPUT: «42␤»

[17:13] <AlexDaniel> \o/

[17:13] <AlexDaniel> it is

[17:13] <tobs> AlexDaniel++

[17:14] <tobs> what was it? Can't you return immediately from a `start {}` block? Did that change?

[17:14] <AlexDaniel> tobs: start block is not a routine, you can't return from it

[17:14] <AlexDaniel> m: start { return 42 }; sleep 1

[17:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Unhandled exception in code scheduled on thread 4␤Attempt to return outside of any Routine␤  in block  at <tmp> line 1␤␤»

[17:15] <AlexDaniel> 6c: start { return 42 }; sleep 1

[17:15] <AlexDaniel> let's see when that was fixed

[17:15] <tony-o_> AlexDaniel: do you have a case where that is wrong?

[17:15] <committable6> AlexDaniel, https://gist.github.com/84404e5abde6ff2932d979b74fa5166f

[17:16] <AlexDaniel> m: my @a = ‘f’, ‘f c’; @b = qw<abcdef cdefg>; say @a.sort(-*.chars).grep({ @b.contains: $_ }).first;

[17:16] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@b' is not declared␤at <tmp>:1␤------> 3my @a = ‘f’, ‘f c’; 7⏏5@b = qw<abcdef cdefg>; say @a.sort(-*.ch␤»

[17:16] <AlexDaniel> m: my @a = ‘f’, ‘f c’; my @b = qw<abcdef cdefg>; say @a.sort(-*.chars).grep({ @b.contains: $_ }).first;

[17:16] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «f c␤»

[17:16] <AlexDaniel> tony-o_: there

[17:18] <tony-o_> ah

[17:18] <AlexDaniel> tobs: yeah, seems like it was somewhat okay previously

[17:18] <AlexDaniel> bisect: start { return 42 }; sleep 1

[17:18] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=082c09e). Old exit code: 0

[17:18] <tony-o_> then add the .all back in - it's still fewer double greps

[17:18] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/6310ed86c9481e9d878f21621f3189fa

[17:18] <bisectable6> AlexDaniel, (2018-11-02) https://github.com/rakudo/rakudo/commit/15c16e35ade24c6f007792a394aa0f590e2d87c1

[17:19] <tobs> I mean that's what you pointed at in the Replaceable source code.

[17:20] <AlexDaniel> tobs: yeah, there was a `return` in the start block, and looking at the commit mentioned by bisectable, I think it was throwing an exception that was not shown anywhere instead of actually returning

[17:20] <tobs> aha, 2018-01. In terms of Rakudo releases (my unit of change), that's not too long ago.

[17:20] <AlexDaniel> 2018-*11*, indeed not too long ago :)

[17:20] <tobs> oh yeah

[17:21] <AlexDaniel> c: 2018.10 start { return 42; CATCH { default { .say } } }; sleep 1

[17:21] <committable6> AlexDaniel, ¦2018.10: «Attempt to return outside of any Routine␤  in block  at /tmp/Far1pDmxUE line 1␤␤»

[17:21] <AlexDaniel> tobs: yeeeep

[17:22] <AlexDaniel> jnthn: this is amazing. `return;` out of a start block used to work because it was throwing an exception that wasn't shown anywhere

[17:22] <AlexDaniel> or at least that's my understanding of what happened there :)

[17:29] *** sauvin joined
[17:55] *** zakharyas left
[17:55] <vrurg> SmokeMachine: BTW, what is the status of caching?

[17:56] <SmokeMachine> vrurg: incomplete... but what’s done is working...

[17:57] <SmokeMachine> It do not invalidade cache yet...

[17:57] <vrurg> Had to ask before implementing own variant... :)

[17:57] <SmokeMachine> There is a memory cache example...

[17:57] <vrurg> Ah, then ok. I need invalidation. That's actually where the phasers issue came from. :)

[17:58] *** robertle joined
[17:58] *** [Sno] joined
[17:59] <SmokeMachine> vrurg: and this: https://github.com/FCO/Red-Driver-Cache-Redis

[18:00] *** reportable6 left
[18:00] <SmokeMachine> It do not invalidate when you insert or update, but invalidate by time...

[18:00] <vrurg> BTW, what do you use as cache key? id?

[18:02] <SmokeMachine> This module uses redis, and the memory one just uses a hash...

[18:02] *** pamplemousse joined
[18:03] <vrurg> I mean, how does it work with complex searches? Say, I have a DB of districts, searching by district-type => 'county', name => 'Palm Beach', updistrict-id => state-id

[18:04] <SmokeMachine> It uses the generated AST as the key...

[18:04] *** reportable6 joined
[18:04] <vrurg> Yes! :D

[18:05] <SmokeMachine> There is a role that can transform that ast into a string (that’s what I use on redis)

[18:05] <vrurg> Simple and ingenious!

[18:06] <SmokeMachine> vrurg: https://github.com/FCO/Red/blob/master/lib/Red/Driver/Cache.pm6#L71

[18:06] <vrurg> Thanks! Will be waiting for invalidation.

[18:07] <vrurg> I see. Really like the idea.

[18:08] * vrurg did not forget about the tests.

[18:13] <SmokeMachine> and this is how I translate to string: https://github.com/FCO/Red/blob/master/lib/Red/Driver/CacheWithStrKey.pm6#L21

[18:15] <SmokeMachine> its not invalidating yet, but: https://github.com/FCO/Red/blob/master/lib/Red/Driver/CacheInvalidateOnWrite.pm6

[18:18] *** marcel_ left
[18:18] <Geth> ¦ doc: 30d16ad3d3 | Alexander++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[18:18] <Geth> ¦ doc: Correction of minor errors introduced in recent update

[18:18] <Geth> ¦ doc: 

[18:18] <Geth> ¦ doc: Consistency in discussion order of 'm' and 'rx'; inserted missing word "This"; correction of link to adverb section (link should not only be to regex advers); inserted missing word 'named'.

[18:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/30d16ad3d3

[18:18] <synopsebot> Link: https://doc.perl6.org/language/regexes

[18:20] *** pilne joined
[18:25] *** sauvin left
[18:31] *** Black_Ribbon joined
[18:33] *** pecastro joined
[18:33] *** Black_Ribbon left
[18:33] *** Black_Ribbon joined
[18:55] *** satori__ joined
[19:02] *** jaldhar left
[19:16] <cpan-p6> New module released to CPAN! App::nm2perl6 (0.0.2) by 03JGOFF

[19:20] *** Black_Ribbon left
[19:20] *** Black_Ribbon joined
[19:28] *** lichtkind joined
[19:29] <SmokeMachine> m: my Array[Int] $a .= new(1,2,3); dd $a>>.Str # that seems odd... should it be a typed array? a Int typed array?

[19:29] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Array[Int].new("1", "2", "3")␤»

[19:30] <SmokeMachine> m: my Array[Int] $a .= new(1,2,3); .^name.say for $a>>.Str

[19:30] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Array[Int]␤»

[19:30] <SmokeMachine> m: my Array[Int] $a .= new(1,2,3); .^name.say for |$a>>.Str

[19:30] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Str␤Str␤Str␤»

[19:33] <lichtkind> i have issue with an AoA which i can  assign onle to  element [0][0] rest is immutable

[19:33] *** Itaipu joined
[19:35] *** Itaipu_ left
[19:41] *** Black_Ribbon left
[19:46] *** zakharyas joined
[19:47] *** pamplemousse left
[19:48] *** pamplemousse joined
[19:52] *** Black_Ribbon joined
[19:52] *** pamplemousse left
[19:59] *** candr joined
[20:00] <candr> maybe more of a unix question, but how can I redirect a never ending stream of 'y\n' to a perl6 script...

[20:04] <El_Che> yes | my-script.p6

[20:05] *** molaf joined
[20:07] <candr> ha.. i actually wrote a yes.p6 that did that.... didn't know there war a /usr/bin/yes

[20:08] <candr> my script crashes with it though. prob bad design on my behalf

[20:10] <El_Che> yes, a simple yes loop is a lot of imput. It depends how you cache or handle rh input

[20:10] <El_Che> what are you trying to do? a yes implementation or something that can handle lots of fast input?

[20:15] <candr> part of my code uses Term::ReadKey for interactive and unbuffered input and that is where thee yes pipe is failing i think

[20:15] <candr> i have an integration test that periodically requires user input and i want to be able to run it in the laziest way possible =)

[20:20] <El_Che> I tend to test that kind of stuff by generating data in the test and have the sub in question accept different kind of outputs (e.g. wrap it)

[20:20] <El_Che> some people here may have different strategies

[20:21] <El_Che> but I try to avoid extrernal programs, inckuding the shell

[20:21] <El_Che> (too situation/environment dependant)

[20:23] <candr> good advice

[20:23] <candr> thx

[20:29] <El_Che> also, I expect the external lib to do their own testing, so I don't want to have tests specific for the functionality of that lib

[20:29] <El_Che> if I need them (e.g my app need huge input) I'll send the test upstream

[20:29] <El_Che> most people appreciate it

[20:31] *** wildtrees left
[20:34] *** candr left
[20:35] *** candr joined
[20:36] <candr> ok. i ended up creating a $test-mode bool that can be set by the integration test. i generate the test input and the bool switches off any user acknowledgment code that was annoying when running the tests.

[20:36] *** molaf left
[20:37] <El_Che> candr: make it a multi sub/method?

[20:37] <El_Che> candr: that call the *real* sub/method?

[20:37] <El_Che> (and document only the "real" one, as part of the API)

[20:39] <El_Che> I haven't done it one p6 yet, but I remember overwriting methods in perl 5 and test those, so the real source code did get extra code

[20:39] <candr> hmm.. .could do that... i was thinking the $test-mode bool might come on useful later, but i do hate having global stuff...

[20:40] <El_Che> candr: sure, you know your code layout best

[20:43] <candr> I always welcome outside ideas. Easy to start coding with blinders on.

[20:45] *** Xliff joined
[20:46] *** zakharyas left
[20:58] <Xliff> m: sub fits-into-num32(Num $n, $precision = $*TOLERANCE) { my num32 $x = $n; abs($x - $n) < $precision }; my $n = Num(3.14159265359); for 1e-7, 1e-8 { say fits-into-num32($n, $_); }

[20:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «True␤False␤»

[20:59] *** lichtkind left
[21:10] *** pamplemousse joined
[21:13] *** chloekek left
[21:15] *** pamplemousse left
[21:19] *** rindolf left
[21:19] *** rindolf joined
[21:51] <El_Che> AlexDaniel: make sure to add the misc 99 test fix to the next release :)

[21:51] <El_Che> relaunching rakudo i386 build ...

[21:51] <El_Che> :)

[21:59] *** rindolf left
[22:10] *** jx3 joined
[22:20] <Geth> ¦ doc: threadless-screw++ created pull request #2927: Rewrite of regex interpolation section

[22:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2927

[22:22] <El_Che> $ for i in rakudo rakudo-star perl ; do echo -ne "$i: "; brew info $i| grep install_on_request; done

[22:22] <El_Che> rakudo: install_on_request: 17 (30 days), 39 (90 days), 141 (365 days)

[22:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3install_on_request: 177⏏5 (30 days), 39 (90 days), 141 (365 days)␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»

[22:22] <El_Che> rakudo-star: install_on_request: 172 (30 days), 579 (90 days), 3,979 (365 days)

[22:22] <El_Che> perl: install_on_request: 3,044 (30 days), 14,576 (90 days), 44,310 (365 days)

[22:22] <El_Che> rakudo is new in comparison with rakudo-star, hence the difference

[22:22] *** pecastro left
[22:22] <El_Che> the interesting part is the comparison with perl

[22:24] <El_Che> if people want to get depressed:

[22:24] <El_Che> $ for i in python ruby golang ; do echo -ne "$i: "; brew info $i| grep install_on_request; done

[22:24] <El_Che> python: install_on_request: 241,178 (30 days), 583,949 (90 days), 2,457,702 (365 days)

[22:24] <El_Che> ruby: install_on_request: 23,962 (30 days), 79,659 (90 days), 417,300 (365 days)

[22:24] <El_Che> golang: install_on_request: 75,776 (30 days), 223,157 (90 days), 845,192 (365 days)

[22:25] *** Cabanossi left
[22:27] *** Cabanossi joined
[22:31] <sena_kun> El_Che, this is not so bad, considering that OSX is not a primary OS for a lot of people and all the implications by "a relatively young implementation", "what is perl 6, a new version" etc etc.

[22:32] <El_Che> of course, even homebrew is just a subset of how people get software

[22:32] <El_Che> sena_kun: nevertheless the same argument applies for the other languages there

[22:34] <sena_kun> El_Che, if you want to be more depressed, you can e.g. look at vlang and observe how a transpiler into horrible C that leaks memory even for hellp world gets attention. ;)

[22:34] <El_Che> anyway, my point is kind of positive. Perl 6, hopefully with a new name, must be marketed as a new interesting languages, not as the Perl5 sister language or succesor

[22:34] <sena_kun> El_Che, for all the other languages, well, a bandwagon effect is a scary thing.

[22:34] <El_Che> macos is not my primary os

[22:35] <El_Che> I have a test machine I use on the train (and now on holiday)

[22:35] <El_Che> I am thinking of adding macos to rakudo-pkg, but I wonder if it's worth the effort

[22:35] *** pecastro joined
[22:35] <El_Che> (having now rakudo standalone in homebrew)

[22:36] * sena_kun needs to add some slides to ASN.1 talk

[22:36] <El_Che> sena_kun: is it progressing?

[22:37] <El_Che> sena_kun: make a references to certificates, it may ring a bell for some people

[22:38] <sena_kun> El_Che, LDAP talk is ready, ASN.1 one is almost ready too, though I think it is a bit too short, though I suspect it'll be worse/slower for me before people.

[22:38] <sena_kun> El_Che, well, a spoiler ahead, I'll mention ASN.1 works in space, cell phones, laptops... ;)

[22:38] <El_Che> sena_kun: I time my talks. When nervious is always shorter than timed :)

[22:39] <El_Che> sena_kun: looking forward for the video

[22:40] <sena_kun> El_Che, while using written English daily, my speaking English is something that I rarely have to use, so I add some time for additional "Eeeh, Eeeeeh" for me to say. ;)

[22:41] <El_Che> yeah, it's better to talk slowly and "overdo" the pronounciation thing

[22:41] <El_Che> thing it sounds exaggerated to us, non native-speakers, but the audience will thank you for that

[22:41] <El_Che> (and certainly non-native english speakers in the audience)

[22:41] <El_Che> (most of the audience probably)

[22:42] *** nepugia joined
[22:42] <sena_kun> El_Che, won't people kill me for occasional mistakes?

[22:42] <sena_kun> d'oh, I guess they won't, of course.

[22:43] <El_Che> sena_kun: they only kill you for syntax errors in your slides :)

[22:43] <sena_kun> El_Che, English syntax or Perl 6 syntax? ;)

[22:44] <Kaiepi> man whenever i'll probably eventually speak at a perlcon non-native speakers may have trouble understanding me since i don't really enunciate very well and have a pretty monotone voice

[22:44] <El_Che> Most programmers are crappy writers, so code :)

[22:44] <sena_kun> well, I already did quite a mistake when used the "metacompilation" word, because I meant a totally other thing and jnthn has said it is suitable here, but a couple of days ago I re-checked it and "Oh wow, that's a great failure I have here".

[22:44] <El_Che> yeah, sometimes native speakers (one of the many variations) are hard to understand

[22:45] *** telex joined
[22:45] <El_Che> and some use very localized references (e.g. television on another continent from 40 years ago) that are hard to grasp

[22:46] <sena_kun> I copy my code straight from the editor with a working version, at least it should work for me if not for others...

[22:46] <Kaiepi> never live code, your audience will thank you for it

[22:46] <El_Che> yeah, it explodes more often than not

[22:47] <El_Che> don't rely on the wifi

[22:47] <sena_kun> no demonstration, and I have only 20 minutes each, so should be sa-a-afe

[22:48] <El_Che> (a counter points: non-native english speakers that speak several languages are usually quiete capable of understanding accents)

[22:48] <El_Che> a big part of the audience if this type of conference is multilingual, so that's a plus

[22:49] <Kaiepi> you should hear the dialect some people speak where i live, it's just as bad as boomhauer's from king of the hill

[22:49] <El_Che> lol

[22:49] <El_Che> (luckily I get *that* reference)

[22:49] <Kaiepi> like can you understand this: "she's a pisscuttin' er ainshewha?"

[22:50] <Kaiepi> (that means "it's going fast, isn't it?")

[22:51] <El_Che> (I did get that, wow)

[22:52] <El_Che> most trouble I had was in the Australian outback, in Belice and with an english speaking South-African client with a Cockney accent (we agreed he could speak Afrikaans to me) 

[22:52] <El_Che> (close enough to dutch)

[23:02] *** khisanth_ left
[23:04] <Kaiepi> i should talk here more often, the reason i don't is i keep hexchat on a separate desktop from the one i usually use

[23:04] <Kaiepi> maybe i should get a second monitor

[23:05] *** pecastro left
[23:07] *** uzl joined
[23:07] <El_Che> :)

[23:09] <uzl> o/ Is there difference between placing 'use' before (use SomeModule; unit class A;) a unit-scoped package and placing it within it (unit class A; use SomeModule)?

[23:09] <timotimo> modules are able to change the parser

[23:09] <timotimo> in that case it can make a difference if it's before the unit declaration

[23:10] <Kaiepi> yeah, like if the module were a slang

[23:11] <timotimo> or something like Red or OO::Monitors that introduce a new kind of package, like "model" or "monitor" instead of "class"

[23:11] *** sena_kun left
[23:12] <uzl> For basic usage (e.g, modules that don't change the parser), what's the recommended way of doing it if any?

[23:12] *** Elronnd joined
[23:15] *** khisanth_ joined
[23:15] *** gfldex left
[23:17] <uzl> ...Or most common usage?

[23:18] *** nepugia left
[23:19] <timotimo> shruuuuug

[23:19] <Xliff> Slangs are the most common usage.

[23:20] <Xliff> https://github.com/tony-o/perl6-slang-sql

[23:21] *** gfldex joined
[23:21] <Xliff> timotimo: Would EXPORT be the best place to initialize parser changes like in Slang::SQL or would INIT be a better choice?

[23:25] <timotimo> i don't think INIT would work?

[23:30] <Xliff> Oh?

[23:30] <Xliff> Crap.. gotta restart...

[23:30] *** Xliff left
[23:31] *** Xliff joined
[23:37] *** Xliff left
[23:42] *** astronavt joined
[23:42] *** Xliff joined
[23:45] *** jx3 left
[23:45] <astronavt> alright im finally gonna give perl 6 a shot. especially interested in the type system. does rakudo check types at compile time?

[23:45] <Xliff> m: my \Δ = (4, 4); my $a = "(1, 1)\n(2, 2)\n(3, 3)"; $a ~~ s:g/'(' (\+d) ',' \s* (\d+) ')'/({$0.Int + Δ[0]}, {$1.Int + Δ})/; $a.say

[23:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(1, 1)␤(2, 2)␤(3, 3)␤»

[23:46] <Xliff> m: my \Δ = (4, 4); my $a = "(1, 1)\n(2, 2)\n(3, 3)"; $a ~~ s:g/'(' (\+d) ',' \s* (\d+) ')'/({$0.Int + Δ[0]}, {$1.Int + Δ[1]})/; $a.say

[23:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(1, 1)␤(2, 2)␤(3, 3)␤»

[23:46] *** [particle]1 left
[23:46] <Xliff> my $a = "(1, 1)\n(2, 2)\n(3, 3)"; say $a ~~ /'(' (\+d) ',' \s* (\d+) ')'/;

[23:46] <evalable6> Xliff, rakudo-moar 082c09e0e: OUTPUT: «Nil␤»

[23:46] <timotimo> astronavt: in some cases, yes. anything involving non-private methods won't compile-time-type-check because the object is responsible to decide what "a method call" means

[23:46] <Xliff> my $a = "(1, 1)\n(2, 2)\n(3, 3)"; say $a ~~ m:g/'(' (\+d) ',' \s* (\d+) ')'/;

[23:46] <evalable6> Xliff, rakudo-moar 082c09e0e: OUTPUT: «()␤»

[23:47] <astronavt> timotimo thats.... more complicated than i expected

[23:47] <Xliff> my $a = "(1, 1) (2, 2) (3, 3)"; say $a ~~ m:g/'(' (\+d) ',' \s* (\d+) ')'/;

[23:47] <evalable6> Xliff, rakudo-moar 082c09e0e: OUTPUT: «()␤»

[23:47] <timotimo> perl6 OO is closer to the original concept of OO where "call a method" is a little more like "send a message"

[23:47] <Xliff> my $a = "(1, 1) (2, 2) (3, 3)"; say $a ~~ m:g/'(' (\d+) ',' \s* (\d+) ')'/;

[23:47] <evalable6> Xliff, rakudo-moar 082c09e0e: OUTPUT: «(｢(1, 1)｣␤ 0 => ｢1｣␤ 1 => ｢1｣ ｢(2, 2)｣␤ 0 => ｢2｣␤ 1 => ｢2｣ ｢(3, 3)｣␤ 0 => ｢3｣␤ 1 => ｢3｣)␤»

[23:47] <Xliff>  /o\

[23:48] <Xliff> m: my \Δ = (4, 4); my $a = "(1, 1)\n(2, 2)\n(3, 3)"; $a ~~ s:g/'(' (\d+) ',' \s* (\d+) ')'/({$0.Int + Δ[0]}, {$1.Int + Δ[1]})/; $a.say

[23:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(5, 5)␤(6, 6)␤(7, 7)␤»

[23:48] <astronavt> timotimo interesting. but at the end of the day its still calling functions ("sending messages"), which have typed signatures. right?

[23:48] *** lucasb left
[23:49] <timotimo> well, there's multiple phases to a method call; first is method resolution to get from a method name to a callable, then usually multiple dispatch happens to get the right candidate

[23:49] <astronavt> Xliff this looks like "unpacked" APL

[23:49] <timotimo> a class may implement its own ^find_method, which lets it generate new methods on the fly based on method names

[23:49] <astronavt> timotimo what about subroutines? or whatever perl calls functions that arent methods

[23:50] <timotimo> they are lexically scoped, so at compile time their signatures are fixed, type checks will happen for them

[23:50] <astronavt> ah. interesting. python has the ability to override attribute lookup as well, but i daresay its considered bad practice nowadays

[23:50] <timotimo> m: sub do-the-thing(Int $foo) { }; do-the-thing("hello")

[23:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling do-the-thing(Str) will never work with declared signature (Int $foo)␤at <tmp>:1␤------> 3sub do-the-thing(Int $foo) { }; 7⏏5do-the-thing("hello")␤»

[23:50] <Xliff> astronavt: HAH! Ah... APL

[23:50] <astronavt> great timotimo thats the kind of error id want to see

[23:51] <timotimo> if you see a "===SORRY!===" that almost always means you're looking at a compile-time error

[23:51] <astronavt> Xliff perl 6 still seems easier to me than learning J, so here i am

[23:51] <timotimo> rakudo will not compile-time-typecheck things with "where" clauses, though

[23:51] <astronavt> thats because 'where' can be arbitrary code right? youd need a whole dynamic type system for that

[23:52] <timotimo> that's right

[23:52] <astronavt> im ok with that, data contract vs type system

[23:52] <timotimo> for a subset of that stuff, it could be implemented; i would however claim that that could lead to unhappy surprises

[23:52] <Elronnd> astronavt: yeah, I pretty much gave up on learning J

[23:52] <Elronnd> seemed cool, though

[23:52] <timotimo> i.e. when a minor version of rakudo comes out that implements checks against more "where" expressions, and you have some dead code that used to never cause trouble, and suddenly your module doesn't compile any more

[23:53] <astronavt> yeah, i wouldnt expect them to

[23:53] <Xliff> "J"? What's up with that? Were all the cool letters taken?!

[23:53] * Xliff thunks...

[23:53] <astronavt> thats getting into like... template programming

[23:53] <Xliff> Yeah... that seems about right. 

[23:54] <Xliff> Wait.. what about calling a language "X"! X" is a cool letter!

[23:54] <astronavt> timotimo i would ask them to check that the expression (is that the word?) after 'where' is validly typed though

[23:55] <astronavt> as in, it returns something boolean (or castable to boolean) and all the function calls have the correct types

[23:55] <astronavt> s/them/the compiler/

[23:55] *** Xliff left
[23:55] <timotimo> where does smartmatch, though, which is a bit more than boolean stuff

[23:55] <astronavt> i should have guessed thered be more to it

[23:56] <timotimo> :)

[23:56] <Elronnd> there's a website somewhere that collected all the languages with single-letter names

[23:56] <Elronnd> forget where it is though

[23:56] <timotimo> often you'll want a whatevercode, but ranges are also a good thing to put in there

[23:56] <astronavt> ~~ is smartmatch?

[23:56] <timotimo> yeah, that's how you get a smart match operation explicitly

[23:56] <timotimo> some things do it implicitly; grep for example will perform a smartmatch against list elements for you

[23:57] <timotimo> m: say (1, 2, 3, 4, 5, 6).grep(3..^5)

[23:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(3 4)␤»

[23:57] <astronavt> m: say "a" ~~ "b"

[23:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «False␤»

[23:57] <astronavt> m: say "b".ACCEPTS("a")

[23:57] <timotimo> "when" statements (often found inside of "given") will also do smartmatch for you

[23:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «False␤»

[23:58] <Elronnd> you can use when without given?

[23:58] <timotimo> yep

[23:58] <Elronnd> ohh, right, it just does smartmatch on $_

[23:58] <Elronnd> *that*'s clever

[23:58] <astronavt> m: multi factorial(Int $ where 0) { 1 }; multi factorial(Int $x) { $x * factorial($x - 1) }; say factorial(5);

[23:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «120␤»

[23:58] <astronavt> yep i can get used to this

[23:59] <astronavt> and how hard is it to call C from perl 6? thinking about implementing scientific stuff built on C and Fortran libs

[23:59] <Elronnd> except you probably want the second one to say when >0

[23:59] <ugexe> multi factorial(0) { 1 }

[23:59] <astronavt> Elronnd i got that from the docs :)

[23:59] <timotimo> it's super easy to call C from p6

[23:59] <Elronnd> astronavt: it's really easy for trivial functions

