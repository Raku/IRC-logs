[00:02] *** netrino left
[00:16] *** MasterDuke joined
[00:16] *** MasterDuke left
[00:16] *** MasterDuke joined
[00:38] <Kaiepi> god there's so much i have to explain about functions in the js nutshell

[00:38] <Kaiepi> 318 lines and i'm still not done yet

[00:39] <guifa> Does one of us need to write a TLDR for it? :-)

[00:40] <Kaiepi> maybe

[00:40] <Kaiepi> i've explained declaring functions and writing signatures. i'm in the middle of writing how to invoke functions, and i still have multiple dispatch to write about

[00:40] <Kaiepi> as well as traits

[00:41] <Kaiepi> actually i might leave out traits

[00:49] <guifa> with the exception of is export I don‚Äôt think any of the method/sub traits is too particularly important, and it‚Äôs not even particular to them

[01:04] *** dotdotdot left
[01:18] *** cpan-p6 left
[01:19] *** cpan-p6 joined
[01:19] *** cpan-p6 left
[01:19] *** cpan-p6 joined
[01:20] *** dotdotdot joined
[01:20] *** MidCheck joined
[01:31] *** mowcat left
[01:32] *** zachk left
[01:34] *** buffet_ joined
[01:34] *** buffet left
[01:52] *** kurahaupo_ joined
[01:54] *** kurahaupo left
[01:58] <Kaiepi> finished writing the functions section at 426 lines

[01:59] <discord6> <Tyler (Aearnus)> what are you writing Kaiepi?

[02:03] *** epony left
[02:09] *** kurahaupo_ left
[02:09] <discord6> <Kaiepi> the functions section of the js nutshell

[02:10] *** kurahaupo joined
[02:10] <discord6> <Kaiepi> i'll make a pr for it whenever the one i already have open is merged

[02:35] <discord6> <Tyler (Aearnus)> hey all, is there an easy way to run a loop once before checking the condition?

[02:36] <discord6> <Tyler (Aearnus)> as in, I want the condition to be checked after the loop is run instead of before

[02:36] <discord6> <Rogue> do/while?

[02:36] <discord6> <Tyler (Aearnus)> ahh, repeat, nvm

[02:36] <discord6> <Rogue> I've never actually had to do that in Perl 6 for some reason

[02:36] <discord6> <Rogue> or at least I don't remember having to

[02:37] <discord6> <Tyler (Aearnus)> it was to write a little name generator: my @ws = '/usr/share/dict/words'.IO.lines.grep(none / .+ \'s /); repeat { @ws.grep({ .chars < 10 }).pick(2)>>.tclc.say } while { 'do you like this name? (y/n)'.say; get() ne 'y' }()

[02:38] <MasterDuke> Aearnus: do you know about prompt()?

[02:39] <discord6> <Tyler (Aearnus)> no, I didn't üòÆ

[02:40] <discord6> <Tyler (Aearnus)> my @ws = '/usr/share/dict/words'.IO.lines.grep(none / .+ \'s /); repeat { @ws.grep({ .chars < 10 }).pick(2)>>.tclc.say } while { prompt('do you like this name? (y/n) ') ne 'y' }() much better

[02:47] <MasterDuke> Aearnus: if you care, `grep(! *.contains(q|'s|))` is a bit faster

[02:48] <discord6> <Tyler (Aearnus)> i would indeed care, thank you

[02:50] *** random_yanek left
[02:55] *** jeromelanteri joined
[02:58] *** kent\n left
[02:59] <Geth> ¬¶ doc/MasterDuke17-patch-1: b42f2e533a | MasterDuke17++ (committed using GitHub Web editor) | doc/Type/Proc/Async.pod6

[02:59] <Geth> ¬¶ doc/MasterDuke17-patch-1: Remove line that refers to non-existent text

[02:59] <Geth> ¬¶ doc/MasterDuke17-patch-1: review: https://github.com/perl6/doc/commit/b42f2e533a

[02:59] <Geth> ¬¶ doc: MasterDuke17++ created pull request #2712: Remove line that refers to non-existent text

[02:59] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2712

[03:00] *** kent\n joined
[03:02] *** random_yanek joined
[03:08] *** vrurg left
[03:09] *** adu joined
[03:14] *** john_parr left
[03:15] *** john_parr joined
[03:16] *** kst` is now known as kst

[03:24] *** epony joined
[03:32] *** Sink joined
[03:33] *** Sink left
[03:38] *** AlexDani` joined
[03:42] *** AlexDaniel left
[03:48] *** Cabanossi left
[03:59] *** jaldhar_ joined
[03:59] *** kurahaupo_ joined
[04:00] *** Cabanossi joined
[04:02] *** kurahaupo left
[04:05] *** |Sno| left
[04:10] *** Krenium joined
[04:13] *** skids left
[04:21] *** choiboi joined
[04:27] *** random_yanek left
[04:29] *** AlexDani` is now known as AlexDaniel

[04:29] *** AlexDaniel left
[04:29] *** AlexDaniel joined
[04:30] *** MidCheck left
[04:39] *** random_yanek joined
[04:47] *** curan joined
[04:55] *** bisectable6 left
[04:58] *** bisectable6 joined
[04:58] *** rindolf joined
[04:59] *** bisectable6 left
[05:02] *** adu left
[05:04] *** bisectable6 joined
[05:17] *** MidCheck joined
[05:18] *** evalable6 left
[05:18] *** committable6 left
[05:18] *** bisectable6 left
[05:20] *** bisectable6 joined
[05:22] *** evalable6 joined
[05:22] *** ChanServ sets mode: +v evalable6

[05:23] *** committable6 joined
[05:25] *** jeromelanteri left
[05:26] *** bisectable6 left
[05:27] *** bisectable6 joined
[05:33] *** shareable6 left
[05:33] *** reportable6 left
[05:33] *** reportable6 joined
[05:34] *** jmerelo joined
[05:36] <Geth> ¬¶ doc: b42f2e533a | MasterDuke17++ (committed using GitHub Web editor) | doc/Type/Proc/Async.pod6

[05:36] <Geth> ¬¶ doc: Remove line that refers to non-existent text

[05:36] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b42f2e533a

[05:36] <Geth> ¬¶ doc: 5baf2ab4a8 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Type/Proc/Async.pod6

[05:36] <Geth> ¬¶ doc: Merge pull request #2712 from perl6/MasterDuke17-patch-1

[05:36] <synopsebot> Link: https://doc.perl6.org/type/Proc::Async

[05:36] <Geth> ¬¶ doc: 

[05:36] <Geth> ¬¶ doc: Remove line that refers to non-existent text

[05:36] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5baf2ab4a8

[05:36] *** shareable6 joined
[05:36] *** ChanServ sets mode: +v shareable6

[05:36] *** w_richard_w joined
[05:37] <Geth> ¬¶ doc: 40a534c5c2 | (Ben Davies)++ | doc/Language/js-nutshell.pod6

[05:37] <Geth> ¬¶ doc: JS nutshell: clarify variables section, clean up code examples

[05:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/40a534c5c2

[05:37] <Geth> ¬¶ doc: d2a09a4533 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Language/js-nutshell.pod6

[05:37] <Geth> ¬¶ doc: Merge pull request #2711 from Kaiepi/nodejs

[05:37] <synopsebot> Link: https://doc.perl6.org/language/js-nutshell

[05:37] <Geth> ¬¶ doc: 

[05:37] <Geth> ¬¶ doc: JS nutshell: clarify variables section, clean up code examples

[05:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d2a09a4533

[05:37] *** random_yanek left
[05:37] *** AlexDaniel left
[05:39] *** sauvin joined
[05:42] *** Voldenet left
[05:44] *** Voldenet joined
[05:44] *** Voldenet left
[05:44] *** Voldenet joined
[05:45] <Geth> ¬¶ doc: 7dc04c92f5 | (JJ Merelo)++ | doc/Type/Blob.pod6

[05:45] <Geth> ¬¶ doc: Adds list refs #2694

[05:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/7dc04c92f5

[05:45] <synopsebot> Link: https://doc.perl6.org/type/Blob

[05:48] *** AlexDaniel joined
[05:49] *** random_yanek joined
[05:53] *** random_yanek left
[06:05] *** random_yanek joined
[06:18] *** kurahaupo_ left
[06:18] *** kurahaupo joined
[06:24] *** patrickb joined
[06:34] *** vike1 left
[06:35] *** vike joined
[06:39] <jmerelo> notable6: Published results of last Squashathon https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:40] <notable6> jmerelo, Noted!

[06:40] <jmerelo> squashable6: status

[06:40] <squashable6> jmerelo, Next SQUASHathon in 24 days and ‚âà5 hours (2019-05-04 UTC-14‚åÅUTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:41] <jmerelo> .tell kawaii This next squashathon is supposed to be devoted to Rakudo. Please check you're OK with it.

[06:41] <yoleaux> jmerelo: I'll pass your message to kawaii.

[06:41] <jmerelo> And we do need contributors for the documentation. Contributions have lately dwindled to a trickle, and sometimes they have just stopped altogether.

[06:42] <jmerelo> Besides 6.d, there are many old issues that still need to be addressed.

[06:51] *** pistacchio left
[06:51] *** ufobat_ left
[06:51] *** pistacchio joined
[06:55] *** domidumont joined
[07:09] <kawaii> jmerelo: good morning! Yes of course, other than the usual Squashathon page is there any additional reading material I should see this time?

[07:09] <yoleaux> 06:41Z <jmerelo> kawaii: This next squashathon is supposed to be devoted to Rakudo. Please check you're OK with it.

[07:10] *** random_yanek left
[07:14] *** tobs` joined
[07:15] *** tobs left
[07:15] *** tobs` is now known as tobs

[07:15] *** cgfbee left
[07:16] *** smash_ left
[07:16] *** El_Che left
[07:17] *** smash joined
[07:17] *** El_Che joined
[07:22] *** random_yanek joined
[07:22] *** cgfbee joined
[07:33] *** dakkar joined
[07:34] *** sca left
[07:35] *** sca joined
[07:37] *** kensanata joined
[07:51] *** abraxxa joined
[07:57] *** DarthGandalf joined
[07:58] *** APic left
[07:58] *** renormalist left
[07:58] *** markk left
[07:58] *** markk_ joined
[07:58] *** APic joined
[08:06] *** pmurias joined
[08:07] *** zakharyas joined
[08:07] <pmurias> now that rakudo.js passess tests on chrome, what would be the next step for the grant? email [Coke]?

[08:10] *** i1nfusion joined
[08:13] <timotimo> sounds like a good idea

[08:15] <tadzik> pmurias: is there anything stopping it from passing tests on firefox?

[08:15] <yoleaux> 7 Apr 2019 22:44Z <patrickb> tadzik: I got some thumbs up to just put my changes to rakudobrew in the current repo (https://github.com/tadzik/rakudobrew) and not try to be clever about the upgrade.

[08:15] <yoleaux> 7 Apr 2019 22:44Z <patrickb> tadzik: The new version will just show a message when it detected the incompatibility and shortly explains what to do to fix it.

[08:15] <yoleaux> 7 Apr 2019 22:45Z <patrickb> tadzik: Would you be OK with this? If yes, I'll prepare a PR.

[08:17] <pmurias> tadzik: most of them should run (I'll check if we aren't depending on anything chrome specific for basic functionality)

[08:18] <pmurias> tadzik: some of them depend on better stack traces in chrome

[08:18] <tadzik> I see

[08:19] <tadzik> patrickb: it sounds reasonable enough; but what is the reason for the change, what benefit does it bring?

[08:19] <tadzik> and is there any reason why the fix can't be automated?

[08:19] <pmurias> I haven't seen if it's actually missing in firefox, but working async/await stack traces are feature of the latest chrome

[08:21] <pmurias> also I'm using puppeeter to run tests directly because had issuess with karma (which didn't like the huge .js generated sizes)

[08:22] <patrickb> tadzik: The new directory layout is a requirement for the new mode of operation based on PATH manipulation. The fix can't be automated, because the location of the installations moves and since up to now rakudo has not been portable that would break them. So as long as we don't automatically rebuild all installed perl6s there is no way to automate 

[08:22] <patrickb> that.

[08:23] <patrickb> tadzik: Well, it's sort of a requirement.

[08:25] <patrickb> Hm. Thinking about it, actually the breaking change (move of the installation paths) is not completely related to the other features. It does clean up rakudobrew a lot and prevents nameclashes of the installations with the other files lying around in the .rakudobrew dir though.

[08:26] <discord6> <Tyler (Aearnus)> how does rakudo.js work? ahead of time compilation?

[08:26] *** buffet_ is now known as buffet

[08:34] <pmurias> yes

[08:35] <patrickb> tadzik: What do you think?

[08:36] <pmurias> Tyler (Aernus): it emits JavaScript from QAST and in the browser we precompile as compiling stuff at page load doesn't seem very sane

[08:46] *** ravenousmoose joined
[08:48] *** ravenousmoose_ left
[08:50] <abraxxa> isn't webassembly the way to go?

[08:55] <pmurias> abraxxa: not obviously, currently is built for compiled languages like C++ or Rust while Perl 6 is a lot more dynamic

[08:55] <abraxxa> compile MoarVM to wasm?

[08:57] <pmurias> abraxxa: that should work

[08:57] <pmurias> that worked for Perl 5

[08:59] *** oftl left
[09:04] <pmurias> abraxxa: not something I'm personaly interested in pursuing because I don't consider fiddling with build system and platform differences that fun ;)

[09:06] *** ravenousmoose left
[09:07] *** i1nfusion left
[09:08] *** w_richard_w left
[09:09] *** i1nfusion joined
[09:15] *** i1nfusion left
[09:17] *** duffee joined
[09:18] *** mowcat joined
[09:21] *** i1nfusion joined
[09:28] *** atweiden-air joined
[09:44] *** atweiden-air left
[09:49] *** AlexDaniel left
[09:49] *** AlexDaniel joined
[09:57] *** ravenousmoose joined
[09:57] *** AlexDaniel left
[09:57] *** AlexDaniel joined
[09:58] <patrickb> currently reading up on object construction. What's the most official documentation for that? I looked at S12, docs/language/objects and docs/type/Mu and roast/S12-construction/

[10:02] *** atweiden-air joined
[10:02] *** atweiden-air left
[10:06] *** AlexDaniel left
[10:09] *** netrino joined
[10:11] *** i1nfusion left
[10:11] *** ravenousmoose left
[10:12] *** ravenousmoose joined
[10:17] <holyghost> I'm going to try to find an attractor for a matrix interpolated WAV file channel (a channel which is taken from a channel value to a float)

[10:18] <holyghost> This means I can get my music to the point

[10:18] <holyghost> I need to extend Bayes::Learn for it though

[10:18] <holyghost> It's quasi impossible but I'm going to try it

[10:19] <holyghost> Thus we have some code on plus

[10:20] *** jmerelo left
[10:21] <holyghost> It should work somehow with a (Bayesian) Loss function

[10:42] <holyghost> It'll probably take me more than 40 days :-)

[10:56] *** domidumont left
[10:59] *** curan left
[11:03] *** jaldhar joined
[11:03] *** jaldhar_ left
[11:09] *** AlexDaniel joined
[11:20] *** Black_Ribbon left
[11:27] *** scimon joined
[11:31] *** pistacchio left
[11:31] *** pistacchio joined
[11:49] *** zakharyas left
[11:52] <patrickb> What do I need to do to pm evaluate stuff in here? [/msg evalable6 m: say "Hi"] doesn't seem to work...

[11:52] <lizmat> m: say "Hi"

[11:52] <evalable6> lizmat, rakudo-moar 847783e26: OUTPUT: ¬´Hi‚ê§¬ª

[11:53] *** sergot joined
[11:53] <patrickb> That's not private. :-) I didn't want to spam the channel with my evals until I got them working.

[11:53] <patrickb> Anyways

[11:53] <lizmat> hmmm.. why isn't evalable allowing privmsg ?

[11:53] <patrickb> m: class P {has $.x = 0; submethod BUILD() { $!x }} say P.new(x=>5).perl

[11:53] <evalable6> patrickb, rakudo-moar 847783e26: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/TsRqnaDesC‚ê§Strange‚Ä¶¬ª

[11:53] <evalable6> patrickb, Full output: https://gist.github.com/bb11ec1b19fea8a71150fd8d5f3c958b

[11:53] <lizmat> camelia used to

[11:54] *** Some-body_ joined
[11:54] <lizmat> evalable6: help

[11:54] <evalable6> lizmat, Like this: evalable6: say ‚Äòhello‚Äô; say ‚Äòworld‚Äô # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Evalable

[11:54] <patrickb> lizmat: Might be a security thing...

[11:54] <patrickb> Like, the evildoer at least has to do his evil doings in open sight...

[11:54] *** cpan-p6 left
[11:55] *** DarthGandalf left
[11:55] *** Some-body_ is now known as DarthGandalf

[11:55] <patrickb> m: class P {has $.x = 0; submethod BUILD() { $!x }}; say P.new(x=>5).perl

[11:55] <evalable6> patrickb, rakudo-moar 847783e26: OUTPUT: ¬´P.new(x => Any)‚ê§¬ª

[11:55] <lizmat> https://github.com/perl6/whateverable/issues/350

[11:55] <patrickb> Is the above a bug?

[11:56] <patrickb> m: class P {has $.x = 0; submethod BUILD() { #`[$!x] }}; say P.new(x=>5).perl

[11:56] <evalable6> patrickb, rakudo-moar 847783e26: OUTPUT: ¬´P.new(x => 0)‚ê§¬ª

[11:56] *** cpan-p6 joined
[11:56] *** cpan-p6 left
[11:56] *** cpan-p6 joined
[11:56] *** sena_kun joined
[11:58] <AlexDaniel> r: say 42

[11:58] <perlbot> AlexDaniel: 42‚ê§

[11:58] <AlexDaniel> patrickb: talk to perlbot instead

[12:00] <patrickb> AlexDaniel: Thanks!

[12:02] *** bloatable6 left
[12:02] *** bloatable6 joined
[12:02] *** ChanServ sets mode: +v bloatable6

[12:10] *** jeromelanteri joined
[12:13] *** kurahaupo left
[12:13] *** kurahaupo joined
[12:20] *** domidumont joined
[12:21] *** domidumont left
[12:22] *** domidumont joined
[12:23] *** pistacchio left
[12:23] *** pistacchio joined
[12:25] *** kurahaupo left
[12:26] *** kurahaupo joined
[12:27] <pmurias> abraxxa: if Perl 6 gets ported to the graalvm, once graalvm works on wasm we could use that too

[12:31] *** kurahaupo left
[12:31] *** kurahaupo_ joined
[12:37] *** araraloren joined
[12:38] *** ChoHag left
[12:43] *** quipa joined
[12:45] *** ChoHag joined
[12:46] <patrickb> lizmat: wrt the Parameters subclassing problem from yesterday, is that intended? Should I rakudobug?

[12:46] <lizmat> please rakudobug  :-)

[12:46] *** quipa left
[12:47] *** quipa joined
[12:48] *** zakharyas joined
[12:55] <patrickb> https://github.com/rakudo/rakudo/issues/2829

[12:55] <patrickb> lizmat: ^

[13:01] *** kurahaupo_ left
[13:01] *** kurahaupo joined
[13:03] <guifa> What‚Äôs the difference between <.foo> and <foo> when using an always succeed assertion?

[13:05] <sena_kun> I remember that one is capturing and the second is not.

[13:05] <sena_kun> but I am not sure, let me check...

[13:06] <guifa> Ah yeah, that‚Äôs what it is

[13:06] <sena_kun> also, `.foo` cannot be used outside of the grammar.

[13:06] <sena_kun> m: my regex a {'a'}; say 'a' ~~ /<a>/;

[13:06] <evalable6> sena_kun, rakudo-moar 847783e26: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§ a => ÔΩ¢aÔΩ£‚ê§¬ª

[13:07] <sena_kun> m: my regex a {'a'}; say 'a' ~~ /<.a>/

[13:07] <evalable6> sena_kun, rakudo-moar 847783e26: OUTPUT: ¬´(exit code 1) No such method 'a' for invocant of type 'Match'. Did you mean 'at'?‚ê§  in block <unit> at /tmp/QPcbKYkZFS line 1‚ê§‚ê§¬ª

[13:07] <guifa> I‚Äôve been writing all of my actions purely via make/made so no instantiation is necessary, so I definitely need it to capture ha

[13:07] <sena_kun> m: grammar A { token TOP {<a>}; regex a {'a'} }; A.parse('a').say

[13:07] <evalable6> sena_kun, rakudo-moar 847783e26: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§ a => ÔΩ¢aÔΩ£‚ê§¬ª

[13:07] <sena_kun> m: grammar A { token TOP {<.a>}; regex a {'a'} }; A.parse('a').say

[13:07] <evalable6> sena_kun, rakudo-moar 847783e26: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[13:07] *** kurahaupo left
[13:08] <sena_kun> so the method form cannot be used outside of grammar and is not captured.

[13:08] <guifa> sena_kun++

[13:08] *** kurahaupo joined
[13:14] *** pmurias left
[13:15] *** pistacchio left
[13:16] *** lucasb joined
[13:16] *** pistacchio joined
[13:18] *** ctilmes1 joined
[13:19] *** ctilmes1 left
[13:27] *** dakkar left
[13:27] *** dakkar joined
[13:29] *** vrurg joined
[13:42] *** pmurias joined
[13:43] *** aindilis left
[13:43] *** aindilis` joined
[13:47] *** clarkema joined
[13:56] <pmurias> vrurg: hi

[13:56] <vrurg> pmurias: Hi! Just've merged your PR. Thanks!

[13:58] <pmurias> vrurg: would it make sense to turn the tie used with NQP::Config into a regular object?

[13:58] <pmurias> s/tie/tied hash/

[14:00] <pmurias> vrurg: I saw the github issue respons

[14:00] <pmurias> * response

[14:00] <vrurg> Oops, I answered on your ticket, but only now comprehended what you mean. Still, the answer is correct.

[14:00] <vrurg> tie was needed to minimize the initial changes in Configure.pl. Not really needed anymore. OTOH, why not?

[14:03] <vrurg> And NQP Configure.pl is still using it, though it's just three lines of code.

[14:04] <pmurias> it's not a significant thing, just makes the code a tiny bit more plain

[14:08] *** quipa_ joined
[14:09] *** quipa left
[14:10] <pmurias> vrurg: https://paste.debian.net/1076830/ - I get this error when trying to build things as specified in the email

[14:14] <vrurg> Can you delete nqp/ and try again?

[14:15] <vrurg> It cold happen if you previously ran Configure without github-user.

[14:20] <cpan-p6> New module released to CPAN! License::SPDX (3.5.1) by 03JSTOWE

[14:21] *** aindilis` left
[14:22] *** aindilis joined
[14:24] *** ctilmes left
[14:27] *** ctilmes joined
[14:31] <vrurg> pmurias: After a bit of thinking, I'll get rid of tie today if have time.

[15:01] *** skids joined
[15:03] *** pistacchio left
[15:04] *** pistacchio joined
[15:11] *** zachk joined
[15:23] *** aindilis left
[15:24] *** aindilis` joined
[15:28] *** [Sno] joined
[15:29] *** pmurias left
[15:30] *** domidumont left
[15:32] *** pmurias joined
[15:35] *** patrickb left
[15:46] *** kensanata left
[15:48] *** zakharyas left
[15:52] *** aindilis` left
[15:53] *** aindilis joined
[16:02] *** jeromelanteri left
[16:03] *** araraloren left
[16:05] *** pmurias left
[16:09] *** domidumont joined
[16:09] <tony-o> guifa: do you use blead ?

[16:09] <lizmat> weekly: http://www.khanate.co.uk/blog/2019/04/09/perl-weekly-week-3/

[16:09] <notable6> lizmat, Noted!

[16:10] <tony-o> guifa: i implemented with [FROM|TO]-ZERO

[16:10] *** MasterDuke left
[16:10] <tony-o> re:rounding

[16:10] *** vrurg left
[16:11] <guifa> tony-o I don‚Äôt but I can look into switching to it

[16:11] <tony-o> are you using rakudobrew?

[16:11] <tony-o> i need to write tests for it before i submit a patch

[16:11] <tony-o> and make sure i didn't break anything

[16:12] *** vrurg joined
[16:13] *** vrurg left
[16:13] *** domidumont left
[16:13] *** vrurg joined
[16:13] * guifa heads to rakudobrew 

[16:14] *** duffee left
[16:16] * lizmat clickbaits https://p6weekly.wordpress.com/2019/04/08/2019-14-challenge-taking-off/

[16:17] <tony-o> clickbaited

[16:18] <tony-o> makes me think i should be on twitter 

[16:23] <scimon> It's something of a cesspool but it has it's good points.

[16:24] <scimon> And I'm getting some good feedback on Brexit at the moment.

[16:24] <scimon> Which is helping my sanity.

[16:29] *** pistacchio left
[16:29] *** pistacchio joined
[16:30] *** dakkar left
[16:30] *** Kaiepi left
[16:31] *** Kaiepi joined
[16:31] *** scimon left
[16:35] *** isomorphismes joined
[16:38] <tony-o> good in which direction?

[16:41] <guifa> tony-o want me to go ahead and build moar-blead or should i wait for you to make the tests?  (I‚Äôm happy to help write tests, too)

[16:52] <tony-o> i don't have anything in blead yet for the rounding, here is an initial crack at the tests https://gist.github.com/tony-o/7fc00f9800214d09a84338d16a74b3cb

[16:54] <tony-o> (that's a WIP, not sure i even hae the values correct yet)

[16:55] <guifa> I was just about to say I found one that was off ha

[17:06] *** llfourn left
[17:16] *** MidCheck left
[17:46] <sena_kun> El_Che, ping?

[17:46] *** gregf_ left
[18:00] *** jaldhar left
[18:10] *** pistacchio left
[18:10] *** pistacchio joined
[18:12] *** abraxxa left
[18:19] <tyil> stupid bot

[18:19] *** cpan-p6_ joined
[18:19] *** cpan-p6_ left
[18:19] *** cpan-p6_ joined
[18:19] *** cpan-p6 left
[18:24] *** quipa_ left
[18:28] *** abraxxa joined
[18:29] *** sauvin left
[18:38] <cpan-p6_> New module released to CPAN! URL (0.2.0) by 03TYIL

[18:38] *** hamhu3 joined
[18:51] *** hamhu3_ joined
[18:53] *** hamhu3 left
[18:54] *** daxim left
[19:00] *** quipa joined
[19:02] *** hamhu3_ left
[19:03] *** hamhu3 joined
[19:10] *** quipa_ joined
[19:12] *** quipa left
[19:14] *** quipa_ left
[19:24] *** pistacchio left
[19:24] *** pistacchio joined
[19:25] <Seance[m]> Can someone explain to me what "Use of Nil in string context" means exactly

[19:25] <guifa> That means that a variable that you tried to use where you need a string had a value of Nil

[19:26] *** ctilmes_ joined
[19:27] <guifa> Check each variable / method call and see if any of them are actually Nil

[19:27] <lizmat> mm: say ~Nil

[19:27] <lizmat> m: say ~Nil

[19:27] <evalable6> lizmat, rakudo-moar 1cad10b76: OUTPUT: ¬´Use of Nil in string context‚ê§‚ê§  in block <unit> at /tmp/Yd5gvc7klF line 1‚ê§¬ª

[19:28] *** clarkema left
[19:29] *** ctilmes left
[19:30] <Seance[m]> Thank you

[19:30] <discord6> <Tyler (Aearnus)> What's the rationale behind not having ~Nil eq 'Nil'?

[19:31] <discord6> <Tyler (Aearnus)> (ala JS's undefined)

[19:31] <ugexe> because the string "Nil" is true?

[19:32] <Xliff> If I "require" modules in a BEGIN block, will they be in scope at run-time?

[19:33] <guifa> Any call to Nil generates more Nil.  That means if you call Nil.Str, you get Nil, which can‚Äôt be stringified

[19:33] <lizmat> Xliff: don't think so, if they are in a block

[19:33] <lizmat> Xliff: fortunately, you can also BEGIN a statement

[19:34] <Xliff> OK. So I'd have to preserve whatever type objects that are defined in a global?

[19:34] <Xliff> Or BEGIN require ::($ = 'blah')

[19:34] *** random_yanek left
[19:35] <lizmat> the latter, I would think ?

[19:35] <Xliff> OK.

[19:35] <ugexe> of course that is not robust if you are using it for loading something that might not exists (instead of something you know will always exist alongside the calling module)

[19:40] <Xliff> ugexe: Well... the "require ::($ = 'blah')" thing seems to be working, so thanks for that.

[19:40] <Xliff> ugexe: In this situation, that module BETTER exist. It just isn't loaded.

[19:40] <Xliff> If I get a failure, that's a fatal exception.

[19:41] <ugexe> right, thats fine. for a plugin system though, or for e.g. optionally loading IO::Socket::SSL not so much

[19:42] <Xliff> No. This is not "optional" loading. Consider it more "late" loading.

[19:42] <Xliff> But I want that loading to happen as soon as possible.

[19:42] <ugexe> one thing to consider

[19:42] <Xliff> However, I grok what you are saying. Thanks!

[19:42] <ugexe> module loading is not thread safe

[19:42] <discord6> <Tyler (Aearnus)> > <guifa> Any call to Nil generates more Nil.  That means if you call Nil.Str, you get Nil, which can‚Äôt be stringified Makes sense, thanks!

[19:42] <Xliff> 'k

[19:42] <Xliff> This is not multi-threaded.

[19:44] <tony-o> guifa: putting some commits together

[19:44] <guifa> Of course, if you really wanted Nil to stringify to Nil‚Ä¶

[19:44] <ugexe> too bad you werent able to golf the ::($ = ...) thing though... i never could

[19:44] *** lucasb left
[19:45] <guifa> p6: my $a = Nil but ‚ÄòNil‚Äô; say ‚ÄúI can print $a!‚Äù

[19:45] <evalable6> guifa, rakudo-moar 4ae023c71: OUTPUT: ¬´I can print Nil!‚ê§¬ª

[19:54] <tony-o> guifa: you have any updates for that test?

[19:55] *** ctilmes joined
[19:55] *** ctilmes_ left
[19:59] *** domidumont joined
[20:01] <guifa> tony-o I double checked the values and added about two tests.  How extensive should I go?  A couple of extremely large numbers? Or do you think staying in the -20 < $x < 20 range is sufficient?

[20:01] <tony-o> the world is your oyster

[20:01] <tony-o> i've only implemented for Real

[20:02] <guifa> Ah, I may add some that do integer with round(10) 

[20:03] <guifa> afk for a sec, plumber is here (neighbor has a huge water leak :( )

[20:05] *** domidumont left
[20:07] *** random_yanek joined
[20:07] *** random_yanek left
[20:09] <discord6> <Tyler (Aearnus)> is it possible to parametrize a subset and a class like you can parametrize a role?

[20:09] *** random_yanek joined
[20:14] *** abraxxa left
[20:15] <sena_kun> what's the purpose?

[20:18] <ugexe> m: role Foo[$param] { has $.foo = $param; }; say Foo[420].new.foo

[20:18] <evalable6> ugexe, rakudo-moar 417fa68e9: OUTPUT: ¬´420‚ê§¬ª

[20:19] <sena_kun> m: class Foo[$type] {}

[20:19] <evalable6> sena_kun, rakudo-moar 417fa68e9: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ZuBhztIG3M‚ê§Unable ‚Ä¶¬ª

[20:19] <evalable6> sena_kun, Full output: https://gist.github.com/e558ebd673751c0de10bbafc77747589

[20:35] *** Kaiepi left
[20:35] *** Kaiepi joined
[20:37] *** lucasb joined
[20:37] *** Kaiepi left
[20:37] <guifa> tony-o: there‚Äôs a few more on here + double checked values (may want to trip check them), I think hitting some giant numbers and 0 should about cover it.  

[20:37] <guifa> https://gist.github.com/alabamenhu/1dce8f55a801d54af68e9404967e98e2

[20:37] *** Kaiepi joined
[20:39] *** Black_Ribbon joined
[20:58] *** adu joined
[20:59] *** Kaiepi left
[21:01] *** Kaiepi joined
[21:02] *** Kaiepi left
[21:02] *** Kaiepi joined
[21:15] *** skids left
[21:15] *** llfourn joined
[21:20] *** Krenium left
[21:22] *** vrurg left
[21:24] *** vrurg joined
[21:42] <Xliff> m: multi sub a(1) { say "One" }; multi sub a(42) { say "Fourty Two"; }; multi sub a(Int $a) { say $a; }; a(1); a(2); a(42); 

[21:42] <evalable6> Xliff, rakudo-moar 417fa68e9: OUTPUT: ¬´One‚ê§2‚ê§Fourty Two‚ê§¬ª

[21:46] <Xliff> Anyone know what this means: "Cannot invoke object with invocation handler in this context"

[21:52] <lizmat> Xliff: feels like a bug in core

[21:52] <lizmat> if you're programming pure Perl 6, that error shouldn't happen, I don't think

[21:52] <lizmat> in any case, the error is LTA

[21:55] <Xliff> Ah. That's going to be difficult to bug. Particularly because it's beyond my ability to golf, ATM

[21:55] <Xliff> Will try anyway.

[21:55] <Xliff> To bug.

[21:56] <Xliff> lizmat: Also to note, this is nativecall. It may not be considered pure Perl6.

[21:56] <lizmat> ah, then you should be glad you didn't segfault  :-)

[21:57] <Xliff> Interestingly enough, I cannot find that string in source.

[21:57] <Xliff> lizmat: No kidding! :)

[21:57] <lizmat> Xliff: pretty sure that lives in nqp

[21:57] <sena_kun> m: sub a { 1 }; sub b($a) { say $a }; a() ==> b;

[21:57] <evalable6> sena_kun, rakudo-moar 417fa68e9: OUTPUT: ¬´1‚ê§¬ª

[21:58] <sena_kun> ==> does what I am thinking it does, right? chains subs and nothing more and that's okay?

[21:58] <Xliff> sena_kun: Isn't that the feed op?

[21:58] <sena_kun> sub a { 1 }; sub b($a) { say $a }; b <== b;

[21:58] <sena_kun> it is

[21:58] <sena_kun> m: sub a { 1 }; sub b($a) { say $a }; b <== b;

[21:58] <evalable6> sena_kun, rakudo-moar 417fa68e9: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/SmJtUbeTPP‚ê§Unable ‚Ä¶¬ª

[21:58] <evalable6> sena_kun, Full output: https://gist.github.com/2441b3eafcc16a329da7e66f641ee1bd

[21:58] <sena_kun> m: sub a { 1 }; sub b($a) { say $a }; b <== a;

[21:58] <evalable6> sena_kun, rakudo-moar 417fa68e9: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/yHlK7G_ckZ‚ê§Unable ‚Ä¶¬ª

[21:58] <evalable6> sena_kun, Full output: https://gist.github.com/1ecb5fd9925ecdd723f48c5ef6f27c90

[21:58] <sena_kun> m: sub a { 1 }; sub b($a) { say $a }; b <== a();

[21:58] <evalable6> sena_kun, rakudo-moar 417fa68e9: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/8B8wybD_nZ‚ê§Unable ‚Ä¶¬ª

[21:58] <evalable6> sena_kun, Full output: https://gist.github.com/3d3644c118bcedf5870ad03a18b0b7a4

[21:58] <sena_kun> um

[22:00] <sena_kun> m: sub a { 1 }; sub b($a) { say $a }; b() <== a;

[22:00] <evalable6> sena_kun, rakudo-moar 417fa68e9: OUTPUT: ¬´1‚ê§¬ª

[22:00] <Xliff> lizmat: Actually, it's Moar. frame.c:1795

[22:01] <lizmat> perhaps check on #moarvm  ?  

[22:01] <lizmat> that's above my paygrade  :)

[22:04] <Xliff> LOL! 

[22:04] <Xliff> Will do. Thanks.

[22:06] <tony-o> 3what's your code look like Xliff ?

[22:07] <Xliff> tony-o: I will have to gist.

[22:07] <tony-o> guifa: failing those large number tests

[22:08] <tony-o> guifa: ahh, due to a typo in expected (have positive numbers expected for the rounded negatives)

[22:09] <guifa> ooops!  that‚Äôs what I get for numbers that requiring three screens of horizontal scrolling 

[22:10] <tony-o> yea that output isn't pretty

[22:10] <tony-o> implemented for Real and Rat

[22:11] <guifa> tony-o +++

[22:15] *** sloob joined
[22:24] *** adu left
[22:27] *** Cabanossi left
[22:38] *** Cabanossi joined
[22:38] <tony-o> guifa: https://github.com/rakudo/rakudo/pull/2831

[22:38] <tony-o> AlexDaniel: i don't see anything in that request?

[22:38] <tony-o> is my browser mucking up?

[22:39] <AlexDaniel> tony-o: no, I just don't want somebody to click merge by accident

[22:39] <AlexDaniel> :)

[22:39] <tony-o> ah - ty

[22:40] <AlexDaniel> tony-o: also I have a big problem with this whole thing :)

[22:40] <tony-o> you're in the camp of it being in a stats module?

[22:40] *** sena_kun left
[22:41] <AlexDaniel> no, I'd prefer the proposal to go through the problem-solving repo https://github.com/perl6/problem-solving/

[22:42] <AlexDaniel> just throwing some adverbs on top of an existing sub doesn't sound like a great idea in general. It may be justified in this case, but generally it's a red flag for me

[22:42] <tony-o> ah, i may have mislead guifa in the request for rounding methods in that case

[22:42] <AlexDaniel> not really, you did the right thing at the time :)

[22:43] <AlexDaniel> tony-o: officially, problem-solving is not a thing yet :D

[22:43] <AlexDaniel> the PR for it will be merged on April 15th

[22:43] <AlexDaniel> ( https://github.com/perl6/problem-solving/pull/2 )

[22:43] <tony-o> ah

[22:44] <AlexDaniel> tony-o: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-04-08#l148

[22:45] <tony-o> missed that one i think due to my mucking around with aws

[22:47] <tony-o> do you want to add me to that meta list?

[22:51] <tony-o> AlexDaniel: ^

[22:51] <AlexDaniel> tony-o: yes, I think that's a good idea. File a ticket in https://github.com/perl6/problem-solving/issues and in the first post explain that other rounding methods are not currently available and why it's an issue, and then in the comment propose to add adverbs

[22:55] *** rindolf left
[22:56] <tony-o> ah, i can't add labels in that repo :)

[22:56] *** MidCheck joined
[22:57] <AlexDaniel> tony-o: what label do you want to add? Also, you want to be a responsible dev for `meta` tickets? Or did you mean that you want to be in the list of reviewers?

[22:58] <lucasb> hello AlexDaniel! I'm trying to understand the purpose of the repo. "used for working on all issues that require discussion and/or consensus" so all language design issues and feature requests in the rakudo issues queue would (in theory) belong there?

[22:58] <AlexDaniel> lucasb: yes

[23:00] <tony-o> list of reviewers please AlexDaniel 

[23:09] <Xliff> Hmm... compling an app that uses a module with a bunch of need statements is taking an extraordinary amount of compile time.

[23:09] <Xliff> Currently over 15 minutes.

[23:11] <Xliff> Finally errored out after hitting the single module that was changed.

[23:19] *** skids joined
[23:25] *** skids left
[23:31] <Xliff> 18 minutes in to compile the module with the use statements from the command line.

[23:31] <Xliff> And it's still not done, yet.

[23:32] <Xliff> This smells like a regression. I don't remember this taking so long. Using optimal build order this module only takes 9 seconds to compile.

[23:36] <Xliff> https://gist.github.com/Xliff/ce03bf24897d3b6c86333014c35fd3d5

[23:38] <Xliff> GTK module in question now linked at the beginning of the gist.

[23:48] <Xliff> m: my $a = --> Int { 0; }; say $a()

[23:48] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/9XouvFWeGD‚ê§Prefix ‚Ä¶¬ª

[23:48] <evalable6> Xliff, Full output: https://gist.github.com/92c614a434463b46c751c8430456833b

[23:48] <Xliff> m: my $a = -> --> Int { 0; }; say $a()

[23:48] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´0‚ê§¬ª

[23:48] <Xliff> m: my $a = sub returns Int { 0; }; say $a()

[23:48] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/_6sHszwpOB‚ê§Missing‚Ä¶¬ª

[23:48] <evalable6> Xliff, Full output: https://gist.github.com/cad0fdb8cc332f2d90f27dfd6b9d95a1

[23:48] <Xliff> m: my $a = sub (returns Int) { 0; }; say $a()

[23:48] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/AKz_A7SD4w‚ê§Invalid‚Ä¶¬ª

[23:48] <evalable6> Xliff, Full output: https://gist.github.com/bd3859c9591f1a4157e06f672abb44c9

[23:49] <Xliff> m: my $a = sub () returns Int { 0; }; say $a()

[23:49] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´0‚ê§¬ª

[23:52] *** zacts joined
[23:52] *** zacts left
