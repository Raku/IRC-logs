[00:00] * Xliff installs smem

[00:01] *** oodani joined
[00:02] <Xliff> Ah! Python.

[00:02] *** p6bannerbot sets mode: +v oodani

[00:02] <timotimo> m: X::NYI.^name.say

[00:02] <camelia> rakudo-moar d8b7fabe1: OUTPUT: «X::NYI␤»

[00:03] <timotimo> m: X::NYI.WHAT.Str.say

[00:03] <camelia> rakudo-moar d8b7fabe1: OUTPUT: «Use of uninitialized value of type X::NYI in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block <unit> at <tmp> line 1␤»

[00:03] <timotimo> oh, right

[00:03] <timotimo> .WHAT will always give you an empty string + a warning

[00:03] <TreyHarris> m: try { say +"a"; CATCH { .WHAT.say } }

[00:03] <camelia> rakudo-moar d8b7fabe1: OUTPUT: «(Numeric)␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[00:04] <TreyHarris> m: try { say +"a"; CATCH { .^name.say } }

[00:04] <camelia> rakudo-moar d8b7fabe1: OUTPUT: «X::Str::Numeric␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[00:09] *** DarthGandalf joined
[00:09] *** p6bannerbot sets mode: +v DarthGandalf

[00:10] <TreyHarris> Oh, I see... it was nothing complicated, just that .WHAT's stringification strips out namespaces. Like

[00:10] *** Khisanth left
[00:10] <TreyHarris> m: say X::AdHoc.WHAT, X::AdHoc.^name

[00:10] <camelia> rakudo-moar d8b7fabe1: OUTPUT: «(AdHoc)X::AdHoc␤»

[00:10] <timotimo> well, say uses .gist

[00:10] <timotimo> but eq and ne will use .Str

[00:10] <timotimo> m: say buf8.^name

[00:10] <camelia> rakudo-moar d8b7fabe1: OUTPUT: «Buf[uint8]␤»

[00:11] <timotimo> mhm

[00:12] <TreyHarris> m: so 42.WHAT == 2.WHAT

[00:12] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so 42.WHAT ==" in sink context (line 1)␤Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at…»

[00:13] <timotimo> that will try to .Numeric before comparing

[00:13] <TreyHarris> m: so 42.WHAT eq 2.WHAT

[00:13] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so 42.WHAT eq" in sink context (line 1)␤Use of uninitialized value of type Int in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.…»

[00:13] <timotimo> you would want === here

[00:13] <TreyHarris> m: so 42.WHAT === 2.WHAT

[00:13] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so 42.WHAT ===" in sink context (line 1)␤»

[00:13] <TreyHarris> m: say (42.WHAT === 2.WHAT)

[00:13] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «True␤»

[00:13] <TreyHarris> gotcha

[00:14] <TreyHarris> and I learned about `Bridge` in messing with this, so that's fun :-D

[00:15] <TreyHarris> the temperature example in the docs is clever

[00:19] *** rindolf left
[00:20] *** lichtkind joined
[00:21] *** p6bannerbot sets mode: +v lichtkind

[00:23] *** Khisanth joined
[00:24] *** p6bannerbot sets mode: +v Khisanth

[00:30] *** jme` joined
[00:31] *** p6bannerbot sets mode: +v jme`

[00:39] *** w_richard_w joined
[00:39] *** p6bannerbot sets mode: +v w_richard_w

[00:45] <zachk> do I need to install any system dependencies for the Digest package? zef is taking forever on it 

[00:46] <timotimo> Digest seems to be a pure perl6 implementation of the algorithms

[00:46] <timotimo> so it might just be that it's slow in its tests?

[00:56] <zachk> yea I do believe I passed in a some sort of test option as cro.services suggested, so that has zef run tests and can seriously slow it down?

[00:56] <timotimo> that's probably the "don't run tests" flag actually

[00:56] <timotimo> --/tests, right?

[01:03] *** mowcat left
[01:11] <TreyHarris> Isn't there hyper syntax for rewriting `Foo.decode('literal'.encode)` so that it can go in `'literal'.encode` then `Foo.decode` order? I'm blanking

[01:12] <timotimo> i'm not sure it works with methods actually

[01:12] <timotimo> with subs i can imagine

[01:12] <TreyHarris> Yeah

[01:12] <timotimo> m: say 'literal'.encode ==> Foo.decode

[01:12] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Only routine calls or variables that can '.push' may appear on either side of feed operators.␤at <tmp>:1␤------> 3say 'literal'.encode ==> Foo7⏏5.decode␤»

[01:12] <timotimo> m: say 'literal'.encode andthen Foo.decode($_)

[01:12] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Foo used at line 1␤␤»

[01:12] <timotimo> er, yeah

[01:13] <timotimo> m: class Foo { method decode { "12345" } }; say "literal".encode andthen Foo.decode($_)

[01:13] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «utf8:0x<6C 69 74 65 72 61 6C>␤Too many positionals passed; expected 1 argument but got 2␤  in method decode at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:13] <timotimo> m: class Foo { method decode($input) { "12345" ~ $input } }; "literal".encode andthen say Foo.decode($_)

[01:13] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «12345literal␤»

[01:13] <timotimo> m: class Foo { method decode($input) { "12345" ~ $input.perl } }; "literal".encode andthen say Foo.decode($_)

[01:13] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «12345utf8.new(108,105,116,101,114,97,108)␤»

[01:13] <TreyHarris> right

[01:14] <timotimo> ^- only works if the return value is truthy

[01:14] <timotimo> m: "literal".encode.&({ $_.perl.say })

[01:14] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «utf8.new(108,105,116,101,114,97,108)␤»

[01:14] <timotimo> you can put an arbitrary block in there with this syntax

[01:14] <TreyHarris> but once you have to literally use $_ the chain-i-ness of the construct starts to become less visible anyway

[01:15] *** ToddAndMargo joined
[01:15] *** p6bannerbot sets mode: +v ToddAndMargo

[01:15] <timotimo> true that

[01:15] <timotimo> i mean you can also "given"

[01:15] <jnthn> You don't have to literally use it there, though. YOu can just write .perl.say :)

[01:15] <ToddAndMargo> Hi All, I need to convert the value in a hash to a string.  Here is my latest attempt:

[01:15] <ToddAndMargo> p6 'my $x = "acme"; my Str $y; my %Vendors = ( acme => ContactName => "Larry" ); $y= %Vendors<ContactName>.Str; say $y;'

[01:16] <TreyHarris> jnthn: but `... andthen .Foo.decode` doesn't work

[01:16] <timotimo> m: my $x = "acme"; my Str $y; my %Vendors = ( acme => ContactName => "Larry" ); $y= %Vendors<ContactName>.Str; say $y;'

[01:16] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 $y= %Vendors<ContactName>.Str; say $y;'7⏏5<EOL>␤    expecting …»

[01:16] <timotimo> m: my $x = "acme"; my Str $y; my %Vendors = ( acme => ContactName => "Larry" ); $y= %Vendors<ContactName>.Str; say $y;

[01:16] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block <unit> at <tmp> line 1␤»

[01:17] <timotimo> ToddAndMargo: you've put a Pair object as the value for the "acme" key in the %Vendors hash

[01:17] <timotimo> m: my $x = "acme"; my Str $y; my %Vendors = ( acme => ContactName => "Larry" ); dd %Vendors

[01:17] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «Hash %Vendors = {:acme(:ContactName("Larry"))}␤»

[01:17] <zachk> timotimo, yes

[01:17] <timotimo> the only key you could to use to get anything out of this hash would be "acme"

[01:17] <ToddAndMargo> I need to get the value into $y

[01:17] <jnthn> TreyHarris: Ah, I see the original question now. :) Indeed.

[01:18] <ToddAndMargo> a typo on my part!  # p6 'my $x = "acme"; my Str $y; my %Vendors = ( acme => ContactName => "Larry" ); $y= %Vendors<acme>.Str; say $y;' ContactName	Larry

[01:18] <timotimo> ToddAndMargo: is it intentional to have the hash set up to have a literal pair object in the hash?

[01:19] <ToddAndMargo> It is shortened from

[01:19] <ToddAndMargo> p6 'my $x = "acme"; my %Vendors = ( acme => { ContactName => "Larry", AccountNo => 1234 } ); say %Vendors{$x}<ContactName> ~ "\t" ~ %Vendors{$x}<AccountNo>;' Larry	1234

[01:19] <ToddAndMargo> I did not clean it up very well

[01:19] <timotimo> may be a good idea to not shorten it in a way that changes the meaning as much :)

[01:20] <ToddAndMargo> This the prginal offending line:  $AccountNumber  = ( %Vendors{ $VendorName }<AccountNo> ).Str;

[01:21] <ToddAndMargo> Type Str does not support associative indexing.

[01:21] <timotimo> what's in $VendorName?

[01:21] <timotimo> well, that's probably not the problem

[01:22] <TreyHarris> It all comes down to an aesthetic dissatisfaction with the final line of the `augment` docs: "(In this case, the better solution would be to use a function)." Counter: "yes, but the method call preserves the left-to-right chaining, grumble grumble..."

[01:22] <timotimo> i think the error may actually be in a different line

[01:22] <ToddAndMargo> line 47 :    sub InitPartsStr( Str $Manager, Str $AccountNo ){

[01:23] <ToddAndMargo>     $AccountManager = ( %Vendors{ $VendorName }<ContactName> ).Str;     $AccountNumber  = ( %Vendors{ $VendorName }<AccountNo> ).Str;     # PrintGreen( "VendorName = <$VendorName>\tAccountManager = <$AccountManager>\tAccountNumber = <$AccountNumber>\n" );      # exit;          InitPartsStr( $AccountManager, $AccountNumber );

[01:24] <ToddAndMargo>     my Str $VendorName;     my Str $AccountManager;     my Str $AccountNumber;         

[01:24] <Xliff> m: "TOP".eq('aaa').say

[01:24] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «No such method 'eq' for invocant of type 'Str'. Did you mean 'Seq'?␤  in block <unit> at <tmp> line 1␤␤»

[01:24] <Xliff> m: "TOP".eqv('aaa').say

[01:24] <camelia> rakudo-moar 9485dd2bf: OUTPUT: «No such method 'eqv' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[01:28] <ToddAndMargo> now this is working, so I have a typo somewhere it locate: # p6 'my $x = "acme"; my %Vendors = ( acme => { ContactName => "Larry", AccountNo => 1234 } ); my Str $y = %Vendors{$x}<ContactName>.Str; say $y;' Larry

[01:28] <ToddAndMargo> I will go a hunting.

[01:29] *** lichtkind left
[01:35] <timotimo> y'all want to see the TAS block of awesome games done quick?

[01:36] <timotimo> because it started 5 minutes ago

[01:36] <timotimo> https://twitch.tv/gamesdonequick

[01:36] <MasterDuke> TAS?

[01:36] <timotimo> tool assisted speedrun

[01:37] <timotimo> basically "what if you play a game, but instead of having to react, you can press as many buttons as you want with as much precision as you want"

[01:37] <timotimo> right now they're showing "super mario bros 1, but what if you had a portal gun like in the game Portal"

[01:38] <MasterDuke> ah, i was just reading about the 7m NetHack ascension earlier today

[01:39] <zachk> 7m?

[01:39] <timotimo> that's wicked fast

[01:39] *** w_richard_w left
[01:40] <zachk> oh 7 minutes

[01:40] <MasterDuke> and apparently the first 6m was spent getting the PRNG to the right configuration

[01:41] <timotimo> nice

[01:42] *** cfa left
[01:44] <Xliff> OK, that was crazy.

[01:44] <Xliff> 12 minutes! :-O

[01:45] <timotimo> yeah

[01:49] *** Kaiepi left
[01:52] <ToddAndMargo> figured it out.  I had to remove the variable from teh line and seperate it with ~:  $PartsStr =        "Hi " ~ $Manager ~ ",<br><br>" ~

[01:53] <timotimo> ah

[01:53] <timotimo> you probably had it attempt to parse that as $Manager<br><br>

[01:53] <timotimo> i.e. try to access the "br" key in the $Manager variable

[01:57] <ToddAndMargo> Such is life in the html lane! Thank you all lfor the help and moral support

[01:58] <timotimo> NP

[01:58] <timotimo> glad to get some easy to solve problems for a change, haha

[01:58] <timotimo> (just easier because of my experience)

[02:00] <Xliff> timotimo: https://github.com/Xliff/p6-VisualGrammar/blob/master/grabs/Screenshot_20190111_205801.png

[02:00] *** pukku joined
[02:00] *** p6bannerbot sets mode: +v pukku

[02:01] <timotimo> beautiful!

[02:01] <Xliff> :)

[02:02] <pukku> quick question -- if I want to parse HTML, what module do I use? None of the options searching for HTML on modules.perl6.org seem to be what I'm looking for, and I don't think the page is going to be valid XML...

[02:02] *** sena_kun left
[02:02] <AlexDaniel> pukku: Gumbo ?

[02:03] <MasterDuke> isn't there a Dom::Tiny?

[02:03] <timotimo> yeah

[02:03] <timotimo> i was just about to grab that

[02:03] <timotimo> modules.perl6.org isn't very happy right now?

[02:04] <timotimo> https://github.com/zostay/p6-DOM-Tiny

[02:04] <MasterDuke> was just working for me

[02:05] <AlexDaniel> pukku: Gumbo currently has this bug: https://github.com/Skarsnik/perl6-gumbo/issues/5

[02:05] <AlexDaniel> pukku: so depending on the amount of pages you want to parse in one go, maybe it's not the right solution for you…

[02:05] <pukku> Thanks! I think that DOM::Tiny is what I'm looking for, but I'll check out Gumbo

[02:07] <pukku> Ah; I'm only going to look at one page, I think, but maybe I'll see if DOM::Tiny works.

[02:07] <pukku> Thanks!

[02:08] <timotimo> https://github.com/zostay/p6-DOM-Tiny/issues/15

[02:08] <pukku> I was literally just about to create that issue. :-)

[02:10] <pukku> Thanks muchly! See you later...

[02:10] *** pukku left
[02:10] <timotimo> o/

[02:14] <Xliff> timotimo: Installation instructions up at https://github.com/Xliff/p6-VisualGrammar/ if you are interested in playing around with it.

[02:14] <Xliff> Sorry about the complexity. :/

[02:15] <Xliff> Would be interested to know what you think about it so far... in your copious free time. :D

[02:16] <Xliff> (Would be interested to know your --stagestats for that last invocation!)

[02:24] *** ToddAndMargo left
[02:28] *** zachk left
[02:32] <b2gills> TreyHarris: `.WHAT` is absolutely nothing like `.^name`.  `.WHAT` gives you a reference to the type. `.^name` gives a string that matches what you called the type.

[02:32] <b2gills> m: my $a = anon class Foo {}; my $b = anon class Foo {}; say 'Do they have the same name? ',$a.^name eqv $b.^name; say 'Are they the same?', $a.WHAT eqv $b.WHAT

[02:32] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Do they have the same name? True␤Are they the same?False␤»

[02:43] *** matiaslina joined
[02:44] *** p6bannerbot sets mode: +v matiaslina

[02:48] *** lizmat left
[03:07] *** Kaiepi joined
[03:07] <Kaiepi> is there an equivalent to node's process.nextTick in perl 6?

[03:08] <Kaiepi> rather than having to do something like Promise.in(0.00001).then({ ... })

[03:08] <timotimo> the .thens of promises are already scheduled on the scheduler i think?

[03:09] <timotimo> m: await start { say "before"; Promise.resolved(1).then({ say "in the then" }); say "after" }; say "after everything"

[03:09] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «before␤An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    No such method 'resolved' for invocant of type 'Promise'␤      in block  at <tmp> line 1␤␤»

[03:09] <timotimo> m: await start { say "before"; Promise.kept(1).then({ say "in the then" }); say "after" }; say "after everything"

[03:09] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «before␤after␤in the then␤after everything␤»

[03:12] <Kaiepi> $*SCHEDULER.cue was what i was looking for

[03:22] <Xliff> Kaiepi: Can you show me how you are using that?

[03:25] *** leont left
[03:26] *** Sgeo__ left
[03:27] *** Kaiepi left
[03:27] *** Kaiepi joined
[03:28] *** p6bannerbot sets mode: +v Kaiepi

[03:29] <Kaiepi> Xliff, https://hastebin.com/abihimufec.rb

[03:29] <Kaiepi> this is a chat bot

[03:29] <Xliff> Cheers!

[03:29] <Kaiepi> it can't send the message immediately since it breaks the connection

[03:31] *** Kaypie joined
[03:31] <Kaiepi> but if i use $*SCHEDULER.cue, it works

[03:31] *** Kaiepi left
[03:32] <Xliff> Ah! So you cue without any time which means it will non-block and run as soon as it can.

[03:32] *** p6bannerbot sets mode: +v Kaypie

[03:32] <Xliff> I've only used it as a replacement for setTimeout

[03:34] *** ferreira left
[03:36] *** wmoxam joined
[03:36] *** p6bannerbot sets mode: +v wmoxam

[03:51] *** kent\n left
[03:52] *** kent\n joined
[03:52] *** p6bannerbot sets mode: +v kent\n

[04:28] *** Cabanoss- joined
[04:29] *** p6bannerbot sets mode: +v Cabanoss-

[04:31] *** Cabanossi left
[04:42] *** matiaslina left
[05:06] *** WqZtM52a joined
[05:06] *** p6bannerbot sets mode: +v WqZtM52a

[05:14] *** WqZtM52a is now known as daemon

[05:26] *** undersightable6 left
[05:26] *** quotable6 left
[05:26] *** quotable6 joined
[05:26] *** undersightable6 joined
[05:26] *** MasterDuke left
[05:27] *** p6bannerbot sets mode: +v quotable6

[05:27] *** p6bannerbot sets mode: +v undersightable6

[05:50] *** ChoHag left
[06:22] *** vrurg left
[06:42] *** vrurg joined
[06:42] *** vrurg left
[06:44] *** daotoad joined
[06:45] *** p6bannerbot sets mode: +v daotoad

[06:55] *** daotoad left
[07:02] *** daotoad joined
[07:03] *** p6bannerbot sets mode: +v daotoad

[07:10] *** dncefan left
[07:13] *** dncefan joined
[07:14] *** p6bannerbot sets mode: +v dncefan

[07:17] *** holyghost joined
[07:18] *** p6bannerbot sets mode: +v holyghost

[07:29] *** dncefan left
[07:33] *** dncefan joined
[07:34] *** p6bannerbot sets mode: +v dncefan

[07:37] *** jmerelo joined
[07:38] *** p6bannerbot sets mode: +v jmerelo

[07:42] *** reportable6 left
[07:42] *** coverable6 left
[07:43] *** coverable6 joined
[07:43] *** reportable6 joined
[07:43] *** p6bannerbot sets mode: +v coverable6

[07:43] *** p6bannerbot sets mode: +v reportable6

[07:56] *** satori__ left
[08:08] *** irdr left
[08:15] <pony> m: grammar L { rule TOP { <exp>+ }; rule exp { <var> }; token var { <[a..z]> } }; say L.parse: 'xx'

[08:15] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Nil␤»

[08:15] <pony> why doesn't that match? 'x x' does.

[08:19] *** sauvin joined
[08:19] *** p6bannerbot sets mode: +v sauvin

[08:28] *** satori__ joined
[08:29] *** p6bannerbot sets mode: +v satori__

[08:32] *** daotoad left
[08:33] *** satori__ left
[08:47] *** coverable6 left
[08:47] *** reportable6 left
[08:48] *** reportable6 joined
[08:48] *** coverable6 joined
[08:48] *** p6bannerbot sets mode: +v reportable6

[08:48] *** p6bannerbot sets mode: +v coverable6

[08:52] <pony> oicy

[08:52] <pony> i neeeded a regex

[09:03] <jmerelo> pony: shouldn't you have whitespace somewhere?

[09:04] <pony> yeah that too

[09:05] <jmerelo> m: grammar L { rule TOP { <exp>+ % ' ' }; rule exp { <var> }; token var { <[a..z]> } }; say L.parse: 'x x'

[09:05] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Nil␤»

[09:05] <jmerelo> m: grammar L { rule TOP { <exp>+ % \s+ }; rule exp { <var> }; token var { <[a..z]> } }; say L.parse: 'x x'

[09:05] *** telex left
[09:05] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Nil␤»

[09:06] <jmerelo> m: grammar L { rule TOP { <exp>+ % <ws> }; rule exp { <var> }; token var { <[a..z]> } }; say L.parse: 'x x'

[09:06] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «｢x x｣␤ exp => ｢x ｣␤  var => ｢x｣␤ ws => ｢｣␤ exp => ｢x｣␤  var => ｢x｣␤»

[09:06] <jmerelo> pony: ^^^

[09:07] *** telex joined
[09:07] <pony>  m: grammar L { rule TOP { <exp>+ % <ws> }; rule exp { <var> }; token var { <[a..z]> } }; say L.parse: 'xx'

[09:07] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Nil␤»

[09:07] *** p6bannerbot sets mode: +v telex

[09:08] <pony>  m: grammar L { regex TOP { <exp>+ % <ws> }; rule exp { <var> }; token var { <[a..z]> } }; say L.parse: 'xx'

[09:08] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Nil␤»

[09:08] <pony>  m: grammar L { regex TOP { <exp>+ % <ws> }; regex exp { <var> }; token var { <[a..z]> } }; say L.parse: 'xx'

[09:08] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Nil␤»

[09:08] <pony> grump

[09:10] *** rindolf joined
[09:10] *** p6bannerbot sets mode: +v rindolf

[09:11] *** daotoad joined
[09:11] <Geth> ¦ doc: 8a7b0a0e59 | (JJ Merelo)++ | doc/Language/syntax.pod6

[09:11] <Geth> ¦ doc: Adds Boolean literals, closes #2552

[09:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8a7b0a0e59

[09:11] <synopsebot> Link: https://doc.perl6.org/language/syntax

[09:11] <jmerelo> pony: <ws> is whitespace; if you want to process every x separately no need to do that

[09:11] <pony>  m: grammar L { regex TOP { <exp>+ }; regex exp { <var> }; token var { <[a..z]> } }; say L.parse: 'xx'

[09:11] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «｢xx｣␤ exp => ｢x｣␤  var => ｢x｣␤ exp => ｢x｣␤  var => ｢x｣␤»

[09:11] *** p6bannerbot sets mode: +v daotoad

[09:12] <jmerelo> m: grammar L { rule TOP { <exp>+ }; token exp { <var> }; token var { <[a..z]> } }; say L.parse: 'xx' 

[09:12] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «｢xx｣␤ exp => ｢x｣␤  var => ｢x｣␤ exp => ｢x｣␤  var => ｢x｣␤»

[09:12] <pony> o

[09:15] *** daotoad left
[09:15] <pony> it just doesn't work if exp is a rule

[09:16] <pony> but i thought rules just add optional whi... oh, backtracking

[09:19] <Geth> ¦ doc: 23fb530399 | (JJ Merelo)++ | doc/Type/Str.pod6

[09:19] <Geth> ¦ doc: Includes new form of contains

[09:19] <Geth> ¦ doc: 

[09:19] <Geth> ¦ doc: Also clarifies haystack metaphor. @lizmat changed this very recently,

[09:19] <Geth> ¦ doc: it's likely that it's not really done that way in the current version,

[09:19] <synopsebot> Link: https://doc.perl6.org/type/Str

[09:19] <Geth> ¦ doc: but it matches roast, and over all, it closes #2334. Thanks!

[09:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/23fb530399

[09:24] *** irdr joined
[09:25] *** p6bannerbot sets mode: +v irdr

[09:29] *** w17t left
[09:29] <Geth> ¦ doc: e60d9ebe32 | (JJ Merelo)++ | doc/Type/Str.pod6

[09:29] <Geth> ¦ doc: Minor changes and elimination of definitions

[09:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e60d9ebe32

[09:29] <synopsebot> Link: https://doc.perl6.org/type/Str

[09:31] *** w17t joined
[09:31] *** p6bannerbot sets mode: +v w17t

[09:34] *** robertle joined
[09:35] *** p6bannerbot sets mode: +v robertle

[09:50] *** satori__ joined
[09:50] *** p6bannerbot sets mode: +v satori__

[09:54] *** Cabanoss- left
[09:55] *** satori__ left
[09:55] *** Cabanossi joined
[09:55] *** p6bannerbot sets mode: +v Cabanossi

[09:57] *** satori__ joined
[09:57] *** p6bannerbot sets mode: +v satori__

[10:06] *** Kaypie left
[10:06] *** Merfont joined
[10:07] *** p6bannerbot sets mode: +v Merfont

[10:08] <atacama_> \wc

[10:10] *** atacama_ left
[10:14] *** pmurias joined
[10:14] *** p6bannerbot sets mode: +v pmurias

[10:16] *** i1nfusion left
[10:17] *** i1nfusion joined
[10:17] *** w17t left
[10:18] *** p6bannerbot sets mode: +v i1nfusion

[10:31] *** w17t joined
[10:31] *** p6bannerbot sets mode: +v w17t

[10:31] *** domidumont joined
[10:32] *** p6bannerbot sets mode: +v domidumont

[10:32] *** marmor joined
[10:32] *** sca joined
[10:33] *** p6bannerbot sets mode: +v marmor

[10:33] *** p6bannerbot sets mode: +v sca

[10:36] *** pecastro joined
[10:37] *** p6bannerbot sets mode: +v pecastro

[10:39] *** andrzejku_ joined
[10:40] *** p6bannerbot sets mode: +v andrzejku_

[10:41] *** remi_ness joined
[10:41] *** p6bannerbot sets mode: +v remi_ness

[10:47] *** pmurias left
[10:47] *** pmurias joined
[10:47] *** p6bannerbot sets mode: +v pmurias

[10:49] *** natrys joined
[10:50] *** p6bannerbot sets mode: +v natrys

[10:53] *** satori__ left
[10:53] *** satori__ joined
[10:54] *** p6bannerbot sets mode: +v satori__

[10:59] *** satori__ left
[11:28] *** jmerelo left
[11:35] <scovit> Hello, separating implementation from declaration is what allows many languages out there to avoid circular dependencies. In perl6 I often end up having very big source files to avoid them

[11:35] <scovit> I think that it could be that I am issing somethinf from the logic of doing things right in this language

[11:37] <scovit> is there a way, for instance, to separate funcitions that need a class declaration from the class that need those functions?

[11:37] *** satori__ joined
[11:38] *** p6bannerbot sets mode: +v satori__

[11:40] *** kylese joined
[11:40] *** p6bannerbot sets mode: +v kylese

[11:49] <scovit> I am checking out what people do in C#, where similarly circular dependencies are considered an indication of bad design

[11:51] <robertle> scovit: there is also some interesting work in C++ by John Lakos, "levelization" might find you some starting points

[11:52] <robertle> I do wonder however whether a circular dependency is an equally bad thing in all languages, it might be less of an issue for perl 6 than it is for c++...

[11:52] <robertle> I would still think that they make it hard for the human reading this as well

[11:56] <andrzejku_> hi

[11:56] <andrzejku_> By default, split omits the matches, and returns a list of only those parts of the string that did not match. 

[11:57] <andrzejku_> camelia, for (split(/ \s+ /, " 52 comb")) { say $_ }

[11:57] <andrzejku_> m: for (split(/ \s+ /, " 52 comb")) { say $_ }

[11:57] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «␤52␤comb␤»

[11:58] <andrzejku_> m: for (split(/ \s /, " 52 comb")) { say $_ }

[11:58] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «␤52␤comb␤»

[11:58] <andrzejku_> emm strange

[11:58] <andrzejku_> m: for (split(/ \s /, "52 comb")) { say $_ }

[11:58] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «52␤comb␤»

[11:58] <andrzejku_> oh now

[11:58] <andrzejku_> the first white space

[11:58] <andrzejku_> is a separate item

[11:58] <andrzejku_> looked like it is not splitted

[11:58] <andrzejku_> why so?

[12:02] *** Some-body_ joined
[12:02] *** p6bannerbot sets mode: +v Some-body_

[12:02] *** satori__ left
[12:03] *** DarthGandalf left
[12:03] *** Some-body_ is now known as DarthGandalf

[12:08] *** lizmat joined
[12:08] *** p6bannerbot sets mode: +v lizmat

[12:11] *** sena_kun joined
[12:12] *** p6bannerbot sets mode: +v sena_kun

[12:29] *** Stamm joined
[12:29] *** p6bannerbot sets mode: +v Stamm

[12:30] *** Stamm left
[12:48] *** lucasb joined
[12:48] *** p6bannerbot sets mode: +v lucasb

[12:48] *** satori__ joined
[12:49] *** p6bannerbot sets mode: +v satori__

[12:52] <timotimo> andrzejku_: there's an empty string in front of the first whitespace in your string :)

[12:52] <timotimo> if you join it back together and there's nothing there, then it wouldn't be the same any more

[12:52] <tbrowder> hi, #perl6

[12:53] <sena_kun> o/

[12:54] <tbrowder> m:my $n; {loop (my $n =0;$n<2;++$n){say $n}

[12:54] <evalable6> tbrowder, rakudo-moar cebf0cb7b: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Xu8ZdSDpQM␤Whitesp…»

[12:54] <evalable6> tbrowder, Full output: https://gist.github.com/c0093e771f7b08ef739e56a5c80197b5

[12:55] <sena_kun> m: loop (my $n = 0; $n < 2; ++$n) {say $n}

[12:55] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «0␤1␤»

[12:57] <tbrowder> :sena_kun good am! just fumbled an experiment...trying again

[12:58] <tbrowder> m: my $n; { loop (my $n = 0; $n < 2; ++$n) { say $n}}

[12:58] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «0␤1␤»

[12:58] <sena_kun> didn't know what was meant yet still typed in some code rudely, so continue, please. :)

[12:59] <tbrowder> notice i enclosed the entrire loop in a free block. why couldn’t p6 always impliciltly (i.e., invisibly) do that for all loops?

[13:00] <tbrowder> *implicitly

[13:00] <jnthn> tbrowder: Because we have extremely clear and consistent variable scoping rules.

[13:01] <jnthn> tbrowder: Also because `loop` isn't really idiomatic Perl 6 anyway; one can always write it as `for ^2 -> $n { }` and have no such issues

[13:02] <jnthn> In fact, we have things like `if foo() -> $x { }` to avoid needing to do `if my $x = foo() { }`

[13:02] *** zakharyas joined
[13:02] <jnthn> So it's simply not worth breaking extremely consistent rules for a construct that is rarely needed.

[13:02] <tbrowder> i appreciate that, but how would that special case be so bad? just like p5’s “foreach my $n...”

[13:03] *** p6bannerbot sets mode: +v zakharyas

[13:04] <jnthn> It's unclear to the reader what the scope of that is unless they know the rules very well. The Perl 6 design tries to avoid lists of special cases to remember. All you have to remember in Perl 6 is "curly braces equal scope"

[13:09] <tbrowder> jnthn: ok, thnx

[13:14] *** andrzejku_ left
[13:26] *** w17t left
[13:26] *** w17t joined
[13:26] *** p6bannerbot sets mode: +v w17t

[13:27] *** w17t left
[14:27] *** evalable6 left
[14:29] *** evalable6 joined
[14:30] *** leont joined
[14:30] *** p6bannerbot sets mode: +v evalable6

[14:30] *** p6bannerbot sets mode: +v leont

[14:37] *** kst left
[14:45] *** zakharyas left
[15:00] *** Ven`` joined
[15:01] *** p6bannerbot sets mode: +v Ven``

[15:01] *** SyrupThinker left
[15:02] <Ven``> m: sub add($a, $b, :$add) { say $add ?? $a + $b !! $a * $b }; say add.assuming(:add)(1, 2);

[15:02] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling add() will never work with declared signature ($a, $b, :$add)␤at <tmp>:1␤------> 3{ say $add ?? $a + $b !! $a * $b }; say 7⏏5add.assuming(:add)(1, 2);␤»

[15:02] <Ven``> m: sub add($a, $b, :$add) { say $add ?? $a + $b !! $a * $b }; say &add.assuming(:add)(1, 2);

[15:02] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «3␤True␤»

[15:03] <Ven``> m: sub add($a, $b, :$add) { say $add ?? $a + $b !! $a * $b }; say &add.assuming(1, :add)(2);

[15:03] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «3␤True␤»

[15:03] *** SyrupThinker joined
[15:03] *** p6bannerbot sets mode: +v SyrupThinker

[15:04] <Ven``> m: sub add($a, $b, :$add) { say $add ?? $a + $b !! $a * $b }; add(1, *, :add)(2);

[15:04] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in sub add at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:04] *** lizmat left
[15:05] *** kingofhell joined
[15:05] *** p6bannerbot sets mode: +v kingofhell

[15:08] *** Ven`` left
[15:16] *** kingofhell left
[15:18] *** w17t joined
[15:18] *** p6bannerbot sets mode: +v w17t

[15:24] *** tobs joined
[15:24] *** p6bannerbot sets mode: +v tobs

[15:24] <Geth> ¦ doc: d59d752fac | cfa++ | doc/Type/Match.pod6

[15:24] <Geth> ¦ doc: Fix link to Match make from made (closes #2555).

[15:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d59d752fac

[15:24] <synopsebot> Link: https://doc.perl6.org/type/Match

[15:30] <lucs> docs.perl6.org down :(

[15:31] *** wi15ht joined
[15:31] *** p6bannerbot sets mode: +v wi15ht

[15:34] *** w17t left
[15:35] *** wi15ht left
[15:36] *** w17t joined
[15:36] *** p6bannerbot sets mode: +v w17t

[15:36] *** vrurg joined
[15:37] *** p6bannerbot sets mode: +v vrurg

[15:46] <lucasb> seems all *.perl6.org isn't working, no?

[15:48] <El_Che>  ^---- moritz 

[15:48] *** tobs left
[15:49] *** sno joined
[15:50] *** p6bannerbot sets mode: +v sno

[15:50] *** tobs joined
[15:50] *** p6bannerbot sets mode: +v tobs

[15:56] *** w17t left
[15:57] <moritz> rebooting...

[15:57] <El_Che> moritz: thx!

[15:57] <moritz> ... and back up again

[15:57] <lucs> Fixed. Thanks moritz!

[16:15] *** natrys left
[16:33] *** molaf joined
[16:34] *** p6bannerbot sets mode: +v molaf

[16:46] *** mowcat joined
[16:47] *** p6bannerbot sets mode: +v mowcat

[17:11] *** ExtraCrispy joined
[17:11] *** p6bannerbot sets mode: +v ExtraCrispy

[17:25] *** zakharyas joined
[17:26] *** p6bannerbot sets mode: +v zakharyas

[17:32] *** ferreira joined
[17:33] *** p6bannerbot sets mode: +v ferreira

[17:44] *** w17t joined
[17:44] *** p6bannerbot sets mode: +v w17t

[17:58] <Xliff> m: say 1.HOW

[17:58] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»

[17:58] <Xliff> m: say grammar.HOW

[17:58] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required after keyword 'grammar'␤at <tmp>:1␤------> 3say grammar7⏏5.HOW␤»

[17:58] *** marmor left
[17:58] <Xliff> m: say grammar T { }; say T.HOW

[17:58] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «(T)␤Perl6::Metamodel::GrammarHOW.new␤»

[17:59] *** w17t left
[17:59] *** w17t joined
[17:59] *** p6bannerbot sets mode: +v w17t

[18:02] *** lichtkind joined
[18:03] *** p6bannerbot sets mode: +v lichtkind

[18:04] *** molaf left
[18:07] *** lucasb left
[18:26] <b2gills> m: say Grammar.HOW

[18:26] <camelia> rakudo-moar cebf0cb7b: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»

[18:28] *** Bob joined
[18:28] *** p6bannerbot sets mode: +v Bob

[18:39] *** zakharyas left
[18:43] <Xliff> Is there a way to assign delegation at run-time?

[18:44] <Xliff> Or at the very least to specify that you want to delegate all of class B's methods via class A.

[18:46] *** i1nfusion left
[18:47] *** i1nfusion joined
[18:48] *** p6bannerbot sets mode: +v i1nfusion

[18:53] *** satori__ left
[18:54] *** Ven`` joined
[18:55] *** p6bannerbot sets mode: +v Ven``

[18:57] <timotimo> i mean, you can create a role fresh for that class that has every method the class has + every method B has and have forwarder methods

[18:58] <Xliff> Yeah, but what I am trying to avoid is to have a handles statement that is really long.

[18:58] <Xliff> Your role idea is one thing I thought of, but it would be easier to just loop over B.^methods and write wrappers, yes?

[18:59] <Xliff> This is just a thought excercise, btw. I am also trying to figure out a way to determine where grammars fail, so I can put that in p6-VisualGrammar. ;)

[19:04] <TreyHarris> b2gills: I understood the type difference; that's why I corrected myself to ask when .WHAT's stringification *should* differ from .^name (aside from the parens).

[19:04] <TreyHarris> I wasn't asking about the converse

[19:13] <timotimo> Xliff: have you considered adapting what the grammar debugger does to your program?

[19:14] <timotimo> it's the only approach i can think of for having a finer grain than method-call-like parts

[19:15] <Geth> ¦ ecosystem: 121bad3642 | (Jonathan Stowe)++ | META.list

[19:15] <Geth> ¦ ecosystem: Remove first batch to CPAN

[19:15] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/121bad3642

[19:17] <timotimo> by putting in more stuff in there, maybe the analyzer could be made wise to things like different kinds of repetition operators

[19:17] *** reach_satori joined
[19:18] *** p6bannerbot sets mode: +v reach_satori

[19:20] <tbrowder> jnthn: ref loops, i think all my loops are used where i was transforming old p5 code to p6 as a first for fastest functionality before final cleanup—i’ll go back and see if i can eliminate them

[19:28] <Xliff> timotimo: Yes. Analysing that is what I was working on, today.

[19:28] <Xliff> I think I have a way of pulling trace information from grammars, based on Grammar::Tracer

[19:31] <timotimo> that's the coarse grained info about calling into different tokens and such, right?

[19:31] <Xliff> Yes

[19:31] <Xliff> Grammar::Debugger will take a LOT longer to work through. 

[19:32] <timotimo> that's fair

[19:33] <timotimo> i'm thinking maybe it should insert a dynamic variable at the very start of everything it parses and a bunch of blocks (marked "declarative") that update it with what's at that point in the grammar, and maybe a whole listing of that regex/whatever

[19:33] <timotimo> also, until now i don't think we have any tools to introspect the NFA that is generated for tokens and such

[19:33] <timotimo> that could be A Thing in your program :)

[19:34] <Xliff> Yes, but first I need to learn what an NFA thing is! :)

[19:34] <Xliff> I've seen it mentioned in the code.

[19:34] <timotimo> heh

[19:34] <timotimo> https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton#/media/File:NFAexample.svg

[19:35] <Xliff> OH! Weren't these in your book?

[19:35] *** zachk joined
[19:35] <timotimo> imagine it starts at s0 and reads characters from the string

[19:35] <timotimo> i haven't made a book ... yet :P

[19:35] <Xliff> Oh. 

[19:35] <Xliff> Nevermind.

[19:35] <Xliff> Yes. :P to me.

[19:35] *** zachk left
[19:35] *** zachk joined
[19:35] *** p6bannerbot sets mode: +v zachk

[19:35] *** p6bannerbot sets mode: +v zachk

[19:35] <Xliff> Can I :P myself? Yesssss. Yes, I can.

[19:36] <timotimo> all you need is a mirror

[19:37] <Xliff> That's very true.

[19:37] <Xliff> Need to find something that can give a good, non-recursive dump of a Match object.

[19:38] <timotimo> does DDT struggle with recursiveness? also, how do you make a recursive match object?

[19:38] *** zakharyas joined
[19:39] <Xliff> DDT does not, but it also has a hard time with Match objects.

[19:39] *** p6bannerbot sets mode: +v zakharyas

[19:39] *** dncefan left
[19:39] *** dncefan joined
[19:40] <Xliff> And I'm not making the match object. I'm just collecting the results at each stage.

[19:40] <timotimo> it does have a special mode to handle match objects better

[19:40] <Xliff> Oh really? I will need to look that up.

[19:40] *** p6bannerbot sets mode: +v dncefan

[19:41] *** Kaiepi joined
[19:41] *** Merfont left
[19:42] *** p6bannerbot sets mode: +v Kaiepi

[19:43] *** molaf joined
[19:44] *** p6bannerbot sets mode: +v molaf

[19:44] *** domidumont left
[19:47] *** leont left
[19:49] *** molaf left
[19:51] *** mowcat left
[19:56] *** xinming joined
[19:57] *** p6bannerbot sets mode: +v xinming

[19:59] *** xinimng left
[20:07] <zachk> can I run perl6 on arm? 

[20:08] *** Kaiepi left
[20:11] *** Kaiepi joined
[20:12] *** p6bannerbot sets mode: +v Kaiepi

[20:12] <TreyHarris> zachk: Googling, it looks like two years ago there were people running Perl6 on raspbian

[20:12] <TreyHarris> Not sure about more recently

[20:12] <TreyHarris> er, I should have said "running Rakudo"

[20:13] <zachk> does perl6 still run on parrot at all?

[20:13] <TreyHarris> Dunno, but Rakudo uses MoarVM

[20:14] <Ven``> zachk: no

[20:14] <TreyHarris> zachk: if you don't have an ARM machine to try it on (like if you were considering a purchase based on this), I could try compiling it on my Pi

[20:15] <Ven``> I know FROGGS wanted, when parrot was removed, to bring it back at some point, but it was nto done that I know of. It's a pretty damn huge project...

[20:15] <zachk> its not a must have, but thank you for the offer, gonna try on an android device maybe latter today after I get one 

[20:15] <Ven``> with its own vm + jvm + js backend, it's pretty amazing already

[20:16] <TreyHarris> zachk: https://github.com/termux/termux-packages/issues/1324

[20:16] <TreyHarris> It compiles on termux but there's no package for it

[20:17] <TreyHarris> ...so hopefully your phone doesn't throttle too much when plugged in since that compile's gonna take quite awhile :-D

[20:18] <TreyHarris> checkinstall runs on termux, so if you decide to do it, make a package and share ;-)

[20:20] <b2gills> zachk: It was determined that it would be easier to start the Parrot backend support from scratch rather than try to fix what was already there.

[20:21] <b2gills> The JVM, MoarVM, and JS backends are implemented fairly similarly, but the Parrot backend was vastly different.

[20:57] *** aeruder joined
[20:57] *** p6bannerbot sets mode: +v aeruder

[21:04] *** lichtkind left
[21:13] *** kylese left
[21:17] *** lizmat joined
[21:17] *** p6bannerbot sets mode: +v lizmat

[21:18] *** remi_ness left
[21:29] <Geth> ¦ doc: 92da032131 | cfa++ | doc/Language/variables.pod6

[21:29] <Geth> ¦ doc: Link $*KERNEL to Kernel (closes #2556).

[21:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/92da032131

[21:29] <synopsebot> Link: https://doc.perl6.org/language/variables

[21:32] *** zakharyas left
[21:33] *** zakharyas joined
[21:34] *** p6bannerbot sets mode: +v zakharyas

[21:38] *** dct joined
[21:38] *** p6bannerbot sets mode: +v dct

[21:43] <Kaiepi> is there a way to await the database becoming unlocked for DBIish?

[21:50] *** pmurias left
[21:52] *** molaf joined
[21:53] *** w17t left
[21:53] *** p6bannerbot sets mode: +v molaf

[21:53] *** dct left
[21:56] *** pmurias joined
[21:56] *** p6bannerbot sets mode: +v pmurias

[21:57] <pmurias> b2gills: I'm not sure if the Parrot backend was more different then the JS one

[21:58] <pmurias> b2gills: I would say the real reason the Parrot backend was dropped is that Parrot reviving was considered very unlikely

[22:00] <pmurias> b2gills: I guess it was more different in terms of the interface it was offering Rakudo

[22:03] <lizmat> pmurias: rakudo contained a lot of optimized PIR at the time of the Great List Refactor

[22:04] <lizmat> there was really nobody around anymore with the willingness to port that to the GLR semantics

[22:04] <lizmat> so it was a maintenance burden for a backed that did not see any meaningful development anymore at that time

[22:05] <lizmat> removing it also fixed some issues

[22:05] <lizmat> e.g., parsing would come to a crawl if *any* non ASCII character code was found in the code

[22:06] <lizmat> this was particularly annoying for the setting: the last time I tried to use unicode in the setting on parrot

[22:07] <lizmat> I killed the parsing after 15 minutes

[22:08] <pmurias> I just remember a ton of parrot specific code being deleted all over the place ;)

[22:09] <moritz> that was a pleasure to do alright :)

[22:12] <lizmat> afk again&

[22:13] <AlexDaniel> pmurias: hello! Please consider changelogging rakudo-js changes here https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[22:13] <AlexDaniel> pmurias: previously all of the js-related changes were put into one line like “rakudo-js progress” or the like, but I think they deserve a bit more :)

[22:15] <pmurias> AlexDaniel: I'll think what to put there tommorow ;) (too sleepy right now)

[22:16] <AlexDaniel> sure!

[22:16] <AlexDaniel> pmurias: thank you!

[22:16] <AlexDaniel> releasable6: status

[22:16] <releasable6> AlexDaniel, Next release in ≈6 days and ≈20 hours. 4 blockers. 103 out of 204 commits logged

[22:16] <releasable6> AlexDaniel, Details: https://gist.github.com/ea0a77928def1affccd7cef158afa8fa

[22:21] *** daotoad joined
[22:21] <Geth> ¦ doc: fe72b23039 | cfa++ | 46 files

[22:21] <Geth> ¦ doc: Rewrite broken /type links as /routine.

[22:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fe72b23039

[22:22] *** p6bannerbot sets mode: +v daotoad

[22:29] *** dncefan left
[22:29] *** dncefan joined
[22:30] *** p6bannerbot sets mode: +v dncefan

[22:35] *** Xliff left
[22:49] <sena_kun> I can do `use Foo <A B C>`, but cannot something like `my @a = <A B C>; #'[ pseudocode --> ] use Foo @a`?

[22:49] *** zakharyas left
[22:51] <timotimo> at the very least it has to be compile-time-known values

[22:52] <sena_kun> roger...

[22:55] *** Khisanth left
[22:55] *** cpage left
[22:56] *** pecastro left
[22:58] *** cpage joined
[22:59] *** cpage left
[23:05] *** pmurias left
[23:06] *** Grauwolf joined
[23:06] *** p6bannerbot sets mode: +v Grauwolf

[23:09] *** daotoad left
[23:09] *** SCHAPiE joined
[23:09] *** p6bannerbot sets mode: +v SCHAPiE

[23:14] *** Khisanth joined
[23:15] *** p6bannerbot sets mode: +v Khisanth

[23:20] *** Kaiepi left
[23:21] *** Kaiepi joined
[23:21] *** rindolf left
[23:21] *** p6bannerbot sets mode: +v Kaiepi

[23:26] *** Grauwolf left
[23:27] *** MilkmanDan left
[23:29] *** MilkmanDan joined
[23:29] *** p6bannerbot sets mode: +v MilkmanDan

[23:34] *** Kaypie joined
[23:34] *** Kaiepi left
[23:34] *** p6bannerbot sets mode: +v Kaypie

[23:37] *** revdiablo joined
[23:37] *** p6bannerbot sets mode: +v revdiablo

