[00:00] <Xliff> jnthn: Ah. Thanks for the update, and have a great time at PerlCon!

[00:04] *** nepugia left
[00:08] *** wildtrees left
[00:10] *** MilkmanDan left
[00:11] *** MilkmanDan joined
[00:14] <SmokeMachine> m: my $a = "bla".IO.open(:w); $a.close; $a.say: "bla"

[00:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Failed to open file /home/camelia/bla: Permission denied␤  in block <unit> at <tmp> line 1␤␤»

[00:14] <SmokeMachine> m: my $a = "/tmp/bla".IO.open(:w); $a.close; $a.say: "bla"

[00:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Cannot do 'say' on a handle in binary mode␤  in block <unit> at <tmp> line 1␤␤»

[00:14] <SmokeMachine> LTA error message?

[00:14] *** melezhik34 joined
[00:15] *** melezhik34 is now known as melezhik2

[00:22] *** pamplemousse left
[00:36] *** melezhik2 left
[00:43] <Voldenet> https://github.com/rakudo/rakudo/blob/a904d25a5772c804dbfdacab4b74f5db5ba1b91c/src/core/IO/Handle.pm6#L674

[00:43] <Voldenet> i believe you just need to check for $!PIO being nqp::null to provide valid close message

[00:48] <Xliff> Where are X::IO exceptions defined, you'd need to create X::IO::ClosedHandle, right?

[00:50] <Voldenet> Probably, but even `$!PIO or die "Handle is closed";` would be better, wouldn't it?

[00:50] <Voldenet> oh, right, you can't catch the type then

[00:51] <Voldenet> it's a lot of work then, I'd fix that if it was just one line ┐(´～`；)┌ 

[00:52] <Voldenet> `my class X::IO::ClosedHandle does X::IO { has $.trying; method message { "Cannot do '$.trying' on a closed handle" } }`

[00:53] <Voldenet> if someone is able to edit more than one files at the same time without feeling tired, it's fixable, however there's tons of methods that try acting on closed handle

[00:53] <Xliff> I know.

[00:54] <Voldenet> it's also interesting how methods check for $!decoder being defined, but use $!encoder afterwards

[00:55] <Voldenet> https://github.com/rakudo/rakudo/blob/master/src/core/IO/Handle.pm6#L655

[00:55] <Voldenet> Doesn't seem planned

[00:56] <Xliff> Funny... flush checks $!PIO

[00:56] <Voldenet> And it even throws the literal message, not X::IO exception, ha :D

[00:58] <Voldenet> EOF also does nqp::isnull($!PIO)

[00:59] *** ufobat_ joined
[00:59] <Xliff> Voldnet/SmokeMachine: Should create an issue.

[01:00] <Xliff> It's not a hard fix... just tedious.

[01:01] <Xliff> Ah. Exceptions are defined in core/Exceptions.pm6

[01:02] <Xliff> Would be a good place to put X::IO::ClosedHandle -- https://github.com/rakudo/rakudo/blob/a904d25a5772c804dbfdacab4b74f5db5ba1b91c/src/core/Exception.pm6#L650

[01:02] *** ufobat left
[01:03] <Voldenet> there are more fun bugs lying around that https://github.com/rakudo/rakudo/issues/2272

[01:10] <Xliff> Oh yeah.

[01:11] *** Xliff left
[01:15] *** noisegul_ joined
[01:19] <Voldenet> Btw, regarding atomicity, is reference assignment an atomic operation

[01:19] *** noisegul left
[01:19] <Voldenet> or should nqp::atomicstore be used (btw, I'd expect nqp::atomicstore to return the previous value, not the new value)

[01:22] *** Sgeo__ joined
[01:22] *** epony joined
[01:25] *** Sgeo_ left
[01:30] <timotimo> it has to be atomicstore

[01:30] <timotimo> regular assignment is not atomic

[01:30] <Voldenet> timotimo: thanks, that's what I've expected

[01:30] <timotimo> in most circumstances you'd want a compare-and-swap rather than an assignment

[01:31] <timotimo> but at least the atomic store makes sure other threads get th data i think?

[01:40] <discord6> <Tyler (Aearnus)> so, do I need to add a provides entry to META6 for every single module that I make (even private ones)?

[01:41] <timotimo> anything you want to be able to "use" anywhere

[01:41] <discord6> <Tyler (Aearnus)> I don't need to use it anywhere

[01:41] <discord6> <Tyler (Aearnus)> just from within my main module

[01:42] <discord6> <Tyler (Aearnus)> but it seems like I can't use my private modules from my main module if I don't add it to meta6

[01:43] <timotimo> that's somewhere

[01:43] <Voldenet> timotimo: I've checked and nqp::cas also does full memory barrier - on windows it's _InterlockedCompareExchange64 and __sync_val_compare_and_swap on gcc

[01:43] <Voldenet> s/windows/msftc/

[01:46] <discord6> <Tyler (Aearnus)> ah... I see what you're saying ahah. so is there no way to use things on a relative path or something?

[01:48] <timotimo> things may not come from "on disk"

[01:49] <discord6> <Tyler (Aearnus)> makes sense

[01:56] <discord6> <Tyler (Aearnus)> just a little bit awkward to have to make a nonlocal change like that every time I want a new module

[02:02] *** Sgeo_ joined
[02:05] *** Sgeo__ left
[02:19] <timotimo> comma does it for you :)

[02:20] <discord6> <Tyler (Aearnus)> ooh

[02:27] <discord6> <Tyler (Aearnus)> hmm, is there a way to do a qualified import? like, I have https://gist.github.com/Aearnus/fedc345571185ee3cf4c7911ad7f3ea1 and I want to call it as TortoiseShell::begin(...)

[02:39] <discord6> <Tyler (Aearnus)> aha. it has to be our scoped. the docs are kinda meh on that

[02:43] *** Cabanossi left
[02:52] *** Cabanoss- joined
[02:56] *** Xliff joined
[02:57] <Xliff> \o

[02:57] <Xliff> Is there an easy way to distinguish if a Num can fit in a num32 or a num64?

[02:58] *** cpan-p6 left
[02:58] *** cpan-p6 joined
[02:58] *** cpan-p6 left
[02:58] *** cpan-p6 joined
[03:05] *** Maylay left
[03:07] *** Maylay joined
[03:16] *** Sgeo__ joined
[03:19] *** Sgeo_ left
[03:19] <Voldenet> Xliff: 'fit' isn't a good word

[03:20] <Voldenet> m: my num32 $n = Num(3.14159265359); say $n

[03:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3.1415927410125732␤»

[03:20] <Voldenet> it loses precision pretty fast

[03:24] *** Sgeo_ joined
[03:26] <Voldenet> m: sub fits-into-num32(Num $n, $precision = $*TOLERANCE) { my num32 $x = $n; abs($x - $n) < $precision }; my $n = Num(3.14159265359); for 1e-7, 1e-8 { say fits-into-num32($n, $_); }

[03:26] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «True␤False␤»

[03:27] *** Sgeo__ left
[03:30] <Voldenet> it's a naive implementation, maybe someone comes up with something better

[03:32] *** Xliff left
[03:50] *** Sgeo__ joined
[03:51] *** Sgeo__ left
[03:53] *** Sgeo joined
[03:53] *** Sgeo_ left
[04:04] *** holyghost left
[04:55] *** pamplemousse joined
[05:17] *** molaf joined
[05:18] *** empT joined
[05:34] *** redhands joined
[05:43] *** pamplemousse left
[05:53] *** pamplemousse_ joined
[06:04] *** antoniogamiz joined
[06:08] *** pamplemousse_ left
[06:20] <antoniogamiz> time to install Comma :D

[06:24] *** Summertime left
[06:24] <Voldenet> if that's an app, it has unusually terrible name

[06:24] <Voldenet> how does one google it? :P

[06:24] *** Summertime joined
[06:24] <antoniogamiz> Voldenet: Comma perl6 editor

[06:24] <antoniogamiz> :D

[06:25] <antoniogamiz> => https://commaide.com/

[06:26] <Voldenet> It seems a lot better than atom

[06:28] <antoniogamiz> I'm changing from vscode

[06:28] <antoniogamiz> jmerelo has recommended me a lot so I thought to give it a try

[06:29] <Voldenet> I'll see it too, I hope it's not an elaborate trojan :P

[06:30] <antoniogamiz> uoh it has a shortcut to jump to the declaration

[06:30] <antoniogamiz> I think I'm going to use that one a lot, I missed it in vscode

[06:32] <Voldenet> vscode perl6 plugin doesn't have jump to declaration? :O

[06:33] <Geth> ¦ doc: b596b5b0d9 | (Trey Harris)++ | doc/Language/nativecall.pod6

[06:33] <Geth> ¦ doc: nativecall: Add language to address #2684

[06:33] <Geth> ¦ doc: 

[06:33] <Geth> ¦ doc: The syntax for NativeCall callable signature constraints under Rakudo

[06:33] <Geth> ¦ doc: deviates from the usual syntax. There is an issue at

[06:33] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[06:33] <Geth> ¦ doc: rakudo/rakudo#2878 addressing this, but until this is addressed, some

[06:33] <Geth> ¦ doc: minimal explanation for the strange syntax is needed.

[06:33] <synopsebot> RAKUDO#2878 [open]: https://github.com/rakudo/rakudo/issues/2878 NativeCall callback signature constraint

[06:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b596b5b0d9

[06:33] <Geth> ¦ doc: f8c1778717 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/nativecall.pod6

[06:33] <Geth> ¦ doc: Merge pull request #2791 from perl6/nativecall-constraint-syntax

[06:33] <Geth> ¦ doc: 

[06:33] <Geth> ¦ doc: nativecall: Add language to address #2684

[06:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f8c1778717

[06:37] *** kylese joined
[06:43] *** mahafyi joined
[06:55] *** rindolf joined
[06:55] *** mahafyi left
[06:55] *** sjm_uk joined
[06:56] <Geth> ¦ doc: 7a7f642162 | (Tim Smith)++ | doc/Type/Mu.pod6

[06:56] <Geth> ¦ doc: Align Mu.so & Mu.not docs with design

[06:56] <Geth> ¦ doc: 

[06:56] <Geth> ¦ doc: The previous explanation of so() (double-negation) wasn't consistent

[06:56] <Geth> ¦ doc: with implementation or mentioned in design docs. It's a common

[06:56] <Geth> ¦ doc: JavaScript idiom but not relevant to Perl 6. This aligns with the docs

[06:56] <synopsebot> Link: https://doc.perl6.org/type/Mu

[06:56] <Geth> ¦ doc: for prefix:<so> and :<not>, too. Ref #2693.

[06:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7a7f642162

[06:56] <Geth> ¦ doc: 8e1693204a | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Mu.pod6

[06:56] <Geth> ¦ doc: Applies some of the changes requested

[06:57] <Geth> ¦ doc: 

[06:57] <Geth> ¦ doc: So that the PR is acceptable.

[06:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8e1693204a

[06:57] <Geth> ¦ doc: 07dffb4838 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Mu.pod6

[06:57] <Geth> ¦ doc: Merge pull request #2697 from softmoth/so-not

[06:57] <Geth> ¦ doc: 

[06:57] <Geth> ¦ doc: Align Mu.so & Mu.not docs with design

[06:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/07dffb4838

[06:59] *** empT left
[07:05] *** antoniogamiz left
[07:06] *** mahafyi joined
[07:10] <Geth> ¦ doc: d0d7cd5c4a | (JJ Merelo)++ | doc/Language/nativecall.pod6

[07:10] <Geth> ¦ doc: After #2791 fix

[07:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d0d7cd5c4a

[07:10] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[07:33] *** [particle]1 left
[07:33] *** [particle] joined
[07:33] <ufobat_> I am looking for a way to build a supply that produces all possible solutions for a NxN matrixes (or 2d arrays) just filled with 0 and 1, any ideas?

[07:33] <ufobat_> for N=2 it would be ((0 0) (0 1) (1 0) (1 1)), e.g

[07:34] *** redhands left
[07:34] <ufobat_> ah last sentence is nonsense, it would start with (0 0)(0 0)(0 0)(0 0) till all elments set to 1

[07:47] <ufobat_> does the methods of List help somehow, i am looking for a smart thing with permuations, combinations or X or something

[07:48] <discord6> <Tyler (Aearnus)> hmm

[07:54] *** Aearnus joined
[07:54] <Aearnus> ufobat_: like this?

[07:54] <Aearnus> m: my $n = 2; gather { for (0..($n**2 - 1)) { my $l = $_.base(2).comb; take (|(0 xx $n - $l.elems) , |$l) } }

[07:54] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[07:54] <Aearnus> lmao oops

[07:55] <Aearnus> m: my $n = 2; gather { for (0..($n**2 - 1)) { my $l = $_.base(2).comb; take (|(0 xx $n - $l.elems) , |$l) } }.say

[07:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «((0 0) (0 1) (1 0) (1 1))␤»

[07:55] <Aearnus> m: my $n = 3; gather { for (0..($n**2 - 1)) { my $l = $_.base(2).comb; take (|(0 xx $n - $l.elems) , |$l) } }.say

[07:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «((0 0 0) (0 0 1) (0 1 0) (0 1 1) (1 0 0) (1 0 1) (1 1 0) (1 1 1) (1 0 0 0))␤»

[07:55] <ufobat_> wow :)

[07:56] <Aearnus> oops. looks like i messed up on the `for` argument. i'm rusty on combinations and things. might have to be up to n factorial.

[07:56] <ufobat_> it looks smart but it

[07:56] <ufobat_> is not what i wanted :)

[07:56] <Aearnus> ah shucks!

[07:58] <ufobat_> i think for N=2 i need (0 0)(0 0) , next would be (0 0)(0 1)  next (0 0)(1 0)

[07:58] <ufobat_> but i think i am confused due to the fact that i am having 2d arrays

[07:59] <Geth> ¦ doc: JJ self-assigned Site formatting seems to have been disrupted https://github.com/perl6/doc/issues/2911

[08:00] <ufobat_> but a 2d array with N is a 1d List with the length of N**2, no? i just need to count from 0 to 2**N and make a 2d array of it

[08:02] <ufobat_> and then i can take your idea :-)

[08:04] <Aearnus> ufobat_: u can do that really easily with cross product

[08:05] <Aearnus> m: constant $n = 2; sub f() { gather { for (0..([*] 1..$n) + 1) { my $l = $_.base(2).comb; take (|(0 xx $n - $l.elems) , |$l) } } }; (f() X, f()).say

[08:05] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(((0 0) (0 0)) ((0 0) (0 1)) ((0 0) (1 0)) ((0 0) (1 1)) ((0 1) (0 0)) ((0 1) (0 1)) ((0 1) (1 0)) ((0 1) (1 1)) ((1 0) (0 0)) ((1 0) (0 1)) ((1 0) (1 0)) ((1 0) (1 1)) ((1 1) (0 0)) ((1 1) (0 1)) ((1 1) (1 0)) ((1 1) (1 1)))␤»

[08:05] <Aearnus> :)

[08:05] <Geth> ¦ doc: JJ assigned to noisegul Issue `p6doc IO::Path` on windows https://github.com/perl6/doc/issues/2534

[08:07] <ufobat_> cool :-)

[08:08] <Aearnus> and you can do cross product as many times as you need to make arbitrary height matricies as well using the reduction operator w/ the `xx` operator

[08:09] <Aearnus> m: constant $n = 3; sub f() { gather { for (0..([*] 1..$n) + 1) { my $l = $_.base(2).comb; take (|(0 xx $n - $l.elems) , |$l) } } }; ([X,] f() xx 3).say

[08:09] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(((0 0 0) (0 0 0) (0 0 0)) ((0 0 0) (0 0 0) (0 0 1)) ((0 0 0) (0 0 0) (0 1 0)) ((0 0 0) (0 0 0) (0 1 1)) ((0 0 0) (0 0 0) (1 0 0)) ((0 0 0) (0 0 0) (1 0 1)) ((0 0 0) (0 0 0) (1 1 0)) ((0 0 0) (0 0 0) (1 1 1)) ((0 0 0) (0 0 1) (0 0 0)) ((0 0 0) (0 0 1)…»

[08:09] <ufobat_> i dont get how/why the part behind the take works

[08:09] <Aearnus> that's just list concatenation there

[08:10] <Aearnus> i take a list of 0's which is the right length (`0 xx $n - $l.elems`) and concatenate it on the front of the list `$l`

[08:10] <Aearnus> left padding

[08:11] <Aearnus> and the `|` is to convert the two lists into a https://docs.perl6.org/type/Slip so I can concatenate them without creating more depth in the list

[08:12] <Aearnus> (wish I knew why perl6 didn't have a list concat operator...)

[08:14] <ufobat_> ah

[08:32] *** rfold joined
[08:37] *** rfold left
[08:38] *** rfold joined
[08:47] *** molaf left
[08:48] *** mahafyi left
[08:49] *** sjm_uk left
[08:54] *** domidumont joined
[09:07] *** domidumont left
[09:08] *** Black_Ribbon left
[09:19] *** rfold is now known as chloekek

[09:19] *** chloekek left
[09:20] *** chloekek joined
[09:27] *** Aearnus left
[09:37] <discord6> <Tyler (Aearnus)> how can I specify that a method method createWindow(int32, int32, str --> Window) can only be called on an uninitialized class?

[09:37] <discord6> <Tyler (Aearnus)> (as in: it's a constructor)

[09:42] <discord6> <Tyler (Aearnus)> figured it out, nvm

[09:44] *** sena_kun joined
[09:45] *** Xliff joined
[09:46] <Xliff> \o

[09:47] *** chloekek left
[09:55] *** Voldenet left
[09:58] *** kylese left
[10:00] *** Voldenet joined
[10:00] *** Voldenet left
[10:00] *** Voldenet joined
[10:18] *** aborazmeh joined
[10:18] *** aborazmeh left
[10:18] *** aborazmeh joined
[10:58] *** aborazmeh left
[11:18] *** jmerelo joined
[11:19] <jmerelo> Rebuilding docs... https://perl6docs.github.io should be OK

[11:19] <yoleaux> 20 Jul 2019 14:40Z <uzl> jmerelo: From the SO question about iteration, this is the example using the Iterator role (http://sprunge.us/Mz6GCl) but I'm still unable to iterate over the Scalar object. Am I doing something wrong? Thanks.

[11:20] <jmerelo> .tell uzl I'll have to check it out. The whole terminology is kinda tricky, but it's OK once you get the grasp of it.

[11:20] <yoleaux> jmerelo: I'll pass your message to uzl.

[11:21] <Xliff> What "scalar object" is that/

[11:24] *** chloekek joined
[11:24] <Xliff> Wonder if there is an online Jupyter notebook for Perl6...

[11:25] *** kensanata joined
[11:26] <Geth> ¦ doc: 58b9ef0501 | (JJ Merelo)++ | README.md

[11:26] <Geth> ¦ doc: Adds fallback site to docs, closes #2911 after updating

[11:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/58b9ef0501

[11:26] <jmerelo> Xliff: you mean a Jupyter notebook server?

[11:27] *** jmerelo left
[11:27] *** robertle joined
[11:27] <Xliff> Yes

[11:41] *** kensanata left
[11:47] *** sjm_uk joined
[11:47] <Xliff> .tell uzl You need a new iterator object. Everytime that method is called. You can't use self.

[11:47] <yoleaux> Xliff: I'll pass your message to uzl.

[11:47] *** MasterDuke joined
[11:49] <MasterDuke> AlexDaniel: around?

[11:51] *** Poohman joined
[12:07] *** telex left
[12:08] *** telex joined
[12:09] *** Xliff left
[12:09] <Poohman> hello all, 

[12:10] <Poohman> I had written a script some months ago where I had created an enum in a class and this class then had a data member of this enum

[12:11] <Poohman> I could use Json::Class to directly push an object of this class to the to-json function

[12:12] <Poohman> now  I have the alarm "type check failed in binding to parameter "$value"; expected Any but got Mu

[12:13] <Poohman> this script had worked perfectly some months ago

[12:14] <Poohman> in the type graph the pnly thing which is not an Any but a Mu is a Junction

[12:15] <Poohman> do enums come under Junctions

[12:15] <Poohman> ?

[12:16] *** Xliff joined
[12:16] <Xliff> .tell uzl Try this version: http://sprunge.us/qgIQde

[12:16] <yoleaux> Xliff: I'll pass your message to uzl.

[12:17] <Xliff> .tell uzl Also thanks for turning me on to sprunge... it's nifty!

[12:17] <yoleaux> Xliff: I'll pass your message to uzl.

[12:19] *** cygx joined
[12:19] <Kaiepi> m: enum Foo ( ); say Foo ~~ Any

[12:19] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «True␤»

[12:20] <Kaiepi> m: enum Foo ( ); say Foo.WHAT ~~ Any

[12:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «True␤»

[12:20] <cygx> Poohman: some low-level objects are also considered Mu

[12:20] <yoleaux> 18 Jul 2019 14:40Z <timotimo> cygx: it'd be nice if the github repo for the webring had a clickable link directly to the ring's home, either in a README.md or in the description "website" field

[12:21] <Kaiepi> m: enum Foo ( ); sub foo($bar) { say $bar }; foo Foo

[12:21] <cygx> If they make it from nqp to perl6 land, that's a bug

[12:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Foo)␤»

[12:21] <Kaiepi> oh right i'm forgetting Metamodel::EnumHOW defualts to Any for its refinee

[12:25] <Poohman> hmm strange - let me then doublecheck by the stringifying it and passing it as a string - the rest of the members to the to-json are only date and Num - but let me doublecheck and make dure its the enum that is causing the problem

[12:32] *** molaf joined
[12:39] *** xinming joined
[12:39] *** nepugia joined
[12:41] *** xinming_ left
[13:00] *** pamplemousse joined
[13:13] *** grumble left
[13:15] *** sjm_uk left
[13:18] *** MasterDuke left
[13:20] *** grumble joined
[13:22] *** sjm_uk joined
[13:38] *** nepugia left
[13:38] *** Actualeyes left
[13:40] *** nepugia joined
[13:41] *** nepugia left
[13:44] *** nepugia joined
[13:45] *** reach_satori_ joined
[13:47] <Poohman> Hello cygx and Kaiepi - I checked and it doesnt seem to be a problem with my class members

[13:47] <Poohman> the problem seems to be in Json::Class or Json::Marshal modules

[13:48] *** reach_satori left
[13:48] <Poohman> the alarm that I had mentioned earlier comes when the attribute of the object is checked

[13:49] <Poohman> can attributes have the type Mu?

[13:50] *** breinbaas left
[13:50] <timotimo> they can

[13:51] <Poohman> The alarm occurs inn the subroutine _marshal in Json::Marshal

[13:51] <Poohman> timotimo: ok

[13:51] *** lucasb joined
[13:52] *** domidumont joined
[14:39] *** nepugia left
[14:42] <Poohman> hello all, if I want to add a few print statements in the installed modules, how do I do it? Can I directly edit the long file names some in the errors? Or are they in some compiled form?

[14:43] <Poohman> shown in the errors I meant ..

[14:43] *** Cabanoss- left
[14:47] <sena_kun> Poohman, no, you can't and should not.

[14:47] <jnthn> Obtain the module's source, edit that, and then use -Ipath/to/source to make it use your edited version in preference to any installed one

[14:47] <sena_kun> Poohman, to do what you want to do, you need to obtain module sources, e.g. just clone from github, and then do `-I/path/to/my/clone/dir/lib`, then those will be used.

[14:49] <Poohman> ok thanks guys

[14:52] *** nepugia joined
[14:54] *** Cabanossi joined
[15:00] *** sjm_uk left
[15:05] *** zakharyas joined
[15:35] *** pamplemousse left
[15:46] <noisegul_> How to write an aliased, optional command-line argument with a `where` constraint? Example: `Str :f($file) where $file.IO.e` works but is not optional yet.

[15:46] *** noisegul_ is now known as noisegul

[15:46] *** huf joined
[15:47] <Poohman> :m 

[15:49] <Poohman> m:

[15:49] <evalable6> Poohman, rakudo-moar 9b183ccd5: OUTPUT: «»

[15:50] <Poohman> m: say "test, been a while";

[15:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «test, been a while␤»

[15:51] <Poohman> m: a = Date.new(2019-07-21);say a;

[15:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> 3a =7⏏5 Date.new(2019-07-21);say a;␤»

[15:51] <Poohman> m: a = Date.new(2019-07-21);

[15:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> 3a =7⏏5 Date.new(2019-07-21);␤»

[15:51] <Poohman> m: Date.new(2019-07-21);

[15:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Potential difficulties:␤    Leading 0 has no meaning. If you meant to create an octal number, use '0o' prefix; like, '0o7'. If you meant to create a string, please add quotation marks.␤    at <tmp>:1␤    ------> 3Date.new(2019-077⏏5-21);…»

[15:52] <Poohman> m: Date.new("2019-07-21");

[15:52] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[15:52] <Poohman> m: a = Date.new("2019-07-21");say a;

[15:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> 3a =7⏏5 Date.new("2019-07-21");say a;␤»

[15:53] <Poohman> m: my $a = Date.new("2019-07-21");say a;

[15:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[15:53] <Poohman> m: my $a = Date.new("2019-07-21");say $a;

[15:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2019-07-21␤»

[15:54] <Poohman> m: my $a = Date.new("2019-07-21");say $a; say $a.daycount;

[15:54] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2019-07-21␤58685␤»

[15:54] *** huf left
[15:56] *** huf joined
[16:05] <Poohman> m: my $a = Date.new("2019-07-21");say $a; say $a.daycount;for $a.^attributes -> $attr { say $attr;my $value = $attr.get_value($a);say $value;}

[16:05] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2019-07-21␤58685␤Int $!year␤2019␤Int $!month␤7␤Int $!day␤21␤Int $!daycount␤58685␤Callable &!formatter␤(Callable)␤»

[16:05] <Poohman> m: my $a = Date.new("2019-07-21");say $a; for $a.^attributes -> $attr { say $attr;my $value = $attr.get_value($a);say $value;}

[16:05] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2019-07-21␤Int $!year␤2019␤Int $!month␤7␤Int $!day␤21␤Int $!daycount␤(Int)␤Callable &!formatter␤(Callable)␤»

[16:06] <Poohman> why is the above difference happening with the daycount member??

[16:06] *** pamplemousse joined
[16:06] <Poohman> This was the problem I had with Json::Class and Json::Marshal

[16:09] <Poohman> if I dont print out the daycount value using say before passing the object to to-json() daycount returns (Mu) instead of the value

[16:13] *** kaare_ joined
[16:19] *** jmerelo joined
[16:24] <cygx> $!daycount gets lazily initialized - cf src/core/Dateish.pm6:49

[16:36] *** pecastro joined
[16:38] *** cwilson left
[16:57] <Poohman> ok

[16:58] *** tilpner joined
[17:01] <tilpner> Not sure where to file this issue: https://marketing.perl6.org/id/1541379592/pdf_digital from http://blogs.perl.org/users/zoffix_znet/2018/11/announce-raku-perl-6-diwali-6d-language-specification-release.html is broken

[17:12] *** uzl joined
[17:14] <uzl> o/

[17:14] <yoleaux> 11:20Z <jmerelo> uzl: I'll have to check it out. The whole terminology is kinda tricky, but it's OK once you get the grasp of it.

[17:14] <yoleaux> 11:47Z <Xliff> uzl: You need a new iterator object. Everytime that method is called. You can't use self.

[17:14] <yoleaux> 12:16Z <Xliff> uzl: Try this version: http://sprunge.us/qgIQde

[17:14] <yoleaux> 12:17Z <Xliff> uzl: Also thanks for turning me on to sprunge... it's nifty!

[17:15] <uzl> jmerelo: Yeah, that's what I've noticed. Probably it'll get better as I get accustomed to the terminology.

[17:18] <jmerelo> uzl: good luck!

[17:20] *** redhands joined
[17:22] <uzl> .tell Xliff Would you mind expound on the "need of a new iterator object" and "not using self"? Alternatively, you could add it to this SO answer (https://stackoverflow.com/a/57129217/10824322) if you've an account or add a new answer. ;-)

[17:22] <yoleaux> uzl: I'll pass your message to Xliff.

[17:22] <uzl> jmerelo: Thanks!

[17:23] <jmerelo> uzl: when Xliff tells you about not using self, please raise an issue in the documentation (where it's used) :-)

[17:23] <uzl> .tell No problem. I started using it myself when somebody here posted a link. So thanks to that person for turning us to it. ;-)

[17:23] <yoleaux> uzl: I'll pass your message to No.

[17:23] <uzl> jmerelo: Sure. Will do!

[17:25] *** cygx left
[17:45] *** jmerelo left
[18:00] *** Black_Ribbon joined
[18:08] *** melezhik left
[18:13] *** reach_satori_ left
[18:42] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue No way of having new versions of CORE classes for new language revisions https://github.com/perl6/problem-solving/issues/71

[18:43] <Geth> ¦ problem-solving: AlexDaniel self-assigned Ecosystem: versioning issues https://github.com/perl6/problem-solving/issues/72

[18:44] <Geth> ¦ problem-solving: AlexDaniel self-assigned Official release of Perl 6 implementation https://github.com/perl6/problem-solving/issues/70

[18:44] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Status of the POD6 implementation https://github.com/perl6/problem-solving/issues/69

[18:51] *** uzl left
[18:53] <AlexDaniel> tilpner: https://github.com/perl6/problem-solving/issues/68

[18:54] <tilpner> Oh, I see. Looks like there was a larger incident or migration. Thanks! :)

[18:55] <AlexDaniel> tilpner: yeah, we're trying to redo things the right way this time, so it's going to take a bit

[18:56] *** domidumont left
[19:01] *** cpan-p6 left
[19:01] *** cpan-p6 joined
[19:01] *** cpan-p6 left
[19:01] *** cpan-p6 joined
[19:05] *** reach_satori joined
[19:08] *** nepugia left
[19:16] <redhands> so, I vaguely remember 1/3 + 1/3 displaying in REPL as something like 2/3, but now it seems to stringify as 0.666667, am I remembering wrong?

[19:19] <redhands> feels like this is hiding the niceness of the Rat class, I assume this Rat class already keeps a $numerator and $denominator? is this redividing in the Str method to produce this 0.666667 string?

[19:19] *** kaare_ left
[19:20] <AlexDaniel> redhands: say (1/3 + 1/3).Str

[19:20] *** kaare_ joined
[19:20] <AlexDaniel> oops

[19:20] <AlexDaniel> m: say (1/3 + 1/3).Str

[19:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.666667␤»

[19:20] <AlexDaniel> m: say (1/3 + 1/3).perl

[19:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «<2/3>␤»

[19:20] <AlexDaniel> m: say (1/3 + 1/3).nude

[19:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(2 3)␤»

[19:21] <AlexDaniel> redhands: so yes, that's how it is stringified

[19:22] <AlexDaniel> redhands: I guess in most cases when people want to print something they don't expect to get the numerator and denumerator separately

[19:22] <AlexDaniel> or a fraction

[19:23] <tobs> I would argue that a decimal expansion gives you a better idea of how big a number is when numerator and denominator are huge.

[19:24] <tobs> m: say (1/3 + 1/3).gist

[19:24] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.666667␤»

[19:25] <redhands> Ah I see, thanks! I did see the .perl, maybe .Str always returned 0.666667, and I'm just misremembering, the 2/3 output feels a bit more intuitive for me (and no information lost), I figure the .Str must be diving somewhere internally?

[19:25] <redhands> tobs: oh I see, i guess that makes sense

[19:27] <AlexDaniel> m: say 0.12345.nude

[19:27] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(2469 20000)␤»

[19:28] <redhands> AlexDaniel: Ah thank you

[19:28] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue One more approach for EXPORT problems. https://github.com/perl6/problem-solving/issues/74

[19:28] <Geth> ¦ doc/new-issue-template-format: 49af5485aa | (Trey Harris)++ (committed using GitHub Web editor) | 6 files

[19:28] <Geth> ¦ doc/new-issue-template-format: Update issue templates for #2904

[19:28] <Geth> ¦ doc/new-issue-template-format: 

[19:28] <Geth> ¦ doc/new-issue-template-format: This is WIP for discussion.

[19:28] <Geth> ¦ doc/new-issue-template-format: 

[19:28] <Geth> ¦ doc/new-issue-template-format: Two things (at least) need to be added:

[19:28] <Geth> ¦ doc/new-issue-template-format: 

[19:28] <Geth> ¦ doc/new-issue-template-format: 1. A pull request template

[19:28] <Geth> ¦ doc/new-issue-template-format: 2. Where we should point people who have issues with the language that they are having the impulse to express via a doc fix. (There isn’t a one-size-fits-all answer here, since some things will go to rakudo and some to perl6 for instance, but a general rule of thumb should be included in the templates, I think?)

[19:28] <Geth> ¦ doc/new-issue-template-format: review: https://github.com/perl6/doc/commit/49af5485aa

[19:28] <Geth> ¦ doc: treyharris++ created pull request #2912: Update issue templates for #2904

[19:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2912

[19:31] *** yqt joined
[19:36] <cpan-p6> New module released to CPAN! Gnome::Gtk3 (0.17.3) by 03MARTIMM

[19:38] <Geth> ¦ doc: 616e6b0e0a | Coke++ | 2 files

[19:38] <Geth> ¦ doc: fix typos.

[19:38] <Geth> ¦ doc: 

[19:38] <Geth> ¦ doc: fix indefinite article

[19:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/616e6b0e0a

[19:39] <Geth> ¦ doc/new-issue-template-format: 871623e778 | (Trey Harris)++ | 2 files

[19:39] <Geth> ¦ doc/new-issue-template-format: Minor fixes

[19:39] <Geth> ¦ doc/new-issue-template-format: 

[19:39] <Geth> ¦ doc/new-issue-template-format: - something-is-incorrect.md had `bug` rather than `docs` as a default label

[19:39] <Geth> ¦ doc/new-issue-template-format: - An old `something-s-incorrect` WIP made it in somehow

[19:39] <Geth> ¦ doc/new-issue-template-format: review: https://github.com/perl6/doc/commit/871623e778

[19:49] <Geth> ¦ doc/new-issue-template-format: 40ebd1394e | (Trey Harris)++ | .github/issue_template.md

[19:49] <Geth> ¦ doc/new-issue-template-format: Remove legacy issue_template.md; pull_request.md

[19:49] <Geth> ¦ doc/new-issue-template-format: 

[19:49] <Geth> ¦ doc/new-issue-template-format: Remove the legacy issue template.

[19:49] <Geth> ¦ doc/new-issue-template-format: 

[19:49] <Geth> ¦ doc/new-issue-template-format: Also, just a note that since I don't think we'll be using the multiple

[19:49] <Geth> ¦ doc/new-issue-template-format: pull-request templates feature (since it requires nonstandard tools

[19:49] <Geth> ¦ doc/new-issue-template-format: support) and the "new" location for a single global hidden template is

[19:49] <Geth> ¦ doc/new-issue-template-format: exactly the same as the "old" one, we can just leave it in place as-is.

[19:49] <Geth> ¦ doc/new-issue-template-format: review: https://github.com/perl6/doc/commit/40ebd1394e

[19:50] *** pamplemousse_ joined
[19:53] <chloekek> What's the difference between the module and package keywords?

[19:53] *** pamplemousse left
[19:57] <chloekek> p6: module M {}; say M.perl

[19:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «M␤»

[19:57] <chloekek> p6: packae M {}; say M.perl

[19:57] *** molaf left
[19:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    M used at line 1␤Undeclared routine:␤    packae used at line 1␤␤»

[19:57] <chloekek> p6: package M {}; say M.perl

[19:57] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «M␤»

[19:57] <Xliff> .

[19:57] <yoleaux> 17:22Z <uzl> Xliff: Would you mind expound on the "need of a new iterator object" and "not using self"? Alternatively, you could add it to this SO answer (https://stackoverflow.com/a/57129217/10824322) if you've an account or add a new answer. ;-)

[19:57] <chloekek> p6: package A {}; module B {}; say A.WHAT; say B.WHAT;

[19:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(A)␤(B)␤»

[19:58] <Xliff> .tell uzl SO question updated.

[19:58] <yoleaux> Xliff: I'll pass your message to uzl.

[19:58] <chloekek> p6: package A {}; module B {}; say A.^mro; say B.^mro;

[19:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'mro' for invocant of type 'Perl6::Metamodel::PackageHOW'␤  in block <unit> at <tmp> line 1␤␤»

[19:59] *** MasterDuke joined
[20:00] <TreyHarris> camelia:Every module is a package. But not every package is a module. Classes and grammars and roles are packages, too

[20:00] <TreyHarris> You can have multiple top-level packages in a file, but if you use 'unit' you can only have one

[20:01] <TreyHarris> Dumb dumb, I meant chloekek rather than camelia. :-D

[20:02] <TreyHarris> A bare package is functionally very similar to a module--the differences are in loading and importing. You can read the docs for the rundown--there's a section comparing the two in "Reference"

[20:04] <TreyHarris> But unless you're mucking about with the language, you probably want to default to module if you're writing non-OO library code. A full rundown is given in https://perl6docs.github.io/language/packages

[20:05] <chloekek> Thanks, I'll check that out.

[20:10] <TreyHarris> Well, the other difference between modules and packages are what they can introspect, because modules have an identity. But that's a pretty arcane difference

[20:23] *** zakharyas left
[20:30] <xinming> Anyone here knows what template system is currently used by perl6?

[20:31] <sena_kun> xinming, template system as in?

[20:32] <Xliff> xinming: There are several.

[20:32] <Xliff> xinming: What are you trying to do?

[20:34] <xinming> just like xslate in perl5

[20:34] <xinming> I used xslate in perl6 too, But not that handy, So, I wish like something like  that in perl6.

[20:34] <xinming> template toolkit in perl6 is good also. :-)

[20:35] <sena_kun> Cro::WebApp

[20:35] <sena_kun> for example

[20:35] <xinming> Ok.

[20:35] <Xliff> Template6

[20:35] <Xliff> Template::Mojo

[20:35] <Xliff> There are many!

[20:36] <sena_kun> https://modules.perl6.org/search/?q=template

[20:45] *** Cabanoss- joined
[20:46] *** Cabanossi left
[21:04] *** robertle left
[21:06] *** yqt left
[21:11] <chloekek> Cool, using Perl 6 to intercept Minecraft chat messages and respond with commands. :)

[21:28] *** chloekek left
[22:01] *** khisanth_ left
[22:04] *** MasterDuke left
[22:14] *** khisanth_ joined
[22:16] <TreyHarris> I ♥️ .duckmap, I dunno how I got along without it

[22:17] <TreyHarris> Perl 6 in genneral removes so much special casing that special casing becomes a bit of a code smell

[22:20] <Xliff> .duckmap

[22:21] <TreyHarris> Xliff: That's what I typed, if it came out wrong because of the emoji, apologies

[22:22] <Xliff> No. I'm trying to rationalize the name.

[22:22] <Xliff> And I think I have it. 

[22:23] <Xliff> "duck" as in.. "walks, quacks, looks" then apply block.

[22:23] <Xliff> Not the name I'd use, but it works... once you get the etymology.

[22:27] <TreyHarris> and "duck-typing" is when a language lets you run code against an object regardless of its formal type so long as it handles all the methods actually called on it (i.e.

[22:27] <TreyHarris> walks like a duck)

[22:29] <TreyHarris> (Perl 6 has duck-typing for non-invocants when you don't specify the type in a routine's signature)

[22:38] <TreyHarris> hmm... I guess it even has duck-typing for invocants if you enable augment and add methods to Any or Mu. But it doesn't let you write a method that is only added to objects who have the methods performed on the invocant like... *shrug* can't remember, but I recall some language that had that. Would've had to have been a non-dynamic language with static compilation.

[22:48] *** pecastro left
[22:55] *** rindolf left
[23:13] *** |oLa| joined
[23:21] *** pamplemousse_ left
[23:22] <Xliff> #perl6-devs -- FWIW - I know rakudo/3075 will be a BITCH to nail down. However I am worried that something is going wrong and perl6 isn't reporting it. Please help!

[23:23] <timotimo> R#3075

[23:23] <synopsebot> R#3075 [open]: https://github.com/rakudo/rakudo/issues/3075 Conflicting use statement does not produce an error, but fails dynamic compilation.

[23:25] <timotimo> have you looked at RAKUDO_MODULE_DEBUG output?

[23:26] <Xliff> No.

[23:26] <timotimo> that could perhaps give an important hint as to the difference between the "do everything" script and the "use only one module" one-liner

[23:27] *** |oLa| left
[23:27] <Xliff> Considering I barely know how to read the contents of that, I thought it best leave that to someone who knew how to read it.

[23:27] <Xliff> I can add that to the bug.

[23:30] <Xliff> OK. Results from step 5 added

[23:30] *** MilkmanDan left
[23:31] *** MilkmanDan joined
[23:31] *** |oLa| joined
[23:35] <Xliff> step 8 added

[23:40] <Xliff> Step 11 added, but link goes to a gist. It's over a meg in size.

[23:43] *** redhands left
[23:44] *** sena_kun left
[23:47] *** aborazmeh joined
[23:47] *** aborazmeh left
[23:47] *** aborazmeh joined
