[00:18] *** wildtrees left
[00:27] *** Xliff left
[00:31] *** lucasb left
[00:33] *** ChoHag left
[01:15] *** nepugia joined
[01:46] *** nepugia left
[01:47] *** Sgeo_ left
[02:04] *** Manifest0 left
[02:04] *** Manifest0 joined
[02:08] *** Sgeo joined
[02:08] <tbrowder> sortiz: hi

[02:10] <tbrowder> looks like europe has gone to bed

[02:11] <tbrowder> and i also, nite, sortiz

[02:12] <sortiz> nite tbrowder 

[02:31] *** sortiz left
[02:48] *** Cabanossi left
[02:51] *** Cabanossi joined
[03:05] *** Xliff joined
[03:19] *** adu joined
[03:32] <Xliff> m: my @a = ('a' ... 'q').»race.say

[03:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3my @a = ('a' ... 'q').»7⏏5race.say␤    expecting any of:␤        postfix␤»

[03:32] <Xliff> m: my @a = ('a'...'q').race.say

[03:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(a b c d e f g h i j k l m n o p q)␤»

[03:33] <Xliff> m: my @a = ('a'...'q')».race.say

[03:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'race' for invocant of type 'Str'. Did you mean any of these?␤    cache␤    rand␤    take␤␤  in block <unit> at <tmp> line 1␤␤»

[03:33] <Xliff> m: my @a = ('a'...'q').race.say

[03:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(a b c d e f g h i j k l m n o p q)␤»

[03:33] <Xliff> m: my @a = ('a'...'q').race(batch => 1, degree => 3).say

[03:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(a b c d e f g h i j k l m n o p q)␤»

[03:33] <Xliff> m: my @a = ('a'...'q').race(batch => 3, degree => 2).say

[03:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(a b c d e f g h i j k l m n o p q)␤»

[03:33] <Xliff> m: my @a = (100...200).race(batch => 3, degree => 2).say

[03:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 16…»

[03:40] <Xliff> m: my @a = ('a'...'q').»rotor(3).say

[03:40] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3my @a = ('a'...'q').»7⏏5rotor(3).say␤    expecting any of:␤        postfix␤»

[03:41] <Xliff> m: my @a = ('a'...'q').rotor(3)».say

[03:41] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤h␤i␤j␤k␤l␤m␤n␤o␤»

[03:41] <Xliff> m: my @a = ('a'...'q').rotor(3).race.say

[03:41] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «((a b c) (d e f) (g h i) (j k l) (m n o))␤»

[03:41] <Xliff> m: my @a = ('a'...'q').rotor(3).say

[03:41] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «((a b c) (d e f) (g h i) (j k l) (m n o))␤»

[03:41] <Xliff> m: my @a = ('a'...'q').rotor(3).race(degree=>3).say

[03:41] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «((a b c) (d e f) (g h i) (j k l) (m n o))␤»

[03:47] <Xliff> m: ('a'..'az').say

[03:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «"a".."az"␤»

[03:47] <Xliff> m: ('a'...'az').say

[03:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(a)␤»

[03:47] <Xliff> m: 'z'.succ.say

[03:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «aa␤»

[03:52] *** Xliff left
[04:14] *** pamplemousse joined
[04:35] *** Woodi joined
[05:15] *** adu left
[05:40] *** sauvin joined
[06:03] *** reach_satori left
[06:10] *** pamplemousse left
[06:20] *** reach_satori joined
[06:21] *** Voldenet left
[06:26] *** Voldenet joined
[06:26] *** Voldenet left
[06:26] *** Voldenet joined
[06:57] <xinming_> SmokeMachine: Are you author of Red?

[06:59] *** reach_satori left
[07:00] *** k0Le left
[07:01] *** k0Le joined
[07:03] *** antoniogamiz joined
[07:03] <MasterDuke> xinming_: he is

[07:22] *** ravenous_ joined
[07:22] *** Voldenet left
[07:27] *** Voldenet joined
[07:27] *** Voldenet left
[07:27] *** Voldenet joined
[07:28] *** ChoHag joined
[07:39] *** rindolf joined
[07:51] *** antoniogamiz left
[08:23] *** Black_Ribbon left
[09:01] *** devz3ro left
[09:09] *** Ven`` joined
[09:15] <Geth> ¦ problem-solving/path-to-raku: 6af3f53042 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[09:15] <Geth> ¦ problem-solving/path-to-raku: Remove Wikipedia / Rosettacode reference

[09:15] <Geth> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/6af3f53042

[09:28] *** Ven`` left
[10:15] *** ravenous_ left
[10:35] *** ravenous_ joined
[10:37] *** ravenou__ joined
[10:40] *** ravenous_ left
[10:48] *** lucasb joined
[11:09] *** squashable6 left
[11:14] *** squashable6 joined
[11:45] *** pecastro joined
[11:50] *** mowcat joined
[11:50] *** mowcat left
[11:51] *** mowcat joined
[12:42] <xinming_> MasterDuke: Thanks, Will trouble him :-)

[12:51] *** evalable6 left
[12:52] *** evalable6 joined
[12:56] *** ravenou__ left
[13:01] *** cpan-p6 left
[13:02] *** cpan-p6 joined
[13:02] *** cpan-p6 left
[13:02] *** cpan-p6 joined
[13:21] *** Ven`` joined
[13:52] *** ravenous_ joined
[13:53] <SmokeMachine> xinming_: yes, I am!

[14:04] *** imcsk8 left
[14:08] <xinming_> SmokeMachine: Will Red be a more powerful DBIx::Class ORM for perl6? :-)

[14:08] <xinming_> I mean your design goal.

[14:10] <SmokeMachine> What do you mean? I plan to make is as powerful as possible...

[14:13] <SmokeMachine> xinming_: But the core way of use and how it work are different from DBIC...

[14:17] <xinming_> Ok, I tried xoo, It's good for prototyping, But lacks many features I like in DBIC

[14:17] <xinming_> So, I'll give Red a try.

[14:17] <xinming_> How do you deal with the SQL::Abstract thing in Red?

[14:17] <xinming_> Or, You don't intend to implement that ATM?

[14:19] <mst> Red is much more like a perl6 implementation of Class::DBI

[14:20] *** chloekek joined
[14:21] <timotimo> is that good or bad :)

[14:23] <mst> it's "this is cute and will be nice for trivial cases but somebody will need to write a DBIC equivalent later if you want something powerful"

[14:23] <SmokeMachine> xinming_: jonathanstowe was planning to do something like that with Red::AST

[14:24] <SmokeMachine> mst: what kind of powerful you mean?

[14:32] <mst> SmokeMachine: for a start, how do I declare multi-column keys?

[14:34] <SmokeMachine> mst: ::?class.add-pk-constraint: { .col1, .col2 }

[14:34] <mst> and a relationship to that?

[14:37] <mst> oh, you're requiring setting a dynamic variable if you want more than one database connection? how does the association to the objects persist?

[14:37] <SmokeMachine> mst: has OtherModel $.rel is relationship{ $^from.col1 == $^to.col1 && $^from.col2 == &^to.col2 } # NYI

[14:39] *** loops joined
[14:39] <SmokeMachine> m: there is the red-do... https://github.com/FCO/Red/issues/153

[14:39] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3there is the red-do... https:7⏏5//github.com/FCO/Red/issues/153␤    expecting any of:␤        colon pair␤»

[14:40] <SmokeMachine> It’s becoming core on api<2> (it was experimental)

[14:42] *** chloekek left
[14:44] <mst> having it as a dyn var rather than associated with the object is IMO a mistake

[14:44] <mst> SmokeMachine: how do I add methods to collection objects?

[14:45] <mst> $p.active-posts is neat but I really want e.g. $p.posts.active

[14:46] <SmokeMachine> mst: You can use a custom class as your ResultSeq class...

[14:46] <SmokeMachine> mst:

[14:47] <SmokeMachine> mst: like here: https://github.com/FCO/Red/blob/master/t/24-metamodel-model.t#L91

[14:51] <mst> SmokeMachine: ok. maybe everything *can* be there and I either can't find it or it's planned but NYI

[14:52] *** ravenous_ left
[14:53] <SmokeMachine> mst: I think the biggest problem with Red is that it’s not well documented yet...

[14:55] <mst> SmokeMachine: I've been reading the source as well but wasn't great at understanding the layout

[14:56] *** Ven`` left
[14:56] <SmokeMachine> mst: maybe the code need some refactoring...

[14:56] <mst> so, at this point, my only big objections are (1) using a $* for the database will, I suspect, prove a footgun (2) create should live on the collection object, not the class

[14:57] <mst> SmokeMachine: code always needs refactoring, but in this case I think the problem was me, not the code :)

[14:58] <timotimo> mst: i don't hope to find out how a human is refactored

[14:59] <mst> <@mst> meh, chainsaw one person badly enough the rest get spattered with bits

[14:59] <mst> <@mst> the survivors tend to decide to listen to you.

[14:59] <mst> <@gellyfish> ANYONE ELSE WANT TO "NEGOTIATE"?

[14:59] *** Ven`` joined
[14:59] <mst> that would be jonathanstowe and I somewhere over a decade ago :D

[15:00] <SmokeMachine> mst: There are a create there as well

[15:01] <mst> I think, eventually, you will find that Class.^create and Class.^find were a mistake. but I could be wrong, because the reasons they were a mistake in perl5 may be avoidable in perl6

[15:02] <SmokeMachine> mst: I hope so... but if not, we can change it...

[15:02] <SmokeMachine> mst: that’s why I’m using api versions...

[15:03] <mst> right

[15:03] <mst> the api version thing is a very very very good idea :D

[15:03] <AlexDaniel> heh, “"negotiate"”

[15:04] <AlexDaniel> https://www.reddit.com/r/suspiciousquotes/

[15:04] <SmokeMachine> mst: só, do you think it is/will be powerful enough?

[15:04] <mst> AlexDaniel: 5th element reference

[15:05] <mst> SmokeMachine: I don't know. But I would like to change my opinion to "there's only one way to find out, which is to try" :)

[15:05] <timotimo> https://www.reddit.com/r/PeopleFuckingDying/ - (very safe for work, and highly recommended)

[15:06] *** Ven`` left
[15:07] <AlexDaniel> oh, then "negotiate" indeed :)

[15:07] <AlexDaniel> for a second I thought somebody actually wanted to negotiate… :)

[15:09] <timotimo> seriously though, do click on that very suspicious looking link

[15:11] <mst> AlexDaniel: I've always specialised in gunboat diplomacy :D

[15:12] <AlexDaniel> timotimo: what a lie, most posts are not even about people :P

[15:13] <timotimo> you have to imagine the subjects of these posts go on to cause some people to fucking die

[15:14] <xinming_> mst: Actually, I do find Xoo is kinda like Class::DBI, I don't try Red yet, But when I use DBIx::Class, I do feel that the elegant design behind the DBIx::Class, With resultset filtering, Many "impossible" && tedious sqls are just $rs->search(xxx)->search_related(yyy)->search_related(zzz);

[15:15] <xinming_> I did a small project based on Xoo, When I write code for that, I start missing DBIC.

[15:16] <mst> I think looking at Red's ResultSeq stuff it can probably do most of that eventually.

[15:18] <xinming_> Ok, Will try that out later.

[15:56] <timotimo> when i need some OO in my life, i skip Moose and Moo and Xoo and skip straight to the Loo

[15:56] <mst> *lol*

[15:56] <timotimo> no, loo

[15:58] <mst> http://trout.me.uk/nooo.jpg

[15:59] <timotimo> oh that's cute

[16:04] *** pmurias joined
[16:07] *** antoniogamiz joined
[16:07] <antoniogamiz> o/

[16:22] <mst> \o

[16:22] <kawaii> o/

[16:23] <mst> and then they all drowned

[16:24] <timotimo> fun fact: drowning doesn't actually look like that, which causes loads of people to drown right in front of their loved ones because they don't realize what's happening

[16:24] <timotimo> "fun"

[16:26] <mst> oh, yeah, they usually go stationary don't they

[16:27] <timotimo> huh, you mean like printing paper, staples and markers?

[16:27] <timotimo> just a bad pun to lighten the mood

[16:28] <timotimo> less of a pun, more just a play on words

[16:28] <mst>     pun indented

[16:30] <timotimo> as i understand it a drowning person will do sort of a "doggie paddle", usually with their mouth going under water briefly again and again

[16:30] <timotimo> they won't have any mental capacity to speak, wave their arms, shout for help, anything like that

[16:30] <kawaii> Don't::Drown

[16:31] <timotimo> so to an uninitiated observer they'll look kind of calm, just wobbling in the water a bit, and then they're suddenly not visible any more

[16:32] <timotimo> a friend once told me that the buoys that lifeguards usually carry with them when going out for someone are partially to knock the fuck out of them so they don't try to drown the lifeguard to save themselves

[16:32] <timotimo> i'm not sure how much truth there is in the "knocking out" part

[16:33] <mst> having done lifesaving swimming training, I would not be surprised if that's been done sometimes

[16:33] <mst> "getting pulled under by the person you were trying to save and both ending up dead" is definitely a hazard

[16:34] <timotimo> for sure

[16:37] *** jmerelo joined
[16:37] <jmerelo> squashable6: status

[16:37] <squashable6> jmerelo, Next SQUASHathon in 12 days and ≈11 hours (2019-09-07 UTC-12⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:37] <tellable6> 2019-03-17T18:43:10Z #perl6 <uzl> jjmerelo: So I read over the Perl 6 project ideas for GSoC and I figured I might not be up for any of the tasks. I was particularly interested in the projects related with the ecosystem and documentation.

[16:37] <tellable6> 2019-03-17T18:43:20Z #perl6 <uzl> jjmerelo: If any, what do you think might be a good roadmap to prepare for one of these projects? I'm currently taking my first C++ based data structures class in college and also looking for an internship.

[16:37] <tellable6> 2019-07-14T09:42:20Z #perl6 <El_Che> jjmerelo: 11:40 < antoniogamiz> mmm it looks like documentation is not being rebuilt

[16:37] <tellable6> 2019-08-21T22:22:43Z #perl6 <AlexDaniel> jmerelo: is there an overview of all our gsoc projects? https://colabti.org/irclogger/irclogger_log/perl6?date=2019-08-21#l728

[16:38] <jmerelo> .tell AlexDaniel they just finished; if you mean if there's something that describes what has been done, no, there is not.

[16:38] <tellable6> jmerelo, I'll pass your message to AlexDaniel

[16:38] <AlexDaniel> .

[16:38] <jmerelo> Hi, AlexDaniel 

[16:38] <AlexDaniel> hello :)

[16:38] *** domidumont joined
[16:38] <jmerelo> Next squashathon is going to stay that way?

[16:39] <AlexDaniel> squashable6: status

[16:39] <squashable6> AlexDaniel, Next SQUASHathon in 12 days and ≈11 hours (2019-09-07 UTC-12⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:39] <AlexDaniel> I don't know

[16:40] <jmerelo> The one that's there is testneeded but I guess we'll need to have the pumpking on board, or more people on the dev team

[16:40] <AlexDaniel> there's no pumpking

[16:40] <timotimo> the pumpking has been evenly distributed

[16:41] *** [Sno] left
[16:41] <jmerelo> load-balanced pumpkinging?

[16:41] <jmerelo> Anyway

[16:42] <jmerelo> If you think it's worth the while, we can go ahead with that, we need to announce it ASAP, although I guess there'll be no p6weekly next week

[16:44] <AlexDaniel> I'd prefer a different topic, but I can't think of anything good right now

[16:45] *** pmurias left
[16:51] <SmokeMachine> AlexDaniel: jmerelo : would that be possible ask for help to document Red in a Squashathon?

[16:51] <AlexDaniel> unlikely

[16:51] <SmokeMachine> :(

[16:55] <AlexDaniel> it's just not something a random contributor will be able to do

[16:55] <AlexDaniel> I think

[16:56] <Kaiepi> doesn't it heavily deal with the MOP or something?

[16:56] <SmokeMachine> At least make it better, any people can do... (any thing is better than how it is now...

[16:57] <mst> AlexDaniel: you might be surprised

[16:58] <mst> what you'd need to do is walk somebody through using it, explaining everything, and then have them write that up

[16:58] <mst> that's how a lot of the docs for my code got written by kind people who wanted to learn

[16:58] <Kaiepi> oooo it definitely does

[16:58] <Kaiepi> documenting red could be something i could tackle once i have spare time

[16:59] <Kaiepi> not happening for at least a couple months though

[16:59] <SmokeMachine> Kaiepi: that would be awesome!

[17:01] <antoniogamiz> Kaiepi: you could use Perl6::Documentable to generate a nice gh-pages site :D

[17:04] <SmokeMachine> mst: I think that would be great not only for Red...

[17:06] <mst> SmokeMachine: it's how DBIx::Class got documented originally :)

[17:09] <jmerelo> SmokeMachine: yep, why not?

[17:09] <SmokeMachine> Maybe that would be good to use squashathon for that kind of stuff... not for Red (only) but for any module needed...

[17:09] <jmerelo> SmokeMachine: take into account that you need to be there to help contributors that might be clueless on where to start

[17:10] <jmerelo> SmokeMachine: and that you need to be available a big part of next weekend

[17:10] <SmokeMachine> jmerelo: sure!

[17:10] <jmerelo> SmokeMachine: I always say documentation is important

[17:11] <jmerelo> SmokeMachine: then why not?

[17:11] <jmerelo> SmokeMachine: can we uses tests, for instance, to document functions and what they do?

[17:11] <SmokeMachine> jmerelo: sure! I would live it!

[17:13] *** [Sno] joined
[17:13] <jmerelo> SmokeMachine: So I need you to do a couple of things

[17:14] <jmerelo> SmokeMachine: you need to add a CONTRIBUTING.md with guidelines on how to contribute in general, and in particular the documentation. A small how to will also help

[17:14] <Kaiepi> documenting the meta aspects of red would be good practice for my monad library, which will be even harder to document because it'll require at least 6 different meta-classes for monads and monad transformers by the time it's done if i'm doing things right

[17:15] <jmerelo> SmokeMachine: second, you need to open a few issues, one for every piece of Red you want documented, every module, for instance. That way, during the squashathon people can pick the issues where they are going to work with

[17:16] <SmokeMachine> jmerelo: do you know any small example of that (my English isn’t all that good)

[17:16] <jmerelo> SmokeMachine: you can look in perl6/doc themselves

[17:16] <jmerelo> SmokeMachine: there's quite an extensive CONTRIBUTING.md

[17:16] <SmokeMachine> jmerelo: https://github.com/FCO/Red/projects/2

[17:18] <jmerelo> SmokeMachine: OK, in case you decide to use a single issue, you need to create a list of all modules that need documentation so that people can check them out once it's completed

[17:18] <Kaiepi> how does the :D smiley work for instances of roles? is it because they're really instances of classes?

[17:18] <jmerelo> Kaiepi: autopunning, probably

[17:19] <Kaiepi> shit i was hoping i could avoid having to write punning

[17:19] <jmerelo> Kaiepi: punning is hard to do?

[17:19] <Kaiepi> it's a bit tricky

[17:20] <SmokeMachine> jmerelo: on that project I’ve added all issues that need documentation... is it better by module?

[17:21] <Kaiepi> also, since i want to store the values of monads in the MOP rather than having people need to make a private value attribute for every monad, it'd mean having to mix stuff into Metamodel::ClassHOW or subclassing it and using EXPORTHOW::SUPERSEDE

[17:21] <SmokeMachine> jmerelo: most of the features are spread by different modules...

[17:21] <jmerelo> SmokeMachine: the thing is that we need to make sure contributors don't trip over themselves working on the same module, that's why either different issues or a single issue with check marks is what's needed

[17:22] <Kaiepi> er, i shouldn't say every monad, stuff like Maybe's Nothing wouldn't use any

[17:22] <jmerelo> SmokeMachine: Then it's probably better if you create a different issue per feature...

[17:22] <SmokeMachine> Wouldn’t it be possible to each contributor “get” a task from the project?

[17:23] <jmerelo> SmokeMachine: yep, via issues. Tasks must be created in advance.

[17:24] <jmerelo> SmokeMachine: it's not a "raise your hands if you want to do something". It's "here're the tasks, pick whichever you want, say when you do"

[17:24] <SmokeMachine> jmerelo: like this? https://github.com/FCO/Red/projects/2

[17:25] <SmokeMachine> jmerelo: or should I create another one for that?

[17:25] <jmerelo> SmokeMachine: well, like this https://github.com/FCO/Red/issues/142

[17:25] <jmerelo> SmokeMachine: squashathons normally work on issues, not projects

[17:26] <jmerelo> SmokeMachine: this https://github.com/FCO/Red/issues/143 is probably OK for yourself, but difficult for someone not familiar with it. Besides, that's rather a request for comments that documentation

[17:26] <Kaiepi> :D working using puns also means i wrote what i have so far for handling instances of monads wrong, and would need "just" 4 meta-classes

[17:27] <jmerelo> SmokeMachine: you need to say clearly what you want. Issue x: I want to document all methods of class X

[17:27] <jmerelo> Issue y: I want to document feature X via a tutorial that shows, step by step, how to use it.

[17:27] <jmerelo> And so on...

[17:27] <Kaiepi> i assumed Metamodel::ConcreteRoleHOW would be involved somewhere but i think that's only used when adding roles to classes or something

[17:28] <jmerelo> Kaiepi: If I remember correctly, it's when you decide which one of a RoleGroup is actually instantiated within a class

[17:28] <jmerelo> Kaiepi: but there're a bunch of those and some of them are not documented. I kinda remember I documented that some time ago.

[17:29] <Kaiepi> ok so Monad::ConcreteMonadHOW shouldn't exist, since monads won't be possible to mix into anything

[17:29] <Kaiepi> (which i should probably move to MetamodelX to match the rest of the ecosystem)

[17:29] <SmokeMachine> jmerelo: ok... that makes sense ... I’ll work on that this week!

[17:29] <jmerelo> SmokeMachine: ...end

[17:30] <jmerelo> SmokeMachine: it starts next Friday, if you want to get it done, we need to announce it early on Monday

[17:31] <jmerelo> Kaiepi: maybe. Not really sure. If you need to instantiate a Monad out of a MonadGroup, you might need it.

[17:31] <timotimo> https://github.com/jesseduffield/lazydocker - damn look at this pretty thing

[17:31] <Kaiepi> there is no MonadGroup and i'm not writing one if i can get away with it

[17:31] <SmokeMachine> So I’ll do that this weekend...

[17:31] <jmerelo> timotimo: cool

[17:32] <jmerelo> SmokeMachine: great!

[17:32] <timotimo> same user has a "lazygit" CUI that does git stuff

[17:32] <jmerelo> Kaiepi: lol :-) 

[17:34] <Kaiepi> do you know if there are any monads that can take varying amounts of types?

[17:35] <Kaiepi> in haskell i mean, since i'm basing the library off how it handles them

[17:35] <jmerelo> Kaiepi: I'm not looking at it from the point of view of monads themselves, but from Perl 6 HOW's point of view. If a role can be parametrized, you need to write a way to instantiate it into a role-with-known-parameter

[17:36] <Kaiepi> how is that done with roles?

[17:37] <jmerelo> Kaiepi: using this: https://docs.perl6.org/type/Metamodel::ParametricRoleGroupHOW

[17:38] <Kaiepi> ok good, that's what i've mostly been basing MonadHOW off of

[17:38] <jmerelo> Kaiepi++

[17:39] *** Cabanossi left
[17:40] <Kaiepi> wow there's a lot to do with the MOP that still needs documenting going off that page

[17:40] <jmerelo> Kaiepi: you bet

[17:40] <jmerelo> Kaiepi: Documentation is important

[17:41] <jmerelo> Kaiepi: you know that, and I really appreciate your help there 

[17:41] *** Cabanossi joined
[17:44] <Kaiepi> documenting Metamodel::Versioning is something that sticks out to me

[17:44] <Kaiepi> it's something i could do now since the role doesn't do a whole lot

[17:44] <jmerelo> Kaiepi: most of them don't. They are not user-facing. But still interesting to know if you're into doing funky stuff with metamodels, as you do.

[17:45] <jmerelo> Kaiepi: or SmokeMachine 

[17:48] <MasterDuke> AlexDaniel, jmerelo: i had an idea for a future squashathon. the talk about coverable prompted it. how about making sure our rakudo coverage reports are up to date and then using them to drive writing roast tests?

[17:49] <MasterDuke> they provide a nice convenient metric to measure contributions against, not just number of PRs/commits, but percent of coverage increased

[17:50] <jmerelo> MasterDuke: on paper, it's a good idea. But we already know that coverage reports are not up to date... There are several *testneeded* issues, there and in roast

[17:51] <jmerelo> As matter of fact, that's the fallback option if finally we don't do Red

[17:52] <MasterDuke> yeah, we'd need to do the prep work of updating those reports. but the nice thing about them is they don't need testneeded issues to be created, people can just look at the uncovered lines

[17:53] <jmerelo> MasterDuke: right. As I say, I'm for any kind of squashathon that helps the core or the community, and that's one that's already well documented.

[17:54] <jmerelo> MasterDuke: if the coverage tests are somewhere, we could just create an issue for it and work against it. 

[17:54] <jmerelo> MasterDuke: of course, AlexDaniel might (and will) have a different opinion.

[17:54] <MasterDuke> coverage tests?

[17:55] <jmerelo> MasterDuke: sorry, I meant test coverage reports

[17:55] <AlexDaniel> well, I don't know how to make both of these ideas happen, so judge yourself

[17:55] <MasterDuke> ah. i think zoffix or samcv had them somewhere?

[17:55] <MasterDuke> or maybe timotimo?

[17:55] <AlexDaniel> so that was coverage from running roast?

[17:55] <AlexDaniel> I don't remember…

[17:56] <MasterDuke> yeah

[17:57] <MasterDuke> i think reports against moarvm for running the nqp tests are part of the ci toolchain. but not the rakudo ones for running roast

[17:57] * AlexDaniel afk

[17:59] <Kaiepi> how is :api intended to be used when used when declaring types?

[18:00] <jmerelo> Kaiepi: I guess simply increment the sequence when you change the actual API

[18:07] *** antoniogamiz left
[18:13] <Kaiepi> m: say IntStr.new: '0'

[18:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Too few positionals passed; expected 3 arguments but got 2␤  in block <unit> at <tmp> line 1␤␤»

[18:13] <Kaiepi> m: say IntStr.new: '0', 0

[18:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Type check failed in binding to parameter '$i'; expected Int but got Str ("0")␤  in block <unit> at <tmp> line 1␤␤»

[18:13] <Kaiepi> m: say IntStr.new: 0, '0'

[18:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0␤»

[18:13] <Kaiepi> m: say '0'.WHAT

[18:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Str)␤»

[18:14] <Kaiepi> when do you actually see IntStr?

[18:21] <Geth> ¦ doc: fb04d5d1f4 | (JJ Merelo)++ | xt/word-variants.t

[18:21] <Geth> ¦ doc: Expands xt to all non-method metas. Refs #2966

[18:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fb04d5d1f4

[18:22] <jmerelo> m: say <0>.WHAT

[18:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(IntStr)␤»

[18:22] <jmerelo> Kaiepi: ^^^

[18:22] <Kaiepi> ah ok

[18:23] <MasterDuke> Kaiepi: often from command line arguments

[18:29] *** domidumont left
[18:35] *** Sgeo_ joined
[18:38] <Geth> ¦ doc: JJ assigned to coke Issue Parameterization vs. parametrization https://github.com/perl6/doc/issues/2967

[18:39] *** Sgeo left
[18:57] *** pmurias joined
[19:01] *** Actualeyes joined
[19:25] *** wildtrees joined
[19:31] *** jmerelo left
[19:34] *** MilkmanDan left
[19:38] *** Xliff joined
[19:45] *** chloekek joined
[19:47] *** pmurias left
[19:48] *** pmurias joined
[19:56] *** MilkmanDan joined
[20:18] *** pecastro left
[20:22] *** pamplemousse joined
[20:33] *** Black_Ribbon joined
[20:46] *** Sgeo__ joined
[20:49] *** Sgeo_ left
[20:49] *** aborazmeh joined
[20:49] *** aborazmeh left
[20:49] *** aborazmeh joined
[20:52] *** Kaiepi left
[20:55] *** Kaiepi joined
[20:59] *** pmurias left
[21:01] *** pmurias joined
[21:10] <SmokeMachine> jmerelo: I'm still doing it... but do you think it should be something like this? https://github.com/FCO/Red/labels/Documentation

[21:10] <tellable6> SmokeMachine, I'll pass your message to jmerelo

[21:10] <SmokeMachine> thanks tellable6!

[21:10] <tellable6> SmokeMachine, It's my pleasure!

[21:17] <AlexDaniel> SmokeMachine: yes

[21:17] <AlexDaniel> SmokeMachine: that looks pretty good

[21:17] <AlexDaniel> SmokeMachine: I'd prefer instructions in every ticket, but even that is not bad

[21:18] *** lucasb left
[21:18] <SmokeMachine> AlexDaniel: Thanks!

[21:18] <AlexDaniel> I take my “unlikely” back, this should actually work

[21:18] <SmokeMachine> AlexDaniel: I'll try to add some instructions after creating everyone, what do you think?

[21:19] <SmokeMachine> AlexDaniel: What made you change your mind?

[21:19] <AlexDaniel> SmokeMachine: an issue tracker with small actionable tasks

[21:19] <SmokeMachine> :)

[21:23] *** pecastro joined
[21:24] *** pmurias left
[21:25] <AlexDaniel> SmokeMachine: it's official then: https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day#dates

[21:25] <SmokeMachine> :)

[21:26] <AlexDaniel> weekly: New squashathon soon (2019-09-07)! This time we'll be working on documentation for Red (https://github.com/FCO/Red/labels/Documentation).

[21:26] <notable6> AlexDaniel, Noted! (weekly)

[21:30] <SmokeMachine> \o/

[21:32] <AlexDaniel> SmokeMachine: btw there are these scripts: https://github.com/perl6/ecosystem-unbitrot/tree/master/scripts

[21:34] *** pamplemousse left
[21:34] <SmokeMachine> https://github.com/perl6/ecosystem-unbitrot/blob/master/scripts/populate-issues.p6#L38 ???

[21:35] <SmokeMachine> AlexDaniel: What does this scripts do?

[21:37] <AlexDaniel> SmokeMachine: one script creates a bunch of github issues using a template, another script edits the text in issues

[21:38] *** aborazmeh left
[21:39] <AlexDaniel> SmokeMachine: ./edit-issues.p6 "I know what I'm doing" YOUR-GITHUB-TOKEN-HERE 'if $title.starts-with(‘Document ’) { $body = ‘hello world’ }'

[21:40] <AlexDaniel> SmokeMachine: and you'll also need to change the url here: https://github.com/perl6/ecosystem-unbitrot/blob/e919c8cba58231c12a75e7473fc8f5f96f677735/scripts/edit-issues.p6#L6

[21:40] <AlexDaniel> my $repo = ‘FCO/Red’;

[21:41] <SmokeMachine> AlexDaniel: that way I could generate a body to all my issues?

[21:41] <AlexDaniel> SmokeMachine: yes

[21:42] <SmokeMachine> AlexDaniel: interesting...

[21:42] <SmokeMachine> I'll take a look after I finish creating them...

[21:43] *** pamplemousse joined
[21:47] <SmokeMachine> AlexDaniel: Thanks!

[21:47] <AlexDaniel> you're welcome :)

[21:52] <vrurg> SmokeMachine: You've got your own squashaton! My congratulations!

[22:07] <Xliff> Well, hell! When can I get one for Pango, GtkPlus and its ilk?! :D

[22:07] <Xliff> .oO( You'd have to release them, Dummy! )

[22:10] <vrurg> Xliff: "Oh God, why so many people win lottery, but not me?! I'm such a faithful and good person!" –– God answers: "You're, but you moron never buy a ticket!"

[22:10] <vrurg> :D

[22:10] <Xliff> vrurg: Um. That sounded like it came out of Google Translate. Do you have the original link? :)

[22:11] *** pamplemousse left
[22:11] <vrurg> Xliff: you're complumenting me because it came out of Vrurg Translate. :D I don't know if and English version of the joke exists.

[22:11] <Xliff> LOL!

[22:12] <Xliff> Has anyone here ever used GStreamer?

[22:13] <vrurg> Xliff: http://www.jokeindex.com/joke.asp?Joke=2411

[22:19] <Xliff> vrurg: Yeah. I got that.

[22:23] *** chloekek left
[22:35] <SmokeMachine> vrurg: thanks! :)

[22:36] <SmokeMachine> 136 issues until now...

[22:37] <SmokeMachine> vrurg: is there any specific thing you would like to have documented on Red?

[22:37] <vrurg> Let me see what you've got so far.

[22:38] <SmokeMachine> vrurg: https://github.com/FCO/Red/issues?q=is%3Aissue+is%3Aopen+label%3ADocumentation

[22:39] <vrurg> SmokeMachine: I'd have use of caching documented, but don't remember, if it's finalized yet.

[22:40] <SmokeMachine> vrurg: it's not invalidating the cache yet... only by time...

[22:41] <vrurg> If the interface is finalized and not gonna change – it'd be a great thing to document. 

[22:42] *** Sgeo joined
[22:42] <vrurg> Otherwise nothing comes into mind.

[22:42] <SmokeMachine> vrurg: https://github.com/FCO/Red/issues/226

[22:42] <SmokeMachine> vrurg: thanks! :)

[22:44] *** Sgeo__ left
[22:44] <vrurg> SmokeMachine: welcome! 

[22:48] <vrurg> My client has eaten a message... 

[22:49] *** pamplemousse joined
[22:49] <vrurg> SmokeMachine: the squashaton is gonna be a really great thing to the project!

[22:49] <SmokeMachine> vrurg: I agree... and I hope so!

[22:52] *** pecastro left
[23:03] *** Sgeo_ joined
[23:06] *** Sgeo left
[23:41] *** aindilis left
[23:45] *** aindilis joined
[23:47] *** pamplemousse left
[23:53] *** Xliff left
