[00:01] *** zacts joined
[00:06] *** ufobat left
[00:13] *** ufobat joined
[00:37] *** Actualeyes left
[01:07] *** zachk left
[01:08] *** AlexDani` joined
[01:12] *** AlexDaniel left
[01:13] *** Cullran joined
[01:13] *** Cullran left
[01:39] *** ryn1x joined
[01:40] *** notagoodidea left
[01:43] *** markoong left
[01:43] *** markoong joined
[01:48] *** markoong left
[01:49] *** isomorphismes joined
[01:50] <leont> m: sub foo () { given 1 { state $foo = 1; say $foo++ } }; foo; foo; foo

[01:50] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´1‚ê§1‚ê§1‚ê§¬ª

[01:52] <tbrowder> i‚Äôm sorry to hear AlexDaniel is leaving his post as release manager. his firm but patient hand on the stick (as ancient flyers say) helped me to get a grip on reality more times than i care to admit. heact like we hop

[01:53] <leont> m: sub foo () { if True { state $foo = 1; say $foo++ } }; foo; foo; foo

[01:53] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´1‚ê§1‚ê§1‚ê§¬ª

[01:53] <leont> That is ‚Ä¶ somewhat surprising behavior of state

[01:54] <timotimo> state is about cloning of blocks, i'd say it's more consistent that way

[01:54] <timotimo> otherwise you'd have to learn what causes a block to be cloned. for does, if doesn't?

[01:54] <tbrowder> to me he appeared to act like the judge we hope all will be: fair, impartial, demanding of the truth.

[01:54] <tbrowder> AlexDaniel: I salute you!

[01:54] <leont> timotimo: I see the argument, but this definitely needs to be documented

[01:55] <leont> It's quite surprising when you expect it to work like static in other languages

[01:55] <timotimo> ah, yes, documentation is surely necessary

[01:55] <leont> All the examples in the documentation are top-level, so this isn't addressed

[02:00] *** zacts left
[02:00] *** Kaiepi left
[02:00] *** Kaiepi joined
[02:06] *** leont left
[02:24] *** zacts joined
[02:54] <masak> I think I've asked this before, but never really gotten an answer: why is the rule spelled `EXPR` (capitalized) and not `expr`? more to the point, what is it that makes `EXPR` exceptional an worthy of capitalization, like `BEGIN` or `MAIN`?

[02:56] *** w17t left
[02:57] <MasterDuke> i have no idea the answer, but i'd ask if it's the same with TOP?

[03:05] <masak> TOP is easy to explain: it's called automatically by .parse et al :)

[03:05] <masak> kinda similar to how MAIN is called automatically

[03:08] *** zif`ath joined
[03:08] *** zif`ath left
[03:14] <MasterDuke> very true

[03:21] *** zacts left
[03:29] *** zacts joined
[03:30] *** xinming_ left
[03:31] *** xinming_ joined
[03:35] *** zacts left
[03:39] *** Krudrod joined
[03:39] *** Krudrod left
[03:47] *** ferreira1 left
[03:58] *** mowcat left
[04:08] <namibj> so state is to be used if a lambda, which i create once and then give to more than one future caller, should share a state between these instances of it, even if they happen to be pass-by-value?

[04:09] *** jme` joined
[04:15] *** zacts joined
[04:21] *** uzl joined
[04:22] <uzl> m: my @a[2] = (1, 2);

[04:22] <camelia> rakudo-moar df96fa0f3: ( no output )

[04:22] <uzl> m: my @a[2] = (1, 2); say @a;

[04:22] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´[1 2]‚ê§¬ª

[04:22] <uzl> m: my @a[2] = (1, 2); say @a; my @b = Array.new(2);

[04:22] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´[1 2]‚ê§¬ª

[04:22] <uzl> m: my @a[2] = (1, 2); say @a; my @b = Array.new(2); say @b;

[04:22] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´[1 2]‚ê§[2]‚ê§¬ª

[04:23] <uzl> m: my @a[2] = (1, 2); say @a; my @b = Array[2].new; say @b;

[04:23] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can not parameterize Array with 2‚ê§at <tmp>:1‚ê§------> 3@a[2] = (1, 2); say @a; my @b = Array[2]7‚èè5.new; say @b;‚ê§¬ª

[04:24] <uzl> Can I create a fixed-size array using the Array.new constructor?

[04:27] *** uzl left
[04:27] <Geth> ¬¶ doc: bd7d510d21 | (Bruce Gray)++ | 20 files

[04:27] <Geth> ¬¶ doc: Fix typos

[04:27] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/bd7d510d21

[04:29] *** ferreira joined
[04:37] <MasterDuke> m: my @b[2] .= new(:2shape, 2,3); say @b.perl

[04:37] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´Array.new(:shape(2,), [2, 3])‚ê§¬ª

[04:37] <MasterDuke> m: my @b[2] .= new(:2shape, 1,2,3); say @b.perl

[04:37] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´Index 2 for dimension 1 out of range (must be 0..1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:39] <MasterDuke> .tell uzl you can find examples https://github.com/perl6/roast/blob/master/S02-types/array-shapes.t and https://github.com/perl6/roast/blob/master/S06-signature/shape.t

[04:39] <yoleaux> MasterDuke: I'll pass your message to uzl.

[04:44] *** volkov joined
[05:10] *** w17t joined
[05:14] *** molaf joined
[05:29] *** cpan-p6 joined
[05:29] *** cpan-p6_ left
[05:40] <sno> .tell timotimo I used most examples from Rosettacode - nothing self created beside one exception which I would like to discuss with lizmat on next niederrhein.pm first :)

[05:40] <yoleaux> sno: I'll pass your message to timotimo.

[05:47] *** zacts left
[05:57] *** curan joined
[05:57] <SmokeMachine> m: my @a[2] = 1,2; dd @a

[05:57] <camelia> rakudo-moar df96fa0f3: OUTPUT: ¬´Array element = Array.new(:shape(2,), [1, 2])‚ê§¬ª

[06:09] *** irdr_ left
[06:11] *** sno left
[06:11] *** irdr joined
[06:14] *** Sgeo_ left
[06:14] *** Sgeo_ joined
[06:29] *** sno joined
[06:33] *** sauvin joined
[06:33] *** molaf left
[07:06] *** zacts joined
[07:12] *** domidumont joined
[07:16] *** ravenousmoose joined
[07:30] *** vrurg left
[07:34] *** abraxxa joined
[07:39] *** isomorphismes left
[08:08] *** Kaiepi left
[08:08] *** Kaiepi joined
[08:09] *** zacts left
[08:10] *** sftp left
[08:13] *** cpan-p6 left
[08:13] *** cpan-p6 joined
[08:20] *** rindolf joined
[08:26] *** zakharyas joined
[08:32] *** dakkar joined
[08:47] *** kriztmark joined
[08:49] <kriztmark> hello aliens

[08:49] <kriztmark> whats wrong on the other side

[08:53] *** sftp joined
[08:57] <moritz> the gras is too green

[08:57] <Kaiepi> stayed up too late coding

[08:58] <El_Che> they don't have cokies

[08:58] <El_Che> o

[08:59] *** volkov left
[09:02] *** AlexDani` is now known as AlexDaniel

[09:03] *** lizmat_ joined
[09:03] <Kaiepi> i'm thinking of turning the crypt::mode library i was writing into a general crypto library rather than one solely dedicated to abstracting block cipher modes from other modules

[09:04] <Kaiepi> mainly because it turned crypt::cast5 into this https://hastebin.com/exixeluzod.pl

[09:05] *** kriztmark left
[09:05] <Kaiepi> and it's picky about how you write your c, which would make api changes complete hell

[09:06] *** lizmat left
[09:14] *** ufobat_ joined
[09:23] *** Kaiepi left
[09:27] *** Kaiepi joined
[09:33] *** kensanata joined
[09:34] <AlexDaniel> squashable6: status

[09:34] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà0 hours (2019-02-09 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:34] <AlexDaniel> .tell jmerelo ahem‚Ä¶ so??

[09:34] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[09:38] *** nevada1 joined
[09:39] <El_Che> AlexDaniel: I saw your passing the release manager hat soon. Thx for the great job!

[09:39] <AlexDaniel> thank you!

[09:40] *** kriztmark joined
[09:42] <nevada1> Hey, Windows user here. I'm looking for a Perl6 module that would allow me to load an image and access its pixels' channels data. I'm trying to build a small lsb image steganography tool.

[09:46] <AlexDaniel> nevada1: what about OpenCV module? https://github.com/azawawi/perl6-opencv

[09:47] <AlexDaniel> I haven't tried using OpenCV from perl¬†6, but it does give you a way to read and write images, and it's possible to access the pixels

[09:48] <nevada1> Thanks. I would be so thrilled if this worked.

[09:48] <AlexDaniel> nevada1: in the past I also did `use Image::Magick:from<Perl5>;` for one of my projects https://github.com/AlexDaniel/orgsleep

[09:57] *** pecastro joined
[10:04] <nevada1> Zef install won't do because it's missing the DLL, yet the repo mentions that a precompiled 64-bit windows DLL binary is already provided.

[10:05] <cpan-p6> New module released to CPAN! Staticish (0.0.7) by 03JSTOWE

[10:07] <namibj> nevada1: try to check if the dll is there wsomewhere where the code is hosted, or whether it's mentioned in some readme how to compile yourself (not that you'll do so, but it often helps with finding out why it's not working right now). I can recommend opencv though for accessing pixel data; the API I remember is really nice.

[10:08] <nevada1> Yeah, it would be ideal if I got it to work. I worked a bit with OpenCV in C++ and Java, but never thought Perl6 had a wrapper for it.

[10:16] <AlexDaniel> I hope someone starts putting more love into the OpenCV module‚Ä¶ I have some opencv stuff written in python, and also some in c++ (because apparently python bindings are not full enough)

[10:16] <AlexDaniel> I'd port it all to perl¬†6 in a heartbeat

[10:20] *** lizmat joined
[10:21] *** woolfy1 joined
[10:22] *** woolfy left
[10:24] *** lizmat_ left
[10:26] *** sena_kun joined
[10:32] *** Jonathan5784 joined
[10:34] <nevada1> Found the DLL in an earlier commit. Apparently at some random point in time, the creator just dumped the resources folder.

[10:36] *** Jonathan5784 left
[10:38] <woolfy1> Claudio Ramirez: we had cookies at FOSDEM, and they were Camelia cookies, and they were gone in less than 2 hours.  Next time I have to make a thousand cookies to lure people to our side!

[10:40] <moritz> do you have a cookie cutter in Camelia shape?

[10:41] <moritz> I'd love to have such a thing :)

[10:41] <lizmat> moritz: yeah, we still have 1 left (for ourselves)

[10:41] <lizmat> but it's 3d printed, and I understand the layout should be on thingyverse soon

[11:07] *** scimon joined
[11:07] *** kawaii joined
[11:08] <Altreus> Is anyone available to have a shufty at my problem here? https://gist.github.com/Altreus/09df5154ce5f5b304b7cd368bbf5dd74

[11:08] <Altreus> I don't understand why the note is run despite the next

[11:09] <lizmat> could you try naming the label something different than "match" ?

[11:09] <scimon> Ok. This weekend I'm going to make a new VM and try doing a manual Perl6 build + run roast. If I can manage that without too much hassle I'll maybe able to pick up being release manager. But I don't want to make any promises I find too hard to keep.

[11:10] <Altreus> okay :)

[11:11] <Altreus> lizmat: I used ¬´xform¬ª, same result

[11:11] <Altreus> what if I use caps

[11:11] <lizmat> ok, that was a long shot

[11:11] <lizmat> no, that shouldn't make a difference, I don't think

[11:11] <Altreus> same with caps

[11:11] <chee> is there an expectation that files in `./lib` will load using `use`? i keep having to add `use lib "lib"` to the front of scripts

[11:12] <lizmat> Altreus: hmmm... could you try running it with --optimize=0 ?

[11:12] <lizmat> also: which version of rakudo are you using?

[11:12] <Altreus> chee: ./lib is not in the default search paths. You should use perl6 -I lib script.p6 until you've installed your distribution

[11:12] <Altreus> righto, hold on

[11:12] *** reach_satori left
[11:13] <lizmat> I seem to recall that jnthn fixed something in that area last week

[11:13] <Altreus> This is Rakudo Star version 2018.04.1 built on MoarVM version 2018.04.1 implementing Perl 6.c.

[11:13] <chee> Altreus: cool, thank-you ^.^

[11:13] *** reach_satori joined
[11:13] <Altreus> wait, 04?

[11:13] <Altreus> I'm sure I installed a later one than that

[11:13] <lizmat> that's pretty old  :)

[11:13] <scimon> Yeah

[11:13] <Altreus> It took long enough

[11:13] <Altreus> I must have done that wrong. Let me install the version I thought I was installing...

[11:17] *** cpan-p6 left
[11:17] *** cpan-p6 joined
[11:18] <Altreus> oh I just got hit by how much installing stuff that is -_-

[11:18] <Altreus> can I export my currently installed modules so I can pipe it to zef after I replace rakudo?

[11:18] <Altreus> er, a list of them

[11:26] <lizmat> if it is a replacement of the current install, you shouldn't have to do anything

[11:27] <lizmat> it will recompile installed modules as you need them if they weren't precompiled for the new Rakudo version yet

[11:27] * lizmat has like 10 new versions of Rakudo a day, and is very glad she doesn't have to re-install anything

[11:41] *** kriztmark left
[11:52] <Altreus> ah smart

[11:53] <Altreus> if I just re-run the commands with a different tarball it should Just Work then?

[11:54] * lizmat never runs with tarballs

[11:54] <lizmat> so I'm not 100% sure, but I think you should be ok then

[11:56] *** markoong joined
[11:56] <namibj> is there any sane way to get perl6 in termux on android? it's specifically armv8 with weird system paths

[11:58] <namibj> Altreus: go the easy eay. untarball, then do the install-moar config option.

[11:58] <namibj> the target path will be hardcoded though, so be careful...

[12:02] *** leont joined
[12:12] *** kurahaupo_ joined
[12:15] *** kurahaupo left
[12:24] *** reach_satori left
[12:25] *** reach_satori joined
[12:26] <Altreus> OK I upgraded to 2018.10

[12:26] <Altreus> according to perl6 -v

[12:26] <Altreus> same behaviour though

[12:28] <lizmat> Altreus: yeah, if it is the bug that jnthn fixed the other day, you would need to git clone the repo and install from that

[12:29] <Altreus> scary :o

[12:32] <lizmat> Altreus: the test.ofx file seems to be missing from the gist ?

[12:32] <lizmat> or is that the xml file ?

[12:33] <lizmat> ah, it is

[12:36] *** zakharyas left
[12:37] <lizmat> Altreus: on HEAD, I get the same output that you do

[12:37] *** saki joined
[12:37] *** saki left
[12:37] *** nevada1 left
[12:38] <lizmat> however, it only gets into the inner if once, and then correctly goes to the next iterationn afaics

[12:39] *** isomorphismes joined
[12:39] <lizmat> Altreus: so it feels like some sort of logic issue in your program to me

[12:39] *** saki joined
[12:40] *** saki left
[12:46] *** saki joined
[12:46] *** saki left
[12:47] <Altreus> my output shows at least that iteration 1 hits both the stanza output and the note

[12:48] <Altreus> hmm

[12:48] <Altreus> wait, if it only gets to the inner if once, how does it produce both MARKS&SPENCER and WAITROSE stanzas?

[12:49] <Altreus> ... and why do I get two 0s

[12:49] <Altreus> that's strange. I'm definitely going to have to hack at this

[12:50] <lizmat> Altreus: /me is going to be afk for at least the next 10 hours

[12:56] *** saki joined
[12:56] *** saki left
[12:59] *** ChoHag joined
[13:03] <timotimo> Altreus: can you try --optimize=0 on the perl6 command? perhaps our for-loop optimization is screwing something up somehow

[13:03] <yoleaux> 05:40Z <sno> timotimo: I used most examples from Rosettacode - nothing self created beside one exception which I would like to discuss with lizmat on next niederrhein.pm first :)

[13:12] *** saki joined
[13:14] <Altreus> duh

[13:14] <Altreus> obviously I should be skipping to the next *transaction*

[13:14] <Altreus> not to the next *transformation*

[13:14] <Altreus> only one of those is likely to match

[13:14] <Altreus> but when I find one I'm done

[13:14] <Altreus> liz was right of course :)

[13:15] <Altreus> thanks for everyone's eyes

[13:15] *** ChoHag_ joined
[13:16] *** ChoHag left
[13:17] *** kawaii left
[13:22] <Altreus> I do have a new question about the NEXT phaser though https://gist.github.com/Altreus/b624700c3675449feedf22f5c7a64c52

[13:22] <Altreus> eh

[13:22] <Altreus> actually I should check with the latest master before I claim this is a problem

[13:24] <Altreus> BTW it seems like neither the homepage nor the downloads page at perl6.org actually link to the github

[13:26] *** notagoodidea joined
[13:27] <scimon> Well they will generally be aimed at general users who are looking for stability over cutting edge. 

[13:32] *** MasterDuke left
[13:41] <Altreus> ya but open-source projects should link to the source as a matter of course IMO

[13:43] *** w17t left
[13:46] *** lucasb joined
[13:50] *** lizmat left
[13:53] *** mowcat joined
[13:57] <ufobat> m: say '\'

[13:57] <camelia> rakudo-moar 37ce147c8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3say '\'7‚èè5<EOL>‚ê§    expecting any of:‚ê§        argument list‚Ä¶¬ª

[13:57] <ufobat> m: say '\\'

[13:57] <camelia> rakudo-moar 37ce147c8: OUTPUT: ¬´\‚ê§¬ª

[13:58] <ufobat> oh i didnt know i need to quote that

[13:58] <moritz> m: say Q'\'

[13:58] <camelia> rakudo-moar 37ce147c8: OUTPUT: ¬´\‚ê§¬ª

[13:58] <moritz> that's the only way to avoid having to quote a backslash, iirc

[13:59] <ufobat> do i need to do that in regexes as well

[13:59] <ufobat> like rx/ '\\' / for a single \

[13:59] <moritz> m: / '\' /

[13:59] <camelia> rakudo-moar 37ce147c8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3/ '\' /7‚èè5<EOL>‚ê§    expecting any of:‚ê§        single quotes‚Ä¶¬ª

[13:59] <moritz> m: / '\\' /

[13:59] <camelia> rakudo-moar 37ce147c8: ( no output )

[14:00] <moritz> m: / \\ /

[14:00] <camelia> rakudo-moar 37ce147c8: ( no output )

[14:00] <ufobat> that will be confusing in my grammar :-(

[14:00] <moritz> seems like "yes"

[14:02] <timotimo> put a backslash into a variable and use that :)

[14:03] <ufobat> const \backslash = '\\'; # like that?

[14:03] <timotimo> no, needs a $ so that the regex slang will interpolate it

[14:04] <timotimo> otherwise would have to need $(...)

[14:04] *** zakharyas joined
[14:08] <timotimo> also, a slang could be built that makes a literal backslash available via some extra syntax

[14:12] <jnthn> Or just wrote a token bs { \\ } and do <.bs> :)

[14:12] <jnthn> *write

[14:12] *** reach_satori_ joined
[14:14] *** reach_satori left
[14:16] <ufobat> thats good :)

[14:23] *** vrurg joined
[14:29] *** mowcat left
[14:33] <moritz> but please name it <.backslash>, not <.bs> :D

[14:33] <moritz> mind the maintainer :)

[14:34] <moritz> who might not want all that bs

[14:34] *** cpan-p6_ joined
[14:35] *** curan left
[14:40] *** AlexDani` joined
[14:40] *** AlexDaniel left
[14:40] *** AlexDani` is now known as AlexDaniel

[14:41] <Altreus> 6.d has fixed significant issues in our discord bot

[14:41] <Altreus> so ... very pleased :D

[14:41] <Altreus> excellent work

[14:43] *** cpan-p6 left
[14:44] <timotimo> Altreus: did you see the perl6 discord?

[14:44] <jnthn> Altreus: Quite possibly it's the non-blocking await/react

[14:45] <jnthn> Though could be other things too

[14:45] <jnthn> Altreus: Does that mean I've a problem less to look at? :)

[14:45] <Altreus> jnthn: it could be so

[14:45] <Altreus> it could also just be temporal and actually it's still broken :D

[14:45] <Altreus> timotimo: no, what is this?

[14:46] <timotimo> https://discord.gg/tbNrjc

[15:07] *** kurahaupo_ left
[15:07] *** skids joined
[15:07] *** kurahaupo joined
[15:12] *** samcv left
[15:13] *** samcv joined
[15:14] *** MilkmanDan left
[15:15] *** MilkmanDan joined
[15:16] *** volkov joined
[15:21] *** saki left
[15:24] *** w17t joined
[15:25] *** kensanata left
[15:26] *** ChoHag_ left
[15:27] *** ChoHag joined
[15:40] *** volkov left
[15:49] <Geth> ¬¶ doc: 5d80ef5bc5 | Coke++ | doc/Language/nativecall.pod6

[15:49] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[15:49] <Geth> ¬¶ doc: don't try to test missing library

[15:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5d80ef5bc5

[15:56] *** lucasb left
[16:09] *** zacts joined
[16:14] *** ravenousmoose left
[16:16] *** jmerelo joined
[16:23] *** domidumont left
[16:35] *** vrurg left
[16:41] *** ufobat__ joined
[16:41] *** markoong left
[16:41] *** markoong joined
[16:42] *** ufobat_ left
[16:42] *** ufobat_ joined
[16:42] *** markoong left
[16:42] *** ufobat left
[16:44] *** markoong joined
[16:44] *** jme` left
[17:02] *** PavelB left
[17:02] *** PavelB joined
[17:22] *** MilkmanDan left
[17:23] *** MilkmanDan joined
[17:27] *** scimon left
[17:28] *** dakkar left
[17:41] <Geth> ¬¶ doc: 048a52a7a2 | cfa++ | 6 files

[17:41] <Geth> ¬¶ doc: Spelling/typo fixes.

[17:41] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/048a52a7a2

[17:50] <Geth> ¬¶ doc: f650dfee1c | cfa++ | 10 files

[17:50] <Geth> ¬¶ doc: Further spelling/typo fixes.

[17:50] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f650dfee1c

[17:57] *** leont left
[17:57] *** ravenousmoose joined
[17:59] *** molaf joined
[18:01] *** vrurg joined
[18:14] *** ravenousmoose left
[18:15] *** robertle joined
[18:16] *** notagoodidea left
[18:19] *** cpan-p6_ left
[18:20] *** cpan-p6 joined
[18:20] *** zacts left
[18:29] *** rindolf left
[18:30] *** skids left
[18:32] *** skids joined
[18:42] *** Kaiepi left
[18:45] <Geth> ¬¶ doc: 4127892270 | cfa++ | xt/aspell.t

[18:45] <Geth> ¬¶ doc: Re-enable the spelling test.

[18:45] <Geth> ¬¶ doc: 

[18:45] <Geth> ¬¶ doc: This has been broken since 6a69c0b (May 2018); awk's `gsub` returns

[18:45] <Geth> ¬¶ doc: the replacement count, not the substituted string, so we were

[18:45] <Geth> ¬¶ doc: spellchecking integers rather than doc content.

[18:45] <Geth> ¬¶ doc: 

[18:45] <Geth> ¬¶ doc: This commit also drops deletion of `:` to prevent numerous false

[18:45] <Geth> ¬¶ doc: positives from type smilies.  Backslash is still stripped per #975.

[18:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4127892270

[18:47] <jmerelo> .seen dfa

[18:47] <yoleaux> 09:34Z <AlexDaniel> jmerelo: ahem‚Ä¶ so??

[18:47] <yoleaux> I haven't seen dfa around.

[18:47] <jmerelo> .seen cfa

[18:47] <yoleaux> I saw cfa 4 Feb 2019 23:57Z in #perl6: <cfa> enh

[18:48] <jmerelo> .tell cfa good catch with the awk bug. To be fair, it was broken before that. It fixed something, broke something else...

[18:48] <yoleaux> jmerelo: I'll pass your message to cfa.

[18:49] *** cfa joined
[18:49] <cfa> o/

[18:49] <yoleaux> 5 Feb 2019 07:28Z <jmerelo> cfa: I run the profiler, it's not very helpful. It's allocating lots of array, and using 20% of the time garbage-collection. But arrays have lexical scope, so I don't get what's the matter.

[18:49] <yoleaux> 18:48Z <jmerelo> cfa: good catch with the awk bug. To be fair, it was broken before that. It fixed something, broke something else...

[18:49] *** lucasb joined
[18:49] <cfa> jmerelo: noted

[18:49] <jmerelo> .tell AlexDaniel I've been _very_ busy with the GSoC

[18:49] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[18:49] <cfa> jmerelo: i was just confused by the lack of spelling errors in the test suite; this is just from git blame

[18:49] <cfa> jmerelo: didn't mean to, er, cfa blame you

[18:50] <cfa> anyway, there're a lot of aspell complaints now :)

[18:50] <jmerelo> cfa: I blame myself, don't worry.

[18:50] <cfa> :)

[18:51] <jmerelo> cfa: as I said, good job. I would have said it in the comment to the commit, but that seems to annoy people, so I do it here :-)

[18:51] <cfa> np

[18:51] <jmerelo> cfa: also, in general, great job you're doing on the doc site 

[18:51] <cfa> quite a few candidates to add to our local wordlist but i don't have bandwidth for the next few days

[18:51] <cfa> jmerelo: oh, ta

[18:55] *** zakharyas left
[18:58] <cfa> jmerelo: you might still want to strip :, not sure

[18:58] <cfa> it's just that we get lots of complaints aobut IntD etc.

[18:58] <cfa> which doesn't seem ideal

[18:58] <AlexDaniel> .

[18:58] <yoleaux> 18:49Z <jmerelo> AlexDaniel: I've been _very_ busy with the GSoC

[18:58] <AlexDaniel> oh right, gsoc‚Ä¶

[18:58] <cfa> jmerelo: so i left it as \ removal

[18:58] <AlexDaniel> jmerelo: so what do we do with squashathon yet?

[18:59] <AlexDaniel> s/yet// :D

[19:00] <AlexDaniel> jmerelo: I don't know, maybe the alternative is to cancel it this month (because fosdem and gsoc)

[19:01] <AlexDaniel> jmerelo: what I had in mind is that you could take the output from Blin and populate the issue tracker with that

[19:02] <AlexDaniel> most of the modules are installable now (compared to the previous unbitrot squashathon), so it will be more manageable

[19:03] <jmerelo> AlexDaniel: I'm checking it out now

[19:03] <jmerelo> AlexDaniel: I don't think we should cancel.

[19:03] <jmerelo> AlexDaniel: If we don't have the automatic population, we'll do it by hand. Just check out modules that are failing.

[19:03] <AlexDaniel> jmerelo: edit-issues.p6 is not going to work, populate-issues.p6 is also not good enough

[19:03] <jmerelo> AlexDaniel: Right.

[19:04] <jmerelo> AlexDaniel: we need first a mapping from module to issues

[19:04] <jmerelo> AlexDaniel: there might be some casses where issues have not been created yet.

[19:04] <AlexDaniel> doing it by hand is a downgrade from the previous unbitrot squashathon‚Ä¶

[19:04] *** remi_ness joined
[19:04] <jmerelo> AlexDaniel: We can start the squashathon by creating the unbitrot script

[19:05] <AlexDaniel> jmerelo: check out this script: https://github.com/perl6/whateverable/blob/master/maintenance/pull-gh

[19:06] *** sno left
[19:06] <jmerelo> AlexDaniel: Dealing with issues is no big deal.

[19:07] <AlexDaniel> jmerelo: well, with this script you can see which tickets already exist

[19:07] <jmerelo> AlexDaniel: OK, I'll start with that

[19:07] <AlexDaniel> I believe it saves every issue as a json file, or something like that

[19:08] <jmerelo> But first, we don't cancel.

[19:08] <jmerelo> There are still some issues outstanding from the previous unbitrot

[19:08] <jmerelo> In Spain we say "the best is the enemy of the good enough".

[19:09] <AlexDaniel> ok, I'm fine with that, and I'll be able to give you some hints

[19:09] <AlexDaniel> but likely not write code‚Ä¶

[19:09] <jmerelo> So, admitting it would be the best to have a great automatic script (which I should have done ages ago), the "good enough" is let's work with the existing issues, and let's automate unbitrotting for next unbitrot

[19:09] <jmerelo> Also, the previous toast is, well, toast, right?

[19:10] <jmerelo> AlexDaniel: right, latest update was 2018.06

[19:10] <jmerelo> So, toast.

[19:10] *** satori__ joined
[19:10] <AlexDaniel> that instance was maintained by Zoffix, toaster itself is fine

[19:11] <AlexDaniel> but we don't need really need toaster, we have blin

[19:11] *** rindolf joined
[19:11] <AlexDaniel> s/need// :)

[19:11] <AlexDaniel> jmerelo: let me get this straight

[19:11] <AlexDaniel> jmerelo: using that script that I linked, you will get a directory with JSON files, one json file per issue

[19:12] <AlexDaniel> jmerelo: I can also give you the output file from Blin

[19:12] <AlexDaniel> it is just `ModuleName ‚Äì Status`, one per line

[19:12] *** reach_satori_ left
[19:13] <jmerelo> AlexDaniel: issues are no big deal. As I said, I got my own scripts which I did for the TPF grant. But the ModuleName-Status would be great.

[19:13] <AlexDaniel> so, just to understand it correctly, what's the reason exactly why we can't update the status of tickets automatically?

[19:14] <jmerelo> AlexDaniel: no reason, just I need to write the script.

[19:14] <AlexDaniel> you also have this script: https://github.com/perl6/ecosystem-unbitrot/blob/master/edit-issues.p6

[19:14] <AlexDaniel> which edits issues

[19:14] <AlexDaniel> and this one that submits new ones: https://github.com/perl6/ecosystem-unbitrot/blob/master/populate-issues.p6

[19:14] <AlexDaniel> just glue it all together?

[19:15] <jmerelo> AlexDaniel: yep. But it _needs_ to be done. I already checked that out, see the comments in the issues.

[19:15] <jmerelo> For the time being, give me the outputfile or upload it to the unbitrot repo

[19:15] *** zacts joined
[19:18] <AlexDaniel> jmerelo: https://gist.github.com/AlexDaniel/e7b152fd935cb9a3d80eb38b9c28894b

[19:20] <Geth> ¬¶ ecosystem-unbitrot: 5b3585a5bd | (JJ Merelo)++ | data/blin-output.txt

[19:20] <Geth> ¬¶ ecosystem-unbitrot: Adds data to populate issues. This should be updated to the latest version

[19:20] <Geth> ¬¶ ecosystem-unbitrot: review: https://github.com/perl6/ecosystem-unbitrot/commit/5b3585a5bd

[19:20] <jmerelo> AlexDaniel: ^^^

[19:20] <AlexDaniel> ‚Ä¶ I‚Ä¶ don't see how it helps‚Ä¶

[19:24] <AlexDaniel> also keep in mind that ‚ÄúBisected‚Äù lines are outdated

[19:24] *** sauvin left
[19:25] <AlexDaniel> I can run it again, of course‚Ä¶ if there's anything we can feed the output to

[19:26] *** cfa left
[19:27] <jmerelo> AlexDaniel: no problem. It needs to be somewhere.

[19:30] *** zachk joined
[19:30] <Geth> ¬¶ ecosystem-unbitrot: 074d6b4694 | (JJ Merelo)++ | 2 files

[19:30] <Geth> ¬¶ ecosystem-unbitrot: Spins off and tests

[19:30] <Geth> ¬¶ ecosystem-unbitrot: review: https://github.com/perl6/ecosystem-unbitrot/commit/074d6b4694

[19:35] *** isomorphismes left
[19:38] *** domidumont joined
[19:39] *** Ven`` joined
[19:41] *** domidumont left
[19:41] <Geth> ¬¶ ecosystem-unbitrot: d12dfac5f2 | (JJ Merelo)++ | 4 files

[19:41] <Geth> ¬¶ ecosystem-unbitrot: More tests

[19:41] <Geth> ¬¶ ecosystem-unbitrot: review: https://github.com/perl6/ecosystem-unbitrot/commit/d12dfac5f2

[19:43] <Geth> ¬¶ doc: 86f72e0476 | cfa++ | 2 files

[19:43] <Geth> ¬¶ doc: Spelling: add a few words to {code,words}.pws

[19:43] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/86f72e0476

[19:45] <Geth> ¬¶ doc: ea52bc10c2 | cfa++ | 2 files

[19:45] <Geth> ¬¶ doc: Fix typos.

[19:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ea52bc10c2

[19:47] *** Kaiepi joined
[19:56] *** zachk left
[19:56] *** zachk joined
[19:57] <Geth> ¬¶ ecosystem-unbitrot: b2711e8303 | (JJ Merelo)++ | 2 files

[19:57] <Geth> ¬¶ ecosystem-unbitrot: Adds test for getting modules

[19:57] <Geth> ¬¶ ecosystem-unbitrot: review: https://github.com/perl6/ecosystem-unbitrot/commit/b2711e8303

[19:57] <jmerelo> AlexDaniel: OK, moving forward.

[19:57] <jmerelo> squashable6: status

[19:57] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon in ‚âà14 hours (2019-02-09 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:57] <jmerelo> Yay!!!

[19:57] * jmerelo goes AFK for today.

[19:58] *** jmerelo left
[19:58] *** sno joined
[20:07] *** remi_ness left
[20:13] *** andrzejku joined
[20:13] <andrzejku> hi :)

[20:14] <andrzejku> I hadn't time to learn Perl6 last time

[20:14] *** ferreira left
[20:14] <andrzejku> but when I am tired as fuck then I think about learning it again :)

[20:17] <Ven``> :+1: definitely go for it

[20:19] *** drolax joined
[20:25] *** dvdl joined
[20:25] *** drolax left
[20:30] *** rindolf left
[20:32] *** rindolf joined
[20:33] *** Kaiepi left
[20:34] *** Kaiepi joined
[20:43] <cpan-p6> New module released to CPAN! Lumberjack (0.0.7) by 03JSTOWE

[20:56] *** dct_ joined
[21:02] *** dct_ left
[21:05] *** kurahaupo_ joined
[21:06] *** kurahaupo left
[21:06] *** kurahaupo_ left
[21:06] *** kurahaupo joined
[21:09] *** ferreira joined
[21:12] *** zacts left
[21:26] <andrzejku> oh shit

[21:26] <andrzejku> make: *** No rule to make target '3rdparty/cmp/cmp.h', needed by 'src/main.o'.  Stop.

[21:32] <andrzejku> moarvm 3rd are empty

[21:36] <sena_kun> andrzejku, are you sure you need to build from sources?

[21:37] <Kaiepi> do git submodule update --init --recursive

[21:37] <Kaiepi> if 3rdparty is empty

[21:37] *** dvdl left
[21:38] <Kaiepi> but yeah, do you need to build from source? it's not always stable between releases

[21:41] *** andrzejku left
[21:43] <Geth> ¬¶ Blin: 57c07072cf | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Blin/Processing.pm6

[21:43] <Geth> ¬¶ Blin: Save both old and new logs separately

[21:43] <Geth> ¬¶ Blin: review: https://github.com/perl6/Blin/commit/57c07072cf

[22:03] *** cpan-p6_ joined
[22:04] *** cpan-p6 left
[22:05] <Geth> ¬¶ doc: e9b367f3b0 | cfa++ | 2 files

[22:05] <Geth> ¬¶ doc: Spelling: add a few more words to {code,words}.pws

[22:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/e9b367f3b0

[22:05] <Geth> ¬¶ doc: 87e230f1cd | cfa++ | doc/Type/IO/Handle.pod6

[22:05] <Geth> ¬¶ doc: Fix 'endian(n)ess' typo.

[22:05] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[22:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/87e230f1cd

[22:05] <Geth> ¬¶ doc: ac8942e3a6 | cfa++ | xt/code.pws

[22:05] <Geth> ¬¶ doc: Spelling: add a few more words to code.pws

[22:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ac8942e3a6

[22:06] *** Kaiepi left
[22:07] *** Kaiepi joined
[22:08] *** tyil left
[22:09] *** tyil joined
[22:09] *** lucasb left
[22:10] *** zacts joined
[22:14] *** dct_ joined
[22:15] *** Ven`` left
[22:16] *** sena_kun left
[22:27] <Geth> ¬¶ Blin: 80417a8ea7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/blin.p6

[22:27] <Geth> ¬¶ Blin: Produce some json output

[22:27] <Geth> ¬¶ Blin: 

[22:27] <Geth> ¬¶ Blin: A bit LTA but good enough for some purposes. Resolves #5.

[22:27] <Geth> ¬¶ Blin: review: https://github.com/perl6/Blin/commit/80417a8ea7

[22:27] *** skids left
[22:32] *** leszekdubiel joined
[22:32] <leszekdubiel> Hello! 

[22:33] <leszekdubiel> what is the simplest way to check if month   2019-10   is valid in perl6? 

[22:34] <leszekdubiel> perl6 -e  'say Date.new("2019-01-20");   <--------- this works ok for whole date 

[22:34] <leszekdubiel> perl6 -e  'say Date.new("2019-01");                     <<<--- this doesn't work without day component

[22:37] *** sena_kun joined
[22:41] <tadzik> what do you mean by "month is valid?"

[22:41] <tadzik> you can always add a -01 to the end, there's a 1st in every month... I think ;)

[22:43] *** ferreira left
[22:43] <AlexDaniel> m: say Date.new(2019, 01)

[22:43] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´Potential difficulties:‚ê§    Leading 0 has no meaning. If you meant to create an octal number, use '0o' prefix; like, '0o1'. If you meant to create a string, please add quotation marks.‚ê§    at <tmp>:1‚ê§    ------> 3say Date.new(2019, 017‚èè5)‚Ä¶¬ª

[22:43] <AlexDaniel> m: say Date.new(2019, 1)

[22:43] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´Cannot resolve caller new(Date:U: Int:D, Int:D); none of these signatures match:‚ê§    (Date: Int:D(Any):D $year, Int:D(Any):D $month, Int:D(Any):D $day, :&formatter, *%_ --> Date:D)‚ê§    (Date: Int:D(Any):D :$year!, Int:D(Any):D :$month = 1, Int:D(A‚Ä¶¬ª

[22:43] <AlexDaniel> hm, I wonder why it doesn't default to 1

[22:44] <AlexDaniel> ah

[22:44] <AlexDaniel> m: say Date.new(year => 2019, => 1)

[22:44] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix => instead.‚ê§at <tmp>:1‚ê§------> 3say Date.new(year => 2019, =>7‚èè5 1)‚ê§¬ª

[22:44] <AlexDaniel> m: say Date.new(year => 2019, month => 1)

[22:44] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´2019-01-01‚ê§¬ª

[22:44] <AlexDaniel> m: say Date.new(year => 2019, month => 13)

[22:44] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´Month out of range. Is: 13, should be in 1..12‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:44] <AlexDaniel> m: say Date.new(year => 2019, month => 0)

[22:44] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´Month out of range. Is: 0, should be in 1..12‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:44] <AlexDaniel> m: say Date.new(year => 2019, month => 2.5)

[22:44] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´2019-02-01‚ê§¬ª

[22:44] <tobs> :D

[22:44] <leszekdubiel> actually I can add -01 to the end... right

[22:45] <leszekdubiel> in perl5 i was doing like this:     perl -e 'use Time::Piece; localtime()->strptime(@ARGV[0], "%Y-%m"); print "ok\n"; '  "2019-01"

[22:46] <leszekdubiel> and I was recently searching for strptime in perl6 but I didn't sucseed

[22:47] <AlexDaniel> tobs: heh, ‚Äú:D‚Äù it is. I remember a few years ago I was hunting for bugs like this one. For example: RT#125682

[22:47] <synopsebot> RT#125682 [resolved]: https://rt.perl.org/Ticket/Display.html?id=125682 [Weird] Date overflows ‚Äì 1999--14035828--4570789517646521952

[22:47] <AlexDaniel> I like how it says ‚ÄúResolving ticket :D‚Äù

[22:49] <AlexDaniel> RT#125681 RT#125683 RT#125686 and so on

[22:49] <synopsebot> RT#125681 [resolved]: https://rt.perl.org/Ticket/Display.html?id=125681 -001-12-31 is not a good way to represent a date

[22:49] <synopsebot> RT#125683 [resolved]: https://rt.perl.org/Ticket/Display.html?id=125683 No timezone validation ‚Äì 1994-05-03T00:00:00+100:39

[22:49] <synopsebot> RT#125686 [resolved]: https://rt.perl.org/Ticket/Display.html?id=125686 [Weird] DateTime overflows ‚Äì month 7017915 is out of range

[22:49] <AlexDaniel> all resolved now, of course

[22:51] <tobs> AlexDaniel: but in this case it's not an overflow but just that 2.5 matches the range 1..12 right?

[22:52] *** kurahaupo left
[22:53] <tobs> m: say 2.5 ~~ Int & 1..12

[22:53] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:53] <leszekdubiel> And if I want to use Date::Calendar, then i should use somehow import that module from perl5, right? 

[22:53] <tobs> too bad

[22:53] *** kurahaupo joined
[22:54] *** robertle left
[22:55] <AlexDaniel> leszekdubiel: Inline::Perl5 should be able to do that, yeah

[22:55] <AlexDaniel> leszekdubiel: also if you think that perl¬†6 is really missing that module, perhaps ask lizmat to port it :)

[22:55] *** MasterDuke joined
[22:55] <tobs> m: say 2.5 ~~ all(Int, 1..12)

[22:55] <camelia> rakudo-moar 1ff9b14e8: OUTPUT: ¬´False‚ê§¬ª

[22:55] *** MasterDuke left
[22:55] *** MasterDuke joined
[22:57] *** Sgeo__ joined
[22:57] <leszekdubiel> lizmat? I will google that perhaps... i dont know who lizmat is

[22:58] <AlexDaniel> leszekdubiel: she ported many p5 modules: https://modules.perl6.org/search/?q=p5

[22:59] <AlexDaniel> or, actually, builtins, though maybe modules too?

[22:59] <AlexDaniel> hmm I actually never realized before that these were builtins

[22:59] *** Sgeo_ left
[23:00] <AlexDaniel> ah, yes, some modules too: https://modules.perl6.org/search/?q=author%3A%22ELIZABETH%22

[23:00] <leszekdubiel> Yess... date::Calendar are very important, because they allow to do business date calculations -- working days, holidays, calculating amounts of working time between dates

[23:01] <sena_kun> I wonder if it's a lot of work to port(Date::Calendar, I mean), but my understanding of Perl 5 is nearly non-existent in any case. :|

[23:02] <tobs> oh cool, even P5__DATA__ exists, using a slang!

[23:03] <leszekdubiel> I think calendar operations are quite complicated. But I didn't look inside that modules. 

[23:05] <phogg> Date::Calendar is pretty tiny, but it depends Date::Calc::Object which is much less so.

[23:06] <sena_kun> well, Perl 6 has quite a nice DateTime out of the box, in my experience, with stuff like `.later(year => 3).earlier(days => 5).day-of-week` just working correctly.

[23:06] <leszekdubiel> Perl5 strings are very, very fast. But they have some problems with COW implementation --- https://rt.perl.org/Public/Bug/Display.html?id=129802   . Hope perl6 doesn't have such problems. 

[23:07] <leszekdubiel> Also this one:   https://www.perlmonks.org/?node_id=1197369    -- perl5 optimizes unicode hashes... and there are bugs hart to workaround

[23:10] *** dct_ left
[23:11] <leszekdubiel> printf "\x9c\x5a" | perl6 -ne '/<[^#]>*/; print 1; '

[23:11] <leszekdubiel> why it dies when unicode is broken? Shouldn't it go on event if input is incorrect? 

[23:20] <AlexDaniel> leszekdubiel: what's the expected behavior? You can reopen $*IN with utf8-c8 encoding which will probably do what you want

[23:20] <AlexDaniel> leszekdubiel: see https://docs.perl6.org/language/unicode#index-entry-UTF8-C8

[23:21] <AlexDaniel> leszekdubiel: for example:

[23:21] <AlexDaniel> leszekdubiel: printf "\x9c\x5a" | perl6 -ne 'INIT { $*IN .= open(enc => ‚Äòutf8-c8‚Äô) }; /<[^#]>*/; print 1;'

[23:21] <leszekdubiel> Yeah! That is good... prints 1. 

[23:22] <leszekdubiel> How to set that enc utf8-c8 for all streams, opened files, command line arguments? 

[23:22] <leszekdubiel> In perl5 I used   -CSDA on command line 

[23:23] <AlexDaniel> so that everything defaults to utf8-c8? I don't think there's a way right now‚Ä¶

[23:25] <leszekdubiel> Yes... to everything that we have on input be converted as utf8-c8...    because anything user supplies should be handled somehow and I don't want perl to die only because UTF-8 is malformed

[23:26] <leszekdubiel> as you seee... i only match against # in input... this is simple... even if user supplies malformed utf8 then perl should do its job -- check if there is no # in input 

[23:26] *** Kaiepi left
[23:27] <leszekdubiel> anyway - thank you for hints

[23:27] *** zacts left
[23:27] <leszekdubiel> I hope perl6 is going to be as popular as perl5

[23:29] *** Kaiepi joined
[23:29] *** Kaiepi left
[23:29] *** Kaiepi joined
[23:31] <AlexDaniel> leszekdubiel: IO objects (like paths) are already ut8-c8 by deault if I'm not mistaken, but yeah everything else will tend to throw

[23:31] <AlexDaniel> leszekdubiel: this does mean that you can CATCH these exceptions

[23:31] *** pecastro left
[23:32] <leszekdubiel> Ok, thank you. 

[23:32] *** Kaypie joined
[23:33] *** Kaiepi left
[23:34] <AlexDaniel> though now that I think about it, these exceptions will tend to be thrown from core methods so catching them is somewhat a PITA‚Ä¶

[23:40] <leszekdubiel> I think it would be nice to tell perl6   --    "when something is wrong with unicode, then ignore and go on"       or    "when something is wrong, then thow exception". 

[23:40] <timotimo> it's implemented in the backend, but i'm not sure if you can pass the flag on from perl6 itself

[23:41] <leszekdubiel> newbie question -- when reading lines $*IN.lines I know end of line is truncated, chopped of, chomp;      in perl5 on linux only \n what chopped of;    in perl6 both \r\n and \n are choped off? 

[23:42] *** rindolf left
[23:44] <timotimo> \r\n is one grapheme, perl6 will not chop half graphemes unless you bend over backwards

[23:48] <leszekdubiel> how to read CSV file?    (first row are kolumn headers, and separated by tabs)? 

[23:48] <leszekdubiel> printf "col1\tcol2\ncel11\tcel12\ncel21\tcel22\n" | perl6 -e 'my @colnames = $*IN.get.split("\t"); for $*IN.lines.map({ $_.split("\t") }) { dd $_; };'

[23:49] <leszekdubiel> i would like to have  same as in perl5 :                       perl -e 'my @a = ( { col1 => "cell11", col2 => "cell12" }, {col1 => "cell21", col2 => "cell22" }); use Data::Dumper; print Dumper(\@a); '

[23:50] <leszekdubiel> $VAR1 = [           {             'col2' => 'cell12',             'col1' => 'cell11'           },           {             'col1' => 'cell21',             'col2' => 'cell22'           }         ];

[23:50] *** zacts joined
[23:50] <leszekdubiel> that is array of rows, and each row is a hash  of   columnname => columnvalue 

[23:51] *** mowcat joined
[23:51] *** leont joined
[23:52] *** Kaypie left
[23:54] <jnthn> Something like `hash @colnames Z=> .split("\t")` in the map

[23:55] *** Kaiepi joined
[23:56] *** zacts left
[23:56] *** zacts joined
[23:59] <leszekdubiel> printf "col1\tcol2\ncel11\tcel12\ncel21\tcel22\n" | perl6 -e 'my @colnames = $*IN.get.split("\t"); my @csv = $*IN.lines.map({ hash @colnames Z=> .split("\t"); }) ;  dd @csv;'

[23:59] <leszekdubiel> works ok: 

