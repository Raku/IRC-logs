[00:11] *** aborazmeh joined
[00:11] *** aborazmeh left
[00:11] *** aborazmeh joined
[00:20] *** aborazmeh left
[00:21] *** MasterDuke joined
[00:22] *** MasterDuke left
[00:22] *** MasterDuke joined
[00:22] *** aborazmeh joined
[00:22] *** aborazmeh left
[00:22] *** aborazmeh joined
[00:23] <ugexe> Juerd: anyway to get `my %h = map &{sub {}}.(), @foo` to be list context instead of scalar?

[00:27] <ugexe> otherwise I can use the way AlexDaniel came up with using a &foo instead

[00:32] *** cpan-p6 left
[00:32] *** cpan-p6 joined
[00:32] *** cpan-p6 left
[00:32] *** cpan-p6 joined
[00:33] *** aborazmeh left
[00:33] <Juerd> ugexe: Hmmm

[00:35] <Juerd> ugexe: What's the expression you're mapping?

[00:37] *** MidCheck left
[00:38] <Juerd> Can't you just join stuff and split it again? :D

[00:38] <Juerd> Or is that too perl-4-ish?

[00:49] *** hasuwiz left
[00:51] *** w_richard_w joined
[00:54] <Xliff> ugexe: Ah! Inline-Python/#33 updated.

[00:56] <Juerd> m: sub meh { return @_ if @_ > 1; @_.shift.() }; my @foo = &{sub ($_) {$_, $_+1}}), @foo; print @h;

[00:56] <evalable6> Juerd, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/wFchmEw68i‚ê§Unexpected closing bracket‚ê§at /tmp/wFchmEw68i:1‚ê§------> 03t.() }; my @foo = &{sub ($_) {$_, $_+1}}08‚èè04), @foo; print @h;‚ê§¬ª

[00:56] <Juerd> It worked on my perl6...

[00:57] <Juerd> It's missing things

[00:57] <Juerd> m: sub meh { return @_ if @_ > 1; @_.shift.() }; my @foo = 1..10; my @h = map meh(&{sub ($_) {$_, $_+1}}), @foo; print @h;

[00:57] <evalable6> Juerd, rakudo-moar 7b4dd3006: OUTPUT: ¬´1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11¬ª

[00:57] <Juerd> $ perl -e'sub meh { return @_ if @_ > 1; @_.shift.() }; my @foo = 1..10; my @h = map meh(&{sub ($_) {$_, $_+1}}), @foo; print @h;'

[00:57] <Juerd> 12233445566778899101011

[00:58] <Juerd> Doesn't really work for single item lists

[00:59] <Juerd> Isn't there some perl5+6 syntactically valid boolean expression that determines whether you're 5 or 6? :)

[00:59] <ugexe> i dunno. the one trick i'm saving to a particular hard spot is the inline comment

[00:59] <Juerd> ugexe: eval's even simpler :)

[01:00] <ugexe> ah yeah, that seems like the most cheatiest solution

[01:01] <ugexe> well i guess that does require knowing if you are in 5 or 6

[01:02] <Juerd> Because of some monkeys?

[01:02] <ugexe> m: eval(1)

[01:02] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/5cAaigDeXH‚ê§Undeclared routine:‚ê§    eval used at line 1. Did you mean 'EVAL', 'val'?‚ê§‚ê§¬ª

[01:03] *** vrurg left
[01:04] <Juerd> BEGIN { my $INC; $INC{"MONKEY.pm"} = 1 }; use MONKEY-SEE-NO-EVAL; print "hi"

[01:04] <evalable6> Juerd, rakudo-moar 7b4dd3006: OUTPUT: ¬´hi¬ª

[01:04] <ugexe> but you have to know eval vs EVAL

[01:04] <Juerd> Oh shit

[01:05] <ugexe> i guess you can tell by testing "0" as true or false

[01:05] <Juerd> Ooh!

[01:05] <Juerd> Good one!

[01:06] *** vrurg joined
[01:07] <Juerd> 1;0 juerd@cxien:~$ p56 'BEGIN { my $INC; $INC{"MONKEY.pm"} = 1 }; use MONKEY-SEE-NO-EVAL; sub eval { EVAL(@_) };  eval "print 42" '

[01:07] <Juerd> 5: 42

[01:07] <Juerd> 6: 42

[01:07] <Juerd> Wasn't too hard :)

[01:08] <ugexe> m: say &EVAL(1)

[01:08] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: ¬´1‚ê§¬ª

[01:08] <ugexe> no monkey stuff needed

[01:08] <Juerd> sub meh { return @_ unless "0"; @_.shift.() }; my @foo = 1..10; my @h = map meh(&{sub ($_) {$_, $_+1}}), @foo; print @h;

[01:08] <evalable6> Juerd, rakudo-moar 7b4dd3006: OUTPUT: ¬´1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11¬ª

[01:09] <ugexe> but i still dont see how to call eval or EVAL

[01:09] <Juerd> ugexe: Hm, is that a feature?

[01:09] <ugexe> in your example EVAL(1) isnt a function

[01:09] <ugexe> in perl 5

[01:09] <ugexe> i'm not sure why &EVAL works like that

[01:09] <Juerd> Which EVAL(1)?

[01:10] *** vrurg left
[01:10] <ugexe> well your example clearly does work. i dont understand how

[01:10] *** pochi_ joined
[01:10] <Juerd> My thing works because the core eval takes precedence over any sub called eval, so the sub is ignored, and it never finds out there is no EVAL

[01:10] <ugexe> why isnt EVAL() blowing up in perl 5?

[01:11] <ugexe> ah

[01:12] *** titsuki_ joined
[01:12] <ugexe> i wonder if there are any tricks with try { }

[01:12] *** pochi left
[01:12] *** w_richard_w left
[01:12] *** kst left
[01:12] *** kst` joined
[01:12] *** titsuki left
[01:12] <ugexe> i honestly dont even know what the hell core perl 5 try does

[01:13] <ugexe> other than screw me over when i forget to include Try::Tiny

[01:13] <Juerd> Anyway, does my map suggestion work for your use case?

[01:13] <Juerd> Core Perl 5 try? Is there such a thing?

[01:14] <ugexe> ah no there isn't. its syntax that gets me

[01:14] <Juerd> Perl 5's try is called eval :)

[01:14] <ugexe> try { die 111 }; dies with 111, so i was thinking try was a keyword

[01:14] <ugexe> obviously thats what Keyword::Try or whatever is, so i dunon why i thought that

[01:15] <ugexe> yeah your map suggestion works, although less than ideal. i was hoping for something like how you can force e.g. hash context inline with `+{ }`

[01:16] <Juerd> I know, but I can't think of anything that calls a callable in 6, while passing a list unchanged in 5

[01:17] <Juerd> I could think of the thing that calls in perl 6 and passes a string unchanged in 5

[01:17] <Juerd> Which different ways are there to call &{ ... } in 6, anyway?

[01:17] <Juerd> I can only think of postfix () or .()

[01:20] <ugexe> m: say &{ sub foo() { } }.@

[01:20] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) Invocant of method 'CALL-ME' must be a type object of type 'List', not an object instance of type 'Array'.  Did you forget a 'multi'?‚ê§  in block <unit> at /tmp/L1CH6iDZIg line 1‚ê§‚ê§¬ª

[01:21] <ugexe> m: say &{ sub foo() { } }.^methods

[01:21] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: ¬´(The 'ForeignCode' class is a Rakudo-specific‚ê§implementation detail and has no serviceable‚Ä¶¬ª

[01:21] <evalable6> ugexe, Full output: https://gist.github.com/600e61ff0a0d7dfec13389c96dcb37c0

[01:21] <Juerd> At some point it's easier to reimplement map ;)

[01:21] <ugexe> yeah i could just inline comment the , in for perl6 maybe

[01:22] <ugexe> but that breaks one-liners for perl 5

[01:25] <ugexe> map { $_ => $_ }#`(),‚ê§(1,2,3)

[01:26] <Juerd> sub polymap { my $f = @_[0]; @_.shift; return map &$f, @_; }; my @foo = 1..10; my @h = polymap sub ($_) { $_, $_ + 1 }, @foo; print @h

[01:26] <evalable6> Juerd, rakudo-moar 7b4dd3006: OUTPUT: ¬´1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11¬ª

[01:28] <ugexe> i didnt know you could do @_[0]

[01:28] <Juerd> You can if you ignore the warning :)

[01:28] <ugexe> ah heh

[01:29] <ugexe> learnin quite a few new tricks

[01:30] <Juerd> perl 1/5 polyglots are easier than perl 5/6

[01:30] <Juerd> The former only if you take a perl 5 old enough to still support the old function call syntax

[01:31] <Juerd> I believe that was killed recentl

[01:31] <Juerd> y

[01:31] <Juerd> It used "do"

[01:34] *** Xliff left
[01:38] <Juerd> Oh, heh, Perl 6 allows shift as a non-method

[01:38] <MasterDuke> m: .name.say for sub { }.^methods # ugexe 

[01:38] <evalable6> MasterDuke, rakudo-moar 7b4dd3006: OUTPUT: ¬´onlystar‚ê§<anon>‚ê§cando‚ê§gist‚ê§yada‚ê§<anon>‚ê§<anon>‚ê§candidates‚ê§multi‚ê§soft‚ê§<anon>‚ê§<anon>‚ê§perl‚ê§pac‚Ä¶¬ª

[01:38] <evalable6> MasterDuke, Full output: https://gist.github.com/6f23adbe73e336ea2f4fc8c5ccc25a4c

[01:38] <Juerd> sub polymap { my $f = shift @_; map &$f, @_ }  is quite a bit shorted

[01:38] <ugexe> hmm how about getting around the sigal difference for accessing a hash key `my $h = ...; %h{1}`

[01:39] <Juerd> ugexe: Use a $ sigiled hash in Perl 6 :)

[01:39] <ugexe> MasterDuke: but that is still a bug yeah?

[01:39] <ugexe> Juerd: wont that give me scalar contet?

[01:39] *** hythm joined
[01:40] <ugexe> in perl 5

[01:40] <Juerd> ugexe: ?

[01:40] <MasterDuke> ugexe: dunno

[01:40] <MasterDuke> doesn't recent perl5 allow %$h ?

[01:40] <ugexe> Juerd: n/m, i didnt think my $x = +{ 1 => 1 } was going to do what i wanted

[01:41] <ugexe> i guess the + isn't needed even

[01:43] <ugexe> `my $x = (1 => 2, 3 => 4); say $x{1}` i was doing this earlier which is why i was confused

[01:46] <Juerd> sub flat { @_ }; sub polymap { my $f = shift @_; flat map &$f, @_ }; my @foo = 1..10; my %h = polymap sub ($_) { $_, $_ + 1 }, @foo; my $h = %h; print $h{2}

[01:46] <evalable6> Juerd, rakudo-moar 7b4dd3006: OUTPUT: ¬´3¬ª

[01:46] <MasterDuke> ugexe: re `sub { }.^methods`, i think we are ok with internalish/low-level enough stuff not having .gist, etc. defined. of course, then the question is whether your example is explicitly doing something internalish/low-level enough to not be a bug

[01:47] <Juerd> evalable6: What's triggering you?

[01:47] <evalable6> Juerd, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ohmPKVCmoQ‚ê§Bogus p‚Ä¶¬ª

[01:47] <evalable6> Juerd, Full output: https://gist.github.com/7f0a6339ba6ff240d5caf62e809578c1

[01:48] <MasterDuke> maybe ^methods shouldn't return ForeignCodes

[01:48] <Juerd> I'm off to bed. Good night

[01:49] <MasterDuke> Juerd: camelia is shut down right now and evalable6 answers to m: if camelia gone

[01:49] <Juerd> MasterDuke: But I didn't say m:

[01:49] <MasterDuke> oh right, it also tries to guess if you accidentally left it off

[01:49] *** w_richard_w joined
[01:50] *** MidCheck joined
[01:50] <MasterDuke> if it looks enough like code it'll run it (maybe only if there's non-error output, but i don't remember if that part was implemented)

[02:17] *** khisanth_ left
[02:23] <guifa> What should a list formatting routine be called?

[02:23] <guifa> somehow listify() just isn‚Äôt doing it for me haha

[02:23] * guifa just finished tackling the CLDR for localized list formatting

[02:24] *** ijneb left
[02:31] *** khisanth_ joined
[02:40] <hythm> hi, if I have class A { has $.name  }; class B is A {  }; how to set attribute $!name for class B during object construction?

[02:41] *** buffet_ joined
[02:41] *** khisanth_ left
[02:41] *** buffet left
[02:42] <guifa> p6: class A { has $.name  }; class B is A {  }; my $foo = B.new( :name<bar> ); say $foo;

[02:42] <evalable6> guifa, rakudo-moar 7b4dd3006: OUTPUT: ¬´B.new(name => "bar")‚ê§¬ª

[02:47] <hythm> if I'm not passing :$name to .new, can I do that in BUILD? like class B is A { submethod BUILD (:$name) { $!name = 'something' } } ?

[02:50] *** ufobat__ joined
[02:51] <hythm> rephrasing: how can I access attribute $1name, inside class B BUILD method?

[02:51] <hythm> s/$1name/$!name

[02:51] <hythm> without passing :$name to B.new

[02:52] <guifa> Where are you getting the value of :$name from, if not from new() ?

[02:53] *** cpan-p6 left
[02:53] *** cpan-p6 joined
[02:53] *** cpan-p6 left
[02:53] *** cpan-p6 joined
[02:53] *** ufobat_ left
[02:54] *** MasterDuke left
[02:55] <hythm> I want to sellect random name, so class B has @names = <a b c d>, and I want B.name be set to @name.roll

[02:56] <hythm> my @names = < a b c d>; unit class B is A; submethod BUILD () { $!name = @names.roll }

[02:57] <guifa> Looks like you need to make sure that the $.name is rw 

[02:57] <guifa> p6: class A { has $.name is rw };  class B is A {  method BUILD { $.name = "bar" } }; my $foo = B.new; say $foo;

[02:57] <evalable6> guifa, rakudo-moar 7b4dd3006: OUTPUT: ¬´B.new(name => "bar")‚ê§¬ª

[02:58] <hythm> makes sense, I was trying to avoid making it rw. but looks like I have to

[02:59] *** khisanth_ joined
[03:04] *** stux|RC-only joined
[03:06] <guifa> Egads, the XML parer is sloooow.  I unleashed my CLDR parser on the whole of all 754 languages.  So far 708 seconds parsing XML, and less than 1 creating all the data from the XML files.

[03:14] <hythm> p6: class A { has $.name  }; class B is A { method new ( :$name = 'bar' ) { self.bless(:$name) } }; say B.new # this will do it

[03:14] <evalable6> hythm, rakudo-moar 7b4dd3006: OUTPUT: ¬´B.new(name => "bar")‚ê§¬ª

[03:17] *** phoxtail joined
[03:17] <guifa> Is there a way to generate messages during the install / testing phase for the user?  Normally those are silenced, but the install time for this module may be 10-20 minutes and I want to warn the user.

[03:19] <AlexDaniel> .tell MasterDuke yeah, it actually does run *every* message. Crazy. :)

[03:19] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[03:19] <AlexDaniel> .tell MasterDuke well, almost every. Most of them for sure

[03:19] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[03:20] <AlexDaniel> guifa: some modules definitely do that, but I don't know how

[03:27] <guifa> AlexDaniel: good to know it‚Äôs possible.  

[03:34] *** Cabanoss- left
[03:39] *** phoxtail left
[03:39] *** phoxtail joined
[03:44] *** phoxtail left
[03:45] *** Cabanossi joined
[03:48] *** molaf joined
[03:49] *** agentzh left
[03:51] *** agentzh joined
[03:51] *** agentzh left
[03:51] *** agentzh joined
[03:52] *** aborazmeh joined
[03:52] *** aborazmeh left
[03:52] *** aborazmeh joined
[03:53] *** aborazmeh left
[03:56] *** aborazmeh joined
[03:56] *** aborazmeh left
[03:56] *** aborazmeh joined
[04:08] <guifa> .tell jmarelo Would it destroy the system that autochecks modules for their installability if the install time is over 20 minutes?  Asking for a friend.

[04:08] <yoleaux> guifa: I'll pass your message to jmarelo.

[04:14] *** hythm left
[04:23] *** xinming joined
[04:26] *** xinming_ left
[04:29] *** sftp left
[04:30] *** AlexDaniel left
[04:31] *** aborazmeh left
[04:42] *** jmerelo joined
[04:43] <jmerelo> Yesterday season of docs was launched by Google, and we intend to submit Perl 6 docs to it. We need ideas! https://github.com/perl-gsoc-2019/season-of-docs-ideas

[04:49] *** rindolf joined
[04:50] *** MidCheck left
[04:52] <jmerelo> squashable6: status

[04:52] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon in 2 days and ‚âà7 hours (2019-04-06 UTC-14‚åÅUTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[04:54] <jap6h> .paste

[04:55] <perlbot> japh pasted a new file at https://f.perl.bot/p/e78n6s - how do I get p6doc working?

[04:59] *** curan joined
[04:59] <jmerelo> jap6h: that's a good question. Where did it stop working?

[05:00] <jap6h> jmerelo, it never started working :)

[05:00] <jap6h> should I manualy add the doc files somewhere in my fs perhaps?

[05:01] <jmerelo> If all you want is to check out the pod of a file, perl6 --doc is enough

[05:01] <jmerelo> jap6h: you need to set the path manually, though, as in perl6 --doc path/to/pod6

[05:02] <jmerelo> p6doc is not integrated with zef and does not index everything that's installed, as in the case of perldoc, I'm afraid.

[05:03] <jap6h> well I want to learn the language, so I want to be able to look up functions and core functionality and modules and, yeah, all that stuff

[05:03] <jmerelo> jap6h: also, p6doc is, as you might have seen, not working very well (if at all)

[05:03] <jap6h> such a shame

[05:03] <jap6h> don't wanna have to use a browser :/

[05:03] <jmerelo> jap6h: that might be a problem...

[05:04] <jmerelo> jap6h: we do have someone interested in fixing p6doc during Google Summer of Code. 

[05:04] <jap6h> maybe I should write a perl5 script to rip the docs from the site, convert it to plaintext and write my own perl6doc :p

[05:04] <jap6h> great

[05:05] <jmerelo> jap6h: that seems easier said than done... If you do want to do that, please do it in perl6 and pull-request it to the repo. 

[05:06] <jap6h> jmerelo, I would, if I didn't write my first perl6 script yesterday. catch 22 :D

[05:06] <jmerelo> jap6h: ... since you need to check the documentation. Right.

[05:06] <jmerelo> jap6h: I can upload a single-PDF version of the documentation to the site, if that could help

[05:07] <jmerelo> jap6h: text too, although that might miss some stuff

[05:07] <jap6h> sure :) then I can make a hardcopy of it

[05:07] *** jap6h is now known as japh

[05:07] <jmerelo> japh: you don't need to downgrade yourself :-)

[05:08] <japh> I might be weird but I like reading docs in the bath tub

[05:08] *** skids left
[05:09] <jmerelo> japh: it's going to be 1402 pages in PDF... May I suggest one of the books on Perl 6?

[05:09] <japh> lol

[05:10] <jmerelo> japh: well, it's a big language...

[05:10] <japh> doesn't the books get outdated very quickly though?

[05:10] <japh> since it's still an evolving language?

[05:11] <jmerelo> japh: not really. The basics do not change a log; new classes are not introduced so easily. There might be some small changes or some ambiguous behavior gets disambiguated, but no biggie

[05:13] <japh> I see

[05:15] *** sauvin joined
[05:17] *** aborazmeh joined
[05:17] *** aborazmeh left
[05:17] *** aborazmeh joined
[05:23] *** aborazmeh left
[05:26] <jmerelo> japh: uploading PDF and epub in a moment. Takes a while to convert...

[05:27] *** llfourn left
[05:27] *** molaf left
[05:28] <Geth> ¬¶ doc: 45ed2530b3 | (JJ Merelo)++ | doc/Language/syntax.pod6

[05:28] <Geth> ¬¶ doc: Revises text and closes #2704

[05:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/45ed2530b3

[05:28] <synopsebot_> Link: https://doc.perl6.org/language/syntax

[05:29] <jmerelo> japh: I'm going to open an issue anyway with links to your text above.

[05:30] <jmerelo> .tell guifa it will not; I think the Travis limit is 50 minutes

[05:30] <yoleaux> jmerelo: I'll pass your message to guifa.

[05:30] <japh> jmerelo, thank you

[05:32] <japh> can you use cpan(m) to install perl6 modules? I've seen some perl6:: on the metacpan? 

[05:33] <jmerelo> japh: not really. zef is the only command-line utility that can be used now. It does tap CPAN, but mostly for storage.

[05:33] <japh> okay

[05:33] <jmerelo> japh: https://github.com/perl6/doc/issues/2705 please comment/add anything you can think about

[05:36] <jmerelo> japh: PDF uploaded: https://github.com/perl6/doc/releases/tag/v1.002.001 epub conversion is taking already 11 minutes. I'll upload it later when it finishes.

[05:37] <japh> jmerelo, thank you, wgetting

[05:49] *** w_richard_w left
[05:49] *** w_richard_w joined
[05:52] <jmerelo> japh: epub ready too: https://github.com/perl6/doc/releases/tag/v1.002.001

[05:56] *** llfourn joined
[06:00] *** llfourn left
[06:10] *** domidumont joined
[06:33] *** Sgeo_ joined
[06:36] *** jmerelo left
[06:37] *** Sgeo left
[06:43] *** pmurias left
[06:45] *** entonian joined
[06:49] *** pistacchio left
[06:49] *** entonian left
[06:49] *** pistacchio joined
[07:05] *** patrickb joined
[07:08] *** llfourn joined
[07:12] *** llfourn left
[07:18] *** rindolf left
[07:24] *** rindolf joined
[07:41] *** rindolf left
[07:42] *** llfourn joined
[07:43] *** scimon joined
[07:45] *** netrino joined
[07:45] *** rindolf joined
[07:46] *** llfourn left
[07:52] *** netrino left
[07:53] *** kensanata joined
[07:58] *** kurahaupo_ joined
[07:58] *** kurahaupo left
[07:59] *** kurahaupo_ left
[07:59] *** patrickb left
[07:59] *** kurahaupo joined
[08:00] *** kurahaupo_ joined
[08:03] *** kurahaupo left
[08:08] *** Sgeo__ joined
[08:09] *** reach_satori left
[08:10] *** buffet_ is now known as buffet

[08:11] *** Sgeo_ left
[08:14] *** zakharyas joined
[08:16] <ugexe> https://gist.github.com/ugexe/c99b81654968cc6de49eac63afc76229 polyglot perl 5/6 base35 encode/decode

[08:17] *** zakharyas left
[08:18] *** zakharyas joined
[08:18] *** dakkar joined
[08:28] *** llfourn joined
[08:33] *** llfourn left
[08:37] *** antoniogamiz joined
[08:40] *** MidCheck joined
[08:43] *** kurahaupo_ left
[08:43] *** kurahaupo joined
[08:55] *** pmurias joined
[08:57] *** mowcat joined
[08:57] *** reach_satori joined
[09:08] *** llfourn joined
[09:12] *** llfourn left
[09:14] *** reach_satori_ joined
[09:14] *** reach_satori left
[09:28] *** llfourn joined
[09:33] *** llfourn left
[09:35] *** wbn_ left
[09:38] *** wbn joined
[09:51] *** w_richard_w left
[10:00] *** robertle_ joined
[10:03] *** domidumont left
[10:09] *** Praise left
[10:12] *** pmurias left
[10:31] *** kurahaupo_ joined
[10:32] *** kurahaupo left
[10:47] *** kurahaupo_ left
[10:48] *** kurahaupo joined
[10:49] *** zakharyas left
[10:49] *** reach_satori_ left
[10:51] <Juerd> Wow, that results in some really weird code :)

[10:52] *** Black_Ribbon left
[10:59] *** pmurias joined
[11:00] *** reach_satori_ joined
[11:10] *** sena_kun joined
[11:19] *** reach_satori_ left
[11:21] *** llfourn joined
[11:40] *** llfourn left
[11:52] *** reach_satori joined
[11:57] *** antoniogamiz left
[12:00] <moritz> ugexe++

[12:00] <moritz> that's some scary shit right there :D

[12:10] *** llfourn joined
[12:15] *** llfourn left
[12:20] *** lucasb joined
[12:22] *** zakharyas joined
[12:26] *** cpan-p6 left
[12:27] *** cpan-p6 joined
[12:27] *** cpan-p6 left
[12:27] *** cpan-p6 joined
[12:35] *** reach_satori left
[12:48] *** llfourn joined
[12:53] *** llfourn left
[12:54] *** abraxxa left
[12:56] *** abraxxa joined
[13:08] *** domidumont joined
[13:10] *** ufobat_ joined
[13:14] *** ufobat__ left
[13:32] *** vrurg joined
[13:44] *** patrickb joined
[13:45] *** skids joined
[13:48] *** reach_satori joined
[14:22] *** kurahaupo left
[14:23] *** kurahaupo joined
[14:25] *** rindolf left
[14:27] *** rindolf joined
[14:29] *** mowcat left
[14:39] *** llfourn joined
[14:42] *** Sgeo joined
[14:43] *** llfourn left
[14:45] *** Sgeo__ left
[14:58] *** molaf joined
[15:00] *** patrickb left
[15:03] <kawaii> Can I run some Callable on an object like a method?

[15:04] *** curan left
[15:06] <moritz> the invocant of a method is just the first argument

[15:06] *** AlexDaniel joined
[15:06] <moritz> so &mycallable($obj) and $obj.&mycallable() work just like $obj.mymethod

[15:07] <moritz> a long way to say "yes", I guess :D

[15:07] <kawaii> I want to be able to create a sub that will later be called on an object but the compiler won't let me use self or the ':' syntax on something that isn't a method

[15:07] <kawaii> oh I can just accept it as a positional?

[15:07] <AlexDaniel> guifa: re ‚ÄúWould it destroy the system that autochecks modules for their installability if the install time is over 20 minutes? Asking for a friend.‚Äù

[15:07] *** amosbird left
[15:07] <AlexDaniel> guifa: no, it will just time out, and your module will appear on https://github.com/perl6/ecosystem-unbitrot/issues

[15:08] <AlexDaniel> guifa: your friend's module, of course! :)

[15:08] <kawaii> hey that does work

[15:10] <AlexDaniel> hey, uh‚Ä¶ I'm confused about this ticket https://github.com/perl6/ecosystem-unbitrot/issues/595

[15:10] <kawaii> Doesn't help though because I wanted to be able to use self instead of accepting parameters I only use in some situations

[15:10] <kawaii> same problem, just moved

[15:10] <AlexDaniel> it's not April 1st, and I'm confused‚Ä¶

[15:11] <AlexDaniel> there's no module in the ecosystem related to doxygen, right?

[15:11] <AlexDaniel> greppable6: doxygen

[15:11] <timotimo> very interesting that that'd end up in our repository

[15:11] <greppable6> AlexDaniel, 88 lines, 3 modules: https://gist.github.com/f3cf0092b91f810d2b97144632c4df80

[15:11] <AlexDaniel> could it be about https://modules.perl6.org/dist/Libclang:cpan:AZAWAWI ?

[15:12] <AlexDaniel> ‚ÄúE: Unable to correct problems,you have held broken packages.‚Äù that's from apt, right?

[15:13] <timotimo> that looks very much like APT output, yeah

[15:13] <AlexDaniel> if there's a module that runs apt during install I'll kill ya all xD

[15:14] <moritz> I'm just waiting for the module that uses ansible to run apt during installation :D

[15:15] *** cpan-p6 left
[15:16] *** cpan-p6 joined
[15:16] *** cpan-p6 left
[15:16] *** cpan-p6 joined
[15:17] *** robertle_ left
[15:17] *** llfourn joined
[15:18] *** Sgeo_ joined
[15:22] *** Sgeo left
[15:22] *** llfourn left
[15:23] <pmurias> ugexe: do you have any suggestions what nqp::uname should return in the browser?

[15:23] *** molaf left
[15:23] <tadzik> user-agent?:)

[15:24] <tadzik> (/s)

[15:24] *** reach_satori left
[15:24] *** Sgeo__ joined
[15:28] *** Sgeo_ left
[15:30] *** jmerelo joined
[15:35] <ugexe> pmurias: im not sure. maybe sysname = $browser_name, release = $browser_version, version = ??? (on windows this is empty, so thats a reasonable option), machine = ??? (no idea about this. usually x86_64 on a 64 bit system, so maybe whatever bits the browser was compiled to?)

[15:35] <timotimo> include the flash player plugin version please

[15:39] *** MidCheck left
[15:41] *** llfourn joined
[15:44] <kawaii> greppable6: posix

[15:44] <greppable6> kawaii, 209 lines, 47 modules: https://gist.github.com/a9b272d3cf4c64003fccc020370bfd13

[15:48] *** MidCheck joined
[15:49] *** llfourn left
[16:02] *** demanuel joined
[16:11] *** pmurias left
[16:12] *** demanuel left
[16:17] *** agentzh left
[16:18] *** agentzh joined
[16:31] *** Chaz6 joined
[16:32] <Chaz6> hey ufobat_ bailador is not working for me with rakudo star 2019.03 // Cannot modify an immutable 'Any' type object in method dispatch

[16:32] *** llfourn joined
[16:33] *** epony left
[16:35] <Chaz6> ufobat_: sample code https://pastebin.com/2TBJEBfY

[16:35] *** pistacchio left
[16:36] *** pistacchio joined
[16:37] *** llfourn left
[16:38] *** scimon left
[16:39] <ufobat_> Ill have a look at it in the tonight or tomorrow

[16:39] *** dakkar left
[16:40] <ufobat_> Chaz6, which version of Bailador have you installed on your box?

[16:42] *** pistacchio left
[16:45] <Chaz6> ufobat_: 0.0.18

[16:45] <Chaz6> thanks!

[16:45] <Chaz6> It might be a PSGI issue

[16:48] <ugexe> here is a benchmarkable version of the base35 stuff -- perl 5 does 100k round trips in 1m2s, and perl 6 in 1m12s: https://gist.github.com/ugexe/707df8eddc1f055fdc2ca8c27fceba48

[16:48] *** zakharyas left
[16:48] *** mowcat joined
[16:49] <timotimo> they're almost tied for performance?

[16:49] *** mowcat left
[16:49] <ugexe> yeah. at 10000 iterations its like 6.5s vs 8s

[16:49] <timotimo> is that startup penalty or something?

[16:49] *** mowcat joined
[16:50] <ugexe> maybe a fraction of a second is startup time

[16:50] <timotimo> is the number big enough to give it a good workout?

[16:51] <timotimo> hold on, it uses /"."/ to split? even in the perl6 version?

[16:51] <ugexe> yeah

[16:51] *** epony joined
[16:51] <timotimo> like, that sounds like it'd be an incredible performance penalty on rakudo at the moment

[16:53] <timotimo> to_int accounts for about 50% of total run time :D

[16:53] <timotimo> a bit more

[16:53] <ugexe> heh

[16:54] <ugexe> in perl5 it would be int(...)

[16:54] <timotimo> split with "." instead of /"."/ makes it much less extreme

[16:55] <ugexe> i tried using substr("...", 0, index(...)) but got frustrated

[16:55] *** ravenousmoose joined
[16:55] <timotimo> it's quite obviously not meant to perform well :)

[16:56] <timotimo> just making it polyglot is of course not easy

[16:56] <ugexe> perl 5 doesnt work with split("."

[16:56] <timotimo> and of course $_.Int is loads faster still

[16:57] <ugexe> m: sub int { Int($_) }; print int(1.5); # :(

[16:57] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: ¬´(exit code 1) Cannot invoke this object (REPR: P6int; int)‚ê§  in block <unit> at /tmp/qk3kMFe5PU line 1‚ê§‚ê§¬ª

[16:58] <timotimo> can you use "floor"?

[16:58] <timotimo> (no negative numbers here, kids)

[16:58] <ugexe> perl 5 has no floor

[17:01] <ugexe> m: sub Xint($_) { ("0" and Int($_[0]) or int($_[0])) }; print Xint(1.5);

[17:01] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: ¬´1¬ª

[17:04] <ugexe> updated gist to use the above

[17:04] <ugexe> perl 6 now takes 27s

[17:04] <ugexe> perl 5 now takes 1.79s

[17:07] <ugexe> so perl6 Int(...) is really slow, or perl6 split(...) is fairly similar in speed to perl 5

[17:09] <timotimo> what happens in perl5 if you change to_base35's first line to read +@_[0] at the end?

[17:10] <ugexe> nothing

[17:11] <timotimo> does it make perl6 faster? from looking at the profile it seems to do a little bit in perl6

[17:11] <ugexe> fwiw thats not a valid constraint

[17:11] <ugexe> to_base35("xxx")

[17:12] <timotimo> oh, i thought that's the other way around

[17:12] <ugexe> base35 can contain numbers and letters as well

[17:13] *** kurahaupo_ joined
[17:13] *** kurahaupo left
[17:13] <ugexe> er no

[17:13] *** kurahaupo_ left
[17:13] *** kurahaupo joined
[17:20] *** pistacchio joined
[17:23] *** vrurg left
[17:25] *** vrurg joined
[17:26] *** domidumont left
[17:27] <Geth> ¬¶ doc: db96fe0cf0 | (JJ Merelo)++ | doc/Type/Any.pod6

[17:27] <Geth> ¬¶ doc: Junction + first + reflow, refs #2703, #2632

[17:27] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/db96fe0cf0

[17:27] <Geth> ¬¶ doc: 656008ca62 | (JJ Merelo)++ | doc/Type/Str.pod6

[17:27] <Geth> ¬¶ doc: Adds positional adverbs, so far undocumented.

[17:27] <synopsebot_> Link: https://doc.perl6.org/type/Any

[17:27] <synopsebot_> Link: https://doc.perl6.org/type/Str

[17:27] <Geth> ¬¶ doc: 

[17:27] <Geth> ¬¶ doc: This closes #2706.

[17:27] <Geth> ¬¶ doc: 

[17:27] <Geth> ¬¶ doc: Additionally, there's a mention of their use with Junctions, refs #2632.

[17:27] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/656008ca62

[17:28] <Geth> ¬¶ doc: 98146c18df | (JJ Merelo)++ | doc/Language/regexes.pod6

[17:28] <Geth> ¬¶ doc: This actually closes #2706 refs #2632

[17:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/98146c18df

[17:28] <synopsebot_> Link: https://doc.perl6.org/language/regexes

[17:28] *** vrurg left
[17:29] *** vrurg joined
[17:32] *** ravenousmoose left
[17:34] *** kensanata left
[17:37] *** epony left
[17:42] <timotimo> ugexe: using 1..9 instead of "1".."9" in the beginning of from_base35 makes rakudo happy

[17:42] *** epony joined
[17:43] *** ravenousmoose joined
[17:44] *** zachk joined
[17:49] *** khisanth_ left
[17:51] *** pistacchio left
[17:52] *** pistacchio joined
[17:54] *** ExtraCrispy left
[17:54] *** ExtraCrispy joined
[17:55] *** pecastro joined
[17:56] *** zachk left
[17:56] *** zachk joined
[17:58] *** abraxxa1 joined
[17:58] *** kurahaupo left
[17:59] *** kurahaupo joined
[17:59] *** kurahaupo left
[17:59] *** kurahaupo joined
[18:01] *** vrurg left
[18:02] <Juerd> ugexe: How does that /"."/ thing even do something useful in 5?

[18:04] *** pistacchio left
[18:04] *** pistacchio joined
[18:09] *** lucasb left
[18:10] *** khisanth_ joined
[18:13] *** vrurg joined
[18:15] *** abraxxa1 left
[18:19] *** MidCheck left
[18:26] <Juerd> ugexe: sub Int{int(@_[0])}; print Int(4.5)

[18:26] <Juerd> ugexe: Heck, it even works with $_[0] :)

[18:27] *** Actualeyes left
[18:29] *** skids left
[18:30] *** ravenousmoose left
[18:32] *** sauvin left
[18:33] *** llfourn joined
[18:35] <guifa> AlexDaniel: okay I guess I‚Äôll preparse stuff haha.  (I suppose CLDR doesn‚Äôt update so often I can‚Äôt just eventually do small point updates)

[18:35] <yoleaux> 05:30Z <jmerelo> guifa: it will not; I think the Travis limit is 50 minutes

[18:37] *** molaf joined
[18:38] *** llfourn left
[18:41] <ufobat_> Chaz6, your script works on my box :-(

[18:41] <ufobat_> Chaz6, This is Rakudo version 2019.03.1 built on MoarVM version 2019.03

[18:41] *** Possum left
[18:41] <ugexe> i wonder how much the eval() for accessing @*ARGS/@ARGV is costing

[18:41] *** Possum joined
[18:42] <Geth> ¬¶ doc: 37f5244177 | Coke++ | xt/code.pws

[18:42] <Geth> ¬¶ doc: handle spell check for new code sample

[18:42] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/37f5244177

[18:42] <ugexe> Juerd: i came up with /"."/ out of frustration, not by deducing from something logical like the docs 

[18:43] <Chaz6> ufobat_: hmmm okay thanks! I will try to find out what the problem is

[18:43] <ufobat_> i've seen something like that before

[18:44] <ufobat_> Chaz6, https://github.com/Bailador/Bailador/issues/313

[18:44] <ufobat_> but it vanished for cfa

[18:46] <Chaz6> ufobat_: aha that's exactly my problem

[18:46] <ufobat_> yeah

[18:47] <ufobat_> and the fix would be to add 'is rw' to this line https://github.com/Bailador/Bailador/blob/master/lib/Bailador/Context.pm#L12

[18:48] <Chaz6> Thanks :)

[18:48] <ufobat_> i dont see how one could not have the issue that you have, i am expecting it to happen on my box, too. but it works

[18:49] <ufobat_> maybe anyone from here could explain this to me :-)

[18:56] *** mowcat left
[19:00] <guifa> What does the error ‚ÄúMissing serialize REPR function for REPR VMException (BOOTException)‚Äù mean when installing via zef?  I‚Äôm definitely not getting the error when running the module directly

[19:01] <guifa> It‚Äôs not giving me a trace or a line number =\

[19:02] <SmokeMachine> jmerelo: Idk if the problem is on my iPhone... but the ePub version of the docs seems all blank to me...

[19:03] <SmokeMachine> jmerelo: look: https://usercontent.irccloud-cdn.com/file/gR6Li1VT/RPReplay_Final1554317734.mp4

[19:08] *** jmerelo left
[19:15] *** reach_satori joined
[19:15] *** netrino joined
[19:24] <ugexe> guifa: run it like `perl6 --ll-exception /Users/ugexe/.rakudobrew/moar-2019.03.1/install/share/perl6/site/bin/zef`

[19:25] <ugexe> a few lines from the bottom of `zef --help` shows where the CONFIGURATION file is, which gives you most of that path

[19:25] <guifa> I ended up finding the error and ‚Äôtwas a stupid one (forgot to switch from local to %?RESOURCES for file references)

[19:26] <guifa> But actually since I‚Äôve got you here ‚Ä¶¬†is there a good way to output to the user during testing / install?

[19:26] <ugexe> we should probably have a LL_EXCEPTIONS env var

[19:26] <ugexe> are you using --verbose (-v) or --debug?

[19:26] <guifa> put displays but only after the install completes, so warnings about slow installs (‚ÄúNo, seriously, don‚Äôt cancel, it‚Äôs going to take 20 minutes‚Äù) get suppressed 

[19:27] <guifa> Re error catching or general output?

[19:28] <ugexe> well you cant force zef to show the user anything... they opt into that stuff with a higher verbosity level. so at that point you see the regular test output, and could just use `diag "THESE TESTS ARE SLOW"`. unless i misunderstand

[19:28] <guifa> ah ok

[19:29] <ugexe> generally most people should be using -v if they really need to look at the output themselves

[19:29] <guifa> I‚Äôm working to preprocess the stuff now so that ideally the install can be <10 seconds, but that definitely satisfied my curiosity for down the line.

[19:30] <ugexe> that also enables output from the build phase, so you can have a Build.pm6 or something to inform the user it will be slow to install

[19:30] *** cpan-p6 left
[19:30] <ugexe> but they will see the test output so that probably isnt needed

[19:30] *** cpan-p6 joined
[19:31] *** cpan-p6 left
[19:31] *** cpan-p6 joined
[19:35] <guifa> ugexe++

[19:41] *** skids joined
[19:49] *** jackfly26 joined
[19:49] <jackfly26> hey

[19:49] <jackfly26> are any devs online

[19:51] <timotimo> i am

[19:52] <timotimo> what can we do for you

[19:53] <jackfly26> i was just wondering how much code you needed to change to move from parrot to moar

[19:53] <jackfly26> because i discovered that their operator parsing is broken

[19:54] <jackfly26> and that's like the last thing i implemented

[19:58] *** pmurias joined
[20:08] *** Voldenet left
[20:13] <guifa> I don‚Äôt know if that much has been documented on it.  I‚Äôd just rely on the tests to figure out what needs to be edited

[20:13] *** Voldenet joined
[20:13] *** Voldenet left
[20:13] *** Voldenet joined
[20:15] *** vrurg left
[20:21] *** molaf left
[20:21] *** uzl joined
[20:22] *** antoniogamiz joined
[20:24] <uzl> How do I get a USAGE output for MAIN like this: `git hash-object [-w] [-t TYPE] FILE`? Specifically this part: `[-t TYPE]`

[20:25] <uzl> I guess I could've something like `sub MAIN($type, $file, Bool :$hash-object is required, Bool :$w, Bool :$t) {}`

[20:25] <uzl> and then check if both `t` and `type` are provided.

[20:26] <timotimo> you can have :t(:$type) or something to that effect

[20:26] *** Black_Ribbon joined
[20:27] *** kurahaupo left
[20:27] *** robertle left
[20:28] *** kurahaupo joined
[20:33] <uzl> timotimo: Wouldn't this just create a shortname alias for $type though? Allowing for the use of either -t or -type?

[20:34] <timotimo> perhaps

[20:34] *** llfourn joined
[20:35] <jackfly26> so timotomo you work on moar right

[20:35] <uzl> ;

[20:35] <jackfly26> timotimo*

[20:35] <jackfly26> i saw the latest commit was by timo

[20:35] <timotimo> that's me, yeah

[20:37] <jackfly26> ok

[20:37] <jackfly26> cool

[20:38] <uzl> timotimo: ;-) but I think the use in [-t TYPE] is that whenever the -t flag is present it must be followed by TYPE. I could check for -t and TYPE but I thought there would be a more perlish way of achieving the same thing.

[20:38] *** Exodist joined
[20:38] <timotimo> there's pod comments you can attach to the parameters, but i'm not sure that does what you wish

[20:39] *** llfourn left
[20:40] <uzl> Do you mean #= ?

[20:41] <timotimo> yeah, #= and #|

[20:42] <uzl> Oh, I see but as you mention that wouldn't work. I'll stick with checking for the presence of both -t and TYPE then.

[20:43] <uzl> timotimo: Thanks!

[20:43] <timotimo> i don't know if it would work or not tbh

[20:43] <timotimo> maybe using a subset type named TYPE would do it?

[20:43] <timotimo> haven't touched that code in a while

[20:45] <timotimo> not sure if i ever even changed anything there actually

[20:45] <timotimo> i'll be AFK for a bit for now

[20:45] <uzl> I think #= would only attach a usage comment. I guess what I wanted was to make sure that whenever the -t flag it was followed by TYPE ("blob", "tree", etc.) without having to check for it myself inside MAIN.

[20:46] <uzl> Sure. See you!

[20:46] *** uzl left
[21:01] *** sena_kun left
[21:01] <Geth> ¬¶ doc: chsanch++ created pull request #2707: Change instances of 'timezone' with 'time zone'

[21:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2707

[21:23] *** skids left
[21:30] *** Praise joined
[21:30] *** Praise left
[21:30] *** Praise joined
[21:35] *** TreyHarris joined
[21:44] *** vike left
[21:47] *** vike joined
[21:56] *** netrino left
[22:08] *** pecastro left
[22:18] *** mowcat joined
[22:22] *** antoniogamiz left
[22:32] *** SyrupThinker left
[22:32] *** pmurias left
[22:32] *** SyrupThinker joined
[22:36] *** llfourn joined
[22:40] *** llfourn left
[22:53] *** john_parr left
[22:55] *** Xliff joined
[22:58] <Xliff> \o

[22:58] <Xliff> What's the basic implementation of pull-one?

[22:58] <Xliff> Iterator.pull-one, rather

[22:59] <timotimo> how do you mean?

[22:59] <timotimo> like, what's the smallest implementation of .pull-one that is correct?

[23:00] <Xliff> Yes.

[23:01] <timotimo> method pull-one { EndIteration }

[23:01] <Xliff> LOL

[23:01] <timotimo> actually, StopIteration i think

[23:01] <Xliff> OK. How about this. I want to wrap an array in an object, but I would like to provide both .iterator and .pull-one on the object.

[23:02] <Xliff> Would: "method pull-one { @A.iterator.pull-one }" be sufficient?

[23:02] <timotimo> but pull-one goes on the result of .iterator

[23:02] <timotimo> that's going to make a new iterator every time pull-one gets called

[23:03] <timotimo> at least that's the semantics i expect from calling .iterator on something

[23:03] <Xliff> OK. That's what I was worried about. I need a state var to hold that unless and until it matches EndIteration, don't I?

[23:03] <Xliff> Or would it just be enough to wrap iterator and not worry about pull-one?

[23:04] <timotimo> yeah, i wouldn't worry about .pull-one in your "own" class

[23:04] <Xliff> class A { does Positional; does Iterator; has @!a; ... } <- What else do I need to make A behave like an array?

[23:04] <timotimo> i think you actually want "also does Iterable"

[23:04] <timotimo> rather than Iterator

[23:05] <Xliff> OK.

[23:05] <Xliff> So methods for: iterator, elems, AT-POS, EXISTS-POS, join, and sort?

[23:06] <Xliff> method join(|c) { self!rebuild; @!a.join(c); } 

[23:07] <timotimo> actually .join will call .list.join for you if you derive from Any

[23:07] <timotimo> i'm not sure where sort lives, perhaps Positional, but i'd assume that also does .list.sort for you if you don't have an implementation

[23:08] <Xliff> Yeah, but wouldn't that be self.list.sort? I don't want that. I'd want @!a.sort.

[23:09] <Xliff> So would the sample join method above work?

[23:09] <Xliff> s/would/wouldn't/

[23:09] <timotimo> you'll want to |c actually

[23:09] <timotimo> otherwise a single positional gets passed, which is the capture object

[23:10] <Xliff> Ah. Was wondering about that. Thanks!

[23:10] <timotimo> NP

[23:24] *** nebuchadnezzar left
[23:24] *** MidCheck joined
[23:35] *** jackfly26 left
[23:39] *** vrurg joined
[23:39] *** MasterDuke joined
[23:39] *** MasterDuke left
[23:39] *** MasterDuke joined
[23:51] *** rindolf left
