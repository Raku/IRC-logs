[00:49] *** veesh left
[01:02] *** veesh joined
[01:22] *** molaf left
[01:24] *** veesh left
[01:35] *** molaf joined
[01:37] *** veesh joined
[01:38] *** Cabanossi left
[01:40] *** Cabanossi joined
[01:48] *** john_parr_ is now known as john_parr

[01:49] <discord6> <RaycatWhoDat> so, uh

[01:49] <discord6> <RaycatWhoDat> quick question

[01:49] <discord6> <RaycatWhoDat> Was everyone here Perl diehards or did y'all come over from another language?

[01:49] <timotimo> i was a perl hater, i came over from python

[01:50] <discord6> <RaycatWhoDat> How long did it take you to get fluent in Perl?

[01:50] <discord6> <RaycatWhoDat> 'Cause the sheer number of routines on three characters or less is doin' my head in

[01:50] <timotimo> can't remember, it's been a long while

[01:50] <discord6> <RaycatWhoDat> drat

[01:50] <timotimo> it wasn't too slow

[01:51] <timotimo> i still look up routines and methods on the docs every now and then, though

[01:51] <timotimo> anyway, gotta go to bed :)

[01:51] <timotimo> seeya

[01:52] <discord6> <RaycatWhoDat> Good night!

[01:55] <tobs> I programmed in C and Gambas a lot in my teens, then took a break due to studies and came back by learning Perl 5 (which was really fast thanks to Modern Perl). Soon after I started with Perl 6. For me, Perl is the last language (family) I'll ever wanna use

[01:58] *** eseyman left
[02:00] *** eseyman joined
[02:02] <Juerd> RaycatWhoDat: There is no shame in having the documentation open all the time while programming.

[02:04] <Juerd> People who don't fear the docs, often write much better code. Exceptions exist but I think they're rare.

[02:08] <tobs> I guess the main deal in such a big language is to learn where to expect what functionality. There's this notion of "strange consistency" in Perl 6 and consulting the docs often does its part in overcoming the "strange".

[02:11] <Elronnd> @RaycatWhoDat I never knew perl5 (although I still feel like I should learn it).  Came from a background of mostly c and d

[02:17] *** dogbert11 left
[02:28] <discord6> <Rogue> @RaycatWhoDat I did it over a very long period, not really trying super hard to learn the whole thing at any point

[02:28] <discord6> <Rogue> over time I accumulated the knowledge, especially by watching conference talks

[02:40] <discord6> <RaycatWhoDat> Got it. Thanks, all!

[02:44] *** Cabanossi left
[02:53] *** Cabanossi joined
[03:07] *** rbt joined
[04:07] *** committable6 left
[04:07] *** statisfiable6 left
[04:07] *** bloatable6 left
[04:07] *** nativecallable6 left
[04:07] *** evalable6 left
[04:07] *** coverable6 left
[04:07] *** squashable6 left
[04:07] *** notable6 left
[04:07] *** reportable6 left
[04:07] *** tellable6 left
[04:07] *** shareable6 left
[04:07] *** greppable6 left
[04:07] *** releasable6 left
[04:07] *** unicodable6 left
[04:07] *** benchable6 left
[04:07] *** bisectable6 left
[04:07] *** quotable6 left
[04:07] *** benchable6 joined
[04:07] *** rbt left
[04:07] *** rbt joined
[04:08] *** evalable6 joined
[04:08] *** ChanServ sets mode: +v evalable6

[04:08] *** squashable6 joined
[04:08] *** nativecallable6 joined
[04:08] *** ChanServ sets mode: +v nativecallable6

[04:08] *** releasable6 joined
[04:08] *** epony left
[04:09] *** sno left
[04:09] *** tellable6 joined
[04:09] *** committable6 joined
[04:09] *** ChanServ sets mode: +v committable6

[04:10] *** shareable6 joined
[04:10] *** ChanServ sets mode: +v shareable6

[04:10] *** unicodable6 joined
[04:10] *** ChanServ sets mode: +v unicodable6

[04:10] *** coverable6 joined
[04:10] *** epony joined
[04:10] *** greppable6 joined
[04:10] *** bloatable6 joined
[04:10] *** notable6 joined
[04:10] *** bisectable6 joined
[04:10] *** ChanServ sets mode: +v bisectable6

[04:11] *** reportable6 joined
[04:11] *** quotable6 joined
[04:11] *** ChanServ sets mode: +v quotable6

[04:12] *** molaf left
[04:12] *** statisfiable6 joined
[04:15] *** thowe left
[04:55] *** eythian left
[04:56] *** eythian joined
[04:56] *** eythian left
[04:56] *** eythian joined
[05:00] *** eythian left
[05:00] *** isBEKaml joined
[05:17] *** isBEKaml left
[05:22] *** eythian joined
[05:32] *** sauvin joined
[05:33] *** wamba joined
[05:35] <Geth_> ¬¶ doc: b592d12957 | (JJ Merelo)++ | template/footer.html

[05:35] <Geth_> ¬¶ doc: Redo footer

[05:35] <Geth_> ¬¶ doc: 

[05:35] <Geth_> ¬¶ doc: This closes #3031, although I'm not sure this file is actually used by

[05:35] <Geth_> ¬¶ doc: documentable now...

[05:35] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/b592d12957

[05:35] *** jmerelo joined
[06:08] <Geth_> ¬¶ doc: e68c06846e | (JJ Merelo)++ | doc/Type/Junction.pod6

[06:08] <synopsebot> Link: https://doc.perl6.org/type/Junction

[06:08] <Geth_> ¬¶ doc: Change wording, refs #3030

[06:08] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/e68c06846e

[06:16] *** jmerelo left
[06:28] *** wamba left
[06:35] *** john_parr_ joined
[06:36] *** john_parr left
[06:36] *** john_parr_ is now known as john_parr

[06:38] *** Doc_Holliwood left
[06:38] *** domidumont joined
[06:38] *** kurahaupo left
[06:40] *** kurahaupo joined
[07:01] *** wamba joined
[07:12] *** [Coke] left
[07:16] *** abraxxa joined
[07:26] *** wamba left
[07:27] *** Doc_Holliwood joined
[07:41] *** dakkar joined
[07:42] *** reach_satori left
[07:49] *** zakharyas joined
[08:01] *** aindilis left
[08:12] *** robertle joined
[08:49] *** Black_Ribbon left
[08:56] *** SyrupThinker joined
[08:58] <Geth_> ¬¶ perl6.org/master: 5 commits pushed by Alexey++, (Juan Juli√°n Merelo Guerv√≥s)++

[08:58] <Geth_> ¬¶ perl6.org/master: 47881eb57e | make Editors/IDEs part splitted per each editor, groups Atom items, group Emacs items

[08:58] <Geth_> ¬¶ perl6.org/master: b96b646490 | fix html typo

[08:58] <Geth_> ¬¶ perl6.org/master: 68e4241a70 | replace spaces in "Perl 6" to NBSP

[08:58] <Geth_> ¬¶ perl6.org/master: 09b6505caa | fix typo

[08:58] <Geth_> ¬¶ perl6.org/master: 642a4236f2 | Merge pull request #136 from Alexey-T/patch-1

[08:58] <Geth_> ¬¶ perl6.org/master: review: https://github.com/perl6/perl6.org/compare/211943b00287...642a4236f27d

[08:59] *** sena_kun joined
[09:00] <discord6> <michalm> Hi. I am just wondering. I would like to use Perl5 lib for connecting into RocksDB. So Perl6 would use it as a DB connector. RocksDB is really fast...i mean...really fast. How much slower it would be to use Perl5 inline for each putting and getting something from the database? Is there any kind of delay made by using inline Perl5?

[09:01] <AlexDaniel> michalm: anything that happens on the perl5 or rocksdb side will remain fast, but each call from perl6 will be slow

[09:02] <AlexDaniel> michalm: you should probably measure how slow it is

[09:02] <AlexDaniel> iirc there were many improvements to this, so it could be that it's already fast enough for you

[09:05] <discord6> <michalm> Is there any other way to use perl5 lib as a something more native?

[09:07] <AlexDaniel> that'd be a perl6 module with nativecall bindings for RocksDB

[09:07] <AlexDaniel> nobody has done that so far, I guess it just needs a volunteer

[09:08] <AlexDaniel> but, I mean‚Ä¶ how slow is slow for you? :)

[09:12] *** __jrjsmrtn__ left
[09:13] <discord6> <michalm> Random writes on a level of 50k ops/s, sequential writes on a level of 100k ops/s would be nice.

[09:25] *** __jrjsmrtn__ joined
[09:40] *** netrino joined
[09:46] *** reach_satori joined
[09:51] *** netrino left
[09:55] *** wamba joined
[10:02] *** wamba left
[10:08] *** zakharyas left
[10:09] *** wamba joined
[10:19] *** mowcat joined
[10:21] *** scimon joined
[10:21] *** pat_js joined
[10:22] *** reach_satori_ joined
[10:25] *** reach_satori left
[10:29] *** [Coke] joined
[10:30] *** wamba left
[10:30] *** wamba joined
[10:38] *** saorge left
[10:40] *** saorge joined
[10:49] *** zakharyas joined
[10:50] *** saorge left
[10:50] *** saorge joined
[10:52] *** saorge left
[10:53] *** saorge joined
[10:54] <discord6> <theangryepicbanana> @RaycatWhoDat I cane from a variety of languages like Ruby and Scala

[10:55] <discord6> <theangryepicbanana> Tcl's standard functions are vast and badly named, so Perl 6 wasn't that bad

[11:10] *** rbt left
[11:10] *** rbt joined
[11:17] *** xinming_ left
[11:18] *** xinming_ joined
[11:19] *** __jrjsmrtn__ left
[11:20] <AlexDaniel> michalm: yeah, maybe not extremely fast but still pretty fast. Try it maybe?

[11:21] <AlexDaniel> michalm: either way I'm interested to know how many ops/s you'll get

[11:26] *** __jrjsmrtn__ joined
[11:38] <timotimo> i mean, Text::CVS with Inline::Perl5 still beats the pure-perl6 version :)

[11:38] <timotimo> even though it does at least one call per line

[11:38] <AlexDaniel> hmm

[11:39] <timotimo> but it looks like rocksdb has a c++ api, which is a little more "interesting" to bind with NativeCall

[11:42] *** mowcat left
[11:42] <discord6> <michalm> True, but at the end it would take more time. RocksDB is a little bit more complicated then LevelDB, but way more powerful. How difficult it would be to use Perl5 bindings and change them into Perl6 bindings?

[11:45] <timotimo> the way perl5 bindings are made is very different from how you bind with perl6

[11:45] <timotimo> but binding stuff with perl6 is much easier

[11:52] <discord6> <theangryepicbanana> unless you want to interface with C++

[11:53] <timotimo> binding C++ stuff with perl5 is equivalent to first building a C interface library and binding that

[11:53] <discord6> <theangryepicbanana> no I meant when binding C++ to Perl 6

[11:53] <timotimo> at least in perl6 you can directly bind :)

[11:54] <discord6> <theangryepicbanana> well sure

[11:56] <guifa> Ooh, I think I just figured out how to better integrate the localized data matching

[11:57] * guifa realized he can totally subclass Regex to create a token that uses a non-regex internal definition

[11:58] <guifa> and I bet that could token be exported via a ‚Äúuse Intl::CLDR::DateTime::Regex‚Äù inside of a grammar definition to enable <local-date> 

[11:58] <guifa> that token could*

[12:12] <discord6> <RaycatWhoDat> So, if I were to write an article on Perl 6, what would you guys say are its best features? And which ones do other languages not have?

[12:12] <discord6> <Rogue> I would definitely include Supplies and concurrency stuff, and of course grammars and improved regexes

[12:13] *** rbt left
[12:16] <sena_kun> easy paralellism, react-whenever, continuations with gather/take, gradual typing out of the box, multimethods, laziness, metaobject protocol, _a lot_ of things are first-class citizens, e.g. parameters, powerful given/when, roles and OO "done right", sub EXPORT, traits + custom traits...

[12:16] <sena_kun> very powerful signatures

[12:18] <discord6> <Rogue> Oh yeah traits are radical

[12:18] <discord6> <Rogue> but you'll definitely have to explain that they're not what other languages call "traits"

[12:21] <timotimo> true, though perl6 has those as well with roles

[12:21] *** zakharyas left
[12:23] *** gabiruh left
[12:24] *** gabiruh joined
[12:41] *** lucasb joined
[12:43] <discord6> <RaycatWhoDat> How would you sum up your "developer experience" with Perl 6? What sparks joy for you, if you will?

[12:44] *** pmurias joined
[12:44] <pmurias> why do we have a Mu.set_why method?

[12:44] <pmurias> should it be documented and tested *or* removed?

[12:47] <pmurias> hoelzro: hi

[12:47] <pmurias> hoelzro: why do we need a .set_why on Mu?

[12:59] <pmurias> ahh found in irc logs it that it is a sort of workaround from years ago

[13:01] *** molaf joined
[13:19] *** pmurias left
[13:21] *** pmurias joined
[13:22] *** cpan-p6 left
[13:23] *** cpan-p6 joined
[13:23] *** cpan-p6 left
[13:23] *** cpan-p6 joined
[13:30] *** isBEKaml joined
[13:39] *** Cabanossi left
[13:44] <discord6> <michalm> I am a quite new in Perl6 but from my point of view (I am using mostly Elixir and Rust)....Perl6 can be whatever you want. It is really flexible. This is a double edge sword because there are plenty of ways to do one thing. I can find Perl6 as a POC language in my tech-stack.

[13:53] *** Cabanossi joined
[14:00] *** zakharyas joined
[14:06] <discord6> <RaycatWhoDat> m: prompt "%s %s %s".printf(1, 2, 3);

[14:06] <evalable6> RaycatWhoDat, rakudo-moar d00674b31: OUTPUT: ¬´1 2 3True¬ª

[14:06] <discord6> <RaycatWhoDat> Why does this output True?

[14:07] <timotimo> printf already prints to the output

[14:07] <timotimo> and returns true

[14:07] <timotimo> you probably want sprintf there

[14:07] <discord6> <RaycatWhoDat> Ahhh

[14:08] <discord6> <RaycatWhoDat> Bless

[14:08] *** molaf left
[14:08] <timotimo> self.bless

[14:08] *** knarkhov joined
[14:13] <pmurias> SmokeMachine: how do we want to have .defined work on js objects?

[14:14] <discord6> <RaycatWhoDat> You probably want to check on undefined and assume null to be "defined".

[14:14] <discord6> <RaycatWhoDat> But, that's just me.

[14:15] <SmokeMachine> pmurias: what about something like this? https://github.com/FCO/MemoizedDOM/blob/513969028aff66ce1ccfd33017f5fb8f01356cf6/examples/todo/todo.p6#L3

[14:15] <Doc_Holliwood> Ha!

[14:19] <pmurias> SmokeMachine: also thought always returning True would work

[14:20] <SmokeMachine> pmurias: at least that was what I've used on MemoizedDOM...

[14:20] <SmokeMachine> s/I/we/g

[14:21] <pmurias> there isn't a distinction between constructors and regular js functions so I think they should be treated as defined too

[14:25] <pmurias> SmokeMachine: both undefined and null should be converted to Mu?

[14:26] <SmokeMachine> pmurias: Mu or Nil? maybe undefined => Mu, null => Nil?

[14:27] <discord6> <RaycatWhoDat> I like that one

[14:27] <discord6> <RaycatWhoDat> Although I dunno what Mu is

[14:27] <discord6> <RaycatWhoDat> Is it everything or nothing?

[14:28] <SmokeMachine> no... if it is stored on a var it will restore its default value... I think we shouldn't use Nil... :(

[14:28] <SmokeMachine> RaycatWhoDat: is the parent of all classes...

[14:28] <pmurias> SmokeMachine: good point about not using Nil

[14:29] *** robertle left
[14:29] <SmokeMachine> RaycatWhoDat: https://docs.perl6.org/type/Mu

[14:29] <pmurias> distinguishing if a js method returns null or undefined isn't a common thing right?

[14:30] <discord6> <RaycatWhoDat> null is just a return value, yeah? A function would normally return undefined.

[14:30] *** robertle joined
[14:30] <SmokeMachine> pmurias: I don't know if it make sense... but undefined and null aren't the same meaning... would it make any sense if null return Mu and undefined return Any?

[14:32] <discord6> <Rogue> Don't we have Nil already?

[14:32] *** wamba left
[14:33] <discord6> <Rogue> undefined definitely should return Any given the behavior of everything else in the system

[14:34] <vrurg> m: my $foo := Nil; say $foo.WHAT

[14:34] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Nil‚ê§¬ª

[14:34] <vrurg> ^ you can return Nil.

[14:34] <vrurg> it's just you'd have to bind instead of assigning it.

[14:34] <pmurias> RaycatWhoDat: I don't understand the question

[14:34] *** mowcat joined
[14:34] <jdv79> vrurg: it appears submodule.recurse=true is not compatible with rebase so "git pull --rebase" or "pull.rebase=true" will leave submodules alone in the current setup

[14:34] <pmurias> m: my $foo = Nil; say $foo.WHAT

[14:34] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(Any)‚ê§¬ª

[14:34] <pmurias> m: my $foo = Mu; say $foo.WHAT

[14:34] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(Mu)‚ê§¬ª

[14:35] <vrurg> jdv79: true, unfortunately. Sometimes it works, but not always.

[14:35] <jdv79> that would have been a reason i would not have used submodules

[14:35] <jdv79> *sigh*

[14:35] <jdv79> that breaks some peoples workflows

[14:36] <vrurg> jdv79: but as I mentiond earlier, there is no better way to share code among projects. :(

[14:37] <jdv79> there are many ways to share code between projects - that's not true

[14:37] <vrurg> jdv79: maybe you could turn off recursion (leave rakudo.initialized alone or Configure would reset recusrsion again) and do updates manually or in a script.

[14:38] <jdv79> anyway, i guess i'll try to work around it with doc updates or hooks or something for me and people like me

[14:38] <vrurg> jdv79: there're many ways, I know. But which one would be better?

[14:39] <jdv79> was this limittation of git submodules known when they were chosen to be used?

[14:40] <vrurg> jdv79: no. But even if it would be ‚Äì there're already submodules in both nqp and moar.

[14:41] <jdv79> *that* concerns me

[14:41] <vrurg> jdv79: And unless patrickb has some plans for further changes in build, I'm for now done with what was planned. I don't expect any more changes to nqp-configure on my side for a long time.

[14:41] * vrurg is afk

[14:49] <discord6> <RaycatWhoDat> Wrote a small script. Any comments on how I can shorten it? https://gist.github.com/RayMPerry/bb94cad1277e5e6de1f9b8b193766e79

[14:54] <SmokeMachine> Rogue, Why Any and not Mu?

[14:54] <sena_kun> `Str :$folder is require` is just `:$folder!`

[14:55] <sena_kun> with type, of course

[14:55] <SmokeMachine> m: my $foo := Nil; say $foo.WHAT; my $a is default(42) = 13; sat $a; $a = $foo; say $a

[14:55] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    sat used at line 1. Did you mean 'say', 'set'?‚ê§‚ê§¬ª

[14:55] <sena_kun> RaycatWhoDat why sprintf and not plain interpolation? `to spinoff $folder from $branch` will do what you want

[14:57] <sena_kun> RaycatWhoDat also, given you just start commands and don't need to process results, you can have invocations in array of arrays of strings and just call all of them in a loop

[14:57] <discord6> <RaycatWhoDat> What do you mean?

[14:57] <sena_kun> to factor out `return 1 if so $_` part

[14:57] <SmokeMachine> m: my $foo := Nil; say $foo.WHAT; my $a is default(42) = 13; say $a; $a = $foo; say $a

[14:57] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Nil‚ê§13‚ê§42‚ê§¬ª

[14:58] <sena_kun> RaycatWhoDat mean by what, sorry?

[14:58] <SmokeMachine> vrurg: ^^

[14:58] <discord6> <RaycatWhoDat> sena_kun: "invocations in array of arrays of strings and just call all of them in a loop"

[14:58] <discord6> <RaycatWhoDat> Is there a specific construct for that or is it what I think it is?

[14:59] <sena_kun> nothing specific, so likely what you think

[14:59] <sena_kun> ah, about sprintf <- will it escape your input?

[14:59] <sena_kun> because otherwise that's a security issue

[14:59] <discord6> <RaycatWhoDat> I don't think so.

[15:00] <discord6> <RaycatWhoDat> I wonder if git escapes characters

[15:00] <discord6> <RaycatWhoDat> Otherwise, time to look up escaping routines

[15:01] <sena_kun> m: my @commands = [["fetch, "foo", $bar], ["reset", "foo"]]; for @commands -> @command { my $result = say 'git', |@command; #` ( <- not say, but `run`, also return 1 if $result; ) }

[15:01] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3my @commands = [["fetch, "7‚èè5foo", $bar], ["reset", "foo"]]; for @com‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement‚Ä¶¬ª

[15:01] <sena_kun> m: my @commands = [["fetch, "foo", "baz"], ["reset", "foo"]]; for @commands -> @command { my $result = say 'git', |@command; #` ( <- not say, but `run`, also return 1 if $result; ) }

[15:01] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3my @commands = [["fetch, "7‚èè5foo", "baz"], ["reset", "foo"]]; for @co‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement‚Ä¶¬ª

[15:01] <sena_kun> m: my @commands = [["fetch", "foo", "baz"], ["reset", "foo"]]; for @commands -> @command { my $result = say 'git', |@command; #` ( <- not say, but `run`, also return 1 if $result; ) }

[15:01] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3but `run`, also return 1 if $result; ) }7‚èè5<EOL>‚ê§¬ª

[15:02] <sena_kun> m: my @commands = [["fetch", "foo", "baz"], ["reset", "foo"]]; for @commands -> @command { my $result = say 'git', |@command; #`( <- not say, but `run`, also return 1 if $result; ) }

[15:02] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´gitfetchfoobaz‚ê§gitresetfoo‚ê§¬ª

[15:02] <discord6> <RaycatWhoDat> Ah, gotcha.

[15:03] <tobs> and then things like `run("git", "remote", "set-url", "origin", $repository)` can be written as `run <git remote set-url origin $repository>`

[15:04] <sena_kun> with a nice escaping of input

[15:04] <sena_kun> added to that, that'd be nice

[15:04] <sena_kun> :)

[15:05] <lizmat> doesn't the $repository require << >> ?

[15:05] <tobs> lizmat: it does

[15:05] <lizmat> oki

[15:05] <discord6> <RaycatWhoDat> oh, hey, it's lizmat

[15:05] <discord6> <RaycatWhoDat> howdy

[15:05] <tobs> and I thought interpolation would take care of putting it into one item?!

[15:05] <tobs> but apparently doesn't

[15:05] *** Sgeo joined
[15:05] <lizmat> <foo> is an item, <foo bar> is a List

[15:05] <Altreus> consistent

[15:05] <lizmat> m: dd <foo>

[15:05] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´"foo"‚ê§¬ª

[15:06] <lizmat> m: dd <foo bar>

[15:06] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´("foo", "bar")‚ê§¬ª

[15:06] <lizmat> m: my $bar = 42; dd <foo $bar>

[15:06] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´("foo", "\$bar")‚ê§¬ª

[15:06] <lizmat> m: my $bar = 42; dd <<foo $bar>>

[15:06] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´("foo", IntStr.new(42, "42"))‚ê§¬ª

[15:06] <lizmat> m: my $bar = 42; say <<foo $bar>>  # clearer with say

[15:06] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(foo 42)‚ê§¬ª

[15:07] <tobs> lizmat: I mean `run ¬´touch $path¬ª` will not do what I mean if $path contains a space. I was under the impression that $path would be an item in the list constructed by ¬´¬ª, so that touch would create the file I intended.

[15:07] *** pmurias left
[15:07] <lizmat> m: my $bar = "bar baz"; say <<foo $bar>>  # clearer with say

[15:07] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(foo bar baz)‚ê§¬ª

[15:08] <lizmat> m: my $bar = "bar baz"; dd <<foo $bar>>

[15:08] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´("foo", "bar", "baz")‚ê§¬ª

[15:08] <lizmat> I guess not

[15:08] <lizmat> m: my $bar = "bar baz"; dd <<foo '$bar'>>

[15:08] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´("foo", "\$bar")‚ê§¬ª

[15:08] <tobs> hum

[15:08] *** Sgeo_ left
[15:08] <lizmat> m: my $bar = "bar baz"; dd <<foo "$bar">>

[15:08] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´("foo", "bar baz")‚ê§¬ª

[15:08] <lizmat> tobs ^^

[15:09] *** wamba joined
[15:09] <tobs> it's the shell all over again :/

[15:09] <lizmat> need double quotes to indicate single item

[15:09] <tobs> but thanks

[15:09] <lizmat> run <<touch '$path'>>

[15:09] <lizmat> run <<touch "$path">>

[15:10] <lizmat> should do what you want, if $path contains spaces

[15:10] <lizmat> or does it not?

[15:10] <tobs> it does

[15:10] <knarkhov> Hi, Liz! Just want to say Hello üòé 

[15:11] <tony-o> tobs: you also want to escape any " that are in the string

[15:11] <tony-o> or no?

[15:12] <tony-o> seems no need to

[15:12] *** pat_js left
[15:16] *** dakkar left
[15:16] *** dakkar joined
[15:20] *** robertle left
[15:24] *** robertle joined
[15:26] *** isBEKaml left
[15:29] *** aindilis joined
[15:29] *** robertle left
[15:31] *** Actualeyes joined
[15:31] *** pat_js joined
[15:33] *** domidumont left
[15:37] *** jmerelo joined
[15:39] *** mowcat left
[15:44] *** robertle joined
[15:48] *** robertle left
[15:55] <Doc_Holliwood> that next release I hear is scheduled, will that be 6.e?

[16:01] *** pat_js left
[16:13] <Doc_Holliwood> mmh. the wikipedia article could need some love.

[16:13] <Doc_Holliwood> but i am not going to descend into that snake pit, no mum, not me

[16:15] <AlexDaniel> Doc_Holliwood: there are rakudo releases and language releases. Every new rakudo release is simply faster and more stable

[16:15] <AlexDaniel> Doc_Holliwood: and these are more, uh, regular.

[16:15] <Altreus> Send indy in

[16:15] <AlexDaniel> Doc_Holliwood: I'm not sure when we'll have our next language release

[16:16] *** dogbert11 joined
[16:16] <AlexDaniel> Doc_Holliwood: probably 2020, or maybe very late 2019 if we're lucky

[16:16] <AlexDaniel> lizmat: <touch -->, $path

[16:16] <AlexDaniel> much easier and lesser chance to blow your foot off

[16:16] <Doc_Holliwood> Can I specify the minimal language version in META6?

[16:17] <AlexDaniel> Doc_Holliwood: yes: https://docs.perl6.org/language/modules#index-entry-META6.json-META6.json

[16:17] <Doc_Holliwood> sorry. I meant rakudo version

[16:18] <AlexDaniel> lizmat: btw there's also  "perl" : "6.c" in META6.json

[16:18] <AlexDaniel> might as well mention it cuz we're tweaking the PR anyway

[16:19] <Doc_Holliwood> Because, my module Scalar::History relies on a feature Liz just implemented

[16:19] <AlexDaniel> (regardless of what comes out of the discussion about extensions, the idea of deprecating .t is not going through for sure)

[16:25] *** scimon left
[16:25] *** discoD joined
[16:28] *** MasterDuke joined
[16:33] *** dakkar left
[16:37] *** mowcat joined
[16:38] *** mowcat left
[16:47] *** mowcat joined
[16:47] *** reach_satori_ left
[16:50] *** wamba left
[16:51] *** wamba joined
[16:52] <discoD> How should I feel about seeing 'New type Stash for Int is not a mixin type' when loading my module in the REPL? I started seeing this after I updated rakudo last night.

[16:52] <discoD> Everything still works, but I don't see the message when loading ecosystem modules in the REPL, which makes me wonder. I don't see the message when using the module from a script.  Is this a bug I should golf and report?

[16:55] <jnthn> discoD: Did you upgrade to the latest release, or a source build of HEAD?

[16:56] <discoD> source build

[16:56] <discoD> This is Rakudo version 2019.07.1-357-gd00674b31 built on MoarVM version 2019.07.1-233-g270f1b0be

[16:56] <jnthn> Hm, odd. I did see those in the past, but then haven't for a very long time.

[16:57] <jnthn> Well, month or two, anyway

[16:57] <jnthn> So I assumed it got fixed, but if you have it at HEAD, hmm.

[16:58] <discoD> I've never seen it, so I wanted to ask. I don't think I'm doing anything too strange, and things still work. I'll mess around with it a bit.

[17:02] *** chloekek joined
[17:08] *** robertle joined
[17:18] <Geth_> ¬¶ doc: 5587b5d15e | (JJ Merelo)++ | doc/Type/Junction.pod6

[17:18] <synopsebot> Link: https://doc.perl6.org/type/Junction

[17:18] <Geth_> ¬¶ doc: Changes the example

[17:18] <Geth_> ¬¶ doc: 

[17:18] <Geth_> ¬¶ doc: I couldn't find a nice way to make it work with grep, so I've changed the example and the wording. Closes #3030

[17:18] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/5587b5d15e

[17:20] *** Guest93 left
[17:21] *** Guest93 joined
[17:24] *** wildtrees joined
[17:24] *** knarkhov left
[17:25] *** wildtrees left
[17:25] *** wildtrees joined
[17:26] <jmerelo> m: .say for <a b c>.any

[17:26] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(Mu)‚ê§¬ª

[17:28] <jmerelo> m: my $j = any "a", "b"; say $j; .say for $j

[17:28] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´any(a, b)‚ê§any(a, b)‚ê§¬ª

[17:28] <jmerelo> m: my $j = + any "2", "3"; say $j; .say for $j

[17:28] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´any(2, 3)‚ê§any(2, 3)‚ê§¬ª

[17:30] *** zakharyas left
[17:35] <tobs> jmerelo: I don't think Junctions are iterable. Quoting the (dated) https://perlgeek.de/blog-en/perl-5-to-6/08-junctions.html: Junctions are not sets; if you try to extract items from a junction, you are doing it wrong, and should be using a Set instead.

[17:35] <tobs> grep'ing or for'ing them will not give you the elements.

[17:36] <jmerelo> tobs: oh but they are. 

[17:36] <jmerelo> m: my $j = <a b>.any; gather for $j { .say }

[17:36] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´a‚ê§b‚ê§¬ª

[17:36] <tobs> I wonder if I'm in the wrong film today...

[17:36] <jmerelo> tobs ... as long as you say the magic word...

[17:37] <jmerelo> Just posted that in Stackoverflow https://stackoverflow.com/questions/58122017/can-gather-be-used-to-unroll-junctions

[17:37] <jmerelo> m: my $j = <a b>.any; for $j { .say }

[17:37] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´any(a, b)‚ê§¬ª

[17:37] <jmerelo> so, what gives?

[17:39] <tobs> earlier today I was surprised by how interpolation into ¬´¬ª-quoted lists works, now Junctions are not black boxes anymore...

[17:40] <jmerelo> m: my $j = <a b>.any; for $j.>>take { .say }

[17:40] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing dot on method call‚ê§at <tmp>:1‚ê§------> 3my $j = <a b>.any; for $j.>>7‚èè5take { .say }‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[17:41] <jmerelo> m: my $j = <a b>.any; for $j>>.take { .say }

[17:41] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´take without gather‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:41] <tobs> I think but don't worry, the ¬´¬ª one is documented. It's just frustrating to see that you thought you knew something.

[17:41] <jmerelo> m: my $j = <a b>.any; for gather $j>>.take { .say }

[17:41] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´a‚ê§b‚ê§¬ª

[17:41] <tobs> but in this case, I can still hope that it's an oversight

[17:44] <tobs> m: my $j = <a b>.any; my @guts = gather $j¬ª.take; dd @guts

[17:44] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´Array @guts = ["a", "b"]‚ê§¬ª

[17:47] <jmerelo> Is it possible that gather autothreads? Same as >>?

[17:48] <jmerelo> m: my $j = <a b>.any; for gather $j { .say }

[17:48] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of $j in sink context (line 1)‚ê§¬ª

[17:48] <jmerelo> m: my $j = <a b>.any; gather do $j { .say }

[17:48] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3my $j = <a b>.any; gather do $j7‚èè5 { .say }‚ê§    expecting any of:‚ê§        inf‚Ä¶¬ª

[17:48] <jmerelo> m: my $j = <a b>.any; gather while $j { .say }

[17:48] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´(signal XFSZ)(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚ê§(Any)‚Ä¶¬ª

[17:54] *** wildtrees left
[17:55] *** wildtrees joined
[18:07] <discord6> <Rogue> SmokeMachine: almost anytime something is undefined it ends up being an Any type object

[18:08] <discord6> <RaycatWhoDat> m: my @commands = [["status", "--verbose"]]; for @commands -> @command { say |@command; };

[18:08] <evalable6> RaycatWhoDat, rakudo-moar d00674b31: OUTPUT: ¬´(exit code 1) Type check failed in binding to parameter '@command'; expected Positional but got Str ("status")‚ê§  in block <unit> at /tmp/R6PfiVFPgd line 1‚ê§‚ê§¬ª

[18:09] <discord6> <RaycatWhoDat> What am I missing here?

[18:12] <discord6> <Rogue> looks like the brackets are collapsing somehow

[18:12] <discord6> <Rogue> I got around it by adding a comma

[18:12] <discord6> <Rogue> [['status', '--verbose'],]

[18:12] <discord6> <RaycatWhoDat> Tjat

[18:13] <discord6> <RaycatWhoDat> That's so weird*

[18:13] <discord6> <Rogue> Yeah I'm not sure what's causing that

[18:13] <discord6> <RaycatWhoDat> Does [[ do something in Perl 6?

[18:13] <discord6> <Rogue> it's not an assignment thing either

[18:13] <discord6> <Rogue> Maybe someone else will know

[18:14] <discord6> <Rogue> [[ is not special--I tried putting extra space between the brackets and it was the same

[18:14] <discord6> <RaycatWhoDat> Surely, it's not confusing it with the circumfix []

[18:14] <discord6> <RaycatWhoDat> I hope üòê

[18:15] <Doc_Holliwood> how do I pass an Int by reference?

[18:15] <discord6> <RaycatWhoDat> You mean, the container?

[18:15] <Doc_Holliwood> yes

[18:15] <SmokeMachine> Rogue: every type object is undefined...

[18:16] <discord6> <Rogue> It's being passed by reference by default

[18:16] <discord6> <Rogue> It's just that things like += or whatever actually assign a new instance of Int into the container

[18:16] <Doc_Holliwood> apparently not. my Scalar::History objects lose their history when I pass them into a function

[18:16] <SmokeMachine> m: .defined.say for Any, Int, Str, Mu

[18:16] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´False‚ê§False‚ê§False‚ê§False‚ê§¬ª

[18:16] <discord6> <Rogue> but for what you want to do (I assume), you want is rw on the parameter

[18:17] <tobs> RaycatWhoDat: it's a consequence of the single argument rule. There's an example contained in a snippet here: https://docs.perl6.org/language/list#index-entry-Single_Argument_Rule

[18:18] <Doc_Holliwood> nah, i tried rw, then i get "Parameter '$n' expected a writable container, but got Int value"

[18:18] <tobs> It's not explicitly stated there, but I guess you should think of the circumfix [] as iterating its argument. Then the rule applies.

[18:18] <discord6> <Rogue> Doc_Holliwood: How are you calling it

[18:19] <discord6> <Rogue> if you're calling it with a literal, that'll happen

[18:19] <SmokeMachine> jmerelo: isn‚Äôt it ‚Äúiterating‚Äù just because it is running the for once for each value?

[18:19] <discord6> <RaycatWhoDat> Interesting. Thanks for the literature, tobs

[18:19] <SmokeMachine> m: sub bla($a) { $a.say }; bla <a b>.any

[18:19] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´a‚ê§b‚ê§¬ª

[18:20] <Doc_Holliwood> there. Line 74

[18:20] <Doc_Holliwood> https://pastebin.com/qgrMGGxH

[18:20] <discord6> <Rogue> Also Raycat you don't actually need the outer brackets, as ['a', 'b'], ['c', 'd'] will be a List on its own, which will get turned into an Array as it gets assigned into an @-sigiled variable

[18:21] <discord6> <Rogue> Also if it's all literals, you can do something nice like <status --verbose>, <whatever --however>

[18:22] <discord6> <RaycatWhoDat> buh

[18:22] <discord6> <RaycatWhoDat> perl6-mode isn't a fan of that

[18:22] <discord6> <RaycatWhoDat> But it works, so I dig it

[18:23] <discord6> <Rogue> Yeah I always reach for the word-quoting construct when I have string literals

[18:23] <discord6> <Rogue> there's also ¬´¬ª (aka <<>>)

[18:24] *** sauvin left
[18:24] <discord6> <Rogue> ¬´¬ª adds quote protection and variable interpolation

[18:25] <jmerelo> SmokeMachine: no idea. I think it's got something to do with autothread

[18:25] <discord6> <Rogue> so you can have spaces in your strings if you need

[18:26] <discord6> <Rogue> m: ¬´hello hi 'hello world' 'other greetings'¬ª eqv ('hello', 'hi', 'hello world', 'other greetings')

[18:26] <evalable6> Rogue, rakudo-moar d00674b31: OUTPUT: ¬´WARNINGS for /tmp/T9DbRpTcwV:‚ê§Useless use of "eqv" in expression "¬´hello hi 'hello world' 'other greetings'¬ª eqv ('hello', 'hi', 'hello world', 'other greetings')" in sink context (line 1)‚ê§¬ª

[18:26] <discord6> <Rogue> m: say ¬´hello hi 'hello world' 'other greetings'¬ª eqv ('hello', 'hi', 'hello world', 'other greetings')

[18:26] <evalable6> Rogue, rakudo-moar d00674b31: OUTPUT: ¬´True‚ê§¬ª

[18:27] <discord6> <RaycatWhoDat> That's pretty sweet.

[18:27] <discord6> <Rogue> replace ¬´¬ª with <> and you'd have six strings, split very literally on spaces

[18:28] <Geth_> ¬¶ problem-solving: 999684ba5d | (Moritz Lenz)++ | README.md

[18:28] <Geth_> ¬¶ problem-solving: No more moritz reviewer

[18:28] <Geth_> ¬¶ problem-solving: 

[18:28] <Geth_> ¬¶ problem-solving: see https://github.com/perl6/problem-solving/pull/89#issuecomment-535629589 for context

[18:28] <Geth_> ¬¶ problem-solving: review: https://github.com/perl6/problem-solving/commit/999684ba5d

[18:29] <discord6> <Rogue> Doc_Holliwood: I think your issue is because you're binding $int to whatever Scalar::History.create(10, Int) returns

[18:29] <discord6> <Rogue> which, given the error, is probably a readonly container

[18:29] <Doc_Holliwood> `is raw` looks promising

[18:29] <discord6> <Rogue> return returns a readonly, return-rw returns a rw container

[18:30] <discord6> <Rogue> any reason you're binding $int instead of assigning?

[18:30] <[Coke]> moritz++

[18:30] <SmokeMachine> m: sub bla(Any $a) { $a.say }; sub ble(Mu $a) { $a.say }; bla <a b>.any; ble <a b>.any

[18:30] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´a‚ê§b‚ê§any(a, b)‚ê§¬ª

[18:30] <[Coke]> tough call.

[18:35] <moritz> it was.

[18:38] <[Coke]> I made a much easier call not to try to put my name on the list.

[18:38] *** Cabanossi left
[18:40] <jmerelo> I started programming in Perl circa 1993

[18:40] <jmerelo> I still do, and I've written a lot of stuff. 

[18:41] <jmerelo> But starting conversations with "Well, Perl 6 is not really the next version of Perl" gets tiring after a while.

[18:43] <jmerelo> Having a separate identity will help in the long run. Outside Google, it's almost impossible to search for perl 6 stuff without getting Perl results

[18:44] *** Black_Ribbon joined
[18:44] *** Cabanossi joined
[18:45] *** TreyHarris left
[18:45] <jmerelo> I understand there are risks. But I really am looking forward to seeing the change take place.

[18:46] <discoD> jnthn: I took a closer look, and it was actually failing to load in the REPL while working fine in scripts. I nuked .precomp/ in the module source dir, and it started working in the REPL again. I've tested a few different commits of the module to rule out any changes I made, and I can't recreate the issue anymore. I'm out of my element here, but maybe it's an issue with precomp, uninstalled modules, and a new compiler version. no big deal

[18:46] <Doc_Holliwood> Ok, progress. This works https://pastebin.com/qDvEQetq (lines 51 + )

[18:47] <Doc_Holliwood> However, I don't like the "is raw". Can I achieve the same from the caller side?

[18:56] *** zakharyas joined
[18:58] *** TreyHarris joined
[19:01] *** jmerelo left
[19:07] *** Cabanossi left
[19:07] *** khisanth_ left
[19:07] *** Itaipu_ left
[19:10] <Geth_> ¬¶ doc: c3c94206d9 | Coke++ | template/footer.html

[19:10] <Geth_> ¬¶ doc: whitespace

[19:10] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/c3c94206d9

[19:11] *** Cabanossi joined
[19:11] <discord6> <Rogue> Doc_Holliwood: again, is rw would work if you weren't binding the variable

[19:12] <Doc_Holliwood> the binding is must though

[19:12] <Doc_Holliwood> no binding, no magic

[19:12] *** mowcat left
[19:12] <Doc_Holliwood> it's ok though.

[19:14] <discord6> <Rogue> I guess you could request upstream to have that return-rw instead

[19:19] <Doc_Holliwood> to have what return-rw?

[19:19] <discord6> <Rogue> Scalar::History.create

[19:20] *** khisanth_ joined
[19:23] <Doc_Holliwood> Oh, it already does

[19:26] *** mowcat joined
[19:28] *** molaf joined
[19:28] <Geth_> ¬¶ problem-solving: vrurg++ created pull request #109: Clarify the situation with .t extension

[19:28] <Geth_> ¬¶ problem-solving: review: https://github.com/perl6/problem-solving/pull/109

[19:28] *** netrino joined
[19:32] *** Itaipu joined
[19:35] <discord6> <Rogue> Hmm, I don't know why is rw isn't working as expected then

[19:38] *** MasterDuke left
[19:39] <Doc_Holliwood> Probably because those scalars are impostors

[19:41] <Grinnz> vrurg: that does seem like the correct way to move forward given what jnthn has said but doing a pr to propose changes to a pr seems a little silly :D

[19:43] <vrurg> Grinnz: it was a discussion with AlexDaniel preceeding this. I'm proposing a changes to changes. :)

[19:43] <vrurg> *a change

[19:44] <vrurg> Basically, I agreed to Alex consideration that deprecating .t isn't that good idea after all. 

[19:44] <vrurg> afk&

[19:47] *** sno joined
[19:54] *** pmurias joined
[19:55] *** abraxxa left
[20:11] *** krychu joined
[20:15] *** krychu left
[20:15] *** chloekek left
[20:17] *** mowcat left
[20:28] *** robertle left
[20:41] *** krychu joined
[20:43] *** Itaipu left
[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: 0de1d74e16 | (Vadim Belman)++ | solutions/language/PATH-TO-RAKU.md

[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: Clarify the situation with .t extension

[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: 

[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: After carefully considering @AlexDaniel review, #108, and

[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: [some IRC chatting](https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-09-26#l179),

[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: I would like to propose to remove the part about `.t` deprecation. I do

[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: it with a some regret as this proposal would postpone the voting if

[20:44] <Geth_> ¬¶ problem-solving/path-to-raku: accepted, but:

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: 

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: 1. Tools currently supporting TAP are used to this extension. We can't ask all of them to produce the deprecation message for Raku only.

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: 2. This would allow a user to choose the extension more suitable to the tools he/she is using and even up to his personal preferences.

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: 3. In a way, this conform to TIMTOWTDI.

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/0de1d74e16

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: dd8dcd5b4e | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | solutions/language/PATH-TO-RAKU.md

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: Merge pull request #109 from vrurg/path-to-raku

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: 

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: Clarify the situation with .t extension

[20:45] <Geth_> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/dd8dcd5b4e

[20:46] *** zakharyas left
[20:49] <Grinnz> yep that's the whole commit message XD

[20:50] *** discoD left
[20:50] *** asie joined
[20:51] *** Itaipu joined
[21:09] *** wamba left
[21:22] *** AlexDaniel left
[21:37] *** Itaipu left
[22:07] *** epony left
[22:08] *** sena_kun left
[22:10] *** discoD joined
[22:18] *** Itaipu joined
[22:24] *** pmurias left
[22:26] *** patrickb joined
[22:26] *** krychu left
[22:41] *** pmurias joined
[22:42] <cpan-p6> New module released to CPAN! LibXML (0.1.0) by 03WARRINGD

[22:45] *** khisanth_ left
[22:53] *** pmurias left
[23:00] *** khisanth_ joined
[23:08] *** epony joined
[23:10] *** lucasb left
[23:18] *** Actualeyes left
[23:18] *** Actualeyes joined
[23:28] *** netrino left
[23:33] *** patrickz joined
[23:35] *** thowe joined
[23:35] <thowe> Hi, what's new today?

[23:36] *** patrickz left
[23:38] *** patrickb left
[23:40] *** Actualeyes left
[23:51] *** reach_satori_ joined
