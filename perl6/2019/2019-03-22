[00:07] *** cpan-p6 left
[00:07] *** cpan-p6 joined
[00:21] *** cpan-p6 left
[00:21] *** cpan-p6 joined
[00:27] *** lucasb left
[00:35] *** cpan-p6 left
[00:35] *** cpan-p6 joined
[00:50] *** cpan-p6 left
[00:50] *** cpan-p6 joined
[00:55] *** w_richard_w joined
[01:05] *** cpan-p6 left
[01:05] *** cpan-p6 joined
[01:20] *** cpan-p6 left
[01:20] *** cpan-p6 joined
[01:27] *** aindilis left
[01:30] *** aindilis joined
[01:32] *** nekomune left
[01:32] *** nekomune joined
[01:39] *** aindilis left
[01:40] *** aindilis joined
[01:47] *** cpan-p6 left
[01:48] *** cpan-p6 joined
[01:53] *** nekomune left
[01:53] *** nekomune joined
[01:59] *** leont left
[02:00] *** mephinet left
[02:01] *** cpan-p6 left
[02:01] *** cpan-p6 joined
[02:15] *** cpan-p6 left
[02:16] *** cpan-p6 joined
[02:21] *** Ven`````` left
[02:29] *** cpan-p6 left
[02:30] *** cpan-p6 joined
[02:31] *** MidCheck joined
[02:43] *** cpan-p6 left
[02:44] *** cpan-p6 joined
[02:58] *** cpan-p6 left
[02:59] *** cpan-p6 joined
[03:02] *** zakharyas joined
[03:12] *** cpan-p6 left
[03:13] *** cpan-p6 joined
[03:19] *** Maylay joined
[03:20] *** ufobat_ joined
[03:22] *** ufobat left
[03:25] *** aindilis left
[03:26] *** aborazmeh joined
[03:26] *** aborazmeh left
[03:26] *** aborazmeh joined
[03:26] *** cpan-p6 left
[03:27] *** aindilis joined
[03:27] *** squashable6 left
[03:27] *** cpan-p6 joined
[03:27] *** squashable6 joined
[03:27] *** ChanServ sets mode: +v squashable6

[03:29] *** zacts joined
[03:41] *** cpan-p6 left
[03:42] *** cpan-p6 joined
[03:56] *** cpan-p6 left
[03:57] *** cpan-p6 joined
[04:02] *** molaf joined
[04:10] *** cpan-p6 left
[04:11] *** cpan-p6 joined
[04:11] *** epony left
[04:22] *** xinming_ joined
[04:24] *** epony joined
[04:25] *** xinming left
[04:25] *** cpan-p6 left
[04:26] *** cpan-p6 joined
[04:30] *** genese left
[04:31] *** skaji left
[04:31] *** hfjvjffju left
[04:31] *** skaji joined
[04:32] *** mithaldu_ left
[04:32] *** Spot_ left
[04:32] *** PotatoGim left
[04:32] *** success joined
[04:32] *** kawaii left
[04:32] *** PotatoGim joined
[04:32] *** isacl___ joined
[04:32] *** syntaxman joined
[04:33] *** success is now known as Guest34016

[04:33] *** joy_ left
[04:33] *** isacl__ left
[04:33] *** Guest19311 left
[04:34] *** kawaii joined
[04:34] *** hfjvjffju joined
[04:34] *** mithaldu_ joined
[04:34] *** Spot_ joined
[04:38] *** MidCheck left
[04:38] *** joy_ joined
[04:39] *** cpan-p6 left
[04:40] *** cpan-p6 joined
[04:42] *** kst left
[04:45] *** zacts left
[04:46] *** molaf left
[04:53] *** cpan-p6 left
[04:54] *** cpan-p6 joined
[05:07] *** cpan-p6 left
[05:08] *** cpan-p6 joined
[05:21] *** cpan-p6 left
[05:22] *** cpan-p6 joined
[05:30] *** aborazmeh left
[05:32] *** sauvin joined
[05:46] *** kurahaupo left
[05:47] *** kurahaupo joined
[05:56] *** cpan-p6 left
[05:56] *** cpan-p6 joined
[06:02] *** syntaxman left
[06:11] *** cpan-p6 left
[06:12] *** cpan-p6 joined
[06:25] *** cpan-p6 left
[06:26] *** cpan-p6 joined
[06:26] *** robertle left
[06:32] *** aindilis left
[06:33] *** aindilis` joined
[06:38] *** cpan-p6 left
[06:38] *** cpan-p6 joined
[06:49] *** jmerelo joined
[06:52] *** cpan-p6 left
[06:52] *** cpan-p6 joined
[06:52] *** aindilis` left
[06:53] *** aindilis joined
[06:53] *** kurahaupo left
[06:55] *** domidumont joined
[07:07] *** cpan-p6 left
[07:07] *** cpan-p6 joined
[07:12] *** aborazmeh joined
[07:12] *** aborazmeh left
[07:12] *** aborazmeh joined
[07:21] *** cpan-p6 left
[07:22] *** cpan-p6 joined
[07:29] *** antoniogamiz joined
[07:29] <antoniogamiz> good morning o/

[07:35] <jmerelo> antoniogamiz: hey!

[07:36] *** jmerelo left
[07:37] <masak> morning, #perl6

[07:46] *** epony left
[07:53] *** aborazmeh left
[07:55] *** netrino_ joined
[07:55] *** cpan-p6 left
[07:56] *** cpan-p6 joined
[08:09] *** rindolf joined
[08:11] *** cpan-p6 left
[08:12] *** cpan-p6 joined
[08:28] *** cpan-p6 left
[08:28] *** netrino_ left
[08:28] *** cpan-p6 joined
[08:31] *** w_richard_w left
[08:33] *** aborazmeh joined
[08:33] *** aborazmeh left
[08:33] *** aborazmeh joined
[08:42] *** cpan-p6 left
[08:42] *** cpan-p6 joined
[08:56] *** cpan-p6 left
[08:58] *** cpan-p6 joined
[09:05] *** ravenousmoose joined
[09:06] *** Xliff left
[09:07] *** ravenousmoose_ left
[09:11] *** rindolf left
[09:11] *** cpan-p6 left
[09:11] *** cpan-p6 joined
[09:18] <antoniogamiz> well, after some time traveling from issue to issue, I think I've more or less complete my proposal :)

[09:18] <antoniogamiz> the first sketch at least \o/

[09:19] <antoniogamiz> anyone insterested in the doc system can check it out here: https://github.com/antoniogamiz/perl6-gsoc-application

[09:19] *** rindolf joined
[09:19] <antoniogamiz> tbrowder: I'm very insterested in your feedback about it, when you have some free time please tell me :)

[09:24] *** cpan-p6 left
[09:24] *** cpan-p6 joined
[09:28] *** yqt joined
[09:35] *** samcv left
[09:36] *** zakharyas left
[09:38] *** cpan-p6 left
[09:38] *** cpan-p6 joined
[09:38] *** samcv joined
[09:39] <xinming_> 'does' will make object does the role, 'but' will make a new object and apply that role. Is there a good way to memorize this? Since I'm always confused about does-vs-but

[09:40] <xinming_> I always need to check up the doc to confirm, which makes me think I need to find a better way to remmeber this.

[09:43] *** robertle joined
[09:50] *** aborazmeh left
[09:51] <xinming_> I just now get the idea, the does will do 'does' to class, which modifies the class itself, which is same as %var does ...

[09:51] <xinming_> then, but is the other way.

[09:53] *** cpan-p6 left
[09:53] <moritz> xinming_: "but does the same as does, *but* it also clones first"

[09:53] *** cpan-p6 joined
[09:53] <moritz> that's my mnemonic for it

[10:02] <xinming_> Ok, both works. :-)

[10:04] <xinming_> m: my @history = <c d e f>; @history[* - 1, * - 2].perl.say;    Is there a shortcut for   * - 1, * - 2  in this case?

[10:04] <camelia> rakudo-moar 787d5bf6e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3  Is there a shortcut for   * - 1, * - 27⏏5  in this case?␤    expecting any of:␤        infix␤        infix stopper␤»

[10:04] <xinming_> m: my @history = <c d e f>; @history[* - 1, * - 2].perl.say;    # Is there a shortcut for   * - 1, * - 2  in this case?

[10:04] <camelia> rakudo-moar 787d5bf6e: OUTPUT: «("f", "e")␤»

[10:10] *** cpan-p6 left
[10:13] *** cpan-p6 joined
[10:14] *** leont joined
[10:17] *** ravenousmoose left
[10:22] *** ravenousmoose joined
[10:26] *** cpan-p6 left
[10:27] *** ravenousmoose left
[10:28] *** ravenousmoose joined
[10:32] *** ravenousmoose left
[10:33] *** cpan-p6 joined
[10:33] *** ravenousmoose joined
[10:35] <tbrowder> antoniogamiz: that is looking good to me. good idea to use a mini-docs. just make sure of complete doc tree coverage. the issue of pod parsing without execution is also a big seller.

[10:35] *** pecastro joined
[10:48] <tbrowder> SmokeMachine: i am not making progress. i can't keep working on red while the real-world case needs more immediate attention. this evening  i plan to change the case into 3 parts: (1) the background, data and problem description and data modeling, (2) the crud description and implemention using curt tilmes' DBD::SQLite, and (3) the

[10:48] <tbrowder> crud solution with red.

[10:50] *** ambs joined
[10:51] *** yqt left
[10:51] <SmokeMachine> tbrowder: what's the problem you are having?

[10:51] *** cpan-p6 left
[10:51] *** cpan-p6 joined
[10:52] *** domidumont left
[10:52] <antoniogamiz> tbrowder: thanks for your opinion :)

[10:56] <tbrowder> it seems to be the relationships. i went back and tried to lay out the tables for sql as accurately as i can. then i tried to translate that to red using your suggestions as a guide. but i cannot successfully create a new person.attends entry. i cannot update thr PR until this evening, but i will push the current state then.

[10:56] <tbrowder> antoniogamiz: you are welcome

[11:01] <tbrowder> SmokeMachine: given my lack of rdbms experience, the whole problem may be in my basic layout of the tables. at least with my new plan i can understand modeling errors better before i introduce an orm approach.

[11:02] *** eseyman left
[11:03] <tbrowder> with red and its deep ast approach, maybe it could eventually do step 3  from the user's sql (which is almost there now i know).

[11:07] *** epony joined
[11:07] *** eseyman joined
[11:08] *** cpan-p6 left
[11:08] *** cpan-p6 joined
[11:22] <SmokeMachine> tbrowder: the problem seems to be a Red bug... :(

[11:24] <tbrowder> ok, sorry, but that makes me feel a bit better :)

[11:24] <tbrowder> easily fixable?

[11:29] <SmokeMachine> tbrowder: I hope so...

[11:29] <SmokeMachine> tbrowder: is this what you are having?

[11:29] <SmokeMachine> https://www.irccloud.com/pastebin/StJaMxpJ/

[11:33] <SmokeMachine> tbrowder: that's not a fix (Ill still fix it) but probably if you change the name of the column `first` it will work...

[11:33] <SmokeMachine> tbrowder: ^^

[11:48] *** cpan-p6 left
[11:48] <SmokeMachine> tbrowder: fixed! https://github.com/FCO/Red/commit/2a4d4e5de4301c27ed91ee36318d1370d84fb0fc

[11:52] *** cpan-p6 joined
[11:54] <SmokeMachine> tbrowder: thank you for your help!

[12:05] *** cpan-p6 left
[12:05] *** cpan-p6 joined
[12:06] *** Alchemy joined
[12:07] *** kaare__ joined
[12:10] *** tinita_ joined
[12:12] *** oodani_ joined
[12:14] *** spacedbat left
[12:14] *** daemon left
[12:14] *** oodani left
[12:14] *** tinita left
[12:14] *** sergot left
[12:14] *** kaare_ left
[12:14] *** Alchemy is now known as daemon

[12:17] *** dotdotdot left
[12:19] *** dotdotdot joined
[12:20] *** spacedbat joined
[12:22] *** cpan-p6 left
[12:22] *** cpan-p6 joined
[12:27] *** rindolf left
[12:27] *** rindolf joined
[12:33] <tbrowder> SmokeMachine: that error looks familiar! i’ll check yr fix tis evening, thanks!

[12:39] *** cpan-p6 left
[12:39] *** AlexDaniel left
[12:39] *** robertle left
[12:40] *** AlexDaniel joined
[12:40] *** lucasb joined
[12:40] *** cpan-p6 joined
[12:53] *** domidumont joined
[12:55] *** zakharyas joined
[12:57] *** cpan-p6 left
[12:58] *** cpan-p6 joined
[13:00] <titsuki> bisectable: class A { has @.a; submethod BUILD(:@!a) {} }; class B { has @.b; submethod BUILD(:@!b) {} }; class C is A is B { method plot { say @.a; say @.b; } }; C.new(:b([1,2,3])).plot

[13:00] <bisectable6> titsuki, Bisecting by output (old=2015.12 new=787d5bf) because on both starting points the exit code is 0

[13:00] <bisectable6> titsuki, bisect log: https://gist.github.com/94b94708e110ee633a66a4c2c33dc22e

[13:00] <bisectable6> titsuki, (2017-10-07) https://github.com/rakudo/rakudo/commit/16cb67980a7591a66d9259680b980c81067d3f8c

[13:06] *** patrickb joined
[13:07] *** antoniogamiz left
[13:07] *** zakharyas left
[13:14] *** cpan-p6 left
[13:15] *** cpan-p6 joined
[13:20] *** rindolf left
[13:21] *** reach_satori joined
[13:24] *** rindolf joined
[13:24] *** rindolf left
[13:27] *** rindolf joined
[13:28] *** cpan-p6 left
[13:28] *** cpan-p6 joined
[13:44] *** cpan-p6 left
[13:47] *** rindolf left
[13:49] *** cpan-p6 joined
[13:58] *** rindolf joined
[14:04] *** rindolf left
[14:04] <xinming_> my (%last, %prev) := @history[* - 1, * - 2];       <---  Is use of := operator  valid in this case?

[14:04] <xinming_> Imean binding both %last and %prev

[14:07] *** cpan-p6 left
[14:08] *** robertle joined
[14:08] *** Possum left
[14:08] *** Possum joined
[14:09] *** cpan-p6 joined
[14:09] *** rindolf joined
[14:11] *** jeromelanteri joined
[14:12] <moritz> m: my @h = {:1a}, {:2a}; my (%l, %p) := @h; say %p

[14:12] <camelia> rakudo-moar 787d5bf6e: OUTPUT: «{a => 2}␤»

[14:12] <moritz> seems it should work

[14:18] *** TimToady left
[14:26] *** cpan-p6 left
[14:27] <xinming_> Is the binding affects the var inside the declaration?

[14:27] <xinming_> I hope so.

[14:27] *** TimToady joined
[14:28] <xinming_> m:  my @h = %({}); @h.perl.say;

[14:28] *** cpan-p6 joined
[14:28] <camelia> rakudo-moar 787d5bf6e: OUTPUT: «[]␤»

[14:28] <xinming_> Why is this example won't create an empty hash inside the array?

[14:29] <xinming_> m:  my @h = %({}),; @h.perl.say;

[14:29] <camelia> rakudo-moar 787d5bf6e: OUTPUT: «[{},]␤»

[14:29] <xinming_> This version worked.

[14:30] <xinming_> binding works for var declared

[14:30] <xinming_> which is really nice. :-)

[14:31] <timotimo> it's the "single argument rule" that causes the assignment to iterate the "outermost" iterable, which is the hash itself

[14:31] <yoleaux> 02:59Z <MasterDuke> timotimo: if you check the logs here https://colabti.org/irclogger/irclogger_log/moarvm?date=2019-03-22#l5 you'll see some discussion i had with ugexe about weird profile/spesh log results. you might have some comment

[14:36] *** MasterDuke left
[14:41] *** cpan-p6 left
[14:41] *** cpan-p6 joined
[14:42] *** Black_Ribbon left
[14:42] *** jeromelanteri left
[14:48] *** scimon joined
[14:59] *** cpan-p6 left
[14:59] *** cpan-p6 joined
[15:01] *** AlexDaniel left
[15:01] *** AlexDaniel joined
[15:16] *** cpan-p6 left
[15:18] *** cpan-p6 joined
[15:29] <tony-o> notable6: libcsv module https://github.com/tony-o/perl6-libcsv

[15:29] <notable6> tony-o, Noted!

[15:31] *** cpan-p6 left
[15:31] *** cpan-p6 joined
[15:48] *** MidCheck joined
[15:56] <lizmat> tony-o: is there any reason you're not uploading to CPAN ?

[16:04] *** zacts joined
[16:07] *** cpan-p6 left
[16:08] *** cpan-p6 joined
[16:08] *** tinita_ is now known as tinita

[16:10] *** robertle left
[16:12] *** domidumont left
[16:13] *** yqt joined
[16:16] *** ravenousmoose left
[16:19] <kawaii> Probably for the same reasons my modules aren't on CPAN, it's antiquated compared to just doing releases on github

[16:21] *** jmerelo joined
[16:24] *** reach_satori left
[16:25] <SmokeMachine> m: class Bla:api<42> {}; class Ble:ble<42> {} # shouldn't it say 'ver', 'auth' and 'api'?

[16:25] <camelia> rakudo-moar 787d5bf6e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use adverb ble on a type name (only 'ver' and 'auth' are understood)␤at <tmp>:1␤------> 3class Bla:api<42> {}; class Ble:ble<42>7⏏5 {} # shouldn't it say 'ver', 'auth' and␤    expecti…»

[16:27] <lizmat> SmokeMachine: good catch

[16:27] <lizmat> will fix

[16:28] <SmokeMachine> :)

[16:30] <SmokeMachine> I think it should be a way to add possible adverbs to your class...

[16:30] <SmokeMachine> possible custom adverbs...

[16:30] *** p6lert left
[16:30] <lizmat> updated, but Geth appears to be AWOL

[16:30] *** dalek joined
[16:30] *** ChanServ sets mode: +v dalek

[16:30] *** synopsebot joined
[16:30] *** ChanServ sets mode: +v synopsebot

[16:30] *** p6lert joined
[16:30] *** Geth joined
[16:30] *** ChanServ sets mode: +v Geth

[16:30] *** cpan-p6 left
[16:31] *** cpan-p6 joined
[16:32] <cpan-p6> New module released to CPAN! XML-XPath (0.9.3) by 03UFOBAT

[16:34] <tony-o> lizmat: i don't have a cpan id

[16:34] <ugexe> what is the use case for custom adverbs instead of using attributes?

[16:35] <lizmat> tony-o: https://pause.perl.org/pause/query?ACTION=request_id   :-)

[16:36] <ugexe> tony-o: arent you https://metacpan.org/author/YNOTO ?

[16:37] <lizmat> :-)

[16:37] <SmokeMachine> ugexe: migration Bla:from<0.1>:to<0.2> { ... }

[16:38] <ugexe> i do stuff like that via `role META[$version where * == 1] { }; role META[$version where * == 2] { }; META[...].new(...)`

[16:38] <SmokeMachine> ugexe: but now Im thinking of: migration Bla:ver<0.2> { method from(v0.1) { ... } }

[16:39] <tony-o> ah, i suppose..i don't recall getting an email about that going through

[16:40] <jmerelo> ugexe: could that be a possible solution to this? https://stackoverflow.com/questions/55265205/parametrized-subsets A bunch of roles would have to be defined, though...

[16:40] <jmerelo> SmokeMachine: you want Dockerfile phased building in Perl 6 syntax...

[16:41] <tony-o> jmerelo: libyaml should build now, something weird happening in those makefiles with Build.pm/LibraryMake

[16:43] <SmokeMachine> jmerelo: no, this: https://github.com/FCO/Red/issues/15

[16:43] <jmerelo> tony-o: I'll try to check it out. Thanks for telling me.

[16:44] *** cpan-p6 left
[16:44] <jmerelo> SmokeMachine: I wouldn't complicate syntax more that it is now. You can simply keep using whatever you want to use from previous versions, and use IS DEPRECATED for whatever you want to stop using.

[16:45] *** cpan-p6 joined
[16:45] *** zacts left
[16:47] <SmokeMachine> jmerelo: you think Red shouldn't make it easy to transform and move data from old version of a model to a new one?

[16:52] *** patrickb left
[16:52] *** zacts joined
[16:54] <jmerelo> SmokeMachine: OK, I see what you mean. But you are using the metamodel to do that kind of things. Why don't you add an attribute via metamodel?

[16:55] <SmokeMachine> jmerelo: what do you mean?

[16:56] *** zacts left
[16:56] <jmerelo> SmokeMachine: I'm not sure. I guess you don't want to use class attributes because they are reserved to the actual things stored in the database, but you could use something like class.^ver and class.^from to migrate

[16:56] *** zacts joined
[16:57] <lizmat> tony-o: mail to YNOTO is bounced with <<< 554 5.7.1 [email@hidden.address] Recipient address rejected: Access denied

[17:04] <SmokeMachine> jmerelo: that's what Im doing here: https://github.com/FCO/Red/issues/15#issuecomment-475078080

[17:05] <jmerelo> SmokeMachine: great :-)

[17:05] <SmokeMachine> but this way can't handle some changes, as written here: https://github.com/FCO/Red/issues/15#issuecomment-475564988

[17:05] <SmokeMachine> jmerelo: ^^

[17:06] <SmokeMachine> jmerelo: so Im thinking of using the type Migration for encapsulate the models and the changes (as suggested by Xliff)

[17:07] <SmokeMachine> jmerelo: Im trying to see what would be the best way to do that...

[17:07] <jmerelo> SmokeMachine: good luck! :-)

[17:07] <SmokeMachine> jmerelo: `migration:from<1>:to<2>` is one way I thought be good... but that's not possible...

[17:08] <SmokeMachine> jmerelo: and I think it should be possible... :( (even if I don't use it...)

[17:09] <ugexe> you'll never have 2 "Migration" types of different from/to in the same lexical scope at once?

[17:09] <ugexe> you cant `use Foo:ver<1>; use Foo:ver<2>;` for instance -- its `{ use Foo:ver<1> }; { use Foo:ver<2> }`

[17:10] *** cpan-p6 left
[17:10] <ugexe> m: class Foo:ver<1> { }; class Foo:ver<2> { };

[17:10] <camelia> rakudo-moar bea519934: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'Foo'␤at <tmp>:1␤------> 3class Foo:ver<1> { }; class Foo:ver<2>7⏏5 { };␤    expecting any of:␤        generic role␤»

[17:13] *** cpan-p6 joined
[17:13] *** scimon left
[17:16] <SmokeMachine> ugexe: yes, I know... I’m not sure yet what I should do for it...

[17:17] *** sauvin left
[17:19] <ugexe> you have two pieces of logic. $from for ultimately creating logic for *reading* the current format, and $to for ultimately creating logic for the output format. $to and $from don't need to be coupled

[17:20] <ugexe> no one wants to create a migration for from=1 to=3 *AND* from=2 to=3

[17:22] <ugexe> if you want to couple them then there is no need for from= at all, since it should always be $to - 1

[17:23] <ugexe> and you apply each migration in sequence

[17:34] *** cpan-p6 left
[17:35] <vrurg> m: my Int $a; say $a > 0

[17:35] <camelia> rakudo-moar 2b991664d: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[17:35] <vrurg> Not the best error message one could expect. ;)

[17:38] *** cpan-p6 joined
[17:42] <jmerelo> vrurg: not really...

[17:43] <jmerelo> vrurg: but I think the problem is that $a is not initialized, so contains something that can't be really converted to Int. That could be a better message, of course...

[17:43] <vrurg> jmerelo: it's an easy thing to fix. Real operators are defined with :D where they should have it.

[17:43] <vrurg> m: my Str $s; say $s ne "foo"

[17:43] <camelia> rakudo-moar 2b991664d: OUTPUT: «Use of uninitialized value of type Str in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤True␤  in block <unit> at <tmp> line 1␤»

[17:43] <vrurg> This is more like it.

[17:45] <jmerelo> vrurg: and Bridge is a Real method: https://docs.perl6.org/routine/Bridge

[17:45] <vrurg> jmerelo: yep, it is.

[17:46] <vrurg> I just have tried infix:«>» with Real:D and got more consistent message:

[17:46] <vrurg> Use of uninitialized value of type Int in numeric context

[17:46] <vrurg>   in block <unit> at -e line 1

[17:46] <vrurg> False

[17:46] <vrurg> This is how it must be, I think.

[17:46] <jmerelo> vrurg: the problem is probably in the context conversion. string context is clear. But in numeric context, there are multiple types of numbers. Default numeric context seems to be Real, so you're going to get those weird messages

[17:47] <jmerelo> m: my Rat $a; say $a > 0

[17:47] <camelia> rakudo-moar 2b991664d: OUTPUT: «Cannot look up attributes in a Rat type object␤  in block <unit> at <tmp> line 1␤␤»

[17:47] <jmerelo> Now that's weird.

[17:47] <jmerelo> my Real $a; say $a > 0

[17:47] <jmerelo> m: my Real $a; say $a > 0

[17:47] <camelia> rakudo-moar 2b991664d: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Real', not a type object of type 'Real'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[17:48] <vrurg> With Real:D: Use of uninitialized value of type Rat in numeric context

[17:48] *** zachk joined
[17:48] <tony-o> notable6: https://deathbyperl6.com/whats-in-an-orm/

[17:48] <notable6> tony-o, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[17:49] <AlexDaniel> use weekly: foo

[17:49] <vrurg> I mean, if you constrain operators to act on defined Reals you'll get consistent error message across types – would it be any kind of number, or string.

[17:49] <tony-o> weekly: https://deathbyperl6.com/whats-in-an-orm/

[17:49] <notable6> tony-o, Noted!

[17:49] <tony-o> thanks AlexDaniel 

[17:49] <AlexDaniel> maybe notable6 should be called weeklyable :X

[17:49] <AlexDaniel> nobody is using it for any other purpose

[17:49] <tony-o> lizmat: i tried signing up for cpan a couple of times, every time i never get an email with the password

[17:50] <jmerelo> AlexDaniel: do you think it would be worth the while to add to the problem-solving-repo something about Rakudo's PRs and issues?

[17:50] <AlexDaniel> jmerelo: like what?

[17:50] *** cpan-p6 left
[17:50] <jmerelo> AlexDaniel: like addressing them

[17:51] *** cpan-p6 joined
[17:51] <AlexDaniel> jmerelo: hmm… I don't understand the question, maybe I'm missing some context?

[17:51] <jmerelo> AlexDaniel: there's like 1 issue closed every 3 days, and 3 issues opened every day. Some of them might be interesting, some not. Some of them are not even labelled.

[17:52] <jmerelo> AlexDaniel: some PRs are 6 years old. They should probably be closed.

[17:52] <tony-o> password reset on cpan gives me: Sorry, the PAUSE failed to send an email.

[17:52] <tony-o> Administration has been notified.

[17:53] <jmerelo> AlexDaniel: I know the priority is to get the new versions going, but at some point in time something should be done about those issues. If they are not legitimate issues, just close them or "won't fix" is enough.

[17:53] <AlexDaniel> jmerelo: lucasb++ worked hard on making the labels more useful and labeling unlabeled things (during the last two weeks or so)

[17:53] <jmerelo> AlexDaniel: still. Look at this one: https://github.com/rakudo/rakudo/issues/1209

[17:54] <AlexDaniel> jmerelo: yes, there's a problem

[17:54] <jmerelo> AlexDaniel: not labeled, lizmat waiting for her question to be answered... At least that one is (somewhat) addressed...

[17:55] *** zacts left
[17:55] <jmerelo> AlexDaniel: look at the first one, which mentions fail.rakudo.party https://github.com/rakudo/rakudo/issues/1199 Either change it to blin, or close it...

[17:55] *** adu joined
[17:56] <AlexDaniel> jmerelo: https://fail.rakudo.party is still a thing, and I think it's a good idea to list github tickets there…

[17:57] <jmerelo> AlexDaniel: OK, but that's not my point. If that's the case, it should maybe get addressed... to check that out and close it.

[17:57] <AlexDaniel> jmerelo: yeah, but so is the case with many other tickets

[17:58] <AlexDaniel> jmerelo: now, what's the connection with problem-solving repo?

[17:58] <jmerelo> AlexDaniel: the thing would be to ask for a part of the time devoted to new releases to go instead to solving old issues and PRs. Mainly PRs, but also issues.

[17:59] <jmerelo> AlexDaniel: have whoever is the patch pumpkin assign them to whoever is active at every moment, for instance. Or have a policy of having people review them.

[17:59] <AlexDaniel> jmerelo: you wanna create a ticket like “We get more new tickets than we close”, and discuss our options?

[17:59] <jmerelo> AlexDaniel: do _something_ about them, anyway.

[18:00] <jmerelo> AlexDaniel: That's the gist of it, yes.

[18:00] <AlexDaniel> jmerelo: sure! Feel free to

[18:00] <jmerelo> AlexDaniel: OK

[18:02] *** kst joined
[18:11] *** gregf_ left
[18:18] <Geth> ¦ doc: 30b1bfd095 | (JJ Merelo)++ | 2 files

[18:18] <Geth> ¦ doc: Leaving references to PREVIEW

[18:18] <Geth> ¦ doc: 

[18:18] <Geth> ¦ doc: It's a explanation of pragma. Added some clarification about where it

[18:18] <Geth> ¦ doc: can be found. Also reflow and some corrections.

[18:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/30b1bfd095

[18:26] *** MidCheck left
[18:36] *** leont left
[18:38] *** chakli joined
[18:39] <chakli> p6: my $a="1-2 , ABCa!"; $a ~~ s/<[0..9 , \s ! - ]>+//; say $a

[18:39] <camelia> rakudo-moar 2b991664d: OUTPUT: «ABCa!␤»

[18:40] <chakli> why is ! not replaced here?

[18:42] <timotimo> probably needs a :g for "global"

[18:44] <tony-o> p6: my $a="1-2 , ABCa!"; $a ~~ s:g/<[0..9 , \s ! - ]>+//; say $a

[18:44] <camelia> rakudo-moar 2b991664d: OUTPUT: «ABCa␤»

[18:44] *** cpan-p6 left
[18:45] <chakli> oh, Yeah. Thanks.

[18:45] *** cpan-p6 joined
[18:56] *** adu left
[18:56] *** adu joined
[18:56] *** adu left
[18:57] *** adu joined
[18:57] *** adu left
[18:58] *** adu joined
[18:58] *** netrino joined
[18:58] *** adu left
[18:58] *** adu joined
[18:59] *** adu left
[18:59] *** adu joined
[18:59] *** adu left
[19:00] *** cpan-p6 left
[19:00] *** cpan-p6 joined
[19:01] *** chakli left
[19:02] *** sena_kun joined
[19:03] <sena_kun> m: class M does Positional {}; class A { multi method a(M $a) { say "M" }; multi method a(Positional $pos) { say "Pos" } }; A.a((1,2,3)); A.a(M.new);

[19:03] <camelia> rakudo-moar 2b991664d: OUTPUT: «Pos␤M␤»

[19:03] <cpan-p6> New module released to CPAN! Grammar-PrettyErrors (0.0.1) by 03BDUGGAN

[19:03] <sena_kun> I can rely on this win of M, right?

[19:04] *** robertle joined
[19:13] *** cpan-p6 left
[19:15] <tony-o> should be able to

[19:17] <sena_kun> I hope so, Perl 6 wouldn't betray me over something so simple. :)

[19:33] *** cpan-p6 joined
[19:33] <cpan-p6> New module released to CPAN! db-xoos (0.0.13) by 03YNOTO

[19:35] *** hankache joined
[19:46] *** cpan-p6 left
[19:47] *** cpan-p6 joined
[19:47] *** Grauwolf left
[19:47] *** reach_satori joined
[19:47] *** Grauwolf joined
[19:54] <hankache> Hello #perl6

[19:56] *** jmerelo left
[19:59] *** haukex joined
[20:00] <hankache> m: class a {has Int @.a-val;}; class b {has Int @.b-val;}; class ab is a is b {method plot {say @.a-val;say @.b-val;}} ;my $ab = ab.new(a-val => (10,9,11,8,7,10), b-val => [9,8,10,7,6,9]); $ab.plot;

[20:00] <camelia> rakudo-moar 2b991664d: OUTPUT: «[10 9 11 8 7 10]␤[]␤»

[20:00] <hankache> why is this not working?

[20:02] <sena_kun> 6c: class a {has Int @.a-val;}; class b {has Int @.b-val;}; class ab is a is b {method plot {say @.a-val;say @.b-val;}} ;my $ab = ab.new(a-val => (10,9,11,8,7,10), b-val => [9,8,10,7,6,9]); $ab.plot;

[20:02] *** supernovus joined
[20:02] <committable6> sena_kun, https://gist.github.com/d99c829cd85f182e85e3cbe16ae6b008

[20:02] <sena_kun> that's a regression

[20:03] <timotimo> proofread my blog post? :)

[20:03] <timotimo> https://wakelift.de/p/2dc5d8df-2b40-4706-87a1-88bd90d569b7/

[20:03] <sena_kun> hankache, you should file a rakudo issue with this code.

[20:04] <hankache> sena_kun will do. thanks

[20:04] <Geth> ¦ ecosystem: 11112316a0 | (Timothy Totten)++ | META.list

[20:04] <Geth> ¦ ecosystem: Add XML::Entity::HTML to ecosystem

[20:04] <Geth> ¦ ecosystem: 

[20:04] <Geth> ¦ ecosystem: See https://github.com/supernovus/xml-entity-html

[20:04] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/11112316a0

[20:05] <ugexe> m: class A { has $.a; }; class B { has $.b }; class C is A is B { }; say C.new(:a(1), :b(2))

[20:05] <camelia> rakudo-moar 2b991664d: OUTPUT: «C.new(a => 1, b => Any)␤»

[20:05] <ugexe> a bit shorter

[20:06] <sena_kun> m: class A { has $.a; }; class B { has $.b }; class C is B is A { }; say C.new(:a(1), :b(2))

[20:06] <camelia> rakudo-moar 2b991664d: OUTPUT: «C.new(b => 2, a => Any)␤»

[20:07] <hankache> 6c: class A { has $.a; }; class B { has $.b }; class C is B is A { }; say C.new(:a(1), :b(2))

[20:07] *** cpan-p6 left
[20:07] <committable6> hankache, https://gist.github.com/e854d4a6c9b0be9078cccd0dd76ec0f7

[20:07] *** cpan-p6 joined
[20:07] <hankache> ugexe thanks

[20:07] <ugexe> looks like it was already bisected https://colabti.org/irclogger/irclogger_log/perl6?date=2019-03-22#l267

[20:09] <hankache> was it reported or should i open an issue?

[20:09] <Geth> ¦ doc: 234352b270 | (Trey Harris)++ | doc/Type/Signature.pod6

[20:09] <Geth> ¦ doc: Type/Signature: changed confusing variable name

[20:09] <Geth> ¦ doc: 

[20:09] <Geth> ¦ doc: The variable `$closure` seems a bit prone to creating confusion here;

[20:09] <Geth> ¦ doc: while the variable itself _is_ participating in a closure, closing

[20:09] <synopsebot> Link: https://doc.perl6.org/type/Signature

[20:09] <Geth> ¦ doc: over the returned anonymous sub, we usually use "a closure" in the

[20:09] <Geth> ¦ doc: nounal form to refer to a function enclosing something or ocassionally

[20:09] <Geth> ¦ doc: to refer to a variable whose use is integral and obvious to the

[20:09] <Geth> ¦ doc: <…commit message has 20 more lines…>

[20:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/234352b270

[20:09] *** haukex left
[20:18] <hankache> issue submitted

[20:20] *** Black_Ribbon joined
[20:22] *** cpan-p6 left
[20:22] *** cpan-p6 joined
[20:26] *** supernovus left
[20:47] *** cpan-p6 left
[20:48] *** cpan-p6 joined
[20:57] *** reach_satori left
[20:58] *** hankache left
[20:58] *** reach_satori joined
[21:02] *** cpan-p6 left
[21:02] <guifa> Is there a way to refer to take objects inside of a gather other than storing them in a list prior to taking them?

[21:02] *** cpan-p6 joined
[21:03] <guifa> something like, my @foo = lazy gather { for @bar { take $_ unless $_ (elem) @foo }

[21:06] <sena_kun> well

[21:06] <sena_kun> oh, I failed. never mind me.

[21:07] <ugexe> how would that even work?

[21:07] <ugexe> checking that an element exists in the array you havent populated

[21:07] <ugexe> before adding it

[21:08] <ugexe> which means you have to understand beforehand that you are inside of a lazy iteration and that referring to @foo could only possibly mean the lazy values created up until that point

[21:08] <guifa> ugexe: that was actually the point :-)

[21:08] <moritz> but checking with (elem) would reify @foo, which blocks the 'gather', so deadlock

[21:09] *** Xliff joined
[21:09] <Xliff> \o

[21:09] <guifa> Basically to only grab the unique values from @foo, but lazily (.unique doesn’t work, because the take bit isn’t a straight assignment)

[21:09] <Xliff> m: sub a(Str @a) { say "Hi!"; }; a((1, 2, 3))

[21:09] <camelia> rakudo-moar 2b991664d: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Str] but got List ($(1, 2, 3))␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:10] <Xliff> m: sub a(Str @a) { say "Hi!"; }; a(<a b c>)

[21:10] <camelia> rakudo-moar 2b991664d: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Str] but got List ($("a", "b", "c"))␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:10] <ugexe> unique works

[21:10] <Xliff> m: sub a(Str @a) { say "Hi!"; }; a(<a b c>.Array)

[21:10] <camelia> rakudo-moar 2b991664d: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Str] but got Array ($["a", "b", "c"])␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:10] <Xliff> m: sub a(@a) { say "Hi!"; }; a(<a b c>.Array)

[21:10] <camelia> rakudo-moar 2b991664d: OUTPUT: «Hi!␤»

[21:10] <Xliff> m: sub a(@a) { die "Dur!" unless @a.all ~~ Str; say "Hi!"; }; a(<a b c>.Array)

[21:10] <camelia> rakudo-moar 2b991664d: OUTPUT: «Hi!␤»

[21:10] *** reach_satori left
[21:10] <Xliff> m: sub a(@a) { die "Dur!" unless @a.all ~~ Str; say "Hi!"; }; a((1, 2, 4))

[21:10] <camelia> rakudo-moar 2b991664d: OUTPUT: «Dur!␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:10] <guifa> .unique is lazy, even after .map’ing it?

[21:10] <ugexe> m: my $foo := unique gather for (1,2,3,4,4,4,4,5) { take $_ }; say $foo

[21:10] <camelia> rakudo-moar 2b991664d: OUTPUT: «(1 2 3 4 5)␤»

[21:10] <Xliff> m: sub a(@a) { die "Dur!" unless @a.all ~~ Str; say "Hi!"; }; a(('a', 4))

[21:11] <camelia> rakudo-moar 2b991664d: OUTPUT: «Dur!␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:11] <Xliff> m: sub a(@a) { die "Dur!" unless @a.all ~~ Str; say "Hi!"; }; a(('a', 'b'))

[21:11] <camelia> rakudo-moar 2b991664d: OUTPUT: «Hi!␤»

[21:12] <ugexe> why wouldn't unique be lazy? its not like sort

[21:12] <ugexe> not be lazy^

[21:12] *** yqt left
[21:13] <TreyHarris> If you need something fancier than unique can manage (though the :as and :with make it hard to understand what would be fancier), you can use a state array or *Hash variable in the gather, push each value you take, and do your check as needed.

[21:14] <ugexe> that is also not the same memory wise

[21:14] *** reach_satori joined
[21:15] *** cpan-p6 left
[21:15] *** cpan-p6 joined
[21:18] <TreyHarris> I can't think what the gather's block would have that unique's :as and :with wouldn't have access to--in the case of a lazy, they'd be called at the same time, I believe?

[21:21] <ugexe> you could certainly code a similar unique, but that is not what implementing with an array and hash really implies

[21:22] <sena_kun> m: my Array[Int] $a = Array[Int].new(1,2,3); $a = $a.map(* + 2);

[21:22] <camelia> rakudo-moar 2b991664d: OUTPUT: «Type check failed in assignment to $a; expected Array[Int] but got Seq ($((3, 4, 5).Seq))␤  in block <unit> at <tmp> line 1␤␤»

[21:22] <TreyHarris> Right, the unique is better--I was trying to imagine a case unique couldn't handle. I can't think of a non-contrived one. But if you could come up with one, it could be solved albeit less performantly

[21:22] <sena_kun> is there a way to map values but preserve the type container?

[21:24] <timotimo> guifa: you can use the sequence operator with a generator code block that takes a slurpy array argument, that will have all values so-far in it

[21:24] <ugexe> ah for some reason i thought you were suggesting something else

[21:24] <sena_kun> oooh, I probably can workaround it unrolling the map by hands.

[21:26] <guifa> I think ugexe’s will actually probably work. I think I’m just going a bit crazy coding this logic 

[21:26] * guifa . o O ( this must be why the RFC didn’t include many samples )

[21:27] <timotimo> i only looked at the initial question, tbh; i didn't look at what other suggestions there were

[21:28] *** cpan-p6 left
[21:28] *** cpan-p6 joined
[21:29] *** Possum left
[21:31] *** Possum joined
[21:35] <sena_kun> m: my $type = Int; my Array[$type] $ints = Array[$type].new

[21:35] <camelia> rakudo-moar 2b991664d: OUTPUT: «Type check failed in assignment to $ints; expected Array[Any] but got Array[Int] (Array[Int].new())␤  in block <unit> at <tmp> line 1␤␤»

[21:35] <sena_kun> what am I missing?

[21:36] <lizmat> m: BEGIN my $type = Int; my Array[$type] $ints = Array[$type].new

[21:36] <camelia> rakudo-moar 2b991664d: ( no output )

[21:37] <lizmat> sena_kun: the parameterization happens at compile time.  At that moment, $type is not set yet

[21:37] <lizmat> adding the BEGIN makes it set **before** the parametarization happens, so then it works

[21:37] <lizmat> m: BEGIN my $type = Int; dd my Array[$type] $ints = Array[$type].new

[21:37] <camelia> rakudo-moar 2b991664d: OUTPUT: «Array[Int] $ints = Array[Int].new()␤»

[21:38] <sena_kun> no workaround besides this?

[21:38] <lizmat> EVAL ?

[21:38] <sena_kun> the issue is that BEGIN won't help me here.

[21:38] <lizmat> m: BEGIN my $type = Int; dd my Array[$type] $ints .= .new

[21:38] <camelia> rakudo-moar 2b991664d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed mutator method call␤at <tmp>:1␤------> 3$type = Int; dd my Array[$type] $ints .=7⏏5 .new␤    expecting any of:␤        dotty method or postfix␤»

[21:39] <lizmat> m: BEGIN my $type = Int; dd my Array[$type] $ints .= new

[21:39] <camelia> rakudo-moar 2b991664d: OUTPUT: «Array[Int] $ints = Array[Int].new()␤»

[21:39] <sena_kun> hmmm... actually, I can probably create a custom container that will hold an array and a type.

[21:39] <lizmat> in any case, that would be shorter

[21:40] <sena_kun> oh, I see the issue with my approach. ok, thanks.

[21:52] *** cpan-p6 left
[21:54] *** cpan-p6 joined
[22:04] <TreyHarris> From the docs, these would seem to be kosher, but isn't:

[22:04] <TreyHarris> m: sub make-array(::D $item --> Array[D]) { my Array[D] $f .= new($item); return $f }; say "compiled"; my $a = make-array(42);

[22:04] <camelia> rakudo-moar 2b991664d: OUTPUT: «compiled␤Died with X::TypeCheck::Assignment␤  in sub make-array at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:09] <Geth> ¦ doc: uzluisf++ created pull request #2691: Revise examples in the intro to lists.

[22:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2691

[22:09] *** lucasb left
[22:14] <TreyHarris> Am I misreading the docs on capturing types in signatures? Or is the above a rakudo issue?

[22:17] *** cpan-p6 left
[22:18] <TreyHarris> m: sub make-int(Int $item --> Int:D) { return $item.clone }; my $s = make-int(42); say $s;

[22:18] <camelia> rakudo-moar 2b991664d: OUTPUT: «42␤»

[22:18] *** cpan-p6 joined
[22:18] <TreyHarris> With explicit typing it works fine

[22:19] <TreyHarris> Or I guess more closely

[22:20] <TreyHarris> m: sub make-array(Int:D $item --> Array[Int]) { my Array[Int] $f .= new($item); return $f }; say "compiled"; my $a = make-array(42); say $a

[22:20] <camelia> rakudo-moar 2b991664d: OUTPUT: «compiled␤[42]␤»

[22:24] <TreyHarris> m: sub generic-sub(::T $item) { my T $x = $item; return $x }; say generic-sub(42)

[22:24] <camelia> rakudo-moar 2b991664d: OUTPUT: «42␤»

[22:24] *** sena_kun left
[22:25] <TreyHarris> m: sub generic-sub(::T $item) { my T $x = $item.perl; return $x }; say generic-sub(42)

[22:25] <camelia> rakudo-moar 2b991664d: OUTPUT: «Type check failed in assignment to $x; expected Int but got Str ("42")␤  in sub generic-sub at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:25] <TreyHarris> Hmm... So T can be used in the body, but not in the signature?

[22:28] <TreyHarris> that's not right either:

[22:28] <TreyHarris> m: sub generic-sub(::T $item1, T $item2) { my $x = ($item1, $item2); return $x }; say generic-sub(42,40); say generic-sub(42, "Forty-two")

[22:28] <camelia> rakudo-moar 2b991664d: OUTPUT: «(42 40)␤Type check failed in binding to parameter '$item2'; expected Int but got Str ("Forty-two")␤  in sub generic-sub at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:32] <TreyHarris> Huh, even this doesn't work for some reason, it's typing T as Int, not Cool:

[22:33] <TreyHarris> m: my Cool \one = 42; my Cool \two = "Forty-two"; sub generic-sub(::T $item1, T $item2) { my $x = ($item1, $item2); return $x }; say generic-sub(42,40); say generic-sub(one, two)

[22:33] <camelia> rakudo-moar 2b991664d: OUTPUT: «(42 40)␤Type check failed in binding to parameter '$item2'; expected Int but got Str ("Forty-two")␤  in sub generic-sub at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:34] <tobs> m: my Cool \one = 42; say one.^name

[22:34] <camelia> rakudo-moar 2b991664d: OUTPUT: «Int␤»

[22:35] <tobs> (not that I know more than this about the issue, TreyHarris :-/)

[22:40] <TreyHarris> tobs: good point, I'm having trouble getting a Cool value no matter how I write it--it seems to collapse to its constituent type as quickly as possible... like `sub whats-Cool(Cool() $x) { say $x.WHAT }` never says Cool

[22:41] <timotimo> published that blog post: https://wakelift.de/2019/03/22/intermediate-progress-report-heap-snapshots/

[22:42] <lizmat> weekly: https://wakelift.de/2019/03/22/intermediate-progress-report-heap-snapshots/

[22:42] <notable6> lizmat, Noted!

[22:43] *** cpan-p6 left
[22:44] *** cpan-p6 joined
[22:44] <TreyHarris> m: sub foo(Cool(::T) $x, Cool(T) $y) { return ($x, $y) }

[22:44] <camelia> rakudo-moar 2b991664d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in typename; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3sub foo(Cool(::T) $x, Cool(7⏏5T) $y) { return ($x, $y) }␤»

[22:45] <Geth> ¦ marketing: uzluisf++ created pull request #24: Add alternate logo

[22:45] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/pull/24

[22:45] <TreyHarris> The Cool thing seems like a separate issue though, I was just trying to create a common supertype without creating my own classes in the example

[22:53] *** MasterDuke joined
[22:53] <TreyHarris> I think type constraints are checked in a way that's unintuitive to me. I mean, it feels to me like this should work, but it doesn't

[22:53] <TreyHarris> m: sub hm(Bool $p) { say "$p as {Str($p)} is {so $p}." }; hm(42 but False);

[22:53] <camelia> rakudo-moar 2b991664d: OUTPUT: «Type check failed in binding to parameter '$p'; expected Bool but got Int+{<anon|1>} (42)␤  in sub hm at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:53] *** MasterDuke left
[22:53] *** MasterDuke joined
[22:54] <TreyHarris> m: sub hm(Bool $p) { say "$p as {Str($p)} is {so $p}." }; hm(False but 42);

[22:54] <camelia> rakudo-moar 2b991664d: OUTPUT: «False as False is False.␤»

[22:57] <TreyHarris> m: sub hm(Bool $p) { say "$p as {Str($p)} is {so $p}." }; hm(False but "True"); # truly odd?!?

[22:57] <camelia> rakudo-moar 2b991664d: OUTPUT: «True as True is True.␤»

[22:57] *** cpan-p6 left
[22:58] *** cpan-p6 joined
[23:04] *** rindolf left
[23:06] <TreyHarris> m: sub hm(Bool $p) { if $p {say "YES, $p as {Str($p)} is {so $p}."} else {say "NO, $p as {Str($p)} is {so $p}."} }; my $x = False but "True"; hm($x); say "yes" if $x; say "no" unless $x;

[23:06] <camelia> rakudo-moar 2b991664d: OUTPUT: «NO, True as True is True.␤no␤»

[23:07] <TreyHarris> It gets weirder and weirder.

[23:09] <ugexe> `42 but False` <-- what do you think this does that 42 should be a Int|Bool ?

[23:11] *** Artie joined
[23:11] *** cpan-p6 left
[23:12] *** cpan-p6 joined
[23:14] <TreyHarris> well, going by the examples that Larry first presented, vs

[23:14] <TreyHarris> m: my $z = 42 but 'forty-two'; say $z; say "{+ $z}"; say $z + 0; say $z.WHAT;

[23:14] <camelia> rakudo-moar 2b991664d: OUTPUT: «forty-two␤forty-two␤42␤(Int+{<anon|1>})␤»

[23:15] <TreyHarris> It seems a bit reversed

[23:17] <tobs> that makes sense to me.

[23:17] <TreyHarris> In particular, I don't quite get why (0+$z).Str and (+$z).Str are different

[23:18] <timotimo> +$z on an Int probably just returns self

[23:18] <tobs> well that, I can only speculate that since $z is Int, +$z is a real no-op, whereas 0+$z constructs a new Int

[23:23] <tony-o> think i have a patch for `require xyz:file<path>;` merging symbols to `xyz`

[23:26] <ugexe> m: my $x = 42 but "fourty-two"; say $x.Int

[23:26] <camelia> rakudo-moar 2b991664d: OUTPUT: «fourty-two␤»

[23:26] <ugexe> m: my $x = 42 but "fourty-two"; say $x.Num

[23:26] <camelia> rakudo-moar 2b991664d: OUTPUT: «42␤»

[23:26] <ugexe> thats certainly interesting

[23:27] <TreyHarris> I understand why `42 but False` is an ad-hoc mixin type. I don't understand why it _can't_ be `(Int|Bool)+{<anon|*>}`. And I don't understand why the output «NO, True as True is True.␤no␤» was produced above.

[23:28] <TreyHarris> It feels like "42 but False" is saying you want the value to be conformant to Bool as well as to Int, and not just by dint of Ints being generally conformant to Bool

[23:28] <ugexe> wouldn't such a type have to be known at compile time? sure that can probably be determined from `but False` but for more general `but ...`?

[23:29] <TreyHarris> Well, since the 'but' syntax was motivated by kludgey "0 but true" return values...

[23:30] <TreyHarris> I mean, I recognize Failure is used in those contexts and is a better solution to the motivation. But that doesn't make the behavior less surprising

[23:31] <tobs> `$x but $obj` creates and mixes in a new role that has "a single method named the same as $obj.^name and that returns $obj". If $obj is a Bool, that role is not the same as a Bool (Bool isn't even a role).

[23:32] <ugexe> did you know? you can do `0 but True` from CLI!

[23:32] <ugexe> sub MAIN(:$number) { say $number; say so $number }

[23:32] <evalable6> ugexe, rakudo-moar 2b991664d: OUTPUT: «(Any)␤False␤»

[23:32] <ugexe> --/number=1

[23:33] <ugexe> m: sub MAIN(:$number) { say $number; say so $number }; BEGIN @*ARGS="--/number=1"

[23:33] <camelia> rakudo-moar 2b991664d: OUTPUT: «1␤False␤»

[23:33] <ugexe> (thats really 1 but False but whatever)

[23:36] *** cpan-p6 left
[23:37] *** cpan-p6 joined
[23:37] <ryanth> m: (5... ^10).join(',').say; # This is how my day's been going.

[23:37] <camelia> rakudo-moar 2b991664d: OUTPUT: «5,4,3,2,1,0,1,2,3,4,5,6,7,8,9␤»

[23:39] <timotimo> haha

[23:39] <TreyHarris> tobs: Sure, but roles autopun from values and vice versa

[23:39] <timotimo> m: (1 ... 10 ... 4 ... 20).join(",").say

[23:40] <camelia> rakudo-moar 2b991664d: OUTPUT: «1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20␤»

[23:41] <ryanth> Heh, yeah that's definitely a fun operator. Slightly less fun after spending half an hour tracking down a single whitespace character bug. ;-)

[23:41] <TreyHarris> It's a bit like the Cool stuff I was messing with above; it seems that you can't control coercion from the calling side, the best you can do is create a second temporary value of the exact type you want the coercion to see

[23:43] <timotimo> ryanth: i wish i had an idea for how to make that easier to figure out :|

[23:44] <ryanth> Indeed. I thought maybe an easily disabled warning if there is whitespace around ... but that has problems of its own.

[23:46] <ugexe> m: sub whats-Cool(Cool(Mu) $x) { say $x.WHAT }; whats-Cool(Cool.new) # you said this never says Cool :P

[23:46] <camelia> rakudo-moar 2b991664d: OUTPUT: «(Cool)␤»

[23:46] <timotimo> comma could highlight it ;)

[23:46] <tobs> TreyHarris: yes, scratch my last half-sentence. What I wanted to say is that "but False" merely changes how the value coerces to Bool by mixing in a role derived from the value False. I wouldn't expect that to add Bool as an alternative to the value's type.

[23:46] <TreyHarris> Perl's almost never had whitespace sensitivity in any place that everyday code tidying might affect; this is unusual in being a case where it has a big effect.

[23:46] <ryanth> ^

[23:47] <ryanth> I'm still trying to get my head out of Perl5 and into Perl 6 though, so I'm still extremely biased. :-)

[23:47] <timotimo> i'm not sure i understand; what about foo(blah) vs foo (blah)?

[23:48] <timotimo> you might be tempted to split the opening parenthesis off when splitting an argument list across multiple lines perhaps?

[23:48] <tobs> m: ^10 ==> map { $_ ** 2 }␤==> my @a; say @a  # ever been bitten by this? :-)

[23:48] <camelia> rakudo-moar 2b991664d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:2␤------> 3^10 ==> map { $_ ** 2 }7⏏5<EOL>␤    expecting any of:␤        postfix␤        prefix␤        statement end␤        term␤»

[23:48] <tobs> m: ^10 ==> map { $_ ** 2 } ==> my @a; say @a

[23:48] <camelia> rakudo-moar 2b991664d: OUTPUT: «[0 1 4 9 16 25 36 49 64 81]␤»

[23:49] <TreyHarris> ugexe: I meant with values of subtypes of Cool... I'm not sure "Cool.new" is useful. Cool.new("str") or Cool.new(1) throws errors

[23:49] <tobs> Vertical whitespace is significant there. After a closing brace it acts like a semicolon

[23:50] *** ryanth_ joined
[23:50] *** ryanth left
[23:50] <ugexe> i code using *only* Cool.new -- its turing complete

[23:50] <TreyHarris> ryanth: I don't think "Perl 6 is whitespace-sensitive in ways that Perl 5 is not" is an expected part of the headspace retraining, though

[23:51] <TreyHarris> Certainly not in the way that if you're learning Python, you're told up front you need to care about whitespace

[23:53] <ryanth_> The "Traps" page is pretty good, but it could perhaps be organized a bit better. There is a "Whitespace" section near the top, but the bit about the ... operator is under the Operators section. I already knew about it and it was just a typo in my case, but I could see this information being easily missed by someone new.

[23:54] <ryanth_> https://docs.perl6.org/language/traps#Operators

[23:54] *** cpan-p6 left
[23:55] *** cpan-p6 joined
