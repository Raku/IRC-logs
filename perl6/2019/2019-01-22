[00:02] *** aborazmeh joined
[00:02] *** aborazmeh left
[00:02] *** aborazmeh joined
[00:05] <timotimo> 349 megs and i killed it now to build newer commits

[00:13] *** Manifest0 left
[00:13] *** Manifest0 joined
[00:19] *** w_richard_w joined
[00:24] <Kaiepi> timitimo i ran it for 10 seconds and it ended up with 871.7MB of allocations

[00:27] *** zacts left
[00:28] <Kaiepi> the panic doesn't seem to be happening anymore though

[00:31] <timotimo> 871 memory in usage at that point, or 871 mb cumulative allocations?

[00:32] <Kaiepi> cumulative

[00:34] <timotimo> that's not terribly surprising, i think

[00:34] <Kaiepi> i'll check how much was unmapped over that time

[00:36] *** burgulus joined
[00:39] *** MasterDuke joined
[00:40] *** MasterDuke left
[00:40] *** MasterDuke joined
[00:41] <Kaiepi> 525.6MB deallocated cumulative

[00:41] <Kaiepi> so i have no idea what was happening earlier

[01:00] <burgulus> is there a way to initialize a variable that was declared in a role, from the constructor of the class that does that role?

[01:05] <burgulus> role a { has $.t } class b does a { $.t=1 }

[01:07] *** aborazmeh left
[01:07] <lookatme_q> m: role foo { has $.t; submethod BUILD() { $!t = $!t // 1 } }; class bar does foo { }; say bar.new 

[01:07] <camelia> rakudo-moar 5b231e099: OUTPUT: «bar.new(t => 1)␤»

[01:08] <MasterDuke> m: role A { has $.a }; class B does A { }; my $b = B.new(a => "ab"); say $b.a

[01:08] <camelia> rakudo-moar 5b231e099: OUTPUT: «ab␤»

[01:08] <lookatme_q> oh, I misunderstand :/

[01:09] <lookatme_q> m: role foo { has $.t; }; class bar does foo { }; say bar.new(:t6) 

[01:09] <camelia> rakudo-moar 5b231e099: OUTPUT: «bar.new(t => Any)␤»

[01:09] <lookatme_q> m: role foo { has $.t; }; class bar does foo { }; say bar.new(t => 6) 

[01:09] <camelia> rakudo-moar 5b231e099: OUTPUT: «bar.new(t => 6)␤»

[01:15] <burgulus> it is possible in my case the consumer of the class doesn't have the information, which would allow to pass in t

[01:16] <burgulus> is there a constructor overload that would also allow the normal new to be called? Seems when I override new, the object is only a type object at the time of variable access.

[01:18] <burgulus> class a { has $.t; }; class b is a { method new() { $.t = 1; }}; my $i = b.new;

[01:18] <burgulus> Cannot look up attributes in a b type object.

[01:19] <lookatme_q> burgulus, https://docs.perl6.org/language/objects#index-entry-new_%28method%29

[01:19] <lookatme_q> I recommend you read the documents first

[01:20] <burgulus> thanks I will read this section. I've been on the documents for a couple hrs now, but didn't know where to be directed.

[01:23] *** _isomorphismes joined
[01:39] *** dataangel left
[01:48] *** zachk left
[01:48] <burgulus> lookatme_q, thanks that did the trick

[01:49] <burgulus> role a { has $.t; }; class b does a { submethod TWEAK() { $!t = 1; }}

[01:50] *** sena_kun left
[01:57] *** aindilis left
[01:59] *** aindilis joined
[02:02] *** zacts joined
[02:22] <AlexDaniel> Kaiepi: cool, so on HEAD it doesn't happen?

[02:22] *** molaf left
[02:24] <Kaiepi> not anymore

[02:24] <cpan-p6_> New module released to CPAN! Path-Router (0.4.0) by 03HANENKAMP

[02:25] *** w_richard_w left
[02:33] *** kurahaupo_ joined
[02:35] *** molaf joined
[02:35] *** cpan-p6 joined
[02:35] <cpan-p6> 03cpan-p6 reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[02:36] *** kurahaupo left
[02:39] *** kurahaupo_ left
[02:39] *** kurahaupo joined
[02:39] *** zacts left
[02:40] *** zacts joined
[02:41] *** Kaiepi left
[02:43] *** cpan-p6_ left
[02:43] *** Kaiepi joined
[02:44] *** cpan-p6__ joined
[02:49] *** cpan-p6__ left
[02:50] *** _isomorphismes left
[02:54] *** kurahaupo_ joined
[02:55] *** kurahaupo left
[02:55] *** zacts left
[02:56] *** dant joined
[02:58] *** kurahaupo_ left
[02:58] *** kurahaupo joined
[03:28] *** kurahaupo_ joined
[03:28] *** kurahaupo left
[03:28] *** kurahaupo_ left
[03:29] *** kurahaupo joined
[03:29] *** cibs_ is now known as cibs

[03:31] *** _isomorphismes joined
[03:34] *** burgulus left
[03:36] *** kurahaupo_ joined
[03:37] *** kurahaupo left
[03:41] *** kurahaupo_ left
[03:41] *** kurahaupo joined
[03:49] *** leont left
[03:55] *** sno left
[03:55] *** ufobat joined
[03:57] *** ufobat_ left
[04:35] *** sno joined
[04:43] *** kurahaupo_ joined
[04:46] *** kurahaupo left
[04:49] *** kurahaupo_ left
[04:49] *** kurahaupo joined
[04:50] *** kurahaupo left
[04:50] *** kurahaupo joined
[04:50] *** Cabanoss- joined
[04:50] *** kurahaupo left
[04:50] *** kurahaupo joined
[04:52] *** kurahaupo left
[04:52] *** kurahaupo joined
[04:52] *** kurahaupo left
[04:52] *** Cabanossi left
[04:52] *** kurahaupo joined
[04:54] *** ferreira1 left
[04:55] *** kurahaupo left
[04:55] *** kurahaupo joined
[05:02] *** meltingwax is now known as brenden

[05:03] *** brenden is now known as meltingwax

[05:14] *** kurahaupo left
[05:14] *** kurahaupo joined
[05:16] *** kurahaupo_ joined
[05:18] *** w_richard_w joined
[05:19] *** meltingwax left
[05:20] *** kurahaupo left
[05:24] *** w_richard_w left
[05:37] *** _isomorphismes left
[05:39] *** kurahaupo_ left
[05:39] *** kurahaupo joined
[05:42] *** kurahaupo_ joined
[05:43] *** kurahaupo left
[05:43] *** kurahaupo_ left
[05:44] *** kurahaupo joined
[05:44] *** kurahaupo_ joined
[05:48] *** kurahaupo left
[05:51] *** sno left
[05:51] *** curan joined
[05:55] *** molaf left
[06:10] *** sno joined
[06:14] *** quester joined
[06:17] *** kurahaupo_ left
[06:18] *** kurahaupo joined
[06:20] <quester> m: (* ** *)(2,3)

[06:20] <camelia> rakudo-moar 5b231e099: ( no output )

[06:20] <quester> m: say (* ** *)(2,3)

[06:20] <camelia> rakudo-moar 5b231e099: OUTPUT: «8␤»

[06:20] <quester> m: say (* ***)(2,3)

[06:20] <camelia> rakudo-moar 5b231e099: OUTPUT: «8␤»

[06:20] <quester> m: say (*** *)(2,3)

[06:20] <camelia> rakudo-moar 5b231e099: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Multiple HyperWhatevers and Whatevers may not be used together␤at <tmp>:1␤------> 3say (*** *7⏏5)(2,3)␤»

[06:22] * quester thinks it's a bit odd that (* ***)(2.3) works without a complaint

[06:24] *** jmerelo joined
[06:24] <jmerelo> releasable6: status

[06:24] <releasable6> jmerelo, Next release will happen when it's ready. 4 blockers. 115 out of 246 commits logged (⚠ 41 warnings)

[06:24] <releasable6> jmerelo, Details: https://gist.github.com/a22d34712e246958c9a1962323e4aea6

[06:29] *** dant_ joined
[06:31] <dant_> p6: say 1;

[06:31] <camelia> rakudo-moar 5b231e099: OUTPUT: «1␤»

[06:31] <dant_> p6: my %h; %h<a> = [1, 2]; .say for %h<a>.list

[06:31] <camelia> rakudo-moar 5b231e099: OUTPUT: «1␤2␤»

[06:35] <dant_> I need a second opinion. Do have have to "coerce" a SCALAR into a list in order to iterate over it's contents. Example:

[06:35] <dant_> my $x = [1,2]; .say for $x.list

[06:35] <evalable6> dant_, rakudo-moar 5b231e099: OUTPUT: «1␤2␤»

[06:37] <dant_> While I think I understand why, I'm not convinced that this is the most elegant way of expressing my intention.

[06:40] *** dant_ left
[06:41] <dant> p6: say hi

[06:41] <camelia> rakudo-moar 5b231e099: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    hi used at line 1␤␤»

[06:41] <dant> p6: say "hi"

[06:41] <camelia> rakudo-moar 5b231e099: OUTPUT: «hi␤»

[06:43] *** isomorphismes left
[06:46] *** w_richard_w joined
[06:48] <jmerelo> dant: you need to itemize it

[06:48] <jmerelo> dant: meaning pretty much what you do.

[06:48] <jmerelo> m: my $x = [1,2]; .say for $x<>

[06:48] <camelia> rakudo-moar 5b231e099: OUTPUT: «1␤2␤»

[06:49] <jmerelo> m: my $x = [1,2]; .say for $x.item

[06:49] <camelia> rakudo-moar 5b231e099: OUTPUT: «[1 2]␤»

[06:50] <jmerelo> m: my $x = [1,2]; .say for $x.flat

[06:50] <camelia> rakudo-moar 5b231e099: OUTPUT: «1␤2␤»

[06:50] <jmerelo> m: my $x = [1,2]; .say for |$x

[06:50] <camelia> rakudo-moar 5b231e099: OUTPUT: «1␤2␤»

[06:50] <jmerelo> dant: There is more than one way to do it (TM)

[07:00] *** w_richard_w left
[07:05] *** quester left
[07:05] <dant> Jmerelo: Very helpful. Thanks. So, when $x contains something "listy", it is my responsibility to explicitly "flatten" it in order to iterate over it.  

[07:10] <jmerelo> dant: it's de-containerizing it, actually. But yes, that's the gist of it.

[07:10] <jmerelo> m: my $x = [1,2]; say $x.perl

[07:10] <camelia> rakudo-moar 5b231e099: OUTPUT: «$[1, 2]␤»

[07:10] <jmerelo> dant: ^^^ You see the $? It indicates it's "itemized"

[07:13] <dant> jmerelo: Thanks. I understand it much better now. I'll reread the relevant docs with this in mind.

[07:13] <jmerelo> dant: if you find something missing there, just raise an issue

[07:14] <jmerelo> m: my $x = [1,2]; say $x.VAR ~~ Scalar

[07:14] <camelia> rakudo-moar 5b231e099: OUTPUT: «True␤»

[07:14] <jmerelo> m: my @x = [1,2]; say $x.VAR ~~ Scalar

[07:14] <camelia> rakudo-moar 5b231e099: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared. Did you mean '@x'?␤at <tmp>:1␤------> 3my @x = [1,2]; say 7⏏5$x.VAR ~~ Scalar␤»

[07:14] <jmerelo> m: my @x = [1,2]; say @x.VAR ~~ Scalar

[07:14] <camelia> rakudo-moar 5b231e099: OUTPUT: «False␤»

[07:17] <Geth> ¦ doc: 4ea1ff9aa5 | (JJ Merelo)++ | doc/Language/mop.pod6

[07:17] <synopsebot> Link: https://doc.perl6.org/language/mop

[07:17] <Geth> ¦ doc: Add 'is itemized?' to index

[07:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4ea1ff9aa5

[07:20] *** domidumont joined
[07:26] *** ravenousmoose joined
[07:26] *** abraxxa joined
[07:26] *** abraxxa left
[07:27] *** abraxxa joined
[07:27] *** jmerelo left
[07:31] *** abraxxa left
[07:33] *** _isomorphismes joined
[07:38] *** _isomorphismes left
[07:40] *** rindolf joined
[07:46] *** abraxxa joined
[07:56] *** jcarty joined
[08:03] *** SHODAN left
[08:13] *** Manifest0 left
[08:16] *** patrickb joined
[08:28] *** dakkar joined
[08:30] *** mowcat left
[08:30] *** robertle_ joined
[08:45] *** vandaeld_ joined
[08:48] *** ravenousmoose left
[08:49] *** vandaeld_ left
[08:50] *** ravenousmoose joined
[08:56] * lizmat clickbaits https://p6weekly.wordpress.com/2019/01/21/2019-03-youtubed/

[08:57] *** scimon joined
[08:57] <ufobat>  lizmat++

[08:58] <lizmat> moritz: ^^

[09:04] *** pmurias left
[09:05] *** pmurias joined
[09:06] *** w17t joined
[09:08] *** krkini is now known as kini

[09:17] *** cpan-p6 left
[09:26] *** cpan-p6 joined
[09:26] <cpan-p6> 03cpan-p6 reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[09:27] <tyil> now it's running in its own little namespace

[09:27] <ufobat> woho

[09:27] <tyil> ready to have more perl utils alongside it

[09:29] <moritz> lizmat: twot :)

[09:29] <lizmat> :-)

[09:32] *** kst` left
[09:32] *** kst joined
[09:33] *** rindolf left
[09:34] *** _isomorphismes joined
[09:35] *** ravenousmoose_ joined
[09:36] *** hph^ joined
[09:38] *** ravenousmoose left
[09:39] *** _isomorphismes left
[09:40] *** yqt joined
[09:42] *** rindolf joined
[09:46] <tyil> it's snowing :o

[09:46] <tyil> hard evidence that global warming is a myth!

[09:50] <ufobat> m: say "weather" ~~  "climate"

[09:50] <camelia> rakudo-moar 5b231e099: OUTPUT: «False␤»

[09:59] <cpan-p6> New module released to CPAN! Lumberjack-Dispatcher-Syslog (0.0.3) by 03JSTOWE

[10:06] *** ravenousmoose_ left
[10:10] *** ravenousmoose_ joined
[10:14] *** llfourn_ left
[10:16] *** reach_satori left
[10:21] *** llfourn joined
[10:24] <pmurias> tyil: report back if it keeps snowing for the whole year straight ;)

[10:25] <tyil> pmurias: going strong for now!

[10:33] *** kensanata joined
[10:48] *** ravenousmoose_ is now known as ravenousmoose

[10:57] *** oftl_ is now known as oftl

[11:00] <ufobat> ive got a sub that has a couplse of say's in it, as well as a run(), and i just see all the says after the run() returned. what could cause this delayed printing on the console?

[11:01] <AlexDaniel> ufobat: stdout vs stderr?

[11:01] <ufobat> all on stdout

[11:01] <lizmat> buffering ?

[11:01] <jnthn> Is it direct to the terminal, or is there something between it?

[11:01] <ufobat> well not true, the run prints on stderr, maybe, if i dont specify anything

[11:02] <ufobat> i invoke the perl process directly on my git shell (on windows)

[11:02] <jnthn> If the output isn't to a TTY then it will turn on output buffering

[11:02] <ufobat> how do i figure out if my terminal as a tty?

[11:03] <jnthn> $*OUT.t I guess

[11:03] <cpan-p6> New module released to CPAN! Crypt-CAST5 (0.1.0) by 03KAIEPI

[11:03] <jnthn> You can see what $*OUT.out-buffer says to see if it's turned on

[11:03] <ufobat> docker -ti --rm alpine complains that there is no tty. so i am not having a TTY

[11:04] <ufobat> can i disable buffering?

[11:05] <timotimo> i'd expect setting $*OUT.out-buffer to 0 or False would do that, but haven't tried

[11:05] <ufobat> $*OUT.out-buffer is set to 0

[11:06] <El_Che> ufobat: an alpine bug? I remember something about it. 

[11:06] <ufobat> El_Che, no the docker was just my way to checfk whether there is a tty or not

[11:06] <ufobat> i am on windows right now :(

[11:07] <El_Che> ah ok

[11:07] <ufobat> $*OUT.t is False, and $*OUT.out-buffer is 0 :-(

[11:07] <jnthn> Try $*OUT.out-buffer = False

[11:08] <ufobat> aha! works

[11:09] <ufobat> thanks to everyone!

[11:10] * jnthn wonders if we could do anything better, but if the thing really isn't claiming to be a TTY to other programs, it's not a bug in our "is this a TTY" detection

[11:23] *** zakharyas joined
[11:35] *** _isomorphismes joined
[11:40] *** _isomorphismes left
[11:43] <ufobat> i dont have enough windows know how to comment on that topic, but if (most, cmd and powershell) do not claim to have a TTY then this is not the information to rely on for enabling buffering or not

[11:45] *** lucasb joined
[11:48] <daxim> jnthn, I submitted a purchase order for comma supporter, but didn't receive an invoice. if you handle this directly, can you have a look?

[11:50] *** Kaiepi left
[11:50] *** Kaiepi joined
[11:51] *** molaf joined
[11:53] <jnthn> daxim: I don't personally send those, but I can of course poke the appropriate person.

[11:53] <daxim> thanks

[11:54] * tadzik giggles at the "C"-s on comma/cro pages

[11:55] <tadzik> Comma - Cro - Courses - Consulting. Brought to you by... Cedument? :)

[11:56] <daxim> 🌜 very auspicious

[11:57] *** isomorphismes joined
[12:02] <jnthn> But only Comma and Cro have stickers... :-)

[12:04] *** AlexDaniel left
[12:04] <moritz> daxim: very causpicious :)

[12:23] *** saki joined
[12:23] *** saki left
[12:23] *** sena_kun joined
[12:34] *** molaf left
[12:34] *** mowcat joined
[12:45] *** aborazmeh joined
[12:45] *** aborazmeh left
[12:45] *** aborazmeh joined
[12:46] *** sftp left
[12:48] *** sftp joined
[12:53] *** dogbert2_ left
[12:58] *** MasterDuke left
[12:59] *** mowcat left
[13:09] *** pmurias left
[13:14] *** leont joined
[13:26] <cpan-p6> New module released to CPAN! URI-FetchFile (0.0.3) by 03JSTOWE

[13:29] <sjn> cpan-p6 should add a karma++ to it's postings, methinks :)

[13:32] *** molaf joined
[13:33] *** w17t left
[13:33] *** pmurias joined
[13:36] *** _isomorphismes joined
[13:40] *** _isomorphismes left
[14:01] *** molaf left
[14:08] <lizmat> sjn: patches welcome  :-)

[14:13] *** mike_sw joined
[14:14] <tyil> sjn: care to elaborate?

[14:15] <sjn> "New module released to CPAN! URI-FetchFile (0.0.3) by JSTOWE++"

[14:16] <lizmat> tyil: while you're at it: "New module" vs "Update module"

[14:16] <sjn> assuming we still have a karma bot in this channel :)

[14:16] <lizmat> sjn: we don't afaik

[14:16] <lizmat> but it's still a nice gesture

[14:16] <sjn> aw

[14:16] <tyil> I have infra to host more bots, but idk if freenode will be happy if I have 10 bots coming from my IP all of a sudden :p

[14:16] * sjn likes karma bots

[14:17] <lizmat> tyil: maybe only say "New" if it is an initial update of the module ?

[14:17] <tyil> lizmat: that can be done soon-ish

[14:17] <tyil> I dont have any database with old module info yet

[14:17] <tyil> but I have the database to store this ready, I just need to import some data into it

[14:17] <tyil> and the program to import data into it should also be mostly usable

[14:19] <lizmat> ++tyil

[14:21] <tyil> I was hoping to bring the database up and running this week, but as I got the keys to my new appartment I may have less time than I anticipated

[14:21] <tyil> but I'll do my best

[14:21] <sjn> tyil: no hurries :)

[14:22] <tyil> you can keep up with progression on the repo: https://git.tyil.nl/perl6/app-cpan

[14:22] *** pmurias left
[14:26] *** curan left
[14:28] *** aborazmeh left
[14:43] *** robertle_ left
[14:44] *** robertle_ joined
[14:45] *** isomorphismes left
[14:46] *** robertle_ left
[14:57] *** zakharyas left
[15:07] *** ExtraCrispy left
[15:09] <hahainternet> if you need more IPs for more bots i can run containers on a few machines if required

[15:11] *** skids joined
[15:14] *** rindolf left
[15:15] *** lucasb left
[15:22] *** markoong joined
[15:25] *** jme` joined
[15:26] <Util> m: say rand xx 2;

[15:26] <camelia> rakudo-moar 5b231e099: OUTPUT: «(0.011579168018182928 0.2339042665648644)␤»

[15:26] *** cpan-p6_ joined
[15:26] <cpan-p6_> 03cpan-p6_ reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadnotifierbot

[15:27] *** mowcat joined
[15:28] *** abraxxa left
[15:28] *** cpan-p6 left
[15:29] *** cpan-p6 joined
[15:32] *** abraxxa joined
[15:33] *** cpan-p6 left
[15:35] *** jme` left
[15:38] *** MilkmanDan left
[15:38] *** MilkmanDan joined
[15:40] *** kurahaupo left
[15:41] *** ExtraCrispy joined
[15:43] *** roguelazer joined
[15:46] *** abraxxa left
[15:51] *** ExtraCrispy left
[15:52] *** roguelazer left
[15:56] *** rindolf joined
[16:04] *** jcarty left
[16:07] *** abraxxa joined
[16:13] *** jmerelo joined
[16:13] <jmerelo> releasable6: status

[16:13] <releasable6> jmerelo, Next release will happen when it's ready. 4 blockers. 115 out of 246 commits logged (⚠ 41 warnings)

[16:13] <releasable6> jmerelo, Details: https://gist.github.com/aa0f0c8c32e9a8a99a62ff4125c2159a

[16:14] *** ferreira joined
[16:15] *** ravenousmoose left
[16:22] *** domidumont left
[16:25] *** patrickb left
[16:35] <jmerelo> .tell moritz docs.perl6.org is down

[16:35] <yoleaux> jmerelo: I'll pass your message to moritz.

[16:35] <jmerelo> .tell AlexDaniel docs.perl6.org is down

[16:35] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[16:39] *** AlexDaniel joined
[16:39] <jmerelo> Hi, AlexDaniel 

[16:41] <AlexDaniel> jmerelo: hello

[16:41] <yoleaux> 16:35Z <jmerelo> AlexDaniel: docs.perl6.org is down

[16:41] <jmerelo> AlexDaniel: ping is OK, seems to be a problem with the website itself.

[16:41] <AlexDaniel> moritz: ↑ ?

[16:41] <AlexDaniel> perl6.org is down too

[16:41] <AlexDaniel> timotimo: ↑ ?

[16:42] <AlexDaniel> jmerelo: https://github.com/perl6/infrastructure-doc/blob/master/hosts/www.p6c.org.pod#administration

[16:43] <jmerelo> AlexDaniel: OK, thanks.

[16:43] <jmerelo> timotimo: Are you around?

[16:43] <jmerelo> .seen [Coke]

[16:43] <yoleaux> I saw [Coke] 16 Jan 2019 15:51Z in #perl6-dev: <[Coke]> I am barely handling my current volunteer responsibilities with the TPF.

[16:43] <jmerelo> .seen FROGGS

[16:43] <yoleaux> I saw FROGGS 28 Jul 2018 11:59Z in #perl6: <FROGGS> though that'd mean that if something was not present at compile time, it wont be used if it get installed later on

[16:43] <moritz> I'm around now

[16:43] <yoleaux> 16:35Z <jmerelo> moritz: docs.perl6.org is down

[16:44] <jmerelo> moritz++

[16:44] *** reach_satori joined
[16:44] <Util> www.perl6.org is also down

[16:45] <AlexDaniel> tyil: something will be unhappy, yes. I did add a random delay to whateverables so that they don't join at the same time…

[16:45] <AlexDaniel> and that works, for now… :)

[16:47] <Geth> ¦ doc: 2f0a42be7c | (JJ Merelo)++ | doc/Language/modules.pod6

[16:47] <synopsebot> Link: https://doc.perl6.org/language/modules

[16:47] <Geth> ¦ doc: Adds note and example to address comment

[16:47] <Geth> ¦ doc: 

[16:47] <Geth> ¦ doc: Closes #2544

[16:47] <Geth> ¦ doc: 

[16:47] <Geth> ¦ doc: Comment was 3 years old, BTW.

[16:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2f0a42be7c

[16:47] <moritz> *.perl6.org up again

[16:50] <AlexDaniel> moritz: thank you ♥

[16:50] <AlexDaniel> moritz: any idea about what happened to it?

[16:51] <jmerelo> great! Thanks moritz

[16:51] <Util> moritz++

[16:53] <AlexDaniel> I made a huge mistake… It's -15°C and I went outside

[16:54] <lizmat> AlexDaniel: and now ?

[16:55] <lizmat> NL had a new traffic jam record: 2339 km

[16:55] <moritz> AlexDaniel: the www.p6c.org VM froze up

[16:55] <moritz> no idea why

[16:56] <AlexDaniel> lizmat: now I'm back home under a blanket :)

[17:10] *** patrickb joined
[17:13] <timotimo> statisfiable6: help

[17:13] <statisfiable6> timotimo, Available stats: core (CORE.setting size), install (size of the installation), libmoar (libmoar.so size) # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Statisfiable

[17:14] <timotimo> statisfiable6: core

[17:14] <statisfiable6> timotimo, OK! Working on it…

[17:14] <jmerelo> AlexDaniel: get well soon...

[17:15] <AlexDaniel> jmerelo: I'm OK, actually, I hope :)

[17:18] <jmerelo> AlexDaniel: get warmer soon, I guess :-)

[17:19] <AlexDaniel> timotimo: I don't think it'll finish… it stopped working for some reason

[17:20] <timotimo> oh

[17:21] <lizmat> Something went down recently in the setting.moarvm size:

[17:21] <lizmat> -rw-r--r--  1 liz  staff  14589128 Jan 20 18:29 CORE.setting.moarvm

[17:21] <lizmat> -rw-r--r--  1 liz  staff  14371712 Jan 21 14:51 CORE.setting.moarvm

[17:21] <scimon> Question in Stackoverflow about Key errors on hashes. Don't we give a warning about that? I thought we did.

[17:21] * lizmat looks

[17:22] <timotimo> there's one commit jnthn made that removes bytecode that was generated from a { ... } block before it was decided that it was actually a hash

[17:22] <lizmat> scimon: what should it have warned about ?

[17:22] <timotimo> that was 4th of january, though

[17:22] <lizmat> timotimo: but that was like a week ago, no ?

[17:22] <lizmat> right

[17:23] <timotimo> lowering $_ and removing unused $_ could have helped

[17:23] <lizmat> ah, that

[17:23] <lizmat> looks though it was 5b231e09991f1306 

[17:24] <timotimo> that's strange

[17:24] <timotimo> i would have expected that to increase the size rather than decrease

[17:24] <moritz> m: use fatal; my %h; say "foo %h<bar>"; say "alive"

[17:24] <camelia> rakudo-moar 5b231e099: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤foo ␤alive␤  in block <unit> at <tmp> line 1␤»

[17:27] <scimon> lizmat: Ignore me. I'm being dumb. Again.

[17:27] <lizmat> I won't and you aren't.  Again  :-)

[17:29] *** yqt left
[17:31] <lizmat> scimon: nice one about the role

[17:31] <lizmat> I wonder if we should put something like that in cofre

[17:31] <lizmat> *core

[17:34] <scimon> I figured I'd make a module for it. Couple of roles, maybe as traits. One to die and one to warn if the key doesn't exist.

[17:34] *** scimon left
[17:41] *** zakharyas joined
[17:46] *** dakkar left
[17:46] *** KDr2 left
[17:48] *** zakharyas left
[17:50] *** statisfiable6 left
[17:52] *** domidumont joined
[17:56] *** kensanata left
[17:59] <AlexDaniel> timotimo: ok, I know what's wrong… maybe

[18:03] *** sno left
[18:05] *** statisfiable6 joined
[18:05] *** ChanServ sets mode: +v statisfiable6

[18:06] <AlexDaniel> statisfiable6: core

[18:06] <statisfiable6> AlexDaniel, OK! Working on it…

[18:06] <AlexDaniel> 🤞

[18:11] *** jme` joined
[18:12] <AlexDaniel> hmm…

[18:13] *** statisfiable6 left
[18:25] *** statisfiable6 joined
[18:25] *** ChanServ sets mode: +v statisfiable6

[18:26] <AlexDaniel> statisfiable6: core

[18:26] <statisfiable6> AlexDaniel, OK! Working on it…

[18:36] <statisfiable6> AlexDaniel, https://gist.github.com/d2cf44884dbbac163dcb1366f49964bb

[18:36] <AlexDaniel> timotimo: ↑

[18:41] <AlexDaniel> statisfiable6: install

[18:41] <statisfiable6> AlexDaniel, OK! Working on it…

[18:46] *** sno joined
[18:52] <statisfiable6> AlexDaniel, https://gist.github.com/6d06727ebd4c6da9a5188ffccdbecc3a

[18:52] <AlexDaniel> statisfiable6: libmoar

[18:52] <statisfiable6> AlexDaniel, OK! Working on it…

[18:53] *** pecastro joined
[19:04] <statisfiable6> AlexDaniel, https://gist.github.com/3861ce25aad32420a72f7ffa0a904990

[19:05] <AlexDaniel> timotimo: ↑ all graphs!

[19:05] *** mowcat left
[19:10] *** con joined
[19:10] <con> how can I do something like `use warnings 'FATAL' => 'all'` and `use autodie qw(:all)` in perl6?

[19:11] <moritz> autodie coresponds to "use fatal;"

[19:12] *** melezhik joined
[19:12] *** ravenousmoose joined
[19:13] <timotimo> i wonder if we'll get the core setting size down again somehow at some point ...

[19:13] <melezhik> Hi! I run external command as run "command", @params, :out; How do I make this not to fail when command exists with none zero code? I am interested in other ways then catching exceptions

[19:14] <moritz> melezhik: the return value of run is a Promise

[19:15] <moritz> so store it somewhere, don't let it explode in sink context

[19:16] <melezhik> Hi moritz: let me show a certain example

[19:16] <melezhik> m: 'run "fff", :out'

[19:16] <camelia> rakudo-moar 5b231e099: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "run \"fff\", :out" in sink context (line 1)␤»

[19:16] <melezhik> m: run "fff", :out

[19:16] <camelia> rakudo-moar 5b231e099: OUTPUT: «The spawned command 'fff' exited unsuccessfully (exit code: 1)␤  in block <unit> at <tmp> line 1␤␤»

[19:17] <timotimo> m: my $run-val = run "fff", :out; say $run-val.^name; say $run-val.exitcode; say "alive"

[19:17] <camelia> rakudo-moar 5b231e099: OUTPUT: «Proc␤1␤alive␤»

[19:17] <melezhik> I'd like to avoid exceptions, through "run" parameters, is it possible?

[19:17] <timotimo> like this -^

[19:17] <melezhik> ahh, should I assign?

[19:17] <timotimo> "disarm" the Proc object that is returned by Proc

[19:17] <timotimo> that's what moritz told you :)

[19:18] <melezhik> moritz: thanks!

[19:18] <melezhik> timotimo: thanks too ((=:

[19:19] <melezhik> but I also need to get stdout IF command is successful 

[19:19] <melezhik> normally this is achievable by 

[19:20] <melezhik> sorry, 5 secs

[19:20] <melezhik> m: my $a = run "ls", :out; say $a.out.lines

[19:20] <camelia> rakudo-moar 5b231e099: OUTPUT: «("my file" Inline-Perl5 Perlito bin dalek-queue evalbot evalbot.log file.txt hs_err_pid7347.log lib log mbox nqp-js p1 p2 p6eval-token perl5 precomp rakudo-j-1 rakudo-j-2 rakudo-j-inst rakudo-j-inst-1 rakudo-j-inst-2 rakudo-m-1 rakudo-m-2 rakudo-m-ins…»

[19:21] <melezhik> m: my $a = run "lggggg", :out; say $a.out.lines

[19:21] <camelia> rakudo-moar 5b231e099: OUTPUT: «()␤»

[19:22] <melezhik> well look like I die when I try to close

[19:22] <melezhik> m: my $a = run "lggggg", :out; say $a.out.lines; $a.out.close()

[19:22] <camelia> rakudo-moar 5b231e099: OUTPUT: «()␤The spawned command 'lggggg' exited unsuccessfully (exit code: 1)␤  in block <unit> at <tmp> line 1␤␤»

[19:22] <melezhik> that the case

[19:22] <melezhik> how can I handle that?

[19:24] <timotimo> the return value of $a.out.close is what's blowing up

[19:24] <timotimo> m: my $a = run "lggggg", :out; say $a.out.lines; $a.out.close().^name

[19:24] <camelia> rakudo-moar 5b231e099: OUTPUT: «()␤»

[19:24] <timotimo> m: my $a = run "lggggg", :out; say $a.out.lines; say $a.out.close().^name

[19:24] <camelia> rakudo-moar 5b231e099: OUTPUT: «()␤Proc␤»

[19:24] <timotimo> it's the Proc object "again", and it has the exit code in it as well

[19:24] *** mike_sw left
[19:26] *** reach_satori left
[19:27] *** melezhik left
[19:27] *** reach_satori joined
[19:28] *** sauvin left
[19:28] <timotimo> also thanks, AlexDaniel :)

[19:34] *** melezhik joined
[19:37] <melezhik> timotimo: so it's just an .^name at the end to do the trick?

[19:39] *** ravenousmoose left
[19:41] <melezhik> anyway, it works. thank you!

[19:43] <timotimo> well, not really

[19:43] <timotimo> just don't sink the value itself

[19:43] <timotimo> store it away and it'll be fine

[19:44] *** ravenous_ joined
[19:46] <Kaiepi> m: use NativeCall; sub strlen(Str --> size_t) is native{*}; my Str $foo = explicitly-manage('ayy lmao'); say strlen($foo)

[19:46] <camelia> rakudo-moar 5b231e099: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form. If you did not mean to declare a unit-scoped sub,␤perhaps you accidentally placed a semicolon after routi…»

[19:47] <Kaiepi> m: use NativeCall; my sub strlen(Str --> size_t) is native{*}; my Str $foo = explicitly-manage('ayy lmao'); say strlen($foo)

[19:47] <camelia> rakudo-moar 5b231e099: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form. If you did not mean to declare a unit-scoped sub,␤perhaps you accidentally placed a semicolon after routi…»

[19:47] <timotimo> needs to have a space after "native"

[19:47] <Kaiepi> oh

[19:48] <Kaiepi> m: use NativeCall; sub strlen(Str --> size_t) is native {*}; sub free(Pointer[void]) is native {*}; my Str $foo = explicitly-manage('ayy lmao'); say strlen($foo); free(nativecast(Pointer[void], $foo))

[19:48] <camelia> rakudo-moar 5b231e099: OUTPUT: «Type check failed in assignment to $foo; expected Str but got NativeCall::CStr (NativeCall::CStr.new)␤  in block <unit> at <tmp> line 1␤␤»

[19:48] <Kaiepi> m: use NativeCall; sub strlen(Str --> size_t) is native {*}; sub free(Pointer[void]) is native {*}; my Str $foo = 'ayy lmao'; explicitly-manage($foo); say strlen($foo); free(nativecast(Pointer[void], $foo))

[19:48] <camelia> rakudo-moar 5b231e099: OUTPUT: «8␤Native call expected return type with CPointer, CStruct, CArray, or VMArray representation, but got a P6opaque (Str+{NativeCall::ExplicitlyManagedString})␤  in sub nativecast at /home/camelia/rakudo-m-inst-2/share/perl6/sources/947BDAB9F96E0E5FC…»

[19:50] <Kaiepi> didn't this used to work?

[19:50] <timotimo> i would expect it to, yeah

[19:52] *** melezhik left
[19:59] <Kaiepi> what does "is raw" do?

[19:59] <timotimo> defers selection of context (item vs list for example) but doesn't require a writable container like "is rw" does

[20:01] <timotimo> BBL

[20:08] *** jmerelo left
[20:10] *** jme` left
[20:11] *** ferreira left
[20:24] *** zachk joined
[20:29] *** zakharyas joined
[20:37] *** ravenous_ is now known as ravenousmoose

[20:39] *** ets1 joined
[20:44] <tyil> lizmat: I now have the database up-and-running to keep track of modules, so I can also implement new vs updated module text

[20:45] <tyil> not sure if I want to do that first, or make a program to crawl the entire cpan index for perl 6 modules

[20:45] <tyil> to ensure the database is complete

[20:46] <tyil> does anyone know if cpan has ratelimiting on http requests? or can I just fire at it as fast as computerly possible?

[20:54] <timotimo> have you looked at how exactly modules.perl6.org uses rsync with cpan?

[20:55] <tyil> not yet

[20:55] <timotimo> only for CPAN/authors/id?

[20:55] <timotimo> it does finish really quickly

[20:55] <timotimo> https://modules.perl6.org/update.log - just looking at the log right now

[20:55] <tyil> I was looking at ecogen, which is used to generate info for zef

[20:55] <tyil> if im correct

[20:55] <timotimo> ah, i think that's right

[20:57] <tyil> where can I find the code behind the update mechanism for modules.perl6.org?

[20:57] <timotimo> i think it's the same name on github under perl6/

[20:57] <tyil> found it https://github.com/perl6/modules.perl6.org

[20:58] *** Praise- joined
[20:58] *** Praise- left
[20:58] *** Praise- joined
[20:58] <tyil> it doesnt look like perl 6 tho ;~;

[20:59] <timotimo> the web app definitely isn't

[20:59] <timotimo> not sure about the updater script

[20:59] <tyil> https://github.com/perl6/modules.perl6.org/blob/master/bin/build-project-list.pl

[20:59] <tyil> its perl 5

[20:59] <tyil> but I can gather the required info from it nonetheless I think

[21:09] *** ets1 left
[21:10] *** domidumont left
[21:12] *** patrickb left
[21:13] *** ravenousmoose left
[21:29] *** ferreira joined
[21:32] *** Praise- is now known as Praise

[21:32] *** ravenousmoose joined
[21:36] *** |oLa| left
[21:37] <cpan-p6_> New module released to CPAN! LibraryCheck (0.0.8) by 03JSTOWE

[21:39] *** zakharyas left
[21:45] *** |oLa| joined
[21:47] *** sauvin joined
[21:52] *** abc3354 joined
[21:52] <abc3354> hi

[21:52] <ufobat> hi

[21:52] *** abc3354 left
[21:52] <sena_kun> o/

[21:53] <ufobat> good bye :D

[22:06] *** molaf joined
[22:12] *** molaf left
[22:15] *** MasterDuke joined
[22:15] *** MasterDuke left
[22:15] *** MasterDuke joined
[22:16] *** Kaiepi left
[22:16] *** Kaiepi joined
[22:20] *** Kaypie joined
[22:20] *** Kaiepi left
[22:25] *** skids left
[22:36] *** zachk left
[22:36] *** zachk joined
[22:37] *** ravenousmoose left
[22:45] *** ferreira left
[22:46] *** Merfont joined
[22:46] *** Kaypie left
[22:48] *** con left
[22:56] *** rindolf left
[22:58] *** abraxxa left
[23:04] *** ParsonsNose joined
[23:04] <ParsonsNose> #jdd

[23:04] *** ParsonsNose left
[23:05] *** ParsonsNose joined
[23:06] *** ParsonsNose left
[23:06] *** ParsonsNose joined
[23:16] *** Merfont is now known as Kaiepi

[23:37] * leont is rather surprised to discover modules.perl6.org is written in perl5

[23:48] <sena_kun> well...

[23:50] <sena_kun> I suspect it was written when Perl 6 was not as mature as it is now, ecosystem-wise, performance-wise. Attempts to rewrite it in Perl 6 are welcome, one can suspect. :)

[23:55] *** MasterDuke left
