[00:00] *** aborazmeh joined
[00:00] *** aborazmeh left
[00:00] *** aborazmeh joined
[00:10] *** ecocode left
[00:10] *** ecocode joined
[00:17] *** lucasb_ left
[00:40] *** aborazmeh left
[00:43] *** AlexDaniel left
[00:54] *** aborazmeh joined
[00:54] *** aborazmeh left
[00:54] *** aborazmeh joined
[01:06] *** uzl joined
[01:08] <uzl> .tell jmerelo Someone should post a link to the survey on /r/perl6 as a sticky post. It might add that extra bit of participation.

[01:08] <yoleaux> uzl: I'll pass your message to jmerelo.

[01:09] *** uzl left
[01:30] *** zakharyas joined
[01:31] <Xliff> Does nqp do classes?

[01:33] *** epony joined
[01:35] *** aborazmeh left
[01:51] <tbrowder> xliff: yes

[01:54] <Xliff> tbrowder: I take it you'd have to invoke methods using an nqp op?

[01:54] <tbrowder> look in repo perl6/nqp/examples/use-classes.nqp for an example

[01:58] <tbrowder> invoking class methods looks like p6 unless you're doing something weird in the signature.

[01:59] <tbrowder> of course the method has nqpisms, say($s) vs say $s

[02:04] <tbrowder> sorry, haven't visited nqp for a while. invocation only one way afaik, see the example. class.method(sig)

[02:18] <Xliff> Thanks!

[02:35] *** evalable6 left
[02:40] *** evalable6 joined
[02:46] *** Cabanossi left
[02:57] *** Cabanossi joined
[02:58] *** Xliff left
[02:59] *** b2gills left
[03:00] *** b2gills joined
[03:06] *** cpan-p6 left
[03:08] *** cpan-p6 joined
[03:08] *** cpan-p6 left
[03:08] *** cpan-p6 joined
[03:08] *** skaji_ left
[03:08] *** skaji_ joined
[03:19] *** kaare_ left
[03:19] *** kaare_ joined
[03:19] *** adu joined
[03:22] *** skaji_ left
[03:22] *** mack[m] left
[03:22] *** tyil[m] left
[03:22] *** TreyHarris left
[03:22] *** yubimusubi left
[03:22] *** Altreus left
[03:22] *** Juerd left
[03:22] *** sjn left
[03:22] *** f3ew left
[03:22] *** Sharparam left
[03:22] *** [particle] left
[03:22] *** ZzZombo left
[03:22] *** sergiotarxz[m] left
[03:22] *** oodani left
[03:22] *** unicodable6 left
[03:22] *** bloatable6 left
[03:22] *** greppable6 left
[03:22] *** BinGOs left
[03:26] *** irdr left
[03:28] *** irdr joined
[03:38] *** skaji_ joined
[03:38] *** mack[m] joined
[03:38] *** tyil[m] joined
[03:38] *** TreyHarris joined
[03:38] *** yubimusubi joined
[03:38] *** Altreus joined
[03:38] *** Juerd joined
[03:38] *** sjn joined
[03:38] *** f3ew joined
[03:38] *** Sharparam joined
[03:38] *** [particle] joined
[03:38] *** ZzZombo joined
[03:38] *** sergiotarxz[m] joined
[03:38] *** oodani joined
[03:38] *** unicodable6 joined
[03:38] *** bloatable6 joined
[03:38] *** greppable6 joined
[03:38] *** BinGOs joined
[03:38] *** tolkien.freenode.net sets mode: +vvv unicodable6 bloatable6 greppable6

[04:04] *** farcas82regreg joined
[04:04] *** Xliff joined
[04:05] <Xliff> \o

[04:05] <Xliff> Is there a way to access the Attribute type from a $! or a $. value in a class?

[04:06] <Xliff> m: class A { has $.a; has $.b }; A.new.a.^methods.say

[04:06] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(Method+{is-nodal}.new Method+{is-nodal}.new Method+{is-nodal}.new cache Method+{is-nodal}…»

[04:06] <evalable6> Xliff, Full output: https://gist.github.com/93532fc3356664dbfc0af1092af82c5b

[04:07] <Xliff> m: class A { has $.a; has $.b }; A.new.a.ATTRIBUTE.say

[04:07] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(exit code 1) No such method 'ATTRIBUTE' for invocant of type 'Any'␤  in block <unit> at /tmp/EKCRMec8BF line 1␤␤»

[04:45] *** eythian left
[04:46] *** eythian joined
[04:46] *** eythian left
[04:46] *** eythian joined
[04:47] *** curan joined
[04:51] *** Sgeo__ joined
[04:54] *** Sgeo_ left
[04:56] <Xliff> m: class A { has $.a; has $.b }; A.new.a.^attribute.gist.say

[04:56] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(exit code 1) No such method 'attribute' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean 'attributes'?␤  in block <unit> at /tmp/nIDtFrWknV line 1␤␤»

[04:56] <Xliff> m: class A { has $.a; has $.b }; A.new.a.^attributes.gist.say

[04:56] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «()␤»

[04:57] <Xliff> m: class A { has $.a; has $.b }; A.new( a => 5).a.^attributes.gist.say

[04:57] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(bigint $!value)␤»

[04:58] <Xliff> m: class A { has $.a; has $.b }; my $a = A.new( a => 5 ); $a.a.^attributes.gist.say; $a.b.^attributes.say

[04:58] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(bigint $!value)␤()␤»

[04:58] <Xliff> m: class A { has $.a; #= Can this be retrieved }; my $a = A.new( a => 5 ); $a.a.^attributes.gist.say; $a.b.^attributes.say

[04:58] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/KxNgsTOMy9␤Missing block␤at /tmp/KxNgsTOMy9:1␤------> 03ttributes.gist.say; $a.b.^attributes.say08⏏04<EOL>␤»

[04:58] <Xliff> m: class A { has $.a; #= Can this be retrieved }; my $a = A.new( a => 5 ); $a.a.^attributes.gist.say;

[04:58] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/FaGsVecCJI␤Missing block␤at /tmp/FaGsVecCJI:1␤------> 03ew( a => 5 ); $a.a.^attributes.gist.say;08⏏04<EOL>␤»

[04:59] *** perlbot left
[04:59] *** simcop2387 left
[04:59] <Xliff> m: class A { has $.a; #= Can this be retrieved; }; my $a = A.new( a => 5 ); $a.a.^attributes.gist.say;

[04:59] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/FnqqcaaEhI␤Missing block␤at /tmp/FnqqcaaEhI:1␤------> 03ew( a => 5 ); $a.a.^attributes.gist.say;08⏏04<EOL>␤»

[04:59] <Xliff> m: class A { has $.a; #= Can this be retrieved }; my $a = A.new( a => 5 ); $a.a.^attributes.gist.say;

[04:59] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Mfct_Wm1Di␤Missing block␤at /tmp/Mfct_Wm1Di:1␤------> 03ew( a => 5 ); $a.a.^attributes.gist.say;08⏏04<EOL>␤»

[04:59] <Xliff> my $c = ::?CLASS.^name.split('::')[* - 1];

[05:10] *** simcop2387 joined
[05:10] *** perlbot joined
[05:10] *** molaf joined
[05:12] *** sauvin joined
[05:27] *** jmerelo joined
[05:27] *** sauvin left
[05:28] <jmerelo> releasable6: status

[05:28] <yoleaux> 13 Jun 2019 20:31Z <AlexDaniel> jmerelo: sounds like a fun squashathon http://ajs.github.io/tools/2019/06/12/perl6-integer-sequences.html

[05:28] <yoleaux> 01:08Z <uzl> jmerelo: Someone should post a link to the survey on /r/perl6 as a sticky post. It might add that extra bit of participation.

[05:28] <releasable6> jmerelo, Next release in ≈6 days and ≈13 hours. 2 blockers. 221 out of 616 commits logged (⚠ 1 warnings)

[05:28] <releasable6> jmerelo, Details: https://gist.github.com/8fe48d2857a42156a0c7ed1d6e9c5624

[05:29] <jmerelo> .tell AlexDaniel it could be :-)

[05:29] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[05:30] <jmerelo> .tell uzl I have no idea how to do any of that. Can someone do that for me? Can you?

[05:30] <yoleaux> jmerelo: I'll pass your message to uzl.

[05:32] *** sauvin joined
[05:44] *** molaf left
[05:51] <jmerelo> .tell timotimo I'm rebuilding db in modules.perl6.org. Any idea why the crontab listing does not work?

[05:51] <yoleaux> jmerelo: I'll pass your message to timotimo.

[05:53] *** mowcat joined
[05:58] *** domidumont joined
[06:13] <Xliff> Anyone have any idea about the best way to add Windows NativeCall support to an existing NativeCall project?

[06:14] <AlexDaniel`> jmerelo: let's do it next month?

[06:14] <AlexDaniel`> we don't stumble upon really fun ideas often

[06:16] *** Geth_ joined
[06:16] *** Geth left
[06:16] <tobs> I really like the idea

[06:16] <tobs> (and the weekend still looks free)

[06:17] <Geth_> ¦ doc: a41396386a | (JJ Merelo)++ | doc/Type/VM.pod6

[06:17] <Geth_> ¦ doc: Adds definition for osname refs #2800

[06:17] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/a41396386a

[06:17] <Geth_> ¦ doc: e6e6e47347 | (JJ Merelo)++ | 2 files

[06:17] <Geth_> ¦ doc: Moves some methods to Systemic refs #2800

[06:17] <synopsebot> Link: https://doc.perl6.org/type/VM

[06:17] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/e6e6e47347

[06:20] *** nadim_ left
[06:30] *** ravenousmoose left
[06:34] <Xliff> .tell jnthn How often are the DLLs on gtk-dlls.p6c.org refreshed?

[06:34] <yoleaux> Xliff: I'll pass your message to jnthn.

[06:35] <rba> Xliff: we brought gtk-dlls.p6c.org yesterday back online.

[06:36] *** ravenousmoose joined
[06:36] <Xliff> rba: Hah! Good timing.

[06:36] <Xliff> rba: Are those DLLs recompiled from GTK on any kind of schedule?

[06:37] <rba> Xliff: timotimo is compiled a new gtk library set for windows. yet this has to be tested and the module has to be ajusted as the filenames did change.

[06:37] *** jmerelo left
[06:37] <Xliff> Oh! Thanks!

[06:37] <rba> Xliff: So you asked just in the right moment... Think there will be something ready soon...

[06:40] <Xliff> rba++

[06:40] <rba> Xliff: timotimo did the work :-)

[06:40] *** nadim_ joined
[06:40] <Xliff> timotimo++

[06:41] *** tyil left
[06:44] <Xliff> .tell timotimo Are you planning on updating the hashes for GTK::Simple::Build.pm6

[06:44] <yoleaux> Xliff: I'll pass your message to timotimo.

[07:13] *** nadim_ left
[07:25] *** rindolf joined
[07:29] *** noisegul joined
[07:34] *** abraxxa joined
[07:40] *** nadim_ joined
[07:54] *** reach_satori left
[08:00] *** grumble left
[08:04] *** abraxxa left
[08:05] *** abraxxa joined
[08:06] *** grumble joined
[08:11] *** adu left
[08:13] *** dolmen joined
[08:13] *** aindilis left
[08:14] *** aindilis joined
[08:15] *** tyilanmenyn joined
[08:24] *** pecastro joined
[08:31] *** veesh left
[08:33] *** reach_satori joined
[08:37] *** veesh joined
[09:02] *** Black_Ribbon left
[09:26] *** domidumont left
[09:43] <tobs> timotimo++ # finally understood your remark about grammar matches being instances of the grammar and how that really saves me.

[09:47] *** dolmen left
[09:52] <timotimo> \o/

[09:52] <timotimo> Xliff: AIUI the original files are now back up at the original URL and they should have the exact same hashes

[09:59] <Xliff> timotimo: How old are those DLLs?

[10:00] <timotimo> old

[10:00] *** veesh left
[10:01] <timotimo> the new DLLs will require the littlest bit of work; they have different filenames, so GTK::Simple and others will probably have to be slightly altered to fit them again

[10:03] <timotimo> i'm all out of windows, though :)

[10:06] <Xliff> LOL

[10:06] <Xliff> I want to see if I can get p6-GtkPlus working on Windows.

[10:07] <Xliff> But I'd really like fresh DLLs to test against, since I

[10:07] <Xliff> *I'm always fairly up-to-date on Linux

[10:07] <timotimo> there are fresh dlls now! \o/

[10:08] <timotimo> http://gtk-dlls.p6c.org/renamed/

[10:08] *** natrys joined
[10:08] <timotimo> the build folder has the dlls packaged up

[10:10] <timotimo> you can use the gtk-simple appveyor file as a template for "build dlls on a windows machine and make them available for download on appveyor's website or via an API"

[10:10] <Xliff> Hmmm....

[10:12] <timotimo> also, maybe you can figure out how to disable test suites for the things vcpkg builds, that'd surely make it at least 2x faster

[10:26] *** zakharyas left
[10:35] *** scimon joined
[10:43] *** wamiks joined
[10:49] <cpan-p6> New module released to CPAN! Archive::Libarchive (0.0.12) by 03FRITH

[10:51] <Xliff> timotimo: Will look into it.

[11:03] <wamiks> Hi, I couldn't find an answer to question. Does a grammar's parse tree hold sub copies of the string at each node or just pointers to locns in the orig string? The memory size could be substantially different on a large tree depending.

[11:04] <timotimo> it's just pointers

[11:04] *** veesh joined
[11:04] <wamiks> Cool, as I had hoped. thx!

[11:04] <timotimo> however, using substr on a string already generates a pointer with start and length values to another string

[11:04] <timotimo> that's a "rope" datastructure, it also supports repetition amounts for each piece

[11:05] <timotimo> so "hello" x 1000000000 will be a very small string in memory

[11:05] <timotimo> until you try to regex-match against it, which will force it to become one blob of contiguous memory for performance reasons

[11:07] <wamiks> hmm. thx. very good to know. that could definitely be something I would do. :)

[11:08] *** Sgeo_ joined
[11:11] *** Sgeo__ left
[11:22] *** curan left
[11:23] *** dolmen joined
[11:27] *** veesh left
[11:28] *** veesh joined
[11:32] *** veesh left
[11:34] *** dolmen left
[11:34] *** Sgeo__ joined
[11:35] *** dolmen joined
[11:37] *** Sgeo_ left
[11:40] *** abraxxa left
[11:43] *** molaf joined
[11:44] *** veesh joined
[11:46] <nadim_> .tell lizmat Could you please name Data::Dump::Tree in the updated modules in the weekly? There's been a few changes, hopefully better doc, and more examples

[11:46] <yoleaux> nadim_: I'll pass your message to lizmat.

[11:46] *** robertle joined
[11:48] <nadim_> timotimo: you may be interested by a simple filter I added to DDT, it "flattens" the tree and outputs: path, key, binder, ... tab separated so on can run the usual filters (cut, tr, grep, ..) on the data structure

[11:48] <nadim_> on the command line

[12:19] *** domidumont joined
[12:28] *** tyilanmenyn is now known as tyil

[12:42] *** AndroidKitKat left
[12:44] *** Sgeo_ joined
[12:47] *** AndroidKitKat joined
[12:48] *** Sgeo__ left
[13:08] *** veesh left
[13:09] *** dumarchie joined
[13:21] *** dolmen left
[13:26] *** skids joined
[13:38] <timotimo> nadim_: oh, that sounds pretty neat

[13:40] *** veesh joined
[13:42] <nadim_> timotimo: if you install the latest there is are two examples

[13:43] <nadim_> timotimo: p6 examples/jflat.pl META6.json | cut -f 1,4

[13:43] *** powerbit left
[13:44] <nadim_> jflat, read a json file, just to have something to render, flattens it via a 2 lines filter  and then it's up to you to write a nicve bash filter

[13:44] <timotimo> https://github.com/akavel/up - i am vaguely reminded of this tool's existence

[13:46] <nadim_> yes I know about it, there is one more I'll try to find a link, I tried to write a pipe debuger some times ago but then got lazy 

[13:46] *** skids left
[13:46] <timotimo> i'm just randomly musing is there's an interesting use case to combine the approach of up with perl6 and having ddt in there somehow

[13:49] <nadim_> I love ddt!

[13:50] <nadim_> I mean ddt, ddt is a pain but dd is great

[13:50] <nadim_> ddd

[13:51] <nadim_> this! (since I can't type today) https://www.gnu.org/software/ddd/

[13:51] *** mowcat left
[13:52] <timotimo> wait, is ddd the great one, or the pain?

[13:53] <nadim_> ddd is great, my own stuff is a pain

[13:53] <timotimo> in theory ddd is super cool, but i haven't used it much at all yet sadly

[13:53] <timotimo> OK, in that case there isn't some kind of hidden terribleness that i just haven't found yet :)

[13:53] <nadim_> it will come ;)

[13:54] <nadim_> there is one thing that I don't like, it's slow

[13:54] <Geth_> ¦ doc: 8715a01658 | Coke++ | xt/words.pws

[13:54] <Geth_> ¦ doc: learn combo operator

[13:54] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/8715a01658

[13:54] *** dolmen joined
[13:55] <nadim_> but since you pushed towards the "custom setup", I find myself writting more filters and less code, so maybe it has come to some maturity 

[13:57] <nadim_> timotimo: if you use the: p6 - e 'ddt $whatnot, :does[DataSource]' | cut | ...  let me know, I am curious about how people could use it

[14:18] *** sena_kun joined
[14:29] *** molaf left
[14:29] *** bobby left
[14:32] <SmokeMachine> vrurg: Sorry for not accept the PR yet... but I'm getting my computer back today and I'll be able to test it later...

[14:33] <vrurg> SmokeMachine: no worries. Thanks! :)

[14:33] <SmokeMachine> vrurg: and thank you for your PR and your issue!

[14:34] <SmokeMachine> vrurg: what do you think about the message of the not mapped error? I don't know if I exaggerated...

[14:35] <vrurg> Why?

[14:37] <vrurg> SmokeMachine: I would say that Mapped::Unique lacks information about the values resulted in duplication. In my case knowing them let me locate the problem in a minute. 

[14:39] *** powerbit joined
[14:40] *** nadim_ left
[14:41] <SmokeMachine> vrurg: yes, that makes sense. But I think I've exaggerated here: https://github.com/FCO/Red/blob/master/lib/X/Red/Exceptions.pm6#L75

[14:42] <sena_kun> Kaiepi++ # Type::EnumHOW module is nice

[14:45] <vrurg> SmokeMachine: I would let it go as it is. Best case scenario – this wouldn't happen often but may help squash a couple of bugs. Worst case – an end use see it and gets scared off. In the latter case it should be up to the developer to catch any error and wrap it into something user-digestable.

[14:45] *** nadim_ joined
[14:46] <vrurg> SmokeMachine: I base it on own experience from FreeBSD where similar message pushed me to report a few problems with ports. Not sure if I would do it without the message.

[14:47] * vrurg afk.

[14:51] <sena_kun> m: grammar A { token TOP { <value> }; proto token value {*}; token value:sym<a> { "a" }; token value:sym<any> { . } }; A.parse("a").say

[14:51] <evalable6> sena_kun, rakudo-moar 6565810f5: OUTPUT: «｢a｣␤ value => ｢a｣␤»

[14:52] <sena_kun> I know about negative assertions, but they are based on behind/after patterns... is there a way to enforce more specific rule to win? something like "any is any, but when it is not `a`, in this case check other ones"

[14:52] *** rindolf left
[14:53] <sena_kun> hmm, this gist doesn't show the issue, because `value` in the output does not have exact symbol specified...

[14:55] *** skids joined
[14:57] <sena_kun> hmm, I cannot reproduce it with a small gist...

[14:58] *** scimon left
[15:01] *** reach_satori left
[15:03] *** rindolf joined
[15:06] *** pamplemousse joined
[15:07] *** Guest12727 left
[15:18] *** nadim_ left
[15:20] *** dolmen left
[15:20] *** dolmen joined
[15:22] *** wamiks left
[15:23] *** dumarchie left
[15:24] *** rindolf left
[15:27] *** john_parr joined
[15:29] *** dolmen left
[15:30] *** skids left
[15:33] *** cpan-p6 left
[15:34] *** cpan-p6 joined
[15:34] *** cpan-p6 left
[15:34] *** cpan-p6 joined
[15:35] *** xelak joined
[15:39] *** rindolf joined
[15:41] <xelak> m: use NativeCall; my $p=Pointer.new(0x12345678); my $l = nativecast(int64, $p); say $l;

[15:41] <evalable6> xelak, rakudo-moar 6565810f5: OUTPUT: «(signal SIGSEGV) »

[15:44] <xelak> m: use NativeCall; sub malloc(size_t --> Pointer[void]) is native { * }; my $p = malloc(16); say $p; say nativecast(int64, $p).fmt("%x");

[15:44] <evalable6> xelak, rakudo-moar 6565810f5: OUTPUT: «NativeCall::Types::Pointer[NativeCall::Types::void]<0x563013221d00>␤7f61af8e6040␤»

[15:48] <xelak> hmm, so how can I cast a pointer to an int?

[15:49] *** domidumont left
[15:50] <xelak> m: use NativeCall; my $p=Pointer.new(0x12345678); say $p;

[15:50] <evalable6> xelak, rakudo-moar 6565810f5: OUTPUT: «NativeCall::Types::Pointer<0x12345678>␤»

[16:01] *** xinming_ left
[16:07] *** skids joined
[16:09] *** nadim_ joined
[16:11] *** mowcat joined
[16:13] *** b2gills left
[16:15] *** nadim_ left
[16:23] *** kst left
[16:26] *** molaf joined
[16:27] *** nadim_ joined
[16:34] *** pamplemousse left
[16:35] *** pamplemousse joined
[16:37] *** b2gills joined
[16:45] <ugexe> "Entropic – A Federated Package Manager for JavaScript" https://news.ycombinator.com/item?id=20164806 -- we've been doing this for (checks how old zef is...) 6 years

[16:48] <xelak> m: use NativeCall; my $p=Pointer.new(0x12345678); say $p; my $l = $p.Int; say $l.fmt("%x");

[16:48] <evalable6> xelak, rakudo-moar 6565810f5: OUTPUT: «NativeCall::Types::Pointer<0x12345678>␤12345678␤»

[16:49] *** jmerelo joined
[16:49] <jmerelo> Hi!

[16:49] <jmerelo> squashable6: status

[16:49] <squashable6> jmerelo, Next SQUASHathon in 20 days and ≈11 hours (2019-07-06 UTC-14⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:50] <xelak> ok, seems like i found my answer ^^^

[16:51] <jmerelo> xelak: what was the question

[16:52] <moritz> 17:48 < xelak> hmm, so how can I cast a pointer to an int?

[16:52] <xelak> jmerelo: how to cast a pointer to an int

[16:53] <jmerelo> ah, OK. Nothing to do with the squashathon then.

[16:53] *** wamiks joined
[16:53] <jmerelo> Should we bring back up design.perl6.org? People are starting to ask about it https://github.com/perl6/doc/issues/2854

[16:55] <jmerelo> Has everyone around answered the user survey? https://docs.google.com/forms/d/e/1FAIpQLSfX6cjuhen2xepsr_Cg8eYSdlEE4wbhufgOR1BrDwStby_hNg/viewform Please take a minute to do so.

[17:21] *** pamplemousse_ joined
[17:24] *** pamplemousse left
[17:25] *** leont joined
[17:32] *** domidumont joined
[17:36] *** xelak left
[17:36] *** pamplemousse_ left
[17:41] <Xliff> jmerelo: Answers in

[17:42] <jmerelo> Xliff: thanks!

[17:42] <jmerelo> We have ~70 answers for the time being. Would like to get to 200 or so.

[17:42] <jmerelo> If someone is attending TPCiP, please ask everyone to answer...

[17:45] *** reach_satori joined
[17:48] *** pamplemousse joined
[18:01] *** natrys left
[18:05] *** domidumont left
[18:32] *** sauvin left
[18:34] *** AlexDaniel joined
[18:35] <AlexDaniel> m: say 42

[18:35] <yoleaux> 05:29Z <jmerelo> AlexDaniel: it could be :-)

[18:35] <evalable6> AlexDaniel, rakudo-moar 6565810f5: OUTPUT: «42␤»

[18:35] <AlexDaniel> and again, where's camelia?

[18:35] <AlexDaniel> rba: ?

[18:45] *** nadim_ left
[18:45] *** molaf left
[18:47] *** Actualeyes joined
[18:48] *** nadim_ joined
[18:49] *** dumarchie joined
[18:52] <cpan-p6> New module released to CPAN! FileSystem::Parent (0.3.2) by 03LEMBARK

[18:52] <cpan-p6> New module released to CPAN! FindBin (0.4.2) by 03LEMBARK

[18:54] *** jmerelo left
[19:09] *** wamiks left
[19:10] *** wamiks joined
[19:17] *** antoniogamiz joined
[19:22] <cpan-p6> New module released to CPAN! FindBin::libs (0.2.0) by 03LEMBARK

[19:22] <cpan-p6> New module released to CPAN! FileSystem::Parent (0.3.3) by 03LEMBARK

[19:35] *** neutron_stz joined
[19:37] <neutron_stz> guys, can someone give me a link for nqp-2019.03.tar.gz

[19:38] <neutron_stz> bcs, im trying to build rakudo star from the github repository

[19:38] <neutron_stz> https://pastebin.com/EjTQnqiw

[19:41] <ugexe> I still dont understand those modules for what is othewise oneliners

[19:41] <ugexe> m: my $filesystem-parent = -> $_, %seen? { unless %seen{.parent.absolute}++ { .parent.say && &?BLOCK(.parent, %seen) } }; $filesystem-parent($*CWD)

[19:41] <evalable6> ugexe, rakudo-moar 6565810f5: OUTPUT: «"/home/bisectable/git".IO␤"/home/bisectable".IO␤"/home".IO␤"/".IO␤»

[19:41] <nadim_> neutron_stz: then clone it from github

[19:41] <ugexe> and FindBin::libs is just fundamentally broken but for a few specific situations

[19:42] <timotimo> surely lembark would appreciate bug reports?

[19:45] <ugexe> the concept is fundamentally broken. and ive told them this befeore

[19:46] <timotimo> oh

[19:49] <AlexDaniel> I'm actually interested in seeing some efforts for cleaning up the ecosystem

[19:50] <AlexDaniel> there are *just* 1400+ modules, so maybe it makes sense to go through all of them and throw away some stuff that shouldn't be there

[19:52] <timotimo> will we retire panda?

[19:52] <AlexDaniel> kill it

[19:53] <AlexDaniel> then there's stuff like this: https://screenshots.firefox.com/vfDU5I6zcOEYAVwO/modules.perl6.org

[19:53] <AlexDaniel> as a user, I'm really confused

[19:54] <rba> AlexDaniel: all in

[19:54] <lizmat> weekly: https://perl6.eu/euclid-path.html

[19:54] <notable6> lizmat, Noted!

[19:54] <AlexDaniel> and then stuff like this: https://modules.perl6.org/search/?q=zeromq

[19:55] <AlexDaniel> two modules with the same name… come on

[19:55] <AlexDaniel> one of them doesn't run at all, btw, so it can be just thrown away IMO

[19:55] <ugexe> i dont think it makes much sense to spend time on changing how the ecosystem works. instead create a new ecosystem with different policy

[19:56] <AlexDaniel> mmm

[19:56] <lizmat> this is what a recommendation manager is about

[19:57] <AlexDaniel> lizmat: can you elaborate?

[19:57] <sena_kun> AlexDaniel, the idea is great, though I think we want a more agile approach, banhammer presence somehow irritates people, even if it is a pretty healthy thing to have. More like a "Modules that are not polished enough are moved to some sort of purgatory, if its author fixes it, it is back, otherwise it is just there and e.g. hidden in search, but you still can find it somehow".

[19:58] <AlexDaniel> ugexe: I'm all for creating some kind of policy, whether for a new ecosystem or the existing one. Who's going to do it, though? Personally I don't think I know enough. Can you do it?

[19:58] <lizmat> AlexDaniel: https://github.com/perl6/specs/blob/master/S22-package-format.pod#recommendation-manager

[19:59] <AlexDaniel> sena_kun: yeah

[19:59] <Geth_> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Maybe Any:D.await should return self? https://github.com/perl6/problem-solving/issues/38

[20:01] <Xliff> m: my $a = 1; $a.VAR.name.say

[20:01] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «$a␤»

[20:01] <Xliff> m: my ($a, $b, $c ) = ^3; .VAR.name.say for $a, $b, $c;

[20:01] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «$a␤$b␤$c␤»

[20:04] <Xliff> m: sub aa ($a = 0)  { $a.VAR.name.say }

[20:04] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «»

[20:04] <Xliff> m: sub aa ($a = 0)  { $a.VAR.name.say }; aa;

[20:04] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «Nil␤»

[20:04] <Xliff> m: sub aa ($a = 0)  { $a.VAR.name.say }; aa();

[20:04] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «Nil␤»

[20:04] <Xliff> m: sub aa ($a = 0)  { $a.VAR.name.say }; my $b = 2; aa($b);

[20:04] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «Nil␤»

[20:04] <Xliff> m: sub aa ($a is rw= 0)  { $a.VAR.name.say }; my $b = 2; aa($b);

[20:04] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/QsK7bPGYWf␤Cannot use 'is rw' on optional parameter '$a'.␤at /tmp/QsK7bPGYWf:1␤»

[20:04] <Xliff> m: sub aa ($a is rw)  { $a.VAR.name.say }; my $b = 2; aa($b);

[20:04] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «$b␤»

[20:04] <Xliff> m: sub aa ($a is copy)  { $a.VAR.name.say }; my $b = 2; aa($b);

[20:04] <evalable6> Xliff, rakudo-moar 6565810f5: OUTPUT: «$a␤»

[20:06] <ugexe> AlexDaniel: ideal policy will vary by consumer. if you target the noob looking for modules on modules.perl6.org it may not please the people working in business

[20:06] <ugexe> if/when i release an ecosystem it will most likely target the later

[20:07] <ugexe> policy wise

[20:08] <cpan-p6> New module released to CPAN! App::MoarVM::ConfprogCompiler (0.0.1) by 03TIMOTIMO

[20:09] <timotimo> it me

[20:09] <ugexe> but i wouldnt promote a policy that limits a namespace to a single instance either way. 

[20:10] <ugexe> perhaps a consensus system that can determine what gets the short name when querying based on things like reverse dependencies, upvotes, or other metrics.

[20:10] <Geth_> ¦ problem-solving: AlexDaniel self-assigned The ecosystem is a mess https://github.com/perl6/problem-solving/issues/39

[20:12] <ugexe> i'd also point out that maybe modules.perl6.org is simply due to be rewritten. People don't seem to have many problems using zef alongside these duplicated module short names

[20:12] <ugexe> but zef was written to handle that from the start

[20:13] <sena_kun> and there is https://github.com/perl6/modules.perl6.org/issues/121

[20:14] <sena_kun> hmmm, so cro-openapi-routes-from-definition dies on 2019.03, but is fixed on latest rakudo. :/

[20:15] <AlexDaniel> ugexe: fwiw I think other tools can benefit greatly if some of the useful bits of Zef had a nicer API

[20:15] <AlexDaniel> ugexe: I remember doing some crazy stuff in Blin just to get things barely working, and still I don't think it handles duplicated short names properly

[20:16] <AlexDaniel> I remember trying to use guts from Zef to achieve some stuff, but IIRC I was not very successful at that

[20:17] <AlexDaniel> maybe I just suck, you know, but if Zef handles things correctly then maybe we should strive to make it nicer so that things can depend on it easily

[20:19] <ugexe> that is a problem with almost any API with a bunch of loosely coupled components. 

[20:21] <ugexe> and the API is actually good if one knows how to use it 

[20:21] <ugexe> (not that anyone has a decent way of knowing how to use it)

[20:22] *** kst joined
[20:25] *** skids left
[20:26] <ugexe> but i've been doing work the last few years to move many of the useful components into core perl6 itself

[20:26] <ugexe> the Distribution interface and .candidates/reccomendation manager being the two big ones

[20:27] <AlexDaniel> ugexe++ # that I actually noticed!

[20:32] *** molaf joined
[20:33] <rba> moritz: do you know anything about the camelia bot?

[20:34] <rba> .tell diakopter do you run the camelia bot atm?

[20:34] <yoleaux> rba: I'll pass your message to diakopter.

[20:34] <timotimo> no, i believe nine runs it

[20:39] *** Sgeo__ joined
[20:40] *** farcas82regreg left
[20:40] <neutron_stz> if i execute configuration as following: "perl Configure.pl --gen-moar --gen-nqp --backends=moar --prefix ~/rakudo", could i be able to run it like #!~/rakudo/perl6 as interpreter

[20:41] *** Black_Ribbon joined
[20:41] <timotimo> does linux expand ~ in hashbangs?

[20:41] <timotimo> i'd be mildly surprised

[20:42] <neutron_stz> im not sure

[20:42] *** Sgeo_ left
[20:42] <neutron_stz> but i think so

[20:43] <timotimo> if your prefix is ~/rakudo, then perl6 will land in ~/rakudo/bin/

[20:44] *** kaare_ left
[20:44] *** kaare__ joined
[20:45] <neutron_stz> then will be #!~/rakudo/bin/perl6 ?

[20:46] <timotimo> if ~ works, then yes, that probably works

[20:47] <timotimo> why not #!/usr/bin/env perl6 instead?

[20:47] <sena_kun> 6c: say '/pets' ~~ / ^ [  '/' <-[/]>+:[ '/' <-[/]>+:  ]? | '/' <-[/]>+:[ '/' <-[/]>+:  ]? |  '/' <-[/]>+: '/' <-[/]>+: | '/' <-[/]>+: '/' <-[/]>+: | <!> ] $ /;

[20:47] <timotimo> that's kind of a more standard way

[20:47] <timotimo> and it'll work on other systems, too

[20:47] <committable6> sena_kun, ¦6c (37 commits): «｢/pets｣␤»

[20:48] <neutron_stz> okay, thx ill try

[20:48] <neutron_stz> what you mean, to make the perfix /usr/bin ? 

[20:49] <timotimo> no

[20:49] <timotimo> env will look through PATH for you

[20:50] <neutron_stz> ahhh yes yes i forgot about that 

[20:51] *** |oLa| joined
[20:53] <cpan-p6> New module released to CPAN! App::MoarVM::ConfprogCompiler (0.0.2) by 03TIMOTIMO

[21:01] <AlexDaniel> timotimo: can you explain this to me

[21:01] <AlexDaniel> c: 1cb266b8da^^^,1cb266b8da,1cb266b8da^^^,1cb266b8da,1cb266b8da^^^,1cb266b8da (^50_000).grep(*.is-prime).tail.say; say (now - INIT now)

[21:02] <committable6> AlexDaniel, ¦1cb266b8da^^^: «49999␤7.2873513␤» ¦1cb266b: «49999␤9.393561␤» ¦1cb266b8da^^^: «49999␤7.2800290␤» ¦1cb266b: «49999␤9.3998428␤» ¦1cb266b8da^^^: «49999␤7.387149␤» ¦1cb266b: «49999␤9.3708393␤»

[21:04] * timotimo eyes glaze over

[21:04] *** ZzZombo left
[21:04] <timotimo> what am i seeing?

[21:04] <sena_kun> it jumps from 7 seconds to 9

[21:04] <sena_kun> 7, 9, 7, 9 and so on

[21:05] *** ZzZombo joined
[21:05] <AlexDaniel> timotimo: so according to this benchmark 1cb266b8da is slower than 1cb266b8da^^^

[21:06] <AlexDaniel> timotimo: but look at the commits in between… there's no way they could possibly cause a slowdown

[21:06] <AlexDaniel> especially one that is so noticeable

[21:07] *** antoniogamiz left
[21:08] <AlexDaniel> I mean, we're talking about https://github.com/rakudo/rakudo/commit/1cb266b8da^ and https://github.com/rakudo/rakudo/commit/1cb266b8da^^

[21:08] <AlexDaniel> right?

[21:08] <AlexDaniel> or https://github.com/rakudo/rakudo/commit/1cb266b8da itself

[21:08] *** reportable6 left
[21:08] *** shareable6 left
[21:09] *** committable6 left
[21:09] <timotimo> difference in C compilers?

[21:09] *** releasable6 left
[21:09] *** squashable6 left
[21:09] *** shareable6 joined
[21:09] *** ChanServ sets mode: +v shareable6

[21:09] <AlexDaniel> timotimo: it could only be that the compiler was updated

[21:10] <AlexDaniel> so if that's the case, then newer gcc is slower?

[21:10] <timotimo> yeah

[21:10] <timotimo> but it's a slowdown, right?

[21:10] *** releasable6 joined
[21:10] <AlexDaniel> yeah… I'm very confused

[21:10] *** squashable6 joined
[21:10] *** ChanServ sets mode: +v squashable6

[21:10] *** pamplemousse left
[21:11] <AlexDaniel> c: 1cb266b8da^^^,1cb266b8da,1cb266b8da^^^,1cb266b8da,1cb266b8da^^^,1cb266b8da (^50_000).grep(*.is-prime).tail.say; say (now - INIT now)

[21:12] *** reportable6 joined
[21:12] *** ChanServ sets mode: +v reportable6

[21:13] *** cpan-p6 left
[21:13] *** committable6 joined
[21:14] <AlexDaniel> ah

[21:14] <AlexDaniel> c: 1cb266b8da^^^,1cb266b8da,1cb266b8da^^^,1cb266b8da,1cb266b8da^^^,1cb266b8da (^50_000).grep(*.is-prime).tail.say; say (now - INIT now)

[21:14] *** cpan-p6 joined
[21:14] *** cpan-p6 left
[21:14] *** cpan-p6 joined
[21:15] <committable6> AlexDaniel, ¦1cb266b8da^^^: «49999␤7.3227272␤» ¦1cb266b: «49999␤9.4255653␤» ¦1cb266b8da^^^: «49999␤7.359238␤» ¦1cb266b: «49999␤9.3491402␤» ¦1cb266b8da^^^: «49999␤7.3058181␤» ¦1cb266b: «49999␤9.3752979␤»

[21:15] <AlexDaniel> timotimo: :S

[21:16] <AlexDaniel> can I know which compiler was used for each build?

[21:16] <AlexDaniel> not from perl6, of course, but is there a way?

[21:21] <timotimo> hm, can "file" tell you?

[21:21] <timotimo> ah, no

[21:23] <AlexDaniel> shareable6: 1cb266b

[21:23] <shareable6> AlexDaniel, https://whateverable.6lang.org/1cb266b

[21:26] <AlexDaniel> there are make and configure logs but I see no gcc version…

[21:26] <timotimo> maybe something for the future

[21:27] <AlexDaniel> a, ok, objdump to the rescue

[21:27] *** |oLa| left
[21:28] <AlexDaniel> GCC: (Debian 6.3.0-18) 6.3.0 20170516

[21:29] <AlexDaniel> GCC: (Debian 4.9.2-10) 4.9.2

[21:29] <AlexDaniel> indeed! Different compiler!

[21:29] <AlexDaniel> timotimo: you're right! :)

[21:29] <timotimo> that's ridiculous

[21:34] <timotimo> i didn't mean to be right about this

[21:36] <AlexDaniel> anybody wants to bisect gcc?

[21:36] <AlexDaniel> I don't feel like doing that today…

[21:39] *** molaf left
[21:40] <timotimo> hahaha

[21:41] <timotimo> we should first check to see if the time difference lives inside libtommath or moarvm

[21:41] <timotimo> probably not in the jit, since that shouldn't be dependent on the compiler

[21:41] <timotimo> though a difference in compiler could change when jitting happens exactly

[21:42] *** pamplemousse joined
[21:47] *** sena_kun left
[21:47] <AlexDaniel> https://github.com/rakudo/rakudo/issues/2988

[21:52] *** wamiks left
[21:56] <AlexDaniel> timotimo: ok, what about here https://gist.github.com/Whateverable/9af39e5274e449db6a1651a5ae2e0595

[21:56] <AlexDaniel> timotimo: where's the slowdown?

[21:59] <timotimo> i'm out of dumb ideas :)

[22:00] * AlexDaniel picks a random revision

[22:00] <AlexDaniel> between 2018.09 and 2018.10 will do…

[22:05] * timotimo goes to bed

[22:06] <AlexDaniel> timotimo: but what about this

[22:06] <AlexDaniel> c: 7d7aaf0c1d2^,7d7aaf0c1d2 (^30_000).grep(*.is-prime).tail.say; say (now - INIT now)

[22:07] <committable6> AlexDaniel, ¦7d7aaf0c1d2^: «29989␤5.1725937␤» ¦7d7aaf0: «29989␤6.4280064␤»

[22:07] <AlexDaniel> https://github.com/rakudo/rakudo/commit/7d7aaf0c1d2626570384f354d4904486bcdc7790

[22:08] <timotimo> try running the two commits in the opposite order

[22:08] <AlexDaniel> c: 7d7aaf0c1d2^,7d7aaf0c1d2,7d7aaf0c1d2^,7d7aaf0c1d2,7d7aaf0c1d2^,7d7aaf0c1d2 (^30_000).grep(*.is-prime).tail.say; say (now - INIT now)

[22:09] <committable6> AlexDaniel, ¦7d7aaf0c1d2^: «29989␤5.14543963␤» ¦7d7aaf0: «29989␤6.4608185␤» ¦7d7aaf0c1d2^: «29989␤5.1480376␤» ¦7d7aaf0: «29989␤6.48102256␤» ¦7d7aaf0c1d2^: «29989␤5.14577034␤» ¦7d7aaf0: «29989␤6.406382␤»

[22:09] <AlexDaniel> again, that's not noise or something

[22:09] <timotimo> ok, ok, it's reasonably stable

[22:10] <timotimo> without running any performance measurement programs against it i don't have a clue

[22:10] <AlexDaniel> so it's exactly this commit: https://github.com/MoarVM/MoarVM/commit/304f568f19d22ce6f74be163003c3a6cffa1be9d

[22:10] <AlexDaniel> may be a compiler difference again… not sure if I want to check

[22:10] <timotimo> haha

[22:11] <timotimo> OK, i'll go to bed for realsies

[22:12] <timotimo> good luck!

[22:12] <timotimo> you could start by running it via "time" and see if the maxresidentk changes drastically

[22:12] <timotimo> shouldn't, but who knows

[22:12] *** adu joined
[22:18] *** pamplemousse left
[22:30] *** wamiks joined
[22:34] <lizmat> sometimes I wonder where people get these ideas: https://twitter.com/dallaylaen/status/1139638690479837185

[22:34] <lizmat> sleep&

[22:36] *** pamplemousse joined
[22:38] <AlexDaniel> the weirdest ticket of all: https://github.com/rakudo/rakudo/issues/2945

[22:40] *** dumarchie left
[22:43] *** noisegul left
[22:48] *** pamplemousse left
[23:04] *** mowcat left
[23:04] *** veesh left
[23:04] *** leont left
[23:08] *** vrurg left
[23:12] *** vrurg joined
[23:13] *** veesh joined
[23:20] *** neutron_stz left
[23:33] *** neutron_stz joined
[23:34] *** rindolf left
[23:45] *** pecastro left
[23:47] *** aborazmeh joined
[23:47] *** aborazmeh left
[23:47] *** aborazmeh joined
[23:59] *** wamiks left
