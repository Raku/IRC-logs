[00:10] *** mkapra left
[00:10] *** z-o-a joined
[00:44] *** aborazmeh left
[00:47] *** pecastro left
[00:52] *** aborazmeh joined
[00:52] *** aborazmeh left
[00:52] *** aborazmeh joined
[01:02] <cpan-p6> New module released to CPAN! Getopt-Long (0.1.0) by 03LEONT

[01:09] *** zachk left
[01:28] *** dct_ left
[01:31] *** isomorphismes left
[01:34] *** sena_kun left
[01:41] *** softmoth joined
[01:54] *** softmoth left
[01:54] *** softmoth_ joined
[01:56] *** softmoth_ left
[01:57] *** softmoth_ joined
[02:04] *** jeek left
[02:12] *** molaf left
[02:21] *** mkapra joined
[02:24] *** molaf joined
[02:26] <Elronnd> is there a way to say 'this string parameter must be composed of only these characters'?

[02:27] <timotimo> you could use a regex match

[02:28] <timotimo> m: sub only-vowels(Str $a where /^<[aeiou]>*$/) { say "ok $a" }; try only-vowels("abcde"); try only-vowels("ae"); try only-vowels("")

[02:28] <camelia> rakudo-moar 92ebc333a: OUTPUT: «ok ae␤ok ␤»

[02:29] <Elronnd> ahhh thx

[02:31] <leont> I rarely find it useful not to have a default option, if only to give a clearer error

[02:36] <Elronnd> that's probably a good idea; this is an internals function called only once though, and that's just to protect against a case that shouldn't happen _anyway_ (checked against outside the callsite) so it's probably fine

[02:37] *** jme` left
[02:37] <timotimo> the regex check may be relatively expensive, though

[02:37] <timotimo> so if it's a function that's called often, perhaps check on the performance every now and then

[02:43] *** softmoth_ left
[02:55] *** mkapra left
[03:02] *** Xliff left
[03:02] *** aborazmeh left
[03:25] *** ferreira1 joined
[03:25] *** ToddAndMargo joined
[03:27] <ToddAndMargo> Newbie question:  is there a way to declare a variable as both a Buf and a Str and then work on it as either a Buf or a Str?  Seems to me they are both arrays of bytes

[03:28] *** ferreira left
[03:28] *** mkapra joined
[03:29] *** markoong left
[03:29] *** mkapra left
[03:32] *** ferreira joined
[03:33] <MasterDuke> ToddAndMargo: there's been some talk of creating/enabling some of the Str functions for Buf. but they're not both arrays of bytes in Perl 6 (in one way)

[03:33] *** mkapra joined
[03:34] <MasterDuke> a Str could have multiple bytes combined into one grapheme. manipulating those bytes could result in an invalid string

[03:34] *** ferreira1 left
[03:38] *** saki left
[03:40] <cpan-p6> New module released to CPAN! Net-BGP (0.1.1) by 03JMASLAK

[03:53] <ToddAndMargo> Rats!   What would the fastest way to convert a Beuf into a string with NO CONVERSIONS?

[03:53] <ToddAndMargo> I would adore a bunch of string functions converted to for type Buf!!!

[03:54] <ToddAndMargo> Bug not a Beuf

[03:54] <ToddAndMargo> Buf not Bug.

[03:57] *** leont left
[03:58] <MasterDuke> what do you mean no conversions?

[03:59] *** tomato_ joined
[04:02] *** mkapra left
[04:06] *** tomato_ left
[04:06] *** tomato_ joined
[04:13] <tomato_> Hi, please see a small question: what doe the dollar sign mean in this error message? "# expected: $[1, 2], got: [1, 2]"

[04:13] <tomato_> Are they different?

[04:14] *** cpan-p6 left
[04:14] *** cpan-p6 joined
[04:14] *** ToddAndMargo left
[04:15] *** smallick joined
[04:20] *** mkapra joined
[04:24] *** mkapra left
[04:34] *** jme` joined
[04:36] *** ferreira left
[04:38] *** ferreira joined
[04:49] *** tomato_ left
[04:59] *** _isomorphismes joined
[05:04] *** jme` left
[05:17] <Elronnd> if I return Nil from a function, and assign a variable to the output of that function, the variable is Any

[05:17] <Elronnd> how can I check if the result of the function was Nil?  $result ~~ Any returns True, but that's not very helpful

[05:30] *** vrurg left
[05:31] *** pmurias left
[05:31] *** pmurias joined
[05:48] *** _isomorphismes left
[06:01] *** jme` joined
[06:16] <b2gills> You either need to bind to the variable with :=, or set the default of the variable to Nil

[06:17] <b2gills> m: sub foo ( --> Nil ){}; my $a = foo; say $a;  my $b := foo; say $b;  my $c is default(Nil) = foo; say $c

[06:17] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(Any)␤Nil␤Nil␤»

[06:18] <b2gills> Elronnd: ^^^

[06:19] <b2gills> Note that sigiless variables are always binding

[06:20] <b2gills> m: sub foo (-->Nil){}; my \sigiless = foo; say sigiless

[06:20] <camelia> rakudo-moar 92ebc333a: OUTPUT: «Nil␤»

[06:36] *** andrzejku_ joined
[06:36] *** mowcat left
[06:37] *** smallick left
[06:54] *** woolfy left
[07:05] *** zacts joined
[07:21] *** ufobat__ joined
[07:24] *** ufobat_ left
[07:36] *** dct_ joined
[07:45] <Geth> ¦ doc: 6a0e6d4428 | (Nick Logan)++ | 2 files

[07:45] <Geth> ¦ doc: CURFS and CURI basics

[07:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6a0e6d4428

[07:45] <Geth> ¦ doc: f0cb1f64fb | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[07:45] <Geth> ¦ doc: Merge pull request #2602 from ugexe/cur-basic

[07:45] <Geth> ¦ doc: 

[07:45] <Geth> ¦ doc: CURFS and CURI basics

[07:45] <Geth> ¦ doc: Thanks!

[07:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f0cb1f64fb

[07:54] *** zacts left
[07:59] *** pmurias left
[07:59] *** pmurias joined
[08:10] *** mayuresh joined
[08:10] *** mayuresh left
[08:15] <Elronnd> b2gills: ok, thanks

[08:15] *** cpan-p6 left
[08:15] *** cpan-p6 joined
[08:16] *** jmerelo joined
[08:19] *** rindolf joined
[08:22] *** domidumont joined
[08:30] *** tomato_ joined
[08:35] *** tomato_ left
[08:46] *** zacts joined
[08:52] *** zacts left
[09:07] *** molaf left
[09:09] *** domidumont left
[09:13] *** lizmat joined
[09:13] <lizmat> weekly: https://gfldex.wordpress.com/2019/02/02/nqp-is-faster-then-threads/

[09:13] <notable6> lizmat, Noted!

[09:19] *** patrickb joined
[09:24] *** lizmat left
[09:31] *** pmurias left
[09:31] *** pmurias joined
[09:44] <Geth> ¦ doc: 2c795607d7 | (JJ Merelo)++ | doc/Type/IO/ArgFiles.pod6

[09:44] <synopsebot> Link: https://doc.perl6.org/type/IO::ArgFiles

[09:44] <Geth> ¦ doc: Adds an example which fails with invalid filehandles.

[09:44] <Geth> ¦ doc: 

[09:44] <Geth> ¦ doc: I couldn't find a way to deal with them, as indicated in #96 and

[09:44] <Geth> ¦ doc: rakudo/rakudo#2666. I asked [this question in

[09:44] <Geth> ¦ doc: SO](https://stackoverflow.com/questions/54501546/dealing-with-invalid-filehandles-and-maybe-other-invalid-objects-too),

[09:44] <Geth> ¦ doc: will reopen if there's some answer that does not involve catching the

[09:44] <synopsebot> RAKUDO#2666 [open]: https://github.com/rakudo/rakudo/issues/2666 implement a new var @*ARGFILES listing paths for @*ARGS that are existing files

[09:44] <Geth> ¦ doc: error. Meanwhile, closes #96

[09:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2c795607d7

[09:47] *** patrickb left
[10:12] *** z-o-a left
[10:13] *** dct_ left
[10:16] *** ravenousmoose joined
[10:33] *** lizmat joined
[10:47] *** ravenousmoose left
[10:49] <jmerelo> hi, lizmat . How''s FOSDEM going?

[10:57] *** lizmat left
[11:07] *** pecastro joined
[11:08] *** dct_ joined
[11:19] *** z-o-a joined
[11:26] *** kurahaupo joined
[11:27] *** reach_satori left
[11:31] *** mkapra joined
[11:32] *** mkapra left
[11:36] *** ferreira left
[11:36] *** ferreira joined
[11:39] *** z-o-a left
[11:39] *** kurahaupo left
[11:40] *** kurahaupo joined
[11:40] *** dct_ left
[11:41] *** lucasb joined
[11:43] *** dct_ joined
[11:46] <jmerelo> m: my $m = (1 => 0.5, 2 => 0.25, 3 => 0.3 ).Mix; say $m

[11:46] <camelia> rakudo-moar 92ebc333a: OUTPUT: «Mix(1(0.5), 2(0.25), 3(0.3))␤»

[11:46] <jmerelo> m: my $m = (1 => 0.5, 2 => 0.25, 3 => 0.3 ).Mix; say 2 (elem) $m

[11:46] <camelia> rakudo-moar 92ebc333a: OUTPUT: «True␤»

[11:51] *** kurahaupo left
[11:51] *** kurahaupo joined
[12:03] *** cpan-p6 left
[12:04] *** cpan-p6 joined
[12:04] *** dct_ left
[12:06] *** kurahaupo left
[12:06] *** kurahaupo joined
[12:10] *** andrzejku_ left
[12:13] *** yqt joined
[12:18] *** kurahaupo left
[12:22] *** molaf joined
[12:22] *** kurahaupo joined
[12:28] *** dct_ joined
[12:30] *** sena_kun joined
[12:32] *** leont joined
[12:33] *** markoong joined
[12:33] *** kurahaupo left
[12:38] *** kurahaupo joined
[12:39] *** aborazmeh joined
[12:39] *** aborazmeh left
[12:39] *** aborazmeh joined
[12:50] *** kurahaupo left
[12:51] *** kurahaupo joined
[12:59] *** [Sno] left
[13:00] *** andrzejku_ joined
[13:02] *** ravenousmoose joined
[13:04] *** kurahaupo left
[13:04] *** kurahaupo joined
[13:15] *** kurahaupo left
[13:16] *** zacts joined
[13:16] *** kurahaupo joined
[13:26] *** kurahaupo left
[13:26] *** kurahaupo joined
[13:34] *** andrzejku_ left
[13:34] *** mowcat joined
[13:36] *** kurahaupo left
[13:36] *** jmerelo left
[13:36] *** z-o-a joined
[13:36] *** kurahaupo joined
[13:39] *** ravenousmoose left
[13:40] *** ravenousmoose joined
[13:41] *** mowcat left
[13:46] *** kurahaupo left
[13:47] *** kurahaupo joined
[13:56] *** mowcat joined
[13:57] *** kurahaupo left
[13:57] *** kurahaupo joined
[13:58] *** saki joined
[14:06] *** z-o-a left
[14:08] *** mowcat left
[14:09] *** dogbert17 left
[14:11] *** mowcat joined
[14:12] *** kurahaupo left
[14:12] *** kurahaupo joined
[14:15] *** dct_ left
[14:15] *** z-o-a joined
[14:22] *** aborazmeh left
[14:23] *** zacts left
[14:27] *** ravenousmoose left
[14:27] *** kurahaupo left
[14:27] *** kurahaupo joined
[14:37] *** kurahaupo left
[14:37] *** kurahaupo joined
[14:48] *** kurahaupo left
[14:48] *** kurahaupo joined
[14:51] *** molaf left
[14:55] *** dct_ joined
[15:03] <cpan-p6> New module released to CPAN! App-Prove6 (0.0.9) by 03LEONT

[15:03] *** kurahaupo left
[15:03] *** kurahaupo joined
[15:11] *** lucasb left
[15:13] *** z-o-a left
[15:13] *** kurahaupo left
[15:13] *** kurahaupo joined
[15:23] *** kurahaupo left
[15:24] *** kurahaupo joined
[15:32] *** z-o-a joined
[15:38] *** z-o-a left
[15:38] *** kurahaupo left
[15:39] *** kurahaupo joined
[15:40] *** cpan-p6 left
[15:40] *** cpan-p6 joined
[15:47] *** z-o-a joined
[15:51] *** kurahaupo left
[15:52] *** kurahaupo joined
[15:52] *** isomorphismes joined
[15:53] *** leont left
[15:56] *** z-o-a left
[16:03] *** kurahaupo left
[16:03] *** saki left
[16:03] *** kurahaupo joined
[16:04] *** isomorphismes left
[16:05] *** smallick joined
[16:06] <smallick> say 0

[16:06] <evalable6> smallick, rakudo-moar 92ebc333a: OUTPUT: «0␤»

[16:07] <smallick> m: say 1

[16:07] <camelia> rakudo-moar 92ebc333a: OUTPUT: «1␤»

[16:14] *** kurahaupo left
[16:15] *** kurahaupo joined
[16:20] *** Mediphira joined
[16:20] *** Mediphira left
[16:24] *** MilkmanDan left
[16:24] *** jmerelo joined
[16:26] *** MilkmanDan joined
[16:27] *** kurahaupo left
[16:27] *** kurahaupo joined
[16:29] *** smallick left
[16:39] *** zacts joined
[16:41] *** kurahaupo left
[16:41] *** zakharyas joined
[16:42] *** kurahaupo joined
[16:55] *** kurahaupo left
[16:56] *** kurahaupo joined
[16:57] *** dct_ left
[17:02] *** reach_satori joined
[17:08] *** isomorphismes joined
[17:08] *** dct_ joined
[17:09] *** kurahaupo left
[17:09] *** kurahaupo joined
[17:18] *** dct_ left
[17:24] *** kurahaupo left
[17:24] *** kurahaupo joined
[17:30] *** w17t left
[17:39] *** kurahaupo left
[17:39] *** reach_satori_ joined
[17:39] *** kurahaupo joined
[17:40] *** andrzejku_ joined
[17:42] *** reach_satori left
[17:50] *** kurahaupo left
[17:50] *** kurahaupo joined
[17:53] *** b2gills left
[17:57] *** b2gills joined
[17:58] *** zacts left
[18:06] *** isomorphismes left
[18:09] *** molaf joined
[18:24] <Geth> ¦ doc: 675330d619 | cfa++ | 6 files

[18:24] <Geth> ¦ doc: a → an (#2604)

[18:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/675330d619

[18:27] <Geth> ¦ doc: e45f0317e1 | cfa++ | 7 files

[18:27] <Geth> ¦ doc: an → a, an → and (#2604)

[18:27] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e45f0317e1

[18:29] <timotimo> .seen cygx

[18:29] <yoleaux> I saw cygx 10 Jan 2019 19:56Z in #moarvm: <cygx> if it solves a legitimate problem, I wouldn't let purity be the enemy of pragmatism...

[18:40] *** Ven`` joined
[18:47] *** zacts joined
[18:53] *** jmerelo left
[18:59] *** kensanata joined
[19:06] *** cpan-p6 left
[19:06] *** cpan-p6 joined
[19:08] *** reach_satori_ left
[19:09] *** zacts left
[19:10] <timotimo> .tell cygx i want to put something in the ecosystem to bridge Image::RGBA::Text and SDL2::Raw, how does that sound to you?

[19:10] <yoleaux> timotimo: I'll pass your message to cygx.

[19:12] *** kensanata left
[19:31] <TreyHarris> This is interesting... I was getting tired of ANSI line noise in my compilation buffer in Emacs, so I added a hook to colorize the output. But it only works for runtime errors. Compile-time errors still show as '^[[31m===^[[0mSORRY!^[[31m===^[[0m Error while compiling -'.

[19:31] <TreyHarris> I wonder what Emacs could be seeing differently in the two cases?

[19:31] <moritz> I think there is an environment variable to suppress the ANSI codes

[19:32] <timotimo> is that a difference between stdout and stderr being used?

[19:32] <TreyHarris> Yeah, I'll go that route next, but I was getting pretty colors for runtime errors. :-)

[19:32] <TreyHarris> Shouldn't both noparse and divide-by-zero (the two cases I was comparing just now) both go to stderr?

[19:32] <timotimo> probably

[19:35] *** vendethiel- joined
[19:35] *** kensanata joined
[19:37] *** Ven`` left
[19:38] <TreyHarris> They both go to stderr, so I'm going to guess it may be that the filter isn't equipped to deal with a output stream that begins with escape codes perhaps? That's the only difference I see immediately. I guess I can load ANSI myself and note something to see

[19:46] *** andrzejku_ left
[20:20] *** domidumont joined
[20:26] *** domidumont left
[20:28] *** domidumont joined
[20:30] *** Khisanth left
[20:31] *** domidumont left
[20:37] <Geth> ¦ doc: 0434083c02 | cfa++ | doc/Language/testing.pod6

[20:37] <synopsebot> Link: https://doc.perl6.org/language/testing

[20:37] <Geth> ¦ doc: /type/Role (broken) → /language/objects#Roles

[20:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0434083c02

[20:39] <Geth> ¦ doc: d189ee1b86 | cfa++ | 4 files

[20:39] <Geth> ¦ doc: /type/EVAL (broken) → /routine/EVAL

[20:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d189ee1b86

[20:44] *** Khisanth joined
[20:46] *** drolax joined
[20:48] *** sno joined
[21:14] *** zakharyas left
[21:23] *** domidumont joined
[21:23] *** yqt left
[21:23] *** pmurias left
[21:25] *** domidumont left
[21:31] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2019/02/03/threading-nqp-through-a-channel/

[21:37] *** vendethiel- left
[21:41] *** eseyman left
[21:42] <timotimo> gfldex: you can use a semaphore, or atomic integers to get that 64-at-the-same-time thing going; another thing i like doing is have a channel for "tickets" and receiving from the channel is "taking a ticket" and sending to it is "freeing the ticket" and you just send, for example, 64 tickets at the very start to fill the channel

[21:45] *** kensanata left
[21:45] *** eseyman joined
[21:50] *** zengargoyle joined
[21:54] *** Xliff joined
[21:54] <Xliff> m: say π  - 4 * ([+]  <1 -1> <</<<  (1,3,5,7,9...20))

[21:54] <camelia> rakudo-moar 92ebc333a: OUTPUT: «0.09975303466039076␤»

[21:55] <Xliff> m: say π  - 4 * ([+]  <1 -1> <</<<  (1,3,5,7,9...10000))

[21:55] <camelia> rakudo-moar 92ebc333a: OUTPUT: «0.0001999999980029088␤»

[21:57] <Xliff> m: say 3 + [+] ((2, 4...*).map: -> $i {($i % 4 - 1) * 4/[*] $i..($i+2)})[^1000]

[21:57] <camelia> rakudo-moar 92ebc333a: OUTPUT: «3.1415926533405423␤»

[21:58] *** cpan-p6_ joined
[21:58] <Xliff> m: ((2, 4...*).map: -> $i {($i % 4 - 1) * 4/[*] $i..($i+2)})[^1000]

[21:58] <camelia> rakudo-moar 92ebc333a: ( no output )

[21:58] <Xliff> m: ((2, 4...*).map: -> $i {($i % 4 - 1) * 4/[*] $i..($i+2)})[^1000].say

[21:58] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(0.166667 -0.033333 0.011905 -0.005556 0.00303 -0.001832 0.00119 -0.000817 0.000585 -0.000433 0.000329 -0.000256 0.000204 -0.000164 0.000134 -0.000111 0.000093 -0.000079 0.000067 -0.000058 0.00005 -0.000044 0.000039 -0.000034 0.00003 -0.000027 0.00002…»

[21:59] <Xliff> m: say 3 + [+] ((2, 4...*).map: -> $i {($i % 4 - 1) * 4/[*] $i..($i+2)})[^1000]

[21:59] <camelia> rakudo-moar 92ebc333a: OUTPUT: «3.1415926533405423␤»

[21:59] <Xliff> m: say 3 + [+] ((2, 4...*).map: -> $i {($i % 4 - 1) * 4/[*] $i..($i+2)})[^30]

[21:59] <camelia> rakudo-moar 92ebc333a: OUTPUT: «3.1415842726746206␤»

[22:04] <Xliff> m: asy 22/7

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    asy used at line 1. Did you mean 'any', 'say'?␤␤»

[22:04] <Xliff> m: asy (22/7)

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    asy used at line 1. Did you mean 'say', 'any'?␤␤»

[22:04] <Xliff> m: say (22/7)

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «3.142857␤»

[22:04] <Xliff> m: say 22/7

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «3.142857␤»

[22:04] <Xliff> m: say 23/7

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «3.285714␤»

[22:04] <Xliff> m: say 22/7

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «3.142857␤»

[22:04] <Xliff> m: say 22/7.^name.say

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «Int␤22␤»

[22:04] <Xliff> m: say (22/7).^name.say

[22:04] <camelia> rakudo-moar 92ebc333a: OUTPUT: «Rat␤True␤»

[22:09] *** cpan-p6 left
[22:09] <timotimo> gfldex: i think you can save just a little bit of memory by defining @dirs to be a "my str @dirs"

[22:12] <Xliff> m: say (22/7).base-repeating

[22:12] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(3. 142857)␤»

[22:12] <Xliff> m: say (22/7).base-repeating.say

[22:12] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(3. 142857)␤True␤»

[22:12] <Xliff> m: say (335/113).base-repeating.say

[22:12] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(2. 9646017699115044247787610619469026548672566371681415929203539823008849557522123893805309734513274336283185840707)␤True␤»

[22:12] <Xliff> m: say (344/113).base-repeating.say

[22:13] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(3. 0442477876106194690265486725663716814159292035398230088495575221238938053097345132743362831858407079646017699115)␤True␤»

[22:13] <Xliff> m: say (355/113).base-repeating.say

[22:13] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(3. 1415929203539823008849557522123893805309734513274336283185840707964601769911504424778761061946902654867256637168)␤True␤»

[22:15] <Xliff> m: say 3~(355/113).base-repeating[1]

[22:15] <camelia> rakudo-moar 92ebc333a: OUTPUT: «31415929203539823008849557522123893805309734513274336283185840707964601769911504424778761061946902654867256637168␤»

[22:15] <Xliff> m: say 3~(355/113).base-repeating[1].split.comb(2).map(*.join(' '))

[22:15] <camelia> rakudo-moar 92ebc333a: OUTPUT: «Cannot resolve caller split(Str:D: ); none of these signatures match:␤    (Str:D: Regex:D $pat, $limit is copy = Inf;; :$v is copy, :$k, :$kv, :$p, :$skip-empty, *%_ --> Seq:D)␤    (Str:D: Str(Cool) $match;; :$v is copy, :$k, :$kv, :$p, :$skip-emp…»

[22:15] <Xliff> m: say 3~(355/113).base-repeating[1].comb(2).map(*.join(' '))

[22:15] <camelia> rakudo-moar 92ebc333a: OUTPUT: «314 15 92 92 03 53 98 23 00 88 49 55 75 22 12 38 93 80 53 09 73 45 13 27 43 36 28 31 85 84 07 07 96 46 01 76 99 11 50 44 24 77 87 61 06 19 46 90 26 54 86 72 56 63 71 68␤»

[22:16] <Xliff> m: say (3~(355/113).base-repeating[1]).comb(2).map(*.join(' '))

[22:16] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(31 41 59 29 20 35 39 82 30 08 84 95 57 52 21 23 89 38 05 30 97 34 51 32 74 33 62 83 18 58 40 70 79 64 60 17 69 91 15 04 42 47 78 76 10 61 94 69 02 65 48 67 25 66 37 16 8)␤»

[22:16] <Xliff> \o/\

[22:20] *** drolax left
[22:23] *** sivoais joined
[22:38] <Xliff> m: say (3~(355/113).base-repeating[1]).comb(2)

[22:38] <camelia> rakudo-moar 92ebc333a: OUTPUT: «(31 41 59 29 20 35 39 82 30 08 84 95 57 52 21 23 89 38 05 30 97 34 51 32 74 33 62 83 18 58 40 70 79 64 60 17 69 91 15 04 42 47 78 76 10 61 94 69 02 65 48 67 25 66 37 16 8)␤»

[22:39] <Xliff> m: say (3~(355/113).base-repeating[1]).comb(2).perl.say

[22:39] <camelia> rakudo-moar 92ebc333a: OUTPUT: «("31", "41", "59", "29", "20", "35", "39", "82", "30", "08", "84", "95", "57", "52", "21", "23", "89", "38", "05", "30", "97", "34", "51", "32", "74", "33", "62", "83", "18", "58", "40", "70", "79", "64", "60", "17", "69", "91", "15", "04", "42", "47"…»

[22:41] <Xliff> m: say (3~(355/113).base-repeating.join.comb(2).perl.say

[22:41] <camelia> rakudo-moar 92ebc333a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 0313).base-repeating.join.comb(2).perl.say7⏏5<EOL>␤  …»

[22:41] <Xliff> m: say (3~(355/113).base-repeating.join('').comb(2).perl.say

[22:41] <camelia> rakudo-moar 92ebc333a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3base-repeating.join('').comb(2).perl.say7⏏5<EOL>␤   …»

[22:41] <Xliff> m: say (355/113).base-repeating.join('').comb(2).perl.say

[22:41] <camelia> rakudo-moar 92ebc333a: OUTPUT: «("3.", "14", "15", "92", "92", "03", "53", "98", "23", "00", "88", "49", "55", "75", "22", "12", "38", "93", "80", "53", "09", "73", "45", "13", "27", "43", "36", "28", "31", "85", "84", "07", "07", "96", "46", "01", "76", "99", "11", "50", "44", "24"…»

[22:41] <Xliff> m: say (355/113).base-repeating.join.comb(2).perl.say

[22:41] <camelia> rakudo-moar 92ebc333a: OUTPUT: «("3.", "14", "15", "92", "92", "03", "53", "98", "23", "00", "88", "49", "55", "75", "22", "12", "38", "93", "80", "53", "09", "73", "45", "13", "27", "43", "36", "28", "31", "85", "84", "07", "07", "96", "46", "01", "76", "99", "11", "50", "44", "24"…»

[22:44] *** MilkmanDan left
[22:44] *** notagoodidea joined
[22:45] *** MilkmanDan joined
[22:50] *** matiaslina joined
[22:52] *** ferreira left
[22:54] <notagoodidea> Hi all! I'm digging a little bit in perl6 grammars and binary data parsing after seeing a talk in fosdem and having to some nice chat with perl6 folks. I have found some old (~4yo) gist liking to Synopsis 05, I was asking myself is there a place that recap the state of current implementation vs the synopsis? (i'm looking for the :bytes from the new modifiers section of S05)

[22:56] *** MilkmanDan left
[22:56] *** MilkmanDan joined
[23:01] <timotimo> notagoodidea: that's sadly not implemented at all so far

[23:01] <timotimo> rakudo-moar can currently only work with grammars on the grapheme level

[23:01] <timotimo> which even in latin1 will be normalizing \r\n into a single grapheme

[23:02] <timotimo> (because that's what the unicode folks have decided)

[23:20] <notagoodidea> timotimo: Someone linked a blog post doing that (buf -> latin1 -> grammar) in my SO question. Where can we find how/where the grapheme definition for perl6 is (the actual code) ?

[23:28] *** notagoodidea left
[23:30] <timotimo> sorry, i was distracted for a while there

[23:31] <timotimo> oh no, they already left :<

[23:31] <timotimo> i guess i'll post to StackOverflow then?

[23:33] *** mowcat left
[23:34] *** kurahaupo_ joined
[23:35] *** kurahaupo_ left
[23:36] *** matiaslina left
[23:38] *** kurahaupo left
[23:43] *** kurahaupo joined
[23:45] *** kurahaupo_ joined
[23:45] *** kurahaupo_ left
[23:46] *** kurahaupo_ joined
[23:46] *** tomato_ joined
[23:47] *** kurahaupo left
[23:47] *** pecastro left
[23:49] *** tomato_ left
