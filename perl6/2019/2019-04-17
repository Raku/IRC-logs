[00:26] *** w_richard_w joined
[00:30] *** patrickz left
[00:40] <MasterDuke> timotimo: https://github.com/facebook/zstd/releases/tag/v1.4.0

[00:45] *** arios joined
[00:47] <MasterDuke> blog post i don't think i'd seen before about perl6 solutions to the weekly challenge #3 https://perl6.eu/regular-pascal.html

[01:13] *** AlexDaniel left
[01:16] *** mowcat left
[01:42] *** netrino left
[01:44] <ugexe> i tried to do the pi challenge polyglot... it didnt turn out so great

[01:44] <ugexe> https://gist.github.com/ugexe/c0c447738bd939cefa4e3a8db7178dd2

[01:45] <ugexe> finishes quickly in perl 5, but i'm not sure it'll ever finish running in perl 6 lol

[01:46] <ugexe> its taken 5 minutes to print ~40 of the 1000+ digits so far

[01:47] <ugexe> need a quicker way to do polyglot +</<< than eval 

[01:52] <MasterDuke> are many different values getting shifted by many different values? if not could you cache the results and then use those?

[01:57] <ugexe> hey that did the trick

[01:57] <ugexe> its still slow as shit but it finishes after a minute of doing nothing

[01:59] <ugexe> $g = $bitshift_cache{$b} //= (bitshift($b, 1) - 1);

[02:03] *** Manifest0 left
[02:03] <MasterDuke> huh, that gives more digits when run with perl5

[02:04] *** Manifest0 joined
[02:09] <ugexe> try again. i must have made some not-so-superficial changes

[02:11] <MasterDuke> ah, now it works with both

[02:13] <ugexe> im not really familiar with this algorithm at all either. i used what was on rosetta code

[02:15] <MasterDuke> whoops, segv when trying to profile

[02:16] <ugexe> i only write code that cannot be profiled

[02:18] <MasterDuke> sounds like a great way to preserve your anonymity

[02:20] *** Kaiepi joined
[02:22] *** w_richard_w left
[02:29] <Kaiepi> so while debugging an issue with perl 6 on openbsd i may have accidentally found a vulnerability in the os that lets me read anything and everything in memory, completely disregarding anything that'd otherwise stop me from being able to do that

[02:29] <Kaiepi> i'm really excited to write a proof of concept for it since it's not every day you get to hack what claims to be the most secure os

[02:30] <MasterDuke> congrats?

[02:30] <MasterDuke> timotimo: around?

[02:30] <Kaiepi> dw i'm not doing anything malicious with this

[02:36] *** Manifest0 left
[02:39] <ugexe> i wonder if there is a way to create an infix <<

[02:40] <ugexe> #`() sub infix:<< << >>($a, $b) { $a +< $b }; or some such

[02:42] *** Manifest0 joined
[02:42] <ugexe> m: sub infix:«<<»(Int:D $a, Int:D $b) { $a +< $b }; say 1 << 1

[02:42] <evalable6> ugexe, rakudo-moar 7ee08bb10: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/KdgISISZTO␤Unsuppo…»

[02:42] <evalable6> ugexe, Full output: https://gist.github.com/4d24c5ef730c30cb79b73a3e3c61114f

[02:42] <ugexe> seems like i can't avoid the compile time error suggesting to use +<

[02:46] <ugexe> should that error really be happening without p5isms?

[02:49] <ugexe> then again its not exactly a p5ism so it also kinda makes sense

[02:50] *** ctilmes left
[02:50] *** ctilmes joined
[02:50] <MasterDuke> maybe an `is tighter/looser` would make it work?

[02:50] <MasterDuke> yeah, that's really a c++ism

[03:06] *** Manifest0 left
[03:08] *** Cabanossi left
[03:13] *** xiaoyafeng joined
[03:16] *** Manifest0 joined
[03:17] *** Cabanoss- joined
[03:19] *** dalek left
[03:22] <ugexe> https://github.com/rakudo/rakudo/blob/7ee08bb10f72a063e612863f91edbbad67ab7dc7/src/Perl6/Grammar.nqp#L4017-L4019

[03:24] <ugexe> while the error makes sense, i'm still unsure it should error when the infix has been defined by the user.

[03:24] *** w_richard_w joined
[03:25] <ugexe> those are the only lines calling .sorryobs

[03:51] *** w_richard_w left
[03:57] <MasterDuke> m: use isms; multi sub infix:«<<»(Int:D $a, Int:D $b) { $a +< $b }; say 1 << 1

[03:57] <evalable6> MasterDuke, rakudo-moar 7ee08bb10: OUTPUT: «2␤»

[03:59] <MasterDuke> maybe the error should suggest `use isms`?

[03:59] *** w_richard_w joined
[04:24] *** arios left
[04:26] *** Kaiepi left
[04:29] *** AndroidKitKat joined
[04:53] *** Manifest0 left
[04:55] *** xiaoyafeng14 joined
[04:57] *** Manifest0 joined
[04:58] *** xiaoyafeng left
[05:05] *** Manifest0 left
[05:11] *** Manifest0 joined
[05:14] *** xiaoyafeng14 left
[05:15] *** kaare__ joined
[05:26] *** kaare__ left
[05:26] *** kaare__ joined
[05:27] *** w_richard_w left
[05:31] *** molaf joined
[06:02] *** sauvin joined
[06:06] *** kaare__ left
[06:14] *** Manifest0 left
[06:17] *** atweiden-air joined
[06:19] *** Manifest0 joined
[06:21] *** kaare__ joined
[06:22] *** Kaiepi joined
[06:27] *** domidumont joined
[06:28] *** Manifest0 left
[06:35] *** Manifest0 joined
[06:38] *** kaare__ left
[06:38] *** kaare__ joined
[06:42] *** domidumont left
[06:45] *** kaare__ left
[06:45] *** kaare__ joined
[06:49] *** atweiden-air left
[06:53] *** kaare__ left
[06:59] *** Geth left
[06:59] *** sergot left
[06:59] *** synopsebot left
[06:59] *** Manifest0 left
[06:59] *** dalek joined
[06:59] *** ChanServ sets mode: +v dalek

[06:59] *** Geth joined
[06:59] *** synopsebot joined
[06:59] *** ChanServ sets mode: +v Geth

[06:59] *** ChanServ sets mode: +v synopsebot

[06:59] *** p6lert joined
[07:01] *** cpan-p6 left
[07:01] *** cpan-p6 joined
[07:01] *** cpan-p6 left
[07:01] *** cpan-p6 joined
[07:02] *** jmerelo joined
[07:03] *** domidumont joined
[07:05] *** Manifest0 joined
[07:25] *** sftp left
[07:29] *** reach_satori left
[07:33] *** rindolf joined
[07:33] *** Kaiepi left
[07:38] *** xiaoyafeng14 joined
[07:42] *** patrickb joined
[07:51] *** Manifest0 left
[07:51] *** ufobat_ joined
[07:56] *** Manifest0 joined
[08:02] *** Grrrr left
[08:02] *** Grrrr joined
[08:04] *** dakkar joined
[08:18] *** sena_kun joined
[08:21] *** zakharyas joined
[08:28] *** sftp joined
[08:41] *** kaare__ joined
[08:58] *** ayerhart left
[09:00] *** Black_Ribbon left
[09:05] *** kaare__ is now known as kaare_

[09:22] <SmokeMachine> m: PROCESS::<$*RED-DB> = 42; say PROCESS::<$*RED-DB>

[09:22] <evalable6> SmokeMachine, rakudo-moar cec0839fa: OUTPUT: «42␤»

[09:24] <SmokeMachine> m: $*RED-DB = 42; say PROCESS::<$RED-DB>

[09:24] <evalable6> SmokeMachine, rakudo-moar cec0839fa: OUTPUT: «(exit code 1) Dynamic variable $*RED-DB not found␤  in block <unit> at /tmp/gMjyHsuuH9 line 1␤␤»

[09:24] <SmokeMachine> m: my $*RED-DB = 42; say PROCESS::<$RED-DB>

[09:24] <evalable6> SmokeMachine, rakudo-moar cec0839fa: OUTPUT: «(Any)␤»

[09:26] <timotimo> ugh, i hate it when a command segfaults unless run under gdb

[09:30] *** Kaiepi joined
[09:39] *** ayerhart joined
[09:39] <Geth> ¦ doc: 48e6e1820e | (JJ Merelo)++ | doc/Language/statement-prefixes.pod6

[09:39] <Geth> ¦ doc: Adds quietly as statement prefix refs #2034

[09:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/48e6e1820e

[09:39] <synopsebot> Link: https://doc.perl6.org/language/statement-prefixes

[09:40] <jmerelo> Don't want to get thick, but we really need help in the documentation. If you have a few minutes, or even an hour, to spare, take a look at the issues, and do whatever you can.

[09:45] *** aborazmeh joined
[09:45] *** aborazmeh left
[09:45] *** aborazmeh joined
[09:48] <sena_kun> jmerelo, are there any urgencies or a massive breakage ongoing?

[10:05] *** Kaiepi left
[10:05] *** domidumont left
[10:17] <jmerelo> sena_kun: it's documentation, it's not like it's not going to compile or anything. But there's a massive backlog of 6.d features, for instance.

[10:18] <jmerelo> sena_kun: the issue for doing that is pinned. In many cases, it's only checking that the feature is mentioned correctly.

[10:19] *** Manifest0 left
[10:24] <Geth> ¦ doc: e42f3287a9 | (Zili Chen)++ (committed using GitHub Web editor) | resources/i18n/zh/README.zh.md

[10:24] <Geth> ¦ doc: Sync README.zh.md with README.md

[10:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e42f3287a9

[10:24] *** Manifest0 joined
[10:29] <jmerelo> sena_kun: there are also parts of the language that are not covered. Just look for the issues < 1000

[10:33] <sena_kun> jmerelo, well, I am doing a full shift, including overtimes, for Comma almost every day, and while I am not, I am working on ldap. :| There are certainly a lot of tickets for docs, but I have a feeling that people are working on what they find fun and however time allows.

[10:34] <sena_kun> and I see people doing various improvements on their free time too

[10:38] <jmerelo> sena_kun: it's quite clear that Perl6 is -Ofun 

[10:39] <jmerelo> sena_kun: but it must be -Ofun for everyone, specially for people that arrive at Perl 6 for the first time through documentation. 

[10:39] <jmerelo> sena_kun: all personal reasons for not working in the documentation are valid (or the ecosystem, or MoarVM for that matter)

[10:40] <jmerelo> sena_kun: but, all personal reasons considered (including mine), we still need help in the documentation, even if checking if the use of the ¿ sigil in Junctions in 6.d is documented is not fun at all.

[10:40] <sena_kun> jmerelo, sorry, I've took a wrong approach from the start with your words. Yes, I guess you are right.

[10:43] <jmerelo> sena_kun: maybe I have done that a bit too, so sorry about that. But anyway, solving issues helps, but spreading the word helps too.

[10:50] *** mowcat joined
[10:52] *** benchable6 left
[10:53] *** benchable6 joined
[10:53] *** ChanServ sets mode: +v benchable6

[10:54] <Geth> ¦ ecosystem: kalkin++ created pull request #450: Update [email@hidden.address]
[10:54] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/450

[10:54] <Geth> ¦ ecosystem: a6cd7bb519 | (Bahtiar `kalkin-` Gadimov)++ | META.list

[10:54] <Geth> ¦ ecosystem: Update [email@hidden.address]
[10:54] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/a6cd7bb519

[10:54] <Geth> ¦ ecosystem: bb0cc6d346 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | META.list

[10:54] <Geth> ¦ ecosystem: Merge pull request #450 from kalkin/master

[10:54] <Geth> ¦ ecosystem: 

[10:54] <Geth> ¦ ecosystem: Update [email@hidden.address]
[10:54] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/bb0cc6d346

[11:01] *** zakharyas left
[11:03] *** benchable6 left
[11:03] *** benchable6 joined
[11:03] *** ChanServ sets mode: +v benchable6

[11:16] *** netrino joined
[11:26] *** netrino left
[11:30] <patrickb> .hug sena_kun

[11:30] <patrickb> .hug jmerelo

[11:30] <patrickb> no huggable?

[11:30] * patrickb hugs sena_kun

[11:31] * patrickb hugs jmerelo

[11:31] <patrickb> Thanks for your work, both of you!

[11:33] * lizmat seconds

[11:38] <jmerelo> hey, thanks!

[11:38] <jmerelo> notable6: https://twitter.com/Tux5/status/1118459720623435776

[11:38] <notable6> jmerelo, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[11:38] <jmerelo> weekly: https://twitter.com/Tux5/status/1118459720623435776

[11:38] <notable6> jmerelo, Noted!

[11:38] *** Manifest0 left
[11:44] *** Manifest0 joined
[11:44] *** domidumont joined
[11:58] * sena_kun gets timeout for http://tux.nl/Talks/CSV6/speed4.html

[11:58] *** netrino joined
[11:58] <sena_kun> oh, seems like it is just me.

[12:02] *** Kaiepi joined
[12:02] *** jmerelo left
[12:03] *** Manifest0 left
[12:04] *** netrino_ joined
[12:04] *** netrino left
[12:10] *** Manifest0 joined
[12:13] *** aborazmeh left
[12:35] *** zakharyas joined
[13:04] *** cpan-p6 left
[13:05] *** cpan-p6 joined
[13:05] *** cpan-p6 left
[13:05] *** cpan-p6 joined
[13:35] *** Manifest0 left
[13:40] *** Manifest0 joined
[13:43] *** mowcat left
[13:47] *** antanst8 left
[13:48] *** xiaoyafeng14 left
[13:51] *** skids joined
[13:52] *** domidumont1 joined
[13:54] *** domidumont left
[13:55] *** aindilis left
[14:23] *** domidumont joined
[14:26] *** gregf_ joined
[14:26] *** domidumont1 left
[15:03] <lucs> Any way to tell which version of a native lib a module is using?

[15:05] <jnthn> It'd appear in the strace output, I guess

[15:06] <lucs> I'll try that, thanks.

[15:10] *** aindilis joined
[15:11] <lucs> jnthn: Yep, perfect.

[15:30] *** jmerelo joined
[15:31] <jmerelo> weekly: Solution to the 4th Perl Weekly Challenge, by Joelle Maslak https://github.com/jmaslak/perlweeklychallenge-club/tree/master/challenge-004/joelle-maslak/perl6

[15:31] <notable6> jmerelo, Noted!

[15:31] <jmerelo> releasable6: status

[15:31] <releasable6> jmerelo, Next release in ≈3 days and ≈3 hours. 12 blockers. 0 out of 218 commits logged (⚠ 51 warnings)

[15:32] <releasable6> jmerelo, Details: https://gist.github.com/0c894aa0e9f62b53757ccbfe1573decb

[15:47] *** patrickb left
[15:51] *** molaf left
[15:54] *** Wahnberger joined
[15:54] *** nuclearsandwich joined
[15:56] *** patrickb joined
[15:56] <Wahnberger> hi there: I have a file which i read with IO.lines .. inside i call a database method for adding some data.. psql server runs into "sorry, too many clients already" 

[15:57] <Wahnberger> i assume that IO.lines is doing some concurrency by default? If so .. how can i reduce that?

[15:58] <Wahnberger> i have tried  stuff like that:  "race for $path.IO.lines(:batch(1))" but nothing happens

[16:01] <jmerelo> Wahnberger: how do you call the database method?

[16:01] <sena_kun> Wahnberger, can you show your code? Do you use DB::Pg or DBIish?

[16:04] <jnthn> It won't do any concurrency unless you stick in `race` or `hyper` explicitly

[16:07] *** zakharyas left
[16:08] *** MilkmanDan left
[16:08] <Wahnberger> I use DB::Pg

[16:08] *** MilkmanDan joined
[16:09] *** domidumont left
[16:10] <Wahnberger> connection, single inserts and querys woring well so far

[16:11] <Wahnberger> when the loop is running (IO.lines...) i check the connections in psql (pg_stat_activity) and they are exeeding the limit

[16:12] <Wahnberger> so i am assuming that i this loop runs with concurrency

[16:13] <Wahnberger> uhm..have to drop off.. will ask later, sorry

[16:13] *** Wahnberger left
[16:17] *** mowcat joined
[16:22] <moritz> which limit? number of connections limit?

[16:23] *** spacedbat left
[16:26] *** zacts joined
[16:28] <moritz> if so, that sounds like a bug

[16:29] *** spacedbat joined
[16:30] *** dakkar left
[16:33] *** gregf_ left
[16:37] *** vrurg left
[16:37] *** vrurg joined
[16:41] * ugexe grumbles something about posting blatantly incorrect answers to stackoverflow

[16:42] <sena_kun> ugexe, you can bash me directly for this one. However, the post is already deleted.

[16:42] <ugexe> not yours

[16:42] <sena_kun> erm, really? Takao == my account, just in case

[16:43] <ugexe> yeah. https://stackoverflow.com/a/55731976/1772220

[16:43] <ugexe> frankly this answer is just babbling 

[16:44] <sena_kun> well, the question is not particularly clear regarding feature X or feature Y, but rather in the area of "X doesn't work, there are like 10 or something reasons why it can be broken, but how do I fix that?"

[16:44] <sena_kun> which is a really gray area, imho

[16:44] <ugexe> i understand. it does not help anyone to list a bunch of unrelated problems

[16:45] <ugexe> because then anytime some precomp on install issue comes up someone will just regurgitate that list of unrelated problems

[16:49] <ugexe> "oh did you bump the version?" well why would this even make sense to suggest?

[16:49] *** zacts left
[16:49] <jmerelo> ugexe: you've got the privs to edit. You can edit the answer to make it better. 

[16:50] <ugexe> i had already posted an answer

[16:50] <jmerelo> ugexe: well, thanks for the babbling bit. I'm not going to counterattack.

[16:50] <sena_kun> it is also a gray area of where is stackoverflow and where is a bug tracker. I'd be much happier with it being narrowed down to particular issues, as I've saw questions that was, in fact, bug reports of Cro issues. So there can be no other answer than "Well, that's a bug" or "Well, that's a bug, I've fixed it".

[16:51] <jmerelo> ugexe: did you *read* the answer?

[16:51] <sena_kun> s/issues/questions/

[16:51] <ugexe> obviously i read it

[16:51] <jmerelo> ugexe: your answer was not helpful at all. I voted it up anyway.

[16:52] <jmerelo> ugexe: Main thing is that it's not an actionable answer. There's nothing the OP can do about it. 

[16:52] <jmerelo> ugexe: you keep telling the OP things do not make sense. That's not really helpful.

[16:52] <ugexe> you are being dense

[16:52] <jmerelo> ugexe: you mention "module if" and don't link to it. It's not helpful in any way, might take you in the wrong direction, and does not solve the problem either.

[16:53] <ugexe> because i dont expect the author to debug a transitive dependency

[16:53] * sena_kun wanders off to look at inline refactoring implementing

[16:53] <jmerelo> ugexe: if you read it, you don't understand it. What I was saying is that effectively, it looks like the module was installed, and probably with the same version. We have to take the OP at face value: it does not find the module

[16:54] <jmerelo> ugexe: that means that the module was installed without that particular file, which is missing.

[16:54] <ugexe> you frankly dont kow what you are talking about

[16:54] <ugexe> so i'm done discussing this with you

[16:55] <jmerelo> ugexe: as always, it's a pleasure to interact with you. Not.

[16:57] <jmerelo> ugexe: you can mention me by name, also. Not a problem to defend my blatantly incorrect views. 

[17:00] *** kaare_ left
[17:03] *** kaare_ joined
[17:07] *** kaare_ left
[17:07] *** kaare_ joined
[17:09] *** mowcat left
[17:22] *** zachk joined
[17:23] *** zachk left
[17:23] *** zachk joined
[17:40] *** fatguy joined
[17:43] *** kaare_ left
[17:43] <fatguy> i have a TWEAK submethod on parent class, whenever i create an obj to child class, it will run the TWEAK from parent class. i don't want that, how can i achieve this ?

[17:45] <timotimo> are you allowed to change the parent class?

[17:46] <tony-o> m: role A { submethod TWEAK(|) { "A.TWEAK".say; }; }; class B does A { submethod TWEAK(|) { "B.TWEAK".say; } }; B.new;

[17:46] <evalable6> tony-o, rakudo-moar 298c313c1: OUTPUT: «B.TWEAK␤»

[17:47] *** arios joined
[17:47] <tony-o> if you're not allowed to change the parent, you can override it (and just not call nextwith or similar)

[17:48] <ugexe> they would need to change the parent from a class to a role still

[17:50] <fatguy> what is ( | ) 'pipe' for ?

[17:51] <fatguy> i can change the parent class. so my idea is to check the config file on parent class only

[17:51] <fatguy> i will spawn the child based on certain condition

[17:52] <fatguy> the  parent class is called 'instance' for example and the child will be instance1...10

[17:53] <ugexe> its an anonymous capture (since its not getting used in that example). if you wanted a non anonymous capture you'd use e.g. TWEAK(|c) { say c.perl }

[17:53] <timotimo> the parent class can compare what type "self" has

[17:53] <fatguy> i called the parent class to initiate a config check and log at the beginning of main script

[17:53] <tony-o> ah, if you didn't have access you could wrap the TWEAK method also to check the .mro

[17:54] <tony-o> guess, that wouldn't work either

[17:54] <tony-o> not with mro, at least

[17:54] <timotimo> m: class Parent { submethod TWEAK { say "parent's TWEAK has $(self.^name)" } }; class Child is Parent { submethod TWEAK { say "child's TWEAK has $(self.^name)" } }; Parent.new; say "and now child:"; Child.new

[17:54] <evalable6> timotimo, rakudo-moar 298c313c1: OUTPUT: «parent's TWEAK has Parent␤and now child:␤parent's TWEAK has Child␤child's TWEAK has Child␤»

[17:54] <timotimo> you'd then self.WHAT === Parent, for example

[17:56] <tony-o> should a .wrap TWEAK have access to `self` ?

[17:56] <tony-o> m: class A { submethod TWEAK(|) { "A.TWEAK".say; }; }; class B is A { submethod TWEAK(|) { "B.TWEAK".say; } }; say A.^can("TWEAK")[0].wrap(-> (|) { self.^name; }); B.new;

[17:56] <evalable6> tony-o, rakudo-moar 298c313c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ay830bJfR1␤'self' …»

[17:56] <evalable6> tony-o, Full output: https://gist.github.com/6c00c758d775b4a0b484ad4b6ed16c57

[17:56] <ugexe> why does declaring the TWEAK of both parent and child as `method` instead of `submethod` call both TWEAKs?

[17:57] <tony-o> m: class A { submethod TWEAK(|) { "A.TWEAK".say; }; }; class B is A { submethod TWEAK(|) { "B.TWEAK".say; } }; A.^can("TWEAK")[0].wrap(-> (|) { say self.^name; }); B.new; # dies with self not available in the wrapped TWEAK

[17:57] <evalable6> tony-o, rakudo-moar 298c313c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/2HvwV476qk␤'self' …»

[17:57] <evalable6> tony-o, Full output: https://gist.github.com/296a38e467d7941a9a0f863f287d54b2

[17:57] <timotimo> because the buildplan maker goes through the whole MRO and collects everything named TWEAK or BUILD

[17:57] <timotimo> and it stashes away the actual code objects in the buildplan if i'm not mistaken

[17:58] <ugexe> right. but is it this way because it was not considered to e.g. check for non submethods, or because the optimizations force this particular design?

[18:01] <fatguy> thanks, i can work with if self.^name eq 'instance' for this

[18:01] <timotimo> i'm not sure what the semantics should be if a method would be picked up every step of the class hierarchy

[18:01] <timotimo> you'd have the tweak method of one class be called for any child that doesn't have its own

[18:01] <timotimo> that seems like a very strange thing to want to have

[18:07] *** arios left
[18:08] <sena_kun> Can I use test data from a Perl 5 module? It uses artistic license, can't I get sued or something? Will mentioning it in the readme be enough?

[18:10] <sena_kun> Not like I've heard of a lot of such cases, just don't want to be rude to the author.

[18:10] <timotimo> i think it should be fine? you're just not allowed to call it the same thing or claim you made the original i think?

[18:10] <tony-o> i don't think you can redistribute if you've modified the code under artistic

[18:11] <tony-o> without modification, you need to include license info

[18:11] <tony-o> You may Distribute verbatim copies of the Source form of the Standard Version of this Package in any medium without restriction, either gratis or for a Distributor Fee, provided that you duplicate all of the original copyright notices and associated disclaimers. At your discretion, such verbatim copies may or may not include a Compiled form of the Package.

[18:11] <sena_kun> no, I am not modifying the code, I just want to take test data to not re-implement the same foo-bar stuff.

[18:11] <ugexe> turn your clock back 10 years. commit your code. claim they stole the tests from you

[18:12] <tony-o> lol

[18:12] <tony-o> the ol' windows95 registration hack

[18:12] <sena_kun> Net::LDAP is probably older than 10 years. :p

[18:14] <tony-o> he's working on metric years

[18:14] <tony-o> 100 seconds in 2 10 hour segments of a day with 20 days per month and 10 months in the year

[18:15] <tony-o> and years are twice as long

[18:15] <sena_kun> p-probably... ok, I guess I'll peek at the original just a little, considering that the actual implementation code is drastically different, and test data always can be edited after

[18:18] *** lucasb joined
[18:18] <tony-o> sena_kun: the 1.0 license has different but similar requirements

[18:18] <tony-o> if you're looking at an old set of tests, that might be relevant

[18:19] <tony-o> https://opensource.org/licenses/Artistic-1.0

[18:19] <sena_kun> https://metacpan.org/source/MARSCHAP/perl-ldap-0.66/t/01canon_dn.t <- I am looking at this

[18:20] *** cozachk joined
[18:20] <sena_kun> I don't want to re-invent those `O=Test,C=GB` into `O=Test2,C=EnoughDifferenceForEveryone`

[18:20] <sena_kun> the code is not modified, and my code itself is pretty original

[18:22] *** zachk left
[18:23] *** cozachk left
[18:24] *** abraxxa1 joined
[18:24] *** sauvin left
[18:25] *** mowcat joined
[18:29] *** jmerelo left
[18:34] *** nuclearsandwich left
[18:44] *** zachk joined
[18:46] *** probablymoony left
[18:50] *** mowcat left
[18:53] *** moony joined
[18:56] *** zachk left
[18:56] *** zachk joined
[19:18] *** netrino_ left
[19:20] *** netrino joined
[19:20] *** Xliff joined
[19:20] <Xliff> \o

[19:21] <Xliff> m: role A { method new(1) { say 'Hi' }; }; class B does A { }; B.new(1)

[19:21] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «Hi␤»

[19:21] <Xliff> m: role A { method new(1) { say 'Hi' }; }; class B does A { }; A.new(1)

[19:21] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «Hi␤»

[19:24] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { }; method new(1) { self.bless(a => 1) }; }; class B does A { }; A.new(1).a

[19:24] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «»

[19:24] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { }; method new(1) { self.bless(a => 1) }; }; class B does A { }; A.new(1).a.say

[19:24] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «1␤»

[19:24] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { }; method new(1) { self.bless(a => 1) }; }; class B does A { }; B.new(1).a.say

[19:24] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «1␤»

[19:24] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { say 'Building role' }; method new(1) { self.bless(a => 1) }; }; class B does A { submethod BUILD { say 'Building class'; }; B.new(1).a.say

[19:24] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ovgX7bmzbC␤Missing…»

[19:24] <evalable6> Xliff, Full output: https://gist.github.com/a4727c1f8ebbdbcddfff764e48c85e2a

[19:25] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { say 'Building role' }; method new(1) { self.bless(a => 1) }; }; class B does A { submethod BUILD { say 'Building class'; }; }; B.new(1).a.say

[19:25] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «Building class␤(Any)␤»

[19:25] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { say 'Building role' }; method new(1) { self.bless(a => 1) }; }; class B does A { }; B.new(1).a.say

[19:25] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «Building role␤1␤»

[19:28] <fatguy> i had config file, read using "filename".IO.lines, need to ignore '#' at the beginning and empty line, i can use starts-with for '#' but for empty line i use unless .Stringy to make it work. tried using starts-with(' ') and regex \s+ but it didn't work. is there any better way ?

[19:29] <sena_kun> you can just `next unless $line`

[19:30] <sena_kun> m: for ('a', '', 'b') -> { next unless $_; say $_ }

[19:30] <evalable6> sena_kun, rakudo-moar 298c313c1: OUTPUT: «(exit code 1) Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at /tmp/oH9Nv5HaeR line 1␤␤»

[19:30] <sena_kun> m: for @('a', '', 'b') -> { next unless $_; say $_ }

[19:30] <evalable6> sena_kun, rakudo-moar 298c313c1: OUTPUT: «(exit code 1) Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at /tmp/zDIAyLjL_Z line 1␤␤»

[19:30] <sena_kun> erm

[19:30] <sena_kun> m: for @('a', '', 'b') { next unless $_; say $_ }

[19:30] <evalable6> sena_kun, rakudo-moar 298c313c1: OUTPUT: «a␤b␤»

[19:31] <sena_kun> fatguy, ^

[19:31] <fatguy> ok thanks

[19:31] <sena_kun> m: for @('a', '', 'b') { next if .chars == 0; say $_ }

[19:31] <evalable6> sena_kun, rakudo-moar 298c313c1: OUTPUT: «a␤b␤»

[19:31] <sena_kun> also this

[19:32] <unclechu> m: for @('a', '', 'b') { say $_ unless $_ }

[19:32] <evalable6> unclechu, rakudo-moar 298c313c1: OUTPUT: «␤»

[19:32] <unclechu> m: for @('a', '', 'b') { say $_ if $_ }

[19:32] <evalable6> unclechu, rakudo-moar 298c313c1: OUTPUT: «a␤b␤»

[19:32] <sena_kun> m: for ('a', '', 'b') { say $_ if $_ }

[19:32] <evalable6> sena_kun, rakudo-moar 298c313c1: OUTPUT: «a␤b␤»

[19:32] <sena_kun> m: for 'a', '', 'b' { say $_ if $_ }

[19:32] <evalable6> sena_kun, rakudo-moar 298c313c1: OUTPUT: «a␤b␤»

[19:33] <sena_kun> m: .say if $_ for 'a', '', 'b'

[19:33] <evalable6> sena_kun, rakudo-moar 298c313c1: OUTPUT: «a␤b␤»

[19:33] <unclechu> m: say $_ if $_ for @('a', '', 'b')

[19:33] <evalable6> unclechu, rakudo-moar 298c313c1: OUTPUT: «a␤b␤»

[19:33] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { say ::?CLASS.^name.say; say 'Building role' }; method new(1) { self.bless(a => 1) }; }; class B does A { }; A.new(1).a.say

[19:33] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «A␤True␤Building role␤1␤»

[19:36] <Xliff> m: role A { has $.a; submethod BUILD(:$!a) { say ::?ROLE.^name.say; ::?CLASS.^name.say; say 'Building role' }; method new(1) { self.bless(a => 1) }; }; class B does A { }; A.new(1).a.say

[19:36] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «A␤True␤A␤Building role␤1␤»

[19:47] *** kaare_ joined
[19:50] *** Black_Ribbon joined
[19:55] *** sftp left
[19:58] *** sftp joined
[20:07] *** patrickb left
[20:09] *** zacts joined
[20:11] *** patrickb joined
[20:13] *** otulp left
[20:22] *** Manifest0 left
[20:27] *** arios joined
[20:27] *** Manifest0 joined
[20:33] <ugexe> MasterDuke: using "#`() use isms; sub infix:«<<»(Int:D $a, Int:D $b) { $a +< $b };" instead of the previous bitshift sub (both using the cache still) from 45s to 10s

[20:34] <ugexe> the cache is no longer needed even

[20:44] *** eseyman left
[20:53] *** arios left
[20:54] *** MilkmanDan left
[20:55] *** MilkmanDan joined
[21:06] *** skids left
[21:14] *** _jrjsmrtn joined
[21:17] *** __jrjsmrtn__ left
[21:22] * guifa kinda feels like if should set up an implict context.  So you can do “return $_ if %foo<bar>:exists”

[21:28] *** vrurg left
[21:28] *** vrurg joined
[21:28] <masak> m: my %foo = bar => "OH HAI"; if %foo<bar> -> $value { say $value }

[21:28] <evalable6> masak, rakudo-moar 298c313c1: OUTPUT: «OH HAI␤»

[21:28] <masak> if you don't insist on using :exists and the inverted `if`, you have your wish

[21:33] <guifa> Interesting that it requires the pointing block though

[21:34] <jnthn> `.return with %boo<bar>` is definedness is good enough, which it usuall is

[21:34] <jnthn> *usually

[21:34] <jnthn> *if

[21:34] <jnthn> Apparently too tired to type :)

[21:34] <guifa> ooh I like that

[21:35] <tyil> not sure if this is interesting enough to put in the p6 weekly https://pleroma.tyil.nl/notice/9hrPeqI82uP3W3i8aO

[21:35] <guifa> I had no idea you could just call .return on a value

[21:36] <tyil> same, but that looks p cool

[21:37] <guifa> I actually have to call another method first before the routine but it works fine

[21:37] <guifa> .format( … ).return with %foo<bar>

[21:38] *** sena_kun left
[21:41] <sjn> tyil: does your image contain the rakudo star modules too?

[21:41] <tyil> no, bare perl6

[21:42] <tyil> no zef either (and the python one doesnt contain pip on alpine i believe)

[21:42] <sjn> a nightly R* based on that one would be cool, I think

[21:42] *** ctilmes_ joined
[21:43] <tyil> I could probably just put RUN a zef install on a list of modules that R* also includes and get there

[21:43] <sjn> btw, isn't adding a build-date an anti-pattern?

[21:43] <tyil> R* does not do any patches on mainline perl6 does it?

[21:43] <tyil> a build-date tag, you mean?

[21:43] <sjn> reproducible builds ftw

[21:44] <sjn> I see a RUN date "+%FT%TZ" > /var/docker/meta/build-date

[21:44] <tyil> oh

[21:44] <tyil> that's not in the perl6 docker image, that's in the cpan-p6 one

[21:44] <tyil> .bots

[21:44] <cpan-p6> 03cpan-p6:121.0.1 (2019-04-12T16:14:21Z) reporting for duty! [Perl 6] 02https://git.tyil.nl/perl6/app-cpan-uploadannouncer-irc

[21:44] <tyil> that's how it gets that datetime stamp

[21:45] <tyil> it allows me to easily check if I'm looking at the right docker image, in case k8s wasnt able to pull a newer image yet

[21:45] <sjn> but it makes it impossible to re-build an image from the same commit and end with the same build sha

[21:46] <tyil> docker isnt a reproducible build to begin with, though

[21:47] <sjn> really?

[21:47] <ctilmes_> tyil: alpine testing/edge has moarvm/nqp/rakudo installed in them.

[21:47] <ctilmes_> you can run echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories  && apk -U add rakudo

[21:47] <tyil> ctilmes_: I heard, but this is latest master branch every night, so slightly more up to date

[21:47] <sjn> well, even if that's true, it's a bad argument for not making the effort to make your own build reproducible

[21:48] <tyil> and easier to try out custom patches (like one from samcv to check if memory consumption improved)

[21:48] <ctilmes_> My latest pull was rejected ;-(  but I believe that was due to known rakudo bug: https://github.com/alpinelinux/aports/pull/6845

[21:48] <tyil> sjn: well, I don't intend cpan-p6 to be reproducible here, because I intentionally want it to be different so I can easily see if I have a newer image

[21:48] <tyil> the perl6 one does not have this timestamp

[21:49] <tyil> sjn: https://git.tyil.nl/docker/perl6/src/branch/master/docker/alpine this is the perl6 docker image

[21:50] <sjn> tyil: I think you might be misunderstanding the point of having reproducible builds

[21:50] <tyil> no, I do like reproducible builds

[21:50] <tyil> but first of all, docker is not a reproducible build system

[21:51] <tyil> and second of all, the perl6 image doesn't have that timestamp 

[21:51] <sjn> what makes you say docker isn't a reproducible build system?

[21:51] <tyil> what makes you think it is?

[21:52] <tyil> Nix is a reproducible build system, it makes sure that settings are always correct, including system datetime, pins on specific versions of other packages and validates them all via hashing

[21:53] <tyil> docker doesnt do any tricks to make sure the system state is consistent across builds, and there's no validation on whether RUN commands every have the exact same effect

[21:53] <sjn> hmf

[21:53] <tyil> while it may sometimes accidentally make a rather reproducible thing, that doesn't make it a reproducible build system

[21:53] * sjn thought NixOS used docker...

[21:54] <tyil> I believe they do build in a container, but additionally they ensure system state is always the same for every build as well

[21:54] <tyil> not sure if they specifically use docker for builds, though

[21:56] <tyil> (fwiw, this is what I learned from a NixOS talk, I don't use NixOS myself)

[22:02] <cpan-p6> New module released to CPAN! JSON::Path (1.6) by 03JNTHN

[22:06] <tyil> damn, python:latest is almost 1gb

[22:06] <tyil> python                                                              latest                59a8c21b72d4        2 weeks ago         929MB

[22:07] *** hythm_ joined
[22:09] <hythm_> p6: my $i = 0; loop { last if $i == 7; $i++; LAST say $i }

[22:09] <evalable6> hythm_, rakudo-moar 298c313c1: OUTPUT: «7␤»

[22:09] <hythm_> p6: sub s { my $i = 0; loop { last if $i == 7; $i++; LAST say $i } }; s

[22:09] <evalable6> hythm_, rakudo-moar 298c313c1: OUTPUT: «(exit code 1) 0␤No such method '!capture_phasers' for invocant of type 'Code'␤  in block <unit> at /tmp/roVf2vPCkV line 1␤␤»

[22:14] <sjn> that looks like a bug to me

[22:14] <hythm_> i don't get the above error error on repl, instead i get "0" as output, which seems wrong anyway.

[22:16] *** kaare_ left
[22:17] <timotimo> oh the repl

[22:18] *** zacts left
[22:19] <sjn> there's a 0 in that output here too

[22:21] <hythm_> oh, right, did not notice it

[22:22] <SmokeMachine> m: class A { submethod TWEAK(|) { "A.TWEAK".say; }; }; class B is A { submethod TWEAK(|) { "B.TWEAK".say; } }; A.^can("TWEAK")[0].wrap(my method (|) { say self.^name; }); B.new;

[22:22] <evalable6> SmokeMachine, rakudo-moar 298c313c1: OUTPUT: «B␤B.TWEAK␤»

[22:23] *** vrurg left
[22:23] *** vrurg joined
[22:25] <hythm_> updated rakudo issue #2836, seems related

[22:29] <timotimo> R#2836

[22:29] <synopsebot> R#2836 [open]: https://github.com/rakudo/rakudo/issues/2836 [phasers] `LAST` loop inside `sub` increments `$` for every iteration

[22:31] <MasterDuke> ugexe: a couple more of those tricks and you're going to end up with a perl (5|6) -> polyglot perl compiler

[22:31] <ugexe> get the worst of both worlds!

[22:33] *** AlexDaniel joined
[22:33] <MasterDuke> perl 6, the worst perl 5 *and* the worst perl 6

[22:33] *** rindolf left
[22:38] <ugexe> perl -1, 5-6

[22:38] *** hythm_ left
[22:39] <guifa> Ugh.  Mozilla released Fluent v1.0 today.  I need to get datetime to work soon so I can get to 1.0

[22:40] <Juerd> Oof, Perl6 got a lot slower on my test case since the last time I tried (months ago perhaps)

[22:40] <Juerd> It used to take between 5 and 6 seconds, now 10+.

[22:41] <Juerd> While I admit the circumstances of this benchmark are suboptimal, I can't think of any explanation for this except regression

[22:41] <ugexe> is there a way to write this without conditional logic? sub polyslurp ($_) { "0" and (return "{$_.IO.slurp}") or (return do { open(my $fh, $_[0]); join("", <$fh>); }) };

[22:42] <MasterDuke> Juerd: this is the mqtt regex test, right?

[22:53] <Xliff> Is there any way to make an object's method override an implemented role's method?

[22:55] <ugexe> have it mix-in an anonymous role at build-time that calls the method with the classname qualifier ala self.CLASSNAME::whatever

[22:58] <Xliff> So....

[22:58] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; A.new.a

[22:58] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «Role␤»

[22:59] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = A.new but role { method a { self.A.a }; }; $a.new.a

[22:59] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «(exit code 1) No such method 'A' for invocant of type 'A+{<anon|1>}'. Did you mean 'a'?␤  in method a at /tmp/J6QZWNhDzo line 1␤  in block <unit> at /tmp/J6QZWNhDzo line 1␤␤»

[23:00] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = A.new but role { method a { self.A::a }; }; $a.new.a

[23:00] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «Role␤»

[23:00] <Xliff> ugexe: ^^

[23:00] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = A.new but role { method a { "override" }; }; $a.new.a

[23:00] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «»

[23:00] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = A.new but role { method a { say "override" }; }; $a.new.a

[23:00] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «override␤»

[23:01] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = A.new but role { method a { self.a }; }; $a.new.a

[23:01] *** zacts joined
[23:01] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[23:01] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = A.new but role { method a { self.a }; }; $a.a

[23:01] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[23:01] <ugexe> you are never using class B, so why are you including it?

[23:02] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = B.new but role { method a { self.B.a }; }; 

[23:02] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «»

[23:02] <ugexe> self.B::a

[23:03] <Xliff> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = B.new but role { method a { self.B::a }; }; 

[23:03] <evalable6> Xliff, rakudo-moar 298c313c1: OUTPUT: «»

[23:03] <ugexe> not self.B.A

[23:03] <ugexe> m: my role A { method a { say "Role"; }; }; class B does A { method a { say "Class"; }; }; my $a = B.new but role { method a { self.B::a }; }; say $a.a

[23:03] <evalable6> ugexe, rakudo-moar 298c313c1: OUTPUT: «Class␤True␤»

[23:03] <Xliff> That's a bit confusing, but OK.

[23:03] <Xliff>  /o\

[23:03] <Xliff> Thanks.

[23:04] <Xliff> OK. That's better. Thanks!

[23:06] *** mowcat joined
[23:16] <guifa> jnthn: in doing some more tests, the .return with $foo while cleaner code takes more than 2x time :(

[23:18] <guifa> Probably because the with creates a code block (I knwo someone else had something else similar not long ago where that was the slowdown)

[23:20] <MasterDuke> guifa: can you show two golfed code snippets so we can profile them?

[23:21] *** adu joined
[23:25] <guifa> https://tio.run/##jY/dCoIwGIaP21V8xIIZOSyokxFIB11DECUzLAf5wzTUxGu3z@wH04N2tJe9e3je2NPXVV0HBUx8QcjEL6lTwRqoA@dIAzvOreYY/KK9mE25SsxYq8AzsJzcXCxFwGhuQElG2ktvOoSGkVegzq@bICNLkOpZd6X@1Pmrn6nUH6jmxf2XjFIDZYLyNEUn1A6jTDTZdjF85QMZsxJVGXWMCtUTWcB4i@oqhPGs@QVmyxCkh5J9FM7ooDY46x/UqY/CmR3UDmcPoJ6PttxbnC@Wh7Zru914ese6fgA

[23:27] <MasterDuke> guifa++

[23:29] <guifa> MasterDuke: Results are actually even more in favor of the return foo if foo when you have more hits than misses (change the grep to !*.is-prime)

[23:30] *** abraxxa1 left
[23:38] *** ctilmes_ left
[23:42] *** ctilmes_ joined
[23:47] *** lucasb left
[23:59] <lucs> If I change for example some code under ./src/core/... in my local clone of rakudo, will a 'make' be sufficient to update everything?

