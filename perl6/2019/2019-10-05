[00:00] <Xliff> m: my @a = <a b c d>; my @b = <4 3 2 1>; .say for @a »~« @b

[00:00] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «a4␤b3␤c2␤d1␤»

[00:01] *** khisanth_ left
[00:02] *** p9s``` joined
[00:15] *** khisanth_ joined
[00:15] <Xliff> tbrowder: I know how you feel. I mean... I let the Hamburgler out! What was I thinking! :)

[00:17] <tbrowder> fond memories, traveling with kids when macdonald’s was still pretty new

[00:41] *** lucasb left
[00:45] *** domm left
[00:45] *** sacomo joined
[01:02] *** wamba left
[01:12] *** molaf left
[01:21] *** cwilson joined
[01:25] *** molaf joined
[01:25] *** cwilson1 left
[01:28] *** reach_satori_ joined
[01:47] *** cwilson left
[01:48] *** cwilson joined
[01:54] *** stux|RC left
[01:58] *** stux|RC joined
[02:05] *** cwilson left
[02:18] <Xliff> m: "foo\nthis is not valid UTF-8 \xE5 =(\nbar\n".say

[02:18] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «foo␤this is not valid UTF-8 å =(␤bar␤␤»

[02:18] <Xliff> m: "foo\nthis is not valid UTF-8 \xE5 =(\nbar\n".encode('ASCII').decode

[02:18] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Error encoding ASCII string: could not encode codepoint 229␤  in block <unit> at <tmp> line 1␤␤»

[02:19] <Elronnd> m: "8 \xE5 =(\nbar\n".comb.say

[02:19] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «(8   å   = ( ␤ b a r ␤)␤»

[02:20] <Xliff> m: "foo\nthis is not valid UTF-8 \xE5 =(\nbar\n".encode('ISO-8859-1').decode

[02:20] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Malformed UTF-8 at line 2 col 25␤  in block <unit> at <tmp> line 1␤␤»

[02:32] *** ravenousmoose joined
[02:34] *** agentzh left
[02:36] *** agentzh joined
[02:36] *** agentzh left
[02:36] *** agentzh joined
[02:36] *** ravenousmoose left
[02:43] *** _jrjsmrtn joined
[02:44] *** __jrjsmrtn__ left
[02:58] <Doc_Holliwood> is there another way to call a metamodel method other than the ^method form?

[02:58] <timotimo> yes, get the metaobject with .HOW and make sure to pass the instance on the object as first parameter of the method

[02:59] <Doc_Holliwood> i'm looking at zef. it has problems with windows. it is shelling out <perl6 -MSomeModule -e "say SomeModule.^ver>

[03:00] <Doc_Holliwood> somehow the ^ gets eaten somewhere and I end up with unknown method "ver"

[03:01] <Doc_Holliwood> so, there is no instance

[03:01] <Doc_Holliwood> just a class

[03:01] <Xliff> Doc_Holliwood: So use the class as the invocant.

[03:02] <Xliff> SomeModule.HOW.ver(SomeModule)

[03:02] <Xliff> s/invocant/parameter/

[03:04] <Doc_Holliwood> yes, that works

[03:06] <Doc_Holliwood> cool. a little progress before bed

[03:06] <Doc_Holliwood> tx guys

[03:06] <Xliff> yw! :)

[03:08] <Doc_Holliwood> yeah. was fighting with git for two hours

[03:09] <Doc_Holliwood> then i realized if i just do it the other way around the problem goes away

[03:15] *** titsuki joined
[03:33] *** softmoth left
[03:51] <Doc_Holliwood> SO quote of the day (after advised to use strict) "(But) if I insert use strict nothing works anymore"

[03:53] *** kent\n left
[03:54] *** kent\n joined
[04:02] <Juerd> I've been a Perl programmer since 1998, started using strict a few years later. Hated it initially. But even 2 decades later, I still sometimes forget to add "use strict;" and when I add it later it will typically point out some obvious mistake that I made by keeping my program from working at all.

[04:03] <Juerd> Any new programming language should really not implement this feature, but have the equivalent enabled by default.

[04:04] <Juerd> I'm glad Raku/P6 gets it right :)

[04:05] <Juerd> Although... it does seem to support "no strict". I never tried before.

[04:05] <Juerd> Why though

[04:06] <Doc_Holliwood> indeed. just yesterday i wrote a "just ten lines script" and sure enough the regex wasn't "working" and sure enough $sampletext and $sample_text are not the same

[04:06] <Juerd> I will typically use undeclared globals in oneliners, but really it's a bad habit :)

[04:06] <Doc_Holliwood> no script is useful, because it can be block scoped

[04:07] <Juerd> How does the block scope suddenly make it useful? :)

[04:07] <Doc_Holliwood> so you can have sub foo { no strict; dosomethingdirty; }

[04:07] <Doc_Holliwood> but having strict on everywhere else

[04:07] <Juerd> Why would you want to do that dirty thing?

[04:08] <Doc_Holliwood> Because it's Perl and sometimes it makes sense

[04:24] *** molaf left
[04:35] *** cwilson joined
[04:39] <Xliff> m: " part1 # part2 $ part3 \0 part4 ^".chars.say

[04:39] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Non-variable $ must be backslashed␤at <tmp>:1␤------> 3" part1 # part2 7⏏5$ part3 \0 part4 ^".chars.say␤    expecting any of:␤        double quotes␤        prefix␤        statement lis…»

[04:39] <Xliff> m: " part1 # part2 \$ part3 \0 part4 ^".chars.say

[04:39] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «32␤»

[04:40] <pierrot> Does anyone here use rakudobrew ? I've just installed it but I always get "The shell hook required to use rakudobrew in 'env' mode and use the 'shell' command seems not to be installed. Run 'rakudobrew init' for installation instructions."

[04:40] <pierrot> I followed the instructions given by `rakudobrew init` but I still can't get over this error

[04:51] <Xliff> pierrot: Try using 'rakudobrew mode shim'

[04:51] <Xliff> Then see if "perl6 --version" works

[04:51] <pierrot> Xliff : I get the same error

[04:52] <Xliff> What shell are you using?

[04:52] <Xliff> :q!

[04:52] <Xliff> Oops

[04:52] <pierrot> hmm it's the default shell in Debian

[04:53] <pierrot> I think it's something called dash

[04:53] <pierrot> but I'm not sure

[04:53] <Xliff> echo $SHELL

[04:53] <Xliff> Let me know what that says

[04:53] <pierrot> oh no, it's bash. /bin/bash

[04:53] <Xliff> :)

[04:53] <Xliff> OK. Add this to the end of your ~/.profile

[04:53] <Xliff> eval "$(/home/cbwood/Projects/rakudobrew/bin/rakudobrew init Bash)"

[04:54] <Xliff> Then do "source ~/.profile"

[04:54] <Xliff> That eval line should replace any reference to "rakudobrew init".

[04:56] *** cwilson left
[04:56] <pierrot> Xliff : it works now. Thanks!

[04:58] <Xliff> yw!

[05:38] *** sauvin joined
[05:40] *** TreyHarris left
[05:48] *** TreyHarris joined
[06:07] *** ravenousmoose joined
[06:08] *** jmerelo joined
[06:11] *** ravenousmoose left
[06:27] <Geth_> ¦ doc: JJ self-assigned Expand last example in the grammars tutorial to allow comments and blank lines https://github.com/perl6/doc/issues/1759

[06:28] *** p9s``` left
[06:43] *** Xliff left
[06:44] *** pheix joined
[06:44] *** krychu joined
[06:46] *** pheix left
[06:46] <Geth_> ¦ doc: ea16117f9e | (JJ Merelo)++ | doc/Language/grammars.pod6

[06:46] <Geth_> ¦ doc: Deindent while revising #1759

[06:46] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/ea16117f9e

[06:46] <Geth_> ¦ doc: 0e52ddf183 | (JJ Merelo)++ | doc/Type/Range.pod6

[06:46] <Geth_> ¦ doc: Documents int-bounds

[06:46] <synopsebot> Link: https://doc.perl6.org/language/grammars

[06:46] <synopsebot> Link: https://doc.perl6.org/type/Range

[06:46] <Geth_> ¦ doc: 

[06:46] <Geth_> ¦ doc: Actually, the included definition was also wrong. Closes #2239

[06:46] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/0e52ddf183

[06:46] *** kensanata joined
[06:49] *** Altreus left
[06:53] *** krychu left
[06:55] *** jmerelo left
[06:58] *** p9s``` joined
[06:58] *** ravenousmoose joined
[07:02] *** p9s``` left
[07:24] *** kensanata left
[07:33] *** domidumont joined
[07:35] *** p9s``` joined
[07:35] *** wamba joined
[07:38] *** molaf joined
[07:39] *** ChoHag left
[07:39] *** p9s``` left
[07:40] *** ChoHag joined
[07:56] *** sena_kun joined
[08:12] *** p9s``` joined
[08:18] *** p9s``` left
[08:20] *** kensanata joined
[08:22] *** domidumont left
[08:51] *** p9s``` joined
[08:51] *** pmurias joined
[08:56] *** p9s``` left
[09:03] *** ChoHag left
[09:04] *** ChoHag joined
[09:07] *** pecastro joined
[09:10] *** Black_Ribbon left
[09:24] *** chloekek joined
[09:28] *** ravenousmoose left
[09:29] *** p9s``` joined
[09:29] *** ravenousmoose joined
[09:29] *** pmurias left
[09:34] *** p9s``` left
[09:53] *** ravenousmoose left
[09:55] *** ravenousmoose joined
[09:56] *** pmurias joined
[10:01] *** kensanata left
[10:03] *** p9s``` joined
[10:08] *** ChoHag left
[10:10] *** p9s``` left
[10:19] *** Sgeo_ joined
[10:20] *** lgtaube left
[10:23] *** Sgeo left
[10:25] *** domm joined
[10:29] *** wbn left
[10:31] *** wbn joined
[10:39] *** p9s``` joined
[10:44] *** p9s``` left
[10:53] *** ravenousmoose left
[10:54] *** ravenousmoose joined
[11:07] *** reach_satori_ left
[11:11] *** p9s``` joined
[11:16] *** p9s``` left
[11:40] *** MitarashiDango[m joined
[11:49] *** p9s``` joined
[11:56] *** p9s``` left
[12:01] *** spycrab0 joined
[12:10] *** lucasb joined
[12:12] *** Guest93 left
[12:18] <Geth_> ¦ perl6.org: a00f22ef92 | (Naoum Hankache)++ | source/downloads/index.html

[12:18] <Geth_> ¦ perl6.org: Revert "trailing slash not working in download link"

[12:18] <Geth_> ¦ perl6.org: 

[12:18] <Geth_> ¦ perl6.org: This reverts commit 10ed00b6750b3343eef5e06e6624a4fdf874ad4e.

[12:18] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/a00f22ef92

[12:18] <Geth_> ¦ perl6.org: 0ccf9eacac | (Naoum Hankache)++ | source/downloads/index.html

[12:18] <Geth_> ¦ perl6.org: Revert "Update Download location"

[12:18] <Geth_> ¦ perl6.org: 

[12:18] <Geth_> ¦ perl6.org: This reverts commit 7c16e3c2efe798e541e8df3fac6861fa8d6ccbfc.

[12:18] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/0ccf9eacac

[12:18] <Geth_> ¦ perl6.org: 6539a3b317 | (Naoum Hankache)++ | source/downloads/index.html

[12:18] <Geth_> ¦ perl6.org: Revert "Temporary location of latest R*"

[12:18] <Geth_> ¦ perl6.org: 

[12:18] <Geth_> ¦ perl6.org: This reverts commit 71c79446b9252b5c06fa870bd8db7c41649c96bb.

[12:18] <Geth_> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/6539a3b317

[12:21] *** cpan-p6 left
[12:21] *** softmoth joined
[12:22] *** cpan-p6 joined
[12:22] *** cpan-p6 left
[12:22] *** cpan-p6 joined
[12:23] *** p9s``` joined
[12:28] *** p9s``` left
[12:29] <MitarashiDango[m> I seem to be having an issue with META6.json and testing. If I add a META6.json to this directory for example (https://github.com/exercism/perl6/tree/master/exercises/hello-world), the module MUST be in lib for the test to find it, ignoring `use lib` or `-I`.

[12:30] <MitarashiDango[m> I tried a META6.json generated with 6pm, followed by one with just a name.

[12:33] <SmokeMachine> MitarashiDango[m:  let me try it...

[12:36] <timotimo> MitarashiDango[m: just to make sure, you have HelloWorld.pm6 in your provides section of the meta6, yes?

[12:37] <SmokeMachine> MitarashiDango[m: https://www.irccloud.com/pastebin/JUcUINzG/

[12:37] <MitarashiDango[m> I did not, added it but same issue

[12:37] <SmokeMachine> MitarashiDango[m: it's working for me...

[12:38] <MitarashiDango[m> Ah I think I see what I have wrong

[12:38] <SmokeMachine> MitarashiDango[m: 6pm do not add the provides field...

[12:38] <SmokeMachine> MitarashiDango[m: what were you doing wrong?

[12:39] <MitarashiDango[m> I had the provides key set up incorrectly

[12:39] <MitarashiDango[m> Thanks!

[12:42] <timotimo> glad to hear :)

[12:58] *** p9s``` joined
[13:00] *** ravenous_ joined
[13:01] *** Sgeo_ left
[13:02] *** ravenousmoose left
[13:03] *** p9s``` left
[13:04] *** go|dfish left
[13:18] *** Cabanossi left
[13:19] *** chloekek left
[13:22] *** Cabanossi joined
[13:26] *** netrino joined
[13:34] *** p9s``` joined
[13:45] <cpan-p6> New module released to CPAN! Algorithm::LibSVM (0.0.5) by 03TITSUKI

[13:52] *** lgtaube joined
[13:56] *** chloekek joined
[13:58] *** MilkmanDan left
[14:00] *** MilkmanDan joined
[14:21] *** ChoHag joined
[14:29] *** lgtaube left
[14:44] *** lgtaube joined
[14:47] *** Sgeo joined
[14:56] *** wamba left
[15:00] *** Sgeo left
[15:01] *** Sgeo joined
[15:13] *** ab6tract joined
[15:14] <ab6tract> o/ all!

[15:33] *** ChoHag left
[15:36] *** Sgeo_ joined
[15:40] *** Sgeo left
[15:58] *** Kaiepi left
[15:58] *** stux|RC left
[15:58] *** stux|RC joined
[16:11] *** stux|RC-only left
[16:12] *** stux|RC-only joined
[16:17] *** aborazmeh joined
[16:17] *** aborazmeh left
[16:17] *** aborazmeh joined
[16:33] <Doc_Holliwood> there is a problem when using zef and Comma together.

[16:34] <Doc_Holliwood> both like to rewrite META6.json, but they have different opinions on how 

[16:35] <sena_kun> Doc_Holliwood, may be an ignorant question, but how do zef rewrites META6.json?

[16:35] <sena_kun> s/how does/

[16:35] <sena_kun> ugh

[16:36] <sena_kun> disregard that, I suck at grammar, but the question is still there. AFAIK, zef only uses META6.json as a source for data.

[16:36] <timotimo> maybe confused zef and mi6 or so?

[16:36] <sena_kun> other tools, such as mi6, can do that

[16:36] <sena_kun> yes, possibly

[16:38] <sena_kun> in a perfect world, usage of Comma deprecates usage of such tools, so we might as well put on roadmap what's missing. I am aware only about cpan releasing feature being missing, but likely there are more

[16:38] <Doc_Holliwood> it does it on every build

[16:38] <Doc_Holliwood> my bad, mi6 yes

[16:38] <sena_kun> Doc_Holliwood, what does build do?

[16:38] <Doc_Holliwood> it calls self.regenerate-meta-info

[16:39] <sena_kun> sorry, I mean, on high level, what we can teach Comma to do which is missing?

[16:39] <Doc_Holliwood> in which it is using App::Mi6::JSON to encode an new file

[16:40] <Doc_Holliwood> which in turn uses JSON::Pretty

[16:41] <Doc_Holliwood> So, if Comma uses a different serializer ...

[16:41] <sena_kun> well, it does, and it does its own sorting rules

[16:41] <Doc_Holliwood> That's the problem

[16:42] <sena_kun> Doc_Holliwood, as I said, in a perfect world an IDE is your code builder, uploader etc, so what is missing in Comma that you are doing using mi6?

[16:43] <sena_kun> (except known point of cpan uploads)

[16:43] <Doc_Holliwood> exactly

[16:44] <Doc_Holliwood> I'm also not really fond of the editor in Comma. It gets in my way all the time

[16:44] <sena_kun> ah, so nothing else? thanks for your feedback, we'll try to address it.

[16:44] <sena_kun> Doc_Holliwood, gets in your way as in?

[16:44] <Doc_Holliwood> I disabled all "magic" already, but it still keeps indenting shit on its own

[16:45] *** softmoth left
[16:46] <sena_kun> you can disable `Smart indent` in Editor->General->Smart Keys

[16:46] <sena_kun> if it is not disabled already

[16:47] <Doc_Holliwood> it is

[16:47] <sena_kun> :S

[16:48] <sena_kun> a better formatter and configurable code style would be awesome to have, can agree with that

[16:48] <Doc_Holliwood> for instance I type "for\n{" and end what i get is "for\n        {"

[16:49] <Doc_Holliwood> and no, curlies do NOT belong on the same line

[16:49] <Doc_Holliwood> I can prove it

[16:49] <sena_kun> no questions here, our formatter clearly wants some more love

[16:54] *** aborazmeh left
[16:57] *** cinch left
[17:10] *** cinch joined
[17:11] *** Black_Ribbon joined
[17:12] <guifa> “I can prove” 

[17:12] <guifa> Hehe formatting war begin!

[17:13] <guifa> s/formatting/code style

[17:13] <SmokeMachine> Is anyone here not going to the LPW and want to take a look at a gif of how my slides are until now (I need some comments)? (but I couldn't make the slide interval be grater than 1 sec...)

[17:14] * guifa isn’t going 

[17:16] * ab6tract sees smoke signals indicating a possible flame war :)

[17:16] <SmokeMachine> guifa: https://www.icloud.com/iclouddrive/0qqD_fPTrlfpNPHnVcrOOsBow#LPW2019

[17:17] <ab6tract> has anyone ever looked into the Programmer's Introduction to Mathematics? https://pimbook.org

[17:18] <ab6tract> I'm porting the examples to Perl 6, feeling pretty great about how it looks next to the relevant Python

[17:18] <guifa> Heh, I opened the GIF up in Preview and its showing me every single frame 

[17:18] <SmokeMachine> guifa: doesn't it show the animations?

[17:19] <SmokeMachine> guifa: https://www.icloud.com/keynote/0gjNQAIChh7bPt00ZviGCU38Q#LPW2019

[17:19] <guifa> Not in Preview.app , in Chrome it animates nicely but as you said, just pauses for a second.  Curiously VLC doesn’t handle GIF 

[17:20] <SmokeMachine> guifa: this second link is the presentation itself...

[17:20] <guifa> Got it :-)

[17:21] <SmokeMachine> it's not complete yet...

[17:27] *** softmoth joined
[17:28] <guifa> Um, it looks like a fantastic talk

[17:29] <guifa> Normally I’m not a huge animation guy, but it works well to show, e.g., the underlining SQL code behind some far more innoucuous P6 stuff

[17:29] *** go|dfish joined
[17:31] <SmokeMachine> guifa: :) thanks!

[17:44] <Doc_Holliwood> I'm not religious when it comes to curlies

[17:45] <Doc_Holliwood> but this guy kevlin soandso made a very good point for putting them on the next line, at least for signatures

[17:45] <Doc_Holliwood> let me see if i can find it

[17:47] <Doc_Holliwood> here we go https://www.youtube.com/watch?v=ZsHMHukIlJY

[17:47] <Doc_Holliwood> if you have a spare 45 minutes, well worth a watch

[17:54] <Doc_Holliwood> what exactly does `$i := $i + 1`, do?

[17:55] <Doc_Holliwood> i thought it would create a new container

[17:55] <Doc_Holliwood> but apparently it is binding a bare value

[17:57] <Doc_Holliwood> can i make it bind to a new container? like `$i := my $j = $i + 1`

[17:58] <Doc_Holliwood> without the intermediate variable

[18:21] <chloekek> Perhaps $i := my $ = $i + 1 works, then you don't have to give it a name.

[18:21] <chloekek> p6: my $x := Scalar.new(1); $x = 2; say $x;

[18:21] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Cannot make a Scalar object using .new␤  in block <unit> at <tmp> line 1␤␤»

[18:22] <chloekek> p6: my $x := my $ = 1; $x = 2; say $x;

[18:22] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «2␤»

[18:23] <SmokeMachine> p6: my $x := $ = 1; $x = 2; say $x;

[18:23] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «2␤»

[18:23] <chloekek> Is that thread-safe if the block is used in multiple threads?

[18:27] <chloekek> p6: my &f = { my $x := $ = 1; say $x; sleep 2; $x = 2; say $x }; start { f }; start { sleep 1; f }; sleep 4

[18:27] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «1␤1␤2␤2␤»

[18:28] <chloekek> Oy vey it shares the $ variable across calls.

[18:28] <chloekek> p6: my &f = { my $x := my $ = 1; say $x; sleep 2; $x = 2; say $x }; start { f }; start { sleep 1; f }; sleep 4

[18:28] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «1␤1␤2␤2␤»

[18:28] <chloekek> But this one does too!

[18:28] <chloekek> Oh maybe not, my test is crooked.

[18:29] *** evalable6 left
[18:34] *** evalable6 joined
[18:38] *** wamba joined
[18:45] <lizmat> Doc_Holliwood: no you can't afaik

[18:46] <Doc_Holliwood> the `my $ = ` idiom works for me

[18:46] <lizmat> my $x := $ = 1; $x = 2; say $x; # this is binding to the unnamed state variable "$"

[18:46] <evalable6> lizmat, rakudo-moar 5300f3ed0: OUTPUT: «2␤»

[18:46] <Doc_Holliwood> thans chloekek

[18:46] <Doc_Holliwood> i'd be happy for corrections though, https://stackoverflow.com/questions/58249670/scalar-value-being-affected-after-push-or-not-raku/58250703#58250703

[18:46] <lizmat> Doc_Holliwood: why do you need a new container?

[18:46] *** pmurias left
[18:46] <Doc_Holliwood> i'm SOing 

[18:46] <Doc_Holliwood> lizmat

[18:47] <lizmat> I see

[18:50] <Doc_Holliwood> ok, i wonder is there a way to loop "bindingly"?

[18:50] <Doc_Holliwood> so the loop variable is an alias to the "thing", not always the same container

[18:50] *** aborazmeh joined
[18:50] *** aborazmeh left
[18:50] *** aborazmeh joined
[18:53] <lizmat> m: my @a = ^10; for @a { $_++ }; dd @a   # the default $_ is bound that way ?

[18:53] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Array @a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]␤»

[18:53] <Doc_Holliwood> if not, should there be? so that `my $one = 1; my $two = 2; for ($one, $two) -> $n { $n = 99 }; say $one;` would output 99

[18:54] <Doc_Holliwood> true

[18:54] <lizmat> m: my $one = 1; my $two = 2; for ($one, $two) { $_ = 99 }; say $one

[18:54] <Doc_Holliwood> now that's even more surprising

[18:54] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «99␤»

[18:54] <lizmat> m: my $one = 1; my $two = 2; for ($one, $two) <-> $n { $n = 99 }; say $one

[18:54] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «99␤»

[18:55] <Doc_Holliwood> aha!

[18:55] <lizmat> m: my $one = 1; my $two = 2; for ($one, $two) -> $n is rw { $n = 99 }; say $one

[18:55] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «99␤»

[18:55] <lizmat> TIMTOWTDI

[18:55] *** cwilson joined
[18:56] <lizmat> m: my $one = 1; my $two = 2; for ($one, $two) -> $n is raw { $n = 99 }; say $one

[18:56] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «99␤»

[18:56] <lizmat> m: dd { ... }.signature   # note that $_ is an optional "raw" parameter

[18:56] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «:(;; $_? is raw)␤»

[19:03] <Doc_Holliwood> i see, ty

[19:03] <Doc_Holliwood> not gonna put that bit into the post, it is long enough already

[19:05] <lizmat> grokking containers in Perl 6 really makes you appreciate it  :-)

[19:10] *** krychu joined
[19:13] <Doc_Holliwood> so you consider it accurate?

[19:13] <Doc_Holliwood> asking for a friend

[19:15] <Doc_Holliwood> also, is it really "grokking"? i only read the german translation, there the k wasn't doubled

[19:16] <Doc_Holliwood> Heinlein is mostly overrated, but that one was a masterpiece

[19:16] <SmokeMachine> Does any one have any comment about my slides?

[19:16] *** cwilson left
[19:16] <Doc_Holliwood> they are pretty

[19:17] <MasterDuke> i think it's usually "grokking"

[19:18] <Doc_Holliwood> i wonder how many people using the word know its origin

[19:18] <Doc_Holliwood> oh man this weed makes me chatty

[19:18] * Doc_Holliwood apologizes

[19:18] *** aborazmeh left
[19:19] <MasterDuke> it's an odd word, i've definitely seen/heard a bunch of people ask about it the first time they came across it

[19:20] <MasterDuke> but i don't explicitly remember anybody admitting to using it without knowing where it came from, even if they hadn't read SiaSL themselves

[19:20] *** cwilson joined
[19:21] <MasterDuke> but yeah, not a fan of a lot of heinlein, but that wasn't bad

[19:22] <Doc_Holliwood> If I had to pick one for the island, it would be Simmons' Hyperion Cantos

[19:23] <Doc_Holliwood> It's such a genius concept, the whole

[19:23] <Doc_Holliwood> no spoilers, doc

[19:24] <MasterDuke> there's no way to pick just one (fwiw, the hyperion cantos didn't do a whole lot for me), but the compte de monte cristo would be up near the top for me

[19:24] <Doc_Holliwood> how can you not like the shrike?

[19:24] <MasterDuke> i wouldn't say i disliked it

[19:25] <Doc_Holliwood> hello? hang gliding trough a gas giants athmosphere

[19:25] <Doc_Holliwood> genius!

[19:25] <Doc_Holliwood> i'm kidding.

[19:26] <Doc_Holliwood> i only watched the movie of the compte i must admit

[19:26] <Doc_Holliwood> never was into the classics

[19:26] <MasterDuke> but if we're talking one whole related collection, then Asimov's robot/foundation series would also be a contender

[19:27] <MasterDuke> i love it, probably read it ten times or more

[19:27] <Doc_Holliwood> mmh. not a fan. too copious

[19:28] <Doc_Holliwood> Asimov in general. I never got access to the Foundation either

[19:28] *** pmurias joined
[19:28] <MasterDuke> i will admit that for dumas, you can read abridged versions and not miss much of the main storyline at all

[19:29] <Doc_Holliwood> the guy sure had an obsession with his car

[19:29] <Doc_Holliwood> mercedes here, mercedes there

[19:29] <guifa> Who was it that said they really wanted to have subscripts in identifiers? I could really use that and prime marks to make my code look like a formula lol

[19:30] <Doc_Holliwood> Me. I wanted to use that in last weeklys challenge

[19:30] <Doc_Holliwood> the one with the angles

[19:30] <Doc_Holliwood> I think

[19:30] <Doc_Holliwood> s/angles/lines/

[19:31] <guifa> Oh wait Lizmat made a module already

[19:32] <lizmat> I made a module ?

[19:32] <MasterDuke> https://github.com/rakudo/rakudo/issues/1347 and https://github.com/rakudo/rakudo/pull/1348 might be relevant

[19:32] <guifa> ^^ ninja’d you liz :-)

[19:32] <guifa> (in chat at least not in dev)

[19:33] <lizmat> people pointed out to me that it should be possible to have something like: my $H₂O

[19:33] <lizmat> I looked at adding that, but that appears to be much more difficult  :(

[19:34] <lizmat> looks like I need to rewrite NQP's Qregex.ident for that

[19:35] *** tbrowder left
[19:36] *** tbrowder joined
[19:36] *** Itaipu_ left
[19:36] <cpan-p6> New module released to CPAN! LibXML (0.1.1) by 03WARRINGD

[19:37] *** Itaipu joined
[19:43] *** wamba left
[19:46] <guifa> lizmat: probably even better (but more difficult… or maybe not depending on its done?) would be a chemical library/slang

[19:46] <lizmat> what would that be more than allowing subscripts in identifiers ?

[19:49] <lizmat> weekly: https://shintakezou.blogspot.com/2019/10/enumeration-enum-in-perl6.html

[19:49] <notable6> lizmat, Noted! (weekly)

[19:49] *** AlexDaniel left
[19:49] *** AlexDaniel joined
[19:50] *** AlexDaniel left
[19:50] *** AlexDaniel joined
[19:53] <guifa> lizmat: typical me thinking outloud.  I was thinking more in terms of eventually getting something taht would convert H₂0 into a Chemical object.  From what I’ve seen folks do with the inline SQL it seems fairly easy to make up your own rules

[19:53] <guifa> which of course wouldn’t actually do anything for the situation of just wanting it in an identifier lol

[19:54] <lizmat> it would be nice if you could create a 'class H₂0 { }'

[19:54] <timotimo> why do you spell it with a 0?

[19:54] <guifa> O is ironically next to 0 

[19:54] <timotimo> m: class H₂O { }

[19:54] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> 3class H7⏏5₂O { }␤    expecting any of:␤        generic role␤»

[19:55] <timotimo> m: my \H₂O = class { }

[19:55] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Term definition requires an initializer␤at <tmp>:1␤------> 3my \H7⏏5₂O = class { }␤»

[19:55] <lizmat> oops

[19:55] <lizmat>   :-)

[19:55] <timotimo> m: sub term:<H₂O> { class { } }; say H₂O

[19:55] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «(<anon|1>)␤»

[19:55] <timotimo> m: sub term:<H₂O> { class H2O { } }; say H₂O

[19:55] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «(H2O)␤»

[19:55] <timotimo> m: sub term:<H₂O> { class H2O { method ^name { "H₂O" } }; say H₂O

[19:55] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3 H2O { method ^name { "H₂O" } }; say H₂O7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        …»

[19:56] <timotimo> m: sub term:<H₂O> { class H2O { method ^name { "H₂O" } } }; say H₂O

[19:56] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «(H2O)␤»

[19:56] <timotimo> *shrug*

[19:56] <timotimo> at least a term lets you get this into the current grammar

[19:56] * guifa remembers a story about some Russian theorist he studied in school that studied for years writing a program.  Finally one day they took a trip to type in their programs and try them out.  Poor guy didn’t realize the O and 0 keys were different and….compilation failed never got to see it run

[19:56] <timotimo> oh no :( :(

[19:56] <lizmat> so why do we allow it in a term, but not generally in an identifier ?

[19:57] <timotimo> m: sub postfix:<₂>($a) { }; my \H = 99; say H₂

[19:57] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Nil␤»

[19:57] <timotimo> m: sub postfix:<₂>($a) { $a + 10000 }; my \H = 99; say H₂

[19:57] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «10099␤»

[19:57] <timotimo> something something operators?

[19:57] <SmokeMachine> m: class ::("H₂O") {}; say ::("H₂O")

[19:57] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «(H₂O)␤»

[19:57] <timotimo> heh.

[19:58] <SmokeMachine> m: sub term:<H₂O> { class ::("H₂O") {} }; say H₂O

[19:58] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «(H₂O)␤»

[19:58] <tbrowder> anyone using harp.js for a static website?

[20:02] *** wamba joined
[20:04] *** Itaipu left
[20:05] *** sena_kun left
[20:05] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/10/perl-weekly-challenge-28-file-type-and-digital-clock.html

[20:05] <notable6> lizmat, Noted! (weekly)

[20:05] *** Itaipu joined
[20:16] *** [Sno] joined
[20:19] <guifa> Only problem with extending the definition of a name/identifier: Comma really doesn’t like it :P

[20:19] *** lgtaube left
[20:20] *** sno left
[20:20] <lizmat> then Comma should be made smarter  :-)

[20:20] <lizmat> although this is probably hacked in Comma

[20:20] <lizmat> :-(

[20:21] <guifa> jnthn sena_kun: lizmat’s insulting y’all’s baby’s intelligence

[20:21] <lizmat> guifa: you should probably include timotimo in that  :-)

[20:22] <guifa> timotimo: lizmat’s insulting your baby’s intelligence

[20:22] <guifa> ^_^

[20:24] <guifa> https://imgur.com/ikjB1v8 

[20:25] <guifa> To be fair, it also really doesn’t like custom operators either

[20:25] <guifa> But I can imagine that’s gotta be hard as hell to make it do correctly, because then effectively the only way to syntax highlight correctly is to actually compile

[20:25] <Doc_Holliwood> m: enum Foo < XA XB XC  >; say (XA .. XC).Array[0].map: Foo(*);

[20:25] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Cannot map a Int using 'Foo'␤Did a * (Whatever) get absorbed by a list?␤  in block <unit> at <tmp> line 1␤␤»

[20:26] <Doc_Holliwood> why doesn't that work? this does:

[20:26] <Doc_Holliwood> enum Foo < XA XB XC  >; say (XA .. XC).Array[0].map({ Foo(*) })

[20:26] <evalable6> Doc_Holliwood, rakudo-moar 5300f3ed0: OUTPUT: «((Foo))␤»

[20:26] <lizmat> guifa: that's what I meant with "hacked"

[20:27] <SmokeMachine> pmurias: a gist method would be good as well...

[20:34] *** lgtaube joined
[20:35] <SmokeMachine> pmurias: is there some way to do something like this? https://perl6.github.io/6pad/#1f91334f6a6a11ca3de8cf48d2fd2eb5

[20:39] <pmurias> SmokeMachine: I would have to think about how the promises work

[20:39] <tellable6> 2019-10-03T13:59:53Z #perl6-dev <AlexDaniel> pmurias: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-10-03#l72

[20:39] <tellable6> 2019-10-03T15:33:28Z #perl6 <RaycatWhoDat> pmurias: re: rakudo.js, what is it exactly?

[20:39] <pmurias> SmokeMachine: what do we want for gist?

[20:40] *** ravenous_ left
[20:41] <pmurias> SmokeMachine: but integrating with the js promises should be possible in principle got to think how

[20:42] <SmokeMachine> pmurias: I think promise <-> js-promise would be extremely useful...

[20:46] <SmokeMachine> pmurias: about the gist, I was thinking about something like this... but it seems to not work: https://perl6.github.io/6pad/#df7fd0fcb9df260c3d4d181dc49e1203

[20:52] <Doc_Holliwood> The javascript concept of promises requires a global event loop

[20:56] *** Kaiepi joined
[21:03] *** chloekek left
[21:06] <SmokeMachine> Doc_Holliwood: the js promise seems to be working: https://perl6.github.io/6pad/#abe71efcf3a15c67e04cb28929b63ca8

[21:08] <Doc_Holliwood> what i mean is, when coding with JS promises you don't need to care about race conditions, locks and such because of the event loop.

[21:09] <Doc_Holliwood> only one promise can execute at any given time. 

[21:09] <Doc_Holliwood> that's not neccessarily the case in Perl6

[21:17] *** Alchemy joined
[21:17] <SmokeMachine> pmurias: It seems to be working: https://perl6.github.io/6pad/#1a49bd2a3e65de21319f177512ec8eac

[21:21] <SmokeMachine> pmurias: but not working with await... https://perl6.github.io/6pad/#e0eb11a8eb435c16ca4afe153464a218

[21:21] <SmokeMachine> Doc_Holliwood: ^^

[21:22] <pmurias> SmokeMachine: 6pad currently doesn't have Promises working correctly

[21:22] <pmurias> SmokeMachine: I need to fix my 6pad working code an upload a version that has them enabled

[21:22] <SmokeMachine> pmurias: it's working if not using await...

[21:24] <pmurias> Doc_Holliwood: in rakudo.js we don't have real threads because JavaScript doesn't have those

[21:24] <SmokeMachine> pmurias: so, will await work with the new code?

[21:24] *** softmoth left
[21:25] *** ab6tract left
[21:25] <SmokeMachine> pmurias: will DBIish, DB::Pg, etc work on rakudo-js?

[21:25] <SmokeMachine> pmurias: and have you decided how to use JS libs?

[21:28] <pmurias> SmokeMachine: I will need to hook that up explicitly

[21:28] *** wamba left
[21:28] *** daemon left
[21:28] <pmurias> SmokeMachine: in node.js land 'use chalk:from<node.js>' works

[21:28] <pmurias> didn't get it working with parcel yet

[21:29] *** wamba joined
[21:29] <SmokeMachine> but where should it be installed?

[21:29] *** Alchemy is now known as daemon

[21:29] <SmokeMachine> (it would be cool see Red working on the browser...)

[21:29] *** daemon is now known as Guest39076

[21:30] <pmurias> SmokeMachine: https://www.npmjs.com/package/rakudo#using-a-nodejs-module

[21:30] *** Guest39076 left
[21:30] *** Guest39076 joined
[21:30] <pmurias> SmokeMachine: the current scheme is that you put them wherever you want but you have to add a use lib 

[21:31] <SmokeMachine> is that the path for the package.json or for the node_modules?

[21:31] *** Guest39076 is now known as daemon

[21:33] <pmurias> SmokeMachine: node_modules

[21:34] <pmurias> SmokeMachine: If you want anything added to the README I'll be helpfull for suggestions

[21:38] *** wamba left
[21:38] *** netrino left
[21:39] *** wamba joined
[21:45] <Doc_Holliwood> m: enum Foo < XA XB XC >; say XB.WHAT.HOW.isa(Per6::Metamodel::EnumHOW);

[21:45] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Could not find symbol '&EnumHOW'␤  in block <unit> at <tmp> line 1␤␤»

[21:45] <Doc_Holliwood> ???

[21:45] <Doc_Holliwood> m: enum Foo < XA XB XC >; say XB.WHAT.HOW.isa(Perl6::Metamodel::EnumHOW);

[21:45] <camelia> rakudo-moar 5300f3ed0: OUTPUT: «Could not find symbol '&EnumHOW'␤  in block <unit> at <tmp> line 1␤␤»

[21:45] *** wamba left
[21:47] *** wamba joined
[21:50] <SmokeMachine> pmurias: I'll take a look!

[21:50] <SmokeMachine> pmurias: are there people writing perl6 modules to run on the browser?

[21:52] <pmurias> SmokeMachine: I'm not aware of anyone using rakudo.js yet much

[21:52] <pmurias> timotimo++ used it in an advent post

[21:52] <SmokeMachine> pmurias: so, is the MemoizedDOM the first one?

[21:53] <pmurias> I would assume so

[21:54] <SmokeMachine> pmurias: how do I use/install perl6 modules to use with rakudo-js? I mean, if I want to install MemoizedDOM to use with rakudo-js?

[21:58] <SmokeMachine> (im trying to read the MemoizedDOM examples to remember it...)

[22:13] <pmurias> SmokeMachine: I'll add that to the README

[22:14] <pmurias> SmokeMachine: it wasn't possible with 6pad but with parcel-plugin-nqp and the .rakudorc config file (to add the -Ilib)

[22:23] *** pmurias left
[22:24] *** pmurias joined
[22:33] *** ChoHag joined
[22:46] <Doc_Holliwood> The joy, when you delete 7 lines and 2 variable declarations with a single line

[22:47] <Doc_Holliwood> and replace

[22:55] *** reach_satori joined
[23:00] *** pmurias left
[23:02] *** pmurias joined
[23:34] *** pecastro left
[23:43] <cpan-p6> New module released to CPAN! LibXSLT (0.0.2) by 03WARRINGD

[23:44] *** pmurias left
[23:55] *** reach_satori left
[23:56] *** softmoth joined
[23:58] *** reach_satori joined
