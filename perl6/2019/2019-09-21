[00:12] *** Coleoid_north left
[00:16] *** pecastro left
[00:37] *** Doc_Holliwood left
[00:43] *** wildtrees left
[00:44] *** wildtrees joined
[00:50] *** wildtrees left
[00:54] *** lucasb left
[00:56] *** reach_satori joined
[01:05] *** hythm joined
[01:15] *** mowcat joined
[01:19] *** k0Le left
[01:33] *** molaf left
[01:34] *** k0Le joined
[01:35] *** mowcat left
[01:35] *** mowcat joined
[01:46] *** molaf joined
[01:52] *** stu002 left
[01:58] <gdonald> my spiral thingy: https://gist.github.com/gdonald/28750b8e6a2551d933ac83a2b2df20b8

[02:13] *** Cabanossi left
[02:19] *** Cabanossi joined
[02:22] *** mowcat left
[02:25] *** reach_satori left
[02:28] *** reach_satori joined
[02:32] *** reach_satori left
[02:32] *** ravenousmoose joined
[02:40] *** reach_satori joined
[02:41] *** xelxebar left
[02:42] *** xelxebar joined
[02:50] *** reach_satori left
[02:52] *** reach_satori joined
[02:58] *** netrino left
[03:04] *** MasterDuke left
[03:12] *** reach_satori left
[03:35] *** ravenousmoose left
[04:01] *** reach_satori joined
[04:20] <discord6> <RaycatWhoDat> Dumb question: What could be considered a low-level module for Perl 6 programmers if NQP isn't it?

[04:22] *** dogbert17 left
[04:22] *** aindilis joined
[04:22] <Xliff> RaycayWhoDat: What do you mean? 

[04:22] <Xliff> NQP is definitely "low-level".

[04:23] <discord6> <RaycatWhoDat> NQP says you shouldn't rely on it.

[04:23] <Xliff> Perl6 is based on NQP

[04:23] <Xliff> Well... you shouldn't!

[04:23] <Xliff> .... until you have to!

[04:23] <discord6> <RaycatWhoDat> o

[04:23] <Xliff> And then you need to keep track of what you use in case things change.

[04:24] <Xliff> What are you trying to do?

[04:24] <discord6> <RaycatWhoDat> I was under the impression that it was black magic that should never be touched

[04:24] <discord6> <RaycatWhoDat> unless you're a core dev

[04:24] <Xliff> Yes. Tell that to the necromancers.

[04:24] <Xliff> They know who they are.

[04:24] <discord6> <RaycatWhoDat> timotimo <_<

[04:24] <Xliff> The fact that the word "necromancer" exists should tell you everything.

[04:25] <Xliff> Hence my admonishment: '... keep track of when things change!'

[04:25] <Xliff> NQP is stable enough, as it has to track the MoarVM opcodes.

[04:25] <discord6> <Rogue> Damian used a bit of it to add for/else

[04:25] <Xliff> https://github.com/perl6/nqp/blob/master/docs/ops.markdown

[04:26] <Xliff> Those are fairly stable up and until MoarVM is updated or changed.

[04:27] <discord6> <RaycatWhoDat> Ah. Got it.

[04:27] <Xliff> Last time that was updated was August 4th.

[04:28] <Xliff> You don't need to be a core dev to use NQP. It's there to be used!

[04:28] <Xliff> Just no one wants to support it with relation to Perl6. If you have issues, you are better off taking them to #nqp

[04:29] <Xliff> Be prepared to stand firm and ask the right questions, and you should be fine.

[04:29] <discord6> <RaycatWhoDat> Understood.

[04:29] <Xliff> So....

[04:30] <Xliff> What are you trying to do?! :>

[04:30] <Xliff> I was about to go to bed, but I can stay up for something juicy! :D

[04:30] <discord6> <RaycatWhoDat> The honest answer? Trying to reason myself out of using Perl 6.

[04:31] <Xliff> *gasp*

[04:31] <discord6> <RaycatWhoDat> D:

[04:31] <Xliff> Whyyyy?!

[04:31] <discord6> <RaycatWhoDat> I know, I know.

[04:31] <Xliff> The "honest answer" wasn't much of one. :q

[04:32] <discord6> <RaycatWhoDat> I feel like I have too many daggone options and I am not very good at convincing other people to use "less-popular" languages.

[04:32] <Xliff> Ah. Yes. That's an occupational hazard when using a Perl.

[04:32] <Xliff> Again. What. Are. You. Trying. To. Do?

[04:33] <discord6> <RaycatWhoDat> Personally, make a game with Perl 6. Professionally, try to replace a Java microservice with Perl 6.

[04:34] <Xliff> RaycatWhoDat: Are you staring down a rabbit hole and looking for a place to grab on to?

[04:34] <Xliff> Aahhh....

[04:34] <Xliff> Yes. Well...

[04:34] <Xliff> timotimo is the person to talk with there.

[04:34] <Xliff> And... well... me.

[04:35] <Xliff> With respect to microservices, the default answer is always "use CRO"

[04:36] <Xliff> TBH, these days, when you say "microservice" everyone screams "Go!"

[04:36] <discord6> <RaycatWhoDat> Yeah. That's my competition.

[04:36] <Xliff> Depends on what you are trying to do. I still have yet to figure out Go's popularity.

[04:36] <Xliff> Yeah, well the only way you beat Go with Perl6 is flexibility.

[04:36] <discord6> <Rogue> I don't think Go ever got much enduring popularity

[04:36] <Xliff> You will NOT beat it, performancewise.

[04:37] <discord6> <Rogue> it just had its moment of being the topic of conversation, and then the hype died down with few people actually using the language

[04:37] <discord6> <RaycatWhoDat> Really? I thought people were still big on Go.

[04:38] <discord6> <Rogue> Honestly it's been ages since last I saw a discussion about Go on my normal programming forums

[04:39] <discord6> <Rogue> i.e. the Programming discord server and /r/perl6 (which wouldn't have anything about Go anyway)

[04:39] <discord6> <Rogue> lol

[04:39] <discord6> <RaycatWhoDat> wait a second

[04:39] <Xliff> Take the example Go program on the bottom of this page... https://blog.golang.org/examples

[04:39] <discord6> <RaycatWhoDat> I feel like I've seen you before, now that you mention that Discord

[04:40] <discord6> <Rogue> Please tell me it wasn't in a political discussion lol.

[04:40] <discord6> <RaycatWhoDat> Were you like the one guy who was big on Perl 6 over there when I came through

[04:40] <discord6> <Rogue> Oh yeah yeah

[04:40] <Xliff> For all that syntax, I bet a Perl6 solution would be cleaner and easier to read.

[04:40] <discord6> <Rogue> those were the days, evangelizing as hard as I could go

[04:40] <discord6> <RaycatWhoDat> I agree with you, Xliff

[04:42] <discord6> <RaycatWhoDat> Honestly, I need to stop waffling on these things and just experiment. This "Ready-aim-aim-aim" disease is killing my potential.

[04:42] <discord6> <RaycatWhoDat> I should just make the thing and let the code speak

[04:44] *** hythm left
[04:44] *** holyghost left
[04:44] *** holyghost joined
[04:44] <Xliff> RaycatWhoDat: Hear, hear!

[04:48] <Xliff> https://gist.github.com/Xliff/9fb038df877e72df52196bc6bf8be7e8

[04:52] *** reach_satori left
[04:54] <discord6> <RaycatWhoDat> Bless, Xliff

[04:54] <discord6> <RaycatWhoDat> This is a good starting point to build a case

[04:54] <Xliff> :>

[04:56] <Xliff> Also, the .map calls are there to help new users follow what's going on. They are NOT necessary.

[04:56] <Xliff> .str should handle the conversion.

[04:56] <Xliff> .Str or .gist -- I think its the latter.

[04:58] <Xliff> Ah. It's .gist!

[04:59] <discord6> <RaycatWhoDat> Interesting.

[05:03] *** jaldhar joined
[05:09] <Xliff> And with that... I depart for the soft cushions of me bed.

[05:09] <discord6> <Rogue> sounds fantastic

[05:10] <Xliff> I'm still wondering about the nqp....

[05:10] <Xliff> RaycatWhoDat: Do I need to bring out the feathers and whipped cream?

[05:14] <discord6> <RaycatWhoDat> wait, what

[05:15] <Xliff> Why. NQP?

[05:15] <Xliff> I'm still wondering what made you think in that direction.

[05:16] <Xliff> Coz... once you start dealing with NQP, there's no going back.

[05:16] <Xliff> I'm thinking about taking the plunge. So I'm curious as to why you thought of it.

[05:16] <discord6> <RaycatWhoDat> Oh, I wanted to see if NQP was within a stone's throw of D and C++. shrug Nothing concreate

[05:16] <discord6> <RaycatWhoDat> concrete*

[05:17] <Xliff> Hmmm....

[05:17] <Xliff> More like a boulder.

[05:17] <Xliff> It's actually closer to Lisp

[05:17] *** sauvin joined
[05:17] <discord6> <RaycatWhoDat> I had a dream of a pure-Perl-ish ecosystem using NQP, Perl 5, and Perl 6.

[05:17] <discord6> <RaycatWhoDat> But, alas.

[05:18] <discord6> <RaycatWhoDat> "ecosystem" in this case, meaning having 99% of my use cases covered

[05:18] <discord6> <RaycatWhoDat> Which is a bit like asking for the moon, I think

[05:20] *** wamba joined
[05:21] <Xliff> Could work at it. 

[05:22] <Xliff> You should start by listing your use cases!

[05:24] <discord6> <RaycatWhoDat> Game development, shell and automation scripting, string transformations and a bit of analysis.

[05:24] <discord6> <RaycatWhoDat> Web development, professionally. But I know JavaScript so I wouldn't use Perl.

[05:25] <Xliff> Can do all that, although game development is best left to C, and managed by NativeCall

[05:25] <Xliff> Web Dev, although you need to be a little specific. Web Dev requires JS. Can't get around it. 

[05:25] <discord6> <RaycatWhoDat> Game development in C sounds... rough.

[05:25] <Xliff> Still, on the server-side, Perl6 can handle a bit.

[05:26] <Xliff> C/C++ -- NativeCall should be able to deal with it.

[05:26] <Xliff> Most engines are written in one or the other.

[05:26] <Xliff> And C# can be made to speak C for NativeCall purposes.

[05:27] <Xliff> Anything done in Java can be done in Perl6 if you don't mind the performance hit.

[05:29] <discord6> <RaycatWhoDat> Mm.

[05:30] <Xliff> Wow! Quantum Break was done in D? Who knew?

[05:30] <discord6> <RaycatWhoDat> Okay. This is a lot to digest but it's a good start.

[05:30] <discord6> <RaycatWhoDat> Yeah.

[05:30] <discord6> <RaycatWhoDat> I think Contact has bits in D too.

[05:30] <Xliff> Contact or Control?

[05:30] <discord6> <RaycatWhoDat> The latter.

[05:30] <discord6> <RaycatWhoDat> Thanks.

[05:30] <Elronnd> @RaycatWhoDat I'm currently running my game engine in d, but with perl6 for scripting

[05:30] <Xliff> :)

[05:30] <Xliff> Currently playing both.

[05:30] <discord6> <RaycatWhoDat> how

[05:31] <Xliff> Elronnd++ !!

[05:31] <Xliff> Elronnd: Lemme guess... NativeCall?

[05:31] <Elronnd> actually, the perl6 scripting part isn't done yet--using a scheme thing atm--but will be done soon.  And is oss so can be integrated

[05:31] <Elronnd> Xliff: yah.  NativeCall + embedding moarvm

[05:31] <Xliff> Ooh!

[05:32] <Xliff> Code anywhere?

[05:32] <discord6> <RaycatWhoDat> I have to look into this NativeCall stuff

[05:32] <Elronnd> perl6 is probably fast enough for basic or 2-d stuff, but I wouldn't use it for anything big or 3-d

[05:32] <Elronnd> github.com/elronnd/libport

[05:32] <Xliff> Elronnd: I've got COGL running with a Perl6 fronting.

[05:32] <discord6> <RaycatWhoDat> On the flip side, oh boy, back up to five langauges

[05:32] <Xliff> Still early days, but it does workl.

[05:32] <discord6> <RaycatWhoDat> languages*

[05:32] <Elronnd> I actually have a couple of questions about nativecall, if anyone is knowledgeable about it

[05:33] <Xliff> Elronnd: I can take a shot. What's up?

[05:33] <Elronnd> so basically

[05:33] <discord6> <RaycatWhoDat> Aight, thanks for the info, I'm outta here

[05:33] <Xliff> 'nn Raycat

[05:33] <discord6> <RaycatWhoDat> Go to sleep Xliff

[05:33] <Elronnd> I have a class declared as repr('CStruct').  It has some member variables--say, an int64.  The problem is that when I try to instantiate that class from the p6 side, it makes it a *pointer* to int64

[05:33] <Elronnd> night raycat

[05:33] <Xliff> LOL

[05:33] *** jaldhar left
[05:34] *** jaldhar joined
[05:34] <Xliff> Elronnd: You sure its a pointer?

[05:34] <Elronnd> well

[05:34] <Xliff> Is that online, somewhere?

[05:35] <Elronnd> when I pass it from p6 to c, it looks like a pointer from the c side.  I can't actually demo any code right now because I'm in the middle of a system migration

[05:35] <Xliff> So you have to deref on the C side to get the value set in P6?

[05:35] <Elronnd> backing up $HOME and it's about halfway done, so I don't want to disturb it.  Plus, I wiped out my p6 install which was in $HOME

[05:35] <Elronnd> yes

[05:35] <Xliff> -weird-

[05:36] <Xliff> I have not had that problem.

[05:36] <Xliff> At least, not yet. 

[05:36] <Xliff> Which version of Perl6?

[05:36] <Elronnd> so if I have on p6 side class foo is repr('CStruct') { has int64 $.whatever; } foo.new(whatever => 5), then on the c side I have to say struct foo { int64_t *whatever; }

[05:36] <Elronnd> latest git as of a couple weeks ago

[05:36] <Xliff> See.... int64 is a concrete type, so it should NOT do that.

[05:37] <Elronnd> ah, worth mentioning

[05:37] <Xliff> Sounds like your 'CStruct' is acting like the pointer. Not the int64

[05:37] <Elronnd> this is returning an instance of foo from a perl6 callback

[05:37] <Elronnd> which may change the calculus

[05:37] *** Cirno-ne-baka joined
[05:38] <Xliff> Yeah. I would look at how that callback is returning foo.

[05:38] <Cirno-ne-baka> Ohayo

[05:39] <Xliff> Cirno-ne-baka: Ohayo!

[05:39] <Elronnd> ohai Cirno-ne-baka

[05:39] <Elronnd> Xliff: will you be around in a couple of hours?  It's probably better if I get my thing figured out so I can give you actual code to chew on

[05:39] <Xliff> Will probably be dosing, but I will be more than happy to help out when I wake back up.

[05:40] <Elronnd> aight, thanks!

[05:40] <Xliff> Elronnd: Have you seen my github page?

[05:40] <Xliff> http://github.com/Xliff

[05:40] <Cirno-ne-baka> example from perl6intro `class bar-chart {  has Int @.bar-values;  method plot {    say @.bar-values;  }}class line-chart {  has Int @.line-values;  method plot {    say @.line-values;  }}class combo-chart is bar-chart is line-chart {  method plot {    say @.bar-values;    say @.line-values;  }}my $actual-sales = bar-chart.new(bar-values =>

[05:40] <Cirno-ne-baka> [10,9,11,8,7,10]);my $forecast-sales = line-chart.new(line-values => [9,8,10,7,6,9]);my $actual-vs-forecast = combo-chart.new(bar-values => [10,9,11,8,7,10],                                         line-values => [9,8,10,7,6,9]);say "Actual sales:";$actual-sales.plot;say "Forecast sales:";$forecast-sales.plot;say "Actual vs

[05:40] <Cirno-ne-baka> Forecast:";$actual-vs-forecast.plot;`

[05:40] <Elronnd> you made the gtk stuff, right?

[05:40] <Xliff> Feel free to peruse my project code. Maybe something there will help. 

[05:40] <Xliff> Much of it deals extensively with NativeCall

[05:40] <Elronnd> will take a look

[05:41] <Cirno-ne-baka> give me output `Actual sales:[10 9 11 8 7 10]Forecast sales:[9 8 10 7 6 9]Actual vs Forecast:[10 9 11 8 7 10][]`

[05:41] <Xliff> Yes. I made the "gtk stuff" LOL

[05:41] <Elronnd> :)

[05:41] <Xliff> OK. Off to bed. o7

[05:41] <Elronnd> cya

[05:41] <Cirno-ne-baka> but must be like this `Actual sales:[10 9 11 8 7 10]Forecast sales:[9 8 10 7 6 9]Actual vs Forecast:[10 9 11 8 7 10][9 8 10 7 6 9]`

[05:44] <Cirno-ne-baka> what i`m going wrong?

[05:46] *** sno left
[06:01] <Cirno-ne-baka> but with `role` work exactly

[06:07] *** jaldhar left
[06:08] *** jaldhar joined
[06:13] *** ambs left
[06:14] <Kaiepi> "... that's pretty cool, i'll look into perl. ..."

[06:14] <Kaiepi> this was just from mentioning the async support perl 6 has alone

[06:15] *** ambs joined
[06:26] *** sno joined
[06:26] *** Voldenet left
[06:31] *** Voldenet joined
[06:31] *** Voldenet left
[06:31] *** Voldenet joined
[06:37] *** molaf left
[06:56] *** MasterDuke joined
[07:00] *** k0Le left
[07:01] *** k0Le joined
[07:07] *** jaldhar left
[07:26] *** Doc_Holliwood joined
[07:51] <Geth_> ¦ problem-solving/path-to-raku: e0185a4a78 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[07:51] <Geth_> ¦ problem-solving/path-to-raku: Settle on .raku / .rakumod / .rakudoc / .rakutest

[07:51] <Geth_> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/e0185a4a78

[07:54] *** domidumont joined
[07:56] *** domidumont left
[07:57] *** domidumont joined
[07:59] *** _jrjsmrtn left
[07:59] <Geth_> ¦ problem-solving/path-to-raku: 9bcb834ec9 | (Elizabeth Mattijsen)++ | solutions/language/SWOT-TO-RAKU.md

[07:59] <Geth_> ¦ problem-solving/path-to-raku: Added "no longer linked to *good* reputation of Perl as weakness

[07:59] <Geth_> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/9bcb834ec9

[08:05] *** sno left
[08:05] *** __jrjsmrtn__ joined
[08:14] *** domidumont left
[08:21] *** sno joined
[08:21] *** Cirno-ne-baka left
[08:28] *** domidumont joined
[08:35] *** domidumont left
[09:18] *** jmerelo joined
[09:21] *** sena_kun joined
[09:30] *** wamba left
[09:33] <sena_kun> m: msub f { say 42 }; &f.wrap(sub () { callsame; say "Before second call"; callsame; }); f

[09:33] <camelia> rakudo-moar 17d036ad4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    f used at line 1␤    msub used at line 1. Did you mean 'msb'?␤␤»

[09:34] <sena_kun> m: sub f { say 42 }; &f.wrap(sub () { callsame; say "Before second call"; callsame; }); f

[09:34] <camelia> rakudo-moar 17d036ad4: OUTPUT: «42␤Before second call␤»

[09:34] <sena_kun> bisectable6, sub f { say 42 }; &f.wrap(sub () { callsame; say "Before second call"; callsame; }); f;

[09:34] <bisectable6> sena_kun, On both starting points (old=2015.12 new=565b2ac) the exit code is 0 and the output is identical as well

[09:34] <bisectable6> sena_kun, Output on both points: «42␤Before second call␤»

[09:34] <sena_kun> am I missing anything?

[09:40] <timotimo> hm, is there something like "nextcandidate" for "same"?

[09:41] <timotimo> it's possible that callsame clears the piece that saves away what's going to get invoked

[09:41] * sena_kun has no idea

[09:41] <timotimo> with the takedispatcher op

[09:41] <sena_kun> is that a bug or?

[09:47] *** wamba joined
[09:48] *** Black_Ribbon left
[09:50] *** domidumont joined
[09:50] <timotimo> m: sub f { say 42 }; &f.wrap(sub () { {*}; say "before 2nd"; {*} }); f

[09:50] <camelia> rakudo-moar 17d036ad4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤{*} may only appear in proto␤at <tmp>:1␤------> 3sub f { say 42 }; &f.wrap(sub () { {*}7⏏5; say "before 2nd"; {*} }); f␤    expecting any of:␤        horizontal whitespace␤        term␤»

[09:50] <timotimo> ah

[10:00] *** Doc_Holliwood left
[10:06] *** Ven`` joined
[10:20] *** Doc_Holliwood joined
[10:36] <Geth_> ¦ problem-solving/path-to-raku: 69786a25f2 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[10:36] <Geth_> ¦ problem-solving/path-to-raku: Fix typo

[10:36] <Geth_> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/69786a25f2

[10:39] *** dogbert17 joined
[10:47] *** lucasb joined
[10:50] *** isBEKaml joined
[10:59] *** Doc_Holliwood left
[11:01] *** wamba left
[11:03] *** Doc_Holliwood joined
[11:10] <Geth_> ¦ doc: 6c71f0e958 | (JJ Merelo)++ | 7 files

[11:10] <Geth_> ¦ doc: Fixes #3024 and adjusts regex

[11:10] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/6c71f0e958

[11:10] <Geth_> ¦ doc: 1589642efb | (JJ Merelo)++ | doc/Language/testing.pod6

[11:10] <Geth_> ¦ doc: Eliminates meta-ok, which wasn't there anyway

[11:10] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/1589642efb

[11:10] <synopsebot> Link: https://doc.perl6.org/language/testing

[11:19] *** jmerelo left
[11:21] <SmokeMachine> Elronnd: are you usin HAS instead of has?

[11:23] <timotimo> i think the problem has more to do with "typedef struct { int64_t number } the_struct; the_struct *foo" being indistinguishable from "typedef struct { int64_t *number; }; the_struct; the_struct foo;"

[11:23] *** Cirno-ne-baka joined
[11:31] *** wamba joined
[11:34] *** robertle left
[11:38] *** robertle joined
[11:53] <SmokeMachine> One question: would that be possible to make a module that introduce a slang that makes every block that comes after a term mean “,” and the block? I mean: `func 42 {;}` mean `func 42, {;}` and `func 13 -> $bla {;}` mean `func 13, -> $bla {;}`

[11:54] <SmokeMachine> Is it possible? Would it break anything?

[11:54] <timotimo> would surely be possible to make, not saying how hard it'll be :)

[11:57] <SmokeMachine> timotimo: I think I would be cool... what do you think?

[11:58] <timotimo> well, it'll be a valid use of TTIAR, which is usually one of our better ways to figure out that someone has made a mistake

[11:58] <timotimo> like forgetting a semicolon after a sub call when followed by a block

[12:03] <SmokeMachine> timotimo: you mean it would make worse job finding errors?

[12:04] <timotimo> only in some circumstances

[12:14] *** mj41cz joined
[12:26] *** mj41cz left
[12:47] *** Guest69469 left
[12:49] *** zakharyas joined
[13:05] *** zakharyas left
[13:19] *** Guest69469 joined
[13:40] *** domidumont left
[13:47] *** sena_kun left
[14:07] *** sno left
[14:07] *** k0Le left
[14:08] *** Doc_Holliwood left
[14:10] *** sno joined
[14:11] *** MilkmanDan left
[14:12] *** domidumont joined
[14:12] *** MilkmanDan joined
[14:13] *** domidumont left
[14:15] *** Kaiepi left
[14:17] *** Kaiepi joined
[14:30] <Xliff> .

[14:36] <Xliff> How would you invoke a function pointer from C?

[14:39] *** isBEKaml left
[14:40] *** sena_kun joined
[14:44] *** cpan-p6 left
[14:45] *** cpan-p6 joined
[14:45] *** cpan-p6 left
[14:45] *** cpan-p6 joined
[14:52] *** Doc_Holliwood joined
[15:10] *** mowcat joined
[15:10] *** Ven`` left
[15:21] *** Doc_Holliwood left
[15:21] *** Doc_Holliwood joined
[15:25] *** Maylay joined
[15:31] *** domidumont joined
[15:32] *** navalned joined
[15:33] *** navalned left
[15:46] *** sno left
[16:13] *** daemon is now known as Cortana

[16:25] *** wildtrees joined
[16:30] *** jmerelo joined
[16:35] *** discord6 left
[16:35] *** discord6 joined
[16:35] *** discord6 left
[16:35] *** discord6 joined
[16:38] *** jmerelo left
[17:09] *** Cortana is now known as daemon

[17:11] *** HoboWithAShotgun joined
[17:11] *** dogbert11 joined
[17:12] *** mowotter joined
[17:13] *** pirateFinn_ joined
[17:13] *** eveith joined
[17:13] *** nightfro` joined
[17:13] *** pierrot_ joined
[17:13] *** perryprog_ joined
[17:15] *** broquain1 joined
[17:15] *** tyilanmenyn joined
[17:15] *** bawse_ joined
[17:15] *** KotH_ joined
[17:15] *** dogbert joined
[17:15] *** a3r0 joined
[17:16] *** sca joined
[17:16] *** dogbert is now known as Guest23744

[17:16] *** jdv79_ joined
[17:16] *** klapperl joined
[17:16] *** mst_ joined
[17:16] *** Maylay_ joined
[17:18] *** moritz_ joined
[17:18] *** mst left
[17:19] *** mst_ is now known as mst

[17:19] *** m0ltar_ joined
[17:20] *** Maylay left
[17:20] *** Doc_Holliwood left
[17:20] *** mowcat left
[17:20] *** Guest69469 left
[17:20] *** dogbert17 left
[17:20] *** rindolf left
[17:20] *** nightfrog left
[17:20] *** b2gills left
[17:20] *** bawse left
[17:20] *** pierrot left
[17:20] *** webstrand left
[17:20] *** krunen left
[17:20] *** moritz left
[17:20] *** TreyHarris left
[17:20] *** samebchase left
[17:20] *** Elronnd left
[17:20] *** Technaton left
[17:20] *** klapperl_ left
[17:20] *** m0ltar left
[17:20] *** karupanerura left
[17:20] *** KotH left
[17:20] *** perryprog left
[17:20] *** oftl left
[17:20] *** shadowpaste left
[17:20] *** pirateFinn left
[17:20] *** jdv79 left
[17:20] *** broquaint left
[17:20] *** sca_ left
[17:20] *** nightfro` is now known as nightfrog

[17:20] *** pirateFinn_ is now known as pirateFinn

[17:21] *** karupanerura joined
[17:21] *** mowotter left
[17:23] *** sjn joined
[17:23] *** samebchase joined
[17:23] *** krunen joined
[17:24] *** camelia left
[17:24] *** rindolf joined
[17:24] *** TreyHarris joined
[17:25] *** b2gills joined
[17:25] *** shadowpaste joined
[17:26] *** oftl joined
[17:28] *** camelia joined
[17:28] *** aborazmeh joined
[17:28] *** aborazmeh left
[17:28] *** aborazmeh joined
[17:29] *** ChanServ sets mode: +v camelia

[17:37] *** Elronnd joined
[17:44] *** HoboWithAShotgun left
[17:45] *** Leningrad joined
[17:46] *** Leningrad is now known as StPetersburgh

[17:51] *** kybr joined
[17:56] *** sno joined
[17:57] *** tyilanmenyn is now known as tyil

[18:00] *** ravenousmoose joined
[18:07] *** Cirno-ne-baka left
[18:13] *** KotH_ is now known as KotH

[18:15] *** Itaipu left
[18:20] *** ravenousmoose left
[18:23] *** sno left
[18:23] *** pierrot_ is now known as pierrot

[18:24] *** pierrot is now known as Guest31213

[18:26] *** mj41cz joined
[18:26] *** pecastro joined
[18:34] *** Black_Ribbon joined
[18:44] *** aborazmeh left
[18:52] *** domidumont left
[19:14] <SmokeMachine> m: my Supplier $supplier .= new; { my $*a = 42; $supplier.Supply.tap: { say $*a } }; { my $*a = 13; $supplier.emit: $_ for ^10 } # Is that expected? I would expect that to print 42...

[19:14] <camelia> rakudo-moar 17d036ad4: OUTPUT: «13␤13␤13␤13␤13␤13␤13␤13␤13␤13␤»

[19:14] <SmokeMachine> why is that printing 13?

[19:16] <sena_kun> it is expected

[19:16] <sena_kun> because scope is dynamic in this case

[19:17] <sena_kun> blocks from taps are executed from `emit` position

[19:17] <SmokeMachine> sena_kun: yes, the `emit` really calls the tab block?

[19:17] <SmokeMachine> s/tab/tap/

[19:20] <sena_kun> SmokeMachine, I did not see the implementation, but it is written that code that calls `emit` pays for execution

[19:20] <sena_kun> SmokeMachine, https://6guts.wordpress.com/2017/11/24/a-unified-and-improved-supply-concurrency-model/ <- read the "Backpressure" part

[19:21] <sena_kun> >The general principle with Supply is that the sender of a message pays the cost of its processing.

[19:21] <SmokeMachine> sena_kun: yeah... that would make sense...

[19:27] *** molaf joined
[19:31] *** sno joined
[19:33] <SmokeMachine> almost there... https://www.irccloud.com/pastebin/7mozd53M/

[19:33] *** rindolf left
[19:35] *** lucasb left
[19:44] *** Itaipu joined
[19:44] *** webstrand joined
[19:48] <Elronnd> timotimo: hmm, I think you are right (re. nativecall)

[19:51] *** sono__ joined
[19:54] *** Black_Ribbon left
[19:57] *** khisanth_ left
[20:03] *** zakharyas joined
[20:09] *** khisanth_ joined
[20:09] *** cpan-p6 left
[20:10] *** cpan-p6 joined
[20:10] *** cpan-p6 left
[20:10] *** cpan-p6 joined
[20:10] *** Sgeo__ joined
[20:11] *** Itaipu left
[20:11] *** robertle left
[20:12] *** Itaipu joined
[20:13] *** Sgeo_ left
[20:14] <Xliff> Elronnd: Yeah. That's what I was trying to get at earlier.

[20:17] <Xliff> timotimo: Does native call handle the ability to invoke a C function pointer?

[20:17] <Xliff> s/handle/have/

[20:17] *** robertle joined
[20:23] <timotimo> yeah

[20:23] <timotimo> i think it does

[20:26] *** vrurg left
[20:32] *** telex left
[20:34] *** telex joined
[20:45] *** Guest31213 is now known as pierrot

[20:45] *** pierrot left
[20:45] *** pierrot joined
[20:46] *** vrurg joined
[20:56] *** aborazmeh joined
[20:56] *** aborazmeh left
[20:56] *** aborazmeh joined
[21:11] *** mj41cz left
[21:25] *** aborazmeh left
[21:28] <Xliff> timotimo: Can you link to a good example?

[21:28] <Xliff> I've been trying to find one with no luck.

[21:32] <timotimo> no :(

[21:33] <SmokeMachine> is there any map-ish List method that accept multiple blocks and uses it as candidates for each run?

[21:34] <Xliff> SmokeMachine: Um... I don't understand what you are thinking, here.

[21:36] <Xliff> SmokeMachine: .dumpmap evaluates based on a condition.

[21:36] <Xliff> So I would think that, run through a given/when in the block, might do what you want.

[21:37] *** sena_kun left
[21:38] <timotimo> i think the question is for a kind of round-robin map maybe?

[21:38] <SmokeMachine> I mean something like: (1, 2, 3, 4, 5, "a", "b",  "c", "d", "e").map: -> Int $a { $a * 2 }, -> Str $a { $a xx 2 }

[21:39] <Xliff> Exactly.

[21:39] <Xliff> (1, 2, 3, 4, 5, "a", "b",  "c", "d", "e").map({ when Int $a { $a * 2 }; when Str { $a xx 2 };}).say

[21:39] <Xliff> m: (1, 2, 3, 4, 5, "a", "b",  "c", "d", "e").map({ when Int $a { $a * 2 }; when Str { $a xx 2 };}).say

[21:39] <camelia> rakudo-moar 17d036ad4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3"a", "b",  "c", "d", "e").map({ when Int7⏏5 $a { $a * 2 }; when Str { $a xx 2 };}).␤    expecting any of:␤        block or pointy block␤        infix␤…»

[21:39] <Xliff> m: (1, 2, 3, 4, 5, "a", "b",  "c", "d", "e").map({ when Int { $a * 2 }; when Str { $a xx 2 };}).say

[21:39] <camelia> rakudo-moar 17d036ad4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3, "b",  "c", "d", "e").map({ when Int { 7⏏5$a * 2 }; when Str { $a xx 2 };}).say␤»

[21:40] <Xliff> m: (1, 2, 3, 4, 5, "a", "b",  "c", "d", "e").map({ when Int { $_ * 2 }; when Str { $_ xx 2 };}).say

[21:40] <camelia> rakudo-moar 17d036ad4: OUTPUT: «(2 4 6 8 10 (a a) (b b) (c c) (d d) (e e))␤»

[21:40] <lizmat> weekly: https://www.youtube.com/channel/UCDkz-__gl3frqLexukpG0DA   # Perl 6 tutorials

[21:40] <notable6> lizmat, Noted! (weekly)

[21:40] <SmokeMachine> yes, makes sense! thank you Xliff!

[21:40] <Xliff> :)

[21:41] *** nepugia joined
[21:44] <SmokeMachine> Xliff: the nearest I've got from function pointer on native call was this... I don't think it could help... but take a look and let me know if something there could help you, please...

[21:44] <SmokeMachine> https://github.com/FCO/bernalang/blob/machine-code/lib/GccJit.pm6#L351

[21:51] <Xliff> SmokeMachine++

[21:51] <Xliff> I was hoping for something simpler, but I will take a look.

[21:55] <SmokeMachine> Xliff: The wrapper for GccJit (without the BernaLang) is here if you like: https://github.com/FCO/GccJit/blob/master/lib/GccJit.pm6

[21:56] <Xliff> .tell jnthn What's the best way to invoke a C function pointer using NativeCall?

[21:56] <tellable6> Xliff, I'll pass your message to jnthn

[21:58] *** zakharyas left
[22:06] <SmokeMachine> Xliff: I just saw you helped me with that code a few months ago... https://colabti.org/irclogger/irclogger_log/perl6?date=2019-01-08#l484

[22:07] <Xliff> Yup! I remember that! :)

[22:10] *** kiwi_75 joined
[22:10] *** kiwi_75 left
[22:11] *** cjkinni joined
[22:30] *** mowcat joined
[22:37] *** Kaiepi left
[22:37] <Xliff> SmokeMachine: So if you are returning a Function class from gcc_jit_context, how are you invoking the returned Function?

[22:37] *** Kaiepi joined
[22:38] *** Kaiepi left
[22:39] *** Kaiepi joined
[22:45] *** wamba left
[22:50] <SmokeMachine> Xliff: That's the problem... I don't tall them... :( https://github.com/FCO/bernalang/blob/machine-code/lib/GccJit.pm6#L410

[22:50] <SmokeMachine> call

[22:51] <Xliff> Ahh... you get gcc_jit to call them.

[22:51] <SmokeMachine> yes...

[22:53] *** cjkinni left
[22:56] <Xliff> OK. Thanks, SmokeMachine

[22:57] *** kensanata joined
[22:59] *** pecastro left
[23:33] *** m_v_m joined
[23:35] <m_v_m> Hi. I have a strange error with 2d arrays. I would like to create 2d array like that: https://pastebin.com/Mw9vtW3m  and I have error: expected Array[Array[Int]] but got Array ($[])

[23:35] <m_v_m> To be honest...I really don't know why. 

[23:36] *** kensanata left
[23:37] <timotimo> two things:

[23:38] <timotimo> declaring a "Foo @bar" gives you an "array of Foo", so you're asking for Positional[Array[Array[Int]]], so a 3d array basically

[23:39] <timotimo> if you put [] around something, it will be iterated into an array, which means [[]] will just turn into a 1d array (you can get a depth-two array with [[],])

[23:39] <timotimo> m: my Array[Int] @t_map; @t_map[1][2] = 99; say @t_map.perl

[23:39] <camelia> rakudo-moar 17d036ad4: OUTPUT: «Type check failed in assignment to @t_map[1]; expected Array[Int] but got Array ($[])␤  in block <unit> at <tmp> line 1␤␤»

[23:40] <timotimo> m: my Array[Int] @t_map = Array[Int].new; @t_map[0][1] = 99; say @t_map.perl

[23:40] <camelia> rakudo-moar 17d036ad4: OUTPUT: «Type check failed in assignment to @t_map[0]; expected Array[Int] but got Array ($[])␤  in block <unit> at <tmp> line 1␤␤»

[23:40] <timotimo> m: my Array[Int] @t_map = Array[Int].new,; @t_map[0][1] = 99; say @t_map.perl

[23:40] <camelia> rakudo-moar 17d036ad4: OUTPUT: «Array[Array[Int]].new(Array[Int].new(Int, 99))␤»

[23:40] <timotimo> did the same thing wrong that you did, lol

[23:40] <timotimo> time for bed

[23:40] <timotimo> m_v_m: does that help?

[23:40] <m_v_m> Yes, but why it is so strange ... 

[23:41] <m_v_m> Perl6 is really nicely done..but that kind of behaviour is really strange.

[23:42] <timotimo> you can use [] around something to get an array of items from something, for example [<foo bar baz>] or [some-sequence-generating-sub()]

[23:42] <timotimo> the thing that requires the comma is the "single-argument rule" where a single iterable thing will be taken as a list of things instead of a single thing

[23:43] <Xliff> What?

[23:43] <timotimo> modulo scalar containers

[23:43] <Xliff> It's early for you, timotimo.

[23:43] <timotimo> psst

[23:43] <Xliff> So... nothing more on function pointers from C?

[23:43] <timotimo> *shrug*, nativecast it i guess?

[23:43] <Xliff> How?

[23:43] <Xliff> That actually sounds right, for some reason, but I still need a proper signature.

[23:44] <Xliff> so...

[23:44] <Xliff> my $func = nativecast (& (int32, Str --> gdouble), $c-pointer)?

[23:44] <Xliff> or ... my &func = nativecast (& (int32, Str --> gdouble), $c-pointer)?

[23:45] *** m_v_m left
[23:45] <timotimo> timo@schmand ~> perl6-gdb-m -e 'use NativeCall; nativecast(:(int32, int32 --> int32), Pointer[int64].new(0x1234512345))(1, 2);'

[23:45] <Xliff> You do any more work on live coding, or looking for a missing feature?

[23:45] <timotimo> Thread 1 "perl6-m" received signal SIGSEGV, Segmentation fault.

[23:45] <timotimo> 0x0000001234512345 in ?? ()

[23:45] <timotimo>           ^^^^^^^^

[23:46] <Xliff> O_o

[23:46] <Xliff> \o/

[23:46] <Xliff> Rock on.

[23:47] * timotimo puts a rock on his head

[23:47] <Xliff> :)

[23:52] <timotimo> you want to make sure info about casting function pointers lands somewhere you would have looked?

[23:52] <timotimo> and no i haven't used the livecoding any more after the hilbert curve a few weeks ago

[23:56] <timotimo> i should have told m_v_m about the xx operator

[23:57] <Xliff> Yes. I am planning on updating the docs after I get a working use case.

[23:57] <Xliff> Thanks.

[23:57] <timotimo> sorry that it took me so long to respond

[23:58] <Xliff> No worries. Neck deep in another project?

[23:58] <timotimo> moarperf

[23:58] <timotimo> i would love to reach the grant goal

[23:59] <Xliff> Ah. OK. Then I won't keep you any longer. You know where I live.

