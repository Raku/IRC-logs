[00:02] *** Manifest0 left
[00:02] *** cpan-p6 left
[00:03] *** cpan-p6 joined
[00:03] *** cpan-p6 left
[00:03] *** cpan-p6 joined
[00:07] *** Manifest0 joined
[00:13] *** mowcat left
[00:31] *** kst left
[00:43] *** Manifest0 left
[00:47] *** Manifest0 joined
[00:51] *** netrino left
[01:01] *** Manifest0 left
[01:06] *** Manifest0 joined
[01:06] *** zacts joined
[01:10] *** Manifest0 left
[01:15] *** Manifest0 joined
[01:25] *** Manifest0 left
[01:31] *** Manifest0 joined
[01:39] *** Manifest0 left
[01:45] *** Manifest0 joined
[01:46] *** MidCheck joined
[01:49] *** zacts left
[01:51] *** Manifest0 left
[01:56] *** Manifest0 joined
[02:01] *** Manifest0 left
[02:06] *** Manifest0 joined
[02:07] *** reach_satori_ joined
[02:10] *** reach_satori left
[02:25] *** Manifest0 left
[02:30] *** Manifest0 joined
[02:57] *** Manifest0 left
[03:01] *** gregf_ left
[03:04] *** Manifest0 joined
[03:06] *** choes joined
[03:10] *** choes left
[03:17] *** zacts joined
[03:22] *** cono left
[03:22] *** kaare__ left
[03:23] *** kaare__ joined
[03:34] *** zacts left
[03:36] *** Manifest0 left
[03:41] *** Manifest0 joined
[03:48] *** Manifest0 left
[03:53] *** Manifest0 joined
[03:55] *** sauvin joined
[03:58] *** MidCheck left
[04:08] *** Manifest0 left
[04:13] *** Manifest0 joined
[04:15] *** veesh left
[04:16] *** veesh joined
[04:23] *** khisanth_ left
[04:29] *** molaf joined
[04:36] *** khisanth_ joined
[04:40] *** reach_satori_ left
[04:45] <Geth_> ¦ doc: 3d32f6ef08 | (Tobias Boege)++ | doc/Type/Range.pod6

[04:45] <Geth_> ¦ doc: Document WhateverCode end point in Range

[04:45] <Geth_> ¦ doc: 

[04:45] <Geth_> ¦ doc: A WhateverCode end point to the Range operator creates a new WhateverCode

[04:45] <Geth_> ¦ doc: which returns Ranges.

[04:45] <Geth_> ¦ doc: 

[04:45] <Geth_> ¦ doc: This is covered by roast: https://github.com/perl6/roast/blob/master/S02-types/whatever.t#L34

[04:45] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/3d32f6ef08

[04:45] <Geth_> ¦ doc: 57641d19e4 | (Tobias Boege)++ | 2 files

[04:46] <Geth_> ¦ doc: Fix infinite range subscript examples

[04:46] <Geth_> ¦ doc: 

[04:46] <Geth_> ¦ doc: Also elaborate on WhateverCode in Range slices.

[04:46] <Geth_> ¦ doc: 

[04:46] <Geth_> ¦ doc: Cf. rakudo/rakudo#2872 and perl6/roast#536

[04:46] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/57641d19e4

[04:46] <Geth_> ¦ doc: 1f8e0da7ca | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 3 files

[04:46] <Geth_> ¦ doc: Merge pull request #2775 from taboege/subscript-range-whatever

[04:46] <Geth_> ¦ doc: 

[04:46] <Geth_> ¦ doc: Fix infinite range subscript examples

[04:46] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/1f8e0da7ca

[04:49] *** jmerelo joined
[05:03] *** vrurg left
[05:05] *** molaf left
[05:09] *** antoniogamiz joined
[05:12] *** cpan-p6 left
[05:13] *** cpan-p6 joined
[05:13] *** cpan-p6 left
[05:13] *** cpan-p6 joined
[05:16] *** molaf joined
[05:16] *** antoniogamiz left
[05:19] <Geth_> ¦ doc: 671eb50c51 | (JJ Merelo)++ | doc/Type/Any.pod6

[05:19] <Geth_> ¦ doc: Reflow while revising #1803

[05:19] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/671eb50c51

[05:19] <Geth_> ¦ doc: 91b9f52600 | (JJ Merelo)++ | doc/Type/Any.pod6

[05:19] <Geth_> ¦ doc: Improves the documentation of .serial

[05:19] <Geth_> ¦ doc: 

[05:19] <Geth_> ¦ doc: According to @lizmat comments in

[05:19] <Geth_> ¦ doc: https://stackoverflow.com/questions/56057931/what-does-serial-do and

[05:19] <Geth_> ¦ doc: @jnthn in the #1803 issue. I've finally opted for leaving it there, on

[05:19] <Geth_> ¦ doc: the premises that it might benefit no one if it disappears. I've added

[05:19] <Geth_> ¦ doc: all the necessary caveats. This closes #1803

[05:19] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/91b9f52600

[05:19] <Geth_> ¦ doc: 5a05e66398 | (JJ Merelo)++ | doc/Type/Any.pod6

[05:19] <Geth_> ¦ doc: Adapts definitions

[05:19] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/5a05e66398

[05:27] *** molaf left
[05:29] *** Manifest0 left
[05:36] *** Manifest0 joined
[05:39] *** adu joined
[05:51] *** Manifest0 left
[05:52] *** abraxxa joined
[05:53] *** abraxxa left
[05:53] *** abraxxa joined
[05:55] *** kjk left
[05:58] *** abraxxa left
[05:58] *** abraxxa joined
[05:59] *** Manifest0 joined
[06:12] *** reach_satori_ joined
[06:12] *** domidumont joined
[06:37] *** Manifest0 left
[06:43] *** Manifest0 joined
[06:47] *** Manifest0 left
[06:49] *** robertle joined
[06:49] *** jmerelo left
[06:53] *** ayerhart left
[06:54] *** Manifest0 joined
[06:58] *** kurahaupo left
[06:58] *** Manifest0 left
[06:59] *** kurahaupo joined
[07:05] <holyghost> Apparently he does not want to take me on as a postdoc

[07:05] *** Manifest0 joined
[07:05] <holyghost> I sent the prof a mail that I'd like to sollicitate for a postdoc position at campus Jette VUB

[07:06] <holyghost> He cannot do it himself however, I misread yesterday

[07:06] <holyghost> so I'm not yet in

[07:07] <holyghost> bummer

[07:10] *** ayerhart joined
[07:10] *** patrickb joined
[07:13] *** ayerhart left
[07:14] *** MidCheck joined
[07:14] *** ayerhart joined
[07:21] <moritz> bummy indeed. Which topic(s) do you want to research?

[07:25] *** cosimo joined
[07:37] *** rindolf joined
[07:51] <holyghost> AI

[08:16] *** aindilis left
[08:18] *** aindilis joined
[08:18] *** holyghost left
[08:19] *** holyghost joined
[08:19] *** zakharyas joined
[08:37] *** Manifest0 left
[08:42] *** Manifest0 joined
[08:59] *** Manifest0 left
[09:05] *** Manifest0 joined
[09:10] *** espadrine joined
[09:14] *** rindolf left
[09:22] *** rindolf joined
[09:23] *** clarkema joined
[09:23] *** MidCheck left
[09:23] *** _jrjsmrtn joined
[09:24] *** Manifest0 left
[09:25] *** __jrjsmrtn__ left
[09:31] *** Manifest0 joined
[09:35] *** mowcat joined
[09:41] *** scimon joined
[09:46] *** kini left
[09:48] <masak> ahoj #perl6

[09:51] <masak> I have a question about box plots. does anyone have a nice-to-look-at bit of Perl 6 code for how to compute the values for the median, the quartiles (the boxes), and one standard deviation above-and-below the mean (the whiskers, or one choice for them, at least)

[09:52] <masak> and, as usual, how should I think about the standard deviation -- do I subtract one or not? I always forget :(

[09:52] <holyghost> masak : I've written Mathx::Stat, which was followed up by others with Stats

[09:53] <holyghost> There's no median and quartiles code but may proceed with it

[09:53] <holyghost> s/may/you may

[09:53] <masak> ok, good to know

[09:54] *** aindilis left
[09:54] <masak> I'm in a NIH mood, so I'll probably write something short myself which does it. but always good to look at prior art.

[09:54] <masak> hm, why does a module called Stats not compute median and quartiles...? :)

[09:54] <clarkema> Is anyone else having trouble updating zef?  I'm not getting any kind of response from http://ecosystem-api.p6c.org/projects1.json

[09:55] <masak> oh, "Bessel's correction" it's called. "curse you, Bessel!" :P

[09:55] *** aindilis joined
[09:56] *** domidumont left
[09:56] <masak> statistics feels to me like a particularly deep black magic. sure, you can make it work, but it's very non-obvious why it works.

[09:56] <masak> "remember to subtract 1 here!" -- "ok, why?" -- "<mumble> <mumble> degrees of freedom <mumble>"

[09:57] <masak> "sorry, didn't quite catch that" -- *starts crying* "I don't know, OK?"

[09:57] <holyghost> I'm just reading up on hidden markov models to use with Mathx::Stat

[09:57] <holyghost> in Game::Markov

[09:58] <holyghost> the statistics aren't that difficult, but I wouldn't know how you proved it thoroughly

[09:59] <holyghost> Deep magic as you said :-)

[09:59] <masak> oh wow, this explanation is *great*: https://en.wikipedia.org/wiki/Bessel%27s_correction#Source_of_bias

[09:59] <timotimo> masak: i usually use this piece of code: @times .= sort; my @timings = (@times[* div 50], @times[* div 4], @times[* div 2], @times[* * 3 div 4], @times[* - * div 100]);

[09:59] <masak> timotimo: neat :)

[09:59] <masak> yes, that looks like a rough version of what I want to do. kudos ;)

[10:02] *** kini joined
[10:02] <masak> ok, looks like I ought to subtract 1

[10:03] <masak> ...whenever I have a "sample mean", which I do with these data points

[10:03] <masak> (by the way, I'm running my test suite over a series of commits to see if there's a progressive slowdown as a result of my refactor)

[10:05] *** aindilis left
[10:05] <clarkema> nm, I manually brutalized the zef config to make it play ball

[10:07] *** kini left
[10:10] <holyghost> .tell Xliff the server seems down

[10:10] <yoleaux> holyghost: I'll pass your message to Xliff.

[10:11] *** aindilis joined
[10:12] <holyghost> ok, I understand the HMMs again

[10:13] <holyghost> I'll code it into Game::Markov ASAP

[10:14] <holyghost> It's easy compared to chaos theory

[10:15] <holyghost> I'm going to eat something, then read up for the rest of the statistics packages, the stat chaos package

[10:19] *** kini joined
[10:20] *** espadrine_ joined
[10:21] *** espadrine left
[10:23] <holyghost> I need to read, "chaos : a statistical perspective" -- Chan, Tong first

[10:23] <holyghost> Then I'll try to do some magic by making it useful for games :-)

[10:24] <holyghost> or the other way round

[10:28] <holyghost> food time !

[10:41] *** kini left
[10:49] *** kurahaupo left
[10:50] *** jhill left
[10:51] *** jhill joined
[10:53] *** kini joined
[10:58] *** lumin left
[10:58] *** kini left
[10:58] *** jhill left
[10:59] *** jhill joined
[10:59] *** lumin joined
[11:05] *** kini joined
[11:06] *** netrino joined
[11:12] *** Manifest0 left
[11:17] <masak> how do people write something like `assert @values.elems > 0;` in Perl 6?

[11:17] *** Manifest0 joined
[11:17] <masak> anyone actually use the PRE {} block?

[11:17] <masak> (which I guess is the idiomatic way to do it)

[11:17] <holyghost> m: @values.Empty

[11:17] <camelia> rakudo-moar 3c5a53229: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@values' is not declared. Did you mean '&values'?␤at <tmp>:1␤------> 3<BOL>7⏏5@values.Empty␤»

[11:18] <holyghost> m: @values == Empty

[11:18] <camelia> rakudo-moar 3c5a53229: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@values' is not declared. Did you mean '&values'?␤at <tmp>:1␤------> 3<BOL>7⏏5@values == Empty␤»

[11:18] <masak> holyghost: I didn't mean the `@values.elems > 0` part. I'm pretty comfortable with that one, and I know there are alternatives :)

[11:18] <masak> I meant the `assert` part (which is Python, not Perl 6)

[11:18] <holyghost> no idea

[11:19] <masak> m: sub mean(@values) { PRE { @values.elems > 0 }; ([+] @values) / @values.elems }; say mean(1, 2, 3)

[11:19] <camelia> rakudo-moar 3c5a53229: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling mean(Int, Int, Int) will never work with declared signature (@values)␤at <tmp>:1␤------> 3}; ([+] @values) / @values.elems }; say 7⏏5mean(1, 2, 3)␤»

[11:19] <masak> oh, right :)

[11:19] <masak> m: sub mean(@values) { PRE { @values.elems > 0 }; ([+] @values) / @values.elems }; say mean([1, 2, 3])

[11:19] <camelia> rakudo-moar 3c5a53229: OUTPUT: «2␤»

[11:19] <masak> m: sub mean(@values) { PRE { @values.elems > 0 }; ([+] @values) / @values.elems }; say mean([])

[11:19] <camelia> rakudo-moar 3c5a53229: OUTPUT: «Precondition '{ @values.elems > 0 }' failed␤  in sub mean at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:19] <masak> goodenuf for me

[11:20] <holyghost> in scheme it's (null? list)

[11:21] <holyghost> In perl6 AFAIK it's not fool-proof to check a list for emptyness

[11:21] *** Guest55475 left
[11:22] <holyghost> As it is in other languages

[11:22] <holyghost> like your say mean([]) above

[11:22] <lizmat> Empty would also have worked

[11:22] <masak> holyghost: what in the world are you on about? "not fool-proof"? why not? :)

[11:22] <lizmat> m: sub mean(@values) { PRE { @values.elems > 0 }; ([+] @values) / @values.elems }; say mean(Empty)

[11:22] <camelia> rakudo-moar 3c5a53229: OUTPUT: «Precondition '{ @values.elems > 0 }' failed␤  in sub mean at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:23] <lizmat> afk&

[11:23] <masak> holyghost: I can't remember having trouble checking a list for emptiness in Perl 6, ever. (and it's not what I asked about.)

[11:24] <holyghost> nm, I meant a language feature (not perl6) which checks automatically for Empty list

[11:25] <masak> oh, I don't feel I need anything more implicit than `PRE { @values.elems > 0 }`...

[11:25] <holyghost> It already does probably, I mix up laguages sometimes

[11:26] <masak> but if you're into that kind of thing, this works:

[11:26] <masak> m: sub foo([$v, *@values]) { say [$v, |@values] }; foo([1]); foo([1, 2]); foo([])

[11:26] <camelia> rakudo-moar 3c5a53229: OUTPUT: «[1]␤Too few positionals passed to 'foo'; expected at least 1 argument but got only 0 in sub-signature␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤[1 2]␤»

[11:26] <holyghost> masak : what I also meant is that it's a huge syntax for checking an empty list

[11:26] <masak> no, not really a huge syntax

[11:26] <masak> also, see the alternative I just posted

[11:27] <masak> which uses signature matching

[11:27] <holyghost> ok

[11:27] <holyghost> I'm going to buy a beer now, I'm too tired to continue, if I may say so

[11:29] <masak> :)

[11:34] *** zakharyas left
[11:35] *** Manifest0 left
[11:36] <masak> fwiw, here's the code I ended up with: https://gist.github.com/masak/30d37a594964b905a21f956281535084

[11:36] <masak> gonna spend some time generating that as an SVG box plot diagram later tonight

[11:37] <holyghost> SVG is cool

[11:38] <holyghost> fractals :-)

[11:38] <masak> no fractals this time, though. only boxes and axes.

[11:39] <holyghost> I have worked a few months on inkscape in 2004

[11:39] <holyghost> it comes from sodipodi, which was made obsolete, in those times a nice gome program

[11:40] <holyghost> *gnome

[11:40] <masak> aye. I remember that.

[11:40] *** Manifest0 joined
[11:41] <xinming> m: my %x; %x.defined.say;

[11:41] <camelia> rakudo-moar 3c5a53229: OUTPUT: «True␤»

[11:41] <masak> some sodipodi attributes are still left in the modern Inkscape files, last time I looked.

[11:41] <xinming> Anyone here would clarify this?  why is an Empty hash defined?

[11:41] <masak> xinming: there was a discussion about that one about a decade ago.

[11:41] <masak> xinming: I was on the side of "it should be undefined". pmichaud argued the side that won, IIRC.

[11:41] *** kurahaupo joined
[11:42] <xinming> masak: Can we have conversation log for this?

[11:42] <xinming> If it's not the bug, I'd like to see the reason we choose this behavoir. :-)

[11:44] <masak> I'm looking (googling RT), but no luck so far

[11:48] <Woodi> hallo today :)

[11:48] <holyghost> hey Woodi !

[11:48] <tobs> m: my %x; %x.say

[11:48] <camelia> rakudo-moar 3c5a53229: OUTPUT: «{}␤»

[11:48] <tobs> I guess that's why this doesn't print "(Hash)"

[11:48] <holyghost> ah I see, it comes from perl5 undef

[11:49] *** Manifest0 left
[11:52] <timotimo> masak: i'm looking forward for you to box some plots

[11:53] <masak> I'm here to box some plots and chew gum, and I'm all out of gum.

[11:53] <Woodi> I have some general, inter-language dizzines with assert()... it stops program. it is put when some invalid condition occurs, that realy never should happen. I gues it's like emmergency stoppin engines in launching rocket... so: a) they don't teach very much about how to use assert, usually just small paragraph in books; b) should assert() be used in writing server/daemon code ? it's like works-as-expected 

[11:53] <masak> tobs: not sure that's an explanation...?

[11:53] <Woodi> self-asking DoS...

[11:54] <masak> Woodi: there's no shame/harm in halting a program when a routine gets sent illegal inputs.

[11:54] <holyghost> Woodi : assert is a last resort for a hacker, your program should be fool-proof

[11:54] *** Manifest0 joined
[11:55] <Woodi> masak: but why not put healing code instead ? especially in servers

[11:55] <masak> holyghost: eh? again, what's this about "fool-proof"? someone might totally send in wrong inputs.

[11:55] <masak> Woodi: of course no-one wants that to happen in production... which is why you'd have an *extensive* test suite which covers enough cases, including sad paths that trigger the `assert`

[11:55] <masak> Woodi: why not "healing code"? because sometimes wrong is just wrong.

[11:55] <masak> there's no recovery from trying to take the mean of []

[11:56] <Woodi> maybe I just didn't see positive use-case :)

[11:56] <masak> as a user of that program, I would much rather like to be made aware of the error, than for the program to "heal" and hide it

[11:56] <masak> the positive use case is that your program doesn't have a bug

[11:56] <tobs> masak: not in the way xinming asks for, but not showing me a Hash typeobject but an empty hash literal instead when I .say it is consistent with .defined being True

[11:56] <Woodi> hide - no... heal is recovery

[11:57] <masak> tobs: ah, got it. well yes, it's an empty-but-defined hash.

[11:57] <masak> tobs: the million-dollar question is why, though :) and I still haven't found that old discussion

[11:57] <masak> Woodi: how would you recover in the case of `mean([])`?

[11:57] <holyghost> Woodi : AFAIK, exceptions give you more freedom instead of exiting your program

[11:57] <tobs> I'd be interested in that too, so ++masak :P

[11:58] <Woodi> masak: return error from the function ?

[11:58] <Woodi> depends how "module" is constructed

[11:58] <masak> ah! found it! :D

[11:59] <masak> https://rt.perl.org/Public/Bug/Display.html?id=64928

[11:59] <masak> enjoy, all of you who are interested ;)

[11:59] <masak> (I haven't re-read it, and it's been years)

[11:59] <tadzik> . o O ( masakbot submits rakudobug )

[12:00] *** domidumont joined
[12:00] *** kini left
[12:01] <Woodi> masak: I asked about deamonised servers but I'm realy mean 'systemD' :)

[12:01] <masak> tadzik: those were the days. on average one rakudobug a day o.O

[12:02] <masak> Woodi, holyghost: I bring it up in Perl courses quite a bit -- robustness in programs comes from the fact that those programs have already _failed_ a lot, and those failures have been hammered out and fixed.

[12:03] <holyghost> I understand

[12:03] *** espadrine_ left
[12:03] <masak> I see early Perl as committing the mistake of DWIM sometimes: "this doesn't make sense, so let's fix it"

[12:03] <holyghost> I'm going to give you an example then, devision by zero should be errored but not asserted

[12:04] <masak> Python has always been much more strict/uptight about things -- "you're sending me a str as a list index? it's a str full of digits -- do I look like I care?"

[12:04] <holyghost> s/errored/catched in your program

[12:04] <masak> holyghost: notice that in all the places in my script where there *could* be a division by zero, I already had a `PRE` block that excluded that case

[12:05] <holyghost> ok

[12:05] <masak> so in some sense, my script can't divide by 0 :)

[12:05] <holyghost> lol

[12:05] <tadzik> masak: heh, more strict where it feels like it :P There's always this one student that says "it printed each line in a file, but one character at a time" ;)

[12:05] <masak> tadzik: oh, I know what they did :P

[12:05] <tadzik> :D

[12:06] <masak> tadzik: I didn't say "more strict everywhere" :)

[12:06] <masak> Python is still hopelessly dynamic

[12:06] <tadzik> every time I consider just not even telling them about readline() and readlines(), just "you can do a for loop over a file"

[12:06] <masak> my (least) favorite is `del my_var` -- you did *WHAT* to a lexically declared variable!?

[12:06] <tadzik> and delattr(). Ugh

[12:07] <masak> right

[12:07] <masak> guess what 007 doesn't do

[12:07] <tadzik> "Special cases aren't special enough to break the rules."

[12:07] <tadzik> right, Tim Peters, right

[12:07] *** kini joined
[12:08] <masak> haha

[12:09] <tobs> as an aside, a friend of mine is named Tim Peters, too

[12:09] <tobs> imagine my eyes when I learned about Timsort and its inventor in a lecture

[12:09] <tobs> but it was a different Tim Peters

[12:10] <masak> holyghost, Woodi: AFAIK the ideas behind PRE and POST come from Eiffel and its Design-by-Contract ideas. think of `sub mean` as a "component". the `PRE { @values.elems > 0 }` says "if you called me with an empty Array, there's a bug -- in _your_ (the caller's) code"

[12:11] <moritz> Eiffel inherits these conditions. A subclass can only weaken PRE-conditions and only strengthen POST-conditions

[12:11] <masak> we had such plans for Perl 6 too

[12:11] <masak> but someone (me, unfortunately) shot them down as unimplementable in a long email to p6l

[12:11] <masak> and TheDamian grudgingly agreed

[12:12] <masak> it's too bad, they were nice ideas

[12:12] <holyghost> now that I remember, Woodi there's a daemon class in the perl6 docs online, it uses CATCH

[12:12] <moritz> yes, the concept doesn't play well with the ideas of lexical scoping and method signature freedom

[12:12] <masak> right

[12:13] <masak> you can't have the cake and eat it -- in the end, Perl 6 is a very late-bound language with not-much-strictness statically

[12:15] <timotimo> moritz: can i get your assistance on a grammars thing? :)

[12:16] *** kini left
[12:18] <timotimo> or maybe you've got a minute or two, masak?

[12:18] <masak> yeah. don't ask to ask -- what's ailing you? :)

[12:18] <timotimo> OK, here's the short of it:

[12:18] *** espadrine_ joined
[12:19] <timotimo> i have a proto regex expression, and one one_expression - because the language isn't meant to be super nice to use, i say "no operator precedence parser for you!"

[12:20] <timotimo> there's expression:<one> which is just <one_expression> and there's expression:<comparison> which is <one_expression> \s* <compop> \s* <one_expression>

[12:20] <timotimo> and there's one_expression:<parenthesized> which is '(' \s* <expression> \s/ ')'

[12:20] <jnthn> masak: Well, the lexical parts of Perl 6 are relatively static-friendly, it's the object dispatch that's the main source of late binding :)

[12:21] <timotimo> the trouble is, with something like (foo) and (bar) it tries to parse expression:<one> -> one_expression:<parenthesized>, that fails when the EOF isn't where it hopes to find it, and then just fails immediately instead of trying expression:<comparison>

[12:21] <SmokeMachine> m: sub mean(@values ($, |)) { ([+] @values) / @values.elems }; say mean([1, 2, 3])

[12:21] <camelia> rakudo-moar 3c5a53229: OUTPUT: «2␤»

[12:22] <moritz> timotimo: "and" is a <compop>, right?

[12:22] <timotimo> when i put a <!before '('> in expression:<one> it will parse correctly, but of course then "superstitious parenthesis" are an actual syntax error

[12:22] <timotimo> that's right

[12:22] <timotimo> i only use "regex" and "proto regex" everywhere, so no "rule" and non-declarative <ws> anywhere

[12:22] <timotimo> i assume you'd want to have the code so you can have a closer look?

[12:22] <moritz> timotimo: can you paste a grammar (or a piece thereof) anywhere?

[12:22] <timotimo> i'll paste the whole program

[12:23] <timotimo> well, only the parsing part, i can throw some unneeded stuff out

[12:23] <timotimo> OK, tio.run doesn't have Grammar::Tracer

[12:23] <timotimo> that's fine

[12:24] <moritz> a gist works as well

[12:24] *** kini joined
[12:24] <timotimo> wow that's a long url

[12:24] <timotimo> we need a perl6.org url shortener :-) :-)

[12:25] <masak> jnthn: yes, no argument there. which (I guess) is why we ended up having PRE/POST for the blocks and routines, but not for class hierarchies...

[12:25] <rba> timotimo: ok will add it the infra requirement list

[12:25] <timotimo> ha! i'll paste the tio.run link into a gist. i'm a genious

[12:26] * moritz facepalms

[12:26] <timotimo> https://gist.github.com/timo/b66d080aca39b51d94b8e5f36e373969 - the tio.run link is at the bottom, the code at the top. good compromise?

[12:29] <moritz> timotimo: and what's the problem now? the grammar matches the example that's in your example code

[12:30] <moritz> the look-ahead in expression:<one> ?

[12:30] *** kini left
[12:34] <moritz> I don't understand why it refuses to match without the look-ahead, but I do know that it's not optimal to structure your proto regexes the way you do

[12:35] <moritz> regex expression { <one_expression> [ \s* <compop> \s* <rhs=.one_expression> ]? }

[12:35] <moritz> would make more sense to me

[12:36] *** mowcat left
[12:36] *** abraxxa left
[12:37] <masak> moritz: now I'm interested. not optimal to structure proto regexes how, exactly?

[12:37] <moritz> I guess the problem is that expression -> one_expression:<parenthesized> -> expression is a recursion, and thus terminates LTM

[12:37] <lizmat> weekly: https://medium.com/@jcoterhals/perl-6-small-stuff-19-a-challenge-of-niven-numbers-and-word-ladders-ed33dcd2b45b

[12:37] <notable6> lizmat, Noted!

[12:37] <masak> yes, recursion terminating LTM is indeed tricky

[12:38] <masak> it makes sense though if you think of LTM's "calls" as actually being copying. any recursion, direct or indirect, would lead to an infinitely big rule.

[12:38] <moritz> masak: proto (or in general, disjunction) paths with a large common prefix tend to be problematic IME

[12:39] <masak> interesting.

[12:39] <moritz> basically, you rely *very* hard on LTM, and LTM is sometimes tricky

[12:39] <masak> I'm not disagreeing, I'm just not sure how to weigh that opinion :)

[12:39] *** lucasb joined
[12:39] <moritz> it is basically  token a:<b> { <big> }; token a:<c> { <big> more stuff here }

[12:39] <masak> I think I agree on principle that a declarative prefix should be as short as possible

[12:40] *** kini joined
[12:40] <moritz> it's simply the opinion/exerience of somebody who still struggles with grammars, after having spent significant time with them

[12:40] <masak> for example `while` should be something like `while>> {} <xblock>`, with the `{}` terminating the declarative prefix

[12:40] <timotimo> oh, recursion terminates LTM, i see

[12:41] <masak> timotimo: I independently re-discovered this fact here: https://github.com/masak/007/issues/485#issuecomment-475999894

[12:41] <moritz> which you can totally see as a disqualifying statement, since I haven't reached grammar enlightenment yet

[12:41] <masak> (since I'm in the process of re-inventing parsing)

[12:41] <masak> moritz: you only wrote the book about it :P

[12:41] <timotimo> also, sorry i was just required to pay attention to a cat-related cuddlemergency

[12:42] <timotimo> oh, what is 001? the first prototype of 007? :)

[12:43] <moritz> masak: I hoped that would push me over the enlightment edge. Didn't quite work out :D

[12:43] <masak> timotimo: 001 is the smallest possible language I can think of to experiment with language extension

[12:43] <timotimo> books were already being written before the enlightenment, and it still took a long time :)

[12:43] <timotimo> ah, ok!

[12:43] <masak> moritz: sorry-not-sorry ;)

[12:43] <moritz> timotimo: lol

[12:44] <timotimo> anyway, this language is now far enough that i can most probably start generating actual bytecode

[12:44] <masak> I'm currently in a mood where I'm thinking about the LTM parser and the procedural parser a lot. they're... intertwined.

[12:44] <moritz> that they certainly are

[12:44] <masak> basically, the procedural parser handles everything "stateful", including "where are we in the rule call stack?"

[12:45] <masak> interestingly the LTM parser doesn't/can't care about those things, but it's "complicit" in feeding the right info to the procedural parser

[12:45] <masak> basically, the LTM parser acts as the dispatch mechanism (and, um, return mechanism) for the procedural parser

[12:45] <masak> it's a weird funhouse mirror variant of MMD

[12:46] <moritz> a branch predictor

[12:46] <masak> heh, yes :)

[12:46] <lucs> .

[12:46] <masak> lucs: it's lucky we're not doing point-free programming

[12:50] <timotimo> hm. how come "use MAST::Ops:from<NQP>" doesn't find my installprefix/share/nqp/lib/MAST/Ops.nqp? it's apparently only looking for a MAST/Ops.moarvm

[12:51] <lucs> masak: :)

[12:51] <timotimo> oooh, it's MASTOps that i have to "use"

[12:57] *** Manifest0 left
[13:02] *** Manifest0 joined
[13:03] <kawaii> is there any way I can quickly (and recursively) check the encoding of files to make sure they're all UTF-8 without BOM in p6? :)

[13:04] <lizmat> releasable6: status

[13:04] <releasable6> lizmat, Next release will happen when it's ready. 1 blocker. 132 out of 310 commits logged (⚠ 2 warnings)

[13:04] <releasable6> lizmat, Details: https://gist.github.com/c45aa6cbcb26ab2d57db2d3a90855043

[13:04] *** zakharyas joined
[13:06] <timotimo> kawaii: are the files sometimes huge?

[13:06] <kawaii> timotimo: no they're all less than 1MB each but nested in various directories

[13:07] <timotimo> if not, you can always slurp the file to test if the utf8 is valid (otherwise it will throw an exception) and if it is valid, .IO.open.read(2) should give you 0xFE, 0xFF or 0xFF, 0xEF if there's a BOM

[13:07] <timotimo> if i'm not mistaken

[13:07] <kawaii> oooo I didn't know that about slurp

[13:07] <kawaii> thanks!

[13:08] <timotimo> there's probably a good example for recursive and multithreaded filesystem ops somewhere :)

[13:08] <timotimo> but if single-threaded is okay, you can literally just recurse using dir, or use a queue of IO objects to not have a stack that grows potentially very big

[13:11] * timotimo downloads an album with 1.9 gigs worth of bad music for maximizing work productivity

[13:12] <clarkema> The sooner you finish the work the sooner you can stop listening to the bad music?

[13:13] <kawaii> https://usercontent.irccloud-cdn.com/file/XsICqJQm/IMG_20190510_141317.jpg

[13:13] <kawaii> https://usercontent.irccloud-cdn.com/file/eopuiwD1/IMG_20190510_141321.jpg

[13:13] <kawaii> I found this coin at home last night

[13:13] <kawaii> any idea where this came from?

[13:14] <kawaii> oh, maybe london perl workshop

[13:15] *** natrys joined
[13:15] <lizmat> kawaii: it's not a coin, it's a tyuit

[13:15] <lizmat> *tuit

[13:15] <timotimo> yes! a round tuit!

[13:16] <kawaii> https://en.wiktionary.org/wiki/round_tuit

[13:16] <kawaii> :D

[13:17] <masak> those are in quite short supply, and hence valuable

[13:17] <masak> I often find myself wishing I had more of them

[13:18] <masak> hm, can anyone with better google-fu than me find the archived conversation (on, I'm pretty sure, perl6-language) about DbC/PRE and POST/methods with Damian Conway?

[13:19] <masak> oh, nvm. found it.

[13:19] <timotimo> https://thingsfittingperfectlyintothings.tumblr.com/post/59268264065/wooden-perl-coin-power-socket-fit-found-by

[13:20] * timotimo did important PR work there

[13:20] <masak> DbC discussion: https://www.nntp.perl.org/group/perl.perl6.language/2012/03/msg34803.html

[13:21] <timotimo> clarkema: actually i like this bad music :)

[13:23] *** domidumont1 joined
[13:24] *** vrurg joined
[13:25] *** domidumont left
[13:25] *** domidumont joined
[13:27] <timotimo> masak: i've got a bag full of round tuits, but somehow they don't seem to have an effect on my productivity :(

[13:28] <timotimo> clearly i'm doing *something* wrong

[13:28] *** domidumont1 left
[13:28] <masak> maybe they've become de-magnetized. I had that happen to my tuits more than once.

[13:29] <timotimo> oh no!

[13:29] <timotimo> that could totally be it

[13:29] <masak> man, Damian is one of the nicest prominent people in the Perl community. I just re-read that thread, and it turned out he replied to me privately to say that he'd read my email, but didn't find anything useful to add to it. <3

[13:30] <masak> it's little things like that.

[13:30] <masak> I do remember being a little bit apprehensive writing those emails, though

[13:33] <timotimo> =?ISO-8859-1?Q?Carl_M=E4sak?= is one of my favourite people

[13:35] *** adu left
[13:36] <timotimo> masak: "a macro that activates inside a "actions Bloop { [...] }" block that gives any method that doesn't have an explicit one the implicit signature ($/)" is a use case for macros that i just realized i had

[13:42] *** ravenousmoose left
[13:44] *** Manifest0 left
[13:44] <masak> that should be possible, yes.

[13:44] <masak> over the years, I've become less and less keen on actions classes

[13:44] <timotimo> not sure if you have a master document for use cases from the wild or something :)

[13:44] <timotimo> oh, is that so?

[13:45] <masak> the last couple grammars I wrote, I just inlined the behavior instead

[13:45] <masak> yeah, actions classes are weird

[13:45] <timotimo> i don't want to do that because LTM and declarative prefixes :)

[13:45] <masak> shouldn't matter if you put them at the end

[13:45] <masak> how many times have you ever used the flexibility afforded by them, and substituted another actions class for the same grammar?

[13:45] <timotimo> but yeah, i think often the grammar and its action class are a bit too tightly intertwined to be sensibly elided or replaced

[13:46] <masak> I'm much more likely to _forget_ to tie in the actions class, which happens at .parse call time, for some reason

[13:46] <timotimo> <foo> <bar> <baz> will have a different LTM prefix if <bar> has a { make blah } at its end

[13:46] <masak> I think they're being way overused for the little benefit they provide

[13:46] <masak> timotimo: hm

[13:48] *** Manifest0 joined
[13:51] <jnthn> "Navigate to action"/"Navigate to grammar rule" is on my Comma wishlist, to ease moving between them (and maybe even stubbing the action if it's missing) :)

[13:52] <timotimo> jnthn: doesn't intellij also have a "show the code of something else in-line in the same editor" feature?

[13:53] <timotimo> googling intensifies

[13:54] <timotimo> https://www.jetbrains.com/help/img/idea/2019.1/quickDefinitionLookup.png - not exactly this

[13:56] <timotimo> i must hvae been hallucinating it

[13:58] <timotimo> https://code.visualstudio.com/docs/editor/editingevolved#_peek - this looks a bit more like what i mean

[14:00] *** yuriii left
[14:03] *** domidumont1 joined
[14:07] *** domidumont left
[14:11] *** Manifest0 left
[14:13] *** pmurias joined
[14:14] *** Actualeyes joined
[14:17] <pmurias> masak: what will the 000 language be then?

[14:17] *** Manifest0 joined
[14:21] <moritz> the Perl 6 kernel language!

[14:21] *** Manifest0 left
[14:22] *** domidumont joined
[14:25] <timotimo> KIR, the kernel intermediate representation. and also KIRre, the kernel internal representation regular expression engine

[14:26] *** domidumont1 left
[14:26] *** Manifest0 joined
[14:31] *** Manifest0 left
[14:36] <nine> masak: action classes let you have this: https://github.com/niner/Grammar-Highlighter

[14:37] *** espadrine_ left
[14:37] <timotimo> nine: would be great if action classes could be composed, though

[14:37] *** Manifest0 joined
[14:37] <timotimo> some grammars rely on the actions to set up some stuff so that further parsing can continue, like "add this variable to a list of declared variables" plus "check if this variable that's just been used was defined"

[14:38] <timotimo> though perhaps that should be put directly into the grammar if it's so tightly coupled

[14:38] <nine> sounds like yes

[14:39] <nine> Grammar and action may also share an object where such information is gathered

[14:39] <timotimo> like $*W :)

[14:40] <nine> Kinda *g* Obviously someone had this problem before ;)

[14:40] <nine> Wouldn't have to be a dynamic variable though was my point

[14:40] <timotimo> true

[15:02] *** domidumont1 joined
[15:02] *** pmurias left
[15:04] *** espadrine_ joined
[15:04] *** domidumont left
[15:09] *** domidumont1 left
[15:16] <holyghost> I just watched "The darkest minds", good movie

[15:16] <holyghost> I'll work tomorrow o some more code

[15:16] <holyghost> s/o/on

[15:18] <holyghost> I'm going to sleep in a few hours

[15:19] <holyghost> As I didn't get the postdoc position, I can do more for perl6

[15:19] *** dolmen joined
[15:19] *** dolmen is now known as dolmen_

[15:22] <dolmen_> P6 newbie here. Trying to install Cro with zen from a fresh "brew install rakudo-star". But http://ecosystem-api.p6c.org/projects1.json seems to be unavailable...

[15:22] <dolmen_> s/zen/zef/

[15:23] <timotimo> yes, we've had some trouble with our servers; you can wait for it to time out, but that will take some time

[15:23] <timotimo> i believe you can "git clone" zef and "perl6 -I . bin/zef install ." to get an up-to-date zef that handles the situation a lot better

[15:24] *** Manifest0 left
[15:24] *** patrickb left
[15:27] <dolmen_> Even curl times out. Will an updated zef switch to another server?

[15:28] <timotimo> yes

[15:28] <timotimo> https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json and https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json

[15:29] *** Manifest0 joined
[15:30] *** mowcat joined
[15:37] *** Manifest0 left
[15:38] *** zakharyas left
[15:42] *** robertle left
[15:43] *** Manifest0 joined
[15:48] *** andrzejku joined
[15:55] <dolmen_> Looking for help with Cro::HTTP::Client...

[15:56] <dolmen_> How can I initialize a Cro::HTTP::Client::CookieJar with known values? https://modules.perl6.org/dist/Cro::HTTP:cpan:JNTHN/lib/Cro/HTTP/Client/CookieJar.pm6

[16:00] <timotimo> doesn't look like you can, without going via Cro::Response (which you probably can construct manually)

[16:00] <timotimo> Cro::HTTP::Response i mean

[16:00] <timotimo> btw #cro exists on this server, too

[16:07] <jnthn> Yeah, you'd need to do it by constructing a Cro::HTTP::Response for now, though there's no reason we can't provide a method that lets one do it by passing in a `Cro::HTTP::Cookie` object

[16:07] <jnthn> Feel free to add an issue to request that

[16:07] *** dolmen_ left
[16:08] *** Manifest0 left
[16:10] <clarkema> speaking of Cro, does it support digest auth?  I couldn't find a dial to tweak to persuade it to make client requests using anything other than basic

[16:14] *** Manifest0 joined
[16:15] *** scimon left
[16:15] <jnthn> clarkema: Not yet, no

[16:19] <ugexe> "Note that all hyper operators are candidates for autothreading and will cause tears if the methods have side effects"

[16:19] <ugexe> this description of hyperoperators is incorrect, yes?

[16:20] *** Manifest0 left
[16:21] <ugexe> unless i misunderstand it, it seems to imply "autothreading" means it might be run on multiple thrads

[16:25] *** Manifest0 joined
[16:26] *** netrino left
[16:26] <xinming> m: my Code &t; &t = -> () { }; &t.perl.say;

[16:26] <camelia> rakudo-moar 3c5a53229: OUTPUT: «Type check failed in assignment to &t; expected Callable[Code] but got Block (-> $ () { #`(Block|77...)␤  in block <unit> at <tmp> line 1␤␤»

[16:26] <xinming> m: my &t; &t = -> () { }; &t.perl.say;

[16:26] <camelia> rakudo-moar 3c5a53229: OUTPUT: «-> $ () { #`(Block|66520744) ... }␤»

[16:27] <jnthn> xinming: You're there declaring that &t returns something of type Code

[16:27] <xinming> m: my Code &t; &t = sub () { }; &t.perl.say;

[16:27] <camelia> rakudo-moar 3c5a53229: OUTPUT: «Type check failed in assignment to &t; expected Callable[Code] but got Sub (sub { #`(Sub|63557472...)␤  in block <unit> at <tmp> line 1␤␤»

[16:27] <xinming> jnthn: Thanks, I didn't even ask the question yet. ;-)

[16:27] <jnthn> Same as `my Int @t` would mean that the elements are Int :)

[16:28] <xinming> jnthn: What I was going to ask is, what does 'my Code &t' exactly do, And you answered that already.

[16:28] <jnthn> ugexe: I think the description is correct; we don't yet do it, but @foo>>.bar would certainly parallelize

[16:28] <jnthn> um, *could certainly

[16:29] <clarkema> I'm back package building again.  I'm trying to build rakudo from the current Star tarball, with moar and nqp both built and installed @2019.03

[16:29] <timotimo> is that in the docs? perhaps it should point out that "rakudo doesn't do it yet, but if you want it now, use .hyper.map(...)

[16:29] <timotimo> .o( Starball )

[16:29] <clarkema> Which I try to build rakudo itself I get:

[16:29] <clarkema> Stage parse      : Cannot find method 'instructions' on object of type MAST::InstructionList at src/vm/moar/Perl6/Ops.nqp:512  (blib/Perl6/Ops.moarvm:push_ilist)

[16:29] <timotimo> that sounds like a version mismatch

[16:29] <ugexe> jnthn: does autothread mean parallelize? i thought it was related to junctions (which short-circuit)

[16:30] <xinming> jnthn: Another questions is, can await $promises, and with $promises, we also do await?

[16:30] <timotimo> an older rakudo trying to use the newer nqp that doesn't have MAST any more, or a newer rakudo using an older nqp that doesn't have the new MAST-replacement yet?

[16:30] <timotimo> please verify that it's actually using the versions of nqp and moarvm that you're expecting it to

[16:30] <timotimo> perhaps the --prefix=foo is either not the same for all, or has some leftovers from an earlier attempt?

[16:31] <xinming> I think I meet a bug, which is nested await calls, and I may get error, I forgot the error. After I changed to use >>.   It works fine.

[16:31] <clarkema> I originally suspected something like that, but on my main machine I'm running a pure Star build, which has the same versions of nqp and moar

[16:31] <clarkema> I'll double check I don't have any left-overs though

[16:31] <xinming> So, I'd think it's a bug, But I don't have time to get where there problem is actually. But I believe it's Promise related.

[16:31] <xinming> because the error is some kind of, "already awaited" something

[16:32] <timotimo> "already awaited" should be just fine. perhaps you get "this seq has already been consumed" or something?

[16:32] <xinming> I'll later change to old code and get the error.

[16:33] <ugexe> https://docs.perl6.org/language/glossary#Autothreading defines it as "This process of separating junction arguments into multiple calls to a function is called autothreading."

[16:34] <ugexe> maybe that should be changed?

[16:34] *** jmerelo joined
[16:35] <timotimo> yeah, the word is overloaded in the docs unfortunately

[16:35] <timotimo> it's more an "multiinvoking" %)

[16:35] <timotimo> invokespreading

[16:35] <timotimo> multi-eval?

[16:38] <clarkema> I can't find any trace of bad versions -- this is a new VM and if i remove the nqp and moarvm RPMs it's clean

[16:38] <jnthn> ugexe: Ah, yeah, auto-threading is probably not a good word to ue their indeed, I'd just say "candiates for parallelism"

[16:38] <jmerelo> Can someone please raise a RFE issue?

[16:39] <jnthn> xinming: What is $promises? In principle if you have a Promise that resolves to another Promise then you could await the nested one though; there's no automatic Promise "flattening" or anything

[16:41] <timotimo> clarkema: that's certainly odd already; can you give the output of --version? just to be extra sure?

[16:43] <clarkema> timotimo: actually, I think I might have a confused version of the star tarball

[16:43] <clarkema> just a sec, let me try a refresh

[16:43] <timotimo> where did you get it from if i may ask?

[16:44] *** robertle joined
[16:44] <clarkema> I've lost track now -- i tried all sorts of things last night

[16:44] <clarkema> the version on the main website is ok though, I've just checked

[16:46] <clarkema> bah

[16:46] <clarkema> All that time assuming I'd built nqp and moar incorrectly, and it was actually rakduo 2018.10

[16:46] <clarkema> Thanks timotimo 

[16:47] <clarkema> The package still isn't building correctly, but at least it's failing later, which feels like progress

[16:47] <Geth_> ¦ doc: f5c079db2b | (Nick Logan)++ (committed using GitHub Web editor) | doc/Language/operators.pod6

[16:47] <Geth_> ¦ doc: Clarify parallelism of hyper operators

[16:47] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/f5c079db2b

[16:48] <timotimo> phew

[16:48] <jmerelo> Um

[16:48] <jmerelo> I would really have preferred an issue.

[16:49] <timotimo> you wanted a discussion?

[16:49] <jmerelo> First, because it might not be the only reference.

[16:49] <jmerelo> Second, using parallelism is, well, arguable. Concurrency would be another option. Concurrency does not assume that things are happening at the same time.

[16:50] <jmerelo> Concurrency says "this has a high level interface that, when available, will use different threads". Parallelism... Well, I don't know.

[16:51] <jmerelo> At any rate, we would still need the issue if only to unify the terminology across all the documentation, (maybe) add a test and (maybe) add something to the glossary.

[16:51] <ugexe> it is the only incorrect reference. i checked.

[16:57] *** Manifest0 left
[16:57] <jmerelo> timotimo: Reading through the logs now. We don't like things like "we don't do this now", because that's hell to maintain. You simply have to check every time if we're doing it or not.

[16:58] <timotimo> ah

[16:58] <jmerelo> Reading through the log before I arrived, if you're not happy with an issue, a link to this discussion in the commit message would have also been a good thing.

[16:59] <timotimo> you can still put a comment on the commit

[16:59] <jmerelo> You can't imagine how difficult is to maintain the documentation if you don't have the context of why a change has ocurred. It's difficult enough as it is, having to dig through Rakudo and roast commit logs and issues, not to mention source.

[17:00] <jmerelo> I'll create an issue and link to the commit.

[17:00] <jmerelo> not ideal, because the right thing would have been the commit linking the issue, but what's done is done.

[17:02] *** Manifest0 joined
[17:04] <xinming> jnthn: I do waited the nested promises. I'll change my code to use promise to repeat it. so I can get the error.

[17:07] *** molaf joined
[17:13] *** [particle]1 joined
[17:17] *** [particle] left
[17:17] *** ufobat joined
[17:17] *** MidCheck joined
[17:28] *** reach_satori_ left
[17:29] *** Manifest0 left
[17:32] *** domidumont joined
[17:32] *** patrickb joined
[17:34] *** Manifest0 joined
[17:37] *** raschipi joined
[17:38] *** domidumont left
[17:38] *** domidumont joined
[17:39] *** Manifest0 left
[17:43] *** Manifest0 joined
[17:49] *** dolmen joined
[17:49] <xinming> m: my @x = sub ($arg) { }, sub (($arg)) {}, -> ($arg) { }, -> $arg { }; @x.map: *.perl.say;

[17:49] <camelia> rakudo-moar 3c5a53229: OUTPUT: «sub ($arg) { #`(Sub|77151064) ... }␤sub ($ (Any $arg)) { #`(Sub|78724208) ... }␤-> $ ($arg) { #`(Block|78858056) ... }␤-> $arg { #`(Block|78858128) ... }␤»

[17:50] <xinming> anyone here knows, what is the different between sub (($arg)) { }   vs -> ($arg) { }?

[17:50] <xinming> sub ($ (Any $arg)) { #`(Sub|78724208)      vs     -> $ ($arg) { #`(Block|78858056)

[17:51] <xinming> I know code is different from block, But I found, that  with  -> ($arg) { }      the signature is   $ ($arg)    But with sub (($arg)) { }     It beceoms the Any $arg.

[17:51] <xinming> Is it because sub signatures are more "detailed"?

[17:52] <timotimo> the default type for sub arguments is Any, the default for pointy blocks is Mu, but i don't think that's why

[17:53] <timotimo> m: sub blorp(($arg)) { say $arg.perl }; blorp([Mu])

[17:53] <camelia> rakudo-moar 3c5a53229: OUTPUT: «Type check failed in binding to parameter '$arg'; expected Any but got Mu (Mu)␤  in sub blorp at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:53] *** dolmen is now known as dolmen_

[17:53] <timotimo> so the default in subsignatures is Any, too

[17:53] <timotimo> m: my &blorp = -> ($arg) { say $arg.perl }; blorp([Mu])

[17:53] <camelia> rakudo-moar 3c5a53229: OUTPUT: «Mu␤»

[17:53] *** cpan-p6 left
[17:53] <timotimo> interesting, here it's Mu, too

[17:53] <dolmen_> jnthn, For my CookieJar request it looks like a PR already exists: https://github.com/croservices/cro-http/pull/39

[17:54] <timotimo> so that could be the resaon why it looks different

[17:54] *** dolmen_ left
[17:54] *** cpan-p6 joined
[17:54] *** cpan-p6 left
[17:54] *** cpan-p6 joined
[17:57] *** johnjohn101 joined
[18:04] *** domidumont1 joined
[18:06] *** domidumont left
[18:09] <mst> query tyldis

[18:09] <mst> bah

[18:24] *** skids joined
[18:25] *** Manifest0 left
[18:27] <patrickb> tadzik: Can you have a look at https://github.com/tadzik/rakudobrew/pull/136 ?

[18:28] *** sauvin left
[18:30] *** Manifest0 joined
[18:32] <Geth_> ¦ doc: 2b770d5173 | Coke++ | xt/words.pws

[18:32] <Geth_> ¦ doc: learn new words

[18:32] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/2b770d5173

[18:32] <Geth_> ¦ doc: c9b99f30de | Coke++ | doc/Type/Range.pod6

[18:32] <Geth_> ¦ doc: Avoid .WHAT where possible, use name instead

[18:32] <Geth_> ¦ doc: 

[18:32] <Geth_> ¦ doc: ... But, because WhateverCode's ^name is funky, show .WHAT after

[18:32] <Geth_> ¦ doc: showing the funky name result.

[18:32] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/c9b99f30de

[18:37] *** jmerelo left
[18:42] *** pecastro joined
[18:42] *** mowcat left
[18:43] *** ufobat left
[18:49] *** sena_kun joined
[18:53] <masak> nine: cool!

[18:54] *** mowcat joined
[18:54] <masak> nine: I'm happy to gripe about things and be proven that actions classes do have a use ;)

[18:56] *** chee left
[18:58] *** kst joined
[19:06] *** domidumont1 left
[19:08] *** Manifest0 left
[19:09] *** chee joined
[19:13] *** Manifest0 joined
[19:15] *** johnjohn101 left
[19:23] *** MidCheck left
[19:24] <timotimo> oh hey tyil i just noticed synopsebot hasn't turned up yet; anything i can help you with?

[19:26] <tyil> I havent had the time to look at it, sorry :(

[19:26] <tyil> I'll be on the train to Eindhoven tomorrow, which is like an hour

[19:26] <tyil> I should be able to get something going then

[19:27] <timotimo> cool. don't worry about it until then :)

[19:31] *** natrys left
[19:43] *** raschipi left
[19:58] *** johnjohn101 joined
[19:58] *** reach_satori joined
[20:03] *** Manifest0 left
[20:07] <Geth_> ¦ doc: 786ca5a0f9 | (Elizabeth Mattijsen)++ | doc/Type/CompUnit/Repository/FileSystem.pod6

[20:07] <Geth_> ¦ doc: Improve CUR::FileSystem example

[20:07] <Geth_> ¦ doc: 

[20:07] <Geth_> ¦ doc: Fixes #2766

[20:07] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/786ca5a0f9

[20:09] *** Manifest0 joined
[20:11] *** kybr left
[20:15] *** Manifest0 left
[20:21] *** |oLa| joined
[20:23] *** Manifest0 joined
[20:33] <Xliff> nine: Nice! Does Grammar::Highlighter handle the fail case?

[20:33] <yoleaux> 10:10Z <holyghost> Xliff: the server seems down

[20:33] <Xliff> .tell holyghost It seems to be up, now.

[20:33] <yoleaux> Xliff: I'll pass your message to holyghost.

[20:34] *** pmurias joined
[20:48] *** |oLa| left
[20:51] <nine> Xliff: err....maybe? :D

[20:52] *** johnjohn101 left
[21:00] <Xliff> nine: :)

[21:01] <Xliff> nine: Have you tried it with a failing grammar?

[21:12] *** radaikon joined
[21:14] *** skids left
[21:14] *** dolmen joined
[21:17] *** radaikon left
[21:24] *** Manifest0 left
[21:29] *** Manifest0 joined
[21:33] *** DrForr joined
[21:38] *** andrzejku left
[21:39] *** Manifest0 left
[21:47] *** Manifest0 joined
[22:03] *** Manifest0 left
[22:08] *** Manifest0 joined
[22:09] *** rindolf left
[22:17] *** Manifest0 left
[22:22] *** Manifest0 joined
[22:24] *** ayerhart left
[22:25] *** ayerhart joined
[22:31] *** Manifest0 left
[22:36] *** Manifest0 joined
[22:41] *** patrickb left
[22:42] *** Manifest0 left
[22:47] *** Manifest0 joined
[22:47] *** dolmen left
[22:48] *** dolmen joined
[22:48] *** dolmen left
[22:55] *** mowcat left
[22:57] *** pecastro left
[23:18] *** pmurias left
[23:25] *** sena_kun left
[23:31] *** Manifest0 left
[23:36] *** Manifest0 joined
[23:39] *** clarkema left
[23:52] *** Manifest0 left
[23:57] *** Manifest0 joined
