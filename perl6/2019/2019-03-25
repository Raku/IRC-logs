[00:04] *** leont left
[00:06] <ugexe> Because ‘use lib’ changes the repo chain 

[00:23] *** raycatwhodat joined
[00:24] <raycatwhodat> Could someone give me a rundown on when you'd use flip-flops?

[00:24] *** patrickz joined
[00:25] <TreyHarris> raycatwhodat: They're usually used in line-by-line processing to switch into and out of states. Like, to capture a HERE-doc

[00:27] <raycatwhodat> Interesting.

[00:27] <raycatwhodat> Thank you.

[00:27] *** patrickb left
[00:27] <b2gills> raycatwhodat: Really the flipflops are from Awk and Sed

[00:28] <TreyHarris> The loop { } construct in Perl 6 arguably makes it even less useful than it was in Perl 5, which was already "not very"

[00:28] <TreyHarris> The freeform loop encourages you to stick exit and skip conditions wherever needed

[00:29] <raycatwhodat> Gotcha.

[00:42] <SmokeMachine> Some one could please comment on this?! I can’t decide if it’s a great idea or if I’m just crazy... https://github.com/FCO/Red/issues/15#issuecomment-476018889

[00:42] <yoleaux> 24 Mar 2019 16:23Z <tbrowder> SmokeMachine: working PR has been pushed

[00:44] *** MidCheck joined
[00:45] <SmokeMachine> tbrowder: great!

[00:47] *** netrino_ left
[00:49] *** aborazmeh joined
[00:49] *** aborazmeh left
[00:49] *** aborazmeh joined
[00:50] *** leont joined
[00:51] <AlexDaniel> greppable6: fff

[00:51] <greppable6> AlexDaniel, 1026 lines, 110 modules: https://gist.github.com/5f2e4a5f5822649f1a6b3d47d13382cc

[00:51] <AlexDaniel> greppable6: \sfff\s

[00:51] <greppable6> AlexDaniel, 9 lines, 5 modules: https://gist.github.com/48430ffc160a1740e0ae218197dc51bd

[00:52] <AlexDaniel> greppable6: \sff\s

[00:52] <greppable6> AlexDaniel, 67 lines, 16 modules: https://gist.github.com/90f29f000a1c725e05c76da1b3288ee4

[00:53] <AlexDaniel> raycatwhodat: here's an example from the ecosystem: https://github.com/moritz/perl6-all-modules/blob/1a49924f0d14317b0364f6f665a6c19cbf348ce0/cpan/WARRINGD/PDF-Font-Loader/lib/PDF/Font/Loader/Type1/Stream.pm#L36

[00:56] *** w_richard_w joined
[01:21] *** Khisanth left
[01:34] *** Khisanth joined
[01:57] *** aborazmeh left
[02:13] *** SqrtNegInf left
[02:30] *** zakharyas joined
[02:47] *** patrickz left
[02:52] *** zakharyas1 joined
[02:55] *** zakharyas left
[03:05] *** jaja left
[03:08] *** zakharyas joined
[03:09] *** zakharyas1 left
[03:21] *** ufobat__ joined
[03:25] *** ufobat_ left
[03:26] *** Sgeo left
[03:34] *** Sgeo joined
[03:36] <Geth> ¦ doc: softmoth++ created pull request #2697: Align Mu.so & Mu.not docs with design

[03:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2697

[03:40] *** zakharyas left
[03:45] *** leont left
[03:46] *** Sgeo_ joined
[03:49] *** Sgeo left
[04:14] *** MidCheck left
[04:15] *** Sgeo__ joined
[04:18] *** Sgeo_ left
[04:36] *** Cabanoss- left
[04:40] *** Cabanossi joined
[04:49] *** brainbuz left
[05:01] *** mowcat left
[05:07] *** [Sno] left
[05:52] *** curan joined
[05:52] *** kurahaupo left
[05:53] *** kurahaupo joined
[05:58] *** kurahaupo left
[05:58] *** kurahaupo joined
[06:10] *** aindilis left
[06:20] *** aindilis joined
[06:30] *** robertle left
[06:32] *** MasterDuke left
[06:38] *** Sgeo__ left
[06:38] *** Sgeo__ joined
[06:41] *** jmerelo joined
[06:47] <Geth> ¦ doc: 6782472238 | (Luis F. Uceta)++ | doc/Type/List.pod6

[06:47] <Geth> ¦ doc: Revise examples in the intro to lists.

[06:47] <Geth> ¦ doc: 

[06:47] <Geth> ¦ doc: Also move sentence about .item immediately after code snippet where

[06:47] <Geth> ¦ doc: it's first used. refs #2679

[06:47] <synopsebot> Link: https://doc.perl6.org/type/List

[06:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6782472238

[06:47] <Geth> ¦ doc: d95a8e6b6a | (Luis F. Uceta)++ | doc/Type/List.pod6

[06:47] <Geth> ¦ doc: Reword sentence in the intro to lists

[06:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d95a8e6b6a

[06:47] <Geth> ¦ doc: 6b2ed9d13f | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/List.pod6

[06:47] <Geth> ¦ doc: Merge pull request #2691 from uzluisf/master

[06:48] <Geth> ¦ doc: 

[06:48] <Geth> ¦ doc: Revise examples in the intro to lists.

[06:48] <Geth> ¦ doc: Thanks!

[06:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6b2ed9d13f

[06:51] *** MidCheck joined
[07:02] *** kurahaupo left
[07:03] *** kurahaupo joined
[07:06] *** domidumont joined
[07:09] *** Sgeo_ joined
[07:10] *** abraxxa joined
[07:12] *** Sgeo__ left
[07:29] *** jmerelo left
[07:38] *** reach_satori left
[07:39] *** reach_satori joined
[07:44] *** sena_kun joined
[07:47] *** abraxxa left
[07:48] *** abraxxa joined
[07:52] *** abraxxa left
[08:07] *** abraxxa joined
[08:27] *** rindolf joined
[08:28] *** renormalist joined
[08:36] *** robertle joined
[08:44] *** Sgeo__ joined
[08:47] *** Sgeo_ left
[08:54] *** MidCheck left
[09:00] *** dakkar joined
[09:01] <moritz> cd

[09:02] <moritz> sorry, wrong window

[09:03] <El_Che> moritz: we upgrade to blueray some time ago :)

[09:13] <masak> moritz: too late, you're now in your home directory here on #perl6 :P

[09:13] * masak .oO( it's pitch black. you're likely to be eaten by a ~/.grue )

[09:15] <El_Che> A group of trolls awakes and yells at you: "Perl is dead! Dead we tell you!"

[09:19] <SmokeMachine> Some one could please comment on this?! I can’t decide if it’s a great idea or if I’m just crazy... https://github.com/FCO/Red/issues/15#issuecomment-476018889

[09:21] *** patrickb joined
[09:32] *** netrino joined
[09:32] *** w_richard_w left
[09:41] <moritz> SmokeMachine: I've added a comment; I hope I haven't made things more confusing for you :D

[09:43] *** Brilpikk3wyn joined
[09:44] *** Brilpikk3wyn left
[09:52] <SmokeMachine> moritz: thanks!

[09:53] <SmokeMachine> moritz: the steps you describe are the same as I did, right? the difference is that its not the ORM that do that, right?

[09:53] *** netrino_ joined
[09:55] <moritz> SmokeMachine: at least the "change the code" part isn't done by the ORM

[09:55] *** netrino left
[09:55] <moritz> but rather by explicitly deploying a new software version

[09:55] <moritz> (which might or might not have been how you've thought about it)

[09:56] <SmokeMachine> moritz: the ORM would "change the code" because it would change the if clause on the code... sou would run another branch...

[09:56] <SmokeMachine> moritz: oh I got it! sorry, my English is terrible...

[09:57] <moritz> SmokeMachine: it's probably a valid tradeoff. I've spent some effort into automating deployments, so if I can keep the code simpler by doing more deployments, I generally do that

[09:57] <moritz> SmokeMachine: I realize that others might be in very different situations

[09:59] <SmokeMachine> moritz: I think the ORM giving you some information of how your migration is going could help to a non downtime migration...

[10:09] <moritz> SmokeMachine: agreed

[10:10] <SmokeMachine> moritz: so, do you think that having it would be good to Red?

[10:12] <moritz> SmokeMachine: yes

[10:13] <SmokeMachine> :)

[10:14] *** Black_Ribbon left
[10:17] *** netrino joined
[10:20] *** netrino_ left
[10:22] *** MilkmanDan left
[10:25] <patrickb> o/

[10:25] <patrickb> Is it possible to create continuation lines in heredocs?

[10:26] *** MilkmanDan joined
[10:34] *** renormalist left
[10:34] *** renormalist joined
[10:45] <sena_kun> m: my $a = $[Buf.new(12,3,67,97,114), Buf.new(12,3,71,80,83)]; say $a[0] ~ $a[1]; say [~] $a;

[10:45] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «Buf:0x<0C 03 43 61 72 0C 03 47 50 53>␤Cannot use a Buf as a string, but you called the Str method on it␤  in block <unit> at <tmp> line 1␤␤»

[10:45] <sena_kun> shouldn't it work?

[10:45] <sena_kun> ah, I see

[10:45] <sena_kun> m: my $a = $[Buf.new(12,3,67,97,114), Buf.new(12,3,71,80,83)]; say $a[0] ~ $a[1]; say [~] |$a;

[10:45] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «Buf:0x<0C 03 43 61 72 0C 03 47 50 53>␤Buf:0x<0C 03 43 61 72 0C 03 47 50 53>␤»

[10:52] *** reach_satori left
[10:52] *** reach_satori joined
[10:55] <sena_kun> m: say |Buf.new(1,2,3)

[10:55] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «123␤»

[11:06] *** netrino_ joined
[11:08] *** netrino left
[11:15] *** kst left
[11:23] *** domidumont left
[11:24] *** leont joined
[11:44] *** epony left
[11:45] *** Kaiepi left
[11:49] *** SCHAAP137 left
[11:50] *** Sgeo_ joined
[11:53] *** Sgeo__ left
[11:57] *** SCHAPiE joined
[12:36] <tbrowder> SmokeMachine: working on queries now with success, but have discovered a change needed in relationships to work with both create and query. i will  get to a good state for all 4 models, load and bulk query, and will push to PR. it will be a while before i can finish.

[12:38] <tbrowder> .tell SmokeMachine ^^

[12:38] <yoleaux> tbrowder: I'll pass your message to SmokeMachine.

[12:47] *** SergiusUA joined
[12:50] *** SergiusUA left
[12:51] *** SergiusUA joined
[12:53] *** domidumont joined
[12:56] *** SergiusUA left
[12:58] *** SergiusUA joined
[12:59] *** imcsk8 left
[13:01] *** imcsk8 joined
[13:18] <SmokeMachine> .

[13:18] <yoleaux> 12:38Z <tbrowder> SmokeMachine: ^^

[13:18] <SmokeMachine> tbrowder: great to here its working!

[13:20] *** discord63 joined
[13:22] *** ExtraCrispy left
[13:22] *** discord6 left
[13:22] *** ExtraCrispy joined
[13:23] *** discord63 is now known as discord6

[13:32] *** Guest27580 left
[13:36] *** mowcat joined
[13:49] *** netrino joined
[13:49] *** netrino_ left
[14:10] <AlexDaniel> ooof github is having some hard time

[14:30] *** woolfy left
[14:31] *** woolfy joined
[14:32] *** netrino left
[14:33] *** netrino_ joined
[14:41] *** SqrtNegInf joined
[14:51] *** curan left
[14:52] <leont> Where can I make GSoC propose again? GIR should definitely be on there

[14:52] <jnthn> GIR?

[14:54] <leont> GObject introspection

[14:55] <leont> It creates XML files that describe C interfaces.

[14:56] <leont> So if you combine that with NativeCall, you can load the GIR to automatically generate bindings for anything that uses gobject: gtk, gnome, gio, gstream, etc…

[14:57] <leont> (or at least that's the idea, I don't really know how integrating eventloops would work TBH)

[14:59] <jnthn> Ah, I see :)

[15:05] <leont> If you're on debianish, «apt search --names-only gir1.2» should give you some idea of what's available

[15:08] <leont> It's 238 libraries on my machine

[15:12] <El_Che> that would be cool

[15:13] <Xliff> leont: Do you know how to take .gir files and convert them back to .xml?

[15:14] <Xliff> Or better yet, the internal format for .gir?

[15:14] <Xliff> After a bit of research, the .xml is only the intermediate step. If you want to use GIR, you need to load the .gir files directly.

[15:18] *** xq joined
[15:18] <xq> is "raku" name for perl 6 officially adopted/approved?

[15:18] <xq> I don't see it on perl6.org

[15:19] <leont> Xliff: it seems you need to use the binary file instead, though gobject-introspection

[15:19] <leont> through

[15:21] <tadzik> xq: depends on your definition of "officially"

[15:21] <tadzik> but the person who announced it left the project over name disagreements, to my understanding

[15:22] <xq> I see https://marketing.perl6.org/id/1541379592/pdf_digital says it is Larry

[15:22] <tadzik> basically, they made their decision pretty much by themselves, without prior consultation, which led to conflicts and all

[15:22] <xq> Larry left?

[15:22] <tadzik> no, no

[15:22] <leont> Xliff: https://developer.gnome.org/gi/stable/

[15:23] <tadzik> Larry's words and opinions were slightly overreacted to, imho

[15:23] <tadzik> which led to the announcement and the brochure you linked

[15:23] <SmokeMachine> tadzik: Larry made the decision...

[15:23] <tadzik> I know he did :)

[15:24] <tadzik> but a single line on IRC that picked the preffered alternative name is hardly equivalent to renaming the language

[15:24] <tadzik> which is very much how this was advertised

[15:24] <discord6> <Rogue> A lot of people were asking for an alias, so Larry decided to go ahead and come up with one to avoid having multiple hanging around

[15:25] <El_Che> the single line was the single presence he had

[15:25] <SmokeMachine> I was reding it when he did... and hoping to he choose ofun (my preferred option...)

[15:25] <El_Che> so you can't blame zoffix for that

[15:25] <discord6> <Rogue> Zoffix was in favor of raku?

[15:25] <ugexe> there could have been 0 lines if he hadnt been forced to a deadline

[15:26] <tadzik> Rogue: yeah

[15:26] <El_Che> Rogue: Zoffix was in favour of an alias, whatever it was

[15:26] <SmokeMachine> tadzik: no... it was advertised as a alternative name... as (at least me understood) Larry was saying it should be...

[15:26] <discord6> <Rogue> I'd like to avoid explaining that Perl 6 is not like Perl 5 as much as the next guy, but aliasing the thing will just lead to awkward questions down the road

[15:27] <discord6> <Rogue> for me it's full rename or bust, and obviously there isn't going to be enough support for a full rename

[15:27] *** yoloi joined
[15:27] <yoloi> hi

[15:27] <yoloi> my nm's yolo

[15:27] <El_Che> Rogue: it's a pretty much "better than nothing" logic

[15:27] <yoloi> el chepe

[15:27] <xq> well, confusion achieved

[15:27] <discord6> <Rogue> I was trying to push for use of the alias on this discord server, but I gave up on that

[15:27] <yoloi> donde estas mi coca

[15:27] <SmokeMachine> hw wasn't forced for a dead line...

[15:28] <ugexe>  yes, he was

[15:28] <yoloi> where r huckrs

[15:28] <yoloi> i lk 4 huckers

[15:28] <xq> why is an alias better than nothing?

[15:28] *** yoloi left
[15:29] <discord6> <Rogue> There are/were a number of reasons for wanting some other name

[15:29] <Xliff> leont: Ah, great! This is useful! Thanks!

[15:29] <SmokeMachine> ugexe: he would be forced if someone have said to him "Give me a alternative name until XX/YY/ZZZZ or I will AAAAAAAAAA"

[15:29] <ugexe> thats exactly what happened though?

[15:30] <discord6> <Rogue> a. people get tired of explaining the distance in the relationship between classic Perl and Perl 6

[15:30] <xq> I can possibly see a reason in unconfusing various search engines

[15:30] <discord6> <Rogue> b. the name is presumably blocking Perl 5 from its next major version (but I personally don't think Perl 5 needs a next major version)

[15:30] <xq> but not sure if that matters enough

[15:31] <discord6> <Rogue> also searchability

[15:31] <discord6> <Rogue> although I generally search "perl6" and get fairly good results

[15:31] <xq> yeah

[15:31] <SmokeMachine> ugexe: no, was more like: "You said that would choose an alternative name, so, could you please choose it before the date xx/yy/zzzz to give time to make the brochures before "something I forgot"?"

[15:32] <discord6> <Rogue> Probably before the 6.d release?

[15:33] <ugexe> no, if the name wasnt chosen by such and such date then it was stated the community would vote on one. also larry even said soemthing along the lines of "hey i dont appreciate being rushed" aftering being badgered about the timeline towards the end

[15:33] <xq> ok, thanks for the info, I sorta see the picture now

[15:33] <discord6> <Rogue> I just hope this naming kerfuffle doesn't turn into a community disaster

[15:33] <xq> my main reason for asking is that I don't really like this name and I am seeing/checking if I can just pretend it doesn't exist and keep using perl 6 name

[15:33] <ugexe> i am surprised people are not aware of this. none of this happened in secret

[15:33] <xq> from what I've learned I guess I can

[15:35] <SmokeMachine> that was because he asked again...

[15:35] <discord6> <Rogue> ugexe - well, there's no one official channel through which news is propogated

[15:35] <jnthn> xq: Yes, lots of folks have just continued calling it Perl 6, and it was made very clear when the alias was selected that anyone wanting to simply call the langauge Perl 6 could do so.

[15:35] <discord6> <Rogue> and possibly the most official site, perl6.org, does not mention the alias on the homepage whatsoever

[15:35] <xq> alright

[15:39] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/03/25/2019-12-cool-truck/

[15:40] <ugexe> SmokeMachine: https://colabti.org/irclogger/irclogger_log/perl6?date=2018-10-18#l6 <-- proof of a deadline, proof of a stipulation, proof of a community vote if he didnt decide

[15:42] <SmokeMachine> ugexe: with that sentence... do you really think he is being forced to do anything?

[15:43] <lizmat> "I don't entirely appreciate this nudging the timeline up"  feels to me that TimToady felt he was being asked to do something sooner rather than later

[15:44] <ugexe> no. but im not going to dig up tons of irc logs to prove various points when that one line summarized everything nicely

[15:44] <Xliff> If you have class A { also does Positional; also does Iterator; has @!a handles «pull-one iterator elems AT-POS EXISTS-POS join :p6sort('sort')» ... };

[15:44] <ugexe> no in that he isn't being forced with a gun to his head

[15:44] <Xliff> Is there a way that A can still wrap calls to those methods handled by @!a?

[15:48] *** dogbert joined
[15:48] *** dogbert is now known as Guest5277

[15:50] <sena_kun> lizmat, "Missing math/statistics functions" <- a link won't hurt, otherwise "Comments welcome" statement is lonely. :)

[15:50] <sena_kun> lizmat++ # weekly

[15:52] <lizmat> sena_kun: the link was there, but missed a "  :-(  fixed now

[15:52] *** robertle left
[15:52] <sena_kun> \o/

[15:52] <sena_kun> thanks!

[15:53] <El_Che> Rogue: I wrote this at the time. https://nxadm.wordpress.com/2018/11/08/quo-vadis-perl/ (not too optimist about the name thing, and very negative about the status quo)

[15:54] <AlexDaniel> leont: not sure if anybody answered yet: https://github.com/perl-gsoc-2019/ideas

[16:02] *** MidCheck joined
[16:04] <SmokeMachine> lizmat: yes... and he would do it anyway... (that's how I read it...)

[16:06] <tbrowder> SmokeMachine: some interesting bits in p6 weekly about another p6 orm

[16:07] <tbrowder> DB::Xoos

[16:07] <SmokeMachine> yes... I had read that post...

[16:10] <SmokeMachine> I should write something like that for Red...

[16:16] *** jmerelo joined
[16:20] *** kurahaupo left
[16:20] *** sno joined
[16:20] *** sno left
[16:20] *** sno joined
[16:20] *** kurahaupo joined
[16:24] *** vrurg left
[16:27] *** vrurg joined
[16:34] *** patrickb left
[16:35] <tony-o> tbrowder: been out for a while, just haven't written any blogs since last PTS >.<

[16:35] <yoleaux> 23 Mar 2019 07:00Z <jmerelo> tony-o: great! Thanks!

[16:45] <tony-o> there's also Quicky for rapid prototyping

[16:46] <tony-o> https://github.com/tony-o/perl6-db-orm-quicky

[16:50] *** robertle joined
[16:51] *** guifa joined
[16:51] *** chrom joined
[16:51] <chrom> howdy - does anyone can provide a link to samples build with Cro - especially small webservers?

[16:53] <chrom> p6: say 4

[16:53] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «4␤»

[16:54] *** chrom is now known as wahnberger

[16:55] *** wahnberger left
[16:55] *** wahnberger_ joined
[16:56] <ugexe> https://cro.services/docs/intro/getstarted ?

[16:57] <wahnberger_> nah.. i am already using cro for some client stuff...but i didn't dig into the server side :/

[16:57] *** kurahaupo left
[16:58] *** kurahaupo joined
[16:58] <wahnberger_> for running internal websites..cro instead of using cgi over httpd/nginx etc..

[16:58] <tony-o> are you looking for how to configur nginx as a reverse proxy to cro ?

[16:59] <wahnberger_> no - just some samples how to use Cro on websites..with formulars, database stuff and so on

[17:00] <wahnberger_> not "on" websites..i mean Cro::HTTP::Server

[17:00] <tony-o> that getstarted doc ugexe linked to has how to get cro up and running using Cro::HTTP::Server

[17:00] <wahnberger_> i know how to route etc. and all the samples work very well..at leats I am a "need a sample" Guy :D

[17:01] <sena_kun> considering Cro::HTTP is not a web framework, but something that delivers stuff for you, you have to write templating, database access for yourself.

[17:02] <wahnberger_> yes - but how do I integrate my own templates or hand made sites into the Cro code

[17:02] <sena_kun> or more of "wire it in", of course, there are modules for templating and databases stuff. :)

[17:03] <tony-o> ah

[17:03] <wahnberger_> https://cro.services/docs/reference/cro-http-server

[17:03] *** kurahaupo left
[17:04] <wahnberger_> in the samples ..the code after a route like the "get" is directly append to this route

[17:04] *** kurahaupo joined
[17:04] <wahnberger_> but for "real" sites i need to write all that stuff not there but in diffrent file setc..

[17:05] <tony-o> something here might help https://cro.services/docs/reference/cro-http-router#Adding_custom_response_body_serializers

[17:05] <tony-o> for templating

[17:05] <sena_kun> wahnberger_, you surely can do it, write a subroutine somewhere, import it, then call it.

[17:05] <Xliff> Are there any templating systems out there for Perl6 ala Template Toolkit?

[17:06] <sena_kun> get 'foo', $id -> { handle-foo-request($id) }

[17:06] <sena_kun> or something around that.

[17:06] <tony-o> Xliff: there was moustache and one i wrote a long time ago out there, not sure either still work

[17:06] <sena_kun> Xliff, https://modules.perl6.org/search/?q=template <-

[17:07] <sena_kun> and Cro::WebApp. ;)

[17:07] <wahnberger_> yeah sena_kun, thats exactly what i mean

[17:07] <jnthn> wahnberger_: See https://cro.services/docs/structuring-services on how to structure and compose larger systems

[17:08] <wahnberger_> has anyone here used Cro for websites? :)

[17:08] <tony-o> yes

[17:09] <sena_kun> yes

[17:09] <wahnberger_> i wass searching around and found that there is nothing out there beside the well known clips and short docs

[17:10] <sena_kun> not that it's open sourced. :|

[17:11] <wahnberger_> yeh.. probably i takes a while 

[17:14] <wahnberger_> ok, last question :) is there some other documentaion about using Cro that the Docs on cro.services you would suggest?

[17:14] <wahnberger_> *than

[17:20] <Xliff> Actually, for websites, I wonder if it might be better to use Bailador. I will have to evaluate both that and Cro, TBH

[17:20] <jmerelo> wahnberger_: there might be something on the latest advent Calender

[17:21] <El_Che> is bailador's development active?

[17:21] <jmerelo> El_Che: yep, they released a new version a short time ago.

[17:21] <jmerelo> El_Che: ufobat is working on it, I think.

[17:21] <El_Che> good to hear

[17:21] <sena_kun> Xliff, it may be, though not sure what it's status. I'll be really excited to see an actual web framework built on top of Cro::HTTP.

[17:22] <jmerelo> El_Che: https://github.com/Bailador/Bailador 0.0.18 just released 3 weeks ago. ufobat is making an excellent job there.

[17:23] <tony-o> there is a yaml router module for cro that makes it nice for handling a lot of endpoints, am not recalling the name of it atm

[17:25] *** epony joined
[17:25] <wahnberger_> Uhm..Bailador looks comfortable for small internal websites

[17:26] <El_Che> ah, nice. ufobat__++

[17:26] <tony-o> does look really easy

[17:26] <wahnberger_> yep

[17:26] <wahnberger_> and they provide lots of samples to figure out how it can be used :D

[17:27] <wahnberger_> for guys like me

[17:29] *** Black_Ribbon joined
[17:30] *** natrys joined
[17:30] <wahnberger_> for me the concept looks very similar..but Cro says its NOT a framework while Balidors says it is

[17:31] <wahnberger_> oh..ok ..baile()

[17:31] <sena_kun> well, Cro is not a "Web Framework" for sure. A framework for building services using supplies - yes. :)

[17:33] *** dakkar left
[17:35] <tony-o> why do you not consider cro a framework?

[17:36] <ugexe> Cro is not a framework§

[17:36] <ugexe> Cro is a set of tools and libraries, rather than a framework.

[17:36] <wahnberger_> thats what the Cro guys says 

[17:36] <tony-o> yes but it does a lot of the things frameworks say, in spite of what is written in the docs

[17:36] <tony-o> s/say/do/

[17:37] <wahnberger_> https://cro.services/docs/structuring-services#Cro_is_not_a_framework

[17:37] <ugexe> The docs also go over why the distinction is mostly academic 

[17:37] <tony-o> just lack of complete MV* ?

[17:37] <wahnberger_> its about control flow i guess

[17:37] <sena_kun> tony-o, it is rather a tool for building chain of supplies made easy, with state, conditionals and other goodies. Other modules are "merely" examples of the approaches that happen to be useful.

[17:39] <sena_kun> tony-o, thus as one of Cro authors, I do not consider it to be a pure "Web Framework". In my own opinion(which may differ from public Cro team opinion, of course ;) ), Cro is potentially a much more powerful thing. Suggesting it as a web framework makes people think "Oh, I know this stuff, routes and get templates, right?", so they forget/don't know about what lies underneat.

[17:40] <sena_kun> right now, I am implementing LDAP protocol using Cro. Can I do it using Dancer/Mojolicious/Django/Whatever in the same way? :)

[17:40] <tony-o> that seems like the intention in not calling a framework there is to avoid the connotation of frameworks in general :-)

[17:41] <jnthn> The real point is that frameworks often try to own the overall application structure, while Cro is more like "I'll just do the stuff you need, but your application structure is yours"

[17:41] <kawaii> When I think of web framework I think Dancer, Catalyst and such

[17:41] <sena_kun> tony-o, I am against only "_WEB_ framework" thing. I am totally ok with "framework" word.

[17:41] <tony-o> got it

[17:41] <jnthn> Since in many cases, the web API or application is just one small corner of something much larger.

[17:44] <jmerelo> jnthn: you have mail from Google Summer of Code :-)

[17:46] <Xliff> m: role A[::T] { method a { given T { when uint8 | uint16 { say "Hello!"; }; }; }; my $a = 1 but A[uint8]; $a.a

[17:46] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3"; }; }; }; my $a = 1 but A[uint8]; $a.a7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loo…»

[17:47] <Xliff> m: role A[::T] { method a { given T { when uint8 | uint16 { say "Hello!"; }; }; }; |; my $a = 1 but A[uint8]; $a.a

[17:47] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Prefix | requires an argument, but no valid term found␤at <tmp>:1␤------> 3int8 | uint16 { say "Hello!"; }; }; }; |7⏏5; my $a = 1 but A[uint8]; $a.a␤    expecting any of:␤        prefix␤»

[17:47] <Xliff> m: role A[::T] { method a { given T { when uint8 | uint16 { say "Hello!"; }; }; }; }; my $a = 1 but A[uint8]; $a.a

[17:47] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «Hello!␤»

[17:47] <Xliff> m: role A[::T] { method a { given T { when uint8 | uint16 { say "Hello!"; }; }; }; }; my $a = 1 but A[Int]; $a.a

[17:47] <camelia> rakudo-moar 6ba54fb92: ( no output )

[17:55] <Xliff> I am getting this error: Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:

[17:56] *** kerrhau joined
[17:58] <tony-o> where?

[17:59] <Xliff> m: my $A = CArray[uint8].new; $a[0] = 16; my $B = nativecast(Pointer[uint8], $a); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[T], $a).deref }; }; }; }; my $a = $A but a[uint8]; $a.a

[17:59] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared. Did you mean '$A'?␤at <tmp>:1␤------> 3my $A = CArray[uint8].new; 7⏏5$a[0] = 16; my $B = nativecast(Pointer[u␤»

[17:59] <Xliff> m: my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $a); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[T], $a).deref }; }; }; }; my $a = $A but a[uint8]; $a.a

[17:59] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared. Did you mean '$A'?␤at <tmp>:1␤------> 3 16; my $B = nativecast(Pointer[uint8], 7⏏5$a); role A[::T] { method a { given T { ␤»

[18:00] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[T], $A).deref }; }; }; }; my $a = $A but a[uint8]; $a.a

[18:00] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «===SORRY!===␤Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:␤    (Bool:D: Mu \topic, *%_)␤    (Bool:U: \topic, *%_)␤»

[18:00] <Xliff> ^^ Why is that error getting thrown?

[18:01] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[T], $A) }; }; }; }; my $a = $A but a[uint8]; $a.a

[18:01] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «===SORRY!===␤Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:␤    (Bool:D: Mu \topic, *%_)␤    (Bool:U: \topic, *%_)␤»

[18:01] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer, $A) }; }; }; }; my $a = $A but a[uint8]; $a.a

[18:01] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[18:01] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer, $A) }; }; }; }; my $a = $A but A[uint8]; $a.a

[18:01] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «CArray representation requires a typed array␤  in block <unit> at <tmp> line 1␤␤»

[18:01] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer, $A) }; }; }; }; my $a = $A but A[uint8]; 

[18:01] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «CArray representation requires a typed array␤  in block <unit> at <tmp> line 1␤␤»

[18:03] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[T], $A) }; }; }; }; 

[18:03] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «===SORRY!===␤Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:␤    (Bool:D: Mu \topic, *%_)␤    (Bool:U: \topic, *%_)␤»

[18:03] <Xliff> ^^ That is the error.

[18:03] <Xliff> Looks like it is triggered by the presence of Pointer[T]

[18:04] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[::T], $A) }; }; }; }; 

[18:04] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «===SORRY!===␤Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:␤    (Bool:D: Mu \topic, *%_)␤    (Bool:U: \topic, *%_)␤»

[18:04] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer, $A) }; }; }; }; 

[18:04] <camelia> rakudo-moar 6ba54fb92: ( no output )

[18:04] <Xliff> Because ^^that works

[18:04] <jnthn> jmerelo: Uff, I'm quite behind with mail. Will try and dig it out tonight.

[18:04] <jnthn> dinner; bbl

[18:04] <sena_kun> m: my $a = "FooBar"; $a.subst(/(\w+)/, { $0.lc }, :1st).say;

[18:04] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «foobar␤»

[18:04] <jmerelo> jnthn: thanks!

[18:04] <sena_kun> why is it not "fooBar"?

[18:05] <sena_kun> d'oh

[18:05] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[uint8], $A) }; }; }; }; 

[18:05] <camelia> rakudo-moar 6ba54fb92: ( no output )

[18:05] <sena_kun> m: my $a = "FooBar"; $a.subst(/(\w)/, { $0.lc }, :1st).say;

[18:05] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «fooBar␤»

[18:06] <Xliff> OK. So better question. How can I apply a role parameter to another role parameter? I think that's the problem I am running into

[18:06] <tony-o> do you just want to apply a role to it after it's been instantiated?

[18:06] <Xliff> m: role A[::T] { method a { say T; }; }; role B[::S] { also does A[S]; method b { self.a; }; }; 

[18:06] <camelia> rakudo-moar 6ba54fb92: ( no output )

[18:07] <Xliff> m: role A[::T] { method a { say T; }; }; role B[::S] { also does A[S]; method b { self.a; }; };  my $a = 1 but B[Int] $a.a

[18:07] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 b { self.a; }; };  my $a = 1 but B[Int]7⏏5 $a.a␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement en…»

[18:07] <Xliff> m: role A[::T] { method a { say T; }; }; role B[::S] { also does A[S]; method b { self.a; }; };  my $a = 1 but B[Int]; $a.a

[18:07] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «(Int)␤»

[18:07] <Xliff> m: role A[::T] { method a { say T; }; }; role B[::S] { also does A[S]; method b { self.a; }; };  my $a = 1 but B[Int]; $a.b

[18:07] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «(Int)␤»

[18:08] <sena_kun> .oO ( should I write a LDIF module or not )

[18:08] *** rindolf left
[18:08] <tony-o> m: role X { method x { say "x"; } }; role Y { method y { say "y"; } }; my $a = 5; $a does X; $a does Y; $a.x; $a.y;

[18:08] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «x␤y␤»

[18:10] <tony-o> can also write it: ($a does X) does Y;

[18:10] <tony-o> and probably 30 other way

[18:11] *** domidumont left
[18:11] *** rindolf joined
[18:13] <Xliff> m: use NativeCall; my $a = Pointer[uint8].new; $a.deref = 9; 

[18:13] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «Can't dereference a Null Pointer␤  in method deref at /home/camelia/rakudo-m-inst-1/bin/../share/perl6/sources/8660F65A7B3492675BB3B2058DB30E411A4C4E54 (NativeCall::Types) line 58␤  in block <unit> at <tmp> line 1␤␤»

[18:13] <Xliff> WTF? If I've instantiated a Pointer, how can it be null if derefed?

[18:19] *** domidumont joined
[18:23] <timotimo> you've created a pointer, which has a memory location that can point to somtehing ... i think?

[18:24] <timotimo> but you don't have the memory location to store stuff at yet

[18:24] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[T], $A) }; }; }; }; 

[18:24] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «===SORRY!===␤Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:␤    (Bool:D: Mu \topic, *%_)␤    (Bool:U: \topic, *%_)␤»

[18:24] <timotimo> you'll usually want a CArray for that

[18:24] *** sauvin left
[18:24] <Xliff> timotimo: ^^ Why the error?

[18:25] <timotimo> does the --ll-exception look like you'd expect if it happens inside method a?

[18:26] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer, $A) }; }; }; }; 

[18:26] <camelia> rakudo-moar 6ba54fb92: ( no output )

[18:26] <Xliff> The problem is the "Pointer[T]"

[18:26] <timotimo> i'm not seeing role A be used anywhere

[18:26] <Geth> ¦ doc: b694b90752 | (JJ Merelo)++ | doc/Language/modules.pod6

[18:26] <Geth> ¦ doc: Updates to current version of the language, closes #2698

[18:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b694b90752

[18:26] <synopsebot> Link: https://doc.perl6.org/language/modules

[18:26] <Xliff> role A doesn't need to be used to generate the error.

[18:26] <timotimo> oh, so it's compile-time?

[18:27] <Xliff> Yes.

[18:27] <Xliff> Would this be a legitimate solution:

[18:27] <Xliff> m: use NativeCall; my $A = CArray[uint8].new; $A[0] = 16; my $B = nativecast(Pointer[uint8], $A); role A[::T] { method a { given T { when uint8 | uint16 { say nativecast(Pointer[::(T)], $A) }; }; }; }; 

[18:27] <camelia> rakudo-moar 6ba54fb92: ( no output )

[18:28] <Xliff> All I see is that pushing the error from compile-time to run-time.

[18:28] <El_Che> sena_kun: what do you do with ASN1 data? Planning on releasing that as a different module?

[18:28] <sena_kun> El_Che, I have a MOP-driven type generator as a released module. :P

[18:29] <timotimo> ok so it's exploding in parameterize inside nativecalll::types called by World's parameterize_type_with_args

[18:29] <timotimo> maybe Pointer just needs to learn about this

[18:29] <sena_kun> El_Che, so in my module I am doing, basically, "use ASN::META <file docs/ldap.asn plugin resources/asn-plugin>;" <- boom, I have all types created for me.

[18:30] <sena_kun> I am now adding operations like add/modify and so on, and fixing the issues with the whole stack along the way.

[18:30] <timotimo> m: role Foo[T] { method a { Pointer[T] } }

[18:30] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'T' in parameter declaration.␤at <tmp>:1␤------> 3role Foo[T7⏏5] { method a { Pointer[T] } }␤»

[18:30] <sena_kun> once I'll have something more or less useable as client, I'll ping.

[18:30] <timotimo> m: role Foo[::T] { method a { Pointer[T] } }

[18:30] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Pointer used at line 1␤␤»

[18:30] <timotimo> m: use NativeCall::Types; role Foo[::T] { method a { Pointer[T] } }

[18:30] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Pointer used at line 1␤␤»

[18:30] <timotimo> m: use NativeCall; role Foo[::T] { method a { Pointer[T] } }

[18:30] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «===SORRY!===␤Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:␤    (Bool:D: Mu \topic, *%_)␤    (Bool:U: \topic, *%_)␤»

[18:31] <timotimo> mhm

[18:31] <Xliff> There it is.

[18:31] <timotimo> m: use NativeCall; role Foo[::T] { method a { BEGIN say T.REPR } }

[18:31] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «Uninstantiable␤»

[18:31] <sena_kun> afk

[18:32] *** MidCheck left
[18:32] <timotimo> so the first thing that code does is try to ~~ the value against Int|Num|Bool

[18:32] <timotimo> which it doesn't like very much

[18:33] <ugexe> doesnt ACCEPTS(Bool:U: T) actually match (Bool:U: \topic, *%_) though?

[18:34] <El_Che> sena_kun: impressive

[18:35] <Xliff> timotimo: So wouldn't pushing that check to run-time fix the issue?

[18:36] <timotimo> ugexe: it probably should, though perhaps that has to have a Mu in there?

[18:36] <timotimo> m: use NativeCall; role Foo[::T] { method a { BEGIN say T ~~ Bool } }

[18:36] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  Cannot resolve caller ACCEPTS(Bool:U: T); none of these signatures match:␤      (Bool:D: Mu \topic, *%_)␤      (B…»

[18:36] <timotimo> m: use nqp; use NativeCall; role Foo[::T] { method a { BEGIN say nqp::istype(T, Bool) } }

[18:36] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «0␤»

[18:36] <timotimo> or just do this, but then you'll get the exception it's supposed to throw when that check fails

[18:37] <timotimo> which is "you can only use ints or strings or carray/cpointer/cstruct/cppstruct/cunion into a pointer"

[18:38] <Xliff> OK, so nqp::istype(T, <type>) will NOT throw an error at compile time.

[18:38] <timotimo> right

[18:38] <Xliff> Still, that makes it so the code is more klunky. If I can push it to run-time and not mess with code, I will do that.

[18:38] <Xliff> Thanks! # timotimo++

[18:39] <timotimo> you may have to create that Pointer[T] manually by using Pointer.^parameterize

[18:40] <Xliff> How would that be done? Are there write-ups for that online?

[18:40] <Xliff> Or something in the code?

[18:41] <timotimo> m: use NativeCall; role Foo[::T] { method doit { say Pointer.^parameterize(T).perl } }; Foo[uint8].doit

[18:41] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «NativeCall::Types::Pointer[uint8]␤»

[18:41] <Xliff> nativecast(Pointer[::(T)], $n.data) <- I will try this at run-time to see if it blows up.

[18:41] <timotimo> use my code, that ought to do the trick

[18:42] <Xliff> OK. Will try.

[18:42] <Xliff> Gotta wait for the full recompile and add stats for AlexDaniel. :)

[18:42] <Xliff> I shouldn't need the .perl though. Right?

[18:43] <timotimo> no, that's just for show

[18:43] <AlexDaniel> stats for me? 🎉🎉🎉

[18:43] <timotimo> the Pointer.^parameterize(T) goes directly into the nativecast as first argument, or via a variable should also be fine

[18:43] <AlexDaniel> but what are we talking about? :)

[18:44] <timotimo> maybe stats about compilation speed or something?

[18:47] <Geth> ¦ doc: a2254ac37c | (JJ Merelo)++ | 2 files

[18:47] <Geth> ¦ doc: Eliminates grammar, moves to Cool, closes #2685

[18:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a2254ac37c

[18:47] <AlexDaniel> I hope it's about malloc_trim

[18:48] <AlexDaniel> ( https://github.com/MoarVM/MoarVM/pull/1072 )

[18:51] <timotimo> do note that "many small objects" don't necessarily go via malloc at all; only if they have some "unmanaged data" to them, like a CArray would

[18:51] <timotimo> though i believe we use malloc for both hashes and arrays

[18:52] <AlexDaniel> timotimo: yeah, any idea on how to benchmark this?

[18:53] <timotimo> has anybody tried getting that visualizer to work from that ruby performance blog post about malloc_trim?

[18:53] <AlexDaniel> I'd love to see something like a worst case scenario, when a looot of small objects need to be gc-ed

[18:53] <AlexDaniel> I don't think so…

[18:56] <timotimo> AFKBBL

[18:56] <timotimo> it'd be great if someone would try it; even if no success, a quick write-up of potential trouble would be helpful

[18:57] *** domidumont left
[19:04] * AlexDaniel hides

[19:04] *** lucasb joined
[19:25] *** zachk joined
[19:34] <Geth> ¦ whateverable: 9392cbb3fb | (Lucas Buchala)++ (committed using GitHub Web editor) | xbin/Releasable.p6

[19:34] <Geth> ¦ whateverable: Update GitHub blocker label

[19:34] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/9392cbb3fb

[19:35] <jmerelo> Is there a way to type Unicode characters in comma?

[19:37] <sena_kun> jmerelo, I don't think there is. We had a ticket to make it auto-convert operators to Unicode, but I honestly don't remember its state, likely it wasn't implemented enough to be merged. And it was like half of year ago or so iirc.

[19:39] <jmerelo> sena_kun: thanks! I have been looking for a jetbrains plugin that does it, but the one there is seems outdated... 

[19:43] *** a3f left
[19:45] *** a3f joined
[19:45] <AlexDaniel> lucasb: why was it renamed, btw?

[19:48] <AlexDaniel> not objecting, just wanna know the reasoning

[19:48] <lucasb> AlexDaniel: sorry, I guess I did it out of personal taste to match the other labels. I can rename back to the previous state

[19:49] <lucasb> unicodey char was distracting :D

[19:49] <lucasb> but I guess I liked it. Really, I can rename back if you wish :)

[19:49] <AlexDaniel> no it's fine, I remember someone saying that it looks too urgent

[19:49] <lucasb> *but I guess you liked it (the unicode char)

[19:49] <AlexDaniel> yeah I loved it xD

[19:50] <AlexDaniel> leave it as it is now

[19:51] *** domidumont joined
[19:52] *** domidumont left
[19:52] <lucasb> BTW, all the other renamings I did was out of experiment. The labels naming can be further tunned to better describe the issues they label.

[19:53] <AlexDaniel> lucasb: ah yes, I renamed one of the new labels, I think

[19:54] <AlexDaniel> it was an acronym and even I didn't know what it meant

[19:54] <lucasb> yeah, MMD :)

[20:03] *** zachk left
[20:03] *** zachk joined
[20:06] *** cjkinni left
[20:07] *** jmerelo left
[20:08] *** cjkinni joined
[20:09] *** wahnberger_ left
[20:21] *** pecastro joined
[20:38] *** netrino joined
[20:40] *** netrino_ left
[20:43] *** lembark joined
[20:54] <lembark> Q: Should $*PROGRAM be computed at compile time or runtime?

[20:56] <lembark> For example: "constant BIN_FROM = ... $*PROGRAM" created in a moule us showing up as "/path/to/lib/FindBin.pm6" not the executable path at runtime.

[20:57] <lembark> Obvious fix: "my $bin_from = ... $*PROGRAM" but I'd have expeced $*PROGRAM in v6.d to mimic "$0".

[20:58] <masak> lembark: when you use `constant`, you get `BEGIN` semantics; the rhs evaluates at compile time

[21:00] <lembark> Odd because "constant IS-INTERACTIVE = $*PROGRAM-NAME eq '-e' | '-' | 'interactive';" is evaluated at runtime.

[21:01] <lembark> i.e., I get different results from perl -MFindBin -e 'say IS-INTERACTIVE and the same thing in a test that uses the module.

[21:01] <masak> m: say "runtime"; constant G = say "constant"; BEGIN say "compile time"

[21:01] <camelia> rakudo-moar 17c9d88f2: OUTPUT: «constant␤compile time␤runtime␤»

[21:01] <masak> ^ constant evaluates at compile time

[21:02] <lembark> Q: Why would defining a constant on $*PROGRAM behave differently than $*PROGRAM-NAME?

[21:02] <masak> it... wouldn't? :)

[21:03] <lembark> Example: Tests based on IS-INTERACTIVE display the correct thing when run from different directories using perl -M and #! code.

[21:04] <lembark> I can almost wrap my mind around $*PROGRAM being the path to the specific .pm6 file (vs. the executable that invoked the compilation t/01-setup.t).

[21:07] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2019/03/25/i-like-rakudo-100x/

[21:14] *** SergiusUA left
[21:17] <AlexDaniel> gfldex: ummm…

[21:18] <AlexDaniel> gfldex: what about https://gist.github.com/AlexDaniel/88b38af5db9adcf0b711ac3df31dd431

[21:21] <AlexDaniel> gfldex: lets you use whateverable to bisect things locally

[21:22] *** lembark left
[21:24] <gfldex> AlexDaniel: at the top it says:  AlexDaniel/bisect.p6 Secret

[21:26] <gfldex> AlexDaniel: I didn't implement it in Perl 6 to make it easy to set up or clone a VM and start testing.

[21:27] <gfldex> Otherwise I would have borrowed code from bisectable.

[21:30] *** vrurg left
[21:31] *** abraxxa left
[21:34] <AlexDaniel> also, you *can* use bisectable, just need to specify paths to all the modules

[21:34] *** Xliff left
[21:40] <AlexDaniel> gfldex: oh, and Blin is also using Whateverable, but it runs `zef test` to test things. Perhaps we can tweak it so that you can provide a custom script to test stuff

[21:43] <AlexDaniel> I filed this ticket: https://github.com/perl6/Blin/issues/11

[21:45] <AlexDaniel> actually, let me try to implement that real quick…

[21:49] <AlexDaniel> eh, how can I use :@foo in MAIN?

[21:50] <AlexDaniel> c: run <perl6 -e>, ｢sub MAIN(:$foo) { say $foo }｣, <--foo=42 --foo=50>

[21:50] <committable6> AlexDaniel, ¦run: «Cannot find this revision (did you mean “all”?)»

[21:50] <AlexDaniel> e: run <perl6 -e>, ｢sub MAIN(:$foo) { say $foo }｣, <--foo=42 --foo=50>

[21:50] <evalable6> AlexDaniel, rakudo-moar 17c9d88f2: OUTPUT: «[42 50]␤»

[21:50] <AlexDaniel> this works but it's stupid

[21:51] <AlexDaniel> I want to slap an IO() coercer on it

[21:51] <AlexDaniel> e: run <perl6 -e>, ｢sub MAIN(:@foo) { say @foo }｣, <--foo=42 --foo=50>

[21:51] <evalable6> AlexDaniel, rakudo-moar 17c9d88f2: OUTPUT: «[42 50]␤»

[21:51] <AlexDaniel> o_o

[21:51] <AlexDaniel> ok nevermind

[21:52] <AlexDaniel> well, actually…

[21:52] <AlexDaniel> e: run <perl6 -e>, ｢sub MAIN(Str :@foo) { say @foo }｣, <--foo=42 --foo=50>

[21:52] <evalable6> AlexDaniel, rakudo-moar 17c9d88f2: OUTPUT: «(exit code 1) Usage:␤  -e '...' [--foo=<Positional[Str]>]␤The spawned command 'perl6' exited unsuccessfully (exit code: 2)␤  in block <unit> at /tmp/z4gws0rAWF line 1␤␤»

[22:05] <AlexDaniel> gfldex: actually, I think it's going to be pretty cool! Gimme an hour

[22:05] <AlexDaniel> gfldex++

[22:07] <lizmat> weekly:  https://gfldex.wordpress.com/2019/03/25/i-like-rakudo-100x/

[22:07] <notable6> lizmat, Noted!

[22:12] * AlexDaniel doodled something

[22:12] <AlexDaniel> let's see if it works…

[22:21] *** sena_kun left
[22:28] *** rindolf left
[22:28] <AlexDaniel> oooooooooooooooooooooooh

[22:29] <AlexDaniel> e: run <perl6 -e>, ｢sub MAIN(:@foo) { say @foo }｣, <--foo=42 --foo=50>

[22:29] <evalable6> AlexDaniel, rakudo-moar 17c9d88f2: OUTPUT: «[42 50]␤»

[22:29] <AlexDaniel> e: run <perl6 -e>, ｢sub MAIN(:@foo) { say @foo }｣, <--foo=42>

[22:29] <evalable6> AlexDaniel, rakudo-moar 17c9d88f2: OUTPUT: «(exit code 1) Usage:␤  -e '...' [--foo=<Positional>]␤The spawned command 'perl6' exited unsuccessfully (exit code: 2)␤  in block <unit> at /tmp/OUsu1YzwBC line 1␤␤»

[22:29] <AlexDaniel> so you must provide more than one…

[22:29] *** rindolf joined
[22:33] <AlexDaniel> e: run <perl6 -e>, ｢sub MAIN(:@foo) { say @foo }｣

[22:33] <evalable6> AlexDaniel, rakudo-moar 17c9d88f2: OUTPUT: «[]␤»

[22:33] <AlexDaniel> hah, so zero is fine, two is fine, one is not?

[22:35] <AlexDaniel> https://github.com/rakudo/rakudo/issues/2797

[22:48] <ugexe> the most Perl6 solution would be to tell the user to use --foo=42,

[22:49] <AlexDaniel> hah

[22:50] <AlexDaniel> but the funny thing is that you can use :$foo, and that works… and that's very perl5 :)

[22:51] <ugexe> but you can't type a list

[22:52] <ugexe> m: sub MAIN(Str :$foo) { say $foo }; BEGIN @*ARGS = <a b>;

[22:52] <camelia> rakudo-moar 17c9d88f2: OUTPUT: «Usage:␤  <tmp> [--foo=<Str>]␤»

[22:52] <AlexDaniel> ugexe: not sure I understand… can you type a list with @ ?

[22:53] <ugexe> i thought so but apparently not

[22:53] <ugexe> m: sub MAIN(Str :@foo) { say @foo }; BEGIN @*ARGS = <a b>;

[22:53] <camelia> rakudo-moar 17c9d88f2: OUTPUT: «Usage:␤  <tmp> [--foo=<Positional[Str]>]␤»

[22:53] <ugexe> oh duh im using args wrong

[22:54] <ugexe> not that it matters

[22:54] <ugexe> m: sub MAIN(Str :@foo) { say @foo }; BEGIN @*ARGS = <--foo=a --foo=b>;

[22:54] <camelia> rakudo-moar 17c9d88f2: OUTPUT: «Usage:␤  <tmp> [--foo=<Positional[Str]>]␤»

[23:03] *** natrys left
[23:09] *** Celelibi left
[23:14] <Geth> ¦ whateverable: c535eee829 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Bisection.pm6

[23:14] <Geth> ¦ whateverable: Avoid LAST to work around some weird issue

[23:14] <Geth> ¦ whateverable: 

[23:14] <Geth> ¦ whateverable: Sometimes when run-bisect runs from multiple threads at the same time

[23:14] <Geth> ¦ whateverable: I am getting Nil in string context warnings. To me that can only mean

[23:14] <Geth> ¦ whateverable: that `$result<output>` is not what it is supposed to be, so there's a

[23:14] <Geth> ¦ whateverable: bug in rakudo. Working around it because I want to move on right

[23:14] <Geth> ¦ whateverable: now. Please feel free to investigate.

[23:14] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/c535eee829

[23:14] <AlexDaniel> dogbert17, timotimo: ↑ if you're interested

[23:16] *** hphhphhphhphhphh left
[23:22] *** rindolf left
[23:25] <AlexDaniel> greppable6: PREVIEW

[23:25] <greppable6> AlexDaniel, 66 lines, 14 modules: https://gist.github.com/1489b13cc240bdccea6bb43762472a07

[23:25] <AlexDaniel> greppable6: d\.PREVIEW

[23:25] <greppable6> AlexDaniel, 58 lines, 11 modules: https://gist.github.com/239ab1d53f43662673188cf0bd4df1fc

[23:28] *** pecastro left
[23:34] *** Celelibi joined
[23:36] <AlexDaniel> gfldex: success!!!

[23:36] <AlexDaniel> it bisected it to this commit: https://github.com/rakudo/rakudo/commit/4ffb4082b04a87cdddca098bad0089d943651942

[23:36] <AlexDaniel> which is what you found too

[23:43] *** aborazmeh joined
[23:43] *** aborazmeh left
[23:43] *** aborazmeh joined
[23:46] <Geth> ¦ Blin: 6da7c3c36e | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[23:46] <Geth> ¦ Blin: Add support for custom scripts

[23:46] <Geth> ¦ Blin: 

[23:46] <Geth> ¦ Blin: So that users can bisect arbitrary code. The code can depend on

[23:46] <Geth> ¦ Blin: modules, in which case these have to be listed on the command line

[23:46] <Geth> ¦ Blin: (e.g. for a script depending on WWW you should list WWW module,

[23:46] <Geth> ¦ Blin: dependencies will be detected automatically).

[23:46] <Geth> ¦ Blin: 

[23:46] <Geth> ¦ Blin: <…commit message has 15 more lines…>

[23:46] <Geth> ¦ Blin: review: https://github.com/perl6/Blin/commit/6da7c3c36e

[23:46] <AlexDaniel> gfldex: \o/

[23:48] *** SergiusUA joined
[23:55] <Geth> ¦ Blin: 4db69d0289 | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md

[23:55] <Geth> ¦ Blin: Mention custom scripts in the README

[23:55] <Geth> ¦ Blin: review: https://github.com/perl6/Blin/commit/4db69d0289

[23:56] <kybr> is there a shrtcut for Str.split('') ... string to list of chars?

[23:56] <SmokeMachine> m: say “bla”.comb

[23:56] <camelia> rakudo-moar 17c9d88f2: OUTPUT: «(b l a)␤»

[23:56] <SmokeMachine> kybr: ^^

[23:57] <Geth> ¦ Blin: 9ca64bfcc4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md

[23:57] <Geth> ¦ Blin: Tweak README

[23:57] <Geth> ¦ Blin: review: https://github.com/perl6/Blin/commit/9ca64bfcc4

