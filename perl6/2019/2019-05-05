[00:27] *** ayerhart left
[00:32] *** ayerhart joined
[00:33] <Xliff> m: my $a = False; given $a.so { when True { say 'Boo?'; }; when False { say '?ooB' }; }; 

[00:33] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´Potential difficulties:‚ê§    Smartmatch against True always matches; if you mean to test th‚Ä¶¬ª

[00:33] <evalable6> Xliff, Full output: https://gist.github.com/0ead0ffbba75024f3f3e9cb935fb3e56

[00:34] <Xliff> m: my $a = False; given $a { when True.so { say 'Boo?'; }; when False.so { say '?ooB' }; }; 

[00:34] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´Boo?‚ê§¬ª

[00:34] <Xliff> m: my $a = False; given $a.so { when True.so { say 'Boo?'; }; when False.so { say '?ooB' }; }; 

[00:34] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´Boo?‚ê§¬ª

[00:34] <Xliff> m: my $a = False; given $a.so { when True { say 'Boo?'; }; when False { say '?ooB' }; }; 

[00:34] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´Potential difficulties:‚ê§    Smartmatch against True always matches; if you mean to test th‚Ä¶¬ª

[00:34] <evalable6> Xliff, Full output: https://gist.github.com/ef5f444b1c564fcf270f8b7f62f3435a

[00:34] <Xliff> m: my $a = False; given $a:so { when True { say 'Boo?'; }; when False { say '?ooB' }; }; 

[00:34] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/k4tdg5KUnU‚ê§Variabl‚Ä¶¬ª

[00:34] <evalable6> Xliff, Full output: https://gist.github.com/26715b72dee7e3df8cdfd260b4167ed5

[00:40] <timotimo> Xliff: you want "when *.so" and "when *.not" i think

[00:44] <Xliff> So ".so" and ".not" would work?

[00:45] <Xliff> Or do you really need the *?

[00:51] *** Kaiepi left
[00:52] *** Kaiepi joined
[00:53] *** Manifest0 left
[00:57] <squashable6> üçï uzluisf++ wrote a comment on ‚ÄúRepeating subsections under several sections‚Äù: https://github.com/perl6/doc/issues/2752#issuecomment-489377244

[00:59] *** Manifest0 joined
[01:07] *** Kaiepi left
[01:08] *** Kaiepi joined
[01:09] <Geth> ¬¶ doc: taboege self-unassigned Repeating subsections under several sections https://github.com/perl6/doc/issues/2752

[01:09] *** molaf left
[01:14] *** Kaypie joined
[01:15] *** Kaiepi left
[01:20] *** Kaypie left
[01:21] *** Manifest0 left
[01:22] *** molaf joined
[01:22] *** Kaiepi joined
[01:26] *** Manifest0 joined
[01:26] <Elronnd> how come https://docs.perl6.org/type/IO::Notification only has notifications for file change and rename, not create or delete?

[01:26] *** netrino left
[01:30] <ugexe> because moarvm is built using libuv, and that is a libuv limitation -- http://docs.libuv.org/en/v1.x/fs_event.html

[01:33] <ugexe> if you know of a cross-platform way to handle other events i'm sure libuv would love a PR implementing them

[01:37] *** syb joined
[01:37] <Xliff> ugexe: libuv wraps inotify which has WAY more ops than that.

[01:38] <Elronnd> but doesn't it also support other things?

[01:38] <Elronnd> kqueue and whatever mac and win32 have

[01:39] <Xliff> I think the limitation is more due to the fact that it has to support the union of inotify(Linux), FSEvents(Darwin), kqueue(BSD), ReadDirectoryChangesW(Windows), and event ports(Solaris)

[01:40] <Xliff> They got the basics in, but that would be a messy C file with all the #ifdef(s) it would have to support to offer more.

[01:41] <Xliff> ugexe: But you're right. That is a PR worth writing.

[01:41] <Elronnd> is the PR 'check if we're on a platform that has this stuff, and if so make it a separate event'?

[01:42] <Elronnd> cause I would totally do that

[01:43] *** syb left
[01:43] *** matiasli1a left
[01:48] <Xliff> Elrond: You read my mind.

[01:49] <Elronnd> ok this is kind of annoying

[01:49] <Elronnd> I'm getting like 8 different events for one file change

[01:49] <Elronnd> probably vim's fault but

[01:50] <Xliff> Add some event smothing code for that?

[01:51] <Elronnd> was thinking of manually checking the file hash, but that works too

[01:58] <Xliff> Huh! Looks like they do watch for all the events in libuv!

[01:58] <Xliff> https://github.com/libuv/libuv/blob/v1.x/src/unix/linux-inotify.c#L293

[01:59] <Xliff> But cut them down to the CHANGE/RENAME, here:

[01:59] <Xliff> https://github.com/libuv/libuv/blob/v1.x/src/unix/linux-inotify.c#L224

[02:00] <Xliff> And that gets passed to the callback not long after: https://github.com/libuv/libuv/blob/v1.x/src/unix/linux-inotify.c#L260

[02:01] <Xliff> So it's not that libuv can't do it. It's just that its the callback that gets a limited sample of the events.

[02:01] *** mowcat left
[02:02] *** Manifest0 left
[02:09] *** Manifest0 joined
[02:15] *** Manifest0 left
[02:18] *** snarkyboojum joined
[02:20] *** Manifest0 joined
[02:28] <ugexe> https://github.com/libuv/libuv/pull/1649

[02:28] <ugexe> https://github.com/libuv/libuv/issues/1730

[02:28] <ugexe> these are also relevant regarding file system events

[02:30] <Xliff> YUeah. For OSX

[02:31] <Xliff> s/U//

[02:31] <ugexe> #1730 shows a difference between linux/windows/osx and FreeBSD/AIX/smartOS/zos

[02:36] <Xliff> True. That is referenced by 1649 which looks to be a pull request for OSX.

[02:37] <Xliff> Nevertheless, this is good info to have, if indeed an attempt is made to change libuv.

[02:41] * Seance[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/GtqaZPlVdomCXBFoyYtGaqFt >

[02:42] <Seance[m]> I don't understand postcircumfix in this example, and I didn't gain an effective understanding from the associated docs

[02:42] <Seance[m]> This calls the .sub method stored in the scalar on teh @input array

[02:42] *** snarkyboojum left
[02:43] <Seance[m]> I assume it implies a map type behavior?

[02:44] *** Manifest0 left
[02:44] <ugexe> Elronnd: there are a couple things (although they are escaping me atm) that are implemented on only a single platform, so its possible they might accept such a PR

[02:45] <tobs> Seance[m]: yes ¬ª. is the hyper method call operator. It is pretty much map but may be parallelised

[02:47] <tobs> Seance[m]: did you not find the documentation about it or was it unclear? We're currently having a documentation squashathon, so if you have any problem/suggestion consider opening an issue at https://github.com/perl6/doc/issues

[02:48] <Seance[m]> Turns out I was looking at the wrong docs, I was looking up that unicode operator and found postcircumfix, which is distinct from hyper method calls, so it's user error

[02:48] <Seance[m]> I'll read up on the hyper method call operator tobs , thank you

[02:49] <tobs> no problemo

[02:50] *** Manifest0 joined
[02:53] <ugexe> there are some slight differences though

[02:53] <ugexe> m: .perl.say for ((1..10), (1..10)).map(*.item)

[02:53] <evalable6> ugexe, rakudo-moar 650bbc1d2: OUTPUT: ¬´1..10‚ê§1..10‚ê§¬ª

[02:53] <ugexe> m: .perl.say for ((1..10), (1..10))>>.item

[02:53] <evalable6> ugexe, rakudo-moar 650bbc1d2: OUTPUT: ¬´$(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)‚ê§$(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)‚ê§¬ª

[02:53] *** snarkyboojum joined
[02:55] *** kurahaupo left
[02:56] *** kurahaupo joined
[03:02] <lumin> Hello guys, what should I do if zef fails to update the p6c mirror? (I guess there is some problem on the server side)

[03:02] *** Manifest0 left
[03:05] <ugexe> lumin: the latest version of zef should not have that issue. `git clone https://github.com/ugexe/zef.git && cd zef && perl6 -I. bin/zef uninstall zef && perl6 -I. bin/zef install .`

[03:06] <ugexe> it changed the mirror

[03:06] <lumin> Ah, ok. I'm just using the one in Debian sid

[03:07] <ugexe> there is a hacky way as well

[03:08] *** zacts left
[03:08] <ugexe> do `zef --help`. towards the bottom it will show the configuration file location. you can edit this file so that the first mirror for p6c matches this: https://github.com/ugexe/zef/blob/e73897378b36cbf53f2ed8d98363d94bac70767d/resources/config.json#L60

[03:08] *** Manifest0 joined
[03:10] <ugexe> if you dont want to edit that file then make a copy of it, put it in ~/.config/zef/config.json, and edit *that* copy

[03:12] *** Manifest0 left
[03:13] <lumin> ugexe: Thanks, after editing that json file for both the cpan and c6p mirror URLs, zef started to work

[03:14] <lumin> so Debian needs an update for its zef package

[03:17] <lumin> ugexe: How likely will zef change it's mirror URL again in the next one or two years? I'm going to update the zef package for Debian Buster

[03:19] *** Manifest0 joined
[03:20] <ugexe> i don't plan on changing it. someone whined about it not being hosted by p6c once before so i changed it back, but i guess thats what i get for being a push over

[03:22] <lumin> got it

[03:24] <Xliff> What is the current status of p6c?

[03:38] <Xliff> m: @a = (-10, -9.9, -9.8..10); say @a[*-10..*-1]

[03:38] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/31ppZ3v9q_‚ê§Variable '@a' is not declared‚ê§at /tmp/31ppZ3v9q_:1‚ê§------> 03<BOL>08‚èè04@a = (-10, -9.9, -9.8..10); say @a[*-10.‚ê§¬ª

[03:38] <Xliff> m: my @a = (-10, -9.9, -9.8..10); say @a[*-10..*-1]

[03:38] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´(exit code 1) Effective index out of range. Is: -7, should be in 0..^Inf‚ê§  in block <unit> at /tmp/dFMrF6VTXL line 1‚ê§‚ê§¬ª

[03:39] <Xliff> m: my @a = (-10, -9.9, -9.8..10); say @a[^5]

[03:39] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´(-10 -9.9 -9.8..10 (Any) (Any))‚ê§¬ª

[03:39] <Xliff> m: my @a = (-10, -9.9, -9.8...10); say @a[^5]

[03:39] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´(-10 -9.9 -9.8 -9.7 -9.6)‚ê§¬ª

[03:39] <Xliff> m: my @a = (-10, -9.9, -9.8...10); say @a[*-10..*-1]

[03:39] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´(9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10)‚ê§¬ª

[03:39] <Xliff> m: my @a = (-10, -9.9...10); say @a[*-10..*-1]

[03:39] <evalable6> Xliff, rakudo-moar 650bbc1d2: OUTPUT: ¬´(9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10)‚ê§¬ª

[03:43] *** Cabanoss- joined
[03:44] *** Cabanossi left
[03:44] *** Cabanoss- is now known as Cabanossi

[03:58] *** veesh left
[04:05] *** veesh joined
[04:09] *** jeromelanteri joined
[04:14] *** dumbintel joined
[04:17] *** snarkyboojum left
[04:30] *** Manifest0 left
[04:35] *** Manifest0 joined
[04:42] *** jeromelanteri left
[04:50] *** hythm joined
[04:57] *** dumbintel left
[04:59] *** Manifest0 left
[05:04] *** Manifest0 joined
[05:10] *** araraloren_ joined
[05:15] *** antoniogamiz joined
[05:22] <Geth> ¬¶ doc: taboege++ created pull request #2762: Add xtest for copy-pasted camelia invocations

[05:22] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2762

[05:22] <squashable6> üçï taboege++ opened pull request ‚ÄúAdd xtest for copy-pasted camelia invocations‚Äù: https://github.com/perl6/doc/pull/2762

[05:36] <squashable6> üçï taboege++ edited pull request ‚ÄúRevise :skip-test‚Äù: https://github.com/perl6/doc/pull/2759

[05:47] *** Manifest0 left
[05:52] *** Manifest0 joined
[05:59] *** antoniogamiz left
[05:59] *** Manifest0 left
[06:04] *** Manifest0 joined
[06:15] *** Manifest0 left
[06:18] *** sno left
[06:21] *** Manifest0 joined
[06:26] *** hythm left
[06:27] *** rindolf joined
[06:29] *** jmerelo joined
[06:30] <jmerelo> squashable6: status

[06:30] <yoleaux> 4 May 2019 20:00Z <Xliff> jmerelo: Please take a look at: https://gist.github.com/Xliff/5626c9434f655540f63ab5b79fd49eb6

[06:30] <squashable6> jmerelo, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà7 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:30] <squashable6> jmerelo, Log and stats: https://gist.github.com/03026f1a146257bc0b938bfcd4440651

[06:32] <jmerelo> releasable6: status

[06:32] <releasable6> jmerelo, Next release in ‚âà12 hours. 1 blocker. 132 out of 279 commits logged (‚ö† 2 warnings)

[06:32] <releasable6> jmerelo, Details: https://gist.github.com/f52ffaa8194fcdc6c9456f90e830c9fb

[06:37] <squashable6> üçï JJ++ submitted a review on pull request ‚ÄúAddressing #2710 - First draft‚Äù: https://github.com/perl6/doc/pull/2757#pullrequestreview-233763867

[06:38] <squashable6> üçï JJ++ merged pull request ‚ÄúAddressing #2710 - First draft‚Äù: https://github.com/perl6/doc/pull/2757

[06:38] <squashable6> üçï JJ++ closed issue ‚ÄúComment using in enums n‚Ä¶‚Äù: https://github.com/perl6/doc/issues/2710

[06:38] *** Geth left
[06:39] <squashable6> üçï JJ++ wrote a comment on ‚ÄúDocs for Blob missing ca‚Ä¶‚Äù: https://github.com/perl6/doc/issues/2694#issuecomment-489395844

[06:39] *** Geth joined
[06:41] <squashable6> üçï JJ++ wrote a comment on ‚Äúp6doc does not really work‚Äù: https://github.com/perl6/doc/issues/2705#issuecomment-489396019

[06:44] <squashable6> üçï JJ++ submitted a review on pull request ‚Äú.Int on Bool objects returns an Int object‚Äù: https://github.com/perl6/doc/pull/2758#pullrequestreview-233764073

[06:44] <Geth> ¬¶ doc: df3cd63986 | lukasvalle++ | doc/Type/Bool.pod6

[06:44] <Geth> ¬¶ doc: Documentation for ".Int on Bool objects returns an Int object" from https://github.com/perl6/doc/issues/2632 todo list.

[06:44] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/df3cd63986

[06:44] <Geth> ¬¶ doc: 58a1d0bd96 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Type/Bool.pod6

[06:44] <Geth> ¬¶ doc: Merge pull request #2758 from lukasvalle/master

[06:44] <Geth> ¬¶ doc: 

[06:44] <Geth> ¬¶ doc: .Int on Bool objects returns an Int object

[06:44] <squashable6> üçï JJ++ merged pull request ‚Äú.Int on Bool objects returns an Int object‚Äù: https://github.com/perl6/doc/pull/2758

[06:44] <Geth> ¬¶ doc: Thanks!

[06:44] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/58a1d0bd96

[06:46] <squashable6> üçï JJ++ submitted a review on pull request ‚ÄúRevise :skip-test‚Äù: https://github.com/perl6/doc/pull/2759#pullrequestreview-233764143

[06:46] <Geth> ¬¶ doc/master: 4 commits pushed by (Tobias Boege)++, (Juan Juli√°n Merelo Guerv√≥s)++

[06:46] <Geth> ¬¶ doc/master: b6ddc51a35 | Revise :skip-test on code blocks

[06:46] <Geth> ¬¶ doc/master: ebaa8d8e5e | Reduce variety of :skip-test explanations

[06:46] <Geth> ¬¶ doc/master: e31f0e8ee3 | Make all xt/examples-compilation.t pass

[06:46] <Geth> ¬¶ doc/master: 983054b15e | Merge pull request #2759 from taboege/revise-skip-test

[06:46] <Geth> ¬¶ doc/master: review: https://github.com/perl6/doc/compare/58a1d0bd9664...983054b15ead

[06:46] <squashable6> üçï JJ++ merged pull request ‚ÄúRevise :skip-test‚Äù: https://github.com/perl6/doc/pull/2759

[06:46] <squashable6> üçï JJ++ closed issue ‚ÄúToo many :skip-tests‚Äù: https://github.com/perl6/doc/issues/2738

[06:49] <squashable6> üçï JJ++ wrote a comment on ‚ÄúCurrent version of perl6/doc will not make.‚Äù: https://github.com/perl6/doc/issues/2760#issuecomment-489396510

[06:50] *** domidumont joined
[06:50] <squashable6> üçï JJ++ edited issue ‚ÄúClarify argument of Metamodel::Naming name‚Äù: https://github.com/perl6/doc/issues/2713

[06:52] *** cpan-p6 left
[06:52] *** cpan-p6 joined
[06:52] *** cpan-p6 left
[06:52] *** cpan-p6 joined
[06:53] <squashable6> üçï JJ++ wrote a comment on ‚ÄúClarify argument of Metamodel::Naming name‚Äù: https://github.com/perl6/doc/issues/2713#issuecomment-489396776

[06:54] <squashable6> üçï JJ++ wrote a comment on ‚ÄúSet, Bag and Mix operato‚Ä¶‚Äù: https://github.com/perl6/doc/issues/2761#issuecomment-489396863

[06:56] <squashable6> üçï JJ++ submitted a review on pull request ‚ÄúAdd xtest for copy-pasted camelia invocations‚Äù: https://github.com/perl6/doc/pull/2762#pullrequestreview-233764480

[06:56] <squashable6> üçï JJ++ closed issue ‚ÄúCreate a test to ensure ‚Ä¶‚Äù: https://github.com/perl6/doc/issues/2695

[06:56] <Geth> ¬¶ doc: 767aec79c8 | (Tobias Boege)++ | xt/camelia-invocations.t

[06:56] <Geth> ¬¶ doc: Add xtest for copy-pasted camelia invocations

[06:56] <Geth> ¬¶ doc: 

[06:56] <Geth> ¬¶ doc: Resolves #2695. This adds a test xt/camelia-invocations.t which goes

[06:56] <Geth> ¬¶ doc: through all code blocks and looks for accidental "m:" prefixes from

[06:56] <squashable6> üçï JJ++ merged pull request ‚ÄúAdd xtest for copy-pasted camelia invocations‚Äù: https://github.com/perl6/doc/pull/2762

[06:56] <Geth> ¬¶ doc: pasting code from IRC where the eval bots react to this prefix.

[06:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/767aec79c8

[06:56] <Geth> ¬¶ doc: 775b361783 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | xt/camelia-invocations.t

[06:56] <Geth> ¬¶ doc: Merge pull request #2762 from taboege/xt-camelia-invocations

[06:56] <Geth> ¬¶ doc: 

[06:56] <Geth> ¬¶ doc: Add xtest for copy-pasted camelia invocations

[06:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/775b361783

[07:01] *** Manifest0 left
[07:07] *** Manifest0 joined
[07:15] <squashable6> üçï JJ++ edited issue ‚ÄúNon-operators are listed under operators‚Äù: https://github.com/perl6/doc/issues/2267

[07:19] *** lasse joined
[07:21] <squashable6> üçï JJ++ wrote a comment on ‚ÄúSet, Bag and Mix operato‚Ä¶‚Äù: https://github.com/perl6/doc/issues/2761#issuecomment-489398566

[07:21] <squashable6> üçï JJ++ labeled issue ‚ÄúSet, Bag and Mix operato‚Ä¶‚Äù (docs): https://github.com/perl6/doc/issues/2761

[07:21] <squashable6> üçï JJ++ labeled issue ‚ÄúSet, Bag and Mix operato‚Ä¶‚Äù (RFE): https://github.com/perl6/doc/issues/2761

[07:24] <squashable6> üçï JJ++ opened issue ‚ÄúNo one talks about braids‚Äù: https://github.com/perl6/doc/issues/2763

[07:26] <squashable6> üçï JJ++ wrote a comment on ‚ÄúNo one talks about braids‚Äù: https://github.com/perl6/doc/issues/2763#issuecomment-489398937

[07:36] <Elronnd> can I make it so that run doesn't throw an error when the command it runs returns non-0?

[07:48] *** Manifest0 left
[07:53] *** Manifest0 joined
[08:06] <jmerelo> Elronnd: say what?

[08:07] <jmerelo> Elronnd: you can catch the error, maybe... But better with an example.

[08:07] <Elronnd> m: run 'exit -1'

[08:07] <evalable6> Elronnd, rakudo-moar 650bbc1d2: OUTPUT: ¬´(exit code 1) The spawned command 'exit -1' exited unsuccessfully (exit code: 1)‚ê§  in block <unit> at /tmp/r7FJea_wvR line 1‚ê§‚ê§¬ª

[08:07] <Elronnd> I can catch the error, but I'd prefer to just pass a param to run so it doesn't get thrown in the first place

[08:08] <jmerelo> Elronnd: you can try and use Proc::Async 

[08:08] <jmerelo> Elronnd: 

[08:08] <jmerelo> I meant this https://docs.perl6.org/type/Proc::Async

[08:09] <Elronnd> thanks

[08:10] <Geth> ¬¶ doc: 9cc1e2e320 | (JJ Merelo)++ | doc/Language/operators.pod6

[08:10] <Geth> ¬¶ doc: Introduces methodops

[08:10] <Geth> ¬¶ doc: 

[08:10] <Geth> ¬¶ doc: According to the consensus in the issue #2267, this seems to be the

[08:10] <Geth> ¬¶ doc: best way to reflect these non-ops, actually-syntax, constructs. This

[08:10] <squashable6> üçï JJ++ closed issue ‚ÄúNon-operators are listed under operators‚Äù: https://github.com/perl6/doc/issues/2267

[08:10] <Geth> ¬¶ doc: closes #2267

[08:10] <Geth> ¬¶ doc: 

[08:10] <Geth> ¬¶ doc: Also reflow and some small changes, mainly to reflect that methodops

[08:10] <Geth> ¬¶ doc: are thrown into the mix.

[08:10] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9cc1e2e320

[08:24] *** Manifest0 left
[08:30] *** Manifest0 joined
[08:33] *** natrys joined
[08:39] *** |oLa| joined
[08:40] <Elronnd> woah, --profile is _neat_!

[08:49] *** sno joined
[08:53] *** kiwi_34 joined
[08:54] *** kiwi_34 left
[08:54] *** hakank joined
[08:56] <masak> lol, I *blogged*! http://strangelyconsistent.org/blog/refactoring-the-universe

[08:56] <masak> I did it! there's more to come, but at least this one's out the door

[08:58] <tadzik> it made me realise that there's so much noise in my RSS reader that I missed it even though I just finished looking through it :o

[08:59] * tadzik unsubs a few things

[08:59] <hakank> @masak Excellent!

[08:59] <timotimo> yay, a masak blog!

[09:03] * masak .oO( a wild blog post appears! )

[09:04] <masak> errands &

[09:10] *** kensanata joined
[09:16] *** Manifest0 left
[09:19] *** camelia joined
[09:20] *** ChanServ sets mode: +v camelia

[09:22] *** Manifest0 joined
[09:23] *** molaf left
[09:41] *** hankache joined
[09:42] *** Manifest0 left
[09:45] <hankache> hello #perl6

[09:46] <hankache> .seen timotimo

[09:46] <yoleaux> I saw timotimo 08:59Z in #perl6: <timotimo> yay, a masak blog!

[09:46] <timotimo> yo

[09:46] <hankache> Hola timo

[09:46] <timotimo> gruetzli

[09:47] <hankache> you're still hosting rakudo.org right?

[09:47] <timotimo> well, more or less

[09:48] <timotimo> it's not actually my server, but i did set some things up there, and i do have root access

[09:48] <timotimo> so for all intents and purposes yeah, i am hosting rakudo.org i guess :)

[09:48] *** Manifest0 joined
[09:49] <hankache> And I guess that will stay the case until we have figured out a proper infrastructure?

[09:49] <timotimo> probably, yes

[09:49] <hankache> cool

[09:49] <timotimo> i'm regrettably tied up with other stuff i have to finally do :S

[09:50] <hankache> timotimo++

[09:50] <timotimo> else i'd probably be writing dockerfiles and such so that setting up rakudo.org becomes a one-command affair

[09:50] <jmerelo> timotimo: should do the same for perl6 docs. As a matter of fact, I've created an issue to do that...

[09:51] <timotimo> it doesn't matter who does it :)

[09:52] <hankache> so I figured out since it might take a while for the people working on the infrastructure to get it done, we might as get something working meanwhile

[09:52] <hankache> everything seems ok except the download part

[09:53] <hankache> Basically those links are dead: https://rakudo.org/files/star https://rakudo.org/latest/star/win64 https://rakudo.org/latest/star/win32 https://rakudo.org/latest/star/macos https://rakudo.org/latest/star/source

[09:54] <hankache> I've registered rakudostar.com to act as a temporary replacement and host the files

[09:55] <hankache> so now instead of going to https://rakudo.org/latest/star/source you would go to https://rakudostar.com/latest/star/source

[09:56] <hankache> so for those 5 urls I need to redirect them to the new ones s/rakudo.org/rakudostar.com

[09:57] <hankache> do you have any idea how can this be achieved?

[09:57] <hankache> is this something that you could do?

[10:01] <hankache> timotimo?

[10:01] <timotimo> it's possible, rakudo.org is a perl5 mojo-something web app

[10:02] <timotimo> https://github.com/perl6/rakudo.org

[10:02] <hankache> ok will have a look

[10:02] <hankache> thanks timo

[10:02] <jmerelo> hankache timotimo I do have access to the server too, if you need some help just let me know.

[10:03] <timotimo> we can also put all the files onto the actual rakudo.org server

[10:03] <hankache> will it update automatically once I push to git or would you have to do something?

[10:03] <hankache> hello jj

[10:03] <jmerelo> hi

[10:03] <jmerelo> probably will have to do something. At least docs.perl6.org is updated by hand

[10:04] <timotimo> i'll have to ./update-rakudo.org.sh i guess

[10:04] <timotimo> though i have some local changes i think?

[10:04] <timotimo> but i just put some text into templates; not_found.production.html.ep, files.html.ep, exception.production.html.ep

[10:04] <jmerelo> timotimo: can you merge them back?

[10:05] <timotimo> https://gist.github.com/timo/d70355064ef0159f23e15abef6653efe

[10:05] <jmerelo> timotimo: if you're wary of uploading your private key, maybe create a new Github user specifically for that and use it to upload the changes?

[10:06] <timotimo> if we do our job right, these changes will have to be reverted anyway

[10:07] <hankache> indeed

[10:08] <jmerelo> timotimo: create a branch and deploy that branch

[10:09] <jmerelo> You probably know that temporary changes tend to become permanent, and what's intended as permanent eventually ends up being temporary.

[10:09] <timotimo> i'd really just "git reset --hard" immediately :)

[10:09] <jmerelo> So I wouldn't put such a fine distinction between make-it-work hacks and release-ready features.

[10:11] <hankache> of so since the hosted version is not the same as the one on GitHub shall we do the changes directly?

[10:11] <timotimo> no

[10:12] <timotimo> that'd be Very Bad‚Ñ¢ :)

[10:12] <hankache> hehehe

[10:12] <timotimo> it's basically what i have done

[10:12] <timotimo> that should tell you enough about how bad it really is

[10:13] <hankache> so how do I land my changes then?

[10:14] <timotimo> i can just "git pull" them

[10:14] <timotimo> or we give you access to the server as well, that's probably not a bad idea

[10:14] <hankache> ok I'll push to GitHub and let you know

[10:14] <timotimo> of course jmerelo can also do it

[10:14] <timotimo> i'm hoping to get into a deep concentration with the issue i'm working on %)

[10:15] <hankache> thanks

[10:15] <jmerelo> hankache: I'm going to stick around for a while, so just let me know if you need me to do something.

[10:16] <jmerelo> If I'm out, put a j in front of my nick here and use Telegram.

[10:16] <hankache> jmerelo thanks. Will let you know when ready

[10:30] *** woolfy left
[10:30] *** lizmat left
[10:33] *** lizmat joined
[10:33] *** woolfy joined
[10:34] *** sena_kun joined
[10:50] <jmerelo> squashable6: status

[10:50] <squashable6> jmerelo, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà3 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:50] <squashable6> jmerelo, Log and stats: https://gist.github.com/a061f705c572729526e47d41853b9afd

[10:50] <jmerelo> Any final push to get the plush Camelia?

[10:51] * lizmat is working on it

[10:51] * jmerelo realizes push to plush is a nice-sounding slogan

[10:53] <lizmat> jmerelo: I'm considering moving the part about operators in setbagmix to Language/operators

[10:58] *** vrurg left
[10:59] *** vrurg joined
[11:00] *** araraloren_ left
[11:00] *** araraloren_ joined
[11:05] <jmerelo> lizmat: OK.

[11:09] *** netrino joined
[11:11] *** pecastro joined
[11:20] <Geth> ¬¶ doc: d221923ac9 | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[11:20] <Geth> ¬¶ doc: Link to creating operators tutorial

[11:20] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d221923ac9

[11:24] <jmerelo> lizmat++

[11:38] <hankache> jmerelo are you still here?

[11:39] <jmerelo> barely

[11:39] <hankache> hola :)

[11:39] <jmerelo> hola

[11:40] <jmerelo> let me pull the latest changes.

[11:40] <hankache> I pushed to https://github.com/perl6/rakudo.org

[11:40] <hankache> jmerelo: Thanks. I hope that my fix works

[11:40] <hankache> let me know when to test

[11:41] <jmerelo> it's pulled now, with timotimo changes applied on top

[11:41] <jmerelo> hankache: this your commit commit 39034f316ec14dd7c74d9b075eb323d7d3cee0b5

[11:42] <jmerelo> I really have to leave now

[11:42] <hankache> should changes be live now?

[11:42] <jmerelo> I think so

[11:42] <jmerelo> Please let me know by telegram if it does not work

[11:42] <jmerelo> but really have to go AFK now 

[11:42] <hankache> i think the app needs a restart

[11:43] <timotimo> i can do it

[11:43] <jmerelo> hankache: I think I've done it now

[11:43] <jmerelo> but if timotimo can check, the better

[11:43] <timotimo> well, you've done it now!

[11:43] * jmerelo goes AFK.

[11:43] *** jmerelo left
[11:43] <timotimo> yeah, the app.pl process now has only fractions of a second of cpu time spent

[11:43] <hankache> Yeah it's live. But it seems I botched it :(

[11:44] <tobs> bisect: https://gist.github.com/2e95ce969d26d00342669723c1a11dd1

[11:44] <hankache> I hate HTML

[11:44] <bisectable6> tobs, It looks like a URL, but mime type is ‚Äòtext/html; charset=utf-8‚Äô while I was expecting something with ‚Äòtext/plain‚Äô or ‚Äòperl‚Äô in it. I can only understand raw links, sorry.

[11:44] <tobs> bisect: https://gist.githubusercontent.com/taboege/2e95ce969d26d00342669723c1a11dd1/raw/21f49042c80a03a8cf1f15d1c83b16f4b758aaf0/qsort.p6

[11:44] <bisectable6> tobs, Successfully fetched the code from the provided URL

[11:44] <bisectable6> tobs, Bisecting by output (old=2015.12 new=650bbc1) because on both starting points the exit code is 1

[11:45] <Geth> ¬¶ doc: 9f5267175b | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[11:45] <Geth> ¬¶ doc: Add infix C¬´(&)¬ª, infix C¬´‚à©¬ª to operators

[11:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9f5267175b

[11:45] <bisectable6> tobs, bisect log: https://gist.github.com/83fb1d9c6edd56b7fd796ffc6786bd21

[11:45] <bisectable6> tobs, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[11:45] <bisectable6> tobs, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ÔΩ¢bisect: say randÔΩ£)

[11:47] *** kensanata left
[11:52] *** kensanata joined
[11:55] *** Sgeo_ left
[11:56] *** Sgeo_ joined
[11:59] <tobs> commit: 2018.10 https://gist.githubusercontent.com/taboege/2e95ce969d26d00342669723c1a11dd1/raw/21f49042c80a03a8cf1f15d1c83b16f4b758aaf0/qsort.p6

[11:59] <committable6> tobs, Successfully fetched the code from the provided URL

[11:59] <committable6> tobs, https://gist.github.com/4f71e6f08335a55d44448f035ef9fd4e

[12:00] <hankache> .tell timotimo can you please pull from GitHub and restart the app? Thanks

[12:00] <yoleaux> hankache: I'll pass your message to timotimo.

[12:00] <timotimo> can do

[12:00] <yoleaux> 12:00Z <hankache> timotimo: can you please pull from GitHub and restart the app? Thanks

[12:00] <hankache> hopefully this time I get it right

[12:01] <timotimo> hum, your stuff may have actually not properly landed

[12:01] <timotimo> ah, no, it probably has

[12:01] <timotimo> restarted

[12:02] <hankache> Great. Download section back on track

[12:02] <timotimo> https://gist.github.com/timo/6df711332f7bdd4b6783755bd38e8860 - the local checkout is currently In A State, i'll probably rebase it on origin/master to fix that?

[12:02] <hankache> thank you timo for your help

[12:02] <timotimo> NP

[12:04] <Geth> ¬¶ doc: 7872008531 | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[12:04] <Geth> ¬¶ doc: Add infix C¬´(.)¬ª, infix C¬´‚äç¬ª to operators

[12:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/7872008531

[12:08] <hankache> timotimo yes indeed

[12:12] <timotimo> hankache: https://gist.github.com/timo/506fb8549634bc87b5f5d438152937c5 - please "git am" this locally - if these changes are even desired in the first place

[12:13] <hankache> timotimo ok

[12:13] <timotimo> otherwise i'll "git reset origin/master" instead

[12:13] <hankache> whatever is easier for you

[12:14] <hankache> all works

[12:14] <timotimo> i reset'd it

[12:20] <Geth> ¬¶ doc: 3de03e7a93 | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[12:20] <Geth> ¬¶ doc: Add infix C¬´(|)¬ª, infix C¬´‚à™¬ª to operators

[12:20] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3de03e7a93

[12:21] <squashable6> üçï taboege++ wrote a comment on ‚ÄúNativecall function callback syntax‚Äù: https://github.com/perl6/doc/issues/2684#issuecomment-489421407

[12:23] *** [particle] joined
[12:24] <hankache> timotimo would you also be able to pull perl6.org & restart? Last request today I promise.

[12:26] <timotimo> ha, who pulled that repo as root

[12:27] <timotimo> should be done

[12:31] <squashable6> üçï taboege++ opened issue ‚Äúxt/examples-compilation.t is too memory-hungry‚Äù: https://github.com/perl6/doc/issues/2764

[12:44] <hankache> timotimo: can you pull & restart perl6.org. I promise it's the last time. For real :)

[12:45] <timotimo> TYVM for your work

[12:45] <timotimo> i updated it

[12:46] <hankache> timotimo++ Thanks a lot mate.

[12:46] *** Manifest0 left
[12:47] *** kensanata left
[12:51] *** Manifest0 joined
[12:51] *** Geth left
[12:52] *** Geth joined
[12:53] *** rindolf left
[12:53] *** AlexDaniel left
[12:53] *** AlexDaniel joined
[13:02] *** hankache left
[13:11] *** Manifest0 left
[13:12] *** andreios joined
[13:18] *** Manifest0 joined
[13:19] <Xliff> \o

[13:26] *** mowcat joined
[13:30] <Geth> ¬¶ doc: Xliff self-assigned Set/Bag operations should include Mixes too https://github.com/perl6/doc/issues/2603

[13:34] <squashable6> üçï Xliff++ wrote a comment on ‚ÄúSet, Bag and Mix operato‚Ä¶‚Äù: https://github.com/perl6/doc/issues/2761#issuecomment-489427005

[13:37] *** molaf joined
[13:45] <andreios> where do i report nqp/jvm related bugs?

[13:50] <timotimo> i think the nqp repository is fine for that

[13:53] *** zacts joined
[14:14] *** dmaestro joined
[14:15] <dmaestro> m: 2.2756215391563402e-08.FatRat.nude.say

[14:15] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(0 1)‚ê§¬ª

[14:15] <dmaestro> m: 2.2756215391563402e-06.FatRat.nude.say

[14:15] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(1 439440)‚ê§¬ª

[14:16] <dmaestro> m: 2.2756215391563402e-06.FatRat(1e-50).nude.say

[14:16] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(160351 70464704803)‚ê§¬ª

[14:17] <dmaestro> m: 2.2756215391563402e-06.FatRat(FatRat(1,10**50)).nude.say

[14:17] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(0 1)‚ê§¬ª

[14:18] <dmaestro> m: 2.2756215391563402e-06.FatRat(FatRat.new(1,10**50)).nude.say

[14:18] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(160351 70464704803)‚ê§¬ª

[14:19] <dmaestro> m: 2.2756215391563402e-06.FatRat(FatRat.new(1,10**50)).say

[14:19] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´0.0000022756215‚ê§¬ª

[14:19] <Xliff> m: '‚àñ'.uniname.say

[14:19] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´SET MINUS‚ê§¬ª

[14:20] <dmaestro> m: 2.2756215391563402e-07.FatRat(FatRat.new(1,10**50)).say

[14:21] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(timeout)¬ª

[14:26] *** jaldhar joined
[14:27] <dmaestro> Ran into this edge case where Num -> FatRat conversion hangs completely ^

[14:28] <jaldhar> Hello.  How do I do exponentiation on FatRats?  The docs imply ** converts the answer to a Num.

[14:28] <timotimo> yeah, you'll have to work around that at the moment

[14:28] <jaldhar> dmaestro: I seem to be getting odd answers too.

[14:28] <timotimo> exponentiation on a rational number is just exponentiating the numerator and the denominator separately, right?

[14:30] <jaldhar> hmm

[14:31] <dmaestro> m: (FatRat.new(1,1000) ** 20).nude

[14:31] <camelia> rakudo-moar 86d66ea1d: ( no output )

[14:31] <dmaestro> m: (FatRat.new(1,1000) ** 20).WHAT

[14:31] <camelia> rakudo-moar 86d66ea1d: ( no output )

[14:31] <dmaestro> m: (FatRat.new(1,1000) ** 20).nude.say

[14:31] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(1 1000000000000000000000000000000000000000000000000000000000000)‚ê§¬ª

[14:32] <dmaestro> For a FatRat, exponentiation just works. For a Rat, it's a different story

[14:32] <dmaestro> m: (Rat.new(1,1000) ** 20).nude.say

[14:32] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´No such method 'nude' for invocant of type 'Num'. Did you mean any of these?‚ê§    none‚ê§    note‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:32] <dmaestro> m: (Rat.new(1,1000) ** 20).say

[14:32] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´1e-60‚ê§¬ª

[14:33] <timotimo> well, you can just upgrade a rat to a fatrat before exponentiation

[14:33] <dmaestro> Yes.

[14:33] <dmaestro> 10**50 is an Int, not a Num, I believe, so it's also high precision

[14:34] <dmaestro> As opposed to 1e50

[14:37] <timotimo> yeah, that's literally syntax for Nums

[14:37] <dmaestro> My case is trying to convert a Num to a FatRat with a ridiculously small epsilon - trying to avoid a type check for Num when It can be given either a FatRat or a Num

[14:40] <dmaestro> er, maybe not, just trying to get as much precision from a Num as it has ... maybe reaching too far ...

[14:40] <dmaestro> Disruptive that it can hang in this computation.

[14:42] <timotimo> you can split the num apart into its IEEE defined parts

[14:42] <dmaestro> Ah, didn't think of that :-)

[14:43] <timotimo> you can use .write-num64 for that purpose

[14:44] <timotimo> m: my buf8 $foo .= new; $foo.write-num64(2.2756215391563402e-06, 0); say $foo

[14:44] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´This type cannot unbox to a native integer: P6opaque, Num‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:44] <timotimo> m: my buf8 $foo .= new; $foo.write-num64(0, 2.2756215391563402e-06); say $foo

[14:44] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´Buf[uint8]:0x<03 3F DE 2B DC 16 C3 3E>‚ê§¬ª

[14:44] <timotimo> m: my buf8 $foo .= new; $foo.write-num64(0, 2.2756215391563402e-06); say $foo>>.base(2)

[14:44] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´(11 111111 11011110 101011 11011100 10110 11000011 111110)‚ê§¬ª

[14:45] <dmaestro> Been pushing the limits of Num's - range of about 1e-323 to 1e308 :-)

[14:47] <timotimo> we're lacking a few arithmetic things on FatRat, like square root or the trigonometric functions ... interested? :P

[14:48] <dmaestro> I've actually got a pretty good routine for sqrt and arbitrary-precision Pi. Plan to release Math::Precise for some of those things, maybe this coming week.

[14:48] <timotimo> cool

[14:49] *** dmaestro left
[14:58] *** Manifest0 left
[15:01] <jaldhar> timotimo: how do I use .write-int64 with a Num?  The docs are a bit unclear to me it seems.

[15:02] <timotimo> you'd have to turn it into an integer first

[15:02] <jaldhar> timotimo: or maybe that's not what I want.

[15:03] <timotimo> if you want the bit pattern of the num according to the IEEE, you'd use write-num64

[15:03] <Geth> ¬¶ doc: Xliff++ created pull request #2765: Operators and SetBabMix page updates

[15:03] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2765

[15:03] <jaldhar> Here's what I'm trying to do:

[15:03] <jaldhar> constant RAMANUJAN = ùëí ** (œÄ * sqrt(163)); RAMANUJAN.say;

[15:03] <evalable6> jaldhar, rakudo-moar 86d66ea1d: OUTPUT: ¬´2.625374126407677e+17‚ê§¬ª

[15:03] *** Manifest0 joined
[15:04] <jaldhar> with the output as a rational number but I just can't figure it out.

[15:04] <jaldhar> (That's Perl Weekly Challenge #2 btw)

[15:04] <timotimo> exponentiation with an irrational number is not going to give you a rat, that's a limitation of rakudo

[15:05] <timotimo> i don't quite get what write-int64 would be used for in this context

[15:05] <jaldhar> timotimo: for ever or just as it is currently implemented? (I'm on 2018.12d)

[15:06] <timotimo> i'm not sure if it will become part of the language

[15:06] *** skids joined
[15:07] <jaldhar> timotimo: yeah forget .write-int64.

[15:07] <timotimo> but if you can wait, dmaestro seems to be working on that

[15:07] <timotimo> at least in module space

[15:08] <jaldhar> If only I could get the result as a FatRat I'd know what to do but it looks like I have to figure out another way.

[15:08] <timotimo> you can turn the Num into a FatRat

[15:08] <timotimo> of course it won't have more precision than the 64bit float had

[15:09] <jaldhar> timotimo: the problem is I need 32 digits of precision

[15:10] <timotimo> decimal digits?

[15:10] <jaldhar> timotimo: I guess.  The question just says 32 digits.

[15:10] <timotimo> ha

[15:11] <timotimo> m: say 100000000000000000000000000000000.base(2).chars

[15:11] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´107‚ê§¬ª

[15:11] <timotimo> m: say 100000000000000.base(2).chars

[15:11] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´47‚ê§¬ª

[15:11] <timotimo> m: say 1000000000.base(2).chars

[15:11] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´30‚ê§¬ª

[15:11] <timotimo> m: say 100000000000.base(2).chars

[15:11] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´37‚ê§¬ª

[15:11] <timotimo> m: say 10000000000.base(2).chars

[15:11] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´34‚ê§¬ª

[15:11] <timotimo> get it to this many decimal places and you'll have 32 binary digits of precision :) :)

[15:11] *** vrurg left
[15:13] <jaldhar> timotimo: but somehow I don't think that was intended by the author.

[15:13] <timotimo> most probably not

[15:13] <timotimo> but you can teach the author a lesson :) :) :)

[15:13] <jaldhar> that's true!

[15:13] <timotimo> very tongue-in-cheek right here

[15:14] <timotimo> if you want to reach 32 digits of precision, you'll have to break down the task into pieces that you can use either integer math with, or FatRat math

[15:14] <timotimo> m: say sqrt(163)

[15:14] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´12.767145334803704‚ê§¬ª

[15:14] <timotimo> m: say sqrt(163).nude

[15:14] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´No such method 'nude' for invocant of type 'Num'. Did you mean any of these?‚ê§    none‚ê§    note‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:14] <timotimo> OK

[15:14] <timotimo> so first you'd probably want an implementation of square root that approximates the result until it's precise enough for the rest of the calculation

[15:15] <jaldhar> ok

[15:15] <timotimo> you'll probably want to figure out how precision is affected by exponentiation

[15:15] <timotimo> i might be on the totally wrong track fwiw

[15:16] <timotimo> m: e ** 1

[15:16] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "**" in expression "e ** 1" in sink context (line 1)‚ê§¬ª

[15:16] <timotimo> m: say e ** 1

[15:16] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´2.718281828459045‚ê§¬ª

[15:16] <timotimo> m: say e ** 2

[15:16] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´7.3890560989306495‚ê§¬ª

[15:18] <timotimo> m: say pi * sqrt(163)

[15:18] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´40.10916999113252‚ê§¬ª

[15:18] *** zacts left
[15:19] <timotimo> m: say (e ** (40.10916 + $_) - e ** (40.10916 - $_)) for (1.0, 0.1, 0.01, 0.001, 0.0001)

[15:19] <camelia> rakudo-moar 86d66ea1d: OUTPUT: ¬´6.170623962402013e+17‚ê§52594513284310656‚ê§5.25078330419072e+15‚ê§525069666727840‚ê§52506958008960‚ê§¬ª

[15:19] *** jmerelo joined
[15:19] <timotimo> that's odd

[15:20] <jmerelo> squashable6: status

[15:20] <squashable6> jmerelo, Next SQUASHathon in 25 days and ‚âà20 hours (2019-06-01 UTC-14‚åÅUTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:20] <jmerelo> squashable6: log 2019-05-04

[15:20] <squashable6> jmerelo, Log and stats: https://gist.github.com/02ed9ef70783f691e8f18f403f824948

[15:22] <jmerelo> releasable6: status

[15:22] <releasable6> jmerelo, Next release in ‚âà3 hours. 1 blocker. 132 out of 280 commits logged (‚ö† 2 warnings)

[15:22] <releasable6> jmerelo, Details: https://gist.github.com/d8dcee8283886e02964c7d7fa315ad27

[15:23] *** sno left
[15:24] <jmerelo> And the winner is...

[15:24] <jmerelo> ... wait for it ...

[15:24] <jmerelo> https://github.com/JJ/p6-app-squashathons/blob/master/resources/data/squashathon-May-2019.csv

[15:24] <jaldhar> timotimo:  I'm going to step away from this for a while and clear my head.  Thanks for the help.

[15:24] <timotimo> good luck!

[15:24] <timotimo> i'm probably not math enough to give more help

[15:24] <timotimo> or even know if the last bits of advice are good or bad

[15:24] <jmerelo> .tell lizmat she's the moral winner. But it wouldn't make a lot of sense that she mails the plush toy to herself.

[15:24] <yoleaux> jmerelo: I'll pass your message to lizmat.

[15:24] <jmerelo> So, the _actual_ winner is...

[15:25] <jmerelo> .tell tobs you won the hackathon! https://github.com/JJ/p6-app-squashathons/blob/master/resources/data/squashathon-May-2019.csv Send your coordinates to lizmat to get the plush Camelia!

[15:25] <yoleaux> jmerelo: I'll pass your message to tobs.

[15:25] <jmerelo> .tell xliff you were so close...

[15:25] <yoleaux> jmerelo: I'll pass your message to xliff.

[15:25] <tobs> yippie \o/

[15:25] <yoleaux> 15:25Z <jmerelo> tobs: you won the hackathon! https://github.com/JJ/p6-app-squashathons/blob/master/resources/data/squashathon-May-2019.csv Send your coordinates to lizmat to get the plush Camelia!

[15:25] <timotimo> congrats!

[15:26] <jmerelo> Thanks to all the 12 participants! You've contributed greatly to the quality of the documentation!

[15:26] <tobs> jmerelo++ # organization

[15:27] <Xliff> jmerelo: :P # Tease!

[15:27] <yoleaux> 15:25Z <jmerelo> Xliff: you were so close...

[15:27] <jmerelo> now that you've got a toe in, hope you can continue helping with that. We really need it

[15:28] <Xliff> I know. These things should be longer.

[15:28] <Xliff> Friday 0Z to Tuesday 0Z

[15:28] <Xliff> If that's not too onerous to you.

[15:28] *** andreios left
[15:28] <tobs> definitely helped getting a better picture of how the doc repo even works

[15:28] <Xliff> Especially for documentation squashies.

[15:29] <jmerelo> tobs++, xliff++

[15:29] <jmerelo> Next should be a Rakudo squashathon, I think

[15:29] <jmerelo> but we're open to suggestions.

[15:30] <Xliff> Yeah, but you Euro weenies get more time to work. Squashies are geared for your work-hours! =) :p

[15:31] <jmerelo> Xliff: I take offense at the word weenie. We call them wurst over here.

[15:31] <Xliff> OK, you Euro Vurst! :D

[15:31] <Geth> ¬¶ doc/master: 9 commits pushed by (Clifton Wood)++, (Juan Juli√°n Merelo Guerv√≥s)++

[15:31] <Geth> ¬¶ doc/master: 1e8b002f3d | Changes to operator page

[15:31] <Geth> ¬¶ doc/master: 93aa298cef | Merge branch 'master' of github.com:perl6/doc into op-setbagmix-changes

[15:31] <Geth> ¬¶ doc/master: 70b317b019 | Finished most of content. Will make final revisions, soon.

[15:31] <Geth> ¬¶ doc/master: fb89ac161c | Merge branch 'master' of github.com:perl6/doc into op-setbagmix-changes

[15:31] <Geth> ¬¶ doc/master: d5928d9d48 | - More updates to set/bag/mix section of operator page

[15:31] <Geth> ¬¶ doc/master: 154def6cd6 | Finish first draft of edits.

[15:32] <Geth> ¬¶ doc/master: 99627530f7 | - Setting up the field for #2603.

[15:32] <Geth> ¬¶ doc/master: c69327a6c1 | - One final change.

[15:32] <Geth> ¬¶ doc/master: 275e848eaf | Merge pull request #2765 from Xliff/op-setbagmix-changes

[15:32] <Geth> ¬¶ doc/master: review: https://github.com/perl6/doc/compare/3de03e7a936f...275e848eaffc

[15:32] * jmerelo goes AFK to the movie theater with daughter to watch Endgame. You can do spoiler now, I'm leaving.

[15:32] *** jmerelo left
[15:33] <Xliff> jmerelo: SPOILER! You will LOVE IT.

[15:37] <timotimo> i've got that in front of me, too

[15:38] <Xliff> But what's behind you?

[15:40] <timotimo> at the moment, a cat

[15:43] *** araraloren_ left
[15:44] <timotimo> they want their food

[15:44] <Xliff> Ah. Another cat person. Well met!

[15:45] <timotimo> getting up from the desk at this time of day carries with it the danger of being hit by a flying cat

[15:46] <Xliff> LOL! I know the feeling. Mine will sit on the duvet right next to my keyboard and bat me with her paws.

[15:46] <Xliff> "Hey! You. FEED ME!"

[15:51] *** zacts joined
[15:58] *** pmurias joined
[15:59] <SqrtNegInf> .tell jaldhar You might find this of interest: http://rosettacode.org/wiki/Ramanujan%27s_constant

[15:59] <yoleaux> SqrtNegInf: I'll pass your message to jaldhar.

[16:00] *** zacts left
[16:00] <jaldhar> SqrtNegInf: I'll take a look.  Thanks.

[16:00] <yoleaux> 15:59Z <SqrtNegInf> jaldhar: You might find this of interest: http://rosettacode.org/wiki/Ramanujan%27s_constant

[16:01] <timotimo> the cats in this household mostly just vocalize their desire and expectations

[16:12] *** pecastro_ joined
[16:14] *** pecastro left
[16:17] *** hudo joined
[16:34] *** andreios joined
[16:35] *** andreios left
[16:38] *** zakharyas joined
[16:48] *** andrzejku_ joined
[16:52] *** andrzejku left
[16:52] *** andrzejku_ left
[16:55] <Xliff> lizmat: On line #7 of Method::Also, might it not be safer to do "meth.package.^add_method(.Str,meth) for @$also;" ??

[16:55] <Xliff> Especially since you do "meth.package.^add_method($also.Str,meth);" on L#10

[17:12] *** Manifest0 left
[17:17] *** Manifest0 joined
[17:26] *** rindolf joined
[17:54] *** MilkmanDan left
[17:55] *** MilkmanDan joined
[17:57] *** MidCheck joined
[17:59] *** vrurg joined
[18:14] *** yqt joined
[18:23] <Xliff> m: multi sub ($a, *@props) { say 'SLURPED!' }; my sub a ($a, Int() $b, Int() $c, *@props) { say 'NOT-SLURPED!' }; class A {}; a(A.new, 1, 0, False, True, A.new);

[18:23] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§An anonymous routine may not take a multi declarator‚ê§at <tmp>:1‚ê§------> 3lti sub ($a, *@props) { say 'SLURPED!' }7‚èè5; my sub a ($a, Int() $b, Int() $c, *@pr‚ê§    expecting any of:‚ê§        h‚Ä¶¬ª

[18:23] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; my sub a ($a, Int() $b, Int() $c, *@props) { say 'NOT-SLURPED!' }; class A {}; a(A.new, 1, 0, False, True, A.new);

[18:23] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of routine 'a' (did you mean to declare a multi-sub?)‚ê§at <tmp>:1‚ê§------> 3nt() $c, *@props) { say 'NOT-SLURPED!' }7‚èè5; class A {}; a(A.new, 1, 0, False, True‚ê§    expecting any ‚Ä¶¬ª

[18:23] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int() $b, Int() $c, *@props) { say 'NOT-SLURPED!' }; class A {}; a(A.new, 1, 0, False, True, A.new);

[18:23] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´Ambiguous call to 'a(A, Int, Int, Bool, Bool, A)'; these signatures all match:‚ê§:($a, *@props)‚ê§:($a, $b, $c, *@props)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:23] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int $b, Int() $c, *@props) { say 'NOT-SLURPED!' }; class A {}; a(A.new, 1, 0, False, True, A.new);

[18:23] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´Ambiguous call to 'a(A, Int, Int, Bool, Bool, A)'; these signatures all match:‚ê§:($a, *@props)‚ê§:($a, Int $b, $c, *@props)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:24] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int $b, Int $c, *@props) { say 'NOT-SLURPED!' }; class A {}; a(A.new, 1, 0, False, True, A.new);

[18:24] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´Ambiguous call to 'a(A, Int, Int, Bool, Bool, A)'; these signatures all match:‚ê§:($a, *@props)‚ê§:($a, Int $b, Int $c, *@props)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:28] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int $b, *@props) { say 'NOT SLIRPED' }; a(A.new, 0);

[18:28] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    A used at line 1‚ê§‚ê§¬ª

[18:28] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int $b, *@props) { say 'NOT SLIRPED' }; class A { }; a(A.new, 0);

[18:28] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´Ambiguous call to 'a(A, Int)'; these signatures all match:‚ê§:($a, *@props)‚ê§:($a, Int $b, *@props)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:29] <Xliff> m: multi sub a ($a, *@props where *.elems > 1) { say 'SLURPED!' }; multi sub a ($a, Int $b, *@props) { say 'NOT SLIRPED' }; class A { }; a(A.new, 0);

[18:29] <camelia> rakudo-moar ed240af87: OUTPUT: ¬´NOT SLIRPED‚ê§¬ª

[18:33] <Xliff> Can't slurpy positionals be considered optional?

[18:33] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int $b, *@props) { say 'NOT SLIRPED' }; class A { }; a(A.new);

[18:33] <camelia> rakudo-moar 389ebefe7: OUTPUT: ¬´SLURPED!‚ê§¬ª

[18:33] <Geth> ¬¶ doc: 004aa4b460 | (Rafael Schipiura)++ (committed using GitHub Web editor) | doc/Language/operators.pod6

[18:33] <Geth> ¬¶ doc: Change markdown syntax to POD6.

[18:33] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/004aa4b460

[18:33] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int $b, *@props) { say 'NOT SLIRPED' }; class A { }; a(A.new, 0);

[18:33] <camelia> rakudo-moar 389ebefe7: OUTPUT: ¬´Ambiguous call to 'a(A, Int)'; these signatures all match:‚ê§:($a, *@props)‚ê§:($a, Int $b, *@props)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:33] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!' }; multi sub a ($a, Int $b, *@props) { say 'NOT SLIRPED' }; class A { }; a(A.new, 0, 0);

[18:33] <camelia> rakudo-moar 389ebefe7: OUTPUT: ¬´Ambiguous call to 'a(A, Int, Int)'; these signatures all match:‚ê§:($a, *@props)‚ê§:($a, Int $b, *@props)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:34] *** raschipi joined
[18:36] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!'; @props.elems.say; }; class A { }; a(A.new, 0);

[18:36] <camelia> rakudo-moar 389ebefe7: OUTPUT: ¬´SLURPED!‚ê§1‚ê§¬ª

[18:36] <Xliff> m: multi sub a ($a, *@props) { say 'SLURPED!'; @props.elems.say; }; class A { }; a(A.new);

[18:36] <camelia> rakudo-moar 389ebefe7: OUTPUT: ¬´SLURPED!‚ê§0‚ê§¬ª

[18:37] <Kaiepi> is the squashathon still going on or did i miss it?

[18:37] <Xliff> Kaiepi: Naw. It ended at 9Z

[18:37] <Kaiepi> damn

[18:38] <lizmat> no plushy for you this time, Kaiepi   :-)

[18:38] <yoleaux> 15:24Z <jmerelo> lizmat: she's the moral winner. But it wouldn't make a lot of sense that she mails the plush toy to herself.

[18:39] <Xliff> I want a plushiiieeee!

[18:39] <Xliff> :)

[18:39] <Xliff> Oh well... next time.

[18:39] <Xliff> And I really think squashathon hours should be extended for those of us not on European time.

[18:39] <Xliff> Otherwise we miss them. 

[18:39] <Xliff> Would also help contributions.

[18:39] <lizmat> or come to a Perl event, such as PerlCon, Swiss Perl Workshop, or others like T-Dose

[18:40] <Kaiepi> oh well, i already have a plushie

[18:40] <Xliff> lizmat: When's the next one on East Coast, USA?

[18:40] <Kaiepi> still fun to participate in though

[18:40] <lizmat> Xliff: sorry,  no visits to the US for me and Wendy for the foreseeable future

[18:40] <Xliff> Ah! OK. :(

[18:43] <Kaiepi> sadly i won't be able to go to any perl cons for at least a few years

[18:44] <lizmat> :-(

[18:45] <Geth> ¬¶ doc: f833cc1bdc | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[18:45] <Geth> ¬¶ doc: Remove now doubly mentioned set operators

[18:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f833cc1bdc

[18:51] *** pmurias left
[18:59] <Xliff> I want to go to one when I finally release GTKPlus

[19:02] *** domidumont left
[19:03] * sena_kun already has an accepted talk and the software is not even released yet. :P

[19:08] <ufobat_> I've a couple of "overlapping" syubset definitions, can I influence which one should use in favor of others?

[19:09] *** kaare__ left
[19:09] *** kaare__ joined
[19:13] <raschipi> ufobat_: Aren't they checked in the order they are defined?

[19:13] *** pmurias joined
[19:13] <ufobat_> i haven't checked that

[19:14] <ufobat_> nope the one is not been checked

[19:14] <ufobat_> Argh, sorry I misread what you wrote

[19:16] *** mowcat left
[19:19] <Geth> ¬¶ doc: a7693ac426 | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[19:19] <Geth> ¬¶ doc: Add infix C¬´(^)¬ª, infix C¬´‚äñ¬ª to operators

[19:19] <Geth> ¬¶ doc: 

[19:19] <Geth> ¬¶ doc: For now.  I still need to investigate the behaviour of a chained (^) operator.

[19:19] <Geth> ¬¶ doc: It took me a long time to get to the current semantics.  Alas, I didn't

[19:19] <Geth> ¬¶ doc: document properly at the time, so I will need to revisit that.  For the

[19:19] <Geth> ¬¶ doc: record, the semantics of a chained (^) or definitely not the same for an

[19:19] <Geth> ¬¶ doc: infix (^), especially when Bags/Mixes are involved.

[19:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a7693ac426

[19:25] *** Manifest0 left
[19:30] *** Manifest0 joined
[19:30] *** sno joined
[19:34] <xinming> for @x -> $item { };     <--- In this example, How do we get the remaining items after the $item?

[19:34] <xinming> for example, after we processed 2 $items, then, in block, we call last, But before we call last, I'd like to get the "tail" of unprocessed items.

[19:35] <xinming> I know I can have index to do that. Just know wether there is better way. :-)

[19:35] <lizmat> while @x.shift -> $item { }

[19:36] <timotimo> is it okay to ... yeah

[19:36] <lizmat> @x will contain unprocessed items after the loop

[19:36] <timotimo> only if @x is allowed to be changed, of course

[19:36] <lizmat> well, if not, then first copy it....  or start playing tricks with iterators, I guess

[19:38] <timotimo> sure

[19:38] <Geth> ¬¶ doc: 430c9fb2d5 | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[19:38] <Geth> ¬¶ doc: Add infix C¬´(+)¬ª, infix C¬´‚äé¬ª to operators

[19:38] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/430c9fb2d5

[19:38] <timotimo> can always have a variable that counts up with iterations

[19:38] <lizmat> for @x.kv -> $i, $item { }

[19:39] <timotimo> well, you'd want the $i after the end of thel oop

[19:39] <xinming> thanks, that way is easy.

[19:39] <xinming> the while @x.shift -> $item  { }

[19:40] <xinming> I had my version with   @x.kv -> $idx, $item { }      I personally prefer the 'while ...' sollution

[19:40] <lizmat> xinming: please note that that only works that way if the value shifted before the end booleanizes to True

[19:41] <xinming> hmm, So, seems the fo r @x.kv -> $i, $item   is I want.

[19:41] <lizmat> if not, then probably the .kv -> $index, $value is probably the better solution

[19:41] <xinming> As I meet what you mentioned yesterday.

[19:41] <xinming> something like;

[19:41] <xinming> m: my $x = start { sleep 5 }; if $x { "We won't say".say; };

[19:41] <camelia> rakudo-moar 389ebefe7: ( no output )

[19:42] <xinming> :-)

[19:42] <lizmat> :-)

[19:42] *** Black_Ribbon joined
[19:52] *** jaldhar left
[20:02] * masak .oO( the end booleanizes the means )

[20:07] *** MidCheck left
[20:08] *** ufobat__ joined
[20:08] <lizmat> .oO( if that were only True )

[20:09] <lizmat> I mean, on average  :-)

[20:10] *** yqt left
[20:11] *** ufobat_ left
[20:13] <SqrtNegInf> Appreciate any feedback over at SO: https://stackoverflow.com/questions/55994128/post-increment-and-variable-re-use-in-a-single-statement-perl-5-vs-perl-6

[20:20] *** Manifest0 left
[20:22] *** [Sno] joined
[20:24] <Geth> ¬¶ doc: 587c4a297f | (Rafael Schipiura)++ (committed using GitHub Web editor) | doc/Type/Failure.pod6

[20:24] <Geth> ¬¶ doc: Failure is Nil

[20:24] <Geth> ¬¶ doc: 

[20:24] <Geth> ¬¶ doc: According to https://github.com/rakudo/rakudo/blob/master/src/core/Failure.pm6

[20:24] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/587c4a297f

[20:24] *** sno left
[20:25] *** cpan-p6 left
[20:25] *** cpan-p6 joined
[20:25] *** cpan-p6 left
[20:25] *** cpan-p6 joined
[20:27] *** Manifest0 joined
[20:28] *** lasse left
[20:32] *** vrurg left
[20:33] *** vrurg joined
[20:40] *** zacts joined
[20:46] *** Manifest0 left
[20:46] <Geth> ¬¶ doc: cf0c5930c3 | (Rafael Schipiura)++ (committed using GitHub Web editor) | doc/Type/Rational.pod6

[20:46] <Geth> ¬¶ doc: .Range in some Numeric types.

[20:46] <Geth> ¬¶ doc: 

[20:46] <Geth> ¬¶ doc: New feature for 6.d, updates #2632

[20:46] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cf0c5930c3

[20:49] *** MasterDuke left
[20:49] <Geth> ¬¶ doc: ed5b2f39c5 | (Rafael Schipiura)++ (committed using GitHub Web editor) | doc/Type/Int.pod6

[20:49] <Geth> ¬¶ doc: Aditional .Range on some Numeric types.

[20:49] <Geth> ¬¶ doc: 

[20:49] <Geth> ¬¶ doc: As Int doesn't do Rational. Updates #2632

[20:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ed5b2f39c5

[20:50] *** Geth left
[20:51] *** Geth joined
[20:51] *** Manifest0 joined
[20:57] <Geth> ¬¶ doc: 02d5e3c5d9 | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[20:57] <Geth> ¬¶ doc: Add infix C¬´(-)¬ª, infix C¬´‚àñ¬ª to operators

[20:57] <Geth> ¬¶ doc: 

[20:57] <Geth> ¬¶ doc: And some other minor fixes for errors I made earlier today

[20:57] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/02d5e3c5d9

[21:03] <raschipi> lizmat: Are those the last set operators missing? Could you close https://github.com/perl6/doc/issues/2761 ?

[21:04] <lizmat> closed the ticket, will continue on better documentation in that area

[21:09] <raschipi> lizmat++

[21:09] <raschipi> I assume you're looking into https://github.com/perl6/doc/issues/2603 ?

[21:10] <Geth> ¬¶ doc: rafaelschipiura unassigned from Xliff Issue Set/Bag operations should include Mixes too https://github.com/perl6/doc/issues/2603

[21:10] <Geth> ¬¶ doc: rafaelschipiura assigned to lizmat Issue Set/Bag operations should include Mixes too https://github.com/perl6/doc/issues/2603

[21:11] <raschipi> Also, does your work adresses the 'Sets, Bags, Mixes (aka QuantHashes) and set operators' section on https://github.com/perl6/doc/issues/2632 ?

[21:21] *** __jrjsmrtn__ joined
[21:22] <Geth> ¬¶ doc: 0ca780dd7c | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[21:22] <Geth> ¬¶ doc: Add infix C¬´(elem)¬ª, infix C¬´‚àà¬ª, infix C¬´‚àâ¬ª to operators

[21:22] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/0ca780dd7c

[21:23] *** _jrjsmrtn left
[21:31] <Geth> ¬¶ doc: 1a6a52c02f | (Elizabeth Mattijsen)++ | doc/Language/operators.pod6

[21:31] <Geth> ¬¶ doc: Add infix C¬´(cont)¬ª, infix C¬´‚àã¬ª, infix C¬´‚àå¬ª to operators

[21:31] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1a6a52c02f

[21:32] *** Manifest0 left
[21:36] *** Kaiepi left
[21:37] *** Manifest0 joined
[21:37] *** Kaiepi joined
[21:48] <lizmat> sleep&

[21:48] *** Manifest0 left
[21:50] *** robertle left
[21:50] *** zakharyas left
[21:54] *** Manifest0 joined
[21:59] *** zacts left
[22:02] *** hudo left
[22:13] *** rindolf left
[22:21] *** natrys left
[22:21] *** Kaiepi left
[22:23] *** mowcat joined
[22:24] *** mowcat left
[22:24] *** mowcat joined
[22:25] *** dustinm` left
[22:30] *** dustinm` joined
[22:32] *** Black_Ribbon left
[22:33] *** Black_Ribbon joined
[22:34] *** Black_Ribbon left
[22:37] *** Kaiepi joined
[22:39] *** Kaiepi left
[22:40] *** Kaiepi joined
[22:43] *** matiasli1a joined
[22:48] <sena_kun> m: note [{a => 3, b => 2}]; note [{a => 3, b => 2}][0].^name;

[22:48] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[a => 3 b => 2]‚ê§Pair‚ê§¬ª

[22:48] <sena_kun> 6c: note [{a => 3, b => 2}]

[22:49] <committable6> sena_kun, https://gist.github.com/044ea4b5201277d98880f48fca51c5f1

[22:49] *** netrino left
[22:49] <sena_kun> this is what I'd call "very surprising"

[22:50] <sena_kun> m: note [{a => {a => 3, b => 2}}]

[22:50] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[a => {a => 3, b => 2}]‚ê§¬ª

[22:50] <sena_kun> m: note [{a => {a => 3, b => 2}, b => { c => 1 }}]

[22:50] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[a => {a => 3, b => 2} b => {c => 1}]‚ê§¬ª

[22:50] <timotimo> you think? [blorp] always iterates what's inside it to put it into the array, "single-argument rule"

[22:50] <timotimo> so if you want to prevent that, put a , before the ]

[22:51] <timotimo> m: say {a => 3, b => 2}.Array.perl

[22:51] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[:b(2), :a(3)]‚ê§¬ª

[22:51] <timotimo> m: say {a => 3, b => 2}.item.Array.perl

[22:51] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[:b(2), :a(3)]‚ê§¬ª

[22:51] <timotimo> m: say ({a => 3, b => 2},).Array.perl

[22:51] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[{:a(3), :b(2)},]‚ê§¬ª

[22:51] <timotimo> not sure if there's a way with a simple method call

[22:51] <sena_kun> timotimo, yup. well, maybe because I was too lazy to check this "single-arg rule" everyone talks about...

[22:52] <sena_kun> it totally looks to me like a "a hash literal inside of an array literal", hence an array of hashes. apparently, I am wrong here...

[22:52] <timotimo> well, the same thing happens with "an array literal inside an array literal"

[22:52] <timotimo> m: say [[1, 2]].perl

[22:52] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[1, 2]‚ê§¬ª

[22:52] <timotimo> m: say [[1, 2],].perl

[22:52] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[[1, 2],]‚ê§¬ª

[22:53] <timotimo> one of the things it allows is to use <foo bar baz> but get an Array out of it:

[22:53] <timotimo> m: say [<a b c d e>].perl

[22:53] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´["a", "b", "c", "d", "e"]‚ê§¬ª

[22:53] <timotimo> m: say [<a b c d e>,].perl

[22:53] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[("a", "b", "c", "d", "e"),]‚ê§¬ª

[22:53] <sena_kun> timotimo, are there some particular advantages with this approach?

[22:54] <timotimo> i don't remember all the discussions from back when this design was built

[22:54] <sena_kun> ok, never mind then

[22:54] <timotimo> it was part of the Great List Refactor which made things flatten a whole lot less on their own, and also removed Parcel from the language

[22:54] <sena_kun> just a bit curious what can drive such a thing

[22:59] <raschipi> The principle behind it is called DWIM. Do What I Mean.

[22:59] <raschipi> And we always said that for every DWIM there's often a WAT.

[23:02] <sena_kun> the perspectives are different, so in this case I'd totally say that DWIM is "I want a hash in an array". but, of course, cannot counter a WAT moment part. :)

[23:02] <timotimo> see also the waterbed theory of language design maybe?

[23:03] <sena_kun> yup, heard about this one

[23:03] <Xliff> can CStructs do delegation?

[23:03] *** pecastro_ left
[23:03] <sena_kun> well, didn't want to blame anything or something like that. just maybe too tired from writing Controls code this late...

[23:03] <raschipi> m: my @a = <1 2 3>; .say for @a; #This should print '1‚ê§2‚ê§3' or '1 2 3'?

[23:03] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row across lines (missing semicolon or comma?)‚ê§at <tmp>:3‚ê§------> 0327‚èè5<EOL>‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        s‚Ä¶¬ª

[23:04] <timotimo> Xliff: delegation is possible, but only to things that can be an attribute inside a CStruct, i.e. you can only delegate to a CStruct inside (with has or HAS) the CStruct

[23:04] <raschipi> m: my @a = <1 2 3>; .say for @a;

[23:04] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[23:04] <timotimo> in particular, you can't use a regular perl6 type like Array or Hash for delegation

[23:04] <raschipi> This should print '1‚ê§2‚ê§3' or '1 2 3'?

[23:06] <Xliff> timotimo: EXCELLENT!

[23:11] <timotimo> delegation is mostly about autogenerated methods, and method stuff can go into CStruct just fine, because everything related to methods lives in the metaobject rather than the instances themselves

[23:12] <raschipi> m: my @a = <1 2 3>; my @b = <a b c>; .say for @a, @b;

[23:12] <camelia> rakudo-moar b0dd44b00: OUTPUT: ¬´[1 2 3]‚ê§[a b c]‚ê§¬ª

[23:12] <raschipi> sena_kun: can you see that it always unwraps one level?

[23:20] <Xliff> timotimo: Doesn't work. I get the inscrutable "P6opaque: no such attribute '$!inlined' on type Attribute+{<anon|2>} in a Attribute+{<anon|2>} when trying to bind a value"

[23:21] <Xliff> Goes away if I remove the handles trait from the HAS declaration.

[23:23] *** pmurias left
[23:27] <sena_kun> raschipi, I see, thanks. well, for the first case, I'd argue it is ambiguous, that's why I don't like sigils too much when it comes to such things.

[23:27] <sena_kun> but anyway, sleep&

[23:28] *** sena_kun left
[23:33] *** Manifest0 left
[23:38] *** MasterDuke joined
[23:38] *** MasterDuke left
[23:38] *** MasterDuke joined
[23:41] *** Manifest0 joined
[23:52] *** Manifest0 left
[23:58] *** Manifest0 joined
