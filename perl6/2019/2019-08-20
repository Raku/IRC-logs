[00:00] *** reportable6 left
[00:00] <SmokeMachine> This way I can pass a ‚Äújoin‚Äù model instead of a real model... to make it easier to join...

[00:00] <vrurg> SmokeMachine: except that I'd expect it to be :model(MyModel)? Or do you do string resolution into a model type?

[00:01] <vrurg> Wow, I see! That'd probably would speed up some actions.

[00:01] <SmokeMachine> It already do the string resolution because of the lazy load... but it will accept the Model obj type as well...

[00:02] <vrurg> My biggest disappointemnt, so far is that there is a bug in rakudo with run-away closures. It breaks so many things around. :(

[00:02] <SmokeMachine> vrurg: yes, probably...

[00:02] *** reportable6 joined
[00:02] *** ChanServ sets mode: +v reportable6

[00:02] *** kiwi_65 joined
[00:03] <SmokeMachine> Yes... if it‚Äôs the bug I‚Äôm thinking of... I had to change a lot of stuff on Red to make it possible to remove the ‚Äòno precompilation‚Äô because of that...

[00:05] <discord6> <Aearnus> what's the syntax for coercing an argument to a type again

[00:05] <vrurg> SmokeMachine: I think it's the one.

[00:05] <discord6> <Aearnus> sub f(Str(IO::Path) $s) or something like that?

[00:05] <vrurg> Aearnus: yes, it's the syntax

[00:06] <SmokeMachine> vrurg: I‚Äôm thinking of, on this api change, remove the red-do from experimentation and add it to core... what do you think?

[00:07] <vrurg> SmokeMachine: why asking? My idea, your code. ;) Anybody disagree? Any one?? No? Ok! :D :D :D

[00:07] <SmokeMachine> :D

[00:09] *** leont left
[00:09] *** [particle]1 joined
[00:10] *** TeamBlast left
[00:11] *** [particle] left
[00:15] *** [particle] joined
[00:16] *** [particle]1 left
[00:17] *** [particle]1 joined
[00:19] *** [particle] left
[00:23] *** Cabanossi left
[00:23] *** [particle] joined
[00:23] *** MilkmanDan left
[00:24] *** Cabanossi joined
[00:25] *** [particle]1 left
[00:29] *** MilkmanDan joined
[00:39] *** [particle]1 joined
[00:41] *** [particle] left
[00:56] *** [particle] joined
[00:57] *** [particle]1 left
[01:00] *** [particle] left
[01:01] *** TeamBlast joined
[01:03] *** [particle] joined
[01:06] *** MasterDuke left
[01:08] *** [particle] left
[01:09] *** [particle] joined
[01:19] *** lucasb left
[01:40] *** molaf left
[01:40] *** nepugia_ joined
[01:40] *** nepugia left
[01:49] *** ravenous_ joined
[01:51] *** ChoHag left
[01:52] *** molaf joined
[01:53] *** ravenous_ left
[01:55] *** nepugia_ left
[01:58] *** ChoHag joined
[02:04] *** Manifest0 left
[02:04] *** Manifest0 joined
[02:05] <cpan-p6> New module released to CPAN! Tomty (0.0.2) by 03MELEZHIK

[02:08] *** [particle]1 joined
[02:10] *** [particle] left
[02:11] *** [particle] joined
[02:13] *** [particle]1 left
[02:15] *** cpup joined
[02:26] *** cpan-p6 left
[02:26] *** cpan-p6 joined
[02:26] *** cpan-p6 left
[02:26] *** cpan-p6 joined
[02:29] *** Cabanoss- joined
[02:30] *** Cabanossi left
[02:30] *** Cabanoss- is now known as Cabanossi

[02:39] *** mahafyi left
[02:49] *** [particle] left
[02:50] *** [particle] joined
[02:58] *** kaare_ left
[03:02] *** stanleytam joined
[03:07] *** squashable6 left
[03:07] *** squashable6 joined
[03:07] *** ChanServ sets mode: +v squashable6

[03:10] *** kiwi_65 left
[03:21] *** [Sno] joined
[03:32] *** kst left
[03:42] *** stanleytam left
[03:50] *** Sgeo__ joined
[03:52] *** Sgeo_ left
[04:01] *** [Sno] left
[04:01] <Geth> ¬¶ doc: e2effd77f8 | Alexander++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[04:01] <synopsebot> Link: https://doc.perl6.org/language/regexes

[04:01] <Geth> ¬¶ doc: Literals and metacharacters: layout correction, introduction of new examples, minor corrections (#2957)

[04:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/e2effd77f8

[04:06] *** [particle]1 joined
[04:09] *** [particle] left
[04:15] *** [particle]1 left
[04:15] *** [particle] joined
[04:18] *** TeamBlast is now known as TeamBlast_

[04:20] *** TeamBlast joined
[04:21] *** TeamBlast_ left
[04:24] *** rindolf joined
[04:24] *** aborazmeh joined
[04:24] *** aborazmeh left
[04:24] *** aborazmeh joined
[04:27] *** MilkmanDan left
[04:28] *** MilkmanDan joined
[04:29] *** TeamBlast left
[04:29] *** Circlepuller joined
[04:30] *** Circlepuller is now known as TeamBlast

[04:36] *** [particle] left
[04:39] *** [particle] joined
[04:40] *** TeamBlast left
[04:40] *** curan joined
[04:47] *** TeamBlast joined
[04:53] *** kst joined
[04:59] <aearnus[m]> m: my @cmd; my @args; qqx( { @cmd } { @args } )

[04:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3my @cmd; my @args; qqx( { @cmd }7‚èè5 { @args } )‚ê§    expecting a‚Ä¶¬ª

[05:00] <aearnus[m]> is that ^^^ right or can you not use `()` as string delimiters

[05:03] <aearnus[m]> aha, the docs explain it. nvm nvm!

[05:17] *** sauvin joined
[05:17] *** aborazmeh left
[05:21] *** molaf left
[05:33] *** robertle left
[05:35] <aearnus[m]> is there any way to make a class in a module that has the same name? like, I want to be able to import the `NSJail` class from the `NSJail` module

[05:35] <aearnus[m]> (I know I could do `NSJail::NSJail` but that's ugly)

[06:00] *** reportable6 left
[06:01] *** reportable6 joined
[06:19] *** fake_space_whale left
[06:19] *** ravenous_ joined
[06:24] *** ravenous_ left
[06:41] *** rba left
[06:42] *** rba joined
[06:45] *** rba left
[06:45] *** rba joined
[06:53] *** Cabanossi left
[06:59] *** Cabanoss- joined
[07:05] *** domidumont joined
[07:20] *** leont joined
[07:27] *** sena_kun joined
[07:28] *** sena_kun left
[07:40] *** giraffe left
[07:40] *** giraffe joined
[07:45] *** leont left
[07:51] <Kaiepi> aearnus[m], sub EXPORT is probably what you're looking for

[07:52] <aearnus[m]> Kaiepi, what do you mean?

[07:52] <aearnus[m]> I just haven't seen that before

[07:53] <Kaiepi> something like this https://hastebin.com/osihabifer.pl

[07:54] <Kaiepi> i think this would let you `use NSJail` and have NSJail point to the class, but i'm not sure, i haven't used it in this way

[07:54] <aearnus[m]> Ahh, didn't know that was something you could do

[07:55] <Kaiepi> yeah, that works

[08:08] *** ravenous_ joined
[08:11] <Geth> ¬¶ doc: 2d210b68d9 | (Luis F. Uceta)++ | 7 files

[08:11] <Geth> ¬¶ doc: Proofread some documents

[08:11] <Geth> ¬¶ doc: 

[08:11] <Geth> ¬¶ doc: Changes mostly involve text reflow, whitespace and correcting minor typos.

[08:11] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2d210b68d9

[08:11] <Geth> ¬¶ doc: cab26672cf | (Luis F. Uceta)++ | 2 files

[08:11] <Geth> ¬¶ doc: Add changes as requested

[08:11] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cab26672cf

[08:11] <Geth> ¬¶ doc: ec374a60e4 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | 7 files

[08:11] <Geth> ¬¶ doc: Merge pull request #2955 from uzluisf/doc-proofreading

[08:11] <Geth> ¬¶ doc: 

[08:11] <Geth> ¬¶ doc: Proofread some documents

[08:11] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ec374a60e4

[08:12] *** ravenous_ left
[08:16] *** robertle joined
[08:21] *** dolmen joined
[08:28] *** [particle]1 joined
[08:30] *** [particle] left
[08:40] *** zakharyas joined
[08:45] *** sena_kun joined
[09:00] *** scimon joined
[09:00] <scimon> Morning.

[09:00] <aearnus[m]> o/

[09:04] <SmokeMachine> morning!

[09:07] * lizmat clickbaits https://p6weekly.wordpress.com/2019/08/19/2019-31-32-33-and-were-back/

[09:07] <tellable6> 2019-08-19T23:06:25Z #perl6 <tbrowder> lizmat great catchup weekly!

[09:07] <tellable6> 2019-08-19T23:53:05Z #perl6-dev <SmokeMachine> lizmat what event name would make you go?

[09:08] *** Maylay left
[09:09] <scimon> Read the weekly last night and this morning (and watch the Demythtfying talk) all good.

[09:09] *** Maylay joined
[09:10] <scimon> I had a thought of something I can do if/when we rename I'll take the job of adding the new tag to all the stack overflow questions.

[09:11] <lizmat> scimon: I understand there are maintainer tools for that to make that a lot easier

[09:11] <aearnus[m]> So many little edge cases to handle. Who's going to change the Wikipedia article?

[09:11] <lizmat> aearnus[m]: someone

[09:13] <aearnus[m]> :)

[09:17] <kawaii> for anyone interested, I'm going to throw together a pre-release of Rakudo Star 2019.07.1 since it doesn't look like there's anything happening in that regards

[09:19] <El_Che> kawaii: there were a few people asking about it, so they'll be glad :)

[09:20] <scimon> lizmat: Awesome! Still. I'll take stack overflow and once that's done will see what else I can help with. Assuming of course it's decided we're going to do it. I don't want to preempt things.

[09:21] <lizmat> ++scimon

[09:22] *** zakharyas left
[09:29] <sena_kun> lizmat++, a great weekly! # "I joined #prl6-dev" <- typo

[09:30] <sena_kun> "Meta-c omputation" <- redundant whitespace

[09:32] *** pat_js joined
[09:32] <lizmat> sena_kun++   # both fixed

[09:32] <sena_kun> \o/

[09:40] *** camelia left
[09:42] *** camelia joined
[09:42] *** zakharyas joined
[09:43] *** ChanServ sets mode: +v camelia

[09:52] *** pilne left
[10:01] *** zakharyas left
[10:03] <scimon> Is the only way to check if a Rat is going to give a divide by 0 error to check .denominator ? Is it worth adding a .safe (or some other name) method that gives False if the denominator is 0?

[10:05] <jnthn> I think probably just checking the denominator is 0 is clear enough

[10:05] <scimon> Yeah... I guess I would like to type less ;) 

[10:06] <lizmat> m: my $a = 42/0; dd +$a   # sorta expected to see a Failure there

[10:06] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´<1/0>‚ê§¬ª

[10:06] <scimon> Ah but dd is special magic. 

[10:06] <jnthn> + is surely identity on a Rat :)

[10:06] <jnthn> But yes, the actual division is delayed

[10:07] <scimon> I think dd is using .perl which is fine it's the Str coercion that blows stuff up. 

[10:07] <jnthn> Right, it has to do the division then

[10:07] <scimon> (I'm just working on the list of cool stuff to tell people about [INSERT LANGUAGE NAME HERE].

[10:08] <lizmat> I was sorta expecting you could use prefix:<+> in combination with `with` as a quick way to see if a Rat is valid

[10:08] <lizmat> aka, +Rat would check the denominator for you

[10:12] <scimon> (I'm currently making the, probably futile, attempt to get Perl6 accepted as at least a potential language to make stuff in at Work.) 

[10:27] *** squashable6 left
[10:27] <woolfy> In case people are still a bit happy that Perl 6 entered the Tiobe index at #93, be sad that Perl 6 dropped out of the top 100 already. https://tiobe.com/tiobe-index/

[10:29] <woolfy> Languages that are in the Tiobe Index on place 51-100, listed in alphabetical order: (Visual) FoxPro, 4th Dimension/4D, ABC, Alice, BBC BASIC, bc, Bourne  shell, C shell, CL (OS/400), Clipper, Clojure, CoffeeScript, Common  Lisp, Crystal, cT, Erlang, Euphoria, Factor, Forth, Icon, Inform, Io, J,  Korn shell, LabVIEW, Ladder Logic, LiveCode, Maple, Mercury, ML,  Monkey, MQL4, MS-DOS batch, NATURAL, OpenCL, OpenEdge ABL, Oz, PL/I,  Ring

[10:30] <tadzik> given how obscure these are, I can't believe Perl 6 is not more popular than this, whatever your measure of popularity might be

[10:30] <tadzik> make it seems like TIOBE is just not very good at distinguishing Perl and Perl 6

[10:30] <tadzik> we'll see when Raku comes around... ;)

[10:31] <woolfy> tadzik: any article that Google can find should have "Perl 6 programming" in it: https://tiobe.com/tiobe-index/programming-languages-definition/

[10:32] <woolfy> tadzik: I think most people only write "Perl 6", "Perl6", "Rakudo Perl 6", and therefore any news about Perl 6 will not be picked up by Tiobe.

[10:32] *** squashable6 joined
[10:35] <tadzik> woolfy: yeah, I'm not a big fan of their methodology either :)

[10:38] *** ravenous_ joined
[10:38] *** Black_Ribbon left
[10:39] <woolfy> tadzik : it is not very important to be a big fan of Tiobe or not.  It seems that quite a lot of people use it as a means to qualify or disqualify a programming language for their new projects.  To have a programming language acceptable to be used inside their company.

[10:39] <woolfy> It's a bit like people who do not believe in gravity: jump of a building and you will fall down, gravity doesn't care if you are a fan or not. ;-)

[10:42] *** ravenous_ left
[10:44] <Geth> ¬¶ doc/regexes: df1297024f | threadless-screw++ | doc/Language/regexes.pod6

[10:44] <Geth> ¬¶ doc/regexes: Rewrite of regexes-lexical conventions section

[10:44] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/df1297024f

[10:44] <Geth> ¬¶ doc/regexes: 26b90051d4 | threadless-screw++ | doc/Language/regexes.pod6

[10:44] <Geth> ¬¶ doc/regexes: wip

[10:44] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/26b90051d4

[10:44] <Geth> ¬¶ doc/regexes: e258b433e5 | threadless-screw++ | doc/Language/regexes.pod6

[10:44] <Geth> ¬¶ doc/regexes: Expansion of Regexes:Lexical Conventions section:

[10:44] <Geth> ¬¶ doc/regexes: 

[10:44] <Geth> ¬¶ doc/regexes: - intro clarifying 'regular expressions' and 'regexes';

[10:44] <Geth> ¬¶ doc/regexes: - systematic treatment of anonymous and named regex definitions;

[10:44] <Geth> ¬¶ doc/regexes: - new subsection on common ways of matching regexes;

[10:44] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/e258b433e5

[10:46] <Geth> ¬¶ doc: tbrowder++ created pull request #2959: tidy grammar

[10:46] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2959

[10:49] <Geth> ¬¶ doc: a7e659eb4b | (Tom Browder)++ | doc/Language/regexes.pod6

[10:49] <synopsebot> Link: https://doc.perl6.org/language/regexes

[10:49] <Geth> ¬¶ doc: tidy grammar

[10:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a7e659eb4b

[10:49] <Geth> ¬¶ doc: 7496243939 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[10:49] <Geth> ¬¶ doc: Merge pull request #2959 from tbrowder/gram

[10:49] <Geth> ¬¶ doc: 

[10:49] <Geth> ¬¶ doc: tidy grammar

[10:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/7496243939

[10:49] <Geth> ¬¶ doc: threadless-screw++ created pull request #2960: Regexes

[10:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2960

[10:51] *** dolmen left
[10:54] <scimon> The "We won't use language X because it's not popular" circular argument is a thing. Unfortunately most businesses exist to make money and not train developers (or let devs do what they like). 

[10:55] <scimon> So you get the vicious circle. No one pays people to write X so no one learns X because they can't get a job in it... sigh.

[10:56] <scimon> Critical mass is the thing (and why having a niche and / or a killer app is important). 

[10:56] <scimon> Remember when everyone suddenly wanted to learn Ruby because Rails was a thing? (And then they killed it with their constant updates).

[10:57] <tadzik> woolfy: you are correct :)

[10:57] <woolfy> scimon and tadzik : it still makes me sad when stuff like this is correct...  

[10:59] <woolfy> I remember happily the time (I think it was the YAPC::Europe in Frankfurt) when we were sitting with a large group on the terrace in front of a restaurant, when masak arrived with the words "I found Perl 6 modules on darkpan" and we all rejoiced.

[10:59] <woolfy> (or something like that)

[10:59] <tadzik> well, to get back to the gravity example: it doesn't matter if we like it or agree with it, it's the best model of reality that we currently have, and the best we can do is work with that :)

[11:11] *** veesh1 joined
[11:23] *** dolmen joined
[11:39] <scimon> Yup.

[11:39] <scimon> Thing is. I'm not going to stop banging this drum. Because it's the only way for it to work. Keep chipping away. 

[11:40] <scimon> Also point out "I thought you wanted autonomous teams?" (that one makes me laugh). 

[11:40] <Geth> ¬¶ problem-solving/path-to-raku: b9c597b3d7 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[11:40] <Geth> ¬¶ problem-solving/path-to-raku: Add mention of pragmas and other places needing adaptation.

[11:40] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/b9c597b3d7

[11:54] <Ulti> scimon popularity isnt quite the same as highly adopted though 

[11:55] <Ulti> especially adopted for production softeng 

[11:55] *** adu left
[11:55] <lizmat> Whether you agree with this or not, a TIOBE listing means bankability of a language

[11:55] <lizmat> we need bankability for Perl 6, because without it there will not be any commitment from companies using the language

[11:56] <woolfy> -> Whether you agree with it or not, gravity means stuff falls down to Earth.

[11:56] <lizmat> and without commitment from companies, there will not be any jobs

[11:56] <lizmat> in Perl 6

[11:56] <lizmat> nor will there be any money for grants

[12:00] *** reportable6 left
[12:00] *** scimon_ joined
[12:01] *** reportable6 joined
[12:03] *** scimon left
[12:05] *** noisegul joined
[12:10] <El_Che> woolfy: out of the top 100? autch

[12:11] <scimon_> Ulti: You are not wrong.

[12:12] <scimon_> Unfortunately perceived popularity can matter. 

[12:12] *** scimon_ left
[12:12] *** scimon_ joined
[12:12] *** scimon_ left
[12:13] *** scimon joined
[12:14] *** sena_kun left
[12:14] *** sena_kun joined
[12:18] <El_Che> and to be blunt we don't have perceived popularity nor hidden adoption

[12:39] *** veesh1 left
[12:46] <cpan-p6> New module released to CPAN! App::AizuOnlineJudge (0.0.3) by 03TITSUKI

[12:51] *** domidumont left
[12:51] *** domidumont1 joined
[13:01] *** lucasb joined
[13:03] *** pat_js left
[13:04] <Ulti> yeah I would say perceived popularity is kind of more important in open source, its how you get adoption because people will try out the language and related libraries at home and then introduce their place of work to it when they see a fit

[13:05] <Ulti> going straight for corporate adoption feels a little strained, how can you actually target that without a lot of investment in solving specific problems for them and putting it in the core language?

[13:06] <Ulti> and by investment I mean actual monetary investment and understanding of what problem space you'd take the language as a whole down... at that point it becomes more of a DSL for a task too

[13:06] *** pmurias joined
[13:06] <Ulti> surely libraries are where one would expect adoption from companies

[13:09] <pmurias> tadzik: some of the languages on that top 50 list seem not that obscure

[13:11] <pmurias> tadzik: like say CoffeScript

[13:11] <tadzik> some, yes

[13:18] *** pmurias left
[13:18] *** pmurias joined
[13:23] *** dolmen left
[13:26] *** pmurias left
[13:28] *** dolmen joined
[13:31] *** mcmillhj joined
[13:31] *** curan left
[13:40] *** nepugia joined
[13:40] *** pat_js joined
[14:02] *** molaf joined
[14:04] *** jtpalmer left
[14:09] *** mcmillhj left
[14:19] *** domidumont1 left
[14:31] <Geth> ¬¶ problem-solving/path-to-raku: 87d43430ed | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:31] <Geth> ¬¶ problem-solving/path-to-raku: Separate next release from language release

[14:31] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/87d43430ed

[14:34] *** pierrot_ joined
[14:34] <Geth> ¬¶ problem-solving/path-to-raku: 535d778c66 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:34] <Geth> ¬¶ problem-solving/path-to-raku: Specify when "Perl 6" should be referenced

[14:34] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/535d778c66

[14:36] *** Guest93 left
[14:37] *** Guest93 joined
[14:37] <Geth> ¬¶ problem-solving/path-to-raku: dd6054cddd | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:37] <Geth> ¬¶ problem-solving/path-to-raku: NQP stays Not Quit Perl

[14:37] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/dd6054cddd

[14:40] <Geth> ¬¶ problem-solving/path-to-raku: d14804e6b0 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:40] <Geth> ¬¶ problem-solving/path-to-raku: Elaborate a bit about changing external references

[14:40] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/d14804e6b0

[14:42] *** HPWiz joined
[14:44] <HPWiz> p6: say [\R+] 1‚Ä¶10;

[14:44] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´(10 19 27 34 40 45 49 52 54 55)‚ê§¬ª

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: ce377bd9c6 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: Remove mention of marketing repo

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: 

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: We need new material, that's the important thing.  Of course that will

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: wind up in a repo.

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: 

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: FWIW, I mentioned a new repo because I thought we had lost the repo with

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: Zoffix' departure.

[14:45] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/ce377bd9c6

[14:46] <HPWiz> The output above is unexpected to me, R+ is the same as +. It seems to reverse the list, then [\+]

[14:48] *** pmurias joined
[14:48] <Geth> ¬¶ problem-solving/path-to-raku: 2f5794b458 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:48] <Geth> ¬¶ problem-solving/path-to-raku: Elaborated on special attention

[14:48] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/2f5794b458

[14:53] <Geth> ¬¶ problem-solving/path-to-raku: 1b89762c28 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:53] <Geth> ¬¶ problem-solving/path-to-raku: Elaborate on repo name changes and documentation changes

[14:53] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/1b89762c28

[14:55] <Geth> ¬¶ problem-solving: AlexDaniel assigned to JJ Issue Specify documentation URLs https://github.com/perl6/problem-solving/issues/93

[14:56] *** pat_js left
[14:57] <Geth> ¬¶ problem-solving/path-to-raku: 2b237b5ca8 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[14:57] <Geth> ¬¶ problem-solving/path-to-raku: Elaborate on effects on running sub-projects

[14:57] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/2b237b5ca8

[14:57] <AlexDaniel> HPWiz: you mean like this

[14:57] <AlexDaniel> c: 2015.03 say [\R+] 1‚Ä¶10;

[14:57] <committable6> AlexDaniel, ¬¶2015.03: ¬´1 3 6 10 15 21 28 36 45 55‚ê§¬ª

[14:57] <AlexDaniel> c: 2015.04 say [\R+] 1‚Ä¶10;

[14:57] <committable6> AlexDaniel, ¬¶2015.04: ¬´10 19 27 34 40 45 49 52 54 55‚ê§¬ª

[14:57] <AlexDaniel> bisect: 2015.03,2015.04 say [\R+] 1‚Ä¶10;

[14:57] <bisectable6> AlexDaniel, Using old=2015.03 new=2015.04 in an attempt to DWIM

[14:57] <bisectable6> AlexDaniel, Bisecting by output (old=2015.03 new=2015.04) because on both starting points the exit code is 0

[14:57] <HPWiz> Right, It also seems inconsistent

[14:58] <HPWiz> p6: say [\R,] 1‚Ä¶10;

[14:58] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/d6c57997b11764262df7d6f3018fbf1d

[14:58] <bisectable6> AlexDaniel, (2015-03-29) https://github.com/rakudo/rakudo/commit/02e1e998218af7a6bafb620e5cc89de408bede1b

[14:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1) (6 5 4 3 2 1) (7 6 5 4 3 2 1) (8 7 6 5 4 3 2 1) (9 8 7 6 5 4 3 2 1) (10 9 8 7 6 5 4 3 2 1))‚ê§¬ª

[14:58] <HPWiz> Is what I expect

[14:58] <pmurias> lizmat: "A mention to Perl 6 should only occur

[14:58] <pmurias> "

[14:59] <pmurias> lizmat: which mention - the one mentioned above?

[15:02] <robertle> reportable6: not sure this qualifies, not really about perl 6 but more using perl 6 for some other point: http://www.semistable.com/#104

[15:02] <reportable6> robertle, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Reportable

[15:02] <AlexDaniel> did you mean weekly: ? :)

[15:02] <robertle> yes :)

[15:03] <lizmat> weekly: http://www.semistable.com/#104

[15:03] <notable6> lizmat, Noted! (weekly)

[15:05] *** robertle left
[15:06] <AlexDaniel> HPWiz: looking at the commit ( https://github.com/rakudo/rakudo/commit/02e1e998218 ) it seems like it is meant to work that way

[15:07] <AlexDaniel> HPWiz: so `1 R+ 2 R+ 3` is identical to `3 + 2 + 1`

[15:07] <HPWiz> I can seem what it's doing now, but I don't like how the triangular reduce depends on the associativity of the function

[15:07] <HPWiz> *see

[15:08] *** tharkun joined
[15:10] *** kensanata joined
[15:12] *** sauvin left
[15:15] <AlexDaniel> anybody wants a perl6 puzzle? I have code that is relatively short but the resulting behavior makes no sense whatsoever

[15:16] *** pmurias left
[15:18] <AlexDaniel> it could be that I'm just being dumb, but I've been staring at the thing for quite some time and I still don't get it

[15:18] *** imcsk8 left
[15:19] <AlexDaniel> and yeah, I'm hoping that somebody will figure out that bug in tellable6 :)

[15:19] *** HPWiz left
[15:20] <kensanata> I have a different question: what does http://pl6anet.org/ run on?

[15:21] <AlexDaniel> kensanata: what do you mean? The server, the code, something else?

[15:22] <kensanata> AlexDaniel: I was hopping to get a URL to a git repo that describes a feed aggregator that creates static files because that's why I use myself but the software I use is Planet Venus which is written in Python 2 and I'd be interested in something that is written in Perl 6.

[15:23] <AlexDaniel> kensanata: https://github.com/stmuk/pl6anet.org 

[15:24] <kensanata> AlexDaniel: Thanks!

[15:24] <AlexDaniel> kensanata: now you help me :D

[15:25] *** sauvin joined
[15:25] <AlexDaniel> so what I have is this https://github.com/perl6/whateverable/blob/72b39766334cfabea894cf04ffd3a5614b32c4c3/xbin/Tellable.p6#L74

[15:25] <AlexDaniel> basically, the idea behind that line is that if you .tell to somebody and they reply immediately, the message won't be delivered

[15:25] <AlexDaniel> and you can see that in action here: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-08-20#l116

[15:25] <AlexDaniel> so it works, right?

[15:25] *** imcsk8 joined
[15:26] <AlexDaniel> except that a few minutes later it delivers these messages anyway: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-08-20#l136

[15:26] <AlexDaniel> I have no explanation to that besides time travel

[15:26] *** pamplemousse joined
[15:28] <AlexDaniel> my current hypothesis is that something in the for loop throws, so it ends up jumping out of that sub altogether

[15:28] <AlexDaniel> I'm not seeing any exception anywhere, so that's weird, but maybe maybe

[15:29] <AlexDaniel> now, after 10 minutes it no longer throws, so it ends up delivering the messages ( https://github.com/perl6/whateverable/blob/72b39766334cfabea894cf04ffd3a5614b32c4c3/xbin/Tellable.p6#L30 )

[15:29] <AlexDaniel> O_O

[15:30] <AlexDaniel> timotimo: I FIGURED IT OUT

[15:30] <AlexDaniel> O_O

[15:30] <AlexDaniel> okay!!

[15:30] <AlexDaniel> soo

[15:30] <AlexDaniel> kensanata: ok thank you!

[15:30] <AlexDaniel> timotimo: it doesn't trigger if you adress somebody!!

[15:31] <kensanata> Hah

[15:31] <AlexDaniel> timotimo: so in the log above, SmokeMachine was always talking to ‚Äúlizmat: ‚Äù

[15:31] *** wildtrees joined
[15:31] <AlexDaniel> timotimo: and then it triggered on a message that didn't do that

[15:31] <kensanata> on the "s"

[15:31] <AlexDaniel> yeah

[15:33] *** kaare_ joined
[15:34] <Geth> ¬¶ problem-solving/path-to-raku: f3d057acc1 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[15:34] <Geth> ¬¶ problem-solving/path-to-raku: Elaborate a bit on community healing

[15:34] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/f3d057acc1

[15:36] <AlexDaniel> kensanata: do you ever go to conferences?

[15:36] <AlexDaniel> kensanata: would be lovely to meet you one day :)

[15:38] *** Actualeyes joined
[15:38] *** ravenousmoose left
[15:40] *** sena_kun left
[15:42] <kensanata> AlexDaniel: Hah. I very rarely do. I was at the Swiss Perl Workshop 2018 (the previous one)... and that's it.

[15:42] *** chloekek joined
[15:42] <kensanata> AlexDaniel: If you ever come to Switzerland, we should meet up, for sure.

[15:43] <Geth> ¬¶ problem-solving/path-to-raku: 6b0041002e | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[15:43] <Geth> ¬¶ problem-solving/path-to-raku: Add social media section

[15:43] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/6b0041002e

[15:43] <AlexDaniel> kensanata: sure :)

[15:43] <kensanata> AlexDaniel: Or if you happen to be in the north of Portugal in the first half of September...

[15:43] <AlexDaniel> that's less likely x)

[15:44] <kensanata> Installing Perlanet feels like downloading half of CPAN.

[15:46] *** chloekek left
[15:48] <Geth> ¬¶ problem-solving: JJ self-unassigned X::MyModule::Foo or MyModule::X::Foo ? https://github.com/perl6/problem-solving/issues/57

[15:49] *** Actualey` joined
[15:50] *** Actualeyes left
[15:51] <Geth> ¬¶ problem-solving: AlexDaniel self-assigned X::MyModule::Foo or MyModule::X::Foo ? https://github.com/perl6/problem-solving/issues/57

[15:52] *** robertle joined
[15:55] <AlexDaniel> kensanata: good, now you have a backup ;)

[15:55] *** Actualey` left
[15:56] *** Actualey` joined
[15:56] <Geth> ¬¶ doc: b14b5c00aa | Coke++ | 2 files

[15:56] <Geth> ¬¶ doc: whitespace

[15:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b14b5c00aa

[15:57] *** Sgeo_ joined
[16:00] *** Sgeo__ left
[16:06] *** woolfy left
[16:06] *** woolfy1 joined
[16:07] *** scimon left
[16:11] <kensanata> AlexDaniel: HTML::Tidy failed, but still 85 things installed. Gah.

[16:12] <kensanata> Well, it succeeded on the second attempt, so I guess some dependencies were missing somewhere.

[16:19] *** mowcat joined
[16:19] *** mowcat left
[16:20] *** mowcat joined
[16:26] *** Actualey` left
[16:31] *** chloekek joined
[16:36] <El_Che> (We, and all dynamic languages, do have a dependency problem)

[16:37] *** MilkmanDan left
[16:38] *** irced joined
[16:39] <rba> kensanata: re http://pl6anet.org/ and https://github.com/stmuk/pl6anet.org¬†keep me updated here please, as I'm on the way to take over the domain and need to prepare the hosting and likely fork the repo into perl6 github org

[16:40] <rba> kensanata: you can watch this https://github.com/perl6/problem-solving/issues/86 to stay updated regarding the move

[16:40] *** MilkmanDan joined
[16:41] <irced> hey all, is it possible to declare a class method then define it elsewhere outside of the class definition itself (e.g. in another file)? directly or maybe by reference? (i realize i could create a subroutine and pass a reference to the object maybe even assign a variable in the class definition to name it but is there a less indirect way?

[16:42] <Geth> ¬¶ doc/regexes: f819c26680 | threadless-screw++ | doc/Language/regexes.pod6

[16:42] <Geth> ¬¶ doc/regexes: Rewrite of regexes-lexical conventions section

[16:42] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/f819c26680

[16:42] <Geth> ¬¶ doc/regexes: 195a4b9a1c | threadless-screw++ | doc/Language/regexes.pod6

[16:42] <Geth> ¬¶ doc/regexes: wip

[16:42] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/195a4b9a1c

[16:42] <Geth> ¬¶ doc/regexes: 0229474d9c | threadless-screw++ | doc/Language/regexes.pod6

[16:42] <Geth> ¬¶ doc/regexes: Expansion of Regexes:Lexical Conventions section:

[16:42] <Geth> ¬¶ doc/regexes: 

[16:42] <Geth> ¬¶ doc/regexes: - intro clarifying 'regular expressions' and 'regexes';

[16:42] <Geth> ¬¶ doc/regexes: - systematic treatment of anonymous and named regex definitions;

[16:42] <Geth> ¬¶ doc/regexes: - new subsection on common ways of matching regexes;

[16:42] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/0229474d9c

[16:44] <rba> I've installed a znc (irc boucner; https://wiki.znc.in/ZNC). Does one like to jump on? Still do testing though. Yet this is my second installation and the first one was rocket stable, yet I needed it installed on a system with gcc >= 4.9 for a znc push module.

[16:44] <rba> Let me know your nick and I will add it as a user.

[16:49] <vrurg> irced: you can create an anonymous method and then add it to a class.

[16:49] <irced> vrurg: thank you for the suggestion, i'll give it a go!

[16:50] <vrurg> irced: look for .^add_method. There gotchas, though.

[16:50] <irced> vrurg: ok, thanks for the reference and tip.

[16:50] <vrurg> Best if you do it before a class is done composing. You may look at AttrX::Mooish code.

[16:51] <Geth> ¬¶ doc/regexes: d7b48569e5 | threadless-screw++ | doc/Language/regexes.pod6

[16:51] <Geth> ¬¶ doc/regexes: Expansion of Regexes:Lexical Conventions section:

[16:51] <Geth> ¬¶ doc/regexes: 

[16:51] <Geth> ¬¶ doc/regexes: - intro clarifying 'regular expressions' and 'regexes';

[16:51] <Geth> ¬¶ doc/regexes:     - systematic treatment of anonymous and named regex definitions;

[16:51] <Geth> ¬¶ doc/regexes:     - new subsection on common ways of matching regexes;

[16:51] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/d7b48569e5

[16:51] <irced> vrurg: ok üòÉ

[16:52] <vrurg> irced: And to finalize, OO::Plugin builds a new class on the fly. Might be useful too. Check Manager.pm6.

[16:52] *** domidumont joined
[16:53] <irced> vrurg: cool, gtk, thanks!

[16:53] <vrurg> my pleasure! :)

[16:54] *** dolmen left
[16:55] <AlexDaniel> rba: well, if i'd like to route my bots through it, how would that work?

[16:56] <Geth> ¬¶ doc: threadless-screw++ created pull request #2962: Expansion of Regexes:Lexical Conventions section

[16:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2962

[16:57] <rba> Al

[16:59] <rba> AlexDaniel: I don‚Äòt see the advantage for a bot. I use it mainly to get notifications and to be able to stay online and switch clients (mac, ipad, iphone). 

[16:59] <AlexDaniel> rba: so that there's no 18 leave+join messages whenever I upgrade rakudo on the server

[16:59] *** aborazmeh joined
[16:59] *** aborazmeh left
[16:59] *** aborazmeh joined
[17:00] <rba> AlexDaniel: Ah. We can try. Maybe we start with one to test?

[17:02] <AlexDaniel> rba: and how will it work with the 10 connections per IP limit on freenode?

[17:03] *** lichtkind joined
[17:05] *** wildtrees left
[17:06] *** Actualeyes joined
[17:06] <rba> AlexDaniel: Hmm good point. Will check. 

[17:14] *** wildtrees joined
[17:17] <Geth> ¬¶ problem-solving/path-to-raku: 3118a7eb71 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[17:17] <Geth> ¬¶ problem-solving/path-to-raku: Add historical matters

[17:17] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/3118a7eb71

[17:17] <rba> AlexDaniel: Did you see the limit somewhere documented?

[17:17] <AlexDaniel> rba: no but I've been hitting it in practice

[17:18] <AlexDaniel> rba: currently whateverables connect randomly from either ipv4 address or ipv6 one, so they're still below the 10+10 limit

[17:20] <rba> AlexDaniel: Do you use SSL to connect, SASL or nickserv for the bots?

[17:20] *** [Sno] joined
[17:20] <AlexDaniel> rba: nickserv but it only allows 5 nicks to be logged in at the same time

[17:23] <rba> AlexDaniel: Is it for freenode in general? Could you just connect different freenode servers?

[17:26] *** ravenousmoose joined
[17:28] <rba> AlexDaniel: We me just try using SASL to connect from znc to freenode.

[17:32] *** aborazmeh left
[17:48] <AlexDaniel> rba: not sure. Either way, that's probably not something for today

[17:53] *** ravenousmoose left
[17:55] <rba> AlexDaniel: ok

[18:00] *** reportable6 left
[18:04] *** reportable6 joined
[18:05] *** |oLa| joined
[18:16] *** tilpner left
[18:17] <lucasb> hey RAKU! friends!!

[18:21] *** kensanata left
[18:24] *** ravenousmoose joined
[18:25] <AlexDaniel> lucasb: we have a special cage for time travelers 

[18:25] *** Sgeo_ left
[18:25] *** sauvin left
[18:37] <El_Che> I am failing to understand ugexe comment on the renaming thread. Picking new file extension, does not mean that the one in use will stop working.

[18:38] <El_Che> and every dot release recompiles the world anyways, so even then it does not sound problematic to me

[18:39] <El_Che> and Perl 5 isn't Perl 5. It doesn't have a zillion users shouting for an extreme form of backwards compatibility

[18:40] <El_Che> hell, newer rakudos break old code once in a while

[18:40] <Grinnz> (and count yourself lucky there)

[18:40] *** MasterDuke joined
[18:40] <El_Che> (meant Perl 6 isn't Perl 6, but you got that :) )

[18:40] <El_Che> dman

[18:40] <Grinnz> LOL

[18:41] <El_Che> (meant Perl 6 isn't Perl 5, but you got that :) )

[18:41] <El_Che> I need a break :)

[18:41] <Grinnz> IMO the important takeaway there is that the upgrade path should be worked out

[18:43] *** cpan-p6 left
[18:43] *** cpan-p6 joined
[18:43] *** cpan-p6 left
[18:43] *** cpan-p6 joined
[18:44] <AlexDaniel> El_Che: well, newer rakudo versions shouldn't be breaking code‚Ä¶

[18:44] <AlexDaniel> I'm not sure what you have in mind but if something in particular then I was doing a bad job :)

[18:44] *** Sgeo joined
[18:45] <AlexDaniel> I think ugexe++ has a point

[18:46] <El_Che> AlexDaniel: the great list refactoring, the new IO code, etc

[18:46] <AlexDaniel> the PR doesn't really discuss how these small thinks will work in terms of backwards compatibility

[18:46] <El_Che> and that's ok

[18:46] <AlexDaniel> El_Che: GLR was before Christmas, it doesn't count

[18:47] <AlexDaniel> I don't remember much about IO stuff, but I think most of it was done in a way that didn't break much

[18:47] <AlexDaniel> and I think it happened before we started pushing for ecosystem toasting and stuff like that

[18:48] *** |oLa| left
[18:48] <AlexDaniel> so no, we do our very best to prevent your code breaking with new rakudo releases

[18:48] <AlexDaniel> from*

[18:50] <lizmat> I think if we would be able to bring out a Raku E later this year, it would be ok to start deprecating then for release in Raku F, and then remove in Raku G

[18:50] <lizmat> which should put us about 2 years  into the future

[18:51] <AlexDaniel> lizmat: so that no longer feels wrong? :)

[18:52] <lizmat> I said: " if we would be able to bring out a Raku E later this year"

[18:54] <AlexDaniel> lizmat: ok then I don't understand. Because that to me means that 6.e will be released with no deprecations while the rename thing already landed

[18:54] <lizmat> yes

[18:54] <MasterDuke> anyone else seeing some flapping from t/spec/S02-types/subset-6e.t (existing before the float jit merge)

[18:54] <AlexDaniel> lizmat: either way, this is something that can be clarified in the PR

[18:54] <lizmat> MasterDuke: yes, I've seen if fail

[18:55] *** mowcat left
[18:55] <vrurg> MasterDuke: I have it. Fighting over the last several days. But it only happens then TEST_JOBS > 1

[18:56] <MasterDuke> vrurg++

[18:57] <vrurg> MasterDuke: the problem is that I have no f* idea what happens because no output is possible. Tried runningf or 1000 times natively, via harness5, harness6 ‚Äì nothing. `make spectest` ‚Äì and every second run fails!

[18:58] * vrurg is currently relaxing on QAST programming. l(

[18:59] *** tilpner joined
[19:01] *** chloekek left
[19:03] *** sjm_uk joined
[19:03] <kent\n> > zef uses information from META6.json only  # I imagine the suggestion here is that the name may need/want to be changed if the language ceases to be called "perl6". ( Maybe rakuMETA.json for example )

[19:04] *** domidumont left
[19:04] *** MilkmanDan left
[19:05] <lizmat> kent\n: no, that's not the suggestion

[19:05] <kent\n> I just suspect people will find that filename "odd" ;)

[19:05] <lizmat> the provides section in a META6.json contains a filename

[19:06] <lizmat> which currently ends in .pm6 generally

[19:06] *** MilkmanDan joined
[19:06] <vrurg> BTW, why would nqp::ctxlexpad complain about requiring MVMContext when it gets BOOTContext returned by nqp::ctxouter?

[19:06] <lizmat> zef installs whatever is in the "provides"

[19:06] <lizmat> and doesn't care about what the extension is, afaik

[19:10] *** __jrjsmrtn__ left
[19:11] *** _jrjsmrtn joined
[19:12] *** ChoHag left
[19:17] *** sjm_uk left
[19:20] *** pilne joined
[19:39] *** sjm_uk joined
[19:44] <MasterDuke> anyone want to chime in with a perl 6 example? https://twitter.com/karpathy/status/1163713702836625408

[19:44] *** Ven`` joined
[19:49] *** ChoHag joined
[19:52] *** sjm_uk left
[19:52] <tbrowder> uh, not i, but i do need help with inline perl 5

[19:55] <tbrowder> i have a p5 module (package CL) containing a hash %m = (k => {a => 1});

[19:57] <tbrowder> in my p6 (raku) prog i use CL:from<Perl5>...never mind, i'll provide a gist

[20:07] *** Black_Ribbon joined
[20:08] *** kensanata joined
[20:11] *** [Sno] left
[20:12] *** [Sno] joined
[20:13] *** pamplemousse left
[20:14] *** Ven`` left
[20:21] *** Ven`` joined
[20:22] *** pierrot_ is now known as pierrot

[20:22] *** pierrot left
[20:22] *** pierrot joined
[20:23] *** Manifest0 left
[20:23] *** Manifest0 joined
[20:27] *** success joined
[20:28] *** success is now known as Guest5665

[20:31] *** ravenousmoose left
[20:31] *** Ven`` left
[20:32] <Geth> ¬¶ doc/regexes: 22095edbc4 | threadless-screw++ | doc/Language/regexes.pod6

[20:32] <Geth> ¬¶ doc/regexes: Minor corrections

[20:32] <Geth> ¬¶ doc/regexes: review: https://github.com/perl6/doc/commit/22095edbc4

[20:33] *** pmurias joined
[20:35] <tbrowder> i need some help on fixing the code at gist: https://gist.github.com/tbrowder/890714b6cbb7682a2dab69e2ca088e24

[20:36] <tbrowder> https://www.irccloud.com/pastebin/zdzmB9Tw/

[20:37] <tbrowder> i have tried various things such as "my $h = %P5::h" that didn't work.

[20:39] *** chloekek joined
[20:40] <tbrowder> note i have not tried using any export statements in the package...

[20:41] <tbrowder> trying that now...

[20:44] <tbrowder> no go!!

[20:45] <guifa> Are dynamic variables supposed to be lost inside of promise threads?

[20:56] *** dolmen joined
[21:01] <[Coke]> tbrowder: if you dd %P5::h before you try to use it, you'll see it's not initialized.

[21:01] <[Coke]> so you're doing my %foo = Any; # basically

[21:02] <tbrowder> ok, is there a way at all to access the hash from p6?

[21:04] <tbrowder> i have in the past just rewritten the p5 module to p6 and that worked. and i have just been using p5 modules successfully (objects and funcs only thus far), so i was hoping to use p5 vars.

[21:05] <tbrowder> maybe make them p5 constants (which they are)?

[21:05] <[Coke]> Dunno yet, digging. This works: https://gist.github.com/coke/55bdb09c953c8dc88dd310ee0ba5d993 , so it seems theoretically possible.

[21:07] <tbrowder> encouraging!

[21:07] *** kensanata left
[21:09] <tbrowder> niner's README says "Allows passing integers, strings, arrays, hashes, code references, file handles and objects between Perl 5 and Perl 6."

[21:10] <tbrowder> but i don't yet see an example...looking...

[21:13] <[Coke]> so, it's clearly finding and doing something with the module (because if you rename it, it explodes). But if I immediately try to use "P5", it complains it doesn't exist.

[21:15] <[Coke]> .seen niner?

[21:15] <tellable6> [Coke], I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Tellable

[21:15] <[Coke]> .seen niner

[21:15] <tellable6> [Coke], I haven't seen niner around, did you mean nine?

[21:15] <[Coke]> .seen nine

[21:15] <tellable6> [Coke], I saw nine 2019-08-18T14:14:20Z in #perl6-dev: <nine> I think

[21:15] <[Coke]> above my pay grade here, sorry

[21:16] <tbrowder> [Coke]: thanks!

[21:24] <rba> .seen jjmerelo

[21:24] <tellable6> rba, I saw jjmerelo 2019-08-19T06:47:00Z in #whateverable: <jmerelo> 1+^1

[21:29] *** Cabanoss- left
[21:35] *** Cabanossi joined
[21:40] *** |oLa| joined
[21:41] *** |oLa| left
[21:43] <uzl[m]> AlexDaniel Thanks for bringing up the issue about .first and .head. I myself have conflated them :-). However, with jnthn's explanation things are clearer. 

[21:43] <AlexDaniel`> uzl: I still feel weird about it

[21:44] <AlexDaniel`> uzl: we have .head and .tail but .first and no .last, instead you do .first(:end)

[21:46] *** Cabanossi left
[21:48] *** Cabanossi joined
[21:49] <uzl[m]> AlexDaniel:  I know. For some reason, it feels unbalanced ;-). However, I guess adding sintactic sugar for .first(:end) as .last wouldn't be worth the trouble.

[21:49] <AlexDaniel`> ü§∑

[21:51] *** leont joined
[21:55] *** leont left
[21:59] *** robertle left
[22:12] *** chloekek left
[22:13] *** pmurias left
[22:15] <irced> hey all, so i'm wrapping my head around concurrency and dabbling in the event driven paradigm, that said, given that i can react to a Supplier with a whenever block and that the whenever block assign $_ the value emitted, how would i go about a conjunction such as whenever $supply1 && $supply2 and examine their individual emissions ?

[22:17] <irced> i tried .tap inside the whenever block but no dice (it seemeth)

[22:18] <[Coke]> if it's event driven, you're saying you want to wait until you have an event from both?

[22:18] <irced> Coke: exactomondo!

[22:19] <rba> https://marketing.perl6.org/ is back online, yayh.

[22:19] *** noisegul left
[22:22] <irced> to note, I am able to use "&&" apparently, though this is more experimentation then documentation

[22:22] <irced> perhaps there is a better way than && in the first

[22:22] <woolfy1> rba++

[22:24] <[Coke]> if you have something going every 3 seconds and something going every 10s, what behavior are you looking for?

[22:24] <[Coke]> woolfy1: long time no see.

[22:24] <[Coke]> hi

[22:25] <irced> the supplies are not intervals, and I am using them more like channels.

[22:33] *** rindolf left
[22:33] <irced> i have two domains that emit values and a third domain (that i call payload) will collect those values then emit itself (the payload). this is not based on any model i've seen in existence mind you. but I think I am still within the paradigm.

[22:34] <irced> it emits its "self" to yet another domain. but anyway, i think this explains what behavior i'm looking for in the least.

[22:35] *** pmurias joined
[22:35] <[Coke]> if the elements are paired, does it make sense to have something that emits a tuple instead?

[22:35] <irced> the whole emits to another domain is accomplished by each domain having the supply or channel that it expects emissions from

[22:36] <irced> no matter what "self" i emit, the fact is, i need to be sure two domains have provided the values to fill the pair/tuple

[22:36] <[Coke]> (my interval question was trying to get at the root of that, what do you expect to happen if the events are not coming out at the same time)

[22:37] <irced> i want to wait (non-blocking) and react only when both independent events have been triggered

[22:37] <irced> regardless of which finished first and whether is was "simultaneous" (no synchronization idea involved here)

[22:38] <irced> well loosely involved i guess

[22:40] <irced> so it seems safe to use $supply1 && $supply2 this this reaction will only be true once the supplies have something to emit, and this happens only once in the lifecycle.

[22:41] <irced> anyway, the problem with whenever $supply1 && $supply2 is i don't know how to get the emissions individually

[22:42] <irced> i suppose i could chain reactions, seems lengthy but not nonsensical

[22:43] <irced> using the topical variable in two blocks (one nested).

[22:43] <irced> but it seems although tmtowtdi, some ways seem "too" long üòÉanyway, trying that now

[22:54] <irced> hmm, probably don't need to "start" nested, can block inside i think

[22:57] <jnthn> irced: Maybe you want Supply.zip($supply1, $supply2)

[22:57] <irced> it didn't work either way.

[22:57] <irced> jnthn: oh

[22:58] * irced peers into the perl6 crystal ball.

[23:01] *** wildtrees_ joined
[23:03] <irced> jnthn: thanks for the suggestion trying it

[23:03] *** dolmen left
[23:03] *** wildtrees_ left
[23:03] *** wildtrees left
[23:04] *** wildtrees_ joined
[23:12] <irced> jnthn: it's working, thanks!

[23:15] <irced> Coke: thanks for the discussion and the suggestion to pass a simpler data structure!

[23:16] *** pmurias left
[23:28] *** Sgeo left
[23:29] *** Sgeo joined
[23:48] *** wildtrees_ left
[23:52] <irced> hey all, i am passing a supplier to different classes after initializing it with Supplier.new, however, they don't all seem to see the same supplier. specifically, one sees Supplier.new and the other one sees Supplier[handleid...] is there an accepted way to ensure an empty supplier is the same wherever it is passed as an argument ?

[23:55] <irced> basically, what is the correct way to pass suppliers unto other functions after they are initialized with $supply = Supplier.new

[23:55] <irced> so that things don't break

[23:56] <irced> üòÉ

[23:57] <irced> i mean, as soon as i do $supply = Supplier.new i get something like Supplier<94524891953648> but i pass it unto other functions and one of them for some weird reason sees Supplier.new

[23:59] <irced> err, actually on another thread i start supplying and then it gets an id, just not in sequence so scrath that last statement

[23:59] <irced> nevertheless, another function, which has been passed the supplier by name, never picks up on the id assignment

