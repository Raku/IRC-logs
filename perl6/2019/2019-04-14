[00:01] *** zacts left
[00:02] *** Kaiepi left
[00:07] *** regreg joined
[00:08] <regreg> hello

[00:08] <regreg> is there any way i can distribute perl6 rakudo with my windows application?

[00:08] <regreg> i want to distribute a script as a standalone application

[00:08] <regreg> an .exe or even an obfuscated perl6 source file

[00:09] <regreg> if obfuscation is not possible then plain text is an option (albeit less desirable)

[00:09] *** Kaiepi joined
[00:11] <MasterDuke> regreg: https://modules.perl6.org/dist/App::InstallerMaker::WiX:github:Jonathan%20Worthington%20%3Cjonathan@edument.se%3E

[00:12] <regreg> MasterDuke, What you'll need

[00:13] <regreg> The Visual C++ build tools, and nmake/cl/link on path. Note that this does not imply installing Visual Studio; it is possible to freely download the standalone compiler. (It's probably possible, without too much trouble, to patch this tool to use other compilers.)

[00:13] <regreg> isn't this unreasonable?

[00:16] <MasterDuke> regreg: dunno, i've never needed/tried to package a script before, so i don't have any experience to compare with. however, there have been some recent changes in rakudo that may make that stuff not needed

[00:16] <regreg> ok

[00:16] <regreg> i'll give it a try

[00:16] <regreg> if nothing works then i'll just port the app to perl5 :)

[00:16] <MasterDuke> but you would probably need to patch the module to take advantage of them

[00:17] *** Kaiepi left
[00:17] <MasterDuke> other people have wanted to do the same thing, but now is usually a slow time for the channel. might try posting on stackoverflow

[00:18] <regreg> ok

[00:18] <regreg> the other variant would be tcl

[00:18] <regreg> tcl has good packaging options

[00:18] <regreg> but i rather like perl6

[00:20] *** Kaiepi joined
[00:35] *** vrurg joined
[00:39] *** zacts joined
[00:43] *** Kaiepi left
[00:44] *** Kaiepi joined
[00:48] *** zachk left
[00:50] *** MidCheck joined
[01:07] *** Kaiepi left
[01:10] *** Kaiepi joined
[01:12] *** ctilmes_ joined
[01:12] *** ctilmes left
[01:18] *** squashable6 left
[01:18] <guifa> p6: role A { token x { <y> }; token y { 'Y' } }; role B { token y { 'Z' } }; grammar C does A does B { token TOP { <x> } }; say C.parse("y")

[01:18] <evalable6> guifa, rakudo-moar ad8b5a649: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/yW6FKtGY1y‚ê§Method 'y' must be resolved by class C because it exists in multiple roles (B, A)‚ê§at /tmp/yW6FKtGY1y:1‚ê§¬ª

[01:18] *** squashable6 joined
[01:20] <guifa> C can‚Äôt specify <y>, though, because it‚Äôs being called by A.  But <y> called from inside role A should be resolvable, no?  A doesn‚Äôt do B

[01:24] <guifa> I‚Äôll just go the all caps route to avoid potential clashes

[01:40] *** zacts left
[01:47] *** zacts joined
[02:05] *** Kaypie joined
[02:06] *** Black_Ribbon left
[02:17] <Geth> ¬¶ doc: 05888b56d6 | Coke++ | doc/Type/Metamodel/CurriedRoleHOW.pod6

[02:17] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::CurriedRoleHOW

[02:17] <Geth> ¬¶ doc: fix typo

[02:17] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/05888b56d6

[02:17] <Geth> ¬¶ doc: d863794434 | Coke++ | xt/words.pws

[02:17] <Geth> ¬¶ doc: learn new words

[02:17] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d863794434

[02:27] *** netrino left
[02:38] *** Black_Ribbon joined
[02:50] *** epony left
[03:00] *** MidCheck left
[03:08] *** zacts left
[03:33] *** hamhu3 joined
[03:33] *** hamhu3_ left
[03:39] *** Kaypie left
[03:39] *** Kaiepi left
[03:42] *** epony joined
[03:57] *** MidCheck joined
[04:21] *** zacts joined
[04:31] *** Cabanossi left
[04:37] *** TBC_z87 left
[04:37] *** Cabanossi joined
[05:37] *** bloatable6 left
[05:37] *** bisectable6 left
[05:37] *** shareable6 left
[05:37] *** benchable6 left
[05:37] *** notable6 left
[05:37] *** committable6 left
[05:37] *** undersightable6 left
[05:37] *** statisfiable6 left
[05:37] *** evalable6 left
[05:37] *** nativecallable6 left
[05:37] *** quotable6 left
[05:37] *** squashable6 left
[05:37] *** reportable6 left
[05:37] *** releasable6 left
[05:37] *** coverable6 left
[05:37] *** unicodable6 left
[05:37] *** greppable6 left
[05:38] *** unicodable6 joined
[05:38] *** ChanServ sets mode: +v unicodable6

[05:38] *** squashable6 joined
[05:39] *** bisectable6 joined
[05:39] *** ChanServ sets mode: +v bisectable6

[05:39] *** evalable6 joined
[05:39] *** ChanServ sets mode: +v evalable6

[05:39] *** bloatable6 joined
[05:39] *** ChanServ sets mode: +v bloatable6

[05:39] *** quotable6 joined
[05:39] *** greppable6 joined
[05:40] *** benchable6 joined
[05:40] *** ChanServ sets mode: +v benchable6

[05:40] *** reportable6 joined
[05:40] *** committable6 joined
[05:40] *** ChanServ sets mode: +v committable6

[05:40] *** releasable6 joined
[05:40] *** ChanServ sets mode: +v releasable6

[05:41] *** coverable6 joined
[05:41] *** ChanServ sets mode: +v coverable6

[05:41] *** undersightable6 joined
[05:41] *** ChanServ sets mode: +v undersightable6

[05:42] *** nativecallable6 joined
[05:42] *** ChanServ sets mode: +v nativecallable6

[05:42] *** statisfiable6 joined
[05:42] *** ChanServ sets mode: +v statisfiable6

[05:42] *** notable6 joined
[05:42] *** ChanServ sets mode: +v notable6

[05:42] *** shareable6 joined
[05:42] *** ChanServ sets mode: +v shareable6

[05:48] *** squashable6 left
[05:50] <tyil> weekly: https://www.reddit.com/r/ProgrammingLanguages/comments/bct0cg/which_n_languages_would_expose_someone_to_the/ektxe1w/

[05:50] <notable6> tyil, Noted!

[05:54] *** squashable6 joined
[05:54] *** ChanServ sets mode: +v squashable6

[05:56] *** cpan-p6 left
[05:57] *** cpan-p6 joined
[05:57] *** cpan-p6 left
[05:57] *** cpan-p6 joined
[06:07] *** MidCheck left
[06:23] *** domidumont joined
[06:35] *** atroxaper joined
[06:36] <atroxaper> Hi, #perl6 !

[06:36] <atroxaper> p6: sub o() {CATCH{default {say 'outer'}}; sub get-list() { CATCH{default {say 'inner'}}; return (1,3).map({die "$_"}).List}; get-list[0]}; o;

[06:36] <evalable6> atroxaper, rakudo-moar ad8b5a649: OUTPUT: ¬´outer‚ê§¬ª

[06:37] <atroxaper> As I see, `map` executes lazy. Why? And how can I prevent it?

[06:37] <timotimo> put .eager before .List, that should do it

[06:38] <timotimo> otherwise you can also "do for" instead of map

[06:38] <timotimo> actually, i'm not entirely sure if that'll also force eagerness

[06:39] <atroxaper> timotimo: oh, I see. Did not know about .eager. Thanks!

[06:39] *** Guest16965 left
[06:46] <discord6> <Tyler (Aearnus)> also, welcome atroxaper!

[06:48] <atroxaper> Is discord6 a bot? :)

[06:49] <timotimo> it is

[06:49] <atroxaper> About what?

[06:49] <discord6> <Tyler (Aearnus)> it's a bridge to the discord server

[06:50] <discord6> <Tyler (Aearnus)> this is what I see from my end: https://cdn.discordapp.com/attachments/538407879980482562/566877826620588032/unknown.png

[06:50] <atroxaper> aeruder: oh. Hello))

[06:52] *** jmerelo joined
[06:52] <jmerelo> ls

[06:53] *** zacts left
[06:58] <Elronnd> is there a way to react whenever a file changes?

[06:59] <moritz> Elronnd: https://docs.perl6.org/type/IO::Notification

[06:59] <Elronnd> thanks!

[07:03] <jmerelo> notable6: there's going to be a Perl devroom in the "Spanish" FOSDEM: https://github.com/antoniogamiz/devroom-perl-eslibre

[07:03] <notable6> jmerelo, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[07:03] <jmerelo> weekly: there's going to be a Perl devroom in the "Spanish" FOSDEM: https://github.com/antoniogamiz/devroom-perl-eslibre

[07:03] <notable6> jmerelo, Noted!

[07:07] <Elronnd> is it legal to say something like this?  react { for @watched-paths { react whenever IO::Notification.watch-path($_) { ... } } } ?

[07:07] <jmerelo> Elronnd: it's illegal in 23 states. You're good if you don't go to Oklahoma

[07:08] <timotimo> that will probably not do what you want

[07:08] <Elronnd> jmerelo: I'll just stay in the eu, out of the way of those pesky software patents

[07:08] <timotimo> since react blocks until everything in it is finished and i don't think a watch-path supply will ever end on its own

[07:08] <Elronnd> timotimo: how do I do what I want, then?

[07:08] <jmerelo> Elronnd: other than that, it's a react inside a react. So it's going to tap the supply while it's tapping the supply, creating a supply black hole.

[07:08] <timotimo> just leave out the inner "react"

[07:08] <Elronnd> err, yeah

[07:08] <Elronnd> typo'd that

[07:08] <Elronnd> ok

[07:08] <jmerelo> Elronnd: :-)

[07:09] <Elronnd> thanks!

[07:09] <timotimo> and if there's other stuff your application is supposed to do, maybe have it be a "start react"

[07:10] <Elronnd> it's inside of a IRC::Client plugin and it says to put it like that; I assume it handles the starting?

[07:11] <timotimo> don't know about that, but you'll probably find out :)

[07:12] <Elronnd> alright!

[07:21] *** reu left
[07:24] *** squashable6 left
[07:24] *** squashable6 joined
[07:33] <atroxaper> Elronnd: I try IO::Notification on my mac. Many file editors rename (move) files, change it and rename back. In such cases IO::Notification will lose a file. Vim, mac TextEditor do so. echo and nano didn't. Just FYI :)

[07:37] <Elronnd> atroxaper: thanks!

[07:38] <Elronnd> fortunately, that doesn't affect my use-case -- I just have to deal with logfiles that get appended to

[07:40] <timotimo> ha, that's its own can of worms, i read something about how "tail -f" can lose data in some circumstances

[07:41] <Elronnd> --oh

[07:41] <Elronnd> how??

[07:43] <timotimo> can't find it any more

[07:43] <timotimo> it's just a race condition, though

[07:46] <timotimo> ok, i think it was about when a file is truncated (by logrotate or something?) then tail can miss something that was written just before the truncation happened

[07:47] <Elronnd> ahh

[07:47] <Elronnd> these files are small enough they never get truncated

[07:47] <Elronnd> so not an issue then, probably

[07:48] <Elronnd> s/truncated/rotated

[07:56] <Elronnd> is there something like zip that puts it arguments into a hash where the elements of the first array are keyed to the elements of the second?

[07:56] *** reu joined
[07:57] <timotimo> Z=> ought to do that

[07:57] <Elronnd> hooray!  Thanks

[08:00] <discord6> <Tyler (Aearnus)> > ... tail can miss something that was written just before the truncation happened in which the Unix philosophy breaks down

[08:02] <timotimo> clearly what we actually need is tail.ko

[08:08] *** andrzejku joined
[08:11] <cpan-p6> New module released to CPAN! Random::Choice (0.0.6) by 03TITSUKI

[08:13] *** squashable6 left
[08:15] *** squashable6 joined
[08:15] *** ChanServ sets mode: +v squashable6

[08:17] <jmerelo> releasable6: status

[08:17] <releasable6> jmerelo, Next release in ‚âà6 days and ‚âà10 hours. 12 blockers. 0 out of 202 commits logged

[08:17] <releasable6> jmerelo, Details: https://gist.github.com/c5f93faf47a905b5c81be925118974aa

[08:22] *** rindolf joined
[08:30] <Geth> ¬¶ doc: 180ffdaf47 | (JJ Merelo)++ | doc/Type/Metamodel/ParametricRoleHOW.pod6

[08:30] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::ParametricRoleHOW

[08:30] <Geth> ¬¶ doc: Adds ParametricRoleHOW refs #1306

[08:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/180ffdaf47

[08:30] <Geth> ¬¶ doc: 2401b58c64 | (JJ Merelo)++ | doc/Type/Metamodel/ParametricRoleGroupHOW.pod6

[08:30] <Geth> ¬¶ doc: Adds ParametricRoleGroupHOW

[08:30] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::ParametricRoleGroupHOW

[08:30] <Geth> ¬¶ doc: 

[08:30] <Geth> ¬¶ doc: This part becomes a bit more complete, and allows us to understand the

[08:30] <Geth> ¬¶ doc: inner workings (in fact, the *high-order-work* of Perl 6). Although

[08:30] <Geth> ¬¶ doc: they are not (so much) intended for final user, they have been used,

[08:30] <Geth> ¬¶ doc: for instance, in https://github.com/vrurg/Perl6-OO-Plugin

[08:30] <Geth> ¬¶ doc: 

[08:30] <Geth> ¬¶ doc: This closes #1306. Although there might be a few other metamodel

[08:30] <Geth> ¬¶ doc: classes that have not been documented, they are probably deeper down

[08:30] <Geth> ¬¶ doc: in the implementation and will never be seen by the user. There's no

[08:30] <Geth> ¬¶ doc: request to use them, anyway.

[08:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2401b58c64

[08:46] <jmerelo> We need (more) people for the perl6 documentation project. Here's a cry for help: https://twitter.com/jjmerelo/status/1117348255128608768

[08:48] <lizmat> weekly: https://twitter.com/jjmerelo/status/1117348255128608768

[08:48] <notable6> lizmat, Noted!

[08:48] <jmerelo> Thanks, lizmat!

[08:49] <lizmat> jmerelo: you're welcome  :-)

[08:49] <jmerelo> lizmat: lately it's been only Coke and cfa mainly. The level of contributions has gone down like 3 years or so... I intend to request Google Season of Docs, coming up in a few days.

[08:50] <lizmat> sounds like a great plan!

[08:50] <jmerelo> lizmat: but we still need a sustainable set of people giving a hand... So let's see what happens...

[08:51] <lizmat> jmerelo++

[08:58] <tyil> weekly: https://www.tyil.nl/post/2019/04/11/perl6-nightly-docker-images/

[08:58] <notable6> tyil, Noted!

[09:02] *** aborazmeh joined
[09:02] *** aborazmeh left
[09:02] *** aborazmeh joined
[09:09] *** regreg left
[09:09] *** regreg joined
[09:41] *** eliasr joined
[09:46] *** [Sno] left
[09:48] *** [Sno] joined
[09:59] *** aborazmeh left
[10:02] *** [Sno] left
[10:23] *** mowcat left
[10:23] *** mowcat joined
[10:33] *** molaf joined
[10:38] * lizmat wonders whether this is up masak's ally: https://blog.wesleyac.com/posts/language-todos

[10:38] <lizmat> https://news.ycombinator.com/item?id=19656666   # HN comments

[10:39] <lizmat> *alley

[10:39] <El_Che> ahaha

[10:39] <El_Che> I was looking at masak's masterplan

[10:49] *** squashable6 left
[10:49] *** squashable6 joined
[10:49] *** [Sno] joined
[10:55] *** Black_Ribbon left
[10:57] *** molaf left
[10:57] <jmerelo> lizmat: last week I was at a functional language event. Idris was mentioned several times. I was wondering if we can do something like type-dependence with perl6. 

[10:58] * lizmat is unsure of the exact meaning of type-dependence in this context

[10:58] <jmerelo> lizmat: "where" constraints come close, but they are not enforced in compile time. 

[10:58] <jmerelo> lizmat: dependent types are types that depend on values defined in compile time.

[10:59] <lizmat> isn't that what subsets are?

[10:59] <jmerelo> lizmat: for instance, let's say you have this-length = 5 and then define foo( array-length(5) $bar)

[11:00] <jmerelo> lizmat: subsets are defined in runtime. It's close, but not exactly the same. 

[11:00] <lizmat> perhaps create an issue?

[11:01] <jmerelo> lizmat: if some value does not meet the subset constraint, an error is thrown in run time; it's not a type error in compile time

[11:01] <jmerelo> lizmat: I think it's more at a fundamental language design level. Maybe an issue in problem-solving. Unless you say this is not a real problem and can be done on the current infrastructure.

[11:02] <lizmat> well, if it *can* be determined at compile time, then maybe the static optimizer stage needs to be taught this

[11:03] <jmerelo> lizmat: that's basically the key. Idris runs a lot of stuff in compile time. Most stuff, as a matter of fact, that does not include system interaction.

[11:04] *** andrzejku left
[11:04] <lizmat> to an extent, that's also true in Perl 6, consider e.g. constant folding

[11:04] <jmerelo> lizmat: all this modulo what I understood of the talk, of course.

[11:04] <lizmat> m: say 42 + 666   # compiled as "say 708"

[11:04] <evalable6> lizmat, rakudo-moar 3060d1d0b: OUTPUT: ¬´708‚ê§¬ª

[11:04] <jmerelo> lizmat: incidentally, I did a presentation on functional programming using Perl 6. One of the speakers mentioned that he thought Scala was a difficult language until they met perl 6

[11:05] <discord6> <Tyler (Aearnus)> lizmat: my comments on that blog post https://www.reddit.com/r/programming/comments/bcof8w/languages_i_want_to_write/eku49h5/

[11:05] <jmerelo> lizmat: that would basically be it, but taken all the way to subsets and maybe where constraints. 

[11:05] <lizmat> if you have a square peg mind, it's hard to fit a round language in it

[11:05] <jmerelo> lizmat: also, subsets should be actual types... 

[11:06] <lizmat> Tyler++

[11:08] <discord6> <Tyler (Aearnus)> also fwiw I don't believe it's possible to run anywhere near a negligible subset of where clauses without fundamentally changing how they work

[11:09] <discord6> <Tyler (Aearnus)> er, at compile time, i meant

[11:09] <jmerelo> Tyler that is probably true...

[11:11] <discord6> <Tyler (Aearnus)> that is, unless they were restricted to things that could be statically determined about the values that they constrain but to be able to determine anything useful statically, you'd need a method of passing around proofs of those properties (and that's another bucket of worms entirely)

[11:12] <jmerelo> Tyler if you change "statically" to "compile time" I basically agree with you. 

[11:13] <discord6> <Tyler (Aearnus)> yeah, I guess that's an important distinction to make this would hypothetically take place after macro expansion and the first (few?) phasers and the like

[11:14] <discord6> <Tyler (Aearnus)> there's a bit that i'n left wanting with regards to the p6 type system tbh

[11:14] <discord6> <Tyler (Aearnus)> **a lot that i'm left wanting

[11:14] <MasterDuke> as i understand it, some amount of what perl 6 now does at run-time could be done at compile-time. the hope/plan is to slowly make more things compile-time

[11:15] <jmerelo> Tyler: well, the fact that we might even talk about this shows how flexible it is. There's nothing fundamentally non-perl6y about doing that, as MasterDuke says.

[11:18] <MasterDuke> jmerelo: in my case, i've made fewer doc commits recently because the docs haven't as obviously needed help. i used to be able to go to almost any random page and find something to do, but that isn't the case now

[11:18] <discord6> <Tyler (Aearnus)> definitely. p6 is still leagues ahead of everything comparable as far as the type system goes

[11:19] <jmerelo> MasterDuke: the problem is mainly the pages that are missing... And sections that are missing on already existing pages. 

[11:20] <discord6> <Tyler (Aearnus)> while we're on this topic, I might as well throw this out there: I'd love if you could destructure on the signatures of callables like you can on positionals, so you could write functions like this: sub apply(::A $v, &f (::A --> ::B)) { f($v) } or something like that

[11:20] <MasterDuke> jmerelo: those are harder problems to make small contributions to. it's always easier to edit something existing than create something from scratch

[11:20] <jmerelo> MasterDuke: you are right. But I have no idea how to fix that. 

[11:20] <MasterDuke> Aearnus: i thought there was a way to do something similar?

[11:21] <MasterDuke> https://docs.perl6.org/type/Signature#Constraining_signatures_of_Callables

[11:21] <jmerelo> MasterDuke: you are right that, say one year ago, you could just go to one page and fix stuff. Now you have to choose one issue and research a bit (although there are easy issues too)

[11:22] <discord6> <Tyler (Aearnus)> MasterDuke: oh, sweet! that's pretty much what I wanted

[11:22] <jmerelo> MasterDuke: still, it needs to be done. Any suggestion is welcome.

[11:25] <MasterDuke> jmerelo: i don't have any ideas yet about how to encourage creating missing pages, but as for contributions in general, a good list of easy issues is the first step

[11:26] *** atroxaper left
[11:27] <MasterDuke> jmerelo: maybe we need to make those even more obvious than sorting/filtering the list?

[11:27] <MasterDuke> create another pinned issue that just contains a list of the easy ones?

[11:30] <MasterDuke> jmerelo: maybe extend the docs squashathon to include some of perl6.org? https://examples.perl6.org/ perhaps

[11:31] <jmerelo> MasterDuke: no problem about that.

[11:31] <jmerelo> MasterDuke: but examples is an unexplored territory...

[11:32] <jmerelo> MasterDuke: we would need to use something like Test::Script::Output to check if they work as expected. Some of them might be obsolete.

[11:33] <jmerelo> MasterDuke: there are a couple of tags in the repo that indicate they are easy. We could also pin them, but you can only pin one (and I'd rather have the biggie 6.d issue pinned there (that one has some of them that are easy enough))

[11:36] *** Ulti_ is now known as Ulti

[11:39] <MasterDuke> ah, didn't know you could only pin one

[11:41] <MasterDuke> jmerelo: maybe once code examples are made runnable/editable (by integrating glot.io or whatever) there might be a bunch of easy new issues around that

[11:55] <jmerelo> MasterDuke: there's no problem with issues. There are quite a bunch of them. Code in example works, so I don't think there's a lot of stuff to be done creating issues for non-working pieces of code.

[11:57] <jmerelo> MasterDuke: and if something does not work, I'm afraid it's not going to be easy to fix it. It's probably due to obsolescence, or new 6.d (which is mostly not documented), so fixing code might fall into something as hard as writing new docs.

[11:59] *** Kaiepi joined
[12:08] *** netrino joined
[12:12] *** jmerelo left
[12:16] *** snarkyboojum joined
[12:20] *** snarkyboojum left
[12:20] *** snarkyboojum joined
[12:29] *** snarkyboojum left
[12:37] *** andrzejku joined
[12:46] *** sena_kun joined
[13:07] *** ufobat joined
[13:11] *** eliasr left
[13:11] *** ufobat_ joined
[13:15] *** ufobat left
[13:16] *** molaf joined
[13:50] *** ayerhart joined
[13:52] *** molaf left
[14:05] *** Kaiepi left
[14:07] *** Kaiepi joined
[14:30] *** Kaiepi left
[14:31] *** Kaiepi joined
[14:35] <guifa> .tell timotimo hot on the heals of yesterday‚Äôs grammar discussion, I‚Äôve already got localized numbers (mostly) ready as a role+token.  Just have to make it more lenient (accept +‚Å∫‚Çä‚ûïÔ¨©Ôπ¢Ôºã for plus, etc)and handle prefix/suffixes for languages that use them but it‚Äôs already in GH to play with

[14:35] <yoleaux> guifa: I'll pass your message to timotimo.

[15:09] *** domidumont left
[15:18] <masak> "on the heals of" a discussion is a nice Freudian slip, if it was a hurtful discussion ;)

[15:18] <timotimo> ouch.

[15:18] <yoleaux> 14:35Z <guifa> timotimo: hot on the heals of yesterday‚Äôs grammar discussion, I‚Äôve already got localized numbers (mostly) ready as a role+token.  Just have to make it more lenient (accept +‚Å∫‚Çä‚ûïÔ¨©Ôπ¢Ôºã for plus, etc)and handle prefix/suffixes for languages that use them but it‚Äôs already in GH to play with

[15:18] <El_Che> masak: https://pbs.twimg.com/media/D4EfE-VX4AAhnDD.jpg

[15:21] <masak> El_Che: that's a nice autopun. I've heard it somewhere or mother before.

[15:21] <El_Che> :)

[15:34] *** hamhu3_ joined
[15:37] *** hamhu3 left
[15:44] *** jmerelo joined
[15:50] <Geth> ¬¶ perl6.org: lukasvalle++ created pull request #125: Stack Overflow question and answers

[15:50] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/pull/125

[15:51] <Geth> ¬¶ perl6.org: 1ca7313bcc | lukasvalle++ | source/community/index.html

[15:51] <Geth> ¬¶ perl6.org: Stack Overflow question and answers

[15:51] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/1ca7313bcc

[15:51] <Geth> ¬¶ perl6.org: af53e7e98e | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | source/community/index.html

[15:51] <Geth> ¬¶ perl6.org: Merge pull request #125 from lukasvalle/master

[15:51] <Geth> ¬¶ perl6.org: 

[15:51] <Geth> ¬¶ perl6.org: Stack Overflow question and answers

[15:51] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/af53e7e98e

[16:01] *** andrzejku left
[16:09] *** ctilmes joined
[16:11] *** ctilmes_ left
[16:19] *** zacts joined
[16:39] *** AlexDaniel left
[16:40] *** molaf joined
[16:41] *** molaf left
[17:05] *** domidumont joined
[17:31] *** zacts left
[17:32] *** ctilmes_ joined
[17:34] *** ctilmes left
[17:37] *** Black_Ribbon joined
[17:39] *** antoniogamiz joined
[17:44] *** jmerelo left
[17:47] *** regreg left
[18:10] *** zakharyas joined
[18:16] *** Kaiepi left
[18:16] *** Kaiepi joined
[18:46] *** hankache joined
[18:46] *** nekomune left
[18:47] *** nekomune joined
[18:54] *** ctilmes joined
[18:54] *** ctilmes_ left
[18:57] *** antoniogamiz left
[19:06] *** domidumont left
[19:19] <lizmat> weekly: https://thenewstack.io/a-conversation-with-the-creators-behind-python-java-typescript-and-perl/

[19:19] <notable6> lizmat, Noted!

[19:19] *** imcsk8 left
[19:20] *** hankache left
[19:20] *** imcsk8 joined
[19:22] *** sena_kun left
[19:37] *** sena_kun joined
[19:37] *** clarkema joined
[20:11] *** |Sno| joined
[20:13] *** [Sno] left
[20:38] <masak> tfw you're wondering if your refactor went wrong, or if you just found a subtle closure-related but in Rakudo... :)

[20:39] <masak> bug*

[21:02] *** clarkema left
[21:04] *** zakharyas left
[21:13] *** _jrjsmrtn joined
[21:15] *** __jrjsmrtn__ left
[21:17] *** Xliff joined
[21:17] <Xliff> \o

[21:45] *** random_yanek left
[21:47] *** random_yanek joined
[21:52] *** robertle left
[21:55] *** AlexDaniel joined
[22:38] *** random_yanek left
[22:39] <Xliff> Does anyone know the best way to debug this?

[22:39] <Xliff> "Circularity detected in multi sub types for &new"

[22:40] <Xliff> I almost want to say this is a bug.

[22:40] *** random_yanek joined
[22:41] <Xliff> Method called is (Str(), Class(), Int()) and the class I am trying to dispatch via samewith is (Str(), Class(), Int(), @)

[22:41] <Xliff> Yet it's saying that is circular. How?

[22:42] <SmokeMachine> is there any way no `mi6 build` do not use ONLY the main module of a distribution to create the README.md?

[22:43] *** rindolf left
[22:43] <timotimo> the mi6 file lets you turn off the readme generation, that's one thing you can do

[22:43] <timotimo> then you can make it however you want to

[22:44] <Xliff> How would I wrap all candidates of a multi?

[22:45] <timotimo> wrap the proto or for-loop over the candidates i guess?

[22:45] <Xliff> m: 1.^lookup('STORE').candidates.say

[22:45] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´(exit code 1) No such method 'candidates' for invocant of type 'Mu'‚ê§  in block <unit> at /tmp/8ESrpFd7m0 line 1‚ê§‚ê§¬ª

[22:45] <Xliff> m: my $a = 1; $a.^lookup('STORE').candidates.say

[22:45] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´(exit code 1) No such method 'candidates' for invocant of type 'Mu'‚ê§  in block <unit> at /tmp/NbBtS7dxEp line 1‚ê§‚ê§¬ª

[22:45] <Xliff> m: my $a = 1; $a.^lookup('STORE').say

[22:46] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:46] <timotimo> m: 1.^find_method('STORE').say

[22:46] <Xliff> m: my $a = 1; Int.^lookup('STORE').say

[22:46] <evalable6> timotimo, rakudo-moar dbf3638ea: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:46] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:46] <timotimo> oh

[22:46] <Xliff> O_o

[22:46] <timotimo> m: my $foo = 1; $foo.VAR.^find_method('STORE').say

[22:46] <evalable6> timotimo, rakudo-moar dbf3638ea: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:46] <timotimo> m: my $foo = 1; Scalar.^lookup('STORE').say

[22:46] <evalable6> timotimo, rakudo-moar dbf3638ea: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:47] <timotimo> too close to bedtime to figure this out maybe

[22:47] <Xliff> :(

[22:47] <Xliff> Thanks for trying.

[22:47] <timotimo> m: my $foo = 1; Scalar.^methods>>.name.say

[22:47] <evalable6> timotimo, rakudo-moar dbf3638ea: OUTPUT: ¬´(<anon> <anon> new name of default dynamic WHICH BUILDALL)‚ê§¬ª

[22:47] <timotimo> m: my $foo = 1; Scalar.^methods(:all)>>.name.say

[22:47] <evalable6> timotimo, rakudo-moar dbf3638ea: OUTPUT: ¬´(<anon> <anon> new name of default dynamic WHICH BUILDALL serial skip ASSIGN-KEY invert cl‚Ä¶¬ª

[22:47] <evalable6> timotimo, Full output: https://gist.github.com/6cd9544afab11660eacf5a7e45440588

[22:47] <Xliff> m: Array.^find_method('map').say

[22:47] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´Method+{is-nodal}.new‚ê§¬ª

[22:47] <timotimo> it simply doesn't have a STORE

[22:47] <timotimo> in its method list at least

[22:48] *** sena_kun left
[22:48] <Xliff> Would that be in HOW?

[22:49] <timotimo> it could be deeper in the 6model, actually

[22:49] <Xliff> m: Positional.^find_method('STORE').say

[22:49] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:50] <Xliff> m: Positional.^lookup('STORE').say

[22:50] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´(Mu)‚ê§¬ª

[22:50] <timotimo> after all, we do oftentimes lower scalar assignment to literal pointer deref and storing

[22:50] <timotimo> rather than go through a method

[22:50] <SmokeMachine> timotimo: but if I want it to regenerate the README.md but just want it thread from more files?

[22:50] <Xliff> Well.... so much for getting WHEN in as a module! :P

[22:50] <timotimo> you could put a STORE method in that you can use to put stuff in there, but it won't make assigning to a scalar cause the method to be called if it's overriden or wrapped

[22:51] <timotimo> have you had a look at the Tie:: namespace on modules.perl6.org? and also P5tie? all modules liz made

[22:51] <timotimo> perhaps they can be an inspiration to whatever you want to do

[22:51] <Xliff> Hmmm... Thanks for the suggestion!

[22:52] <SmokeMachine> I mean: I want to use `#| blablabla` to document my traits and operators, but those ar not defined on my main module, but its used by them...

[22:52] <timotimo> SmokeMachine: no idea, sorry :(

[22:53] <SmokeMachine> timotimo: thanks..

[22:54] <timotimo> i don't even see where generating the readme happens?

[22:54] <timotimo> oh

[22:55] <timotimo> SmokeMachine: https://modules.perl6.org/dist/App::Mi6:cpan:SKAJI/lib/App/Mi6.pm6#L131

[22:55] <timotimo> check it out

[22:55] <timotimo> the DOC phaser could be of service here

[22:56] <SmokeMachine> timotimo: https://modules.perl6.org/dist/App::Mi6:cpan:SKAJI/lib/App/Mi6.pm6#L131

[22:56] <SmokeMachine> yes... that... sorry!

[22:56] <timotimo> you can at the very least set a filename to use for the readme generator

[22:57] <timotimo> also, it looks like mi6 uses the lib folder as its PERL6LIB, so you can have a module in there that isn't in the provides section of the META6.json

[22:57] <Xliff> timotimo: Before you go, who is the best person to talk to regarding "Circularity detected in multi sub types for &new"

[22:57] <timotimo> and that could be responsible only for readme regeneration

[22:57] <Xliff> Because I can't figure out how a 3-arg method new doing samewith to a 4-arg multi is circular.

[22:58] <timotimo> Xliff: all i can say is "search the git log for that" and that gives this commit:

[22:58] <timotimo> commit 993c01e33f45e3785e56cb63da638829c4d0d305

[22:58] <timotimo> Date:   Sat Aug 16 12:45:23 2008 +0000

[22:58] <SmokeMachine> this just uses the first file... `perl6 --doc=Markdown lib/Red.pm6 lib/Red/Traits.pm6` :(

[22:58] <Xliff> timotimo: LOL! Thanks.

[22:59] <MasterDuke> Xliff: you don't want nextwith?

[22:59] <Xliff> MasterDuke: Tried with both. Same result.

[23:00] <timotimo> most of the mentions of "circularity" in the git log of rakudo are about making things work with bootstrapping, i.e. "core setting is written in perl6 and wants to use some perl6 stuff in itself"

[23:00] <MasterDuke> hm. but samewith is for calling the same candidate. so it couldn't go from a 3-arg to a 4-arg

[23:00] <Xliff> MasterDuke: Here's the code https://github.com/Xliff/p6-GtkPlus/blob/master/lib/GTK/Dialog/FileChooser.pm6#L80

[23:00] <Xliff> MasterDuke: My understanding is that it would re-start the dispatch with different parameters.

[23:00] <Xliff> So yes, that would go from 3 to 4.

[23:01] <Xliff> I could be mistaken, but I would expect a lot more things to be breaking if that wasn't the case.

[23:01] <Xliff> Funny. I search for "Circularity" and get d2999d738b1216664b647ae5135adb09eb349cde

[23:02] <MasterDuke> Xliff: i think samewith is definitely the wrong thing. what about just calling self.new with the new args explicitly?

[23:03] <Xliff> MasterDuke: OK.

[23:04] <Xliff> timotimo: Uhh... that looks like code from Parrot! =)

[23:04] <timotimo> Xliff: i forgot how to search for commits with text in the description, so i actually searched for commits that had changes in the files themselves including "Circularity"

[23:04] <MasterDuke> (take my advice with a grain of salt, also currently negotiating with a sick toddler)

[23:05] <timotimo> so perhaps try $?ROUTINE(...)

[23:05] <timotimo> is that a thing that can help?

[23:05] <Xliff> OK. Same error.

[23:05] <timotimo> or is the problem actually at compile time and only about the canditates and their signatures?

[23:05] <Xliff> No. This is runtime.

[23:06] <Xliff> git log --grep="<term>"

[23:07] <Xliff> timotimo: Is that $?ROUTINE or &?ROUTINE?

[23:07] <timotimo> should be &

[23:07] <Xliff> m: sub a say { &?ROUTINE.name.say }; a

[23:07] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/hDJOPa7PW3‚ê§Missing‚Ä¶¬ª

[23:07] <evalable6> Xliff, Full output: https://gist.github.com/b5f631326875b6a52742ab5fd344e290

[23:07] <Xliff> m: sub a { &?ROUTINE.name.say }; a

[23:07] <evalable6> Xliff, rakudo-moar dbf3638ea: OUTPUT: ¬´a‚ê§¬ª

[23:07] <Xliff> Thanks

[23:07] <timotimo> SmokeMachine: of course, it's exactly like a regular invocation of the file

[23:07] <timotimo> SmokeMachine: that's why i suggest putting something special into a DOC phaser

[23:09] <Xliff> This is starting to look like a bug.

[23:09] <Xliff> I replaced call with call(1), and am still getting the same error.

[23:09] <Xliff> So it looks like a run-time computation of something that happens at compile time. I don't get to ANY of the multi methods.

[23:09] <timotimo> SmokeMachine: like putting DOC { say "this will show up in the readme!" } in that module

[23:10] <timotimo> Xliff: anything helpful in the --ll-exception?

[23:10] <Xliff> Will look.

[23:11] <Xliff> Damn. No. This is in a callback, so --ll-exception doesn't apply.

[23:11] <Xliff> Let me see if I can call it directly.

[23:13] <Xliff> Same result with a direct call. --ll-exception doesn't add anything new.

[23:13] <SmokeMachine> timotimo: great idea! Thanks!

[23:18] <MasterDuke> m: proto foo(|) {*}; multi foo($a) { say "1 $a"; samewith($a, 9) }; multi foo($a, $b) { say "2 $a $b" }; foo(3) # hmm, i seem to be wrong

[23:18] <evalable6> MasterDuke, rakudo-moar dbf3638ea: OUTPUT: ¬´1 3‚ê§2 3 9‚ê§¬ª

[23:23] <MasterDuke> Xliff: mea culpa ^^^

[23:23] <choiboi> I've been messing around with the 'grammar' structure and I was wondering if there is any way to make `token TOP` to accept several numbers like `token TOP { <numbers> <expr> };`

[23:23] <Xliff> MasterDuke: LOL!

[23:24] <Xliff> MasterDuke: Thanks for checking. However my code is littered with such references. I would have known if samewith was going down the wrong path a while ago.

[23:24] <Xliff> Still. Beggars can't be choosers. I'm always willing to take suggestions. Now working in isolation.

[23:30] <Xliff> OK. That link is good for an example.

[23:30] <Xliff> If I try to call GTK::Dialog::FileChooser with ANY set of arguments, I get that error.

[23:30] <Xliff> Think I should rakudobug?

[23:31] <Xliff> I will start pulling multis, now.

[23:33] <MasterDuke> Xliff: what if you just add a multi with a constant, will that get called? e.g., multi new("foo"); new("foo")

[23:34] <MasterDuke> oh, you have a new with just a capture, it should pick up anything les

[23:34] <MasterDuke> *else

[23:36] <Xliff> Yep! And that was the problem.

[23:36] <Xliff> Taking that out nixed the circularity. But why was that even getting called?

[23:37] <Xliff> Capture should have been the last multi attempted!

[23:48] *** evalable6 left
[23:50] *** evalable6 joined
[23:55] <MasterDuke> m: proto foo(|) {*}; multi foo($a) { say "1 $a"; samewith($a, ("_OK" => 2, "_Cancel" => 3)) }; multi foo($a, @b) { say "2 $a @b[]" }; multi foo(|c) { say "c " ~ c }; foo(4)

[23:55] <evalable6> MasterDuke, rakudo-moar dbf3638ea: OUTPUT: ¬´1 4‚ê§2 4 _OK‚êâ2 _Cancel‚êâ3‚ê§¬ª

