[00:00] *** Manifest0 left
[00:01] *** Sgeo_ joined
[00:04] *** Sgeo left
[00:05] *** Manifest0 joined
[00:09] *** Manifest0 left
[00:13] *** Altai-man_ left
[00:14] *** Manifest0 joined
[00:23] *** Manifest0 left
[00:28] *** Sgeo__ joined
[00:29] *** Manifest0 joined
[00:30] *** kurahaupo_ joined
[00:31] *** kurahaupo left
[00:32] *** Sgeo_ left
[00:37] *** Manifest0 left
[00:42] *** Manifest0 joined
[00:44] *** ribasushi joined
[00:46] *** Sgeo__ left
[00:47] *** Sgeo__ joined
[00:55] *** espadrine_ left
[00:58] *** TreyHarris left
[00:59] <cpan-p6> New module released to CPAN! Podviewer (0.0.1) by 03UZLUISF

[00:59] *** Manifest0 left
[01:01] *** kurahaupo_ left
[01:02] *** kurahaupo joined
[01:03] <Kaiepi> m: module A { role B { }; class B::C does B { } }; say A::B::C

[01:03] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(C)‚ê§¬ª

[01:04] <Kaiepi> hm

[01:04] *** Sgeo__ left
[01:04] *** Sgeo__ joined
[01:04] *** netrino left
[01:05] <Kaiepi> m: module A {}; module A { role B { }; class B::C does B { } }; say A::B::C

[01:05] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of symbol 'A'‚ê§at <tmp>:1‚ê§------> 3module A {}; module A7‚èè5 { role B { }; class B::C does B { } }; ‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª

[01:05] *** Manifest0 joined
[01:05] <Kaiepi> i have a module that's similar to what i'm trying to do here but it's not working https://hastebin.com/ivuvizebap.rb

[01:05] <Kaiepi> it claims the symbol Net::Telnet::Subnegotiation::NAWS doesn't exist

[01:07] <Kaiepi> why?

[01:07] <Xliff> "Subneotiation::NAWS does Subnegotiation" ... Um ... "Subneotiation" is missing the "g"?

[01:07] <Xliff> But even so, that's namespace issue. That should still work.

[01:08] <Kaiepi> oh whoops lmao

[01:08] <Xliff> :)

[01:09] <Kaiepi> ah there we go it works now

[01:09] <Kaiepi> thanks

[01:09] <Xliff> LOL! That was it?!

[01:09] <Kaiepi> yes

[01:09] <Xliff> \o/

[01:10] <Kaiepi> i feel like i should rename the serialize method to Blob so i can pass subnegotiation objects to methods that take Blob()

[01:11] <Xliff> Method::Also allows you to do both.

[01:11] <Xliff> use Method::Also

[01:11] <Xliff> method serialize is also<Blob> { ... }

[01:11] <Xliff> Options are good.

[01:11] <Xliff> Also. TIMTWODI

[01:13] <Kaiepi> oh huh didn't know about also

[01:13] <Kaiepi> btw what does the handles trait mod do?

[01:13] <Xliff> Yeah. I'm using it for p6-GtkPlus

[01:13] <Xliff> handles?

[01:14] <Xliff> Ah! Delegation. The docs do not do that explanation justice.

[01:15] <Xliff> m: class A { method b { say "From B"; }; }; class B { method b { A.new.b }; }; 

[01:15] <camelia> rakudo-moar b2e72d6d7: ( no output )

[01:15] <Xliff> ^^ A pattern like that is MADE for delegation.

[01:15] <Xliff> Which can be written as:

[01:16] <Xliff> m: class A { method b { say "From B"; }; }; class B { has A $.a handles<b>; }; B.new.b

[01:16] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´From B‚ê§¬ª

[01:16] <Xliff> m: class A { method b { say "From A"; }; }; class B { has A $.a handles<b>; }; B.new.b

[01:16] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´From A‚ê§¬ª

[01:16] <Xliff> For that arbitrary example, it's hard to see the use, but imagine a 4-D Point class being wrapped by a Box class.

[01:17] <Xliff> s/Box/MetaPoint/

[01:19] <Xliff> "class MetaPoint { has Point $p handles<x y z ‚í∂>; }". Prevents you from having to write silly wrapper methods for .x, .y, .z and .‚í∂

[01:19] *** andrzejku joined
[01:20] <Xliff> Push that out to a wrapper class for a large-scale application that handles 4 different kinds of objects for 4 disparate systems.

[01:20] *** andrzejku_ left
[01:20] <Xliff> And then push that further.

[01:21] <Xliff> So... long story short: the handles trait can be viewed syntactic sugar for methods that stub in methods from other class attributes.

[01:21] <Xliff> But it's more than that.

[01:22] <Xliff> Oh.. syntax error in my class explanation...

[01:22] <Xliff> "class MetaPoint { has Point $!p handles<x y z ‚í∂>; }". Prevents you from having to write silly wrapper methods for .x, .y, .z and .‚í∂

[01:22] *** Manifest0 left
[01:22] *** Matthew[m] left
[01:22] *** MitarashiDango[m left
[01:22] *** tyil[m]1 left
[01:22] *** unclechu left
[01:22] *** Seance[m] left
[01:22] *** Demos[m] left
[01:22] *** AlexDaniel` left
[01:22] *** mack[m] left
[01:22] <Xliff> THAT allows you to still expose $!p.x, $!p.y, $!p.z, $!p.‚í∂, without exposing $!p

[01:22] *** tyil[m] left
[01:23] <Xliff> Or writing wrappers.

[01:23] *** lance_w[m] left
[01:23] *** rba[m] left
[01:23] *** Garland_g[m] left
[01:25] *** vs^ left
[01:25] *** irdr left
[01:26] *** vs^ joined
[01:26] *** vs^ left
[01:26] *** vs^ joined
[01:26] *** irdr joined
[01:27] *** vs^ left
[01:27] *** Manifest0 joined
[01:27] *** vs^ joined
[01:27] *** vs^ left
[01:27] *** vs^ joined
[01:28] *** vs^ left
[01:28] *** vs^ joined
[01:28] *** vs^ left
[01:40] *** Manifest0 left
[01:42] *** pnu__ left
[01:42] *** pnu__ joined
[01:42] *** b2gills left
[01:42] *** afresh1 left
[01:43] *** peteretep left
[01:45] *** peteretep joined
[01:45] *** Manifest0 joined
[01:47] *** Sharparam_ joined
[01:47] *** gks_ joined
[01:48] *** Kaiepi left
[01:48] *** lichtkind left
[01:48] *** MilkmanDan left
[01:48] *** Geth left
[01:48] *** vxe left
[01:48] *** synopsebot left
[01:48] *** xinming left
[01:48] *** huf left
[01:48] *** agentzh left
[01:48] *** gks left
[01:48] *** Sharparam left
[01:48] *** KotH left
[01:48] *** Grrrr left
[01:48] *** stux|RC left
[01:48] *** nightfrog left
[01:48] *** bobby left
[01:48] *** tyil left
[01:48] *** hahainternet left
[01:48] *** krunen left
[01:48] *** silug_ left
[01:48] *** Ekho left
[01:48] *** kubrat left
[01:48] *** jdv79 left
[01:48] *** revdiablo left
[01:48] *** Woodi left
[01:48] *** Sgeo_ joined
[01:48] *** afresh1 joined
[01:50] *** zacts joined
[01:51] *** Sgeo__ left
[01:56] *** Woodi joined
[01:57] *** molaf left
[02:01] *** b2gills joined
[02:01] *** Manifest0 left
[02:05] *** mack[m] joined
[02:09] *** unclechu joined
[02:09] *** Manifest0 joined
[02:10] *** molaf joined
[02:10] *** lance_w[m] joined
[02:11] *** Matthew[m] joined
[02:12] *** Seance[m] joined
[02:12] *** rba[m] joined
[02:13] *** tyil[m]1 joined
[02:14] *** AlexDaniel` joined
[02:14] *** hythm joined
[02:15] *** MitarashiDango[m joined
[02:22] *** Ekho joined
[02:23] *** Manifest0 left
[02:24] *** Sgeo__ joined
[02:25] *** Demos[m] joined
[02:25] *** Garland_g[m] joined
[02:26] *** tyil[m] joined
[02:27] *** Sgeo_ left
[02:28] *** hythm left
[02:29] *** zacts left
[02:31] *** Manifest0 joined
[02:34] *** zacts joined
[02:44] *** zacts left
[02:45] *** Kaiepi joined
[02:45] *** lichtkind joined
[02:45] *** MilkmanDan joined
[02:45] *** Geth joined
[02:45] *** vxe joined
[02:45] *** synopsebot joined
[02:45] *** xinming joined
[02:45] *** huf joined
[02:45] *** agentzh joined
[02:45] *** KotH joined
[02:45] *** Grrrr joined
[02:45] *** stux|RC joined
[02:45] *** nightfrog joined
[02:45] *** bobby joined
[02:45] *** tyil joined
[02:45] *** hahainternet joined
[02:45] *** krunen joined
[02:45] *** silug_ joined
[02:45] *** kubrat joined
[02:45] *** jdv79 joined
[02:45] *** revdiablo joined
[03:11] *** Manifest0 left
[03:16] *** Manifest0 joined
[03:16] *** ChoHag joined
[03:20] *** mowcat joined
[03:23] *** Manifest0 left
[03:24] *** zacts joined
[03:28] *** Manifest0 joined
[03:29] <SmokeMachine> pmurias: it seems not hard to use Red for it...

[03:32] <SmokeMachine> nine: I‚Äôve done something similar on Red...

[03:32] *** ChoHag left
[03:35] *** Manifest0 left
[03:36] <SmokeMachine> .tell nine https://github.com/FCO/Red/tree/master/lib/Red/AST

[03:36] <yoleaux> SmokeMachine: I'll pass your message to nine.

[03:40] *** Manifest0 joined
[03:45] *** Manifest0 left
[03:45] *** Sgeo__ left
[03:46] *** Sgeo__ joined
[03:49] *** mowcat left
[03:50] *** Manifest0 joined
[03:57] *** Manifest0 left
[03:58] *** MasterDuke left
[04:03] *** Manifest0 joined
[04:03] *** zacts left
[04:14] *** Manifest0 left
[04:18] <Kaiepi> should geth post when new issues are opened on github? i think it might be useful

[04:19] *** Manifest0 joined
[04:20] *** adu left
[04:31] *** skids left
[04:37] <Kaiepi> alias prove6="PERL6LIB=lib prove -e perl6 -vr $@"

[04:38] <Kaiepi> ik there's a prove6 package out there but this is useful for people who don't like installing too many packages

[04:47] *** Manifest0 left
[04:51] *** Manifest0 joined
[04:56] *** Manifest0 left
[05:01] *** Manifest0 joined
[05:05] *** Manifest0 left
[05:11] *** Manifest0 joined
[05:17] *** Manifest0 left
[05:19] *** kurahaupo left
[05:22] *** Manifest0 joined
[05:31] *** Manifest0 left
[05:36] *** Manifest0 joined
[05:38] <ugexe> I‚Äôd be surprised if most people *werent* using some variant of that 

[05:39] <ugexe> of course the pure way is prove -v -r -e ‚Äòperl6 -I .‚Äô ...

[05:41] *** Manifest0 left
[05:46] *** ChoHag joined
[05:46] *** Manifest0 joined
[05:51] *** Manifest0 left
[05:57] *** Manifest0 joined
[06:02] *** Manifest0 left
[06:02] *** cpan-p6 left
[06:03] *** cpan-p6 joined
[06:03] *** cpan-p6 left
[06:03] *** cpan-p6 joined
[06:07] *** Manifest0 joined
[06:12] *** Manifest0 left
[06:14] *** jmerelo joined
[06:15] <jmerelo> releasable6: status

[06:15] <releasable6> jmerelo, Next release will happen when it's ready. 1 blocker. 140 out of 317 commits logged (‚ö† 2 warnings)

[06:15] <releasable6> jmerelo, Details: https://gist.github.com/53983eedc0359f3e5e4561f438cb8a44

[06:18] *** Manifest0 joined
[06:22] *** zacts joined
[06:27] *** Manifest0 left
[06:33] *** andrzejku_ joined
[06:33] *** andrzejku left
[06:33] *** andrzejku_ is now known as andrzejku

[06:34] *** Manifest0 joined
[06:38] *** Manifest0 left
[06:44] *** Manifest0 joined
[06:48] *** zacts left
[06:58] <Kaiepi> all my telnet library needs is documentation and examples and it's done!

[06:58] <Kaiepi> well 

[06:58] <Kaiepi> "done"

[06:58] <Kaiepi> done enough to release on cpan

[06:58] <jmerelo> Kaiepi: all perl6 needs is documentation and it's done!

[06:59] <jmerelo> Kaiepi: anyway, good luck!

[06:59] *** MilkmanDan left
[07:00] <Kaiepi> also needs the features i'm adding when i start my grant work next week jmerelo :)

[07:01] *** jaldhar joined
[07:01] *** MilkmanDan joined
[07:01] <jmerelo> Kaiepi: congrats on your grant work. 

[07:01] <jmerelo> Maybe you can help with a problem I have now.

[07:01] <jmerelo> How do we get the name of the class we're in within a class?

[07:02] <jmerelo> m: class Foo { say .^mro };

[07:02] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´((Any) (Mu))‚ê§¬ª

[07:02] <jmerelo> m: class Foo { say .^WHICH };

[07:02] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Cannot resolve caller WHICH(Perl6::Metamodel::ClassHOW:D: Any:U); none of these signatures match:‚ê§    (Mu:U: *%_ --> ValueObjAt:D)‚ê§    (Mu:D: *%_ --> ObjAt:D)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:02] <jmerelo> m: class Foo { say .^WHo };

[07:02] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´No such method 'WHo' for invocant of type 'Perl6::Metamodel::ClassHOW'. Did you mean 'WHY'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:02] *** zacts joined
[07:03] <Kaiepi> m: class Foo { say .^name }

[07:03] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Any‚ê§¬ª

[07:03] <Kaiepi> hm

[07:03] <Kaiepi> m: class Foo { say ::?CLASS.^name }

[07:03] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Foo‚ê§¬ª

[07:04] <Kaiepi> there we go 

[07:04] <jmerelo> Kaiepi: thanks!

[07:04] <xinming> [499280.758321] perl6[1374]: segfault at 78 ip 00007f88dfb21b10 sp 00007f88c6ffc990 error 4 in libmoar.so[7f88df88e000+642000]                                                                ‚îÇ¬∑

[07:04] <xinming> [499280.761621] Code: 41 5d 41 5e 41 5f c3 0f 1f 00 48 8b 16 48 63 46 14 48 89 54 24 20 83 f8 fe 74 3f 48 8b 92 80 00 00 00 48 8d 04 40 48 c1 e0 04 <48> 03 42 78 4c 8b 68 08 0f b7 40 14 89 4‚îÇ¬∑

[07:04] <xinming> 4 24 1c e9 66 fe ff ff 0f

[07:04] <Kaiepi> np

[07:04] <jmerelo> I was about to post it in StackOverflow, so I'll do it anyway 

[07:04] <xinming> Is there a way how I can troubleshoot this kind of bug?

[07:04] <jmerelo> Kaiepi: https://stackoverflow.com/questions/56096939/introspection-how-do-we-get-the-name-of-a-class-within-a-class

[07:04] <xinming> I got segfault on moar

[07:05] <xinming> but no clue how I can repeat it, it's in a large program

[07:05] <timotimo> there are some ways. if the program doesn't run terribly long, "perl6-valgrind-m whatever-your-commandline-was" can give a little hint

[07:05] <timotimo> by default moarvm isn't compiled with debug symbols, though

[07:06] <timotimo> if you can, re-run moarvm's Configure.pl with the same flags you can see near the beginning of the "Makefile", and add --debug=3

[07:06] <xinming> Ok

[07:07] <timotimo> then just "make install -j4" or so, no need to rebuild rakudo or nqp

[07:09] <xinming> Will try, it's not a long run, But takes my cro app running 3 minutes, and then fail

[07:10] <timotimo> oof

[07:11] <timotimo> cro is multi-threaded and valgrind only supports a single thread, so it'll be a bit slower still

[07:11] <timotimo> you can also try "perl6-gdb-m"

[07:11] <timotimo> as soon as it crashes, you can "call MVM_dump_backtrace(tc)" to at least see where in the code it happens

[07:12] <xinming> timotimo: So, I'll use perl6-gdb-m, right?

[07:12] <xinming> bbl

[07:12] <timotimo> probably

[07:12] <timotimo> valgrind can get a lot more details out of the crash usually

[07:13] <xinming> timotimo: You'll need to give me hints on how to use gdb to get the context

[07:14] <timotimo> no prob

[07:14] <xinming> I'm installing gdb

[07:14] *** holyghost joined
[07:15] <timotimo> oh, if you're on a mac, you might already have lldb, in that case you can use perl6-lldb-m i think

[07:15] <xinming> And thanks, I'm really glad to get into deeper part of the perl6.

[07:15] <xinming> I'm in gentoo

[07:15] <xinming> I use gentoo

[07:15] <timotimo> OK

[07:24] *** Manifest0 left
[07:26] <holyghost> .

[07:27] <holyghost> hello

[07:27] <holyghost> .tell Xliff you did ,tell instead of .tell yesterday, I sent you some email for the new permanent ip

[07:27] <yoleaux> holyghost: I'll pass your message to Xliff.

[07:29] *** Manifest0 joined
[07:32] *** Kaypie joined
[07:32] *** Kaiepi left
[07:32] <holyghost> .tell Xliff kibology :-)

[07:32] <yoleaux> holyghost: I'll pass your message to Xliff.

[07:43] *** Sgeo joined
[07:45] *** zacts left
[07:45] *** espadrine_ joined
[07:46] *** Sgeo__ left
[07:56] *** Manifest0 left
[08:00] *** Manifest0 joined
[08:09] *** Manifest0 left
[08:12] <xinming> !paste

[08:12] <xinming> timotimo: http://paste.scsys.co.uk/584453

[08:13] <xinming> This is where the segfault happen

[08:14] *** Manifest0 joined
[08:16] <xinming> in gdb, what I do next?

[08:19] <Geth> ¬¶ doc: 73314def1d | (JJ Merelo)++ | doc/Type/Metamodel/ParametricRoleHOW.pod6

[08:19] <Geth> ¬¶ doc: Rephrasing

[08:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/73314def1d

[08:19] <Geth> ¬¶ doc: 4311d97033 | (JJ Merelo)++ | 3 files

[08:19] <Geth> ¬¶ doc: Rewrites user example compilation test

[08:19] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::ParametricRoleHOW

[08:19] <Geth> ¬¶ doc: 

[08:19] <Geth> ¬¶ doc: Now everything is compiled via -c, instead of using EVAL. This is

[08:19] <Geth> ¬¶ doc: slower, but closes #2764 since apparently the evaluation of so much

[08:19] <Geth> ¬¶ doc: code was gobbling up memory, and closes #2782 since either the memory

[08:19] <Geth> ¬¶ doc: itself or the creation of multiple objects was affecting this

[08:19] <Geth> ¬¶ doc: somehow. It also causes #2789, so some changes are trying to fix that.

[08:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4311d97033

[08:19] <Geth> ¬¶ doc: 490133e6a0 | (JJ Merelo)++ | doc/Type/Test.pod6

[08:19] <synopsebot> Link: https://doc.perl6.org/type/Test

[08:19] <Geth> ¬¶ doc: Adds preambles closes #2789

[08:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/490133e6a0

[08:21] <timotimo> xinming: sorry, i was AFK for a little bit

[08:21] <timotimo> a "bt full" could be interesting

[08:21] <timotimo> probably not quite as interesting is "thread apply all bt full"

[08:22] <timotimo> most threads will be waiting at that point i assume

[08:23] *** nadim joined
[08:24] <timotimo> i can say for sure that the spesh/frame_walker.c shouldn't crash like this :)

[08:24] <timotimo> can you "print f", "print f->spesh_cand"?

[08:25] <xinming> timotimo: http://paste.scsys.co.uk/584454

[08:26] <timotimo> ok, cand = 0x0 is an interesting output

[08:27] <xinming> I'm restart the test, so, I can get "print f"

[08:27] <timotimo> oh, right, you may want "--optimize=0" so that "optimized out" goes away

[08:28] <xinming> Do you mean in configure?

[08:28] <xinming> a minute

[08:28] <xinming> re-compiling

[08:30] <timotimo> yeah, in moarvm's configure

[08:31] *** imcsk8 left
[08:31] <xinming> timotimo: http://paste.scsys.co.uk/584455

[08:31] <xinming> with the --optimize=0

[08:32] <xinming> No symbol "f" in current context.

[08:32] <xinming> If I type    print f    in gdb cli, I got that error.

[08:33] *** imcsk8 joined
[08:34] <timotimo> interesting; perhaps you have to first "frame 0" to "go to" the go_to_first_inline frame

[08:35] <xinming> timotimo: http://paste.scsys.co.uk/584456

[08:37] <timotimo> oh, interesting

[08:37] <timotimo> what's your moarvm version?

[08:37] <timotimo> in my version there's an "if (f->spesh_cand && f->spesh_cand->inlines) {" on line 74

[08:37] <xinming> This is MoarVM version 2019.03-110-g081823ffc built with JIT support

[08:38] <timotimo> can you give me the output of "list"? that should give the source code from around that place

[08:38] <xinming>     if (f->spesh_cand && f->spesh_cand->inlines) {

[08:38] <xinming> I also have this.

[08:38] <xinming> What do you mean the output of "list"?

[08:38] <timotimo> the command "list" gives you source code from where the program currently is

[08:39] <xinming> Do you mean the source code for src/spesh/frame_walker.c

[08:39] <xinming> ok

[08:39] <timotimo> more like "what does gdb think is there"

[08:40] <xinming> http://paste.scsys.co.uk/584457

[08:40] <timotimo> huh. so it segfaults on line 75? and f->spesh_cand is null?

[08:42] <xinming> I think so

[08:43] <timotimo> wtf how does it get past that check :(

[08:43] <xinming> The problem is, it may take a while to run the problem for this to occur.

[08:43] <timotimo> right

[08:43] *** |oLa| left
[08:44] <xinming> I think we also need to check f->spesh_cand->jitcode?

[08:44] <xinming> soemthing like   if (f->spesh_cand && f->spesh_cand->inlines && f->spesh_cand->jitcode) ....

[08:44] <timotimo> that check is on the next line, but if f->spesh_cand is already null, how would it even get past that

[08:44] <timotimo> unless another thread is messing with the data

[08:44] <xinming> I think so.

[08:45] <timotimo> MVMFrame shouldn't be accessed from threads the frame doesn't belong to

[08:45] <xinming> we need a lock somewhere :-)

[08:46] <timotimo> if you're okay with a bunch more work, you could install rr, which can record the execution of the whole program and lets you step forwards as well as backwards

[08:46] <xinming> If you wish to continue troubleshooting the bug with me, I can install rr

[08:48] <xinming> I'm installing rr now

[08:48] <timotimo> worst case you can share the rr recording, but that will leak lots of data from your computer and what the program was doing so that may not be an option actually

[08:50] <xinming> timotimo: It's ok, Not much sensitve data at all.

[08:51] <timotimo> anyway, you haven't used rr before, right?

[08:51] <xinming> Never used.

[08:51] <timotimo> OK

[08:51] <timotimo> so with "rr record -n perl6-m blahblah" will do the recording and it'll just segfault like the regular program

[08:51] <xinming> I used gdb for a week, and that's really a long time ago.

[08:51] <xinming> Ok

[08:51] <timotimo> then you can "rr replay" and it'll give you a gdb that's connected to the recording

[08:51] <xinming> got it.

[08:52] <xinming> Still compiling

[08:52] <timotimo> i'm not sure how you can get the right number to "goto" to, but in theory you don't have to "c" to let it run until it crashes again

[08:52] <timotimo> or even if goto is the right command

[08:54] <timotimo> oh, maybe not "goto", but "run"

[08:54] <timotimo> so try "run 100000" and see if that's too far or too early

[08:56] *** kurahaupo joined
[08:59] <timotimo> and retry with progressively larger numbers until it complains i guess :)

[09:01] <cpan-p6> New module released to CPAN! Math::Polygons (0.0.4) by 03PSIXSTEVE

[09:06] *** Manifest0 left
[09:06] *** debprav joined
[09:08] <xinming> rr: Saving execution to trace directory `/home/xm/.local/share/rr/perl6-gdb-m-0'.

[09:08] <xinming> [FATAL /tmp/portage/dev-util/rr-5.2.0-r1/work/rr-5.2.0/src/PerfCounters.cc:197:get_cpu_microarch()] AMD CPUs not supported.

[09:08] <xinming> For Ryzen, see https://github.com/mozilla/rr/issues/2034.

[09:08] <xinming> >_<

[09:08] <xinming> I'll think other way to use rr to debug this

[09:09] <xinming> I have many machines

[09:15] *** Manifest0 joined
[09:19] *** Manifest0 left
[09:20] <ufobat_> is this supposted to work?

[09:21] <timotimo> nooooooooo

[09:21] <ufobat_> m: Mu.can("something"))

[09:21] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected closing bracket‚ê§at <tmp>:1‚ê§------> 3Mu.can("something")7‚èè5)‚ê§¬ª

[09:21] <ufobat_> m: Mu.can("something").say

[09:21] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´()‚ê§¬ª

[09:21] <ufobat_> m: Mu.^can("something").say # thats the only version i would expect to work

[09:21] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´()‚ê§¬ª

[09:22] *** |oLa| joined
[09:23] <timotimo> hm, yeah, that's kind of odd that it'd have a can method of its own

[09:27] *** Manifest0 joined
[09:30] *** pecastro joined
[09:35] <ufobat_> created a issue for that

[09:42] *** Manifest0 left
[09:44] *** Sgeo left
[09:44] *** Sgeo joined
[09:45] *** rindolf joined
[09:47] *** Manifest0 joined
[09:51] *** Manifest0 left
[09:58] *** Manifest0 joined
[10:01] *** andrzejku left
[10:03] *** Sgeo left
[10:08] *** debprav left
[10:12] *** Manifest0 left
[10:18] *** Manifest0 joined
[10:20] *** Sgeo joined
[10:24] *** Sgeo left
[10:30] *** andrzejku joined
[10:36] *** Manifest0 left
[10:42] *** Manifest0 joined
[10:46] *** andrzejku left
[10:46] *** Manifest0 left
[10:51] *** Manifest0 joined
[10:58] <nine> Yeah, a little sugar makes all the difference: SQL::Generator.new.generate(select(*, from(subquery(select(*, from('customers')), :as<c>)))).say

[10:58] <nine> SELECT * FROM (SELECT * FROM customers) AS c

[10:59] <nine> With the option to go deeper at every level if needed of course

[11:04] *** Manifest0 left
[11:08] <timotimo> a teaspoon of sugar helps the SQL go down

[11:12] *** Manifest0 joined
[11:18] *** Manifest0 left
[11:19] *** sena_kun joined
[11:23] *** Manifest0 joined
[11:26] *** pmurias joined
[11:27] <pmurias> SmokeMachine: using Red would introduce an OO layer, if I understood what nine wants he just wants to build SQL programatically without extra OO abstraction

[11:27] <yoleaux> 11 May 2019 19:23Z <MasterDuke> pmurias: have you seen https://news.ycombinator.com/item?id=19875335 ? seems like something you might be interested in

[11:28] *** Manifest0 left
[11:31] <pmurias> xinming: importing a perl6 module into nodejs is not implemented yet, it's definitely in reach so I'll look into it when I get back to rakudo.js soonish

[11:32] *** netrino joined
[11:33] *** Manifest0 joined
[11:35] *** llfourn left
[11:39] <nine> Getting there: select(*, from('customers'), where(boolean_test(comparison(|<id = 1>))))

[11:39] <nine> pmurias: it's not mutually exclusive. In fact I think the SQL AST will lend itself to integration into ORMs quite nicely.

[11:40] *** Manifest0 left
[11:41] *** llfourn joined
[11:43] <nine> I think the mistake all ORMs so far made is to start with objects representing roles and simple CRUD features and add additional SQL features on top. This must inevitably become harder and harder as the implemented features become more complex. I'm for example not aware of an ORM that still shines in the face of common table expressions or window functions.

[11:43] <SmokeMachine> pmurias: yes, but for doing that, Red uses a AST internally... it is planned to write a way to direct manipulate this AST...

[11:43] <nine> s/roles/rows/

[11:44] *** Manifest0 joined
[11:46] *** holyghost left
[11:46] *** MasterDuke joined
[11:46] *** MasterDuke left
[11:46] *** MasterDuke joined
[11:47] <SmokeMachine> nine: I think Red is different from that... once the idea of it isn‚Äôt map SQL to object, but map perl6 to SQL...

[11:56] *** molaf left
[11:56] <Geth> ¬¶ doc: 098f2c456f | (JJ Merelo)++ | doc/Language/variables.pod6

[11:56] <Geth> ¬¶ doc: Deindent

[11:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/098f2c456f

[11:56] <Geth> ¬¶ doc: a7c52cdf76 | (JJ Merelo)++ | doc/Language/variables.pod6

[11:56] <Geth> ¬¶ doc: Clarification about @*ARGS closes #2790

[11:56] <synopsebot> Link: https://doc.perl6.org/language/variables

[11:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a7c52cdf76

[12:02] <nine> Who came up with names like "nonparenthesized value expression primary"?

[12:03] *** Manifest0 left
[12:04] <lizmat> a committee ?

[12:05] <nine> Probably :) Though to be fair, they needed to come up with hunderts of names for the different syntax elements

[12:09] *** Manifest0 joined
[12:11] <pmurias> nine: sql {select * from customers where id = 1} seems like a lot nicer syntax

[12:12] <pmurias> nine: sql {select * from customers where id = $id and {{generate-condition()}}}} in a more complex case

[12:12] <nine> pmurias: absolutely! And once I have the SQL::Grammar going, we can have that. The sugar I mentioned is mostly for making writing of tests easier. Though I have to admit, that I'd already like to use it for $work...

[12:13] <pmurias> to be honest {{{ }}} is beyond ugly tho

[12:13] <nine> pmurias: do you know this? http://niner.name/talks/DBIC%20in%20Perl%206%20revisited/

[12:13] <pmurias> haven't seen that before

[12:15] <pmurias> nine: that creates a DSL to build SQL::Abstract objects?

[12:16] <nine> It's exploration of different ways to do that. One of them makes sql{"name=$name and active=$active"} actually safe, just like you proposed

[12:23] *** Manifest0 left
[12:26] *** ChoHag left
[12:29] *** Manifest0 joined
[12:35] *** Manifest0 left
[12:38] <nine> Composing queries: my ($query, $subquery) = select(*, from(table('customers'))) xx 2; $query .= where(eq(column('id'), scalar_subquery($subquery))); # SELECT * FROM customers WHERE id = (SELECT * FROM customers)

[12:40] <pmurias> nine: LTA compared to a grammar integrated solution, but seems very workable

[12:40] *** Manifest0 joined
[12:41] <nine> To a _hypothetical_ grammar integrated solution ;) But year, will invest some time in that after getting my exercise

[12:44] *** jmerelo left
[12:45] <timotimo> m: my @foo; with @foo[4] { say "entry 4 is already there!" } else { $_ = 99 }; dd @foo

[12:45] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Array @foo = [Any, Any, Any, Any, 99]‚ê§¬ª

[12:45] <timotimo> i wonder what i did wrong in my local code

[12:45] <timotimo> m: my @foo; with "hello" { with @foo[4] { say "entry 4 is already there!" } else { $_ = 99 }; dd @foo }

[12:45] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Array @foo = [Any, Any, Any, Any, 99]‚ê§¬ª

[12:46] <timotimo> oh, native int array

[12:46] <timotimo> m: my uint8 @foo; with "hello" { with @foo[4] { say "entry 4 is already there!" } else { $_ = 99 }; dd @foo }

[12:46] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´entry 4 is already there!‚ê§array[uint8].new()‚ê§¬ª

[12:47] <timotimo> even more interesting though:

[12:47] <timotimo> m: class testclass { has uint8 @.foo; method doit { with "hello" { with @.foo[4] { say "entry 4 is already there!" } else { $_ = 99 }; dd @foo } } }; testclass.new.doit

[12:47] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@foo' is not declared. Did you mean '@!foo'?‚ê§at <tmp>:1‚ê§------> 3 already there!" } else { $_ = 99 }; dd 7‚èè5@foo } } }; testclass.new.doit‚ê§¬ª

[12:47] <timotimo> m: class testclass { has uint8 @.foo; method doit { with "hello" { with @.foo[4] { say "entry 4 is already there!" } else { $_ = 99 }; dd @.foo } } }; testclass.new.doit

[12:47] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´assign requires a concrete object (got a Nil type object instead)‚ê§  in block  at <tmp> line 1‚ê§  in method doit at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:48] <timotimo> is my expectation unreasonable?

[12:53] <timotimo> this easily golfs to a shorter thing:

[12:53] <nine> SmokeMachine: to be clear: I think it's fantastic what you've done so far with Red!

[12:53] <timotimo> m: class testclass { has uint8 @.foo; method doit { my $thing := @.foo[4]; $thing = 9; dd @!foo} }; testclass.new.doit

[12:53] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´assign requires a concrete object (got a Nil type object instead)‚ê§  in method doit at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:03] *** Manifest0 left
[13:09] *** Manifest0 joined
[13:12] <Geth> ¬¶ doc: 518d24b8fc | (Jonathan Worthington)++ | 2 files

[13:12] <Geth> ¬¶ doc: Improve Lock and Lock::Async documentation

[13:12] <Geth> ¬¶ doc: 

[13:12] <Geth> ¬¶ doc: * Better explain what Lock::Async is

[13:12] <Geth> ¬¶ doc: * Provide a more complete and accurate introduction to Lock, moving

[13:12] <Geth> ¬¶ doc:   general information of the mechanism out of the description of the

[13:12] <Geth> ¬¶ doc:   lock method

[13:12] <Geth> ¬¶ doc: * Improve the lock, unlock, and protect descriptions for both

[13:12] <Geth> ¬¶ doc: <‚Ä¶commit message has 5 more lines‚Ä¶>

[13:12] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/518d24b8fc

[13:19] *** lucasb joined
[13:22] *** pmurias left
[13:38] *** Manifest0 left
[13:43] *** reach_satori left
[13:43] *** reach_satori joined
[13:44] *** Manifest0 joined
[13:47] <Voldenet> I wish https://github.com/perl6/roast/blob/master/S12-construction/destruction.t worked, locks would be a lot easier to use

[13:48] *** Manifest0 left
[13:55] *** Manifest0 joined
[13:56] <timotimo> in what way does it not work?

[13:56] <timotimo> oh, undefine

[13:56] <timotimo> that's not a thing any more, is it?

[13:56] <timotimo> m: my $foo; undefine $foo

[13:56] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Saw 1 occurrence of deprecated code.‚ê§================================================================================‚ê§undefine seen at:‚ê§  <tmp>, line 1‚ê§Will be removed with release v6.e!‚ê§Please use another way: assign a Nil; for Arrays/Hashe‚Ä¶¬ª

[13:56] <timotimo> oh, it is still a thing, wow

[13:56] <timotimo> though i don't think DESTROYALL is a thing?

[13:57] <timotimo> at least i've never heard of that

[13:57] <timotimo> or is that just what calls every applicable DESTROY submethod?

[14:00] <timotimo> the number 100 is not high enough to actually cause a GC run

[14:01] <timotimo> but parent and child do run backwards

[14:02] <timotimo> is there no ticket for this?

[14:02] <timotimo> if not, one should be made. if there is one, it should be put in the test file for the fudge :)

[14:03] <timotimo> Voldenet: what exact problem do you have? you need the order to be "child first" and get the opposite?

[14:04] <Voldenet> well, there's no destructors :)

[14:04] <Voldenet> /at all/

[14:05] *** ChoHag joined
[14:07] <Voldenet> it's not a big deal though - hardly any language has working destructors

[14:07] *** ChoHag left
[14:07] <timotimo> um

[14:08] <timotimo> there is destructors

[14:08] <timotimo> m: class bloop { submethod DESTROY { say "CARNAGE!" } }; for ^100_000 { bloop.new }

[14:08] <camelia> rakudo-moar b2e72d6d7: ( no output )

[14:08] <timotimo> m: class bloop { submethod DESTROY { say "CARNAGE!" } }; my $a = bloop.new; for ^100_000 { $a = bloop.new }

[14:08] <camelia> rakudo-moar b2e72d6d7: ( no output )

[14:08] <timotimo> m: class bloop { submethod DESTROY { say "CARNAGE!" } }; my $a = bloop.new; for ^1_000_000 { $a = bloop.new }

[14:08] <camelia> rakudo-moar b2e72d6d7: ( no output )

[14:08] <timotimo> um, what.

[14:08] <Voldenet> :P

[14:09] <timotimo> works locally

[14:09] <timotimo> m: use nqp; class bloop { submethod DESTROY { say "CARNAGE!" } }; my $a = bloop.new; for ^1_000_000 { $a = bloop.new; nqp::force_gc }

[14:09] <timotimo> oh, one million gc runs is gonna be a bit slow

[14:09] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(timeout)¬ª

[14:10] <Voldenet> m: sub { class :: { submethod DESTROY { "beep".say }}.new() }(); use nqp; nqp::force_gc

[14:10] <camelia> rakudo-moar b2e72d6d7: ( no output )

[14:10] <timotimo> m: use nqp; class bloop { submethod DESTROY { say "CARNAGE!" } }; my $a = bloop.new; for ^1000 { $a = bloop.new; nqp::force_gc }

[14:10] <camelia> rakudo-moar b2e72d6d7: ( no output )

[14:10] <timotimo> wtf camelia

[14:10] *** debprav joined
[14:10] <Voldenet> doesn't work for me either

[14:10] <timotimo> hm. for 1000 i get only three carnage outputs

[14:11] <Voldenet> for 100 i get none

[14:11] <timotimo> i thought perhaps the optimizer threw out the entire bloop creation and destruction

[14:11] <Voldenet> for 1000 i get 999 ‡≤†_‡≤† 

[14:11] <timotimo> but MVM_SPESH_DISABLE=yes doesn't give me carnage

[14:11] <timotimo> without force_gc it works, too

[14:12] <timotimo> anyway, destruction isn't guaranteed to happen timely, or at all (if the program exits before the object needs to be destroyed, say)

[14:13] *** atweiden-air joined
[14:13] <timotimo> but destructors definitely do exist

[14:13] <Voldenet> Yeah, but with their behaviour it's kind of java-ish - you do have them 

[14:13] <Voldenet> but relying on them for things like locks is a terrible idea

[14:14] <timotimo> ah, yeah

[14:14] <timotimo> if you're waiting on a lock that's supposed to be destroyed by GC, you won't be generating objects, nor GC pressure

[14:15] <timotimo> $lock.protect: { blah } is probably good enough for a whole lot of cases though

[14:16] *** namibj_ is now known as namibj

[14:18] <nine> Voldenet: what would destructors give you that you can't do with $lock.protect or LEAVE $lock.unlock?

[14:18] *** debprav left
[14:18] <atweiden-air> i just released an awesome perl 6 arch and void linux installer for btrfs fde if anyone's interested

[14:19] <atweiden-air> https://github.com/atweiden/archvault

[14:19] <atweiden-air> https://github.com/atweiden/voidvault

[14:21] <Voldenet> nine: with($logger.Scope) { $logger.Log("Something"); } - if destructors worked, $logger could synchronize accesses to a file with this

[14:21] <Voldenet> but currently, it's just more feasible to queue the log requests and dispatch saving to file in a thread

[14:22] <nine> Voldenet: why not just $logger.Scope: { $logger.Log("Something"); }?

[14:24] <Voldenet> it works with this code, but then you're forced to create a lot of lambdas

[14:26] *** atweiden-air left
[14:27] <nine> Which is downright trivial and not different from a with statement

[14:30] <Voldenet> it is going to lead to deeper stack traces

[14:31] <nine> Are you worried about performance or about readability of those stack traces there?

[14:31] <Voldenet> both :)

[14:31] <Voldenet> imagine composing a lot of objects with tracked lifetime

[14:32] *** ChoHag joined
[14:32] <nine> For performance it's not that bad. It may as well happen that the block is inlined into a $logger.Scope method that's again inlined into the caller. There'd be no stack frames or code objects anywhere in that case.

[14:32] <timotimo> put an "is-hidden-from-backtrace" somewhere :D

[14:32] <nine> Perl 6 actually relies on the runtime to be smart like that. Think for example about negative array indexing. That's a lambda right there: @a[*-1]

[14:33] <nine> And for loops are actually compiled to calls to .map

[14:34] <timotimo> except sometimes we compile them into a while loop with .pull-one on the .iterator

[14:35] <Voldenet> + to use object with its lifetime, you need to know to track its lifetime

[14:36] <Voldenet> you can't just { my $log = $logger.Scope; $log.Log("‚Ä¶"); } without a care in the world

[14:36] <timotimo> if you "will leave .close" you can though

[14:37] <Voldenet> you actually need: { my $log = $logger.Scope; LEAVE $log.dispose; $log.Log("‚Ä¶"); }

[14:37] <timotimo> i guess that's your point

[14:37] <timotimo> no, that's more than you need

[14:37] <timotimo> m: { my Str $foo will leave .say; $foo = 99 }; say "yo"

[14:37] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3{ my Str $foo will leave7‚èè5 .say; $foo = 99 }; say "yo"‚ê§    expecting any of:‚ê§        block or pointy block‚ê§¬ª

[14:37] <timotimo> m: { my Str $foo will leave { .say }; $foo = 99 }; say "yo"

[14:37] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(Str)‚ê§Type check failed in assignment to $foo; expected Str but got Int (99)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:37] <nine> Voldenet: or: $logger.Scope: { $log.Log("...") }

[14:37] <timotimo> m: { my Str $foo will leave { .say }; $foo = 100000 }; say "yo"

[14:37] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(Str)‚ê§Type check failed in assignment to $foo; expected Str but got Int (100000)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:37] <timotimo> m: { my Str $foo will leave { .say }; $foo = "100000" }; say "yo"

[14:37] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´100000‚ê§yo‚ê§¬ª

[14:37] <timotimo> no, timo, 100000 isn't a Str either

[14:40] <nine> As to performance: the lambda trick actually gives the runtime more opportunity to optimize. The runtime would hardly be able to optimize the Scope object away in the destructor case

[14:42] <timotimo> nine: actually, with our escape analysis we might be able to do that, if the destructor behaves at least :)

[14:44] *** pmurias joined
[14:45] <Voldenet> actually, with destructors you could return a scope with some object

[14:45] <Voldenet> so object could have opened logger for its lifetime

[14:54] <timotimo> if you have that kind of lifetime stuff then you can just do that

[14:54] <Voldenet> Well, currently I'm just passing the scope object with on-end triggers

[14:54] <timotimo> with something not not called "Scope"

[14:54] <timotimo> so one method for getting one with a destructor and one for "will leave" or using the $log.Scope: { blah } thing or whatevs

[14:54] <Voldenet> m: class Lifetime { has @!s; method LEAVE(&m) { @!s.push(&m) }; method end { .() for @!s } }; sub req { my $s = Lifetime.new; LEAVE $s.end; $s.LEAVE: { say "bye" } }; req; req

[14:54] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´bye‚ê§bye‚ê§¬ª

[14:54] <Voldenet> it's terrible, but it works

[14:58] <Voldenet> in fact, I attach it to the thread with $*THREAD.id so I don't have to pass it around, but it's still a terrible hack

[15:02] <Voldenet> I'd gladly see some better method - the one I'm using now looks bad and feels bad to use

[15:04] *** Manifest0 left
[15:04] <ugexe> $*THREAD.id doesn't identify only a specific thread over the lifetime of a program

[15:05] <Voldenet> Whoa, it doesn't?

[15:06] <ugexe> when i needed to do this i ended up doing %cache{$*THREAD} = ... instead of %cache{$*THREAD.id}

[15:06] <Voldenet> thanks ugexe, I'll change it then

[15:11] *** Manifest0 joined
[15:19] *** zakharyas joined
[15:20] *** Manifest0 left
[15:25] *** Manifest0 joined
[15:31] *** Sgeo joined
[15:31] *** jmerelo joined
[15:31] *** cpan-p6 left
[15:32] *** Manifest0 left
[15:32] *** cpan-p6 joined
[15:32] *** cpan-p6 left
[15:32] *** cpan-p6 joined
[15:37] *** Manifest0 joined
[16:06] *** Manifest0 left
[16:11] *** Manifest0 joined
[16:16] *** nebuchadnezzar joined
[16:16] *** vrurg left
[16:22] *** Manifest0 left
[16:28] *** Manifest0 joined
[16:34] *** Manifest0 left
[16:38] *** molaf joined
[16:39] *** Manifest0 joined
[16:48] *** Kaypie is now known as Kaiepi

[16:51] <xinming> timotimo: ping

[16:55] <xinming> timotimo: When you are at computer, Please ping me, I got intel computer now, and will try with rr

[16:55] <xinming> though, it's a 3930 machine, which is really slow

[16:56] <timotimo> xinming: i'm here now, but i'll be AFK for maybe an hour

[16:56] <xinming> Ok

[16:56] <timotimo> i mean, i'm here for a few seconds before being AFK

[16:56] <Voldenet> m: use MONKEY-SEE-NO-EVAL; my $fn = EVAL("sub { print 42 }"); $fn();

[16:56] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´425===SORRY!5=== Error while compiling /home/camelia/EVAL_0‚ê§Missing block‚ê§at /home/camelia/EVAL_0:1‚ê§------> 3sub True7‚èè5<EOL>‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[16:57] *** Manifest0 left
[16:57] <xinming> timotimo: Ok, I'll setup the test environment.

[16:58] <Kaiepi> +1 jnthn on the Lock/Lock::Async docs rewrite

[16:58] *** zakharyas left
[16:58] <Kaiepi> much better now :)

[17:01] <Voldenet> How to do something similar to: `my $fn = eval("sub { print 42; }"); $fn->();` in perl 5? I'm trying, but I probably don't know how to use eval

[17:01] *** sena_kun left
[17:02] *** Manifest0 joined
[17:03] <Voldenet> m: use MONKEY-SEE-NO-EVAL; my $str = q`sub { print 42; }`; EVAL($str)()

[17:03] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´42¬ª

[17:03] <Voldenet> Eh, Nevermind

[17:09] *** Manifest0 left
[17:09] *** ayerhart left
[17:12] <xinming> Anyone here knows, for rr utility, What if we need network support? For now, I found that when I start the app with rr, It doens't start the cro service

[17:13] *** Manifest0 joined
[17:13] *** ayerhart joined
[17:14] *** ayerhart left
[17:14] *** ayerhart joined
[17:22] *** Manifest0 left
[17:24] <Geth> ¬¶ doc: af2115cc0e | (Daniel Green)++ | 2 files

[17:24] <Geth> ¬¶ doc: Some typo fixes

[17:24] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/af2115cc0e

[17:24] <xinming> I'm wrong to use perl6-m-dbg with rr

[17:26] *** vrurg joined
[17:27] *** Manifest0 joined
[17:29] <Kaiepi> i'm having an issue with blobs

[17:29] <lizmat> weekly: http://blogs.perl.org/users/laurent_r/2019/05/perl-weekly-challenge-7-niven-numbers-and-word-ladders.html

[17:29] <notable6> lizmat, Noted!

[17:29] <Kaiepi> can someone take a look at https://hastebin.com/azepasogup.rb and tell me what i need to do to get the output i want?

[17:31] *** sena_kun joined
[17:33] <lizmat> dd

[17:33] <lizmat> Kaiepi: what does `dd $!data` say ?

[17:34] <Kaiepi> Buf $!data = Buf.new(195,191,195,186,195,191,195,176)

[17:34] <Kaiepi> it's supposed to be latin1 but it looks like it's utf8 instead

[17:34] <Kaiepi> not sure why

[17:36] <xinming> timotimo: What do we do if this bug appear on AMD ryzen 2700, But when I try with G3930 from intel, It works fine.

[17:37] <xinming> timotimo: I'm not sure wether it's a cpu problem on SMT in ryzen, or a problem kernel deals with SMT in ryzen

[17:38] <xinming> hmm, I'll recompile the linux kernel without optimization.

[17:42] <Kaiepi> ok i figured out why

[17:43] <Kaiepi> IO::Socket::Async.Supply ignores :enc if :bin is also passed (???)

[17:44] <ugexe> well, the only other sane option there would be to throw an exception

[17:46] <lizmat> Kaiepi: yeah, it does, also with IO::Handle afaik

[17:47] <Kaiepi> i tried without :bin and it's still ignoring the encoding?

[17:47] <Kaiepi> also tried with IO::Socket::Async.connect(:enc<latin1>)

[17:48] <lizmat> then maybe we haz a bug ?

[17:49] <lizmat> causal glance at the code, it looks like it doesn't even check for a :bin ?

[17:49] <lizmat> *casual

[17:50] *** TreyHarris joined
[17:51] <lizmat> https://docs.perl6.org/type/IO::Socket::Async#method_connect doesn't even mention an :enc parameter

[17:51] <lizmat> fo looks like it is also a doc issue

[17:52] * jmerelo hears doc

[17:52] <Kaiepi> wait hold on i forget to set the encoding of the server to latin1 as well

[17:53] <jmerelo> There are a few issues: https://github.com/rakudo/rakudo/issues/2039

[17:55] <jmerelo> Anyway, you find anything missing, please raise an issue. That might be part of the 6.d unfinished update, but it might hide something deeper. An issue will help anyway

[17:55] <Kaiepi> yeah, that was the issue

[17:56] <Kaiepi> i got it working properly now

[17:57] <jmerelo> Kaiepi: great!

[18:00] *** adu joined
[18:04] <Xliff> m: ('Line' ¬´~¬ª ^6).join("\n").say

[18:04] <yoleaux> 07:27Z <holyghost> Xliff: you did ,tell instead of .tell yesterday, I sent you some email for the new permanent ip

[18:04] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Line0‚ê§Line1‚ê§Line2‚ê§Line3‚ê§Line4‚ê§Line5‚ê§¬ª

[18:04] <yoleaux> 07:32Z <holyghost> Xliff: kibology :-)

[18:06] <Xliff> m: sub a ($a) { $a.say }; a(1|3)

[18:06] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´1‚ê§3‚ê§¬ª

[18:06] <Xliff> m: sub a ($a) { $a.say }; |a(1|3)

[18:06] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´1‚ê§3‚ê§¬ª

[18:06] <Xliff> m: sub a ($a) { $a }; a(1|3)

[18:06] <camelia> rakudo-moar b2e72d6d7: ( no output )

[18:06] <Xliff> m: sub a ($a) { $a }; a(1|3).gist.say

[18:06] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´any(1, 3)‚ê§¬ª

[18:06] <Xliff> m: sub a ($a) { $a }; |a(1|3).say

[18:06] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´any(1, 3)‚ê§¬ª

[18:06] <Xliff> m: sub a ($a) { $a }; |a(1|3).flat

[18:06] <camelia> rakudo-moar b2e72d6d7: ( no output )

[18:07] <Xliff> m: sub a ($a) { $a }; |a(1|3).flat.say

[18:07] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´any((1), (3))‚ê§¬ª

[18:07] <xinming> also occur on G3930, So, I'll use rr to record it

[18:07] <Xliff> How do I turn a junction into a list?

[18:07] <Xliff> m: sub a ($a) { $a }; |a(1|3).List

[18:07] <camelia> rakudo-moar b2e72d6d7: ( no output )

[18:07] <Xliff> m: sub a ($a) { $a }; a(1|3).List.say

[18:07] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´any((1), (3))‚ê§¬ª

[18:07] <Xliff> m: sub a ($a) { $a }; a(1|3).Array.say

[18:07] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´any([1], [3])‚ê§¬ª

[18:09] * jmerelo finds that Perl questions in StackOverflow reached a new minimun last month, since early 2009 https://data.stackexchange.com/stackoverflow/query/edit/850977#graph

[18:09] <Xliff> m: sub a ($a) { $a }; .say for a(1|3);

[18:09] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(Mu)‚ê§¬ª

[18:10] <jmerelo> m: say (1^3).iterator.pull-one

[18:10] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(Mu)‚ê§¬ª

[18:11] <jmerelo> Xliff: ^^^ Does that help?

[18:11] <Xliff> Nope! ;)

[18:11] <jmerelo> Xliff: what do you wanna do?

[18:11] <Xliff> I think I found the answer here: https://perlgeek.de/blog-en/perl-5-to-6/08-junctions.html

[18:11] <Xliff> See "Word of Warning" at the end.

[18:11] <MasterDuke> m: sub a($b) { take $b }; my @c = gather a(1|2); dd @c

[18:11] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Array @c = [1, 2]‚ê§¬ª

[18:12] <Xliff> "If you try to extact items from a junction, you are doing it wrong"

[18:12] <Xliff> Which is sad. Because that's what I was trying to do.

[18:12] <jmerelo> Ah, OK, right.

[18:12] <jmerelo> Xliff: you were doing it wrong!

[18:12] <Xliff> I was trying to do:

[18:12] <Xliff> m: ($v1, $v2) = $obj.method(1|3)

[18:12] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$v1' is not declared‚ê§at <tmp>:1‚ê§------> 3(7‚èè5$v1, $v2) = $obj.method(1|3)‚ê§¬ª

[18:12] <Xliff> "($v1, $v2) = $obj.method(1|3)"

[18:13] <jmerelo> Xliff: you kinda wanted to do autothreading in a method by using Junctions

[18:13] <Xliff> Just so I wouldn't have to do "($v1, $v2) = ($obj.method(1), $obj.method(3))

[18:13] <jmerelo> Xliff: In parallel! In constant time!

[18:13] <jmerelo> Xliff: you can still do >> 

[18:14] <Xliff> ??

[18:14] <Xliff> Example, pls?

[18:14] <jmerelo> Xliff: let me see

[18:15] <jmerelo> m: class Foo { has $.bar; method zape { $!bar*2 }; my $foo = Foo.new(bar=> 3); my $bar = Foo.new(bar => 5 ); say ($foo,$bar)¬ª.zape

[18:15] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3oo.new(bar => 5 ); say ($foo,$bar)¬ª.zape7‚èè5<EOL>‚ê§    expecting any of:‚ê§        postfix‚ê§        statement end‚ê§        statement modifier‚ê§        sta‚Ä¶¬ª

[18:16] <jmerelo> m: class Foo { has $.bar; method zape { $!bar*2 }; my $foo = Foo.new(bar=> 3)}; my $bar = Foo.new(bar => 5 ); say ($foo,$bar)¬ª.zape

[18:16] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$foo' is not declared. Did you mean 'Foo'?‚ê§at <tmp>:1‚ê§------> 033)}; my $bar = Foo.new(bar => 5 ); say (7‚èè5$foo,$bar)¬ª.zape‚ê§¬ª

[18:16] <jmerelo> m: class Foo { has $.bar; method zape { $!bar*2 }}; my $foo = Foo.new(bar=> 3); my $bar = Foo.new(bar => 5 ); say ($foo,$bar)¬ª.zape

[18:16] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(6 10)‚ê§¬ª

[18:16] <jmerelo> Xliff: ^^^ that

[18:16] <Xliff> Hmm...

[18:17] <Xliff> No. That's the wrong way! :)

[18:17] <jmerelo> OK, because you want the arguments, right?

[18:17] <Xliff> "($v1, $v2) = ( $obj.method(1), $obj.method(3) )"

[18:17] <jmerelo> right

[18:17] <jmerelo> Let me see

[18:17] <Xliff> $obj doesn't vary.

[18:19] <jmerelo> m: class Foo { has $.bar; method zape( $zipi) { $!bar*$zipi }}; my $foo = Foo.new(bar=> 3); say $foo.zape¬ª.()¬ª (3,6)

[18:19] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing postfix‚ê§at <tmp>:1‚ê§------> 3o = Foo.new(bar=> 3); say $foo.zape¬ª.()¬ª7‚èè5 (3,6)‚ê§    expecting any of:‚ê§        argument list‚ê§        postfix‚ê§¬ª

[18:20] *** pmurias left
[18:21] <jmerelo> m: class Foo { has $.bar; method zape( $zipi) { $!bar*$zipi }}; my $foo = Foo.new(bar=> 3); say $foo.zape().¬ª (3,6)

[18:21] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing postfix‚ê§at <tmp>:1‚ê§------> 3oo = Foo.new(bar=> 3); say $foo.zape().¬ª7‚èè5 (3,6)‚ê§    expecting any of:‚ê§        argument list‚ê§        postfix‚ê§¬ª

[18:21] <jmerelo> m: class Foo { has $.bar; method zape( $zipi) { $!bar*$zipi }}; my $foo = Foo.new(bar=> 3); say $foo.zape.¬ª (3,6)

[18:21] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing postfix‚ê§at <tmp>:1‚ê§------> 3$foo = Foo.new(bar=> 3); say $foo.zape.¬ª7‚èè5 (3,6)‚ê§    expecting any of:‚ê§        method arguments‚ê§        postfix‚ê§¬ª

[18:22] <Kaiepi> Net::Telnet is almost complete! i just need to write more documentation and some example code and release 0.0.1 will be ready

[18:22] <Xliff> m: class A { method($a) { $a¬≤ }; }; my $obj = A.new; ($v1, $v2) ¬´ a() ¬´ (1, 3)

[18:22] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3class A { method(7‚èè5$a) { $a¬≤ }; }; my $obj = A.new; ($v1, $‚ê§¬ª

[18:22] <Kaiepi> well

[18:22] <Kaiepi> "complete"

[18:22] *** pmurias joined
[18:22] <Kaiepi> it will never be complete with how many options telnet has

[18:22] <Xliff> m: class A { method a ($a) { $a¬≤ }; }; my $obj = A.new; ($v1, $v2) ¬´ a() ¬´ (1, 3)

[18:22] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$v1' is not declared‚ê§at <tmp>:1‚ê§------> 3od a ($a) { $a¬≤ }; }; my $obj = A.new; (7‚èè5$v1, $v2) ¬´ a() ¬´ (1, 3)‚ê§¬ª

[18:22] <Xliff> m: class A { method a ($a) { $a¬≤ }; }; my $obj = A.new; my ($v1, $v2) ¬´ a() ¬´ (1, 3)

[18:22] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing infix inside hyper‚ê§at <tmp>:1‚ê§------> 3¬≤ }; }; my $obj = A.new; my ($v1, $v2) ¬´7‚èè5 a() ¬´ (1, 3)‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§¬ª

[18:22] <jmerelo> Xliff: I'm pretty sure there's some trickery to do that... 

[18:23] <Xliff> m: class A { method a ($a) { $a¬≤ }; }; my $obj = A.new; my ($v1, $v2) ¬´ $a.a() ¬´ (1, 3)

[18:23] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing infix inside hyper‚ê§at <tmp>:1‚ê§------> 3¬≤ }; }; my $obj = A.new; my ($v1, $v2) ¬´7‚èè5 $a.a() ¬´ (1, 3)‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§¬ª

[18:23] <jmerelo> m: class Foo { has $.bar; method zape( $zipi) { $!bar*$zipi }}; my $foo = Foo.new(bar=> 3); say $foo.zape.(3)

[18:23] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in method zape at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:23] <jmerelo> m: class Foo { has $.bar; method zape( $zipi) { $!bar*$zipi }}; my $foo = Foo.new(bar=> 3); say $foo.zape.($foo,3)

[18:23] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in method zape at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:24] <Xliff> m: class A { method a ($a) { $a¬≤ }; }; my $obj = A.new; my ($v1, $v2) =  $a.a .¬´ (1, 3)

[18:24] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3}; }; my $obj = A.new; my ($v1, $v2) =  7‚èè5$a.a .¬´ (1, 3)‚ê§¬ª

[18:24] <Xliff> m: class A { method a ($a) { $a¬≤ }; }; my $obj = A.new; my ($v1, $v2) =  $obj.a .¬´ (1, 3)

[18:24] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call (only alphabetic methods may be detached)‚ê§at <tmp>:1‚ê§------> 3 $obj = A.new; my ($v1, $v2) =  $obj.a .7‚èè5¬´ (1, 3)‚ê§¬ª

[18:24] <Xliff> m: class A { method a ($a) { $a¬≤ }; }; my $obj = A.new; my ($v1, $v2) =  $obj.a .¬ª (1, 3)

[18:24] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call (only alphabetic methods may be detached)‚ê§at <tmp>:1‚ê§------> 3 $obj = A.new; my ($v1, $v2) =  $obj.a .7‚èè5¬ª (1, 3)‚ê§¬ª

[18:25] <Xliff> m: class A { method a ($a) { $a¬≤ }; }; my $obj = A.new; my ($v1, $v2) =  $obj.a().¬ª (1, 3)

[18:25] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing postfix‚ê§at <tmp>:1‚ê§------> 3obj = A.new; my ($v1, $v2) =  $obj.a().¬ª7‚èè5 (1, 3)‚ê§    expecting any of:‚ê§        argument list‚ê§        postfix‚ê§¬ª

[18:25] <Xliff> Ah well. Thanks for trying, jmerelo 

[18:25] <jmerelo> Xliff: Only alphabetic methods might be detached?

[18:25] <jmerelo> Xliff: maybe try StackOverflow?

[18:26] <jmerelo> Xliff: https://github.com/rakudo/rakudo/issues/2092

[18:27] <timotimo> are you looking for <== instead of hyperops?

[18:27] <Xliff> Maybe.

[18:27] <timotimo> not sure it works with method calls though

[18:27] <Xliff> timotimo: "($v1, $v2) = ( $obj.method(1), $obj.method(3) )"

[18:27] <Xliff> Is there a shortcut so that I can just specify (1, 3) in some way?

[18:27] <MasterDuke> .map over them?

[18:28] <jmerelo> m: 42 .&abs

[18:28] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call (only alphabetic methods may be detached)‚ê§at <tmp>:1‚ê§------> 0342 .7‚èè5&abs‚ê§¬ª

[18:28] <timotimo> m: class Bloop { method a($a) { $a¬≤ } }; my ($v1, $v2) = (1, 3)¬ª.&[Bloop.a($_)}

[18:28] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing infix inside []‚ê§at <tmp>:1‚ê§------> 3a) { $a¬≤ } }; my ($v1, $v2) = (1, 3)¬ª.&[7‚èè5Bloop.a($_)}‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§        infix‚ê§        infix ‚Ä¶¬ª

[18:28] <timotimo> m: class Bloop { method a($a) { $a¬≤ } }; my ($v1, $v2) = (1, 3)¬ª.&[Bloop.a($_)]

[18:28] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing infix inside []‚ê§at <tmp>:1‚ê§------> 3a) { $a¬≤ } }; my ($v1, $v2) = (1, 3)¬ª.&[7‚èè5Bloop.a($_)]‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§        infix‚ê§        infix ‚Ä¶¬ª

[18:28] <jnthn> ($v1, $v2) = ($obj.method($_) for 1, 3)

[18:28] <timotimo> m: class Bloop { method a($a) { $a¬≤ } }; my ($v1, $v2) = (1, 3)¬ª.&[{Bloop.a($_)}]

[18:28] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing infix inside []‚ê§at <tmp>:1‚ê§------> 3a) { $a¬≤ } }; my ($v1, $v2) = (1, 3)¬ª.&[7‚èè5{Bloop.a($_)}]‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§        infix‚ê§        infi‚Ä¶¬ª

[18:28] <timotimo> yeah the postfix for loop is surely the easiest

[18:29] <Xliff> MasterDuke++ # /o\.... yeah.. that works.

[18:30] <jmerelo> Xliff: but I thought you didn't like map for some reason. If you use map, you can also use the (badly named) feed operator ==> (I like rocket)

[18:31] <MasterDuke> m: sub a($b) { take $b }; my $c = a(1); dd $c # is there some reason take without gather couldn't just act like return?

[18:31] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´take without gather‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:32] <jmerelo> m: class Bloop { method a($a) { $a¬≤ } }; say (1,3) ==> map: Bloop.a( * )

[18:32] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3thod a($a) { $a¬≤ } }; say (1,3) ==> map:7‚èè5 Bloop.a( * )‚ê§    expecting any of:‚ê§        colon pair‚ê§¬ª

[18:32] <jmerelo> m: class Bloop { method a($a) { $a¬≤ } }; say (1,3) ==> map( { Bloop.a( $_ ) } )

[18:32] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(1 3)‚ê§¬ª

[18:33] <Xliff> m: class Bloop { method a($a) { $a¬≤ } }; my ($a, $b) <== map: Bloop.a( * ) <== (1, 3); ($a, $b).say

[18:33] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Only routine calls or variables that can '.push' may appear on either side of feed operators.‚ê§at <tmp>:1‚ê§------> 3class Bloop { method a($a) { $a¬≤ } }; 7‚èè5my ($a, $b) <== map: Bloop.a( * ) <==‚Ä¶¬ª

[18:33] <Xliff> m: class Bloop { method a($a) { $a¬≤ } }; my ($a, $b) = (1, 3).map: Bloop.a( * )

[18:33] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in method a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:33] <ugexe> feed operator is going to be slower for most use cases.

[18:33] <Xliff> m: class Bloop { method a($a) { $a¬≤ } }; my ($a, $b) = (1, 3).map( Bloop.a( * ) )

[18:33] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Cannot resolve caller Numeric(Whatever:D: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in method a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:34] <Xliff> m: class Bloop { method a($a) { $a¬≤ } }; my ($a, $b) = (1, 3).map({ Bloop.a( $_ ) })

[18:34] <camelia> rakudo-moar b2e72d6d7: ( no output )

[18:34] <ugexe> significantly slower is many cases even

[18:34] <Xliff> m: class Bloop { method a($a) { $a¬≤ } }; my ($a, $b) = (1, 3).map({ Bloop.a( $_ ) }); ($a, $b).say

[18:34] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´(1 9)‚ê§¬ª

[18:36] <moritz> sometimes I just love Python's easy way to get a bound method. With python, you could just map over Bloop.a

[18:38] *** netrino_ joined
[18:38] *** netrino left
[18:40] *** domidumont joined
[18:53] <nadim> evening, what's the difference between "class.new() but some_role " and "class.new() but some_role.new()"? 

[18:54] <nadim> In my dumper I see that the first object also does the role but the second one doesn't

[18:57] <ugexe> .new on a role creates a class

[19:02] <nadim> so what does "class.new but created_class" do? 

[19:04] <nadim> m: class C {} ; role R { has $.x} ; dd C.new() but R ; dd C.new but R.new/)

[19:04] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing required term after infix‚ê§at <tmp>:1‚ê§------> 3; dd C.new() but R ; dd C.new but R.new/7‚èè5)‚ê§    expecting any of:‚ê§        prefix‚ê§        term‚ê§¬ª

[19:04] <nadim> m: class C {} ; role R { has $.x} ; dd C.new() but R ; dd C.new but R.new()

[19:04] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´C+{R}.new(x => Any)‚ê§C+{<anon|1>}.new‚ê§¬ª

[19:05] <nadim> it's 'annon' that's making me curious 

[19:05] <ugexe> https://github.com/rakudo/rakudo/blob/b2e72d6d74fda202fa0fe1548cf904d839847862/src/core/operators.pm6#L65

[19:05] <ugexe> i dunno what its doing

[19:06] <ugexe> seems like it shold throw X::Mixin::NotComposable but isnt

[19:08] <nadim> shall I report this somewhere?

[19:09] *** jmerelo left
[19:10] <MasterDuke> m: my $a = 2 but Str; say $a.indent(3)

[19:10] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Cannot mix in non-composable type Str into object of type Int‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:10] <MasterDuke> m: my $a = 2 but Str.new; say $a.indent(3)

[19:10] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´No such method 'indent' for invocant of type 'Int+{<anon|1>}'. Did you mean any of these?‚ê§    index‚ê§    invert‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:10] <ugexe> probably. im failing to think of a reason the current behavior could be useful

[19:12] <nadim> I had no other to try than to see if it would generate an exception that I catch when dumping it but it simply worked!

[19:15] *** domidumont left
[19:16] *** antoniogamiz joined
[19:16] <antoniogamiz> mm should the result of use cmp always return true? O.o

[19:16] <antoniogamiz> m: if (1 cmp 2) {say 2;}

[19:16] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´2‚ê§¬ª

[19:16] <antoniogamiz> if (2 cmp 1) {say 2;}

[19:16] <evalable6> antoniogamiz, rakudo-moar b2e72d6d7: OUTPUT: ¬´2‚ê§¬ª

[19:17] <antoniogamiz> ah if they are equal it returns false, sorry 

[19:18] <MasterDuke> cmp returns an Order

[19:18] <MasterDuke> https://docs.perl6.org/type/Order

[19:19] <antoniogamiz> ty

[19:19] <MasterDuke> np

[19:28] <antoniogamiz> mmm methods throwing exceptions should be documented?

[19:28] <antoniogamiz> I mean:     say (1..2) cmp 3      # OUTPUT: ¬´Less‚ê§¬ª

[19:29] <antoniogamiz> ups, I meant https://github.com/rakudo/rakudo/blob/d904b7048bfaa8b7e1583baa1af0665f29c5b8c3/src/core/Range.pm6#L594

[19:39] *** vrurg left
[19:44] *** molaf left
[19:53] <Geth> ¬¶ doc: 0899a013fa | Antonio++ | doc/Type/Range.pod6

[19:53] <Geth> ¬¶ doc: document Range infixs #2739

[19:53] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/0899a013fa

[19:53] <Geth> ¬¶ doc: 2729ed3a47 | Antonio++ | doc/Type/Range.pod6

[19:53] <Geth> ¬¶ doc: document the rest of the methods, closes #2739

[19:53] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2729ed3a47

[19:53] <synopsebot> Link: https://doc.perl6.org/type/Range

[19:53] *** cpan-p6 left
[19:54] *** cpan-p6 joined
[19:54] *** cpan-p6 left
[19:54] *** cpan-p6 joined
[19:56] <Kaiepi> i never thought i'd ever need to use a supplier that emits more supplies

[19:56] <Kaiepi> but i found myself doing just that

[19:57] <Kaiepi> i'm adding support for receiving multiple binary transmissions over a single connection to Net::Telnet

[19:58] <Kaiepi> originally i had it so whenever binary data was received, it'd emit chunks received to a supplier, but that's not good enough for if multiple binary transmissions occur

[19:59] <Kaiepi> so now when a binary transmission starts i emit a supply to a supplier and emit chunks received to that supply's supplier

[20:03] *** Xliff left
[20:08] *** ufobat__ joined
[20:12] *** ufobat_ left
[20:13] *** Manifest0 left
[20:13] *** antoniogamiz left
[20:16] *** jaldhar left
[20:16] *** jaldhar joined
[20:19] *** Manifest0 joined
[20:34] *** zacts joined
[20:35] *** molaf joined
[20:44] *** Manifest0 left
[20:51] *** Manifest0 joined
[20:52] *** zacts left
[20:58] *** Manifest0 left
[21:03] *** Manifest0 joined
[21:03] *** pmurias left
[21:04] <cpan-p6> New module released to CPAN! FindBin::Dirs (0.1.0) by 03LEMBARK

[21:10] *** pmurias joined
[21:15] *** Manifest0 left
[21:21] *** Manifest0 joined
[21:25] *** zacts joined
[21:31] *** Manifest0 left
[21:38] *** Manifest0 joined
[21:49] *** zacts left
[21:52] *** pmurias left
[21:53] *** mowcat joined
[21:53] *** mowcat left
[21:54] *** mowcat joined
[21:59] *** Manifest0 left
[22:01] *** adu left
[22:02] *** zacts joined
[22:02] *** zacts left
[22:04] *** Manifest0 joined
[22:09] *** Manifest0 left
[22:15] *** Manifest0 joined
[22:20] *** Manifest0 left
[22:22] *** pecastro left
[22:26] *** Manifest0 joined
[22:31] *** Cabanossi left
[22:33] *** Cabanossi joined
[22:33] *** rindolf left
[22:42] *** netrino_ left
[22:42] *** mowcat left
[22:52] *** mowcat joined
[22:52] *** Manifest0 left
[22:57] *** mowcat left
[22:58] *** Manifest0 joined
[22:58] *** Yary joined
[22:59] <Geth> ¬¶ ecosystem: da2dee9246 | (Ben Davies)++ (committed using GitHub Web editor) | META.list

[22:59] <Geth> ¬¶ ecosystem: Add Net::Telnet to ecosystem

[22:59] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/da2dee9246

[22:59] <Kaiepi> \o/

[23:00] <Yary> m: sub MAIN(Int(IntStr) $value where $value ‚àà (1,2,4,8,16)) {say "\$value.perl = ",$value.perl }

[23:00] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> <value>‚ê§¬ª

[23:01] *** MasterDuke left
[23:02] *** nadim left
[23:05] <Yary> m: perl6 -e 'BEGIN @*ARGS=IntStr.new(4,"4"),;sub MAIN(Int(IntStr) $value where $value ‚àà (1,2,4,8,16)) {say "\$value.perl = ",$value.perl }'

[23:05] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3perl6 -e7‚èè5 'BEGIN @*ARGS=IntStr.new(4,"4"),;sub MA‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement‚Ä¶¬ª

[23:05] *** mowcat joined
[23:05] <Yary> m: BEGIN @*ARGS=IntStr.new(4,"4"),;sub MAIN(Int(IntStr) $value where $value ‚àà (1,2,4,8,16)) {say "\$value.perl = ",$value.perl }

[23:05] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> <value>‚ê§¬ª

[23:06] <cpan-p6> New module released to CPAN! Net::Telnet (0.0.1) by 03KAIEPI

[23:09] <Yary> m: BEGIN @*ARGS=<4>;sub MAIN(Int(IntStr) $value where $value ‚àà <1 2 4 8 16>) {say "\$value.perl = ",$value.perl }

[23:09] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´$value.perl = IntStr.new(4, "4")‚ê§¬ª

[23:09] *** veesh left
[23:09] *** zacts joined
[23:11] <Kaiepi> m: Begin @*ARGS=<1,2,3,4>; sub MAIN(Int @foo) { .say for @foo }

[23:11] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    Begin used at line 1‚ê§‚ê§¬ª

[23:11] <Kaiepi> m: BEGIN @*ARGS=<1,2,3,4>; sub MAIN(Int @foo) { .say for @foo }

[23:11] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> <foo>‚ê§¬ª

[23:12] <Yary> - looks like recent Rakudo has better MAIN error than 6.c, I had seen messages like "Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)   in block <unit> at main.p6 line 1" which is now showing as the better "Usage:‚ê§  <tmp> <value>‚ê§"

[23:12] <Kaiepi> m: BEGIN @*ARGS=<1 2 3 4>; sub MAIN(*@foo) { .say for @foo }

[23:12] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§¬ª

[23:13] <Yary> m: BEGIN @*ARGS=<1 2 3 4>; sub MAIN(*@foo) { .perl.say for @foo }

[23:13] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´IntStr.new(1, "1")‚ê§IntStr.new(2, "2")‚ê§IntStr.new(3, "3")‚ê§IntStr.new(4, "4")‚ê§¬ª

[23:13] <Kaiepi> m: BEGIN @*ARGS=<--a=1 --a=2 --a=3>; sub MAIN(Int :@a) { .say for @a }

[23:13] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> [-a=<Any> ...]‚ê§¬ª

[23:13] <Kaiepi> m: BEGIN @*ARGS=<-a=1 -a=2 -a=3>; sub MAIN(Int :@a) { .say for @a }

[23:13] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> [-a=<Any> ...]‚ê§¬ª

[23:14] <Yary> m: BEGIN @*ARGS=<-a=1 -a=2 -a=3>; sub MAIN(:@a) { .say for @a }

[23:14] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[23:14] <Yary> m: BEGIN @*ARGS=<-a=1 -a=2 -a=3>; sub MAIN(:@a) { .perl.say for @a }

[23:14] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´IntStr.new(1, "1")‚ê§IntStr.new(2, "2")‚ê§IntStr.new(3, "3")‚ê§¬ª

[23:17] <Yary> m: BEGIN @*ARGS=<--a=1 --a=2 --a=3>; sub MAIN(Array[Int] :@a) { .perl.say for @a }

[23:17] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> [-a=<Any> ...]‚ê§¬ª

[23:17] <Yary> m: BEGIN @*ARGS=<--a=1 --a=2 --a=3>; sub MAIN(Array[IntStr] :@a) { .perl.say for @a }

[23:17] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> [-a=<Any> ...]‚ê§¬ª

[23:20] *** veesh joined
[23:23] <Yary> m: BEGIN @*ARGS=<--a=1 --a=2 --a=3>; sub MAIN(:@a where {.all ~~ Int}) { .perl.say for @a }

[23:23] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´IntStr.new(1, "1")‚ê§IntStr.new(2, "2")‚ê§IntStr.new(3, "3")‚ê§¬ª

[23:23] <Yary> m: BEGIN @*ARGS=<--a=1 --a=2 --a=foo>; sub MAIN(:@a where {.all ~~ Int}) { .perl.say for @a }

[23:23] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> [-a=<Positional where { ... }> ...]‚ê§¬ª

[23:27] *** reach_satori_ joined
[23:27] *** reach_satori left
[23:28] <timotimo> Yary: Int(IntStr) will not coerce because IntStr is already an Int; coercions will only fire if the type doesn't match, like with Array and Hash for example

[23:30] *** zacts left
[23:32] <Yary> Thanks for the coercion explanation, I'll follow up in the email thread I started on it. This MAIN issue that Kaiepi hinted at is prompting me to file an issue on constraining its slurpy args

[23:39] *** sena_kun left
[23:45] *** zacts joined
[23:50] *** Manifest0 left
[23:51] <Yary> m: BEGIN @*ARGS=<4>;sub MAIN(Int $value is rw where ($value += 0) ‚àà (1,2,4,8,16)) {say "\$value.perl = ",$value.perl }

[23:51] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> <value>‚ê§¬ª

[23:52] *** MasterDuke joined
[23:52] *** MasterDuke left
[23:52] *** MasterDuke joined
[23:52] <Yary> m: BEGIN @*ARGS=<4>;sub MAIN(Int $value is rw where Int($value) ‚àà (1,2,4,8,16)) {say "\$value.perl = ",$value.perl }

[23:52] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´Usage:‚ê§  <tmp> <value>‚ê§¬ª

[23:52] <Yary> m: BEGIN @*ARGS=<4>;sub MAIN(Int $value where Int($value) ‚àà (1,2,4,8,16)) {say "\$value.perl = ",$value.perl }

[23:52] <camelia> rakudo-moar b2e72d6d7: OUTPUT: ¬´$value.perl = IntStr.new(4, "4")‚ê§¬ª

[23:53] <Yary> Hmm, the "is rw" version doesn't match, but removing "is rw" allows matching. Why would that be?

[23:54] *** zacts left
[23:54] *** espadrine_ left
