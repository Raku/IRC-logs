[00:01] *** tellable6 joined
[00:10] <SmokeMachine> vrurg: who can vote on the extensions?

[00:11] <vrurg> SmokeMachine: anyone, unless AlexDaniel decides otherwise. 

[00:12] <SmokeMachine> So I’m voting... if I can’t, please let me know that I remove my vote...

[00:12] <vrurg> It's not a decissive vote, it would have only recomendational power.

[00:13] <vrurg> SmokeMachine++

[00:14] <SmokeMachine> Yes, yes...

[00:19] *** leont left
[00:25] <Xliff> Extensions? 

[00:28] *** Kaiepi left
[00:32] <guifa> Xliff: for file names (currently .p6, .pm6, .pod6, .t(6))

[00:32] *** Kaiepi joined
[00:33] *** nekomune joined
[00:35] <AlexDaniel> yeah, I think anyone can react with a thumbs up emoji :)

[00:35] <vrurg> Xliff: https://github.com/perl6/problem-solving/issues/106

[00:36] <AlexDaniel> though there's no guarantee that jnthn will go with the result that has most votes

[00:37] <AlexDaniel> I mean, with the option

[00:47] *** p9s joined
[00:48] <AlexDaniel> also: hello world

[00:48] <AlexDaniel> .tell also test test

[00:48] <tellable6> AlexDaniel, I haven't seen also around, did you mean nals?

[00:52] *** lucasb left
[00:52] *** p9s left
[01:23] *** Kaiepi left
[01:23] *** Kaiepi joined
[01:24] *** Guest13777 left
[01:24] *** success joined
[01:25] *** success is now known as Guest49790

[01:25] *** wildtrees left
[01:34] *** Doc_Holliwood left
[01:37] *** molaf left
[01:43] *** Sgeo_ joined
[01:46] *** Sgeo left
[01:50] *** molaf joined
[02:04] *** Sgeo_ left
[02:06] *** Sgeo joined
[02:06] *** Cabanossi left
[02:15] *** Cabanossi joined
[02:18] *** Seance[m] left
[02:18] *** folex left
[02:18] *** Matthew[m] left
[02:18] *** matiaslina left
[02:18] *** lance_w[m] left
[02:19] *** roy[m] left
[02:19] *** uzl[m] left
[02:19] *** AlexDaniel` left
[02:19] *** mack[m]1 left
[02:19] *** rba[m] left
[02:19] *** xliff[m] left
[02:19] *** TravisRt2botio[m left
[02:19] *** unclechu left
[02:19] *** EuAndreh[m] left
[02:19] *** sergiotarxz[m] left
[02:19] *** Guest53157 left
[02:19] *** aearnus[m] left
[02:19] *** Demos[m] left
[02:19] *** BlackChaosNL[m] left
[02:25] *** AlexDaniel` joined
[02:36] *** p9s joined
[02:38] *** BlackChaosNL[m] joined
[02:38] *** EuAndreh[m] joined
[02:38] *** Matthew[m] joined
[02:38] *** Demos[m] joined
[02:38] *** TravisRt2botio[m joined
[02:38] *** sergiotarxz[m] joined
[02:38] *** lance_w[m] joined
[02:38] *** Guest19607 joined
[02:38] *** rba[m] joined
[02:38] *** unclechu joined
[02:38] *** roy[m] joined
[02:38] *** aearnus[m] joined
[02:38] *** folex joined
[02:38] *** xliff[m] joined
[02:38] *** Seance[m] joined
[02:38] *** matiaslina joined
[02:38] *** mack[m]1 joined
[02:38] *** uzl[m] joined
[02:41] *** Guest49790 left
[02:41] *** p9s left
[02:41] *** success joined
[02:41] *** success is now known as Guest33122

[02:47] *** p9s joined
[02:50] *** rba[m] left
[02:50] *** Demos[m] left
[02:50] *** Guest19607 left
[02:50] *** domm left
[02:50] *** spacedbat left
[02:50] *** Hotbees left
[02:50] *** ChoppedBacon left
[02:50] *** tbrowder left
[02:50] *** mtj left
[02:50] *** Bucciarati left
[02:51] *** Demos[m] joined
[02:51] *** rba[m] joined
[02:51] *** Guest19607 joined
[02:51] *** p9s left
[02:53] *** khisanth_ left
[02:56] *** domm joined
[02:56] *** spacedbat joined
[02:56] *** Hotbees joined
[02:56] *** ChoppedBacon joined
[02:56] *** tbrowder joined
[02:56] *** mtj joined
[02:56] *** Bucciarati joined
[03:05] *** Actualeyes joined
[03:06] *** squashable6 left
[03:07] *** p9s joined
[03:08] *** squashable6 joined
[03:12] *** khisanth_ joined
[03:18] *** domm left
[03:18] *** spacedbat left
[03:18] *** Hotbees left
[03:18] *** ChoppedBacon left
[03:18] *** tbrowder left
[03:18] *** mtj left
[03:18] *** Bucciarati left
[03:21] *** p9s left
[03:24] *** domm joined
[03:24] *** spacedbat joined
[03:24] *** Hotbees joined
[03:24] *** ChoppedBacon joined
[03:24] *** tbrowder joined
[03:24] *** mtj joined
[03:24] *** Bucciarati joined
[03:24] *** Xliff left
[03:31] *** mtdms left
[03:33] *** cwilson left
[03:34] *** cwilson joined
[04:05] <holyghost> I've finished the statistical chaos theory book, if I comprehended noise in a stochastical dynamic system has Fermi-Dirac statistics

[04:06] *** sno left
[04:06] <holyghost> I can write a program for it e.g. to calculate noise in a ANN

[04:08] <holyghost> it is however just a few functors for calculating noise with properties

[04:08] <holyghost> So I am not going to do that

[04:09] <holyghost> Next, I will work some more on my cell systems, maybe noise included

[04:12] <holyghost> The noise function can also be used to trace in orbitals (of molecules)

[04:13] <holyghost> I can use that in the cell system's base system with elementary particles

[04:13] <holyghost> Hence the Fermi-Dirac statistics

[05:04] *** Cabanossi left
[05:18] *** Cabanossi joined
[05:28] *** Sgeo_ joined
[05:28] *** reach_satori left
[05:30] *** Sgeo left
[05:57] *** domidumont joined
[05:59] *** sauvin joined
[06:06] *** molaf left
[06:17] *** mtdms joined
[06:20] *** mtdms left
[06:31] *** reach_satori joined
[06:33] *** wamba joined
[07:21] *** sena_kun joined
[07:26] *** leont joined
[07:27] *** Cabanossi left
[07:32] *** Cabanossi joined
[07:36] *** scimon joined
[07:37] *** dakkar joined
[07:38] *** leont left
[07:46] <xinming_> SmokeMachine: Why do you use the my $*RED-DB to indicate the different database?  If an app wants to have 2 connections to the different database with same schema. Do we need to execute 'my $*RED-DB = xxx'  before each database connection?

[07:46] <xinming_> I just don't get it the design purpose.

[07:50] *** Ven_de_Thiel left
[07:51] *** kensanata joined
[07:51] <sena_kun> xinming_, it is an old API which will be likely replaced with red-do blocks, see https://github.com/FCO/Red/issues/153

[07:53] <SmokeMachine> xinming_: you can set different  $*RED-DB for different blocks... but you can also use `red-do` https://github.com/FCO/Red/blob/master/t/22-red-do.t

[07:54] <SmokeMachine> xinming_: Yes! that what sent_kun said!

[07:57] <xinming_> What if we need 2 connections for different host?

[07:57] <xinming_> We'll have to nest the red-do?

[07:59] <xinming_> I'd really like that we can have the $schema object just like DBIC does, instead of using the global $*RED-DB thing in this case.

[08:00] <xinming_> Maybe something like,  %RED-DB<a b c d>;       red-do<b c d> -> $b, $c, $d { .... }    is also acceptable.

[08:00] <SmokeMachine> xinming_: you can do something like: `red-do host1 => { ... }, host2 => { ... }, host1 => { ... };`

[08:01] <xinming_> SmokeMachine: What if we want host1 and host2 needs to interchange data?

[08:02] <xinming_> But the red-do<b c d> -> ... { }    still uses the $schema object like thing.

[08:02] <SmokeMachine> xinming_: `red-do host1 => { my $data; red-do host2 => { $data = ... }; use $data }`

[08:03] <SmokeMachine> xinming_: but I agree we can find a better way for doing it...

[08:04] <SmokeMachine> xinming_: the problem with `red-do<b c d> -> $b, $c, $d { .... }` is that we do not use $b, $c, $d as variables in Red, as we usually don't use $*RED-DB directly...

[08:05] <xinming_> Yea, I don't like the global $*RED-DB var design.

[08:06] <SmokeMachine> xinming_: you can also do: `my $a = database ...; my $b = database ...; my $*RED-DB = $a; my $data = do { my $RED-DB = $b; ...; $data }`

[08:06] <SmokeMachine> xinming_: $*RED-DB isn't global...

[08:07] <xinming_> SmokeMachine: The problem with this design is, whenever we use the database, We'll need to set $RED-DB

[08:08] <scimon> I think you need to bear in mind the general use case. Most people using an ORM don't need multiple db connections. So you need to jump through some hoops. 

[08:08] <xinming_> Actually, I don't know why this design is implemented in first place. :-)

[08:08] <SmokeMachine> xinming_: if red-do return data (that would make sense), you could: `my $data = red-do host1 => { ... }; red-do host2 => { use $data }`

[08:09] <xinming_> scimon: It's a bit unnatural to me to use it like this.

[08:09] <SmokeMachine> xinming_: how would you do that?

[08:11] <xinming_> I personally like   $db1.^find(xxx);   $db1.^model('Person').delete;     so, this way,  We can use something like,   my $rw-db = get-db('writer');    my $ro-db = get-db('reader');

[08:12] <xinming_> I personally like to think the database as an object, instead we initialize the $RED-DB before doing things.

[08:14] <xinming_> red-do thing makes me think of use of cro. In cro, that works. But in db access, this makes me feel unnatural, Maybe I don't get used to it yet.

[08:14] <SmokeMachine> xinming_: if you want use different databases to read and write, just for it, it's planned to `database :rw(Pg => (:host<host1>)), :ro("SQLite")`

[08:15] *** Itaipu left
[08:15] *** Itaipu joined
[08:15] <xinming_> SmokeMachine: I don't only mean the different db read/write, what I mean is, the get-db() function can return a "thing" that we can easily use.

[08:15] <SmokeMachine> xinming_: or something like that...

[08:19] <sena_kun> what about adding the db object as an optional argument to model methods? E.g. Person.^create($db, ...) and Person.^create(...) are easy to distinguish. Though I haven't looked at the sources to check if that's a sane option. Then you can `my $a = database ...; Person.^all($a)` and it isn't tied to dynamic variable.

[08:20] <xinming_> Also acceptable.

[08:20] <SmokeMachine> xinming_: maybe we could to something like: `Model.^load: 42, :$db`, `Model.^all.grep: { .col = 42 }, :$db`, etc...

[08:20] <xinming_> What I thought that maybe we create a wrapper something like that.

[08:21] <xinming_> and everytime we call the method on that object, It'll auto set the $RED-DB before calling any method in that class.

[08:21] <sena_kun> SmokeMachine, that's a bad idea, because e.g. `Model.^create: foo => 42, :$db`. <- is this `$db` a part of the model or not? if yes, how to specify db?

[08:21] <SmokeMachine> sena_kun: yes! something like that... that methods could just set $*RED-DB...

[08:22] *** wamba left
[08:23] <sena_kun> it just takes a new call candidate for every model method that'll be setting the variable and call the other candidate.

[08:24] *** Itaipu left
[08:24] <SmokeMachine> sena_kun: I was thinking on something like (idk if it works): `method create(:$*RED-DB = $*RED-DB, *%pars) {...}`

[08:24] *** Itaipu joined
[08:25] <SmokeMachine> sena_kun: I agree with you that's a bad idea... but I don't like that much the positional parameter...

[08:26] <sena_kun> hm.... you can argue it both ways, I think. I just think that having it as first possible argument immediately gives you knowledge where the transaction goes, while having it at the end of an arbitrary length call is kind of harder to grasp. I don't know if that's worth anything, of course.

[08:27] <sena_kun> like `$a($db, $a, $b, $c, $d)` and `$b($db, $f, $g)` are pretty structured, while `$a($a, $b, $c, $d, $db)` and `$a($f, $g, $db)` are not, especially if they are not a single letter variables.

[08:28] <sena_kun> because people might write boilerplate like username => $user.username, email => $user.email and so on.

[08:35] <SmokeMachine> sena_kun: yes, makes sense...

[08:37] <SmokeMachine> sena_kun: but still for me, the database that command is using seems for me as an adverb...

[08:47] *** vike left
[08:51] *** kensanata left
[08:53] <SmokeMachine> `sub using-db($*RED-DB, &block) { block $*RED-DB }

[08:53] <SmokeMachine> `sub using-db($*RED-DB, &block) { block $*RED-DB }`

[08:53] <SmokeMachine> this could be the solution as well...

[08:54] <SmokeMachine> sena_kun, xinming_ ^^

[08:55] <sena_kun> `sub using-db($db = $*RED-DB, &block) { block}`?

[08:56] <sena_kun> more like `sub using-db($db = $*RED-DB, &block) { $*RED-DB = $db; block() }`

[08:58] <SmokeMachine> sena_kun: could be... but passing $*RED-DB as first argument would make it possible to: `using-db $db, { .execute: "create table ..." }`

[08:58] *** vike joined
[08:58] <SmokeMachine> why not using the dynvar on the signature?

[08:59] <sena_kun> aren't users suggested to use model API, not calling stuff like .execute? I mean, it is more like edge case to me than a common one

[08:59] <SmokeMachine> m: sub bla { say $*v }; sub ble($*v) { bla }; ble 42

[08:59] <camelia> rakudo-moar 17d036ad4: OUTPUT: «42␤»

[08:59] *** wamba joined
[08:59] <sena_kun> ah

[08:59] <sena_kun> well, either way makes sense

[09:00] <SmokeMachine> sena_kun: I know at least 1 user that keep using `.execute`... I'm not sure if I should incentive it or not...

[09:00] <sena_kun> well, the API is useful for edge cases, no problem here

[09:01] <sena_kun> I meant that having it as $_ will not help much for calls like Model.^create, but I see now it doesn't matter much

[09:04] <SmokeMachine> sena_kun: yes, I think there is nothing outside the block that should be passed as argument that wouldn't be better to be used as a simple variable...

[09:04] <SmokeMachine> sena_kun: so we can use $_ to pass something internal that could be useful...

[09:06] <SmokeMachine> sena_kun, xinming_: but what do you guys prefer? the $db on every method or a simple using-db?

[09:06] <SmokeMachine> scimon: ^^

[09:11] <SmokeMachine> using-db $db, *.execute: "create table ..."

[09:13] <scimon> I think using-db: 

[09:14] <scimon> Like I say. Generally it's going to be the exception not the rule. 

[09:14] <scimon> IMO

[09:19] *** ravenousmoose joined
[09:25] *** dwarring left
[09:27] *** HarmtH joined
[09:27] *** zakharyas joined
[09:34] *** Doc_Holliwood joined
[09:51] <SmokeMachine> scimon: I agree...

[09:51] <SmokeMachine> vrurg: what do you think about that? ^^

[09:59] *** MilkmanDan left
[09:59] *** MilkmanDan joined
[10:03] *** Sgeo__ joined
[10:06] *** Sgeo_ left
[10:08] *** reach_satori left
[10:24] *** aborazmeh joined
[10:24] *** aborazmeh left
[10:24] *** aborazmeh joined
[10:25] *** sftp left
[10:29] *** sftp joined
[10:29] *** sena_kun left
[10:32] <SmokeMachine> xinming_: would you mind to open a issue about the using-db, please?

[10:33] *** pat_js joined
[10:44] *** kensanata joined
[10:59] *** Black_Ribbon left
[11:22] *** kensanata left
[11:47] *** kensanata joined
[12:09] *** sena_kun joined
[12:12] *** sena_kun left
[12:19] *** sena_kun joined
[12:24] *** sena_kun left
[12:29] *** sena_kun joined
[12:30] *** sena_kun left
[12:39] *** molaf joined
[12:42] *** pat_js left
[12:48] *** squashable6 left
[12:51] *** pmurias joined
[12:51] <pmurias> what's the recommended way of feeding large constant strings into EVAL?

[12:51] <pmurias> in this case when evalling chunks of JavaScript

[12:53] *** squashable6 joined
[12:53] *** ChanServ sets mode: +v squashable6

[12:55] <pmurias> I'm using heredocs but that requires a use MONKEY-SEE-NO-EVAL

[13:05] <moritz> so use MONKEY-SEE-NO-EVAL

[13:17] <AlexDaniel> pmurias: there's also EVALFILE

[13:17] <AlexDaniel> although that probably doesn't help you at all :)

[13:19] <vrurg> SmokeMachine: I'm out of context and can't really read through the discussion now. If you get an issue with the proposal I'd check it out.

[13:19] *** lucasb joined
[13:19] <tellable6> 2019-09-17T08:28:45Z #moarvm <lizmat> vrurg I have

[13:19] <vrurg> SmokeMachine: for the moment I'm not sure what's the reason?

[13:22] <SmokeMachine> vrurg: the reason is to make it simple to use Red with more than one database at the same time...

[13:23] <vrurg> SmokeMachine: still, would be nice to see the proposal. But a way to do so is needed, no doubt.

[13:24] *** p9s joined
[13:25] *** AlexDaniel is now known as messagestoi

[13:25] *** messagestoi is now known as AlexDaniel

[13:25] *** aborazmeh left
[13:26] <SmokeMachine> vrurg: first option: add a new candidate to Avery method waiting a database driver object, and that would set the $*RED-DB and call the original one

[13:26] <SmokeMachine> second: add a :$&RED-DB to the signature of every method

[13:26] <SmokeMachine> third: `sub using-db($*RED-DB, &block) { block $*RED-DB }`

[13:29] <vrurg> SmokeMachine: using-db is the best, no doubt. I think with-db sounds better, but that's minor.

[13:30] <SmokeMachine> vrurg: yes, makes sense: with-db... I liked it!

[13:30] <scimon> Yup

[13:31] <SmokeMachine> if the obj is not defined, should I just ignore the block? as the `with`?

[13:33] <AlexDaniel> Geth: help

[13:33] <Geth> AlexDaniel, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to http://hack.p6c.org:8888/?chan=#perl6 and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[13:34] <vrurg> SmokeMachine: not sure what you mean (sorry, have to do main work now). But if you make with-db multi-sig then it makes sense replacing red-do with with-db: with-db $db, { ... }; with-db { ... } – default 

[13:34] <SmokeMachine> ```sub with-db($*RED-DB, &block) { .&block with $*RED-DB }``` ???

[13:35] <vrurg> SmokeMachine: I can't really focus now. I'd better get back later.

[13:35] <SmokeMachine> vrurg: ok, np... thanks!

[13:39] *** cpan-p6 left
[13:39] *** cpan-p6 joined
[13:39] *** cpan-p6 left
[13:39] *** cpan-p6 joined
[13:40] <SmokeMachine> with-db looks alot red-do... maybe both should be the same... and we should decide the best name for it... https://github.com/FCO/Red/blob/master/lib/Red/Do.pm6#L68

[13:45] <vrurg> SmokeMachine: BTW, red-do :db($other-db), { ... } or red-do $other-db, { ... }

[13:46] <SmokeMachine> vrurg: yes... I think it would be better mantain the `red-do` and add this candidate...

[13:50] <SmokeMachine> but we don't realy need that... we could just: `red-defaults db1 => database ..., db2 => database ...; my $a = red-do "db1", { ... }; red-do "db2", { do something with $a }`

[13:51] <SmokeMachine> sorry:

[13:51] *** p9s left
[13:52] <SmokeMachine> ```red-defaults db1 => database ..., db2 => database ...; my $a = red-do :use<db1>, { ... }; red-do :use<db2>, { do something with $a }```

[13:53] <pmurias> moritz: feel wrong to use that pragma just because of a rakudo bug

[13:54] *** isBEKaml joined
[13:56] *** zakharyas left
[13:57] *** sena_kun joined
[14:00] <MasterDuke> pmurias: any objection to me trying to rebase npq's truffle branch up to master's HEAD?

[14:02] *** pmurias left
[14:03] *** cpage_ joined
[14:04] *** pmurias joined
[14:06] *** cpage left
[14:06] *** cpage_ is now known as cpage

[14:07] <SmokeMachine> just kidding: raku.do, raku.dolib, raku.dodoc, raku.dotest / raku.do, raku.dol, raku.dod, raku.dot

[14:09] <timotimo> raku.club premium

[14:09] <SmokeMachine> I thought of .ku, but the meaning of that in portuguese would not be very good...

[14:09] <timotimo> $349.99*

[14:11] *** nepugia joined
[14:12] <SmokeMachine> red-defaultsdb1 => database ..., db2 => database ...; my $a = red-do :use<db1>, { ... }; red-do :use<db2>, { do something with $a }

[14:13] <SmokeMachine> sorry...

[14:16] <SmokeMachine> xinming_: would that be ok for you? https://www.irccloud.com/pastebin/466lwR2g/

[14:21] <pmurias> MasterDuke: none, go for it

[14:22] <MasterDuke> pmurias: cool. i'm not going to make any promises, but i'll give it a try

[14:23] <vrurg> SmokeMachine: red-do :with<db2> { ... }

[14:24] <vrurg> SmokeMachine: or red-do db2 => { ... }

[14:24] <SmokeMachine> vrurg: but `red-do db2 => { ... }`would return an array...

[14:25] <SmokeMachine> (if add a `do` at the beginning) https://github.com/FCO/Red/blob/master/lib/Red/Do.pm6#L78

[14:28] <vrurg> m: sub foo ( *%named ) { say %named }; foo db => { say "Ok" }

[14:28] <camelia> rakudo-moar 17d036ad4: OUTPUT: «{db => -> ;; $_? is raw { #`(Block|60037944) ... }}␤»

[14:28] <vrurg> SmokeMachine: ^

[14:28] <SmokeMachine> vrurg: that way you loose the order...

[14:28] <vrurg> SmokeMachine: it makes possible paralellizing of bodies on different databases: red-do db1 => { ... }, db2 => { ... }

[14:29] <vrurg> SmokeMachine: sure, but one not always require it. Plus, see my previous comment. :) 

[14:29] <SmokeMachine> it is possible to run that way now, but it respects the order you added...

[14:30] <vrurg> Besides, you could have variants. red-do with a positional block parameter would require :with or :use, all named – the above semantics.

[14:31] <SmokeMachine> vrurg: https://github.com/FCO/Red/blob/master/t/22-red-do.t#L38

[14:31] <vrurg> m: sub foo ( *%n ) { .say for %n.key }; foo( db1 => 1, db2 => 2, db3 => 3, db4 => 4)

[14:31] <camelia> rakudo-moar 17d036ad4: OUTPUT: «No such method 'key' for invocant of type 'Hash'. Did you mean 'keys'?␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:31] <vrurg> m: sub foo ( *%n ) { .say for %n.keys }; foo( db1 => 1, db2 => 2, db3 => 3, db4 => 4)

[14:31] <camelia> rakudo-moar 17d036ad4: OUTPUT: «db2␤db1␤db4␤db3␤»

[14:32] <SmokeMachine> m: sub foo ( *@n ) { .say for @n }; foo( "db1" => 1, "db2" => 2, "db3" => 3, "db4" => 4)

[14:32] <camelia> rakudo-moar 17d036ad4: OUTPUT: «db1 => 1␤db2 => 2␤db3 => 3␤db4 => 4␤»

[14:34] <SmokeMachine> `red-db :parallel` and `red-db :serial` ?

[14:35] <vrurg> Ah, you mean this. Ok. :) Implementing red-do :with(db) would require breaking backward compat now, isn't it?

[14:35] <SmokeMachine> `red-db ({...}, db1 => {...}, {...}).race` ?

[14:36] <vrurg> SmokeMachine: :async is shorter and :serial is to be the default. 

[14:36] <SmokeMachine> vrurg: yes... but, at least it was still experimental...

[14:37] <vrurg> SmokeMachine: I have to go now. It's interesting subject, worth an issue to consider all details.

[14:37] <SmokeMachine> vrurg: yes, I agree!

[14:45] *** xq joined
[14:57] *** AlexDaniel left
[14:57] *** AlexDaniel joined
[14:58] *** AlexDaniel left
[14:58] *** pmurias left
[14:58] *** AlexDaniel joined
[14:58] *** AlexDaniel left
[14:58] *** AlexDaniel joined
[15:00] *** ft4l joined
[15:01] <lucasb> tyil: hello. are you the one responsible for Geth? I added a new channel to its config.json. Is a 'git pull' enough to make it join the new channel?

[15:02] <tyil> I am currently hosting it, I'll need to git pull it and build a new docker image

[15:02] <guifa> Ugh, Comma hung on me, and after I forced quit, it won’t launch anymore. 

[15:03] <guifa> jnthn: sadly console output isn’t giving me much of anything I could send you, have you seen this problem before, though?  (launch and immediately exists of its own volition, it seems)

[15:03] *** AlexDaniel left
[15:04] <jnthn> guifa: No, never seen (or heard reported) that one

[15:04] <jnthn> guifa: Though it does maybe have an "am I already running" check, so check it's not somewhere in the process list (and send it a kill if so)

[15:05] *** AlexDaniel joined
[15:05] *** AlexDaniel left
[15:05] *** AlexDaniel joined
[15:07] <guifa> Err okay I’m going to go put my dunce hat on.  Last night I tried deleting the app support folder and rebooting, but forgot totally about prefs folder

[15:08] <guifa> Lemme see if I can recreate by replacing the old prefs folder. 

[15:11] *** AlexDani` joined
[15:11] <guifa> Bingo.  Can consistently cause it by putting in this particular preferences folder, when I take it away, and it creates preferences from scratch, launches no problem.  I don’t have any sensitive information in it, so I can zip it up and send it to you if you’d like (I’ve tried playing around to see which file is toxic to the launch process but haven’t figured it out just yet)

[15:12] *** Geth left
[15:12] *** Geth joined
[15:13] *** AlexDaniel left
[15:18] *** isBEKaml left
[15:20] *** APic joined
[15:21] *** domidumont left
[15:23] *** Geth left
[15:23] *** Geth joined
[15:25] *** APic left
[15:36] <[Coke]> .seen finanalyst

[15:36] <tellable6> [Coke], I saw finanalyst 2019-08-26T10:02:26Z in #perl6: <finanalyst> jjmerelo: hi. 

[15:37] *** Ven_de_Thiel joined
[15:37] <[Coke]> .tell finanalyst Sent you several emails, looks like you missed the first one, check your spam filter?

[15:37] <tellable6> [Coke], I'll pass your message to finanalyst

[15:44] *** MilkmanDan left
[15:46] *** MilkmanDan joined
[15:49] *** pat_js joined
[15:51] *** mowcat left
[16:02] *** ft4l left
[16:04] *** kensanata left
[16:13] <SmokeMachine> vrurg xinming_ sena_kun scimon: https://github.com/FCO/Red/issues/400

[16:15] <scimon> Neat :)

[16:26] *** scimon left
[16:30] *** AlexDani` is now known as AlexDaniel

[16:30] *** AlexDaniel left
[16:30] *** AlexDaniel joined
[16:30] *** dakkar left
[16:51] *** p9s joined
[16:55] *** leont joined
[16:56] *** p9s left
[17:07] *** molaf left
[17:09] *** pat_js left
[17:10] *** natrys joined
[17:10] *** robertle joined
[17:17] *** wildtrees joined
[17:26] *** APic joined
[17:30] *** Poohman joined
[17:31] <Poohman> hello all, do we have something in perl6 like type providers in F#

[17:31] *** Doc_Holliwood left
[17:32] *** Doc_Holliwood joined
[17:34] <moritz> what's that?

[17:36] <Poohman> using these type providers it is possible to create types in F# using excel tables (headers/labels), Json files, SQL etc

[17:37] <tadzik> oh, you can write those no problem :)

[17:37] <Poohman> using one statement it eliminates all boilerplate and directly creates the type which is then available in Visual Studio using Intellisense etc

[17:39] <Poohman> but this is then somehow used in compile time

[17:39] <jnthn> Sounds like what ASN::META does

[17:42] *** Poohmaan joined
[17:43] <Poohmaan> tadzik: cool, pull something from excel tables generated from SAP tables??

[17:43] *** Poohman left
[17:44] <Poohmaan> tadzik: will that be trivial or will need to invest sometime?

[17:46] <Poohmaan> I was wondering if RED did something like that - but I think it is only for databases

[17:52] *** ravenous_ joined
[18:00] *** pmurias joined
[18:01] *** sno joined
[18:08] *** MasterDuke left
[18:12] *** wamba left
[18:19] *** MasterDuke joined
[18:20] *** ravenou__ joined
[18:23] *** ravenous_ left
[18:26] *** sauvin left
[18:28] *** cwilson left
[18:33] <sena_kun> sounds like what ASN::META does. :) I think you need to invest the time, though, to support exact descriptions you need to support

[18:34] *** aborazmeh joined
[18:34] *** aborazmeh left
[18:34] *** aborazmeh joined
[18:39] <sena_kun> >More formally, type providers are a form of compile time meta-programming.

[18:39] <sena_kun> hmmmmm...

[18:44] *** AlexDaniel left
[18:45] *** AlexDaniel joined
[18:45] *** AlexDaniel left
[18:45] *** AlexDaniel joined
[18:50] *** Guest33122 left
[18:55] *** aborazmeh left
[18:58] *** mowcat joined
[19:03] *** success joined
[19:03] *** success is now known as Guest27953

[19:04] *** Ven_de_Thiel left
[19:12] *** Itaipu left
[19:13] *** pmurias left
[19:14] *** squashable6 left
[19:15] *** squashable6 joined
[19:15] *** ChanServ sets mode: +v squashable6

[19:17] *** wamba joined
[19:18] *** Guest27953 left
[19:21] *** pmurias joined
[19:22] <[Coke]> .seen jmerelo

[19:22] <tellable6> [Coke], I saw jmerelo 2019-09-12T16:09:23Z in #perl6: <jmerelo> antoniogamiz: :-)

[19:27] <tadzik> Poohmaan: well, you need to do the excel part yourself I suppose

[19:27] <tadzik> but creating the types themselves in code is mostly trivial

[19:27] <pmurias> MasterDuke: I haven't touched nqp-truffle code in a while but if you need help with anything I'll try to help with that

[19:28] *** wamba left
[19:28] *** wamba joined
[19:28] <MasterDuke> pmurias: i've got the rebase up to the significant changes in the build system

[19:29] <MasterDuke> and thought i'd addressed the first conflict in Configure.pl

[19:29] <MasterDuke> and it started building, but now the compilation itself is errorring out

[19:30] <MasterDuke> pmurias: what's happening right now https://gist.github.com/MasterDuke17/bbdc0c8592a8cc2f171851cd69a10532

[19:32] <pmurias> that a java.lang.ProcessHandle not being present error

[19:33] <MasterDuke> missing import?

[19:33] <pmurias> GraalVM seems to be JDK 8 based

[19:33] <pmurias> and ProcessHandle is a JDK 9 thing

[19:34] *** ravenou__ left
[19:35] <MasterDuke> yeah, looks like graalvm probably won't support jdk 9 until graalvm 20. might be simpler to put off the rebase until then

[19:36] *** failure joined
[19:36] *** failure is now known as Guest45192

[19:36] <pmurias> MasterDuke: is that something they have commited to doing?

[19:37] <MasterDuke> pmurias: https://github.com/oracle/graal/issues/651

[19:38] <MasterDuke> so yes? but not quickly?

[19:39] *** Guest45192 left
[19:39] *** success- joined
[19:41] <Doc_Holliwood> is it possible to chain multiple greps, using the whatever form? `list.grep: * (elem) foo;` i would like to filter add an additional grep

[19:41] <timotimo> that's not "the whatever form", that's the "colon form" :)

[19:41] <timotimo> you can use parenthesis and put the whatever code inside that

[19:42] <pmurias> MasterDuke: it seems we need jdk 9 (only?) for the getppid op

[19:42] <MasterDuke> pmurias: over in #perl6-dev vrurg says he has plans for further build system changes. so i think i won't bother with the rebase right now, and will wait until after his changes and java 9+ support in graalvm

[19:43] *** domidumont joined
[19:43] <MasterDuke> but i do hope to do more with the truffle branch (just implementing more stuff, not the build system revamping)

[19:44] <MasterDuke> so just leave the branch as is and add more commits (that shouldn't effect any future rebase)

[19:45] <vrurg> MasterDuke: you're pushing me to work on NQP sooner than I'm ready for it. Seeing faster jvm backend is so exciting!

[19:46] *** Ven`` joined
[19:46] <MasterDuke> you should chat with pmurias, he actually understands it, i just did some simple stuff

[19:46] <MasterDuke> but truffle/graalvm is way cool

[19:47] <MasterDuke> you can create native executables that start up almost instantly

[19:47] <Doc_Holliwood> when I do `constant \alphabet = ( 'a' .. 'z', 'A' .. 'Z' ).Set;` within a sub, is the work done once or on each call?

[19:48] <MasterDuke> and i had some simple number crunching examples that where faster on that branch than on moarvm (though that was a while ago, moarvm has had a lot of optimizations since then)

[19:48] <cpan-p6> New module released to CPAN! XML::Actions (0.3.3) by 03MARTIMM

[19:48] <timotimo> constant runs at BEGIN time, i.e. during compilation

[19:48] <timotimo> i think you need a "flat" in there, though

[19:48] *** pmurias left
[19:48] <Doc_Holliwood> Sweet

[19:54] *** pmurias joined
[19:55] *** success- left
[19:58] *** success joined
[19:58] <SmokeMachine> https://github.com/FCO/Red/issues/400#issuecomment-532377649

[19:59] *** success is now known as Guest70324

[20:00] *** domidumont left
[20:00] <xq> there is a weird issue on docs.perl6.org; example: I open https://docs.perl6.org/type/Range press ctrl-f to open my browser's search bar, enter some string, press F3 several times to find a needed match, then press escape to close browser search bar, my browsers viewport moves to the top of the page, and focusing the pages own search bar

[20:01] <xq> effectively discarding all my search efforts

[20:01] <xq> I think this is a serious usability problem

[20:04] <rba> xq: Just tried the same on Chrome on my Mac. Can not confirm the behaviour.

[20:04] <xq> chromium 76.0.3809.100 (Developer Build) built on Debian bullseye/sid, running on Debian bullseye/sid (64-bit)

[20:06] *** Cabanossi left
[20:06] <rba> Google Chrome Version 76.0.3809.132 (Official Build) (64-bit) on macOS High Sierra 10.13.6

[20:07] <xq> my exact keypresses after opening the page are: ctrl-f -> main -> f3 -> f3 -> f3 -> esc

[20:08] *** Black_Ribbon joined
[20:08] *** Cabanossi joined
[20:08] *** wamba left
[20:08] *** wamba joined
[20:10] *** leont left
[20:11] <rba> Can confirm your finding on Windows 10, Google Chrome Version 76.0.3809.132 (Official Build) (64-bit)

[20:12] <rba> xq: May I ask you to open an issue under https://github.com/perl6/doc/issues ?

[20:13] <xq> ok

[20:13] <rba> Would guess, that ctrl-f is in javascript to lead to the search box. On my Mac it's cmd-f, yet ctrl-f doesn't work either.

[20:15] <xq> it's probably not only ctrl-f but f3 as well, if I have some "stored" search inside browser already

[20:15] <xq> i.e. pressing f3 instead of the initial ctrl-f produces the same end result

[20:21] <Elronnd> xq: I have the same issue as you.  I made a userscript to disable the behaviour

[20:21] *** pmurias left
[20:22] *** zakharyas joined
[20:22] *** sena_kun left
[20:22] <Elronnd> https://0x0.st/zy5J.txt here

[20:22] *** Guest70324 left
[20:24] *** success- joined
[20:27] <xq> submitted https://github.com/perl6/doc/issues/3025

[20:29] *** molaf joined
[20:29] *** krychu joined
[20:33] *** pmurias joined
[20:36] *** zakharyas left
[20:36] <Elronnd> the javascript is actually listening for esc

[20:36] <Elronnd> You can try pressing esc anywhere on the page, and it'll take you to the website's search bar

[20:37] <Elronnd> Why it hears that esc even when it's used to close the *browser*'s search box, I don't know

[20:37] *** melezhik joined
[20:37] <xq> ouch

[20:38] <xq> it does indeed

[20:38] <melezhik> I need to define signature for method that accept both array and single parameter

[20:38] <melezhik> foo($value); foo(@value)

[20:38] <melezhik> how do I do that?

[20:39] <moritz> m: sub f($x) { say $x.perl }; my @a = <b c d>; f(@a)

[20:39] <camelia> rakudo-moar 17d036ad4: OUTPUT: «$["b", "c", "d"]␤»

[20:39] <moritz> melezhik: just use the fact that a scalar can also hold an array

[20:40] <melezhik> Type check failed in binding to parameter '@cmd'; expected Positional but got Str ("C:\\Users\\melezhik/.spa...)

[20:40] <melezhik> method !run-bash-command-async (@cmd) {}

[20:41] <melezhik> on this metod

[20:41] <melezhik> method

[20:41] <melezhik> I get this error when I call it as run-bash-command-async("foo")

[20:42] <timotimo> maybe you want a slurpy. perhaps the + slurpy even

[20:43] <melezhik> how do I change run-bash-command-async then?

[20:43] <timotimo> try +@cmd

[20:43] <timotimo> or *@cmd

[20:44] <melezhik> https://github.com/melezhik/Sparrow6/blob/master/lib/Sparrow6/Task/Runner/Helpers/Common.pm6#L94

[20:44] <melezhik> timotimo are you talking about signature?

[20:45] <timotimo> yes

[20:45] <melezhik> ok

[20:46] *** Geth_ joined
[20:46] *** Geth left
[20:46] *** robertle left
[20:47] *** netrino joined
[20:48] *** Geth joined
[20:48] *** Geth_ left
[21:21] *** stux|RC-only joined
[21:21] *** wamba left
[21:21] *** pmurias left
[21:22] *** wamba joined
[21:28] *** pmurias joined
[21:30] *** melezhik left
[21:31] *** Geth_ joined
[21:31] *** Geth left
[21:35] *** natrys left
[21:36] *** pmurias left
[21:38] *** pmurias joined
[21:44] *** agentzh left
[21:46] *** agentzh joined
[21:46] *** agentzh left
[21:46] *** agentzh joined
[22:09] *** reach_satori joined
[22:13] *** netrino left
[22:13] *** pmurias left
[22:15] *** success- left
[22:16] <tony-o> @ AlexDaniel` is there a way on gh issues to allow people to vote and while closing the issue? (looking at 106 specifically)

[22:17] <AlexDaniel> tony-o: you can react regardless of the status, so you can still 👍 comments on closed issues

[22:18] <AlexDaniel> tony-o: but what do you have in mind? I'm not sure I understand :)

[22:18] *** success joined
[22:18] *** success is now known as Guest56967

[22:28] <tony-o> i'd like to force that vote to happen so we can move forward, 50+ comments on file extensions and it's mostly (at this point) noise

[22:29] <AlexDaniel> tony-o: that vote is not strictly necessary, just talk to jnthn and lizmat to decide which extensions should go into the PR

[22:29] <xq> are you voting on the file extension, meaning that the new name has been decided already?

[22:30] <AlexDaniel> xq: no, there's a PR to rename the language, and we want to include new extensions in that PR

[22:30] <tony-o> ah, i'm going to mute that thread then

[22:30] <xq> thanks for clarifying AlexDaniel 

[22:30] <xq> (I personally like camelia, btw)

[22:30] <AlexDaniel> xq: so we're trying to decide how exactly to modify the PR, and there's still some room for new ideas too :)

[22:31] <AlexDaniel> xq: as for camelia, that's unlikely to happen

[22:31] <xq> :(

[22:31] <AlexDaniel> the current state of the PR is pretty much final, except extensions

[22:31] <AlexDaniel> see https://github.com/perl6/problem-solving/pull/89/files

[22:32] <xq> I see.

[22:32] <gdonald> Are there any other debuggers besides p6-app-moarvm-debug?

[22:32] <xq> I guess I'll just hope it doesn't get approved

[22:33] <timotimo> perl6-debug-m exists, but won't debug into libraries or the core setting; comma can also debug perl6 code on moarvm

[22:34] <AlexDaniel> xq: that's also somewhat unlikely from what I see right now, any reason for you to think that? :)

[22:34] <xq> personal preference only

[22:35] <AlexDaniel> xq: yeah, well, there's something about “camelia” that made me happy, I'm not sure what. But I'm fine with Raku

[22:36] <xq> it's name of the original perl 6 mascot, it has connection to camel, and it sounds good

[22:37] <xq> raku is a strange, alien, meaningless word

[22:37] <xq> (at least to me)

[22:37] <xq> naming things is hard

[22:37] *** mowcat left
[22:39] <AlexDaniel> xq: I mean, maybe sometimes it's better when the word does not immediately associate with something specific. Like, there's this: http://www.camelia.com/

[22:40] <AlexDaniel> I totally wouldn't mind if our language associated with female products, I even think that it's pretty cool. But having something neutral is probably better

[22:53] *** Guest56967 left
[22:54] *** success joined
[22:54] *** success is now known as Guest5539

[22:56] *** krychu left
[23:13] *** Itaipu joined
[23:18] *** Itaipu left
[23:23] *** Itaipu joined
[23:24] *** Ven`` left
[23:53] *** wamba left
[23:57] <rindolf> TimToady: here?

[23:59] *** wildtrees left
