[00:01] *** Manifest0 joined
[00:05] *** vrurg joined
[00:06] *** Manifest0 left
[00:10] *** lucasb left
[00:11] *** Manifest0 joined
[00:13] *** cpage left
[00:16] *** aborazmeh joined
[00:16] *** aborazmeh left
[00:16] *** aborazmeh joined
[00:20] *** Manifest0 left
[00:25] *** Manifest0 joined
[00:30] *** lembark left
[00:34] *** aborazmeh left
[00:39] *** jaldhar left
[00:39] *** jaldhar joined
[00:41] *** Manifest0 left
[00:41] <Kaiepi> m: nqp::getattr($*IN, IO::Handle, '$!PIO')

[00:42] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::getattr, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nqp::getattr($*IN, IO::Handle, '$!PIO')7⏏5<EOL>␤»

[00:42] <Kaiepi> m: use nqp; nqp::getattr($*IN, IO::Handle, '$!PIO')

[00:42] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «P6opaque: no such attribute '$!PIO' on type IO::Handle in a Scalar when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[00:42] <Kaiepi> m: use nqp; nqp::getattr($PROCESS::IN, IO::Handle, '$!PIO')

[00:42] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «P6opaque: no such attribute '$!PIO' on type IO::Handle in a Scalar when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[00:42] <Kaiepi> m: use nqp; nqp::getattr(nqp::decont($PROCESS::IN), IO::Handle, '$!PIO')

[00:42] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «P6opaque: no such attribute '$!PIO' on type IO::Handle in a IO::Handle when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[00:42] <Kaiepi> m: use nqp; nqp::getattr(nqp::decont($*IN), IO::Handle, '$!PIO')

[00:42] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «P6opaque: no such attribute '$!PIO' on type IO::Handle in a IO::Handle when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[00:42] <Kaiepi> m: use nqp; nqp::getattr(nqp::decont($*OUT), IO::Handle, '$!PIO')

[00:42] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «P6opaque: no such attribute '$!PIO' on type IO::Handle in a IO::Handle when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[00:43] <Kaiepi> m: $*IN.opened

[00:43] <camelia> rakudo-moar b2e72d6d7: ( no output )

[00:43] <Kaiepi> m: say $*IN.opened

[00:43] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «True␤»

[00:43] <Kaiepi> m: say $*IN.WHAT

[00:43] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «(Handle)␤»

[00:46] *** Manifest0 joined
[00:49] <Kaiepi> ok this is the output i was trying to get

[00:49] <Kaiepi> bastille% perl6 -Mnqp -e 'say nqp::getattr($*IN, IO::Handle, q[$!PIO])'

[00:49] <Kaiepi> IO::Handle<IO::Special.new("<STDIN>")>(opened)

[00:49] <Kaiepi> wtf?

[00:51] *** Manifest0 left
[00:51] <Kaiepi> > use nqp; nqp::getattr(nqp::decont($*IN), IO::Handle, '$!PIO')

[00:51] <Kaiepi> (low-level object `BOOTIO`)

[00:51] <MasterDuke> Kaiepi: camelia runs with a restricted setting, maybe that's causing it?

[00:51] <Kaiepi> maybe

[00:52] <Kaiepi> what i'm trying to show is that get, prompt, and co. are broken for $*IN/$*OUT/$*ERR because the proper $!PIO value is getting assigned to their container, not their actual value

[00:52] <Kaiepi> er

[00:53] <Kaiepi> the IO::Special object's getting assigned to $!PIO on the container and that's screwing things up

[00:54] <Kaiepi> at least it's a really simple fix

[00:56] *** Manifest0 joined
[00:58] <Kaiepi> > use nqp; nqp::getattr($*IN, IO::Handle, '$!PIO')

[00:58] <Kaiepi> (low-level object `BOOTIO`)

[00:58] <Kaiepi> there we go

[01:03] *** Manifest0 left
[01:08] *** Manifest0 joined
[01:09] *** ayerhart left
[01:29] *** lichtkind left
[01:31] *** ayerhart joined
[01:31] *** ayerhart left
[01:42] *** aborazmeh joined
[01:42] *** aborazmeh left
[01:42] *** aborazmeh joined
[01:48] *** Manifest0 left
[01:53] *** Manifest0 joined
[01:56] *** molaf left
[02:04] *** Manifest0 left
[02:05] *** Manifest0 joined
[02:08] *** molaf joined
[02:14] *** Manifest0 left
[02:18] *** aborazmeh left
[02:20] *** Manifest0 joined
[02:31] *** Manifest0 left
[02:31] *** aborazmeh joined
[02:31] *** aborazmeh left
[02:31] *** aborazmeh joined
[02:36] *** Manifest0 joined
[02:36] *** imcsk8 left
[02:38] *** imcsk8 joined
[02:43] *** Yary left
[02:44] <Kaiepi> m: proto sub foo() { my $a = 1; {*} }; multi sub foo() { say $a }; foo

[02:44] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3my $a = 1; {*} }; multi sub foo() { say 7⏏5$a }; foo␤»

[02:45] <Kaiepi> damn

[02:50] *** Manifest0 left
[02:55] *** Manifest0 joined
[03:06] *** Manifest0 left
[03:11] *** Manifest0 joined
[03:16] *** Manifest0 left
[03:16] *** john_parr left
[03:21] *** Manifest0 joined
[03:26] *** Manifest0 left
[03:29] <ugexe> m: proto sub foo() { my $*a = 1; {*} }; multi sub foo() { say $*a }; foo'

[03:29] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 {*} }; multi sub foo() { say $*a }; foo7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement …»

[03:29] <ugexe> m: proto sub foo() { my $*a = 1; {*} }; multi sub foo() { say $*a }; foo

[03:29] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «1␤»

[03:32] *** Manifest0 joined
[03:34] *** Cabanoss- joined
[03:35] *** Cabanossi left
[03:35] *** Cabanoss- is now known as Cabanossi

[03:40] *** aborazmeh left
[03:41] *** Manifest0 left
[03:47] *** Manifest0 joined
[03:50] *** __jrjsmrtn__ left
[03:53] *** mowcat left
[03:54] *** Yary joined
[04:03] *** kaare__ left
[04:03] *** kaare__ joined
[04:16] *** Manifest0 left
[04:21] *** Manifest0 joined
[04:23] *** skids joined
[04:26] *** john_parr joined
[04:35] *** skids left
[04:37] *** Manifest0 left
[04:42] *** Manifest0 joined
[04:46] *** skids joined
[04:49] *** debprav joined
[04:53] *** curan joined
[05:07] *** Manifest0 left
[05:09] *** jmerelo joined
[05:12] *** Manifest0 joined
[05:12] *** debprav left
[05:19] *** Manifest0 left
[05:24] *** Manifest0 joined
[05:26] *** skids left
[05:26] *** molaf left
[05:31] *** robertle left
[05:33] <jmerelo> releasable6: status

[05:33] *** giraffe left
[05:33] <releasable6> jmerelo, Next release will happen when it's ready. 1 blocker. 140 out of 317 commits logged (⚠ 2 warnings)

[05:33] <releasable6> jmerelo, Details: https://gist.github.com/d04c3f853aeb3d6da338a7cd70a27744

[05:33] *** espadrine_ joined
[05:38] *** Manifest0 left
[05:42] *** Yary left
[05:42] *** Manifest0 joined
[05:47] <Geth> ¦ doc: 5f755680c6 | (JJ Merelo)++ | doc/Type/Range.pod6

[05:47] <Geth> ¦ doc: Minor fixes and reflow

[05:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5f755680c6

[05:47] <Geth> ¦ doc: 2a70459eb9 | (JJ Merelo)++ | doc/Type/Signature.pod6

[05:47] <Geth> ¦ doc: Reflow for #2675

[05:47] <synopsebot> Link: https://doc.perl6.org/type/Range

[05:47] <synopsebot> Link: https://doc.perl6.org/type/Signature

[05:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2a70459eb9

[05:47] <Geth> ¦ doc: 38e07c8cdd | (JJ Merelo)++ | doc/Type/Signature.pod6

[05:47] <Geth> ¦ doc: Adds sigilless slurpy, closes #2675

[05:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/38e07c8cdd

[05:52] *** espadrine_ left
[06:02] <Kaiepi> m: proto sub foo() { my $*A := 1; {*} }; only sub foo() { say $*A }; foo

[06:02] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of routine 'foo' (did you mean to declare a multi-sub?)␤at <tmp>:1␤------> 3 := 1; {*} }; only sub foo() { say $*A }7⏏5; foo␤    expecting any of:␤        horizontal whitespa…»

[06:02] <Kaiepi> m: null sub foo() { say 1 }; foo

[06:02] <Geth> ¦ doc: 0d41125c44 | (JJ Merelo)++ | doc/Type/Signature.pod6

[06:02] <Geth> ¦ doc: Wrap up

[06:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0d41125c44

[06:02] <synopsebot> Link: https://doc.perl6.org/type/Signature

[06:02] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    null used at line 1␤␤»

[06:03] <Kaiepi> null pops up alongside only and multi in one of the tokens in the grammar but i'm not sure what it's doing there

[06:03] <Kaiepi> m: null foo() {}; foo

[06:03] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 3null foo()7⏏5 {}; foo␤    expecting any of:␤        infix␤        infix sto…»

[06:04] <Kaiepi> m: null foo { };

[06:04] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    foo used at line 1␤    null used at line 1␤␤»

[06:04] <Kaiepi> m: null foo()

[06:04] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    foo used at line 1␤    null used at line 1␤␤»

[06:06] <Kaiepi> m: proto sub foo() { {*}; say $*A; }; multi sub foo() { my $*A := 1; }; foo

[06:06] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «Dynamic variable $*A not found␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:09] <Kaiepi> m: proto sub foo(--> Int) { my Str $a = {*}; $a.Int }; multi sub foo(--> Str) { '1' }; say foo

[06:09] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «1␤»

[06:10] *** rindolf joined
[06:12] *** ravenousmoose joined
[06:12] *** domidumont joined
[06:16] *** ravenousmoose left
[06:17] <Kaiepi> m: sub foo(--> Int) is rw { my $foo = 1; Proxy.new: FETCH => method (--> Int) { $foo }, STORE => method (Int $f) { $foo = $f } }; my $foo = foo; say foo; $foo = 2; say $foo

[06:17] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «1␤2␤»

[06:24] *** ravenousmoose joined
[06:25] *** nadim joined
[06:25] *** ravenousmoose left
[06:26] *** ravenousmoose joined
[06:28] *** zacts joined
[06:30] *** jmerelo left
[06:37] *** nadim left
[06:38] <Kaiepi> m: class A { submethod DESTROY { say 'destroyed' } }; my A $a .= new; $a = Nil

[06:38] <camelia> rakudo-moar b2e72d6d7: ( no output )

[06:44] <Kaiepi> m: class A {...}; class B { trusts A; has Int $.b; }; class A { has B $.b .= new; method a() { $!b.b = 1; } }; my A $a .= new; $a.a; say $a.b.b

[06:44] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «Cannot modify an immutable 'Int' type object␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:45] <Kaiepi> m: class A {...}; class B { trusts A; has Int $.b; }; class A { has B $.b .= new; method a() { $!b!B::b = 1; } }; my A $a .= new; $a.a; say $a.b.b

[06:45] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such private method '!b' for invocant of type 'B'. Did you mean 'b'?␤at <tmp>:1␤------> 3 A { has B $.b .= new; method a() { $!b!7⏏5B::b = 1; } }; my A $a .= new; $a.a; say␤»

[06:45] <Kaiepi> m: class A {...}; class B { trusts A; has Int $.b; }; class A { has B $.b .= new; method a() { $!b.B::b = 1; } }; my A $a .= new; $a.a; say $a.b.b

[06:45] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «Cannot modify an immutable 'Int' type object␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:45] *** zacts left
[06:45] *** fz_ left
[06:45] <Kaiepi> fiiiine guess i'll use is rw

[06:45] *** Manifest0 left
[06:46] *** khisanth_ left
[06:48] *** ravenousmoose left
[06:49] *** ravenousmoose joined
[06:50] *** netrino joined
[06:50] *** Manifest0 joined
[06:53] *** tholyghos joined
[06:53] *** netrino left
[07:00] *** khisanth_ joined
[07:02] *** Manifest0 left
[07:07] *** Manifest0 joined
[07:11] *** nadim_ joined
[07:14] *** patrickb joined
[07:27] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts A; method !c() { say 1 }; has ::?CLASS::C $.c .= new; method !b() { $!c!::?CLASS::C::c } }; class A { has B $.b .= new; method a() { $!b!B::b } }; my A $a .= new; $a.a

[07:27] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Multiple prefix constraints not yet implemented. Sorry.␤at <tmp>:1␤------> 3; method !c() { say 1 }; has ::?CLASS::C7⏏5 $.c .= new; method !b() { $!c!::?CLASS:␤»

[07:28] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts A; method !c() { say 1 }; has C $.c .= new; method !b() { $!c!::?CLASS::C::c } }; class A { has B $.b .= new; method a() { $!b!B::b } }; my A $a .= new; $a.a

[07:28] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed class-qualified postfix call␤at <tmp>:1␤------> 3 }; has C $.c .= new; method !b() { $!c!7⏏5::?CLASS::C::c } }; class A { has B $.b ␤    expecting any of:␤        postfix␤»

[07:28] <cpan-p6> New module released to CPAN! Pod::Render (0.7.7) by 03MARTIMM

[07:28] <cpan-p6> New module released to CPAN! GTK::V3 (0.11.0) by 03MARTIMM

[07:28] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts A; method !c() { say 1 }; has C $.c .= new; method !b() { self.c!::?CLASS::C::c } }; class A { has B $.b .= new; method a() { self.b!B::b } }; my A $a .= new; $a.a

[07:28] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed class-qualified postfix call␤at <tmp>:1␤------> 3 has C $.c .= new; method !b() { self.c!7⏏5::?CLASS::C::c } }; class A { has B $.b ␤    expecting any of:␤        method argument…»

[07:29] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts A; method !c() { say 1 }; has C $.c .= new; method !b() { self.c!::C::c } }; class A { has B $.b .= new; method a() { self.b!B::b } }; my A $a .= new; $a.a

[07:29] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot call private method 'b' on package B because it does not trust B::A␤at <tmp>:1␤------> 3s B $.b .= new; method a() { self.b!B::b7⏏5 } }; my A $a .= new; $a.a␤    expecting any of:␤ …»

[07:29] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts A; method !c() { say 1 }; has C $.c .= new; method !b() { self.c!::C::c } } }; class A { has B $.b .= new; method a() { self.b!B::b } }; my A $a .= new; $a.a

[07:29] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such private method '!b' for invocant of type 'B'␤at <tmp>:1␤------> 3{ has B $.b .= new; method a() { self.b!7⏏5B::b } }; my A $a .= new; $a.a␤»

[07:29] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts A; method !c() { say 1 }; } has C $.c .= new; method !b() { self.c!::C::c } }; class A { has B $.b .= new; method a() { self.b!B::b } }; my A $a .= new; $a.a

[07:29] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3s C { trusts A; method !c() { say 1 }; }7⏏5 has C $.c .= new; method !b() { self.c!␤    expecting any of:␤       …»

[07:29] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts A; method !c() { say 1 }; }; has C $.c .= new; method !b() { self.c!::C::c } }; class A { has B $.b .= new; method a() { self.b!B::b } }; my A $a .= new; $a.a

[07:29] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot call private method 'c' on package B::C because it does not trust B␤at <tmp>:1␤------> 3 $.c .= new; method !b() { self.c!::C::c7⏏5 } }; class A { has B $.b .= new; method␤    expecti…»

[07:30] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts B; method !c() { say 1 }; }; has C $.c .= new; method !b() { self.c!::C::c } }; class A { has B $.b .= new; method a() { self.b!B::b } }; my A $a .= new; $a.a

[07:30] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «1␤»

[07:31] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts B; method !c() { say 1 }; }; has ::C $.c .= new; method !b() { self.c!::C::c } }; class A is B { class C { trusts A; method !c() { say 2 }; }; method a() { self!b } }; my A $a .= new; $a.a

[07:31] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'C'␤at <tmp>:1␤------> 3sts B; method !c() { say 1 }; }; has ::C7⏏5 $.c .= new; method !b() { self.c!::C::c␤»

[07:32] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts B; method !c() { say 1 }; }; has ::?CLASS.WHO::C $.c .= new; method !b() { self.c!::C::c } }; class A is B { class C { trusts A; method !c() { say 2 }; }; method a() { self!b } }; my A $a .= new; $a.a

[07:32] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed has␤at <tmp>:1␤------> 3; method !c() { say 1 }; }; has ::?CLASS7⏏5.WHO::C $.c .= new; method !b() { self.c␤»

[07:33] <nadim_> morning, what do you use to generate markdown from POD? 

[07:34] <Kaiepi> m: class A {...}; class B { trusts A; class C { trusts B; method !c() { say 1 }; }; has ::?PACKAGE::C $.c .= new; method !b() { self.c!::C::c } }; class A is B { class C { trusts A; method !c() { say 2 }; }; method a() { self!b } }; my A $a .= new; $a.a

[07:34] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'C'␤at <tmp>:1␤------> 3hod !c() { say 1 }; }; has ::?PACKAGE::C7⏏5 $.c .= new; method !b() { self.c!::C::c␤»

[07:34] <moritz> nadim_: have you tried https://github.com/softmoth/perl6-pod-to-markdown ?

[07:35] <nadim_> no but just found: perl6 --doc=Markdown input.pod6 > output.md

[07:35] <nadim_> any advantage using the other one?

[07:41] *** nadim_ left
[07:41] *** zakharyas joined
[07:42] *** Manifest0 left
[07:44] *** nadim_ joined
[07:47] *** Manifest0 joined
[07:48] *** Sgeo left
[07:48] *** Sgeo joined
[07:48] *** ravenousmoose left
[07:49] *** domidumont left
[07:51] <moritz> I'm pretty sure --doc=Markdown uses Pod::To::Markdown under the hood

[07:52] *** ravenousmoose joined
[07:52] *** domidumont joined
[07:55] <tadzik> back in my days whatever was passed to --doc ended up loading Pod::To::<that thing> :P

[08:00] <ufobat__> nadim_, mi6 does for example generate your readme.md from your pod. maybe thats going to help you

[08:00] *** nadim_ left
[08:01] *** ravenousmoose left
[08:02] *** Manifest0 left
[08:07] *** Manifest0 joined
[08:10] *** dakkar joined
[08:13] *** nadim_ joined
[08:16] <tyil> not sure if I released that feature in assixt yet

[08:18] *** pmurias joined
[08:21] <patrickb> tadzik: Did you see my rakudobrew PR?

[08:22] *** kensanata joined
[08:23] *** dolmen joined
[08:24] <tholyghos> .

[08:25] *** tholyghos is now known as holyghost

[08:26] <holyghost> .

[08:26] <tadzik> patrickb: oh, not yet :)

[08:26] <tadzik> will take a look

[08:31] *** dolmen_ joined
[08:32] *** Manifest0 left
[08:33] *** dolmen left
[08:38] *** ravenousmoose joined
[08:38] *** Manifest0 joined
[08:39] *** abraxxa joined
[08:40] *** abraxxa left
[08:40] *** cpan-p6 left
[08:40] *** abraxxa joined
[08:41] *** cpan-p6 joined
[08:41] *** cpan-p6 left
[08:41] *** cpan-p6 joined
[08:46] *** Manifest0 left
[08:49] *** dolmen_ is now known as dolmen

[08:51] *** Manifest0 joined
[08:53] *** scimon joined
[08:56] <nadim_> lgs

[08:58] *** ravenousmoose left
[09:02] *** gregf_ joined
[09:07] *** Manifest0 left
[09:09] *** ravenousmoose joined
[09:11] *** nadim_ left
[09:13] *** Manifest0 joined
[09:20] *** Manifest0 left
[09:21] *** ravenousmoose left
[09:22] *** ravenousmoose joined
[09:26] *** Manifest0 joined
[09:27] <lizmat> weekly: https://perl6.eu/niven-ladder.html

[09:27] <notable6> lizmat, Noted!

[09:33] *** Manifest0 left
[09:33] *** domidumont left
[09:37] *** Manifest0 joined
[09:42] *** Manifest0 left
[09:44] <El_Che> lo

[09:47] *** Manifest0 joined
[10:05] <dolmen> m: use JSON::Fast; say to-json {}, :pretty;

[10:05] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «===SORRY!===␤Could not find JSON::Fast at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-1/share…»

[10:09] *** Manifest0 left
[10:10] <dolmen> I'm surprised that JSON::Fast formats an empty hash with an empty line between the brackets.

[10:10] <dolmen> perl6 -e 'use JSON::Fast; say to-json {}, :pretty;'

[10:11] *** jaldhar left
[10:12] *** jaldhar joined
[10:14] *** Manifest0 joined
[10:15] <tadzik> wow that's a lot of rakudobrew PRs

[10:16] <Kaiepi> m: role Foo { method !foo() { 1 } }; class Bar does Foo { method bar() { self!Foo::foo } }; say Bar.bar

[10:16] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot call private method 'foo' on package Foo because it does not trust Bar␤at <tmp>:1␤------> 3 does Foo { method bar() { self!Foo::foo7⏏5 } }; say Bar.bar␤    expecting any of:␤       …»

[10:17] <Kaiepi> m: role Foo { method !foo() { 1 } }; class Bar is Foo { method bar() { self!Foo::foo } }; say Bar.bar

[10:17] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot call private method 'foo' on package Foo because it does not trust Bar␤at <tmp>:1␤------> 3ar is Foo { method bar() { self!Foo::foo7⏏5 } }; say Bar.bar␤    expecting any of:␤       …»

[10:17] <Kaiepi> m: role Foo { method !foo() { 1 } }; class Bar is Foo { method bar() { self!foo } }; say Bar.bar

[10:17] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such private method '!foo' for invocant of type 'Bar'␤at <tmp>:1␤------> 3 class Bar is Foo { method bar() { self!7⏏5foo } }; say Bar.bar␤»

[10:18] <Kaiepi> m: class Foo { method !foo() { 1 } }; class Bar is Foo { method bar() { self!foo } }; say Bar.bar

[10:18] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such private method '!foo' for invocant of type 'Bar'␤at <tmp>:1␤------> 3 class Bar is Foo { method bar() { self!7⏏5foo } }; say Bar.bar␤»

[10:18] <Kaiepi> m: class Foo { method !foo() { 1 } }; class Bar is Foo { method bar() { self!Foo::foo } }; say Bar.bar

[10:18] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot call private method 'foo' on package Foo because it does not trust Bar␤at <tmp>:1␤------> 3ar is Foo { method bar() { self!Foo::foo7⏏5 } }; say Bar.bar␤    expecting any of:␤       …»

[10:18] <Kaiepi> damn

[10:19] <Kaiepi> i can't make access the private methods on the role that i want to without ending up with circular dependencies

[10:20] <Kaiepi> could use augment but idk, i feel like i'm designing it badly if i need to use augment

[10:24] <jnthn> If a subclass needs it, then it probably shouldn't be private in the first place

[10:24] <Kaiepi> this is a role being used by a couple of classes

[10:27] <jnthn> Oh, hang on...why are you doing `class Bar is Foo`, not `class Bar does Foo`?

[10:28] *** sno left
[10:28] <jnthn> Oh, you were using `does`...but then you didn't need to quality it in the first case?

[10:34] *** Manifest0 left
[10:40] *** Manifest0 joined
[10:43] *** reach_satori_ left
[10:47] *** dolmen left
[10:49] *** Manifest0 left
[10:54] *** Manifest0 joined
[11:03] *** Manifest0 left
[11:05] *** patrickb left
[11:09] *** Manifest0 joined
[11:13] *** antoniog1miz joined
[11:16] *** Technaton left
[11:19] *** Technaton joined
[11:19] *** zakharyas left
[11:27] *** Manifest0 left
[11:28] *** vrurg left
[11:31] *** Manifest0 joined
[11:35] *** dolmen joined
[11:35] *** dolmen is now known as Guest32825

[11:37] *** Guest32825 left
[11:42] *** sena_kun joined
[11:42] *** aborazmeh joined
[11:42] *** aborazmeh left
[11:42] *** aborazmeh joined
[11:47] *** Manifest0 left
[11:48] *** dolmen_ joined
[11:52] *** Manifest0 joined
[11:54] *** aborazmeh left
[12:00] *** Manifest0 left
[12:06] *** Manifest0 joined
[12:15] *** domidumont joined
[12:17] *** Manifest0 left
[12:17] *** aborazmeh joined
[12:17] *** aborazmeh left
[12:17] *** aborazmeh joined
[12:18] *** aborazmeh left
[12:20] *** patrickb joined
[12:22] *** Manifest0 joined
[12:28] *** antoniog1miz left
[12:29] *** Manifest0 left
[12:34] *** Manifest0 joined
[12:43] *** Manifest0 left
[12:49] *** Manifest0 joined
[12:57] *** aborazmeh joined
[12:57] *** aborazmeh left
[12:57] *** aborazmeh joined
[12:58] *** aborazmeh left
[12:58] *** timeless left
[12:58] *** peteretep left
[12:59] *** roguelazer left
[12:59] *** Manifest0 left
[12:59] *** success joined
[12:59] *** jhill_ joined
[12:59] *** success is now known as Guest9223

[13:00] *** skaji left
[13:00] *** jhill left
[13:00] *** sivoais left
[13:00] *** Guest33742 left
[13:00] *** jhill_ is now known as jhill

[13:00] *** skaji_ joined
[13:00] *** TeamBlast left
[13:00] *** kini left
[13:01] *** sivoais joined
[13:02] *** timeless joined
[13:02] *** Kaiepi left
[13:02] *** zakharyas joined
[13:02] *** Kaiepi joined
[13:04] *** Manifest0 joined
[13:05] *** TeamBlast joined
[13:06] *** kini joined
[13:06] *** roguelazer joined
[13:09] <dolmen_> What is the equivalent of perl 5's "perldoc -m" (dump the source corresponding to a package)

[13:09] <dolmen_> ?

[13:12] <MasterDuke> dolmen_: --doc

[13:14] *** reach_satori_ joined
[13:14] *** peteretep joined
[13:15] <tadzik> --doc gives you the docs, not the source. I don't think -m has an equivalent

[13:17] <lizmat> maybe an issue for this is in order  :-)

[13:19] <MasterDuke> oh yeah, i read that questions completely backwards

[13:20] <dolmen_> https://twitter.com/omengue/status/1127926468586156033 "I just wrote a #Perl6 grammar for the Netscape cookie jar file. So easy with #Perl6. So convenient for a simple HTTP API scripting need."

[13:25] *** vrurg joined
[13:25] <moritz> dolmen_: thanks, retweeted

[13:27] <cpan-p6> New module released to CPAN! LibCurl (0.8) by 03CTILMES

[13:36] *** Manifest0 left
[13:41] *** Manifest0 joined
[13:42] *** skids joined
[13:49] *** aborazmeh joined
[13:49] *** aborazmeh left
[13:49] *** aborazmeh joined
[14:00] *** nadim_ joined
[14:02] *** llfourn left
[14:06] *** bakedb_ joined
[14:07] *** llfourn joined
[14:09] *** bakedb left
[14:11] *** aborazmeh left
[14:11] *** curan left
[14:16] *** aborazmeh joined
[14:16] *** aborazmeh left
[14:16] *** aborazmeh joined
[14:23] <lizmat> and another Perl 6 Weekly hits the Net: 2019.19 Infrastructure Pumpkings | Weekly changes in and around Perl 6

[14:23] <lizmat> https://p6weekly.wordpress.com/2019/05/13/2019-19-infrastructure-pumpkings/

[14:24] *** Manifest0 left
[14:29] *** Manifest0 joined
[14:32] *** ayerhart joined
[14:48] *** pmurias left
[14:49] *** Manifest0 left
[14:52] <nadim_> lizmat++

[14:56] *** Manifest0 joined
[14:59] *** pmurias joined
[15:01] *** gregf_ left
[15:02] *** esh left
[15:03] *** esh joined
[15:04] *** kurahaupo left
[15:04] *** kurahaupo_ joined
[15:10] *** scimon left
[15:20] *** pmurias left
[15:21] *** Xliff joined
[15:22] *** domidumont left
[15:23] *** aborazmeh left
[15:24] *** scimon joined
[15:33] *** jmerelo joined
[15:36] <jmerelo> squashable: status

[15:36] <squashable6> jmerelo, Next SQUASHathon in 17 days and ≈20 hours (2019-06-01 UTC-14⌁UTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:37] <Xliff> jmrelo: Did you have a think about extending the squashies a bit to encourage participation?

[15:37] <Xliff> jmerelo: ^^

[15:37] <jmerelo> Xliff: yep. It's just a matter of changing some stuff in the repo, I think.

[15:37] <jmerelo> You mean what you say about shifting hours up a bit, for instance, right?

[15:37] <Xliff> Yes.

[15:38] *** patrickb left
[15:38] <Xliff> Less shifting, they can start when they normally start. More about extending the ending.

[15:38] <jmerelo> Xliff: I'll try to do it now so that I don't forget.

[15:38] <Xliff> Thanks!

[15:41] <jmerelo> Xliff: let's say 6 hours later?

[15:42] <Xliff> Sure!

[15:43] <jmerelo> Xliff: I've changed the code, but I'm not sure where it's deployed. Let's see if it's the same place as the rest...

[15:43] <Xliff> Can announce the winner the next day so you can sleep.

[15:44] *** zakharyas left
[15:45] <jmerelo> Xliff: the code in the deployment site is _not_ the same as in the repo. I hate it when that happens...

[15:47] <Xliff> Ah. Yeah. I get that.

[15:47] <jmerelo> releasable6: status

[15:47] <releasable6> jmerelo, Next release will happen when it's ready. GitHub is down. At least 0 blockers. 140 out of 317 commits logged (⚠ 2 warnings)

[15:47] <releasable6> jmerelo, Details: https://gist.github.com/cb72dc6422f7ba2242445a58c752ae48

[15:47] <jmerelo> squashable6: status

[15:47] <squashable6> jmerelo, Next SQUASHathon in 17 days and ≈20 hours (2019-06-01 UTC-14⌁UTC+12). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:48] <jmerelo> So it should be working now...

[15:49] <jmerelo> .tell AlexDaniel I did some change in Squashable on the site itself. I think I didn't break anything, but it wouldn't be a bad idea to check.

[15:49] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[15:49] * jmerelo thinks we really need to do something about the general infrastructure...

[15:53] *** reach_satori_ left
[15:57] *** johnjohn101 joined
[16:09] *** molaf joined
[16:09] <El_Che> lo

[16:11] <jmerelo> El_Che: hi!

[16:13] <El_Che> jmerelo: what do you mean by infra? Depend less on popular infra like github and travis, or less?

[16:14] <jmerelo> El_Che: not that infra. The infrastructure where everything is deployed: download sites, websites, bots...

[16:16] <El_Che> That's what I thought first, but I was confused by the bot's reply ("Gihub is down")

[16:16] <jmerelo> El_Che: the bot is drunk

[16:22] *** patrickb joined
[16:25] <El_Che> jmerelo: I think that is part of a larger effort. The repositioning of Perl 6 (the association with Perl 5 is taking it nowhere) and the re-evaluation of the ambitions (there is only one compiler). But I am not re-opening that discussion ATM.

[16:26] <jmerelo> El_Che: all that's good and well. The only thing I want is one-click deployment to infrastructure, should it fall for some reason. Barring that, source not modified in production.

[16:28] <El_Che> well, I don't know. What the download pagina reflact is a lack of vision. It's confusing even for me. 3 projects, a zillion of options.

[16:28] <El_Che> One click would be nice, idd

[16:29] *** dakkar left
[16:29] <El_Che> but I don't know how it would work with 3 main projects 

[16:29] <jmerelo> Well, that's another thing. There are a zillion projects out there, some of them haven't been touched for ages.

[16:30] * sena_kun thinks the main concern is that the builds are still not very accessible to users iirc, docs site needs a manual update, which is a no-no, and there is still no formal proposal on what to do with all of this and afaik no actions

[16:30] <jmerelo> We clearly need more resources here...

[16:30] <jmerelo> sena_kun: there are some actions, but they are personal, one-shoot, and clearly not sustainable.

[16:31] <El_Che> jmerelo: which may lead to burnout (cfr the doc work you've been doing)

[16:31] <jmerelo> not to mention scalable. While we're keeping the community small we can pretty much manage on a volunteer basis. But if it triples in size... 

[16:32] <jmerelo> El_Che: still not burned... I could have used funding by Google in the season of docs, that's for sure.

[16:32] <sena_kun> jmerelo, well, a volunteer-based project as it is, but I am just excited to see steps toward a better infra. /me keeping a DO droplet is not really what I imagine to be a nice thing

[16:32] *** scimon left
[16:32] <jmerelo> sena_kun: it's definitely not. kudos for that anyway.

[16:33] <jmerelo> sena_kun: the problem with this is that we have realized that our configurations are not reproducible. We don't have an ansible, sparrowdo or Dockerfile to deploy everything easily.

[16:34] *** kensanata left
[16:35] <jmerelo> Anyway, not really complaining. For the time being I either know how to do something or know someone who does. Most people are a bit like that. But that's not sustainable or scalable...

[16:36] <jmerelo> sena_kun: maybe a BoF meeting at PerlCon? Are you attending?

[16:36] <sena_kun> jmerelo, I do, but how to I read "BoF"?

[16:36] <jmerelo> sena_kun: blowing a lot of air through your lips :-)

[16:37] <El_Che> A BoF for BOFHs

[16:37] <jmerelo> sena_kun: it's "Birds of Feather", as in "Birds of a feather flock together". Feather being concern about Perl 6 infra in this case, I guess.

[16:39] <sena_kun> ah, I see. well, the asnwer is "maybe" depending on how things will be. I am very bad with planes, and have to present two talks(first time in my life attending an IT conf), after attending a workshop, so not sure how I'll feel about all that. Options such as "having a dead sleep at the hotel room" are not impossible. ;)

[16:40] <jmerelo> sena_kun: good luck anyway. 

[16:40] <sena_kun> thanks!

[16:41] <sena_kun> by the way, my paper with "Perl 6" in title was accepted to a scientific conference. still have to present it and wait for publishing though.

[16:42] <sena_kun> jmerelo++ for helping with it. :)

[16:42] <jmerelo> sena_kun: great! Which conference? My pleasure. Keep them coming :-)

[16:42] <sena_kun> jmerelo, http://icteri.org/icteri-2019/ <-

[16:43] <jmerelo> Good luck with the presentation :-)

[16:43] * sena_kun will do his best

[16:44] <El_Che> jmerelo is a presentation ninja

[16:44] <jmerelo> El_Che: :-)

[16:47] *** nadim_ left
[16:50] *** __jrjsmrtn__ joined
[16:50] *** zacts joined
[16:51] *** nadim_ joined
[16:55] *** nadim joined
[16:55] <nadim> m: dd (1...*)

[16:55] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «(1, 2, 3, 4, 5, 6, 7, 8, 9, 10... lazy list)␤»

[16:55] <nadim> m: class C { has $.list = (1...*) } ; dd C.new

[16:55] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[16:55] *** nadim_ left
[16:56] <nadim> Would the above be considered  a bug in dd?

[16:57] <jmerelo> nadim: well, dd is not exactly perl6, but rakudo. And what it says is strictly true, you can't elem a lazy list.

[16:58] <jmerelo> m: class C { has @.list = (1...*) } ; dd C.new

[16:58] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[16:58] <jmerelo> m: class C { has @.list := (1...*) } ; dd C.new

[16:58] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use := to initialize an attribute␤at <tmp>:1␤------> 3class C { has @.list := (1...*) 7⏏5} ; dd C.new␤»

[16:58] <jmerelo> m: class C { has @.list = (1..*) } ; dd C.new

[16:58] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[16:58] <jnthn> Seems like dd could probably be a bit smarter, though

[16:59] *** dolmen_ left
[16:59] <nadim> m: dd (1...*)

[16:59] <camelia> rakudo-moar b2e72d6d7: OUTPUT: «(1, 2, 3, 4, 5, 6, 7, 8, 9, 10... lazy list)␤»

[16:59] <nadim> Obviously it can

[16:59] *** jmerelo left
[17:00] <nadim> it's not just a warning, the execution of the program stops 

[17:00] *** robertle joined
[17:01] <nadim> Who's the rakudo guy I need to bug about this?

[17:02] <AlexDaniel> “+1 on everything above” – haha, not a good thing to write in a comment knowing that there might be some comments above your one pending review :D

[17:02] <yoleaux> 15:49Z <jmerelo> AlexDaniel: I did some change in Squashable on the site itself. I think I didn't break anything, but it wouldn't be a bad idea to check.

[17:03] <jnthn> nadim: https://github.com/rakudo/rakudo/issues

[17:06] *** zacts left
[17:07] <AlexDaniel> jnthn: I wrote a comment on https://github.com/perl6/problem-solving/issues/5 thinking that I'm assigned to it, please slap my face :D

[17:08] <AlexDaniel> anyway, it's an interesting ticket

[17:09] <AlexDaniel> well, interesting to me at least, as I believe that there are helpful things we can implement instead of just saying “people should do more work” or “people should do X instead of Y”

[17:11] <nadim> https://github.com/rakudo/rakudo/issues/2892

[17:12] <AlexDaniel> .tell jmerelo Hey, what if we take all tickets and cluster them based on something cool, like title similarity or something? Then instead of 1000 tickets or whatever we'll have just a bunch of topics with clustered tickets, maybe that'd make fixing things easier? Or maybe at least closing duplicates easier? Or something?

[17:12] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[17:12] <AlexDaniel> .tell jmerelo https://colabti.org/irclogger/irclogger_log/perl6?date=2019-05-13#l544

[17:12] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[17:21] *** ChoHag left
[17:21] *** Manifest0 left
[17:26] *** Manifest0 joined
[17:29] *** zacts joined
[17:39] *** sarna joined
[17:40] <sarna> hi, I don't know if any library for highlighting on the web supports perl6, so I opened an issue in prismjs:

[17:40] <sarna> https://github.com/PrismJS/prism/issues/1888

[17:40] <sarna> thought you might be interested :) feel free to add anything I forgot about

[17:41] <sena_kun> sarna++

[17:42] <sena_kun> sarna, just out of curiosity, highlight.js is not cool in JS world anymore?

[17:42] <sarna> sena_kun: I don't really know, I just saw a static site generator I use uses prism, so I opened an issue there

[17:43] <sena_kun> ah, ok.

[17:43] <sarna> I'd use pygments if I knew how to change it :) now that I see pygments supports p6

[17:44] *** kurahaupo_ left
[17:45] *** kurahaupo joined
[17:53] <nadim> Apropo colors, what do you guys use in vim to get it correctly? 

[17:53] *** ChoHag joined
[17:53] * tadzik has his own colorscheme where almost everything is yellow

[17:53] <tadzik> it works great :P

[17:56] <masak> why yellow?

[17:56] <tadzik> I like yellow :)

[18:00] <sarna> nadim: github.com/vim-perl/vim-perl6

[18:06] *** noisegul left
[18:07] *** noisegul joined
[18:07] <noisegul> Good evening everyone :)

[18:08] *** netrino joined
[18:09] *** vrurg left
[18:09] *** cpan-p6 left
[18:10] *** vrurg joined
[18:11] *** cpan-p6 joined
[18:11] *** cpan-p6 left
[18:11] *** cpan-p6 joined
[18:11] *** zacts left
[18:12] *** sarna left
[18:14] *** zacts joined
[18:15] *** zacts left
[18:17] <sena_kun> noisegul, o/

[18:19] *** pyrimidine joined
[18:19] <nadim> evening 

[18:19] *** stanrifkin joined
[18:19] <stanrifkin> is there an perl6doc? How do i get quick reference via console?

[18:20] <nadim> good question! being able to run the perl6 doc server locally would be nice too.

[18:21] <timotimo> first we'll have to do something so that it parses much faster

[18:21] <timotimo> much, much faster

[18:21] <timotimo> hai nadim btw

[18:22] <nadim> timotimo: hej long time :) 

[18:22] *** sauvin left
[18:22] <timotimo> did i mention that i just used DDT and it was good?

[18:22] *** ChoHag left
[18:22] <nadim> You said you used it not that it was good ;)

[18:22] <timotimo> oh, OK!

[18:23] <MasterDuke> stanrifkin: there is, don't remember its name exactly. i think it's part of the doc repo though, i.e., don't come by default when you install rakudo

[18:23] <timotimo> i used the special methods to customize the output, too

[18:23] <tadzik> p6doc :)

[18:23] <timotimo> i think it'd be cool if i could also say "if possible, please display this in horizontal mode" or flat mode or what the name of that feature is

[18:24] <nadim> timotimo: I'll push a new version a bit later, found a bug in how the filters are called

[18:24] <nadim> timotimo: it's always possible to display in flat mode

[18:24] <nadim> results may not be to your liking but it will flatten

[18:25] <timotimo> but i have to configure it in the ddt call at the very top, though?

[18:25] <timotimo> AFK

[18:25] <nadim> it's also Muuuuch slower in flatmode

[18:25] <timotimo> oh btw, maybe asciinema would be a great way to demo ddt and such

[18:26] <nadim> it's crawling slow innormal mode but in :flat it's "go get a coffee, I am working on it" 

[18:26] <stanrifkin> i use rakudobrew on linux, can't find an option to install p6doc

[18:27] <nadim> timotimo: you want a DDT that always flattens? what about subclassing?

[18:28] <nadim> timotimo: I did an asciinema demo for the perlreview but ascinema doesn't groak unicode!

[18:28] <nadim> so the glyphs of the tree were not showing

[18:28] *** ChoHag joined
[18:29] <nadim> timotimo: what are you rendering?

[18:29] <stanrifkin> No console reference is a typical beginners barrier. For me at least. I even like C++ now since i found cppman. 

[18:29] <nadim> I am always curious to see what people are doing and if they are using filters

[18:30] <tadzik> stanrifkin: you'll need to install it with zef which you can install using rakudobrew

[18:30] <stanrifkin> tadzik: thank you

[18:30] <nadim> stanrifkin: zef install p6doc

[18:32] *** [Sno] joined
[18:33] <nadim> hmm, am I wrong if I say that p6doc queries the web site? I base that on the modules being installed. is there a local doc?

[18:35] <tadzik> I'm quite sure it's all local, but don't quote me on that

[18:35] <stanrifkin> nadim: i am just installing it. due to the dependencies is seems to look up online websites.

[18:36] <noisegul> p6doc uses local docs from which it builds an index for itself

[18:37] <nadim> don't know what it does with the dependencies but it works without internet 

[18:37] <nadim> opens the doc in vim ... kinky! 

[18:47] *** Manifest0 left
[18:52] *** Manifest0 joined
[18:53] *** netrino left
[18:54] *** netrino joined
[18:57] *** netrino_ joined
[18:57] *** molaf left
[18:58] *** netrino left
[19:03] <stanrifkin> p6doc's speed could be improved. Can i look up operators like %%? something like perlop?

[19:12] <woolfy> Two days ago, Liz and I set up the Perl booth at T-DOSE in Eindhoven, and samcv and tyil came to support us.  It was a nice event.  https://www.flickr.com/photos/wendyga/albums/72157708418071655

[19:13] <woolfy> And we sold some Perl 6 wine and several Perl 6 books.  Interestingly, the books went mostly to Python programmers who heard good things about Perl 6 and wanted to check it out and learn it.  :-)

[19:13] <tyil> thats good news :3

[19:13] <noisegul> Thats cool :)

[19:13] *** espadrine_ joined
[19:13] *** Xliff_ joined
[19:13] <Xliff_> \o

[19:14] <moritz> lizmat++ woolfy++ samcv++ tyil++

[19:14] <Xliff_> moritz: What's up? New release?

[19:16] <moritz> Xliff_: no, Perl booth at T-DOSE

[19:17] <Xliff_> Ah. I wish more big Perl conferences were in the US

[19:18] <woolfy> Xliff_ : heh, well, T-DOSE is not a big Perl conference, it's not even big, and the only Perl about it was our booth, and a machine on the table of a Hackspace.  :-)

[19:21] *** Xliff_ left
[19:26] *** a3r0 left
[19:29] *** stanrifkin left
[19:34] *** xinming left
[19:35] <nine> class Country does SQL::Table['countries'] { has $.id; }; class Customer does SQL::Table['customers'] { has $.country is references(Country); }; sql(select(*, from(Customer.join('country')))).say

[19:35] <nine> SELECT * FROM customers JOIN countries ON customers.country_id = countries.id

[19:35] <nine> Writing this is far too much fun...

[19:36] *** a3r0 joined
[19:38] *** kaare_ joined
[19:39] *** kaare__ left
[19:42] <nine> What I like about it is that the AST is based on the actual SQL 2003 standard and that it can be used completely independently. The sugar for creating the AST is optional (and experimental) as is what looks like the object mapping part (but actually still isn't - it's just static classes)

[19:42] *** pmurias joined
[19:43] *** MilkmanDan left
[19:43] <timotimo> nadim: it's an AST for a small language

[19:44] <timotimo> nadim: i had to influence its rendering because nodes have a .type which for some types comes with a list of attributes that all have their own types :)

[19:44] *** MilkmanDan joined
[19:44] <nadim> did you use filter or type handlers for that?

[19:45] <timotimo> haven't tried that; i used the ddt_blah methods on the objects themselves

[19:45] <timotimo> get_header and get_elements i think?

[19:45] <nadim> and do you have output examples with DDT, .gist, and dd?

[19:45] <timotimo> one moment

[19:46] <nadim> ah, we could consider those type handler, even if they are in the type directly 

[19:46] <nadim> the best place to put them in fact, the rest is just piracy 

[19:47] *** jaldhar left
[19:47] *** jaldhar joined
[19:48] <timotimo> https://gist.github.com/timo/5138f1782672083744e315e9a78d1e51

[19:49] <timotimo> hmm, md rendered will not use colors inside of <font></font> tags :(

[19:51] <timotimo> yeah, github flavoured markdown doesn't let us do that

[19:51] <timotimo> i also have something in there to not show every node's @.children if they are empty

[19:52] <timotimo> want output without the ddt methods, too?

[19:53] <timotimo> i added another file with uncustomized output

[19:53] <nadim> git markdown is weird, I have to take the output from pod2markdown and  hunt the extra lines 

[19:54] <nadim> yes please output without ddt

[19:54] <timotimo> it's in the "excessive_typesystem_details.txt" file

[19:56] <nadim> I see it now, yes it's nice with halved output

[19:56] <nadim> what does it look with .gist or dd?

[19:57] <timotimo> that's also in the file

[19:57] <timotimo> in the gist*

[19:57] <timotimo> it's the lower file, lines 121 and 125

[19:58] <nadim> hahah! OK, I didn't see the gigantic scrollbar 

[19:59] <timotimo> :D

[20:08] *** ufobat_ joined
[20:12] *** ufobat__ left
[20:13] *** xinming joined
[20:17] *** kylese joined
[20:19] *** xinming left
[20:22] *** pecastro joined
[20:23] <nadim> timotimo: have a look at examples/match.pl the last lines dump without glyphs and with key/binder  color cycling, it may give you a more redable output.

[20:24] <nadim> could you redirect the terminal output in a file so I get the color codes too?

[20:26] *** kylese left
[20:27] <cpan-p6> New module released to CPAN! FindBin::Dirs (0.1.1) by 03LEMBARK

[20:27] *** kylese joined
[20:28] *** dolmen joined
[20:30] *** kylese left
[20:37] *** sena_kun left
[20:46] *** antoniogamiz joined
[20:53] *** molaf joined
[20:54] *** Manifest0 left
[20:56] <timotimo> nadim: https://gist.githubusercontent.com/timo/5138f1782672083744e315e9a78d1e51/raw/0731727541adb3fa9064f155113fe275fda403a5/zz_with_ansi_escape_codes.txt - does this work?

[20:56] *** a3r0 left
[21:02] *** a3r0 joined
[21:02] *** Manifest0 joined
[21:05] *** skids left
[21:07] <Kaiepi> m: my (Promise $p1, Promise $p2) = Promise.new xx 2 ==> map { .keep or $_ }; say so all (($p1, $p2) ==> map { .status ~~ Kept })

[21:07] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[21:07] <Kaiepi> is there a shorter way to check if a bunch of promise variables are kept?

[21:08] <Kaiepi> specifically so all (($p1, $p2) ==> map { .status ~~ Kept })

[21:09] <Xliff> m: my (Promise $p1, Promise $p2) = Promise.new xx 2 ==> map { .keep or $_ }; say so ($p1, $p2).grep( *.status ~~ Kept )

[21:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot use Bool as Matcher with '.grep'.  Did you mean to use $_ inside a block?␤  in block <unit> at <tmp> line 1␤␤»

[21:09] <Xliff> m: my (Promise $p1, Promise $p2) = Promise.new xx 2 ==> map { .keep or $_ }; say so ($p1, $p2).grep({ .status ~~ Kept })

[21:09] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[21:09] <timotimo> why not all($p1, $p2, $p3).status ~~ Kept, would that work?

[21:10] <timotimo> m: my (Promise $p1, Promise $p2) = Promise.new xx 2 ==> map { .keep or $_ }; say so all($p1, $p2).status ~~ Kept

[21:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[21:10] <Xliff> m: my (Promise $p1, Promise $p2) = Promise.new xx 2 ==> map { .keep or $_ }; say so ($p1, $p2).status ~~ Kept

[21:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «No such method 'status' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[21:10] <timotimo> oh btw

[21:10] <Xliff> m: my (Promise $p1, Promise $p2) = Promise.new xx 2 ==> map { .keep or $_ }; say all($p1, $p2).status ~~ Kept

[21:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[21:10] <timotimo> m: my ($p1, $p2, $p3) = Promise.kept xx 3; say all($p1, $p2, $p3).status ~~ Kept

[21:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «True␤»

[21:10] <timotimo> m: my ($p1, $p2, $p3) = Promise.kept xx 3; $p2 = Promise.broken; say all($p1, $p2, $p3).status ~~ Kept

[21:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «False␤»

[21:11] <Xliff> timotimo++

[21:11] <timotimo> Promise.kept and Promise.broken are better than promise.nex map .keep/.break :)

[21:13] *** johnjohn101 left
[21:15] <Kaiepi> huh, i didn't know you could access attributes on junctions like that

[21:18] <nadim> timotimo: yes it worked

[21:25] *** molaf left
[21:31] <nadim> timotimo:  I see why you want :flat(0)

[21:35] <timotimo> Kaiepi: method calls autothread through junctions just like subs and operators do

[21:37] <timotimo> junctions are super cool.

[21:38] *** ChoHag_ joined
[21:38] *** ChoHag left
[21:39] *** dolmen left
[21:44] *** dolmen joined
[21:45] <patrickb> Kaiepi: Some days ago you wrote something about having a mentor. I'm not sure, but I think the TPF grants don't usually come with a mentor.

[21:45] <Kaiepi> they don't?

[21:46] <Kaiepi> i thought coke mentioned they did

[21:46] <patrickb> I might be wrong...

[21:47] *** reach_satori_ joined
[21:48] <timotimo> you get a grant manager who you keep up to date on progress and such

[21:48] <timotimo> that's more of an administrative thing, though

[21:48] <patrickb> I just thought I'd mention so you're not disappointed by wrong expectations.

[21:49] <patrickb> That doesn't mean you'll not get help by simply asking. :-)

[22:06] *** rindolf left
[22:15] *** antoniogamiz left
[22:25] *** mowcat joined
[22:27] *** Manifest0 left
[22:27] *** xinming joined
[22:29] *** pmurias left
[22:33] *** Manifest0 joined
[22:34] *** dolmen left
[22:42] *** Manifest0 left
[22:47] *** patrickb left
[22:48] *** Manifest0 joined
[23:02] *** espadrine_ left
[23:03] *** Manifest0 left
[23:04] *** pecastro left
[23:04] *** Sgeo left
[23:05] *** Sgeo joined
[23:08] *** Manifest0 joined
[23:12] *** Manifest0 left
[23:14] *** netrino_ left
[23:17] *** Manifest0 joined
[23:32] *** Manifest0 left
[23:35] *** aborazmeh joined
[23:35] *** aborazmeh left
[23:35] *** aborazmeh joined
[23:36] *** ChoHag_ left
[23:38] *** Manifest0 joined
[23:44] <vrurg> anybody with openbsd on his hands?

[23:44] <noisegul> Yes

[23:45] *** Manifest0 left
[23:45] <vrurg> what make is the default? BSD?

[23:45] <SmokeMachine> .tell sena_kun Cro::HTTP::Session::Red seems to be working... :) I just need some tests now...

[23:45] <yoleaux> SmokeMachine: I'll pass your message to sena_kun.

[23:46] <noisegul> vrurg: Yeah it's regular make, not gnu make, https://man.openbsd.org/make

[23:47] <vrurg> noisegul: Thanks! I will assume all BSDs are using it by default.

[23:47] <vrurg> Except for darwin, though. ;)

[23:49] *** imcsk8 left
[23:50] *** Manifest0 joined
[23:50] <noisegul> vrurg: FreeBSD uses it's own make as well, openBSDs is the most basic to the extend that I use them, so it should work everywhere else, the other way around one has to be a bit more careful

[23:50] <noisegul> vrurg: no problem

[23:51] *** imcsk8 joined
[23:56] *** Manifest0 left
