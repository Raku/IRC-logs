[00:00] <Xliff> DayMargin?

[00:01] <guifa> hmm, what about

[00:02] <guifa> role Inexact {¬†method margin ( ‚Äî> Range)  {‚Ä¶}¬†}

[00:02] <Xliff> Ah! Not bad! :)

[00:02] <Xliff> Did you really need any help?

[00:02] <guifa> Sometimes talking it out with someone else helps haha

[00:03] <guifa> So thanks for being that person :-)

[00:03] * guifa is actually kinda surprised that the ICU library doesn‚Äôt contemplate the errors in calendar conversion much, seems like a good way to make the P6 library even better

[00:12] *** wildtrees left
[00:13] <Xliff> :)

[00:17] *** benjif joined
[00:17] *** MilkmanDan left
[00:25] *** MilkmanDan joined
[00:34] *** benjif left
[00:35] *** Black_Ribbon joined
[00:38] *** d84 left
[01:01] *** lucasb left
[01:08] *** molaf left
[01:20] *** MasterDuke left
[01:21] *** ChoHag left
[01:21] *** molaf joined
[01:22] *** ChoHag joined
[01:26] <elcaro> guifa: just playing around with a parameterized role: https://gist.github.com/0racle/c32fc7f9c11d6a0dbe59c9f5cc389611

[01:40] *** Actualeyes left
[01:40] *** Actualeyes joined
[01:50] *** AlexDani` joined
[01:51] *** Kaiepi joined
[01:54] *** AlexDaniel left
[01:58] *** p9s```` left
[02:20] *** squashable6 left
[02:21] *** Cabanossi left
[02:23] *** squashable6 joined
[02:23] *** ChanServ sets mode: +v squashable6

[02:23] *** Cabanossi joined
[02:26] *** cpan-p6 left
[02:27] *** cpan-p6 joined
[02:27] *** cpan-p6 left
[02:27] *** cpan-p6 joined
[02:39] *** benjif joined
[02:58] *** hythm joined
[02:58] *** epony left
[02:59] <hythm> Is it possible to add a new enum value to an exisiting `Enum`?

[03:04] <hythm> I'm asking because I'm using a module that has enum `Loglevels`, and I want to add another loglevel

[03:09] <hythm> m: enum E < A B >; E.^add_enum_value: 'E'

[03:09] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Cannot find method 'key' on object of type Str‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:11] <hythm> figured, enum E < A B >; E.^add_enum_value: 'C' => 2

[03:28] *** softmoth left
[03:42] *** stu002 joined
[04:02] *** Black_Ribbon left
[04:05] <elcaro> hythm: you might get a better response during U.S. daytime hours. In the mean time...

[04:05] <elcaro> I tried this and it works, though it definitely feels like a hack job

[04:05] <elcaro> my enum Levels ¬´ { my enum Levels < A B >; |Levels.enums.keys, < C > } ¬ª; say Levels.enums;

[04:05] <evalable6> elcaro, rakudo-moar 7e76762c5: OUTPUT: ¬´Map.new((A => 0, B => 1, C => 2))‚ê§¬ª

[04:05] <elcaro> but that probably doesn't help much if your enum is being imported from another function :/

[04:06] *** sno left
[04:07] <hythm> eclaro, yeah I tired that at first but it did not work, I thin it became different Type and the imported module did not recognize it

[04:08] <hythm> I think I was able to do it with: ` enum E < A B >; E.^add_enum_value: 'C' => 2`

[04:08] <hythm> m:  enum E < A B >; E.^add_enum_value: 'C' => 2

[04:08] <camelia> rakudo-moar 7e76762c5: ( no output )

[04:08] <hythm> m:  enum E < A B >; E.^add_enum_value: 'C' => 2; E.enums.say

[04:08] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Map.new((A => 0, B => 1, C => 2))‚ê§¬ª

[04:10] <hythm> its documented here https://docs.perl6.org/type/Metamodel::EnumHOW

[04:12] <hythm> actually what I tried first was not exactly as you mentioned, but similar

[04:26] *** hythm left
[04:39] *** Doc_Holliwood joined
[04:43] *** ZzZombo joined
[04:46] *** reach_satori_ left
[04:47] <guifa> elcaro: didn‚Äôt think about using parameterized, but that‚Äôs a great use case for it

[04:47] <guifa> (see this is why I think outloud on #perl haha)

[05:06] *** jmerelo joined
[05:08] *** ZzZombo left
[05:09] *** ZzZombo joined
[05:17] <Geth_> ¬¶ doc/master: 4 commits pushed by (Greg Donald)++, (Juan Juli√°n Merelo Guerv√≥s)++

[05:17] <Geth_> ¬¶ doc/master: 94ec644c81 | Roles can also be mixed in using 'is'.

[05:17] <Geth_> ¬¶ doc/master: 4b5ee0ac73 | Clarify the difference between using is and does.

[05:17] <Geth_> ¬¶ doc/master: 06afd51dae | Add 'which', which sounds better.

[05:17] <Geth_> ¬¶ doc/master: b9a8e1d419 | Merge pull request #3048 from gdonald/roles-is-or-does

[05:17] <Geth_> ¬¶ doc/master: review: https://github.com/perl6/doc/compare/bec6bdb7c004...b9a8e1d41987

[05:20] *** reach_satori joined
[05:26] *** wamba joined
[05:34] *** Doc_Holliwood left
[05:35] *** macaronus joined
[05:45] <Geth_> ¬¶ doc: 423c94bd57 | (JJ Merelo)++ | doc/Type/Hash.pod6

[05:45] <synopsebot> Link: https://doc.perl6.org/type/Hash

[05:45] <Geth_> ¬¶ doc: Reflowing while revising #2632

[05:45] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/423c94bd57

[05:45] <Geth_> ¬¶ doc: 0a009349cb | (JJ Merelo)++ | doc/Type/Any.pod6

[05:45] <Geth_> ¬¶ doc: Adds examples of min working on Hashes #2632

[05:45] <synopsebot> Link: https://doc.perl6.org/type/Any

[05:45] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/0a009349cb

[05:45] <Geth_> ¬¶ doc: 19cbd79a20 | (JJ Merelo)++ | doc/Type/Any.pod6

[05:45] <Geth_> ¬¶ doc: Adds examples of max working on Hashes #2632

[05:45] <Geth_> ¬¶ doc: review: https://github.com/perl6/doc/commit/19cbd79a20

[05:46] <jmerelo> If you want to work towards your Hacktoberfest tee, take a look at this issue in the documentation https://github.com/perl6/doc/issues/2632 there are lots of things that can be done, some of them very easy

[06:13] *** webart left
[06:14] *** ZzZombo_ joined
[06:16] *** ZzZombo left
[06:16] *** ZzZombo_ is now known as ZzZombo

[06:29] *** wamba left
[06:37] *** epony joined
[06:46] *** reach_satori left
[06:56] *** reach_satori joined
[07:05] *** reach_satori left
[07:06] *** wamba joined
[07:10] *** krychu left
[07:22] *** kensanata joined
[07:27] *** molaf left
[07:52] *** epony left
[07:54] *** epony joined
[08:00] *** zakharyas joined
[08:09] *** dakkar joined
[08:21] *** Cabanossi left
[08:32] *** Cabanossi joined
[08:36] *** ZzZombo_ joined
[08:39] *** ZzZombo left
[08:39] *** ZzZombo_ is now known as ZzZombo

[08:44] *** stu002 left
[08:46] *** ZzZombo_ joined
[08:48] *** ZzZombo left
[08:48] *** ZzZombo_ is now known as ZzZombo

[09:03] *** molaf joined
[09:13] <ZzZombo> Hello again, folks! Is there anything what can let you embed Perl 6 into other applications yet?

[09:14] *** epony left
[09:14] <Xliff> m: say 1350 / 270

[09:14] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5‚ê§¬ª

[09:14] <Xliff> m: say 1350 / 450

[09:14] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´3‚ê§¬ª

[09:15] *** epony joined
[09:19] *** reach_satori joined
[09:20] *** pecastro joined
[09:24] *** zakharyas left
[09:26] *** zakharyas joined
[09:27] <SmokeMachine> m: class C { method a { 1,2,3 }; method b { $.a }; method c { @.a } }

[09:27] <camelia> rakudo-moar 7e76762c5: ( no output )

[09:27] <SmokeMachine> m: class C { method a { 1,2,3 }; method b { $.a }; method c { @.a } }; dd C.a; dd C.b; dd C.c

[09:27] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(1, 2, 3)‚ê§$(1, 2, 3)‚ê§(1, 2, 3)‚ê§¬ª

[09:29] *** ZzZombo left
[09:37] <SmokeMachine> .tell ugexe Hi, I'm thinking of PRing something like this on zef (it still is using `no precompilation` and I'll try to fiz that before PRing) that way I think it will be easier to use zef inside of other code... what do you think about that? https://github.com/FCO/zef/commit/1c95922ad6897a302f76e5bf8c1fc7b6d7c220e0

[09:37] <tellable6> SmokeMachine, I'll pass your message to ugexe

[09:38] <SmokeMachine> s/fiz/fix/

[09:38] <SmokeMachine> (again... :( )

[09:51] *** rindolf5 joined
[09:52] *** rindolf5 left
[09:57] <Xliff> m: my @a = (0, 90, *+180 ... Inf); say @[^5]

[09:57] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´[0 1 2 3 4]‚ê§¬ª

[09:57] <Xliff> m: my @a = (0, 90, *+180 ... Inf); say @a[^5]

[09:57] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(0 90 270 450 630)‚ê§¬ª

[10:00] <lizmat> Xliff: Method::Also 0.03 on its way to CPAN

[10:01] <Xliff> lizmat++

[10:03] *** ZzZombo joined
[10:04] <cpan-p6> New module released to CPAN! Method::Also (0.0.3) by 03ELIZABETH

[10:11] *** molaf left
[10:11] <Xliff> m: my @a = (0, 90, *+180 ... Inf); say @a.first: * > 182

[10:11] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´270‚ê§¬ª

[10:11] <Xliff> m: my @a = (0, 90, *+180 ... Inf); say @a.first: * > 182, :k

[10:11] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´2‚ê§¬ª

[10:16] <Xliff> m: my @a = (0, 90, *+180 ... Inf); say @a.first: 182 > *, :k

[10:16] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´0‚ê§¬ª

[10:23] *** reach_satori left
[10:24] *** softmoth joined
[10:24] *** AlexDani` is now known as AlexDaniel

[10:24] *** AlexDaniel left
[10:24] *** AlexDaniel joined
[10:34] <jmerelo> SmokeMachine: zef hasn't changed too much in the last few months... I would say either go ahead and do the PR, or else create a fork with your PR included.

[10:34] <jmerelo> SmokeMachine: as a matter of fact, I've wanting to have that kind of thing for a really long time so that zef could be subclassed.

[10:35] <Xliff> https://github.com/Xliff/p6-CardDeck

[10:36] <Xliff> Installation instructions are on the project page.

[10:36] <Xliff> They are just demos, though. For now.

[10:36] <jmerelo> Xliff: can't you just install prerrequisites from the ecosystem?

[10:37] <jmerelo> Xliff: apart from that, nifty!

[10:37] <Xliff> jmerelo: No.

[10:37] <jmerelo> Xliff: but do you mean gtk itself, or also Pango and so on...

[10:37] <SmokeMachine> jmerelo: yes, that would make 6pm much easier! :)

[10:37] <Xliff> Because some of the prereq packages are NOT IN the ecosystem.

[10:37] <Xliff> jmerelo: Pango, GtkPlus and Clutter

[10:38] <Xliff> jmerelo: Check the instructions and let me know if they need work.

[10:38] <jmerelo> Xliff: so you can't just go zef install Pango (after installing the gtk libraries...)

[10:38] <Xliff> No.

[10:38] <SmokeMachine> jmerelo: But I'll still try to remove the `no precompilation` before PRing...

[10:38] <jmerelo> Xliff: I'll try to find the time...

[10:38] <Xliff> And you need the native libs, too.

[10:38] <Xliff> jmerelo: What distro?

[10:38] <jmerelo> Xliff: I use Ubuntu.

[10:39] <Xliff> OK. So do I. Let me update.

[10:40] <jmerelo> SmokeMachine: librarifying zef would be A Good Thing. Keeping up with upstream might be a bit more difficult, but nothing that git can't handle. 

[10:40] <jmerelo> SmokeMachine: and 6pm is A Good Thing too.

[10:42] <Xliff> jmerelo: Done

[10:45] *** wamba left
[10:51] *** zakharyas left
[10:52] *** wamba joined
[10:52] *** zakharyas joined
[11:04] *** zakharyas left
[11:04] *** wamba left
[11:08] *** wamba joined
[11:13] <SmokeMachine> jmerelo: or maybe we could do something like this:

[11:13] <SmokeMachine> m: module Librerify { use Zef::CLI; for &MAIN.candidates>>.signature>>.params { my @params = .self; my $cmd = @params.shift.constraint_list().head() if @params.head.constraint_list ~~ { .elems == 1 && .head ~~ Str }; say "sub $cmd\(|c ({@params>>.gist.join: ", "})) \{ MAIN |c \}"}}

[11:13] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´sub fetch(|c (Bool :$force, *@identities (Any $, *@))) { MAIN |c }‚ê§Use of uninitialized value element of type Any in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§sub test(|c (Bool :$f‚Ä¶¬ª

[11:14] <SmokeMachine> jmerelo:  https://www.irccloud.com/pastebin/xJyqQ0Wb/

[11:25] <SmokeMachine> m: module Librerify { use Zef::CLI; my %cmds = do for &MAIN.candidates>>.signature>>.params { my @params = .self; my $cmd = @params.shift.constraint_list().head() if @params.head.constraint_list ~~ { .elems == 1 && .head ~~ Str }; $cmd => &MAIN.assuming($cmd) if $cmd }; %cmds<install>("Red")}

[11:25] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´===> Searching for: Red‚ê§Failed to update cpan mirror No such method 'IO' for invocant of type 'Any'‚ê§No candidates found matching identity: Red‚ê§Failed to update cpan mirror No such method 'IO' for invocant of type 'Any'‚ê§Failed to update p6c mir‚Ä¶¬ª

[11:25] <SmokeMachine> jmerelo: ^^

[11:25] <SmokeMachine> https://www.irccloud.com/pastebin/unpQwUSH/

[11:26] <SmokeMachine> and we can just export that hash...

[11:29] <SmokeMachine> I think I'll create the Librerify module... :)\

[11:30] <jmerelo> SmokeMachine: that would be cool :-)

[11:39] <SmokeMachine> https://www.irccloud.com/pastebin/O72fdaZg/

[11:41] <Xliff> m: use Zef::CLI;

[11:41] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Zef - Perl6 Module Management‚ê§‚ê§USAGE‚ê§‚ê§    zef [flags|options] command [args]‚ê§‚ê§‚ê§COMMANDS‚ê§‚ê§    install                 Install specific dependencies by name or path‚ê§    uninstall               Uninstall specified distributions‚ê§    ‚Ä¶¬ª

[11:42] <Xliff> m: use Zef::CLI; my %cmds = do for &MAIN.candidates>>.signature>>.params { my @params = .self; my $cmd = @params.shift.constraint_list().head() if @params.head.constraint_list ~~ { .elems == 1 && .head ~~ Str }; $cmd => &MAIN.assuming($cmd) if $cmd }; %cmds.keys.say

[11:42] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(nuke smoke search rdepends test uninstall update look install locate build info list upgrade fetch)‚ê§Zef - Perl6 Module Management‚ê§‚ê§USAGE‚ê§‚ê§    zef [flags|options] command [args]‚ê§‚ê§‚ê§COMMANDS‚ê§‚ê§    install                 Install speci‚Ä¶¬ª

[11:43] *** squashable6 left
[11:43] <Xliff> SmokeMachine: You need to do something to suppress the usage, tho...

[11:45] <SmokeMachine> Xliff: until now, generically:

[11:45] <SmokeMachine> https://www.irccloud.com/pastebin/ldYRYfg5/

[11:46] *** sftp left
[11:47] *** squashable6 joined
[11:47] *** ChanServ sets mode: +v squashable6

[11:47] *** sftp joined
[12:22] *** pat_js joined
[12:24] *** aborazmeh joined
[12:24] *** aborazmeh left
[12:24] *** aborazmeh joined
[12:29] <Xliff> m: [**](3, 6, 9).say

[12:29] *** abraxxa joined
[12:29] <Xliff> m: say [**](3, 6, 9)

[12:29] *** reach_satori joined
[12:29] *** pat_js left
[12:29] <Xliff> m: say [*](3, 6, 9)

[12:29] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(timeout)¬ª

[12:29] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(timeout)¬ª

[12:29] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´162‚ê§¬ª

[12:30] <Xliff> m: say 3 ** 6

[12:30] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´729‚ê§¬ª

[12:30] <Xliff> m: say [*](3, 6, 2)

[12:30] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´36‚ê§¬ª

[12:30] <Xliff> m: say [**](3, 6, 2)

[12:30] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´150094635296999121‚ê§¬ª

[12:31] <Xliff> m: say [**](1, 2, 2, 4)

[12:31] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´1‚ê§¬ª

[12:31] *** Guest93 joined
[12:31] <Xliff> m: say [**](2, 2, 2, 4)

[12:31] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´20035299304068464649790723515602557504478254755697514192650169737108940595563114530895061308809333481010382343429072631818229493821188126688695063647615470291650418719163515879663472194429309279820843091048559905701593189596395248633723672030029169695‚Ä¶¬ª

[12:31] <Xliff> m: say [**](2, 2, 2)

[12:31] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´16‚ê§¬ª

[12:32] <Xliff> m: say 16 ** 3

[12:32] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´4096‚ê§¬ª

[12:32] *** kurahaupo left
[12:32] *** EuAndreh[m] left
[12:32] *** TravisRt2botio[m left
[12:32] *** Matthew[m] left
[12:32] <Xliff> m: say 16 ** 4

[12:32] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´65536‚ê§¬ª

[12:33] *** sftp left
[12:33] <Xliff> m: say [**](2, 2, 2, 1)

[12:33] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´16‚ê§¬ª

[12:33] <Xliff> m: say [**](2, 2, 2, 4)

[12:33] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´20035299304068464649790723515602557504478254755697514192650169737108940595563114530895061308809333481010382343429072631818229493821188126688695063647615470291650418719163515879663472194429309279820843091048559905701593189596395248633723672030029169695‚Ä¶¬ª

[12:33] *** abraxxa left
[12:33] <Xliff> ^^^ WTF?

[12:33] <Xliff> m: say [**](2, 2, 2, 3)

[12:33] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´115792089237316195423570985008687907853269984665640564039457584007913129639936‚ê§¬ª

[12:34] <Xliff> m: say [**](2, 2, 2, 2)

[12:34] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´65536‚ê§¬ª

[12:34] *** xliff[m] left
[12:34] <Xliff> m: say [**](2, 2, 2)

[12:34] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´16‚ê§¬ª

[12:34] <Xliff> m: say [*](2, 2, 2, 2)

[12:34] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´16‚ê§¬ª

[12:35] <Xliff> m: say [**](2, 2, 2, 2)

[12:35] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´65536‚ê§¬ª

[12:35] <SmokeMachine> m: require Zef::CLI

[12:35] <camelia> rakudo-moar 7e76762c5: ( no output )

[12:36] <SmokeMachine> m: module A { require Zef::CLI }

[12:36] <Xliff> m: say [**](2, 4)

[12:36] <camelia> rakudo-moar 7e76762c5: ( no output )

[12:36] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´16‚ê§¬ª

[12:36] <Xliff> m: say [**](2, 2, 4)

[12:36] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´65536‚ê§¬ª

[12:36] *** matiaslina left
[12:36] *** wamba left
[12:37] *** kurahaupo joined
[12:37] *** xliff[m] joined
[12:37] *** sftp joined
[12:38] *** matiaslina joined
[12:38] *** Matthew[m] joined
[12:38] *** TravisRt2botio[m joined
[12:39] *** EuAndreh[m] joined
[12:41] <SmokeMachine> odd... https://www.irccloud.com/pastebin/59r0bHTk/

[12:48] *** abraxxa joined
[12:52] *** kurahaupo left
[12:52] *** xliff[m] left
[12:53] *** xliff[m] joined
[12:56] *** kurahaupo joined
[12:58] *** matiaslina left
[12:59] *** matiaslina joined
[12:59] *** Actualeyes left
[12:59] *** Actualeyes joined
[13:02] *** wamba joined
[13:08] *** aborazmeh left
[13:11] *** zakharyas joined
[13:30] *** aborazmeh joined
[13:30] *** aborazmeh left
[13:30] *** aborazmeh joined
[13:30] *** ChoHag left
[13:31] <kybr> ackermann's?

[13:31] *** ChoHag joined
[13:38] *** ChoHag left
[13:40] *** ChoHag joined
[13:42] <SmokeMachine> https://www.irccloud.com/pastebin/cePyfFdi/

[13:48] <kawaii> I figured out how to use `.IO.watch` to monitor a directory for "things", how can I filter the supply so I only get alerted on `FileChanged` events?

[13:49] <kawaii> and is there an easy way to just `.slurp` the file which was modified/created?

[13:50] <masak> kawaii: .grep ? (to your first question)

[13:50] *** vrurg_ joined
[13:50] <masak> second, just slurp it...?

[13:51] *** guifa_ joined
[13:51] *** stux|RC-- joined
[13:51] * masak .oO( masak, you make it sound so easy! )

[13:51] *** hernan604 joined
[13:53] *** eaterof joined
[13:53] *** astronavt___ joined
[13:53] <SmokeMachine> m: start react whenever "/tmp".IO.watch.grep: { .event ~~ FileChangeEvent::FileChanged } { .&dd }; "/tmp/bla".IO.spurt: "bla"; sleep 1

[13:53] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´IO::Notification::Change.new(path => "/tmp/bla", event => FileChangeEvent::FileChanged)‚ê§IO::Notification::Change.new(path => "/tmp/bla", event => FileChangeEvent::FileChanged)‚ê§IO::Notification::Change.new(path => "<tmp>", event => FileChangeEvent:‚Ä¶¬ª

[13:53] *** tony-o_ joined
[13:53] *** xi joined
[13:53] *** DrForr_ joined
[13:54] <SmokeMachine> kawaii: ^^

[13:54] *** Sharparam_ joined
[13:54] *** ccntrq- joined
[13:54] *** Util_ joined
[13:55] *** broquaint joined
[13:55] *** literal_ joined
[13:55] *** gks joined
[13:55] *** astronavt left
[13:55] *** guifa left
[13:55] *** eater left
[13:55] *** ChoHag left
[13:55] *** MilkmanDan left
[13:55] *** stux|RC left
[13:55] *** cibs left
[13:55] *** KotH left
[13:55] *** vrurg left
[13:55] *** broquain1 left
[13:55] *** kawaii left
[13:55] *** renormalist left
[13:55] *** cgfbee left
[13:55] *** xi- left
[13:55] *** hernan605 left
[13:55] *** shlomif left
[13:55] *** rindolf left
[13:55] *** tadzik left
[13:55] *** KotH joined
[13:55] *** vrurg_ is now known as vrurg

[13:55] *** guifa_ is now known as guifa

[13:55] *** cibs joined
[13:55] *** shlomif joined
[13:55] *** kawaii joined
[13:56] *** rindolf joined
[13:57] *** tadzik joined
[13:58] *** mornfall joined
[13:58] *** epony left
[13:58] *** cgfbee joined
[14:01] *** MilkmanDan joined
[14:02] *** cpan-p6 left
[14:04] *** lucasb joined
[14:05] *** ChoHag joined
[14:07] *** cpan-p6 joined
[14:07] *** cpan-p6 left
[14:07] *** cpan-p6 joined
[14:11] *** rindolf3 joined
[14:11] <rindolf3> Hi all

[14:13] *** aborazmeh left
[14:19] <Kaiepi> there's some stuff with how sockets get closed i need to deal with first, but udp, unix, and raw socket support for IO::Socket::INET is the next stage of my grant work üëÄ

[14:27] *** wamba left
[14:28] *** Doc_Holliwood joined
[14:41] *** rindolf3 left
[14:46] *** _jrjsmrtn joined
[14:46] *** __jrjsmrtn__ left
[14:51] *** pmurias joined
[14:51] <pmurias> SmokeMachine: I found the issue with your 6pad

[14:52] <SmokeMachine> pmurias: great! what was it?

[14:53] *** ChoHag left
[14:53] *** ChoHag_ joined
[14:53] <pmurias> SmokeMachine: there seems to be some issue with passing $result to the second promise

[14:53] <pmurias> if you pass a number like 42 in the first then it works fine

[14:54] <SmokeMachine> hum! so the problem is on serialising the fetch result?

[14:54] *** MilkmanDan left
[14:55] <pmurias> investigating it deeper now

[14:56] <SmokeMachine> https://usercontent.irccloud-cdn.com/file/TFFK3f61/image.png

[14:57] <SmokeMachine> pmurias: maybe the ReadableStream?

[14:59] <pmurias> my intution is that an exception is being lost

[15:03] *** MilkmanDan joined
[15:06] <pmurias> SmokeMachine: the .result.say is not working because it's calling a say method on a wrapped js object that doesn't have one

[15:07] <SmokeMachine> pmurias: but shouldn't it receive the promise itself?

[15:07] <SmokeMachine> m: Promise.in(1).then: .result.say

[15:07] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´No such method 'result' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:07] <SmokeMachine> m: Promise.in(1).then: *.result.say

[15:07] <camelia> rakudo-moar 7e76762c5: ( no output )

[15:08] <SmokeMachine> m: await Promise.in(1).then: *.result.say

[15:08] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´True‚ê§¬ª

[15:08] <SmokeMachine> m: await Promise.kept(42).then: *.result.say

[15:08] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´42‚ê§¬ª

[15:08] <SmokeMachine> I was wrong...

[15:08] <SmokeMachine> Was that always that way?

[15:09] <pmurias> I haven't used Promises in Perl 6 before

[15:09] <pmurias> I haven't worked *in* Perl 6 as opposed to working *on* it that much

[15:09] <pmurias> why are exceptions in a Promise.then *IGNORED*?

[15:10] <SmokeMachine> no, that's right!

[15:10] <SmokeMachine> m: await Promise.kept(42).then: *.say

[15:10] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Kept)‚ê§¬ª

[15:10] <SmokeMachine> pmurias: it isn't if you are using await

[15:11] <SmokeMachine> m: await Promise.broken: test

[15:11] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    test used at line 1‚ê§‚ê§¬ª

[15:11] <SmokeMachine> wrong method

[15:12] <SmokeMachine> m: await Promise. broken: "test"

[15:12] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§    test‚ê§      in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:12] <SmokeMachine> pmurias: ^^

[15:12] <SmokeMachine> m: await Promise. broken: *.result

[15:12] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´WhateverCode object coerced to string (please use .gist or .perl to do that)‚ê§  in block <unit> at <tmp> line 1‚ê§An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§‚ê§      in block <unit> at <tmp> line 1‚Ä¶¬ª

[15:12] <SmokeMachine> pmurias: or if you .result it

[15:12] <pmurias> ah ok

[15:13] <pmurias> SmokeMachine: so this solves the puzzle of you example

[15:13] <SmokeMachine> m: await Promise. broken("test").then: *.result

[15:13] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§    Tried to get the result of a broken Promise‚ê§‚ê§    Original exception:‚ê§        test‚ê§‚ê§¬ª

[15:13] <pmurias> you where calling .result.say, and the .result had no say method

[15:14] <SmokeMachine> pmurias: yes, that makes sense... what about the JSWrapped obj being a Any?

[15:14] <SmokeMachine> m: Any.say

[15:14] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(Any)‚ê§¬ª

[15:17] *** wildtrees joined
[15:18] <pmurias> SmokeMachine: I guess it should at least implement all the Mu methods

[15:19] <SmokeMachine> pmurias: with the updated version, it's working...https://perl6.github.io/6pad/#9789cd026063730cd45d617aaa2d489f

[15:21] *** Cabanossi left
[15:21] <pmurias> SmokeMachine: I would have to think if adding the whole kitchen sink (and some garbage) from Any onto every wrapped js object makes sense

[15:23] <kawaii> I don't suppose there's a way to make `IO::Notification` ignore `FileChanged` if it's a delete event?

[15:24] <kawaii> I use `FileChanged` triggers to detect when there's a new file in a dir, and then after I'm done with it I want to use `unlink` to remove it

[15:24] <kawaii> but that triggers another FileChanged event and my program crashes since I'm using FileChanged elsewhere to slurp the file in the first place

[15:25] <kawaii> https://www.irccloud.com/pastebin/7vdKxR3r/

[15:29] *** Cabanossi joined
[15:29] <jnthn> kawaii: There's not, though in general, the file could get removed between you getting the notification and you trying to read it anyway. The only thing for these cases is to make sure you handle any exceptions that arise.

[15:33] <kawaii> jnthn: mmm thanks for that, will just have to catch it :)

[15:33] <ZzZombo> What is this: `.&dd`? What syntax?

[15:34] <SmokeMachine> pmurias: finally! https://perl6.github.io/6pad/#9789cd026063730cd45d617aaa2d489f

[15:35] *** stux|RC-- left
[15:35] *** stux|RC joined
[15:36] <jnthn> ZzZombo: Call the sub &dd passing the thing to the left of the . as the first argument

[15:37] <ZzZombo> m: 1.&say

[15:37] <SmokeMachine> m: dd 42; dd [42]; 42.&dd; sub print-something-diferent($something) { say "print $something in a different way" }; print-something-diferent 42; 42.& print-something-diferent

[15:37] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´1‚ê§¬ª

[15:37] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3ay" }; print-something-diferent 42; 42.&7‚èè5 print-something-diferent‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement ‚Ä¶¬ª

[15:37] <jnthn> ZzZombo: Though in general in `.&foo` then &foo can be anything invokable, and if it's a Method then it's just a dynamic method call, identifying the code to call

[15:38] <SmokeMachine> m: dd 42; dd [42]; 42.&dd; sub print-something-diferent($something) { say "print $something in a different way" }; print-something-diferent 42; 42.&print-something-diferent

[15:38] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´42‚ê§print 42 in a different way‚ê§print 42 in a different way‚ê§Array element = [42]‚ê§42‚ê§¬ª

[15:39] <ZzZombo> Okay.

[15:40] *** Doc_Holliwood left
[15:42] *** wamba joined
[15:49] *** kensanata left
[15:53] *** NorthernMonster joined
[15:54] *** Doc_Holliwood joined
[15:55] <NorthernMonster> is Perl the 6th still compiled and alive, nothing new since March

[15:55] <Juerd> NorthernMonster: To find out what's new in Perl 6, read https://p6weekly.wordpress.com/

[15:56] <timotimo> we've been having a bit of a hold-up with releases

[15:56] <Juerd> There's a new one almost every Monday

[15:57] <jmerelo> NorthernMonster: Rakudo Star has not released a new version, but the regular Rakudo has seen at least one...

[15:57] <tony-o_> guifa: wrt the perl is dying article, the first example he gives of perl doing things wrong is him not understanding how HTTP headers work and programming it incorrectly.  that's his problem, not perl's and that bug would happen regardless of programming language if he terminated headers with only \n

[15:57] <jmerelo> tony-o_: plus using CGI as an example is sooo 90s... 

[15:58] <tony-o_> yea but that part is fine, people have to maintain old code

[15:58] <tony-o_> and in the 90s cgi made that $ 

[15:58] *** gtodd joined
[16:00] <Grinnz> CGI isn't really the problem, it's CGI.pm, even though its not a bad idea to talk about it for legacy code, it's still a good idea to explain the huge caveats every time you do so (as the documentation does)

[16:02] *** wamba left
[16:02] *** wamba joined
[16:11] *** pmurias left
[16:16] <cpan-p6> New module released to CPAN! Markit (0.0.1) by 03UZLUISF

[16:16] *** pat_js joined
[16:16] *** NorthernMonster left
[16:18] <Kaiepi> m: use MONKEY-SEE-NO-EVAL; EVAL 'our $foo = 1'; say OUR::.keys

[16:18] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´($foo)‚ê§¬ª

[16:19] <Kaiepi> m: sub foo { use MONKEY-SEE-NO-EVAL; EVAL 'our $foo = 1'; }; foo; say OUR::.keys

[16:19] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´($foo)‚ê§¬ª

[16:20] <Kaiepi> m: use MONKEY-SEE-NO-EVAL; EVAL 'our $foo = 1'; EVAL 'say OUR::.keys';

[16:20] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´($foo)‚ê§¬ª

[16:20] *** zakharyas left
[16:21] <Kaiepi> i could've sworn i've had code basically doing this not end up with $foo in OUR at some point

[16:21] <Kaiepi> bisectable6, use MONKEY-SEE-NO-EVAL; EVAL 'our $foo = 1'; EVAL 'say OUR::.keys'

[16:21] <bisectable6> Kaiepi, On both starting points (old=2015.12 new=7e76762) the exit code is 0 and the output is identical as well

[16:21] <bisectable6> Kaiepi, Output on both points: ¬´($foo)‚ê§¬ª

[16:22] <Xliff>  m: ('a'...'z').sort( rand ).say

[16:22] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Cannot resolve caller sort(Seq:D: Num:D); none of these signatures match:‚ê§    ($: *%_)‚ê§    ($: &by, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:22] <Xliff>  m: ('a'...'z').sort( *.rand ).say

[16:22] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5a' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:22] <Xliff>  m: ('a'...'z').sort( rand(*) ).say

[16:23] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling rand(Whatever) will never work with signature of the proto (*%)‚ê§at <tmp>:1‚ê§------> 3('a'...'z').sort( 7‚èè5rand(*) ).say‚ê§¬ª

[16:23] <Xliff>  m: ('a'...'z').sort( rand() ).say

[16:23] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of rand(); in Perl 6 please use rand‚ê§at <tmp>:1‚ê§------> 3('a'...'z').sort( rand7‚èè5() ).say‚ê§¬ª

[16:23] <Xliff>  m: ('a'...'z').sort( rand ).say

[16:23] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Cannot resolve caller sort(Seq:D: Num:D); none of these signatures match:‚ê§    ($: *%_)‚ê§    ($: &by, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:23] <Xliff>  m: ('a'...'z').sort({ rand }).say

[16:23] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(o k s p c d w m v f h x b t u i j l y e a n q r g z)‚ê§¬ª

[16:34] <moritz> m: say ('a'...'z').sort(&term:rand)

[16:34] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    term:rand used at line 1‚ê§‚ê§¬ª

[16:34] <moritz> m: say ('a'...'z').sort(&term:<rand>)

[16:34] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    term:<rand> used at line 1. Did you mean 'term:<now>', 'term:<time>'?‚ê§‚ê§¬ª

[16:34] *** vike left
[16:34] *** hythm joined
[16:34] *** patrickb joined
[16:35] *** dakkar left
[16:35] <Kaiepi> m: use MONKEY-SEE-NO-EVAL; EVAL 'my $foo = 1'; EVAL 'say MY::.keys';

[16:35] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(EXPORT ::?PACKAGE $_ GLOBALish !EVAL_MARKER $?PACKAGE $=pod !UNIT_MARKER)‚ê§¬ª

[16:36] *** hythm_ joined
[16:37] <hythm_> m: enum E <A B>; E.add_enum_value( 'C' => 2);  say C;

[16:37] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    C used at line 1‚ê§‚ê§¬ª

[16:37] <Kaiepi> add_enum_value doesn't create any lexical symbols

[16:38] <hythm_> so its not possible to add a value to enum and Access it?

[16:39] *** hythm left
[16:39] <Kaiepi> there is a way, but it depends on rakudo's internals

[16:40] <hythm_> is it documented?

[16:40] <Kaiepi> no, but there's an issue open for it

[16:40] <hythm_> thanks, will check the issues

[16:41] *** Doc_Holliwood left
[16:41] <Kaiepi> m: enum E <A B>; BEGIN { my $val := $*W.create_enum_value: E, 'C', 2, 2; $*W.install_lexical_symbol: $*W.cur_lexpad, 'C', $val }; say C

[16:41] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´C‚ê§¬ª

[16:41] <Kaiepi> wait that's if E were MY scoped

[16:42] <Kaiepi> ok you can do this without $*W

[16:43] <Kaiepi> well, sort of, C => 2 is not the same as a real enum value

[16:45] <Kaiepi> m: enum E <A B>; BEGIN { constant C = C => 2; E.^add_enum_value: C; }; say C

[16:45] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´C => 2‚ê§¬ª

[16:45] <Kaiepi> this doesn't make any symbol for E::C though

[16:46] <Kaiepi> and i'm not sure if you're supposed to be adding enum values after composition like this

[16:47] <jnthn> Not really; what's the problem?

[16:47] <jnthn> (As in, why the desire to do this in the first place?)

[16:49] <hythm_> im using a module which has enum Loglevels, and I want to add a another loglevel

[16:58] <hythm_> sorry cant explain well because im not near a computer, but seems im doing something wrong. will think in another way to achieve what I'm trying to do.

[16:59] *** pat_js left
[17:03] <jmerelo> notable6: we're looking for contributions for this year's Perl 6 advent calendar. Please claim a slot by doing a PR (or simply editing) this https://github.com/perl6/advent/blob/master/perl6advent-2019/schedule

[17:03] <notable6> jmerelo, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[17:03] <jmerelo> weekly: we're looking for contributions for this year's Perl 6 advent calendar. Please claim a slot by doing a PR (or simply editing) this https://github.com/perl6/advent/blob/master/perl6advent-2019/schedule

[17:03] <notable6> jmerelo, Noted! (weekly)

[17:04] *** epony joined
[17:05] *** hythm_ left
[17:07] <AlexDaniel> squashable6: status

[17:07] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà10 hours (2019-10-12 UTC-12‚åÅUTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:08] <AlexDaniel> jmerelo: thoughts?

[17:08] <jmerelo> AlexDaniel: tomorrow already? 

[17:08] <AlexDaniel> jmerelo: it was supposed to be one week ago, but yeah

[17:08] <AlexDaniel> jmerelo: should we like‚Ä¶ delay it a bit more and make it a Raku squashathon?

[17:08] <AlexDaniel> or something like that?

[17:09] <AlexDaniel> I don't know if there's anything people will be able to help with though

[17:09] <jmerelo> AlexDaniel: Do we have a fresh run of Blin? That would be nice for the Hacktoberfest

[17:09] <AlexDaniel> jmerelo: yeah, but what for exactly?

[17:10] *** Doc_Holliwood joined
[17:10] <AlexDaniel> jmerelo: there are just two modules that need a PR: https://github.com/rakudo/rakudo/issues/3207

[17:10] <AlexDaniel> jmerelo: we can use the data to repopulate https://github.com/perl6/ecosystem-unbitrot

[17:10] <jmerelo> AlexDaniel: that would be nice.

[17:10] <AlexDaniel> buuut‚Ä¶ I don't know if that really makes a lot of sense

[17:11] <AlexDaniel> K let's try to update the ticket queue first‚Ä¶

[17:11] <jmerelo> OK

[17:14] <AlexDaniel> that thing just ate all my RAM‚Ä¶

[17:19] <jmerelo> bad, bad thing! Give Alex his RAM back!

[17:20] <jmerelo> AlexDaniel: BTW, the dependence graph is _very_ cool.

[17:21] <AlexDaniel> it's usually very messy when there are many modules failing

[17:23] *** vike joined
[17:32] <Geth_> ¬¶ doc: JJ assigned to antoniogamiz Issue independent-routines is missing https://github.com/perl6/doc/issues/3051

[17:35] <mensvaga> What extension should I give to a perl 6 script?

[17:35] <mensvaga> .p6?

[17:35] <jmerelo> mensvaga: right

[17:35] <AlexDaniel> mensvaga: yes

[17:35] <mensvaga> k

[17:38] *** chloekek joined
[17:40] <mensvaga> In Perl (5), I'd do something like: use FindBin qw($RealBin); use lib "$RealBin/../lib"

[17:40] <mensvaga> What docs should I read to find the perl6 equivalent?

[17:41] <mensvaga> https://modules.perl6.org/dist/FindBin:cpan:LEMBARK ?

[17:42] <mensvaga> Is there something that's available (typically by default, somehow) ?

[17:43] <Xliff> mensvega: What are you trying to do? I've never used FindBin in Perl5.

[17:43] <Xliff> m: $*PERL.^name

[17:43] <camelia> rakudo-moar 7e76762c5: ( no output )

[17:43] <Xliff> m: $*PERL.^name.say

[17:43] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´Perl‚ê§¬ª

[17:44] <mensvaga> I want to load a perl module that's located relative to the real location of the script

[17:44] <japhb> mensvaga: Then "use lib $*PROGRAM.parent.sibling('lib');" or somesuch

[17:46] <mensvaga> Then, it looks like I'll need something like: IO::Path::resolve($*PROGRAM).parent.sibling('lib')

[17:46] <mensvaga> I'll experiment.  Thanks for the info.

[17:47] <Xliff> mensvaga: What do you mean by "resolve"?

[17:47] <mensvaga> https://docs.perl6.org/language/5to6-perlfunc#readlink

[17:47] <mensvaga> If my script is a symbolic link

[17:48] <Xliff> Ah. OK

[17:50] <mensvaga> If I do this: require IO::Path;  I get this error message: IO::Path is a builtin type, not an external module

[17:50] <mensvaga> If I don't require it, then this:    say IO::Path::resolve($*PROGRAM).parent.sibling('lib');

[17:50] <Xliff> Yes. IO::Path is built in. You can juse use it.

[17:50] <mensvaga> Could not find symbol '&resolve'

[17:51] *** khisanth_ left
[17:51] <mensvaga> (sorry about the load of questions; I read the intro to perl6, and now I'm trying to "make a new home" as it were.

[17:51] <Xliff> m: $*PROGRAM.IO.resolve.parent.sibling('lib')

[17:51] <camelia> rakudo-moar 7e76762c5: ( no output )

[17:51] <Xliff> m: $*PROGRAM.IO.resolve.parent.sibling('lib').say

[17:51] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´"/lib".IO‚ê§¬ª

[17:51] *** macaronus left
[17:51] <Xliff> There you go.

[17:52] <Kaiepi> oh i didn't know about .sibling, i was trying to do the same thing with .parent.child

[17:52] <Kaiepi> *same thing it does

[17:53] <jmerelo> Hey, Kaiepi, Xliff: I want *you* for the advent calendar this year. Claim your slot here: https://github.com/perl6/advent/blob/master/perl6advent-2019/schedule

[17:53] <mensvaga> xliff: thanks

[17:54] <Xliff> mensvaga: Anytime.

[17:55] <Xliff> jmerelo: I hope there will be slots left when I find something to write about.

[17:55] <mensvaga> Loading a library relative to the real location of a script is one of the first things I do when I'm learning a new language.

[17:55] <mensvaga> It allows me to set up my repos in a particular way.

[17:55] <jmerelo> Xliff: you claim the slot with a TBA. You can talk about your gtk work or anything else. Pleeeeeez

[17:56] <Xliff> jmerelo: Heh! How can I resist a request like that.

[17:56] <japhb> m: say $*PROGRAM.WHAT;

[17:56] <camelia> rakudo-moar 7e76762c5: OUTPUT: ¬´(Path)‚ê§¬ª

[17:57] <japhb> Xliff: No need to coerce with .IO ^

[17:57] <jmerelo> Xliff: then don't :-)

[17:57] <Xliff> jmerelo: Is this December?

[17:57] <jmerelo> Xliff: right, but I want to prepare stuff during November so that tbrowder and me don't get a heart attack come December.

[17:58] <Xliff> November will be busy for me. I will try and write up something within the next few weeks. Hopefully will be starting a new job, though.

[17:58] <Xliff> It will be dicey.

[17:58] <jmerelo> Xliff: best of luck

[18:03] *** khisanth_ joined
[18:04] <jmerelo> AlexDaniel: for a moment there, I though we'd have to approve the PR all over again...

[18:04] <AlexDaniel> jmerelo: we might if somebody demands more changes

[18:04] <Kaiepi> jmerelo, i was bouncing around an idea for this

[18:04] <AlexDaniel> I won't though :P

[18:04] <jmerelo> Kaiepi: great!

[18:04] <jmerelo> AlexDaniel: please don't

[18:05] <AlexDaniel> xP

[18:05] <jmerelo> AlexDaniel: there's a Raku bus stop where?

[18:05] <Kaiepi> a part 2 for zoffix's the grinch article from a few years ago, to do with type coercion. it's possible to port some code you can generate with https://www.jsfuck.com/ to perl 6 because of it

[18:05] <AlexDaniel> jmerelo: in Tallinn, about 15 km away from me

[18:05] <jmerelo> Kaiepi: great! Feel free to claim two slots, then :-)

[18:06] <jmerelo> AlexDaniel: :-) Let's have our RakuCon there!

[18:06] <AlexDaniel> jmerelo: there's also a Raku lake and a kindergarten

[18:07] <AlexDaniel> jmerelo: I wish there was a Raku street, imagine if one of the devs lived there :D

[18:07] <jmerelo> AlexDaniel: it would have a nice level of indirection.

[18:08] <lizmat> https://www.booking.com/hotel/jp/raku.en-gb.html

[18:08] <jmerelo> From now on, let's only have RakuCons in places called Raku. We might want to change that tradition when we get to the lake, though.

[18:09] <AlexDaniel> jmerelo: as for the conference, just do it in Tallinn, Raku is unfortunately not a walking distance away but it's still really close

[18:10] <Xliff> That place in Japan looks kinda nice. Unfortunately, I don't have much of a travel budget.

[18:11] <AlexDaniel> jmerelo: what's funny is that I passed that bus stop several times and never really paid any attention

[18:12] *** epony left
[18:12] <AlexDaniel> though most of these times it was before Raku got any good traction

[18:12] <jmerelo> AlexDaniel: :-)

[18:17] *** epony joined
[18:18] <jmerelo> Kaiepi, Xliff : Thanks!

[18:18] <Kaiepi> np

[18:19] <jmerelo> Still a few to go: https://github.com/perl6/advent/blob/master/perl6advent-2019/schedule

[18:20] <Grinnz> mensvaga: IMO, it's much clearer to think of it in terms of "relative to this file" than whatever the "script" might be. just one reason I recommend against findbin

[18:20] <mensvaga> Oh, yes.

[18:20] <Grinnz> the other reasons aren't relative to raku, hopefully :)

[18:20] <mensvaga> This is just for the purposes of allowing for the executable to be symbolically linked

[18:21] <Grinnz> right. you want to resolve symlinks for "this file" as well

[18:21] <mensvaga> I'm sure other people do this too; the "script" itself is just an entry point to a library

[18:21] <mensvaga> Yes, nothing else (in the way I'm doing things) uses code that is relative somehow to another link.

[18:22] <mensvaga> I usually do dirname(__FILE__).'/MyModule/some_template.tt'

[18:23] <Grinnz> there are logical and practical problems with "the original script" - what if there's multiple scripts involved? yes normally you don't do this, but how do you think hypnotoad on a Mojolicious::Lite script works? it works around the problem for you using FindBin specific features, but why have to consider all of that

[18:24] <jmerelo> Grinnz: would you care to write an article for the Advent calendar? Please? https://github.com/perl6/advent/blob/master/perl6advent-2019/schedule

[18:25] <mensvaga> The goal (initially) is to get a framework with some structure around it so that organization comes easy during difficult times.

[18:26] <mensvaga> I try to force everything into a "library" somehow initially, and get the deployment part of it nailed so that there aren't issues with introducing new files and new libraries, etc.

[18:26] <Grinnz> jmerelo: not sure what I could contribute having not used the language :P

[18:26] *** ravenousmoose joined
[18:26] <mensvaga> The end result is mobility, and the ability to remove chunks of library code to other repos, which might consist of "proper" modules.

[18:27] <mensvaga> I don't feel comfortable saying "I know a programming language" unless I have that mobility.

[18:27] <jmerelo> Grinnz: I'm pretty sure you can contribute something... Maybe check some aspect of the language you like, tell something about it...

[18:30] *** sauvin left
[18:31] *** MasterDuke joined
[18:34] <mensvaga> https://modules.perl6.org/dist/BSON:cpan:MARTIMM/.gitignore

[18:34] <mensvaga> That has some stuff in there that I should ignore for git.

[18:34] <mensvaga> Is there a "better" list for "stuff I should ignore by default" ?

[18:35] <mensvaga> .precomp definitely comes to mind

[18:35] <cpan-p6> New module released to CPAN! Grammar::PrettyErrors (0.0.4) by 03BDUGGAN

[18:35] <lizmat> Grinnz: I think jmerelo wasn't aware of why you're on this channel

[18:45] <El_Che> jmerelo: I see you went into the rabbithole of a troll tweet...

[18:58] <AlexDaniel> jmerelo: so it start eating memory on this: https://github.com/perl6/ecosystem-unbitrot/blob/e919c8cba58231c12a75e7473fc8f5f96f677735/lib/Unbitrot/Utils.pm6#L13-L17

[18:59] <AlexDaniel> where the url is https://modules.perl6.org/search.json

[18:59] <AlexDaniel> let's see if the same happens in a script‚Ä¶

[19:00] <jmerelo> El_Che: well... 

[19:01] * jmerelo goes AFK for the day.

[19:01] *** jmerelo left
[19:02] <AlexDaniel> can anybody try to reproduce? https://gist.github.com/AlexDaniel/53d478aed8fc02d2d0a14dcb83e8585b

[19:02] <AlexDaniel> it starts slow but then eats your memory pretty fast, so be careful

[19:04] *** Kaiepi left
[19:14] <tony-o_> AlexDaniel: yea .. that at 14GB pretty quick

[19:14] *** sno joined
[19:16] <tony-o_> ate^

[19:16] <AlexDaniel> yup‚Ä¶ what do I do now?

[19:17] <AlexDaniel> like, uh‚Ä¶ bisect it?

[19:18] <tony-o_> that'd be a start

[19:18] *** reach_satori left
[19:18] <tony-o_> first thing to do is make the script die 

[19:18] <tony-o_> after a certain point

[19:18] <AlexDaniel> tony-o_: by the way: https://github.com/perl6/problem-solving/pull/89#issuecomment-540117093

[19:19] <tony-o_> i plan to abstain, i can write that in the issue for posterity if you'd like

[19:20] <AlexDaniel> I see, it's ok, just making sure that you saw it

[19:20] <tony-o_> i appreciate it, there's tons of emails coming from that repo

[19:21] <AlexDaniel> alright I have the code to bisect it‚Ä¶

[19:21] <lizmat> afk&

[19:22] <AlexDaniel> hmm it's probably easier to just use Blin

[19:23] <AlexDaniel> 6c: use Telemetry;

[19:24] *** patrickb left
[19:24] <AlexDaniel> committable6: huh?

[19:24] <committable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Committable

[19:24] <AlexDaniel> committable6: use Telemetry;

[19:24] <committable6> AlexDaniel, ¬¶use: ¬´Cannot find this revision (did you mean ‚Äúall‚Äù?)¬ª

[19:24] <AlexDaniel> committable6: all use Telemetry;

[19:24] <AlexDaniel> committable6: use Telemetry; say 42

[19:25] <committable6> AlexDaniel, ¬¶use: ¬´Cannot find this revision (did you mean ‚Äúall‚Äù?)¬ª

[19:25] <AlexDaniel> committable6: all use Telemetry; say 42

[19:26] <AlexDaniel> I see, hmm

[19:26] *** committable6 left
[19:26] <tony-o_> ?

[19:27] *** committable6 joined
[19:31] <AlexDaniel> committable6: all use Telemetry; say 42

[19:31] <committable6> AlexDaniel, https://gist.github.com/ccd784979b9a953a19b4d20188eb0803

[19:50] <AlexDaniel> committable6: all use v6.d;

[19:50] <committable6> AlexDaniel, https://gist.github.com/9dda83c9a7b2a278161fea9efc61bf48

[19:51] <AlexDaniel> what?

[19:51] <AlexDaniel> u: use v6.d;

[19:51] <unicodable6> AlexDaniel, U+0075 LATIN SMALL LETTER U [Ll] (u)

[19:51] <unicodable6> AlexDaniel, U+0073 LATIN SMALL LETTER S [Ll] (s)

[19:51] <unicodable6> AlexDaniel, 9 characters in total (use v6.d;): https://gist.github.com/761d642bfc52c4ab2ab453fef4fc77c5

[19:52] <AlexDaniel> ahh k

[19:52] <AlexDaniel> looking at the wrong thing :)

[19:52] <cpan-p6> New module released to CPAN! Getopt::Long (0.1.3) by 03LEONT

[19:52] *** leont joined
[19:52] <AlexDaniel> so Cro is v6.d only?

[19:53] <AlexDaniel> at least one of its dependencies is

[19:56] <SmokeMachine> jmerelo: https://github.com/FCO/Librarify/blob/master/lib/ZefLib.pm6

[19:56] <tellable6> SmokeMachine, I'll pass your message to jmerelo

[19:56] <SmokeMachine> Xliff: https://github.com/FCO/Librarify/blob/master/lib/ZefLib.pm6

[20:04] *** ravenousmoose left
[20:08] <leont> I just wrote .rakutest support for prove6, will merge as soon as the vote is closed https://github.com/Leont/app-prove6/commit/9785c054509b3396f5df297954865470470f9289

[20:08] *** molaf joined
[20:15] <El_Che> leont++

[20:17] *** wamba left
[20:27] *** Black_Ribbon joined
[20:28] *** kst` joined
[20:30] *** kst left
[20:36] <AlexDaniel> tony

[20:36] <AlexDaniel> tony-o_: ouch! Bisected: https://github.com/rakudo/rakudo/commit/541a4f1628e4e156f6eefc547938746f7b736104

[20:36] <AlexDaniel> I have not double checked it, so it could be wrong, but I think that's the problem

[20:43] *** pmurias joined
[20:45] *** ravenousmoose joined
[20:50] *** ravenousmoose left
[20:57] <tony-o_> curious what the code looks like for cro that flattening causes an issue

[20:59] *** pmurias left
[21:00] *** pmurias joined
[21:00] *** macaronus joined
[21:03] <tony-o_> likely an error being swallowed somewhere around https://github.com/croservices/cro-http/blame/02d8c3a21f4271956df2c5f214dce2dda881fb47/lib/Cro/HTTP/Client.pm6#L354

[21:03] *** Kaiepi joined
[21:16] *** leont left
[21:20] *** wamba joined
[21:25] *** krychu joined
[21:35] *** guifa left
[21:40] *** chloekek left
[21:45] *** leont joined
[22:05] *** wildtrees left
[22:14] *** wamba left
[22:23] *** quester left
[22:23] *** quester joined
[22:24] *** jjatria left
[22:24] *** agentzh left
[22:25] *** agentzh joined
[22:25] *** agentzh left
[22:25] *** agentzh joined
[22:27] *** jjatria joined
[22:28] *** kst` is now known as kst

[22:31] <Xliff> m: class A { method b { callframe(1).gist.say }; method a { self.b; }; A.a;

[22:31] <camelia> rakudo-moar 1fef78388: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3).gist.say }; method a { self.b; }; A.a;7‚èè5<EOL>‚ê§¬ª

[22:31] <Xliff> m: class A { method b { callframe(1).gist.say }; method a { self.b; }; }; A.a;

[22:31] <camelia> rakudo-moar 1fef78388: OUTPUT: ¬´<tmp> at line 1‚ê§¬ª

[22:32] <Xliff> m: class A { method b { callframe(1).code.package.^name.say }; method a { self.b; }; }; A.a;

[22:32] <camelia> rakudo-moar 1fef78388: OUTPUT: ¬´A‚ê§¬ª

[22:35] <Xliff> class A { has $!a; method a is rw { $!a }; }; (my $a = A.new).a = 42; $a.gist.say

[22:35] <evalable6> Xliff, rakudo-moar 1fef78388: OUTPUT: ¬´A.new‚ê§¬ª

[22:35] <Xliff> class A { has $!a; method a is rw { $!a }; }; (my $a = A.new).a = 42; $a.perl.say

[22:35] <evalable6> Xliff, rakudo-moar 1fef78388: OUTPUT: ¬´A.new‚ê§¬ª

[22:35] <Xliff> class A { has $!a; method a is rw { $!a }; }; (my $a = A.new).a = 42; $a.a.say

[22:35] <evalable6> Xliff, rakudo-moar 1fef78388: OUTPUT: ¬´42‚ê§¬ª

[22:38] <Xliff> class A { has $!a; method a is rw { $!a }; }; A.^attributes.gist.say;

[22:38] <evalable6> Xliff, rakudo-moar 1fef78388: OUTPUT: ¬´(Mu $!a)‚ê§¬ª

[22:38] *** pecastro left
[22:39] *** softmoth left
[22:42] <Xliff> class A { has $!a; has $!b; has $!z; has $!x; method a is rw { $!a }; }; A.^attributes¬ª.map( *.name.substr(2) )¬ª.say

[22:42] <evalable6> Xliff, rakudo-moar 1fef78388: OUTPUT: ¬´a‚ê§b‚ê§z‚ê§x‚ê§¬ª

[22:55] *** Doc_Holliwood left
[23:07] *** |oLa|1 joined
[23:16] *** Kaiepi left
[23:28] <Xliff> I get the following when using .wrap:

[23:28] <Xliff> Attempt to return outside of immediately-enclosing Routine (i.e. `return` execution is outside the dynamic scope of the Routine where `return` was used)

[23:29] <Xliff> What does that mean?

[23:33] *** lucasb left
[23:42] *** gdonald left
[23:45] *** gdonald joined
[23:46] <vrurg> Xliff: wrap is quite contradictional thing. Can you find a way around without it?

[23:58] *** leont left
