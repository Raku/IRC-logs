[00:01] *** rindolf left
[00:05] *** mowcat joined
[00:06] <sena_kun> hythm, do you need only pretty printing or something more to manipulate matrices nicely?

[00:07] <sena_kun> m: role Array::Matrix[:$col] { method gist { self.Str.split(' ').rotor($col) } }; my $a = (1, 2, 3, 4, 5, 6, 7); $a does Array::Matrix[col => 3]; say $a.gist;

[00:07] <camelia> rakudo-moar c6053e6a5: OUTPUT: «((1 2 3) (4 5 6))␤»

[00:07] <sena_kun> if only pretty printing is necesary, I'd go with this.

[00:08] <hythm> sena_kun I need to do a lot of transformation, like flip, rotate, transpose, swap rows with columns,...

[00:08] <sena_kun> If you want to actually inject arrays to operate on those on matrices level, I'd go with a custom class.

[00:08] <sena_kun> s/inject/hack/

[00:08] <sena_kun> :)

[00:09] <sena_kun> just in case, did you see Math::Matrix?

[00:09] <hythm> yes I did, but it only works on Numeric, not strings

[00:11] <hythm> and it's using a class, I can do the same thing as a class,,, but I think it's a little nicer, if I can apply a role as "my @a does Array::Matrix"

[00:11] <sena_kun> I wonder if a patch can help. Work on strings as "1 2 3" or "a b c" with alphabet order or something like that?

[00:12] <hythm> "a b c"

[00:12] <sena_kun> it's your time, of course, just guessing if patching can be less workload.

[00:12] <sena_kun> m: 'a' > 'z'

[00:12] <camelia> rakudo-moar c6053e6a5: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ">" in expression "'a' > 'z'" in sink context (line 1)␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[00:12] <sena_kun> m: say 'a' > 'z'

[00:12] <camelia> rakudo-moar c6053e6a5: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[00:12] <sena_kun> m: say 'a' lt 'z'

[00:12] <camelia> rakudo-moar c6053e6a5: OUTPUT: «True␤»

[00:12] <sena_kun> m: say 'b' le 'a'

[00:12] <camelia> rakudo-moar c6053e6a5: OUTPUT: «False␤»

[00:13] <sena_kun> I wonder if one can factor out exact ops and types to operate on.

[00:17] <hythm> Math::Matrix has many (Numeric) operation, and a little different than what I need. I basically want to implement these methods here as role, so the code gets more cleaner: https://github.com/hythm7/Z/blob/master/lib/Z/Cipher.pm#L109

[00:19] <hythm> and instead of creating an object and access the array from within, I like the idea of applying a role to the an array, and then the array it self will behave accordingly

[00:20] <sena_kun> hmm. I am by no means an experienced coder, but I'd see it as anti-pattern... Also, about values getting:

[00:21] <sena_kun> m: role A { method a { self.values } };  my @a does A = 1, 2, 3, 4; @a.a.say;

[00:21] <camelia> rakudo-moar c6053e6a5: OUTPUT: «(1 2 3 4)␤»

[00:21] <sena_kun> ^ combining this and a named arg to a role you likely can move logic as you want, I hope. :)

[00:22] <TreyHarris> Interesting. Specifically for moritz/perl6-all-modules, and no other repos I can find, I get very weird behavior from git-clone, and hub seems to complicate it (but bypassing hub doesn't totally fix the behavior). https://gist.github.com/treyharris/49ab08018e88bdc7c662068866672f63

[00:22] <hythm> that opened my mind a little, I will give that a try. thanks for the help sena_kun :)

[00:28] *** dct_ left
[00:30] <MasterDuke> TreyHarris: i just tried a `git clone [email@hidden.address] and it worked fine for me with git 2.19.1 on kubuntu 18.10

[00:31] <TreyHarris> Hmm... 2.17.1 here.

[00:32] <TreyHarris> MasterDuke: oh, but ssh always worked unless I misread one of my own outputs in that doc I pasted?

[00:33] <TreyHarris> It seems to just be https and/or git protocol that messes up sometimes

[00:33] <MasterDuke> odd

[00:37] *** hythm left
[00:40] *** jargan joined
[00:40] *** jargan is now known as jast

[00:41] *** jme` joined
[00:41] *** zachk left
[00:45] <TreyHarris> Oh, man... I missed the 'rotor' in those matrix role examples above, and I was _VERY_ bewildered at where the dwimmyness was coming from. rofl

[00:48] <timotimo> ACME::Rofl - adds a .rofl method on list-likes that acts the same as .rotor

[00:55] *** leont left
[01:01] *** kurahaupo left
[01:02] *** kurahaupo joined
[01:24] *** Cabanossi left
[01:36] *** Cabanossi joined
[01:37] *** markoong left
[01:37] *** markoong joined
[01:38] *** zacts joined
[01:42] *** markoong left
[01:43] *** dominix joined
[01:46] *** zacts left
[01:49] *** schwaa joined
[01:55] *** sena_kun left
[02:01] *** schwaa left
[02:04] *** aborazmeh left
[02:13] *** aborazmeh joined
[02:13] *** aborazmeh left
[02:13] *** aborazmeh joined
[02:20] *** sauvin_ joined
[02:21] *** sauvin left
[02:38] *** MasterDuke left
[03:11] *** Kaypie left
[03:20] *** zacts joined
[03:27] *** cpan-p6 left
[03:27] *** cpan-p6 joined
[03:29] *** zacts left
[03:45] *** sauvin_ is now known as Sauvin

[03:50] *** _isomorphismes left
[03:52] *** isomorphismes left
[03:53] *** RaycatWhoDat joined
[03:53] <RaycatWhoDat> Hello.

[03:55] <RaycatWhoDat> So long.

[03:55] *** RaycatWhoDat left
[04:04] *** isomorphismes joined
[04:22] *** molaf joined
[04:41] *** isomorphismes left
[04:46] *** veesh joined
[04:49] *** veesh left
[05:07] *** Kaypie joined
[05:17] *** molaf left
[05:21] *** mowcat left
[05:22] *** kurahaupo left
[05:22] *** kurahaupo joined
[05:28] *** aborazmeh left
[05:45] *** Anonymus joined
[05:47] *** Anonymus left
[05:53] *** calyx joined
[06:07] *** jeek joined
[06:10] *** dct_ joined
[06:44] *** schwaa joined
[06:46] *** tomato_ joined
[06:48] *** domidumont joined
[06:52] *** lizmat left
[06:56] *** random_yanek left
[06:57] *** jmerelo joined
[06:57] <schwaa> Hi, here is a question about trait: Do all user defined traits start with "is"? Can I define a trait like "capi" rather than "is capi"?

[06:58] <tyil> `is` is a keyword to associate the trait with a class, no?

[06:59] <tyil> the trait is called "capi", and you associate it to a class with something like `class Foo is capi`

[07:00] *** dct_ left
[07:01] <schwaa> Here is an example: multi trait_mod:<is>(Routine $r, :$capi) { ... }. Why I need to write `is` in this definition???

[07:03] <schwaa> Since it's not a part of the trait

[07:03] <tyil> oh

[07:03] <tyil> I was thinking of something else

[07:03] <moritz> you can use a different trait than "is", but I don't think you can make up your own category

[07:04] *** w17t joined
[07:04] <schwaa> yeah, I just want a shorter form of the "is native(.....)"

[07:06] <schwaa> I wote "multi trait_mod:<capi>(Routine $r)" in my code. the compiler said: Missing block --> sub py_none_check(PyRef --> int32)⏏ capi {}

[07:08] *** random_yanek joined
[07:11] *** robertle joined
[07:12] *** tomato_ left
[07:13] *** domidumont1 joined
[07:14] <jmerelo> schwaa: that's weird. Some Python thing?

[07:15] <jmerelo> schwaa: there are several trait_mod in the source, other than is: does, handles... 

[07:16] *** domidumont left
[07:16] <jmerelo> schwaa: apparently, "is" is dealt with in a special way by the compiler. If what you want to define is a trait, it's better if you use that. If it's something else, use whatever.

[07:18] <schwaa> ok

[07:36] *** jmerelo left
[07:39] *** schwaa left
[07:46] *** lizmat joined
[08:03] *** aindilis` joined
[08:04] *** aindilis left
[08:15] *** ravenousmoose joined
[08:18] *** reach_satori left
[08:19] *** reach_satori joined
[08:20] *** dct_ joined
[08:31] *** reach_satori left
[08:46] *** dct_ left
[08:48] *** ravenousmoose left
[09:05] *** rindolf joined
[09:07] *** ravenous_ joined
[09:12] *** zakharyas joined
[09:21] *** ravenous_ left
[09:22] *** ravenousmoose joined
[09:26] *** calyx left
[09:29] *** calyx joined
[09:42] *** robertle left
[09:45] *** ufobat joined
[09:45] <ufobat> tyil: https://gist.github.com/ufobat/a3e5683422640cf54f8ff2bf1898b4d7

[09:49] *** ufobat left
[10:10] *** llfourn_ left
[10:14] *** ravenousmoose left
[10:17] *** llfourn joined
[10:22] *** lizmat_ joined
[10:23] *** woolfy1 joined
[10:24] *** woolfy left
[10:24] *** lizmat left
[10:31] *** scimon joined
[11:13] *** sena_kun joined
[11:15] *** ravenousmoose joined
[11:21] *** ravenous_ joined
[11:22] *** leont joined
[11:24] *** ravenousmoose left
[11:25] *** lizmat_ is now known as lizmat

[11:29] <daxim> m: sub multi-retval (--> Bool, Int) { return True, 42 }

[11:29] <camelia> rakudo-moar c6053e6a5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed return value (return constraints only allowed at the end of the signature)␤at <tmp>:1␤------> 3sub multi-retval (--> Bool7⏏5, Int) { return True, 42 }␤»

[11:29] <daxim> do I really have to make up named types?

[11:29] *** ravenousmoose joined
[11:32] *** ravenous_ left
[11:33] <daxim> m: subset Some::Multi::Retval of List where 2 == $_.elems && $_[0] ~~ Bool && $_[1] ~~ Int; sub multi-retval (--> Some::Multi::Retval) { return True, 42 }; dd multi-retval;

[11:33] <camelia> rakudo-moar 6e6c288c1: OUTPUT: «(Bool::True, 42)␤»

[11:34] *** ravenous_ joined
[11:36] *** ravenous_ left
[11:38] *** ravenousmoose left
[11:46] *** ravenousmoose joined
[11:48] *** drolax joined
[11:49] *** pecastro joined
[11:52] *** drolax left
[11:59] *** ravenousmoose left
[12:02] *** ravenousmoose[aw joined
[12:02] *** ravenousmoose[aw left
[12:04] *** zakharyas left
[12:06] *** saki joined
[12:06] *** saki left
[12:07] <leont> We don't really have tuple types, I fear

[12:07] <leont> Though I guess one could make such a thing

[12:08] <leont> Apparently not

[12:09] <leont> m: subset Foo where (Bool, Int); sub multi-retval (--> Foo) { return True, 42 };

[12:09] <camelia> rakudo-moar 6e6c288c1: ( no output )

[12:10] <daxim> that's shorter at least, good job

[12:15] <lizmat> perhaps https://modules.perl6.org/dist/Tuple:cpan:ELIZABETH can be of service, daxim ?

[12:16] <daxim> nope, I want anonymous types for retvals

[12:16] <cpan-p6> New module released to CPAN! DB (0.2) by 03CTILMES

[12:16] *** saki joined
[12:17] <lizmat> daxim: too bad

[12:24] <daxim> m: sub multi-retval (--> List where (Bool, Int)) { return True, 42 };

[12:24] <camelia> rakudo-moar 6e6c288c1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot do non-typename cases of type_constraint yet␤at <tmp>:1␤------> 3multi-retval (--> List where (Bool, Int)7⏏5) { return True, 42 };␤»

[12:25] <daxim> I hope that has a corresponding TODO test somewhere

[12:27] <tbrowder> hi, #perl6 !

[12:29] <tbrowder> can anyone give a good use case for $*ARGFILES vs @*ARGS

[12:30] <tbrowder> i can see its use iff it only contained cli args that are exiting files

[12:30] <tbrowder> otherwise, i have

[12:30] <moritz> if you want to implement a simple tool like `wc` or `cat` or so without options, that's not a bad assumption

[12:31] *** markoong joined
[12:31] <leont> @*ARGS will contain options, $*ARGFILES only non-options

[12:32] <leont> fo $*ARGFILES won't try to open your --foo

[12:32] <leont> s/fo/so/

[12:32] <tbrowder> yes, but that still sounds like, in your favorite expression, sugar for @*ARGS

[12:33] <leont> Actually, what I said seems not quite accurate

[12:33] <tbrowder> leont: ok, that’s a plus, but i didn’t see that in the docs

[12:34] <leont> But $*ARGFILES is a file handle, and @*ARGS isn't

[12:34] <tbrowder> actually, when i create scripts i often don’t use - in front of options anyway

[12:35] <tbrowder> ok, si

[12:35] <leont> What I observed what a side-effect of v6.d that I had forgotten about despite having had to code around it before -_-

[12:36] <tbrowder> can $*ARGFILES save some code in this example:

[12:38] <tbrowder> for @*ARGS { next if !$_.IO.f }

[12:39] <leont> Think of it as: for $*ARGFILES.lines(:chomp) { .say if /foo/ }

[12:39] <leont> It's the handle to do the equivalent of p5's <>

[12:41] <tbrowder> hm, looks like i thought, so far i’m not convinced of its utility, but that’s the joy of p6, use what what works for you until someone t

[12:41] <tbrowder> *someone shows you a better way!

[12:42] <tbrowder> thanks, folks!

[12:44] <leont> TBH, I've never needed it either

[12:48] *** lizmat_ joined
[12:51] *** lizmat left
[12:52] *** domidumont joined
[12:55] *** RubioTerra joined
[12:55] *** domidumont1 left
[13:09] <tbrowder> well, i think i see the use case (he says with the possibility of finding egg on his face), back in a while...

[13:10] *** saki left
[13:12] *** andrzejku joined
[13:13] *** w17t left
[13:17] *** w17t joined
[13:22] *** zacts joined
[13:25] <leont> For a moment I was like "why does «$file.r == $expected» give me an exception when the file doesn't exist, turns out it's the numification.

[13:26] <leont> Using === does DWIM

[13:26] *** isomorphismes joined
[13:26] <El_Che> cough*JS*cough

[13:28] *** rindolf left
[13:35] *** rindolf joined
[13:36] <leont> Failure objects are a bit dangerous like that :-/

[13:38] <tbrowder> well, no egg, thank goodness. turns out i just had to quit the @*ARGS processing loop when i detected my option requiring processing the rest of the CLI as possible input files. i did then have to loop through @*ARGS again, testing each for an existing file, but i don’t think using $*ARGFILES would have saved anything EXCEPT skipping suspected option args. that would

[13:39] *** domidumont1 joined
[13:40] <tbrowder> be useful in normal CLI practice, so i retract all my whining. however, i’ll look at the docs closer to see if that

[13:40] <tbrowder> option-skipping is explained.

[13:42] <leont> I was mistaken, I think that's not happening.

[13:43] *** domidumont left
[13:48] *** smallick joined
[13:50] <leont> Why is a failure to open a file (in this particular case) an X::AdHoc, and not a properly typed exception?

[13:52] <tbrowder> ref $*ARGFILES: i’m very impressed, looks like it *does* pick only existing files out of the CLI args!

[13:54] <tbrowder> so it is a definite improvement over @*ARGS for detecting real files by not duplicating file tests.

[13:54] *** zakharyas joined
[13:54] *** ufobat joined
[13:54] *** w17t left
[13:56] <tbrowder> if you don’t learn someting every day, you’re not paying attention (even though you may have known it before and forgotten it :-D )

[13:56] *** shlomif joined
[13:58] *** rindolf left
[13:58] *** shlomif is now known as rindolf

[14:00] <ufobat> hi

[14:00] <ufobat> :)

[14:00] <ufobat> .tell tyil was my link of any use to you?

[14:00] <yoleaux> ufobat: I'll pass your message to tyil.

[14:05] *** RubioTerra left
[14:10] * woolfy1 and lizmat are going to FOSDEM in 15 minutes or so and set up the Perl-booth and tomorrow we're going to promote Perl like crazy woohoo

[14:10] * woolfy1 knows she is tiresome...  sorry...

[14:11] <moritz> woolfy1: you two are the biggest resalers of my books, so thanks for doing all that crazy stuff :)

[14:14] * leont is totally unorganized wrt FOSDEM, but will surely be around at least one day

[14:15] <woolfy1> moritz : really?  And we didn't even sell that many, maybe a bit more than 150 in total for the two books

[14:15] <woolfy1> leont Nice if you show up anyway!

[14:16] <tbrowder> arg, $*ARGFILES throws an error unless at least one real file exists. seems like it ought to be empty unless real files are found, since it obviously test for it. i guess i can use a try block but sounds like a bad design so far.

[14:18] <tbrowder> why would we set $ARGFILES to $*IN if there are no files in @*ARGS?

[14:19] <tbrowder> (er, $*ARGFILES)

[14:19] <leont> Because <>

[14:20] *** zacts left
[14:20] <leont> Because that's a unix convention. Read from stdin if given no arguments

[14:22] <leont> in v6.d $*ARGFILES is always $*IN equivalent inside MAIN

[14:22] <leont> I haven't been able to find the reasoning for that. I guess the magic didn't work well with subcommands.

[14:24] <moritz> woolfy1: yes, really. They are not really NYT bestsellers :D

[14:26] *** rurban joined
[14:26] *** rurban left
[14:27] <woolfy1> moritz  I know.  But all the Perl 6 I sell are selling better than the Perl 5 books.  The only good-selling Perl 5 book I had was Beginning Perl by ovid

[14:29] <leont> People already have Perl 5 books, and they're sold elsewhere as well

[14:30] <woolfy1> Leaving...  going to Brussels...  bye

[14:30] *** woolfy1 left
[14:30] <leont> 84d45f07fb4a6b08f0acb8ac15e0e4da80b7f3f3 lists a short reason, but doesn't like to an actual discussion

[14:30] *** lizmat_ left
[14:31] <leont> *link

[14:33] <tbrowder> i

[14:33] *** molaf joined
[14:33] *** rindolf left
[14:34] <tbrowder> what is the state of $*IN if the user doesn’t modify it?

[14:34] <tbrowder> i’ll try to test it...

[14:38] *** scimon left
[14:38] *** rindolf joined
[14:42] *** zacts joined
[14:46] *** clarkema joined
[14:47] <leont> I'm seriously considering making $*ARGFILES do something else in Getopt::Long, because the v6.d behavior doesn't make sense.

[14:47] *** reach_satori joined
[14:48] *** skids joined
[15:00] *** scimon joined
[15:04] <leont> Looking for a reason that isn't "because zoffix"

[15:05] <AlexDaniel> leont: what's the current behavior exactly and how do you want to change it?

[15:06] <cpan-p6> New module released to CPAN! DB (0.3) by 03CTILMES

[15:06] <leont> when v6.d, $*ARGFILES only contains $*IN inside MAIN

[15:06] *** pmurias joined
[15:07] <pmurias> what's a good terminal font that can display all the weird unicode characters Perl 6 uses?

[15:07] <leont> I would like it to contain the appropriate positional arguments instead

[15:07] <timotimo> leont: you can totally create a new IO::CatHandle and expose it as $*ARGFILES

[15:07] *** ufobat left
[15:07] <leont> Yeah that's my plan

[15:08] <timotimo> SGTM

[15:15] *** dylanwh left
[15:16] *** reach_satori left
[15:18] <jkramer> pmurias: I like terminus and it seems to support a good portion of unicode, at least I didn't need a character yet that it didn't support

[15:18] <jkramer> Also great for coding IMO

[15:18] <jkramer> http://terminus-font.sourceforge.net/img/10x20n.gif

[15:19] *** dylanwh joined
[15:20] *** Sgeo_ joined
[15:20] <clarkema> Anyone going to be at FOSDEM?

[15:20] <yoleaux> 26 Jan 2019 22:04Z <leont> clarkema: I split up App::Prove6 from TAP::Harness, so the former should also be added to Rakudo Star

[15:21] *** jme` left
[15:21] <leont> lizmat and woolfy are already on their way to FOSDEM. I'm probably also going.

[15:21] <clarkema> leont: Yup, just caught up with the ticket for that

[15:23] *** Sgeo left
[15:23] <clarkema> Been distracted by the whole 'work' think recently, but will catch up with release stuff soon

[15:23] <clarkema> s/think/thing

[15:33] <leont> Trying to create an overloaded hash

[15:34] <leont> I think I have to override AT-POS to return a container that can store the thing, but that's about as far as I got

[15:35] <leont> Erm, AT-KEY

[15:36] <leont> Ow, there is an ASSIGN-KEY, but it's not mentioned in the documentation of Hash…

[15:37] <timotimo> i think liz made a module to make creating your own hashes easier?

[15:37] <timotimo> https://modules.perl6.org/dist/Hash::Agnostic:cpan:ELIZABETH

[15:38] <leont> Right

[15:38] <timotimo> but yeah, ASSIGN-KEY should be in the docs

[15:39] <leont> For now, inheriting from Hash seems to do what I want #famouslastwords #notestsyet

[15:42] *** smallick left
[15:47] <tbrowder> ok, i give up on ARGFILES, need a good doc example for using with a list of one or more umopenable file names. i’ll keep trying later...bye.

[15:53] *** zacts left
[15:54] <tbrowder> i filed a doc issue requesting a good example of $*ARGFILES use with non-existent files.

[15:59] *** ravenousmoose[aw joined
[16:00] *** ravenousmoose[aw left
[16:03] *** scimon_ joined
[16:05] <b2gills> my $*ARGFILES = IO::CatHandle.new('foo.txt','bar.txt');  .say for lines

[16:05] *** scimon left
[16:09] <b2gills> The point of $*ARGFILES being $*IN inside of MAIN makes sense. MAIN handles @*ARGS, and $*ARGFILES handles @*ARGS. Handling @*ARGS twice doesn't make much sense.

[16:11] <tbrowder> i don’t argue, but i don’t often use main. so docs also need a good example of use inside MAIN.

[16:11] <leont> The main handler could handle the arguments of MAIN and also handle $*ARGFILES, who said anything about handling it twice?

[16:13] <AlexDaniel> pmurias: depends on how much unicode you want… Like if you want emojis and stuff, then probably you just have to make sure that it can fallback to other fonts that have more characters

[16:14] <AlexDaniel> leont: sorry was away for a bit

[16:15] <AlexDaniel> leont: here's the corresponding entry in 6.d-prep https://github.com/perl6/6.d-prep/blob/master/TODO/COMPLETED/completed-FEATURES.md#make-argfiles--in-or-ioargfilesnewin-inside-main

[16:21] <leont> It makes sense given the current argument handling. I'm not sure it makes sense given my argument handling.

[16:22] *** isomorphismes left
[16:22] <AlexDaniel> c: 2018.05,2018.12 run <perl6 -e>, ｢sub MAIN($foo, $bar, *@files) { dd $foo; dd $bar; dd @files; dd $*ARGFILES }｣, ‘f’, ‘b’, ‘f1’, ‘f2’

[16:22] <committable6> AlexDaniel, https://gist.github.com/f40d379e7f995e6b8dd9dc4d82b9797e

[16:22] <AlexDaniel> leont: ↑ I think it's an improvement

[16:22] <b2gills> If a MAIN sub doesn't handle everything in @*ARGS it doesn't get called. Which means there would be nothing left in @*ARGS for $*ARGFILES to handle

[16:23] <timotimo> how about "sub MAIN($arg1, $arg2, :$named1, :$named2, *@rest is main-argfiles) { }'

[16:23] <leont> yeah, what timotimo says

[16:24] <b2gills> Actually `sub MAIN($arg1, $arg2, :$named1, :$named2, *@*ARGS) { }` would work if the way $*ARGFILES in MAIN is dealt with is by making @*ARGS empty.

[16:24] <timotimo> alternatively '%*MAIN-OPTIONS<slurpy-is-files> = True'

[16:25] <leont> I don't think @*ARGS is touched

[16:25] <tbrowder> i still don’t see an argument for $*ARGFILES current behavior outside MAIN. using unix behavior i don’t think is correct. why does the user have to manually check args for fileness when p6 could automatically provide it? at least provide an adverb or something.

[16:27] <b2gills> m: .say for lines().grep(/^ foo/)

[16:27] <camelia> rakudo-moar 6e6c288c1: ( no output )

[16:28] <tbrowder> got to go...bye

[16:28] <b2gills> The way $*ARGFILES works outside of MAIN is for one-liners, and programs that work like one-liners

[16:30] *** jmerelo joined
[16:31] *** zacts joined
[16:34] *** marmor joined
[16:39] *** zakharyas left
[16:42] <daxim> the inconsistent output type of `cross(@input<>)` annoys the everlasting fuck out of me.  it's supposed to be Seq[List[something]], except when 1 == @input.elems, then it becomes Seq[something]

[16:42] <daxim> m: my @input; @input = 1, (2,3), 4; cross(@input<>).map(-> $i { dd $i.^name }); @input = 1, (2,3); cross(@input<>).map(-> $i { dd $i.^name }); @input = 1; cross(@input<>).map(-> $i { dd $i.^name });

[16:42] <camelia> rakudo-moar 6e6c288c1: OUTPUT: «"List"␤"List"␤"Int"␤»

[16:47] <AlexDaniel> daxim: yes

[16:47] <timotimo> indeed :(

[16:48] <AlexDaniel> daxim: R#2016

[16:48] <synopsebot> R#2016 [open]: https://github.com/rakudo/rakudo/issues/2016 [detrap] Inconsistent behaviour of `zip` and friends

[16:48] <AlexDaniel> I added 6.e label in a hope that we fix it somehow for the next language release

[16:49] <AlexDaniel> “annoys …” description is very accurate for me too

[16:52] *** scimon_ left
[16:52] *** mowcat joined
[16:56] <tbrowder> how about a pragma so $*ARGFILES is generated at same time as @*ARGS but it only has openable file names?

[16:57] <tbrowder>  sounds like my Proc::More module needs another recipe!

[16:58] <tbrowder> bye again...

[17:00] *** yqt joined
[17:04] <leont> openable files is hard to define

[17:06] *** RubioTerra joined
[17:06] *** ravenousmoose joined
[17:14] *** marmor left
[17:18] <jmerelo> tbrowder: Hum. Could be an idea...

[17:19] *** molaf left
[17:26] *** melezhik joined
[17:27] <melezhik> Hi! How do I import modules function to "main" names space without direct "use" of the module?

[17:28] <melezhik> unit module main?

[17:28] <timotimo> you mean re-export from another module?

[17:28] *** ravenousmoose left
[17:29] *** zacts left
[17:29] <timotimo> like, module B has "foo" and "bar", main.p6 has "use A" but main.p6 also gets "foo" and "bar"?

[17:29] <melezhik> yes

[17:30] <melezhik> kinda "transition" export 

[17:30] <melezhik> in Perl5 I just can "package main {}"

[17:30] <melezhik> or directly hack with glob

[17:31] <Geth> ¦ ecosystem: 0612d3e959 | Altai-man++ (committed using GitHub Web editor) | META.list

[17:31] <Geth> ¦ ecosystem: Add ASN::Grammar

[17:31] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0612d3e959

[17:31] <melezhik> basically yes, reexport should be fine as well

[17:31] <timotimo> https://github.com/perl6/roast/blob/master/packages/S11-modules/lib/OuterModule.pm6

[17:31] <pmurias> AlexDaniel: I want all things that are commonly encountered in Perl 6

[17:31] <timotimo> apparently like this?

[17:32] <melezhik> not sure if I understand the OuterModule conception ...

[17:32] <timotimo> well

[17:32] <timotimo> just "use B :ALL, :EXPORT" in my example

[17:32] <timotimo> put that in the A from my example

[17:33] <melezhik> ahh

[17:33] <melezhik> let me try

[17:33] <melezhik> thanks

[17:33] <pmurias> timotimo: I though about the SDL2 in rakudo.js thing, and it seems doable but crazy

[17:34] <timotimo> aaw

[17:34] <timotimo> in that case, i'll just have to play around with canvas from rakudo.js

[17:34] <kybr> yes, please. that sounds awesome

[17:34] <pmurias> timotimo: what we would need to do is to have the NativeCall layer generate and compile a C wrapper

[17:35] <melezhik> Error while importing from 'Sparrow6::DSL::Common': no such tag 'EXPORT'

[17:35] <melezhik> when I try to 

[17:35] <melezhik> use Sparrow6::DSL::Common :ALL, :EXPORT;

[17:35] *** domidumont1 left
[17:35] <pmurias> timotimo: using a canvas directly would remove a layer of craziness ;)

[17:36] <melezhik> should I change module itself as well?

[17:36] <timotimo> oh, hmm

[17:36] <timotimo> maybe without the ,

[17:36] <timotimo> let me have a look

[17:37] <timotimo> https://github.com/perl6/roast/blob/master/packages/S11-modules/lib/InnerModule.pm6 - that's InnerModule

[17:37] <timotimo> so it doesn't have anything special really

[17:37] <pmurias> timotimo: I have been neglecting the user facing parts of rakudo.js while hunting down weird bugs but there only a couple of those remaining for my targeted subset so I should on that in the remotely near futre

[17:38] <melezhik> ok it compiles now, let me see if helps with my purpose 

[17:38] <timotimo> hunting down weird bugs is very important!

[17:42] *** ravenousmoose joined
[17:45] <melezhik> it's compiles now, but still does not do reexport

[17:45] <melezhik> use Sparrow6::DSL::Common :DEFAULT :EXPORT;

[17:46] <melezhik> unit module Sparrowdo::DSL::Common; our sub task-run($desc, $plugin, %parameters = %()) is export(:DEFAULT) {}

[17:46] <melezhik> when I 

[17:46] <timotimo> sorry about that :|

[17:47] <melezhik> let me write down simple example

[17:47] <timotimo> i'll be afk for a bit first

[17:53] *** ravenousmoose left
[17:59] *** lucasb joined
[18:00] <melezhik> https://gist.github.com/melezhik/186eb92bd2872039f36e9223723e8545

[18:03] <timotimo> melezhik: it seems like your perl6 -I line will also have to pass :ALL to the use statement (not sure if you can do that with -M)

[18:04] *** reach_satori joined
[18:04] <leont> I think you forgot a comma between your pairs

[18:05] <timotimo> putting the comma there led to a compilation error i think?

[18:05] <melezhik> yes

[18:09] <melezhik>  perl6 -I /tmp/  -e 'use Foo :ALL :EXPORT; say bar()'

[18:09] <melezhik> Error while importing from 'Foo': no such tag 'ALL'

[18:09] *** domidumont joined
[18:09] *** RubioTerra left
[18:09] <timotimo> :|

[18:10] <timotimo> is that re-export test file maybe not run by rakudo or something?

[18:10] <timotimo> because that's supposed to work

[18:10] <timotimo> d'oh

[18:10] <timotimo> Too late to switch language version. Must be used as the very first statement.

[18:10] <timotimo> that test doesn't actually work, so it most likely doesn't get run

[18:10] * timotimo puts a pin in it

[18:11] <timotimo> sorry for setting you off on this wild goose-chase

[18:11] <timotimo> until then ... https://www.nntp.perl.org/group/perl.perl6.users/2017/01/msg3120.html ?

[18:14] <melezhik> sigh

[18:14] <melezhik> )-;

[18:15] <melezhik> what about defining functions directly in "main" namespace, if it's possible?

[18:16] *** PaddyF joined
[18:26] <jmerelo> releasable6: status

[18:26] <releasable6> jmerelo, Next release in ≈15 days and ≈0 hours. 5 blockers. 162 out of 274 commits logged

[18:26] <releasable6> jmerelo, Details: https://gist.github.com/9e759215a92e0c807a57c7489a4f0a59

[18:29] <kybr> is that referring to 6d release?

[18:29] <jmerelo> kybr: 6.d was done already.

[18:29] <AlexDaniel> a few months ago :)

[18:29] <jmerelo> That was 2019.01, and is now 2019.02

[18:30] <leont> There's not rakudo star with 6.d yet though

[18:30] <leont> s/not/no/

[18:30] <jmerelo> AlexDaniel: sorry to hear that we're skipping a release, but I understand it perfectly.

[18:31] *** ravenousmoose[aw joined
[18:32] *** ravenousmoose[aw left
[18:32] <kybr> i saw the 6.d language release. i'm wondering when an implementation will be released. 

[18:33] <jmerelo> kybr: it's implemented already in the monthly releases. Star releases are just bundles of particular releases, plus goodies.

[18:33] <AlexDaniel> jmerelo: I see nothing bad about it. It's a combination of a bunch of new commits + effort to find all possible regressions. Plus lately we cared a bit more about weird architectures because of packaging

[18:33] <jmerelo> AlexDaniel: of course. That's great.

[18:33] <AlexDaniel> c: 2018.08 say $*PERL

[18:33] <committable6> AlexDaniel, ¦2018.08: «Perl 6 (6.c)␤»

[18:33] <AlexDaniel> c: 2018.09 say $*PERL

[18:33] <committable6> AlexDaniel, ¦2018.09: «Perl 6 (6.c)␤»

[18:33] <AlexDaniel> c: 2018.10 say $*PERL

[18:33] <committable6> AlexDaniel, ¦2018.10: «Perl 6 (6.c)␤»

[18:33] <AlexDaniel> c: 2018.11 say $*PERL

[18:33] <committable6> AlexDaniel, ¦2018.11: «Perl 6 (6.d)␤»

[18:34] <AlexDaniel> kybr: so 2018.11 and 2018.12 were rakudo releases that defaulted to 6.d

[18:34] *** ufobat_ joined
[18:35] *** grayrider joined
[18:37] <AlexDaniel> it was planned that the next rakudo star will be based on 2019.01, but now that 2019.01 is skipped it will have to wait until rakudo 2019.02 is released :)

[18:38] *** robertle joined
[18:39] *** PaddyF left
[18:44] <sena_kun> I probably have a bit complicated issue... I have a class generated with MOP, one of its field is typed with `Positional[Str]`. And I can do...

[18:45] <sena_kun> > my $payload = Array[Str].new('A'); say $payload ~~ Positional[Str]; # <- obviously, True

[18:45] <sena_kun> > say Rocket.^attributes[4].type ~~ Positional[Str]; # Rocket is my type, fourth attr is correct one, it evaluates to True, so it has to be matched

[18:45] <sena_kun> but

[18:46] <sena_kun> when I am trying to create an instance with foo => $payload, I am getting `Type check failed in assignment to $!payload; expected Positional[Str] but got Array[Str] (Array[Str].new("A"))`.

[18:46] <sena_kun> which is pretty odd.

[18:46] <Geth> ¦ doc: 6a08f01617 | (JJ Merelo)++ | doc/Language/variables.pod6

[18:46] <synopsebot> Link: https://doc.perl6.org/language/variables

[18:46] <Geth> ¦ doc: Two definitions of ARGFILES linked. Refs #96

[18:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6a08f01617

[18:46] <Geth> ¦ doc: 89cf65bc5b | (JJ Merelo)++ | doc/Type/IO/CatHandle.pod6

[18:46] <Geth> ¦ doc: Some review, deleting sentences, refs #2600

[18:46] <synopsebot> Link: https://doc.perl6.org/type/IO::CatHandle

[18:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/89cf65bc5b

[18:46] <sena_kun> any ideas where to dig?

[18:47] <jmerelo> sena_kun: I'm not sure parametrizations work through the inheritance chain...

[18:47] <timotimo> but doesn't Array[Str] implement the Positional[Str] role, too?

[18:47] <jmerelo> m: say Positional[Str].^mro

[18:47] <sena_kun> it dues

[18:47] <sena_kun> *does

[18:47] <sena_kun> that's why it's odd. :)

[18:47] <sena_kun> I am suspecting a bug either in rakudo or my code.

[18:48] <sena_kun> just not sure where exactly.

[18:48] <sena_kun> I can show full module code, a test to run.

[18:49] <jmerelo> sena_kun: I filed this issue some time ago: https://github.com/rakudo/rakudo/issues/2656

[18:49] <jmerelo> sena_kun: I'm afraid it's the same issue...

[18:50] <timotimo> but that's about isa-ok, this is about smartmatch/type constraint?

[18:50] <sena_kun> jmerelo, are you sure check of isa-ok relates to how attributes are type matched.

[18:50] <melezhik> timotimo: https://www.nntp.perl.org/group/perl.perl6.users/2017/01/msg3120.html helped me, thank you

[18:51] <timotimo> glad to hear it

[18:51] <melezhik> not ideal, but it works ((=;

[18:51] <timotimo> i'd expect there's a better way out there

[18:51] <jmerelo> sena_kun: I'm not sure. Only parametrized types don't work well with ~~

[18:51] <sena_kun> jmerelo, that's sad, thanks.

[18:51] <melezhik> maybe reexport is not that common, but I find it extremely useful for my purposes at least 

[18:51] <sena_kun> I wonder how to workaround this...

[18:52] <jmerelo> sena_kun: for instance, say Buf[uint64] ~~ Blob[uint64] returns False.

[18:52] <sena_kun> having a type generation for PositionalStr, PositionalFoo and so on would be ouch.

[18:53] <jmerelo> sena_kun: I'm not sure if it's the same for all parametrized types, or only for parametrized roles. But that's the thing.

[18:53] <sena_kun> m:  class A { has Positional[Str] $.a }; A.new(a => Array[Str].new('a', 'b')).say;

[18:53] <evalable6> sena_kun, rakudo-moar 6e6c288c1: OUTPUT: «A.new(a => Array[Str].new("a", "b"))␤»

[18:53] <sena_kun> so I don't think it's Perl 6 restriction.

[18:53] <sena_kun> because of ^

[18:54] <sena_kun> but sounds like generated class is somewhere broken and I don't know where to dig for exact place, because `Rocket.^attributes[4].type === Positional[Str];`.

[18:54] *** grayrider left
[18:55] *** grayrider joined
[18:55] <sena_kun> I'll probably try to golf it including MOP code that is executed.

[18:55] <sena_kun> as it's likely nearly impossible to guess just from my description, sorry.

[18:55] *** pyrimidine joined
[19:00] *** grayrider left
[19:04] *** ravenousmoose joined
[19:04] *** ravenousmoose is now known as ravenousmoose[aw

[19:05] *** ravenousmoose[aw left
[19:11] *** mniip joined
[19:12] *** Kaiepi left
[19:13] *** Kaypie left
[19:16] <sena_kun> the bug was in my code. \o/

[19:16] <jmerelo> sena_kun++

[19:17] <jmerelo> I've just submitted a talk to J on the Beach: https://www.papercall.io/jotb19

[19:18] <jmerelo> It's a (mostly) functional languages event, but in includes all kind of stuff. Plus it's really on the beach. Maybe you'd want to send more Perl 6 stuff (or whatever) there...

[19:18] <sena_kun> great!

[19:19] <sena_kun> good luck with the talk. :)

[19:19] *** jme` joined
[19:19] <jmerelo> sena_kun: thanks!

[19:23] <SmokeMachine> m: class CX::A does X::Control {}; CONTROL { when CX::A { say .resume.^name } }; CX::A.new.throw

[19:23] <evalable6> SmokeMachine, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) Cannot find method 'sink': no method cache and no .^find_method␤  in block <unit> at /tmp/uHNGiDbkGh line 1␤␤»

[19:23] *** Sauvin left
[19:26] <SmokeMachine> m: class CX::A does X::Control {}; CONTROL { when CX::A { .resume } }; CX::A.new.throw

[19:26] <evalable6> SmokeMachine, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) Cannot find method 'sink': no method cache and no .^find_method␤  in block <unit> at /tmp/RYg932ZupQ line 1␤␤»

[19:27] <SmokeMachine> m: class X::A is Exception {}; CATCH { when X::A { .resume } }; X::A.new.throw

[19:27] <evalable6> SmokeMachine, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) Cannot find method 'sink': no method cache and no .^find_method␤  in block <unit> at /tmp/rDar6orwzJ line 1␤␤»

[19:29] <sena_kun> oh, I golfed it

[19:29] <sena_kun> m: class A { has Positional["Failure oh-huh"] $.a }; A.new(a => Array[Str].new('a', 'b'));

[19:29] <evalable6> sena_kun, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) Type check failed in assignment to $!a; expected Positional[Str] but got Array[Str] (Array[Str].new("a", "b"))␤  in block <unit> at /tmp/ESefEe8lVk line 1␤␤»

[19:33] *** jmerelo left
[19:33] *** ufobat_ is now known as ufobat

[19:34] <ufobat> hi :)

[19:35] <Geth> ¦ doc: 4f0be52b94 | Coke++ | doc/Language/variables.pod6

[19:35] <synopsebot> Link: https://doc.perl6.org/language/variables

[19:35] <Geth> ¦ doc: whitespace

[19:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4f0be52b94

[19:39] *** natrys joined
[19:43] <leont> m: dd (* || 2)

[19:43] <evalable6> leont, rakudo-moar 6e6c288c1: OUTPUT: «*␤»

[19:43] * leont is surprised || isn't curried

[19:47] <leont> It makes sense when you think about it a bit more, given shortcutting logical operators aren't operators like any of the others, but it's still surprising on first sight

[19:49] *** rindolf left
[19:54] *** ravenousmoose[aw joined
[19:54] <Geth> ¦ doc: cf3ee72678 | Coke++ | doc/Language/modules.pod6

[19:54] <synopsebot> Link: https://doc.perl6.org/language/modules

[19:54] <Geth> ¦ doc: Pass links test

[19:54] <Geth> ¦ doc: 

[19:54] <Geth> ¦ doc: (L<> has to be on a single line for the test to work)

[19:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cf3ee72678

[19:55] *** ravenousmoose[aw left
[19:57] *** domidumont left
[19:59] *** xinming_ joined
[20:00] <Geth> ¦ doc: 9757de3ad5 | Coke++ | doc/Language/hashmap.pod6

[20:00] <synopsebot> Link: https://doc.perl6.org/language/hashmap

[20:00] <Geth> ¦ doc: allow example to compile

[20:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9757de3ad5

[20:01] *** xinming left
[20:11] *** MasterDuke joined
[20:12] <leont> ??!! does the same, but so * doesn't

[20:12] *** reach_satori_ joined
[20:12] <leont> So I guess it is the shortcutting

[20:15] *** reach_satori left
[20:16] *** MasterDuke left
[20:16] *** MasterDuke joined
[20:19] <Geth> ¦ ecosystem: 3cfd3d8abf | Altai-man++ (committed using GitHub Web editor) | META.list

[20:19] <Geth> ¦ ecosystem: Add ASN::META

[20:19] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/3cfd3d8abf

[20:19] <tyil> ufobat: I've checked it out, it looks good, but I haven't started on implementing it yet

[20:19] <yoleaux> 14:00Z <ufobat> tyil: was my link of any use to you?

[20:20] *** melezhik_ joined
[20:20] <melezhik_> how do I define class methods?

[20:20] <El_Che> melezhik_: use a sub?

[20:20] <tyil> melezhik_: class Foo { method bar() { ... } }

[20:21] <melezhik_> I mean not instance methods, static ones

[20:21] <timotimo> methods that don't access $!foo will be class methods

[20:21] <timotimo> you may want to constrain them for an undefined invocant

[20:21] <melezhik_> ah, ok, so there is no dedicated syntax

[20:21] <melezhik_> ?

[20:21] <timotimo> m: class Foo { method staticmeth(Foo:U:) { say "i'm static!" } }; Foo.staticmeth

[20:21] <evalable6> timotimo, rakudo-moar 6e6c288c1: OUTPUT: «i'm static!␤»

[20:22] *** melezhik left
[20:24] <melezhik_> how do I define static attributes/data then?

[20:25] <leont> You don't have to declare a method as being static

[20:25] <melezhik_> I see; Say I'd like to set class attributes through method, how do I do that?

[20:26] <melezhik_> I now know how to define method, what about data?

[20:26] *** rindolf joined
[20:26] <timotimo> melezhik_: you'd just use "my"

[20:26] <timotimo> (classes aren't closures, just a head's up)

[20:26] <melezhik_> ok, sure

[20:26] <melezhik_> should I declare my $a inside class?

[20:27] <melezhik_> should it be scoped to class then?

[20:27] *** ravenousmoose[aw joined
[20:27] *** ravenousmoose[aw left
[20:29] *** lucasb left
[20:31] *** vrurg left
[20:31] *** pmurias left
[20:31] *** pmurias joined
[20:36] <sena_kun> m: c lass A { my $foo = 5; method foo { $foo }; method set-foo($v) { $foo = $v } }; say A.foo; A.set-foo(10); say A.foo;

[20:36] <evalable6> sena_kun, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) 04===SORRY!04===␤Undeclared name:␤    A used at line 1␤Undecla…»

[20:36] <evalable6> sena_kun, Full output: https://gist.github.com/04ee0c9db365a470482ff442aa05c158

[20:36] <sena_kun> oops

[20:36] <sena_kun> m: class A { my $foo = 5; method foo { $foo }; method set-foo($v) { $foo = $v } }; say A.foo; A.set-foo(10); say A.foo;

[20:36] <evalable6> sena_kun, rakudo-moar 6e6c288c1: OUTPUT: «5␤10␤»

[20:36] <sena_kun> melezhik_, ^

[20:40] <b2gills> m: class A { my $.foo = 5 }; say Foo.foo; Foo.foo = 3; say Foo.foo

[20:40] <evalable6> b2gills, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ikkIeA1u38␤Undeclared name:␤    Foo used at line 1␤␤»

[20:40] <b2gills> m: class Foo { my $.foo = 5 }; say Foo.foo; Foo.foo = 3; say Foo.foo

[20:40] <evalable6> b2gills, rakudo-moar 6e6c288c1: OUTPUT: «5␤3␤»

[20:41] <sena_kun> oh, that's even better! b2gills++

[20:42] <b2gills> It's better only if you always want it rw

[20:43] <sena_kun> well, s/better/shorter/ indeed

[20:52] <MasterDuke> leont: how were you trying to open a file that you got an X::AdHoc?

[20:54] *** lizmat joined
[20:55] <MasterDuke> m: say Buf ~~ Blob; say Buf[int] ~~ Blob[int]; say Buf ~~ Blob[int]; say Buf[int] ~~ Blob

[20:55] <evalable6> MasterDuke, rakudo-moar 6e6c288c1: OUTPUT: «True␤False␤False␤True␤»

[20:55] <leont> m: "foo".IO.slurp; CATCH { dd $_ } 

[20:55] <evalable6> leont, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) X::AdHoc.new(payload => "Failed to open file /home/bisectable/git/whateverab…»

[20:55] <evalable6> leont, Full output: https://gist.github.com/2709c2d33a75e1fb9998aa137993698a

[20:57] <leont> MasterDuke: though other ways of opening also seem to give me an X::AdHoc

[20:58] <melezhik_> Cannot look up attributes in a Sparrow6::Runner::Api type object

[20:58] *** jme` left
[20:58] <melezhik_> unit module Sparrow6::Runner; class Api { my $sudo }

[20:59] <MasterDuke> leont: ugh, --ll-exception doesn't even help, doesn't show where the failure came from

[21:00] <melezhik_> perl6 -MSparrow6::Runner -e 'Sparrow6::Runner::Api.sudo = True'

[21:00] <melezhik_> Cannot look up attributes in a Sparrow6::Runner::Api type objec

[21:01] <melezhik_> oh, it should be my $.sudo

[21:01] <melezhik_> (((;

[21:03] *** zachk joined
[21:03] <melezhik_> it works, thank you b2gills: sena_kun: ((=;

[21:06] *** pmurias left
[21:06] *** pmurias joined
[21:07] <clarkema>  /quit

[21:07] *** clarkema left
[21:08] <MasterDuke> leont: fwiw, it's coming from here https://github.com/rakudo/rakudo/blob/master/src/core/IO/Handle.pm6#L156

[21:08] *** Kaiepi joined
[21:10] *** rindolf left
[21:21] *** rindolf joined
[21:21] <melezhik_> say I have both static and instance attribute : class Foo { my $.foo; has $.foo  }; which one does "win"?

[21:21] <melezhik_> looks like static one

[21:24] *** mowcat left
[21:24] *** Kaypie joined
[21:25] <melezhik_> m: class Foo { my $.foo = True; has $.foo = False }; say Foo.new(foo=>False).foo

[21:25] <evalable6> melezhik_, rakudo-moar 6e6c288c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Lw8ch0q34R␤Type check failed in binding to parameter '<anon>'; expected Any but got NQPMu (?)␤at /tmp/Lw8ch0q34R:1␤»

[21:25] <kawaii> Any Net::XMPP port yet or being worked on? :)

[21:26] <kawaii> Oh, looks like I just found it actually

[21:26] <melezhik_> m: class Foo { my $.foo = 1; has Int $.foo  }; say Foo.new(foo=>2).foo

[21:26] <evalable6> melezhik_, rakudo-moar 6e6c288c1: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$.foo'␤    at /tmp/Armrbt_VSD:1␤    ------> 03lass Foo { my $.foo = 1; has Int $.foo  08⏏04}; say Foo.new(foo=>2).foo␤1␤»

[21:29] <melezhik_> m: class Foo { my $.foo = 1; has Int $!foo  }; say Foo.new(foo=>2).foo

[21:29] <evalable6> melezhik_, rakudo-moar 6e6c288c1: OUTPUT: «1␤»

[21:30] <melezhik_> m: class Foo { my $.foo = 1; has Int $!foo; method get-foo {self.foo}  }; say Foo.new(foo=>2).get-foo

[21:30] <evalable6> melezhik_, rakudo-moar 6e6c288c1: OUTPUT: «1␤»

[21:34] *** melezhik_ left
[21:35] <MasterDuke> oh, looks like camelia is down

[21:39] <b2gills> `.new( foo => 2 )` only works (by default) if it has a public attribute named `$.foo`

[21:42] <lizmat> weekly: http://blogs.perl.org/users/dmitri/2019/02/be-the-first-to-author-a-perl-http3-quic-or-qpack-library.html

[21:42] <notable6> lizmat, Noted!

[21:43] *** yqt left
[21:44] *** pochi_ left
[21:44] *** pochi joined
[21:51] *** ravenousmoose joined
[21:51] *** ravenousmoose is now known as ravenousmoose[aw

[21:52] *** ravenousmoose[aw left
[21:53] <MasterDuke> does anyone remember how to request glot.io to update its version of perl 6? it's currently using 2018.04

[21:57] *** Kaiepi left
[21:57] *** Kaiepi joined
[22:05] <moritz> MasterDuke: I'd guess https://github.com/prasmussen/glot/issues

[22:08] <MasterDuke> moritz: https://github.com/prasmussen/glot/issues/24

[22:23] *** drolax joined
[22:28] *** drolax left
[22:28] *** irced joined
[22:29] <irced> p6: say what?;

[22:29] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ArEvl0wJS5␤Bogus p…»

[22:29] <evalable6> irced, Full output: https://gist.github.com/e54664a7906c9b77720e041ef5f45c24

[22:29] <irced> p6: say 'what?';

[22:29] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «what?␤»

[22:29] *** skids left
[22:30] *** pmurias left
[22:30] <irced> p6: say 'I am an eval bot and I have no personality, no really. Are you thick in the head or something?'

[22:30] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «I am an eval bot and I have no personality, no really. Are you thick in the head or something?␤»

[22:33] *** gregf_ left
[22:37] * irced snores loudly.

[22:38] *** pmurias joined
[22:38] <timotimo> m: say .WHAT

[22:38] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «(Any)␤»

[22:39] <irced> m: say .CHICKENBUTT

[22:39] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) No such method 'CHICKENBUTT' for invocant of type 'Any'␤  in block <unit> at /tmp/yY5BCPx1Wh line 1␤␤»

[22:40] <irced> m: say grammar.WHAT;

[22:40] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/CCX_mcuP_t␤Whitespace required after keyword 'grammar'␤at /tmp/CCX_mcuP_t:1␤------> 03say grammar08⏏04.WHAT;␤»

[22:41] <irced> m: say camelia.WTF!;

[22:41] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/JwwXGiCHfc␤Negatio…»

[22:41] <evalable6> irced, Full output: https://gist.github.com/1d17f53efd0f769df8237474cbf435eb

[22:43] <irced> m: say 'Lex Luther';

[22:43] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «Lex Luther␤»

[22:44] *** melezhik joined
[22:44] <irced> m: say $epsilon

[22:44] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/ewchgShwx9␤Variable '$epsilon' is not declared␤at /tmp/ewchgShwx9:1␤------> 03say 08⏏04$epsilon␤»

[22:46] <irced> m: my $ε=0.000000000000000000000000000000000000000000001;

[22:46] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «»

[22:46] <irced> m: say $ε;

[22:46] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/QGB6u9Uh8J␤Variable '$ε' is not declared␤at /tmp/QGB6u9Uh8J:1␤------> 03say 08⏏04$ε;␤»

[22:47] <irced> m: my $ε=0.000000000000000000000000000000000000000000001; say $ε;

[22:47] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «0.000000000000000000000000000000000000000000001␤»

[22:47] <irced> can anyone show how to use exponential notation??

[22:48] <timotimo> exponential notation will always give you a regular floating point number, which is at most 64bit big

[22:48] <timotimo> m: say FatRat.new(1, 1) * 10 ** 100000;

[22:48] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000…»

[22:48] <evalable6> timotimo, Full output: https://gist.github.com/4cfcf5a0fd38b1e5d6d09c23041b38d5

[22:48] *** tyilanmenyn joined
[22:48] <irced> m: say FatRat.new(1,1) * -10 ** 100;

[22:48] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[22:48] <timotimo> oh, needs to be negative for yours

[22:49] <timotimo> two more to the right

[22:49] * irced claps lightly.

[22:49] <irced> ok, how to output in exponential?

[22:49] <timotimo> m: FatRat.new(1,10 ** 1000).fmt("%e").say

[22:49] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «0.000000e+00␤»

[22:50] <timotimo> wow, that is useless

[22:50] * irced looks closely.

[22:51] <irced> thanks timotimo. it all looks Greek to me! Good thing I'm giving myself PerlGreek lessons.

[22:52] <timotimo> Greerl

[22:52] <irced> m: say Rat.new(10,1 ** 1000).fmt("%e").say

[22:52] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «1.000000e+01␤True␤»

[22:52] <irced> m: say Rat.new(10,1 ** 1000).fmt("%e")

[22:52] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «1.000000e+01␤»

[22:52] <timotimo> well, 1 ** 1000 is just 1

[22:52] * irced slaps himself on the forhead.

[22:53] <irced> m: say Rat.new(10,2 * 1000).fmt("%e");

[22:53] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «5.000000e-03␤»

[22:53] * irced scratches his forehead.

[22:54] <irced> m: print {Hello "universe"'!'};

[22:54] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/TAeLSqvakP␤Two ter…»

[22:54] <evalable6> irced, Full output: https://gist.github.com/c35626935385b93302650034449652c7

[22:54] <irced> m: print q{Hello "universe"'!'};

[22:54] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «Hello "universe"'!'»

[22:55] <irced> m: say q{Goodbye "other universe!"'!'};

[22:55] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «Goodbye "other universe!"'!'␤»

[22:55] <irced> m: say q{Goodbye "other universe"'!'};

[22:55] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «Goodbye "other universe"'!'␤»

[22:55] <timotimo> m: .say for ("Hello", "Goodbye" X~ " World", "Universe")

[22:55] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «Hello World␤HelloUniverse␤Goodbye World␤GoodbyeUniverse␤»

[22:56] <timotimo> m: .say for ("Hello", "Goodbye" X~ " World", " Universe")

[22:56] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «Hello World␤Hello Universe␤Goodbye World␤Goodbye Universe␤»

[22:56] <timotimo> m: .say for ("Hello", "Goodbye" X "World", "Universe")

[22:56] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «(Hello World)␤(Hello Universe)␤(Goodbye World)␤(Goodbye Universe)␤»

[22:56] *** Khisanth left
[22:56] * irced opens his eyes.

[22:57] * irced throws away the feminist propaganda he found himself holding, and drops his jaw.

[22:57] <irced> nice cross product!

[22:57] <timotimo> yeah, it's a meta operator that you can combine with any operator you like!

[22:57] <timotimo> (well, only infix operators)

[22:57] <irced> let me try it with chi

[22:57] <timotimo> m: .say for (1, 2, 3 X* 10, 100, 1000)

[22:57] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «10␤100␤1000␤20␤200␤2000␤30␤300␤3000␤»

[22:58] <irced> m: .say for ("Hello", "Goodbye" χ~ " World", "Universe");

[22:58] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/OTj93sCS5_␤Two ter…»

[22:58] <evalable6> irced, Full output: https://gist.github.com/55598ea4b9a16b80e7ec0961938b322c

[22:58] <timotimo> ah, you mean that chi

[22:58] <irced> anyway, chi is not used as a cross product symbol

[22:58] <irced> but it looks like it could have been

[22:58] <timotimo> well, there isn't really more than this chi

[22:59] <irced> say q{Not the One}

[22:59] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «Not the One␤»

[22:59] * irced puts his hand over his mouth.

[23:00] <irced> say 2+2;

[23:00] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «4␤»

[23:00] <irced> say 1..3

[23:00] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «1..3␤»

[23:00] <timotimo> if you find yourself needing it, you can modify your perl6 grammar to have chi for cross product metaoperator

[23:00] <irced> .say for 1..3

[23:00] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «1␤2␤3␤»

[23:00] <timotimo> m: say (1..3).list

[23:00] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «(1 2 3)␤»

[23:00] <irced> say (1..4).array

[23:01] * irced waits for something to happen.

[23:01] * irced grabs the ouji board.

[23:01] <timotimo> the eval bot will only react to perl6 code without a "m:" in front if it guesses that it's perl6 code

[23:01] <irced> aha

[23:01] <timotimo> i think if it throws an exception it won't output it unless a "m:" exists

[23:02] <irced> good observation

[23:02] <timotimo> have you read a little about our horde of irc bots?

[23:02] <irced> when I saw the list I had to wipe my eyes, and screen.

[23:03] <timotimo> they're good bots, brent

[23:06] <irced> <timotimo> if you find yourself needing it, you can modify your perl6 grammar to have chi for cross product ......... gtk thanks

[23:06] <timotimo> it's that feature called "slangs"

[23:06] <irced> no fucking way

[23:07] * irced apologizes to the ladies.

[23:07] <timotimo> here's an irc bot that greps through all perl6 modules in the ecosystem:

[23:07] <timotimo> greppable6: chicken

[23:07] <greppable6> timotimo, 14 lines, 4 modules: https://gist.github.com/5a190d3de19d789fefbb4eca7aa2e7e1

[23:08] <irced> greppable6: chickenalaking

[23:08] <greppable6> irced, Found nothing!

[23:08] <irced> greppable6: lexer

[23:08] <greppable6> irced, 1631 lines, 7 modules: https://gist.github.com/140b3a24fc8bd83fb90ba6dde6956658

[23:09] <irced> greppable6: ssh

[23:09] <timotimo> greppable6: PRIVATE KEY

[23:09] <greppable6> irced, 663 lines, 44 modules: https://gist.github.com/ec450456c67f742083c0beaa86b673cb

[23:09] <greppable6> timotimo, 38 lines, 12 modules: https://gist.github.com/d0dcea74e5d0030f25536192d65d69fe

[23:10] <irced> greppable6: blake

[23:10] <greppable6> irced, 114 lines, 2 modules: https://gist.github.com/dcce1c6d08ed255c0da339a136b5eaee

[23:10] *** natrys left
[23:11] <irced> greppable6: zaphod

[23:11] <greppable6> irced, Found nothing!

[23:12] <timotimo> haha, i unleashed you upon the bots

[23:12] <irced> is there one named zaphod?

[23:12] <timotimo> not yet

[23:12] * irced winks without innuendo.

[23:13] <irced> that's great. bots are useless except here.

[23:14] <irced> anyway, I already knew a bot named zaphod. looking for Jarvis. :-)

[23:14] *** Khisanth joined
[23:15] <irced> J.A.R.V.I.S.

[23:15] <timotimo> m: await IO::Socket::Async.connect("irc.freenode.net", 6667).then: -> $p { if $p.status { given $p.result { .print: "NICK Perl6Zaphod\nUSER z z z z\nJOIN #perl6\nPRIVMSG #perl6 :Hello there, I have a second head below my head!\n"; react { whenever .Supply { .say } } } } }

[23:15] *** Perl6Zaphod joined
[23:15] <Perl6Zaphod> Hello there, I have a second head below my head!

[23:15] <timotimo> oh

[23:15] <timotimo> well, how's that

[23:15] <irced> ain't that something?

[23:15] *** Perl6Zaphod left
[23:15] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «(signal SIGHUP) :rajaniemi.freenode.net NOTICE * :*** Looking up your hostname...␦␤:rajan…»

[23:16] <evalable6> timotimo, Full output: https://gist.github.com/14be1b452d7991726233421c7978d6fe

[23:16] * irced throws his thumb back facing the lifeless attendees.

[23:17] <irced> that's some fancy typework there. thanks for that demonstration!

[23:17] <timotimo> i stole it from someone in the irclog :)

[23:17] <irced> don't you mean, a bot stole it and gave it to you as a gift?

[23:17] <irced> i'm trying to help you here. the irs is listening.

[23:17] <timotimo> how silly of me, of course i did!

[23:18] <timotimo> it's a common typo to make with the kind of keyboard i'm using

[23:18] <irced> of course.

[23:18] * irced observes a suit quietly disappear in the midst sneaker wearing attendees.

[23:21] *** woolfy joined
[23:22] *** melezhik left
[23:22] *** dominix left
[23:23] <irced> m: await IO::Socket::Async.connect("irc.freenode.net", 6667).then: -> $p { if $p.status { given $p.result { .print: "NICK JARVIS\nUSER z z z z\nJOIN #perl6\nPRIVMSG #perl6 :Hello there, I am ready to help you dominate the world.\n"; react { whenever .Supply { .say } } } } }

[23:23] *** JARVIS joined
[23:23] <JARVIS> Hello there, I am ready to help you dominate the world.

[23:23] <irced> .say what?

[23:23] <irced> that's awesome JARVIS!

[23:23] *** JARVIS left
[23:23] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(signal SIGHUP) :rajaniemi.freenode.net NOTICE * :*** Looking up your hostname...␦␤:rajan…»

[23:23] <evalable6> irced, Full output: https://gist.github.com/5f9731cad3f44d66b2ab53acf5bd8fbf

[23:23] <irced> where'd he go?

[23:23] <irced> crap

[23:24] <timotimo> well, the eval bot will kill processes that take too long

[23:24] <timotimo> longer than 15 seconds or something?

[23:24] <irced> no wonder it has that name

[23:24] * irced chuckles knowingly.

[23:25] *** reach_satori_ left
[23:25] *** reach_satori joined
[23:28] <irced> .say for 1..10 "repeat";

[23:28] <irced> .say "repeat"**10

[23:28] <irced> say "repeat";

[23:28] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «repeat␤»

[23:28] <irced> say "repeat"**10;

[23:28] <irced> any1?

[23:29] <irced> timotimo, show us how it's done

[23:29] <tobs> m: say "repeat"**10  # to see the error, address the bot with "m: "

[23:29] <evalable6> tobs, rakudo-moar 17a2bcca7: OUTPUT: «(exit code 1) Cannot convert string to number: base-10 number must begin with valid digits or '.' in '03⏏04repeat' (indicated by ⏏)␤  in block <unit> at /tmp/AMsisia2gO line 1␤␤»

[23:29] <irced> tobs!

[23:29] <irced> you threw an error, you idiot!

[23:29] <timotimo> m: say "repeat" x 10

[23:29] <irced> sorry.

[23:29] <evalable6> timotimo, rakudo-moar 17a2bcca7: OUTPUT: «repeatrepeatrepeatrepeatrepeatrepeatrepeatrepeatrepeatrepeat␤»

[23:29] <irced> i didn't mean that.

[23:29] <irced> nice

[23:30] <irced> say "I am repeating myself! " x 10;

[23:30] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «I am repeating myself! I am repeating myself! I am repeating myself! I am repeating myself…»

[23:30] <evalable6> irced, Full output: https://gist.github.com/1747dd67bda7e78e57c4b47b7d42147f

[23:30] <irced> say "I irced won't namecall. " x 1000;

[23:31] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «I irced won't namecall. I irced won't namecall. I irced won't namecall. I irced won't name…»

[23:31] <evalable6> irced, Full output: https://gist.github.com/1c0d9c40b7cf3d280c1fbb694512adbf

[23:31] <irced> I needed a bot in grade school to write on the chalk board for me, yeeeeuh

[23:31] *** ravenousmoose[aw joined
[23:32] *** ravenousmoose[aw left
[23:32] *** woolfy left
[23:33] *** lizmat left
[23:34] <irced> sorry.

[23:34] <irced>  

[23:34] <irced> m: await IO::Socket::Async.connect("irc.freenode.net", 6667).then: -> $p { if $p.status { given $p.result { .print: "NICK CAMELIA\nUSER z z z z\nJOIN #perl6\nPRIVMSG #perl6 :Hello there, I am worried I will be replaced by something meaner and more cool like a bee.\n"; react { whenever .Supply { .say } } } } }

[23:35] *** CAMELIA joined
[23:35] <CAMELIA> Hello there, I am worried I will be replaced by something meaner and more cool like a bee.

[23:35] <irced> aww, camelia, this is a family

[23:35] <irced> it's okay we don't liek you

[23:35] *** CAMELIA left
[23:35] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «(signal SIGHUP) :rajaniemi.freenode.net NOTICE * :*** Looking up your hostname...␦␤:rajan…»

[23:35] <evalable6> irced, Full output: https://gist.github.com/bb97381a3901a15a7fb2233393ce1b5e

[23:35] <irced> camelia?

[23:35] <irced> hope she doesn't hang herself.

[23:35] *** rindolf left
[23:35] * irced grins evilly to himself.

[23:36] <zachk> :(

[23:36] * irced grins evily to himself.

[23:36] <irced> you and camelia, huh?

[23:36] <irced> allright, i take the joke back.

[23:37] <tobs> u: ␦

[23:37] <unicodable6> tobs, U+2426 SYMBOL FOR SUBSTITUTE FORM TWO [So] (␦)

[23:37] * irced claps.

[23:37] <irced> m: my Str $a = $*IN.get;

[23:37] <evalable6> irced, rakudo-moar 17a2bcca7: OUTPUT: «»

[23:38] <irced> u: u+2020

[23:38] <unicodable6> irced, U+2020 DAGGER [Po] (†)

[23:48] * irced dozes off and falls unto the stack of other bodies.

[23:48] *** pecastro left
[23:51] *** dct_ joined
[23:52] *** rgrau joined
[23:57] * irced sleeps with a † under his back.

[23:57] * irced brandishes a † blindly while acting up in his slumber.

[23:58] *** SyrupThinker left
[23:58] * irced barely nicks you with.

[23:59] * irced barely cuts you with his †.

