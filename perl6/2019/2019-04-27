[00:03] *** netrino_ joined
[00:05] *** netrino left
[00:15] *** abraxxa left
[00:19] *** Manifest0 left
[00:23] *** natrys left
[00:24] *** Manifest0 joined
[00:27] *** fake_space_whale joined
[00:31] *** comborico1611 left
[00:36] *** kurahaupo left
[00:37] *** kurahaupo joined
[00:51] *** aborazmeh left
[00:58] *** buffet left
[00:58] *** buffet joined
[00:58] *** sftp_ joined
[00:59] *** sftp left
[00:59] *** sftp_ is now known as sftp

[01:00] *** lizmat joined
[01:08] *** raschipi joined
[01:13] *** Manifest0 left
[01:13] *** raschipi left
[01:18] *** Manifest0 joined
[01:19] *** ddddddd left
[01:26] *** Manifest0 left
[01:27] <Xliff> m: .say for 1, 2, 3, 'a'

[01:27] <evalable6> Xliff, rakudo-moar 07b4f7438: OUTPUT: «1␤2␤3␤a␤»

[01:32] *** Manifest0 joined
[01:33] *** zacts joined
[01:33] *** netrino_ left
[01:46] *** Manifest0 left
[01:53] *** Manifest0 joined
[02:42] *** cpup joined
[02:42] *** Manifest0 left
[02:47] *** Manifest0 joined
[02:51] *** zacts left
[03:03] *** Manifest0 left
[03:06] <Xliff> m: role X { method y { … }}; class Y does X { method y { say "yes" } }; Y.new.y

[03:06] <evalable6> Xliff, rakudo-moar 07b4f7438: OUTPUT: «yes␤»

[03:06] <Xliff> ^^ Voldenet 

[03:07] <Voldenet> well, it certainly is shorter

[03:08] <Voldenet> I mean, by using Y instead of ::

[03:08] *** Manifest0 joined
[03:09] <Xliff> m: role X { method y { … }}; class Y does role :: { method y { say "yes" } }; Y.new.y

[03:09] <evalable6> Xliff, rakudo-moar 07b4f7438: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/SNN66u0O7h␤Invalid…»

[03:09] <evalable6> Xliff, Full output: https://gist.github.com/b4f889014c894f2fc63718d9ac9f0fe6

[03:10] <Xliff> Why the requirement of '::'

[03:10] <Xliff> Roles can be lexically scoped.

[03:10] <Voldenet> it's one-time use case anyway

[03:11] <Xliff> m: role X { method y { … }}; class :: does X { method y { say "yes" } }.new.y

[03:11] <evalable6> Xliff, rakudo-moar 07b4f7438: OUTPUT: «yes␤»

[03:11] <Xliff>  *shrug*

[03:16] <Voldenet> My specific use case is event handlers - I've got a few methods "on-success", "on-fail", "on-queue" in role

[03:20] <holyghost> Xliff : you do .new.y so you call on the instance, to be exact

[03:21] <holyghost> Voldenet : maybe look at a system such as libsigc++, using slots for your roles

[03:22] <holyghost> it's a library built for callbacks and what not

[03:24] *** fake_space_whale left
[03:27] <holyghost> You might say it's LISP CLOS OOP slots and lambda calculus for event functionality 

[03:33] *** vrurg left
[03:33] <Voldenet> I'm doing something similar, but I'm not going to decouple event calling from the calling class for the sake of simplicity

[03:53] *** vrurg joined
[03:54] *** Cabanoss- joined
[03:54] *** [joker] left
[03:55] *** Cabanossi left
[03:55] *** Cabanoss- is now known as Cabanossi

[04:02] *** sauvin joined
[04:07] *** Manifest0 left
[04:12] *** Manifest0 joined
[04:32] *** molaf joined
[04:51] *** mojca joined
[04:51] *** mojca left
[04:51] *** mojca joined
[04:52] *** Manifest0 left
[04:55] *** atroxaper joined
[04:55] *** mojca1 joined
[04:56] *** mojca left
[04:57] *** Manifest0 joined
[05:00] <holyghost> .tell Xliff I've sent you some email, please respond

[05:00] <yoleaux> holyghost: I'll pass your message to Xliff.

[05:02] *** mojca1 left
[05:10] *** mojca joined
[05:10] *** mojca left
[05:10] *** mojca joined
[05:10] *** mojca left
[05:10] *** mojca joined
[05:10] *** mojca left
[05:10] *** mojca joined
[05:14] *** mojca left
[05:16] *** Manifest0 left
[05:23] *** Manifest0 joined
[05:44] *** vrurg left
[05:46] *** Manifest0 left
[05:52] *** Manifest0 joined
[05:56] *** atroxaper left
[06:24] *** Manifest0 left
[06:30] *** lizmat left
[06:31] *** Manifest0 joined
[06:35] *** [particle] left
[06:52] *** ufobat_ joined
[06:53] <Xliff> Anyone seen this? Unknown type NativeCall::Types::void used in native call.

[06:53] <yoleaux> 05:00Z <holyghost> Xliff: I've sent you some email, please respond

[06:53] <Xliff> .tell holyghost Sure. I'll get back to you.

[06:53] <yoleaux> Xliff: I'll pass your message to holyghost.

[06:53] *** cpan-p6 left
[06:54] *** cpan-p6 joined
[06:54] *** cpan-p6 left
[06:54] *** cpan-p6 joined
[06:56] *** ufobat__ left
[06:57] *** jmerelo joined
[06:57] <jmerelo> releasable6: status

[06:57] <releasable6> jmerelo, Next release will happen when it's ready. 2 blockers. 61 out of 245 commits logged (⚠ 51 warnings)

[06:57] <releasable6> jmerelo, Details: https://gist.github.com/f031e46eb692e76cca4da451ccb4a95f

[06:58] <Xliff> .tell holyghost Done.

[06:58] <yoleaux> Xliff: I'll pass your message to holyghost.

[07:14] *** atroxaper joined
[07:42] *** Manifest0 left
[07:48] *** Manifest0 joined
[07:56] *** jmerelo left
[07:58] *** rindolf joined
[08:04] *** lizmat joined
[08:06] *** woolfy joined
[08:19] *** lizmat left
[08:26] *** molaf left
[08:26] *** lizmat joined
[08:27] *** Manifest0 left
[08:31] *** cpage left
[08:33] *** Manifest0 joined
[08:42] *** molaf joined
[08:48] *** Manifest0 left
[08:53] *** Manifest0 joined
[08:54] *** lichtkind left
[09:01] *** Black_Ribbon left
[09:03] *** rindolf left
[09:06] *** lichtkind joined
[09:09] *** rindolf joined
[09:13] *** aborazmeh joined
[09:13] *** aborazmeh left
[09:13] *** aborazmeh joined
[09:14] *** pminten joined
[09:20] *** Xliff left
[09:24] *** ufobat_ left
[09:25] *** lichtkind left
[09:27] *** pminten left
[09:30] *** sena_kun joined
[09:41] *** lichtkind joined
[09:42] *** molaf left
[10:01] *** Manifest0 left
[10:05] *** Manifest0 joined
[10:12] *** mowcat joined
[10:14] *** lichtkind left
[10:15] *** atroxaper left
[10:18] *** mowcat left
[10:24] *** Manifest0 left
[10:31] *** Manifest0 joined
[11:05] <sena_kun> kawaii, ping?

[11:06] <kawaii> sena_kun: pong!

[11:07] <sena_kun> kawaii, hi! As a release manager, do you have an access to release files like moarvm|nqp-2019.03.tar.gz? If they are stored somewhere besides a dead server, and if not can be build them?

[11:07] <kawaii> let me check, AlexDaniel gave me access to a single server _somewhere_, but I fear it might be the dead one

[11:08] <sena_kun> thanks

[11:09] <kawaii> sena_kun: yeah seems so, my key was added to www.p6c.org but that's it, sorry :/

[11:09] <sena_kun> users keep getting issues on attempt to get a release or upgrade one, which is pretty damn bad, so I thought maybe we can get at least latest release on the backup server

[11:09] <sena_kun> kawaii, can we/you build one?

[11:10] <sena_kun> I think we have rakudo star release re-created, so likely just need to upload to a new server to match old url

[11:10] <sena_kun> but no idea what to do with the normal ones

[11:11] <kawaii> sena_kun: have you tried asking over at the moarvm channel if they have any of the old files?

[11:12] <sena_kun> kawaii, not yet, but I won't interfere with you. :)

[11:12] <kawaii> I've just nudged them since i'm waiting for moarvm 2019.04 anyway

[11:13] <lizmat> nine is looking at the last reproducibility issues and would rather have a little more time to figure out whether changes to MoarVM are needed

[11:13] <lizmat> kawaii: ^^

[11:13] <kawaii> lizmat: thank you for the update :)

[11:14] <lizmat> yw :-)

[11:16] <holyghost> tell .Xliff thanks a lot, I'm back on your VM :-)

[11:16] <yoleaux> 06:53Z <Xliff> holyghost: Sure. I'll get back to you.

[11:16] <yoleaux> 06:58Z <Xliff> holyghost: Done.

[11:17] <ugexe> I've put my github p6c ecosystem mirror as the preferred choice instead of ecosystem-api.p6c.org in zef 0.7.4

[11:17] <sena_kun> ugexe++

[11:19] *** lichtkind joined
[11:22] <holyghost> .tell Xliff I better use CPAN for NetBSD::X software as your box in the ecosystem won't pull it as you said, I really need to have packages for netbsd pkgsrc later on

[11:22] <yoleaux> holyghost: I'll pass your message to Xliff.

[11:23] *** aborazmeh left
[11:23] <holyghost> They also need a Perl6 maintainer, which I might do on my own or with some help

[11:23] *** ccntrq left
[11:26] *** atroxaper joined
[11:28] <holyghost> macports also needs one IIRC

[11:37] *** ccntrq joined
[11:38] *** pecastro joined
[11:39] <holyghost> Is there anyone who can give me webspace for putting GNU software on it ? I have these 2 and 20GB tarballs of my old yellowcouh.org server, but it was too expensive to support any longer

[11:40] <holyghost> just a login and a webserver

[11:42] <holyghost> s/yellowcouh/yellowcouch

[11:43] <holyghost> ok nm :-)

[11:44] <holyghost> .tell Xliff I'm going to upload my old server home directories to my holyghost account, they should be cherished as it's all my software during 10 years

[11:44] <yoleaux> holyghost: I'll pass your message to Xliff.

[11:45] <holyghost> .tell Xliff they're tarballs home-X.tar.gz, thanks for looking :-)

[11:45] <yoleaux> holyghost: I'll pass your message to Xliff.

[11:52] *** aindilis left
[11:54] *** aindilis joined
[12:05] <El_Che> sena_kun: my pkgs are just a wrapper around /opt/rakudo-pkg in case you need to test something against a specific version

[12:05] *** Manifest0 left
[12:05] <El_Che> holyghost: if it's code put it on github or gitlab?

[12:06] <sena_kun> El_Che, I was more interesting in ways to get binaries back so users could install/update their releases instead of getting an error about "It will be fixed on 23th". :|

[12:07] <timotimo> uh oh, dockerhub had passwords leaked

[12:10] <El_Che> sena_kun: you need binaries histories? homebrew has rakudo binaries (next to rakudo star), rakudo-pkg has linux binaries. Windows is problematic

[12:10] *** Manifest0 joined
[12:14] <El_Che> timotimo: new password has 748bit entropy :)

[12:15] *** Manifest0 left
[12:16] *** sena_kun left
[12:16] *** AlexDaniel left
[12:17] *** AlexDaniel joined
[12:17] *** cpan-p6 left
[12:18] *** cpan-p6 joined
[12:18] *** cpan-p6 left
[12:18] *** cpan-p6 joined
[12:20] *** Manifest0 joined
[12:33] <El_Che> .tell jmerelo 14:07 < timotimo> uh oh, dockerhub had passwords leaked

[12:33] <yoleaux> El_Che: I'll pass your message to jmerelo.

[12:33] <El_Che> ^--- tyil

[12:33] <tyil> El_Che: already aware of it :>

[12:34] <tyil> I've already rolled out new dockerhub creds at work as well

[12:35] <El_Che> tyil: just to be sure :)

[12:35] <tyil> yes, thanks for the headsup either way ^_^

[12:45] *** MasterDuke joined
[12:46] *** MasterDuke left
[12:46] *** MasterDuke joined
[12:46] *** netrino joined
[12:48] *** netrino_ joined
[12:51] *** netrino left
[13:03] *** kurahaupo_ joined
[13:06] *** kurahaupo left
[13:06] *** leont joined
[13:08] *** Manifest0 left
[13:13] *** Manifest0 joined
[13:44] <AlexDaniel> rba: you should also join #perl6-dev

[13:45] <AlexDaniel> rba: also, you probably know about this already, but in case you need to read past discussions: http://colabti.org/irclogger/irclogger_logs/perl6-dev

[13:52] *** aborazmeh joined
[13:52] *** aborazmeh left
[13:52] *** aborazmeh joined
[13:55] *** lucasb joined
[14:11] *** Garland_g joined
[14:13] *** ayerhart left
[14:13] *** aborazmeh left
[14:15] *** ayerhart joined
[14:20] *** leont left
[14:22] <rba> AlexDaniel: joined. yet not able to be every minute in irc. currenty I've configured my bouncer to get notifications. 

[14:22] *** Manifest0 left
[14:22] *** abraxxa joined
[14:25] *** grumble left
[14:27] *** Manifest0 joined
[14:27] *** kurahaupo_ left
[14:28] *** zacts joined
[14:30] *** ayerhart left
[14:30] *** grumble joined
[14:31] *** ayerhart joined
[14:34] *** ayerhart left
[14:37] *** ayerhart joined
[14:43] *** kaare_ left
[14:47] *** kaare_ joined
[14:52] *** kaare__ joined
[14:55] *** kaare_ left
[14:55] *** patrickb joined
[15:01] *** kaare__ left
[15:01] *** kaare__ joined
[15:04] <AlexDaniel> rba: sure, that's fine. People also use .tell if they want to make sure that the message is delivered

[15:04] <AlexDaniel> .tell rba very important message :)

[15:04] <yoleaux> AlexDaniel: I'll pass your message to rba.

[15:16] *** comborico1611 joined
[15:26] *** mowcat joined
[15:26] <comborico1611> Good tennis match on.

[15:28] *** Manifest0 left
[15:29] *** mowcat left
[15:30] *** anser joined
[15:32] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2019/04/27/parallel-permutations/

[15:34] <moritz> lolitweetedalittle about it :D

[15:35] *** SCHAPiE left
[15:35] *** Manifest0 joined
[15:44] *** SCHAPiE joined
[15:46] *** leont joined
[15:50] *** [particle] joined
[15:51] *** ayerhart left
[15:58] *** ayerhart joined
[15:59] *** ayerhart left
[15:59] *** ayerhart joined
[16:10] *** cpan-p6 left
[16:10] *** netrino joined
[16:11] *** netrino_ left
[16:11] *** cpan-p6 joined
[16:11] *** cpan-p6 left
[16:11] *** cpan-p6 joined
[16:29] *** Black_Ribbon joined
[16:33] *** raschipi joined
[16:35] *** zacts left
[16:39] *** zacts joined
[16:47] *** zacts left
[16:49] *** anser left
[16:57] *** domidumont joined
[16:59] *** woolfy left
[17:01] <kybr> i'd like to make a foo that works when i say 1.foo ; is that easy?

[17:01] *** Manifest0 left
[17:02] <kybr> do i inject a method into Cool somehow? or is there a common way to do this

[17:02] <ugexe> m: use MONKEY-TYPING; augment class Int { method foo { say 1 } }; 1.foo

[17:02] <evalable6> ugexe, rakudo-moar 34162e967: OUTPUT: «1␤»

[17:03] <ugexe> m: sub foo($a) { say $a }; 1.&foo;

[17:03] <evalable6> ugexe, rakudo-moar 34162e967: OUTPUT: «1␤»

[17:05] <cpan-p6> New module released to CPAN! Scheduler::DelayBetween (1.3.1) by 03ATROXAPER

[17:06] *** Manifest0 joined
[17:09] <atroxaper> Scheduler cue with fixed delay *between* code runs. https://github.com/atroxaper/p6-Scheduler-DelayBetween

[17:13] <kybr> ugexe: that works great!

[17:18] <kybr> my foo is for numeric things, so i augment Num, Rat, Int, etc. should I be augmenting some common ancestor?

[17:20] <ugexe> ideally yes (i believe), but it doesn't work like that yet

[17:22] *** leont left
[17:23] *** lizmat left
[17:26] <MasterDuke> Real?

[17:26] *** comborico1611 left
[17:27] <MasterDuke> oh, Numeric would be better. but i don't know if you can augment roles

[17:28] *** jmerelo joined
[17:29] <MasterDuke> m: use MONKEY; role A {}; augment role A { method foo() { say "foo" } }; # looks like no

[17:29] <evalable6> MasterDuke, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/dm3ox4SGLI␤Cannot …»

[17:29] <evalable6> MasterDuke, Full output: https://gist.github.com/415ed9043b80e78b7d7031ee04670c2e

[17:31] <kybr> m: use MONKEY-TYPING; augment class Rat { method foo { say self } }; 1.2.foo

[17:31] <evalable6> kybr, rakudo-moar f91de3e2a: OUTPUT: «1.2␤»

[17:32] <kybr> m: use MONKEY-TYPING; augment class Real { method foo { say self } }; 1.2.foo

[17:32] <evalable6> kybr, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/pHJibR6t6g␤Cannot …»

[17:32] <evalable6> kybr, Full output: https://gist.github.com/d20b40e8828d9c43af74c6ad1d4e0cf4

[17:32] <kybr> Numeric and Real are 'closed'

[17:34] <xinming> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>);

[17:34] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «»

[17:35] <xinming> what is the perl6 way to convert this hash to a list of pairs which is like   :a<1>, :a<2>, :a<3>, :b<4>, :b<5>, :b<6>, :c<7>, :c<8>    ??

[17:36] <jmerelo> xinming: off the top of my head, duckmap, but I would have to think it out

[17:36] <yoleaux> 12:33Z <El_Che> jmerelo: 14:07 < timotimo> uh oh, dockerhub had passwords leaked

[17:37] <xinming> jmerelo: I believe there is a easy way to do that as I say in perl6.

[17:38] <jmerelo> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); %h.duckmap( { $_.key X @{$_.values} } ).say

[17:38] <evalable6> jmerelo, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/7vUaOUWcO0␤Unsuppo…»

[17:38] <evalable6> jmerelo, Full output: https://gist.github.com/a3c77b6f295840fd8e844d0a34ce439e

[17:40] <jmerelo> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say gather for %h.kv -> ($key, @value ) { for @value -> $v { take $key, $v } }

[17:40] <evalable6> jmerelo, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) Cannot unpack or Capture `c`.␤To create a Capture, add parentheses: \(...)␤I…»

[17:40] <evalable6> jmerelo, Full output: https://gist.github.com/b7d0cf9d96bfa3d18e7143ca6268fc21

[17:40] <xinming> m: my %h = :a<1 2>, :b<4 5 6>; (%h<>:k.map: { my $k = $_; %h{$_}.map({ $k => $_ }) }).perl.say;

[17:40] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «((:a(IntStr.new(1, "1")), :a(IntStr.new(2, "2"))).Seq, (:b(IntStr.new(4, "4")), :b(IntStr.new(5, "5")), :b(IntStr.new(6, "6"))).Seq).Seq␤»

[17:41] <jmerelo> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say gather for %h.keys -> $k { for %h{$k} -> $v { take $key, $v } }

[17:41] <xinming> Yes, seems the X

[17:41] <evalable6> jmerelo, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/t3MgK6v8VB␤Variable '$key' is not declared␤at /tmp/t3MgK6v8VB:1␤------> 03%h.keys -> $k { for %h{$k} -> $v { take 08⏏04$key, $v } }␤»

[17:41] <jmerelo> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say gather for %h.keys -> $k { for %h{$k} -> $v { take $k, $v } }

[17:41] <evalable6> jmerelo, rakudo-moar f91de3e2a: OUTPUT: «((b (4 5 6)) (c (7 8)) (a (1 2 3)))␤»

[17:41] <jmerelo> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say gather for %h.keys -> $k { for @{%h{$k}} -> $v { take $k, $v } }

[17:41] <evalable6> jmerelo, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/JtBAZfTelq␤Unsuppo…»

[17:41] <evalable6> jmerelo, Full output: https://gist.github.com/42ccc7f6ae6d9853b6e690e74d6fd71d

[17:41] <jmerelo> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say gather for %h.keys -> $k { for %h{$k}<> -> $v { take $k, $v } }

[17:41] <evalable6> jmerelo, rakudo-moar f91de3e2a: OUTPUT: «((c 7) (c 8) (b 4) (b 5) (b 6) (a 1) (a 2) (a 3))␤»

[17:42] <jmerelo> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say gather for %h.keys -> $k { for %h{$k}<> -> $v { take $k => $v } }

[17:42] <evalable6> jmerelo, rakudo-moar f91de3e2a: OUTPUT: «(b => 4 b => 5 b => 6 a => 1 a => 2 a => 3 c => 7 c => 8)␤»

[17:42] <jmerelo> xinming: ^^^

[17:43] <jmerelo> xinming: there's probably an easier way of doing it with duckmap, but can't think of it right now.

[17:43] <gfldex> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say gather for %h.kv -> $k, @v { take $k => .item for @v };

[17:43] <evalable6> gfldex, rakudo-moar f91de3e2a: OUTPUT: «(b => 4 b => 5 b => 6 a => 1 a => 2 a => 3 c => 7 c => 8)␤»

[17:43] <jmerelo> gfldex++ Much nicer

[17:44] <xinming> m: my %h = :a<1 2>, :b<4 5 6>; (%h<>:k.map: { $_ X @(%h{$_}) }).perl.say;

[17:44] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «((("a", IntStr.new(1, "1")), ("a", IntStr.new(2, "2"))).Seq, (("b", IntStr.new(4, "4")), ("b", IntStr.new(5, "5")), ("b", IntStr.new(6, "6"))).Seq).Seq␤»

[17:44] <xinming> jmerelo: I tried figured out using X

[17:44] <xinming> but thanks for your version too.

[17:45] <xinming> m: my %h = :a<1 2>, :b<4 5 6>; my @res = (%h<>:k.map: { $_ X @(%h{$_}) }); @res.perl;

[17:45] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «»

[17:45] <xinming> m: my %h = :a<1 2>, :b<4 5 6>; my @res = (%h<>:k.map: { $_ X @(%h{$_}) }); @res.perl.say;

[17:45] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «[(("a", IntStr.new(1, "1")), ("a", IntStr.new(2, "2"))).Seq, (("b", IntStr.new(4, "4")), ("b", IntStr.new(5, "5")), ("b", IntStr.new(6, "6"))).Seq]␤»

[17:45] <xinming> m: my %h = :a<1 2>, :b<4 5 6>; my @res = (%h<>:k.map: { $_ X @(%h{$_}) })[]; @res.perl.say;

[17:45] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «[(("b", IntStr.new(4, "4")), ("b", IntStr.new(5, "5")), ("b", IntStr.new(6, "6"))).Seq, (("a", IntStr.new(1, "1")), ("a", IntStr.new(2, "2"))).Seq]␤»

[17:47] *** leont joined
[17:52] *** andrzejku joined
[17:54] *** kurahaupo joined
[17:59] *** zacts joined
[18:01] *** Kaypie left
[18:18] *** jmerelo left
[18:24] *** leont left
[18:37] *** APic left
[18:37] *** APic joined
[18:40] *** zakharyas joined
[18:51] *** kurahaupo left
[18:51] *** kurahaupo joined
[18:53] *** domidumont left
[19:02] *** molaf joined
[19:08] <xinming> m: my %h = <*> => <a b c>;

[19:08] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «»

[19:08] <xinming> How do we flat this hash into a list   <* a b c> ?

[19:09] <xinming> m: my %h = <*> => <a b c>;  %h.list.perl.say;

[19:09] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «("*" => $("a", "b", "c"),)␤»

[19:09] <xinming> The value will always be itemized.

[19:09] <xinming> m: my %h = <*> => <a b c>;  (%h<>:pair.map: *.key, *.value.list).perl.say;

[19:09] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) Cannot map a Failure using '{ ... }, { ... }'␤Did a * (Whatever) get absorbed by a list?␤  in block <unit> at /tmp/1NB5xIA058 line 1␤␤»

[19:10] <raschipi> m: my %h = <*> => <a b c>; say %h.kv

[19:10] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(* (a b c))␤»

[19:11] <raschipi> m: my %h = <*> => <a b c>; say %h.kv.map(*.slip)

[19:11] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) No such method 'slip' for invocant of type 'Str'. Did you mean any of these?␤    Slip␤    flip␤    sin␤    skip␤␤  in block <unit> at /tmp/UctiaXsstP line 1␤␤»

[19:11] <xinming> m: my %h = <*> => <a b c>;  my @t = (%h<>:p.map: { .key, |.value.list }); @t.perl.say;

[19:11] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «[("*", "a", "b", "c"),]␤»

[19:11] <xinming> This worked

[19:11] <xinming> Though, I'd like to see something sweeter.

[19:12] <raschipi> m: my %h = <*> => <a b c>; say %h.kv>>.slip

[19:12] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) No such method 'slip' for invocant of type 'Str'. Did you mean any of these?␤    Slip␤    flip␤    sin␤    skip␤␤  in block <unit> at /tmp/SJydViSsNg line 1␤␤»

[19:12] <raschipi> m: my %h = <*> => <a b c>; say %h.kv>>.?slip

[19:12] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(Nil (Nil Nil Nil))␤»

[19:12] <raschipi> m: my %h = <*> => <a b c>; say %h.kv.map: {.slip}

[19:12] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) No such method 'slip' for invocant of type 'Str'. Did you mean any of these?␤    Slip␤    flip␤    sin␤    skip␤␤  in block <unit> at /tmp/XO_1QQpJev line 1␤␤»

[19:12] <raschipi> m: my %h = <*> => <a b c>; say %h.kv.map: {.?slip}

[19:12] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(Nil Nil)␤»

[19:13] *** atroxaper left
[19:14] <xinming> m: my %h = <*> => <a b c>; my @t = %h<>:p.map({ |(.key, |.value) }); @t.perl.say;

[19:14] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «["*", "a", "b", "c"]␤»

[19:15] <xinming> raschipi: You are still struggling with the slip method. :-)

[19:15] <xinming> Maybe Slip?

[19:15] <xinming> m: my @a = <a b c>; @a.Slip.perl.say;

[19:15] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «slip("a", "b", "c")␤»

[19:15] <xinming> :-)

[19:16] *** zacts left
[19:18] <xinming> my %h = <*> => <a b c>; say %h.kv>>.?Slip

[19:18] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «((*) (a b c))␤»

[19:19] <xinming> my %h = <*> => <a b c>; say %h.kv>>.?Slip.flat

[19:19] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «(* a b c)␤»

[19:19] <xinming> This is the best version.

[19:19] <xinming> my %h = <*> => <a b c>; say %h.kv>>.Slip.flat

[19:19] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «(* a b c)␤»

[19:20] <raschipi> I looked at the docs and didn't notice I was missing the uppercase S

[19:21] <xinming> Yea, Thanks for the idea.

[19:21] <xinming> Your version is much better than mine.

[19:22] <raschipi> np

[19:22] <xinming> I think perl6 is the language which makes people think whatever they want, and the tools are there.

[19:22] <raschipi> Except logging

[19:23] <raschipi> m: my %h = <*> => <a b c>; say %h.kv>>.Slip

[19:23] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «((*) (a b c))␤»

[19:24] *** abraxxa left
[19:25] *** lucasb left
[19:26] *** MilkmanDan left
[19:27] *** MilkmanDan joined
[19:36] *** netrino_ joined
[19:36] *** netrino left
[19:43] <xinming> What is the different between %(:a, :b, :c).kv.perl.say;   and  %(:a, :b, :c):kv.perl.say;

[19:43] <xinming> I'm kind of confused

[19:43] <xinming> Seems, the :kv doesn't take effect at all.

[19:44] <xinming> Just realized it

[19:44] <xinming> m: %(:a, :b, :c):this-adverb-does't-exist.perl.say;

[19:44] <evalable6> xinming, rakudo-moar f91de3e2a: OUTPUT: «{:a, :b, :c}␤»

[19:46] <b2gills> It should probably warn about an "Unexpected named argument"

[19:46] <b2gills> m: {}:this-adverb-does't-exist

[19:46] <evalable6> b2gills, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) Unexpected named argument 'this-adverb-does't-exist' passed␤  in block <unit> at /tmp/vu4p7tMnci line 1␤␤»

[19:48] <raschipi> m: ():this-adverb-does't-exist

[19:48] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/d3ldv4CbB1␤You can…»

[19:48] <evalable6> raschipi, Full output: https://gist.github.com/5deb1b05bfb809c5054b36a9df1cd88e

[19:48] <raschipi> m: []:this-adverb-does't-exist

[19:48] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «(exit code 1) Unexpected named argument 'this-adverb-does't-exist' passed␤  in block <unit> at /tmp/IVmuCuHuBG line 1␤␤»

[19:49] <raschipi> m: %():this-adverb-does't-exist

[19:49] <evalable6> raschipi, rakudo-moar f91de3e2a: OUTPUT: «»

[19:49] *** comborico1611 joined
[19:50] <xinming> I believe, that the adverb applied to the %() operation.

[19:52] <raschipi> What I find most strange is that it doesn't take :kv

[20:02] <jnthn> I've no idea what it's actually doing, but: %(...) is just sugar for (...).hash, and methods discard unknown named parameters, which is what adverbs are.

[20:02] *** MilkmanDan left
[20:04] <jnthn> Just checked --target=ast, and yes, it's going to .hash

[20:05] *** MilkmanDan joined
[20:17] *** Manifest0 left
[20:20] *** andrzejku left
[20:22] *** Manifest0 joined
[20:23] *** |oLa| joined
[20:26] *** andrzejku joined
[20:26] *** andrzejku left
[20:28] *** ufobat joined
[20:30] *** lichtkind left
[20:32] *** molaf left
[20:39] *** |oLa| left
[20:39] <xinming> Is it possible to embed perl6 code in nodejs?

[20:39] *** ayerhart left
[20:40] *** ayerhart joined
[20:44] *** lichtkind joined
[20:48] *** pmurias joined
[20:49] <pmurias> MasterDuke: the truffle backend can load a proper nqp setting (deserializing things and stuff), and a real nqp say works with some ugly uncommited hacks :)

[20:49] <xinming> m: my @t = <a b c>.map: { (<a>, *) }; @t.perl.say;

[20:49] <evalable6> xinming, rakudo-moar cac95fbbc: OUTPUT: «[("a", *), ("a", *), ("a", *)]␤»

[20:49] <xinming> What is the * mean?

[20:49] <xinming> I know it's 'whatever', What will it do?

[20:50] <pmurias> MasterDuke: say("Hello World") should be working with a real setting on ~monday

[20:51] <xinming> m: *.perl.say;

[20:51] <evalable6> xinming, rakudo-moar cac95fbbc: OUTPUT: «»

[20:51] <xinming> It's strange, how is the '*' be kept

[20:51] <jnthn> xinming: It does nothing, it's just a literal Whatever

[20:52] <jnthn> Whatever is actually just a type, and * is a singleton instance of it. When writing 1..* it's actually a call to `..` with 1 and the * singleton instance

[20:52] <xinming> m: my @t = <a b c>.map: { (<a>, *) }; (@t.map: *[1].perl.say)

[20:52] <evalable6> xinming, rakudo-moar cac95fbbc: OUTPUT: «*␤*␤*␤»

[20:52] <jnthn> It's only cases like `*.foo` and `1 + *` where it's compile-time transformed into a closure

[20:52] <raschipi> xinming: You're thinking about Watevercode, which has nothing to do with Whatever, ecept for the name and symbol.

[20:52] *** squashable6 left
[20:53] <jnthn> And that behavior actually came *later* than the original notion of a value to mean "whatever"

[20:53] <jnthn> You can thus assign behavior to Whatever in your own custom operators, for example

[20:53] <xinming> jnthn: So, when translating * to closure, we can't have too complex code for it, right?

[20:54] <xinming> raschipi: What I fell strnage is that * is displayed.

[20:54] <xinming> And I don't know how I can get that * in a var.

[20:54] <jnthn> xinming: Correct; some operators do not participate in this

[20:54] <raschipi> m: my $a = *; say $a.perl;

[20:54] <evalable6> raschipi, rakudo-moar cac95fbbc: OUTPUT: «*␤»

[20:54] *** thundergnat joined
[20:55] <thundergnat> m: my %h = (:a<1 2 3>, :b<4 5 6>, :c<7 8>); say %h.invert.invert;

[20:55] <evalable6> thundergnat, rakudo-moar cac95fbbc: OUTPUT: «(c => 7 c => 8 b => 4 b => 5 b => 6 a => 1 a => 2 a => 3)␤»

[20:55] <thundergnat> xinming: ^^^

[20:55] <xinming> When I try to perl say the *, It becomes { ... }

[20:55] <jnthn> raschipi: Well, in terms of how * + 1 actually works, the * there is compiled into a Whatever literal, and it's only later when we have seen the whole expression that we transform it and the whole thing becoems a WheneverCode :)

[20:55] *** lichtkind left
[20:55] <xinming> It's amazing.

[20:56] <xinming> thundergnat: Your version is also elegant. :-)

[20:57] <xinming> there is always more than one way to do it. :-)

[20:57] <raschipi> m: say *.perl;

[20:57] <evalable6> raschipi, rakudo-moar cac95fbbc: OUTPUT: «{ ... }␤»

[20:57] <thundergnat> Just need to sort it if order is important.

[20:57] <jnthn> m: say 1,2,3,4 Z+ 2, 3, *; # Z is another operator that is aware of * and treats it specially

[20:57] *** squashable6 joined
[20:57] <evalable6> jnthn, rakudo-moar cac95fbbc: OUTPUT: «(3 5 6 7)␤»

[20:57] <xinming> I actually curious how the * can be implemented.

[20:57] <raschipi> If you put a dot on it, you'll get Whatevercode instead.

[20:58] <jnthn> That one also isn't a compile time thing, it's just part of the logic of the Z op/meta-op

[20:58] <xinming> I know it's already implemented, It just shock me.

[20:58] <jnthn> So a * value survives to runtime

[20:59] <raschipi> It's not much different from the { $^a %%2 } lambda style. That's not much different from * %% 2

[20:59] <jnthn> m: multi infix:<foo>($a, $b) { "$a, $b" }; multi infix:<foo>($a, Whatever) { "$a, dude" }; say 'nice' foo 'mate'; say 'nice' foo *

[20:59] <evalable6> jnthn, rakudo-moar cac95fbbc: OUTPUT: «nice, mate␤{ ... }␤»

[20:59] <jnthn> Oh hah :)

[21:00] <jnthn> Yeah, the default is that custom ops do the currying thing :)

[21:00] <jnthn> Forgot that :)

[21:01] <xinming> m: multi infix:<foo>($a, $b) { "$a, $b" }; multi infix:<foo>($a, Whatever) { "$a, dude" }; say ('nice' foo *)('Test')

[21:01] <evalable6> xinming, rakudo-moar cac95fbbc: OUTPUT: «nice, Test␤»

[21:01] <xinming> I'm still don't know the exact logic here.

[21:02] <xinming> But anyway, Will understand in the future.

[21:02] <jnthn> Curiously, there's not actually a way to opt out at the moment.

[21:02] <raschipi> m: my @a = 1..Whatever; .say for @a[^10]

[21:02] <evalable6> raschipi, rakudo-moar cac95fbbc: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[21:03] <raschipi> If P6 is currying over your splat and giving you Whatevercode instead of just Whatever, just use it's full name instead.

[21:07] <xinming> another question, Anyone ever run perl6 in nodejs? :-)

[21:08] <MasterDuke> pmurias++ awesome! as soon as i get some spare tuits i'd like to do more

[21:11] *** lichtkind joined
[21:13] <pmurias> xinming: rakudo.js runs on nodejs

[21:14] <pmurias> MasterDuke: great! there should be a fresh delivery of low hanging fruit available now that sixmodely things will be possible :)

[21:21] <pmurias> xinming: I develop rakudo.js on node.js and it's specially parceled up for the browser

[21:24] <xinming> pmurias: Thanks, That's better than what I thought.

[21:25] <xinming> Before that, I think I had to wait someone write c-binding

[21:25] <xinming> I'm now   npm install rakudo

[21:26] <xinming> It's so exciting for this.  js+perl6

[21:26] <xinming> It's the combination I dreamed of

[21:29] <raschipi> Sorry, xinming: what do you mean by 'c-binding'?

[21:30] *** lichtkind left
[21:31] <xinming> raschipi: I thought, we'll have to wait someone to embed the moarvm to nodejs. :-)

[21:35] <raschipi> Why would you need MoarVM running on nodejs when Perl6 runs directly on nodejs?

[21:38] <jnthn> raschipi: I think the assumption was that Perl 6 would not be doing that. :)

[21:40] <raschipi> Oh, I see now.

[21:44] *** lichtkind joined
[21:48] <raschipi> pmurias told me a while back that compiling Moar to WebASM was another approach that could be taken instead of rakudo.js, and that he didn't see any motive why it wouldn't be viable, and that they're complimentary to each other.

[21:48] *** zakharyas left
[21:49] *** kaare__ left
[21:50] *** kaare__ joined
[21:53] *** pmurias left
[21:54] *** pecastro left
[21:54] <raschipi> I think I upset him.

[21:56] <xinming> raschipi: It's because WebASM are mostly targeted for C/C++, and perl6 needs gc to work.

[21:57] <xinming> I just read https://pmurias.github.io/rakudo.js-tpc-eu/  , It mentions that

[21:58] <xinming> make: *** No rule to make target 'j-all', needed by 'js-install'.  Stop.

[21:58] <raschipi> Moar is written in C. And it performs all the necessary support.

[21:59] <xinming> When I try to build rakudo 2019.03, I got that error.

[21:59] <xinming> I try to compile js backends.

[21:59] <xinming> Is there a doc on how I can try rakudo.js in cli?

[22:00] *** lichtkind left
[22:02] *** kurahaupo left
[22:02] *** kurahaupo joined
[22:10] *** Sgeo__ left
[22:10] *** Sgeo__ joined
[22:13] *** lichtkind joined
[22:19] <kawaii> any tips for auto generating the 'provides' section of META6.json? I've got rather a lot of endpoints now and don't want to manually keep track of them

[22:19] <kawaii> s/don't want to/i'm lazy

[22:21] *** lichtkind left
[22:23] *** kurahaupo left
[22:23] *** kurahaupo joined
[22:26] *** patrickb left
[22:30] *** roguelazer left
[22:33] *** roguelazer joined
[22:35] *** lichtkind joined
[22:44] *** kurahaupo left
[22:44] *** kurahaupo joined
[22:51] <ugexe> say CompUnit::Repository::FileSystem.new(prefix => $*CWD.IO.absolute).distribution.meta<provides>

[22:51] <evalable6> ugexe, rakudo-moar cac95fbbc: OUTPUT: «{}␤»

[23:11] <holyghost> .

[23:24] <cpan-p6> New module released to CPAN! FindBin (0.2.7) by 03LEMBARK

[23:25] *** Manifest0 left
[23:25] *** |Sno| left
[23:25] <kawaii> ugexe: thank you!

[23:28] *** |Sno| joined
[23:31] *** leont joined
[23:33] *** Manifest0 joined
[23:58] *** Just_ joined
[23:58] *** |oLa|1 joined
[23:59] *** aborazmeh joined
[23:59] *** aborazmeh left
[23:59] *** aborazmeh joined
