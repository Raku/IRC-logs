[00:15] <holyghost> I have a risk function in Bayes::Learn

[00:19] *** ctilmes left
[00:19] *** ctilmes joined
[00:24] <holyghost> It calculates loss on a conditional probability (on a decision, the cond p)

[00:28] *** zachk left
[00:53] *** w_richard_w joined
[00:54] *** zacts joined
[00:59] *** zacts left
[00:59] <ugexe> Xliff: now that i think about it im not sure the optimal build order trick even works anymore since the hash randomization

[01:05] *** aborazmeh joined
[01:05] *** aborazmeh left
[01:05] *** aborazmeh joined
[01:05] <Xliff> ugexe: For CURI?

[01:05] <Xliff> ugexe: That's OK, since I also use it for stats tracking.

[01:10] *** Kaiepi left
[01:13] *** Kaiepi joined
[01:16] *** lucasb left
[01:23] *** MasterDuke joined
[01:24] *** MasterDuke left
[01:24] *** MasterDuke joined
[01:31] *** DarthGandalf left
[01:32] *** buffet_ joined
[01:32] *** khisanth_ left
[01:33] *** buffet left
[01:40] *** _jrjsmrtn joined
[01:40] *** __jrjsmrtn__ left
[01:46] *** khisanth_ joined
[01:52] *** aborazmeh left
[01:55] <cpan-p6_> New module released to CPAN! Bayes::Learn (0.2.3) by 03HOLYGHOST

[01:57] <holyghost> ^-- risk functionality is in

[01:57] *** epony left
[02:26] *** Sgeo__ joined
[02:29] *** Sgeo_ left
[02:45] *** adu joined
[02:48] <discord6> <Tyler (Aearnus)> https://aearnus.github.io/2019/04/08/gadts-in-perl-6

[03:13] *** Cabanossi left
[03:13] *** Cabanossi joined
[03:18] *** epony joined
[03:24] *** netrino left
[03:40] *** DarthGandalf joined
[03:53] *** jeromelanteri joined
[04:17] *** kurahaupo left
[04:17] *** kurahaupo joined
[04:27] *** hamhu3 left
[04:27] *** hamhu3 joined
[04:33] *** zacts joined
[04:46] *** jaldhar joined
[04:52] <Xliff> Tyler: I almost smell Python in that post. :)

[04:53] *** jaldhar_ joined
[04:54] *** jaldhar left
[05:07] *** isomorphismes left
[05:09] *** isomorphismes joined
[05:10] *** grumble left
[05:16] *** grumble joined
[05:17] *** zacts left
[05:18] *** zacts joined
[05:24] *** robertle left
[05:25] *** Sgeo_ joined
[05:27] *** zacts_pi joined
[05:28] *** Sgeo__ left
[05:28] *** zacts left
[05:34] <holyghost> If I do not continue on Bayes::Learn tomorrow, I might write the start of the docs for it or the audio effects of Soundn::Tina (which is not yet published IIRC)

[05:34] *** sauvin joined
[05:36] *** zacts_pi is now known as zacts

[05:36] <holyghost> Soundn::Tina is command line sound software based on WAV files

[05:36] <holyghost> e.g. mixing

[05:37] <holyghost> of samples

[05:37] <holyghost> not music itself

[05:37] *** jeromelanteri left
[05:45] *** MidCheck left
[05:46] *** cpan-p6_ left
[05:47] *** cpan-p6 joined
[05:47] *** cpan-p6 left
[05:47] *** cpan-p6 joined
[05:54] *** vrurg left
[05:54] *** kurahaupo left
[05:55] *** kurahaupo joined
[05:56] <Elronnd> can perl6-j interface with java?

[06:06] *** Sgeo joined
[06:08] <Xliff> You would have to look into the jvm backend to know for sure.

[06:08] *** zacts left
[06:08] *** Sgeo_ left
[06:09] <holyghost> As I comprehend 'interface', there's probably class files (I develop on Moar) but no inline code

[06:10] *** hamhu3 left
[06:11] <holyghost> Learn java bytecodes I guess :-)

[06:11] <holyghost> I read that document from Sun back in the day

[06:11] <Xliff> Elrond: https://www.slideshare.net/tokuhirom/perl6-meets-jvm -- see slide 78

[06:12] <discord6> <Tyler (Aearnus)> > <holyghost> Learn java bytecodes I guess :-) https://aphyr.com/posts/341-hexing-the-technical-interview

[06:13] <holyghost> ^-- it's a helper bot ?

[06:13] <Xliff> tl;dr: use java::util::zip::CRC32:from<java>; my $crc = CRC32.new(); $crc.update($_) for 'Hello, Java'.encode('utf-8'); $crc.getValue.say

[06:14] <Xliff> For jar files...

[06:14] <Xliff> use MyClass:from<java>:jar<myjar.jar>

[06:14] <holyghost> thanks Xliff, so there's some form of inline code :-)

[06:15] <Xliff> This is from YAPC 2016

[06:15] <Elronnd> Xliff: neat!  Thanks!

[06:28] <Xliff> Elronnd: yw

[06:35] *** hamhu3 joined
[06:38] *** hamhu3 left
[06:39] *** hamhu3 joined
[06:39] *** khisanth_ left
[06:47] *** domidumont joined
[06:56] *** abraxxa joined
[06:57] <Geth> ¬¶ doc: fb1dbc99aa | (JJ Merelo)++ | doc/Language/enumeration.pod6

[06:57] <Geth> ¬¶ doc: Minor changes

[06:57] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/fb1dbc99aa

[06:57] <synopsebot> Link: https://doc.perl6.org/language/enumeration

[07:07] *** khisanth_ joined
[07:18] *** rindolf joined
[07:26] *** adu left
[07:30] *** robertle joined
[07:35] *** eseyman left
[07:36] *** isomorphismes left
[07:37] *** isomorphismes joined
[07:41] *** Cabanossi left
[07:46] *** Elronnd left
[07:46] *** patrickb joined
[07:49] *** Cabanossi joined
[07:50] *** scimon joined
[07:54] *** elronnd joined
[07:55] *** Voldenet left
[08:01] *** Voldenet joined
[08:01] *** Voldenet left
[08:01] *** Voldenet joined
[08:03] *** w_richard_w left
[08:10] *** MidCheck joined
[08:11] *** ravenousmoose_ joined
[08:12] *** isomorphismes left
[08:14] *** ravenousmoose left
[08:15] *** zakharyas joined
[08:23] *** elronnd is now known as Elronnd

[08:26] *** dakkar joined
[08:44] *** isomorphismes joined
[09:08] <patrickb> m: class P {has $.x = 0; submethod BUILD() { $!x }}; say P.new(x=>5).perl

[09:08] <evalable6> patrickb, rakudo-moar dc02335dd: OUTPUT: ¬´P.new(x => Any)‚ê§¬ª

[09:08] <patrickb> m: class P {has $.x = 0; submethod BUILD() { #`[$!x] }}; say P.new(x=>5).perl

[09:08] <evalable6> patrickb, rakudo-moar dc02335dd: OUTPUT: ¬´P.new(x => 0)‚ê§¬ª

[09:08] <patrickb> Is the above a bug?

[09:08] <patrickb> How is accessing a variable even able to have any effect in the above code?

[09:11] <moritz> having a BUILD submethod disables the automatic setting of attributes

[09:12] <moritz> LTA, but unavailable, I've been told

[09:13] *** cpan-p6 left
[09:14] *** cpan-p6 joined
[09:14] *** cpan-p6 left
[09:14] *** cpan-p6 joined
[09:15] *** TreyHarris left
[09:17] *** sena_kun joined
[09:19] <patrickb> moritz: But both of the above examples have a BUILD submethod. Both are not initialized with the passed variable. I understand that.

[09:19] <patrickb> moritz: My question is why in one of the two above the default is not set.

[09:20] <patrickb> Or why it is set in the other. I would expect the two to behave the same.

[09:22] <moritz> yes, that's weird, might be a bug

[09:22] <patrickb> I'll rakudobug.

[09:23] <patrickb> Out of curriosity: Is it even possible in Perl 6 to determine whether a variable has been accessed before or not?

[09:24] <patrickb> The above code behaves in such a way. I wouldn't even know how to implement such behavior...

[09:25] <patrickb> moritz: Thanks for your help!

[09:30] *** buffet_ is now known as buffet

[09:32] *** TreyHarris joined
[09:33] <patrickb> bisectable6: class P {has $.x = 0; submethod BUILD() { $!x }}; say P.new(x=>5).perl

[09:33] <bisectable6> patrickb, On both starting points (old=2015.12 new=dc02335) the exit code is 0 and the output is identical as well

[09:33] <bisectable6> patrickb, Output on both points: ¬´P.new(x => Any)‚ê§¬ª

[09:33] <patrickb> bisectable6: class P {has $.x = 0; submethod BUILD() { #`[$!x] }}; say P.new(x=>5).perl

[09:33] <bisectable6> patrickb, On both starting points (old=2015.12 new=dc02335) the exit code is 0 and the output is identical as well

[09:33] <bisectable6> patrickb, Output on both points: ¬´P.new(x => 0)‚ê§¬ª

[09:35] <jnthn> patrickb: So far, that's been implemented by having touching an attribute vivifying it; the fact there's then an object there rather than a NULL (used as a sentinel) is used to provide the "is this initialized" test

[09:37] <jnthn> Even an assignment is actually a case of read/vivify the Scalar container, then assign into it

[09:38] *** rindolf left
[09:38] <jnthn> However...this approach has its issues. One is that which you've noticed. Another is that it doesn't work for native attributes since those can't be NULL. And another, which will probably actually motivate change, is that having every attribute access have to be NULL-checked and reacted to massively bloats our JIT-compilation output.

[09:39] <jnthn> The question is what to do instead

[09:39] <jnthn> And that will have minimal fallout on existing code

[09:39] *** DarthGandalf left
[09:41] <patrickb> I'd say either initialize attributes to default values before BUILD is called (then build can overwrite if wanted, but still have default initialization), or just don't touch attributes at all of a BUILD is found.

[09:42] <jnthn> Well, the first thing you just described is exactly the behavior of TWEAK :)

[09:42] <jnthn> The second is a possibility, but would probably cause extensive breakage

[09:44] <patrickb> I'm still in the process of wrapping my head around how object construction works, so take my opinions as a perspective from the outside. :-)

[09:50] *** rindolf joined
[09:51] *** Black_Ribbon left
[09:53] <patrickb> I added this conversation to the ticket https://github.com/rakudo/rakudo/issues/2832

[09:55] <patrickb> jnthn: Thanks for the extensive explanation!

[09:56] <timotimo> jnthn: how well could it work to log whether a scalar had to be vivified in the spesh log and if we don't see that ever, we make a null check cause a deopt rather than vivifying? that could make the jit output smaller perhaps? or do we already just call out to a C function when we realize we'd have to vivify?

[10:00] <jnthn> patrickb: that the spesh log exists isn't a Perl 6 level thing; we'd need a solution that'll work on JVM and JS and so on too

[10:00] <patrickb> timotimo: ^ That's for you.

[10:01] <jnthn> And doing a deopt in every BUILD method is not going to go so well performance wise ;)

[10:01] <jnthn> oh, that wasn't quite what you suggested

[10:01] <jnthn> But anyway, the code sequence for a deopt is not zero-length either :)

[10:02] <jnthn> I sometimes wonder if we can just keep a bit field of what we initialized, and compile attribute access inside of a BUILD to tweak the bit field too

[10:02] <Xliff> Why is evalable6 so shy. Priv message and he says "It's too private in here"

[10:03] <Xliff> m: my $a = -> $a, $b { }; say $a.signature

[10:03] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´($a, $b)‚ê§¬ª

[10:03] <jnthn> I think to keep people from abusing it

[10:03] <Xliff> m: my $a = -> $a, $b { }; say $a.signature.arity

[10:03] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´2‚ê§¬ª

[10:04] <Xliff> OK. That will work for a start.

[10:04] <Xliff> Trying to think ahead of a problem, for once.

[10:04] <Xliff> m: my $a = -> $a, $b { }; say $a.signature.params

[10:04] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(Mu $a Mu $b)‚ê§¬ª

[10:04] <Xliff> Niice.

[10:05] <patrickb> Xliff: perlbot seems to do the job: /msg perlbot r: my $a = -> $a, $b { }; say $a.signature.params

[10:05] <Xliff> Yah.. but that "r:".... *shudder* =)

[10:05] <Xliff> Thanks, patrickb 

[10:05] <patrickb> :-P

[10:06] <Xliff> m: my $a = -> $a, $d { }; $a.signature.params[0].type.say

[10:06] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(Mu)‚ê§¬ª

[10:06] <Xliff> Also... perlbot has a noticeable delay as opposed to evalable6.

[10:07] <Xliff> Beggars can't be choosy, though.

[10:08] *** domidumont left
[10:19] *** gregf_ joined
[10:24] <timotimo> Xliff: i think you can go to #whateverable and eval loads of stuff there

[10:30] *** dakkar left
[10:31] <Xliff> timotimo++ 

[10:32] <Xliff> Now to go ZZzzzz

[10:42] *** dakkar joined
[10:47] *** xenowoolfy joined
[10:52] *** xenowoolfy left
[11:08] *** AlexDaniel left
[11:11] *** zakharyas left
[11:21] *** kensanata joined
[11:22] <Xliff> \o/

[11:22] <Xliff> WTF is a **@list??

[11:22] * Xliff said sleep. He LIED!

[11:23] <timotimo> it'll not flatten unlike *@list

[11:23] <Xliff> Wouldn't that be @list?

[11:24] <Xliff> Or is that still "Slurpy, but do not flatten"

[11:24] <timotimo> right

[11:24] <timotimo> there's also +@list, which is "do single-argument-rule semantics"

[11:24] <timotimo> i.e. if only one list gets passed, that becomes what's passed, otherwise things will be slurpy-flattened

[11:41] <tyil> if I remember correctly, there was an experimental module which allowed one to do grammar testing/debugging in a GTK window

[11:42] <tyil> if anyone knows what I'm talking about, could you please give me a link to it

[11:42] <timotimo> aye, it's Xliff's

[11:43] <timotimo> https://github.com/Xliff/p6-VisualGrammar

[11:43] <tyil> sweet

[11:43] <tyil> thanks timotimo :D

[11:43] <timotimo> NP

[11:44] <timotimo> rakudo will take many, many minutes to precompile the gtk module that goes with it, though

[11:48] <tyil> that's not a problem, I remembered it would take a while, and I want to try some grammar stuff tomorrow

[11:48] <tyil> so I wanted to prepare for that in advance

[11:48] <timotimo> OK, cool

[11:49] *** aborazmeh joined
[11:49] *** aborazmeh left
[11:49] *** aborazmeh joined
[11:56] *** xenowoolfy joined
[11:58] *** xenowoolfy left
[12:11] *** araraloren joined
[12:15] *** pistacchio left
[12:23] <tyil> Xliff: https://github.com/Xliff/p6-VisualGrammar/issues/1 does this show enough information for you to work with? 

[12:25] *** robertle left
[12:27] *** robertle joined
[12:31] *** netrino joined
[12:38] *** DarthGandalf joined
[12:46] *** Kaiepi left
[12:47] *** Kaiepi joined
[12:49] *** MasterDuke left
[13:00] *** MidCheck left
[13:03] *** zakharyas joined
[13:12] *** Kaiepi left
[13:12] *** aborazmeh left
[13:16] *** Kaiepi joined
[13:19] *** vrurg joined
[13:23] *** rindolf left
[13:23] *** kurahaupo_ joined
[13:25] *** rindolf joined
[13:27] *** kurahaupo left
[13:30] *** zacts joined
[13:38] *** Kaiepi left
[13:40] *** Kaiepi joined
[13:40] *** skids joined
[13:41] *** zacts left
[14:01] *** demanuel left
[14:02] <Kaiepi> m: say Array[Int].^parameterize(Str) ~~ [1]

[14:02] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´True‚ê§¬ª

[14:02] <Kaiepi> m: say Array[Int].^parameterize(Str) ~~ ['a']

[14:02] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´True‚ê§¬ª

[14:02] <Kaiepi> m: say Array[Int].^parameterize(Str) ~~ ['a', 1]

[14:02] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´True‚ê§¬ª

[14:03] <Kaiepi> m: say (Array[Int].^parameterize(Str)).^name

[14:03] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´Array[Int][Str]‚ê§¬ª

[14:04] <Kaiepi> m: say Array[Int][Str]

[14:04] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Use of Nil in string context‚ê§  in block <unit> at /tmp/RhPnbZTcZt line 1‚ê§Unable to call postcircumfix [ (Str) ] with a type object‚ê§Indexing requires a defined object‚ê§  in block <unit> at /tmp/RhPnbZTcZt line 1‚ê§‚ê§¬ª

[14:27] *** MilkmanDan left
[14:29] *** MilkmanDan joined
[14:32] <El_Che> sena_kun: yes?

[14:33] <sena_kun> El_Che, o/

[14:33] <El_Che> hello

[14:33] <sena_kun> I've started to flesh out client's api for LDAP, so thought I can ping you for some suggestions or maybe ideas about how wrong/okayish it seems.

[14:33] <sena_kun> see https://github.com/Altai-man/cro-ldap/blob/master/docs/reference/cro-ldap-client.md

[14:34] <sena_kun> yes, not all methods are filled out yet

[14:34] <El_Che> ah nic

[14:34] <El_Che> e

[14:34] <El_Che> the react example is nice

[14:34] <sena_kun> right now I rely heavily on old Net::LDAP in terms of API, which is, well, quite intuitive to me.

[14:35] <El_Che> it is

[14:35] <sena_kun> but I don't know its issues or maybe some papercuts, as I've never used it

[14:35] <El_Che> partly becasue the lack of types maybe

[14:35] <sena_kun> so if there are things we can do better because we start from scratch, I'd like to do it

[14:35] <El_Che> sena_kun: it's main issue is that it looks abandonned to me

[14:36] *** powerbit left
[14:36] <El_Che> yes, make it as perl6-y as possible, imho

[14:36] <sena_kun> El_Che, can you put up a small review/list of ideas or something like this based on the docs? maybe into a gist or just a ticket

[14:36] <El_Che> I'll make a not to have a look at it

[14:36] <El_Che> e

[14:37] <El_Che> if there is code available I would like to write a small samble program

[14:37] <sena_kun> I am now struggling with some ASN::META re-design to handle recursive search filters, and once this bootstrapping is done, I'd be able to continue with the client by the docs.

[14:38] <El_Che> ok

[14:38] <El_Che> oh, have a look at extended operations, also "relax"

[14:38] <sena_kun> El_Che, well, API and the actual implementation _are_ different right now... What works is in the tests, see https://github.com/Altai-man/cro-ldap/blob/master/t/04-client.t

[14:38] <El_Che> many libs out there in many languages miss that

[14:39] <sena_kun> yes, saw that, well... we'll see once basic stuff like search/update/bind will be in place.

[14:39] <El_Che> I have this example fresh in mind, because I migrated it to new code yesterday:

[14:40] <sena_kun> yes, code examples of existing code are very welcome

[14:40] <El_Che> look for changes in sambaPwdLastSet (is set by our IAM system) and change pwdLastSet accordingly

[14:40] <El_Che> the latter is an operational attribute, so you're not allowed to change it without extending operations

[14:41] <El_Che> maybe I can give you some p5 code

[14:41] <sena_kun> El_Che, can you share the code? yes, even p5 will do.

[14:41] <El_Che> I will look it up

[14:42] <El_Che> I actually migrated the setup to a tailer of the audit_db.log, so a modify is done when a match is found by... regex

[14:42] <El_Che> don't shoot me :)

[14:42] <El_Che> but I want a fallback to query the db and do mass modifies just to be sure

[14:43] <sena_kun> El_Che, I am only interested in LDAP-related parts as I am implementing it and literaly have no experience with its usages in real world(and in imaginary worlds too), so...

[14:43] <El_Che> first part is generic (pricipal task is sending REST calls from ldap events in the logs), so not interesting to you

[14:43] <El_Che> I'll look the 2nd part up, as an example of a relaxed operation

[14:44] <El_Che> because the tailer works that well, I haven't had the need to do the mass live db update yet

[14:44] <El_Che> but I will recover the code, make it standalone and working 

[14:44] <El_Che> should'nt be too much work

[14:45] <El_Che> it's a typical real world scenario for me

[14:45] * sena_kun looks up Net::LDAP::Control::Relax

[14:47] *** kurahaupo_ left
[14:47] *** kurahaupo joined
[14:49] *** unclechu joined
[14:50] <unclechu> hey guys, please remind me, is there any way to mark subroutine argument as a constant?

[14:50] *** TeamBlast left
[14:50] <unclechu> i tried something like `Int \foo` but it didn't work

[14:50] <moritz> they are by default

[14:50] *** Kaiepi left
[14:50] <moritz> m: sub f(Int $x) { $x = 42 }; my $a = 23; f($a)

[14:50] <evalable6> moritz, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Cannot assign to an immutable value‚ê§  in sub f at /tmp/ZceuKuJhns line 1‚ê§  in block <unit> at /tmp/ZceuKuJhns line 1‚ê§‚ê§¬ª

[14:51] <araraloren> m: sub f(Int \x) { x = 42 }; my $a = 23; f($a)

[14:51] <evalable6> araraloren, rakudo-moar dc02335dd: OUTPUT: ¬´¬ª

[14:51] <moritz> however, note that this doesn't go deep into objects. If you pass a hash for example, you can still modify the hash itself, just not assign to the variable

[14:51] <moritz> well, not with \

[14:52] <araraloren> m: sub f(Int $x is raw) { $x = 42 }; my $a = 23; f($a)

[14:52] <evalable6> araraloren, rakudo-moar dc02335dd: OUTPUT: ¬´¬ª

[14:52] <moritz> don't use it if you want it read-only

[14:52] <araraloren> so what's the `is raw` doing ?

[14:52] *** TeamBlast joined
[14:53] <moritz> https://docs.perl6.org/type/Parameter#method_raw

[14:54] *** Kaiepi joined
[14:57] <araraloren> what's the difference between the \x in argument list and the declaration `my \x = 22;`

[14:57] <araraloren> m: my \x = 22; x = 42;

[14:57] <evalable6> araraloren, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Cannot modify an immutable Int (22)‚ê§  in block <unit> at /tmp/0zKP8UrsNV line 1‚ê§‚ê§¬ª

[14:57] <moritz> that's the difference

[14:57] <araraloren> oh wait

[14:58] <araraloren> m: my $z = 22; my \x = $z; x = 42;

[14:58] <evalable6> araraloren, rakudo-moar dc02335dd: OUTPUT: ¬´¬ª

[14:58] <araraloren> I get it :)

[15:01] <unclechu> moritz: thanks

[15:15] *** Kaiepi left
[15:16] *** Kaiepi joined
[15:21] *** hamhu3 left
[15:23] *** hamhu3_ joined
[15:27] *** hamhu3_ left
[15:28] *** hamhu3 joined
[15:29] *** patrickb left
[15:30] *** vrurg left
[15:33] *** vrurg joined
[15:35] *** kensanata left
[15:35] *** vrurg left
[15:36] *** vrurg joined
[15:39] *** MidCheck joined
[15:45] *** domidumont joined
[15:47] *** robertle left
[16:02] <unclechu> what do i usually do when i want to return few values of different types from a subroutine?

[16:05] <jnthn> Just return them? `return $foo, $bar, $baz;` doesn't care about their types in any sense. I often find it better to declare a small class to hold the values, though.

[16:05] <sena_kun> 1)wrap in a list; 2)create a class

[16:06] <unclechu> jnthn: does it mean you return them as a list?

[16:06] <jnthn> Yes

[16:06] <jnthn> m: sub foo() { return 1,"foo",3 }; my ($a, $b, $c) = foo(); .say for $a, $b, $c

[16:06] <evalable6> jnthn, rakudo-moar dc02335dd: OUTPUT: ¬´1‚ê§foo‚ê§3‚ê§¬ª

[16:09] <unclechu> jnthn:  sena_kun: thanks

[16:18] <Kaiepi> m: sub foo(Array[Str] @a) { @a }; say foo [1,2,3]

[16:18] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Type check failed in binding to parameter '@a'; expected Positional[Array[Str]] but got Array ($[1, 2, 3])‚ê§  in sub foo at /tmp/8CS9k5sz_9 line 1‚ê§  in block <unit> at /tmp/8CS9k5sz_9 line 1‚ê§‚ê§¬ª

[16:19] <Kaiepi> m: sub foo(@a where Array && *.^parameterize(Str)) { @a }; say foo [1,2,3]

[16:19] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[16:19] <Kaiepi> finally found a solution for a quirk that's been annoying the shit out of me for ages but it's awkward

[16:20] <jnthn> What does that solve?

[16:21] <araraloren> m: sub foo(Str @a) { @a }; say foo [1,2,3]

[16:21] <evalable6> araraloren, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Type check failed in binding to parameter '@a'; expected Positional[Str] but got Array ($[1, 2, 3])‚ê§  in sub foo at /tmp/19m8jtHZCD line 1‚ê§  in block <unit> at /tmp/19m8jtHZCD line 1‚ê§‚ê§¬ª

[16:21] <Kaiepi> it makes it so i can type function parameters without having to type the arguments passed

[16:21] <jnthn> sub foo(@a where Array && *.^this-never-runs-i-think { @a }; say foo [1,2,3]

[16:21] <jnthn> m: sub foo(@a where Array && *.^this-never-runs-i-think { @a }; say foo [1,2,3]

[16:21] <evalable6> jnthn, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/evlqy2COy3‚ê§Unexpec‚Ä¶¬ª

[16:21] <evalable6> jnthn, Full output: https://gist.github.com/8014b0886f753c9f6d7373ace3873039

[16:21] <Kaiepi> specifically parameterizable parameters

[16:21] <jnthn> m: sub foo(@a where Array && *.^this-never-runs-i-think) { @a }; say foo [1,2,3]

[16:21] <evalable6> jnthn, rakudo-moar dc02335dd: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[16:21] <Kaiepi> oh

[16:22] <jnthn> That code is equivalent to @a where Array && True

[16:22] <araraloren> interesting

[16:22] <jnthn> Since *.foo is a lambda, and defined, and definedness is the default True

[16:22] <jnthn> I think what you're looking for is

[16:22] <jnthn> m: sub foo(@a where .all ~~ Int) { @a }; say foo [1,2,3]

[16:22] <evalable6> jnthn, rakudo-moar dc02335dd: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[16:22] <jnthn> Or some such

[16:22] *** dogbert17 left
[16:22] <Kaiepi> ohhh

[16:23] <Kaiepi> i keep forgetting about junctions

[16:23] <jnthn> m: sub foo(@a where .all ~~ Int) { @a }; say foo [1,'x',3]

[16:23] <evalable6> jnthn, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Constraint type check failed in binding to parameter '@a'; expected anonymou‚Ä¶¬ª

[16:23] <evalable6> jnthn, Full output: https://gist.github.com/26ce837ed46a9b89e3f004fbdb7bbd6d

[16:25] <araraloren> night #perl6

[16:25] *** araraloren left
[16:25] <Kaiepi> m: subset Foo where .all ~~ Int; use nqp; say nqp::getattr(Foo.HOW, Metamodel::SubsetHOW, '$!refinement')

[16:25] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´-> ;; $_ { #`(Block|94358661318128) ... }‚ê§¬ª

[16:26] <Kaiepi> m: my constant Foo = Metamodel::SubsetHOW.new_type: :name<Foo>, :refinee(Any), :refinement({ .all ~~ Int }); sub foo(Foo @a) { @a }; say foo [1,2,3]

[16:26] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Type check failed in binding to parameter '@a'; expected Foo but got Array ($[1, 2, 3])‚ê§  in sub foo at /tmp/bBDaCWrRhT line 1‚ê§  in block <unit> at /tmp/bBDaCWrRhT line 1‚ê§‚ê§¬ª

[16:26] <jnthn> `Foo @a` means `Positional[Foo]`; you'd need to use a Scalar or \ parameter there to have the `Foo` apply to all of it

[16:27] <jnthn> And set the refinee to List or some such

[16:27] <Kaiepi> m: subset Foo where .all ~~ Int; use nqp; say nqp::getattr(Foo.HOW, Metamodel::SubsetHOW, '$!refinement')()

[16:27] <Kaiepi> m: subset Foo where .all ~~ Int; use nqp; say nqp::getattr(Foo.HOW, Metamodel::SubsetHOW, '$!refinement')([1,2,3])

[16:27] *** Kaiepi left
[16:27] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Too few positionals passed; expected 1 argument but got 0‚ê§  in block <unit> at /tmp/6SgTYV_L5o line 1‚ê§‚ê§¬ª

[16:27] <evalable6> Kaiepi, rakudo-moar dc02335dd: OUTPUT: ¬´True‚ê§¬ª

[16:28] <jnthn> I think there's a .refinement method to save the getattr :)

[16:29] *** scimon left
[16:30] *** Kaiepi joined
[16:31] *** AlexDaniel joined
[16:33] <tony-o> does coke still hang about in irc?

[16:36] <sena_kun> tony-o, no, but you can send him an e-mail.

[16:37] *** dakkar left
[16:39] <unclechu> how do i declare block to just isolate scope of names/variables?

[16:40] <sena_kun> just {}

[16:40] <sena_kun> m: if True { my $a = 10; { my $a = 5; say $a; }; say $a; }

[16:40] <evalable6> sena_kun, rakudo-moar dc02335dd: OUTPUT: ¬´5‚ê§10‚ê§¬ª

[16:41] <unclechu> ah, okay, thanks

[16:45] *** hasuwiz joined
[16:45] <hasuwiz> Good evening, #Perl6

[16:46] *** daemon left
[16:49] <sena_kun> hasuwiz, evening.

[16:52] *** Kaiepi left
[16:53] *** kurahaupo left
[16:53] *** kurahaupo joined
[16:55] *** Kaiepi joined
[16:56] *** adu joined
[17:12] <holyghost> I forgot the Loss function in Bayes::Learn - Action.pm6, I'll upload tomorrow

[17:16] *** vrurg left
[17:16] *** vrurg joined
[17:19] *** pukku joined
[17:22] *** jaldhar_ left
[17:22] <pukku> Hi! I just read the article at https://indiestack.com/2019/04/toggle-system-grayscale-mode/ about using Python to automate changing a value on macOS. I thought that it should be possible to do this without Python, and I remembered that Perl 6 had some sort of native FFI system. I played around a bit, and eventually got this far: https://gist.github.com/remorse/1d29281cbf5a075fa49aae7faf1a17a9

[17:23] <pukku> This doesn't work, because it seems like I need to tell Perl 6 what the parameters to `UAGrayscaleSetEnabled` are, but I don't know them myself (I'm only guessing, incidentally, on the `returns int32` part for `UAGrayscaleIsEnabled`).

[17:24] <pukku> Given that the Python code seems to be able to just know this, is there something that Perl 6 can do to just work?

[17:25] <pukku> (Incidentally, Perl 6 doesn't seem to understand the library format of the combined library the way that Python does; I wound up having to find a `.dylib` with the right symbols, with the name `libXXX.dylib`)

[17:27] *** lucasb joined
[17:34] <unclechu> hey guys, how do i do real parallelism, Supply::tap seems to work in single thread.

[17:34] <unclechu> ?

[17:34] <timotimo> yes, supplies are for managing parallelism, they don't introduce any by themselves

[17:35] <timotimo> how to parallelize is very dependent on what exactly you have

[17:35] *** DarthGandalf left
[17:35] <timotimo> like, are individual tasks completely separate, or do they share some data? is order important for something?

[17:36] <timotimo> if your task is equivalent to just running map over a long list and no data is shared, you can just .hyper.map, perhaps specifying the size of batches that it should split the work into in the hyper method call

[17:37] <unclechu> timotimo: well, Supply::throttle(4, ...) loads all my cpu cores, so it looks like it is what i'm looking for?

[17:37] <unclechu> timotimo: no, my data is completely indedendent

[17:38] <unclechu> it's completely free to make it parallel

[17:40] <timotimo> in that case hyper could be a little simpler than supply.throttle

[17:40] <timotimo> pukku: i would blindly assume that SetEnabled takes a single int32

[17:41] *** zakharyas left
[17:41] <timotimo> it's quite strange that you don't get a single relevant search result except that post you linked to

[17:42] *** Kaiepi left
[17:43] <pukku> It's an internal, private API call, that isn't supposed to be exposed to anyone outside Apple. I'm not even really interested in it, except for seeing if Perl 6 can do something similar to Python.

[17:43] <pukku> That works!

[17:45] <sena_kun> m: 1.new.say;

[17:45] <evalable6> sena_kun, rakudo-moar dc02335dd: OUTPUT: ¬´0‚ê§¬ª

[17:45] <unclechu> timotimo:  i believe there was an operator for "hyper", like .¬ª, is it gone?

[17:45] <sena_kun> eeeeeeh. ok, TIL, though it was obvious all along.

[17:45] <pukku> I'm still wondering how Python can just know what is allowed, without having to be told.

[17:46] *** Kaiepi joined
[17:48] <pukku> I guess, according to the documentation, that it just assumes you know what you are doing, and doesn't enforce anything.

[17:48] <timotimo> it still exists, but it doesn't automatically parallelize yet

[17:48] <timotimo> it's ¬ª. or >>.

[17:49] <timotimo> yes, it's quite possible that it just takes the name of the method you call and the arguments you pass and just turns them into the best equivalent for C that it knows

[17:49] *** MidCheck left
[17:49] <unclechu> timotimo: so as hyper, it seems it's single threaded, only one cpu core is loaded for `.hyper.map`

[17:49] <timotimo> the default batch size is rather small. if the work is very fast, spinning up more threads would be wasteful, so it won't do it

[17:50] <timotimo> so you'd want to .hyper(batch => 10000).map(...) so it'll do 10k items from the list at once

[17:50] <pukku> From the documentation "By default functions are assumed to return the C int type".

[17:50] <pukku> Also: "ctypes tries to protect you from calling functions with the wrong number of arguments or the wrong calling convention. Unfortunately this only works on Windows. It does this by examining the stack after the function returns, so although an error is raised the function has been called. To find out the correct calling convention you have to look into the C header file or the documentation for the function you want to call."

[17:51] <unclechu> timotimo: i think it would be better to set batch size to cpu cores count, am i right?

[17:52] <timotimo> no, perhaps that's the degree parameter you're thinking of

[17:52] <Xliff> tyil: No joy? Let me see if I can figure things.

[17:53] <timotimo> pukku: that sounds like the calling convention used on windows leaves some data around that'll let you figure out if you were doing it right, like perhaps it inspects callee-saved registers to see if your arguments are in there or not?

[17:53] <timotimo> gotta run for now

[17:53] <pukku> Probably -- that rapidly passes beyond my knowledge.

[17:53] <timotimo> calling conventions can be a fascinating read

[17:53] <pukku> timotimo: thanks for the help!

[17:53] <timotimo> and quite frustrating if you've got to implement them yourself

[17:54] *** bhm left
[17:54] <timotimo> moarvm's jit has code to turn a list of things that want to be passed into the right instructions to place the data in registers and other places

[17:54] <timotimo> doesn't help that even the same platform sometimes has multiple different calling conventions, like stdcall vs fastcall and i think there's also "thiscall" for C++ method calls?

[17:54] <timotimo> anyway, bbl

[17:55] <pukku> Thanks!

[17:57] <ugexe> pascals triangle polyglot (not very exciting): https://gist.github.com/ugexe/94f0b84848ed869720e6d214a08674c7

[17:57] <ugexe> it did bring up the challenge of handling the difference in flattening through

[17:58] <ugexe> otherwise it could just be = (1, @foo, 1)

[17:59] <ugexe> not having as much luck with the hamming numbers though

[17:59] <ugexe> since what i can do with a hashref is limited

[17:59] <unclechu> timotimo: well, anyway, Supply::throttle(CPU_CORES_COUNT, ...) gets best time results

[18:00] <timotimo> OK!

[18:01] *** lgtaube left
[18:02] <ugexe> isn't that just Supply.rotor(CPU_CORES_COUNT) unless start { } is used to schedule work?

[18:03] <ugexe> if so then its probably not too surprising its faster if its truely doing it single threaded (and your logic does not benefit from multiple threads as-is)

[18:04] <unclechu> no, .hyper.map also get all cores loaded, but not that stable

[18:05] <ugexe> what do you mean not stable? its causing unstable results, or unstable timing?

[18:06] <unclechu> unstable cpu cores usage

[18:06] *** pukku left
[18:06] <unclechu> in some gaps some cores just not loaded

[18:06] <ugexe> because you have not presented enough work for the compiler to feel adding more threads is a benefit

[18:07] <ugexe> .map.hyper(:batch(1), :degree(4))

[18:07] <unclechu> if anyone wonders what i am doing, i'm just having fun with magic numbers: https://gist.github.com/unclechu/b38ce477a274aef0f95f729a8cb6c9d3

[18:09] <ugexe> er, .hyper(:batch(1), :degree(4)).map({ ... })

[18:11] <unclechu> ugexe: wow thanks, now this gets best results

[18:12] <Kaiepi> $*KERNEL.cpu-cores is wrong on my machine

[18:12] <Kaiepi> well

[18:12] <Kaiepi> sort of

[18:12] <Kaiepi> it's right about physical cores, but doesn't take into account whether they're all enabled or not

[18:14] <unclechu> well, once, not always, i'm not sure, it needs more benchmarks to decide what would be faster

[18:15] <ugexe> unclechu: you would tune :batch(...) and :degree(...) until you find a size that works optimally with the work you are processing

[18:15] <ugexe> :batch is how many each thread will get to work on before it feeds the next thread

[18:15] <ugexe> :degree is the max number of threads it will do this for

[18:19] *** lgtaube joined
[18:20] <ugexe> Kaiepi: im going to take a wild guess and say there isn't a very portable way to do that

[18:22] <Kaiepi> i doubt it

[18:22] <tony-o> ugexe: i have a hamming polyglot

[18:22] <Kaiepi> on openbsd it'd depend on whether the meltdown patch is installed

[18:23] <tony-o> https://gist.github.com/tony-o/0999977b7c5fa383733ac933031c988b

[18:24] <tony-o> ^ hamming numbers polyglot

[18:26] <ugexe> ah cool. i was over complicating things

[18:26] *** sauvin left
[18:26] <tony-o> what was yours looking like?

[18:26] <Kaiepi> that reminds me, i wrote support for getting the amount of free memory and the total amount of memory available on the system a while ago but forgot to make a pullreq for it

[18:27] *** Sgeo left
[18:27] <tony-o> i tried to recurse at first but couldn't recall how to polysub and was too lazy to look

[18:27] <ugexe> i was using a hash to index, and a hash splice to read multiple keys (2, 3, 5)

[18:27] <ugexe> hash slice^

[18:28] <tyil> Xliff: that error is all I got, but it doesn't exit after showing that

[18:28] *** Sgeo joined
[18:28] <tyil> and a small list of modules I had to install

[18:29] <Xliff> I'm working on it, right now.

[18:29] <tyil> thanks :>

[18:30] <tony-o> yours probably has nicer output then mine 

[18:30] <Xliff> I've fixed the error, but colors (aside from RED) are no longer working.

[18:30] <tyil> hmm

[18:31] <tyil> it's better than not working I guess :p

[18:31] *** domidumont left
[18:31] <tyil> can I just pull and retry?

[18:31] *** jdoege joined
[18:31] <tony-o> what are you colorizing Xliff ?

[18:32] <Xliff> Grammar rules

[18:32] <Xliff> https://github.com/Xliff/p6-VisualGrammar/blob/master/README.md

[18:32] <jdoege> Hi all! Is there a builting way to generate n of m permutations? so that given < 1, 2, 3> and 2 as inputs you get back ( (1,2), (1,3), (2,3) )?

[18:33] <Xliff> ^3.comb(2)

[18:33] <tony-o> m ^3.comb(2).perl.say;

[18:33] <Xliff> m: ^3.permutation(2)

[18:33] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Potential difficulties:‚ê§    Precedence of ^ is looser than method call; plea‚Ä¶¬ª

[18:33] <evalable6> Xliff, Full output: https://gist.github.com/20c4982bfa2b30deb93616f659ccf132

[18:34] <tony-o> m: ^3.comb(2).perl.say;

[18:34] <evalable6> tony-o, rakudo-moar dc02335dd: OUTPUT: ¬´Potential difficulties:‚ê§    Precedence of ^ is looser than method call; please parenthesiz‚Ä¶¬ª

[18:34] <evalable6> tony-o, Full output: https://gist.github.com/0433b0aafafdc0369470d279e1d81b56

[18:34] <Xliff> m: (^3).comb(2).say

[18:34] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(0  1  2)‚ê§¬ª

[18:35] <Xliff> m: (^3).permutations(2).say

[18:35] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´(exit code 1) Cannot resolve caller permutations(List:D: Int:D); none of these signatures match:‚ê§    (List: *%_ --> Seq:D)‚ê§  in block <unit> at /tmp/2F_3DZXOky line 1‚ê§‚ê§¬ª

[18:35] <jdoege> < 1, 2, 3>.comb(2).permutations

[18:35] <jdoege> ? Not quite

[18:35] <jdoege> m: < 1, 2, 3>.comb(2).permutations

[18:35] <Xliff> m: (^3).comb(2).permutations

[18:35] <evalable6> jdoege, rakudo-moar dc02335dd: OUTPUT: ¬´¬ª

[18:35] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´¬ª

[18:36] <Xliff> m: (^3).comb(2).permutations.say

[18:36] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´((0  1  2) (0  2 1 ) (1  0  2) (1  2 0 ) (2 0  1 ) (2 1  0 ))‚ê§¬ª

[18:36] <Xliff> m: (^3).permutations.say

[18:36] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´((0 1 2) (0 2 1) (1 0 2) (1 2 0) (2 0 1) (2 1 0))‚ê§¬ª

[18:36] <lucasb> m: say (^3+1).combinations(2)

[18:36] <evalable6> lucasb, rakudo-moar dc02335dd: OUTPUT: ¬´((1 2) (1 3) (2 3))‚ê§¬ª

[18:36] <Elronnd> on freebsd with the jvm backend, I'm having trouble building.  There were a couple weirdnesses I commented out because I didn't want to deal with, but I'm stumped on this one.  This command "/home/elronnd/.perl6/bin/perl6-j -Ilib bin/zef install ." fails with 'Unhandled exception: Wrong number of arguments passed; expected 1..1, but got 1', but with perl6-m it works fine

[18:36] <Xliff> m: (^3).combinations(2).say

[18:36] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: ¬´((0 1) (0 2) (1 2))‚ê§¬ª

[18:38] *** domidumont joined
[18:39] *** domidumont left
[18:40] <jdoege> Thank you very much. Combinations seems to do the trick.

[18:47] *** atroxaper joined
[18:47] *** domidumont joined
[18:48] *** domidumont left
[18:48] *** jdoege left
[18:54] *** Black_Ribbon joined
[19:04] <tony-o> guifa: you might comment here to further discussion (or open a new issue here) as AlexDaniel commented https://github.com/perl6/problem-solving/issues/4 - in regards to getting round adverbs merged

[19:07] <atroxaper> timotimo: hello. Specially for you - journald writer for LogP6 :) https://github.com/atroxaper/p6-LogP6-Writer-Journald

[19:07] <yoleaux> 8 Apr 2019 11:43Z <lizmat> atroxaper: would love to see a blog post about LogP6

[19:08] <Xliff> tyil: If you pull from p6-GtkPlus and p6-VisualGrammar, things should now work. Let me know if there are other problems.

[19:08] <atroxaper> lizmat: hello. I'll try to write a blog, sure.

[19:09] <tyil> Xliff: will do, thanks!

[19:09] <guifa> tony-o Hmm interesting.  some of those do seem to be a bit more involved.  Round is already present, though

[19:09] <Xliff> tyil: Also adjusted the docs so that new users won't miss those missing modules you encountered. Sorry about that.

[19:10] <Xliff> Thanks for pointing it out!

[19:10] <tyil> no worries :)

[19:10] <tyil> I was aware going into this that it's still pre-production level, but I think a tool like this could be great when trying to make a grammar

[19:10] <tony-o> a separate discussion would be fine too

[19:11] <Xliff> tyil: Yes. I have a very complex one in development. =)

[19:11] <Xliff> https://github.com/Xliff/perl6-Parser-Sql

[19:14] <tyil> nice

[19:16] <tyil> Xliff: Failed to open file /home/tyil/.local/src/p6-VisualGrammar/tg.g: No such file or directory

[19:16] <tyil> (also Stage parse      : 361.950)

[19:18] <Xliff> OK.

[19:18] <Xliff> Pull from VG

[19:18] <Xliff> That really shouldn't be an error. Those files were never supposed to be there. lol

[19:19] *** cpan-p6 left
[19:19] *** cpan-p6 joined
[19:19] *** cpan-p6 left
[19:19] *** cpan-p6 joined
[19:19] <tyil> I touched tg.g and aaaa.txt

[19:19] <cpan-p6> New module released to CPAN! LogP6-Writer-Journald (1.3.1) by 03ATROXAPER

[19:19] <tyil> and it started up

[19:19] *** apathor joined
[19:20] <tyil> it says No such method 'parse' for invocant of type 'Any', is that normal when there's nothing written out yet

[19:21] <Xliff> Yeah. I may need to initialize the buffers to '' on startup if there isn't a file.

[19:21] <Xliff> I don't know why that's not done for an empty file, though. 

[19:21] <Xliff> *shrug*

[19:22] <tyil> I didn't specify any file anywhere yet

[19:22] <tyil> so perhaps it's because there's no empty file either?

[19:22] <Xliff> Yeah. It's been a long time since I've messed with this. It's been in maintenance mode for months.

[19:23] <Xliff> So if you would: play around with it and create issues. They'll multiply like bunnies. 

[19:23] <tyil> will do :)

[19:26] <tyil> for now, a very basic example seems to work

[19:27] <tyil> I also have a bug available for you, which I'll work out later when I'm less tired :>

[19:31] *** ctilmes left
[19:32] <Xliff> Issue it. I will be checking now that I know VG is being used! :D

[19:32] <Xliff> (and then there were 2 -- it all goes down hill from there)

[19:35] *** kurahaupo left
[19:36] *** kurahaupo joined
[19:42] *** zacts joined
[19:43] *** Kaypie joined
[19:50] *** Kaypie left
[20:01] *** rindolf left
[20:11] *** rindolf joined
[20:15] <timotimo> atroxaper: oh jeez, i should really get on that var args for nativecall thing ...

[20:21] <timotimo> atroxaper: is it fine that when there's no sendXY for the number of fields that it'll just not log at all?

[20:23] *** StopThisPsuedoHa joined
[20:31] *** sortiz joined
[20:34] <sortiz> \o #perl6

[20:34] <timotimo> 6lrep# o/

[20:35] *** hasuwiz left
[20:35] *** hasuwiz joined
[20:37] <sortiz> timotimo: About varargs, post my PoC, I'm working in a prototype, hope to be usable soon.

[20:37] <timotimo> i mean to build actual proper support

[20:37] <timotimo> var args is a little more than just calling the function as if it had that amount of arguments

[20:38] <sortiz> Yep, its clear, and much desired.

[20:39] <Xliff> timotimo: If you bring varargs to perl6 I will have your children!

[20:39] <Xliff> That's the '...' params, right?

[20:39] <timotimo> aye

[20:40] <Xliff> It will be interesting to see how that can work.

[20:40] <Xliff> Coz for many, it's variant parameters. 

[20:40] *** domidumont joined
[20:41] <Xliff> So something like (Object $o, $Int $i, Str $n, ...)

[20:41] <timotimo> it'll just pretend you had a signature with the types that were actually supplied

[20:42] <Xliff> Ooh.

[20:42] <Xliff> OK. And you can do that without creating a nativecall def for each variant.

[20:42] <timotimo> for the API on the perl6 side i'm expecting to provide just support for *@foo which will just straight-up varargs and for something like "is-first-var-arg"

[20:42] <timotimo> yes

[20:42] <timotimo> it'll be effortless from the perl6 side

[20:42] <Xliff> My GtkPlus code will thank you!

[20:43] <Xliff> (maybe it will have your children, instead)

[20:43] <Xliff> But that way makes sense.

[20:43] *** domidumont left
[20:43] <timotimo> what i don't know yet is how va_list parameters are implemented with libffi and dyncall

[20:43] <Xliff> Good luck! If you need flunkies, let me know.

[20:44] <timotimo> i don't know what a flunkie is :)

[20:44] <Xliff> Henchman. Minions. Fodder. Etc

[20:44] <timotimo> aah

[20:44] <Xliff> I may regret cluing you in, later....

[20:44] <timotimo> flip the switch, igor!

[20:45] <timotimo> oh, have you ever listened to Igorrr?

[20:45] <Xliff> Errr... no. 

[20:45] <Xliff> Should I have?

[20:46] <timotimo> it's ... excentric?

[20:46] * Xliff googlexs.

[20:46] <Xliff> ....

[20:46] <Xliff> Rock opera?!?

[20:46] <timotimo> maybe don't play it loudly

[20:47] <timotimo> i wouldn't consider that rock opera, though the wikipedia page says there's some operatic singing?

[20:47] <Xliff> Yes. There is.

[20:47] <timotimo> > Igorrr's sound combines breakbeats, heavy metal riffs, extreme tempo changes, and operatic singing coupled with screaming/growling, among other elements, to create what AllMusic describes as "an intense, disturbing, and undeniably distinct experience".

[20:48] <timotimo> that is a very apt description

[20:48] <Xliff> It's like Electronica, Heavy Metal and Opera jumped into a mosh pit, and this is what came out!

[20:48] <Xliff> Definitely unique?

[20:49] <Xliff> .oO( I'm still conf00sled! )

[20:49] <timotimo> i haven't heard anything like it ever since i heard a bit of that

[20:49] <timotimo> but tbh i really only listened to one album more than twice

[20:49] <Xliff> https://www.youtube.com/watch?v=vS7X5nuvjHo

[20:49] <timotimo> moissisure is the album i know a little

[20:55] *** cpage left
[20:56] *** silug left
[21:03] <sena_kun> there is no easy way to just say "export from this module A everything that it imports" without explicitly mentioning everything in EXPORT, right?

[21:09] <Xliff> I wish

[21:09] <sena_kun> :|

[21:10] *** skids left
[21:13] <timotimo> you don't have to explicitly mention it, you can probably loop over the things in it

[21:13] <sortiz> sena_kun: The easy way I found: https://github.com/salortiz/NativeLibs/blob/master/lib/NativeLibs.pm6#L157

[21:14] <sortiz> (But trait_mod:<is> that is now special cased)

[21:15] *** Sgeo_ joined
[21:16] <sortiz> bbl

[21:16] *** sortiz left
[21:17] *** Sgeo left
[21:21] *** cpage joined
[21:27] *** kurahaupo left
[21:27] *** ctilmes joined
[21:27] *** kurahaupo joined
[21:28] *** cpage left
[21:30] *** netrino left
[21:32] *** Sgeo_ left
[21:32] *** zacts left
[21:43] <SmokeMachine> sena_kun: this is how it‚Äôs done on Red: https://github.com/FCO/Red/blob/master/lib/Red.pm6#L50

[21:44] <sena_kun> hmm, nice, but I don't have prefixes of external symbols, its just `success` enum piece or `AddRequest`, not a `Foo::Bar::success` and `Foo::Bar::AddRequest`.

[21:44] <sena_kun> well, anyway, the list is not even tremendously long, so I guess I'll be ok with it.

[21:44] <sena_kun> have a lot of more urgent issues to deal with, in any case. ;)

[21:48] *** [particle] left
[21:50] *** adu left
[21:50] *** adu joined
[21:50] *** adu left
[21:51] *** adu joined
[21:51] *** adu left
[21:52] *** adu joined
[21:52] *** adu left
[21:52] *** adu joined
[21:53] *** adu left
[22:06] *** cpage joined
[22:07] *** skeptycal joined
[22:08] *** [particle] joined
[22:09] *** skeptycal left
[22:11] *** zachk joined
[22:12] *** zachk left
[22:12] *** zachk joined
[22:20] *** [particle] left
[22:20] <tony-o> sena_kun: what are you trying to do?

[22:20] <sena_kun> tony-o, related to what? my question about neater symbol exporting? or right now?

[22:20] *** [particle] joined
[22:21] <sena_kun> right now I am thing to implement recursive ASN types and it is not too much fun.

[22:22] <sena_kun> about exporting - right now I am having https://github.com/Altai-man/cro-ldap/blob/master/lib/Cro/LDAP/Types.pm6 and all those pushes are somehow irritate me and doesn't look too clean.

[22:22] <sena_kun> s/irritate/irritating/

[22:28] *** zacts joined
[22:29] <tony-o> yes the symbol exporting

[22:34] *** someuser joined
[22:37] <StopThisPsuedoHa> hi

[22:41] *** zachk left
[22:42] *** zachk joined
[22:54] *** Sgeo joined
[23:02] *** someuser left
[23:12] *** sena_kun left
[23:14] *** rindolf left
[23:42] *** Sgeo_ joined
[23:45] *** Sgeo left
[23:50] *** StopThisPsuedoHa left
[23:50] *** aborazmeh joined
[23:50] *** aborazmeh left
[23:50] *** aborazmeh joined
[23:53] <guifa> That face when you read a standard and the eamples don‚Äôt follow the standard

