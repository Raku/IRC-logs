[00:01] <SmokeMachine> Xliff: I think returning a Blob would be enough, no?

[00:02] <SmokeMachine> maybe a `native call Blob, MyCStruct`

[00:03] <cpan-p6> New module released to CPAN! Smack (0.1.0) by 03HANENKAMP

[00:03] <cpan-p6> New module released to CPAN! Cofra (0.0.1) by 03HANENKAMP

[00:06] <Xliff> SmokeMachine: You might be right, but probably best not to complicate things.

[00:06] *** cpan-p6 left
[00:07] *** cpan-p6 joined
[00:10] *** rindolf left
[00:12] <sortiz> SmokeMachine, see https://gist.github.com/salortiz/57239893265ec6d21e0527b20ed5df7a

[00:18] *** netrino_ left
[00:32] <SmokeMachine> m: https://gist.github.com/salortiz/57239893265ec6d21e0527b20ed5df7a

[00:32] <camelia> rakudo-moar a8cd286a4: OUTPUT: «===SORRY!===␤Could not find NativeHelpers::CStruct at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-…»

[00:33] <SmokeMachine> sortiz: thanks, Ill try it here

[00:33] *** heiler joined
[00:33] *** w_richard_w joined
[00:34] *** w_richard_w left
[00:34] <SmokeMachine> sortiz: its working! thanks!!!

[00:35] <sortiz> SmokeMachine: YW

[00:35] <patrickb> o/

[00:36] *** workrat joined
[00:37] *** w_richard_w joined
[00:38] *** heiler left
[00:38] <patrickb> sortiz: I'm currently trying to get DBDish::ODBC to run on FreeTDS. Problem is, FreeTDS doesn't support SQLDescribeParam. pyODBC kind of worked around that by deriving the SQL param types from the passed parameter types (except for NULL for which this is not possible).

[00:38] *** workrat left
[00:39] <patrickb> sortiz: Would you be open for a PR to implement something similar in DBDish::ODBC?

[00:39] <sortiz> patrickb: Sure!

[00:39] *** adu joined
[00:40] <patrickb> A free benefit would be saving an extra round trip to the server for every SQLDescribeParam saved...

[00:42] <patrickb> I'll give it a try then.

[00:42] <patrickb> But not today alas.

[00:42] <patrickb> o/

[00:43] *** patrickb left
[00:45] *** cpan-p6 left
[00:45] *** cpan-p6 joined
[00:46] <Xliff> sortiz: Nice! I will have to read up on these!

[00:48] <SmokeMachine> sortiz: Any chance of a `.new-from-list`?

[00:50] <SmokeMachine> sortiz: or maybe a `.push`?

[00:51] <sortiz> SmokeMachine: If you have a Blob, you can try with new-from-pointer

[00:52] <Xliff> sortiz: Could use this as a replacement for CArray, since CArray does not do CArray[CStruct], yes?

[00:52] <sortiz> Xliff: Yep

[00:52] <Xliff> sortiz++ 

[00:53] <SmokeMachine> sortiz: no... :( I receive the Msg objects... I can't do `$la[0].bla = 179;`... Id prefer to `$la[0] = $msg;`

[00:54] <SmokeMachine> sortiz: or: `LinearArray[Msg].new-from-list: [ $msg ]`

[00:55] <SmokeMachine> sortiz: or `$la.push: $msg`

[00:59] *** cpan-p6 left
[01:00] *** lucasb left
[01:00] *** cpan-p6 joined
[01:01] <Xliff> sortiz: Do you need any special mechanics for enabling BIND-POS on @!cache?

[01:08] <sortiz> Yes. The problem is that a CStruct instance allocation is managed by its REPR, so it need to be "moved". I'll try to see what can be done.

[01:16] *** cpan-p6 left
[01:16] *** cpan-p6 joined
[01:21] *** Yames joined
[01:23] *** ayerhart left
[01:26] <timotimo> SmokeMachine: it should be possible to "just" cast a CStruct to a CPointer[uint8] and read the bytes one by one until you reach nativesizeof(YourStruct)

[01:26] <yoleaux> 3 Mar 2019 23:27Z <Xliff> timotimo: If you are having problems with GTK::Widget.get_window and GDK_WINDOW_XID, can you file an issue. I have not tested that routine sufficiently enough to know if there are any problems.

[01:26] *** Yames left
[01:29] *** cpan-p6 left
[01:29] *** cwilson1 joined
[01:29] *** ayerhart joined
[01:30] *** cpan-p6 joined
[01:31] *** cwilson left
[01:31] <SmokeMachine> m: use NativeCall; class Msg is repr<CStruct> { has uint16 $.bla }; say nativecast(CPointer[uint8], Msg.new: :bla(179))

[01:31] <camelia> rakudo-moar a8cd286a4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    CPointer used at line 1. Did you mean 'Pointer'?␤␤»

[01:31] <SmokeMachine> m: use NativeCall; class Msg is repr<CStruct> { has uint16 $.bla }; say nativecast(Pointer[uint8], Msg.new: :bla(179))

[01:31] <camelia> rakudo-moar a8cd286a4: OUTPUT: «NativeCall::Types::Pointer[uint8]<0x5848a70>␤»

[01:32] <SmokeMachine> m: use NativeCall; class Msg is repr<CStruct> { has uint16 $.bla }; say nativecast(Pointer[uint8], Msg.new: :bla(179)).list

[01:32] <camelia> rakudo-moar a8cd286a4: OUTPUT: «(NativeCall::Types::Pointer[uint8]<0x4168e10>)␤»

[01:36] <SmokeMachine> m: use NativeCall; use NativeHelpers::Blob; class Msg is repr<CStruct> { has uint16 $.bla }; say blob-from-pointer nativecast(Pointer[uint8], Msg.new: :bla(179)), :type(Blob[int8])

[01:36] <camelia> rakudo-moar a8cd286a4: OUTPUT: «===SORRY!===␤Could not find NativeHelpers::Blob at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-ins…»

[01:36] *** TreyHarris left
[01:38] <Xliff> timotimo: Ack! GDK_WINDOW_XID is preprocessor. I hope it expands to something usable.

[01:43] *** swolffs9 joined
[01:43] <SmokeMachine> timotimo: this seems to work! Thanks!

[01:43] <SmokeMachine> m: use NativeCall; use NativeHelpers::Blob; class Msg is repr<CStruct> { has uint16 $.bla }; say blob-from-pointer nativecast(Pointer[uint8], Msg.new: :bla(179)), :1elems, :type(Blob[uint8])

[01:43] <camelia> rakudo-moar a8cd286a4: OUTPUT: «===SORRY!===␤Could not find NativeHelpers::Blob at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-ins…»

[01:47] *** swolffs9 left
[01:49] <sortiz> SmokeMachine: I just updated the gist for the simple case of one struct

[02:03] *** aborazmeh left
[02:07] <guifa> Is it safe to assume calling .Str will only use . (or even . or ,) for numbers with fractional units?  

[02:08] *** cpan-p6 left
[02:08] *** cpan-p6 joined
[02:11] *** molaf left
[02:12] <MasterDuke> guifa: i think so

[02:16] *** demm6 joined
[02:16] *** demm6 left
[02:17] *** charims20 joined
[02:17] *** samuelkf20 joined
[02:17] *** samuelkf20 left
[02:21] *** charims20 left
[02:24] *** molaf joined
[02:32] *** Moult22 joined
[02:33] *** Moult22 left
[02:34] *** lazy_bum22 joined
[02:39] *** lazy_bum22 left
[02:43] <sortiz> Xliff: I committed a change to add ASSIGN-POS to LinearArray. Seems to work. Gist updated.

[02:47] *** cwilson1 left
[02:47] *** cwilson joined
[02:47] *** cpan-p6 left
[02:47] *** cpan-p6 joined
[02:50] *** cwilson left
[02:51] <sortiz> SmokeMachine: Now the $la[$idx] = $msg case works (assign by-copy)

[02:53] <Xliff> What about BIND-POS?

[02:54] <Xliff> $la[$idx] := $msg

[02:54] *** cwilson joined
[02:57] <sortiz> Xliff: I'm thinking in the semantic (Should result in both objects pointing to the same struct?) As LinearArray is well, "linear", should I change the location of the RHS? (!!) 

[02:58] *** cwilson left
[02:58] <sortiz> Too much distant-action IMO

[02:58] <Xliff> good point

[03:01] *** cpan-p6 left
[03:01] *** cpan-p6 joined
[03:02] <Xliff> sortiz: Although I would think only the LHS would change. You would either be assigning by copy, in which case the LHS copies the data from the RHS.

[03:03] <Xliff> Or you bind, in which the LHS becomes the RHS.

[03:06] <sortiz> For a disperse array, a simple Array[Msg] just works:

[03:07] <sortiz> m: class Msg is repr<CStruct> { has uint16 $.bla is rw}; my @a = Array[Msg].new(:shape(2)); @a[0] = Msg.new(:10bla); say @a[0];

[03:07] <camelia> rakudo-moar a8cd286a4: OUTPUT: «Msg.new(bla => 10)␤»

[03:08] <sortiz> m: class Msg is repr<CStruct> { has uint16 $.bla is rw}; my @a = Array[Msg].new(:shape(2)); @a[1] := Msg.new(:10bla); say @a[1];

[03:08] <camelia> rakudo-moar a8cd286a4: OUTPUT: «Msg.new(bla => 10)␤»

[03:11] *** xvello joined
[03:16] *** cpan-p6 left
[03:16] <Xliff> sortiz++

[03:16] *** cpan-p6 joined
[03:17] *** xvello left
[03:29] <jdv79> wow, the flat/slip/single arg rule is hard when coming back to it after a while

[03:30] <jdv79> for example - https://nopaste.xyz/?802513c0a7caf0cd#kHHCEv5OoXBjOTOkGFc8vkKL7fGknjArzJPwSYcLnrI=

[03:30] <jdv79> i could no explain to someone why that works

[03:31] <jdv79> s/no/not/

[03:31] <jdv79> and it took me 20mins to get it to work

[03:31] *** xdroop6 joined
[03:34] *** bobby left
[03:36] *** xdroop6 left
[03:36] <sortiz> o/ #perl6

[03:37] *** sortiz left
[03:38] *** bobby joined
[03:43] *** wymillerlinux joined
[03:48] *** wymillerlinux left
[03:49] *** gturner17 joined
[03:50] *** Guest42461 joined
[03:54] *** Guest42461 left
[03:54] *** gturner17 left
[03:55] *** bobby left
[04:00] *** bobby joined
[04:03] *** Cabanossi left
[04:05] *** cpan-p6 left
[04:05] *** cpan-p6 joined
[04:09] *** paracyst6 joined
[04:14] *** Cabanossi joined
[04:14] *** paracyst6 left
[04:18] <Xliff> m: my @a = <a b c>; say (1, 2, @a)

[04:18] <camelia> rakudo-moar a8cd286a4: OUTPUT: «(1 2 [a b c])␤»

[04:19] <Xliff> m: my @a = <a b c>; say (1, 2, @a.flat)

[04:19] <camelia> rakudo-moar a8cd286a4: OUTPUT: «(1 2 (a b c))␤»

[04:19] <Xliff> m: my @a = <a b c>; say (1, 2, |@a.flat)

[04:19] <camelia> rakudo-moar a8cd286a4: OUTPUT: «(1 2 a b c)␤»

[04:19] <Xliff> I am beginning to understand everything but .Slip

[04:19] <Xliff> m: my @a = <a b c>; @a.append: (3, 4, 5); say (1, 2, |@a.flat)

[04:19] <camelia> rakudo-moar a8cd286a4: OUTPUT: «(1 2 a b c 3 4 5)␤»

[04:19] <Xliff> m: my @a = <a b c>; @a.append: (3, 4, 5); say (1, 2, @a.flat); say (1, 2, |@a.flat)

[04:19] <camelia> rakudo-moar a8cd286a4: OUTPUT: «(1 2 (a b c 3 4 5))␤(1 2 a b c 3 4 5)␤»

[04:20] <Xliff> m: my @a = <a b c>; @a.append: (3, 4, 5); say |@a.WHAT

[04:20] <camelia> rakudo-moar a8cd286a4: OUTPUT: «Cannot look up attributes in a Array type object␤  in block <unit> at <tmp> line 1␤␤»

[04:20] <Xliff> m: my @a = <a b c>; @a.append: (3, 4, 5); say |@a.^name

[04:20] <camelia> rakudo-moar a8cd286a4: OUTPUT: «Array␤»

[04:21] <Xliff> m: my @a = <a b c>; @a.append: (3, 4, 5); say (|@a).^name

[04:21] <camelia> rakudo-moar a8cd286a4: OUTPUT: «Slip␤»

[04:24] *** nonsiccus joined
[04:24] *** molaf left
[04:28] *** nonsiccus left
[04:38] *** maxalt6 joined
[04:42] *** maxalt6 left
[04:53] *** cpan-p6 left
[04:53] *** cpan-p6 joined
[04:56] *** zacts joined
[05:09] *** w17t joined
[05:09] *** sno left
[05:15] *** devx23 joined
[05:18] *** devx23 left
[05:25] *** wi15ht joined
[05:28] *** w17t left
[05:34] *** cpan-p6 left
[05:34] *** cpan-p6 joined
[05:42] *** gruetzkopf0 joined
[05:45] *** MasterDuke left
[05:47] *** gruetzkopf0 left
[05:49] *** cpan-p6 left
[05:49] *** cpan-p6 joined
[05:57] *** Black_Ribbon left
[05:58] *** dau15 joined
[06:02] *** dau15 left
[06:04] *** Guest93736 joined
[06:04] *** Guest93736 left
[06:05] *** cpan-p6 left
[06:05] *** cpan-p6 joined
[06:14] *** jmerelo joined
[06:14] <jmerelo> releasable6: status

[06:14] <releasable6> jmerelo, Next release will happen when it's ready. 2 blockers. 319 out of 337 commits logged

[06:14] <releasable6> jmerelo, Details: https://gist.github.com/01feced5b4715a257679912736a5a62a

[06:16] *** w17t joined
[06:16] *** wi15ht left
[06:19] *** cpan-p6 left
[06:20] *** cpan-p6 joined
[06:21] *** zacts left
[06:34] <Geth> ¦ doc: 0c8e1498c7 | (JJ Merelo)++ | doc/Language/operators.pod6

[06:34] <synopsebot> Link: https://doc.perl6.org/language/operators

[06:34] <Geth> ¦ doc: Adds and clarifies #2648 for xx

[06:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0c8e1498c7

[06:34] <Geth> ¦ doc: a059e9b9d5 | (JJ Merelo)++ | doc/Language/operators.pod6

[06:34] <Geth> ¦ doc: Fixes X closes #2648

[06:34] *** cpan-p6 left
[06:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a059e9b9d5

[06:35] *** cpan-p6 joined
[06:45] <cpan-p6> New module released to CPAN! Perl6-Parser (0.3.0) by 03JGOFF

[06:56] *** adam_g9 joined
[06:56] *** adam_g9 left
[07:01] *** domidumont joined
[07:10] *** tweaks11 joined
[07:11] *** tweaks11 left
[07:13] *** cpan-p6 left
[07:13] *** jmerelo left
[07:14] *** cpan-p6 joined
[07:18] *** abraxxa joined
[07:19] *** abraxxa left
[07:19] *** abraxxa joined
[07:21] *** sena_kun joined
[07:23] *** abraxxa left
[07:28] <sena_kun> committable6, source

[07:28] <committable6> sena_kun, https://github.com/perl6/whateverable

[07:33] *** mahafyi joined
[07:36] <Xliff> .tell timotimo OK, much of the gdk_x11_ calls that use GdkWindow as the first parameter are now in, please let me know what other routines you are looking for.

[07:36] <yoleaux> Xliff: I'll pass your message to timotimo.

[07:38] *** abraxxa joined
[07:43] <Geth> ¦ whateverable/clarify-error-message: af08556ea9 | Altai-man++ | lib/Whateverable.pm6

[07:43] <Geth> ¦ whateverable/clarify-error-message: Mention the exact channel name in error message

[07:43] <Geth> ¦ whateverable/clarify-error-message: review: https://github.com/perl6/whateverable/commit/af08556ea9

[07:44] <Geth> ¦ whateverable: Altai-man++ created pull request #349: Mention the exact channel name in error message

[07:44] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/pull/349

[07:44] *** reach_satori left
[07:50] <Geth> ¦ doc/supply-interval-6d: d02f2878f9 | Altai-man++ | doc/Type/Supply.pod6

[07:50] <Geth> ¦ doc/supply-interval-6d: Mention 6.d standard value of minimal interval

[07:50] <Geth> ¦ doc/supply-interval-6d: review: https://github.com/perl6/doc/commit/d02f2878f9

[07:51] *** reach_satori joined
[07:52] <Geth> ¦ doc: Altai-man++ created pull request #2649: Mention 6.d standard value of minimal interval

[07:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2649

[07:52] *** cpan-p6 left
[07:53] *** cpan-p6 joined
[08:00] *** ravenousmoose_ joined
[08:02] *** akolar5 joined
[08:05] *** reach_satori left
[08:07] *** akolar5 left
[08:12] *** satifant2 joined
[08:17] *** satifant2 left
[08:19] *** reach_satori joined
[08:21] *** patrickb joined
[08:27] *** devjunk joined
[08:28] <Geth> ¦ doc: d02f2878f9 | Altai-man++ | doc/Type/Supply.pod6

[08:28] <synopsebot> Link: https://doc.perl6.org/type/Supply

[08:28] <Geth> ¦ doc: Mention 6.d standard value of minimal interval

[08:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d02f2878f9

[08:28] <Geth> ¦ doc: e269df78c0 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Supply.pod6

[08:28] <Geth> ¦ doc: Merge pull request #2649 from perl6/supply-interval-6d

[08:28] *** cpan-p6 left
[08:28] <Geth> ¦ doc: 

[08:28] <Geth> ¦ doc: Mention 6.d standard value of minimal interval

[08:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e269df78c0

[08:29] *** cpan-p6 joined
[08:29] *** mahafyi left
[08:31] *** devjunk left
[08:33] *** w_richard_w left
[08:41] *** eater joined
[08:41] *** netrino joined
[08:43] *** eater left
[08:43] *** cpan-p6 left
[08:44] *** cpan-p6 joined
[08:44] *** eater joined
[08:45] *** eater left
[08:54] *** eater joined
[08:58] *** cpan-p6 left
[08:59] *** cpan-p6 joined
[09:00] *** xtophe8 joined
[09:01] *** netrino left
[09:02] *** rindolf joined
[09:05] *** xtophe8 left
[09:13] *** cpan-p6 left
[09:14] *** cpan-p6 joined
[09:17] *** w_richard_w joined
[09:18] *** w_richard_w left
[09:22] *** dakkar joined
[09:23] *** ufobat joined
[09:24] *** ufobat left
[09:24] *** ufobat joined
[09:32] *** netrino joined
[09:35] *** scimon joined
[09:35] *** w17t left
[09:35] *** zacts joined
[09:38] *** gvhoecke_26 joined
[09:41] *** zacts left
[09:43] *** yzT4 joined
[09:43] *** gvhoecke_26 left
[09:43] *** yzT4 left
[09:44] *** netrino left
[09:50] <cpan-p6> New module released to CPAN! XDG-BaseDirectory (0.0.11) by 03JSTOWE

[09:52] *** cpan-p6 left
[09:52] <scimon> So pretty much all my module use v6.c going to be updating them today.

[09:53] *** cpan-p6 joined
[09:54] *** reach_satori left
[09:54] *** reach_satori joined
[09:55] *** grzes14 joined
[09:55] *** grzes14 left
[10:00] *** Sgeo left
[10:00] *** Sgeo joined
[10:05] *** w17t joined
[10:06] <cpan-p6> New module released to CPAN! Proc-InvokeEditor (0.0.6) by 03SCIMON

[10:06] <cpan-p6> New module released to CPAN! Proc-InvokeEditor (0.0.5) by 03SCIMON

[10:06] <cpan-p6> New module released to CPAN! Algorithm-GooglePolylineEncoding (1.0.2) by 03SCIMON

[10:07] *** cpan-p6 left
[10:08] *** cpan-p6 joined
[10:08] *** leont joined
[10:10] *** adu left
[10:20] *** leont left
[10:22] *** antoniogamiz joined
[10:23] <antoniogamiz> hi :)

[10:23] *** cpan-p6 left
[10:24] *** cpan-p6 joined
[10:27] <antoniogamiz> there is a mailing list for perl6? 

[10:29] <El_Che> antoniogamiz: https://perl6.org/archive/lists/

[10:29] <sena_kun> sure, https://perl6.org/community/

[10:29] <antoniogamiz> thanks :)

[10:31] <El_Che> this is the most reactive mediumn, though :)

[10:34] <antoniogamiz> El_Che: yep, I've been coming lastly and all people here are very nice

[10:35] *** gwz joined
[10:36] *** rindolf left
[10:36] *** rindolf joined
[10:40] *** cpan-p6 left
[10:40] *** gwz left
[10:40] *** cpan-p6 joined
[10:55] *** angerman27 joined
[10:56] *** cpan-p6 left
[10:56] *** cpan-p6 joined
[10:56] <antoniogamiz> to type a unicode character in my perl6 script, must I know its code?O.o

[10:57] <sena_kun> it is not necessary, there are input tools available.

[10:58] <sena_kun> it depends on the editor/OS you are using.

[10:58] <sena_kun> https://docs.perl6.org/language/unicode_entry <- antoniogamiz 

[10:59] <antoniogamiz> sena_kun: thanks, I'll take a look 

[11:00] *** angerman27 left
[11:00] *** sdrobertw19 joined
[11:00] *** domidumont left
[11:01] *** domidumont joined
[11:02] *** spangborn27 joined
[11:04] *** spangborn27 left
[11:05] *** sdrobertw19 left
[11:09] *** squashable6 left
[11:10] *** squashable6 joined
[11:10] <El_Che> antoniogamiz: I pretty much dislike the utf8 operators and never used them. It's a personal thing

[11:11] *** cpan-p6 left
[11:11] *** cpan-p6 joined
[11:31] *** epony left
[11:33] *** epony joined
[11:33] *** antoniogamiz left
[11:37] *** gregf_ joined
[11:44] *** geguileo1 joined
[11:48] *** geguileo1 left
[11:50] *** cpan-p6 left
[11:50] *** cpan-p6 joined
[12:26] *** xunplini11 joined
[12:26] <cpan-p6> New module released to CPAN! Trait-Env (0.5.2) by 03SCIMON

[12:29] *** cpan-p6 left
[12:29] *** cpan-p6 joined
[12:30] *** xunplini11 left
[12:41] <cpan-p6> New module released to CPAN! Test-HTTP-Server (0.3.2) by 03SCIMON

[12:56] <cpan-p6> New module released to CPAN! Range-SetOps (0.0.3) by 03SCIMON

[13:00] *** lucasb joined
[13:03] <sacomo> hi all, I need some suggestions for reducing precomp parse stage. I am using PERL6LIB to include some dev modules that I am working on, but whenever I modify a single file it causes the parse stage to parse everything (or so it feels) again. Is there any way to force the precomp parse stage to ignore everything by modified files only?

[13:09] *** cpan-p6 left
[13:09] *** cpan-p6 joined
[13:16] *** Siggi090424 joined
[13:16] *** Siggi090424 left
[13:22] *** aborazmeh joined
[13:22] *** aborazmeh left
[13:22] *** aborazmeh joined
[13:25] *** cpan-p6 left
[13:25] *** cpan-p6 joined
[13:28] *** kensanata joined
[13:29] *** ebeyer_ joined
[13:31] *** ebeyer_ left
[13:33] *** ufobat_ joined
[13:35] *** Lartza4 joined
[13:36] *** Lartza4 left
[13:36] *** ufobat left
[13:40] *** cpan-p6 left
[13:40] *** cpan-p6 joined
[13:49] *** bodgix21 joined
[13:54] *** bodgix21 left
[14:09] *** abraxxa left
[14:15] *** dakkar_ joined
[14:15] *** dakkar left
[14:15] *** dakkar_ is now known as dakkar

[14:18] *** cpan-p6 left
[14:18] *** cpan-p6 joined
[14:20] *** dogbert2_ joined
[14:29] *** aborazmeh left
[14:30] <dogbert2_> .seen rindolf

[14:30] <yoleaux> I saw rindolf 3 Mar 2019 17:30Z in #perl6: <rindolf> jdv79: ah

[14:30] <rindolf> dogbert2_: hi

[14:31] *** brrt joined
[14:31] <dogbert2_> hi rindolf, do you still have your examples you pasted on friday somewhere, where p5 was 15 times faster than p6

[14:31] <dogbert2_> 'the paste links no longer works

[14:32] <dogbert2_> possibly it was related to euler problem 658

[14:33] *** cpan-p6 left
[14:33] *** cpan-p6 joined
[14:35] <rindolf> dogbert2_: i do - yes

[14:38] <dogbert2_> they're nedded :) I want to write an issue so that lizmat can take a look at the slow hash operations. Unless you want to do it that is :9

[14:38] <dogbert2_> sorry for the bad spelling

[14:39] <timotimo> these slow hash operations could have something to do with how whence is handled, i.e. autovivification

[14:39] <dogbert2_> timotimo: is the handling less than optimal ?

[14:39] <rindolf> dogbert2_: https://www.shlomifish.org/Files/files/arcs/e658par54.7z

[14:39] <timotimo> perhaps there's something spesh-plugin-y we could put there

[14:40] <dogbert2_> rindolf: thx

[14:40] <rindolf> dogbert2_: you're welcome 

[14:40] <dogbert2_> a factor of 15 is a bit much methinks :)

[14:50] <dogbert2_> rindolf: R#2735

[14:50] <synopsebot> R#2735 [open]: https://github.com/rakudo/rakudo/issues/2735 %h{$a}{$b}{$c} = True in a loop with different abcs is really slow

[14:51] <rindolf> dogbert2_: thanks

[14:53] *** w17t left
[14:56] *** w17t joined
[15:05] *** adu joined
[15:08] *** cwilson joined
[15:12] *** cpan-p6 left
[15:12] *** cpan-p6 joined
[15:16] *** releasable6 left
[15:16] *** nativecallable6 left
[15:16] *** shareable6 left
[15:16] *** committable6 left
[15:16] *** nativecallable6 joined
[15:16] *** ChanServ sets mode: +v nativecallable6

[15:16] *** shareable6 joined
[15:16] *** ChanServ sets mode: +v shareable6

[15:16] *** releasable6 joined
[15:16] *** committable6 joined
[15:16] *** ChanServ sets mode: +v releasable6

[15:16] *** ChanServ sets mode: +v committable6

[15:19] *** brrt left
[15:21] *** brrt joined
[15:24] *** brrt left
[15:24] *** brrt joined
[15:37] *** Grauwolf left
[15:37] *** Grauwolf joined
[15:37] *** Grauwolf left
[15:37] *** Grauwolf joined
[15:41] *** molaf joined
[15:47] *** mikfire joined
[15:50] *** cpan-p6 left
[15:50] *** cpan-p6 joined
[15:56] *** react-group25 joined
[15:57] <Geth> ¦ doc: d7ce75c409 | cfa++ | xt/code.pws

[15:57] <Geth> ¦ doc: Spelling: 'argsfiles'.

[15:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d7ce75c409

[15:58] *** mahafyi joined
[16:01] *** react-group25 left
[16:07] *** adu left
[16:10] *** ravenousmoose_ left
[16:11] *** Jbaczuk joined
[16:16] *** Jbaczuk left
[16:19] *** candr joined
[16:20] <candr> How can I create an immutable "constant" that is not assigned at compile time? I have a global I need to assign at run-time, but I want it to be immutable after the initial assignment. Is this possible?

[16:23] <sena_kun> I think you can use https://docs.perl6.org/type/Proxy

[16:23] <sena_kun> just write it that I'll hold an internal e.g. flag used/unused and then throw an exception on attempt to STORE with the flag is up.

[16:24] <sena_kun> s/I'll/it'll/

[16:25] *** patrickb left
[16:28] *** markk left
[16:28] *** cpan-p6 left
[16:29] *** domidumont left
[16:29] *** cpan-p6 joined
[16:29] *** markk joined
[16:29] <candr> Hmm... looks like it might work... seems strange that there is not a more obvious way to work with immutable data though...

[16:32] *** shinobi_cl left
[16:36] *** jmerelo joined
[16:36] <jmerelo> Hey!

[16:37] *** ferreira left
[16:37] <jmerelo> releasable6: status

[16:37] <releasable6> jmerelo, Next release will happen when it's ready. 2 blockers. 319 out of 338 commits logged

[16:37] <releasable6> jmerelo, Details: https://gist.github.com/ab3258b868af4ec2cf2a15fe505c7ff3

[16:38] <candr> I want to do something like this: `my $a;` (declaration from global scope).  then `$a = True;` (initial assignment from main). then later if `$a = False` should die with something like "cannot assign to an immutable value".

[16:39] <jmerelo> candr: try binding

[16:39] <jmerelo> m: my $a := True; $a = False

[16:39] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <candr> m: my $a; $a := True;

[16:40] <camelia> rakudo-moar 9770c1aa1: ( no output )

[16:41] <jmerelo> m: my $a; $a := True; $a = False

[16:41] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[16:41] <candr> In the REPL I get this:

[16:41] <jmerelo> m: my $a; $a := True; $a := False # That could be a problem

[16:41] <camelia> rakudo-moar 9770c1aa1: ( no output )

[16:41] <candr> > my $a; (Any) > $a := True; ===SORRY!=== Error while compiling: Cannot use bind operator with this left-hand side ------> $a := True⏏;

[16:41] <candr> seems you cant declare and assign seperately

[16:41] *** kensanata left
[16:42] <mikfire> Don't rebind?

[16:42] <jmerelo> You can always rebind

[16:43] <jmerelo> You can't assign once you bound to something, but you can rebind as above

[16:43] <jmerelo> candr: you can maybe hack something using Proxy https://docs.perl6.org/language/containers#Custom_containers

[16:44] <jmerelo> candr: try StackOverflow also 

[16:44] <Geth> ¦ whateverable: af08556ea9 | Altai-man++ | lib/Whateverable.pm6

[16:44] <Geth> ¦ whateverable: Mention the exact channel name in error message

[16:44] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/af08556ea9

[16:44] <Geth> ¦ whateverable: 5f210b4ca1 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | lib/Whateverable.pm6

[16:44] <Geth> ¦ whateverable: Merge pull request #349 from perl6/clarify-error-message

[16:44] <Geth> ¦ whateverable: 

[16:44] <Geth> ¦ whateverable: Mention the exact channel name in error message

[16:44] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/5f210b4ca1

[16:45] <candr> Yeah that was mentioned earlier... I just figured there would be more standard way to do this... since so many other functional inspired langs have data types that are immutable by default...

[16:46] <jmerelo> candr: data-types are inmmutable. Containers might not be. Lists are immutable, for instance, or Mixes. But you can assign anything else to the container.

[16:46] <jmerelo> Perl6 makes a nice distinction between containers and data

[16:47] <jmerelo> You can of course use constants, but what you are looking for are write-once variables, not constants (or immutable containers, which are constants)

[16:47] <candr> I meant container then.

[16:47] <candr> exactly

[16:47] <jmerelo> If you can know the value in compile time, you could use a constant as a matter of fact. But if that's not the case, I guess that using your own Role or using Proxy is your best bet.

[16:50] <candr> hmm... is there a declarator other than "my" that I can use from within main to bind to a container that will then be in the global scope?

[16:50] *** digital9 joined
[16:50] *** digital9 left
[16:51] <sena_kun> `our` and `is export` trait(our $foo is export) if you want to export it for other modules. or you probably want a dynamic variable.

[16:55] *** Travis_ joined
[17:00] *** Travis_ left
[17:01] *** brrt left
[17:02] *** sno joined
[17:03] <candr> Would be cool if there was a container that maybe had syntax like sub parameters. Immutable by default and mutable if `is rw` trait is used during declaration.

[17:07] *** cpan-p6 left
[17:07] *** cpan-p6 joined
[17:10] *** nikade4 joined
[17:10] *** nikade4 left
[17:12] *** candr left
[17:16] *** Xogium3 joined
[17:19] *** dakkar left
[17:20] *** Xogium3 left
[17:21] *** cpan-p6 left
[17:22] *** cpan-p6 joined
[17:28] <sena_kun> m: grammar A { rule TOP { 'a' } }; grammar B { rule TOP { <A::TOP> } }; B.parse('a', :actions(Actions));

[17:28] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Actions used at line 1␤␤»

[17:28] <sena_kun> m: grammar A { rule TOP { 'a' } }; grammar B { rule TOP { <A::TOP> } }; class Actions { method TOP($/) { say $/; make 'a'; } }; B.parse('a', :actions(Actions));

[17:28] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «｢a｣␤｢a｣␤ A::TOP => ｢a｣␤»

[17:29] <sena_kun> this looks totally like a bug to me.

[17:29] *** domidumont joined
[17:29] *** scimon left
[17:33] *** |oLa| joined
[17:34] *** ferreira joined
[17:37] *** cpan-p6 left
[17:38] *** cpan-p6 joined
[17:40] *** w17t left
[17:42] *** w17t joined
[17:43] *** lichtkind left
[17:44] *** ufobat_ left
[17:54] *** w17t left
[17:54] *** cpan-p6 left
[17:54] *** cpan-p6 joined
[17:55] *** lichtkind joined
[18:09] *** cpan-p6 left
[18:09] *** cpan-p6 joined
[18:25] *** cpan-p6 left
[18:25] *** cpan-p6 joined
[18:26] *** Black_Ribbon joined
[18:34] *** mowcat joined
[18:35] <moritz> what's the bug? that TOP is called twice?

[18:38] <sena_kun> yes.

[18:38] <sena_kun> it is logically expected to be used only for the outer grammar, but it works with inner too.

[18:39] <sena_kun> you can workaround it, but I cannot really say it is DWIM.

[18:47] *** kensanata joined
[18:50] *** adu joined
[19:02] *** ravenousmoose joined
[19:03] *** Seance[m] joined
[19:05] *** zacts joined
[19:08] <vrurg> It looks like perl6.dev has been bought. Hopefully, it was taken by community?

[19:09] *** |oLa| left
[19:10] <jmerelo> vrurg: can you find the owner?

[19:10] *** Sgeo left
[19:10] <vrurg> No, Registrant Name: REDACTED FOR PRIVACY

[19:10] *** Sgeo joined
[19:11] *** |oLa| joined
[19:13] *** adu left
[19:14] *** molaf left
[19:31] *** ayerhart left
[19:31] *** natrys joined
[19:32] *** ayerhart joined
[19:38] *** domidumont left
[19:39] *** domidumont joined
[19:39] <AlexDaniel> vrurg: well, people can buy all kinds of stuff…

[19:40] *** sena_kun is now known as Altai-man

[19:40] <vrurg> AlexDaniel: sure. I just had a hope that we have that one. Seemingly not. Ok.

[19:43] *** est joined
[19:43] *** domidumont left
[19:43] *** est is now known as Guest77324

[19:44] <AlexDaniel> raku is also taken, btw :)

[19:44] <Altai-man> m: say 'a' ~~ / <[ \x01 .. \x1F ]> /

[19:44] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «Nil␤»

[19:44] <Altai-man> how to make it DWIW?

[19:46] <lizmat> what do you want it to do?  "a" is not in that range 

[19:46] <Altai-man> ah

[19:46] <Altai-man> but the syntax is correct, right?

[19:46] <AlexDaniel> m: say 'a' ~~ / <[ \x01 .. \x7F ]> /

[19:46] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «｢a｣␤»

[19:46] <Altai-man> I am just implementing RFC 4514 right now. :)

[19:46] <Altai-man> ok, thanks!

[19:47] <AlexDaniel> Altai-man: I don't know if it's correct…

[19:47] <AlexDaniel> in the ascii range it is probably alright

[19:47] <Altai-man> well, I know the codes.

[19:47] <Altai-man> or, rather, I have them in the RFC.

[19:47] *** ferreira left
[19:47] <Altai-man> just wasn't sure about the syntax.

[19:50] *** netrino joined
[19:50] *** Guest77324 left
[19:55] <AlexDaniel> m: say “\x[8000000000000000]”.chr

[19:55] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «===SORRY!===␤chr codepoint cannot be negative␤»

[19:55] <AlexDaniel> meh

[19:56] <AlexDaniel> it's actually interesting

[19:56] <AlexDaniel> m: say “\x[800000000000000]”.chr

[19:56] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5\0' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[19:56] <AlexDaniel> m: say “\x[80000000000000000]”.chr

[19:56] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5\0' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[19:56] <AlexDaniel> but

[19:56] <AlexDaniel> m: say “\x[8000000000000000]”.chr

[19:56] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «===SORRY!===␤chr codepoint cannot be negative␤»

[19:56] <AlexDaniel> :)

[19:57] <AlexDaniel> oh

[19:57] <AlexDaniel> O_O

[19:58] <AlexDaniel> m: say “\x[800000]”.ord

[19:58] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «8388608␤»

[19:58] <AlexDaniel> m: say “\x[800000000]”.ord

[19:58] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «0␤»

[19:58] <AlexDaniel> m: say “\x[8000000]”.ord

[19:58] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «134217728␤»

[19:58] <AlexDaniel> m: say “\x[80000000]”.ord

[19:58] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «MoarVM oops: MVM_nfg_get_synthetic_info call requested a synthetic codepoint that does not exist.␤Requested synthetic -2147483648 when only 6 have been created.␤   at src/Perl6/World.nqp:2861  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/Perl6/Wor…»

[19:58] *** pecastro joined
[19:59] <timotimo> fun

[19:59] <timotimo> clearly we're not distinguishing well between unsigned and signed somewhere in moar

[20:00] <timotimo> that should throw an exception rather than oops

[20:03] *** zachk joined
[20:03] <AlexDaniel> or maybe return 0 like all other huge codepoints do?

[20:03] <AlexDaniel> which is wrong but at least it'd be consistent with something

[20:03] *** zachk left
[20:03] *** zachk joined
[20:03] <guifa> Given a Role X, is there a way to see what classes do X?

[20:05] <lizmat> no

[20:05] <lizmat> currently in Perl 6, children know of their parents

[20:06] <lizmat> but parents know nothing of their children

[20:06] <AlexDaniel> R#2738

[20:06] <synopsebot> R#2738 [open]: https://github.com/rakudo/rakudo/issues/2738 [Moar][UNI] MoarVM oops when .ord-ing garbage strings

[20:07] <lizmat> guifa: It's a bad example to set in this world, but that's the current reality

[20:07] *** zacts left
[20:08] <guifa> lizmat: ha, fair.  I just have a lot of different classes that implement insanely similar functions (basically “does X count as zero/one/two/few/many/other?”) and made classes for identical models, with a languages array for the ones it goes with.  I was debating the best way to group that

[20:09] <AlexDaniel> timotimo: ha, `9999` label is still there!

[20:09] <guifa> I guess I could seriously abuse multidispatch but … that seems the ugliest haha

[20:10] <AlexDaniel> kinda miss the time when it was easy to poke large numbers into different routines and see rakudo go crazy :)

[20:10] <lizmat> guifa 

[20:10] <lizmat> guifa: well, if you have a list of classes, you *can* check if they're doing a specific role

[20:11] *** abraxxa joined
[20:12] <guifa> Yeah.  It’s a very finite (if long) list, so I’ll just have at the bottom an array of classes, loop through, and add them to the appropriate hash keys

[20:18] <Xliff> \o

[20:28] <guifa> Russian wins for most complicated number rule: v = 0 and i % 10 = 0 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 11..14

[20:29] * Altai-man .oO ( I feel myself so complicated right now )

[20:36] *** ferreira joined
[20:39] <guifa> Altai-man: Actually I just found a Polish rule that’s even more complicated (by a smidgen)

[20:39] <Altai-man> :]

[20:39] <Altai-man> I am proud of Poland, but I don't know Polish.

[20:48] *** xinming_ joined
[20:51] *** xinming left
[20:53] *** ravenousmoose left
[20:54] *** ravenousmoose joined
[20:54] *** zacts joined
[21:11] *** epony left
[21:13] *** Altai-man left
[21:17] *** molaf joined
[21:23] *** drclaw joined
[21:24] *** antoniogamiz joined
[21:25] <drclaw> clear

[21:25] <drclaw> ls

[21:26] <antoniogamiz> drclaw: that commands work here? O.o

[21:27] <drclaw> hah hah. I haven't had coffee yet... wrong window :) 

[21:27] <antoniogamiz> drclaw: ahahh yep that's common :)

[21:29] <lizmat> and yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/03/04/2019-09-cool-stuff-this-summer/

[21:31] <moritz> lizmat++

[21:33] *** abraxxa left
[21:42] *** ExtraCrispy left
[21:45] <jmerelo> lizmat++

[21:51] *** zacts left
[21:51] *** wbn joined
[21:52] *** mikfire left
[21:56] *** kensanata left
[22:05] *** antoniogamiz left
[22:05] *** cwilson left
[22:06] *** cwilson joined
[22:27] *** zacts joined
[22:32] <tbrowder> lizmat: many thanks!

[22:32] *** [Sno] joined
[22:35] *** ravenousmoose left
[22:35] *** sno left
[22:51] *** natrys left
[23:01] *** gfldex joined
[23:06] *** zacts left
[23:12] <jdv79> m: class A { has Str:D $.b; submethod BUILD (:$!b = ''){}} A.new

[23:12] <camelia> rakudo-moar 9770c1aa1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable definition of type Str:D requires an initializer␤at <tmp>:1␤------> 3class A { has Str:D $.b7⏏5; submethod BUILD (:$!b = ''){}} A.new␤    expecting any of:␤        constraint␤»

[23:12] <jdv79> isn't the initializer covered by the BUILD sig?

[23:20] *** lucasb left
[23:31] *** reach_satori left
[23:31] *** reach_satori joined
[23:34] *** MasterDuke joined
[23:35] *** MasterDuke left
[23:35] *** MasterDuke joined
[23:41] *** sortiz joined
[23:41] <sortiz> \o #perl6

[23:43] <AlexDaniel> o/

[23:45] *** Zanthir joined
[23:49] *** Zanthir left
