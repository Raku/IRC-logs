[00:04] <irced> i think prefixing with an ampersand to List'ify the sequence is probably going to be the most widely understood means of iterating over a "list" when flatenning is undesirable due to the presence of sub"lists"

[00:06] <irced> though even a ( LIST ) needs to be "list"ified for the for loop. it is an idiosyncracy of the for loop perhaps, that it expects something besides a raw ( blah, blah ) to iterate over each element individually

[00:07] * irced i accept you, for loop.

[00:07] * irced weirdo.

[00:13] <irced> ampersand oops i meant at symbol

[00:13] *** pamplemousse left
[00:18] *** sena_kun left
[00:20] *** st_elmo joined
[00:21] <irced> i suppose one can say that a non-Array positional is internally read by the for loop as not having an internal field separator. then various operations can change its representation to the for loop or just change IFS="" to IFS="something that internally makes sense"

[00:23] *** epony left
[00:30] *** [particle] left
[00:31] *** mowcat left
[00:33] *** netrino left
[00:33] *** mowcat joined
[00:40] *** [particle] joined
[00:53] <irced> non-@rray positional

[01:12] *** aborazmeh left
[01:26] *** melezhik joined
[01:27] <melezhik> How to define function accepting list of arguments, in a way `foo a,b,c;`

[01:27] <melezhik> ?

[01:28] <irced> melezhik: exactly three arguments?

[01:28] *** Actualey` joined
[01:28] <melezhik> no, 1 .. N

[01:28] <melezhik> at least one and could be more

[01:29] <irced> melazhik: well, there's various ways with various levels of complexity. to begin with a simple case, we can use the implicit arguments list @_

[01:30] <irced> sub fun() { say "There are {@_.elems} arguments" }; fun(a, b, 123);

[01:30] <irced> m: sub fun() { say "There are {@_.elems} arguments" }; fun(a, b, 123);

[01:30] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Placeholder variable @_ may not be used here because the surrounding block takes no signature␤at <tmp>:1␤------> 3sub fun() { say "There are {@_.elems}7⏏5 arguments" }; fun(a, b, 123);␤    e…»

[01:31] <irced> oops, an implicit slurp i think is in order

[01:31] <melezhik> I'd like to define signature 

[01:31] <irced> m: sub fun(*@_) { say "There are {@_.elems} arguments" }; fun(a, b, 123);

[01:31] <melezhik> not just @_

[01:31] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    b used at line 1␤␤»

[01:31] <irced> ok, well, since this route isn't working as expected, we can do that instead

[01:32] <irced> m: sub fun($a, $b, $c) { say $a; say $b; say $c; }; fun('a', 'b', 123);

[01:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «a␤b␤123␤»

[01:32] <irced> m: sub fun(*@_) { say "There are {@_.elems} arguments" }; fun('a', 'b', 123);

[01:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «There are 3 arguments␤»

[01:33] <irced> that's why it wasn't working.

[01:33] <irced> anyway, those are two examples, please help me narrow down what you need from here.

[01:34] <irced> m: sub fun() { say "There are {@_.elems} arguments" }; fun('a', 'b', 123);

[01:34] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Placeholder variable @_ may not be used here because the surrounding block takes no signature␤at <tmp>:1␤------> 3sub fun() { say "There are {@_.elems}7⏏5 arguments" }; fun('a', 'b', 123);␤ …»

[01:34] <irced> m: sub fun { say "There are {@_.elems} arguments" }; fun('a', 'b', 123);

[01:34] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Placeholder variable @_ may not be used here because the surrounding block takes no signature␤at <tmp>:1␤------> 3sub fun { say "There are {@_.elems}7⏏5 arguments" }; fun('a', 'b', 123);␤   …»

[01:35] <irced> anyway, working with the two signatures, ($a, $b, $c) and (*@_), how do neither of these fit your requirements?

[01:36] <irced> melezhik

[01:37] <melezhik> Ideally I'd like to define function `foo(p,a,b,c)` where p is string and the rest - a,b,c,d ... - list, with this call semantic, without `[` `]` symbols around 

[01:38] <melezhik> and without parenthesis `(` `)`

[01:38] <irced> to address the last part

[01:38] <melezhik> signature should check that p is a string and just slurp the rest of parameters as array/list

[01:39] <irced> err, ok, let me see

[01:42] <irced> here we are

[01:43] <irced> sub fun (Str:D $string-in, *@the-rest) { say $string.in; say @the-rest.gist }; fun "hello universe", 1, 2, 3, 4, 'kewl';

[01:43] <irced> m: sub fun (Str:D $string-in, *@the-rest) { say $string.in; say @the-rest.gist }; fun "hello universe", 1, 2, 3, 4, 'kewl';

[01:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$string' is not declared. Did you mean 'Stringy'?␤at <tmp>:1␤------> 3un (Str:D $string-in, *@the-rest) { say 7⏏5$string.in; say @the-rest.gist }; fun "h␤»

[01:43] <irced> m: sub fun (Str:D $string-in, *@the-rest) { say $string-in; say @the-rest.gist }; fun "hello universe", 1, 2, 3, 4, 'kewl';

[01:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «hello universe␤[1 2 3 4 kewl]␤»

[01:44] <irced> there we are, whoa it worked 😄

[01:44] <melezhik> irced thank you, this is what I've looked for `*@list`

[01:44] <melezhik> (-:

[01:45] <irced> ur welcome

[01:45] <irced> glad it helped

[01:46] <irced> *@list is the slurpy parameter, where * indicates to slurp. but depending on the complexity of your other parameters you might need to use a diffferent slurp. anyway, this is the simple case

[01:47] <melezhik> let's start with this and then let see, but I don't expect anything more complex that just passing plain lists ...

[01:48] <irced> melezhik: it's when you pass in lists of sublists that you might get unexpected results with a simple slurp.

[01:48] <melezhik> sure

[01:49] *** melezhik left
[01:50] <irced> melezhik: but don't worry, if you do that the solution is simple, use a different slurp

[01:50] <irced> melezhik: in fact, you can use the nonflattening slurpy instead of a regular slurpy to treat lists of sublists as they are.. come to think of it

[01:50] <irced> m: sub fun (Str:D $string-in, **@the-rest) { say $string-in; say @the-rest.gist }; fun "hello universe", 1, 2, 3, 4, 'kewl';

[01:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «hello universe␤[1 2 3 4 kewl]␤»

[01:51] <irced> melezhik: there, use **@the-rest to start with so you get what you put in.

[01:51] <irced> melezhik: easy

[01:52] <irced> m: sub fun (Str:D $string-in, **@the-rest) { say $string-in; say @the-rest.gist }; fun "hello universe", 1, (2, 3), 4, 'kewl';

[01:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «hello universe␤[1 (2 3) 4 kewl]␤»

[01:58] <irced> m: sub fun (Str:D $string-in, **@the-rest) { say $string-in; say @the-rest.gist if @the-rest}; fun "hello universe";

[01:58] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «hello universe␤»

[01:58] <irced> melezhik: you should probably check for the other arguments of course, as shown, as they are optional by default

[02:02] *** epony joined
[02:04] *** Manifest0 left
[02:05] *** Manifest0 joined
[02:07] <irced> melezhik: don't forget that parameters themselves are immutable by default

[03:00] *** kent\n joined
[03:07] *** kent\n left
[03:07] *** kent\n joined
[03:09] *** epony left
[03:16] *** epony joined
[03:16] *** jlinahan joined
[03:32] *** goatshagger joined
[03:34] *** goatshagger left
[03:38] *** jlinahan left
[04:03] *** kaare__ joined
[04:03] *** mowcat left
[05:03] *** evalable6 left
[05:03] *** notable6 left
[05:04] *** evalable6 joined
[05:06] *** notable6 joined
[05:44] *** robertle left
[06:13] *** irced left
[06:16] <Geth> ¦ doc/master: 5 commits pushed by threadless-screw++, (Juan Julián Merelo Guervós)++

[06:16] <Geth> ¦ doc/master: 92289bce91 | Correction of typo

[06:16] <Geth> ¦ doc/master: e6e9b9d18f | Fixes #2873

[06:16] <Geth> ¦ doc/master: bc1ad97366 | Fixes non-working link

[06:16] <Geth> ¦ doc/master: d42c110651 | Amendments

[06:16] <Geth> ¦ doc/master: f045213548 | Merge pull request #2923 from threadless-screw/regexes

[06:16] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/b0d5cf9da81a...f045213548af

[06:18] *** jmerelo joined
[06:25] <Geth> ¦ doc: JJ assigned to antoniogamiz Issue Standardize search categories https://github.com/perl6/doc/issues/1410

[06:40] *** domidumont joined
[06:51] *** rindolf joined
[06:53] <jmerelo> There are a bunch of unanswered questions in StackOverflow https://stackoverflow.com/questions/tagged/perl6?tab=Unanswered take a look at them, and help the community by answering them

[06:56] *** ravenousmoose_ joined
[06:57] <jmerelo> CFP in the London Perl Workshop is open: http://blogs.perl.org/users/lpw/2019/07/london-perl-workshop---2019.html

[06:59] *** ravenousmoose left
[07:02] *** chloekek joined
[07:17] *** llfourn left
[07:18] <AlexDaniel> r: say 42

[07:19] <perlbot> AlexDaniel: 42␤

[07:19] *** cpan-p6 left
[07:19] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[07:19] <camelia> ..rakudo-jvm 08b449e1a: OUTPUT: «␤(timeout)␤»

[07:19] *** cpan-p6 joined
[07:19] *** cpan-p6 left
[07:19] *** cpan-p6 joined
[07:23] <Geth> ¦ whateverable: 933c6fbe3b | (Aleks-Daniel Jakimenko-Aleksejev)++ | xt/quotable.t

[07:23] <Geth> ¦ whateverable: Add timeout test for Quotable

[07:23] <Geth> ¦ whateverable: 

[07:23] <Geth> ¦ whateverable: Found it on the server.

[07:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/933c6fbe3b

[07:23] <Geth> ¦ whateverable: 0df6093343 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Evalable.p6

[07:23] <Geth> ¦ whateverable: Remove “r:” shortcut from Evalable

[07:23] <Geth> ¦ whateverable: 

[07:23] <Geth> ¦ whateverable: It is now used by perlbot.

[07:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/0df6093343

[07:23] <Geth> ¦ whateverable: 1433b21f04 | (Aleks-Daniel Jakimenko-Aleksejev)++ | maintenance/long-term-storage.p6

[07:23] <Geth> ¦ whateverable: Move long-term storage cutoff dates

[07:23] <Geth> ¦ whateverable: 

[07:23] <Geth> ¦ whateverable: So that more space is saved.

[07:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/1433b21f04

[07:26] *** patrickb joined
[07:28] *** robertle joined
[07:31] <patrickb> .tell [Coke] wrt. rakudobrew not finding perl6 after install - could you create a bug report? I'm interested in doing something about this.

[07:31] <yoleaux> patrickb: I'll pass your message to [Coke].

[07:31] <Geth> ¦ whateverable: 1d1e56a7dc | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Committable.p6

[07:31] <Geth> ¦ whateverable: Make committable work with slow snippets

[07:31] <Geth> ¦ whateverable: 

[07:31] <Geth> ¦ whateverable: The more releases we have, the longer it takes for committable to

[07:31] <Geth> ¦ whateverable: produce an answer. By returning a promise the bot will hopefully not

[07:31] <Geth> ¦ whateverable: ping out when running heavy code snippets.

[07:31] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/1d1e56a7dc

[07:31] <jmerelo> patrickb: I'm not sure it's a bug. It's simply that it's changed the way rakudobrew is declared. You have to run a script to make it find it.

[07:34] <patrickb> jmerelo: I think I don't understand.

[07:34] <AlexDaniel> squashable6: status

[07:34] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 3 days and ≈20 hours (2019-08-03 UTC-14⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[07:34] <AlexDaniel> hmmmmmmmm

[07:34] <jmerelo> AlexDaniel: hmmmm is correct

[07:35] <jmerelo> patrickb: simply rakudobrew has changed in the way it installs "rakudobrew" as a command. Before it was simply a file somewhere, which you could access via a path, it's now a shell function.

[07:35] <jmerelo> patrickb: you need to declare that shell function in a shell before you can access rakudobrew, and before it can find perl6 anew.

[07:36] <Geth> ¦ whateverable: e386853a23 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[07:36] <Geth> ¦ whateverable: Sleep for a random amount of time before starting

[07:36] <Geth> ¦ whateverable: 

[07:36] <Geth> ¦ whateverable: Otherwise all bots join at the same time which looks suspicious.

[07:36] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/e386853a23

[07:37] <patrickb> jmerelo: Ah, so the entry in [Coke]s .bash_rc was wrong. Rakudobrew should have reported that the shim was missing and refuse operation. Might still be a bug...

[07:37] <jmerelo> patrickb: probably, yes. 

[07:53] *** dakkar joined
[08:02] *** dolmen joined
[08:02] *** zakharyas joined
[08:04] *** nadim_ joined
[08:15] *** reach_satori_ left
[08:29] *** nadim_ left
[08:30] <jmerelo> AlexDaniel: so, about next squashathon

[08:30] <jmerelo> AlexDaniel: there are issues there since 2016

[08:31] <jmerelo> AlexDaniel: there are items in the wishlist, and outright errors.

[08:33] <jmerelo> AlexDaniel: I think there are also modifications in production that are not in the repo. We would have to onboard timotimo

[08:33] <jmerelo> AlexDaniel: also, everything is in Perl 5...

[08:34] <timotimo> a rakudobrew squashathon?

[08:35] <timotimo> or is that a whateverable squashathon?

[08:35] <jmerelo> timotimo: No, a modules.perl6.org squashathon

[08:35] <patrickb> I think the two discussions were unrelated.

[08:38] <AlexDaniel> jmerelo: 🤷

[08:39] <AlexDaniel> jmerelo: 26 issues most of which I won't be able to help with

[08:39] *** Actualey` left
[08:39] <jmerelo> AlexDaniel: you can still help with _some_ :-)

[08:39] *** Actualeyes left
[08:40] <jmerelo> AlexDaniel: midterm, we should migrate it to Perl 6

[08:40] <jmerelo> AlexDaniel: short term, we should try and fix some stuff.

[08:40] <AlexDaniel> I thought the idea is to come with a better squashathon topic?

[08:40] <AlexDaniel> something that is actually fun for contributors…

[08:41] <AlexDaniel> last month was awesome

[08:41] <jmerelo> AlexDaniel: I'm open to suggestions. But I take offense to your saying that perl 5 is not fun

[08:41] *** Actualeyes joined
[08:42] <Geth> ¦ modules.perl6.org: 11302a5f92 | (JJ Merelo)++ | CONTRIBUTING.md

[08:42] <Geth> ¦ modules.perl6.org: Adds mini-contribution guide

[08:42] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/11302a5f92

[08:43] <AlexDaniel> jmerelo: small typo: “cna have a working copy”

[08:44] <AlexDaniel> does anybody have any cool idea for this squashathon? Something fun, please :)

[08:44] <Geth> ¦ modules.perl6.org: 80f20a6279 | (JJ Merelo)++ | CONTRIBUTING.md

[08:44] <Geth> ¦ modules.perl6.org: Fixes small typo

[08:44] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/80f20a6279

[08:45] <jmerelo> AlexDaniel: fun is OK. But "needed" is also OK. 

[08:46] <AlexDaniel> failing to engage is not ok

[08:47] <AlexDaniel> remember docs&tools squashathon when somebody won a plush camelia for a single PR? :)

[08:47] <jmerelo> AlexDaniel: Well, by having something that is more perl than perl 6 we could engage people that don't know perl 6

[08:48] <jmerelo> AlexDaniel: that's not fun... for me. It means we have to do a lot of additional work, or simply work is left undone.

[08:48] <jmerelo> AlexDaniel: perl6 is -Ofun, but it's even funnier if all tools and sites are ready and not working on a wing and a prayer.

[08:49] <jmerelo> AlexDaniel: plus, we're 3 days away from the squashathon. It's either that or some canned squashathon, like the next one, Rakudo and roast

[08:49] <jmerelo> AlexDaniel: we haven't actually had one of those for a long time.

[08:49] <AlexDaniel> how many pages we have on the docs website?

[08:50] <jmerelo> AlexDaniel: in the ballpark of coupe of thousands. Generated from ~ 500 documents.

[08:50] <AlexDaniel> I'm thinking doc proofreading squashathon

[08:51] <jmerelo> AlexDaniel: doc squashathon, in general...

[08:51] <jmerelo> AlexDaniel: proofreading is one thing, but people might want to do something more...

[08:51] <jmerelo> AlexDaniel: also, proofreading is fun?

[08:52] <AlexDaniel> well, we can make a list of pages and turn every single one into a todo item. What you get is a bunch of actionable tasks

[08:52] <AlexDaniel> just an idea

[08:53] <jmerelo> AlexDaniel: so you want 400 new issues in the doc repo? 

[08:54] <AlexDaniel> no, in a separate repo

[08:55] <jmerelo> AlexDaniel: new repo?

[08:55] <AlexDaniel> a temporary one, yeah

[08:55] <AlexDaniel> but that's just an idea, arguably not the best one given that we already have a bunch of tickets in the doc repo

[08:56] <jmerelo> AlexDaniel: problem is, most of the documentation is basically OK. Coke takes care of typos running aspell from time to time. There are probably some grammar errors.

[08:56] <jmerelo> AlexDaniel: but those are possibly taken care of from time to time.

[08:57] <El_Che> jmerelo: I think there are quite some people with interest in perl6 and not in perl5 (as never learnt it or don't use it any longer)

[08:57] <jmerelo> AlexDaniel: there's also this issue: https://github.com/perl6/doc/issues/2554 In general, I have found that "old" chunks are the one that are incorrect. Not the grammar, but the examples, mostly.

[08:58] <jmerelo> El_Che: but there are more people who know perl 5 than perl 6. That they want to help with a Perl 6 tool or site is a different thing altogether

[08:59] <jmerelo> AlexDaniel: but I undertand this might be a contentious topic for a squashathon (cc: El_Che)

[09:00] <jmerelo> AlexDaniel: what do you think about creating an issue in perl6/doc with check boxes for proofread pages? 

[09:00] <jmerelo> AlexDaniel: we can do a general perl6/doc squashathon, but we would also have an easy issue to start working with it.

[09:01] <AlexDaniel> checkboxes might work, I'm not sure

[09:01] <AlexDaniel> it's hard to track who checks which checkbox

[09:02] <jmerelo> AlexDaniel: squashable does that. It's maybe more difficult to know who's working on what, but it can be done via a comment (which Squashable will dutifully send here)

[09:02] *** reach_satori_ joined
[09:02] <jmerelo> AlexDaniel: there are 392 pod6 files in the documentation.

[09:03] <AlexDaniel> weekly: Squashathon next weekend! See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day for more info

[09:03] <notable6> AlexDaniel, Noted!

[09:03] <AlexDaniel> weekly: or should I say this weekend?

[09:03] <notable6> AlexDaniel, Noted!

[09:03] <AlexDaniel> weekly: anyway, soon! Very soon :)

[09:03] <notable6> AlexDaniel, Noted!

[09:06] <jmerelo> AlexDaniel: so, doc with proofreading squashathon?

[09:07] <AlexDaniel> well, any other cool ideas?

[09:08] <AlexDaniel> there's one I have in mind

[09:08] <jmerelo> AlexDaniel: shoot

[09:09] <AlexDaniel> I'm not sure how I feel about this one, but

[09:09] <AlexDaniel> there's https://code-golf.io/ and perl6 solutions used to dominate in most answers, but not anymore. What if we organize community code golfing?

[09:09] <jmerelo> AlexDaniel: probably OK... but not for this one

[09:10] <jmerelo> AlexDaniel: table it for next, maybe

[09:11] <AlexDaniel> how come this shit idea will become better next month? :)

[09:11] <jmerelo> AlexDaniel: we can talk it out in Riga :-)

[09:12] <AlexDaniel> we already have a guide, fwiw https://github.com/AlexDaniel/raku-golf-cheatsheet

[09:12] <jmerelo> AlexDaniel: we would need something specific for the hackathon... and also a repo that Squashable can follow.

[09:12] <jmerelo> AlexDaniel: we can talk it out, as said before.

[09:13] <AlexDaniel> so https://github.com/AlexDaniel/raku-golf-cheatsheet is the repo

[09:13] <AlexDaniel> file a ticket for each hole, start a discussion

[09:13] <AlexDaniel> I can prepopulate most of the tickets with my solutions so that we have a starting point for most of them

[09:14] <jmerelo> AlexDaniel: So you prefer that one to docs?

[09:14] <AlexDaniel> I'm still trying to brainstorm more ideas :)

[09:14] <AlexDaniel> next month we'll likely have one squashathon about old-issue-tracker (which doesn't exist yet but hopefully will soon)

[09:17] <timotimo> btw the only change on modules.perl6.org that isn't in the repo is this:

[09:17] <timotimo> -    $self->plugin('PODRenderer') if $self->mode eq 'development';

[09:17] <timotimo> +   #$self->plugin('PODRenderer') if $self->mode eq 'development';

[09:20] <jmerelo> timotimo: OK

[09:21] <jmerelo> AlexDaniel: I'd rather have the doc one

[09:21] <jmerelo> AlexDaniel: we still need help for the documentation, and there's not been a doc squashathon for a long time

[09:22] *** zakharyas left
[09:22] *** pat_js joined
[09:25] *** irdr joined
[09:28] <Geth> ¦ doc: c8288ae391 | (JJ Merelo)++ | doc/Language/contexts.pod6

[09:28] <Geth> ¦ doc: Minor correction

[09:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c8288ae391

[09:28] <Geth> ¦ doc: 7256cf354d | (JJ Merelo)++ | util/issue-with-all-pod6.p6

[09:28] <Geth> ¦ doc: Generates an issuable list of files

[09:28] <synopsebot> Link: https://doc.perl6.org/language/contexts

[09:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7256cf354d

[09:29] *** AlexDaniel` joined
[09:36] <Xliff> say ++$

[09:36] <evalable6> Xliff, rakudo-moar d1f9d2848: OUTPUT: «1␤»

[09:36] <jmerelo> AlexDaniel: we still need to do the modules.perl6.org squashathon. Maybe leave it for later instead of deleting it...

[09:37] *** Black_Ribbon left
[09:38] <AlexDaniel> jmerelo: I don't get it. Why do we need to do it if it makes no sense?

[09:38] <AlexDaniel> if some shit needs to be done it doesn't mean we should have a squashathon about it

[09:38] <AlexDaniel> for you, what's the point of doing squashathons?

[09:40] *** Matthew[m] joined
[09:40] *** EuAndreh[m] joined
[09:40] *** lance_w[m] joined
[09:40] *** sergiotarxz[m] joined
[09:40] *** TravisRt2botio[m joined
[09:40] *** rba[m] joined
[09:40] *** Guest7247 joined
[09:40] *** mack[m] joined
[09:40] *** Garland_g[m] joined
[09:40] *** Seance[m] joined
[09:40] *** Demos[m] joined
[09:40] *** folex joined
[09:40] *** matiaslina joined
[09:40] *** unclechu joined
[09:40] <jmerelo> AlexDaniel: mainly community

[09:41] <jmerelo> AlexDaniel: but also give some love to repos that don't get any, like that one.

[09:41] <jmerelo> AlexDaniel: Anyway, next squashathon has been tabled. I've created the issue, and put it in the table.

[09:41] <jmerelo> squashable6: status

[09:41] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 3 days and ≈18 hours (2019-08-03 UTC-14⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:42] <AlexDaniel> ok, cool

[09:43] <AlexDaniel> jmerelo: links are currently broken, I think a full url is required

[09:44] <jmerelo> AlexDaniel: oh, right

[09:44] <AlexDaniel> jmerelo: btw squashable will not tell which todo item was checked

[09:44] <AlexDaniel> I think the message will be “user X edited issues/2924” or something like that

[09:45] <jmerelo> AlexDaniel: yep, right. No problem, as long as there's a link to it. 

[09:48] <AlexDaniel> jmerelo: also maybe it has to say what proofreading means, like what should contributors look out for

[09:48] <AlexDaniel> broken links? grammar? issues in code examples?

[09:48] <AlexDaniel> correctness of the text itself?

[09:50] <jmerelo> AlexDaniel: OK

[09:52] <jmerelo> AlexDaniel: check it now

[09:52] *** Geth joined
[09:54] <AlexDaniel> maybe we need both rendered and non-rendered links?

[09:58] *** demanuel joined
[10:10] *** nightfrog joined
[10:13] <Geth> ¦ doc: c67873e457 | (JJ Merelo)++ | util/issue-with-all-pod6.p6

[10:13] <Geth> ¦ doc: Adding both links for @alexdaniel

[10:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c67873e457

[10:19] <Geth> ¦ whateverable/master: 4 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[10:19] <Geth> ¦ whateverable/master: bbac3e9a0f | Remove unnecessary newline

[10:19] <Geth> ¦ whateverable/master: 00dcefbb5e | Fix bot's name (Statisfiable)

[10:19] <Geth> ¦ whateverable/master: 8b040db115 | Temporarily revert the use of dynamic variables

[10:19] <Geth> ¦ whateverable/master: 422f0d158a | Make Greppable more forgiving

[10:19] <Geth> ¦ whateverable/master: review: https://github.com/perl6/whateverable/compare/e386853a23e9...422f0d158a06

[10:19] <AlexDaniel> ok I'm down to two uncommitted files \o/

[10:20] *** jmerelo left
[10:27] *** pat_js left
[10:37] *** dolmen left
[10:43] <Geth> ¦ whateverable: 3bde2a3ba5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Benchable.p6

[10:43] <Geth> ¦ whateverable: Commit latest Benchable usability fixes

[10:43] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/3bde2a3ba5

[10:45] *** sena_kun joined
[10:47] <Geth> ¦ whateverable: 9bf1bc4d19 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/build.p6

[10:47] <Geth> ¦ whateverable: Groundwork for bump triples

[10:47] <Geth> ¦ whateverable: 

[10:47] <Geth> ¦ whateverable: The idea is to make it possible to bisect NQP and MoarVM whenever we

[10:47] <Geth> ¦ whateverable: hit a bump. Unfortunately this work has never been finished, but

[10:47] <Geth> ¦ whateverable: committing it now anyway to get rid of uncommitted files on the

[10:47] <Geth> ¦ whateverable: server.

[10:47] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/9bf1bc4d19

[10:49] <AlexDaniel> goodnight, bots

[10:49] *** nativecallable6 left
[10:49] *** unicodable6 left
[10:49] *** statisfiable6 left
[10:49] *** releasable6 left
[10:49] *** squashable6 left
[10:49] *** undersightable6 left
[10:49] *** coverable6 left
[10:49] *** committable6 left
[10:49] *** evalable6 left
[10:49] *** quotable6 left
[10:49] *** bloatable6 left
[10:49] *** shareable6 left
[10:49] *** bisectable6 left
[10:49] *** benchable6 left
[10:49] *** greppable6 left
[10:49] *** reportable6 left
[10:49] *** notable6 left
[10:54] *** dpk left
[10:55] *** dpk joined
[10:59] *** rindolf left
[11:02] <timotimo> here's hoping the new rakudo version treats them well :)

[11:04] *** rindolf joined
[11:08] <AlexDaniel> timotimo: yeah, I hope so

[11:08] <dpk> greetings friends

[11:09] <AlexDaniel> timotimo: 2018.06-something was the first version that worked well enough

[11:09] <AlexDaniel> dpk: o/

[11:09] <timotimo> oh hai dpk 

[11:09] <dpk> after several years of only very sporadic maintenance, i've decided to finally take yoleaux offline

[11:09] <timotimo> were you the owner of yoleaux?

[11:09] <timotimo> oh, i guess you are .. or were

[11:09] <dpk> a friend of mine has a replacement bot which does basically the same stuff, called saxo

[11:09] <AlexDaniel> I'd prefer to run my own replacement

[11:10] <dpk> okie dokes then

[11:10] <timotimo> what do we usually use yoleaux for? message passing and last-seen, i think?

[11:10] <AlexDaniel> dpk: can we get all messages .told from our channels that were not delivered yet?

[11:11] <dpk> i can give you a CSV dump or something i guess

[11:11] <AlexDaniel> dpk: works for me, yes, that'd be lovely

[11:13] <lizmat> dpk++  # keeping yoleaux alive all those years

[11:13] <AlexDaniel> yes, yoleaux was extremely useful

[11:14] <timotimo> aye, it was very nice to have

[11:15] *** Cabanossi left
[11:22] <Xliff> dpk: Does that CSV include  .seen data?

[11:23] <AlexDaniel> that can be useful too

[11:23] <dpk> no, and i would be reluctant to give that information out for privacy reasons

[11:24] <dpk> AlexDaniel: i've PM'd you a link to the CSV file

[11:24] <dpk> wait, bugger, i messed up and forgot to include a column for who the message is actually for >_<

[11:24] <AlexDaniel> dpk: by any chance did you miss #moarvm channel?

[11:25] <dpk> oh, probably that too

[11:26] <AlexDaniel> dpk: what about only for those who were last seen on one of our channels?

[11:26] <dpk> hmm i could do that i think, yes

[11:28] <dpk> AlexDaniel: okay, fixed if you redownload the tells db from the same URL

[11:30] <AlexDaniel> dpk: yeah, that seems to be correct. Weirdly, Some messages are quoted while others are not, but I'll be able to work with that for sure

[11:33] <dpk> okay, done the seens too

[11:36] *** ChoHag joined
[11:37] <AlexDaniel> dpk: great! Thank you very much

[11:37] *** someuser joined
[11:37] *** someuser left
[11:39] <AlexDaniel> ah I see, they're quoted if there's a comma in the message. Cool

[11:40] <dpk> yeah, should be pretty standard CSV. i generated it with the CSV module from the Ruby standard library

[11:40] <dpk> i don't know the exact quoting rules

[11:41] <timotimo> can "just"™ use json instead

[11:41] <timotimo> it's a one-time thing anyway, isn't it?

[11:41] <AlexDaniel> it is

[11:41] <AlexDaniel> timotimo: fucking hell, not only it doesn't start, but the stacktrace is totally wrecked

[11:41] <timotimo> whateverable you mean?

[11:42] <AlexDaniel> yes

[11:42] *** [Sno] joined
[11:42] <timotimo> ouchies :)

[11:42] <AlexDaniel> now the error itself can be my fault, but

[11:42] <timotimo> throw me at the error

[11:43] <AlexDaniel> timotimo: https://gist.github.com/AlexDaniel/f0a935d4b0bf748085c5f3f016dd5766#file-wrong-file-L3

[11:43] <AlexDaniel>  in method selfrun at Bisectable.p6 line 176

[11:43] <AlexDaniel> that's the wrong file

[11:43] <lizmat> weekly: http://www.theperlfisher.com/index.php/2019/07/24/a-regex-amuse-bouche/

[11:43] <AlexDaniel> it should say in “method selfrun at lib/Whateverable.pm6 line 176”

[11:44] <lizmat> AlexDaniel: bot upgrade in progress ???

[11:44] <timotimo> hm, maybe backup all the precomp stuff and blow it away?

[11:44] <AlexDaniel> lizmat: yes

[11:44] <lizmat> okidoki

[11:44] <AlexDaniel> lizmat: sorry for that, had to be done one day :)

[11:44] <timotimo> i.e. see if blowing it away makes it work, but keep stuff around so we can figure out the error better

[11:44] <lizmat> AlexDaniel: no pb

[11:44] <lizmat> (yet)

[11:44] <lizmat> :-)

[11:44] <lizmat> no pressure  :-)

[11:45] <AlexDaniel> timotimo: I wonder if there's any precomp at all, given that the process is not allowed to write most of the files

[11:46] <AlexDaniel> timotimo: ok, I just tried it again with writable precomp and it gives proper stacktrace now

[11:46] <timotimo> strange in any case. maybe we can reproduce wrong filenames in stacktraces whenever precomp can't be written

[11:47] *** lucasb joined
[11:50] <AlexDaniel> otherwise it's just an old config it seems

[11:50] *** dolmen joined
[11:55] *** bisectable6 joined
[11:56] <AlexDaniel> bisect: good=2016.02 bad 2016.03 say (^∞).grep({ last })[5]

[11:56] <bisectable6> AlexDaniel, Bisecting by output (old=2016.02 new=2016.03) because on both starting points the exit code is 0

[11:56] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/ba24f1ee1abf3fa30df4eb11d703966d

[11:56] <bisectable6> AlexDaniel, (2016-03-18) https://github.com/rakudo/rakudo/commit/6d120cab6d0bf55a3c96fd3bd9c2e841e7eb99b0

[11:56] <AlexDaniel> ok, that really works!

[11:57] <AlexDaniel> good sign so far

[11:59] *** bisectable6 left
[12:00] *** khisanth_ left
[12:00] *** statisfiable6 joined
[12:00] *** robertle left
[12:00] *** notable6 joined
[12:01] *** committable6 joined
[12:01] *** bloatable6 joined
[12:01] *** squashable6 joined
[12:01] *** ChanServ sets mode: +v squashable6

[12:01] *** reportable6 joined
[12:01] <Geth> ¦ whateverable: 6b2edebaa1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META6.json

[12:01] <Geth> ¦ whateverable: Add missing dependency (Cro::HTTP::Client)

[12:01] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/6b2edebaa1

[12:01] <Geth> ¦ whateverable: 10ef566365 | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable@.service

[12:01] <Geth> ¦ whateverable: Adapt the service file for modern rakudobrew

[12:01] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/10ef566365

[12:01] *** evalable6 joined
[12:01] *** undersightable6 joined
[12:01] *** ChanServ sets mode: +v undersightable6

[12:02] *** bisectable6 joined
[12:02] *** ChanServ sets mode: +v bisectable6

[12:02] *** releasable6 joined
[12:02] *** ChanServ sets mode: +v releasable6

[12:02] *** quotable6 joined
[12:02] *** ChanServ sets mode: +v quotable6

[12:02] *** shareable6 joined
[12:02] *** robertle joined
[12:02] <AlexDaniel> weekly: http://www.theperlfisher.com/index.php/2019/07/24/a-regex-amuse-bouche/

[12:02] <notable6> AlexDaniel, Noted! (weekly)

[12:03] <AlexDaniel> lizmat: we're back up!

[12:03] <lizmat> whee!   AlexDaniel++

[12:03] <AlexDaniel> on the latest rakudo and also using the latest version of whateverable :)

[12:03] <AlexDaniel> so some bot updates too

[12:03] <AlexDaniel> for example

[12:03] *** nativecallable6 joined
[12:03] <AlexDaniel> notable6: some very important note here!

[12:03] <notable6> AlexDaniel, Noted! (weekly)

[12:03] <AlexDaniel> see how it put it into the weekly instead of “some”? :)

[12:04] *** benchable6 joined
[12:04] *** ChanServ sets mode: +v benchable6

[12:04] <AlexDaniel> notable6: (↑ that was just a bot test, nevermind)

[12:04] <notable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[12:04] <AlexDaniel> notable6: weekly (↑ that was just a bot test, nevermind)

[12:04] <notable6> AlexDaniel, Noted! (weekly)

[12:04] *** unicodable6 joined
[12:04] *** ChanServ sets mode: +v unicodable6

[12:04] *** greppable6 joined
[12:04] *** coverable6 joined
[12:04] *** ChanServ sets mode: +v coverable6

[12:04] <AlexDaniel> might still need some improvements though :)

[12:04] <AlexDaniel> notable6: uptime

[12:04] <notable6> AlexDaniel, 4 minutes and 50 seconds, 218.121094MiB maxrss. This is Rakudo version 2019.07.1-94-gd1f9d2848 built on MoarVM version 2019.07.1-50-gb614a7b4d implementing Perl 6.d.

[12:05] <AlexDaniel> I'm hoping that they'll be leaking less too

[12:07] <timotimo> AlexDaniel: how about setting up a little bit of monitoring that regularly logs info from the bots?

[12:07] *** Cabanossi joined
[12:08] <AlexDaniel> timotimo: I think MasterDuke once did a thing that logs maxrss of every bot after running the tests

[12:08] <AlexDaniel> I don't think it works…

[12:08] <AlexDaniel> but what kind of info do you want?

[12:09] <timotimo> dunno, as much as possible :P

[12:09] *** dolmen left
[12:09] <timotimo> how much data did it receive over the sockets, how much did it send, how many tasks did it do, a distribution of how much time it spent on each task

[12:09] <timotimo> etc etc

[12:09] <timotimo> how much cpu time it spent in total

[12:09] <timotimo> how many threads spawned

[12:10] <lizmat> weekly: http://blogs.perl.org/users/damian_conway/2019/07/chopping-substrings.html

[12:10] <notable6> lizmat, Noted! (weekly)

[12:10] <AlexDaniel> timotimo: do you want to calculate carbon footprint of these bots or something? xD

[12:11] <AlexDaniel> but yeah, that kind of monitoring would be great to have

[12:11] <timotimo> they are very good examples of very long running processes that regularly get fed different amounts of data

[12:11] <AlexDaniel> who knows what it reveals

[12:13] *** khisanth_ joined
[12:15] *** dolmen joined
[12:21] *** pat_js joined
[12:22] *** ChoHag left
[12:40] *** pamplemousse joined
[12:40] *** xinming_ joined
[12:43] *** ChoHag joined
[12:43] *** xinming left
[12:48] *** robertle left
[12:48] <Geth> ¦ doc/master: 4 commits pushed by Coke++

[12:48] <Geth> ¦ doc/master: ae3efca924 | pass links test

[12:48] <Geth> ¦ doc/master: da2a9eecdc | whitespace

[12:48] <Geth> ¦ doc/master: fa57286fa7 | standardize brace/bracket

[12:48] <Geth> ¦ doc/master: c26adf4648 | remove duplicate word

[12:48] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/c67873e457ac...c26adf46489a

[12:52] *** satori__ joined
[12:54] *** robertle joined
[12:55] *** reach_satori_ left
[12:57] *** sena_kun left
[13:04] *** reach_satori_ joined
[13:04] *** st_elmo left
[13:05] <AlexDaniel> weekly: goodbye, yoleaux! https://colabti.org/irclogger/irclogger_log/perl6?date=2019-07-29#l367 (whateverable replacement is coming soon)

[13:05] <notable6> AlexDaniel, Noted! (weekly)

[13:07] *** satori__ left
[13:09] *** reach_satori_ left
[13:17] *** pat_js left
[13:20] *** nightfrog left
[13:20] *** nightfrog joined
[13:23] *** Cabanossi left
[13:25] *** Cabanossi joined
[13:27] *** scimon joined
[13:27] *** pat_js joined
[13:35] <chloekek> AlexDaniel: timotimo: I think that having more monitoring and alerting for the ecosystem in general would be nice to have.

[13:35] <timotimo> yeah

[13:35] <timotimo> we used to have a collectd on p6c.org

[13:35] <timotimo> then the machine died

[13:35] <AlexDaniel> chloekek: what do you mean by the ecosystem?

[13:36] <chloekek> AlexDaniel: the various websites and robots.

[13:37] <AlexDaniel> rba: ↑ something to note about the infrastructure and stuff :)

[13:38] <chloekek> I'ven't used collectd but I've used Prometheus which can do statistics collection, queries and alerts.

[13:39] <timotimo> and prometheus is relatively simple to implement ad-hoc on the service side

[13:40] <timotimo> maybe put something a little smaller than a Cro on there

[13:41] <timotimo> though you can get that up without a cro router i'm sure

[13:41] <timotimo> so maybe that's actually small enough to have not such a significant impact

[13:41] <timotimo> also, some of the irc bots already have a http part for stuff like github notifications

[13:41] <chloekek> Crometheus.

[13:41] <rba> AlexDaniel: collectd noted. Guess it was an irc bot?

[13:41] <timotimo> oooh

[13:41] <AlexDaniel> no

[13:41] <timotimo> no, collectd is a server process and there's different web frontends

[13:42] <timotimo> i guess it's a little bit like munin?

[13:42] <timotimo> though grafana could be nicer for now?

[13:42] *** zakharyas joined
[13:44] <rba> timotimo: can I come back to you about this later this week?

[13:45] <timotimo> hm

[13:45] <timotimo> not sure if we'll use collectd again

[13:47] <chloekek> Is there a public overview of the servers and what they run/host?

[13:48] <AlexDaniel> chloekek: I'm hoping that https://github.com/perl6/problem-solving/issues/68 will be it

[13:53] <cpan-p6> New module released to CPAN! Async::Workers (0.0.8) by 03VRURG

[13:55] <AlexDaniel> rba: ↑ also note that, it's really important in my opinion

[13:55] <AlexDaniel> part of our previous problems is that we simply had no idea what's out there

[13:56] <rba> AlexDaniel: noted :-)

[14:00] *** woolfy joined
[14:01] *** domidumont left
[14:02] <chloekek> AlexDaniel: thanks

[14:19] *** zakharyas1 joined
[14:20] *** zakharyas left
[14:21] * chloekek 's been more interested in sysadmin lately.

[14:22] <timotimo> maybe you'd like to hang out in ##perl6-infra 

[14:23] <timotimo> it's currently rather low-traffic

[14:25] <chloekek> Thanks.

[14:30] *** pat_js left
[14:32] *** ChoHag left
[14:33] *** Guest7247 is now known as tyil[m]

[14:33] *** tyil[m] is now known as Guest48765

[14:39] *** pat_js joined
[14:39] *** pamplemousse left
[14:54] *** tokomer joined
[15:16] *** pamplemousse joined
[15:24] *** chloekek left
[15:26] *** robertle left
[15:35] *** zakharyas1 left
[15:35] *** patrickb left
[15:36] *** Black_Ribbon joined
[15:38] *** domidumont joined
[15:40] *** nightfrog left
[15:40] *** nightfro` joined
[15:40] *** pat_js left
[15:40] *** nightfro` is now known as nightfrog

[15:45] *** MilkmanDan left
[15:47] *** MilkmanDan joined
[15:55] *** [Sno] left
[15:58] *** pamplemousse left
[15:59] <cpan-p6> New module released to CPAN! Gnome::GObject (0.13.14) by 03MARTIMM

[16:03] *** Sgeo_ joined
[16:05] *** Sgeo__ left
[16:11] *** dolmen left
[16:14] *** demanuel left
[16:23] *** pamplemousse joined
[16:27] *** dolmen joined
[16:30] *** Sgeo__ joined
[16:30] *** scimon left
[16:32] *** Sgeo_ left
[16:33] *** robertle joined
[16:35] *** mowcat joined
[16:37] *** dolmen left
[16:40] *** dakkar left
[16:41] *** jmerelo joined
[16:48] <jmerelo> squashable6: status

[16:48] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 3 days and ≈11 hours (2019-08-03 UTC-12⌁UTC+20). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:49] *** nightfrog left
[16:50] *** nepugia joined
[16:50] *** nightfrog joined
[17:00] *** nightfrog left
[17:00] *** nightfrog joined
[17:01] *** nepugia left
[17:06] *** jmerelo left
[17:15] *** dolmen joined
[17:19] *** rindolf left
[17:25] *** wildtrees joined
[17:27] *** wildtrees left
[17:28] *** wildtrees joined
[17:33] *** dolmen left
[17:35] *** wildtrees left
[17:36] *** wildtrees joined
[17:40] *** demanuel joined
[17:42] *** Sgeo_ joined
[17:45] *** Sgeo__ left
[17:54] *** molaf joined
[18:00] *** reportable6 left
[18:00] *** reportable6 joined
[18:00] *** ChanServ sets mode: +v reportable6

[18:04] *** natrys joined
[18:11] *** tokomer left
[18:15] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/07/29/2019-30-released-again/

[18:15] *** nightfrog left
[18:20] *** nightfrog joined
[18:30] *** cpan-p6 left
[18:30] *** cpan-p6 joined
[18:30] *** cpan-p6 left
[18:30] *** cpan-p6 joined
[18:37] <cpan-p6> New module released to CPAN! Gnome::Gdk3 (0.14.6) by 03MARTIMM

[18:37] *** chloekek joined
[18:49] *** domidumont left
[18:54] *** mowcat left
[19:04] *** [Sno] joined
[19:06] *** pamplemousse left
[19:16] <vrurg> No more .ask for a while...?

[19:19] *** wildtrees left
[19:25] <vrurg> SmokeMachine: ping

[19:25] <SmokeMachine> vrurg: pong

[19:26] <vrurg> I was thinking about releasing my hash in DB thing. But is there a way to provide table name at run time for a model?

[19:27] *** rindolf joined
[19:28] <SmokeMachine> vrurg: runtime? the only way to change the table name I know is `is table<new_name>` and maybe `method ^table(|) { "new_name" }` (that I'm not sure if it works...)

[19:28] <discord6> <Nobody> I have a beginner question: how can I append to a string?

[19:29] <discord6> <Nobody> I could not find anything on the doc, I might be searching for the wrong keywords

[19:29] *** pamplemousse joined
[19:30] <vrurg> SmokeMachine: it won't make sense releasing the model as a module because people would have different view over the table naming.

[19:30] <SmokeMachine> but if this second option work, someone could do `method ^table($, $name?) { state $table-name = $_ with $name; $table-name }`

[19:30] <discord6> <Nobody> Nevermind, I should have searched for concatenation instead of appending

[19:30] <SmokeMachine> vrurg: let me test...

[19:32] <vrurg> SmokeMachine: I guess it doesn't. It takes type name only.

[19:33] *** pamplemousse left
[19:34] *** cpage_ joined
[19:35] <chloekek> p6: enum Foo <Foo Bar>; Foo::Foo.perl.say; Foo::Bar.perl.say

[19:35] *** evalable6 left
[19:35] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Foo::Foo␤Foo::Bar␤»

[19:35] <chloekek> p6: enum Foo <Foo Bar>; Foo::kv.perl.say;

[19:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Could not find symbol '&kv'␤  in block <unit> at <tmp> line 1␤␤»

[19:36] <chloekek> p6: enum Foo <Foo Bar>; Foo::.kv.perl.say;

[19:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «("Bar", Foo::Bar, "Foo", Foo::Foo).Seq␤»

[19:36] <chloekek> p6: enum Foo::Bar <Foo Bar Baz>; Foo::Bar::.kv.say

[19:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Foo Foo Baz Baz Bar (Bar))␤»

[19:36] <chloekek> Why is (Bar) parenthesized here?

[19:36] <chloekek> p6: enum Foo::Bar <Foo Bar Baz>; Foo::Bar::Bar.perl.say

[19:36] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Foo::Bar␤»

[19:37] <chloekek> p6: enum Foo::Bar <Foo Bar Baz>; Foo::Bar::Baz.perl.say

[19:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Foo::Bar::Baz␤»

[19:37] <vrurg> chloekek: I gues because it picks up Bar symbol from Foo namespace

[19:37] *** cpage_ is now known as cpage

[19:37] <SmokeMachine> vrurg: https://www.irccloud.com/pastebin/vyYJ8B0U/

[19:37] *** evalable6 joined
[19:38] <chloekek> vrurg: is that a bug?

[19:38] <ugexe> no

[19:39] <ugexe> m: class Foo::Bar { }; say GLOBAL::Foo;

[19:39] *** evalable6 left
[19:39] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Foo)␤»

[19:40] <vrurg> SmokeMachine: perhaps making table() a multi and have a variant with multi table(Str:D $name) ? So, for a used it'd be just Model.^table: "my name"?

[19:40] <vrurg> *for a user

[19:41] <SmokeMachine> vrurg:  https://www.irccloud.com/pastebin/9ANBwwo1/

[19:42] <SmokeMachine> vrurg: yes, I think that's a good idea... but while that's not implemented, I think this would be a solution...

[19:42] <vrurg> SmokeMachine: aha, something like what I was thinking about for the last couple of minutes. :)

[19:44] *** evalable6 joined
[19:44] *** ChanServ sets mode: +v evalable6

[19:44] <vrurg> Fair enough. I'm not gonna work on it in a couple of days, perhaps. I have implemented to terrible design of own internal project that massive insertion of entries into a DB results in speed < 1 rec/sec whereas direct INSERT gives me 77 and Model.^create ends up with 17 recs/sec!

[19:45] <chloekek> p6: class Foo { }; Foo::Foo.say

[19:45] *** evalable6 left
[19:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Could not find symbol '&Foo'␤  in block <unit> at <tmp> line 1␤␤»

[19:45] <chloekek> p6: class Foo { class Foo { } }; Foo::Foo.say

[19:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Foo)␤»

[19:45] <vrurg> So, need to reconsider and redo a lot..

[19:45] <chloekek> p6: class Foo { class Foo { } }; say Foo::Foo === Foo

[19:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «False␤»

[19:45] <ugexe> m: class Foo::Bar { }; class Foo::Baz { }; say Foo::.keys

[19:45] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «(Bar Baz)␤»

[19:46] <chloekek> p6: enum Foo <Foo>; say Foo === Foo::Foo;

[19:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «False␤»

[19:46] <chloekek> p6: enum Foo <Foo>; say Foo::Foo.perl;

[19:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Foo::Foo␤»

[19:46] <chloekek> p6: enum Foo::Bar <Bar>; say Foo::Bar === Foo::Bar::Bar;

[19:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «False␤»

[19:46] <chloekek> p6: enum Foo::Bar <Bar>; say Foo::Bar::Bar.perl;

[19:46] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Foo::Bar::Bar␤»

[19:47] <chloekek> :/

[19:47] <ugexe> why are you expecting a stash for Foo::Bar to be identity equal to Foo::Bar::Bar ?

[19:47] <chloekek> Because:

[19:47] <chloekek> p6: enum Foo::Bar <Foo Bar Baz>; Foo::Bar::Bar.perl.say

[19:47] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Foo::Bar␤»

[19:48] <chloekek> I expect it to print Foo::Bar::Bar, like it prints Foo::Bar::Baz if you do this:

[19:48] <chloekek> p6: enum Foo::Bar <Foo Bar Baz>; Foo::Bar::Baz.perl.say

[19:48] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Foo::Bar::Baz␤»

[19:48] <ugexe> ah

[19:49] *** epony left
[19:49] *** evalable6 joined
[19:49] *** ChanServ sets mode: +v evalable6

[19:50] <ugexe> m: enum Foo::Bar <Foo Bar Baz>; say Bar === Foo::Bar::Bar

[19:50] *** evalable6 left
[19:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «False␤»

[19:50] <ugexe> m: enum Foo::Bar <Foo Bar Baz>; say Baz === Foo::Bar::Baz

[19:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «True␤»

[19:50] <ugexe> yeah i'd say thats a bug

[19:51] <chloekek> p6: enum Foo <Bla>; say Bla

[19:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Bla␤»

[19:51] <chloekek> Ah you can access the members without qualification.

[19:53] *** evalable6 joined
[19:53] <chloekek> Would be nice if there's a way to disable that.

[19:53] *** Sgeo__ joined
[19:57] *** Sgeo_ left
[19:57] *** robertle left
[19:59] <chloekek> p6: enum foo ('bar', 'baz'); bar.say

[19:59] *** evalable6 left
[19:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «bar␤»

[20:02] <chloekek> Oh well. :)

[20:04] *** evalable6 joined
[20:04] *** ayerhart left
[20:05] *** molaf left
[20:05] <ugexe> just use the FQN inside the enum

[20:06] <ugexe> although i guess that still leaves you with foo::foo::bar

[20:10] <chloekek> I'm not actually naming the member the same as the package, I just noticed it when experimenting.

[20:10] <chloekek> I have “enum Granite::Direction <West East North South Up Down>;”

[20:11] *** pecastro joined
[20:12] <cpan-p6> New module released to CPAN! Gnome::Gtk3 (0.17.9) by 03MARTIMM

[20:12] *** sena_kun joined
[20:13] <sena_kun> m: my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] }; say INIT now - now;

[20:13] *** evalable6 left
[20:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-0.00167835␤»

[20:13] <sena_kun> m: my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] }; say now - INIT now;

[20:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.0214331␤»

[20:13] <sena_kun> m: my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] }; say now - INIT now;

[20:13] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.0184006␤»

[20:14] <sena_kun> I know the code is useless, but does anyone have any ideas on how to make it faster?

[20:14] *** rindolf left
[20:14] *** epony joined
[20:16] <sena_kun> just saw a tweet saying that Perl 6 is like, erm, 39945.714286 times slower(!) than C, which is pretty ridiculous. tried the code myself and it is like 90 times slower than C, but not ~40_000.

[20:16] <sena_kun> replacing `for` with `loop` does not do a lot

[20:17] *** evalable6 joined
[20:18] *** reach_satori_ joined
[20:18] <timotimo> my perl6 search column in tweetdeck didn't pick up a tweet like that recently

[20:19] *** rindolf joined
[20:19] <sena_kun> timotimo, https://twitter.com/saito_ta/status/1155759758747373568

[20:19] <sena_kun> I am planning to write a gist with my measures and ask how did they measure it to be so bad

[20:20] <chloekek> m: my int @a[1000]; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] }; say INIT now - now;

[20:20] *** evalable6 left
[20:20] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-0.01370243␤»

[20:20] <timotimo> oh, that's what those numbers mean

[20:20] <sena_kun> this is a number of runs in a second

[20:20] <chloekek> Pre-allocate the array and Conway's light cone will be proud.

[20:21] <timotimo> chloekek: i think INIT now - now will have "now - now" inside the INIT block

[20:21] <chloekek> Ohh wait.

[20:21] <sena_kun> chloekek, erm, it did it worse for me. o.O

[20:21] <chloekek> m: my int @a[1000]; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] }; say now - INIT now;

[20:21] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.316234␤»

[20:21] *** rindolf left
[20:21] <chloekek> lmao

[20:22] <sena_kun> m: my int @a[]; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] }; say now - INIT now;

[20:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «Cannot create a  dimension array with only 0 dimensions␤  in block <unit> at <tmp> line 1␤␤»

[20:22] *** rindolf joined
[20:22] <sena_kun> m: my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] }; say now - INIT now;

[20:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.0109711␤»

[20:22] <chloekek> Maybe it doesn't optimize well if you use a shaped array.

[20:22] <chloekek> Oh hey, the C code is cheating. It uses undefined behavior.

[20:22] <sena_kun> yeah

[20:23] <chloekek> You can't += an uninitialized element, the compiler will just optimize that away and the program will do nothing.

[20:23] <timotimo> oh, shaped arrays are *super* slow

[20:23] <sena_kun> chloekek, it prints values with a print added, garbage ones, of course, can you somehow prove that the code is optimized away?

[20:24] <sena_kun> I am not a C hacker. :S

[20:24] *** evalable6 joined
[20:25] <timotimo> https://godbolt.org/z/Pr0rL2

[20:25] <timotimo> remove the ; there in the include line, i'm super tired right now, lol

[20:26] <timotimo> though that is C++, i should change it to 

[20:26] <timotimo> C

[20:27] <sena_kun> timotimo, so it does just ret if I remove print. LOL

[20:27] <sena_kun> that's just epic

[20:27] <timotimo> of course :)

[20:27] <sena_kun> ok, now I need to write a humble response...

[20:27] <chloekek> Also, % is slow if not optimized properly. If the RHS is constant you can always rewrite it to multiplications and bitshifts which are faster, but I don't know if MoarVM does that.

[20:27] <timotimo> chloekek: it doesn't, but you could teach it if you'd like!

[20:27] <timotimo> i can offer guidance

[20:28] <chloekek> That'd be fun. I'd have to read the paper again.

[20:29] <timotimo> https://lemire.me/blog/2019/02/08/faster-remainders-when-the-divisor-is-a-constant-beating-compilers-and-libdivide/ - i've seen this a couple of months ago and ever since i wanted it in moarvm

[20:29] <timotimo> though in the code in question it'll be important to know if it does the math with 64bit or with big integers

[20:30] <chloekek> p6: sub f { my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; my $before := now; f; my $after := now; say $after - $before;

[20:30] *** evalable6 left
[20:30] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.059757␤»

[20:30] <chloekek> p6: sub f { my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; for ^100 { f }; my $before := now; f; my $after := now; say $after - $before;

[20:30] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.002092␤»

[20:30] <chloekek> Gotta spesh that baby.

[20:31] <chloekek> p6: sub f { my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; for ^500 { f }; my $before := now; f; my $after := now; say $after - $before;

[20:31] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.0021146␤»

[20:32] <chloekek> p6: sub f { my int @a; for ^1000 { @a[$_] ⚛️+= @a[($_ + 3) % 1000] } }; for ^500 { f }; my $before := now; f; my $after := now; say $after - $before;

[20:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3sub f { my int @a; for ^1000 { @a[$_]7⏏5 ⚛️+= @a[($_ + 3) % 1000] } }; for ^500 {␤    expecting any of:␤        infix␤        infix stopper␤        sta…»

[20:33] *** evalable6 joined
[20:33] *** ChanServ sets mode: +v evalable6

[20:34] <timotimo> have you got experience with MVM_SPESH_LOG yet?

[20:35] <chloekek> Nope.

[20:35] <sena_kun> timotimo, can I leave a link at godbolt? I mean, will it persist?

[20:35] <timotimo> sena_kun: the share button offers "share on erddit" and "tweet", so i'd expect it to persist

[20:35] <sena_kun> oooh, nice, thanks!

[20:36] <timotimo> the long version of the url encodes everything in the url

[20:36] <timotimo> even the layout of the splits and what windows you have open

[20:37] *** reach_satori_ left
[20:37] <timotimo> p6: sub f { my int @a; for ^1000 { @a[$_] += @a.AT-POS(($_ + 3) % 1000) } }; for ^1_000 { f }; my $before := now; f; my $after := now; say $after - $before;

[20:37] *** evalable6 left
[20:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.0021872␤»

[20:37] <timotimo> p6: sub f { my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; for ^1_000 { f }; my $before := now; f; my $after := now; say $after - $before;

[20:37] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.002075␤»

[20:37] <timotimo> perhaps too short to be a good measurement

[20:37] <timotimo> p6: sub f { my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; for ^1_000 { f }; my $before := now; for ^100 { f }; my $after := now; say $after - $before;

[20:38] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.1537772␤»

[20:38] <timotimo> p6: sub f { my int @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; for ^1_000 { f }; my $before := now; for ^1_000 { f }; my $after := now; say $after - $before;

[20:38] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2.37775893␤»

[20:38] <timotimo> p6: sub f { my int @a; for ^1000 { @a[$_] += @a.AT-POS(($_ + 3) % 1000) } }; for ^1_000 { f }; my $before := now; for ^1_000 { f }; my $after := now; say $after - $before;

[20:38] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1.8682511␤»

[20:38] *** wildtrees joined
[20:40] *** evalable6 joined
[20:40] *** ChanServ sets mode: +v evalable6

[20:43] <chloekek> p6: use MONKEY-GUTS; sub f { my int @a; for ^1000 { my int $i = $_; my int $x = @a[($_ + 3) % 1000]; nqp::bindpos_i(@a, $i, $x) } }; for ^1_000 { f }; my $before := now; for ^1_000 { f }; my $after := now; say $after - $before;

[20:43] *** evalable6 left
[20:43] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1.4499136␤»

[20:43] <timotimo> on my machine my last one is more than three times faster

[20:45] <sena_kun> ok, responded...

[20:46] <sena_kun>  I wish people would do at least some research before posting ridiculous benchmarking results, others likely won't test them for themselves and just think "C good Perl 6 bad"...

[20:46] <timotimo> sena_kun: translate your tweets for us? :)

[20:47] <chloekek> I think the godbolt example optimized away because there are no side-effects and the result is unused.

[20:47] <sena_kun> well, one I posted is "Your C code just does nop, $url. Can you show us your Perl 6 code? Here is mine - $github-url. It is not nop, but after optimization is still close in speed to nop C".

[20:47] *** evalable6 joined
[20:47] *** ChanServ sets mode: +v evalable6

[20:48] <timotimo> what was the ratio between C and p6 in your final example? 55x slower in p6?

[20:48] <chloekek> Here we see that it is not actually optimized away if you use the array: https://godbolt.org/z/VlqKUN although I'm certain the compiler is allowed to.

[20:48] <sena_kun> and a comment is, again, "Can you, please, show us your Perl 6 code? Your C code uses undefined behavior and turns into nop".

[20:49] <chloekek> But do note how there are no division or modulo instructions in the assembly code, only multiplications, shifts and subtractions. :)

[20:49] <sena_kun> chloekek, well, the original poster code does not have usage, so...

[20:50] <sena_kun> timotimo, what's the degree, let me check... C worked like 0.001 for me, and my original code is 0.167 in real.

[20:50] <sena_kun> 0.003 real for C

[20:50] <timotimo> m: say 1 / 0.167

[20:50] *** evalable6 left
[20:50] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5.988024␤»

[20:51] *** evalable6 joined
[20:51] <sena_kun> m: 0.167 / 0.003

[20:51] *** evalable6 left
[20:51] <timotimo> 6x per second, that's not all that impressive

[20:51] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[20:51] <sena_kun> m: say 0.167 / 0.003

[20:51] <chloekek> What's really fun is if you initialize the array with zeroes, the compiler evaluates everything at compile time and then generates a single REP STOS instruction to fill the array with the results: https://godbolt.org/z/NZ5HN5 :D

[20:51] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «55.666667␤»

[20:51] <sena_kun> so around 55 times

[20:51] <timotimo> that's a good ratio between C and p6

[20:51] <chloekek> That probably runs in a handful of nanoseconds.

[20:53] <timotimo> ah, right, the code will literally never have anything but 0s in the result array

[20:53] <timotimo> it even uses 64bit stores so it only has to do it 500 times instead of a thousand, haha

[20:53] <sena_kun> well, I already said "the code is useless" part when I brought it here. :P

[20:53] <chloekek> It'd be more interesting if the array was filled with 1s or 3s or something.

[20:53] <timotimo> so actually we should also use 32bit int array on the perl6 side

[20:53] <timotimo> p6: sub f { my int32 @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; for ^1_000 { f }; my $before := now; for ^1_000 { f }; my $after := now; say $after - $before;

[20:53] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2.68645491␤»

[20:54] <timotimo> p6: sub f { my int32 @a; for ^1000 { @a[$_] += @a[($_ + 3) % 1000] } }; for ^1_000 { f }; my $before := now; for ^1_000 { f }; my $after := now; say $after - $before;

[20:54] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «2.0605061␤»

[20:54] <timotimo> the variability of timings on camelia is pretty oof.

[20:54] <chloekek> Here's one that does some interesting work: https://godbolt.org/z/58_peL if that can be translated to Perl 6 that'd be useful.

[20:55] *** evalable6 joined
[20:55] *** ChanServ sets mode: +v evalable6

[20:55] <sena_kun> .oO ( maybe I need to start a blog in Japanese explaining that Perl 6 is not _SO_ slow as people think, but moderately slow and sometimes times faster than your python stuff )

[20:56] <chloekek> p6: sub f { my int32 @a[1000] }; for ^1_000 { f }; my $before := now; for ^1_000 { f }; my $after := now; say $after - $before;

[20:56] *** evalable6 left
[20:56] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.02008364␤»

[21:00] *** evalable6 joined
[21:00] *** ChanServ sets mode: +v evalable6

[21:03] *** molaf joined
[21:04] <chloekek> p6: spurt('/tmp/foo.c', 'void f(int* a) { for (int i = 0; i < 1000; ++i) a[i] += a[(i + 3) % 1000]; }'); run('gcc', '/tmp/foo.c', '-shared', '-O3', '-std=c99', '-o', '/tmp/libfoo.so'); use NativeCall; sub f(CArray[int32] $a) is native('/tmp/libfoo.so') {*}; my @a := CArray[int32].new(0 xx 1000); my $before := now; for ^1_000 { f(@a) }; my $after := now; say $after - $before;

[21:04] *** evalable6 left
[21:04] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «0.01092471␤»

[21:05] <timotimo> aaaaaaaah :)

[21:05] <chloekek> camelia probably runs on a potato so we should also run the C code on the same machine.

[21:09] *** evalable6 joined
[21:12] <timotimo> one of those days you'll be able to get a camelia plushie that can run perl6

[21:14] *** dolmen joined
[21:17] * moritz got his first camelia plushie today. Thanks lizmat & woolfy! :D

[21:20] *** pamplemousse joined
[21:22] *** [particle]1 joined
[21:23] *** Cabanossi left
[21:24] *** [particle] left
[21:27] *** [particle] joined
[21:29] *** [particle]1 left
[21:29] *** pilne joined
[21:38] *** Cabanossi joined
[21:39] *** wildtrees left
[21:41] <pilne> so, old lappy died, and for various reasons i'm again stuck on windows, and i'm a bit confused at the download options for rakudo presented to me

[21:41] <Elronnd> pilne: https://rakudo.org/files

[21:42] <pilne> it has 2019.03.1, but it seems 2019.07.1 is current?

[21:42] <timotimo> rakudo star is a distribution of compiler + a collection of modules and docs and such

[21:42] <pilne> errr not 03.1, just .03

[21:42] <Elronnd> probably just not updated yet

[21:42] <timotimo> it's a separate release

[21:42] <timotimo> which will happen soon, hopefully

[21:42] <pilne> so, since i have nothing on here yet, patience would be a virtue?

[21:42] <pilne> :D

[21:43] <pilne> given the fixes i read

[21:43] <timotimo> it'd be enough to install the compiler-only thing

[21:43] <timotimo> just gotta download your own zef to install modules

[21:44] <pilne> i still feel so lost on windows compared to a linux, and timid almost, since i'm not sure i can fix things when i smeg them up

[21:46] <timotimo> ha, i know that feeling

[21:47] <pilne> i also noticed that the work on the jvm backend is "indeterminate" arrival, is the effort switching to use the truffle/graal framework? that would seem logical to me as someone who just reads about all this stuff too much

[21:48] <timotimo> there is an effort to do that, yeah

[21:48] <timotimo> but we have only few people who actually work on the jvm backend

[21:48] <pilne> yeah, i'm not that interested per-say, i was just kinda hoping those that were were embracing the new (seemingly easier?) way to approach it

[21:48] <pilne> i had java shoved down my throat academically in the 1.2 era....

[21:49] <pilne> i still have nightmares

[21:52] *** Sgeo_ joined
[21:55] *** Sgeo__ left
[21:56] <timotimo> i really want a very performant way to get the filename/lineno where my current function was called

[21:56] <timotimo> callframe.line doesn't give me the current line at the position the call was made, i think

[21:57] <timotimo> and Backtrace.new.list.skip(1).head gives me what i want, but is excruciatingly slow

[21:59] *** chloekek left
[22:07] *** dolmen left
[22:09] *** nepugia joined
[22:26] <woolfy> moritz++  Be happy with your Camelia!  May the force of the stuffed butterfly guide you through clear coding!

[22:28] *** natrys left
[22:29] *** nepugia left
[22:43] *** rindolf left
[22:50] *** nepugia joined
[23:06] *** lucasb left
[23:17] *** MilkmanDan left
[23:21] *** Sgeo__ joined
[23:24] *** pamplemousse left
[23:24] *** MilkmanDan joined
[23:24] *** pamplemousse joined
[23:24] *** Sgeo_ left
[23:26] *** Manifest0 left
[23:26] *** Sgeo joined
[23:27] *** Manifest0 joined
[23:28] <timotimo> https://cdn.discordapp.com/attachments/538774203378171935/605542047084052509/livecoding_cursor_marker_new.gif

[23:28] <timotimo> admire my perlsixing, please

[23:29] *** Sgeo__ left
[23:31] *** pecastro left
[23:32] *** nepugia is now known as nephele

[23:35] *** dolmen joined
[23:36] *** MilkmanDan left
[23:40] *** dolmen left
[23:45] <timotimo> (a good portion of the niceness of the tool is Xliff's contributions)

[23:48] *** |oLa|1 joined
[23:48] <vrurg> timotimo++

[23:48] <vrurg> What is it gonna be?

[23:48] <timotimo> depends what "it" you're refering to

[23:49] <timotimo> the "art" is a spaceship that'd go into a vertical scrolling spacey shooty game

[23:49] <vrurg> The universal question of life and everything... ;)

[23:50] *** MilkmanDan joined
[23:51] <vrurg> And the tool you're using? How are you going to use the perl code for drawing?

[23:51] <vrurg> It's hard to ask right questions by seeing just a window in action. :)

[23:51] <timotimo> it goes into the perl6 code that is the game

[23:53] <vrurg> Now the thing you told me the other day makes sense... Thrilled to see the result!

[23:54] <timotimo> oh, what thing was that?

[23:55] <SmokeMachine> vrurg: would you mind to create a issue asking for the way to set the table at run time, please?

[23:55] <SmokeMachine> vrurg: and thank you for your PRs!

[23:55] <Kaiepi> done my first real day of work for the networking grant, won't have anything to show for it until later this week though

[23:56] <SmokeMachine> PRs

[23:56] *** holyghost left
[23:56] *** holyghost joined
[23:59] *** aborazmeh joined
[23:59] *** aborazmeh left
[23:59] *** aborazmeh joined
