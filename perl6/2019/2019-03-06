[00:05] <El_Che>  AlexDaniel: did you find a replacement?

[00:05] *** cpan-p6 left
[00:06] *** cpan-p6 joined
[00:07] <AlexDaniel> El_Che: no. But according to this ticket some people volunteered for rakudo star: https://github.com/rakudo/star/issues/124

[00:07] <El_Che> It's not that related, imho

[00:08] <El_Che> other skillz needed :)

[00:08] <AlexDaniel> yeah, just that you can't make a star release without a rakudo release :)

[00:08] <AlexDaniel> I'll be around and I can run Blin and provide the data

[00:09] <AlexDaniel> even that is automated quite a bit through ecosystem-unbitrot repo

[00:09] <El_Che> I still fail to the usecase for Star even today :)

[00:09] <AlexDaniel> something something windows something

[00:10] <Seance[m]> I use it on Linux :P

[00:10] <AlexDaniel`> Seance: what distro do you use?

[00:10] <Seance[m]> OpenSUSE Tumbleweed

[00:12] <AlexDaniel`> but it has rakudo 2018.12?

[00:12] <Seance[m]> I use star because it was recommended for noobies

[00:12] <AlexDaniel`> hmm‚Ä¶

[00:12] <AlexDaniel`> star was really useful when perl6 was not packaged in most of the distros

[00:13] <AlexDaniel`> but that changed

[00:13] <AlexDaniel`> see https://repology.org/project/rakudo/versions

[00:13] <Seance[m]> I saw Rakudo in the repos

[00:13] <El_Che> Seance[m]: compiling stuff recommended for newbies? Damn kids :)

[00:13] <AlexDaniel`> also https://github.com/perl6/user-experience/issues/29

[00:14] <Seance[m]> <freenode_El_ "Seance: compiling stuff recommen"> Yeah, I think on the basis that it included the package manager/line noise maybe? 

[00:15] <Seance[m]> I'll replace it with the repo version when I'm back home (:

[00:17] <AlexDaniel`> woah, that quote looked really weird on IRC

[00:18] <AlexDaniel`> on debian you can install both perl6 and zef from the repos, if I'm not mistaken

[00:18] <AlexDaniel`> but on Tumbleweed I guess you'd have to install zef yourself, although again, I'm not 100% sure

[00:19] *** cpan-p6 left
[00:20] *** cpan-p6 joined
[00:26] *** netrino left
[00:28] *** woolfy left
[00:29] <patrickb> How bad would it be for rakudobrew to make all currently installed versions unusable on self-upgrade?

[00:37] *** Kaiepi left
[00:37] *** aborazmeh joined
[00:37] *** aborazmeh left
[00:37] *** aborazmeh joined
[00:37] *** Kaiepi joined
[00:37] *** cpan-p6 left
[00:40] <AlexDaniel> patrickb: *shrug*

[00:40] <AlexDaniel> users are not supposed to use it, and devs are meant to suffer‚Ä¶

[00:41] *** patrickz joined
[00:42] *** mowcat joined
[00:43] <patrickz> I'm giving rakudobrew a very thorough polish atm. I also changed the directory structure a little and moved the installed perls folder to a different location. Hence the breakage.

[00:44] <patrickz> Out of curiosity: Why is it that users are not supposed to use it?

[00:45] *** patrickb left
[00:46] *** w_richard_w joined
[00:48] *** pecastro left
[00:50] *** rindolf left
[00:55] *** w_richard_w left
[00:55] *** w_richard_w joined
[00:56] *** sortiz joined
[01:03] <patrickz> What I already implemented: A different mode of operation that doesn't use shims but modifies PATH in place. Autocomplete in bash. A "system" version that basically turns rakudobrew off.

[01:05] <patrickz> Still on my todo list: A "register" command that allows to register externaly built perl 6es in rakudobrew.

[01:06] <patrickz> Anyways. I'm off to bed.

[01:06] <patrickz> o/

[01:06] *** patrickz left
[01:10] *** Kaypie joined
[01:11] *** Kaiepi left
[01:16] *** zachk left
[01:22] *** drclaw2 joined
[01:22] *** aborazmeh left
[01:24] *** drclaw1 left
[01:26] *** K_ joined
[01:27] *** Merfont joined
[01:27] *** Kaypie left
[01:32] *** Kaypie joined
[01:32] *** Merfont left
[01:38] *** drclaw2 left
[01:39] *** cpan-p6 joined
[01:44] *** kaare_ left
[01:45] *** kaare_ joined
[01:52] *** cpan-p6 left
[01:53] *** cpan-p6 joined
[01:57] *** squashable6 left
[01:58] *** squashable6 joined
[01:58] *** ChanServ sets mode: +v squashable6

[02:06] *** Kaypie left
[02:07] *** Kaypie joined
[02:07] *** cpan-p6 left
[02:07] *** cpan-p6 joined
[02:09] *** molaf left
[02:15] *** K_ left
[02:19] *** w_richard_w left
[02:22] *** molaf joined
[02:22] *** cpan-p6 left
[02:22] *** cpan-p6 joined
[02:35] *** Kaypie left
[02:35] *** Merfont joined
[02:46] *** cpan-p6 left
[02:47] *** cpan-p6 joined
[02:48] *** TimToady left
[02:48] *** TimToady joined
[03:00] *** squashable6 left
[03:04] *** squashable6 joined
[03:10] *** cpan-p6 left
[03:10] *** cpan-p6 joined
[03:24] <Xliff> sena_kun, jnthn: I cannot get "say" output from CRO::HTTP::Client. Is that being redirected, or supressed, somehow?

[03:25] <Xliff> The reason I am asking is because say statements within those modules are not showing up, even though code progression indicates that they should be.

[03:27] <cpan-p6> New module released to CPAN! Smack (0.1.2) by 03HANENKAMP

[03:29] *** zacts joined
[03:30] *** Kaypie joined
[03:30] *** cpan-p6 left
[03:30] *** cpan-p6 joined
[03:32] *** Kaypie left
[03:33] *** Merfont left
[03:33] *** drclaw2 joined
[03:34] *** adu joined
[03:34] <MasterDuke> sacomo: setting the environment variable RAKUDO_MODULE_DEBUG=1 should give you more info about what precomp is doing. also, do you have some example code somewhere demonstrating the problem?

[03:35] *** Kaiepi joined
[03:47] *** Kaypie joined
[03:47] *** Kaiepi left
[03:55] *** cpan-p6 left
[03:55] *** cpan-p6 joined
[04:05] *** llfourn left
[04:10] *** cpan-p6 left
[04:11] *** cpan-p6 joined
[04:12] <zostay> m: my %x = a => 1, b => [1, 2]; class Foo { has Int $.a; has Int @.b; }; Foo.new(|%x)

[04:12] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Type check failed in assignment to @!b; expected Int but got Array ($[1, 2])‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:12] <zostay> is there a way to construct %x such that the array gets passed as a list rather than an item?

[04:14] <zostay> m: my $x = \(a => 1, b => [1, 2]); class Foo { has Int $.a; has Int @.b; }; Foo.new(|$x)

[04:14] <camelia> rakudo-moar 9770c1aa1: ( no output )

[04:15] <zostay> ... is one way

[04:17] <zostay> but if I'm building up the input bit by bit, I can't do that and %x.Capture doesn't get me there

[04:17] <zostay> I swear I'm still recovering from GLR

[04:22] *** Xliff left
[04:22] *** xinming_ left
[04:25] *** xinming_ joined
[04:35] *** cpan-p6 left
[04:35] *** cpan-p6 joined
[04:51] *** Kaypie left
[04:54] *** epony left
[04:56] *** Kaiepi joined
[04:59] *** cpan-p6 left
[05:01] *** cpan-p6 joined
[05:03] <MasterDuke> zostay: i'm not actually sure why your second example works, but the first fails because b just happens to contain only Ints, it's not typed as an Array of Ints

[05:07] <MasterDuke> i think the usual description for what perl6 does is "nominal typing". things have to explicitly match "by name", not just by what they contain

[05:25] <sortiz> m: my %x = a => 1, b => [1, 2]; class Foo { has Int $.a; has Int @.b; }; Foo.new(|( for %x.list { $_.freeze; $_ } ).Capture).perl.say

[05:25] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Foo.new(a => 1, b => Array[Int].new(1, 2))‚ê§¬ª

[05:25] <sortiz> A trick to decontainerize b

[05:28] *** jmerelo joined
[05:28] *** cpan-p6 left
[05:30] *** AlexDaniel left
[05:35] *** cpan-p6 joined
[05:47] *** curan joined
[05:48] <Geth> ¬¶ doc: aa1da7602a | (JJ Merelo)++ | doc/Type/Channel.pod6

[05:48] <synopsebot> Link: https://doc.perl6.org/type/Channel

[05:48] <Geth> ¬¶ doc: Clarify sentence, closes #2638

[05:48] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/aa1da7602a

[05:48] <jmerelo> releasable6: status

[05:48] <releasable6> jmerelo, Next release will happen when it's ready. 2 blockers. 319 out of 338 commits logged

[05:48] <releasable6> jmerelo, Details: https://gist.github.com/53dc3be90c992c8c9caffa532588226f

[05:50] *** KotH left
[05:50] *** KotH joined
[05:52] *** Kaiepi left
[05:53] *** Kaiepi joined
[05:54] *** Kaiepi left
[05:54] *** Kaiepi joined
[05:55] *** Kaiepi left
[05:58] *** aborazmeh joined
[05:58] *** aborazmeh left
[05:58] *** aborazmeh joined
[05:58] *** cpan-p6 left
[05:58] *** cpan-p6 joined
[05:59] *** Kaiepi joined
[06:00] *** zacts left
[06:07] <zostay> m: my %x = a => 1, b => [1, 2]; class Foo { has $.a; has @.b; }; dd Foo.new(|%x)

[06:07] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Foo.new(a => 1, b => [[1, 2],])‚ê§¬ª

[06:07] <zostay> MasterDuke: that exhibits the same break with expectation I'm having, I just use the typing to help demonstrate what I was aiming for.

[06:08] <zostay> m: my %x = a => 1, b => Array[Int].new(1, 2); class Foo { has Int $.a; has Int @.b; }; Foo.new(|%x)

[06:08] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Type check failed in assignment to @!b; expected Int but got Array[Int] (Array[Int].new(1, 2))‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[06:09] <sortiz> zostay, see my trick above to decontainerize the hash elements.

[06:11] <zostay> Yeah, I see it. I've found that using $ as my sigil tends to lead to fewer problems lately. Maybe I'll just stop using @ and % altogether because the containers really throw me off.

[06:15] <zostay> My own solution was more like: Foo.new(|%x, |%x<b>)

[06:18] *** w_richard_w joined
[06:19] *** adu left
[06:20] *** woolfy joined
[06:20] *** w_richard_w left
[06:21] <sortiz> m: my %x = a => 1, b => Array[Int].new(1, 2); class Foo { has Int $.a; has Int @.b; }; Foo.new(|( for %x { (.key => .value<>) }).Capture).perl.say

[06:21] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Foo.new(a => 1, b => Array[Int].new(1, 2))‚ê§¬ª

[06:23] *** cpan-p6 left
[06:23] *** cpan-p6 joined
[06:26] <sortiz> o/ #perl6

[06:26] *** molaf left
[06:26] *** Kaiepi left
[06:27] *** sortiz left
[06:27] *** woolfy left
[06:28] *** Kaiepi joined
[06:35] *** abraxxa joined
[06:37] *** cpan-p6 left
[06:37] *** cpan-p6 joined
[06:50] *** dominix left
[06:52] *** sena_kun joined
[06:57] *** aborazmeh left
[07:02] *** cpan-p6 left
[07:02] *** cpan-p6 joined
[07:05] *** domidumont joined
[07:06] *** domidumont left
[07:06] *** domidumont joined
[07:08] *** lizmat joined
[07:16] *** Kaiepi left
[07:16] *** Kaiepi joined
[07:16] *** ravenousmoose_ joined
[07:23] *** aborazmeh joined
[07:23] *** aborazmeh left
[07:23] *** aborazmeh joined
[07:28] *** cpan-p6 left
[07:28] *** cpan-p6 joined
[07:33] *** alpha6 left
[07:46] *** w17t joined
[07:46] *** w17t left
[07:46] *** w17t joined
[07:54] *** zacts joined
[07:58] *** lizmat left
[07:58] *** Kaiepi left
[07:59] *** Kaiepi joined
[08:04] *** zakharyas joined
[08:14] *** cpan-p6 left
[08:14] *** cpan-p6 joined
[08:15] *** patrickb joined
[08:15] *** aborazmeh left
[08:19] *** sena_kun left
[08:29] *** netrino joined
[08:32] *** antoniogamiz joined
[08:32] <antoniogamiz> hey :D

[08:33] *** cpan-p6 left
[08:40] <masak> antoniogamiz: hi

[08:42] <antoniogamiz> how should I document Complex exponentiation involving zeros (#2632 math section) if .exp method is inherited from Numeric?

[08:43] *** llfourn joined
[08:52] <masak> you mean like this?

[08:52] <masak> m: say (1 + i) ** 0

[08:52] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´1+0i‚ê§¬ª

[08:53] <masak> or

[08:53] <masak> m: say (1 + i).exp(0)

[08:53] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´0+0i‚ê§¬ª

[08:53] <masak> huh; maybe I don't understand .exp :)

[08:55] <masak> m: say 3.exp(2)

[08:55] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´8‚ê§¬ª

[08:55] <masak> ok, seems I had the arguments reversed.

[08:58] *** Kaiepi left
[09:00] <antoniogamiz> masak: yep I refer to 3.exp(2) for example

[09:00] *** Kaiepi joined
[09:01] <antoniogamiz> I'll add the infix:<**> method to Complex I think

[09:04] <jmerelo> antoniogamiz++

[09:05] *** rindolf joined
[09:12] *** reach_satori left
[09:18] *** zacts left
[09:19] *** ravenousmoose_ left
[09:20] *** antoniogamiz left
[09:20] *** ravenousmoose_ joined
[09:25] *** antoniogamiz joined
[09:26] *** dakkar joined
[09:34] <Geth> ¬¶ doc: antoniogamiz++ created pull request #2652: Complex exponentiation involving zeros #2632

[09:34] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2652

[09:36] <antoniogamiz> with that I think math section of #2632 is finished :D

[09:40] *** zacts joined
[09:41] *** reach_satori joined
[09:44] *** drclaw2 left
[09:44] *** netrino left
[09:50] *** reach_satori left
[09:58] *** zacts left
[09:59] *** zacts joined
[10:18] *** nataraj_ joined
[10:29] *** Kaiepi left
[10:32] *** Kaiepi joined
[10:40] *** ravenousmoose_ left
[10:40] *** ravenousmoose_ joined
[10:43] *** ExtraCrispy left
[11:05] <jmerelo> antoniogamiz: not until you address the comments :-)

[11:05] *** domidumont left
[11:25] *** zacts left
[11:33] *** Kaiepi left
[11:33] *** Kaiepi joined
[11:38] *** sergot left
[11:38] *** sergot joined
[11:39] *** nataraj_ left
[11:44] *** zakharyas left
[11:48] *** scimon joined
[11:49] *** lizmat joined
[11:51] *** cpan-p6 joined
[11:54] *** nataraj_ joined
[11:56] *** mowcat left
[12:01] *** reach_satori joined
[12:06] *** cpan-p6 left
[12:06] *** cpan-p6 joined
[12:07] *** reach_satori left
[12:08] *** Black_Ribbon left
[12:16] *** lizmat_ joined
[12:17] *** reach_satori joined
[12:17] *** lizmat left
[12:20] *** lizmat_ is now known as lizmat

[12:21] *** cpan-p6 left
[12:21] *** cpan-p6 joined
[12:26] *** lizmat left
[12:32] *** sena_kun joined
[12:35] *** lucasb joined
[12:40] *** domidumont joined
[12:55] *** wictory[m] left
[12:58] *** antoniogamiz left
[13:00] *** epony joined
[13:07] *** cpan-p6 left
[13:07] *** cpan-p6 joined
[13:08] *** woolfy joined
[13:18] *** reach_satori left
[13:32] *** cpan-p6 left
[13:32] *** cpan-p6 joined
[13:36] *** nataraj_ left
[13:39] *** woolfy left
[13:43] *** lizmat joined
[13:45] *** lizmat left
[13:45] *** lizmat_ joined
[13:47] *** zakharyas joined
[13:51] *** cpan-p6 left
[13:51] *** cpan-p6 joined
[14:02] *** lizmat_ left
[14:03] *** w17t left
[14:09] *** cpan-p6 left
[14:11] *** cpan-p6 joined
[14:11] *** cpan-p6 left
[14:12] *** cpan-p6 joined
[14:25] *** kensanata left
[14:36] *** cpan-p6 left
[14:36] *** cpan-p6 joined
[14:50] *** cpan-p6 left
[14:51] *** curan left
[14:51] *** cpan-p6 joined
[14:52] *** kensanata joined
[14:55] *** woolfy joined
[15:06] *** cpan-p6 left
[15:06] *** cpan-p6 joined
[15:14] *** nataraj_ joined
[15:30] *** cpan-p6 left
[15:30] *** cpan-p6 joined
[15:30] *** ExtraCrispy joined
[15:41] <xinming_> m: class T { has @!a; method test { @!a[* - 1].perl.say; } }; T.new(:a<x y z>).test();

[15:41] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Failure.new(exception => X::OutOfRange.new(what => "Effective index", got => -1, range => "0..^Inf", comment => Any), backtrace => Backtrace.new)‚ê§¬ª

[15:42] <xinming_> m: my @a = <x y z>; (@a[* - 1 ]).perl.say;

[15:42] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´"z"‚ê§¬ª

[15:42] <xinming_> Are these bugs?

[15:43] <xinming_> m: class T { has @!a; method test { @!a[* - 1].perl.say; }; submethod BUILD (@!a) { } }; T.new(:a<x y z>).test();

[15:43] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in submethod BUILD at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:43] <xinming_> m: class T { has @!a; method test { @!a[* - 1].perl.say; }; submethod BUILD (@!a) { } }; T.new(<x y z>).test();

[15:43] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Default constructor for 'T' only takes named arguments‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:43] <xinming_> m: class T { has @!a; method test { @!a[* - 1].perl.say; }; submethod BUILD (@!a) { } }; T.new(:a<x y z>).test();

[15:43] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in submethod BUILD at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:43] <xinming_> m: class T { has @!a; method test { @!a[* - 1].perl.say; }; submethod BUILD (:@!a) { } }; T.new(:a<x y z>).test();

[15:43] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´"z"‚ê§¬ª

[15:44] <xinming_> hmm, My problem, ignore me

[15:45] *** cpan-p6 left
[15:45] *** reach_satori joined
[15:46] *** cpan-p6 joined
[15:52] *** reach_satori_ joined
[15:54] *** reach_satori left
[15:55] <masak> xinming_: the decision (long ago) to make private attrs not initializable through the default .new keeps haunting us. I'm still not sure it was the right call, and I'm very sure it's surprising to people.

[15:55] <masak> yes, it would expose the names of private attrs to the called. I'm just not sure that's worse than what we have now

[16:00] *** cpan-p6 left
[16:01] *** cpan-p6 joined
[16:03] <Kaiepi> i sorted out the unfinished business i had so i'll be able to start my grant work later today!

[16:12] <sena_kun> \o/

[16:13] <sena_kun> Kaiepi++

[16:15] *** cpan-p6 left
[16:16] *** cpan-p6 joined
[16:16] *** patrickb left
[16:16] *** molaf joined
[16:31] *** AlexDaniel joined
[16:37] <SmokeMachine> jnthn: where should I open a issue for comma?

[16:37] *** cpan-p6 left
[16:38] *** cpan-p6 joined
[16:38] <SmokeMachine> .tell jnhtn where should I open a issue for comma?

[16:38] <yoleaux> SmokeMachine: I'll pass your message to jnhtn.

[16:39] <SmokeMachine> .tell jnthn its saying that there are some errors here... https://usercontent.irccloud-cdn.com/file/oLeldR5h/image.png

[16:39] <yoleaux> SmokeMachine: I'll pass your message to jnthn.

[16:43] <sena_kun> there are indeed errors, as `model` is a custom MOP-created type of class, I suspect. So while actual Perl 6 implementation during compilation process knows the keyword is correct as it is in the symbol table(simply speaking), our parser has no way to do that as we cannot execute code during parsing.

[16:45] <sena_kun> we do support `monitor` though

[16:47] *** MasterDuke left
[16:51] <sena_kun> SmokeMachine, about the feedback.

[16:51] <sena_kun> you can create an account on the website and then use our feedback form.

[16:52] *** molaf left
[16:54] <sena_kun> SmokeMachine, you want to start from "Buy" button, which will help you to create an account, and then you just don't make the actual subscription if you want to play out with community version for now.

[16:54] <SmokeMachine> sena_kun: any way to open a PR to add model keyword?

[16:56] <sena_kun> SmokeMachine, how do you plan to create a PR without sources available? A bug report/issue can be opened using the feedback form, so 1)create an account; 2)use it.

[16:56] <SmokeMachine> sena_kun: :( good point...

[16:56] <SmokeMachine> Ill do it...

[16:57] <sena_kun> SmokeMachine, you can ask me if there are any questions.

[16:58] *** cpan-p6 left
[16:59] *** cpan-p6 joined
[17:00] *** abraxxa left
[17:05] *** kurahaupo joined
[17:11] <Altreus> Is there magic I can do to debug what a function returns without messing with every single return statement?

[17:12] <sena_kun> my $foo = func(); note $foo.^name?

[17:12] <sena_kun> or $foo.WHAT if you want, but `^name` is better.

[17:12] <sena_kun> or you meant something other than that?

[17:12] <Altreus> So like

[17:13] <Altreus> If I use the function in many places I have to fudge with the calls

[17:13] <Altreus> And if the function has a few return statements I have to fudge with those

[17:13] <Altreus> I thought, maybe there's some sort of phaser that can see the return value just before the function actually returns it

[17:14] <Altreus> That way I don't have to add debug to multiple places, be it the call sites or the return parts

[17:14] <sena_kun> have you considered using a wrapper?

[17:15] <sena_kun> I mean, give me a second...

[17:15] <sena_kun> https://docs.perl6.org/language/functions#index-entry-dispatch_wrapped_routines <- see this.

[17:16] <tobs> m: sub f { rand }; &f.wrap({ my $res = callsame; say "f returned $res this time"; $res }); say f  # sena_kun was faster

[17:16] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´f returned 0.168257101076411 this time‚ê§0.168257101076411‚ê§¬ª

[17:16] <Altreus> ah yeah this could do it!

[17:16] <sena_kun> you can possibly do `$func.wrap({ my $res = callsame($foo-args); note $res; return $res; })` and just use it.

[17:16] <Altreus> thanks :)

[17:16] <sena_kun> oops, I am not so fast. :)

[17:16] <sena_kun> but the code is cooler than my pseudocode, so tobs++

[17:17] <Altreus> I knew perl6 wouldn't let me down :D

[17:17] *** ayerhart left
[17:18] *** woolfy left
[17:18] <Altreus> and I found the (a) bug, nice

[17:18] <Altreus> gonna have to remember this

[17:22] *** cpan-p6 left
[17:23] *** cpan-p6 joined
[17:23] *** scimon left
[17:41] *** mowcat joined
[17:50] *** kensanata left
[17:59] *** cpan-p6 left
[18:00] *** cpan-p6 joined
[18:07] <Kaiepi> .tell timotimo you've done networking work right? can you take a look at https://github.com/rakudo/rakudo/issues/2733 and comment on it?

[18:07] <yoleaux> Kaiepi: I'll pass your message to timotimo.

[18:11] *** zakharyas left
[18:15] *** cpan-p6 left
[18:16] *** cpan-p6 joined
[18:29] *** cpan-p6 left
[18:30] *** cpan-p6 joined
[18:31] *** domidumont left
[18:47] *** cpan-p6 left
[18:47] *** cpan-p6 joined
[18:55] *** Averna joined
[18:59] *** abraxxa joined
[18:59] *** abraxxa left
[19:00] *** abraxxa joined
[19:02] *** cpan-p6 left
[19:02] *** cpan-p6 joined
[19:03] *** Averna left
[19:04] *** abraxxa left
[19:05] *** PavelB is now known as or

[19:06] *** or is now known as PavelB

[19:14] *** dakkar left
[19:16] *** cpan-p6 left
[19:16] *** cpan-p6 joined
[19:19] *** abraxxa joined
[19:28] *** MidCheck left
[19:31] *** cpan-p6 left
[19:31] *** cpan-p6 joined
[19:33] *** domidumont joined
[19:37] *** Ekho left
[19:37] *** ravenousmoose joined
[19:40] *** molaf joined
[19:46] *** ferreira left
[19:46] *** cpan-p6 left
[19:47] *** cpan-p6 joined
[19:50] *** Averna joined
[19:54] *** zakharyas joined
[19:56] *** domidumont left
[19:57] <Geth> ¬¶ doc: 4f333647cc | cfa++ | doc/Language/syntax.pod6

[19:57] <Geth> ¬¶ doc: Typo.

[19:57] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4f333647cc

[19:57] <synopsebot> Link: https://doc.perl6.org/language/syntax

[19:57] *** Averna left
[19:58] *** Averna joined
[20:00] *** Ekho joined
[20:00] *** vike left
[20:00] *** ravenousmoose left
[20:00] *** vike joined
[20:01] *** cpan-p6 left
[20:02] *** cpan-p6 joined
[20:03] *** nataraj_ is now known as nataraj

[20:05] *** phogg left
[20:06] *** phogg joined
[20:11] <sena_kun> m: my (@a, $b = 'foo'); say $b;

[20:11] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´(Any)‚ê§¬ª

[20:11] *** netrino joined
[20:12] <sena_kun> I seem to misunderstand something...

[20:13] <sena_kun> m: my (@a, $b) = [], "foo"; say $b;

[20:13] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´(Any)‚ê§¬ª

[20:14] <sena_kun> m: my ($b, @a) = "foo", []; say $b;

[20:14] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´foo‚ê§¬ª

[20:14] *** nataraj left
[20:14] *** nataraj joined
[20:15] *** nataraj is now known as nataraj_

[20:15] *** nataraj_ is now known as nataraj__

[20:15] *** nataraj__ is now known as nataraj_

[20:16] *** nataraj_ left
[20:17] *** nataraj_ joined
[20:17] *** nataraj_ is now known as dhyan_nataraj

[20:26] <Juerd> I'm surprised my (@a, $b = 'foo'); is valid syntax even :)

[20:26] *** ferreira joined
[20:26] *** cpan-p6 left
[20:27] *** cpan-p6 joined
[20:27] <sena_kun> well, I'd feel it very natural to work, but odds are against me tonight. :)

[20:28] <sena_kun> I guess this time feels < reals. ;)

[20:28] <Juerd> I find binding easier to understand most of the time, when it comes to listy things

[20:29] <Juerd> m: my (@a, $b) := [], "foo"; say $b;

[20:29] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´foo‚ê§¬ª

[20:34] *** sno joined
[20:39] *** abraxxa left
[20:43] *** zacts joined
[20:52] *** jmerelo left
[20:54] *** cpan-p6 left
[20:55] *** Averna left
[21:02] *** Averna joined
[21:02] *** zacts left
[21:06] *** zacts joined
[21:08] *** zakharyas left
[21:09] *** zacts left
[21:18] *** sena_kun left
[21:21] *** cpan-p6 joined
[21:24] *** Black_Ribbon joined
[21:24] *** MasterDuke joined
[21:24] *** MasterDuke left
[21:24] *** MasterDuke joined
[21:29] *** drclaw joined
[21:29] *** Black_Ribbon left
[21:30] *** Black_Ribbon joined
[21:35] *** dhyan_nataraj left
[21:36] *** cpan-p6 left
[21:36] *** cpan-p6 joined
[21:46] *** titsuki_ left
[21:46] *** leont joined
[21:47] *** titsuki joined
[21:48] *** laidback_01 joined
[21:50] *** zacts joined
[21:51] *** Kaiepi left
[21:51] *** Kaiepi joined
[21:54] *** pecastro joined
[21:55] *** zacts left
[21:57] <cpan-p6> New module released to CPAN! TAP (0.0.9) by 03LEONT

[21:58] *** cpan-p6 left
[21:58] *** cpan-p6 joined
[22:03] *** cjkinni left
[22:03] *** Cabanossi left
[22:05] *** Cabanossi joined
[22:05] *** titsuki left
[22:12] <cpan-p6> New module released to CPAN! App-Prove6 (0.0.10) by 03LEONT

[22:13] *** cpan-p6 left
[22:13] *** cpan-p6 joined
[22:14] <cono> m: &[/].arity.say

[22:14] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´0‚ê§¬ª

[22:14] <cono> any ideas why infix isn't 2 ?

[22:14] <cono> m: &[/].say

[22:14] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´&infix:</>‚ê§¬ª

[22:15] <cono> rakudo knows that this is infix

[22:17] <tobs> m: &infix:</>.candidates¬ª.arity.say

[22:17] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´(0 1 2 2 2 2 2 2 2 2 2 2 2 2)‚ê§¬ª

[22:18] <tobs> cono: it is a multi which has a 0-arity candidate. Maybe that's why.

[22:18] <tobs> or maybe just because it's a multi and arity isn't well-defined anymore.

[22:20] <leont> Yeah. multis can have an arity, but usually they're (|)

[22:21] <cono> ah,, thanks

[22:25] *** kurahaupo left
[22:25] *** vike left
[22:25] *** kurahaupo joined
[22:27] *** cpan-p6 left
[22:28] *** cpan-p6 joined
[22:35] *** patrickb joined
[22:38] *** vike joined
[22:44] *** rindolf left
[22:51] *** drclaw left
[22:51] *** cpan-p6 left
[22:52] *** cpan-p6 joined
[22:52] *** drclaw joined
[22:57] *** drclaw left
[22:58] *** leont left
[22:59] *** drclaw joined
[23:04] *** titsuki joined
[23:07] *** cpan-p6 left
[23:07] *** cpan-p6 joined
[23:11] <timotimo> there is not only arity but also count

[23:12] <timotimo> m: say &infix:</>.count

[23:12] <camelia> rakudo-moar 9770c1aa1: OUTPUT: ¬´2‚ê§¬ª

[23:13] <timotimo> cono: ^ this could clear things up

[23:15] *** lucasb left
[23:22] *** pecastro left
[23:27] *** mowcat left
[23:28] *** woolfy joined
[23:30] *** patrickb left
[23:31] *** cpan-p6 left
[23:31] *** cpan-p6 joined
[23:35] <Kaiepi> huh, i had no idea rakudo had some deprecated to-json/from-json subs until the regex in one of them broke a build

[23:36] <timotimo> ouch :)

[23:36] <Kaiepi> why is \x10FFFF an illegal endpoint for a character class on the jvm?

[23:37] <timotimo> was rakudo properly outputting the deprecation messages and it was just that nobody checked the logs?

[23:37] <timotimo> or was the mecanism broken somehow?

[23:38] <Kaiepi> not sure, i'll paste the error message once the build errors out again

[23:38] <guifa> What is the module to ‚Äòuse‚Äô to be able to smart match against resources?

[23:39] <timotimo> what are resources?

[23:39] <guifa> In a module

[23:39] *** imcsk8 joined
[23:39] <timotimo> then what does smart match mean?

[23:39] <guifa> my $foo = %*RESOURCES<bar>; if $foo ~~ Resource (that‚Äôs what it returns with a WHAT)

[23:40] <timotimo> oh

[23:40] <guifa> Want to allow someone to pass a Str or a Resource reference

[23:40] <timotimo> try .^long_name or so

[23:40] <guifa> (for lazy loading)

[23:41] * guifa doesn‚Äôt think it‚Äôs best to load 40+ localization files if only one will ultimately get used :-)

[23:41] <timotimo> aye

[23:41] <timotimo> i hate how muchg all these localization files take up on my computer

[23:43] *** leont joined
[23:43] <guifa> They ideally shouldn‚Äôt take up much space at all.  I think the biggest problem is when there‚Äôs lots of of them that are all like 1/100th the minimum block size though and there‚Äôs 100 of them.  But I‚Äôve not seen a localization format yet that supports merging the files together.

[23:43] <Kaiepi> timotimo, https://pastebin.com/g1CzC59j

[23:43] <guifa> Actually, maybe I could support passing a zip file and just extract the ones as necessary

[23:52] <guifa> Is there a way to get a listing of the files in the resources folder?  I tried .keys, and {*} and such but they all errored out

[23:53] <timotimo> damn thats weird

[23:54] <timotimo> sorry i haven't used the resouzrces mechanism much at all yet

[23:54] <timotimo> kaiepi, is that a regex in the new implementration that recently got pulled in from json::fast?

[23:54] *** cpan-p6 left
[23:55] *** cpan-p6 joined
[23:55] <Kaiepi> it appears to be the case timotimo

[23:55] <guifa> Yeah same.  It *seems* that you either have to know the files names in advance.  Not impossible to work with but a bit more complex for coding :-)

[23:57] <timotimo> hm, was there a way to get at the current distribution thingie? that should have the meta info in it

[23:59] <tadzik> mmm, Commma!

