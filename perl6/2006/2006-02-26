[00:34] *** nnunley joined
[00:53] *** kanru joined
[00:55] *** dduncan joined
[01:06] *** kanru2 joined
[01:10] *** kanru2 is now known as kanru

[01:14] *** scw joined
[01:34] *** lypanov left
[01:39] *** kanru joined
[02:05] *** kanru joined
[02:25] *** stevan_ joined
[02:35] *** scook0 joined
[04:11] *** mako132_ joined
[04:27] *** macli joined
[04:39] *** hcarty joined
[04:43] *** hcarty left
[04:49] *** K_ is now known as K

[04:58] *** lao joined
[05:04] *** kanru joined
[05:06] *** anatoly joined
[05:33] *** kanru joined
[06:23] *** anatoly joined
[06:47] *** Cryptic_K joined
[07:08] *** Aankhen`` joined
[07:13] *** cognominal joined
[07:14] <audreyt> greetings from OSDC.il!

[07:15] <dduncan> greetings from Victoria.bc

[07:16] <gugod> greeting from chupei.pm

[07:31] *** levin__ joined
[07:31] *** nothing_pasta joined
[07:31] <nothing_pasta> hola

[07:31] <nothing_pasta> from OSDC

[07:40] *** Khisanth joined
[07:53] <audreyt> mm, lwall is on stage

[07:53] <audreyt> (no electricity, brb)

[07:59] <nothing_pasta> you lie

[07:59] <nothing_pasta> i just took your electricity

[08:09] * beppu_ is virtually and belatedly applauding for our $Larry;

[08:15] <dduncan> I also applaud that which I can neither see nor hear

[08:15] <nothing_pasta> actually he didn't get starting appluase

[08:15] <nothing_pasta> only one person

[08:15] <nothing_pasta> because nobody said "and now... LARRY WALL!!"

[08:15] <nothing_pasta> he just came up

[08:16] <dduncan> well, the real fans need no introduction ... they can see him and know who he is

[08:18] <nothing_pasta> but he still didn't get applause =)

[08:18] <beppu_> dduncan, sometimes, you just have to believe.  ;-)

[08:30] *** elmex joined
[08:30] <Khisanth> dduncan: the weirdest looking one in the crowd? :P

[08:30] <dduncan> I'm not at the event; I'm at home

[08:31] <dduncan> but I have met Larry in person at OSCON2005

[08:32] <dduncan> my point earlier was that I consider Larry distinctive enough that no one else at an IT conference would look like him, most likely

[08:32] <dduncan> and all Perl fans would have seen his picture multiple times

[08:32] *** K_ joined
[08:33] *** iblechbot joined
[08:53] *** christo joined
[09:08] <audreyt> actually, David Roundy and another darcs developer looks 80% like lwall

[09:08] <audreyt> except perhaps a bit younger

[09:08] <dduncan> is ... that ... so ?

[09:09] <audreyt> yeah, I was very surprised during ICFP

[09:09] <ayrnieu> You should have killed the doppleganger while you had the chance.

[09:09] <audreyt> dopplegangers, you mean

[09:09] * nnunley . o O ( There can be only one )

[09:10] <audreyt> . o O ( doppler gangsters )

[09:10] <dduncan> why ... the dopplegangers can become useful to Larry if someone targets him ... more false targets

[09:11] <dduncan> sounds kind of like a spy story

[09:11] <dduncan> maybe

[09:11] <dduncan> and you know Larry likes spy stories

[09:11] <dduncan> especially Man From Uncle

[09:11] <dduncan> or Get Smart

[09:12] <dduncan> anyway, I have to get gone

[09:21] *** Cryptic_K is now known as K

[09:27] *** ghenry joined
[09:28] *** beppu_ joined
[09:34] *** KingDiamond joined
[09:40] *** gaal joined
[09:42] <gaal> audreyt: do you happen to have a version of Spork that can do .pretty for colorizing code?

[09:43] <audreyt> gaal: p5 code?

[09:43] <audreyt> p6 code?

[09:43] <audreyt> shell?

[09:43] <gaal> i can colorize it myself

[09:43] <gaal> the manpage mentions ".pretty" "coming soon"

[09:43] <audreyt> don't, use VimMode

[09:43] <gaal> and put in verbatim html?

[09:44] <audreyt> .vim

[09:44] <gaal> cool

[09:44] <audreyt> #!perl6

[09:44] <audreyt> ...

[09:44] <audreyt> .vim

[09:44] <audreyt> http://search.cpan.org/dist/Kwiki-VimMode/

[09:44] <gaal> cheers

[09:44] <audreyt> may need some tweaking to work for Spork, as this is a kwiki plugin

[09:44] <gaal> okies

[09:44] <audreyt> just steal the to_html wafl

[09:47] *** nothingmuch joined
[09:47] <nothingmuch> audreyt: on feather, osdc/darcs_slides

[09:47] *** TimToady joined
[09:47] <audreyt> cheers

[09:47] <nothingmuch> naturally it's a darcs repo

[09:47] <nothingmuch> i'm darcs pushing cached version s of the images

[09:47] <nothingmuch> so pull them in a few

[09:47] <nothingmuch> this sucks, i wanted to go to the python tut =(

[09:47] <audreyt> TimToady: I want you slides... $0/$1 gets confused a lot :)

[09:49] <TimToady> audreyt: not surprising, considering the talk was originally written before the great $1/$0 shift...

[09:49] <nothingmuch> webcal://ical.mac.com/nothingmuch/OSDC::Israel::2006.ics

[09:49] <nothingmuch> םםפד

[09:49] <nothingmuch> oops

[09:49] <audreyt> nothingmuch: I got your slides

[09:49] <nothingmuch> grazie

[09:49] <nothingmuch> darcs pull again

[09:50] <nothingmuch> the image cache dir is in

[09:50] <audreyt> nothingmuch: put it in your public_html

[09:50] <audreyt> otherwise how do I pull

[09:50] <nothingmuch> darcs pull

[09:50] <audreyt> via ssh?

[09:50] <nothingmuch> oh

[09:50] <nothingmuch> yes

[09:50] <nothingmuch> one sec

[09:50] <nothingmuch> okay

[09:51] <nothingmuch> public_html/osdc/darcs_slides

[09:51] <pasteling> "audreyt" at 192.118.100.254 pasted "Reworked S06 macro patch: require COMPILING <$x>, q:code(:COMPILING), etc." (62 lines, 2.4K) at http://sial.org/pbot/16025

[09:52] <audreyt> TimToady: the patch above (based on nothingmuch's) should summarize the separate subchunks we produced in the hackathon

[09:52] <nothingmuch>  this is based on my patch, right? i don't need to throw it away from svk

[09:52] <nothingmuch> (i mean, will it merge correctly?)

[09:52] <nothingmuch> oh wait

[09:52] <nothingmuch> no it won't

[09:52] <nothingmuch> sorry

[09:52] <nothingmuch> audreyt: got the image cache?

[09:54] <audreyt> nothingmuch: HTTP here blocks .gz

[09:54] <audreyt> I'll just rsync

[09:54] <audreyt> otoh, HTTP here supports DAV

[09:54] <nothingmuch> fsssscccckkkkkkkkkkkkkkkkkk11112$!$%!!!!!!!!!!!!

[09:54] <audreyt> so SVN>Darcs here

[09:54] <audreyt> :D

[09:54] <nothingmuch> heh

[09:54] <nothingmuch> ssh it then

[09:54] <nothingmuch> they opened that up

[09:54] <audreyt> doing so

[09:54] <nothingmuch> that's why i couldn't download that file

[09:54] <nothingmuch> assholes

[09:55] <nothingmuch> i hate firewalls, and even more so the admins that abuse them

[09:57] <TimToady> audreyt: looks good to me.  The require is fancy, but kinda "use vars"-ish when my $x := COMPILING::<$x> would probably be what most people would use.

[09:57] <audreyt> TimToady: the generalization here is

[09:57] <audreyt> =head1 Importing from a pseudo-package

[09:58] <audreyt> You may also import symbols from the various pseudo-packages listed in S02,

[09:58] <audreyt> which behaves as if all their symbols are in the export list:

[09:58] <audreyt>     # same as my ($IN, $OUT, $ERR) ::= ($*IN, $*OUT, $*ERR)

[09:58] <audreyt>     use GLOBAL <$IN $OUT $ERR>;

[09:58] <audreyt> (if okay with you, this goes into S11)

[09:58] <TimToady> Yes, but what's a pseudo package?  I think any require has to know whether it still needs to slurp a .pm, and these just happen to be born unslurpable.

[09:59] <audreyt> as you cannot declare a module with that name and expect it to work

[09:59] <audreyt> so the only part that needs to be speccted is that ::GLOBAL::EXPORT is always just ::GLOBAL

[10:00] <TimToady> Yep.  It basically looks fine to me, and as long as you understand the require requirements, I don't mind if it's somewhat terse.

[10:03] *** azuroth joined
[10:05] * TimToady wonders what he should say about p5-to-p5 on Tuesday...

[10:05] <TimToady> Isn't there a cheat sheat in pugs somewhere that lists p5-to-p6 transformations?

[10:06] <pasteling> "audreyt" at 192.118.100.254 pasted "S11: Importing from Pseudo Packages" (26 lines, 858B) at http://sial.org/pbot/16026

[10:06] <audreyt> TimToady: looks good?

[10:06] <audreyt> TimToady: docs/other/porting_howto 

[10:07] <audreyt> but they are somewhat outdated

[10:07] <audreyt> (and needs to be ported to docs/Perl6/Perl5/Porting.pod)

[10:07] <audreyt> anyone up for such a task? :)

[10:08] *** larsen joined
[10:12] <TimToady> audrey: s/attempt to load C<GLOBAL.pm>/attempt to load, for example, C<GLOBAL.pm>/

[10:12] <TimToady> Other than that, looks fine.

[10:13] <audreyt> TimToady++ # committed

[10:14] <mauke> good morning

[10:15] *** chris2 joined
[10:15] <audreyt> hm, bsb is not here

[10:15] <mauke> is svn pugs broken for anyone else?

[10:16] <audreyt> no... how come?

[10:16] <audreyt> nopaste the error?

[10:16] <mauke> http://rafb.net/paste/results/BaXrPv32.html

[10:17] <integral> is that building from clean with the same PUGS_EMBED options that you normally use?

[10:18] <mauke> that's with PUGS_EMBED=perl5

[10:18] <audreyt> that looks incremental

[10:18] <audreyt> I'll attempt a rebuild to confirm

[10:18] <mauke> I can make clean and run it all again but it'll fail at the same point

[10:19] <audreyt> hm, something tripped _stub.o generation

[10:19] <audreyt> can you try

[10:19] <audreyt> ./Setup configure

[10:19] <audreyt> ./Setup build

[10:19] <audreyt> ?

[10:19] <audreyt> (it builds here)

[10:20] <mauke> sec, rebuilding from make distclean now

[10:21] <audreyt> sorry for the pain

[10:21] <audreyt> try unoptimised

[10:21] <audreyt> it's really fast now

[10:21] <audreyt> as opposed to thrashing on .Run

[10:23] <mauke> hey, that's what my new pc is for :-)

[10:24] *** anatoly joined
[10:24] <audreyt> anatoly: hey

[10:25] <TimToady> I just know someone's gonna suggest that require GLOBAL <$IN> be made mandatory rather than falling back to $*...

[10:25] <audreyt> yeah, that's the logical next step :)

[10:25] <audreyt> though I'm working on my talk, so that's gonna wait

[10:25] <audreyt> use GLOBAL <$IN> # works too

[10:26] <anatoly> hey audreyt

[10:27] <audreyt> anatoly: sanity-check http://xrl.us/j7no ? :)

[10:28] *** GeJ joined
[10:28] <gaal> yo anatoly :)

[10:28] <anatoly> yo gaal :)

[10:29] <anatoly> audreyt: sure, looking

[10:29] <gaal> audreyt: how do I svk praise, but look back into the parent repo?

[10:29] <arcady> mauke r9188 unoptimized compiles just fine here

[10:30] <audreyt> gaal: svk praise --remoterev /pugs/trunk/path/to/file

[10:30] <gaal> thanks

[10:30] <audreyt> np :)

[10:31] <mauke> audreyt: ./Setup build seems to succeed (last line: /usr/bin/ar: creating dist/build/libHSPugs-6.2.11.a)

[10:31] <audreyt> mauke: okay...

[10:32] <audreyt> then "make" again (without clearing)

[10:32] <audreyt> I think it's just a bad incremental build startpoint 

[10:32] <arcady> incremental builds don't always work so well...

[10:32] <mauke> failed

[10:33] <audreyt> mauke: hunt for 

[10:33] <audreyt> $(RM_RF) dist/build/src/Data/Yaml 

[10:33] <mauke> $ find . -name Syck_stub.o

[10:33] <audreyt> in Makefile

[10:33] <mauke> ./dist/build/Syck_stub.o

[10:33] <audreyt> and remove them

[10:33] <audreyt> hmmmm

[10:33] <mauke> the file is there, it's just not in the right directory

[10:33] <audreyt> have you upgraded Cabal?

[10:33] <audreyt> I see.

[10:33] <mauke> no idea

[10:34] <mauke> looks like I have dev-haskell/cabal-1.1.3

[10:34] <audreyt> yeah, we only tested on 1.1.2 and 1.1.4 I think, hmm

[10:34] <audreyt> it's like the old MakeMaker days

[10:35] <audreyt> my talk is coming up

[10:35] <audreyt> but I'll resume fixing it

[10:35] <audreyt> meanwhile

[10:35] <audreyt> bbl &

[10:35] <TimToady> audreyt: you plannin' to eat lunch?

[10:37] <gaal> TimToady: did you pick up vouchers?

[10:37] <gaal> for lunch

[10:37] <TimToady> Yep, got vouchers.

[10:38] <anatoly> ah, audreyt's gone. gaal, how long is her haskell talk supposed to be? :)

[10:39] <gaal> anatoly: 60 min

[10:39] <anatoly> haha :)

[10:40] <gaal> TimToady: audreyt's helping nothingmuch set up the laptop

[10:40] <gaal> anatoly: that's fine, under the AudreyT the audience is overclocked as well

[10:42] <anatoly> gaal: it is, but not nearly enough to grok these 275 slides. That's one slide every 15 seconds.

[10:43] <gaal> TimToady: <audreyt>: TimToady: yes

[10:43] *** clkao joined
[10:43] <gaal> anatoly: <audreyt>: that's plenty

[10:43] <clkao> oops. jsperl5 prelude no longer compiles

[10:43] <clkao> pugs: src/Pugs/AST/Internals/Instances.hs:(684,4)-(691,63): Non-exhaustive patterns in function showPerl5

[10:46] *** levin___ joined
[10:46] <TimToady> well, I'm using up battery, so I better shut down and go to lunch.

[10:47] <TimToady> Oh, it's not lunch time yet...

[10:49] <anatoly> audreyt: great slides. if you're looking for errors and typos, I didn't see any. If for suggestions, best thing I could think of is putting laziness, lazy lists, fibs and maybe a bit more about laziness right after referential transparency stuff and before monads

[10:50] <anatoly> audreyt: then you have something to keep them going, as it is when you reach monads they still have no clue what good any of this is for, and their brains shut down and never boot back up after that.

[10:57] <gaal> poor sheep

[10:57] <gaal> anatoly: <audrety>: okay

[10:58] <gaal> TimToady: we're in nothingmuch's talk, to end 13:05

[10:59] <lumi> 13:15 I think?

[10:59] <TimToady> I'm out in the lobby, feel free to glom me en passant.

[11:01] <gaal> ooh camel katamari

[11:03] <anatoly> audreyt: for "more laziness", would be nice to show a few slides on how a lambda is passed around and only executed lazily when needed. examples of map with toUpper etc. are not enough because they're felt to be builtin stuff which is allowed magic. the general power is not felt. and if you have a lambda being passed around, there's the great place to stress how it's a closure like perl's anon sub holding a my var, only much more general :)

[11:07] <gaal> lumi: i think today's schedule is different by 10 min from tomorrow's

[11:07] <lumi> oic

[11:10] <lumi> Although my model seems to fit reality better

[11:12] <gaal> apparently the printed sched needs adjustment as well, though perhaps -- too late

[12:10] *** mauke_ joined
[12:20] *** ilya666 joined
[12:26] *** mauke_ is now known as mauke

[12:30] *** TimToady joined
[12:34] *** KingDiamond joined
[12:35] *** elmex joined
[12:40] *** xinming joined
[12:41] *** rantanplan_ joined
[12:44] *** gaal joined
[12:44] <gaal> rehi

[12:44] <gaal> audreyt's giving her haskell talk

[12:46] *** nothingmuch joined
[12:46] <nothingmuch> lumi: ping

[12:47] *** lypanov joined
[12:47] <lypanov> nuts

[12:47] <lypanov> gah

[12:47] * lypanov must stop typing while joining

[12:48] *** levin__ joined
[12:49] *** xinming joined
[12:49] <anatoly> rehi

[12:49] <anatoly> how's the talk going?

[12:51] <nothingmuch> i'm learning python

[12:51] <anatoly> hey nothingmuch

[12:51] <nothingmuch> audrey's talk seems like it's going to be wonderful

[12:51] <gaal> anatoly: going well, we're in QuickCheck already

[12:51] <nothingmuch> (i had a rehearsel)

[12:51] <anatoly> how was darcs received?

[12:51] <lumi> I\m learning QuickCheck

[12:51] <nothingmuch> quickcheck?

[12:51] <nothingmuch> wtf? i didn't get to see that

[12:52] <lumi> No?

[12:52] <lumi> It's the opposite of HUnit :P

[12:52] <gaal> nothingmuch: tests w/random test cases

[12:52] <nothingmuch> i guess the rehersal was cut short ;-)

[12:52] <nothingmuch> i know what it is, i just didn't see it in the slides

[12:52] <gaal> we skipped a few cool monads

[12:52] <gaal> but are entering Parsec now

[12:52] <anatoly> :)

[12:52] <nothingmuch> this talk is very amusing

[12:52] <nothingmuch> some java guy told the speaker:

[12:53] <nothingmuch> "it's stupid! why are there no copies in your stupid python thing! this is very non standard"

[12:53] <nothingmuch> (python defaults to binding for assignment, it seems)

[12:53] <gaal> no copies?

[12:53] <gaal> oh

[12:53] <lumi> Java defaults to binding for assignment as well

[12:53] <gaal> how'd the speaker resond?

[12:53] <nothingmuch> ofcourse, there *are* copies

[12:53] <lumi> Reference semantics

[12:53] <nothingmuch> he is ast the ignoring step

[12:53] <gaal> denial!

[12:53] <gaal> bargaining!

[12:53] <anatoly> "java. where every man _is_ an island"

[12:53] <nothingmuch> the *other* members of the audience told the java guy to shut up =)

[12:53] <nothingmuch> haha

[12:54] <nothingmuch> ast = at

[12:54] <gaal> even if he does say jeh***<boulder>

[12:54] <lumi> Is it aan ignoring step, or phase?

[12:54] <nothingmuch> phase, i guess

[12:54] <nothingmuch> he argued before

[12:54] <nothingmuch> then he said "ok, whatever"

[12:54] <nothingmuch> and at the "your stupid python" event he just didn't naswer

[12:55] <nothingmuch> this is second-row-guy syndrome, only much worse

[12:55] <lumi> Learn anything new yet?

[12:55] * nothingmuch ?

[12:55] <lumi> Of Python

[12:55] <nothingmuch> yes

[12:55] <nothingmuch> the higher order help function

[12:55] <nothingmuch> it takes any function and prints it's help

[12:55] <nothingmuch> we talked about doing this in perl 6

[12:55] <nothingmuch> as a trait

[12:56] <nothingmuch> or attr

[12:56] <nothingmuch> sub foo : doc("....") { }

[12:56] <lumi> Yeah, ST has that

[12:56] <gaal> or $=POD

[12:56] <gaal> modulo twigil?

[12:56] <nothingmuch> $=POD is lexical data

[12:56] <nothingmuch> attr is semantic

[12:56] <nothingmuch> i guess we want sub foo : doc($=POD) or something, right?

[12:56] <nothingmuch> or an easier macro

[12:56] <nothingmuch> or is $=POD smarter than that?

[12:57] <gaal> that would make it top-heavy, on the syntactic level it can't be so unweildly

[12:57] <nothingmuch> like &function.pod ?

[12:57] <nothingmuch> yeah, i guess

[12:57] <nothingmuch> they have it as a void context string as the first expr

[12:57] <lumi> sub add($x,$y) is doc "I add two numbers" # ?

[12:57] <nothingmuch> i guess we could do the same if pod directives are rvalues

[12:57] <gaal> ingy had some ideas for Perldoc

[12:57] <nothingmuch> lumi: same thing... it was all discussed

[12:57] <nothingmuch> ingy has a lot of ideas ;-)

[12:58] <gaal> yay for STM in perl 6 :)

[12:58] <nothingmuch> yayayayayayay!

[12:58] <lumi> I like SmallTalk's Fight Club style comments

[12:58] <nothingmuch> if you got to STM in that talk

[12:58] <gaal> just did

[12:58] <nothingmuch> and audrey's slides/speaking is as clear as it was in the rehersal than she is an even better speaker than I thought

[12:59] <nothingmuch> then again, i didn't get to see takahashi employed in practice, just in theory/video

[12:59] <nothingmuch> the sxip guy had a lovely takahashi-esque talk

[12:59] <nothingmuch> on identity 2.0 or something like that

[12:59] <gaal> it is -- though i wonder what it's like for people who've never seen haskell

[12:59] <nothingmuch> gaal: from the way bindings/monads/laziness were explained it sounds good

[12:59] <nothingmuch> i was a bit weary of pattern matching

[12:59] <anatoly> nothingmuch, that was a wodnerful talk yes, on identity 2.0

[12:59] <nothingmuch> it was explained too vaguely IMHO

[13:00] <gaal> takahashi looks much less shallow-populistic than i thought

[13:00] <nothingmuch> anatoly: i wonder how much time he had to rehearse it

[13:00] <nothingmuch> gaal: yeah... i thought so too

[13:00] <nothingmuch> then i remembered that the speaker doesn't read out the slides

[13:00] <nothingmuch> like audrey said yesterday, takahashi forces you to explain

[13:00] <anatoly> nothingmuch: yeah.. it was pretty light on substance too when you thought about it. but great acting and setup.

[13:00] <gaal> i'm more convinced black on white is much better than the reverse now

[13:01] <nothingmuch> anatoly: not really... for someone without identity mgmt background (the target audience was non programmers, IIRC) i think it was pretty impressive

[13:01] <nothingmuch> but i agree that for our kind, people who tend to generalize automatically it was pretty moot

[13:01] <anatoly> nothingmuch: hmm... maybe if non-programmers, ok

[13:01] <gaal> nothingmuch: toly's a mathematitian, everything he understands is trivial :)

[13:01] <nothingmuch> gaal: it's more boomish

[13:01] <nothingmuch> gaal: =)

[13:01] <anatoly> gaal: shut up :)

[13:01] <nothingmuch> anyway, that's why i messed up the perl slides

[13:02] <nothingmuch> err, darcs slides

[13:02] <nothingmuch> i removed all useless english scaffolds (grammar)

[13:02] <gaal> first cell phone call in the day!

[13:02] <anatoly> maybe it's me.

[13:02] <gaal> people are well behaved here

[13:02] <lumi> There was one earlier

[13:02] <gaal> HSP is cool

[13:02] <lumi> iirc

[13:02] <anatoly> ah, you mean cellphone ring, not your cellphone.

[13:02] <nothingmuch> the java guy had a phone call ;-)

[13:03] <nothingmuch> HSP?

[13:03] <gaal> heh

[13:03] <gaal> haskell server pages

[13:03] <anatoly> yeah

[13:03] <nothingmuch> ah.. right

[13:03] <nothingmuch> never saw that

[13:03] <gaal> quite spectacular

[13:03] <nothingmuch> just heard of it

[13:03] <nothingmuch> i should have stayed

[13:03] <nothingmuch> i thought it was just a haskell tutorial

[13:03] <gaal> but like a lot on the web it probably ends up sucking in practice

[13:04] * nothingmuch mutters something about Catalyst and how it doesn't ;-)

[13:04] <gaal> she's now on the slide demonstrating gui and web have a lot in common

[13:04] <nothingmuch> this python stuff is uninspiring

[13:04] <nothingmuch> it's at the intellectual level of a language i would implement as a toy

[13:04] <gaal> and how if you write in HSP you can do either with the same code (!)

[13:04] <nothingmuch> except it's very broad

[13:04] <nothingmuch> and a complete implementation

[13:04] <lumi> Broad like an accent?

[13:04] <nothingmuch> but it's really very.... err.... boring

[13:04] <nothingmuch> ugh

[13:04] <nothingmuch> i want to go back

[13:04] <gaal> but of course you are limited to only the basic widgets

[13:05] <nothingmuch> too late though

[13:05] <nothingmuch> only 10 mins left

[13:05] <lumi> The interesting languages are in the *other* room

[13:05] <gaal> nothingmuch: work on your slides then

[13:05] <nothingmuch> no, i'm tired

[13:05] <nothingmuch> i need a bigger break

[13:05] <nothingmuch> i'll start in the next slot

[13:05] * nothingmuch is still stressed

[13:05] <nothingmuch> the talks make me really nervous

[13:05] <gaal> the guy in front of me is running aptitude update from hamakor, heh

[13:05] <nothingmuch> stage fright and all

[13:05] <nothingmuch> hamakor have a nice mirror =)

[13:05] <nothingmuch> it's pretty fast

[13:06] <gaal> esp if you're on actcom ;)

[13:08] <nothingmuch> python has an amazing itneractive shell though

[13:08] <nothingmuch> syntax highlighting

[13:08] <nothingmuch> readline support

[13:08] <nothingmuch> function autocompletion

[13:08] <nothingmuch> intellisense

[13:08] <nothingmuch> syntax *ERROR* highlighting

[13:08] <lumi> Steal that, then :P

[13:08] <nothingmuch> (very clear)

[13:08] <nothingmuch> yes =)

[13:09] <nothingmuch> i think i will download a dashboard widget with a timer

[13:09] <nothingmuch> and call it talkdoom

[13:09] <nothingmuch> i.e. the point in time by which your slides have to be ready

[13:09] <mauke> OCaml highlights errors, too

[13:12] <anatoly> bbl

[13:13] <nothingmuch> one nice thing about python the language is that so far (i don't know how synthetic this is) most of the examples were not very ugly

[13:13] <nothingmuch> that is, even when people asked simple questions, the examples looked pretty good

[13:13] <nothingmuch> in perl 5 that doesn't always happen

[13:13] <nothingmuch> in perl 6 otoh, it's beautiful, but people won't understand it immediately

[13:13] <nothingmuch> in python the only one way to do it seems good enough for most things, if it's sugary

[13:14] <nothingmuch> and if not you can also use the other (dumb) way to do it, i guess, but it'll be easy to explain

[13:15] <nothingmuch> i'm surprised that haskell doesn't highlight in ghci

[13:16] <lumi> There's no thesis in it

[13:16] <gaal> everything will come out whatever Function is colored as :)

[13:16] <nothingmuch> ?

[13:16] <nothingmuch> oh

[13:17] <nothingmuch> err, don't be silly =)

[13:17] <nothingmuch> we have haskell vimmode, that's good enough

[13:17] <lumi> Yeah, there's types, too

[13:17] <nothingmuch> and do

[13:17] <gaal> colorcode every variable by its type?

[13:17] <nothingmuch> i have a nicer idea

[13:17] <nothingmuch> color code every variable based on it's lexical scope

[13:17] <nothingmuch> like a map colorer

[13:18] <gaal> that does sound useful, yes

[13:18] <nothingmuch> so that if there is a binding, it's colored the same way as all it's uses

[13:18] <nothingmuch> but if it's masked, it'll be a different color

[13:18] <nothingmuch> hmm

[13:18] <nothingmuch> i guess, i gave python it's chance, i don't think i'll study it

[13:18] <nothingmuch> is this fare to diss it now?

[13:18] <nothingmuch> fair

[13:21] <gaal> well done, audreyt 

[13:23] *** KingDiamond joined
[13:25] *** xerox joined
[13:31] *** bsb joined
[13:32] <audreyt> gaal: thanks :)

[13:32] *** nothingmuch joined
[13:32] <nothingmuch> hola

[13:33] <ilya666> Finland -- Sweden 1:0 after first period

[13:34] <audreyt> mm, this FUSE talk is actually interesting

[13:35] <audreyt> too bad I don't get to use it

[13:35] <audreyt> (yet)

[13:35] <integral> do we have a pugs/p6 FUSE binding? 8-)

[13:35] <audreyt> SyntaxNinja has a Haskell binding

[13:35] <audreyt> so we should really revive use haskell:Module

[13:36] <nothingmuch> =)

[13:36] <audreyt> (or use c:header)

[13:36] <xerox> Which FUSE talk?

[13:36] <nothingmuch> wow, that would be a slick FFI interface

[13:36] <nothingmuch> my dermatitis is erupting =(

[13:36] <audreyt> xerox: we are in http://osdc.org.il/schedule.html

[13:36] <nothingmuch> stress of talks is != good

[13:36] <xerox> Ah, okay.

[13:37] <lumi> Ah, you write PHP in lisp!

[13:37] <nothingmuch> yes =)

[13:37] <nothingmuch> lumi and I are in the codegen talk

[13:38] <lumi> Nonono, never touch generated code by hand!

[13:38] <nothingmuch> i agree

[13:38] <nothingmuch> but he said something slightly different

[13:38] <nothingmuch> he said "my generator is not good enough some of the time"

[13:38] <nothingmuch> "it's too much effort to fix it"

[13:38] <nothingmuch> "i'd rather fix it by hand when it breaks, which is not often"

[13:38] <gaal> so, can we mount perl6 modulespace via a fs implemented in p6? :-P

[13:39] <nothingmuch> yes

[13:39] <lumi> Okey, but then you need to read its output, every time, instead of getting it right once

[13:39] <nothingmuch> the module autoloader from CPAN thing could be just a virtual file system in Perl 6

[13:39] <lumi> Heh

[13:39] <gaal> use Meta;

[13:39] <nothingmuch> lumi: yes, but his point is good: it's good enough, no need to push it

[13:39] <nothingmuch> if it was *really* a problem, he would fix it

[13:40] <nothingmuch> at least that's what he implied

[13:40] <nothingmuch> (like, an in practice problem)

[13:40] <lumi> There's "indent" everywhere.. He should read the Haskell Pretty

[13:40] <nothingmuch> =)

[13:40] <nothingmuch> we'll let him know

[13:40] <gaal> has anybody seen Ran around? I just noticed he has a talk today (yay)

[13:40] <nothingmuch> maybe he's high

[13:40] <gaal> (ran's talks)++

[13:40] <lumi> nil

[13:40] <nothingmuch> yeah, they rock

[13:45] *** wilx joined
[13:49] <lumi> Generated JS can be size-optimized (translates into $$ not paid for bandwidth)

[13:54] <gaal> $$ means vretical cat in Pretty :)

[13:59] <lumi> I like cats in any orientation

[14:00] <audreyt> mm landscape cats

[14:00] <nothingmuch> =)

[14:00] <nothingmuch> 50 uses for a dead cat: pretty printing

[14:00] <nothingmuch> (spread vertically)

[14:00] <lumi> Heh

[14:00] <lumi> Ew

[14:00] <lumi> You just apply the cat virtually to two docs?

[14:01] <lumi> Vertically (sorry)

[14:02] <nothingmuch> sorry

[14:02] <nothingmuch> yes

[14:02] <nothingmuch> that's what the butcherknife operator is for

[14:03] <lumi> Ew -> Ew

[14:03] <nothingmuch> or the schnitzel hammer one: []---

[14:03] <xerox> schröendinger's cats 

[14:05] <gaal> my first guess when I saw $$ was that ($$) f = (iterate f) !! 2

[14:05] <xerox> heh

[14:05] <xerox> Maybe ($$) = deepSeq

[14:06] <gaal> ($$$$$$$) = y -- dammit

[14:06] <gaal> fuse is really nice

[14:06] <xerox> gaal, ($$) f = (!! 2) . iterate f

[14:06] <audreyt> hm, you mean (!! 2) . iterate f

[14:06] <xerox> Dang.

[14:06] <gaal> argh

[14:06] <audreyt> heh

[14:07] <gaal> well in that case, pl it

[14:07] <audreyt> they even align

[14:07] <xerox> Indeed :-)

[14:07] * xerox high-fives audreyt 

[14:07] * audreyt smiles

[14:07] <audreyt> gaal: ((!! 2) .) . iterate

[14:07] * gaal shares the high-five in realspace

[14:08] <xerox> It is a pattern.

[14:08] <xerox> To compose a unary function with an n-ary function, you compose n (.) together.

[14:08] * gaal is reminded that we need a bot here

[14:08] <gaal> whee!

[14:08] <gaal> xerox++ -- haskell carg^H^Hpatterns

[14:09] <audreyt> mm, cargo patterns

[14:09] <xerox> Yay.

[14:09] <xerox> (What would 'carg..' mean?)

[14:10] <audreyt> cargo culting^W^Wpatterns

[14:10] <audreyt> gaal: how's your talk?

[14:10] <gaal> um, ah, eh, oh...

[14:10] <gaal> slide 14 :)

[14:10] <xerox> "The Cargo Cults believed that manufactured western goods ('cargo') were created by ancestral spirits and intended for Melanesian people."

[14:11] <gaal> i should go to more boring talks

[14:11] <gaal> so i have time in vi 

[14:11] <gaal> xerox: Feynman coined that, I believe

[14:11] <audreyt> gaal: maybe we move out from the talks after this one

[14:11] <audreyt> so I can _also_ work on my talk tomorrow

[14:11] <audreyt> of which I've produced 0

[14:12] <xerox> gaal: whoa!  Do you have any reference about that?

[14:12] <audreyt> and is keynote

[14:12] <gaal> xerox: it's in Surely you're Joking, I think

[14:12] <xerox> "ncidentally, Richard Feynman wrote a great essay on cargo cult science."

[14:12] <xerox> +I

[14:12] * audreyt sees bsb looking at her slides again and smiling mysteriously in her front row

[14:12] <gaal> my $talk is keynote;

[14:12] <gaal> well

[14:12] <gaal> audrey's talk is

[14:12] <gaal> not mine happily :)

[14:13] <gaal> we can add a scoping keyword that only installs a symbol in somebody else's pad

[14:13] <gaal> their $talk is keynote;

[14:13] <audreyt> my $talk is keynote is export(:THEIR);

[14:14] * xerox fails to decypher

[14:14] <gaal> that also leaves $talk in this scope :)

[14:14] <bsb> I was just wondering how the hell <img src=a /> works as Haskell code

[14:14] <gaal> bsb, preprocessors :)

[14:15] <azuroth> legal_alcohol++

[14:16] <lumi> I guessed preprocessor..

[14:16] <gaal> yay, there's ran

[14:24] <ilya666> Finland -- Sweden second period 2:2

[14:24] *** cognominal__ joined
[14:26] *** KingDiamond joined
[14:36] *** nothingmuch joined
[14:36] <nothingmuch> audreyt: ping

[14:36] <nothingmuch> wrt scrhodinger's cat: between hitting it and removing the blood from your eyes you don't know if it's alive or dead

[14:37] <nothingmuch> until you make an observation ;-)

[14:37] <gaal> nothingmuch: she's w/me working on slides

[14:37] <nothingmuch> sah

[14:37] <nothingmuch> ah

[14:37] <gaal> but is disconnected

[14:37] <nothingmuch> where are you guys?

[14:37] <gaal> if not urgent, later :)

[14:37] <gaal> one floor up

[14:37] <nothingmuch> hmm

[14:37] <nothingmuch> i'll join you, my slides are related

[14:37] <nothingmuch> (this is for gaal's talk, right?)

[14:37] <nothingmuch> if you don't mind ofcourse

[14:38] <gaal> cool

[14:38] <nothingmuch> it's just that I was going to ask for help myself

[14:38] <nothingmuch> okay

[14:38] <nothingmuch> see you in ~10 mins

[14:38] <gaal> k i really need to concentrate

[14:39] <nothingmuch> /devoice nothingmuch

[14:44] *** michimueller joined
[14:49] *** KingDiamond joined
[14:52] <ingy> hi nothingmuch 

[15:02] *** hoowa joined
[15:04] <hoowa> tang u still here?

[15:24] <Juerd> "OpenOffice has *multiple thousands* of regression tests", the guy says :)

[15:25] <Juerd> My guess is that Pugs wins easily ;)

[15:38] <xinming> hmm, class A { has $.a = 3; method a { return 5 }; method t1 { $.a }; method t2 { $.a() } }; will there any difference between t1 and t2?

[15:45] *** orafu joined
[15:46] <TimToady> xinming: those should be equivalent.  All $.foo are virtual accessors.

[15:47] <xinming> TimToady: hmm, so, there is no way to get the attribute value $.a?

[15:48] <TimToady> sure, say $!a instead if you really mean the attribute.  But if you're going to do infrastructure like that, you should probably be using a submethod instead.

[15:48] <xinming> thanks.

[15:49] <audreyt> TimToady: nothingmuch raises this point:

[15:50] *** bsb joined
[15:50] <audreyt> my &code := sub {...} # see, no semicolon

[15:50] <audreyt> my $var = %foo<bar>; # this is mandatory

[15:50] <audreyt> my $var = %foo{'bar'} # can we make this mandatory as well?

[15:50] <audreyt> I think only closing '}' for circumfix gets the EOL treatment, not postcirfumfix

[15:51] <TimToady> Hmm.  well it *is* a closure, if you use it like one...

[15:51] <audreyt> %foo{my $x;}

[15:51] <TimToady> you can say %foo{ my $x = $y } for instance.

[15:51] <audreyt> indeed

[15:51] <audreyt> so maybe that is all well after all

[15:52] <TimToady> the tricky thing will be if someone says

[15:52] <TimToady> %foo{$x}

[15:52] <TimToady> + 42

[15:52] <audreyt> what about the "use GLOBALS"-under-use-strict-so-we-get-$x-always-lexically-bound idea? :)

[15:53] <audreyt> mm, but actually

[15:53] <TimToady> I've probably had enough time to get used to it.  :-)

[15:53] <audreyt> ooh :)

[15:53] <audreyt> TimToady++

[15:53] <audreyt> my &code := sub { $x }

[15:53] <audreyt>          .assuming();

[15:53] <audreyt> same problem

[15:54] <audreyt> so probably same solution?

[15:54] <audreyt> (i.e. both gets implicit EOLed)

[15:55] <TimToady> at one point I was reserving _ for that, so %foo{$x}_ would eat whitespace.

[15:55] <audreyt> that's exactly like VB

[15:55] <clkao> audreyt: got time to see why jsbackend can't compile prelude anymore?

[15:55] <TimToady> it it?

[15:55] <TimToady> is it?

[15:55] <audreyt> clkao: will do after tomorrow's keynote of mine

[15:55] <clkao> :)

[15:56] <audreyt> TimToady: http://pugscode.org/osdc/vb.xul?page=41

[15:56] <audreyt> 100% identical :)

[15:56] *** KingDiamond joined
[15:57] <audreyt> lumi: .xul and safari does not mix

[15:58] <Juerd> 17:03 < audreyt> my $var = %foo{'bar'} # can we make this mandatory as well?

[15:58] <TimToady> audreyt: I'm not sure VBishness is a recommendation...  :/

[15:58] <Juerd> You kind of need that, for postfix if, right?

[15:59] <Juerd> Isn't }-implies-; more useful if the corresponding { wasn't on the same line?

[16:00] <Juerd> Oh, I get another blob in now (connectivity here is very, very bad)

[16:00] <Juerd> You already discessed this...

[16:00] <Juerd> I don't like _.

[16:00] <Juerd> (at all!)

[16:01] * Juerd would, to be honest, prefer to always type ;, if the alternative is to in surprising cases have to type _.

[16:01] <lumi> Sacred code?

[16:06] <audreyt> but I dislike the A03 lonely-curly-in-a-line idea

[16:06] <audreyt> as it will require the parser to remember things for each line

[16:07] <audreyt> i.e. whether it has seen some token already for this line

[16:07] <audreyt> as compared to EOL impliedness, which is only referring to forward information

[16:07] <audreyt> (and hence good for one-passness)

[16:08] *** nothingmuch joined
[16:08] <audreyt> Juerd: the implied-; is useful for

[16:08] <audreyt> sub f { 3 }

[16:08] <audreyt> even though they were on the same lnie

[16:08] *** nothingmuch joined
[16:09] <nothingmuch> my conclusion about ran:

[16:09] <nothingmuch> either he knows everything

[16:09] <nothingmuch> in advance

[16:09] <nothingmuch> or thinks really fast

[16:09] <nothingmuch> that was a very elegant definition

[16:09] <nothingmuch> "meta configuration"

[16:09] <nothingmuch> and it took him 3 seconds and no retries

[16:09] <gaal> he did think of that one

[16:09] <gaal> in advance

[16:09] <nothingmuch> ah

[16:10] <nothingmuch> oops

[16:10] <gaal> i really like how he presents stuff

[16:10] * nothingmuch iis dyslexic, please remember that reading is not a natural process for $?SELF

[16:10] <gaal> oh, I know that only because I remember discussing it with him a few months ago ;-)

[16:11] *** justatheory joined
[16:11] <nothingmuch> hehe

[16:14] * audreyt can't help but think of Harmony, which can solve this elegantly in a one-pass fashion

[16:15] <TimToady> If we really wanted to drive people nuts, we'd say } assumes ; only if the next line is not more indented than this one.

[16:15] <audreyt> http://alliance.seas.upenn.edu/~harmony/cgi-bin/demo.cgi

[16:15] <audreyt> TimToady: aw, I prefer layout to be a separate pass

[16:15] <audreyt> having to remember how each line indented is a pain in an onepass scanner

[16:16] <audreyt> (just ask ingy)

[16:16] <nothingmuch> mooseness is good

[16:16] <nothingmuch> the moosness property pattern is like the DWIM language

[16:16] <nothingmuch> you should be able to say

[16:16] <nothingmuch> foo.property = moose in your cfg

[16:16] <nothingmuch> and get DWIM

[16:16] <pasteling> "audreyt" at 192.118.100.254 pasted "S03: Make non-qualified variables lexical-only by default." (44 lines, 1.5K) at http://sial.org/pbot/16030

[16:17] <audreyt> TimToady: looks good?

[16:17] <audreyt> s/limit the lookup the/limit the lookup to the/

[16:17] <nothingmuch> isn't /}\s*$/ ending a block eq '};', and '}\s*$' ending anything else eq '}' ?

[16:18] <nothingmuch> i mean, blockwise is the only way I'd expect it

[16:18] <nothingmuch> it's a simple rule

[16:18] <nothingmuch> (for humans)

[16:18] <nothingmuch> what I'm afraid of is that when it does bite someone, you need to explain why it did that

[16:19] <nothingmuch> and indentation sensitivity, or anay other heavy DWIM is.... err... hard to explain

[16:19] <nothingmuch> especially if you use e.g. perltidy

[16:19] <audreyt> the current rule is that it adds a semicolon iff a semicolon can terminate a statement there.

[16:19] <audreyt> i.e. if we are in a statement-list position.

[16:19] <nothingmuch> (although arguably perltidy with Perl::Grammar is easier to write in a way that is not going to screw stuff up)

[16:19] <nothingmuch> hmm

[16:19] <nothingmuch> that's a good DWIM, i guess

[16:19] <audreyt> glad you agree

[16:20] <TimToady> so you can always parenthesize to hide the DWIM.

[16:20] <nothingmuch> i.e., try to parse '}' as '};', and as long as the next statement (till a real ';') is OK don't backtrack?

[16:20] <audreyt> yup, which is probably the most inexpensive disambiguator

[16:21] <nothingmuch> yes, but probably good enough

[16:21] <nothingmuch> since we assume caching and separate compilation anyway, if we're going to be fast and stuff

[16:21] <audreyt> nothingmuch: more like, don't do implicit-semicolon if we are inside some expression-level bracketing construct.

[16:21] <audreyt> (which can be succintly defined in both Parsec and OpTable)

[16:22] <nothingmuch> (optimizing is probably going to be much more expensive than this DWIM, but Perl 6 almost *requires* it based on it's arcitecture)

[16:22] <nothingmuch> hmm

[16:22] <nothingmuch> fair enough

[16:22] <nothingmuch> sounds easier to implement

[16:22] <audreyt> it better be :D

[16:22] <TimToady> I'm not really concerned with parse speed--I want it to look clean (on average)

[16:22] <nothingmuch> it still means the same thing

[16:22] <nothingmuch> TimToady: we didn't expect otherwise ;-)

[16:23] <audreyt> nothingmuch: crucial difference is that this is determined at semicolon-newline site

[16:23] <audreyt> so it can commit there

[16:23] <audreyt> instead of waiting for some backtrack

[16:23] <nothingmuch> yeah

[16:23] <nothingmuch> okay

[16:23] <audreyt> which is extensive as it'd set up a prompt

[16:23] <audreyt> s/extensive/expensive/

[16:23] <nothingmuch> i'm thinking this:

[16:23] <nothingmuch> ';' is a disambiguation

[16:23] <nothingmuch> it says "this is definately the end of stmt"

[16:24] <nothingmuch> do we have the opposite?

[16:24] <nothingmuch> "this is definately not the end fof stmt?"

[16:24] <nothingmuch> does it even make sense?

[16:24] <audreyt> that's what _ would be

[16:24] <nothingmuch> i'm not sure...

[16:24] <audreyt> but I agree it looks a bit too vbesque

[16:25] <audreyt> (VB, btw, is as of 2005 finally parsable by a one-pass BNF.)

[16:25] <nothingmuch> . o O ( i hope they don't propose \\\n

[16:25] <audreyt>        )

[16:27] <lypanov> hehe

[16:27] *** kanru joined
[16:29] <TimToady> audreyt: snippit looks good--do we need to find the fallback verbiage elsewhere and countermand it?

[16:29] <audreyt> it's on the para directly above it

[16:29] <TimToady> are people going to the cafeteria again for dinner?

[16:29] <audreyt> so I think it's safe

[16:29] <audreyt> (already looked elsewhere)

[16:29] <audreyt> I'll look again at dinner

[16:30] <TimToady> audreyt: nothingmuch informs me that there's wifi in the restaurant.  (and food)

[16:30] <TimToady> nothingmuch recants

[16:30] <audreyt> ok. I've committed the S02, and we can go now

[16:31] <TimToady> I'm probably thinking of Apocalypse $IN then.

[16:41] *** kanru joined
[16:46] *** Limbic_Region joined
[17:01] *** elmex joined
[17:09] *** marmic joined
[17:38] <Limbic_Region> hmmm - anyone know why every program I run results in "user error (Error loading precompiled Prelude: Left "syntax error: line 2, column 2"

[17:38] <Limbic_Region> then it reloads from source and works fine?

[17:41] *** hcchien joined
[18:08] *** anatoly joined
[18:13] *** Arathorn joined
[18:15] *** cognominal__ left
[19:28] *** gaal joined
[19:33] <gaal> Limbic_Region: can you nopaste the first lines of src/Pugs/PreludePC.yml

[19:33] <gaal> ?

[19:34] <Limbic_Region> sure

[19:34] <Limbic_Region> perlbot nopaste

[19:34] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[19:35] <pasteling> "Limbic_Region" at 24.35.57.240 pasted "First few lines of src/Pugs/PreludePC.yml" (59 lines, 1.3K) at http://sial.org/pbot/16037

[19:36] <gaal> looks okay

[19:38] <Limbic_Region> this happened after a nmake realclean; svk pull; perl Makefile.PL; nmake

[19:38] <Limbic_Region> though the svk pull did result in over a 100 revision updates 

[19:38] * Limbic_Region ducks

[19:40] <gaal> sorry, no immediate idea why this should happen and we're still all writing slides

[19:41] <Limbic_Region> okies

[19:48] *** nothingmuch joined
[19:49] <gaal> nothingmuch: yo

[19:49] <nothingmuch> yo yo yo

[19:49] <gaal> it's faaaat albert

[19:49] <nothingmuch> what was the mc joke?

[19:50] *** lypanov_ joined
[19:51] *** lypanov left
[20:08] *** lypanov_ is now known as lypanov

[20:09] *** salty-horse joined
[20:10] *** lypanov joined
[20:11] *** justatheory joined
[20:13] <xerox> audreyt: how is it called that tool to do XML inside .hs ?

[20:17] <gaal> HSP? LINQ?

[20:17] <xerox> Hmm.

[20:18] <xerox> ...the one that lets you do f <IMG ..> = ..

[20:18] <gaal> xerox: let me peek at the slides to refresh my mem

[20:18] *** justatheory joined
[20:18] <xerox> Danke.

[20:18] *** salty-horse left
[20:21] <gaal> XTC?

[20:26] <xerox> Any url?

[20:27] <gaal> it's hsp that does it. http://www.cs.chalmers.se/~d00nibro/hsp/thesis.pdf

[20:27] <gaal> omg he was like asking me for a citation and I was like go read this thesis lol

[20:27] <xerox> Thank you.

[20:33] *** mj41_ joined
[20:48] *** macli joined
[21:40] *** r0nny_ joined
[22:07] *** _SamB_ joined
[22:14] *** nothingmuch joined
[22:15] <nothingmuch> does anybody want to help me group thing?

[22:15] <nothingmuch> think?

[22:15] <avar> the borg?;)

[22:15] *** elmex joined
[22:17] <lumi> Group think what?

[22:21] <nothingmuch> you're awake =D

[22:21] <nothingmuch> my slies, ofcourse

[22:21] <nothingmuch> slides

[22:23] <lumi> I'll help with your sly slides

[22:24] <azuroth> a horse, of course

[22:25] *** hew joined
[22:25] <nothingmuch> okay

[22:26] <nothingmuch> lumi: did you get darcs at the end of my talk or before that?

[22:26] <nothingmuch> ;-)

[22:33] <hew> Reading over [EAS]5, I'm wondering for a grammar like:

[22:33] <hew>   rule pattern          { <alternation> }

[22:33] <hew>   rule alternation :w   { <conjunction> [q(|) <self>]? }

[22:33] <hew>   rule conjunction :w   { <catenation>  [q(&) <self>]? }

[22:33] <hew>   rule catenation  :w   { <term>* }

[22:33] *** nothingmuch_ joined
[22:33] <nothingmuch_> oops

[22:33] <nothingmuch_> i pulled out the cable

[22:34] <hew> How would I flatten the degenerate(but common) case of 'term term' to just Pattern=>{Catenation=>[term, term]}

[22:34] *** nothingmuch_ is now known as nothingmuch

[22:39] <lumi> I had darcs earlier

[22:40] <lumi> So I'm in category one, yes?

[22:40] *** macli joined
[22:50] *** chris2 joined
[22:52] *** larsen joined
[22:59] *** diotalevi joined
[23:06] *** calanya joined
[23:06] *** Shillo joined
[23:18] *** rhesa joined
[23:18] *** rhesa left
[23:18] *** calanya left
[23:42] *** macli joined
[23:48] *** macli left
[23:58] <elmex> will perl6 be delivered with hurd?

[23:59] <obra> Definitely not.

[23:59] <obra> Perl 6 will ship at least a year before Perl 7.

[23:59] <obra> Hurd won't ever ship ;)

