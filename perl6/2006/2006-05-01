[00:09] *** mako132_ joined
[00:10] *** justatheory joined
[00:30] <rbysamppi> Can you method-call a multisub? multi f (Int $x: Int $z) { ... }; f 2: 3

[00:33] <audreyt> yes, but that's a fallback

[00:33] <audreyt> if method dispatch fails

[00:33] <audreyt> it pretends you did

[00:33] <audreyt> f(2, 3)

[00:33] <audreyt> instead

[00:33] <audreyt> i.e. if 2.f() can't be found

[00:33] <audreyt> (bbiab)

[00:34] <Arathorn> hum

[00:34] <Arathorn> prelude compiling seems to be broken - on the range operator

[00:34] <Arathorn> in push @rv, (~ $start)..(~ $end);

[00:35] <Arathorn> (line 412 of src/perl6/Prelude.pm)

[00:35] * Arathorn investigates as best he can

[00:41] *** macroron__ joined
[00:45] *** dvorak joined
[00:49] <Arathorn> whee, this is rather fun

[00:50] <Arathorn> losing the char '.' >> notFollowedBy (char '.') in #10167 is the kicker...

[01:09] *** hexmode joined
[01:13] *** FurnaceBoy_ joined
[01:17] <Arathorn> bah, i don't understand parsec well enough

[01:17] <Arathorn> (assuming this is parsec)

[01:38] <aufrank> Arathorn++ just for chasing it down :)

[01:44] *** ruporama joined
[01:47] *** oylenshpeegul left
[01:48] *** dvorak joined
[01:52] *** schneiker joined
[01:53] *** weinig|away is now known as weinig|sleep

[01:56] <Arathorn> Arathorn-- for not having a clue what he's doing, though

[01:57] * Arathorn defers in favour of playing with Judy, which has the advantage of being written in a language i speak :)

[01:57] <aufrank> have you looked at the "Build a Scheme in 48 hours" tutorial?

[01:57] <aufrank> it has a good parsec crash course

[01:58] * Arathorn will - although tomorrow, at this rate

[02:03] *** dvorak joined
[02:05] *** Khisanth joined
[02:11] *** ruporama left
[02:28] *** shachaf joined
[02:35] *** Arathorn is now known as Arasleeps

[02:41] <schneiker> I'd like to help with Perl6, but don't have much spare time.

[02:41] <schneiker> In the course of searching for scattered Perl6 info,

[02:41] <schneiker> I thought about starting a "perl.perl6.using"

[02:41] <schneiker> group on Google Groups, with the following focus:

[02:41] <schneiker> "Information exchange for using Perl 6.

[02:41] <schneiker> The most useful info and resource links are added to a

[02:41] <schneiker> weekly-updated "Using Perl 6 FAQ" posting. Topics include:

[02:41] <schneiker> getting started with Perl 6, incremental migration from Perl 5,

[02:41] <schneiker> developing Perl 6 tools, what early adapters are doing, etc.

[02:41] <schneiker> Apparently I cannot do this directly through Google Groups.

[02:41] <schneiker> I get this error message: "This group name is not suitable.

[02:41] <schneiker> You cannot start a group name to be similar to a Usenet group."

[02:41] <schneiker> However my newserver doesnâ€™t show "perl.perl6.*" as part of

[02:41] <schneiker> the Usenet newsgroup hierarchy (versus just in nttp.perl.org)

[02:41] <schneiker> My search efforts haven't turned up any helpful info.

[02:41] <schneiker> Information, feedback welcome.

[02:49] *** sanxiyn joined
[02:49] <FurnaceBoy_> 'similar' though

[02:49] <FurnaceBoy_> who knows what their actual rules are. Try not using  a '.'

[02:49] <FurnaceBoy_> just "Perl6 Users"

[02:49] <FurnaceBoy_> should be okay?

[02:50] <sanxiyn> Interesting to see Pugs relicensing. I use this license myself:

[02:50] <sanxiyn> http://sparcs.kaist.ac.kr/~tinuviel/fepy/COPYING

[02:50] <FurnaceBoy_> a.k.a. BSD

[02:50] <FurnaceBoy_> heh

[02:50] * FurnaceBoy_ is only joking

[02:50] <FurnaceBoy_> you could just say public domain

[02:51] <sanxiyn> FurnaceBoy_: It's more fun this way.

[02:51] <FurnaceBoy_> more swearing involved, if that's your  thing

[02:51] <sanxiyn> Official homepage of WTFPL is here: http://sam.zoy.org/wtfpl/

[02:51] <FurnaceBoy_> I came across this one recently:

[02:52] <FurnaceBoy_>  * ----------------------------------------------------------------------------

[02:52] <FurnaceBoy_>  * "THE BEER-WARE LICENSE" (Revision 42):

[02:52] <FurnaceBoy_>  * [email@hidden.address] wrote this file.  As long as you retain this notice you

[02:52] <FurnaceBoy_>  * can do whatever you want with this stuff. If we meet some day, and you think

[02:52] <FurnaceBoy_>  * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp

[02:52] <FurnaceBoy_>  * ----------------------------------------------------------------------------

[02:52] <schneiker> "Perl6 Users" should be OK, but I'd like to see it grouped with other "perl.perl6.*"

[02:52] <FurnaceBoy_> impossible schneiker.

[02:52] <FurnaceBoy_> you could, however, propose an addition to Usenet.

[02:52] <FurnaceBoy_> that would be about 100x more difficult however.

[02:52] <FurnaceBoy_> Usenet is a tree owned by root and not world writable;-)

[02:53] <FurnaceBoy_> and I think the rules are there to prevent exactly what you propose

[02:53] <FurnaceBoy_> if you want to augment Usenet, go through that procedure, but it will take longer

[02:53] <sanxiyn> FurnaceBoy_: alt.* hierarchy is easier to get in.

[02:53] <FurnaceBoy_> true.

[02:54] <FurnaceBoy_> but that wouldn't have the ring of officiality that schneiker seems to be pursuing.

[02:54] <sanxiyn> FurnaceBoy_: Big 8 needs voting.

[02:54] * FurnaceBoy_ notes 'officiality' isn't a word. sorry.

[02:54] <FurnaceBoy_> yes, I know.

[02:54] <FurnaceBoy_> depends on whether he wants quick'n'easy, or Usenet :)

[02:55] <sanxiyn> One can read http://www.eyrie.org/~eagle/faqs/big-eight.html and start the process.

[02:55] <schneiker> I got Usenet to add comp.lang.ruby, years ago, but it took several months.

[02:55] <schneiker> However perl.perl6.* does not appear to be part of actual Usenet hierarchy.

[02:55] <schneiker> That's why I was puzzled.

[02:55] <FurnaceBoy_> whatever way you cut it, a random Google Group is easier. which is why there are a zillion of them.

[02:55] <sanxiyn> File RFD to news.announce.newsgroups...

[02:55] <FurnaceBoy_> find its owners schneiker

[02:55] <FurnaceBoy_> but I warn you, this way will take work and commitment

[02:56] <FurnaceBoy_> compared to opening a random GG

[02:56] <FurnaceBoy_> the result may be worth it ...

[02:56] <FurnaceBoy_> are there no perl6 groups in perl.* ?

[02:56] * FurnaceBoy_ goes looking

[02:56] <sanxiyn> I still prefer Yahoo! Groups to Google Groups actually.

[02:56] * FurnaceBoy_ only uses Usenet

[02:57] <sanxiyn> FurnaceBoy_: I also use Gmane.

[02:57] <FurnaceBoy_> ck

[02:57] <FurnaceBoy_> worst web interface ever.

[02:57] <FurnaceBoy_> :_)

[02:57] <sanxiyn> FurnaceBoy_: Well, it has NNTP too.

[02:57] * FurnaceBoy_ thanks Allah

[02:57] <FurnaceBoy_> I can;t believe nobody has called them on it

[02:57] <FurnaceBoy_> in all these years

[02:57] <FurnaceBoy_> maybe all the sane people just use NNTP

[02:58] *** Quell joined
[02:58] <sanxiyn> FurnaceBoy_: I only use search.gmane.org from the web interface.

[02:58] <FurnaceBoy_> schneiker, yeah, there seems an opening for a 'general' group under perl.perl6.*

[02:58] <sanxiyn> (Which I found to work better than Google for some cases.)

[02:58] <FurnaceBoy_> you could probably find a way to propose one.

[02:59] <aufrank> I'm pretty sure Larry mentioned something about being to able to help in getting that process off the ground

[02:59] <FurnaceBoy_> perl.perl6.using doesn't seem to have any precedent though... I mean 'using'

[02:59] <FurnaceBoy_> there must be a better word

[02:59] <aufrank> but I could be imagining things

[02:59] <FurnaceBoy_> yes, TimToady could surely help

[02:59] <FurnaceBoy_> if anyone can

[02:59] <FurnaceBoy_> schneiker, pounce on TimToady about this

[02:59] <FurnaceBoy_> but I suggest a better word than 'using'

[02:59] <FurnaceBoy_> general has precedents in Usenet

[03:01] <schneiker> FurnaceBoy: OK. I like general better.

[03:05] <schneiker> FurnaceBoy: Recommended means to "pounce on TimToady about this"?

[03:05] <schneiker> (I'm brand new to IRC, although I have been skimming logs for a while.)

[03:07] *** hcarty joined
[03:08] *** hcarty left
[03:09] <FurnaceBoy_> schneiker, you can ping him now, if he's asleep, wait till he's around here. ?

[03:16] <schneiker> Thanks.

[03:16] <schneiker> /quit

[03:23] <aufrank> ok, I'm off for the night now too

[03:23] <aufrank> bye all

[03:23] *** q[uri] joined
[03:35] *** wilx`` joined
[03:54] *** coumbes joined
[04:34] <spinclad> Arathorn: i've been pondering looking under the hood of JudyHS, seeing as it's described as implemented through Judy1 and JudyL

[04:36] <spinclad> it seems the author doesn't see a natural or useful (or stable?) order to the keys, so doesn't provide iterators

[04:38] <spinclad> but if one needs to iterate, in an arbitrary order, a hash order should work

[04:38] <spinclad> so perhaps we may have something to contribute back to him...

[04:40] <spinclad> otoh, Judy1 + JudyHS may be all we need, i haven't seen through this to the other side yet

[04:51] *** H5N1 joined
[04:58] *** innit joined
[04:58] *** innit left
[05:20] *** gaal joined
[06:08] *** iblechbot joined
[06:33] *** cmarcelo joined
[06:54] *** Aankhen`` joined
[06:59] *** ko1_away is now known as ko1

[07:10] *** ko1 is now known as ko1_away

[07:36] *** q[uri]_ joined
[07:50] *** xinming joined
[08:12] *** elmex joined
[08:22] *** chris2 joined
[08:30] *** FurnaceBoy_ joined
[08:30] *** bernhard joined
[08:30] *** larsen joined
[08:33] <svnbot6> r10170 | audreyt++ | * Massive parsing cleanup.

[08:33] <svnbot6> r10170 | audreyt++ | * Newly implemented parses:

[08:33] <svnbot6> r10170 | audreyt++ |     @<foo> @123

[08:33] <svnbot6> r10170 | audreyt++ |     %<foo> %123

[08:33] <svnbot6> r10170 | audreyt++ |     map {...}, 1, 2, 3

[08:33] <svnbot6> r10170 | audreyt++ |     map {...} 1, 2, 3   # is this form still kosher?

[08:33] <svnbot6> r10170 | audreyt++ |     "$var\  .moose()"

[08:33] <svnbot6> r10170 | audreyt++ | * Fixed parsefails:

[08:33] <svnbot6> r10170 | audreyt++ |     1..2

[08:33] <svnbot6> r10170 | audreyt++ |     "$var."

[08:33] <svnbot6> r10170 | audreyt++ |     "$var.moose"

[08:33] <svnbot6> r10170 | audreyt++ |     rule foo { ... \{ ... }

[08:35] <gaal> what's @<foo> @123  ?

[08:35] <audreyt> short for @($<foo>) @($123)

[08:37] <gaal> what's that mean?

[08:37] <gaal> I got as far as @($<foo>)

[08:38] <audreyt> @($<foo>) means @($/.{'foo'})

[08:38] <audreyt> @($123) means @($/.[123])

[08:38] <audreyt> i.e. the 123rd capture

[08:39] <gaal> okay, so what do the two mean juxtaposed?

[08:40] <audreyt> they mean that I was too lazy to type \n

[08:41] <audreyt> TimToady: is this form still kosher?

[08:41] <audreyt>     map {$_+3} 1,2,3,4

[08:41] <gaal> thanks :)

[08:41] <audreyt> np, sorry :)

[08:41] <audreyt> TimToady: the only mention is in S03

[08:41] <audreyt>       @result = map { floor($^x / 2) }

[08:41] <audreyt>                   grep { /^ \d+ $/ }

[08:41] <audreyt>                     @data;

[08:42] <audreyt> if it's not a typo, then it needs to be clearly documented that whitespace-follows-block-literal means comma

[08:42] <audreyt> because you've specced that non-comma-follows-block-literal will no longer be arglist

[08:42] <audreyt> (S12, "it will be considered to be the final argument")

[08:42] <audreyt> so

[08:43] <audreyt> map {moose}.blah # map({moose}).blah

[08:43] <audreyt> map {moose} .blah # map({moose}, $_.blah)

[08:43] <audreyt> map {moose}, .blah # map({moose}, $_.blah)

[08:43] <audreyt> is the current pugs behaviour

[08:43] <audreyt> and I wonder how correct it is

[08:44] <audreyt> but I need to go take a nap. been in $hospital.bureaucracy for an entire day...

[08:44] <audreyt> bbiab &

[09:07] *** drbean joined
[09:09] *** dakkar joined
[09:11] <dakkar> is it possible that there are still problems re: Cabal and fps?

[09:12] <dakkar> here (ghc 6.4.1, Cabal 1.1.3) I can't compile pugs (fresh checkout, svn head)

[09:13] <dakkar> build_pugs.pl calls (I think) Setup, who then says Â«Setup: cannot satisfy dependency fps-any

[09:13] <dakkar> Setup: error reading ./.setup-config; run "setup configure" command?Â»

[09:13] <dakkar> Â«ghc-pkg listÂ» shows the fps library...

[09:53] *** KingDiamond joined
[10:05] <Juerd> audreyt: I am glad we discussed the long dot on p6l, \. is much better than . .

[10:06] <theorbtwo> It's even somewhat better then .:.

[10:07] <theorbtwo> So it's now \\(<ws>|_)+\. ?

[10:07] <theorbtwo> I'm not sure now if the _ idea was accepted or not.

[10:10] <dakkar> am I the only one unable to compile pugs at the moment? (see above)

[10:12] *** kanru joined
[10:20] *** Arasleeps is now known as Arathorn

[10:20] <Arathorn> morning folks

[10:21] <dakkar> Arathorn: what was the error you got while building pugs, yesterday?

[10:21] <dakkar> just Â«can't find Data.ByteStringÂ», or Â«can't read .setup-configÂ»?

[10:24] <Arathorn> i had three - the .. parsefail which audreyt corrected in the night, FPS not being handled by Cabal correctly(?) (which audrey fixed at the time), and a "No instance for (Typeable1 Tree)" at src/Pugs/AST/Internals/Instances.hs:138, which i fixed by swiching to ghc 6.4.1 rather than ghc-cvs in debianland

[10:24] *** cmarcelo left
[10:25] <dakkar> yesterday I got Â«can't find Data.ByteStringÂ», today I get Â«Setup: error reading ./.setup-config; run "setup configure" command?Â»

[10:25] <dakkar> of course there is no .setup-config file...

[10:27] <dakkar> fixed

[10:27] <dakkar> argh

[10:27] <dakkar> ./Setup configure --user

[10:30] <Arathorn> you shouldn't need to do that, though...

[10:31] *** trampel joined
[10:33] <dakkar> Arathorn: you tell it ;-) it's compiling now

[10:34] <Arathorn> hehe

[10:35] <dakkar> I just can't figure what I should change in the Makefile.PL to make it work without running Setup manually...

[10:38] <dakkar> ok, now that it is compiled, I'll check the parsefails due to whitespace changes and fix the tests

[11:15] <dakkar> ?eval my $path="abc";$path ~~ s:perl5[^([a-z]:)][{uc$0}];$path;

[11:15] *** evalbot_10165 is now known as evalbot_10170

[11:15] <evalbot_10170> Error:  unexpected end of input expecting block, "\\", "$/", "$!" or ":"

[11:16] <dakkar> parsefail?

[11:16] <dakkar> (the code is from File::Spec::Win32)

[11:19] *** coumbes left
[11:20] <dakkar> ?eval my $path="abc";$path ~~ s:perl5[^a][A];$path;

[11:20] <evalbot_10170> Error: No such sub: "&a"

[11:20] <dakkar> what?

[11:20] <dakkar> ?eval my $path="abc";$path ~~ s:perl5/^a/A/;$path;

[11:20] <evalbot_10170> \"Abc"

[11:21] <dakkar> ?eval my $path="abc";$path ~~ s:perl5 [^a][A];$path;

[11:21] <evalbot_10170> \"Abc"

[11:21] <dakkar> oh, now I get it

[11:26] *** iblechbot joined
[11:27] <dakkar> ?eval my $path="abc";$path ~~ s:perl5 [^([a-z]:)][{uc$0}];$path;

[11:27] <evalbot_10170> Error:  unexpected end of input expecting block, "\\", "$/", "$!" or ":"

[11:27] <dakkar> ?eval my $path="abc";$path ~~ s:perl5 [^([a-z]:)][{uc $0}];$path;

[11:27] <evalbot_10170> Error:  unexpected end of input expecting block, "\\", "$/", "$!" or ":"

[11:27] <dakkar> what's going on?

[11:36] *** mako132_ joined
[11:37] <dakkar> there's something very wrong in the pugs parser to parse regex...

[11:38] <clkao> dakkar!

[11:39] <dakkar> clkao!

[11:39] <dakkar> I'm trying to fix the tests, but I found some strangeness in the rx parser (see above)

[11:40] <dakkar> did the syntax of 'require' change recently?

[11:41] <dakkar> 'Junction of Something' does not parse (Â«unexpected "o", expecting comment or variable nameÂ»)

[11:42] <dakkar> I should write down these problems...

[11:52] <clkao> \. is ugly!

[11:52] <Arathorn> just as ugly as .:, imo

[11:53] <Arathorn> especially as the : looked attached to the term it prefixed, rather than part of a longdot

[11:53] <dakkar> this whole whitespace-sensitivity thing doesn't feel very DWIM to me...

[11:53] <audreyt> dakkar: fixing

[11:53] <dakkar> audreyt: which one?

[11:54] <audreyt> s[][]

[11:54] <audreyt> s!!! works

[11:54] <audreyt> as does s////

[11:54] <audreyt> but s[][] not

[11:54] <audreyt> a sec

[11:54] <audreyt> sorry for breaking it

[11:54] <dakkar> oh, thanks

[11:54] <Arathorn> the white-space sensitivity stuff feels amazingly unDWIM to me too :(

[11:55] <dakkar> audreyt: s{}{} has the same problem, btw

[11:55] <audreyt> sure

[11:55] <Arathorn> we sacrifice compulsory brackets at the expense of our immortal souls...

[11:55] *** dvorak joined
[12:03] <dakkar> is there a more recent smoke table than the one audreyt linked to?

[12:07] <audreyt> yes

[12:07] <audreyt> see smoke.pugscode.org

[12:08] <audreyt> http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.11-r10148-freebsd-normal--1146485254-3339--10735-10523-212-1348-1610-4--5f15fff81963ebf5af2fcbad72ca4201.html

[12:09] <dakkar> got it

[12:11] <audreyt> s[][] fixed

[12:11] <audreyt> committing

[12:11] *** szbalint joined
[12:14] *** kolibrie joined
[12:19] <svnbot6> r10171 | audreyt++ | * Parser: Allow nested begin/end pairs in regex body again:

[12:19] <svnbot6> r10171 | audreyt++ |     rx[ [a-z] ]

[12:19] <svnbot6> r10171 | audreyt++ |   however, the parser cannot currently distinguish between:

[12:19] <svnbot6> r10171 | audreyt++ |     rx[ \[a-z]      # should be valid

[12:19] <svnbot6> r10171 | audreyt++ |     rx[ \\[a-z] ]   # should be valid as well

[12:19] <svnbot6> r10171 | audreyt++ |   as the escape codes are passed thru to the rules engine

[12:19] <svnbot6> r10171 | audreyt++ |   without further manipulation.  Thinking about how to solve this...

[12:21] *** xerox_ is now known as xerox

[12:21] *** r0nny joined
[12:21] <Juerd> [mac mini]--  # sometimes refuses to eject, then requires reboot.

[12:21] <Juerd> Sometimes being twice in 12 cd's alreday.

[12:21] <Juerd> already.

[12:22] <Arathorn> hope you have enough paperclips handy

[12:22] <Juerd> Arathorn: No such emergency eject thingy.

[12:23] <Juerd> audreyt: Well, \w characters that are escaped are special to the engine, while \W characters are special to the engine when NOT escaped.

[12:23] <Juerd> audreyt: Also, \w characters are no longer valid delimiters

[12:23] <audreyt> ah. point.

[12:25] <Juerd> But I think there's, ultimately, no other solution than to have the full rule grammar embedded

[12:25] <Juerd> 'cause there's also rx<"...]...">]

[12:25] <Juerd> s/</<[/

[12:25] <Juerd> (That was a p5 regex ;))

[12:26] <dakkar> pugs's build system is fragile... but I don't know enough to change it...

[12:26] <dakkar> Â«Wasn't able to find 'Syck_stub.o', abortingÂ»

[12:27] <audreyt> oh no, not that again

[12:27] <audreyt> which ghc version? is Syck_stub anywhere in dist/?

[12:27] <audreyt> (it's really Cabal 1.0 that is very fragile.)

[12:27] <dakkar> ghc 6.4.1, Cabal 1.1.3

[12:28] <audreyt> yay, another different point version :/

[12:28] <audreyt>  find dist |grep Syck_

[12:28] <dakkar> and no, no stub anywhere in sight

[12:28] <audreyt> ok. I think I can fix it.

[12:28] <dakkar> it's still in src/

[12:28] <audreyt> a sec

[12:29] <dakkar> should I copy it?

[12:29] <audreyt> well, to get it working, sure

[12:29] <audreyt> I'll have a better (and saner) fix in a bit

[12:29] <audreyt> cp the stub to dist/build/src/Data/Yaml/Syck_stub.o

[12:29] <dakkar> oops

[12:30] <dakkar> it's Syck_stub.c, no .o

[12:30] <audreyt> I'm implementing the saner fix (move Data.Yaml.Syck to third-party)

[12:30] <audreyt> which is good, as it allows D.Y.S. be used separately

[12:30] <dakkar> ok, thanks again

[12:31] <audreyt> np :) thanks for reporting

[12:31] * dakkar is great at finding obscure bugs

[12:32] <dakkar> audreyt: while you are there, do you have any idea why I have to manually run Â«./Setup configure --userÂ» to make it find fps?

[12:36] <audreyt> I believe it's a Cabal 1.1.3-specific thing :/

[12:36] *** trampel left
[12:37] <audreyt> try it again

[12:37] <dakkar> ok, I'll do it by hand

[12:37] <nnunley> audreyt: Could it be because the Pugs.cabal file doesn't refer to third-party?

[12:37] <audreyt> nope, try 10172

[12:38] <audreyt> nnunley: no... it's not that

[12:38] <audreyt> dakkar: r10172 should fix that

[12:38] <audreyt> (essentially by adding --user for you)

[12:38] <dakkar> ok

[12:38] <dakkar> I'm fixing a lot of whitespace-related parsefails, btw

[12:39] <svnbot6> r10172 | audreyt++ | * build_pugs: add --user.

[12:39] <audreyt> yay

[12:39] <Juerd> audreyt: I think the whitespace rules for . and .= should be the same, for consistency: no whitespace around .=, if it's also disallowed around .

[12:39] <audreyt> dakkar++ dakkar++

[12:39] <Juerd> Uglier, but easier to predict.

[12:39] <audreyt> er, uhm, hm, I thought the other way around.

[12:39] <audreyt> I see .= as infix

[12:39] <audreyt> not postfix-method

[12:39] <Juerd> Also, with .foo meaning $_.foo, I'd expect .=foo to mean $_.=foo; when it does not, it should probably not mean anything, and die with an appropriate error message.

[12:40] <Juerd> audreyt: .= is based on .

[12:40] <Juerd> Not on +=

[12:40] <Juerd> The RHS of .= is not a normal expression

[12:40] <audreyt> I think it is

[12:40] <Juerd> It is, like .'s RHS, a method name.

[12:40] <Juerd> i.e. bareword, or simple variable.

[12:40] <audreyt> when the pugs parser sees

[12:41] <audreyt> $_ .= ......

[12:41] <audreyt> it transforms it as

[12:41] <Juerd> I don't reason from a parser's point of view...

[12:41] <audreyt> $_ .= $_......

[12:41] <dakkar> audreyt: r10172 fixed the '--user'. now I only have the Syck_stub problem

[12:41] <audreyt> Juerd: I see your point

[12:42] <audreyt> my Dog $fido.=new;

[12:42] <audreyt> is what you mean

[12:42] <Juerd> That, and other things.

[12:42] <audreyt> I think it's a bit too draconian; we can easily fix the whitespace problem.

[12:42] <Juerd> Mostly, I'm worried about confusion if they different whitespace rules exist.

[12:42] <Juerd> I also think of it the other way around: if whitespace is allowed around .=, it should be allowed around .

[12:42] <audreyt> it is a normal infix macro... I think

[12:42] <Juerd> It's not a macro, I think.

[12:42] <audreyt> whilst as . is strictly postfix

[12:43] <audreyt> ok. we Think Differently

[12:43] <audreyt> that's fine :)

[12:43] <Juerd> It isn't just that $foo.=bar always translates to $foo = $foo.bar

[12:43] <svnbot6> r10173 | audreyt++ | * Beginning to implement HsSyck.

[12:43] <audreyt> it'd make $foo.=bar in the same cate as $foo.+bar

[12:43] <audreyt> instead of $foo += bar

[12:43] <dakkar> in enum.t: enum <<:Alpha<A> Bravo Charlie Delta Echo>>

[12:43] <Juerd> It could have to call the inline-optimized version of bar

[12:44] <Juerd> Of which I forgot the syntax :)

[12:44] <dakkar> gives a parsefail at the <A>

[12:44] <Juerd> audreyt: I think that would be a good solution

[12:44] <dakkar> changing it to enum <<:Alpha<<A>> Bravo Charlie Delta Echo>> works

[12:44] <audreyt> dakkar: a bug. fixing

[12:44] <Juerd> Gotta go; afk

[12:44] <dakkar> ok, so I won't touch the test

[12:45] <audreyt> fixed

[12:45] <audreyt> committed

[12:46] <svnbot6> r10174 | audreyt++ | * Lexer: In

[12:46] <svnbot6> r10174 | audreyt++ |     <<  < x > >>

[12:46] <svnbot6> r10174 | audreyt++ |   do not commit on '<<' when we see inner '<'.

[12:46] <svnbot6> r10174 | audreyt++ |   Reported by dakkar.

[12:46] <dakkar> is 1..* still valid syntax?

[12:47] <audreyt> it becomes valid syntax last week

[12:47] <audreyt> havn't implemented term * yet

[12:48] <dakkar> so I  won't change the lazy_list test

[12:48] *** hexmode joined
[12:48] <audreyt> k

[12:51] <dakkar> I'm changing a lot of lives_ok{...} to lives_ok {...}

[12:51] <dakkar> is that needed, or am I manking some other problem?

[12:51] <dakkar> masking

[12:52] <audreyt> mm

[12:52] <audreyt> I think it's always needed now

[12:52] <audreyt> postfix {} is always hash deref

[12:53] <dakkar> ok, so I fixed right

[12:53] * audreyt misses the old backtracking dwim days

[12:53] <svnbot6> r10175 | audreyt++ | * HsSyck.

[12:53] <audreyt> dakkar++

[12:53] <dakkar> is q:to/SOMETHING/ implemented?

[12:53] <clkao> new commits keep coming while i am compiling

[12:55] <Arathorn> that's a good thing, no?

[12:56] <dakkar> there's something screwy in q:to... either the implementation, or the usage

[12:59] *** Coke joined
[13:00] <audreyt> both.

[13:01] <dakkar> what type is the parameter to the :to adverb? a regex? a string?

[13:02] <clkao> is pugs startup slower again

[13:02] <dakkar> clkao: seems so

[13:03] *** bernhard joined
[13:03] <svnbot6> r10176 | dakkar++ |  r7940@nautilus:  dakkar | 2005-11-12 17:54:58 +0100

[13:03] <svnbot6> r10176 | dakkar++ |  local branch

[13:03] <svnbot6> r10176 | dakkar++ |  r10192@nautilus:  dakkar | 2006-05-01 12:59:37 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10193@nautilus:  dakkar | 2006-05-01 13:18:05 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10194@nautilus:  dakkar | 2006-05-01 13:50:32 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10195@nautilus:  dakkar | 2006-05-01 14:04:11 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10196@nautilus:  dakkar | 2006-05-01 14:12:00 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10197@nautilus:  dakkar | 2006-05-01 14:20:29 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10200@nautilus:  dakkar | 2006-05-01 14:39:12 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10203@nautilus:  dakkar | 2006-05-01 14:43:18 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10204@nautilus:  dakkar | 2006-05-01 14:45:00 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  wrong fix, revert

[13:03] <svnbot6> r10176 | dakkar++ |  r10207@nautilus:  dakkar | 2006-05-01 14:50:09 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <svnbot6> r10176 | dakkar++ |  r10208@nautilus:  dakkar | 2006-05-01 14:57:42 +0200

[13:03] <svnbot6> r10176 | dakkar++ |  long dot & whitespace fixes in tests

[13:03] <dakkar> oops...

[13:04] <Coke> GAH.

[13:04] * clkao grins

[13:04] <dakkar> svk ci -l ...

[13:04] <dakkar> i.e. svk push -l

[13:04] <Coke> (worse for my client, since each of those commit lines turned into 3 lines. whoops. Need to fix that.)

[13:04] <xinming> --verbatim

[13:04] <audreyt> pugs startup should be fast enough

[13:04] <audreyt> if you are playing with tests without "make install"

[13:04] <audreyt> try

[13:04] <audreyt> make ; ./pugs -Iblib6/lib t/foo/bar.t

[13:04] <dakkar> xinming: yeah, my fault

[13:04] <clkao> i was just doing ./pugs -e1

[13:05] <clkao> hurrah, you fixed js backend?

[13:05] <audreyt> I fixed PIL2JS

[13:05] <clkao> still got fatal to run the generated js

[13:05] <audreyt> havn't really investigated codegen

[13:05] <audreyt> yes

[13:05] <audreyt> take a look?

[13:06] <dakkar> ok, with that badly-described commit, all the parsefails in the test suite that were directly caused by whitespace-rulings should be fixed

[13:06] <svnbot6> r10177 | audreyt++ | * Sanity fix and warning removal for HsSyck API.

[13:08] <audreyt> dakkar++

[13:08] <dakkar> now, make distclean;svk up;make

[13:09] <clkao> how to tell javascript to carp::confess?

[13:10] <audreyt> alert()?

[13:10] * audreyt has noidea

[13:10] <audreyt> oh, you mean stack trace

[13:10] <audreyt> doubly no idea.

[13:10] <dakkar> clkao: you mean, die with a stacktrace?

[13:10] <clkao> yes

[13:10] <clkao> i thought throw would do

[13:10] * dakkar looks in his JavaScript book

[13:10] *** Qiang joined
[13:11] <xinming> src/Pugs/Lexer.hs:232:24: Not in scope: `startRule'

[13:11] <xinming> Build failed: 256 at util/build_pugs.pl line 96.

[13:11] <xinming> make: *** [pugs] Error 2

[13:11] <xinming> audreyt: I got this while compiling

[13:11] <dakkar> xinming: me too, trying after a make distclean

[13:12] <audreyt> fixed

[13:12] <audreyt> the Syck_stub nightmare is fixed too

[13:13] <audreyt> there's no need to rm Syck every build, yay

[13:13] <gaal> audreyt++

[13:13] <dakkar> audreyt: you're faster than my compiler!

[13:13] <audreyt> considering it's GHC, is't not very hard...

[13:13] <svnbot6> r10178 | audreyt++ | * Lexer: oops, typo. xinming++

[13:13] <audreyt> gaal: MIT license okay with you for HsSyck?

[13:14] * audreyt notes Why The Lucky Stuff attached the MIT license for syck but called it the BSD license.

[13:14] <Arathorn> clkao: Opera prints pretty stack traces by default - otherwise in Spidermonkey, if you're using exceptions properly, you can do, uhm...

[13:14] *** Limbic_Region joined
[13:14] <dakkar> clkao: I think that the side-effects of 'throw' are implementation-defined...

[13:14] <gaal> audreyt: sure, as is sqlite non-

[13:14] <audreyt> yay. gaal++

[13:14] <gaal> also beer-license

[13:14] <clkao> the problem is jsbackend things the JS::inline()-returned function requires one arg. how does it know?

[13:15] <gaal> or wine-license

[13:15] <clkao> s/function/sclosure

[13:15] <gaal> or I'll let you crash at my place when you're at a conf or just touring-license

[13:15] <audreyt> but I'm not fine with Syck's Death and Repudiation license

[13:15] <dakkar> clkao: js functions have a quasi-signature attribute

[13:16] <audreyt> "This software may not be used directly by any living being... f you are found to be a ghost or angel, you will be punished to the fullest extent of the law..."

[13:16] <clkao> ya, i know, but the pil2js backend shouldn't know, because that's something not evaled yet

[13:16] <dakkar> ???

[13:16] <audreyt> fortunately it's dual-licensed.

[13:16] * gaal knows of no jusdictions that have laws against ghosts using software...

[13:17] <gaal> there used to be a zine back in the BBS days, Scream I think it was called

[13:17] <gaal> the author did some interesting experiments - one time he asked that people not read his stuff at a certain hour

[13:17] <gaal> he wanted a rest from being accessed

[13:17] <gaal> another issue was "torn"

[13:18] <gaal> with ascii-art ommisions\

[13:18] <gaal> worked well in 80-char days :)

[13:19] <gaal> ooh I know, we can put in a moose license: "to use this library in your code, you must form a mental image of a moose. there, that wasn't so bad, was it?"

[13:19] <dakkar> lol

[13:20] <Limbic_Region> gaal - that would be very bad

[13:21] <Limbic_Region> apparently merlyn would not be able to use the library

[13:21] <gaal> no moose no use!

[13:21] <Limbic_Region> according to him - he can't picture things in his head

[13:21] <gaal> hey, I never said he should form it in his head. if he drew a picture of a moose that would be cool also

[13:22] <Limbic_Region> mental image isn't in one's head?

[13:22] <Limbic_Region> </PITA>

[13:23] <gaal> (Who said license discussions had to be a drag? All you need to do to liven them up is to invent your own dra^H^H^H glorious license)

[13:23] <gaal> no, mental can be a Californian adjective

[13:25] <clkao> audreyt: maybe as_js in PIL/PApp?

[13:26] <audreyt> clkao: sorry, I'm still in syckland

[13:26] <audreyt> maybe it's the END block causing problems... not sure

[13:26] <audreyt> I wonder if PIL2JS can load the YAML representation instead

[13:27] <audreyt> that can fix things

[13:27] <clkao> *nod*

[13:28] <gaal> bbl &

[13:28] * dakkar is ironing shirts

[13:33] * audreyt proceeds to (potentially) break everybody's build by committing the HsSyck "fix"

[13:33] <dakkar> ok, rm -rf again ;-)

[13:33] <audreyt> nono

[13:33] <audreyt> no need to do that

[13:33] <audreyt> just run perl Makefile.PL :)

[13:33] <dakkar> really? great!

[13:33] <audreyt> (but heh, if you feel like rm-rf ...)

[13:34] <lumi> ghc is evil

[13:35] <svnbot6> r10179 | audreyt++ | * Move Data.Yaml.Syck to HsSyck in third-party.

[13:36] <dakkar> src/DrIFT/YAML.hs:45:24: Not in scope: `nodeElem'

[13:36] <svnbot6> r10180 | audreyt++ | * Pugs.Run: more YAML fix.

[13:37] <audreyt> dakkar: aww

[13:37] <audreyt> dakkar: have you rerun makefile.pl?

[13:39] <xinming> /tmp/ghc13730.hc:8:29: ../../syck/syck.h: No such file or directory

[13:39] <xinming> Build failed: 256 at util/build_pugs.pl line 96.

[13:39] <xinming> make: *** [pugs] Error 2

[13:39] <xinming> already run 'perl Makefile.PL'

[13:39] <dakkar> audreyt: yes, I did

[13:39] <dakkar> should I try in a fresh working copy?

[13:40] <audreyt> rm -rf dist/build/Data

[13:40] <audreyt> xinming: try that?

[13:41] <audreyt> dist/build/src/DAta rather

[13:41] <xinming> still fails...

[13:42] <xinming> Compiling Data.Yaml.Syck   ( src/Data/Yaml/Syck.hs, dist/build/src/Data/Yaml/Syck.o )

[13:42] <xinming> /tmp/ghc14393.hc:8:29: ../../syck/syck.h: No such file or directory

[13:42] <xinming> Build failed: 256 at util/build_pugs.pl line 96.

[13:42] <xinming> make: *** [pugs] Error 2

[13:42] <audreyt> there really shouldn't be a src/Data/Yaml/Syck.hs anymor

[13:43] *** aufrank joined
[13:43] <xinming> make clean; perl Makefile.PL; make

[13:43] <audreyt> rm -rf src/Data/Yaml/*

[13:43] <audreyt> and then update again from svn?

[13:44] <xinming> if this time fails, I think I'll checkout a fresh copy, as in svk, co doesn't need the connection. :-)

[13:44] <svnbot6> r10181 | audreyt++ | * rm -rf src/Data/Yaml/.

[13:44] <aufrank> audreyt: can I bug you with an svk question?

[13:45] <dakkar> aufrank: ask clkao, he wrote it

[13:45] <aufrank> heh, he just showed up in the other channel.  that's what I get for being impatient

[13:45] <aufrank> sorry for the noise =\

[13:45] <audreyt> that's fine :)

[13:45] <dakkar> ok, after rm src/Data/Yaml/* it seems to compile

[13:46] <audreyt> whew.

[13:47] <dakkar> 'seems' only...

[13:47] <dakkar> src/Pugs/PIL1/Instances.hs:1:0:

[13:47] <dakkar>     conflict: module `Data.Yaml.Syck' belongs to the current program/library

[13:47] <dakkar>     and also to package HsSyck-0.1

[13:47] <Coke> is http://svk.elixus.org/ the best place to go for svk info?

[13:47] <dakkar> Coke: yes, or the IRC channel

[13:48] <aufrank> that and #svk

[13:48] <aufrank> not #perl6, as I just proved ;)

[13:48] <Coke> #svk on this server?

[13:48] <clkao> yes

[13:48] <xinming> Coke: yes, and IMO, you'd better have experience with svn. they are really simililar except svk rocks... :-)

[13:49] <audreyt> dakkar:  ./Setup unregister

[13:49] <svnbot6> r10182 | audreyt++ | * link in HsSyck.

[13:50] <Coke> /me tries to build pugs again, and wonders if it'll work this time.

[13:50] <dakkar> audreyt: where?

[13:50] <audreyt> dakkar: toplevel pugs dir

[13:50] <audreyt> this is if you had "make install" before

[13:50] <dakkar> never did install...

[13:50] <audreyt> aw.

[13:51] <audreyt> hm.

[13:51] <audreyt> I wonder why.

[13:51] <audreyt> is there still any Syck related stuff in dist or src for you?

[13:52] <xinming> collect2: ld returned 1 exit status

[13:52] <xinming> Build failed: 256 at util/build_pugs.pl line 193.

[13:52] <xinming> make: *** [pugs] Error 2

[13:52] <audreyt> xinming: pull and try again

[13:52] <xinming> bbl, do a fresh install

[13:52] <audreyt> no need to do that

[13:52] <audreyt> :)

[13:53] <audreyt> just pull and "make" again should work

[13:53] <dakkar> ./dist/lib/HsSyck-0.1/ghc-6.4.1/Data/Yaml/Syck.hi

[13:53] <dakkar> ./dist/lib/HsSyck-0.1/ghc-6.4.1/libHSHsSyck-0.1.a

[13:53] <dakkar> ./dist/lib/HsSyck-0.1/ghc-6.4.1/HSHsSyck-0.1.o

[13:53] <dakkar> ./dist/build/src/syck/syck.o

[13:53] <dakkar> ./dist/build/src/syck/syck_st.o

[13:53] <dakkar> ./dist/build/Data/Yaml/Syck.hi

[13:53] <dakkar> which should I kill?

[13:53] <audreyt> ./dist/build/Data/Yaml/Syck.hi

[13:53] <audreyt> actually all three indist/build

[13:55] <dakkar> same result after a 'make'

[13:56] <audreyt> duplicated on feather. sec

[13:57] <xinming> Could not find module `Data.Yaml.Syck':

[13:57] <xinming>   use -v to see a list of the files searched for

[13:57] <xinming>   (imported from src/Pugs/AST/Internals/Instances.hs)

[13:57] <xinming> Build failed: 256 at util/build_pugs.pl line 96.

[13:57] <xinming> make: *** [pugs] Error 2

[13:57] <svnbot6> r10183 | audreyt++ | * GHC-specific for now for HsSyck

[13:58] <xinming> fresh copy...

[13:58] <audreyt> xinming: that's fixed in 10184

[13:58] <audreyt> run Makefile.PL again :)

[14:00] *** jserv-- joined
[14:00] <svnbot6> r10184 | audreyt++ | * try again...

[14:01] <dakkar> trying

[14:02] * xinming is considering if he should C-c and restart....

[14:02] <audreyt> dakkar:  find dist |grep Instance | xargs rm

[14:02] <audreyt> xinming: not if you were on 10184

[14:02] *** hexmode joined
[14:02] <audreyt> (which I think you were)

[14:03] <xinming> yes, 10184

[14:04] <dakkar> audreyt: 10184 works on a fresh checkout

[14:04] <dakkar> apart from Â«Generating precompiled Prelude, Test... user error (no parse: YamlNil)Â»

[14:04] <dakkar> which doesn't stop the process

[14:05] <dakkar> on the non-fresh copy, even after romeving all Instance, still conflicts

[14:07] <audreyt> weird.

[14:10] *** theorbtwo joined
[14:11] *** vel joined
[14:22] *** marmic joined
[14:22] *** xerox is now known as xerox__

[14:23] <dakkar> ok, I'm stopping my work on pugs here, today.

[14:24] <svnbot6> r10185 | dakkar++ | long dot & whitespace fixes in tests

[14:24] <audreyt> dakkar++ dakkar++ dakkar++

[14:24] *** vel joined
[14:25] <xerox__> Why so?

[14:25] <dakkar> there are still parsefails, but I can't figure them out: they don't seem to depend on whitespace

[14:33] <audreyt> xinming: I guess dakkar means "for today"

[14:33] <audreyt> not, like, he'll be gone tomorrow

[14:33] <audreyt> er sorry

[14:33] <audreyt> s/xinming/xerox/

[14:34] *** dvorak joined
[14:35] <dakkar> yes, you'll hear from me again ;-)

[14:35] <Arathorn> hehe

[14:37] *** justatheory joined
[14:42] *** FurnaceBoy_ joined
[14:48] <svnbot6> r10186 | audreyt++ | * do not print "YamlNil" error message when there's no prelude.

[14:52] <audreyt> ?eval 1+1

[14:52] *** evalbot_10170 is now known as evalbot_10184

[14:52] <evalbot_10184> 2

[14:59] *** schneiker joined
[15:00] *** FurnaceBoy_ is now known as FurnaceBoy

[15:03] <schneiker> TimToady:  What do you think about establishing Usenet comp.lang.perl6.general?

[15:03] <schneiker> (I did the Usenet registration process for comp.lang.ruby years ago.)

[15:03] <schneiker> I'd like to use it to accumulate material for a Perl6 Eary Adapter FAQ to be posted

[15:03] <schneiker> there weekly, with info and useful links, etc.

[15:04] <audreyt> people still use usenet? </troll>

[15:05] <Arathorn> google killed usenet :(

[15:05] <audreyt> (I think it's a good idea -- I did registraion for tw.bbs.religion.perl on, oh, 1996)

[15:05] <audreyt> it's been nearly 10 years, wow.

[15:06] <schneiker> Got to run to $work.

[15:06] <schneiker> Will check back evening PDT (actually AZ MST).

[15:06] <schneiker> audreyt: old habit, true, but also often handy way to focus searches.

[15:06] <schneiker> Arathorn: Perl NGs still get quite a bit of traffic.

[15:06] <Arathorn> schneiker: for sure. still, usenet could be much more alive if its archiving hadn't been butchered by google groups

[15:10] <FurnaceBoy> actually I don't think that's entirely true

[15:11] <FurnaceBoy> Google Groups would have given Usenet usage a large shot in the arm,

[15:11] <FurnaceBoy> but you can argue the wrong type of users (more eternal September)

[15:12] <FurnaceBoy> I see a lot of activity in the groups I hang in, anyway

[15:13] <audreyt> the last time I followed usenet actively

[15:13] <audreyt> was during the saga of Ellora at rec.game.roguelike.nethack

[15:13] *** mkhl joined
[15:13] <audreyt> that was a brilliant work.

[15:14] <avar> Arathorn: I thought AOL killed Usenet when it started the September of forever?

[15:14] <Arathorn> well, i'd argue that GG kills both markets - its UI was/is unusable for powerusers, and too daunting for AOLers

[15:14] *** mkhl left
[15:14] <avar> Arathorn: Why is it unusable?

[15:14] <avar> Arathorn: I've used it twice or thrice with good results.

[15:15] <avar> I managed to read & post to a popular newsgroup, google groups helped me to get from A to B => GG is good

[15:15] <Arathorn> broken threading, frames, broken posting, broken message-list syncing, non-proportional fonts, obfuscated message headers, etc.

[15:15] <Arathorn> the latter 2 points got fixed over the years, of course

[15:15] <avar> you might argue not great, but certanly not unusable.

[15:15] <Arathorn> and *terrible* performance for searching

[15:15] <avar> Arathorn: What do you suggest instead?

[15:15] <Arathorn> which is hilarious, given how it's run by google :|

[15:16] * Arathorn built an alternative setup during the deja/GG hiatus called siliconarchive.net

[15:16] <Arathorn> which is very down atm, and never made it out of beta

[15:16] <Arathorn> but it was a damn sight better, imo ;)

[15:17] *** macintsh joined
[15:18] <macintsh> story of the day to make us all feel old

[15:18] <macintsh> my brother was having some regex problems and I was helping him

[15:18] <macintsh> at one point he mentioned that he was using sed

[15:18] <macintsh> I said, "Oh, I thought this was perl"

[15:18] <macintsh> his answer: "i thought sed just called perl"

[15:19] <Arathorn> heh

[15:19] <audreyt> maybe his system maps sed to psed

[15:19] <audreyt> in which case that'd be true

[15:19] <Arathorn> in other news, does anyone with Judy-fu have any idea why http://rafb.net/paste/results/y5uyuv89.html melts?

[15:20] *** js0000 joined
[15:21] <audreyt> $ ./a.out

[15:21] <audreyt> Got PValue for 'a' as 0xffffffff

[15:21] *** eric256 joined
[15:23] <Arathorn> uhm

[15:24] <avar> This would be a funny name if "PV" stood for "Perl Value"

[15:24] <Arathorn> how about http://rafb.net/paste/results/9K870438.html ?

[15:24] <avar> Since you could read PValue as (Perl Value)alue or (Perl)Value, or ...

[15:25] * avar hides

[15:25] * Arathorn hopes that this isn't dear ol' debian being crap

[15:25] <audreyt> Arathorn: bar=foo is bad

[15:26] *** chris2 joined
[15:26] <cognominal> does use of  $!foo short-circuit accessors?

[15:26] <audreyt> JLI is a macro that has & before bar

[15:26] <audreyt> cognominal: yes, that's the idea, though not the implementation

[15:26] <audreyt> Arathorn: if you s/bar/foo/g all works

[15:26] <cognominal> audreyt: thx

[15:26] <Arathorn> right

[15:26] * Arathorn assumed that Pvoid_t's were, well, pointers to void types

[15:26] <Arathorn> and could be assigned around as such

[15:27] <Arathorn> thanks for checking it

[15:27] <audreyt> np :)

[15:28] <audreyt>     JLI(PValue, foo, 'a');

[15:28] <audreyt>     *PValue = 123;

[15:28] <audreyt> and finally

[15:28] <audreyt>     fprintf(stderr, "Got PValue for 'a' as %i\n", *PValue);

[15:28] <audreyt> is the usual usage

[15:29] <cognominal> can we have both %.foo and @%.foo on a given class?

[15:29] <cognominal> oops

[15:29] <cognominal> I meant: can we have both %.foo and @.foo on a given class?

[15:30] <audreyt> no.

[15:30] <cognominal> that would preclude calling %.foo with array context?

[15:30] <audreyt> actually

[15:30] <audreyt> has %.foo;

[15:30] <audreyt> is just

[15:30] <audreyt> has $.foo is Hash;

[15:30] <audreyt> i.e. it concerns the storage

[15:31] <audreyt> the public-facing interface remains constant

[15:31] <audreyt> if you have declared

[15:31] <audreyt> has $.foo;

[15:31] <audreyt> you can use %.foo freely in your method body

[15:31] <audreyt> and vise versa

[15:32] <cognominal> so that is for module name space, not instance name space that sigils are part of the name.

[15:32] <audreyt> $.foo is really just short for self.foo :)

[15:32] <audreyt> (it used to be ./foo)

[15:33] <cognominal> reading meijer, I think that would be nice to support something like  my @?a (array with 0 or 0 element), @+a (array with more than one element) and so on

[15:34] <audreyt> my @a is (Array where .elems < 1)

[15:34] <audreyt> my @a is (Array where .elems < 2)

[15:34] <cognominal> that would slightly complexify the current type system but would give support for sp,e feaire of xml schemas

[15:35] <audreyt> I think constraint types can already do that

[15:35] <cognominal> ho, so we alrady got that semantically

[15:35] <audreyt> albeit checked at runtime

[15:35] <audreyt> not compile time

[15:35] <audreyt> for compile time checking, a great deal more thought is needed

[15:35] <cognominal> Meijer system does not seem complecated as type system go.

[15:36] <audreyt> it's not. it's at least not dependent typing.

[15:36] <cognominal> It seems to be a slight complexification of perl that know only about scalar, hash and arrays

[15:37] <Limbic_Region> and globs and formats

[15:37] <cognominal> no I don't thinks it really as complex as dependant typing

[15:37] <audreyt> I do wish to work out more 6.2831 (typesystem) details

[15:37] <audreyt> with Erik during the Redmond hackathon

[15:37] <audreyt> but for now my brain is still on 6.28 :)

[15:37] <cognominal> you mean Eriki meijer?

[15:37] <audreyt> yeah

[15:37] <cognominal> cool

[15:37] <audreyt> going to visit him June 19~24

[15:37] <audreyt> the week before YAPC::NA

[15:38] <audreyt> and give a talk there

[15:38] <audreyt> maybe also visit more lambdafolks nearby, e.g. @ galois.com

[15:38] <cognominal> he seems both knowledgeable and practical about type systems.

[15:38] <cognominal> and Perl is all about practicalyity

[15:39] <audreyt> Erik's design has many things in common with perl6 design :)

[15:39] <rafl> Juerd: Could you please send my PBP to me?

[15:39] <cognominal> I noticed...

[15:40] * eric256 wishes he could manage all the travling audreyt does. ;)  ...or even half

[15:41] <audreyt> actually, June 15~16 I'll be @ Oslo

[15:41] <audreyt> so it's like, three time zones

[15:41] <audreyt> in 72 hours

[15:41] <audreyt> tw -> eu -> tw -> us

[15:42] <audreyt> never tried that before; may or may not work :)

[15:42] <TimToady> audreyt: foo {...} 1,2,3 is wrong, needs a comma.

[15:42] <audreyt> then S04 needs updating. I'll do that.

[15:42] <TimToady> k

[15:42] <audreyt> er I mean S03.

[15:42] <TimToady> k2

[15:43] <audreyt> so what about

[15:43] <audreyt> foo {...}   ,1,2,3

[15:43] <audreyt> that's fine right?

[15:43] <TimToady> I'd be okay with not making it fine, but if you're okay with making it fine, that also works...

[15:44] <audreyt> I think making it fine is slightly less surprising :)

[15:45] <audreyt> foo({...}.moose)

[15:45] <audreyt> is still fine, right?

[15:45] <audreyt> it's just

[15:45] <audreyt> foo {...}.moose

[15:45] <audreyt> is parsed differently

[15:45] <particle_> will 'my $foo=  $bar;' do what it does in perl5, or am i stuck with using ' = ' for assignment in p6?

[15:45] <TimToady> { } terminates list if next thing is . yes

[15:46] <audreyt> particle_: until someone defines postfix =, you should be fine

[15:46] <wolverian> output as lines? :)

[15:46] *** jsiracusa joined
[15:46] <avar> Can one add stuff like "s[]{}g" to perl 6? I.e. define a function that looks like that sort of op?

[15:47] <audreyt> sure, it's called a macro

[15:47] <avar> (replacement, or y///)

[15:47] *** wilx`` joined
[15:47] <avar> is the macro aware of what sort of quote delimiters you used?

[15:47] <TimToady> the macro gets control of the parse right after the macro name.

[15:48] <particle_> audrey, does my example extend to all assignment ops?

[15:48] <audreyt> particle_: it extends to all infix-that-may-clash-with-postfix.

[15:48] <audreyt> including but not limited to assignment

[15:48] <TimToady> S02 discusses this.

[15:48] <avar> TimToady: And I presume quote delimiters are not parts of the name?;)

[15:48] <particle_> ah, i'll have a look there.

[15:49] <TimToady> not unless you've defined the name to include them.

[15:49] <TimToady> macro regognition is not predicated on ident recognition.

[15:49] <TimToady> it's just "longest token".

[15:49] <svnbot6> r10187 | audreyt++ | * Parser: The Perl5ish form

[15:49] <svnbot6> r10187 | audreyt++ |     map { $_ + 1 } 1, 2, 3, 4;

[15:49] <svnbot6> r10187 | audreyt++ |   is now history.  Always write:

[15:49] <svnbot6> r10187 | audreyt++ |     map { $_ + 1 }, 1, 2, 3, 4;

[15:49] <svnbot6> r10187 | audreyt++ |   expect major smoke breakage.

[15:50] * eric256 just got used to leaving the quote off in p5 ;)

[15:52] <audreyt> hm. is rx:P5:{} legal?

[15:52] <TimToady> basically map {...} 1,2,3 was the last vestige of P5 indirect object syntax.

[15:52] <audreyt> the "rx:P5 {}" form is a bit visually nondistinct.

[15:53] <TimToady> I think using space consistently to indicate "this is not an adverb arg" is better than space-or-colon.

[15:53] <audreyt> okie.

[15:53] <TimToady> frees up :{} to mean something else too

[15:54] * audreyt yields to TimToady's judgement

[15:55] * eric256 supppose most the time in p6 you are going to say @a.map {  } or @a ==> map { } any way   or even map { } <<== @a  ....unless i missed the demise of the pipes ;)

[15:56] <audreyt> the pipes is alive and well and I even understand what they are doing now :)

[15:56] * wolverian ponders about >>= 

[15:56] *** gilimanjaro joined
[15:56] * audreyt ponders about using that to redefine macro infix<;>.

[15:56] <TimToady> dakkar: in q:to/foo/ the /foo/ is *not* an argument to :to

[15:56] <audreyt> infix:<;>, even.

[15:57] <eric256> are pipes implemented in pugs yet?

[15:57] <audreyt> no. I'll have to implement Capture first

[15:58] <eric256> will pipes only work with functions that expect a list/array as their last arg?

[15:58] <audreyt> not so; it can work with anything :)

[15:59] <audreyt> say(int <== 1);

[15:59] <eric256> so it just starts filling in the functions arguments starting where the user left off?

[16:00] <audreyt> normally, yes.

[16:00] <audreyt> the function can choose to distinguish between "pipe batches" using @@foo

[16:00] <audreyt> in their signature

[16:00] <eric256> ahhh. cool.

[16:00] <audreyt> but otherwise, yes, it's asif the function args just gets extended

[16:01] * eric256 thinks p6 is giong to have so many new features its going to take years to figure it all out ;)

[16:01] <TimToady> "pipe batches"++

[16:01] <audreyt> that's okay, same for p5

[16:01] <eric256> not a problem at all...just exciting ;)

[16:01] <audreyt> TimToady: better than "parallel arguments"? :)

[16:01] <Juerd> rafl: email me your address again please

[16:02] <rafl> Juerd: Aye

[16:02] <TimToady> I think of them as "multidimensional slices", but pipe batches is a user-friendlier term.

[16:02] <cognominal> $object = $class.bless: {k1 => $v1, k2 => $v2 }; # is this correct?

[16:02] <rafl> Juerd: Done

[16:03] <TimToady> and indicates the laziness of them better.

[16:03] <audreyt> cognominal: looks fine

[16:03] <cognominal> that would be a third way to initialize

[16:03] *** beppu joined
[16:04] *** weinig|sleep is now known as weinig

[16:04] <Arathorn> gah - if foo = bar doesn't work in judyland, how on earth /do/ you assign a JudyL around?  does anyone know anywhere else more appropriate where i can ask judy q's?

[16:05] <audreyt> Arathorn: you assign JudyL around by assigning &foo around

[16:05] <TimToady> cognominal: as long as you realize that $class probably isn't one...

[16:05] <audreyt> I think

[16:06] <cognominal> TimToady: I may be dense, but I don't get what you mean

[16:06] <TimToady> $class is just a class indicator--something that can be used to find the real class.

[16:06] <audreyt> cognominal: Dog.bless(...) works

[16:06] <audreyt> but also does

[16:06] <audreyt> $fido.bless(...)

[16:06] <cognominal> ok

[16:06] <TimToady> Dog is not a class, but an undefined prototype object.

[16:06] * Arathorn puts &foo in a PPvoid_t, then, and tries that...

[16:06] <TimToady> but it still has .meta

[16:06] <rw-rw-r--> <bad-joke>why, did fido sneeze?</bad-joke>

[16:07] <audreyt> (where "undefined prototype object" means simply that it has .defined set to false, and throws exception on attribute slot access)

[16:07] <TimToady> at least for Dog attributes...

[16:07] <audreyt> right.

[16:08] <TimToady> .defined(Mammal) might be true at the same time.

[16:08] <audreyt> you mean .Mammal::defined?

[16:09] <audreyt> or defined(x, y) is another form now?

[16:09] <audreyt> (x: y), even

[16:09] <TimToady> I was thinking of the latter, actually.

[16:09] <audreyt> 'k.

[16:09] <TimToady> more like an isa.

[16:09] <audreyt> gotcha.

[16:09] <cognominal> no one followed up my p6l post about interroperability with js. I thought it raised interesting questions beyond  inteterroperability  was it unreadable or what?

[16:12] <audreyt> cognominal: parrot distinguishes between Null and Undef

[16:12] <Arathorn> cognominal: i suspect it got lost in the ensuing "A shorter long dot" epic

[16:12] <audreyt> where Null means your "uninitialized"

[16:12] <szbalint> There is no direct way to use C libraries with Pugs atm, apart from that Haskell workaround mentioned in the docs, right?

[16:13] <audreyt> szbalint: right, sadly. can you submit it as a Summer of Code ticket?

[16:13] <eric256> and undefined means initialized but no value? doesn't that sound backwards?  /me isn't advocating change, just amused

[16:13] <TimToady> P6 distinguishes undef that is "interesting" from undef that is "uninteresting".  I'd say uninitialized is uninteresting.

[16:13] <audreyt> szbalint: http://hackage.haskell.org/trac/summer-of-code/newticket

[16:14] <cognominal> and how does it translate at the Perl6 level?

[16:14] <TimToady> if an undef contains an exception, it's not merely "uninitialized"

[16:14] <audreyt> szbalint: use the subject "Pugs - Foreign Function Interface"

[16:14] <audreyt> the "interesting" part is called "Failure" atm

[16:15] <audreyt>     Undef       Undefined (can serve as a prototype object of any class)

[16:15] <audreyt>     Failure     Failure (throws an exception if not handled properly)

[16:15] <audreyt> cognominal: see S04 for "Failure"

[16:15] <cognominal> ok

[16:15] <TimToady> so basically we already make the distinction

[16:16] <szbalint> audreyt: ok, give me a sec

[16:16] <TimToady> but people can think of the two kinds of undef as one until they need to make the distinction

[16:16] <audreyt> actually, Whatever belongs there too

[16:16] <audreyt> as it also has a false .defined

[16:16] <TimToady> that's because it's just a prototype

[16:17] <TimToady> the extra "value" of Whatever is that you can't instantiate it.

[16:17] <cognominal> I suppose this will be usefultoo  for  Perl6 macros for support of SQL within Perl6

[16:18] * audreyt adds Whatever to S06.

[16:18] <TimToady> don't let dduncan hear you mentioning SQL in the same breath as P6... :)

[16:18] <cognominal> I meant a cleaner SQL :)

[16:19] <TimToady> I believe dduncan thinks the cleanest SQL is a dead SQL.

[16:19] <nnunley> cognominal: Something like LINQ?

[16:20] <cognominal> yea, all this Meijer stuff sounds vey good.

[16:21] <audreyt> sometimes, not having a huge IDE to maintain can be an advantage :)

[16:21] <nnunley> So, basicly stronger set/iterator manipulation as syntactic sugar.

[16:21] <audreyt> (Erik ranted on LtU that a lot of effort went into ensuring that Visual Studio can still work)

[16:23] <cognominal> I expect that some day the reference representation of a program will be its syntax tree,  programmer will just happen to work on a convenient deparsing view.

[16:23] <cognominal> But that means a redesign of the whole ecosystem.

[16:23] <cognominal> s/syntax tree/AST/

[16:24] <cognominal> so Larry will be free to invent new syntax without fear of breaking backard compatibility

[16:24] <audreyt> that is already the case with macro-enabled languages

[16:25] <audreyt> Perl6 is not unique; CodeDOM, TH, Scheme, etc all do that

[16:25] <TimToady> It could almost be said that P6 was designed with that as the primary goal

[16:25] <audreyt> though Perl6 is somewhat unique in doing a scannerless macro system

[16:26] <cognominal> renaming a variable would be a simple operation.

[16:26] <audreyt> with unlimited prec levels

[16:26] <cognominal> that my litmus test.

[16:27] <audreyt> everywhere (mkT renameVar) p6ast

[16:27] <audreyt>     where

[16:27] <audreyt>     renameVar (Var "$x") = Var "$y"

[16:27] <audreyt>     renameVar others = others

[16:27] <audreyt> (that's how currently it works in Pugs internals)

[16:27] <audreyt> need to expose that to p6 level.

[16:28] <TimToady> does that hide the old name?

[16:28] <cognominal> nice to see that my brain is already partly in resonance with yours :)

[16:28] <audreyt> TimToady: "hide"?

[16:28] <audreyt> it replaces all leaves in the tree

[16:28] * eric256 toggles a few switches on the resonance generator and laughs evily

[16:29] <TimToady> so it has a different name at a different level, not a duplicate name.  That's all I was asking.

[16:30] <TimToady> not the same as aliasing then

[16:30] <audreyt> no, not the same

[16:30] <TimToady> fine

[16:30] <audreyt> it's as if you did a semantic-sensitive s:g///

[16:31] <TimToady> so I wonder if term:<$foo> works everywhere it ought to.

[16:31] <xinming> my $s = "Test"; require "$s";    <-- will this be valid?

[16:31] <TimToady> that is, macro term:<$foo>

[16:31] <audreyt> xinming: yes. see S11

[16:31] <audreyt> require "/home/non/Sense.pm" <common @horse>;

[16:33] <TimToady> it's more like a macro ast:<$foo>

[16:33] <TimToady> term implies syntactic matching, not semantic, I think

[16:34] <audreyt> I think it's probably a generic programming operation on the AST object.

[16:34] <TimToady> it's one of those "is deeply" things...

[16:34] <TimToady> but how do you declare it in P6?

[16:34] <audreyt> we don't have a "generic deep-map" operation equivalent of the "everywhere" above

[16:34] <audreyt> it can be simulated easily with a visitor pattern

[16:35] <wolverian> isn't that everywhere just fmap? I don't quite understand the generics library..

[16:35] <audreyt> wolverian: no... fmap goes on level

[16:35] <TimToady> I guess at worst it's just a .wrap on something somewhere...

[16:35] <audreyt> one level

[16:36] <wolverian> audreyt, oh? I thought you're supposed to define, e.g. fmap xs = map fmap xs for lists.

[16:36] <TimToady> except a .wrap is not likely to be reversible...

[16:36] <audreyt> multi replaceVar (Var :(:name<$foo>)) { Var.new(name => '$bar') }

[16:36] <audreyt> multi replaceVar ($x) { $x }

[16:37] <audreyt> wolverian: it works on any data type

[16:37] <audreyt> wolverian: your fmap can only work for [[[[a]]]]

[16:37] <audreyt> or similar

[16:37] <audreyt> wolverian: but "everywhere" works even on [([a],b)]

[16:37] <audreyt> wolverian: it skips the leaves where type doesn't match the replacement function

[16:37] <wolverian> and fmap works only on Functors?

[16:38] <wolverian> hrm, right. case :)

[16:38] <audreyt> :)

[16:39] <audreyt> $p6ast.everywhere(&replaceVar)

[16:39] <audreyt> now, the definition of .everywhere is very handwavy at this moment :)

[16:39] <TimToady> .whatever (ducks)

[16:39] <audreyt> *.*(*)

[16:40] <TimToady> that'd do it...

[16:40] <wolverian> $program.whenever({ $x == 3 } => { say "debug" })

[16:40] * audreyt ponders "pugs -e '*'"

[16:40] <audreyt> maybe it dies with "Oh yeah, whatever, never mind"

[16:40] <wolverian> I guess that would print debugs on every clock tick when $x == 3

[16:41] <wolverian> which might be a bit flood-ish

[16:41] <audreyt> maybe it flipflops

[16:41] <TimToady> last message repeated 2784937289734893 times...

[16:42] <eric256> by flipflops you mean its only fired when $x becomes 3 ?

[16:42] <audreyt> yeah

[16:44] <svnbot6> r10188 | audreyt++ | * Makefile.PL: Print some more messages to explain that

[16:44] <svnbot6> r10188 | audreyt++ |   we are building dependencies.  This dep-building may be better

[16:44] <svnbot6> r10188 | audreyt++ |   factored out into "make" time.  Maybe...

[16:46] *** flounder99 joined
[16:47] <TimToady> must go primp &

[16:47] <szbalint> audreyt: how much manpower/time do you think a FFI for C, etc. would be to implement?

[16:48] <flounder99> ?eval my @a=(1,2);my @b=(2,3);(@a,@b)=(@b,@a);@a.say;@b.say

[16:48] <evalbot_10184> OUTPUT[2312 23 ] bool::true

[16:48] <audreyt> szbalint: if you remove the "etc" and focus on just C

[16:48] <audreyt> based on hs-plugins

[16:48] <audreyt> I think 1month?

[16:48] <audreyt> 2people*2week

[16:48] <szbalint> k

[16:48] <szbalint> ty

[16:48] <audreyt> np

[16:49] <szbalint> submitted.

[16:49] <flounder99> ?eval my @a=(1,2);my @b=(2,3);(@a,@b):=(@b,@a);@a.say;@b.say;;@a.say;@b.say?eval

[16:49] <evalbot_10184> Error:  unexpected "?" expecting term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[16:49] <audreyt> flounder99: that's a bug you found

[16:50] <audreyt> write a test?

[16:50] <flounder99> ?eval my @a=(1,2);my @b=(2,3);(@a,@b):=(@b,@a);@a.say;@b.say;

[16:50] <evalbot_10184> OUTPUT[23 12 ] bool::true

[16:50] <flounder99> bind works

[16:50] <audreyt> under t/pugsbugs/ or t/data_types/array.t maybe

[16:50] <audreyt> you have a commit bit?

[16:50] <flounder99> nope

[16:50] <audreyt> k. email?

[16:51] <flounder99> i'm new to irc, how do I send it privately

[16:51] <szbalint> /msg audreyt <text here>

[16:52] <ingy> hola

[16:54] <audreyt> uh, this is freenode

[16:54] <audreyt> /msg won't work without registering your nick

[16:54] <audreyt> mangle it somehow?

[16:54] <audreyt> foo at bar dot org

[16:54] <audreyt> etc

[16:54] <audreyt> or mail me at audreyt at audreyt dot org

[16:54] <szbalint> ouch, no private msges from unregs, I forgot sorry.

[16:54] <audreyt> ingy: yo. how's Chupei hackathon?

[16:56] <ingy> audreyt: great. gugod and I started implementing a new ODBMS

[16:56] <ingy> it's really awesome

[16:56] <obra> oooh

[16:56] <obra> ingy: details?

[16:57] <ingy> obra: I'll have something on cpan soon

[16:57] <obra> nice

[16:57] <obra> what's the searching like?

[16:58] <ingy> like?

[16:58] <audreyt> sample syntax?

[16:58] <ingy> gugod is familiar with jifty, which came up a few times today

[16:58] <ingy> audreyt: I'll have something on cpan soon :p

[16:59] <audreyt> cool :)

[16:59] <ingy> actually the query language is one thing we haven't sttled yet

[16:59] <obra> an object backend for jifty would be very hot

[16:59] <audreyt> clearly you should use J or APL as the query language

[16:59] <ingy> obra: yes it would

[17:00] <ingy> audreyt: ok

[17:00] <ingy> oren of yaml is helping out too

[17:00] <audreyt> for example, the "avg" function can be defined in J as

[17:00] <audreyt> . +/ % #

[17:01] <nnunley> ingy: You've looked at kdb?

[17:01] <ingy> nnunley: no

[17:01] * ingy looks

[17:02] <nnunley> kx.com

[17:02] <nnunley> It's also an APLish thing.

[17:02] <ingy> http://www.kdb.com/

[17:02] <nnunley> But there's some good papers written by the author about how it works.

[17:02] <ingy> mmm classical

[17:04] <ingy> nnunley: url?

[17:04] <ingy> sorry

[17:05] <audreyt> flounder99: welcome aboard :)

[17:05] <audreyt> please add yourself to AUTHORS, and write a test for the list-assignment bug

[17:05] <eric256> .

[17:05] <eric256> . + / % # looks like some kind of joke not a syntax for AVG() ;)

[17:05] <nnunley> ingy: http://www.kx.com/ is the corporate web site.

[17:05] <szbalint> J is even more compressed than Perl

[17:06] <audreyt> eric256: QuickSort in J:

[17:06] <Limbic_Region> eric256 - J is obfu by design

[17:06] <nnunley> Vector languages.

[17:06] <audreyt> ]`(($:@:((}.<:{.)#}.)),{.,($:@:((}.>{.)#}.)))@.(*@#)

[17:07] * nnunley shivers.

[17:07] <gugod> now it obfu recursively

[17:07] <audreyt> the golfability is amazing.

[17:07] <Limbic_Region> eric256 - http://en.wikipedia.org/wiki/J_programming_language

[17:07] <eric256> like BF for people who wanted more pain?

[17:08] <audreyt> unlike BF, this is actually 1)fast 2)short

[17:09] <Limbic_Region> yeah, I should have said J is golfed by design with obfu as a side-effect

[17:09] <svnbot6> r10189 | audreyt++ | * HsSyck.cabal: suppress warnings.

[17:09] <nnunley> Heh.  Pagerank in K: http://www.langreiter.com/k/pagerank.k

[17:12] <svnbot6> r10190 | audreyt++ | * examples/nested_loops/functional.p6: Fix

[17:12] <svnbot6> r10190 | audreyt++ |     map {...} ...

[17:12] <svnbot6> r10190 | audreyt++ |   to

[17:12] <svnbot6> r10190 | audreyt++ |     map {...}, ...

[17:12] <svnbot6> r10190 | audreyt++ |   Helps welcome to grep through all examples/tests/etc and update

[17:12] <svnbot6> r10190 | audreyt++ |   this misidiom...

[17:14] * eric256 attempts to update his svk directory on feather to assist ;)

[17:15] <audreyt> TimToady: can we retire lvalue undef?

[17:15] <audreyt> (undef, $x) = (1,2);

[17:15] <audreyt> and write

[17:15] <audreyt> (*, $x) = (1,2);

[17:15] <audreyt> instead

[17:15] <eric256> map { }, 1,2,3 works already? or are we breaking stuff until it does?

[17:15] <audreyt> lvalue undef never really made sense to me...

[17:15] <audreyt> eric256: it works already

[17:16] <audreyt> eric256: also, you can copy ~autrijus/pugs/pugs :)

[17:16] <audreyt> it's optimized and a recent build

[17:17] <eric256> excellent ;)

[17:17] <eric256> thanks.

[17:17] <svnbot6> r10191 | audreyt++ | * Types.Array: flounder99 reported this bug:

[17:17] <svnbot6> r10191 | audreyt++ |     (@x, @y) = (1,2,3);

[17:17] <svnbot6> r10191 | audreyt++ |   @y should get cleared, but was not.  Same applies for:

[17:17] <svnbot6> r10191 | audreyt++ |     (undef, $x) = (1);

[17:17] <svnbot6> r10191 | audreyt++ |   the $x here was not assigned undef either.

[17:20] <audreyt> np :)

[17:22] <eric256> shouldn't  grep -r map *.*  look at all files under the current directory and any of its sub directories?

[17:22] <audreyt> grep -r map .

[17:22] <audreyt> pcregrep -r 'map \{.*\} ' .

[17:22] <audreyt> perhaps

[17:22] <eric256> ahh much better.../me kept reading the man page

[17:25] <eric256> does grep need it too then?

[17:25] <eric256> and i'm a little confused what something like

[17:25] <eric256> push @spelfiles, map { "$d/$_" } grep { $_ ~~ /.spel$/ } readdir $d;

[17:26] <eric256> should become....if we add the commas in it starts looking a little confusing. ;)

[17:26] <eric256> push @spelfiles, map { "$d/$_" }, grep { $_ ~~ /.spel$/ }, readdir $d;

[17:26] <eric256> those look like  they are al arguments to push now. ;) /me watches audreyt try to figure out how to ask me to NOT help ;)

[17:27] <audreyt> grep needs it too

[17:27] <audreyt> listop is naturally right assoc

[17:27] <audreyt> so that's just fine

[17:28] <audreyt> otoh, you can write it like

[17:28] <TimToady> yes, we can retire undef assignment.

[17:28] <audreyt> @spelfiles.push(readdir($d).grep:{/.spel$/}.map{"$d/$_"});

[17:28] <audreyt> TimToady: yay

[17:29] <TimToady> 'Course, assignment to * should pick a random variable and assign to that.  :P

[17:31] <audreyt> riight. :p

[17:32] <audreyt> committed to S03.

[17:34] <eric256> erri i think i need to just completly redo my svk setup....or learn how to use it right ;)

[17:34] <svnbot6> r10192 | audreyt++ | * Pugs.AST.Internals: Move the VCode Perl5-instance-for-JavaScript

[17:34] <svnbot6> r10192 | audreyt++ |   kluge to Internals.hs itself, so it no longer needs hand tweaking.

[17:34] <svnbot6> r10193 | eric256++ | Added rules example directory, and a short example of using rules

[17:34] * eric256 fears a giant broken merge from his machine is coming.....

[17:35] <eric256> hmmm i don't even know when i did that commit /me begins to prey to the pugs gods for forgiveness ;) lmao

[17:35] <svnbot6> r10194 | eric256++ | Added a realy basic BASIC parser, that doesn't realy work yet.

[17:36] <TimToady> gee, only 451 files with map/grep breakage...

[17:36] <audreyt> eek.

[17:36] <svnbot6> r10195 | eric256++ | basic.p6 BASIC implementation in P6....well it wil be eventualy.

[17:36] <svnbot6> r10196 | audreyt++ | * Pugs.AST.Internals.Instances: regen DrIFT instances.

[17:37] <audreyt> 451 files...

[17:37] <audreyt> color me shocked. :)

[17:38] <TimToady> probably a few false positives there, but it's still gonna be >400

[17:38] <svnbot6> r10197 | eric256++ | Adding the comma after the block in all map/grep statments.

[17:38] <TimToady> are blib6 files derived?

[17:39] <audreyt> yeah

[17:39] <audreyt> from ext/

[17:39] <audreyt> so that cuts the number in half

[17:39] <TimToady> then take away 70 files

[17:39] <TimToady> down to 381

[17:39] <svnbot6> r10198 | fglock++ | docs/notes/laziness.txt - added some notes on map() internals

[17:40] <TimToady> 380, can chuck Changelog :)

[17:40] <audreyt> heh

[17:40] <audreyt> ok, I'll leave the massive regrepping and remapping to #perl6

[17:40] <audreyt> see you tomorrow :)

[17:40] <audreyt> zzz &

[17:41] <TimToady> are .pl files always P5?

[17:41] * eric256 sees that while his commits where numerous they actualy seemed to work

[17:42] <TimToady> are .hs files always Haskell?  :)

[17:42] <flounder99> ?eval

[17:43] <flounder99> ?eval my @a=(1,2);my @b=(2,3);(@a,@b):=(@b,@a);@a.say;@b.say;

[17:43] * particle_ wonders if a haskell compiler has been implemented in perl6 yet

[17:43] <evalbot_10184> OUTPUT[23 12 ] bool::true

[17:43] <flounder99> is that right?

[17:44] <TimToady> Seems right.

[17:45] <TimToady> As Damian would say, you're just swapping the nameplates on @a and @b.

[17:46] <flounder99> if it were = not := @a would slurp up everthing and @b would be an empty array

[17:47] <TimToady> right

[17:47] <flounder99> I guess slurping and binding don't go together.  That makes sense

[17:48] <TimToady> slurping must be explicit under binding.

[17:48] <clkao> aufrank: got any rule stuff done/

[17:48] <TimToady> need to commute to work, then I'll work on fixing map/grep breakage.

[17:49] <TimToady> got it down to 289 files... :)

[17:49] <TimToady> I figure Makefiles are all P5...

[17:50] <TimToady> self ==> my $job &

[17:55] <aufrank> clkao: no, I just finished running my subject

[17:55] <aufrank> was cramming on that project all morning

[17:55] <clkao> ok, i will let you work ion that and i will fix interactive commit in svk

[17:56] <aufrank> deal :)

[17:57] <aufrank> clkao: where in the tree do you think I should be working?

[17:57] <clkao> pugs-grammer-rules ? and then make use of that in pugs-capture-something?

[17:59] <aufrank> ok, I'll try to commit something in p-g-r today

[18:02] *** ghenry joined
[18:11] *** bpphillips joined
[18:15] *** meppl joined
[18:49] *** elmex joined
[18:58] *** sahadev joined
[19:06] *** meppl joined
[19:10] <eric256> did anyone figure out a good grep for the map|grep fix?  .... i can't seem to convince regular grep i'm sending it a perl regex

[19:14] <spinclad> build failure: i've svn up'd to r10198, and, even after C<make clean> and C<perl Makefile.PL>, C<make> gives me:

[19:14] <spinclad> Compiling Data.Yaml.Syck   ( src/Data/Yaml/Syck.hs, dist/build/src/Data/Yaml/Syck.o )

[19:14] <spinclad> /tmp/ghc27057.hc:9:29: error: ../../syck/syck.h: No such file or directory

[19:14] <spinclad> Build failed: 256 at util/build_pugs.pl line 96.

[19:15] <szbalint> wait a sec spinclad

[19:19] <szbalint> audreyt broke it earlier today but it should have been fixed by 10184

[19:19] <spinclad> i still have these files around (plus dist/lib/HsSyck* and third-party/HsSyck which should be fine):

[19:19] <spinclad> ./src/Data/Yaml/Syck.hs

[19:19] <spinclad> ./src/Data/Yaml/Syck_stub.h

[19:19] <spinclad> ./src/Data/Yaml/Syck_stub.c

[19:19] <spinclad> ./dist/build/src/Data/Yaml/Syck.hi

[19:19] <spinclad> ./dist/build/src/src/Data/Yaml/Syck_stub.o

[19:20] <spinclad> szbalint: yes, i thought so too.  i can try expunging these and try again...

[19:21] <spinclad> (but will read them first)

[19:21] <szbalint> 15:53:34 < dakkar> which should I kill?

[19:21] <szbalint> 15:53:38 < audreyt> ./dist/build/Data/Yaml/Syck.hi

[19:21] <szbalint> 15:53:43 < audreyt> actually all three indist/build

[19:21] <szbalint> maybe this helps?

[19:22] <spinclad> i did, these came back, i think... will try again after reading

[19:23] *** Toaster joined
[19:25] <spinclad> (that is, the ones in dist/build came back)

[19:29] <spinclad> after removing all five, i get:make: *** No rule to make target `src/Data/Yaml/Syck.hs', needed by `pugs_requirements'.  Stop.

[19:29] <szbalint> oh

[19:29] <spinclad> trying make clean, perl Makefile.PL, make again

[19:30] <szbalint> < audreyt> rm -rf src/Data/Yaml/*

[19:30] <szbalint>  < audreyt> and then update again from svn?

[19:31] <svnbot6> r10199 | eric256++ |  r19475@feather:  eric256 | 2006-05-01 21:31:58 +0200

[19:31] <svnbot6> r10199 | eric256++ |  Adding comma to map

[19:31] <spinclad> trying

[19:31] <eric256> argi forgot my --verbose flag....anyone know if there is a way to make svk default to --verbose on push?

[19:33] <xinming> eric256: It's --verbatim   :-)

[19:33] <eric256> err thats what i meant...any way to deafult that? ;)

[19:34] <xinming> don't know, But In my bash,  I use `svkpush="svk push --verbatim"`  :-)

[19:34] <xinming> hmm,

[19:34] <xinming> alias svkpush="svk push --verbatim"    :-)

[19:35] <eric256> thanks.  /me is still a unix newb after 10 years of working *around* them ;)

[19:36] <xinming> so is /me  :-/

[19:37] <spinclad> szbalint: better now, it's gotten past that point.  i expect it will now skip trying to compile Data.Yaml.Syck as well :)

[19:37] <spinclad> thanks

[19:39] <szbalint> yw

[19:40] <xinming> ?eval .say

[19:40] <evalbot_10184> OUTPUT[perl6 ] bool::true

[19:42] <eric256> ?eval for (5) { .say };

[19:42] <evalbot_10184> OUTPUT[5 ] undef

[19:42] <eric256> ?eval $_.perl

[19:43] <evalbot_10184> "\\\"perl6\""

[19:43] <eric256> hehe why does $_ start with "perl6" in it?   bug in evalbot or feature?

[19:44] <xinming> don't know, but In pugs, It seems, $_ will keep the last return value instead of empty.

[19:45] <xinming> hmm, I mean in interactive shell.

[19:46] *** sahadev joined
[19:47] <eric256> hmm in interactive it definitly seems broken

[19:52] <spinclad> it looks to me like the syck transition will require a make realclean

[19:52] <svnbot6> r10200 | lwall++ | First whack at map and grep commification.

[19:53] *** js0000 left
[19:53] * eric256 waits to see if its commits and larrys conflict

[19:54] <TimToady> Already had to deal with a bunch of conflicts.

[19:54] <eric256> jeez...i remember him saying he was leaving that to #perl6....and now off you go missen me up

[19:54] <TimToady> and then I said I was working on it.

[19:55] <eric256> ;) fine.... /me didn't want to help anyway

[19:55] <spinclad> isn't TimToady part of #perl6?

[19:56] <eric256> no!

[19:56] <svnbot6> r10201 | eric256++ |  r19478@feather:  eric256 | 2006-05-01 21:54:08 +0200

[19:56] <svnbot6> r10201 | eric256++ |  added comma to t/syntax/parsing/spacehip.t

[19:56] <svnbot6> r10202 | eric256++ |  r19479@feather:  eric256 | 2006-05-01 21:55:25 +0200

[19:56] <svnbot6> r10202 | eric256++ |  added comma for map to t/statments/*

[19:56] <eric256> ahh now look what i did....didn't use my svkpush alias.  /me goes to get more caffine

[19:59] * eric256 checks lwalls commit and sees that lwall works much much faster at that. ;)

[19:59] <eric256> i got like 5 files and you got the other 100 ;)

[20:00] <TimToady> probably missed some sorts though..

[20:01] <TimToady> the hard part was *not* fixing the P5 files... :)

[20:01] <eric256> yea i had to undo that a couple of times.

[20:01] *** mschmidt joined
[20:03] <eric256> i need to write a program to search thinkgeek and get me the most cool stuff for $100 ;)

[20:05] <clkao> w/win 22

[20:05] <Limbic_Region> the difficulty in that eric256 is the definition of "cool"

[20:06] *** mschmidt left
[20:06] <TimToady> eric256: you took out the parens I put around the maps in t/statements/map-and-sort-in-for.t

[20:07] <TimToady> those shouldn't parse without parens these days

[20:07] <TimToady> or teh {...} is taken as the for's block

[20:09] *** larsen joined
[20:10] <eric256> i took parens out?  i didn't think so

[20:10] <TimToady> well, didn't put parens in, then overrode my change...

[20:11] <eric256> i didn't think my version had parns... i certianly didn't mean to remove them if i di.

[20:11] <TimToady> don't sweat it--I'll fix...

[20:11] * eric256 has spent most the day fighting with svk instead of working with it lol

[20:14] <svnbot6> r10203 | lwall++ | bare {...} in a for list needs parens now

[20:15] <TimToady> hmm, looks like ext/HTML-Entities/t/entities.t is looping...

[20:19] *** davidfetter joined
[20:19] *** mschmidt joined
[20:21] <TimToady> lunch.fetch; biab &

[20:23] <eric256> can for be postifxed now? hehe

[20:24] <eric256> @a.sort.map:{1}.for { print $_ };

[20:30] * davidfetter 's brain melts

[20:33] *** davidfetter left
[20:34] *** bpphillips left
[20:35] *** cognominal joined
[20:50] <TimToady> ext/URI/t/escape.t also loops

[20:53] <TimToady> eric256: that'd have to be @a.sort.map:{1}.for({print $_}) or something equivalent.

[20:53] <TimToady> methods don't take arguments unless followed by : or (

[20:54] <eric256> so that should probably be      for @a.sort.map:{1} { ... }    anyway

[20:54] <eric256> or would that still need to be in ( )?

[20:55] <TimToady> depends on wehter there's really a :{} adverb.

[20:55] <TimToady> if there is, it doesn't need parens.

[20:56] <TimToady> but if that's really .map: {1}, where the colon is just introducing an unparenthesized list, then it would need parens.

[20:56] *** aufrank joined
[20:57] <TimToady> at the moment I'm leaning towards saying that :{} exists as an adverbial form, so it doesn't imply any following args.

[20:57] <TimToady> and you wouldn't need parens

[20:57] <eric256> makes sense

[20:58] <TimToady> that is, it parses as .map :{1} so you have an adverb modifying an argumntless .map

[20:58] <particle_> is that the goatee op?

[20:59] <eric256> i thought it was a cookie monster

[20:59] <TimToady> the .map:{1} form parses the :{ as a token

[20:59] <particle_> :-{0}

[21:00] <TimToady> otherwise it would have to parse as .map : {1} which would be the argument form of .map

[21:00] * eric256 needs to go read about adverbs

[21:01] <spinclad> 8^{[=]}

[21:02] <TimToady> t/builtins/sprintf_and_as.t also loopos

[21:02] <TimToady> "loopos"++

[21:02] <spinclad> #{[ENOTANADVERB]}

[21:03] <TimToady> E No Tan Adverb

[21:04] <spinclad> adverbs must stay completely covered when out in the sun

[21:08] <TimToady> t/examples/examples.t also loopos

[21:08] <particle_>  r10204 | particle++ | apply sunblock to all adverbs

[21:13] * eric256 tries to convices a co-worker that dewed is actualy a word ;)

[21:14] *** trym joined
[21:14] <particle_> playing scrabble at work?

[21:14] <spinclad> the dewed rose, or the dewed spouse

[21:14] <particle_> mine 'glistens'

[21:15] <eric256> the ground was wet this morning and i said "i wonder if it rained last night, or just dewed heavily"

[21:15] <TimToady> kewel, dewed!

[21:19] <spinclad> lol (really!)  so that's three meanings!

[21:20] * eric256 wishes there was a lottery or something to when to go to the YAPC::NA 

[21:24] <buu> Mmm, parrot.

[21:29] <TimToady> would appear that t/syntax/list_quote_whitespace.t is the 5th loopo

[21:30] <eric256> loopo?

[21:30] <eric256> infinite loop?

[21:30] <buu> #     Failed test (t/op/calling.t at line 2327)

[21:30] <buu> =[

[21:31] <buu> Can I ignore it or do I need to bash it?

[21:43] *** coumbes joined
[21:43] *** Ymmv joined
[21:46] <TimToady> it seems that sprintf is hanging

[21:48] <particle_> buu: that's a known parrot test failure

[21:48] <TimToady> yes, this hangs: say sprintf '%d', 123;

[21:55] *** kanru joined
[22:00] <svnbot6> r10204 | lwall++ | any<a b c> is not the same as any <a b c>

[22:01] <eric256> are we getting just a little crazy now?  /me fears perl6 will be way too much like python with all these space issues.

[22:10] * avar wouldn't care if it was like python in that regard

[22:10] <TimToady> the postfix vs non-postfix difference is crucial.

[22:11] <Juerd> eric256: I think we are, but I don't see any good solution to the problem.

[22:12] <Juerd> eric256: Not requiring parens is a problem if every other character is both an infix and a prefix operator :)

[22:12] <Juerd> And sometimes postfix too.

[22:12] <eric256> in these cases make the postfix and non-postfix forms act the same?  of course then it might just increase the confusion

[22:12] <Juerd> eric256: How would you do that?

[22:12] <eric256> what would any<a b c> be?

[22:13] <TimToady> any.{'a','b','c'}

[22:14] <eric256> and any <a b c> is any("a","b","c") ....i don't know what any.{ ... } would mean though. must be time to reread the S's again

[22:14] <svnbot6> r10205 | lwall++ | any<a b c> is not the same as any <a b c>, continued

[22:14] <TimToady> Doesn't mean anything, which is why you don't do that...

[22:15] <eric256> so why not make .{ a postfix op on any that does what we expect?  i dunno, guess i'm just stuck in the but it doesn't DWIM phase.

[22:15] *** jsiracusa joined
[22:16] <TimToady> It should blow up and say that you can't treat a Junction like a Hash.

[22:17] <eric256> oh yea...forgot < > was hash access also.  i feel soo lost some days

[22:18] <eric256> if it were to DWIM  i would assume that < > just replaced ( ) when used in a function arg context and auto split/quoted liked < > does

[22:18] *** rgs joined
[22:18] <eric256> then  any<a b c> ~~ any <a b c> ~~ any('a', 'b', 'c') ~~ any(<a b c>)

[22:18] <cognominal> salut rgs

[22:19] <eric256> but i wouldn't presume to have any idea what side effects that would cause

[22:25] * eric256 stuns everyone into silence with his brilliance or ignorance ;)

[22:26] <avar> Whitespace may cause cognative overload;)

[22:29] *** hexmode joined
[22:56] <eric256> hehe i thought at least someone would tell me i'm nuts. .... oh well i'll just assume i'm nuts and go home for the day

[23:04] <buu> t/pmc/objects.t    2   512    74    2   2.70%  73-74

[23:04] <buu> Are those known failures as well?

[23:06] <TimToady> pugs now smokes without looping, yay!  11,000 tests in <43 minutes on my machine.

[23:08] <szbalint> looposing?

[23:08] <buu> Yay!

[23:08] <TimToady> buu: those failed when I ran parrot this morning, so I suppose they're "known"...

[23:08] <buu> TimToady: Heh, ok.

[23:10] <buu> Hrm. Where does parrot look for .so files, LD_LIBRARY_PATH?

[23:12] <buu> Excellent.

[23:18] <pasteling> "spinclad" at 209.94.133.172 pasted "Prelude compile failure (debian sarge+/i386, ghc6 6.4.1-2.1, pugs r10199)" (14 lines, 1.9K) at http://sial.org/pbot/17000

[23:26] *** ayrnieu joined
[23:27] *** _SamB_ joined
[23:36] <drbean> I make fun of the Bugs Manifesto at http://use.perl.org/~mr_bean/journal/29477, repeating the Scientology identification at http://perlmonks.org/?node_id=540655

[23:38] *** _SamB_ is now known as SamB

[23:50] <meppl> gute nacht

