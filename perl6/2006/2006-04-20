[00:07] <buu> go go +R powers!

[00:21] *** mako132_ joined
[00:40] *** macroron joined
[00:44] *** macroron joined
[00:52] *** macroron joined
[00:54] *** macroron joined
[00:57] *** macroron joined
[01:00] *** amnesiac joined
[01:00] *** macroron joined
[01:13] *** nirgle joined
[01:14] *** frederico joined
[01:36] *** EyeCue joined
[01:37] *** EyeCue left
[01:41] *** LCamel joined
[01:56] *** tcliou joined
[02:02] *** KingDiamond joined
[02:07] *** bradleym_ joined
[02:08] *** bradleym_ is now known as bradleym

[02:30] *** aufrank joined
[02:32] <aufrank> hello.\(room.all)

[02:34] <audreyt> yo

[02:35] * aufrank has been reading the logs audreyt linked to in her last journal

[02:35] <aufrank> neat stuff goes on when I'm not here!

[02:35] <aufrank> I should be here more often

[02:35] <aufrank> maybe I'll catch it ;)

[02:36] <aufrank> audreyt: have you checked in anything on your way to doing opp all with rules?

[02:36] <audreyt> aufrank: src/Pugs/Rule/Expr.hs? ;)

[02:37] <audreyt> no, there is no code yet.

[02:40] <aufrank> so, my first post ever to p6l didn't actually get there because I posted using the google groups interface

[02:40] <aufrank> this was probably a year ago

[02:40] <aufrank> but I was thinking about the question again the other day

[02:41] <aufrank> does anyone have any ideas about how to use p6 rules to generate patterns rather than parse them?

[02:42] <aufrank> I'd like to be able to generate samples from a grammar

[02:43] *** macroron joined
[02:44] *** DesreveR joined
[02:46] <aufrank> something like $rule = { (g|b)[1] (a|i)[1] (p|d)[1] (o|u)[1] }

[02:47] <aufrank> $rule.pick # gapo or gido or badu or ...

[02:57] <audreyt> why, yes

[02:57] <audreyt> also see misc/pX/audreyt/rules-are-templates

[02:57] <audreyt> related but not the same idea

[02:58] <audreyt> (where (g|b) becomes validators instead of generators)

[03:01] * aufrank goes to look

[03:04] *** nirgle left
[03:06] *** macroron joined
[03:06] <aufrank> [% GET foo %]     <=$foo>

[03:07] <aufrank> you think the TT2 GET returns an iterator in p6 world?

[03:07] <audreyt> this is rules

[03:07] <audreyt> not expr

[03:07] <audreyt> so <=$foo> is just... imaginative syntax

[03:07] <audreyt> for

[03:07] <audreyt> $foo := .*?

[03:07] <audreyt> probably

[03:07] <aufrank> oh oh

[03:07] <aufrank> I see

[03:09] *** Quell joined
[03:29] *** nirgle joined
[03:50] *** qu1j0t3 joined
[03:53] *** FurnaceBoy joined
[03:53] *** Daveman joined
[03:56] *** macroron joined
[04:01] *** Soga joined
[04:49] *** spo0nman joined
[04:53] *** Southen_ joined
[05:01] *** kakos joined
[05:17] *** nirgle left
[05:36] *** justatheory joined
[05:38] *** marmic joined
[05:56] <GeJ> good localtime moosefolks

[06:23] *** Frances joined
[06:26] <lypie> morning *

[06:29] <arcady> evening

[06:52] *** Cryptic_K joined
[06:54] *** pdcawley joined
[07:36] *** Southen joined
[07:38] *** dakkar joined
[07:39] *** Aankhen`` joined
[07:50] *** iblechbot joined
[07:53] *** nnunley joined
[08:27] *** hugues23 joined
[08:37] *** pdcawley joined
[08:46] *** f0rth joined
[08:55] *** elmex joined
[08:55] *** ruz joined
[09:11] *** drrho joined
[09:30] *** lypie left
[09:45] *** Maxiii joined
[09:51] *** gaal_ joined
[10:11] <xinming> http://img.photobucket.com/albums/v715/rayskwire/Random/Too_Much_Computer.gif   :-)

[11:01] * dakkar is away: pranzo

[11:04] *** frederico joined
[11:04] *** TimToady joined
[11:06] <xinming> Larry landed.... :-)

[11:07] <xinming> TimToady: hmm, what is the role of control statements? objects? or it built-in...

[11:07] * xinming is thinking.... if the control statements can be object... as &?ROUTINE

[11:11] *** ghenry joined
[11:29] *** nnunley joined
[11:55] *** mako132_ joined
[11:55] *** lichtkind joined
[12:03] *** fglock joined
[12:09] *** mako132_ joined
[12:15] <ruz> eval? sub foo($arg!){say $arg}; sub bar(*@rest){say @rest;foo(*@rest)}; foo arg=>2; bar arg=>3; foo()

[12:17] <lichtkind> ?eval sub foo($arg!){say $arg}; sub bar(*@rest){say @rest;foo(*@rest)}; foo arg=>2; bar arg=>3; foo()

[12:17] *** evalbot_10038 is now known as evalbot_10042

[12:17] <evalbot_10042> OUTPUT[arg2   ] Error: No such sub: "&foo"

[12:18] <ruz> oh :) I have to recompile

[12:18] *** kolibrie joined
[12:18] <lichtkind> :)

[12:18] <ruz> ?eval sub foo($arg!){say $arg}; sub bar(*%rest){say %rest;foo(*%rest)}; foo arg=>2; bar arg=>3; foo()

[12:18] *** Limbic_Region joined
[12:18] <evalbot_10042> OUTPUT[arg2 arg	3 arg	3 ] Error: No such sub: "&foo"

[12:19] <ruz> the first thing is wrong too

[12:20] <ruz> ?eval sub foo($arg!){say $arg}; sub bar(*@rest){foo(*@rest)}; bar arg=>3; # should fail or output something sane

[12:20] <evalbot_10042> OUTPUT[ ] bool::true

[12:21] <ruz> is it correct syntax?

[12:23] <fglock> putter: a p5 implementation of PGE would be very useful - re: http://colabti.de/irclogger/irclogger_log/perl6?date=2006-04-19,Wed&sel=670#l1116

[12:23] <fglock> but an Inline::C version would be even better :)

[12:25] <fglock> I'm on YAPC::Brasil - the hosting conference is 5200 people and still counting!

[12:27] <fglock> audreyt, TimToady - if you'd likely come to YAPC::SA in november please let me know

[12:27] <fglock> everyone else too :)

[12:31] <kolibrie> fglock: did you see the p6grammar to PCR module compiler I wrote yesterday?

[12:36] <kolibrie> http://svn.openfoundry.org/pugs/misc/pX/Common/Pugs-Compiler-Rule/compile_p6grammar.pl

[12:36] * dakkar is back (gone 01:35:19)

[12:39] <fglock> kolibrie: looking

[12:42] <fglock> wow - very short :)

[12:42] <kolibrie> fglock: thanks to PCR and 'return' in rules

[12:44] <fglock> cool. A possible usage is also "... > Perl6GrammarFile.pmc"

[12:44] <kolibrie> yes

[12:45] <kolibrie> or I was wondering if the pmc should be even further compiled Perl 5 code

[12:46] <fglock> yes - but then you have to recompile when you upgrade PCR

[12:46] <kolibrie> ahh

[12:47] <kolibrie> does PCR depend on pugs?  I'd like to be able to use grammars on systems without pugs

[12:47] <fglock> recompiling the PCR internal mini-language is fast, and it only happens at load time

[12:47] <fglock> no it doesn't

[12:48] <kolibrie> okay, cool

[12:48] <fglock> it only depends on PadWalker, for looking up lexical variables

[12:49] <kolibrie> I thought it depends on v6.pm and Inline, too

[12:53] <fglock> v6.pm doesn't exist physically - it is there just for dieing in case you try to execute the p6 module with p5 directly - Inline is not used either

[12:54] <kolibrie> ok

[12:54] * kolibrie is very excited to start using grammars in production

[12:56] <kolibrie> fglock: is there a way to specify modifiers with PCR? :perl5 :i and such

[13:01] <fglock> you can add { p => 1 } at compile time, for matching at position 0 - but this is not in CPAN yet

[13:02] <fglock> :perl5 will be { perl5 => 1 } - but this is not implemented yet

[13:03] <fglock> going to merlyn's talk - dunno if there is wifi there... &

[13:03] <kolibrie> so those go in Pugs::Compiler::Rule->compile(q( { perl5 => 1 } <rule_stuff> { return ... } ))

[13:05] <fglock> ...->compile( $rule, %opts )

[13:06] <kolibrie> ok

[13:07] <fglock> wifi is ok - still here :)

[13:07] <kolibrie> (wifi)++

[13:08] *** Aragone is now known as Arathorn

[13:36] *** vel joined
[13:54] *** KingDiamond joined
[13:54] <audreyt> TimToady: how does /x++/ differ from /x+/?

[13:54] <audreyt> also, "parse" is a rather common prefix sub name

[13:55] <audreyt> and not a noun

[13:55] <audreyt> using it as a declarator is very, very weird.

[13:55] * Juerd has plenty parse_foo's

[13:56] <audreyt> I mean, that will deny people of saying: sub parse { ... } ; parse foo();

[13:56] <audreyt> which is rather strange

[13:57] <Juerd> It's the same with log.

[13:57] <Juerd> People get used to having to choose alternatives.

[13:57] <audreyt> Juerd: log is not a declarator.

[13:57] <Juerd> Though I'd prefer to be able to use log myself, and yea, parse too.

[13:57] <audreyt> TimToady's last S05 change put "parse" in same category as

[13:57] <audreyt> "sub" and "method".

[13:58] <audreyt> and "rule".

[13:58] <audreyt> my $x = parse { ... };

[13:58] <audreyt> grammar Foo{ parse moose { ... }; }

[13:58] <audreyt> I'm very uncomfortable with a verb at that position.

[13:59] <Juerd> Your discomfort appears sane.

[13:59] <pmichaud> audreyt: I agree "parse" is not so good; what's a good alternative?

[13:59] <audreyt> if people can't use token:w{...}

[14:00] <audreyt> then "term" is second best I suppose.

[14:00] <pmichaud> oh, I think token:w is probably perfect

[14:00] <audreyt> but I think token:w{...} is very nice already

[14:00] <pmichaud> yes, I agree

[14:00] <audreyt> it feels like overhuffmanizing.

[14:00] <pmichaud> <audreyt> TimToady: how does /x++/ differ from /x+/?

[14:01] <pmichaud> token { /x+/ } and   rule { /x+/ }    are different

[14:01] <pmichaud> token { /x++/ }  and rule { /x++/ }  are the same

[14:01] <pmichaud> (i.e., it forces backtracking)

[14:01] <audreyt> gotcha.

[14:02] * pmichaud is composing a reply to S05 now

[14:03] *** bradleym joined
[14:04] <audreyt> oh

[14:05] <audreyt> should I abort my edit? :)

[14:05] <pmichaud> no, we can both reply, I think :)

[14:05] <audreyt> k :)

[14:05] <pmichaud> depends on what you're replying to

[14:05] *** r0nny joined
[14:06] <theorbtwo> Forces backtrackability, surely.

[14:06] <audreyt> just the "parse".

[14:06] <pmichaud> okay, I'll just put a "me too" in mind about the parse

[14:08] *** justatheory joined
[14:09] <audreyt> actually, I listed you in the mail :)

[14:09] <audreyt> sent

[14:18] *** amnesiac joined
[14:24] *** bsb joined
[14:26] <bsb> hello from hong kong

[14:28] <gugod> hello bsb

[14:30] <bsb> hi gugod

[14:31] <gugod> :)

[14:33] *** PolettiX joined
[14:33] <bsb> gugod, you're a .tw hacker right?  I'm there tomorrow for a few days

[14:33] <gugod> bsb: heh, really ?

[14:33] <gugod> bsb: yes I'm from .tw

[14:34] *** PolettiX is now known as froh-doh

[14:34] <bsb> I'm taking the long way home

[14:34] <gugod> bsb: where will you be ? taipei ?

[14:34] <bsb> I fly to taipei

[14:34] <clkao> bsb: you should call for an emergency socail meet for taipei.pm

[14:34] <gugod> exactly

[14:35] <gugod> and poke hcchien

[14:35] <bsb> put up the camel spotlight in the sky...

[14:35] <bsb> that'd be great

[14:37] <gugod> are you staying maybe to the end of April ? you can probably meet ingy and miyagaywa ;)

[14:37] <bsb> only until the 26th, I offered ingy beer|coffee to coax him out

[14:38] <gugod> ha

[14:38] <bsb> I miss miyagawa by a day I think :(

[14:39] <gugod> bsb: right... well it's still cool, so will you be staying in taipei for the most of time ?

[14:39] <bsb> I don't know, I have no sense of Taiwan's scale

[14:40] <bsb> I just bought a 2nd hand travel guide

[14:40] <gugod> bsb: ingy and I are living in hsinchu city, which is 1 hour driving from taipei

[14:40] <gugod> bsb: oh so you are still planning ?

[14:41] <bsb> "still" would suggest that I'd started...

[14:41] <gugod> alright, I get it

[14:42] <bsb> if there's public transport, I'd make a trip out some time

[14:44] <gugod> public transport in Taipei city is good enough, and bad enough for mostly all other cities

[14:44] *** FurnaceBoy joined
[14:45] <ingy> hola

[14:45] <ingy> gugod!

[14:45] <gugod> I can almost hear you typing that excalmation mark, ingy

[14:46] <ingy> :)

[14:47] <bsb> "Hsinchu is a medium sized city that is famous in Taiwan for it windy winter weather..."

[14:47] * ingy soothes himself with an excalmation mark

[14:48] <ingy> bsb: how many days are you here?

[14:48] <bsb> "...if Hsinchu has anything (besides computers) that would appeal to foreigners, it's the nightlife"

[14:48] <bsb> 5 days

[14:49] <ingy> where are you staying?

[14:49] <bsb> not booked yet, taipei somewhere I guess

[14:50] <ingy> cool, maybe I'll come to taipei on Monday

[14:50] <audreyt> ooh

[14:50] * audreyt tries to reschedule $job away

[14:50] <azuroth> yo, I'm really cool

[14:50] <ingy> :)

[14:51] <gugod> we could meet on monday, I will be in taipei on monay

[14:51] * ingy pets azuroth 

[14:51] * bsb took a while to work out what day it is (jetlag)

[14:51] <gugod> monday

[14:51] <azuroth> I'm really, really supercool. :-)

[14:51] <ingy> azuroth: yes, we know

[14:52] <audreyt> azuroth: so cool you triggered fusion?

[14:52] <bsb> so how do we meet up?

[14:53] <azuroth> no, but I can try

[15:04] <bsb> gugod, ingy: email me any plans or tips at  bereft döt net

[15:07] *** weinig joined
[15:09] *** hexmode joined
[15:23] *** Yumma joined
[15:23] <Yumma> http://bigtitsroundasses.bangbros1.com/gal/298/p/bavideopost/  http://www.sog10.com/gallery01/c2100k/index.html

[15:23] *** Yumma left
[15:56] <bsb> good night all

[16:08] *** hexmode joined
[16:10] *** froh-doh is now known as |froh-doh|

[16:10] *** |froh-doh| is now known as froh-doh

[16:21] *** zgh joined
[16:22] *** xinming1983 joined
[16:32] *** hlen joined
[16:34] *** xinming1983 joined
[16:39] <audreyt> by request of #parrot folks - currently in #perl6 emulation mode there -

[16:39] <audreyt> I did a sketch port of

[16:39] <audreyt> http://perlcabal.org/~autrijus/tmp/tg.html

[16:39] <audreyt> from TGE syntax

[16:39] <audreyt> to

[16:40] <audreyt> http://perlcabal.org/~autrijus/tmp/p6.html

[16:40] <audreyt> in Perl6 syntax.

[16:40] *** PerlJam joined
[16:40] <ingy> hi audreyt

[16:41] <audreyt> hi

[16:42] *** vel joined
[16:44] <xinming1983> audreyt: hmm, I wonder, what the roles are control statements in perl 6. is it built in, or an object...

[16:45] <audreyt> xinming1983: they are functions

[16:45] *** xinming1983 is now known as xinming

[16:45] <xinming> sorry, bbl

[16:46] *** xinming joined
[16:46] <xinming> hmm, what's the proto of them? I mean, if they are functions, how to "implement" if... :-)

[16:47] <xinming> I know loop statements can be implemented using goto... How about if... :-/

[16:51] <theorbtwo> xinming: Can be emulated with a form of if that only does if (boolean) {goto foo}.

[16:53] <xinming> theorbtwo: but the problem is... does the if call itself recursively?

[16:54] <Limbic_Region> xinming - sure (I think)

[16:55] <Limbic_Region> as long as the condition can be translated to a bunch of booleans

[16:55] <Limbic_Region> if ($foo eq 'bar' && $blah == 1) { ... } = $foo eq 'bar' && $blah == 1 && goto somewhere

[16:56] * xinming kisses Limbic_Region  :-)

[16:56] <xinming> right... I know now...

[16:56] <Limbic_Region> but that is only if - not if/else or if/elsif/etc

[16:57] <Limbic_Region> as theorbtwo was saying above

[16:57] <xinming> given when can be emulated with match pattern... So It's not a problem...

[16:57] <Limbic_Region> although - I think they fall out quite easily

[16:57] <Limbic_Region> if/else is a no brainer because

[16:58] <Limbic_Region> $cond1 && $cond2 && goto somewhere

[16:58] <Limbic_Region> can unconditionally be followed by

[16:58] <Limbic_Region> goto alternative

[16:58] <xinming> hmm, Maybe I still ask about how to implement the infix && ?

[16:58] <xinming> :-)

[16:58] <PerlJam> Limbic_Region: did you happen to read Allison's use.perl journal on implementing if/elsif/else for punie?

[16:58] <xinming> It's really made me insane... as I don't understand how can these be implemented...

[16:58] <xinming> PerlJam: url please... :-)

[16:58] <Limbic_Region> and if/elsif/else is easy too because they are just a series of ifs with an unconditional goto at the end

[16:58] <Limbic_Region> PerlJam - yes

[16:59] <PerlJam> xinming: um  ... http://use.perl.org/~allison/journal should get you close enough

[16:59] <theorbtwo> Limbic: Don't goto for the else clause, just follow it.

[16:59] <Limbic_Region> http://use.perl.org/~Allison/journal/29358

[16:59] <xinming> how about infix && ?

[16:59] <PerlJam> What L~R said

[16:59] <Limbic_Region> theorbtwo - I thought the game was to implement as much as possible with gotos :-)

[17:00] <theorbtwo> Ah.

[17:00] <Limbic_Region> PerlJam - I am not sure I agree with Allison's conclusions though

[17:00] <theorbtwo> BTW, the infocom compiler uses the idiom that Allison liked.

[17:00] <xinming> hmm, infix && is handcoded into parrot assembler, right?

[17:01] * Limbic_Region wanders off for a meeting

[17:01] <pmichaud> the perl6.pbc compiler handles if/elsif/else

[17:01] <pmichaud> and infix:&&

[17:01] <pmichaud> (infix:&& is a special form of if/elsif/else)

[17:08] <PerlJam> pm: But it doesn't do variables :(

[17:08] <pmichaud> pj: it doesn't?

[17:08] <PerlJam> well, it didn't the last time I looked :)

[17:08] * xinming wonders if we can make these control statements objects, so that we can access the target address in VM. and backtrack the address where it starts... :-P

[17:08] <xinming> a crazy idea though...

[17:09] <pmichaud> (it doesn't understand real lexicals yet, but it does do variables)

[17:09] <pmichaud> scalars, at least

[17:09] <PerlJam> pmichaud: what about looping contstructs?

[17:09] <pmichaud> those are coming soon -- I may unify those with the conditionals

[17:10] <PerlJam> if it groks goto, then I could already write BASIC-like programs  :)

[17:10] <xinming> do you mean, every thing in perl 6 can be objects?

[17:10] <xinming> even include the control statements?

[17:10] <pmichaud> control statements are exceptions :-)

[17:10] <pmichaud> depending on the statement

[17:11] <PerlJam> xinming: everything in perl 6 can be thought of as an "object"  :)

[17:11] <PerlJam> Whether you'd want to do that or not is another matter however

[17:11] <xinming> PerlJam: yes, as audreyt ever said that control statements are functions... So, If they are functions, can we make it real object... :-P

[17:12] <xinming> hmm, I mean, it is specified....

[17:14] <xinming> which means, we can ask the current "if" object something interesting, eg: test statements, and where the target in source will it go, and where the target after it compiled into parrot assembly...

[17:14] <xinming> and even where it belongs to...

[17:14] <xinming> etc etc...

[17:15] <xinming> is it crazy or it is insane? :-)

[17:15] <PerlJam> xinming: well ... I don't know that we'll be able  to ask "if objects" much about how they're compiled, but all of that other stuff sounds reasonable.

[17:47] *** FurnaceBoy_ joined
[17:51] *** hlen joined
[17:54] *** hexmode joined
[17:58] *** particle_ joined
[18:04] *** DaGo joined
[18:28] <svnbot6> r10043 | audreyt++ | * Upgrade Artistic license to the latest revision (2.0beta14),

[18:28] <svnbot6> r10043 | audreyt++ |   made availble yesterday, under:

[18:28] <svnbot6> r10043 | audreyt++ |     http://www.perlfoundation.org/legal/licenses/artistic-2_0.html

[18:29] <TimToady> pmichaud: ping

[18:31] <pmichaud> TimToady: pong

[18:31] <TimToady> I was just wondering offhand if <$foo> captures by default in PGE, and whether the default should be to capture to $<foo>, and suppress with <?$foo>, or default to not capture, and force capture with <:$foo>.

[18:31] <TimToady> likewise for <@foo> and <%foo>

[18:31] <pmichaud> I had been thinking that <$foo> would capture by default

[18:32] <pmichaud> it seems the most natural

[18:32] <pmichaud> we can also let it be non-capturing by default, and then use aliases

[18:32] <pmichaud> $<foo>:=<$foo>

[18:32] <TimToady> <:$foo> would be shorthand for that

[18:32] <TimToady> as in sigs

[18:32] <pmichaud> at some point I feel like ETOOMANYSHORTHANDS  :-)

[18:33] <TimToady> we already have that shorthand.

[18:33] <pmichaud> at one point we had also discussed using the leading : for intra-rule modifiers

[18:33] <pmichaud> i.e.,   <:words(0)>

[18:33] *** fglock joined
[18:34] <pmichaud> (to answer your original question -- at the moment PGE doesn't handle lexical variables other than the ones in the rule itself, such as backreferences)

[18:34] *** aufrank joined
[18:34] <TimToady> it would only work on :<sigil> presumably, but I think I like capture by default anyway.

[18:34] <pmichaud> (being that lexicals in Parrot weren't completely spec'd)

[18:35] <audreyt> oh?

[18:35] <pmichaud> capture by default "feels" right to me

[18:35] <svnbot6> r10044 | audreyt++ | * Back out the previous revision, restore Artistic 2 to 2.0b5,

[18:35] <svnbot6> r10044 | audreyt++ |   as the new b14 asserts itself to derivatives to each files under

[18:35] <svnbot6> r10044 | audreyt++ |   the collection, not only the collection as a whole -- the meaning of

[18:35] <TimToady> phone

[18:35] <svnbot6> r10044 | audreyt++ |   "Package" is changed from the one used Artistic1/2.0b5.

[18:35] <svnbot6> r10044 | audreyt++ |   (as such, I can't upgrade the license as we have parts under the

[18:35] <svnbot6> r10044 | audreyt++ |   BSD/GHC license.)

[18:35] <audreyt> (what part of pdd20 is missing?)

[18:35] <pmichaud> audreyt: sorry, I mis-stated.  At the time I wrote that portion of PGE, lexicals weren't completely implemented

[18:35] <audreyt> ah. ok :)

[18:36] <pmichaud> even then, it requires a bit more scaffolding in place to implement, since we have to know the lexical environment at the time the rule is compiled

[18:36] <xinming> TimToady: is it possible make control statements objects? as I asked an hour ago. :-P

[18:36] * fglock wonders if he will ever catch up after the YAPC

[18:36] <pmichaud> audreyt: I'm one of those who doesn't believe in a specification  until there's an implementation for it :-)

[18:37] <audreyt> pmichaud: tis also me :)

[18:37] <TimToady> unphone

[18:38] *** hugues23 joined
[18:38] <TimToady> "everything is an object", but some things are things...

[18:38] <TimToady> and some things aren't things...

[18:38] <xinming> .doit .()   # okay, no arguments, same as .doit()   <--- doesn't  this follow the "long dot" rule?  I mean, .doit.   .()

[18:39] <TimToady> certainly some control structures are just subs.

[18:39] <pmichaud> ISTR that we had said in an earlier spec (perhaps one of the drafts of S05) that <$foo> would capture to $<$foo>

[18:39] <TimToady> where?

[18:39] <xinming> in S12

[18:39] <TimToady> will fix.

[18:39] <xinming> Parentheses (or a colon) are required on the dot notation if there are any arguments (not counting adverbial arguments). There may be no space between the method name and the left parenthesis unless you use the dot form of parentheses:

[18:40] <TimToady> or you can fix

[18:41] <TimToady> I'm thinking maybe we want it to capture to $<foo> instead, to be more like named params.

[18:41] <pmichaud> so,  <$foo> and <@foo> both capture $<foo>?

[18:41] <xinming> TimToady: I don't have commit bit. >_<

[18:41] <pmichaud> er, to $<foo>

[18:41] <pmichaud> xinming -- I'll fix

[18:42] <TimToady> Seems unlikely that you'd want <$foo> and <@foo> in the same scope.

[18:42] <pmichaud> agreed

[18:42] <TimToady> and you can always $<$foo>:= if you like.

[18:43] <pmichaud> We already capture <OtherGrammar::rule> to $<OtherGrammar::rule>, so it might be nice to be consistent

[18:43] * avar uses $foo and @foo in the same scope in p5

[18:43] <pmichaud> looking at it the other way, one can always $<foo>:=<$foo>  :-)

[18:44] <pmichaud> Is this still true...?  >>       .doit.  .(1,2): 3   # okay, same as .doit(1,2,3)

[18:44] <pmichaud> (just verifying)

[18:45] <pmichaud> btw, audreyt, I like 'lexeme'

[18:46] * aufrank does research on lexemes and lemmas

[18:46] <xinming> I agree, that something are things, but if we make if objects, maybe we can access the control statement object inside the code...  hmm, eg: get the test_statements, and modify it(in loop), since &?BLOCK can become object, why can't the control statements?

[18:47] <TimToady> avar: I meant the same rule scope.  Don't care if the surrounding scope has both variables

[18:47] <aufrank> lexeme means "form-based representation of a word in the mental lexicon" to me

[18:47] <TimToady> pmichaud: yes, that's still correct

[18:47] <pmichaud> committing

[18:47] <aufrank> but I recognize that I'm in the minority there

[18:48] <PerlJam> greetings programs.

[18:48] * pmichaud watched Tron a few nights ago also :-)

[18:48] <theorbtwo> ?eval "Hello, PerlJam"

[18:48] <TimToady> xinming: if the compiler can detect the desire to objectify "if" and pessimize, it's okay.

[18:48] <PerlJam> aufrank: lexeme doesn't work for me either btw :-)

[18:48] *** evalbot_10042 is now known as evalbot_10044

[18:48] <evalbot_10044> "Hello, PerlJam"

[18:48] <FurnaceBoy_> hehe@PerlJam

[18:48] <TimToady> But we have to give the optimizer room to work by default.

[18:49] <FurnaceBoy_> end of line.

[18:49] <TimToady> to me lexeme is synonymous with token.

[18:49] * PerlJam mistakes FurnaceBoy_ for the MCP and starts blasting

[18:49] <PerlJam> TimToady: me too.

[18:49] <TimToady> END OF LINE!!!

[18:50] <TimToady> lemma is one I hadn't heard.

[18:50] <aufrank> 's fine by me.  I'm used to typing it anyway ;)

[18:50] <PerlJam> phrase seems to work best as the intent of "parse"

[18:50] <PerlJam> or how about "idiom"  :)

[18:50] <FurnaceBoy_> "who is your user, program?!"

[18:50] <PerlJam> or even "words" (a little vague probably)

[18:51] <pmichaud> I came across "phrase" while thinking of "sequence of words", since it's essentially "rule :ratchet :words"

[18:51] <aufrank> fragment is possible, as well

[18:51] <pmichaud> shorten it to "frag", and we'll be playing FPS games :-)

[18:51] <xinming> TimToady: Ok, I know that we can objectify control statements. then perl 6 can be as dynamic as possible. :-P

[18:52] <lichtkind> labels are still made: "label:" ?

[18:53] <TimToady> lichtkind: yes

[18:53] <TimToady> must be at statement boundary though.

[18:53] <TimToady> (including after do)

[18:54] <TimToady> I rather like "phrase" myself, though that kind of drives s/token/word/

[18:54] <pmichaud> I was also trying to think of what word would work well in the grammar spec instead of "rule"  (and "parse" doesn't work)

[18:54] <lichtkind> on left boundary?

[18:54] <aufrank> re: lemma http://www.smithsrisca.demon.co.uk/psycholinguistics-glossary.html

[18:54] <TimToady> where parser is expecting a statement.

[18:54] <TimToady> doesn't have to be leftmost

[18:55] <pmichaud> I think I still prefer "token" over word

[18:55] <pmichaud> since rules (that aren't phrases) will use tokens

[18:55] <pmichaud> although "atom" comes to mind

[18:55] <TimToady> It's not badly overloaded, true.

[18:55] <TimToady> atom tends to be badly overloaded.

[18:55] <pmichaud> yup

[18:56] <TimToady> and our tokens tend to be more like molecules anyway.

[18:56] <pmichaud> well, I vote for phrase (for whatever my vote counts)

[18:57] <TimToady> I kind of like that the fancier things get longer: rule/token/phrase

[18:57] <TimToady> but not too much longer.

[18:57] <TimToady> the intent of phrase as a keyword is not really huffmanization of typing, but huffmanization of thinking,

[18:58] <TimToady> because I want something that maps almost exactly to the concept of a BNF production, if not exactly the syntax

[18:58] <aufrank> in probabilistic context free grammars we talk about conditioning on the head of a rule

[18:58] <lichtkind> thanks TimToady maybe for your amusement the perl6tut im writing on opens with an quate of paul graham "There are some stunningly novel ideas in Perl, for example. Many are stunningly bad, but that's always true of ambitious efforts. At its current rate of mutation, God knows what Perl might evolve into in a hundred years.", but chapter 2 and 4 are yours :)

[18:59] <aufrank> TimToady: me too

[18:59] <lichtkind> qoute

[18:59] <TimToady> also, having a declarator naturally give a hook for pragmas

[18:59] <TimToady> use phrase :myopt;

[19:00] <aufrank> nice

[19:00] <TimToady> use token :foo;

[19:00] <TimToady> use rule :exhaustive;  # :-/

[19:01] <TimToady> of course, if we define one in terms of the other, the question arises whether a pragma on rule also applies to the others...

[19:01] <TimToady> sort of the "is deep" thing.

[19:02] <pmichaud> I could see it going either way

[19:02] <TimToady> If we follow "is deep", then default is syntactic, and you use :deep or some such for semantic mods.

[19:03] <TimToady> optimized that way obviously because :deep is shorter than :shallow  :)

[19:04] <TimToady> but also because part of the reason for "parse" in the first place is so that you can think of it as its own thing.

[19:04] * PerlJam hands the parse to TimToady

[19:04] <TimToady> *phrase

[19:05] <pmichaud> I think I need to disappear from IRC for a while to get some actual coding done -- anything else for me before I /away?

[19:05] <PerlJam> token/phrase doesn't quite mesh for me. Those two words live in different mental buckets.

[19:05] <aufrank> one nice thing about phrase is that it corresponds to tree or subtree in syntax

[19:06] <FurnaceBoy_> true

[19:06] <aufrank> (in that case I would think of tokens as either words or terminals or nodes)

[19:08] <PerlJam> I know, let's go with word/stanza/poem  instead of token/phrase/grammar  ;-)

[19:08] <audreyt> phrase sounds good.

[19:08] <aufrank> PerlJam: then we get sub-word distinctions as well (foot, iamb, spondee)...

[19:09] <xinming> role A does A { }; class B does A; B.new

[19:09] <xinming> what's the result ? :-)

[19:10] <PerlJam> xinming: an error because "role A does A" doesn't make much sense.

[19:10] <PerlJam> or perhaps a warning and it works anyway depending on your level of stricture.

[19:10] * xinming shakes hands with PerlJam 

[19:10] <TimToady> token/syntax maybe...

[19:10] <xinming> PerlJam: It should be an error... or compiler automatically ignore this.

[19:10] <audreyt> syntax error { ... }

[19:10] <xinming> hmm, I don't know though...

[19:11] <audreyt> "syntax" means "phrase structure", right?

[19:11] <audreyt> (in natural, instead of computer, languages)

[19:11] <PerlJam> audreyt: right.

[19:11] <TimToady> It means "BNF production" in computerese

[19:12] <TimToady> but yes, syntax can mean a set of stuctures, not just one

[19:12] <audreyt> but we have alternation etc

[19:12] <xinming> audreyt: which part should I write test? I mean, test `role A does A;` part, or B.new part?

[19:12] <audreyt> so we can say it already is representing syntax

[19:12] <TimToady> maybe we live with token/phrase, but they're in different mental buckets for me too.

[19:12] <audreyt> instead of just one possible phrase arragement

[19:13] <audreyt> I think "syntax" reads better

[19:13] <audreyt> as a plus, it has no verb form.

[19:13] <pmichaud> syntax if_statement { if <expression> <block> }

[19:13] <audreyt> while "phrase" is both vt and vi

[19:13] <audreyt> and suffers from the same problem as "parse"

[19:13] <TimToady> and the multilevelness of it doesn't really bother me, since

[19:13] <PerlJam> audreyt: you know us computer geeks though, we can verb anything  ;)

[19:13] <TimToady> the top refers to the bits of it anyway.

[19:13] <TimToady> syntax top {...}

[19:14] <audreyt> 21:13 < audreyt> but we have alternation etc

[19:14] <TimToady> alternation doesn't backtrack either

[19:14] <audreyt> and subrules kinda means named explicit structure

[19:14] <TimToady> in syntax

[19:14] <audreyt> I was agreeing with you :)

[19:14] <audreyt> (in saying that the syntax refers to the structure not just one phrase)

[19:14] <pmichaud> syntax would work for me

[19:14] <TimToady> that's what you get for typing in the wee hours of the morning.

[19:14] <audreyt> indeed

[19:15] <audreyt> I should sleep :)

[19:15] <TimToady> going, going, gone...SOLD!

[19:15] * audreyt spent the whole night parsing Artistic 2.0b14.

[19:15] *** Arathorn is now known as Aragone

[19:15] <audreyt> it... reminds me of Perl 6 in many ways, compared to Artistic1.

[19:15] <pmichaud> could we have :syntax instead of :ratchet, then?  Or is that too much aliasing?

[19:16] * PerlJam would like :syntax over :ratchet  

[19:16] <particle_> yes, nurse ratchet.

[19:16] *** asdddd joined
[19:16] <audreyt> I have no idea what ratchet means.

[19:16] *** asdddd left
[19:16] <PerlJam> (in fact, anything would work better than ratchet I t hink)

[19:16] <pmichaud> "ratchet" in general means that once you take a step, there's no going back

[19:17] <audreyt> pmichaud: webster doesn't list that...

[19:17] <audreyt> wordnet lists that meaning, under the verb slot

[19:17] <audreyt> which is even more confusing.

[19:17] <aufrank> wordnet++

[19:17] <particle_> :oneway

[19:17] <audreyt> oh, as "rachet up" compound.

[19:17] <TimToady> :syntax doesn't work for that, since token also ratchets.

[19:17] <pmichaud> google "define:ratchet"

[19:17] <PerlJam> aufrank: have you ever seen the innards of an old-fashioned clock?

[19:17] <TimToady> and I wanted something very attention getting.

[19:17] <PerlJam> er, audreyt

[19:18] <audreyt> PerlJam: yeah. but I lack the English vocab :)

[19:18] <audreyt> (or rather, the cultural metaphoric context)

[19:18] <TimToady> likewise for :panic instead of "try"

[19:18] <pmichaud> okay, I'm not strongly opposed to :ratchet -- just wanted to (briefly) explore the possibility

[19:18] <pmichaud> I think :panic is appropriate :-)

[19:18] <audreyt> TimToady: so maybe :Legacy instead of :Perl5 ;)

[19:18] <TimToady> it seems like a lively metaphor.

[19:19] <pmichaud> audreyt observed on #parrot that ":panic" is likely to be the $& of Perl 6 :-)

[19:19] <TimToady> Thats falling into Pythons .repr trap.

[19:19] <TimToady> *which* legacy?

[19:19] <svnbot6> r10045 | yiyihu++ | role A does A { }; class B does A; B.new;

[19:19] <svnbot6> r10045 | yiyihu++ | This will cause infinite loop in pugs, a partial test...

[19:19] <audreyt> true

[19:19] <aufrank> the contextually relevant one, of course

[19:19] * pmichaud away again

[19:19] <TimToady> all the more reason to make :panic something with strikingly negative connotations.

[19:20] <pmichaud> yes, that's why I think it's appropriate :-)

[19:20] <TreyHarris> TimToady: I'm confused about "rule ident { [ <alpha>: | _ ]: \w+: }".  Why is there a colon after <alpha>, but not after _?

[19:20] <pmichaud> TreyHarris: the colon prevents backtracking into the <alpha> subrule

[19:20] <TimToady> cause you can't backtrack a literal anyway.

[19:21] <TreyHarris> yes, but wouldn't token do the equivalent of putting a colon there, even though it's useless?

[19:21] <TimToady> and if you pass the literal, the []: prevents backtrack to _.

[19:21] <pmichaud> TreyHarris: we don't know that it's useless :-)

[19:22] <audreyt> I think the jargon is :predictive.

[19:22] <TimToady> but yes, following the ":"-anything-that-progresses rule might be clearer.

[19:22] <audreyt> (as the antonym to "backtracking")

[19:22] <pmichaud> I was thinking "committed"

[19:22] <PerlJam> audreyt: It would almost work as  :backtrack(0) and :backtrack  except that usually you want the opposite sense.

[19:23] <TreyHarris> apologies if i'm being pedantic, but I was comparing the "token ident" line and the "rule ident" line looking for the mechanistic behavior of "token", not the semantic result

[19:23] <TimToady> that's why I said it might be clearer.

[19:23] <pmichaud> TreyHarris: np -- I understand your question better now

[19:23] <pmichaud> yes, it probably would make more sense w/a :

[19:23] <TimToady> it's the "is deep" thang again...

[19:24] <audreyt> :predictive and :committed both sound like computerese :)

[19:24] <audreyt> just like "syntax"

[19:24] <audreyt> but unlike "parse", "phrase", or ":ratchet"

[19:25] <TreyHarris> audreyt: lots of "syntax" in the non-computer world.  there's a syntax on liquor, syntax or tobacco.... :-)

[19:25] <particle_> :committed and :panic have other meanings, to asylum-seekers

[19:25] <pmichaud> perhaps just :commit and :panic

[19:25] <PerlJam> :commit plays well with <commit> :)

[19:25] <svnbot6> r10046 | yiyihu++ | Rename role_does_itself.t to self_inheritance.t, as I forgot the

[19:25] <svnbot6> r10046 | yiyihu++ | class A is A { }; A.new; test++

[19:27] <PerlJam> though if we do too much of that people will derive a general rule that just isn't true.

[19:27] <audreyt> . o O ( :chill and :panic )

[19:27] <PerlJam> heh

[19:27] <TimToady> ooh.

[19:28] <PerlJam> :hhgttg

[19:28] <TimToady> that works on so many levels...

[19:29] <PerlJam> :chill ?

[19:29] <TimToady> As you chill toward 0C, you're reducing your possible states.

[19:29] <pmichaud> (0K)

[19:29] <TimToady> that too. :)

[19:30] <TimToady> till all you have left are the one's allowed quantumly.

[19:30] <TimToady> which is like *+ and friends.

[19:30] <pmichaud> oooh

[19:30] <Juerd> eh, *+?

[19:31] <audreyt> "formal; distant; lack of enthusiasm or activity"

[19:31] <Juerd> Either 0 or 1, or more? :)

[19:31] <pmichaud> *+  forces * to be a backtracking quantifier

[19:31] <Juerd> Ah

[19:31] <TimToady> not been following p6l have we?

[19:31] * PerlJam was thinking that :relax (the not so literal meaning of chill) would work too

[19:31] <pmichaud> as opposed to *: which is greedy but doesn't backtrack

[19:31] <audreyt> PerlJam: but it doesn't relax the parse...

[19:31] <Juerd> TimToady: 402 Tuits required

[19:31] * aufrank wonders if someone will come up with a connection b/w chill and freeze

[19:31] <audreyt> it makes it stricter

[19:31] <PerlJam> audreyt: no, it's a command ot the user :)

[19:31] <audreyt> heh ok :)

[19:31] <TimToady> except :relax has connotations of allowing more freedom, not less.

[19:32] <audreyt> :chill is like, discourage your freedom

[19:32] <TimToady> :chillout

[19:32] <particle_> :veg

[19:32] <audreyt> :kewl

[19:32] <TimToady> use ingy;

[19:32] <particle_> :peace

[19:32] <audreyt> no way;

[19:32] <PerlJam> Just use a parameterized :entropy

[19:33] <audreyt> (I like the fact that :predictive is very long :))

[19:33] <pmichaud> btw, :backtrack works, since the default is backtrack and :backtrack(0) means "don't backtrack"

[19:33] <TimToady> :blackhole(•)

[19:33] <pmichaud> then token is    rule :backtrack(0)

[19:33] <audreyt> but that reads to me asid you are saying backtrack over 0

[19:34] <pmichaud> sorry  rule:backtrack(false)  (or however we define "false")

[19:34] <audreyt> rule :backtrack('')

[19:34] <TimToady> hmm, :blackhole would never do...either in Russia, or on slashdot...

[19:34] <particle_> rule :-backtrack

[19:34] <audreyt> that feels like double negatives...

[19:35] <audreyt> unless... ooh

[19:35] <audreyt> "token" is the base

[19:35] <audreyt> "rule" is token :backtrack

[19:35] <audreyt> "syntax" is token :words

[19:36] <TimToady> i dunno.  I kinda like that rule is simple like rx.

[19:36] <PerlJam> Could what particle said work as a general syntax?   :thingy == :thingy(1),   :-thingy == :thingy(0)

[19:36] <TimToady> so far we've consistently gone with :foo(0) for the negative form.

[19:37] <pmichaud> perhaps :!thingy  (but I still prefer :thingy(0) )

[19:37] *** froh-doh joined
[19:37] <audreyt> in two places: :w(0) and :c(0), both in S02.

[19:38] <particle_> :-foo or :!foo could mean flip-flop the previous state

[19:38] <audreyt> but (0) is fine... curiously, :w<> works also.

[19:38] <PerlJam> the parentheses are good for general parameterization, but when you're talking about just "on" and "off", it seems like a simpler syntax would be better.

[19:38] <particle_> s/flip-flop/toggle/

[19:39] <PerlJam> Of course, if :-thingy were valid syntax, it begs the question of what :-thingy(1) would mean (if anything)

[19:39] <PerlJam> s/-/!/ if you like

[19:39] <TimToady> I think :!foo reads much better.

[19:39] <audreyt> :!w is natural if that's the case...

[19:39] <TimToady> then :foo is the same as :?foo I suppose...

[19:39] <TimToady> :)

[19:41] <audreyt> still, feels strange to have boolean named arguments that default to true if you don't pass in false

[19:41] <audreyt> but maybe that's just because I havn't got used to :!foo.

[19:41] <TimToady> I avoided the Unix shell -foo syntax precisly because of its negative polarity, but it almost seems to be reinventing half the mistake if we don't have a negative form.

[19:41] <particle_> well, p6 defaults to 'use strict'

[19:42] <audreyt> so what does :!foo(3) mean?

[19:42] <TimToady> would be illegal, I presume.

[19:42] <audreyt> :foo(!3) ?

[19:42] <PerlJam> audreyt: I'd say it's a mistake.

[19:42] <audreyt> cool

[19:42] <TimToady> In fact, prevents scanning for an argument entirely.

[19:43] <PerlJam> sounds perfect

[19:43] <particle_> so, warning if it finds one?

[19:43] <PerlJam> particle_: error!

[19:43] <TimToady> Does :?foo prevent :?foo(0) then?

[19:43] <particle_> yes

[19:43] <audreyt> so they pass in boolean true and false

[19:44] <particle_> then + and - may be more appropriate

[19:44] <TimToady> what I was thinking.

[19:44] <particle_> ? doesn't look true to me

[19:44] <TimToady> me either

[19:44] <audreyt> but + has twigil meaning

[19:44] <audreyt> and I don't think we need a :?foo form

[19:44] <audreyt> unless you want to use that to solve the space-bracket problem

[19:44] <audreyt> q:?w(...)

[19:44] <TimToady> yeah, if you're gonna add an extra character anyway

[19:44] <TimToady> just add a space after :foo

[19:45] <audreyt> right.

[19:45] <audreyt> if you want to print 1

[19:45] <audreyt> just print 1

[19:45] <audreyt> it's !1 that takes typing :)

[19:45] * ingy feels used

[19:45] <TimToady> no;

[19:45] <ingy> thx

[19:46] <audreyt> tested, implemented, committing.

[19:46] <ingy> o/~ there's no ingy like show ... o/~

[19:46] <TimToady> have to run off for a bit.  I think things are pretty settled, at least on the surface...

[19:47] <TimToady> biab&

[19:48] <audreyt> foo(:!a :b :!c)

[19:48] <audreyt> legal syntax, yay

[19:49] <xinming> audreyt: what does that mean?

[19:49] *** heng joined
[19:49] <xinming> foo(:!a :b :!c)   *_*

[19:49] <audreyt> foo(a=>0, b=>1, c=>0)

[19:49] <heng> may I have a perl 5 socket question in this channel ? I asked already in #perl , but no one answered yet, hehe

[19:49] <merlyn> please dont't ask in #perl6

[19:51] <heng> sure, thanks, got ur msg in #perl, thanks, :-)

[19:51] <svnbot6> r10047 | audreyt++ | * Implement :!foo form, which is like :foo except the value is false.

[19:54] <svnbot6> r10048 | audreyt++ | * 01-sanity tests: back port test renumbering fix from parrot.

[19:57] *** Barry joined
[20:00] * audreyt reads on Artistic 2.0b14 more, and is filled with the desire to relicense Pugs to the SQLite 3-clause blessing.

[20:01] <audreyt> (as well as all my CPAN modules.)

[20:02] *** pmurias joined
[20:02] <pmurias> hi

[20:02] <xinming> audreyt: why? :-)

[20:02] <audreyt> xinming: license compatibility issues

[20:04] <audreyt> pugs currently include a lot of 3rd party code

[20:04] <audreyt> and each one needs to be rechecked against Artistic 2.0b14 for compatibility

[20:04] <audreyt> plus, I'm pondering adding LGPL'ed code

[20:04] <audreyt> in particular Judy

[20:05] <audreyt> and allison in #parrotsketch warned that it will conflict with placing Artistic license restriction on the entire pugs tree.

[20:05] <xinming> audreyt: but, the will the problem gone after perl 6 can be self-hosting?

[20:05] <PerlJam> xinming: pugs != perl6

[20:05] <xinming> hmm, I should say pugs...

[20:05] <xinming> PerlJam: sorry. :-)

[20:05] <audreyt> xinming: I doubt we will write all runtime parts without any C bits...

[20:05] <audreyt> not any time soon

[20:06] <audreyt> and I'm not really so skilled in C that I can reimplement judy, or syck, or other C libraries we use, from scratch

[20:06] * PerlJam goes back to figuring out why his RT setup isn't working.

[20:07] <audreyt> and also because I really like SQLite :)

[20:07] * aufrank can't wait for the SQLite backend in the Mozilla suite

[20:07] <audreyt> it's already in Firefox2 preview

[20:08] <audreyt> so, in short, the SQLite noncopyright is the only way that's always compatible with whatever license of contrib/ tree uses

[20:08] <audreyt> and there cannot be copyright disputes where there is no copyright :)

[20:08] <audreyt> (also, Taiwan is not part of WIPO, so I'm entirely operating outside the native jurisdiction anyway)

[20:09] <xinming> audreyt: what does syck do?

[20:09] <aufrank> xinming: yaml parser

[20:09] <audreyt> xinming: it parses and dumps YAML.

[20:09] * gaal_ meows

[20:09] *** saorge joined
[20:09] *** gaal_ is now known as gaal

[20:10] <aufrank> audreyt: are you using the ff2 preview as your day-to-day browser?

[20:11] <audreyt> aufrank: no, not yet

[20:11] <xinming> audreyt: Is perl 5 version of yaml parser based on syck?

[20:11] <audreyt> xinming: I wrote YAML::Syck.

[20:11] <audreyt> ingy wrote a pure perl5 YAML.pm long before that.

[20:11] <audreyt> (which I believe is the first YAML implementation in existence... or something close to that)

[20:12] <xinming> audreyt: what's the license of ingy's version?

[20:12] <audreyt> xinming: Perl

[20:13] <audreyt> Artistic1/GPL

[20:13] * xinming wonders if ingy's version isn't as powerful as C's version except the speed...

[20:14] <audreyt> it is more featureful

[20:14] <audreyt> certainly has more OO APIs.

[20:14] <xinming> why not use ingy's version? :-P

[20:14] <obra> It's slower ;)

[20:15] <obra> lots slower

[20:15] <audreyt> you need to embed perl5 for it :)

[20:15] <audreyt> so takes a lot of memory as well.

[20:15] <audreyt> also, you'd need to coerce your perl6  data into SVs

[20:15] <audreyt> which adds another layer of overhead.

[20:15] <clkao> it was also broken for lots of edge cases

[20:16] * xinming look forwards perl 6's version...

[20:16] <xinming> s/forwards/forward to/

[20:17] * xinming thinks it's a pain that there are so many licenses...

[20:18] <ingy> use YAML::3000;

[20:20] <lichtkind> ?eval  imkreis:

[20:20] <lichtkind> $zaehler++;

[20:20] <lichtkind> $zaehler > 10 and goto frei;

[20:20] <lichtkind> goto imkreis;

[20:20] <lichtkind> frei:

[20:20] *** evalbot_10044 is now known as evalbot_10048

[20:20] <evalbot_10048> Error:  unexpected "i" expecting program not a class name or Only one invocant allowed

[20:21] <xinming> lol... I think you should write them in one line

[20:23] <lichtkind> ?eval imkreis: $zaehler++; $zaehler > 10 and goto frei; goto imkreis; frei:

[20:23] <evalbot_10048> Error:  unexpected "i" expecting program not a class name or Only one invocant allowed

[20:23] <xinming> $zaehler not declars...

[20:24] <lichtkind> ?eval my $zaehler; imkreis: $zaehler++; $zaehler > 10 and goto frei; goto imkreis; frei:

[20:24] <evalbot_10048> Error:  unexpected "i" expecting comment, ";", Doc block, block declaration, declaration, construct, expression or end of input not a class name or Only one invocant allowed

[20:24] <lichtkind> ?eval my $zaehler; imkreis:; $zaehler++; $zaehler > 10 and goto frei; goto imkreis; frei:

[20:24] <xinming> lichtkind: I don't think goto has implemented in pugs...

[20:24] <evalbot_10048> Error:  unexpected "i" expecting comment, ";", Doc block, block declaration, declaration, construct, expression or end of input not a class name or Only one invocant allowed

[20:24] <xinming> Loading Prelude... done.

[20:24] <xinming> pugs> goto

[20:24] <xinming> *** No such sub: "&goto"

[20:24] <xinming>     at <interactive> line 1, column 1-5

[20:24] <xinming> pugs>

[20:24] <lichtkind> ok

[20:30] *** DaGo joined
[20:33] <lichtkind> but after goto i dont need to set ; ?

[20:33] <lichtkind> hust like in perl5

[20:33] <lichtkind> just

[20:36] *** qu1j0t3 joined
[20:36] <xinming> lichtkind: I think so, but It's not specified yet. IMO. :-)

[20:36] <lichtkind> and block naming is without : ?

[20:36] <lichtkind> thanks xinming

[20:36] <xinming> lichtkind: no, I think it might be....   `BLKNAME: { .... };`

[20:37] <lichtkind> but if goto blk... than the block will be executed?

[20:37] <xinming> otherwise, base words are considered a function call.

[20:37] <xinming> lichtkind: I think so.

[20:38] <xinming> as I asked earilier...   how to implement if...  if $a == $b && $c == $d { ... }; will become....

[20:38] <xinming> $a == $b && $c == $d && goto &BLK_passed to if...

[20:39] <xinming> lichtkind: but I'm not sure... you'd better ask someone who is sure about this. :-) I'm still a newbie... :-P

[20:40] <lichtkind> but you seem longer here than i :)

[20:40] <lichtkind> xinming you are chinese?

[20:40] <xinming> longer time does prove anything...

[20:40] <xinming> lichtkind: yes, I am, In mainland.

[20:41] <lichtkind> xinming cool im big fan of chinese culture

[20:41] <lichtkind> and have some years of tai chi practice

[20:42] <lichtkind> xinming you hack on pugs?

[20:42] <xinming> lichtkind: In fact, if you learn perl 6, I'd say....  perl 6 is a bit like Chinese, and C is like English. :-)

[20:42] <xinming> lichtkind: No, I just write some testing.

[20:45] <xinming> BTW, `xinming otherwise, base words are considered a function call.`  <-- here I'm wrong, not base words, In fact, I wish to type bare words.

[20:45] <lichtkind> xinming i hope your not scared but im also big fan of falun dafa

[20:46] <xinming> lichtkind: I'm not, as I don't have religon... :-)

[20:46] <xinming> lichtkind: are you american?

[20:47] <lichtkind> xinming its no religion just a sort of qi gong that i even dont practice but i like their teachings

[20:47] <theorbtwo> xinming: I think Larry has mentioned Japanese as an influence on p6, and I should expect they're very similar, at least on the level that p6 can be similar to a human language.

[20:47] <lichtkind> xinming no im east german

[20:47] <lichtkind> partly  czech

[20:48] <xinming> theorbtwo: In fact, Japanese Characters are learnt from Chinese. :-)

[20:48] <theorbtwo> xinming: I know.

[20:48] <theorbtwo> lichtkind: How old are you?

[20:48] <lichtkind> 30

[20:48] <lichtkind> in a month

[20:48] <lichtkind> but im looking like 24 :)

[20:48] <lichtkind> and in the heart im 5

[20:49] <theorbtwo> So it's not been east germany for slightly over half your lifetime.

[20:49] * theorbtwo is only 25.

[20:49] <lichtkind> http://www.perlmonks.org/index.pl?node_id=275692

[20:49] <theorbtwo> My sister remembers the wall falling; I don't.

[20:49] <lichtkind> theorbtwo its me giving my first talk

[20:50] <xinming> theorbtwo: why I have that kind of feeling is all because the context... but this feeling isn't so strong when I learn programming in perl 5.

[20:50] <lichtkind> theorbtwo your german too?

[20:50] * xinming is only 23

[20:50] *** fglock joined
[20:51] <lichtkind> xinming what you mean?

[20:51] * xinming doesn't know if he is the youngest here.. :-) as Juerd is 5 month older than xinming

[20:51] <xinming> lichtkind: I'm 23 years old...

[20:51] <lichtkind> theorbtwo i was 13 when wall came down

[20:51] <theorbtwo> No.  My sister watched it live on TV from her German class.  I'm 25, and from Lancaster, PA, USA.

[20:51] <lichtkind> xinming no i meant your previous sentence

[20:51] <theorbtwo> I did live in Munich for 2 years, though.

[20:51] * rw-rw-r-- is also 23.

[20:51] <pmurias> i'm probably the youngest pugs commiter

[20:52] <gaal> unlikely.

[20:52] <theorbtwo> nothingmuch is quite young.

[20:53] <gaal> don't we have a commiter who got their bit on their birthday?

[20:53] <gaal> like, the 0th one

[20:53] <xinming> lichtkind: perl is a context sensive language, which means, what it returns, It is all about what the caller want(eg, assignment), if you read more about synopsis... you will know the want function, :-)

[20:54] <pmurias> i'm 16, nothingmuch is 2X

[20:54] <lichtkind> uuuh i dont know the want function ..should read this

[20:54] <xinming> My birth is 1983.11.05 :-)

[20:54] <xinming> ....

[20:54] <theorbtwo> BTW, you might want to change easter(n) to east(ern) Germany.

[20:54] <pmurias> xinming:1989.12.24

[20:55] <xinming> young enough. :-)

[20:55] <buu> So who is writing the builtin christmasy_day function?

[20:57] * xinming needs to go bed... It's 05:00 now... 

[20:57] * xinming waves...

[20:57] <xinming> bye all.

[20:57] <gaal> night

[20:57] <theorbtwo> G'night, xinming.

[20:57] <pmurias> night

[20:58] <pmurias> buu: i can write the christmas_eve function

[20:58] <pmurias> :)

[20:58] <buu> pmurias: Excellent.

[20:58] <buu> pmurias: We have to compete some how.

[20:59] <lichtkind> xinming im also not much into religion but i believ in god

[20:59] <lichtkind> xinming or rather to say i know he is there

[21:00] * xinming needs to finish talking about the god...

[21:01] <xinming> I believe we are the God... No one else...  :-)

[21:02] <xinming> If our technolegy reaches a level which is high enough, we can make something we never see... and we can also make another planet full of creatures, and let themself do the rest of evolution... :-)

[21:03] <amv> i'm constantly getting this spam which says: "she needs a better sex"

[21:03] <xinming> maybe sound crazy... :-)

[21:04] <xinming> amv: you can tell him(it) "Fucking too much is bad for your(her) health"  ;-)

[21:04] <lichtkind> xinming its true god is within us

[21:05] <pmurias> amv: always ask the spammers to phone back :)

[21:05] <amv> but i'm a bit puzzled with it because i always thought female _is_ the beter sex ;)

[21:06] <amv> but they are selling viagra, so probably they just need more customers and thus would like all females to turn into males..

[21:06] <lichtkind> amv no im glad to be male

[21:07] <xinming> amv: I think you can ask his(her) phone... and advertise it on msn-space... :-)    Kind of DDOS.  ;-)

[21:08] <amv> lichtkind: but you can't give birth.. doens't that make you kind of inferior? soon they will be able to produce semsn from female dna and males become completely useless..

[21:09] <Juerd> Useless?

[21:09] <Juerd> Or redundant?

[21:09] <lichtkind> amv no because you need both

[21:09] <Juerd> Some redundancy is good.

[21:09] * Juerd is redundant

[21:10] <amv> Hmm.. why don't partnerships have redundancy?

[21:10] <amv> they always have only two single points of failure

[21:10] <xinming> amv: I don't think so, If there is a possibility to make people through the lab... I'd prefer the natural one...

[21:10] <Juerd> If there are two, they're no longer single ;)

[21:10] *** Ann joined
[21:11] <amv> Juerd: a point there ;)

[21:11] <Juerd> Hello, Ann

[21:11] <Ann> Hi there

[21:11] * xinming really goes to bed... 

[21:11] <xinming> Ann: Hi, have a good time here...

[21:11] * xinming sinks...

[21:11] <amv> xinming: but why would you prefer a person born from the dna of a male and a female over a person born from the dna of two females?

[21:12] <theorbtwo> Juerd: It's even worse then a single point of failure -- it's two points, either of which can cause catastrophic failure.

[21:12] <Ann> Thx, just listening in... Only about in the middle of the Alpaca :-)

[21:13] <pmurias> amv: actually genders developed for a pourpous it avoids mitochondria wastage

[21:13] <amv> pmurias: could i have that in english? =)

[21:14] <pmurias> purpose

[21:14] <amv> what is mitochondrial wastage and how having two genders avoids it?

[21:15] <pmurias> you only take mitochondrials from your mother

[21:15] <pmurias> if you took them from both parents, they would evolve arms and engage into bloody conflict

[21:15] <Barry> Could someone explain what the purpose of perbot's phone function was when it worked?

[21:16] <obra> does phone msg people on your behalf, barry?

[21:16] <pmurias> there for semen don't have so much mitochondrias, and are cheaper to produce

[21:16] <obra> freenode has crazy /msg policies to prevent spammers

[21:16] <Barry> perlbot help

[21:16] <perlbot> (fact)::tell (who) about (what)::(what) > (who)::learn (what) as (info)::relearn (fact) as (info)::phone (phone number)::shorten (url)::shorten it::search (module)::docs (module)::perldoc -f (function)::jargon (term)::math::fortune::flip::host (type) (record)::rot13::roll (die)::tempconv (temp)::scramble (foo)::8ball::slap::diss::what time is it::top/bottom (number) karma::geoip (ip)

[21:17] <obra> oh. wacky

[21:17] <Barry> You feed it a telephone number, so...I don't know

[21:17] <pmurias> once you have to times of gamets you have gender specialisations

[21:17] <theorbtwo> perlbot, phone +18005551212

[21:17] <perlbot> Bad number: +18005551212

[21:17] <amv> pmurias: but why couldn't a female produce also semen so that two females could impregnate each other?

[21:17] <theorbtwo> perlbot, phone 18005551212

[21:17] <perlbot> Bad number: 18005551212

[21:17] <theorbtwo> perlbot, phone 8005551212

[21:17] <perlbot> That function is broken for now, try back later

[21:18] <Barry> Good number though

[21:18] <pmurias> s/times/types

[21:18] *** ribo joined
[21:18] <obra> barry: http://chrisangell.com/incoming/chrisbot/v3/Chrisbot/Common.pm

[21:18] <obra> does reverse lookups

[21:18] <theorbtwo> I suspect it's for reverse-look... ah.

[21:19] <Barry> Oh.

[21:19] *** ribo left
[21:19] <amv> pmurias: (if we are thinking of an evolutional counterpart for the act of artificially extracting dna from a female to impregnate an another female)

[21:19] <Barry> Defunct functions should have better documentation.

[21:19] *** fglock joined
[21:19] <pmurias> we could put the extrac mitochondrias to some other use :)

[21:19] <amv> is there a need for cromosome y? =)

[21:20] <pmurias> s/extra

[21:20] <pmurias> amv: it contains mostly junk, but it activates other genes

[21:20] <amv> but i think i'll stop talking because it seems that all i can do is derail conversation ;)

[21:22] <SamB> so is y chromosome like key file?

[21:22] <pmurias> i'm not really an expert, but it's sort of

[21:22] <pmurias> actually most of the genome are comments

[21:23] <SamB> well, might be

[21:23] <pmurias> containing dead code

[21:23] <SamB> it could be that they are padding or something

[21:23] <SamB> or unneeded library functions

[21:23] <pmurias> evoultion is a patchwork job

[21:24] <pmurias> it uses often cut & paste

[21:24] <SamB> they should add a DNA mode to IDA

[21:24] <fglock> re: a word for "token": "production" "subrule"

[21:24] <theorbtwo> production and subrule are more general.

[21:24] <theorbtwo> In purticular, anything that you can write in rule syntax is a production.

[21:25] <pmurias> that could be a argument against Inteligent Design, God would have used source control, instead of keeping old code in comments

[21:25] <SamB> even with source control you sometimes keep old code in comments...

[21:26] *** Barry left
[21:26] <fglock> theorbtwo: http://colabti.de/irclogger/irclogger_log/perl6?date=2006-04-20,Thu&sel=325#l510

[21:26] <pmurias> he surly wrote a code generator, and that's why there's so much redundancy

[21:26] <SamB> I thought it was to guard against damage

[21:27] <SamB> and encourage microevolution and stuff

[21:27] <pmurias> it actually can help in adaptation

[21:27] <amv> pmurias, intelligent designers would counterargue that all source control systems of that time were proprietary since free software movement didin't exist yet

[21:27] <SamB> hahah

[21:28] <pmurias> *bang*, archaic genome sequence for long fangs activates (*let the suckers run away*)

[21:28] *** ruoso joined
[21:28] <pmurias> night

[21:29] *** larsen joined
[21:29] <SamB> anyway, God seems to have used some sort of distributed source control system

[21:30] <pmurias> sleep&

[21:30] *** aufrank joined
[21:30] <amv> i'd liket o get my hands on that - it must be quite good since all branches of human are still easily integratable

[21:38] <aufrank> did TimToady react to damian's regex/token/rule suggestion at all in the channel?

[21:41] <pmichaud> aufrank: I didn't see anything

[21:43] * aufrank is keeping score at home

[21:47] <cognominal> audreyt: I am studying if siva and parrot objet can be merged, The problem is that implementation wise,  a parrotobject is already an array. It seems that an special pmc object could be baked with a siva pmc as unique attribute  so that an array access would be rerouted to the siva pmc.

[21:50] <cognominal> I am not sure yet if this can be done. I would like to avoid to touch anything beyond that parrotobjectwithuniqueattribute pmc and the siva pmc

[21:50] <PerlJam> What is siva?

[21:50] <theorbtwo> Siva is the implementation of captures in parrot.

[21:50] <PerlJam> Why is it called siva?

[21:51] <cognominal> that a pmc I have created that has the hash, the array,  int and string natures

[21:51] <PerlJam> Oh, I see.

[21:51] <cognominal> ...because it juggles with many things

[21:51] <cognominal> audreyt would like to use it for Captures, I an not sure it is possible.

[21:51] <PerlJam> aufrank: who is winning?  :-)

[21:52] <cognominal> I designed it for nodes of trees, not as real objects

[21:52] <cognominal> so I try to see if we can get both

[21:52] <PerlJam> cognominal: don't captures potentially have an invocant slot?  where would that fit in siva?

[21:53] <cognominal> PerlJam: yes, that's what I say about siva not being object

[21:57] *** larsen_ joined
[21:57] <cognominal> btw: in the parrotobject, the array is used to hold  attributes

[22:02] *** stclare` joined
[22:05] *** soisoisoi joined
[22:11] <meppl> gute nacht

[22:11] <cognominal> bonne nuits les petits :)

[22:30] <Juerd> "hello i feather please i not perl 6 but need server"

[22:31] <clkao> lol

[22:31] <Juerd> The best thing I can do is make fun of it here, because the email address in the From: header bounces -- over quota.

[22:33] <aufrank> Juerd, I not perl 6 either but need dinner please i

[22:34] <clkao>  

[22:34] <Juerd> Hehe :)

[22:34] * clkao dccs trotters to aufrank 

[22:48] *** Limbic_Region joined
[22:55] *** Southen joined
[23:01] *** Quell joined
[23:05] *** azuroth joined
[23:10] *** ruoso left
[23:20] *** Khisanth joined
[23:34] *** cognominal_ joined
[23:43] <pmichaud> TimToady: ping

[23:59] * pmichaud wanders off

