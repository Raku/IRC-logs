[00:03] <dduncan> ?eval my $::('x y') = 3; say $::('x y');

[00:03] <evalbot_8956> Error:  unexpected ":" expecting "$!" 

[00:05] <dduncan> ?eval my $foo = 3; say $::('foo');

[00:05] <evalbot_8956> OUTPUT[3 ] bool::true 

[00:06] <dduncan> ?eval my $::('foo') = 3; say $::('foo');

[00:06] <evalbot_8956> Error:  unexpected ":" expecting "$!" 

[00:13] *** blm joined
[00:14] <dduncan> anyone here?

[00:15] <xinming> only us two right now I think

[00:15] <blm> In some emails I saw reference to some documents with name with S followed by two numbers.  Maybe they were language design documents. Does anyone know where they are?

[00:15] <dduncan> Larry says that this [   $::('x y');   ] is working in Pugs right now

[00:15] <dduncan> synopsis 2

[00:15] <xinming> blm: http://dev.perl.org/perl6/doc/synopsis.html

[00:16] <dduncan> see http://dev.perl.org/perl6/doc/synopsis.html

[00:16] <blm> Thanks heaps :-)

[00:16] <dduncan> but from my own tests, I can't get that to work

[00:16] <dduncan> I get compile errors

[00:16] <xinming> blm: If it starts with A, then, It is apocalypse. if it starts with S, then, It is synopsis... etc...

[00:17] <xinming> dduncan: ??

[00:17] <dduncan> ?eval my $::('x y') = 3; say $::('x y');

[00:17] <evalbot_8956> Error:  unexpected ":" expecting "$!" 

[00:17] <dduncan> now, Larry just now said on p6l and p6c that the second statement is already working in Pugs

[00:18] <dduncan> even if that were the case, how do I first declare the variable 'x y' in order to reference it, if that won't compile?

[00:18] <xinming> dduncan: I think, for $::('x y'); It is used for rule object.

[00:18] <dduncan> I'm inclined so say "no it's not" on the list, but I'm first checking if I missed something

[00:19] <xinming> dduncan: as, $::('x y') ==> $<x y>; (IMHO)

[00:19] <dduncan> the basic issue is that I want a way to use identifiers that include spaces and such in ordinary code

[00:19] <dduncan> your example doesn't work in Pugs either

[00:19] <dduncan> ...

[00:19] <dduncan> my $<x y> = 3;

[00:19] <dduncan> ?eval my $<x y> = 3;

[00:20] <evalbot_8956> \3 

[00:20] <dduncan> curious

[00:20] <xinming> dduncan: It's used in rule object. IMHO. $<x> is might be the same as $/<x>

[00:20] <xinming> and $<x y> then --------> $/<x y>

[00:20] <blm> Can I ask who "owns" evalbot?

[00:21] <xinming> dduncan: and If you want a identifier which will contain space... I think you'll fail. :-)

[00:21] <dduncan> I should be able to, though, if all uses of it are delimited

[00:21] <xinming> $eval 'I owns my own...'.say;

[00:21] <xinming> ?eval 'I owns my own...'.say;

[00:21] <evalbot_8956> OUTPUT[I owns my own... ] bool::true 

[00:21] <dduncan> they would have to be different delimiters

[00:22] <dduncan> Larry said on the list, first, $::<x y>

[00:22] <dduncan> for a compile time action

[00:22] <xinming> dduncan: If you want a identifier which will contain space, I think you can store it as a key in hash. and don't declare a variable.

[00:22] <dduncan> I could do that, but I prefer not to

[00:22] * Khisanth gets urge to kill certain languages designers

[00:23] <dduncan> I wanted to be able to make a code converter

[00:23] * xinming hands Khisanth a knife...

[00:23] <dduncan> that say, converted SQL to Perl

[00:23] <dduncan> and had the result look as similar as possible

[00:23] <xinming> dduncan: then, sorry, I can't be helpful. :-(

[00:24] <dduncan> in SQL, all delimiters can be double-quote delimited

[00:24] <dduncan> in SQL, all literal strings are single-quote delimited ... different delimiter, so no conflict

[00:24] <xinming> dduncan: could you please give me the link about that?

[00:24] <xinming> in ml

[00:24] <dduncan> do you mean about SQL?

[00:24] <xinming> no

[00:25] <xinming> I mean the @larry one

[00:25] <dduncan> in ml ...

[00:25] <xinming> mailing list

[00:25] <dduncan> I believe its http://nntp.perl.org/group/ or something ...

[00:25] <xinming> Khisanth: :-) why do you want to do that?

[00:25] <xinming> dduncan: It's a pain to search. >_<

[00:25] <dduncan> its one of the last ones

[00:25] <dduncan> but I can link anyway ...

[00:26] <Khisanth> xinming: because I kinda hate being lied to

[00:26] <dduncan> see  http://www.nntp.perl.org/group/perl.perl6.language/24644 for example

[00:27] <dduncan> also http://www.nntp.perl.org/group/perl.perl6.language/24648

[00:27] <xinming> Khisanth: @larry lied?

[00:27] <dduncan> the latter includes the former

[00:27] <dduncan> maybe he said that from memory

[00:27] <xinming> dduncan: hold ono plz

[00:27] <dduncan> still, please see what he says and see what you think I can do in Pugs now that's equivalent

[00:28] <Khisanth> xinming: there was a claim it would be less line noise, seems like it's going in the opposite direction all the time

[00:29] <dduncan> fyi, what I'm looking for is mainly an optional feature that would be used mainly by people invoking other languages, or maybe writing code generators ... not something you would use typically for manual work

[00:30] <dduncan> and as I mentioned in http://www.nntp.perl.org/group/perl.perl6.language/24643 , basically its only desugaring to help the tokenizer, and wouldn't affect anything else

[00:30] <dduncan> optional desugaring

[00:30] <dduncan> 'cause once things are tokenized and/or parsed, they're all the same

[00:30] <dduncan> with or without spaces initially

[00:31] <dduncan> all the same as in "hash keys" or thereabouts

[00:34] *** theorbtwo joined
[00:39] * dduncan back in a bit

[00:51] *** Cryptic_K joined
[00:55] *** macli left
[01:08] *** theorbtwo joined
[01:26] * dduncan is back

[01:32] *** vel joined
[01:35] *** xern joined
[01:38] *** justatheory joined
[01:46] *** joepurl joined
[02:03] *** Cryptic_K joined
[02:34] *** Blicero_ joined
[02:35] *** Blicero_ left
[03:27] *** vel joined
[03:35] *** robkinyon joined
[04:17] *** ACIDBUCK joined
[04:36] *** _SamB_ joined
[04:50] *** Amnesiac joined
[05:12] *** beppu_ joined
[05:31] *** Cryptic_K joined
[05:37] *** khisanth_ joined
[05:38] *** khisanth_ is now known as Khisanth

[05:58] <meppl> guten morgen

[06:03] <dduncan> I concur

[06:04] <meppl> good morning dduncan

[06:04] <dduncan> I concur

[06:04] <meppl> :D

[06:05] <dduncan> I concur

[06:05] <dduncan> that said, its actually evening here

[06:06] <meppl> good evening dduncan

[06:06] <dduncan> good evening/morning meppl

[06:25] *** cventers joined
[06:52] *** GeJ joined
[07:13] <svnbot6> r8957 | Darren_Duncan++ |  r2381@darren-duncans-power-mac-g4:  darrenduncan | 2006-02-07 23:10:13 -0800

[07:13] <svnbot6> r8957 | Darren_Duncan++ |  /ext/Rosetta : continued rewrite of Language.pod

[07:31] *** drbean joined
[07:43] *** nothingmuch joined
[07:43] <nothingmuch> audreyt: while I agree that pugs is taking the right direction I wanted to make it more "official"

[07:43] <nothingmuch> thhat's my grudge

[07:44] <nothingmuch> that they expect Perl 6 to sort of grow organically

[07:44] <nothingmuch> and they are "counting on us" to just do it OK

[07:44] <PerlJam> "they"?

[07:44] <nothingmuch> on the other hand we don't really get any authority on design decisions

[07:44] <nothingmuch> @Larry

[07:44] <nothingmuch> design decisions go much deeper than syntax

[07:45] <nothingmuch> even if Perl 6 grows organically and it's a success

[07:45] <PerlJam> nothingmuch: authority on design decisions comes from showing the design to be faulty through an implementation.

[07:45] <nothingmuch> it will converge on something similar to what I am trying to detail anyway

[07:45] <nothingmuch> true, but that is on a very small scale

[07:45] <nothingmuch> because everyone knows that componentization and layering and modularity are Good Thinngs

[07:48] <PerlJam> nothingmuch: btw, I tend to agree with your email to p6l.  Chunking things better might allow some chunks to be small enough that I can tackle them in my moments of boredom.

[07:49] <nothingmuch> exactly

[07:49] <nothingmuch> we need more steps and milestones, not fewer ones, because we're adhoc

[07:51] *** iblechbot joined
[08:16] *** Aankhen`` joined
[08:41] *** Debolaz2 is now known as Debolaz

[08:53] *** sanxiyn joined
[09:07] *** nothingmuch joined
[09:20] *** drrho joined
[09:22] <nothingmuch> hola

[09:32] <nothingmuch> http://www.perlmonks.org/?node_id=527975

[09:57] * nothingmuch tried to clarify his intent once more

[09:57] <nothingmuch> i hope it helps

[10:10] *** r0nny joined
[10:24] *** Aankh|Clone joined
[10:27] *** G2 joined
[10:56] *** GeJ joined
[11:16] *** dada joined
[11:21] *** scook0 joined
[11:45] <audreyt> nothingmuch: I think officiality is overrated

[11:46] <audreyt> (see my reply)

[11:46] <gaal> hey audreyt 

[11:46] <audreyt> nothingmuch: (and also this is getting massively offtopic for p6l :D)

[11:46] <audreyt> gaal: yo

[11:46] <audreyt> my name is all over .tw TV networks now

[11:46] <gaal> oh?

[11:46] <audreyt> :/

[11:47] <audreyt> fortunately I'll be escaping this in 5 days

[11:47] <gaal> as a person trying to get access to .il? :)

[11:47] <audreyt> as a person who get covered without consent

[11:47] <gaal> boo :(

[11:48] <audreyt> a certain newspaper published the runtype typecasting's (paraphrased) translation without interviewing me

[11:48] <audreyt> so, sucks

[11:48] <gaal> sue them for copyright infringement :-P

[11:48] <lypanov> audreyt: :(

[11:48] <audreyt> sadly it's paraphrased

[11:48] <lypanov> out of context paraphrased?

[11:49] <audreyt> nah, it's more or less accurate translation

[11:49] <audreyt> just published against my explicit intent

[11:50] <Juerd> Can they use your name legally without your approval?

[11:51] <Juerd> I have no clue about international media, but in NL it's common to abbreviate the last name (or, if the first name is much less common, the first name) to a single letter.

[11:51] <audreyt> I don't know; in any case I'm not dwelling on this particular time sink anymore... I need to get back on pugs :/

[11:51] <Daveman> :o

[11:51] <Juerd> Wow. Audreyt++ :)

[11:53] <lypanov> best option..

[11:55] <nothingmuch> audreyt: this is not officiality, really

[11:55] <nothingmuch> it's more of a call for participation

[11:55] <nothingmuch> i'd like @Larry to help with this too

[11:55] <nothingmuch> and to ask people to help with it

[11:55] <nothingmuch> audreyt: when are you landing in IL ?

[11:57] <audreyt> nothingmuch: 14th

[11:57] <nothingmuch> okay

[11:57] <nothingmuch> i'm landing on the 19th

[11:57] <nothingmuch> so you wanna have a planathon for the 2 days before the hackathon?

[11:57] <audreyt> sounds fine

[11:58] <audreyt> or maybe I'll start with gaal without you

[11:58] <audreyt> :D

[11:59] <nothingmuch> sure

[12:03] *** iblechbot joined
[12:07] *** chris2 joined
[12:10] <lypanov> morning chris2

[12:11] <gaal> I'll be happy to work on that, but definitely I need some help with the exporter stuff :)

[12:11] <chris2> hi lypanov 

[12:17] *** drbean joined
[12:54] *** nnunley joined
[13:06] *** kolibrie joined
[13:15] *** bsb joined
[13:21] *** nothingmuch joined
[13:28] *** pjmm joined
[13:36] *** KingDiamond|away is now known as KingDiamond

[13:39] *** xern joined
[13:44] *** Aankhen`` joined
[13:45] *** pdcawley joined
[13:48] *** elmex joined
[13:51] *** _SamB_ is now known as SamB

[14:18] *** BeoTW joined
[14:19] <BeoTW> hi, i'm new here. (I have been lurking the perl6 effort for some while)

[14:22] <nothingmuch> BeoTW: well, sorry, we aren't accepting new applicants right now.. Try again in 6 months/

[14:22] <nothingmuch> ?

[14:22] <nothingmuch> ;-)

[14:22] <wolverian> THAT WAS A HORRIBLE JOKE 

[14:22] <BeoTW> don't worry. I have my own hobby work :)

[14:25] <nothingmuch> BeoTW: start on http://dev.perl.org/perl6 - familiarize with the synopses and stuff

[14:25] <nothingmuch> then svn co the pugs repo from http://svn.openfoundry.org/pugs

[14:25] <nothingmuch> and we will set you up with commit access

[14:25] <BeoTW> thanks. I prefer to stick with lurking and picking up ideas :)

[14:26] <GeJ> bande de baltringues de NetSol...

[14:26] <wolverian> you don't have to do anything - we just like to give commit access :)

[14:26] <BeoTW> anyway, reason I checked out here is I was just zapping on taiwan tv

[14:26] <GeJ> oops, sorry

[14:26] <GeJ> EBADWINDOW

[14:27] <BeoTW> (I am in taiwan now). funny thing is; audrey was covered by one news/gossip channel

[14:27] <wolverian> yeah, she knows. :)

[14:27] <wolverian> what kind of coverage was it?

[14:27] <integral> heh, you're the first to end up here though :)

[14:28] <wolverian> :)

[14:28] <BeoTW> I suppose there are not a lot of programming language freaks wathcing taiwan channels

[14:28] <lypanov> nothingmuch: lol. brilliant response

[14:28] <Daveman> integral :)

[14:29] <BeoTW> I dont knwo what it was about. it was all in chinese, with the fotos from the pugs blog

[14:30] <wolverian> 12:49    audreyt : a certain newspaper published the runtype typecasting's (paraphrased) translation without interviewing me

[14:30] <nothingmuch> newspaper != tv channel

[14:30] <wolverian> yeah, I don't know what happened there :)

[14:31] <BeoTW> i saw it on tv. I was getting a haircut, and they had screens with those crap news channels to watch

[14:31] *** Qiang joined
[14:32] *** bsb joined
[14:41] *** rantanplan_ joined
[14:41] *** chris2 joined
[14:45] *** bsb left
[14:45] *** bsb joined
[14:49] *** joepurl joined
[14:50] *** vel joined
[15:11] *** Aankh|Clone joined
[15:11] *** nnunley_ joined
[15:31] *** nnunley_ is now known as nnunley

[15:31] <nothingmuch> seen audreyt?

[15:31] <jabbot> nothingmuch: audreyt was seen 3 hours 33 minutes 27 seconds ago

[15:37] <Juerd> nothingmuch: I think you missed an important thing when writing your proposal :)

[15:37] <Juerd> nothingmuch: This community loves NAMES :)

[15:37] *** Eimi joined
[15:37] <nothingmuch> Juerd: =(

[15:37] <nothingmuch> i'm quite sad about it

[15:37] <Juerd> nothingmuch: Give a layer a cute name, cuter than "Perl 6 Extended" or "Standard Library", and at least half the people complaining now would LOVE it.

[15:37] <Juerd> :)

[15:38] <nothingmuch> i didn't expect chromatic to be so annoyed with this

[15:38] <nothingmuch> i doubt adding humor would help now

[15:38] <Juerd> I think they largely miss the point.

[15:39] <Juerd> Something I also encounter much when posting stuff. My feather usage mail was widely misunderstood as "feather's overloaded", while the actual message was "feather is so quiet these days, what's happening?"

[15:41] <nothingmuch> heh

[15:41] * nothingmuch wishes he had time to abuse feather

[15:41] <nothingmuch> but i think i will have some again soon

[15:41] <Juerd> I included one line saying that if people were busy doing other stuff, I would try and find more hackers feather.

[15:41] <Juerd> s/feather/for feather/

[15:41] <Juerd> I should have phrased that differently. 

[15:41] <Juerd> Same is true for a few lines in your post, but it is too late now.

[15:42] <stevan>  ok,.. I dont get allison's last remark

[15:42] <stevan> sort of feels like she is saying "sure whatever,.. you guys have fun with your little toy"

[15:43] <stevan> oh well

[15:43] * stevan goes to volunteer for the Scala project

[15:44] <stevan> nothingmuch: nice response to David,.. you made your points well there I think

[15:47] <nothingmuch> add support for globs

[15:47] <nothingmuch> oops, wrong channe;l

[15:47] <nothingmuch> Juerd: yes, i think i agree

[15:47] <nothingmuch> stevan: i think she is saying "well, you surely don't expect *me* to do that, do you?"

[15:48] <stevan> nothingmuch: maybe

[15:48] <nothingmuch> at least that's how I understood it

[15:52] <stevan> I just get the feeling that they dont take our opinions and work seriously

[15:59] <lypanov> is there an ml archive?

[15:59] <lypanov> i've like to read

[16:03] <bsb> stevan: I suspect it's more a communication gap

[16:04] <bsb> They go "MEta model, very nice..." and Pugs folk go "Punie with tree transforms, very nice..."

[16:05] <bsb> but to understand the meat of either requires quite a bit of effort

[16:05] <bsb> I can't keep up with either

[16:07] <integral> "punie with tree transforms?  sounds nice,  but we can run a 8000 test testsuite,  and you can print 1"

[16:08] * lypanov has a jitting ruby that can print 1 too!

[16:09] * chris2 has a non-jitting beryl that can print 1 and 2 ;)

[16:10] <lypanov> :P

[16:10] <chris2> and all other natural numbers below 2^32

[16:10] <lypanov> actually mine can do a times table printout

[16:10] <lypanov> and the number printing is written in ruby too

[16:11] <lypanov> and thats also jitted

[16:11] <lypanov> so i win, i hope :P

[16:11] <chris2> i need to refactor my VALUE first before i can write more complex code

[16:11] <lypanov> quick quick quick!

[16:11] <chris2> how big is your VALUE, btw?

[16:12] <lypanov> um...

[16:12] <lypanov> in nanovm?

[16:12] *** G2 joined
[16:12] <lypanov> two ruby VALUE's

[16:12] * lypanov didn't work on optimisation of the low level stuff /at all/

[16:13] <chris2> so, 64 bit?

[16:13] <bsb> integral: Parrot has it's share of tests too.  But the Meta Model and Punie are important projects, but their importance isn't apparent without investing to time to see why

[16:13] <lypanov> chris2: yup

[16:13] <chris2> mmh, okay

[16:13] <chris2> i have 128 bit so far, which is a bit icky. but i think i can optimize that later

[16:14] <stevan> bsb: but Parrot tests are exactly that,.. tests for Parrot,.. not Perl 6

[16:14] <stevan> Punie is Perl 1 even

[16:14] <chris2> (128 bit processors will be default anyway when i finish :P)

[16:14] <integral> bsb: Personally I don't see them as important for the first release of perl6 on parrot

[16:14] <bsb> sure

[16:14] <integral> To me they seem to be for later goals of having a better faster perl6.

[16:14] <stevan> there is a large gap between Perl 6 the language and Parrot the VM

[16:14] <integral> And I have not fiddled with them at all because they're written in PIR :)

[16:14] *** mauke_ joined
[16:15] <stevan> the p5 approach of evaling the opcode tree will not work IMO

[16:15] <integral> stevan: that's the original pugs approach;  the one that PIL is replacing :)

[16:15] <bsb> And Punie is a test flight to bridge the gap

[16:16] <integral> why do we need a test flight?   Can we just decide to sit down and write as good a perl6 as possible with the tools?

[16:16] <stevan> bsb: actually I think the goal of Punie is more to build a set of compiler tools for Parrot,.. 

[16:16] <bsb> Who is evalling the op tree? (I really don't know)

[16:16] <integral> Like writing as good a perl6 as possible with the tools that Pugs is using

[16:16] <lypanov> chris2: lol

[16:16] <stevan> bsb: p5 parses code into an opcode tree,.. then the evaluator just walks it

[16:16] <stevan> (i am simplifying somewhat)

[16:17] <lypanov> ;)

[16:17] <chris2> my main problem is that every value by design can contain a continuation. i need to code some things first before i can decide how often that happens

[16:17] <bsb> stevan: ok, I thought you meant the Punie was doing/planning to do that

[16:17] <stevan> all the things that the p5 runtime needs (scalars, arrays, hashes, packages, etc) are manipulated with opcodes

[16:18] <stevan> bsb: that is the approach that Punie and PGE are currently taking for their experimental p6 stuff

[16:18] *** mauke_ is now known as mauke

[16:18] <stevan> p6 will require a more sophisticated set of things (classes, object, scalars, arrays, roles, hashes, packages modules etc etc)

[16:19] <stevan> to make a set of opcodes for manipulating them like they are in p5 would be insane

[16:19] <bsb> You're prototyping that now aren't you?

[16:19] <stevan> not the opcode stuff no

[16:19] <stevan> the object space approach is to take a minimum of opcodes and use them to build the things we need

[16:20] <stevan> layering until we get to Perl 6

[16:20] <stevan> once we define objects and classes, we can make roles... once we have that,.. we can build container types, etc etc

[16:21] <stevan> otherwise you end up pushing this all down to the VM

[16:21] <stevan> and in the case of Parrot,.. this is not appropriate because Parrot is not just for Perl 6

[16:21] <stevan> if it was,.. I would be fine with that

[16:22] <stevan> but if Parrot caters too much to Perl 6,.. then it will not be received well by other languages

[16:23] <bsb> I thought Parrot was intended to allow fast and tightly integrated language specific PBCs

[16:24] <stevan> yes, but that reduces cross language compatiability does it not?

[16:24] <bsb> So the meta-model and prelude would be optimized into that piecemeal

[16:24] * integral notes that this cross language compatibility has *still* not been demonstrated

[16:24] <stevan> bsb: yes, that would be the best approach IMO

[16:25] *** j0sephi joined
[16:25] <stevan> integral: the way .NET does it is to force everyone down into pure ILASM

[16:25] <Odin-> Igh.

[16:25] <Odin-> Sounds nasty.

[16:25] <stevan> Odin-: it is :)

[16:25] <bsb> Similarly, punie and pge can use rudimentary opcode evals until something better can replace it

[16:25] <integral> Sure, but they actually have something which *works* :)

[16:26] <stevan> but it works, price you pay for compatability

[16:26] <stevan> bsb: I think Punie and PGE are good projects,.. 

[16:26] <stevan> but they will not bridge the gap,... and this is something we have learned with Pugs,.. 

[16:26] <stevan> why not learn from our mistakes?

[16:27] <stevan> I think they see our project as being a totally different approach,.. and it is really not that different

[16:29] <bsb> stevan: I'm not so clear on what "the gap" is?  Generic clothin?

[16:30] <stevan> bsb: the Parrot object model is not the Perl 6 object model as speced in S12

[16:30] <bsb> Is it about getting Perl6 on Parrot?

[16:30] <stevan> yes

[16:30] <stevan> much needs to built atop parrots model to make Perl 6's model... to support all the features

[16:30] <stevan> although to be honest,. many of those features are not fully speced,.. so it's tricky

[16:31] <stevan> this gap needs to be filled

[16:31] <stevan> then if the array/scalar/hash are to be objects,.. as it says in S02,.. then they need to be hooked to the metamodel

[16:31] <bsb> So PGE and Punie aren't really addressin, or intending to address that?

[16:31] <stevan> not that I can see

[16:32] <bsb> (where are all my "g"s goin)

[16:32] <stevan> Python made the mistake originally of not having arrays and dicts be extenable, they have since fixed that

[16:32] <stevan> we should not make that same (very old) mistake 

[16:33] <bsb> It does seem odd that Parrot is so concerned about supporting Tcl, Python, and Ruby, yet Perl 6 incompatible

[16:34] <stevan> not incompatible really

[16:34] <bsb> Surely, it's not

[16:34] <stevan> Python, Ruby, etc are todays dynamic languages

[16:34] <stevan> perl 6 is being designed to be tomorrows dynamic language

[16:35] <bsb> (..uplifting music swells..)

[16:35] <stevan> and it is hard to support something which is only partially speced,.. and which is doing this people have not done before (well except LISP.. LISP did everything 20 years ago)

[16:35] <theorbtwo> I'm rather annoyed with the perl foundation's approach to perl 6.  They keep appointing managers.  That's OK.

[16:35] <theorbtwo> The problem is that instead of managing, the managers go and implement their own private code.

[16:35] <stevan> Ivory Tower approach :)

[16:36] <bsb> I thought Allison quit managing to start implementing code

[16:36] <stevan> allison was the tpf president

[16:36] <stevan> oh wait,.. yeah she was the p6 manager too

[16:37] <theorbtwo> I mean, one of those people ended up writing PGE; not all was lost.

[16:37] <bsb> I don't have a problem with private code, but it doesn't help momentum

[16:37] <stevan> exactly

[16:37] <theorbtwo> Exactly.

[16:37] <stevan> or cooperation

[16:37] *** hexmode joined
[16:37] <stevan> I cannot code with what I cannot see

[16:38] <bsb> or understanding of the relevance

[16:38] <theorbtwo> Even worse, when the person who is loudly responsible for foo does that, it puts other people off from thinking about it.

[16:38] <theorbtwo> The situation appears to be well in hand.

[16:38] <bsb> Maybe.  I have found Pm to be very helpful when contacted

[16:39] <stevan> thats not the point though

[16:39] <bsb> Actually, I should thank you stevan, for taking the effort to keep us in the picture

[16:40] <theorbtwo> People shouldn't have to contact him; he should be rallying effort.  That's the point of having management in place.

[16:40] <bsb> "us" being pugs tourist

[16:40] <stevan> bsb: :)

[16:41] <stevan> theorbtwo is absolutely right,.. the whole point of OSS is that many eyes make for better software

[16:41] <bsb> Maybe Pm was a bad example as he's implementor rather than manager

[16:41] <theorbtwo> Indeed, many thanks.

[16:41] <theorbtwo> Really?  I thought his title was pumpking.

[16:41] <bsb> Even Larry follows the private coding when it suits

[16:42] <bsb> theorbtwo: I can't say for sure

[16:42] <stevan> theorbtwo: IIRC you are right

[16:42] <stevan> bsb: Larry's project is a different story

[16:42] <bsb> Sure

[16:42] <stevan> the p5->p5 translator was his "fun" project

[16:42] <theorbtwo> Larry has often done that, I think.  Mostly, even.  I don't much mind for the translator thing.

[16:43] <theorbtwo> Was?

[16:43] <stevan> theorbtwo: sorry,.. s/wa/i/

[16:43] <integral> My gripe isn't that they write code, is that it's *their* private code that they don't publish.

[16:43] <theorbtwo> Ah, OK.

[16:44] <bsb> integral: I kind of agree from my position on the sidelines

[16:45] <bsb> I don't like coding in public though

[16:45] <theorbtwo> As do I... but I suppose part of it may be that I am pretty obviously on the sidelines.

[16:45] <integral> Actually I don't like the fact that parrot is much the same too.   Even the committers can't just fix things everywhere, they've got bugs to file, and people in charge of certain bits

[16:45] <integral> And you can't do things that aren't in chip's big mysterious design

[16:46] <bsb> Pugs is the unusual one in that respect

[16:46] <stevan> bsb: but the model seems to work well

[16:46] <theorbtwo> I haven't payed much attention to pugs in a very long time.

[16:46] <bsb> It does seem to work

[16:46] <theorbtwo> Er, s/pugs/parrot/

[16:47] <theorbtwo> I payed a lot of attention for a while, but I quickly saw that they weren't really doing much moving forward into higher-level bits.

[16:47] <integral> We've also got the advantage that all the things that use pugs are in the repository, so when you change things,  they can be changed together

[16:47] <integral> theorbtwo: they *still* have bugs in the GC

[16:47] <integral> personally I can't understand that.  Surely a GC is a very standalone thing that one can test to death?

[16:48] <theorbtwo> Yeah, well, that's life.  Unless they are show-stopper bugs, then that's OK, they'll get fixed, in the meantime, settle vaugely on an API, and build on top of the GC while you're fixing bugs in it.

[16:49] *** lumi joined
[16:49] <bsb> The api for parrot is complicated by the number of languages

[16:50] <bsb> Full generality is hard (see also Meta Model :)

[16:50] <stevan> s/languages/designs/  :P 

[16:50] <theorbtwo> Naturally it is.  One of the problems with both parrot and pugs is trying to be everything to everybody.

[16:51] <theorbtwo> Parrot keeps trying to let more languages compile to it, pugs keeps trying to compile to more languages.

[16:52] <theorbtwo> It feels like pugs is getting better about that.

[16:53] <theorbtwo> Sigh.

[16:53] <theorbtwo> I should really stop ranting.

[16:54] <bsb> I don't know if parrot can do the same.  One of it's goals is multilanguage support

[16:55] <theorbtwo> Yeah, but it needs to remember that it isn't 1.0 yet.

[16:55] <theorbtwo> If you want to change things, you're going to have to break things sometimes.  These things happen, and the live languages will fix themselves to deal.

[16:57] *** KingDiamond is now known as KingDiamond|away

[16:59] <wolverian> oh no, larry slipped out the secret design list email address on p6l ;)

[17:01] <stevan> wolverian: and you will be shot if you get to close to it,.. either that or the dogs will get you,.. and if not that,.. you wont get past the razor wire,.. that things locked up tighter than a CIA prison in a former soviet block country

[17:02] <wolverian> now you're letting the sarcasm show :) 

[17:03] <Juerd> Heh, knowing perl.org, it's probably ezmlm, and not too hard to sign up by sending mail to, say(npi), [email@hidden.address]
[17:03] <wolverian> also probably manually whitelisted

[17:03] <Juerd> Most mailing lists depend on secrecy rather than whitelists.

[17:03] <wolverian> perl6-* depend on whitelists

[17:03] <Juerd> Yes, for *posting*

[17:04] <Juerd> Who wants to post there... Lurking is so much more interesting :)

[17:04] <wolverian> yeah.. I was thinking about spamming it :) I mean.. of people spamming it..

[17:05] <bsb> People like sausages and want Perl 6 shouldn't watch either being made

[17:05] * theorbtwo goes mmpf.

[17:06] <wolverian> that took the longest time to parse

[17:06] <theorbtwo> Why wasn't that conversation on perl6-language?

[17:06] <stevan> hmm,... p6 made out of the slimy bits left behind by other languages all wrapped up in pigs intestine.,.. not that far from the truth maybe ;)

[17:06] <wolverian> it's not a design by committee? :)

[17:07] *** justatheory joined
[17:08] <theorbtwo> I thought it was supposed to be design by benovelent dictatorship: there's discussion, larry makes a decision, everybody hopefully shuts up, at least until it becomes obviously bad.

[17:09] <Juerd> 14ssssh, we're not supposed to discuss this!

[17:09] <integral> the last bit couldn't happen before pugs though

[17:10] <integral> all the tpf/managery/parrot people seem to think of nothing but management :-/

[17:10] <theorbtwo> I guess I'm just the poor ensign on conn who wonders why the doctor gets called to the conference room when there's something wrong with the conn controls and nobody can steer, and he doesn't.

[17:12] * stevan puts theorbtwo in charge of steering,.. integral in charge of mangament and Juerd in charge of clandestine services 

[17:12] <Juerd> integral: Yep. And that explains why they interpreted nothingmuch's proposal in that light :|

[17:12] <stevan> and bsb in charge of sausage making

[17:13] <Juerd> Okay, can we agree to call the core layer of Perl 6 "Sausage"? That's one cute name down, a few to go ;)

[17:13] <bsb> I am living in Germany at the moment...

[17:13] <stevan> bsb: sorry wurst then

[17:13] <Juerd> bsb: You have to steal their sausage secrets.

[17:13] <theorbtwo> So we'll end up with sausage in strange colours?

[17:13] <Juerd> Just look for Wurstgeheimnisse

[17:13] <bsb> Made from BLOOD!

[17:14] <integral> "You're searching the wrong archives. :-)" -- should I be worried by the smiley?  Is larry gleeful that all this vital design information is hidden in a locked cupboard?

[17:14] * stevan prefers the red Perl 6 to the milky grey Perl 6

[17:14] <integral> I mean, can we actually trust @Larry to get info from [email@hidden.address] into S*?

[17:14] <bsb> I do

[17:15] <Juerd> integral: I stopped trying to interpret non-verbal textual communication in email, unless when something annoys me, and there's a positive smiley that can convince me it was not meant bad :)

[17:15] <Juerd> integral: In this case, there was nothing to annoy me, so I didn't parse the smiley at all.

[17:15] <theorbtwo> I think one of the best things TPF could possibly do is hire a secretary.

[17:15] <stevan> theorbtwo: they have,,.. its chromatic

[17:15] <stevan> he is the fastest typer apparently :)

[17:16] <Juerd> But Chr^Wchromatic is usually very busy doing ORA things, isn't he?

[17:16] *** marmic joined
[17:16] <theorbtwo> This person does little but make good summeries of the p6* lists, including sixperl, and output current specification, which goes into an SVN.

[17:16] <stevan> hmm.. sound like fun ;)

[17:16] <theorbtwo> Ideally, it mails approprate lists a diff midnight every day, along with what message they are up to.

[17:18] <theorbtwo> I don't like that when somebody new comes along and wants to know how feature X is currently speced, the answer is "read all the S*, then the last 5 years of mailing list archives".

[17:21] *** pdcawley joined
[17:21] <stevan> shhh the summarizer is here 

[17:21] *** binary42 joined
[17:22] <stevan> theorbtwo: if it is not in S* it is not yet Perl 6 law

[17:22] <integral> or they forgot to put it in..

[17:22] <stevan> integral: but that should not matter,.. 

[17:22] <stevan> cause it is forgotten

[17:22] <integral> no, because they'll say "You were searching the wrong archives!"

[17:23] <theorbtwo> Where is the S* SVN?

[17:23] <stevan> svn.perl.org/ I think

[17:23] <integral> http://svn.perl.org/perl6/doc/trunk/

[17:23] <integral> err, .../design/syn/S*.pod specifically

[17:37] *** avar joined
[18:07] *** sapper joined
[18:16] *** G2 joined
[18:18] *** ayrnieu joined
[18:20] *** sapper joined
[18:21] *** netbsdi joined
[18:31] *** dduncan joined
[18:31] *** bsb left
[18:42] *** sapper joined
[18:43] <dduncan> good morning

[18:45] <dduncan> well, I'm off to a job interview shortly ... where what the company does is akin to my life's ambition ... so please wish me luck, or pray for me, or whatever

[18:45] <szbalint> gl.

[18:54] *** hexmode joined
[19:06] *** avar joined
[19:14] *** j0sephi joined
[19:31] *** Maddingue joined
[19:36] <lypanov> dduncan: i'm keeping fingers crossed for you

[19:36] <svnbot6> r8958 | Darren_Duncan++ |  r2385@darren-duncans-power-mac-g4:  darrenduncan | 2006-02-08 11:35:35 -0800

[19:36] <svnbot6> r8958 | Darren_Duncan++ |  /ext/Rosetta : more Language.pod updates

[19:36] <dduncan> much thanks, to both of you

[19:45] <stevan> dduncan: good luck

[19:45] <stevan> what is it for? (and in turn, what is you lifes ambition?)

[19:46] <dduncan> in brief, my life's ambition is to build systems that provide accurate storage of and easier sharing of knowledge

[19:46] <dduncan> the company in question makes e-learning products and such ... not exactly the same, but close enough that I'd be happy to work there for awhile (which also helps with financial stability)

[19:47] <stevan> nice

[19:47] <stevan> much luck

[19:47] <stevan> you can use #perl6 as a reference,.. we will back you up ;)

[19:47] <dduncan> anyway, I'm off in a few minutes, so I'll have to save further talks to later

[19:47] <dduncan> perhaps

[19:47] <dduncan> but, unfortunately, its a php job

[19:47] <dduncan> but thats my second favorite language

[19:47] <dduncan> to do paid work in right now

[19:48] <stevan> yuk

[19:48] <stevan> oh well

[19:48] <stevan> $work is $work

[19:48] <dduncan> still, while I prefer perl personally, I'm rather language agnostic otherwise

[19:48] * stevan makes a note to build a PHP backend to save people from such pain

[19:48] <dduncan> also, getting money is important now

[19:49] <dduncan> at least its not something proprietary like .Net

[19:51] <stevan> aside from M$,.. .NET really doesnt suck 

[19:53] <dduncan> well, I want something with a free base so users aren't restricted from running the official version by their platform

[19:54] <dduncan> Mono doesn't change that, too much

[19:54] * stevan looks at his watch,.. and hopes dduncan is not late

[19:57] *** Limbic_Region joined
[20:06] *** pdcawley joined
[20:09] *** j0sephi joined
[20:20] *** elmex joined
[20:21] *** TMTOWTDIt joined
[20:30] *** justatheory joined
[20:33] *** marmic joined
[20:39] *** j0sephi joined
[20:47] *** r0nny joined
[20:47] *** pdcawley joined
[20:53] *** chromatic joined
[20:53] <chromatic> So.

[20:55] <Limbic_Region> deep thought

[20:56] <chromatic> I'm trying to figure out the complaints and confusion on p6l and the #perl6 logs.

[20:57] <Limbic_Region> oh, well I am still reveling in new Dad after-glow - http://www.simnet.is/velfag/jasmine/Jasmine.html

[20:57] <chromatic> I saw; contrats!

[20:57] <chromatic> s/trat/grat/

[20:58] <Limbic_Region> thanks - the only way I am going to have time enough to write more perl.com articles or *gasp* a book, is if I do it at $work

[20:58] <Odin-> Seeing a simnet URL here kinda creeps me out. :> (I know why it's there, though.)

[20:58] <Limbic_Region> but it is soooo worth it

[20:58] <Odin-> I thought for a moment "wait, isn't this freenode?"

[20:58] <chromatic> I like your book idea.  It'd be a pity if you couldn't do it somehow.

[20:59] *** r0nny joined
[21:00] * Limbic_Region hasn't been following the list or #perl6 for the last few days (obviously) - complaints and confusion about what?

[21:01] <chromatic> Yuval wants to spec the Perl 6 compiler layers between the language and whatever Parrot provides right now.

[21:02] <integral> Like the AST that needs spec'ed before AST macros can be used?

[21:02] <Limbic_Region> ok, I can see where that would open up a can of complaints/confusion

[21:03] <integral> And then some one misinterpreting this proposal as somehow about management

[21:03] <chromatic> Sure... I certainly didn't understand him.

[21:03] <integral> Are you familar with pugs' model of AST -> PIL -> JS/Parrot/Perl5/etc ?

[21:04] <chromatic> Familiar but not intimately.

[21:06] <Juerd> chromatic: As I understood it, the layers weren't specifically compiler layers, but also layers in language design

[21:07] <chromatic> That's what I understood from his original message too.

[21:07] <Odin-> Modularisation of the system design, on all levels, I thought.

[21:07] <Juerd> There's a common wish many of us share: a somewhat more formal description of the language. That is made much easier if the design is layered to begin with, and people agree on the boundaries of those layers.

[21:07] <chromatic> I disagree.

[21:07] <Juerd> I think the proposal is sound, but too rough

[21:07] <chromatic> I think layer boundaries make too much complexity.

[21:08] <chromatic> At least, those I understood from Yuval's proposal.

[21:08] <cognominal> hum, I have still trouble to understant what Piln exactly is

[21:08] <Juerd> cognominal: As I understand it, it's a high level in-between language, higher than pil2.

[21:08] <chromatic> That's exactly my point.

[21:09] <chromatic> Take cog, a smart guy and an interested guy who has already crossed over the boundary of getting involved in the project.

[21:09] <Juerd> By the way, Limbic_Region: congrats!

[21:09] <chromatic> If he has trouble understanding the layering, how does adding the complexity of all of these in-between interfaces help attract more people?

[21:09] <tewk> I though Perl6 -> pil2 -> piln -> ~ parrot, that would make it a low level language, essentially lambda calculus

[21:09] <Odin-> chromatic: Err. I'd say it's exactly the opposite problem: It's the lack of clear definition that's confusing.

[21:10] <Odin-> chromatic: Because whatever those layers represent will be present anyway, but as an undifferentiated mass.

[21:10] <Juerd> chromatic: Well, it's because there's no documentation (as far as I know) of existing layers. And all existing layers are actual layers in implementation, not related in any way to language design.

[21:10] <Odin-> That's *not* less complexity.

[21:10] <chromatic> How many available lambda calculus hackers are there in the world interested in Perl 6?

[21:11] <Juerd> I forgot to count them, sorry :)

[21:11] <chromatic> You won't need both hands.

[21:11] <Juerd> I can't believe that to be true.

[21:11] <chromatic> Count the number of available Haskell hackers working on Pugs *right now*.

[21:11] <Juerd> But suppose it is, how would it affect us?

[21:12] <chromatic> or in the past month.

[21:12] <Odin-> chromatic: This argument is a bit interesting. You're not arguing they won't be needed, you're arguing they're not present. If they aren't, why won't they be needed with your approach? :>

[21:12] <chromatic> Or in the past four months.

[21:12] <tewk> interaction with the lambda layer will be minimal

[21:12] *** BeoTW_ joined
[21:12] <cognominal> I am following from a distance but I think things are advancing at a brisk pace compared to that last four years.

[21:12] <chromatic> Maybe it will be minimal.

[21:12] <chromatic> But it will not be free.

[21:12] <Odin-> Nothing is free.

[21:12] <Juerd> chromatic: Considering that Pugs is not, by current planning, the Perl 6 implementation, how is Haskell relevant for layering?

[21:12] <chromatic> My argument is that I don't believe it to be necessary complexity.

[21:12] <Odin-> And certainly not freedom. ;>

[21:12] <cognominal> The only problem is to keep up with what is done.

[21:13] <integral> Why not just scrap the synopses and the design process and declare that pugs and its tests are authorative?

[21:13] <chromatic> Because Pugs is useless right now.

[21:13] <chromatic> But if you want to do that, feel free.

[21:13] <Juerd> Useless?

[21:13] <chromatic> No one is in charge -- go right ahead.

[21:13] <Juerd> Do you really think so?

[21:13] <integral> useless?   It can do many of the same things as perl5 such as IRC bots!

[21:13] <chromatic> It took me All Day to build and test Pugs last weekend.

[21:13] <chromatic> I don't care about running it on Spidermonkey.

[21:13] <chromatic> I don't care about running it on the JVM.

[21:14] <chromatic> I don't care about running it on Mono or Rotor or the CLR.

[21:14] <integral> Oh, that's nothing,  I build parrot once and it crashed!   And I read the synopses once and they were missing the answer to my question!

[21:14] <chromatic> I care about being able to find a problem, fix it, and get some satisfaction within a few minutes.

[21:14] <Juerd> I think Pugs has been very useful for discovering corner cases, for playing with the language, for many people's personal skill development, for Perl 6 documentation, and undeniably: for momentum.

[21:14] <chromatic> It's useless to me for that point.

[21:14] <Juerd> How on earth can you state that it is useless? It's not *as useful* as a full Perl 6 implementation.

[21:14] <chromatic> I think that's an important barrier to development.

[21:14] <Limbic_Region> Juerd - thanks

[21:15] <integral> chromatic: not being written in perl5, C or PIR you mean?

[21:15] <chromatic> No.

[21:15] <chromatic> The barrier to entry is way too high right now.

[21:15] <integral> Not being written in a language that chromatic uses?

[21:15] <chromatic> integral, if you're not interested in reading what I wrote, feel free not to respond to me.

[21:15] <Juerd> chromatic: The barrier to entry couldn't be much lower. In pugs, many languages are used, not only Haskell.

[21:15] <chromatic> Yet how do I fix a bug in Pugs/

[21:16] <chromatic> Do I write it in Haskell?

[21:16] <chromatic> Do I write it in C?

[21:16] <chromatic> Do I write it in Perl 5?

[21:16] <chromatic> Do I write it in JavaScript?

[21:16] <chromatic> Do I write it in Perl 6?

[21:16] <Juerd> chromatic: If you find a bug, you can write a test in plain Perl 6. That's as accessible as anything gets.

[21:16] <chromatic> And how long will it take me to rebuild Pugs and run the test?

[21:16] <Juerd> chromatic: Without pugs, however, not even the test COULD be written!

[21:16] <Limbic_Region> well, get it fixed versus fixing it yourself

[21:16] <chromatic> Sure, that's the mantra.

[21:16] <Limbic_Region> getting it fixed is as easy as writing a perl6 test

[21:16] <chromatic> I've had bugs not fixed for a long time.

[21:16] <integral> and if the build time is annoying you, fill in the little bit of code to load the prelude from YAML

[21:17] <chromatic> How long was my Test::Builder broken?

[21:17] <chromatic> I did that.

[21:17] <cognominal> What is missing a great chart that maps the relation between the parts. With such a chart, people would be able to focus to what interest them

[21:17] <chromatic> That's why it takes so long to build.

[21:17] <Juerd> chromatic: If there was another Perl 6 implementation, then Pugs would be useless. But there is not, and Pugs serves as the de-facto implementation, for now. 

[21:17] <chromatic> Again, useless for my purposes.

[21:17] <chromatic> Don't take that for anything more than my opinion.

[21:17] <cognominal> I don't believe in any master plans beyond the synopses.

[21:17] <Juerd> chromatic: That may be so, But it is not useless for Perl 6.

[21:17] <chromatic> That's fine.  I agree.

[21:17] <chromatic> That's not my point.

[21:17] <integral> chromatic: Could you compare it to parrot?  How is parrot better on these points than pugs?

[21:17] <Juerd> chromatic: In fact, I think that aside the synopses, it's the most useful thing that ever happened to Perl 6.

[21:18] <chromatic> This is not about Parrot, integral.  I never mentioned Parrot.

[21:18] <integral> I'm not allowed to mention parrot first?

[21:18] <Juerd> chromatic: Sorry; I assumed (apparently wrongly) that we were discussing Perl 6, not your person.

[21:18] <integral> Or does it suffer from the same problems?

[21:18] <chromatic> I don't want you to get the impression that I am saying Parrot yay, Pugs boo.

[21:18] <chromatic> That's not the point.

[21:18] <chromatic> Parrot suffers from similar problems.

[21:19] <chromatic> My point is this: I believe that the velocity problem of Perl 6 is not a complexity of design issue.

[21:19] <integral> Actually I don't really understand your language problem.   It would seem that has *no* solution other than an implementation in each of the ones you named

[21:19] <Odin-> Any implementation would suffer from similar problems, unless you were intimately familiar with it.

[21:19] <Juerd> I was also under the impression than nothingmuch meant Perl 6 in his proposal, not the implementations only.

[21:19] <chromatic> I believe it's a practicality of contribution issue.

[21:19] <Juerd> chromatic: I think it's both.

[21:20] <chromatic> Juerd, you may be right.

[21:20] <integral> I'd like to remind people that there *is* feather, which can compile pugs in ~40 minutes from clean, and *much* less from non-clean

[21:20] <Juerd> chromatic: You do appear to assume that someone who is unable to contribute to the implementation is unable to contribute to the project.

[21:20] <Juerd> chromatic: Which is wrong, for contribution of tests has to happen by many people to be succesful, and can be done already.

[21:20] <chromatic> I don't mean to give that impression.

[21:20] <Juerd> chromatic: The level of entry for that is incredibly low.

[21:20] <stevan> chromatic: until pugs I was knew very little about lambda calculus

[21:20] <chromatic> No, it's not low.

[21:20] <mauke> integral: the latest svn pugs? I doubt that

[21:21] <Juerd> I have no C skills, no Haskell skills, and mediocre Perl 5 skills

[21:21] <stevan> until pugs nothingmuch didnt know Haskell

[21:21] <chromatic> A 40 minute build is not low.

[21:21] <integral> mauke: hmm

[21:21] <Juerd> However, from the very beginning of Pugs' Perl 6 support, I have been able to contribute tests.

[21:21] <chromatic> stevan, I'm not sure holding you or Yuval up as an example of the average hacker is statistically valid!

[21:21] <chromatic> If I could clone Yuval and Luke, I would.

[21:22] <Odin-> chromatic: Is "the average hacker" kinda like "average joe", with a bit of programming skills?

[21:22] <stevan> chromatic: that is not what I am doing,.. my point is only that pugs has caused many people to learn new skills

[21:22] <Juerd> The tests catalyze development, and can be re-used in the real interpreter to come. If testing is 1/3 of development, then I think Pugs has gotten us a huge head start.

[21:22] <Odin-> The "normal person" who is so stupid as to be unable to understand the High and Mighty things that need to be done on their behalf?

[21:22] <chromatic> I'm saying the normal person doesn't know the lambda calculus and doesn't have the skills to write a self-hosting language.

[21:22] <chromatic> He can learn, I'm sure.

[21:23] <chromatic> But will he?

[21:23] <integral> but they don't need to do either!

[21:23] <stevan> chromatic: what does that matter?

[21:23] <stevan> it only takes a few really

[21:23] <chromatic> How many?

[21:23] <integral> I don't understand all this stuff about "the lambda calculus" actually.   What do you need beyond being able to use sub{} in perl5?

[21:23] <stevan> I am not sure i understand the reasoning behind your argument?

[21:23] <chromatic> The more complexity you add to the implementation, the fewer people will contribute.

[21:23] <stevan> what does this matter,.. 

[21:23] <chromatic> That's my conjecture.

[21:23] <chromatic> I could be wrong.

[21:23] <Juerd> chromatic: I think Pugs is near the level of support to help Perl 6 bootstrap. From that point forward, isn't the entry level exactly that which is wanted: any good hacker who knows Perl 6?

[21:24] <stevan> but how is that different from the complexity of writing tree tranformations in PIR?

[21:24] <chromatic> Juerd, I hope so.  The sooner Pugs can do that, the better.

[21:24] <integral> but *a* implementation is less complex than *no* implementation!

[21:24] <stevan> or hacking the depths of Parrot

[21:24] <Juerd> integral: Neither do I. I don't understand lambdastuff. It feels somewhat weird to see someone claim that I wouldn't have been able to contribute...

[21:24] <integral> you don't have the whole grammar to write, just the bit for your addition

[21:24] <Odin-> chromatic: Complexity is there; you can push it down in one place, but it comes back up in another. The argument is, where should that complexity go?

[21:24] <chromatic> The number of people who know C is greater than the number of people who know Haskell or PIR.

[21:25] <chromatic> That's why Parrot is C, not Scheme or Haskell or even C++.

[21:25] <integral> Odin-: into a small enough area for audrey to maintain ;-)

[21:25] <stevan> chromatic: ok,. that is parrot,.. which is not the Perl 6 compiler

[21:25] <Juerd> chromatic: But do you think there are many people who want to hack a Perl 6 interpreter up in C, from scratch?

[21:25] <chromatic> integral, I agree.

[21:25] <Odin-> integral: Wouldn't that be ideal? But, seriously. There's too much even for that. ;)

[21:26] <Juerd> chromatic: Sure, many people know C. But I think the percentage of Haskell hackers interested in Perl 6 is much greater than the percentage of C hackers interested in Perl 6. Also, a single Haskell hacker is more productive in terms of language support completeness, which is all we need for bootstrapping: performance is of much later concern.

[21:26] <stevan> chromatic: I think the point is being missed really,.. it is not that we need to break up the current project into these parts,.. its that we dont see these parts being addressed in the current project,.. so they need to be created

[21:26] * Odin- fails to see why modularised design would be harmful.

[21:26] <Juerd> chromatic: (Though I may be wrongly assuming that Pugs will be used for bootstrapping.)

[21:26] <mauke> (too) many people use C without understanding the language

[21:27] <integral> And I'm not convinced C is easier,  considering some of the bugs that get introduced into parrots

[21:27] <Odin-> Besides, modularisation is generally an analytic tool. Look at the famous "three powers".

[21:27] <Juerd> As an outsider, I think I could more easily learn Haskell than C, by the way :)

[21:27] <Juerd> I have to stop typing now. Sorry to leave you in the middle of a discussion.

[21:27] <Juerd> afk

[21:29] <Juerd> Oh, one last observation: the entry level to contribute being high does not invalidate the usefulness of a modular design as suggested by nothingmuch.

[21:29] <Juerd> afk

[21:30] <Odin-> Hm. The argument is that the modular design would *raise* the entry level.

[21:30] <Odin-> (Which doesn't seem logical to me, frankly...)

[21:30] <stevan>  But the complexity must exist somewhere,.. 

[21:31] <stevan> and so the entry level for a non-modular design would be roughly the same multiplied by the size of the monolothic design

[21:31] <chromatic> Juerd, I don't.

[21:31] <chromatic> but I think the number is greater than the number of people who want to hack up a Perl 6 interpreter in just about any other language.

[21:31] <chromatic> But again.

[21:31] <chromatic> These are just my opinions.

[21:31] <chromatic> I could be wrong.

[21:31] <chromatic> None of you needs my or anyone's approval to explore your ideas.

[21:32] <chromatic> stevan, I agree.  That's the most valuable part of Yuval's proposal and I think it's well-worth doing.

[21:32] <integral> No one was looking for approval for pugs,  but I think instead for more helpful design

[21:32] <stevan> chromatic: ok, so maybe Yuval and I need to go back and work out these details more,..

[21:33] <chromatic> My concern is that, for example, rewriting existing things such as PGE in Perl 6 is more expensive than useful.

[21:33] <stevan> not talk about changing anything,.. only bringing in the peices which are missing to the mainstream and not bury them in pugs

[21:33] <stevan> chromatic: that is Luke's pet project 

[21:33] <integral> "expensive"?

[21:33] <stevan> the more useful PGE re-write was in Haskell

[21:34] <chromatic> But I'm also trying to figure out where this Pity Poor Pugs persecution complex is coming from.

[21:34] <stevan> and it took only a few days and made it possible for us to describe PIL^N in a P6 grammer

[21:34] <stevan> which will help when/if that gets ported to Parrot

[21:34] <stevan> so it was not expensive, it was well worth the cost

[21:34] <chromatic> Sure, but that was the *third* version of the system.  Of course it was easier.

[21:34] <Odin-> chromatic: They're only "expensive" if you think in terms of some sort of officially given jobs.

[21:34] <stevan> chromatic: yes, exactly

[21:34] <chromatic> Odin, not true.

[21:35] <chromatic> Think of opportunity costs.

[21:35] <stevan> chromatic: I will help you understand the pity complex if you help me understand your obsession with "cost"

[21:35] <chromatic> Sure.

[21:35] <integral> But if there's a PGE in PIR, one in Haskell and another in perl6, you don't just have PIR hackings hacking it, but Haskell and Perl6 ones too!

[21:36] <chromatic> Hey great, three places to maintain code!

[21:36] <integral> *hackers

[21:36] <Odin-> chromatic: Yes, and that's an unknown (unknowable, in fact) value.

[21:36] <integral> yes, but three times the hackers!

[21:36] <integral> Much more accessible, which I thought was important?

[21:36] <chromatic> Pure conjecture.

[21:36] <kattana_> chromatic just seems to want things done now, lots of us are impatient but if you have the energy to push people to do things use it to get it done yourself.

[21:36] *** kattana_ is now known as Kattana

[21:36] <chromatic> No.

[21:36] <chromatic> chromatic wants as many people to be able to contribute as possible.

[21:36] <chromatic> chromatic thinks that making it easy to do so will encourage more people to contribute.

[21:37] <integral> But how do you do that?  What language do you pick to write X in?

[21:37] <chromatic> I think complexity, duplication, and frustration are barriers to that.

[21:37] <chromatic> That's my obsession with cost, stevan.  What is the cost of someone contributing something useful?

[21:37] <Kattana> think of the huge "cost" to make it simple.

[21:37] <chromatic> Then think of the benefit for that cost.

[21:37] <chromatic> Is Haskell the right language to write a parser in

[21:37] <chromatic> Maybe so.

[21:37] <Kattana> complicated things are easy, simplicity is the mark of genius.

[21:38] <chromatic> Is it the right language for a project?  Maybe... if you accept that the ease of writing has a tradeoff with the fewer number of able contributors.

[21:38] <stevan> chromatic: I dont think it is a pity complex so much (although I was certainly bitching this morning, I will agree) as much as it is a feeling that our work and the learning from that work are not being taken into account with the Parrot side of the project, that it almost seems we need to hack it in PIR to be taken seriously

[21:38] <Odin-> Economic analysis isn't applicable to all of reality. ESPECIALLY not when there are countless unknown variables.

[21:38] <integral> I'm still confused...

[21:39] <integral> if there's you're not trying to discourage pugs,  then why is rewrites of things in pugs' factored into the cost of the other perl6 developments?

[21:39] *** DesreveR joined
[21:39] <stevan> chromatic: in some ways we are at the R&D stage, so cost should not be an issue, it should be assumed to be "lost revenue"

[21:39] <chromatic> stevan, certainly the desire to support multiple backends (and the perception that the project has stalled in the past few months to do so) makes me less interested in contributing.

[21:39] <chromatic> Again, just me.

[21:40] <stevan> chromatic: well audrey needs to earn a living, as do I

[21:40] <chromatic> As does just about everyone else.

[21:40] <stevan> Parrot has the backing of TPF which a luxury

[21:40] <chromatic> Some backing.

[21:40] <chromatic> Larry?  Day job.

[21:40] <chromatic> Chip?  Day job.

[21:40] <stevan> yes, enough to help pay Chip and Leo I assume

[21:40] <chromatic> Jesse?  Day job.

[21:40] <chromatic> Patrick?  Day job.

[21:41] <chromatic> Allison?  Day job.

[21:41] <chromatic> chromatic?  Day job.

[21:41] <chromatic> Luke... well, Luke's just special.

[21:41] <stevan> :)

[21:41] <stevan> Luke has school

[21:41] <chromatic> Exactly.  He's the one of us without a day job.

[21:41] <chromatic> I don't know what Leo does.

[21:41] <stevan> Larry's list participation ebbs and flows with his job

[21:41] <integral> school doesn't count as a day job?!

[21:41] <LeTo> suffering from lack of money ;)

[21:41] <stevan> Allison works on Punie one day a week

[21:42] <chromatic> My concern is that anything that increases complexity only do so when there's a clear value.

[21:42] <chromatic> That's all.

[21:42] <stevan> chromatic: but is it increasing it? the complexity must exists somewhere

[21:42] <stevan> this is what I am not getting about your argument

[21:43] <Odin-> Why do you think modularisation of the design doesn't qualify?

[21:43] <stevan> where is the type inferencer going to live?

[21:43] <stevan> in a module, ... or in the depths of some monolothic design?

[21:43] <stevan> complexity either way

[21:43] <chromatic> It's not clear to me that we *need* a type inferencer Right Now.

[21:43] <stevan> we have a types do we not?

[21:43] <chromatic> The last time I considered it, I thought that would be a part of PAST/POST.

[21:44] <chromatic> Depends on what you think the next piece to implement is.

[21:44] <obra> a modular design is great. And it'll make people better able to hack on things. And there's nothing stopping pugs from starting to build better abstractions between subsystems.

[21:44] <chromatic> I personally would like to see an end-to-end system that can run at least a simple Perl 6 expressioin.

[21:44] <chromatic> expression

[21:44] <stevan> pugs does that?? slowly, but it does it

[21:44] <chromatic> I'd love to see that hook up to Parrot.

[21:45] <integral> pugs doesn't?

[21:45] <chromatic> Not usably, for me.

[21:45] <stevan> chromatic: it does,.. not sure what state it is in now

[21:45] <integral> should have been working in the release

[21:45] <chromatic> After eight hours of running the tests, I gave up.

[21:45] <stevan> chromatic: the usable argument does not hold water with me,.. of course its clunky,..its alpha stage

[21:46] <chromatic> I don't mean clunky.

[21:46] <chromatic> I mean that if I wanted to add a feature to it and run the tests, I'd have to spend 16 hours.

[21:46] * stevan thinks ORA needs to pay chromatic more so he can get  a new 'puter ;)

[21:46] <chromatic> Hey, look!  You've identified a cost.

[21:46] <integral> oh, you missed the big in pugs::hack where it tells you how to run the specific test you're fixing

[21:46] <stevan> chromatic: dont run the whole test suite if you can avoid it

[21:46] <integral> *bit

[21:46] <chromatic> C'mon, you know TDD better than that.

[21:47] <stevan> dont make clean between compiles

[21:47] <stevan> chromatic: yes, but you have to balance the costs ;)

[21:47] <obra> 8 hours for a full test run isn't workable for many developers

[21:47] <obra> chromatic: what sort of hardware is this?

[21:47] <chromatic> It's a 1 G Powerbook

[21:47] <chromatic> 1GHz with 1Gb RAM.

[21:47] <stevan> ram is an issue with Pugs,.. its a hog

[21:47] <integral> what confuses me is that all the smokes report short times like 100-200 minutes, but mine take far longer

[21:47] <chromatic> Not terribly modern but not awful.

[21:47] <cognominal> chromatic: how do Perl bools sell compared to Python and Ruby?

[21:48] <chromatic> Python was about a third of Perl, last I saw, and there was a recent spike in Ruby books that took it above that slightly.

[21:48] <integral> .oO( maybe we need to add some o'reilly haskell books to READTHEM )

[21:48] <chromatic> There's really not enough data on Ruby books to say one way or the other.

[21:48] <stevan> integral: :)

[21:48] <cognominal> I am reading about Ruby and I am happy to see that Perl6 is stealing a lot from it.

[21:49] <chromatic> Anyway, that's my concern about cost.

[21:49] <chromatic> If I have to build Pugs once and run the test suite to know I'm starting from a clean place, that's eight hours.

[21:49] <cognominal> I hope that Audray will be back soon, she will cheer you up

[21:50] <chromatic> Sure, I can run only a few tests when I'm developing (if I know that's a possibility), but before I check in I'm going to run the test suite again.

[21:50] <cognominal> I am mostly a lurker, but when she is there things move fast.

[21:50] <stevan> chromatic: the new (more modular) PIL2 design will hopefully fix that

[21:50] <chromatic> 16 hours of overhead.

[21:50] <chromatic> That's a cost.

[21:50] * stevan puts chromatic on the Pugs Lay-A-Way plan

[21:50] <integral> we're meant to run the tests before checking?  *eep*   I'm a big failure :-(

[21:50] <chromatic> And for integral's sake, dodging Parrot segfaults and GC bugs and syntax changes is also painful.

[21:50] <chromatic> But this is not a Parrot/Pugs comparison.

[21:51] <integral> hmm, is there any large app with a *fast* test suite?

[21:51] <chromatic> Perl 5.

[21:51] <chromatic> Parrot's not *too* bad; it's about 20 minutes on the same hardware for me.

[21:51] <integral> oooh!  yes!   Not very complete though I thought :-/

[21:51] <chromatic> Perl 5 the language is fairly complete.

[21:51] <integral> chromatic: but parrot is very, very small compared to perl5, pugs, ruby, python, etc

[21:52] <chromatic> I agree, but the mechanism for testing Parrot is very slow.

[21:53] <stevan> chromatic: my biggest concern is that the "expense" already "spent" on Pugs will be thrown out and not be used to it's fullest by the Parrot side of the project,... if that is not true,.. they call me paranoid and I will gladly shut up 

[21:53] <stevan> s/they/then/

[21:53] <integral> My worry is that "expense" "spent" on pugs, parrot etc aren't all from the same budget

[21:54] <chromatic> Well to be fair, people only do what they want.

[21:54] <stevan> yup

[21:54] <stevan> but ignoring something does not make it go away either

[21:54] <integral> it ties into your programming language stuff.   The haskell hackers wouldn't have been near parrot with a barge pole

[21:54] <chromatic> How many Haskell hackers are currently working on Pugs?

[21:54] <chromatic> Not people interested in Perl 6 who *learned* Haskell.

[21:55] <Juerd> 23:05 < chromatic> Not people interested in Perl 6 who *learned* Haskell.

[21:55] <Juerd> Why not?

[21:55] <chromatic> Haskell hackers who've started to *learn* Perl 6.

[21:55] <stevan> shapr was one (he edits the Monad Reader)

[21:55] <chromatic> 'cuz you can only get so much work out of your existing fans before you need to attract new people.

[21:55] <Juerd> chromatic: Audrey herself just learned Haskell when she started this all. That was one year ago.

[21:55] <stevan> lightstep was another (but I havent seen him in a while)

[21:55] <chromatic> Audrey was already a Perl 6 fan.

[21:55] <integral> we've had a lot of people who've contributed something and then moved on,  which is nice

[21:56] <Juerd> So Audrey doesn't count in your number of Haskell people working on Pugs? I find that weird.

[21:56] <integral> I'd consider myself a full haskell hacker now fwiw,  and I now use it preferentially to perl and C for projects

[21:56] <chromatic> Well, the point is that Haskell hackers wouldn't have touched Parrot.

[21:56] <chromatic> That's fine.

[21:56] <chromatic> How many Haskell hackers has Pugs attracted?

[21:57] <integral> you want me to go though AUTHORS and categorise them?

[21:57] <stevan> chromatic: how is this a measure of anything??

[21:57] <Juerd> stevan: It's like LoC measuring.

[21:57] <chromatic> Think about it.

[21:57] <stevan> I did,.. I still dont get it

[21:58] <Juerd> stevan: Two lines of code are more than one, but the value of each line of code is factored out despite its importance. Or so I think.

[21:58] <integral> oh, I've got sloccount figures if you want:  pugs contains 28k of ansic, 24k of haskell and 1k of perl in src

[21:58] <chromatic> If the claim is "Writing Pugs in Haskell has attracted people who never would have contributed", surely there's a way to measure the value of that attraction.

[21:58] <integral> chromatic: survey everyone in AUTHORS!

[21:58] <chromatic> Does the ease of writing in Haskell compare to the smaller number of people who can contribute?

[21:58] <obra> chromatic: for the original prototype, clearly.

[21:58] <stevan> chromatic: we are reducing the Haskell parts 

[21:58] <chromatic> That's a question I want to raise for the complexity issue.

[21:58] <Juerd> chromatic: Why is a huge number of people working on the *implementation* ideal?

[21:59] <obra> for an ongoing perl6, audrey has stated that it's just a bootstrap.

[21:59] <chromatic> The point is.

[21:59] <chromatic> NOT

[21:59] <chromatic> that a huge number of contributors is ideal.

[21:59] <Juerd> chromatic: There are lots of things that are just as valuable. I've mentioned tests and documentation, but I'm sure there's more. (These are just two things I've been involved in)

[21:59] <chromatic> The point IS.

[21:59] <chromatic> THAT

[21:59] <chromatic> The harder it is to contribute, the fewer potential contributors that you have.

[21:59] <integral> I think 10-20 haskell hackers at least can be had from AUTHORS

[21:59] <chromatic> At some point.

[21:59] <chromatic> SOME

[21:59] <chromatic> POINT

[21:59] <chromatic> That is important.

[21:59] <chromatic> I want to raise the question.

[21:59] <Juerd> chromatic: Oh, that's certainly true.

[21:59] <chromatic> THAT is ALL.

[21:59] <Juerd> chromatic: I just don't think that it is indeed hard to contribute.

[22:00] <chromatic> Then we disagree, but it's merely an opinion.

[22:00] <stevan> ok, point taken,.. but you are ignoring tests, modules, and docs

[22:00] <chromatic> I don't see how I am.

[22:00] <integral> Writing the specs...

[22:00] <chromatic> If I want to write a test, there's 16 hours of overhead.

[22:00] <chromatic> Ditto moduole.

[22:00] <stevan> chromatic: those are not in Haskell

[22:00] <chromatic> module

[22:01] <integral> no, you DO NOT run the whole suite to add a *test*, or a *module*

[22:01] <Juerd> chromatic: People who join this channel, the mailing list, the pugs project, are generally interested in Perl 6. They don't mind letting others fix their tests, or spending an hour or two to learn Haskell, or at least that has been my perception of the join-learn-contribute cycle.

[22:01] <chromatic> You do if you care about code quality.

[22:01] <integral> no, because by adding a test you cannot have changed the outcome of other tests.

[22:01] <chromatic> Fine, you know what?

[22:01] <chromatic> Nevermind.

[22:01] <chromatic> I get the persecution complex thing now.

[22:02] <Juerd> chromatic: I don't think that in the past year I've ever seen someone say that they wouldn't contribute, but would have if it were C...

[22:02] <stevan> chromatic: how so?

[22:02] <integral> hmm, maybe we should treat chromatic like we do any new person?

[22:02] <integral> Do you have a specific test you want to add?   Do you have a committer bit?

[22:02] <chromatic> You have some very smart people in here and you're doing some very impressive things.

[22:02] <chromatic> I have a committer bit.

[22:02] <chromatic> I have Perl 6 code in modules.

[22:02] <chromatic> I have Perl 6 code in tests.

[22:03] <chromatic> I have Haskell code in a couple of hairy places.

[22:03] <Juerd> chromatic++  # contributor!

[22:03] <integral> okay, what's the test you're wanting to add?

[22:03] <chromatic> You're smart people doing impressive things, but you don't listen very well.

[22:03] <stevan> what are we not hearing??

[22:03] <chromatic> No wonder you feel marginalized and persecuted.

[22:03] <integral> what are we not doing?

[22:03] <chromatic> 1) Making it easier for people to contribute

[22:03] <chromatic> Look around.

[22:03] <chromatic> Listen.

[22:04] <integral> Why do we need to do that?

[22:04] <obra> integral: you don't understand why it's good to make it easier for people to contribute?

[22:04] <integral> no, sorry, why do *I* need to do that?  I'm very happy tinkering with util/build_pugs.pl :)

[22:04] <Juerd> chromatic: Looking around and listening has been a non-stop effort for some of us.

[22:04] <stevan> chromatic:  how could we make it easier? and I am asking seriously

[22:04] <integral> obra: not for my enjoyment of fiddling with individual pugs modules :)

[22:04] <chromatic> 1) Hook up to Parrot

[22:04] <stevan> that amkes it easier?

[22:04] <chromatic> 2) Make an end-to-end system that can run at least one Perl 6 expression

[22:04] <integral> obra: my reason for wanting PIL to advance is because I want to fiddle with targetting other stuff to it

[22:05] <chromatic> 3) Make it possible to run the entire test suite in 15 minutes or fewer

[22:05] <Juerd> obra: I agree making it easier to contribute is always good. I just don't think it's realisticly possible.

[22:05] <chromatic> 4) Identify pieces where people can contribute a complete *thing* in under an hour of investment from idea to commit

[22:05] <Juerd> chromatic: What is end-to-end?

[22:05] <chromatic> A complete Perl 6 program.

[22:05] <stevan> I agree with 3, I think 2 is vague so please clarify what "end to end" means and 1 seems more like a personal wish than anything else

[22:05] <Juerd> chromatic: Running the test suite in less time is simple: have fewer tests.

[22:05] <stevan> 4 is a nice one,.. 

[22:06] <pdcawley> Or a faster interpreter.

[22:06] <chromatic> Damn straight.

[22:06] <chromatic> Or a faster compilation stage.

[22:06] <chromatic> Or faster tests.

[22:06] <integral> hmm, but once we make the interpreter faster people can't contribute to making it faster :-(

[22:06] <stevan> I think we all would like it to be faster

[22:06] <obra> having the test suite broken into smoke tests and regression tests might not be bad.

[22:06] <Juerd> Do you have any ideas on how to make compilation or interpreter faster?

[22:06] <pdcawley> Test first only makes sense when you can run all your tests in reasonable time; you don't want your thought processes interrupted for too long.

[22:06] <Juerd> I think everyone here would like to hear suggestions for making it faster. 

[22:06] <chromatic> Sure, ditch the Haskell back end and hook it up to Parrot.

[22:06] <chromatic> Is it workable?

[22:06] <chromatic> I dunno.

[22:07] <Juerd> In fact, recently, it has been made faster to compile.

[22:07] <chromatic> I don't hack on Pugs.

[22:07] * LeTo is reading _faster: FYI: http://use.perl.org/~leo/journal/ 

[22:07] <chromatic> It's too painful.

[22:07] <integral> that's not where most of the slowness is.

[22:07] <Juerd> chromatic: That is being done, gradually.

[22:07] <pdcawley> How many of the existing tests are marked as TODO?

[22:07] <chromatic> Before a release?

[22:07] <integral> pdcawley: about 1400 at the moment

[22:07] <chromatic> I know my tests all passed six months ago.  Now they fail.

[22:08] <integral> before the release 1325 is probably representative

[22:08] <stevan> such is life with alpha software which is -Ofun

[22:08] <Juerd> chromatic: Releases are just moments when people feel the changelog becomes too hard to backlog, and release to avoid that backlogging becomes impossible :)

[22:08] <pdcawley> How many tests are actually expected to succeed?

[22:08] <pdcawley> breaking tests that used to pass doesn't sound inspiring...

[22:08] <stevan> what is wrong with failing tests??

[22:08] <chromatic> Nothing, if you fix them to pass.

[22:09] <obra> It used to feel like audrey lived to fix broken tests.

[22:09] <chromatic> But if you guys don't care about running the entire test suite...

[22:09] <integral> "you"?   why do we need all these extra people if we can fix it all?

[22:09] <obra> Now that she's got enough other stuff going on, we need to find more people who live to fix broken tests.

[22:09] <chromatic> You AREN'T fixing it all.

[22:09] <integral> I can see *that*!

[22:09] <stevan> obra: you have a good point

[22:09] <integral> But you're saying that to get more people to help do stuff like that...

[22:09] <chromatic> You need to make it easier to contribute, yes.

[22:09] <integral> Or do these people do something different?

[22:10] <lypanov> chromatic: because it takes so damn long to test?

[22:10] <obra> Pugs is a much more complex beast than it used to be.

[22:10] <pdcawley> Just thinking that a test triage for increasing test speed might be to move the TODO tests into a secondary suite for the overnight smokes or whatever.

[22:10] <obra> It used to be very easy to dive in and fix failing tests.

[22:10] <chromatic> Precisely.

[22:10] <obra> It's now a lot harder to get started.

[22:10] <pdcawley> If you're working on a TODO test because you want to fix it, move it into your 'live' test set.

[22:10] * obra ponders regular conference "Pugs boot camp" hackathons.

[22:10] <stevan> well hopefully the PIL2 runcore will fix these things

[22:11] <chromatic> I hope so too.

[22:11] <obra> The barrier to entry can be dropped many ways. More tutorials, more hackathons, more money (to pay hackers), more people who live to fix tests.

[22:11] <pdcawley> You still have a body of tests that you are expecting to work and you'll know if something you did broke them; then, when you have the time, run the complete suite.

[22:11] <integral> pdcawley: but don't you need to run the complete suite before you check in any changes?

[22:11] <stevan> if nothing else the test suite can be used for Parrot/PGE/etc

[22:11] <obra> Faster smokes would be good too. I wonder if it'd be possible to get pugs down to a minimal but complete subset with only one backend.

[22:11] <pdcawley> integral: Before checkin to the main line? Certainly. 

[22:11] <stevan> obra: all the backends rely onthe Haskell core

[22:12] <pdcawley> Before checking into your local svk repository? Maybe not.

[22:12] <Juerd> obra: The backends aren't what makes compilation slow.

[22:12] <integral> pdcawley: but that's the problem, you may have missed what chromatic said,  it was that step that was very, very slow :)

[22:12] <integral> ah, svk that's a good idea

[22:12] <obra> ok. What _Else_ can get cut out for a minimal smoke

[22:12] <Juerd> obra: Haskell? :)

[22:12] <lypanov> why not run a random repeatable subset on each test run? (print the seed at the end of the failures)

[22:12] <obra> "how small can we get"?

[22:12] <stevan> Juerd: :D

[22:12] <pdcawley> lypanov: *Really* not liking that idea.

[22:12] <integral> there's nothing easy like adding some more FastPackedStrings?

[22:12] <lypanov> pdcawley: why?

[22:13] <pdcawley> You should at least run everything you expect to PASS every time you run the tests.

[22:13] <lypanov> pdcawley: oh yeah. of course

[22:13] <Juerd> GHC is slow, and what it creates is slow. But I think we can live with that.

[22:13] <integral> hmm, I'm not wrong in thinking that Pugs.Parser is using FPS am I?

[22:13] <lypanov> pdcawley: i meant the insane non core  items

[22:13] <Juerd> Maybe we can set up a distributed cluster of compiling machines?

[22:13] <Juerd> (distcc)

[22:13] <pdcawley> lypanov: So long as there is a sensible core that you've committed to having pass...

[22:14] <obra> chromatic: would a set of fast test hosts be a way to help lower your barrier?

[22:14] <chromatic> Potentially.

[22:14] <integral> oh, Pugs.Rule *doesn't* use FPS.    Maybe someone needs to look at either changing it to FPS, or switching it to the new parser library thingie from the PIL work

[22:14] <Juerd> Sorry, what's FPS?

[22:14] <obra> would fast automated smoking be almost as good? so you can guarantee that it fixes your one test and can test the whole kit on the farm?

[22:14] <integral> Juerd: FastPackedString

[22:14] <chromatic> It would be less good.

[22:14] <lypanov> pdcawley: it would at least mean they were tested after all

[22:15] <obra> chromatic: understood.

[22:15] <Juerd> integral: Is that a Haskell string type?

[22:15] <integral> Juerd: yep.  It uses bytearrays in memory, rather than singly-linked lists per char

[22:15] <obra> fastpackedstring was the string implementation handcoded for the version control system in haskell, yes?

[22:15] <obra> And I'm genuinely blanking on the name.

[22:15] <Juerd> integral: Ah, I see.

[22:15] <obra> It's not just svk bias

[22:15] <integral> obra: the one included with pugs is a newer version with a few more features I believe

[22:16] <lumi> darcs?

[22:16] <integral> obra: *nod*

[22:16] <obra> But that was the genesis,right? yeah. darcs :)

[22:16] <Juerd> integral: I reckon this would help because many in-between formats are strings?

[22:16] <Juerd> darcs still runs on feather

[22:16] <obra> does the .il hackathon have a theme yet?

[22:16] <chromatic> For me, the most beneficial thing would be a Perl 6 parser that could spit out PIL that I could run on Parrot.

[22:16] <integral> Juerd: well a big time waster is actualyl just parsing files.   That's why the precomp prelude is a win: because parsing costs

[22:16] <chromatic> Just for me.

[22:16] <obra> chromatic: that sounds like very much up patrick's alley

[22:16] <Juerd> It's feather's greatest CPU hog, fortunately only using otherwise-idle time

[22:16] <pdcawley> Given that a test cycle should go 'add a test; run all the tests to make sure it doesn't pass; make it pass; refactor, running all the tests for each refactoring; check changes into your repository (local svk or svn, doesn't matter?)

[22:17] <integral> chromatic: ssh feather.perl6.nl pugs -CPIR -e'say 2+5'

[22:17] <pdcawley> Look how often those tests get run in a single cycle; you need them to be fast, and you also need to be confident that they're going to catch any screw ups.

[22:17] * obra wonders if proposing that the theme of the .il hackathon be "testing ergonomics" would be out of line.

[22:17] <Juerd> I think we all agree that faster compilation and faster runtime would be wonderful.

[22:18] <chromatic> Definitely.

[22:18] <Juerd> I think nobody likes that it's slow, or wants it to be slow.

[22:18] <pdcawley> Has anyone run a profiler over pugs yet?

[22:18] <Juerd> However, what can be done to make things faster?

[22:18] <integral> hmm, if the Text.Parser.Rule we have does everything Pugs.Rule does, it just needs a compatability wrapper

[22:18] <Juerd> pdcawley: Those are indeed more constructive questions :)

[22:18] <integral> pdcawley: "make profiled" used to work.   easy task: make sure it still works

[22:19] <pdcawley> integral: What level does the profiling work at? C? Haskell?

[22:19] <integral> pdcawley: haskell

[22:19] <pdcawley> Oh thank ghod.

[22:19] <integral> there's a big chapter in the GHC manual.   It's all about cost centres and complicated stuff :-/

[22:19] <integral> and in the case of CAFs the results are sometimes not entirely useful :-/

[22:19] <pdcawley> CAF?

[22:20] <integral> "Constant Applicative Form"  --  a top level constant,  but in haskell can have a big lazy expression in it:   foo = factorial 50000

[22:20] <integral> so it's more complicated to cope with than a C top level variable for example

[22:22] <pdcawley> Where factorial 50000 doesn't actually get computed until you need a value for foo?

[22:22] <integral> right.

[22:22] <pdcawley> So the question becomes, where does the profiler lay the blame for that computation...

[22:22] <integral> except maybe not,  the compiler could compute it at compile time if it's brave (hence making compiles take ages)

[22:22] <integral> pdcawley: right :)

[22:23] <pdcawley> So, we have a language which is very fast to program in, but very hard to profile in a meaningful way...

[22:23] <integral> oh, no it's actually really easy to instrument GHC's virtual machine model

[22:23] <pdcawley> Where 'very fast to program in' applies to people who know the language of course...

[22:23] <integral> it's just very hard to convert it into something that helps a poor human

[22:24] <Odin-> That goes for any language.

[22:24] <pdcawley> integral: We seem to have different working concepts for 'in a meaningful way'.

[22:25] <integral> sort of :)

[22:26] <pdcawley> In this context, I'd argue that 'meaningful profiling information' is the sort that helps a poor human.

[22:27] <integral> it's just that sometimes in pure functional code, the profile info is very useful

[22:27] <pdcawley> Odin-: What in particular goes for any language?

[22:27] <integral> it's just that pugs isn't written in that style in lots of parts

[22:27] <integral> imho, it's not so much writing a language that's important,  it's reading it

[22:27] <pdcawley> It's written in a style where the profiling information is meaningful?

[22:27] <integral> no :-(

[22:27] <pdcawley> integral: You said a mouthful.

[22:28] <Odin-> pdcawley: That it can be fast to program in only for those who know it. It's distressing, how often people confuse ease-of-learning with ease-of-programming, IMO...

[22:28] <pdcawley> Oh. Bollocks.

[22:28] <pdcawley> (re the 'no' answer)

[22:28] <Juerd> Could we get TPF to give out bounties for every 10% of optimization? :)

[22:28] <integral> well it might be, I maybe didn't study the GHC manual closely enough to grok it

[22:28] <pdcawley> Well, it would be an interesting grant application.

[22:29] <Juerd> A bounty is the opposite of a grant.

[22:29] <pdcawley> Yeah, but earmarking the funds would probably count as a grant application.

[22:29] <Juerd> It has, to recycle a term from earlier discussion, a lower entry level.

[22:29] <integral> hmm, I wonder how small grants can be

[22:29] <pdcawley> TPF only has so much money to go around after all.

[22:29] <Juerd> integral: As small as you'd like.

[22:30] <pdcawley> I don't think we've had a request we've considered to be too small yet...

[22:30] <Juerd> integral: I'm quite sure that if you request $10 for a simple task, you have a great chance to get it :)

[22:30] <Juerd> If it is meaningful.

[22:30] <pdcawley> Depends on the admin costs associated with getting the funds lined up.

[22:30] <chromatic> A bounty could ease the "cost" of getting involved.

[22:31] <Juerd> Re bounties, perhaps 1 $/% is a nice key.

[22:31] <Odin-> chromatic: Not really, but it would change the price, by subsidising some of the cost. :>

[22:31] <pdcawley> Hmm... I must go and do handyman things. Enjoy yourselves.

[22:31] <Juerd> And the first to optimize would get the greatest bounty :)

[22:31] <chromatic> Well money is a different motivator from interest.

[22:32] <Juerd> chromatic: Yes, but within the domain of interest, money can help for prioritizing.

[22:32] <chromatic> Precisely.

[22:33] <Juerd> Argh, my hands hurt so bad... afk

[22:39] *** r0nny joined
[22:40] <stevan> chromatic: for the record,.. I dont feel persecuted, I get frustrated sometimes when I see the lack of cohesion between all the Perl 6 efforts, but it is a large project, it will happen 

[22:41] <chromatic> stevan, I probably read this morning's session out of the context in which you intended.

[22:42] *** ilogger2 joined
[22:42] <stevan> chromatic: I was bitching a bit, so you might not have

[22:42] <chromatic> There are bits that definitely frustrate all of us.

[22:43] <stevan> and probably I came across more serious at times then I was

[22:43] <chromatic> Hey, I know you think I'm dang cool.

[22:43] <chromatic> No worries.  Definitely mutual.

[22:43] <stevan> :)

[22:44] <stevan> in the end we all want the same goal,.. and worldwide distributed development is just not an easy thing to manage

[22:44] <chromatic> Neither is writing a compiler.

[22:44] <stevan> :)

[22:44] <stevan> true dat

[22:44] <stevan> and combine the two and you have .....

[22:45] <chromatic> -O3fun

[22:45] <chromatic> Can be fun, can be unstable.

[22:45] <stevan> anyway,.. i will talk to Yuval and try to clarify our list of "missing bits"

[22:45] <chromatic> I think Jesse is going to do the same.

[22:45] <stevan> good

[22:45] <Juerd> Using realnames in IRC is weird :)

[22:46] <chromatic> C'mon, "Jesse" is obviously a made-up name.  He lives in BOSTON, for goodness' sake.

[22:46] <Juerd> chromatic: It's funnier even that *you* use a realname of someone who's here by another name :)

[22:46] <Juerd> Every name was once made up.

[22:46] <chromatic> Precisely.

[22:47] <Juerd> I didn't think of Juerd myself. I did choose it myself.

[22:47] * stevan thinks chromatic needs some umlauts so he can be as cool as Ingy dot Net

[22:47] <Juerd> Which me like it more than my real name.

[22:47] <integral> "Ingy döt Net"

[22:47] <stevan> yes, thanks integral :)

[22:48] <stevan> chrömatic

[22:48] <mauke> hah, the secret's out; chromatic's real name is "gaim"

[22:48] <chromatic> i umlaut

[22:48] <integral> ïntēgräl

[22:48] <stevan> take an a one too,.. I mean why not

[22:48] <chromatic> That's just too many dots.

[22:49] <mauke> ∫

[22:49] * stevan officially changes his name to λ

[22:49] <integral> unicode missed out camels :-(

[22:49] <Juerd> Oh, fuck. Just remembered I have to find an ethernet hub.

[22:50] <Juerd> The problem is that it has to be hub, not switch :(

[22:50] <Juerd> I have a dozen switches here.

[22:53] *** xinming joined
[22:54] <webmind> Juerd, what do you need a hub for ?

[22:56] *** larsen joined
[22:56] <Juerd> webmind: Sniffing.

[23:04] <chromatic> Alright, before I devote my attention fully to $job again, does anyone need anything from me?

[23:06] <Juerd> chromatic: Well, if you could spare a few tuits...

[23:06] <chromatic> I have a stack of little wooden one.

[23:06] <Juerd> My supply of round ones is running out.

[23:06] <chromatic> ones

[23:09] <stevan> chromatic: thanks

[23:10] *** binary42 joined
[23:10] <chromatic> You too, stevan.

[23:11] <chromatic> For what it's worth, I'm glad you're looking in to metamodels, OO systems, and introspection.

[23:12] <stevan> chromatic: well, if my $client would let me use CLOS then ...  ;)

[23:13] * stevan gives chromatic a big hug and wanders off to eat dinner with the family &

[23:13] <chromatic> Now *there*'s an implementation problem that's gone on for 25+ years.

[23:13] <stevan> :)

[23:13] <stevan> so true

[23:13] * obra points at itasoftware

[23:13] <obra> Wanna write lisp for production apps? Go work for ITA.

[23:13] <stevan> although Franz Allegro8.0 looks really really promising

[23:16] <stevan> yuk, travel sites :P

[23:16] * stevan really goes now &

[23:22] *** pdcawley joined
[23:22] *** j0sephi joined
[23:33] *** avar joined
[23:36] *** binary42 joined
[23:39] *** j0sephi joined
[23:55] *** Cryptic_K joined
