[00:00] *** bcorn_ joined
[00:05] *** fnave left
[00:12] *** peteso joined
[00:15] *** weinig_ joined
[00:29] <audreyt> ?eval 10

[00:29] <evalbot_r13339> 10

[00:29] <obra> "oh good"

[00:30] <TimToady> morning audreyt

[00:30] <audreyt> ?eval while int(rand*10) -> $x { say $x }

[00:30] <evalbot_r13339> 0

[00:30] <audreyt> ?eval while int(rand(5)) -> $x { say $x }

[00:31] <evalbot_r13339> OUTPUT[4 ] 0

[00:31] <audreyt> hi TimToady

[00:31] <TimToady> we need to undo prefix:<*> at some point...

[00:32] <TimToady> rand*10 should have given a "two terms in a row" error.

[00:34] <TimToady> pity that won't help for rand+10

[00:35] <audreyt> ok, removng it now

[00:35] * audreyt smokes to see how seriously that breaks

[00:38] <TimToady> grepping for \*[$@%] only gets 2324 hits

[00:38] <TimToady> mostly sigs, I expect

[00:42] *** markstos joined
[00:45] *** mjk joined
[00:47] <TimToady> weird, splat.t has things like "my $b = *@a;"

[00:51] <TimToady> ./src/PIL/misc/prelude/Array.pm is full of splats

[00:58] *** gary_ joined
[00:58] <TimToady> heh, found some in the specs too...

[01:00] <TimToady> bunch 'o stuff in ext/ isn't gonna parse...

[01:00] <audreyt> ...but I committed anyway.

[01:01] <audreyt> gone for $job (on a saturday? sigh)

[01:01] <audreyt> be back in ~6hr

[01:01] <TimToady> I'll whack on the *'s when I get a chance.

[01:01] <svnbot6> r13340 | audreyt++ | * "*" is now strictly a Term, never a prefix operator.

[01:02] <audreyt> yay!

[01:02] <TimToady> lot's of superstitious *@foo passed to a slurpy *@bar

[01:02] <TimToady> *lots

[01:02] <TimToady> down to about 200 hits now

[01:08] <svnbot6> r13341 | audreyt++ | * smartlink the smartlinkable S04 for repeat.t.

[01:11] *** mako132_ joined
[01:38] *** Aankhen`` joined
[01:50] <svnbot6> r13342 | lwall++ | A lot of WAGs on what was intended by unary * in various places.

[01:58] *** buetow joined
[02:01] *** frederico joined
[02:06] <svnbot6> r13343 | fglock++ | v6 (pX) added more classes

[02:09] *** mako132_ joined
[02:16] *** ludan joined
[02:22] *** weinig_ is now known as weinig

[02:26] *** buetow joined
[03:39] *** xdg joined
[03:39] *** xinming_ joined
[03:58] <jdv79> is Perl6::Bible still authoritative?

[03:58] <jdv79> seems to be getting a little old

[03:59] *** what3 joined
[04:04] *** SubStack joined
[04:06] *** peteso joined
[04:07] <peteso> by any chance could someone give me a quick bit of X assistance? (or is there a better channel to go to?)

[04:07] <TimToady> Perl6::Bible never was authoritative in that sense...

[04:07] <TimToady> X as in windows?

[04:07] <peteso> X Windows, yes

[04:08] <TimToady> well, I use X but I wouldn't really count myself an eXpert

[04:08] <peteso> I know this isn't the right channel, but I've also found people to be very helpful here

[04:09] <TimToady> we're very glad to share advice whether we know anything or not.  :)

[04:09] <Eidolos> I've checked some channels (#x, ##x, #x11, ##x11) and found none.. ask away! :)

[04:09] <peteso> I kill'd a full screen X app (VMware Player) but it didnt go back to the desktop

[04:09] <peteso> the machine isn't crashed, I'm logged into a shell from another computer

[04:09] <TimToady> is the X process still running?

[04:09] <peteso> but I'm just not sure how to get the last frozen image off

[04:10] <peteso> yes, everything *else* is still running

[04:10] <TimToady> if X isn't running, restarting X would fix it.

[04:10] *** lambdabot joined
[04:10] <Eidolos> So.. kill X?

[04:10] <peteso> would restarting X throw away all the things I had open in the background?

[04:10] <TimToady> might already be dead or hung.

[04:10] <TimToady> yes, but they might already be hosed.

[04:10] <peteso> (I just recently switched to a linux desktop s)

[04:11] <peteso> hmm

[04:11] <peteso> the process status is still running..

[04:12] <TimToady> what kind of linux are you on?

[04:12] <peteso> Ubuntu Dapper

[04:12] <lambdabot> eh?

[04:12] <TimToady> dunno whose X Ubuntu uses...

[04:12] <lambdabot> go on

[04:12] <Eidolos> Do you have anything that really needs saving? Because if not you should probably restart (and avoid letting programs use fullscreen until you find a fix)

[04:12] <lambdabot> uhh, how can i be a program??

[04:14] <Eidolos> I'm no expert on this stuff.. but it looks like Dapper (which I am also using) uses Xorg.

[04:14] <TimToady> have you tried switching virtual screens with Ctrl/Alt+numbers?

[04:15] <peteso> I just HUP'd the X-session-manager, and that fixed it and closed whatever was open

[04:15] <TimToady> I mean ctrl/alt/function

[04:15] <peteso> t

[04:15] <TimToady> sometimes switching to a different virtual terminal and back can clear it too, is all...

[04:15] <peteso> thank you very much none the less for the assistance, and I'm sorry for otherwise interrupting key perl developments :)

[04:16] <TimToady> yeah, if the session manager was the problem, that could fix it.

[04:16] <TimToady> heh, it's, like, Friday night...

[04:17] <peteso> :)

[04:18] *** b00t joined
[04:21] *** Aankh|Clone joined
[04:26] <TreyHarris> TimToady: how are you feeling philosophically towards the -X fileops?

[04:27] <TreyHarris> not looking for The Answer, just wondering how you're thinking about them

[04:33] <TimToady> I like the fact that they're visually distinctive.

[04:34] <TimToady> as far as I'm concerned they're no weirder than a lot of other operators.

[04:35] <TreyHarris> i agree... coming from the sysadmin perspective, i think the fileops are one of the draws of perl for them

[04:37] <TreyHarris> though i do 'perldoc -f -X' even after 15 years

[04:37] <TreyHarris> so i'll probably use .mtime, etc. assuming it's easily available

[04:40] <TimToady> biab &

[04:47] <peteso> quit

[04:47] <peteso> whoops..

[04:49] *** pdcawley joined
[05:01] *** zgh joined
[05:15] *** BooK_ joined
[05:19] <svnbot6> r13344 | putter++ | Added a failing rx test.  Given rule r { <null> | x <r> }, "x" ~~ /<r>$/  should match "x", not "".

[05:20] <svnbot6> r13345 | putter++ | Added a failing kwid test.  An empty kwid, "=kwid\n=cut\n", eats subsequent code.

[05:23] *** weinig is now known as weinig|zZz

[05:24] *** agentzh joined
[05:29] <svnbot6> r13346 | agentz++ | [t/README]

[05:29] <svnbot6> r13346 | agentz++ | - fixed a grammar error

[05:31] <audreyt> @putter the rx test worksforme

[05:31] <lambdabot> Unknown command, try @list

[05:31] <audreyt> @tell putter the rx test worksforme

[05:31] <lambdabot> Consider it noted.

[05:32] <audreyt> @tell putter but I was using PCR :) 'bout time to check in the s/PGE/PCR/ overhaul I guess...

[05:32] <lambdabot> Consider it noted.

[05:34] *** putter joined
[05:34] <putter> hey audreyt

[05:34] <lambdabot> putter: You have 2 new messages. '/msg lambdabot @messages' to read them.

[05:34] <svnbot6> r13347 | putter++ | Added additional failing rx case.  Given rule r2 { <null> | <r2> x }, "x" ~~ /<r2>$/ should match "x", not "".

[05:34] * putter goes to see what PCR is...

[05:35] <TimToady> polymerase chain reaction

[05:35] <putter> :)

[05:36] <audreyt> Pugs::Compiler::Rule.

[05:36] <audreyt> your r2 test also worksforme.

[05:37] <audreyt> I'm committing both as PCR tests now. sec.

[05:38] <putter> using parrot 0.4.6...

[05:38] <putter> (ie, latest release, but not head)

[05:38] <audreyt> it might well be a PGE-land bug...

[05:39] <putter> PCR is p5, yes?  can one use it from pugs??

[05:39] <audreyt> yes and yes.

[05:39] <audreyt> (it's the motivation of embedp5 by default)

[05:39] <putter> oooooh

[05:39] <audreyt> even without embedp5, we can use the bridge.

[05:39] <putter> :)

[05:39] <audreyt> I'm working on the bridge now; give me an hour or two :)

[05:40] <putter> 1:30 am for me.  end of day.  no prob

[05:40] <audreyt> it also gives us variable lookup and binding and mutual calls and other good thing :)

[05:40] <audreyt> 'kay. sleep well!

[05:40] <svnbot6> r13348 | agentz++ | [t/blocks/param_signature.t]

[05:40] <putter> woot

[05:40] <svnbot6> r13348 | agentz++ | - fixed one invalid smartlink. (please use smartlinks.pl

[05:40] <svnbot6> r13348 | agentz++ |   --check to verify your links. :))

[05:41] <audreyt> putter: btw, have you seen my msg that inv tyinfer bug has been solved long ago

[05:41] <audreyt> and the "my C $x" within a sub bug is also fixed?

[05:42] <putter> My thought was to transcribe some bison examples to p6 rules, see what broke, generate some tests and an example.  But a working example would be just fine too, I'm most flexible in that regard. ;)

[05:43] <putter> re typeinf, yes!  very neat.  am looking for some pile of oo code with tests to throw against it.

[05:43] <audreyt> also roles are now really mixins.

[05:44] <audreyt> but not introspectable. that will come from nothingmuch's MO direction.

[05:44] <putter> first thought was to take a mumble2scm or mumble2cl and rip the back out, generating p6, and use the mumble test suite.

[05:44] <audreyt> mmm re2c seems obvious.

[05:44] * putter googles for re2c...

[05:44] <audreyt> very good stuff.

[05:45] <audreyt> (was re your "transcribe some bison")

[05:45] <audreyt> not re the scm/cl

[05:46] <putter> ah, neat.  though my thought regards typeinf working, was to find some way to through diverse oo code at it.  eg, by transliterating from some other language.  Ideally with an existing transliterator which just needed to be tweaked.  Thus the search for mumble2scm.  Unfortunately,

[05:46] <svnbot6> r13349 | agentz++ | [util/smartlinks.pl]

[05:46] <svnbot6> r13349 | agentz++ | - we no longer require Pod::Simple::HTML when --check is

[05:46] <svnbot6> r13349 | agentz++ |   specified since we don't generate HTML while checking.

[05:46] <svnbot6> r13349 | agentz++ |   (Thanks zeriod++ for reminding me)

[05:46] <svnbot6> r13349 | agentz++ | - clarified in the Pod that extra text after the

[05:46] <svnbot6> r13349 | agentz++ |   smartlink in the same line is NOT valid.

[05:47] <putter> I didn't find a plausible candidate.  Ie, a transliterator with relatively simple codegen, and a test suite for the mumble.

[05:48] <putter> So, I wondered if p6 itself was up to doing a translit exercise.  Thought I'd start with some trivial stuff, and see how far I got.

[05:48] <svnbot6> r13350 | agentz++ | [t/blocks/param_signature.t]

[05:48] <svnbot6> r13350 | agentz++ | - english fixes

[05:48] <audreyt> that seems viable

[05:48] <audreyt> btw, are you still building with embperl5 off?

[05:50] <nothingmuch> clkao: ping?

[05:50] <putter> re viable, it's a yak or two down the stack, but a yak which I'm happy to haircut for itself.  I still don't have a plausible short term plan to generate a large (>hand) volume of p6 oo code to exercise things.

[05:50] <nothingmuch> hmm... why bother, he won't be up

[05:50] <nothingmuch> morning...

[05:50] <nothingmuch> hiking &

[05:51] <TimToady> audreyt: ideas on how soon @.foo() syntax will be supported?

[05:52] <putter> re embperl5, off, sign, no.  no.  I was so tempted after calling it a night to go back online and say "btw, of course I have embed working.  but since I was here, I wanted to make nonembed work too, and make sure the now default embed _just worked_, without extra user action".  But I didn't.  And now "putter and nonembed" is a "thing".  sigh. ;)

[05:52] <audreyt> TimToady: should be the same time as the MI/MO swapin

[05:52] <putter> s/sign/sigh/

[05:52] <TimToady> k

[05:52] <svnbot6> r13351 | agentz++ | [util/smartlinks.pl]

[05:52] <svnbot6> r13351 | agentz++ | - minor english fixes

[05:52] <audreyt> putter: oh ok. yay :)

[05:53] <agentzh> lol

[05:59] * putter daydreams... "hmm... if rules were actually working, and oo too... one way to get lots of p6 oo code would be to dust off the js-on-p6 transliterator...".  Oh, that would be so very nice.  Ah well, bison rcalc first.  Then we'll see.

[06:03] <audreyt> sleep first, would be my recommendation

[06:03] <putter> Or not.  No dynamic mop stuff yet pugs-side.  JS runtime and static code could still run.  Eh.  rcalc.  then calc.  err, rpcalc rather.  then calc.  then...

[06:03] <putter> http://www.gnu.org/software/bison/manual/html_mono/bison.html.gz#RPN-Calc

[06:03] <lambdabot> http://tinyurl.com/ppft9

[06:03] <putter> a most fine recommendation it is.

[06:03] <putter> good night all &

[06:16] <ingy> hola

[06:16] <ingy> seen nothingmuch

[06:16] <jabbot> ingy: nothingmuch was seen 25 minutes 40 seconds ago

[06:23] <svnbot6> r13352 | gaal++ | * signature.t - more tests. excplicit defaults are parsed but

[06:23] <svnbot6> r13352 | gaal++ |   not yet printed.

[06:32] <svnbot6> r13353 | gaal++ | * Pugs.Parser: parse cody constraints on params, even if they're

[06:32] <svnbot6> r13353 | gaal++ |   ignored for now:

[06:32] <svnbot6> r13353 | gaal++ |     :(Int $x where { $x % 2 })

[06:32] <svnbot6> r13353 | gaal++ | * Pugs.Val.Code: very minor cleanups

[06:40] <agentzh> hmm...haskell may be the most beautiful language in the world...

[06:40] <wolverian> no, that's lisp

[06:41] <agentzh> lisp is ugly in my opinion.

[06:42] <agentzh> too many parens in that language.

[06:43] <wolverian> sort of platonic..

[06:44] <agentzh> heh

[06:50] <TreyHarris> so for those of you who work in code containing cjk characters often: do you use two-column wide glyphs as compared to ascii chars, or do you have space between ascii chars?

[06:54] *** b00t joined
[06:55] *** lambdabot joined
[06:58] <agentzh> TreyHarris: space between ascii chars?

[06:58] <agentzh> "a b c" ?

[06:58] <agentzh> "w o r d"?

[06:59] <agentzh> ah, there're "wide english letters" in chinese, which we call "full corner" or something like that.

[07:01] <agentzh> and i don't think there's any whitespace between adjacent letters though it may have similar visual appearance.

[07:01] <TreyHarris> i meant visual space

[07:02] <agentzh> probably, and i've been avoiding to use that kind of things, since they're confusing.

[07:02] <TreyHarris> if you have "foo" starting at col 0 on line 1, and three han glyphs in a row starting at col 0 on line 2, will line 2 be wider?

[07:02] <TreyHarris> visually wider i mean

[07:03] <agentzh> hmm

[07:03] <agentzh> 3 glyphs?

[07:03] <agentzh> line 2 may be wider or may not.

[07:04] <agentzh> that depends on whether "foo" is "half corner" or "full corner".

[07:05] <agentzh> if "foo" is in "half corner" (i.e. in ascii charset), then line 2 is approximately 2 times wider.

[07:05] <TreyHarris> right, i was asking about what is typical for coders who have to deal with a lot of such code that mixes

[07:06] <TreyHarris> is half corner, or full corner, typical for people coding?

[07:07] <agentzh> Treyharris: they can be mixed.

[07:07] <agentzh> we have both in our chinese input method.

[07:07] <agentzh> so it's very easy to confuse these two.

[07:08] <agentzh> and it's quite common to see different version of "A" in a single chinese article.

[07:08] <agentzh> *versions

[07:08] <agentzh> for me, i usually convert full-corner latin letters to their ascii equivalences before processing the text (via perl).

[07:09] <agentzh> i really really hate full-corner latin letters.

[07:09] <agentzh> they're not ascii but wide chars.

[07:09] <TreyHarris> i see

[07:13] <TreyHarris> agentzh: so will the arrows in t/xx-uncategorized/unicode.t line up on everyone's terminal?

[07:14] <agentzh> oh, sorry for the poor terminology, "full corner" is actually "SBC case" while "half corner" is "DBC case"

[07:14] <agentzh> i translated them directly from chinese. :)

[07:14] <TreyHarris> no problem :-)

[07:16] <agentzh> that unicode.t file doesn't display in my editor.

[07:16] <TreyHarris> !

[07:16] <agentzh> it said that the encoding is incorrect.

[07:16] <TreyHarris> that seems to be bad news

[07:16] <agentzh> have you saved that in UTF-8?

[07:17] <agentzh> it will be fine if it's in UTF-8.

[07:19] <zgh> aw my perl6 webserver stopped working...

[07:19] <zgh> segfault..

[07:19] *** pdcawley joined
[07:20] <agentzh> zgh: where is your webserver?

[07:20] <zgh> n/m there it goes ^_^

[07:21] <zgh> nowhere I'm just messing around with HTTP::Server::Simple

[07:21] <zgh> localluy

[07:21] <agentzh> ah

[07:21] <zgh> i just updated pugs, but it wasn't the fault of the update

[07:21] <zgh> it was from my trying to get it working with v6 ^_

[07:22] <agentzh> v6.pm?

[07:22] <zgh> yeah

[07:22] <agentzh> gotcha

[07:22] <zgh> i have a sample program, just seeing how far i can push it

[07:22] <agentzh> zgh, or maybe push Pugs::Compiler::Perl6 directly?

[07:23] <svnbot6> r13354 | trey++ | [t/xx-uncategorized/unicode.t]

[07:23] <agentzh> that will be more enjoyable. :)

[07:23] <svnbot6> r13354 | trey++ | Amusingly enough, this test was not set to

[07:23] <svnbot6> r13354 | trey++ | be in UTF-8.  agentzh++ for catch

[07:23] <zgh> agentzh: I'm working my way up to it ^_^

[07:24] <agentzh> zgh++

[07:25] *** ter310 joined
[07:27] <agentzh> TreyHarris: my editor still reject unicode.t. :(

[07:28] <zgh> seems to work for me in vim...

[07:29] <zgh> I see hebrew and cyrillic...

[07:29] <zgh> ooh and chinese

[07:29] <agentzh> TreyHarris: my svn diff shows that your r13354 has no modification at all.

[07:29] <agentzh> i see this: 􏿽xE5􏿽x96?

[07:29] <agentzh> and 𨮁

[07:30] <TreyHarris> *shrug* i can never see non-ascii characters in IRC

[07:30] <TreyHarris> even when people say they can see each others'

[07:30] <agentzh> hehe

[07:31] <agentzh> TreyHarris: have you set the svn MIME type?

[07:31] <TreyHarris> agentzh: yes, that's all i did

[07:31] <TreyHarris> ahh, but i made a typo

[07:31] <agentzh> weird.

[07:31] <TreyHarris> try now :-)

[07:32] <TreyHarris> i did "UTF=8" :-)

[07:32] <svnbot6> r13355 | trey++ | Another try at fixing unicode.t'

[07:32] <agentzh> hmm "Content-Type: text/plain; charset=UTF-8"

[07:32] <agentzh> yes, it is correct, i think.

[07:35] <agentzh> the file seems to contain some invalid UTF character. not sure...

[07:36] *** DHGE joined
[07:36] <agentzh> i'll try to fix that.

[07:41] <agentzh> oh, the han char "\x28B81" can't display in my firefox, ie, and editplus...

[07:41] *** pdcawley joined
[07:41] <agentzh> so it may be the lack of proper font?

[07:41] <agentzh> anyway, i think i can do nothing with it. :)

[07:42] <zgh> it all seems to work in vim on linux... over a terminal

[07:42] <zgh> didi't even realize I was using a unicode font.

[07:43] <agentzh> heh

[07:43] * agentzh imagines what that weird char may look like.

[07:44] <agentzh> http://www.fileformat.info/info/unicode/char/28B81/index.htm

[07:44] <lambdabot> Title: Unicode Han Character 'U+28B81' (U+28B81), http://tinyurl.com/ffwho

[07:47] <zgh> hm that's funny

[07:47] <zgh> it seems to display correctly near the bottom of the page, but not anywhere else

[07:47] <wolverian> Server.HtmlEncode()  讁 is that it?

[07:47] <wolverian> right.

[07:47] <zgh> right that's the one

[07:47] <zgh> and the next line too

[07:47] <zgh> but that's it

[07:48] <wolverian> yup.

[07:48] <wolverian> weird.

[07:48] <agentzh> ohhhh

[07:48] <agentzh> ancient chinese char...

[07:49] <agentzh> i'm just wondering what that glyph means. :)

[07:49] <zgh> its quite copmlicated-looking

[07:49] <agentzh> indeed

[07:49] *** iblechbot joined
[07:50] <TreyHarris> i don't have a monospaced font that displays it

[07:50] <TreyHarris> and proportional fonts are useless for code i think

[07:50] <zgh> TreyHarris: what platform?

[07:50] <agentzh> oh, that glyph means blame or censure in the ancient china. :)

[07:50] <TreyHarris> zgh: mac os x

[07:50] <zgh> TreyHarris: the "monospace" font on my ubuntu box does the trick

[07:50] <zgh> TreyHarris: my mac is in the shop ^_^

[07:51] <wolverian> zgh, note that it is not probably that font where the glyph comes from.

[07:51] <wolverian> freetype just falls back on another font that has it.

[07:51] <zgh> wolverian: thanks I didn't know that

[07:51] <zgh> wolverian: that would make much more sense ^_^

[07:51] <wolverian> you can check which font it comes from with the character map app

[07:52] <zgh> well if freetype is getting it right I don't feel I should sweat the details, heh

[07:52] <zgh> i can't read chinese anyway

[07:53] <zgh> cool to know how it does that though

[07:53] *** what3 joined
[07:56] <agentzh> 􏿽xD7y fails the test on pugs.

[07:56] *** larsen_ joined
[07:56] <wolverian> that was a ? here

[07:57] <agentzh> sigh...

[07:58] <agentzh> i don't know how to fix the encoding in my mIRC.

[08:02] *** zgh joined
[08:03] <TreyHarris> i'm flummoxed.  i've set my terminal app, my font, screen, and my irc client to all use utf8 as their encodings

[08:04] <TreyHarris> but i still can't see whatever character wolverian sent 15 minutes ago

[08:04] <wolverian> TreyHarris, it is possible you simply do not have the glyph in your fonts

[08:04] <wolverian> or your terminal app is not falling properly back onto a font that does have it.

[08:05] <wolverian> (or rather, your font library)

[08:05] <TreyHarris> can you paste the character above it?  i can definitely see it.  the \x5583 one

[08:07] *** larsen_ is now known as larsen

[08:07] <TreyHarris> ?eval say "\x5583"

[08:08] <evalbot_r13355> OUTPUT[喃 ] Bool::True

[08:08] <wolverian> 喃

[08:08] <TreyHarris> yeah.  i see "?VC", with the VC in inverse type, whether it's you or evalbot

[08:08] <agentzh> it displays perfectly here.

[08:08] <wolverian> you did restart your client and screen, etc after setting up utf8?

[08:09] <agentzh> wolverian: can you see "􏿽xE0􏿽xAB" now?

[08:09] <wolverian> no.

[08:09] <wolverian> ? again

[08:10] <agentzh> :(

[08:10] *** zgh joined
[08:10] <agentzh> i can read but can't write...

[08:10] <TreyHarris> i restarted screen.

[08:11] <wolverian> TreyHarris, that should definitely do it. and screen reports it is in utf8-mode?

[08:11] <wolverian> (ctrl+a,i)

[08:11] <TreyHarris> yep

[08:11] <TreyHarris> oh, LANG is C

[08:11] <TreyHarris> that might be my problem?

[08:11] <wolverian> that might affect your IRC client, but if screen says it is in utf8 mode, the locale doesn't matter

[08:12] <wolverian> (but it is best to just set the locale to a UTF8 one before launching screen and it Just Works (tm))

[08:12] <TreyHarris> well, i guess it can't hurt to try

[08:12] <wolverian> there's also the irssi setting "term_charset" which should be set to utf8

[08:12] <wolverian> which happens automatically if your locale is UTF8, I think

[08:15] <TreyHarris> hmmm.... it very briefly throws up a message about an unsupported charset

[08:15] <TreyHarris> but it goes away too quickly for me to read it

[08:15] <TreyHarris> i've just caught those two words

[08:16] <svnbot6> r13356 | audreyt++ | * Pugs::Compiler::Rule: We no longer require Data::Dumper::Streamer.

[08:16] <svnbot6> r13356 | audreyt++ | * Also avoid loading PadWalker until runtime when it was absolutely neccessary.

[08:17] <wolverian> TreyHarris, what locale is it, and do you really have it on your computer?

[08:17] *** kanru joined
[08:19] *** Trey2 joined
[08:20] <Trey2> ?eval say "\x5583"

[08:20] <evalbot_r13356> OUTPUT[喃 ] Bool::True

[08:20] <Trey2> hm

[08:20] <Trey2> i got ?? there.  which is arguably better

[08:20] <TreyHarris> wolverian: i set it to en_US.UTF-8

[08:21] <wolverian> TreyHarris, and that locale exists on your computer?

[08:21] <Trey2> i don't know.  how does one list locales on linux?

[08:22] <wolverian> locale -a

[08:22] <Trey2> ah... my choices are C, POSIX, en_US, and en_US.iso88591

[08:23] <wolverian> what distribution are you running?

[08:23] <Trey2> um, let me see... it's a shell server...

[08:24] <Trey2> debian on sparc64

[08:25] <wolverian> I think you want to run 'sudo dpkg-reconfigure locales', then

[08:26] <Trey2> ah.  i don't have sudo :-(

[08:26] <Trey2> i guess i'll open a trouble ticket

[08:26] <wolverian> well, run it as root some other method

[08:26] <wolverian> ah, you don't have root. okay

[08:29] <TreyHarris> that's my only way to make it work?

[08:30] <wolverian> I don't know if you can install locales, er, locally.

[08:39] <TreyHarris> wolverian: thanks, it'll probably be much easier to get the sysadmin to fix it since I know exactly what to ask for :-)

[08:39] <svnbot6> r13357 | audreyt++ | * Pugs::Runtime::Match - add a dump_hs method that yields Parrot/PGE::Hs

[08:39] <svnbot6> r13357 | audreyt++ |   compatible output for Pugs consumption.  Next step is a command-line bridge...

[08:39] <wolverian> TreyHarris, yup.

[08:39] <wolverian> TreyHarris, delegate, delegate, delegate.

[08:43] <TreyHarris> audreyt: i was about to add some cross-operator tests.  i assume i should :todo<feature> them all?

[08:43] <audreyt> yes, please do that

[08:43] <TreyHarris> ok :)

[08:44] * audreyt is still neck deep in PCR integration

[08:54] <agentzh> audreyt++

[08:54] *** pdcawley joined
[08:54] <agentzh> so after the PCR integration work is done, i won't need parrot.exe any more? :)

[09:04] <agentzh> supper time &

[09:04] *** agentzh left
[09:06] <audreyt> agentzh: yeah, the plan is to remove parrot dep entirely for this release

[09:06] <svnbot6> r13358 | audreyt++ | * Pugs::Runtime::Match::HsBridge - PGE::Hs-compatible bridge for integration

[09:06] <svnbot6> r13358 | audreyt++ |   for the Haskell runtime, in both embedding and external mode.

[09:12] <gaal> audreyt: I don't understand something about Types.Type casting.

[09:12] <gaal> I want to do:

[09:12] <gaal> map (text . cast) $ p_types p

[09:12] <gaal> but I'm getting errors like:

[09:12] <gaal> No instance for ((:<:) Types.Type Char)

[09:12] <gaal> as if somebody's trying to delist this?

[09:13] <gaal> Pugs.Val.Code around line 170

[09:14] <audreyt> well there's no cast to String either

[09:14] <gaal> okay, but cast . cast doesn't work

[09:14] <audreyt> delist is because GHC tried desperately to generate [Char] from Char

[09:14] <audreyt> the right solution is showtype

[09:14] <audreyt> map (text . ShowType)

[09:14] <audreyt> map (text . showType) -- err, this

[09:14] <gaal> oh! cool.

[09:15] <gaal> thanks :)

[09:15] <audreyt> np :)

[09:16] <gaal> next question is how we're going to print things like default values. do we need to be in Eval for this?

[09:17] <gaal> ?eval :($x = 42)

[09:17] <evalbot_r13358> CCall "perl" CaptMeth {c_invocant = VPure (SigSubSingle {s_requiredPositionalCount = 0, s_requiredNames = {}, s_positionalList = [MkParam {p_variable = "$x", p_types = [], p_constraints = [], p_unpacking = Nothing, p_default = <ParamDefault:Just<Exp>>, p_label = "x", p_slots = {}, p_hasAccess = AccessRO, p_isRef = False, p_isContext = False, p_isLazy = False}], s_namedSet = {}, s_slurpyScalarList = [], s_slurpyArray = Nothing, s_slurpyHash = Nothi

[09:17] <gaal> ?eval ""~:($x = 42)

[09:17] <evalbot_r13358> ":(\$x)"

[09:17] <gaal> on my wc that prints

[09:17] <gaal> :($x = {...})

[09:18] <audreyt> well, the default is an expression

[09:18] <gaal> ... and in a few seconds, in HEAD too :)

[09:18] <audreyt> prettyprinting an expression doesn't need to be in Eval

[09:20] <gaal> ooh right, format isn't in Eval. cool!

[09:21] <svnbot6> r13359 | gaal++ | * fix printing of static types: :(Moo $x)

[09:27] <gaal> ouch looks like I'll have to export Pretty.format :(

[09:28] <gaal> s/export/boot/

[09:29] <gaal> eep which of course I can't do with 6.4, arggghh

[09:30] <gaal> bbiab&

[09:36] <svnbot6> r13360 | audreyt++ | * Finish Pugs::Runtime::Match::HsBridge's external mode to be compatible with run_pge.pir.

[09:44] <audreyt> the bridge is now enacted.

[09:44] <svnbot6> r13361 | audreyt++ | * Pugs::Eval: Use the semantically-correct way of passing in :ratchet in

[09:44] <svnbot6> r13361 | audreyt++ |   embedded rule texts:

[09:44] <svnbot6> r13361 | audreyt++ |     :ratchet(1)[...original rule text...]

[09:44] <svnbot6> r13362 | audreyt++ | * Thoroughly disable Pugs.Embed.Parrot and always use Perl5 bridge.

[09:51] *** turrepurre joined
[09:58] *** lisppaste3 joined
[10:07] *** buetow joined
[10:19] *** iblechbot joined
[10:31] *** mollmerx joined
[10:33] *** agentzh joined
[10:34] <agentzh> removing the parrot dependency will make pugs "purer", which is great. :)

[10:34] <agentzh> so 6.2.13 is gonna be a "big" release.

[10:36] <agentzh> on the other hand, the PCR integration will also push the development of PCR itself.

[10:37] <agentzh> because PCR is now much more "useful". :D

[10:37] <agentzh> or usable even.

[11:00] *** agentzh joined
[11:14] <pasteling> "agentzh" at 210.22.200.67 pasted "I can't invoke pugs from path other than the root of the pugs source tree (the Prelude problem?)" (9 lines, 420B) at http://sial.org/pbot/19722

[11:14] *** jferrero joined
[11:14] *** agentzh joined
[11:17] <audreyt> agentzh: fixing

[11:18] <agentzh> :)

[11:19] *** ludan joined
[11:21] *** Sal joined
[11:21] <agentzh> it seems that the following piece of Perl 6 code is not runnable yet. :)

[11:21] <agentzh> http://svn.berlios.de/svnroot/repos/unisimu/Java/exercises/OrdInsert/OrdInsert.pl

[11:21] <lambdabot> http://tinyurl.com/g5rmy

[11:22] <wolverian> you want at least @list is rw

[11:22] <agentzh> neither pugs nor v6.pm can produce the correct output.

[11:22] *** weinig joined
[11:22] <agentzh> wolverian: thanks! fixing now

[11:24] <agentzh> but still, it doesn't work.

[11:24] <wolverian> or: sub ord_insert (@list, $elem) { @list.reduce(-> @l, $e { $e < $elem ?? $e !! ($elem, $e) }) }

[11:24] <wolverian> (non-mutating)

[11:24] <wolverian> but this is all off-topic of course to the actual probem :)

[11:24] <wolverian> problem, rather

[11:25] <agentzh> ah, that's the functional way. :)

[11:26] <agentzh> wolverian: please look at this: http://svn.berlios.de/svnroot/repos/unisimu/Java/exercises/OrdInsert/OrdInsert.hs

[11:26] <agentzh> ;)

[11:26] <lambdabot> http://tinyurl.com/nhcjw

[11:26] <wolverian> er well besides the bugs

[11:26] <wolverian> in my code

[11:26] <wolverian> heh

[11:26] <wolverian> s/reduce/filter/ and it works (but is a bit weird from a haskellish perspective)

[11:27] <wolverian> right

[11:27] <agentzh> *nod*

[11:27] <wolverian> that's a quicksort

[11:27] *** prefiks joined
[11:27] <agentzh> no, it's not.

[11:27] <agentzh> it's an insertion sort.

[11:27] <agentzh> (if i can call it like that)

[11:28] <agentzh> qsort (x:xs) = (qsort left) ++ [x] ++ (qsort right) where (left, right) = partition (x>) xs

[11:28] <agentzh> that may be the quick sort (untested)

[11:29] <wolverian> I'm not sure how that is different

[11:29] *** DHGE left
[11:29] <agentzh> the postion of recursion is different.

[11:30] <wolverian> does that have a real difference? the foldl is the same thing as recursing

[11:31] <agentzh> quick sort partitions the list while insertion sort insert the elem one by one.

[11:31] <agentzh> *inserts

[11:31] <wolverian> oh, right

[11:31] <wolverian> it has a O difference

[11:31] <wolverian> thanks

[11:31] <agentzh> np :)

[11:34] <agentzh> audreyt: btw, thank you very much for having brought haskell into my sight. i really like it now. :)

[11:35] <audreyt> yay!

[11:35] <audreyt> it's the Power of Reason :)

[11:36] <audreyt> (have you seen the reason.jpg in my haskell tutorial?)

[11:36] <agentzh> right, the power of maths or something :D

[11:36] <agentzh> you have a haskell tutorial?

[11:36] * agentzh is amazed.

[11:36] <audreyt> http://pugscode.org/osdc/haskell.xul

[11:36] <agentzh> looking

[11:36] <audreyt> press <enter> to scroll next

[11:37] <audreyt> need firefox

[11:37] <audreyt> the last picture is "Reason"

[11:37] <agentzh> i've used your xul tech to produce my slides.

[11:38] <agentzh> so i know it *quite* well.

[11:38] <agentzh> ^__^

[11:38] <audreyt> oh good :)

[11:39] <agentzh> i see the weapon picture.

[11:39] <audreyt> it's from the SciFi novel "Snow Crash"

[11:40] <audreyt> "we'll win because we have reason on our side."

[11:40] <agentzh> ah

[11:40] <agentzh> interesting

[11:40] <audreyt> "DaoLi ZhanZai WoMen ZheBian" :)

[11:40] <agentzh> haskell is really a powerful weapon.

[11:41] <audreyt> of course, the name of that gattling gun is "Reason", i.e. "DaoLi" :)

[11:41] <agentzh> hehe, i can grok the chinese.

[11:41] <agentzh> i totally agree. :)

[11:41] <agentzh> i'm planning to use haskell to do some computer simulation work.

[11:42] <agentzh> GHC is pretty fast.

[11:42] <audreyt> as chairman Deng noted, "development is the only hard-core Reason"

[11:42] <audreyt> *nod*

[11:43] <agentzh> fa zhan shi ying dao li

[11:43] <agentzh> (it took me a while to realize what you have said.)

[11:43] <agentzh> :D

[11:44] <audreyt> :D

[11:44] <audreyt> (the version I heard was "fazhan cai shi ying daoli")

[11:44] <audreyt> hence the "only" part

[11:44] <agentzh> i was wondering if "chairman Deng" was a foreign hacker...sorry for that...

[11:45] <agentzh> right right right

[11:45] *** prefiks left
[11:45] <agentzh> LOL

[11:45] <audreyt> @index findExecutable

[11:45] <lambdabot> System.Directory, Distribution.Compat.Directory

[11:45] <agentzh> yeah

[11:46] <agentzh> audreyt++ # you seem to know everything.

[11:46] <audreyt> nah, not really :)

[11:47] <audreyt> that's what you get from spending far too much time on wikipedia...

[11:47] <agentzh> hehe

[11:47] <agentzh> ah

[11:47] <agentzh> wikipedia++

[11:48] *** weinig is now known as weinig|coffee

[11:54] *** elmex joined
[12:04] *** mauke_ joined
[12:09] <audreyt> agentzh: fixed

[12:09] <svnbot6> r13363 | audreyt++ | * util/gen_prelude.pl: inline "use" into Prelude for now.

[12:09] <agentzh> up'ing now

[12:11] <agentzh> audreyt: AS 5.8.7 build 815 still breaks pugs, maybe you should disable it completely?

[12:11] *** weinig|coffee is now known as weinig

[12:12] <pasteling> "agentzh" at 210.22.200.67 pasted "AS 5.8.7 breaks pugs build" (18 lines, 1K) at http://sial.org/pbot/19724

[12:12] <agentzh> now i'm keeping both 5.8.7 and 5.8.8.

[12:12] <agentzh> one for jifty and the other for pugs.

[12:14] <audreyt> ok, try r13364?

[12:14] <svnbot6> r13364 | audreyt++ | * some more ActivePerl 5.8.7 fix attempt

[12:15] <agentzh> okay

[12:16] *** polettix is now known as froh-doh

[12:16] *** froh-doh is now known as polettix

[12:17] * nothingmuch moos

[12:17] <agentzh> audreyt: same error. should i realclean?

[12:18] <audreyt> rerun makefile.pl would do

[12:18] <audreyt> agentzh: maybe you can help diagnosing this actually

[12:18] <audreyt> I added the flags according to this thread:

[12:18] <audreyt> http://aspn.activestate.com/ASPN/Mail/Message/perl-win32-porters/2960188

[12:18] <lambdabot> Title: ExtUtils::ParseXS and lib/CORE/Win32.h :: ASPN Mail Archive :: perl-win32-porter ..., http://tinyurl.com/korck

[12:19] <agentzh> looking now

[12:22] <nothingmuch> @seen clkao

[12:22] <lambdabot> clkao is in #perl6. I don't know when clkao last spoke.

[12:22] <nothingmuch> yesterday

[12:22] <nothingmuch> FECK DRINK ARSE! irssi is lsoooooooooooow

[12:24] *** mauke_ is now known as mauke

[12:25] <obra> nothingmuch: he's off at a cabal meeting

[12:28] <nothingmuch> @larry cabal? or are there more cabals i don't know of?

[12:28] <lambdabot> Maybe you meant: arr yarr

[12:28] <nothingmuch> @yarr

[12:28] <lambdabot> Splice the Mainbrace!

[12:28] <nothingmuch> @arr

[12:28] <lambdabot> Shiver me timbers!

[12:28] <obra> a non-perl cabal

[12:28] <nothingmuch> it's not urgent, i'm just trying to locate lost cookware =)

[12:29] <obra> what?

[12:29] * nothingmuch lost his little alu bottle, which he uses to store olive oil when camping

[12:29] <nothingmuch> since my small knife went with cl to england i suspect it met a similar fate

[12:30] <obra> hm. nod. email

[12:30] <nothingmuch> aye

[12:30] <nothingmuch> shower first

[12:30] <svnbot6> r13365 | audreyt++ | * Finish the s:g/evalPGE/evalPGR/ transition.

[12:30] <svnbot6> r13365 | audreyt++ | * Remaining open issues:

[12:30] <svnbot6> r13365 | audreyt++ |     - should there be a pragma (or something else)

[12:30] <svnbot6> r13365 | audreyt++ |       that switches back to Parrot/PGE for rules?

[12:31] <svnbot6> r13365 | audreyt++ |     - if not, should we completely remove Pugs.Embed.Parrot?

[12:37] <agentzh> audreyt: after commenting out 2 lines in my activeperl 5.8.7's win32.h, pugs now builds successfully.

[12:37] <agentzh> i'm just wondering why -D didn't take effect.

[12:38] <agentzh> as the last approach, we can patch user's win32.h. :)

[12:38] <agentzh> although that's *bad*.

[12:40] <audreyt> I'm wondering why -D didn't work either.

[12:40] <agentzh> i'm still investigating -D.

[12:40] <audreyt> can you try

[12:40] <audreyt> -DFOOBAR=1

[12:40] <audreyt> or something like that?

[12:40] <audreyt> i.e. don't rely on the implicit -D

[12:41] <audreyt> and explicitly give -D_INTPTR_T_DEFINED=DEFINED

[12:41] <agentzh> i'm already trying. :)

[12:41] <agentzh> aye

[12:41] <agentzh> k

[12:43] <agentzh> oops...same error

[12:43] <agentzh> which compiler is actually using? vc or gcc?

[12:43] <agentzh> *used

[12:43] <audreyt> gcc I think.

[12:43] <audreyt> mingw in particular

[12:44] <audreyt> but -D surely works, as we rely on it to fix the dirent bug

[12:44] <audreyt> can you change src/perl5/p5embed.h

[12:44] <audreyt> and add

[12:44] <audreyt> #define _INTPTR_T_DEFINED

[12:44] <audreyt> #define _UINTPTR_T_DEFINED

[12:45] <audreyt> before the inclusion on EXTERN?

[12:45] <agentzh> a sec

[12:45] <agentzh> adding now

[12:45] <agentzh> k

[12:47] <agentzh> yay...this time surely works. :)

[12:48] <agentzh> i'll remove the useless -D's from Makefile.PL.

[12:49] <agentzh> successfully tested...now commit

[12:50] <agentzh> both 5.8.7 and 5.8.8 work with pugs' perl 5 embedding now.

[12:50] <agentzh> not sure if earlier 5.8.x also works.

[12:51] <audreyt> pretty sure they will also

[12:51] <audreyt> hm.

[12:51] <audreyt> if so, can you test moving DIRENT into p5embed.h too?

[12:51] <agentzh> glad to hear that.

[12:52] <audreyt> that will rid us of the more fragile Makefile.PL band-aid

[12:52] <agentzh> audreyt: will try in the next commit.

[12:52] <agentzh> committing

[12:52] <audreyt> agentzh++

[12:53] <agentzh> :D

[12:55] <svnbot6> r13366 | agentz++ | [Makefile.PL]

[12:55] <svnbot6> r13366 | agentz++ | - removed the useless -D's

[12:55] <svnbot6> r13366 | agentz++ | [src/perl5/p5embed.h]

[12:55] <svnbot6> r13366 | agentz++ | - added macro definitions to fix activeperl 5.8.x

[12:55] <svnbot6> r13366 | agentz++ |   embedding problems.

[12:55] <svnbot6> r13366 | agentz++ | (thanks audreyt++ for helping me)

[12:57] *** xerox joined
[12:59] <agentzh> yay, tonight is fruitful. :)

[12:59] <audreyt> :DD

[12:59] <svnbot6> r13367 | agentz++ | further moved dirent=DIRENT from Makefile.PL to

[12:59] <audreyt> agentzh: does the new rules stuff work for you?

[12:59] <svnbot6> r13367 | agentz++ | src/perl5/p5embed.h per audreyt++

[13:01] <agentzh> audreyt: testing now... :)

[13:01] <svnbot6> r13368 | agentz++ | [ChangeLog]

[13:01] <svnbot6> r13368 | agentz++ | - s/5.8.8 is required/5.8.x is required/

[13:02] <agentzh> audreyt: btw, how can i test it?

[13:02] <agentzh> sorry for the dumb question.

[13:03] <agentzh> because i got "*** Cannot parse PGE: a"

[13:03] <agentzh> pugs> my $a ~~ /a+/

[13:03] <agentzh> *** Cannot parse PGE: a+

[13:04] <agentzh> audreyt: am i supposed to test the rules like that?

[13:04] <audreyt> well, yeah, but assign $a something :)

[13:05] <agentzh> oh, yes..

[13:05] <agentzh> *** Cannot parse PGE: a+

[13:05] <agentzh> *** Error: fd:10: hGetLine: end of file

[13:05] <agentzh> is this error normal?

[13:05] <audreyt> exit pugs and try again

[13:06] <audreyt> I'm fixing the empty $a bug

[13:06] <agentzh> PGE...oh well...

[13:06] <agentzh> i was expecting "PCR" or something...

[13:06] <agentzh> okay

[13:06] <audreyt> fixed that

[13:06] <audreyt> I mean the msg

[13:07] <agentzh> oh no...my pugs build breaks by dirent...

[13:07] <svnbot6> r13369 | audreyt++ | * remove "PGE" from msg text

[13:08] <agentzh> because i have 2 perls, so it's sort of messy here...

[13:08] <agentzh> s/so//

[13:09] <agentzh> the dirent problem bites me.

[13:10] <agentzh> i'll revert r13367

[13:11] <audreyt> okie.

[13:11] <svnbot6> r13370 | audreyt++ | * Error handling for HsBridge.

[13:11] <audreyt> I fixed the ~~/a+/

[13:11] <agentzh> good to learn. :)

[13:13] <audreyt> ?eval 1 ~~ /1/

[13:13] <evalbot_r13368> *** Cannot parse PGE: 1 *** Error: fd:8: hGetLine: end of file Match.new(   ok => Bool::False,    from => 0,    to => 0,    str => "",    sub_pos => (),    sub_named => {} )

[13:13] <audreyt> ?eval 1 ~~ /1/

[13:13] <evalbot_r13368> *** Cannot parse PGE: 1 *** Error: fd:8: hGetLine: end of file Match.new(   ok => Bool::False,    from => 0,    to => 0,    str => "",    sub_pos => (),    sub_named => {} )

[13:13] <audreyt> hm.

[13:16] <agentzh> pugs> 'a' ~~ /a/

[13:16] <agentzh> *** Cannot parse regex: a

[13:16] <agentzh> *** Error: fd:4: hGetLine: end of file

[13:16] <agentzh> (r13370)

[13:17] <audreyt> try

[13:17] <audreyt> '1' ~~ rule{a}

[13:17] <audreyt> or

[13:17] <audreyt> 'a' ~~ rule{a}

[13:17] *** Psyche^ joined
[13:17] *** Psyche^ is now known as Patterner

[13:17] <agentzh> k

[13:18] <agentzh> pugs> '1' ~~ rule{a}

[13:18] <agentzh> *** Cannot parse regex: :sigspace(1)[:ratchet(1)[a]]

[13:18] <agentzh> *** Error: fd:7: hGetLine: end of file

[13:18] <agentzh> it looks a bit better. :)

[13:18] <svnbot6> r13371 | agentz++ | - reverted r13367 since the dirent problem bites me.

[13:18] <audreyt> hmm not really :)

[13:18] * audreyt ponders

[13:20] <audreyt> try r13372

[13:20] <svnbot6> r13372 | audreyt++ | * try to find perl.exe too

[13:21] <agentzh> up'ing

[13:22] <agentzh> r13372 doesn't help.

[13:23] <agentzh> same error here.

[13:24] <audreyt> ponder ponder.

[13:24] <agentzh> :)

[13:25] <audreyt> in pugs directory try this

[13:25] <audreyt> perl -Iperl5/Pugs-Compiler-Rule/lib -MPugs::Runtime::Match::HsBridge -ePugs::Runtime::Match::HsBridge::__CMD__

[13:25] <audreyt> and then type in

[13:25] <audreyt> match 1 1

[13:25] <audreyt> 1

[13:25] <audreyt> and see what happens

[13:26] <agentzh> okie

[13:27] <agentzh> OK 20

[13:27] <agentzh> PGE_Match 0 1 [] []

[13:27] <agentzh> that is the output

[13:28] <agentzh> seems good. ;)

[13:29] <audreyt> yeah.

[13:29] <audreyt> ponder pnder.

[13:29] <audreyt> I blame CRLF.

[13:29] <agentzh> hehe

[13:30] * agentzh hands audreyt a cup of tea.

[13:30] <audreyt> thanks :)

[13:35] * xerox wants tea too!

[13:36] <obra> audreyt: cl and I went to a crazy-fancy restaraunt the other day. after-meal tea had a list of super premium teas...including a USD20 teapot for one of WenShan oolong

[13:37] <obra> I'd brought CL a whole bag of it when I came to visit. we were very amused.

[13:37] <obra>  WenShan Baozhong or however it's properly typed

[13:38] <audreyt> WenShan BaoZhong is correct.

[13:38] <audreyt> amusing.

[13:39] <agentzh> LOL

[13:40] <agentzh> USD20 ~~ 160 yuan

[13:41] <agentzh> audreyt: bad news...

[13:41] <agentzh> D:\projects\Pugs2>pugs -Mperl5:CGI -e "say CGI.new"

[13:41] <agentzh> Undefined subroutine CGI::say

[13:41] <agentzh>  at -e line 0

[13:41] <audreyt> mm?

[13:42] <agentzh> perl 5 embedding seems broken.

[13:42] <audreyt> it's not

[13:42] <audreyt> CGI has autoload

[13:42] <audreyt> we can't yet deal with fallback.

[13:42] <audreyt> workaround:

[13:42] <audreyt> say CGI.new, ''

[13:42] <audreyt> an alternative is to ignore AUTOLOAD, maybe

[13:42] <audreyt> but that seems wrong also

[13:42] <agentzh> okay

[13:43] <agentzh> CGI=HASH(0x11219a58)

[13:43] <agentzh> yay

[13:50] <svnbot6> r13373 | audreyt++ | * More attempt at fixing PCR bridge

[13:52] <xerox> agentzh: yuan = ¥ ?

[13:52] <agentzh> aye

[13:53] <agentzh> up'ing

[13:55] <agentzh> audreyt: it worksforme now!!!

[13:55] <agentzh> audreyt++ audreyt++

[13:55] <audreyt> yay!

[13:55] <agentzh> pugs> 'a' ~~ /a/

[13:55] <agentzh> Match.new(

[13:55] <agentzh>   ok => Bool::True,

[13:55] <agentzh>   from => 0,

[13:55] <agentzh>   to => 1,

[13:55] <agentzh>   str => "a",

[13:55] <agentzh>   sub_pos => (),

[13:55] <agentzh>   sub_named => {}

[13:55] <agentzh> )

[13:55] <audreyt> 'a' ~~ /a/

[13:55] <audreyt> ?eval 'a' ~~ /a/

[13:58] *** evalbot_r13373 joined
[13:58] <agentzh> indeed pugs no longer needs parrot. i've removed parrot.exe from my path and pugs' rules still work fine.

[14:00] <agentzh> audreyt: maybe write something on your blog? :)

[14:00] <agentzh> i must say fglock++

[14:01] <agentzh> as well

[14:02] <audreyt> agentzh: maybe write something on _our_ blog? :)

[14:02] <audreyt> you do have a blog bit :)

[14:03] <agentzh> :D

[14:03] <audreyt> (as I need to sleep now :))

[14:03] <agentzh> i'll have a try!

[14:03] <audreyt> agentzh++

[14:03] <agentzh> sleep well audreyt!

[14:03] <agentzh> thanks for PCR integration!

[14:03] <audreyt> thanks for getting to the end of 5.8.x embed! :)

[14:03] <agentzh> it's worth hooray.

[14:03] <audreyt> it's been haunting us for a year :)

[14:04] <agentzh> my pleasure. :D

[14:04] <audreyt> g'nite and have fun :) *hugs*

[14:04] <agentzh> night!

[14:10] *** putter joined
[14:10] * agentzh has a lot of funny stuff on pugs to write.

[14:10] <putter> (ah, shift change:)

[14:10] <putter> 'night audreyt

[14:12] <audreyt> putter: 'night :)

[14:12] <audreyt> have fun playing with new rules engine :)

[14:13] <audreyt> (one that you can much easily hack, hopefully.)

[14:13] <putter> :)

[14:13] <putter> profound thanks :)

[14:13] * agentzh grins.

[14:13] <audreyt> *curtsies* *waves*

[14:13] <audreyt> &

[14:14] <obra>         

[14:16] *** Limbic_Region joined
[14:16] <agentzh> Limbic_Region: please test the win32 pugs build and rules support when you have a chance. :)

[14:17] <Limbic_Region> test how - smoke?

[14:17] *** eden_c joined
[14:17] <agentzh> nope, "perl Makefile.PL && nmake fast"

[14:18] <Limbic_Region> oh, just see if it builds

[14:18] <Limbic_Region> was in the middle of doing that anyway

[14:18] <agentzh> yeah

[14:18] <agentzh> good

[14:18] <agentzh> "perl Makefile.PL" is important.

[14:19] <Limbic_Region> yeah, part of my regular routine since Win32 has so many issues that other platforms don't seem to

[14:19] <agentzh> lol

[14:20] <agentzh> that is also an advantage.

[14:20] <agentzh> (to be an essential tester) :)

[14:21] * agentzh is also sleepy since he's in the same timezone as audreyt.

[14:22] <Limbic_Region> so if I understand your apparent excitement correctly - there should be no need for parrot to do rules in pugs?

[14:22] <agentzh> anyway, i'll finish the post before sleep.

[14:22] <agentzh> yup!

[14:22] <Limbic_Region> well, I am half way through the build (had already started without fast) so it should be done in 5 minutes or so

[14:22] <agentzh> that's a long-overdue improvement.

[14:22] <putter> |add todo For pil2js, enable p5 embedding (or the reverse) by default.  Then use PCR to provide rules support.

[14:23] <putter> Hmm, |todo add ...

[14:23] <agentzh> no hurry

[14:23] <putter> but no project manager bot.  ah well.

[14:23] <agentzh> i'm pondering what to write about on the pugs blog.

[14:23] <Limbic_Region> well, when I suggested it - I had no idea how far people would take the idea

[14:24] <agentzh> indeed, it's suggested by LR.

[14:24] <agentzh> *was

[14:25] <agentzh> i remember your conversation with audreyt.

[14:25] <agentzh> she showed you some pieces of haskell code, which scaried me a lot.

[14:26] <agentzh> when she said "that's easy", i said "wow" to myself.

[14:26] <Limbic_Region> well, I doubt that I was the only one to think of it though I did so independently

[14:27] <Limbic_Region> and my vision of its usefullness was certainly short sighted - apparently it has many many more benefits than I realized

[14:27] <Limbic_Region> agentzh - build finished fine

[14:27] <Limbic_Region> working on the post build modules like v6 now

[14:27] <agentzh> great

[14:28] <Limbic_Region> so is there a specific test I should run to verify it isn't calling parrot??

[14:28] * agentzh seldom runs "nmake" since it's terribly slow.

[14:28] <Limbic_Region> On this machine it seldom takes longer than 20 minutes even from scratch

[14:28] <agentzh> 'abc' ~~ /\w+/ should be sufficient.

[14:28] <Limbic_Region> I can live with that

[14:28] <Limbic_Region> k

[14:28] <putter> I was just now thinking "audreyt++ fglock++ <rub hands together>  I can't wait for the compile to finish.  It's just like Christmas." ;) ;)

[14:28] <Limbic_Region> I will be back in a few

[14:29] <agentzh> putter: aye

[14:30] <agentzh> "audreyt++ and fglock++ rub hands together" is a good title for my post. :)

[14:31] <putter> err, well, if you think so... :)

[14:31] <agentzh> putter: do you have any insane plans on this which i can write down?

[14:32] <putter> expectation management rule 13 for world domination - never write down insane plans

[14:32] <agentzh> hmm, that makes much sense. :)

[14:36] <Limbic_Region> ?eval say 'abc' ~~ /w+/

[14:36] <evalbot_r13373> OUTPUT[ ] Bool::True

[14:36] <Limbic_Region> agentzh - I don't get the same results

[14:36] <Limbic_Region> I get 'abc'

[14:36] <Limbic_Region> but no errors and nothing blows up

[14:37] <agentzh> 'abc'?

[14:37] <Limbic_Region> yes

[14:37] <Limbic_Region> pugs -e "say 'abc' ~~ /\w+/"

[14:37] <Limbic_Region> output 'abc'

[14:37] <agentzh> on pugs> ?

[14:37] <Limbic_Region> let me try it from the shell

[14:38] <agentzh> yes, i also get 'abc' via the oneliner

[14:38] <agentzh> which is expected.

[14:38] *** Termy joined
[14:38] <Limbic_Region> there I get "'abc'\nBool::True"

[14:38] <Limbic_Region> ok

[14:38] <Limbic_Region> then all is right in the world

[14:39] <Limbic_Region> I wiped out %PATH before testing

[14:39] <agentzh> yep

[14:39] <agentzh> that's good

[14:42] <agentzh> (i removed parrot.exe directly before testing)

[14:43] <putter> @tell audreyt re rule_recursive.t, yesterday you said it works for you, due to PCR.  I'm getting non-termination of  rule r { <null> | x <r> } 'x' ~~ /<r>$/  Fyi.

[14:43] <lambdabot> Consider it noted.

[14:46] <putter> @tell audreyt oops, no it's not (non terminating).  Just looks like rules aren't working yet.  'a' ~~ /a/ works, rule r { a } 'a' ~~ /<r>/ doesn't yet.

[14:46] <lambdabot> Consider it noted.

[14:49] *** LimbicRegion joined
[14:50] <putter> hmm, do we have a spec'ed $^N mechanism?  I don't immediately see it...

[14:51] *** int-e joined
[14:52] <LimbicRegion> ?

[14:53] *** LimbicRegion is now known as Limbic_Region

[14:53] <Limbic_Region> better

[15:02] * agentzh finds the string "Limbic_Region" particularly difficult to type.

[15:02] <agentzh> (no offense)

[15:03] <Limbic_Region> you don't have tab completion?

[15:03] <Limbic_Region> in this particular channel - Lim should be sufficient

[15:03] <Limbic_Region> heck - my client doesn't even require the initial cap

[15:03] *** mako132_ joined
[15:04] <agentzh> LR: no, my irc client is not so smart.

[15:05] <agentzh> oh...wait...tab completion? oh, yes!

[15:05] <Limbic_Region> heh

[15:05] * agentzh has tried out this feature for the first time.

[15:05] *** lanny joined
[15:05] * Limbic_Region wonders how long agentz has been using this client without knowing about tab completion

[15:06] <agentzh> 2 months or so.

[15:06] <agentzh> and i often mistype audreyt as auderyt.

[15:07] <lanny> agentzh: turned your insertion sort failure into a test.  Seems NEXT {} causes for @x loops to fail.

[15:07] <agentzh> lanny: i'm aware of that. :)

[15:07] <lanny> Well now there is a test to show it. :)

[15:07] <agentzh> in fact, i'm the "author" of t/closure_traits/next.t

[15:08] <lanny> or there will be when I commit.

[15:08] <agentzh> lanny: you've added it?

[15:08] <agentzh> lanny++

[15:09] * agentzh goes back to journaling.

[15:09] <lanny> Just building pugs from LATEST  to make sure nobody slipped in a fix on me.  Had more than one bug solved between the time I discovered and time I wrote the test.

[15:10] <agentzh> lanny: that's not very likely

[15:10] <agentzh> especially when audreyt is sleeping.

[15:10] <lanny> No.  I didn't think so either.  But it keeps me  in practice for  doing it  at the job that pays my mortgage.

[15:11] <Limbic_Region> lanny - you should have been around in the early days of pugs

[15:11] <agentzh> lol

[15:11] <Limbic_Region> bug fixes happen quickly now but they aren't found as quickly

[15:12] <lanny> Heh.  Would have been too wooly for my tastes I think.

[15:12] <Limbic_Region> back then when bugs were rampant - you could have a dozen bug fixes in the time you were writing the test to expose the bug

[15:12] <agentzh> i'll be insanely happy if fixes are so many.

[15:13] <agentzh> Limbic_Region: seen my toy haskell programs? comments welcome. :)

[15:13] <jabbot> agentzh: I havn't seen my, agentzh

[15:13] <agentzh> http://svn.berlios.de/svnroot/repos/unisimu/Java/exercises/

[15:13] <lambdabot> Title: Revision 702: /Java/exercises, http://tinyurl.com/fca7r

[15:14] <agentzh> these problems are part of my schoolwork for Java.

[15:14] <agentzh> i've implemented them in Java, Haskell, Perl 6, and possibly Perl 5.

[15:15] <agentzh> to be honest, i like Haskell most.

[15:15] <agentzh> it's the cleanest and also the fastest.

[15:15] <agentzh> the relative efficiency for these languages is as follows:

[15:15] <agentzh> GHC > perl 5 > Java > pugs

[15:16] <Limbic_Region> agentzh - sorry, was AFK

[15:16] <agentzh> no problem. :)

[15:16] <Limbic_Region> have not seen it - link?

[15:16] <Limbic_Region> the Java exercises are really haskell?

[15:16] <agentzh> http://svn.berlios.de/svnroot/repos/unisimu/Java/exercises/

[15:16] <lambdabot> Title: Revision 702: /Java/exercises, http://tinyurl.com/fca7r

[15:16] <agentzh> i've done them in 3 languages.

[15:17] <Limbic_Region> oh great

[15:17] <Limbic_Region> that should help me a bit I think

[15:17] <Limbic_Region> I am still slowly pushing my way through YAHT

[15:17] <agentzh> :)

[15:17] <agentzh> YAHT is great

[15:17] <agentzh> but is not enough.

[15:18] <Limbic_Region> well, I play as I go

[15:18] <Limbic_Region> which makes each chapter painfully slow

[15:18] <Limbic_Region> typically because I try to get ahead of the chapter

[15:18] <agentzh> i think that's a good way to learn. :)

[15:18] <Limbic_Region> and with haskell - I really need to force my way through because it just doesn't fit in my head but one way (apparently)

[15:18] <agentzh> Limbic_Region++

[15:19] <lanny> ha ha.  agentzh: I thought next.t was full of passing tests.  :)  Should have run the whole thing first.

[15:19] <agentzh> Limbic_Region: i had exactly the same feeling one year ago.

[15:19] <Limbic_Region> well, this isn't the first time I have tried

[15:19] <agentzh> Limbic_Region: i even gave up learning at that time.

[15:19] <agentzh> lanny: (!)

[15:19] * Limbic_Region gave up multiple times

[15:20] * agentzh giggles.

[15:20] <Limbic_Region> but that's because too many concepts were foreign - there was no way to build a bridge from what I knew to what I didn't

[15:20] <Limbic_Region> YAHT is taking one thing at a time

[15:20] <agentzh> yes

[15:20] <agentzh> and also "Haskell Tutorial for C programmers"

[15:21] <agentzh> the latter really gave confidence to me.

[15:21] <Limbic_Region> and it isn't completely true to say that there are many concepts that are foreign.  Conceptually I get them but my brain just refuses to think in those terms

[15:21] <Limbic_Region> I am now able to isolate things and then just work on that until my brain gives in

[15:21] <agentzh> Limbic_Region: i think we're in complete agreement.

[15:21] <Limbic_Region> agentzh++

[15:22] <agentzh> i'll dive into Parsec later.

[15:23] <agentzh> hopefully i can hack under src/ soon. :D

[15:23] <Limbic_Region> well - I think Parsec is Haskell's answer to YAP right

[15:23] <svnbot6> r13374 | lanny++ | next.t: one small test

[15:23] <svnbot6> r13374 | lanny++ | sort.t: minor syntax  changes

[15:23] <xerox> YAP?

[15:23] <Limbic_Region> if you grok YAPC or YAPP then you should be all set

[15:23] <agentzh> Yapp

[15:24] <agentzh> Limbic_Region: i've written self-hosted backtracking recursive descent parser in the last term.

[15:24] <Limbic_Region> oh, so it should be a snap

[15:24] <agentzh> and also a working LL(1) parser generator.

[15:24] <Limbic_Region> and yap should have been yac

[15:25] <agentzh> well, the error handling part in Parsec is kind of new to me.

[15:25] <Limbic_Region> well, I have recently done a project comparing p::rd, p:yapp, hop::parser, parse::earley,, etc

[15:25] <Limbic_Region> I haven't even looked at it - so completely foreign to me

[15:25] <agentzh> yeah, you were seeking every bit of info on parsing modules during a while.

[15:26] <agentzh> parsec seems to be a top-down parser.

[15:26] <agentzh> yapp is bottom-up iirc.

[15:27] <Limbic_Region> interesting

[15:27] <Limbic_Region> I am likely misinformed or just misremembering

[15:27] <lanny> Hmm.  Yapp page says it's recursive descent

[15:27] <agentzh> lanny: ah, i didn't know.

[15:28] <putter> is there a p5 or p6 packrat parser yet?

[15:28] <agentzh> Parse::Yapp - Perl extension for generating and using LALR parsers.

[15:28] <agentzh> lanny: LALR is recursive descent?

[15:28] <agentzh> lanny: i don't think so.

[15:29] * agentzh got 97' in his compiler theory exam.

[15:29] <putter> came across a scm2cl'ed CL packrat autoderived from a scheme packrat.  thought we could easily play the same game.

[15:29] * Limbic_Region almost flunked out of highschool

[15:29] <lanny> I'm just reading off the page.  Don't blame me.  :)

[15:30] <agentzh> lanny: i was not. :)

[15:30] <Limbic_Region> packrat is speedy choice when backtracking is going to be a large part of the parsing right - but if no backtracking then overkill?

[15:30] <lanny> aha.  I was looking at o-xml's yapp

[15:30] <agentzh> heh

[15:30] *** xdg joined
[15:31] <lanny> No.  LALR should be shift-reduce and  table driven if  I recall my compiler class correctly

[15:31] <agentzh> lanny: yes, it's a shift/reduce parser.

[15:31] <lanny> I made someone less than 97's though.

[15:31] <agentzh> *and* it is a bottom-up parser.

[15:31] <lanny> s/someone/somewhat/

[15:32] <agentzh> if LALR is top-down, it won't be so powerful.

[15:33] <Limbic_Region> well, I am off to watch a movie with my wife - TTFN all

[15:33] <lanny> Bye, Limbic

[15:33] <lanny> I should figure  out something to do with my little girls on such a nice day.  Laters, agentzh.

[15:33] <agentzh> lanny: have a good time :)

[15:34] * agentzh restarts journaling.

[15:36] <putter> note that LALR is actually a characterizes the grammar, rather than the parser.  given a grammar with characteristics x, one can use a parsing technique q.  and a single grammar inevitably has different sections with different characteristics.  which one can use different parsing tech on.  the current,

[15:36] *** zgh joined
[15:37] <putter> long standing, situation where parsers only handle one parser tech, and thus on flavor of grammar, is a horrible software eng pathology which p6 will hopefully eliminate.  one of many likely contributions to the world of p6. ;)

[15:39] <putter> hmm, there's an analogy.  just as ruby on rails is driving other languages to do similar things, and p4/5 drove languages to include regexps, p6 will hopefully drive a fix to a 30+ "our parsers suck" bottleneck.

[15:40] <agentzh> i most like p6's regex feature. :)

[15:41] <agentzh> i've noticed how p6 has been combining different parsing strategies into a whole.

[15:41] <agentzh> that is a really charming direction.

[15:42] <agentzh> consider we have both top-down parsing and bottom-up parsing in a single parser...wow...

[15:42] <putter> agreed.  universal parser.

[15:42] <agentzh> indeed

[15:43] <putter> hmm...  just in case there's a misunderstanding...

[15:43] *** Insolit joined
[15:44] <putter> the p6 parser, ie that parses p6 code, is indeed a sandwich parser.  top down to expr, then bottom up, on tokens defined top down.  but,

[15:44] <agentzh> bottom up on operators, right? hehe

[15:44] <agentzh> top down on tokens, yeah

[15:45] <putter> the underlying rules machinery should be able to handle *anything*.  thus the universal parser concept.  "parser" is getting overloaded in this conversation. ;)

[15:45] <agentzh> any data structures?

[15:45] <putter> any grammar.  left recursive, right recursive, no lookahead, infinite lookahead, etc

[15:46] <agentzh> ah

[15:46] <agentzh> that is really awesome. :)

[15:46] <putter> yes :)

[15:46] <agentzh> we need a very big test suite for this.

[15:46] <putter> lol

[15:46] <agentzh> s/big/good/

[15:46] *** weinig is now known as weinig|bbl

[15:47] <agentzh> testing parsers is particularly tricky.

[15:47] <agentzh> debugging one is even trickier.

[15:49] <putter> once we start being able to run other languages' code, we can use their test suites.  ie, if you have Parser::Convert::FromYacc, and, sigh, probably also need Language::C::Interpreter, you can then run the yacc test suite.

[15:49] <agentzh> hmm, that is very clever.

[15:50] <agentzh> but i'm doubting if it would also make debugging even more difficult.

[15:50] <agentzh> the test suite should be divided into different levels.

[15:50] <putter> cpan needs a tcc package.  maybe a cint package too.  weeee.

[15:50] <agentzh> lower levels test basic things while higher levels test advanced features.

[15:51] <putter> now that macs are x86 :)

[15:51] <agentzh> tcc?

[15:51] <putter> http://fabrice.bellard.free.fr/tcc/

[15:51] <lambdabot> Title: TCC : Tiny C Compiler

[15:51] <agentzh> oh

[15:51] <putter> note libtcc, a library which can compile and link C code at runtime without touching disk.

[15:52] <agentzh> awesome...

[15:53] <putter> re levels, yes, borg'ing test suites (need to find a less perjorative name for the process) is more of a coverage approach

[15:54] <putter> s/coverage approach/way to obtain broad test coverage/

[15:57] <putter> hmm.  what is the canonical way to run v6?   with pwd == pugs, perl -I...??.... -e 'use v6;' ?

[15:58] *** eden_c joined
[15:59] <putter> man page assumes v6.pm is in lib/, which it isn't, even after make test...

[16:00] *** zgh joined
[16:05] *** iblechbot joined
[16:10] <putter> fglock, et al: is it possible to run v6 out of the pugs directories, rather than installing it and thus having version issues?

[16:13] *** avarab joined
[16:14] *** justatheory joined
[16:18] <putter> feather folks: perhaps we could have a p5 v6 bot running?

[16:19] <putter> anyone: want to write the p5 utility code for a boxed (set up clean directory, chroot, resource limit) perl running v6?

[16:20] <putter> hmm, or just sbox a cgi.

[16:23] * rafl_ would like to do that.

[16:25] *** Psyche^ joined
[16:25] <TimToady> hmm, my make smoke hung on ext/Perl6-Grammar/t/basic.t, not using any CPU.  Looked like an infinite sleep or something...

[16:26] *** lollan joined
[16:28] <putter> me too.  audreyt swapped out PGE for PCR before heading off to sleep.  so there's a bit of brokenness just now.

[16:30] <putter> one should be able to revert to say r13356 to get the old rx engine.

[16:31] *** avarab is now known as avar

[16:33] <putter> later &

[16:37] <TimToady> it's waiting for a subprocess:

[16:37] <TimToady> USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND

[16:37] <TimToady> larry     2876  0.5  0.5  12268  8536 pts/7    S+   09:33   0:00 /usr/bin/perl -Iperl5/Pugs-Compiler-Rule/lib -MPugs::Runtime::Match::HsBridge -ePugs::Runtime::Match::HsBridge::__CMD__

[16:37] *** Psyche^ is now known as Patterner

[16:37] <TimToady> maybe it's finding an old installed Pugs-Compiler-Rule or something...

[16:42] <svnbot6> r13375 | agentz++ | [util/podhtm.pl]

[16:42] <svnbot6> r13375 | agentz++ | - emits HTML to stdout if no --out is specified.

[16:44] *** larsen joined
[16:44] <TimToady> nope, removed those, and it still hangs.

[16:46] <TimToady> probably just getting out of sync pipewise.

[16:47] <TimToady> as with parrot, I'd much rather run an embedded PCR than a piped one...

[16:54] *** frankg joined
[17:03] <svnbot6> r13376 | audreyt++ | * 18:47 < TimToady> as with parrot, I'd much rather run an embedded PCR than a piped one...

[17:03] <svnbot6> r13376 | audreyt++ |   ...as usual, your wish line is my command line. :-)

[17:05] *** zgh joined
[17:13] <pasteling> "agentzh" at 210.22.200.67 pasted "Pugs blog draft (please review)" (41 lines, 1.5K) at http://sial.org/pbot/19730

[17:16] <pasteling> "agentzh" at 210.22.200.67 pasted "oops, can't get access to irc any more...sigh. but i can read the irc log." (1 line, 9B) at http://sial.org/pbot/19731

[17:17] <svnbot6> r13377 | audreyt++ | * Allow for rule redefinition via ->reinstall.

[17:17] <audreyt> agentzh: there's nothing "pure Perl 5 + XS" about it

[17:17] <lambdabot> audreyt: You have 2 new messages. '/msg lambdabot @messages' to read them.

[17:17] <audreyt> it's true that PadWalker is XS and is maybe reuiared for /<$foo>/

[17:17] <audreyt> but for the part that pugs currently uses you don't need to install anything

[17:17] <audreyt> zero dependency

[17:17] <audreyt> lambdabot: @messages

[17:17] <lambdabot> putter said 2h 34m 44s ago: re rule_recursive.t, yesterday you said it works for you, due to PCR. I'm getting non-termination of rule r { <null> | x <r> } 'x' ~~ /<r>$/ Fyi.

[17:17] <lambdabot> putter said 2h 31m 57s ago: oops, no it's not (non terminating). Just looks like rules aren't working yet. 'a' ~~ /a/ works, rule r { a } 'a' ~~ /<r>/ doesn't yet.

[17:18] <pasteling> "agentzh" at 210.22.200.67 pasted "Okay, so i should say "pure Perl 5"?" (1 line, 9B) at http://sial.org/pbot/19732

[17:18] <audreyt> yes.

[17:19] <audreyt> you can also mention that this reuses the now-on-by-default perl5embed

[17:19] <audreyt> which thanks to a certain agentzh++ now works on win32 for activeperl 5.8.anything also.

[17:19] <pasteling> "agentzh" at 210.22.200.67 pasted "okay. audreyt: btw, pugs hangs on regexes like ' abc' ~~ /<ws>+ \w+/. is that normal?" (1 line, 9B) at http://sial.org/pbot/19733

[17:20] <audreyt> maybe you want /<space>+\w+/ ?

[17:20] <audreyt> but infloop is certainly not normal

[17:20] <audreyt> alarm() support welcome on the HsBridge...

[17:20] <audreyt> anyway, the blog post looks good :)

[17:21] <audreyt> agentzh++

[17:21] <audreyt> *back to sleep*

[17:21] <pasteling> "agentzh" at 210.22.200.67 pasted "ahhhh" (1 line, 8B) at http://sial.org/pbot/19734

[17:21] <audreyt> @tell putter named rules is now in as well.

[17:21] <lambdabot> Consider it noted.

[17:30] *** putter joined
[17:30] <putter> thanks audreyt

[17:30] <lambdabot> putter: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:30] <putter> you beat me to the commit, though yours is cleaner. ;)

[17:37] <pasteling> "agentzh" at 210.22.200.67 pasted "journal's up: http://pugs.blogs.com/pugs/ Good night, everyone~~~ &" (1 line, 8B) at http://sial.org/pbot/19735

[17:40] <putter> TimToady: my experience is a mature piped solution can be even more reliable than an embedded one, unless the embedded engine was written with embeddability being a primary focus.

[17:47] <svnbot6> r13378 | putter++ | A HsBridge.pm hang fixed.  Now correctly exit()s when there are PCR errors.

[17:47] <svnbot6> r13378 | putter++ | Such as '^' not implemented, Emitter/Rule/Perl5.pm line 361,

[17:47] <svnbot6> r13378 | putter++ | with perl -Iblib6/lib ext/Perl6-Grammar/t/basic.t .

[17:51] <nothingmuch> in which syn is the longest token rule specced?

[17:56] <putter> a grep turns it up in a bunch of ./Perl6/Spec/ , def in Rule.pod, which refers to it as venerable. :)  checking rule Snn...

[17:56] <putter> S05

[18:00] <putter> appearances also in sub, syn, and op.  which correspond to... hmm... dont see the fetch in my make log...  curious.

[18:06] <putter> ghc is giving off C++ vibes - change one line, and watch the universe recompile. :/

[18:06] <nothingmuch> putter++

[18:11] <svnbot6> r13379 | putter++ | Avoid losing the first line of error messages from the PCR rx engine.

[18:12] *** buetow joined
[18:13] * putter wonders if PCR really could possibly have not implemented ^.  seems unlikely.

[18:16] *** Aankhen`` joined
[18:16] <putter> TimToady: re smoke, basic.t now doesn't hang.  I'm running the t/rules/ tests now.

[18:17] *** RakeshBalakrishn joined
[18:19] *** RakeshBalakrishn left
[18:20] *** Limbic_Region joined
[18:37] *** mdiep_ joined
[18:50] *** mdiep joined
[18:55] <putter> soo... anyone who wants to hack p5 code, perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5.pm would be a place to start.

[19:00] *** xern joined
[19:03] *** mdiep joined
[19:04] <putter> running smoke...

[19:04] *** avar joined
[19:05] *** elmex joined
[19:07] <putter> @tell fglock It could be useful to do a "interview the expert" with you sometime, to get a brain dump of how PCR etc work.  Though I'm still exploring, so that may already exists. :)

[19:07] <lambdabot> Consider it noted.

[19:20] *** Limbic_Region joined
[19:24] <putter> eep.  that was quite the interesting sentence,

[19:28] *** Termy joined
[19:29] <svnbot6> r13380 | kudra++ | This week's summary, a little early

[19:46] *** TimToady joined
[19:46] <TimToady> I should not have bragged about my server staying up for six months...it just crashed.

[19:50] <svnbot6> r13381 | zgh++ | typo: the HTTP::Simple::Server bug was happening with the default port was *not* used

[19:51] <putter> And there are very many people who would believe there is causality or correlation there. :/

[19:52] <zgh> uptime is a false ideal anyway

[19:53] <Khisanth> TimToady: but at least now you know it is listening :)

[20:29] *** buetow joined
[20:34] *** buetow joined
[20:35] *** weinig|bbl is now known as weinig

[20:50] *** putter joined
[20:50] <putter> smoke up

[20:51] <putter> hmm, more recent smoke already up.  err, just how does one get a smoke in 30 min??  ghc 6.5?  very wizzy machine?  magic incantations I have... neglected... oops.  Precompiled Test I assume.  Ah well. ;)

[20:53] <svnbot6> r13382 | putter++ | pX/Common/regexp_engine_cruft/ created.

[20:53] <svnbot6> r13382 | putter++ | Learning PCR Ratchet.pm, I was trying to remember how some old spike-related factory code worked.  Which had never been checked in.  Now it has.

[20:59] <TimToady> it's just a thinkpad.

[20:59] <TimToady> ghc 6.4.2

[21:00] <TimToady> and I always compile optimized

[21:00] <TimToady> because I have enough memory to do it fairly rapidly

[21:00] <TimToady> (1.5Gb)

[21:02] <TimToady> (also I'd mostly recompiled before from when it was hanging...)

[21:04] <TimToady> but it's the thinkpad obra++, so I think it came with some extra TLC.

[21:04] <TimToady> s/,/gave me,/

[21:06] <TimToady> anyway, thanks for the fix! putter++

[21:12] <svnbot6> r13383 | putter++ | Pugs/Compiler/Regex.pm - fixed "unknown parameter 's'" error.  Eg, in t/rules/from_perl6_rules/word.t .

[21:13] <putter> Ah, obra magic.  No doubt.  ;)

[21:16] *** MacVince joined
[21:20] *** putter joined
[21:36] *** zeriod joined
[22:01] *** weinig is now known as weinig|bbl

[22:08] <pasteling> "putter" at 66.30.119.55 pasted "PCR errors for t/rules/, sorted by file." (402 lines, 39.2K) at http://sial.org/pbot/19739

[22:09] <pasteling> "putter" at 66.30.119.55 pasted "PCR errors for t/rules/, sorted by error." (287 lines, 37.3K) at http://sial.org/pbot/19740

[22:13] <putter> I was looking into <null> error.  No joy.  While the HsBridge.pm use()s don't quite match the Pugs/Compiler/Rule.pm pod, I didn't quite see how sub null is intended to be inherited.

[22:15] <putter> Oh, the "PCR errors" pasts are from an old run.  The "unknown parameter 's'" errors are gone.

[22:18] <putter> everyone: it's all perl _5_, there is a list of failing tests... come play! :)

[22:19] <putter> src/Pugs/Embed/Perl5.hs calls perl5/Pugs-Compiler-Rule/lib/Pugs/Runtime/Match/HsBridge.pm , and all subsequent activity is under perl5/Pugs-Compiler-Rule/lib/Pugs/ .

[22:21] <putter> pugs is just  doing "perl -Iperl5/Pugs-Compiler-Rule/lib -MPugs::Runtime::Match::HsBridge -ePugs::Runtime::Match::HsBridge::__CMD__", so no haskell knowledge needed...

[22:21] <putter> night &

[22:31] *** dduncan joined
[22:34] *** ezraburgh joined
[22:35] <dduncan> can I get something clarified? ... given how it is now being used, is embedded Perl 5 a hard dependency for Pugs now, such that it won't work for practical purposes without Perl 5 being embedded?

[22:35] *** what3 joined
[22:36] <dduncan> if it is a hard dependency, then are we still also using PCRE, or was that dropped in favor of using "the original" for :perl5 regexes?

[22:42] <dduncan> or, should I say, *will* PCRE be dropped, or is PCRE still easier to use for our purposes that warrants it being an extra dependency?

[22:45] *** xerox joined
[23:10] *** xdg joined
[23:12] *** elmex joined
[23:22] <svnbot6> r13384 | Darren_Duncan++ | ext/[Locale-KeyedText|Rosetta]/ : replaced any perl5 regexes with normal Perl 6 rules, now that they would compile without an embedded Parrot

[23:25] *** buetow joined
[23:43] <svnbot6> r13385 | markstos++ | [Changelog]

[23:43] <svnbot6> r13385 | markstos++ |     Updated list of CGI.pm changes to be comprehensive.

[23:43] *** int-e left
[23:45] *** markstos joined
[23:52] *** discordja joined
[23:56] <zgh> is there documentation about the redesign of CGI.pm for perl6?

[23:56] <zgh> i saw it mentioned in the summary

[23:56] <zgh> i can't get it to work with HTTP::Server::Simple right now either...

[23:56] <markstos> zgh: There is no grand plan. Darren Duncan posted ideas about what he' d like to see, but anyone is welcome to hack on it.

[23:56] <lambdabot> markstos: You have 1 new message. '/msg lambdabot @messages' to read it.

[23:57] <markstos> zgh: Would you like some help fixing HTTP::Server::Simple to work with the current CGI.pm design ?

[23:58] <zgh> indeed, it just seems like %*ENV isn't making it around, but it's hard to tell

[23:58] <markstos> specific failing test reference please?

[23:59] <zgh> markstos: I could sure use some pointers in that regard

[23:59] <zgh> ah ... well I have none

[23:59] <zgh> yet!

[23:59] <markstos> Ok, write a test for HTTP::Server::Simple that fails in a way that is related to CGI.pm, and I'll look at it if you want.

