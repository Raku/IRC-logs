[00:35] <cwest> hrm, seems I need Pugs::Safe::safe_readline and Pugs::Safe::safe_getc

[00:35] <cwest> In order to run an interactive shell in safe mode

[00:37] * cwest wanders back to the hackathon room to find audreyt...

[00:38] <mauke> she's here in the corner :-)

[00:39] <meppl> gute nacht

[00:40] *** cognominal joined
[00:42] *** penk joined
[00:49] <svnbot6> r11005 | fglock++ | v6.pm - moose-2.pl seems to compiles correctly (is Point) - but it looks different from audreyt slides

[00:53] *** bpphillips joined
[00:56] *** ben_ joined
[01:00] <cwest> So eval() in pugs defines a new scope, which is different from perl5's idea of eval().

[01:00] <cwest> This makes me sad. :-(

[01:01] <mauke> how is it different?

[01:07] <bpphillips> cwest: I think perl5 does the same thing: perl -le 'eval q(my $foo = 1); print $foo;' # prints nothing

[01:09] <cwest> oh yes, you're right

[01:09] <cwest> properly declared variables are, of course, only existant in eval scope

[01:09] <bpphillips> cwest: are you still working on the interactive web shell thing that you were contemplating earlier?

[01:10] <cwest> yes

[01:10] <bpphillips> could you accumulate the user's commands and evaluate the entire program for each command they submit?

[01:10] * bpphillips .o0{thinking that's not what you want...}

[01:11] *** Khisanth joined
[01:11] <cwest> right, not what I want.

[01:18] *** pfenwick joined
[01:18] <pfenwick> seen alias?

[01:18] <jabbot> pfenwick: I havn't seen alias, pfenwick

[01:24] <mugwump> dduncan: nice post, I replied

[01:25] <dduncan> hello

[01:25] <dduncan> yes, I'd really like to see those promised Set and Mapping implemented yesterday

[01:25] <dduncan> checking email ...

[01:26] *** daxim joined
[01:34] *** buubot joined
[01:36] <dduncan> reading done; thanks for your reply

[01:36] <dduncan> you mention parametric roles ... do the Synopsis already mention such things somewhere?

[01:37] <dduncan> I used the term 'subset' because I considered that every valid value of the type I was declaring was a valid value of the base type ... eg, they are all valid Str or Set or Mapping

[01:38] <dduncan> also, the parameters seemed to be shorthand for 'where' syntax

[01:39] <dduncan> eg, "Set{Bar}" is shorthand for "Set where { all(.members).does(Bar) }"

[01:39] <dduncan> except perhaps the former is easier to optimize away at compile time

[01:39] <dduncan> I happened to mix both versions in my examples

[01:40] <dduncan> mugwump, I would appreciate if you look at the ext/Relation/ I'm starting to rewrite and give feedback on the new parts at the top (the new parts are not commented out in a pod block)

[01:41] <dduncan> of course, said class is intended to model things I would like built-in, whether they are built over your Collection or something else matters little, as long as they're easy to define and use

[01:42] <dduncan> note in particular that the definition of a Heading is structurally recursive ...

[01:42] * mugwump sighs as svn makes an operation that should take seconds take hours

[01:42] <dduncan> a heading is a set of zero or more attributes, and an attribute may possibly be a Heading itself

[01:42] <mugwump> yes, parametric roles have at least one line somewhere

[01:42] <dduncan> though it would be a different Heading

[01:42] <mugwump> :)

[01:43] <mugwump> it confused me at first that only roles would be parametric, then I thought about it again and realised it was almost a tautology

[01:43] <dduncan> said recursion essentially permits formal definitions of specific hierarchies

[01:44] <dduncan> reduced to a plain Set, it is like parameterizing a Set to say that its members must be of type Set of Str, or something

[01:44] <dduncan> or like we see Array of Array of ...

[01:45] <dduncan> but in the case of a Tuple or Relation, each attribute there of can be a different type, some other tuples or relations, others not

[01:45] *** justatheory joined
[01:45] <dduncan> the reason the heading is recursive is that the main Heading definition specifies what Headings the attributes can have too, rather than any-old one

[01:46] <mugwump> your "Heading" is still the role parameters

[01:46] <dduncan> pretty much

[01:47] <dduncan> but Perl's built-ins seemed to inspecific

[01:47] <mugwump> you can get the role parameters via .meta (or should be able to)

[01:48] <dduncan> the basic idea is that with a Relation, every Tuple therein needs to have the same set of attributes, with corresponding attributes being of the same type

[01:48] <mugwump> so, assuming that there is both a Set class and a Set role,

[01:48] <mugwump> "Relation" is a Collection subtype

[01:49] <dduncan> the Heading declares what parts must be in common and/or restrictions for everything

[01:49] <dduncan> yes

[01:49] <mugwump> where the type parameters are defined

[01:49] <dduncan> as you define Collection, Relation would be a subtype thereof

[01:49] <mugwump> exactly.  what it adds is that conformance of types

[01:49] <dduncan> however, the Synopsis don't contain Collection, so I'm currently defining it in terms of what it does mention

[01:50] <dduncan> if you can get your Collection proposal endorsed by @Larry and added to the Syopsis, then I'll use that

[01:50] <dduncan> are you at the hackathon yourself ... I'm not

[01:51] <mugwump> no, I'm in NZ

[01:51] <dduncan> at home

[01:51] <mugwump> work

[01:51] *** coumbes joined
[01:51] <dduncan> well I support your idea in principle ... it is mainly details needing hashing out

[01:52] <mugwump> The point of whether a seperate "Collection" or "Set" is quite moot, anyway

[01:52] <mugwump> The only thing that not having a "Collection" lets you do is have duplicate tuples(ie, Seq objects appearing twice)

[01:52] <mugwump> which only a few people care about

[01:53] <mugwump> the point is how the role parameters are combined

[01:53] <dduncan> I think that one reason the Synopsis specifically mention things like Set or Seq as their own things rather than having them based on a Collection is that it is often easier for a language to be built up from simpler things than built down from more complex things

[01:53] <dduncan> so even if Collection is added, the Set may not be implemented with it

[01:54] <dduncan> just like you don't use a Seq or Array to implement a Str (sequence of chars)

[01:54] <mugwump> some languages do

[01:54] <dduncan> yes, but many don't, presumably for a reason

[01:54] <mugwump> C does.  Haskell does.

[01:54] <dduncan> I know Pascal does

[01:55] <mugwump> But the thing is, you don't care, because of the sugar

[01:55] <dduncan> my main concern from language design is that your tools are easy to use and unambiguous in meaning

[01:56] <mugwump> So, from a constraints perspective, a Set is a Collection with the constraint that each Seq has exactly one item, and that there are no duplicates.  From that perspective, the Collection is simpler.  The implementation is, well, an implementation detail

[01:57] <dduncan> mugwump, you may have touched on this before, but is there an existing Perl 5 implementation of the Collection type you propose?

[01:58] <mugwump> only a partial one at git://utsl.gen.nz/Coll

[01:58] <mugwump> but it really needs a ground-up rewrite based on parametric roles

[01:59] <mugwump> and for that I need to add parametric roles to Moose

[01:59] <dduncan> is Coll built using Moose, or will be?

[01:59] <svnbot6> r11006 | fglock++ | v6.pm - infix:<-=>; infix:<+=>; infix:<err>;

[01:59] <svnbot6> r11006 | fglock++ | - has TYPE $var;

[01:59] <svnbot6> r11006 | fglock++ | - moose-3.pl compiles, with errors

[01:59] <mugwump> it is built using Moose, yes

[02:00] <mugwump> I got partway through that implementation before realising that the parametric roles were really quite vital to making it not suck

[02:00] <dduncan> I looked at Moose the other day myself and debated whether to use it in my own stuff ... but I wasn't sure yet if it would make things easier or more difficult at the present

[02:00] <mugwump> as well as being drawn by other projects

[02:00] <mugwump> did you see audrey's slides?

[02:00] <dduncan> not as yet

[02:01] <mugwump> http://pugs.blogs.com/talks/yapcna-deploy-perl6.pdf

[02:01] <mugwump> skip to the Moose parts

[02:01] <dduncan> for one thing, I'm wondering whether things like Class::Std are best dumped in the transition, since Moose replaces their features

[02:02] * dduncan now to dinner, back in a bit

[02:02] <mugwump> probably.  There is a transition path - rewrite them to use Class::MOP

[02:02] <mugwump> yeah, it's almost end of week here ... catch you next week probably

[02:02] <dduncan> in brief, what I want to use in Perl 5 is something that lets my program design in perl 5 be as similar as possible to the corresponding perl 6 version

[02:03] <dduncan> if Moose will help me do that, great ... otherwise, not sure if it will do what I want

[02:03] <mugwump> Moose covers the OO part ... but read the slides for more

[02:10] *** bpphillips left
[02:15] *** scook0 joined
[02:17] *** baest joined
[02:18] *** justatheory joined
[02:18] *** pfenwick joined
[02:18] *** penk joined
[02:18] *** SamB joined
[02:18] *** nothingmuch joined
[02:18] *** dduncan joined
[02:18] *** knewt joined
[02:18] *** cmatei joined
[02:18] *** rashakil joined
[02:18] *** takesako joined
[02:18] *** f0rth joined
[02:18] *** jiing joined
[02:18] *** kane-xs joined
[02:18] *** orafu joined
[02:18] *** scw joined
[02:18] *** tcliou joined
[02:18] *** ajs_home joined
[02:18] *** obra joined
[02:18] *** spinclad joined
[02:18] *** drbean joined
[02:18] *** amv joined
[02:18] *** dvorak joined
[02:19] *** dvorak_ joined
[02:27] *** mjk joined
[02:35] <svnbot6> r11007 | fglock++ | v6.pm - fixed infix:<+=>;

[02:35] <svnbot6> r11007 | fglock++ | - has $var = exp;

[02:35] <svnbot6> r11007 | fglock++ | - fail();

[02:35] <svnbot6> r11007 | fglock++ | - moose-3.pl compiles, looks ok

[02:43] *** weinig is now known as weinig|sleep

[03:16] *** bpphillips joined
[03:17] *** multic joined
[03:18] *** multic left
[03:19] *** christo joined
[03:24] <svnbot6> r11008 | fglock++ | v6.pm - moose-4.pl compiles, has grammar problems (doesn't recognize method call)

[03:30] *** fglock joined
[03:33] <gaal> nothingmuch: ping

[03:33] <fglock> help wanted - convert per5/Pugs-Compiler-Perl6 moose*.pl to t/moose*.t (see existing tests for tips) - thanks!

[03:35] <nothingmuch> gaal: pont

[03:35] <nothingmuch> gaal: will be back soon

[03:35] <nothingmuch> just waiting for rob

[03:35] <nothingmuch> fglock: new stuff in Perl::Generate

[03:35] <nothingmuch> please give me a list of requirements for stuff you'd want to make easy

[03:36] <nothingmuch> especially from a perspective of processing (these trees are rather reusable and pretty easy to play around in)

[03:36] <nothingmuch> or at least they should be (hence the requirement request ;-)

[03:38] <fglock> nothingmuch: v6.pm ast is a little different, so it needs a rewrite first

[03:38] <fglock> I'm playing with translating to Moose - it would be nice if you could take a look at Pugs::Compiler::Perl6 Emit.pm

[03:38] *** bpphillips left
[03:39] <nothingmuch> fglock: i took a short look

[03:39] <svnbot6> r11010 | gaal++ |  r11081@sike:  roo | 2006-06-29 22:30:04 -0500

[03:39] <svnbot6> r11010 | gaal++ |  * Pugs.Prim: add Pugs::Safe::safe_getc and Pugs::Safe::safe_readline

[03:39] <svnbot6> r11010 | gaal++ |    primitives, allowing evalservers to interface an interactive pugs.

[03:39] <nothingmuch> i'm optimizing for what Moose will need right now

[03:39] <nothingmuch> but I can also optimize for what you want

[03:40] *** mdiep joined
[03:40] <nothingmuch> fglock: anyway, i will be out soon, so i'll prolly see you tomorrow

[03:40] <nothingmuch> ping me and we'll discuss

[03:41] <mdiep> is there a way to get a *flat* list of captures from a match?

[03:41] <fglock> nothingmuch: right now I need parameter processing in subs - clkao is investigating that

[03:41] <fglock> and more Moose examples to try to implement (v6 and p5 versions)

[03:42] <nothingmuch> fglock: ideally we could make some "sugar" nodes in p5

[03:42] <nothingmuch> that map directly to an idealized p6 ast

[03:42] <nothingmuch> (not parse tree)

[03:42] <nothingmuch> and these will be wrappers for lower level sub nodes

[03:42] <nothingmuch> that actually do the dirty work

[03:43] <nothingmuch> but i need to get into your work to actually help out

[03:43] <nothingmuch> and i haven't done so yet

[03:43] <nothingmuch> so it's easier for you to say what you would like the most =)

[03:46] *** fglock joined
[03:46] *** coumbes joined
[03:46] *** buubot joined
[03:46] *** Khisanth joined
[03:46] *** gaal joined
[03:46] *** revdiablo joined
[03:46] *** weinig|sleep joined
[03:46] *** Grrrr joined
[03:46] *** jabbot joined
[03:46] *** ruz joined
[03:46] *** SM_ax joined
[03:46] *** perlbot joined
[03:46] *** wolverian joined
[03:46] <nothingmuch> fglock: i'm off (birthday)

[03:46] <nothingmuch> see you =)

[03:48] <fglock> happy birthday!

[03:55] *** fglock left
[04:06] <svnbot6> r11011 | audreyt++ | * yapc_schedule.pl - you need latest parrot trunk to run this.

[04:06] <svnbot6> r11011 | audreyt++ |   kolibrie++ for coming up with the syck^Wsick example of

[04:06] <svnbot6> r11011 | audreyt++ |   overriding "ws".

[04:08] *** christo left
[04:21] <dduncan> what he said

[04:49] <svnbot6> r11012 | sanug++ | Audrey and Patrick described Perl 6 compilation

[04:52] <svnbot6> r11013 | Darren_Duncan++ | ext/Relation/ : cloned Relation.pm into the new D.pm, wherein I will try a different approach that is more struct+module like

[05:06] *** snowstalker joined
[05:10] <audreyt> obra: http://perlcabal.org/~audreyt/pdf/

[05:10] <lambdabot> Title: "Index of /~audreyt/pdf"

[05:31] <svnbot6> r11014 | audreyt++ | * more p6ast.hs

[05:34] <svnbot6> r11015 | clkao++ | v6.pm - Don't write to file when failed to compile.

[06:02] <clkao> audreyt: if else / for are taking block as well. :/

[06:02] <clkao> not sure where the block that used in assignment is matched from

[06:03] <clkao> it's not in exp

[06:06] *** xdg joined
[06:06] <svnbot6> r11016 | clkao++ | Parse foo().method correctly.  This makes 07-isa fail because it was

[06:06] <svnbot6> r11016 | clkao++ | not running the right thing.

[06:07] *** xdaveg joined
[06:36] *** penk joined
[06:39] <svnbot6> r11017 | sanug++ | Audrey's new Perl5 page

[06:39] <svnbot6> r11018 | clkao++ | * Implement pointy sub (without siganture).

[06:39] <svnbot6> r11018 | clkao++ | * Change param-binding to shift to support lexical subs when passed in

[06:39] <svnbot6> r11018 | clkao++ |   with Code.

[06:40] *** Aankhen`` joined
[06:46] <dduncan> ping mugwump

[06:58] *** iblechbot joined
[07:02] <svnbot6> r11019 | Darren_Duncan++ | ext/Relation/ : in a separate project branch which is 'D.pm', the Relation library is now composed entirely of immutable transparent data types defined as subsets of Str|Pair|Set|Mapping plus separate modules that declare operators for deriving other data from them

[07:03] <clkao> things left to make the compiled v6 test.pm actually compile under p5: &?CALLER::ROUTINE, named binding, multisub

[07:04] <clkao> and figure out how to map TEST:: namespace to the mangled one

[07:05] <dduncan> er, regarding D, the deriving operators haven't been written yet, but all the data types have been defined, along with all their constraints

[07:09] <dduncan> mugwump, when you have the chance, please look at the new D.pm code (its at the top, not pod-commented-out) ...

[07:09] <dduncan> when contemplating your Collection type, what you see in D.pm now should give you a better idea exactly what shapes I want to represent

[07:10] <dduncan> so if Collection would be flexible/capable enough to define such shapes, I know it will satisfy many needs

[07:29] *** renormalist joined
[07:31] *** renormalist joined
[07:32] <svnbot6> r11020 | Darren_Duncan++ | ext/Relation/ : oops, forgot a constraint def

[07:34] *** renormalist joined
[07:35] *** froh-doh joined
[07:40] <dduncan> note that if you want to see something that looks like what DBI's fetch_all_hash_ref() returns, the RelationBody type is nearly identical (it is a set of mappings rather than an array of hashes)

[07:42] *** tup joined
[07:47] <svnbot6> r11021 | clkao++ | TODO for making Test.pm work.

[07:50] <svnbot6> r11022 | clkao++ | ignore .tc files.

[07:50] <svnbot6> r11023 | clkao++ | Things to ignore.

[07:50] *** elmex joined
[08:01] *** takesako_ joined
[08:12] *** renormalist is now known as renormalist_

[08:17] *** dduncan left
[08:19] *** renormalist_ is now known as renormalist

[08:19] *** dfan` joined
[08:19] *** renormalist_ joined
[08:19] *** renormalist left
[08:20] *** renormalist joined
[08:31] *** tifo joined
[09:20] *** elmex joined
[09:29] *** cmarcelo joined
[09:51] *** marmic joined
[09:53] *** chris2 joined
[09:53] *** buetow joined
[09:56] *** lisppaste3 joined
[10:09] *** drbean joined
[10:18] <meppl> guten morgen

[10:24] <daxim> moin

[10:36] *** kane_ joined
[10:39] <Juerd> Someone (who wants to remain unnamed) proposed that feather be replaced by a professional server, so that compilation/testing of pugs and parrot would be much faster

[10:40] <Juerd> I've started doing some calculations today, and this would cost almost 2900 euros

[10:40] <Juerd> This would require a donation of approx 45 euros per user.

[10:40] <Juerd> I'd like to discuss this subject

[10:41] <Juerd> I don't know if people would be willing to donate; after all, most users do not actively use the machine, and it would still not be allowed to host personal non-perl6 projects on it.

[10:41] <meppl> good morning daxim

[10:41] <Juerd> On the other hand, it's a donation toward faster development of perl6 overall...

[10:42] <daxim> Juerd, you told me it would be easy to get a commit bit

[10:42] <daxim> well, I'm here now ;)

[10:42] <Juerd> daxim: It is.

[10:42] <Juerd> daxim: Ask!

[10:42] <daxim> please may I have one?

[10:42] <Juerd> I don't know exactly who can give you commit bits

[10:42] <Juerd> audreyt certainly can give you one.

[10:42] <Juerd> rafl too, IIRC

[10:42] <daxim> http://img314.imageshack.us/my.php?image=juerdautrijusrafl8ws.jpg

[10:42] <lambdabot> Title: "ImageShack - Hosting :: juerdautrijusrafl8ws.jpg"

[10:43] *** cdpruden joined
[10:43] <Juerd> heh

[10:44] <integral> I can, if you want, I need an email address (via privmsg)

[10:45] <Juerd> But then it's not logged for the spambots to enjoy!

[10:48] <integral> Okay, daxim, you should receive an invitation email shortly with details on accessing openfoundry.  Feel free to add yourself to AUTHORS when you start committing.

[10:48] <daxim> ok, email arrived already

[10:59] <integral> hmm, is there some core module that's been core since 5.5 that uses tied filehandles?

[11:03] <integral> err, wrong channel, sorry

[11:12] *** weinig|sleep is now known as weinig|work

[11:18] *** cognominal joined
[11:18] <svnbot6> r11024 | daxim++ | added myself

[11:25] *** lambdabot joined
[11:30] *** iblechbot joined
[11:30] <svnbot6> r11025 | daxim++ | clarified prerequisites for smoking

[11:37] *** cognominal joined
[11:56] *** mauke_ joined
[12:09] *** cognominal joined
[12:11] *** renormalist joined
[12:11] *** mauke_ is now known as mauke

[12:13] *** renormalist joined
[12:23] *** kcwu joined
[12:28] *** turrepurre joined
[12:37] *** fglock joined
[13:00] *** Limbic_Region joined
[13:04] *** xdg joined
[13:06] *** wilx joined
[13:10] *** mdiep joined
[13:20] *** lollan joined
[13:21] *** frederico joined
[13:21] * kolibrie departs for airport

[13:21] *** mandarin_ joined
[13:26] *** mandarin_ is now known as Qiang_Work

[13:43] <svnbot6> r11026 | fglock++ | v6.pm - more method call syntax

[13:43] <svnbot6> r11026 | fglock++ | moose-4.pl compiles

[13:52] *** chris2 joined
[14:03] *** hexmode joined
[14:07] *** cmcavoy joined
[14:18] *** buetow joined
[14:19] *** nothingmuch_ joined
[14:27] *** sproingie joined
[14:33] *** rzoz joined
[14:41] <sahadev> examples/rules/yapc_schedule.pl uses yapc_schedule.pm, which is not found. where is it available?

[14:43] <svnbot6> r11027 | fglock++ | v6.pm - clear 'deep recursion' message in grammar compilation

[14:46] *** theorbtwo joined
[14:54] *** xdg joined
[15:00] *** amnesiac joined
[15:04] <svnbot6> r11028 | fglock++ | v6.pm - all tests fixed; all Moose snippets compile.

[15:17] *** penk joined
[15:18] *** johan_ joined
[15:18] <audreyt> fglock++ # wow.

[15:19] <audreyt> sahadev: sorry it is inlined

[15:19] <audreyt> sahadev: remove the 'use' line and commit?

[15:19] <audreyt> (also it needs a copy of e.g. http://yapcchicago.org/the-schedule/wednesday)

[15:19] <lambdabot> Title: "YAPC::NA 2006 &raquo; Wednesday"

[15:20] *** frederico joined
[15:27] *** nothingmuch joined
[15:44] *** ajs joined
[15:45] * clkao found a svk bug while merging the PC-P6 change to pX/clkao

[15:46] <audreyt> svk sucks!

[15:46] <audreyt> maybe it should be renamed to svck

[15:46] <audreyt> or suk

[15:47] <clkao> module::install--

[15:47] <clkao> Can't locate inc/Module/Install/Admin.pm in @INC (@INC contains: inc ../.. ../../inc /usr/local/lib/perl5/5.8.8/BSDPAN /usr/local/lib/perl5/site_perl/5.8.8/mach /usr/local/lib/perl5/site_perl/5.8.8 /usr/local/lib/perl5/site_perl /usr/local/lib/perl5/5.8.8/mach /usr/local/lib/perl5/5.8.8 .) at /usr/local/lib/perl5/site_perl/5.8.8/Module/Install.pm line 100.

[15:47] <audreyt> surely you killed inc/?

[15:47] <clkao> there's no inc/ to start with

[15:48] <audreyt> you used Module::Install::Admin?

[15:48] <audreyt> why are you doing it?

[15:49] <clkao> i didn't

[15:49] <clkao> can you run makefile.pl under misc/pX/clkao/Pugs-Compiler-Perl6 ?

[15:49] <clkao> running it removes inc

[15:49] <clkao> i don't know why

[15:50] <clkao> bah, the inc path in makefile.pl

[15:50] <clkao> audreyt: also the commit-inter-* tests are noisy no

[15:50] <clkao> now

[15:51] <audreyt> what's commit-inter-*

[15:52] <clkao> audreyt: svk's tests

[15:52] <svnbot6> r11029 | clkao++ | Correct inc when in pX.

[15:56] *** aufrank joined
[16:02] *** coumbes joined
[16:08] <svnbot6> r11030 | clkao++ | pull from perl5/Pugs-Compiler-Perl6.

[16:09] *** justatheory joined
[16:13] *** EarleMartin joined
[16:17] *** iblechbot joined
[16:28] *** fglock joined
[16:28] <audreyt> fglock: hi

[16:29] <fglock> audreyt: hi! how's the hackathon?

[16:29] <audreyt> going very well!

[16:29] <audreyt> diagrams!

[16:29] <audreyt> and finally detailed fields of P6AST!

[16:29] <audreyt> got clkao into Yapp hacking :)

[16:29] <fglock> great - I need that!

[16:29] <audreyt> yes, I recognize that :)

[16:30] <fglock> yup - I saw the commits

[16:30] <audreyt> fglock: can you compile "sub foo($x) {}; sub bar($x) {}" ?

[16:30] <audreyt> (that was from clkao)

[16:30] <fglock> btw, I silenced a Deep recursion in Parse::Yapp - it seems to not be a problem

[16:30] <fglock> checking

[16:31] <clkao> networkg being very unsable

[16:32] <clkao> it fails on the second one for me

[16:33] <fglock> clkao: maybe empty blocks are not defined - I will check

[16:33] <clkao> fglock: ah, it seems so. also "..."

[16:34] <fglock> I could not make '...' work, but I don't know what is the problem yet

[16:35] <fglock> I think it must be classified as 'NUM' by the lexer

[16:35] <clkao> ah!

[16:40] <clkao> fglock: can you help looking at my parser in px/clkao? my signature can't capture no invocant and with one parameter

[16:40] <svnbot6> r11031 | fglock++ | v6.pm - added empty-blocks - " sub foo($x) {}; sub bar($x) {} " - reported by clkao++

[16:40] <fglock> looking

[16:42] <clkao> in fact i can't capture any parameter without invocant. but it works when there's none of both

[16:42] <svnbot6> r11032 | clkao++ | misc emitted syntax fixes.

[16:43] <fglock> I've got a very slow computer here (tc1000 tablet) - should be 1GHz but feels like 200Mhz

[16:51] *** fglock_ joined
[16:54] *** fglock_ joined
[16:55] <fglock_> rehi - recovering from frozen computer

[16:55] <clkao> fglock: did the parser kill your network as well? ;)

[16:56] <fglock_> network, mouse & keyboard. but the screen was fine

[17:02] <fglock_> is it allowed to have more than one invocant?

[17:03] <fglock_> clkao: is there a comma between the invocant and other parameters?

[17:05] <clkao> fglock_: no, it should be invocant ':'

[17:10] <fglock_> clkao: sorry, things are real slow here - no answer yet

[17:11] <clkao> ok. fyi, just compile "sub bar1 ($z: $y,$x) { "ok" };sub bar2 ($y,$x) { "ok" };" and you'll see

[17:19] *** penk joined
[17:28] *** coumbes joined
[17:28] <fglock_> clkao: I've got something that seems to work - will paste

[17:30] <fglock_> http://sial.org/pbot/18114

[17:30] <lambdabot> Title: "Paste #18114 from "fglock" at 201.35.169.13"

[17:32] *** frederico joined
[17:34] *** Debolaz2 joined
[17:39] <fglock_> clkao: I'll commit

[17:40] <svnbot6> r11033 | fglock++ | v6.pm - parses ( $invocant: )

[17:46] *** fglock_ left
[17:46] *** fglock joined
[17:48] *** ludan joined
[17:49] *** coumbes joined
[17:56] *** coumbes joined
[17:58] <fglock> clkao: ping

[17:59] *** ruoso joined
[18:06] *** nothingmuch joined
[18:10] *** clkao joined
[18:10] <clkao> i think i hate everything today

[18:12] <audreyt> clkao: but everything has been refactored by chromatic

[18:12] <audreyt> it should be less hateful

[18:17] <fglock> I wonder what you are talking about

[18:19] <clkao> audreyt: you mean everything2.com ?

[18:21] <fglock> audreyt: v6.pm could be rewritten in p6

[18:21] <clkao> i thought about that yesterday ;)

[18:23] <audreyt> fglock: yeah that was part of the plan when I was in Vienna

[18:23] <audreyt> but that makes debugging... more fun

[18:23] <audreyt> up to you

[18:25] <clkao> fglock: oh you fixed that. but i was more wondering about why my version didn't work.

[18:25] <fglock> there are no tweaks to do in the Makefile, right?

[18:25] <fglock> clkao: I don't know too :)

[18:27] *** Debolaz joined
[18:29] <fglock> would someone sanity-check the compiled Moose files in perl5/Pugs-Compiler-Perl6?

[18:29] <fglock> I'll start moving them to t/

[18:34] <fglock> can I say 'module Main;' to finish a class declaration in p6?

[18:34] <audreyt> if you started the file with

[18:35] <fglock> or does it mean 'module MyClass::Main'

[18:35] <audreyt> class Foo;

[18:35] <audreyt> then that scopes over entire file

[18:35] <fglock> so I have to use class Foo { ... } main...

[18:39] <audreyt> yup

[18:41] <fglock> use lib ('.'); - same syntax in p6?

[18:43] <Juerd> fglock: AFAIK, but note that the parens are neither necessary nor part of the syntax.

[18:43] <Juerd> (For both perls)

[18:44] <audreyt> yup

[18:44] <fglock> k

[18:47] *** tup joined
[18:48] *** ruz joined
[18:52] <svnbot6> r11034 | fglock++ | v6.pm - added first Moose test

[18:53] <fglock> yay! a program in p6   a module in p6

[18:53] <audreyt> woot!

[18:54] <audreyt> fglock++

[18:54] <audreyt> (bbiab)

[18:58] <svnbot6> r11036 | audreyt++ | * perl5

[18:59] <fglock> perl5?

[19:01] *** shachaf joined
[19:02] <Limbic_Region> fglock - she's reinventing wheels ;-)

[19:03] <ruoso> fglock, I'm a bit away lately... where is this last stuff you're doing... I'd like to test it...

[19:09] <fglock> ruoso: see http://use.perl.org/~fglock/

[19:09] <lambdabot> Title: "fglock - use Perl User"

[19:10] <fglock> it is in CPAN - 'install v6'

[19:10] <fglock> or perl5/Pugs-Compiler-Perl6/

[19:11] <fglock> the CPAN version doesn't have OO yet

[19:12] <fglock> it's a complete rewrite of lrep - only the Rules grammar was reused

[19:14] <fglock> audreyt: I'm shy to write to pugs.blogs.com - too many people reading there :)

[19:16] <ruoso> fglock++... the generated code is incredibly beatiful...

[19:16] <svnbot6> r11037 | sanug++ | Allison Randal added Punie and Tree Grammar Compilation.

[19:16] <svnbot6> r11037 | sanug++ | Audrey Tang added Ponie.

[19:18] <fglock> ruoso: thanks! this is the 3rd rewrite, counting last years's pil-run

[19:21] <fglock> ruoso: http://perlcabal.org/~audreyt/pdf/perl6_compilation-perl5.pdf

[19:22] <TreyHarris> larry's most recent S02 change appears to be just of the version number?  or am i missing something?

[19:24] <TreyHarris> oh, i just noticed the summary was "forgot to add versions" *sheepish*

[19:24] * ruoso just happy to see all of that...

[19:24] * ruoso sad for not having time to take part on it...

[19:26] <fglock> ruoso: I don't have time either :)

[19:29] *** arguile joined
[19:34] *** clkao joined
[19:34] *** Steve_p joined
[19:35] <Steve_p> Where might I find the most up to date info on smart matching?

[19:37] <TimToady> Steve_p: S03

[19:38] <Steve_p> TimToady: thanks!

[19:41] *** Yaakov joined
[19:42] <fglock> TimToady, audreyt, pmichaud: thanks for the patience in the last few months to explain the compiler to me

[19:43] *** weinig|work joined
[19:44] *** weinig|work is now known as weinig

[19:44] *** frederico joined
[19:46] *** xdg joined
[19:47] *** jamhed joined
[19:48] <clkao> fglock: now you get to explain them to me ;)

[19:48] <Steve_p> heh

[19:49] <clkao> fglock: you saw my todo update about test.pm right?

[19:49] <clkao> want to finish up the capture parsing? then i can work on the emitter for calling with data::bind at the same time

[19:49] <fglock> clkao: :) - checking

[19:50] <fglock> clkao: what's missing in the capture?

[19:51] <svnbot6> r11038 | fglock++ | v6.pm - added a failing test to t/10-moose1.t

[19:51] <clkao> it's not parsed is it?

[19:51] *** dduncan joined
[19:52] <clkao> also CALLER::

[19:53] <fglock> clkao: would you write some p6/ast/p5 examples in the TODO? this helps a lot to understand what I'm doing :)

[19:53] *** Debolaz2 joined
[19:54] <clkao> sure.

[19:54] *** frederico joined
[19:54] <fglock> thanks

[19:55] <clkao> how to do things like caller(4) rather than CALLER::CALLER::CALLER::CALLER::.. ?

[19:56] *** pmurias joined
[19:57] <fglock> clkao: maybe caller(4) works - pugs doesn't return an error for caller()

[19:58] <pmurias> hi, how will one define custom type systems, and what is the default one with 'use static'?

[19:59] * pmurias is reading TaPL

[20:00] <nothingmuch> Juerd: ping

[20:01] <nothingmuch> Juerd is een aardig heren.  Hij is ook mooi ;)

[20:01] <nothingmuch> is that a compliment?

[20:02] <fglock> nothingmuch: would you sanity check v6 Moose output when you have time?

[20:03] <nothingmuch> fglock: yes, i think i'll probably look at it before dinner tonight

[20:03] <fglock> thanks!

[20:08] <clkao> fglock: 11-capture on the way

[20:08] <svnbot6> r11039 | clkao++ | simple tests for binding / capture.

[20:08] <nothingmuch> clkao: have you played with Perl::Generate yet?

[20:08] <clkao> nothingmuch: not yet, i don't have darcs

[20:08] <clkao> (i am lying)

[20:08] <nothingmuch> wget -r

[20:08] <nothingmuch> ;-)

[20:08] <clkao> where again?

[20:08] <nothingmuch> i can cook up a tarball

[20:08] <clkao> url

[20:09] <nothingmuch> http://nothingmuch.woobling.org/Perl-Generate/

[20:09] <lambdabot> Title: "Index of /Perl-Generate"

[20:09] <nothingmuch> =)

[20:09] <clkao> it's not a real module

[20:09] <Juerd> nothingmuch: It's broken syntax :)

[20:09] <clkao> use ok "Perl::Generate::AST::Node::Var::Scalar";

[20:09] <clkao> you mean use_ok ?

[20:09] <Juerd> nothingmuch: Though I think it's nice what you said. Do you know hwat you said?

[20:09] <miyagawa> ok.pm

[20:10] <nothingmuch> Juerd: yes, i was told it was explicitly obfuscated to not share words with english

[20:11] <nothingmuch> clkao: it's BEGIN { use_ok } without the nasty syntax

[20:11] <nothingmuch> audreyt++

[20:11] <Juerd> nothingmuch: What do you mean, "share words"?

[20:11] <clkao> it doesn't work for me

[20:11] <nothingmuch> clkao: you need to install it =)

[20:11] <nothingmuch> Juerd: well, like heren etc

[20:11] <clkao> ah.

[20:11] <svnbot6> r11040 | audreyt++ | * inlien the "use" on yapc_schedule

[20:12] <clkao> get a real makefile.pl

[20:12] <Juerd> nothingmuch: Which is plural...

[20:12] <nothingmuch> Juerd: well, it's not my fault =)

[20:13] <nothingmuch> it was composed by the dutch speaker next to me

[20:13] <nothingmuch> who was trying to see if i can guess my way around dutch

[20:13] <fglock> nothingmuch: are you following p6ast.hs format?

[20:13] <Juerd> nothingmuch: Some Dutch speaker...

[20:13] <nothingmuch> fglock: barely

[20:14] <nothingmuch> she says that she was deliberately making it bad, so i won't deduct her karma points ;-)

[20:14] <Juerd> nothingmuch: If you want to guess... dan ga ik toch gewoon Nederlands tegen je lullen? Makkelijk zat, dan ontdekken we snel genoeg of je er wat van snapt :)

[20:14] <nothingmuch> since i failed the "easy" test...

[20:15] <fglock> nothingmuch: if we both follow p6ast, we should be able to talk to each other (without cheating, I mean)

[20:15] <nothingmuch> fglock: okay =)

[20:15] <nothingmuch> Juerd: she says that you just insulted us

[20:15] <clkao> nothingmuch: should it be renamed to Perl5::Generate?

[20:15] <nothingmuch> clkao: uh

[20:15] <nothingmuch> maybe

[20:15] <Juerd> nothingmuch: She's lying.

[20:16] <clkao> also things are too long to type!

[20:16] <nothingmuch> something about finding out if we actually understand it soon enough

[20:16] <nothingmuch> clkao: Perl::Generate and t/99_easy.t

[20:16] <fglock> how about Pugs::Emit::P6AST::Perl5 - this is more or less the convention we are following in the Pugs:: namespace, I think

[20:16] <fglock> ::Emit-from-to

[20:16] <Juerd> nothingmuch: The thing is, it's hard to translate.

[20:17] <nothingmuch> well, remember that it is not pugs specific

[20:17] <nothingmuch> we need it for Moose

[20:17] <Juerd> nothingmuch: It's something like "Then how about I just talk Dutch to you? Easy enough, and we'll discover soon enough if you understand anything of it"

[20:17] <nothingmuch> ah

[20:17] <Juerd> The funny thing is "lullen", which is informal and bad slang for "talk", but can also translate as penises.

[20:17] <nothingmuch> oh

[20:18] <nothingmuch> that's the part she thought was insulting

[20:18] <Juerd> nothingmuch: That's the turing test for "Dutch speakers"

[20:18] <Juerd> She failed :)

[20:18] <nothingmuch> heh

[20:18] <nothingmuch> i'll let her know =)

[20:19] <nothingmuch> well, clkao is

[20:19] <nothingmuch> (she went away by now)

[20:19] <Juerd> Only context (position in the sentence: verb versus noun) can tell which lullen it is.

[20:20] <nothingmuch> that's a pretty evil language then

[20:20] <Juerd> "vliegen" means both "flies"(plural noun) and "fly"(plural verb)

[20:20] <svnbot6> r11041 | audreyt++ | * p6ast - thru to exp

[20:20] <Juerd> "als achter vliegen vliegen vliegen, vliegen vliegen vliegen achterna"

[20:20] <Juerd> Which is more or less: if flies fly behind flies, then flies are in pursuit of flies.

[20:21] <Juerd> Highly contrived, but anyone'll understand it

[20:21] <nothingmuch> =)

[20:22] <nothingmuch> well, to her credit we can say that she is not a native dutch speaker

[20:23] <nothingmuch> anyway, i think i'm going to go for a walk, and then maybe my brain will start working

[20:23] <Juerd> Heh

[20:34] *** lisppaste3 joined
[20:43] *** kane_ joined
[20:47] <svnbot6> r11042 | pmurias++ | the implementation of ruby style quoting in perl5 eq. #{$var} and #{expr}

[20:47] <svnbot6> r11042 | pmurias++ | will add Devel::LexAlias support for #{expr},and better parsing of nested {} later

[20:49] <pmurias> fglock: wrote a basic implementation of ruby style quoting

[20:49] <fglock> pmurias: looking

[20:50] <fglock> pmurias: btw, nothingmuch is writing a new emitter - see http://nothingmuch.woobling.org/Perl-Generate/

[20:50] <lambdabot> Title: "Index of /Perl-Generate"

[20:50] <pmurias> seen it

[20:50] <jabbot> pmurias: I havn't seen it, pmurias

[20:50] <fglock> :)

[20:53] <fglock> pmurias: cool

[20:57] <pmurias> it could be turned into a paraquasiquote, using PPI for syntax checking, automatic Perl-Generate and PPI ast stringification etc.

[20:57] <pmurias> i'll do some assorted reading and sleeping now

[20:57] <pmurias> g'night

[21:01] <fglock> 1 result in google for 'paraquasiquote'

[21:10] <fglock> clkao: the parse looks right in t/11-capture.t, except for :a<foo>, which it thinks is a call

[21:11] <fglock> it should pair('a','foo'), right?

[21:17] *** JimKraj joined
[21:17] <svnbot6> r11043 | fglock++ | v6.pm - Grammar/Term - fixed pair syntax

[21:22] *** coumbes joined
[21:22] <svnbot6> r11044 | fglock++ | v6.pm - t/11-capture.t cleanup

[21:25] <svnbot6> r11045 | fglock++ | v6.pm - TODO update

[21:26] *** JimKraj joined
[21:27] *** fglock left
[21:36] *** putter joined
[21:36] *** fglock joined
[21:37] <fglock> putter: hi!

[21:37] <putter> I'm about to send of an email, attempting to take some advantage of the Boston hackathon occurring in a city with a Perl Mongers.  Like a talk(s), or a social.

[21:37] <putter> Hi fglock :)

[21:38] <putter> But I have little idea who is going to be in Boston.  Anyone have any ideas?

[21:39] <fglock> I'm far far away ...

[21:39] <putter> :)

[21:40] <fglock> putter: did you see the v6.pm news? it's running small programs :)

[21:40] *** Entonian joined
[21:41] <putter> Neat!

[21:44] <putter> could someone msg me an email address for audreyt?  tnx...

[21:44] <putter> bloody spammers... :(

[21:45] <fglock> (audreyt) at $1 dot org

[21:46] <fglock> later &

[21:47] <putter> thanks :)

[21:47] *** fglock left
[21:49] *** Limbic_Region joined
[21:56] *** JimKraj left
[21:57] *** iblechbot joined
[22:04] <nothingmuch> where might one find a table of operator precedence for perl 5

[22:04] <nothingmuch> (as code not docs)

[22:07] <nothingmuch> B::Deparse has them inlined in the subs =(

[22:23] <putter> toke.c?

[22:24] <putter> (having no idea, but quickly greping a 5.9 tree)

[22:25] <putter> and ext/B/B/Deparse.pm

[22:27] <putter> Deparse has an actual table :)

[22:29] <putter> &

[22:29] *** putter left
[22:33] <clkao> in yapp, can I tell which rule in the current state took my token?

[22:35] * kolibrie made it home safely

[22:36] <kolibrie> stevan: no flooding at my house

[22:36] <kolibrie> nothingmuch: there is one picture I did not manage to take, could you take it for me?

[22:37] <kolibrie> in the SSV stairwell, on the third floor, looking towards the tunnel around the elevated tracks

[22:38] * kolibrie returns to being with his wife and children after a week away

[22:42] <nothingmuch> kolibrie: yay!

[22:42] <nothingmuch> center building?

[22:52] *** xdg joined
[22:58] <TreyHarris> TimToady: fyi, your last edit to S05 misspelled "grammar" as "gramma"

[22:58] <svnbot6> r11046 | Sage++ | <FH> now translates to $FH.readline. However, open() doesn't translate yet, so it's a bit out of place.

[23:04] *** theorbtwo joined
[23:05] *** Bit-Man joined
[23:11] *** ben joined
[23:17] *** ludan joined
[23:32] <pasteling> "sanug" at 216.47.133.123 pasted "Working with chromatic on new diagram for PHEME - not posted yet" (1 line, 62B) at http://sial.org/pbot/18126

[23:43] *** coumbes joined
[23:51] *** xdg joined
[23:58] *** weinig is now known as weinig|bbl

