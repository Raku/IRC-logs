[00:32] *** sweinig|food is now known as sweinig

[00:44] *** svnbot6 joined
[00:44] *** evalbot_r14758 joined
[00:56] *** mako132_ joined
[00:57] *** lyokato joined
[01:14] *** scw joined
[01:16] *** kanru joined
[01:20] *** duend joined
[01:23] *** dmq joined
[01:31] *** fayland joined
[01:38] *** eggzeck[laptop] is now known as eggzeck

[01:46] *** rodi joined
[01:54] *** sweinig is now known as sweinig|zZz

[01:55] *** nipotaway is now known as nipotan

[02:10] *** Alias_ joined
[02:24] *** vel joined
[03:03] *** H0LE joined
[03:16] *** penk joined
[03:16] *** dduncan joined
[03:18] <dduncan> So, in regards to the weekly list summaries, I'm going to bet that Larry's last statement in the ordinal operators thread will make the quotable quote introduction: "You guys should read The Search for the Perfect Language, by Umberto Eco. It would disabuse you of the notion that perfect orthogonality is possible or even desirable."

[03:19] *** AzureBOT joined
[03:21] <dduncan> TimToady, were you implying that you don't like the proposal to rename operators to [ == , +== , ~== ] then?  Or did you just dislike some of the other stuff discussed in the thread?

[03:22] *** kanru joined
[03:45] *** nicodaemos_ joined
[03:58] *** awwaiid joined
[04:00] <svnbot6> r14759 | gnuvince++ | Added cases to t/operators/assign.t to test for skipped values in list

[04:00] <svnbot6> r14759 | gnuvince++ | assignment.  The equivalent of Perl 5's my ($foo, undef, $bar)

[04:01] *** avar changes topic to: svn switch --relocate http://svn.openfoundry.org/pugs http://svn.pugscode.org/pugs/ | run.pugscode.org | spec.pugscode.org | paste: http://sial.org/pbot/perl6 | pugs.blogs.com |

[04:01] *** avar changes topic to: svn switch --relocate http://svn.openfoundry.org/pugs http://svn.pugscode.org/pugs/ | run.pugscode.org | spec.pugscode.org | paste: http://sial.org/pbot/perl6 | pugs.blogs.com

[04:01] <avar> the commitbot is up!

[04:19] *** stevan_ joined
[04:22] *** penk joined
[04:24] *** scw_ joined
[04:41] *** Southen joined
[04:41] *** clkao joined
[04:41] *** obra joined
[04:41] *** tewk joined
[04:41] *** avar joined
[04:42] *** TreyHarris joined
[04:42] *** mr_ank joined
[04:42] *** BooK joined
[04:43] *** jrigby joined
[04:43] *** nothingmuch joined
[04:44] *** bennymack joined
[04:44] *** jrockway joined
[04:44] *** qmole joined
[04:44] *** Patterner joined
[04:44] *** penk joined
[04:44] *** stevan_ joined
[04:44] *** awwaiid joined
[04:44] *** nicodaemos_ joined
[04:44] *** dduncan joined
[04:44] *** Alias_ joined
[04:44] *** rodi joined
[04:44] *** fayland joined
[04:44] *** dmq joined
[04:44] *** evalbot_r14758 joined
[04:44] *** svnbot6 joined
[04:44] *** lambdabot joined
[04:44] *** bsb joined
[04:44] *** Aankhen`` joined
[04:44] *** gnuvince joined
[04:44] *** mugwump joined
[04:44] *** thepler_ joined
[04:44] *** buubot joined
[04:44] *** buu joined
[04:44] *** frankg joined
[04:44] *** dbrock joined
[04:44] *** ofer0 joined
[04:44] *** Kattana joined
[04:44] *** nekokak__ joined
[04:44] *** ruz joined
[04:44] *** integral joined
[04:44] *** mako132 joined
[04:44] *** sweinig|zZz joined
[04:44] *** webmind joined
[04:44] *** pmichaud_ joined
[04:44] *** plural joined
[04:44] *** leo_ joined
[04:44] *** chip joined
[04:44] *** Juerd joined
[04:44] *** audreyt joined
[04:44] *** wolverian joined
[04:44] *** lde joined
[04:44] *** xinming joined
[04:44] *** eviltwin_b joined
[04:44] *** spo0nman joined
[04:44] *** f0rth joined
[04:44] *** miyagawa_ joined
[04:44] *** lumi_ joined
[04:44] *** puddingpimp_work joined
[04:44] *** perlbot joined
[04:44] *** mdiep joined
[04:44] *** araujo joined
[04:44] *** PerlJam joined
[04:44] *** pdcawley joined
[04:44] *** TimToady joined
[04:44] *** ashleyb joined
[04:44] *** norageek joined
[04:44] *** [particle] joined
[04:44] *** sjn joined
[04:44] *** idiotmax joined
[04:44] *** kane-xs joined
[04:44] *** gantrixx joined
[04:44] *** scsibug joined
[04:44] *** Odin- joined
[04:44] *** wilx joined
[04:44] *** revdiablo joined
[04:44] *** meppl joined
[04:44] *** takesako joined
[04:44] *** takanori_ joined
[04:44] *** cognominal joined
[04:44] *** hcchien joined
[04:44] *** tcliou joined
[04:44] *** kalven joined
[04:44] *** jiing joined
[04:44] *** Yappo joined
[04:44] *** rafl joined
[04:44] *** nine joined
[04:44] *** Ikarus joined
[04:44] *** nipotan joined
[04:44] *** kolibrie joined
[04:44] *** pnu joined
[04:44] *** Maddingue joined
[04:44] *** Shabble joined
[04:44] *** gaal joined
[04:44] *** broquaint joined
[04:44] *** nnunley joined
[04:44] *** kcwu joined
[04:44] *** rafl_ joined
[04:44] *** cj joined
[04:44] *** kane-xs_ joined
[04:44] *** orafu joined
[04:44] *** Debolaz joined
[04:44] *** sri joined
[04:44] *** rgs joined
[04:44] *** knewt joined
[04:44] *** spinclad joined
[04:44] *** GeJ joined
[04:44] *** Grrrr joined
[04:44] *** cmeyer joined
[04:44] *** LCamel joined
[04:44] *** cookys joined
[04:44] *** masak joined
[04:44] *** dvorak joined
[04:44] *** prism joined
[04:44] *** beppu_ joined
[04:44] *** buu joined
[04:45] *** baest joined
[04:45] *** Daveman joined
[04:49] *** amv joined
[04:53] *** seano joined
[05:20] *** fayland joined
[05:26] *** baest joined
[05:46] *** klausen joined
[05:47] *** H0LE joined
[05:49] *** klausen left
[06:04] *** awwaiid joined
[06:15] *** BooK joined
[06:17] *** iblechbot joined
[06:21] *** buetow joined
[06:32] *** Khisanth joined
[06:33] *** Grrrr joined
[06:44] *** drrho joined
[07:00] *** fayland_ joined
[07:06] <masak> print unless (state $)++;

[07:06] <masak> is this equal to print; ?

[07:27] *** marmic joined
[07:49] <gaal> @moose

[07:49] <lambdabot> Maybe you meant: choose more

[07:49] <gaal> @moosages

[07:49] <lambdabot> nothingmuch said 9h 45m 18s ago: i'm off to sleep now, i'll do it first thing in the morning

[07:49] <lambdabot> nothingmuch said 9h 44m 45s ago: btw, i have more maint work so this fits in (cookiecutter, etc). in short, don't bother

[08:03] *** nipotan is now known as nipotaway

[08:20] *** duend is now known as duend`sleeping

[08:32] *** zakharyas joined
[08:36] *** root4o joined
[08:37] <root4o> just watching this : http://video.google.com/videoplay?docid=8566923311315412414&q=programming

[08:37] <lambdabot> Title: Aspect Oriented Programming: Radical Research in Modularity - Google Video, http://tinyurl.com/y86nhh

[08:37] <root4o> with perl6 we will have similar stuff right ?

[08:38] <root4o> after, before ...and things similar to that mentioned int the video...poincuts and jointpoints ?

[08:39] <root4o> I mean Roles cover this ? right ?

[08:40] <root4o> i mean aspect oriented programming

[08:40] <Alias_> We can do that to a degree now

[08:41] <Alias_> Things like Hook::LexWrap let you insert the hooks on the fly

[08:48] <root4o> what about perl6 ..?

[08:49] <Alias_> not sure, but I imagine people would hate to lose features :)

[08:49] <Alias_> So my bet would be yes :)

[08:50] <root4o> :)

[08:50] <root4o> me too ..but asking here.. to be sure

[08:50] *** nipotaway is now known as nipotan

[08:51] *** BooK_ joined
[09:17] *** root4o left
[09:22] *** Lorn joined
[09:23] *** ron_ joined
[09:23] *** elmex joined
[09:26] *** ron_ joined
[09:37] *** andara joined
[10:17] *** Kattana joined
[10:17] *** ludan joined
[10:25] *** wolverian_ joined
[10:29] <nothingmuch> @pl map (\f -> f x)

[10:29] <lambdabot> map ($ x)

[10:40] *** lumi_ is now known as lumi

[10:46] *** ludan joined
[10:47] <ludan> hi

[10:50] *** buetow joined
[10:55] *** SamB joined
[10:56] <nothingmuch> gaal: /scrollback end

[10:56] * nothingmuch had 4 days of unscrolled #haskell ;-)

[11:03] *** nipotan is now known as nipotaway

[11:03] <svnbot6> r14760 | fglock++ | v6.pm - allow non-modifiable params in "token"

[11:07] *** fglock joined
[11:09] <svnbot6> r14761 | fglock++ | MP6 - fixed perl5 runtime; implemented built-in tokens like <ident>

[11:10] *** pjcj joined
[11:12] *** kanru joined
[11:12] <fglock> [OT] anyone from TPF around? re: redirect 'www.yapc.org/SA' to 'yapc.perl.org.br'

[11:14] *** mj41 joined
[11:40] *** eggzeck joined
[11:42] *** eggzeck joined
[11:48] <gaal> nothingmuch: excellent, thanks

[11:48] *** ofer1 joined
[12:06] *** mj41_ joined
[12:11] *** kane-xs_ left
[12:14] *** chris2 joined
[12:20] *** Psyche^ joined
[12:23] *** boo__ is now known as boo_

[12:28] *** gaal_ joined
[12:30] *** H0LE joined
[12:30] *** gaal_ is now known as gaal

[12:32] *** dduncan left
[12:36] *** Psyche^ is now known as Patterner

[12:37] *** baest joined
[12:46] <svnbot6> r14762 | fglock++ | MP6 - implemented postcircumfix:<( )> method, as in '$obj.()'

[13:06] *** Limbic_Region joined
[13:07] * dmq looks in

[13:07] *** anatolyv joined
[13:08] *** Psyche^ joined
[13:25] *** Psyche^ is now known as Patterner

[13:28] *** capixaba joined
[13:33] *** gene9 joined
[13:39] <cognominal>  I can't see why I am wrong here: $_ = "token a"; s :s :g /(token (\w+))/a name="$1">$0<\/a>/; say $_;

[13:39] <cognominal> I would expect a sucessful substition

[13:40] <cognominal> ..substitution!

[13:42] *** GnuVince joined
[13:46] *** HiTech69 joined
[13:50] *** bonesss joined
[13:52] <kolibrie> cognominal: regex captures nest, so you have $0 (token a) and $0[0] (a), but no $1

[13:55] <Limbic_Region> kolibrie - and presumably things "nest" from left to right?  /( () () ( () ) )( )/ so there is a $0 and a $1, $0 has 3 elements, and the 3rd element of $0 has 1 element the other 2 0?

[13:56] *** iblechbot joined
[13:58] <kolibrie> Limbic_Region: that is how I understand things

[13:59] <Limbic_Region> oh, very nice

[13:59] <cognominal> well, that does not explain the non-substitution

[13:59] <Limbic_Region> cognomial - except that there is no $1

[13:59] <Limbic_Region> or rather - aside from the fact there is no $1

[14:00] <cognominal> I am not yet at the problem of a wrong substitution, I am at the problem of no substittion

[14:01] <cognominal> your are right about nesting though

[14:01] <Limbic_Region> ?eval temp $_ = "token a"; s/(token (\w+))/foo/; say $_;

[14:01] *** evalbot_r14758 is now known as evalbot_r14762

[14:01] <evalbot_r14762> OUTPUT[token a␤] Bool::True

[14:01] <Limbic_Region> ?eval temp $_ is rw = "token a"; s/(token (\w+))/foo/; say $_;

[14:01] <evalbot_r14762> OUTPUT[token a␤] Bool::True

[14:02] <Limbic_Region> ?eval temp $_ is rw = "token a"; .s/(token (\w+))/foo/; say $_;

[14:02] <evalbot_r14762> Error: ␤Unexpected "(\\"␤expecting ":" or "{"

[14:02] <Limbic_Region> ?eval temp $_ is rw = "token a"; $_ =~ s/(token (\w+))/foo/; say $_;

[14:02] <evalbot_r14762> OUTPUT[<Subst>␤] Bool::True

[14:02] <Limbic_Region> cognomial - AFAIK, in order to get methods that normally work on $_ to work on them in Perl 6, they need to be prefaced with a .

[14:02] <Limbic_Region> as in

[14:02] <Limbic_Region> .chomp

[14:03] <Limbic_Region> it appears that s/// is not working on $_ by default

[14:03] * Limbic_Region doesn't know if that is correct behavior or not

[14:03] * Limbic_Region wanders off to get a chocolate covered donut

[14:03] *** H0LE left
[14:03] <kolibrie> ?eval $_ = "token a"; s :s /token a/foo/; say $_

[14:03] <cognominal> I doubt that,  s  :g /\&/&amp;/;    works fine

[14:03] <evalbot_r14762> OUTPUT[token a␤] Bool::True

[14:04] * cognominal thinks he need to work more incrementally. my perl5 expertise does not translate readily hre

[14:05] <kolibrie> does look like substitution is having issues, at least in evalbot

[14:07] <Limbic_Region> ?eval temp $_ = "token a"; s/.*/foo/; say $_;

[14:07] <evalbot_r14762> OUTPUT[foo␤] Bool::True

[14:07] <Limbic_Region> the match portion of the regex is failing

[14:07] <Limbic_Region> you should put it in a conditional

[14:08] <Limbic_Region> ?eval temp $_ = "token a"; if ( /token (\w+)/ ) { say "match" } else { say "no match" }

[14:08] <evalbot_r14762> OUTPUT[no match␤] Bool::True

[14:08] <Limbic_Region> ?eval temp $_ = "token a"; if ( /token\s+(\w+)/ ) { say "match" } else { say "no match" }

[14:08] <evalbot_r14762> OUTPUT[match␤] Bool::True

[14:08] <Limbic_Region> it is barfing on the whitespace

[14:09] <Limbic_Region> ?eval temp $_  = "token a"; $_ =~ s/(token\s+(\w+))/a name="$0[0]">$0<\/a>/; say $_;

[14:09] <evalbot_r14762> OUTPUT[<Subst>␤] Bool::True

[14:10] <Limbic_Region> whatever - the issue is the whitespace and not the replacement

[14:10] <kolibrie> ?eval $_ = 'token a'; s :s /token <ws> a/foo/; say $_;

[14:10] <evalbot_r14762> OUTPUT[foo␤] Bool::True

[14:10] <kolibrie> so it's not picking up the :s

[14:11] <Limbic_Region> sounds like it should be a failing test case

[14:11] * Limbic_Region wanders off for some more donuts

[14:12] <cognominal> ?eval my $_ = "token a"; s/token\s+(\w)/<a name=$0">token $0<\/a>/; say $_

[14:12] <evalbot_r14762> OUTPUT[<a name=a">token ␤] Bool::True

[14:12] <cognominal> another problem here

[14:13] <kolibrie> that is interesting

[14:13] *** elmex joined
[14:15] *** rodi joined
[14:16] <cognominal> this is fucking frustrating

[14:16] <cognominal> oops, this is not #perl    :)

[14:21] <cognominal>  ?eval my $_ = "token a"; s/token\s+(\w)/<a name=$0">token $0\<\/a>/; say $_

[14:21] <cognominal> ?eval my $_ = "token a"; s/token\s+(\w)/<a name=$0">token $0\<\/a>/; say $_

[14:21] <evalbot_r14762> OUTPUT[<a name=a">token a</a>␤] Bool::True

[14:22] <cognominal> I think by default using an non existing capture should emit a warning

[14:23] <cognominal> this will happen all the time when dealing with html

[14:23] <Limbic_Region> cognomial - not sure but perhaps you should test this using PGE instead of P::C::R

[14:23] <Limbic_Region> cognomial - don't think it is an option with evalbot but locally you can set an env var to tell pugs which to use

[14:24] <Limbic_Region> you may get different results with PGE (and if so, fglock will want to know)

[14:24] <cognominal> I tried but it core dumped. But so far, limitations are mine

[14:25] <Limbic_Region> let me try locally, I haven't done this in a while myself

[14:25] <cognominal> I have not yet smashed my head on all potential walls

[14:25] <Limbic_Region> this could take a while - I am doing a realclean as well

[14:30] <cognominal> syntax hilighting would have avoided me my last error

[14:32] *** rodi joined
[14:41] <Limbic_Region> 68 of 97

[14:41] <svnbot6> r14763 | fglock++ | MP6 - fixed return-blocks

[14:42] *** fglock joined
[14:43] <Limbic_Region> hey fglock - cognomial pointed out some apparent issues with P::C::R

[14:44] <cognominal> Limbic_Region: no, real issues with my narrow mind :)

[14:45] *** fglock_ joined
[14:45] <fglock_> Limbic_Region: hi

[14:46] <fglock_> cognominal: tudo bem aí?

[14:47] <cognominal> fglock: ??

[14:47] *** ludan joined
[14:47] <fglock_> I'm recompiling the bootstrapped MP6 for the nth time

[14:49] <fglock_> cognominal: sorry, I confused with "cog"

[14:50] <fglock_> cog speaks portuguese

[14:50] *** pranavaswaroop joined
[15:02] <capixaba> audreyt: hello audrey

[15:02] <fglock_> pranavaswaroop: hi

[15:03] <[particle]> Limbic_Region: you using cygwin?

[15:05] *** Alias_ joined
[15:05] <pranavaswaroop> hello

[15:05] <Limbic_Region> [particle] - um, yes and no - depends on what specifically you are interested in

[15:05] <pranavaswaroop> are anyone upto the documentation part

[15:05] <Limbic_Region> cognomial - was AFK but pugs has finished rebuilding - will test now

[15:06] <anatolyv> ?seen TimToady

[15:06] <lambdabot> TimToady is in #perl6. I don't know when TimToady last spoke.

[15:07] <Limbic_Region> ?eval temp $_ = "one bright day"; s :s/one (\w+)/foo/; say $_;

[15:07] *** evalbot_r14762 is now known as evalbot_r14763

[15:07] <evalbot_r14763> OUTPUT[one bright day␤] Bool::True

[15:07] <Limbic_Region> ?eval temp $_ = "one bright day"; s :s/one\s+(\w+)/foo/; say $_;

[15:07] <evalbot_r14763> OUTPUT[foo day␤] Bool::True

[15:08] <Limbic_Region> fglock - that behavior is the same for P::C::R and for PGE - seems wrong - confirm/deny?

[15:08] <[particle]> Limbic_Region: hoping you could test a devel version of Data::UUID for rjbs

[15:08] <Limbic_Region> sure

[15:08] <[particle]> great, i'll let him know

[15:09] <Limbic_Region> need tarball and test (if not in the test suite)

[15:09] <[particle]> cpan R/RJ/RJBS/Data-UUID-0.147_01.tar.gz

[15:09] <[particle]> just see if make install works, Limbic_Region++

[15:10] *** rjbs joined
[15:10] <rjbs> Limbic_Region++: I hear you're going to tell me whether there is finally a Data::UUID release that works on more than one Windows platform at once...

[15:10] <[particle]> oh, you may have to get it from incoming, not sure if  it's been indexed yet

[15:10] <avar> what's the best way now to distribute Perl 6 modules?

[15:10] <Limbic_Region> give me full URL then

[15:11] <rjbs> http://pause.perl.org/incoming/Data-UUID-0.147_01.tar.gz

[15:11] <Limbic_Region> rjbs - I have Cygwin Perl and AS w/MinGW I can test with

[15:11] <lambdabot> http://tinyurl.com/ymju3t

[15:11] <Limbic_Region> can do both if interested

[15:11] *** SCalimlim2 joined
[15:11] <rjbs> Great!

[15:11] <[particle]> Limbic_Region: i've tested asperl/msvc successfully

[15:13] <Limbic_Region> rjbs - FYI in perl Makefile.PL on Cygwin - 'LICENSE' is not a known MakeMaker parameter name.

[15:13] <rjbs> It's a recent addition.  I guess I should check version, to make people happy, before including it.

[15:13] * rjbs figured nobody would care!

[15:14] <fglock_> Limbic_Region: not sure how temp, s///, and $_ work together

[15:14] <Limbic_Region> ok, all of t/basic passed

[15:14] <Limbic_Region> skipped the POD tests cause I don't have those modules installed

[15:14] <rjbs> sure

[15:14] <Limbic_Region> ?eval $_ = "one bright day"; s :s/one (\w+)/foo/; say $_;

[15:14] <evalbot_r14763> OUTPUT[one bright day␤] Bool::True

[15:14] <kolibrie> fglock_: and :s

[15:14] <Limbic_Region> fglock_ - the temp status didn't have anything to do with it

[15:15] <Limbic_Region> rjbs - so Cygwin Perl is a go

[15:15] <Limbic_Region> do you want my perl -V

[15:15] <Limbic_Region> ?

[15:15] <fglock_> avar: Perl6 modules can go to CPAN, with a precompiled .pmc file - if you can get v6.pm to execute the module

[15:15] *** vel joined
[15:15] <rjbs> Sure.

[15:16] <Limbic_Region> k - testing AS + MinGW now

[15:16] <Limbic_Region> will nopaste both perl -V assuming success

[15:16] <Limbic_Region> yep - both worked

[15:18] <avar> .pmc?

[15:18] <avar> parrot magic cookie?

[15:18] <eviltwin_b> perl module compiled?

[15:19] <[particle]> avar: in this context, eviltwin_b is correct

[15:19] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "rjbs Cygwin Perl and AS Perl + MinGW output of perl -V" (124 lines, 5.9K) at http://sial.org/pbot/21158

[15:19] <[particle]> there's also perl magic cookies, too

[15:19] <avar> that'll run on parrot?

[15:19] <Limbic_Region> rjbs - if there is anything else, let me know

[15:20] <[particle]> avar: no

[15:20] <Limbic_Region> fglock_ - you see what I mean about the behavior not being related to temp?

[15:20] <avar> why do I want to be distributing something precompiled?

[15:20] <[particle]> avar: perl5 looks for .pmc files before it looks for .pm files

[15:20] <avar> hrm

[15:20] <Limbic_Region> ?eval my $str = "one bright day"; $str =~ s :s/one (\w+)/foo/; say $str;

[15:20] <evalbot_r14763> OUTPUT[<Subst>␤] Bool::True

[15:20] <Limbic_Region> ?eval my $str = "one bright day"; $str =~ s :s/one\s+(\w+)/foo/; say $str;

[15:20] <evalbot_r14763> OUTPUT[<Subst>␤] Bool::True

[15:20] *** cjeris joined
[15:20] <avar> huh, it'll work on Perl 5 then?

[15:20] <[particle]> yes

[15:20] <Limbic_Region> ?eval my $str = "one bright day"; $str ~~ s :s/one\s+(\w+)/foo/; say $str;

[15:20] <evalbot_r14763> OUTPUT[foo day␤] Bool::True

[15:20] <Limbic_Region> ?eval my $str = "one bright day"; $str ~~ s :s/one (\w+)/foo/; say $str;

[15:20] <evalbot_r14763> OUTPUT[one bright day␤] Bool::True

[15:21] * avar wasn't aware of that hack

[15:21] <[particle]> avar: it facilitates perl6-on-perl5

[15:21] <Limbic_Region> there it is - problem exists even if it is a lexical

[15:21] <fglock_> avar: look for 'v6' on CPAN

[15:21] <rjbs> Limbic_Region: Thanks, much obliged.

[15:22] <fglock_> ?eval my $str = "onebrightday"; $str ~~ s :s/one(\w+)/foo/; $str;

[15:22] <evalbot_r14763> \"foo"

[15:22] <Limbic_Region> walang anuman

[15:23] <fglock_> ?eval my $str = "one brightday"; $str ~~ s :s/one (\w+)/foo/; $str;

[15:23] <evalbot_r14763> \"one brightday"

[15:23] <Limbic_Region> it is the space

[15:23] <broquaint> What does :s mean?

[15:23] <Limbic_Region> if you replace it with \s it works fine

[15:23] <fglock_> 'sigspace'

[15:23] <Limbic_Region> the :s doesn't change the behavior in this case

[15:23] *** rjbs left
[15:24] <broquaint> Isn't a :w necessary to make whitespace significant?

[15:24] <Limbic_Region> ?eval my $str = "one bright day"; $str ~~ s/one (\w+)/foo/; say $str;

[15:24] <evalbot_r14763> OUTPUT[one bright day␤] Bool::True

[15:24] <broquaint> I haven't been keeping up ...

[15:24] <Limbic_Region> ?eval my $str = "one bright day"; $str ~~ s :w/one (\w+)/foo/; say $str;

[15:24] <evalbot_r14763> OUTPUT[one bright day␤] Bool::True

[15:24] <broquaint> Apparently not.

[15:24] <Limbic_Region> broquaint - if so, it is still b0rk in implementation

[15:25] <broquaint> Yah.

[15:25] <Limbic_Region> behavior seems identical with either backend (PGE & P::C::R)

[15:25] <Limbic_Region> though I haven't tested extensively

[15:25] <fglock_> I removed all optimizations in MP6 - and it now takes >20min to compile :P

[15:26] <fglock_> Limbic_Region: it may be a problem in the Haskell side

[15:27] <fglock_> brb &

[15:27] * avar wonders why he hasn't seen .pmc used for perl5 stuff

[15:28] <Limbic_Region> fglock_ - that's why I pointed out PGE exhibiting the same behavior.  Or rather, my hunch as well

[15:30] * Limbic_Region wanders off to a $meeting

[15:32] *** ruoso joined
[15:42] *** pranavaswaroop left
[15:42] *** pranavaswaroop joined
[15:44] <ofer1> what's MP6 ?

[15:45] <avar> MiniPerl6

[15:57] *** orafu joined
[16:01] <pranavaswaroop> audreyt

[16:01] <pranavaswaroop> are you there

[16:08] <Limbic_Region> ?seen audreyt

[16:08] <lambdabot> audreyt is in #perl6, #ghc and #haskell. I don't know when audreyt last spoke.

[16:08] <Limbic_Region> oh, pranavaswaroop already left

[16:09] <Limbic_Region> she said in her blog that she will be out of "net" band for the next week

[16:10] <cognominal> what is the perl6 idiom for :  $_= 'a a a a'; my  @a = m/(a)/g; print @a

[16:11] <Limbic_Region> cognomial - if I remember what TimToady said correctly that could be done using .words

[16:11] <Limbic_Region> ?eval my $str = 'one two three'; my @word = $str.words; ~@word

[16:11] <evalbot_r14763> Error: No compatible subroutine found: "&words"

[16:12] <Limbic_Region> apparently not implemented (and perhaps not spec'd yet)

[16:13] <Limbic_Region> oh, except what you are asking for doesn't always match what .words would give.  If the string was 'a b a c a d a e' and you did m/(a)/ you would get different results

[16:13] * Limbic_Region doesn't know 

[16:20] *** buetow joined
[16:21] *** eggzeck joined
[16:23] *** ruoso joined
[16:24] <broquaint> ?eval "a b a c a" ~~ m:g/(a)/

[16:25] <evalbot_r14763> 3

[16:25] <broquaint> ?eval my $r = "a b a c a" ~~ m:g/(a)/; $r.perl

[16:25] <evalbot_r14763> "\\3"

[16:25] <broquaint> Hrm.

[16:29] <Limbic_Region> ?eval my @match = 'a b a c a' ~~ m:g/(a)/; ~@match

[16:29] <evalbot_r14763> "a a a"

[16:29] <Limbic_Region> heh

[16:29] <Limbic_Region> ?eval my @match = 'a b a c a' ~~ m:g/(a)/; @match.length

[16:29] <evalbot_r14763> Error: No compatible subroutine found: "&length"

[16:29] <Limbic_Region> ?eval my @match = 'a b a c a' ~~ m:g/(a)/; @match.elems

[16:30] <evalbot_r14763> 3

[16:30] <Limbic_Region> that works

[16:30] *** sweinig|zZz is now known as sweinig

[16:31] <Limbic_Region> ?eval my ($r) = "a b a c a" ~~ m:g/(a)/; $r.perl

[16:31] <evalbot_r14763> "\\Match.new(\n  ok => Bool::True, \n  from => 0, \n  to => 1, \n  str => \"a\", \n  sub_pos => (), \n  sub_named => \{}\n)"

[16:31] <Limbic_Region> ?eval my ($r) = "a b a c a" ~~ m:g/(a)/; ~$r

[16:31] <evalbot_r14763> "a"

[16:32] <Limbic_Region> ?eval my ($r) = "a b a c a" ~~ m:g/(a)/; $r[2]

[16:32] <evalbot_r14763> \undef

[16:36] *** pranavaswaroop joined
[16:38] <pranavaswaroop> hi

[16:39] <TimToady> ?eval $_ = 'a b a c a'; say ~.comb(/a/)

[16:39] <evalbot_r14763> OUTPUT[a a a␤] Bool::True

[16:39] <TimToady> ?eval $_ = 'a b a c a'; say ~.comb

[16:39] <evalbot_r14763> OUTPUT[a b a c a␤] Bool::True

[16:40] <Limbic_Region> pranavaswaroop - audreyt says on her blog she won't be around much for another week

[16:40] <Limbic_Region> if it is important you speak to her directly - try email, if not, ask your question in the channel

[16:40] <Limbic_Region> TimToady - should the following work?

[16:41] <Limbic_Region> ?eval my $str = 'hello world'; $str ~~ s :s/hello (\w+)/foo/; say $str;

[16:41] <evalbot_r14763> OUTPUT[hello world␤] Bool::True

[16:41] *** SCalimlim2 joined
[16:41] <Limbic_Region> if I change the whitespace to \s

[16:41] <TimToady> it does appear that :s is b0rk

[16:41] <Limbic_Region> ?eval my $str = 'hello world'; $str ~~ s :s/hello\s(\w+)/foo/; say $str;

[16:41] <evalbot_r14763> OUTPUT[foo␤] Bool::True

[16:42] <Limbic_Region> ahh, ok - will commit a failing test then

[16:44] <TimToady> ?eval my $str = 'hello world'; $str.subst(rx:s/hello (\w+)/, 'foo')

[16:44] <evalbot_r14763> Error: No compatible subroutine found: "&subst"

[16:44] * Limbic_Region is looking for a good place in t/regex to put the test but isn't sure

[16:44] <TimToady> ?eval my $str = 'hello world'; $str.subst(rx:s/hello (\w+)/, {'foo'})

[16:44] <evalbot_r14763> Error: No compatible subroutine found: "&subst"

[16:45] <pranavaswaroop> I just wanted to ask whether I can contribute to the perl documentation team

[16:46] <Limbic_Region> pranavaswaroop - you needn't ask audreyt for that

[16:46] <Limbic_Region> you can submit patches to perl6.language

[16:47] <cognominal> thx Limbic_Region

[16:47] <TimToady> or for things sourced in pugs/, you can just change them directly if you have a commit bit

[16:47] <Limbic_Region> TimToady, or pmichaud, or someone with commit rights will evaluate and apply

[16:47] <cognominal> pugs> $_= 'a a a a'; my string @a = m:g/(a)/

[16:47] <cognominal> ({regex},)

[16:47] <cognominal> is this correct?

[16:47] <TimToady> pranavaswaroop: do you have a commit bit to pugs?

[16:47] <Limbic_Region> pranavaswaroop - what TimToady said

[16:48] <TimToady> if not, send your who at where dot whatever here and we'll give you one.

[16:48] <Limbic_Region> cognomial - you saw the example of that I put here that did work right

[16:48] <Limbic_Region> ?eval my @match = "a b a c a d" ~~ m:g/(a)/; ~@match

[16:48] <evalbot_r14763> "a a a"

[16:49] <Limbic_Region> so any advice where to put the failing regex test?

[16:49] <GnuVince> ?eval uc("P􏿽xE9p􏿽xE8re")

[16:49] <evalbot_r14763> "PÉPÈRE"

[16:49] <GnuVince> oops, /me is not in UTF-8 here

[16:54] <TimToady> t/regex/from_perl6_rules/subst.t maybe

[16:56] <pranavaswaroop> TimToady: Sir can you please help me out

[17:01] <TimToady> pranavaswaroop: you need to send your email addr somehow to get a commit bit

[17:01] <pranavaswaroop> k my email add>>>> [email@hidden.address]
[17:04] <TimToady> commit bit on its way

[17:05] <TimToady> please add yourself to AUTHORS as first commit

[17:06] <pranavaswaroop> oh ok sir

[17:07] *** andara left
[17:07] <TimToady> and don't neglect your studies to work on pugs.  :)

[17:07] <TimToady> except when you want to.  :)_

[17:08] <pranavaswaroop> oh I wont sir

[17:08] *** sweinig is now known as sweinig|bbl

[17:09] <pranavaswaroop> step 1 completed sir I am registered

[17:09] <dmq> hrm.

[17:11] <dmq> timtoady: i hope my recent \R1 stuff wasnt an issue.

[17:11] <pranavaswaroop> so shall I get involved with my project

[17:13] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Would someone be kind enough to commit these nice failing tests pointed out by cognomial++ I seem to have commitment issues" (20 lines, 477B) at http://sial.org/pbot/21165

[17:14] <dmq> how could someone who is married have commitment issues?

[17:14] <Limbic_Region> I can't seem to commit ATM so could someone else do so?

[17:14] <Limbic_Region> dmq - have you seen the divorce rate in the US?

[17:14] <dmq> heh

[17:17] <Limbic_Region> oh, and please not that the first 3 fail regardless of PGE or P::C::R and the last one succeeds

[17:17] <pranavaswaroop> well me some work!!!!

[17:18] <pranavaswaroop> can I get

[17:18] <Limbic_Region> TimToady - does commitbit.pugscode.org have an option for resetting a password, apparently mine has become fubar

[17:19] <Limbic_Region> I can't login there either

[17:19] <Limbic_Region> woah - don't bother

[17:19] <Limbic_Region> it just started working

[17:19] <Limbic_Region> weird

[17:21] <Limbic_Region> still can't seem to commit though

[17:21] <Ontolog> omg I'm learning haskell so I can help with pugs

[17:22] * Limbic_Region grrrs

[17:23] <Limbic_Region> yay - I did it - please disregard the request to submit the test

[17:23] <svnbot6> r14764 | Limbic_Region++ | Added some failing regex tests in both PGE and P::C::R pointed out by cognomial++

[17:24] <pranavaswaroop> can I get some documentation task now

[17:24] *** thepler joined
[17:25] <Limbic_Region> pranavaswaroop - you mean you want to help with documentation but you don't know what to work on?

[17:25] <Limbic_Region> pranavaswaroop - then you should say that

[17:26] <pranavaswaroop> yup I do not know what to work on

[17:26] <pranavaswaroop> but given a task I will surely

[17:27] *** vel joined
[17:29] <Limbic_Region> pranavaswaroop - look at TASKS

[17:29] <Limbic_Region> there is likely to be one or more documentation activities there

[17:32] *** vel joined
[17:33] <pranavaswaroop> I did go to this http://svn.openfoundry.org/pugs/TASKS but found a 404 Not found Message displayed

[17:33] <pranavaswaroop> The requested URL /pugs/TASKS was not found on this server.

[17:33] <pranavaswaroop>  that was what i could find

[17:34] <Limbic_Region> pranavaswaroop - you haven't checked out a local copy of Pugs on your machine or have a feather acct?

[17:34] <Limbic_Region> btw - see the channel topic

[17:34] *** vel joined
[17:34] <Limbic_Region> it is now http://svn.pugscode.org/ not openfoundary

[17:34] <lambdabot> Title: Perl6 Community Development Server

[17:35] <Limbic_Region> http://svn.pugscode.org/pugs/TASKS

[17:40] <pranavaswaroop> oh uh thanks Limbic_Region

[17:40] <pranavaswaroop> Itz working now

[17:40] *** vel joined
[17:47] <pranavaswaroop> Limbic can I know something about the user name and the password that I need to put

[17:48] <pranavaswaroop> in https://feather.perl6.nl/irc/

[17:49] *** lazer joined
[17:49] *** kanru joined
[17:51] *** rodi joined
[17:53] <svnbot6> r14765 | particle++ | add task to s/svn\.openfoundry/svn\.pugscode/g

[17:58] <Limbic_Region> pranavaswaroop - you should have seen a link at http://feather.perl6.nl

[17:59] <lambdabot> Title: Perl6 Community Development Server

[17:59] <Limbic_Region> pranavaswaroop - see http://www.mail-archive.com/perl6-language@perl.org/msg20060.html  for details on getting an acct

[17:59] <lambdabot> Title: Perl development server, http://tinyurl.com/y4whb7

[18:00] <[particle]> heh, my wife just ran into tom skerritt while out on a run

[18:01] <dmq> i interviewed him when i was grade 6 for school.

[18:01] <[particle]> lol

[18:01] <dmq> No seriously i did.

[18:02] <dmq> I think he was annoyed all i did was ask about Tom Cruise tho.

[18:02] <[particle]> i believe it. i just expected responses more along the lines of, "who's tom skerritt?"

[18:02] <dmq> Yeah, heh, it is weird.

[18:02] <[particle]> he lives not too far from us in seattle, apparently.

[18:03] <dmq> I remember he was a pretty nice guy

[18:07] <Limbic_Region> oh - I have pretty big news too

[18:07] <Limbic_Region> Jasmine took her first step last night

[18:08] <[particle]> congrats! time to lock away the liquor....

[18:20] *** duend`sleeping is now known as duend

[18:35] *** vel joined
[18:39] *** bernhard joined
[18:47] *** Corion joined
[18:48] *** Corion left
[18:50] *** fglock joined
[18:54] <svnbot6> r14766 | fglock++ | MP6 - optimized ram usage

[18:57] <Ontolog> How do you use ":load" with a Windows pathname?

[18:57] <Ontolog> and btw WinHugs doesn't uninstall!! don't install it :p

[18:59] <Ontolog> oops I got it

[18:59] <Ontolog> in GHC you have to use double backslashes

[19:00] *** ashelyb_ joined
[19:17] *** justatheory joined
[19:21] *** GabrielVieira joined
[19:21] <GabrielVieira> audreyt fglock hey.. some pics from CONISLI are on :) pasting the url in pvt, ok?

[19:23] <fglock> GabrielVieira: got it - thanks!

[19:24] <GabrielVieira> ok :)

[19:36] <svnbot6> r14767 | fglock++ | MP6 - fixed syntax in Emitter.pm

[19:36] <[particle]> fglock: is MP6 self-hosting yet?

[19:36] *** sweinig|bbl is now known as sweinig

[19:37] <fglock> [particle]: not yet, the token compiler still has some bugs

[19:38] <[particle]> ok, i'll wait :)

[19:39] <fglock> small programs compile ok, and the compiler can compile itself

[19:39] <fglock> but the 'regex' compiler is not good enough

[19:39] <[particle]> the new PAST compiler is in parrot, and arrays should be done shortly

[19:41] <fglock> you mean array objects? Parrot already have arrays, right?

[19:42] <[particle]> well, the ast representation

[19:42] <[particle]> and emitter

[19:42] <[particle]> for array variables

[19:43] <fglock> actually, MP6 only needs plain Parrot - it includes it's own parser and ast

[19:43] <[particle]> i was hoping to xform between ast

[19:44] <[particle]> it seems the logical place to me

[19:44] <[particle]> but we could go with emitter-only

[19:44] <fglock> the idea is to have a single ast for all implementations, so you don't have to make transformations

[19:45] <[particle]> that's the parrot idea, too

[19:45] <[particle]> but so far, pugs ast and parrot ast are different

[19:45] <fglock> and MP6 ast is also different

[19:46] <fglock> but you can port MP6

[19:48] <fglock> but of course one can emit higher level ast, and finish the emitter using native tools

[19:49] <[particle]> yes, i think the natural place to move from one parser to another emitter is via ast transformations

[19:50] <[particle]> it's the best place to decouple front- and back-ends

[19:56] <fglock> wow - the parser is starting to work :)

[19:58] <fglock> [particle]: audreyt meant MP6 as a tree-transformation tool

[19:58] <fglock> which could be used to make AST transformations

[19:58] <[particle]> oh, right.

[19:58] <[particle]> would be nice to port that to parrot

[19:59] <[particle]> now we're still using the old tge, which is ugly and b0rked

[20:00] <[particle]> whereas MP6 is pretty and b0rked :)

[20:00] <fglock> I hope it doesn't stay b0rked for too long

[20:00] <[particle]> meetoo

[20:01] <fglock> I'm following a compilation with the bootstrapped compiler step-by-step, it seems to be doing ok

[20:02] <fglock> [particle]: the bootstrapped code is in v6/v6-MiniPerl6/lib5/

[20:02] <fglock> I'm still fixing bugs

[20:16] <fglock> home &

[20:16] *** fglock left
[20:20] *** polettix joined
[20:20] *** Limbic_Region joined
[20:23] *** araujo joined
[20:31] *** rhizo joined
[20:32] *** SCalimlim joined
[20:41] <Ontolog> So does Pugs actually implement the entire Perl6 standard yet?

[20:42] <[particle]> no. and the entire standard hasn't been defined yet, either :)

[20:42] <Limbic_Region> if by standard you mean specification then no

[20:42] <Limbic_Region> the biggest reason being what [particle] said - the specification isn't finished yet

[20:49] <GnuVince> Does Perl 6 have a non-destructive version of s/// ?

[20:50] <Gothmog_> Like Perl 5 has?

[20:50] <Gothmog_> ($new = $old) =~ s///

[20:52] <Limbic_Region> ?eval my $old = "foo"; my $new; ($new = $old) ~~ s :g/o/x/; say "$new\t$old";

[20:52] *** evalbot_r14763 is now known as evalbot_r14767

[20:52] <evalbot_r14767> OUTPUT[fxx	foo␤] Bool::True

[20:52] <Limbic_Region> apparently so

[20:58] <Limbic_Region> Gothmog_ - you do realize that 1.  That IS a destructive s/// and 2.  This is equivalent to my $new = $old; $new =~ s///;

[20:58] <TimToady> the method form of .subst is also supposed to be non-destructive, since .=subst would be the destructive form.

[20:58] <TimToady> but it seems a bit underimplemented

[20:58] <Limbic_Region> TimToady - am I misremebering that there is supposed to be a .words method?

[20:58] <Limbic_Region> for strings anyway

[20:58] <TimToady> .comb now

[20:59] <TimToady> which defaults to combing out the words

[20:59] <Limbic_Region> ah

[20:59] <Limbic_Region> and there is someway to tell it how to identify a word with the default being \b or \s ?

[20:59] <TimToady> ?eval $_ = "foo bar bletch"; .comb.join(':')

[20:59] <evalbot_r14767> "foo:bar:bletch"

[21:00] <TimToady> anything you can match with m:g// should work

[21:01] <TimToady> ?eval $_ = "foo bar bletch"; .comb(/\S+/).join(':')

[21:01] <evalbot_r14767> "foo:bar:bletch"

[21:01] <Limbic_Region> ?eval my $str = "one two three"; my @word = $str.comb.split(' '); ~@word

[21:01] <evalbot_r14767> " "

[21:01] <TimToady> split(' ') is not magical

[21:02] <Limbic_Region> ?eval my $str = "one two three"; my @word = $str.comb(' '); ~@word

[21:02] <evalbot_r14767> "   "

[21:02] <Limbic_Region> ok - but that is a single whitespace

[21:02] <Limbic_Region> so is that another whitespace bug

[21:02] <TimToady> no

[21:02] <Limbic_Region> ?eval my $str = "one two three"; my @word = $str.comb(/\s/); ~@word

[21:02] <evalbot_r14767> "   "

[21:02] <TimToady> ~ inserts the 3rd space

[21:03] <Limbic_Region> ok, please hand me a clue stick then

[21:03] <Limbic_Region> if I want to get all the words in between spaces, what do I use

[21:03] <Limbic_Region> or - if I want to get all words on \b boundaries what do I use

[21:04] <TimToady> ?eval $_ = "foo bar bletch"; .comb(/<< .*? >>/).join(':')

[21:04] <evalbot_r14767> "foo:bar:bletch"

[21:04] <TimToady> << and >> are the new \b

[21:05] <TimToady> ?eval $_ = "foo-bar bletch"; .comb(/<< .*? >>/).join(':')

[21:05] <evalbot_r14767> "foo:bar:bletch"

[21:06] <TimToady> ?eval $_ = "foo-bar bletch"; .comb.join(':')

[21:06] <evalbot_r14767> "foo-bar:bletch"

[21:06] <TimToady> default is \S+

[21:06] <TimToady> ?eval $_ = "foo-bar bletch"; .comb(/\w+/).join(':')

[21:06] <evalbot_r14767> "foo:bar:bletch"

[21:07] <Limbic_Region> ok - but I don't want to join them at all

[21:07] <TimToady> er, then don't

[21:07] <Limbic_Region> ?eval my $str = "foo-bar bletch"; my @word = $str.comb(/\w+/); ~@word;

[21:07] <evalbot_r14767> "foo bar bletch"

[21:07] * Limbic_Region though he had tried that

[21:08] <Limbic_Region> ?eval my $str = "one two three"; my @word = $str.comb(' '); ~@word

[21:08] <evalbot_r14767> "   "

[21:08] <Limbic_Region> ?eval my $str = "one two three"; my @word = $str.comb(/\s+/); ~@word

[21:08] <evalbot_r14767> "   "

[21:08] <TimToady> those are both correct

[21:09] <Limbic_Region> oh duh

[21:09] <TimToady> your list has two spaces, and ~ adds the 3rd

[21:09] <Limbic_Region> it is what to "take" not what to split on

[21:09] <TimToady> ?eval my $str = "one two three"; my @word = $str.comb('e'); ~@word

[21:09] <evalbot_r14767> "e e e"

[21:10] <TimToady> yes, why duplicate split?

[21:10] <TimToady> the whole cork-brained split(' ') thing in P5 was based on a figure-ground inversion.

[21:11] *** GnuVince joined
[21:12] <TimToady> by the way, .comb is just implemented in Prelude.pm, not in Haskell, since it's really syntactic sugar.

[21:12] <Limbic_Region> ?eval my $str = "one two three"; my @word = $str.comb(); ~@word

[21:13] <evalbot_r14767> "one two three"

[21:13] <GnuVince> ?eval 1..3

[21:13] <evalbot_r14767> (1, 2, 3)

[21:13] <GnuVince> ?eval 1.1..3

[21:13] <evalbot_r14767> (11/10, 21/10, 31/10)

[21:13] <TimToady> ?eval my $str = "  one     two      three   "; my @word = $str.comb; ~@word

[21:13] <GnuVince> ?eval 1.1 .. 4.7

[21:13] <evalbot_r14767> "one two three"

[21:13] <evalbot_r14767> (11/10, 21/10, 31/10, 41/10, 51/10)

[21:14] <TimToady> I think .. is still doing eager eval, which is non-spec.

[21:15] <TimToady> really should just print out a Range object.

[21:16] <Ontolog> why the hell isn't the spec done yet?

[21:16] *** hyegeek joined
[21:17] <[particle]> ontolog: it's not christmas

[21:17] <Ontolog> is it suppose to be done by this christmas?

[21:17] <[particle]> no, by *a* christmas

[21:17] <Ontolog> good lord

[21:18] <Ontolog> what are the major obstacles to getting the spec completed?

[21:18] <[particle]> ...perhaps the designer would like to enumerate them?

[21:19] <Ontolog> 􏿽xB0􏿽xA5Ӵ􏿽xA3􏿽xA1􏿽xCB􏿽xFB􏿽xCA􏿽xC7􏿽xB1􏿽xBF􏿽xB5􏿽xB0􏿽xA1􏿽xA3

[21:20] <[particle]> ...or perhaps he wouldn't.

[21:20] <[particle]> anyway, pugs in pretty usable, and is being used in production by more than one company

[21:21] <[particle]> ontolog: what's the rush?

[21:22] <[particle]> we're working on it. do you have a commit bit?

[21:25] *** Aankhen`` joined
[21:26] <TimToady> Ontolog: the specs are asymtotically approaching complete.  The "obstacles" are merely understanding what issues the implementors and documentors will run into and dealing with them, by and large.

[21:26] *** gene9 joined
[21:26] <TimToady> but that means waiting for the implementors and documentors to implement and document. :)

[21:26] <[particle]> don't forget about the testers!

[21:26] <TimToady> we do not work to a waterfall here

[21:27] <TimToady> well, they're supposed to be paying attention to the spec anyway...  :)

[21:27] <TimToady> anyway, the design methodology is intentionally a whirlpool or strange attractor rather than a waterfall.

[21:28] <[particle]> no wonder i fit right in

[21:28] <TimToady> nobody is smart enough to design a good language without feedback.

[21:29] <TimToady> s/asymtotically/asymptotically/

[21:33] <araujo> Hello

[21:33] * araujo kind of free this weekend

[21:33] <araujo> Let's see if i can get some perl6 fun :-)

[21:34] <Ontolog> why do you guys have to make me learn this rediculous language Haskell to make sexy time with Perl6 prototype?

[21:34] <araujo> wt!?!

[21:34] <Limbic_Region> Ontolog - we don't, you can happily enjoy Perl 6 without knowing any Haskell (that's my situation)

[21:34] <araujo> Ontolog, Because all the cool kids are doing Haskell

[21:35] <araujo> And so we want Perl6 to be cool

[21:35] * [particle] is not one of the cool kids

[21:35] <Limbic_Region> Ontolog - if you want to contribute to the continuing implementation of Perl 6 you needn't learn Haskell either

[21:35] <Ontolog> Haskell gives me make brown in pants

[21:35] <[particle]> ontolog: check out the test suite... it's all written in perl6

[21:35] <[particle]> no haskell necessary

[21:36] <Limbic_Region> Ontolog - one of the main points of Perl 6 is having a specification that allows for multiple implementations so please, finish up implementing all of the existing Perl 6 specification by this Xmas in your language of choice

[21:36] <Limbic_Region> we will all be greatful

[21:36] <Ontolog> okay I will get right on it

[21:36] <Ontolog> Yackshimash!

[21:36] <Limbic_Region> Ontolog - OTOH, if you wish to continue to move the snowball forward that has the most momentum - learn Haskell

[21:36] <Ontolog> I am learning Haskell right now

[21:37] * Limbic_Region notes the time and runs for the door

[21:40] *** pmurias joined
[21:41] <pmurias> Ontolog: or if you prefere murky perl5 generation you could try to help fglock make MiniPerl6 self hosting...

[21:41] <Ontolog> no no i'm learning haskell

[21:41] <Ontolog> but my question is this

[21:42] <Ontolog> how long must i study this mud monkey of a language before i can start hacking on pugs?

[21:43] <integral> IIRC I took about a month

[21:44] <Ontolog> aww man a whole month

[21:44] <Ontolog> ok

[21:44] <pmurias> haskell makes up for the radical tradeoffs/limitations with some pretty scary/advanced stuff

[21:45] <Ontolog> i'm just curious, do you pugs coders use the crappy white-space formatting or do you use explicit braces and semicolons?

[21:45] <integral> ws forever!  It's very neat

[21:45] <integral> (As long as you don't use it excessively on page-long functions...   of course, page long functions should not exist)

[21:46] *** rodi joined
[21:46] <pmurias> semicolons and braces are frowned upon from in haskell land (from what little i read)

[21:47] <pmurias> sleep&

[21:47] *** pmurias left
[22:04] *** eggzeck joined
[22:12] *** trym_ joined
[22:24] *** hyegeek left
[22:34] *** Limbic_Region joined
[22:35] <SamB> integral: you might sometimes have page-long where clauses

[22:41] *** lazer left
[23:02] *** cjeris left
[23:17] <Limbic_Region> anyone else find that smoking hangs on t/perl5/modify_inside_p5_p6.t ?

[23:18] <Limbic_Region> or is that just another Win32 thing?

[23:19] <Limbic_Region> @tell audreyt Win32 hangs smoking on t/perl5/modify_inside_p5_p6.t

[23:19] <lambdabot> Consider it noted.

[23:25] *** loumz joined
[23:26] *** rodi joined
[23:27] *** hexmode joined
[23:29] *** mako132_ joined
[23:38] *** mako132_ joined
[23:43] <loumz> A comment on the pugs blog said that the "This week on Perl 6" link on pugscode.org is outdated (points to http://www.perl.com/pub/au/Fowles_Matt), last update august 2005

[23:43] <TimToady> Limbic_Region: it appears that it is waiting for standard input for some reason.

[23:44] <loumz> I can fix this by changing docs/feather/pugscode.org/index.html right?

[23:44] <TimToady> try it and see.

[23:45] *** sweinig_ joined
[23:46] <loumz> OK, where should I link to? http://www.oreillynet.com/pub/au/1926 , http://pugs.blogs.com/pugs/summary/index.html , or http://www.mail-archive.com/perl6-announce@perl.org/

[23:46] *** gnuvince` joined
[23:47] *** gnuvince joined
[23:50] <TimToady>  I'd go for the middle one.

[23:51] <gnuvince> Good evening people in EST

[23:51] <svnbot6> r14768 | loumz++ | * Changed Perl6 mailing list summary link to http://pugs.blogs.com/pugs/summary/index.html

[23:51] <svnbot6> r14768 | loumz++ |   since the old one (http://www.perl.com/pub/au/Fowles_Matt) was outdated.

[23:53] <TimToady> doesn't seem to fix the page.  oh well.

[23:53] <TimToady> probably needs to be copied somewhere.

[23:53] <[particle]> good night, mrs. calabash, wherever you are

[23:53] <[particle]> timtoady: i think it syncs every n minutes

[23:54] <TimToady> well, that's a kind of copy... :)

[23:56] <TimToady> page doesn't seem to set utf-8 properly either.

