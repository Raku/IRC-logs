[00:00] *** ezraburgh joined
[00:03] *** diakopter joined
[00:07] <TimToady> diotalevi: bit resent

[00:08] <TimToady> assuming you want it sent to the same gmail address...

[00:08] <perlDreamer> well, I've done a little digging into the tests by running the smartlink script and I've come up with a question.

[00:08] <perlDreamer> are commas required after a pointy block, and if so, where in the spec does it say that?

[00:10] <TimToady> commas are required after all normal arguments, and that includes the first argument to grep and map and such now.

[00:10] <TimToady> well, not after the final argument, of course...

[00:11] <zgh> oh i get it now, the question was comparing to what perl5 does with prototype tricks...

[00:11] <TimToady> anyway, blocks used as arguments are no longer magical.

[00:11] <zgh> i was confused

[00:11] <perlDreamer> TimToady: were they at one point?

[00:11] <zgh> in perl5 they were

[00:11] <TimToady> yes, at the beginning of Perl 6 they were also magical.

[00:12] <TimToady> but we decided it was more important to have consistent curly policy

[00:12] <TimToady> especially at the ends of lines.

[00:12] <TimToady> it generally means you never have to remember which blocks require semicolons after them and which don't.

[00:12] <perlDreamer> that's convenient

[00:13] <TimToady> comma in grep and map was a small price to pay for that.

[00:13] <TimToady> after all these years, I still can't keep it straight in C which kinds of block are which.

[00:13] <perlDreamer> I barely even learned C.  Perl was too useful

[00:13] <TimToady> and it was rapidly going to become untennable in a language that can be extended with new block types.

[00:14] <zgh> in perl5 though it's FUN

[00:14] <zgh> although a bit restricting

[00:14] <TimToady> untenable, even

[00:14] <zgh> how true

[00:14] <perlDreamer> I'll see if a similar test exists elsewhere, and either remove the smartlink or point it to the correct docs then

[00:15] <TimToady> many of the seemingly weird rules in Perl 6 serve similar extensibility purposes.

[00:15] <TimToady> the fact that postfix requires the absence of whitespace, for instance.

[00:15] <TimToady> perlDreamer: that's cool.  the smartlinks are in a state of partial completion currently

[00:16] <zgh> perl6 is scary extensible. the toolkit for perl5 is fairly small in that regard, but now that I'm used to it perl6 syntax seems almost terrifyingly mutable

[00:17] <TimToady> the basic realization was that perl 6 is not one language, but many

[00:17] <zgh> yes! cpan is the langauge! i love that.

[00:17] <zgh> er s/au/ua/ or something

[00:17] <TimToady> and many places where Perl 5 was busting at the seams can be looked at that way.

[00:17] <perlDreamer> do you mean that perl6 is like Hoch Deutsch (High German) with lots of regional dialects?

[00:18] <diakopter> a thought I had yesterday - is perl6 mutable enough that a pragma could be written that would allow perl6 to compile other languages?

[00:18] <TimToady> perhaps more like IndoEuropean...

[00:18] <zgh> i've been playing with domain-specific languages and higher-order stuff  in perl5 and from here the seams are quite visible

[00:18] <TimToady> indeed.

[00:18] <TimToady> diakopter: yes, that is the intent

[00:19] <TimToady> use APL;

[00:19] <TimToady> !!&*&R*WER&W*ERQ(Q@&#$%($#$

[00:19] <zgh> boy APL has gotten more readable!

[00:19] <zgh> when did that happen?

[00:20] <TimToady> that was just unrelated line noise :)

[00:20] <zgh> TimToady: oh good ofr a second I thought I spotted a syntax error ;)

[00:21] <TimToady> cat sat on the keyboard, and cat's hind end doesn't know APL...

[00:23] <TimToady> anyway, point is that "all is fair if you predeclare", and we realized that means your current dialect.  In fact, I realized this for Perl 5, but did a lousy job of designing for it.  Good enough to inspire CPAN though...

[00:24] * diakopter wonders how much of CPAN will be refactored and reimplemented anyway, even though most of it is probably usable for perl6 programs.

[00:25] <TimToady> if it only gets everyone to add a version number and naming authority to every longname, that will be progress.

[00:25] <TimToady> all source filters should at least be refactored to use grammar munging and macros.

[00:26] <TimToady> the business of reparsing Perl N times, one for each source filter, is for the birds.

[00:26] * zgh prefers aggresive prototype trickery to source filters.

[00:26] <zgh> not that I can do as much....

[00:27] <TimToady> prototypes also needed a lot of fixing.

[00:27] <TimToady> mainly by scrapping them and putting in a real type system and MMD

[00:28] * diakopter wonders what happened to the Phalanx 100

[00:28] <TimToady> and making evaluation lazy enough not to commit to whether @foo will be in scalar or list context till binding time.

[00:30] <diakopter> how does one use the evalbot here

[00:31] <TimToady> ?eval 1+1

[00:31] *** evalbot_r14941 is now known as evalbot_r14942

[00:31] <evalbot_r14942> 2

[00:32] <perlDreamer> ?eval @a = ("one" -> $x { $x**2 }, "three")

[00:32] <evalbot_r14942> Error: ␤Unexpected "->"␤expecting operator or ")"

[00:32] <TimToady> -> is not an infix

[00:33] <perlDreamer> TimToady, can you please translate that to chip designer from language designer?

[00:33] <TimToady> ?eval @a = ("one",  -> $x { $x**2 }, "three")

[00:33] <evalbot_r14942> ["one", ->{Syn "block" {App &infix:** (: Var "$x", 2)}}, "three"]

[00:33] <TimToady> it means you have to put a comma before it.  :)

[00:33] <perlDreamer> cool, thanks

[00:39] <svnbot6> r14943 | perlDreamer++ | fix broken smartlink and tests that were removed

[00:40] <diakopter> karma perlDreamer

[00:40] <jabbot> diakopter: perlDreamer has karma of 3

[00:40] *** lisppaste3 joined
[00:41] <perlDreamer> in WebGUI, karma is good for implementing RFE's

[00:41] <zgh> off to a good start I'd say

[00:41] <perlDreamer> what is karma good for here?

[00:41] <zgh> karma zgh

[00:41] <jabbot> zgh: zgh has karma of 16

[00:41] <zgh> ooh!

[00:41] <zgh> you'll overtake me quick

[00:41] <svnbot6> r14944 | perlDreamer++ | fix broken smartlink about prefixes

[00:46] <diotalevi> Thanks for commit bit resend TimToady. Got it.

[00:46] *** diotalevi left
[00:48] <svnbot6> r14945 | perlDreamer++ | fixed broken smarklink that used to refer to mandatory plus instead of colon

[01:21] *** mjk joined
[01:37] <perlDreamer> karma perlDreamer

[01:37] <jabbot> perlDreamer: perlDreamer has karma of 5

[01:37] <svnbot6> r14946 | perlDreamer++ | refix point block smartlink

[01:37] <svnbot6> r14947 | perlDreamer++ | fix spelling error in comments

[01:37] <diakopter> karma perlDreamer

[01:37] <jabbot> diakopter: perlDreamer has karma of 7

[01:38] <perlDreamer> muy interesante

[02:01] <svnbot6> r14948 | perlDreamer++ | Fixed broken smartlinks related to nested subpattern/subrule captures.

[02:02] *** diakopter joined
[02:14] *** weinig is now known as weinig|bbl

[02:18] <perlDreamer> TimToady: Are you still awake?  If I find something in the Synopses that is causing the smartlinks lookup to fail, is it okay to change the POD?

[02:19] <zgh> perlDreamer: precedent says "yes"

[02:19] <zgh> if it's really wrong it's okay to fix it

[02:20] <perlDreamer> It's just whitespace, I think

[02:20] <perlDreamer> have a peek:

[02:20] <perlDreamer> 80(P):101(e):114(r):108(l):194(�):160(�):53(5):32( )

[02:20] <perlDreamer> 80(P):101(e):114(r):108(l):32( ):53(5):32( )

[02:20] <perlDreamer> That's the ordinal followed by the actual character

[02:21] <perlDreamer> That's the string "Perl 5" from S03's head1 "Changes to Perl 5 operators"

[02:29] <TimToady> It's using non-breaking space there.

[02:30] <diakopter> so perhaps the smartlink matcher could convert the match string to match spaces or non-breaking spaces

[02:30] <TimToady> makes sense to me.

[02:31] <TimToady> using nbsp there makes the pod a lot more readable than other ways of preventing people having to read about Perl

[02:31] <TimToady> 5

[02:32] <TimToady> or, for that matter, Perl

[02:32] <TimToady> 6

[02:33] <TimToady> on the other hand, I recently discovered that PerlMonks translates it to ordinary space instead of &nbsp;, which I find irritating.

[02:34] <TimToady> gotta go cook dinner &

[02:34] <perlDreamer> Thanks for the help.

[02:34] <Juerd> TimToady: Probably because of their rather strict views on browser width resizability

[02:36] <Juerd> TimToady: They even wrap code blocks to a user-configurable width

[02:36] <Juerd> TimToady: Which by default is <80 :(

[02:37] *** riffraff joined
[02:37] <riffraff> hello

[02:38] <riffraff> sorry bout the dummy question but I was experimenthing with perl6 through pugs and there is something I don't understand: +@lst is supposed to give me the length of an array, right?

[02:43] <perlDreamer> are there any unicode hackers online tonight?

[02:46] <TimToady> I'm still wandering in and out while I try not to burn dinner...

[02:46] <TimToady> riffraff: yes, that is correct.

[02:47] <TimToady> Juerd: I don't think turning Perl 6 into a 6-letter word is hazardous to their word-wrap policy...

[02:48] <TimToady> It's just they don't really believe in Unicode yet.

[02:48] <riffraff> ok, then if @foo is a list of lists, shouldn't  sort { +$_}, @foo return the list sorted by size of the elements/lists?

[02:49] <TimToady> yes, it should

[02:49] * perlDreamer goes looking for the sort synopsis/apocalypse

[02:50] <TimToady> except, you still have the problem that the return value is sorted as a string

[02:50] <TimToady> I don't think pugs recognizes that {+...} sorts as numeric yet.

[02:50] <riffraff> ah! here's the problem of course, thanks a lot

[02:51] <TimToady> so length 11 sorts before length 2

[02:53] <riffraff> yup, I understand

[02:55] <perlDreamer> so how would one ask Perl to include utf8 in \s (in Perl 5)?

[02:56] *** pstickne joined
[03:00] <perlDreamer> so that I can make smartlinks.pl work with utf8 characters in the P6 synopses?

[03:01] <TimToady> It already is, I think.

[03:02] <perlDreamer> We'll try the straight-forward approach then

[03:02] <TimToady> well, maybe not.

[03:03] <TimToady> needs a "use utf8;"

[03:03] <TimToady> no, wait, that's only for the literal I put in.

[03:03] <TimToady> should work already on normal data from the outside...checking...

[03:06] <TimToady> need to make sure the filehandle is reading it in as utf8

[03:07] <perlDreamer> it's getting more fun.  The smartlinks data structure contains strings used as hash key lookups into a parse tree of the Synopsys POD.

[03:07] <perlDreamer> I need to have my arms all the way around it first

[03:08] <diakopter> oops.  sorry I assumed the strings were feeding a regex. :/

[03:08] <perlDreamer> some of them are

[03:08] <perlDreamer> so it has to do both

[03:09] <perlDreamer> maybe it's easier to translate the incoming data from utf8 to ascii

[03:09] <perlDreamer> so long as the output is preserved correctly.

[03:09] <perlDreamer> either that, or we embed the nbsp in the smartlink and annotate it so that people don't get fooled

[03:10] <riffraff> mh.. I guess pugs does not support typed containers / GADT at the moment, am I right?

[03:13] <TimToady> if the smart links are patterns, then use . maybe.

[03:14] <TimToady> riffraff: I think most of that is waiting on MO integration

[03:15] <riffraff> nice to know, thank you again

[03:16] <perlDreamer> TimToady: that would work except for the hash keys lookups.  We could write a whitespace tolerant tied hash...

[03:18] * diakopter waits for TimToady to whip up a whitespace-tolerant tied hash and nopaste it

[03:28] <svnbot6> r14949 | perlDreamer++ | This test's smartlink did not have errors, except for a UTF8

[03:28] <svnbot6> r14949 | perlDreamer++ | non-breaking character.  Be on the lookout for this near Perl 5

[03:28] <svnbot6> r14949 | perlDreamer++ | and Perl 6 in section headers and literal text.

[03:29] <diakopter> karma perlDreamer

[03:29] <jabbot> diakopter: perlDreamer has karma of 11

[03:34] <diakopter> karma TimToady

[03:34] <jabbot> diakopter: TimToady has karma of 38

[03:34] <svnbot6> r14950 | perlDreamer++ | more UTF8 whitespace in smartlinks

[03:34] <diakopter> karma audreyt

[03:34] <jabbot> diakopter: audreyt has karma of 2761

[03:35] *** nipra joined
[03:35] <perlDreamer> do pugs people prefer topical commits (all changes from 1 set of changes in 1 commit) or file based commits (change 1 thing in 5 files with 5 commits)?

[03:45] <TimToady> pugs people prefer commits

[03:53] <perlDreamer> TimToady:  Are you pretty familiar with the Synopses?

[03:53] *** mrossetti joined
[03:53] *** mrossetti left
[03:53] <perlDreamer> Is the table of smart matches exhaustive?

[03:59] <perlDreamer> for example, I don't see where this case is spelled out

[03:59] <perlDreamer> %hash5 ~~ "foo"

[04:00] <perlDreamer> which to me looks a lot like Hash Junction hash key slice existence

[04:03] <TimToady> that's just a Hash/Any

[04:04] <TimToady> And, um, yes, I'm pretty familiar with the Synopses...

[04:05] <TimToady> I know many of the authors...

[04:05] <perlDreamer> Cool.

[04:06] <perlDreamer> You're in the authors file.

[04:06] <perlDreamer> That makes twice in ten years that you've helped me.

[04:06] <perlDreamer> Thank you

[04:06] <TimToady> yer welcome twice then.

[04:07] <perlDreamer> the last time was on comp.lang.perl (actually longer than 10 years ago)

[04:07] <perlDreamer> From UUNET to IRC.  I wonder what the next 10 holds...

[04:08] <TimToady> lots of surprises, I don't doubt.

[04:25] *** nipra joined
[04:28] *** Salzh joined
[04:29] *** araujo joined
[04:47] *** ezraburgh joined
[04:51] *** dolmans joined
[05:04] <svnbot6> r14951 | perlDreamer++ | all existing smart links resolved

[05:07] <svnbot6> r14952 | perlDreamer++ | remove smart links cleanup from t/TASKS

[05:47] <perlDreamer> karma perlDreamer

[05:47] <jabbot> perlDreamer: perlDreamer has karma of 14

[05:47] <perlDreamer> not bad for day 1.  Thanks to all for your help and patience.

[06:20] *** ashleyb joined
[06:31] *** dduncan joined
[06:31] *** ashelyb_ joined
[06:43] *** nipra joined
[06:45] *** bonsai joined
[07:27] *** beppu joined
[07:43] *** BooK joined
[07:52] *** RHainsworth joined
[07:52] *** RHainsworth left
[08:04] *** Kattana joined
[08:10] *** xinming joined
[08:12] *** Belaf joined
[08:14] *** Jedai joined
[08:16] <xinming> hello, Please.. anyone here would give me a suggestion on using irssi through a good proxy? >_< It's really a pain which is living without irc.

[08:21] *** xinming_ joined
[08:22] *** xinming__ joined
[08:40] *** iblechbot joined
[08:51] *** kisu joined
[08:59] *** kanru joined
[09:00] *** RHainsworth joined
[09:00] *** RHainsworth left
[09:35] *** RHainsworth joined
[09:35] *** RHainsworth left
[10:01] *** autark_ joined
[10:13] *** RHainsworth joined
[10:17] *** elmex joined
[10:29] *** RHainsworth joined
[10:36] *** RHainsworth joined
[10:48] *** RHainsworth joined
[10:52] *** luqui joined
[11:00] *** chris2 joined
[11:06] *** iblechbot joined
[11:14] *** ferreira joined
[11:20] *** elmex_ joined
[11:26] *** RHainsworth joined
[11:26] *** RHainsworth left
[11:29] *** hugues23 joined
[11:34] *** pmurias joined
[11:34] <pmurias> karma pmurias

[11:34] <jabbot> pmurias: pmurias has karma of 11

[11:34] *** pmurias left
[11:39] <dduncan> karma my

[11:39] <jabbot> dduncan: my has karma of 1

[11:39] <dduncan> karma karma

[11:39] <jabbot> dduncan: karma has neutral karma

[11:40] <dduncan> karma dduncan

[11:40] <jabbot> dduncan: dduncan has karma of 16

[11:42] *** RHainsworth joined
[11:42] *** RHainsworth left
[11:42] <ofer0> karma ofer0

[11:42] <jabbot> ofer0: ofer0 has neutral karma

[11:42] <ofer0> karma jabbot 

[11:42] <jabbot> ofer0: jabbot  has neutral karma

[11:56] *** RHainsworth joined
[11:58] *** RHainsworth left
[11:58] *** elmex joined
[12:11] *** ayrnieu joined
[12:12] *** dduncan left
[12:17] *** elmex_ joined
[12:18] *** iblechbot joined
[12:19] *** ferreira left
[12:20] *** TSa joined
[12:21] *** RHainsworth joined
[12:28] *** RHainsworth joined
[12:32] *** riffraff joined
[12:32] <riffraff> hi everyone

[12:34] <riffraff> dummy question: why sort() defaults to stringification oredering instead of relying on <=> ?

[12:36] <luqui> well, which one should it rely on?

[12:36] <luqui> <=> is numeric..

[12:38] <riffraff> I thought <=> was a multi operator defined for every kind of class.. and if it's not defined an error seems reasonable as default (i.e. can't order Complex numbers)

[12:38] <luqui> hmm, spec* ?

[12:39] <luqui> (that would certainly make me happy)

[12:39] *** RHainsworth left
[12:40] <riffraff> you mean "where do I got this idea?" sadly, I don't know, possibly I made it up :/

[12:40] <luqui> I'm looking it up

[12:41] <luqui> <=> is the numeric one

[12:41] <luqui> leg is the string one

[12:41] <luqui> cmp is the generic one

[12:41] <luqui> see S03, line 430

[12:41] <TSa> HaloO Luke

[12:42] <luqui> hello TSa

[12:42] <riffraff> indeed it says that sort should default to cmp

[12:42] * luqui wonders about 3 cmp "40"

[12:42] <luqui> er, 30 cmp "30"

[12:42] <luqui> etc.

[12:44] <TSa> depends on how &infix:<cmp>:(Int,Str) is defined

[12:44] <luqui> yeah, that's what I wonder about

[12:44] <TSa> Hmm, does it numerify the Str or does it stringify the Int

[12:45] <luqui> I have always wanted Int to be a subtype of Str

[12:45] <luqui> (which would imply stringification of Int)

[12:45] <riffraff> I hope it raises an exception 

[12:45] <luqui> but I think I was argued out of that at some point

[12:45] <TSa> in your example it doesn't matter

[12:45] <luqui> right, I didn't want to think hard enough to come up with an example where it did :-)

[12:45] <TSa> Int <: Str ? why that

[12:45] <luqui> that's essentially what all the autocoersion complexity is doing

[12:46] <luqui> just say "every string that looks like an Int is an Int"

[12:47] <luqui> ahh, that be the problem.  pugs thinks cmp is string comparison

[12:47] <luqui> ?eval 30 cmp 4

[12:47] *** RHainsworth joined
[12:47] *** evalbot_r14942 is now known as evalbot_r14952

[12:47] <evalbot_r14952> -1

[12:48] <TSa> I think numerifying the Str is saner

[12:49] <TSa> how should a string like 'blah' be handled? 0 or NaN?

[12:49] <luqui> TSa, exactly...

[12:49] <luqui> 'blah' is not an int

[12:49] <luqui> but '42' is

[12:49] <luqui> so if you say 'blah' + 3, it ought to be an error

[12:50] <luqui> but I guess some people might have a problem with that (I wouldn't)

[12:52] <TSa> is NaN an exception? Or would NaN + 3 just maintain the NaN?

[12:52] <luqui> I think it behaves like Nullity ;-)

[12:52] <luqui> (i.e. maintain the NaN)

[13:01] *** buetow joined
[13:31] <svnbot6> r14953 | luqui++ | Bring pugs up-to-date on cmp and sort semantics.

[13:32] *** metaperl joined
[13:33] <metaperl> after downloading audreyt's ghc-6.6 for macosx, how do you install it?

[13:38] <metaperl> ok cool, the INSTALL instructions were for a binary install. they appear to have worked

[13:44] <Juerd> TimToady: :)

[13:57] *** ofer0 joined
[14:17] *** metaperl left
[14:24] *** Nei joined
[14:35] *** Jedai joined
[14:42] *** diakopter joined
[15:02] *** weinig|bbl is now known as weinig

[15:13] *** nipra joined
[15:29] *** xdg joined
[15:48] *** AtomicStack joined
[16:15] *** weinig is now known as weinig|bbl

[16:22] *** cognominal joined
[16:35] *** bernhard joined
[16:59] *** larsen_ joined
[17:24] *** Schwern joined
[17:51] <gaal> 4http://homepages.cwi.nl/~ralf/JavaGI/

[17:51] <lambdabot> Title: JavaGI: Generalized Interfaces for Java

[17:51] <gaal> s/^4//

[17:52] *** tumulus joined
[17:52] <tumulus> hello!

[17:52] <tumulus> If I may, I have a Perl 6/Pugs question that arose out of a typo

[17:53] <tumulus> 4++ gives an error as expected, but ++4 does not - is that Perl 6 magic I've not found in the synopses, or just a pugs bug?

[17:53] *** andara joined
[17:53] <tumulus> ?eval 4++

[17:53] *** evalbot_r14952 is now known as evalbot_r14953

[17:53] <evalbot_r14953> Error: Can't modify constant item: VInt 4

[17:53] <tumulus> ?eval ++4

[17:53] <evalbot_r14953> 4

[17:53] <gaal> looks like a bug to me. could you add a test please?

[17:53] <gaal> (do you have a commit bit?)

[17:54] <tumulus> surely can, but no :-)

[17:54] <gaal> so /msg me your email address please

[17:55] <gaal> you need to be registered in freenode to do that

[17:55] <tumulus> doh!

[17:55] <gaal> yeah :(

[17:55] <tumulus> well, marty at cpan.org should work fine :-)

[17:56] <gaal> invitation sent :) please add yourself to AUTHORS

[17:56] <tumulus> thank you

[17:58] <gaal> youwelcome

[17:58] <gaal> you're welcome

[17:58] <gaal> i gotta vamoose for a bit

[18:09] <svnbot6> r14954 | andara++ | [runpugs]

[18:09] <svnbot6> r14954 | andara++ | -be kind to feather: better management of preloaded sessions. 

[18:09] <svnbot6> r14954 | andara++ | Please test the devel version: http://feather.perl6.nl:8080/runpugs/

[18:09] <svnbot6> r14954 | andara++ | -fixed non-interactive runpugs, now at

[18:09] <svnbot6> r14954 | andara++ | http://feather.perl6.nl:8080/cgi-bin/runp6script

[18:09] <lambdabot> Title: Run Perl 6 Now -- in your browser!

[18:09] <svnbot6> r14955 | tumulus++ | Adding my name to check commit bit

[18:09] <lambdabot> Title: Run Perl 6 Now -- in your browser!

[18:14] <svnbot6> r14956 | tumulus++ | test pre/post inc/decrement on literal values

[18:16] *** weinig|bbl is now known as weinig

[18:16] <diakopter> does anyone know if goto is implemented in pugs?

[18:25] <tumulus> I believe goto sub is, but goto label isn't

[18:45] <diakopter> found another bug with the smartlinks

[18:45] *** Schwern joined
[19:12] <diakopter> andara: are you there

[19:20] <andara> diakopter: yes, though on&off

[19:22] <diakopter> is runpugs doing window/tab-close detection?  I wrote a .js that has a onunload handler that reliably detects window/tab close events in firefox and ie with no false positives.  you could use it to send a background get/post to a url that notifies the server to kill a runpugs session that's no longer wanted.

[19:23] <diakopter> (we use it at work to detect closed windows to kill persistent websphere sessions)

[19:23] <andara> diakopter: that sounds great. At the moment runpugs doesn't detect window/tab close. It just times out and then cleans up.

[19:23] <diakopter> oh.  how long is the timeout

[19:25] <andara> diakopter: 10' at the moment -- had to check that :-)

[19:27] <andara> diakopter: your script would be really helpful. Could you add it to the repository?

[19:27] <diakopter> of course, you could have it trigger the killsession post on every onunload, since you can probably assume that if someone is navigating to another page from the same window/tab, they probably don't want to retain their runpugs session.

[19:27] <diakopter> whereas with standard web applications, you can't really assume that

[19:27] <diakopter> although, I'm not sure how runpugs works - does it do posts/reloads or background ajax

[19:28] *** cognominal joined
[19:28] <andara> diakopter: it uses post in a hidded inline frame

[19:28] <diakopter> ah

[19:28] <andara> s/hidded/hidden/

[19:28] <andara> one of the TODOs is to use proper AJAX :-)

[19:29] <diakopter> I'm not sure if an enclosed iframe causes the parent to do onunload

[19:30] <diakopter> http://www.ajaxtoolbox.com/request/source.php   is my favorite drop-in xmlhttprequest-only api.  

[19:30] <lambdabot> Title: Ajax Toolbox / XMLHttpRequest AjaxRequest Library / Source

[19:31] <andara> diakopter: have to go now. I'd very much like to have a look at your script. cheers!

[19:31] <diakopter> ok.  i'll nopaste it sometime when you're around

[19:32] <andara> ok, thanks. 

[19:40] <pasteling> "diakopter" at 64.79.206.82 pasted "js window/tab closing onunload handler" (24 lines, 1.5K) at http://sial.org/pbot/22051

[20:00] *** justatheory joined
[20:02] *** justatheory joined
[20:04] *** Southen joined
[20:13] *** ravehanker joined
[20:15] *** araujo joined
[20:18] *** weinig is now known as weinig_

[20:18] <ravehanker> Show off your Programming Skills and Walk away with 1000USD on new year's eve! go to http://opc.kurukshetra.org.in

[20:18] <lambdabot> Title: Online Programming Contest

[20:21] *** ravehanker left
[20:22] <Juerd> Fscking spammers

[21:17] *** andara left
[21:24] <svnbot6> r14957 | Ovid++ | Add comments to show a better solution when subsets are available.

[21:24] <svnbot6> r14958 | Ovid++ | Solve permutation problem

[21:25] *** Traveler4 joined
[21:25] <svnbot6> r14959 | Ovid++ | Oops.  Some of the auto-generated tests didn't compile.  Fixed.

[21:26] *** Traveler4 left
[22:22] *** Schwern joined
[22:29] *** nipra joined
[22:37] *** perlDreamer joined
[22:39] *** Aankhen`` joined
[22:47] *** dduncan joined
[22:47] <perlDreamer> There is a note in t/operator/inc.t:Verify that addition/subtraction properly upgrade to doubles.

[22:47] <perlDreamer> These tests are only significant on machines with 32 bit longs,

[22:47] <perlDreamer> and two s complement negation, but should not fail anywhere.

[22:47] <perlDreamer> is this a pugs-ism or is it Perl 6?

[22:48] <perlDreamer> sorry, is that upgrade to doubles particular to pugs, or is it for all implementations of perl 6?

[22:50] *** weinig_ is now known as weinig

[22:59] *** thseiler joined
[23:02] *** luqui joined
[23:03] *** Psyche^ joined
[23:10] *** weinig is now known as weinig|bbl

[23:17] <svnbot6> r14960 | luqui++ | Tpyo in runpugs help.

[23:19] *** Psyche^ is now known as Patterner

[23:47] <perlDreamer> ?1+2

[23:47] <lambdabot> Unknown command, try @list

[23:47] <perlDreamer> @list

[23:47] <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot/COMMANDS

[23:47] <perlDreamer> ? 1+2

[23:49] <dduncan> ?eval 1+2

[23:49] *** evalbot_r14953 is now known as evalbot_r14960

[23:49] <evalbot_r14960> 3

[23:49] <dduncan> perlDreamer, that's how you do it

[23:50] <perlDreamer> ah, thanks

[23:50] <allbery_b> gotta be careful, at least two bots respond to leading ? (but lambdabot only speaks haskell, not perl)

[23:50] <perlDreamer> ?eval |('a','b','c')

[23:50] <evalbot_r14960> ("a", "b", "c")

[23:51] <perlDreamer> ?eval $aa = |('a','b','c'); say $aa

[23:51] <evalbot_r14960> OUTPUT[a b c␤] Bool::True

[23:53] <TimToady>  why didn't it require a "my", I wonder...

[23:54] <TimToady> ?eval $x = 1

[23:54] <evalbot_r14960> \1

[23:54] <luqui> weird

[23:54] <TimToady> maybe it's non-strict

[23:54] <luqui> is that even implemented?

[23:54] <luqui> ?eval use strict; $x = 1

[23:54] <TimToady> used to always complain without my

[23:54] <evalbot_r14960> Error: *** Unsafe function 'use' called under safe mode␤    at -e line 16, column 7-68

[23:54] <luqui> aww

[23:55] <perlDreamer> ?eval ($aa) = |('a','b','c'); say $aa

[23:55] <evalbot_r14960> OUTPUT[a␤] Bool::True

[23:56] <perlDreamer> ?eval ($aa) = ('a', 'b', 'c'); say $aa

[23:56] <evalbot_r14960> OUTPUT[a␤] Bool::True

[23:56] <perlDreamer> interesting

[23:56] <TimToady> | would be a no-op there

[23:56] <luqui> ?eval ('a','b','c') === <a b c>  # easier to write

[23:56] <evalbot_r14960> Bool::True

[23:57] <perlDreamer> there's a test (t/operator/splat.t) that uses that syntax.

[23:57] <perlDreamer> maybe it's not such a good test :)

[23:59] *** Psyche^ joined
[23:59] <TimToady> the | operator really only makes a difference when interpolating into a capture context that has to lazily decide where the argument boundaries are.

