[00:01] *** stevan joined
[00:03] <putter> xinming: linux/fedora

[00:07] <Juerd> putter: Do you like Fedora?

[00:13] *** stevan joined
[00:14] *** Khisanth joined
[00:21] <putter> Juerd: mixed feelings.  though with dual caveats of 1- I've been using it / redhat for a long time, so it becomes unclear whether remembered failings reflect current state, and 2- I'm running a rev+ back from edge, so no doubt things have improved.

[00:27] <Juerd> putter: Have you ever tried Debian Sid or (k)Ubuntu?

[00:28] <Juerd> afk  # z

[00:28] <putter> if I was currently spread across multiple boxes, I'd probably do debian stable on one for services, and debian "I dont care if it breaks every month" on another, for development.  fedora manages to be a somewhat cruft compromise between the two.  gentoo isnt an option because it makes "state of the tool chain" too unceratain.

[00:29] <putter> I've done ubuntu for family, but not myself.  mepis also.  no experience with sid.

[00:29] <Juerd> Debian Sid doesn't break every month. It usually breaks notably once a year, and I think it's very much worth the little struggle.

[00:30] <putter> hmm.  what do you think of as the biggest downside of sid?

[00:30] <wolverian> the ubuntu server distribution isn't bad either.

[00:30] <Juerd> putter: That you MUST keep up with it, for a box that hasn't seen any updates in 2 years is hard to get back on track.

[00:31] <mugwump> Mark Shuttleworth gave some great arguments why you shouldn't care which debian variant you use at Linux.conf.aui

[00:31] <Juerd> mugwump: Well, he forgot some practical points.

[00:31] <mugwump> or, you shouldn't care that you're using a variant, anyway

[00:31] <Juerd> But in general, he's very right.

[00:32] <Juerd> wolverian: I've yet to use Ubuntu for a server. I find it a bit scary, because I'm not used to it and don't know its quality.

[00:32] <mugwump> ubuntu is actually capable of libc upgrades within a week or two rather than the 6 months+ time it takes Debian

[00:32] <mugwump> or gcc upgrades, etc, where lots of packages are affected

[00:32] <Juerd> wolverian: Also I don't really like the idea of releases with a server, but that's because it makes me think of Redhat, so it's a bad argument.

[00:33] <Juerd> mugwump: Hardly an issue for users.

[00:33] <Juerd> I'm going to bed now

[00:33] <Juerd> Goodnight

[00:33] * putter remembers irrecoverably smashing a mepis by doing apt-get update, which at the time turned out to be documented as a "we have non-standard packages - you _will_ die" no-no.  perhaps choice of variant matters.

[00:33] * mugwump waves

[00:34] <putter> good night Juerd &

[00:34] * putter reconsiders upgrading fedora this week...

[00:36] <putter> mugwump: re libc, that sounds like a receipt for never being certain what's causing your language runtimes to be flakey. ;)

[00:37] <mugwump> what I mean is, say you want to upgrade the libc in unstable for the next release.  Canonical can get 3 devs to spend 1 week to do the whole thing.  Debian gets every package maintainer to do it individually.

[00:37] <putter> ahh.

[00:38] <mugwump> Say it's a new libc or gcc, the problems faced will be similar for all packages being recompiled, for instance extra compile warnings etc.

[01:24] <svnbot6> r8839 | audreyt++ | * Change the message text in Makefile.PL for people with GCC 4.0

[01:24] <svnbot6> r8839 | audreyt++ |   on Tiger and make it clear that an upgrade to GHC 6.4.1 is preferred.

[01:25] <wolverian> mm.. foo($bar) ⇒  grep →  $x { baz $x - 2 } ⇒  say; # sexy 

[01:26] <audreyt> surely you mean ==> ?

[01:26] <wolverian> it's a unicode wide character that I aliased to ==>

[01:26] <audreyt> ahh.

[01:26] <audreyt> clever

[01:27] <xinming> audreyt: pugs will encounter the seg fault. :-/

[07:59] *** ilogger2 joined
[08:10] *** nothingmuch_ joined
[08:10] <svnbot6> r8840 | audreyt++ | * It turns out that autoflush of stdin/stdout is sufficient to

[08:10] <svnbot6> r8840 | audreyt++ |   avoid infinite loop in readline's signal handling.  Therefore

[08:10] <svnbot6> r8840 | audreyt++ |   we revert the sigwinch/signal disabling as it causes xinming's

[08:10] <svnbot6> r8840 | audreyt++ |   debian system segfault.

[08:10] <nothingmuch_> weeeeeeeeeeeeeird

[08:10] <nothingmuch_> we have a machine

[08:11] <nothingmuch_> we have two users

[08:11] <nothingmuch_> one user runs a process fast

[08:11] <nothingmuch_> the other does not

[08:11] <nothingmuch_> (load goes up to 0.03)

[08:11] <nothingmuch_> lsof lists nothing odd in terms of data files that could be slow

[08:11] <nothingmuch_> benchmarking reads/writes is also weird

[08:11] <nothingmuch_> i think i need to strace it

[08:16] *** geoffb joined
[08:20] *** BakedB joined
[08:46] *** nothingmuch_ is now known as nothingmuch

[09:00] *** drbean_ joined
[09:09] *** kane_ joined
[09:46] <svnbot6> r8841 | audreyt++ | * remaining of TODOization, forgot to commit yesterday.

[09:58] *** dada joined
[10:40] *** r0nny joined
[10:50] *** drbean joined
[10:54] *** G2 joined
[11:23] *** pdcawley joined
[11:25] *** nothingmuch joined
[12:11] <svnbot6> r8842 | audreyt++ | * Fix the dreaded expression inferencing bug that made

[12:11] <svnbot6> r8842 | audreyt++ |     $.foo.bar()

[12:11] <svnbot6> r8842 | audreyt++ |   fail to dispatch on the runtime type of $.foo.

[12:11] <svnbot6> r8842 | audreyt++ | * Consequently, DFA.t now passes all its tests.

[12:13] *** feng123 joined
[12:39] *** rantanplan_ joined
[12:45] <svnbot6> r8843 | audreyt++ | * Tree.pm: repair the use of private methods.

[12:49] *** r011 joined
[12:54] <svnbot6> r8844 | audreyt++ | * HTTP::Headers::Util: Reword the destructive and not-quite-working

[12:54] <svnbot6> r8844 | audreyt++ |   algorithm with a cleaner gather/take.

[13:00] *** r011 left
[13:03] *** chris2 joined
[13:12] *** iblechbot joined
[13:15] <svnbot6> r8845 | audreyt++ | * Because named arguments cannot be bound positionally anymore,

[13:15] <svnbot6> r8845 | audreyt++ |   Test.pm's 1-basic.t no longer treats

[13:15] <svnbot6> r8845 | audreyt++ |     is(1, 2, 'feature')

[13:15] <svnbot6> r8845 | audreyt++ |   as a synonym of

[13:15] <svnbot6> r8845 | audreyt++ |     is(1, 2, :todo<feature>)

[13:21] <svnbot6> r8846 | audreyt++ | * more test triaging: removal of flunk() and TODOization.

[13:33] *** kolibrie joined
[13:37] *** orafu joined
[14:09] <audreyt> some help on triaging the remaining module test failures (Perl6::Value::List, Span, Set::Infinite) would be appreciated

[14:09] <svnbot6> r8847 | audreyt++ | * Set::Infinite - some workarounds for the chained method call bug;

[14:09] <svnbot6> r8847 | audreyt++ |   thinking about how to solve it properly...

[14:11] <audreyt> for people with embedded parrot segfaulting before, please re-test with r8848.

[14:11] <svnbot6> r8848 | audreyt++ | * disable runcore selection for parrot as it causes too many

[14:11] <svnbot6> r8848 | audreyt++ |   unidentifiable segfaults.

[14:22] <Juerd> I'll upgrade feather tonight

[14:23] <Juerd> It's quite expensive memory, but I have it around and no direct purpose for it, so perhaps it'll go down again later to have it replaced with cheaper memory :)

[14:23] <audreyt> sure :)

[14:24] <theorbtwo> How much RAM is feather going to have?

[14:24] <Juerd> theorbtwo: It has 2*512 now, it'll have 2*1024 later.

[14:24] <Juerd> theorbtwo: And that't the max for this board

[14:24] <Juerd> At least it'll accommodate two more builds in memory :P

[14:24] <Juerd> Without swapping

[14:25] <Juerd> Do we know why the compilation process is *so* memory hungry, by the way?

[14:25] <theorbtwo> Wow.

[14:25] <Juerd> theorbtwo: Wow re what?

[14:26] <integral> it's the big files like Pugs.Run afaik.

[14:27] <integral> I believe it's because the prelude is a big haskell structure, so it's being partially evaluated etc by the compiler

[14:27] <theorbtwo> 2GB is a lot of ram to me.

[14:27] <audreyt> integral: yeah, it's controlled by precompile_prelude: true in config.yml

[14:27] <Juerd> integral: Is GHC inefficient, or because it's used wrong?

[14:27] <audreyt> integral: at this moment it's possible already to turn the parse tree into YAML and load back

[14:27] <ayrnieu> theorbtwo - I sympathize -- I'm still blown away by my quick succession of 1G RAM machines :-)

[14:27] <Juerd> i.e. what do we blame? :)

[14:27] <audreyt> Juerd: me, as usual

[14:27] <integral> audreyt: maybe we should get that done then :)

[14:28] <integral> 10000 line haskell files are never good ideas ;)

[14:28] <Juerd> audreyt: That won't do. You don't compile manually, do you? :)

[14:28] <audreyt> Juerd: I do 

[14:28] <audreyt> integral: indeed

[14:28] <integral> hmm, so this would take a new script to kick off the precompiling, and a new template to stuff the YAML into

[14:29] <theorbtwo> integral: Planning on fixing after pending release, I think.  Possibly better to release with precompiled prelude off?

[14:29] <integral> theorbtwo: not my call, I don't do releases :)

[14:30] <Juerd> audreyt: Hmmm... Do you have that much RAM? :)

[14:30] <Juerd> audreyt: Amazing :)

[14:30] <audreyt> 768mb :)

[14:30] <Juerd> That explains a lot.

[14:33] <audreyt> theorbtwo: with precomp off, "make test" takes longer

[14:33] *** Qiang joined
[14:33] <audreyt> and test time > compilation time

[14:34] <theorbtwo> Only if you do a full test run every time you compile.

[14:36] <Juerd> audreyt: That's certainly true

[14:37] <audreyt> but incremental compile, as long as you don't touch Pugs.AST etc, won't recomp Run.hs

[14:37] <Juerd> theorbtwo: What other tests are there?

[14:37] <Juerd> audreyt: But automated compiles have to make clean first, because once every few months, it's needed.

[14:38] <integral> at one point didn't we have optimizations turned off on Run.hs specifically?

[14:38] <Juerd> I'd love to have something like ccache, for ghc

[14:38] <audreyt> integral: turns out with ghc 6.4.1, that takes _more_ memory

[14:38] <audreyt> Juerd: ghcuses ccache

[14:38] <integral> audreyt: eww :)

[14:38] <Juerd> audreyt: Then I want even more layers :)

[14:38] <integral> presumably we do a mv-if-diff type thing?

[14:39] <audreyt> integral: hm?

[14:39] <audreyt> ah, good idea

[14:39] <integral> ie generate the prelude to a tmp file, and only replace it if it's different

[14:42] <audreyt> *nod* want to take a stab? :)

[14:43] <audreyt> (it's getting late here so my typing gets slow)

[14:43] <stevan> hello all :)

[14:43] <integral> if someone gives me a hint how to do cmp(1) in a way that'll work on windows

[14:44] <audreyt> stevan: hey

[14:45] *** rantanplan_ joined
[14:45] <audreyt> integral: perldoc File::Compare

[14:45] <integral> thanks!

[14:45] <audreyt> :)

[14:49] <integral> oh, I don't think this is going to work because we have to build with the null prelude first

[14:49] <audreyt> mm

[14:49] <theorbtwo> So?

[14:49] <integral> well there's no point doing the mv-if-diff thing to the real precomp-prelude since we don't have an object for it anymore

[14:50] <theorbtwo> D'oh.

[14:50] <theorbtwo> Yes, very good point.

[14:50] <integral> and we can't just save the old Run.o since we don't know if there's another reason apart from prelude changes that it would need recompiled

[14:51] <theorbtwo> Right.

[14:52] <integral> hmm, so which YAML target do I use?  Parse-YAML?

[14:55] <audreyt> yup

[14:58] <nothingmuch> btw, audreyt: is there any plan to make e.g. 'use YAML qw/-Backend=Syck/' and the same for JSON?

[15:00] *** vel joined
[15:00] *** putter joined
[15:00] <putter> sigh.

[15:00] *** vytautas joined
[15:01] <audreyt> putter: ?

[15:01] <audreyt> nothingmuch: yes there is plan. no there is no code. yes you can commit :)

[15:01] * nothingmuch might be tempted to steal the XML::SAX code

[15:01] <nothingmuch> so that you can set up a per-site preference for YAML backend

[15:02] <nothingmuch> but code with specific requirements can explicitly create e.g. a YAML::Syck dumper handle

[15:02] <nothingmuch> http://www.quietrevolution.co.uk/

[15:04] <putter> audreyt:  re reverting readline: xinming's segfault is not a readline regression.  he tried using gcc 4 with ghc 6.4.0, a combination known not to work.  this was explained to him.  it's in INSTALL.  it's not a regression connected with the readline change.  when he raised it again with you, I considered flagging it, but thought that might be impolite.  sigh.

[15:07] * nothingmuch ponders Module::Backend::Provider and Module::Backend::Selector

[15:07] <audreyt> putter: nod, though that did prompt me to flag off sigwinch/sighandler and replace it with autoflushing stdio

[15:07] <nothingmuch> and then refactoring YAML, JSON, XML::SAX etc to use these

[15:07] <audreyt> putter: and so far there's no mysterious segfaulting/backspace problems with threaded builds here

[15:08] <audreyt> putter: so I think it may make more sense this way, as dduncan can keep using the NetBSD readline

[15:08] <audreyt> putter: but thanks for the headup

[15:14] *** BeoTW joined
[15:15] <putter> k

[15:15] <putter> could you give a one-line summary of current state?

[15:15] * putter svn up's

[15:17] <svnbot6> r8849 | audreyt++ | * unTODO unexpected successes and fix syntax mishaps.

[15:17] <integral> is there a single document describing how the build system fits together?  Like the responsibilities split between Makefile.PL, Setup.hs and the bodged perl scripts

[15:19] <audreyt> one-line summary: "I'm about to finish all non-module test triaging (yesterday I missed those that parsefailed without failing any subtests), and would appreciate help on triaging the remaining module failures"

[15:19] <svnbot6> r8850 | audreyt++ | * fix two more parsefails: "use Perl-6" now works, and BEGIN-time binding

[15:19] <svnbot6> r8850 | audreyt++ |   a block to &infix:<operator> can manufacture an infix operator.

[15:19] <svnbot6> r8850 | audreyt++ |   (previously it required a "sub{}".)

[15:20] <putter> tnx :)

[15:20] <audreyt> integral: I don't think there's one, no. simply put, Makefile.PL compiles a Setup.hs, and setup util/build_pugs.pl flags so it can call to ./Setup

[15:20] <audreyt> it does so by writing a Pugs.cabal file; Setup simply responds to it

[15:20] <integral> ah, okay.   It's not exactly what I was expecting but it's close enough :)

[15:20] <audreyt> that builds libHSPugs; afterwards it builds ./pugs.exe

[15:21] <putter> integral: capture that paragraph somewhere?  top of Makefile.PL?

[15:22] <integral> sounds a good idea!

[15:24] <putter> :) you or me?

[15:24] <integral> can you?  I've got messy checkouts everywhere :)

[15:24] <putter> doing...

[15:29] <putter> "Simply put, Makefile.PL compiles a Setup.hs, and setup util/build_pugs.pl flags so it can call to ./Setup.  It does so by writing a Pugs.cabal file; Setup simply responds to it.  That builds libHSPugs; afterwards it builds ./pugs.exe."   I didn't want to edit, for fear of altering meaning.

[15:31] *** arguile joined
[15:31] <audreyt> er, that means my meaning wasn't clear

[15:31] <svnbot6> r8851 | audreyt++ | * parse (but not handle) the "handles" form for subroutines and methods.

[15:31] <svnbot6> r8851 | audreyt++ | * fix syntax errors in delegation.t and lists.t.

[15:31] <audreyt> 1. Makefile.PL calls GHC to compile Setup.hs to ./Setup.exe

[15:31] <audreyt> 2. Makefile.PL writes a Makefile that would call util/build_pugs.pl upon "make"

[15:31] <audreyt> 3. build_pugs.pl writes a Pugs.cabal file based on the flags given in the Makefile.

[15:31] <audreyt> 4. build_pugs.pl calls ./Setup.exe.

[15:32] <audreyt> 5. Setup.exe builds dist/build/libHSPugs-6.XXX.YYY.a and returns to build_pugs.pl

[15:32] <audreyt> 6. build_pugs.pl calls GHC to build ./pugs.exe.

[15:32] <audreyt>    (by simply linking in the freshly built libHSPugs package.)

[15:33] <audreyt>     (with src/Main.hs.)

[15:33] <putter> great. :)  thanks.

[15:34] <audreyt> :)

[15:36] *** stevan_ joined
[15:37] <putter> "by simply linking the freshly built libHSPugs package with src/Main.hs", yes?

[15:37] <audreyt> yes.

[15:37] *** Eimi joined
[15:38] *** hexmode joined
[15:41] <putter> in

[15:41] <svnbot6> r8852 | putter++ | Makefile.PL: added a "Build System Overview" pod.  Makefile.PL is otherwise unchanged.

[15:42] <putter> audreyt++ integral++

[15:43] *** rodi joined
[15:44] <audreyt> woot

[15:44] <audreyt> putter++

[15:45] <theorbtwo> putter++

[15:45] <integral> audreyt: hmm, are you sure Parse-YAML is ready for the precompiled prelude?  It's got output of envGlob commented out at the moment

[15:46] <audreyt> integral: that... needs to change

[15:46] * integral sees what blows up when he uncomments it

[15:47] <putter> actually, one question I've had about the build system is at what point the PUGS_EMBED and PARROT_PATH variables no longer need to be set properly.  Just for Makefile.PL?  for make too?

[15:49] <audreyt> putter: I think they both are meant for Makefile.PL

[15:51] <putter> tnx

[15:53] * putter has a fuzzy impression of a multi-day shakedown after each change to the precompiled prelude build system...

[15:53] <putter> are we nominally targetting a Feb 1 release?

[15:54] * integral is putting in all the yaml code as additional to, rather than replacing

[15:54] <putter> ah :)

[15:55] <integral> I'll throw in a config.yml flag to control build_pugs,  at the moment you just pass --yaml to gen_prelude.pl

[15:56] <audreyt> putter: we are

[15:56] <svnbot6> r8853 | audreyt++ | * infix macros no longer parsefails

[15:56] <audreyt> which means preflight tomorrow once I wake up

[15:58] <integral> what's the difference between "askGlobal" and "asks envGlobal" in the Eval monad?

[15:59] <svnbot6> r8854 | audreyt++ | * stdrules.t: we don't support charnames.pm, so this test

[15:59] <svnbot6> r8854 | audreyt++ |   was testing something else entirely.  Fixed it by replacing

[15:59] <svnbot6> r8854 | audreyt++ |   \c[NAMED UNICODE CHARACTER] with \x[HHHH].

[15:59] *** justatheory joined
[15:59] <audreyt> ok. I think as of r8855, really all the main subtest failures are triaged.

[15:59] <audreyt> but I might have missed some. another round of smoke would be helpful tomorrow

[15:59] <putter> one capability which may or may not be of interest in future, is ghc being able to dump a post-optimization ast to a file, and then take it on the command line just like a .hs file.   but I have no idea how robust it is, file size, resource impact on compilation, etc.  just a random observation.

[16:00] <audreyt> integral: envGlobal points to a TVar.

[16:00] <svnbot6> r8855 | audreyt++ | * oops; add a missing right parens. also unTODO two more subtests.

[16:00] <audreyt> integral: so asks envGlobal gives a TVar, but askGlobal reads it for you

[16:00] <audreyt> putter: it's part of GHC 6.6 as libGHC, I think

[16:00] <integral> ah!

[16:01] <audreyt> putter: libGHC lets you manipulate all the ghci stuff, including bytecode loading and compilation etc -- much richer than hs-plugins as you have control over the entire compiler

[16:01] <audreyt> putter: there's also a lot of 6.6 features that I'm itching to use (or was hacked in specifically for pugs)

[16:01] <audreyt> putter: but those would have to wait :)

[16:03] <audreyt> ok, I think I'm too exhausted to journal tonight.

[16:03] * audreyt presses the "shift" key

[16:04] <audreyt> g'nite, see y'all tomorrow :)

[16:04] <audreyt> &

[16:04] <putter> g'night &

[16:04] <putter> hmm A05 and E05 both have \c[NAME NAME NAME], but not S05?

[16:05] <integral> night!

[16:07] <putter> audreyt: re \c[NAMED UNICODE CHARACTER], A05 and E05 both have such, but apparently not S05.   But that's why they are there.

[16:08] <audreyt> putter: pugs don't code to [AE]05 though.

[16:08] *** simon2 joined
[16:09] *** simon2 left
[16:09] <theorbtwo> Mentioned fairly often by $Larry on various MLs...

[16:10] <audreyt> but then, E07 also mentioned \c[2026]

[16:10] <audreyt> which is spelled \d[2026] nowadays

[16:11] <audreyt> in any case, it should below to S02

[16:11] <audreyt> after "Characters indexed"

[16:11] <audreyt> s/below/belong/

[16:11] <audreyt> a patch to p6l may make sense

[16:13] <putter> audreyt: yeah.  I believe it came over from damian's perl6::rules t/.

[16:15] <audreyt> ok.

[16:15] <audreyt> I've p6l'ed it.

[16:17] <putter> sorry for keeping you awake ;)

[16:18] <audreyt> 'sall good :)

[16:23] *** elmex joined
[16:33] * putter starts 8855 smoke

[16:40] *** cdpruden joined
[16:40] <svnbot6> r8856 | audreyt++ | * fix infinite loop in 20_win32_test.t (and File::Spec::Win32)

[16:40] <svnbot6> r8856 | audreyt++ |   so make smoke can continue.

[16:42] <audreyt> putter: you want 8856 smoke :)

[16:42] <svnbot6> r8857 | audreyt++ | * reword Algorithm::TokenBucket using postfix if.

[16:43] *** estel joined
[17:03] <svnbot6> r8858 | bsmith++ | Fixed the ghci makefile target by just making it depend on the pugs target.

[17:03] <svnbot6> r8858 | bsmith++ | I thought this would be more reliable than duplicated a build_pugs.pl line yet again.

[17:08] <ingy> audreyt: ping

[17:08] <ingy> audreyt++

[17:08] <ingy> Module::Install rocks

[17:09] <ingy> audreyt: I autobundled Test-Base into YAML

[17:10] <ingy> now YAML has no deps

[17:10] <ingy> but the thing was I needed 6 or 7 lines of Makefile.PL

[17:10] <ingy> what I really wanted was":

[17:10] <ingy> use_test_base;

[17:11] <audreyt> so define it in Module::Install::TestBase

[17:11] <ingy> I realized that I can distribute Module::Install::TestBase in Test-Base to do just that!!

[17:11] <audreyt> and use it locally

[17:11] <audreyt> yeah

[17:11] <putter> ingy: audreyt is (hopefully) catching Zzz's  (oh, never mind)

[17:12] <ingy> and now everyone can do it

[17:12] <audreyt> that's the whole point of Module::Install over CPAN::MakeMaker :)

[17:12] <rafl> ingy: Couldn't you do that before I packaged the whole dependency chain for Debian? :-)

[17:15] <putter> rafl's sisyphean labors continue... :)

[17:16] *** nothingmuch joined
[17:19] *** Shachaf joined
[17:27] <putter> re the macro thread currently on p6l, it would seem an ast could present a "I am lisp tree of lists" facade, no?  Which would both let us use the "n decades of effort" CL and scheme macro tech, and reduce the importance of having an unchanging ast.  an experiment for piln perhaps.

[17:28] <integral> that sounds a good idea!

[17:29] <svnbot6> r8859 | bsmith++ | * "fixed" make haddock by adding #ifndef HADDOCKs for the preludepc include in Pugs.Run, and around some uses of fancy features in Text.Parser.Kwid.

[17:29] <putter> And re default vs trait, why not just use type?  macro foo (Sexp $ast) {...}   and coerce:as does the right thing.

[17:30] <putter> integral: :)

[17:34] <audreyt> (please abort smoke and restart at r8860 -- sorry for the misfix.)

[17:34] <svnbot6> r8860 | audreyt++ | * redo.t was looping infinitely due to a misplaced

[17:34] <svnbot6> r8860 | audreyt++ |   precidence parsing for infix primitives, placing "=="

[17:34] <svnbot6> r8860 | audreyt++ |   as lower than "and".  Fixed.

[17:34] <audreyt> (was introduced in r8856)

[17:34] <rafl> audreyt: Any reason why PAR 0.91 isn't released yet?

[17:35] <audreyt> rafl: the reason is that Pugs 6.2.11 isn't released yet

[17:36] <audreyt> (either that, or tsee hadn't mastered the art of building parballs on win32 yet, or maybe he has other reasons)

[17:36] <audreyt> tsee is now the releng person for PAR, and I wouldn't be able to look at it before Pugs 6.2.11, so maybe ask tsee?

[17:36] <audreyt> (he's in irc.perl.org #perl)

[17:37] <audreyt> (ditto for Module::Install and Alias)

[17:38] <audreyt> putter: that listying ast idea is lovely

[17:38] <audreyt> putter: we already pretend a string facade on a ast, so why not sexp

[17:41] <rafl> audreyt: Will do so. Thanks!

[17:41] <audreyt> np :)

[17:47] <putter> well, re don't really do a string facade, but rather convert and then reparse.  we could certainly play the a similar game with sexp instead of string.  but the ast is rich, and sexp's are notably poor at containing "extra" bits.  so the challenge is to have a sexp which isnt just as complex as the ast.  I was wonder if

[17:51] <putter> the ast could merely pretend to be a simple sexp, eg, with apparently untyped argument symbols, but preserve the information as the macro moves things around.  new macro code would of course need the parse treatment.  I'm not sure it buys you enough to be worth it.  it would mean the macro could examine type info selectively (ie, it looks like a (define (f x) ...) but you can also match x with say (typedvar name type)).

[17:54] *** nothingmuch joined
[17:55] <putter> an alternative would of course be to have various flavors of sexp.  bare-scheme-like-sexp, sexp-with-type-info, etc.  macros which dont care about examining type info could use the simple version, macros which do would just have to deal with it everywhere.

[17:56] <audreyt> that sounds like... objects.

[17:56] <audreyt> ;)

[17:56] <putter> lol

[17:57] <putter> yeah.  but there's no reason something which looks like a mere symbol couldn't have... hidden talents. ;)

[17:57] <putter> s/but//

[18:02] * audreyt chuckles, waves, and sleeps (this time for real)

[18:02] <leo_> audreyt: parrotsketch :-)

[18:03] <putter> but I'm not sure how one toggles "ok, all formal-argument-symbols now pretend to be lists!" in a non-procedural macor system, pattern matching, like syntax-case.  hmm...

[18:03] <putter> good night audreyt &   putter says with just a hint of disbelief in his voice ;)

[18:03] *** G2 joined
[18:06] <putter> maybe just magic phrases like "typevar".  in procedural (list? formal-var) depends on context, in pattern, magic (de)constructors.

[18:07] <putter> s/in pattern,/in pattern, use/

[18:16] <putter> Juerd: re cafepress t-shirt: searching for "perl" and "perl6" does not find the "s:g/5/6/;" shirt.  perhaps some keywords should be added?  I also note "perl6" turns up nothing.  and neither turns up audreyt's t's.  "pugs" might, but with 200+ pages...  (only 120+ if one limits it to clothing, but still)  I haven't checked.

[18:16] <Juerd> Wha

[18:16] <Juerd> What the

[18:17] <Juerd> I switch on the screen, and there's a fresh message from you

[18:17] <Juerd> It's a bit scary

[18:17] <Juerd> Now I will read the message.

[18:17] <putter> lol

[18:17] <Juerd> I think that re the shirt, cafepress should be avoided. 

[18:17] <Juerd> If you want it findable, link to it

[18:18] <Juerd> perl6 is the shop name.

[18:18] <Juerd> Perhaps audrey can link to it on pugscode.org

[18:19] <putter> yes.  but someone who is at cafepress and searches for "perl" will find lots of perl swag, but not ours.

[18:19] <putter> which seems suboptimal perhaps

[18:20] <putter> but not worth worrying about.  i just mention it in case it was an oversight.

[18:20] <Juerd> I'm not intentionally making it hard to find

[18:21] <Juerd> But I am intentionally not making it easy to find

[18:21] <Juerd> Because I think such things should manage themselves. If people think the shirt is neat, they'll talk about it and it'll get found through that. If they do not, then apparently the shirt sucks, and would only pollute the search results.

[18:22] *** nnunley joined
[18:22] <Juerd> Also, the shirt is an inside joke, so hardly a PR thing.

[18:25] <putter> can one use a pugs with a precompiled Test.pm when smoking pil2js?  I'm not sure I understand the concequences of the choice, if any.

[18:32] *** vel joined
[18:51] <robkinyon> sometimes the best pr is an inside joke

[18:51] <svnbot6> r8861 | audreyt++ | * fp.pm, string_returning_macros.t, my.t:

[18:51] <svnbot6> r8861 | audreyt++ |   fix remaining regressions and parsefails.

[18:51] <svnbot6> r8861 | audreyt++ |   (Set-Infinite, Span, Perl6-Container-Array and

[18:51] <svnbot6> r8861 | audreyt++ |    Perl6-Value-List still needs help.)

[18:52] * lypanov giggles

[18:52] * lypanov remembers several hours back audreyt saying she was heading to bed ;)

[19:07] <putter> well, for whatever it's worth, there's a smoke of r8860 up.  the rules falures indicate embedded parrot still segfaulting on me.

[19:08] <putter> I'll do a non-embedded p8861 now...

[19:12] <putter> lypanov: yeah.  on the one hand, when you're on a roll, its good to go with it.  on the other hand, it means your less productive the next day.  a well rested audreyt is amazing to behold.  fortunately for us poor mortals, it doesn't happen that often. :/

[19:12] <putter> s/your/you're/

[19:12] <lypanov> putter: /me grins. agreed

[19:15] * putter tries to picture pugs development where each day one woke up to a well rested audreyt chugging away.  that would be... more than a little bit mind-blowing.  ;)

[19:15] <putter> audreyt: enough hints for now? ;)

[19:18] * lypanov finds her sleeping pattern fairly sane

[19:18] <lypanov> larvae state for several days then 14 hour bursts

[19:19] * lypanov wishes he /didn't/ have to conform to standard 10-6 days

[19:25] <kattana_> "No rest for the wicked", its hard to sleep with voices whispering in your head.

[19:33] *** _bernhard joined
[19:38] *** nnunley joined
[19:59] *** vytautas left
[20:05] *** dduncan joined
[20:13] <svnbot6> r8862 | iblech++ | * Usual svn props.

[20:13] <svnbot6> r8862 | iblech++ | * EOLs at EOFs.

[20:16] <dduncan> so, should each ext/ have its own ChangeLog, or their changes be in Pugs' main changelog?

[20:16] <dduncan> I see some ext/ have changelogs and some don't

[20:19] <svnbot6> r8863 | iblech++ | ext/Span:

[20:19] <svnbot6> r8863 | iblech++ | * Several tests in span.t and unicode.t flunk()ed with "this tests is known to

[20:19] <svnbot6> r8863 | iblech++ |   hang", but this is no longer the case; with the flunk()s removed and the real

[20:19] <svnbot6> r8863 | iblech++ |   tests uncommented, the affected subtests pass just fine.

[20:19] <svnbot6> r8863 | iblech++ | * @array_of_spans[$index].stringify does find Span's stringify method (the

[20:19] <svnbot6> r8863 | iblech++ |   usual my $x = @array_of_spans[$index]; ...$x.stringify... works around this

[20:19] <svnbot6> r8863 | iblech++ |   bug, but I did *not* add this workaround as audreyt++'s r8842 indicates that

[20:19] <svnbot6> r8863 | iblech++ |   the bug /should/ be fixed).

[20:21] <dduncan> I would expect the failures I saw yesterday with Test-Builder would be fixed by r8842

[20:21] <dduncan> and several others besides

[20:21] <dduncan> as soon as I've rebuild, I'll continue checking ext/

[20:26] * Khisanth slowly gains enough grip to strangle Haskell

[20:29] <integral> the number 1 curse of haskell is variable names

[20:30] <svnbot6> r8864 | iblech++ | Pugs.Version: The copyright information still showed 2005, not "2005, 2006".

[20:30] <svnbot6> r8864 | iblech++ | Also, audreyt, have a look at Pugs.Version.disclaimer (still from r5444):

[20:30] <svnbot6> r8864 | iblech++ | Pugs.Version.disclaimer doesn't mention the Artistic License at all.

[20:30] <gaal> integral: you mean that they are named variables when they aren't? :)

[20:30] <gaal> rehi btw :)

[20:30] <integral> I mean if someone misleadingly names a variable you become more confused :)

[20:31] <gaal> ah, because there are no sigils?

[20:32] <integral> yeah, and reading the code is hard because you have to hold so much information in your head I find

[20:32] *** Aleph__ joined
[20:32] <gaal> well, that's what short functions and referential transparency are for :)

[20:32] <integral> yes, but Pugs seems to like to grow multipage functions ;)

[20:33] <gaal> audrey mentioned that's one of the reasons for rewriting the runcore. :)

[20:34] * integral agrees

[20:41] <Juerd> feather goes down in less than 5 minutes

[20:45] <integral> hmm, autrijus seems to have a darcs running, Juerd 

[20:45] <integral> oh, it's gone n/m

[20:50] *** Aleph__ left
[20:51] <Juerd> Damnit.

[20:52] <Juerd> Feather doesn't eat the new RAM.

[20:52] <Juerd> Three beeps.

[20:52] <integral> eep.  (eep.  eep.)

[20:52] <Juerd> I don't get it. Same brand, same speed, same latency, just double the size.

[20:53] <integral> dust?

[20:53] <Juerd> No dust as far as I can see.

[20:55] <Juerd> It's fscking now. At least there's some value to my visit :|

[20:55] * integral hates the propensity of journaled filesystems not to fsck frequently

[20:56] <Juerd> What's propensity?

[20:56] <integral> tendency

[20:57] <dduncan> now starting to smoke r8864

[20:57] <Juerd> This stuff fscks every 250 days. That's 2 bootups, on average :)

[20:57] <Juerd> That's often enough

[20:58] <dduncan> oh also, one of the recent shell updates messed things up again

[20:58] <dduncan> running the pugs shell results in incessant beeps

[20:59] <dduncan> while the backspace key still deletes, hitting it once removes the whole line like the key was held down

[20:59] <dduncan> this would have been after update 8839

[21:00] <dduncan> perhaps 8840 did it

[21:00] <putter> rehi.  smoke of r8861 up.

[21:01] <tewk> 

[21:01] *** Khisanth joined
[21:02] <dduncan> tewk, your encoding's incompatible

[21:02] <dduncan> try unicode/utf8

[21:03] <dduncan> so I can't see what you said

[21:05] <dduncan> but looking at the diff, r8840 only removed the signal lines; that shouldn't cause what I'm seeing

[21:06] * tewk just like so seend meaningless junk to #perl6 such as ls -al, exit, passwd: *****, or just a space followed by enter :)

[21:06] <Juerd> This memory should work according to the manual too.

[21:06] <tewk> launching a darwin smoke

[21:06] <dduncan> okay tewk, I can read what you said now

[21:09] <putter> iblech: is there any incompatibility between a pugs with precompiled prelude and a smoke-js?

[21:09] * putter smokes js

[21:10] <Juerd> *

[21:10] <Juerd> hate

[21:10] <Juerd> *

[21:10] <Juerd> s/\n//g;

[21:10] <putter> Juerd: what about only using one or the other memory card (assuming they dont have to go in as pairs).  perhaps one of the two is fried.

[21:11] <Juerd> putter: I've already tried all possible configurations

[21:12] <Juerd> One dimm in either bank, two dimms in either order

[21:12] <Juerd> Combined new with old

[21:12] <putter> :(

[21:12] <integral> the old still works hopefully...

[21:13] <Juerd> integral: Yes

[21:13] <Juerd> Hey, it's booting now

[21:13] <Juerd> Tried another combination of new/old

[21:13] <Juerd> It's hard to keep track of what I tried exactly.

[21:14] <Juerd> Though I had all possibilities covered

[21:14] <Juerd> It works because it only uses the old one :(

[21:14] <Juerd> It just ignores the 1024 one

[21:14] <Juerd> Leaving only 512

[21:14] <Juerd> I hate hardware

[21:14] <integral> :-(  oh well, hopefully we'll bin the precomp prelude soon

[21:15] <putter> audreyt: It might be worth adding a note to README's license information that... something like "developers should expect that pugs may be distributed under other terms in future".  or something.  basically so you can switch to GPL3, or Artistic, or whatever Perl6 ends up with, etc, without the linux kernel issue of "we'd have to get permission from all the contributors to switch".

[21:15] <dduncan> I wholeheartedly agree

[21:16] <theorbtwo> The thing to do, then, is point that out before you take patches from anybody, or give out committer bits.

[21:16] <Juerd> putter: Then still you would need permission from all previous contributors.

[21:16] <theorbtwo> ...and that.

[21:17] <Juerd> putter: I think it's more legal-proof to appoint one person (Audrey, I'd say) as the one who gets to decide.

[21:17] <Juerd> So that that is clear upfront.

[21:17] <dduncan> on another matter, OSCON 2006 is now asking for speaking proposals, due Feb 13th ... any of you going and/or want to talk?

[21:17] <Juerd> Still, permission from all previous contributors is needed in any case.

[21:18] <dduncan> but about pugs

[21:18] <dduncan> I'm fine if audrey is just assigned copyright for the pugs core

[21:18] <dduncan> or a certain small number of people

[21:18] <theorbtwo> So am I.

[21:18] <dduncan> that did most of the work

[21:19] <dduncan> doing this does make legal matters easier in general

[21:19] <dduncan> I say "certain small" since there are some others that did a lot of work, like spearheading the metamodel and pil and such stuff

[21:23] <Juerd> Any suggestions perhaps on how to get feather to accept the new ram?

[21:27] <Juerd> Hmmm

[21:27] <Juerd> Hmmmmmm

[21:27] <Juerd> I may have another option

[21:28] <Juerd> I have another box here, that is officially just a test box

[21:28] <Juerd> And every user knows it may go down at any point, without notification...

[21:28] <Juerd> Sounds quite attractive

[21:28] <integral> and good user training too.   They've got to learn that test means test sometime ;-)

[21:29] <Juerd> Hehe

[21:29] <Juerd> I'm just considering swapping the two boxes' hard drives

[21:30] <Juerd> Both have a P4 2.4

[21:30] *** lisppaste3 joined
[21:31] <Juerd> Oh, no users even currently

[21:31] <Juerd> Even better

[21:31] <Juerd> And, it's a P4 2.8

[21:31] <Juerd> So it'll be a CPU upgrade too

[21:31] <Juerd> ):

[21:31] <Juerd> eh

[21:31] <Juerd> :)

[21:31] <Juerd> Or maybe even >:)

[21:33] *** estel left
[21:48] *** rafl joined
[21:48] <Juerd> Damn, that box also doesn't like it.

[21:48] *** rafl joined
[21:48] <Juerd> Though the memory certainly does work in other boxes

[21:48] <Juerd> What the hell is going on.

[21:49] <integral> not a bios version thing?

[21:49] <Juerd> The changelogs don't say anything about memory

[21:56] <Juerd> I've never been good at giving up

[21:56] <Juerd> So I'm going to try another combination of parts

[21:57] * Juerd enjoys the free delicious hot chocolate milk

[21:57] <rafl> Juerd: Thank you!

[21:57] <rafl> Juerd: I finally got enough motivation to set up ctrlproxy on another box :-)

[21:58] *** rafl joined
[21:59] <Juerd> What's ctrlproxy, and has it anything to do with your connection cycling?

[22:00] <rafl> Juerd: It's an irc proxy that I need to use because perldition.org's ISP firewalls 6667. The cycling is caused by me being to stupid to configure it the right way in the first turn.

[22:01] <rafl> Juerd: Somehow it's still not working correctly. It says that it joined #parrot in irc.perl.org, but doesn't show me a #parrot window. Can someone tell me if I'm joined to that channel?

[22:01] <Juerd> I hate motherboard swapping. The things have too many screws :(

[22:02] <rafl> Therefor I don't use cases. ;-)

[22:04] <Juerd> That'd be rather annoying in a rack

[22:05] <rafl> That's also annoying at home, but it's less work for me. At work I have slaves that screw the machines there up and down if I want them to ;-)

[22:06] <putter> mmm, minions...

[22:08] <putter> ?eval 3

[22:09] <putter> svnbot has been gone for a while.  looks like evalbot is too.

[22:10] <putter> Juerd: electric screwdrivers?

[22:12] <Juerd> putter: Didn't carry any because I thought I'd be done in 5 minutes.

[22:12] <Juerd> Does a fan that came with a 2.4 GHz Pentium 4 properly cool a 2.8?

[22:15] *** rafl joined
[22:22] *** rafl joined
[22:22] <putter> Juerd: ?

[22:23] <rafl> OK, I'm hopefully done now.

[22:23] <putter> as in, a bit of surfing didn't turn up anything.

[22:23] <Juerd> putter: I've scrambled around parts from three systems and just the other second, saw the first signs of a booting system

[22:24] <Juerd> The less fun thing is that after this I need to reassemble the other two boxes from the parts I have left

[22:25] *** jiing is now known as Gniij

[22:29] *** rafl joined
[22:29] <putter> hmm.  eval_yaml.t has two tests.  they work under ./pugs -Iblib6/lib ..., but the second fails under smoke.  but if I reverse the order of the two tests, it works.

[22:34] <Juerd> So, feather's now theoretically faster

[22:34] <Juerd> But practically slower.

[22:35] <Juerd> I'll just sling it online and see how well it copes

[22:35] <Juerd> It may need a newer kernel

[22:39] *** hexmode joined
[22:44] * putter hopes Juerd is having fun...

[22:45] *** nothingmuch joined
[22:46] <Juerd> putter: Not really

[22:46] <Juerd> feather is back in the rack 

[22:46] <Juerd> Don't stress test it yet, please :)

[22:49] <Juerd> It's not coming up. Fuck.

[22:49] <Juerd> Oh, now it finally pongs

[22:49] <Juerd> First thing I'll do is upgrade the kernel, I think

[22:51] * putter notes that "return to known working state" seems to be fading into the distance

[22:51] <buu> Does anyone know who owns 'evalbot' ?

[22:51] <rafl> Juerd: The escape sequence in front of 'Please log out again' is broken. :-)

[22:52] <rafl> buu: Currently leo or luqi run's it, afaik.

[22:52] <buu> rafl: Hrm. It's named evalbot_xxx

[22:52] <buu> I was looking for 'evalbot' 

[22:52] <rafl> buu: That's the revision of pugs that it runs.

[22:52] <integral> leo said he'd restart it when feather came back.  But I think luqui runs it sometimes, and sometimes autrijus does too =)

[22:52] <buu> Apparently it's in use, but not registered.

[22:53] <buu> integral: No no, the nick, not the bot.

[22:53] <rafl> integral: And sometimes I do as well. :-)

[22:53] <integral> heh

[22:53] <Juerd> rafl: fixed

[22:53] <integral> buu: it doesn't use a single nick, it's not compatible with nickserv

[22:53] <buu> integral: You seem to be confuse

[22:53] <rafl> Juerd: Great. Now I can logout again. :-)

[22:53] <buu> integral: I said "Who owns the nickname evalbot"

[22:54] <buu> integral: not "how does the bot some times named evalbot_xxx get run"

[22:54] <integral> oh, sorry.  I should have said "who cares?  why?"

[22:54] <Juerd> rafl: Or watch the box compile :)

[22:54] <buu> integral: Because I want it =[

[22:54] <SamB> ?eval 1

[22:54] <buu> eval: 1

[22:54] <p5evalbot> buu: Return: 1 

[22:54] <buu> =/

[22:54] <integral> buu: umm, nickserv says that "Evalbot" isn't registered.

[22:54] <Juerd> disk i/o is really slow at the moment

[22:54] <Juerd> As if DMA is disabled, though it's S-ATA

[22:54] <buu> integral: Yeah, but it's inuse

[22:54] <integral> buu: msg it!

[22:54] <putter> buu: ahem: (17:44:38) buu: Does anyone know who owns 'evalbot' ?

[22:55] <rafl> Juerd: It doesn't even compile yet.. boring!

[22:55] <Juerd> rafl: :)

[22:55] <buu> putter: Yes?

[22:55] <integral> clearly not talking about the nick!

[22:55] <Juerd> rafl: Shall I do it in screen so you can watch? :)

[22:55] <rafl> Juerd: Sure, why not?

[22:55] <Juerd> Screen started. It's really slowly processing bash_completion now.

[22:55] <Juerd> Feel free to attach

[22:55] <Juerd> Just don't touch the keyboard :)

[22:56] *** Daveman joined
[22:57] <buu> integral: I so was.

[22:57] <rafl> Juerd: Hm.. how does that work if the screen isn't owned by me?

[22:59] <Juerd> rafl: Be root?

[22:59] <Juerd> > I came across your Web site, and your writeup on setting up a RAID1 on

[22:59] <Juerd> > Debian (http://juerd.nl/site.plp/debianraid), and would like to know

[22:59] <Juerd> > if you can modify your script for me to handle  the following: 4  SCSI

[22:59] <Juerd> > each with 36GB, and 2 SCSI each with 9.1 GB.  Kindly send me a perl

[22:59] <Juerd> > script that will do RAID on the above system.

[22:59] <Juerd> Of course I will gladly change the script for your specific application.

[22:59] <Juerd> My hourly rate for custom programming is EUR 75.00; International

[22:59] <Juerd> clients pay in advance.

[22:59] <integral> hah, hehe

[23:00] <rafl> Juerd: I still can't read /dev/pts/whatever then.

[23:00] <rafl> Juerd: But screen knows about multiuser sessions.

[23:00] <Juerd> rafl: Why can't you read it? it's 620, root:tty

[23:01] <rafl> Juerd: Oh.. it's root:tty.. tried it as juerd.

[23:01] <Juerd> sudo screen -x

[23:01] <dduncan> Juerd, that's quite a chunk of change

[23:02] <dduncan> how many hours is a typical job?

[23:02] <rafl> Juerd: Yes. Thought you started the screen as juerd.

[23:02] <rafl> Juerd: Configure your kernel!

[23:02] <Juerd> :)

[23:03] <putter> dduncan: dont forget you have to handle taxes out of it yourself.

[23:03] <dduncan> yes

[23:04] <dduncan> even so, currently the most I've ever charged someone is CDN$40/hr, for tasks under 10 hours, and $28 for tasks over 10 hours

[23:04] <dduncan> and even that, some people consider high

[23:04] <rafl> Juerd: No ipv6? :-)

[23:05] * putter goes to find a CDN converter...

[23:05] <dduncan> I think your figure would be over 100 cdn/hr

[23:06] <putter> CDN$40 for consulting would be _way_ low around Boston.

[23:06] <integral> dduncan: you seem really cheap

[23:07] <dduncan> perhaps ...

[23:07] <dduncan> getting more would be nice, but currently my only paid work is from locals

[23:08] <dduncan> also, my last employment position was about cdn$15.50/hr, up to 3 years ago

[23:08] * kattana_ makes note to outsource the actual work to dduncan

[23:08] <dduncan> which is low by local standards, but its where I was moving up from

[23:09] <dduncan> well, I am rather starved for paid work at the moment, so I'd probably be grateful

[23:09] <dduncan> partly this is because I was focusing on projects that don't pay anything right now

[23:09] <dduncan> ... ah, the smoke's done ...

[23:09] <kattana_> if its that bad maybe you should move somewhere with more tech

[23:10] <rafl> Juerd: Huh? IB in included in the kernel nowadays?

[23:10] <dduncan> ironically, Victoria BC is a big tech center

[23:10] <dduncan> maybe part of this is that what I've been paid for isn't too specialized yet ... typically a few random php things people want help with

[23:11] <integral> IB == Infiniband?

[23:11] <Juerd> rafl: "IB"?

[23:11] <rafl> Juerd: Infiniband

[23:11] <Juerd> I have no idea what that may be

[23:11] <Juerd> And no, no ipv6 :)

[23:11] <Juerd> Rogue addresses are a security risk

[23:12] <putter> http://salary.com/ claims the median salary of an entry level programmer in boston is $56k.

[23:12] <Juerd> When I do ipv6 I will do it properly

[23:12] <dduncan> smoke of r8864 is uploaded for darwin/haskell

[23:12] <Juerd> And only after careful consideration

[23:12] <putter> re, smoke, awesome.

[23:12] <dduncan> shows 98%

[23:13] <dduncan> hm, maybe 6.2.11 can go out today after all

[23:13] <rafl> Juerd: IB is ethernet, but fast and without ethernet. I thought the drivers were proprietary.

[23:13] <rafl> Juerd: I use it at work and was used to patch my kernel.

[23:14] <dduncan> it appears that the only red areas in the smoke are in 4 ext/ items

[23:14] <dduncan> I'll look at them in a couple hours ...

[23:14] <dduncan> I have to go out for yard work while there's still daylight

[23:15] <kattana_> victoria has been a tech hub historicly, but thats history now, tdot and mtl especialy are the growing areas, lots of game and design stuff in qc in general, web dev as well since the big telcoms are in the area

[23:15] <putter> t/magicals/env.t

[23:16] <dduncan> and yet, IT is one of the biggest industries here, tourism being the other one

[23:16] <dduncan> used to be natural resources, but that isn't so hot

[23:16] <dduncan> unfortunately, there's a lot of dot-net around here, and I like to avoid that

[23:17] <rafl> Juerd: entertaining!

[23:17] <dduncan> I don't move elsewhere partly because the climate is good here

[23:17] <Juerd> Should have extracted the kernel into tmpfs rather than this badly performing disk setup

[23:17] <dduncan> and I expect that a lot of work could be done by remote

[23:17] <Juerd> With 2 GB of RAM, it should fit :P

[23:17] <dduncan> anyway, back in a bit

[23:17] <rhesa> dduncan, i have outsourced some small jobs to robkinyon

[23:17] <kattana_> s/good/wet/

[23:18] <Juerd> rafl: Now look what you did

[23:18] <Juerd> fs/bio.c: In function 'bio_alloc_bioset':

[23:18] <Juerd> fs/bio.c:167: warning: 'idx' may be used uninitialized in this function

[23:18] <Juerd> That happened when you typed "sure" :)

[23:18] <rhesa> he's in the states, while i am in norway :)

[23:18] <dduncan> rhesa, I hear you

[23:18] <Juerd> I don't get english.

[23:18] <kattana_> outsourcing to the states? how odd

[23:18] <Juerd> "I read you" when you hear someone

[23:18] <Juerd> And "I hear you" when you read what they type

[23:19] <rafl> Juerd: Stop the build and I'll fix it..

[23:19] <dduncan> well, if you have other needs, let me know for consideratoin

[23:19] <rhesa> kattana_: most of my regular work is in the states anyway

[23:19] <kattana_> "I feel you" when you're a gangsta

[23:19] <putter> the ext/ failures match my micro-smoke or 8868 linux.

[23:20] <Juerd> rafl: Nevermind ;)

[23:20] <rafl> :-P

[23:20] <Juerd> I'll rebuild the other two boxes in the meantime...

[23:21] <Juerd> Instead of chat until the kernel is finished and then rebuild them :)

[23:23] <rafl> Juerd: Why? Don't you like night shifts?

[23:24] <Juerd> I don't like spending them in a data centre with people who speak a language I don't understand

[23:24] <Juerd> They are having hardware problems, I was having hardware problems. Communication could have helped us both.

[23:25] <rafl> OK.. I don't like being in data centres at all.

[23:25] <putter> dduncan: re your 3 t/magicals/env.t failures, I dont see anything similar on either past darwin smokes, or smokes on other platforms.  ???

[23:25] <rafl> Way too much noise..

[23:25] <Juerd> rafl: I like this particular one. They have a relatively silent work floor with free hot coco

[23:26] <Juerd> (or tea, or coffee, I just think the chocolate milk is splendid.)

[23:26] <rafl> Juerd: Is that the place where we'll sleep during fosdem and where you wanted to show me feather?

[23:27] <Juerd> The latter

[23:27] <Juerd> I wish we could sleep here instead of my office; it's much closer to Amsterdam

[23:27] <rafl> That's enough.. free choco milk, yay!

[23:27] <Juerd> lol

[23:27] <rafl> Juerd: We could tell them that we need to guard feather?

[23:28] <Juerd> Why tell anyone anything?

[23:28] <rafl> So we could sleep there.

[23:28] <Juerd> Haha

[23:28] <Juerd> No, that won't work

[23:28] <rafl> :-(

[23:30] <rafl> I think I'll leave now.. typing hurts. My fingers are wounded :-/

[23:31] <Juerd> Good luck

[23:31] <Juerd> Who'll keep me company now?

[23:31] <Juerd> Both webmind and rafl are going to bed

[23:31] <rafl> Start evalbot?

[23:32] <Juerd> Hehe

[23:34] <Juerd> Shit.

[23:35] <Juerd> One of the boxes doesn't boot because $colleague forgot to compile in support for sii sata controllers

[23:35] <Juerd> That's against our standard set of drivers :)

[23:36] <rafl> Go home and let him fix that box tomorrow!

[23:36] <Juerd> Hehehe

[23:36] <Juerd> No, I do stick to the rules

[23:36] <Juerd> If you break a box, you fix it :)

[23:36] <Juerd> Now if I could just find a bootable cd

[23:36] <Juerd> @#%$#^^$#

[23:36] <Juerd> I came here unprepared, unpacked.

[23:38] <rafl> Juerd: But he broke it..

[23:40] <Juerd> I see a box of ubuntu cd's in a closed office room

[23:40] <Juerd> How annoyingly frustrating.

[23:40] <putter> ok, the Span file failures are all the same - failure to find it's method stringify.  @a[0].ref is Span.  but @a[0].stringify() doesnt.

[23:42] <rafl> putter: iblech commited something concerning this issue today. Take a look at the commit log.

[23:43] <putter> will do.  it's the access via array which is key.  my $x = @a[0]; $x.stringify  works fine.

[23:45] <putter> sigh.  ok.  known problem.  the Span failures need core hacking.

[23:45] <putter> http://colabti.de/irclogger/irclogger_log/perl6?date=2006-01-30,Mon&sel=248#l395

[23:47] <Juerd> Broke a fucking s-ata connector on a mainboard

[23:47] <Juerd> Triple damnit.

[23:48] <Juerd> WHY do they make the cables so that they withstand almost everything, including chewing, but then invent such fragile connectors?

[23:49] <Juerd> And when will that kernel compile be ready, damnit

[23:51] <putter> Juerd: so you always know where the problem is.  if connectors were more robust, then sometimes it _wouldn't_ be the connector that failed.  that would be very confusing.

[23:51] <Juerd> putter: ...

[23:51] <Juerd> But now things break

[23:51] <Juerd> I don't mind cable connectors breaking

[23:51] <Juerd> I do mind headers on mainboards and harddrives breaking

[23:52] <Juerd> "We took a good look at the USB design and copied the good parts"

[23:52] <Juerd> No, morons, USB is rugged compared to this flimsy shit

[23:52] <rhesa> they didn't say where they copied the good parts to... 

[23:53] <putter> what is @.foo ?   .foo  ./foo  but @.foo???

[23:53] <putter> *chuckle*

[23:54] <Juerd> putter: has @.foo

[23:54] <Juerd> putter: has $.foo

[23:54] <Juerd> putter: Does that ring a bell yet?

[23:54] <rhesa> class attributes?

[23:54] <rafl> Juerd: re "when will that kernel compile be ready": Do it like I do.. get an instrument (like a bass) and practice when something compiles. That's the only way I survive those tons of pugs builds I need to do before I have some good Debian packages. :-)

[23:55] <Juerd> I'm in a data centre.

[23:55] <rafl> So what?

[23:55] <putter> Juerd: ah.  more like a wood-on-wood thunking noise, but yes. ;)  thanks

[23:55] <rhesa> even better: no neighbours complaining ;)

[23:55] * rhesa sympathises with Juerd 

[23:56] <Juerd> There goes feather with the new kernel

[23:56] <putter> rhesa: yes, tnx

[23:56] <rafl> Juerd: And my screen session dies.. :-(

[23:56] <Juerd> rafl: No instruments here :(

[23:56] <Juerd> rafl: That was to be expected

[23:56] <rafl> Juerd: Doesn't feather have a serial console?

[23:56] <Juerd> No

[23:56] <rafl> Juerd: Buy one and take it with you!

[23:56] <rafl> :-(

[23:58] <Juerd> Come up, feather

[23:58] <Juerd> Please don't fail on me now

[23:58] <Juerd> Pongs!

[23:58] <Juerd> Okay, now boot sshd

[23:59] <Juerd> Thanks for your speedy reply to my e-mail.  Unfortunately, I simply don't have the

[23:59] <Juerd> kind of money you are charging for your services.

[23:59] <Juerd> Again, thanks so much for your reply, and best wishes.

[23:59] *** azuroth joined
[23:59] *** stennie joined
