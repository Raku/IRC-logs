[00:21] *** mako132_ joined
[00:21] *** macroron joined
[00:54] *** cmatei joined
[01:17] *** daxim_ joined
[01:18] <gaal> audreyt: ping

[01:31] *** weinig is now known as weinig|zzz

[01:41] *** jmacclure joined
[01:46] *** knewt joined
[02:07] * gaal mooses

[02:15] * audreyt camels

[02:15] <audreyt> just sent off the grand semicolon refactoring to the synopsis

[02:16] <audreyt> now the fun begins on updating all the multi tests in t/ to switch to semicolons

[02:16] <audreyt> so they can all break ;)

[02:23] <svnbot6> r10978 | Darren_Duncan++ | ext/Relation/ : removed subset MainType ... though it may return later if actually useful

[02:26] *** amnesiac joined
[02:26] <svnbot6> r10979 | audreyt++ | * Now that the release is done (with the Japanese version

[02:26] <svnbot6> r10979 | audreyt++ |   of the Earendil poem), we switch to the Russian translation

[02:26] <svnbot6> r10979 | audreyt++ |   for the next version of Pugs.

[02:26] <svnbot6> r10980 | audreyt++ | * Pugs.Parser.Util: Parse for

[02:26] <svnbot6> r10980 | audreyt++ |     multi f ($x; $y; $z) { ... }

[02:26] <svnbot6> r10980 | audreyt++ |   note that this currently doesn't reject this invalid form:

[02:26] <svnbot6> r10980 | audreyt++ |     sub f ($x; $y; $z) { ... }

[02:26] <svnbot6> r10980 | audreyt++ |   nor this form:

[02:26] <svnbot6> r10980 | audreyt++ |     sub f ($self: $foo) { ...}

[02:26] <svnbot6> r10980 | audreyt++ |   more tests are definitely welcome.

[02:27] <audreyt> Slate++ # nice language, like Self before it, provides endless inspiration

[02:27] <audreyt> # http://slate.tunes.org/

[02:27] <lambdabot> Title: "Slate Language Website"

[02:27] <audreyt> stevan++ # for bringing back it into discussion at YAPC::NA speaker's dinner here

[02:31] *** macroron joined
[02:31] <svnbot6> r10981 | audreyt++ | * add unobe's link to INSTALL.  Probably going to reflect

[02:31] <svnbot6> r10981 | audreyt++ |   that to pugscode.org...

[03:09] <kolibrie> audreyt: nice write-ups in the synopsis changes

[03:11] <audreyt> danke

[03:11] <audreyt> chromatic says he doesn't hate it

[03:12] <kolibrie> bitte

[03:13] <kolibrie> the talk I didn't give is entitled "Practical Extraction with Perl 6"

[03:14] <kolibrie> I'm going to work on a grammar tomorrow to see if it is already easy

[03:14] <kolibrie> then bug TimToady and audreyt if it isn't

[03:16] <audreyt> yup

[03:16] <audreyt> you can use regex/token/rule with pugs

[03:16] <audreyt> and have the whole q:code/macro now

[03:16] <audreyt> so should be... interesting to try some sort of extraction tasks

[03:16] <kolibrie> yes, but can I define whitespace to be <any>?

[03:16] <audreyt> rule ws

[03:16] <audreyt> should do it

[03:16] <audreyt> I think. try it!

[03:17] <audreyt> (if it doesn't work write a test, etc, etc, you know the drill)

[03:17] <kolibrie> that's the plan

[03:17] * audreyt sees kolibrie smiling and nodding

[03:17] <audreyt> "I'm blogging you blogging me!"

[03:17] * gaal rolls his antlers

[03:17] <audreyt> yourolled a 6

[03:17] <gaal> }:)

[03:17] <audreyt> 6:)

[03:30] *** scook0 joined
[03:34] <svnbot6> r10982 | gaal++ | yaml_harness.pl:

[03:34] <svnbot6> r10982 | gaal++ | * Use unqualified names, so any YAML provider's functions

[03:34] <svnbot6> r10982 | gaal++ |   may be called.

[03:34] <svnbot6> r10982 | gaal++ | * Help text.

[03:58] *** rlb3 joined
[03:58] <svnbot6> r10983 | lwall++ | $sig ~~ s/:/;/ cleanup

[04:09] *** jkanter joined
[04:23] *** phpError joined
[04:30] *** dduncan joined
[04:37] *** cmarcelo joined
[04:54] <nothingmuch> møøse

[04:59] <audreyt> moose

[04:59] <clkao> m<hotspring><hotspring>se

[05:08] *** rlb3 joined
[05:10] <nothingmuch> audreyt: i was actually sober enough to code

[05:10] <nothingmuch> i know this because I *did* code

[05:10] <nothingmuch> and my code passed tests

[05:10] <nothingmuch> subsequently i became distracted though

[05:10] <audreyt> feel free to post a comment to say that

[05:10] <nothingmuch> naaaaaaaah

[05:10] <TimToady> in the morning you will see that the tests were incorrect. :)

[05:10] <nothingmuch> vanity--

[05:11] <nothingmuch> TimToady: quite possibly =)

[05:11] <audreyt> TimToady++

[05:11] <PerlJam> Would you guys be called yapcteers?

[05:12] <PerlJam> or yapcotics?

[05:12] <PerlJam> yapcrobats perhaps

[05:12] <nothingmuch> then again, i can just commit the tests and let a sober entity confirm their correctness

[05:13] <svnbot6> r10984 | audreyt++ | * explicitly require Best 0.05+ for our tests.

[05:14] <TimToady> well, I only broke the build...

[05:14] <TimToady> doesn't seem to like

[05:14] <TimToady> multi sub longmess (; $e = '')

[05:14] <TimToady> in the Prelude

[05:15] <TimToady> (used to be a colon)

[05:15] <TimToady> audreyt: did your change not cover that case?

[05:15] <audreyt> verifying

[05:15] <audreyt> what that mean though

[05:15] <audreyt> does it mean that it's always dispatched?

[05:15] <audreyt> (because 0 is shortest arity)

[05:15] <TimToady> it means it's dispatched like ()

[05:16] <audreyt> yeah but anything can fit 0

[05:16] <audreyt> longmess("foo") will have no problem

[05:16] <TimToady> but it's least specific

[05:16] <nothingmuch> good night people, i'm off to bed

[05:16] <nothingmuch> thanks for a lovely evening, YAPC speakers

[05:16] <TimToady> I dunno--I just change the : to ;

[05:16] <audreyt> "The initial dispatch is always to the shortest advertised long name"

[05:16] <clkao> nothingmuch: no! you must commit!

[05:16] <TimToady> nite nothingmuch

[05:17] <audreyt> which doesn't have ties at that level

[05:17] <audreyt> (0-level)

[05:17] <TimToady> hmm.

[05:17] <audreyt> and as such won't need redispatch

[05:17] <nothingmuch> clkao: i did

[05:17] <nothingmuch> you can darcs pull

[05:17] <PerlJam> TimToady: does that mean that multi sub foo (;)  is shorter than multi sub foo ()  ?  ;-)

[05:17] <nothingmuch> http://nothingmuch.woobling.org/Perl-Generate

[05:17] <audreyt> TimToady: that's a strict reading of line 664 in S12 would give

[05:17] <lambdabot> Title: "Index of /Perl-Generate"

[05:17] <TimToady> I don't think that says what I wanted it to say.

[05:17] <nothingmuch> this is the backend for Moose's inlining work

[05:17] <audreyt> TimToady: er, well, maybe change it to say what you wanted it to say, then :)

[05:17] <nothingmuch> fglock: http://nothingmuch.woobling.org/Perl-Generate is also relevant for the Perl 5 emitter - take a look

[05:17] <lambdabot> Title: "Index of /Perl-Generate"

[05:17] <nothingmuch> lambdabot: yes, we know

[05:18] <TimToady> I'll have to think about it.  but meanwhile, it really oughta parse anyway...

[05:18] <audreyt> yeah. have a temp fix now.

[05:18] <audreyt> committing

[05:19] <TimToady> k

[05:21] <audreyt> (r10985)

[05:21] <svnbot6> r10985 | audreyt++ | * Pugs.Parser.Util: Even more temp band-aid to get semicolon

[05:21] <svnbot6> r10985 | audreyt++ |   to parse as colons in signature list

[05:27] <svnbot6> r10986 | audreyt++ | * er, sorry, I somehow made the tests 90% less for "make smoke".

[05:30] <dduncan> I have a question re best practice role+class design ...

[05:30] <audreyt> ok?

[05:31] <dduncan> I would like to have input checking code in the appropriate phase of a constructor in the role but don't want the role to worry about storing those to attributes after

[05:31] <dduncan> then the class just stores the input in attributes

[05:31] <dduncan> the role code may transform the input

[05:31] <dduncan> should I declare new() in the role and BUILD() in the class, or something else?

[05:32] <dduncan> was the question clear?

[05:32] <dduncan> oh yes, the class does the role

[05:33] <dduncan> actually, for that matter, can a role declare attributes, or is that just the domain of a class?

[05:33] <audreyt> essentially, you want a role to implement validator

[05:33] <dduncan> and a role can only declare routines

[05:33] <dduncan> yes

[05:33] <dduncan> the role will implement a validator plus utility code, and the class focuses on storage code

[05:33] <audreyt> a role can surely declare attributes in a role.

[05:34] <audreyt> as such, you can simply put those in the role

[05:34] <audreyt> and put validator there also.

[05:34] <dduncan> I may do that part of the time, but part of the time I don't want the role to care how it is stored

[05:34] <dduncan> eg, whether it is stored in RAM or on disk (a database)

[05:35] *** rafl joined
[05:35] <dduncan> the actual representation in memory doesn't matter, it can be the default opaque or whatever

[05:35] <audreyt> got it

[05:36] <dduncan> in a way, the role is like declaring a tieable class, and the class implements a tie of it

[05:36] <audreyt> but then, the role has to know about the names of the attr

[05:36] <audreyt> if it's to validate specifically those

[05:36] <audreyt> and you lose reusable

[05:36] <audreyt> ness

[05:36] <audreyt> one way is to put generate validation routines into the role

[05:36] <audreyt> *generic

[05:37] <audreyt> role Validator { method some_validate ($x) { ... } }

[05:37] <audreyt> class MyClass does Validator { submethod BUILD ($.x) { self.some_validate($.x) } }

[05:37] <audreyt> etc

[05:37] <dduncan> currently, my design of the role just has it knowing the conceptual attributes from the user's pov, but it would use methods that only the subclassing class implements to access them; said class has the actual attributes and/or access to the actual storage mechanism

[05:37] <audreyt> ah. so it knows the name but not the methods

[05:37] <audreyt> sure, that can work too

[05:38] <audreyt> that's actually a pretty clear design

[05:38] <dduncan> eg, say that the role is Hash and that the class is an implementation thereof

[05:38] <audreyt> *clean

[05:38] <audreyt> (I'm really sleepy now, can't type)

[05:38] <unobe> audreyt: just reading backlog

[05:38] <dduncan> the expectation is that said class implements analogues to FETCH and STORE, and the role always invokes those for actual attribute access

[05:39] <audreyt> dduncan: yup. makes sense

[05:39] <audreyt> so it's best to list those in the role

[05:39] <audreyt> as virtual methods

[05:39] <dduncan> the user of the role could potentially invoke same class methods, which are declared in the role as prototypes, but often they don't need to

[05:39] <audreyt> method some_fetch { ... }

[05:39] <unobe> yeah, parrotembed. i'll take that out and rebuild

[05:39] <audreyt> right.

[05:40] <unobe> the latest available at unobe.com/packages isn't with parrotembed tho'

[05:40] <audreyt> k

[05:41] <dduncan> fyi, the roles in question here are Relation, Relation::Tuple, Relation::Heading (possibly more to come) ... and implementing classes can just use a normal Perl set of hashes or whatever behind the scenes for implementing, or it can use DBI or something to tie them to database tables, the sky's the limit

[05:41] <dduncan> so this is dual-purpose generic Hash/Set like object and tool for making ORMS

[05:43] <dduncan> implementations can vary a lot even in memory only, such as in what order they do elements in set combinations, or whether and how they use indexes, etc

[05:44] <audreyt> got it.

[05:45] <dduncan> so at the moment I'm working on the constructor for Relation::Heading, which takes a name:type hash as its sole argument ... I would like to put validation plus input rearranging code in Relation::Heading and actual storage code in Relation::Example::Heading (a trivial implementation)

[05:46] <dduncan> unless I can somehow have a BUILD in both, and have one call the other, I will put a new() in the first and BUILD() in the second, unless, there is a better design idea

[05:46] <dduncan> back in a moment ...

[05:48] <audreyt> I think that one works for now... can't think clearly though.

[05:50] *** stephanepayrard_ joined
[05:50] <audreyt> zzz &

[05:51] <TimToady> likewise &

[05:51] <TimToady> (build is unbroke now, smoking while I sleep)...

[05:52] *** cmarcelo_ joined
[05:59] *** stephanepayrard joined
[06:04] <dduncan> okay, I'm back

[06:06] *** xdg joined
[06:12] *** justatheory joined
[06:25] *** jkanter left
[06:25] *** cmarcelo_ is now known as cmarcelo

[06:30] *** bsb joined
[06:33] <xdg> exit

[06:33] <audreyt> TimToady: "The initial dispatch starts by pretending that the shortest

[06:33] <audreyt> +advertised long name is the complete long name"

[06:34] <audreyt> I'm still not sure what it means. but we'll figure it out tomorrow

[06:34] <audreyt> also, may need to see if your room is large enough for hackathon, maybe obra and/or me will drop by first in the morning (though I don't know where it is)

[06:34] <audreyt> but, sleep &

[06:46] <svnbot6> r10987 | Darren_Duncan++ | ext/Relation/ : added initial new()/BUILD() submethods for the Heading role/class

[06:53] *** iblechbot joined
[06:55] *** visq joined
[07:01] *** drrho joined
[07:20] *** buetow joined
[07:38] *** revdiablo joined
[07:39] *** domm joined
[07:44] *** domm is now known as tklausner

[07:49] *** nperez joined
[07:50] *** bsb left
[08:05] *** cognominal joined
[08:05] *** stephanepayrard joined
[08:06] *** elmex joined
[08:21] *** didie_p6 joined
[08:42] *** vytautas joined
[09:05] *** renormalist joined
[09:07] *** cognominal joined
[09:08] <svnbot6> r10988 | rootmj++ | * after move Makefile.PLs fix

[09:08] *** stephanepayrard joined
[09:09] *** beppu joined
[09:23] <svnbot6> r10989 | Darren_Duncan++ | ext/Relation/ : added 4 subtype declarations to handle input validation details, simplified the Heading constructor, added several prototype and actual methods to Heading

[09:26] <dduncan> for anyone backlogging, particularly those at the hackathon, I would appreciate some scrutiny of the new Relation::* subtypes and ::Heading role+class that are taking shape, both in the manner of feedback, and in the manner to making Perl 6 language features I am using therein to actually compile

[09:26] <dduncan> for example, unless I did something wrong, it appears that subtypes 'where' traits don't parse yet

[09:27] <dduncan> also, I would like to know the syntax for declaring an anonymous Mapping value

[09:28] <dduncan> as well as what sigil(s) Mapping variables can take

[09:28] <dduncan> currently I'm treating the Mappings like a Hash but that they can only be set on declaration, and hence are immutable

[09:28] <dduncan> so hash syntax currently

[09:29] <dduncan> zzz &

[09:36] *** paultcochrane joined
[09:41] *** dduncan left
[09:58] *** cmarcelo left
[10:22] *** phpError joined
[10:25] *** marmic joined
[10:40] *** Aankhen`` joined
[11:08] *** tup joined
[11:25] *** elmex joined
[11:34] <meppl> guten morgen

[11:38] *** buetow joined
[11:53] *** buetow joined
[12:00] *** jsiracusa joined
[12:04] *** chris2 joined
[12:08] *** weinig|zzz is now known as weinig|work

[12:14] *** frederico joined
[12:22] *** bpphillips joined
[12:22] *** froh-doh joined
[12:35] *** visq joined
[12:46] *** tup joined
[12:48] *** Limbic_Region joined
[12:57] <Limbic_Region> Are all the hackathoners *mostly* sober?

[13:12] *** hcarty joined
[13:34] *** elmex joined
[13:47] *** dfan joined
[13:50] *** vel joined
[13:53] *** SamB joined
[14:05] *** tup joined
[14:08] *** frederico joined
[14:11] *** hexmode joined
[14:13] *** justatheory joined
[14:15] *** rzoz joined
[14:34] *** bsb joined
[14:34] *** ruoso joined
[14:42] *** DebolazX joined
[14:55] *** hexmode joined
[14:57] *** hcarty left
[15:05] *** frederico joined
[15:07] <svnbot6> r10990 | audreyt++ | * Data::Bind - Declare dependencies

[15:20] *** cdpruden joined
[15:23] <DebolazX> The environment variables PARROT_PATH and PUGS_EMBED only needs to be set during configure, not during make, right?

[15:48] <DebolazX> Also, this is not nice. Maybe not related to pugs directly, but it does happen: ERROR: Can't create '/usr/lib/perl5/site_perl/5.8.8/i386-linux

[15:48] <DebolazX> When trying to install in a local directory.

[16:02] <audreyt> DebolazX: do you have write perm?

[16:02] <audreyt> oh wait you said PREFIX?

[16:02] <DebolazX> Yes, PREFIX.

[16:02] <audreyt> DebolazX: also, P_P needs to be there in both make and runtime

[16:03] <DebolazX> And it installs just fine into the prefix.

[16:03] <audreyt> so the error happens when installation ends

[16:04] <DebolazX> It seems to be at the installation end. Maybe it's trying to record the installation.

[16:04] <DebolazX> I'll build it again and put more context on sial.org/pbot/perl6

[16:12] *** Aankh|Clone joined
[16:15] <pasteling> "DebolazX" at 62.89.32.200 pasted "Local installation error" (18 lines, 1.1K) at http://sial.org/pbot/18087

[16:15] *** ludan joined
[16:16] <ludan> ciao

[16:16] *** jdv79 joined
[16:18] *** rzoz joined
[16:20] *** stephanepayrard left
[16:23] <audreyt> DebolazX: trying to replicate. give me a sec

[16:26] *** prefiks joined
[16:27] *** Aankhen`` joined
[16:28] <audreyt> DebolazX: found the cause. sec

[16:31] * DebolazX helped. :D

[16:31] <audreyt> DebolazX++

[16:32] <wolverian> ooh, djabberd is shiny

[16:32] <audreyt> DebolazX: you can even help to fix

[16:33] <audreyt> I'll explain the bug, and can you help fix it?

[16:33] <audreyt> the bug is that in Makefile.PL, line 412, it tries to get a set of directories where the ext/ libraries will install to

[16:33] <audreyt> the "perl6 sitelib"

[16:34] <audreyt> it does this from inc/Module/Install/Pugs.pm

[16:34] <audreyt> line 142

[16:34] <audreyt> which gets it from util/PugsConfig.pm

[16:34] <audreyt> line 9

[16:35] <audreyt> which calls add_path

[16:35] <audreyt> same file line 61

[16:35] <audreyt> to do s/perl5/perl6/ rewriting of directory names

[16:35] <audreyt> now, that is all fine and good

[16:35] <audreyt> but under PREFIX

[16:35] <audreyt> the siteprefix we get form %Config is no longer good

[16:35] <audreyt> so Makefile.PL line 412 has to pass in prefix info into this chain

[16:35] <audreyt> to override the directory names we get from $Config

[16:35] <DebolazX> Well, formally, I'm paid to work on someone elses perl code at the moment. :|

[16:36] <DebolazX> So it'll have to wait.

[16:36] <audreyt> in order for the final target installation to agree with prefix

[16:36] <audreyt> that's fine... anyone else? :)

[16:41] <audreyt> hm. one hackathon idea from mdiep is to setup http://tryruby.hobix.com/

[16:41] <lambdabot> Title: "try ruby! (in your browser)"

[16:41] <audreyt> on (say) feather

[16:41] <audreyt> and/or convert pugscode.org to a wiki instance

[16:41] <audreyt> (e.g. like http://haskell.org/haskellwiki/Haskell)

[16:41] <lambdabot> Title: "Haskell - HaskellWiki"

[16:43] <svnbot6> r10991 | clkao++ | Support invocant in Data::Bind.

[16:53] *** mauke joined
[17:07] *** coumbes joined
[17:08] <clkao> summon aufrank

[17:10] * DebolazX ponders what to think about autoboxing.

[17:11] <DebolazX> I see scrotties argument about some code getting a more logical flow.

[17:12] <mauke> conflict: module `Data.ByteString' is present in multiple packages: pugs-fps-0.7, fps-0.7

[17:12] <mauke> am I doing it wrong?

[17:14] *** lollan joined
[17:22] <svnbot6> r10992 | clkao++ | PCR is missing ; in pacakge line.

[17:33] *** aufrank joined
[17:36] *** ruoso joined
[17:41] <svnbot6> r10993 | clkao++ | I don't know what I am doing, but this makes miniperl6 tests work again.

[17:41] <Aankhen``> Heh.

[17:43] *** tifo joined
[17:46] *** cmcavoy joined
[17:50] <svnbot6> r10994 | clkao++ | Escape things in q().

[17:51] <Aankhen``> Unfathomable fixes are the best kind of fixes!

[17:59] <fglock> hi!

[18:01] <clkao> fglock!

[18:02] <clkao> fglock: *open_q = Pugs::Compiler::Token->compile(q( <[<]> ))->code;

[18:02] <clkao> that doesn't work at all

[18:02] <clkao> (i am trying to compile src/Parser/Signature.pg)

[18:02] <kolibrie> fglock: greetings

[18:03] <fglock> clkao: how about q( \< ) ? char classes is not mature in PCR

[18:03] <fglock> kolibrie: hi!

[18:04] <kolibrie> what is the correct way to execute a rule from a grammar?  With pugs I'm getting: *** Cannot parse PGE: <yapc_schedule.speaker>

[18:04] <kolibrie> *** Error: Null PMC access in invoke()

[18:04] <ingy> hola

[18:04] <fglock> kolibrie: it looks ok

[18:04] <clkao> fglock: that works

[18:04] <fglock> ingy: ola

[18:05] <kolibrie> fglock: that's what I thought

[18:05] <clkao> fglock: do you think it's better to fix the signatures in operator.pm ? or the grammar?

[18:05] <kolibrie> audreyt: pmichaud: thoughts?

[18:06] <kolibrie> my line is: my $match = $content ~~ m/<yapc_schedule.speaker>/;

[18:06] <fglock> clkao: I started signatures in Operator.pm - it can be rewritten later (unless you find it is too broken)

[18:07] <fglock> but the rule-based grammar is the right place

[18:12] *** ekmett joined
[18:13] <fglock> nothingmuch: cool (Perl::Generate)

[18:13] <ingy> hi fglock!

[18:15] <ekmett> does anyone know how well the HsJudy stuff is working out for pugs?

[18:17] <fglock> bbiab

[18:17] <clkao> fglock: it doesn't have invocant

[18:18] <clkao> and signature itself is recursive (which should be params actually)

[18:20] *** visq joined
[18:22] <fglock> clkao: would you help fix it?

[18:22] <clkao> i was trying to use the signature.pg instead

[18:23] <clkao> fglock: btw, do you know if r10993 is sensible?

[18:23] <fglock> looking

[18:25] <Aankhen``> It's sensible if it listens to its parents and doesn't stay out too late at night.

[18:26] *** cwest joined
[18:26] <cwest> eval? say "Hello"

[18:26] <audreyt> greetings

[18:26] <cwest> Is our eval bot safe?

[18:26] <audreyt> cwest: yes

[18:26] <audreyt> ?eval say "hello"

[18:26] *** evalbot_10971 is now known as evalbot_10994

[18:26] <evalbot_10994> OUTPUT[hello ] Bool::True

[18:26] <audreyt> ?eval system('rm -rf')

[18:26] <cwest> Most excellent

[18:26] <evalbot_10994> Error: Unsafe function 'system' called under safe mode

[18:26] <clkao> fglock: so what i want to do is hook the emitter with data::bind. it seems ready.

[18:27] *** jsiracusa joined
[18:27] <audreyt> kolibrie: nopaste the entire program?

[18:27] <audreyt> ekmett: cmarcelo has a patch that integrates it to our runtime

[18:28] <audreyt> I havn't benchmarked it against (TVar Map) yet

[18:28] <ekmett> ah k

[18:28] <ekmett> that was pretty much where i was going with my query =)

[18:28] <fglock> clkao: can you publish Data::Bind to cpan?

[18:28] <ekmett> i started slapping together an ecmascript 4 parser/interpreter/recompiler in haskell and was trying to figure out what high speed data structures were available.

[18:29] <fglock> or maybe it could be optional, for a while

[18:29] <audreyt> ekmett: you can try out HsJudy and give feedback :)

[18:29] <ekmett> will do

[18:29] <pasteling> "kolibrie" at 216.47.133.174 pasted "audreyt: extract.p6 and yapc_schedule.pm grammar" (24 lines, 320B) at http://sial.org/pbot/18091

[18:30] <clkao> fglock: it's in perl5/,  not good enough?

[18:30] <fglock> clkao: I plan to send regular updates to cpan, so v6.pm depends on published modules - but adding it as optional is ok

[18:31] <clkao> *nod*

[18:32] <fglock> it's also ok to fork into a new dir, and then integrate back

[18:32] <clkao> i will do that before v6 release with the emitter. right now there might still need some tweaks while connecting them

[18:32] <fglock> feel free to fork, to make experiences

[18:35] <fglock> clkao: do you think a pure-perl Data::Bind is possible?

[18:36] <clkao> fglock: no

[18:36] <clkao> fglock: it requires padwalker anyway

[18:36] <nothingmuch> fglock: working on If nodes now

[18:36] <clkao> and to do alias (is rw) you can't do it in pure perl

[18:36] <clkao> i spent some time with nick about that

[18:37] *** visq joined
[18:41] <fglock> clkao: re 'compile_p6grammar.pl' - kolibrie and scw know it better

[18:42] <audreyt> kolibrie: write a test

[18:43] <audreyt> kolibrie: currently pkg info is discarded from bridge

[18:43] <audreyt> so instead of <yapc_schedule.speaker>

[18:43] <audreyt> simply write <speaker>

[18:44] <kolibrie> audreyt: ok

[18:45] *** bernhard joined
[18:47] *** coumbes joined
[18:48] <fglock> class - back in a few hours &

[18:51] *** fglock left
[19:15] <kolibrie> audreyt: that worked for <speaker>, but when I changed it to <talk>, I now get: *** Cannot parse PGE: <talk>

[19:15] <kolibrie> *** Error: Name 'talk' not found

[19:27] *** hexmode joined
[19:38] *** cognominal joined
[19:41] *** ezraburgh joined
[19:49] <cwest> So I was thinking, can I just use continuations to keep state between ipc calls, instead of running an interactive shell (long running process) in order to clone tryruby?

[19:50] <cwest> s/ipc/rpc/

[19:50] <xerox> I think the idea is right.

[19:50] <cwest> That sounds ominous. Does the implementation seem possible?

[19:51] <xerox> You tell us :)

[19:55] *** ekmett left
[19:57] *** buubot joined
[19:57] <buu> buubot: modules

[19:58] <svnbot6> r10995 | clkao++ | my branch of PC::P6 to support Data::Bind.

[19:58] <buu> er

[19:58] <buubot> buu: modules are good because you don't have to design the code.

[19:58] <cwest> xerox: Suppose so. :-)

[20:01] <svnbot6> r10996 | clkao++ | Emit subroutine signatures as data::bind signature support.

[20:01] <svnbot6> r10996 | clkao++ | There's still some weirdness in my grammar, like signature without invocant

[20:01] <svnbot6> r10996 | clkao++ | wouldn't work.

[20:02] *** dduncan joined
[20:03] <clkao> froh-doh: please take a look at my grammar if you have time. it seems i can't have the invocant optionally matched as empty

[20:03] <clkao> gr

[20:03] <clkao> fglock, i meant. but he's off

[20:07] <svnbot6> r10997 | Darren_Duncan++ | ext/Relation/ : corrected mis-spellings of 'subset'

[20:10] *** pdcawley joined
[20:20] *** nothingmuch joined
[20:20] *** the_ez joined
[20:25] *** Limbic_Region joined
[20:27] *** chris2 joined
[20:28] *** daxim joined
[20:28] <daxim> hello world

[20:28] <Debolaz2> hello puny earthling

[20:29] <daxim> where in the source tree is the pod which generates pugs::hack on cpan?

[20:29] <daxim> I mean this one:  http://search.cpan.org/~autrijus/Perl6-Pugs-6.2.7/lib/pugs/hack.pod

[20:29] <lambdabot> Title: "pugs::hack - How to hack on Pugs - search.cpan.org"

[20:30] *** bpphillips left
[20:35] *** justatheory joined
[20:36] <dduncan> ?eval 1

[20:36] *** evalbot_10994 is now known as evalbot_10997

[20:36] <evalbot_10997> 1

[20:36] <dduncan> ?eval for zip((4,5);(6,7)) -> ($foo,$bar) { say "$foo, $bar"; }

[20:36] <evalbot_10997> OUTPUT[4, 6 5, 7 ] undef

[20:36] <dduncan> ?eval for each((4,5);(6,7)) -> $foo,$bar { say "$foo, $bar"; }

[20:36] <evalbot_10997> Error: No such sub: "&each"

[20:39] <dduncan> seems 'cat' isn't implemented yet either

[20:44] *** elmex joined
[20:46] *** elmex_ joined
[20:55] *** coumbes joined
[20:57] *** gaal__ joined
[20:57] *** gaal joined
[20:58] * cwest has extracted evalbothelper.p5 into Pugs::Run::Safe, with multi-callable exec() method.

[20:58] *** gaal__ is now known as gaal

[21:10] *** coumbes joined
[21:13] *** Debolaz2 is now known as Debolaz

[21:14] *** szbalint_ joined
[21:15] *** Debolaz is now known as Debolaz2

[21:15] <cwest> I need a bit of training on how continuations work in Perl 6, and if I can continue across processes by saving state in some way.

[21:16] <cwest> And if I can add to the execution dynamically.

[21:16] <cwest> s/Perl 6/Pugs/ I suppose

[21:19] *** Bit-Man joined
[21:21] *** iblechbot joined
[21:24] <cwest> I need more brain.

[21:24] <svnbot6> r10998 | Darren_Duncan++ | ext/Relation/ : added more subset types, added equality comparison methods

[21:27] *** Debolaz2 is now known as Debolaz

[21:27] <svnbot6> r10999 | Sage++ | Added new node types, started work on parsing heredoc nodes.

[21:30] <svnbot6> r11000 | Sage++ | Updating to show completed translations.

[21:30] <svnbot6> r11001 | Sage++ | Added info on some more nodetypes.

[21:31] *** szbalint_ is now known as szbalint

[21:33] <kolibrie> would someone with commit access update the S02 heredoc examples to include a semicolon after END?

[21:34] <cognominal> cwest: why, your brain is already dual core :)

[21:34] <kolibrie> search for the text: Heredocs are no longer written with

[21:41] <mauke> does anyone know why I'm getting this error in make: "conflict: module `Data.ByteString' is present in multiple packages: pugs-fps-0.7, fps-0.7"?

[21:41] *** macroron joined
[21:43] <daxim> I got that too because I checked out a new checkout and it's built twice.   make clean and then make again should fix it

[21:44] *** weinig|work is now known as weinig

[21:45] <mauke> remaking...

[21:48] <svnbot6> r11002 | kolibrie++ | added tests for grammar namespaces in rules and tokens

[22:01] *** the_ez left
[22:03] *** jsiracusa joined
[22:17] <mauke> daxim: thanks! it worked

[22:17] <daxim> good

[22:17] <daxim> here, the mauke, have a trophy

[22:18] *** Bit-Man joined
[22:29] *** lisppaste3 joined
[22:37] *** SamB joined
[22:37] *** coumbes joined
[23:06] <svnbot6> r11003 | fglock++ | v6.pm - moose.pl compiles correctly (rw & ro class variables);

[23:06] <svnbot6> r11003 | fglock++ |   - added a compiler env

[23:15] <justatheory> audreyt: You around?

[23:24] <svnbot6> r11004 | audreyt++ | * p6ast.hs draft

[23:32] <dduncan> anyone who's at the hackathon, I would appreciate feedback to my new p6l post on Mapping.does(Set) and otherwise about declaring and using those types

[23:33] <dduncan> back in a bit ...

[23:50] <clkao> audreyt: if you are bored, there's other thing for you to look, caller().package is parsed as caller(package)

[23:50] <clkao> (test.pm)

[23:50] *** bpphillips joined
