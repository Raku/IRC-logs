[00:06] *** nothingmuch joined
[00:28] *** fglock joined
[00:37] <svnbot6> r11557 | fglock++ | v6 - prelude: NaN, Inf are exported

[01:09] *** ruoso joined
[01:14] *** scook0 joined
[01:16] *** markstos joined
[01:22] *** swaroop joined
[01:22] *** swaroop joined
[01:54] *** elmex_ joined
[02:03] *** unobe joined
[02:06] *** unobe joined
[02:07] *** Termy joined
[02:17] *** Termy joined
[02:19] *** Termy joined
[02:57] *** unobe joined
[03:00] *** unobe is now known as unobe_away

[03:23] *** rashakil joined
[03:39] *** SubStack joined
[03:41] *** Termy joined
[03:57] <merlyn> v6 on the cpan depends on Sub::Multi, which isn't on the CPAN. ?

[03:59] <audreyt> @seen clkao

[03:59] <lambdabot> clkao is in #perl6. I last heard clkao speak 1 day, 3 hours, 26 minutes and 22 seconds ago.

[04:01] <audreyt> merlyn: it has an underscore

[04:01] <merlyn> oh, well that's no good.

[04:01] <merlyn> can't install from the CPAN if it's not normal

[04:01] <audreyt> I'll release.

[04:01] <merlyn> the index from Sun, 16 Jul 2006 01:29:12 GMT doesn't contain Sub::Multi

[04:02] <Termy> me voy... buenas :)

[04:02] *** Termy left
[04:02] <clkao> hi

[04:02] <audreyt> clkao: hey!

[04:02] <clkao> zz

[04:02] <audreyt> clkao: release 0.002?

[04:03] <clkao> sure

[04:03] <audreyt> ok. I bumped version for you

[04:04] <svnbot6> r11558 | audreyt++ | * Sub::Multi - version bump to 0.002

[04:04] <svnbot6> r11559 | Darren_Duncan++ | perl5/Pugs-Compiler-Perl6/ : in both v6.pm and README, restored the 'invalid header' example from v6-alpha to v6, so it is actually invalid

[04:07] <svnbot6> r11560 | audreyt++ | * perl version dep: 5.8.x

[04:08] *** cmarcelo joined
[04:09] <clkao> audreyt: meanwhile, get yourself comaintainership. i need some sleep

[04:10] <audreyt> okay.

[04:11] *** dduncan joined
[04:12] <dduncan> about that last commit, why 5.8.0 exactly ... considering that it is close and makes the largest number of fixes or improvements, how about 5.8.1 instead?

[04:12] <dduncan> then we know we're getting Unicode 4 for one thing

[04:12] <audreyt> uhm, for Sub::Multi doesn't matter

[04:13] <audreyt> sorry, it's just for Sub::Multi not pug

[04:13] <audreyt> pugs

[04:13] *** cmarcelo left
[04:14] <dduncan> still, I question why anything would list 5.8.0 as a minimum dependency ... if you're going above 5.6.x, I would start with 5.8.1

[04:14] <dduncan> but whatever

[04:16] <audreyt> I understand this sentiment

[04:16] <audreyt> as 5.8.0, like 5.6.0, is very unstable

[04:18] <clkao> the force_todo_junction in test.pm can be undefined. wouldn't that generate a warning? or was it intentional and i missed something?

[04:19] <audreyt> it might generate a warning

[04:19] <audreyt> but pugs's warning system is a bit borken

[04:19] <audreyt> it was intentional

[04:19] <clkao> well, in v6 it does generate a warning

[04:19] <clkao> should that default to an empty string then?

[04:19] <audreyt> yes.

[04:19] <audreyt> it was a junction

[04:20] <audreyt> pmichaud discussed with me and we made junction a nonmandatory req for Test.pm

[04:20] <audreyt> so it was lost in refactoring

[04:20] <audreyt> so empty string is fine

[04:20] <clkao> *nod*

[04:20] <clkao> how's jifty/moose?

[04:21] <audreyt> obra shows it passes most of HM tests

[04:21] <audreyt> some type constraint errors remain

[04:21] <audreyt> though he's not here so we havn't synced what remains

[04:22] <audreyt> meanwhile, doing ::Action::Param design now

[04:22] <audreyt> also Jifty's autovivification and structural constraints and Class::Accessor compat

[04:22] <audreyt> makes interesting Moose features

[04:22] <clkao> mmmm

[04:22] <audreyt> so also going to exercise my Moose commit bit

[04:22] <clkao> would you like to do that for svk as well? ;)

[04:22] <audreyt> I've long wanted structural constraints

[04:22] <audreyt> for perl6

[04:23] <dduncan> quick question that's a tangent to my last p6l post ...

[04:23] <audreyt> and Moose would be a good place to experiment with them

[04:23] <dduncan> does := work anywhere, such as on attributes or array elements?

[04:23] <dduncan> eg $!foo := $!bar

[04:23] <dduncan> or @foo[0] := @bar[0]

[04:24] <audreyt> yes and yes.

[04:24] <dduncan> excellent

[04:24] <dduncan> probably the main places I would use it right now

[04:24] <audreyt> though for compat arrays

[04:24] <audreyt> maybe it'd be forbidden

[04:24] <dduncan> I'm just thinking of normal arrays, such as declared with @foo or []

[04:24] <audreyt> my int @x; @x[0] := ...

[04:24] <audreyt> is probably insane

[04:24] <audreyt> but normal arrays, sure.

[04:25] <dduncan> eg, for easiest perl 5 implementation, the Set::Relation type will use an array internally to hold its elements

[04:25] <dduncan> if I derive one from another like with a UNION, I would want any elements in common to just be stored once

[04:26] <dduncan> hence assignement to array elements

[04:26] *** spinclad joined
[04:26] <dduncan> on a related note, if I wonder if I can get that using @foo.push(), or whether I have to subscript only

[04:27] <dduncan> still, a minor matter for now

[04:29] <audreyt> .push takes rvalue

[04:29] <audreyt> so it can't do implicit alias

[04:47] <clkao> 499 tests pass tonight

[04:49] <merlyn> 499 tests pass in the night...

[04:51] <audreyt> clkao: have you written ingo about uploading?

[04:51] <audreyt> clkao: also can you post a smoke.html somewhere (say on feather)?

[04:51] <clkao> yes, it's on hiveminder

[04:52] <audreyt> url?

[04:52] <clkao> and it's going to feather/~clkao/

[04:52] <clkao> in pugs group

[04:52] <audreyt> okie

[04:53] <clkao> nedd to slzzp

[04:55] <clkao> currently only data_type/subtype causes infinite loop. it's about parsing "sub only_accepts_odds(Num::Odd $odd) { $odd + 1 }"

[04:55] <clkao> i tried to add signature_term to accept : and then perl segfauled

[04:55] <clkao> :/

[04:55] <clkao> so we now parse about 12% of the tests, and pass 5%

[04:58] <mugwump> hmm, can objects have a custom way of generating .id ?

[04:58] <audreyt> yes,

[04:58] <audreyt> method id

[04:58] <audreyt> I think it should really be called object_id somehow

[04:58] <mugwump> say two objects are the same .id, then they =:=, right?

[04:58] <audreyt> ruby people learned that lesson painfully

[04:58] <audreyt> no, they would be ===

[04:58] <mugwump> heh

[04:58] <audreyt> =:= is something else altogether

[04:59] <audreyt> $x =:= $y means variable($x) === variable($y)

[04:59] <merlyn> the flying colon!

[04:59] <merlyn> colon biplane

[05:00] <mugwump> hmm, I want the effect of setting the object ID to be that if somebody creates a new object and after BUILD it determines that the object ID is the same as an existing object, to return the existing one

[05:00] <mugwump> BUILDALL even

[05:01] <mugwump> ie, a custom rule that $x === $y  implies $x =:= $y

[05:01] <audreyt> ok.

[05:02] <mugwump> the application is, say, an object encapsulating a stream of bytes.  we make the object id the sha1 sum of the contents, and if somebody creates a new object with the same contents, it's the same object

[05:03] <audreyt> I understand.

[05:04] <audreyt> simply have "method id" overridden will do that.

[05:05] <audreyt> hm. help wanted

[05:05] <audreyt> http://search.cpan.org/dist/v6-alpha/HACKING looks bad

[05:05] <lambdabot> Title: The CPAN Search Site - search.cpan.org

[05:05] <audreyt> because http://search.cpan.org/src/FGLOCK/v6-alpha-0.009/HACKING is not POD

[05:05] <audreyt> is someone up to reformat HACKING into proper POD?

[05:06] <audreyt> README too, if possible

[05:06] <audreyt> oh, nvm README

[05:06] <audreyt> just perl5/Pugs-Compiler-Perl6/HACKING

[05:06] <mugwump> you have to be careful in the Makefile.PL not to deliver extra .pod files like that :)

[05:06] <mugwump> I do that with some of my modules, I have a Changes.pod

[05:15] <audreyt> *wave* &

[05:19] *** Dr_Pi joined
[05:20] <Dr_Pi> /msg NickServ Help

[05:27] <Dr_Pi> /msg NickServ IDENTIFY ivanfrey iF6412

[05:31] *** Dr_Pi joined
[05:33] <Dr_Pi> /msg compiler-per6 HELP!!!!

[05:33] *** Dr_Pi left
[05:35] *** ivanfrey joined
[05:38] <dduncan> mugwump, regarding: mugwump: the application is, say, an object encapsulating a stream of bytes.  we make the object id the sha1 sum of the contents, and if somebody creates a new object with the same contents, it's the same object ...

[05:38] <dduncan> is it possible for several streams to result in the same sha1 sum?

[05:39] <dduncan> if so, then the returned object would be different than what was input

[05:39] <mugwump> generally the assumption is that never happens

[05:40] <mugwump> esp. in this case the sha1 sum hashes the length, too

[05:41] <swaroop> audreyt, I've created a pod-ified version of HACKING, where do I submit the patch ?

[05:41] <dduncan> in any event, what you described at BUILD time could more or less satisfy what I was wanting in my p6l post, or perhaps satisfy it better than that ... because duplicate objects are never created in the first place, never mind possibly eliminated if compared

[05:41] <mugwump> swaroop: in the pugs tree

[05:42] <mugwump> 17:06 < audreyt> just perl5/Pugs-Compiler-Perl6/HACKING

[05:42] <swaroop> mugwump, yes, but should I ask someone to commit the patch for me or can I do it myself (it's not been reviewed...)

[05:42] <dduncan> I thought of suggesting something like this myself, but I didn't know if it was normal for there to be a central index of all objects of a class

[05:42] <dduncan> in the meta-something-er-other

[05:42] <mugwump> swaroop: just commit, do you need a committer invitation?

[05:42] <swaroop> mugwump, yes

[05:45] *** kanru joined
[05:45] <swaroop> mugwump, ?

[05:46] <mugwump> sorry, I was just checking http://rt.openfoundry.org/Foundry/Project/?Queue=270.  You'll need a project admin to send you the invitation

[05:46] <lambdabot> Title: Pugs -- OSSF

[05:47] <mugwump> there are a lot of admins :)

[05:47] <swaroop> mugwump, ok :), but whom do I ask ?

[05:48] <mugwump> Well normally asking here is the right place.  However this is a bad time of day for interactive questions.  Unless someone with an admin bit steps forward, then perhaps send a request to the perl6-compiler list.  If you're in a hurry drop it in a nopaste somewhere and I'll commit it for you.

[05:49] <swaroop> mugwump, ok sure

[05:49] <swaroop> mugwump, thx :)

[05:49] <dduncan> curiously, that admin list seems to include me

[05:50] <mugwump> well perhaps you'd like to take swaroop aside and run through the initiation rites with him then, dduncan ?

[05:50] <dduncan> but given mugwump's involvement, I'm surprised it doesn't involve him

[05:50] * mugwump mehs

[05:50] <dduncan> I will have to learn how to do that though

[05:51] <dduncan> never actually used admin privs before

[05:52] <dduncan> I'll figure out how to login first, and then see if sending an invite is obvious

[05:52] <svnbot6> r11561 | snowstalker++ | Pod-ified according to Audrey's request (

[05:52] <svnbot6> r11561 | snowstalker++ | http://colabti.de/irclogger/irclogger_log/perl6?date=2006-07-16,Sun&sel=72#l135 )

[05:52] <lambdabot> Title: #perl6 2006-07-16,Sun

[05:52] <mugwump> login password should be same as svn

[05:52] <swaroop> I recollected that I had a previous login as a diff id, so committed :)

[05:53] <swaroop> If you guys could send me another committer bit, i'd like to use the same user id across parrot and pugs :)

[05:53] <mugwump> ok, dduncan : login, there is a "Project Admin" menu on the left.  Go to "Members", then there is a form

[05:55] *** Southen_ joined
[05:56] *** unobe_away is now known as unobe

[05:59] <dduncan> okay, I've finally logged in ...

[06:02] <dduncan> okay, swaroop, what is your email address?

[06:05] <dduncan> also, mugwump, check your email

[06:05] <dduncan> I've tried to upgrade you to an admin

[06:05] <dduncan> see if you get an email saying that

[06:06] <dduncan> swaroop, I will need your email address in order to send you a committer invitation

[06:08] *** Eidolos joined
[06:11] <dduncan> mugwump, if you find out swaroop's email address before I do, you can now add him yourself, afaik

[06:11] <dduncan> oh wait ...

[06:12] <mugwump> swaroop: what is your parrot account that you want activated?

[06:12] <mugwump> thanks dduncan

[06:12] <dduncan> so snowstalker is swaroop's committer id?

[06:12] <dduncan> I didn't backlog for some reason, so I guess he's in already

[06:13] <dduncan> I'm in the same situation though, different committer id from chat id

[06:13] <dduncan> that's legacy for you

[06:15] <mugwump> yeah.  I guess there's no way to rename an account.

[06:15] *** unobe joined
[06:15] <dduncan> I wish there was ... would have done it a year ago then

[06:18] <dduncan> oh, fyi ... I don't know if I've told you or just others, but in light of the availability of v6.pm, I do not intend to further develop my newest CPAN modules in Perl 5 code, but only the Perl 6 versions, because they should integrate into Perl 5 reasonably well any time now

[06:19] <mugwump> great to hear.

[06:19] <dduncan> and other perl 5 code should be able to use it / be used by it

[06:19] <dduncan> its what I really want to do

[06:19] <dduncan> and it gives more impetus to test Moose et al in action

[06:19] <dduncan> indirectly

[06:20] <dduncan> fyi, the moment v6.pm is able to fully run any of my perl 6 modules, they will go on CPAN independently like a normal perl 5 distro

[06:21] <dduncan> and to assist that I will be keeping my language footprint requirements reasonably small

[06:21] <dduncan> anyway, back to work ...

[06:21] <swaroop> dduncan, sorry just came back, my address is [email@hidden.address]
[06:22] <dduncan> thank you, but did you just say before that you already had a different committer id?

[06:22] <dduncan> eg, are you snowstalker?

[06:22] <swaroop> dduncan, yes, but I want to change the user id to just 'swaroop'

[06:22] <swaroop> dduncan, yes

[06:22] *** nothingmuch joined
[06:23] <dduncan> you know, it occurs to me that I could likewise change my id from Darren_Duncan to dduncan by just making another account ... if they accept the same email address for 2 of them

[06:23] <dduncan> I resisted that thought a year ago, but maybe now it'll be different

[06:24] <dduncan> meanwhile, sure, will try it for you

[06:24] <swaroop> dduncan, thx :)

[06:25] <dduncan> check your email

[06:26] <swaroop> dduncan, got it

[06:26] <dduncan> now, I don't know if it'll work for me exactly, since I want to use the same email for both ... on the other hand, I've already discovered that they handle the emails case sensitively, while the domain system doesn't, so I'll try a different case if I need to ...

[06:26] *** unobe joined
[06:29] <dduncan> okay, so it is case-insensitive in some cases

[06:30] <dduncan> I'll leave it alone for now

[06:49] *** dduncan left
[06:50] *** wesle1 joined
[06:58] *** Aankhen`` joined
[07:03] <nothingmuch> morning

[07:10] *** b00t joined
[07:16] *** shachaf joined
[07:56] *** iblechbot joined
[08:06] *** larsen joined
[08:14] *** kanru joined
[08:15] *** pmurias joined
[08:15] <pmurias> nothingmuch: morning

[08:17] <nothingmuch> pmurias: morning

[08:17] <nothingmuch> busy-ish

[08:17] <nothingmuch> but i will still respond

[08:23] *** shachaf joined
[08:36] <pmurias> clkao: if i wanted to write an new emitter for pX, what would be the (best) way to do it?

[08:37] <pmurias> (i'm thinking of writing an AST emitter)

[08:38] *** kanru joined
[08:39] *** xinming_ joined
[08:55] *** xerox_ is now known as xerox

[08:58] <nothingmuch> pmurias: what AST?

[09:05] *** revision17_ joined
[09:12] *** elmex joined
[09:15] *** miyagawa joined
[09:20] <nothingmuch> w 16

[09:24] *** szbalint joined
[09:27] *** miyagawa joined
[09:49] *** edwardk joined
[10:03] <gaal> hello there

[10:04] <edwardk> heya

[10:04] <gaal> here's some advance notice :)

[10:04] <gaal> http://perlmonks.org/?node_id=561539

[10:04] <lambdabot> Title: OSDC::Israel - Call for Participation

[10:04] <gaal> February, and everyone's invited :)

[10:04] <edwardk> its a bit of a swim =)

[10:05] * nothingmuch would *love* to see some haskell at OSDC

[10:05] *** Southen_ is now known as Southen

[10:05] <gaal> nothingmuch: word.

[10:05] <nothingmuch> yo homie rezpect

[10:06] * gaal goes off for lunch.

[10:31] *** xinming joined
[10:45] <pmurias> nothingmuch: the new shiny p6notes.hs and notes/p6ast_draft AST

[10:46] *** xinming joined
[10:46] <nothingmuch> pmurias++

[10:47] <nothingmuch> but arguably that is more of an execution oriented AST

[10:47] <nothingmuch> i would also like to see v6 refactored in such a way that an AST that has high source fidelity but is very much not a parse tree is the first stage

[10:50] <pmurias> nothingmuch: what are the pros and cons of Jifty and Catalyst?

[10:50] <nothingmuch> Jifty is a full stack

[10:50] <nothingmuch> it requires you to bend to it a bit

[10:50] <nothingmuch> but gives you much more as a result

[10:50] <nothingmuch> catalyst is more of a toolkit type mix and match approach

[10:50] <nothingmuch> use what works for you

[10:50] <nothingmuch> but has lower expressiveness as a result

[10:51] <nothingmuch> you can think of ruby on rails as a tricycle (can't remove training wheels)

[10:51] <nothingmuch> and of jifty as an uber cool mountain bike

[10:51] <nothingmuch> and of catalyst as a DIY kit

[10:53] * pmurias dosn't like mountain bikes were much

[10:53] *** chris2 joined
[10:55] <wolverian> I definitely like catalyst. haven't touched jifty yet, scared of the docs (or lack of) and mason :)

[10:55] <wolverian> but, yes, catalyst is very diy.

[10:56] <pmurias> s/were/very/

[10:57] *** ruoso joined
[11:00] <nothingmuch> wolverian: mason is not a "strong" dep anymore

[11:00] <nothingmuch> but this needs a little more work

[11:00] <nothingmuch> that said

[11:00] <nothingmuch> i've seen a lot of jifty during YAPC and obrathon

[11:00] <nothingmuch> and I was *really* impressed

[11:00] <nothingmuch> but you need lots of freedom to be able to decide to use Jifty

[11:01] <pmurias> why?

[11:07] <pmurias> eq. convincing your boss or does it forces you to do some things a specific way?

[11:14] <pmurias> i suppose the latter

[11:17] *** ludan joined
[11:24] <svnbot6> r11562 | nothingmuch++ | update stub template

[11:24] *** Aankh|Clone joined
[11:27] <svnbot6> r11563 | nothingmuch++ | update other stubs as well

[11:28] *** mauke_ joined
[11:43] *** mauke_ is now known as mauke

[11:48] *** ludan is now known as panda

[11:49] *** panda is now known as ludan

[11:51] *** cognominal joined
[12:06] <scw> S05.pod line 637:

[12:06] <scw>        / <after pattern> /     # was /(?<pattern)/

[12:06] <scw> should be /(?<=pattern)/

[12:07] <scw>  (asked perlre to ensure that I didn't forget the syntax :p)

[12:09] <gaal> nothingmuch: moose

[12:09] <gaal> are you not jetlagged?

[12:17] *** nothingmuch joined
[12:36] *** Aankh|Clone is now known as Aankhen``

[12:57] *** buetow joined
[13:00] *** kanru joined
[13:04] *** weinig joined
[13:09] *** miyagawa joined
[13:15] *** penk joined
[13:34] *** Aankh|Clone joined
[13:41] *** SubStack joined
[13:41] *** SubStack_ joined
[13:42] *** SubStack joined
[13:47] *** buetow joined
[14:00] *** miyagawa joined
[14:03] <pmurias> scw: you are right

[14:04] <pmurias> (?<pattern) is invalid

[14:18] *** jkanter joined
[14:22] *** stclare left
[14:26] *** Aankhen`` joined
[14:45] *** Bit-Man_ joined
[14:45] *** Bit-Man_ is now known as Bit-Man

[15:00] *** elmex joined
[15:12] *** anm joined
[15:17] *** frederico joined
[15:30] *** lollan joined
[16:00] *** lisheeghan joined
[16:10] *** iblechbot joined
[16:10] *** DHGE joined
[16:16] *** lisheeghan left
[16:19] *** froh-doh joined
[16:28] *** wesle1 joined
[16:33] *** Termy joined
[16:35] <svnbot6> r11564 | audreyt++ | * bump Parrot requirement to 0.4.6 (not yet released),

[16:35] <svnbot6> r11564 | audreyt++ |   for vsoni++'s recent work on making imcc reentrant.

[16:35] <svnbot6> r11564 | audreyt++ |   This is needed because parrot currently lacks a sane way to

[16:35] <svnbot6> r11564 | audreyt++ |   distinguish 0.4.5 from 0.4.5-devel in C-preprocessor land.

[16:38] <svnbot6> r11565 | iblech++ | * Improved the error messages of the smokeserver.

[16:38] <svnbot6> r11565 | iblech++ | * Diagnosed the cause for the rejection of the v6.pm-smoke (http://xrl.us/o5jt):

[16:38] <svnbot6> r11565 | iblech++ |   "Not all of the required fields (pugs_version osname) exist."

[16:38] <lambdabot> Title: Metamark

[16:40] <clkao> iblech++

[16:48] *** Aankhen`` joined
[17:05] <svnbot6> r11566 | audreyt++ | * now that PARROT_REVISION support svk checkout (r13320 by

[17:05] <svnbot6> r11566 | audreyt++ |   yours truly), we can go back to support Parrot 0.4.5

[17:05] <svnbot6> r11566 | audreyt++ |   more reasonably with #define magick.

[17:05] <svnbot6> r11567 | audreyt++ | * Excise PIL-Run from Pugs -C/-B's list of helper directories

[17:05] <svnbot6> r11567 | audreyt++ |   now we've switched fully to v6-alpha.

[17:09] * xerox quotes audrey's blog "iblech++'s multi-month PIL2JS journey on getting a few more tests passing each day"

[17:09] <xerox> Man, this iblech!

[17:29] *** chris2 joined
[17:34] <nothingmuch> ingy: ping!

[17:36] <clkao> moose

[17:36] <xerox> moo

[17:45] *** DHGE left
[17:47] <svnbot6> r11568 | nothingmuch++ | Mailing list summary for 2006-03 by kudra++

[17:52] <svnbot6> r11569 | clkao++ | Simple emit for %hash{}, passes statements/array_values_in_bool_context.t

[17:52] <svnbot6> r11570 | clkao++ | force_todo_test_junction is actually a string, not junction.

[17:55] *** shachaf joined
[18:00] *** miyagawa joined
[18:01] *** lisheeghan joined
[18:14] <clkao> eval in perl5 sets $@ to empty string. but test.pm seems to be expecting $! to be undefined when eval works

[18:14] <merlyn> in the old days, $! was never unset, only set

[18:14] <vsoni> hi audreyt

[18:15] <merlyn> I don't know when someone broke that, but it's broken now

[18:15] <merlyn> oh wait.  it apparently still works right

[18:16] <merlyn> eval shouldn't affect $! at all though, unless things inside the eval do syscall-related things

[18:25] <clkao> i was saying perl6 test.pm ;)

[18:32] *** Jedai joined
[18:40] <svnbot6> r11571 | clkao++ | kill warnings about redefining my $i.

[18:40] <svnbot6> r11572 | clkao++ | When testing defined-ness of $!, it is testing the emptiness of $@ in perl5.

[18:43] <svnbot6> r11573 | nothingmuch++ | fix pod links

[18:52] <svnbot6> r11574 | nothingmuch++ | hack dumb links so that there aren't escaping issues

[19:18] *** penk joined
[19:22] <clkao> ?eval my $g; for (0 .. 5) sub { $g = $g ~ $_; }; $g

[19:22] *** evalbot_11550 is now known as evalbot_11574

[19:22] <evalbot_11574> \"012345"

[19:22] <clkao> ?eval if(1) sub { 1 }

[19:22] <evalbot_11574> Error:  unexpected "s" expecting comment, operator or block

[19:23] <clkao> so for can take a sub?

[19:36] <merlyn> how come Module::Compile doesn't do the right thing when there's no .pmc file?

[19:36] <merlyn> is that impossible?

[19:36] <merlyn> shouldn't it just act like a source filter then, compiling each time?

[19:36] <merlyn> or am I missing sometihng?

[19:37] <merlyn> if the .pm file and the .pmc file act *differently*, that's clearly not the intent of what .pmc was meant to do

[19:37] <diotalevi> So you found a bug.

[19:37] <merlyn> I don't konw.

[19:37] <merlyn> it's not a bug if it's working as designed.  I'm just trying to figure out if this is the design

[19:38] <merlyn> in which case, I'd argue with the design. :)

[19:38] <diotalevi> You're correct that they're  supposed to act the same.

[19:39] <diotalevi> When it doesn't, it's a bug.

[19:39] <obra> &

[19:40] <diotalevi> Unless the intent changed in the last month.

[19:40] <merlyn> well, I'm not convinced Module::Compile intends to fulfill my assertion about .pm and .pmc

[19:40] <merlyn> not from a reading of the code

[19:40] <merlyn> it looks instead as if ".pm is the source for .pmc" is more of the intention

[19:41] <merlyn> and that the .pm is only accidentally in the @INC for convenience

[19:41] <merlyn> but was never meant to be loaded

[19:41] <diotalevi> No....

[19:41] <diotalevi> Maybe for the M'C using thing you're looking at but not M'C in general.

[19:41] <merlyn> OK.  I create Spew.pm, which uses Module::Compile -base.  I write Mission.pm, which says "use Spew".

[19:42] <merlyn> if I say "perl -MMission", it should act the same whether I've said "perl -c Mission.pm" or not

[19:42] <diotalevi> yeah.

[19:42] <merlyn> but apparently, perl -c Mission.pm compiles a Mission.pmc, that has an entire different behavior than the original .pm

[19:42] <merlyn> that's what I'm saying is broken

[19:42] <diotalevi> d'oh.

[19:43] <merlyn> I should be able to "use Mission" that works the same whether the .pmc is there or not

[19:43] <merlyn> although a lot slower if the pmc doesn't exist

[19:43] <merlyn> since it'll have to go through the source filtering

[19:43] *** pdcawley joined
[19:43] <diotalevi> yeah. typing 1 handed. vry slow. :-/ chips in other.

[19:44] <merlyn> so am I misunderstanding Module::Compile, or .pmc, or my own observation (and reading of code)?

[19:45] <merlyn> in other words, I view .pm => .pmc as "unoptimized => optimized", not "source => object"

[19:45] <diotalevi> Well I suppose you don't write a .pmc when you load a .pmc.

[19:46] <merlyn> apparently, Module::Compile currently views .pm => .pmc as "source => object"

[19:46] <pmurias> merlyn: if there isn't a .pmc doesn't it create one automaticly, so the behaviour is the same

[19:46] <diotalevi> that's a designed in difference.

[19:46] <merlyn> "create one automatically"?

[19:46] <merlyn> this is not my observation

[19:46] <merlyn> and what if it can't write it?

[19:47] <merlyn> what if I just install .pm in my tree as root, and you come along as a user

[19:47] <merlyn> it should still work

[19:47] <merlyn> albeit more slowly. :)

[19:47] <pmurias> it should

[19:48] <merlyn> as in, it currently does, except for my demonstrated bug, or as in it ideally should?

[19:48] <diotalevi> If you load a .pm then a .pmc should be written if possible and the filtered version should be loaded regardless. If you load a .pmc then you just get the filtered version.

[19:48] <merlyn> diotalevi - OK, then I'm seeing a bug

[19:48] <diotalevi> btw merlyn, I've noticed that you can't use left shift anywhere in your module.

[19:49] <diotalevi> there's a currently failing test against that.

[19:49] <merlyn> yeah, that silly precdence of operators.

[19:49] <merlyn> or rather, operators with two meanings

[19:49] <diotalevi> yeah. the one module i wanted to use M::C for had a few left shifts in it. They're not really optional either.

[19:49] <diotalevi> Bummer for me.

[19:50] <diotalevi> Well... I guess not 100% required. I mean I could go emulate left shift. That'd suck though.

[19:50] <merlyn> ick

[19:51] <diotalevi>  /power-of-two.

[19:51] <merlyn> heh

[19:51] <diotalevi> er, *power-of-two.

[19:51] <diotalevi> wrong direction.

[19:51] <merlyn> eval 'sub left_shift { shift <' . '< shift }'

[19:52] <merlyn> left_shift(10, 4)

[19:52] <diotalevi> the hell?

[19:52] <merlyn> what?

[19:52] <diotalevi> your shifts even have undefined order of operation.

[19:52] <diotalevi> in perl5 anyway.

[19:52] <merlyn> it still works. :)

[19:52] <diotalevi> yeah, yeah, whatever.

[19:52] <merlyn> heh

[19:53] <merlyn> anyway, so I'll report this bug in Module::Compile, and hope that it doesn't stop me from writing an article

[19:58] <merlyn> Ahh - there's the problem.  I need to return text from pmc_compile.  Not just return. :)

[20:00] <merlyn> return has to be not just an integer

[20:00] <diotalevi> I gather you can name &pmc_compile as &FILTER...

[20:00] <merlyn> otherwise the original text is used.  OK

[20:00] <merlyn> not a completely intuitive interface, but I now see why I thought it wasn't working

[20:01] <merlyn> now I just have to wire the rest of Spew into it

[20:02] <diotalevi> also, I email Ingy about the left shift thing. Right now parsing is a simple regexp. I suggested PPI and apparently there was some discussion between him and adamk about it and decided not to use PPI.

[20:06] <stevan> merlyn: FYI - I added "no Moose" support into the most recent version

[20:06] <stevan> still can't do Moose::has yet, but that shouldnt be too hard

[20:09] <diotalevi> stevan: can I tell do dependant destruction in moose yet?

[20:09] <diotalevi> wait, bad time to ask the question.

[20:09] <diotalevi> gotta go.

[20:13] *** kudra joined
[20:14] <kudra> hello

[20:17] *** unobe is now known as unobe_away

[20:20] *** diotamobile joined
[20:21] <stevan> diotalevi: I am not sure what you mean by dependent destruction

[20:22] *** Khisanth joined
[20:22] *** diotamobile joined
[20:25] *** larsen joined
[20:26] *** vel joined
[20:27] <merlyn> Yup.  definitely getting different behavior if the pmc isn't there

[20:27] <merlyn> Now i just have to figure out how to describe the problem to submit a bug report

[20:28] *** lisppaste3 joined
[20:28] <merlyn> I guess this is not ready for prime time.  I'll have to find a different topic now

[20:29] <merlyn> darn it.  wanted to promote perl6 stuff more. :(

[20:31] * kudra thinks it is bedtime.

[20:31] <kudra> Goodbye

[20:39] * merlyn files an rt bug

[20:39] <merlyn> ... http://rt.cpan.org/Ticket/Display.html?id=20494

[20:39] <lambdabot> Title: #20494: newly-created .pmc file is not loaded/executed when built

[20:48] *** weinig is now known as weinig|bbl

[21:12] *** penk joined
[22:11] *** gjvc joined
[22:25] <clkao> seen nothingmuch

[22:25] <jabbot> clkao: nothingmuch was seen 4 hours 51 minutes 15 seconds ago

[22:30] *** furrybeagle joined
[22:35] * nothingmuch shows

[22:35] *** salamndr joined
[22:36] <nothingmuch> clkao: ?

[22:39] <clkao> nothingmuch: where's your music

[22:44] <nothingmuch> clkao: on my laptop

[22:44] <nothingmuch> i can push it

[22:44] <nothingmuch> or put it on my server

[22:44] <nothingmuch> which do you prefer?

[22:48] <clkao> from your server is good

[22:52] <nothingmuch> what do you want? should i make a list of all the files?

[22:53] <nothingmuch> ssh key please

[22:55] *** fglock joined
[22:56] <nothingmuch> *yawn

[22:56] <nothingmuch> *

[22:56] <nothingmuch> i want to sleep soon

[22:56] <nothingmuch> clkao: hurry up

[23:03] *** bsb joined
[23:10] <clkao> fglock: around?

[23:11] <fglock> clkao: hi

[23:12] <clkao> fglock: hey, i was just trying to add 'loop' support.

[23:13] <clkao> (decided to see why statement/* isn't passing

[23:13] <clkao> fglock: turned out "loop { zz() }  while 1;" is parsed, expect a 'w' is eaten, if i remove the "<expression> while" rule, as it should require loop { } while.

[23:13] <fglock> ok

[23:14] <clkao> other things are 'elsif' (unless/if), given (given/do)

[23:15] <fglock> 'loop <block>', right?

[23:15] <clkao> no, "loop <block> while <expression>"

[23:16] <clkao> fglock: http://scsys.co.uk:8002/2798

[23:16] <lambdabot> Title: freenode_web paste from "clkao" at 82.35.85.110...

[23:16] <clkao> my current diff, can you tell what's obviously wrong?

[23:19] <fglock> clkao: it looks ok - is it committed?

[23:19] <clkao> no

[23:19] <clkao> it doesn't work

[23:20] <clkao> i can't make the 1st part's perl6_expression optional

[23:20] <clkao> adding ? doesn't work

[23:20] <clkao> maybe i should just commit it and let you fix it ;)

[23:21] <fglock> clkao: I think that's a bug in PCR '?'

[23:22] <clkao> :((

[23:22] <fglock> I think it only works after '()'

[23:22] <clkao> fglock: and this causes anonsub to fail

[23:23] <clkao> for unknown reason

[23:23] <fglock> it's easier to define an optional-expression, and then use that

[23:23] <clkao> bare_block that is.

[23:23] <fglock> I'll apply the patch here and try to fix it

[23:23] <clkao> ok.

[23:29] *** leon joined
[23:31] <leon> Anyone here?

[23:31] <nothingmuch> slightly

[23:31] <leon> :-)

[23:31] <nothingmuch> good night folks =)

[23:32] *** elmex joined
[23:34] <leon> it's kinda silent for a channel with 130 people in it...

[23:35] <leon> can anyone here answer a few questions about perl 6 development?

[23:43] <fglock> clkao: it was missing a <ws> before '(while)'

[23:43] <clkao> ah

[23:44] <clkao> and the optional thingy in exp[123]

[23:44] *** pingu joined
[23:44] <clkao> should we do maybe_empty_expression_no_block ?

[23:44] <clkao> sounds very ugly ;)

[23:47] *** cognominal joined
[23:48] <fglock> testing...

[23:50] <fglock> clkao: ok!

[23:50] <svnbot6> r11575 | fglock++ | v6 - parser: 'loop(;;){block}' and 'look{block}while exp;' - applied clkao++ patch with a few changes

[23:50] <leon> who should I report to for vandalized (spam) pugs wiki page?

[23:51] <fglock> s/look/loop/

[23:52] <fglock> leon: just say it here - people usually read the logs

[23:53] <leon> is this channel always this silent?

[23:54] <leon> i'm a bit surprised to see a channel with 133 users but only one message per minute

[23:54] <leon> just wondering...

[23:55] <fglock> it depends on which timezone most developers are - and most people just go sleep and don't logout :)

[23:56] *** mauke_ joined
[23:56] <leon> that would explain a lot..

[23:58] <leon> what is a better time to be here? a few hours earlier?

[23:58] <clkao> fglock: are you going to commit that?

[23:59] <fglock> clkao: it's r11575

