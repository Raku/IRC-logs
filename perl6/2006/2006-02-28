[00:16] *** K joined
[00:22] *** robkinyon joined
[00:24] *** Khisanth joined
[00:32] <svnbot6> r9205 | gaal++ | a few more updates to the Peek talk, mostly arrangement.

[00:32] <svnbot6> r9205 | gaal++ | audreyt++ and nothingmuch++ for the help.

[01:09] *** lao joined
[01:10] *** vel joined
[01:33] *** putter joined
[01:36] <putter> gaal: non-toy lisps do indeed have parsers.  called "readers".

[01:40] <pasteling> "putter" at 66.30.119.55 pasted "an example lisp reader (from bigloo scheme)" (657 lines, 22.3K) at http://sial.org/pbot/16066

[01:41] <putter> "interesting bits" are about half-way down.

[01:43] <putter> perhaps some non-toy stack language doesnt have a parser.  postscript doesnt have much of one.

[01:45] <putter> problem is non-toy => lets have lots of types, and distinguish them syntactically => have at least a rather parser-like tokenizer

[01:58] *** rgs joined
[02:07] *** rgs joined
[02:12] <putter> end of day.  drat.  tomorrow &

[02:59] *** justatheory joined
[03:04] *** oylenshpeegul joined
[03:11] *** oylenshpeegul left
[03:14] *** K joined
[03:20] *** stevan_ joined
[03:23] *** locksy- joined
[03:25] *** locksy- is now known as locksy

[03:42] *** joepurl joined
[04:23] *** Cryptic_K joined
[04:31] *** orafu joined
[04:53] *** beppu_ joined
[05:17] *** K joined
[05:18] *** SamB joined
[05:38] *** clkao joined
[05:50] *** Nouk joined
[06:01] *** Smurf-BR joined
[06:01] <Smurf-BR>  how can i get an archive from the internet using perl?

[06:02] <PerlJam> Smurf-BR: I think you're on the wrong channel.

[06:02] <Smurf-BR> huh

[06:03] <Smurf-BR> sorry.

[06:03] *** Smurf-BR left
[06:09] <obra>   heh

[06:25] *** Fran joined
[06:26] *** Fran left
[06:45] *** GeJ joined
[06:47] *** nothingmuch joined
[06:49] <nothingmuch> morning

[06:51] *** spo0nman joined
[06:57] <nothingmuch> spo0nman: are you the guy who gave the ruby talk yesterday?

[06:57] <nothingmuch> talks?

[07:03] *** Aankhen`` joined
[07:11] *** tcliou joined
[07:12] <GeJ> morning all

[07:12] *** bsb joined
[07:14] *** KingDiamond joined
[07:18] *** fandango joined
[07:21] *** szabgab joined
[07:23] <svnbot6> r9206 | audreyt++ | * last-minute JIT fixes to gaal talk

[07:25] *** tcliou joined
[07:27] <spo0nman> nothingmuch: NO ... I didnt do anything.

[07:28] <spo0nman> nothingmuch: was he a india guy with long hair?

[07:29] <spo0nman> nothingmuch:  that would be KingDiamond.

[07:30] *** iblechbot joined
[07:30] *** shmar joined
[07:30] <shmar> morning all...

[07:34] *** K joined
[07:38] <nothingmuch> spo0nman: i just saw your yahoo ip

[07:38] <nothingmuch> hola shmar 

[07:38] <shmar> hiya...

[07:40] *** marmic joined
[07:47] *** drrho joined
[08:00] *** xinming joined
[08:31] *** szabgab left
[08:36] *** ghenry joined
[08:41] <spo0nman> nothingmuch: yeah! we work together ... I dont do ruby though.

[08:42] <spo0nman> nothingmuch: you're at the conference in israel.

[08:42] <nothingmuch> yes =)

[08:42] <nothingmuch> small world ;-)

[08:43] <spo0nman> nothingmuch: :)

[08:44] *** shmar joined
[08:48] *** KingDiamond joined
[08:50] *** xinming joined
[08:54] *** kane_ joined
[09:07] *** TimToady joined
[09:11] <azuroth> hi TimToady

[09:11] <TimToady> greetin's

[09:11] <anatoly> TimToady: thanks for explaining the word 'tuits'! Even though you wrote about it 7 years ago or so :) 

[09:11] <anatoly> Google found it for me today :)

[09:11] <TimToady> You're certainly welcome.  I'm sure I wasn't the first person to explain it though...

[09:12] <azuroth> I found somewhere selling round plaques when I was trying to figure out the meaning

[09:17] <anatoly> I grokked its meaning from context, but never knew where it came from

[09:17] <anatoly> somehow I had weird associations with "twit".

[09:38] *** Kuon joined
[09:40] *** elmex joined
[09:42] *** mj41_ joined
[09:46] *** kisu joined
[09:56] *** nnunley joined
[10:17] <TimToady> audreyt: the idea that /[|foo]/ should mean /[<fail>|foo]/ is...interesting...

[10:25] *** Nouk joined
[10:45] <ingy> TimToady: greetings. What are you doing in .il?

[10:47] <TimToady> ingy: wonderful, now that I'm done with my talks, and almost done with my cold.

[10:48] *** bsb joined
[10:48] <ingy> TimToady: I hear you are coming to Tokyo?

[10:52] <ingy> I'm living in Taiwan these days so no Tokyo jetlag for me!

[10:54] <TimToady> Well, at least the bad jet lag is coming back for me.  I don't mind flying west since it's just staying up later...

[10:56] *** christo joined
[10:56] *** christo left
[10:56] <ingy> hmmm, I recently flew East from Taipei to SFO and somehow also cured it by staying up later

[10:57] <ingy> the flight left at 7pm and arrived at 2pm of the same day (by crossing the IDL)

[10:57] <ingy> I stayed up until midnight and then slept until 8am

[10:58] <ingy> I did that every night afterwards

[10:58] <ingy> the hours leading up to midnight were a decreasing hell for 5 days

[11:00] <ingy> my jetlag going back west to taiwan, which I'm in the middle of, seems harder. Probably because I have a cold, and pushing staying up longer seems counterproductive

[11:01] <ingy> then again, in Taiwan it seems there are no set hours of sleep vs hacking. audreyt and friends showed me that ;)

[11:02] *** rantanplan_ joined
[11:02] *** r0nny joined
[11:10] <lypanov> umm

[11:10] * lypanov ponders and plots

[11:10] <lypanov> is rules ready for e.g parsing ruby?

[11:20] *** nnunley_ joined
[11:23] *** netanya_goy joined
[11:45] *** nnunley joined
[11:45] *** elmex joined
[11:47] *** anatoly joined
[11:47] *** shmar joined
[11:49] *** KingDiamond joined
[11:57] *** iblechbot joined
[11:59] *** putter joined
[11:59] <putter> good morning all

[11:59] <shmar> morning

[12:02] <putter> lypanov: re ruby parsing... maybe.  at least for another couple of days, the only rules are pugs on pge.  you have to keep the grammar flat (unless the hackathon changed things, rules are in a single flat global namespace).  might work.

[12:05] <putter> lypanov: I've a partial ruby grammar extracted by running ripper over rubicon.  and the extractor, so you could do an up-to-date rb1.9 pass.  

[12:05] <putter> err, s/I've/I believe I have/

[12:05] <putter> let me know if you care. ;)

[12:06] <azuroth> rubicon... sounds like magic

[12:08] <azuroth> wait, ripper sounds like the magic one

[12:08] <putter> audreyt, etal: re parsing, one oddity.  when parsing a circumfix token, pge treats the second half as a separate CLOSE-type token.   When they show up, it checks that the close token matches that of the operator on top of the stack.  But...

[12:11] <putter> azuroth: :)  rubicon is a ruby test suite.  ripper is a mutant version of ruby's yacc grammar, so you can get (parts of - it's a work in (very slow) progress)) the parsetree.  while ruby is quite dynamic, it's syntax isnt, so it's actually a close match to the source file.

[12:12] <azuroth> ahh. it sounded a bit like ripper just went through the whole rubicon and made a grammar

[12:14] *** lilo joined
[12:14] <lilo> hi.... is anyone around who can provide me some clarifying information on the accessibility and use of feather.perl6.nl for acccess to freenode?

[12:14] <putter> ... but, the CLOSE tokens for all the circumfix/etc operators are tossed on token list at definition time, and left there.  I may well be confused, but this seems "not the right thing".  I would have thought the CLOSE token should only be active when it's operator is on top of the stack.

[12:15] *** Aankh|Clone joined
[12:15] <lilo> we noticed a connect limit was hit in the last few hours and I want to provide additional connects if possible

[12:16] <lilo> I can come back if no one has any information

[12:16] <azuroth> Juerd would know best, I believe

[12:17] *** SolidState joined
[12:17] <putter> which means if you separate the tokenizer from the parser (pge doesnt, so it doesnt arise), you need a backchannel from parser to tokenizer.  and while the tokenizer can optimize it's the rest of it's tokens (eg, using a trie), the "current close" token is going to be changing with say every other token.

[12:17] <putter> eeep.

[12:18] <lilo> I can try to check back later

[12:18] <azuroth> I guess so, lilo

[12:19] <lilo> if anyone with information could /msg me when they see this, I'd be obliged

[12:19] <lilo> I may be a bit busy later

[12:19] * lilo waves

[12:19] *** lilo left
[12:21] *** levengli joined
[12:21] <putter> azuroth: the idea is rather than extracting a grammar from yacc by hand, you just get a lot of parse trees (a lot meaning good coverage of the language/grammar, which rubicon is ok for), and simply grovel over them ("ahh, node x can also have a subnode y, add it to the list").  so with little effort, you can get the core of a grammar.  and track grammar changes without a lot of pain.

[12:22] <azuroth> ahh, cool

[12:30] <shmar> bbl

[12:39] <blm> Is there an interface to load C libraries in pugs? Can someone point out where it is?

[12:41] <lypanov> blm: with ffi i guess. no idea how to tho unfortunately

[12:41] <blm> lypanov: OK Thanks :-)

[12:51] <azuroth> ?eval [/] (1,2,3)

[12:51] <evalbot_9206> 1/6 

[12:54] <azuroth> is there a way to fold right-associatively?

[12:54] <azuroth> ?eval (1,2,3) [/]

[12:54] <evalbot_9206> Error:  unexpected "[" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[12:57] <broquaint> (1,2,3) <<[/]

[12:57] <broquaint> ?eval (1,2,3) <<[/]

[12:57] <evalbot_9206> Error:  unexpected "<" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[12:57] <azuroth> ?eval [/] (1,2,3).reverse

[12:58] <evalbot_9206> 3/2 

[12:58] <azuroth> ;-p

[12:58] <azuroth> not quite

[12:58] <broquaint> Where's the hyperoperator there?

[12:58] <broquaint> Are has the hyperoperator changed from <</>> to [] ?

[12:58] <azuroth> hmm. I didn't think fold was a hyper

[12:58] <broquaint> s/Are/Or/

[12:58] <xinming> ?eval my @a = (1, 2, 3); @a>>++

[12:58] <evalbot_9206> Error: Can't modify constant item: VInt 1 

[12:59] <xinming> hmm

[12:59] <broquaint> Brain teh b0rk. Ignore me.

[12:59] <xinming> ?eval my @a = [1, 2, 3]; @a>>++

[12:59] <evalbot_9206> Error: Can't modify constant item: VInt 1 

[12:59] <azuroth> but I don't think single-sided hypers are done, yet

[12:59] <azuroth> ?eval my @a = [1,2,3]; @a >>+=<< 1;

[12:59] <evalbot_9206> Error:  unexpected ">" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[12:59] <azuroth> ?eval my @a = [1,2,3]; @a >>+<< 1;

[12:59] <xinming> yes, there are many parts haven't been covered yet

[12:59] <evalbot_9206> (4.0,) 

[13:00] <azuroth> ?eval my @a = (1,2,3); @a >>+<< 1;

[13:00] <evalbot_9206> (2, 3, 4) 

[13:03] *** Aragone is now known as Arathorn

[13:13] <lypanov> p/win 6

[13:13] *** chris2 joined
[13:13] <lypanov> eep

[13:20] *** shmar joined
[13:22] *** kolibrie joined
[13:26] *** alexe joined
[13:39] *** SolidState joined
[13:54] *** qwacky joined
[14:00] *** Qiang joined
[14:12] *** frobnitz joined
[14:18] *** f0rth joined
[14:24] *** hexmode joined
[14:30] *** pdcawley joined
[14:32] *** nothingmuch joined
[14:32] <pasteling> "nothingmuch" at 192.118.100.254 pasted "S12 patch for Match coerces to result" (95 lines, 4K) at http://sial.org/pbot/16081

[14:33] <nothingmuch> the problem with audreyt:

[14:33] <nothingmuch> "Whenever you are going to tell audreyt something, assume she already knows it"?

[14:33] <nothingmuch> this is a paradox though

[14:34] <nothingmuch> if you don't tell her you can never really be sure

[14:34] <audreyt> heh, it's just I've been keeping an eye on IRC

[14:34] <audreyt> my real brain is the IRC hivemind

[14:34] <TimToady> I put it in the same category as taking your umbrella to make sure it doesn't rain.

[14:34] <nothingmuch> yes

[14:34] <audreyt> the laptop and my wetware brain are just L1 and L2 caches

[14:34] <nothingmuch> i agree

[14:34] <nothingmuch> that's why i bought that toothbrush

[14:34] <nothingmuch> i lost my toothbrush, so i went to the store, bought a new one

[14:35] <nothingmuch> and then I found it

[14:35] <TimToady> whatever works...

[14:35] <lypanov> aahh. genius

[14:35] <lypanov> now i have an excuse for getting a new laptop

[14:35] <lypanov> "i lost the old one, needed to find it quick"

[14:35] <nothingmuch> lypanov: svk also functions as delayed write

[14:36] <rgs> you wouldn't have found your toothbrush if you didn't bought another one

[14:36] <nothingmuch> so even if your bus is not working right now and you can't *read* new data from your hive brain....

[14:36] <nothingmuch> rgs: exactly =)

[14:36] <lypanov> nothingmuch: svk doesn't love me unfortunately :(

[14:36] <rgs> so money disantangles the wave function of toothbrushes

[14:38] <nothingmuch> lypanov: darcs!

[14:39] <nothingmuch> darcs is lazy write by default though

[14:39] <nothingmuch> so it doesn't fit well with the my-brain-is-on-the-internet-and-i-have-no-access metaphor

[14:40] <lypanov> nothingmuch: darcs doesn't integrate so well with svn

[14:40] <lypanov> and its slow, horrifically so

[14:41] <nothingmuch> i have never met darcs' slowness

[14:41] <nothingmuch> but i agree

[14:41] <nothingmuch> for svn it's not good enough

[14:41] <nothingmuch> that's why I use both

[14:41] *** cdpruden joined
[14:41] <lypanov> (its a 440mb repo i work with, and svk handles it in style, other than strange spurious merges)

[14:41] <shmar> SVN is definately the best for bad line connectivity...

[14:42] <audreyt> nothingmuch: 

[14:42] <lypanov> i should scrap the repo and start from scratch, i think i messed it up while learning the syste

[14:42] <shmar> "The script is written by microsoft" - That's how they always like it...

[14:42] <lypanov> s/$/m/

[14:43] <audreyt> sub f { say $x.from }; my $rv = m//; f($rv);

[14:44] <audreyt> nothingmuch: why should this die?

[14:44] <audreyt> nothingmuch: I'm not comfortable of junctive autocoercing.

[14:44] <nothingmuch> die?

[14:44] <audreyt> my suggestion was just to let the result object handle coerce.

[14:44] <nothingmuch> oh

[14:44] <nothingmuch> it shouldn't

[14:44] <nothingmuch> well

[14:45] <audreyt> your patch:

[14:45] <audreyt> +Additionally, the C<Match> object automatically coerces into a it's underlying

[14:45] <audreyt> +result whenever it's sent into a function

[14:45] <nothingmuch> sub f ( Match $x ) { } 

[14:45] <nothingmuch> the reason is:

[14:45] <audreyt> we tried that with pairs.

[14:45] <audreyt> ain't working.

[14:45] * ayrnieu discovers Perl6::Bible

[14:45] <nothingmuch> okay

[14:45] <nothingmuch> fair enough

[14:45] <nothingmuch> my point is:

[14:45] <nothingmuch> it's more likely that someone will forget to coerce

[14:45] <nothingmuch> than that someone will have nice annotations

[14:45] <nothingmuch> and this could leak match objects into ASTs and stuff

[14:45] <audreyt> now, to _typed_ functions, I'm fine with that

[14:46] <nothingmuch> yeah

[14:46] <audreyt> because they call coerce

[14:46] <nothingmuch> exactly

[14:46] <audreyt> but juctive autocoercion on just any items...

[14:46] <audreyt> nah.

[14:46] <nothingmuch> junctive autocoercing is not my favourite either

[14:46] <nothingmuch> in fact, i hate it

[14:46] <nothingmuch> but I've learned to accept it, and i just feel that this is consistent

[14:46] <nothingmuch> without pissing me off =)

[14:47] <nothingmuch> (I am indifferent about typing since I thinkin typing is good documentation anyway)

[14:47] <nothingmuch> (that is, i will add types, i don't care if Match autocoerces or just coerces)

[14:47] <nothingmuch> (but others might not agree, and larry seemed to like autocoercion)

[14:47] <nothingmuch> TimToady: comments?

[14:47] *** vel joined
[14:48] <audreyt> I like autocoercion

[14:48] <audreyt> just not junctive ones.

[14:48] <nothingmuch> wait

[14:48] <nothingmuch> explain not liking junctive ones

[14:48] <nothingmuch> is this a digression?

[14:48] <nothingmuch> or directly related to my patch?

[14:49] <audreyt> &f := { $_ }

[14:49] <audreyt> &f := -> SomeType $_ { $_ }

[14:49] <audreyt> junctions explode on both

[14:49] <audreyt> but I don't want match explode on the first.

[14:50] <nothingmuch> okay

[14:50] <nothingmuch> again, i'm indifferent

[14:50] <nothingmuch> since I will SomeType it anyway

[14:50] <audreyt> cool then

[14:50] <nothingmuch> but larry seemed to like the first too

[14:50] <nothingmuch> when I brought it up

[14:50] <nothingmuch> (i thought that's what you meant yesterday)

[14:51] <audreyt> in the first case, we reasoned that Junctions are not items

[14:51] <audreyt> I'm not comfortable with saying Matches are not itms.

[14:52] *** pdcawley joined
[14:52] <nothingmuch> aha

[14:52] <nothingmuch> i agree

[14:52] <nothingmuch> it isa Item

[14:52] <nothingmuch> but...

[14:52] <nothingmuch> it might not DWIM

[14:52] <nothingmuch> and that's not my decision

[14:52] <nothingmuch> =)

[14:53] <TimToady> wouldn't multi delegation allow it to be an Item?

[14:53] <audreyt> sure will, but then it'd not be nothingmuch's multi

[14:53] <TimToady> (presuming --> Type is possible multi tiebreaker)

[14:53] <audreyt> which makes it explode on any unsuspecting function

[14:53] <audreyt> just like junctions do

[14:53] <svnbot6> r9207 | audreyt++ | * openFile now turns the autoflushing bit on with a file, as

[14:53] <svnbot6> r9207 | audreyt++ |   otherwise it doesn't get closed upon program exit.

[14:53] <nothingmuch> not explode

[14:53] <nothingmuch> just unwrap

[14:53] <nothingmuch> Match objects unwrap

[14:53] <nothingmuch> mc parsec wraps

[14:53] <audreyt> but why function call boundary?

[14:54] <audreyt> it means it explodes on given

[14:54] <audreyt> on for

[14:54] <audreyt> on if

[14:54] <nothingmuch> hmm

[14:54] <nothingmuch> i see

[14:54] <nothingmuch> i agree with that being broken

[14:54] <audreyt> again, we tried with pairs

[14:54] <audreyt> it doesn't quite work out

[14:54] <nothingmuch> but "remote" code probably wants the results

[14:54] <nothingmuch> the solution can change

[14:54] <nothingmuch> i don't mind

[14:55] <nothingmuch> in fact, i don't even feel the problem

[14:55] <nothingmuch> i'm just noting that the problem might exist:

[14:55] <audreyt> if they want to do anything with it, they'll probably demand a type down the call chain

[14:55] <nothingmuch> Match objects instead of nodes in ASTs

[14:55] <nothingmuch> yes, presumably

[14:55] <nothingmuch> but it still doesn't DWIM

[14:55] <audreyt> but that's fine, as they autocoerce still

[14:55] <lypanov> ooo.its snowing

[14:55] <audreyt> I think it DWIMs

[14:55] <audreyt> that saves us the trouble

[14:55] <nothingmuch> hmm

[14:55] <audreyt> of inquiring annotated positions in notes

[14:55] <audreyt> I mean nodes

[14:55] <nothingmuch> well

[14:55] <nothingmuch> whatever, i really don't care ;-)

[14:55] <nothingmuch> i will annotate

[14:56] <nothingmuch> and those who don't can learn to do that

[14:56] <nothingmuch> we'll tell them "performance" if they don't by "self documenting"

[14:56] <audreyt> well

[14:56] <audreyt>     <moose> { MooseContainer( $<moose>.() ) }

[14:56] <audreyt> you are calling

[14:56] <audreyt> $<moose>.() as MooseContainer

[14:57] <audreyt> so that's actually an explicitly coerce call

[14:57] <audreyt> so you win anyway

[14:57] <nothingmuch> class nothingmuch { has $TimToady handles &discussion }

[14:57] <audreyt> regardless of it acts junctively or not

[14:57] <nothingmuch> i know i win =)

[14:57] <audreyt> "you can solve any problem with one extra level of redirection"

[14:57] <audreyt> I mean, indirection

[14:57] <audreyt> wait, I do mean redirection

[14:57] <wolverian> (does 'handles' take &s?)

[14:57] <nothingmuch> =)

[14:57] <nothingmuch> wolverian: i dunno

[14:57] <audreyt> wolverian: problly not.

[14:57] <nothingmuch> "discussion"

[14:57] <TimToady> except the problem of too many levels of indirection...

[14:58] <wolverian> ok, just checking :)

[14:58] <nothingmuch> unless it's a multi

[14:58] <audreyt> handles <discussion>

[14:58] <nothingmuch> right

[14:58] <audreyt> nothingmuch: &discussion isn't even in scope

[14:58] <TimToady> or redirection...

[14:58] <nothingmuch> audreyt: unless it's a multi =)

[14:58] <nothingmuch> that's why i got confused

[14:58] <audreyt> where it still isn't in scope :)

[14:58] <nothingmuch> because we were discussing 'multi handles'

[14:58] <audreyt> (you closed the class definition)

[14:58] <nothingmuch> isn't it in GLOBAL::

[14:58] <wolverian> do we need a sigil for not-yet-declared subs now? :)

[14:58] <TimToady> What't the expected return type of this discussion?

[14:58] <nothingmuch> ah

[14:58] <nothingmuch> yes

[14:58] <nothingmuch> TimToady: Either Yes No

[14:59] <nothingmuch> data Yes = Yes String -- reasoning

[14:59] <nothingmuch> (that was for lumi)

[14:59] <nothingmuch> sorry

[14:59] <nothingmuch> newtype

[14:59] <nothingmuch> or just type?

[15:02] <audreyt> I got the repatch.

[15:02] <audreyt> nopasteing.

[15:02] <pasteling> "audreyt" at 192.118.100.254 pasted "S05: only typed coercions explode Matches." (48 lines, 1.7K) at http://sial.org/pbot/16083

[15:05] <audreyt> wolverian: no, thank $deity, no.

[15:05] <wolverian> ;) we don't have ¢ anymore either?

[15:06] <audreyt> you mean ?foo ?

[15:06] <svnbot6> r9208 | audreyt++ | * Add Gaal's peek.spork to docs/talks/README.

[15:06] <svnbot6> r9208 | audreyt++ | * In the talk slides, the $var in rules should really be

[15:06] <svnbot6> r9208 | audreyt++ |   $<var>.  Mea culpa.

[15:06] <audreyt> it's boolean coercer

[15:06] <wolverian> no, I mean the cent sigil. sorry if that didn't come out right

[15:06] <wolverian> (utf8 here)

[15:06] <audreyt> oh. no, it's ^Foo now, which talks about the metaclass ("real" class object)

[15:07] <audreyt> (not yet implemented inpugs)

[15:07] <wolverian> ah. right. and Foo is the undefined object, or so. I need to think my way through the implications there.

[15:07] <audreyt> Foo is the prototypical object

[15:07] <audreyt> that is both false and undefined by default

[15:08] <audreyt> but nevertheless has an .id.

[15:08] <wolverian> what's .id?

[15:08] <audreyt> it's what ruby calls .object_id.

[15:09] <audreyt> or .__id__

[15:09] <wolverian> hm. so .ego is..

[15:09] <chris2> or .id in <1.8 without warnings :)

[15:09] *** alexe left
[15:10] <audreyt> chris2: yeah. why is it deprecated anyway?

[15:10] <audreyt> namespace protection?

[15:10] <chris2> too easy to nameclash, i think

[15:10] <audreyt> I s'ppose

[15:10] <wolverian> I'd imagine db-type things would like .id

[15:10] <chris2> yeah

[15:10] <chris2> like AR, which clobbers it by default (suckers)

[15:11] <ayrnieu> audreyt - Perl6::Bible::contents should probably have this instead of line 138 (right after: close MOD;)  $text =~ s/^.* \Q =head1 \s CONTENTS \E (.*?) \Q =head1 .* $/$1/sx or die "Can't find contents\n";

[15:11] <audreyt> active records?

[15:11] <chris2> yep

[15:11] *** pdcawley joined
[15:11] <ayrnieu> audreyt - 5.8.6 , at least, parses what you have in such a bizarre way that it acts like: $text = "(.*?)"

[15:11] <nothingmuch> instance Monad AcmeSOmethingOrOtherAgent 

[15:12] <audreyt> ayrnieu: fixed, uploading

[15:12] *** bsb joined
[15:12] <audreyt> TimToady: the S05 patch looks okay?

[15:13] <ayrnieu> oh, but those \Q and \E aren't necessary, sorry.  Artifact of debugging.  The whitespace and /x does the trick.

[15:15] <TimToady> I suspect .id is really .^id, assuming that .meta.id actually still

[15:15] <TimToady> has access to the self that called it.

[15:15] <TimToady> So if the user overrides .id, they can still get at the .meta.id.

[15:16] <TimToady> Though I suppose some people could get burned writing .id and then

[15:16] <nothingmuch> $?CALLER::SELF ?

[15:16] <TimToady> getting it overridden...

[15:16] <nothingmuch> i think we also need $?CALLER::INVOCANT

[15:16] <nothingmuch> $?INVOCANT ::= $?SELF

[15:16] <nothingmuch> that reads better whne it's not *really* "my self

[15:16] <nothingmuch> "

[15:16] <nothingmuch> in the english sense

[15:17] <audreyt> TimToady: having .meta.id handling self is quite dangerous

[15:17] <audreyt> it'd mean that no two .meta are alike

[15:17] <audreyt> which leads directly to singleton classes

[15:18] <audreyt> which I'm not sure S12 allows as of this moment :)

[15:19] <TimToady> I'm not suggesting that it be the invocant of .meta, just available.

[15:19] <integral> there's not something simple like: $obj.Perl6::IdRole::id; ?

[15:20] *** levengli joined
[15:20] <TimToady> audreyt: patch looks good

[15:20] <audreyt> TimToady: available as a property?

[15:20] <nothingmuch> so the metaclass id is $foo.meta.^id ?

[15:20] <audreyt> or as $+id?

[15:20] <nothingmuch> and ::Class.^id == ::Class.id ?

[15:20] <TimToady> caller something might be adequate

[15:21] <TimToady> er, except we're called directly, hmm.

[15:21] <nothingmuch> btw, I changed my mind about protos being undef

[15:21] <audreyt> indeed.

[15:21] <nothingmuch> my Dog $fido;

[15:21] <nothingmuch> $fido.meta.methods; # this is still very useful

[15:21] <nothingmuch> but the problem is that:

[15:21] <nothingmuch> if $fido has been .= newd

[15:21] <nothingmuch> then it's .meta

[15:21] <nothingmuch> but if not, than it isn't

[15:21] <nothingmuch> which is slightly not like the '.isa' test

[15:22] <nothingmuch> but nevertheless, it's still useful

[15:22] <TimToady> I don't see why it wouldn't still be .meta.  It's just the .meta of something that doesn't exist.

[15:22] <audreyt> right.

[15:22] <audreyt> $fido has an .id even it it doesn't have an .defined.

[15:23] <audreyt> so obviously it has a .meta.

[15:23] <nothingmuch> isn't ::Dog the instance that *is* Dog?

[15:23] <audreyt> TimToady: if we have

[15:23] <audreyt> class Dog { has $head_count = 3 }

[15:23] <audreyt> does

[15:23] <audreyt> Dog.head_count

[15:23] <audreyt> return 3, or undef?

[15:24] <TimToady> undef

[15:24] <nothingmuch> and 'my Dog $fido; $fido.head_count' ?

[15:24] <TimToady> lr\\

[15:24] <TimToady> or "undef method"

[15:24] <TimToady> should throw an exception.

[15:24] <audreyt> yup.

[15:25] <audreyt> meaningful accessors are only generated for instantiated objects where there's something to access.

[15:25] <nothingmuch> so is ::Dog the same?

[15:25] <audreyt> cool. I think that makes sense :-)

[15:25] <levengli> at the risk of repeating myself (i forgot :-[), where can i find the equivalent to the camel book on perl6?

[15:25] <audreyt> nothingmuch: yeah.

[15:25] <nothingmuch> and if so, why is ::Dog.meta the same as Dog.new.meta?

[15:25] <nothingmuch> isn't it more like Dog.new.meta.meta?

[15:26] <audreyt> levengli: first, run this short perl6 program

[15:26] <audreyt> sleep((1..50000000).pick)

[15:26] <audreyt> then go out and buy a camel book :)

[15:27] <shmar> :)

[15:27] *** szabgab joined
[15:27] <audreyt> but seriously, the Synopses are currently the closest we have

[15:27] <nothingmuch> that's only a year and a half

[15:27] <levengli> aghhhhh. too much to read. all my knowledge is down the toilet

[15:27] <audreyt> levengli: http://dev.perl.org/perl6/doc/synopsis.html

[15:27] <nothingmuch> hola szabgab 

[15:27] <szabgab> rehola

[15:27] <wolverian> hm. is there a .= type syntax to do $foo *= $foo.bar; 

[15:29] <TimToady> nothingmuch: because every Dog has the same metaclass whether it exists or not.

[15:29] <audreyt> mmm *.=

[15:29] <ayrnieu> levengli - the Perl6 Camel will come in time.

[15:29] <wolverian> audreyt, yeah. then >>*.=  ... hrm. :)

[15:29] *** SamB joined
[15:29] <audreyt> [*%$/{}]

[15:29] <wolverian> $work_left / [+] @workers>>*.= tuits

[15:30] <audreyt> starts to resemble APL

[15:30] <nothingmuch> TimToady: so please correct these definitions:

[15:30] <nothingmuch> Dog.new is an instance of dog

[15:30] <nothingmuch> ::Dog is an instance of dog, with no value

[15:30] <nothingmuch> Dog is an instance of the metaclass

[15:30] <nothingmuch> (probably Class)

[15:31] <nothingmuch> ::Dog is the prototype of Dog.new

[15:31] <TimToady> No, ^Dog is the instance.  Dog is either synonymous with ::Dog or a compile time error because Dog hasn't been declared.

[15:31] <ayrnieu> audreyt - not quite, at least not quite J.  J has special syntaxes for 'forks' and such, which rely on functions being definitively monadic or dyadic.

[15:32] *** levengli left
[15:32] *** levengli joined
[15:32] <nothingmuch> ah

[15:32] <nothingmuch> so my Dog $fido desugars to ^Dog?

[15:32] *** lisppaste3 joined
[15:32] <nothingmuch> okay

[15:32] *** levengli left
[15:32] <audreyt> no, it desugars to

[15:33] <audreyt> my $fido ::= ::Dog;

[15:33] <audreyt> as well as put a constraint on the container $fido.

[15:33] <nothingmuch> oh

[15:33] <nothingmuch> it binds

[15:33] <nothingmuch> i thought it assigns

[15:33] <nothingmuch> err

[15:33] <nothingmuch> please explain that

[15:33] <audreyt> hm, I'm wrong. it has to be a compile-time assignment.

[15:33] <audreyt> not binding.

[15:33] <nothingmuch> how can you do container assignment at compile time with a class name as the rvalue

[15:33] <nothingmuch> oh

[15:33] <nothingmuch> okay

[15:33] <nothingmuch> =)

[15:35] <nothingmuch> compile time assignments don't make sense... or do they?

[15:36] <nothingmuch> like... just for constants?

[15:36] <nothingmuch> in which case the value is cow'd?

[15:36] <nothingmuch> or just read only?

[15:36] *** szabgab left
[15:36] <TimToady> doesn't matter as long as the semantics are preserverd.

[15:37] <TimToady> when the assign happens depends on the declarator

[15:37] <TimToady> constant = compile time

[15:37] <TimToady> state = first time

[15:37] <TimToady> has = build time

[15:38] <audreyt> my = each time closure is entered

[15:38] *** levengli joined
[15:38] *** vel joined
[15:38] <nothingmuch> hmm

[15:38] <nothingmuch> that's a nice sort of hierchy

[15:39] <nothingmuch> is it found verbatim in e.g. S04?

[15:39] *** levengli left
[15:41] <audreyt> no ;)

[15:43] <nothingmuch> is anyone patching?

[15:43] <TimToady> my should assign at ordinary assignment time because you could have multiple of them.

[15:44] *** levengli joined
[15:44] *** levengli left
[15:45] *** SolidState joined
[15:46] *** netanya_goy joined
[15:47] <nothingmuch> netanya_goy: cure nick

[15:47] *** levengli joined
[15:47] <nothingmuch> $fido; BEGIN { = ::Dog }

[15:48] <SolidState> Is chomp implemented in the latest pugs release?

[15:48] <nothingmuch> .new

[15:49] <SolidState> nothingmuch: is that an answer to me?

[15:50] <nothingmuch> SolidState: no

[15:50] <nothingmuch> sorry =)

[15:51] <SolidState> nothingmuch: no you were not answering me, or no chomp is not implemented yet?

[15:52] *** levengli left
[15:52] <nothingmuch> meta meta meta no

[15:52] <nothingmuch> seriously though

[15:52] <nothingmuch> that answer was not to you =)

[15:53] <nothingmuch> check the smoke tests

[15:53] <nothingmuch> http://smoke.pugscode.org/

[15:53] <audreyt> SolidState: I think chomp is implemented as in p5

[15:53] <nothingmuch> it probably is in the last release

[15:53] <audreyt> sorry

[15:53] <audreyt> it's actually implemented correctly

[15:53] <audreyt> as in P6

[15:53] <audreyt> which returns the chomped thing

[15:53] <audreyt> to do an implace chomp, sayso:

[15:54] <audreyt> $str .= chomp;

[15:55] *** szabgab joined
[15:55] *** szabgab left
[15:55] *** levengli joined
[15:58] *** _SamB_ joined
[15:59] <SolidState> audreyt: thanks, using chomp as you suggested works. Thanks! :)

[16:01] *** szabgab joined
[16:01] <ayrnieu> SolidState - quick, quick!  How would you perl6ly write chomp($foo = <FH>) ?

[16:01] *** epsalon joined
[16:01] <SolidState> ayrnieu: $foo .= <FH>

[16:01] <SolidState> ayrnieu: ?

[16:01] <szabgab> everyone invited to #osdc.il for the auction soon

[16:02] <ayrnieu> SolidState - does that chomp?

[16:02] <audreyt> you can order auction items remotely?

[16:02] <ayrnieu> SolidState - also, <> operates differently for perl6...

[16:02] <epsalon> only if you pay and collect them locally.

[16:02] *** szabgab left
[16:03] <stevan_> how much is the starting bid for a lock of nothingmuch's hair?

[16:04] <shmar> steven_: LOL!

[16:05] <ayrnieu> SolidState - I would guess: =$foo .= chomp

[16:06] <wolverian> handles autochomp by default, afaik

[16:06] <SolidState> ayrnieu: any idea why "for chomp($input.readline) { ... }" doesn't work as expected?

[16:06] <wolverian> (i.e. the :chomp layer, or whatever its name)

[16:06] <SolidState> wolverian: noope

[16:06] <SolidState> wolverian: nope*

[16:06] <wolverian> SolidState, nope? not in pugs or in perl6?

[16:06] <SolidState> wolverian: pugs

[16:06] <wolverian> ah, well. that's implementation.. ;) 

[16:07] <SolidState> wolverian: 6.2.11 at least. Audrey changes things awefully fast :)

[16:08] *** levengli left
[16:08] <SolidState> ayrnieu: any idea about my question? Shouldn't "chomp" when given an array return an array of chomped elements?

[16:09] <audreyt> actually, autochomping should be the default

[16:09] <audreyt> and we havn't implemented them, hmm.

[16:10] <audreyt> the test is t/builtins/io/readline_chomped.t

[16:10] <SolidState> ayrnieu: in case you're wondering, right now the code I wrote returns just the first line of $input ...

[16:11] <ayrnieu> SolidState - for "hello" { ... }

[16:12] <ayrnieu> perl5 is the same, with: perl -le 'for (chomp($foo = <>)) { print $foo }'

[16:13] <audreyt> maybe I turn on autochomping now

[16:13] <rgs> ayrnieu: surely you didn't mean that

[16:13] <audreyt> and see how many hundreds of tests break

[16:14] <ayrnieu> audreyt - you'll break http://use.perl.org/~rafael/journal/26426 , but it's probably for the best in the end :-)

[16:14] <ayrnieu> rgs - why didn't I?

[16:14] <ayrnieu> SolidState - try: while chomp($input.readline) { ... }

[16:14] <rgs> not a valid perl 5 code that does something useful.

[16:14] <audreyt> ayrnieu: no I won't, chomp is a projection

[16:14] <ayrnieu> (actually, autochomping won't break that bot)

[16:15] <audreyt> which means it's idempotent for the second application onwards

[16:15] <rgs> and well, my irc bot is not really "in production" right now.

[16:15] <ayrnieu> audreyt - *nod*, "assumes !autochomp" got crossed with "breaks on autochomp" for a moment.

[16:15] <rgs> use more 'chomping'

[16:16] <PerlJam> Is it just me or is there a lull in the perl6 universe?

[16:16] <integral> PerlJam: filled by chromatic's journal post?

[16:16] <audreyt> PerlJam: like, now?

[16:16] <rgs> lull before the tempest ?

[16:16] <PerlJam> rgs: hopefully :-)

[16:17] * ayrnieu searches for antonyms of 'lull'

[16:17] * PerlJam hasn't read use.perl today

[16:17] <integral> it's another "everyone hates perl6, but it's okay because they're not contributers" :-P

[16:18] <ayrnieu> oh, that happened recently in perlmonks

[16:18] <ayrnieu> also a post of chromatic's.

[16:18] * audreyt pops the journal-reading stack

[16:19] <audreyt> okay, so autochomping doesn't seem to break too many stuff.

[16:19] * PerlJam wants to ++ Ovid's comment to chromatics journal entry

[16:19] <audreyt> I'm committing it. brace for impact

[16:20] <TimToady> shall I smoke it?

[16:20] * ayrnieu felt guilty, reading Dan's quitting-parrot blogpost.

[16:20] <audreyt> SolidState: "Offer Kaye" is your realname?

[16:20] <PerlJam> ayrnieu: why?  You didn't have anything to do with it

[16:21] <PerlJam> (and nothing you could have done would have made any difference I think)

[16:21] <ayrnieu> PerlJam - well, I don't like thinking that I couldn't have done anything to make a difference.

[16:22] <PerlJam> ayrnieu: not all problems have solutions.  *Especially* social problems.

[16:22] <SolidState> audreyt: yes

[16:22] <audreyt> cool, welcome to AUTHORS. you have a commit bit yet?

[16:22] <SolidState> audreyt: lol :) no i don't

[16:23] <xerox> audreyt deserves an hug.

[16:23] <audreyt> oferk at oren dot co dot il?

[16:23] * PerlJam predicts a commit bit is in SolidState's immediate future

[16:23] <SolidState> audreyt: god no, where did u get that?

[16:23] <SolidState> audreyt: offer . kaye AT gmail . com

[16:24] <audreyt> okie

[16:24] <SolidState> audreyt: seriously, where did u get the oren email? I thought I expunged all references to that...

[16:24] <audreyt> google ;)

[16:25] <audreyt> SolidState: did we meet in realspace today?

[16:25] <ayrnieu> SolidState - indeed, third hit for 'Offer Kaye'.

[16:25] <svnbot6> r9209 | audreyt++ | * Pugs.Prim: $fh.readline and =$fh is now autochomping, as

[16:25] <svnbot6> r9209 | audreyt++ |   1)S29 is made canonical and 2)it says autochomping is default.

[16:25] <svnbot6> r9209 | audreyt++ |   Expect test breakage (which we'll fix.)

[16:25] <svnbot6> r9209 | audreyt++ |   Suggested by: Offer Kaye

[16:25] <svnbot6> r9209 | audreyt++ | * t/builtins/io/readline_chomped.t: unTODO passing tests.

[16:26] <audreyt> SolidState: in any case, a commit bit is on your way. welcome aboard! :)

[16:26] <audreyt> xerox: *hugs*

[16:26] <SolidState> audreyt: I'm the annoying guy with the sweater who asked you about the close problem

[16:26] <audreyt> ah right. it works in the pugs trunk

[16:26] <SolidState> audreyt: answered my next question :)

[16:27] <audreyt> TimToady: a smoke would be lovely, yes :)

[16:27] <SolidState> audreyt: Thanks for the commit bit. I think ;-)

[16:27] <audreyt> <- battery rapidly going out, unless nothingmuch can hook it up for her

[16:27] *** SamB joined
[16:28] <SolidState> audreyt: cigarettes are not healthy

[16:28] <audreyt> I've never ate one.

[16:28] <SolidState> audreyt: what's your laptop? an ibm?

[16:28] <audreyt> no, asus m2c

[16:29] <SolidState> audreyt: ahh, 2 bad

[16:29] <audreyt> only advantage is that it's cheap, which is important as it's my 3rd asus M2 laptop so far

[16:29] <audreyt> I think in only 1.5yrs

[16:29] <audreyt> they are replacable parts

[16:29] *** m joined
[16:30] <SolidState> audreyt: better close any open work before you loose it...

[16:30] <audreyt> 162 committers now, mmm.

[16:30] <audreyt> SolidState: it's already uplinked, so I'm safe now

[16:32] <ayrnieu> now that there's nothing at all clever about reading from a filehandle and chomping at the same time, we are all freed to be clever elsewhere.

[16:34] <audreyt> and all it took is to take off a (++"\n") call

[16:34] <audreyt> (because Haskell already autochomp, I was stupid enough to add the line ;))

[16:36] <SolidState> audreyt: does this make the "-l" (small-L) flag totally obsolete?

[16:36] <audreyt> I s'ppose so

[16:37] <audreyt> so we can free it to mean linking

[16:37] <audreyt> ;)

[16:37] <rgs> hmm -l is already ignored, no ?

[16:37] <ayrnieu> well, $\

[16:37] <audreyt> indeed.

[16:38] <audreyt> rgs++ # _very_ long term memory

[16:38] <rgs> no, I just tried to use it once :)

[16:38] <ayrnieu> Something indistinguishable from a very long term memory is probably good enough :-)

[16:39] <audreyt> hm

[16:39] <audreyt> $ ./pugs -Z

[16:39] <audreyt> pugs: -Z: openFile: does not exist (No such file or directory)

[16:39] <audreyt> instead of

[16:39] <audreyt> $ perl -Z

[16:39] <audreyt> Unrecognized switch: -Z  (-h will show valid options).

[16:39] <audreyt> arguably broken behaviour?

[16:39] <audreyt> (it was trying to read from the program named -Z)

[16:40] <audreyt> Perl6::Bible 0.30 released meanwhile btw.

[16:40] <svnbot6> r9210 | audreyt++ | * ./pugs -l totally means nothing now.  SolidState++ for noticing this,

[16:40] <svnbot6> r9210 | audreyt++ |   and rgs++ for pointing out that it wasn't doing anything useful.

[16:42] <integral> oh, I actually have a sort of argument parsing rewrite floating around...

[16:45] <audreyt> oh ok, I'll just put -l as -w then

[16:45] <audreyt> i.e. ignored for now

[16:45] <audreyt> do you think a warning is warranted?

[16:45] <audreyt> "you said -l, you don't need to say it now, but I'll run your program anyway"

[16:47] <audreyt> anyway, I'll just let it silently drop now.

[16:48] * rgs notices that -p and -l already chomp $_

[16:48] <audreyt> you mean -n.

[16:48] <rgs> yes.

[16:48] <svnbot6> r9211 | audreyt++ | * as ./pugs -l no longer desugars into anything, put it to

[16:48] <svnbot6> r9211 | audreyt++ |   our list in Pugs.hs as "ignored silently, may uselater" flags.

[16:48] <svnbot6> r9211 | audreyt++ |   Not sure if a warning is warranted.

[16:50] <audreyt> then they do not to do it now... I'll rerun t/pugsrun/03-dash-p.t and -n

[16:53] <SolidState> audreyt: if you know mjd, tell him about this (500 nis for his book :))

[16:55] <audreyt> SolidState: he's yrlnry on irc.perl.org :)

[16:55] <audreyt> interestingly,

[16:56] <audreyt> $_.=chomp

[16:56] <audreyt> can be written as

[16:56] <audreyt> .=chomp

[16:57] <SolidState> audreyt: Also as "chomp;"

[16:57] <svnbot6> r9212 | audreyt++ | * Pugs.Run.Args: Now that autochomping is the default,

[16:57] <svnbot6> r9212 | audreyt++ |   we don't need to do .=chomp anymore for -p and -n.

[16:58] <ayrnieu> for $foo { .=chomp; .=frobnicate('counterclockwise') }

[16:59] <ayrnieu> a bit more readable, and it doesn't have second-class citizens.

[16:59] <audreyt> mm sndclsppl?

[17:00] <audreyt> what does that mean in this ctx?

[17:00] *** _SamB_ joined
[17:13] *** justatheory joined
[17:14] <integral> try seems to be used pretty liberally in the parser :-/

[17:14] *** aufrank joined
[17:14] <aufrank> hello!

[17:15] * stevan_ agrees with "Audrey hands out commit bits like a drug dealer drumming up more business." ;)

[17:15] <stevan_> Pugs is My CracK!!!!!

[17:15] <wolverian> ayrnieu, s,for,given,

[17:16] <wolverian> imho. maybe.

[17:16] <ayrnieu> wolverian - no, that's better.

[17:16] <audreyt> ... OSDC.il just auctioned off a commit bit

[17:16] <audreyt> to pugs

[17:16] <audreyt> from nothingmuch

[17:16] <ayrnieu> hee

[17:17] <audreyt> for 200 shekels

[17:17] <audreyt> that's USD$50 or so

[17:17] <stevan_> wow,.. I will sell mine for USD$35

[17:17] * aufrank feels like he's $50 the richer for just asking ;)

[17:17] <audreyt> nono, an _invite_

[17:17] <audreyt> not a _transfer_

[17:18] <stevan_> your right,.. a transfer should be worth more,..

[17:18] <audreyt> itzik: welcome aboard, anyhow :)

[17:18] <stevan_> cause you get all my past commits :)

[17:18] * aufrank has some beachfront property in Arizon...

[17:18] <audreyt> rofl

[17:18] * stevan_ is still wondering how much one of nothingmuch's golden locks is going for?

[17:20] <audreyt> now nothingmuch is pimping himself at the auction...

[17:20] <audreyt> 18:22 < nothingmuch> if am williong to sell myself as a partner

[17:20] <ayrnieu> coding|sexual|speech|business|travel|poker

[17:20] <stevan_> partner for what? I want specifics before I bid

[17:21] <wolverian> I'm willing to sell myself to a cute girl. actually, you don't have to pay.

[17:21] <aufrank> Perl6 Overview is good, btw

[17:21] <rgs> hire greg mccarroll, he will make the public forget to ask questions.

[17:21] <ayrnieu> |crime # !

[17:21] <audreyt> aufrank: woot

[17:21] <aufrank> variable scoping is missing

[17:21] <aufrank> but your probly know that

[17:25] <audreyt> I don't; commit a note to say that ?

[17:26] <audreyt> (or fill them in, or something)

[17:29] * aufrank goes to do semi-meaningful work on perl6!

[17:30] <audreyt> aufrank++

[17:30] *** Aankh|Clone is now known as Aankhen`

[17:30] *** Aankhen` is now known as Aankhen``

[17:31] *** Aankhen`` joined
[17:31] <integral> ?eval my $a = "abc"; :$a

[17:31] <evalbot_9212> ("a" => \"abc") 

[17:31] <integral> is that what's meant to happen?

[17:31] <ayrnieu> woah.

[17:32] <SolidState> ayrnieu: any idea why "for chomp($input.readline) { ... }" doesn't work as expected?

[17:32] <integral> because I think it's unintended and that bit of parsing is specifically for: sub foo (:$bar) { }

[17:32] <ayrnieu> ?eval my $a = "abc"; %a = :$a; %a{a}

[17:32] <evalbot_9212> Error: Undeclared variable: "%a" 

[17:32] <integral> ayrnieu: (use strict is default finally)

[17:32] <ayrnieu> SolidState - it's equivalent to given chomp($input.readline) { ... } , no?

[17:32] <ayrnieu> ?eval my $a = "abc"; my %a = :$a; %a{a}

[17:32] <evalbot_9212> Error: No such sub: "&a" 

[17:33] <integral> so, that looks buggy, huh?

[17:33] <audreyt>  SolidState I think it's because chomp doesn't do list context

[17:33] <ayrnieu> ?eval my $a = "abc"; my %a = (:$a); %a{a}

[17:33] <evalbot_9212> Error: No such sub: "&a" 

[17:34] <audreyt> SolidState: as per http://search.cpan.org/dist/Perl6-Bible/lib/Perl6/Bible/S29.pod

[17:34] <integral> hmm, I don't think Pugs.Shell is clearing some state properly either, since if you do "xyz", and then sub bar{} for the next statement, you get "xyz" back again

[17:35] <SolidState> ayrnieu: no idea. if it doesn't do list context that's a break with perl5, as I understand it. audreyt, any thoughts?

[17:36] <audreyt> (well, it already broke with perl5 by being nondestructive)

[17:36] <rgs> chomp doesn't do list context in perl 5

[17:36] <audreyt> right, it just takes a list.

[17:36] <audreyt> of containers

[17:36] <audreyt> and destructively update them.

[17:36] <rgs> actually it's one of the horrible built-ins that you can't mimic with prototypes. iirc.

[17:37] <ayrnieu> aforementioned first-class citizen :-)

[17:37] <audreyt> ahhhh.

[17:37] <rgs> and thus you can't override it.

[17:37] <audreyt> though I don't see anything wrong with @x.chomp returning chomped lists

[17:37] <rgs> neither do I

[17:37] <audreyt> ?eval (1..10).chomp

[17:37] <rgs> although actually p5's chomp returns the number of chomped things

[17:38] <evalbot_9212> "1 2 3 4 5 6 7 8 9 10" 

[17:38] <audreyt> currently we interpolates the array as if it's a string

[17:38] <ayrnieu> p5's chom?p don't return very useful values, generally.

[17:38] <audreyt> and then chomp it (i.e. only cares about hte last elem

[17:38] <audreyt> )

[17:38] <audreyt> is that useful in any real sense?

[17:38] <ayrnieu> audreyt - as bizarre stringification

[17:39] <audreyt> SolidState: write a test for list chomping

[17:39] <audreyt> either add to t/builtins/strings/chomp.t or make a t/builtins/arrays/chomp.t

[17:39] <SolidState> audreyt: as soon as the auction is over and I get back home :)

[17:39] * rgs hopes perl 6 doesn't have chop

[17:39] <audreyt> the first choice is perhaps more interesting

[17:40] * SolidState thinks he agrees with rgs about chop :)

[17:40] <audreyt> TimToady: is it okay that we retire chop from Str?

[17:40] <wolverian> I always thought it was a pity that chop didn't chop the head, anyway.

[17:40] * wolverian coughs

[17:41] <audreyt> wolverian: you just need to learn hebrew for RTL

[17:41] <wolverian> hm, good point

[17:41] <TimToady> audreyt: hmm...gotta think about that...

[17:41] * rgs thinks that the subtle differences between chop and chomp occasionnally surprise the expert.

[17:42] <rgs> like, er, their return value in list context.

[17:42] <audreyt> it's wonderful for trivia

[17:42] <ayrnieu> void context for the both of them, arr.

[17:43] <integral> hmm, I can't find the code that assigns the result of a line at the shell prompt into $*_

[17:43] <audreyt> integral: what?

[17:44] <integral> audreyt: when you evaluate an expression at the Pugs.Shell prompt, it's return value ends up in $*_

[17:44] <audreyt> oh, qx//

[17:44] <integral> but I can't figure out were that happens

[17:44] <audreyt> oh.

[17:44] <integral> *where

[17:45] <audreyt> line 295 Eval.

[17:46] *** bsb joined
[17:46] <integral> thanks!

[17:47] <audreyt> wow, you can also chomp a hash. didn't know about it.

[17:47] <audreyt> integral: where are you based in realspace?

[17:48] <integral> audreyt: Cambridge, UK, or Edinburgh, UK in the hols

[17:48] <SolidState> audreyt: does it chomp both keys and values?

[17:48] <audreyt> SolidState: I was talking about p5. chomp and chop both operate on values.

[17:48] <audreyt> hm, I might as well fill in the missing poetry

[17:49] <audreyt> Pugs.DeepSeq, Pugs.Prelude, and Prereq.hs

[17:51] <SolidState> audreyt: Just finished registering on the openfoundry site:"You are now a registered user on OSSF"

[17:51] <svnbot6> r9213 | audreyt++ | * Poetry for DeepSeq:

[17:51] <svnbot6> r9213 | audreyt++ |     All that is gold does not glitter,

[17:51] <svnbot6> r9213 | audreyt++ |     Not all those who wander are lost;

[17:51] <svnbot6> r9213 | audreyt++ |     The old that is strong does not wither,

[17:51] <svnbot6> r9213 | audreyt++ |     Deep roots are not reached by the frost.

[17:52] <audreyt> SolidState: excellent, now you can use the name/pwd to commit to svn.openfoundry.org/pugs/

[17:53] * integral feels like he's got the next move in a very nearly finished game of jenga

[17:53] <aufrank> my new favorite listening online:  http://thespps.org:8000/listen.pls

[17:53] <PerlJam> I just built pugs for the first time in a long time and *man* those tests run forever

[17:54] <PerlJam> tests++

[17:56] <ayrnieu> You could have a test that fails only when too much time has passed since a file was touched by 'make tests'

[17:56] <svnbot6> r9214 | audreyt++ | * Poetry for Pugs.Prelude:

[17:56] <svnbot6> r9214 | audreyt++ |     The world was young, the mountains green,

[17:56] <svnbot6> r9214 | audreyt++ |     No stain yet on the Moon was seen,

[17:56] <svnbot6> r9214 | audreyt++ |     No words were laid on stream or stone,

[17:56] <svnbot6> r9214 | audreyt++ |     When Durin woke and walked along.

[17:56] <spinclad> ?eval my $a = "abc"; my %a = :$a; %a<a>

[17:56] <audreyt> integral: the real test is whether Hs is more refactorable than XS :)

[17:56] <evalbot_9213> \"abc" 

[17:56] <ayrnieu> spinclad - yow, I am lame.

[17:56] <audreyt> (and having done it almost completely for 2 times on Pugs, I think we'll do fine :))

[17:57] <integral> audreyt: it's easy to rewrite whole modules,  but it's the small changes to a single function in a big file that stump me

[17:57] <spinclad> ayrnieu: many eyes

[17:57] <audreyt> integral: which is why the moose wrote the hs refactorer

[17:57] <spinclad> make light work

[17:58] <audreyt> to analyze inlinks for toplevel function calls

[17:58] <audreyt> though it doesn't help with huge functions themselves.

[17:58] <ayrnieu> integral - make your modules single-function long

[17:59] <integral> ayrnieu: have you seen the size of Pugs.Parser recently? 8-)

[17:59] <ayrnieu> ?eval my $a = "a"; $a++; $a

[17:59] <integral> ah, that'll be helpful.

[17:59] <evalbot_9213> \"b" 

[17:59] <integral> one problem with lots of small funcs inside a module is that their interface/contract/spec isn't very clear

[18:01] <PerlJam> audreyt: what tolkienism will you use for the version of pugs that bootstraps us into "the real" perl6 compiler?   I think the final lines of the verse for DeepSeq would be most appropriate. :)

[18:01] <ayrnieu> ?eval my $a = "abc"; my $<$_ = (:$a)[0]; $_++; $_> = $a; $b

[18:01] <evalbot_9214> Error: Undeclared variable: "$b" 

[18:01] <spinclad> audreyt: s/walked along/walked alone/

[18:02] *** mauke joined
[18:02] <audreyt> PerlJam: it's going to be "a ship then new they built for him", in elvish

[18:02] <obra> seen coke

[18:02] <jabbot> obra: coke was seen 181 days 2 hours 51 minutes 42 seconds ago

[18:02] <audreyt> I think

[18:02] <obra> seen particle

[18:02] <jabbot> obra: I havn't seen particle, obra

[18:02] <PerlJam> audreyt: that sounds good too.

[18:04] <PerlJam> I'm probably hung up on all the negativity people have towards perl6, so "renewed shall be the blade that was broken" seems to fit (even if it's only "broken" in the sense the many people believe it to be)

[18:04] <svnbot6> r9215 | audreyt++ | * Pugs.Prelude: s/walked along/walked alone/, spinclad++

[18:04] <audreyt> PerlJam: I thought you meant p5 was broken :D

[18:05] <audreyt> (and I don't think it is, really)

[18:05] <PerlJam> audreyt: hey, that too.  :)

[18:05] <SolidState> lol

[18:05] <audreyt> and it's already used in Pugs.Rule

[18:05] <PerlJam> yeah, I know.

[18:06] <PerlJam> (who said there were rules?  ;-)

[18:06] <SolidState> audreyt: In a little while it will be Pugs Rulez :)

[18:06] <ayrnieu> ?eval join(<:>): 1,2,3

[18:07] <evalbot_9214> Error:  unexpected ":" expecting word character, block construct, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[18:07] * PerlJam springs a light from the shadow and shines it on everyone.

[18:07] <PerlJam> just making sure you're all awake  ;)

[18:07] <audreyt> I'll find a poem for Prereqs.hs later

[18:07] <audreyt> going to go 1)eat 2)sleep now

[18:08] <audreyt> bbl :) /me waves

[18:08] <PerlJam> be well audreyt 

[18:08] * rgs waves too

[18:08] * rgs wonders what time it is in .il

[18:08] <anatoly> 8:08pm

[18:08] <SolidState> 20:10

[18:09] <rgs> my $localtime + 1 then :)

[18:09] <SolidState> but the auction is still going strong :)

[18:09] <anatoly> what's being auctioned and why? I missed the whole conference thing.

[18:10] * TimToady should eat too.  ciao.

[18:10] <rgs> anatoly: anything, and for money.

[18:10] <SolidState> anatoly: mostly books

[18:10] <rgs> and for fun, too, of course.

[18:10] <ayrnieu> ?eval $::*<b> = 1; $b

[18:10] <evalbot_9214> Error:  unexpected "<" expecting word character 

[18:11] * ayrnieu gives up for now.

[18:11] <PerlJam> TimToady: you be well too.  There's this truck number I keep worrying about :0)

[18:11] <SolidState> battery running low, so bye for now

[18:11] <PerlJam> er, :-)

[18:11] *** SamB joined
[18:13] <ayrnieu> http://search.cpan.org/~autrijus/Perl6-Bible/lib/Perl6/Bible/S28.pod # $0 and $0 are contradictory, aren't they?

[18:14] *** sandrina joined
[18:16] <ayrnieu> ?eval $::(b) = 1; $b

[18:16] <evalbot_9215> Error: No such sub: "&b" 

[18:17] <ayrnieu> ?eval $::('b') = 1; $b

[18:17] <evalbot_9215> Error: Undeclared variable: "$b" 

[18:18] <PerlJam> ayrnieu: it would appear so.

[18:18] <PerlJam> the second $0 should probably be $/

[18:18] <PerlJam> or perhaps it's a scoping issue.

[18:20] <PerlJam> no, $/ is string context is the "string matched by the last successful match"

[18:20] <PerlJam> s/is/in/

[18:22] *** blm_ joined
[18:23] <ayrnieu> ?eval $test = rx/(.)(.)/; "hello" =~ /$test/; $0

[18:24] <evalbot_9215> Error: Undeclared variable: "$test" 

[18:24] <ayrnieu> ?eval my $test = rx/(.)(.)/; "hello" =~ /$test/; $0

[18:24] <evalbot_9215> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[18:25] <ayrnieu> ?eval "hello" =~ /(.) (.)/; $0

[18:25] <evalbot_9215> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[18:28] <svnbot6> r9216 | iblech++ | Usual svn props.

[18:28] <svnbot6> r9217 | iblech++ | Fixed most (all?) tests, examples and files in ext/ WRT r9209 ($fh.readline and

[18:28] <svnbot6> r9217 | iblech++ | =$fh is now autochomping).

[18:29] <PerlJam> Isn't autochomping only appropriate if the :autochomp (or whatever it's called) property is set?

[18:30] <PerlJam> (or if you're reading via =<>)

[18:30] <PerlJam> i.e., for =<> { ... } autochomps, while for =$fh { ... } does not.

[18:31] <ayrnieu> S29 makes it default

[18:31] <PerlJam> oh, I have haven't yet read the changes to S29

[18:32] <ayrnieu> "Note: Most users should just let their I/O handles autochomp instead. (Autochomping is the default.)"

[18:35] *** marmic joined
[18:37] * PerlJam boggles at "constant Int Int::pi = 3;"

[18:40] <ayrnieu> ?eval constant Str Str::asciibet = "abcdefghijklmnopqrstuvwxyz"; asciibet.say

[18:40] <evalbot_9217> Error:  unexpected "S" expecting term postfix, operator, ":", ",", postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[18:41] <ayrnieu> ?evas sub Str::asciibet { "abcdefghijklmnopqrstuvwxyz" }  asciibet.say

[18:42] <ayrnieu> ?eval sub Str::asciibet { "abcdefghijklmnopqrstuvwxyz" }  asciibet.say

[18:42] <evalbot_9217> OUTPUT[asciibet ] bool::true 

[18:43] *** lypanov left
[18:43] <ayrnieu> ?eval sub Str::asciibet { "abcdefghijklmnopqrstuvwxyz" }  Str::asciibet().say

[18:43] <evalbot_9217> OUTPUT[abcdefghijklmnopqrstuvwxyz ] bool::true 

[18:46] <PerlJam> P5chop and P5chomp are weird.  Why do we have these?

[18:47] <PerlJam> and why aren't they named Perl5::chop and Perl5::chomp?

[18:48] *** lypanov joined
[18:51] <chris2> wb lypanov 

[18:51] <lypanov> thx chris2

[18:58] *** Arathorn is now known as Aragone

[18:59] * aufrank waits...

[19:08] <svnbot6> r9218 | aufrank++ | Filled out previously empty 'Variable scoping' section.

[19:08] <svnbot6> r9218 | aufrank++ | At best incomplete; most likely needs to be corrected.

[19:08] <aufrank> w00t!

[19:26] *** typonaise joined
[19:27] <xerox> Do you know of a wiki who does LaTeX syntax?

[19:28] <aufrank> the math articles on wikipedia have nice markup, but I don't know how they do it

[19:28] <integral> just for maths?   mediawiki has a plugin, I'd guess that oddmuse did

[19:28] <integral> wikipedia use TeX

[19:28] <integral> usemod should do too

[19:29] <wolverian> mediawiki. some perl wikis have a plugin for it too

[19:29] <xerox> Hmm, no, more generally

[19:29] <wolverian> (but anyway, I wonder how mathml is doing nowadays)

[19:29] <integral> bloody awfully :-(   even mozilla seems to not like doing it out of the box.   Amaya appears to be just about it

[19:29] <avarab> xerox: there's an extension for MW but you'll have to hack it to get it to work

[19:29] <avarab> probably

[19:29] <avarab> it's simple to make it work though

[19:29] <integral> (and mathematica, and stuff)

[19:29] *** mj41__ joined
[19:29] <avarab> i.e. to make an extension that does that

[19:30] <wolverian> integral, sigh :/

[19:30] <xerox> Danke.

[19:30] <avarab> just a matter of hooking into the parser, taking latex input and producing pdf,ps,dvips on demand

[19:30] <wolverian> hm, epiphany does render it here out of the box

[19:30] <wolverian> (ubuntu 5.10)

[19:30] <xerox> I want html out!

[19:30] <integral> latex2html

[19:31] <integral> wolverian: ooh!

[19:31] <avarab> latex2html probably isn't in ubuntu by default

[19:31] <avarab> (non-free)

[19:31] <wolverian> missing some fonts, though

[19:31] <wolverian> don't know if they're installable from the packages.

[19:31] <integral> oh, that's what I mean

[19:32] *** putter joined
[19:32] <wolverian> oh, take that back. it seems to be some weirdness in interpreting the mathml, rather. particularly the set "in" test

[19:33] <wolverian> I guess it's not that ready, yet :)

[19:33] <avarab> wolverian: mediawiki mathml?

[19:33] <wolverian> avarab, epiphany mathml rendering

[19:33] <avarab> ah

[19:34] * avarab lost

[19:34] <wolverian> I'll try with the latest dapper version when I'm home

[19:34] *** Nouk joined
[19:37] *** dduncan joined
[19:39] * putter wonders if he should mention to audreyt and nothingmuch that he is reblessing transparent-api Match objects into asts... na. ;)

[19:40] <putter> integral: I like your warnocked "there's not something simple like: $obj.Perl6::IdRole::id; ?"

[19:41] <integral> *shrug* ever time I mention that you should be able to talk about methods provided by a specific role of a class, I get ignored.

[19:41] <integral> I guess it's just too bloody simple.

[19:42] <integral> I tried posting to p6l once too (about sometime else), also warnocked.

[19:42] <putter> :(

[19:42] <integral> my post which wasn't warnocked, was replied to, but the questions/points weren't answered/addressed.

[19:44] <putter> one thing it seems p6 still doesnt have a good story for is how to deal with the usual "people design really bad method api's, and then you are stuck with them".

[19:46] <PerlJam> putter: Isn't the answer "grow a good API"?

[19:47] <putter> you can locally abandon .foo and use multi foo($o).  perhaps selectively macro from .foo to foo().  but class identity and set-of-methods still seem rather tightly bound.

[19:48] <putter> PerlJam: explain?

[19:48] * integral predicts warnocking of this on p6l since it's about something the other people haven't though of, and don't understand without thinking about it

[19:50] <PerlJam> I'm sure there's some name for it in the style of the GoF book, but if the method API sucks, you can always slowly create a new one in the same class or create a new class that has the "good" API and proxies for the old class

[19:50] <putter> ah yes, but say...

[19:50] <PerlJam> Given perl6's ability to alias anything, getting the names right shouldn't be a big problem.

[19:52] <putter> beginning p6 programmer creates first of breed class Zog with unfortunate implementation and method names.  lots of code starts using Zogs and it's methods.  Zogs show up in lots of folks' sub signatures.

[19:53] <ayrnieu> *bam*!  Perl6 is ruined forever.

[19:53] <ayrnieu> Its culture Zogified, as with the Pickaxe and Ruby.

[19:54] <integral> you have to make something that does Zog, but isn'ta Zog...

[19:54] <putter> Someone does Zog2, Zim. (hmm, I should have called "Zog" "Doh";)  how does the world gracefully and rapidly migrate to Zim?  Say ideally requiring a one-line change per application.

[19:55] <integral> surely the key part isn't upgrading signatures,  but upgrading where .new is called?

[19:55] <integral> I mean, if this were haskell, you just make Zim an instance of Zog's typeclass

[19:56] <putter> if we can  class A{};  class B does A{};  sub f(A &x){}  f(B.new);, then yes, signatures arent an issue.

[19:56] <integral> we must be able to do that surely?

[19:56] <putter> I don't know what the current state on classes being roles is.

[19:56] *** bd_ joined
[19:57] <putter> hmm, .new ...

[19:58] <putter> actually, i guess the "one line per application" isnt the interesting case.  that would be something like "require Zog; (# so it doesnt get loaded later #)  Zog := Zim;"

[19:59] <integral> "require Zog;"?  I wonder how %INC is handled now, could be it just looks for a Zog module, in which case Zog := Zim is sufficient

[19:59] <integral> but then, there's also the module versioning stuff that could be used for this aliases

[20:01] <putter> hmm, there's another story - someone creates a  Zog-n.nn-betterprogrammer module fork.

[20:01] <PerlJam> putter: you know, Larry's work with the p5<->p5 translator could come in handy with this problem.  It might even be easyish given we start and end with perl6

[20:01] *** avar joined
[20:02] *** binary42 joined
[20:02] <integral> PerlJam: you mean a tool that helps a mass module name change in an app?

[20:02] * putter expects to write  use Foo-(undef)-quz;  a great deal.   Ie, I don't care about the version, but I want Joe's.

[20:02] <integral> for some webapps, I have found it semi-useful to be able to hook in customisations just from the cgi script frontend, without modifying the main source

[20:02] <PerlJam> Someone builds a mapping from Zog->Zim and the one line change becomes "use ZogZimTransmogrifier;"

[20:03] <putter> re .new...   my method BUILD(... no that doesnt work...  my method new() {...}; ...?

[20:04] <putter> err, s/new()/new($cls where $cls ~~ Zog)/ ?

[20:04] <putter> my method new(Class $cls where $cls ~~ Zog){...}; ?

[20:05] <PerlJam> putter: Re: use Foo-(undef)-quz;  the other question is, how do we as a community decide whose Foo you get by default if you just type "install Foo"?  (or do you even get a default at all)

[20:06] *** lisppaste3 joined
[20:06] <putter> ooo.  hmm.  can we create loadable "namespace map" modules so the choice is somewhat less critical?

[20:08] <putter> on a p6 level, if you load Foo-(undef)-quz and Foo-(undef)-hee, which one do you get when you say Foo?

[20:09] <putter> oh, before I forget again...

[20:10] <PerlJam> putter: And where's the policy information stored? And how do we change it?

[20:13] <putter> nothingmuch, audreyt, etal: what is the intended behavior of incomplete Match objects?  eg, in p5, /(a\1)/ has the match object appear to stringify as "a" when you are at pos 1, and "aa" later.  is this p6 spec too?  eg /(a{ $/[0] eq "a" })/   hmm, what happens if I return out of an unfinished capture? ;)

[20:18] <putter> looking at http://dev.perl.org/perl6/doc/design/syn/S11.html /Versioning,

[20:20] <putter> can one do simultaneously constrain both version and authority?  ie, 1.whatever-joe, or >2.0-bob?

[20:26] <putter> ok, "its full name is automatically aliased to the short name for the rest of your lexical scope."   So I guess  use Dog-0.1; use Dog-0.2;  my Dog $spot;   makes spot a 0.2.

[20:27] *** sandrina is now known as sandrina_l

[20:29] <putter> hmm.  does that mean   {use Dog;} die "bug?" if exists ::Dog;  

[20:29] *** SamB joined
[20:30] <putter> Is the whole use()d shortname module hierarchy (eg Foo::Bar::Hee)  merely a hallucination of the current lexical scope?

[20:31] *** nnunley joined
[20:36] *** Maddingue joined
[20:37] <putter> If so, does that mean if $o.ref eq 'Dog', you may have a dioxygenase and not a canine?

[20:38] <putter> (ok, that should just be said  $o.ref ~~ ::Dog and it works.)

[20:39] *** SolidState joined
[20:39] * putter is puzzled.  intrigued, but puzzled.

[20:41] <putter> ayrnieu: :) # re bam

[20:46] <putter> {package A{our $x=3}} {module B-2.3{our $x=4}} {module B-3.1{our $x=5}}  I expect $A::x == 3;.  What about $B::x?

[20:47] <putter> is it even defined?

[20:56] <putter> re .id, can someone make a case for its deserving such prime huffman encoding?  for its use in perl6 being much more common than in ruby?  as mentioned, ruby started with .id(), and it was a silly idea even back then.  so bad, they are paying the change-cost to switch to .object_id().  please let .id() just be a placeholder till we think of something nicer. ;)

[20:57] <PerlJam> putter: can you make a case *against* the huffmanization of .id?

[20:58] <PerlJam> (i.e. what are the specific reasons that ruby is paying the change cost?)

[20:58] <integral> I could make a case that any object is only ever going to have one primary key that you're going to want to use for hashes, ORMs, etc

[20:58] <integral> and that if you want different ids for different things, you just throw an adaptor object around it

[20:58] <putter> PerlJam: google "id" returns 3,780,000,000 hits.

[20:58] <putter> ;)

[21:00] <putter> ie, "id" has domain specific meaning in a lot of domains, and thus is too valuable to users to be taken by the language.

[21:00] <PerlJam> integral: Hmm.  .id, .hash, .repr, ... we already have many.

[21:00] <integral> *sigh* 

[21:01] <integral> I still like the way haskell does methods,  where you have to actually import the typeclass before you see them.  But people seem to swoon over ducktyping and think it's so brilliant

[21:01] <PerlJam> putter: That's an odd way to put it.  I'd say that .id is too generic and not specific to any single domain what-so-ever.

[21:01] <PerlJam> (and as such, too valuable to users to be taken by the language)

[21:03] <putter> user works-in domain, has-concept-of "id".  for large number of users/domains. ;)

[21:04] <integral> the same applies to the "bark" method.   Dog lovers want to hear their favourite canine, but tree huggers want their favourite silver birch

[21:06] <putter> hmm, how many "bark" methods have you seen outside of oo docs?  how many id methods?  (for me, "I can't think of a one", and "lots")

[21:07] <integral> hmm, no id's from my ORM use, since I tend to go with person_id as a field of the person tuple

[21:07] <integral> I have lots of as_strings

[21:07] *** amnesiac joined
[21:09] <putter> cpan "bark", 10 hits, all p6 related. "id", 3613 hits.

[21:11] <putter> integral: right.  hmm, "uid" 398 hits.  "unique_id" 20, "unique id" 223, "person id" 10.

[21:12] <putter> "person_id" 7

[21:13] <putter> including Rosetta :)

[21:21] <putter> module A-1{module B-2{module C-8{}}module B-3{module C-9{}}}}   {use A-(1|5)::B-(1..2)::C-(/8/); A::B::C->new("neat:)")}

[21:29] <putter> BEGIN{@usable = ( ({$^v>1.3},'ernie'), (undef,'bert'), ({$^v>0.4},'snuf') ); }  use Foo-(@usable);  # non-spec

[21:30] <putter> integral: ORM?

[21:31] <integral> object-relational mapping

[21:31] <putter> ah

[21:31] <integral> like Class::DBI, Alzabo, etc

[21:31] <integral> but not really including phrasebooks, and I suspect Rosetta

[21:31] * putter googles/cpans for Alzabo...

[21:32] <putter> lol. Alzabo's SYNOPSIS: Cannot be summarized here.

[21:36] <putter> ah, interesting

[21:39] <integral> hmm, DBIx::Class seems to be moving away from Class::DBI and more towards alzabo

[21:40] *** r0nny_ joined
[21:41] <SolidState> Has anyone here managed to build Pugs on Windows XP?

[21:43] <szbalint> I would think so. I'm the wrong person to ask about it though.

[21:43] *** pulsar joined
[21:43] <putter> DBIx::Class uses Class::C3 (and ->reinitialize() ;)

[21:46] <putter> SolidState: win32, http://www.jwcs.net/~jonathan/perl6/ ?

[21:47] <integral> that's Jonathan's website, and Jonathan can be found on irc.perl.org #parrot

[21:48] *** binary42 left
[21:48] <stevan_> putter: DBIx::Class uses Class::C3 in a pretty sane way though

[21:48] <SolidState> integral: thanks, I'll try to find him

[21:49] <putter> SolidState: there is also a note in the README that embedding perl5 should be avoided.

[21:50] <putter> stevan_: hi stevan.  so, there are sane and not-sane ways to use C3? :)

[21:50] <stevan_> putter: hey :) of course there is,.. all my modules have a "use sane" pragma :P

[21:50] <putter> lol

[21:50] <stevan_> use sanity; { no sanity; }

[21:51] <stevan_> lexical pragmas

[21:51] <SolidState> putter: thanks, I read that and am following that instruction

[21:51] <stevan_> putter: using Class::C3 with lots of reinit calls is not sane

[21:51] <putter> like strict?  perl6 -e '...defaults to no sanity?...'?

[21:51] <stevan_> but as of 0.11 Class::C3 must be manually initialized

[21:52] <stevan_> package Pugs; ^sanity ::= ^insanity; 

[21:52] <stevan_> package Pugs; ^sanity ::= (^insanity | ^sanity).pick;

[21:53] <putter> just how costly is the reinit stuff?  any why?  being somewhat unmotivated to doing a correct-but-slow p6 on p5, I was pondering C3-like "mash all the symbol tables so the right thing happens" games.

[21:53] <putter> lol # .pick

[21:53] <stevan_> putter: reinit removes all the methods, then adds them back again

[21:54] <putter> right

[21:54] <stevan_> if you are only affecting one package,.. not a big deal, but if its a lot of package, then it might be

[21:54] <putter> might be?  known to be?   profiled? :)

[21:55] <stevan_> a) might be

[21:55] <putter> lol

[21:55] <SolidState> Jonathan not answering on #parrot on irc.perl.org, so I guess he's offline. I have to go now also, so bye for now :)

[21:56] <putter> SolidState: sorry, good luck.  and,

[21:56] <putter> several developers use windows, so answers likely exist, this is just the quiet time of day on #perl6.

[21:57] <SolidState> putter: np, getting late here too - will pick this up tomorrow...

[21:57] <putter> right. good night.

[22:00] <putter> stevan_: do an XS dispatch table so multi's are as fast as subs? :)

[22:01] <stevan_> putter: you mean CLOS like multis? where they are all global?

[22:01] <stevan_> oh wait ... I see what you mean

[22:02] <putter> actually, that doesnt quite work.  still need to pay .ref costs.  really want type inference info passed with calls.  and that can be pure p6.

[22:02] <putter> s/p6/p5/

[22:02] <stevan_> putter: have you see Devel::TypeCheck (or whatever it is called)?

[22:02] <svnbot6> r9219 | SolidState++ | Added tests for chomp on arrays. Should not break anything as all tests marked as todo (feature).

[22:03] <putter> don't think so, looking...

[22:06] <stevan_> I am not sure it is useful for our (evil) purposes

[22:11] <putter> neat.  Fail(3). :(  if it did objects, I'd be tempted to play, but it looks like that's todo.

[22:11] <stevan_> yeah

[22:11] <putter> one advantage we have is we control the classes being used (not random p5 pkgs), so they can cooperate to assist dispatch.

[22:12] <stevan_> true dat

[22:12] <putter> eg, maybe class uid numbers and a goo-like compressed-sparse-multimethod-dispatch-tab le

[22:13] * putter looks for goo reference... have to go soon...

[22:14] *** justatheory joined
[22:14] <stevan_> Class::MultiMethods and C::MM::Pure might be a good ref

[22:15] *** typonaise joined
[22:15] <putter> http://people.csail.mit.edu/jrb/goo/goo-at-harvard.pdf

[22:16] *** Limbic_Region joined
[22:19] <stevan_> :D

[22:19] <stevan_> http://people.csail.mit.edu/jrb/goo/

[22:19] <chris2> goo

[22:20] <chris2> ooh. a wonderful thing

[22:22] <putter> http://people.csail.mit.edu/jrb/goo/ 's http://people.csail.mit.edu/jrb/goo/goo-imp.pdf and http://people.csail.mit.edu/jrb/goo/goo-boot.pdf are quick skims.  but goo is dead (jrb has too many other interesting things to do).  and it's not clear the fast subtype/dispatch stuff was ever actually implemented?

[22:23] <putter> chris2: :)

[22:23] <chris2> too bad it fell asleep

[22:23] <xerox> Waffle waffle waffle.

[22:25] * putter thinks part of the problem was the goo documentation was really crufty, which didnt help the language catch on.

[22:26] *** ghenry joined
[22:26] * stevan_ cant even find a simple hello-world in goo

[22:27] <avar> what's goo?

[22:28] <chris2> putter: yeah

[22:28] <chris2> putter: and that the first releases didnt ship the (meta)compiler

[22:29] <xerox> Some creditable sources thinks that he recalls hearing jrb was working at a new startup or something.

[22:29] <chris2> really?

[22:29] <chris2> i heard jrb in november say he wanted to revive goo

[22:29] <chris2> well, "heard". read.

[22:32] *** blm_ is now known as blm

[22:33] <putter> neat.  gotta go.  is anyone playing with the new pugs p6 parse tree output?  -CYaml-Parse is it?  to do syntax coloring / ide-ish stuff?  or sucking the yaml into p5 and playing with simple transliteration to get a new runtime going?

[22:35] *** xinming1983 joined
[22:35] <putter> or fleshing out the Prelude.pm, now that its speed is no longer a bottleneck?  I believe the plan is to move as much of Prim.hs to Prelude.pm as possible (audreyt: yes?).

[22:36] * putter wishes audreyt backed up her work, so there was a blog entry on all the new hackathon toys.  but toys there are, so its playtime, no?

[22:36] <putter> chao &

[22:41] *** cjeris joined
[22:42] *** stennie left
[22:42] *** szabgab joined
[22:47] *** xinming1983 joined
[22:49] *** vborja joined
[23:02] <Limbic_Region> the other day I pointed out that on Win32, an nmake realclean; svk pull; perl Makefile.PL; nmake results in...

[23:03] <Limbic_Region> pugs spitting out user error (Error loading precompiled Prelude: Left "syntax error: line 2, column 2")

[23:03] <Limbic_Region> Reloading Prelude from source...

[23:03] <Limbic_Region> and then the program working

[23:03] <Limbic_Region> it is still happening as of the most recent revision

[23:24] *** elmex joined
[23:28] <Limbic_Region> if anyone gets around to that and needs me to do some debugging - probably best to /msg me at the Monastery

[23:28] <Limbic_Region> I am out

[23:28] *** Limbic_Region left
[23:38] *** cdpruden joined
[23:38] *** cjeris left
[23:54] *** macli joined
[23:56] *** larsen joined
