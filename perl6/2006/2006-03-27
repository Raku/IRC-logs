[00:37] *** gaal joined
[00:58] *** mako132_ joined
[01:07] *** wolverian joined
[01:07] *** webmind joined
[01:07] *** chip joined
[01:07] *** Grrrr joined
[01:11] *** feng joined
[01:15] *** root joined
[02:42] *** mako132_ joined
[02:53] <svnbot6> r9744 | lwall++ | Various items for further discussion at the hackathon.

[03:19] *** mako132_ joined
[03:20] *** xern joined
[03:29] *** Quell joined
[03:42] *** lisppaste3 joined
[03:49] *** nirgle joined
[04:14] *** mako132_ joined
[04:24] *** justatheory joined
[04:26] *** justatheory joined
[04:38] *** f0rth joined
[04:43] *** trym joined
[05:06] *** amnesiac joined
[05:13] <ayrnieu> assertion "s1->encoding && s1->charset && !PObj_on_free_list_TEST(s1)" failed: f

[05:14] <ayrnieu> ile "src/string.c", line 1341

[05:14] <ayrnieu> Abort trap (core dumped)

[05:14] <ayrnieu> wee

[05:14] <ayrnieu> (this is pugs)

[05:15] <arcady> but it sounds like parrot...

[05:15] <arcady> what with all the PObjs and core dumps

[05:15] <ayrnieu> Perhaps: I have an embedded parrot.

[05:15] <ayrnieu> I have a pugs.core , however.

[05:17] <arcady> that's definitely a parrot error

[05:18] <arcady> maybe embedding is broken

[05:21] <arcady> not that I am a parrot expert, but that error message looks like a result of null pointers and/or access to already-freed objects

[05:38] *** GeJ joined
[05:45] *** justatheory joined
[05:53] *** justatheory joined
[06:12] *** feng joined
[06:13] * ayrnieu shudders.  regexen are so brain-eatingly slow right now.

[06:17] *** amnesiac_ joined
[06:23] *** nothingmuch joined
[06:25] *** Aankhen`` joined
[06:55] *** xinming joined
[07:08] *** penk joined
[07:18] *** elmex joined
[07:23] *** nothingmuch joined
[07:27] *** damnhil joined
[07:27] *** damnhil left
[07:43] *** f0rth joined
[07:52] *** |Jack| joined
[08:06] *** marmic joined
[08:23] *** drrho joined
[08:57] <KingDiamond> so what's the current state of the exception handling implementation? any example of a try... catch?

[09:06] <KingDiamond> I'm trying to determine the type of an object actually... is there a way I can do that currently?

[09:08] <ayrnieu> any way at all?  Look at its .perl

[09:09] <ayrnieu> in perl6, you'll have standard ways to see if an object has a field or a method, however.

[09:10] <ayrnieu> and look in t/builtins/control_flow/try.t for exception handling

[09:11] <KingDiamond> ah, thanks!

[09:13] *** Guest27883 joined
[09:14] <gaal> KingDiamond: $obj.ref

[09:15] <gaal> though yeah, .does will be correct in more cases

[09:17] <KingDiamond> gaal: w00t! this is what I needed. thanks.

[09:25] <KingDiamond> gaal: so is there a way to list available object methods?

[09:25] <ayrnieu> something in .meta , I expect.

[09:27] <KingDiamond> ayrnieu: .meta doesn't work

[09:28] *** luqui joined
[09:28] *** luqui left
[09:28] <ayrnieu> yes, I know.

[09:35] <gaal> my @meths; push @meths, $_ for grep { $class.can($_) } 'a' .. 'zzzzzzzzzzzzz'

[09:37] <KingDiamond> gaal: heh :-)

[09:37] * spo0nman cant seem to get pugs to work. 

[09:37] <gaal> the zzz is an allusion to the speed in which this doesn't work

[09:38] <spo0nman> pugs does not love me.

[09:38] <gaal> spo0nman: what doesn't work?

[09:38] <spo0nman> gaal: ah! i cant seem to compile it.

[09:38] <KingDiamond> spo0nman: you said there were problems with your kdelibs or something conflicting with parrot, right?

[09:38] * spo0nman warns that he is on Freebsd 4.10

[09:39] <spo0nman> KingDiamond: that was linux.

[09:39] <spo0nman> Im sure if i tried it with yet another OS it'll still not work.

[09:40] <spo0nman> KingDiamond: Parrot compiles and runs in the /tmp/parrot dir but when i make install it cannot find parrotlibs.

[09:40] * spo0nman pulls his hair. 

[09:40] *** kanru joined
[09:41] <gaal> brb, sorry - spo0nman please paste error messages

[09:42] <spo0nman> gaal: with FBSD, I got as fas as getting  parrot ghc darcs and hs-plugins working ... pugs fails.

[09:46] <spo0nman> gaal: http://paste.lisp.org/display/18335

[09:49] <nothingmuch> spo0nman: you should consider working on feather.... it's been a long time

[09:49] <nothingmuch> it's much more fun to work on pugs than to try and build it unsuccessfully =(

[09:49] <spo0nman> nothingmuch: :)

[09:49] <nothingmuch> just FYI: gmp is the gnu big num math library

[09:50] <nothingmuch> that I'm guessing haskell is using for the Integer data type

[09:50] <spo0nman> nothingmuch: haskell works ... so i dont know if im missing it.

[09:50] <nothingmuch> i'm not sure what ghcz is though

[09:50] <spo0nman> nothingmuch: feather? /me does a web search.

[09:50] <nothingmuch> yeah, it's odd

[09:50] <nothingmuch> spo0nman: feather.perl6.nl

[09:50] <nothingmuch> it's Juerd's donation

[09:50] <nothingmuch> you can use it to do perl 6 related things

[09:51] <nothingmuch> (development, IRC, web hosting, email)

[09:51] <nothingmuch> you need to mail Juerd and ask for an account

[09:52] <spo0nman> sweet.

[09:52] <spo0nman> just tell me where to send the cookies. :)

[09:52] <nothingmuch> well

[09:52] <nothingmuch> you can send me cookies

[09:52] <nothingmuch> i'll never say no =)

[09:53] *** fglock joined
[09:53] <nothingmuch> spo0nman: see, fglock is using feather to connect =)

[09:53] <spo0nman> :)

[09:55] <fglock> nothingmuch: hi!

[09:55] <nothingmuch> hola fglock

[10:05] <fglock> pmichaud: re your comments in parrotsketch: you can enter the precedence table by using prototypes: 'sub infix:<-> is assoc:<left> is equiv:{infix:<+>}' - I'm not sure about the syntax, as there is no 'prototype' in S06

[10:06] <fglock> nothingmuch: I'm looking for what to do next - maybe work a bit in a TGE/p5

[10:07] <nothingmuch> fglock: i'm too out of touch to advise right now

[10:09] *** Guest27883 is now known as Aankhen``

[10:09] *** Aankhen`` joined
[10:10] <fglock> later &

[10:10] *** fglock left
[10:23] *** Guest27883 joined
[10:46] *** iblechbot joined
[11:23] *** root joined
[11:31] *** root is now known as colares

[11:33] *** colares is now known as asdfjasdf

[11:33] *** asdfjasdf is now known as colares

[11:38] <gaal> camel: http://giant-moose.livejournal.com/119622.html

[11:39] *** colares joined
[12:00] <KingDiamond> in a connect() object, I want to pass a body and header to the say() method; how to? :-/

[12:01] *** nirgle left
[12:01] <gaal> $o = connect(..); $o.say("asdf")

[12:01] <gaal> or say $o: "asdf"

[12:01] <gaal> see examples/network

[12:10] *** chris2 joined
[12:13] *** stennie joined
[12:35] *** nnunley joined
[12:43] *** fglock joined
[13:01] *** iblechbot joined
[13:24] *** Limbic_Region joined
[13:25] *** pdcawley_ joined
[13:30] <svnbot6> r9745 | fglock++ | Pugs-Compiler-Rule/TODO update

[13:44] *** wilx joined
[13:44] *** nothingmuch joined
[13:45] *** elmex joined
[13:51] *** sahadev joined
[13:53] *** miyagawa joined
[13:54] *** wilx joined
[13:57] *** bsb joined
[14:10] *** pdcawley_ joined
[14:24] <audreyt> fglock: there?

[14:25] *** Qiang joined
[14:29] <fglock> audreyt: hi

[14:29] <svnbot6> r9746 | fglock++ | Pugs-Compiler-Rule/RuleInline.pl - a *fast* rule runtime

[14:30] *** rep is now known as xX_rep_Xx

[14:41] <audreyt> fglock: is PCR-Dev.tgz still relevant?

[14:42] *** diotalevi joined
[14:42] <fglock> audreyt: no - it had some new ideas, but it is obsolete now

[14:42] *** nothingmuch joined
[14:42] <audreyt> k, maybe rm it then

[14:43] <fglock> audreyt: it can compile the grammar using itself, but this is not important now

[14:43] <audreyt> the new PCR looks nice!

[14:43] <svnbot6> r9747 | audreyt++ | * re::override - build fix on Win32 and threaded perls;

[14:43] <svnbot6> r9747 | audreyt++ |   factor out NOTES from override.xs, and various cleanups.

[14:44] <audreyt> is RuleInline for PCR 0.02, or would you like to push out a release using existing pX codebase first?

[14:44] <audreyt> I'd like to do a re::override::PCR

[14:44] <fglock> audreyt: thanks

[14:44] <fglock> audreyt: inline is just an idea I had 10min ago :)

[14:44] <svnbot6> r9748 | fglock++ | rm PCR-dev.tar.gz

[14:44] <audreyt> also, have you seen pmichaud's language/perl6/ optable (and very minimal grammar) for p6?

[14:45] <fglock> audreyt: I've read about it - do you have a link?

[14:45] * gaal meows

[14:45] *** justatheory joined
[14:46] <audreyt> fglock: yes, http://svn.perl.org/parrot/trunk/languages/perl6/lib/grammar.g

[14:46] <audreyt> I'm a little bit underwhelmed by its current scope... but seems like a clean start at least

[14:47] <audreyt> also, http://svn.perl.org/parrot/trunk/languages/perl6/lib/parse.pir is the initial optable population

[14:47] <audreyt> gaal: hey!

[14:47] <fglock> oh, it doesn't use a statement table yet

[14:48] <gaal> hey hey ms jetlag :)

[14:48] <fglock> audreyt: how about using sub prototypes to declare fixness/precedence/etc

[14:48] <audreyt> gaal: *sigh*

[14:48] <audreyt> fglock: that's the right way to do it...

[14:50] <fglock> do you think opp.pl can be of any use?

[14:50] <fglock> I'm looking for what to do next :)

[14:51] <nothingmuch> møøøøse

[14:52] <fglock> audreyt: S06 doesn't mention sub prototypes

[14:53] <audreyt> huh?

[14:53] <wolverian> I used Moose yesterday, it was nice.. :)

[14:53] <audreyt> grep for "tighter" and "is assoc"

[14:54] <fglock> audreyt: I mean, defining a sub without a block

[14:54] <fglock> but maybe I overlooked it

[14:54] <audreyt> "proto" is it

[14:55] <audreyt> proto infix:<+> ($a, $b) { ... }

[14:56] <fglock> audreyt: ok. S06 has 'sub foo {...}' - proto isn't there (http://dev.perl.org/perl6/doc/design/syn/S06.html)

[14:57] <audreyt> proto is S12.

[14:57] <audreyt> it probably needs to be added to S06 as well

[15:06] <audreyt> something like, in S06.pod after "B<Multimethods>":

[15:06] <audreyt> +B<Prototypes> (keyword: C<proto>) specifies the commonalities (such

[15:06] <audreyt> +as parameter names, fixity and associativity) shared by all multis

[15:06] <audreyt> +of that name.

[15:06] <audreyt> TimToady: sanity-p?

[15:07] <gaal> audreyt: then also +If a C<proto> is not specified explicitly, one is created based on the first C<multi> declaration

[15:07] <gaal> +A C<proto> declaration must come before any matching multis, if at all.

[15:07] <gaal> right?

[15:08] <gaal> (IIRC a discussion a month ago)

[15:08] <audreyt> yup

[15:08] <audreyt> but that's in S12

[15:09] <audreyt> which is very weird

[15:09] <audreyt> I think the whole para

[15:09] <audreyt> =head1 Multiple dispatch

[15:09] <audreyt> should be moved back to S06

[15:09] *** kisu joined
[15:10] <fglock> S06 has a 'Stub declarations' section - it could comment on 'proto' x '{...}'

[15:10] <audreyt> though "proto" only makes sense for multis

[15:10] <audreyt> (which is what you are working on now I presume)

[15:10] <audreyt> for normal subs, you can do forward declaration using the

[15:10] <audreyt> sub x { ... }

[15:10] <audreyt> ...

[15:10] <audreyt> sub x { real body }

[15:10] <audreyt> form

[15:11] <audreyt> I think it's terribly inconsistent though

[15:11] <audreyt> I'd like to see all the proto forms moved to C<proto>

[15:11] <audreyt> but that's what is specced now

[15:11] <audreyt> and sorta makes some sense

[15:15] <fglock> what's the place for a op precedence parser in Pugs::* ? I was thinking something like Pugs::Grammar::Category

[15:15] <audreyt> that's an excellent name.

[15:15] <fglock> cool

[15:18] *** hexmode joined
[15:19] * nothingmuch goes bug hunting

[15:19] <nothingmuch> gotta clear out all those stupid things in the RT queues

[15:19] <nothingmuch> btw: http://halogen.note.amherst.edu/~jdtang/scheme_in_48/tutorial/overview.html

[15:19] <nothingmuch> seems nice

[15:19] <fglock> lunch &

[15:20] <nothingmuch> audreyt: i'm going to put HTML::FromANSI in a darcs repo on my website... cool?

[15:20] <nothingmuch> and hopefully close the two bugs

[15:20] <audreyt> nothingmuch: er sure

[15:20] *** fglock left
[15:20] * audreyt needs to crash for another 3hrs now

[15:21] <audreyt> I'll try to resume journaling after I wakeup :/

[15:21] <audreyt> ...hopefully before the akihabara walking tour

[15:22] * audreyt waves... &

[15:22] <nothingmuch> does 'temp $x' retain the value of the outer $x unless explicitly assigned?

[15:22] <nothingmuch> or do you have to say 'temp $x = $OUTER::x' ?

[15:23] <audreyt> unspecced (!)

[15:23] <nothingmuch> i'll post to p6l

[15:27] <nothingmuch> one

[15:27] <nothingmuch> done

[15:32] <Limbic_Region> um - slight typo in the temp x thread - the comment after the first block should say definately 5 not 10

[15:34] <cognominal> is there a difference between PCR and PCRE?

[15:35] <chris2> one means polymerasis chain reaction, and the other perl-compatible regular expressions :)

[15:38] <PerlJam> apparently I'm not the only one who thinks that when they see PCR

[15:41] <PerlJam> PCR == perl6 rules implementation.   PCRE == perl5-ish regular expression implementation

[15:41] <PerlJam> (btw)

[15:50] *** justatheory joined
[15:50] *** samhain1138 joined
[15:51] <audreyt> so maybe re::override::Pugs instead of ::PCR -- otherwise too confusing

[15:52] <Limbic_Region> audreyt is supposed to be sleeping

[15:52] <audreyt> I am sleeping...

[15:54] *** GabrielVieira joined
[15:54] <GabrielVieira> hi

[15:56] <PerlJam> Limbic_Region: audreyt takes Ambein to help sleep and so is able to do all sorts of things while asleep.

[16:03] *** fglock joined
[16:03] <svnbot6> r9749 | audreyt++ | * v6.pm: Alias++ requested the "use v6-pugs;" should be in a

[16:03] <svnbot6> r9749 | audreyt++ |   line by itself (modulo whitespace/comments), to make PPI's life

[16:03] <svnbot6> r9749 | audreyt++ |   not totally miserable.

[16:06] *** Aankhen`` joined
[16:06] <svnbot6> r9750 | audreyt++ | * Pugs::Compile::Rule - avoid warnings in tests.

[16:06] <svnbot6> r9751 | audreyt++ | * re::override::PCRE - we really want 5.006+.

[16:06] <stevan_> dammit, I keep missing her

[16:06] * stevan_ ponders sleeping every 3 hours to try and get in sync :P

[16:07] <ingy> hi audreyt

[16:07] <stevan_> wolverian: feel free to m??se on over to #moose (on perl.org) if you have any questions

[16:07] <stevan_> hey ingy

[16:07] <stevan_> you in .jp yet?

[16:07] <ingy> audreyt: not yet

[16:07] <PerlJam> stevan_: There was a chemical engineering student I used to know who would do that (sleep every few hours)

[16:07] <ingy> grr

[16:08] <ingy> stevan_: not yet

[16:08] <ingy> audreyt: http://svn.kwiki.org/ingy/Sporx/

[16:08] * stevan_ will pretend if ingy wants him too 

[16:08] <svnbot6> r9752 | audreyt++ | * Main.hs - 6.28.0 will use the Japanese version of the title poem.

[16:08] <ingy> stevan_: http://svn.kwiki.org/ingy/Sporx/README

[16:08] <stevan_> ingy: nice :)

[16:09] <ingy> I'm about to do the insane part of the hackj

[16:09] <stevan_> which is?

[16:09] <ingy> each slide will be mutated into a Javascript function which returns takahashi markup

[16:10] <ingy> so that normal slides act normally

[16:10] <stevan_> ingy++ # bringings his own personal brand of insanity to the world of Javascript

[16:11] <ingy> but slides with embedded Javperlscript do evil things

[16:11] <stevan_> I look forward to an Inline.js

[16:11] <ingy> gah

[16:11] <stevan_> :)

[16:11] <ingy> stevan_: did you see Inline::Module

[16:11] <ingy> released last night?

[16:11] <stevan_> no, what is that?

[16:11] <stevan_> looking ....

[16:11] <ingy> http://search.cpan.org/src/INGY/Inline-Module-0.10/t/lib/Foo.pm

[16:11] <stevan_> :)

[16:12] <ingy> Module::Compile++

[16:12] <ingy> audreyt++

[16:12] <stevan_> this is like mixins, but crazier

[16:12] <ingy> mixons

[16:12] <stevan_> yes, ++ all around indeed

[16:12] <ingy> I feel like I've got my evil mojo back

[16:13] <stevan_> PerlJam: IIRC, DaVinci only slept something like 20 min every 4 hours

[16:13] <ingy> that's a man with a BIG todo list

[16:13] <stevan_> ingy: no doubt, Module::Compile is the gateway drug :)

[16:14] <ingy> :)

[16:14] <ingy> stevan_: I need to do a rewrite with dconway

[16:14] <svnbot6> r9753 | fglock++ | Pugs-Compiler-Rule/RuleInline.pl - added benchmark

[16:14] <svnbot6> r9754 | audreyt++ | * Revert "use" and "require" to use the internal forms

[16:14] <svnbot6> r9754 | audreyt++ |   for now, as it doesn't (yet) work for anything other

[16:14] <svnbot6> r9754 | audreyt++ |   than Test.pm.  Will revisit when YAML+Closure works.

[16:14] * stevan_ quakes with fear

[16:14] <fglock> plain PCR: 5263 iterations/second; fast PCR: 149000/s

[16:14] <ingy> audreyt's on fire

[16:15] <stevan_> she is always more productive when she sleeps

[16:15] <stevan_> s/sleeps/is sleeping/

[16:15] * ingy gets some coke from the fridge

[16:16] * stevan_ always keeps it in the little gold ankh around his neck, Superfly style :P

[16:19] <audreyt> ingy: give me proper VimMode highliting (via Kwiki::/Spork::) in Sporx please :)

[16:19] * audreyt is tired of {{#c|}}

[16:20] <ingy> audreyt: I can do better

[16:20] <audreyt> I want to use kwid :)

[16:20] <ingy> wait til you see it

[16:20] <audreyt> okay. will you be in the Akihabaratour?

[16:20] <audreyt> when'd you arrive?

[16:20] <ingy> 1720 tomoorrow

[16:21] <ingy> I think I am joining the dinner

[16:21] <miyagawa> yeah.

[16:21] <miyagawa> hacking dinner!

[16:21] <ingy> we can do last minute hacking at dinner and beyond

[16:21] <audreyt> k

[16:22] <ingy> I'll convert everyone to Sporx JIT

[16:22] <audreyt> yay!

[16:22] <audreyt> ingy++ ingy++

[16:22] <ingy> :)

[16:23] *** chihchun is now known as av

[16:23] *** av is now known as chihchun

[16:27] <fglock> audreyt: 'fastPCR' (nonbacktracking) is 30x faster then plain CPR - it could be used as a first-try, and then fallback to backtracking

[16:27] <fglock> s/CPR/PCR/

[16:27] <audreyt> fglock: nice!

[16:27] <audreyt> (both PArrows and Parsec uses commit-by-default, try-if-you-must strategy)

[16:28] <audreyt> it's so useful that I sometimes wonder if rules can take a :eager flag ;)

[16:28] <fglock> audreyt: is there a swich to disable backtracking in rules (other than ':')

[16:28] <fglock> :)

[16:29] <audreyt> otoh, if we are using parser combinator style with {return...}

[16:29] <audreyt> then

[16:29] <audreyt> token : {return ...}

[16:29] <audreyt> makes great documentation

[16:29] <audreyt> the colon feels like an operator there

[16:29] *** justatheory joined
[16:29] <audreyt> so maybe adding it isn't that big a requirement

[16:30] <fglock> audreyt: but then you would need token : token : token : {return} if you have a longer statement

[16:30] <fglock> or maybe not - it can be optimized by the emitter

[16:31] <fglock> (or by TGE)

[16:31] * stevan_ is starting to think that Perl 5i (of whatever it was called) will actually be out by *this* christmas

[16:31] <audreyt> I'm not sure how TGE figures into this :)

[16:31] <audreyt> it can be optimized by the emitter for sure.

[16:32] <audreyt> stevan_: yes.

[16:32] <audreyt> definitely :)

[16:32] <fglock> audreyt: I'm trying to find out things that TGE could be used for :)

[16:32] <fglock> p5i?

[16:32] <audreyt> (note that I submitted a YAPC::NA talk "Deploying Perl 6" counting on the existence of something like that at there)

[16:32] <audreyt> fglock: imvvho, nothing :)

[16:32] <stevan_> audreyt: Moose 0.03 will be out later this week with a nice Moose::Cookbook in it

[16:33] <stevan_> (and a bunch of other features/improvements too)

[16:33] <audreyt> fglock: TGE does two directions of tree-based propagation, namely propagating AST nodes from bottom to up, and propagate context etc from up to down

[16:34] <audreyt> the first one is easily effected with the :{return...} combinator style

[16:34] <ingy> Cøøkbøøk

[16:34] <audreyt> the other direction is what multimethods is for

[16:34] <audreyt> stevan_: ooooh

[16:34] *** fglock joined
[16:34] <audreyt> 18:36 < audreyt> the other direction is what multimethods is for

[16:36] <fglock> ok

[16:36] <audreyt> TGE makes sense for parrot, as writing either direction in PIR would suck

[16:36] <audreyt> but in a self-hosting context, p6 itself is more powerful/expressive than AGs

[16:37] <audreyt> (ags = attribute grammars that TGE implements)

[16:37] <PerlJam> it had better be!

[16:37] <audreyt> indeed :)

[16:39] * Limbic_Region wonders how good audreyt is at predicting the future in her sleep

[16:39] <Limbic_Region> any idea when 6.28.x of Pugs will be?

[16:39] <fglock> I'm trying to find a reference on how faster the algorithm used by PGE op-precedence is, vs. plain p6 grammar

[16:40] <audreyt> Limbic_Region: I have no idea... too many things in flux. would have more details after meetup with ingy/damian/etc this week

[16:41] <PerlJam> fglock: isn't like comparing table-lookup to stack-unwinding (or similar)?

[16:41] <audreyt> I need to get S06+S12 totally digested into _implementable_ forms... preferably with P5 backups and Perl6::API specs

[16:41] <audreyt> s/backup/runtime support/

[16:43] * Limbic_Region thanks audreyt for her noop cycles and wanders back off to lurking

[16:45] <fglock> nice: http://www.parsifalsoft.com/gloss.html

[16:47] <svnbot6> r9755 | audreyt++ | * Fix pugs -BJS compilation by temporarily emulating VCode serialization

[16:47] <svnbot6> r9755 | audreyt++ |   for Perl5.  Eventually this needs to be "fixed" by making PIL2JS

[16:47] <svnbot6> r9755 | audreyt++ |   accepting the YAML tree instead of raw Perl5 tree.

[16:50] *** ghenry joined
[16:51] <audreyt> o/~ But in that sleep of 'Net / what dreams may come / when we have shuffled off / this mortal coil / must give us Code o/~

[16:52] <audreyt> bbl :) &

[16:52] *** eric256 joined
[16:56] <ingy> any js experts in the house?

[16:57] *** justatheory joined
[16:57] <fglock> stevan_: Perl 5i is Moose?

[16:58] <eric256> Moose!!! ;)

[16:58] <ingy> elk

[16:59] <ingy> 31k

[16:59] * eric256 is considering playing with Moose to build objects for a Plugin system... the before, after, around are perfect for it...i think ;)

[16:59] * eric256 wondered what 31,000 had to do with anything lol

[17:00] <audreyt> fglock: I think stevan means "use v6-pugs" without writing v6 :)

[17:00] <audreyt> fglock: that is, use all the runtime support, but with perl5 syntax

[17:02] <stevan_> fglock: IIRC Perl 5i was the ingy project that spawned Spiffy (ingy please correct me if I am misguided)

[17:02] <fglock> audreyt: does it make sense to port perl5/Perl6-(Container|Value) to plain p5?

[17:02] <stevan_> fglock: so with Moose, PCR, Module::Compile, etc, we will have something pretty close

[17:03] <audreyt> fglock: it does... but my brain is in alpha-wave now, so there's not enough Ghz to think about this

[17:03] <audreyt> maybe tomorrow

[17:06] <ingy> stevan_: I think you are misguided

[17:07] <ingy> perl5i was my idea to extend the perl5-i(nternals)

[17:07] <ingy> adding opcodes for Perl6ish stuff

[17:08] <ingy> and perl5i was supposed to provide a clean OO API (C level) for those internals.

[17:10] * eric256 curses himself for developing on windows where it can be soo hard to install modules. 

[17:10] <Limbic_Region> eric256 - using AS?

[17:11] <eric256> yea

[17:11] <eric256> me and my constant battle. i used to have cpan setup with VC++ i should figure that out agian.

[17:12] <Limbic_Region> I was just checking if they use a freeware compiler or if they use the $$$ one

[17:13] <Limbic_Region> you would think that if they used a freebie one that there would be easy to follow instructions for building your own - I should ask crazyinsomniac

[17:15] <ingy> anyone hang out on #javascript?

[17:15] * Ara4n has asked q's there (very) intermittently

[17:15] <Ara4n> or was that #js?

[17:16] <Ara4n> no, it was #javascript

[17:21] *** DesreveR joined
[17:21] <Juerd> ingy: Isn't that quite easily checked by joining the channel and having a look at its names list? :)

[17:22] <ingy> Juerd: it's a big list

[17:22] <Juerd> I see

[17:22] <ingy> much bigger than here :p

[17:23] <Juerd> Only 30 bigger.

[17:28] <Limbic_Region> eric256 - what AS build are you using?  I have just read that as of build 815 - MinGW works seamlessly with AS

[17:30] <eric256> i have build 815

[17:31] *** avar joined
[17:31] <fglock> I'm using PxPerl with MinGW, and AS too - I frequently get path problems :)

[17:40] <eric256> L~R i'm not registered so i can't msg you.

[17:40] *** ruoso joined
[17:41] * ruoso is still alive after very very much beer in the weekend...

[17:41] <Limbic_Region> ahh - nevermind anyway - I figured it out

[17:42] <integral> Limbic_Region: /nickserv set unfiltered on # will allow people to msg you

[17:42] *** siosiosios joined
[17:43] <fglock> ruoso :)

[17:46] <ruoso> fglock, so... I saw 06-subrule.t is working...

[17:48] <Limbic_Region> hanks integral

[17:51] <fglock> ruoso: PCR 0.02 may go to cpan today

[17:56] *** elmex joined
[17:59] <ruoso> fglock, I need to see what's missing on lrep after that...

[17:59] <ruoso> fglock, it looks like I'll be able to make it work again

[17:59] <ruoso> fglock, PCR has the features the old iterator_engine had...

[18:01] *** eric256 is now known as eric256_

[18:03] * ruoso working too much :(

[18:04] <fglock> ruoso: I'm also experimenting with a new version - see RuleInline.pl - it will be more than 10x faster

[18:04] *** eric256_ is now known as eric256

[18:06] <ruoso> fglock, does it brake the "abi" again?

[18:07] <ruoso> . o O (it's weird to think in Perl 5 as binary )

[18:07] <ruoso> fglock, or it's a in-place replacement?

[18:11] <nothingmuch> i'm going to release a new Test::TAP::HTMLMatrix

[18:12] <nothingmuch> last chance to fix the display: file:///Users/nothingmuch/Perl/Test-TAP-HTMLMatrix/example_html/summary.html

[18:12] <nothingmuch> err

[18:12] <nothingmuch> http://nothingmuch.woobling.org/tth_example/summary.html

[18:13] <nothingmuch> if anyone feels they can make that prettier

[18:13] <eric256> that looks purty ;)

[18:14] <nothingmuch> it's 'orrible

[18:14] <fglock> ruoso: abi?

[18:14] <nothingmuch> i couldn't write CSS if my life depended on it

[18:14] <eric256> yea i'm not too picky though.  anything is prettier than my http://feather.perl6.nl/~eric256/t_index/ ;)

[18:15] <eric256> so if you find someone to help you with that...send them my way too.

[18:15] <eric256> we need offical P6 stylists and Librarians.

[18:15] <ruoso> fglock, the perl 5 code that runs with PCR will run with RuleInline.pl? or will need to be re-written?

[18:17] <fglock> ruoso: RuleInline will be transparent - it will first try a fast match, and if it fails, it will try the old PCR

[18:17] <fglock> ruoso: the fast match can't backtrack

[18:17] <nothingmuch> okay

[18:18] <nothingmuch> too late =)

[18:18] <ruoso> fglock, alright... so it's just an enhancement to PCR, not a substitute

[18:18] *** Ara4n is now known as Arathorn

[18:25] *** GeJ joined
[18:34] *** b_jonas joined
[18:37] *** FurnaceBoy joined
[18:46] *** KingDiamond joined
[18:49] <ingy> yay, my refactoring of the takahashi.js was successful

[18:49] <nothingmuch> Test::TAP::Model and Test::TAP::HTMLMatrix uploaded to CPAN

[18:50] <nothingmuch> now with consolidated view support

[18:50] <nothingmuch> this means two test runs can be diffed

[18:50] *** larsen joined
[18:51] * PerlJam waits for "... this means we'll have a perl6 compiler by tomorrow"   ;-)

[18:51] <PerlJam> s/\ba\b/*the*/

[18:52] * ruoso wonders if it would be a good idea to use PCR to build a Perl 5 parser and then write a P5->P6 compiler

[18:53] <nothingmuch> ruoso: not a good idea

[18:53] <nothingmuch> waste of effort

[18:53] <nothingmuch> larry can already give you an opptree with an embedded parse tree

[18:54] <nothingmuch> which is really as good as it gets for perl 5

[18:54] <nothingmuch> remember that perl 5 has no spec but the code

[18:54] <ruoso> nothingmuch, that's a point

[18:54] <ruoso> :)

[18:54] <nothingmuch> IMHO your time is too valuable to be wasted on that, but if that's what you consider fun, by all means ;-)

[18:55] <ruoso> but a P5optree -> P6syntree converter may be useful...

[18:55] <Juerd> ingy: So does Perl 6, though it doesn't call them setters and getters... :)

[18:55] *** nnunley joined
[18:58] <ingy> Juerd: accessors & mutators?

[18:59] <Juerd> ingy: has $foo will FETCH { ... } will STORE { ... };

[18:59] <Juerd> Two different closures for the same thing.

[19:02] <nothingmuch> ruoso: the problem with p5optree is that it's too low level

[19:02] <nothingmuch> but if you start on that larry will be very greatful

[19:02] <nothingmuch> i think what we *really* want is a perl5opparsetree to perl5 ast

[19:02] <nothingmuch> and then a perl 5 ast to perl 6 ast

[19:03] <ruoso> hmm... so a p5 ast is to be defined yet

[19:03] <PerlJam> ruoso: do you grok PIR?

[19:06] <ruoso> PerlJam, not yet...

[19:06] <nothingmuch> ruoso: yes, that's perl 5's biggest problem

[19:06] <nothingmuch> as far as compilation is concerned

[19:07] <nothingmuch> the parse tree doesn't have enough semantic meaning

[19:07] <nothingmuch> and the optree is too implementation specific

[19:07] <ruoso> PerlJam, I'm a little skeptical about something that could represent anything high-level...

[19:08] <ruoso> PerlJam, But I have to take a look...

[19:08] <PerlJam> ruoso: Well, do you grok perl6 rules?

[19:08] <ruoso> PerlJam, yes...

[19:08] <PerlJam> ruoso: maybe it would be useful for you to hack on the perl6 grammar?

[19:09] <ruoso> PerlJam, Probably...

[19:09] <ruoso> PerlJam, do you have something specific to point me at?

[19:09] <ruoso> PerlJam, I mean, docs

[19:11] <PerlJam> ruoso: um, look in the parrot source tree in languages/perl6

[19:13] <ruoso> ooops... http://svn.perl.org/viewcvs/parrot/ throwing error

[19:13] <ruoso> RuntimeError: instance.__dict__ not accessible in restricted mode

[19:36] *** pawel_ joined
[19:36] <pawel_> hi all

[19:36] *** pawel_ is now known as pmurias

[19:37] <nothingmuch> hi

[19:47] <fglock> pmurias: hi!

[19:54] <pmurias> PerlJam: do you need read or write PIR skills?

[19:55] <PerlJam> pmurias: I need time.  :-)

[19:55] *** Arathorn is now known as Aragone

[19:55] <PerlJam> I can read/write perl5, pir, perl6, rules, etc. but I have no time.

[19:55] <PerlJam> I was suggesting to ruoso that something of use would be to work on the perl6 language stuff in the parrot tree since it's coming to fruition

[19:56] <PerlJam> (i.e., there were some checkins over the weekend dealing with the perl6 grammat and what not)

[20:01] <pmurias> personally i really dislike pir, i don't have any assembler or BASIC experience so it's a pain for me to deciphere all those gotos

[20:02] <PerlJam> I've always thought PIR remarkably similar to perl.

[20:02] <PerlJam> (aside from the weird assembly-isms)

[20:06] *** trym joined
[20:13] <pasteling> "ruoso" at 201.9.29.142 pasted "Test rule emitted code" (19 lines, 417B) at http://sial.org/pbot/16499

[20:14] <ruoso> fglock, please take a look at the paste

[20:14] <ruoso> fglock, is it correct as a rule method declaration?

[20:15] <ruoso> fglock, I know it's dirty... but it works...

[20:15] <ruoso> fglock, maybe Pugs::Compiler::Rule could offer an initialization with the code sub already defined...

[20:17] *** tri joined
[20:18] <KingDiamond> okay, quick question: why does slurp() take the filename as a param and not a file object?

[20:18] <pmurias> KingDiamond: more usefull in short scripts

[20:19] <ruoso> KingDiamond, according to Perl6::Slurp it can take a file object too

[20:19] <KingDiamond> ruoso: yeah, it apparently does but, interestingly, I get different outputs using slurp($file_obj) and slurp("filename"); why?

[20:20] <ruoso> KingDiamond, interesting... do you have a test case?

[20:20] <KingDiamond> I'm trying to read a binary file, if it helps

[20:20] <KingDiamond> yeah, gimme a sec

[20:20] <fglock> ruoso: how about: *{'rule'} = PCR->compile( '<?p6ws>*' )->code; - this is much cleaner

[20:21] <ruoso> fglock, but then I didn't compile the code at first

[20:21] <ruoso> I'll have to compile everytime...

[20:21] <ruoso> fglock, a rule declaration can be compiled at compile time... it doesn't need to be compiled at ruuntime

[20:22] <pmurias> fglock: why does PGR->rule("%hash") return undef?

[20:22] <fglock> ruoso: ok - we'd better add an 'emit_method' or something

[20:23] <fglock> pmurias: did you define the %hash rule? currently it emits a warning and returns undef

[20:24] *** DesreveR is now known as r0nny

[20:25] <pmurias> it does *not* emit a warning, end according to the PGR/Rule.pm &variable handles the hash case

[20:25] <pmurias> s/end/and/

[20:25] <fglock> ruoso: your code uses internals - it would break if PCR changes

[20:27] <fglock> pmurias: see P::Emitter::Rule::Perl5 line 122

[20:27] <fglock> bbiab &

[20:27] <ruoso> fglock, I know... probably we need a 'compiled' method... like my $rule = P::C::R->compiled(sub { ... });

[20:33] *** macroron joined
[20:48] * ruoso is considering using Symbol::Glob to have the rule object as the scalar value and the rule method as the code value

[21:00] *** fglock joined
[21:03] <fglock> ruoso: like '$rule' and 'sub rule'?

[21:04] *** SamB joined
[21:05] *** KingDiamond joined
[21:12] *** azuroth joined
[21:14] <ruoso> fglock, yes...

[21:14] <ruoso> fglock, actually Symbol::Glob is a little weird...

[21:14] <ruoso> fglock, doing by hand seems easier

[21:15] <ruoso> fglock, then both will be available... and the push problem is solved

[21:16] <fglock> ruoso: the push problem is going to be fixed with Pugs::Grammar::Category (opp.pl is a prototype)

[21:18] <fglock> ruoso: when you get a declaration like 'sub infix:<x> {...}' you add the sub to category 'infix' and it's done

[21:18] <ruoso> fglock, I agree that 'sub infix:<x>' must work... but push @rules, $rule; should work also

[21:19] <ruoso> since rules can be defined as "my $rule = rule {...}"

[21:20] <KingDiamond> hmm... so looks like I was wrong (thankfully) about the slurp() thing... however, something's goign wrong when I'm concatenating strings with binary data

[21:20] <fglock> ruoso: there are categories 'rxsomething' - see S05 (near end of file)

[21:28] *** hexmode joined
[21:30] *** FurnaceBoy_ joined
[21:31] <pasteling> "ruoso" at 201.9.29.142 pasted "Another rule declaration proposal... presuming P::C::R->compiled(CODE) is available..." (22 lines, 448B) at http://sial.org/pbot/16500

[21:32] <ruoso> fglock, please take a look at the paste

[21:34] *** p5evalbot joined
[21:36] <fglock> ruoso: $rule needs a closure with a predefined grammar

[21:38] <ruoso> fglock, hmmm... ok...

[21:39] <ruoso> fglock, the rule object can have that defined, right?

[21:39] <ruoso> fglock, I mean in the compilation

[21:40] <ruoso> fglock, oh... now I noticed...

[21:40] <fglock> ruoso: no, because you need inheritance to work

[21:40] <ruoso> fglock, I was dumb

[21:40] <ruoso> fglock, the sub definition is wrong

[21:41] <ruoso> fglock, it should be *{'rule'} = ${'rule'}->code();

[21:41] <eric256> you know if you are the only two talking you can drop the names right? :)

[21:41] <pasteling> "ruoso" at 201.9.29.142 pasted "*fixed* Another rule declaration proposal... presuming P::C::R->compiled(CODE) is available..." (20 lines, 431B) at http://sial.org/pbot/16501

[21:42] <fglock> eric256: no more :)

[21:42] <ruoso> eric256, yeah... now we have three

[21:42] <ruoso> :)

[21:42] <ruoso> eric256, in my IRC client I get noticed when someone speaks my name

[21:43] <eric256> ahhh

[21:43] <eric256> i mean... ruoso, ahhh

[21:43] <eric256> ;)

[21:46] *** nnunley joined
[21:47] <ruoso> fglock, considering the fix... what do you think?

[21:47] <fglock> sorry, I don't see what are you trying to do

[21:47] *** larsen joined
[21:48] <ruoso> fglock, lrep-compiler?

[21:48] <ruoso> fglock, trying to find out the perl 5 equivalent code to some perl 6 code...

[21:50] <fglock> ruoso: you want perl5 versions for variable and method, right?

[21:52] <ruoso> right

[21:54] <fglock> how about making a PCR subclass?

[21:55] <ruoso> fglock, the difference is that I don't want to compile at runtime...

[21:55] <ruoso> fglock, I'll compile and dump the code of the rules as perl5 code

[21:55] <ruoso> fglock, compiling Perl6.p6 to Perl6.pm

[21:56] <ruoso> and then lrep.p6 to lrep

[21:56] <ruoso> and so on

[22:00] <fglock> ruoso: you don't need Pugs::Compiler::Rule - you can write a small program that dumps the compiled code to a file - you only need Pugs::Grammar::Rule and Pugs::Emitter::Rule::Perl5

[22:01] <ruoso> fglock, Pugs::Compiler::Rule provides convenience methods, such as ->code() and ->match()...

[22:02] <ruoso> fglock, I just need to restore the $rule from the compiled code

[22:03] <fglock> ruoso: you can build a PCR pre-compiled object with bless{ code => eval "..." }, PCR;

[22:03] <ruoso> fglock, but ok... I'll subclass it to implement...

[22:03] <ruoso> fglock, that's from where I started...

[22:03] <ruoso> fglock, the first paste looked like this

[22:05] *** stevan_ joined
[22:05] <fglock> we could implement a 'dump' method to return this

[22:05] <ruoso> fglock, I already use $rule->{perl5} to get the compiled code...

[22:06] <ruoso> fglock, a method for this would be nice...

[22:06] <fglock> ok!

[22:06] <ruoso> fglock, I just need to recreate the rule at runtime with the code saved at compiletime

[22:07] <ruoso> fglock, in the last paste the code is the resulting $rule->{perl5} of a compilation...

[22:08] <ruoso> i mean, the code inside the ->compiled()

[22:10] <fglock> ruoso: you can try: instead of 'Pugs::Compiler::Rule->compiled(' - ${'rule'} = bless{ code => sub {...} }, Pugs::Compiler::Rule;

[22:10] <ruoso> fglock, I know that works... I already tried that...

[22:11] <ruoso> fglock, the problem is that it counts on too many internals...

[22:11] <ruoso> but forget it... I'll subclass it and implement...

[22:15] <fglock> ruoso: i put it in the TODO list - so I'll not forget

[22:15] <svnbot6> r9756 | fglock++ | PCR - added a serializer/Dump to TODO list

[22:16] <fglock> later &

[22:16] *** fglock left
[22:18] *** m joined
[22:40] *** miyagawa joined
[23:12] <svnbot6> r9757 | ruoso++ | lrep close to work with the new PCR...

[23:36] *** wilx joined
[23:38] *** Limbic_Region joined
