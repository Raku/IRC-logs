[00:03] <svnbot6> r10332 | lwall++ | put try {} around fatal failing test

[00:03] *** justatheory joined
[00:06] <svnbot6> r10333 | lwall++ | wrong number of tests

[00:09] <svnbot6> r10334 | lwall++ | wrong number of tests

[00:24] *** shachaf joined
[00:47] *** p5evalbot joined
[00:51] *** p5evalbot is now known as foo213231

[00:51] *** p5evalbot is now known as buu

[00:58] *** p5evalbot joined
[01:04] *** meppl joined
[01:07] *** shachaf joined
[01:25] *** weinig|away is now known as weinig

[01:30] <meppl> gute nacht

[01:32] *** rashakil joined
[01:39] <audreyt> I'll continue triaging and releng today

[01:39] <audreyt> but without much network connectivity

[01:39] <audreyt> mother's day and family and all :)

[01:39] <audreyt> bbl... &

[01:59] *** Ymmv joined
[02:24] *** neoesque joined
[02:35] *** shachaf joined
[02:45] *** Ymmv joined
[02:45] *** meppl joined
[03:04] *** elmex joined
[03:26] *** frederico joined
[04:19] <svnbot6> r10335 | spinclad++ | - JudyHS:  settled on iterator-based scanning, got rid of first scanning interface.

[04:19] <svnbot6> r10335 | spinclad++ |   See doc/ext/JudyHS_3.htm for details.

[04:19] <svnbot6> r10335 | spinclad++ |   Next:  implement these suckers!

[04:22] <svnbot6> r10336 | spinclad++ | - JudyHS:  improve safety of example code.

[04:29] *** Quell joined
[04:59] <svnbot6> r10337 | Darren_Duncan++ | ext/Relation/ : updated Relation.pm to add the relational join() operator, the first of several relational operators that don't closely resemble existing Perl 6 operators

[05:02] *** Quell joined
[05:08] <svnbot6> r10338 | lwall++ | !-x $file syntax broken, worked around with !(-x $file)

[05:08] <svnbot6> r10338 | lwall++ | added additional test for bug

[05:09] *** avar joined
[05:42] *** justatheory joined
[06:15] *** justatheory joined
[06:17] <svnbot6> r10339 | Darren_Duncan++ | ext/Relation/ : added new Relation.pm methods [product (cartesian_product, cross_product, cross_join), semijoin (matching)], which are special cases of join() like intersection() is ; also added placeholders for future methods [semidifference (not_matching), compose, summarize, group, ungroup, substitute, wrap, unwrap, divide, transitive_closure (tclose)]

[06:20] *** iblechbot joined
[06:22] *** dduncan left
[06:24] *** Raffaello joined
[06:25] * Raffaello hi everybody, I try to something, could you help me, you should only enter to www.proforumtr.com/mg

[06:26] * Raffaello hi everybody, I try to something, could you help me, you should only enter to www.proforumtr.com/mg

[06:32] <spinclad> no thanks

[06:32] <svnbot6> r10340 | spinclad++ | - JudyHS:  struct defined and functions stubbed in to JudyHS.c

[06:34] <spinclad> (that's the JudyHSIter struct and functions)

[07:35] *** marmic joined
[08:03] *** r0nny joined
[08:27] *** lisppaste3 joined
[08:36] *** chris2 joined
[09:03] *** DaGo joined
[09:11] *** elmex joined
[09:15] *** neoesque joined
[09:39] *** neoesque joined
[09:56] *** knewt joined
[10:03] <webmind> can anyone tell me if the >>foo<< operators support multidimensional arrays ?

[10:13] <Gothmog_> I suppose it iterates over one dimension, but you can probably use it multiple times.

[10:15] *** DaGo joined
[10:16] <webmind> would be really nifty if it could do more at once

[10:16] <webmind> >><< doesn't really save much I nthink if you try to multiply 3 or 4 dimensional rasters

[10:36] *** r0nny joined
[10:38] <Gothmog_> I was wrong: "Hyper operators are defined recursively on arrays"

[10:38] <Gothmog_> S03

[10:40] <webmind> hmm

[10:41] <webmind> does that it does it multidimensional ?

[10:43] <Gothmog_> http://dev.perl.org/perl6/doc/design/syn/S03.html#Hyper_operators

[10:44] <Gothmog_> There is an example.

[10:44] *** ruz joined
[10:49] <Gothmog_> But that doesn't seem to work atm...

[10:49] <Gothmog_> ?eval say join ", ", (42) »+« (1, [2, 3], [4, 5, 6])

[10:49] *** evalbot_10322 is now known as evalbot_10340

[10:49] <evalbot_10340> OUTPUT[45 ] Bool::True

[10:49] <Gothmog_> Uh?

[10:50] <Gothmog_> At least for me, it prints "43, 44, 45";

[10:50] <Gothmog_> So it seems that it forces scalar context to the inner arrays, adding the count of elements instead of being applied recursively.

[10:53] <Gothmog_> Uh, or that's with say...

[10:53] <Gothmog_> You should probably ask someone who is more familiar with it. ;-)

[11:38] <gaal> nothingmuch: ping

[11:46] <azuroth> what is ?+? :s

[11:54] <ingy> hi gaal

[11:58] <gaal> hey ingy

[11:58] <gaal> azuroth: Gothmog_ said >>+<< but apparently your font doesn't display that

[11:59] <azuroth> ohh, right

[11:59] <gaal> apart from that, it look slike a user-defined operator likely to be used in a haskell arrow progam :)

[12:00] <wolverian> the >> weren't utf8 apparently, as I didn't see them either

[12:01] <azuroth> that makes me sad

[12:03] <ingy> :(

[12:10] *** ludan joined
[12:10] <ludan> hi

[12:16] *** chris2 joined
[12:19] *** jsiracusa joined
[12:24] *** nothingmuch joined
[12:29] *** szbalint joined
[12:33] *** rikko joined
[12:39] *** macroron joined
[13:09] *** bernhard joined
[13:30] *** iblechbot joined
[13:40] *** Ymmv joined
[13:42] *** kanru joined
[13:44] *** weinig is now known as weinig_

[13:44] *** weinig_ is now known as weinig

[13:46] *** justatheory joined
[13:47] <svnbot6> r10341 | fglock++ | PCR - TODO'ize tests

[13:57] *** alexe joined
[13:57] *** fglock joined
[13:59] <fglock> ?eval "ab" ~~ /aa|b/

[13:59] *** evalbot_10340 is now known as evalbot_10341

[13:59] <evalbot_10341> Match.new(   ok => Bool::True,    from => 1,    to => 2,    str => "b",    sub_pos => (),    sub_named => {} )

[14:00] <fglock> ?eval "ab" ~~ /a[a|b]/

[14:00] <evalbot_10341> Match.new(   ok => Bool::True,    from => 0,    to => 2,    str => "ab",    sub_pos => (),    sub_named => {} )

[14:08] <scw> fglock: You could look at the $rule->{perl5} generated by ab|c

[14:09] <scw> The problem is not precedence but the not-match handling

[14:09] <svnbot6> r10342 | fglock++ | PCR - more tests

[14:09] <fglock> scw: right - added a test for it - thanks

[14:10] <scw> fglock: but if we just reset $pos, it WILL backtrack

[14:11] <scw> I was thinking adding a flag denoting if the subrule has matched any thing

[14:12] <fglock> scw: "|" is a kind of backtrack, but it is allowed, I think

[14:12] <scw> if so, other branches are cutted.  Only when the unmatched subrule didn't set the flag will choose next alternation

[14:13] <fglock> if a whole branch is matched, it doesn't backtrack - only if the branch fail

[14:13] <scw> so ab|ac WILL match ac since it can backtrack?

[14:13] <scw> seems different from what Parsec do

[14:13] <pmichaud> for ab|ac, ab fails so it tries ac

[14:14] <fglock> yes - but currently it is matching 'aac' because of the $pos bug

[14:14] <scw> ok, so ratchat still backtrack in alternation

[14:15] <pmichaud> yes, unless the alternation is in a group

[14:15] <pmichaud> (subpattern)

[14:15] <pmichaud> [ab|ac] x     will match "abacx"  if ratchet if off, but will fail if ratchet is on

[14:15] <fglock> not exactly - [abc|ab]c will not match abc, for example

[14:16] <scw> the "unit" of backtracking is a group

[14:16] <scw> is it?

[14:16] <pmichaud> every construct is treated as though it has a cut after it

[14:16] <pmichaud> (including groups)

[14:16] <fglock> I need to leave :(  &

[14:17] <pmichaud> later, fglock

[14:17] *** fglock left
[14:17] <pmichaud> alternation is "special" in that there's not a natural place to cut

[14:21] <scw> I think I'll reread the backtracking section of perlre :(

[14:21] <scw> is there a construction in perl5re which does the same as ':' in rules?

[14:21] <pmichaud> (?> ... )

[14:21] <pmichaud> (which is pretty awful)

[14:22] <pmichaud> so, the equivalent of  [ab|ac]:  in rules would be (?>ab|ac) in perl5re

[14:22] <scw> enclosing the unit which is not to be backtracked over?

[14:22] <pmichaud> yes

[14:23] <scw> so a simple /a* : b* : c+ : d/ becomes (?>a*) (?>b*) (?>c*) d ? yuck :p

[14:23] <pmichaud> you got it :-)

[14:24] <pmichaud> except(?>c+)

[14:24] <scw> oh ya

[14:24] <pmichaud> using ':' to control backtracking is *much* cleaner

[14:24] <pmichaud> TimToady++

[14:25] <scw> I'll do some reading though, thanks, pmichaud++

[14:26] <pmichaud> anytime

[14:28] *** FurnaceBoy joined
[14:29] *** alexe left
[14:36] *** masak left
[14:59] <scw> oh, what I thought is '::' Backtracking over a double colon causes the surrounding group of alternations to immediately fail

[15:04] <Juerd> There are :, ::, :::, and <commit>, each fails one more level.

[15:05] <Juerd> Atom, group, rule, match, IIRC

[15:07] *** gdickie joined
[15:11] *** jserv-- joined
[15:12] *** Aankhen`` joined
[15:15] <pmichaud> '::' is an alternation cut, yes.

[15:15] <pmichaud> Juerd has it correct

[15:18] <scw> that helps, clear syntax and clear meaning :)

[15:44] *** shachaf joined
[15:58] *** jserv-- is now known as jserv-wants-a-lo

[15:59] *** jserv-wants-a-lo is now known as jserv--

[16:07] *** kanru is now known as k3u

[16:14] *** k3u is now known as kanru

[16:15] *** nothingmuch joined
[16:44] *** sri_ joined
[16:48] <Juerd> Neat. The youngest Parrot release is codenamed Feather :)

[16:48] <leo> Juerd++ - yes

[16:48] <Juerd> :)

[16:49] <leo> Juerd: will you be in Delft?

[16:51] <Juerd> Certainly

[16:51] <Juerd> When will you travel?

[16:51] <leo> Tue

[16:52] <Juerd> I hope Domm contacts you before then about train tickets for me :)

[16:52] <leo> should I take these with me or such?

[16:52] <Juerd> That would be practical

[16:53] <leo> aha

[16:54] *** sri_ joined
[16:55] <leo> well, plane is starting Tue 10:05, so he probably has to come to the airport at 9:00

[16:55] <Juerd> afk  # food :)

[16:56] <Juerd> Okay, I'll let him know

[16:56] <Juerd> afk

[17:00] *** Khisanth joined
[17:01] *** kanru joined
[17:09] *** sri_ joined
[17:35] *** jsiracusa joined
[17:52] *** saorge joined
[17:55] *** domm joined
[17:56] *** Odin-LAP joined
[17:59] *** Ymmv joined
[18:01] *** masak joined
[18:10] *** domm left
[18:27] *** m joined
[19:08] *** macroron joined
[19:14] *** weinig_ joined
[19:38] *** weinig_ is now known as weinig|away

[19:54] *** shachaf_ joined
[20:25] *** Quell joined
[21:35] *** larsen joined
[21:41] <svnbot6> r10343 | fglock++ | PCR - fixed :ratchet + alternation bug

[21:43] *** weinig|away is now known as weinig

[21:51] *** fglock joined
[21:53] <davidfetter> re

[21:54] <fglock> davidfetter: hi!

[21:59] <davidfetter> hi, flavio :)

[21:59] <davidfetter> what's new?

[22:07] <fglock> everything is fine - fixing some bugs here - I've been cooking all day :)

[22:13] <davidfetter> fglock, cooking what?

[22:13] <svnbot6> r10344 | fglock++ | PCR - compile_p6grammar-token.pl - added 'token' and 'regex' words; untested; may contain wrong line-endings

[22:13] <davidfetter> fglock, apart from that... ;)

[22:14] <fglock> first time I made pita bread that opens right

[22:14] <fglock> with falafel too :)

[22:15] * FurnaceBoy drools

[22:17] <fglock> FurnaceBoy: :)

[22:18] <davidfetter> pitas are easy once you know how

[22:19] <davidfetter> you need a very hot oven, tho :)

[22:19] <fglock> otherwise they are a PITA

[22:19] <davidfetter> lol

[22:26] * davidfetter looks around for people for his crazy PL/Parrot schem

[22:26] <davidfetter> +e

[22:26] *** weinig is now known as weinig|away

[22:26] * fglock ducks

[22:26] <davidfetter> heh

[22:34] <svnbot6> r10345 | fglock++ | PCR - warns if :sigspace is used (not implemented)

[22:34] *** Ymmv joined
[22:37] <fglock> davidfetter: try #parrot - but things are a bit slow today

[22:38] <davidfetter> k

[22:38] <davidfetter> egad. "Users  	3, 0@, 0%, 0+"

[22:39] <davidfetter> is that #parrot on freenode, or...?

[22:40] <fglock> irc.perl.org I think

[22:43] <davidfetter> ah

[22:44] <davidfetter> thanks :)

[22:45] <fglock> np

[22:46] * davidfetter ponders nondeterministic polynomials

[22:47] <fglock> no problem

[22:47] <davidfetter> heh

[22:51] <fglock> off to dinner &

[22:51] <davidfetter> bon appetit

[22:52] *** fglock left
[23:17] *** ludan joined
[23:25] *** froh-doh joined
[23:39] *** oylenshpeegul joined
[23:44] *** rashakil_ joined
[23:49] *** neoesque joined
[23:52] *** oylenshpeegul left
