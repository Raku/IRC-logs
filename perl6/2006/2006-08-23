[00:02] *** rgs_ joined
[00:05] *** justatheory joined
[00:07] <diakopter> seen Alias_

[00:07] <Alias_> yeah

[00:09] <diakopter> i saw your use.perl.org post about cpan

[00:09] <diakopter> i haven't watched the video you linked yet

[00:09] <diakopter> but I had some ideas to suggest

[00:10] <Alias_> shoot

[00:10] <Alias_> Although doing it in the comment would help, so others can see

[00:10] <Alias_> instead/as well as here

[00:11] <diakopter> true.

[00:11] <diakopter> here, then there.

[00:12] <diakopter> java has the Java Class Library

[00:12] <diakopter> MSIL has the Base Class Library

[00:12] <Alias_> I actually think that's a fundamentally flawed method

[00:13] <diakopter> explain?

[00:13] <Alias_> How many times have you had to port all your programs because Perl released a new version and all the modules changed

[00:13] <Alias_> The most common answer is "never"

[00:14] <Alias_> or "not since Perl 5"

[00:14] <Alias_> I spend time with Java programmers, and half the conversation seems to be about porting from J2EE X to J2EE Y and so on

[00:15] <Alias_> Also, it requires that you plan ahead on the major APIs, with committees and such

[00:15] <diakopter> how is that an artifact of perl not having an officially blessed set of modules

[00:15] <Alias_> And then hope you pick right

[00:16] <Alias_> Perhaps I'm reading your comment wrong

[00:16] <Alias_> Your suggestion was a raw statement of fact, without any assertion or suggestion

[00:16] <diakopter> hee; I didn't make a suggestion actually

[00:16] <Alias_> Try restarting with your actual suggestion

[00:16] <zgh> the lack of central design means that many different people produce numerous solutions, then the best one can rise to teh top rather than being prefected ahead oftime

[00:16] <zgh> that's the great thing about CPAN

[00:17] <Alias_> Plus. Java has money behind it

[00:17] <diakopter> right, but that relies on random choice

[00:17] <Alias_> random?

[00:17] <zgh> natural selection is not random

[00:17] <Alias_> It relies on non-random choice actually

[00:17] <diakopter> no one fully researches all the possible implementation choices before choosing one

[00:17] <diakopter> and all their pros and cons

[00:17] <zgh> no but they get suggestion on #perl

[00:18] <Alias_> They will if there's only 2 or 3

[00:18] <diakopter> if they did so, they would have been able to write their own in shorter time

[00:18] <diakopter> their own amalgamation, perhaps.

[00:18] <Alias_> For most subjects, CPAN has between 1 and 3 choices

[00:18] <zgh> not EVERYONE needs to do that, jst like not EVERYONE needs to hack source of OSS to be successful

[00:18] <zgh> er s/of/for/

[00:18] <Alias_> It's a few very specific areas that attract modules like honey

[00:18] <Alias_> Config files, OO abstractions, templates, MVC web frameworks

[00:19] <Alias_> Roman numerals are something of an unusual exception to that

[00:19] <Alias_> Unless there's something sexy about the field of roman numberals I don't know about

[00:19] <diakopter> earlier, sorry for prefacing my suggestion with some lead-in

[00:19] <zgh> in the words of audreyt, "CPAN is the language, Perl is the syntax."

[00:20] <Alias_> The other effect we see is that someone uploads shit, but then nobody else would have upload code that does the math to solve optimimal naval prop shaft design

[00:20] <Alias_> optimal

[00:20] <Alias_> And then as people use it, they send feedback and patches and such

[00:20] <Alias_> And what was originally shit, becomes not bad, and then decent, and then good

[00:20] <diakopter> yeah.

[00:21] <Alias_> unless it has a terrible API, which you can't really recover from

[00:21] <Alias_> So the modules@ list often asks people to go talk to the existing authors

[00:21] <zgh> Alias_: can you post the URL to your referenced blog post?

[00:21] <Alias_> I did it today in fact

[00:21] <diakopter> the problem is, the patch submission and bug reporting and rating systems for many modules are absolutely terrible.

[00:21] <diakopter> oops, scratch that "the problem is,"

[00:21] <Alias_> the patch submission and bug reporting and rating systems are identical for all modules

[00:21] *** mdiep joined
[00:21] <Alias_> Thanks the gods

[00:22] <diakopter> I mean, many of the maintainers don't reply to patches or bug reports, and probably most users don't submit them

[00:22] <Alias_> http://use.perl.org/~Alias/journal/30724

[00:22] <lambdabot> Title: Journal of Alias (5735)

[00:22] <zgh> Alias_: thx

[00:22] <Alias_> diakopter: If the maintainers don't reply, then you just apply to take over maintainership

[00:22] <Alias_> And we (the modules@ pause admins) give you co-maint

[00:23] <zgh> diakopter: this is an old "problem" that free/open source handles very well

[00:23] <zgh> not everyone needs to participate at that level for it to work

[00:23] <Alias_> zgh: And CPAN better than most

[00:23] <Alias_> diakopter: Any modules you'd like to take over?

[00:23] <diakopter> zgh: that doesn't mean there isn't room for improvement, even in cpan

[00:23] <zgh> Alias_: agreed

[00:23] <zgh> diakopter: too true, there always is

[00:24] <zgh> but I tink CPAN is the most successful project of its type

[00:24] <zgh> if you can call it "a project"

[00:24] <Alias_> CPAN has almost no major problems

[00:24] <Alias_> And it's quite unique in that regard

[00:24] <Alias_> Not at large scales anyway

[00:24] <Alias_> It has the usual supply of bugs and smaller issues that need fixing

[00:24] <zgh> CPAN really is much more than a library archive at this point. It's just important to perl as the language itself.

[00:24] <diakopter> that statement could be myopic, several-many years from now

[00:25] <zgh> diakopter: which statement?

[00:25] <Alias_> diakopter: Good thing I keep up with the times :)

[00:25] <diakopter> "CPAN has almost no major problems"

[00:25] <diakopter> what are the exceptions (the major problems)

[00:25] <zgh> diakopter: well what are you worried about specifically?

[00:26] <Alias_> CPAN Testers is a problem, it's dead largely

[00:26] <Alias_> And there's some rippling waves of QA issues as a result

[00:26] <diakopter> any others that you're willing to mention here :)

[00:26] * Alias_ ponders

[00:27] * zgh read the post.

[00:27] <zgh> Worying about too many choices misses the point.

[00:27] <zgh> there's already python

[00:27] <Alias_> I have a few lingering concerns about metadata

[00:28] <diakopter> I personally am not worried about too many choices, too much.

[00:28] <zgh> developers should take responsibility for researching what meets their needs.

[00:29] <zgh> python has a BDFL that likes to pick the "official" implementation of everything

[00:29] <zgh> i hear he tapped django as the official web framework

[00:29] <Alias_> yeah

[00:29] <diakopter> Alias_: more on the metadata concerns?

[00:29] <zgh> sucks for devs of different frameworks that might work better in some cases

[00:29] *** nekokak joined
[00:29] <Alias_> diakopter: I am concerned the metadata is being specified by one subgroup without sufficient consultation

[00:30] *** xerox_ joined
[00:30] <Alias_> I have a few general installation toolchain interoperability concerns as well

[00:31] <Alias_> But those are being fixed, so from the large viewpoint it's solved

[00:31] <Alias_> But everything else looks ok for the next doubling at least

[00:31] <Alias_> i.e. To 20,000 modules

[00:32] <Alias_> After 20,000 modules I think we're going to maybe outgrow RT

[00:32] <diakopter> i thought best practical was reimplementing RT in jifty?

[00:32] <Alias_> But we have about a 2 to 2.5 year lead time on that problem

[00:32] <Alias_> That would be nice

[00:33] <Alias_> I think more that the design might start hitting limits

[00:33] <Alias_> Hard to explain without deep understanding of the nature of the growth

[00:33] <Alias_> And it's at least 50% gut instinct

[00:34] <Alias_> CPAN Testers didn't reach a single critical point either, but 10,000 about where it's scaling limit was

[00:34] <diakopter> who was it that was spec'ing that massive scale testing system

[00:35] <Alias_> me, actually

[00:35] <diakopter> ah

[00:35] <Alias_> But as for the rest, transport is fine, the client situation is mostly ok, governence is ok, search and reputation is ok

[00:35] <Alias_> Windows is looking much better

[00:35] <zgh> glad to see people asking the hard questions about CPAN

[00:35] <Alias_> downstream could be better, but it's hard to know how to fix that

[00:36] <Alias_> I'm sort of hoping metadata makes downstream better...

[00:36] <diakopter> who was it that was mentioning cpanp and its future

[00:36] <Alias_> kane

[00:36] <Alias_> Who wrote it

[00:36] <Alias_> (probably)

[00:37] <diakopter> here's a hypothetical for you.  feel free to shoot it down, but i'll keep going with it as long as I can still answer most of the hard questions

[00:39] <diakopter> hmm; more difficult to verbalize that I thought.

[00:41] <diakopter> anyway, sorry to be so far offtopic

[00:41] <diakopter> i'll continue when I gather my thoughts

[00:41] <zgh> CPAN is more topical than ever

[00:42] <Alias_> CPAN is always topical

[00:42] <Alias_> And yeah, things coming to a crunch for perl 6 too

[00:45] <Alias_> oh, one major problem, although less important than QA, is UI design

[00:45] <Alias_> Which hasn't been high enough priority on anyone's list to target

[00:45] <Alias_> Our design is fragmented and largely sucks

[00:46] <Alias_> I doubt we can unify things, but a general refresh would be nice

[00:46] <Alias_> We don't control the user entry points particularly well atm

[00:46] <diakopter> here's a open question that I won't be offended if no one answers seriously

[00:47] <diakopter> in what markets does perl have the largest room for growth/incursion

[00:47] <diakopter> s/the largest/any/

[00:48] <Alias_> Light Business Desktop

[00:49] <Alias_> Prebuilt web apps

[00:49] <diakopter> your choices for markets to discuss could include such spaces as company size, development/deployment platform, decision-maker role, etc.

[00:50] <diakopter> personally, I think trying to attract *more* developers directly is a total lost cause

[00:50] <Alias_> I don't think we've done that for ages

[00:51] <diakopter> most people who call themselves developers don't (didn't?) have much choice in what language/environment they use

[00:51] <diakopter> alright, I'm just trying to think about all the options

[00:51] *** hikozaemon joined
[00:51] <diakopter> sorry to think extraneously

[00:51] <diakopter> heh

[00:51] <Alias_> I think the biggest one is that we're on the edge of being a VB replacement

[00:52] <Alias_> Something to write all those incidental business desktop applications in

[00:52] <diakopter> technically, perhaps.  try selling that to more than 3% of system architects

[00:52] <Alias_> "selling"?

[00:52] <Alias_> We aren't in the business of selling anything

[00:53] <Alias_> Just like with the biotech stuff, one day you wake up and everything's written in Perl

[00:53] <Alias_> And CGI

[00:53] <diakopter> yeah, during times of explosive segment growth.

[00:53] <Alias_> certainly

[00:53] <Alias_> We adapt fast

[00:54] <diakopter> I think it would be folly for the perl community to fail to market/position its product and its selling points appropriately

[00:54] <Alias_> We don't market of position anything

[00:54] <Alias_> or

[00:54] <Alias_> I'm only commenting on areas in which I see the potential for explosive growth

[00:54] <diakopter> which areas are those

[00:55] <Alias_> The desktop one is a case of a number of factors all starting to come together at the same time

[00:55] <diakopter> yes; there's a large saddle point here with the release/demise of Vista

[00:55] <diakopter> potentially.

[00:55] <Alias_> It's nothing to do with that, although I just tested Vanilla 7 on Vista and it works fine

[00:56] <diakopter> which factors are you talking about then wrt the desktop

[00:56] <Alias_> It's that a few particular technical areas required for Windows are starting to move from kinda solved, to competantly solved

[00:56] <diakopter> oh, you're talking about perl on windows.

[00:56] <Alias_> Firstly, Perl + Windows is going through a revitalisation as we finally escape from ActiveState

[00:57] <Alias_> That was a sticking point for a long time

[00:57] <Alias_> Secondly, PAR is starting to mature

[00:57] <diakopter> i thought you were referring to perl as a development platform for desktop apps on top of linux

[00:57] <Alias_> Thirdly, Wx and SQLite are becoming stable

[00:57] <Alias_> Perl as a development platform on the desktop, regardless of operating system

[00:58] <diakopter> ok

[00:58] <Alias_> As in, you can install desktop applications from CPAN that work on Windows, and Mac, and Linux

[00:58] <Alias_> We're not there yet, but we're at about early beta of that concept

[00:59] <zgh> Alias_: you got me really excited for a second.... I want desktops apps directly from CPAN!

[00:59] <Alias_> Throw in PAR to make packing and isntallation cleaner, and SQLite as a sane bundled database, add the talk-to-anything power of CPAN, and you have something interesting

[00:59] <diakopter> most markets are made.  it's very rare that market leaders emerge in markets such as biotech and cgi scripts without intensive planning/marketing.

[00:59] <Alias_> zgh: App::GUI::Notepad!

[00:59] <Alias_> zgh: It works right now on all three

[00:59] * zgh scrambles to try it

[01:00] <diakopter> my point is that perl might grow for a while, but without careful positioning, its growth rate will be limited.

[01:00] <Alias_> That's fine

[01:00] <diakopter> in other words, with some effort, growth could be improved.

[01:00] <Alias_> I'm perfectly happy with Perl occupying it's natural market share, and not overstretching itself

[01:01] <diakopter> right, b/c you have a job in it (as do I)

[01:01] <Alias_> I own a company actually that does consulting

[01:01] <diakopter> same

[01:01] <Alias_> So if everything was Perl I'd make a lot more than I do now

[01:01] <diakopter> same effect, I mean

[01:01] <Alias_> But then I'm not in a hurry to do that

[01:01] <Alias_> You don't guide and position Perl very much

[01:02] <Alias_> It's more like gardenning

[01:02] *** kanru joined
[01:02] *** frederico joined
[01:02] <diakopter> it ought to be more like biowarfare

[01:02] <Alias_> You just sort of encourage it here, and prune it there, and it grows out in every direction regardless

[01:03] <diakopter> that kind of growth is nice, but better facilitation/management of growth might be better for the long term.

[01:03] <Alias_> And what is biowarfare like? Something incredibly expensive and dangerous that everybody does, but nobody uses?

[01:03] <diakopter> or so I'm proposing

[01:03] <diakopter> such as?

[01:03] <Alias_> How would you propose managing growth?

[01:03] <Alias_> That didn't involve scaring people off by telling them what to do

[01:04] <diakopter> i'm not ready to make very concrete suggestions yet; i'm still in the talking out loud phase :)

[01:04] <Alias_> ah

[01:04] <Alias_> One can manage growth, generally by doing nothing

[01:04] <diakopter> i have some ideas, but their plausibility levels wax and wane

[01:04] <Alias_> When Perl::Critic started despite the fact I had a fledgling equivalent, I just shut the hell up and got out the way

[01:04] <diakopter> err; feasibility.

[01:05] <Alias_> And Perl::Critic has gone far further by me not "managing" it and scaring off the owners

[01:05] <Alias_> They have the control they want, I help when it's needed, and everybody wins

[01:06] <Alias_> Making people work for you when you don't pay them is hard

[01:06] <Alias_> Managing people that work for you that you don't pay is harder

[01:06] <Alias_> Generally, the only way I know how to do it is by making them work for you without even realising it

[01:07] <Alias_> i.e. Where in normal business you can have Minions, in Perl you need primarily Unsuspecting Minions

[01:07] <Alias_> There's very little in the way of active business-style management

[01:07] *** crythias joined
[01:07] <diakopter> agents on a need-to-know basis

[01:07] <Alias_> Except occasionally to stamp out bad ideas before they spread

[01:08] <Alias_> Like I said, it's a bit like gardenning

[01:08] <diakopter> pugs is a bit like biowarfare.

[01:08] <Alias_> Perl on the Desktop will happen... we're currently at Notepad sophistication, but that's improving on it's own just fine

[01:10] *** mjk joined
[01:10] <diakopter> brb; my lap-heater is about out of juice

[01:14] <diakopter> anyway.

[01:14] <mjk> how to from ....> return to pugs>

[01:15] <mjk> can help me?

[01:15] <diakopter> mjk: what do you need

[01:15] <diakopter> oh

[01:17] *** markstos joined
[01:18] <mjk> i'm learning pugs in command line, but when i input a error command(for example, print  jfklsdj ";), pugs displays ....>

[01:18] <mjk> i can't return pugs> status

[01:18] <mjk> and can't input other perl statements

[01:19] <mjk> how to return pugs>

[01:19] <diakopter> Ctrl-Z will leave pugs

[01:19] <diakopter> at least in my terminal

[01:19] *** Alias_ left
[01:19] <mjk> thanks , but no method to return pugs>

[01:20] <diakopter> well, in the case of your example,

[01:20] <diakopter> ";

[01:24] <zgh> diakopter: Ctrl-D in unix will leave pugs

[01:24] <zgh> diakopter: not that you were asking that :-)

[01:25] <diakopter> zgh: care to continue re: cpan?

[01:25] <mjk> i see

[01:25] <mjk> thanks

[01:26] <zgh> CPAN is the language, Perl is the syntax!

[01:26] * zgh cheers.

[01:50] <svnbot6> r12592 | fglock++ | v6 - fixed the 'rule' declaration;

[01:50] <svnbot6> r12592 | fglock++ | - fixed a bug in the rule "metasyntax" parser;

[01:50] <svnbot6> r12592 | fglock++ | - fixed $/, $()

[01:51] <svnbot6> r12592 | fglock++ | - implemented syntax:<categories> in the parser

[01:51] <svnbot6> r12592 | fglock++ | - new class Pugs::Grammar::P6Term - implements the 'term' syntax category in pure p6

[01:52] *** ferreira joined
[01:52] *** avarab joined
[01:55] <markstos> Here's a perhaps simple pugs bug: pugs -I seems to work like perl5, but is not listed in "pugs -h". It seems like a useful addition there.

[02:03] <markstos> Where I do I look to debug when there is a failure in the prelude? 'No compatible subroutine found: "&CGI::Application::import" at <prelude> line 63'

[02:06] *** xdg joined
[02:07] *** rashakil__ joined
[02:08] *** markstos is now known as stosbma

[02:09] <stosbma> markstos: try removing "use_ok()" from your test

[02:09] *** stosbma is now known as markstos

[02:09] <markstos> That did it! Thanks, stosbma!

[02:47] <markstos> Pugs Test.pm has some interesting  output. Notice only two test scripts actually passed, but the ultimate conclusion is that things were "166.67%" OK! (before I fixed some tests, things were 300% Okay...)

[02:47] <markstos> Failed 11/13 test scripts, 15.38% okay. -6/9 subtests failed, 166.67% okay.

[03:08] *** mako132_ joined
[03:45] <svnbot6> r12593 | clkao++ | v6 - Fix if/elsif/else.

[03:53] *** mako132_ joined
[03:54] <svnbot6> r12594 | audreyt++ | * smartlinks.pl: Implement markstos++'s suggestion

[03:54] <svnbot6> r12594 | audreyt++ |   to hide the filesystem-specific realpath in the

[03:54] <svnbot6> r12594 | audreyt++ |   filename it displays.

[03:57] <svnbot6> r12595 | audreyt++ | * Pugs.Help: markstos++ suggests -Ipath should be documented

[03:57] <svnbot6> r12595 | audreyt++ |   as part of "pugs -h".

[04:00] *** kanru joined
[04:07] *** frederico joined
[04:13] *** cooljoke joined
[04:16] *** lambdabot joined
[04:28] <xinming> hmm, I'm really sorry for what I've done, I tried 'svk push', And It seems It pushed some old files to the mirror.

[04:28] <xinming> I hope anyone who can revert this for me, as now, I don't know what to do... :-/

[04:29] <xinming> hmm, It's likely some files from fglock.

[04:32] <Khisanth> grab old version and recommit?

[04:33] <PerlJam> stop using svk?

[04:34] <xinming> PerlJam: ???

[04:34] <PerlJam> just jumping to the more radical "solution"  :)

[04:34] <xinming> Khisanth: I ever tried with my local svn server, But It seems, if you revert it, svk won't show the difference.

[04:35] <xinming> PerlJam: I wrote the test, and when I try to push it back, It seems there are many g while I push,

[04:35] <xinming> and luckily, when I saw many empty merge, I pressed C-c

[04:35] <xinming> :-P

[04:35] <Khisanth> I was thinking something like svn cat -roldrev foo > foo; svn ci foo

[04:35] <xinming> but my real content isn't pushed in.

[04:36] <xinming> I think I should check-out using svn and commit.

[04:37] <audreyt> xinming: no, there's no old files

[04:37] <svnbot6> r12598 | audreyt++ | * More third-party/ cleanup:

[04:37] <svnbot6> r12598 | audreyt++ |     System.FilePath is moved into third-party/

[04:37] <svnbot6> r12598 | audreyt++ |     and upgraded to use Neil Mitchell's maintained branch.

[04:37] <svnbot6> r12598 | audreyt++ |     Pugs.Rule.* is no more, as we are no longer forking Parsec.

[04:37] <audreyt> the merges were just svnprops

[04:37] <svnbot6> r12598 | audreyt++ |     (Four more cleanups to go before we complete the

[04:37] <svnbot6> r12598 | audreyt++ |      third-party/ move as suggested by allison++.)

[04:38] <obra> audreyt: my modinstall mirror is out of date. if schwern sent you an autoinstall patch, could you apply?

[04:38] <audreyt> xinming: try "svk push -l" maybe?

[04:38] <audreyt> obra: I don't deal in patches... he is a modinstall committer

[04:39] <obra> Thanks. I wasn't an admin, so I couldn't make that happen

[04:39] <audreyt> now you are, too

[04:39] <obra> woot

[04:39] <xinming> audreyt: when I'm in rev 12595, I push it, there are many empty merge to the svn server. :-/ I really don't know if the test is commited.

[04:40] <audreyt> xinming: it wasn't... can you try "svk push -l"?

[04:40] <xinming> audreyt: Ok.

[04:41] * audreyt just woke up... need to go 1)find food 2)vote for haskell-prime features and 3)return ti IRC

[04:41] <PerlJam> xinming: wait, you stopped the merge process when you saw an empty merge?  Just let it continue.  All "svk push -l" is going to do is not show you the empty merges :-)

[04:41] <svnbot6> r12599 | yiyihu++ |  r12615@Laptop:  xinming | 2006-08-23 12:20:52 +0800

[04:41] <svnbot6> r12599 | yiyihu++ |  Added a test for quote operators.

[04:41] <svnbot6> r12599 | yiyihu++ |  Just basic test suite, with single adverb. (q:c q:h q:b etc...)

[04:41] <svnbot6> r12598 | audreyt++ | * More third-party/ cleanup:

[04:41] <svnbot6> r12598 | audreyt++ |     System.FilePath is moved into third-party/

[04:41] <svnbot6> r12598 | audreyt++ |     and upgraded to use Neil Mitchell's maintained branch.

[04:41] <svnbot6> r12598 | audreyt++ |     Pugs.Rule.* is no more, as we are no longer forking Parsec.

[04:41] <svnbot6> r12598 | audreyt++ |     (Four more cleanups to go before we complete the

[04:41] <svnbot6> r12598 | audreyt++ |      third-party/ move as suggested by allison++.)

[04:41] <audreyt> PerlJam: peace of mind is kinda important :)

[04:42] <xinming> PerlJam: thanks.

[04:42] <PerlJam> audreyt: yeah, it did freak me out the first time I tried to "svk push" some smallish thing and got a ton of empty merges out of it.

[04:42] <PerlJam> (even though I "svk pull" all the time)

[04:43] <audreyt> it's an UI issue, indeed

[04:43] <audreyt> the current output lvel of svk is something I'd expect --verbose to do

[04:43] <audreyt> it's one of the noisest SCMs around :)

[04:43] <xinming> but the problem is, svk push is already commited something empty to the server.

[04:44] <PerlJam> xinming: not a problem.

[04:44] *** yhsuan joined
[04:44] <audreyt> xinming: yes, but that's fine

[04:51] *** yhsuan joined
[05:21] *** zgh joined
[05:29] *** zgh joined
[05:33] *** visq joined
[05:34] *** lollan joined
[05:40] *** zgh joined
[05:52] <nothingmuch> gaal: it looks like a deriviative of your utf8 patch for DBD::mysql has been applied: http://search.cpan.org/src/CAPTTOFU/DBD-mysql-3.0006_1/ChangeLog, http://rt.cpan.org/Public/Bug/Display.html?id=17829

[05:54] *** zgh joined
[06:02] *** zgh joined
[06:06] *** lambdabot joined
[06:09] *** zgh joined
[06:14] *** zgh joined
[06:15] *** agentzh joined
[06:20] *** lambdabot joined
[06:28] <gaal> nothingmuch: ah, excellent.

[06:29] <nothingmuch> gaal++

[06:29] *** zgh joined
[06:45] <beppu> Has anyone used perl5 DBI from within pugs successfully?

[06:47] *** zgh joined
[07:04] *** zgh joined
[07:04] <svnbot6> r12600 | agentz++ | [docs/feather/index.html]

[07:04] <svnbot6> r12600 | agentz++ | - added some more FAQs to feather's homepage at the request of Juerd.

[07:05] <agentzh> Juerd: will add more stuff to the page some time later. :)

[07:12] *** kanru joined
[07:16] <svnbot6> r12601 | agentz++ | [docs/feather/index.html]

[07:16] <svnbot6> r12601 | agentz++ | - changed the style sheet to search.cpan.org's.

[07:19] *** iblechbot joined
[07:35] <agentzh> where should i put the index.html in the Pugs repos for ~agentzh/syn/?

[07:35] <agentzh> i think i'd better make it editable by others. :)

[07:35] <agentzh> how about util/syn_index.html?

[07:38] *** zgh joined
[07:40] <svnbot6> r12602 | agentz++ | [docs/feather/index.html]

[07:40] <svnbot6> r12602 | agentz++ | - added notes for the pscp utility.

[07:43] <Juerd> agentzh: Thanks

[07:43] <svnbot6> r12603 | audreyt++ | * fix filepath cabal file

[07:43] <agentzh> Juerd: :)

[07:44] <Juerd> Hm, my checkout refuses to upgrade

[07:45] <Juerd> 2;0 juerd@feather:~/feather$ svk up

[07:45] <Juerd> path /home/juerd/feather is not a checkout path.

[07:45] <Juerd> It certainly was...

[07:46] <Juerd> I'll do this later then

[07:50] <wolverian> did you remove your ~/.svk ? :)

[07:52] <svnbot6> r12604 | audreyt++ | * oops, forgot to add System.Path.

[07:53] <Juerd> wolverian: Never on purpose...

[07:58] *** kane-xs joined
[08:11] *** kanru joined
[08:38] *** dvlt joined
[08:39] *** dvlt left
[08:39] <svnbot6> r12605 | agentz++ | [docs/Perl6/Spec/Functions.pod]

[08:39] <svnbot6> r12605 | agentz++ | - adjusted the title format to conform with other synopses.

[08:42] *** plisk joined
[08:44] *** kanru joined
[08:47] <wolverian> should zip still return a list of lists? maybe a list of captures instead?

[08:48] <audreyt> how is that possible?

[08:48] <wolverian> I don't know :)

[08:49] <wolverian> I suppose that means I need to read on captures before assuming things..

[08:50] <audreyt> yeah :)

[08:51] <svnbot6> r12606 | bsmith++ | Add directory and --recurse support to prove6, just like prove.

[08:59] <agentzh> http://feather.perl6.nl/~agentzh/syn/

[08:59] <lambdabot> Title: Index of /~agentzh/syn

[08:59] <svnbot6> r12607 | agentz++ | [util/smartlinks.pl]

[08:59] <svnbot6> r12607 | agentz++ | - replaced the "TITLE" dumb word at the first line in

[08:59] <svnbot6> r12607 | agentz++ |   the HTML template with "Sxx".

[08:59] <agentzh> we now have an index page.

[08:59] <agentzh> :)

[08:59] <wolverian> yay :)

[09:04] *** ruoso joined
[09:06] <agentzh> supper &

[09:06] *** agentzh left
[09:12] *** xerox_ is now known as xerox

[09:31] *** elmex joined
[09:32] *** plisk joined
[09:38] *** b00t joined
[09:46] *** plisk_ joined
[10:00] <meppl> guten morgen

[10:01] <Patterner> aloha

[10:01] *** wilx` joined
[10:02] *** buetow joined
[10:03] *** buetow joined
[10:12] <meppl> good morning patterner

[10:19] *** JarJarBi1ks joined
[10:21] *** pbuetow joined
[10:22] *** visq joined
[10:22] *** kane-xs_ joined
[10:22] *** alinbsp joined
[10:35] *** rgs_ is now known as rgs

[11:02] *** aholanda joined
[11:04] *** agentzh joined
[11:06] <agentzh> Juerd: oh, the feather homepage is not synced every 5 minutes like what it says. sigh.

[11:07] * agentzh tries to find something to do.

[11:16] <Juerd> agentzh: Indeed. My svk checkout is no longer acknowledged as an svk checkout, by svk.

[11:16] <Juerd> Also, people have added things in that directory - as root.

[11:16] <agentzh> Juerd: how about using ~audreyt/pugs?

[11:16] <Juerd> So I have to investigate if I can move those things, or change the permissions, before I re-checkout.

[11:16] <agentzh> her working copy is constantly updated by evalbot.

[11:16] <Juerd> Haven't had time yet.

[11:17] <Juerd> I'll look into this later

[11:17] <agentzh> okay. :)

[11:17] *** jferrero joined
[11:24] <svnbot6> r12608 | audreyt++ | * p6doc: Make it slightly more useful by allowing "p6doc s03"

[11:24] <svnbot6> r12608 | audreyt++ |   as synonym to "p6doc Spec::Operator".  Still need a lot of

[11:24] <svnbot6> r12608 | audreyt++ |   usability work before this can be released to CPAN to replace

[11:24] <svnbot6> r12608 | audreyt++ |   Perl6::Bible.

[11:26] <audreyt> my laptop was damaged after all; now whenever it's moved or tilted too much, it reboots (and reboots, and reboots)

[11:26] <svnbot6> r12609 | agentz++ | [util/smartlinks.pl]

[11:26] <svnbot6> r12609 | agentz++ | - removed <hr /> from the resulting HTML. so there's no "oddly big dividers" reported by wolverian++

[11:26] <audreyt> very annoying, psychologically :/

[11:26] <audreyt> plan to turn it in for repair tomorrow or the day after

[11:26] *** chris2 joined
[11:27] <audreyt> but meanwhile I'm setting up workspace in my old laptop, so will afk for a while...

[11:27] <agentzh> audreyt: simply throw that away. :)

[11:27] <audreyt> I'd do that if it's clearly broken

[11:27] <audreyt> but it appeared fine until I moved it...

[11:27] <agentzh> hehe

[11:27] <audreyt> but yeah.

[11:28] <agentzh> audreyt: is there anyone working on webpugs?

[11:28] <audreyt> no... would be lovely if you can look into it

[11:28] <agentzh> audreyt: will have a try later. :)

[11:28] <audreyt> another worthwhile task is make p6doc releasablle

[11:28] <audreyt> ooh. agentzh++

[11:29] <agentzh> :)

[11:35] *** ludan joined
[11:37] *** agentzh joined
[11:42] *** avarab is now known as avar

[11:42] * agentzh wonders if some kind person has fixed Pod::Html installed on feather since the HTML outputs there are sexier than his own.

[12:02] <svnbot6> r12610 | agentz++ | [util/smartlinks.pl]

[12:02] <svnbot6> r12610 | agentz++ | - added left margin to the code snippets. this is

[12:02] <svnbot6> r12610 | agentz++ |   indeed a long-overdue feature. :)

[12:14] <svnbot6> r12611 | agentz++ | [docs/feather]

[12:14] <svnbot6> r12611 | agentz++ | - added the ``syn'' subdir and syn/index.html which is

[12:14] <svnbot6> r12611 | agentz++ |   the index page for http://feather.perl6.nl/~agentzh/syn

[12:14] <lambdabot> Title: Index of /~agentzh/syn

[12:14] *** plisk joined
[12:16] <agentzh> not sure if i could access http://feather.perl.nl/syn/ once Juerd fixed his svk problem. :)

[12:16] <agentzh> *perl6

[12:18] *** bpphillips joined
[12:19] <Juerd> agentzh: If you want, I can give you root access.

[12:20] <Juerd> You appear to have more time available than I do

[12:20] <agentzh> Juerd: that'll be cool. :)

[12:21] <Juerd> agentzh: You may now execute commands as root by prefixing "sudo"

[12:21] <agentzh> i have plenty of time recently since i'm in my summer vocation. ;-)

[12:21] <Juerd> agentzh: Use it wisely.

[12:22] <agentzh> Juerd: thanks!

[12:22] <agentzh> I will.

[12:22] *** Aankhen`` joined
[12:24] *** yhsuan_ joined
[12:30] *** yhsuan__ joined
[12:40] <svnbot6> r12612 | agentz++ | [docs/feather/syn/index.html]

[12:40] <svnbot6> r12612 | agentz++ | - use absolute urls to make the page relocatable

[12:40] <svnbot6> r12611 | agentz++ | [docs/feather]

[12:40] <svnbot6> r12611 | agentz++ | - added the ``syn'' subdir and syn/index.html which is

[12:40] <svnbot6> r12611 | agentz++ |   the index page for http://feather.perl6.nl/~agentzh/syn

[12:40] <lambdabot> Title: Index of /~agentzh/syn

[12:49] <agentzh> Juerd: feather document root is at /var/www, aka /home/juerd/feather, right?

[12:50] *** Limbic_Region joined
[13:01] <agentzh> http://feather.perl6.nl/syn/

[13:01] <lambdabot> Title: Synopses on Feather

[13:01] <agentzh> now the url to the synopses on feather is much shorter. :)

[13:01] <agentzh> Juerd++ sudo++

[13:02] <agentzh> Juerd: i'll recover the resync magic of the feather site in my crontab if you don't mind. :)

[13:04] *** vel joined
[13:07] <agentzh> please comment on the new feather home: http://feather.perl6.nl/

[13:07] <lambdabot> Title: feather.perl6.nl

[13:10] *** frederico joined
[13:12] <agentzh> oh, it's really lovely: http://feather.perl6.nl/syn/S02.html

[13:12] <lambdabot> Title: S02

[13:12] * agentzh feels very happy.

[13:13] <gaal> agentzh++, please see /msg

[13:14] <agentzh> gaal: haven't seen your /msg. weird.

[13:14] <integral> agentzh++ # totally excellent idea

[13:14] <agentzh> inegral: thanks!

[13:15] <agentzh> *integral

[13:16] <agentzh> gaal: maybe try again?

[13:16] <integral> hmm, the double quotes in those synopses are displaying as "``" and "''" rather than “”s

[13:18] *** fglock joined
[13:34] <agentzh> integral: looking

[13:36] <agentzh> integral: that's difficult to fix. because ``'' are generated by Pod::Html. :/

[13:36] <agentzh> *is

[13:38] <agentzh> integral: err, sorry, i think they're controled by css. :)

[13:40] <agentzh> oh, no, no, no. apparently i need more coffee. i was looking at the dev.perl.org's pages...ah, yes, `` and '' are produced directly by Pod::Html.

[13:41] *** SamB joined
[13:42] <agentzh> integral: i think that's probably a *feature* rather than a bug since i'm already familiar with ActivePerl's HTMLs.

[13:42] <agentzh> ;-)

[13:42] *** buetow joined
[13:47] <integral> iirc search.cpan uses somehting like Pod::Simple::HTML which is supposedly "better"

[13:51] *** cjeris joined
[13:52] *** nothingmuch joined
[13:54] <agentzh> integral: I've looked at Pod::Simple::HTML, but didn't find how to generate an index.

[13:55] <agentzh> i really like indexes in the pages.

[13:56] <agentzh> Pod::Simple::HTML lacks documentation.

[13:57] <agentzh> okay, i've finally found the "index" interface in Pod::Simple::HTML's source code. oh well...

[13:59] <agentzh> does anyone know how to obtain the source code of search.cpan.org?

[14:20] <svnbot6> r12613 | fglock++ | v6 - update some files

[14:20] <svnbot6> r12614 | diakopter++ | fixing whitespace on my entry.

[14:20] <agentzh> integral: indeed you're correct, Pod::Simple::HTML is *very* nice.

[14:21] <agentzh> it will be perfect if its author write some more doc for their baby. :)

[14:22] <agentzh> one cannot figure out how to use it by himself without looking into the source code.

[14:32] <svnbot6> r12615 | fglock++ | v6 - minor fix in 'Term:<x>' grammar

[14:35] *** marmic joined
[14:41] <gaal> anyone remember how to limit output length of 'x' in perl -d? I know about o dumpDepth=4 but ISTR there's also a line length cap

[14:46] *** justatheory joined
[14:49] *** mdiep joined
[14:50] *** yhsuan___ joined
[14:50] *** yhsuan___ is now known as yhsuan

[14:53] <svnbot6> r12616 | agentz++ | [util/smartlinks.pl]

[14:53] <svnbot6> r12616 | agentz++ | - switched from the cumbersome Pod::Html to the cute

[14:53] <svnbot6> r12616 | agentz++ |   Pod::Simple::HTML. Thanks to integral++ for

[14:53] <svnbot6> r12616 | agentz++ |   suggesting this improvement.

[14:53] <svnbot6> r12616 | agentz++ |   a lot of HTML-related issues are now gone immediately,

[14:53] <svnbot6> r12616 | agentz++ |   and both the HTML code and the Perl 5 code look much

[14:53] <svnbot6> r12616 | agentz++ |   cleaner now. :)

[14:54] <integral> agentz++

[14:54] <agentzh> integral: thank you!

[15:00] * [particle] happily updates his working copy

[15:00] <[particle]> i've been digging into smartlinks.pl to see what parrot needs to do to use this

[15:01] <agentzh> wow...

[15:01] <agentzh> particle: is there anything that i can help?

[15:02] *** xinming_ joined
[15:02] <[particle]> believe me, i'll let you know :)

[15:02] <agentzh> great

[15:02] <[particle]> we're starting to use smartlinks in the pge tests

[15:03] <[particle]> they'll be part of the unique-id

[15:04] <[particle]> C<< #  L<S05/Bracket rationalization/capturing group> >> will appear before a group of tests related to that

[15:04] <agentzh> yes, that's exactly what we're doing within the Pugs test suite.

[15:04] <[particle]> the link will apply to all following tests, until another smartlink appears

[15:05] <agentzh> yup, smartlinks.pl uses the same rule.

[15:05] <[particle]> i want to write this in PIR

[15:05] * agentzh is amazed.

[15:06] <[particle]> which means, first i need to write a perldoc parser/emitter

[15:06] <[particle]> which, using pge/tge, isn't hard.

[15:06] <agentzh> quite right. i did that in smartlinks.pl

[15:06] <[particle]> yes, i saw that.

[15:06] <agentzh> there's a pod parser/emitter as well as a smartlink parser.

[15:06] <[particle]> are smartlinks standard perldoc (pod/kwid) format?

[15:07] <agentzh> particle: i don't think so.

[15:07] <[particle]> that's a shame. it should be valid.

[15:07] <agentzh> just the simplest form of smartlinks is standard pod.

[15:07] <agentzh> L<S04/section name>

[15:07] <PerlJam> Convince whoever is writing the new POD spec that they're needed (I think that's Damian)

[15:08] <[particle]> ingy/damian

[15:08] <agentzh> where the keyword part is omitted.

[15:08] <agentzh> good thought!

[15:08] <PerlJam> ingy is easier to get a hold of on IRC.  :)

[15:08] <agentzh> true

[15:09] <[particle]> are keywords space separated individual words, or are they phrases searched as one unit?

[15:09] <agentzh> for example?

[15:10] <[particle]> like in my example, L<S05/Bracket rationalization/capturing group>

[15:10] <[particle]> is "capturing group" searched

[15:10] <agentzh> currently, L<../../foo bar baz> results in the following regex: /foo.*?bar.*?baz.*?/

[15:10] <[particle]> or is "capturing" searched, and "group"

[15:10] <[particle]> ok

[15:11] <agentzh> to preserve the space, you need to quote them using " or '.

[15:11] <[particle]> okay, perfect

[15:11] <agentzh> L<../../"foo bar" baz/>

[15:11] <agentzh> sorry, i mean L<../../"foo bar" baz>

[15:11] <[particle]> have you thought about spec coverage reports based on smartlinks?

[15:12] <[particle]> plus todo/skip status, of course

[15:12] <agentzh> in terms of how many paragraphs in the synopses have test snippets?

[15:12] <[particle]> seeing a document highlighted all in green would make me happy :)

[15:12] <[particle]> yes

[15:13] <agentzh> hmm

[15:13] <agentzh> gaal wants to see test snippet highlighted in green while you want to see synopsis text colored in green.

[15:13] <agentzh> that's fun. :)

[15:14] <[particle]> -Ofun++

[15:14] <agentzh> at last, we shall see the whole documents are in green...

[15:14] <[particle]> green is the new orange

[15:14] <agentzh> hehe

[15:14] <agentzh> that's crazy.

[15:15] <agentzh> i'll think about that later. of course. :)

[15:15] <[particle]> of course. just let it rattle around in your brain for a while

[15:15] <agentzh> lol

[15:16] <agentzh> please let me see your PIR version of smartlinks.pl or something like that when you finished.

[15:16] <agentzh> that's damn cool.

[15:17] <[particle]> undoubtedly! but it'll take a while, as there are modules you use that haven't been written in pir yet

[15:17] <agentzh> yes!

[15:17] <agentzh> there's no PIR version of Pod::Simple::HTML, for example.

[15:17] <[particle]> indeed.

[15:18] <agentzh> particle: why not use the smartlinks.pl directly?

[15:18] <[particle]> however, once i've got an ast, writing an html emitter isn't that hard

[15:18] <[particle]> well, i could of course steal it...

[15:18] <[particle]> but where's the fun?

[15:19] <[particle]> in fact, i probably will steal it first, replacing bits until it's all pir

[15:19] <agentzh> ah, the fun part...yeah...

[15:19] <[particle]> btw your process_paragraph sub could be cleaned up a bit, i think

[15:20] <agentzh> oh?

[15:20] <[particle]> i just need to remember the correct p5regex syntax

[15:20] <agentzh> use another module to do the dirty job?

[15:20] <[particle]> well, you can do s/[LCFIB]<<(.*?)>>/$1/go;

[15:21] <[particle]> and then have two lines

[15:21] <agentzh> ah, yes. thank you.

[15:21] <agentzh> i've been silly. :)

[15:21] <[particle]> but i'm trying to think of the way to match same numbers of < >s

[15:21] <agentzh> fixing

[15:21] <PerlJam> What's with the /o ?  It won't do anything useful for that RE

[15:21] <[particle]> true, it won't

[15:22] <agentzh> just add that by habbit.

[15:22] <[particle]>  /o is a pre-5.6ism iirc

[15:22] <PerlJam> it's a bad habit IMHO

[15:22] <agentzh> okay, will change that too. :)

[15:22] <PerlJam>  /o *only* ever did something useful if there's a variable in the pattern.

[15:22] <agentzh> thank you

[15:22] <agentzh> PerlJam: true.

[15:23] <[particle]> pj: you remember the incantation to match the same number of > as < ?

[15:23] <PerlJam> (I have a bit of a prejudice against /o because once it took me quite a while to track down a bug due to /o deep inside a module I was using)

[15:23] <[particle]> so this extends to L<<<...>>> etc?

[15:24] <PerlJam> [particle]: not right off.

[15:24] *** kanru joined
[15:24] <[particle]> k

[15:26] <[particle]> can you have multiple syn-dirs?

[15:26] <agentzh> yes, perlpod allows L<<<< ... >>>>.

[15:26] <[particle]> hrmm, no. $syn_dir is scalar

[15:26] <agentzh> particle: what do you mean?

[15:27] <[particle]> i mean, i need to deal with perl6 synopses (S05 in particular) and parrot PDDs

[15:27] <agentzh> that won't be difficult to implement.

[15:28] <[particle]> no, should be straightforward

[15:28] <agentzh> heh, yes.

[15:39] *** kanru joined
[15:43] *** hexmode joined
[15:44] <integral> [particle]: m/(<+)(.*?)(>+)(??{ length($1) == length($3) ? "" : "(?!)"})/

[15:45] <integral> or: m/(<+)(.*?)((??{ my $z = $1; $z =~ y/</>/; $z }))/

[15:48] <svnbot6> r12617 | agentz++ | [util/smartlinks.pl]

[15:48] <svnbot6> r12617 | agentz++ | - cleaned up sub process_paragraph according to

[15:48] <svnbot6> r12617 | agentz++ |   the suggestion from particle++

[15:48] <svnbot6> r12617 | agentz++ | - stripped the /o regex modifiers per particle++ and

[15:48] <svnbot6> r12617 | agentz++ |   PerlJam++

[15:48] <svnbot6> r12617 | agentz++ | [util/t/smartlinks.t]

[15:48] <svnbot6> r12617 | agentz++ | - fixed a bug in the test.

[15:50] <[particle]> integral++ # the second one looks right

[15:50] <integral> the first should too! :-P

[15:51] <integral> actually, a (?!>) at the end and a (?<!<) at the beginning might also be handy

[15:51] <[particle]> the first makes it a non-capture if it doesn't match length?

[15:51] <integral> makes it fail, yes

[15:52] <[particle]> backtrack and continue or fail the entire regex?

[15:52] <integral> backtrack and continue

[15:52] <[particle]> s/regex/match/

[15:52] <[particle]> ah, then that'll work too :)

[15:52] <integral> so that's why you need some anchoring at the front and back

[15:56] *** JarJarBi1ks is now known as JarJarBinks

[16:00] *** penk joined
[16:01] *** kanru joined
[16:02] *** agentzh joined
[16:05] *** rlb3 joined
[16:05] <agentzh> integral: surprisingly your second regex causes my activeperl 5.8.7 to crash. :/

[16:05] <integral> excellent! I guess it's the y/// being nested :-/

[16:05] <TimToady> agentzh: if you want to make the ordering of the keywords independent, then you can put each of them inside (?=^.*keyword) and turn them all into lookaheads.

[16:06] <agentzh> TimToady: actually i pretty like the ordering of the keywords is significant. :P

[16:06] <TimToady> (I do this when searching my radical dictionary...)

[16:07] <TimToady> it's unexpected if you call them "keywords" though.

[16:07] <agentzh> hmm, right.

[16:07] <agentzh> thank you, and i'll switch to the new semantics soon. :)

[16:08] <TimToady> or differentiate ordered keywords syntactically

[16:08] <TimToady> a b c|d e f

[16:08] * agentzh stares at the line.

[16:09] <TimToady> or a.b.c d.e.f

[16:09] <TimToady> or something

[16:09] <agentzh> *nod*

[16:09] <TimToady> the latter makes unordered the default, but the . is unobtrusive

[16:09] <TimToady> and really stands for .*?

[16:10] <TimToady> and manages to match a literal dot

[16:10] <TimToady> if they happen by accident

[16:10] <agentzh> yeah, that's much more intuitive.

[16:11] <TimToady> course "a b c" can still be literal

[16:11] *** kanru joined
[16:11] <TimToady> or use .. for "followed by"

[16:11] <TimToady> or ... is almost English

[16:11] <agentzh> L<xx/xx/"i don't".."know".."if I really like it">

[16:12] <TimToady> for 'something left out here'

[16:12] <agentzh> L<xx/xx/'but it'...seems...'good now'>

[16:12] <agentzh> hmm, '...' is just a bit long.

[16:13] <agentzh> while '.' is too easy to be confused by perl's string concatenation operator ".".

[16:13] <agentzh> so '..' is okay, i think.

[16:14] <agentzh> indeed they're not truly "keywords" in the common sense.

[16:14] <[particle]> how about something using perl6 syntax

[16:14] <TimToady> so maybe it would be better to not call them keywords and keep a b c ordered

[16:14] <agentzh> furthermore, we can have "true" keywords by using spaces as the word separator.

[16:15] <TimToady> and use .. for omissions and | for alternation

[16:15] <[particle]> ordered words, search anchors,

[16:15] <[particle]> (instead of keywords)

[16:15] <agentzh> yes, we need a better name for it.

[16:15] <TimToady> keyphrases?

[16:16] <agentzh> sounds good. :)

[16:16] <[particle]> i lik it

[16:16] <[particle]> huffman++

[16:16] <agentzh> hehe

[16:16] <TimToady> I think space should still imply at least \s+ so that you don't have to worry about reflowing paragraphs

[16:17] <agentzh> i just want to keep the keyphrases' syntax as simple as possible.

[16:17] *** iblechbot joined
[16:17] <TimToady> maybe even .*? still to ignore X<<...>>-ish things

[16:17] <agentzh> TimToady: X<<...>> currently is stripped by smartlinks.pl.

[16:18] <TimToady> I'm fine with current .*? meaning

[16:18] <agentzh> me too.

[16:18] <agentzh> i think the problem is just the name "keyword"

[16:18] <TimToady> *nod* and the non-capability of starting over at the front for independent words

[16:18] <agentzh> so keyphrases may fix all the problems. :)

[16:19] <TimToady> maybe just allow additional /phrase chunks and AND them.

[16:20] <TimToady> (using the (?=^.*?...) trick

[16:20] <agentzh> oh, what's that?

[16:21] <[particle]> are the keyphrases bordered by \b ?

[16:21] <TimToady> using lookahead to start over.  Or you can just do separate searches.

[16:21] <agentzh> particle: currently not.

[16:22] <TimToady> maybe space should imply .+? rather than .*?

[16:22] <agentzh> *nod*

[16:22] <agentzh> fixing

[16:23] <agentzh> fixed

[16:23] *** chaoslawful joined
[16:24] <agentzh> i'm worried about the use of \b since the keyphrases are not necessarily \w+

[16:25] <TimToady> only put the \b if the front or back is \w?

[16:25] <agentzh> good point!

[16:25] * agentzh is happy.

[16:28] *** rashakil joined
[16:28] *** Psyche^ joined
[16:28] * TimToady wanders off... &

[16:39] * agentzh finds TimToady's suggestions very interesting.

[16:39] *** Psyche^ is now known as Patterner

[16:41] <agentzh> TimToady: btw, i really like the (?=^.*?) trick in general. :)

[16:41] *** xinming_ is now known as xinming

[16:43] *** jferrero joined
[16:45] <svnbot6> r12618 | agentz++ | [util/smartlinks.pl]

[16:45] <svnbot6> r12618 | agentz++ | - replaced .*? with .+? when concatenating

[16:45] <svnbot6> r12618 | agentz++ |   keyphrases. TimToady++

[16:51] <svnbot6> r12619 | agentz++ | [util/t/smartlinks.t]

[16:51] <svnbot6> r12619 | agentz++ | - updated the unit tests to reflect the .*? ==> .+?

[16:51] <svnbot6> r12619 | agentz++ |   change.

[16:52] <obra> audreyt: can you release a new Module::Install?

[16:56] *** chaos joined
[17:02] *** kanru joined
[17:06] <audreyt> kane-xs_: M::AutoInstall now checks PERL5_CPANPLUS_IS_RUNNING.

[17:06] <svnbot6> r12620 | agentz++ | [util/smartlinks.pl]

[17:06] <svnbot6> r12620 | agentz++ | - added \b to the resulting regexes of each keyphrase

[17:06] <svnbot6> r12620 | agentz++ |   if it starts or ends with /\w/.

[17:06] <svnbot6> r12620 | agentz++ | [util/t/smartlinks.t]

[17:06] <svnbot6> r12620 | agentz++ | - updated the unit tests to reflect this change.

[17:06] <kane-xs> audreyt++

[17:06] <kane-xs> this is a good first step.. i'll aim for something even more indicative in the future (ie, telling you what file is currently being run or somesuch)

[17:09] <svnbot6> r12621 | agentz++ | [t/README]

[17:09] <svnbot6> r12621 | agentz++ | - s/keyword/keyphrase/g

[17:09] <svnbot6> r12622 | fglock++ | * v6 - fixed $/<x>() and $/{'x'}()

[17:12] <svnbot6> r12623 | agentz++ | [util/t/smartlinks.t]

[17:12] <svnbot6> r12623 | agentz++ | - s/keyword/keyphrase/g

[17:13] <agentzh> Juerd: is there anyway to run sudo via cron?

[17:14] <audreyt> why would you want to sudo

[17:14] <audreyt> ?

[17:17] <audreyt> obra: M::I 0.64 is up.

[17:19] <obra> tx

[17:19] <agentzh> audreyt: because i have to write to feather's document root.

[17:19] <agentzh> copy files to /var/www...

[17:19] <audreyt> don't do that... let your dir be ln'ed into it

[17:20] <TimToady> symlink out instead?

[17:20] <TimToady> apache will generally let you follow symbolic links by default, I think

[17:20] <agentzh> ah, yes!

[17:20] <audreyt> and if not, ask Juerd to turn that option on in httpdconf

[17:21] <TimToady> or in the .htaccess if you want to limit the capability to a single directory.

[17:21] <TimToady> (can be so limited in the httpd.conf too)

[17:21] <agentzh> thanks!

[17:22] <audreyt> np :) *goes back to attempted sleep*

[17:23] <agentzh> it's 1:20 AM or so at audreyt's place. :)

[17:23] <TimToady> 2 or 3 for you?

[17:24] <agentzh> i'm in the same timezone as her.

[17:24] <TimToady> ah so you're only slightly insane

[17:24] <agentzh> :)

[17:24] <agentzh> usually i go off at 9:00 PM.

[17:24] <TimToady> I thought your connection usually shut down at night?

[17:24] <agentzh> tonight is an exception.

[17:24] <agentzh> because Juerd has assigned root access to me. :)

[17:25] <agentzh> TimToady: right.

[17:26] <TimToady> planning to turn feather into a Chinese spambot while Juerd isn't looking, are you?  :)

[17:28] <agentzh> TimToady: certainly not. :)

[17:29] <ayrnieu> or a Chinese gold-farmer?

[17:29] * agentzh is still unfamiliar with simlinks.

[17:30] <TimToady> cd /fake/location; ln -s /where/it/really/is/truename fakename

[17:30] <ayrnieu> agentzh - what bothers you about them?

[17:30] <agentzh> TimToady: thanks :)

[17:31] <agentzh> ayrnieu: i'm setting up feather's document root.

[17:31] <TimToady> if fakename is the same as truename you can just put . instead of fakename

[17:31] <PerlJam> agentzh: for smartlinky goodness?

[17:31] <ayrnieu> ( also, ln -s /where/nothing/actually/is fakename ; and ln -s ../../might/be/the/same fakename )

[17:31] <agentzh> PerlJam: sure but more.

[17:31] <agentzh> TimToady: trying now...

[17:33] *** prefiks joined
[17:35] <agentzh> Unix's symbolic links are very charming. :)

[17:35] <agentzh> saddly there're no such things on wondows. :(

[17:36] <gaal> there were hard links in FAT

[17:36] * agentzh didn't know that.

[17:37] <gaal> AKA cross-linked clusters :)

[17:37] <gaal> it was considered an error

[17:37] <gaal> "it's a bug, not a feature"

[17:37] <agentzh> i think i've heard that in my college textbooks. :)

[17:38] <agentzh> but not quite sure.

[17:38] <gaal> agentzh: unix's hard links are very charming too

[17:38] <gaal> they mean for example that it's fine to delete an open file.

[17:38] <gaal> you're actually "unlink"ing it, not deleting it

[17:38] <agentzh> my instructor ever told us to compare symbolic links and hard links in english.

[17:39] <gaal> the filesystem reclaims space just when the last reference is removed.

[17:39] <gaal> ah, okay, so you know about all this stuff :)

[17:40] <agentzh> gaal: still quite fuzzy, since i've never tried out them in practice. :)

[17:40] <ayrnieu> (incidentally, all files are 'hard links'.  Even symbolic links are 'hard links'.)

[17:40] <gaal> TimToady: on my ln, you can even drop the '.' if fakename is  is the same as truename

[17:40] <ayrnieu> but, geez, a reference counting mechanism?  GC's are very efficient these days :-)

[17:41] *** alinbsp joined
[17:41] <gaal> disks being what they are, you can be assured of eventual global destruction

[17:43] *** Southen joined
[17:43] <agentzh> oh, help! Juerd has redirected /var/www to /home/Juerd/feather. How can i change that to ~audreyt/pugs/docs/feather?

[17:43] <buubot> heave!

[17:44] <gaal> agentzh: redireted, with ln? sec, logging in

[17:44] <agentzh> k

[17:44] <svnbot6> r12624 | fglock++ | * Pugs::Compiler::Rule - 'regex' closures are emitted by v6.pm, if it is available

[17:45] <agentzh> also, please redirect /var/www/syn to ~agentzh/public_html/syn...

[17:45] <agentzh> not sure if it's possible...anyway...

[17:47] <gaal> 1. fixed

[17:47] <agentzh> gaal: what command did you use?

[17:47] <gaal> 2. in principle yes, but not with the actual dir being a working copy

[17:48] <agentzh> gaal: no problem. 2 is trivial.

[17:48] <gaal> agentzh: sudo ln -s /home/audreyt/pugs/docs/feather/ /var/www

[17:48] <gaal> agentzh: I had to 'sudo rm /var/www' first

[17:48] <agentzh> gaal: thanks!

[17:48] <agentzh> ah

[17:48] <gaal> you can also use -f on ln

[17:48] <agentzh> -f means force?

[17:49] <gaal> but only do that when you're sure you know what you're doing.

[17:49] <gaal> yes.

[17:49] <agentzh> okay

[17:49] <agentzh> forget about 2.

[17:49] <agentzh> i have a better way to do that now.

[17:49] <agentzh> :)

[17:49] <gaal> okay :)

[17:49] <agentzh> gaal++

[17:50] <agentzh> i can finally go to sleep soon. :)

[17:50] <gaal> good night soon :)

[17:51] <agentzh> gaal: i was getting the error "File exists" when ln'd them.

[17:51] <agentzh> so ``rm'' is very important.

[17:51] <gaal> yes, because '/var/www' existed. hennce the rm/-f

[17:51] <agentzh> got it. :)

[17:52] <gaal> be very, very careful with 'rm' when root. there's no easy undelete. :)

[17:52] * agentzh is shamed to keep asking extremely basic questions on #perl6.

[17:52] <agentzh> gaal: i hear that. :)

[17:53] *** zgh joined
[17:53] <gaal> agentzh: my first O'Reilley book was "Unix Power Tools". I think I still have the copy somewhere. It's really recommended, although by now probably outdated.

[17:53] <gaal> see if you can find a copy!

[17:54] <agentzh> thank you! i'll take a look!

[17:54] <gaal> (there was a brief section -- maybe a page or two? -- saying Perl rocks but that there was no room in the book for it, and that I should look out for the (then pink) Programming Perl volume. Turned out to be pretty good advice...

[17:55] *** Limbic_Region joined
[17:55] <gaal> )

[17:56] <ayrnieu> I'd imagine subtitles on many of its other sections with the text "If you already know Perl, you can probably safely skip to the next section."

[17:56] *** Eidolos joined
[17:57] <agentzh> perl++

[17:57] <gaal> not necessarily; it wasn't a programming book per se. It had nifty things like notifying you when your boss logged in and stuff like that. Wow, I miss the unix era

[17:58] <gaal> I mean when everybody used to log on to the same box

[17:59] <gaal> ^ today that seems really trivial, like while who | grep, sure, but it was lots of fun when I first read it

[17:59] <gaal> anymoose enough nostalgia!

[17:59] <ayrnieu> there are still such systems :-)  with thin clients and whatnot.

[18:00] <agentzh> in our lab, we students still have to log onto the same box in order to try out UNIX. :)

[18:00] <gaal> networks with .rhosts eq '+ +'...

[18:00] <agentzh> it's fun to see the big old machine runs out of resource every 1 hour or so... :)

[18:01] *** zgh joined
[18:01] <agentzh> i remember i even wrote a perl 4 script for the instructor to cleanup the shared resources with force.

[18:01] <agentzh> or they'll have to restart the machine. :)

[18:03] *** spoop joined
[18:03] <agentzh> at that time, everyone in the lab was appreciating the power of perl. :)

[18:06] *** zgh joined
[18:11] *** zgh joined
[18:11] <svnbot6> r12625 | fglock++ | v6 - 'sub term:<a> {b}' compiles to $::_V6_GRAMMAR::term{'a'}

[18:14] <svnbot6> r12626 | agentz++ | [docs/feather/syn/index.html]

[18:14] <svnbot6> r12626 | agentz++ | - used relative urls in links.

[18:14] <svnbot6> r12626 | agentz++ | - made the page a bit pretty.

[18:16] *** zgh joined
[18:16] *** rindolf joined
[18:21] <agentzh> i'd point /var/www to my ~agentzh/feather.

[18:22] *** zgh joined
[18:23] <agentzh> because i need to generate synopses into /var/www/syn/ without sudo.

[18:25] <TimToady> well, stealing all of /var/www might be construed as antisocial, so I'd just symlink /your/location/of/syn to /var/www/syn

[18:29] <agentzh> TimToady: thinking...

[18:29] <agentzh> TimToady: but there's also a syn/ under audreyt's working copy.

[18:30] *** zgh joined
[18:30] <agentzh> that's the problem.

[18:30] <agentzh> or just remove syn/index.html from the pugs repos.

[18:31] <agentzh> okay

[18:31] <agentzh> will do

[18:31] <rindolf> Hi TimToady

[18:31] <agentzh> so /var/www will still points to ~audreyt/pugs/docs/feather.

[18:33] <integral> hmm, I remember mentions of packrat parsing in here last year sometime,  anyone know why pugs didn't go with it?

[18:35] *** zgh joined
[18:35] <agentzh> integral: Audrey said there were already not much bracktracking in the Perl 6 parser so packrat parsing is not very beneficial.

[18:35] <agentzh> *was

[18:35] <integral> ah, thanks :)

[18:36] <agentzh> np :)

[18:38] <svnbot6> r12627 | agentz++ | [docs/feather]

[18:38] <svnbot6> r12627 | agentz++ | - moved syn/index.html to syn_index.html

[18:38] <svnbot6> r12627 | agentz++ | - removed the syn subdir so that i won't have to steal

[18:38] <svnbot6> r12627 | agentz++ |   the whole /var/www. TimToady++

[18:41] <svnbot6> r12628 | fglock++ | v6 - some fixes to category parser/emitter

[18:42] *** zgh joined
[18:49] <fglock> why do categories need names like 'term:<...>' instead of ':term<...>' ?

[18:50] *** zgh joined
[18:55] *** zgh joined
[18:55] <agentzh> yay, so http://feather.perl6.nl/~agentzh/syn and http://feather.perl6.nl/syn effectively share the same directory now.

[18:55] <lambdabot> Title: Index of /~agentzh/syn

[18:56] <agentzh> symbolic links++

[18:57] <agentzh> Juerd: the feather homepage is automatically updated every few minutes again. thanks to gaal++'s help. :)

[18:57] <Juerd> agentzh: Maybe it's nice to add a timestamp to the smartlinked synopses

[18:57] <Juerd> agentzh++ gaal++

[18:57] <agentzh> Juerd: there's a timestamp in the form of HTML comments. :)

[18:57] <Juerd> agentzh: In the synopses, at the top; in the index, just after the second paragraph

[18:58] <Juerd> agentzh: I think it's best if the timestamp is very apparent, so people immediately notice it if it gets out of date. You won't be watching it this closely forever, probably :)

[18:58] <agentzh> Juerd: okay. will add that tomorrow...

[18:58] <Juerd> Thanks

[18:58] <agentzh> 2:56 AM here... :)

[18:58] <Juerd> Whoa

[18:58] <Juerd> Go to bed, you

[18:58] <agentzh> sleep now &

[18:58] *** agentzh left
[18:58] <Juerd> Good night :)

[19:02] *** zgh joined
[19:07] *** ilogger2 joined
[19:08] <svnbot6> r12629 | fglock++ | * v6 - merge ( grammatical categories + Data::Bind )

[19:08] <TimToady> fglock: infix:<x>() would call the infix operator, whereas :infix<x>() would attempt (infix => 'x').()

[19:10] <TimToady> in addition term: forces compile-time evaluation of the "subscript", I think, while :term{$x} wouldn't.

[19:10] <TimToady> but whether or not it does that, I think it conveys the intent to the reader much better

[19:11] <TimToady> also adverbs are allowed in places where terms aren't

[19:13] <TimToady> also it would potentially break the autoquoting of => if it had to look on the left for syntactic categories.

[19:13] <TimToady> and if it didn't do that, we'd have to explain why :infix was different from infix=>

[19:14] <fglock> TimToady: so it is meant to parse as adverb postcircumfix

[19:14] <fglock> s/<ws>/plus/

[19:16] <fglock> is infix: => 'or' valid syntax?

[19:18] <fglock> such as: (infix: => 'x').()

[19:18] *** kanru joined
[19:18] <fglock> or even: (infix:<x>).() ?

[19:20] <fglock> or [ (infix:<x>) ] @a

[19:25] <fglock> coffee time here &

[19:34] <TimToady> syntactic categories have nothing at all to do with pair notation

[19:35] <TimToady> they're only a way to extend function names to sneak non-identifier characters into the name.

[19:36] <TimToady> infix:<stuff>() is exactly like foo() as far as usage goes.

[19:37] <TimToady> the magic of making sure "stuff" ends up in the infix table only happens at declaration time.

[19:37] <TimToady> (or equivalently, import time)

[19:38] <TimToady> so (infix:<x>).() is no good in the same way that (foo).() is no good if you wanted to call foo()

[19:38] <TimToady> if you want a reference, you have to say &infix:<x>, just as with &foo

[19:39] <TimToady> excuse me, a Code object.  :)

[19:40] *** jferrero joined
[19:51] <fglock> TimToady: thanks

[19:54] *** peterpiper joined
[19:56] *** peterpiper left
[19:58] *** lollan joined
[20:10] *** renormalist joined
[20:21] *** mdiep joined
[20:24] *** bernhard joined
[20:31] *** Khisanth joined
[20:33] <svnbot6> r12630 | fglock++ | * v6 - Pugs::Grammar::P6Term compiles!

[20:35] * Eidolos begins building Pugs..

[21:03] *** vel joined
[21:03] *** rindolf joined
[21:03] *** xinming joined
[21:03] *** justatheory joined
[21:03] *** marmic joined
[21:03] *** ludan joined
[21:03] *** weinig|away joined
[21:03] *** buu joined
[21:03] *** awwaiid joined
[21:03] *** Juerd joined
[21:03] *** Grrrr joined
[21:03] *** marcus_ joined
[21:03] *** clkao joined
[21:03] *** Yappo joined
[21:03] *** obra joined
[21:03] *** Frances joined
[21:03] *** LCamel joined
[21:03] *** notsri joined
[21:11] *** mdiep joined
[21:19] *** Revision17 joined
[21:36] <svnbot6> r12631 | markstos++ | Link index page to the very useful "Differences" document, and also add a comment that it would

[21:36] <svnbot6> r12631 | markstos++ | be nice to auto-HTMLize this page as well.

[21:39] *** cognominal joined
[21:40] *** Khisanth joined
[21:42] <svnbot6> r12632 | markstos++ | Improve the titles on syn_index.html. I don't care were the content is stored, I care what it is.

[21:44] *** Alias_ joined
[21:44] <Alias_> audreyt: ping?

[21:44] <Alias_> The CPANPLUS_IS_RUNNING change is a mistake

[21:44] <Alias_> (to M:I)

[21:45] *** diakopter joined
[21:45] <Alias_> Because PERL5_CPANPLUS_IS_RUNNING does not actually mean that CPANPLUS is running

[21:45] <Alias_> It reports false positives in some situations

[21:48] *** markstos joined
[21:52] *** diakopter joined
[21:53] *** renormalist joined
[21:55] *** mdiep_ joined
[22:03] <svnbot6> r12633 | markstos++ | Add a smart link to Differences.pod, in hopes that someone will make it work someday.

[22:06] <svnbot6> r12634 | markstos++ | Add mention of Global variables to Differences.pod, with another hopeful smart link...

[22:28] *** mdiep joined
[22:33] *** autark joined
[22:36] *** mdiep_ joined
[22:49] *** explorer__ joined
[22:52] <clkao> win 4

[23:00] *** larsen joined
[23:01] *** Bit-Man joined
[23:16] *** marksto1 joined
[23:19] *** KxAx joined
[23:19] *** eden_c joined
[23:32] <Alias_> clkao: Just to chase you up again, any thoughts after our YAPC::NA conversation on the idea of a svk gui?

[23:32] <Alias_> Are you interested? Should I be waiting? Is it just on the low priority list?

[23:34] <clkao> it's to be prioritised

[23:36] *** eden_c left
[23:36] <Alias_> meaning... that it is pre-triage, and you have no idea if it will be done sooner or later, but it will probably be done?

[23:36] <obra> I think "many people would like it, but many people would like a pony"

[23:37] <Alias_> Well, "everyone on Windows" is included in the "many" :)

[23:37] <Alias_> But I agree, it's a pretty luxurious feature

[23:37] <Alias_> high work certainly

[23:38] <Alias_> So my answer is "Maybe, but don't expect it any time soon"

[23:38] <Alias_> ?

[23:40] *** KxAx left
[23:42] <obra> We've talked to at least one customer about it but aren't currently comissioned to develop it

[23:53] *** hexmode joined
[23:57] <svnbot6> r12635 | lwall++ | Now reports "not ok" for when backticks throws exception.

[23:57] <svnbot6> r12635 | lwall++ | File finder now rejects filenames containing /-p5/.

[23:58] <svnbot6> r12635 | lwall++ | (Should look in files for 'use v6', really...)

