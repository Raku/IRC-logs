[00:06] *** crapulous joined
[00:15] *** jiing left
[00:15] *** silug joined
[00:16] *** jiing_ is now known as jiing

[00:34] *** unobe_away is now known as unobe

[00:41] *** unobe is now known as unobe_away

[00:52] *** hexmode joined
[00:56] *** irc joined
[01:02] *** dolmans joined
[01:09] *** Bit-Man joined
[01:22] *** rodi joined
[01:27] *** justatheory joined
[01:28] <clkao> nothingmuch: ping

[01:30] <clkao> nothingmuch: your tea is on the way. but the post office said it might take longer due to the war...

[01:32] <dolmans> clkao: which war, war in M.E or ww3?

[01:33] <clkao> are they not the same?

[01:33] <dolmans> not yet

[01:33] <clkao> nothingmuch: i was quite amused reading the mail from my friend.. describing what the postoffice said.

[01:33] <clkao> "we just want tea, and now somehow it involves war!"

[01:33] <obra> ?

[01:34] <audreyt> well that happened in Boston some time ago...

[01:38] <meppl> gugu

[01:41] <meppl> gugu audrey (im drunken again)

[01:43] *** dolmans_ joined
[02:00] *** dolmans joined
[02:10] * rodi wants to have a Boston oolong party

[02:12] *** irc left
[02:16] *** Southen_ joined
[02:20] *** amnesiac joined
[02:28] *** Steve_p joined
[03:00] <bennymack> the Shat hit's the fan!

[03:00] <bennymack> william shatner doing standup?!

[03:15] *** nictuku joined
[03:23] <nothingmuch> clkao: that's trajically amusing

[03:23] <nothingmuch> thank you!

[03:23] * nothingmuch goes back to bed

[03:29] *** Vspirit joined
[03:44] *** agentzh joined
[03:44] * agentzh ...

[03:47] *** neoesque joined
[04:16] *** agentzh joined
[04:27] *** buubot joined
[04:36] *** esammer joined
[04:49] *** jiing_ joined
[05:15] *** agentzh joined
[05:22] * agentzh goes to read S05, which is the most exciting part of Perl 6.

[05:31] *** weinig|away is now known as weinig|sleep

[05:40] *** agentzh joined
[05:42] <agentzh> gaal: i've completed the download process. feel free to remove that from feather. btw, the original XML file seems to be hundreds of GB or such. what can i do with it please?

[05:44] *** agentzh left
[05:45] *** iblechbot joined
[06:17] *** wilx joined
[06:52] *** Aankhen`` joined
[07:02] *** dduncan joined
[07:07] *** elmex joined
[07:08] <dduncan> fyi, I have now arrived back at home following OSCON

[07:09] <dduncan> assuming no $job distractions of significance, I expect to commit a Set::Relation rewrite that actually works within a week's time

[07:09] <dduncan> that is all

[07:09] *** dduncan left
[07:13] *** mtve joined
[07:13] *** tup joined
[07:15] *** Southen joined
[07:18] *** nirgle joined
[07:33] *** Southen__ joined
[08:03] *** Southen joined
[08:03] *** Bit-Man joined
[08:07] *** linsu joined
[08:10] *** linsu left
[08:15] *** iblechbot joined
[08:17] *** elmex joined
[08:22] *** larsen joined
[08:26] *** szbalint joined
[08:47] *** Southen__ joined
[09:02] *** Southen_ joined
[09:07] *** bernhard joined
[09:15] <dolmans> how will the perl6 coroutine (block in ruby) be?

[09:20] *** b_jonas joined
[09:20] *** Nouk joined
[09:43] *** daxim joined
[09:43] <daxim> hey barenaked @larries

[09:44] *** chris2 joined
[10:12] *** IRCMonkeyx joined
[10:13] <IRCMonkeyx> hi friends, what is difference between perl and perl6 , may i run the same exploits in both ?

[10:16] *** marmic_ joined
[10:18] *** pkrumins joined
[10:18] *** pkrumins left
[10:21] <dolmans> difference is too big that i can not say

[10:25] <IRCMonkeyx> !perl6

[10:26] *** ludan joined
[10:28] <IRCMonkeyx> dolmans: i interest in running exploits in perl, may i use perl6 instead of perl

[10:34] <daxim> yes

[10:39] *** agentzh joined
[10:46] <agentzh> ?eval proto prefix:<;> ($a) { say "yay!" } ;3

[10:46] *** evalbot_11813 is now known as evalbot_11820

[10:46] <evalbot_11820> 3

[10:47] <agentzh> ?eval proto postfix:<;> ($a) { say $a } ;3;

[10:47] <evalbot_11820> OUTPUT[3 ] Bool::True

[10:47] <agentzh> ?eval proto postfix:<;> ($a) { say "!a = $a!" } ;3+2;

[10:47] <evalbot_11820> OUTPUT[!a = 2! ] 4.0

[10:48] <agentzh> where does "4.0" come from?

[10:48] *** asz joined
[10:48] <agentzh> ?eval proto postfix:<;> ($a) { say "!a = $a!" } ;'abc' x 2;

[10:48] <evalbot_11820> OUTPUT[!a = 2! ] "abc"

[10:49] <agentzh> ?eval proto prefix:<;> ($a) { say "!a = $a!" };'abc' x 2;

[10:49] <evalbot_11820> "abcabc"

[10:49] *** b_jonas joined
[10:50] <agentzh> fglock: it seems that i can define a postfix:<;> in pugs while a prefix:<;> doesn't have any effect. :)

[10:50] <agentzh> ?eval proto postfix:<;> ($a) { say "!a = $a!" } ;3+2;

[10:50] <evalbot_11820> OUTPUT[!a = 2! ] 4.0

[10:51] <agentzh> okay, now i see why there is a "4.0" at the end. the say function returned 1 in the case of "2;"

[10:51] *** Yaakov_ joined
[10:51] <agentzh> pugs++

[10:53] <daxim> ?eval 3+2

[10:53] <evalbot_11820> 5

[10:53] <daxim> hm.

[10:53] <agentzh> ?eval proto postfix:<;> ($a) { 1 } say 3+2;

[10:53] <evalbot_11820> OUTPUT[4 ] Bool::True

[10:53] <agentzh> see? 3+2; == 4 !

[10:53] <agentzh> yay!

[10:54] <daxim> isn't that cute... but it's wrong! </two_stupid_dogs>

[10:54] <agentzh> postfix:<;> apparently has a higher precedence over infix:<+>

[10:55] <agentzh> ?eval proto infix<;> ($a, $b) { $a+$b } say 3 ; 2

[10:55] <evalbot_11820> Error:  unexpected "<" expecting "::", comment, "handles", bare trait, subroutine parameters, trait or block

[10:55] <agentzh> ?eval proto infix:<;> ($a, $b) { $a+$b } say 3 ; 2

[10:55] <evalbot_11820> OUTPUT[5 ] Bool::True

[10:55] <agentzh> wow...awsome indeed!

[10:55] <agentzh> *awesome

[10:56] <agentzh> fglock: infix:<;> overriding also works!

[10:56] *** tup joined
[10:56] <b_jonas> agentzh: that reminds me of overriding , in c++

[10:57] <agentzh> but Perl 6's much more powerful!

[10:57] <agentzh> in C++, one can't override C<;>

[10:57] <b_jonas> yes

[10:58] <b_jonas> but look at this:

[10:58] <pasteling> "b_jonas" at 81.182.25.192 pasted "overriding the comma operator in c++ in a program that compiles in c and c++ but differently" (10 lines, 334B) at http://sial.org/pbot/18692

[10:59] <agentzh> b_jonas: it looks scary to me.

[10:59] <agentzh> some new stuff in the new C/C++ standards?

[11:00] <b_jonas> no, it's nothing new I think

[11:00] <b_jonas> in C it doesn't override anything

[11:00] <agentzh> i didn't know C can override operators

[11:00] <b_jonas> it can't

[11:00] <b_jonas> in C that override declaration parses completely differently

[11:00] <b_jonas> should I explain it?

[11:01] <agentzh> yes, please

[11:02] <b_jonas> ok, let's start with what C sees

[11:02] <agentzh> ah, i see!

[11:02] <b_jonas> the trick's in line 3

[11:02] <agentzh> operator is parsed as a C variable, right?

[11:02] <b_jonas> yes

[11:03] <agentzh> :=)

[11:03] <agentzh> "operator" is not a keyword in C, yes!

[11:03] <b_jonas> so c sees just struct { struct hypergeom fooperator, number; } function;

[11:03] <agentzh> nod

[11:04] <agentzh> it's somewhat confusing at first glance. ;-)

[11:04] <b_jonas> yes, it's written like that

[11:05] <agentzh> thanks for the funny code

[11:05] <b_jonas> it was a reply to when a friend wrote codes that ran in multiple languages but with slightly different output

[11:05] <b_jonas> wait, I'll link that

[11:05] <agentzh> okay!

[11:05] *** asz joined
[11:06] <agentzh> it sounds amusing

[11:06] <b_jonas> bottom of http://www.inf.bme.hu/~pts/index__en.html

[11:06] <lambdabot> Title: pts oldalai

[11:06] <agentzh> looking...

[11:06] <b_jonas> and http://www.perlmonks.com/?node_id=521141 too

[11:06] <lambdabot> Title: a poem

[11:07] <b_jonas> no wait the second link's bad

[11:07] <b_jonas> a variant of the code at the first link was posted on perlmonks

[11:08] <agentzh> aye

[11:08] <agentzh> thanks for the link!

[11:08] <b_jonas> uh where was it

[11:08] *** larsen joined
[11:08] <agentzh> i should add them to my google notebook. ;-)

[11:09] <b_jonas> anyway he's showed me some sneaky ways to distinguish between c and c++ like that

[11:09] <agentzh> a program that can be accepted by so many different interpreters/compilers is really interesting

[11:09] <b_jonas> one's using scoping rules, one's using the fact that struct tags are optional in c++, these are similar ideas and I think this one's based on one of them as well

[11:10] <agentzh> heh

[11:10] <b_jonas> so then I tried to find other ways

[11:10] <b_jonas> one's this operator thing

[11:10] <agentzh> maybe i should show them to my classmates and mentors

[11:11] <b_jonas> I tried to find one using types that are built in one but not the other (there's one in either direction) but I failed

[11:11] <b_jonas> but all the solutions I knew used "sizeof" somewhere

[11:11] <b_jonas> I tried to find one without sizeof but failed again

[11:11] <agentzh> sizeof?

[11:11] <b_jonas> and asked him and he could create one without sizeof

[11:11] <b_jonas> agentzh: yes, it's in both my code and the partridge poem

[11:12] <b_jonas> just search for it

[11:12] <agentzh> gotcha

[11:12] <agentzh> the difference between C/C++ structs leads to different behavior

[11:12] <agentzh> *behaviors

[11:13] <b_jonas> oh, I mean the "On the first day of Christmas..." one not the "The program that speaks ten languages" btw

[11:14] <agentzh> there're a lot of sizeof's in these programs. :=)

[11:14] <b_jonas> yes. the sizeofless solution is also based on the scopig difference

[11:15] <agentzh> *nod*

[11:19] <b_jonas> I can't find the perlmonks post now sorry

[11:19] * agentzh is still wondering why prefix:<;> doesn't work as expected in pugs

[11:19] <agentzh> b_jonas: np :)

[11:21] <agentzh> thank you for showing me these programs. that's very funny

[11:21] <agentzh> i'll print them out and examine them carefully. :=)

[11:26] <agentzh> can anyone here access svn.perl.org?

[11:27] <agentzh> it's down i think

[11:29] <agentzh> there's no tests for overriding prefix:<;>, infix:<;>, or postfix:<;> in t/. should i add some?

[11:31] <agentzh> TimToady, audreyt: please clarify the expected behaviors of overriding `;` first, or i have no way to judge whether my tests are correct or not.

[11:34] <Juerd> agentzh: I forgot one line in my mail, making it look way too serious... Happy hacking! :)

[11:34] <agentzh> Juerd: sure!

[11:38] *** b_jonas joined
[11:52] *** agentzh joined
[11:53] <agentzh> ?eval proto infix:<;> ($a, $b) { $a + $b } say 3 ; 2

[11:53] <evalbot_11820> OUTPUT[5 ] Bool::True

[11:53] <agentzh> ?eval proto infix:<;> ($a, $b) { $a + $b } say (3 ; 2)

[11:53] <evalbot_11820> OUTPUT[5 ] Bool::True

[11:54] <agentzh> ?eval proto infix:<;> ($a, $b) { $a + $b } (3 ; 2) eq 5

[11:54] <evalbot_11820> Bool::True

[11:54] *** Aankhen`` joined
[11:55] *** hexmode joined
[12:04] <agentzh> anyone knows how to restrict a multi definition within a lexical scope?

[12:04] <agentzh> or is it possible?

[12:05] <Aankhen``> my multi foo { ... } # doesn't this work?

[12:05] <agentzh> i'll try. thanks!

[12:06] <b_jonas> uh. can you override just one prototype of multi foo lexically, or just a complete set of multis?

[12:07] <agentzh> Aankhen``: yay! the tests pass now! thank you!

[12:07] <Aankhen``> Cool.

[12:07] <Aankhen``> You're welcome. :-)

[12:07] <agentzh> b_jonas: no clue :(

[12:08] <dolmans> how to implement a grep function which eats a code block and an array, test_grep { $_ > 1 } @a?

[12:08] <agentzh> i've just found a conversation among fglock, audreyt, and pmichaud. they were talking about weird things like infix:<;> and infix<if> in details

[12:09] <agentzh> dolmans: test_grep { $_ > 1 }, @a

[12:09] <agentzh> dolmans: the comma i think is mandatory

[12:10] <dolmans> ya

[12:10] <agentzh> sub test_grep (Code &block, @list) { ... }

[12:10] <b_jonas> because you can lexically override just one multi in c++ but that's because there multis are dispatched compile-time. it'd probably be more difficult in perl6 as there they're somtimes dispatched run-time, aren't they?

[12:11] <agentzh> dolmans: see the decl above

[12:11] * dolmans giving agentzh's snippets a shot

[12:12] <agentzh> b_jonas: yes

[12:13] <agentzh> dolmans: what do you mean please?

[12:15] <dolmans> agentzh: i just test your solution, it worked, great.

[12:15] <agentzh> dolmans: yay!

[12:26] *** douglashunter joined
[12:30] *** agentzh joined
[12:33] <svnbot6> r11821 | agentz++ | [t/operators/operator_overloading.t]

[12:33] <svnbot6> r11821 | agentz++ | added (passing) tests for overriding infix:<;>, postfix:<;>, and infix:<if>. (TimToady: please check the sanity)

[12:38] *** agentzh joined
[12:39] *** agentzh joined
[12:40] *** agentzh joined
[12:41] *** agentzh_ joined
[12:43] *** agentzh joined
[12:44] <agentzh> according to audreyt's remarks on 2006-04-18, infix:<;> and infix:<if> can be overridden by the user:

[12:44] <agentzh> http://colabti.de/irclogger/irclogger_log/perl6?date=2006-04-18,Tue#l604

[12:44] <lambdabot> Title: #perl6 2006-04-18,Tue

[12:47] <agentzh> does anyone think that there should be a synbot (synopses bot) around here? so that we can refer to the language spec quickly

[12:47] <nothingmuch> infix if?

[12:47] <nothingmuch> hmm

[12:47] <nothingmuch> that would be nice

[12:47] <agentzh> nothingmuch: yes

[12:47] <nothingmuch> s 03 pattern?

[12:47] <nothingmuch> 1 if 4 ?

[12:47] <agentzh> maybe

[12:47] <pmichaud> ...infix:<if> ?  I thought it was statement_modifier:<if>

[12:48] <agentzh> but i think we should add "tags" or "keywords" to synopses

[12:48] <agentzh> or we will only find too much crap

[12:48] <nothingmuch> agentzh: look at how the test/syn cross reference stuff works

[12:48] <nothingmuch> we can put little superscript 't' links everywhere

[12:48] <nothingmuch> that's a good start

[12:48] <agentzh> pmichaud: so you think it's incorrect to define infix:<if>?

[12:49] <pmichaud> if isn't really "infix", since only one can occur in a statement

[12:49] <agentzh> nothingmuch: yes, i see the HTML pages from gaal

[12:49] <pmichaud> 3 if 4 if 5    <-- error, I think

[12:50] *** elmex joined
[12:50] <agentzh> pmichard: so user can define his infix:<if> anyway?

[12:50] <agentzh> pmichaud: given that there's no more than 1 if in the statement?

[12:51] <pmichaud> well, if someone defines infix:<if>, it will probably hide statement_modifier:<if>

[12:51] <agentzh> pmichaud: yes

[12:51] <agentzh> that's what S04 says i think

[12:51] * pmichaud notes that S02 shows statement_modifier:<if>

[12:52] <pmichaud> (S04 doesn't seem to say anything about infix vs statement_modifier)

[12:52] <pmichaud> (nor would I expect it to :-)

[12:55] *** mauke_ joined
[12:59] *** agentzh joined
[12:59] <agentzh> sorry, IRC faiure :(

[13:00] <agentzh> pmichard: why don't you expect it to?

[13:00] <agentzh> pmichaud: why don't you expect it to?

[13:00] <agentzh> pmichaud: i think the synopses should clarify this, or i can't write meaningful tests

[13:00] <pmichaud> because defining infix:<if> would be veryrare

[13:01] <pmichaud> I don't know that the synopses should describe what happens in every case where someone chooses to override a default behavior :-)

[13:01] <agentzh> so S04 should outlaw this thing?

[13:01] <agentzh> pmichaud: okay, got you

[13:01] <pmichaud> no, it's not outlawed, it's just not common enough to warrant describing

[13:02] <pmichaud> we'll save it for "Truly Evil Perl 6 Hacks" or something like that

[13:02] <pmichaud> :-)

[13:02] <agentzh> hence, we should not add a test infix:<if> in pugs's test suit?

[13:02] <agentzh> should we?

[13:03] <pmichaud> I think that infix:<if> is incorrect, so we shouldn't test for it

[13:03] <agentzh> OK

[13:03] <agentzh> then how about infix:<;> and postfix:<;> ?

[13:03] <pmichaud> those should be tested for, yes, those are valid operators

[13:03] <agentzh> and prefix:<;> ?

[13:04] <nothingmuch> agentzh: i suggest you use e.g. feather + screen + irssi if you want to keep history when your dialup goes away

[13:04] <agentzh> do you think prefix:<;> should be tested?

[13:04] <pmichaud> (at least, infix:<;> should be tested)

[13:04] <pmichaud> I haven't seen a postfix:<;> or prefix:<;> -- I wouldn't expect those to be defined

[13:04] <agentzh> nothingmuch: thanks

[13:04] *** elmex_ joined
[13:05] <agentzh> maybe ask larry to define them?

[13:05] <pmichaud> why?

[13:05] * agentzh is kidding

[13:06] <pmichaud> oh.  I agree it sometimes *looks* like we're defining every combination :-)

[13:06] * pmichaud still hasn't gotten used to prefix:<=>  :-)

[13:06] <agentzh> prefix:<=> is the iterating operator, no?

[13:07] * agentzh grins

[13:07] <agentzh> pmichard: thanks for the clarification :)

[13:07] <pmichaud> yes, prefix:<=> is iterator

[13:08] <pmichaud> agentzh: anytime

[13:08] <agentzh> *pmichaud/

[13:08] <pmichaud> agentzh: btw, you've been doing a great job on the synopsis updates

[13:08] <agentzh> pmichaud: :)

[13:08] <agentzh> pmichaud: thanks!

[13:08] <pmichaud> looks like it's time for me to board plane soon

[13:08] <pmichaud> be back tomorrow

[13:08] <agentzh> pmichaud: have a nice trip!

[13:10] *** mauke_ is now known as mauke

[13:11] *** cog joined
[13:12] <agentzh> nothingmuch: what do you think of adding tags or keywords to every part (or even every paragraph in some cases) of the synopses?

[13:13] <agentzh> so tests can be specified with defined tags

[13:14] <agentzh> and the cross-references between the tests and the synopses can be more friendly

[13:14] <svnbot6> r11822 | dug++ | - Added a test for multiline comments extended POD syntax

[13:14] <svnbot6> r11822 | dug++ | - Added self to AUTHORS

[13:50] * agentzh thinks pugs' Test.pm should be improved a bit

[13:58] *** vsoni joined
[14:00] *** agentzh joined
[14:02] *** ivanfrey joined
[14:05] *** bcorn joined
[14:08] *** ivanfrey is now known as Dr_Pi

[14:14] <agentzh> can anyone tell me why END {...} doesn't run at all in Test.pm? weird.

[14:14] *** xinming joined
[14:16] *** bernhard joined
[14:18] <agentzh> audreyt: END {...} in ext/Test/lib/Test.pm doesn't run (even without the .pm.yml stuff).

[14:18] <agentzh> audreyt: however, a simple abc.pm with an END block works fine here. weird.

[14:19] *** [particle] joined
[14:19] * agentzh gives up debugging Test.pm

[14:20] <agentzh> hopefully this issue will vanish automatically tomorrow morning. :)

[14:21] <agentzh> seen audreyt

[14:21] <jabbot> agentzh: audreyt was seen 12 hours 35 minutes 6 seconds ago

[14:21] <agentzh> thanks, jabbot

[14:23] *** buetow joined
[14:29] <svnbot6> r11823 | agentz++ | [t/operators/operator_overloading.t]

[14:29] <svnbot6> r11823 | agentz++ | reverted the tests for postfix:<;> and infix:<if> (tests for infix:<;> and prefix:<if> remain intact)

[14:29] <svnbot6> r11823 | agentz++ | added clarification from pmichaud++ as comments

[14:35] *** penk joined
[14:37] *** buetow joined
[14:38] * agentzh runs "nmake test-js" for the first time in his life.

[14:39] *** cognominal joined
[14:43] <agentzh> the JS backend seems to segfault on Win32. :-/

[14:45] *** tsatsos joined
[14:46] <dolmans> i can use `sort &infix:<cmp>, @a; ' to sort an array, so how can i reverse the &infix:<cmp> function to get a reversed sorted array. i just didn't remember the 'reverse function' jargon on FP.

[14:55] <dolmans> ah yes, implement one this sort of function transformer is easy. wonder perl6 would provide some or not.

[14:59] *** tsatsos left
[15:00] <agentzh> dolmans: perl6 provides a "reverse" builtin anyway :-)

[15:01] <agentzh> dolmans: reverse sort &infix:<cmp>, @a

[15:01] <agentzh> dolmans: though it's not very efficient

[15:03] <dolmans> agentzh: that's not what exactly i want. i want a function transformer not a list reverser.

[15:03] <agentzh> dolmans: yes, i know

[15:04] <dolmans> something like sub reverse_func (&bf) { -> $a, $b {&bf($b, $a)} };

[15:04] <agentzh> i haven't seen such function transformers in Perl 6

[15:04] <agentzh> does prefix:<-> work?

[15:05] <dolmans> not tested, but trying now

[15:05] <agentzh> IIRC, infix:<cmp> returns -1, 0, and 1

[15:05] <agentzh> ?eval 'a' cmp 'b'

[15:05] *** evalbot_11820 is now known as evalbot_11823

[15:05] <evalbot_11823> -1

[15:05] <agentzh> ?eval 'b' cmp 'a'

[15:05] <evalbot_11823> 1

[15:05] <agentzh> ?eval 'a' cmp 'a'

[15:05] <evalbot_11823> 0

[15:06] <dolmans> nope.

[15:06] <agentzh> ?eval sort { - ($^a cmp $^b) }, 'a'..'b'

[15:06] <evalbot_11823> ("b", "a")

[15:06] <gaal> -> \$ab { -(cmp(*$ab)) } # when captures work

[15:06] <gaal> probably the outer parens are not needed

[15:07] <agentzh> ?eval sort { - ($^a cmp $^b) }, ('a'..'b')

[15:07] <evalbot_11823> ("b", "a")

[15:07] <agentzh> ?eval sort { - ($^a cmp $^b) }, ('a'..'d')

[15:07] <evalbot_11823> ("d", "c", "b", "a")

[15:07] <agentzh> yay!

[15:08] <agentzh> ?eval sort { -cmp($^a,$^b) }, ('a'..'d')

[15:08] <evalbot_11823> Error: No such sub: "&cmp"

[15:08] <gaal> we can call this reverse comparator pmc for *yet another* meaning

[15:08] <agentzh> gaal: how big is the XML file please?

[15:09] <agentzh> i think my program is lying to me

[15:09] <gaal> agentzh: probably 5 gb or so?

[15:09] <dolmans> pmc? very cute and perish.

[15:09] <agentzh> pmc has too much meanings...

[15:09] <agentzh> *too many

[15:10] <agentzh> gaal: thanks

[15:10] <agentzh> gaal: my program told me the file is hundreds of GB this morning

[15:10] <agentzh> gaal: i was really frightened. ;-)

[15:11] <agentzh> gaal: i've already got it. feel free to remove the file from feather

[15:11] <gaal> agentzh: see /msg :)

[15:12] *** b_jonas joined
[15:14] *** xinming joined
[15:19] <nothingmuch> gaal: moose

[15:19] <gaal> nothingmuch: elk

[15:19] <nothingmuch> thanks again for hosting us

[15:19] <gaal> sure thing!

[15:19] <gaal> next time s/could be longer

[15:20] <nothingmuch> aye

[15:20] *** agentzh joined
[15:22] <agentzh> when i added outputing code outside of the END {...} in ext/Test/lib/Test.pm, i could see the outputs when running tests

[15:23] <agentzh> but if i inserted "warn..." into END {...} itself, i couldn't see any outputs then

[15:32] <agentzh> what is the command to run pugs' PIR backend?

[15:33] <agentzh> okay, i've found that in Makefile

[15:34] <agentzh> woot! prove6 supports the --pir and its alias --parrot options now

[15:36] <agentzh> the PIR backend fails some tests on my machine. probably it's caused by my outdated parrot. ;-)

[15:42] <svnbot6> r11824 | agentz++ | [util/prove6]

[15:42] <svnbot6> r11824 | agentz++ | added support for the --pir option and its alias --parrot:

[15:42] <svnbot6> r11824 | agentz++ |   util/prove6 --pir t/some-dir/*.t

[15:43] <agentzh> please test util/prove6. :)

[15:47] <agentzh> sleep &

[15:48] *** agentzh left
[15:57] *** xinming joined
[16:40] *** cdpruden joined
[16:51] <nothingmuch> audreyt: YAML::Syck seems to emit Headless in a funny way (indentation issues)... if I fix in the next day or two is it OK to just release

[16:52] *** elmex joined
[16:53] *** elmex_ joined
[16:53] <audreyt> sure

[16:53] <audreyt> make sure to not include mugwump's new test in the release

[16:54] <audreyt> that -hooks.t need to be replaced with DDS_freeze based impl

[16:56] <nothingmuch> okay

[16:56] <nothingmuch> btw

[16:57] <nothingmuch> i'd also like YAML::Node in a separate dir

[16:57] <nothingmuch> dist

[16:57] <nothingmuch> so that people can create YAML::Node apis to their modules

[16:57] <nothingmuch> that work with either YAML or YAML::Syck

[16:57] <nothingmuch> the purpose being pretty printing output

[16:57] <nothingmuch> when writing files that are supposed to be for humans i'd like to sometimes explicitly choose what quoting style to use, for example

[17:02] <obra> Hi

[17:04] *** weinig|sleep is now known as weinig

[17:07] *** justatheory joined
[17:09] <b_jonas> I don't like the YAML module because it's definitely not compatible with the ruby YAML module and I belive the ruby one is closer to the specs

[17:10] <b_jonas> but there's some hope it'll improve as older versions often couldn't even read what they wrote out

[17:12] <obra> b_jonas: you mean YAML.pm?

[17:12] * obra seems to recall that YAML.pm predated the spec

[17:14] <b_jonas> yes, the perl5 thing on cpan

[17:15] <b_jonas> maybe it has, I don't know, but if I can't use them to transfer data between two languages then there's no point in using it

[17:15] <b_jonas> if I just want to serialize something for a single language, there are better alternatives

[17:15] <b_jonas> but you can blame me because I should write bug reports about it

[17:15] <b_jonas> and I'm lazy to do that

[17:16] <b_jonas> so it's also my fault

[17:16] <obra> YAML::Syck should treat you better, though, as it uses libsyck

[17:16] <obra> Written by none other than why himself

[17:16] <b_jonas> oh. thanks, I might try that

[17:16] <obra> no problem

[17:17] <audreyt> b_jonas: also ingy updated YAML.pm a bit so it's more compat

[17:17] <audreyt> but definitely YAML::Syck with ImplicitTyping on

[17:17] <b_jonas> let me see if I have the newest version...

[17:17] <audreyt> should behave exactly the same as the Ruby one

[17:17] <audreyt> because it's the same code.

[17:18] <b_jonas> is it? does the ruby one use libsyck as well?

[17:19] <audreyt> yes.

[17:19] <audreyt> libsyck is written for ruby core :)

[17:19] <audreyt> (bbl, food)

[17:20] <b_jonas> no, I have 0.58 installed and the newest is YAML-0.62 it seems

[17:20] <b_jonas> thanks

[17:29] *** chris2 joined
[17:29] *** larsen_ joined
[17:37] <nothingmuch> hmm

[17:37] <nothingmuch> i can't reproduce my bug

[17:40] <nothingmuch> vely odd

[17:41] <nothingmuch> ingy: ping

[17:47] *** Southen joined
[17:58] <nothingmuch> http://scsys.co.uk:8001/3045

[17:58] <lambdabot> Title: perl_web paste from "nothingmuch" at 81.29.65.220...

[17:58] <nothingmuch> audreyt: please see what you think

[17:58] <nothingmuch> IMHO YAML::Syck is more correct here

[18:39] *** bernhard joined
[18:52] *** justatheory joined
[19:44] *** tup joined
[20:24] *** macroron joined
[20:31] *** traecer joined
[20:38] *** stevan joined
[20:55] <svnbot6> r11825 | fglock++ | pX/Pugs-Compiler-Rule - added static capture count to Regex; needs additional runtime work

[21:07] *** weinig joined
[21:13] *** iblechbot_ joined
[21:18] *** coderhasan joined
[21:25] <svnbot6> r11826 | fglock++ | pX/Pugs-Compiler-Rule - fixed an extra capture in quantified Regex

[21:29] *** coderhasan left
[21:58] *** xinming joined
[22:11] *** aufrank joined
[22:16] <aufrank> hey all

[22:17] *** kanru joined
[22:23] *** larsen joined
[23:18] *** kanru joined
[23:35] *** coderhasan joined
[23:36] *** coderhasan left
[23:49] *** chris2 joined
[23:56] *** apple-gunkies joined
