[00:03] *** dduncan joined
[00:07] <putter> Hmm.  Prim.hs thinks reduce -->List, but S29 has it --> Scalar, which seems more plausible.

[00:07] <putter> luqui:  multi Array::join (@values,   Str $delimiter --> Str )  is another one which should perhaps be @values :

[00:14] <putter> good night all &

[00:31] *** pfenwick joined
[00:41] *** theorbtwo joined
[00:46] *** offby1 joined
[00:47] *** daja77 joined
[00:55] *** hcarty joined
[00:57] *** lisppaste3 joined
[01:05] *** hcarty left
[01:14] *** bsb left
[01:23] *** Cryptic_K joined
[01:38] *** Ovid joined
[01:38] *** wilx joined
[01:52] *** revdiablo joined
[02:11] *** Amnesiac joined
[02:27] *** vel joined
[02:41] *** petdance joined
[02:46] *** petdance joined
[02:57] *** avar joined
[03:13] *** petdance left
[03:27] *** vishku joined
[03:48] <meppl> guten morgen

[03:52] <dduncan> $acknowledgement

[03:52] *** luqui joined
[04:09] *** putter joined
[04:10] <putter> luqui: ping?

[04:12] <luqui> pong

[04:13] <luqui> er, putter, pong

[04:17] <putter> hi luqui.  I had another question about S29draft.pod, that I wasnt sure enough about to declare a typo.

[04:17] <luqui> shoot

[04:17] <putter> should this

[04:17] <putter>  multi Array::grep (@values,   MatchTest $test   --> Lazy )

[04:17] <putter> be

[04:18] <putter>   multi Array::grep (@values:   MatchTest $test   --> Lazy )  

[04:18] <luqui> again, my own reservations about the multiness of grep etc. aside, yes

[04:18] <putter> ? ( , -> : )

[04:18] <luqui> hmmm... that multi seems just to be declaring a method

[04:19] <luqui> in which case my reservations don't apply ;-)

[04:19] <putter> ok, thanks.  there were several like that that.  Prim.hs also uses an invocant.

[04:19] <luqui> makes sense

[04:20] <putter> so your reservations are for declaring the global subs multi?

[04:20] <luqui> yeah

[04:20] <luqui> in fact, IMO most builtins should not be multi

[04:21] <putter> because on can $old_value := &foo;  sub foo { ... $old_value() } ?

[04:21] <putter> s/on/one/

[04:21] <luqui> more tersely spelled "wrap", but no

[04:21] <luqui> the reason is because if you want a different behavior for "say", you should import a different "say"

[04:21] <luqui> defining different global multis is like overriding CORE::GLOBAL::*...

[04:23] <putter> (which can be very useful in ruby, great for metaprogramming, but not the thing for large systems)

[04:23] <luqui> well, the thing is, in ruby do you ever need to do it at runtime?

[04:23] <luqui> perl 6 gives you so much control at compile time that such things shouldn't be necessary at runtime

[04:23] <putter> in ruby, you do _everything_ at runtime ;)

[04:24] <luqui> oh, right, I think I remember hearing about that

[04:24] <luqui> admittedly I don't have a very strong argument against them

[04:24] <luqui> but it's just the "in control" feel that I like to have

[04:25] <luqui> the difference between map @foo: {...}  and map {...} @foo  should not be decided at runtime

[04:25] <luqui> based on the types of @foo and {...}; that's much more like overloading than like multi dispatch

[04:26] <putter> "define method" is a regular function.  very flexible.  ruby now my favorite metaprogramming language, above p5 and CL.  p6 will take 1st place as long as its "staticness" doesnt turn out an unavoidable burden.

[04:26] <putter> hmm...

[04:27] <luqui> well please argue if you see us going too far on the static side

[04:28] <putter> one reason to do a ruby frontend soon is to turn up any problems as we go along.

[04:29] <putter> re, map, what about additional args?  map @foo:{...},FrobMap   that have an ok feel?

[04:30] <luqui> what does that mean?

[04:31] <luqui> just passing args to the map method?

[04:32] <luqui> that's okay.  i'm just saying that map @foo: {...}  and  map {...} @foo  should desugar to either the exact same thing or calls to two different functions

[04:32] <putter> having a map/2 (array, code adverb, plus extra bit) without stomping on the existing map/1.  (numbering args looks odd when some of them are optional named args...)

[04:32] <luqui> but map @foo: {...}, FrobMap is just @foo.map({...}, FrobMap)

[04:32] <luqui> it's hard to explain I suppose

[04:32] <luqui> it's the difference between "implementation selection" and "meaning selection"

[04:33] <luqui> multis, IMO, are for the former alone

[04:33] <luqui> if you want the same name to mean two different things (a dubious practice in the first place), it should be a compile time selection

[04:34] <putter> err, I thought :{...} was just an adverb.  so map @a :{}  _is_ the same as map :{} @a.  no?  does it become a method call at some poing?  putter squints and scratches head.

[04:34] <putter> s/poing/point/

[04:35] <luqui> do you see a colon in the second form?

[04:35] <luqui> also, the colon in the first form isn't an adverbial colon, it's an indirect object colon

[04:35] <luqui> (yes, colons are very overloaded)

[04:35] <putter> ahh.

[04:36] <luqui> the reason those two maps mean different things is because the first one means "map the second arg over the first" and the second means "map the first arg over the second"

[04:36] <luqui> it seems like you picked up on that already

[04:36] <luqui> anyway... </rant>

[04:38] <putter> so map @a: {}  === @a.map({})  but map {} @a ... err, how does that parse without a comma?  {} taken as implicit adverbial?  (feel free to punt discussion at any point - this is just non-bottlenecking curiosity on my part)

[04:39] <luqui> commas are implicit around blocks

[04:39] <luqui> in a very handwavey sort of way

[04:43] <putter> ah.  so to rephrase to check my understanding, the issue is  f($x: $y) and f($x, $y) shouldnt call distinct versions of the same (multi) function f.  yes?

[04:43] <luqui> uh, yeah, that's the specific case of my complaint

[04:44] <luqui> the more general case is that multis shouldn't be used to do meaning selection

[04:44] <luqui> but anyway, gtg

[04:44] * luqui &

[04:44] <putter> bye luqui

[04:44] <putter> tnx for your help

[04:46] *** offby1 left
[04:48] <putter> hmm, anyone:  f($x) is different than f($x : ) , yes?   (another S29draft oddity)

[04:49] <dduncan> okay, so I just sent to CPAN the (presumably) final versions of the Rosetta framework from the first / pre-rewrite code base

[04:49] <dduncan> just in time for friday the 13th

[04:49] <dduncan> whenever Pugs 6.2.11 goes out, I'll publish the first release of the second major code base, concurrently to it

[04:52] <putter> luqui: re f($x: $y) vs f($x, $y), I think it will be interesting to see if people are confused by it in practice.  if I was in "scheme mindset", then of course they should be normalized/minimized.  but an advantage of perl over scheme, is there are a lot more "hooks" to shoehorn in what you need to do.  so I end up

[04:52] <putter> reluctant to give up hooks in p6 without knowing what keeping them will cost.  random thought.

[04:52] <putter> dduncan++

[04:53] * putter is finding reading Apple announcements strange...  "hey, Rosetta!  oh, wait, no again."

[04:53] <putter> ;)

[04:53] <dduncan> I hear thta

[04:53] <dduncan> that

[04:54] <dduncan> Apple probably won't mention theirs after a year or two, as its usefulness fades when apps are universalized

[04:54] <dduncan> heck, I don't know for sure, but they may have just killed their Mac OS 9 compatability environment

[04:55] <dduncan> at least, I heard it won't run on the intel machines, though I don't see why not

[04:55] <dduncan> BlueBox should be emulatable like any other Mac OS X app for PPC

[04:56] <dduncan> I know many people still have 9 apps that were never nativeized, like games

[04:56] <putter> hmm...   ah.

[04:57] <putter> err, do optional arguments need to be declared with ? now even in the presence of a default?  ie, is sub f($x = 3)  ok?   (more S29draft oddities)

[04:58] <putter> or only sub f($x? = 3)  ?

[05:10] <svnbot6> r8655 | putter++ | docs/AES/S29draft.pod - tweaks.

[05:10] <svnbot6> r8655 | putter++ | Some Array methods were using "," instead of ":" - fixed.

[05:10] <svnbot6> r8655 | putter++ | Adjusted whitespace for alignment in some signatures.

[05:10] <svnbot6> r8655 | putter++ | Finished off luqui's conversion of CALLER::<$_> to $+_ .

[05:10] <svnbot6> r8655 | putter++ | QUESTION: some arguments with default values end in "?", others not.  Is this a typo?  Eg, f($x = 3) vs f($x? = 3).

[05:11] <avar> $ perl -CO -le '$_=shift;s/\D//g;print chr hex' $(perl -CA -e 'printf "U%x\n", ord shift' ≠)

[05:11] <avar> ≠

[05:12] <avar> does perl 6 have an easy way to do the former thing?

[05:12] <avar> I.e. an in-place s/// that returns the mutated string

[05:12] <avar> pseudocode: print shift ~~ s/..

[05:12] <luqui> avar, specced is $string.subst(/pattern/, "replacement"/

[05:14] <avar> guess that kind-of-works

[05:14] <avar> b.t.w. is pugs -e 'say shift' arg not supposed to work?

[05:14] <avar> shift @ARGS does 

[05:23] <putter> avar: not sure, sorry.

[05:25] *** Bit-Man joined
[05:26] <putter> actually, I do know.  fiddled with its code earlier today. :)  shift defaults to the caller's @_.  unless in a global context @ARGS is somehow magically @_ (it may be, I just don't know), then shift() won't get you shift(@ARGS).

[05:27] *** vel left
[05:30] <putter> luqui, anyone: S29draft has Array::grep etal in the List section.  That's just to keep them next to List::grep, and they are really Array methods, yes?

[05:37] *** rantanplan_ joined
[05:55] *** gugod joined
[05:55] *** comet^ joined
[05:55] *** clkao joined
[05:55] *** LCamel joined
[05:55] *** kcwu joined
[05:55] *** buu joined
[05:55] *** arguile joined
[05:55] *** ingy joined
[05:55] *** mtve joined
[05:55] *** typester joined
[05:55] *** Grrrr joined
[05:55] *** hcchien joined
[05:55] *** integral joined
[05:55] *** gaal joined
[05:55] *** jiing joined
[05:55] *** calvin__ joined
[05:56] *** geoffb joined
[05:56] *** sahadev joined
[05:56] *** obra joined
[05:56] *** spinclad joined
[05:56] *** tcliou joined
[05:57] *** pasteling joined
[05:58] *** miyagawa joined
[06:00] *** Jooon joined
[06:00] *** sky joined
[06:00] *** dvtoo joined
[06:00] *** xern joined
[06:20] <svnbot6> r8656 | putter++ | src/PIL/misc/prelude/ - more fun converting Prim.hs to p6 for piln.

[06:20] <svnbot6> r8656 | putter++ | Array.pm - Added additional methods.  Now parses.  Still some TODOs.

[06:20] <svnbot6> r8656 | putter++ | Lazy.pm - Begun.

[06:20] <svnbot6> r8656 | putter++ | Extra eyeballs encouraged.

[06:27] <putter> good night &

[06:29] <gaal> night putter! morning #perl!

[06:30] <gaal> s/l/l6/

[06:30] <gaal> foundry is slooooow

[06:32] *** iblechbot joined
[06:44] <dduncan> gaal, I agree, and it has been for a week plus

[06:53] <svnbot6> r8657 | Darren_Duncan++ |  r1950@Darren-Duncans-Computer:  darrenduncan | 2006-01-13 22:51:09 -0800

[06:53] <svnbot6> r8657 | Darren_Duncan++ |  /ext/Rosetta : in Rosetta.pm, removed placeholder class Rosetta::Interface::fubar

[07:01] *** elmex joined
[07:17] <dduncan> it seems that Pug's version fetching code is busted ... with all the current updates, it says the version is 8580

[07:17] <dduncan> perhaps this means that it broke after r8580

[07:19] <dduncan> er, actually I will try a make clean et al and try again, since smoke says some people's are still working

[07:19] <dduncan> maybe

[07:20] * gaal ChangeLoggeth

[07:27] <dduncan> a quick look in my system with svk info etc, and looking at version_h.pl, indicates that nothing changed in the version handling parts

[07:30] *** lisppaste3 joined
[07:32] *** Debolaz joined
[07:32] <dduncan> so everything is right up to and including the setting of pugs_version.h ; that file contains the right version

[07:32] <dduncan> but the compiled pugs does not

[07:32] <dduncan> maybe this is a make clean issue ... or a build bug

[07:34] <dduncan> did make realclean, now trying rebuild ...

[08:17] *** vishku left
[08:23] <gaal> I'm taking a break from changelogging

[08:23] <svnbot6> r8658 | gaal++ | ChangeLog towards release - got to r8131; doesn't include objectspace stuff

[08:23] <gaal> audreyt + stevan: I have ignored MM/OS stuff completely, please update yourselves

[08:24] <gaal> everyone: please check your changes haven't slipped

[08:24] <gaal> bbiab &

[08:50] *** integral left
[09:27] * audreyt woke up from a 16+ hours sleep with a terribly starved stomach

[09:29] * audreyt downloads the backlog and went out for some food... bbiab

[09:33] *** elmex joined
[09:42] *** ilogger2 joined
[09:51] *** G2 joined
[09:51] *** meppl joined
[09:56] *** bernhard joined
[09:57] *** iblechbot joined
[10:04] *** r0nny joined
[10:10] *** kanru joined
[10:13] <dduncan> the clean rebuild seems to have worked; pugs now displays the correct version

[10:14] *** cognominal joined
[10:26] <svnbot6> r8659 | Darren_Duncan++ |  r1956@Darren-Duncans-Computer:  darrenduncan | 2006-01-14 02:20:29 -0800

[10:26] <svnbot6> r8659 | Darren_Duncan++ |  small ChangeLog correction; moved items from Updated Modules to New Modules

[10:42] *** GeJ joined
[10:42] *** kane_ joined
[10:48] *** xinming joined
[10:51] <kane_> audreyt: codebase1 down for scheduled maintenance, but not up as expected -- no ETA yet, just FYI

[10:53] <dduncan> well, naptime for me, but I should be back in about 10 hours

[11:10] *** chris2 joined
[11:19] <gaal> rehi

[11:20] <audreyt> rerehi

[11:20] <gaal> yo audreyt!

[11:20] <audreyt> gaal++ # chglogging

[11:20] <audreyt> yo!

[11:21] <gaal> plans for release?

[11:21] <audreyt> I ate too much and am feeling sleepy again... *pout*

[11:21] <gaal> aw :)

[11:21] <audreyt> plans for release is to work on Emit.PIR a bit

[11:21] <audreyt> till we regain 01-sanity

[11:21] <audreyt> and PGE

[11:22] <audreyt> and then chase down test failures

[11:22] <gaal> okay. I'm out of ideas re: multi export :-(

[11:22] <audreyt> any outstanding regressions? multiexport?

[11:22] <audreyt> ok, will fix that first in the testfail batch then. which test should I look for?

[11:22] <gaal> ext/Algorithm-bucket or other; anything that does "skip".

[11:23] <gaal> I left comments in the code with what I'd tried.

[11:23] <audreyt> 'k

[11:23] <gaal> I'll continue chlogging

[11:23] <audreyt> that'd be lovely

[11:23] <gaal> only ~500 rs to go :)

[11:24] <audreyt> oh btw, have you sent me the invitation letter?

[11:24] <gaal> cripes, no, sorry

[11:24] <audreyt> I'm going to book airplane ticket and work on visa next week

[11:24] <audreyt> 'sok

[11:24] <gaal> Ah I need a fax/snailmail address too

[11:25] <audreyt> msged

[11:25] <gaal> got it, thanks :)

[11:26] <audreyt> :)

[11:28] * audreyt starts a smoke run in the bg

[11:28] * gaal fixes his colinux to have more ram and not die with evacuate errors 60% into the smoke :(

[11:31] <audreyt> so, nothing definitive with use_ok?

[11:31] * audreyt ponders the equivalent of ok.pm in p6

[11:31] <gaal> hmm, no, I need to fix that too

[11:33] <audreyt> k

[11:33] <audreyt> mm, the &skip looks like a showstopper. I'll tackle it now

[11:42] <ingy> audreyt: hello

[11:43] <ingy> I need to ask some questions of you

[11:47] <audreyt> ingy: yes?

[11:53] <audreyt> brb

[11:53] <audreyt> ingy: oh, when do you leave .tw? I need to send the wristwatch to you

[12:05] <ingy> audreyt: hi sorry, I leave on 26th

[12:05] <ingy> I may come to Taipei next weekend

[12:06] <ingy> I need to either release my YAML module unsigned, or register my key

[12:07] <ingy> I could use some direction there...

[12:08] <ingy> I think that goes for the other module releases I did

[12:09] <svnbot6> r8660 | gaal++ | tests in ext/ and t/ - workaround the breaking of 'use_ok'

[12:09] <gaal> sorry big change to tests, audreyt you may want to resmoke

[12:10] <ingy> hi gaal 

[12:10] <gaal> heya ingy, new YAML? yum! :)

[12:11] <ingy> it's still not as tasty as it should be, but thanks

[12:11] <gaal> "the breaking of 'use_ok'" sounds like "the hunting of the snark"

[12:11] <ingy> ha

[12:11] * ingy is done hunting snarks

[12:12] <gaal> did you sell all your railway-share?

[12:12] <ingy> yes

[12:13] <audreyt> ingy: ok, we'll meet this weekend

[12:13] <ingy> audreyt: also i need to know if I register my key how long that will take to become effective.

[12:13] <ingy> next weekend you mean?

[12:14] <gaal> fglock: ping

[12:14] <gaal> rafl: ping

[12:14] <gaal> kane_: ping

[12:15] <ingy> audreyt: are you highly distracted?

[12:15] <gaal> this is like ping 255.255.255.255 :)

[12:16] <rafl> gaal: pong

[12:16] <audreyt> ingy: "register" your key?

[12:16] <ingy> yeah

[12:16] <rafl> gaal: Hurry up. I need to get a train.

[12:16] <audreyt> ingy: yeah, today is my off-ritalin day since 5 days of it :)

[12:16] <gaal> rafl: hi! I'm not going into any detail about JIB/sixpan stuff in the changelog, please prepare a summary of what you think needs to be mentioned.

[12:17] <audreyt> ingy: I don't know about registering... probably just "gpg --send-key 0xDEADBEEF"

[12:17] <gaal> rafl: you don't have to do this right now, but please do it before the release

[12:17] <ingy> hmm. people are having trouble installing YAML because of the gpg signing

[12:17] <rafl> gaal: OK. I think I can do that this evening.

[12:17] <rafl> gaal: When will the release be?

[12:17] <ingy> which module::install forced on me

[12:18] <gaal> rafl: thanks. probably much later tonight our time, or tomorrow.

[12:18] <audreyt> ingy: huh? I think you have an old M::I

[12:18] <ingy> does a newer version not be so nazi?

[12:18] <audreyt> the forced signing was a bug that's been resolved a while ago

[12:18] <ingy> ok

[12:18] <rafl> gaal: OK. Thanks for the reminder.

[12:18] <ingy> do I need a new Module::Signature?

[12:18] <gaal> rafl: sure :)

[12:18] <audreyt> yeah, you were releasing with .47

[12:18] <audreyt> 0.54 would do much better

[12:19] <audreyt> that's optional

[12:19] <ingy> or just a new Module::Install?

[12:19] <audreyt> just a new M::I would do

[12:19] <gaal> audreyt: do we have other showstoppers except multis and PGE?

[12:19] <ingy> ok, thanks...

[12:19] <ingy> audreyt: also i want to add YAML.pm tests to YAML::Syck if that is ok

[12:20] <audreyt> gaal: PIR targetting

[12:20] <audreyt> ingy: sure, just committ

[12:20] <audreyt> gaal: -BPIR

[12:20] <audreyt> gaal: but that's all

[12:20] <gaal> audreyt: unfortunately it looks like you're in the critical path for all three of these :)

[12:21] <ingy> audreyt: thanks. you can go back to your distractions :)

[12:21] <ingy> audreyt++

[12:21] <gaal> I have today for misc. releng tasks like changelog and bughunting

[12:21] <gaal> but none of tomorrow I'm afraid.

[12:22] <audreyt> sure, chglogging + bughunting for regressions would be much help

[12:22] <audreyt> I'll solve all three in the upcoming 24hrs :)

[12:23] <gaal> cool. there are a few yellows in the smoke too I've noticed, btw.

[12:24] <audreyt> mmm the color of unexpectedness

[12:26] <gaal> PJF: ping

[12:27] <gaal> (anyone with cygwin): ping

[12:27] <gaal> PJF++ fixed the port, I want to make sure it's still fixed for the release.

[12:29] <audreyt> I can test

[12:29] <audreyt> which would require a reboot... so bbiab :)

[12:30] <gaal> :)

[12:54] *** GeJ_ joined
[12:55] <gaal> it would be nice to get variable exports in for this release too, but I wouldn't bet on my completing it :/

[12:56] *** mncharity joined
[12:56] *** mncharity is now known as putter

[12:57] <gaal> hey putter

[12:58] <putter> hey gaal

[12:59] *** GeJ_ joined
[13:02] <putter> gaal: re variable export, something I didnt appreciate until just now reading the responses to stevan's p6l post re the object hierarchy, is just how much in flux the whole thing is.  To manage the "big p6 prelude" in the face of such flux, one really wants powerful (say haskell like) imports, either in use() or does().

[13:02] <audreyt> indeed.

[13:02] <audreyt> s/either/both/

[13:02] * audreyt is, amazingly, still rebooting win32 thanks to various secutiry updates.

[13:03] <audreyt> it's been a long while since I booted here.

[13:03] <audreyt> s/secutiry/security/

[13:06] <gaal> putter: I'd love to add that stuff, if I knew what it looked like :)

[13:14] *** elmex joined
[13:15] *** chris2 joined
[13:18] <putter> "Security updates are available.  To install them (and thus maintain system security for another few hours), press Ok.  To be immediately compromised, press Skip."

[13:18] <putter> both++

[13:20] * putter tries to think of a language which handles it well, to use as a prototype...

[13:21] <audreyt> Scala?

[13:24] <svnbot6> r8661 | autrijus++ | * cygwin build fix -- integrated from M::I

[13:25] <putter> re both, definitely both.  use() is not sufficient because it would basically ahve to take over from the inheritance/mixin system.  package and kids (modules, roles) are not sufficient because you want to be able to inherit/mixin and thus modularize things which impact multiple namespaces.

[13:25] <audreyt> gaal: cygwin works.

[13:25] <audreyt> (using ghc 6.4.0 deliberately)

[13:25] <audreyt> will retest with 6.4.1

[13:25] <audreyt> but should work as well

[13:25] * putter doesnt have a clear idea of what a win would look like.  going to look again a scala...

[13:25] <audreyt> actually

[13:25] <audreyt> JS2.

[13:26] <audreyt> http://www.mozilla.org/js/language/js20-1999-03-25/packages.html

[13:26] <audreyt> it's an early draft

[13:26] <audreyt> hunt a newer one?

[13:27] <audreyt> http://www.mozilla.org/js/language/js20/core/packages.html

[13:28] <audreyt> hm, but it doesn't handle mutual-use

[13:29] <putter> and http://scala.epfl.ch/docu/files/ScalaReference.pdf  sec 4.7

[13:30] <putter> physical page 42

[13:34] *** bsb joined
[13:37] <svnbot6> r8662 | iblech++ | * Usual svn props.

[13:37] <svnbot6> r8662 | iblech++ | * util/file_to_hs.pl: "DO NOT EDIT THIS FILE" is added to the output files now.

[13:39] <svnbot6> r8663 | gaal++ | ChangeLog updates to r8657

[13:40] <gaal> rehi

[13:40] <gaal> audreyt: re: cygwin - yay! I thought we required 6.4.0?

[13:40] <svnbot6> r8664 | autrijus++ | * cygwin CRLF fix for gen_prelude

[13:40] <putter> iblech! :)

[13:40] <audreyt> gaal: sure, we require 6.4.[01]

[13:40] <gaal> err I meant I thought we required .1 :)

[13:41] <gaal> glad to be wrong, fixing changelog.

[13:41] <putter> definitely need .1 on x86-64.

[13:43] <svnbot6> r8665 | gaal++ | ChangeLog - 6.4.1 recommended, 6.4.0 possible on some platforms

[13:44] <gaal> okay, the brunt of ChangeLogging is done.

[13:45] <audreyt> woot

[13:45] <audreyt> gaal++

[13:45] <gaal> audreyt: you and stevan in particular still have lots of work to do there :)

[13:46] <audreyt> GHC 6.4.1 vs cygwin is also confirmed as working.

[13:47] <audreyt> vs 6.5-head is broken due to ghc bug (getDirectoryContent)

[13:47] <audreyt> no tuits for a core fix now

[13:47] <audreyt> I'll boot back to a far saner system :)

[13:47] <gaal> lol

[13:50] * gaal start a build for smoking

[13:51] <gaal> s/t /ts/

[13:52] <putter> dylan http://oop.rosweb.ru/dylan/book.annotated/ch5.html http://www.gwydiondylan.org/books/drm/Program_Structure   eh.  proto and goo (dylan kids) went overboard towards simplicity.

[13:53] <putter> oh, actually, goo did.  rechecking proto.

[13:58] *** Southen joined
[13:59] <chris2> mmmh, goo. what a nice language it was

[14:00] <audreyt> heh, http://people.csail.mit.edu/jrb/goo/wiki/index.php/GooNews

[14:01] <audreyt> http://boo.codehaus.org/Language+Features

[14:01] <putter> nice biography with ps/pdf papers http://readscheme.org/modules/

[14:01] <chris2> i'd be satisfied with a sexpr dylan, actually :-)

[14:03] <audreyt> putter: heh, I was just looking for that link

[14:05] *** SamB joined
[14:06] <chris2> can your syck round-trip {[]=>""} ?

[14:07] <audreyt> chris2: for PIL^N p6hash types, yes, but the normal runcore still has Str keys

[14:07] <audreyt> s/normal/current/

[14:07] <chris2> i mean, does it really work? because there is a bug in ruby 1.9 wrt that

[14:08] <audreyt> let me write a quick test

[14:10] <rafl> gaal: Is it OK to edit the changelog directly?

[14:10] <gaal> rafl: yes.

[14:11] <audreyt> emit works

[14:11] <gaal> audreyt: you're emitting yaml from PIL^N? wow

[14:12] <kane_> gaal: pong

[14:12] <kane_> ah, rafl... long time no see

[14:12] <audreyt> loading works

[14:12] <gaal> kane_: hey. please talk with rafl re: updating the changelog with your changes in the past ~month; we're planning a release soon.

[14:12] <audreyt> chris2: parseYaml "--- { []: \"\" }" looks good to me

[14:12] <audreyt> gaal++ # nice binding

[14:13] <kane_> gaal: exclude JIB for now :)

[14:13] <gaal> audreyt++ # loads of help

[14:13] <chris2> and that's what gets generated?

[14:13] <chris2> because it should be  ? [] : "", i think

[14:13] <kane_> rafl: on that note, RL has caught up with me in a bad way... no time for JIB for a while it looks like :(

[14:13] <audreyt> oh.

[14:13] * audreyt turns inlining off

[14:13] <gaal> chris2: isn't that the same thing?

[14:14] <audreyt> aha.

[14:14] <chris2> what is {"[]" => ""} then ?

[14:14] <audreyt> trunk syck under noinling generates

[14:14] <audreyt> ? []\n: ""

[14:14] <audreyt> but the release syck (which pugs now uses) gens

[14:14] <rafl> kane_: I won't have much time until february as well.

[14:14] <audreyt>  "--- \n[]\n: \n"

[14:14] <gaal> kane_: please write with rafl whatever you think appropriate directly.

[14:14] <audreyt> which is indeed a parsefail

[14:15] <chris2> okay, so it's a syck bug, not a ruby one :)

[14:15] <gaal> hmm, we can update to trunk syck, but doesn't that have stylistic output problems? or were thouse fixed?

[14:15] <audreyt> gaal: it always generates ?

[14:16] <audreyt> probably to fix exactly this bug

[14:16] <gaal> heh.

[14:16] <audreyt> as it doesn't srop the ? even on simple strings

[14:16] <putter> Mixin modules for dynamic rebinding http://citeseer.ist.psu.edu/730012.html  (not on the readscheme list)

[14:16] <audreyt> s/srop/drop/

[14:16] <chris2> oh :)

[14:16] <audreyt> gaal: maybe we should consider using trunk syck and turn on inlining

[14:16] * audreyt ponders

[14:17] <chris2> ? "bla" : foo is icky

[14:17] <audreyt> yeah. definitely need adaptable stuff

[14:17] <audreyt> chris2: ping Why to fix it?

[14:17] <chris2> he reads ruby-core

[14:18] <gaal> he did mention he had a release coming up...

[14:19] <audreyt> gaal: 

[14:19] <audreyt> pugs> eval(/1/.yaml, :lang<yaml>)

[14:19] <audreyt> {rule}

[14:19] <audreyt> it worksforme

[14:19] <audreyt> parrot 0.4.1

[14:19] <audreyt> what was the problem?

[14:19] <audreyt> (external parrot)

[14:19] <audreyt> trying with embparrot now

[14:20] <gaal> audreyt: I think the problem isn't in .yaml at all, it's in embparrot PGE

[14:20] <audreyt> ok, looking

[14:20] <gaal> 0.4.1 also

[14:20] <gaal> brb, getting food

[14:31] <gaal> shapr++ # "Haskell separates Church from state"

[14:32] <audreyt> shapr++

[14:36] * putter wishes the individual... clauses/implementations/mumble (what is the jargon?) of multis were themselves first class objects.   or at least, given multi f,  f ::= assemble_a_multi(f.disassemble.filter(...));

[14:38] * gaal 's machine crashes again :(

[14:38] <putter> !

[14:39] <SamB> wasn't Church already seperated from state?

[14:39] <gaal> this happens a lot. make smoke... ghc evacuate errors ... look at temperature... kablooie

[14:39] <SamB> gaal: are you actually talking about smoke/temperature?

[14:40] <gaal> SamB: make smoke pushes the cpu, causing high temperatures etc.

[14:40] <SamB> gaal: ah

[14:40] <gaal> yeah, this chip runs hot :(

[14:40] * SamB is glad to have a PII

[14:40] <putter> throttle chip in bios?

[14:41] <gaal> I should shop for RAM for the old laptop so I can make optimized /preludepc builds with it

[14:41] <putter> add memory quota to force swapping? ;)

[14:41] <gaal> putter: I haven't found the option. it's a leet gamer bios, only good for overclocking :(

[14:41] <gaal> putter: :)

[14:42] <gaal> maybe I should submerge the thing in oil like those crazy hackers

[14:42] <SamB> CPUs that overheat at 100% usage sound like a pain.

[14:43] <putter> gaal: linux?

[14:44] <gaal> actually, is there a way to isolate the culprit? maybe it's faulty ram or bios?

[14:44] <gaal> putter: uh, sorta. debian on colinux on winxp

[14:44] <SamB> especially if the schedular doesn't give them idle time to keep the temperature down...

[14:45] <putter> k.  I've a fuzzy recollection there is a hard cpu quota available, so you could say max 50% cpu, and will get 50% idle if nothing else is happening on system.

[14:45] <gaal> putter: at what level?

[14:45] <SamB> but I don't think Pentium IIs ever have this problem, so I am happy ;-)

[14:45] <gaal> i'd just lower the clock speed by 15%

[14:46] <gaal> but I don't know how.

[14:46] <SamB> I mean, unless the fan breaks or something...

[14:46] <gaal> SamB: how long does a pugs build take you?

[14:46] <SamB> it takes a long time

[14:47] <SamB> haven't done it lately though

[14:50] <putter> gaal: or not.  couldn't find it.  hmm.  suspend ghc for m seconds every n seconds?

[14:50] <gaal> loop { sleep 1 ; kill STOP, $ghc; sleep 1; kill CONT, $ghc }

[14:50] <gaal> heh.

[14:50] <putter> :)

[14:53] <putter> hmm... dust accumulated in case/power supply/fan blades?

[14:53] <putter> heat sink?

[14:53] <audreyt> hm, running into parrot pthreading bugs.

[14:53] <audreyt> or maybe it's freebsd pthreading bugs.

[14:54] * putter starts build...

[14:57] * audreyt decides to sleep some more and do the releng with a wakeful mind

[14:57] <audreyt> aha, parrot only fails when built with parrot_is_shared

[14:58] <putter> someone said something about a load library path(?) issue on #perl6 within the last few days.

[14:58] <putter> gaal?

[14:59] <gaal> putter: no dust/cat fur, and the cpu itself was replaced

[14:59] <putter> ohhhhh!  maybe a bad cpu-heatsink bond?

[14:59] <gaal> putter: no, that was just in running; export LD_LIBRARY_PATH=.../blib/lib worked.

[14:59] <putter> is the heatsink itself very hot?

[14:59] <gaal> putter: how do I tell?

[15:00] <putter> touch it?  or is this a laptop?

[15:00] <gaal> i'm on the laptop now; the problem machine is a desktop. but what's considered hot? is hot ok?

[15:01] <chris2> dont you have any sensors?

[15:01] <gaal> anyway there's a huge fan sitting on the heatsink, this is a p4

[15:01] <gaal> chris2: it can get to 80C.

[15:01] <chris2> ooh

[15:01] <gaal> prescott :(

[15:02] <chris2> my athlon xp always crashed around 72

[15:02] <chris2> pentium at least has overheating protection :P

[15:02] <gaal> it's supposed to be designed to run this hot

[15:02] <gaal> i think

[15:03] <putter> another possibility is to look at how fast it cools down.  once the load is gone, the temp should drop quickly, limited only by thermal mass of heat sink.  if it doesnt...

[15:03] <gaal> it does, actualyl.

[15:03] <putter> heat sink rated for the cpu?

[15:03] <gaal> iirc goes to about 50 or 40 even

[15:03] *** xern_ joined
[15:04] <gaal> putter: how do I check?

[15:04] <chris2> that said, my ibook fan only spins when i do haskell related stuff :P

[15:04] <putter> heat sink spec sheet?

[15:04] <putter> ha, cant say / box at the beginning of an irc line. ;)

[15:07] * gaal takes a break also

[15:07] <gaal> bbiab &

[15:08] <putter> basically the chain goes something vaguely like; clockspeed/voltage too high, bad cpu/heatsink bond, heat sink too small, insufficient airflow over sink (eg, sink fan dead, or a temp->speed control not doing the right thing), case hot. ;)

[15:08] <putter> bye gaal.  good nap audreyt.

[15:10] <audreyt> see ya :) *wave*

[15:10] <putter> gaal: re use/does, the low-hanging immediately tasty fruit would be use() preserving order of multi overwrites.  Ie, two

[15:10] <putter> &

[15:11] * ingy eats a bowl of mueslix with milk using a metal spoon and pines for apple pie

[15:13] <ingy> (which I'm sure they probably have at the corner Taiwanese 7-11) :\ 

[15:14] <ingy> mmm milk... *sigh*

[15:15] <putter> multi f(Num $n) {$n+1} and multi f(Num $n) {$n+2} in the same file, the first definition wins.  (on pil2js with an warning).  But if you put them in separate files, and use() them, the order of the two use()s does not matter.  Oh my.  The file name determines the order.

[15:17] * ingy notices for the first time that gugod has no oven...

[15:17] <putter> If that were changed to use() order, we could start creating a unified pil2js/piln/etc p6 prelude.

[15:17] <putter> I think.

[15:18] * ingy stares at the prebuttered garlic bread just procured from the grocery

[15:18] * putter is being made hungry by ingy.  this is not a good thing.  ;)

[15:19] * ingy reluctantly walk over to the microwave :\

[15:19] <ingy> hi putter

[15:19] <putter> hi ingy

[15:20] <ingy> how's New England?

[15:20] <putter> I'm told it was supposed to get nasty today.  20degF drop from yesterday.  Still looks fine.  Maybe later.

[15:21] <ingy> yucky

[15:21] <ingy> we been having a most unfortunate streak of sunny days in the 70s here in Taiwan

[15:21] <putter> boooooorrrrriiinnngggg.  ;)

[15:22] <putter> my sympathy.

[15:22] <ingy> well I deserve your tears because I sleep all day, so it does me no good

[15:24] * putter has (re)discovered the joy of getting up a few hours pre-Sun.  City veerrrry quiet.  (good for hunting wabbits)

[15:24] <putter> bbiab

[15:24] <ingy> intewesting

[15:30] *** lisppaste3 joined
[15:51] *** nothingmuch joined
[15:51] * audreyt spent far too much time 1)joining acm.org and 2)reading papers

[16:00] *** putter joined
[16:01] <putter> papers++ acm-digital-library-policy-=12

[16:01] <putter> piln, piln, ra!

[16:02] <putter> got to go.  bye all.  happy hacking. &

[16:04] <nothingmuch> seen gaal?

[16:04] <jabbot> nothingmuch: gaal was seen 56 minutes 23 seconds ago

[16:06] *** gaal joined
[16:08] * gaal is dazed from a misconfigured nap, searches for caffeine

[16:12] *** justatheory joined
[16:19] <gaal> nothingmuch: you pang? - got your email

[16:21] <obra> morning

[16:21] <gaal> hey obra 

[16:23] <nothingmuch> yeah, it was about the email

[16:23] <nothingmuch> sorry =(

[16:23] <nothingmuch> got your reply though

[16:24] <gaal> rereplying

[16:27] * gaal wanders off to wake up again &

[16:35] *** imperator joined
[16:54] *** feng joined
[16:54] *** bsb joined
[16:57] <leo_> audreyt: I saw your freebsd troubles - still problems?

[17:09] *** vel joined
[17:19] *** nothingmuch joined
[17:21] *** vel left
[17:22] *** kane_ joined
[17:38] *** nnunley joined
[17:43] *** mjl69 joined
[17:52] *** justatheory joined
[17:57] *** nnunley is now known as boris

[17:57] *** boris is now known as nnunley

[18:39] *** stennie joined
[18:40] *** phredmoyer joined
[18:41] *** sapper joined
[18:43] *** landover joined
[18:49] *** elmex joined
[18:59] *** justatheory joined
[19:18] <wolverian> hm, any idea if -a and @F still exist in perl6?

[19:22] *** sapper left
[19:32] *** integral joined
[19:47] <gaal> wolverian: the command line is almost completely unspecced

[19:47] <wolverian> right. well, given laziness, I was just thinking it could be @F[line; column]

[19:48] <wolverian> that seemed a tad more elegant.

[19:49] <gaal> you mean for line number? interesting, but only efficient if it's used monotonically rising.

[19:51] <gaal> afk &

[19:53] *** elmex joined
[19:56] <wolverian> gaal, more efficient than using -n? if it's equally efficient it doesn't matter.

[20:09] *** elmex joined
[20:14] <wolverian> also (just brainstorming): perl6 -e'@ARGS».open».lines».split»[0].grep(/^129\./).uniq.elems' /var/log/apache2/access.log*

[20:30] *** xinming joined
[20:35] *** elmex joined
[20:36] *** Grrrr_ joined
[20:36] *** elmex joined
[20:38] *** beppu_ joined
[20:51] *** elmex joined
[20:52] *** dduncan joined
[21:08] *** avar joined
[21:34] *** xinming joined
[21:36] *** putter joined
[21:38] <putter> Ok, here's an odd thought.

[21:39] <putter> class A{#A1} package P{class A{#A2} class B is A;}

[21:41] <putter> my recollection, which may be out of date, is that this is specced as defining A, P::A, and P::B, where P::B is P::A.  That's A2.  All references to A in P::B are understood as P::A.

[21:41] <putter> This isnt the current pugs behavior.  But let's say it was.

[21:43] <putter> package Test1 { use BigP6Prelude; &bootstrap(); }   could give you a oo system in a box.  Test1::Object, Test1::Array, Test1::infix:<+>, etc, etc.

[21:45] <putter> And you could simultaneously have a Test2, etc.  And they could all be differently structured systems.  Item in one but not the other, etc.  And they are relatively self contained.  Only if one says ::*:: does one pop out of the box.

[21:46] <putter> The underlying p6 system in which the packages TestN are defined, is serving the role of the underlying backend runtime.

[21:47] <putter> One can execute code in any of them.  With   package Test2 { blah } , blah sees the Test2 object system.

[21:48] <putter> Does this hang together?  Am I missing something?

[21:49] <putter> It raises the question of, can we have chroot? :)   chroot Test1 { ::*::Foo }  with Foo now referring to Test1::Foo.

[21:55] *** avar is now known as avar\away

[21:55] <putter> And of how scoping for the parser is handled.  Can each of the TestN have their own current parser state, set of macros, etc.  If so, then we could have multiple simultaneous p6 systems running.

[21:56] <putter> stevan, audreyt, anyone: thoughts?

[21:56] <putter> stevan: among the many languages you've written bootstrap code for, is p6 among them? :)

[21:57] <putter> Hmm, is the pil bootstrap just p6 plus backtick?  Could one macro backtick and get a p6 bootstrap?

[22:00] <putter> Oh, on rereading, one can of course "pop out of the box" (in the absence of chroot) by simply calling something defined in the underlying p6 and not shadowed by the Test one.

[22:04] *** justatheory joined
[22:09] * putter goes back to trying to think of ways to have a single shared big agile prelude.

[22:16] * putter again considers attempting to hack in full-file source filtering.  Sign by highway: "if you lived here, you would be home now".  if we could write a little filter, we could easily dodge classes not quite working.  our current macros just aren't quite powerful enough.

[22:18] <putter> could just prepend $?PACKAGE:: to all class names in the prelude... ;)

[22:20] <putter> (currently #A2 lands on the top level A.  #A1  ::*::A )

[22:26] <putter> ah well.  small goals.  get piln.  flesh it out with any sort of prelude.  giving working objects.  and then we can have fun.

[22:27] <putter> of course, everyone is welcome to have fun before then too. ;)

[22:43] *** sub_chick joined
[22:47] *** iblechbot joined
[22:48] <putter> hi iblech(bot) 

[22:49] *** vel joined
[23:03] <nothingmuch> does anyone here camp a lot?

[23:04] <elmex> you mean idle ?

[23:04] <elmex> elmex++

[23:04] <perlbot> What kind of idiot karmas himself?  Your kind of idiot!

[23:04] <elmex> perlbot--

[23:04] <putter> ok, re source filtering.  how about a new ruleWithCurrentInput which defines a keyword/statement  with_current_input <identifier>;  which getState and setState's with a new input of  <identifier> <<ENDD old input ENDD  so...

[23:05] <putter> macro f($input) { my $src = $input; $src ~~ s/Foo/Bar/g; $src }    with_current_input f;  blah Foo blah

[23:06] <putter> hi nothingmuch

[23:07] <nothingmuch> elmex- err nope, like in nature

[23:07] <nothingmuch> hi putter 

[23:08] <putter> anyone have api comments?  or understand Parser guts enough to say "sounds vaguely (im)plausible"?

[23:09] <nothingmuch> me backs out carefully

[23:09] * putter wishes there were more people here UTC night

[23:09] <putter> lol

[23:09] <putter> "but wait, there's more.  for only $9.99USD, you get..."

[23:14] <putter> what was it Alice (in Wonderland) said?  Believe N impossible things before breakfast?  So I'm off to dinner. ;)

[23:14] <putter> audreyt, anyone: comments on source filter idea would be appreciated.

[23:14] <putter> good night all &

[23:17] *** mjl69 joined
[23:28] *** putter joined
[23:29] <putter> hey, at least currently, one could have an api of  quote_current_input  or somesuch.

[23:29] <putter> pugs> quote_current_input foo bar hee

[23:29] <putter> " foo bar hee"

[23:30] *** lisppaste3 joined
[23:32] <putter> so,   macro f($in){my $s=$in; $s =~ s/Foo/Bar/g; $s} ... f quote_current_input ... all this gets handed to f ... .  ie,  input "quote_current_input everything to eof" -> "<<END everything to eof END".

[23:32] <putter> &

[23:37] *** xinming joined
[23:38] *** putter joined
[23:39] <putter> hey, its just a normal-ish quote operator, q-with-eof-terminator! :)

[23:39] <putter> &

