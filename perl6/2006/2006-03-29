[00:09] <FB|afk> Pistos, I might have seen some used Model M's through a shop window on Bloor....

[00:09] <FB|afk> want me to ask em?

[00:09] *** FB|afk is now known as FurnaceBoy

[00:13] <FurnaceBoy> s'oh...wc

[00:15] *** kisu joined
[00:20] *** kisu joined
[00:24] *** justatheory joined
[00:24] <avar> FurnaceBoy: what of Model M?

[00:31] *** clkao joined
[00:32] <FurnaceBoy> oh, just that I may have seen one in a box in a store today through a shop window, I could go in and check

[00:34] *** miyagawa joined
[00:44] <avar> FurnaceBoy: you can buy Model M clones

[00:44] <avar> although the company that sells them is ignoring me

[00:51] *** christo joined
[00:56] *** christo is now known as cjm

[00:56] *** cjm is now known as chromo

[01:01] *** chromo left
[01:02] *** FurnaceBoy is now known as FB|afk

[01:05] *** rafl_ joined
[01:07] *** rafl_ is now known as rafl

[01:08] <TimToady> ?eval 1+1

[01:09] *** evalbot_9774 is now known as evalbot_9777

[01:09] <evalbot_9777> 2

[01:13] <buu> YAY

[01:19] *** stennie joined
[01:19] *** FB|afk is now known as FurnaceBoy

[01:20] <FurnaceBoy> avar, i'm not sure, cos I didn;'t take a close look

[01:20] <FurnaceBoy> I don't want clones, I own a couple of real ones, and they are always available on ebay

[01:21] <FurnaceBoy> actually a usb version would be nice though :)

[01:21] <avar> mm

[01:21] <avar> I'm trying to get one from a friend

[01:21] <avar> FurnaceBoy: does PS/2 => USB work?

[01:21] <FurnaceBoy> haven't tried, I guess so

[01:23] *** stennie joined
[01:45] *** lavi joined
[02:24] *** bewest left
[02:47] *** r0nny joined
[03:06] *** Kattana joined
[03:14] *** kakos joined
[03:53] *** cmarcelo joined
[04:06] *** amnesiac joined
[04:28] *** cmarcelo left
[04:32] *** Khisanth joined
[04:32] *** lavixu joined
[04:38] *** mako132_ joined
[04:42] *** clkao joined
[04:56] *** vel joined
[05:04] *** Khisanth joined
[05:52] *** GeJ joined
[05:54] *** kanru joined
[06:06] *** KingDiamond joined
[06:13] *** Quell joined
[06:41] *** iblechbot joined
[06:51] *** nothingmuch joined
[07:01] *** lavixu joined
[07:10] *** kane_ joined
[07:39] *** drrho joined
[08:03] *** bsb joined
[08:09] *** nothingmuch joined
[08:10] *** autark joined
[08:22] *** Aragone is now known as Ara4n

[08:25] <nothingmuch> morning

[08:29] *** marmic joined
[08:47] *** pdcawley joined
[09:13] <KingDiamond> okay, so the connect() method is confusing me a bit... I want to dump some raw http data... do I just pass all of it as the first (and only) param to connect()?

[09:14] <KingDiamond> I realized I'm doing something wrong when ethereal shows me wrong http data

[09:15] *** nnunley joined
[09:16] <KingDiamond> nothingmuch: any ideas? :/

[09:18] <nothingmuch> KingDiamond: what are you passing to connect?

[09:18] <nothingmuch> Net::IRC might be a good thing to browse

[09:21] <pasteling> "KingDiamond" at 202.46.19.1 pasted "POST /services/upload/ HTTP/1." (23 lines, 705B) at http://sial.org/pbot/16523

[09:21] <KingDiamond> nothingmuch: I want to make a request like thus: http://sial.org/pbot/16523?tx=on&submit=Format+it%21

[09:23] <KingDiamond> nothingmuch: initially, I did $hdl.say("POST /foo/bar HTTP/1.1\r\n", "Host: www.foo.com\r\n") and then $hdl.say(raw stuff)

[09:23] <KingDiamond> ethereal shows something's wrong

[09:33] <nothingmuch> one sec, reading

[09:33] <nothingmuch> (sorry, distractions at $work)

[09:34] <nothingmuch> KingDiamond: what is it *really* sending?

[09:34] <nothingmuch> and what are you trying to send?

[09:34] <nothingmuch> also, $hdl.say("POST /foo/bar HTTP/1.1\r\n" will send "\r\n\n"

[09:34] <nothingmuch> use print

[09:36] <nothingmuch> also, have you considered using LWP/HTTP::Request via use perl5:

[09:36] <nothingmuch> ?

[09:40] <nothingmuch> rgs: thanks for the Tie::RefHash fix =)

[09:41] <rgs> woot

[09:41] <nothingmuch> btw, is it a separate module too?

[09:42] <rgs> no, it's only core

[09:42] <nothingmuch> as in, can Random::InsideOutObjectFramework rely on a version?

[09:42] <nothingmuch> hmm

[09:42] <nothingmuch> shame

[09:42] *** f0rth_ joined
[09:42] <rgs> but you can CPAN-ize it if you want to

[09:43] <nothingmuch> should I ask the author? p5p?

[09:43] <rgs> say that you want to do so on P5P, and don't fork.

[09:43] <nothingmuch> okay

[09:44] <rgs> and your Makefile.PL should override INSTALLDIRS

[09:44] <nothingmuch> it's not worth forking

[09:44] <nothingmuch> one sec, let me write this down

[09:44] <rgs> INSTALLDIRS => perl

[09:44] <rgs> (it's 'site' by default)

[09:44] <nothingmuch> okies

[09:45] <rgs> and get the version from latest bleadperl, since I changed stuff

[09:46] <rgs> there haven't been much changes to this module since 1997

[09:46] <nothingmuch> yeah

[09:46] <nothingmuch> i don't know why people keep duplicating it though

[09:46] <rgs> at least

[09:47] <nothingmuch> e.g. Class::Std could be unb0rked for threads very easily now, using Tie::RefHash::Weak

[09:47] <rgs> nothingmuch: well, if you ignore CPAN, you're doomed to reinvent it, poorly :)

[09:47] <nothingmuch> maybe it's not well known enough

[09:47] <nothingmuch> s/people/module authors/; # more alarming ;-)

[09:48] <KingDiamond> nothingmuch: k, lemme try with print

[09:57] *** KingDiamond joined
[09:59] <nothingmuch> welcome back

[10:01] <KingDiamond> nothingmuch: basically, I need to post data like the following: http://sial.org/pbot/16523

[10:01] <KingDiamond> nothingmuch: I'd prefer using connect()... but yeah, if there's no option, well...

[10:01] <nothingmuch> yeah =/

[10:02] <nothingmuch> can you dump an ethereal log?

[10:02] <nothingmuch> and your code?

[10:03] <pasteling> "KingDiamond" at 202.46.19.1 pasted "156 my $hdl = connect(Flickr::" (10 lines, 564B) at http://sial.org/pbot/16525

[10:05] <nothingmuch> the code looks good

[10:06] <KingDiamond> and the program just hangs... lemme dump the relevant ethereal log

[10:06] <nothingmuch> oh.. hangs

[10:06] <nothingmuch> i thought it was sending wrong data

[10:06] <nothingmuch> what does strace tell  you?

[10:07] <nothingmuch> perlbot: seen lypanov?

[10:12] *** pdcawley joined
[10:13] <KingDiamond> nothingmuch: lemme see

[10:14] <KingDiamond> darn... I'm on os x

[10:14] <nothingmuch> KingDiamond: ktrace + kdump

[10:15] <KingDiamond> nothingmuch: yeah, doing that :)

[10:15] <nothingmuch> both cooler and not as cool as strace

[10:17] <nothingmuch> KingDiamond: it's lunchtime

[10:17] <nothingmuch> i'll try out the code myself afterwords

[10:18] <nothingmuch> and maybe i can figure it out

[10:18] <nothingmuch> (I'm doubtful though)

[10:18] <nothingmuch> also, if you like you can use perl5:IO::Socket

[10:18] <KingDiamond> nothingmuch: cool, thanks... I'll play around until then

[10:18] <nothingmuch> which lets you keep perl6 space feel, but get a diff connect implementation

[10:19] <KingDiamond> k, will take a look if I fail )

[10:24] *** kane__ joined
[10:25] *** b00t joined
[10:36] <KingDiamond> nothingmuch: there?

[11:02] *** premshree_ joined
[11:13] *** nothingmuch_ joined
[11:14] <nothingmuch_> did KingDiamond leave?

[11:17] *** autark joined
[11:22] <Gothmog_> Yes. Maybe not voluntary. "13:02 -!- KingDiamond (n=premshre@nat.bangalore.corp.yahoo.com) has quit: Read error: 104 (Connection reset by peer)"

[11:27] *** avar joined
[11:27] <premshree_> nothingmuch: I'm here

[11:27] *** premshree_ is now known as KingDiamond

[11:28] <KingDiamond> nothingmuch_: I'm usng something like this: $hdl.print("POST $upload_interface HTTP/1.1\r\n$header\r\nHost: " ~ Flickr::host ~ "\r\n\r\n" ~ $res); but without any luck

[11:29] <KingDiamond> do you want me to paste the relevant kdump bits?

[11:29] *** kanru joined
[11:30] <nothingmuch_> KingDiamond: yes please

[11:30] *** nothingmuch_ is now known as nothingmuch

[11:31] <pasteling> "KingDiamond" at 202.46.19.1 pasted "8409 pugs GIO fd 5 wrote 132 b" (53 lines, 2.2K) at http://sial.org/pbot/16527

[11:31] <KingDiamond> hmm... "35 Resource temporarily unavailable"

[11:32] <KingDiamond> nothingmuch: see if you're able to figure

[11:33] *** bsb_ joined
[11:33] <nothingmuch> . o O ( why is it doing a select  )

[11:33] <nothingmuch> hmm

[11:33] <nothingmuch> KingDiamond: this is really odd

[11:34] <nothingmuch> does the code work on e.g. feather?

[11:34] <nothingmuch> brb

[11:36] <KingDiamond> I could try

[11:36] <KingDiamond> lemme see

[11:38] *** elmex joined
[11:39] <KingDiamond> darn, I'll have to install a cpl modules.

[11:39] <KingDiamond> meeting. will try after that.

[11:47] *** iblechbot joined
[12:18] *** ruoso joined
[12:27] <KingDiamond> Juerd: I wanted to install a perl module on feather

[12:28] <Juerd> KingDiamond: And then discovered you don't have access :)

[12:29] <Juerd> KingDiamond: Please create a debian package and then send it to me

[12:30] <Juerd> KingDiamond: I'd like to keep the system clean of "make install"-software.

[12:32] <spo0nman> Juerd: hello.

[12:33] <Juerd> spo0nman: Hello. I received your email but have so far lacked tuits. Can you wait until tonight?

[12:33] <spo0nman> Juerd: :) thnks.

[12:35] <spo0nman> KingDiamond: please create a debian package :D

[12:35] <spo0nman> Juerd: He's a mac luser.

[12:35] <Juerd> With access to feather...

[12:36] <spo0nman> yes ... he could build it there.

[12:37] <Juerd> And you don't need Debian to create a Debian package, technically ;)

[12:37] <Juerd> It's just an ar archive with some tgz archives in it ;)

[12:37] * spo0nman always uses alien to create debian packages.

[12:37] * spo0nman ducks.

[12:37] <Juerd> But running "dh-make-perl --build --cpan The::Distribution" should suffice.

[12:38] <Juerd> afk again

[12:53] *** stennie joined
[12:55] <svnbot6> r9778 | ruoso++ | AST-Design subtree in pX/Common. This subtree can be used to study how the AST for different languages should look like.

[12:56] * ruoso added a first sketch on a Perl 5 AST in this subtree

[12:57] <ruoso> BTW, everything in this subtree was just a first sketch... please change it at will..

[13:01] <svnbot6> r9779 | ruoso++ | first change in the Perl5/helloworld AST

[13:02] * ruoso has a meeting

[13:08] <KingDiamond> Juerd: okay, will do

[13:08] *** clkao joined
[13:15] *** fglock joined
[13:17] <audreyt> fglock: I've prepared a tarball (tested) for you at http://perlcabal.org/~autrijus/tmp/Pugs-Compiler-Rule-0.02.tar.gz

[13:18] <fglock> audreyt: I sent it to CPAN yesterday :)

[13:19] <fglock> how do you 'make dist' on PCR?

[13:20] <audreyt> fglock: copy it to another path (not under pugs)

[13:20] <audreyt> then "perl Makefile.PL ; make dist"

[13:20] <audreyt> (need to have Module::Install installed)

[13:20] <fglock> ok

[13:21] <fglock> I think the full p6 compiler won't be ready by apr 1st :(

[13:21] <svnbot6> r9780 | fglock++ | PCR - implemented '%hash' - pmurias++

[13:22] <audreyt> it wouldn't... but we can send off a PR that talks about lrep.p6 :)

[13:22] <audreyt> ooooh %hash implement!

[13:22] <audreyt> wow!

[13:22] <audreyt> that's, like, the critical step :)

[13:23] <fglock> cool - we still have some days to finish then

[13:27] <fglock> there is an infinite loop in last test in t/06-subrule.t - I can't find why

[13:27] <audreyt> k. I need to crash now -- <3hr of sleep last night and a very long day

[13:28] <audreyt> got a lot of hacking done though... and learned quite a bit around YARV and ruby internals

[13:28] <fglock> audreyt: have a good night!

[13:28] <audreyt> thanks!

[13:30] *** Limbic_Region joined
[13:30] <svnbot6> r9781 | audreyt++ | * Filter::Simple::Cached support in Module::Compile

[13:30] <svnbot6> r9781 | audreyt++ |   - drop-in replacement for Filter::Simple

[13:30] <audreyt> ingy: F::S::C is in - pick it up

[13:30] <audreyt> when you have cycles

[13:34] <audreyt> &

[13:36] <fglock> fixed! (weird problem with the match state)

[13:39] <svnbot6> r9782 | fglock++ | PCR - fixed an infinite loop in '%hash'

[13:45] <nnunley> What's the next biggest thing to work on?

[13:47] <fglock> nnunley: I'm always trying to find out

[13:47] <nnunley> :)

[13:48] <nnunley> The subrule tests passe for you?

[13:48] <nnunley> s/passe/pass/

[13:49] <fglock> I'm debugging '%hash' - there is a problem when the value is a subrule - it gets the match internally, but it returns undef

[13:50] <nnunley> Ugh.

[13:53] <fglock>  Ugh indeed

[13:55] <nnunley> Sorry, I just used Devel::CallTrace to watch the call stack fly by.

[14:01] <obra> woot.

[14:01] <obra> So glad that code was useful to someone

[14:03] <nnunley> obra: I find myself using it about once every two weeks or so.

[14:03] <clkao> obra: i noticed that nnunley is addicted to D::CallTrace

[14:03] <nnunley> I can't hold the call stack in my head all the time. ;)

[14:03] *** elmex joined
[14:04] <obra> What would make it more useful for you?

[14:04] <fglock> nnunley: did you find the problem?

[14:04] <obra> hm. Jifty should have CallTrace support in halos

[14:05] <nnunley> obra: It would be nice if there was a DWIMish output for anonymous code blocks.

[14:05] <nnunley> FILE and line number of start of block would work.

[14:07] <obra> *nod* That could be clever

[14:11] <nnunley> fglock: Digging briefly to see if I can figure it out.

[14:15] <fglock> nnunley: I think I found the problem - the separation between compile/runtime is not right - it is recompiling some things at runtime, and this breaks backtracking

[14:18] <nnunley> Yeah, Test 21 has the wrong start.

[14:20] <nnunley> Err, no.  Brain not working right.

[14:22] <fglock> nnunley: Brain is ok - the program is not easy at all

[14:24] *** lichtkind joined
[14:26] <lichtkind> sorry for this begionner style question but we had some rants in our forum about perl6 and the question arose: why := vor binding and not =: ? $A := $B seems to be more shortcut for $A = $A : $B or is it that whats wanted?

[14:27] <nnunley> fglock: I'm finding it tempting to add local *__ANON__ notations to the emitter.

[14:27] <fglock> lichtkind: ':=' is already used in other languages for the same thing

[14:28] *** vel joined
[14:28] <lichtkind> thanks fglock

[14:29] <lichtkind> but isnt it more important to be consistant?

[14:29] <lichtkind> the people here said it would be more logical to the when we use =:

[14:30] <fglock> nnunley: isn't it expensive? the match functions are called thousands of times

[14:32] <fglock> lichtkind: the logic is that people don't have to re-learn, I guess

[14:32] <nnunley> True.  When is the perl5 emitter called?  If you have a debug flag that indicates that it should emit anotations, then you generate code with the ANON notation.

[14:33] <nnunley> And otherwise, not.

[14:33] <fglock> nnunley: that's ok - you can test an %ENV variable

[14:34] <nnunley> Or $main::DEBUG.

[14:34] <fglock> how about DEBUG_ANON ?

[14:35] <fglock> bbiab &

[14:36] <nnunley> Either works.

[14:38] *** xinming joined
[14:54] *** kolibrie joined
[14:58] <lichtkind> ok i have second question is the given/when always tied to smart match or can i say given $level {

[14:58] <lichtkind>     when 60      { laber..  }

[14:58] <lichtkind>     when $_>40 { laber..   }

[14:58] <lichtkind>     default        { laber.. }

[14:58] <lichtkind> }

[14:59] *** nronksr joined
[14:59] <lichtkind> i have synopsys open but together with the  book  it is  a bit misleading

[15:05] <PerlJam> lichtkind: your syntax is correct.

[15:05] <lichtkind> thanks perljam

[15:06] <lichtkind> but ist because the match is so smart or because its executed regularely?

[15:06] <PerlJam> lichtkind: what do you mean?

[15:06] <PerlJam> when and if are almost synonymous

[15:07] <lichtkind> im currently writing a perl6 summery in german for our board to convince some people to go  into perl6

[15:07] <lichtkind> i mean this line when $_>40 { laber.. }

[15:07] <Limbic_Region> lichtkind - what does your given line look like?

[15:07] <Limbic_Region> given $foo ~~ $bar ?

[15:07] <lichtkind> my question is how ist this line executed

[15:08] <lichtkind> $level  > 40 or $level ~~ > 40

[15:08] * Limbic_Region thinks the given line is crucial to answering the question but is only lurking so proceeds to shut up now

[15:09] <PerlJam> lichtkind: $level ~~ ($_ > 40)

[15:09] <PerlJam> lichtkind: I think

[15:12] * PerlJam doesn't remember if $_ is aliased to an explicit named topic or not.

[15:13] <PerlJam> oh, it's neither

[15:13] <PerlJam> when $_>40 { ... } is isomorphic with   if $_ > 40 { ... }

[15:14] <lichtkind> thanks folks

[15:14] <PerlJam> boolean expressions are recognized at compile time and the smart match semantics don't apply

[15:15] <PerlJam> (according to A04)

[15:15] <lichtkind> your great

[15:16] * PerlJam wonders if pugs does this ...

[15:23] *** jmcadams joined
[15:23] *** jmcadams left
[15:32] *** nothingmuch joined
[15:35] *** hexmode joined
[15:39] *** chris2 joined
[15:44] *** justatheory joined
[15:55] *** bsb joined
[16:39] *** justatheory joined
[16:42] *** autark_ joined
[16:42] <svnbot6> r9783 | fglock++ | PCR - fixed Emitter::Rule::Perl5 compile/runtime separation; %hash is

[16:42] <svnbot6> r9783 | fglock++ | broken

[17:04] *** ghenry joined
[17:09] *** GeJ joined
[17:21] <svnbot6> r9784 | fglock++ | PCR - fixed %hash (last error was a wrong test)

[17:26] *** bernhard joined
[17:26] *** ruoso joined
[17:29] <ruoso> nothingmuch, I'm trying to design a Perl 5 AST (it seems such thing really doesn't exist)... my first sketches are in pX/Common/AST-Design... could you take a look at it?

[17:31] <ruoso> nothingmuch, btw... feel free to change it at will...

[17:32] *** stevan joined
[17:37] *** stennie joined
[17:50] <fglock> ruoso: h!

[17:50] <fglock> hi!

[17:50] *** cjeris joined
[17:55] <nothingmuch> ruoso: i am not sure I can help with that

[17:55] <nothingmuch> and either way i'm a bit low on TUITs right now

[17:55] <nothingmuch> you should poke at rgs and TimToady as they really know they're stuff

[17:55] <nothingmuch> their

[17:55] <nothingmuch> and also you might be able to ask on perl5-porters and ger a reasonable reply

[17:56] <ruoso> nothingmuch, ok... thanks anyway

[17:56] <nothingmuch> other possible victims include sky_, lathos, diotalevi, xmath (we ought to invite him here - Juerd: can you persuade?)

[17:56] <rgs> ruoso: you can dump the perl 5 optree with B::Concise, but it's a bit far from an AST...

[17:57] <ruoso> rgs, yes... that's why I'm trying to create an AST

[17:57] <nothingmuch> rgs: ruoso is trhing to design an AST for perl 5;-)

[17:57] <rgs> I've read the backlog :)

[17:57] <rgs> ruoso: have you looked at MAD ?

[17:57] <ruoso> rgs, MAD?

[17:57] <rgs> larry recently patched bleadperl to decorate optrees with extra syntactic info

[17:58] <ruoso> hhmm...

[17:58] <rgs> you need to compile it with the proper option

[17:58] <ruoso> rgs, but at this moment, I'm trying to draw how the AST should look like at the end

[17:58] <rgs> extra-bleeding edge stuff !

[17:59] <ruoso> rgs, I've made some first sketches on px/Common/AST-Design subtree

[18:02] <nothingmuch> ruoso: i suggest you model it after the P6 AST

[18:02] <nothingmuch> but slightly less parse-ish

[18:02] <rgs> what's the goal ?

[18:02] <ruoso> nothingmuch, the problem is that the P6 AST seems too parse-ish

[18:03] <nothingmuch> rgs: IIRC helping the translator efforts

[18:03] <ruoso> rgs, http://svn.openfoundry.org/pugs/misc/pX/Common/AST-Design/README

[18:03] <rgs> which translator ? there are many

[18:04] <nothingmuch> ruoso: you really ought to use MAD to write B::AST

[18:04] <rgs> I think so

[18:04] <nothingmuch> also, try to reuse code from B::Deparse

[18:05] <nothingmuch> or at least learn from it

[18:05] <nothingmuch> the reason MAD exists is that exactly for this purpose: making perl 5 sourcecode accessible to the perl 6 compiler toolchain

[18:06] <ruoso> nothingmuch, I'll take a look

[18:06] <ruoso> nothingmuch, any docs to point me?

[18:07] *** siosiosios joined
[18:07] <nothingmuch> ruoso: not that I know of

[18:07] <ruoso> nothingmuch, :)

[18:07] <nothingmuch> i'm only theroretically familiar with perl5 internals ;-)

[18:07] <rgs> there are no mad docs, you need to check out bleadperl and dig it. (and ask TimToady for problems)

[18:07] <nothingmuch> this means that my guesses are usually right, but I need to poke around to actually make them

[18:08] <nothingmuch> ruoso: TimToady also made some YAML MAD trees of most of core perl's perl code

[18:10] <svnbot6> r9785 | fglock++ | PCR - backtracking into subrules disabled - t/06-subrule.t #20

[18:10] *** autark joined
[18:13] <ruoso> is there any chance of learning more about MAD without recompiling perl?

[18:14] <nothingmuch> not really

[18:14] <nothingmuch> MAD was written against 5.9.2 in larry's own tree, and then merged to blead about a month ago as an off by default feature

[18:17] <Limbic_Region> ruoso - TimToady really is "The Man" when it comes to MAD

[18:17] <Limbic_Region> there were a few slides and what not but AFAIK, nothing about details

[18:18] <Limbic_Region> Nicholas might know a thing or two as well now that it is in bleed perl

[18:18] <ruoso> ok...

[18:18] <ruoso> I'll recompile it at home... /me at work now

[18:21] * ruoso will continue thinking about how the AST should looks like in the meanwhile...

[18:28] *** autark__ joined
[18:37] *** siosiosios joined
[18:49] *** autark_ joined
[18:51] <svnbot6> r9786 | ruoso++ | another Perl 5 AST sketch

[18:54] *** nronksr left
[18:57] * ruoso wonders if it is a good idea to have an special "declarations" property in the AST for each "scope" node...

[18:59] *** nnunley joined
[18:59] <svnbot6> r9787 | ruoso++ | "my" is a possible value for the "visibility" property on a variable declaration

[19:07] *** autark joined
[19:09] <nothingmuch> ruoso: remember that lexical scopes in perl are weird WRT perl 6:

[19:09] <nothingmuch> my $x = $x; # the second $x is outer

[19:09] <nothingmuch> $x;

[19:09] <nothingmuch> my $x;

[19:09] <nothingmuch> $x;

[19:09] <nothingmuch> # these are two different Xs

[19:09] <Limbic_Region> and no implicit scoping either (last I heard)

[19:10] <nothingmuch> so while most scopes in a block end in the same place (call it a scope frame) they don't open in the same place

[19:10] <theorbtwo> Indeed, but it comes up less then it did in perl5.

[19:10] <theorbtwo> for my $x (@list) {...} -- in perl5, that $x is scoped to the ....

[19:10] <theorbtwo> In perl5 it wouldn't be, but that whole area doesn't exist anymore.

[19:10] <nothingmuch> yay! http://search.cpan.org/~nuffin/Context-Handle-0.01/ http://search.cpan.org/~nuffin/Config-PackageGlobal-OO-0.01/

[19:11] <theorbtwo> Instead, it's for @list -> $x {...}.  That $x is still scoped to the ..., but that's because it's a function's parameter.

[19:12] <ruoso> nothingmuch, take a look at http://svn.openfoundry.org/pugs/misc/pX/Common/AST-Design/Perl5/block_decl.out

[19:12] <ruoso> nothingmuch, I deal with this by aliasing the variables...

[19:12] <ruoso> so the first $x would receive an alias from the outer scope

[19:13] <ruoso> and the second $x would receive another alias from the inner scope

[19:14] <nothingmuch> hmm

[19:14] <nothingmuch> kinda like ANF

[19:15] <nothingmuch> where all scoped variables are converted into explicit parameters

[19:15] <theorbtwo> Another Normal Form?

[19:15] <nothingmuch> Administrative Normal Form

[19:15] <PerlJam> theorbtwo: I was thinking "Advanced"  :)

[19:16] <nothingmuch> there was an article a while back

[19:16] <nothingmuch> on translating SSA to ANF and back

[19:16] * ruoso really doesn't know the names for such things...

[19:16] <nothingmuch> and how it's easier to optimize ANF

[19:16] <nothingmuch> ruoso: me neither

[19:16] <nothingmuch> =)

[19:16] <nothingmuch> SSA is simple though:

[19:16] <nothingmuch> every name must be assigned only once

[19:16] <nothingmuch> and then "combined" later if applicable

[19:17] <ruoso> nothingmuch, hhmmm... that's kind of the idea I had...

[19:17] <nothingmuch> so read about SSA

[19:17] <nothingmuch> and read about ANF

[19:17] <nothingmuch> and also, please remember to KISS

[19:17] <ruoso> :)

[19:18] <ruoso> what does SSA means?

[19:18] <nothingmuch> single assignment form

[19:18] <nothingmuch> or "Static Single Assignment" as the TLA

[19:19] <nothingmuch> http://en.wikipedia.org/wiki/Static_single_assignment_form

[19:19] <nothingmuch> that's a good explanation

[19:19] <nothingmuch> http://en.wikipedia.org/wiki/Intermediate_representation

[19:19] <nothingmuch> i wish that was a category

[19:19] <ruoso> it seems ANF stands for Algebraic Normal Form

[19:20] <nothingmuch> nuh uh

[19:20] <nothingmuch> two different things

[19:20] <nothingmuch> http://en.wikipedia.org/wiki/Special:Search?search=intermediate+representation&fulltext=Search

[19:20] <nothingmuch> ... that's a pretty good search, IMHO

[19:21] <nothingmuch> read a bit about all the languages for GCC

[19:22] <nothingmuch> GENERIC, GIMPLE, register transfer something

[19:23] *** FurnaceBoy joined
[19:25] *** autark__ joined
[19:39] *** penk joined
[19:43] <nothingmuch> what will we do for april fools?

[19:43] <nothingmuch> maybe audreyt should change her mind and go back to being a guy?

[19:44] <PerlJam> nothingmuch: male -> female -> asexual

[19:45] <Limbic_Region> april fool's is supposed to be fun and I think she takes her gender very seriously

[19:46] *** autark_ joined
[19:46] <PerlJam> Limbic_Region: true.

[19:47] * ruoso thinks anyone who would understand the joke is probably reading this...

[19:48] <nothingmuch> heh, true that

[19:48] <nothingmuch> okay, what about admitting haskell was a stupid mistake, and rewriting Perl 6 in Perl 5? ;-)

[19:48] <nothingmuch> it's plausible

[19:48] * ruoso is actually trying :)

[19:48] <theorbtwo> Right, and not funny.

[19:48] <nothingmuch> we could argue that lrep et all seem like a much wiser development approach

[19:48] <theorbtwo> Admit that it was a mistake, and say that we are rewriting it in brainfuck.

[19:48] <nothingmuch> so we could just scrap the whole haskell runtime and that is

[19:49] <nothingmuch> april fools needs to at least start plausibly =/

[19:49] <Limbic_Region> I was thinking something along the lines of something that was funny, unbelievable, but was actually true (or soon to be true)

[19:49] *** Ara4n is now known as Aragone

[19:49] <theorbtwo> Exactly.  Go several paragraphs before mentioning brainfuck.

[19:49] <Limbic_Region> IOW - Pugs itself would have been a great april fool's joke 2 years ago

[19:49] * Limbic_Region wanders off for a meeting

[19:50] <theorbtwo> Announce that The Perl Foundation is suing Audrey.

[19:51] <nothingmuch> hmm

[19:51] <nothingmuch> that's cool

[19:52] <nothingmuch> theorbtwo++

[19:52] <theorbtwo> ...and has sized all his computers.

[19:52] <nothingmuch> his?

[19:52] <theorbtwo> Point to geeksuntie.

[19:52] <theorbtwo> Er, her.

[19:52] <theorbtwo> Sorry.

[19:52] <nothingmuch> =)

[19:52] <nothingmuch> geeksuntie ;-)

[19:52] * theorbtwo wonders why he has returned from the kitchen without dinner.

[19:53] <nothingmuch> i could register geeksuntie

[19:53] <PerlJam> and what would geeksuntie have to show people?

[19:54] <PerlJam> correspondence similar to what chip had with his $excompany

[19:54] <PerlJam> ?

[19:54] <theorbtwo> A centered font size=400% APRIL FOOL'S!

[19:54] <PerlJam> chip might not find  that funny at all though

[20:01] <gaal> Pugs to replace GCC core in motion to create any-to-any compiler?

[20:07] *** autark joined
[20:12] <PerlJam> plausible but true might involve something with parrot being bundled with firefox, IE, Opera, etc. and perl6/pugs as the new javascript

[20:18] <gaal> plausible but true? :)

[20:18] <ruoso> IE and perl plausible?

[20:18] <PerlJam> yeah, I don't know what I was thinking when I wrote that phrase

[20:18] <gaal> ruoso: uh, sure, that actually exists already

[20:18] <PerlJam> but plausibility is the main goal

[20:18] <gaal> ruoso: it's called PerlScript, unfortunately it never was very popular

[20:18] <PerlJam> and possibly true soon

[20:19] <ruoso> gaal, is it supported by microsoft?

[20:19] <gaal> ruoso: it's an activestate thing

[20:19] <ruoso> ah

[20:19] <PerlJam> gaal: "unfortunately"?  I then you mean "fortunately"

[20:19] * ruoso on the linux world for the last 8 years...

[20:19] <PerlJam> Because that leaves the field wide open for us!

[20:21] <PerlJam> In any case, could you see the copy?  "Industry and open source leaders unite to endorse parrot as the VM of choice for their respective browsers"

[20:21] <PerlJam> <some famous javascript guy> is quoted as saying, "javascript?  That's old technology!   The future is in perl6 and parrot"

[20:21] <PerlJam> etc.

[20:22] <gaal> one thing about pugs is that it's not very april fool's worthy... too many unlikely things have already happened (eg. -CJS)

[20:23] <PerlJam> Or simpler might be "Larry Wall announces today that pugs is good enough and he won't be working on the perl6 design anymore"

[20:23] <gaal> but I think -C.NET may be a 04-01 candidate

[20:24] <gaal> ah! -CPython :)

[20:24] <PerlJam> gaal: See, that should be the real april fools joke.  Just like parrot was an AFJ that came to life, so must they all!  :-)

[20:27] *** autark__ joined
[20:31] <Limbic_Region> PerlJam - that's what I was saying earlier

[20:31] <Limbic_Region> Something that is funny, unbelievable but true (or becomes true)

[20:31] <Limbic_Region> Pugs 2 years ago would have been a great april fool's joke

[20:36] <Limbic_Region> also - playboy.com supporting perl by hosting a cpan mirror - funny, potentially unbelievable, but true

[20:37] <ruoso> so the joke is to make people think it's a joke

[20:38] <ruoso> meta-april's first

[20:40] <Limbic_Region> well, you add icing that is obviously not true like hustler, in an attempt not to be outdone, donates a million dollars to "the other larry" or some such

[20:40] <Limbic_Region> the kernel of truth in it is what keeps people talking about it and perpetuating half truths and generally turning it into an urban legend

[20:41] <Limbic_Region> *shrug* - I guess I am just tired of the "obvious" stuff

[20:53] *** fglock_ joined
[21:00] <Limbic_Region> is IO::Socket::INET and IO::Select currently available or doable in Pugs ?

[21:07] *** SamB joined
[21:09] <fglock> ruoso: ping

[21:11] <ruoso> fglock, pong

[21:12] <fglock> we and audreyt started Common/lrep/Notes-Pugs - it has an (incomplete/outdated?) description of the plans for lrep

[21:12] <fglock> s/we/me/

[21:14] * ruoso looking

[21:17] <ruoso> fglock, it's close to what I was thinking in the last days...

[21:18] <ruoso> fglock, the difference is that I was thinking in a few more steps

[21:18] <ruoso> like

[21:19] <ruoso> PCR today returns a match object

[21:19] <ruoso> a match is not an AST

[21:19] <ruoso> it's too much parse-oriented

[21:19] <ruoso> we could have something to turn a match into a real ast

[21:20] <ruoso> and have this to Perl 5, Perl 6 and PIR

[21:20] <ruoso> then we can have AST translators

[21:20] <ruoso> from Perl 5 AST to Perl 6 AST and vice-versa

[21:20] <ruoso> from Perl 6 AST to PIR and vice-versa

[21:21] <ruoso> and emitters, that take the AST and emit real code

[21:21] <ruoso> so...

[21:21] <fglock> did you see TGE in Parrot?

[21:22] <ruoso> not in deep

[21:23] <ruoso> but it seems a good tool to implement the translators

[21:24] <ruoso> maybe it's just *the* tool

[21:25] <ruoso> but I think we'll have AST -> AST translators

[21:25] * Limbic_Region tries to refrain from calling any a tool as it is unflattering but being called *the* tool is a compliment

[21:27] <fglock> the place to write about the P6 AST is docs/Perl6/API/AST.pod - how about talking to audreyt and TimToady and start working on it

[21:27] *** larsen_ joined
[21:27] <ruoso> fglock, I started a AST-Design subtree

[21:27] <ruoso> in pX/Common

[21:28] *** YetAnotherEric joined
[21:28] <ruoso> but I'm working on a Perl 5 AST first

[21:29] <ruoso> so we can know to what Perl 6 AST should be translated to in order to host perl 6 in perl 5

[21:29] <ruoso> and also, my feet are much more on the ground with Perl 5 than with Perl 6

[21:31] *** KingDiamond joined
[21:32] <ruoso> as I know better Perl 5, it's easier to write the AST...

[21:32] <ruoso> and it can be a base to write the AST for Perl 6 later

[21:32] <ruoso> and TimToady can help without the fear of making Perl 6 the same as Perl 5 :)

[21:35] <fglock> actually, my idea was to make pugs-p5 mostly the same as pugs-haskell - except in a few areas where we can implement new ideas or simplify things

[21:35] <svnbot6> r9788 | ruoso++ | Documenting a possible Perl 5 AST

[21:37] <ruoso> fglock, you mean not emitting Perl 5 code but implementing a interpreter?

[21:40] <fglock> I mean reuse pugs AST

[21:42] <fglock> ruoso: btw, did you see the perl5() method in PCR?

[21:43] <ruoso> yes

[21:43] <ruoso> but I realized that the Match is not the AST

[21:43] <ruoso> and started thinking in the AST

[21:43] <fglock> the capture is the AST - $match->()

[21:43] <ruoso> and then realized that Perl 5 doesn't have an AST

[21:44] <ruoso> fglock, the capture is too much parse-oriented

[21:44] <ruoso> it must be transformed into something more syntax-oriented

[21:46] <ruoso> I mean, sematic-oriented

[21:47] <svnbot6> r9789 | ruoso++ | the root node of the AST is always a package

[21:48] <ruoso> fglock, see AST-Design/Perl5/block_decl.out

[21:48] <ruoso> and AST-Design/Perl5/block_decl.in

[21:48] <ruoso> s/sematic/semantic/

[21:55] <fglock> btw, you can see pugs AST with: pugs -CPIL -e ' my $a = 1; print $a '

[21:56] <fglock> -CPerl5 returns the AST as a P5 object

[22:00] *** zhobson joined
[22:40] *** ruz joined
[22:48] <svnbot6> r9790 | fglock++ | PCR - improved rule/subrule communication; non-working tests for subrule

[22:48] <svnbot6> r9790 | fglock++ | backtracking

[23:03] <nothingmuch> today's 2 hrs: http://pasta.woobling.org:3000/list/

[23:03] <nothingmuch> (tags, broken auto completion)

[23:04] <nothingmuch> oh wait, i fixed auto completion

[23:17] <svnbot6> r9791 | ruoso++ | documenting the Perl 5 AST... several problems to solve... what about globs?

[23:54] *** KingDiamond joined
