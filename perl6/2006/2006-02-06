[00:48] *** kd joined
[01:04] *** frederico joined
[01:09] *** offby1 is now known as bags

[01:10] *** bags is now known as offby1

[01:36] *** xinming joined
[02:18] *** Cryptic_K joined
[02:30] *** kd left
[02:34] *** justatheory joined
[02:43] <dduncan> hello, anyone home?

[02:45] <xinming> :-)

[02:45] <dduncan> do you know if Perl 6 allows a class to define that an automatic default value is given to any variable declared of that type?

[02:45] <dduncan> eg, I would want, if someone said "my MyNum $foo;" ...

[02:46] <dduncan> then right then, $foo contains a new MyNum object having the value zero

[02:46] <dduncan> rather than $foo being undefined

[02:46] <xinming> dduncan: do you mean? my Num $o .= new?

[02:46] <dduncan> yes, I would want that, but without someone explicitly saying .= new()

[02:46] * xinming is forgeting about which one is correct. .= or =. :-P

[02:47] <dduncan> essentially, I want to override the 'my' operator in connection with that class

[02:47] <dduncan> so it defaults to something other than undef, without the programmer specifying so

[02:48] <dduncan> they can of course still give it an explicit value

[02:48] <xinming> dduncan: I don't think you can do that by default. I think You might also want. class A {...}; A( a1 => 'v1', a2 => 'v2' );

[02:48] <dduncan> essentially, I want to have a data type that is always defined

[02:48] <xinming> dduncan: I don't think you can do that.

[02:48] <dduncan> so I'll see if I can request this on p6l

[02:52] *** ayrnieu joined
[02:59] <dduncan> seen stevan

[02:59] <jabbot> dduncan: stevan was seen 1 days 21 hours 34 minutes 52 seconds ago

[02:59] <stevan> hey dduncan 

[03:00] <dduncan> okay, so you're one of the meta-model guys, right?

[03:00] <stevan> i am the only one really :)

[03:00] <dduncan> okay

[03:00] <dduncan> I haven't looked too closely at the model yet ...

[03:01] <dduncan> but does it have an overridable function for default values that a declared variable of a class has?

[03:01] <stevan> best not too,.. it is still very much in flux,.. as is the spec too,.. 

[03:01] <dduncan> said function would return undef by default

[03:01] <dduncan> I'm writing to p6l now to request this, but thought I'd ask if it already existed or not

[03:01] <stevan> can you give a code example

[03:01] <dduncan> okay ...

[03:02] <dduncan> my Foo $bar; # $bar automatically contains some defined value that was specified in class Foo

[03:02] <dduncan> tjat

[03:02] <dduncan> that's the usage case

[03:02] <stevan> hmm

[03:02] <stevan> so just by declaring $bar to be a Foo,.. it is something

[03:02] <dduncan> I know perl 6 has overloading hooks defined all over the place, so there should be one here too

[03:02] <stevan> an instance of Foo i assume

[03:03] <dduncan> yes

[03:03] <stevan> what do you want to $bar to be able to do?

[03:03] <dduncan> for example, I want to be able to declare a class where variables of that class are never undefined

[03:03] <dduncan> so, ...

[03:03] <dduncan> 1. they get a default value on declaration

[03:04] <dduncan> 2. setting them to undef causes something else to happen, such as an exception or the default value

[03:04] <stevan> hmmm

[03:04] <dduncan> the latter case can be handled by overloading '=' I think, if that's possible

[03:04] <stevan> this is exact opposite of Larry's "class but undef" thing

[03:04] <dduncan> I'm just looking for an elegant solution

[03:04] <stevan> I dont know if you can overload assignment

[03:04] <stevan> well according to Larry

[03:04] <dduncan> though overloading assignment may not be necessary per se

[03:05] <stevan> when you do my Foo $bar;

[03:05] <stevan> $bar is an instance of Foo, but a somewhat special instance of Foo

[03:05] <stevan> an instance which you can call methods on, but which evaluates to undef

[03:05] <stevan> so you can do:

[03:05] <stevan> my Foo $bar;

[03:05] <dduncan> so in that case, I want to control what that special instance is

[03:05] <stevan> $bar.isa(Foo)

[03:05] <stevan> and it reutnr true

[03:06] <stevan> but if ($bar) { "this would not be reached" }

[03:06] <dduncan> eg, for my NumType $num; # now contains zero

[03:06] <stevan> because $bar is "technically" no defined yet

[03:06] <stevan> yeah I think that might be difficult

[03:06] <dduncan> or, my MyStr $str; # now contains ''

[03:07] <stevan> what is the differrence with doing: my MyStr $str .= new();

[03:07] <dduncan> if the user leaves the ending off, the value is undefined

[03:07] <stevan> this will ensure the instance is created.. then you can deal with the default then

[03:07] <stevan> yes

[03:07] <dduncan> I want to have a defined value even if the user doesn't assign one

[03:08] <stevan> you might be able to do this kind of trickery with the metamodel,.. but we have not figured it out yet

[03:08] <dduncan> mind you ...

[03:08] <stevan> this touches on the repr type issue which I have been babbling about lately

[03:08] <dduncan> now, I'm assuming that the current Perl 6 ...

[03:08] <stevan> suggest it on p6l

[03:08] <stevan> see what happens

[03:09] <dduncan> if you define my Foo $foo = new Bar; # throws an exceptoin

[03:09] <stevan> unless Bar.isa(Foo)

[03:09] <dduncan> yes

[03:09] <dduncan> or does that also work if Bar.does(Foo) ?

[03:09] <dduncan> that case is what I'm more interested in

[03:09] <stevan> uhm .. probably yes

[03:10] <stevan> actually,.. yes,.. for sure that will work

[03:10] <stevan> but please,.. post on p6l about possibly overriding the special "class but undef" thing

[03:10] *** joepurl joined
[03:10] <stevan> if nothing more,.. maybe you can get Larry to start expanding on that concept 

[03:10] <dduncan> widely speaking, I was looking for an elegant way to declare types that were more strict than normal

[03:11] <stevan> it is somewhat still a little hand wavy

[03:11] <stevan> Yeah I am not sure if that will even "make sense" within the type system,... thats a question for luqui or audreyt 

[03:11] <stevan> but I have to run,.. the movie is starting,.. and my wife is gonna kill me if I dont get off the computer :)

[03:12] <dduncan> okay

[03:12] <stevan> but please,.. post away,.. make sure to mention the "class but undef" idea,.. and get larry talking about it :)

[03:12] * stevan &

[03:12] <dduncan> yes

[03:34] *** diotalevi_ joined
[03:34] <dduncan> stevan, that message is circulated

[03:38] <diotalevi_> Is there an equivalent to `use constant FOO => ...' in pugs?

[03:49] *** Juerd joined
[03:50] <ayrnieu> dio - the usual sub FOO { } ?

[03:51] *** Alias_ joined
[03:59] <diotalevi_> But... that's not usual. The perl5 implementation changed recently and it got reinforced that constant subs really ought to just be declared with the long-time pragma.

[03:59] <Alias_> dduncan: ping?

[03:59] <Alias_> seen dduncan 

[03:59] <jabbot> Alias_: dduncan was seen 25 minutes 19 seconds ago

[04:02] <diotalevi_> So... this is strange. Can I, in general, feed perl5 code to pugs?

[04:13] <dduncan> diotalevi_, "is readonly" is what you want

[04:14] <Alias_> dduncan: You know we were talking about a demo project for Rosetta?

[04:14] <dduncan> eg, "my $foo is readonly = 3;

[04:14] <Alias_> dduncan: I have the perfect one

[04:14] <dduncan> go ahead

[04:14] <Alias_> dduncan: Can't really stay to talk but thought I'd ping you on it

[04:14] <Alias_> dduncan: You know phpMyPgAdmin

[04:14] <dduncan> fyi, my first demo was going to be a simple command line genealogy app ... very trivial

[04:14] <Alias_> or whatever that god-awful mostgres/mysql database manager thingy is?

[04:14] <dduncan> yes, of course

[04:15] <Alias_> ok, so you have a SQL abstraction language

[04:15] <dduncan> I've been planning to have a Perl replacement for that

[04:15] <dduncan> great minds think alike and all that

[04:15] <Alias_> So write a half decent abstracted-backend database interface

[04:15] *** Juerd joined
[04:15] <Alias_> Even if it only does the basics, the fact you can point it at many databases is a huge advantage.

[04:15] <Alias_> It really shows off something you can't do without it

[04:15] <dduncan> however, such a web interface from scratch will still take a fair amount of work if it'll be any good, so I'll want help with that

[04:16] <Alias_> (which is the most important part of a demo)

[04:16] <Alias_> I think you'll find if your code doesn't suck, help will just turn up :)

[04:16] <Alias_> Do it in Catalyst

[04:16] <dduncan> sure

[04:16] * Alias_ volunteers to help out if so

[04:16] <dduncan> in fact, I even proposed such an app as something that a local college can do as a "capstone project"

[04:17] <Alias_> Anyways, I keep find myself wanting a database interface via web that doesn't suck

[04:17] *** joepurl joined
[04:17] <Alias_> And the Catalyst thing means I can even install it over CGI if needed

[04:17] <Alias_> Anyways, just thought I'd let you know I think even a basic generalised database interface would be cool

[04:17] <Alias_> That is all :)

[04:17] * Alias_ heads back to work

[04:17] <dduncan> yes, I agree

[04:17] *** Alias_ left
[04:25] *** justatheory joined
[04:58] *** KingDiamond joined
[05:04] *** SamB joined
[05:06] *** Khisanth joined
[05:14] *** drrho joined
[05:37] *** Cryptic_K joined
[05:50] *** nothingmuch joined
[06:12] <gaal> fr

[06:17] *** joepurl joined
[06:27] <nothingmuch> morning

[06:27] * nothingmuch goes to work

[06:28] *** offby1 is now known as the`

[06:28] *** the` is now known as or

[06:33] *** or is now known as offby1

[06:49] *** K_ joined
[07:03] *** nothingmuch joined
[07:11] *** Aankhen`` joined
[07:13] <nothingmuch> audreyt: ping

[07:19] *** GeJ joined
[07:29] *** KingDiamond joined
[07:37] *** iblechbot joined
[08:48] *** kane_ joined
[08:51] *** elmex joined
[09:10] *** r0nny joined
[09:16] *** Bulgarian left
[09:26] *** rantanplan_ joined
[10:08] <meppl> perl5:Thread::Queue does not work anymore :/

[10:16] *** iblechbot joined
[10:26] <meppl> # pugs -e 'use perl5:Thread::Queue; my $queue=Thread::Queue.new; $queue.enqueue("foo"); my $thread=async { say $queue.dequeue}; $thread.join'

[10:26] <meppl> Segmentation fault

[10:26] <meppl> #

[10:26] <meppl> in older version of pugs it works i mean

[10:27] <meppl> i think

[10:27] <meppl> i didnt try it yet

[10:31] <meppl> s/in /with /

[10:31] *** nnunley joined
[10:33] <azuroth> you're a very confusing person, meppl

[10:34] <meppl> :/

[10:36] <meppl> aeh, so perl5:Thread::Queue;  works without threads

[10:36] <meppl> i dont know why there is segmentation fault

[10:36] <meppl> im to stupid to find it out

[10:43] *** j0sephi joined
[10:53] *** nothingmuch joined
[11:04] *** dada joined
[11:10] *** nnunley_ joined
[11:14] *** scook0 joined
[11:31] *** joepurl joined
[11:50] <azuroth> PHP's preg_replace doesn't let you get at the captures?

[11:51] <Juerd> And how exactly is that something for #perl6?

[11:52] <Juerd> And see tnx.nl/php for a table that has the answer

[11:52] <webmind> perl6 is secretly a project make perl more into php ;)

[11:52] <azuroth> ...sorry, I was just letting out some primitive aggression

[11:53] <integral> pugs doesn't have a PHP frontend yet? :-P

[11:53] <azuroth> or maybe it's motivating everyone, "we've already won" style

[11:53] <Juerd> integral: PHP doesn't have lexical variables.

[11:55] <integral> so it would be easy then!  And might even run on parrot

[12:01] <Kattana> azuroth: use preg_replace_callback, its ugly but you can intercept the matches

[12:02] <Juerd> integral: ...

[12:02] <azuroth> I guess I'd need global to store the match in too?

[12:03] <Juerd> azuroth: Combine preg_match and preg_replace, using the same string for the regex.

[12:03] <azuroth> hmm. I guess it's gotta be done

[12:03] <Juerd> azuroth: Or use expressions in the RHS^Wreplacement string argument of preg_replace to assign to variables :)

[12:04] <azuroth> oh? sounds good

[12:06] <Kattana> azuroth: example of that http://www.php.net/manual/en/function.preg-replace-callback.php#54205

[12:08] <Juerd> Kattana: That requires a named function. That's SO ugly.

[12:08] <Juerd> (And don't forget, all create_function() does is return the NAME of a new NAMED (NOT ANONYMOUS) function.)

[12:09] <azuroth> hahah. that's crazy

[12:09] <Juerd> And because of the expected level of competence in any PHP programmer, create_function is documented as: Usually the args will be passed as a single quote delimited string, and this is also recommended for the code. The reason for using single quoted strings, is to protect the variable names from parsing, otherwise, if you use double quotes there will be a need to escape the variable names, e.g. \$avar.

[12:09] <Juerd> Just after saying "Creates an anonymous function from the parameters passed, and returns a unique name for it."

[12:09] <Juerd> Yeah, now I believe you.

[12:09] <Kattana> Juerd: I said it was ugly already :P

[12:10] <Juerd> Creates an anonymous thing and returns its name. Say what?

[12:10] <azuroth> why would anyone want to use PHP?

[12:10] <Juerd> azuroth: Why are you using it right now?

[12:10] <azuroth> I think it's all that's installed on my work's server. I think it's lobby time, though

[12:10] <Juerd> No Perl installed?!

[12:12] <azuroth> hmm. it _could_ be, but I'll have to check later. I only just realised how bad PHP is, so I wasn't quite so perturbed by the apparent monolinguism

[12:12] <azuroth> (using big words to cover up my mistake ;-) )

[12:14] <Kattana> php5 is not so bad, and its actual made for web-devlopment, its regex integration is sorely lacking compared to perl tho

[12:26] <Juerd> azuroth: 

[12:26] <Juerd> <?$w=escapeshellarg($_SERVER[SCRIPT_FILENAME]);$z=preg_split("/\n\n/",

[12:26] <Juerd> `perl -e'<>;<>;<>;undef$/;eval<>' $w 2>&1`,2);foreach(preg_split("/\n/",$z[0])as

[12:26] <Juerd> $y)header($y);echo$z[1];exit?>

[12:26] <Juerd> print "Content-Type: text/plain\n\n";

[12:26] <Juerd> print "perl++\n" for 1..10;

[12:26] <Juerd> Sorry it took a while to make. PHP just sucks.

[12:27] <azuroth> hahaha. excellent! that's very wizardy.

[12:28] <azuroth> Juerd++

[12:29] <szbalint> heh, I did something similar for my university now-defunct website.

[12:30] <szbalint> ;)

[12:39] <Juerd> I posted it on PM

[12:39] <Juerd> http://perlmonks.org/?node_id=528203

[12:40] <Juerd> Kattana: PHP5 is so bad, by the way.

[12:46] <lypie> Juerd: yup. its a mess

[12:46] <lypie> the create_function addition made me want to cry

[12:50] *** nnunley_ is now known as nnunley

[12:55] <azuroth> night, all

[12:57] <Juerd> lypie: Just that? Many thing in PHP make me cry.

[12:57] <Juerd> http://tnx.nl/php lists a few.

[13:01] <Juerd> Leave a wiki unattended for a year, and this happens: http://tnx.nl/wiki/

[13:03] *** chris2 joined
[13:07] * lypie hates wiki's

[13:09] <lypie> morning chris2

[13:11] <chris2> hi lypie 

[13:13] <szbalint> Are you the maintainer of tnx.nl, Juerd ?

[13:21] *** kolibrie joined
[13:24] *** pdcawley joined
[13:27] *** iblechbot joined
[13:32] *** kane-xs joined
[13:38] *** drbean joined
[14:07] *** Qiang joined
[14:44] <Juerd> szbalint: Yes.

[14:44] <Juerd> lypie: I like wikis. Why do you hate them?

[14:50] <lypie> Juerd: because the developers in general are silly asses

[14:51] <chris2> developers of wikis?

[14:51] <lypie> Juerd: i never did understand why wiki devels have such a hate for things that will affect only a single perfect of the population

[14:51] <lypie> Juerd: (as in, captchas)

[14:51] <lypie> s/perfect/percent/

[14:52] <webmind> lypie, how many and which wikis have you tried and didn't like?

[14:52] <lypie> webmind: i've not tried one i really liked

[14:52] <lypie> webmind: i've used 10-15 randomly. but never invested a lot of time in any given one

[14:52] <webmind> I noticed that

[14:52] <chris2> lypie: remember i wrote nanoki, *you bastard*? :D

[14:52] <Kattana> you hate wikis because you disagree with their devs?

[14:53] <webmind> lypie, so what do you dislike ?

[14:53] <lypie> webmind: i just dislike the overall interaction paradigm. lack of syntax checking and ajax based previews in most of them, and various other utter messups

[14:53] <lypie> webmind: main one being the insane amount of spam i always get on wiki's i'ved tried to use in the past

[14:54] <lypie> Kattana: yes. just like i hate perl5 because i disagree with the design of perl5? ;)

[14:54] <webmind> spam has nothing todo with the developers

[14:54] <lypie> Kattana: note, i'm quite binary in my tastes

[14:54] <webmind> wikis are mainly build on trust

[14:54] <Kattana> hate perl5 because its ugly and kludged together.

[14:54] <lypie> webmind: if they can't code up a 50 line captcha check then sorry.. but... what good is trust?

[14:54] <lypie> webmind: i'm all for login only read/write access personally

[14:54] <webmind> lypie, it gives freedom

[14:55] <webmind> lypie, well that's possible

[14:55] <lypie> webmind: then you can't stop spam

[14:55] <webmind> controlled user acounts does

[14:55] <Juerd> lypie: I don't like wiki SYNTAX. In fact, I hate it.

[14:55] <Kattana> if you are forced to login then all sorts of evil things can be done to you, anonymous is good, hating spam is fine, but not part of wikis

[14:55] <Juerd> lypie: But wikis are useful. Captcha's I haven't noticed yet.

[14:55] <lypie> webmind: i agree, and i'd love a trust metric based wiki with easy to create login accounts

[14:55] <webmind> lypie, the klaphek wiki hardly ever gets spam since you have to register and the front page is locked

[14:55] <lypie> webmind: but i'm still waiting...

[14:56] <lypie> webmind: yeah. i agree with that policy entirely

[14:56] <webmind> well it also works

[14:56] <lypie> webmind: but the number of people that slap you back in he face for using it is just sad

[14:56] <lypie> s/he/the/

[14:56] <webmind> huh ?

[14:56] <webmind> I just said that works

[14:56] <webmind> against spam

[14:56] <lypie> webmind: /me nods. that sounds a sane inbetween

[14:57] <lypie> Juerd: agreed. they are useful

[14:57] <webmind> as for syntax checking and ajax based previews I've got no idea what you are talking about

[14:57] * lypie needs to try confluence at some point

[14:57] <lypie> webmind: i never get the wiki syntax right. it always screws up on me. i'm a n00b

[14:57] <Juerd> webmind: "ajax" is the new hyped term for realtime interaction in otherwise normal html pages.

[14:58] <Juerd> webmind: Generally, it assumes javascript/xml communication. But that's unnecessarily complex in many cases.

[14:58] <lypie> Juerd: i use ajaj in all cases ;) but people love their buzzwords!

[14:58] <Juerd> aja?

[14:58] <Juerd> j?

[14:58] <webmind> lypie, well I find it's with every wiki a bit of getting used to.. but no too bad in mediawiki/docuwiki seems to be ok although sometimes a bit awkward

[14:58] <lypie> webmind: mediawiki seems one of the most sane

[14:59] <lypie> webmind: and the pages are pretty :P

[14:59] <Juerd> I dislike kwiki syntax most. I just don't know how to format code in it.

[14:59] <Juerd> Inline that is.

[14:59] <webmind> docuwiki is kinda the same on the user end.. but a lot lighter

[14:59] <Kattana> mediawiki is the origional isnt it.

[14:59] <webmind> Juerd, ever tried moinmoin ?

[14:59] <Juerd> I just want to be able to use stuff like $foo[0] without escaping anything.

[14:59] <webmind> Kattana, original what ?

[14:59] <Juerd> webmind: Yes, but I don't remember much of it. I think I found it terrible.

[14:59] * chris2 likes markdown

[14:59] <Kattana> wiki

[15:00] <webmind> Juerd, it lacks all useful features and uses WikiWords

[15:00] * webmind really really dislikes WikiWords

[15:00] <Juerd> So do I.

[15:00] <chris2> WikiWords rule! :(

[15:00] <theorbtwo> mediawiki is by no means the eldest.  OTOH, the popularity of WP probably did much to push the profile of wikis in general.

[15:01] <lypie> chris2: wikiwords as in camel case?

[15:01] <chris2> yeah

[15:01] <lypie> chris2: if so, i hate them

[15:01] <lypie> [[blah]] is my preference

[15:01] <chris2> ick

[15:02] <chris2> but i'm special, i know

[15:02] <integral> usemod is one of the older wikis

[15:02] <chris2> yeah

[15:02] <webmind> chris2, how would you link your nick then ?

[15:02] <webmind> ChRis ?

[15:02] <chris2> usemod is based on the first wiki, no?

[15:02] <chris2> ChrisTwo

[15:03] <integral> it's certainly very old and based directly on the original wiki

[15:03] <chris2> and a hell of a mess :)

[15:03] <chris2> but very easy to install

[15:03] <Kattana> mediawiki is the wiki of wikipedia, and the wikipedia founders came up with the wiki idea, so it should be the latest version of the origional?

[15:03] <chris2> nooo

[15:04] <chris2> c2.com was the first wiki

[15:04] <integral> it still *is* the first wiki :)

[15:04] <chris2> yeah ;)

[15:04] <integral> oddmuse is meant to be a sort of better written successor to usemod

[15:04] <chris2> too bad it doesnt show up on google :)

[15:05] <integral> ah, http://en.wikipedia.org/wiki/UseMod posits a history for usemod.

[15:15] *** mauke joined
[15:42] *** Eimi joined
[15:50] *** szbalint_ joined
[15:51] *** szbalint_ is now known as szbalint

[15:55] *** robkinyon joined
[15:56] *** hexmode joined
[16:12] <mauke> why doesn't my pugs build?

[16:12] <integral> what's your error?

[16:13] <mauke> lots of linker errors, probably because of:

[16:13] <mauke> Building Pugs-6.2.11...

[16:13] <mauke> /usr/bin/ar: dist/build/src/Data/Yaml/Syck_stub.o: No such file or directory

[16:13] <mauke> /usr/bin/ar: dist/build/src/Pugs/Embed/Perl5_stub.o: No such file or directory

[16:13] <integral> what's your PERL_EMBED?

[16:13] <integral> are you building from clean?

[16:14] <mauke> I don't have a PERL_EMBED (PUGS_EMBED=perl5), and this is from a fresh svn co ...

[16:14] <integral> err, I mean PUGS_EMBED right

[16:14] <integral> hrm

[16:15] *** vel joined
[16:15] <mauke> the _stub files exist, but they're in ./dist/build, not Data/Yaml|Pugs/Embed (which don't exist)

[16:17] <integral> hmm, weird

[16:17] *** justatheory joined
[16:18] <integral> I have no idea what's going on

[16:25] <wolverian> wow, tons of test errors on fbsd 

[16:26] <wolverian> t/builtins/arrays/push..................................ok 23/41pugs: internal error: EVACUATED object entered! Please report this as a bug to [email@hidden.address] or http://www.sourceforge.net/projects/ghc/

[16:26] <integral> o_O

[16:26] <wolverian> not me compiling it so maybe he forgot something elementary

[16:26] <wolverian> another:

[16:26] <wolverian> t/oo/methods/instance...................................ok 2/17pugs: internal error: stg_ap_pp_ret

[16:27] * theorbtwo thinks a make clean all is called for.

[16:31] *** feng123 joined
[16:35] *** elmex joined
[16:50] *** marmic joined
[17:00] *** elmex_ joined
[17:38] *** nothingmuch joined
[17:38] *** KingDiamond joined
[18:01] *** G2 joined
[18:38] *** nnunley joined
[18:43] *** beppu__ is now known as beppu

[18:43] *** bernhard joined
[19:01] *** larsen joined
[19:02] *** Amnesiac joined
[19:06] *** rantanplan_ joined
[19:19] *** PerlJam joined
[19:24] *** dduncan joined
[19:28] *** Pap joined
[19:32] *** Pap left
[19:54] *** vel joined
[19:57] *** vel joined
[20:06] <meppl> so

[20:06] <meppl> how can i get the reference of a method

[20:06] <meppl> ?

[20:06] <meppl> my $red = \$obj.foo();      doesnt work

[20:07] <meppl> s/red/ref/

[20:09] <gaal> $ref = &foo;

[20:10] <gaal> if you want a closure bound to a particular invocant, make a closure explicitly:

[20:10] <gaal> $ref = { $obj.foo() };

[20:11] <meppl> :D

[20:11] <meppl> thank you very much

[20:12] <gaal> come to think of it I'm unsure how to invoke &foo in the first case. $obj.$ref is wrong.

[20:13] * PerlJam wonders why anyone would want a ref to a method anyway

[20:13] <gaal> jollymorphism!

[20:14] <PerlJam> gaal: why is $obj.$ref wrong in that case?

[20:15] <gaal> eh, I was unclear. maybe it is right p6. pugs doesn't parse it currently. :-)

[20:15] <meppl> gaal, thats what i wanted --> <gaal> $ref = { $obj.foo() };

[20:16] <meppl> yo, in fact i tried     $obj.$ref

[20:16] <meppl> but pugs dont want that

[20:16] <meppl> doesnt

[20:17] <gaal> I lurve p6's lightweight closure syntax

[20:18] <PerlJam> gaal: from S12 -- $obj.$methodname(1,2,3)

[20:18] <PerlJam> looks like a bug that's ripe for fixing in pugs :-)

[20:18] <meppl> perljam, i wanted to send a reference of a method to another thread

[20:18] <meppl> for executing

[20:21] <PerlJam> I suppose that $method $obj: should work too

[20:21] <PerlJam> meppl: slinging objects between threads works nicely?

[20:22] <meppl> i used     use perl5:Thread::Queue;

[20:23] <meppl>                 my $foo = Test2::Test.new(string1 => 'parrot +', string2 => 'pugs');

[20:23] <meppl>                 $queue.enqueue({ $foo.lprint() });

[20:23] <meppl>                 my $thread = async

[20:23] <meppl>                 {

[20:23] <meppl>                         my $blubb = $queue.dequeue();

[20:23] <meppl>                         $blubb();

[20:23] <meppl>                 };

[20:23] <meppl>                 $thread.join;

[20:23] <meppl> so

[20:23] <meppl> it worked

[20:24] <meppl> so

[20:26] <meppl> a GUI could start a CPU-intensiv procedur by this way?

[20:27] <gaal> wow

[20:27] <gaal> that's very cool :)

[20:33] *** premshree_ joined
[20:37] *** nnunley joined
[21:10] *** DesreveR joined
[21:22] *** DaGo joined
[21:26] *** KingDiamond joined
[21:34] *** DesreveR joined
[21:35] *** DesreveR is now known as r0nny

[22:03] *** nothingmuch joined
[22:47] *** gaal joined
[22:47] *** KingDiamond is now known as KingDiamond|away

[22:57] *** drbean joined
[23:36] *** frederico_ joined
[23:37] *** mauke joined
[23:51] *** elmex joined
