[00:00] <putter> I dont suggest the current approach cease working and being used.  simply that the alternative become permissible.

[00:01] <putter> ah well.  just thought I'd raise the idea.

[00:02] <theorbtwo> IIRC, ghc allows you to s|/|.| as much or as little as you like.

[00:02] <putter> found the mono directory listing _vastly_ clearer than its p5 equivalent would have been.

[00:02] <theorbtwo> Er, swap that.

[00:02] <putter> oo, intriguing.  :)

[00:07] * putter ponders whether one could do a  macro infix:<.> ($lhs,$rhs) { $lhs ~~ /^[A-Z]w+$/ && .. ?? "{$lhs}::{$rhs}" !! "$lhs.$rhs" }   so   class Foo.Bar.Hee { ... } worked in p6 too...

[00:12] <putter> Oh, I'll also flag the issue I tripped over several times, of string returning macros wanting to have some control over when the returned string is macro processed.  generally you want it to be, but that precludes defining a macro which overlays a construct defined elsewhere, to provide an ancillary service.

[00:14] <putter> Juerd: there's no reason that macro couldn't be infix:</> instead of infix:<.> ;)

[00:15] <putter> p6 is soo going to need coding standards...

[00:15] <theorbtwo> putter: Yes, there is; it'd conflict /badly/ with your basic ability to divide.

[00:17] <putter> ah, but how often do you divide with a camel-case function on the rhs, and a camel-case something on the left?

[00:18] <wolverian> next you'll want to enforce camel case package names..

[00:19] <putter> na.  just if your going to   use Esthetics::Juerd::SlashSeparator;  you have to follow its documented constraints.

[00:21] <putter> though if there were a hook in the parser for a parse fail, maybe you could wait till it failed, thus not conflicting with anything preexisting, zip in, patch the ast and parser state, and have the parser continue... :-P

[00:23] <putter> sigh.  let's not let things go so long before a release again.  this debugging exercise is a real pain.

[00:31] *** jvoorhis joined
[00:31] <jvoorhis> hi

[00:33] <rafl> Hello Juerd 

[00:33] <rafl> Err..

[00:33] <rafl> Hello jvoorhis 

[00:33] <jvoorhis> :)

[00:33] <jvoorhis> i managed to build parrot and pugs, but i'm not sure what is going on now

[00:34] <jvoorhis> should i be able to define classes interactively in pugs?

[00:34] <audreyt> putter: totally agreed. it seems that I won't have this 3-month life crisis repeated anytime soon :)

[00:34] <putter> lol ;)

[00:34] <audreyt> joepurl: yes. run "pugs" and define classes as usual

[00:34] <jvoorhis> or is that as of yet unimplemented, or did i build it wrong? :)

[00:35] <jvoorhis> http://rafb.net/paste/results/JWVOMi25.html

[00:35] <audreyt> $ pugs

[00:35] <audreyt> pugs> class Foo { has $.bar };

[00:35] <audreyt> pugs> Foo.new(:bar(3)).bar

[00:35] <audreyt> 3

[00:35] <jvoorhis> hmmmm

[00:35] <audreyt> jvoorhis: oh. we use readline and it's line-delimiated

[00:36] <audreyt> instead of waiting until a semicolon

[00:36] <audreyt> that can change

[00:36] <jvoorhis> ah

[00:36] <jvoorhis> audreyt: so as of right now, i have to fit it all on one line?

[00:37] <audreyt> jvoorhis: yeah. better ideas welcome

[00:37] <audreyt> detect unfinished opening braces / parsefil

[00:37] <jvoorhis> audreyt: i've never implemented anything like an interactive interpreter

[00:37] <audreyt> and wait until closing brace?

[00:37] <jvoorhis> but i'd like it to work like ruby's irb

[00:37] <jvoorhis> yeah

[00:37] <jvoorhis> exactly

[00:38] <jvoorhis> i think python works similarly too - it just waits for... err... fewer spaces :)

[00:38] <audreyt> heh

[00:38] <audreyt> not really

[00:38] <audreyt> irb is semantic

[00:38] <audreyt> if you say

[00:38] <audreyt> 1+

[00:38] <audreyt> then it waits for you to continue

[00:38] <jvoorhis> yeah that is true

[00:38] <audreyt> while in py

[00:38] <audreyt> 1+

[00:38] <jvoorhis> it's statement or scope oriented

[00:38] <audreyt> is a syntax error

[00:38] <jvoorhis> :)

[00:39] <jvoorhis> i haven't done enough python to know that for a fact

[00:39] <audreyt> naively, it seems irb is vastly superior

[00:39] * jvoorhis spends *lots* of time in irb

[00:39] <wolverian> is it possible to know that a statement is not terminated in perl6?

[00:39] <audreyt> wolverian: sure

[00:39] <audreyt> you parse it and get a parsefail ;)

[00:39] <putter> pilrun used a blank line

[00:39] <wolverian> audreyt, I guess. ;) 

[00:40] <putter> python's approach is a pain if you are trying to cut and paste

[00:40] <audreyt> indeed

[00:40] <wolverian> that opens up the possibility of side effects, though

[00:40] <audreyt> python is not a very cutandpastable language

[00:40] <jvoorhis> yeah

[00:40] <putter> (every line prefixed with "...")

[00:40] <jvoorhis> heheh

[00:40] <theorbtwo> ...and accidentally finishing early, but we can call that user error.

[00:40] <jvoorhis> isn't every statement in perl ended by a ;?

[00:40] <jvoorhis> or is the semi optional

[00:41] <audreyt> it's optional on the last statement

[00:41] <jvoorhis> it's been a long time since i've used perl

[00:41] <wolverian> it's also optional for statement-level functions

[00:41] <jvoorhis> ok

[00:41] <jvoorhis> that makes sense

[00:41] <jvoorhis> thank you

[00:41] <wolverian> i.e. for, if, etc.

[00:41] <audreyt> jvoorhis: ok, I think we go the irb route. I think.

[00:42] <jvoorhis> audreyt: i don't know how well that approach maps to perl, but i find it very usable

[00:42] <putter> or use a common-lisp or scheme as a prototype ;)

[00:42] <jvoorhis> also

[00:42] <lypanov> audreyt: irb has its own custom parser. it messes up on occasions

[00:42] <jvoorhis> ruby has a line continuation character

[00:42] <jvoorhis> i assume perl does as well?

[00:43] <jvoorhis> example:

[00:43] <audreyt> lypanov: I think we'll use the same parser

[00:43] <jvoorhis> 2 + \

[00:43] <jvoorhis> 2

[00:43] <wolverian> audreyt, 1+ is a syntax error in a python file, too, so are you sure it's not semantic? 

[00:43] <audreyt> jvoorhis: perl has no layout

[00:43] <audreyt> wolverian: the idea is in irb you can do

[00:43] <audreyt> irb(main):001:0> 1 +

[00:43] <audreyt> irb(main):002:0* 2

[00:43] <audreyt> => 3

[00:43] <jvoorhis> ah, ok

[00:43] * lypanov really loves the irb behaviour

[00:43] * jvoorhis does too

[00:43] <audreyt> and I've got it implemented

[00:43] <audreyt> fixing some corner cases.

[00:44] <audreyt> (brb)

[00:44] <jvoorhis> :)

[00:44] <wolverian> audreyt, yes, at least python's repl does the same thing as python itself. it'd be weird if it was valid in the repl but an error in a .py file

[00:44] <lypanov> yeah

[00:44] <jvoorhis> so it seems there are other rubyists here

[00:44] <lypanov> ruby's parser is a tad messed up

[00:44] <jvoorhis> are roles similar to modules in ruby?

[00:44] *** Blicero_ joined
[00:45] * lypanov isn't sure what roles are alas

[00:45] <wolverian> jvoorhis, http://dev.perl.org/perl6/doc/design/syn/S12.html if you haven't read it yet

[00:45] <jvoorhis> wolverian: i've read most of those, but i haven't actually *used* the language yet

[00:46] <jvoorhis> ah

[00:46] <jvoorhis> so it is interface + implementation, but you cannot instantiate a role

[00:46] <Juerd> It's impossible to have a nice philosophical discussion with a mathematician.

[00:46] <jvoorhis> can you add a role to a class at runtime?

[00:47] <wolverian> Juerd, there are nice philosophical discussions?

[00:47] <wolverian> jvoorhis, yes.

[00:47] <Juerd> wolverian: Yes. Are you a mathematician? :)

[00:47] <wolverian> er. to an object, yes. I don't know about classes

[00:47] <Juerd> Because if so: then no.

[00:47] <wolverian> Juerd, I'm half mathematician. 

[00:47] <Juerd> Then you can only get half-nice philosophical discussions :)

[00:47] <jvoorhis> wolverian: ah ok

[00:47] <wolverian> I can switch off that part at will.

[00:48] <Juerd> (I'm trying to phrase this in a way a mathematician, even a half one, will understand :P)

[00:48] <Juerd> wolverian: Then you can get nice philosophical discussions :)

[00:48] <jvoorhis> i've been using ruby for nearly a year now and finally comfortable with metaprogramming ruby, and perl6 has been arousing my curiousity

[00:48] <wolverian> mm, arousal..

[00:48] <Juerd> The key point is to accept that it's impossible for every definitino to be right.

[00:49] <wolverian> I can smell it

[00:49] <Juerd> definition

[00:49] <wolverian> Juerd, mathematicians also tend to walk out of the room if someone uses philosophical induction

[00:49] <Juerd> And if you can mathematically prove something, that may be a side-effect of some other definition also being wrong.

[00:50] <Juerd> wolverian: Yep

[00:52] <putter> the sbcl repl looks like:

[00:53] <putter> * (+ 1

[00:53] <putter> 2)

[00:53] <putter> 3

[00:53] <putter> note that you can now cut and paste the (+ ...2).  something you can't do with the irb repl.

[00:54] * Odin- <3 lispy REPL.

[00:54] <Odin-> P6 *need* something like that. :)

[00:54] <putter> :)

[00:57] <jvoorhis> Odin-: perl syntax isn't quite sexp ;)

[00:57] <Odin-> jvoorhis: That's a temporary condition. ;)

[00:57] <jvoorhis> oh?

[00:57] <putter> it looks like the pil2run backend is completely dead at this point.  but it had a similar repl.  no cruft on secondary lines, and input terminated by a blank line.  easy enough to write your own repl in p6.

[00:58] <putter> lol

[00:59] <dduncan> okay, my smoke of r8819 haskell/darwin is now uploaded

[00:59] <dduncan> says 91% okay

[01:00] <putter> Odin-: there was recently quite a bit of blog discussion (which I couldnt refind when I went looking for it) on common-lisp vs ruby.  one discussion point ended up being the contrast between lisp macros and ruby parse_tree based ones.  sexps being much clearer than explicit ast tags.  given that p6 with have ast macros,

[01:01] <putter> I was wondering if the ast might be abstracted over to get sexp-y like macro writing... ?

[01:02] <putter> dduncan: ok, that's what I got too.  I'm running a smoke-js now.  then maybe a smoke-pir.

[01:02] <audreyt> jvoorhis: how would you like to be listed in the AUTHORS file?

[01:02] <audreyt> (name, etc)

[01:03] <audreyt> jvoorhis: alternately, if you let me know of your email, I can send you a commit bit now so you can add it in yourself :)

[01:03] <jvoorhis> what did i write? :)

[01:03] <Odin-> putter: Hm. Maybe I read it wrong, but when I read the macro parts of the spec, it sounds quite a bit like CL-ish macros.

[01:03] <audreyt> "These people have either submitted

[01:03] <audreyt> patches or suggestions, or their bug reports or comments have inspired"

[01:03] <jvoorhis> aye

[01:03] <jvoorhis> [email@hidden.address]
[01:03] <dduncan> audreyt, is now the start of your day, or did you get up in the middle of sleep?

[01:04] <jvoorhis> full name is Jeremy Voorhis, and that would suit me fine

[01:04] <jvoorhis> and thanks! you're trying to suck me into the community aren't you

[01:04] *** Southen joined
[01:04] *** mlh_ joined
[01:04] <dduncan> no, its not suck, its blow

[01:04] <Odin-> putter: In any case, macros are supposed to be able to return an arbitrary string which is then parsed. There's no possible way CL macros can be more powerful than P6...

[01:04] <audreyt> jvoorhis: well, it's nothing personal

[01:05] <dduncan> there's no such thing as sucking

[01:05] <Odin-> Ease-of-use may be an issue, though...

[01:05] <audreyt> lypanov: you got a commit bit yet? :)

[01:06] <jvoorhis> audreyt: understood - i've been learning about languages lately and i might just spend a good bit of time with p6

[01:06] <jvoorhis> the rules and grammars are especially exciting to me right now

[01:06] <putter> Odin-: but (App (Fun (Var (Varname "f"))) (Args [(Lit (Val (Int 3))]) is a lot harder to deal with than (f 3).  and that wasnt even the full ast. ;)

[01:07] <putter> so could one deal with the ast as if it simply said f(3).  somehow...

[01:07] <Odin-> putter: Point. But you could do a transformation, couldn't you?

[01:07] <Odin-> putter: But ... erh ... couldn't you pass a grammar match object?

[01:08] <Odin-> Operate on that in the macro ... return it?

[01:08] <putter> or macros set you up for a ~~ structure match or something

[01:08] * Odin- not very much in on details, to note.

[01:09] <putter> you mean using a grammar's underspecced ability to match arbitrary objects?  that's a nice idea

[01:09] <audreyt> ...and why am I still implementing features when I should be triaging bugs? ;)

[01:09] <putter> lol

[01:09] <audreyt> it's implemented though.

[01:09] <audreyt> committing

[01:10] <putter> the lack a of a pithy catch phrase?  "pre pre flight"?

[01:11] *** Blicero_ joined
[01:11] <Odin-> putter: Well, since we're talking about the miserably underspecced, but quite clearly planned, macro feature of P6, I don't see why we can't rely on other underspecced parts. ;)

[01:12] <Odin-> Basically the only place which says something less vague than "we'll have macros" is a tiny part of Apoc 6, AFAIK... :/

[01:12] <svnbot6> r8820 | audreyt++ | * First cut a irb-style line continuation in the interactive

[01:12] <svnbot6> r8820 | audreyt++ |   Pugs shell, by waiting for more lines whenever we encounter a

[01:12] <svnbot6> r8820 | audreyt++ |   parsefail.  Suggested by jvoorhis.

[01:13] <putter> indeed.  pause.  this seems like one instance of a general problem.  you have a big hairy graph of data structures and/or objects, and you want to be able to match against it, _and edit/add to it_, using much less hairy code.  how can one do this?

[01:13] * theorbtwo thinks audreyt meant jvoorhis++

[01:13] <audreyt> jvoorhis++

[01:13] <theorbtwo> putter: We need to leave something for CPAN modules.

[01:13] <svnbot6> r8821 | audreyt++ | * add Jemermy "jvoorhis" Voorhis to AUTHORS.

[01:14] <putter> lol

[01:14] <audreyt> pugs> "Hello,

[01:14] <audreyt> ....> world!"

[01:14] <audreyt> "Hello,\nworld!"

[01:14] <audreyt> irb changes the prompt based on what's expected

[01:14] <audreyt> that's trivial to do given parsec's "expected" token group

[01:14] <wolverian> hmm, what about 'say \n "foo";' 

[01:14] <audreyt> but I think I have to stop implementing them now :)

[01:15] <audreyt> wolverian: same as irb

[01:15] <audreyt> "puts" and "say" both runs asis

[01:15] <audreyt> instead of waiting for stuff

[01:15] <wolverian> right. if the line is not a parsefail, it's a statement. otherwise we'd need to wait for ; 

[01:16] <wolverian> thanks for the awesome feature :) audreyt++

[01:16] <theorbtwo> ...and say() is perfectly valid (though somewhat silly) code.

[01:16] <jvoorhis> audreyt++ for listening

[01:16] <audreyt> it's the idea that counts... it's just a 10 line patch :)

[01:16] <jvoorhis> sure

[01:16] <jvoorhis> well, i do spend a lot of time in ruby's repl

[01:16] <theorbtwo> Hm, if you write something that's simply invalid code, and press enter, how can you ever get back to a real promopt?

[01:17] <jvoorhis> so i might be able to make some usability suggestions if i feel any more friction

[01:17] <audreyt> theorbtwo: ^D

[01:17] <theorbtwo> WFM.

[01:17] <theorbtwo> (Should be documented, but that can come much later.)

[01:17] <audreyt> :)

[01:20] <audreyt> putter: thanks for a productive shift :)

[01:20] * audreyt praises putter's alt ctrl shift

[01:20] <putter> *groan*

[01:20] <theorbtwo> Oy.

[01:20] <theorbtwo> putter++

[01:22] <jvoorhis> what does alt ctrl shift do

[01:23] <putter> waits for the next key...

[01:23] <putter> tewk++

[01:23] <theorbtwo> jvoorhis: Controls when the normal control shift is sleeping, of course.

[01:24] <audreyt> jvoorhis: I live in GMT +800, so when I'm about to sleep, putter takes the "night" shift (from my TZ point of view) to work on release engineering, so he assumes alternate control

[01:24] *** Amnesiac joined
[01:24] <jvoorhis> aye

[01:24] <audreyt> you may have heard that pugs is optimized for pun :)

[01:24] * jvoorhis updates and goes golfing :P

[01:25] <nnunley> putter: Slate's prototype system and design is still getting shaken out, so it's still hard to latch on to where to develop from -- I know that most symbols are bound to the lobby, like self, but...  The rest is different enough from (but still close to) smalltalk and self to be a pain.

[01:25] * nnunley groans at audreyt.  "On that note."

[01:26] <audreyt> jvoorhis: oh btw, commit bit sent. welcome aboard!

[01:26] <jvoorhis> thank you

[01:26] <audreyt> now I need to get ready for the new year's eve family gathering and stuff. be back in a few hours

[01:26] <jvoorhis> ah

[01:26] * jvoorhis gets back to ruby hacking until work is over

[01:27] <theorbtwo> Have fun, Audrey.

[01:27] <putter> little red envelopes?

[01:28] <Odin-> So, putter is Commander to audreyt's Captain?

[01:28] <putter> enjoy &

[01:28] <Odin-> Or are they at higher ranks? :>

[01:28] <audreyt> yeah, and as I'm still at the receiving end, red envelopes are good news

[01:28] <audreyt> :) *wave* &

[01:28] * putter is the clown that keeps keeps the crowd from becoming restless during intermission

[01:28] <audreyt> Odin-: my rank is meta-control-shift, I think

[01:29] <putter> old lispm keys... Alt-Control-Shift-Meta-Hyper

[01:29] <Odin-> audreyt: Owh. That means I can't use "aye aye cap'n". :(

[01:29] <putter> talk like a pirate day is but once a year

[01:30] <Odin-> putter: Not if you're a naval officer, I understand... :D

[01:30] <Odin-> But I digress.

[01:30] <putter> lol

[01:31] <putter> oh, and Super.

[01:31] <jvoorhis> actually... no more ruby for today

[01:31] <jvoorhis> it's the weekend now ;)

[01:34] <putter> weekend == python?

[01:34] *** Limbic_Region joined
[01:37] <theorbtwo> G'night, all.

[01:38] *** Amnesiac joined
[01:41] <putter> Hey, emacs and X apparently still support Super Hyper.  And you can use your "Windows" key as Super.  

[01:42] <putter> good night theorbtwo &

[01:42] <putter> http://world.std.com/~jdostale/kbd/SpaceCadet.html

[01:45] <jvoorhis> putter: not python ;)

[01:45] <jvoorhis> possibly pugs

[01:45] <jvoorhis> not rebuilding pugs until i get back to the apt as it is a little intense

[01:47] <putter> ah :)

[01:49] <putter> nnunley: thanks.  # slate feedback

[01:49] *** Blicero_ left
[01:51] <putter> nnunley: it shouldnt be too hard to create an (unspecced) postmultifix to permit smalltalk style function calls.

[01:52] <putter> sub multifix:<foo bar hee> ($a,$b,$c) {42}     say foo 3 bar 4 hee 5;

[01:54] <putter> the grammar engine is apparently specced as a  top-down/bottom-up/top-down-defining-tokens  sandwitch

[02:08] *** Cryptic_K joined
[02:12] <putter> has anyone been successful running embedded parrot lately?

[02:18] *** drbean joined
[02:20] *** beppu joined
[02:20] *** raar joined
[03:05] *** huaehu joined
[03:18] *** renormalist joined
[03:20] <renormalist> Someone awake to help me convert a little perl5 script into pugs/perl6? 

[03:23] *** stocke2 joined
[03:23] <stocke2> hello

[03:25] <huaehu> when will perl6 be released? before 2010? :P

[03:26] <stocke2> does anyone know if perl 6 is going to clean up OO in perl?

[03:28] <dduncan> it sure is!

[03:29] <stocke2> would be nice is kind of a confusing hack right now ;)

[03:30] <dduncan> it should be better in the subsequent release 6.28.0 ... the refactor onto PIL should make objects and other things much cleaner than the current pugs

[03:32] <stocke2> i wonder when perl 6 will be done

[03:33] <dduncan> define "done"

[03:33] <dduncan> perl 6 will always be done, for different definitions of done

[03:35] <stocke2> lol

[03:35] <stocke2> kinda like perl 5.8 is done

[03:36] <stocke2> usable, to the point they start working on the next version

[03:37] <dduncan> well, 6.28.0, perhaps 1 month away, would be a significant milestone, when I see that it can start being seriously used

[03:37] <stocke2> really?

[03:38] <dduncan> yes

[03:38] <stocke2> once it is ready for serious use we need new editions of the oreilly books

[03:38] <dduncan> that would use the new PIL2 as its default foundation, which is much better for building on

[03:38] <huaehu> is there a beta version of perl6? or something to start writting/testing perl6 code?

[03:38] <dduncan> they are currently coming out on an annual basis

[03:38] <dduncan> the perl 6 one that is

[03:39] <dduncan> I think

[04:30] *** azuroth joined
[04:38] *** Amnesiac joined
[04:57] <putter> fyi, there are now r8818 smokes of pugs, js, and pir.

[04:57] <putter> good night &

[04:57] <dduncan> good night

[05:17] <dduncan> anyone here?

[05:23] <azuroth> I am

[05:23] <azuroth> did you need me here to say good night to you? :-p

[05:27] <dduncan> actually, my "good night" was a reply to putter's

[05:27] <dduncan> I will be staying up for a few more hours

[05:28] <dduncan> I was going to ask the opinion of who was here ...

[05:28] <dduncan> I'm going through failing ext/ now with the goal to making them not fail their tests

[05:28] <dduncan> and not die

[05:29] <dduncan> however, in the short term, one way to do this is to remove functionality from them, such as converting private methods into public ones

[05:29] <dduncan> does that sound fine to you?

[05:30] <dduncan> separately, does 'catfile' sound like something that should be built into perl?

[05:30] <dduncan> Config::Tiny's test invokes it, but Config::Tiny doesn't declare it

[05:30] <azuroth> hmm. I don't really know. I think private -> public sounds fine

[05:32] <azuroth> if there was anyone else around, I'm sure they would be more helpful

[05:37] <dduncan> in the case of Config::Tiny, I did a diff between the 6.2.10 distro and the current release, which would have passed all tests, and the current version, showing no changes of significance

[05:37] <dduncan> I think

[05:38] <dduncan> which suggests that catfile was a pugs function before, and now isn't

[05:38] <dduncan> because a test containing it worked before

[05:41] <dduncan> okay, cat_file was declared in ext/File-Spec, and that distro is currently failing some tests ... so fixing File-Spec may fix some other ext/ modules too

[05:41] <dduncan> like Config::Tiny

[05:43] <dduncan> and a quick search shows almost 30 files use 'catfile' ... or did in 6.2.10

[05:45] <azuroth> hmm, okay

[05:46] <dduncan> also the case in the repository

[05:46] <azuroth> what does catfile do?

[05:46] <dduncan> so I'm now focusing on ext/File-Spec

[05:47] <dduncan> I think it just reads in a file, like a combination of open/slurp/close

[05:47] <dduncan> its name derives from the 'cat' unix utility, which was used to pump a disk file into a piped operation

[05:48] <dduncan> short for 'concatenate'

[05:48] <azuroth> oh, cool

[05:49] <dduncan> okay, File-Spec is choking on the absense of &devnull

[05:49] <dduncan> and &cwd

[05:51] <dduncan> I see the first test doesn't have the use_ok workaround that some other tests do, so I'll add it

[05:51] <dduncan> oh wait

[05:52] <dduncan> was looking at the 6.2.10 version ...

[05:56] <dduncan> I think I found the problem

[05:56] <azuroth> excellent :-)

[05:57] <dduncan> essentially, File::Spec itself requires either ::Win32 or ::Unix

[05:57] <dduncan> those latter modules declare and export functions that code using File::Spec wants to use

[05:58] <dduncan> however, the way these are used, said functions are only exported into the File::Spec module namespace itself, not the namespace of the using code, hence the user can't find it

[05:58] <dduncan> it seems that the module was relying on a bug in Pugs that no longer exists, where export made things visible everywhere, rather than just to the user

[05:59] <dduncan> so the fix is to add explicit wrapper functions into File::Spec itself

[06:00] <dduncan> I also notice this comment: # The "require" lines above is deliberately not part of the File::Spec package, because we'd like to import on behalf of the caller. Again, a horrible hack.

[06:00] <dduncan> I'm led to wonder if such a thing ever worked in the perl 5 version

[06:00] <dduncan> or is supposed to work in the perl 6 one

[06:07] <azuroth> ahh

[06:11] <dduncan> I see the perl 5 version did a subclass arrangement, dynamically

[06:28] <azuroth> very off topic, but in terms of database design... say you were logging bunches of chatrooms to databases, would you have a different table for each room..?

[06:32] *** pdcawley joined
[06:41] <dduncan> probably not

[06:41] <dduncan> assuming that each room is handled the same way by your code

[06:41] <dduncan> you just have a table column containing a room id or name to say what room you're dealing with, and the other fields are per room

[06:43] <dduncan> this is conceptually like you have a class for handling a chat room, and you have a separate object for each room

[06:44] <dduncan> you don't make a separate class for each room

[06:44] <dduncan> azuroth

[06:44] <azuroth> hmm, that's a good point

[06:45] <dduncan> generally, you make decisions about separate vs combined tables like you do separate vs combined classes

[06:47] <azuroth> that's actually a lot cooler. I could have the user as an id pointing to the jabber ids table

[06:49] *** Khisanth joined
[06:50] <azuroth> oh, and I can use prepared statements properly

[06:55] <dduncan> yes

[06:55] <dduncan> parameters in prepared statements can only go where a literal can go

[06:56] <azuroth> thanks :-)

[06:56] <dduncan> ah, and File::Spec now seems to be fixed

[06:56] <dduncan> I basically rewrote its main file

[06:57] <dduncan> of course, if it is possible for a subclass of another class to export its methods, then that is probably what the old version was aiming for

[06:57] <dduncan> meanwhile, my version keeps them all as modules, and File::Spec wraps the other worker class ... in an elegant fashion ... I think

[07:06] *** drbean joined
[07:11] *** xern joined
[07:20] *** xern joined
[07:20] <dduncan> push in progress ...

[07:20] <dduncan> slowly ...

[07:22] <svnbot6> r8822 | Darren_Duncan++ |  r2167@darren-duncans-power-mac-g4:  darrenduncan | 2006-01-27 23:18:30 -0800

[07:22] <svnbot6> r8822 | Darren_Duncan++ |  fixed File::Spec in ext/ (rewrote a lot of it) so it works (details also added to ChangeLog), which has a side-effect of making several other ext/ modules pass their tests; the problem mainly concerned the namespaces to which 'is export' exported to

[07:24] <dduncan> so all the ext/File-Spec tests were directly fixed by that

[07:24] <dduncan> also, the ext/Config-Tiny tests were indirectly fixed by that

[07:27] <dduncan> fyi, I don't put things like ext/Config-Tiny working in the ChangeLog since they worked in the last release, which the ChangeLog is a delta record of, and any problems it had weren't in the module itself

[07:27] <azuroth> you should. then you'd get more karma :-)

[07:28] <azuroth> but that makes sense

[07:28] <dduncan> the thing is, I see the 'ChangeLog' file as being for end users ...

[07:28] <dduncan> who want a summary of, in this case, what's different between 6.2.10 and 6.2.11

[07:28] <dduncan> things that were changed, and then undone, in the interim don't appear there

[07:29] <dduncan> things that stopped working and then started working again without direct changes also don't go there

[07:30] <dduncan> details of breaks and fixes in the interim go just in the subversion commit log, for developers that want to know about inter-release revisions

[07:30] <azuroth> ahh yeah

[07:31] <dduncan> the failures in ext/FA-DFA were not affected by my fix

[07:35] <dduncan> also, ext/FindBin also works after my commit

[07:36] <azuroth> I'm playing with jabberd, it's pretty nifty

[07:42] <dduncan> okay, all ext//Pod-Event-Parser now work following my change

[07:42] <svnbot6> r8823 | Darren_Duncan++ |  r2169@darren-duncans-power-mac-g4:  darrenduncan | 2006-01-27 23:40:44 -0800

[07:42] <svnbot6> r8823 | Darren_Duncan++ |  add self to author of File-Spec

[07:47] <dduncan> in total, around 4-5 ext/ distros appear to have been fixed by r8822

[07:49] <dduncan> starting smoke of r8823 ...

[07:50] <dduncan> should be done in 2 hours

[07:52] <dduncan> tomorrow I should be able to fix most of the other ext/ deaths, which I would imagine are the same kind of problem ... is export not doing what it used to ... or maybe something about private subs, but more likely the other given few people use privates afaik

[07:53] <dduncan> audreyt, putter, and whomever, you should focus on any t/ failures ... I'll handle most ext/ failures, since they're probably not due to problems with pugs itself

[07:56] *** Alias_ joined
[07:56] <Alias_> audreyt: ping?

[07:56] <Alias_> Generalised question, are the names of the module schemes for use documented somewhere

[07:58] *** xinming joined
[08:03] *** kane_ joined
[08:10] <Alias_> kane_: ping?

[08:18] *** iblechbot joined
[08:21] <svnbot6> r8824 | audreyt++ | * Various bug triaging, too many to list.

[08:23] *** _bernhard joined
[08:48] *** elmex joined
[08:51] *** avar joined
[09:01] *** G2 joined
[09:03] *** Cryptic_K joined
[09:17] *** lisppaste3 joined
[09:17] *** Alias_ joined
[09:23] *** avarab joined
[10:12] *** wilx joined
[10:18] *** iblechbot joined
[10:38] *** nnunley joined
[10:40] *** j0sephi joined
[11:02] <dduncan> smoke of r8823 is done and uploaded ... now I to bed at 3am

[11:02] <lypanov> night dduncan

[11:03] <dduncan> and a smoke comparison shows 23 fewer test failures

[11:26] *** chris2 joined
[11:27] *** lisppaste3 joined
[11:42] *** xinming joined
[11:51] <kane_> Alias_: pong

[11:51] <Alias_> kane_: Is 6PAN dealing at any level with the whole auth naming scheme in use xxxx-xxxx-xxx

[11:52] <Alias_> Are you providing auths for more than one?

[11:52] <kane_> alias: i'm not sure what you mean... 

[11:52] <Alias_> erm

[11:52] <Alias_> So use has use perl5:something right?

[11:52] <kane_> yeah, it's outlined in one of the synopsis'

[11:52] <kane_> but that's just the language implementation of loading the right file

[11:53] <kane_> that's not 6pan's 'problem' if that makes sense ;)

[11:53] <Alias_> well, 6pan is being the auth for the perl6 scheme or something right?

[11:53] <Alias_> So are you planning to make it also host others?

[11:53] <Alias_> Like a pure parrot one etc etc

[11:53] <kane_> sure.. the 6pan one is actually language independant

[11:54] <kane_> let me grab you a link, sec

[11:54] <Alias_> Did my comments to Audrey about the file layout get back to you btw?

[11:54] <kane_> i dont think so

[11:54] <Alias_> The problem with pregenerating all those index .gz files

[11:55] <kane_> http://svn.pugscode.org/pugs/docs/AES/S22draft.pod

[11:56] <kane_> the section just before the __END__ marker addresses 'use' statemetns

[11:56] <Alias_> yeah that was the one

[11:56] <Alias_> That index structure is a problem

[11:57] <Alias_> I have a better alternative :)

[11:57] <kane_> you mean the section under '=head1 Repositories' ?

[11:57] <Alias_> yep

[11:57] *** elmex joined
[11:58] <kane_> ok, by all means explain what you maen -- i believe rafl got this from the debian layout, and was writing some code to test if this was A Good Way To Go

[11:58] <Alias_> I need to go for a bit, and my time is really limited this weekend, but can we talk later?

[11:58] <kane_> what are you seeing as a problme for htis?

[11:58] <kane_> alias_: perhaps, not sure if i'll be here -- it's weekend here too, and the girlfriend might have some ideas ;)

[11:58] <Alias_> I don't really have time to go into details, but basically the problem is at a conceptual level

[11:59] <Alias_> To do with naming scheme

[11:59] <Alias_> There are some MUCH better ways to handle it, similar to the work on my PhotoN thing...

[11:59] <kane_> ok, nothing's set in stone yet, so might be good to get the 3 of us together and look this over

[12:00] <Alias_> ok, as long as you don't start building before I get a chance to layout an alternative :)

[12:00] <Alias_> (I much better one) :)

[12:00] <Alias_> (A ...

[12:00] <kane_> you're so modest too ;)

[12:00] <kane_> btw, it's rafl who was actually working on this, just FYI ;0)

[12:00] <Alias_> I finally kicked audreyt off cpan ladder 1st position, I get to be confident today

[12:01] <Alias_> of course, only because I stole Module::Install :)

[12:01] <Alias_> When she does the next release I go back to 2

[12:01] <kane_> off for food for me too -- i'll catch you later alias :)

[12:01] <Alias_> later

[12:04] *** r0nny joined
[12:06] <rafl> Alias_: Why do you update Module::Install just a few hours after I updated it in Debian? :-P

[12:07] <Alias_> heh

[12:07] <Alias_> sorry

[12:07] <Alias_> There was a problem with install_share

[12:07] <Alias_> it was installing files into arch, not lib

[12:07] <Alias_> And so file::sharedir and (now) file;:userconfig were getting confused

[12:08] <Alias_> Shouldn't effect anything that doesn't use File::ShareDir

[12:08] * rafl prepares a new upload..

[12:08] <Alias_> You don't have it automated?

[12:09] <rafl> I have pretty much everything automated that's worth being automated.

[12:09] <Alias_> ok

[12:09] <rafl> But you can't do everything in an automated fashion.

[12:10] <rafl> I look up the changelog for every release and see if it concerns packaging stuff, new dependencies, etc..

[12:10] <lypanov> bah. just a simple ai

[12:14] <Alias_> fair enough though

[12:14] <Alias_> About the only thing I don't have automated for my development now is the actual upload

[12:14] <Alias_> just in case :)

[12:16] <Alias_> I can see how there's similar issues with M:I

[12:38] *** merlyn joined
[12:39] * merlyn stares at his future {grin}

[12:39] <Juerd> Hi merlyn 

[12:47] <merlyn> hey

[12:47] <merlyn> Just seeing if I remembered my freenode password after 48 hours. :)

[12:47] <merlyn> woke up with that "omg... did I forget it again?" feeling. :)

[12:49] <Juerd> Freenode sucks immensely because of the nickserv crap

[12:49] <Juerd> The people who declared private messages a great risk, and think this is a solution, should be punished.

[12:52] *** chris2 joined
[13:04] <lypanov> Juerd: just having NickServ reply when you privmsg would already help so damn much

[13:04] <theorbtwo> Hm, I could of sworn he did, but he doesn't seem to now...

[13:06] <theorbtwo> Oh, yes, he does, my irssi just didn't highlight the window correctly.

[13:06] <lypanov> i don't mean a notify, i mean he should privmsg you

[13:07] <theorbtwo> Oh!  You mean nickserv should message you when you try to /msg anybody when not identified.

[13:07] <theorbtwo> Yes, that would be very useful.

[13:09] * lypanov nods

[13:12] * lypanov notes that his local moroccan baker produces some seriously addictive cakes

[13:28] *** kanru joined
[13:50] *** kanru joined
[13:51] *** avar joined
[14:14] <svnbot6> r8825 | audreyt++ | * Pugs.Shell: disable readline's sigwinch and signal handling,

[14:14] <svnbot6> r8825 | audreyt++ |   so the interactive shell no longer randomly segfaults under

[14:14] <svnbot6> r8825 | audreyt++ |   threaded builds.

[14:15] <clkao> audreyt: happy new year

[14:16] <audreyt> happy new year too!

[14:16] <audreyt> probably not going to stay awake

[14:17] <clkao> will be around taipei next week, hack-p?

[14:17] <audreyt> for the chronosaur to appear

[14:17] <clkao> lol

[14:22] *** pdcawley joined
[14:22] <audreyt> hi pdcawley

[14:24] <pdcawley> Hello audrey. How goes?

[14:26] <audreyt> quite well. doing some journaling before sleep

[14:27] <pdcawley> Ah... I look forward to some fascinating reading.

[14:28] <audreyt> :)

[14:29] <obra> 'morning

[14:31] <audreyt> yo

[14:31] <obra> Halos got...close on the plane. I hurt myself by not having cached css and js references on the laptop

[14:32] <obra> also, good tailwinds got us in very early ;)

[14:33] <audreyt> I parsed is as something about solar wind halos attacking the plane and you narrowedly escaped death but injured yourself

[14:33] <audreyt> I'm glad it was a parsefail

[14:33] <obra> heh

[14:34] <obra> audreyt++ # active imagination

[14:34] <audreyt> I get karma by being insane?

[14:34] <audreyt> hm, that's actually the norm here, to think about it

[14:35] *** verve_ joined
[14:35] <obra> indeed it is

[14:35] <obra> constructive insanity

[14:40] *** loggygreg joined
[14:48] *** loggygreg left
[14:52] *** kanru joined
[14:54] *** rantanplan_ joined
[15:08] *** Debolaz joined
[15:18] *** Limbic_Region joined
[15:23] *** Debolaz2 joined
[15:27] <audreyt> whew. two journals in a day ;)

[15:27] * audreyt waves. good night! &

[15:29] <obra> night

[15:41] *** Debolaz joined
[16:20] *** dakkar joined
[16:27] <dakkar> I'm reading S06, and I find the "splat" way to pass named arguments from pairs or hashes potentially confusing...

[16:28] <dakkar> I mean: foo(*%hash) is a splat; foo(%*hash) is a 1-parameter passing a global hash...

[16:28] <dakkar> I think I'll overstress C-t while writing p6 code :/

[16:30] *** pdcawley_ joined
[16:32] <dakkar> still from S06: «To pass pairs out of hash without their being interpreted as named parameters, use %hash<a>:p instead»

[16:33] <dakkar> why? are not pairs detected «at the comma level», so that «doit $pair,1,2,3;   # always a positional arg» ?

[16:33] <dakkar> why should it be diffirent if the pair is coming from a hash subscript expression, instead that from a scalar ref?

[16:34] * dakkar is trying to understand...

[16:35] <dakkar> what is «say *pop(@array);»? is *pop the global sub named 'pop', or a splat of the result?

[16:36] *** dakkar joined
[16:37] * dakkar hit the close button by accident

[17:13] *** Odin-LAP joined
[17:45] *** feng123 joined
[18:37] *** lypanov_ joined
[18:42] *** penk joined
[19:14] *** nothingmuch joined
[19:34] *** lisppaste3 joined
[19:40] *** avar joined
[19:51] *** elmex joined
[20:07] * nothingmuch wonders if perl could do with a prototype object system

[20:07] <nothingmuch> that is just really well hidden

[20:08] <nothingmuch> since prototype models non prototype well, but not vice versa (given enough sugar), and SMD is a subset of MMD functionality, this can really simplify the specs

[20:08] <nothingmuch> all the other crap can be pushed to the Prelude

[20:08] <nothingmuch> and since we assume the prelude can be uptimized in larger chunks we can simply have implementations of those features in PIR for parrot, etc

[20:08] <nothingmuch> like, for speed

[20:09] * nothingmuch thinks Perl 6 ought to be a smaller language than it is, and these kinds of savings could really help

[20:10] <tewk> Iteresting, where can i read about "prototype models non prototype well, but not vice versa (given enough sugar), and SMD is a subset of MMD functionality"

[20:11] <nothingmuch> you sound like Eliza

[20:11] <nothingmuch> p6l archives

[20:12] <nothingmuch> and, err, just common sense really

[20:12] <nothingmuch> our object space stuff could be implemented as a prototype system

[20:12] <nothingmuch> eliminating circularity

[20:12] <nothingmuch> but getting a very close effect

[20:13] <nothingmuch> and SMD isa MMD - well, it just is

[20:13] <nothingmuch> if you only have one MMD variant, it's as if it's single method dispatch

[20:13] <nothingmuch> since there's no alternative

[20:15] <nothingmuch> the plus side is that we get built in prototype OO

[20:15] <nothingmuch> which is good for some things

[20:15] <nothingmuch> and the MMD/SMD implementation details are simpler to spec

[20:30] <meppl> gute nacht

[20:41] <nothingmuch> ciao

[20:46] <meppl> ;)

[20:54] *** Cryptic_K joined
[20:56] *** penk left
[21:01] *** dduncan joined
[21:05] <dduncan> now I'm getting a build failure, following the last update ...

[21:06] <dduncan> Compiling Pugs.Shell       ( src/Pugs/Shell.hs, dist/build/src/Pugs/Shell.o ) /tmp/ghc12129.hc: In function 'PugsziShell_readline_entry': /tmp/ghc12129.hc:121: error: 'rl_catch_signals' undeclared (first use in this function) /tmp/ghc12129.hc:121: error: (Each undeclared identifier is reported only once /tmp/ghc12129.hc:121: error: for each function it appears in.) /tmp/ghc12129.hc:122: error: 'rl_catch_sigwinch' undeclared (first use i

[21:06] <dduncan> I'll try a make clean again 

[21:06] <dduncan> since that seemed to work on a similar problem yesterday

[21:12] *** Cryptic_K joined
[21:24] *** dead joined
[21:33] *** Khisanth joined
[21:35] *** SamB joined
[21:40] <dduncan> that didn't work

[21:40] <dduncan> following 'make realclean'

[21:40] <dduncan> I get the same error in build

[21:40] <dduncan> someone else, please confirm

[21:41] <dduncan> if this is working fine for others, I may try a full checkout directory delete and revert

[21:42] <tewk> dduncan: building now

[21:51] <dduncan> thank you ...

[21:57] <Khisanth> audreyt: you have a typo in your Dec 28 blog entry :)

[22:12] <tewk> dduncan: build just fine.

[22:43] *** vytautas joined
[22:45] <dduncan> okay

[22:46] *** dduncan left
[22:54] *** dduncan joined
[22:55] <dduncan> okay, so I've now done the delete and revert thing with the whole pugs checkout dir

[22:55] <dduncan> now trying 'make' again ...

[22:58] <integral> that looks related to your libreadline...

[23:03] *** pdcawley joined
[23:10] *** pdcawley joined
[23:35] *** pdcawley joined
[23:47] <dduncan> that didn't help ... same error

[23:47] <dduncan> does Pugs have some new dependency that I have to install?

[23:47] <dduncan> or a dependency that differs between platforms?

[23:47] <dduncan> I'm using stock Mac OS X 10.4.4 (Jan, 2006), save for installing the svk 1.06 bundle, ghc 6.4.1

[23:48] <dduncan> several 'rl_catch_*' symbols undeclared

[23:49] <dduncan> in function 'PugsziShell_readline_entry'

[23:49] *** pdcawley joined
[23:49] <dduncan> the only other thing I have yet to try is reverting to an older pugs and see if the problem goes away

[23:50] <dduncan> besides trying that or installing something, all attempts to 'make' fail when compiling Pugs.Shell

[23:50] <integral> ah, r8825 changes Pugs.Shell

[23:51] * dduncan back in a bit

[23:52] <integral> hrm, the change shouldn't have been significant

[23:58] *** pdcawley joined
