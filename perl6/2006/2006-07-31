[00:31] *** nekokak joined
[00:40] <robkinyon> nothingmuch: pong (kinda)

[00:49] *** hikozaemon joined
[01:03] *** tup joined
[01:14] *** weinig|away is now known as weinig

[01:29] *** tup joined
[01:46] *** xern joined
[01:47] *** xern joined
[01:48] *** weinig joined
[01:53] *** cmarcelo left
[01:56] *** bsb joined
[02:06] *** Yappobot is now known as Yappo

[02:09] *** weinig is now known as weinig|sleep

[02:11] *** dolmans joined
[02:12] *** weinig|sleep is now known as weinig

[02:20] *** bsb_ joined
[02:25] *** aufrank joined
[02:31] *** weinig is now known as weinig|sleep

[02:40] <aufrank> anyone around?

[02:41] <audreyt> not me

[02:41] <audreyt> <- at pdx airport

[02:41] <audreyt> but I guess I'll be around for an hour or so :)

[02:42] <aufrank> do you know if TT or Mr. Bunce put their slides online?

[02:42] <aufrank> (hi!)

[02:42] <audreyt> TT's slides will appear on perl.com in a few weeks, usually

[02:43] <audreyt> TimToady probably has a copy of script somewhere in his hard driv, though, so maybe you can ask him to nopaste it :)

[02:43] <audreyt> not sure about tim bunce; mail him?

[02:43] <audreyt> (hi!)

[02:43] <audreyt> thedamian usually does not post his slides online.

[02:43] <aufrank> ok, probably will do that tomorrow

[02:44] <audreyt> cool

[02:44] <aufrank> did you read tim bray's entry about perl6 and parrot?

[02:44] <aufrank> http://www.tbray.org/ongoing/When/200x/2006/07/29/P-Languages

[02:44] <lambdabot> Title: ongoing &#xb7; OSCON&#x2014;Perl &#x26; Python

[02:44] <audreyt> no. reading

[02:45] <aufrank> I think we've already got the unicode string handling he's so excited about in python 3, eh?

[02:45] <aufrank> it's specced that way, at least

[02:46] <audreyt> right.

[02:46] <audreyt> also docs/notes/unicode_draft.

[02:46] <audreyt> but not coded that way yet, no. though perl5 can use some retroporting

[02:47] <audreyt> to get the same sort of sane behaviour, that is

[02:47] <aufrank> so I've been kicking around an idea, and I can't tell if it would be useful or not

[02:47] <audreyt> pray tell

[02:47] <aufrank> I was reading the atom spec that is written in the compact relaxNG syntax

[02:48] <aufrank> and the compact syntax is quite, um, compact

[02:48] <aufrank> it would fit into a pretty easy grammar, I think

[02:49] <aufrank> so I started thinking that if you had a grammar that parsed arbitrary compact relaxng schemas, you could use the match object to build perl6 classes out of the schemas

[02:49] <aufrank> and then use those classes to build parsers for instances of the schema

[02:50] <aufrank> which would give you well-formed objects

[02:50] <aufrank> which could then be serialized any way you wanted

[02:50] <audreyt> have you read emeijer's X/O paper? :)

[02:51] <aufrank> similarly, if you parsed schemas into roles, you could then emit well-formed documents for anything that did the role

[02:51] <aufrank> no, I did not

[02:51] <audreyt> ok. it's a step by step recipe of how to do that :)

[02:51] <aufrank> is it linked on your site right now?

[02:51] *** AppleIver joined
[02:51] <audreyt> http://homepages.cwi.nl/~ralf/xo-impedance-mismatch/

[02:51] <audreyt> yes

[02:51] <lambdabot> Title: Revealing the X/O impedance mismatch

[02:51] <aufrank> excellent

[02:51] <aufrank> I'll grab a copy

[02:51] <audreyt> but yes, having that technology would be great

[02:52] <audreyt> actually it could be built on Moose

[02:52] <audreyt> using PCR and friends

[02:52] <AppleIver> hi all

[02:52] <aufrank> yeah, I think we've got what we need to do it

[02:52] <audreyt> AppleIver: greetings.

[02:52] <aufrank> hi AppleIver

[02:52] <audreyt> aufrank: yup. just need to implement the encoding

[02:52] <audreyt> I mean embedding

[02:52] <AppleIver> what you talk about?

[02:53] *** robkinyon joined
[02:53] <audreyt> AppleIver: making classes out from XML schema

[02:53] <aufrank> audreyt: first step would be a p6 grammar of http://www.oasis-open.org/committees/relax-ng/compact-20021121.html ?

[02:53] <lambdabot> Title: RELAX NG Compact Syntax

[02:53] <AppleIver> it's great!

[02:54] <audreyt> aufrank: EBNF2rules?

[02:55] <AppleIver> audreyt where are u from?

[02:56] <audreyt> aufrank: take http://search.cpan.org/dist/Parse-EBNF/ and emit PCR?

[02:56] <lambdabot> Title: Cal Henderson / Parse-EBNF - search.cpan.org

[02:56] <audreyt> aufrank: I think that's perhaps easiest path

[02:56] <audreyt> AppleIver: I'm from audreyt.org and pugs.blogs.com

[02:56] <aufrank> audreyt: I wasn't aware of that module-- good place to start for sure

[02:56] * audreyt enjoys this "CPAN: The Gathering" game :)

[02:57] <aufrank> audreyt: also satisfyingly general

[02:57] <aufrank> audreyt: I keep meaning to ask about your history with M:tG

[02:57] <AppleIver> c++?

[02:58] <aufrank> did/do you play much?

[02:58] <nothingmuch> aufrank: moose

[02:58] <nothingmuch> can you post the summary?

[02:58] <aufrank> nothingmuch: sure.  of what ;)

[02:59] <nothingmuch> oop

[02:59] <nothingmuch> audreyt: ping =)

[02:59] <audreyt> aufrank: I quit a few years back. I was playing quite competetively -- top 8 in asia pacific championships, a couple showing at worlds -- but that's all before I discovered the far more satisfying cpan: the gathering

[02:59] <nothingmuch> competitive sports is not much fun =/

[03:00] <audreyt> especially with a bunch of barely showered teenage males!

[03:00] <clkao> (!)

[03:00] <nothingmuch> oh no! males!

[03:00] <audreyt> nothingmuch: posting

[03:00] <nothingmuch> http://nothingmuch.woobling.org/may.html

[03:00] <nothingmuch> use that

[03:00] <nothingmuch> it's got better html

[03:00] <audreyt> moose

[03:00] <SamB> cpan: the gathering?

[03:01] <SamB> who publishes that?

[03:01] <audreyt> SamB: cpan.org

[03:01] <nothingmuch> wait, don't use that yet

[03:01] <SamB> audreyt: how is it played?

[03:01] <nothingmuch> now you may use it as it is actually longer than 0 bytes

[03:02] <nothingmuch> SamB: it may or may not involve drinking

[03:02] <SamB> it isn't a TCG?

[03:02] <audreyt> SamB: in normal constructed play, you build a deck (also known as a stack) using about 60 CPAN modules

[03:02] <audreyt> the trick is that 90% of CPAN is useless to your tasks

[03:02] <aufrank> nothingmuch: you use Quantum::Superposition for the CPAN drinking game?

[03:02] <audreyt> and some modules don't play well together

[03:02] <nothingmuch> http://search.cpan.org/dist/Perl6-Bible/lib/Perl6/Bible/S27.pod

[03:02] <lambdabot> Title: Synopsis_27 - Perl Culture [DRAFT] - search.cpan.org

[03:02] *** AppleIver left
[03:02] <nothingmuch> audreyt: i've never actually played =/

[03:02] *** cmarcelo joined
[03:02] <aufrank> I built an all ACME deck once

[03:03] <audreyt> so you'll have to pick and choose the one that has synnergy, those that APIs fit together, so it can run smoothly

[03:03] <audreyt> also, it's a trading card game, so sometime you will have to trade your modules for other people's

[03:03] <audreyt> and build new modules in exchange of new features in other modules that use them

[03:03] <audreyt> also, just like MtG, new generations of modules come at a very fast pace

[03:04] <audreyt> so you'll have to continuously look at the "recents" catalog and remember new cards, what they are useful for, and their fluctuating popularity

[03:04] *** robkinyon joined
[03:05] <audreyt> most newcomers download deck lists from reputable sites like "cpan advent" or "perl.com"

[03:05] <aufrank> a couple of modules are just totally overpowered and lead to changes in the core mechanics

[03:05] <audreyt> but most of the fun comes from unearthing previously-thought-as-uninteresting modules

[03:05] <aufrank> like Switch.pm

[03:05] <audreyt> and turn them into interesting combinations

[03:06] <audreyt> yes. we refer to them as "broken"

[03:06] <aufrank> I didn't want to call Switch.pm broken in this channel ;)

[03:06] <SamB> they don't allow that kind of thing in Haskell...

[03:06] <audreyt> the core team eventually updated the core mechanics for that, making it a new keyword ability

[03:06] <aufrank> thought I might call some of your wackier preprocessor antics broken =P

[03:07] <nothingmuch> acme++

[03:07] <nothingmuch> ingy++

[03:07] <audreyt> and of course, the Sith Edition Rules are totally simplified and would require some relearning...

[03:07] <nothingmuch> we need to play that game at my next birthday

[03:07] <audreyt> *Sixth Edition

[03:07] <aufrank> Sith Edition

[03:07] <aufrank> priceless

[03:07] <audreyt> incidentally, I was part of the expert team helping drafting MtG's Sixth Edition rules...

[03:08] <audreyt> and that was the last time the rule changed in a major way

[03:08] <audreyt> everything worked flawlessly since then.

[03:08] <nothingmuch> you seem to weasel your way into various expert groups fairly consistently

[03:08] <nothingmuch> SamB: did you know that unicode is turing complete because of audreyt?

[03:08] <nothingmuch> ;-)

[03:08] <SamB> turing complete is it?

[03:08] <SamB> it has symbols for turing machines?

[03:08] <nothingmuch> IIRC there was a fixed point combinator somewhere

[03:08] <aufrank> I heard audreyt invented an internet that actually is a series of tubes, and not a big truck

[03:09] <nothingmuch> or maybe that was a joke

[03:09] <audreyt> nothingmuch: that was a joke

[03:09] <nothingmuch> see also ';-)' 4 lines up

[03:09] <SamB> where is the internet that is a big truck?

[03:09] <nothingmuch> audreyt: thanks for posting summary

[03:10] <audreyt> SamB: the .html is ready?

[03:10] <audreyt> er sorry.

[03:10] <audreyt> nothingmuch: the .html is ready?

[03:10] <SamB> heh

[03:11] <aufrank> ok, I've got to climb into bed and do some reading for $work

[03:11] <audreyt> SamB: I was referring to the IDEOGRAPHIC DESCRIPTION CHARACTER characters, which allows for fractal-building algorithm in unicode

[03:11] <SamB> oh?

[03:11] <nothingmuch> audreyt: yes, i told you that it wasn't 0 length anymore =)

[03:12] <nothingmuch> PAY ATTENTION WOMAN!

[03:12] <nothingmuch> http://nothingmuch.woobling.org/may.html <-- here

[03:12] <lambdabot> Title:

[03:12] <audreyt> SamB: i.e. you can say "I have a grapheme here. its upper side is "X", its lower left is "Y", its lower right is yet another composed char, which has the upper side as ..."

[03:12] <nothingmuch> hmm, i should add a title

[03:12] <nothingmuch> to the template

[03:12] <nothingmuch> *shrug*

[03:12] <nothingmuch> note amazingly cool rt ticket autolinkfying

[03:12] <nothingmuch> and <msgid:...> based links

[03:12] <aufrank> audreyt: are you flying back to boston, all the way home, or are you still wandering (while presumably not lost)?

[03:12] <audreyt> SamB: however, recursion depth is currently limited. so I joked that we should have a IDEOGRAPHIC DESCRIPTION CHARACTER FIXPOINT

[03:12] <audreyt> SamB: then it will be turing complete

[03:12] <nothingmuch> which refer to named anchors when the thread is in the summary

[03:13] <nothingmuch> but point to the archives when it is hidden

[03:13] <nothingmuch> SHAZAAAAM

[03:13] <SamB> audreyt: heh

[03:13] <aufrank> nothingmuch++ # fancy linkifying

[03:13] <audreyt> just like SQL and its "WITH RECURSIVE" selects

[03:15] <nothingmuch> aufrank: http://nothingmuch.woobling.org/Mail-Summary-Tools

[03:15] <lambdabot> Title: Index of /Mail-Summary-Tools

[03:15] <nothingmuch> it should be updated with this weekend's hacking by tomorrow

[03:15] <nothingmuch> and on the CPAN within a few days

[03:15] <audreyt> aufrank: pdx -> sea -> tpe (tthat's .tw) in 48 hrs

[03:15] <nothingmuch> although i doubt you actually care ;-)

[03:15] <nothingmuch> good night folks

[03:15] *** lollan joined
[03:15] * nothingmuch adhers to the /away message that has been set for the past 4 hours

[03:15] <audreyt> nothingmuch: 'nite. (posted, btw.)

[03:16] <aufrank> audreyt: good luck with the traveling!

[03:16] <nothingmuch> http://pugs.blogs.com/pugs/2006/07/the_perl_6_summ_1.html#more # EDOUBLEESCAPEDHTML

[03:16] <audreyt> # FIXEDTHANKS

[03:16] <nothingmuch> <h2> not allowed?

[03:17] <nothingmuch> i can emit with alternate headers, like the use.perl html

[03:17] <audreyt> no it's a misclick. nox  fixed

[03:17] <audreyt> *now

[03:18] <nothingmuch> audreyt++

[03:18] <nothingmuch> kudra++

[03:18] <nothingmuch> *poof*

[03:18] <audreyt> kudra++ nothingmuch++

[03:18] <aufrank> ok, gnight all.  congrats on what seems to have been a good OSCON!

[03:19] <audreyt> nite aufrank :)

[03:19] <merlyn> Yeah, wished I could have been there.  But since they haven't invented cloning or teleportation yet...

[03:19] * audreyt prepares for boarding

[03:19] <aufrank> merlyn: how'd the cruise go?

[03:19] <audreyt> well, cloning is actually available, but probably not the variant of cloning that can help you...

[03:20] <merlyn> the cruise was great.  very very warm in europe though

[03:20] <aufrank> glad to hear it went well :)

[03:20] <SamB> also we don't have the mind-transfer thing

[03:20] <merlyn> pompeii was amazing

[03:20] <aufrank> I bet

[03:21] <merlyn> and finally seeing classic sites like the colliseeum of rome, etc

[03:21] <cmarcelo> audreyt: hi! how's going? when will you be online again (supposing "boarding" => leaving)?

[03:21] <aufrank> enjoyed the new article, btw

[03:21] <audreyt> cmarcelo: hi! going quite well. will be online again in... I think 48 hours

[03:22] <audreyt> will pop in from airport(s) if possible

[03:22] <audreyt> but not guaranteed

[03:22] <merlyn> I'm flying for 16 hours today too.

[03:22] <merlyn> west though.  so it'll be a Very Long Monday

[03:22] <cmarcelo> audreyt: in what timezone will you be?

[03:22] <audreyt> will stay on land for an entire month (or maybe more) after this

[03:22] <merlyn> depart rome 11am, arrive portland 8pm

[03:22] <audreyt> cmarcelo: CST, that's GMT+800

[03:23] <merlyn> 9 timezones in th emiddle

[03:23] <audreyt> but I'll still be part of the Pacific Standard Tribe

[03:23] <audreyt> at least for a week or so, I think

[03:24] <cmarcelo> ok... re soc: i'll notify haskell-cafe (when my gmail.com connection come back) about progress and will move towards MArray, DiffArray and family..

[03:26] <audreyt> *nod* does ByteString all work with .Map?

[03:28] <cmarcelo> audreyt: as far as i tested yes. =) it's the best choice for both map types.. tested with checkdup example and with the Atom/Intern experiment...

[03:28] <audreyt> cmarcelo: also, re "reevaluate benefits"

[03:29] *** hikozaem_ joined
[03:29] <audreyt> Bulat's comment about Arrays is mostly because Perl's idea of "Arrays" and his idea about arrays are not neccessarily the same thing :)

[03:29] <audreyt> for fixed-size arrays with no "holes" between elements, surely Judy cannot be any faster

[03:30] <wolverian> heh, I see pugs.blogs.com uses the new MS fonts.. they're nice

[03:30] <audreyt> the use case for pugs's "arrays" is @x with @x[0] set and @x[1000000] set but nothing in between; in that case regular arrays are going to consume a lot of memory

[03:30] *** agentzh joined
[03:31] *** agentzh joined
[03:31] <cmarcelo> audreyt: hmmm

[03:31] <audreyt> and though I think bulat's library does array resizing, it does so by a O(n) memcpy into another memchunk

[03:31] <audreyt> and so is the least efficient possible way to do that

[03:32] <audreyt> so I'd say it's different meaning we attach to the term "array"

[03:32] <audreyt> bottom line is that it's good to offer choices as long as the interface are similar enough.

[03:32] <cmarcelo> audreyt: is it indeed very common in perl this use case you described?

[03:33] <audreyt> skip arrays?

[03:34] <cmarcelo> case: @x[0] and @x[10000000] set and nothing in between...

[03:34] *** hikozae__ joined
[03:35] * cmarcelo don't know what is "skip arrays".. just learn last week what's exact is list context =o) [by reading Learning Perl hehe]

[03:35] <audreyt> s/skip/sparse/

[03:35] <cmarcelo> oh

[03:36] <cmarcelo> well, skip arrays, are they really *that* common?

[03:37] <audreyt> sorry, "sparse array" is the correct term

[03:38] <cmarcelo> I see that Judy could benefit this cases, but I feel that they're a few specialized ones..

[03:39] <audreyt> *nod* honestly, I do not know how common it will be for perl6, or if it will be the default.

[03:39] <audreyt> I know, however, that sparse arrays has come in p6l a few times and it'd be nice to have it as the default container type for arrays

[03:40] <audreyt> and also that pugs currently use a very slow sparse array as default contianer for arrays

[03:40] <audreyt> and also that parrot currently uses a faster sparse array as default container for arrays

[03:40] <cmarcelo> the default is a sparse one?

[03:40] <audreyt> in both pugs and parrot currently, yes

[03:42] <cmarcelo> well, at least we'll catch up with parrot =)..

[03:43] <audreyt> yeah. the current pugs one is horrible :)

[03:43] <audreyt> it doesn't segfault immediately like p5 when you do $_[999999999] = 1

[03:43] <audreyt> but the lazy population is still linear

[03:43] <audreyt> and so could still take a long time

[03:43] <audreyt> and JudyL will definitely help.

[03:45] <audreyt> this is currently O(1) in parrot:

[03:45] <audreyt> .loadlib 'perl_group'

[03:45] <audreyt> .sub main $P0 = new .PerlArray $P0[999999999] = 1

[03:45] <audreyt> .end

[03:45] <audreyt> er

[03:45] <cmarcelo> but, as I see, it's enough to use already existing Map2 (aka JudyL) for this then? (ie. no need new api)

[03:45] <audreyt> .loadlib 'perl_group'

[03:45] <audreyt> .sub main

[03:45] <audreyt>     $P0 = new .PerlArray

[03:45] <audreyt>     $P0[999999999] = 1

[03:45] <audreyt> .end

[03:45] <audreyt> (though with another "9" it would overflow)

[03:46] <audreyt> yes, I think it would be sufficient without new api

[03:46] <audreyt> I wonder if Map2 is better named IntMap...

[03:48] *** hikozaemon joined
[03:48] <cmarcelo> probably yes.. my name choices were all very odd.. is the Array stuff "near" that IHash and friends?

[03:49] <audreyt> it's src/Pugs/Types/Array.hs

[03:49] <audreyt> look for

[03:49] <audreyt> instance ArrayClass IArray where

[03:50] <audreyt> and note the hideously typedef'ed IArray

[03:50] <audreyt> type IArray             = TVar (IntMap (IVar VScalar))

[03:51] <cmarcelo> there's a on-going change on AST, right? this Pugs/Types are kind of independent of this change, right?

[03:51] <audreyt> not entirely independent

[03:51] <audreyt> but the Pugs/Types/*.hs

[03:51] <audreyt> should be reusable

[03:51] <audreyt> that is, the instance definitions

[03:52] <audreyt> will be reudsable

[03:52] <audreyt> so if you make IArray retypedefed into Judy and the instance sitll work

[03:53] <audreyt> it'll just need minimal retooling (probably automatable) to be used by new CapInternals AST

[03:53] <audreyt> (hopefully I'm making some sort of sense :))

[03:54] *** hikozaem_ joined
[03:54] <cmarcelo> yes.. at least until /CapInternals/ =o)

[03:54] <cmarcelo> Cap = Captures ?

[03:54] *** nirgle joined
[03:55] <audreyt> yeah

[03:55] * nirgle woves

[03:55] * nirgle waves

[03:55] <audreyt> new-ast-based-on-the-capture/signature-calling-convention

[03:55] <audreyt> nirgle: *particles*

[03:55] <nirgle> dual

[03:55] <cmarcelo> which Syn describes that?

[03:56] <audreyt> S06

[03:58] *** hikoza___ joined
[04:00] <svnbot6> r11830 | audreyt++ | * Perl6::FAQ::Capture - remove prefix * and change it to prefix [,]

[04:01] <cmarcelo> hmm. for doing pop and unshift would be necessary call (sort . keys) to discover what element should be popped/unshifted.. because judyL doesnt guarantee any order at all.. i wonder if it's too much overhead?

[04:01] <audreyt> judyl is ordered no?

[04:01] <audreyt> only JudyHS is unordered

[04:01] <audreyt> judyl is sorted

[04:02] <cmarcelo> just a sec

[04:03] <audreyt> in particular, judyLPrev etc guarantees sorted order

[04:03] <audreyt> would be somewhat pointless if we had to call sort :)

[04:03] * nirgle waves

[04:03] *** nirgle left
[04:04] <cmarcelo> indeed =o)

[04:04] *** buubot joined
[04:05] <cmarcelo> (finally google.* just came back to work in my ISP)...

[04:06] <audreyt> now boarding for real :)

[04:06] <audreyt> cmarcelo: sorry for having to disappear again

[04:06] <audreyt> *wave*

[04:06] <cmarcelo> ok. =)

[04:10] <spinclad> re big truck internet: 'do not underestimate the bandwidth of a pickup truck tearing down the interstate packed with exabyte tapes' -- ancient usenet proverb

[04:10] <merlyn> it wasn't a pickup truck

[04:10] <merlyn> it was a station wagon

[04:11] <merlyn> and it was pre exabyte

[04:11] <spinclad> 1/2 inch tapes?

[04:11] <merlyn> 9-track

[04:12] <spinclad> it's been filtered through my meme-regenerator

[04:12] <merlyn> do not underestimate the bandwidth of a station wagon loaded with 9-track tapes

[04:12] <merlyn> it was a UUnet guy, if I recall

[04:13] <spinclad> think i remember john gilmore's sig as my source for it

[04:13] <spinclad> and that sounds very like it

[04:26] <dolmans> how to declare a function parameter which is also a function but with a specific signature?

[04:29] <gaal> hullo.

[04:30] <gaal> nothingmuch: pong

[04:31] <audreyt> dolmans: sub moose (Code:(Specific --> Signature) $x) {...}

[04:32] <audreyt> (not yet implemented)

[04:32] <audreyt> &x also works in place of $x

[04:32] <audreyt> dolmans: write a test?

[04:33] <wolverian> (and with &x you can call it as x in the body of the sub, iirc)

[04:33] <audreyt> (do you have a commit bit yet? if not, what's your email addr so I can send you one?)

[04:33] <audreyt> yup, what wolverian said.

[04:35] <dolmans> audreyt: oh, i missed a little while, trying to understand what you says now:-P

[04:35] <gaal> audreyt: oh, is [,] final?

[04:36] *** kanru joined
[04:37] <audreyt> gaal: as final as anything else...

[04:37] <dolmans> basically, i want to port some haskell functions to perl6, but without a type system, i found it is difficult. what do you guys think?

[04:37] <audreyt> dolmans: I think you are totally correct :)

[04:37] <audreyt> please write tests

[04:38] <audreyt> including type variables

[04:38] <dolmans> what tests, i just missed

[04:38] <audreyt> sub flip (Code:(::a, ::b --> ::c), ::b, ::a --> ::c) {...}

[04:39] <audreyt> sorry, boarding for real. other lambdacamels here will walk you through :-)

[04:39] <audreyt> *wave*

[04:39] <dolmans> ah yeah, i'd like to

[04:39] <gaal> audreyt: I thought it was dismissed because it didn't make sense with slurpies and namedds.

[04:39] <gaal> have a nice flight!

[04:39] <dolmans> bonne vayage audreyt

[04:48] <dolmans> so, does perl6 will have the type system like haskell, or just pugs or not either?

[04:59] <gaal> dolmans: it's not fully specced yet, but the intent is to have some typing inferencing, yes.

[05:01] <gaal> there's considerable desire to bridge between fully static typing and dynamic freedom.

[05:02] <dolmans> gaal, got it.

[05:03] <dolmans> introducing static typing into perl6 probably means some very big change perhaps end with uncontrollers, i thought. :-)

[05:04] <dolmans> perhaps this is the right time for language design talent.

[05:05] <gaal> I'm not familiar with the term "uncontroller"...

[05:06] <dolmans> i mean ending with a unsteady status

[05:08] *** amnesiac joined
[05:08] <gaal> gotta go off to $work, see 'ya &

[05:21] *** xern joined
[05:44] *** MacVince joined
[05:59] *** bsb_ left
[05:59] <ingy> seen audreyt

[05:59] <jabbot> ingy: audreyt was seen 1 hours 20 minutes 38 seconds ago

[06:00] <ingy> audreyt: ping

[06:06] <audreyt> pong

[06:06] <audreyt> hi from sea/tac airport

[06:07] <ingy> audreyt: hi

[06:07] <audreyt> dolmans: may I have your email addr to send you a commit bit?

[06:07] <audreyt> ingy: hi

[06:07] <ingy> audreyt: I need you to tel me the various ways you use YAML

[06:08] <ingy> for my grant submission

[06:08] <audreyt> I use it for ~/.svk/config

[06:08] <audreyt> for Jifty::Plugin::REST

[06:08] <audreyt> for handy replacement for Data::Dumper::Dumper

[06:08] <audreyt> for shipping pugs AST from Haskell to Perl6 to Perl5 and back

[06:08] <gaal> Perl 6 bytecode

[06:09] <audreyt> for lots of config files

[06:09] <audreyt> (pugs smoker info, etc)

[06:09] <gaal> handy pugs smoke data intermediate format

[06:10] <audreyt> gaal: how's your $job and schedule about 5 days from now?

[06:10] <audreyt> once I'm over jetlag, I'd like to make CapInternals reality

[06:10] <gaal> whee!

[06:11] <gaal> probably I have a few days available

[06:11] <gaal> you're talking saturday? I have saturday :)

[06:11] <gaal> but not sunday

[06:11] <svnbot6> r11831 | cmarcelo++ | * Judy.Map2: toRevList. And TODO updates.

[06:11] <audreyt> ok.

[06:12] <audreyt> tentatively bookmarked

[06:12] <audreyt> hm. I have 4 hours in the airport

[06:12] * audreyt ponders reading the 8th working draft of XHTML2 as bedtime story

[06:13] <gaal> there are some issues with object dumping but unfortunately I can't really stay on the channel now

[06:13] <gaal> but I could have used your help.

[06:13] <gaal> basically it's a problem of redispating stuff across two typeclasses

[06:13] *** xern joined
[06:13] <audreyt> is there a writeup or backlog somewhere?

[06:14] <gaal> no, it was with lumi in the mini tlv hackathon last week

[06:14] <gaal> but the summary is: there's a typeclass of Perl6Class, with method asPerl6Object

[06:16] <gaal> a typical instance method is asPerl6Object (MyCons aa ab ac) = "new(" ++ (intersperse ", " [plShow aa, plShow ab, plShow ac]) ++ ")"

[06:16] <gaal> class PLit a where plShow :: a -> String

[06:16] <ingy> audreyt: thanks

[06:17] <gaal> for example it makes the string "wouldn't" into qn'would'~"'"~qn't'

[06:17] <gaal> (a better implementation would be welcome, but the point is that there needs to be AN implementation)

[06:17] <audreyt> ok

[06:17] <gaal> the problem is how to testify that aa, ab, and ac all "do" PLit

[06:18] <audreyt> so you want to constraint PLit over all MyCons children

[06:18] <audreyt> without saying that in MyCons itself

[06:18] <gaal> precisely. and hertofore all we needed when drifting was one 'derives' pseudocomment

[06:18] <audreyt> (which would be cumbersome but possible)

[06:18] <gaal> precisely :)

[06:18] <audreyt> well, the canonical solution is moose

[06:18] <audreyt> er

[06:19] <audreyt> I mean overlapping instance

[06:19] <gaal> moose is a good canonical solution

[06:19] <audreyt> instance PLit a where plShow = error "hey look moose"

[06:19] <gaal> how so?

[06:19] <audreyt> and then

[06:19] <audreyt> instance (Show a) => PLit a where plShow = ...some real show...

[06:19] <audreyt> that's it I think

[06:20] <audreyt> the "PLit a" satisfies typechecker

[06:20] <audreyt> at runtime it gets dispatched to the more specific instance(s)

[06:20] <gaal> ah, excellent, so there*is* a way to bless all types into a class in haskell! cool.

[06:20] <gaal> I was wondering about that.

[06:20] <audreyt> :)

[06:20] <audreyt> though I wonder if it makes more sense to just use "show".

[06:20] <audreyt> plShow :: Show a => a -> String

[06:20] <gaal> another problem is really technical

[06:21] <audreyt> then you don't have to do that anymore

[06:21] <gaal> yes, in most cases it is show

[06:21] <audreyt> what cases isn't Show?

[06:21] <gaal> the 2nd problem is that there is a circularity beween the actual file and the instances file, if I want to define PLit instances locally

[06:21] <gaal> I want to avoid havingDrIFT.Perl6Class need to know about AST internals

[06:22] <gaal> sorry, in all cases it is Show

[06:22] <audreyt> erll then you don't need the PLit class

[06:22] <gaal> in most cases plShow = show

[06:23] <gaal> how come? lumi mentioned something like open datatypes and maybe open types, but that's not in ghc is it?

[06:23] *** tup joined
[06:23] <audreyt> it's available as a preprocessor.

[06:23] <audreyt> from andres and ralf

[06:24] <gaal> We don't want to do that do we :)

[06:24] <audreyt> # http://lambda-the-ultimate.org/node/1453

[06:24] <lambdabot> Title: Open data types and open functions | Lambda the Ultimate

[06:24] <audreyt> we don't unless we run out of options :)

[06:24] <audreyt> in any case

[06:24] <gaal> okay, so I don't yet understand the comment about not needing a type PLit

[06:24] <gaal> s/type/class/

[06:25] <audreyt> so basically the types that does Show is exactly the same as types that does PLit

[06:25] <audreyt> but PLit may override plShow for some of the types

[06:25] <audreyt> correct?

[06:25] <ingy> audreyt: http://rafb.net/paste/results/S3EVM640.html

[06:25] <buubot> The paste S3EVM640 has been copied to http://erxz.com/pb/2417

[06:25] <ingy> bbiab

[06:25] <gaal> I guess... but you can't add a method to a class, isn't that it?

[06:26] <audreyt> right... so you do need class PLit, sorry

[06:26] <audreyt> the canonical solution is something like

[06:26] <audreyt> instance Show a => PLit a where plShow = show

[06:26] <audreyt> instance PLit SomeSpecificType where plShow = ...somespecificcode...

[06:26] <audreyt> and enable overlapping instances

[06:26] <audreyt> that's it

[06:27] <gaal> okay, let's see if that works.

[06:27] <gaal> wait no, it doesn't -- I already have that!

[06:28] <gaal> let's dig up a sample error

[06:29] <audreyt> (and let me know what commands I can run to dup it :))

[06:32] <gaal> audreyt: wget http://perlcabal.org/~gaal/tmp/plit.patch ; apply it ; util/drift.pl src/Pugs/AST/CapInternals.hs ; ghc -package-conf third-party/installed/packages.conf -isrc -imisc/pX/gaal -O0 --make misc/pX/gaal/CITest.hs src/pcre/pcre.o -o atest

[06:32] <dolmans> audreyt: i already signed in pugs

[06:32] <gaal> the first issue you'll see is actually (I think) not directly related, it's a circularity thing between the main module and the Instances.hs

[06:33] <gaal> also note the bogus types Bogus and Eval a

[06:34] <gaal> which were meant to be placeholders for future stuff but seem to uncover polymorphism trouble

[06:34] <dolmans> and trying to write some test code, but first i need to coordinate myself to pugs style or any open source project way.

[06:34] *** bsb joined
[06:34] <gaal> dolmans: take a look around the t/ directory

[06:34] <gaal> the README file there is useful.

[06:35] <dolmans> gall: yes that what exactly what i do now

[06:35] <dolmans> *that is

[06:35] <dolmans> sorry, gaal indeed.

[06:35] <audreyt> dolmans: also, add yourself to AUTHORS :)

[06:35] <gaal> dolmans: and don't worry about committing not 100% perfect stuff, we have source control :)

[06:35] <dolmans> audreyt: i'd like to do that!

[06:36] <dolmans> gaal: that what i worried

[06:36] <dolmans> *that is

[06:38] <gaal> audreyt: also, there's something I don't understand about cabal. I wanted to register a newish fps so I can run lambdabot and GOA (xerox++). but when I have a systemwide fps 0.7, pugs won't build.

[06:38] <audreyt> gaal: duped

[06:38] <gaal> I thought cabal was meant to solve that?

[06:38] <audreyt> gaal: it was. and we need to tell cabal to use installed/package.conf and shadow systemwide one

[06:39] *** cookys joined
[06:40] *** tup joined
[06:40] <gaal> I must return to some C++ debugging, sorry, will check back occasionally

[06:42] <audreyt> ok. so it's data Perl6Class a => Eval a = Eval a

[06:42] <audreyt> that was causing all this

[06:42] <audreyt> why do we need the constraint here?

[06:42] <audreyt> if it's relaxed all works

[06:42] <gaal> really?

[06:42] <audreyt> yeah.

[06:43] <audreyt> data Eval a = Eval a

[06:43] <audreyt> then it compiles

[06:43] <gaal> I added it because I was geting an error about 'can't deduce context Perl6Class'...

[06:46] <audreyt> ok. the typesystem-sudoku seems to have been solved

[06:46] <audreyt> I'll post a new patch

[06:50] <gaal> &audrey .= wrap { &?ROUTINE++; call }

[06:52] <gaal> huh that doesn't work.

[06:53] <gaal> guess I'll have to keep doing it manually then: audreyt++ # sudoku solver with class

[06:54] *** nekokak joined
[06:57] *** shachaf joined
[07:03] <audreyt> gaal: http://perlcabal.org/~audreyt/tmp/plit-compiles.patch

[07:03] <audreyt> note that this is purely sudoku-solving

[07:03] <audreyt> and I have no idea what you are doing :)

[07:03] <audreyt> (still uploading)

[07:04] <gaal> just putting the chocolate on the moose

[07:06] <audreyt> mm syntactic chocolate

[07:06] <audreyt> ok, wget now

[07:06] <audreyt> (this is against trunk)

[07:07] <gaal> ACK

[07:08] * audreyt looks at ingy's url now

[07:08] *** iblechbot joined
[07:09] <audreyt> ingy: s/YAML::Syck.pm/YAML::Syck/

[07:10] <audreyt> ingy: not sure if "Syck lacks good unicode support" is at this moment relevant...

[07:10] <audreyt> with $ImplicitUnicode=1

[07:10] <miyagawa> yeah, YAML::Syck works without any problem

[07:11] <miyagawa> it has "good unicode support"

[07:11] <audreyt> ingy: also, the proposal isn't clear whether you'll do a libyaml binding

[07:11] <audreyt> or a pure-perl port of pyyaml

[07:11] <audreyt> or both

[07:11] <ingy> ok

[07:11] <audreyt> arguably you should say pure-perl, and then list its benefits

[07:11] <audreyt> and mention that a libyaml binding would be available on machines with compilers

[07:12] <audreyt> but a pure-perl available-anywhere implementation that is also compat with libyaml

[07:12] <audreyt> is clearly desirable

[07:12] <ingy> yep

[07:12] <audreyt> (though I wonder if we can just embed libyaml and be done with it...)

[07:12] <audreyt> ...but if you would like to work on pureperl yaml.pm that's still a wonderful thing to do

[07:12] <ingy> well it doesn't exist yet...

[07:13] <miyagawa> $JSON::Syck::ImplicitUnicode = 1; encode('JavaScript-UCS', JSON::Syck::Dump($data)) makes me happy

[07:13] <audreyt> do you believe his SoC will fail? :)

[07:14] <audreyt> ooh, Encode::JavaScript::UCS.

[07:14] <audreyt> I wonder if we should fold that back into JSON::syck

[07:14] <audreyt> nah. different layers.

[07:16] <miyagawa> right, different layers

[07:17] <miyagawa> but it works pretty well with JSON::Syck, either by encoding to JavaScript-UCS before or after Dum

[07:17] <miyagawa> Dump

[07:17] <audreyt> cool :)

[07:19] <bsb> ingy: s/bast/best/

[07:22] *** dakkar joined
[07:23] *** Southen joined
[07:30] *** crem joined
[07:37] <gaal> if I have a directory that already has some svn:ignore props on it, does 'svk propset svn:ignore dir somefile' just add somefile, or overwrite everything?

[07:39] <gaal> svk propset svn:ignore somefile dir, that is.

[07:43] <audreyt> overwrite

[07:43] <audreyt> you want propedit

[07:45] <gaal> I really don't, I want this in a script

[07:45] <gaal> pugs has like 30 ignorable files and the property interface sucks

[07:46] <gaal> I got a lot of rejects in the patch :(

[07:49] <audreyt> :/

[07:53] *** drrho joined
[07:59] <dolmans> when make install parrot, i got an error `copy docs/ops/bit.pod to /opt/share/doc/parrot/docs/ops/bit.pod: Permission denied', what dose that mean? i sure have that directory's permission.

[08:01] <audreyt> dolmans: no idea... irc.perl.org #parrot may be slightly more helpful on that

[08:01] <audreyt> or [email@hidden.address]
[08:02] <dolmans> ah, i got it, it says the docs/ops/bit.pod is unreadable! i dunno why that happend.

[08:02] *** Noriega joined
[08:29] *** elmex joined
[08:33] *** integral_ joined
[08:33] *** integral_ is now known as integral

[08:42] *** marmic joined
[08:43] *** buetow joined
[08:46] <nothingmuch> gaal: pong-to-pong

[09:04] *** revision17_ joined
[09:15] <nothingmuch> w 24

[09:24] *** kanru joined
[09:32] *** pdcawley joined
[09:33] <gaal> nothingmuch: well, what? :)

[09:34] *** iblechbot joined
[09:36] <nothingmuch> gaal: nothing now =)

[09:36] <nothingmuch> i wanted you to post a summary when audrey was not here

[09:36] <nothingmuch> but she has since done so herself

[09:36] <nothingmuch> =)

[09:39] * gaal wonders if his blogs.com account is any good after a month passes since creating it

[09:39] <gaal> ...and I don't understand why anyone would want to use that service when LJ gives a lot more features for free

[09:39] <nothingmuch> file hosting?

[09:40] <nothingmuch> *shrug*

[09:40] <nothingmuch> ask audreyt?

[09:40] *** chris2 joined
[09:40] <gaal> does typepad give arbitrary file hosting?

[09:40] <audreyt> yes.

[09:41] <gaal> how much weight?

[09:41] <audreyt> 1,000 megabytes

[09:41] <gaal> nice

[09:42] <audreyt> but the reason I use typepad is just that miyagawa and sky and btrott can be trusted to fix problems speedily :)

[09:42] <gaal> lj gives audiopost and photo hosting only, 2gb for paid accounts

[09:42] <audreyt> and I don't know the lj people that well

[09:43] <gaal> audreyt: brad's fast too :)

[09:43] <audreyt> sure :)

[09:43] <miyagawa> thanks audrey. even though none of Artur, Ben and I are actually working on TypePad

[09:43] <gaal> (LJ people)++

[09:43] <miyagawa> :)

[09:43] <audreyt> miyagawa: I know that :) but you dig up src fast when I asked :)

[09:44] <audreyt> how's vox doing?

[09:45] <miyagawa> it's in a pretty good shape

[09:46] <audreyt> cool :)

[09:52] <pasteling> "cmarcelo" at 200.232.237.151 pasted "SVK/Command/Propadd.pm followed by the needed diff to make it work on trunk.. just a sketch.." (132 lines, 3.5K) at http://sial.org/pbot/18721

[09:52] <cmarcelo> gaal: if you use svk from trunk, you might want to take a look on this paste above...

[10:15] <dolmans> it seems like to build a binary ghc bundled with all kinds of tools suitable for building pugs is a meaningful work.

[10:16] <gaal> cmarcelo: cool!

[10:16] <gaal> dolmans: ? there aren't very many dependencies for pugs...

[10:17] <gaal> and non of them AFAIK need a GHC rebuild!

[10:17] <dolmans> gaal: at least hs-plugins which depends a chain of tools.

[10:18] <dolmans> not ghc itself, really bundled tools.

[10:22] <meppl> guten morgen

[10:30] *** crem_ joined
[10:33] *** xern joined
[10:38] *** kanru joined
[10:50] *** elmex joined
[11:09] *** pdcawley joined
[11:19] <gaal> dolmans: hs-plugins is really, really optional.

[11:27] <nothingmuch> audreyt: ping?

[11:32] <gaal> nothingmuch: I think she's on a long flight

[11:33] <nothingmuch> yeah, i figured

[11:33] * nothingmuch needed pause-admin-fu

[11:33] <nothingmuch> short notice

[11:33] <nothingmuch> ?eval say "Module::Build--" for 1 ...

[11:33] <gaal> what lowercase module are you uploading now? :-P

[11:33] <nothingmuch> nothing of the sort

[11:33] <nothingmuch> but Module::Bane decided it's a good idea to store a version object in the meta.yml

[11:34] *** evalbot_11829 is now known as evalbot_11831

[11:34] <evalbot_11831> OUTPUT[Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build-- Module::Build

[11:34] <nothingmuch> so i uploaded a broken release

[11:34] *** hugues23 joined
[11:34] <nothingmuch> karma for Module::Build?

[11:34] <jabbot> nothingmuch: for Module::Build? has neutral karma

[11:34] <nothingmuch> karma for Module::Build

[11:34] <jabbot> nothingmuch: for Module::Build has neutral karma

[11:34] <gaal> haha

[11:34] <nothingmuch> jabbot: Module::Build--

[11:34] <jabbot> nothingmuch: I'm not sure I understand you fully.

[11:34] <nothingmuch> ugh!

[11:34] <nothingmuch> jabbot: IT FUCKING SUCKS OKAY?!

[11:34] <jabbot> nothingmuch: Tell me more about that.

[11:34] <nothingmuch> head-on-keyboard

[11:34] <gaal> ?eval "orz"

[11:34] <evalbot_11831> "orz"

[11:35] <nothingmuch> oh dear god

[11:35] <nothingmuch> even when the M::B changelog claims to have fixed it it's still broken

[11:35] * nothingmuch reverts to an older version

[11:35] <gaal> This is MyModule, version HASH(0x814ec28)

[11:37] <nothingmuch> http://helgafell.rhi.hi.is/pic26777.jpg

[11:37] <nothingmuch> gaal: yep

[11:39] *** agentzh joined
[11:42] <agentzh> an S05 related question: is "m:/.../" valid?

[11:42] <agentzh> ?eval 'abc' ~~ m:/\w+/

[11:42] <evalbot_11831> Error:  unexpected end of input expecting "\\", "$/", "$!" or ":"

[11:43] <agentzh> hmm...seems not. maybe it's just another synopsis nit. :)

[11:44] <agentzh> ?eval my @a = 1..3; @a[0]++; @a.say

[11:44] <evalbot_11831> OUTPUT[223 ] Bool::True

[11:44] <agentzh> ?eval my @a = 1..3; @a>>++; @a.say

[11:44] <evalbot_11831> Error: Can't modify constant item: VInt 1

[11:45] <agentzh> anyone can tell me what's happening here?

[11:47] <agentzh> ?eval my @a = 1..3; @a>>.say; @a.say

[11:47] <evalbot_11831> Error:  unexpected ">" expecting "::", term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[11:47] <agentzh> :(

[11:49] *** agentzh left
[12:13] *** Aankhen`` joined
[12:33] *** Limbic_Region joined
[12:49] *** mjl69 joined
[12:51] *** pdcawley joined
[12:54] <gaal> agentzh: I think that's just not implemented yet, but should be made to work.

[12:57] *** pdcawley_ joined
[12:58] *** Kattana joined
[13:01] *** mauke_ joined
[13:06] *** esammer is now known as esammer_home

[13:16] *** mauke_ is now known as mauke

[13:16] *** bpphillips joined
[13:26] *** [particle] joined
[13:26] *** mako132 joined
[13:35] <svnbot6> r11832 | fglock++ | pX/Pugs-Compiler-Rule - refactored positional captures in Regex runtime

[13:35] <svnbot6> r11831 | cmarcelo++ | * Judy.Map2: toRevList. And TODO updates.

[13:38] *** frederico joined
[13:46] *** nothingmuch_ joined
[13:50] *** fglock joined
[13:54] *** cmarcelo left
[13:59] *** nothingmuch joined
[14:00] *** miyagawa joined
[14:17] *** hugues23 joined
[14:31] *** hcarty joined
[14:34] *** vel joined
[14:43] *** renormalist joined
[14:51] *** offby1 joined
[14:51] *** offby1 left
[14:59] *** amnesiac joined
[15:04] *** cjeris joined
[15:13] *** cdpruden joined
[15:14] *** bpphillips joined
[15:16] *** foo\ joined
[15:24] *** prefiks joined
[15:26] *** xinming__ joined
[15:27] *** Aankh|Clone joined
[15:33] *** justatheory joined
[15:38] *** MacVince joined
[15:39] *** aufrank joined
[15:52] *** rodi joined
[15:53] *** xinming joined
[16:00] *** xinming joined
[16:03] *** crem joined
[16:04] *** buetow joined
[16:08] *** bpphillip1 joined
[16:10] * gaal mooses

[16:10] *** hexmode joined
[16:16] <aufrank> moose!

[16:17] *** ludan joined
[16:33] <svnbot6> r11833 | gaal++ | * Runtime dumping of Haskell data as Perl 6 objects: asPerl6Object

[16:33] <svnbot6> r11833 | gaal++ |   method works for many of the simpler types in CapInternals.

[16:33] <svnbot6> r11833 | gaal++ |   TODO: hashes, buffers, non-pure types.

[16:33] <svnbot6> r11833 | gaal++ |   lumi++ nothingmuch++ audreyt++

[16:33] <svnbot6> r11833 | gaal++ | * update demos for this in misc/pX/gaal/ (see the source or ask)

[16:33] *** xinming joined
[16:36] <svnbot6> r11834 | gaal++ | some ignore props

[16:36] *** lisppaste3 joined
[16:40] *** Aankhen`` joined
[16:40] * nothingmuch was doing the teddybear role for that commit =)

[16:40] <nothingmuch> btw, how's your new debugging moose acclimating?

[16:41] <ingy> hi

[16:41] <nothingmuch> hi ingy

[16:41] <nothingmuch> (how|what) was the movie?

[16:42] <gaal> nothingmuch: the moose is excellent! doesn't have a name yet

[16:42] <nothingmuch> how about ג'רבוסקון

[16:43] <gaal> I perfer something I'm more likely to remember :-)

[16:45] *** MacVince left
[16:48] <svnbot6> r11835 | gaal++ | * add more ignore props, (uncluttered 'svk st')++

[16:50] <gaal> should .installed-pkg-config, .setup-config, fps.cabal and dist in and around third-party/ be ignored too? I think so but am not sure.

[16:54] <svnbot6> r11836 | gaal++ | correct ignore prop

[17:08] *** Aankh|Clone joined
[17:15] <nothingmuch> http://i75.photobucket.com/albums/i309/Custodius/moosecopy.jpg

[17:16] <nothingmuch> http://i75.photobucket.com/albums/i309/Custodius/moosecopy.jpg

[17:16] <nothingmuch> oops

[17:27] *** fglock joined
[17:30] *** justatheory joined
[17:31] *** penk joined
[17:38] *** pen1 joined
[17:47] *** shachaf joined
[17:54] *** lollan joined
[17:57] *** Aankh|Clone is now known as Aankhen``

[18:01] *** frederico joined
[18:07] *** daxim joined
[18:09] *** robkinyon joined
[18:13] <pmurias> fglock: hi

[18:19] *** weinig|sleep is now known as weinig

[18:24] <pmurias> sorry for not getting round to writing the string parsing part

[18:29] <pmurias> i was on a alogrithmic camp and it was too tiring to write much perl

[18:31] <pmurias> also should the variable interpolation et al. be done after string concatation works?

[18:31] <pmurias> did you look at ext/Parse-Rule?

[18:34] *** pen1 is now known as penk

[18:39] *** vel6608 joined
[18:57] *** hcarty left
[18:58] <ingy> hi audreyt

[18:58] <ingy> er, nm (unless...)

[18:58] <ingy> nothingmuch: ping

[18:59] <nothingmuch> ingy: pong

[18:59] <ingy> want to review my YAML proposal?

[18:59] <nothingmuch> sure

[18:59] <ingy> http://rafb.net/paste/results/QFC4Iw52.txt

[18:59] <ingy> about to send it off...

[19:01] <nothingmuch> Synopsis:  - no quote op?

[19:01] <nothingmuch> |- ?

[19:01] <nothingmuch> or >- ?

[19:01] <nothingmuch> also, benefits should probably be a list ;-)

[19:03] <ingy> oops

[19:03] <nothingmuch> ingy: a little more tech info, methinks

[19:03] <nothingmuch> but then again, i don't relaly know

[19:03] <nothingmuch> show what YAML.pm doesn't have that PyYAML will give it

[19:04] <ingy> ok, thanks

[19:07] <nothingmuch> ingy: i'll be happy to help you with that grant

[19:07] <nothingmuch> that is, without $$$ or anything

[19:07] <nothingmuch> just as a volunteer

[19:07] <nothingmuch> i want a YAML.pm that i can't complain about ;-)

[19:10] *** Southen_ joined
[19:15] *** crem joined
[19:16] *** weinig joined
[19:18] *** bernhard joined
[19:26] *** vel joined
[19:29] *** prefiks joined
[19:39] *** bpphillips joined
[19:40] *** Southen joined
[19:55] *** bpphillip1 joined
[19:57] *** bpalmer joined
[19:58] <fglock> pmurias: hi/pong

[19:59] *** larsen joined
[20:03] *** HEx joined
[20:11] *** Southen_ joined
[20:17] *** salty-horse joined
[20:32] *** Southen joined
[20:35] <pmurias> fglock: pong

[20:53] *** bpphillip1 left
[21:01] *** crem_ joined
[21:15] *** iblechbot joined
[21:21] *** crem_ is now known as crem

[21:25] <pmurias> sleep&

[21:28] *** SageLT joined
[21:28] *** Southen_ joined
[21:37] *** beppu joined
[21:42] *** crem_ joined
[21:48] *** bpalmer left
[21:49] *** cjeris left
[21:54] <xinming> 'window stick off'

[21:56] *** Southen joined
[21:58] *** rnorwood joined
[22:02] *** prefiks left
[22:07] *** crem_ is now known as crem

[22:07] *** crem is now known as crem_

[22:08] *** crem_ is now known as crem

[22:20] <svnbot6> r11837 | Sage++ | Changed the extractType function to really extract on just type, not matchWithoutEnc.

[22:29] <svnbot6> r11838 | Sage++ | Refined and cleaned the code for the Oo file handle translations .close and .readline. Both should be more correctly applied, with better junk handling, and the code is now much more readable. No claims that they're absolutely complete, but they're better.

[22:29] <svnbot6> r11838 | Sage++ | Modifiers to regexs are now better handled with cleaner code. Handeled modifiers include /g, /i, and /e (for s/). They can also be handeled in combination (such as /ige). The cide now correctly catches all of these modifiers on all regexs.

[22:29] <svnbot6> r11838 | Sage++ | The regex in split() is now translated, using the same functionality as normal regex translations.

[22:29] <svnbot6> r11838 | Sage++ | The handeling of foreach loops is now improved, both in results and in clarity of code. Foreach loops can vary quite a lot, so I'm sure it can still be broken, but it's now better and easier to fix, when it is broken.

[22:29] <svnbot6> r11838 | Sage++ | Some other minor cleanups to the code have also been made.

[22:44] <svnbot6> r11839 | fglock++ | pX/Pugs-Compiler-Rule - passes 217/241

[22:45] <clkao> almost there!

[22:46] <fglock> clkao: almost :)

[22:47] <clkao> fglock: we need to have runtime detection of function being written in perl6 for using the data::bind callconv.  type-based mmd requires this.

[22:48] <fglock> I think PCR now has the internal information to implement the remaining semantics

[22:48] <fglock> clkao: how about calling perl5 subs (p5 cpan modules)

[22:49] <fglock> clkao: runtime detection - do you mean in eval() ?

[22:50] <clkao> no, knowing if you should call func with ("1234") or ([\1234], {})

[22:51] <fglock> clkao: like we do with objects vs. scalar

[22:51] <fglock> it checks if blessed()

[22:52] <fglock> we need to check if bind()

[22:54] <fglock> Emitter::Perl5 #586

[22:54] <fglock> does Data::Bind has a function that tells if a sub is bind?

[22:56] <clkao> ya. you can see if there's bind info in the gv.. another thing is things like %hash.keys.sort

[22:58] <fglock> I think it should behave like (keys %hash).as(Array).sort

[22:59] <fglock> %hash is unboxed, but keys returns a boxed array

[23:00] <fglock> it would work with unboxed array too

[23:01] <fglock> but then you would have to test for 'objectness' in every single method call

[23:02] <fglock> so maybe 'keys %hash' returns unboxed array, and '%hash.keys' returns boxed

[23:02] <fglock> so that you can chain method calls

[23:04] <fglock> back in ~2h &

[23:04] *** fglock left
[23:06] *** AppleIver joined
[23:06] *** AppleIver left
[23:17] *** nothingmuch_ joined
[23:29] <ludan> how can i get out from a pugs shell?

[23:30] <TreyHarris> ludan: control-d

[23:30] <TreyHarris> (i.e., send an eof)

[23:30] <ludan> thanks

[23:30] <salty-horse> ludan, or :q

[23:30] <TreyHarris> on windows, i guess that would be control-z

[23:31] <ludan> are there some tutorials to understand the main P6 features implemented in pugs ?

[23:31] <TreyHarris> ludan: theoretically, all perl 6 features are implemented in pugs.  in reality, that isn't true, but we pretend that it is :-)

[23:31] <TreyHarris> so you should look at the synopses and try things

[23:31] <ludan> yep, i'm lurking on this channel by a long time :P

[23:31] <TreyHarris> do you know where the synopses are?

[23:32] <TreyHarris> http://dev.perl.org/perl6/doc/synopsis.html

[23:32] <lambdabot> Title: Synopses - perl6

[23:32] <ludan> thanks

[23:32] <TreyHarris> some very advanced and esoteric features are implemented, and some very basic features are not, so you generally should just try and see

[23:33] *** weinig is now known as weinig|bbl

[23:33] <ludan> ok

[23:34] <ludan> TreyHarris: which is the major issue to release a stable and complete pugs?

[23:36] <TreyHarris> ludan: heh.  for it to be done :-)

[23:36] <TreyHarris> it's a very iterative process, AFAIK, nobody's thinking in terms of project plans and goalposts and gating items

[23:36] <ludan> you mean because it's to difficult to implement?

[23:38] <TreyHarris> that's as good a non-answer as any....  nothing's finalized.  i suspect at some point, somebody will notice that it's useful and stable enough that they'll suggest doing a distribution.  but that's many months off, i think

[23:39] * TreyHarris will be back in a few &

[23:39] <obra> 1: the language spec needs to be finished.

[23:41] <ludan> it should be enough :)

[23:46] <daxim> oh fark, I missed qixi

[23:52] *** weinig|bbl is now known as weinig

