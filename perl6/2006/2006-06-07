[00:19] *** pfenwick joined
[00:26] <svnbot6> r10583 | fglock++ | Pugs-Compiler-Rule/compile_p6grammar.pl - recognizes #comment and =pod sections

[00:41] *** bjoern_ joined
[00:50] *** hikozaemon joined
[00:57] *** putter joined
[01:04] <putter> question - why doesnt  [].map:{3}.join('x')  parse as  [].map( {3}.join('x') ) ?

[01:05] <audreyt> If the term bare block occurs in a list,

[01:05] <audreyt> it is considered the final element of that list unless followed immediately

[01:05] <audreyt> by a comma or comma surrogate.

[01:05] <audreyt> S06 line 132

[01:06] <audreyt> src/Pugs/Parser.hs line 1571

[01:06] <audreyt> (argListEndingBlock)

[01:07] <putter> tnx :)

[01:07] <audreyt> np :)

[01:07] <audreyt> seems I'll be giving a slightly insane talk on OSCON'06 after all

[01:08] <audreyt> = Programming the Kernel of Web 2.0 (45min Talk OSCON'06)

[01:08] <audreyt> For a highly interactive web application to work well, the framework needs to manage user states, logic processes, and server resources intelligently.

[01:08] <audreyt> This talk uses the Jifty kernel to demonstrate some interesting new concepts in this ever-expanding design space, including  API reflection, client-side continuations, context switching, and mobile code.

[01:08] <audreyt> We will also take approaches of several other web frameworks (Links, WaSH, Seaside, Rails, Catalyst, Springs, Cocoon, etc.), and express them as kernel modules on the Jifty system.

[01:09] <audreyt> basically, "what I did in $job, and related past/future insanities I inflicted on @coworkers"

[01:09] <putter> lol

[01:09] <putter> !

[01:10] <putter> insane due to... scope?

[01:10] <audreyt>  due to how-to-wrap-my-head-around-that-argh

[01:11] <putter> "how to..."  ...  "with difficulty" :)

[01:11] <audreyt> but once you're there, things are easy and intuitive :)

[01:12] <audreyt> <darix> the learning curve is like a mountain in the himalaya ...

[01:12] <audreyt> <darix> nearly 90degree and close to 8000 m

[01:12] <audreyt> <darix> but standing up the hill just rocks ;)

[01:12] <putter> indeed.  once there, it's also a paper, and a couple of orielly-ish articles, and...

[01:12] <audreyt> (originally applied to Hs, but also applicable here)

[01:12] <putter> and some high priced consulting/tutorials :)

[01:12] <audreyt> well yeah. I'm happy to report I'm no longer in need of sponsorship, at the cost of delaying Pugs for maybe 6 weeks :)

[01:13] <audreyt> <- saved enough money for ~1yr

[01:13] <putter> yay

[01:13] <audreyt> can also be considered a form of yak shaving.

[01:14] <putter> yak farming?

[01:14] <audreyt> mm yak hoisting, lifting and floating

[01:14] <putter> yak protesting

[01:15] <audreyt> "join us now and shave the yakware"

[01:17] * pfenwick looks forward to Audrey singing in the next Perl benefit concert.

[01:19] <putter> so :{} requires lookahead for commaness.  is there any other parser-needs-lookahead which hasn't been crushed out?

[01:19] <audreyt> was there ever such events for Perl? :)

[01:20] <audreyt> 8 places

[01:20] <putter> !

[01:21] <pfenwick> Not that I'm aware of.  I can envisage a post-OSDC karaoke session, though.

[01:21] <putter> are they documented somewhere?

[01:22] <audreyt> er, I thought you meant in Parser.hs

[01:22] <audreyt> in Perl6, it's less than 8

[01:23] <audreyt> bare=>

[01:23] <audreyt> stmt-ending-brace}

[01:23] <audreyt> arglist-ending-brace}

[01:23] <audreyt> are the only three iirc

[01:24] <audreyt> lookup "=>" after bare; lookup "\n" or "," after closing brace

[01:25] * audreyt misses her days with Taipei Philharmonic choir

[01:25] <audreyt> though cut abruptly by the unfortunate voice change :/

[01:26] * putter used to be in a renaissance choir.  much fun.

[01:27] <audreyt> ooh, do tell

[01:28] <audreyt> so you sing songs recorded from the renaissance?

[01:28] <audreyt> (recorded with ink, not with soundwave capture devices invented by da Vinci, I presume)

[01:28] <putter> many years ago.  only remnant is a 3-yr-old friend now singing medieval drinking songs. :)

[01:29] <audreyt> nice :)

[01:34] <putter> yes, eclectic mix, religious and non, late middle ages through renaissance, couple of languages.

[01:34] <putter> much smaller group than a philharmonic.  tradeoffs, but I think I prefer small.

[01:36] <audreyt> cool

[01:36] <audreyt> bbiaba again... this time ~4hrs

[01:36] <putter> is there any theory on how the oddballs fit in with the precedence parser?  I was also a bit puzzled by trailing "," (eg, (3,) )

[01:37] <putter> ok.  thanks as always.

[01:37] <audreyt> yes, theory is the nullterm

[01:37] <audreyt> property

[01:37] <putter> will google.

[01:37] <audreyt> that is "I can take the rhs arg as a null term"

[01:37] <audreyt> applies also to optional unary ("optionary") such as &rand.

[01:38] <audreyt> not academic term per se; working concept employed by pmichaud

[01:38] <audreyt> &

[01:38] <putter> interesting.  ok.  tnx.

[01:48] <putter> "Perl6 and non-stress induced alopecia in Bos grunniens fabri"

[01:50] <putter> &

[02:01] *** coumbes joined
[02:16] *** weinig|away is now known as weinig

[02:33] *** lambdabot joined
[02:35] *** cmarcelo joined
[02:45] *** shachaf joined
[03:23] *** mako132_ joined
[03:28] *** weinig is now known as weinig|sleep

[03:45] <svnbot6> r10584 | Darren_Duncan++ | ext/Relation/ : added new Relation class attribute 'is_mutable', currently just False, which says whether the object may be mutated or not ... as preparation for changing Relation from a Class into a Role

[03:51] *** bjoern_ joined
[04:06] *** _SamB_ joined
[04:07] *** _SamB_ is now known as SamB

[04:10] *** putter joined
[04:12] <putter> S03 bug? - the operator table at the bottom of S03 doesnt seem to mention .<>

[04:12] <putter> &

[04:19] *** penk joined
[04:51] * spinclad remembers when the watchcry was 'shave the whales'

[04:56] <spinclad> JudyHSIter update:  i'm inclined to say i choose the wrong macro processor to factor out my code's cut-n-pastiness.  trying m4 expansion in place of cpp: it will leave the generated code with line-by-line structure, which turns out to help gdb debugging.  besides it's a better preprocessor, just not integrated.

[05:00] <cmarcelo> spinclad: do you mean: was using cpp => now lets use m4?

[05:07] * cmarcelo just saw HSIter code, there are indeed some big macros there =P

[05:21] *** iblechbot joined
[05:26] <spinclad> cmarcelo: only going to m4 for my big function-defining macros.  the rest of the #define's will stay.

[05:27] *** cmarcelo joined
[05:28] <spinclad> (cmarcelo: just answered, should i repeat?)

[05:28] <cmarcelo> (i read in web irclog)

[05:28] <spinclad> (ah, good)

[05:33] <cmarcelo> spinclad: m4 => cool, i'm tracking commit RSS, so when you update something I'll try to test here too..

[05:38] *** GeJ left
[05:38] *** GeJ joined
[06:04] *** tifo joined
[06:09] *** SSelva joined
[06:11] *** SSelva left
[06:24] *** vel joined
[06:48] *** ludan joined
[06:58] *** cognominal joined
[07:11] *** SM_ax joined
[07:23] *** stephanepayrard_ joined
[07:38] *** cognominal joined
[07:56] *** lichtkind joined
[07:56] *** cognominal joined
[08:16] *** mjk joined
[08:50] <svnbot6> r10585 | pmurias++ | Added myself to AUTHORS.

[08:50] *** iblechbot joined
[09:35] *** bjoern_h joined
[09:38] <svnbot6> r10586 | spinclad++ | - JudyHSIter:  converted function macros from cpp to m4.  should make debugging easier.

[09:38] <svnbot6> r10586 | spinclad++ |   TODO:  have build process generate JudyHS.c from .m4, either in configure or in make.

[09:41] <spinclad> and that's it for 'tonight'.  debugging again tomorrow.

[09:41] <spinclad> &

[10:14] *** cognominal joined
[10:25] *** dduncan joined
[10:41] *** szbalint joined
[10:42] *** avarab joined
[10:45] *** locksy joined
[11:03] *** nperez joined
[11:09] *** TimToady joined
[11:11] *** neoesque joined
[11:15] *** bjoern_h is now known as bsh

[11:47] *** Aankhen`` joined
[12:09] *** Aankhen`` joined
[12:20] *** lisppaste3 joined
[12:32] *** dduncan left
[12:38] *** jsiracusa joined
[12:51] *** iblechbot_ joined
[12:51] <szbalint> hm, I don't get the Currying example in S06.

[12:51] <szbalint> It says     &textfrom := &substr.assuming(str=>$text, len=>Inf);

[12:51] <szbalint> then

[12:51] <szbalint>     $all  = $textfrom(0);   # same as: $all  = substr($text,0,Inf);

[12:52] <szbalint> shouldn't that be &textfrom(0); ?

[12:52] <szbalint> or am I misunderstanding something gravely?

[12:59] *** Limbic_Region joined
[13:02] *** jsiracusa joined
[13:06] *** bsh is now known as xn--bjrn-6qa

[13:07] *** jsiracusa joined
[13:16] *** weinig|sleep is now known as weinig

[13:27] *** froh-doh joined
[13:44] *** justatheory joined
[13:49] *** chris2 joined
[13:58] *** hexmode joined
[13:58] <kolibrie> szbalint: looks like it should be &textfrom(0) to me, too

[14:14] *** nothingmuch_ joined
[14:15] *** vel6608 joined
[14:20] *** vytautas joined
[14:21] *** Qiang joined
[14:34] *** lypanov joined
[14:54] *** cdpruden joined
[14:55] *** lypanov left
[14:56] *** glah joined
[14:56] *** glah is now known as lypanov

[15:03] <lypanov> audreyt: its a shame that the ghc binary post-install-script you wrote doesn't take into account the possibility of other prefixes

[15:06] <lypanov> audreyt: after modifying the script to work with my locations, i found i needed to do: mv /usr/local/lib/libreadline.5.1.dylib /usr/local/lib/libreadline.5.0.dylib also

[15:14] * lypanov sighs

[15:14] <lypanov> and then i get /usr/bin/ld: table of contents for archive: /usr/local/lib/ghc-6.5.20060526/libHShaskell98.a is out of date; rerun ranlib(1) (can't load from it)

[15:14] <lypanov> booo

[15:17] * lypanov spots some thing on the wiki and debates giving up

[15:18] *** bpederse joined
[15:20] <audreyt> lypanov: just run ranlib on all .a

[15:20] <audreyt> ranlib /usr/local/lib/ghc-6.5.20060526/*.a

[15:20] <audreyt> that's all

[15:21] <lypanov> oh

[15:21] <lypanov> thats utterly unexpectedly simple :P

[15:21] * lypanov had certainly not thought that doing what it said would actually work :P

[15:22] <lypanov> audreyt: awesome. darcs ./configure worked out. you could not possibly have been better timed :)

[15:22] <audreyt> :)

[15:23] <lypanov> audreyt: out of interest, what intel do you have?

[15:23] <audreyt> white macbook 2ghz 2gram

[15:23] <lypanov> :D

[15:23] <lypanov> liking?

[15:24] * lypanov is trying to get his mum one as his ibook has big white splodes on the screen (booo!)

[15:24] <lypanov> splodges*

[15:24] * lypanov listens to the result of a -j3

[15:25] <lypanov> audreyt: i'm running eclipse, jboss, ghc, firefox, safari, itunes, ichat...

[15:25] <lypanov> audreyt: maybe i should go that 2gram route also...

[15:25] <audreyt> sure, it works wonderfully

[15:26] <audreyt> minor acpi troubles. but certainly much better than anything i've used before.

[15:26] <lypanov> linux?

[15:27] <lypanov> /usr/bin/ld: Undefined symbols:

[15:27] <lypanov> _ControlziMonadziError_zdf21_closure

[15:27] <lypanov> booo

[15:29] <audreyt> huh.

[15:29] <szbalint> hey audreyt, could you look at what I've been talking about here a few hours ago please (if you have time)?

[15:29] <audreyt> I'm actually about to sleep :/

[15:29] *** mako132 joined
[15:30] <szbalint> oh okay. Good night :)

[15:30] <lypanov> sleep well audreyt :)

[15:30] <audreyt> szbalint: currying? it's jsut a typo

[15:30] <szbalint> phew.

[15:30] <szbalint> :)

[15:30] <audreyt> fixed.

[15:30] <audreyt> thanks

[15:35] <szbalint> I was hoping for it to be a typo otherwise my hopes for knowing Perl 6 would be pretty low. :)

[15:35] <audreyt> never attribute to ingenuity what can be explained by sloppiness...

[15:36] <lypanov> Linking darcs ...

[15:36] <lypanov> /usr/bin/ld: Undefined symbols:

[15:36] <lypanov> booooo. again

[15:37] *** kanru joined
[15:39] <Limbic_Region> audreyt - do you use Parse::Yapp?

[15:39] <audreyt> no

[15:39] <audreyt> I use parsec and pappy :)

[15:39] *** hexmode joined
[15:39] <audreyt> (and fglock's P::C::*)

[15:40] <Limbic_Region> ok, but someone here has mentioned it numerous times

[15:40] <Limbic_Region> hrm - I guess I will just dig in

[15:42] <audreyt> well, P::C::* does use Yapp as the bototm layer

[15:44] <cognominal> pappy?

[15:44] * Limbic_Region is interested in a gentle introduction not waking up from a deep sleep to find yourself plummeting to the ground thousands of feet in the air without a chute

[15:45] <cognominal> arf, le deuxieme mercredi du mois, c'est mercredi prochain

[15:48] <audreyt> cognominal: packrat pappy. useful and fun

[15:48] <audreyt> linear-time regex with capture and backtracking and backreference.

[15:48] <audreyt> (sounds too good to be true, but it's indeed that good)

[15:49] <lypanov> (um.....)

[15:49] <lypanov> (*was thinking just that*)

[15:49] <audreyt> (I elided the heavy memory cost.)

[15:49] <lypanov> (hehe)

[15:49] <lypanov> (unimportant in some situations)

[15:49] <audreyt> but hey, 2gram must be good for something

[15:49] <audreyt> indeed

[15:49] * lypanov giggles

[15:49] <lypanov> yeah

[15:54] <audreyt> lypanov: try -lHSmtl by hand

[15:54] <audreyt> or pull in  /usr/local/lib/ghc-6.5.20060526/libHSmtl.a

[15:54] <audreyt> manually

[15:54] <audreyt> should Just Work

[15:56] *** hexmode joined
[15:59] * lypanov bows to teh audreyt

[15:59] <lypanov> audreyt: awesome. that worked

[16:00] <audreyt> I suspect package.conf problems, or something...

[16:00] <audreyt> not sure. try and see where it's missed

[16:00] <audreyt> also possibly different XCode version

[16:00] <lypanov> audreyt: 2.2. didn't upgrade yet

[16:00] <audreyt> but I really need to sleep

[16:00] <audreyt> g'nite :)

[16:00] <lypanov> sleep well :)

[16:00] <audreyt> &

[16:10] *** merlyn joined
[16:11] *** weinig is now known as weinig|work

[16:25] <clkao> audreyt: is it releasing time yet?

[16:29] *** fglock joined
[17:13] *** vel6608 joined
[17:52] *** elmex joined
[18:13] *** nothingmuch joined
[18:18] *** mj41_ joined
[18:37] *** lypanov left
[18:38] *** wilx joined
[18:40] *** SSelva joined
[18:41] *** SSelva left
[18:41] *** SSelva joined
[18:43] *** SSelva left
[18:49] <Juerd> ?eval 1+1

[18:49] *** evalbot_10582 is now known as evalbot_10586

[18:49] <evalbot_10586> 2

[18:50] <Juerd> ?eval any(1..5).pick

[18:50] <evalbot_10586> 1

[18:50] <Juerd> ?eval any(1..5).pick

[18:50] <evalbot_10586> 1

[18:50] <Juerd> ?eval any(1, 2, 3) + any(4, 5, 6)

[18:50] <evalbot_10586> 5

[18:51] <Juerd> ?eval 15 ?? "perl 6" !! "blah"

[18:51] <evalbot_10586> "perl 6"

[19:16] <TimToady> ?eval any(1, 2, 3) + any(4, 5, 6)

[19:16] <evalbot_10586> 5

[19:16] <TimToady> ?eval any(1, 2, 3) + any(4, 5, 6)

[19:16] <evalbot_10586> 5

[19:17] <TimToady> I'd say someone needs to randomize the random number generator in Haskell...

[19:17] <TimToady> It works okay at the pugs> prompt though.

[19:19] <TimToady> so maybe that's not the problem.

[19:19] <TimToady> ?eval any(1..5).pick

[19:19] <evalbot_10586> 1

[19:19] <TimToady> ?eval any(1..5).pick

[19:20] <evalbot_10586> 4

[19:20] <TimToady> that's better.

[19:21] <TimToady> ?eval any(1..5).pick

[19:21] <evalbot_10586> 1

[19:23] <TimToady> ?eval any(1..5).pick

[19:23] <evalbot_10586> 1

[19:24] <TimToady> does seem prejudiced towards picking the first one though.

[19:29] <TimToady> ?eval any(1..5).pick

[19:29] <evalbot_10586> 1

[19:29] <TimToady> ?eval any(1..5).pick

[19:29] <evalbot_10586> 3

[19:29] <TimToady> especially after a long spell.

[19:30] <TimToady> does evalbot refork itself after a timeout with the same random seed?

[19:31] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:31] <evalbot_10586> 4

[19:31] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:31] <evalbot_10586> 1

[19:31] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:31] <evalbot_10586> 5

[19:31] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:31] <evalbot_10586> 3

[19:31] * Limbic_Region likes those results better

[19:32] <TimToady> now wait a minute or two and then see if you get the same sequence.

[19:33] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:33] <evalbot_10586> 2

[19:33] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:33] <evalbot_10586> 1

[19:33] *** larsen joined
[19:33] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:33] <evalbot_10586> 6

[19:33] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:33] <evalbot_10586> 5

[19:34] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:34] <evalbot_10586> 3

[19:34] <Limbic_Region> 2 anyone

[19:34] <Limbic_Region> ?eval any(reverse(1..6)).pick

[19:34] <evalbot_10586> 6

[19:34] <Limbic_Region> nope - appears that is less prone to predictability

[19:35] <TimToady> ?eval any(1..5).pick

[19:35] <evalbot_10586> 4

[19:37] * Limbic_Region still thinks it would be nice for any(2, 3, 5, 7, 11, 13, 17) == any(1, 3, 5, 7, 9, 11, 13, 15, 17, 19) to produce the intersection - but I guess that's what Sets are for

[19:50] *** DaGo joined
[19:53] <TimToady> ?eval any(1..5).pick

[19:53] <evalbot_10586> 1

[19:54] <TimToady> ?eval any(1..5).pick

[19:54] <evalbot_10586> 2

[19:57] <TimToady> ?eval any(reverse(1..6)).pick

[19:57] <evalbot_10586> 4

[19:57] <TimToady> ?eval any(reverse(1..6)).pick

[19:57] <evalbot_10586> 3

[19:57] *** fglock joined
[19:57] <gaal> ?eval any(1..1024).pick

[19:57] <evalbot_10586> 470

[19:58] <TimToady> it seems to timeout after a minute or two, so if you wait 3 minutes you may well get 470 again.  picking a bigger range is clever, gaal++

[19:59] <gaal> what's p6 for 1's complement?

[19:59] <gaal> (p5 ~)

[20:01] <gaal> (I'm skeptical it's a real problem btw. Murphy having some fun with the dice is all)

[20:02] <TimToady> +^ or ~^

[20:02] <gaal> ?eval any(1..~^0).pick

[20:02] <evalbot_10586> undef

[20:02] <gaal> heh.

[20:03] <gaal> ?eval any(1..+^0).pick

[20:03] <evalbot_10586> pugs: out of memory (requested 1048576 bytes)

[20:03] <gaal> inefficient superposition.

[20:03] <TimToady> it's just Murphy having fun... :)

[20:03] <TimToady> ?eval any(1..1024).pick

[20:03] <evalbot_10586> 514

[20:04] <TimToady> maybe it times out on silence

[20:04] <gaal> ?eval ~^0

[20:04] <evalbot_10586> "\d[207]"

[20:04] <gaal> um?

[20:04] <gaal> how's that, I wonder (and go rtfs)

[20:04] <TimToady> ?eval ~^"0"

[20:04] <evalbot_10586> "\d[207]"

[20:04] <prefiks> ?eval +^0x30

[20:05] <evalbot_10586> 4294967247

[20:05] <prefiks> ?eval (+^0x30)&0xff

[20:05] <evalbot_10586> 255

[20:05] <gaal> oh, okay.   op2 "~^" = op2Str $ mapStr2Fill xor

[20:06] <gaal> ~0 was such a succinct way of saying "real big".

[20:08] <PerlJam> gaal: but with bigint, you can get so much bigger.

[20:08] <TimToady> That's generally * now.

[20:09] <gaal> PerlJam: with bigint, you can get complex bigger.

[20:15] <gaal> can anyone explain the type hint in op1 "+^"? Prim.hs:206

[20:15] <gaal> (complement :: Word -> Word)

[20:16] <gaal> @type complement

[20:16] <lambdabot> forall a. (Bits a) => a -> a

[20:16] <gaal> how could the input be coerced to a Word?

[20:18] <gaal> hmm, oh, I see, there's an instance Value Word and opCast1 fmaps with its fromVal

[20:18] <gaal> you guys are so helpful :)

[20:21] <TimToady> ?eval any(1..1024).pick

[20:21] <evalbot_10586> 320

[20:23] <TimToady> ?eval any(1..5).pick

[20:23] <evalbot_10586> 4

[20:27] <TimToady> ?eval any(1..1024).pick

[20:27] <evalbot_10586> 586

[20:29] <gaal> maybe someone hacked evalbot to seed curiously when you requested an eval, TimToady.

[20:30] <gaal> reminds me of the time I got irritated at people at $work logging in as root and patched login to be a little slower and give a nasty message when they did that.

[20:42] <szbalint> hehe

[20:43] <szbalint> reminds me of sudo with 'insults' on :)

[21:04] *** Limbic_Region joined
[21:17] <Juerd> http://juerd.nl/p6sim.html

[21:17] <Juerd> Any glaring big mistakes?

[21:17] <Juerd> :)

[21:19] <Limbic_Region> ?eval my @bar = 1..5; my $foo = @bar; $foo.[2]

[21:19] <evalbot_10586> \3

[21:19] <Limbic_Region> Juerd - why do you have my $foo = \@bar; when my $foo = @bar; will do just fine?

[21:19] <Juerd> Limbic_Region: See next slide?

[21:19] <Limbic_Region> unless of course the spec has flipped again and Pugs has it wrong

[21:20] <Limbic_Region> oh

[21:20] <Limbic_Region> heh

[21:20] <Juerd> :)

[21:21] <Limbic_Region> Juerd - so I assume the ~~ match will eventually lead to junctions too?

[21:21] <Limbic_Region> my @xyzzy = 42, 15, 123;

[21:21] <Juerd> No

[21:22] <Limbic_Region> @xyzzy ~~ 15; # true

[21:22] <lambdabot> Unknown command, try @list

[21:22] <Limbic_Region> same as

[21:22] <Limbic_Region> any(@xyzzy) == 15 or ~~ 15

[21:22] <Limbic_Region> ok

[21:22] <Juerd> Given time constraints and chosen topic, I put junctions in the bonus slide at the end

[21:22] <Juerd> That has several things I can use to waste more time

[21:22] <szbalint> Juerd: why don't you use say in the first example?

[21:23] <Juerd> szbalint: To show how Perl 6 simplifies

[21:23] <szbalint> oh

[21:23] <szbalint> I scrolled.

[21:23] <szbalint> :P

[21:23] <Limbic_Region> are the magic ^ vars out or in for subs ATM

[21:24] <Limbic_Region> last I heard, they were reserved for bare blocks

[21:25] <Juerd> I have no idea

[21:25] <Juerd> They don't immediately make life better

[21:25] <Limbic_Region> ?eval sub foo { say "$^foo" } foo('blah');

[21:25] <evalbot_10586> Error: Undeclared variable: "$^foo"

[21:25] <Limbic_Region> guess they are out

[21:25] <gaal> Juerd: empty slide near "sub foo"

[21:25] <Juerd> As far as I consider them, they're just a more general approach to doing sortlike things

[21:26] <Juerd> gaal: intentional, in case my time's up at that point :)

[21:26] <Juerd> I'm really bad at planning talks

[21:26] <Juerd> Mostly because I don't know how many questions the audience will ask

[21:26] <Juerd> And I don't like delaying questions until the end

[21:27] <Juerd> So I build in mechanisms like this

[21:27] <Juerd> I have two mechanisms in this talk:

[21:27] <Juerd> - the empty slide

[21:27] <Juerd> - the last slide, with several things that I can explain without further slides

[21:27] <Limbic_Region> ?eval my @foo = 1..5; @foo.end

[21:27] <evalbot_10586> 4

[21:27] <Limbic_Region> ?eval my @foo = 1..5; @foo.last

[21:27] <evalbot_10586> Error: cannot last() outside a loop

[21:28] <Limbic_Region> Juerd - s/last/end/

[21:28] <Limbic_Region> for each(@items; 0..@items.last)

[21:28] <Juerd> Ohhh

[21:28] <Juerd> Thanks :)

[21:29] <gaal> Juerd: ACK.

[21:29] <Juerd> I've never actually used @foo.end :)

[21:29] * Limbic_Region has to wander off but was almost finished

[21:29] <Juerd> Thanks for reviewing, all of you :)

[21:34] *** sockstat joined
[21:36] *** putter joined
[21:39] <putter> currently pugs parses both  %h<3  and  %h<3>  .  Is that possible with a spec parser?  how?

[21:46] <Juerd> It's *possible*

[21:48] <putter> ...?

[21:49] <Juerd> What's postfix:<?>, and how does it work on term:<...>?

[21:50] <putter> there's prefix:<?>, but postfix?

[21:51] <Juerd> That was my thought

[21:51] <Juerd> But then you used it.

[21:51] <putter> though there was scary talk of "if you find foo in mumblefix, but mumblefix:foo isnt defined, then you try otherfix:foo, and yafix:foo, and check the phase of the moon, and..."

[21:52] <Juerd> Wheh

[21:52] <putter> ahhhhh

[21:53] <Juerd> Beer?

[21:54] <putter> no, thank you

[21:55] <webmind> bear?

[21:55] <putter> oh, duh.  .<> can't really be a postcircumfix.

[21:55] <putter> where!

[21:56] <putter> a bare block is a parsing oddity.  wonder what a bear block is...

[21:57] <putter> something hairy, no doubt

[22:01] <Juerd> putter: Why couldn't .<> be a postcircumfix?

[22:01] <Juerd> And can we abbr that to pcf? :)

[22:01] <Juerd> Assuming there are no precircumfixes :)

[22:02] <Juerd> afk

[22:07] <Limbic_Region> Juerd - other than the one I pointed out, I didn't see any glaring mistakes

[22:08] <Limbic_Region> then again, I have a hard time keeping up with all the changes

[22:11] <putter> Juerd: the interior is not an expression.  %h<2+> is fine, but, @a[2+] isnt.

[22:11] *** lypie joined
[22:18] *** froh-doh joined
[22:25] <putter> re S04/The Relationship of Blocks and Declarations "There are three ways to declare formal parameters to a closure.",

[22:26] <putter> ... there is also sub f { my($a,$b) = *@_ }.  $_ is mentioned, but not @).

[22:26] <putter> err, @_.

[22:30] <putter> The explanation of "executes immediately" bare blocks could be fleshed out.  Eg, creating a "Bare block" section near the top.  The bit under "The do-once loop" isn't really enough.  Perhaps there is more elsewhere I'm missing.

[22:35] <putter> ?eval {3}.()

[22:35] <evalbot_10586> 3

[22:37] *** weinig|work is now known as weinig

[22:44] <putter> question - so, {3} as an expression is a closure, (->$_ {3}), and {3} as a statement is a closure invocation, ((-> $_=$+_ {3}).()), yes?

[22:47] <putter> hmm...  $a = CALLER:<$_>; { $b = CALLER:<$_> };  are $a and $b different?  or...?

[22:48] <putter> &

[22:59] *** FurnaceBoy joined
[23:10] *** macroron joined
[23:15] *** lypie left
[23:23] <nothingmuch> http://lamp.epfl.ch/~mcdirmid/papers/mcdirmid06superglue.pdf

[23:24] <nothingmuch> it's nice because in Perl 5 that would be a disaster to implement (though feasable), but in Perl 6 it'll probably work out well

[23:24] <nothingmuch> LtU++

[23:25] *** froh-doh joined
[23:26] *** prefiks joined
[23:40] *** bpederse joined
[23:44] *** ludan is now known as spinello

[23:44] *** spinello is now known as spino

[23:44] *** spino joined
[23:45] *** spino is now known as ludan

[23:50] *** Odin-LAP joined
[23:59] *** kanru joined
