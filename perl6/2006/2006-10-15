[00:00] <Limbic_Region> let me confirm I can make the problem disapear by changing the .t file

[00:01] <Limbic_Region> hrm - that's odd

[00:01] <Limbic_Region> it is working as expected at home (but still failing)

[00:01] <Limbic_Region> though at work it is definately fubar

[00:01] <Limbic_Region> and also failing

[00:02] <Limbic_Region> TimToady - I can certainly check both $actual and $expected - give me a sec

[00:02] <TimToady> it seems to be set to native.  Not sure why notepad should screw it up unless your svn client is screwing up the native property

[00:03] *** mako132_ joined
[00:04] <TimToady> but still, inside perl everything should canonicalize to \n if text mode is set on file inputs.

[00:05] <TimToady> so my guess is still that slurp doesn't, since there probably aren't \r in the .t

[00:06] <TimToady> (or notepad would be happier with it)

[00:06] <Limbic_Region> say $new_config_text ~~ /\r/ ?? 'Y' !! 'N'; # says Y

[00:06] <Limbic_Region> which is the first option to is()

[00:06] <Limbic_Region> s/option/argument/

[00:07] *** Southen_ joined
[00:07] <TimToady> so yes, slurp is defective.

[00:07] <TimToady> maybe I can figure that out myself.

[00:08] <Limbic_Region> will be standing by to test

[00:11] <TimToady> There's no place like Haskell...There's no place like Haskell...

[00:12] * Limbic_Region reminds TimToady not to forget the Ruby er Pugs slippers

[00:21] *** Southen joined
[00:24] <TimToady> well, supposedly Haskell's builtin readFile is gonna default to text mode, but it seems like that isn't happening here...

[00:24] <TimToady> I think we need an audreyt for this.

[00:25] <Limbic_Region> smoke is finished btw

[00:25] <Limbic_Region> few minutes faster still

[00:25] <TimToady> you're just as pure as Ivory Soap!

[00:26] <Limbic_Region> yep, 99 failures and I would say as many as not are due to the eqv thingy

[00:26] <Limbic_Region> ?seen audreyt

[00:26] <lambdabot> audreyt is in #perl6, #ghc and #haskell. I last heard audreyt speak 8h 7m 25s ago.

[00:26] <Limbic_Region> well, depending on how long she stayed up after she stopped talking

[00:27] <Limbic_Region> she might be up soon

[00:32] <TimToady> this is all orthogonal to the notion that eqv should also be canonicalizing, of course.  but if we fix the slurp textmode maybe we can put that off...

[00:33] <TimToady> actually, I believe audreyt is on record that the correct way to canonicalize things like eqv is to canonicalize everything coming into perl the same, so I guess it comes out to non-orthogonal under that view.

[00:34] <TimToady> on the other hand I'm not sure Unicode cares about crlf vs lf canonicalization...

[00:35] <TimToady> then there's the whole debate over choosing C or D...

[00:35] <Limbic_Region> well, I have been living under a rock for the last few decades and I can't speel unicode

[00:36] <Limbic_Region> I am interested in being able to treat text with ambivelance towards functionally equivalent control characters most of the time

[00:36] <Limbic_Region> but when I want to look closer, I want to be able to do that too

[00:45] *** explorer joined
[00:46] <TimToady> dinner &

[01:05] <nothingmuch> INGY!!!!!!

[01:05] <nothingmuch> Module::Compile breaks with the << operator

[01:06] <nothingmuch> $bit <<= 1;

[01:06] <nothingmuch> $bit <<= 1;	

[01:06] <nothingmuch> 86e1fb5a98b9c2c2c5314ff534059c87e035aa6e

[01:06] <nothingmuch> VERY NAUGHTY!

[01:06] <nothingmuch> why are you even parsing heredocs?

[01:20] *** mauke joined
[02:03] *** svnbot6 joined
[02:05] *** evalbot_r14340 joined
[02:21] <svnbot6> r14341 | audreyt++ | * Pugs.Prim: Instead of using ByteString.Char8's file IO primitives

[02:21] <svnbot6> r14341 | audreyt++ |   (which defaults to binary mode instead of text mode on win32),

[02:21] <svnbot6> r14341 | audreyt++ |   use Haskell's built-in ones, which handles CRLF transparently.

[02:21] <svnbot6> r14342 | audreyt++ | * Charnames.hs: Trim unused import.

[02:31] <audreyt> resmoking on win32, expecting all green...

[02:31] <audreyt> if so, then repair js is next for me, then changelog

[02:31] *** Southen_ joined
[02:52] *** Southen joined
[02:58] <svnbot6> r14343 | audreyt++ | * build_pugs.pl: Force relinking of Main.hs to ensure HsJudy

[02:58] <svnbot6> r14343 | audreyt++ |   wasn't accidentally picked up.

[03:17] *** Southen_ joined
[03:32] <TimToady> r14342 smokes fine on Linux.

[03:45] *** reZo joined
[03:49] <audreyt> win32 is fine except for all_parse.t

[03:49] <audreyt> fixing

[03:49] <audreyt> (CRLF is fixed)

[03:49] <audreyt> (brb)

[03:49] <TimToady> yay, I thought readFile was being the problem...

[03:50] *** mako132_ joined
[04:10] *** gugod joined
[04:19] <nothingmuch> http://nothingmuch.woobling.org/Crypt-Util/

[04:19] <lambdabot> Title: Index of /Crypt-Util

[04:20] <nothingmuch> feedback welcome

[04:20] <nothingmuch> xMAC is TODO

[04:20] <nothingmuch> salted hashes might be added too

[04:51] *** Salzh joined
[05:01] <Salzh> ?say "hello everyone"

[05:01] <lambdabot> Maybe you meant: faq map slap

[05:10] *** Southen joined
[05:12] *** mako132_ joined
[05:12] <svnbot6> r14344 | audreyt++ | * be a bit more relaxed about 'zero time' in t\unspecced\times.t

[05:15] *** BooK joined
[05:16] <Salzh> ?eval say "hello everyone"

[05:16] *** evalbot_r14340 is now known as evalbot_r14344

[05:16] <evalbot_r14344> OUTPUT[hello everyone␤] Bool::True

[05:21] *** Southen_ joined
[05:27] <svnbot6> r14345 | audreyt++ | * Makefile.PL: Re-enable -threaded runtime for Win32.

[05:33] <svnbot6> r14346 | audreyt++ | * Make system() nonfatal always; instead it merely sets $!.

[05:33] <svnbot6> r14347 | audreyt++ | * system.t: unTODO.

[05:36] <svnbot6> r14348 | audreyt++ | * chmod.t: Fix skip on win32.

[05:45] <Salzh> ?eval @a = (1, 2, 3, 4); @b = (5, 6, 7); @a>>+=<<@b; say join " ", @a;

[05:45] *** evalbot_r14344 is now known as evalbot_r14348

[05:45] <evalbot_r14348> Error: ␤Unexpected ">>+=<<@"␤expecting "::", term postfix, comment, operator, statement modifier, ";" or end of input

[05:48] <svnbot6> r14349 | audreyt++ | * Pugs.Prim: `foo.exe` - make it nonfatal.

[05:48] <svnbot6> r14350 | audreyt++ | * all_parse.t: There's no need to turn \ into / -- it was triggering a modifying-constant error on Win32.

[05:48] <audreyt> win32 shiuld smoke clean now.

[05:49] <audreyt> resmoking...

[05:50] *** Southen joined
[05:50] <TimToady> me 2

[06:00] <gaal> hey! sorry for not helping out with change logging this weekend, got sidetracked.

[06:00] <gaal> we need something to make that task easier! :)

[06:18] *** Southen_ joined
[06:19] *** nothingmuch_ joined
[06:21] *** iblechbot joined
[06:38] <TimToady> r14350 still mighty fine on Linux.

[06:48] *** Southen joined
[06:54] *** lanny joined
[06:55] <lanny> ?eval say "newline"

[06:55] *** evalbot_r14348 is now known as evalbot_r14350

[06:55] <evalbot_r14350> OUTPUT[newline␤] Bool::True

[06:56] <audreyt> gaal: we do, somethiing like nothingmuch_'s summarizer

[06:56] <audreyt> gaal: so are you still up to chglog in the next, uhm, 48 hours?

[06:56] <audreyt> win32 smoke all clean.

[07:08] *** penk joined
[07:08] *** Southen_ joined
[07:11] *** penk left
[07:16] <svnbot6> r14351 | audreyt++ | * Pugs.Embed.Perl5: Correctly find out the installed version

[07:16] <svnbot6> r14351 | audreyt++ |   of Pugs::Compiler::Rules after a "make install".

[07:19] *** Southen joined
[07:21] <svnbot6> r14352 | audreyt++ | * PIL2JS: Fix various outdated constructs.

[07:21] *** mugwump joined
[07:30] <svnbot6> r14353 | audreyt++ | * Pugs.Compile: Repair PIL1's handling of loops.

[07:58] *** iblechbot joined
[08:01] *** foo\ joined
[08:05] <gaal> audreyt: unfortunately not :-(

[08:06] <svnbot6> r14354 | audreyt++ | * Pugs.Types: &Main::infix:<Moose> is canonical, _not_

[08:06] <svnbot6> r14354 | audreyt++ |   &infix:Main::<Moose>, which was confusing PIL2JS.

[08:06] <audreyt> ok... I'll do it myself then :)

[08:06] <audreyt> PIL2JS repaired!

[08:06] <gaal> sorry :(

[08:06] <audreyt> no prob at all

[08:06] <audreyt> actually... any other volunteers?

[08:06] <gaal> what can a summarizer help with?

[08:07] <audreyt> group commit logs by dir

[08:07] <svnbot6> r14355 | audreyt++ | * Pugs.Compile: Stub out the "subst" and "trans" nodes.

[08:07] <audreyt> and/or by file

[08:07] <gaal> svk log -v in one window, $EDITOR in the other, and occasionally svk desc

[08:07] <gaal> that's what I do

[08:07] <audreyt> metoo

[08:07] <gaal> hmm, that's a good idea

[08:08] <xinming> hmm, I'll be volunteer If I can help. :-D

[08:08] <gaal> i think the real solution si to pay the price at insert time, and ask everyone to edit changelog when they commit :)

[08:08] <audreyt> or to use some sort of annotation that can be picked up

[08:08] <audreyt> xinming: you can!

[08:08] <xinming> audreyt: Ok, what do I need to do?

[08:08] <gaal> we tried using prefix '* ' but that didn't really pick up, did it?

[08:08] <gaal> xinming++

[08:08] <xinming> summarize the mailing list? or summarize the changelog.

[08:09] <audreyt> the changelog

[08:09] <audreyt> r13262 ~ r14355

[08:09] <xinming> Now, I have 3 hours to do...

[08:09] <xinming> Ok, I'll try...

[08:09] <xinming> *-*

[08:09] <xinming> *_*

[08:09] <svnbot6> r14356 | audreyt++ | * Repair PIL2JS.  Largely it was because of the ::main ==> ::Main change.

[08:09] <audreyt> just give it a cursory glance and put seemingly-relevant parts into the ChangeLog file under the appropriate secion

[08:09] <audreyt> I'll do a full review after your 3 hours :)

[08:09] <xinming> Ok, I will

[08:10] <xinming> well, I think you have to review it tomorrow. :-P

[08:10] <xinming> Now, I have to go out for something to eat.

[08:10] <audreyt> ok. thanks!

[08:10] <xinming> But I'll try my best to summarize the changelog

[08:10] <audreyt> xinming++

[08:11] <audreyt> meanwhile I'll do some dist preparation and post preflight #0.

[08:12] <gaal> w00t

[08:13] <gaal> I'm at $work ant can't moose that either :-(

[08:13] * gaal doesn't feel very useful

[08:13] <audreyt> you're useful on the #jifty front...

[08:19] *** nothingmuch joined
[08:20] <gaal> eat and save the world at the same time

[08:27] <audreyt> GHC 6.6 powerpc build: http://scsibug.com/ghc-6.6-ppc-apple-darwin.tar.gz

[08:27] <lambdabot> http://tinyurl.com/yhn92c

[08:27] <audreyt> (OSX)

[08:44] <gaal> is a debian build planned?

[08:45] <gaal> igloo mentioned that the 'ghc-cvs' packages were tricky to fix (they'd been broken for a yaer)

[08:45] <gaal> *year. wow, latency kills spelling

[08:46] <audreyt> well the bindist works

[08:50] <xinming> hmm, I'll just start working. But I found, If you use 'svk log -r 13262:14355', It would get the revision locally, Do I need to calculate the revision number or, there is a convient way of doing this

[08:51] <audreyt> svk log -r 13262@:14355@

[08:51] <svnbot6> r14357 | audreyt++ | * Makefile.PL: Don't include Pugs-Emitter-Perl6-Perl5-2 in

[08:51] <svnbot6> r14357 | audreyt++ |   the perl5/ builds.

[08:51] <gaal> audreyt: yeah

[08:54] <svnbot6> r14358 | audreyt++ | * Pugs.hs: Make "pugs -BPerl5" invoke the correct helper in both uninstalled

[08:54] <svnbot6> r14358 | audreyt++ |   and installed positions.

[09:12] <svnbot6> r14359 | audreyt++ | * Bump version to 6.2.13.

[09:15] <svnbot6> r14360 | audreyt++ | * Add link to GHC 6.6.

[09:19] <xinming> hmmm.

[09:19] <xinming> * Don't parse :a as ::a.

[09:19] <xinming> (orig r13326):  audreyt

[09:19] <xinming> do I need to record these in to bug fixes section?

[09:19] <audreyt> seems not

[09:20] <audreyt> mostly it's during-development fix

[09:20] <audreyt> i.e. ot actual fix compared to last relesae

[09:20] <audreyt> if there's little or no context, don't bother recording that :)

[09:20] <xinming> Ok.

[09:21] *** nothingmuch joined
[09:21] *** audreyt changes topic to: Please test preflight! http://pugs.blogs.com/pre0/Perl6-Pugs-6.2.13.tar.gz | spec.pugscode.org | paste: http://sial.org/pbot/perl6 | pugs.blogs.com

[09:21] <audreyt> Pre0 up: http://pugs.blogs.com/pre0/Perl6-Pugs-6.2.13.tar.gz

[09:21] <lambdabot> http://tinyurl.com/y8ef5l

[09:22] <nothingmuch> awwe, someone took out the nice paradigm slogan/motto thing from /topic

[09:31] <svnbot6> r14361 | audreyt++ | * Sort MANIFEST.SKIP.

[09:33] <xinming> Pugs::Runtime::Regex - Deep recursion is made fatal

[09:33] <xinming> Is this a bug for a feature?

[09:33] <audreyt> neither; it does not even exist in the prev release

[09:33] <audreyt> so it's skippable :)

[09:33] <xinming> thanks

[09:44] <nothingmuch> @seen gugod

[09:44] <lambdabot> I saw gugod leaving #perl6 1h 36m 44s ago, and .

[09:44] <nothingmuch> @tell gugod Crypt::OFB is a stream cipher mode, why does it need padding?

[09:44] <lambdabot> Consider it noted.

[09:44] *** Southen_ joined
[09:44] <audreyt> hmm pre0 is missing Pugs:compiler::Rules, oops.

[09:52] *** audreyt changes topic to: Tester wanted: http://pugs.blogs.com/pre1/Perl6-Pugs-6.2.13.tar.gz | spec.pugscode.org | paste: http://sial.org/pbot/perl6 | pugs.blogs.com

[09:52] <audreyt> pre1 up.

[09:58] *** Alias_ joined
[09:58] <Alias_> seen jhi?

[09:58] <jabbot> Alias_: I havn't seen jhi, Alias_

[10:03] <nothingmuch> audreyt: thanks for ghc 6.6

[10:03] <nothingmuch> the link that is

[10:03] <audreyt> np :)

[10:03] * nothingmuch goes to get tangled in red tape

[10:04] <svnbot6> r14362 | audreyt++ | * Bumb version in Pugs.cabal.in.

[10:04] <audreyt> Bump, even.

[10:04] *** Southen joined
[10:06] <nothingmuch> ack

[10:06] <nothingmuch> that build seems broken

[10:06] <nothingmuch> i can't compile mo

[10:06] <nothingmuch> moh

[10:06] <pasteling> "nothingmuch" at 84.108.53.74 pasted "linkage errors" (6 lines, 120B) at http://sial.org/pbot/20444

[10:08] <audreyt> hm are you on 10.3?

[10:09] <audreyt> also try

[10:09] <audreyt> sudo gcc_select 4.0

[10:09] <audreyt> also try

[10:09] <audreyt> sudo gcc_select 3.3

[10:11] *** SubStack_ joined
[10:12] *** SubStack_ is now known as SubStack

[10:17] *** Southen_ joined
[10:21] *** SubStack_ joined
[10:21] *** SubStack_ is now known as SubStack

[10:26] *** buetow joined
[10:38] <nothingmuch> audreyt: ah, i was on 3.3, 4.0 fixed it

[10:38] <nothingmuch> thanks

[10:38] <nothingmuch> audreyt++

[10:46] *** Southen joined
[10:47] <audreyt> np :)

[10:47] <audreyt> while you're at it run a smoke on pre1?

[10:47] <audreyt> we havn't had any GHC 6.6/OSX/PowerPC reports

[10:50] <nothingmuch> okies

[10:51] <nothingmuch> haven't done pugs yet since the disk crash

[10:51] <nothingmuch> so it'll take a while

[10:58] <audreyt> sure thing

[10:59] *** dduncan joined
[11:01] <audreyt> dduncan: greetings. have you seen http://scsibug.com/ghc-6.6-ppc-apple-darwin.tar.gz ?

[11:02] <lambdabot> http://tinyurl.com/yhn92c

[11:02] <dduncan> I have not

[11:02] <dduncan> I looked at the haskell site today, and it only showed an intel compiled version for Mac oS X

[11:03] <audreyt> nod. it's a new build (as of today). will be on the haskell site soon

[11:03] <dduncan> that said, I typically use the Mac OS X packages of GHC, for simplicity ... though if one isn't forthcoming soon, I'll try using the one you're pointing to

[11:03] <audreyt> the installation for that is simple "sh configure; make ; sudo make install"

[11:03] <dduncan> okay, I'll try that then, and then will try a clean Pugs build with it

[11:03] <audreyt> try the pre1 posted on/tpopic

[11:04] <audreyt> http://pugs.blogs.com/pre1/Perl6-Pugs-6.2.13.tar.gz

[11:04] <lambdabot> http://tinyurl.com/yb3a52

[11:04] <audreyt> it smokes clean on osx-intel and win32 here

[11:04] <dduncan> sounds good

[11:04] <dduncan> fyi, its already 4am here, so I won't be doing those tests until tomorrow

[11:04] <audreyt> sure that's fine

[11:05] <audreyt> a Tuesday release is good enough

[11:05] <dduncan> I have a different question for the experts here, which concerns my QDRDBMS implementation in Perl 5 ...

[11:06] <dduncan> as part of that implementation, I have made some strict data types for Perl 5 that are named after the Perl 6 ones ...

[11:06] <dduncan> strict mainly meaning strongly typed

[11:06] <dduncan> but they also use singletons, so the same value is only ever stored once, and so comparing refaddrs of 2 Value objects suffices to test that they are equal as well

[11:07] <dduncan> construction is more expensive for simpler types, but cheaper for more complex types, and for all compares

[11:07] <dduncan> now, the question ...

[11:08] <dduncan> I have distinct Str and Blob types, which are basically wrappers around a Perl 5 string in character mode vs one in byte mode

[11:09] <dduncan> now, when creating a variable from a native Perl string, I test the is_utf8 flag on the variable ... it must always be off in the Blob case, and sometimes has to be on in the Str case ...

[11:09] <dduncan> to make things easier for users, I only want to complain about input for a Str if the flag is off and the bytes include 8-bit values

[11:10] <dduncan> so byte mode with just ascii chars, or higher-chars in char mode are fine, ...

[11:10] <dduncan> I would like to know the most performance-efficient way to test the 8th bit

[11:10] <dduncan> ...

[11:11] <dduncan> I thought a regexp may be more expensive, and I didn't see an Encode function

[11:11] <dduncan> the regexp I came up with was: m/^ [0x00-0x7F]* $/x

[11:11] <dduncan> if that's right, it should return true for ascii, and false for higher-bit values

[11:11] <audreyt> you want /[^0x00-0x7F]/

[11:11] <audreyt> and then negate it.

[11:12] <Alias_> So it shortcuts

[11:12] <Alias_> Although it's an error case, so in practice it shouldn't

[11:12] <dduncan> note that I'm only doing that test if the flag is off

[11:12] <nothingmuch> audreyt: trunk or 6.2.13?

[11:12] <dduncan> so the one I did won't shortcut?

[11:13] <audreyt> nothingmuch: should be the same thing but 6.2.13 is preferred

[11:13] <Alias_> It should to a degree, but it will do much more work to do so

[11:13] <dduncan> okay, so I'll take Audrey's suggestion as a faster way

[11:13] <Alias_> Plus for the other one the range is shorter, which probably helps too

[11:13] <Alias_> yes

[11:19] <dduncan> fyi, here is the current version of the Value code: http://darrenduncan.net/Value-20061014a.pm

[11:20] <dduncan> also, if you change the 'Value' to 'Util', you will see that file's one dependency ... which currently just checks arguments

[11:20] <dduncan> that is, http://darrenduncan.net/Util-20061014a.pm

[11:21] <dduncan> it is very possible that the code contains a bunch of overkill that may slow it down a lot, or it may not, I have yet to know

[11:21] <dduncan> a lot of it wouldn't be needed in a Perl 6 version, though

[11:23] *** foo\bar joined
[11:24] <Alias_> ok, best as I can tell, I need a cross-language serialization for an unknown infinite directed graph

[11:24] <dduncan> would YAML work for this?

[11:24] <Alias_> That's what I'm thinking

[11:25] <dduncan> YAML is what I plan to use for the ::Example Engine of my database

[11:25] <dduncan> how its data is saved to disk that is

[11:26] <Alias_> Where are you up to in that regards

[11:26] <dduncan> I hope to have it working in a few weeks

[11:26] <Alias_> You finished Rosetta, and now you are implementing a backend for it?

[11:27] <dduncan> actually, Rosetta is stalled indefinitely, while the QDRDBMS project is meant to take its place in the short term

[11:27] <Alias_> stalled indefinitely?

[11:28] <Alias_> Why?

[11:28] <dduncan> among other things, QDRDBMS is meant to be the non-over-engineered version that I use to play with ideas intended for Rosetta, and see what works out in practice

[11:28] <dduncan> Rosetta is now pure Perl 6, and I want the language to develop a bit more before I resume it

[11:29] <dduncan> mainly, the Perl 5 QDRDBMS is based on an unchanging foundation, and makes it easier to try out certain things, where I'm still trying to figure out how they should be working

[11:30] *** elmex joined
[11:30] <Alias_> ok

[11:30] <dduncan> its hard to ask for help to get things working in Perl 6 when I can't effectively communicate what I actually want

[11:30] <Alias_> :)

[11:30] <dduncan> the Perl 5 impl should help with that communication, having something more concrete to propose

[11:31] <dduncan> also, I want to use some of this stuff in a $job right now, and Perl 5 is the best for that at the moment

[11:31] <xinming> hmm, Changelog has been updated, Hope what I do is right. :-P

[11:34] <svnbot6> r14363 | yiyihu++ |  r14504@HomePc:  xinming | 2006-10-15 19:29:50 +0000

[11:34] <svnbot6> r14363 | yiyihu++ |  Change log update.

[11:34] <svnbot6> r14363 | yiyihu++ |  From r13262 to r14355. What I do mostly is just record changelog on features

[11:34] <svnbot6> r14363 | yiyihu++ |  and bugfix. I hope Changelog for Module and pX can be found in repository. But

[11:34] <svnbot6> r14363 | yiyihu++ |  no time for now, sorry.

[11:42] *** buetow joined
[11:43] *** kanru joined
[11:44] <dduncan> incidentally, the Value module is intended for use in 2 main places; one is in the API that people use to put data in and get data out of a database, and the other is in the implementation of ::Example

[11:44] <dduncan> it is mainly for the former that all the input checking is there

[11:44] <dduncan> for the latter, most input checking isn't needed, as the only calling code is my own

[11:45] <dduncan> in light of this, I may perhaps split that Value file in 2, one for the API, and one for the backend, as applicable, or maybe not

[11:46] <dduncan> I'll just keep it together unless performance is a concern

[11:59] *** Southen_ joined
[12:19] *** Psyche^ joined
[12:30] *** dduncan left
[12:31] *** Southen joined
[12:35] *** Psyche^ is now known as Patterner

[12:51] *** chris2 joined
[12:51] *** Southen_ joined
[12:53] *** camenix joined
[12:55] *** DuskoDugousko joined
[12:56] <wolverian> DuskoDugousko, welcome! don't be afraid to ask things that are unclear to you. have fun :)

[12:56] <audreyt> greetings DuskoDugousko :)

[12:56] <DuskoDugousko> hi everyone

[12:56] <DuskoDugousko> thanks ;)

[12:57] <wolverian> audreyt, does the pre test and compile in 300mb HD space?

[12:57] <wolverian> I know it sounds weird, but my laptop is pretty restricted right now ... :/

[12:57] <audreyt> 358464k

[12:58] <audreyt> er no

[12:58] <audreyt> 278512k

[12:58] <audreyt> so yes.

[12:58] <wolverian> oh, that's fine :) thanks

[12:59] <audreyt> np :)

[12:59] <wolverian> I used roles for the first time ever tonight.. granted that was moose, but still pretty nice

[13:00] <wolverian> I think I saw a light about the reuse bit there

[13:00] <wolverian> they're components, so make them first class! instead of, you know, classes. cough.

[13:01] *** DuskoDugousko is now known as Dugousko

[13:01] <audreyt> well Pugs as of this release also supports simple roles...

[13:01] <wolverian> oh.. I thought that was in the next next release

[13:01] <wolverian> audreyt++

[13:01] <audreyt> the MOP that allows you to introspect roles are

[13:01] <audreyt> but "does" and "role Foo {}" is alraedy in

[13:01] <wolverian> ah

[13:01] <audreyt> so have fun with them :)

[13:02] <wolverian> yay

[13:02] <wolverian> can I pattern match on them?

[13:04] <audreyt> ?eval role Foo {} class Bar does Foo {}; Bar.new ~~ Foo

[13:04] *** evalbot_r14350 is now known as evalbot_r14363

[13:04] <evalbot_r14363> Bool::True

[13:04] <audreyt> yes.

[13:04] <wolverian> should have tried that. thanks!

[13:04] <wolverian> ok, my ghc confused it

[13:04] <audreyt> np :)

[13:04] <wolverian> Could not find module `Distribution.Simple':

[13:04] <wolverian> I've seen that before - my setup is probably borked

[13:04] <audreyt> you didn't have Cabal?

[13:05] <wolverian> I do, but I think I have remains of a ghc 6.5 somewhere

[13:05] <wolverian> Cabal-1.1.4

[13:05] <wolverian> ghc 6.4.1

[13:06] <audreyt> that should be fine

[13:07] <wolverian> yeah, I'm sure it's my setup that's borked. don't mind it

[13:12] *** ndm joined
[13:22] *** nothingmuch joined
[13:36] *** sosko_ joined
[13:46] <audreyt> hm. 9 weeks. no blogs from me. oy.

[13:46] * audreyt goes remedying that

[13:46] <wolverian> audreyt++ :)

[14:13] *** ludan joined
[14:18] *** diakopter joined
[14:18] <audreyt> journal up.

[14:21] <audreyt> sprinkling it with hrefs...

[14:23] *** justatheory joined
[14:37] *** Odin-LAP joined
[15:05] *** justatheory joined
[15:19] *** diakopter left
[15:20] <xinming> audreyt: please check my "homework" >_<

[15:20] <xinming> :-P

[15:20] <xinming> I don't know if the changelog I made is right...

[15:21] *** ndm left
[15:21] <xinming> But don't have time really. sorry for that I didn't log the change on modules pX

[15:21] <xinming> s/pX/and pX/

[15:31] *** thepler_ joined
[15:37] *** araujo joined
[15:40] *** kanru joined
[15:42] *** mauke joined
[16:57] *** penk joined
[17:16] *** larsen joined
[17:27] *** b_jonas-2 joined
[17:27] *** b_jonas-2 left
[17:27] *** b_jonas joined
[17:29] <b_jonas> the numeric switch to regexps will be useful

[17:30] <b_jonas> you can just write m:4/<[^|]>/ instead of (split "|")[4]

[17:30] <b_jonas> or maybe m:5, I don't know if it's indexed from one or zero

[17:32] <TimToady> bare number isn't supposed to be allowed.  Should be m:5th to get .[4]

[17:33] <b_jonas> I see. :5th seems a very strange syntax though

[17:33] <TimToady> or :5x to get the first five

[17:33] <b_jonas> why is :5 not allowed? is that because of the other role of the colon?

[17:33] <TimToady> it's syntactic sugar for :nth(5) and :x(5)

[17:34] <TimToady> because it's ambig whether you mean nth or x

[17:34] <TimToady> plus bare :16<...> is radix notation

[17:34] <b_jonas> is it?

[17:34] <TimToady> not that radix is meaningful on a regex

[17:34] <b_jonas> so bare numeric switches are not allowed at all, not only for regexps?

[17:35] <TimToady> ?eval chr :16<263a>

[17:35] <evalbot_r14363> "☺"

[17:35] <TimToady> that's correct.

[17:35] <b_jonas> then n:5th/<[^|]>/ isn't any shorter than (split"|")[4] though I still like it better

[17:35] <TimToady> it gets the intent out front.

[17:36] <b_jonas> oh, and a * is missing

[17:36] <TimToady> particularly for s:2nd/foo/bar/

[17:36] <b_jonas> m:5th/<[^|]>+/

[17:36] <b_jonas> m:5th/<[^|]>*/ I mean

[17:37] <TimToady> ^| is not correct if you're trying to negate

[17:37] <TimToady> <-[|]>

[17:38] <b_jonas> oh

[17:38] <b_jonas> that's paralel to the <[a..z]> syntax which also has changed

[17:38] <TimToady> yes.

[17:38] <TimToady> gotta run &

[17:39] <b_jonas> bye then

[17:45] *** b_jonas left
[17:47] *** reZo joined
[18:18] *** Limbic_Region joined
[18:18] <Limbic_Region> salutations all

[18:20] *** mako132_ joined
[18:23] <Patterner> "17954 test cases: 17954 ok, 0 failed" :)

[18:23] <Patterner> Limbic_Region: moin moin

[18:27] *** MacVince joined
[18:28] <Limbic_Region> I am testing from the repo - hope that is ok

[18:33] <Limbic_Region> beginning smoke

[18:34] *** mako132_ joined
[18:36] *** Aankhen`` joined
[18:38] * Patterner pours water over Limbic_Region 

[18:41] * Limbic_Region needed that to wake up

[18:41] <Limbic_Region> thanks

[18:44] *** zdeqb joined
[18:48] *** zdeqb left
[18:51] *** cjeris joined
[18:55] *** explorer joined
[18:56] *** ludan joined
[19:03] *** lollan joined
[19:06] *** araujo joined
[19:08] <Limbic_Region> smoke finished

[19:11] <Limbic_Region> 1 failure

[19:11] <Limbic_Region> 99.99% ok

[19:11] <Limbic_Region> looking at what failed

[19:14] <Limbic_Region> false alarm

[19:14] <Limbic_Region> my local copy was b0rked

[19:14] <Limbic_Region> @tell audreyt r14363 smokes 100% ok for me on Win32

[19:14] <lambdabot> Consider it noted.

[19:19] *** larsen joined
[19:36] *** penk joined
[19:37] *** penk joined
[19:39] <tewk> running debian sid on x86: Setup: cannot satisfy dependency pugs-fps-any

[19:43] *** kcwu joined
[19:44] *** amv joined
[19:50] *** penk joined
[19:52] <Limbic_Region> tewk - are you running one of the binary builds?

[19:55] <tewk> of ghc? no I'm using http://haskell-unsafe.alioth.debian.org/haskell-unsafe.html

[19:55] <lambdabot> Title: Haskell Unsafe, http://tinyurl.com/y4lmhv

[19:55] <Limbic_Region> well, that's probably the reason

[19:55] <Limbic_Region> they removed some of the packages from the base

[19:55] <Limbic_Region> not too hard to add though

[19:55] <Limbic_Region> give me a second

[19:57] <Limbic_Region> tewk - you may need to check with #haskell for help

[19:57] <Limbic_Region> but

[19:57] <Limbic_Region> http://paste.lisp.org/display/25124 is a related but not exactly the same problem

[19:57] <Limbic_Region> I provided steps to use Cabal to install extra packages

[19:57] <tewk> Thanks

[19:57] <Limbic_Region> not sure about fps btw

[19:57] <Limbic_Region> need to go

[19:57] <Limbic_Region> good luck

[20:01] *** penk joined
[20:14] *** penk joined
[20:18] *** penk joined
[20:19] *** mako132_ joined
[20:29] *** lollan joined
[20:32] *** fridim__ joined
[20:40] *** markstos joined
[20:53] *** diakopter joined
[21:20] *** diakopter left
[21:21] *** reZo joined
[21:47] *** fridim__ is now known as fridim

[21:49] <nothingmuch> is ther e a better way than $string .= $pad_char x ( ( 4 - length($string) % 4 ) % 4) ; to pad a string to a 4 bytre boundry?

[21:49] <nothingmuch> the double modulu in there is annoying me

[21:59] *** ingy joined
[22:00] <nothingmuch> ingy: ping

[22:01] <ingy> hi nothingmuch

[22:01] <ingy> ttul.org is down :(

[22:02] <nothingmuch> ouch

[22:02] <nothingmuch> M::C is also broken

[22:07] <ingy> huh?

[22:07] <nothingmuch> $foo <<= 4; # parsed as a heredoc

[22:08] <ingy> ok

[22:08] * ingy fixes

[22:08] <nothingmuch> *hug*

[22:08] * ingy is warmed

[22:09] * nothingmuch 'smum knitted him a sweater

[22:09] <nothingmuch> but it's not being used to help ingy's become warm

[22:11] <ingy> I want to add a mode to M::C where the 'use Compile::Foo qw(a b);' is replaced by a compilation result.

[22:11] <nothingmuch> hmm?

[22:11] <nothingmuch> like, foo in expression?

[22:12] <nothingmuch> s/foo/use/; # there was a siren at 5:20 am today, i'm tired

[22:12] <ingy> well normally use Compile::Foo turns on Foo compilation

[22:12] <ingy> but I ust want it to plop a chunk of perl in plae of that one line

[22:12] <nothingmuch> ah

[22:13] <nothingmuch> that would be cool

[22:13] <ingy> so it acts like a function....

[22:13] <ingy> my main use case is to create modules that act as templates

[22:13] <ingy> for certain things

[22:14] <ingy> just put the templates in the DATA section or something

[22:14] <ingy> and qw(a b) can be template data

[22:14] <ingy> or think of them as template function args

[22:15] <ingy> anyway, what do I call the pmc_... method to enable this mode?

[22:15] <nothingmuch> uh... i dunno

[22:15] <nothingmuch> haven't looked into MC internals that much

[22:15] <ingy> pmc_use_means_now?

[22:15] <ingy> XD

[22:15] <ingy> I like that

[22:16] <nothingmuch> =)

[22:17] <ingy> This will make Inline::Module much more trivial

[22:19] <ingy> nothingmuch: do you have a test for <<=

[22:19] <nothingmuch> no

[22:19] <nothingmuch> ENOBRANE right now

[22:20] <ingy> EDRUNK ?

[22:20] <nothingmuch> no, read above

[22:20] <nothingmuch> ESIRENATFIVEINTHEFUCKINGMORNING

[22:20] <nothingmuch> a "we're getting nuked" siren

[22:20] <ingy> are you?

[22:20] <nothingmuch> nope

[22:20] <nothingmuch> it was in error, it seems

[22:21] <ingy> how did you find the <<= error?

[22:21] <nothingmuch> i used <<= ;-)

[22:21] <ingy> od

[22:21] <ingy> n

[22:21] * nothingmuch did some lightweight bit twiddling

[22:30] *** dduncan joined
[22:41] *** justatheory joined
[22:41] <nothingmuch> ingy: night =)

[22:42] <ingy> nothingmuch: fixed

[22:42] <ingy> and tested

[22:48] <dduncan> following up yesterday, I'm now downloading the GHC 6.6 binary for Mac OS X PPC, and once that's installed, I will do a clean/first compile of the Pugs preflight and smoke it ... and I'll see how much faster it is too

[23:10] <dduncan> GHC now installed ...

[23:19] <dduncan> hm, I notice that Pugs is building with a different GCC version than my Perl 5 was (4.0.1 vs 3.4); hopefully that won't be a problem for embedding

[23:19] *** ofer0 joined
[23:31] *** explorer joined
[23:32] *** explorer is now known as JoaquinFerrero

[23:32] *** bsb joined
[23:54] *** ofer0 joined
