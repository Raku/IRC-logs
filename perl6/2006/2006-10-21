[00:00] <audreyt> thus fulfilling one of TimToady's explicit design goals

[00:00] <Limbic_Region> oooh, shiny

[00:00] <Limbic_Region> I just happen to have 2 processors

[00:00] <audreyt> what a surprise, me too

[00:00] <audreyt> re melatonin. no. should I?

[00:03] <TimToady> imagine a beowolf cluster of pugses...

[00:03] <svnbot6> r14460 | seano++ | * Guarantee a single terminating semicolon when evaluating input from REPL.

[00:04] *** thepler joined
[00:05] <holoway> audreyt: it will help you get your sleep cycle back

[00:06] <audreyt> holoway: ah. that's a good thing

[00:06] <TimToady> when will Haskell get GPU support?  :)

[00:06] <audreyt> wonder how it'd interact with all sorts of brain altering chemicals I'm using...

[00:07] <audreyt> TimToady: now? http://conal.net/Vertigo/

[00:07] <lambdabot> Title: The Vertigo GPU compiler

[00:07] <TimToady> okay, how 'bout cell support? :)

[00:07] <audreyt> another BSD licensed thing from Microsoft Research

[00:08] <audreyt> as in organic computer? no idea :)

[00:08] <TimToady> IBM cell

[00:09] <TimToady> and PS3, is it?  think so...

[00:09] <audreyt> TimToady: there's only design not code yet: http://www.haskell.org/haskellwiki/Yhc/Ideas#Proof_of_concept_port_to_Cell_architecture

[00:09] <TimToady> I think it'd be cool if ==> could feed cell processors on a PS3

[00:09] <lambdabot> Title: Yhc/Ideas - HaskellWiki, http://tinyurl.com/ydxupr

[00:10] <holoway> audreyt: I would probably talk to your doctor about that

[00:10] <audreyt> hmm, interesting arch

[00:10] <holoway> audreyt: it can have some effects on other brain chemicals, likely dopamine levels

[00:10] <audreyt> holoway: k :)

[00:10] <TimToady> yeah, more for pipelining than S

[00:10] <TimToady> SIMD

[00:10] <holoway> but I am not a doctor :)

[00:12] <Limbic_Region> audreyt - it is produced naturally by the body to regulate your circada rhythms

[00:12] <Limbic_Region> artificial dose "resets" your clock

[00:12] <Limbic_Region> sosorry was AFK

[00:12] <TimToady> or so goes the theory.

[00:13] <Limbic_Region> my experience is that it works only if taken ocassionally

[00:13] <Limbic_Region> to try and take it as a sleep aid regularly renders it useless

[00:13] <TimToady> it's likely to be considerably milder than the stuff you're taking, so it might just have no effect.

[00:14] * justatheory goes

[00:15] <audreyt> well, forced wakeup-to-sunlight in the morning for today and the next few days will probably do me good

[00:15] <audreyt> bbiab...

[00:21] *** mako132_ joined
[00:23] *** mako132_ joined
[00:24] *** mako132_ joined
[00:26] *** kjw joined
[00:41] *** mdiep_ joined
[00:42] *** mako132_ joined
[00:59] <avar> Speakin of which, I need sunlight

[01:06] *** weinig|bbl is now known as weinig

[01:07] *** weinig joined
[01:20] *** lollan joined
[01:54] <svnbot6> r14461 | seano++ | * always display errors, even when trailing semi

[02:16] *** weinig is now known as weinig|bbl

[02:43] <svnbot6> r14462 | fglock++ | v6/runtime

[02:43] <svnbot6> r14462 | fglock++ | - added Pugs::Runtime::Perl6::ReadOnly & ReadWrite cell types

[02:43] <svnbot6> r14462 | fglock++ | v6/emitter(2)

[02:43] <svnbot6> r14462 | fglock++ | - fixed internal method names: set->STORE, get->FETCH, pair->Pair

[02:43] <svnbot6> r14462 | fglock++ | - typing support is in place (not used yet)

[02:43] <svnbot6> r14462 | fglock++ | - binding to Value makes a Scalar read-only

[03:09] *** buubot joined
[03:16] *** weinig joined
[03:23] *** putter joined
[03:46] *** fglock joined
[03:48] <fglock> I didn't know this - it wasn't commented here: http://freenode.net/news.shtml

[03:48] <lambdabot> Title: freenode news: 23 September 2006

[03:54] *** SubStack joined
[03:59] <audreyt> SMP parallelism implemented on junctions

[03:59] <audreyt> running a smoke with +RTS -N2 to see if it breaks stuff...

[04:00] <audreyt> the hyperops need some thinking

[04:00] <audreyt> in @a.>>meth, unlike with junctions, the results still need to be ordeed

[04:01] <audreyt> even though the evaluation order may be unordered

[04:02] * audreyt ponders the paragraph in S03 that says "[Conjecture: we could

[04:02] <audreyt> allow dependencies that assume top-down visitation and only leaves

[04:02] <audreyt> sibling calls unordered.]"

[04:02] <audreyt> and how that translates to parallelization strategies...

[04:04] *** Aankh|Clone joined
[04:05] <fglock> audreyt: it could preprocess into tuples [ $n, $a[$n].meth ]

[04:06] <fglock> pairs, even

[04:06] <svnbot6> r14463 | putter++ | Regexp-Engine-Reentrant - Ripping out crud.  Much still to go.  No regressions.

[04:07] <audreyt> yeah, that's what I'm going to do

[04:07] <audreyt> have it return a Set of (ArrayIndex, Val)

[04:08] <audreyt> funny how

[04:08] <audreyt> $ env GHCRTS=-N1 ./pugs -e 'sub f ($x) { $x.say } f(any(1..10))'

[04:08] <audreyt> gets me

[04:09] <audreyt> 2 4 5 6 7 8 9 10 1 3

[04:09] <audreyt> each on a line of its own

[04:09] <audreyt> but

[04:09] <audreyt> $ env GHCRTS=-N2 ./pugs -e 'sub f ($x) { $x.say } f(any(1..10))'

[04:09] <audreyt> 12096148

[04:09] <audreyt> 753

[04:09] <audreyt> and then the rest of newlines

[04:09] <putter> curious

[04:10] <audreyt> it preempted between the print and the \n

[04:10] <audreyt> I think

[04:10] <putter> is say supposed to be atomic?

[04:10] <audreyt> wouldn't really expect it to be

[04:11] <eviltwin_b> not too surprising if they're output separately and there's no buffering

[04:11] <audreyt> I mean, not acrross buffer boundaries for sure

[04:12] <audreyt> hm, tests fail.

[04:12] <audreyt> our ++ is not atomic within a STM boundary.

[04:12] <audreyt> duh. ;) fixing

[04:12] <eviltwin_b> (buffering inside say() that is, in the same process the standard buffering would be largely irrelevant)

[04:14] <audreyt> fortunately that's easily fixed.

[04:17] <audreyt> this is interesting, as all the "safe" ops in Prim.hs needs to be inspected for atomicity...

[04:17] *** norageek2 is now known as norageek

[04:19] <audreyt> TimToady: may we safely assume all the postassignment operators do not cause side effects?

[04:19] <audreyt> except for .= that is, which is treated separately anyway

[04:20] *** statico2 joined
[04:20] <TimToady> postassignment?

[04:20] <audreyt> += -= *=

[04:20] <audreyt> **= etc

[04:20] <audreyt> that is they implicitly place "atomically" within

[04:21] <TimToady> you mean other than the main one.

[04:21] <audreyt> $x += 2; # guaranteed to be atomic to other threads

[04:21] <TimToady> seems like it should be pretty atomic to me.

[04:21] <audreyt> er, I mean it doesn't have effects other than the assignment itself, yes.

[04:21] <audreyt> cool, done

[04:23] <putter> assignment itself might include type checking.  what else?  do we have "observers"?  (ie, call me if this variable is assigned to)

[04:24] <audreyt> well the variable can tie STORE

[04:24] <audreyt> that counts as the assignment itself

[04:24] <audreyt> it's more like, if ++ is atomic, then so should +=1

[04:26] *** ofer0 joined
[04:26] <putter> perhaps most users will  use pragma expressions_are_atomic;

[04:26] <svnbot6> r14464 | audreyt++ | * Makefile.PL: Enable -threaded even when we embed an nonthreaded Perl5.

[04:26] <svnbot6> r14464 | audreyt++ |   Of course the Perl5-land variables can't be made atomic (they'll just

[04:26] <svnbot6> r14464 | audreyt++ |   be shared 5005thread-style), but GHC 6.6's SMP supports depends on its

[04:26] <svnbot6> r14464 | audreyt++ |   -threaded runtime, and it's just too good to pass. :-)

[04:27] <audreyt> putter: but anything that does IO can't be atomic...

[04:27] <audreyt> "say", say.

[04:27] <audreyt> unless we ignore its return value :)

[04:27] <TimToady> durn monads...

[04:27] <audreyt> if so then we can put it into unsafeIOtoSTM

[04:28] <audreyt> but hey, &say returning true is what makes it cooler than Ruby!

[04:28] <audreyt> # http://weblog.lonelylion.com/2006/10/16/why-perl-6-is-better-than-ruby/

[04:29] <lambdabot> Title: Lonely Lion » Blog Archive » Why Perl 6 is better than Ruby, http://tinyurl.com/uqg8g

[04:29] <putter> sigh

[04:29] <TimToady> well, there you have it.

[04:31] <putter> end of day &

[04:33] <audreyt> env GHCRTS=-N2 perl util/prove6 t/junction/*.t

[04:33] <audreyt> ppassed. committing

[04:34] <audreyt> now let's see about hyperops...

[04:35] <svnbot6> r14465 | audreyt++ | * Pugs.Junc: Autothread (literally!) any calculation involving

[04:35] <svnbot6> r14465 | audreyt++ |   junctions, by spawning GHC-land microthreads that can then be

[04:35] <svnbot6> r14465 | audreyt++ |   distributed across CPUs, with GHC 6.6+ and setting the GHCRTS

[04:35] <svnbot6> r14465 | audreyt++ |   environment variable to "-Nx", where x is the number of CPUs

[04:35] <svnbot6> r14465 | audreyt++ |   you'd like to throw at Pugs.

[04:35] <svnbot6> r14466 | audreyt++ | * Pugs.Prim: Make ++ and -- atomic.

[04:35] <TimToady> now if only we had real quantum computers...

[04:36] <audreyt> -N*

[04:37] <audreyt> most of the audience today knows nothing about perl. so I get away saying

[04:38] <audreyt> "in Perl 6, we think of a function as compiled in three different ways, depending on the kind of evaluation strategy you'd like to use: either you use it just for the side effects, or you'd like an lazily evaluated stream, or you'd like an eagerly evaluated value"

[04:38] * eviltwin_b wonders if he can convince xchat2 to only respond to "perl" in the other channels :>

[04:39] <audreyt> as if it was the motivation all along :)

[04:39] <TimToady> :)

[04:39] *** diotalevi joined
[04:40] <audreyt> and before they've read the Fortress spec, Perl6's treatment on this is seen as especially brilliant :)

[04:40] <TimToady> I'm certainly on record as saying we're designing Perl to be better than we know how to make it.  :)

[04:40] <audreyt> that's so true...

[04:41] <audreyt> fortunately most of them we don't have to make it ourselves, as Pugs is mostly glue code nowadays...

[04:41] <audreyt> s/before they've read/because they've read/

[04:45] *** andres_ joined
[04:47] <Khisanth> eviltwin_b: if you have it on highlight, no

[04:48] <eviltwin_b> yeh.  just have to deal I guess :/

[04:48] <audreyt> cool, [1,2,3].>>say just printed "1\n3\n2\n"

[04:48] <audreyt> since the order of side effects are not guaranteed

[04:48] <audreyt> that seems to be correct

[04:50] <TimToady> works for me.

[04:54] *** SubStack joined
[04:58] <audreyt> 'k, fully implemented. seeing if tests break...

[05:01] <audreyt> seems to work just fine. committing

[05:04] <TimToady> smokin'

[05:04] <svnbot6> r14467 | audreyt++ | * Pugs.Prim.List: All Hyper operators, including @foo.>>method,

[05:04] <svnbot6> r14467 | audreyt++ |   are autothreaded similar to junctions.  With GHCRTS=-N2 and

[05:04] <svnbot6> r14467 | audreyt++ |   above, that means the order of evaluation is impredictable.

[05:04] <svnbot6> r14467 | audreyt++ |   although the return values will still be ordered as usual.

[05:04] <svnbot6> r14467 | audreyt++ | * Pugs.Internals: Move replicateM to it because

[05:04] <svnbot6> r14467 | audreyt++ |   we use it all over the place now for parallelization...

[05:05] <audreyt> note that during hyperizing a "resetT" is placed to guarantee atomicity. that means full reentrant continuations _cannot_ be invoked by one of the spawned threads

[05:05] <audreyt> although control exceptions and other exceptions continues to work as usual.

[05:05] <audreyt> that's probably not too strict a restriction, and I can't think of a way to preserve multiple continuation cursors during hyperizing...

[05:06] <audreyt> since they are conceptually occuring on different machines, and continuation cursors generally don't resume across machines unless you serialize them

[05:06] <audreyt> which we definitely don't want to do for hyprizing

[05:07] <audreyt> because of the heavy cost of snapshotting the memory etc

[05:07] <TimToady> yes, that's all part of the hyperpromise.

[05:09] <audreyt> smoking with -N2

[05:11] *** fayland joined
[05:13] *** tcliou joined
[05:13] *** SCalimlim joined
[05:13] *** frankg joined
[05:13] *** shobadobs joined
[05:13] *** Gothmog_1 joined
[05:13] *** nperez joined
[05:13] *** evalbot_r14458 joined
[05:13] *** mugwump joined
[05:13] *** Grrrr joined
[05:13] *** knewt joined
[05:13] *** kane-xs joined
[05:13] *** miyagawa_ joined
[05:13] *** silug joined
[05:13] *** j0sephi joined
[05:13] *** tewk joined
[05:13] *** integral joined
[05:13] *** SamB joined
[05:13] *** GeJ joined
[05:13] *** Eidolos joined
[05:14] *** mugwump joined
[05:20] <audreyt> TimToady: control exceptions.

[05:20] <audreyt> ['last', 'next'].>>eval

[05:20] <audreyt> the hyperizer collects both exceptions just fine

[05:20] <audreyt> what does it do with them?

[05:20] <audreyt> well, not eval

[05:20] <audreyt> but you get the idea

[05:20] <audreyt> actually, eval would work here too

[05:21] <TimToady> more likely than those are warning control exceptions.

[05:21] *** BooK_ joined
[05:22] <audreyt> what does that mean operationally?

[05:22] <TimToady> depends on whether some CONTROL block somewhere suppresses them.

[05:23] <audreyt> sure. but what I mean is

[05:23] <audreyt> when you say

[05:23] <audreyt> map { .eval } ('last', 'next')

[05:23] <audreyt> last happens, next never does

[05:23] <audreyt> but on the hyperizing instance

[05:23] <audreyt> we get result of both

[05:23] <audreyt> so:

[05:23] <audreyt> we can either choose the first exception that got produced and follow it

[05:24] <audreyt> or convert the all into one warning

[05:24] <audreyt> or do something else

[05:24] <audreyt> or, well because we retain the order

[05:24] <audreyt> still just do the first one, in this case "last"

[05:24] <audreyt> by waiting for all hyper threads to complete always

[05:24] <TimToady> could have a pecking order.

[05:25] <TimToady> so last always beats next, for instance.

[05:25] <TimToady> I suppose if a hyper is going to produce a lot of identical warnings, it would be friendly to try to coalesce them a bit...

[05:26] <audreyt> indeed

[05:26] <TimToady> unless they include the data, in which case it gets harder to factor out the common parts.

[05:27] <TimToady> as I said on, I think, p6l, exceptions within hypers are a good reason for unthrown exceptions.

[05:27] <audreyt> smoke's all good.

[05:28] <TimToady> still on all_parse.t, grumble...

[05:30] <TimToady> gotta get up early tomorrow, so likely to turn in soon.

[05:30] <TimToady> anything else on your mind?

[05:30] <audreyt> not anything pressing

[05:30] <audreyt> it's just I feel much more alive not having to answer $job emails for the next three weeks :)

[05:31] <audreyt> sleep well, thanks for the mapreduce primitives :)

[05:31] <TimToady> you're welcome, I hope. :)

[05:31] <TimToady> zzz &

[05:36] <audreyt> 07:35 < dons> audreyt: so now we just need to finish the DPH+GPU library off

[05:36] <audreyt> 07:36 < dons> so you can run your maps and reduces on seanl's GPU library

[05:36] <audreyt> 07:36 < dons> oh, something else we're working on down here at unsw

[05:36] <audreyt> 07:36 < dons> folds,scanls,maps,filters on the gpu directly

[05:36] *** justatheory joined
[05:36] <audreyt> 07:36 < dons> as a backend to GHC parallelism

[05:37] <audreyt> (from #ghc.) more free toys on the way in :)

[05:48] *** kisu joined
[06:20] *** glasser joined
[07:25] *** glasser joined
[07:25] *** mugwump joined
[07:25] *** tcliou joined
[07:25] *** frankg joined
[07:25] *** shobadobs joined
[07:25] *** Gothmog_1 joined
[07:25] *** nperez joined
[07:25] *** evalbot_r14458 joined
[07:25] *** Grrrr joined
[07:25] *** knewt joined
[07:25] *** kane-xs joined
[07:25] *** miyagawa_ joined
[07:25] *** silug joined
[07:25] *** j0sephi joined
[07:25] *** tewk joined
[07:25] *** integral joined
[07:25] *** SamB joined
[07:25] *** GeJ joined
[07:25] <dduncan> question: I'm now writing the slides/notes for a 45-minute-ish tutorial for general programmers on how to make a RDBMS from scratch, which I intend to give locally at a Perl-Mongers meeting et al, as well as propose for international conferences in 2007 ... I thought it may be good to store this work in progress in the Pugs repository, but I'm wondering where specifically may be best

[07:25] <dduncan> er, I'll try that again in a minute ...

[07:26] <dduncan> question: I'm now writing the slides/notes for a 45-minute-ish tutorial for general programmers on how to make a RDBMS from scratch, which I intend to give locally at a Perl-Mongers meeting et al, as well as propose for international conferences in 2007 ... I thought it may be good to store this work in progress in the Pugs repository, but I'm wondering where specifically may be best

[07:27] <audreyt> either ext/Rosetta/ or docs/talks will be fine

[07:27] <audreyt> anywhere you feel like

[07:27] <dduncan> while it ought to be generally useful, it may be specifically useful to Perl 6 dev in general, and I preferred docs/

[07:27] <dduncan> okay ... it could always be moved later

[07:28] <audreyt> exactly

[07:40] <dduncan> okay, done

[07:40] <svnbot6> r14468 | Darren_Duncan++ | first whack at a 'how to make your own RDBMS from scratch in 30 days' tutorial notes/slides, for a local Perl Mongers talk in Nov, and maybe international conference talks in 2007

[07:41] *** explorer joined
[07:59] <audreyt> journal up

[08:00] * audreyt waves and fades back to sleep &

[08:17] <svnbot6> r14469 | raptor++ | added package-scoped named subs tests

[08:21] *** root4o joined
[08:21] <root4o> hi

[08:22] <root4o> anyone here

[08:43] *** ilogger2 joined
[08:44] <svnbot6> r14471 | raptor++ | rm named_subs.t

[09:01] *** bonsai joined
[09:08] <masak> a question arose in my mind after reading TimToady++'s http://www.nntp.perl.org/group/perl.perl6.language/26610

[09:08] <lambdabot> Title: nntp.perl.org - perl.perl6.language (26610), http://tinyurl.com/yxw5vr

[09:08] <masak> what if the perl6 programmer defined two operators with the same precedence level?

[09:09] <masak> and with conflicting associativity

[09:09] <masak> how far would she get in doing this?

[09:09] <masak> i.e. willfully trying to create an ambiguous situation

[09:10] <masak> I was about to mail this to p6l, but I couldn't find in the specs how to define ops with a certain prec level and assoc direction

[09:10] <audreyt> grep for is assoc('right')

[09:10] <masak> oki

[09:10] <audreyt> and is tighter

[09:12] <masak> found them, in S06

[09:13] <masak> are these two implemented? ("is assoc" and "is tighter")

[09:13] <audreyt> assoc is

[09:13] <audreyt> tighter is not

[09:13] <audreyt> just not felt the need for it

[09:13] <audreyt> is probably trivial :)

[09:13] <masak> but the problem should be able to be created in pugs right now?

[09:13] <masak> for increased effect :)

[09:13] <audreyt> well just declare two infix with different assoc

[09:13] <audreyt> that's it

[09:13] <masak> right ho

[09:13] * masak declares...

[09:14] <audreyt> t/operators/operator_overloading.t has the syntax

[09:14] <masak> thx

[09:14] <audreyt> np :) *thunk*

[09:18] *** integral_ joined
[09:18] *** tewk joined
[09:21] <masak> turns put pugs dies with "ambiguous use of a right associative operator"

[09:21] <masak> which seems sane in a way

[09:21] <masak> i think

[09:23] *** larsen_ joined
[09:25] *** integral joined
[09:29] * masak sends the p6l email anyway :)

[09:36] *** chris2 joined
[09:43] *** cnrocks joined
[09:47] *** cm joined
[09:54] *** araujo joined
[09:58] *** chris2_ joined
[10:01] *** chris2_ joined
[10:02] *** chris2_ is now known as chris2

[10:05] *** cm_ joined
[10:08] *** buetow joined
[10:10] *** elmex joined
[10:43] *** bons joined
[10:52] *** SCalimlim joined
[11:13] *** bonsai joined
[11:15] *** Psyche^ joined
[11:17] *** iblechbot joined
[11:23] *** gene9 joined
[11:31] *** Psyche^ is now known as Patterner

[11:33] *** elmex joined
[11:37] *** rindolf joined
[11:37] <rindolf> Hi all!

[11:37] <rindolf> I wrote two Perl Foundations Proposals and could use your input - see http://www.shlomifish.org/Files/files/emails/TPF-Proposals/ . Please read them and comment.

[11:37] <lambdabot> Title: Index of /Files/files/emails/TPF-Proposals, http://tinyurl.com/ydeeg6

[11:39] *** elmex_ joined
[11:40] *** araujo joined
[11:43] <masak> rindolf: good initiative. I hope your proposals are accepted

[11:45] <rindolf> masak: thanks.

[11:45] <rindolf> masak: any comments?

[12:15] <nothingmuch> ingy: ping

[12:15] <lambdabot> nothingmuch: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:15] <nothingmuch> @moosages

[12:15] <lambdabot> Alias_ said 1d 3h 34m 28s ago: You don't have any new messages.

[12:32] *** DaGo joined
[12:35] <rindolf> Hi nothingmuch

[12:35] <rindolf> nothingmuch: I wrote two Perl Foundations Proposals and could use your input - see http://www.shlomifish.org/Files/files/emails/TPF-Proposals/ .

[12:36] <lambdabot> Title: Index of /Files/files/emails/TPF-Proposals, http://tinyurl.com/ydeeg6

[12:37] *** jabbot joined
[12:40] *** Limbic_Region joined
[12:42] *** ofer0 joined
[12:51] <masak> rindolf: only that I think they are both clear and to the point, which is a good thing

[12:51] <rindolf> masak: OK.

[12:51] <rindolf> masak: thanks.

[12:53] <Limbic_Region> (waking up to your car horn blaring non-stop)--

[12:54] <Limbic_Region> (pulling horn fuse and saving $800 on replacing the airbag assembly)++

[12:56] <Patterner> (buying a strap-on replacement horn for $9.99 from a tv shopping channel)++

[12:56] <Limbic_Region> heh

[13:08] <nothingmuch> (buying a strap-on for $9.99 from a tv shopping channel)--

[13:13] <nothingmuch> @seen cmarcello?

[13:13] <lambdabot> I haven't seen cmarcello?.

[13:13] <nothingmuch> @seen cmarcelo

[13:14] <lambdabot> I saw cmarcelo leaving #perl6 2d 8h 26m 51s ago, and .

[13:14] <nothingmuch> @seen audreyt

[13:14] <lambdabot> audreyt is in #ghc, #haskell and #perl6. I last heard audreyt speak 3h 59m 37s ago.

[13:14] * nothingmuch better take this to #haskell

[13:17] <xinming> ?eval  grep m:perl5 /(1|2|3|4|5)/, (1..100);

[13:17] <evalbot_r14471> Error: Cannot cast from VList [VInt 1,VInt 2,VInt 3,VInt 4,VInt 5,VInt 6,VInt 7,VInt 8,VInt 9,VInt 10,VInt 11,VInt 12,VInt 13,VInt 14,VInt 15,VInt 16,VInt 17,VInt 18,VInt 19,VInt 20,VInt 21,VInt 22,VInt 23,VInt 24,VInt 25,VInt 26,VInt 27,VInt 28,VInt 29,VInt 30,VInt 31,VInt 32,VInt 33,VInt 34,VInt 35,VInt 36,VInt 37,VInt 38,VInt 39,VInt 40,VInt 41,VInt 42,VInt 43,VInt 44,VInt 45,VInt 46,VInt 47,VInt 48,VInt 49,VInt 50,VInt 51,VInt 52,VInt 53,VInt 

[13:17] <xinming> anyone here can tell me why this would cause error please?

[13:19] <Limbic_Region> ?eval grep m:p5/(1|2|3|4|5)/, 1..100;

[13:19] <evalbot_r14471> Error: Cannot cast from VList [VInt 1,VInt 2,VInt 3,VInt 4,VInt 5,VInt 6,VInt 7,VInt 8,VInt 9,VInt 10,VInt 11,VInt 12,VInt 13,VInt 14,VInt 15,VInt 16,VInt 17,VInt 18,VInt 19,VInt 20,VInt 21,VInt 22,VInt 23,VInt 24,VInt 25,VInt 26,VInt 27,VInt 28,VInt 29,VInt 30,VInt 31,VInt 32,VInt 33,VInt 34,VInt 35,VInt 36,VInt 37,VInt 38,VInt 39,VInt 40,VInt 41,VInt 42,VInt 43,VInt 44,VInt 45,VInt 46,VInt 47,VInt 48,VInt 49,VInt 50,VInt 51,VInt 52,VInt 53,VInt 

[13:19] <Limbic_Region> odd

[13:19] <xinming> maybe a bug. :-)

[13:19] <xinming> ?eval  grep m:perl5 /(1|2|3|4|5)/, [1..100];

[13:20] <evalbot_r14471> Error: Cannot cast from VList [VList [VInt 1,VInt 2,VInt 3,VInt 4,VInt 5,VInt 6,VInt 7,VInt 8,VInt 9,VInt 10,VInt 11,VInt 12,VInt 13,VInt 14,VInt 15,VInt 16,VInt 17,VInt 18,VInt 19,VInt 20,VInt 21,VInt 22,VInt 23,VInt 24,VInt 25,VInt 26,VInt 27,VInt 28,VInt 29,VInt 30,VInt 31,VInt 32,VInt 33,VInt 34,VInt 35,VInt 36,VInt 37,VInt 38,VInt 39,VInt 40,VInt 41,VInt 42,VInt 43,VInt 44,VInt 45,VInt 46,VInt 47,VInt 48,VInt 49,VInt 50,VInt 51,VInt 52,VInt 5

[13:20] <Limbic_Region> ?eval grep {$_ ~~ any(1, 2, 3, 4, 5)}, 1..100;

[13:20] <evalbot_r14471> (1, 2, 3, 4, 5)

[13:20] <Limbic_Region> hrm

[13:20] * Limbic_Region is too tired to think ATM

[13:21] <xinming> hmm, I think the problem is, in perl 6, grep needs a "closure" instead of a regex...

[13:21] <xinming> but

[13:21] * xinming isn't sure about this

[13:26] <rindolf> Does anyone know how I can subscribe to the XML-RSS bugs traffic on rt.cpan.org?

[13:27] <wilx> Heh.

[13:27] <wilx> I mean...XML-RSS really has a lot of attention.

[13:27] *** alech joined
[13:27] <wilx> And still the reported bug was unfixed for more than 3 years.

[13:29] <alech> Hi, I'm just trying to get acquainted with Perl6 a bit. From Apocalypse 12, it looks like one can have private attributes with $!something, but I can now get that to work in pugs. Is this a pugs thing or has something changed?

[13:31] <rindolf> wilx: which reported bug?

[13:31] <wilx> Output encoding problem.

[13:31] <xinming> ?eval "<a>xyz</a>" ~~ m:perl5 { <a>(.+)?</a>  }; $1.say;

[13:31] <evalbot_r14471> OUTPUT[␤] Bool::True

[13:31] <xinming> where I did wrong please?

[13:32] <xinming> It seems, No content in $1

[13:34] *** lollan joined
[13:35] <xinming> oops...

[13:35] <xinming> forgot in perl 6, that $0 will be the first ....

[13:35] <xinming> >_<

[14:21] <xinming> audreyt: ping

[14:33] *** seano joined
[14:42] *** justatheory joined
[14:51] *** ofer0 joined
[14:52] * eviltwin_b reads synopses

[14:53] <eviltwin_b> I thought grep was going away, but S02 still refers to it :) (and I noticed someone used it here earlier... habit? or am I confused?)

[14:57] <audreyt> xinming: pong

[14:58] <audreyt> limnot a bug, grep needs a Code, as xinming observed

[14:59] *** larsen_ joined
[14:59] <audreyt> @tell Limbic_Region not a bug, grep needs a Code, as xinming observed

[14:59] <lambdabot> Consider it noted.

[15:04] <xinming> audreyt: Is there a quick way to pass a scalar ref to embeding perl 5 code? eg, using TT, we can't get the result string with the normal way...

[15:05] <xinming> Now, I have a hack, But looks ugly...

[15:05] <xinming> >_<

[15:05] <audreyt> doesn't \$sref work?

[15:05] <audreyt> I'm surprised

[15:05] <audreyt> try VAR($x) also

[15:05] <xinming> my $r = eval q:c /my $r; Template->new->process("hello", {$v.perl}, \$r); $r/, :lang<perl5>;

[15:05] <xinming> audreyt: \$var doesn't work

[15:05] <xinming> that's my ugly hack... >_<

[15:06] <audreyt> try VAR($var)

[15:06] <xinming> Ok.

[15:06] *** scw joined
[15:06] <audreyt> t/perl5/basic.t line 85 says scalar refs work

[15:07] <audreyt> it may be TT specific...

[15:07] *** scw joined
[15:07] <xinming> It doesn't work for TT

[15:07] <xinming> I tried it just now.

[15:07] <xinming> that's why I get a ugly hack... >_<

[15:08] <audreyt> hm I wonder why.

[15:08] <xinming> lisppaste3: url

[15:08] <lisppaste3> To use the lisppaste bot, visit http://paste.lisp.org/new/perl6 and enter your paste.

[15:09] <lisppaste3> xinming pasted "TT doesn't get the reference.." at http://paste.lisp.org/display/28433

[15:10] <xinming> Because, I wish to write my personal home page using perl 6, I did a try 3 months ago... But at that time, Pugs doesn't do well on class. :-P

[15:11] <xinming> s/write/port/;

[15:12] *** kisu joined
[15:15] <audreyt> it's TT2 specific

[15:15] <xinming> audreyt: Ok, I'll give up,

[15:15] <audreyt> no, don't. a sec

[15:15] * xinming wonders, If he can use mason as template in pugs... :-P

[15:15] <xinming> I'll try

[15:15] <xinming> ...

[15:15] <xinming> Ok

[15:16] <audreyt> it didn't work becasue TT2 was hardcoding ref()

[15:17] <audreyt> you can easily work around it

[15:17] <audreyt> my $out; $t.process("hello", $v, { $out = $_ });

[15:17] <audreyt> will do

[15:17] <lisppaste3> xinming pasted "Is this a bug?" at http://paste.lisp.org/display/28434

[15:17] <xinming> audreyt: please see another one

[15:17] <audreyt> not a bug

[15:18] <audreyt> hash(), not hash{}

[15:18] <audreyt> so hash({}) will work I think

[15:18] <xinming> Oh, thanks...

[15:18] <audreyt> hm but wait

[15:18] <audreyt> $a = {};

[15:18] <audreyt> is quite sufficient aleady

[15:18] <xinming> yes

[15:18] <xinming> that's what I mean

[15:18] <xinming> but...

[15:19] <audreyt> I'm fixing the TT2's misassumption for you. a sec

[15:19] <xinming> what I like to see is "$a = {}\n;"

[15:19] <xinming> please note the newline

[15:19] <audreyt> yeah. that's recently outlawed by larry

[15:20] <xinming> thanks

[15:21] <audreyt> np :)

[15:22] <xinming> audreyt: a question, Can we use 90% modules from perl 5 in pugs for now?

[15:22] *** gunya joined
[15:22] <audreyt> I don't know I havn't measured

[15:23] <audreyt> checkin in TT2-friendly fix

[15:23] *** ofer0 joined
[15:24] <xinming> Ok, I will

[15:25] <rindolf> Hi audreyt

[15:25] <xinming> audreyt: How to say Small-White(xiao bai) in English? :-)

[15:25] *** bernhard joined
[15:26] <audreyt> newbie?

[15:26] <audreyt> not sure

[15:27] <rindolf> audreyt: can you please go over http://www.shlomifish.org/Files/files/emails/TPF-Proposals/and let me know what you think?

[15:27] <lambdabot> http://tinyurl.com/yg32ll

[15:28] <audreyt> looking

[15:28] <rindolf> audreyt: thanks.

[15:28] <xinming> audreyt: Not newbie, I mean someone who is like a mouse while scientists doing exeriment...

[15:28] <xinming> experiment

[15:28] <eviltwin_b> "guinea pig"?

[15:28] <audreyt> xinming: ok, this now works

[15:28] <eviltwin_b> or "lab rat" depending on context

[15:28] <audreyt> use perl5:Template;

[15:28] <audreyt> my $v = { string => "This is string" };

[15:28] <audreyt> my $t = Template.new;

[15:28] <audreyt> $t.process("hello", $v, VAR(my $r));

[15:28] <audreyt> $r.say;

[15:29] <xinming> eviltwin_b: thanks. :-)

[15:29] <xinming> audreyt: did you push to the server please?

[15:30] <audreyt> still running tests

[15:30] <eviltwin_b> I'd say "guinea pig" implies a test subject, "lab rat" implies running a maze or obstacle course

[15:30] <eviltwin_b> (or a skinner box :)

[15:33] <xinming> eviltwin_b: thanks, Here, if sometimes, the program is not stable, and the new version is released, Most people would say, Summoning "lab rat"(Xiao Bai).  <-- just want to wait other "victims" :-P

[15:33] <svnbot6> r14472 | audreyt++ | * p5embed.c: stringify scalar refs correctly for TT2, such that

[15:33] <svnbot6> r14472 | audreyt++ |     $t.process("hello", $v, VAR(my $r));

[15:33] <svnbot6> r14472 | audreyt++ |   can work correctly.  Requested by xinming++.

[15:33] <eviltwin_b> yeh, that'd be "guinea pig"

[15:34] <xinming> because, rat is small and white...  but I call it "Small-White" :-P

[15:34] <xinming> audreyt: thanks

[15:34] <xinming> eviltwin_b: I'll go and test, thanks

[15:34] <audreyt> xinming: yeah, I suggested "newbie" for its other meaning

[15:34] <audreyt> http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD

[15:34] <lambdabot> http://tinyurl.com/w7sp4

[15:35] <xinming> GFW blocked wiki. :'(

[15:35] <audreyt> it means "newbie", but also "troll", but also "early adopter", but also "ibook/ipod enthusiast"

[15:35] <eviltwin_b> heh

[15:35] <audreyt> GFW-- # blocking wikipedia _and_ pugscode.org

[15:36] <rindolf> pugscode.org... heh.

[15:36] <eviltwin_b> "(i)pod people"

[15:36] <xinming> well, sometimes, pugscode.org would also be blocked. :-P

[15:36] <audreyt> "wikipedia.org" is among the keyword blacklist

[15:36] <audreyt> so not only wikipedia, any site that mentions/links to wikipedia disappears, as of this august

[15:37] <audreyt> GFW--

[15:38] <rindolf> audreyt: heh.

[15:38] <rindolf> audreyt: does the GFW also "protects" Hong Kong?

[15:38] <audreyt> no, not afaik.

[15:39] <rindolf> audreyt: OK.

[15:39] <audreyt> xinming: surely you can Tor around, or is the use of Tor also detected nowadays?

[15:40] <xinming> audreyt: still not works.

[15:40] <xinming> Now, It's another problem.

[15:40] <audreyt> rindolf: "  Implement as many of the following enhancements as possible:"

[15:40] <audreyt> that sounds weird. just "Implement the following enhancements"

[15:41] <eviltwin_b> hm, this is looking more and more like a mad scientist crossbred icon and haskell :>

[15:41] <xinming> TT2 wouldn't parse the result

[15:42] <xinming> audreyt: tor isn't detected, It's just because I'm lazy. and using tor is really slow while connecting to the internet

[15:42] <gunya> xinming, is broadband connection availble / affordable in your area ?

[15:43] <audreyt> xinming: yeah. I stopped using Tor-over-ssh-over-DNS  for exactly the same reason

[15:43] <xinming> gunya: yes, People here most uses ADsl.

[15:43] <rindolf> audreyt: OK.

[15:44] <audreyt> rindolf: re XML::RSS. my first question is

[15:44] <gunya> xinming: nice. is that characteristic of entire country or just the developed coastal regions ?

[15:44] <audreyt> "why bother? why not use XML::Feed?"

[15:45] <audreyt> rindolf: surely you also prefer XML::Feed yourself, as seen from your cpan rantings

[15:45] <audreyt> ^Wratings ?

[15:45] <xinming> audreyt: It still doesn't work, Before the change TT can work if you just wish to process and print the data. But now,

[15:45] <rindolf> audreyt: I think XML::Feed makes use of XML::RSS.

[15:45] <xinming> gunya: I think It's just for Mainland.

[15:45] <audreyt> rindolf: oh. I missed that. sorry. then maybe mention that in the proposal?

[15:46] <audreyt> xinming: nopaste?

[15:46] <xinming> gunya: Just for hidding some sensive infomation from people.

[15:46] <xinming> audreyt: Ok, a min

[15:46] <xinming> lisppaste3: url

[15:46] <lisppaste3> To use the lisppaste bot, visit http://paste.lisp.org/new/perl6 and enter your paste.

[15:48] <lisppaste3> xinming pasted "TT2 continued..." at http://paste.lisp.org/display/28435

[15:49] <rindolf> audreyt: well, I'm already saying that "All of this is especially troubling because XML::RSS is relied on

[15:49] <rindolf> by many CPAN distributions and other Perl programs for their RSS-munging

[15:49] <rindolf> needs.".

[15:49] <audreyt> but if you replace "many" with concrete names

[15:50] <audreyt> that makes it much more convincing

[15:50] <audreyt> otherwise, looks just fine.

[15:50] <nothingmuch> urfhfhhhh

[15:50] <rindolf> audreyt: OK.

[15:50] <audreyt> you're getting better at this :)

[15:50] <rindolf> nothingmuch: hi.

[15:50] <rindolf> nothingmuch: what's wrong?

[15:50] <audreyt> nothingmuch: greetings, urfhfhhh moose

[15:50] <nothingmuch> urfhfhhh moose indeed

[15:50] <nothingmuch> well, urf MO anymoose

[15:51] <nothingmuch> attr::simple::Compiled --> compile yields an accessor  body

[15:51] <nothingmuch> currently this is a closure

[15:51] <nothingmuch> this is going to phase out

[15:51] <gunya> xinming, heh, i realize what the deal is with content blocking by GFW; i was asking about broadband :)

[15:51] <nothingmuch> because it was simply a quickstart kludge

[15:51] <nothingmuch> i'm trying to figure out what the best data type for it should be

[15:51] * nothingmuch is leaning towards s-exps

[15:51] <nothingmuch> e.g.

[15:52] <pasteling> "nothingmuch" at 84.108.53.74 pasted "sexp vs. closure" (15 lines, 323B) at http://sial.org/pbot/20582

[15:52] <nothingmuch> presumably some sort of processor will either compile the s-exp into Code::Perl or Perl::Generate (when the latter is ready)

[15:53] <nothingmuch> or simply kludge it right now

[15:53] <xinming> gunya: hmm, What I have to say is, in city, most are using brandboard now, But I don't think people lived a place which is far from city would get brandboard, they even don't have chance to buy a computer. >_<

[15:53] <nothingmuch> the issue i'm running into is that in the adhoc perl 5 runtime, and the "compiled" perl 5 runtime (where MO emits p5 packages) the boxed instance format is difference

[15:53] <nothingmuch> (pure MO uses an explicit box, and perl 5 uses blessing)

[15:53] <nothingmuch> hence the unboxed_instance macro is different, depending on the emitter

[15:56] <ingy> hi nothingmuch

[15:56] *** Steve_p joined
[15:56] <ingy> rindolf: ping

[15:56] <rindolf> ingy: hi.

[15:56] <nothingmuch> hi ingy

[15:56] <gunya> xinming, sounds very similar to the situation here, in Ukraine.  I had to wait almost a whole year to order a lousy 128kbps link at $20 per month ( i'm located in a large city )

[15:56] <ingy> rindolf: I released that module

[15:56] <rindolf> ingy: thanks.

[15:56] <audreyt> nothingmuch: you aware of Data::SExpression?

[15:56] <gunya> xinming, is your connection faster / cheaper ?

[15:57] <nothingmuch> i forgot what insanity it did that i didn't like

[15:57] <ingy> hi audreyt

[15:57] <ingy> where are you?

[15:57] <audreyt> portland, OR

[15:57] <audreyt> schwern's place

[15:57] <nothingmuch> oh right, the whole symbol table stuff

[15:57] <nothingmuch> i don't actually need sexp syntax

[15:58] <nothingmuch> but sexps are convenient for an adhoc not-quite-ast

[15:58] <ingy> audreyt: nice. too bad I leave for chicago in 20 hours

[15:58] <audreyt> too bad indeed

[15:58] <xinming> It costs about 20 US dollar to get an ADsl link. And in fact, people would prefer to choose Adsl, if they use Modem, they would cry on downloading anything over the internet. ;-) It's very expensive compared with ADsl.

[15:59] <audreyt> you going to chicago hackathon?

[15:59] <ingy> no. I am heading to the Dublin *Marathon*

[16:00] <ingy> on 30Oct

[16:00] <xinming> audreyt: Is TT2 working well in pugs there?

[16:00] <xinming> gunya: especially like people who is using gentoo like me. :-P

[16:01] <audreyt> xinming: yes as a matter of fact

[16:01] <gunya> xinming, so it costs about the same..  how fast is it and is your bandwidth limited ? ( with my previous provider i used to get twice the speed, while paying extra for every megabyte over a 1Gig monthly limit )

[16:01] <ingy> is there really a chicago hackathon?

[16:01] <rindolf> audreyt: thanks.

[16:02] <Steve_p> ingy, yes

[16:02] <audreyt> xinming: svn up

[16:02] <svnbot6> r14473 | audreyt++ | * Force item context on hash fetch operations so roundtripping a

[16:02] <svnbot6> r14473 | audreyt++ |   hash to TT2 would work seamlessly.  Again reported by xinming++

[16:02] <Steve_p> It may not be exceptionally big.

[16:02] <rindolf> I sure hope I can find a ride to the Jerusalem Linux Club meeting today.

[16:02] <rindolf> But my default ride got a back-ache.

[16:02] <xinming> gunya: 1.5 Mb for downloading and < 640Kb for upload.

[16:03] <xinming> audreyt: thanks.

[16:03] <xinming> gunya: BTW, no total bandwidth limit.

[16:03] <nothingmuch> ingy: http://hackathon.info/

[16:03] <lambdabot> Title: Chicago Perl Hackathon: Nov 10-12, 2006, Crystal Lake, IL

[16:03] <gunya> xinming, very nice for $20 / mo.  !!

[16:04] <gunya> china++;  ukraine--;

[16:04] <Steve_p> I need to get my room reserved still :-/

[16:07] <xinming> audreyt: thanks, Now, It works... :-)

[16:07] <xinming> audreyt++

[16:07] <ingy> nothingmuch: you pung?

[16:08] <nothingmuch> yes

[16:08] <nothingmuch> but it's no longer relevant

[16:08] <ingy> yay

[16:08] <nothingmuch> Module::Install + Module::Compile

[16:08] <nothingmuch> make upload was borked

[16:08] <nothingmuch> since it had an old .pmc

[16:08] <nothingmuch> partly my fault for not running prove -l t but make test

[16:08] <nothingmuch> but i'd like if that were automatable

[16:09] <nothingmuch> and Module::Install::PMC has no docs or hints

[16:09] <ingy> why is it no longer relevant?

[16:09] <nothingmuch> because i fixed it by hand and released

[16:09] <nothingmuch> i thought it was more problematic

[16:10] <ingy> ok

[16:10] <nothingmuch> (that like M::B, M::I uses File::Copy, which doesn't preserve timnestapms, which means that the .pmc and the .pm have hte same timestamp... but that isn't true)

[16:10] <ingy> today is Jemplate release day for me

[16:11] <ingy> I see

[16:12] <nothingmuch> &

[16:12] <xinming> BTW, anyone here can tell me if there is a close method in IO::Dir?

[16:13] <xinming> hmm,

[16:13] <Steve_p> close() is in IO::Handle, so, yes

[16:13] *** bennymack joined
[16:13] <xinming> my $dh = opendir "."; $dh.close;

[16:14] <Steve_p> errr...in Perl 6...I would think there would be :)

[16:15] <xinming> hmm, then, what's the difference between close and closedir? ;-)

[16:16] <audreyt> it's .closedir currently

[16:16] <xinming> audreyt: yes, I know, That's why I was wondering if closedir would be an alias to close for IO::DIR class

[16:16] <bennymack> hi everybody

[16:16] <bennymack> i was wondering if anyone could point me to some good perl6 macro examples

[16:17] <audreyt> xinming: it's currently simply .closedir but I an see .close is cool

[16:17] <audreyt> bennymack: t/macros/

[16:17] <audreyt> bennymack: do you have a commit bit yet? :)

[16:17] <bennymack> negatory

[16:17] <audreyt> what's your email addr then?

[16:17] <bennymack> i'm still living in perl5 land

[16:18] * bennymack at gmail dot com

[16:19] <xinming> audreyt: is "I an see" = "I ain't see" or just typo of can?

[16:19] <audreyt> a topy of can

[16:19] <audreyt> bennymack: welcome aboard. please add yourself to AUTHORS and feel free to populate t/macro/ (or any other directories) :)

[16:20] <bennymack> ok, but where can I learn about them first? aside from the apocalypse and synopses

[16:20] <audreyt> just the synopses at the moment

[16:21] <bennymack> and i checked out the perl6 faq on programmersheaven.com

[16:22] <bennymack> http://www.programmersheaven.com/2/Perl6-FAQ

[16:22] <lambdabot> Title: Perl6-FAQ at Programmers Heaven

[16:26] <svnbot6> r14474 | yiyihu++ |  r14633@HomePc:  xinming | 2006-10-22 00:23:57 +0000

[16:26] <svnbot6> r14474 | yiyihu++ |  Alias closedir and close in class IO::Dir,

[16:26] <svnbot6> r14474 | yiyihu++ |  Now, both $dh.close and $dh.closedir works.

[16:27] * bennymack picks up his copy of "Perl 6 and Parrot Essentials"

[16:27] <xinming> Newbie's way, `grep "closedir" . -R` and choose a file to edit randomly. ;-)

[16:27] <xinming> bennymack: pick up the Synopsis.

[16:28] <xinming> <<Perl 6 and Parrot Essentials>> is a book long long ago.

[16:29] <audreyt> it's still a good erad though half of it is outdated...

[16:30] <ingy> audreyt: msg

[16:30] * audreyt is reminded of Feymann's physics class: "Half of what I'm going to teach you is wrong -- we just dont know which half"

[16:32] *** weinig_ joined
[16:33] *** weinig_ is now known as weinig

[16:36] <xinming> anyone here please test this...

[16:36] <xinming> my $dh = opendir "."; close $dh; close $dh;

[16:36] <xinming> what will happen?

[16:36] <xinming> *** glibc detected *** pugs: double free or corruption (!prev): 0x08a1ca80 ....

[16:37] *** loumz joined
[16:38] <Steve_p> xinming, it sounds like close is missing a NULL check of sorts

[16:39] <xinming> Steve_p: yes, And I think this bug is in GHC...

[16:39] <xinming> :-P

[16:40] *** jferrero joined
[16:40] <audreyt> indeed it is :)

[17:06] *** larsen_ joined
[17:21] <xinming> How do I send a message using while I'm write testing please?

[17:21] <xinming> s/write/writing/

[17:21] *** DHGE joined
[17:21] <xinming> Is say just enough?

[17:22] *** lanny joined
[17:23] <Steve_p> xinming, diag, perhaps?

[17:23] <xinming> Steve_p: thanks. :-)

[17:24] *** larsen__ joined
[17:24] <eviltwin_b> silly question I didn't notice the answer to:

[17:25] <eviltwin_b> "[for 0 or 1 arguments in reduce] Negated [comparison] operators return Bool::False, and all the rest return Bool::True"

[17:25] <eviltwin_b> was currying/partial application considered? :)

[17:26] <eviltwin_b> seems kinda obvious in the context of Pugs, at least...

[17:27] <eviltwin_b> (obviously in the 1-arg case, as the 0-arg case can't do anything)

[17:27] <eviltwin_b> hm, suppose it would be inconsistent

[17:28] <lanny> Was it considered for  what, eviltwin_b?  I'm being slow today and not understanding what you are getting at.

[17:29] * eviltwin_b is operating on insufficient sleep, funny how actually writing the question as opposed to thinking about it suggested an answer

[17:29] <lanny> I think the defaults are to catch stuff like:  [!==] @nums;  when @nums = (42,);

[17:29] <eviltwin_b> no, I think I'm the one being slow

[17:29] <eviltwin_b> if the multi-arg forms are reductions it doesn't make a low of sense for 1 arg to return a partial application

[17:29] <eviltwin_b> s/w/t/

[17:30] * eviltwin_b is thinking a bit *too* Haskell-like, he guesses

[17:31] <lanny> Hmm.  &prefix:{'equal42'} := &infix:{'=='}.assuming(42);

[17:31] <gaal> there's no autocurrying in perl 6

[17:31] <svnbot6> r14475 | yiyihu++ |  r14635@HomePc:  xinming | 2006-10-22 01:26:30 +0000

[17:31] <svnbot6> r14475 | yiyihu++ |  Update t/builtins/io/dir.t file.

[17:31] <svnbot6> r14475 | yiyihu++ |  Added testing for short version of IO::Dir class.

[17:31] <svnbot6> r14475 | yiyihu++ |  read rewind close etc...

[17:31] <svnbot6> r14475 | yiyihu++ |  r14636@HomePc:  xinming | 2006-10-22 01:28:58 +0000

[17:31] <svnbot6> r14475 | yiyihu++ |  Alias rewinddir readdir to rewind read for IO::Dir class.

[17:31] <svnbot6> r14475 | yiyihu++ |  rewinddir and readdir still works.

[17:31] <gaal> thus no partial application

[17:33] <lanny> Is there a way to get at left side or right side using .assuming on an infix operator?

[17:33] <gaal> i think .assuming got a shorter name, but i can't remember what it is now

[17:33] <gaal> flip. j/k :-)

[17:34] <lanny> Don't make  me type .(*|assuuming)()  :)

[17:35] <gaal> lanny: good question, i don't know offhand

[17:35] <lanny> I guess when everything is spec-ed if the ops get sigs like  :( $left, $right ) then I could get ahold  of them.  .assuming($left => 42)

[17:36] <gaal> that seems a little fragile to me

[17:36] <gaal> also there's no really good convention for longer lists. $a, $b, $c?

[17:37] <lanny> $left, $right, $gripping.  :)

[17:38] <gaal> :)

[17:39] <lanny> With macros you could roll your own of course  for  stuff like the infix ops.

[17:39] <lanny> But not  sure how macro equal42 will play with: [equal42] @nums;

[17:39] <gaal> i think reduce metaop only takes a real op.

[17:40] <lanny> If that's the case  then perl6 won't have first  class macros and I don't think that's the aim

[17:40] <gaal> but there's probably something to be done with @_

[17:41] <lanny> Although [] probably is special in that reguard

[17:41] <lanny> er... [] ("reduce")

[17:42] *** chris2 joined
[17:43] *** silug joined
[17:43] * lanny wanders off to show for Halloween costumes.

[17:46] <bennymack> ok, i'm getting an error from this macro: macro hello(str $what) { q:code { say "Hello { {{{$what}}} }" }; }

[17:46] <bennymack> hello("there");

[17:46] <bennymack> *** Undeclared variable: "$what"

[17:50] <bennymack> although this works: macro hello(str $what) { return qq{ say "Hello $what" }; }

[17:50] <bennymack> i'm clearly unsure of the interaction between q:code and the {{{$var}}} syntax however.

[17:53] <eviltwin_b> ow.  definitely I want to wipe my dports ghc and start over; that was one slow startup :)

[18:03] *** Limbic_Region joined
[18:14] * nothingmuch realized what the problem was

[18:14] <nothingmuch> yay

[18:14] <Limbic_Region> woot

[18:14] <lambdabot> Limbic_Region: You have 1 new message. '/msg lambdabot @messages' to read it.

[18:14] <nothingmuch> the current structure needs an emitter onit's own

[18:15] <Limbic_Region> @messages

[18:15] <lambdabot> audreyt said 3h 15m 54s ago: not a bug, grep needs a Code, as xinming observed

[18:22] *** Aankhen`` joined
[18:39] *** systems`` joined
[19:36] <Khisanth> ?eval 1 xx 3

[19:36] <evalbot_r14475> (1, 1, 1)

[19:36] <Khisanth> ?eval 1 x 3

[19:36] <evalbot_r14475> "111"

[19:40] *** seano joined
[19:46] <systems``> eval 2**22222 :P evil

[19:46] <systems``> >:)

[19:54] *** Odin- joined
[20:13] *** Psyche^ joined
[20:19] <eviltwin_b> hm.  "a syntax error will be reported for C-isms such as" --- they're not C-isms, they're (heinous) GNU-isms :)

[20:21] <rindolf> eviltwin_b: where?

[20:22] <eviltwin_b> S04 end of "Statement Parsing"

[20:22] <eviltwin_b> call it religious.  I think GNU reversed the meaning of space before parens, to the detriment of code comprehensibility.  (and perl6's behavior seems to agree with me :)

[20:24] <eviltwin_b> in K&R style you always space after keywords like if/for/while

[20:24] <eviltwin_b> so it's arguably not a "C-ism"

[20:26] *** Psyche^ is now known as Patterner

[20:34] *** ferreira joined
[20:36] *** lanny joined
[20:37] <lanny> Anyone else on Win32 that could try an update and a build?  I seem to be sticking on ext/HTTP-Server-Simple/t/subclass.t

[20:40] *** mako132_ joined
[20:51] *** andres joined
[20:59] *** SubStack joined
[21:02] *** xern joined
[21:10] *** andres joined
[21:10] *** buubot joined
[21:14] *** buubot joined
[21:33] *** systems`` joined
[21:34] <eviltwin_b> hmmm.  S06 has "It's now possible to set up a user-defined subroutine that acts like grep" (Code vs. Regex etc.) but earlier today here "grep requires a Code"

[21:36] *** shobadobs joined
[21:39] <eviltwin_b> also S05 uses the : pattern modifier in a non-obvious-to-newcomers way before it defines it (and defines it in the discussion of C<token>)

[21:45] *** mauke joined
[21:49] *** seano joined
[21:59] <eviltwin_b> whoops when I said S06 I meant S05

[21:59] <eviltwin_b> feh

[22:00] *** nothingmuch joined
[22:03] *** lanny joined
[22:06] <lanny> @tell audreyt You'll want to check the smokes for Win32.  r14463 (just before GHC threading turned on) has 2 failures and after 231 (including having to kill pugs by hand on 2 test to continue).

[22:06] <lambdabot> Consider it noted.

[22:11] <svnbot6> r14476 | audreyt++ | * Pugs.Junc: Implement Sebastian Sylvan's suggestion of using

[22:11] <svnbot6> r14476 | audreyt++ |   MVars instead of Chans to accomplish junctive autothreading,

[22:11] <svnbot6> r14476 | audreyt++ |   much improving the performance on MacIntel here.

[22:12] *** systems`` joined
[22:21] <svnbot6> r14477 | audreyt++ | * Pugs.Junc: Further speed things up by using takeMVar instead of readMVar.

[22:21] <svnbot6> r14478 | audreyt++ | * Pugs.Prim.List: MVar-based synchronization is much better

[22:21] <svnbot6> r14478 | audreyt++ |   also for hyper operators than Chan-based ones, so implement

[22:21] <svnbot6> r14478 | audreyt++ |   them here too.

[22:24] <svnbot6> r14479 | audreyt++ | * Pugs.Junc: Eliminate the redudant call to newChan.

[22:29] *** weinig joined
[22:31] *** Limbic_Region joined
[22:52] *** systems`` joined
[23:09] *** mauke_ joined
[23:10] *** dduncan joined
[23:24] *** mauke_ is now known as mauke

[23:47] *** fglock joined
