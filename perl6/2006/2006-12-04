[00:12] *** phpError joined
[00:34] *** lambdabot joined
[00:40] *** nekokak joined
[00:51] *** Lee joined
[00:57] *** lyokato joined
[01:27] *** mdiep joined
[01:39] *** mdiep joined
[01:41] *** neonse left
[01:43] *** rintaro_ joined
[01:52] *** mdiep joined
[01:54] *** kanru joined
[02:09] *** nipotaway is now known as nipotan

[02:26] *** rintaro joined
[02:30] *** mjk joined
[02:31] *** dmq joined
[02:34] *** rintaro__ joined
[02:47] *** vel joined
[03:30] *** esammer joined
[03:44] *** weinig is now known as weinig|zZz

[03:58] *** phpError joined
[04:02] *** mako132_ joined
[04:16] *** scaner joined
[04:26] *** BillN1VUX joined
[04:28] *** phpError joined
[04:38] *** dduncan joined
[05:09] *** mdiep joined
[05:22] *** mdiep joined
[05:28] *** dduncan left
[05:45] *** phpError joined
[05:55] *** justatheory joined
[06:02] *** xinming_ joined
[06:11] *** BillN1VUX left
[06:15] *** BooK_ joined
[06:25] <meppl> guten morgen

[06:31] *** alexe joined
[06:45] <jrockway> hmm, pugs from svn seems to be dying on my debian machine at "Setup: cannot satisfy dependency network-any"

[06:45] <jrockway> it also seems upset that the revision number of my checkout is "3", because I only svk mirror'd HEAD

[07:05] *** alexe left
[07:20] *** frankg joined
[07:35] *** phpError joined
[07:37] *** jrockway joined
[07:58] *** devogon joined
[08:06] *** iblechbot joined
[08:07] *** drrho joined
[08:13] *** Yappo joined
[08:14] *** Yappo joined
[08:36] *** trym_ joined
[08:39] *** kane-xs joined
[08:49] *** elmex joined
[09:33] *** mayur_ joined
[09:35] <mayur_> diff betw USE and REQUIRE?

[09:39] *** ludan joined
[09:40] <broquaint> The difference, mayur_, is that require is called at run-time and use is called at compile-time (basically).

[09:41] <broquaint> See. perldoc -f use & perldoc -f require for more info, also, #perl.

[09:41] <buubot> See: Type 'perldoc -f use' in your shell or go to http://perldoc.perl.org/functions/use.html

[09:41] <lambdabot> Title: use - perldoc.perl.org

[09:41] * broquaint kicks buubot

[09:43] <mayur_> Thanks broquaint , lambdabot 

[09:44] *** marmic joined
[10:07] *** mayur_ left
[10:18] <svnbot6> r14859 | kudra++ | This week

[10:21] <svnbot6> r14860 | kudra++ | Small change to template for yaml file

[10:23] *** avar joined
[10:27] <svnbot6> r14861 | kudra++ | Also adding my quick instruction list to the repository; someone else may need it someday

[10:39] *** ludan joined
[10:40] <ludan> re

[10:47] *** ruoso joined
[10:54] <svnbot6> r14862 | fglock++ | MP6-Parrot - added infix:<==>, infix:<!=>

[11:00] <dmq> @tell audreyt ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/Testing/pcre-7.0-RC1.tar.bz2

[11:00] <lambdabot> Consider it noted.

[11:08] *** ruz joined
[11:26] *** theorbtwo joined
[11:27] *** buetow joined
[11:56] <Juerd> Feather users, don't forget to re-start your custom apaches!

[12:03] *** chris2 joined
[12:03] *** TimToady joined
[12:16] *** depdust joined
[12:21] *** nothingmuch joined
[12:36] *** trym__ joined
[12:42] *** kane-xs_ joined
[12:47] *** nipotan is now known as nipotaway

[13:05] *** Limbic_Region joined
[13:05] *** buetow joined
[13:08] *** iblechbot joined
[13:22] *** weinig|zZz is now known as weing

[13:22] *** weing is now known as weinig

[13:54] *** Psyche^ joined
[13:55] *** Psyche^ is now known as Patterner

[14:05] *** weinig is now known as weinig|bbl

[14:07] <Limbic_Region> salutations all

[14:11] <dmq> hi L~R

[14:11] <dmq> thanks for mentioning my little challenge.

[14:13] <Limbic_Region> no worries dmq

[14:13] *** mj41 joined
[14:14] <Limbic_Region> I also mentioned it over on #perl but not on irc.perl.org

[14:14] <Limbic_Region> while I think pmichaud and fglock are probably both up to the challenge, not sure either has the time

[14:22] *** bonesss joined
[14:23] *** c6rbon joined
[14:31] <pmichaud> challenge ?

[14:31] <svnbot6> r14863 | szabgab++ | Give file name on build failure

[14:31] <Limbic_Region> yes, just a sec

[14:32] <eviltwin_b> <Limbic_Region> http://use.perl.org/~demerphq/journal/31796

[14:32] <lambdabot> Title: Journal of demerphq (2831)

[14:32] <Limbic_Region> pmichaud - http://use.perl.org/~demerphq/journal/31796

[14:32] <lambdabot> Title: Journal of demerphq (2831)

[14:32] <Limbic_Region> eviltwin_b beat me to it

[14:32] <pmichaud> mmmmmm

[14:32] <Limbic_Region> I had mentioned yesterday it would be great if the winner of the metre of beer was PGE or P::C::R

[14:33] <eviltwin_b> behold the power of scrollback :)

[14:33] <pmichaud> well, PGE really depends on parrot at the moment, so that'd take a bit of work

[14:34] <pmichaud> but it's a terrific idea and challenge

[14:35] <Limbic_Region> pmichaud - I don't think the dependency on parrot is an issue

[14:35] <Limbic_Region> or rather

[14:36] <Limbic_Region> I don't think demerphq would squabble over parrot being required to support the alternate engine

[14:36] <Limbic_Region> the fact that it may not be "easy" to do on the other hand....well that's why I said I wasn't sure you had the time

[14:36] <pmichaud> right, I was only thinking that it would involve additional work

[14:36] <pmichaud> not that parrot would disqualify the solution :-)

[14:37] <Juerd> Is embedding parrot hard then?

[14:37] <Limbic_Region> PGE is currently written in C, PIR, or a mixture of the two?  My recollection was original was in C and current is in PIR

[14:37] <pmichaud> that's correct -- PGE is in PIR

[14:37] <pmichaud> (originally started out in C, but switched to PIR)

[14:38] *** fglock joined
[14:39] <Limbic_Region> Juerd - the only attempt at embedding parrot that I know of is mod_parrot by jhorwitz and I think he has been away from the project for some time

[14:39] <Limbic_Region> The last message to the list was Jan of 2006

[14:39] <pmichaud> afk # support call

[14:40] <Juerd> Limbic_Region: Right, but wasn't parrot designed to be embeddable, from the beginning? :)

[14:40] <fglock> Limbic_Region: there is Inline::Parrot

[14:41] <Juerd> fglock: Oh, cool

[14:41] <Juerd> Heh, can a regex engine be written in Perl 5 itself? Then bridging to PGE should be doable :)

[14:41] <fglock> Inline::Parrot needs an update to current parrot

[14:42] <fglock> PCR is written in Perl 5

[14:42] <Limbic_Region> the 3 most likely candidates I had for winning the challenge were japhy, pmichaud, and fglock

[14:43] <Limbic_Region> though that was based off skill and familiarity and not time

[14:43] * Limbic_Region has no idea who might have the time to take up the challenge

[14:44] <dmq> No, unfortunately a regex engine cant be written purely in perl5.

[14:44] <Limbic_Region> Inline::Parrot was last updated 2 years ago

[14:45] <dmq> However, i do believe that you could do what would be more or less the empty subclass test with XS that calls back into perl.

[14:45] <fglock> Limbic_Region: for me it's a matter of priorities rather than plain "time"

[14:45] <dmq> Its just that to implement a regexp engine you have to do c.

[14:46] <dmq> Although i imagine somebody suitably creative could write an XS module that allowed you to write arbitrary engines in perl.

[14:46] <dmq> that in itself would be a cool hack.

[14:46] <fglock> dmq: that would be nice

[14:46] <Limbic_Region> dmq - you mean to do a p5 plug-in regexp engine you have to do c?

[14:47] <dmq> its mostly a question of how the regexp engine / perl core api is written.

[14:47] <dmq> currently yes l~r. 

[14:47] <dmq> as i just said, i didnt do the full glue to allow somebody to do it in perl.

[14:48] <Limbic_Region> ok.  I didn't think you were implying any RE for any language had to be done in C, but that's the literal way of interpreting what you said

[14:48] <dmq> thats something that can be written anytime.

[14:48] <dmq> wheras there are other things that if we want them have to be done before 5.10 is out.

[14:48] <dmq> So ive focused on those.

[14:48] <dmq> :-)

[14:48] <Limbic_Region> for anyone with there ear to the ground (iow follows p5p), is 5.10 guestimated to be released Easter 07?

[14:48] <rgs> ENOTUX

[14:49] <dmq> the ground rumbled x-mas/new year recently. but rgs can say for sure...

[14:49] <rgs> well, there's a small list of things to be closed

[14:50] *** ludan joined
[14:50] <rgs> (of difficult things)

[14:51] <dmq> l~r it essentially comes down to this: a regexp engine has to be able to create a regexp_engine structure, and the complie callback defined therein has to be able to return a regexp structure. which means some perl/c glue interface that can be written by pretty much anybody, doesnt need me directly.

[14:51] <Limbic_Region> heh

[14:52] * Limbic_Region suspects dmq's definition of anybody isn't quite the same as his

[14:53] <dmq> 'anybody' meaning 'does not require a perl5 regex engine internals specialist to do'

[14:53] <Limbic_Region> which is a very good thing and kudos to you

[14:54] * Limbic_Region wonders if we will get audreyt back this week

[14:54] <dmq> Therefore meaning anybody that can write fairly straightforward XS. Which from what i recall is you. :-)

[14:54] <Limbic_Region> dmq - um, no.  I can write fairly straightforward Inline::C but you must have forgotten admonishing me for using C types instead of the perl API

[14:55] * Limbic_Region is sure with a week or two of focus the could get enough perlguts under his belt to fool someone into thinking he knew what he was doing though

[14:55] <dmq> You just have to push yourself a little harder and have a copy of perlapi open.

[14:56] * eviltwin_b can write XS that makes perl leak references and dump core, does that count? :>

[14:56] <dmq> heh

[14:57] <eviltwin_b> (and I have.  cyrus, anyone?  still don't get what's going on there but havenever had the time to mindmeld with the api)

[15:00] <fglock> there is something started in http://svn.pugscode.org/pugs/perl5/re-override and re-override-PCRE

[15:00] <lambdabot> Title: Revision 14863: /perl5/re-override

[15:00] <fglock> dmq: maybe it just works

[15:01] <dmq> yeah, thats an attempt at the same thing based on the older broken api.

[15:02] <dmq> it was kinda doomed by the api unfortunately.

[15:02] <dmq> as the api meant that perl would try to use the current engine for every regex it encountered, regardless as to whether it was compiled by perl itself or whatever.

[15:03] <dmq> the association was regexp -> intrepreter -> engine  instead of intrepreter -> regexp -> engine 

[15:04] *** gnuvince joined
[15:05] <Juerd> rgs: Should I report the uselessness of encoding.pm as a bug?

[15:05] <Juerd> It's not really a bug, but the way it works means that it's useful to very few people

[15:06] * Juerd doesn't have a suggestion to fix this in a backwards compatible way :(

[15:06] *** hexmode joined
[15:06] <dmq> do you have a suggestion to fix it in a forward compatible way tho?

[15:07] <Limbic_Region> after reading perldelta in the 5.9.x branch, there are several backwards compatible breakages

[15:07] <dmq> Cause if you do then i think it should be considered. 

[15:07] <rgs> Juerd: the problems with encoding are known

[15:07] <rgs> Juerd: that's why I won't make it lexical actually

[15:07] <rgs> it should be split in two instead

[15:08] <rgs> Limbic_Region: not that many

[15:10] *** vel joined
[15:10] <dmq> rgs: would it be feasable to make a wrapper that does the split?

[15:11] <rgs> no, thats' a semantic split

[15:11] <Limbic_Region> rgs - not sure what constitutes many, but 5.9.0 = 6, 5.9.1 = 2, 5.9.2 = 2, 5.9.3 = 6, 5.9.4 = 4 for a total of 20

[15:11] <dmq> i just meant that maybe a wrapper could handle the lexicalization.

[15:12] <Limbic_Region> rgs - I am not saying that's a bad thing btw

[15:12] <rgs> Limbic_Region: many breakages

[15:12] <dmq> L~R: what do those numbers mean and where did you get them.

[15:12] <Limbic_Region> dmq - incompatible changes

[15:12] <Limbic_Region> dmq - from perldelta 5.9.0 .. 5.9.4

[15:12] <dmq> breakage of workarounds of broken behaviour imo are fair game in a major release.

[15:12] <rgs> the section named incompatible changes in perl*delta.pod

[15:13] * Limbic_Region isn't suggesting that they are a bad thing - actually quite the opposite

[15:13] <rgs> example : A bareword argument to chdir() is now recognized as a file handle.

[15:13] <rgs> Earlier releases interpreted the bareword as a directory name.

[15:13] <Juerd> rgs: Okay, thanks

[15:14] <Limbic_Region> people who rely on broken or undocumented behavior shouldn't be allowed to cry when their code breaks

[15:14] * dmq encourage Juerd to post something that does work

[15:14] <Limbic_Region> people write code targeting a perl not written in the last decade shouldn't be allowed to cry when the current perl no longer works for them

[15:14] <Limbic_Region> s/write/who write/

[15:15] <Juerd> dmq: I don't know how to fix it without breaking existing things. The behaviour makes no sense, but there are people who use it and depend on it.

[15:15] * Limbic_Region does have compassion for the people who stay one rev behind and have to constantly update their code in order to upgrade though

[15:16] <Juerd> dmq: encoding::split is on CPAN, it solves the immediate problem by doing ugly things :)

[15:16] <Limbic_Region> or for shops where mgmt forces them to stay in the dark ages for long periods of time and then changes their mind and forces them to upgrade to current over night

[15:16] <dmq> well the issue is how do you provide an alternative without preventing the older problematic code from working.

[15:17] <Juerd> dmq: It requires a discussion of syntax.

[15:17] <dmq> so if you can reimplement the broken behaviour out of the un-broken behaviour...

[15:17] <Juerd> But "use encoding STRING" can't be it. In fact, the syntax of encoding.pm is so irregular, that I think we have a problem

[15:17] <Juerd> As "encoding" is a nice name :)

[15:20] <Juerd> Implementation is a matter of copy/pasting the parts from encoding.pm; Re-implementing the old interface is then a matter of using what you made, through a wrapper that knows the @_ order of the old thing.

[15:20] <Juerd> And you need to know if STDERR matters.

[15:22] <svnbot6> r14864 | fglock++ | rm v6-MiniPerl6-MO/ (devel proceeds in v6-MiniPerl6/)

[15:32] *** pmurias joined
[15:32] *** cjeris joined
[15:33] *** slanning joined
[15:34] <pmurias> Limbic_Region: re: parrot embeding also done by chromatic

[15:36] <Limbic_Region> pmurias - really?  I thought he worked on extending parrot by embedding other languages (primarily C via NCI) in it (not the other way around)

[15:38] <pmurias> it is called Embed::Parrot(or something similiar) and lives in the parrot repo

[15:39] <Limbic_Region> cool

[15:39] * Limbic_Region should follow parrot more closely

[15:41] <pmurias> regarding Inline::Parrot the version on CPAN uses IPC instead of the embbeding interface

[15:43] *** xinming joined
[15:45] <pmurias> you find in /misc/pX/Common/Inline-Parrot for a incomplete attempt at parrot i was working on

[15:47] <pmurias> although chromatic's version is probably much more up to date

[15:48] <Limbic_Region> yeah, I was just checking it out - it lives in ext/

[15:54] *** justatheory joined
[15:57] <pmurias> s/you find in/you can look in/

[16:03] *** neonse joined
[16:03] *** ashleyb joined
[16:03] *** ruoso joined
[16:23] *** heath joined
[16:25] <audreyt> from #p5p:

[16:25] <lambdabot> audreyt: You have 6 new messages. '/msg lambdabot @messages' to read them.

[16:25] <audreyt> 17:21 <@audreyt> I need to sleep.

[16:25] <audreyt> 17:21 <@audreyt> and here is my entry:

[16:25] <audreyt> 17:21 <@audreyt> http://perlcabal.org/~audreyt/tmp/re-engine-y2k-0.01.tar.gz

[16:25] <audreyt> 17:21 <@audreyt> enjoy :)

[16:25] <audreyt> 17:21 <@dmq> i think you win. :-)

[16:25] <audreyt> g'nite :) &

[16:25] <Limbic_Region> wow

[16:26] <audreyt> Limbic_Region++ # reminds me of it

[16:26] <audreyt> it took longer than I hoped :)

[16:31] *** alinbsp joined
[16:34] *** chris2 joined
[16:39] *** pmurias left
[16:41] *** kanru joined
[17:00] *** mdiep_ joined
[17:12] <xinming> audreyt: ping

[17:14] <xinming> @tell audreyt I ever heard that you told someone that there are four languages which are worth learning... I read it on your blog. But I can't find the answer now, I searched all your blogs last year, and It seems that all comments are gone. So could you please tell me again?

[17:14] <lambdabot> Consider it noted.

[17:15] <xinming> @tell audreyt thanks.

[17:15] <lambdabot> Consider it noted.

[17:16] <nothingmuch> xinming: my take on it: ASM/C (doesn't really matter which), haskell/scheme

[17:16] <nothingmuch> i'm guessing something like prolog too

[17:16] <nothingmuch> but i dunno it

[17:16] <nothingmuch> dunno what a 4th would be

[17:16] <nothingmuch> but forth seems fitting ;-)

[17:17] <xinming> nothingmuch: perl... :-)

[17:17] <xinming> In fact, Here, someone suggested me that I should learn python...

[17:18] <xinming> and I read the documentation... I didn't find any special in python compared with perl. It seems, that all thing that python have, perl does it in a convenient way...

[17:18] <xinming> :-)

[17:19] <xinming> What I like in python which might be, python use . for method call. :-P

[17:19] <nothingmuch> i found python uninpiring

[17:19] <nothingmuch> uninspiring

[17:19] <xinming> why people suggested me python is all because of django...

[17:19] <nothingmuch> perl is not really a fundamental language

[17:20] <nothingmuch> but it's a nice wrap up of some of the good parts of all of what I mentioned

[17:20] <wolverian> perl has culture, CPAN and linguistics. it's an experience too.

[17:20] <nothingmuch> yes, of course

[17:20] <xinming> and, when I saw the template for django, It's like another TT to me. :-P

[17:20] <nothingmuch> wolverian++ # good points

[17:20] <xinming> So, i gave up.

[17:21] <xinming> and then, my turn to persuade him to use perl. :-)

[17:21] *** ruz joined
[17:22] <xinming> at least, most people say python has better oo support. And I didn't find it either.

[17:22] <eviltwin_b> it does (compared to perl5 at least) but that's nto actually saying much

[17:23] <eviltwin_b> think it does a slightly better job with the notion of class variables

[17:23] <nothingmuch> xinming: i think perl 5's OO support is actually underappreciated

[17:23] <xinming> hmm, well, to me, perl is a blessed hash. and in python, It's a blessed dictionary.

[17:24] <nothingmuch> because perl lets you twiddle with the metamodel very freely

[17:24] <nothingmuch> perl's problem is that it has an insane metamodel though ;-)

[17:24] <nothingmuch> stashes and special arrays and stuff like that ^_^

[17:24] <xinming> and, the most obvious thing is...

[17:24] <xinming> I said, I can use $a.$b

[17:24] *** ashleyb joined
[17:25] <xinming> very convenient... how can we do this in python... the one whom tried to persuade me shuts up. :-P

[17:25] <xinming> though, I know python can, But I like the handy grammer.

[17:26] <xinming> But, one thing I think python is great is. It's speed.

[17:28] *** bonesss joined
[17:29] <nothingmuch> really?

[17:29] <nothingmuch> i always thought it was notoriously slow

[17:30] <jrockway> http://shootout.alioth.debian.org/

[17:30] *** ofer1 joined
[17:30] <lambdabot> Title: The Computer Language Shootout Benchmarks

[17:30] <jrockway> perl wins in a lot of those

[17:30] <jrockway> i mean, not compared to C or java obviouly

[17:30] <jrockway> but among php/python/ruby/perl, perl is usually fastest

[17:30] <jrockway> perl uses *a lot* of memory though

[17:30] <jrockway> not bad for a "dead language" though

[17:30] <rgs> both speed and memory usage will be improved by 5.10.0

[17:30] *** stevan joined
[17:30] <jrockway> yup

[17:31] <jrockway> demperhq's regex engine work is awesome

[17:31] <rgs> and Nicholas' shrinking of internal structures

[17:31] <Juerd> 18:30 < jrockway> i mean, not compared to C or java obviouly

[17:32] <Juerd> It's not obvious that Java would win from Perl.

[17:32] <Juerd> For many real world applications, I expect Java to be far inferior to Perl, in terms of performance.

[17:32] <Juerd> It's good for applications without user interface, that don't do any text processing. And that's quite a niche :)

[17:33] <xinming> But people prefer money.. so, many people like java. :-P

[17:33] <Juerd> Sure, Java is rather popular in commercial environments.

[17:34] <xinming> I ever went to the site on language benmachmark.

[17:34] <jrockway> java has jit

[17:34] <Juerd> (Including universities, mind you!)

[17:34] <Juerd> jrockway: So?

[17:34] <broquaint> Java doesn't process text it shifts paradigms with XML!

[17:34] <Juerd> broquaint: :\

[17:34] <xinming> It seems. lisp is really attractive on both speed and memory usage. :-P

[17:34] <jrockway> walking an optree is slower than directly executing code on the processor

[17:34] <jrockway> getting data from registers, etc.

[17:35] <broquaint> Did I get my terminology wrong, Juerd? ;)

[17:35] <jrockway> i imagine parrot will give a good speed boost to most dynamic languages

[17:35] <jrockway> (i've heard it has, but i haven't been worried about speed personally)

[17:36] <xinming> I don't think so. :-)  every release for software... the "author" will claim that there will be a better performace for the new version.

[17:36] <xinming> But I never see it happened... :-P

[17:36] <Juerd> broquaint: No. You got everything right, and according to reality, which sucks.

[17:37] <Juerd> jrockway: Sure, that's very nice for the raw operations, like maths.

[17:37] <Juerd> jrockway: But it means very little when it comes to text processing or real time interaction.

[17:42] <jrockway> true

[17:50] *** hexmode joined
[17:59] *** ruoso joined
[18:19] *** PerlJam joined
[18:20] *** lunny1 joined
[18:22] *** lunny1 left
[18:22] *** wilx` joined
[18:23] *** alinbsp left
[18:25] *** BooK joined
[18:26] *** Psyche^ joined
[18:27] *** buetow joined
[18:34] *** Psyche^ is now known as Patterner

[18:54] *** phpError_ joined
[18:56] *** sweinig_ joined
[19:01] *** weinig joined
[19:22] *** mr_ank joined
[19:23] *** larsen_ joined
[19:47] *** KingDiamond joined
[19:47] *** fglock left
[19:51] <svnbot6> r14865 | pmichaud++ | '.goto' in t/01-sanity/07-tailcall.t isn't defined in Synopses, 

[19:51] <svnbot6> r14865 | pmichaud++ | moving to t/unspecced/ so that we can better use t/01-sanity/

[19:51] <svnbot6> r14865 | pmichaud++ | in perl6/Parrot.

[19:51] *** marmic joined
[19:55] *** justatheory joined
[20:00] *** bernhard joined
[20:03] *** thepler joined
[20:04] *** foo\ joined
[20:11] *** unfo joined
[20:13] <Limbic_Region> perlbot nopaste

[20:13] <perlbot> Paste your code at http://sial.org/pbot/perl and #perl will be able to view it

[20:13] <lambdabot> Title: sial.org Pastebot - pasteling

[20:15] <jrockway> wow: http://lambda-the-ultimate.org/node/613

[20:15] <lambdabot> Title: Fold Must Fold! | Lambda the Ultimate

[20:15] <jrockway> removing map or fold "improves" a language?

[20:17] <gnuvince> jrockway: fold often confuses programmers, so it's not an efficient way to communicate what a program does.

[20:17] *** TSa joined
[20:18] <gnuvince> and in any case, that's an April 1st post.

[20:18] <jrockway> ahh, ok

[20:18] <jrockway> i am writing some elisp and was really wishing for fold, and that's what google gave me :)

[20:19] <jrockway> i like functional programming, because i can usually ponder it for a few minutes and then type a line of code

[20:19] <jrockway> much better than the don't-ponder-and-write-100-lines approach

[20:19] <jrockway> maybe

[20:19] <jrockway> it's also a good distraction from my PHP-infected day job :)

[20:20] <TSa> HaloO

[20:22] *** pmurias joined
[20:23] <pmurias> jrockway: i enables you to reuse the keyword for something else ;)

[20:43] *** stevan joined
[20:48] *** Limbic_Region joined
[20:48] *** hexmode joined
[21:05] <Limbic_Region> hrmm

[21:30] *** Aankhen`` joined
[21:35] *** prism joined
[22:01] *** premshree_ joined
[22:21] *** beldor joined
[22:44] *** Limbic_Region joined
[23:05] *** KingDiamond joined
[23:13] *** pmichaud joined
[23:17] *** larsen_ joined
[23:34] *** neonse left
[23:38] *** hexmode joined
[23:42] *** buetow joined
