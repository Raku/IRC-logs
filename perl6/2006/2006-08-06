[00:09] *** xinming_ is now known as xinming

[00:16] <meppl> gute nacht

[00:29] *** dolmans joined
[00:44] *** xinming joined
[00:50] *** fglock joined
[00:53] *** loumz joined
[00:57] *** kanru joined
[01:13] *** dbrock joined
[01:18] *** byte joined
[01:25] *** robkinyon_ joined
[01:25] <robkinyon_> obra: ping

[01:44] *** lollan joined
[01:47] <xinming> ?eval sub hello { "hello".say; }; hello();

[01:47] <evalbot_11936> OUTPUT[hello ] Bool::True

[01:50] *** nirgle joined
[01:57] *** weinig is now known as weinig|sleep

[01:59] *** nirgle left
[02:08] *** knewt_ joined
[02:28] *** knewt joined
[02:35] *** knewt joined
[02:45] *** knewt joined
[02:59] *** knewt joined
[03:09] *** knewt joined
[03:17] *** knewt joined
[03:24] *** knewt joined
[03:26] *** MacVince joined
[03:32] *** knewt joined
[03:36] <azuroth> what IM client do ion users use?

[03:50] <Khisanth> why would the wm determine what IM client someone would use?

[03:51] <azuroth> I just find that some programs don't quite fit in with ion

[03:54] <MacVince> how about centericq?

[03:54] <Khisanth> install bitlbee and then just use your IRC client :)

[03:55] <Khisanth> since you are already on IRC, finding an IRC client that fits is assumed to be a problem that has already been solved!

[03:55] <azuroth> it works, but it doesn't quite fit :-p

[03:57] <Khisanth> well go find an IRC client, at least you can reduce two problems into one

[03:57] <MacVince> azuroth: there are plenty of choices: xchat, irssi, Emacs, etc.

[03:57] *** rashakil joined
[03:57] <azuroth> hmm. maybe I'll look at centericq

[04:03] *** knewt joined
[04:05] *** azuroth_centeric joined
[04:14] <azuroth_centeric> test

[04:30] <gaal> morning!

[04:30] *** MacVince left
[04:31] <azuroth_centeric> good morning

[04:33] *** azuroth_centeric is now known as azuroth

[04:33] <azuroth> NICK azuroth

[04:45] *** azuroth_centeric joined
[04:46] *** azuroth_centeric joined
[04:52] <azuroth_centeric> hmm. I can't seem to figure out how to close windows in centericq...

[04:54] <Khisanth> bad interface?

[04:56] <azuroth_centeric> yeah, it may seem so

[04:57] <azuroth_centeric> I don't think I would mind it if I could close windows though

[04:57] <Khisanth> and why is ion causing so much trouble? :)

[04:58] <azuroth_centeric> Ion rocks, just gaim doesn't ;-p

[05:07] *** amnesiac joined
[05:18] *** lambdabot joined
[05:19] *** lollan joined
[05:33] *** kanru joined
[05:57] <svnbot6> r11937 | audreyt++ | * third-party/: Update fps to the released version of 0.7.

[05:57] <svnbot6> r11937 | audreyt++ |   (you may need to nuke dist/build/ and rebuild after this change.)

[06:06] <svnbot6> r11938 | audreyt++ | * HsSyck: Chase up fps-0.7 changes.

[06:19] <svnbot6> r11939 | audreyt++ | * de-bump version for now

[06:32] *** shachaf joined
[06:37] <gaal> I keep forgetting how to do this. I want to 'svk desc' r11939, but not my local 11939. How?

[06:37] <clkao> uhm, you can't easily

[06:38] <gaal> This is a mirror, and alarmingly 'svk desc 11938 http://svn.openfoundry.org/pugs' doesn't do what I want

[06:38] <gaal> that's it, I'm moving to MS VSS

[06:38] <gaal> :-p

[06:39] <clkao>  svk desc `svk log -qr1766@ | grep ^r | cut -f 1 -d ' '`

[06:39] <clkao> does desc 11938@ //depotpath work?

[06:41] <gaal> sec, need to pulll... what does @ mean?

[06:44] <clkao> @ = the number is remote revision

[06:45] <gaal> "Can't find local revision for 11938 on /."

[06:46] <clkao> ya. so use the line above

[06:48] <gaal> work, thanks. going to my aliases..

[06:53] *** lambdabot joined
[06:54] *** nothingmuch joined
[06:59] *** dolmans joined
[07:09] <audreyt> gaal: ping

[07:10] <audreyt> gaal: open types without preprocessing:

[07:10] *** Twiztid joined
[07:10] <audreyt> http://homepages.cwi.nl/~ralf/gpce06/paper.pdf

[07:15] <audreyt> gaal: seems to be a much better solution to the scalar_fetch problm

[07:20] *** lollan joined
[07:23] *** lambdabot joined
[07:25] *** lambdabot joined
[07:45] *** rindolf joined
[07:45] <rindolf> Hi all.

[07:45] <rindolf> Where's Ovid tips for a TPF grant?

[07:46] <rindolf> Google is no help.

[07:47] *** lambdabot joined
[07:48] <rindolf> Does use.perl.org has a search facility?

[07:48] <svnbot6> r11940 | audreyt++ | * newtypes are now DrIFTed correctly.

[07:49] *** weinig|sleep is now known as weinig

[07:55] *** iblechbot joined
[07:58] <rindolf> audreyt: here?

[07:59] <rindolf> Hmmm... http://use.perl.org/~Ovid/journal/30143

[07:59] <lambdabot> Title: Journal of Ovid (2709)

[08:10] <svnbot6> r11941 | audreyt++ | * do not revisit third-party unneccessarily.

[08:19] <svnbot6> r11942 | audreyt++ | * util/drift.pl - handle "newtype" instances; carefully

[08:19] <svnbot6> r11942 | audreyt++ |   sidestep the nonsupported multi-parameter data types

[08:19] <svnbot6> r11942 | audreyt++ |   like "EvalT m a".

[08:22] <svnbot6> r11943 | audreyt++ | * regen instances.

[08:25] <svnbot6> r11944 | audreyt++ | * DriFT.YAML and Perl6Class: add instancesfor native types such as Word

[08:25] *** Jedai joined
[08:37] <svnbot6> r11945 | audreyt++ | * CapInternals.hs: gaal's CITest and CMTest now compiles again.

[08:40] <svnbot6> r11946 | audreyt++ | * util/drift.pl: handle consecutive data declarations

[08:40] <svnbot6> r11946 | audreyt++ |   without blank lines in between.

[08:49] <StudiesInWords> is ghc available as a subversion archive?

[08:50] <audreyt> it's available via darcs

[08:50] <gaal> audreyt++ # wow!

[08:50] <audreyt> darcs get http://darcs.haskell.org/ghc

[08:50] <gaal> I'm very much at $work now, just popping in to see the fireworks :)

[08:50] <lambdabot> Title: Index of /ghc

[08:50] <audreyt> gaal: ok. my immediate next step:

[08:51] <audreyt> Pugs.Val.Native Pugs.Val.Pure Pugs.Val.Mut Pugs.Val.IO

[08:51] <StudiesInWords> audreyt++

[08:51] <gaal> Oh? for smaller files?

[08:51] <gaal> or shorter names? :)

[08:51] <audreyt> both :)

[08:51] <audreyt> actually just smaller files

[08:51] <gaal> how do you hope to avoid circularity?

[08:51] <audreyt> and also encapsulation

[08:52] <audreyt> I don't see an obvious case of circularity besides the main Val type itself

[08:52] <gaal> also, did you notice the comment about the sadness of

[08:52] <gaal> VNative $ NInt $ IFinite 42

[08:53] <gaal> in haskell that's not expensive in anything by fingertyping

[08:53] <gaal> but in other implementations that might even be slow, no?

[08:53] <audreyt> that can easily be solved

[08:53] <gaal> not that I worry about tHAT :)

[08:53] <audreyt> by instance Num Native

[08:53] <audreyt> then you just type 42.

[08:53] <gaal> hee :)

[08:53] <gaal> audreyt: circularity e.g. in objects

[08:53] <audreyt> other implementations may surely encode things differently

[08:54] <audreyt> below the NInt level

[08:54] <gaal> ACK.

[08:54] <audreyt> also, NativeInt doesn't have IFinite.

[08:54] <audreyt> it's just haskell Int

[08:54] <audreyt> PureInt has IFinite

[08:54] <audreyt> (already fixed)

[08:54] <gaal> that's worth documenting then, which parts of the AST are "official"

[08:54] <gaal> duh, right! thanks :)

[08:55] <audreyt> anything in Pugs.Val is; anything not mentioned there is not, how about that :)

[08:55] <audreyt> (for Val constructors)

[08:55] <gaal> ;)

[08:55] <audreyt> anyway, let me finish the refactoring first... this is falling into palce nicely

[08:55] <audreyt> re the two main knot types

[08:55] <audreyt> Val and Native (aka ValId)

[08:56] <audreyt> err ObjId

[08:56] <audreyt> (very confusing; maybe we just rename it to ValId to agree with TimToady )

[08:56] <gaal> nothingmuch and I think you too mentioned it was worth having another level of parser produce, closer to a parse tree. but this is the nice level in which regular macros operate.

[08:56] <audreyt> I'm ready to use .hs-boot for the two knot types

[08:56] <audreyt> since we dropped 6.4.0 support a while ago

[08:56] <audreyt> that means .hs-boot will actually work

[08:57] <audreyt> SPJ says 6.6 "by ICFP"

[08:57] <gaal> but but! objects are not generally values!

[08:57] <audreyt> which is september

[08:57] <audreyt> I agree. so ObjId still :)

[08:57] <audreyt> I think timtoady means ".id as a native value"

[08:57] <audreyt> shortening to .valid

[08:58] <audreyt> also, I think I'm making "buf" immutable

[08:58] <audreyt> since that's what .valid will return

[08:58] <audreyt> ("Buf" will stay mutable)

[08:58] <gaal> ah. how can we guarantee native ids for arb objects?

[08:58] <gaal> audreyt: there are two Bufs (well, many more) in the spec...

[08:58] <gaal> brb

[08:58] <rindolf> Hi gaal, audreyt

[08:59] <audreyt> well, maybe we can only guarantee pure ids

[08:59] <audreyt> instead of native ids

[08:59] <audreyt> in which case CapInternals has it wrong currently

[08:59] <audreyt> I kinda like pure ids. going with that then

[09:00] <audreyt> rihi.

[09:00] <audreyt> rindolf: hi.

[09:00] <audreyt> TimToady: VB9 has this nice solution to the timely destruction problem:

[09:00] <audreyt> using open('/etc/passwd') -> $fh { ... };

[09:00] <audreyt> where "using" is just like "given" except it calls DESTROY.

[09:01] <wolverian> hm, isn't that what C# does too?

[09:01] <audreyt> yup

[09:01] <rindolf> Hi wolverian

[09:01] <wolverian> hello, rindolf

[09:01] <audreyt> we currently has no solution to that

[09:01] <audreyt> so it might be worth stealing...

[09:01] <audreyt> (well, our solution is spelled as LEAVE { $fh.close })

[09:03] <audreyt> reading SPJ's commit logs is quite inspiring :)

[09:03] <gaal> audreyt: where is the association of "using" and "close"?

[09:04] <gaal> in ::IO ?

[09:04] <gaal> IO::DESTROY ?

[09:04] <audreyt> "...  implement some property ... strangely, I can't quite see how to prove it! ... So I've added a test instead ..."

[09:04] <audreyt> gaal: yeah

[09:04] <gaal> lol

[09:04] *** revision17_ joined
[09:05] <gaal> audreyt: we need to remember sometime that there's buf32, buf64, and stuff (s02 IIRC) with interesting coersions between them... but not yet

[09:05] <gaal> also, int1 which is -1 or 0 :-)

[09:06] <gaal> but generally, type_n types

[09:07] <audreyt> I think it's enumerated

[09:07] <audreyt> it's okay to fail to handle int3

[09:07] <audreyt> so that's fine

[09:07] <audreyt> we just add more Native ytypes

[09:07] <audreyt> variants are cheap :)

[09:07] * gaal agrees ObjId should be pure. and wonders how come it wasn't that laready

[09:08] <gaal> ooh open types, saving the paper for tonight

[09:08] <gaal> cheaps except that sometime we'll have to patmatch this stuff :)

[09:08] <gaal> s/s//

[09:09] <audreyt> we patmatch in exactly one place

[09:09] <audreyt> which is class instances :)

[09:09] <audreyt> and we drift that whenever possible

[09:09] <gaal> which reminds me we'll need to generate ids for types too (Boxable)...

[09:10] <gaal> I really need to get back to $work, which is a shame because this stuff is so interesting :)

[09:11] <pasteling> "rindolf" at 88.155.102.228 pasted "TPF Grant Proposal for audreyt and gaal" (59 lines, 2K) at http://sial.org/pbot/18805

[09:19] <nothingmuch> why "valid" and not "val_id" ?

[09:19] <nothingmuch> if ( $form.valid ) { ## aacckkkkkkkkkkk }

[09:19] <audreyt> nothingmuch: builtin methods in p6 has no underscores I elieve that 'what TimToady is after

[09:20] <nothingmuch> =(

[09:20] <audreyt> $form.is_valid surely?

[09:20] <nothingmuch> yes

[09:20] <nothingmuch> but...

[09:20] <nothingmuch> suckage

[09:20] <audreyt> I share that sentiment

[09:20] <audreyt> better suggestions?

[09:20] <nothingmuch> valueid

[09:20] <audreyt> .objid

[09:20] <nothingmuch> "valid" is just asking for trouble

[09:20] <audreyt> .identity

[09:20] <nothingmuch> something involving "flat" maybe

[09:21] <audreyt> Dog.valid is false; Dog.new.valid is true

[09:21] <audreyt> that may or may not help :)

[09:21] <nothingmuch> heh

[09:21] <nothingmuch> mot really

[09:21] <nothingmuch> but thanks for trying

[09:21] <audreyt> I think we are in agreement.

[09:21] <audreyt> but I can't find a convincingly enough word :)

[09:21] *** larsen joined
[09:21] <nothingmuch> i think we need a secret agent in @Larry

[09:22] <nothingmuch> we should drug chromatic

[09:22] <nothingmuch> and hyponotize him

[09:22] <audreyt> heh

[09:22] <audreyt> I'm a synopsis committer, but otoh I stay away from ergonomics, especially when English words is involved...

[09:22] <nothingmuch> yes

[09:22] <nothingmuch> i belive that is the right course

[09:23] <nothingmuch> hmmm

[09:23] <nothingmuch> has the no underscores thing been justified?

[09:23] <nothingmuch> i mean, it's been working out great everywhere else

[09:23] <nothingmuch> and in some places you just can't have c-ish naming conventions

[09:23] <nothingmuch> e.g. MOP introspection

[09:24] <nothingmuch> that's just eeeeeeeeevvvvvvil to the user base

[09:24] <audreyt> I can see maybe that .defined should return a value.

[09:24] <audreyt> it was my counterproposal

[09:25] <audreyt> but that means we .defined in bool context must be fast

[09:25] <svnbot6> r11947 | audreyt++ | * Pugs.Val: New module space to host the "Val" type and all

[09:25] <svnbot6> r11947 | audreyt++ |   types it uses; this will be the "knot" of mutually-recursive

[09:25] <svnbot6> r11947 | audreyt++ |   modules where most containers must refer to the Val type

[09:25] <svnbot6> r11947 | audreyt++ |   whilst being a Val subtype themselves.

[09:25] <svnbot6> r11947 | audreyt++ |     There beryl, pearl, and opal pale,

[09:25] <svnbot6> r11947 | audreyt++ |     And metal wrought like fishes' mail,

[09:25] <svnbot6> r11947 | audreyt++ |     Buckler and corslet, axe and sword,

[09:25] <svnbot6> r11947 | audreyt++ |     And shining spears were laid in hoard...

[09:25] <nothingmuch> it can be context sensitive

[09:25] <nothingmuch> but

[09:25] <nothingmuch> urff

[09:25] <nothingmuch> let's explain what it does

[09:25] <nothingmuch> and see if we find some pretty fnords

[09:25] <nothingmuch> the purpose, as I reunderstand it

[09:25] *** weinig joined
[09:25] <nothingmuch> is to have something slightly akin to STORABLE_* hooks

[09:26] <audreyt> ok. it returns an immutable object that uniquely identify this object among instances of the same class

[09:26] <audreyt> that's it

[09:26] <nothingmuch> that is, the bare essence of the data the object is representing

[09:26] <audreyt> @foo.vlid may just be its memory address.

[09:26] <lambdabot> Unknown command, try @list

[09:26] <audreyt> .valid

[09:26] <nothingmuch> so it's just for comparison?

[09:27] <audreyt> and indexing

[09:27] <nothingmuch> hmm

[09:27] <nothingmuch> okay

[09:27] <nothingmuch> i thought it was going to give us a nice convention

[09:27] <audreyt> it's what .object_id in other languages return

[09:27] <rindolf> audreyt: can you please review http://sial.org/pbot/18805 ?

[09:27] <lambdabot> Title: Paste #18805 from "rindolf" at 88.155.102.228

[09:27] <nothingmuch> but maybe that's for  $obj.does("ReversibleValId")

[09:28] <audreyt> nothingmuch: reversible?

[09:29] <nothingmuch> my $clone = Class.invalid( $obj.valid );

[09:29] <nothingmuch> that is

[09:29] <audreyt> rindolf: 1. the url you gave on "Project Details" does not describe your project

[09:29] <nothingmuch> perhaps it should be more

[09:29] <audreyt> rindolf: 2. saying "may be somewhat slow" without benchmark numbers is probably not helpful

[09:29] <nothingmuch> but

[09:29] <nothingmuch> orthogonal

[09:30] <nothingmuch> to digress a bit further: if an obj does the MeaningfulValId role maybe is_deeply can use that instead, and Storable can be assisted, and etc etc

[09:30] <nothingmuch> anyway

[09:30] <audreyt> rindolf: 3. need to explain a bit more of how HTML-Widgets-NavMenu helps other people; who is already using it; how it integrates with other web frameworks; etc

[09:30] <audreyt> rindolf: sorry, I'm in the middle of a hacking run, that's all I can think of right now

[09:30] <nothingmuch> the fnords we found: immutable, uniquely identifies, instances, essence, data

[09:30] <nothingmuch> represents

[09:31] <audreyt> that suggests .uniqid

[09:31] <audreyt> or .uuid

[09:31] <audreyt> j/k

[09:31] <nothingmuch> i thgink i like "represents" a bit, maybe

[09:32] <nothingmuch> $obj.urepr

[09:32] <nothingmuch> $obj.urp

[09:32] <nothingmuch> for "unique representation"

[09:32] <nothingmuch> =/

[09:32] * audreyt goes back to hacking

[09:33] <audreyt> let's call it getHashCode ;)

[09:33] <nothingmuch> heh

[09:33] <nothingmuch> "urp"

[09:33] <nothingmuch> hmm

[09:33] <nothingmuch> i think i prefer urp to valid

[09:34] <nothingmuch> it's much more nonsensical

[09:34] <nothingmuch> *shrug*

[09:34] <rindolf> audreyt: sure, no problem, let me remedy it.

[09:46] *** asz joined
[09:54] *** lambdabot joined
[09:57] *** ludan joined
[09:58] <gaal> $vampire.vlad.impale.impale.impale

[09:59] <nothingmuch> gaal++

[10:03] <gaal> .uid could work...

[10:03] <gaal> or .oid for that matter

[10:04] <gaal> or go haskellish and use a ScarySymbol

[10:04] <gaal> .id#

[10:04] *** lambdabot joined
[10:05] <gaal> .id$ etc. (find a ligis that makes sense)

[10:06] <gaal> is # cool in identifiers? or is $oops#I_spaced_out a var with a comment in it?

[10:06] <gaal> s/in/after

[10:07] <gaal> talking lexically here, of course with symbol table elkage you can have a var with a '#' in it.

[10:18] *** kane-xs joined
[10:24] *** prefiks joined
[10:25] *** weinig joined
[10:28] <gaal> audreyt: shouldn't Pugs.Val be called Pugs.AST.Val (etc.)?

[10:30] <audreyt> well it is used in runtime as well

[10:30] <audreyt> as well as serialization

[10:30] <audreyt> I think toplevel may be warranted

[10:48] *** shachaf joined
[10:49] *** azuroth_centeric joined
[10:49] <svnbot6> r11948 | audreyt++ | * beginning of CapInternals->Val refactoring.

[10:50] <clkao> audreyt: http://flickr.com/photos/clkao/207896989/ # very cool shop name

[10:50] <lambdabot> Title: IMG_1812 on Flickr - Photo Sharing!

[10:50] <audreyt> gaal: my idea is that Val will become abstract data type outside Pugs.Val

[10:51] <audreyt> gaal: no casing of Vl anymore

[10:51] <audreyt> _everything_ done in term of typeclasses

[10:51] <audreyt> restrict the casing inside Pugs.Val.*; for the evaluator, you can ask for coercion; call methods; promote native values; call "smart" onstructors

[10:52] <audreyt> but no casing and no explicit tycon calls

[10:52] <audreyt> this is to avoid the massive expression-problem thing we are tackling now

[10:53] <audreyt> clkao: nice!

[10:53] <audreyt> nothingmuch's InterfaceIdea also dictates that we model each builtin Role as a typeclass

[10:53] <nothingmuch> yes yes yes yes yes

[10:54] <audreyt> and we make Val an instance of that interface

[10:54] <nothingmuch> u/w 20

[10:54] <audreyt> and let it throw exceptions for variants that does not satisfy them

[10:54] <audreyt> as well as allow for testing of interface compatibleness

[10:54] <audreyt> which is simple by collecting instance evidence at Val level

[10:54] <audreyt> and nothingmuch won't have a reason to accuse me for nonextensible Haskell internals anymore ;)

[10:55] <nothingmuch> ?

[10:55] <audreyt> a visitor will take the form of (CanDoSomething a => a -> SomeResult) -> Val -> SomeResult

[10:56] <audreyt> nothingmuch: you opined a while ago that the adhoc nature of the current runtime by pushing more and more operations into AST.Internals and Eval is harmful

[10:57] * audreyt goes back hacking

[10:58] <nothingmuch> my mind is a blank

[10:58] <nothingmuch> i think it's a good thing, right?

[10:58] <nothingmuch> ;-)

[10:58] <nothingmuch> (what you're saying)

[10:58] <audreyt> it's a good thing :)

[11:10] *** jferrero joined
[11:16] <gaal> whee

[11:17] <audreyt> TimToady: is it Bool::True or bool::True

[11:17] <audreyt> synopses disagree with itself

[11:17] <audreyt> I think "bool" can be retired and made synonym of "bit" if really needed

[11:17] <audreyt> and True would mean "Bool::True"

[11:18] <audreyt> $x = True; # assume Bool semantics; same as "$x = 3" assumes Int not int

[11:18] <nothingmuch> ++

[11:19] *** elmex joined
[11:20] *** dolmans joined
[11:23] *** lichtkind joined
[11:23] <lichtkind> g morning

[11:27] *** Spania32 joined
[11:27] <audreyt> lichtkind: hi

[11:28] <lichtkind>  audreyt : :) still no official perl6 tut ? i just yesterday began to continue my work :)

[11:30] <audreyt> lichtkind: no, doc/Perl6/Tutorial/ is still unpopulated :)

[11:31] <lichtkind> audreyt even if you dont speak german would you like to look on my aproach on http://wiki.perl-community.de/bin/view/Wissensbasis/Perl6TutorialKapitel3

[11:31] <lambdabot> Title: PerlCommunityWiki 􏿽xBB Wissensbasis 􏿽xBB Perl6TutorialKapitel3

[11:31] <lichtkind> whu ?

[11:33] <lichtkind> and BTW audreyt i didnt listen you and still develop my perl editor in perl :)

[11:33] <lichtkind> but to the tutorial my approach was a bit theory first, but skipable

[11:33] <audreyt> looks quite sane

[11:33] <lichtkind> then vars then operators than control then subs then oop ..roles

[11:33] <audreyt> how's the perl editor doing?

[11:34] <lichtkind> quit well last week we released 0.3.3 which behaves a lot more than professional user app :)

[11:35] <lichtkind> my basic idea for this tutorial was to have one place for all operator related stuff and one place vor variables and so on

[11:36] <lichtkind> begin with simpel stuff when gets to nifty you can pass on to control structures

[11:36] <audreyt> url to the editor? :)

[11:36] <audreyt> *nod*

[11:36] <lichtkind> but you still know where to find what

[11:37] <lichtkind> first chapter ist a summary what hapened and where to find what and second chapter is a bit theorie goal, design pronciple and so on

[11:37] <lichtkind> editor : http://proton-ce.sourceforge.net/site/en/home_news.shtml

[11:38] <lichtkind> sorry but i maintain only win port but alias and me are close before CPAN release

[11:38] <lichtkind> last major steps are currently taken

[11:39] <lichtkind> so your fine with the concept of the tut?

[11:39] <audreyt> yup

[11:40] <audreyt> from the bit of German language still left in me

[11:40] <audreyt> it looks like pretty concisely written

[11:41] <lichtkind> thanks the best are the 4 appendix

[11:42] <audreyt> so will PCE contain more perl-specific features?

[11:42] <audreyt> basing on Scintilla seems like a smart choice.

[11:42] <lichtkind> appendix A ist complete index with all perl6 commands ops and all used terms that need to be axplained

[11:43] <lichtkind> appendix b list for short looking

[11:43] <lichtkind> appendix c best of feature tour , an apetizer

[11:44] <lichtkind> appendix d greatest changes for quick orientation of good perl5 programmer

[11:45] <lichtkind> audreyt of course alias is payed by tpf to plug in PPI and things like Perl::Tidy and so on are made to be plugged in

[11:45] <lichtkind> but we had to make some internal changes first

[11:46] <lichtkind> and its now called Kepher not PCE, that will come in news next week :)

[11:47] <audreyt> what does Kepher mean?

[11:47] <lichtkind> its old egypt term that stands for creation out of it self (writing editor with editor) and spiritual progress

[11:48] <audreyt> "bootstrapping"

[11:48] <lichtkind> not exactly

[11:49] <lichtkind> acording the legend it is the beatle that rols every night the sun to its place where it can go up next morning it takes care of creation while it cant run by itself

[11:49] <audreyt> oh! ok.

[11:51] <lichtkind> so i stole enough attention its geat to see you still wrestling with pugs :)

[11:51] *** CodeBook joined
[11:53] *** ruz joined
[11:53] <audreyt> :)

[11:56] <jferrero> lichtkind, http://en.wikipedia.org/wiki/Kephir

[11:56] <CodeBook> do the channels #perl6 and #perl have a direct relation?

[11:57] <lichtkind> jferrero kefir is very healthy :) the only problem i had was that the transliteration "xeper " was used by satanists

[11:58] <Jedai> CodeBook : #perl6 is for the development of pugs and modules related to perl6 for perl5, #perl is the channel where you can find help for your perl questions.

[11:58] <CodeBook> Jedai, i see

[11:59] <CodeBook> Jedai, do both channels have the same channel management?

[11:59] <jferrero> lichtkind, Only I have to translate the english.conf file to spanish?

[12:01] <lichtkind> yes

[12:01] <CodeBook> i tried to "/cs access #perl list" to be able to talk to an OP there about the reasons for a provider ban. cause i never been there so far. it might be offtopic here. but is there a chance to talk to a person who has access on #perl?

[12:02] <CodeBook> but the access list is restricted

[12:05] <lichtkind> jferrero but still i need to add 2 lines of perl code and something in configs to be able to switch to spanish via language menu in the app :)

[12:05] <lichtkind> but that easy for me done in 2 minutes

[12:07] <jferrero> In coding = line, I can set the coding to 8859-15?

[12:09] <audreyt> TimToady: how lazy is a capture?

[12:09] <audreyt> my $x = \(exit(1), exit(2));

[12:09] <audreyt> it should exit even if $x is not usef, right?

[12:10] <jferrero> lichtkind, In coding = line, I can set the coding to 8859-15?

[12:11] <azuroth_centeric> what sort of laptops does everyone use?

[12:12] *** elmex joined
[12:15] <StudiesInWords> #perlhelp is the channel for help with perl questions.  #perl is the social channel for the perl community.  (imho)

[12:16] <azuroth_centeric> aww, okay

[12:16] <gaal> audreyt: surely! my $x = \(1+2)_ # you would expect this to be reduced too

[12:17] <gaal> likewise for a function call, IMHO

[12:17] <gaal> if you want Sclar::Defer or lazy, I can set you up with the person who wrote that...

[12:18] <lichtkind> jferrero no its a planned feature, now its treated like normal perl strings

[12:19] <audreyt> gaal: well then Cap can't contain Exp can it.

[12:19] <audreyt> it has to contain Val.

[12:19] <audreyt> for the PureCap.

[12:24] <gaal> huh.

[12:24] <gaal> btw didn't you rename it to Capt? or was it Capt you'd renamed it from? :)

[12:25] <audreyt> you renamed it from Capt to Cap iirc.

[12:25] <audreyt> it's Cap at this moment

[12:25] <gaal> NiCap

[12:27] <gaal> lazy{} and defer{} in pugs, how would they be implemented? cps voodoo?

[12:28] <audreyt> VThunk

[12:29] <audreyt> which would be in IO

[12:32] *** macroron joined
[12:35] <audreyt> Pugs.Val.Foo would be the API of the Foo builtin class, I think

[12:35] <audreyt> I've pondered Pugs.Class.Foo and Pugs.Data.Foo instead

[12:37] <audreyt> or even Pugs.Pure.Code

[12:38] <audreyt> but Pugs.Val.Code seems to work well, so I'll put it there for now

[12:38] <gaal> sorry for the lag

[12:39] <gaal> Pugs.Val.Code for the Code ASTish type you mean? or the Perl6-visible Code type? or are you intentionally coupling them?

[12:39] <audreyt> the perl6 visible Code type

[12:40] <audreyt> it would define the Haskell-land PureCode type

[12:40] <audreyt> as well as its instances for the various interfaces

[12:40] <audreyt> aka roles

[12:40] <audreyt> which we may call Pugs.Interface.*

[12:40] <audreyt> or Pugs.Role.*

[12:40] <audreyt> or some such

[12:41] <audreyt> the idea is to decouple the constructors from the implementations

[12:41] <audreyt> for ValPure, a PureFoo is always just Purefoo

[12:41] <audreyt> for ValPure, a PureFoo is always just PureFoo

[12:41] <audreyt> the "data PureFoo ..." should not occur in the same module

[12:42] <audreyt> anyway, you'll see pretty soon :)

[12:42] <gaal> :)

[12:42] <audreyt> meanwhile read that ralf paper :)

[12:42] <gaal> $work :(

[12:43] <audreyt> oy :/

[12:43] <gaal> i only show up here when my stomach won't let me do any more c++

[12:44] <gaal> language of whipped backs instead of whipuppededness

[12:44] <svnbot6> r11949 | audreyt++ | * Pugs.Val - sketch of the public-facing Val interface.

[12:44] <gaal> that was fast

[12:45] <audreyt> *nod*

[12:45] *** jferrero joined
[13:01] *** jferrero left
[13:01] *** jferrero joined
[13:03] *** kanru joined
[13:03] <audreyt> bbl...

[13:04] <svnbot6> r11950 | audreyt++ | * Val: Add UProto for prototype objects

[13:20] *** mauke_ joined
[13:31] *** jkva joined
[13:35] *** mauke_ is now known as mauke

[13:38] *** ludan joined
[13:48] *** Aankhen`` joined
[13:48] *** penk joined
[14:28] *** equinox5 joined
[14:28] <equinox5> hi

[14:28] <equinox5> what is the state of Perl 6?

[14:30] <lichtkind> whooo big question

[14:30] <webmind> easy question, big answer :)

[14:30] <equinox5> come on

[14:31] <equinox5> is there going to be a version for production use?

[14:31] <equinox5> what backends are working best?

[14:31] <lichtkind> of course :)

[14:31] <webmind> I'm pretty sure about that there will be

[14:31] <lichtkind> the language still evolving a bit but great peaces are finished

[14:31] <lichtkind> pugs is running today

[14:32] <lichtkind> but production .. not this year

[14:32] <equinox5> I have seen there are many backends.

[14:32] <equinox5> which are in the best state?

[14:33] <lichtkind> perl 5.10 will bring some cool perl6 features in "production "

[14:33] <equinox5> Such as?

[14:33] <lichtkind> err operator or case statements

[14:33] *** xdg joined
[14:34] <lichtkind> say

[14:34] <lichtkind> and moose gives you perl6 OOP today i

[14:35] <lichtkind> pugs is cool but changing too fast for any sane production

[14:35] <lichtkind> and aprrot still incomplete

[14:35] <equinox5> ok

[14:35] <equinox5> what about ponie?

[14:38] <lichtkind> is sleeping currently

[14:38] <lichtkind> but translator seeme to awakenin

[14:38] *** nitro44x joined
[14:38] <equinox5> what translator? perl 5 to 6?

[14:39] <lichtkind> yea

[14:39] <equinox5> what is it called?

[14:39] <equinox5> officially?

[14:40] <lichtkind> its not even born but larry seems to work on it

[14:40] <audreyt> it's Sage's work

[14:40] <audreyt> based on larry's

[14:40] <audreyt> misc/pX/Common/P5_to_P6_Translation/

[14:40] <audreyt> in the pugs tree

[14:41] <lichtkind> audreyt how does this work with the commiter bits?

[14:41] * lichtkind has still no for pugs

[14:41] <xdg> lichtkind: wait about 20 secs

[14:41] <audreyt> oh, easy

[14:41] <audreyt> let me know of your email addr :)

[14:42] <lichtkind> [email@hidden.address]
[14:42] <equinox5> I could also make a translator.

[14:42] <audreyt> mm, fellow SMAC lover

[14:42] <equinox5> but I cannot see the point.

[14:42] <audreyt> welcome aboard!

[14:42] <audreyt> add yourself to AUTHORS :)

[14:42] <xdg> lichtkind: see... wasn't that about 20 seconds?

[14:42] <xdg> :)

[14:42] *** foo\ joined
[14:42] <lichtkind> :)

[14:43] <audreyt> simply commit as "lichtkind"; you already got an openfoundry account

[14:43] *** nitro44x left
[14:43] <lichtkind> and the pwd?

[14:43] <audreyt> uhm, I suppose you picked a pwd when you signed up

[14:43] <audreyt> there's a mail-passwd link

[14:44] <audreyt> on http://rt.openfoundry.org/ somewhere

[14:44] <audreyt> if that fails, I can give you another commit bit on another mail addr, or reset your password manually, etc :)

[14:49] <equinox5> what about the backends?

[14:49] <lichtkind> no thanks audrey im in :)

[14:49] <lichtkind> who runs open foundry?

[14:52] <audreyt> some .tw government branch

[14:53] <audreyt> I did most of the initial implementaiton; gugod made the UI bearable; but the maintainence team has taken over quite a while ago

[14:54] <lichtkind> cool

[15:01] <lichtkind> i like open foundry but there are much more folks on sourceforge

[15:05] *** elmex joined
[15:05] <equinox5> what is your part in this project?

[15:06] <gaal> with EU::MM, how do I override settings when I do 'perl Makefile.PL'?

[15:07] <gaal> eg. perl Makefile.PL cc=/some/alt/cc

[15:07] <audreyt> try CC=

[15:09] <gaal> looks like it worked. Thanks :)

[15:17] *** buetow joined
[15:22] <audreyt> gaal: I nuked all our constructors. whee

[15:22] <svnbot6> r11951 | audreyt++ | * "Pure", "Mut" and "Ext" (nee IO) are now open data types.

[15:23] <lichtkind> equinox5 you mean me?

[15:25] <lichtkind> i just looking and asking questions? may be i manage to write an tutorial :)

[15:26] *** crem joined
[15:32] <gaal> audreyt++ audreyt++ audreyt++ # Mistress *

[15:32] <gaal> Ext as in external?

[15:32] <gaal> Worldly Types

[15:35] <gaal> nativeId (NBit True)            = NInt (-1)

[15:35] <gaal> bogons detected!

[15:35] <audreyt> yeah. I'm wondering if it actually pays

[15:36] <audreyt> for .valid to be true whenever .defined is true

[15:36] <audreyt> ext as in external.

[15:37] <gaal> dynCompare x y = case cast y of -- interesting

[15:37] <gaal> ah, I understand

[15:37] <gaal> cool :)

[15:38] <audreyt> :)

[15:38] <gaal> you just made everything comparable

[15:38] <gaal> in three lines

[15:38] <gaal> Haskell**

[15:43] *** cognominal joined
[15:52] <audreyt> ok, that's it for tonight. be back afte a short sleep...

[15:52] <svnbot6> r11952 | audreyt++ | * valId: for Pure types, force the special pureId method; for Mut and Ext

[15:52] <svnbot6> r11952 | audreyt++ |   we simply use memory address.

[15:54] <equinox5> ok, lichkind,

[15:54] <equinox5> bye

[15:56] *** ludan joined
[16:13] <gaal> night A

[16:18] *** Bit-Man joined
[16:27] *** chris2 joined
[16:40] *** ludan joined
[16:48] <gaal> whoa whoa the open types trick is cool

[16:49] <gaal> big aha on page three :)

[16:49] <gaal> it's also fortunate that their example just happens to be an AST :-)

[17:00] <TimToady> audreyt: actually, our current huffmanly solution is: $fh will leave { .close }

[17:01] <jmf> is there any chance of the hyperoperator changing back to something simpler?

[17:01] <TimToady> audreyt: yes, the normal boolean type name is Bool.  bool would be a synonym for bit, which is already a synonym for uint1

[17:02] <TimToady> audreyt: a sub call is never lazy by default, even in a capture.  It will prefer to assume list context and run immediately.

[17:03] <TimToady> jmf: not in standard Perl 6, but it would be pretty easy to tweak with a grammar mod.

[17:04] <TimToady> some mathematicians would rather assume hyper and mark the ones that force scalar.

[17:04] <jmf> i see: and is it supposed to be that >><<< is valid but >>!<<< is not

[17:05] <TimToady> the latter is not yet implemented, as far as I know

[17:05] <TimToady> but if I were using them, I'd certainly use the french quotes rather than the texas quotes.

[17:05] <TimToady> just for visual clarity

[17:06] <jmf> ahh ok thanks

[17:07] *** buetow joined
[17:08] <TimToady> »<« and »!<« are somewhat easier to look at, if a little harder to type.

[17:08] <TimToady> but you read it a lot more times than you type it.

[17:08] <jmf> yes

[17:08] <jmf> well not in the interpreter

[17:08] <jmf> but i see your point

[17:09] <SamB> TimToady: I think that must depend on fonts...

[17:09] <SamB> it doesn't look very nice here at all

[17:09] <SamB> the »« are itsy-bitsy

[17:10] <SamB> and the centerlines don't match up either

[17:10] <SamB> pango needs work :-(

[17:14] <jmf> TimToady: what would be the best way to start working on perl6 at this time?

[17:14] <TimToady> depends on your interests

[17:15] <TimToady> some folks like the low-level work, and so tend to head toward parrot.

[17:15] <TimToady> others prefer to be closer to the abstractions, and tend to hang out in pugs-space.

[17:16] <TimToady> right now, most of the test development is done under pugs

[17:16] <jmf> well working on pugs then?

[17:16] <TimToady> "pugs" really means two different things right now.

[17:16] <TimToady> it started out being the Haskell compiler/interpreter for Perl 6.

[17:17] <TimToady> and if you run "pugs" that's what you still get.

[17:17] <TimToady> but the pugs repository has become home for many other related projects that may or may not involve Haskell.

[17:17] <TimToady> the whole p6-on-p5 thing is pretty much devoid of Haskell these days.

[17:18] <TimToady> but that's because Audrey is so good at handing out commit bits.

[17:18] <TimToady> speaking of which, do you have one?

[17:18] <jmf> no

[17:18] <TimToady> gimme an email address and I can send you one.  You can use "at" and such to disguise from bots.

[17:19] <jmf> jmflizz _AT_ rice _._ edu

[17:23] <TimToady> okay, had to remember where the page was, but an invite should be on your way.

[17:23] <jmf> ok, thanks

[17:24] <TimToady> customarily the first commit you do is add your name to AUTHORS

[17:24] <jmf> so will p6-on-p5 and the haskell interpreter both have a place in the future then?

[17:24] *** justatheory joined
[17:24] <TimToady> everything that's useful will have a place in the future.  :)

[17:25] <jmf> of course :)

[17:25] <TimToady> to be more specific, I don't see either of those withering away any time soon.

[17:25] <TimToady> p6-on-p5 is probably the most expeditious way to bootstrap the community into using P6.

[17:26] <TimToady> the Haskell implementation may well remain the implementation of choice for defining the exact semantics desired, and hence regressing the regression tests themselves.

[17:26] <TimToady> the parrot implementation will likely be the fastest

[17:27] <jmf> and how about p6-on-p6?

[17:28] <TimToady> As soon as any other implementation can run p6 sufficiently well, we can do that too.  there's already efforts in that direction.

[17:28] <TimToady> I think most of the folks here would rather be writing a Perl compiler in P6 than in P5...

[17:29] <jmf> right

[17:29] <TimToady> or in PIR, or in Haskell...

[17:30] <TimToady> well, I'm gonna need to bail now.  have the appropriate amount of fun. :)

[17:30] <jmf> alright, thanks for your help

[17:32] <TimToady> bbl &

[17:37] *** equinox5 joined
[17:37] <equinox5> hi

[17:38] <equinox5> what is PIR RUN?

[17:38] *** jferrero joined
[17:39] <equinox5> Does that mean that Perl 6 is converted into Perl 5 and run using perl.exe?

[17:40] <Khisanth> so how many MB is pugs' AUTHORS up to? :)

[17:42] *** miyagawa joined
[17:48] *** robkinyon_ is now known as robkkinyon

[17:49] *** robkkinyon is now known as robkinyon

[17:49] <robkinyon> obra: ping

[18:12] *** diotalevi joined
[18:18] *** Limbic_Region joined
[18:20] *** Aankhen`` joined
[18:23] *** StudiesInWords joined
[18:23] *** amnesiac joined
[18:34] *** ruz joined
[18:34] *** jmf left
[18:44] *** marmic joined
[19:00] *** justatheory joined
[19:07] *** cm joined
[19:08] *** Aankh|Clone joined
[19:09] *** jmf joined
[19:09] <jmf> does anyone know if there is a problem with the openfoundry.org registration page?

[19:13] *** weinig joined
[19:13] <gaal> haven't heard of that

[19:14] <jmf> can?t open the page ?http://rt.openfoundry.org/Foundry/Home/Guest/Register.html?. The error was: ?lost network connection? (NSURLErrorDomain:-1005)

[19:14] <lambdabot> Title: Member Login -- OSSF

[19:15] <gaal> worksforme (though slowly)

[19:16] <jmf> well i get that error after I click "I agree"

[19:16] <gaal> oh

[19:17] <gaal> breaksforme too then.

[19:17] <jmf> damn

[19:17] <gaal> .tw people are probably asleep now...

[19:18] <gaal> got something to commit?

[19:18] <jmf> i see, will this probably get fixed on its own in the next few days then or is there someone i should contact?

[19:18] <jmf> well no not yet

[19:19] <gaal> I think both gugod and audreyt might be able to do something about it, or at least prod someone else to

[19:19] <gaal> I don't know who's the proper person to contact directly though.

[19:20] <jmf> alright ill wait it out for now then, thank

[19:20] <gaal> the repo does work though, so you can check out even if you don't have a user.

[19:20] <jmf> yeah ive done that already

[19:20] <gaal> (it's svn; it nees a user only when you commit)

[19:21] <jmf> just wanted to make sure its not something on my end

[19:23] *** Aankh|Clone is now known as Aankhen``

[19:38] *** niner joined
[20:09] *** cm joined
[20:15] *** jmf left
[20:34] *** Fawaka joined
[20:53] *** bernhard joined
[20:54] *** weinig joined
[21:03] *** weinig joined
[21:07] *** larsen joined
[21:17] <lichtkind> hej im checking out pugs for first time of my liiiiiiffeee

[21:17] <lichtkind> hehe :)

[21:18] <azuroth_centeric> are you _drunk_? :D

[21:18] <lichtkind> better ..happy :)

[21:20] <azuroth_centeric> I have work in an hour. :-(

[21:24] <lichtkind> thats no excuse not to be happy :)

[21:27] <azuroth_centeric> I'll try my best, then

[21:27] <lichtkind> love yourself, your great :)

[21:27] <lichtkind> i have problems to check out pugs

[21:28] <lichtkind> server closes connection

[21:29] <azuroth_centeric> like, it gets half-way through and times out?

[21:29] <lichtkind> yes

[21:33] <lichtkind> it stops always on pugs/"svn/vcc/default

[21:36] <azuroth_centeric> yarrg, just a sec

[21:36] *** lollan joined
[21:37] *** azuroth_centeric joined
[21:40] *** lollan_ joined
[21:41] *** lollan_ left
[21:41] *** dduncan joined
[22:03] <lichtkind> azuroth_centeric++

[22:05] <lichtkind> shii same problem

[22:07] *** fglock joined
[22:08] <lichtkind> please help me i cant commit pugs repository

[22:09] *** jmf joined
[22:09] *** TreyHarris joined
[22:26] <xinming> lichtkind: what's the message show?

[22:26] <lichtkind> same as reported

[22:27] <lichtkind> connection closed by server

[22:28] <xinming> lichtkind: I think It might because the server is busy.

[22:31] <xinming> lichtkind: what version control system you use?

[22:31] <xinming> BTW

[22:34] <lichtkind> tortoise

[22:35] <lichtkind> but its not that important the important dir i have now down :)

[23:03] *** jferrero joined
[23:03] <lichtkind> wb

[23:03] <lichtkind> xinming you was right now i could load all stuff

[23:12] *** reiner_ joined
[23:12] <svnbot6> r11953 | fglock++ | pX/Pugs-Compiler-* - fixed aliasing in Token; '$foo if $bar' works again

[23:12] <clkao> fglock: is it all passing now!

[23:12] <clkao> whoot

[23:12] <clkao> fglock: did you see my question the other day about removing an infix or stuff. if we leave the scope

[23:13] <fglock> clkao: I'm running 08-test.t - but it takes a lot of time here (too little ram)

[23:13] <clkao> syntax error at /home/clkao/work/pugs/misc/pX/Common/Pugs-Compiler-Rule/blib/lib/Pugs/Grammar/Rule/Rule.pm line 17, near "rule ws     :"

[23:13] <clkao> make clean did the trick

[23:16] <clkao> fglock: Use of uninitialized value in subroutine entry at (eval 345) line 441.

[23:16] <clkao> Error in perl 6 parser: Can't use string ("") as a subroutine ref while "strict refs" in use at (eval 345) line 441.

[23:17] *** bcorn_ joined
[23:20] <fglock> clkao: we may need to localize the category tables, at both compile time and runtime

[23:21] <fglock> clkao: I had to interrupt 08-test.t, it swaps too much

[23:21] <clkao> fglock: it simply fails early for me

[23:23] <fglock> clkao: you may uncomment Pugs::Compiler::Perl6 line 55, to show the current compiling line number

[23:23] <clkao> it's not even there

[23:27] <fglock> Perl6Prelude compiles, I'll retry 08-test.t

[23:38] <clkao> fglock: it works

[23:39] <clkao> fglock: it seems to use significant more cpu. ram usage is okay though

[23:41] <fglock> it may be backtracking somewhere

[23:41] <clkao> it all seems beautiful up to now

[23:42] <clkao> do you wnt ot merge back?

[23:42] <clkao> -rule is with lots of conflicts because there were lots of manual merging

[23:42] <clkao> -perl6 is sane, i can just merge up in a jiffy

[23:47] <fglock> clkao: would you help? you have more experience with merging then I

[23:48] <robkinyon> obra: ping

[23:49] <clkao> fglock: i can help with -perl6. can't with -rule, i took a look the other day

[23:49] <fglock> clkao: maybe we could just copy -Rule over

[23:49] <clkao> no

[23:49] <clkao> i think i have changes in perl5/-rule

[23:50] <clkao> maybe manually merge things on perl5/-rule down to px?

[23:50] <fglock> oh, there is scw work

[23:50] <clkao> should i just do the perl6 and leave the rest for you? i neeed to go to bed

[23:51] <robkinyon> seen obra

[23:51] <jabbot> robkinyon: obra was seen 2 days 5 hours 3 minutes 2 seconds ago

[23:51] <robkinyon> anyone here using a MacBook and that DesktopManager replacement?

[23:51] <fglock> clkao: how about merge perl6 down to px, so that it doesn't break the perl5/ version; i'll merge -Rule

[23:51] <robkinyon> stevan said that obra pointed him to a good replacement (a fork that was better on Intel macs)

[23:53] <fglock> clkao: would do the -Perl6 merge?

[23:53] <svnbot6> r11954 | clkao++ | copy test.pm properly.

[23:53] <obra> virtue

[23:53] <fglock> I'll work on -Rule then

[23:54] <clkao> done

[23:56] <fglock> clkao: thanks!

[23:59] <svnbot6> r11955 | clkao++ | Remove rule related tests for now, we shuold be using the perl6 version of p6regex.t

