[00:23] *** jsiracusa joined
[00:27] *** b00t joined
[00:46] *** FurnaceBoy_ is now known as FB|afk

[00:50] *** dduncan joined
[00:51] *** hikozaemon joined
[00:51] *** oylenshpeegul joined
[00:53] *** rashakil__ left
[01:12] *** weinig|work is now known as weinig

[01:15] *** oylenshpeegul left
[01:42] *** amnesiac joined
[01:44] *** Shabble joined
[01:48] *** amnesiac joined
[01:59] *** sproingie joined
[02:06] *** sproingie joined
[02:19] *** lambdabot joined
[02:25] <svnbot6> r10676 | audreyt++ | * assign.t: The Synopsis now no longer guarantee list context for:

[02:25] <svnbot6> r10676 | audreyt++ |     ($a) = W, W, W;

[02:25] <svnbot6> r10676 | audreyt++ |   so we fix it as:

[02:25] <svnbot6> r10676 | audreyt++ |     ($a,) = W, W, W;

[02:25] <svnbot6> r10676 | audreyt++ |   and indeed that works with Pugs.

[02:27] *** jsiracusa joined
[02:42] *** lambdabot joined
[02:53] *** weinig is now known as weinig|sleep

[03:26] *** cmarcelo joined
[03:26] <cmarcelo> audreyt: ping?

[03:47] *** rzoz joined
[04:10] *** cmarcelo left
[04:17] <QtPlatypus> What does it take to wrangle an account on feather?

[04:29] *** justatheory joined
[04:40] <audreyt> QtPlatypus: write Juerd at perl6 dot nl

[04:41] <audreyt> with your desired nick, ssh pubkey, and realname

[04:41] * audreyt is still packing... bbiab

[05:03] *** unobe joined
[05:05] *** cmarcelo joined
[05:15] <unobe> make test results on darwin/ppc (embedded parrot):

[05:15] <unobe> Failed Test                       Stat Wstat Total Fail  Failed  List of Failed

[05:15] <unobe> -------------------------------------------------------------------------------

[05:15] <unobe> t/oo/proxy.t                                    18    6  33.33%  4 6 9 13 15 18

[05:15] <unobe> t/pugsrun/06-dash-help.t           254 65024     8   12 150.00%  3-8

[05:15] <unobe> t/pugsrun/06-dash-version.t        254 65024     8   10 125.00%  4-8

[05:15] <unobe> t/pugsrun/07-dash-uppercase-v.t      0    10    59   72 122.03%  24-59

[05:15] <unobe> t/pugsrun/09-dash-uppercase-c.t      0    10    84  140 166.67%  15-84

[05:15] <unobe> t/pugsrun/11-safemode.t            254 65024     6    8 133.33%  3-6

[05:15] <unobe> t/pugsrun/12-script-args.t           0    11    10    8  80.00%  7-10

[05:15] <unobe> t/rules/from_perl6_rules/inline.t                2    1  50.00%  1

[05:15] <unobe> t/rules/from_perl6_rules/named_ca               26    3  11.54%  21-23

[05:15] <unobe> t/rules/from_perl6_rules/stdrules              207    4   1.93%  12-13 15-16

[05:15] <unobe> 942 subtests skipped.

[05:16] <unobe> eww...that didn't come out nice...i'll nopaste

[05:17] <pasteling> "unobe" at 66.91.225.25 pasted "make test results on darwin/ppc (embedded parrot)" (14 lines, 1K) at http://sial.org/pbot/17705

[05:17] <lambdabot> The title of that page is "Paste #17705 from "unobe" at 66.91.225.25"

[05:19] <unobe> dduncan: from my run, it looks like a good chunk of t/pugsrun/07-dash-uppercase-v.t is failing

[05:20] <unobe> can anybody give advice on why I should/shouldn't build with parrot embedded?

[05:21] <audreyt> hi

[05:22] <audreyt> looks indeed like embparrot fails

[05:22] <audreyt> embparrot gives you the ability to evaluate raw PIR code

[05:22] <unobe> ok

[05:22] <audreyt> but otherwise nothing much is gained

[05:22] <cmarcelo> audreyt: busy?

[05:23] <unobe> oh, okay

[05:23] <audreyt> it's there mostly as a prof of concept

[05:23] <audreyt> cmarcelo: moderately busy. just finished packing; going to airport in ~2hr

[05:24] <unobe> so if i build pugs without embedded parrot, does pugs need more than libparrot.dylib (I think that is all it needed with parrot embedded)

[05:24] <unobe> ?

[05:24] <audreyt> cmarcelo: what's up?

[05:25] <audreyt> unobe: if you build it without embparrot then we need bin/parrot in path

[05:25] <audreyt> to run rules

[05:25] <audreyt> but that's not mandatory

[05:25] <unobe> ah, okay

[05:25] <cmarcelo> audreyt: (i'll ask, but is ok to "postpone") i "patched" Pugs.Prim and Pugs.Prim.Yaml to use BitSet instead of IntSet.... how's a good way to measure the differences (besides make smoke).. as I understand the difference isn't going to be much, but anyway...

[05:26] <cmarcelo> audreyt: I didnt know how Implicit params stuff worked, so did a hack that maybe wrong, but compiles AND the compiled pugs work... =o)

[05:26] <unobe> so if bin/parrot is in the path, then PGE will be used?

[05:28] <audreyt> unobe: yes

[05:28] <audreyt> cmarcelo: uh, I don't know, try this

[05:29] <audreyt> my @a = (@a => @a => @a => @a); @a.perl for 1..1000

[05:29] <audreyt> or something a bit more complex

[05:29] <audreyt> and see if wallclock hanges

[05:30] <audreyt> changes

[05:30] <cmarcelo> what does this "perl" operator do?

[05:32] <audreyt> it does what Data::Dumper::Dumper did.

[05:33] <unobe> if I get an error like "*** Cannot parse PGE: a\n*** Error: does not exist\n" when evaluating: "a" ~~ /a/

[05:33] <unobe> does that mean I don't have parrot installed properly?

[05:34] <audreyt> yeah ,it means it cannot find parrot in path

[05:34] <audreyt> you can also set env PARROT_PATH

[05:39] <unobe> thanks audreyt. I don't have the parrot source built on the computer (just copied the parrot binaries over),

[05:40] <unobe> so i'll download the source and build again, keeping PARROT_PATH pointed to the new directory

[05:40] <unobe> where i'll rebuild parrot

[05:41] <audreyt> k

[05:42] <unobe> i just thought that pugs needed the binaries for parrot, and that was it, but it looks like i don't have the component of parrot that pugs needs to make that happen

[05:54] <cmarcelo> audreyt: not very significative change (pugs-local wins by 0.2s).. some inconsistencies (N=30000 pugs wins by 0.130s, N=40000 local-pugs wins by 0.330s).. i feel that all this differences are inside the error margin.. =P

[05:55] <audreyt> oh well :)

[05:55] <audreyt> JL and JHS are by far more interesting (And widely used) anyway

[05:56] <audreyt> still, nopaste your patch?

[05:56] <audreyt> it'd be interesting to redefine IHash to JudyHS

[05:56] <cmarcelo> i'm "adding complexity" to see if things change.. =o)

[05:56] <audreyt> and rewrite its chunk in src/Pugs/Types/Hash.hs

[05:58] <cmarcelo> well. differences become more "dramatic" when @a definition is more complex...

[06:00] <audreyt> oh good good

[06:00] <audreyt> thinking about it in the simple case it's always a hit

[06:00] <audreyt> never a miss

[06:00] <audreyt> so it's like best case

[06:01] <pasteling> "cmarcelo" at 200.232.236.25 pasted "Judy BitSet on Pugs Prim, take 1" (105 lines, 3.7K) at http://sial.org/pbot/17706

[06:01] <lambdabot> The title of that page is "Paste #17706 from "cmarcelo" at 200.232.236.25"

[06:01] <audreyt> so it's dramatic in the good or bad sense?

[06:01] <cmarcelo> good =)

[06:01] <cmarcelo> pugs-local wins by a better margin..

[06:02] <cmarcelo> best case => makes sense..

[06:02] <audreyt> ooh. how much?

[06:02] <cmarcelo> audreyt: that seen <- .... and then let ?seen = seen is right?

[06:03] <audreyt> sure, correct

[06:04] <cmarcelo> correct but ugly =(.. implicit params can only be "binded" with lets?

[06:05] <audreyt> yes, though in this case pasing it around explicitly maymakemoresense

[06:05] <audreyt> but will compile to the same code

[06:05] <audreyt> so don't bother...

[06:07] <cmarcelo> ok. numbers: your @a, N=10000, pugs-local wins by 0.04s ... my @a, N=10000, pugs-local wins by 0.3s

[06:07] <cmarcelo> my @a = (@a => @a => @a => @a => @a => @a => @a => "eu" => "222" => @a => "i" => "ego" => 32178321 => @a => "eu" => @a)

[06:08] <cmarcelo> (i really dont know what this mean at all hehe)

[06:08] <audreyt> how many s in total?

[06:08] <cmarcelo> 23.5

[06:08] <audreyt> oh. try something with all misses?

[06:09] <cmarcelo> well, still on error margin...

[06:09] <cmarcelo> ok

[06:09] <audreyt> my @a = (@a => 1..1000)

[06:09] <audreyt> er, nvm

[06:10] <audreyt> my (@a, @b, @c, @d, @e, @f, @g, @h);

[06:10] <audreyt> @a = (@a => @b => @c => @d => @e => @f => @g => @h)

[06:10] <lambdabot> Maybe you meant: all-dicts arr ask . v

[06:10] <cmarcelo> okok

[06:14] <QtPlatypus> Would @a = [=>] (@a,@b,@c,@d,@e,@f,@g,@h); Be equiverlent or would I have to use ;

[06:15] <audreyt> I think you want ;, because otherwise it flattens

[06:15] <cmarcelo> N=10000, difference is less than 0.1 (pugs-local wins).. =|

[06:15] <audreyt> oh well. ;)

[06:15] <audreyt> it's not a critical loop anyway

[06:15] <audreyt> as long as the output is the same..

[06:16] <audreyt> maybe it's better to write your own bench

[06:16] <audreyt> but I'd worry about CollectionM first

[06:17] <cmarcelo> Types/Hash.hs is more time critical?

[06:17] <cmarcelo> Collection stuff => is my next step. i wasn't even suppose to be hacking on HsJudy these days =o)

[06:20] <audreyt> :D

[06:20] <audreyt> yes, Types/Hash.hs (IHash) and Types/Array.hs (IArray)

[06:20] <audreyt> are the original motivation for the Job Ad

[06:20] <audreyt> I mean, SoC project idea

[06:22] *** iblechbot joined
[06:25] <cmarcelo> well, i think (hope? hehe) JudyHS can compete in IHash area at least.

[06:26] <cmarcelo> gotta go sleep

[06:27] <cmarcelo> have a good trip

[06:27] <cmarcelo> &

[06:27] *** cmarcelo left
[06:28] <audreyt> g'nite :)

[06:36] *** dduncan joined
[06:38] <dduncan> unobe, it was only the very end of t/pugsrun/07-dash-uppercase-v.t that I initially had a problem with when smoking, but I couldn't recreate that error when I ran the test in isolation

[06:39] <dduncan> also, as always, I have been using the pure-Haskell Pugs ... no alternate backends of any kind

[06:40] <audreyt> I can't dup that but I can dup leo's proxy.t err

[06:40] <audreyt> investigating

[06:51] *** mugwump joined
[06:57] *** marmic joined
[06:59] *** viirya joined
[07:13] * audreyt wonders what's wrong with harness

[07:14] <audreyt> in any case, I gotta run to airport now... be back in 1.5hr

[07:17] <audreyt> &

[07:19] *** unobe joined
[07:54] *** kane__ joined
[07:56] *** SM_ax joined
[08:20] *** buetow joined
[08:26] *** lisppaste3 joined
[09:00] <audreyt> rehi from cks airport

[09:03] <webmind> cks ?

[09:03] <webmind> where would that be? :)

[09:05] <audreyt> .tw

[09:05] <webmind> ah ok

[09:05] <webmind> and wb btw :)

[09:05] <dduncan> so the trip was uneventful

[09:05] *** elmex joined
[09:06] <audreyt> nice that the flight comes with complimentary 30min facial skin treatment session and moisturizer bottles

[09:06] <dduncan> were you in 1st class?  I've never heard of such a thing

[09:06] <dduncan> on flights I take, they give you food and magazines, maybe pillows

[09:07] <dduncan> but I don't go first class

[09:07] <audreyt> no, it's couch

[09:07] <audreyt> economy class

[09:07] <dduncan> or is it just a difference between asian and na airlines

[09:08] <audreyt> I'm taking KLM (.nl) airlines...

[09:08] <webmind> audreyt, that is nice..

[09:08] <audreyt> maybe it's a difference between asian and na airports

[09:08] <webmind> dduncan, crappy food even on my flights

[09:09] <dduncan> I haven't found anything to complain about with food that I've got while flying ... in "regular class"

[09:09] <dduncan> s/regular/$regular/

[09:09] <dduncan> sure, its not like from a quality restaurant, but its not terrible

[09:10] <webmind> well I guess it's doable.. it just never had much taste... can't say btw that I had much flights with food

[09:10] <audreyt> weirdly I can't duplicate the "(stub)" error when I change "make test" targets to it alone

[09:10] <webmind> just 4or6

[09:11] <dduncan> I surmise its possible that was a transient error, maybe a side effect of multi-process communication gone bad

[09:11] <dduncan> I'll see if it goes away when testing another preflight and/or the final version

[09:11] <dduncan> or I can re-smoke the same pre0 if that is helpful ... but as it would late, that would happen tomorrow

[09:12] <audreyt> mmmhmm

[09:13] <svnbot6> r10677 | audreyt++ | * inc::Module::Install::Pugs - sort the tests before "make test"'ing

[09:13] <svnbot6> r10677 | audreyt++ |   in the vain hope that the proxy.t failure is order dependent.

[09:15] <audreyt> dduncan: you see the error on "make smoke" with conc=4?

[09:15] <audreyt> I see it with "make test" and no conc

[09:20] *** pjmm joined
[09:22] <svnbot6> r10678 | audreyt++ | * explicitly use the same order and test sequence in "make smoke"

[09:26] *** phpError joined
[09:28] <dduncan> those were my settings, yes

[09:29] <dduncan> I will do the same procecure as earlier, on the same tarball, tomorrow, to test in case the situation was transient or not

[09:30] <dduncan> but I had conc = 4, on a 2 cpu system, and so each Pugs took around 46% of a cpu

[09:30] <audreyt> nod, but somehow I think there are other explanations

[09:30] <audreyt> did you upload the smoke report?

[09:30] <dduncan> quite possible

[09:30] <dduncan> yes

[09:30] <audreyt> which one was that?

[09:31] <dduncan> I made a note to this channel in real-time as I did each stage

[09:31] <dduncan> http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.12-r0-darwin-normal--1150152530-8940--11539-11538-1-1353-1727-0--9a706ac655bb81ab3fff0ee80520a1d0.html

[09:31] <dduncan> mine is the first line item under release/darwin

[09:32] <audreyt> 'k. let me attempt a fix

[09:32] <dduncan> now, in my prior experience, 'stub' is what you get if you declare N tests, then do N-1

[09:33] <dduncan> N being 69 in this case

[09:33] <audreyt> yes, so reasonably it died after the penultimate test

[09:34] <dduncan> but when I did a direct ./pugs t/pugsrun/07-dash-uppercase-v.t, with a copy of Test.pm in the Pugs root dir, it ran all 69

[09:34] <dduncan> I didn't look close enough, but either the test died, or the IPC cut off before #69 was transferred

[09:35] <dduncan> IPC to the harness

[09:37] <dduncan> given the nature of this issue, it may be specific to me and/or transient ... don't feel the need to hold up the release to attend to this

[09:37] <dduncan> it is still pre-alpha anyway

[09:38] <dduncan> good night

[09:38] *** dduncan left
[09:39] <audreyt> ok, I have a conjecture

[09:39] <audreyt> "slurp" was being too lazy and destroyed by the "unlink" next lie

[09:40] <audreyt> fixing

[09:51] *** macroron joined
[09:52] <audreyt> identified as a race condition

[09:52] <audreyt> made slurp() as strict as possible

[09:54] <audreyt> committed. entering boarding area, bbiab...

[09:54] <svnbot6> r10679 | audreyt++ | * 07-dash-uppercase-v.t: Be a bit more precise by using index()

[09:54] <svnbot6> r10679 | audreyt++ |   instead of a PCRE regex to test output message.

[09:54] <svnbot6> r10680 | audreyt++ | * Pugs.Prim: Made "slurp" as strict as possible, to counter

[09:54] <svnbot6> r10680 | audreyt++ |   this race condition triggered in t/pugsrun/07-uppercase-v.t:

[09:54] <svnbot6> r10680 | audreyt++ |     system("./pugs ... > tmpfile");

[09:54] <svnbot6> r10680 | audreyt++ |     my $output = slurp("tmpfile");

[09:54] <svnbot6> r10680 | audreyt++ |     unlink("tmpfile");

[09:54] <svnbot6> r10680 | audreyt++ |   granted, we can work around that in the test by delaying

[09:54] <svnbot6> r10680 | audreyt++ |   the unlink() toward an END block, but somehow I don't think

[09:54] <svnbot6> r10680 | audreyt++ |   Perl programmers can be trained to do that...

[10:14] *** froh-doh joined
[10:25] * theorbtwo wonders if the unlink could force the slurp, instead of just maximal-strictness.

[10:25] <theorbtwo> That sounds like a lot of work, though.

[10:26] <theorbtwo> Is Perl6-Pugs-6.2.12/docs/feather/~/gen.pl supposed to be in the pre0?  It looks like a temp file...

[10:41] *** rashakil joined
[10:48] <Juerd> It's ugly code, but not temp :)

[10:49] <Juerd> <p>

[10:49] <Juerd> To update this listing, run <tt>perl gen.pl</tt> in <tt>pugs/docs/feather/~</tt>

[10:49] <Juerd> and wait for the automatic update.

[10:49] <Juerd> </p>

[11:09] *** mschmidt joined
[11:09] *** azuroth joined
[11:09] <azuroth> yeah yeah, yeah the cow is back

[11:17] *** weinig|sleep is now known as weinig|work

[11:20] *** Ymmv joined
[11:54] *** frederico joined
[12:00] *** jsiracusa joined
[12:01] <pasteling> "leo" at 195.3.113.168 pasted "pugs r10680 make test results" (12 lines, 834B) at http://sial.org/pbot/17711

[12:01] <lambdabot> The title of that page is "Paste #17711 from "leo" at 195.3.113.168"

[12:04] <QtPlatypus> mmmmm

[12:04] <QtPlatypus> http//www.arts.usyd.edu.au/

[12:05] <azuroth> sydney, eh?

[12:06] *** iblechbot joined
[12:07] * QtPlatypus was just wondering if lambdabot chases down every URL

[12:07] <QtPlatypus> And yes I'm from sydney

[12:08] <azuroth> I'm from newcastle :-)

[12:09] <QtPlatypus> And apprently the bot is from Sydney as well.

[12:10] *** Aankhen`` joined
[12:19] *** reZo joined
[12:58] *** chris2 joined
[13:07] *** szbalint joined
[13:18] *** mako132 joined
[13:44] *** rzoz joined
[13:48] *** rzoz joined
[13:48] *** vel joined
[13:53] *** rzoz joined
[13:59] *** b_jonas joined
[14:10] <svnbot6> r10681 | fglock++ | Pugs-Compiler-Rule - fixed a bug in <alpha> rule

[14:12] *** FurnaceBoy joined
[14:25] <svnbot6> r10682 | fglock++ | Pugs-Grammar-Perl6 - works again; s/Rule/Regex/ for now

[14:37] *** fglock joined
[14:37] <svnbot6> r10683 | fglock++ | Pugs-Compiler-Rule - version 0.05 in CPAN

[14:38] <fglock> audreyt: is it ok to remove Pugs-Compiler-Rule form perl5/ ?

[14:42] *** pjmm left
[14:44] *** bjoern_ joined
[14:45] *** bjoern_ joined
[14:46] <fglock> s/form/from/

[14:48] <scw> fglock: Hi, I'm facing my homework/course project/final exams these days

[14:49] <fglock> scw: hi!

[14:50] <scw> (seems it's our first responsed irc chat :p)

[14:51] <fglock> I've been working mostly off-line too :)

[14:52] <fglock> with the last fix, text constants work again - you don't need to use <'text'>

[14:52] <scw> oh, so that's the reason!

[14:53] <scw> ya, I choose the ugly syntax since simple text didn't work

[14:55] *** sahadev joined
[15:05] *** nothingmuch joined
[15:06] <fglock> lunch &

[15:07] *** fglock left
[15:07] *** Maddingue joined
[15:24] *** ruoso joined
[15:40] *** justatheory joined
[16:03] <spinclad> 10675 test results:

[16:03] <spinclad> Failed Test  Stat Wstat Total Fail  Failed  List of Failed

[16:03] <spinclad> -------------------------------------------------------------------------------

[16:03] <spinclad> t/oo/proxy.t               18    6  33.33%  4 6 9 13 15 18

[16:03] <spinclad> 942 subtests skipped.

[16:03] <spinclad> Failed 1/521 test scripts, 99.81% okay. 6/9479 subtests failed, 99.94% okay.

[16:05] <spinclad> (x86 debian linux, embedded perl5 and parrot)

[16:26] *** ushi joined
[16:30] *** bernhard joined
[16:36] *** unobe left
[16:39] <svnbot6> r10684 | fglock++ | Pugs-Grammar-Perl6 - <ident> rewritten to perl6

[16:41] *** sahadev joined
[16:48] *** weinig|work joined
[16:51] *** ludan joined
[17:11] *** buetow joined
[17:42] *** kcwu joined
[17:52] <svnbot6> r10685 | fglock++ | Pugs-Compiler-Rule - implemented :Perl5 switch

[18:03] *** ushi left
[18:05] *** elmex joined
[18:18] *** DaGo joined
[18:18] *** Ymmv joined
[18:21] <sahadev> hello, i have a question about file I/O in Perl6. does the "File" object let me do something like:

[18:21] <sahadev> $fh.readline -> $line { say (++$i).as("%4d: ", $line }

[18:28] <PerlJam> What specifically are you asking

[18:28] <PerlJam> ?

[18:29] <sahadev> PerlJam: i guess i am asking if the file object provides an interator method which can take arbitray block of code

[18:30] *** Aankh|Clone joined
[18:30] <sahadev> s/interator/iterator/

[18:30] <PerlJam> Um ... probably not given that we have "for" as the universal iterator.  for =$fh -> line { ... }

[18:31] <PerlJam> or,  I suppose that could be spelt for $fh.readline -> $line { ... }   (given the inherent laziness of perl6)

[18:31] <sahadev> ah. ok.

[18:34] *** penk joined
[18:35] *** justatheory joined
[18:36] <sahadev> also, what is the equivalent of $. special variable?

[18:36] <sahadev> nevermind. found it.

[18:37] <sahadev> $?LINE

[18:37] <sahadev> thanks.

[18:42] <sahadev> hmm. looks like I misread the meaning of $?LINE. it doesn't look like the equivalent of $. (which is the line number that has just been read). it seems to be the equivalent of __LINE__. is it?

[18:42] <spinclad> yes

[18:42] <PerlJam> probably.  $?mumble are compile-time thingies

[18:42] <sahadev> so, what is the equivalent in Perl6 of $. of Perl5?

[18:43] <PerlJam> sahadev: perhaps $fh.line.  perhaps +$fh

[18:43] <PerlJam> perhaps boths

[18:43] <PerlJam> er, both

[18:43] <sahadev> neither of them work in recent pugs

[18:44] *** reZo joined
[18:47] <PerlJam> unless I've forgotten how to read haskell, it doesn't appear to be implemented at all.

[18:48] <sahadev> ok. thanks again.

[19:25] *** SamB joined
[19:48] *** Qiang joined
[20:03] *** fglock joined
[20:25] *** dduncan joined
[20:39] *** mako132 joined
[20:44] <dduncan> I am now beginning an identical smoke to yesterday of pre0, to possibly prove how transient the 1 failure was yesterday

[20:44] <dduncan> regardless of the results, I will subsequently smoke the trunk

[20:45] <dduncan> the first should be done in 2.5 hours

[21:40] *** putter joined
[21:41] <putter> audreyt: while smoke runs, here is a quick thought on the release notes, and expectation management.

[21:42] <putter> I have been struck by the degree to which "normal professional perl folk" have written off p6.

[21:42] <putter> At a high-order 10 people perl mongers, a "who expects to try using p6 in the next year?  two?" may not garner a single hand.

[21:44] <putter> Perhaps it's the years of "And now _this_ works! :)"  announcements, notably from parrot, when, they never really do, and the whole thing isn't even vaguely usable anyway.

[21:46] *** larsen joined
[21:47] *** froh-doh joined
[21:47] <putter> *If* we want to begin changing that, gathering attention now-ish, rather than waiting for pugs to be "tada, it works!", then it seems like there is an exercise in expectation management.

[21:49] <putter> Ie, a release note should ideally provide the reader with a thorough and accurate expectation of what will and wont work, and how well.  Ideally so noone who tries it will be at all surprised by what is/isnt working.

[21:51] <putter> I don't think we've ever really written that paragraph.  STATUS was something like it for a while, but was still more a grabbag of facts, requiring the reader to form their own expectation by reading between the lines.

[21:51] *** Ymmv joined
[21:53] <putter> And there is much important expectation info which is never really documented, except transiently on irc.

[21:58] <putter> Eg, Q - do objects work?  A - not really.  There is a large directory of passing oo tests, and many small modules have been written.  But no-one has ever written a large oo program in p6.  Type inferencer and other bugs have made that infeasible.  The hope was to fix them in May.  Of 2005.  Ther

[21:58] <putter> e is no current estimate on when there might be some progress.

[21:59] *** weinig|work is now known as weinig

[22:00] <putter> Note how dramatically different this is than "we're passing all the oo tests again!".

[22:02] <putter> Our tests are regression tests.  We report "expected failure todo's" as successes.  And it's been a long time since anyone really tried to spew a lot of (inevitably failing) tests based on the language spec.  We're being much more incremental than that.

[22:03] <putter> Which is all fine for "us", an audience of pugs developers.  But that's perhaps not the target audience of either the blog, or the release notes.

[22:06] <putter> Potential _users_ of pugs/p6 what will and wont work if they try it.

[22:08] <putter> Can I do oo?  Some.  Nothing big.  Expect problems.  "Been there for a year, maybe fix them this year" problems.

[22:09] <putter> You wouldn't even know from the "secondary literature" how much the perl6 design is still a work in progress.

[22:11] *** macroron joined
[22:13] <putter> One could form an impression of "they've been trying to implement the spec for years, and still haven't managed it.  either they're bozos, or the language is a disaster".  Little actually says "the pugs/perl6 effort is one of _exploratory design and implementation_".  Certainly not our release notes.

[22:21] *** iblechbot joined
[22:22] <PerlJam> putter: aren't we a bunch of bozos?

[22:22] * putter takes off his big red nose and floppy shoes

[22:22] <putter> no.

[22:23] <PerlJam> putter: but in any case, I just read all that stuff you just wrote and I agree completely.

[22:30] <putter> "Perl6 is the exploratory language design and implementation effort which will result in the next major, and much richer, version of perl.  Perl6 is [... audreyt had a nice sentence summarizing what p6 is from a CS perspective, illustrating neatness and challenge...].  It's taking a while because it hard, we'r

[22:32] <putter> e a handful of people working unfunded in our spare time, limitations of the p5 runtime forced a non-incremental effort, and we've had project management problems.

[22:40] <putter> aside(eg, not part of intro paraphragh) - Creating as language which lets you do what you want to do, flexibly and powerfully, is hard.  CS research kind of hard.  Perl6 will be a notable accomplishment in language engineering.  With only something like mid-order 10 FTE's working on it, that takes time.  Especially if the effort is a bit chaotic.

[22:45] <putter> PerlJam: nod

[22:47] <putter> hmm.  need a "project journalist"?  someone to go around and ask everyone "what are you working on?  why?  how? etc" and summarize.

[22:49] <putter> running late.  smoke still in progress.  yay, a preflight.  cheers &

[22:50] <putter> PerlJam: given agreement, the next question is "what to do?", what might be usefully added to our todo list...

[22:50] <putter> &

[22:54] *** Maddingue joined
[22:59] <fishb0t> which synopsis is p6 open() doc'd in?

[23:16] *** buubot joined
[23:18] *** buu is now known as buubot

[23:18] *** buubot is now known as buu

[23:19] *** buubot joined
[23:23] *** buubot joined
[23:27] *** trym joined
