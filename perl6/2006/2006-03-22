[00:07] *** pjcj_ joined
[00:15] *** kane_ joined
[00:25] *** pankaj_ joined
[00:34] <svnbot6> r9690 | fglock++ | pX/.../PCR - integrated changes that were in PCR-dev (Grammar::Rule transition to OO)

[00:50] *** Kattana joined
[01:20] *** hexmode joined
[01:23] *** integral_ joined
[01:55] *** Ara4n is now known as Aragon

[01:55] <Aragon> um

[01:55] *** Aragon is now known as Aragone

[01:58] <TimToady> keep at it, pretty soon you'll get to Oregano.

[01:59] <jisom> the kind you put in your pasta or the other kind?

[02:12] *** _cnhackT_ joined
[02:15] *** GabrielVieira joined
[02:16] *** Toaster is now known as Ara4n

[02:17] <Ara4n> TimToady: and beyond Oregano i'd find myself as Tarragon? ;)

[02:38] *** guevolt joined
[02:38] <guevolt> hi! i need a help! i put on my "/etc/environment" the variable: "PERL5LIB=${PERL5LIB}:/usr/local/censor/packages" . But when i try use my application through  the browser i get this error: Can't locate setup.pm in @INC .... But when i try run the script from shell it work(i tried do it using the user www-data, apache user). What i do ?

[02:40] *** nirgle joined
[02:40] *** nirgle joined
[02:44] *** guevolt left
[02:50] <svnbot6> r9691 | fglock++ | pX/.../PCR - more backslashed chars

[03:03] *** mako132_ joined
[03:12] <xinming> anyone here have a mobile phone which is running linux please:

[03:44] *** KingDiamond joined
[03:59] *** whiteg joined
[04:02] *** xinming joined
[04:08] *** _cnhackT_ joined
[04:18] *** justatheory joined
[04:25] *** pankaj_ is now known as spo0nman

[05:15] *** amnesiac joined
[05:29] *** avar joined
[05:30] *** Quell joined
[05:54] *** justatheory joined
[06:07] <gaal> we need more pugs hackers in hawaii

[06:08] <gaal> that way audrey can always go west on her tours, and not be jetlagged for ages when she gets home

[06:14] <spinclad> even seattle/vancouver would help, though not as much

[06:17] *** avar joined
[06:21] *** penk joined
[06:36] *** pen1 joined
[06:38] *** nothingmuch joined
[06:45] *** Quell joined
[06:49] <nothingmuch> møøse

[06:50] <merlyn> mööse

[06:52] <gaal> caribou!

[06:52] <merlyn> móóse

[06:53] *** iblechbot joined
[06:53] <gaal> can't PAR::Dist be persuaded to, uh, par up a dist *with dependencies* and make me an executable?

[06:53] *** penk joined
[06:53] <merlyn> môôse

[06:53] <gaal> alternatively, can't pp be easily told to look in blib?

[06:53] <gaal> surely I am missing something

[06:54] *** GeJ joined
[06:54] <merlyn> mòóse

[06:54] <merlyn> get the eyebrows right

[06:54] <gaal> yeah, I got that look too

[06:55] <spo0nman> X-(

[06:55] <gaal> wait, did I just get my portrait done by merlyn? whee. :)

[06:56] <gaal> and with that happy thought, I must away to $work &

[06:57] <GeJ> morning folks

[07:02] *** avar joined
[07:04] *** wilx joined
[07:19] *** avar joined
[07:33] *** drrho joined
[08:17] *** FurnaceBoy left
[08:19] *** nothingmuch joined
[08:22] *** cm_ joined
[08:33] *** handon joined
[08:48] *** kane__ joined
[08:56] *** pdcawley_ joined
[09:36] *** handon joined
[09:37] *** |cnhackT| joined
[09:50] *** kanru joined
[09:53] *** |cnhackT| joined
[09:56] *** _cnhackT_ joined
[10:03] *** _cnhackT_ joined
[10:04] *** nnunley joined
[10:19] *** integral joined
[10:19] *** kanru joined
[10:34] *** theorbtwo joined
[10:42] *** elmex joined
[10:53] *** marmic joined
[11:02] *** miyagawa joined
[11:29] <meppl> guten morgen

[11:29] *** Ara5n joined
[11:29] * Ara5n tries to catch up on the current state of play on PCR

[11:30] *** b_jonas joined
[11:31] *** pjcj_ is now known as pjcj

[11:59] *** miyagawa joined
[12:03] *** iblechbot joined
[12:11] *** nirgle left
[12:13] *** pdcawley_ joined
[12:20] *** miyagawa joined
[12:25] *** ruoso joined
[12:27] *** chris2 joined
[12:54] *** fglock joined
[12:59] <fglock> Ara5n: ping

[12:59] <fglock> ruoso: ping

[13:01] <ruoso> fglock, pong

[13:04] <ruoso> fglock, news?

[13:05] <fglock> ruoso: PCR t/04-rule.t #15 is failing - it's a regex for matching not-newline - can you help?

[13:08] <svnbot6> r9692 | fglock++ | pX/../PCR - added more 'not implemented' messages

[13:10] <ruoso> fglock, I'll take a look

[13:11] <ruoso> line 106? is it?

[13:13] *** Lorn__ joined
[13:14] <fglock> ruoso: the error happens in Pugs::Runtime::Rule line 279 - you can add a print there

[13:15] <fglock> ruoso: it should match [^\n], but it is doing something different

[13:17] * ruoso looking

[13:17] <ruoso> why is the AST so complex?

[13:18] <ruoso> shouldn't it be really simple?

[13:18] <nothingmuch> ruoso: is this a philosphical question?

[13:18] <ruoso> it's just a single special character match...

[13:18] <nothingmuch> ;-)

[13:18] <ruoso> nothingmuch, the AST for '\N'

[13:18] <svnbot6> r9693 | fglock++ | pX/.../PCR - more unimplemented messages

[13:19] <nothingmuch> ruoso: i know, i know... i was just kidding =)

[13:19] <ruoso> nothingmuch, :)

[13:20] <Aragone> fglock: pong

[13:20] <Aragone> (sorry - was at lunch)

[13:20] <fglock> ruoso: it maps to how the grammar was implemented

[13:21] <fglock> Aragone: are you trying to use/grok PCR?

[13:21] <Aragone> grok, certainly

[13:21] <Aragone> use; only in a test rig context at the moment

[13:21] <fglock> Aragone: I cleaned up the code a bit yesterday

[13:22] <Aragone> cool :)

[13:22] <fglock> preparing to release 0.02

[13:22] <fglock> I'm adding error messages now

[13:24] * Aragone svn ups and will have a play this arvo

[13:24] *** Limbic_Region joined
[13:25] <ruoso> fglock, in line 280 you have 'qr(^($_[0])(.*)$)s;'

[13:25] <ruoso> why is the ^ there?

[13:26] <ruoso> as the \n is the first char

[13:26] <ruoso> it won't match

[13:27] <ruoso> fglock, shouldn't it try to match anywhere in the string?

[13:27] <fglock> ruoso: I'm implementing \N - it should fail if the first char is \n

[13:28] <fglock> ruoso: the matching engine subrules always match at the start of the string

[13:29] <ruoso> fglock, and only at the start?

[13:29] <ruoso> fglock, well... it indeed failed the match...

[13:29] <ruoso> fglock, something else is matching the x

[13:30] <fglock> ruoso: it works in the command line :(

[13:32] <Ara5n> fglock: this is probably a very stupid question, but: why does perl -I/usr/local/src/pugs/misc/pX/Common/Pugs-Compiler-Rule/lib/ -MPugs::Compiler::Rule -e '$r=Pugs::Compiler::Rule->compile("<word> <ws> <word>");'

[13:32] *** cognominal joined
[13:32] <Ara5n> fork a pugs, which then sits there doing nothing?

[13:33] <nothingmuch> pug forking

[13:33] *** Lorn__ is now known as Lorn_

[13:34] <ruoso> fglock, the problem is in the AST

[13:34] <fglock> Ara5n: it works here. btw, <word> is not a standard rule - you have to define it

[13:34] <ruoso> fglock, not the match itself

[13:34] * nothingmuch resists googling for "pug f****r"

[13:34] <Ara5n> perl -I/usr/local/src/pugs/misc/pX/Common/Pugs-Compiler-Rule/lib/ -MPugs::Compiler::Rule -e '' # hangs likewise, though

[13:34] <fglock> ruoso: looking

[13:34] <ruoso> fglock, in the first match it makes 2 tries

[13:35] <ruoso> fglock, the first with the \n in the start... in the second try, the \n is not there anymore

[13:35] <Ara5n> this is with a new pugs build - but with whatever gets installed in /usr/local/share/perl/5.8.7/Pugs having been removed in order to try to eliminate clashes between the development & production versions of PCR

[13:36] * Ara5n was only using <word> as he noticed it defined in the grammar as a quick test

[13:36] * ruoso is still surprised by the fact that "nxyz" ~~ /N/ shouldn't match "x"

[13:36] <Juerd> nothingmuch: Don't worry, pug-forker - did not match any documents.

[13:36] <ruoso> fglock, to me, the match is correct...

[13:37] <Juerd> ruoso: Why surprised?

[13:37] <nothingmuch> Juerd: i'm more worried about the non  geek slang version

[13:37] <fglock> ruoso: you are right!

[13:37] <Juerd> ruoso: \N is just [^\n]

[13:37] <Juerd> nothingmuch: pug-fscker? :)

[13:37] <fglock> ruoso: audreyt modified the user-side match - I forgot it

[13:37] <Juerd> Oh, that's still geek :)

[13:37] <Juerd> Did you mean: pig-fucker

[13:38] <nothingmuch> haha

[13:38] <ruoso> fglock, :)

[13:38] <Juerd> FRSD Message Board - Does pugfucker kill threads?

[13:38] <Juerd> We're not implementing threads with forks, right? ;)

[13:38] <fglock> ruoso: only submatches match at the start

[13:39] <fglock> ruoso: I'll fix the test - thanks!

[13:40] <nothingmuch> Juerd: no =)

[13:42] <svnbot6> r9695 | fglock++ | pX/.../PCR - fixed \N test - ruoso++

[13:47] <ruoso> fglock, I think the abort in a subrule is aborting the entire match

[13:47] *** mako132 joined
[13:48] <ruoso> fglock, I'm running lrep with -d:ptkdb

[13:48] <ruoso> fglock, it's a pita

[13:48] <fglock> ruoso: I can't debug functional programs with a debugger :(

[13:48] <fglock> ruoso: can you paste a small failing test?

[13:49] <ruoso> I'll try to reproduce it in a test

[13:49] <ruoso> the debugging I'm doing is in lrep

[13:53] <fglock> ruoso: it's hard to debug what a 'return' is doing

[13:57] <svnbot6> r9696 | fglock++ | pX/../PCR - TODO update

[13:59] <ruoso> fglock, I think I have a failing test

[14:01] <ruoso> fglock, I'll commit it inside 04-rule.t

[14:01] <fglock> ruoso: ok

[14:01] <ruoso> done

[14:03] <fglock> looking..

[14:03] <svnbot6> r9697 | ruoso++ | new failing test

[14:04] <fglock> ruoso: you reverted my \N fix

[14:04] <ruoso> fglock, sorry

[14:04] <ruoso> didn't notice in the diff

[14:05] <fglock> fixing...

[14:05] *** b_jonas left
[14:06] *** Qiang joined
[14:07] <fglock> ruoso: it's a grammar error - it is parsing as: a? [bg]?

[14:08] <ruoso> fglock, noticed it now

[14:09] <fglock> ruoso: I wonder if this is correct in p6, since you can now write /a? b g?/

[14:09] <ruoso> fglock, ok... this test produced another error, not the one I expected...

[14:10] <ruoso> fglock, you're right, i think...

[14:10] <ruoso> fglock, I don't know if the unnamed capture is needed in this case

[14:15] <fglock> ruoso: I'll leave this test failing for now

[14:26] <fglock> ruoso: I think the actual behaviour will depend on the rule switches

[14:30] <fglock> lunch &

[14:46] *** vel joined
[14:49] <ruoso> how to get a removed file back to life in svn?

[14:49] <ruoso> fglock, I found out the problem

[14:50] <ruoso> fglock, is 'package Pugs::Runtime::Rule;' really necessary in the emitted code?

[14:50] <gugod> ruoso: do a "svn cat" directly to repository on it's last revision number

[14:51] <theorbtwo> ruoso: If you mean deleted locally, svn revert filename.

[14:51] <theorbtwo> Don't know how to restore a file deleted on the repo.

[14:51] <ruoso> gugod, and how can I know it's last version number?

[14:51] <ruoso> gugod, svn log didn't help

[14:52] <gugod> ruoso: how about do svn log to it's upper-level dir ?

[14:52] <gugod> svn log -v , rather

[14:54] * ruoso loves CVS even more... each second I use svn...

[14:56] <osfameron> svn up to the file at a version where it existed

[14:57] *** hcarty joined
[14:57] *** hcarty left
[14:58] * ruoso recovered the file after eye-parsing on all changes in the directory 

[14:59] * ruoso wonders if really there is not a way to see one file's log

[14:59] <ingy> hola

[14:59] <ingy> seen audreyt

[15:00] <PerlJam> ruoso: you can "svn merge" it back to life (complete with history to the point of deletion)

[15:09] *** |mjk| joined
[15:09] *** justatheory joined
[15:27] <ruoso> fglock, I think I'm really near

[15:27] <ruoso> fglock, I think it's just a matter of access to the capture variable

[15:34] <svnbot6> r9700 | ruoso++ | alright... still not working... but now it can match... the capture is wrong... not emitting code...

[15:43] <svnbot6> r9701 | ruoso++ | updating TODO

[15:47] *** kisu joined
[16:07] *** KingDiamond joined
[16:38] *** chris2 joined
[16:40] <Ara5n> if anyone can suggest why running /usr/bin/perl -w -I/usr/local/src/pugs/misc/pX/Common/Pugs-Compiler-Rule/lib/ # would fork a: pugs -e my$Z= =$*IN;while 1{$_=perl eval eval=$*IN;print$Z;say$!//$_;print$Z;flush$*OUT}

[16:40] <Ara5n> and just sit there

[16:40] <Ara5n> i'd be very interested :)

[16:40] <Ara5n> perl -I/usr/local/src/pugs/misc/pX/Common/Pugs-Compiler-Rule/lib/ -MPugs::Compiler::Rule -e ''

[16:40] <Ara5n> even

[16:41] *** FurnaceBoy joined
[16:48] *** FurnaceBoy_ joined
[16:51] *** TimToady joined
[16:53] *** orafu joined
[16:55] *** qu1j0t3 joined
[17:09] *** FurnaceBoy_ joined
[17:12] *** SamB joined
[17:15] *** ruoso joined
[17:16] <ruoso> fglock, ping

[17:18] <ruoso> Ara5n, I don't even have pugs installed and it simply works...

[17:18] <ruoso> Ara5n, are you sure it's related?

[17:19] <ruoso> Ara5n, wait... it's devel version or cpan version?

[17:19] <Ara5n> the devel.

[17:19] * Ara5n is very confused

[17:19] * Ara5n uninstalls pugs to see what happens

[17:20] *** DesreveR joined
[17:20] <Ara5n> or at least i would if pugs had a make uninstall

[17:20] <ruoso> try this inside PCR dir: perl -Ilib/ -MPugs::Compiler::Rule -e 'print(Pugs::Compiler::Rule->compile('\n')->{perl5})'

[17:21] <Ara5n> same

[17:21] <ruoso> Ara5n, does make test works?

[17:21] <ruoso> Ara5n, do a make clean && perl Makefile.pl && make test

[17:22] <Ara5n> # Failed test 'escaped char \N'

[17:22] <Ara5n> otherwise okay

[17:22] * Ara5n svn updates

[17:22] <Ara5n> which changes the failure for that test slightly

[17:23] <Ara5n> however, the oneliner now works

[17:23] * Ara5n boggles

[17:23] <Ara5n> i wonder what changed...

[17:24] * Ara5n assumed that Module::Install was trying to use pugs to compile lib/Pugs/Grammar/Rule/Rule.pm to lib/Pugs/Grammar/Rule/Rule.pmc or something

[17:24] <Ara5n> but...

[17:24] * Limbic_Region wonders if anyone ever built a Win32 binary build for eric256

[17:25] * ruoso is still using .p6 for perl 6 sources and .pm for perl 5 sources

[17:26] <Ara5n> sorry - i meant ./lib/Pugs/Runtime/Rule.p6

[17:27] <Ara5n> either way, i was wondering if somehow something was trying to invoke pugs to compile it to .pmc

[17:27] <Ara5n> because of the .pmc looking stale or similar

[17:27] <ruoso> Ara5n, maybe the use v6-pugs; does it

[17:28] <ruoso> Ara5n, BTW... fglock uses .pm for perl 6 and .pmc for perl 5... the file is Pugs/Runtime/Rule.pm

[17:28] <ruoso> and the compiled is Pugs/Runtime/Rule.pmc

[17:29] <ruoso> I still think it's confusing to have perl 5 and perl 6 syntax for .pm files

[17:30] <Ara5n> ah, right. there's also Pugs/Runtime/Rule.pm which seems to be the same thing - but written in p5

[17:30] <Ara5n> how excitingly confusing :)

[17:31] <ruoso> Ara5n, heh

[17:31] <ruoso> in lrep-compiler subtree perl 6 is .p6 and perl 5 is .pm

[17:32] <svnbot6> r9702 | ruoso++ | better documenting of the failing test... ambiguous rule "a?bg?". "a?[bg]?" or "a? b g?"?

[17:36] <ruoso> TimToady, /a?bg?/ should be the same as /a?[bg]?/ or /a? b g?/?

[17:38] *** nothingmuch joined
[17:38] <Juerd> I'd want it to mean [bg]?, but historical instincts scream NOOOOOOOO!!!

[17:39] <ruoso> Juerd, [bg] is not alternation anymore... but unnamed capture...

[17:39] <ruoso> it groups bg as a single entity

[17:39] <Juerd> ruoso: I know.

[17:39] <Juerd> Is it unnamed *capture*?

[17:39] <Juerd> I thought it was *non-capturing* group!

[17:39] <ruoso> Juerd, yes... that... :)

[17:40] *** pmichaud joined
[17:40] <Juerd> Pfew

[17:40] <Juerd> *wipes sweat from forehead*

[17:40] <ruoso> btw... PCR as it is today makes the first option

[17:41] *** elmex joined
[17:41] <ruoso> if we forget about perl 5 the first option is certainly better...

[17:42] <Juerd> I'm not entirely sure

[17:43] <nothingmuch> [ ] is the circumfix identity function ;-)

[17:43] <Juerd> It would imply [] around space separated groups, which makes [] less useful to have :)

[17:43] <pmichaud> is the discussion about quantifiers on literals in rules?

[17:43] * pmichaud came in late

[17:44] <ruoso> hmmm... thinking better... if we think like this... it should be parsed as /[a?[bg]]?/

[17:44] *** qu1j0t3 joined
[17:44] <nothingmuch> pmichaud: how do you think of quantifiers etc?

[17:44] <nothingmuch> are they higher order rules?

[17:44] <pmichaud> quantifiers are operators applied to the previous "expression"

[17:44] *** ghenry joined
[17:44] <pmichaud> so, I think of them as operators.  In fact, PGE implements and parses them that way -- as postfix operators

[17:44] <ruoso> Juerd, the second should be the correct...

[17:45] <nothingmuch> what about captures?

[17:45] <nothingmuch> are they a type of operator or a special construct?

[17:45] <pmichaud> captures are operators

[17:45] <nothingmuch> yummy

[17:45] <pmichaud> (again, PGE implements them as operators)

[17:45] <nothingmuch> operators are really just functions with weird names, right?

[17:45] <nothingmuch> that accept a rule as a param?

[17:46] <pmichaud> captures and groups in rules are  in PGE as  circumfix:( )  and circumfix:[ ]

[17:46] <nothingmuch> yay yay hurray

[17:46] * nothingmuch was going to bring exactly that up in a second

[17:46] <nothingmuch> can I define my own postfix:<møøse> rule?

[17:47] <pmichaud> a?bg?   parses as   [a?] b [g?]

[17:47] <avar> multi sub postfix:<møøse> () { ... } ?

[17:47] <pmichaud> nothingmuch: I haven't worked out all of the details on that yet, but in PGE it should be possible to derive a new parser and add additional syntactical constructs

[17:48] <nothingmuch> avar: not a perl sub, and extension to the rule DSL

[17:48] <nothingmuch> wait

[17:48] <pmichaud> the perl 6 rule parser is just an operator precedence parser, and all of the syntactical constructs are operators

[17:48] <nothingmuch> is [ ] a rule?

[17:48] <nothingmuch> i see 'a' as a rule that matches 'a' and it's a primitive

[17:48] <nothingmuch> that is it must be implemented by the below layer

[17:48] <nothingmuch> because you can't define it without the notion of strings

[17:48] <nothingmuch> otoh + is a combinator

[17:49] <nothingmuch> it takes any rule, and has some programatic hooks to match that rule

[17:49] <nothingmuch> and try again if it backtracks

[17:49] <nothingmuch> it's a "soft" thing

[17:49] <pmichaud> PGE implements + as a combinator, that repeatedly attempts to match the expression it quantifies

[17:50] <nothingmuch> that is, it can be implemented as 'method postfix:<+> ( $subrule ) { ..... }'

[17:50] <nothingmuch> and it just happens to have a more efficient version that is hard coded in PGE

[17:50] <nothingmuch> is that accurate?

[17:50] <pmichaud> to some approximation, yes.

[17:50] <nothingmuch> okay

[17:51] <nothingmuch> so my question is: can we define e.g. 'method postfix:<møøse> { }' that does something similar

[17:51] <pmichaud> more accurately, in PGE the quantifier is a special node in the rule expression tree, and when one generates code for a quantifier it handles the looping, backtracking, and passing control to the thing it quantifies

[17:51] <nothingmuch> like, err

[17:51] *** fglock joined
[17:51] <nothingmuch> match only fibbonaci numbers of repitiions?

[17:51] <nothingmuch> okay

[17:51] <nothingmuch> that could be refactored though

[17:52] <pmichaud> so, in PGE (not worrying about p6 syntax at the moment), one could add a custom rule expression node type, with its own code gen function

[17:52] <nothingmuch> ;-)

[17:52] <nothingmuch> aye

[17:52] <nothingmuch> do you know of my grand master plan for emission/ffi?

[17:52] <pmichaud> one would add    "postfix:<moose>" to the rule parser, and have it return an expression node of type "PGE::Exp::Moose"

[17:52] <nothingmuch> ... and that could potentially be any parrot language

[17:53] <nothingmuch> as long as you extend the reducer

[17:53] <nothingmuch> okay

[17:53] <nothingmuch> sounds good

[17:53] <nothingmuch> pmichaud++

[17:53] <pmichaud> parsing perl 6 rules became a lot simpler (and more powerful) when I added the generic operator precedence parser to PGE :-)

[17:53] <nothingmuch> do you know of my grand master plan for emitting ASTs in Perl 6?

[17:53] <pmichaud> nothingmuch: I only know bits and pieces of it; I've been focused on parrot things of late

[17:54] <nothingmuch> the idea is more of a design thing

[17:54] <nothingmuch> in that all the emitter backend is very generic

[17:54] <pmichaud> is there a doc on it somewhere?

[17:54] <nothingmuch> yes, but they suck

[17:54] <nothingmuch> it's on my todo list ;-)

[17:54] <nothingmuch> i have a talk though

[17:54] <nothingmuch> the idea is that the emitter has the oppertunity to replace any code object it wants with a native type

[17:54] <svnbot6> r9703 | ruoso++ | "a?bg?" should be the same as "a? b g?"

[17:55] <nothingmuch> or, for that matter, any AST node

[17:55] <nothingmuch> so everything, from unboxed types to foreign functions to primitive ops is unified

[17:55] <nothingmuch> which forces a cleanliness

[17:55] <nothingmuch> that's basically it in 2 lines

[17:55] <nothingmuch> but there are more specific ideas

[17:55] <nothingmuch> soon I will have more time to braindump on fglock at all

[17:55] <pmichaud> that sounds somewhat similar to what allison is trying to do with tge

[17:56] <ruoso> fglock, ping!

[17:56] <nothingmuch> allison should really lurk here... =/

[17:56] <Juerd> What's tge?

[17:56] <nothingmuch> it seems like instead of sharing ideas we duplicate them

[17:56] <Juerd> nothingmuch: Leave that to audrey. She's done the impossible a few times already :)

[17:56] <nothingmuch> Juerd: i know, i was there with Larry ;-)

[17:56] <Juerd> (that being inviting to irc.)

[17:56] <nothingmuch> i tried to convince him 2-3 times to join IRC

[17:56] <Juerd> audreyt: *mark*

[17:57] <pmichaud> it's the tree grammar engine... where PGE does pattern matching and processing of linear sequences of tokens, TGE is designed to do pattern matching, unification, and processing of tree structures

[17:57] <nothingmuch> and he almost convinced *me* that it's wiser for him to not join

[17:57] <nothingmuch> pmichaud: oh, jsut AG

[17:57] <Juerd> nothingmuch: Hah; for what reasons?

[17:57] <nothingmuch> but with some twists for dynamic languages

[17:57] <Juerd> pmichaud: Oooooh! That's like... a dream.

[17:57] <nothingmuch> Juerd: the archivability, his level of throughness, yadda yadda

[17:57] <nothingmuch> it was more his rhethorics that convinced me, i gues

[17:57] <nothingmuch> s

[17:58] <pmichaud> Juerd: yes, last summer we quickly realized that we really wanted a language for processing tree structures (and attribute grammars)

[17:58] <nothingmuch> pmichaud: could you try to pressure her to join #perl6?

[17:58] <nothingmuch> i have tons of thoughts on exactly that

[17:58] <nothingmuch> i thought the tree stuff was dead

[17:58] <nothingmuch> since I haven't heard of it since around YAPC::NA

[17:58] <pmichaud> not at all, it's been the "plan" since YAPC::NA

[17:59] <nothingmuch> right =)

[17:59] <nothingmuch> that's why she should join here

[17:59] <nothingmuch> her ideas could really help fglock et all with pX right now

[17:59] <pmichaud> I think allison's been pretty busy of late (she tends to stay pretty busy).  But I'll see what I can do

[17:59] <nothingmuch> err, lrep

[18:00] <nothingmuch> throw some buzzwords related to effort duplication

[18:00] <nothingmuch> and provide circumstantial evidence

[18:00] <nothingmuch> =)

[18:00] <pmichaud> we know we want to have a tree-transformation-engine available, I think we're struggling with finding a syntax that is "perlish" enough for what we're wanting to do

[18:00] <pmichaud> the stuff that allison is doing with punie is intended to explore the space a bit and figure out what we'd like it to look like

[18:00] <nothingmuch> see

[18:00] <nothingmuch> i didn't know that was punie's intent

[18:00] <nothingmuch> i think most people didn't

[18:01] <nothingmuch> we thought it was trying to test PGE, not TGE

[18:01] <pmichaud> not at all, I'm pretty comfortable with PGE :-)

[18:01] <nothingmuch> or at least this seems to be the general impression that most people get

[18:01] <nothingmuch> from what I'vve seen

[18:01] <pmichaud> PGE has plenty of tests and seems to work pretty well, although I'm ripping out the operator precedence parser today and updating it a bit

[18:01] *** bernhard joined
[18:02] <nothingmuch> pmichaud: does she hang out on #parrot?

[18:02] <nothingmuch> or is this just from cabal stuff?

[18:02] <pmichaud> nothingmuch: not frequently

[18:02] <pmichaud> nothingmuch: a lot of it was cabal, but the punie/tge development takes place publicly as part of the parrot svn

[18:03] <pmichaud> nothingmuch: there just hasn't been a lot of discussion on it either way, if only because it's so experimental and it takes a bit to work it out

[18:03] <pmichaud> although Coke on #parrot is currently working to implement APL on parrot based on PGE and TGE and Punie

[18:04] <nothingmuch> i forgot

[18:04] <nothingmuch> APL syntax is supported in Unicode, right?

[18:04] <pmichaud> nothingmuch: yes, I believe so.  I hope so, otherwise we won't get very far

[18:04] <pmichaud> :-)

[18:04] <nothingmuch> well, he could always port J instead

[18:04] <pmichaud> that's an excellent idea

[18:05] <nothingmuch> that would be easier to type, but similar to implement at least on the data futzing level

[18:05] <nothingmuch> lots of vectorizations and stuff

[18:05] <nothingmuch> i know someone from the python user group here in Israel that is an APL guy

[18:06] <nothingmuch> and he is interested in Perl stuf

[18:06] <nothingmuch> f

[18:06] <nothingmuch> i'll try to prod him into talking this over with Coke

[18:06] <pmichaud> that would be excellent

[18:06] <nothingmuch> because I suspect it will be useful to Perl 6

[18:06] <pmichaud> absolutely.

[18:06] <nothingmuch> he found replacements in Python for most of his APL loves

[18:06] <pmichaud> anyway, I saw the pugs commit about a?bg? and thought I'd check in here to see if I could clear anything up.  :-)

[18:07] <Juerd> pmichaud: Do you and allison realise how much the world will be shaken by this? :)

[18:07] <nothingmuch> Juerd: what is "this" ?

[18:07] <Juerd> A generic language for processing trees.

[18:07] *** FurnaceBoy_ joined
[18:08] <pmichaud> Juerd: I'm certain I don't realize it, but I think that tree processing would be mighty cool.  I think allison and @Larry have a better appreciation for it.

[18:08] * nothingmuch 's list of steal for tree stuff:

[18:08] <nothingmuch> AGs as roles (i tried to write up something like that)

[18:08] * ruoso thinks it's simpler to have different languages talking to each other than to try to have a single language that understands everything...

[18:08] <nothingmuch> XPath

[18:09] <nothingmuch> making sure hyper operators are useful for this stuff

[18:09] * ruoso thinks in a  P6SyntaxTree -> ParrotSyntaxTree converter

[18:09] <pmichaud> ruoso:  I agree entirely.  Perl is probably an example of that :-)

[18:09] <Juerd> ruoso: Count the number of minilanguages in Perl :)

[18:09] <nothingmuch> Juerd: 2?

[18:10] <pmichaud> perl 6 rules is one language, perl 6 is another, and we hopefully we can come up with a tree transformation language

[18:10] <ruoso> Juerd, such a mini-language should be able to convert to some existing syntax tree... like perl 6 syntax tree

[18:10] <ruoso> Juerd, after that, the standard translators will do the job

[18:10] <nothingmuch> ruoso, pmichaud: http://nothingmuch.woobling.org/perl6_comp/

[18:11] <Juerd> nothingmuch: Perl 5: regexes (with several minilanguages in them!), prototypes, formats, pod, meta comments, shebang, ...

[18:11] <nothingmuch> my biggest point is that the Perl 6 system needs to deal with more than one kind of tree

[18:11] <nothingmuch> prototypes?

[18:11] <Juerd> In regexes: []-charsets

[18:11] <Juerd> nothingmuch: ($$@)

[18:11] <nothingmuch> oh, those

[18:11] <pmichaud> nothingmuch: yes, I agree about dealing with more one kind of tree; that's my impression of what TGE is supposed to do

[18:11] <pmichaud> nothingmuch:  thanks for the talk slides -- I'll look at them later today

[18:11] <nothingmuch> ... that point continues:

[18:11] <pmichaud> right now I need to get back to my parser

[18:12] <nothingmuch> basically perl 5's biggest issue is that it splats the parse tree into an op tree, and is lossy in the process

[18:12] <ruoso> nothingmuch, where should I click?

[18:12] <nothingmuch> slides/start.html, i think

[18:12] <nothingmuch> it's s5

[18:12] <nothingmuch> that tends to piss firefox off

[18:12] <Juerd> nothingmuch: That's not the *biggest* issue :)

[18:12] <nothingmuch> Juerd: from an implementation standpoint i think it is

[18:12] <nothingmuch> not in the language level

[18:13] <nothingmuch> purely in perl(1) vs perl6(1)

[18:13] *** GeJ joined
[18:13] <pmichaud> the current plan (as I understand it) is:     source --pge-->  parsetree --tge-->  abstract syntax tree --tge--> opcode syntax tree --tge-->  parrot code

[18:13] <pmichaud> the second --tge--> step can target different backends

[18:14] * nothingmuch believes that ast should be two stage

[18:14] <Juerd> Ooh, annotated arrows :)

[18:14] <nothingmuch> one has language construct affinity, and the other has a sort of intermediate core language feel

[18:14] <pmichaud> nothingmuch: It may turn out to be that way

[18:14] <PerlJam> good afternoon #perl6 people

[18:14] <nothingmuch> from messing around with blondie my biggest mistake was confusing the two

[18:14] <Juerd> PerlJam: Hi.

[18:14] <nothingmuch> hi PerlJam

[18:14] <pmichaud> welcome, perljam

[18:15] <ruoso> PerlJam, hi

[18:15] <PerlJam> My timing looks good for interesting discussion  :)

[18:15] <PerlJam> Although, this *is* #perl6  :)

[18:15] <Juerd> PerlJam: Just admit you've been lurking all day... :)

[18:15] <pmichaud> PerlJam: alas, I'm on my way out, I think -- I only have 40 minutes to work on the parser before I have to go look at a house

[18:15] <Juerd> We should avoid this kind of metadiscussion, though, as metadiscussion often makes real discussion stall.

[18:15] * PerlJam cracks the whip over pmichaud's head

[18:16] <pmichaud> I'll be back online later after the house inspection

[18:16] <PerlJam> pmichaud: stop your IRCing and get to parsering. :)

[18:16] <nothingmuch> ciao

[18:16] <Juerd> Bye, pmichaud

[18:16] <PerlJam> pm: why are you looking at a house?

[18:16] <pmichaud> PerlJam: it's for paula's mom

[18:16] <nothingmuch> it's been a while since i posted this:

[18:16] <nothingmuch> http://nothingmuch.woobling.org/cute_moose.jpg

[18:16] <PerlJam> pmichaud: She moving up there?

[18:16] <nothingmuch> just to make sure everybody appreciates moose

[18:16] * Ara5n claws at his eyes

[18:17] <ruoso> nothingmuch, is there a way to jump through the transitions inside each slide?

[18:17] <nothingmuch> ruoso: sorry, it's ingy-themed regular spork

[18:17] <nothingmuch> ruoso: i dunno

[18:17] <nothingmuch> there's both start.html which is regular spork

[18:17] <nothingmuch> and s5.html which is s5

[18:17] <nothingmuch> which you may prefer

[18:17] <nothingmuch> (i do)

[18:18] <PerlJam> nothingmuch: I like slide #4 btw  :-)

[18:18] *** pmichaud left
[18:18] <nothingmuch> =)

[18:18] <ingy> elk

[18:18] <Limbic_Region> nothingmuch - being from maine and having actually been close enough to touch one (on several occassions) - I haven't ever seen a moose quite that cute

[18:19] <nothingmuch> Limbic_Region: =D

[18:19] <ruoso> nothingmuch, oh... much better...

[18:20] <nothingmuch> PerlJam: i think you're going to like slide 39

[18:20] <nothingmuch> everybody does

[18:20] <nothingmuch> ;-)

[18:20] <PerlJam> clicking my way there now.

[18:21] <Juerd> url?

[18:21] <nothingmuch> Juerd: scroll up a bit

[18:22] <Juerd> ok

[18:23] <PerlJam> nothingmuch: heh.

[18:25] <Juerd> Just for the record: I dislike slides that have subslides.

[18:25] <Juerd> (i.e. "continued" slides.)

[18:25] <PerlJam> Juerd: I think that's just a S5ism.

[18:25] <nothingmuch> Juerd: they could be takahashi instead

[18:25] <nothingmuch> they're takahashi flattenned into spork

[18:25] <nothingmuch> in terms of how it's presented the idea is the same

[18:25] <nothingmuch> (audrey brainwashed me over the first 2 days of the conf)

[18:25] <nothingmuch> (i wrote this the night before the talk, on the 3rd day)

[18:26] <nothingmuch> i didn't have time to learn a technology, but the general principal is the same

[18:26] <PerlJam> nothingmuch: I like slide #50 too

[18:26] <Juerd> PerlJam: It's not the tool, it's the result that I dislike.

[18:27] <Juerd> PerlJam: Many presentation programs can do this. Many presenters demand the feature.

[18:27] <nothingmuch> PerlJam: i prefer 51

[18:27] <nothingmuch> sorry

[18:27] <nothingmuch> resolved 50

[18:27] <nothingmuch> Juerd: oh

[18:28] <nothingmuch> Juerd: use s5.html, instead of start.html

[18:28] <nothingmuch> i don't like spork for exactly that reason

[18:28] <nothingmuch> it's too jumpy and flickery and slow

[18:28] *** rgs joined
[18:28] <nothingmuch> hola rgs

[18:28] <rgs> hi nothingmuch

[18:29] <PerlJam> I wonder if anyone has thought of exporting TGE and the liketo other languages much the same way we've heard about how parrot will be a universal backend for other languages.

[18:30] <PerlJam> I guess there would be the same social problems in doing so though.

[18:30] <Juerd> nothingmuch: ou

[18:30] <Juerd> s/u$/k/

[18:30] <nothingmuch> PerlJam: i think that question confuses the language with the impl

[18:30] <nothingmuch> the *engine* to run TGE should be portable

[18:31] <nothingmuch> the domain specific language is probably harder

[18:31] <nothingmuch> PGE is mostly an engine

[18:31] <nothingmuch> you could enjoy the wealth of PGE even with a different rule syntax

[18:32] <nothingmuch> in another language

[18:33] *** siosiosios joined
[18:33] * nothingmuch goes to melt his brain a bit

[18:33] <nothingmuch> wrists started hurting yesterday, they haven't in a long wihle

[18:33] <nothingmuch> i think i'm spending too much time typing lately

[18:34] <Juerd> nothingmuch: Using dvorak yet?

[18:34] <PerlJam> nothingmuch: develop that neural interface so that you don't have to type

[18:34] <Limbic_Region> nothingmuch - wrists sounds like CT and not RSI - could likely be addressed with an ergonomic keyboard and proper hand positioning

[18:35] <Juerd> Limbic_Region: RSI is one name for many things, including CT.

[18:36] <Juerd> Also, there is no way to diagnose this properly without actual testing.

[18:36] <nothingmuch> Juerd: no

[18:36] <Limbic_Region> Juerd - well, I will just have to disagree with you due to nit picking semantics

[18:36] <nothingmuch> Limbic_Region: i haven't been biking lately, that's all

[18:36] <nothingmuch> not enough time

[18:36] <nothingmuch> so my wrists have become weak

[18:36] <nothingmuch> on the other hand i don't hiave enough time because i spend too much on the computer

[18:37] * Limbic_Region designed a wrist band with a vial of conducting fluid that would close a circuit if the inclination or declination of your writst was beyond the recommended levels - training you to type properly

[18:37] <Juerd> nothingmuch: Dvorak, once you know it (and now might not be the right time to invest the time in learning) lets you type almost twice as much before the hurting starts.

[18:37] <Limbic_Region> won 1st place in the science fair

[18:37] <nothingmuch> Juerd: it's not normal... i can usually type for days on without hurting if i use proper posture

[18:37] <Juerd> Limbic_Region: Isn't a splint easier?

[18:37] <Limbic_Region> Juerd - you can get CT from little to no typing as it has very little to do with repetition - a necessity for RSI

[18:37] <nothingmuch> the "price" of learning dvorak has always been too high

[18:37] <nothingmuch> i start lagging behind with everything

[18:37] <nothingmuch> so i give up "just for a few minutes"

[18:38] <nothingmuch> and that becomes the rest of the day

[18:38] <Limbic_Region> no Juerd - it doesn't train you to do it properly so you are always dependent on it

[18:38] <nothingmuch> i can touch type dvorak very very slowly

[18:38] <Juerd> Limbic_Region: That's very different from the many things I've read...

[18:38] <PerlJam> I must not be typing enough, as I've never had any difiiculty (other than that caused by lack of brain power :-)

[18:38] <nothingmuch> but now my muscles are kinda flabby

[18:38] *** FurnaceBoy joined
[18:38] <Limbic_Region> Juerd - carpal tunnel is called that because of the bones that are involved

[18:38] <Juerd> nothingmuch: dvorak.nl, one hour per day, reasonable speed within 2 weeks or money back ;)

[18:38] <nothingmuch> PerlJam: i normally don't either

[18:39] <nothingmuch> well

[18:39] <nothingmuch> i'll take back my money even if i succeed

[18:39] <nothingmuch> you won't notice

[18:39] <nothingmuch> but an hour a day is tough

[18:39] <nothingmuch> right now

[18:39] <Juerd> Yes

[18:39] <nothingmuch> on the 12th of april i'll be unemployed though

[18:39] <nothingmuch> that's going on the todo list ;-)

[18:39] <Juerd> That's why I said that right now is probably not a good time to start learning something that requires extra typing while learning.

[18:39] *** elmex joined
[18:40] <nothingmuch> ooh, that doesn't bug me

[18:40] <Juerd> Limbic_Region: Any url re your device?

[18:40] <nothingmuch> i've been typing since 8 am today

[18:40] <nothingmuch> with only a 30 minute lunch break

[18:40] <nothingmuch> and as I said i'm out of shape

[18:40] <nothingmuch> and it's starting to feel tired

[18:40] <nothingmuch> not hurty

[18:40] <Limbic_Region> Juerd - no, the internet wasn't exactly what it is now back in 92

[18:40] <Juerd> Limbic_Region: I hoped you had pictures online

[18:40] <Limbic_Region> Juerd - I still have the prototype (never attempted to market it) up in Maine

[18:41] <Limbic_Region> I will be there in June - perhaps I will post some pics

[18:41] <Juerd> I'd like that

[18:41] <nothingmuch> Juerd: what do i do on dvorak.nl?

[18:41] <Juerd> nothingmuch: Start the course

[18:41] <Limbic_Region> the problem is that learning to hold your hands right only helps prevent 1 kind of injury

[18:41] <nothingmuch> oh

[18:41] <nothingmuch> that's pretty well hidden

[18:42] <Juerd> nothingmuch: It's a no-nonsense typing tutor based on lots of theory that I should some time explain somewhere.

[18:42] <Juerd> Though you'll be able to figure out the theory from the results, I guess :)

[18:42] <Limbic_Region> the gap of the carpal tunnel bones is cut off by bending your wrist too far one way or the other pinching stuff - getting inflamed and what not - it doesn't help the problems that result from just too much of something

[18:42] <nothingmuch> hehe

[18:42] <nothingmuch> i'll try

[18:43] * nothingmuch 's wrists are almost streight when typing

[18:45] * Limbic_Region 's pain with typing are on the top of his hands (opposite side of palm) and occassionally in the joints of his fingers

[18:45] * Limbic_Region checks out the course as well

[18:47] <nothingmuch> Juerd: i think it's working out pretty well

[18:47] <nothingmuch> (had to try)

[18:48] *** KingDiamond joined
[18:51] * Limbic_Region is pretty amazed that he is typing homerow words without looking after only a few minutes

[18:53] <Limbic_Region> Juerd - do you find it difficult switching between qwerty/dvorak or do you just not bother?

[18:54] *** qu1j0t3 joined
[18:54] * nothingmuch is at 88/200

[18:54] <nothingmuch> with relatively low errors

[18:55] * nothingmuch was waiting for testes to show up ;-)

[18:58] * nothingmuch got the stay on home row stuff

[18:58] <nothingmuch> but not the fingers

[19:01] <svnbot6> r9704 | ruoso++ | one more failing test to PCR... capture is not working as expected...

[19:01] <Limbic_Region> I don't remember learning to type using the qwerty keyboard to be quite this easy and would have thought learning a new layout after qwerty would have been even more difficult

[19:01] <ruoso> fglock, please take a look at this new test I added to PCR...

[19:06] <theorbtwo> I think that's in part because most typing tutor programs I've seen suck.

[19:06] <theorbtwo> For example, they don't let you backspace, much less go back.

[19:06] <Ara5n> imo CTS (or RSI or whatever you like to call it) is a whole lot more with your back posture & sitting posture than wrist angle

[19:07] <nothingmuch> Ara5n: that's true

[19:08] <nothingmuch> you need to sit right for your wrists to be OK

[19:08] <nothingmuch> elbows above desk is the most important thing for me

[19:08] <nothingmuch> and i have a hard time with that at $job

[19:08] <nothingmuch> the chair doesn't go up high enough

[19:08] * Limbic_Region just came across testes

[19:08] <obra> Ara5n: are you a doctor?

[19:10] * obra gets twitchy when people give "opinions" about what causes RSI in others.

[19:11] <fglock> back - ruoso: looking

[19:11] <ruoso> obra, IANAD, but there are some common mistakes that are known to cause RSI

[19:11] * Limbic_Region statements WRT CT (not RSI) are after extensive research albeit 12+ years ago

[19:11] <obra> ruoso: sure. listing off things that are known to cause issues is different than saying that wrist angle isn't a cause ;)

[19:12] <ruoso> :)

[19:12] <Limbic_Region> CT is specific to the wrists and specifically to a set of bones and so there are specific things that cause problems there - I do not pretend to understand about RSI and other parts of the body

[19:12] <Limbic_Region> though IANAD either

[19:12] <ruoso> btw, wrist angle is one of the known mistakes...

[19:13] *** nnunley joined
[19:13] *** hcarty joined
[19:13] * Limbic_Region is confused as to why teenage boys don't develop some problems with RSI shortly after puberty

[19:13] * Limbic_Region ducks

[19:14] <ruoso> Limbic_Region, heh

[19:16] <fglock> ruoso, pmichaud - thanks! - fixing...

[19:23] <Juerd> Limbic_Region: Hm, I did... :P

[19:23] <svnbot6> r9705 | fglock++ | pX/.../PCR - implemented \w,\W; fixed 1 test

[19:23] * nothingmuch gives his friend a ride

[19:23] <nothingmuch> Juerd: good job

[19:24] <Juerd> nothingmuch: Ehhhhh...

[19:24] <nothingmuch> Juerd: i doubt you did because of what Limbic_Region was joking about

[19:24] <nothingmuch> i mean, in the dvorak tutorial

[19:24] <nothingmuch> not getting RSI or masturbating

[19:24] <Juerd> "nothingmuch gives his friend a ride" in the context of masturbation is, eh, funny :)

[19:24] * nothingmuch does not ride his friends

[19:24] <nothingmuch> ;-)

[19:25] <Juerd> Re "good job" - thank you

[19:25] <Juerd> Re what I got RSI from... I did type much, much more than masturbate.

[19:26] <Juerd> Like, all day.

[19:26] <fglock> ruoso: $() in /some (text)/ is "some text"; $0() is "text"

[19:26] <fglock> but PCR $() is wrong

[19:27] * ruoso thought $() was the capture and $/ the match

[19:28] <Juerd> And that's why %(*^&#^ is confusing: it's highly undescriptive.

[19:28] <fglock> ruoso: the match is the object that contains the whole data structure; the capture is "everything in the string that was not rejected", unless you have a return block

[19:29] <ruoso> fglock, hmmm... got it

[19:30] <ruoso> Juerd, isn't it supposed to exist some aliases to these? or only with "use English"

[19:31] <ruoso> fglock, so in (<subrule>), if the subrule returns a hashref, then $() contains "some",$hashref

[19:31] <ruoso> s/\(\<s/some\(\<s/

[19:32] <ruoso> or just $hashref?

[19:32] <fglock> ruoso: $0 contains a hashref; $() contains the substring that was matched: "sometext"

[19:33] <fglock> ruoso: no - $0() contains a hashref

[19:33] <fglock> $0 contains a match object

[19:34] <ruoso> fglock, so... if I capture (<@terms>) and each element of @terms returns something different what happens?

[19:35] <fglock> ~$0 eq "text"; ref($0()) eq "Hash"; ?$0 == bool::true

[19:35] <fglock> ruoso: you get an array of different things

[19:35] <ruoso> fglock, so I must use $0() to get the arrayref

[19:35] <ruoso> right?

[19:36] <fglock> $0() is an arrayref

[19:37] <fglock> ruoso: see Pugs::Runtime::Match.pm

[19:37] * ruoso thinks he understood...

[19:44] <svnbot6> r9706 | fglock++ | pX//PCR - more tests; $() may be broken - ruoso++

[19:50] <fglock> ruoso: fixed

[19:52] <fglock> matches are taking about 20% more time because of the a?bg? fix

[19:52] <svnbot6> r9707 | fglock++ | pX//PCR - fixed $()

[19:55] <ruoso> fglock, $0() is written as $_[0][0]() at this moment... is it?

[19:59] <fglock> ruoso: yes - I'm planning some king of Inheritance trick to let you redefine the closure parser - subclassing the emitter is an easy way, but it looks like rule defining a 'rxclosure:<{ }> { ... }' is more perl6ish - so I'm not sure how to do it yet

[20:00] <ruoso> fglock, in a later stage, the closures needs to be parsed as regular perl 6 code

[20:01] <ruoso> at least for lrep

[20:01] <fglock> ruoso: currently, the rule AST contains the closure as an unparsed string - I'm not sure at what stage the closure should be parsed/emitted

[20:02] <ruoso> it can be emitted at the same time the rule is emitted

[20:02] <fglock> nothingmuch would know that

[20:02] <ruoso> the rule AST should contain the closure as Perl 6 AST in lrep

[20:03] <ruoso> then the emitted code will contain the closure already

[20:04] <fglock> ruoso: if we had a Pugs::Compiler::Perl6 and Pugs::Emitter::Perl6::Perl5, it would be easier

[20:05] <ruoso> fglock, that's what lrep is supposed to be

[20:06] <fglock> ruoso: how about refactoring lrep into PCP6 :)

[20:06] <ruoso> fglock, we need to make it work first :)

[20:06] <ruoso> fglock, but besides that, it's just a rename

[20:06] <ruoso> fglock, it's already modular

[20:07] *** justatheory joined
[20:07] <ruoso> Grammar::Perl6 and Emitter::Perl5 is what you mean

[20:07] <fglock> ruoso: the lrep in PCR-dev.tar.gz can be used to migrate code to the new engine

[20:07] <ruoso> fglock, I'm already migrating to the new engine

[20:08] <ruoso> fglock, I'm near to finishing it

[20:08] <ruoso> fglock, it's only missing the capture thing to be fixed in Perl6.pm

[20:08] <fglock> Pugs::Grammar::Perl6, Pugs::Emitter::Perl6::Perl5 - the emitter gets the 'from' and 'to' languages

[20:08] <ruoso> fglock, and the push @list, \&rule thing

[20:08] <ruoso> fglock, I mean, Grammar::Perl6 and Emitter::Perl5 is the packages that already exists in lrep

[20:09] <fglock> ok

[20:16] <svnbot6> r9708 | fglock++ | pX//PCR - added a test for \D (fail)

[20:18] <fglock> another weird bug - \d works, \D doesn't

[20:20] <GeJ> whereis audrey currently? back in .tw or in .jp?

[20:20] <GeJ> did she went back to $work?

[20:20] <fglock> heh - the test was wrong (again)

[20:21] <ruoso> fglock, in /(<subrule1>)(<subrule2>)/ how can I match all the captures at once?

[20:22] <ruoso> s/match/get/

[20:22] <svnbot6> r9709 | fglock++ | pX//PCR - fixed the \D test

[20:23] <fglock> ruoso: $/ (or $_[0] in p5) returns the whole match - @$/ is the array of unnamed captures

[20:24] <ruoso> fglock, the same as $() in the old lrep/PCR...

[20:24] <fglock> ruoso: @{$_[0]} or %{$_[0]} or $_[0]

[20:26] *** kanru joined
[20:27] <ruoso> fglock, as a hash to get the named captures?

[20:28] <fglock> ruoso: yes

[20:31] * ruoso thinks he has the tools to finish the lrep pcr transition...

[20:39] <fglock> ruoso:  you asked if Pugs::Runtime::Rule was necessary in the emitted code - it implements backtracking, and variable lookups

[20:43] * ruoso trying to compile Perl6.p6

[20:44] <ruoso> it matchs, but still didn't emit any code...

[20:44] * ruoso keeps working

[20:45] *** integral is now known as ntgrl

[20:47] <ruoso> $match->{capture} contains the whole source code, instead of the AST

[20:47] <ruoso> it must be because the 'grammar' rule doesn't have a esplicit return

[20:48] <fglock> ruoso: yes - that's the default capture

[20:48] <ruoso> I'm getting smart :)

[20:49] <fglock> :)

[20:50] <ruoso> fglock, I need help writing the perl 5 code to the return block

[20:50] <fglock> ok

[20:51] <ruoso> fglock, please check Grammar/Perl6.pm in lrep-compiler

[20:51] <ruoso> I recently committed

[20:52] <ruoso> fglock, the 'grammar' rule should return the captures

[20:52] <svnbot6> r9710 | ruoso++ | near working...

[20:52] *** hexmode joined
[20:53] <fglock> you mean Perl6.p6?

[20:53] *** whiteg joined
[20:53] <ruoso> fglock, Perl6.pm is still hand-written...

[20:53] <ruoso> fglock, as lrep is not working

[20:54] <ruoso> fglock, and I know how Perl6.p6 should looks like

[20:54] <ruoso> fglock, the problem is that I must write the equivalent Perl 5 code to be able to re-compile it

[20:55] *** dduncan joined
[20:56] <fglock> ruoso: the code is ok - but quantified captures are not implemented in Match.pm yet - the data is there, but the accessor was not written

[20:56] <ruoso> fglock, but it still needs the return-magic on the 'grammar' rule

[20:57] <ruoso> fglock, or else the capture won't contain the AST

[20:58] <fglock> ruoso: you can use $$match to get the raw data

[20:58] <ruoso> fglock, hmmm

[20:59] <fglock> ruoso: or fix Match.pm :)

[20:59] <ruoso> fglock, not a scalar

[21:00] <ruoso> fglock, $$match didn't work

[21:01] <fglock> ruoso: there is a problem - one sec..

[21:02] *** larsen joined
[21:06] <fglock> ruoso: Perl6.pm uses unboxed matches - you need P:R:Match->new( $match ) to make a Match

[21:07] <fglock> to create a new rule method in PCR you use: *rule = Pugs::Compiler::Rule->compile( '((.).).' )->code;

[21:07] *** FurnaceBoy joined
[21:08] <fglock> the code() method does the trick

[21:16] *** FurnaceBoy_ joined
[21:17] <fglock> ruoso: maybe code() should be called get_method()

[21:18] <fglock> or as_method()

[21:20] <ruoso> fglock, it makes sense

[21:25] <svnbot6> r9711 | fglock++ | pX//PCR - added \s, \S

[21:29] *** qu1j0t3 joined
[21:32] <svnbot6> r9712 | fglock++ | pX//PCR - TODO, more 'not implemented' messages

[21:32] <svnbot6> r9711 | fglock++ | pX//PCR - added \s, \S

[21:34] *** FurnaceBoy joined
[21:43] *** hcarty left
[21:49] *** FurnaceBoy left
[21:53] *** Grrrr joined
[22:16] *** pjcj joined
[22:17] *** ruz joined
[22:19] *** Limbic_Region joined
[22:21] *** KingDiamond joined
[22:22] *** stevan_ joined
[22:33] <ruoso> fglock, ping

[22:35] <fglock> ruoso: pong

[22:36] <ruoso> fglock, the rules compiled by PCR are very similar to the one I'm trying to use

[22:37] <ruoso> fglock, what did you mean by unboxed

[22:37] <fglock> ruoso: see the PCR pod - you need a wrapper to make the rule behave as a p5 method

[22:38] <fglock> ruoso: see PCR->code() implementation - you can use that

[22:40] *** ntgrl is now known as integral

[22:43] <fglock> ruoso: I'll look for food

[22:44] *** fglock left
[22:50] *** nothingmuch joined
[22:58] *** justatheory joined
[22:59] *** siosiosios joined
[23:01] *** justatheory joined
[23:06] *** FurnaceBoy joined
[23:07] *** jisom joined
[23:20] *** ruoso left
[23:34] <nothingmuch> seen liz?

[23:37] <Juerd> I saw her two weeks ago, irl :)

[23:41] <nothingmuch> Juerd: =)

[23:41] <nothingmuch> doesn't really help me ;-)

[23:41] * nothingmuch keeps forgetting there's no seen bot

[23:41] <nothingmuch> gugod: we want jabbot!

[23:41] <nothingmuch> gugod: jabbot is dead, long live jabbot!

[23:41] * nothingmuch is happy... bug opened in RT, i closed it in 10 minutes

[23:42] *** GabrielVieira joined
[23:43] <nothingmuch> shit, it's almost 2 am again

[23:44] <nothingmuch> *sigh*

[23:44] * nothingmuch will never learn

[23:46] <Juerd> Same here

