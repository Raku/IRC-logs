[00:01] *** monkey_ joined
[00:01] *** fglock joined
[00:03] *** dolmen joined
[00:10] <svnbot6> r11719 | clkao++ | When a class is declared, initialise the bareword.

[00:10] <clkao> i wonder if we should box Bool. this seems overkill. but $foo = Bool::true; $foo.ref should work

[00:14] *** rbrown_ is now known as rodrickbrown

[00:15] <robkinyon> nothingmuch: pong

[00:16] <svnbot6> r11720 | clkao++ | Scope class declaration.

[00:18] <svnbot6> r11721 | clkao++ | When install_local, ignore redefine warnings.

[00:24] *** kanru joined
[00:26] *** daxim_ joined
[00:27] <svnbot6> r11722 | fglock++ | PCR - implemented <!x> and <[a..z]> in Ratchet.pm

[00:30] <svnbot6> r11723 | fglock++ | v6 - implemented <!x> in P6Rule.pm

[00:33] <clkao> fglock!

[00:33] <clkao> fglock: i think the p6rule metasyntax is a bit dodgy

[00:34] <clkao> fglock: see t/rules/from_perl6_rules/der_grammer.t

[00:39] <fglock> clkao: looking

[00:42] <svnbot6> r11724 | clkao++ | make both 'class Foo {}' and 'class Foo;' work.

[00:42] <clkao> it looks like infinite loop matching for the metasynax rule

[00:42] <clkao> (with my limited rule knowledge)

[00:43] <fglock> clkao: yes, I'm working on the infinite loops in the grammar

[00:43] <clkao> excellent

[00:44] <clkao> fglock: i am adding a bunch of working tests to manifest as regression guard

[00:44] <fglock> ok!

[00:45] <fglock> I'm working on making perl6-in-perl6 compilable

[00:50] <fglock> 'der_grammar.t' ends in a parsing error - it's not looping here

[00:50] <clkao> right, it doesn like rule Foo { D <eh> F }

[00:51] <clkao> fglock: for expression  matching term{}, why is the stuff between {} parsed as bare_block? can i require a term

[00:52] <fglock> " rule { D <eh> F } " parses ok

[00:53] <fglock> maybe reinstall PCR?

[00:53] *** hikozaemon joined
[00:53] <clkao> oh ok, it's from Term.pm

[00:54] <clkao> the '{' rule.... it needs to be just a term rather than statements when it's actually %something{}

[00:55] <clkao> fglock: right it does parse now. not this afternoon

[00:56] <fglock> clkao: "postcircumfix:{}" is parsed at Expression.pm #168

[00:58] <fglock> the 3 ast formats there are for these constructs: .{} / $var.{} / $var{}

[01:00] <svnbot6> r11725 | clkao++ | correct test count.

[01:00] <fglock> sorry - bad english - "there are 3 ast formats, which match each of these constructs"

[01:02] <clkao> fglock: yes, and it's using the one from term.pm.

[01:02] <clkao> fglock: see " perl -Ilib lib/v6.pm --compile-only -e '%hash1{"one"} = 5'"

[01:08] <clkao> ggrr, is it bool or Bool?

[01:08] <fglock> bool is unboxed, Bool is object

[01:09] <clkao> RAARAH! hate

[01:12] <svnbot6> r11726 | fglock++ | PCR - crude implementation of return block from p6 ast in Ratchet.pm

[01:12] <fglock> '0.true' is Bool false (method call); 'true 0' is bool false (expression operation)

[01:14] <clkao> fglock: mmm can you help me fix $foo{"bar"} ?

[01:15] <svnbot6> r11727 | clkao++ | * Include tests that pass to MANIFEST.

[01:15] <svnbot6> r11727 | clkao++ | * Make Class Foo { sub something } declare method in right namespace.

[01:15] <svnbot6> r11727 | clkao++ | * Class Bool in Prelude.

[01:17] *** bsb left
[01:17] <fglock> clkao: one sec

[01:24] <svnbot6> r11728 | clkao++ | Don't emit empty block for class Foo {}, which causes a warning.

[01:28] <fglock> clkao: fixed

[01:30] <svnbot6> r11729 | fglock++ | v6 - emitter: %a{"key"}

[01:31] <glasser> nothingmuch, clkao: so, it looks like app::cli already has the help stuff factored out

[01:31] <glasser> it's just not 100% obvious how to use it. (also, svk doesn't actually use the factored-out version, maybe they need to be merged)

[01:33] <clkao> fglock++

[01:34] <clkao> (!)

[01:34] <clkao> that reminds me, glasser, did you factor out the help stuff yourself?

[01:34] <svnbot6> r11730 | clkao++ | Parse "rx:perl{\s}".

[01:38] <clkao> fglock: gah! you are just emitting the statement as expr

[01:39] <glasser> it looks like alexmv did or something back in december

[01:39] <glasser> but svk was never updated to ues it

[01:40] <fglock> clkao: committing one more change...

[01:40] <svnbot6> r11731 | fglock++ | v6 - '%a{1;2,3}' compiles to '$a{1}{2,3}'

[01:41] <clkao> whoot!

[01:43] <clkao> fglock: 02-test-pm/1-basic now parsed

[01:43] <svnbot6> r11732 | clkao++ | add gt and lt infix operators.

[01:43] <clkao> fglock: i need to make foo => $bar a pair.

[01:43] <clkao> munging the infix => is a bit annoying :/

[01:44] *** SubStack joined
[01:45] *** rafl joined
[01:45] *** justatheory joined
[01:46] *** Bit-Man joined
[01:46] <fglock> clkao: you mean emitting {foo=>$bar} ? (a hash ref)

[01:48] <clkao> fglock: i wanted it to be internally as a pair. maybe not.

[01:49] *** dduncan joined
[01:49] <dduncan> greetings to those of you at OSCON

[01:49] <dduncan> I am in the convention center near the registration booths

[01:49] <dduncan> if you're in town, lets meet

[01:50] <fglock> I'm in the couch near the TV

[01:50] <dduncan> I don't see a TV ... what room is that near?

[01:50] <fglock> at home :)

[01:51] <dduncan> pfft

[01:52] <fglock> clkao: you can add '=>' to 'sub infix' in Perl5.pm #786 and see what it breaks (or fixes)

[02:04] <svnbot6> r11733 | fglock++ | v6 - prefix:<?>

[02:04] <svnbot6> r11734 | fglock++ | oops

[02:04] <svnbot6> r11735 | clkao++ | Cleanup the infix op table a bit for readability.

[02:04] *** mjk joined
[02:08] <fglock> bbiab &

[02:13] <svnbot6> r11736 | clkao++ | More infix table cleanups.

[02:16] <svnbot6> r11737 | clkao++ | Oops, bring infix:{=>} back.

[02:17] *** Jedai joined
[02:18] <dduncan> audreyt, please post here and say when you arrive in Portland and/or the convention center ... I'll backlog

[02:21] <svnbot6> r11738 | clkao++ | Make infix:{=>} work as named captures.

[02:30] <svnbot6> r11739 | clkao++ | Really fix the class {} scope.

[02:45] *** tokuhirom joined
[02:48] <svnbot6> r11740 | clkao++ | misc fixes for 02-test-pm/1-basic.t

[02:48] <svnbot6> r11741 | clkao++ | Allow binding %b to $a

[02:52] *** ruoso joined
[02:55] *** xinming joined
[02:57] *** buubot joined
[03:01] *** buubot joined
[03:34] <svnbot6> r11742 | clkao++ | Kill duplicated op.

[03:37] <clkao> Preprocessing library Pugs-6.2.12...

[03:37] <clkao> Setup: can't find source for Pugs.AST.Internals.Instances in ["src"]

[03:37] <clkao> Build failed: 256 at util/build_pugs.pl line 156.

[03:37] <svnbot6> r11743 | clkao++ | Mark the failing test as todo.

[03:37] <svnbot6> r11744 | clkao++ | Support $?POSITION (and $?CALLER::POSITION), so Test.pm now reports

[03:37] <svnbot6> r11744 | clkao++ | caller for failed tests.

[03:39] *** fglock joined
[03:46] <svnbot6> r11745 | fglock++ | PCR - fixed return blocks in Ratchet.pm + v6.pm

[03:46] *** buubot joined
[03:46] <ruoso> fglock, insonia?

[03:47] <fglock> ruoso: last commit before going to bed :)

[03:48] *** buubot joined
[03:48] <clkao> why is -rule now using -perl6 ?

[03:48] * clkao discovers it's 5am

[03:48] <ruoso> fglock, me too... but on my monography... I'll be presenting it friday morning

[03:49] <fglock> clkao: -rule ?

[03:49] <fglock> ruoso: congratulations!

[03:49] <ruoso> fglock, :)

[03:50] <clkao> fglock: the last change

[03:53] <fglock> clkao: if v6.pm is loaded, then PCR can now compile the code inside closures using v6

[03:54] <clkao> ok..

[03:54] <fglock> try "--compile-only" with ' token xxx { a { return ~$/ } } '

[03:54] <clkao> somehow i have the impression that match object and regex are properly wrapped in v6. but it doesn't seem so

[03:54] <svnbot6> r11746 | clkao++ | misc builtins.

[03:55] <clkao> whoot

[03:57] <fglock> &

[03:57] *** fglock left
[04:06] *** Eidolos joined
[04:13] <svnbot6> r11747 | clkao++ | =:= (kind of)

[04:14] *** buubot joined
[04:18] <clkao> 680 tests pass ;)

[04:18] * clkao &

[04:27] *** mako132 joined
[04:34] <svnbot6> r11748 | clkao++ | Add a bunch of passing tests.

[04:34] *** ptty joined
[04:40] *** buubot joined
[04:41] *** traecer joined
[04:59] *** bsb joined
[05:21] *** Aankhen`` joined
[05:27] *** agent joined
[05:28] <agent> ?eval [\+] 1,2,3

[05:28] <evalbot_11748> (1, 3, 6)

[05:30] <agent> ?eval [+] 1,2,3

[05:30] <evalbot_11748> 6

[05:31] *** sysread joined
[05:36] *** [particle] joined
[05:37] <gaal> agent: [] is the last element in [\]

[06:02] *** agentzh joined
[06:13] *** BooK_ joined
[06:39] *** xinming joined
[06:47] *** SubStack joined
[06:58] *** iblechbot joined
[07:32] *** hugues23 joined
[07:41] *** buetow joined
[07:53] *** elmex joined
[07:57] *** Aankh|Clone joined
[07:58] *** xern joined
[08:06] <gaal> search.cpan.org is b0rked. anyone here who can fix it?

[08:07] <gaal> the dist pages show up fine but browsing gives a 403 Forbidden

[08:11] *** nekokak joined
[08:22] *** Aankh|Clone is now known as Aankhen``

[08:23] *** avar joined
[08:26] *** ludan joined
[08:58] *** Aankh|Clone joined
[09:03] *** revision17_ joined
[09:05] *** z3ndrag0n joined
[09:05] *** daxim_ is now known as daxim

[09:29] *** Aankh|Clone is now known as Aankhen``

[09:41] *** Aankh|Clone joined
[09:43] *** rindolf joined
[09:44] <rindolf> Hi all! How do I make a class defined in PerlXS inherit from a different PerlXS class?

[09:45] <broquaint> Set @ISA.

[09:45] <rindolf> broquaint: I tried using use base 'GD'.

[09:45] <rindolf> broquaint: but maybe it's wrong.

[09:45] <rindolf> Let me try it with @ISA.

[09:47] <rindolf> I'm getting: <<< Can't locate auto/GD/PHPFilter/new.al in @INC >>>

[09:51] <broquaint> Where are you setting @ISA?

[09:52] <rindolf> broquaint: in the .pm file.

[09:52] <rindolf> broquaint: http://eskimo.shlomifish.org/Files/files/code/perl/gd-phpfilter/

[09:52] <lambdabot> Title: Index of /Files/files/code/perl/gd-phpfilter

[10:00] <rindolf> broquaint: how can a PerlXS class inherit from a different PerlXS class.

[10:01] <rindolf> use GD; use vars qw(@ISA); @ISA=(qw(GD)); in the .pm does not seem to work.

[10:01] <rindolf> I wonder where I can find an example for it.

[10:01] <rindolf> Google returns junk http://www.google.com/search?q=perl%20xs%20%22base%20class%22

[10:01] <lambdabot> Title: perl xs &quot;base class&quot; - Google Search

[10:02] <broquaint> Look around the Gtk2 distribution for some clues (I couldn't see anything obvious though).

[10:03] <rindolf> broquaint: I did that, but could not find anything.

[10:03] <rindolf> I wish I was not a persona non grata on irc.perl.org

[10:04] <broquaint> I think the answer may lie in Glib ...

[10:05] <rindolf> broquaint: OK.

[10:06] <broquaint> Oh, I should've just voiced my first thoughts - set @ISA in XS.

[10:06] <broquaint> See. GType.xs in the Glib distro.

[10:06] <rindolf> Maybe I need require instead of use.

[10:07] <rindolf> Oh wait, I didn't define new().

[10:07] <rindolf> But GD.pm has new.

[10:09] *** Jedai joined
[10:09] <broquaint> Does it work when you set @ISA in XS?

[10:37] *** agentzh joined
[10:40] *** tokuhirom is now known as toku_away

[10:49] *** Aankhen`` joined
[11:17] *** bernhard joined
[11:18] *** elmex joined
[11:23] *** iblechbot joined
[11:25] *** f0rth joined
[11:26] *** f0rth joined
[11:31] *** f0rth joined
[11:49] *** Aankh|Clone joined
[12:09] *** chris2 joined
[12:10] *** traecer left
[12:12] *** wesley joined
[12:13] *** bpphillips joined
[12:22] *** szbalint joined
[12:23] *** Aankh|Clone is now known as Aankhen``

[12:39] *** mauke_ joined
[12:51] *** Aankh|Clone joined
[12:53] *** f0rth joined
[12:53] *** mauke_ is now known as mauke

[13:22] <svnbot6> r11749 | fglock++ | v6 - long lines and deep blocks are better formatted

[13:28] *** fglock joined
[13:56] *** FurnaceBoy joined
[14:06] *** frederico joined
[14:23] *** [particle] joined
[14:29] *** vel joined
[14:47] <svnbot6> r11750 | gaal++ | * DrIFT.Perl6Class - add 'MooseClass' to express Hs structures as

[14:47] <svnbot6> r11750 | gaal++ |   Perl 5 classes that use Moose.pm

[14:47] <svnbot6> r11750 | gaal++ | * Use the pretty printing library for nicer code

[14:47] <svnbot6> r11750 | gaal++ | * CapInternals - derive MooseClass

[14:47] <svnbot6> r11750 | gaal++ | * misc/pX/gaal/* - demo code for showing Moose schemas

[14:47] <svnbot6> r11750 | gaal++ | * RRegex.PCRE - fix warning, I hope

[14:48] <gaal> anyone with a fast machine mind checking I didn't break the build?

[14:50] <clkao> i think it was already broken last night

[14:51] *** eal joined
[14:51] <gaal> It was fixed last night :)

[14:51] <gaal> a few times :)

[14:51] <clkao> configure: No greencard found

[14:51] <clkao> Preprocessing library Pugs-6.2.12...

[14:51] <clkao> Setup: can't find source for Pugs.AST.Internals.Instances in ["src"]

[14:52] <clkao> bizzare, it's somehow deleted for me

[14:52] <gaal> eh? svk up

[14:52] * clkao svk revert

[14:54] *** Termy joined
[14:55] <gaal> better now?

[14:56] *** coumbes joined
[14:57] <gaal> anyway, fglock, clkao, if you build misc/pX/gaal/CITest now and run it you get a dump concatenating perl 6 and perl 5 moose code of the new ast, if that's useful to you.

[14:58] <gaal> home &

[15:02] *** cjeris joined
[15:06] *** justatheory joined
[15:10] *** coumbes joined
[15:21] *** hexmode joined
[15:22] <pasteling> "gaal" at 192.115.25.249 pasted "New AST, rendered in Moose" (1297 lines, 19K) at http://sial.org/pbot/18603

[15:22] <fglock> gaal: looking

[15:22] <svnbot6> r11751 | fglock++ | * perl6-in-perl6 - lib/v6/Grammar/Native.pm compiles and loads without warnings using v6.pm

[15:22] <svnbot6> r11751 | fglock++ | - added v6/v6-Compiler/lib/v6/AST/Native.pm

[15:22] <svnbot6> r11751 | fglock++ | - some fixes in Perl5 emitters (calling subroutines in v6 namespace is a syntax error)

[15:22] <gaal> brb, shower&

[15:23] <clkao> fglock! 680 pass!

[15:24] <fglock> clkao: wow!

[15:24] <clkao> also test.pm reports what line the failure comes from noiw

[15:24] <clkao> fglock: do you want to make t/rules/ pass a bit for the current v6 ?

[15:25] <fglock> clkao: last commit means we are close to start using perl6-in-perl6 grammar and AST

[15:26] *** agentzh joined
[15:27] <fglock> clkao: I'll look t/rules after lunch

[15:27] <clkao> how close? ;)

[15:27] <clkao> great, i should think about food this time

[15:27] <fglock> very :)

[15:28] <clkao> also i have a script to pull working test files to manifest now

[15:28] <fglock> v6.pm can compile and load the code, so it's just a matter of translating what we already have

[15:28] <fglock> from perl5/parrot/haskell to plain perl6

[15:30] <clkao> is the ast/native using what gaal's generating?

[15:30] <fglock> clkao: 'setup_class' in Perl6.pm reports 'redefined subs' - is Moose already doing the Class-name declarations?

[15:31] <clkao> fglock: i don't think so. mm. i think redefined subs are data::bind issue. which is fixe

[15:31] <fglock> clkao: not yet

[15:31] <clkao> d

[15:31] <clkao> setup class sets up barewords like Str

[15:31] <fglock> ok, I'll reinstall data::bind

[15:31] <clkao> so they can be used for $foo.ref eq Str

[15:31] <gaal> clkao++!

[15:31] <clkao> i hope you can compile ;)

[15:32] <clkao> lots of fixes in data::bind as well

[15:32] <clkao> might worth do another v6 release

[15:32] <clkao> but i need to take care of svk a bit today ;)

[15:33] <fglock> clkao: is the new data::bind released?

[15:33] <clkao> fglock: no

[15:34] <fglock> gaal: what is the base class/role for an AST node? does it contains line numbers, for example?

[15:35] *** aufrank joined
[15:35] <scw> fglock: (about r11722) when is Emitter::Perl5::Ratchet::negate called?

[15:35] <gaal> fglock: I don't grok how position and context are represented yet in fullness

[15:36] <gaal> fwiw, I do understand pragmas

[15:36] <gaal> as for base class, well, look at CompUnit

[15:36] <fglock> scw: it needs a patch to the grammar - see P6Rule.pm in Pugs-Compiler-Perl6/lib/Grammar

[15:36] * xerox pokes gaal 

[15:37] * gaal peeks at xerox 

[15:37] <gaal> eh, I deleted compunit :)

[15:37] <gaal> but it will be: a version number, a description string, and an AST

[15:37] <gaal> with the root node of that being an Exp

[15:37] <xerox> gaal - Two things: hasktags gets tags wrong at times, for example when I M-. on `getFoo' it goes on `getFooBar' which is some lines above `getFoo', even if it is in the same module. Does your patch to ctags work better?

[15:38] <xerox> gaal - Secondly, did try GHCi-On-Acid (shor: GOA) ? %-)

[15:38] <gaal> specifically, a binding

[15:38] <gaal> $compunit := class Foo { ... };

[15:39] <gaal> xerox: my ctags patch doesn't do data constructors

[15:39] <nothingmuch> fyi, publicly usable gobby on pasta.woobling.org

[15:39] <gaal> but it does do what you ask better than what you describe with hasktags

[15:39] <nothingmuch> well, really sobby

[15:39] <xerox> gaal: hasktags does?

[15:39] <scw> fglock: how about Rule.pm in Pugs-Compiler-Rule/lib/Pugs/Grammar/Rule/ ?

[15:39] <clkao> i so want to rewrite some parts of svk in perl6

[15:39] <gaal> as for GOA, no, should I look for it? :)

[15:39] <nothingmuch> given tuits /me may be tempted to implement obby's network proto in perl

[15:39] <xerox> http://img57.imageshack.us/my.php?image=ghcionacidzn1.jpg

[15:39] <nothingmuch> and then try to glue that to vim

[15:39] <lambdabot> Title: ImageShack - Hosting :: ghcionacidzn1.jpg

[15:39] <xerox> ^- shot

[15:40] <xerox> darcs get http://haskell.galois.com/~paolo/darcs/goa

[15:40] <lambdabot> Title: Index of /~paolo/darcs/goa

[15:40] <agentzh> clkao: why svk is soooo unstable on Win32?

[15:40] <clkao> agentzh: how unstable?

[15:40] <fglock> scw: I'll keep the old '!' in metasyntax, so that both will keep working - one sec

[15:41] <gaal> xerox:  ha, is that for real? :)

[15:41] <xerox> gaal: YES!

[15:41] * xerox bounces happily

[15:41] <agentzh> clkao: svk often reports many "G XXXXX" and quits silently

[15:41] <xerox> gaal: I _just_ released it, hope it works as it is.

[15:41] <clkao> fglock: btw, when you look at t/rules, also try to see t/02-test-pm1-basic.t, it's mostly done, missing the rx: thing. which i made the parsing work last night

[15:41] <gaal> xerox: and here I was thinking I should get used to running a lambdabot locally in screen #2

[15:41] <agentzh> this happens every month

[15:41] <clkao> agentzh (!)

[15:41] <clkao> agentzh: when doing what?

[15:41] <scw> fglock: redirecting the '!' part in &metasyntax to &negate ?

[15:41] <clkao> every month... when it's fullmoon?

[15:42] <xerox> gaal: yay for ghci on acid.

[15:42] <agentzh> when do 'svk push'

[15:42] <clkao> but running it again works?

[15:42] <agentzh> nope

[15:42] <gaal> xerox: :bs is especially interesting. :)

[15:42] <scw> fglock: I mean, in Ratchet.pm

[15:42] <gaal> how the moose did that :pl work?

[15:42] <agentzh> i often remove svk completely from my machine and start to install svk all over again

[15:43] <agentzh> this is very very very annoying

[15:43] <agentzh> clkao, what exactly does svk mean?

[15:43] <agentzh> sorry, what exactly does "G" mean in svk?

[15:43] <clkao> 'G' is merged without conflict

[15:44] <fglock> scw: yes, that works

[15:44] <agentzh> okay, it's understandable.

[15:44] <xerox> gaal: haha it is this one:

[15:44] <xerox> ?botsnack

[15:44] <svnbot6> r11752 | fglock++ | PCR - emitter-time parsing of <!x> for backwards compatibility

[15:44] <lambdabot> :)

[15:44] *** stevan joined
[15:44] <xerox> The first one I added, for simplicity :)

[15:44] <scw> fglock: since the '!' part in &metasyntax is broken :p

[15:44] <agentzh> but why does svk quit mysteriously quit after reporting a lot of "G"?

[15:44] <xerox> gaal: you should pull again, I missed a file at the first round, releasing software is hard!

[15:45] <scw> fglock: maybe a better way is to rewrite Grammar::Rule::Rule.pm

[15:45] <gaal> xerox: no kidding :)

[15:45] <gaal> pull from where?

[15:45] <clkao> agentzh: so re-run does work? reinstall it would work with your existing svk depot ?

[15:45] <xerox> darcs get http://haskell.galois.com/~paolo/darcs/goa

[15:45] <lambdabot> Title: Index of /~paolo/darcs/goa

[15:46] <agentzh> re-run doesn't work at all. reinstall and re-setup everything *work*

[15:46] <fglock> scw: changing Grammar::Rule::Rule.pm might break Regex :(

[15:46] <gaal> xerox: it does everything \bot does?

[15:46] <xerox> gaal: yup.

[15:46] <scw> fglock: what do you mean?

[15:46] <gaal> like, it just embeds it?

[15:46] <agentzh> clkao: i find sometimes recovering Config by hand is very helpful.

[15:46] <gaal> xerox: tres cool!

[15:47] <xerox> gaal: see README. No, it doesn't embed, it calls it :)

[15:47] <scw> fglock: I changed it for <!before ...> and ran and passed 'make test'

[15:47] <gaal> xerox++

[15:47] <agentzh> clkao: is there any documentation on the details of svk's Config file?

[15:47] <gaal> xerox++

[15:47] <gaal> xerox++

[15:47] * xerox hops happily

[15:48] <clkao> fglock: btw, data::bind 0.28 releasd

[15:48] <xerox> gaal: some spj++ is needed because of `:def', which is _crazy_

[15:48] <fglock> scw: nice - just commit then :)

[15:48] <clkao> agentzh: uhm, not really

[15:48] <gaal> xerox: it's a bit sad that you need to hardcode paths in .hs... \bot does that too afair

[15:48] <fglock> clkao: ok!

[15:48] <scw> fglock: err... that's r11700 :p

[15:48] <agentzh> clkao: is the user supposed to modify svk's Config?

[15:49] <xerox> gaal: see TODO

[15:49] <xerox> gaal: yes, that's a problem wrt hoogle/djinn/binary-calling-plugins

[15:49] <clkao> agentzh: surely not, but most people are more than user, also it's a simple yaml file ;)

[15:49] * scw have to go or will miss the subway @@

[15:49] <agentzh> clkao: gotcha

[15:49] <fglock> scw: ok - I'll look

[15:49] <fglock> lunch &

[15:49] <gaal> xerox: may I suggest HsSyck for config file...

[15:50] <agentzh> clkao: i think i've already reported this svk bug to rt.cpan.org. please take a look when you have the tuits. :=)

[15:50] <xerox> gaal: nowadays it uses Config.hs ~ what is HsSyck?

[15:51] <gaal> xerox: our library to bridge haskell with YAML

[15:51] <gaal> http://svn.openfoundry.org/pugs/third-party/HsSyck/

[15:51] <lambdabot> Title: Revision 11752: /third-party/HsSyck

[15:51] <xerox> So the configuration would be written in YAML?

[15:51] <xerox> YAML looks nice.

[15:51] <gaal> yeah, and in one function call you get a Hs data structure populated with your conf.

[15:52] <xerox> `generated by re2c' is scary :)

[15:52] * xerox will tell dons

[15:52] <xerox> Thanks for the pointer

[15:53] <gaal> xerox: where?

[15:54] <xerox> Some of the .c files has that string at the very beginning.

[15:56] <gaal> the c does most of the work - it's why's libsyck

[15:57] <xerox> hehe

[15:57] <xerox> I wonder why did you use C.

[15:57] <gaal> it's actually an excellent yaml library

[15:57] <clkao> agentzh: ok

[15:58] <xerox> Oh, it has a BIG parser!

[15:58] <agentzh> clkao: thanks. hopefully i'll be able to return to svk soon. ;-)

[15:58] <gaal> yaml isn't a small language...

[15:59] <xerox> Ack.

[16:00] <gaal> argh, darcs get on a project that has a lot of existing revisions takes ages. is there a way not to download so much history?

[16:00] <xerox> Yes!

[16:00] <gaal> I mean not wget -r :)

[16:00] <xerox> Use the `--partial' option.

[16:00] <gaal> cool, thanks

[16:00] <xerox> You're welcome :D

[16:01] <xerox> OK, I should hack cabal-get now.

[16:01] <xerox> May the hasktags be with me.... erhm.

[16:01] <gaal> xerox: if you're on linux I can schlep over a binary so you don't have to compile ctags...

[16:02] <gaal> linux/x86

[16:02] <xerox> I'm running OS X on Intel now

[16:02] <gaal> ah, too bad then.

[16:02] <svnbot6> r11753 | clkao++ | * Parse $0 and friends.

[16:02] <svnbot6> r11753 | clkao++ | * Parse m// and friends.

[16:02] <gaal> okay, I need to take a break. see you in a few... &

[16:02] <xerox> gaal: may you put the code somewhere?

[16:03] <agentzh> Re <gaal> agent: [] is the last element in [\]

[16:03] <agentzh> gaal: thanks

[16:03] <gaal> xerox: to ctags you mean? sec

[16:03] <gaal> agentzh: np :)

[16:03] <xerox> Thanks much.

[16:06] <gaal> xerox: http://perlcabal.org/~gaal/exuberant-ctags-5.5.4-haskell.tgz

[16:07] * xerox hugs gaal 

[16:07] <gaal> :)

[16:07] <gaal> you MAY need to sort the output -- some editors get picky. so:

[16:07] <gaal> ctags -R ; mv tags tags.un ; sort tags.un > tags

[16:08] * xerox makes an alias

[16:08] *** buubot joined
[16:08] <gaal> uh, and rm tags.un too. :)

[16:08] <gaal> bbiab &

[16:23] <svnbot6> r11754 | clkao++ | Parse bare /.../ rules.

[16:26] *** buubot joined
[16:29] <pasteling> "agentzh" at 210.22.200.67 pasted "Pugs Build Failure on Win32" (13 lines, 632B) at http://sial.org/pbot/18605

[16:29] *** buubot joined
[16:29] <gaal> agentzh: vi config.yml and increase the heap size

[16:30] <gaal> rerun Makefile.PL

[16:30] <agentzh> will do

[16:30] <gaal> perl Makefile.PL that is

[16:30] <[particle]> i think you can just rebuild from there

[16:30] <agentzh> should i do realclean?

[16:30] <gaal> no need

[16:30] <[particle]> but, the long-term fix is as gaal said

[16:30] <agentzh> okay

[16:30] <gaal> agentzh: how much RAM does your machine have?

[16:31] <agentzh> i've set ghc_heap_size to 348m

[16:31] <gaal> that should be enough.

[16:31] <agentzh> and is re-nmake

[16:31] *** f0rth joined
[16:31] <agentzh> -ing

[16:31] <gaal> if you have lots of ram, experiment with a higher value, it might speed up your build.

[16:32] <agentzh> i have 512 MB

[16:32] <gaal> ah. then don't go much higher than that :)

[16:32] <agentzh> not very large

[16:32] <agentzh> it looks good.

[16:32] <gaal> if your machine starts thrashing, you're done - ghc would take hours to finish

[16:32] <agentzh> wow...

[16:33] <agentzh> it's compiling Pugs.Eval now.

[16:33] <gaal> that's near the end, good.

[16:34] <agentzh> well passed Pugs.Parser where my heap was exhausted.

[16:34] <agentzh> yeah

[16:34] <agentzh> Generating precompiled Prelude...

[16:34] <gaal> Pugs.Parser and Pugs.AST.Internals are the worst.

[16:34] <agentzh> nod nod

[16:34] <gaal> your machine isn't very slow!

[16:35] <agentzh> Pugs.AST.Internals took me much time to compile

[16:35] <agentzh> thanks, gaal.

[16:35] <gaal> sure

[16:35] <agentzh> my CPU is 3.00 GHz.

[16:36] <agentzh> yay! i'm done!

[16:36] <svnbot6> r11755 | clkao++ | Simple emit for ~~ m/.../

[16:37] <agentzh> gaal, [particle]: thanks for the help. :=)

[16:38] <agentzh> so glad to build Pugs on Win32 again. :D

[16:40] <xerox> gaal: Emacs says tags isn't a valid tags file either sorted and unsorted :-(

[16:40] *** Aankh|Clone is now known as Aankhen``

[16:40] <xerox> gaal: M-x visit-tags-file Right?

[16:42] <gaal> xerox: oh. you need 'ctags -eR'

[16:42] <gaal> the -e is emacs mode...

[16:42] <clkao> fglock: doh ^ is not implement in PCR

[16:42] <fglock> gaal: 'VNative' is an AST node, right? - what is 'ValNative' ?

[16:42] *** ludan joined
[16:43] *** justatheory joined
[16:43] <gaal> fglock: a "Val" is any one of five types of things

[16:43] <fglock> clkao: I think it parses, but it doesn't emit code for it

[16:44] <gaal> in haskell code if you see 'VNative xxx' then xxx is of type ValNative, but the whole expression is of type Val

[16:44] <gaal> ValNative itself has a few variants too:

[16:45] <gaal> bit, int, uint...

[16:45] <gaal> see line 104

[16:45] <gaal> so if you take a really native type, say boolean

[16:45] <gaal> you wrap it in NativeBool, you just got a 'ValNative' object.

[16:46] <gaal> you wrap that again, you get a Val

[16:46] <gaal> you can wrap it once more with an EVal constructor, you get an Exp

[16:47] <fglock> ok

[16:47] <gaal> so the code 'True' is an expression of type value of type native value of type boolean of value true

[16:47] <gaal> (whew)

[16:47] <cjeris> gaal: where are all these types defined?

[16:47] <gaal> cjeris: http://svn.openfoundry.org/pugs/src/Pugs/AST/CapInternals.hs

[16:48] <gaal> and if you prefer to see it in Perl 6 notation, see the last post on pugs.blogs.com

[16:48] <xerox> gaal++ thanks much!

[16:48] <gaal> fglock: in Haskell speak, the Perl 6 source 'True' parses to

[16:49] <clkao> fglock: grammar Foo is Bar should have Bar in trait attribute, it's currently a bunch of bizzare calls

[16:49] <gaal> EVal (VNative (NBool True)))

[16:49] <gaal> in Perl 6, that would be something like

[16:50] <gaal> EVal.new(VNative.new(NBool.new(True)))

[16:50] <gaal> xerox: you're welcome!

[16:52] <gaal> note that in Perl, that EVal object that you have 'does' the Exp role

[16:52] <gaal> as do the classes ENoop, EVar, EDeref, etc. - line 477

[16:56] *** amnesiac joined
[16:58] *** buubot2 joined
[17:01] *** buetow joined
[17:04] <gaal> wow, xerox++, GOA really rocks.

[17:05] <fglock> gaal: I'm organizing things in namespaces - NBool is 'v6::AST::NBool', and PureBool is 'Bool' I think - does this make sense?

[17:06] <gaal> fglock: note that not everything is clearly hierarchical.

[17:06] <gaal> for example Exp has a EVal of type Val,

[17:06] <gaal> but other things have Val too

[17:07] <gaal> so Val is not a subordinate namespace of Exp

[17:07] <gaal> everything ought to be under one AST namespace, I think.

[17:08] *** ruoso joined
[17:08] <gaal> nothingmuch already asked me to allow giving a base namespace, I'll add it Real Soon

[17:08] <xerox> gaal: thank you very much, shae blogged about it, hehe

[17:09] <fglock> gaal: you said 'EVal.new(VNative.new(NBool.new(True)))' - but what is 'PureBool' used for?

[17:10] <gaal> fglock: see S06, there are both Native and Immutable tyepes, and there is some overlap

[17:10] <gaal> compare 'bool' with 'Bool'

[17:10] <gaal> 'int' with 'Int'

[17:11] *** buubot joined
[17:11] <fglock> 'PureBool' is a runtime class?

[17:11] <gaal> ---> NativeBool vs. PureBool

[17:11] <gaal> fglock: see ValPure

[17:11] <gaal> line 244

[17:12] <gaal> xerox: argh, shapr keeps moving his blog so I never see his entries!

[17:13] <gaal> fglock: Vals are basically either native, or immutable, or mutable-but-sortof-sane, or mutable-but-IO

[17:13] <xerox> http://www.scannedinavian.com/hope/

[17:14] <clkao> fglock: ok, i emit some code for match.  not working very well though ;)

[17:14] <gaal> xerox: found it now.. if only my rss aggregator were clever enough (lj)

[17:14] <xerox> :D

[17:15] *** buubot joined
[17:16] <fglock> gaal: so NativeBool is an ast node that maps to a 'bool' thing, and PureBool is an ast node with a 'Bool' thing?

[17:16] <audreyt> the definition of "sortof sane" is "can be rolled back in memory"

[17:16] * xerox focus! &

[17:17] <audreyt> i.e. "undoable modification" versus "irrevocable mutation"

[17:17] *** stephanepayrard_ joined
[17:18] <gaal> audreyt! moose moose

[17:18] <svnbot6> r11756 | clkao++ | close the =begin.

[17:18] <audreyt> moose!

[17:18] <gaal> fglock: NativeBool and PureBool are on the same "level"

[17:18] * audreyt just woke up

[17:18] <audreyt> and found network

[17:19] <audreyt> but havn't finished slides

[17:19] <audreyt> have ~5 new CPAN modules to upload

[17:19] <gaal> Bool (haskell type) -> NativeBool -> NativeVal -> Val

[17:19] <audreyt> before the talk can proceed without lying

[17:19] <gaal> Bool (haskell type) -> PureBool -> PureVal -> Val

[17:20] <scw> audreyt: I'll leave you a question and go to sleep then

[17:20] <audreyt> fglock: PureBool and NativeBool and Bool and bool respectively

[17:21] <scw> audreyt: you don't have to answer me now :p

[17:21] <audreyt> they are the same Hs type because p6 spec doesn't demand any different capacity from them

[17:21] <scw> audreyt: is there syntax to write rules with argument?

[17:21] <audreyt> but e.g. PureInt and NativeInt is different.

[17:21] <audreyt> scw: ask your mentor...

[17:21] <audreyt> I thin kit's

[17:21] <scw> audreyt: e.g., possiblyTypeLiteral in Literal.hs take one argument

[17:21] <audreyt> rule foo ($x) {...}

[17:22] <scw> audreyt: I asked him several days ago and he didn't reply

[17:22] <gaal> audreyt: is your talk today?

[17:22] <scw> audreyt: Hmm... maybe I should send him a mail instead?

[17:22] <audreyt> gaal: no, 48 hours from now

[17:22] <audreyt> scw: yes

[17:22] <scw> audreyt: 'k, thanks :)

[17:23] <ingy> audreyt: can you see my msgs?

[17:23] * gaal can see ingy's moosages

[17:23] <audreyt> scw: the call syntax seems to be

[17:23] <audreyt> <rule: param>

[17:23] <audreyt> ingy: no

[17:23] <audreyt> ingy: try magnet

[17:24] <gaal> audreyt, ingy, just open a channel, this is irc :)

[17:24] <audreyt> scw: so I'd say go with that syntax for now and also mail pmichaud for clarifiacation

[17:24] <audreyt> ingy: I need you help in my 5 to-be-on-CPAN modules

[17:24] <audreyt> one of which you'll like

[17:24] <audreyt> it's called XML::All

[17:24] <audreyt> and does what you think it does.

[17:24] <gaal> lol

[17:25] <audreyt> basically realizing the Capture spec in p5 via overloading in the domain of xml

[17:25] <audreyt> very addictive :)

[17:25] *** cognominal joined
[17:26] <fglock> can I implement this using inheritance, and just do $/.as(v6::AST::Bool) ?

[17:26] <audreyt> fglock: sure

[17:26] <fglock> and $/.as(v6::AST::bool) ?

[17:26] <clkao> audreyt: i think we should be at 700 pass mark now

[17:26] <gaal> I gotta go again for a bit, see y'all &

[17:27] <audreyt> fglock: sure

[17:27] <audreyt> fglock: basically ::bool and ::Bool is already autoboxed and explicitly boxed

[17:27] <audreyt> "true natives" as of yet doesn't exist

[17:27] <audreyt> but! nor does perl5 support native bools anyway.

[17:27] <fglock> audreyt: this is for p6-on-p6

[17:27] <audreyt> I know

[17:28] <audreyt> but 6on6 doesn't care about runtime

[17:28] <audreyt> it can't use runtime-specific native bools

[17:28] <audreyt> so for 6on6, bool and Bool are pretty much interchangable inside the compiler

[17:28] <audreyt> it's jsut the emitter

[17:28] <fglock> but it should pass the info to the optimizer?

[17:28] <audreyt> when seeing a NativeBool

[17:28] <audreyt> can get optimizer

[17:28] <audreyt> to work

[17:28] <audreyt> and not a PureBool

[17:29] <audreyt> which is boxed Bool

[17:29] <audreyt> (I hope I'm making some sense)

[17:29] <fglock> does 'True' parse to 'bool' ?

[17:30] <audreyt> it's a deep philosophical question :)

[17:30] <audreyt> I think it parses to Bool

[17:30] <audreyt> as it's defined in Bool::True

[17:30] <audreyt> and it's only the container

[17:30] <audreyt> my bool $x = True

[17:30] <audreyt> that does the deboxing

[17:30] <audreyt> same for numerics

[17:30] <audreyt> this is based on the S02 spec

[17:31] <fglock> so there is no parse-time bool

[17:31] <audreyt> that says untyped containers uses Num and Int emantics

[17:31] <audreyt> which seems to me means

[17:31] <audreyt> my $x = 1

[17:31] <audreyt> makes a Int

[17:31] <audreyt> which means parsetime natives doesn't exist

[17:32] <fglock> and no parsetime bools, since true and false are defined in an enum

[17:32] <audreyt> yup

[17:32] <fglock> ok - thanks!

[17:32] <audreyt> the only way to get parsetime bool is

[17:33] <audreyt> constant bool $x = True

[17:33] <audreyt> or

[17:33] <audreyt> my bool $x; BEGIN { $x = False }

[17:33] <audreyt> etc.

[17:33] <fglock> btw, '1' is parsed as 'Bit', right?

[17:33] *** Termy joined
[17:33] * clkao impatiently waits for christmas

[17:33] *** theorb joined
[17:34] <audreyt> fglock: I hope so, yes, but parsing it as an Int with fallback also worksforme

[17:34] *** cmarcelo joined
[17:36] <audreyt> lunch... &

[17:36] <fglock> fallback at optimization/emit time?

[17:36] <audreyt> it could

[17:36] <audreyt> it also could be runtime

[17:36] <audreyt> Bit->Int is widening cast

[17:36] <audreyt> upcast

[17:36] <audreyt> no info loss

[17:36] <audreyt> so doesn't matter either way

[17:37] <fglock> k

[17:37] *** xinming joined
[17:38] *** _maydayjay_ joined
[17:40] *** __cognominal joined
[17:43] *** theorb is now known as theorbtwo

[17:43] *** salty-horse joined
[17:57] <svnbot6> r11757 | fglock++ | 6on6 - added v6/AST/Base.pm;

[17:57] <svnbot6> r11757 | fglock++ | - added class hierarchy to v6/AST/Native.pm

[17:58] *** penk joined
[17:59] *** rindolf joined
[18:01] *** _maydayjay_ left
[18:03] *** penk joined
[18:06] <svnbot6> r11758 | clkao++ | Data::Bind 0.28

[18:07] <rindolf> Hi all! Sorry for the SlightlyOT, but: With Module::Build how do I compile another .c file into the .so of the Perl extension?

[18:09] <svnbot6> r11759 | clkao++ | * Make simple passing of rx work.

[18:09] <svnbot6> r11759 | clkao++ | * Make ~~ matching passed in (perl5-compiled) regexp work.

[18:12] <clkao> mmm

[18:12] <clkao> isa_ok({ 'one' => 1 }, 'Hash');

[18:12] <clkao> how is this Hash not Sub ?

[18:19] *** bernhard joined
[18:19] *** integral_ joined
[18:20] <rindolf> Hi clkao

[18:21] <rindolf> clkao: what's the progress with the svk API?

[18:24] <clkao> rindolf: what svk api?

[18:25] <rindolf> clkao: the one Gabor and I wanted.

[18:25] <rindolf> clkao: like the svn API.

[18:25] <rindolf> clkao: only for SVK and in Perl.

[18:25] <clkao> ah.  it does't exist yet. do you want to help?

[18:25] <rindolf> clkao: sorry, but I'm not using svk much.

[18:25] <rindolf> Good ol' svn works for me.

[18:26] <rindolf> clkao: I was just asking.

[18:26] <clkao> i was also just asking ;)

[18:26] <rindolf> clkao: sure, no problem.

[18:29] *** buubot joined
[18:35] *** fglock joined
[18:35] <clkao> oh crazy.

[18:35] <clkao> 788 pass!

[18:36] <rindolf> I might need to write a buubot plugin.

[18:42] *** integral_ is now known as integral

[18:47] *** _maydayjay_ joined
[18:53] *** larsen joined
[19:01] <clkao> audreyt/TimToady: around? see my last isa_ok question

[19:02] *** DaGo joined
[19:14] *** dolmen joined
[19:16] *** dolmen left
[19:17] *** beppu joined
[19:27] *** Limbic_Region joined
[19:29] <nothingmuch> moosage

[19:31] <gaal> elktitude

[19:37] <fglock> clkao: I fixed 'grammar' and 'class' in the grammar - I'll fix the emitter before the commit

[19:40] <gaal> nothingmuch: did you see xerox++'s GOA?

[19:40] *** froh-doh joined
[19:40] <nothingmuch> nope

[19:40] <nothingmuch> whutsitdo?

[19:40] <Limbic_Region> greetings from the land of the almost alive

[19:42] *** miyagawa joined
[19:43] <gaal> nothingmuch: bring \bot to ghci: http://www.scannedinavian.com/hope/image/27/full

[19:44] <gaal> darcs get http://haskell.galois.com/~paolo/darcs/goa

[19:44] <lambdabot> Title: Index of /~paolo/darcs/goa

[19:48] *** buubot joined
[19:54] <svnbot6> r11760 | fglock++ | v6 - added 'class' and 'grammar' to Terms, updated the emitter

[19:56] *** vsoni_ joined
[19:59] <svnbot6> r11761 | clkao++ | Force scalar context for bind_op2, so ("foo" =~ m/x/) would return undef.

[20:02] <nothingmuch> gaal: cute =)

[20:02] <gaal> darn useful too

[20:02] * nothingmuch needs to do more haskell for $work

[20:02] <gaal> hoogle, pl, index in one place

[20:03] <gaal> "more" is good

[20:03] <svnbot6> r11762 | gaal++ | * DrIFT.Perl6Class: allow for namespace mangling (nothingmuch++)

[20:03] <svnbot6> r11762 | gaal++ | * The demo programs use ("p6::AST::" ++) as a mangler

[20:03] <svnbot6> r11762 | gaal++ | * Add CapInternals.Instances.hs for the DrIFTless

[20:03] <gaal> I wish I did any .hs for $work!

[20:04] *** knewt joined
[20:06] *** miyagawa joined
[20:06] <svnbot6> r11763 | fglock++ | v6 - implemented 'is classname' to grammar/class decl

[20:10] <clkao>  

[20:10] *** buubot joined
[20:11] *** buubot joined
[20:13] *** elmex_ joined
[20:13] <svnbot6> r11764 | fglock++ | v6 - fixed last commit

[20:15] <clkao> whoot. it kind of works

[20:15] <svnbot6> r11765 | fglock++ | v6 - initialize a string in emitter

[20:16] *** xdg joined
[20:17] *** SubStack joined
[20:18] <svnbot6> r11766 | fglock++ | v6 - allow '::' and '_' in attributes

[20:19] <fglock> lib/v6/AST/Native.pm compiles :)

[20:19] <clkao> whoot

[20:20] <fglock> is there something magic about the 'as' method? why is it called 'coerce::as'

[20:22] <clkao> role is not parsed yet

[20:24] <clkao> grammar/native compiles as well. just a bit weird ;)

[20:25] *** cmarcelo left
[20:25] <fglock> role has the same syntax as class?

[20:25] <clkao> i think so

[20:25] <PerlJam> yes, but very different semantics :)

[20:26] <clkao> need to use Moose::Role; intead of Moouse though

[20:26] <clkao> then does X => with 'X'

[20:27] *** Kattana joined
[20:30] <svnbot6> r11767 | fglock++ | v6 - added simple 'role' parse/emit

[20:36] *** bpphillips left
[20:39] <clkao> can you have pointy sub like "-> $x is Something { }" ?

[20:39] *** justatheory joined
[20:41] <PerlJam> clkao: nope (at least not unless someone has changed it on me)

[20:42] *** elmex joined
[20:43] <clkao> any good reason not to?

[20:45] <svnbot6> r11768 | fglock++ | v6-Compiler - added Makefile, etc

[20:46] <PerlJam> Because that's what the sub keyword is for?

[21:01] <audreyt> clkao: hey

[21:01] <audreyt> clkao: Data::Bind. can we get it to accept rvalue callconv?

[21:01] <audreyt> i.e. if it's not an unblessed reference

[21:01] <audreyt> but rather a blessed reference or a value

[21:01] <audreyt> then pretend it's been rvalue (expression context) at first place

[21:02] <audreyt> and just reject "is rw"

[21:02] <audreyt> it matches what actually happens incallconv

[21:02] <audreyt> and will simplify the named syntax

[21:02] <audreyt> what do you think?

[21:03] <audreyt> you can have pointy sub "-> Something $x {...}".

[21:03] <clkao> audreyt: parse error

[21:03] <audreyt> oh, it's "pionty block"

[21:03] <audreyt> clkao: call with

[21:03] <audreyt> [1,2,3,4], {named=>1}

[21:03] <audreyt> and instead of aliasing

[21:04] <audreyt> just do value semantics assigment

[21:04] <audreyt> and croak if param is rw

[21:04] <clkao> why? then are you copying things

[21:04] <clkao> "value sematics assignment" ?

[21:04] <clkao> expanding as inline?

[21:04] <audreyt> ok

[21:04] <audreyt> basically

[21:05] <audreyt> create a \1 on the fly

[21:05] <audreyt> if it's not ref

[21:05] <audreyt> not aliasing

[21:05] <audreyt> because

[21:05] <nothingmuch> audreyt: please post kudra's summary on pugs.blogs.com

[21:05] <audreyt> sub x ($x is rw) {}

[21:05] <audreyt> x(1)

[21:05] <audreyt> ought to fail

[21:05] <audreyt> (I'll brb)

[21:05] <audreyt> nothingmuch: will do

[21:05] <clkao> *nod*

[21:06] <clkao> is this just for making people  happy with constant?

[21:06] <nothingmuch> audreyt: it's in drafts or something

[21:06] <nothingmuch> and tell her it's OK to post on her own

[21:06] <nothingmuch> she didn't believe me when I told her you wouldn't mind

[21:09] <clkao> fglcok: t/subroutine/defaults fails now, because package foo; is emitted as a function call

[21:12] <audreyt> clkao: er no, in p6

[21:12] <audreyt> x(1)

[21:12] <svnbot6> r11769 | clkao++ | * Signature in pointy sub.

[21:12] <svnbot6> r11769 | clkao++ | * Evil for now works:

[21:12] <svnbot6> r11769 | clkao++ |   for (%hash.kv) -> $k,$v {

[21:12] <svnbot6> r11769 | clkao++ |     warn "$k $v";

[21:12] <svnbot6> r11769 | clkao++ |   }

[21:12] <audreyt> ought to similarily fail

[21:13] <audreyt> so it's meet-the-spec too

[21:13] <audreyt> basically the call side can pass lvalue or rvalue

[21:13] <audreyt> the param side can expect byref or byval

[21:14] <audreyt> and the r->l direction ought to either vivify a ref there ("is copy") or fail ("is ref")

[21:14] <audreyt> all other directions are fine

[21:17] <audreyt> gaal: btw

[21:17] <audreyt>     has Ident $.p_variable;

[21:17] <audreyt> can probably be reduced to     has Ident $.variable;

[21:17] <audreyt> without losing info

[21:17] <audreyt> will make life easier

[21:18] *** dduncan joined
[21:18] *** fglock joined
[21:18] *** ruz joined
[21:19] <fglock> "use v6::Compiler;" - is a syntax error in perl5 :(

[21:20] <fglock> clkao: s/package/module/ - I think package is a perl5-only word

[21:21] <fglock> maybe the test is wrong?

[21:21] <audreyt> it is?

[21:21] <audreyt> fglock: it worksforme

[21:21] <audreyt> "use v6::Compiler" works on 5.8.8 here

[21:22] <clkao> fglock: it used to work

[21:22] <fglock> audreyt: my fault - it works now

[21:22] <audreyt> good

[21:24] <fglock> clkao: I think 'package' has the same semantics as 'use v5'

[21:24] <audreyt> yes, but only as the first statement

[21:24] <clkao> audreyt: i have some plan of making use of data::bind::sig in compile time. maybe along that time

[21:24] <clkao> fglock: then

[21:24] <audreyt> clkao: good

[21:24] <clkao> 	

[21:24] <fglock> fixing...

[21:25] <clkao> then subroutines/defaults.t is wrong?

[21:25] <clkao> now it finally comes to boxing or not.

[21:25] <clkao> %hash.values.sort

[21:26] <audreyt> clkao: fixed

[21:26] <audreyt> (the test predates the spec change)

[21:26] <clkao> eggcellent

[21:26] <clkao> there are also a bunch of rules tests skipped. any reasons?

[21:26] <svnbot6> r11770 | audreyt++ | * t/subroutines/defaults.t - update to chase Synopsis change

[21:26] <svnbot6> r11770 | audreyt++ |   (Arbel hackathon iirc) on "package Foo;" being invalid except

[21:26] <svnbot6> r11770 | audreyt++ |   as the first statement -- use "package Foo {}" form now.

[21:27] <audreyt> clkao: PGE used to segfault on them

[21:27] <audreyt> clkao: the rule tests part will be totally thrown out

[21:27] <audreyt> replaced by david romano's spec-based rules tests

[21:27] <clkao> where are they?

[21:27] <svnbot6> r11771 | fglock++ | v6 - added 'package' back

[21:27] <audreyt> apparently in pmichaud's computer

[21:27] <clkao> gr!

[21:27] <audreyt> pmichaud said that's hispriority now

[21:28] <audreyt> to get it checked in

[21:28] <audreyt> will find him in realspace this week

[21:28] *** xinming joined
[21:29] <nnunley> Wow 103 commits since the start of the icfpc

[21:30] <audreyt> nothingmuch: kudra's summary is on pugs.blogs.com

[21:33] <pmichaud> pong

[21:34] <clkao> nnunley: blame 40% on me

[21:34] <pmichaud> the rule tests have been replaced (last week)

[21:34] <pmichaud> they're in t/compilers/pge/p6rules/regex_tests

[21:36] *** elmex joined
[21:36] <audreyt> oh!

[21:36] <audreyt> sorry, missed that.

[21:37] <audreyt> /p6regex/ :)

[21:37] <pmichaud> np, you've been pretty busy of late :-)

[21:37] <pmichaud> oh yeah, p6regex :-)

[21:37] <pmichaud> the subrule tests aren't in there, but most of the others are

[21:37] <pmichaud> (if someone wants to improve the regex_tests file to include subrule tests... patches welcomed)

[21:37] <pmichaud> (actually, all test patches welcomed :-)

[21:38] <nothingmuch> audreyt: AWESOMETOWN!

[21:41] <audreyt> clkao: committed

[21:42] <svnbot6> r11772 | audreyt++ | * t/p6regex/: Copy over the spec-based p6rx tests from

[21:42] <svnbot6> r11772 | audreyt++ |   parrot/t/compilers/t/pge/p6rulex/regex_tests committed

[21:42] <svnbot6> r11772 | audreyt++ |   by pmichaud++ last week.  Yay!

[21:42] <audreyt> fglock: write a p6-based harness on it perhaps?

[21:43] <fglock> audreyt: I'll look

[21:45] <dduncan> if anyone's at oscon, I'm in the OSCAMp room for the next few hours ... come meet

[21:46] <nothingmuch> has anyone ever used the alt-input stuff in vim?

[21:46] <nothingmuch> i don't know where to start and google isn't helping

[21:46] <nothingmuch> i figured this loony bin is a good place as any to ask ;-)

[21:51] <svnbot6> r11773 | fglock++ | v6 - 'class' supports long names with version again

[21:54] <fglock> clkao: 'Too late to run INIT block at /usr/local/share/perl/5.8.7/v6.pm line 22' when running v6-Compiler Makefile.PL

[21:54] <fglock> I precompiled with 'perl -Ilib -Mv6::Compiler -e 1'

[21:55] <fglock> maybe I should remove 'requires('v6' => '0.010');' ?

[21:58] <clkao> fglock: ya, i see them sometimes, when there's .tc files

[22:00] <svnbot6> r11774 | gaal++ | * audreyt++ suggested beheading field names in the Perl renditions of

[22:00] <svnbot6> r11774 | gaal++ |   Hs records. This is only correct for code that uses our naming

[22:00] <svnbot6> r11774 | gaal++ |   convention, but taking over the world we may as well instate our

[22:00] <svnbot6> r11774 | gaal++ |   naming convention everywhere.

[22:01] <audreyt> yes.

[22:02] <gaal> nothingmuch: what alt-input stuff?

[22:02] <nothingmuch> gaal: i want to implement obby in vim

[22:02] <nothingmuch> vim can take command input from a second stream

[22:02] <nothingmuch> which is monitored by the main event loop

[22:02] <nothingmuch> originally intended for use by debuggers

[22:02] <gaal> vim or gvim?

[22:03] <nothingmuch> since I already know the hooks to do it the other way (sort of, vimspell, or at the very worst rebinding), i guess it's doable

[22:03] <nothingmuch> either or

[22:03] <nothingmuch> :help alt-input says it'll work with both

[22:04] <gaal> reading that

[22:04] <gaal> we can hack on that this week

[22:05] <gaal> that doc isn't very detailed :)

[22:06] <nothingmuch> it isn't detalied at all

[22:06] <nothingmuch> hence google

[22:06] <nothingmuch> but google isn't being helpful either

[22:06] <gaal> I think it does need gvim

[22:06] <gaal> and I won't be surprised if it only works in X

[22:07] <gaal> "The current implementation is based on the X Toolkit dispatch loop and the XtAddInput() function call."

[22:07] * nothingmuch wouldn't really mind

[22:07] <nothingmuch> oh

[22:07] <nothingmuch> hmm

[22:07] <nothingmuch> *shrug*

[22:07] <gaal> isn't osx only half X?

[22:07] <nothingmuch> none X at all

[22:07] <nothingmuch> although you can launch an X

[22:07] <gaal> I remember jwz discussing it (he ported xscreensaver there)

[22:07] <nothingmuch> oh

[22:08] <nothingmuch> he prolly knows much more than me then

[22:08] <gaal> it = x on osx

[22:08] <nothingmuch> i've not actually coded in it

[22:08] <nothingmuch> hmm

[22:08] <nothingmuch> i can run an xserver

[22:08] <nothingmuch> and x11 programs

[22:08] <nothingmuch> it works fairly well

[22:09] <gaal> vimspell doesn't use anything like alt-input

[22:11] <gaal> oh, you didn't say it did

[22:11] <nothingmuch> no

[22:11] <nothingmuch> the other direction

[22:11] <gaal> nothingmuch: did you look at the obby event model at all?

[22:11] <nothingmuch> that is, sending local input

[22:11] <nothingmuch> i read the spec

[22:11] <nothingmuch> it's ingeniously simple

[22:11] <gaal> I should too then

[22:12] <nothingmuch> they solve the race condition thing very cleanly

[22:12] <nothingmuch> i think i can implement it in Perl in ~2 days

[22:13] <nothingmuch> the only problem is that it requires a good buffer/cursor abstraction

[22:13] <svnbot6> r11775 | fglock++ | v6-Compiler - moved '$v6::Compiler::VERSION' to a line by itself; still Makefile.PL can't see it

[22:14] <nothingmuch> that is

[22:14] <nothingmuch> a good one considering the obby thing and the vim buffer will be in a separate process space

[22:14] <nothingmuch> the other idea

[22:14] <nothingmuch> trying to hook into vim's eventloop from embedded perl

[22:14] <nothingmuch> doesn't seem very plausible

[22:15] <nothingmuch> $nothingmuch =~ s/\n/,/g;

[22:15] <gaal> where's the newest spec? i saw something that said it was outdated

[22:16] <nothingmuch> http://darcs.0x539.de/trac/obby/cgi-bin/trac.cgi/wiki/ObbyInternals

[22:16] <lambdabot> Title: ObbyInternals - obby - Trac

[22:16] <nothingmuch> oh

[22:16] <nothingmuch> i read it the wrong way

[22:16] <gaal> "The following documentation is outdated for 0.3.0-dev and above because a new documented algorithm named Jupiter was implemented into obby."

[22:16] <nothingmuch> ew documented algorithm

[22:16] <nothingmuch> sounds promising

[22:17] <nothingmuch> okay

[22:17] <wolverian> <7aw

[22:18] <wolverian> oops

[22:18] <nothingmuch> darcs get the obby thing

[22:18] <nothingmuch> and make in doc

[22:18] <fglock> gaal: this is what the v6-Compiler version of the ast is starting to look like: http://svn.openfoundry.org/pugs/v6/v6-Compiler/lib/v6/AST/Native.pm

[22:18] <nothingmuch> it seems fairly documented

[22:18] *** justatheory joined
[22:20] <gaal> fglock: should be 'does', not 'is'

[22:20] <gaal> fglock: also, I fixed namespaces at nothingmuch++'s prodding

[22:21] <gaal> so you can build misc/pX/gaal/CITest.hs and run it, getting _everything_

[22:22] <fglock> gaal: sorry, but what is the difference between 'does' and 'is' in this case?

[22:22] <gaal> fglock: what do you intend for Base.pm?

[22:22] <gaal> fglock: v6::AST::Native should be a role, not a class

[22:23] <gaal> for one thing, you can't instantiate it directly

[22:23] <fglock> I don't know yet what Base.pm will be - it might contain the Match 'pos', for example

[22:24] <gaal> okay, I have to hear audreyt on that subject again myself

[22:25] <fglock> gaal: do you find it better to have the whole definition in a single file?

[22:26] *** thepler joined
[22:26] <gaal> fglock: oh, no, I don't think it matters much. Well, there is a circular dependency issue I want to avoid

[22:27] <gaal> okay, I'm giving sleep another attempt. later! :)

[22:27] <gaal> zzZ&

[22:27] <svnbot6> r11776 | fglock++ | v6-Compiler - s/is/does/ - gaal++

[22:28] <fglock> &

[22:30] <clkao> harness landing

[22:32] *** cjeris left
[22:32] <svnbot6> r11777 | clkao++ | p5 version of harness for regex_tests - to be ported to p6 and sit in

[22:32] <svnbot6> r11777 | clkao++ | pugs/t.  A few tests (mostly named captures) are disabled because they

[22:32] <svnbot6> r11777 | clkao++ | hang.

[22:33] *** fglock left
[22:40] *** avarab joined
[22:46] *** GeJ joined
[22:52] <clkao> audreyt: how do i make dist for v6?  it involves module::install hate

[22:52] <audreyt> clkao: cp -Rf the dir away somewhere else

[22:52] <clkao> bundling 349 passed tests ;)

[22:52] <audreyt> raze inc

[22:52] <clkao> grr!

[22:52] <audreyt> and then perl Makefile.PL

[22:52] <audreyt> make dist

[22:52] <audreyt> you'll have to do the same if it were autoconf...

[22:53] <audreyt> ...but wait, you never liked autoconf

[22:53] <svnbot6> r11778 | clkao++ | v6-alpha 0.011

[22:53] <audreyt> never mind

[22:53] <clkao> it's not creating meta.yml

[22:53] <audreyt> razed inc ?

[22:54] <clkao> ya. but i handcrafted it

[22:55] *** avar joined
[23:18] *** rlb3 joined
[23:20] <clkao> audreyt: pause doesn't want to index my v6. i thought i have permission?

[23:21] <clkao> ah, new modules names

[23:27] <justatheory> stevan: Do you have that link that you pasted sometime last week for natural queries?

[23:43] *** dduncan joined
[23:54] *** baest joined
