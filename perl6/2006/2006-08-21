[00:02] *** lollan joined
[00:20] *** neoesque joined
[00:23] *** hikozaemon joined
[00:29] *** nekokak joined
[00:41] *** christo joined
[00:41] *** christo left
[01:06] <svnbot6> r12532 | fglock++ | * PCR - uses plain insideout; Test.pm compiles with less than 80M ram; about 5% faster

[01:09] <xerox> @arr

[01:09] <lambdabot> I'll keel haul ya fer that!

[01:09] <xerox> @arr

[01:09] <lambdabot> Drink up, me 'earties

[01:09] <xerox> @arr

[01:09] <lambdabot> Avast!

[01:11] *** justatheory joined
[01:11] <Patterner> Avaunt!

[01:24] *** SamB joined
[01:46] *** zgh joined
[01:54] *** dolmans joined
[02:48] *** mjk joined
[02:49] *** agentzh joined
[02:49] * agentzh is back now.

[02:50] <agentzh> gaal: oh, coloring the tests using smoke results (just like catalog_tests.pl) is attractive.

[02:51] <agentzh> but i think we should make it optional, since smoking pugs usually takes a long time, and the smoke results are implementation-specific, or even backend-specific.

[02:53] <agentzh> today i'm going to make the HTML/CSS source generated by util/smartlinks.pl a bit nicer. :)

[02:54] <agentzh> it seems to me fglock has been doing something amazing on v6.pm's optimization recently. :D

[02:54] <agentzh> fglock++ fglock++ fglock++

[02:55] * agentzh goes back to hack.

[03:01] <agentzh> gaal: i've seen your svn log. :)

[03:02] <agentzh> i didn't get cycles last night to add snippet boundary. too much time was sepent on debugging JavaScript code yesterday. ;-)

[03:02] <agentzh> i'll do it now.

[03:07] <svnbot6> r12533 | agentz++ | [util/smartlinks.pl]

[03:07] <svnbot6> r12533 | agentz++ | - updated the comments

[03:10] <svnbot6> r12534 | Sage++ | Lots and lots of code cleanups. Just about every function gets some better documentation and some whitespace syntactic sugar.

[03:10] <svnbot6> r12534 | Sage++ | Just doing some cleaning in anticipation of code review.

[03:19] <svnbot6> r12535 | agentz++ | [util/smartlinks.pl]

[03:19] <svnbot6> r12535 | agentz++ | - suppressed error messages if it's not running with the --check option (but with a hint).

[03:19] <svnbot6> r12535 | agentz++ | - tweaked the errro message format a bit.

[03:20] <TreyHarris> agentzh: gaal and i were talking last night about pugs-specific tests, did you see that?

[03:20] <agentzh> oh? looking now...

[03:21] <TreyHarris> no, i can repeat

[03:21] <TreyHarris> basically, apparently xx-uncategorized used to be called "pugsbugs" and was used for pugs-specific issues

[03:21] <TreyHarris> its new name, and your comment in TASKS, suggest that all those tests should be on language issues--which leaves the question of where pugs-specific tests should go

[03:22] <agentzh> so what's your opinion?

[03:22] <TreyHarris> make a pugsbugs subdirectory, or create a separate t/ elsewhere

[03:23] <agentzh> i think the motivation of isolating tests into "pugsbugs" was probably to get audreyt++ easier to fix pugs bug.

[03:23] <agentzh> *bugs

[03:24] <agentzh> but you're talking about testing pugs-specifc features, right?

[03:25] <TreyHarris> no... well, it's not like such bugs shouldn't be runnable by other implementations, just that they might seem odd and/or redundant in the context of being a language-specification test suite

[03:25] <TreyHarris> like the one i checked in last night, that just checks if ".say for %hash" works, since it was causing pugs to segfault.

[03:26] <agentzh> TreyHarris: oh, well. my gut feeling is that pugs' bugs could probably become bugs of implementation X. :)

[03:26] <svnbot6> r12536 | Sage++ | More code cleanups. Documentation improved, formatting better, and all is right with my little corner of Pugs.

[03:27] <agentzh> TreyHarris: that test can go into t/syntax/... or t/statements/for.t, i think.

[03:28] <TreyHarris> gaal said that such tests that cause segfaults should be isolated and placed alone in a file

[03:28] <TreyHarris> and suggested pugsbugs as the appropriate place, not knowing it no longer exists

[03:28] <agentzh> TreyHarris: yes, that makes sense.

[03:29] <agentzh> TreyHarris: the dir name xx-uncategorized or "segfault" is okay.

[03:29] <TreyHarris> and also those kinds of tests should be handled a little differently.  you shouldn't todo them in any circumstance, though audrey might choose to todo them just prior to a release if she wants to call out a known and as-yet-unfixed bug

[03:30] <agentzh> *nod*

[03:32] <agentzh> TreyHarris: go ahead and see how well it works in practice. :)

[03:32] <TreyHarris> how about "critfails", or "critical" or something like that?  let all impls run them, but just put them together so that a) segregating into lots of little files won't be a pain to the organization of the rest of the tests, and b) developers can pay special attention to hard failures in that space?

[03:33] <agentzh> will look later. sorry, lunch time now &

[03:33] *** agentzh left
[03:39] *** SamB joined
[03:40] <cmarcelo> audreyt et al: http://cmarcelo.blogspot.com/2006/08/pugs-meets-judy.html && http://cmarcelo.blogspot.com/2006/08/sold-arrays-delivered-maps.html... if you folks have any suggestion, new data, or something, please tell me... =)

[03:40] <lambdabot> Title: cmarcelo: Pugs meets Judy

[03:56] <audreyt> cmarcelo: would you be so kind and post the same article on pugs.blogs.com? :)

[03:56] <audreyt> (the meets judy one)

[03:57] <audreyt> o/~ hey judy, don't make it bad / take a slow pugs / and make it faster o/~

[03:57] <obra> heh

[03:58] <wolverian> hrm. I think I grog typeclasses now. thinking of them as java interfaces is really disparaging.

[03:59] <wolverian> evan_tech++ # great journal on haskell at http://evan_tech.livejournal.com/

[03:59] <lambdabot> Title: evan_tech -- Recent Entries

[04:04] <audreyt> indeeed

[04:08] <cmarcelo> audreyt: sure. how do I do it?

[04:10] <audreyt> cmarcelo: check your email for a blog bit :)

[04:11] <audreyt> wolverian: the oleghack he links to -- http://www.haskell.org/pipermail/haskell/2004-November/014939.html -- is dazzling

[04:11] <lambdabot> Title: [Haskell] Typeful symbolic differentiation of compiled functions

[04:11] <TreyHarris> audreyt: do you have any opinion about the question of where pugsbugs should go?

[04:13] <audreyt> TreyHarris: they should go squashed

[04:13] <audreyt> but meanwhile, try to find relevant t/ to put them, and failing that, t/xx-uncateg.

[04:14] <TreyHarris> ah, gaal said put them in separate files to themselves since they disrupt smoke reports otherwise

[04:14] <audreyt> well, as long as it's not crashing.

[04:14] <audreyt> if it is crashing, t/xx-uncateg is perhaps better

[04:14] <TreyHarris> no, i'm talking specifically about crashing

[04:15] <TreyHarris> ok

[04:16] <TreyHarris> can evalbot survive a segfault?

[04:16] <TreyHarris> i don't have a linux installation, so i've been tempted to try these as they come up against evalbot, but if i make it go away that would be bad

[04:19] <audreyt> try it now? :)

[04:19] <TreyHarris> ?eval my $i; $i++ for %?CONFIG; say $i

[04:19] *** evalbot_12525 is now known as evalbot_12536

[04:19] <evalbot_12536> Error: Can't modify constant item: VUndef

[04:20] <audreyt> you are not supposed to change %? hashes...

[04:20] <audreyt> oh wait, it's $i not $_

[04:20] <audreyt> nvm

[04:20] <TreyHarris> that segfaults on my machine (also running r12536)

[04:21] <TreyHarris> ?eval %?CONFIG.elems

[04:21] <evalbot_12536> Error: No compatible subroutine found: "&elems"

[04:21] <TreyHarris> oh, i thought hashes supported elems

[04:21] <TimToady> ?eval %?CONFIG.pairs.elems

[04:21] <evalbot_12536> 0

[04:21] <TimToady> ?eval [%?CONFIG].elems

[04:22] <evalbot_12536> 1

[04:22] <TimToady> ?eval %?CONFIG.say

[04:22] <evalbot_12536> OUTPUT[ ] Bool::True

[04:23] <TreyHarris> those all work for me.  but %?CONFIG by itself in list context segfaults

[04:23] <audreyt> investigating

[04:25] <audreyt> fixed

[04:25] <TreyHarris> ?eval my @a = @(%?CONFIG)

[04:26] <evalbot_12536> [undef,]

[04:26] <TreyHarris> (i realize that's incorrect.  but it segfaults for me)

[04:26] <svnbot6> r12537 | audreyt++ | * TreyHarris++ pointed out that listifying Hash was

[04:26] <svnbot6> r12537 | audreyt++ |   crashing when it shouldn't, apparently a regression

[04:26] <svnbot6> r12537 | audreyt++ |   from Judyizing the interface.

[04:26] <TreyHarris> making

[04:26] <TreyHarris> audreyt++

[04:27] <cmarcelo> haskellers: do you know hot to "export" instances? in CollectionsM I instantiate MapM (Data.Map.Map) and I thought that when I imported both Data.Map and CollectionsM the instance would be implicitly working... but doesn't looks like =P (actually I'm pretty sure that yesterday it works but doesn't today ...)

[04:28] <cmarcelo> audreyt: (i got the blog bit, i'm reviewing a bit and will commit into blog)

[04:30] <audreyt> cmarcelo: you don't export instances, they are assembled automagically

[04:30] <audreyt> almost makes me wonder if we can allow separate "does" declarations

[04:30] <audreyt> which seems like a good way to solve the Expression Problem (tm)

[04:31] <TimToady> sort of a require...

[04:32] <audreyt> (not runtime infix does, compile-time separate decl does)

[04:34] <TimToady> I wonder how much "does" implies "use"...

[04:35] <wolverian> audreyt, that is insanely cool. now, to port it to perl6..

[04:35] <wolverian> (oleg's diff hack)

[04:35] <cmarcelo> audreyt: expression problem => how to add new "cases" for a type and add new functions "on" that type without "trouble" (recompiling, changing lots of code, doing lots of boilerplate)? or is a deeper thing?

[04:36] <audreyt> cmarcelo: exactly that

[04:41] *** zgh left
[04:43] <cmarcelo> audreyt: mind checking if you get "no instance error" changing "_BufToID" type to "Map ByteString ID" instead of "H.StrMap ByteString ID"...?

[04:46] *** Khisanth joined
[04:48] <audreyt> sure. sec

[04:48] <audreyt> surely you mean IORef?

[04:48] <audreyt> IORef (Map ByteString ID)

[04:49] <audreyt> ioref works here

[04:49] <cmarcelo> ops. my mistake

[04:50] <svnbot6> r12538 | audreyt++ | * Pugs.Internals: Even more encode/decode `seq`ing

[04:59] <wolverian> oh, what does the | do in: class Term t a | t -> a where...? I didn't find it in the specification

[05:02] <audreyt> it's fundep

[05:02] <audreyt> it's so much fun and addictive, you'll grow dependent on it

[05:02] <wolverian> yes, but what does it mean? :-)

[05:03] <wolverian> oh, should I look at the extensions?

[05:03] <wolverian> found it. thanks :)

[05:04] <wolverian> ...and it links to a paper. :D

[05:04] <audreyt> see ghc userguide 7.4.3. Functional dependencies

[05:05] <audreyt> roughly: multiparam typeclasses encode relationships

[05:05] <wolverian> ah. thanks

[05:05] <audreyt> some relationships can be fully determined only by some part of it

[05:05] <wolverian> I went straight to 7.4.7 .. reading the paper anyway

[05:06] <audreyt> in haskell-prime, the committee is considering fast-tracking associated types to replace fundep, though

[05:06] <audreyt> since fundep force you to write prolog in haskell :)

[05:10] <wolverian> hm.. the core doesn't use fundeps I gather?

[05:10] <wolverian> (of ghc)

[05:10] *** agentzh joined
[05:10] <TreyHarris> audreyt: how can I rebuild Prelude.pm.yml?  i don't need to know anymore since i'm making pugs again, but for next time i wondered

[05:10] <agentzh> TreyHarris: i was thinking about the "pugsbug" issue more seriously during my lunch and walk.

[05:11] <TreyHarris> ok?

[05:11] <agentzh> TreyHarris: perl util/gen_prelude.pl -v -i src/perl6/Prelude.pm -p .\pugs.exe --output blib6/lib/Prelude.pm.yml

[05:11] <audreyt> TreyHarris: rm blib6/lib/*yml ; make

[05:12] <TreyHarris> audreyt++ # r12537 fixes issue

[05:12] <agentzh> hmm, i think i should add the yaml refresh commands into prove6.

[05:12] <TreyHarris> ahhh... i left out the -p... part

[05:12] <agentzh> because i'm also using this command constantly.

[05:12] <TreyHarris> audreyt: that didn't work :-(

[05:13] <agentzh> TreyHarris: now i totally second your opinion. we should have a pugsbug directory or something like that.

[05:14] <agentzh> this directory holds separate files for special failing tests.

[05:15] <agentzh> the tests should be as simple as possible. so that audreyt++ can fix the bugs more easily.

[05:15] <agentzh> and more effectively.

[05:15] <TreyHarris> yes.  the only question i have is does it just accumulate tests forever?  or do we create a subdir for tests that now succeed

[05:15] <agentzh> but this directory shouldn't be under t/ since these tests are not supposed to run by ordinary test harness or smoke engine.

[05:16] <agentzh> it shouldn't accumulate tests.

[05:16] <TreyHarris> agentzh: eh?

[05:16] <agentzh> most of the tests in this directory should also be put into corresponding test files in the main test suite.

[05:17] <TreyHarris> old bugs come back to haunt you, you shouldn't delete them once fixed....

[05:17] <agentzh> if they're segfaulting, then comment out the copies in the main test suite.

[05:17] <TreyHarris> ah, i see.

[05:17] <TreyHarris> we might want to have a hardfail directory then

[05:18] <agentzh> TreyHarris: no problem, once the old bugs come back, we can detect them from the main test suite.

[05:18] <TreyHarris> with stuff that *isn't* in the language, that shouldn't work, but shouldn't cause the implementation to blow chunks

[05:18] <agentzh> and this directory shouldn't be included in the pugs release, i think.

[05:18] <agentzh> so no TODO trick is needed there.

[05:19] <agentzh> i'll be very willing to add new tests to such a directory because it's more likely to raise audreyt et al's attention.

[05:21] <agentzh> there shouldn't be too many noises in this directory and the test files should be kept minimal, or we'll lose the point.

[05:21] *** kanru joined
[05:23] <agentzh> TreyHarris: how about creating a "bug" directory at the same level of t/ ?

[05:23] <audreyt> er no

[05:23] <audreyt> xx-uncateg was known as t/bug/

[05:24] <agentzh> audreyt: but i think the tests in t/bug should be skipped by the test harness.

[05:24] <audreyt> but why?

[05:24] <agentzh> segfaulting is smoke's killer.

[05:25] <agentzh> (assume there's no timeout mechanism)

[05:25] <agentzh> also pugs' bugs are not necessarily to be other implementations' bugs.

[05:27] <agentzh> anyway these are solely my personal opinions. criticism welcome :)

[05:28] * agentzh goes back to util/smartlinks.pl.

[05:32] <svnbot6> r12539 | trey++ | With segfault fixed by audreyt++,

[05:32] <svnbot6> r12539 | trey++ | moving hash tests to t/data_types/hash.t

[05:37] *** justatheory joined
[05:45] <svnbot6> r12540 | agentz++ | [util/prove6]

[05:45] <svnbot6> r12540 | agentz++ | - added the --update-yml option. so now you can use the

[05:45] <svnbot6> r12540 | agentz++ |   following command to refresh Test.pm.yml and

[05:45] <svnbot6> r12540 | agentz++ |   Prelude.pm.yml:

[05:45] <svnbot6> r12540 | agentz++ |     util/prove6 --update-yml

[05:48] * agentzh loves JSAN's css and decides to steal that for smartlinks.pl.

[05:52] <cmarcelo> english speakers: is it "Pugs' trunk" or "Pugs's trunk"? or both?

[05:52] <gaal> agentzh++ but please consider factoring out the actual generation to the Makefiile

[05:53] <gaal> for Test.pm there's already a target

[05:53] <agentzh> audreyt: what's the simplest way to upload HTML files to feather? via SVN? (i always use SOCKS4 proxy to connect to feather)

[05:53] <gaal> for Prelude.pm.yml you'll need to add an option to build_pugs and run that

[05:53] <agentzh> gaal: (?)

[05:53] <gaal> note that build_pugs possibly constructs a larger Prelude than just src/perl6/Prelude.pm

[05:54] <agentzh> gaal: would you please fix util/prove6 for me?

[05:54] <gaal> agentzh: scp file feather.perl6.nl:

[05:54] <agentzh> gaal: what is scp?

[05:55] <gaal> agentzh: I will when I get cycles but that won't be for 10 hr

[05:55] <gaal> cmarcelo: I think either works.

[05:55] <gaal> agentzh: it's the ssh version of rcp

[05:55] <gaal> oh you're on windows

[05:55] <agentzh> ah, thanks!

[05:55] <gaal> @google pscp

[05:55] <lambdabot> http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html

[05:55] <lambdabot> Title: PuTTY Download Page

[05:57] <agentzh> pscp is already in my perl installation. yay!

[05:57] <gaal> you probably need to set the username:

[05:58] <gaal> pscp file [email@hidden.address]
[05:58] <agentzh> thanks!

[05:58] <gaal> also look in to "Paegant" on the same page, which allows you to do transfers with no need for manual password typing

[05:58] <TreyHarris> cmarcelo: the usual rule (though it isn't 100%) is that if when sounded out, it ends in a zzz sound, you do s', but if it ends in a sss sound, you do s's.  Pugs' sounds right to me

[05:59] <agentzh> k

[05:59] <cmarcelo> i'll stick with "Pugs' " then =)

[05:59] *** Khisanth joined
[06:04] <agentzh> gaal: when runing the command "pscp -load Feather [email@hidden.address] S02.html", i got the following error:

[06:04] *** ludan joined
[06:04] <agentzh> ssh_init: Host does not exist

[06:05] <ludan> hi

[06:05] <agentzh> but i *can* login to feather via putty.

[06:05] <agentzh> ludan: hi

[06:05] <ludan> i'm going to make a coffee, see you later

[06:07] * agentzh looks into psftp

[06:10] <svnbot6> r12541 | Sage++ | A first attempt at translating open(...). Not nearly complete, but at least some cases are handled.

[06:10] <TreyHarris> agentzh: that syntax doesn't look right to me, though it's been awhile since i've used pscp.  i don't think you need the "-load Feather" bit

[06:10] <agentzh> TreyHarris: i'm behind a firewall. i need the proxy settings.

[06:11] <cmarcelo> audreyt: http://pugs.blogs.com/pugs/2006/08/pugs_meets_judy.html

[06:12] <SageLT> Whew, I think I'm through for the night. Guess that's it for my Summer of Code.

[06:12] <TreyHarris> agentzh: ah.  did you do the set PATH=C:\putty\directory;%PATH% bit?

[06:13] <agentzh> TreyHarris: putty, pscp, and psftp are all in my perl's bin directory. :)

[06:16] <agentzh> obviously the -load option doesn't work for me. :(

[06:19] *** Gruber is now known as Grrrr

[06:19] <cmarcelo> audreyt: I asked english-enabled friends to review my original post, but fix it if something is wrong..

[06:19] <cmarcelo> sleep &

[06:19] *** cmarcelo left
[06:22] * agentzh gives up pscp and psftp, returning to svn-based file transfer.

[06:37] <agentzh> i've checked in the HTML files generated by util/smartlinks.pl to my svn repos on berlios:

[06:37] <agentzh> http://svn.berlios.de/svnroot/repos/unisimu/Perl/Syn/

[06:38] <lambdabot> Title: Revision 663: /Perl/Syn

[06:39] <agentzh> however, i think it's not appropriate to check them into the pugs repos. :)

[06:39] *** traecer left
[06:40] *** Aankhen`` joined
[06:46] <agentzh> wow, has any kind person silently fixed "http://dev.perl.org/css/perl.css" for me?

[06:47] <agentzh> the code snippets in the HTML files dramatically get bounded. :D

[06:48] <wolverian> bounded?

[06:52] <agentzh> wolverian: yes.

[06:54] <agentzh> wolverian: look at http://svn.berlios.de/svnroot/repos/unisimu/Perl/Syn/S02.html

[06:54] <lambdabot> Title: S02

[06:54] <svnbot6> r12542 | agentz++ | [util/smartlinks.pl]

[06:54] <svnbot6> r12542 | agentz++ | - fixed command line options with arguments.

[06:54] <svnbot6> r12542 | agentz++ | - formated the code snippets by stripping extra

[06:54] <svnbot6> r12542 | agentz++ |   indentation.

[06:55] <agentzh> oh, the HTML looks much nicer now. yay!

[06:55] <wolverian> oh. nice. I was looking at dev.perl.org

[07:00] <agentzh> now we have code snippets from the pugs test suite embedded directly into the synopses! hooray!

[07:00] <gaal> agentzh: try w/o a saved session? btw are you pushing to feather or d/ling from it?

[07:01] <agentzh> gaal: that didn't work either.

[07:01] <gaal> because that command line is for pulling from

[07:02] <agentzh> gaal: it was the connection timeout error.

[07:02] <agentzh> gaal: how about pusing files onto feather?

[07:02] <agentzh> *push

[07:02] <gaal> agentzh: pscp myfile [email@hidden.address]
[07:03] <gaal> if you want it on the web area, then pscp myfile [email@hidden.address]
[07:03] <agentzh> gaal: does this command take my proxy settings into account?

[07:03] <gaal> dunno, let's look at the docs...

[07:04] <gaal> hold on, which proxy? this is over ssh

[07:04] <agentzh> SOCKS4

[07:05] <agentzh> in fact, i wouldn't be able to connect to feather if there's no proxy. ;-)

[07:06] <agentzh> gaal: you fixed the css on perl.org?

[07:06] <gaal> how does your putty connection work?

[07:06] <gaal> agentzh: not I

[07:06] <agentzh> it's lovely. :)

[07:06] <agentzh> gaal: putty has a GUI.

[07:06] <gaal> agentzh: I'm aware of that :)

[07:06] <agentzh> i set the proxy in its GUI.

[07:07] <agentzh> JIT fixing++

[07:07] <gaal> that's a proxy it creates, not uses, no?

[07:07] <agentzh> i'm using a proxy offered by a company.

[07:08] <gaal> agentzh: I'm looking at the berlios html, is that the one you liked? it looks like yersterday's html to me...

[07:08] <agentzh> really?

[07:09] * agentzh is surprised.

[07:09] <agentzh> gaal: there's no border around the code snippets?

[07:10] <agentzh> i can see the border here in both IE and Firefox.

[07:10] <gaal> yes, there is a border

[07:10] <gaal> apart from that?

[07:10] <agentzh> so that's it.

[07:10] <gaal> ah

[07:10] <gaal> okay :)

[07:10] <gaal> I thought I added the border in smartlinks.pl...

[07:11] <agentzh> gaal++

[07:12] <gaal> but that's not my change. it says

[07:12] <gaal> style="border: 1px solid ; display: block;"

[07:12] <gaal> I said

[07:12] <agentzh> oh, yes, i see that.

[07:12] <gaal> style="display:block; border: 1px solid" :-)

[07:12] <agentzh> i didn't notice the change. :)

[07:12] <gaal> so someone else must have dunnit

[07:13] <gaal> (someone else)++, heh

[07:13] <agentzh> looking into the log now...

[07:13] <gaal> anymoose I should go now

[07:13] <gaal> have a nice day :)

[07:13] <agentzh> thanks!

[07:25] *** kane-xs joined
[07:31] * agentzh believes the Perl 6 test suite should serve as a good extension to the Perl 6 Spec.

[07:33] *** masak joined
[07:36] *** iblechbot joined
[07:37] <audreyt> agentzh: want to write about this a bit to perl6-language and/or pugs.blogs.com? (just sent you a blog bit)

[07:38] <TreyHarris> agentzh: I can't figure out why the snippet of syntax/force_context.t appears immmediately above "return 0 but True" in S02, can you explain it to me?

[07:38] <agentzh> audreyt: already sent a mail to p6l and p6c.

[07:38] <TreyHarris> the smartlink to me doesn't specify that place

[07:38] <agentzh> TreyHarris: looking

[07:39] <agentzh> audreyt: thanks for the blog bit. :)

[07:40] <agentzh> TreyHarris: yes, that's a bug in smartlinks.pl.

[07:40] <agentzh> thanks for the catch. ;-)

[07:40] <agentzh> there's also a bug related to "empty" snippet.

[07:41] <agentzh> i'll try to fix them in the next 2 hours or so. :)

[07:41] <TreyHarris> heh.  right, i was about to say that.  "empty" meaning consisting of just the test, right?

[07:43] *** ilogger2 joined
[07:43] *** gantrixx joined
[07:43] *** Bit-Man joined
[07:43] *** rafl joined
[07:44] *** takanori joined
[07:44] *** rashakil joined
[07:44] *** miyagawa_ joined
[07:46] *** lollan joined
[07:46] *** nperez joined
[07:46] *** dakkar joined
[07:46] *** lumi joined
[07:47] *** pmurias joined
[07:47] *** broquaint joined
[07:47] *** JarJarBinks joined
[07:47] *** hcchien joined
[07:47] *** xern joined
[07:47] *** rgs joined
[07:47] *** kalven joined
[07:47] *** revdiablo joined
[07:47] *** dvorak joined
[07:47] *** cookys joined
[07:47] *** notsri joined
[07:47] *** LCamel joined
[07:47] *** Frances joined
[07:47] *** obra joined
[07:47] *** Yappo joined
[07:47] *** c6rbon joined
[07:47] *** clkao joined
[07:48] *** pmurias_ joined
[07:48] *** cognominal joined
[07:48] *** f0rth joined
[07:50] *** marcus_ joined
[07:52] *** Maddingue joined
[07:53] *** tcliou joined
[07:53] *** Grrrr joined
[07:53] *** Southen joined
[07:55] *** Psyche^ joined
[07:55] *** Psyche^ is now known as Patterner

[07:59] *** Juerd joined
[08:02] *** masak joined
[08:02] *** Eidolos joined
[08:02] *** shachaf joined
[08:03] *** ajs_home joined
[08:03] *** glasser joined
[08:03] *** awwaiid joined
[08:04] *** buu joined
[08:04] *** xerox joined
[08:10] *** ruoso joined
[08:11] <pasteling> "agentzh" at 210.22.200.67 pasted "I wonder why i can't get into #perl6 :(" (1 line, 8B) at http://sial.org/pbot/19176

[08:12] *** agentzh joined
[08:12] <agentzh> oh, finally back...

[08:12] <audreyt> was netsplit

[08:13] <agentzh> TreyHarris: no, being "empty" means the smartlink is pointing to the same code snippet of the next smartlink.

[08:13] *** baest joined
[08:14] <agentzh> in other words, adjacent smartlinks share the same code snippet right below them. :)

[08:15] <agentzh> i think i should have added this to t/README...

[08:15] <agentzh> adding now...

[08:16] <agentzh> Juerd: can i keep a small perl script running on feather so that it can awake every 6 hours and update the HTML version of synopses automatically using smartlinks.pl?

[08:17] <agentzh> (the sentence above is a bit long...)

[08:17] <audreyt> yes you can . :)

[08:17] <agentzh> thanks!

[08:19] *** evalbot_12542 joined
[08:21] *** nekokak joined
[08:25] <agentzh> audreyt: are you using the pugs working copy actively on feather? can i point the program to read the test suite under your working copy?

[08:25] <audreyt> sure

[08:25] <audreyt> ~audreyt/pugs/ is constantly updated

[08:25] <audreyt> (by evalbot)

[08:25] <agentzh> oh, it's very nice!

[08:26] <audreyt> :))

[08:36] <agentzh> oh, svnbot is no longer here. :(

[08:38] <agentzh> gaal: (someone else)++ === (gaal)++

[08:38] <agentzh> lol

[08:40] *** svnbot6 joined
[08:40] <audreyt> the bot should be made netsplit-safe

[08:49] * agentzh encounters the concept of netsplit for the first time.

[08:49] <svnbot6> r12544 | audreyt++ | * Remove third-party/TextRegexLazy now we have scw++'s alternate

[08:49] <svnbot6> r12544 | audreyt++ |   plan based on parsec combinators.

[08:52] <agentzh> after fixing this bug in smartlinks.pl, luqui++'s point that we can only copy closures at the same source code position is now much clearer to me.

[08:52] <svnbot6> r12545 | agentz++ | [util/smartlinks.pl]

[08:52] <svnbot6> r12545 | agentz++ | - fixed the "empty" snippet bug. multiple adjacent smartlinks should share the same snippet of tests right below them.

[08:58] <clkao> fglock: v6 is generating something stupid like "  return ( unless ( [ \( $Test::testing_started, ) ], {} ) );"

[08:58] <svnbot6> r12546 | agentz++ | [util/smartlinks.pl]

[08:58] <svnbot6> r12546 | agentz++ | - warn a message to stderr if empty snippets are detected at runtime (so as to make sure the previous bug is truly fixed)

[09:03] <agentzh> supper &

[09:03] *** agentzh left
[09:07] *** elmex joined
[09:08] *** drrho joined
[09:15] *** pmurias_ left
[09:17] *** tup joined
[09:35] *** chris2 joined
[09:39] *** buetow joined
[09:56] *** pmurias_ joined
[09:57] <pmurias_> how do i flush stdin in p6?

[09:58] <pmurias_> for =<> -> { say "?" } is not lined buffered on feather

[10:06] <audreyt> hmm. might be accidentally disabled by the decode strict fix

[10:06] <audreyt> a sec

[10:12] <audreyt> yeah. fixing

[10:15] <audreyt> fixed (I think.) testing

[10:16] <audreyt> try again?

[10:16] <svnbot6> r12547 | audreyt++ | * pmurias++ pointed out that =<> and =<file> and =$fh

[10:16] <svnbot6> r12547 | audreyt++ |   was accidentally made strict.

[10:31] *** rindolf joined
[10:35] *** borisz joined
[10:36] *** borisz left
[10:43] <pmurias_> audreyt: i use the feather build so i can't try it yet

[10:46] <audreyt> there's the evalbot build

[10:46] <audreyt> ~audreyt/pugs/pugs

[10:46] <audreyt> that worksforme

[10:47] <audreyt> pmurias_: what is this feather-build you refer to?

[10:50] <pmurias_> /usr/bin/pugs - isn't it the stable realase... :)

[10:50] <Juerd> That lags far behind. rafl doesn't maintain this installation anymore, I think.

[10:50] <audreyt> er no

[10:50] <audreyt> that is 6.2.10

[10:51] <audreyt> it's built about 10 months ago

[10:51] <audreyt> I wouldn't mind ln'ing it to ~audreyt/pugs/pugs

[10:51] <Juerd> audreyt: Great. I'll apt-get remove pugs then. Will you do the rest?

[10:52] <audreyt> sure!

[10:52] <pmurias_> undecleared $module

[10:52] <Juerd> Super

[10:52] <Juerd> Done

[10:52] <Juerd> That is - doing.

[10:52] <Juerd> Done.

[10:54] <audreyt> done.

[10:54] <audreyt> pmurias_: try again?

[10:54] <pmurias_> works

[10:55] <audreyt> yay

[11:01] <pmurias_> audreyt: does your version use PGE?

[11:03] <audreyt> try again

[11:03] <audreyt> I populated /usr/bin/parrot too

[11:06] <pmurias_> it uses PGE

[11:07] <audreyt> good

[11:09] <pmurias_> could you look at ~/pmurias/ed.pl

[11:09] <pmurias_> it prints "print" on output not containing numbers,why?

[11:10] <audreyt> drop the ->

[11:10] <audreyt> $_ is not yet lexical

[11:10] <audreyt> so it's seeing bad things

[11:11] <audreyt> for @x -> {...} # this means to ignore values in @x

[11:11] <audreyt> for @x {...} # this means to put values in @x to $_

[11:11] <Juerd> What's hindering lexicalization of $_?

[11:11] <audreyt> previously, it's all the $CALLER::_ defaults that was hindering it

[11:12] <audreyt> now, there's nothing hindering it, so it should be done as part of Code refactoring that luqui/gaal/audreyt/etc are pushing

[11:12] * audreyt is glad that $CALLER::_ defaults are gone.

[11:12] <Juerd> Sounds positive :)

[11:12] <audreyt> sure :)

[11:12] * Juerd has to go to $office, but doesn't want to.

[11:13] <Juerd> I've led a group of 15 kids (ages 13..16) for a week, and don't feel like going back to work :)

[11:13] <audreyt> maybe you found your calling :)

[11:14] <Juerd> I found it years ago, but now for the first time had the opportunity to actually do it :)

[11:14] <Juerd> This is with an organization where I've been one of the kids for 10 years :)

[11:14] <Juerd> They organize summer computer camps.

[11:14] <Juerd> In three age groups, 9..13; 13..16; 16..20

[11:15] <audreyt> pmurias_: also for some reason it needs to be written

[11:15] <audreyt> if $_ ~~ m/\d/

[11:15] <audreyt> investigating

[11:20] <pmurias_> it doesnt work

[11:20] <pmurias_> for me

[11:21] <audreyt> you mean even with dropping -> and saying (if $_ ~~ m/\d/) ?

[11:22] <audreyt> for =<> { if $_ ~~ /^\d/ { say "print" } }

[11:22] <audreyt> this works for me

[11:22] <pmurias_> i tire if m/

[11:23] <pmurias_> *tried

[11:23] <audreyt> that is a bug. fixed

[11:23] <rindolf> What is the "~~" operator ?

[11:24] <audreyt> http://search.cpan.org/dist/perl/pod/perlsyn.pod#Switch_statements_____

[11:24] <lambdabot> Title: NAME syntax - search.cpan.org

[11:24] <pmurias_> the generalisation of =~

[11:24] <rindolf> pmurias_: I see.

[11:24] <rindolf> pmurias_: is =~ still available in p6?

[11:25] <lumi> Yes, it's spelt ~~

[11:25] <pmurias_> is there an equivalent of Perl::Tidy for p6?

[11:26] <audreyt> no, not yet. want to write one? :) you can probably hook a Emit::Perl6 to v6.pm

[11:27] <pmurias_> i abbandoned my plans for an yhc backend and i'm working on an ed(1) in p6

[11:27] <pmurias_> and indenting code in ed doesnt work great...

[11:27] <audreyt> nice!

[11:27] <svnbot6> r12548 | audreyt++ | * In boolean context, m// and // should match against $_.

[11:27] <svnbot6> r12548 | audreyt++ |   Reported by pmurias++

[11:28] <audreyt> pmurias_: there you go :)

[11:28] <audreyt> (/usr/bin/pugs on feather will be refreshed every 10 min or so)

[11:30] <Juerd> [fast compiling pugs]++

[11:30] <svnbot6> r12549 | agentz++ | [t/README]

[11:30] <svnbot6> r12549 | agentz++ | - added discussion of multiple adjacent smartlinks.

[11:30] <svnbot6> r12549 | agentz++ | - added the command to generate HTML using smartlinks.pl.

[11:30] <svnbot6> r12548 | audreyt++ | * In boolean context, m// and // should match against $_.

[11:30] <svnbot6> r12548 | audreyt++ |   Reported by pmurias++

[11:32] <audreyt> ?eval $_ = 10; if /10/ { say 'hi' }

[11:32] *** evalbot_12542 is now known as evalbot_12548

[11:32] <evalbot_12548> OUTPUT[hi ] Bool::True

[11:32] <audreyt> ?eval $_ = 10; if /11/ { say 'hi' }

[11:32] <evalbot_12548> undef

[11:32] <audreyt> cool

[11:38] <xerox> audreyt: watch this:

[11:38] <xerox> [1 of 1] Compiling ByteStringParser ( ByteStringParser.hs, interpreted )

[11:38] <xerox> Ok, modules loaded: ByteStringParser.

[11:38] <xerox> *ByteStringParser>

[11:41] <audreyt> url?

[11:42] <xerox> I can mail it to you, it doesn't do much now anyway

[11:43] * nothingmuch wonders whether Verby should be broken up into many dists

[11:48] *** cookys joined
[11:53] <audreyt> xerox: is this based on parsec?

[11:53] <xerox> No

[11:53] <xerox> It's a rewrite from scratch

[11:53] <xerox> *ByteStringParser> parseTest (pMany (pChar '1')) (Data.ByteString.Char8.pack "1111")

[11:53] <xerox> "1111"

[11:53] <audreyt> oh. I did that once...

[11:53] <audreyt> with PArrows

[11:53] <xerox> That is stepcut's work

[11:54] <audreyt> nod

[11:54] <xerox> Interesting

[11:54] *** bpphillips joined
[11:54] <audreyt> src/Text/Parser/PArrow.hs is my work, based on musasabi's

[11:54] <audreyt> mail me a copy anyway?

[11:54] <xerox> Okay

[11:54] <audreyt> have you talked to stepcut about licensing?

[11:55] <xerox> Nope

[11:55] <xerox> It says:

[11:55] <xerox> -- Module      :  ByteStringParser

[11:55] <xerox> -- Copyright   :  (c) Jeremy Shaw 2006

[11:55] <xerox> -- Copyright   :  (c) Daan Leijen 1999-2001

[11:55] <xerox> -- License     :  BSD-style (see the file libraries/parsec/LICENSE)

[11:55] <audreyt> good enough

[11:58] <xerox> Where do you want it mailed?

[12:04] <svnbot6> r12550 | agentz++ | [util/smartlinks.pl]

[12:04] <svnbot6> r12550 | agentz++ | - fixed the duplicate "syntax/force_context.t"

[12:04] <svnbot6> r12550 | agentz++ |   snippets bug reported by TreyHarris++.

[12:04] <svnbot6> r12550 | agentz++ |   (it was matching against code snippets as well as

[12:04] <svnbot6> r12550 | agentz++ |    true POD paragraphs.)

[12:11] <audreyt> xerox: audreyt at audreyt dot org

[12:11] <rindolf> Hi audreyt

[12:11] <xerox> Sent

[12:12] <audreyt> danke

[12:14] *** weinig joined
[12:18] <audreyt> cool minimal design

[12:18] <xerox> Yes!

[12:19] <audreyt> but I like Parsecs error reporting

[12:19] <audreyt> Unexpect / Expect

[12:20] * audreyt ponders hacking that in

[12:20] <audreyt> nah. MOP first :)

[12:20] *** Limbic_Region joined
[12:21] <xerox> Okay :)

[12:21] <audreyt> but thanks :) my $job can use this :)

[12:22] <lumi> Can it be that make doesn't drift but make fast does?

[12:22] <xerox> Uhu

[12:22] <audreyt> lumi: possibly

[12:22] <Limbic_Region> audreyt - did you happen to work on the Win32 opendir/readdir/etc over the weekend?

[12:22] <audreyt> er wait

[12:22] <audreyt> no

[12:23] <audreyt> Limbic_Region: sorry, I didn't realize it was broken

[12:23] <audreyt> so no

[12:23] <audreyt> was it broken?

[12:23] <audreyt> (I didn't add error reporting)

[12:23] <xerox> audreyt: send back patches, if you happen to have sendable ones :D

[12:23] <Limbic_Region> yes - you must have been really tired when you went to sleep at 4am on Friday

[12:23] * Limbic_Region will check this morning as I am building fresh

[12:23] <audreyt> that I was...

[12:24] <audreyt> so, remind me: how is it broken? which test should I look at?

[12:24] <Limbic_Region> it was actually my File::Find code for testing examples better

[12:24] * Limbic_Region will re-nopaste in a sec

[12:24] <Limbic_Region> want to tell you the only revision it actually worked in

[12:25] <audreyt> oh that

[12:25] <audreyt> no I didn't look into that

[12:25] <audreyt> but I wonder if the bug was in opendir or not

[12:25] <Limbic_Region> 12424

[12:25] <Limbic_Region> your thinking on Friday was that it was getting an undef dir or something

[12:26] <audreyt> if you svn up now

[12:26] <Limbic_Region> and I was going to sprinkle debug prints throughout File::Find

[12:26] <audreyt> (no rebuild needed)

[12:26] <audreyt> does t/builtins/io/dir.t

[12:26] <audreyt> pass?

[12:26] <Limbic_Region> audreyt - already building fresh from most recent checkout

[12:26] <audreyt> okie. I just commented out the win32 line on dir.t

[12:26] * Limbic_Region does so after weekends regardless because Win32 seems to require realcleans far more than any other OS

[12:26] <svnbot6> r12551 | audreyt++ | * opendir tests - uncomment in win32

[12:27] <Limbic_Region> it just saves me time

[12:27] <audreyt> I understand

[12:27] <audreyt> as a consolation, win32's GHC in optimized mode is much faster than on unix.

[12:27] <Limbic_Region> cool beaners - moldy chicken

[12:27] <audreyt> did you say you were currently building?

[12:28] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "File::Find code that was (and possibly still is) bombing on Win32" (14 lines, 295B) at http://sial.org/pbot/19179

[12:28] <Limbic_Region> yes

[12:29] <Limbic_Region> but it is early enough to restart if there is something you wanted to try

[12:29] <audreyt> ok. give me 2min

[12:29] <Limbic_Region> so build 12424 was the only build that actually worked once you started using ghc's code for the dir io stuff

[12:29] <Limbic_Region> after that - it just kept silently exiting

[12:30] <Limbic_Region> but then again, I didn't touch it all weekend myself

[12:34] <audreyt> I didn't touch that codeline after r12424 either

[12:34] <svnbot6> r12552 | audreyt++ | * build_pugs.pl: "make profiled" will also rebuild third-party

[12:34] <svnbot6> r12552 | audreyt++ |   as profiled if needed.

[12:35] <Limbic_Region> over 100 commits over the weekend - yippee

[12:36] <audreyt> please build r12254

[12:36] <svnbot6> r12553 | audreyt++ | * Remove the lazy UTF8.lhs and fold encode/decodeUTF8

[12:36] <svnbot6> r12553 | audreyt++ |   back into Pugs.Internals as strict inlinable functions,

[12:36] <svnbot6> r12553 | audreyt++ |   which netted us lots of space win.

[12:36] <svnbot6> r12554 | audreyt++ | * Pugs.Parser.Operator: Let-float the currently-static levels

[12:36] <svnbot6> r12554 | audreyt++ |   of the operator table for both speed win (10%) and clarity.

[12:36] <audreyt> pugs should be noticeably faster over the weekend

[12:37] <Limbic_Region> well, it was already noticeably faster on Friday afternoon

[12:37] <audreyt> smoke on my machine drops to <8min

[12:37] <audreyt> on Friday it was still 12min or 12min

[12:37] <audreyt> yeah, that is was

[12:38] <audreyt> (bbiab)

[12:42] *** explorer joined
[12:47] *** weinig joined
[12:48] <xerox> Why isn't the Haskell community hacking ghc at large as perl6 is on his compiler? :(

[12:50] <audreyt> the ghc hackathon will change that :)

[12:50] <audreyt> (we talked about this in ICFP'05, where I foolishly jumped in and hacked GHC without knowing anything about it)

[12:50] <xerox> Yarrr

[12:50] <xerox> Another reason to be there...

[12:50] <xerox> Sigh.

[12:50] <audreyt> and identified (darcs, trac, hackathon) as the neccessary ingredients

[12:52] *** explorer joined
[12:52] *** jferrero joined
[12:53] *** Qiang joined
[12:55] <Limbic_Region> audreyt - 12552-12554 aren't necessary for me to test the Win32 dir io stuff right?

[12:56] <Limbic_Region> . o O ( he says being very very paranoid )

[12:56] <audreyt> no

[12:56] <audreyt> just uncomment the win32 line in dir.t

[12:56] <audreyt> t/builtins/io/dir.t

[12:56] <audreyt> and run it, and see if it works

[12:57] <Limbic_Region> ok, just made it to the heap exhaustion point - the second nmake doesn't take nearly as long to finish

[12:58] <audreyt> actually if you are feeling adventurous

[12:58] <audreyt> I wonder if heap exhaustion is gone in GHC 6.5-win32

[12:58] <audreyt> which can be installed from http://www.haskell.org/ghc/dist/current/dist/ghc-6.5.20060819-i386-unknown-mingw32.tar.gz

[12:59] <audreyt> but test that only if you have spare cycles :)

[13:07] *** lollan joined
[13:07] <audreyt> xerox: looks like the upcoming GHC hackathon may have 30+ people

[13:07] <audreyt> that's comparable to the largest perl6 hackathon yet

[13:08] <xerox> Really? Wow.

[13:08] <audreyt> bottom of http://hackage.haskell.org/trac/ghc/wiki/Hackathon

[13:08] <lambdabot> Title: Hackathon - GHC - Trac

[13:08] <xerox> On another front, I was thinking about mailing all the soc people and find out what's going on now that is finished

[13:08] <xerox> Maybe have them write two lines on the wiki

[13:10] <svnbot6> r12555 | fglock++ | v6 - optimize Parse::Yapp output; gets another 10% speed

[13:10] <Limbic_Region> audreyt - all 18 passed

[13:10] <Limbic_Region> yippee

[13:10] <Limbic_Region> now to test my code

[13:11] <Limbic_Region> ok, my code still no workie - and no error messages in output

[13:11] <Limbic_Region> so sprinkle lots of debugging print statements throughout File::Find?

[13:12] *** mauke_ joined
[13:13] <audreyt> yeah

[13:13] <audreyt> I think the bug is in the rel2abs call

[13:13] *** cjeris joined
[13:14] <Limbic_Region> Ok - this is odd

[13:15] <Limbic_Region> I disagree

[13:15] *** chaoslawful joined
[13:15] *** fglock joined
[13:15] <Limbic_Region> putting a say "Entering sub" as the first line of the find method doesn't even print

[13:15] *** lisppaste3 joined
[13:15] * Limbic_Region is going to wipe out the entire body of the sub and see what happens

[13:16] <audreyt> you can also use pugs -d

[13:16] <audreyt> to see what's really happening

[13:16] <audreyt> pugs -d yourprog > log

[13:16] <Limbic_Region> will do - but first

[13:16] <Limbic_Region> changing the method sub to the following body { say "entering sub"; return 1 }

[13:16] <Limbic_Region> results in no output either

[13:17] *** mauke_ is now known as mauke

[13:17] <Limbic_Region> oh wait, I think I know what is going on here

[13:18] <Limbic_Region> duh

[13:19] <Limbic_Region> can't modify the File::Find in ext/ and expect it to affect the one in blib6/lib

[13:19] <Limbic_Region> it must be Monday

[13:19] <fglock> can I get an older revision using plain svn?

[13:20] <audreyt> svn up -r 12380

[13:21] <fglock> thanks

[13:21] <audreyt> np :)

[13:22] <Limbic_Region> audreyt - found the first anomoly - @start = @dirs || @.dirs; is empty though in my script $f.dirs = ('examples');

[13:23] <audreyt> yes that's a bug

[13:23] <audreyt> try cgiving it an array

[13:23] <audreyt> $f.dirs = ['examples']

[13:23] <Limbic_Region> ok

[13:24] <Limbic_Region> same result - nada

[13:25] <Limbic_Region> is there a way to dump a code ref to see the actual code?

[13:26] <audreyt> ?eval class C { has @.dirs; method x { say @.dirs } }; my C $c .= new; $c.dirs = ['x']; $c.x

[13:26] *** evalbot_12548 is now known as evalbot_12555

[13:26] <evalbot_12555> pugs: Enum.toEnum{Word32}: tag (-1229482828) is outside of bounds (0,4294967295)

[13:26] <audreyt> ?eval class C { has @.dirs; method x { say @.dirs } }; my C $c .= new; $c.dirs = ['x']; $c.x

[13:26] <evalbot_12555> pugs: Enum.toEnum{Word32}: tag (-1227385676) is outside of bounds (0,4294967295)

[13:26] <audreyt> wt...

[13:26] <audreyt> that works locally.

[13:26] <audreyt> actually the other way works too

[13:26] <audreyt> can you try

[13:27] <audreyt> @start = (@dirs ?? @dirs !! @.dirs) ?

[13:27] <lambdabot> Maybe you meant: part state

[13:27] *** baest joined
[13:27] <Limbic_Region> sure

[13:29] <Limbic_Region> nada

[13:29] <Limbic_Region> IOW - I am fairly certain @dirs and @.dirs is empty

[13:30] <audreyt> my $f = File::Find.new( wanted_file => ..., dirs => ['examples'] );

[13:30] <audreyt> does that work?

[13:30] * audreyt ponders what's wrong...

[13:31] * Limbic_Region tries

[13:32] <Limbic_Region> took much longer to run, but still no output

[13:33] <svnbot6> r12556 | audreyt++ | * Allow pretty-printing subroutine body so that {...}.perl

[13:33] <svnbot6> r12556 | audreyt++ |   would print something.  It's not perl, though -- takers

[13:33] <svnbot6> r12556 | audreyt++ |   welcome to implement a real Pretty instance for Exp that

[13:33] <svnbot6> r12556 | audreyt++ |   dumps back to perl6.

[13:33] <Limbic_Region> remember - this worked in 12424 which is really odd to me

[13:36] <Limbic_Region> audreyt - ok, just discovered that things are working - sorta

[13:37] <pmurias_> how do i specify the http proxy in svk?

[13:38] <audreyt> I got it.

[13:38] <audreyt> pmurias_: in ~/.subversion/servers

[13:38] <pmurias_> thanks

[13:39] <Limbic_Region> audreyt - I put a say statement in the wanted_file code ref - it is executing

[13:39] <Limbic_Region> repeatedly I might add

[13:42] <audreyt> the bug was in that named list params

[13:42] <audreyt> when there's no default

[13:42] <audreyt> assumes a default =undef

[13:42] <audreyt> so @dirs is actually true

[13:42] <audreyt> and always shadows @.dir

[13:43] <audreyt> ?eval sub { 1234 }.perl

[13:43] *** evalbot_12555 is now known as evalbot_12556

[13:43] <evalbot_12556> pugs: Enum.toEnum{Word32}: tag (-1227381580) is outside of bounds (0,4294967295)

[13:43] <audreyt> ?eval 1+1

[13:43] <evalbot_12556> pugs: Enum.toEnum{Word32}: tag (-1229478732) is outside of bounds (0,4294967295)

[13:43] <Limbic_Region> evalbot is fubar

[13:44] <Limbic_Region> so this is really strange

[13:45] <Limbic_Region> since @start is empty - it is starting at pwd

[13:45] <Limbic_Region> it is hitting every single file in the pugs build dir

[13:45] <Limbic_Region> and it isn't pushing any of them onto $.results because

[13:46] <Limbic_Region> well, I am not sure why nothing is getting pushed onto $.results

[13:48] <Limbic_Region> return 1 if $file ~~ m:P5/^.*\.pl$/; # should return 1 for any file ending in .pl correct?

[13:49] <ayrnieu> return 1 if $file ~~ m:p5/\.pl$/;

[13:52] <audreyt> the defaulting prolem is fixed

[13:52] <Limbic_Region> ayrnieu - it's not my regex, it is in the synopsis for File::Find - my question was that it should work

[13:53] <Limbic_Region> and in fact it does work, and $.results.push($abs) is happening - but for some reason the code is not finishing to produce the results

[13:54] *** thepler joined
[13:54] <Limbic_Region> audreyt - do you suspect this will sove the problem?

[13:55] <audreyt> let me commit the :@dir first

[13:55] <audreyt> no, it's orthogonal, but at least it will let you get 'examples'

[13:55] <Limbic_Region> I don't for the following reason - in method find, I hardcoded @start to examples and it still is not working

[13:55] <Limbic_Region> ok

[13:55] <Limbic_Region> so this is just so we can find the next whacky thing going on

[13:56] <audreyt> fwiw, it worked for me.

[13:56] <audreyt> i.e. your code verbatim now runs here

[13:56] <svnbot6> r12557 | audreyt++ | * Fix defaulting of named :@x so it gets bound to (), not (undef),

[13:56] <svnbot6> r12557 | audreyt++ |   when there's no incoming argument 'x'.

[13:56] <Limbic_Region> well, thats a good thing

[13:56] <audreyt> and the content of @file is correct

[13:59] <Limbic_Region> is $f.dirs = qw/examples/; ok or should it still be ['examples']?

[13:59] <audreyt> cmarcelo: r12701 made feather segfault :-/

[13:59] <audreyt> cmarcelo: offending instance:

[13:59] <audreyt> instance Refeable Int where toRef i = return $ toEnum i

[14:01] <audreyt> i.e. negative ints will be rejected

[14:01] <audreyt> that's kinda wrong :/

[14:01] <audreyt> we want to map negative ints to large unsigned word instead

[14:02] <pmurias_> can rules take params like:

[14:03] <pmurias_> rule greet($who) {Hello $who,?}

[14:04] <pmurias_> i skimed through the rule part of the synopsis but i can't find anything

[14:05] <svnbot6> r12558 | audreyt++ | * Provide hand-crafted instance to make toEnum happier

[14:05] <svnbot6> r12558 | audreyt++ |   so we can continue using IntMap.

[14:05] <SamB> re-feable?

[14:05] <SamB> what does that mean?

[14:06] <audreyt> referable, persumable

[14:06] <audreyt> referable, persumably

[14:07] <audreyt> pmurias_: yes, and pmichaud uses this calling syntax: /<greet: foo>/

[14:08] <audreyt> but I think he and fglock eventually settled to /<greet('foo')>

[14:09] <audreyt> and both are canonicalized to S05

[14:09] <audreyt> line 642 I think.

[14:11] <pmurias_> i was vagly aware of the calling syntax,

[14:11] <pmurias_> i wasn't sure how you define them

[14:12] <pmurias_> pmichaud codes some of his rules in pir

[14:13] *** hexmode joined
[14:16] <audreyt> S05:642 explains it succintly

[14:16] <svnbot6> r12559 | audreyt++ | * build_pugs.pl: oops, typo.

[14:16] <svnbot6> r12560 | audreyt++ | * Switch back to HashTable in Pugs.Parser.Operator for now

[14:16] <svnbot6> r12560 | audreyt++ |   as the ReversibleHashIO instance's use of toEnum seems

[14:16] <svnbot6> r12560 | audreyt++ |   still to cause panic on feather -- no time to debug tonight.

[14:17] <pmurias_> audreyt: i use printed out synopses,i'll check the online copy

[14:17] <pmurias_> y

[14:18] <audreyt> ok. grep for =head1 Extensible metasyntax (C<< <...> >>)

[14:18] <audreyt> at about 20% into the text

[14:20] <Limbic_Region> audreyt - I am almost finished building 12558

[14:20] <Limbic_Region> if this no workie then I will try and debug on my own to give you something specific to look at

[14:20] <audreyt> ok

[14:20] <audreyt> locally it works

[14:20] <audreyt> so if fails for you, might be a win32 thing

[14:20] <audreyt> I'm using unmodified Find.mp

[14:21] *** neoesque joined
[14:22] <Limbic_Region> ok, step 1 is good @start contains examples

[14:22] *** evalbot_12560 joined
[14:23] <Limbic_Region> and so the program is dying somewhere in the while $dir = $.queue.shift loop since a say at the end of that loop is never printed out and thus $.results is never returned

[14:23] <Limbic_Region> so I try and determine what dir and/or file it is bombing on

[14:25] <svnbot6> r12561 | masak++ | collected another reference. I'm done backlogging August now... July, here I come

[14:26] <audreyt> ?eval 1+1

[14:26] <evalbot_12560> 2

[14:26] <Limbic_Region> yeah, evalbot is fixed

[14:27] *** vel joined
[14:27] <Limbic_Region> s/yeah/yay/

[14:32] <audreyt> sorry I need to fade now :) $job tomorrow morning

[14:32] <audreyt> *wave*

[14:32] <Limbic_Region> audreyt - good new

[14:32] <Limbic_Region> news even

[14:32] <Limbic_Region> telling it to ignore .svn directories caused it to work

[14:32] <audreyt> yay

[14:32] * Limbic_Region moves on to finishing the rest

[14:33] <audreyt> Limbic_Region++

[14:33] <audreyt> I don't have a .svn file here, that might be the diff :)

[14:33] <Limbic_Region> .svn should be ignored anyway

[14:33] <audreyt> yup

[14:33] <audreyt> *wave* &

[14:33] <Limbic_Region> thanks and sleep well

[14:53] *** prefiks joined
[14:56] <svnbot6> r12562 | fglock++ | v6 - some fixes, works with current Test.pm

[14:58] *** [particle] joined
[14:59] <fglock> new v6.pm times: 1.1s for one-liners, 5.5s for Test.pm

[14:59] *** alinbsp joined
[15:00] *** pbuetow joined
[15:14] <svnbot6> r12563 | fglock++ | v6 - fix warnings running Test.pm

[15:15] *** fglock left
[15:22] <Limbic_Region> anyone running Win32 able to test something for me?

[15:25] <cjeris> Limbic_Region: ?

[15:26] *** dbrock joined
[15:26] <Limbic_Region> cjeris - are you up to the latest rev?

[15:28] <cjeris> just built r12560

[15:28] <Limbic_Region> close enough

[15:28] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "put this in foo.pl in the pugs build root dir and run it as pugs.exe -Iblib6/lib foo.pl" (21 lines, 378B) at http://sial.org/pbot/19183

[15:29] <Limbic_Region> then nopaste the results to me

[15:30] <pasteling> "cjeris" at 140.247.124.140 pasted "result of Limbic_Region's run" (2 lines, 48B) at http://sial.org/pbot/19184

[15:31] <cjeris> sorry, it's r12561 not 12560

[15:31] <Limbic_Region> cjeris - now change the $f.debug = 0; line to $f.debug = 1; tell me if the last line of output is "bye\n";

[15:31] *** flips_and_rails joined
[15:31] <Limbic_Region> no worries - it is recent enough to have included all the lastest audreyt commits

[15:31] *** amnesiac joined
[15:31] * cjeris watches the script enumerate the examples directory, slowly :D

[15:32] <Limbic_Region> this is truly weird

[15:32] <svnbot6> r12564 | audreyt++ | * Pugs.Internals: Revive the ability for Var/ID to be CString

[15:32] <svnbot6> r12564 | audreyt++ |   (critical for embedded nulls in face of Judy.StrMap), by

[15:32] <svnbot6> r12564 | audreyt++ |   encoding \0 internally as \xC0\x80.

[15:32] <svnbot6> r12564 | audreyt++ |   -- In the \0 case, we diverge from the Unicode standard to remove any trace

[15:32] <svnbot6> r12564 | audreyt++ |   -- of embedded nulls in our bytestrings, to allow the use of Judy.StrMap

[15:32] <svnbot6> r12564 | audreyt++ |   -- and to make passing CString around easier.  See Java for the same treatment:

[15:32] <svnbot6> r12564 | audreyt++ |   -- http://java.sun.com/j2se/1.5.0/docs/api/java/io/DataInput.html#modified-utf-8

[15:32] <svnbot6> r12564 | audreyt++ |   Note that we should not do that across I/O boundaries...

[15:32] <svnbot6> r12564 | audreyt++ |   So a more elaborate treatment in ByteString is needed anyway.

[15:32] <Limbic_Region> you are getting the same results as me

[15:33] <cjeris> ok, so there is a long list of +d/-d, etc lines, then a BIG line which I guess is the out of say ~@files; then two lines 'bye' '1..0' .

[15:34] <Limbic_Region> cjeris - I am going to nopaste something and hopefully you can make sense of it

[15:37] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "See blib6\lib\File\Find.pm and comments below" (61 lines, 1.7K) at http://sial.org/pbot/19185

[15:37] <Limbic_Region> basically, the inclusion of say "something"; gets it to work and produce the correct result if placed in 4 locations but the absense of which exits abnormally with no error

[15:37] <Limbic_Region> IMO - that's weird

[15:38] <cjeris> so, when you put the 'say's in only some of the places, does it give you only some of the results?

[15:38] <cjeris> or does it die the first time it hits a branch with missing 'say'?

[15:40] <Limbic_Region> cjeris - it is hard to say since adding debug lines affects the behavior

[15:40] <Limbic_Region> though I think I have found a problem (not necessarily the problem)

[15:41] <cjeris> Limbic_Region: this is well beyond the point at which I can have bright ideas :)

[15:42] <Limbic_Region> ok - thanks

[15:42] * Limbic_Region will continue to try and isolate but this is likely above his head too (meaning internals)

[15:43] <cjeris> np

[15:44] *** justatheory joined
[15:45] <Limbic_Region> ok - guess I will take this up with audreyt in the morning but it is almost as if - it requires IO in order to continue looping

[15:46] <audreyt> all four say is needed

[15:46] <audreyt> or any one will do?

[15:46] <audreyt> (it works without say here, so I'm relying on your info)

[15:47] <Limbic_Region> audreyt - all 4 are needed if you want it to finish

[15:47] <audreyt> cjeris: are you on win32 too?

[15:47] <Limbic_Region> audreyt - yes, cjeris is on Win32

[15:47] <Limbic_Region> basically - any loop that doesn't result in IO exits prematurely with no error output

[15:48] <Limbic_Region> so with 3 out of the 4 it goes further than with 1 out of the 4

[15:48] <Limbic_Region> so earlier when I thought excluding the .svn directories fixed the problem it really was because I had debugging turned on - but you should be sleeping

[15:49] <audreyt> change say() to Thread.yield()

[15:49] <audreyt> and see if that still works

[15:49] <Limbic_Region> ok

[15:50] <Limbic_Region> I found a parse bug if you are interested

[15:50] <audreyt> it looks like my Pugs.Compat code using internal API for readdir might be subtly broken  after all

[15:50] <audreyt> sure, what's it?

[15:50] <Limbic_Region> else { say "foo" } # works without ; as it should

[15:51] <Limbic_Region> else { #say "foo" } # does not work regardless of ; or not

[15:51] <Limbic_Region> actually - I am not sure why I even mentioned the ; other than multi-statements was part of my testing

[15:51] <Limbic_Region> though if the open and close brace are on diff lines - works as expected

[15:51] <audreyt> uhm.

[15:51] <Limbic_Region> the Thread.yield does not fix the prob

[15:51] <audreyt> you mean you comment out the rest of the line

[15:51] <audreyt> including braces

[15:52] <audreyt> and expect the brace to reassert itself?

[15:52] * [particle] thinks l_r has an in-head parser problem

[15:52] * Limbic_Region reminds himself it is Monday

[15:53] <Limbic_Region> ok - so ignoring my ignorance for a second, you should be sleeping though if you want to stay up and debug why adding say statements makes this thing work I am happy to oblige

[15:53] <audreyt> Limbic_Region: ok. try "close $*ERR"

[15:53] <audreyt> in place of say

[15:53] <Limbic_Region> ok - in all 4 places?

[15:53] <audreyt> yup

[15:53] <Limbic_Region> and btw - was the Thread.yield() supposed to be empty arguments?

[15:54] <audreyt> yeah

[15:54] <Limbic_Region> k - thought so

[15:54] <audreyt> it's noop that helps coop threading on systems without true preemptive threading

[15:55] <Limbic_Region> oh, not sure if this does anything for you but say ""; and say 1; do not produce the same results

[15:55] <Limbic_Region> say 1 in 4 places works, say "" does not

[15:55] <Limbic_Region> and close $*ERR in all 4 places didn't fix the prob either

[15:55] *** mako132 joined
[15:56] <audreyt> ok. please do a -d dump

[15:56] <audreyt> one for say1 and one for say""

[15:56] <audreyt> and put them up somewhere (nopaste, upload to feather, etc)

[15:56] <audreyt> pugs -d yourprog.pl > out.txt

[15:56] <Limbic_Region> ok - I am verifying what I just said in case I missed one of the 4 places in part of my experimenting

[15:57] <audreyt> reading -d dump will almost certainly show where it went wrong

[15:57] <Limbic_Region> yep - I wasn't having another Monday moment - will nopaste for you momentarily

[15:57] <audreyt> a poor subst of true interactive debugger, but hey :)

[15:58] * audreyt remembers she woke up for food, and goes to fetch some. bbiab

[15:58] <Limbic_Region> last few times I have tried -d it hasn't produced any output that the prog wasn't already btw, but will run on this particular prog to make sure

[15:58] <audreyt> really? I'm surprised

[15:58] <audreyt> what does

[15:59] <audreyt> pugs -de1

[15:59] <audreyt> print on your system?

[15:59] * Limbic_Region was assuming it was a Win32 thing

[15:59] <audreyt> not likely

[15:59] <Limbic_Region> ooh, that's printing lots of stuff

[15:59] <audreyt> good

[16:00] <audreyt> including each subexpression, context, nesting depth, etc etc

[16:00] <Limbic_Region> not good

[16:00] <Limbic_Region> on the real prog - no debugging output (perhaps because it exited abnormally?)

[16:00] <audreyt> it's huge, which is why I don't think nopaste = good idea

[16:00] <audreyt> ugh

[16:00] <audreyt> what about with "say 1"?

[16:00] *** kanru joined
[16:01] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "this is with 4 say "" and -d" (17 lines, 39B) at http://sial.org/pbot/19187

[16:01] <Limbic_Region> running now

[16:02] <Limbic_Region> ok, even more bizzare results

[16:02] <Limbic_Region> not only did running with -d not produce any debug info

[16:02] <Limbic_Region> it also caused the previously working config to not work

[16:03] *** mdiep joined
[16:03] <audreyt> :/

[16:04] <audreyt> ok, clearly my internal posix-emu hack doesn't like itself

[16:04] <audreyt> this is GHC 6.4.2, Win32, right?

[16:04] <audreyt> I'll boot to win32 and debug it tomorrow

[16:04] <Limbic_Region> yep

[16:04] *** tup joined
[16:04] <audreyt> and for now -- arrange to say "\n" or something so you don't get blocked

[16:04] <Limbic_Region> for the purposes of getting the test examples thing done - I will just turn debugging on to write it

[16:05] <audreyt> k. sorry for all this trouble, and thanks for persisting :)

[16:05] <Limbic_Region> no worries

[16:05] <Limbic_Region> btw - not redirecting to a file causes the say 1 to finish and produce the correct results

[16:06] <Limbic_Region> so to recap - using -d on a prog.name doesn't appear to do anything though -e from the command line works as expected

[16:06] <Limbic_Region> redirecting to the file (possibly in conjunction with -d) causes the working config to not work

[16:06] <Limbic_Region> say "" does not behave the same as say 1

[16:07] <Limbic_Region> and finally - there must be non newline IO in those 4 places for it to work at all

[16:10] <Limbic_Region> but apparently the -d on prog.name is only this prog specifically as a simple use v6-alpha; say "foo"; in foo.pl produce the correct debug output

[16:10] * Limbic_Region wanders off to finish writing the test examples stuff

[16:13] *** fglock joined
[16:22] *** Revision17 joined
[16:23] <Limbic_Region> someone refresh my memory - if I do my $out = `some command`; and I want to know if `` ran correctly - what var do I check - I assumed $!

[16:24] *** Psyche^ joined
[16:24] *** Psyche^ is now known as Patterner

[16:26] <fglock> I compared the v6.pm in svn with the latest CPAN version: 2.2x faster, 3x less ram :)

[16:27] <Limbic_Region> fglock plus plus

[16:27] *** cmarcelo joined
[16:28] <fglock> Limbic_Region: :)

[16:30] <Limbic_Region> oh wait, this should be wrapped in an eval anyway so I guess I should be using system and checking $@

[16:30] <TreyHarris> Limbic_Region: $?

[16:30] <TreyHarris> you are writing Perl 5 code, right :-)

[16:31] <Limbic_Region> no, Perl6

[16:31] <Limbic_Region> err Perl 6

[16:31] <TreyHarris> oh.

[16:32] <audreyt> Limbic_Region: $! is correct.

[16:33] <svnbot6> r12565 | fglock++ | * Pugs-Compiler-Rule 0.16

[16:33] <Limbic_Region> there must be something else that does this that I can steal - my brain is refusing to work today

[16:33] <audreyt> there's no $@ and there is no $? anymore

[16:33] <Limbic_Region> audreyt - ok, don't yell at me if I tell you that it is empty then

[16:33] <Limbic_Region> pass or fail

[16:34] <audreyt> that's because you don't have r12566 :D

[16:34] <svnbot6> r12566 | audreyt++ | * `` and qx{} now sets $! as they should.

[16:34] <Limbic_Region> oh

[16:34] * Limbic_Region svn ups

[16:34] <audreyt> (j/k, thanks for prompting the fix.)

[16:35] <Limbic_Region> well, I am almost finished with the test examples script

[16:35] <Limbic_Region> was going to make a compliment one for verifying the code runs not just compiles

[16:36] <Limbic_Region> audreyt - what about system() - shouldn't that be setting $! too?

[16:36] <audreyt> sure

[16:36] <audreyt> they all do now

[16:36] <Limbic_Region> k

[16:37] <Limbic_Region> so now go to sleep

[16:37] * audreyt obliges

[16:37] <audreyt> :)

[16:37] <Limbic_Region> sleep well

[16:37] <TreyHarris> night audre	

[16:37] <TreyHarris> urgh

[16:37] <TreyHarris> audreyt

[16:37] *** justatheory joined
[16:39] *** justatheory joined
[16:43] *** justatheory joined
[16:46] <svnbot6> r12567 | fglock++ | * v6.pm 0.014

[16:48] *** masak joined
[16:49] *** SageLT joined
[16:51] * Limbic_Region doesn't have the heart to tell audreyt that $! still isn't set if system() is wrapped inside an eval { }

[16:51] <svnbot6> r12568 | fglock++ | v6 - MANIFEST had some extra test files

[16:51] <audreyt> you mean try{}

[16:51] <audreyt> sure, because try{} resets $!

[16:51] <audreyt> so you need to simply run system

[16:51] <audreyt> and then check $!

[16:51] <audreyt> without using try{}

[16:51] <Limbic_Region> well, no I was using eval because I forgot about try -

[16:52] <audreyt> same... eval"" resets $! as well

[16:52] <Limbic_Region> no complaints about using eval btw

[16:52] <audreyt> so don't use either :)

[16:52] <cmarcelo> audreyt: is "toRef i = return $ unsafeCoerce# i" too abusive? considering its just for Int..

[16:52] <Limbic_Region> but system produces all kinds of undesireable output so `` it is

[16:53] <audreyt> cmarcelo: is Value 32bit always, or is it native length?

[16:53] <audreyt> cmarcelo: as long as it's native length then unsafeCoerce# is fine

[16:53] <cmarcelo> native

[16:53] <Limbic_Region> grrr

[16:54] <Limbic_Region> when I run ./pugs -c examples/cribbage_scoring.pl $! = 1

[16:54] <Limbic_Region> cribbage_scoring.pl doesn't parse correctly

[16:54] <Limbic_Region> when I run ./pugs -c examples/progressive_powerset.pl $! = 1

[16:54] *** weinig is now known as weinig|away

[16:54] <Limbic_Region> progressive_powerset does parse correctly

[16:54] <Limbic_Region> $! isn't a lot of help there

[16:55] <Limbic_Region> so just drop the -c

[16:55] <Limbic_Region> that just feels wrong but grrr - I am going to finish this today

[16:56] <Limbic_Region> wait - that is showing $! in both cases too

[16:58] <cmarcelo> audreyt: what was blowing evalbot, the 1+1? there's a simpler test (other than running my own evalbot) I could make here to check before commit?

[17:02] *** merlyn joined
[17:05] <audreyt> cmarcelo: any expr at all, 1+! would do

[17:05] <audreyt> ./pugs -e1

[17:05] <audreyt> would do

[17:05] <audreyt> ./pugs -e 'sub f {}; f()'

[17:05] <audreyt> to be utterly sure

[17:06] <cmarcelo> ok.. i'm looking at HashIO now, then I'll test it..

[17:07] <Limbic_Region> audreyt - should `pugs.exe -c examples\foo.pl` work?  It currently only works if I do examples\\foo.pl (note double backslash)

[17:10] <audreyt> Limbic_Region: it has never worked in perl5

[17:10] <audreyt> so I doubt it would suddenly work in perl6

[17:11] <audreyt> (`` is a qq-interpolator)

[17:11] <audreyt> g'nite :) &

[17:12] *** hexmode joined
[17:21] *** Lorn joined
[17:29] *** b_jonas joined
[17:37] *** jferrero joined
[17:38] *** holoway joined
[17:38] *** b_jonas joined
[17:41] *** foo\ joined
[17:41] <Limbic_Region> wooo hooo finally

[17:42] <svnbot6> r12569 | Limbic_Region++ | audreyt++ for the assistance

[17:42] <Limbic_Region> not pretty but it works - I would truly appreciate some advice or cleaning up the workarounds in rev 12569

[17:42] *** kanru joined
[17:49] *** marmic joined
[17:50] <fglock> is S03, list infix ';' is in the same category as '􏿽xA5 <== ==>' ?

[17:56] *** meppl joined
[17:58] <Aankhen``> Anyone know what it means if SVK says "Incomplete data: Delta source ended unexpectedly" when syncing?

[17:59] <prefiks> Aankhen``: look at topic

[17:59] <gaal> Aankhen``: svk sy -s 12103 //mirror/pugs

[17:59] <svnbot6> r12570 | audreyt++ | * Pugs.Parser.Operator: Resync with S03's optable, adding

[17:59] <svnbot6> r12570 | audreyt++ |   support for ?& (the non-short-circuiting boolean AND operator).

[17:59] <svnbot6> r12570 | audreyt++ | * Also parse for "ff" and "fff" but they are not yet implemented.

[17:59] <svnbot6> r12570 | audreyt++ |   The old "till" form is now gone.

[17:59] <Aankhen``> Ah.

[17:59] <Aankhen``> prefiks: Thanks. *sheepish grin*

[17:59] <gaal> or 'http://svn.openfoundry.org/pugs' instead of //mirror/pugs if that gave an error

[17:59] <gaal> the topical solution didn't workforme, fwiw

[17:59] <Aankhen``> I seem to have an up-to-date SVN::Mirror.

[18:00] <gaal> and: Aankhen``! hi! :-)

[18:00] <Aankhen``> Hihi gaal. :-D

[18:00] <Aankhen``> Ooooh, guess what?

[18:00] <Aankhen``> I leave India in 9 days!

[18:00] <gaal> where to? :)

[18:00] <Aankhen``> Canada.

[18:01] <gaal> excellent! lots of moose in Canada.

[18:01] <Aankhen``> Aye. =)

[18:01] <Aankhen``> The SVK command worked, thanks. :-)

[18:01] <gaal> moose!

[18:01] <gaal> Mein Luftkissenfahrzeug ist voll von den Aalen.

[18:03] <Limbic_Region> so of the 158 example scripts in examples/, 46 fail to parse correctly - not sure if that is better or worse than expected

[18:03] <svnbot6> r12571 | cmarcelo++ | * HsJudy: Fixes usage for negative numbers as keys and values.

[18:04] <Limbic_Region> s/dates/dated/

[18:04] * Limbic_Region begins trying to cleanup the non-parsing examples though his perl 6 knowledge is quite dates

[18:04] <Aankhen``> That was weird.

[18:04] <Aankhen``> [23:34:16] <Limbic_Region> s/dates/dated/

[18:04] <Aankhen``> [23:34:17] * Limbic_Region begins trying to cleanup the non-parsing examples though his perl 6 knowledge is quite dates

[18:04] <Aankhen``> Is that how you sent them?

[18:05] <gaal> Limbic_Region: your Perl 6 is better than that of most people I know.

[18:05] <gaal> go for it :)

[18:05] <Limbic_Region> I think so

[18:05] <Limbic_Region> I think so to Aankhen``

[18:05] <gaal> predictive error correction!

[18:05] <Limbic_Region> gaal - your help cleaning up some of the workarounds in t/examples/all_parse.t would be appreciated if you have tuits

[18:05] <gaal> Limbic_Region: not really, sorry

[18:06] <Limbic_Region> Aankhen`` - no, I sent them in the reverse order but the client I am using is likely sending in incorrect order

[18:06] <Aankhen``> Oh, I see.

[18:06] <Limbic_Region> CGI:IRC is not the best client in the world

[18:06] <Limbic_Region> but it is the only way I can be here from $work

[18:07] <Aankhen``> All ports blocked?

[18:08] <Limbic_Region> Aankhen`` - well, obviously not http/https but those have to go through a proxy - so for all intents and purposes - yes

[18:08] <Aankhen``> Hrm.

[18:08] <Aankhen``> So they have to specifically whitelist ports for them to be open?

[18:09] <Limbic_Region> Aankhen`` - I work for the U.S. Government - specifically one that focuses on security and secrecy

[18:09] <Limbic_Region> nuff said

[18:09] <Aankhen``> Heh.

[18:11] <gaal> there's an alternate U.S Government that doesn't focus on security and secrecy?

[18:12] <[particle]> yes, it's in iraq

[18:12] <Aankhen``> LOL.

[18:13] <TreyHarris> gaal: lol, I didn't realize you were at a half-hour offset timezone.  I went back almost a day looking for that comment from Limbic_Region at :34 past one of my hours :-)

[18:13] <gaal> I... don't believe I am!

[18:13] <gaal> IDT is GMT+3

[18:14] <TreyHarris> gaal: i meant Aankhen``, I tab-completed once too many times

[18:14] <Aankhen``> Heh.

[18:15] <Aankhen``> Yeah, that half-hour has thrown off many people.

[18:15] * gaal noticed a bug in IBM's "timzezone" wallpaper

[18:15] <gaal> bbiab &

[18:16] <TreyHarris> Limbic_Region: I've noticed that many *tests* are still using antediluvian pre-Synopsis Perl 6.

[18:16] <clkao> ooo

[18:16] <clkao> $ ab -clkao- [~/work/pugs/perl5/Pugs-Compiler-Perl6] time perl -Ilib -It -MTest -e1

[18:16] <TreyHarris> I've been cleaning them up as I come across them

[18:16] <clkao> 1..0

[18:16] <clkao> clean compile

[18:16] <clkao> 0.761u 0.051s 0:01.26 64.2%     10+6498k 0+0io 0pf+0w

[18:19] <Limbic_Region> TreyHarris - well, do you happen to know if subtypes are currently parseable using Pugs?

[18:20] <Limbic_Region> examples\hq9<plus> is currently failing to parse - I thought because s/subtype/subset/ but even that is still failing to parse - so I am thinking pugs hasn't implemented yet?

[18:21] <TreyHarris> Limbic_Region: doesn't seem to be, just cut-n-paste Larry's first example in S12, parsefail

[18:21] <Limbic_Region> TreyHarris - these aren't tests, these are examples

[18:21] <Limbic_Region> the test is if they parse/compile or not

[18:22] <TreyHarris> Limbic_Region: i'm sorry, I don't understand what you're saying.  If it doesn't parse, it doesn't parse, example or test, right?

[18:23] * TreyHarris is still not caffeinated enough so may be a bit slow :-)

[18:24] <Limbic_Region> TreyHarris - there are 158 example scripts which we are not testing and therefore, not keeping up to date.  I proposed adding a new test script that would iterate through them testing if they compile or not.

[18:25] <TreyHarris> yes, i understood that... but i thought we were talking about subset not parsing.

[18:25] <TreyHarris> oh, were you responding to my comment "I've noticed that many *tests* are still..."?

[18:25] <TreyHarris> Right, I know it's different

[18:25] <Limbic_Region> I am - I was trying to fix examples that were fixable - in this case it is not

[18:25] <fglock> clkao: hi

[18:26] <TreyHarris> But my point is, if the tests aren't even up to date, it doesn't surprise me that the examples are even farther out of date :-)

[18:26] *** Eimi joined
[18:26] <clkao>  fglock yo

[18:26] <TreyHarris> commute &

[18:26] <Aankhen``> Hrm... Agent Zhang mentioned a util/smartlinks.pl, but I can't seem to find it.

[18:27] *** buubot joined
[18:27] <fglock> clkao: did you rm Test.pmc first?

[18:27] <TreyHarris> Aankhen``: have you pulled a pugs tree down from svn?

[18:27] <TreyHarris> it won't be in a binary build

[18:27] <Aankhen``> I have the source checked out from Openfoundry.

[18:27] <TreyHarris> or the last release

[18:27] <TreyHarris> do you see the util directory?

[18:28] <Aankhen``> Yes.

[18:28] <Aankhen``> I see a lot of files, but not smartlinks.pl.

[18:28] <fglock> clkao: oh, you are just testing '1', ok

[18:28] <TreyHarris> it should be at the top level, the same place where Makefile.PL and configure and t are

[18:28] <clkao> fglock: ya. really fast

[18:28] <TreyHarris> ok

[18:29] <clkao> in fact, superfast. almost sane as precompiled pmc

[18:29] <TreyHarris> Aankhen``: run "svn stat -uq util"

[18:29] <TreyHarris> (or, if you're inside the directory, s/util/./)

[18:29] <Aankhen``> Uhh... how does that translate to SVK?

[18:29] <TreyHarris> do you get an "A    smartlinks.pl"?

[18:29] <TreyHarris> oh

[18:29] <TreyHarris> um.

[18:29] <Aankhen``> Hang on, it might be my fault.

[18:29] <TreyHarris> dunno :-)

[18:30] <Aankhen``> I think I forgot to `pull`. *bangs forehead on wall*

[18:30] <TreyHarris> smartlinks.pl was only added as of r12368

[18:30] <TreyHarris> ok, really gotta run

[18:30] <TreyHarris> &

[18:30] <Aankhen``> Ciao.

[18:31] *** Eimi joined
[18:31] <svnbot6> r12572 | Limbic_Region++ | renamed from mandel-p5.pl to allow test scripts to distinguish

[18:31] <Aankhen``> Thanks for trying to help, even if the fault was my own cluelessness. :-)

[18:32] <Limbic_Region> how do you remove mandel-p5.pl from the repo?  I assumed svn del would do it?

[18:32] <svnbot6> r12573 | Limbic_Region++ | s/subtype/subset/ though still fails to parse due to pugs

[18:34] * Limbic_Region gives up for the day not wanting to screw things up

[18:36] <svnbot6> r12574 | fglock++ | v6 - pod: command line switches, environment variables documentation

[18:38] <fglock> clkao: v6.pm is doing around 100 lines/s here

[18:39] *** Eimi joined
[18:40] *** justatheory joined
[18:42] *** justatheory joined
[18:45] *** Eimi joined
[18:53] *** elmex joined
[19:07] *** penk joined
[19:17] <Lorn> hi ppl, i install v6.pm here, and work with file.pl but in command line show this error

[19:17] <Lorn> perl -Ilib lib/v6.pm -e 'for 1,2,3 -> $x { say $x }'

[19:17] <Lorn> Can't open perl script "lib/v6.pm": No such file or directory

[19:18] <silug> shouldn't that be '-Mv6' not 'lib/v6.pm'?

[19:18] <TreyHarris> Lorn: I think you want -Ilib -Mv6

[19:19] *** weinig|away is now known as weinig

[19:19] <TreyHarris> actually, you want -Mv6-alpha

[19:19] <TreyHarris> -Mv6 will complain that you're not running Perl 6 natively

[19:20] <Lorn>  perl -Ilib -Mv6-alpha -e 'for 1,2,3 -> $x { say $x }'

[19:20] <Lorn> Can't open -e for input:

[19:20] <Lorn> No such file or directory at /usr/lib/perl5/site_perl/5.8.8/Module/Compile.pm line 200.

[19:20] <Lorn> BEGIN failed--compilation aborted.

[19:21] <gaal> hi, quick survey: among those present, who is using GHC 6.4.x? Is a 6.5 snapshot hard to install on your platform?

[19:22] <TreyHarris> Lorn: i'm getting the same thing

[19:22] *** weinig joined
[19:22] <TreyHarris> gaal: i am, and attempting to do a ports install of 6.5 cause such badness--neither 6.5 nor 6.4 would work anymore--that I had to restore from backup :-(

[19:23] <Aankhen``> gaal: I am using 6.4.2, more out of inertia than anything else.  I doubt the snapshots would work happily on Win32 anyway.

[19:23] <gaal> OS/X right?

[19:23] <Lorn> TreyHarris: i will try -Ilib lib/v6.pm because cpan, recommend this in SYNOPSIS

[19:23] <TreyHarris> audreyt helped me for several hours before that point, too, so it apparently wasn't something easy/obvious

[19:23] <TreyHarris> gaal: yep.

[19:23] <gaal> Aankhen``: FWIW I'd used earlier 6.5 snapshots with no problem at all from binary dists on Win32

[19:24] <Aankhen``> Okay.

[19:24] <Aankhen``> If it works, and Pugs needs it, I'll gladly install 6.5.

[19:25] <TreyHarris> Lorn: yes, that seems to work, though with a number of sub redefinition warnings, and something about "Too late to run INIT block at ..v6.pm line 22"

[19:25] <gaal> Aankhen``: 6.4 forces us to do some ugly workarounds in the hs code. from what I've seen, it takes a little longer to build pugs with it but the resulting pugs is much faster

[19:26] <gaal> 6.6 should be released within a month

[19:26] <Aankhen``> The resulting Pugs is much faster with 6.5?

[19:26] <gaal> once it does we're anxious to move over to it

[19:26] <gaal> Aankhen``: yes.

[19:26] <Aankhen``> Hey, if a new, stable version of GHC is released, and someone reminds me about it, I'll upgrade in a heartbeat.

[19:27] <Lorn> TreyHarris: ok, i waiting for fglock for some help, thanks ;)

[19:27] *** anov joined
[19:27] <gaal> Aankhen``: why wait? :) it's a biggish download but it's easy to install on windows

[19:27] <gaal> just remember to update your path :)

[19:27] <Aankhen``> gaal: Eh, 6.5 is not stable, is it?

[19:27] <gaal> and you can have more than one ghc installed.

[19:28] <gaal> no, but it works :)

[19:28] <Aankhen``> Heh.

[19:28] <Aankhen``> Okay, well, I'll do it in the morning.  I don't have the brainpower to do it right now.

[19:28] <gaal> for that matter... pugs isn't stable either :;p

[19:28] <Aankhen``> Pugs is special. ;-)

[19:28] <gaal> ok, suggestion, start the d/l tonight

[19:28] <Aankhen``> Good idea.

[19:28] <TreyHarris> gaal: will 6.4 just stop working soonish?  if so, i guess figuring out why i can't get 6.5 working becomes a harder priority--though i note that even haskell.org says there's no good installation for OS X

[19:29] <gaal> TreyHarris: audreyt and I are anxious for it, but of course we won't move until everybody's accounted for

[19:29] <Aankhen``> hc-6.5.20060819-i386-unknown-mingw32.tar.gz

[19:29] <Aankhen``> Is that the one I should download?

[19:30] <gaal> if you can spare the moose to get it to work, the GHC community will thank you for it

[19:30] <gaal> Aankhen``: I think there are .msi install versions of it.

[19:30] <gaal> let me look....

[19:30] <Aankhen``> Not that I can see.

[19:30] <Aankhen``> (I'm looking at http://www.haskell.org/ghc/dist/current/dist/

[19:30] <lambdabot> Title: Index of /ghc/dist/current/dist

[19:30] <Aankhen``> )

[19:30] <TreyHarris> gaal: well, my working knowledge of Haskell is limited to my first CS course in 1992, and my knowledge of GHC is nil.  But I'll poke at it. :-)

[19:31] *** fglock joined
[19:32] <gaal> Aankhen``: hmm, that's weird, I coulda sworn the old 6.5 I have wasn't installed from a tarball... oh well, at least that's still a binary dist :)

[19:32] <Lorn> fglock: :) i have problems with v6.pm

[19:32] <Aankhen``> :-)

[19:32] <fglock> lorn: in order to use lib/v6.pm as a script, it needs to be there - either cd to the dir, or make a link

[19:33] <fglock> 'perl -Ilib lib/v6.pm' - with this syntax, it's not looked up in PERL5LIB

[19:34] <fglock> it is a plain script

[19:34] <Lorn> fglock: hmm, in script work fine, but in command line, dont work, the TreyHarris tell me to try this perl -Ilib -Mv6-alpha -e 'for 1,2,3 -> $x { say $x }'

[19:34] <Lorn> but

[19:34] <Lorn> Can't open -e for input:

[19:34] <Lorn> No such file or directory at /usr/lib/perl5/site_perl/5.8.8/Module/Compile.pm line 200.

[19:37] <fglock> Lorn: it's a Module::Compile and v6.pm problem - would you like a commit bit to fix it?

[19:40] *** alinbsp left
[19:40] <Lorn> fglock: [pt-br] desculpa, mais eu esqueci que o 􏿽xE9 would :) e n􏿽xE3o entendi o significado da frase[/pt-br]

[19:41] <fglock> Lorn: at the time -Mv6-alpha loads the compiler, -e was not executed yet

[19:41] <Lorn> fglock: ok

[19:41] <fglock> Lorn: [pt-br] " voc􏿽xEA quer acesso de escrita no site para resolver o problema? "

[19:42] <TreyHarris> fglock: can -Ilib -Mv6-alpha -e'...' be made to work?  that other syntax is confusing to me

[19:43] *** MacVince joined
[19:44] <Lorn> fglock: i understood, no, i try to resolv, if i can, i send the patch or upload them (after resolv :) ), ok?

[19:44] <fglock> TreyHarris: ingy and audreyt were working on it

[19:45] <fglock> Lorn: ok :)

[19:46] <TreyHarris> fglock: thanks

[19:48] <fglock> meeting &

[19:48] *** fglock left
[19:48] *** fglock joined
[19:51] *** zgh joined
[19:51] <svnbot6> r12575 | cmarcelo++ | * After fixing HsJudy, switch back to IntMap in Pugs.Parser.Operators.

[19:52] <cmarcelo> does evalbot updates by itself or need some trigger?

[19:56] <cmarcelo> ?eval 1+1

[20:07] <gaal> cmarcelo: it updates itself.

[20:08] <gaal> unless it blows up!

[20:12] <gaal> audreyt: I just committed to a local branch a version that doesn't #include Pugs.Code.Val, thanks to the snaphot ghc fixes.

[20:13] <gaal> two quirks I've noticed:

[20:14] <gaal> first, I can still think of no way to separate the various primitive Pures to different files. the class ICoercible must be visible everywhere, apparenly *with* methods, but the types for the methods can't show up in the boot file

[20:15] <gaal> because e.g. if you say class ICoercible where asBit :: moo -> PureBit, Bit.hs will refuse to consume that boot file

[20:15] <gaal> I "solved" that by leaving Pugs.Val.Base for now.

[20:16] <gaal> the other thing is that consumers needed a Pure class, but I couldn't put the full qualification of the class in the boot (because then it'd need to mention ICoercible, etc.). So I just have in the boot file 'class Pure a'

[20:17] <gaal> I *think* that's all right?

[20:18] <gaal> anyway, this does feel a little better. getting rid of the include is great :) but I wonder if we should petition for a ghc treatment of issue #1 in 6.6?

[20:18] <gaal> not that I can see how that could work.

[20:19] <gaal> since the point of a boot file is that you don't yet know what the incoming type really is, so you don't know it really is just a reexport of a type you yourself will have supplied to the consumed module

[20:20] <gaal> -fin-

[20:22] <cmarcelo> audreyt: P.P.Operators should work with IntMap now. my feather builds and works fine. dunno why evalbot didn't came back. I wonder if some of the segfaults you were having are related to this..

[20:22] *** fglock joined
[20:24] *** cmarcelo left
[20:34] *** bpphillips left
[20:44] *** coke_ joined
[20:44] <coke_> anyone here interested in CIL as a backend for pugs? hurry up and join #parrot on irc.perl.org

[20:45] <coke_> seen audreyt

[20:48] *** cj joined
[20:48] <cj> audreyt: muahaha

[20:48] <zgh> coke_: is this the same CIL? http://manju.cs.berkeley.edu/cil/

[20:48] <lambdabot> Title: CIL Documentation (v. 1.3.5)

[20:48] <beppu> I'm not a bot, but according to my scrollback, audreyt said: audreyt g'nite :) &  :at 10:11am PST

[20:54] <cj> beppu: I figure audrey has a scrollback :)

[20:54] <cj> aw man... someone let merlyn in here?

[20:54] <coke_> for this guys thesis, but he seems to think using pugs to target CIL won't do for thesis requirements.

[20:54] <coke_> ah well.

[20:55] <zgh> careful he's on a cruise, that seems to make him cranky

[20:55] <cj> zgh: he's more interesting when he's cranky :)

[20:55] <zgh> hee

[20:57] <webmind> env

[20:57] <webmind> oops

[20:58] <coke_> give him a drink, and back away slowly.

[20:59] <cj> coke_: it's funny 'cuz it's true

[20:59] <cj> I've got hiccups... again

[20:59] <cj> woe am I

[21:00] * coke_ vaguely wishes that all these psuedos were mapped to 'have I ever run into this person at a con' images.

[21:00] <cj> I'll help you out with that one...

[21:01] <cj> http://colliertech.org/images/friends/me/cj.jpg

[21:01] <cj> or with the long: http://colliertech.org/images/friends/me/taking_picture.thumb-500.jpg

[21:02] <coke_> hurm. nope.

[21:03] <coke_> also nope.

[21:03] <coke_> =-)

[21:04] <zgh> coke_: were you at OSCON this year?

[21:04] <coke_> just yapc::na

[21:04] <zgh> some of my wo-workers made it to that one, I only made OSCON, maybe next year ^_^

[21:04] <coke_> I'm actually hoping houston hits next year. Used to live there, nice to visit again.

[21:05] <zgh> wo-workers?

[21:05] <[particle]> coke... on #perl6?

[21:05] * [particle] faints

[21:05] <coke_> bite me, jerry!

[21:05] <[particle]> get lost, enron!

[21:05] <coke_> you're just jealous that tcl on parrot is going to be done before perl6!

[21:05] <coke_> and we've only got 2 programmers!

[21:05] <[particle]> thanks to mdiep!

[21:05] <mdiep> *blink*

[21:07] <TreyHarris> cj: hey man

[21:07] *** frederico joined
[21:09] <cj> hey there TreyHarris

[21:09] <cj> I missed your talk the other day

[21:09] <cj> sorry :(

[21:10] <cj> pushing out rss code for the plogs

[21:10] <TreyHarris> no prob, if you're on here, i probably didn't hit anything you don't already know :-)

[21:11] <cj> I figured.  I saw your name in the perl6 book.  you're famous :)

[21:11] <TreyHarris> i had to skip given/when, gather/take, captures and regexes anyway because there was no way to effectively cover it in the time alloted.  (1 hour is *not* long enough to cover the major changes in Perl 6, even if you just want to say a sentence or two about each and show a code sample)

[21:12] <cj> it's like it's a new language or something ;)

[21:13] * zgh can't believe that his perl4 code won't run in perl6, it runs in ruby!

[21:13] <coke_> ... there's a perl6 book?

[21:13] <zgh> kidding

[21:13] <TreyHarris> actually, i could've covered gather/take... dunno why i didn't.

[21:13] <zgh> sort of

[21:13] <TreyHarris> coke_: very out of date, but yes

[21:14] <coke_> not the parrot one, but the other one?

[21:14] <cj> isn't it called "perl 6 and parrot"?

[21:14] <coke_> ah. dan's book. k

[21:14] <TreyHarris> coke_: Sugalski & Randal, Perl 6 & Parrot Essentials

[21:14] *** ludan joined
[21:15] <cj> http://www.amazon.com/gp/product/059600737X/sr=8-1/qid=1156194875/ref=sr_1_1/102-6884309-9210511?ie=UTF8

[21:15] <cj> coke_: I thought it was allison's book ;)

[21:15] <coke_> heh

[21:15] <coke_> ... you say randal and I think merlyn, not allison. all too fconfusing. =-)

[21:15] <cj> I'm giving her the credit because she signed mine

[21:16] <[particle]> you should meet allison schwartz!

[21:16] <[particle]> talk about confusing...

[21:16] <cj> hiccup

[21:16] *** penk joined
[21:16] * cj imagines allison + randal babies

[21:16] <cj> we should keep that from happening

[21:18] <TreyHarris> lol

[21:20] <cj> TreyHarris: have you seen this?

[21:20] <cj> http://colliertech.org/~cjcollier/spug.jpg

[21:21] <leo> TreyHarris: heh - that book has 3 authors - careful

[21:22] * [particle] grins

[21:23] <[particle]> which author is responsible for all the outdated stuff?

[21:23] <cj> leo: oh, I didn't see you there :)

[21:23] <cj> leo: you going to be up here some time soon?  I still need a couple of signatures :)

[21:23] <cj> er, autographs

[21:24] <TreyHarris> leo: nah, the other one didn't do anything from what i hear ;-)

[21:25] <TreyHarris> seriously, though, leo, i meant no slight, was just doing the usual citation thing of mentioning only the first two authors in order on the cover

[21:26] <[particle]> sure, leo is short for 'et al'

[21:26] <cj> heh

[21:27] * leo 's considering a new name like 'Abel'

[21:27] <nothingmuch> audreyt: ping

[21:27] <leo> [particle]: I'm not short - 1m86 ;)

[21:28] <[particle]> :)

[21:28] <TreyHarris> nothingmuch: it's not even 6am there

[21:28] *** coke_ left
[21:28] <nothingmuch> TreyHarris: that means she is probably still up ;-)

[21:28] <TreyHarris> no, she went to bed four hours ago

[21:28] <nothingmuch> seriously though, audreyt never had any direct correlation with any one time zone

[21:28] <nothingmuch> oh, i didn't see that

[21:29] * nothingmuch needs a pause admin... =/

[21:29] <cj> leo: you could do what I did.  marry a girl with a last name that starts with A, and then hyphenate using the alphabetically superior one first

[21:29] <cj> or guy, or whatever

[21:29] <leo> cj: thanks ;)

[21:31] <[particle]> hrmm. i think pugs should have a -Wall option, and perhaps a -Tang option

[21:31] <TreyHarris> irssi help... why does '/last -regexp audreyt\>\s 5' not pull up anything?  i have several days buffered and can see audreyt's last

[21:32] <cj> [particle]: both good ideas :)

[21:33] <TreyHarris> hm.  i remember a CPAN module that did readline prompts really easily and also switched to STDIN transparently for piped usage... anybody know which one i'm talking about?

[21:33] <beppu> wasn't the old joke something like:  if gcc has a -Wall, shouldn't perl have a -Stallman?

[21:33] <cj> TreyHarris: no idea.  searching for your last works fine for me :)

[21:33] <leo> particle: you know, parrot hat for quite a time a -Dan_Sugalski gcc option (iirc)

[21:34] <cj> TreyHarris: but not with \>\s

[21:34] <beppu> funny

[21:34] <TreyHarris> cj: right.  audreyt's nick is mentioned so frequently i was trying to get just her actual comments

[21:34] <svnbot6> r12576 | lwall++ | For some reason the example parser test loop stops early without try {...}.

[21:34] <cj> TreyHarris: so I'm guessing that there's a problem with the \>, maybe?

[21:35] <[particle]> leo: i had no idea!

[21:35] <cj> TreyHarris: if you strip the \ before the >, that might work

[21:36] <TreyHarris> cj: i can't make any backslashed item work.  makes me wonder if -regexp is there more as a hope than as a feature

[21:36] <cj> TreyHarris: you can always check.  want an svn url? :)

[21:37] <wolverian> since when has > been a special character anyway?

[21:37] <TreyHarris> cj: no.  i spent 40 minutes i didn't have prior to my presentation trying to get irssi built on a company host so that I could demonstrate evalbot.  long enough to make me not want to deal with irssi anytime soon :-)

[21:38] <TreyHarris> wolverian: it's not, but i generally escape non-\w's just to be sure, especially when i'm a layer removed from the match

[21:39] <cj> TreyHarris: heh, yeah.  it can be a pain sometimes..

[21:39] *** cjeris left
[21:39] <wolverian> TreyHarris, well, it failed in this case. :) searching for a plain > works fine here, and searching for e.g. \? works as well

[21:40] <wolverian> I don't know why \> doesn't work, though.

[21:40] *** SageLT joined
[21:41] *** justatheory joined
[21:42] <TreyHarris> wolverian: it just doesn't like backslashes.  "/last -regexp audreyt>.*utterly" works, "/last -regexp audreyt>.*\sutterly" doesn't

[21:42] <TreyHarris> lol, except in finding the comment i just made.  so apparenly backslashes are being autoescaped

[21:42] <TreyHarris> which rather dilutes the power of having perl regexps available in the first place...

[21:59] <wolverian> TreyHarris, yup.

[21:59] *** prefiks left
[22:08] <cj> heh.  LNG = Last Known Good... sound good to you folks?

[22:13] *** kanru joined
[22:19] <svnbot6> r12577 | lwall++ | Cleanup of some hop6 syntax errors.

[22:29] <svnbot6> r12578 | fglock++ | * v6 - this command line now works (note that there are 2 strings, one

[22:29] <svnbot6> r12578 | fglock++ | is for loading the module, and one is the perl6 code):

[22:29] <svnbot6> r12578 | fglock++ | perl -e 'use v6-alpha' ' "hello world".say '

[22:32] *** baest joined
[22:32] <svnbot6> r12579 | lwall++ | fixups to snowing.pl

[22:38] <svnbot6> r12580 | lwall++ | syntax updates for motd-i

[22:44] <TreyHarris> nothingmuch: did you find any pause admins?

[22:44] <svnbot6> r12581 | lwall++ | syntax updates for rpm_calc.pl

[22:46] <TreyHarris> In r12579:

[22:46] <TreyHarris> -sub sleepy{for 1..5500 {;}}

[22:46] <TreyHarris> +sub sleepy{for(1..5500) {;}}

[22:46] <TreyHarris> why?

[22:56] <svnbot6> r12582 | lwall++ | operator \\ must be named infix:<\\\\> or infix:{qn'\\'}

[22:57] <Juerd> Holy crap

[22:57] <Juerd> We have a \\ operator?

[22:58] <wolverian> in examples/

[22:58] <Juerd> http://dot.kde.org/1156199214/  # Given the size of the KDE project, and the size of the parrot/pugs projects, we're doing quite well with feather's specs, I think :)

[22:58] <lambdabot> Title: Immanuel: KDE Introduces New Server

[22:59] *** SageLT joined
[23:02] <svnbot6> r12583 | lwall++ | syntax updates (still doesn't pass though) to 01-10interpolating-functions.pl

[23:03] <SamB> it probably isn't for array update?

[23:03] <TimToady> TreyHarris: for() is a function call, not a statement control.

[23:04] <SamB> that doesn't look like a good way to sleep either

[23:05] *** bcorn joined
[23:06] <TreyHarris> TimToady: where is for() defined then?

[23:07] <TimToady> for() is what it used to be.  I changed it to for 1..5500

[23:07] <TimToady> your diff is backwards

[23:10] <TreyHarris> oh... so it is.

[23:10] <TimToady> for() is banned by S04, about line 955

[23:10] * TreyHarris grins sheepishly and goes back to what he was doing

[23:11] <TreyHarris> the "r12579" makes it oh so easy to just stick a - right before it in the svn diff command... :-)

[23:11] <TreyHarris> i should write a script so i won't make that mistake again

[23:13] <TreyHarris> line 878 of S04.  955 is the last line of the file...

[23:14] <TimToady> .pod?

[23:14] <TreyHarris> yes

[23:14] <TimToady> yeah, you're right,

[23:14] <TimToady> I was reading the wrong part of my vim status line

[23:14] <TimToady> sorry.

[23:15] <TreyHarris> we can both feel sheepish then :-)

[23:15] <TimToady> darn, my first mistake of the year...  :)

[23:21] *** mdiep joined
[23:22] *** jferrero joined
[23:22] *** b_jonas joined
[23:35] *** markstos joined
[23:53] *** Bit-Man joined
