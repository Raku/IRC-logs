[00:17] *** Aankhen`` joined
[00:26] *** Quell joined
[00:27] *** linolium joined
[00:28] *** linolium left
[00:33] *** hexmode joined
[00:42] <svnbot6> r9758 | fglock++ | pX/PCR - new method 'perl5', returns a string that can be eval'ed into a new PCR object; fixed a test

[00:45] *** fglock_ joined
[00:54] <fglock_> audreyt: PCR Makefile.PL has 'use inc::Module::Install' - is this ok?

[00:54] <svnbot6> r9759 | fglock++ | PCR - Pugs-Compiler-Rule-0.02-beta.tar.gz

[00:55] <fglock_> &

[00:55] *** fglock_ left
[01:11] *** mako132_ joined
[01:23] *** vel joined
[01:33] *** ColARes joined
[01:33] <ColARes> hy

[01:36] *** stevan__ joined
[01:38] *** arcady joined
[01:50] *** weinig joined
[01:53] *** theorbtwo joined
[01:58] *** GabrielVieira joined
[02:51] *** justatheory joined
[03:25] *** vel joined
[03:28] *** azurot1 joined
[03:36] *** christo joined
[03:37] *** theorbtwo joined
[03:58] <svnbot6> r9760 | lwall++ | Various builtin clarifications such as s/undef/undefine/.

[04:00] *** qu1j0t3 joined
[04:35] *** Khisanth joined
[04:35] *** cmarcelo joined
[04:56] *** bewest joined
[05:07] <bewest> coignard: greetings from myarray :-)

[05:07] <bewest> coignard: PM?

[05:14] <bewest> coignard: myarray said I should chat with you

[05:20] *** cmarcelo left
[05:23] *** FurnaceBoy_ joined
[05:46] *** GeJ joined
[06:33] <wolverian> hm, I forgot how lazy lists work. how would I define @fibs lazily?

[06:38] *** KingDiamond joined
[06:49] *** p5evalbot joined
[07:17] *** drrho joined
[07:30] *** nnunley joined
[07:55] *** azuroth joined
[07:55] *** marmic joined
[08:03] *** FurnaceBoy_ joined
[08:06] *** dduncan joined
[08:10] <dduncan> has anyone gotten this error from svk when trying to sync with the pugs repository:

[08:10] <dduncan> "Mirror source already removed."

[08:11] <dduncan> I have a fresh install, and I decided to start with downloading just the revisions from Jan 31st 2006 and after, essentially the last cpan release and after

[08:11] <dduncan> it got the first 200 or so, then stopped with that error

[08:11] <geoffb> dduncan, I pulled a few 2-3 hours ago successfully (no errors); but I was only updating an existing wc, not starting a new one

[08:12] <geoffb> Oh sorry, I got confuzzled, it was the AES repo I pulled cleanly from

[08:12] <geoffb> didn't pull pugs at that point

[08:12] <dduncan> attempts to resume give that error immediately following "retrieving log information ..."

[08:12] <geoffb> though might as well, just to test ...

[08:13] <dduncan> my initial request was: Retrieving log information from 8869 to 9760

[08:13] <geoffb> attempting pull ...

[08:13] <dduncan> it got up to 9152

[08:13] <geoffb> Syncing http://svn.openfoundry.org/pugs

[08:13] <geoffb> Retrieving log information from 9555 to 9760

[08:13] <geoffb> It appears to be committing revs

[08:13] <dduncan> will try again ...

[08:14] <dduncan> same error

[08:14] <dduncan> makes me wonder if openfoundry now has a limiter on it to prevent too many downloads?

[08:14] <dduncan> eg, "you got 200+ revs, so wait awhile"

[08:14] <geoffb> possible, though seems kinda silly

[08:15] <geoffb> mirroring open SVN repos is a fundamental goodness

[08:15] <dduncan> I did get 8869 thru 9152 before it stopped

[08:15] <geoffb> That's not a round number.

[08:15] <dduncan> I also posted on the svk list first, in case they know what that cryptic error message means

[08:15] <dduncan> yes ... it may be by data size though

[08:15] <geoffb> nodnod

[08:16] <dduncan> however, I can still get to the site through web browser

[08:16] <dduncan> anyway, its midnight; I'll try to resume tomorrow

[08:16] <dduncan> thanks for replying

[08:16] <geoffb> np, I'm (very) rarely here,

[08:17] <geoffb> So it seemed the least I could do when I am.  :-)

[08:22] *** mj41_ joined
[08:50] *** bsb joined
[09:01] <drrho> quick question: where can I find more information about this Tree Grammar Engine (TGE)?

[09:04] <drrho> and: can it be used without the rest of the parrot tool chain?

[09:05] *** iblechbot joined
[09:11] *** chris2 joined
[09:12] *** nnunley joined
[09:22] <bsb> drrho: parrot/compilers/tge parrot/t/compilers/tge, no idea about the rest

[09:26] *** jiing_mIRC joined
[09:26] *** jiing_mIRC left
[09:35] <drrho> bsb: thx found it, will investigate

[10:25] <TimToady> this is silly--the only way I can talk to audreyt across the table in Tokyo is to send messages through California and Taiwan...

[10:27] <broquaint> That's the beauty of the internet - you can talk to someone in the same room as if they were on the other side of the world.

[10:37] *** elmex joined
[10:45] *** amv joined
[10:46] *** nothingmuch joined
[10:57] *** KingDiamond joined
[11:26] *** b_jonas joined
[11:32] *** orafu joined
[11:34] *** trym joined
[11:52] *** bsb joined
[11:54] *** kane_ joined
[11:56] *** kane_ is now known as kane-xs

[12:05] *** mj41_ joined
[12:26] *** weinig joined
[12:38] *** whiteg left
[12:44] *** nothingmuch joined
[12:47] *** ajani joined
[12:47] *** broquaint joined
[12:47] *** anatoly joined
[12:49] <gaal> anatoly: }:)

[12:57] *** fglock joined
[12:58] *** Aragone is now known as Arathorn

[13:11] *** theorbtwo joined
[13:11] <svnbot6> r9761 | fglock++ | PCR - added placeholder file 'lib/Pugs/Grammar/Category.pm'

[13:22] *** xX_rep_Xx is now known as xX[ReP]Xx

[13:26] <svnbot6> r9762 | fglock++ | PCR - added test t/07-category.t

[13:29] *** Limbic_Region joined
[13:45] *** chris2 joined
[13:45] <Limbic_Region> integral ping

[13:53] <svnbot6> r9763 | fglock++ | PCR/category - more tests

[14:06] *** Qiang joined
[14:07] *** ruz joined
[14:07] <svnbot6> r9764 | fglock++ | PCR/category - added more docs

[14:10] *** kisu joined
[14:28] <integral> Limbic_Region: pong

[14:28] <svnbot6> r9765 | fglock++ | PCR - removed opp.pl

[14:43] <Limbic_Region> integral - the command to allow unregistered users to /msg me - is that a 1 shot deal or do I need to do that everytime I log in?

[14:43] <Limbic_Region> and what was the command again?

[14:43] <integral> Limbic_Region: it's "/msg chanserv set unfiltered on".  The setting is stored against your nickserv account, so it takes effect everytime

[14:44] <Limbic_Region> great - thanks

[14:44] <integral> no problem :-)

[14:47] *** nnunley_ joined
[15:02] *** eric256 left
[15:07] *** justatheory joined
[15:19] *** hexmode joined
[15:20] *** miyagawa joined
[15:41] <fglock> what happens if you declare 'proto xxx:<a>'? does it create a category 'xxx'?

[15:50] <Juerd> proto?

[15:53] <fglock> Juerd: sub prototype. almost the same as 'sub xxx:<a> {...}' - I want to know what happens when you use a new category name

[15:56] <Juerd> Okay. Right.

[15:56] <Juerd> What happen?

[15:56] <Juerd> Prototype? :)

[16:12] *** Limbic_Region joined
[16:13] *** b_jonas joined
[16:13] <b_jonas> join #lua

[16:14] <b_jonas> argh

[16:29] *** Arathorn is now known as Ara4n

[16:53] <svnbot6> r9766 | fglock++ | PCR/category - added a failing test

[17:12] *** bernhard joined
[17:18] *** GeJ joined
[17:21] *** DesreveR joined
[17:23] <svnbot6> r9767 | fglock++ | PCR/category - more tests

[17:24] *** Ara4n is now known as Aragone

[17:46] *** siosiosios joined
[18:14] *** dduncan joined
[18:17] *** larsen joined
[18:17] <svnbot6> r9768 | fglock++ | PCR - initial implementation of ':p' flag; category tests pass

[18:18] <dduncan> okay, now that it's the next day, I'm going to try syncing with the pugs repo

[18:19] <dduncan> still failed with "Mirror source already removed."

[18:19] <dduncan> will try something else ...

[18:21] <dduncan> that won't work as tried

[18:23] *** ruz joined
[18:29] <pasteling> "fglock" at 200.17.89.80 pasted "PCR/category - pseudo-code for usage inside a grammar" (8 lines, 209B) at http://sial.org/pbot/16518

[18:31] *** fglock joined
[18:37] *** ghenry joined
[18:51] <svnbot6> r9769 | fglock++ | PCR/category - cleanup, more docs

[18:52] <dduncan> it seems that error is reported in SVN::Mirror, which isn't svk specifically, and is spat out of an exception is generated containing 'no item' when trying to download the revision deltas

[18:52] <fglock> audreyt: ping

[18:52] <dduncan> I tried something different, and it seems to work, though not sure why ... maybe bad data?

[18:53] <dduncan> <break> darren-duncans-power-mac-g4:~ darrenduncan$ svk sync //pugs_try2/mirror

[18:53] <dduncan> <break> Syncing http://svn.openfoundry.org/pugs

[18:53] <dduncan> <break> Retrieving log information from 9153 to 9768

[18:53] <dduncan> <break> Mirror source already removed.

[18:53] <dduncan> <break> darren-duncans-power-mac-g4:~ darrenduncan$ svk sync //pugs_try2/mirror -s 9153

[18:53] <dduncan> <break> Syncing http://svn.openfoundry.org/pugs

[18:54] <dduncan> <break> Retrieving log information from 9153 to 9768

[18:54] <dduncan> <break> Committed revision 334 from revision 9153.

[18:54] <dduncan> <break>

[18:54] <dduncan> so it seems using the explicit -s for the next revision, rather than it going there implicitly, makes it move

[18:56] <dduncan> I think the difference here is that perhaps a revision had data that svn couldn't handle, and this approach made the 9152..9153 into a skip rather than a delta, or something, so different code was run than that which had a problem ... this is speculation

[19:05] <dduncan> okay, now I'm up to date

[19:09] *** pmichaud joined
[19:14] *** FurnaceBoy_ is now known as FB|afk

[19:18] <svnbot6> r9770 | fglock++ | PCR - TODO update

[19:20] <fglock> pmichaud: ping

[19:20] <pmichaud> hello, fglock

[19:21] <fglock> I'm trying to find out how to integrate grammars and categories - see http://sial.org/pbot/16518

[19:22] <pmichaud> you mean things like infix:, statement_modifier:, etc?

[19:22] *** hexmode joined
[19:22] <fglock> the idea is that when you define a new sub/macro they will add themselves to the category

[19:22] <fglock> yes

[19:23] <pmichaud> I was actually going to do that semantically when new subs/macros are defined with a special test, as opposed to trying to make it quite *that* automatic

[19:23] <pmichaud> i.e., if the sub name has a grammatical category in it, then figure out where it should go

[19:24] <buu> Hrm. What is the status on p6-evalbot anyway?

[19:25] <pmichaud> I haven't been thinking of grammatical categories as objects in their own right, except maybe there would be a correspondence to hashes somewhere

[19:25] <pmichaud> (it's possible that's flawed thinking on my part -- I just haven't gotten to that binding yet)

[19:25] <fglock> I'm following audreyt idea to implement a 'fat' grammar

[19:25] <pmichaud> I haven't seen that idea yet -- what's a 'fat' grammar?

[19:26] <fglock> I'm thinking of grammar categories as a special kind of rule object

[19:26] <fglock> that's my words :)

[19:26] <fglock> the idea is to return an AST from the match

[19:28] <pmichaud> I'm not sure the grammatical categories generalize quite that far.

[19:28] <fglock> such that you can match->emit, with optional steps in the middle

[19:29] <pmichaud> I'm getting ready to send an announcement to p6c, but I've checked in the PGE version of a Perl6 parser into languages/perl6 in the Parrot repository

[19:29] <pmichaud> http://svn.perl.org/parrot/trunk/languages/perl6/

[19:29] <fglock> yes - I saw it

[19:34] *** Corion joined
[19:34] *** Corion left
[19:44] *** ColARes joined
[19:45] *** nnunley joined
[19:57] *** davidra joined
[19:57] *** davidra is now known as autark

[20:07] *** larsen joined
[20:08] *** penk left
[20:12] <svnbot6> r9771 | Darren_Duncan++ | ext/Rosetta/ : updated the Language.pod section on transactions

[20:18] <svnbot6> r9772 | fglock++ | PCR/category - first steps to return an AST in the category match

[20:22] <ColARes> .

[20:25] *** elmex joined
[20:27] *** larsen_ joined
[20:48] *** larsen joined
[20:48] <svnbot6> r9773 | fglock++ | PCR/category - partially reverted last change; no AST yet

[20:49] *** kanru joined
[20:51] *** SamB joined
[20:52] *** FB|afk is now known as FurnaceBoy

[21:06] <svnbot6> r9774 | fglock++ | PCR/category status: current tests pass; uncomment line 117 of

[21:06] <svnbot6> r9774 | fglock++ | 07-category.t for a match-tree dump; the idea is to transform

[21:06] <svnbot6> r9774 | fglock++ | (internally) this tree into an AST; see SYNOPSIS for how this module

[21:06] <svnbot6> r9774 | fglock++ | could be used inside a Grammar

[21:12] <TimToady> sub shower { atomic {...

[21:12] <audreyt> "sub shower is atomic" is the current S17 form

[21:13] <fglock> audreyt: hi!

[21:13] <audreyt> fglock: hey! I saw your amazing work :)

[21:14] <fglock> do you think the usage makes sense?

[21:14] <audreyt> aye.

[21:14] *** evalbot_9774 joined
[21:15] <audreyt> also, have you tackled listfix aka 1 Y 2 Y 3?

[21:15] <audreyt> (I've got that in the Hs version of OpTable)

[21:15] <audreyt> listfix = infix+assoc<list>

[21:15] <fglock> I think so - I've not tested yet :)  - see the templates table

[21:16] <audreyt> also, you need to commit eagerly for token-level parsing

[21:16] <audreyt> iirc they never backtrack

[21:17] *** justatheory joined
[21:17] <fglock> 'infix_list' => '<tight> [ <op> <tight> ]+'

[21:17] <fglock> ok

[21:17] <audreyt> well, not quite

[21:17] <audreyt> that is the chain one

[21:18] <audreyt> listfix requires the same op

[21:18] <fglock> it is the same op - this is just the template

[21:18] <audreyt> <tight> <op> [<tight> $<op>]*

[21:19] <fglock> it is compiled to $op:=(<'...'>)

[21:19] <audreyt> (where $<op> means something like \1)

[21:19] <audreyt> oh ok... still, you need to allow for trailing comma

[21:19] <audreyt> <tight> <op> [<tight> <op>]*

[21:20] <audreyt> is still correct (I think all assoc<list> allows trailing.)

[21:20] <fglock> comma is special? or can you have '1 Y 2 Y' ?

[21:21] <audreyt> I think you could... there is no mention about Y in the canon, but trailing semi is allowed as well

[21:21] <pmichaud> PGE allows comma (and semicolons) to have null terms.  I dunno about '1 Y 2 Y'

[21:21] <fglock> any problems are easy to fix, I think - just change the template (and pray)

[21:21] <audreyt> I think it's better for consistency for all listfix to trail

[21:21] <audreyt> otherwise we need another trait (shudder)

[21:21] <pmichaud> I already think it's somewhat per-operator

[21:21] <PerlJam> a trailing Y would  be weird though

[21:22] <pmichaud> is it possible to have  something like (from S09)   $a[3;;4]   ?

[21:22] <audreyt> PerlJam: true, though it wouldn't hurt either, or would it

[21:22] <PerlJam> audreyt: I don't know, but I get the feeling that it may matter

[21:22] <PerlJam> I think comma and semi should be special

[21:22] <audreyt> pmichaud: doesn't it just mean $a[3;4] ?

[21:23] <audreyt> (both p5 and pugs currently collapses [1,,,3] to mean [1,2])

[21:23] <audreyt> fglock: so maybe the template is really

[21:24] <audreyt> <tight> <op>+ [<tight> <op>+]* <tight>?

[21:24] <pmichaud> I really think it needs to be per-op, unless we want trailing &, |, etc also

[21:24] <pmichaud> i.e., I don't think a trailing op is automatic simply because something is "listfix"

[21:24] <PerlJam> audreyt: [1,,,3] seems like it would be syntactically useful as something other than [1,3]

[21:25] <fglock> audreyt: I think so - I'll add some tests and try

[21:25] <PerlJam> same for ;

[21:25] <audreyt> PerlJam: I don't neccessarily disagree, I'm just describing current behaviour :)

[21:25] <pmichaud> loop ($a;;$b) { ... }   comes to mind

[21:26] <pmichaud> (depending on how one decides to parse that)

[21:26] <audreyt> it's a special form via macro already...

[21:26] <audreyt> it's not arbitrary statements* inside that loop ()

[21:26] <audreyt> so not sure that applies

[21:26] <pmichaud> s/statements/expressions?

[21:27] <pmichaud> semicolons are both expression separators (e.g., from S09) and statement terminators

[21:27] <audreyt> expression. you are correct

[21:27] <audreyt> but, my point is that

[21:27] <TimToady> }}; shower()

[21:27] <audreyt> loop ($a;$b;$c;$d)

[21:27] <audreyt> is illegal

[21:28] <audreyt> which means we are not using the general expresison prec parser inside the ()

[21:28] <pmichaud> depending on where we decide to trap the illegality, yes

[21:28] <audreyt> s/using/rlelying on/

[21:28] <audreyt> aye

[21:28] <pmichaud> we don't have to necessarily trap it syntactically :-)

[21:28] <audreyt> I'd prefer that, but sure :)

[21:29] <audreyt> but I'm find with another trait to describe trailingness. it's just I can't quite see a case where implicit trailingness is going to hurt.

[21:29] <svnbot6> r9775 | fglock++ | PCR/TODO - added some examples to test later

[21:29] <pmichaud> I'm uncomfortable with Y, &, and |

[21:29] * fglock needs to go :(

[21:29] <pmichaud> although I can see arguments in favor of them all

[21:29] <fglock> &

[21:29] *** fglock left
[21:30] <audreyt> my $choice = (

[21:30] <audreyt>   $foo |

[21:30] <audreyt>   $bar |

[21:30] <audreyt>   $baz |

[21:30] *** FurnaceBoy is now known as FB|afk

[21:30] <audreyt> );

[21:30] <pmichaud> interesting, Perl 6 rules explicitly disallowed this sort of thing :-)

[21:31] <PerlJam> different context though :)

[21:31] <pmichaud> however I agree with you that having the null trailing op is a sane choice

[21:31] <pmichaud> I'm just not sure we want to commit it to all listfix ops :-)

[21:32] <pmichaud> anyway, not terribly important now

[21:32] <audreyt> pmichaud: p6 rules allow it the other way though

[21:32] <audreyt> rule choice {

[21:32] <audreyt>     | foo

[21:32] <audreyt>     | bar

[21:32] <audreyt>     | baz

[21:32] <audreyt> }

[21:32] <pmichaud> I thought that leading | was illegal

[21:33] <audreyt> (as discussed in YAPC::Israel - still need to run it by you and commit to S05)

[21:33] <b_jonas> there's a function form, isn't there?

[21:33] <audreyt> yeah, Migo raised the issue in OSDC.il and lwall thinks it's sane

[21:33] <b_jonas> my $choice = one (

[21:33] <b_jonas>     $foo,

[21:33] <b_jonas>     $bar,

[21:33] <b_jonas>     $baz,

[21:33] <b_jonas> );

[21:33] <audreyt> b_jonas: there is (any())

[21:33] <b_jonas> and surely a trailing comma must work

[21:33] <pmichaud> b_jonas: yes, you're correct there

[21:33] <b_jonas> oh, it's any, not one

[21:33] * PerlJam is starting to think that everyone is insane

[21:34] <audreyt> pmichaud: leading | makes things line up "correctly" :)

[21:34] <pmichaud> audreyt: so, leading | is like a non-op?

[21:34] <audreyt> pmichaud: right, in an alternation group, leading | is discarded

[21:34] <pmichaud> same with leading & ?

[21:35] <audreyt> sure.

[21:35] <pmichaud> yes, we need to update S05

[21:35] <audreyt> *nod*

[21:35] <audreyt> ok, I_just_ got my translated slide now

[21:35] <PerlJam> Would that it worked like that for listops ...   Y @a Y @b Y     :-)

[21:35] <audreyt> and I need to finish it and leave for the conf in... oh, less than <2 hrs

[21:35] <audreyt> so, I guess bbiab :)

[21:36] <pmichaud> see ya

[21:44] <svnbot6> r9776 | Darren_Duncan++ | ext/Rosetta/ : incremented main version numbers following the v0.723.0 CPAN release

[21:49] <nothingmuch> http://pasta.woobling.org:3000/smoke/list

[21:49] <nothingmuch> smokeserver with comparison

[21:49] <nothingmuch> tag support coming tomorrow

[21:49] <integral> nothingmuch++

[21:49] <nothingmuch> hopefully we can generalize runcores/platforms/whatever to tags

[21:50] *** b_jonas left
[21:50] <nothingmuch> the results inside it are C::P::Session with some dummy fails

[21:50] <nothingmuch> get it here: http://dev.catalyst.perl.org/repos/Catalyst/trunk/examples/SmokeServer/

[21:51] <nothingmuch> if anybody with mad html skillzz wants to fix it up a bit, please do

[21:51] <nothingmuch> in the future i hope it'll be a two pane view thing

[21:52] <nothingmuch> with test result lists on the left

[21:52] <nothingmuch> the >> link popping a matrix on the right

[21:52] <nothingmuch> and a + link to add any report to the matrix as a comparison

[21:54] *** pdcawley_ joined
[22:02] <nothingmuch> anyway, does anybody have any feedback/complaints/praise about the existing server that I should know about?

[22:10] *** ruz joined
[22:16] *** xerox_ joined
[22:17] *** dduncan left
[22:33] *** hcarty joined
[22:34] *** hcarty left
[22:36] *** theorbtwo joined
[22:36] *** ruoso joined
[22:47] <audreyt> flock: feel free to upload http://perlcabal.org/~autrijus/tmp/Pugs-Compiler-Rule-0.02.tar.gz

[22:55] <TimToady> s/flock/fglock/

[22:56] <nothingmuch> good night

[22:56] <nothingmuch> oh, audreyt: got any smokeserver wishes?

[22:57] <stevan__> hey audreyt, TimToady how is .jp

[22:57] *** stevan__ is now known as stevan

[22:57] <TimToady> As long as you're here, fglock, xxx:<+> has to be considered just a funny looking name.  It's the grammar's responsibility (somehow) to pull in any existing xxx and newly created xxx and combine them into any rules or %hash that references them.

[22:58] <TimToady> Today .jp is windy but clear, which is a refreshing change from the haze of the last two days.

[22:59] <TimToady> pmichaud: see Timtoady[-2].

[22:59] <stevan> TimToady: cool, are you just all at the hackathon or the conf?

[22:59] <TimToady> stevan: just about to go to the conf in 10 minutes.

[23:00] <TimToady> supposing a grammatical category shows up in %xxx, then we need two ways to deal with it.

[23:01] <TimToady> first, if we want one category to hide another, you can get away with a mixin style of

[23:01] <TimToady> rule { %xxx | %yyy | %zzz }

[23:01] <TimToady> but there are some syntactic categories that have to be magically combined like compile-time roles:

[23:02] <TimToady> rule { %xxx_or_yyy_or_zzz }

[23:02] <TimToady> that is, the longest-token rule is applies in parallel across all the categories simultaneously.

[23:02] <TimToady> that's why the magic hash was invented (or more accurately, is scheduled to be invented :)

[23:03] <nothingmuch> =)

[23:03] <nothingmuch> i like that

[23:04] <TimToady> well, I'd better go finish abluting before minnasama wants to go.

[23:07] *** rafl joined
[23:13] <TimToady> j

[23:13] <TimToady> s/j//

[23:14] <svnbot6> r9777 | ruoso++ | closer to make lrep work again...

[23:54] *** Shabble joined
