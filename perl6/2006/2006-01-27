[00:15] <dduncan> my smoke of r8786 on haskell runcore plus darwin (10.4.4) is done

[00:18] <Juerd> "Usually ships: some day"

[00:18] <Juerd> I hope they mean "same day"

[00:28] *** Alias_ joined
[00:28] <Alias_> seen audreyt

[00:28] <jabbot> Alias_: audreyt was seen 9 hours 28 minutes 48 seconds ago

[00:28] <Alias_> darn

[00:29] * Alias_ looks at watch, should be any time now 

[00:32] <putter> lol

[00:46] *** bogey_lj joined
[00:47] <bogey_lj> anyone who can answer some perl questions for me?

[00:50] *** Khisanth joined
[00:51] <Alias_> maybe

[00:51] <Alias_> purl, ask to ask?

[00:51] * Alias_ blinks

[00:51] <bogey_lj> :)

[00:51] <Alias_> purl?

[00:51] <bogey_lj> perl

[00:51] <Alias_> crap, wrong channel

[00:51] <bogey_lj> says perl6

[00:52] <Alias_> And here am I thinking it's perl5

[00:52] <bogey_lj> :)

[00:52] <bogey_lj> hmmm

[00:52] <Alias_> on a different network

[00:52] <bogey_lj> ah

[00:52] *** vike joined
[00:52] <Alias_> with purl the bot

[00:52] <bogey_lj> so no one in here knows perl

[00:52] <rhesa> sure we do :)

[00:53] <bogey_lj> oh

[00:53] <bogey_lj> :P

[00:53] <bogey_lj> I am having some ODBC connection issues

[00:53] <Alias_> Perl 6 ODBC support is available already?

[00:54] <rhesa> are you using perl6? 

[00:54] <bogey_lj> I think at work they actually have 5.8 activestate

[00:54] <Alias_> So you are asking about Perl 5 in the Perl 6 channel?

[00:54] <bogey_lj> possibly

[00:54] <qmole> 5.8 is kinda close to 6

[00:54] <bogey_lj> I am asking about win32::ODBC, regardless of which perl version

[00:55] <Alias_> bogey_lj: OK, just so you know, Perl 5 is as close to Perl 6 as JavaScript is to Java

[00:55] <bogey_lj> k

[00:55] <bogey_lj> active state even

[00:55] <bogey_lj> ?

[00:55] <Juerd> "Unfortunately, your mailer does not support HTML mail."

[00:55] <Alias_> So a MUCH better and explicitly help channel would be just plain #perl

[00:55] <Juerd> What do they mean by "unfortunately"?

[00:56] <bogey_lj> fair enough

[00:56] <bogey_lj> if anyone would be interested in helping me with some perl issues because the know perl, please message me,  thank you

[00:56] <bogey_lj> *they

[00:56] <Juerd> bogey_lj: Join the #perl channel

[00:56] <putter> bogey_lj: irc.perl.org #perl   details here http://www.irc.perl.org/

[00:56] <rhesa> Juerd: "unfortunately, perl5 does not support continuations" 

[00:57] <bogey_lj> I am in there...they are talking about religion

[00:57] <bogey_lj> no one answered :)

[00:57] <Juerd> bogey_lj: There are people who want to help you in that channel. Nobody wants to help you with Perl 5 questions in a Perl 6 channel. Or well, they shouldn't want to.

[00:57] <Juerd> bogey_lj: Then wait a while and ask again.

[00:57] <theorbtwo> bogey_lj: Try the chatterbox on perlmonks.org.

[00:57] <Alias_> Just like nobody would want to help with JavaScript questions in a Java channel :)

[00:57] <bogey_lj> k, thx theorbtwo

[00:57] <Juerd> rhesa: Well, that I can understand. But what is so unfortunate about not supporting HTML?

[00:58] <Alias_> Juerd: No pictures embedded ?

[00:58] <bogey_lj> some programmers just like solve problems, I would help in a pm

[00:58] <putter> bogey_lj: the freenode #perl channel is not what you are looking for.  try irc.perl.org

[00:58] <Alias_> You MISSED OUT!

[00:58] <bogey_lj> thx, though everyone

[00:58] <Juerd> Alias_: I consider that quite fortunate

[00:58] <Alias_> putter: Oh yes it is

[00:58] <Alias_> putter: He doesn't want to wander into irc.perl.org #perl

[00:58] <Alias_> He'll be slaughtered

[00:58] <Juerd> putter: Are you actually suggesting someone to ask a Win32 question on Magnet #perl? 

[00:58] <Alias_> And they'll send him to Freenode #perl :)

[00:59] <rhesa> Juerd: fwiw, i understand what you mean

[00:59] * putter is reminded that perl has a rather disfunctional community in some ways

[00:59] <bogey_lj> I sure do want irc.perl.org

[00:59] <rhesa> would #perl-help be better?

[00:59] <Juerd> putter: What has bogey_lj done to you to deserve this? :P

[00:59] <Alias_> Juerd: I think the CamelPack and Vanilla Perl conversations have been the only Win32 Perl stuff in the last 3 years :)

[00:59] <bogey_lj> :D

[00:59] <bogey_lj> Iwhere is #perl-help

[00:59] <Juerd> putter: It's functional, just not newbie friendly in all areas.

[01:00] <rhesa> on irc.perl.org 

[01:00] <bogey_lj> k, txh

[01:00] <Juerd> bogey_lj: Also consider efnet #perlhelp

[01:00] <rhesa> so many places to get blasted

[01:00] <Juerd> putter: Perl's community is old enough to have a separatist/elitist subculture.

[01:01] <Alias_> putter: Another way of saying it would be to have a community of module and book authors who spent the FIRST 10 years of Perl answering newbie questions and helping, and have burnt out and try to just yack and co-ordinate module development

[01:01] <Juerd> putter: People who were once very friendly to beginners, and have helped hundreds of people, and just can't cope with doing that same thing any more much longer.

[01:02] <Juerd> putter: And yes, there are also newcomers who like to join them because they're nice company sometimes.

[01:02] <Alias_> For example, this week in #perl we've helped one person with a problem, and released two new distributions of Perl for Win32 :)

[01:02] <Juerd> putter: Those shouldn't be blamed. Many of them are *also* in the helpful channels.

[01:02] <putter> txt for resp's.  sorry, call

[01:03] <Alias_> The only questions welcome on #perl are those so fiendishly weird they are actually interesting :)

[01:04] <Juerd> I myself have spent quite a lot of time helping people, but didn't manage to keep on doing that for very long. I have great respect for the people who have helped people much more than I have, even if they decide to no longer wish to be so forthcoming.

[01:04] <Juerd> It is somewhat unfortunate that they are in channels called #perl.

[01:05] <Alias_> indeed

[01:05] <Juerd> But that may be very hard to change.

[01:05] <Alias_> Personally, I prefer to help lots of people all at once by writing modules, rather than helping one at a time

[01:05] <Juerd> I really like helping people individually.

[01:05] <Alias_> I gets hard after the first hundred times

[01:06] <Juerd> The direct communication gives a nice satisfactory feeling afterwards, when the person is clueful and is actually helped.

[01:06] <Juerd> However, after a thousand times, it gets tedious :)

[01:06] <Alias_> That said, after the first hundred CPAN modules it can get a little tedious too

[01:06] <Alias_> :)

[01:06] <theorbtwo> I can hardly claim a thousand times... but yes, it does.

[01:06] <Juerd> I can imagine.

[01:07] *** Cryptic_K left
[01:07] <theorbtwo> When you start thinking to yourself "didn't I just answer that question", and it takes you a while to realize that it was somebody else, they don't talk to each-other... that's when you start to have issues.

[01:07] <Alias_> theorbtwo: Which is what's nice about the logbot

[01:08] <Alias_> purl, seen obra?

[01:08] <jabbot> Alias_: obra was seen 5 hours 43 minutes 4 seconds ago

[01:09] * theorbtwo wonders if hanging out on freenode #perl can help invograte him.

[01:09] <Juerd> theorbtwo: I can claim that, and I have positive memories of the time when I spent most of my time helping people.

[01:09] <Juerd> I wish repetition wasn't so boring.

[01:09] <Juerd> (I'm heavily lagged, by the way)

[01:09] <Juerd> </lag>

[01:09] <Juerd> What is invograte?

[01:09] <Alias_> invigorate

[01:09] <Juerd> Okay. What is invigorate? :)

[01:09] <Alias_> invigourate actually

[01:09] <Alias_> from "vigour"

[01:09] <Juerd> As you wish - What is invigourate? ;)

[01:09] * theorbtwo can't spell none too good.

[01:09] <Alias_> To replenish one's enthusiasm

[01:10] <theorbtwo> Recharge.

[01:10] <Juerd> (...! What's replenish?)

[01:10] <Juerd> Ah, recharge I do know :)

[01:10] <Alias_> Juerd: To hunt for the koolaid

[01:10] <Alias_> which is stupid that you will know :)

[01:11] <Juerd> My problem with channels like freenode #perl is that they're TOO busy at times, and that they have too many newbies helping newbies

[01:11] *** kanru joined
[01:11] <Juerd> Alias_: Eh, that doesn't parse. Is it slang?

[01:12] <Alias_> I would have thought you would have encountered "Koolaid" before?

[01:12] <Juerd> (Okay, get back to the regular technical or 6th grade (pick one) English, please)

[01:12] <theorbtwo> To drink the koolaid is to trust your own marketing too much.

[01:12] <Juerd> Alias_: Never

[01:12] <Alias_> "To drink the koolaid" is very common techie slang for believing in your own marketing

[01:12] <Juerd> Hmm

[01:12] <Alias_> "To drink the Ruby Koolaid" etc

[01:12] <Alias_> No idea where it comes from specifically

[01:13] <theorbtwo> The term comes from a cult where everybody drank poisoned koolaid, beleving that their souls would be picked up by an alien ship.

[01:13] <stevan> the electric koolaid acid tests 

[01:13] <Alias_> ah

[01:13] <Juerd> I'm in quite a lot of techie scenes and don't recall ever having seen it.

[01:13] <stevan> theorbtwo: its older than that

[01:13] <theorbtwo> Really, stevan?

[01:13] <Alias_> wikipedia to the rescue!

[01:14] <stevan> I think it has to do with Ken Kesey and his Electric KoolAid Acid Test,.. where they drove a bus around in the 60s giving people LSD

[01:14] <stevan> theorbtwo: well the cult you are talking about was in the mid-90s,.. I think I have heard the term prior to that

[01:14] <stevan> but I wasnt in the techie community back then, so I might be wrong

[01:14] <stevan> Alias_: so... what does it say?

[01:15] <stevan> dont keep us in suspense man 

[01:15] <theorbtwo> stevan: I got my cults confused; the one in question is from 1978 (and actually drunk flavor-aid, a knock-off).

[01:15] <Alias_> One lasting legacy of the Jonestown tragedy is the saying, “Don’t drink the Kool-Aid.” This has come to mean, "Don’t trust any group you find to be a little on the kooky side" or "Whatever they tell you, don't believe it too strongly".

[01:15] <Juerd> Let's have a holy war. I miss those.

[01:15] <stevan> theorbtwo: ah yes,.. Jonestown

[01:15] * stevan decides to invade .nl in search of the P6 holy grail

[01:15] <Alias_> The phrase can also be used in the opposite sense to indicate that one has blindly embraced a particular philosophy or perspective (a "Kool-Aid drinker")

[01:15] <Alias_> Hence, "drinking the Ruby Koolaid"

[01:15] <Alias_> :)

[01:16] <stevan> theorbtwo: you were right :)

[01:16] <Juerd> stevan: Eh, I was more referring to technical holy wars, i.e. $product1 versus $product2

[01:16] <Alias_> Juerd: Where's purl when we need her

[01:16] <stevan> Juerd: my p6 holy grail is better than your p6 holy grail then

[01:16] <Alias_> jabbot: start a holy war!

[01:16] <jabbot> Alias_: Earlier you said your p6 holy grail is better than my p6 holy grail then.

[01:16] <Juerd> Where one could argue that numbering the products in such way is already an unfair bias towards one of the two products.

[01:17] <Juerd> stevan: I don't have a holy grail.

[01:17] * stevan cant seem to find his either

[01:17] <Alias_> I have one

[01:17] * Alias_ chuckles

[01:17] <Juerd> Damnit, holy wars aren't what they used to be. I blame purl for showing their silliness.

[01:17] <stevan> Alias_: yeah, well,... .au is too far away 

[01:17] *** grayson joined
[01:18] <stevan> and it doesnt have the same type of "coffee" shops

[01:18] <Juerd> Alias_: Doesn't the definition of holy grail exclude any possibility of finding one? ;)

[01:18] <Alias_> steven: We don't need to contain it in shops

[01:18] <Juerd> .oO( damn tourists )

[01:18] <Alias_> steven: I live 15 minutes from Nimbin

[01:18] <Alias_> http://www.nimbinmardigrass.com/2005/

[01:18] <theorbtwo> I was thinking of http://en.wikipedia.org/wiki/Heaven%27s_Gate_%28cult%29 -- who had vodka and applesauce, not koolaid.)

[01:19] <Alias_> Juerd: true...

[01:19] * stevan wondered how one managed to write 100+ modules and still be sane ... :P

[01:20] *** Amnesiac joined
[01:20] <Alias_> stevan: You make sure there are no bugs

[01:20] <theorbtwo> stevan: What makes you think Alias is sane?

[01:20] <stevan> theorbtwo: nothing actually :P

[01:20] <Alias_> stennie: The big trick is not to get trapped into writing code for vague non-well-defined problems

[01:21] <theorbtwo> Hm, modules where you can be sure there are no bugs sounds like boring modules.

[01:21] <Alias_> stennie: Those are the ones that accumulate a bug a week and you spend lots of time patching

[01:21] * stevan looks around and wonders who stennie is?

[01:21] <Alias_> crap

[01:21] <Alias_> tab-complete

[01:21] <stevan> :)

[01:21] <Juerd> crap complete

[01:21] * stevan thinks Alias_ should lay off the *cough* stuff *cough*

[01:21] *** MrFarts joined
[01:22] <Alias_> theorbtwo: True, but the problem is you can only accumulate two or three of these sorts of "exciting" modules before you grind to a halt

[01:22] <Alias_> Look at audreyt :)

[01:22] <theorbtwo> Hm, point.

[01:22] <stevan> Alias_: well the great thing is that very few people end up using them too

[01:22] <Alias_> M:I + PAR + a few other crazy things have stopped her release rate

[01:22] <mugwumpjism> Anyone have the link to the online version of TAPL?

[01:22] * stevan points to some of his odder modules

[01:22] <stevan> mugwumpjism: it's online??

[01:22] * theorbtwo has three modules... and I only know of any non-me users for one of them.

[01:23] <mugwumpjism> stevan: it's a .cn url :)

[01:23] * Juerd is currently working on a paid $job, where the result will in great part be open sourced when finished

[01:23] <stevan> mugwumpjism: I have a copy right next to me, but I dont know the URL

[01:23] <Juerd> But I don't get to design the stuff, and the design imposed sucks.

[01:23] <Juerd> I think there'll be bugs because of workarounds that are needed because the design isn't solid.

[01:23] <Alias_> ew

[01:24] <Juerd> And those are, perhaps, the worst kind of bug.

[01:24] <mugwumpjism> ah, +site:cn found it

[01:24] <mugwumpjism> http://www.qiji.cn/eprint/abs/2761.html

[01:24] <Alias_> Juerd: There's one worse... specification bugs

[01:24] <Alias_> Juerd: Get a copy of Code Complete

[01:24] <Juerd> Alias_: What's a specification bug? When the specs are wrong?

[01:24] <Alias_> yes

[01:24] <Juerd> Those are horrible, but at least you don't see them coming.

[01:24] <theorbtwo> Where your choices are to be broken because you don't match the specification, or to be broken because you /do/ match the specification?

[01:25] <Alias_> But when they arrive they are far worse than a design problem

[01:25] <Juerd> The bugs I speak of haunt me already, before the code that will have them even exists

[01:25] <Alias_> No chance to talk about design tweaks

[01:26] <Juerd> Oh, there's talk already. Just hard to convince people who "spent months" designing something, if you've been working with them for less than a month only.

[01:26] *** grayson` joined
[01:26] <Alias_> true

[01:26] *** grayson joined
[01:26] <Juerd> The most heard category of responses to my alternative design was "But why not merge that thing with that other thing?"

[01:27] <Juerd> Where the two things are different.

[01:27] <Juerd> The same category: "Why split that?"

[01:27] <Juerd> They completely misunderstand the point of refactoring, it seems.

[01:28] <Juerd> They want to end up with something monolithic

[01:28] <Alias_> yeah

[01:28] *** vel joined
[01:28] <Alias_> Baby Syndrome?

[01:29] <Juerd> Dunno - don't know the term (Tonight is my "learning English" night, I guess)

[01:29] <Alias_> In fact, we can call it Gollum Syndrome now!

[01:29] <Alias_> "my precious!"

[01:29] <Juerd> Ah, heh. Certainly.

[01:29] <Juerd> Oh, and another form of response in the same category: "Can't we just create a single module that does all this?"

[01:29] <Alias_> Juerd: English slang, when a project becomes "your baby"

[01:30] <Juerd> Or: "But then you end up with lots of small scripts and files, how can that be good design?"

[01:30] <Juerd> Alias_: I was thinking the people having this syndrome were compared to babies, instead of the project :)

[01:33] <Juerd> Also funny, in the weekly development meeting yesterday, code reviews were announced. Every developer is supposed to spend a few hours per week reviewing.

[01:33] <Juerd> This is a good plan, of course.

[01:33] <Juerd> But there are no guidelines by which to review. There was no clear objective for reviewing. There is no table of who should review what.

[01:33] <Juerd> There are no coding standards in this company yet.

[01:33] *** bogey_lj left
[01:33] * Alias_ scribbles "should have used CPAN module Foo... and here module Bar..."

[01:34] <Juerd> And... their existing code sucks, and they admit that.

[01:34] <Alias_> Juerd: Buy some copies of PBP and slap "coding standard" on it

[01:34] <Juerd> But code checked in also still contains goto LABEL like stuff.

[01:34] <Alias_> Perl::Critic :)

[01:34] <Juerd> Alias_: I wish I could agree with PBP.

[01:35] <Juerd> I have recommended that they get some copies and read it.

[01:36] <Juerd> But recommending use of source filters, even if only during development, I do not condone :)

[01:36] <Alias_> There's some dangerous ones in there true

[01:36] <Alias_> Feel free to mix in my style guide

[01:36] <theorbtwo> IIRC, PBP's into is great, he says things like "focus on big things, not silly details", and "always think about why purticular standards, and what standards fit your environment", and then gives fiddly-detail recomendations, and the community takes his word as cannon...

[01:37] <Alias_> http://ali.as/devel/code.html

[01:37] <Alias_> heh, yeah

[01:37] <Alias_> But Perl::Critic does allow you to enable/disable specific rules

[01:37] <Alias_> So at a practical level you can enforce the subset you agree with

[01:37] <Juerd> Alias_: Thanks, I'll reread that and maybe use parts of it

[01:38] <Alias_> It's bits and pieces I picked up doing bigger projects than Damian does

[01:38] <Alias_> So it might have more things applicable to you

[01:38] <Juerd> Uhhuh; I've read it before.

[01:38] <Juerd> And have commented on it.

[01:38] <Alias_> goodo

[01:38] <Alias_> I should consider wikifying it

[01:39] <Juerd> Or someone else has written a very similar one :)

[01:42] <putter> back

[01:42] <putter> my god, just a wee bit of conversation to backlog

[01:42] <Juerd> putter: A "pause" button would be a useful addition to IRC :P

[01:49] * theorbtwo calls it a night.

[01:52] <putter> that's the pause button ;)

[01:52] *** drbean joined
[01:53] <Juerd> rehi

[01:53] <Juerd> putter: No, IRC continues :)

[01:53] <Alias_> TIVO for IRC

[01:54] <Juerd> Hehe

[01:54] <Juerd> "Cannot connect"

[01:55] <Juerd> [details] --> "Check if the foo daemon is running"

[01:55] <Juerd> I'm used to having techie information under [details] buttons

[01:55] <Juerd> Or, details

[01:55] <putter> mugwumpjism: so what's a .chm file?

[01:56] <Juerd> putter: Eek, is that the windows help file thing?

[01:56] <putter> ah, yes

[01:56] <Juerd> Some form of used-to-be-html-but-was-binary-crippled-for-inoperability format

[01:57] <putter> :)

[01:57] *** Debolaz2 joined
[01:57] <putter> ok, time for pizza.  bbl &

[02:29] *** n0m3rcy joined
[02:29] *** n0m3rcy left
[02:30] <mugwumpjism> putter: use extract_chmLib to convert to HTML

[02:34] <putter> mugwumpjism: thanks!  i actually bought tapl at a sale a while back.  but was curious. :)

[02:35] <putter> mmm, za.  nothing like standing in the cold directing traffic around a fire scene (next to the pizza place) to build appetite. ;)

[02:36] <putter> just never know what you are going to hit when you head out the door.  neat. :)

[02:36] <putter> bbiab

[02:42] <robkinyon> seen stevan

[02:42] <jabbot> robkinyon: stevan was seen 1 hours 19 minutes 28 seconds ago

[02:44] <mugwumpjism> http://utsl.gen.nz/talks/perl6.does-ML/start.html

[02:45] *** vel joined
[03:09] *** dduncan joined
[03:15] <putter> mugwumpjism: would you like comments?

[03:19] <putter> mugwump: ping?

[03:21] *** nothingmuch joined
[03:30] <putter> oh, nz.  utc+12.  ;)

[03:30] <putter> wait, that's...

[03:30] <beppu> sometimes, I think we perl coders are to hard on ourselves and our favorite language.  I just installed http://www.datenklause.de/en/software/qgreylistrbl.html on my friend's server, and it's blocking spam like a champ.

[03:30] <beppu> I'm pretty fucking happy.

[03:31] <putter> spamblocking++

[03:31] <beppu> It might not be as sexy as rubyonrails or $whatever_the_fuck_people_are_doing_with_python but it really fucking useful.

[03:31] <beppu> s/it/it is/

[03:32] <beppu> greylisting is the best!

[03:34] <beppu> thousands of spam emails were hitting the server every day, but now it's but a trickle.  greylisting is so simple and yet so effective.  

[03:37] *** gaal joined
[03:37] <beppu> perl: 1 / spam: 0

[03:37] *** Daniel_Nee joined
[03:38] <Alias_> beppu: You always want back where you used to be

[03:38] *** kanru joined
[03:38] <Alias_> beppu: Personally, I think web is just a nightmarish battleground of hype at the moment, and I'm moving on to more interesting fields

[03:38] <Alias_> especially low-end web

[03:40] <beppu> Alias_, that's cool.  I think branching out and diversifying the %things_that_perl_can_do is a great thing.

[03:40] <Alias_> plus there's some areas really ripe for it

[03:40] <Alias_> Toolchain, testing, VBA replacement

[03:41] <Alias_> swiss army integration

[03:41] <beppu> My best friend works for Sony R&D (and at game companies in the past) and he's snuck a lot of perl into places where it was largely unheard of.

[03:42] <Alias_> :)

[03:46] <beppu> A lot of game places write their tools in C/C++, but my friend (a good perl coder) looked at all that they were doing and thought to himself: I could do this in a fraction of the time ...in Perl.

[03:47] <Alias_> yep

[03:47] <beppu> Many of his C++-coding coworkers were skeptical at first, but he showed them what was up.

[03:47] <Alias_> If it doesn't need to ship, why make it compilable

[03:47] <beppu> That's like a foreign concept to some people.

[03:47] <beppu> Of course, not to us, but...

[03:48] <beppu> Game dev has a very different culture.

[03:48] <Alias_> we have the other problem :)

[03:48] <beppu> Changing topics, what did you mean by "low-end web" ?

[03:48] *** vel joined
[03:49] <Alias_> Budgets between zero and $20k

[03:49] <Alias_> hell, between zero and $100k

[03:51] <beppu> That's all I've ever worked on.

[03:51] <Alias_> That's all a lot of people have

[03:51] <Alias_> There's where Perl and PHP and Python and Ruby are all duking it out

[03:52] <beppu> Who has the high-end ?

[03:52] <beppu> Java?

[03:52] <Alias_> Java and Perl

[03:52] <Alias_> Possibly in that order

[03:53] <Alias_> Things get tricky when you want to serve a billion pages a day

[03:54] <beppu> For the low-end, easy installation seems to be the order of the day.  That's the only technical strength PHP has going for it, and look where that got it.

[03:54] <Alias_> Elaine's Law

[03:54] <Alias_> http://www.google.com/search?&q=Elaine's%20Law

[03:57] <beppu> I agree.

[04:02] <beppu> Alias_++

[04:07] *** vel joined
[04:07] <Alias_> huge part of what made debian so successful, despite it having a slower release cycle

[04:08] <Alias_> and, less deservedly so, PHP :)

[04:20] <meppl> guten morgen

[04:25] *** feng joined
[04:28] <mlh_> Alias_: who is the Elaine in Elaine's Law?  (nice law btw)

[04:29] <Alias_> aevil? happyfunball/hfb? Jarkko's wife?

[04:29] <Alias_> one of the sysadmins for the master CPAN infrastructure

[04:55] *** Amnesiac joined
[05:02] <stevan> mugwumpjism++ # nice lightning talk :)

[05:07] *** gaal joined
[05:24] *** brentdax joined
[05:25] <brentdax> Is Parrot embedding broken?

[05:27] <brentdax> I'm getting an error about PARROT_PATH not being set correctly when it certainly seems to be.

[05:28] *** audreyt joined
[05:30] <putter> mugwumpjism: a couple of thoughts, then off to sleep.

[05:30] *** scook0 joined
[05:32] <putter> you might mention the FP community forsaking fragmentation, coming together to do haskell.  also then monads, and the hairshirt becoming more armor than mortification.

[05:32] <Alias_> FP?

[05:32] *** Skud joined
[05:34] <brentdax> FP=functional programming, I assume.

[05:34] <Skud> morning.

[05:34] <Alias_> "morning"?

[05:34] <Skud> feels like morning.

[05:34] <Skud> anyway, it's morning in... *ponders* ... the middle east?

[05:35] <Skud> seen ingy?

[05:35] <jabbot> Skud: ingy was seen 1 days 17 hours 39 minutes 7 seconds ago

[05:35] <putter> re pre pugs p6, I cant speak to the p6l side of things.  but for parrot, I think you mischaracterize it.  it was one of the worst project management jobs I've seen, and that's included some real dozies.  if pugs had been managed similar, well, audreyt being who she is, it would have gone further.  but no further than that.

[05:38] <putter> let's see, strictly typed is not equiv to does(ML).  TCL is strictly typed.

[05:40] <putter> I'm not sure I share stevan's enthusiasm for the St object model.  Then again, it's nicer than what most people are using now, so at least in constrast...

[05:41] <putter> but all in all, I liked the slides. :)  good luck with the talk.  (soon?  i didnt see a listing on the local pm boards)

[05:42] <putter> Alias_: yes, what brentdax said. :)

[05:45] <putter> ok.  *whistle blows*.  next pugs shift.  smokes on the smokeserv, ext/ fails to be characterzied, a TASKS file for the "dont feel like debugging right now".  have fun.

[05:45] <putter> :)

[05:48] <putter> Alias_: re FP, my understanding is, to an approximation at least, the fp community started down the path of everyone doing there own little variant language, but the manage to instead pull together to build a common foundation, haskell.  if they hadnt', they might today be worse of than even say the scheme and prolog folks,

[05:48] <Alias_> ah

[05:50] <putter> whose versions of the "same language" are often, even pathologically, incompatable.  and whose standardization efforts have a thickness of politics resembling... high-school student government?  something pointless but loud and interminable.  ;)

[05:50] <SamB> and then somebody came up with type classes... and someone else stole monads from denotational semantics...

[05:50] <Alias_> denotational is a word?

[05:51] <putter> I'm being a bit sloppy and unfair, but that's at least the flavor of my impression of it.

[05:51] <SamB> Alias_: I'm pretty sure

[05:51] <putter> denotational is a most excellent word

[05:51] <Alias_> I'm quite used to not knowing all the world

[05:51] <Alias_> words

[05:52] <Alias_> I just putter with lego and build things

[05:52] <putter> the wikipedia entry for denotational semantics looks pretty poor, let's see...

[05:53] <Alias_> Give me some blocks and I'll make you some bigger blocks, if there's a denotational emantic monad involved, just call it something I don't need a math degree for :)

[05:54] <SamB> Alias_: okay, we will go with the accepted (humerous) wisdom and call it a "Warm Fuzzy Thing" instead of a Monad

[05:54] <Alias_> Can we call it an Action... or an Imperative Block?

[05:54] <SamB> and, well, monads are a lot like legos ;-)

[05:55] <Alias_> From what I can tell, they are mostly for doing C<    imperative { ...; ...; ...; }

[05:55] <putter> i haven't looked far or closely (just working down the google hit list), but  http://www.risc.uni-linz.ac.at/people/schreine/courses/densem/densem.html  looks maybe plausible

[05:57] <putter> oooh, I haven't seen that tried.  let's name monads and arrows after legos.  that captures their broadest use - structuring library apis so all the pieces can be combined and simply plugged into each other...

[05:58] <Alias_> For gui assembly?

[05:58] <Alias_> ooo

[05:58] <Alias_> Or embed code fragments on RFID id chips inside REAL legos

[06:00] <putter> "An introduction to software library legos.  One bump is "return", the second..."

[06:00] <putter> :)

[06:00] <putter> the mit media lab has these beads on strings,

[06:02] <putter> which contain various behavior, hmm, memory fuzzy, like reflect every other pulse, and then... fuzzy... light pulses move up and down the necklace, under the influence of the particular set and pattern of beads.  kids can then trade, modify, etc.

[06:05] <putter> http://web.media.mit.edu/~mres/papers/chi-98/digital-manip.html   a bit old, but

[06:05] *** Alias_ left
[06:06] *** kakos joined
[06:11] <putter> cant find anything better.  eh.  anyway, the idea is just to go overboard towards complete familiar objects/terms.  not sure how to do monad function wraping.  oh, maybe your lego with a chip.  but a function chip.  so the lego blocks are a way to easily plug together a bunch of function chips.  how's that? ;)

[06:16] <putter> 1am.  good night all &

[06:16] *** drbean joined
[06:25] *** putter joined
[06:29] <putter> actually, Alias_?  math is just legos.  described by a community with the pathological concept that golfing should be applied the entirety of their written material.  like a perl module which said "INSTALLation instructions: solve this puzzle OHnf08yhfb and it will be self-evident how to install this package."

[06:30] <putter> Most all math writing is the antithesis of Elaine's Law.  Various theories re the social mechanisms which go into that.  But the upshot is,

[06:33] <putter> imagine lego described in doggel latin verse, which compared them to... bits of foreign fruit and extinct animal behavior. ;)  precision, but with little effort at introduction or accessible-by-approximation to non-collegues.  survey articles are soo much better.  but also seem less common than in sciences/engineering.

[06:35] <putter> hopefully this will change some day.  a greater role for computers in math literature will help.  but it's going to stay a pain for a while.

[06:41] <putter> that said, it would be nice if p6 ends up with an algebraic type hierarchy.  groups and rings and such.  affine geometry for graphics.  what else?

[06:42] <putter> hey, neat.  a LOGO turtle graphics approach to affine geometry: http://72.14.203.104/search?q=cache:YSUwb18QI2UJ:www.owlnet.rice.edu/~comp360/lectures/ConnectDotsText.pdf+affine+graphics&hl=en&gl=us&ct=clnk&cd=1

[06:43] <putter> &

[07:31] *** beppu joined
[07:32] * audreyt resumes releng.

[07:32] <gaal> hello!

[07:33] <audreyt> yo!

[07:34] <audreyt> I've been reading up on LINQ

[07:34] <audreyt> <- filled with weird and nice ideas

[07:34] <audreyt> but releng first, definitely :)

[07:34] <audreyt> how's life for you, gaal?

[07:35] <gaal> Not bad! I just worked with Ingy a bit on Perldoc

[07:35] <gaal> but so far my contribution has been minor

[07:36] <gaal> my morning looked like this: I woke up thinkging I should go finish rereading the awkward squad paper

[07:37] <gaal> but I coulnd't find it on my disk, so I started rereading the sexy types summary

[07:37] <gaal> this time around I actually didn't understand it

[07:37] <gaal> as opposed to stare blankly at it, which was what happened the first time :)

[07:38] <gaal> then ingy popped by and we discussed p5 export stuff.

[07:38] <gaal> then I got coffee :-)

[07:38] <gaal> anyway, what's on the plate in pugs now? :)

[07:39] <audreyt> releng, mostly, I think

[07:40] <audreyt> also solving the state.t mystery

[07:40] <audreyt> (fails on make smoke but works with running by hand)

[07:40] <gaal> different Test.pm ?

[07:41] <audreyt> probably not

[07:41] * gaal svn ups

[07:41] <audreyt> also I have a half-finished patch on pairs.t

[07:41] <audreyt> or rather on pairs parsing

[07:41] <audreyt> I'd like to get it correct this time

[07:42] <gaal> I don't understand that stuff at all :-(

[07:42] <audreyt> f(a=>1); # named

[07:42] <audreyt> f((a=>1)); # positional

[07:42] <audreyt> f("a"=>1); # named

[07:42] *** iblechbot joined
[07:42] <audreyt> f(("a")=>1); # named -- but currently parsed as pisitional

[07:42] <audreyt> the reason is that it was looking at a '('

[07:42] <audreyt> and force positional if it's that way

[07:43] <audreyt> but in fact if the ( just surrounds the key part

[07:43] <gaal> I remember, changelogging, I saw scook0's "demagicalize pairs" commit

[07:43] <audreyt> then it is actualy named

[07:43] <audreyt> yes

[07:43] <gaal> this syntax is tricky.

[07:44] <audreyt> indeed

[07:44] <gaal> what magic was there that needed to be de-'ed?

[07:44] <audreyt> anyway, I'll probably finish it up in ~30min

[07:44] <audreyt> oh

[07:44] <audreyt> it was previously specced

[07:44] <audreyt> during toronto hackathon

[07:44] <audreyt> that a Pair object causes named binding

[07:44] <audreyt> much like a Junction does

[07:44] <audreyt> however, it proved to be extremely bad

[07:44] <audreyt> so the decision is reverted to a parser-level thing

[07:44] <gaal> cause then how do you pass a Pair?

[07:45] <audreyt> now named or not is a purely syntax  patter

[07:45] <audreyt> right, you can't pass a pair

[07:45] <audreyt> without the function declared as Item|Pair

[07:45] <audreyt> or some other nonsense

[07:45] <gaal> I see

[07:45] <audreyt> also, somehow "make ghci" is broken again

[07:45] <audreyt> complaining missing syck symbols

[07:46] <audreyt> havn't had time to look at it

[07:46] <gaal> I'm afraid I can't help with that; it never worked for me on colinux :(

[07:47] <audreyt> :/

[07:47] <audreyt> there's some triage left near the top half though

[07:47] <audreyt> t/builtins/arrays/splice.t is failing last one

[07:47] <gaal> what do you see with state.t? running by hand I see some failures and some okay

[07:47] <audreyt> but you don't see "failed" in the last summary line

[07:48] <audreyt> t/builtins/math/NaN.t need some work to sync with the p6l too

[07:48] <gaal> that sounds like a wrong plan

[07:48] <audreyt> *nod*

[07:48] <gaal> oh, sorry, the fails I see on the cmdline are all TODOs.

[07:49] <gaal> could it be that the (#1) in the test description is confusing Test.pm? :-) checking.

[07:50] <gaal> yeah.

[07:50] <gaal> fixing.

[07:50] *** Cryptic_K joined
[07:51] <audreyt> gaal: check /msg when you got a chance :)

[07:53] <svnbot6> r8788 | gaal++ | * "#" in the test description confuses Test.pm.

[07:53] <svnbot6> r8788 | gaal++ |   Remove it now, and fix Test.pm later.

[07:53] <gaal> audreyt: replied

[07:54] <audreyt> not seeing it

[07:54] <audreyt> nickserv?

[07:55] <gaal> (error notices in different window)--

[07:59] <audreyt> and I fixed the parens/pairs parsing as well

[08:03] <gaal> oh, there was the pil test issue, it wasn't resolved was it? let me find an old nopaste about it

[08:04] * gaal realizes his last commit message was bogus; it's the TAP harness that's confused, not Test.pm.

[08:04] <gaal> this is probably a bug in TAP though :-)

[08:05] <audreyt> I think the correct way is to escape the #

[08:05] <audreyt> see p5

[08:06] <gaal> $desc ~~ s:g/#/\\#/ in the harness, or in the test?

[08:06] <audreyt> in Test.pm I think

[08:06] <gaal> er

[08:06] <audreyt> s:P5:g for now

[08:06] <gaal> I meant in Test or in the test :)

[08:06] <gaal> sure

[08:06] <gaal> ok

[08:16] <gaal> audreyt: please see http://sial.org/pbot/15479

[08:16] <svnbot6> r8789 | gaal++ | * t/var/state.t - revert r8788

[08:16] <svnbot6> r8789 | gaal++ | * ext/Test/lib/Test.pm - fix the problem where it ought to be fixed.

[08:16] <gaal> context: it was meant as a patch to Test/lib/Test/Pil.pm

[08:16] <gaal> to fix prove t/pil when pil isn't found

[08:16] <audreyt> nod

[08:17] <gaal> when this is run, there's an error about &pil_is_eq not found (at runtime)

[08:18] <gaal> so I think there may be a problem in dispatch or in symbol construction

[08:18] <audreyt> at the         &pil_is_eq := {"";} line ?

[08:19] <gaal> no, in the context of the .t file

[08:21] <gaal> (btw {"";} was just me being paranoid that {;} was still not being parsed as a closure)

[08:23] <audreyt> ok, I'm still in the named thing

[08:23] <audreyt> a sec

[08:24] <gaal> sure.

[08:24] <gaal> i'll look at the array thing

[08:29] <gaal> regarding t/builtins/arrays/splice.t - it "fails correctly" here, that is, the last test fails and prove reports it as such. also http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.10-r8787-darwin-normal--1138320179-3810--11385-9979-1406-1183-1541-0--da205a868ac5f2244cff558ab4309cf9.html paints it red.

[08:29] <svnbot6> r8790 | audreyt++ | * Correctly implement parens as the disambiguator for named args.

[08:33] *** wilx joined
[08:45] <svnbot6> r8791 | audreyt++ | * did I say "correct"? I said "approximately correct".

[08:46] <audreyt> gaal: er, I mean, to triage it

[08:46] <audreyt> i.e. fix the bug or mark it as todo

[08:47] <gaal> fixing the bug I think involves getting the Prim spec right (remember our discusssion about List::foo?)

[08:47] <audreyt> nod

[08:47] <gaal> ergo, I'll :todo it :-)

[08:47] <audreyt> so just todo it for now

[08:48] <gaal> on it. (dies_ok does not take :todo; I think I'll fix that)

[08:53] <gaal> sub dies_ok (Code &code, Str $desc?, :$todo, :$depends)

[08:53] <gaal> is :$todo the syntax for a pair?

[08:53] <dduncan> yes

[08:54] <gaal> the code looks like it should already work, but doesn't.

[08:54] <gaal> hi dduncan 

[08:54] <dduncan> hi

[08:54] <dduncan> but not for long

[08:55] <dduncan> I also like to be explicit about about requirements, so I have an explicit ! or ? after ALL my parameter declarations

[08:55] <audreyt> ?eval sub f (:$a!) { $a } f("this is not named")

[08:56] *** evalbot_8782 is now known as evalbot_8791

[08:56] <evalbot_8791> \"this is not named" 

[08:56] <dduncan> that looks borken

[08:57] <gaal> don't signatures have an automatic positional form if they can get away with it? it's a fewature

[08:57] <gaal> *feature

[08:57] <dduncan> leaving out the : makes it positional

[08:57] <dduncan> putting it in makes it named

[08:58] <dduncan> the presence or absense of : is the only difference with an otherwise same parameter

[08:58] <audreyt> yeah, that's broken.

[08:58] <gaal> why *demand* your callers use named args?

[08:58] <audreyt> fixed.

[08:58] <audreyt> committing

[08:58] <gaal> lol

[08:58] <gaal> so good to have you back, audrey :)

[08:58] <dduncan> gaal, for forwards compatibility

[08:58] <gaal> ahhhh yes

[08:58] <gaal> good reason

[08:59] <gaal> dduncan: thank you; your answer just helped me understand something in haskell

[09:01] <svnbot6> r8792 | audreyt++ | * required named parameters should be checked along

[09:01] <svnbot6> r8792 | audreyt++ |   with required positional parameters.

[09:01] <audreyt> gaal: oh?

[09:01] <audreyt> ?eval sub f (:$a!) { $a } f("this is not named")

[09:01] <gaal> audreyt: I was wondering when to use trivial type aliases

[09:01] <audreyt> answer is "always"

[09:01] <gaal> if you have e.g.

[09:01] <evalbot_8791> \"this is not named" 

[09:01] <audreyt> unless you have newtype, which is even better

[09:01] * audreyt waits for evalbot to pick up r8792

[09:01] <dduncan> how often does evalbot check for a new version?

[09:01] <gaal> data YamlNode = MkYamlNode { tag :: YamlTag, anchor :: YamlAnchor }

[09:01] <gaal> though they are really both (Maybe String)

[09:02] <gaal> now other people's code won't compile if I change the order of these two elements, and they were using positional access.

[09:02] <gaal> which is, of course, good

[09:02] <audreyt> dduncan: 5min

[09:02] <gaal> because otherwise I'd have introduiced a bug

[09:02] <audreyt> ?eval sub f (:$a!) { $a } f("this is not named")

[09:02] <evalbot_8791> \"this is not named" 

[09:03] <audreyt> gaal: aha, which is why you should've used a newtype :)

[09:03] <audreyt> because if you use "type" aliasing, their code actually compiles.

[09:03] <audreyt> sad, but true

[09:03] <gaal> I was wondering about this, because I was reading the example in TaPL about how aliasing say Dollar and Euro prevents you form doing silly things like dollaramount+euroamount

[09:04] <audreyt> nod

[09:04] <audreyt> type alias in hs is mostly about readability and sensible errmsgs

[09:04] <audreyt> to achieve safety, use newtype + deriving

[09:04] <audreyt> which is guaranteed to not affect runtime performance either

[09:05] <gaal> great, several clicks in one sitting :)

[09:05] <gaal> but that also reminds me, why do we sometimes get errors about EvalT blah blorgh foo instead of Eval?

[09:06] <gaal> I mean, when I make a programmer error and forget to "return Val" and instead just "Val"

[09:06] <gaal> the inferencer error there could be more friendly

[09:06] *** Alias_ joined
[09:06] <Alias_> seen audreyt?

[09:06] <jabbot> Alias_: audreyt was seen 2 minutes 4 seconds ago

[09:06] <audreyt> Alias_: yes?

[09:07] <Alias_> audreyt: I hit a bug with install_share, and I need some input on the solution

[09:07] <audreyt> gaal: indeed

[09:07] <obra> Alias_: what are you running into?

[09:07] <Alias_> audreyt: When the libs install, an auto-dir ends up in BOTH of blib/lib and blib/arch

[09:07] <obra> (As a user, I'm interested ;)

[09:08] <Alias_> But the actual share dir is installed into blib/arch

[09:08] <Alias_> In all @INCs I know of, the lib comes before the arch

[09:08] <gaal> audreyt: so why doesn't it? they are aliases, IIRC

[09:08] <Alias_> So if you do a dist_dir('Dist-Name') you see the (empty) blib/lib

[09:09] <Alias_> But if you do a dist_file('Dist-Name', 'filename.txt') you get the path in blib/arch

[09:09] *** Bit-Man joined
[09:09] <Alias_> Meaning that dist_dir('Dist-Name', 'file')  no catfile( dist_dir('Dist-Name'), 'file' ), an extremely obvious assumption

[09:09] <Alias_> s/no/ne

[09:10] <gaal> okay, I looked into newtype, the problem is that for essentially trivial types it's a little clunky

[09:10] <audreyt> gaal: I think it's just the desugarer  didn't consult the type alias table

[09:10] <Alias_> So I'm wondering if either the files can be put into blib/lib instead (unsure of the implications within the lib naming scheme) or something else can be done

[09:11] <audreyt> gaal: I can hack that into GHC, or you could too, but that'd be after this release :)

[09:11] <gaal> :)

[09:11] <gaal> that "you could too" remark fills me with terror and anticipation

[09:12] <audreyt> gaal: I can show you around the GHC tree when I'm in .il

[09:12] <audreyt> it's really not that bad

[09:12] <audreyt> especially compared to perl5 internals.

[09:12] <gaal> heh.

[09:13] <audreyt> Alias_: I think putting it to blib/lib/'s auto makes sense.

[09:13] <gaal> I have to figure out how to set up a build environment for ghc though, it's a little tricky on debian unfortunately.

[09:13] <audreyt> Alias_: the shared files shouldn't be arch dependent.

[09:13] <Alias_> audreyt: I would think not in 99% of cases

[09:14] <audreyt> good then, move them off arch

[09:14] <Alias_> erm, how

[09:14] <audreyt> carefully

[09:14] <Alias_> The instructions are in raw Makefile fragments

[09:14] <audreyt> done

[09:14] <audreyt> committing

[09:14] <Alias_> thanks, I'll package and release

[09:14] <Alias_> (Changes, etc)

[09:15] <audreyt> test first :)

[09:15] <Alias_> M:I has tests now?

[09:15] <audreyt> no, I mean, test for interop with File::ShareDir first ;)

[09:15] <audreyt> r91.

[09:15] <Alias_> My test case is that File::HomeConfig (new module) works if it uses lib, fails if it uses arch

[09:15] <audreyt> ok

[09:16] <audreyt> it's committed now, enjoy

[09:16] <Alias_> But I'll add an extra check to an appropriate place in File::ShareDir too

[09:16] <Alias_> thanks

[09:16] <audreyt> np :)

[09:16] <audreyt> Alias++ # driving practical innovations

[09:16] <Alias_> obra: Should mean zero functional change except in the case where you want to recursively copy the contents of dist_dir('Dist-Name') to somewhere else

[09:16] <Alias_> obra: In fact, dist_file will continue to work for both old and new locations

[09:17] <Alias_> dist_dir will return the same too

[09:17] <Alias_> It's just that the VALUE of dist_file might be either of the two for a while, wherever it finds the file

[09:18] <Alias_> obra: Oh, also, is there any way in rt.cpan.org on a bug's page(s) to have a link to the queue it's in, so once a bug is resolve I can go back to the queue?

[09:18] <Alias_> (without searching from scratch again)

[09:18] <svnbot6> r8793 | audreyt++ | * pairs.t now has two fails only (was 10+); fixing them both now.

[09:19] <obra> Alias_: please use the address on the site

[09:20] <obra> I no longer deal directly with rt.cpan.org. It's all delegated to minions

[09:20] <Alias_> There's a queue for itself?

[09:20] <obra> Of course

[09:20] <obra> on a differnet RT instance

[09:20] <Alias_> ooohhh...

[09:20] <Alias_> ok, didn't see any obvious link

[09:20] <obra> ...that you can't see ;)

[09:20] <Alias_> will look again

[09:21] <Alias_> cpan-questions@?

[09:22] <obra> upper right hand corner of every page

[09:22] <Alias_> So that's a yes :)

[09:22] <Alias_> (and "except the front one")

[09:22] <obra> on the front one, it's in the prose

[09:23] <Alias_> yep

[09:23] <Alias_> So yes :)

[09:27] <svnbot6> r8794 | audreyt++ | * pairs.t: add extra tests for the currently broken behaviour:

[09:27] <svnbot6> r8794 | audreyt++ |     $f(((:a))) # positional (correct)

[09:27] <svnbot6> r8794 | audreyt++ |     $f((:a))   # named (incorrect)

[09:27] <svnbot6> r8794 | audreyt++ |   so we can revisit this later.

[09:28] <audreyt> looking at pil_is_eq now.

[09:28] <Alias_> (pause keys)++ # Makes life so much less fiddly

[09:29] <audreyt> for a split second I thought you were talking about PAUSE2003.pub.

[09:29] <obra> (pause keys)++ # Automatically sync my cpan mirror.

[09:29] <Alias_> oh god no :)

[09:29] <obra> yes, actually

[09:30] <Alias_> well, yes too, but not the kind of fiddly I mean

[09:32] * audreyt nominates the paragraph above for the "context-free dialogues of the year" award

[09:32] <svnbot6> r8795 | gaal++ | * Data.Yaml.Syck - remove comment about pesky warning needing to be dealt

[09:32] <svnbot6> r8795 | gaal++ |   with, bacause audretyt++ already did.

[09:33] <audreyt> hm, I need to go picking up my eyeglasses.

[09:33] <audreyt> which should make Reality even more realistic and fun.

[09:33] <audreyt> <- never wore eyeglasses before

[09:33] <Alias_> audreyt: The field of vision restriction gets annoying after a while

[09:33] <Alias_> But you can read!

[09:34] <audreyt> Alias_: my eyeglasses has style="border: none"

[09:34] <Alias_> doesn't matter

[09:35] <Alias_> optical edge cases at the boundaries create border: solid 1px #99999

[09:35] <audreyt> true

[09:35] <audreyt> though it's more like ridged in my case

[09:35] * audreyt sighs at the general geekiness

[09:35] <audreyt> anyway... be back in ~20mins

[09:35] <audreyt> &

[09:36] <Alias_> yeah, and still accurate

[09:36] <Alias_> which is more annoying

[09:38] <svnbot6> r8796 | gaal++ | t/builtins/arrays/splice.t - mark test TODO for release

[09:39] *** kane_ joined
[09:39] * gaal wonders if there's a good way to prevent bugs like f(a), b; when you mean f(a, b);

[09:40] <gaal> apart from getting into the habit of not using parens

[09:41] <gaal> I just spent 15 minutes debugging dies_ok because I didn't notice the parens in the original call :/

[09:48] *** pfarmer joined
[09:49] <dduncan> good night folks

[09:50] <dduncan> I look forward to that 6.2.11 ...

[10:01] *** dada joined
[10:02] *** drbean joined
[10:09] *** chris2 joined
[10:15] <Alias_> crap...

[10:15] <Alias_> enoaudrey

[10:19] *** G2 joined
[10:24] <gaal> is t/rules/from_perl6_rules/charset.t working for you guys? it's causing ghc errors for me here.

[10:24] *** Alias_ left
[10:33] *** nnunley joined
[10:37] *** elmex joined
[10:43] *** Alias_ joined
[10:43] <Alias_> Module::Install 0.55 uploaded

[10:43] <Alias_> That is all. Carry on

[10:43] *** Alias_ left
[10:54] <gaal> what's our current parrot version requirement?

[10:55] <gaal> I'm suspecting the problem is related to that.

[11:28] *** putter joined
[11:28] <putter> 0.4.1

[11:28] <theorbtwo> gaal: In theory, the answer is always "the latest released version", I think.

[11:28] * putter answers from his sleep

[11:31] <gaal> well, parrot looks totally borked now :(

[11:31] <gaal> I tried both embparrot and external

[11:31] <gaal> embparrot segfaults

[11:31] <audreyt> back

[11:31] <gaal> external claims no rule support

[11:32] <audreyt> hmm? weird, it worked for me

[11:32] <gaal> parrot HEAD

[11:32] <audreyt> HEAD I havn't checked.

[11:32] <audreyt> check 0.4.1 instead?

[11:32] <gaal> do you have the r for that?

[11:32] <putter> re charset, a couple of Cannot parse PGE: on things which say ok.  odd.  but otherwise looks like it did the right thing

[11:32] <audreyt> gaal: download it off cpan

[11:32] <gaal> k

[11:33] <audreyt> so I got my eyeglasses. then I looked into a mirror. that makes me depressed :/

[11:33] <putter> ?

[11:33] <audreyt> my skin sucks and I was blissfully unaware ;)

[11:33] <putter> lol

[11:33] <putter> sorry ;)

[11:34] <audreyt> nah, that gives me another project to work on ;)

[11:34] <putter> :)

[11:36] <putter> doh.  no odd.  just failure test which failed for not quite the reason anticipated.

[11:37] * putter goes back to sleep

[11:37] <putter> &

[11:38] <svnbot6> r8797 | audreyt++ | * hexadecimal.t: add the missing =cut, so all its tests pass now.

[11:38] <audreyt> sleep well :)

[11:41] *** raar joined
[11:45] <gaal> well. external parrot just doesn't work for me :(

[11:45] <audreyt> hm. win32?

[11:46] <gaal> colinux

[11:46] <gaal> let me try again with embedded / parrot release

[11:50] *** lypanov joined
[11:50] <gaal> nope, segfaults.

[11:50] <gaal> trying to get a stacktrace.

[11:51] <audreyt> both embed and external workshere.

[11:51] <svnbot6> r8798 | audreyt++ | * NaN.t: In this release, 0**0 and Inf**0 are both 1, not NaN,

[11:51] <svnbot6> r8798 | audreyt++ |   until we find a better solution.

[11:53] <gaal> looks related to parrot_split_path_ext

[11:53] <gaal> leo: ping

[11:55] <nnunley> ?eval NaN ** 0

[11:55] *** evalbot_8791 is now known as evalbot_8798

[11:55] <evalbot_8798> 1 

[11:56] <nnunley> That doesn't seem right.

[11:56] *** ruz joined
[11:56] *** drbean joined
[11:58] <audreyt> that seems wrong. fixing

[12:07] <audreyt> ooh, new spj paper, again directly related to p6.

[12:07] <audreyt> s/related/applicable/

[12:08] <audreyt> # http://research.microsoft.com/%7Esimonpj/papers/not-not-ml/index.htm

[12:15] <svnbot6> r8799 | audreyt++ | * Test::Pil - skipping PIL tests when ./pil is not present. 

[12:17] <wolverian> wow, nice.

[12:17] <wolverian> (the paper)

[12:17] <wolverian> he keeps stealing our ideas ;)

[12:19] <gaal> audreyt: r8799 works, I guess, though skip_all ; exit looks cheeky... did you see at all why my version wasn't working?

[12:20] <wolverian> audreyt, what do they mean with "non-strict" when describing Haskell?

[12:20] *** Blicero joined
[12:29] <gaal> summay of that paper: 10 Curry-Howard 20 GOTO Brain explosion

[12:33] <nnunley> wolverian: I believe it means strict evaluation order.

[12:34] <audreyt> gaal: no, not at all :)

[12:34] <wolverian> nnunley, ah, thanks. I don't know what that means, exactly, either, but I'm closer now :)

[12:34] <audreyt> wolverian: it means that Hs programs can be evaluated in any order :)

[12:35] <audreyt> i.e. in [f x, g y, h z]

[12:35] <wolverian> ahh. thanks!

[12:35] <audreyt> it doesn't matter which one of the three are evaluated first

[12:35] <audreyt> which is not the case in other languages, e.g. if "f" contains a $::global++

[12:35] <audreyt> and "g" contains a $::global--

[12:36] <svnbot6> r8800 | audreyt++ | * nnunley caught that 0**NaN should be NaN, not 0.

[12:40] <audreyt> Juerd: got the T-shirt, it's lovely, thanks! :)

[12:45] *** pfarmer left
[12:47] *** joepurl joined
[13:19] <stevan> putter: Just FYI - I have no love for the Smalltalk 72/78 object models, mugwumpjism was a little off there,.. the mm is based on Smalltalk 80 and CLOS :)

[13:19] <stevan> morning all

[13:19] * stevan runs off to do errands and get coffee

[13:20] <audreyt> heya stevan 

[13:20] <svnbot6> r8801 | audreyt++ | * perl2.t: test cleanup, proper unTODO and TODOing, etc.

[13:20] <audreyt> heard anything from tpf yet re yapc tokyo?

[13:21] *** kolibrie joined
[13:24] <Juerd> audreyt: Yay :)

[13:31] <gaal> I have to go now, back in... 20 hrs? unfortunately even after make clean embparrot still doesn't work here.

[13:31] <audreyt> gaal: we'll figure it out later. I'll also try to get colinux running

[13:31] <audreyt> ?eval 1 ~~ /1/

[13:31] *** evalbot_8798 is now known as evalbot_8801

[13:31] <evalbot_8801> Match.new(   ok => bool::true,    from => 0,    to => 1,    str => "1",    sub_pos => (),    sub_named => {} ) 

[13:35] <lypanov> audreyt: colinux is fun :)

[13:35] <audreyt> :)

[13:35] * audreyt is resmoking

[13:35] <audreyt> the tree, not chemicals

[13:35] * lypanov used it for just on 6 months when he got sick of the lack of wireless support for his laptop in linux

[13:35] <lypanov> hehe

[13:35] <lypanov> can you resmoke chemicals? :P

[13:36] <audreyt> sure could :)

[13:36] * lypanov wonders when vmware will announce something for the macbook pro

[13:37] *** stevan_ joined
[13:38] <stevan_> audreyt: re: tpf on yapc tokyo - no, not yet they review on Feb 1

[13:39] * stevan_ crosses his fingers and prays to the gods of Perl :P

[13:39] <audreyt> :D

[13:39] <audreyt> I'm about to sleep (as usual)... been a very long day with various pre-lunar-new-year errands

[13:39] <audreyt> tomorrow is the new year's eve :)

[13:39] <wolverian> I wonder why people dislike POE.. any clues?

[13:39] <wolverian> ohh, have fun :)

[13:39] <stevan_> yummy mooncakes :)

[13:40] <audreyt> mooncakes are midautumn, which is many months from now :)

[13:40] <stevan_> ??

[13:40] <audreyt> s/are/are for/

[13:40] <stevan_> whats the new years treat then?

[13:41] * gaal should look up this lunar new year thing. It sounds like something that ought to happen every month?

[13:41] <audreyt> rice cakes

[13:41] <gaal> also, I must go now. see you later :-)     &

[13:41] <stevan_> hmmm,..they dont sound as tasty

[13:41] <audreyt> indeed they are not

[13:43] * stevan_ notes that white anglo-saxon americans enjoy mooncakes this time of year, probably because the chinese are not eating them so there are leftovers :)

[13:44] <audreyt> lol

[13:46] <stevan_> ok, time to take out the dogs and run some errands

[13:46] <stevan_> adios all &

[13:50] <lypanov> http://www-users.york.ac.uk/~fj102/photo/beautiful%20china.htm

[13:59] *** kanru joined
[14:01] *** rantanplan_ joined
[14:05] *** Qiang joined
[14:12] *** nothingmuch joined
[14:14] *** putter joined
[14:14] <putter> hey.  looks like shift change coming up? ;)

[14:15] *** iblechbot joined
[14:16] <audreyt> ;)

[14:16] <audreyt> hey putter :)

[14:16] <putter> re NaN ** 0,  I don't remember if were still doing 754-1985 or are speculating, but if the latter, than everything ** 0 == 1, including NaN.  but whatever.

[14:16] * audreyt is, indeed, going to sleep now -- journaling is deferred to tomorrow

[14:16] <putter> hi audreyt

[14:16] <audreyt> putter: I am speculating here :)

[14:16] <putter> anything in particular you would like to see happen as you sleep?

[14:17] <audreyt> 754-1985 thinks NaN**0==NaN, I think

[14:17] <audreyt> putter: hm, more follow-up changelogging? :) 

[14:17] <putter> yyyes, putter pauses, I think so.

[14:17] <putter> changelogging.  ok, anything else?

[14:18] <audreyt> also, TODOing t/pugsbugs/* that are not regressions (i.e. those that fails at the end, or are checked in after last release)

[14:18] <audreyt> I think it's safe to focus only on fixing regressions now

[14:18] <audreyt> so newly reported pugsbugs, unless they are misfeatures or really trivial, should simplky be TODOed.

[14:18] <putter> ok. :todo<> non-regression pugsbugs.  makes sense.  what else?

[14:19] <audreyt> I think that's all :)

[14:19] <audreyt> have fun :)

[14:19] <audreyt> (also look at regressions if you have cycles)

[14:19] <putter> ok.  thanks.  great to have you back.  sleep well. :)

[14:20] <putter> ok, and linq, another time.

[14:20] <audreyt> also the irreconsilable gaps between eager and lazy evaluation :)

[14:21] <audreyt> and between typechecking and "where" style dynamic assertions

[14:21] <putter> you mean the not^2 ML paper?  yes.  i just skimmed it a while back, but looked fun.

[14:21] <audreyt> ("Haskell is not not ML" and "Hybrid Type Checking", both via LtU, on my reading list now)

[14:21] <putter> LtU++

[14:22] <audreyt> the hybrid typecheck thing is more directly applicable to PIL* though.

[14:22] <audreyt> we'd really need that.

[14:23] <putter> ooo, haven't seem HTC.  add to list.  bottom of list implodes.  office anti-black-hole safeties kick in.  putter wonders what paper he just lost.  oh well.

[14:23] <putter> err, s/list/pile/

[14:25] <putter> good night audreyt &

[14:25] <audreyt> g'nite :)

[14:25] <putter> stevan: want to read HTC together?

[14:25] <putter> & :)

[14:27] <stevan> HTC?

[14:29] * stevan backlogs enough to decifer HTC

[14:29] <putter> sorry, let's see...

[14:29] <stevan> putter: sure... my errands have been delayed for about an hour

[14:32] <putter> there it is, http://www.soe.ucsc.edu/~cormac/papers/popl06-hybrid.ps

[14:32] <stevan> cool

[14:32] <stevan> ohhh,.. this one looks good too http://www.lfcs.inf.ed.ac.uk/reports/98/ECS-LFCS-98-389/

[14:33] <putter> stevan: have you seen a critque of smalltalk-80?  i vaguely remember seeing a nice one years ago, but my googling isnt turning it up...

[14:33] <stevan> putter: I know the ST 7* metamodel designs were tossed out because of the "turtles all the way down" issue

[14:34] <stevan> but '80 has been around for 26 years without much change

[14:34] <stevan> the p6mm was closer to '80 when it had eigenclasses,.. which we are not using anymore since Larry wants class methods and instance methods to be the same thing

[14:35] <putter> yeah, but I thought I once saw a "in retrospect, wish we had done x y z differently paper".  maybe.

[14:35] <stevan> I am thinking a mm 3.0 is going to be needed after we have the new PIL runcore in place anyway

[14:35] <stevan> putter: hmm... that would be good to read

[14:36] * putter putter pops briefly over to #squeak .   then list list audreyt's todos for this shift.  then, whatever.

[14:36] * stevan has found that few people agree on the best approach to metamodels

[14:36] * stevan follows putter to #sqeak

[14:37] *** Grrrr_ joined
[14:37] <stevan> hmmm, very quite in there

[14:38] <stevan> I think I would like to see Roles have a similar model to the ML module system

[14:38] <putter> yes.  ah well.  todo:

[14:38] <stevan> :)

[14:40] <putter> more follow-up changelogging; TODOing t/pugsbugs/* that are not regressions (i.e. those that fails at the end, or are checked in after last release); look at regressions.  Also "Hybrid Type Checking"; "Types For Modules".  And is the a st80 postmortem paper.

[14:41] <putter> stevan: anything in particular you'd like to do pre-errands?

[14:42] <stevan> putter: nope, just looking for the smalltalk stuff

[14:42] <putter> ok, non-regressions seems like a dirt-brushing banana.  checking...

[14:43] <stevan> http://users.ipa.net/~dwighth/smalltalk/bluebook/bluebook_imp_toc.html

[14:43] <stevan> its not what you are looking for.. but an interesting bit of stuff anyway

[14:43] *** chris2 joined
[14:46] <putter> anyone know what the rNNNN of the last release was?

[14:46] <putter> err, or what the last release N.N.N was? 

[14:47] * lypanov giggles

[14:47] <lypanov> i have a new tshirt idea:

[14:47] <lypanov>  $

[14:47] <lypanov> =>

[14:47] <lypanov> FIXED

[14:47] <stevan> putter: http://lambda-the-ultimate.org/node/276

[14:47] * stevan is following some of these links

[14:47] <putter> stevan: re bluebook, neat.  you've seen Slate, yes?

[14:48] <stevan> Slate?

[14:48] <putter> ST derivative?  putter looks for link...  may have name wrong....

[14:48] <putter> http://slate.tunes.org/

[14:49] * putter bookmarks bluebook chapters, doesn't quite get lypanov's t-shirt - puzzled...

[14:50] <chris2> lypanov: ?

[14:51] <putter> stevan: oh, awesome.  classics-online++.  now if only we could get the ACM digitial library to open up, open source would actually have access to the literature...

[14:52] <stevan> putter: http://slate.tunes.org/documentation.html

[14:52] <lypanov> putter / chris2: $$$ == dollars, FIXED as in bugzilla resolution

[14:53] * putter still trying to figure out rNNNN of last release...  oh I know - grep captured #perl6 log... ;)

[14:53] <chris2> lypanov: i'm too clever for this world

[14:53] <lypanov> what'd ya do now?

[14:53] <chris2> i thought of $ as being apply in haskell and fix-points :P

[14:53] <lypanov> :P

[14:54] <lypanov> umm

[14:54] <lypanov> http://www.smallscript.org/

[14:54] <lypanov> wish that was oss and worked with mono

[14:57] *** avar joined
[14:58] <putter> [01:13] <svnbot6> r7520 | autrijus++ | * This be Pugs, version 6.2.10.

[14:59] <putter> stevan: re slate docs, anything in particular?  it's a neat system.

[15:00] <putter> lypanov: so create a smallscript front end to p6?

[15:02] *** Limbic_Region joined
[15:03] <svnbot6> r8802 | audreyt++ | * slurpy_param.t: unTODO two now-passing tests thanks to the

[15:03] <svnbot6> r8802 | audreyt++ |   named arg refactoring.

[15:03] <lypanov> putter: mainly interesting from the perspective of for the speed and integration

[15:03] <lypanov> coding in her sleep again :)

[15:04] <putter> :)

[15:04] <stevan> fscript is kind of cool too ,.. like Smalltalk meets APL IIRC http://www.fscript.org/

[15:04] <lypanov> ooo

[15:04] <lypanov> stevan: thx for the link. shall test this out tonight

[15:04] <stevan> :)

[15:05] * stevan thinks #perl6 should start authoring papers 

[15:05] <lypanov> http://www.fscript.org/news.htm

[15:05] <lypanov> yum

[15:05] <putter> caution - I just now svn up, and make broke on 8801.  ext/Locale-KeyedText makefile issue.

[15:05] <Juerd> stevan: Just dump IRC logs ;)

[15:05] <Juerd> stevan: Publish those.

[15:06] <stevan> Juerd: but its not a *real* paper unless its formatted with LaTeX :P

[15:07] <Juerd> stevan: \begin{verbatim}

[15:08] <svnbot6> r8803 | audreyt++ | * operators/binding/scalars.t: chase the change that restricts

[15:08] <svnbot6> r8803 | audreyt++ |   $CALLER::a to only see $a declared as "env" in caller's scope.

[15:08] <putter> ooo, pyinjector looks neat.  (top of news.htm)

[15:08] * stevan awards Juerd a PhD from the University of Perl 6

[15:08] <Juerd> Woohoo!

[15:09] * Juerd orders new business cards immediately.

[15:09] <putter> :)

[15:10] * Juerd wraps a verbatim block around this part of the IRC log, prints it, and frames it.

[15:10] <putter> lol

[15:10] <stevan> :D

[15:10] <svnbot6> r8804 | audreyt++ | * inherit_from_role.t: todo<feature> all 4 subtests as those

[15:10] <svnbot6> r8804 | audreyt++ |   depends on working Roles in the metamodel.

[15:10] <Juerd> What use is a PhD without a certificate? :)

[15:11] <binary42> You will need to generate a References section though. Quick get all the host names!

[15:11] <stevan> yes, that all important "peice of paper" :)

[15:11] <Juerd> binary42: The references are mentioned in angle brackets just after each time stamp.

[15:12] <binary42> but how will I go about looking up more information about that source without something more that a name?

[15:12] <Juerd> Nicknames are more stable and identifying than hostnames :)

[15:12] <Juerd> (culturally)

[15:12] <Juerd> binary42: This paper is dynamic. You can join and participate at any time.

[15:12] * binary42 waves to the future LtU community. 

[15:13] <svnbot6> r8805 | audreyt++ | * data_types/num.t: chase S02's more restricted definition

[15:13] <svnbot6> r8805 | audreyt++ |   of underscores between numeral digits; now multiple underscores

[15:13] <svnbot6> r8805 | audreyt++ |   are not ok, and neither are beginning/trailing underscores.

[15:13] <Juerd> binary42: So if you think some information is lacking, you can ask the authors and it'll automatically update! :)

[15:19] <lypanov> putter: very (pyinjector)

[15:21] <rafl> Juerd: Do you have some copies of the s:g/5/6/; shirts? If yes, can you bring one of them to fosdem for me? :-)

[15:23] <Juerd> rafl: No, none

[15:24] <Juerd> I haven't even seen a cafepress one yet

[15:24] <rafl> :-(

[15:24] <Juerd> As far as I know, Audrey is the only one on this planet who already has them :)

[15:24] <rafl> I think it would be a good idea to bring some of them to GPW.

[15:25] <Juerd> I agree, but I don't like the financial risk, and the lots of work to ship shirts, and that's why I chose cafepress.

[15:25] <lypanov> rafl: hehe. neat tshirt idea

[15:25] <Juerd> I can have them mass produced much cheaper than Cafepress.

[15:26] <Juerd> But I'd first need some assurance that they'd be sold, 'cause I don't want more than two of them in my own wardrobe :)

[15:27] <Juerd> (Approx EUR 13 per shirt, high quality shirt and screenprinting)

[15:32] <audreyt> EUR 6~7 here :)

[15:32] <Juerd> Wowie

[15:32] <audreyt> (for the perl6 timeline short you have)

[15:32] <audreyt> s/short/shirt/

[15:32] <Juerd> audreyt: Are black shirts an option?

[15:32] <Juerd> (That fits better with the cryptic nature of s:g/5/6/;, in my opinion)

[15:33] <audreyt> I can ask, probably yes

[15:33] <Juerd> Neat. At that rate, I don't mind getting a few

[15:33] <audreyt> maybe I should print a bunch and bring it to osdc/gpw

[15:33] <Juerd> That'd be great, I think

[15:33] <Juerd> See also my p6l post; consider replying if you want to do this

[15:34] <Juerd> Have to run; afk

[15:35] <svnbot6> r8806 | audreyt++ | * change the "sub *foo" in Prelude.pm into "sub foo is builtin",

[15:35] <svnbot6> r8806 | audreyt++ |   and rework Scalar::as etc into multis.

[15:35] <svnbot6> r8806 | audreyt++ |   That makes sprintf_and_as.t pass.

[15:40] <svnbot6> r8807 | putter++ | :todo<bug>ed all t/pugsbugs tests which are non-regression failures.  That is, failing tests added since r7520 aka 6.2.10.

[15:40] <svnbot6> r8807 | putter++ | As a result, t/pugsbugs is now entirely clear of failures.

[15:41] <audreyt> heh.

[15:41] *** hexmode joined
[15:42] <audreyt> in that case, maybe rename the all-pass-without-todo parts of t/pugsbugs/*.t to the correctly-named subdirs?

[15:42] <putter> audreyt: not that I don't enjoy and appreciate your presence, but... why aren't you asleep? ;)

[15:42] <audreyt> that's a good question

[15:43] <audreyt> I don't have good reasons

[15:43] * audreyt vanishes in a puff of logic

[15:43] * putter dusts hands

[15:44] *** cognominal joined
[15:53] *** Eimi joined
[15:55] *** vel joined
[15:55] *** DaGo joined
[15:56] *** Eimi joined
[15:58] *** vel joined
[15:58] <putter> So, now we have a shift todo list of: more follow-up changelogging; move all-green files out of t/pugsbugs/ (but not rules_with_embedded_parrot.t I think);  Reading suggestions: "Hybrid Type Checking"(audreyt), "Types For Modules"(stevan). 

[15:59] <putter> Anyone want to tackle changelogging?

[16:01] <putter> from ./ChangeLog: ** to r8657 - needs editing ** XXX big things not mentioned here: - objectspace / metamodel - PILN - sixpan / JIB - PIL2JS

[16:04] *** vel joined
[16:04] <putter> so three distinct tasks/task-sets:  1- read through svn log -r8658:HEAD , adding entries to ChangeLog.  You don't have to do the whole thing, just raise the ** to r8NNN **;  2- edit/clean what's already there; 3- write lines for some of the "big things not mentioned".  Again, with no need to do all of them, just make progress.

[16:05] <putter> Volunteers encouraged.

[16:05] <putter> I'll start moving files out of pugsbugs, unless someone else wants that.

[16:06] <putter> None of these should repair or break anything, so if someone wanted to run a smoke on HEAD, and smokeserve it, now would seem a good time.

[16:09] <putter> helloooOOOOooo.  there is someone else besides me around here isn't there?  ;)

[16:11] <masak> :)

[16:11] <putter> Juerd: how about ChangeLog'ing svn log -r8658:8675?  seventeen measly log entries, most of which can no doubt be ignored.

[16:12] <putter> hi masak :)  got a few spare cycles.  five minute chunks fine.  audreyt left a list of a couple of things she'd like done this "shift", while she sleeps.  game?

[16:13] *** vel joined
[16:14] <putter> ie, t/pugsbugs/parsing_my.t is no longer failing.  so how about check that the tests appear in the usual my test files, or copy them over, and svn rm parsing_my.t

[16:16] <putter> we can all use http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.10-r8805-freebsd-normal--1138377610-1707--8984-8769-215-1394-921-0--0ae404ac7168849a9ec56a90984c13c1.html  to see which pugsbugs tests are all light-green.

[16:18] *** elmex joined
[16:20] *** vel joined
[16:20] *** iblechbot joined
[16:22] <putter> elmex, vel: got five minutes and commit bits?  like to knock off one of the pre-release todo items?

[16:24] <avar> cool s:g/5/5/ t-shirt

[16:26] <elmex> ?

[16:26] <elmex> putter: ??

[16:27] <PerlJam> avar: why would anyone want a no-op shirt like that?  ;)

[16:28] <avar> ?eval $x;

[16:28] *** evalbot_8801 is now known as evalbot_8807

[16:28] <evalbot_8807> Error: Undeclared variable: "$x" 

[16:28] <avar> ?eval my $x = "aaa"; $x ~~ s:g/a/b/; $x

[16:28] <evalbot_8807> \"bbb" 

[16:28] <avar> ?eval my $x = "aaa"; $x ~~ s:xg/a/b/; $x

[16:28] <evalbot_8807> \"baa" 

[16:29] <avar> ?eval my $x = "aaa"; $x ~~ s:gx/a/b/; $x

[16:29] <evalbot_8807> \"baa" 

[16:29] <avar> odd

[16:29] <avar> what does x do now?

[16:29] <putter> elmex: do you have permissions to edit pugs files?  would you like to spend 5 min helping toward the release?

[16:29] <putter> :)

[16:30] <elmex> hm, i don't know, i guess i checked in a test around 1 year ago

[16:30] <putter> if the latter but not the former, can fix the former now...

[16:30] <putter> great!

[16:31] <elmex> but i've no idea where my checkout is

[16:32] <tewk> putter:  I can run a smoke if you need it.

[16:32] <putter> one task is to "look at a test in pugsbugs/ which is now all happy, say t/pugsbugs/postincrement_in_subscripts.t, make sure the test inside of it is present in whatever file usually tests such things (or copy it over), and svn rm the pugsbugs file.  pugsbugs is full of files for things which are no longer bugs...

[16:34] <putter> elmex: just  svn co http://svn.openfoundry.org/pugs/    openfoundry is being fast today, so no problem!

[16:34] <elmex> it's just that i don't really have time right now

[16:35] <putter> tewk: that would be great!  and did you see the todo list back a 1/2 hour or so?

[16:35] <tewk> I'll go look

[16:36] <putter> re ChangeLog, gaal says in the r8658 log

[16:36] <putter>   ChangeLog towards release - got to r8131; doesn't include objectspace stuff

[16:37] <putter> so there's a ways to go.  could do svn log -r8131:8150 ! :)

[16:37] <putter> tewk++

[16:38] <elmex> putter++

[16:38] <elmex> elmex--

[16:40] <putter> http://colabti.de/irclogger/irclogger_log/perl6?date=2006-01-27,Fri&sel=701#l1034

[16:41] <putter> elmex: why elmex - - ?

[16:41] * putter puzzled

[16:45] <tewk> elmex is a little hard on on him/herself 09:23 < elmex> it's just that i don't really have time right now,     hence - -

[16:45] <elmex> because i'm coding perl5 right now 

[16:47] <svnbot6> r8808 | putter++ | Added some blank lines between the current release and the finished entry for the last one.

[16:48] <putter> ach, that's fine.  pugs is a long haul thing.  plenty of ongoing opportunities to contribute.  new TASKS file. :)   I'm just trying to stir up activity.

[16:49] <tewk> putter++ stirring up activity

[16:51] <elmex> perl6 seems like a long haul thing too

[16:55] *** vell joined
[16:58] <putter> tewk: thanks.  :)  when audreyt has "things she would like to see done" which we can do, it seems very worth while getting them done, so she can tackle the harder bits.

[16:58] <svnbot6> r8809 | putter++ | Deleted the now working t/pugsbugs/parsing_lexical_code_vars.t, moving its test to t/var/my.t.

[17:00] <putter> elmex: re p6, yeah, but I suspect we are seeing the slowest period right about now.  with the piln switch, I suspect there will be a cascade of "oh, now that works so we can do that, and now that works so we can do that, and now...".  with associated increase in attention and personnel.

[17:01] *** ycheng joined
[17:01] * putter looks at t/pugsbugs/parsing_if.t, maybe some ChangeLog next if someone doesnt beat me to it.

[17:13] <tewk> putter: where should pugsbugs/postincrement_in_subscripts.t go ?

[17:13] <putter> tewk: looking...

[17:13] <svnbot6> r8810 | putter++ | Deleted the now working t/pugsbugs/parsing_if.t .  One test was added to t/statements/if.t. A second was already there.  The third was an always working test, a minor variation, which was present only for contrast - so it was discarded.

[17:14] <putter> so candidates are operators, arrays, and parsing...

[17:15] <theorbtwo> Put it in array-derefence, with a comment in postinc, or vice-versa?

[17:15] <putter> reading the test more closely, it looks like it was an array issue...

[17:17] <tewk> there is t/builtins/arrays

[17:18] <putter> oh, I forgot step one.  find . |grep -v svn|xargs grep ']++'  ... there are already similar tests in t/operators/inc.t so that likely the best place.

[17:19] <putter> err, find t/ ...

[17:19] <putter> theorbtwo: is there a postinc somewhere?  checking...

[17:20] <theorbtwo> t/operators/inc.t sounds about right for that.

[17:20] * theorbtwo was just guessing.

[17:20] <putter> ah.  :)  maybe just inc.t.

[17:20] *** eric256 joined
[17:20] * putter wonders how much cross referencing is going on...

[17:20] *** eric256 left
[17:23] <putter> so a little bit, but not a lot.  mostly "moved this" comments.

[17:24] * putter wonders if the current test organization/tech can survive another 2x or 3x of size and still be manageable.  maybe with Test::Base??

[17:25] <theorbtwo> Putter: I don't think it's manageable now.

[17:25] <putter> tewk++ theorbtwo++

[17:25] <putter> ;)

[17:25] <putter> yeah

[17:26] <putter> have there being thoughts on how to proceed?  Test::Base?  a test generator?

[17:26] <putter> something else?

[17:26] * putter tries to think of the largest language validation suite he has ever seen... (reasoning that p6's will have to be larger;)

[17:27] <putter> theorbtwo: in what way(s) is it not manageable?

[17:28] <theorbtwo> "I found a problem, is there a test for it?"  "I have no idea."

[17:28] <theorbtwo> "Let me do a test run..." <three hours later> ...

[17:28] <putter> todo item: check out scala and slate and see what they are doing test wise.  also pypy.  mono?

[17:29] <putter> :)

[17:29] <theorbtwo> The kennel idea is a very good one -- that is, be able to track the history of a purticular test -- when it started succeeding or failing.

[17:29] *** vel joined
[17:32] <putter> so better organization... maybe an index?  or a "table of contents"? giving a decision tree for what goes where?  something else?

[17:33] <putter> and... the ability to do a quick check, rather than a full "all the edge cases anyone has ever thought of" test run, to get faster feedback?

[17:34] <putter> and something like the... mumble... test failure tracking system.  tinderbox?

[17:37] <theorbtwo> Tinderbox would be kind of cool, in a way.

[17:37] <theorbtwo> More a system of reporting in semi-realtime changes in tests.

[17:38] <theorbtwo> <tinderbot6> t/foo/bar/baz.t # 26 "Frobble's correctly" failed between r2743 and r2746 -- blame theorbtwo or putter!

[17:38] <theorbtwo> (Tinderbox just tracks if it still compiles.)

[17:47] <putter> yeah.  good point.

[17:48] <putter> actually, the whole "blame" aspect doesnt quite fit, since we're find with folks breaking the build.  but knowing the rNNNN number would be great

[17:48] *** hexmode joined
[17:48] <Juerd> putter: query?

[17:48] <Juerd> Oh, I'm not identified yet

[17:49] <Juerd> Fucking freenode

[17:50] <theorbtwo> My thinking was that it'd always be working on the latest thing.  If there's a new checkin in the middle of building, the build is killed, svn up, restart building.

[17:50] <theorbtwo> If it's killed partway through a test run, it can report thus far.

[17:50] <putter> hi Juerd, ralf

[17:50] <putter> http://colabti.de/irclogger/irclogger_log/perl6?date=2006-01-27,Fri&sel=701#l1034

[17:51] <theorbtwo> Also it'd possibly be nice for it to be able to automatically handle pugsbugs.

[17:52] <theorbtwo> That is, there should never be actual tests in pugsbugs, just symlinks to tests that have recently been failing.

[17:52] *** brentdax joined
[17:52] <putter> some of the pugsbugs have been done (but not all.  I think tewk is working on that?)

[17:52] <rafl> Who's ralf?

[17:53] <putter> no progress yet on the ChangeLog.  note we're up to r8131 I think, rather than the much later rev I mentioned above.

[17:53] <putter> oooops.  sorry.  typo.

[17:53] * putter blushes

[17:54] * rafl will do changelogging about JIB/sixpan after getting something to eat.

[17:54] <putter> awesome. :)

[17:56] * putter reviews t/README to see what exactly pugsbugs is...

[17:57] <putter> doesnt mention it.  a "audreyt please fix this" directory? ;)  a "this one is getting in the way more than usual"? something else?

[18:01] *** jdv79 joined
[18:04] <putter> Oh, no, I was right the first time.  The ChangeLog is up to r8657.  gaal++

[18:05] *** rantanplan_ joined
[18:12] <putter> tewk: are you still plugging away on postincrement_in_subscripts.t ?

[18:12] <svnbot6> r8811 | putter++ | ChangeLog up to r8670.  Hey, that was easy!

[18:18] <putter> bbiab

[18:20] <tewk> putter: got distracted, I can move it over.

[18:21] *** cPbrian is now known as br4in

[18:30] <putter> great

[18:31] <putter> thanks tewk.  after lunch, I'll try to clean up whatever hasn't been gotten to.

[18:32] <putter> bbl

[18:34] *** bernhard joined
[18:36] <svnbot6> r8812 | tewk++ | t/pugsbugs/postincrement_in_subscripts.t moved to t/operators/inc.t

[18:43] *** Khisanth joined
[19:08] <kolibrie> I built pugs and am now getting './pugs: error while loading shared libraries: libparrot.so.0.4.1: cannot open shared object file: No such file or directory'

[19:08] <kolibrie> I have parrot/blib/lib/libparrot.so.0.4.1

[19:08] <kolibrie> and /usr/local/lib/libparrot.so.0.4.1

[19:08] <kolibrie> any ideas what I need to do so they are seen?

[19:10] <rafl> kolibrie: What does ldd pugs give you?

[19:11] <kolibrie> rafl: lld: command not found

[19:11] <kolibrie> od

[19:11] <kolibrie> oh

[19:11] <rafl> ldd, not lld

[19:11] <PerlJam> kolibrie: ldd, not lld :)

[19:12] <PerlJam> kolibrie: also, perhaps you need to set your LD_LIBRARY_PATH to the appropriate directory(ies)

[19:12] <kolibrie> ok, that got something.  What is relevant?

[19:12] <kolibrie> libparrot.so.0.4.1 => not found

[19:13] <rafl> Or add /usr/local/lib to /etc/ld.so.conf

[19:13] <kolibrie> hmm, everything else is in /lib, not local/lib

[19:14] <rafl> kolibrie: Update ld.so.conf or install parrot into /usr instead of /usr/local.

[19:15] <kolibrie> rafl: ok, /etc/ld.so.conf updated

[19:15] <kolibrie> how do I make it take effect?

[19:20] <rafl> kolibrie: ldconfig

[19:21] *** nnunley joined
[19:22] <kolibrie> rafl: ahh, much better.  Thank you

[19:22] <kolibrie> PerlJam: and thank you, too

[19:22] *** sahadev joined
[19:29] *** khisanth_ joined
[19:30] *** khisanth_ is now known as Khisanth

[19:30] *** jp-autark joined
[19:33] *** khisanth_ joined
[19:43] *** khisanth_ joined
[19:44] *** khisanth_ is now known as Khisanth

[19:49] <svnbot6> r8813 | putter++ | TASKS+=1  Explore how other langauges are structuring their validation tests.

[19:49] <svnbot6> r8814 | kolibrie++ | small maintenance to keep this example running

[19:58] <svnbot6> r8815 | putter++ | Moved the passing t/pugsbugs/numbered-match-variable.t file to t/rules/numbered_match_variable.t.

[19:59] *** Cryptic_K joined
[20:02] *** lypanov joined
[20:10] <svnbot6> r8816 | putter++ | Deleted the now working t/pugsbugs/parsing_do_my.t.  Tests moved to t/var/my.t.

[20:19] <svnbot6> r8817 | putter++ | Deleted the now working t/pugsbugs/parsing_my.t.  Test moved to t/var/my.t.

[20:20] <putter> I think that's it for passing pugsbugs files.

[20:21] *** dduncan joined
[20:36] <putter> I'm going to start on ChangeLog.  Doing it chunks.  Anyone who wants to take over, or work in parallel, that would be great.

[20:42] <avar> putter: generate it from commit messages?

[20:46] <svnbot6> r8818 | putter++ | ChangeLog to r8700.

[20:46] <putter> avar: yes! :)   svn log -v -r8NNN:8MMM > deleteme

[20:47] <putter> usually one doesnt actually have to look at the patch.  unless the log entry is a puzzle.

[20:47] *** hexmode joined
[20:48] <putter> want to take r8700:8730 and I'll take r8730:8760 ?

[20:50] <putter> the "where to put it in ChangeLog" is pretty simple, there's a section for t/ docs/ examples/, another for misc/, another for ext/, and the mainstuff gets broken down as feature or fix, and within those, pugs or js.

[20:50] <avar> me?

[20:51] <putter> the what to say is easy to, something simple, that doesnt lose much information.  can be crufty too, as there will be a cleanup pass.

[20:51] <putter> avar: ya, you :)

[20:51] <dduncan> allo

[20:51] <putter> hey dduncan

[20:51] <dduncan> is changelogging all that's left to do?

[20:51] <putter> like to help ChangeLog'ing

[20:52] *** stevan joined
[20:52] <avar> I'm uh busy .. doing nothing whatsoever;)

[20:52] <putter> nope, but its the last of audreyt's 'hings she'd like to see done while she slept'.

[20:53] <putter> ext/ also needs to be worked through

[20:54] <dduncan> for my part, I've completely changelogged my ext/ modules

[20:55] <dduncan> and of course, this is a delta since 6.2.10, 4-5 months ago

[20:55] <putter> oh, I meant debugging the rest of the failing ext/ modules. ;)

[20:55] <dduncan> the problem is "no such method/sub" errors

[20:56] <dduncan> which I think may be an omission in pugs itself not handling private ones

[20:56] <putter> right

[20:56] <dduncan> at least that's the case with my own ext/ modules, though mine don't fail tests because they only test for compiling right now

[20:57] <putter> would you like to share in bringing the ChangeLog up to date.  split with you alternate blocks of 50 revs?

[20:58] <dduncan> perhaps ... though unless the solution is fixing pugs, I'm more inclined to track down ext/ and fix or todo the failures there

[20:58] <dduncan> maybe

[20:58] <dduncan> as I recall about the changelog

[20:58] <dduncan> a pass was done through it recently

[20:59] *** avarab joined
[20:59] <dduncan> and certain sections were skipped as they should be done by people more intimitely aware of the sections they referred to

[20:59] *** vike joined
[20:59] * putter starts on -r8700:8750 .   something like 120 revs to go after that.

[21:00] <putter> yep.  but the scan has a ways to go before it reaches present.  about 200 revs to go.

[21:01] <dduncan> hm, I'm getting a "build failed" on my last make ...

[21:01] <dduncan> will try again

[21:05] <putter> i had a svn up; make failure.  a rebuild from scratch worked.

[21:06] <pasteling> "dduncan" at 24.108.164.7 pasted "link failure on 'make', undefined yaml symbols" (289 lines, 16.9K) at http://sial.org/pbot/15636

[21:06] <dduncan> did you get the same error?

[21:07] <dduncan> also, by "from scratch", do you mean with a 'make realclean' in the middle?

[21:07] *** vike left
[21:08] <putter> no.  I only have two modes, simple make, and blow away the entire directory, and literally start from scratch.

[21:08] <putter> s/tory, and/tory and/

[21:09] <dduncan> are all the normal t/ passing or skipping now, with only ext/ left?

[21:10] <putter> that (the paste) does look like what I saw.

[21:10] <dduncan> and you fixed it with a blow-away

[21:10] <putter> re tests, don't know.  audreyt did assorted commits, but I don't think I've seen a smoke on the other side.

[21:12] <kolibrie> dduncan: I did a make realclean and build successfully today

[21:13] <putter> i just (cd SVN/pugs; tar cf - .)|(cd pugsxNN; tar xf -)    or something similar

[21:13] <putter> but a make clean of some sort should also do it, unless that's borked too.

[21:13] <dduncan> well, I'll do a clean rebuild and smoke now ... will take about 3 hours

[21:13] <dduncan> okay

[21:14] <dduncan> blow away for me works like this 

[21:14] <dduncan> an advantage of svk is that the whole thing is backed up on my own machine, so no network pulls necessary

[21:14] *** stennie joined
[21:14] <dduncan> I just cd to the root pugs directory, delete all its contents, then svk revert -R it

[21:15] *** Debolaz2 joined
[21:15] *** integral joined
[21:15] <dduncan> and it restores from the svn server based backup on my machine

[21:17] <putter> I should be able to one a bit faster than that.  we'll see.  oh, drat.  oh well, I'm going to get a make test too. ;)

[21:17] <putter> svk++

[21:18] <dduncan> that said, I'll try the less severe 'make realclean' first

[21:24] *** avarab is now known as avar

[21:29] *** _SamB_ joined
[21:32] *** _SamB_ is now known as SamB

[21:43] <putter> dduncan: nope, there are still core failures.  split, arglist, array_mmd, array_ref, ...

[21:43] <svnbot6> r8819 | putter++ | ChangeLog to r8750.

[21:44] * putter takes a break from ChangeLog'ing

[21:46] <putter> stevan: could you do the ChangeLog object model entry(ies)?

[21:48] <putter> oh, wow.  the phrase "best verification suite" appears nowhere in the googleable universe.

[21:55] <stevan> putter: i will try, I am somewhat short on tuits lately

[21:55] <Juerd> Everyone is :(

[21:59] *** lisppaste3 joined
[22:08] *** lisppaste3 joined
[22:22] <wolverian> hmm, slate looks interesting

[22:23] <putter> yes, doesn't it

[22:23] <putter> slate on p6 anyone?  p6 on slate?

[22:24] <nnunley> More, porting mobius is interesting.

[22:24] <nnunley> And perhaps the pmd stuff for multiple dispatch.

[22:24] <nnunley> Slate itself is a little bit of a pain to program in, IMNSHO.

[22:31] <dduncan> now starting a smoke of r1819

[22:31] <dduncan> I mean, 8819

[22:32] <dduncan> it should be done in about 2 hours

[22:37] *** soam joined
[22:45] <putter> mobius is slate's implementation.  vm.  http://slate.tunes.org/doc/

[22:45] <putter> nnunley: what didn't you like about programming in slate?

[22:52] * putter shakes out his brain.  ada 95 test suite.  eeps.  http://archive.adaic.com/compilers/acvc/95acvc/acvc2_3/

[23:00] *** Shachaf left
[23:05] *** drbean joined
[23:12] *** Cryptic_K joined
[23:25] *** soam left
[23:25] *** avar joined
[23:28] *** lightstep joined
[23:31] *** r0nny joined
[23:32] <putter> does apple still use : as a path sepaeator?

[23:34] * putter notes http://svn.myrealbox.com/viewcvs/trunk/mcs/class/corlib/  is much clearer than the equivalent would be in p5, because a hierarchical name need not be expressed hierarchically in the file system.

[23:35] <putter> hmm, though here it may just be the equivalent of PIL-Run (aka PIL::Run), a name for humans not understood by the system.  dont know (mono).

[23:38] <putter> re apple, no.  osx is /

[23:39] <putter> so, should we start permitting/using file names of the form mumble/Foo::Bar::Hee/frotz in the pugs distribution?

[23:42] <rafl> What's the benefit from doing so?

[23:44] <putter> flatter, unhidden, is clearer.   ls giving   Foo::Bar  Foo::Hee::Qux  Zim::Zog   rather than just  Foo Zim

[23:46] <putter> dduncan: looks like my smoke ran faster.  r8818 is up as http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.10-r8818-linux-normal--1138405399-4024--11017-10051-966-1192-1575-0--8f7027653efa8aaca9b4e517b8d3430f.html

[23:46] <putter> still lots of red.

[23:46] <putter> rafl: no?

[23:46] <rafl> putter: Sure that every single filesystem for every single platform we want to support can live with that?

[23:47] <putter> no

[23:47] <putter> especially if that includes pre osx apples.  macintosh.

[23:47] <rafl> I don't even know what that includes. And I know even less about the filesystems. So I fear doint that.

[23:48] <rafl> But what I would be interested in is a directory layout that supports multiple installed versions of a module.

[23:49] <putter> yes.  essential. 

[23:50] <putter> I may be insufficiently risk averse because i _really_ dislike the Foo/Bar/Hee "smash stuff down across the filesystem" game.

[23:50] <Juerd> rafl: Have you sent the CF?

[23:51] <putter> CF?

[23:51] <Juerd> Yes.

[23:51] * putter saw "seen" for "sent".  thought it was a nifty new thing to look at.  never mind. ;)

[23:52] <Juerd> Re filesystems, I once considered for a project of my own, to use Foo/Bar/Baz/0.13.foo kind of file names, with Foo/Bar/Baz/default being a symlink to the latest version.

[23:52] <rafl> Juerd: Yes.

[23:52] <Juerd> rafl: Okay; thanks. I hope it arrives before you do :)

[23:53] <rafl> ;-)

[23:53] <Juerd> 00:53 < putter> flatter, unhidden, is clearer. 

[23:53] <putter> Juerd: has there been any p6l discussion of this kind of thing?

[23:54] <Juerd> Flatter isn't necessarily better. In fact, I think the opposite is true.

[23:54] <Juerd> putter: Not that I know of.

[23:54] <rafl> We should hack something together in docs/AES/, imho.

[23:55] <Juerd> putter: I like the Foo/Bar.pm, and would dislike Foo::Bar.pm, because when it's Foo/Bar/Baz/Quux/Xyzzy, the use of "../Blah" makes life easier.

[23:55] *** lightstep left
[23:55] <Juerd> I wouldn't even mind changing :: to / ;)

[23:55] <Juerd> use Foo/Bar;

[23:55] <Juerd> Foo/Bar/BAZ++;

[23:55] <Juerd> (I *know* it's not possible)

[23:56] <rafl> I also get along with Foo/Bar.pm quite well.

[23:57] <putter> Juerd: if I have a lump of functionality Languages::Lisp::Other::Lisp1::OnPerl6, I'd like to have a directory of that name.  not a long dangling tail hanging off of the completely uninformative Languages/.  no?

[23:57] <Juerd> putter: "tree"

[23:57] <Juerd> putter: "find"

[23:58] <Juerd> You can already get any view you want

[23:58] <Juerd> Mapping one hierarchical structure to another just makes sense.

[23:58] <Juerd> :: is the path separator

[23:58] <putter> hey, we can file it under L/a/n/g/u/a/g/e/s/-/L/i/s/p/...  and the same tree/find argument still holds.  :-P

[23:59] <rafl> Beside that it's faster on most file systems to have files seperated into directories over multiple levels than to put lots of files into a single dir.

[23:59] <putter> (but not admittedly the hierarchy <-> hierarchy argument)

