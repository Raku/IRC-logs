[00:13] *** xinming joined
[00:18] *** rbysamppi joined
[00:24] *** beppu joined
[00:42] *** xinming joined
[00:42] *** scook0 joined
[00:50] *** kanru2 is now known as kanru

[00:52] *** Quell joined
[00:59] *** stclare joined
[01:06] *** beppu left
[01:14] *** mkhl joined
[01:50] *** fglock left
[02:10] *** mako132_ joined
[02:32] <stevan> audreyt: ping

[02:33] <stevan> audreyt: I think we need to take a serious look at Dylan (if you haven't already)

[02:35] *** stevan left
[02:35] *** stevan joined
[02:36] <audreyt> stevan: I have already did

[02:36] <audreyt> the day it won ICFP'06 second place.

[02:36] <stevan> audreyt: :)

[02:36] <audreyt> Dylan, Scala, VB

[02:36] <stevan> I just got a book on it in the mail today

[02:36] <audreyt> is currently the 3 thing constantly in my mind for AST design :)

[02:36] <audreyt> excellent

[02:37] <stevan> it sounds very much like Perl 6

[02:37] <stevan> static when it can, dynamic when it needs to

[02:39] <audreyt> yes

[02:39] <audreyt> and "just another lisp with infix syntax"

[02:39] <stevan> :)

[02:39] <audreyt> I think Dylan is perl6 without advertisement, in a way...

[02:39] <stevan> Algol never goes outta style :)

[02:40] <stevan> so nothingmuch is using Class::MOP/Moose as a platform for his Perl 6 compilation experiments :)

[02:40] <audreyt> though the Dylan community is... let's say not very vibrant.

[02:41] <audreyt> stevan: woot! url?

[02:41] <stevan> we need to get you involved once you finish playing with the parser :)

[02:41] <audreyt> I've already finished (mostly) :)

[02:41] <stevan> audreyt: irc.perl.org #moose mostly right now

[02:41] <audreyt> kcool

[02:41] <audreyt> but where's code? :D

[02:41] <stevan> in nothingmuch's head :)

[02:41] <audreyt> aw

[02:41] * audreyt thinks nothing exists without a url

[02:41] <stevan> he is just getting familiar with the MOP right now

[02:42] <audreyt> k. I'd like to see more misc/pX/* experiments :)

[02:42] * stevan thinks nothingmuch's crainial server might be down for maint right now :)

[02:42] <stevan> its pretty late in .il

[02:42] <audreyt> k.

[02:42] <audreyt> I've been tracking Moose releases and internals

[02:43] <stevan> we have plans for Moose -> Module::Compile -> Super::Moose

[02:43] <stevan> audreyt: your comments on the TypeConstraint stuff would be much appreciated

[02:43] <stevan> that is the part I am least confident about

[02:43] <audreyt> well, you don't use container objects

[02:44] <stevan> mugwump is playing around with collection containers right now

[02:44] <stevan> but I didnt want to impose that onto everyone in order to use Moose

[02:44] <audreyt> I think type constraints belongs to the (say) collection/scalar containers

[02:45] <audreyt> but it's okay for the class to have a passthru interface

[02:45] <audreyt> basically serving as heterogenous hash

[02:45] <audreyt> that places constraints based onkey

[02:45] <audreyt> just for performance

[02:45] <audreyt> the outside interface should remain the same

[02:45] <audreyt> the only difference is when you take $obj.property as lvalue

[02:45] <stevan> nothingmuch and I are working on an Instance sub-protocol, which might allow tighter integration

[02:45] <audreyt> excellent

[02:46] <stevan> and thoughts of use Moose -strict; have been circulating

[02:47] * audreyt ponders JFDI and port her $job-Jifty code to Moose

[02:47] <audreyt> (and its use of  Perl6::Subs to SuperMoose)

[02:47] <stevan> the catalyst crew has been doing lots of Mooseing lately

[02:47] <audreyt> yes, I've been tracking #catalyst too :)

[02:48] <stevan> obra needs to get movin, cause a Moose is much bigger than a Pony :)

[02:48] <audreyt> maybe we'll ship with a Moosey

[02:48] <audreyt> Moosey in the Sky with Diamonds

[02:48] <stevan> :)

[02:49] <obra> "Camoony"

[02:49] <ingy> Elk

[02:49] <stevan> obra: you will need Perl 6 to write that one :)

[02:50] <stevan> hey ingy,..

[02:50] <ingy> stevan!

[02:50] <stevan> I will need a spork tutorial at YAPC

[02:50] <audreyt> stevan: so, Super::* is like the namespace for dialects?

[02:50] <stevan> audreyt: no, just silliness

[02:51] <audreyt> sure

[02:51] <stevan> Moose::Hopped::Up::On::Crack is just as good

[02:51] <audreyt> but we're not exactly unknown for take silliness and push them into produciton

[02:51] <stevan> :D

[02:52] <obra> Moose::::Overdosed::On::Speed::Ecstasy

[02:52] <stevan> obra: you could probably alias that as Moose::Raver

[02:52] <obra> Moose::Candy

[02:53] <stevan> nothingmuch already claimed Moose::POOP for a Moose ORM

[02:55] <audreyt> ok. I'm now going to Yingge

[02:55] <audreyt> # http://en.wikipedia.org/wiki/Yingge

[02:55] <audreyt> and paint some Moose porcelain dishes for lambdamoose

[02:55] <stevan> :D

[02:56] <stevan> in thousands of years people will find them and be like... wtf?

[02:57] <audreyt> *wave* &

[02:57] <stevan> enjoy

[03:07] *** weinig is now known as weinig|sleep

[03:12] *** avar joined
[03:25] *** Quell joined
[03:26] *** Quell joined
[03:27] *** dudleyf joined
[03:35] *** Quell joined
[04:51] *** mjk joined
[05:07] *** coumbes_ joined
[05:13] *** Pete_I joined
[05:17] <meppl> guten morgen

[05:18] *** reZo joined
[05:34] *** azuroth joined
[05:37] <Pete_I> hmm. first time i've been greeted in german. g'morning to you too, meppl.

[05:45] *** Quell joined
[05:53] *** phpError joined
[05:57] <meppl> good morning pete

[06:23] *** ghenry joined
[07:28] *** miyagawa joined
[07:37] *** bsb joined
[07:44] *** larsen joined
[08:02] *** elmex joined
[08:03] *** iblechbot joined
[08:16] *** macroron joined
[08:18] *** wilx joined
[08:20] <svnbot6> r10125 | audreyt++ | * Pugs.Parser: Refactor ruleInConditional into ruleBracketClass

[08:20] <svnbot6> r10125 | audreyt++ |   and use it to implement line-ending statement-terminating blocks:

[08:20] <svnbot6> r10125 | audreyt++ |     my &foo := {

[08:20] <svnbot6> r10125 | audreyt++ |         say 1;

[08:20] <svnbot6> r10125 | audreyt++ |         say 2;

[08:20] <svnbot6> r10125 | audreyt++ |     }   # Look, no semicolon!

[08:20] <svnbot6> r10125 | audreyt++ |     my &bar := {

[08:20] <svnbot6> r10125 | audreyt++ |         say 3;

[08:20] <svnbot6> r10125 | audreyt++ |         say 4;

[08:20] <svnbot6> r10125 | audreyt++ |     }   # ditto

[08:20] <svnbot6> r10125 | audreyt++ |   See L<S04/Statement-ending blocks> for details.  This made parsing

[08:20] <svnbot6> r10125 | audreyt++ |   another 5% or so faster...

[08:22] <audreyt> bbl again... &

[08:39] <gaal> If you need a mooseword starting with C, there's Caribou.

[08:42] *** kakos joined
[08:56] *** sockstat joined
[09:22] *** scook0 joined
[09:28] *** drrho joined
[09:51] *** alinbsp joined
[10:01] *** bernhard joined
[10:30] *** chris2 joined
[10:43] *** kioto joined
[10:43] <kioto> hi all

[10:50] <kioto> what is the stage of the new perl6

[10:50] <nothingmuch> new?

[10:50] <nothingmuch> i thoght there was only one perl 6

[10:50] <nothingmuch> or do you mean pugs?

[10:50] <nothingmuch> in which case: fun, impressive, and with lots to do

[10:51] <nothingmuch> http://smoke.pugscode.org

[10:52] <Juerd> nothingmuch++  # good summary

[10:54] <kioto> but what is need for a stable version of perl6

[10:54] <Juerd> kioto: needed, or the need?

[10:55] <kioto> both

[10:57] <nothingmuch> he need:

[10:57] <nothingmuch> have a nice language

[10:57] <nothingmuch> that can be used in a professional environment

[10:57] <nothingmuch> without taking a financial risk

[10:57] <nothingmuch> and without driving the userbase away

[10:57] <nothingmuch> (i'm only addressing stability ;-)

[10:58] <nothingmuch> needed: lots... we're still in the poking around stage

[10:58] <nothingmuch> but we think we're closer to the end than to the begining

[11:04] *** kioto left
[11:06] <nothingmuch> hmm

[11:06] <nothingmuch> interesting

[11:06] <nothingmuch> http://blog.moertel.com/articles/2006/04/28/the-supermarket-pricing-kata-in-haskell

[11:09] *** TimToady joined
[11:13] *** iblechbot joined
[11:18] *** KingDiamond joined
[11:48] *** marmic joined
[12:00] *** kane_ joined
[12:13] <pasteling> "scw" at 140.112.30.82 pasted "Pugs::Compiler::Rule compile error" (10 lines, 1K) at http://sial.org/pbot/16966

[12:15] <scw> Any idea? there are both Rule.pm and Rule.pmc under Pugs/Compiler/Rule/

[12:16] <scw> It used to choose the .pmc, but not knowing why it doesn't today, weird

[12:20] <audreyt> it takes

[12:21] <audreyt> "touch Rule.pmc"

[12:21] <audreyt> or

[12:21] <audreyt> "perl Makefile.PL"

[12:21] <audreyt> or put pugs/lib to your @INC

[12:23] <svnbot6> r10126 | audreyt++ | * more parsefail fixes...

[12:26] <scw> perl will look at the mtime?

[12:28] *** Ymmv joined
[12:28] <audreyt> yeah, though we get that check disabled for bleadperl (5.9.x)

[12:28] <audreyt> for now, try get v6.pm inside your path

[12:28] <audreyt> or just "touch" it

[12:28] <audreyt> the Makefile.PL should handle it

[12:29] <clkao> audreyt: hey, i need your help

[12:29] <scw> I touched it and passed :)

[12:30] *** elmex joined
[12:30] <audreyt> clkao: oh, right. I'm not holding an active title of anything now...

[12:30] <audreyt> clkao: you sure I'm eligible for doing that?

[12:30] <clkao> yes, for the past of course. (msg plz)

[12:30] <audreyt> k

[12:42] <audreyt> TimToady: parsec complains that

[12:42] <audreyt> @moose.map:{'x'}

[12:42] <audreyt> and

[12:42] <audreyt> @moose.infix:{'+'}

[12:42] <audreyt> can't be disambiged. thoughts?

[12:44] <audreyt> @moose.map: {'x'} # forcing a space would work but a bit draconian

[12:48] <audreyt> for now I enumerate the syntactic categs

[12:51] *** jsiracusa joined
[12:51] *** Ymmv joined
[12:52] <cognominal> juste posted question about interroperability with Javascript

[12:53] <cognominal> It has interestings ramifications

[12:53] <clkao> audreyt: btw, spidermonkey trunk has yeild (almost)

[12:53] <clkao> yield, even

[12:53] <audreyt> oooh

[12:53] <clkao> generator

[12:53] <audreyt> yup

[12:54] *** KingDiamond joined
[12:54] <clkao> https://bugzilla.mozilla.org/show_bug.cgi?id=326466

[12:54] <clkao> not totally committed yet, but i think soon

[12:56] <audreyt> excellent

[12:57] <cognominal> clkao: e4x has already a nice foreach iterator

[12:58] <clkao> *nod*

[13:06] <cognominal> audreyt: have you read http://research.microsoft.com/~emeijer/Papers/LINQSigmod.pdf   http://research.microsoft.com/~emeijer/Papers/XS.pdf

[13:08] <cognominal> Too bad this Meijer guy works for the evil empire :)

[13:09] * audreyt looks at the PDFs

[13:10] <cognominal> I am interested in it because of my xml related stuff in bili

[13:10] <audreyt> I've read the Sigmod one

[13:11] <audreyt> the XS one I've skimmed

[13:11] <Juerd> audreyt: Be careful! Reading a Microsoft publication, and using the knowledge gained from it in open source software may be illegal ;)

[13:14] <audreyt> too bad, I've read most of SPJ's papers ;)

[13:14] <cognominal> SPK and Meijer papers are so good.

[13:15] <xinming> No matter what other used... /me is just looking forward perl 6. :-P

[13:17] *** FurnaceBoy joined
[13:20] <svnbot6> r10127 | audreyt++ | * workaround the "fixity ambig" problem:

[13:20] <svnbot6> r10127 | audreyt++ |     @array.prefix:{'~'};        # method call "prefix:<~>"

[13:20] <svnbot6> r10127 | audreyt++ |     @array.map:{'~'};           # method call "map"

[13:21] <svnbot6> r10127 | audreyt++ |   by hard coding the list of acceptable category names.

[13:21] <svnbot6> r10127 | audreyt++ |   May need a ruling from @Larry to resolve this.

[13:21] <theorbtwo> I suspect the rulling will be something along the lines of "nicely done".

[13:22] <theorbtwo> Is it supposed to be possible to add new gramatical catagories?

[13:23] <audreyt> I have... no idea.

[13:31] <nothingmuch> .prefix:{'~'} etc have always bothered me

[13:31] <nothingmuch> they're consistent with the declaration

[13:31] <nothingmuch> but i've always had this urge to escape them

[13:32] <nothingmuch> i mean, in my head i parsed it as .prefix getting a subref

[13:32] <nothingmuch> even though .prefix is a category i'm used to

[13:35] <Juerd> I personally think we're better off with simple namespaces rather than categories, but I haven't really thought that through.

[13:35] <Juerd> e.g. prefix::('~')

[13:36] <Juerd> postcircumfix::(<{ }>)

[13:36] <Juerd> Though perhaps the <> can make the () optional, and perhaps we can use {} instead of (). I don't know.

[13:37] <Juerd> I think that with ::, it looks less magical, and more natural.

[13:37] *** aufrank joined
[13:37] <Juerd> No ambiguity in $foo.prefix:: either

[13:37] <Juerd> (afaict)

[13:37] * Juerd doesn't like all the inventions of new syntax, where existing syntax can be used

[13:40] <aufrank> Juerd: sorry to jump in late-- what's the proposed new syntax?

[13:40] <Juerd> aufrank: It's not new.

[13:41] <Juerd> My wording was misleading.

[13:41] <Juerd> Or, eh, wrong.

[13:41] <Juerd> (To avoid more misleading)

[13:41] <aufrank> heh

[13:41] <aufrank> ok, well what are you bother by NOW? (some people, jeez)

[13:42] <Juerd> hm?

[13:42] <Juerd> I'm not really bothered by the current situation.

[13:43] * Juerd normally doesn't mention most of what he thinks, until he's sure it makes sense.

[13:43] <Juerd> But in this case, maybe it could resolve this ambiguity

[13:43] <aufrank> I was teasing, I just want to know what alternative to $foo.prefix:: is being discussed

[13:43] <Juerd> That *is* the alternative :)

[13:44] <Juerd> Currently, grammatical categories are written with a single colon.

[13:45] <aufrank> these are the things that are often called adverbs?

[13:46] <theorbtwo> No.

[13:46] <theorbtwo> When you write +$foo, you're really calling a method on $foo.

[13:46] <theorbtwo> That method is currently known as prefix:{'+'}.

[13:47] <aufrank> ok

[13:47] <theorbtwo> You can also use normal method call syntax, $foo.prefix:{'+'}.

[13:47] <theorbtwo> But that could mean that you want to call $foo.prefix with an argument of {'+'}

[13:49] <aufrank> is a bair closure following a single colon really an argument?  I thought it would have to be wrapped as a capture

[13:50] <Juerd> Okay, if I'm saying things that I have thought about, but of which I'm not sure they make sense, anyway, let's add this related one:

[13:50] *** Limbic_Region joined
[13:50] <Juerd> I think \w+: should be a subcall, where : is an ultimate left paren, that ends at the end of the expression.

[13:50] <Juerd> say:+3  # unambiguously say(+3), not (say)+3

[13:51] <theorbtwo> I'm not real clear on the current semantics of indirect-object colon.

[13:51] <audreyt> see S03, Invocant marker.

[13:51] <Juerd> Doesn't have to clash, as that requires two terms on the LHS

[13:51] <Juerd> iirc

[13:52] <audreyt> but indeed, according to S03,

[13:52] <audreyt> @array.map: {4}

[13:52] <audreyt> is preferred

[13:52] <audreyt> or

[13:52] <audreyt> @array.map({4})

[13:52] <audreyt> but it's not sure whether .map:{4} is always a syntactic category

[13:52] <audreyt> or can be somehow disambiguated

[13:55] <Juerd> I don't want whitespace there :(

[13:55] <audreyt> the thing with @array.infix::<ff> is that it looks like @array.infix::ff

[13:55] <audreyt> no, neither do I

[13:55] <svnbot6> r10128 | audreyt++ | * Support for .[0], .{foo()}, .<bar> (implicit $_).

[13:55] <svnbot6> r10128 | audreyt++ | * Corrected several test's parsefails, mostly due to

[13:55] <svnbot6> r10128 | audreyt++ |   abusing the infinite-backtracking conditional parser.

[13:55] <Juerd> The colon is in the place of whitespace, because whitespace wouldn't work.

[13:55] <audreyt> right.

[13:56] <aufrank> we could have a long colon like the long dot

[13:56] <Juerd> That's what I don't like about the long dot either, for single line uses: there is a character that enables, but then also forces whitespace, whereas something that can replace whitespace feels better

[13:56] <Juerd> I wish I could think of something better, but I can't

[13:57] <audreyt> I think that nicely summarizes my feeling about long dot

[13:57] <audreyt> otoh, I think $.foo is an excellent replacement for ./foo, and am looking forward implementing it.

[13:58] <theorbtwo> r10128 corrected test parsefails that you decided were the tests being buggy?

[13:58] <Juerd> I think $.foo is nice too. It took a while for me to learn how to read it, because I was too used to the . twigil.

[13:59] <aufrank> Juerd: I don't feel strongly one way or the other about the long dot, but one point in its favor is that it allows people to format code in a way that they consider to be more readable

[13:59] <Juerd> Heh, isn't it weird to be "used to" language constructs in a language that according to many people doesn't exist yet? ;)

[13:59] <aufrank> and if you just replace whitespace you don't get that, do you?

[13:59] <Juerd> aufrank: Of course you DO get that.

[13:59] *** KingDillyDilly joined
[13:59] <Juerd> Suppose long dot was just .. (ignoring ranges)

[13:59] <aufrank> I guess I don't understand what you mean by replacing whitespace, then

[14:00] <Juerd> $xyzzy.bar();

[14:00] <Juerd> $fooz..bar();

[14:00] <Juerd> $foo. .bar();

[14:00] <Juerd> Still lining up.

[14:00] <Juerd> And IMHO, in a nicer way.

[14:00] <Juerd> Because long dot now sucks:

[14:00] <Juerd> $xyzzy.bar();

[14:01] <Juerd> $fooz. .bar():  # not lining up, so you have to change the PREVIOUS line to use the long dot TOO!

[14:01] <Juerd> resulting in:

[14:01] <Juerd> $xyzzy. .bar();

[14:01] <Juerd> $fooz.  .bar();

[14:01] <Juerd> Which isn't as nice as my first block of examples.

[14:01] <aufrank> now I see

[14:01] <aufrank> thanks

[14:01] <Juerd> But alas, .. is very important.

[14:01] <theorbtwo> Hm, how about we make : after a method call be a left paren that will end at ; (without eating the ;)?  (Almost Juerd's idea, with a slight reformulation.)

[14:01] <TimToady> it's already that, to2

[14:02] <Juerd> theorbtwo: I was suggesting it for subcalls. It already exists for method calls :)

[14:02] <theorbtwo> Ah.

[14:02] <TimToady> a grammatical category installs two longest tokens, one ending with < and one ending with {

[14:02] <Juerd> It's exactly what the $foo.map:{} construct abuses - there's no special :{} postfix afaik

[14:03] <theorbtwo> Can we just require space after super-left-paren :?

[14:03] <TimToady> fixing long dot would involve changing the first character to something other than dot.

[14:03] <audreyt> TimToady: ok, so @foo.map:{...} works

[14:03] <audreyt> because there no such longest "map:{" token

[14:03] <TimToady> right

[14:03] <audreyt> (and there is a third token, ending with french <<)

[14:04] <TimToady> right.

[14:04] <audreyt> @moose.elk:{foo}.antler:{bar}

[14:04] <audreyt> does this work?

[14:04] <audreyt> "work" as in parsing a

[14:04] <audreyt> as

[14:04] <audreyt> @moose.elk({foo}).antler({bar})

[14:04] <audreyt> instead of

[14:04] <audreyt> @moose.elk({foo}.antler({bar}))

[14:05] *** hcarty joined
[14:05] *** hcarty left
[14:06] <TimToady> tokens would be elk :{foo} .antler :{bar} so I believe so.

[14:06] <TimToady> (using token to include supertokens)

[14:07] <Juerd> Shoes are polished again.

[14:07] <Juerd> 16:05 < TimToady> fixing long dot would involve changing the first character to something other than dot.

[14:07] <Juerd> Or changing the range operator ;)

[14:07] <TimToady> I think I know which is more important...

[14:07] <Juerd> We could have infix ... now that there's no postfix ... anymore ;)

[14:07] <theorbtwo> I think so too.

[14:08] <Juerd> TimToady: I think be agree too :)

[14:08] <TimToady> and it isn't lining up long dots

[14:08] <Juerd> TimToady: See? We agree.

[14:08] <TimToady> unfortunately there aren't any convenient ASCII characters left for changing the opening of the long dot.

[14:08] <Juerd> I used to maintain a table of taken characters in op and term positions

[14:09] <Juerd> But then ran out of tuits

[14:09] <aufrank> $foo,.bar

[14:09] <theorbtwo> It'd be nice to make middle-dot an any-length dot, but I'm afraid it isn't latin-1, and I can't presently type it anyway.

[14:09] <Juerd> aufrank: foo($foo,.bar)

[14:09] <aufrank> $fo, .bah

[14:09] <aufrank> yeah

[14:09] <Juerd> aufrank: So won't work.

[14:09] <TimToady> well, I have to run off for most of the day.

[14:09] <theorbtwo> Have a nice weekend.

[14:09] <Juerd> TimToady: Are you still strongly against using $ and @ infix?

[14:09] <aufrank> have a good one TT

[14:10] <TimToady> As an option, though, a Latin-1 would work along with ". ".

[14:10] <Juerd> (not necessarily related to long dot)

[14:10] *** alinbsp left
[14:10] <TimToady> something like ¬

[14:11] <TimToady> ta &

[14:11] <theorbtwo> Oh, ·

[14:11] <theorbtwo> That is latin-1.

[14:11] <TimToady> something that wouldn't be wanted for infix!!!!

[14:11] <TimToady> really &

[14:12] <KingDillyDilly> audreyt: (continued from 2006-04-27 discussion of PAR), I'm still thinking about http://search.cpan.org/~smueller/PAR/script/pp even though I don't need to use it. The synopsis seems to be all I need even if I don't understand the examples, so I felt dumb for a minute, but another problem I would have had is figuring out how to install PAR so the examples would work. There's no "use" so it doesn't seem like a module. If it 

[14:12] <Juerd> BACKTICK!

[14:13] <audreyt> KingDillyDilly: CPAN modules often come with scripts

[14:13] <Juerd> $xyzzy.bar()

[14:13] <audreyt> like lwo-download

[14:13] <Juerd> $fooz`.bar()

[14:13] <audreyt> lwp-download

[14:13] <Juerd> $foo` .bar()

[14:13] <audreyt> KingDillyDilly: so, install PAR like a normal CPAN module, will get "pp" running on your system

[14:13] <audreyt> I guess I can make it clearer in the docs.

[14:14] <audreyt> Juerd: aw.

[14:14] <Juerd> audreyt: Which aw is that? :)

[14:14] <cognominal> KingDillyDilly: you questions belong to anotherr channel

[14:14] <theorbtwo> ¨ might work, but I suspect is often hard to type || display (that's dead diaresis as a character on it's own).

[14:14] <audreyt> Juerd: I'd rather type a full-width dot ;)

[14:15] <Juerd> audreyt: is ` so awkwardly placed on your keyboard, or do you hate the glyph?

[14:15] <aufrank> Juerd: not bad

[14:15] <KingDillyDilly> audreyt: I have fifty gazillion ideas for improved usability that go beyond what anyone does. Just raising the point because we were discussing it.

[14:15] <aufrank> it reads pretty nicely to me

[14:15] <audreyt> KingDillyDilly: right. you want a commit bit to PAR?

[14:16] <KingDillyDilly> No, that's ok. I think there would be a conflict of interest with my O'Reilly boycott and stuff.

[14:16] <audreyt> (so you can go in and fix the docs, etc.)

[14:16] <audreyt> I have no idea what PAR has to do with O'Reilly, but sure.

[14:16] <audreyt> Juerd: I think the multiline

[14:16] <cognominal> O'Reilly boycott?  do you know that this guy has done a lot for Perl

[14:16] <audreyt> $moose`

[14:17] <audreyt>   .blah(3)`

[14:17] <Juerd> audreyt: For multiline, I still want ..., actually.

[14:17] <audreyt>  .bleh(4)

[14:17] <audreyt> etc

[14:17] <audreyt> oh ok. so two forms.

[14:17] <Juerd> I keep forgetting that that no longer exists.

[14:17] <Juerd> I think ".", like "`" is too small to be trailing.

[14:17] <Juerd> $foo.

[14:17] <Juerd> .bar

[14:17] <cognominal> KingDillyDilly:  you should probably be consistent and boycott Perl too

[14:17] <Juerd> $foo`

[14:17] <Juerd> .bar

[14:17] <Juerd> Little difference, to me

[14:17] <KingDillyDilly> cognominal: That belongs on another channel

[14:17] <Juerd> (probably depends on font a lot)

[14:17] <Juerd> Whereas

[14:17] <Juerd> $foo...

[14:17] <Juerd> .bar is clearer

[14:17] <audreyt> Juerd: at least to my eyes the ".\n" suggests continuation

[14:17] <Juerd> To me.

[14:17] <audreyt> (but I agree with ...)

[14:17] <Juerd> audreyt: Well, to my eyes, ".\n" suggests "full stop" :)

[14:17] <audreyt> (and yes, it's highly font dependent.)

[14:18] <audreyt> oy :)

[14:18] <Juerd> audreyt: Which is why I initially didn't like the change from -> (motion, action) to . (full stop)

[14:18] <audreyt> I wonder if "$foo. blah" can be made to mean "$foo.blah"

[14:18] <audreyt> one-char lookahead

[14:18] <audreyt> (ok, that idea is even worse.)

[14:19] <Juerd> audreyt: How do you feel about having both `<ws>?\. and \.\.\.<ws>\.   ?

[14:19] <Juerd> Where every sane style guide would prescribe `. for single line, ... . for multiline

[14:21] * audreyt notes that ".:meth" is unclaimed

[14:22] <audreyt> I'm fine with "$obj.:meth" meaning same as "$obj.meth"

[14:22] <audreyt> that even plays well with the other (dubiously useful) regex-inspired

[14:22] <audreyt> "$obj.+meth" "$obj.?meth" "$obj.*meth"

[14:23] <Juerd> Hmmm

[14:23] <KingDillyDilly> audreyt: "full/path/to/file" can be used instead of just the file name in PAR, right?

[14:23] <audreyt> KingDillyDilly: yes.

[14:23] <Juerd> audreyt: I'm incredibly unsure about the glyphs, but technically, I like it.

[14:23] <KingDillyDilly> ok

[14:23] <Juerd> The dozen sided application of : is dangerous

[14:24] <Juerd> $foo.:foo

[14:24] *** justatheory joined
[14:24] <Juerd> $foo:.foo

[14:24] <Juerd> Mean very different things

[14:24] <audreyt> then, either "$obj.   :moose" can be the long dot

[14:24] <Juerd> However, in BOTH, ":" reads "commit".

[14:24] <Juerd> Hmmm

[14:24] <audreyt> or we retain long dot syntax.

[14:24] <audreyt> yes, in both, ':' reads 'commit', which is why I think it actually works.

[14:24] <Juerd> Hmmmm

[14:24] <Juerd> You rock, audreyt

[14:25] <theorbtwo> I don't think it's obvious to people who don't write perl parsers that .: reads commit.

[14:25] <Juerd> I'm no longer unsure about the glyph :)

[14:25] * audreyt curtsies. :)

[14:25] <Juerd> theorbtwo: Perl people write Perl regexes, period.

[14:25] <audreyt> '.' reads "call"

[14:25] <audreyt> ':' reads "commit"

[14:25] <Juerd> theorbtwo: People not used to Perl can't read the language ANYWAY.

[14:26] <Juerd> Perl is a different language than all those other languages. There's no way to have it syntactically compatible...

[14:26] <theorbtwo> So . reads call (or die), and .: reads call or die.

[14:26] <Juerd> Just like Haskell is very different from both C-like languages, and Perl 6

[14:26] <Juerd> "." reads die?

[14:27] <theorbtwo> No, it reads call, and the "or die if the method doesn't exist" is implicit.

[14:27] <theorbtwo> Unlike .?, where it's explicit that you don't die if the method doesn't exit.

[14:27] <theorbtwo> exist.

[14:27] <Juerd> That's very far fetched.

[14:27] <theorbtwo> Then what the heck did you mean by "commit"?

[14:27] <Juerd> Do you not know what ":" means in a regex?

[14:28] <audreyt> I think you two are in vehement agreement :)

[14:28] <audreyt> theorbtwo: yes, it's just like

[14:28] <audreyt> m/.:/

[14:28] <audreyt> and

[14:28] <audreyt> m/./

[14:28] <theorbtwo> It means that if you try to backtrack from the right of the colon to the left of the colon, you die.

[14:28] <audreyt> means the same thing.

[14:28] <Juerd> I think theorbtwo doesn't understand how to read commit, and likes parens too much ;)

[14:28] <Juerd> theorbtwo: No, it doesn't involve dieing

[14:28] <audreyt> I think theorbtwo is parsing things just fine :)

[14:29] <audreyt> if a method is not found in $foo, the runtime dies.

[14:29] <audreyt> but $foo.?method prevents the dying

[14:29] <Juerd> theorbtwo: It just means the entire thing left of it is commited, can't change meaning anymore. Focus on the future, not the past.

[14:29] <audreyt> and $foo.:method makes explicit that if you can't find the method, please die

[14:29] <audreyt> which isn't different from $foo.method

[14:29] <Juerd> theorbtwo: I don't read "." as die. ":" could read as die, but "." not...

[14:29] <theorbtwo> Yes.  I was reading . as call, and : as die.

[14:29] <audreyt> what Juerd describes is "commit" at the parsing level

[14:29] <audreyt> which ':' happily puns as well there.

[14:29] <Juerd> Maybe "." is the short form of ".:", and ".:" is the real method call op ;)

[14:30] <audreyt> heh.

[14:30] <audreyt> so, I just implemented this

[14:30] <theorbtwo> I'm happy with that, but I'd still prefer .perl shorten it.

[14:30] <theorbtwo> ;)

[14:30] <Juerd> Let's try:

[14:30] <Juerd> $xyzzy.foo()

[14:31] <Juerd> $fooz.:foo()

[14:31] <Juerd> $foo. :foo()

[14:31] <Juerd> wfm

[14:31] <theorbtwo> WFM too.

[14:31] <Juerd> Though there will be people who prefer adding : to the xyzzy too

[14:31] <Juerd> $xyzzy.:foo()

[14:31] <Juerd> $fooz. :foo()

[14:31] <Juerd> $foo.   :foo()

[14:31] <Juerd> fuck

[14:31] <Juerd> $xyzzy.:foo()

[14:31] <Juerd> $foo.   :foo()

[14:31] <Juerd> argh!

[14:32] <Juerd> irssi, stop being helpful please

[14:32] <Juerd> Once more

[14:32] <Juerd> $xyzzy.:foo()

[14:32] <Juerd> $fooz. :foo()

[14:32] <Juerd> $foo.  :foo()

[14:32] <Juerd> There :)

[14:32] <theorbtwo> Can you put space in .?, .+, and .* as well?

[14:32] <Juerd> At least it doesn't involve adding whitespace to the $xzzy call.

[14:32] <Juerd> theorbtwo: I'd think so.

[14:32] <Juerd> Can't think of ambiguities

[14:33] <Juerd> Though that'd create a pair of opposites: ? versus :

[14:33] <Juerd> Where in another part of the language, that pair is ? versus !

[14:33] *** Aankhen`` joined
[14:33] <Juerd> OTOH, there it is postfix.

[14:34] <theorbtwo> ? boolify vs ! not, you mean?

[14:34] <Juerd> Oh, that too, and that is prefix. Hm

[14:34] <Juerd> theorbtwo: I meant ($foo!, $bar?)

[14:34] <Juerd> But indeed, that again stems from ? and !

[14:34] <Juerd> $xyzzy.foo()

[14:34] <Juerd> $fooz.!foo()

[14:34] <Juerd> $foo.  !foo()

[14:35] <Juerd> why?

[14:35] <Juerd> why!

[14:35] <Juerd> $xyzzy.foo()

[14:35] <Juerd> $fooz.!foo()

[14:35] <Juerd> $foo. !foo()

[14:35] <audreyt> too ambiguous.

[14:35] <Juerd> There is no postfix ! in regexes though.

[14:35] <audreyt> $foo!foo is private method call.

[14:35] <theorbtwo> That must have gotten added when I wasn't paying attention...  What is ($foo!, $bar?)

[14:35] <Juerd> audreyt: We still have that? Darn :)

[14:35] <audreyt> theorbtwo: "is required" and "is optional"

[14:35] <Juerd> theorbtwo: The replacement for ($foo, ?$bar)

[14:36] <Juerd> theorbtwo: positionals default to required, named default to optional.

[14:36] <aufrank> audreyt: is that only in Sigs?

[14:36] <theorbtwo> Oh, in a signature.

[14:36] <audreyt> aufrank: yes.

[14:36] <Juerd> But you can use ? and ! for both if you want.

[14:36] <aufrank> if $foo.:bar is regex inspired, do $foo.+bar or $foo.*bar mean anything?

[14:37] <Juerd> aufrank: They already mean something.

[14:37] <Juerd> aufrank: Not that they're incredibly useful, though

[14:37] * aufrank needs to do another full read through of the syns, apparently

[14:37] <Juerd> Larry thinks they may sprout new idioms

[14:41] <theorbtwo> .: means "run exactly one", .? means "run if it exists", .* means "run as many as exist", and .+ means "run as many as exist, but at least one".

[14:41] <KingDillyDilly> audreyt: Just to complete my thoughts on this...it's not all that clear that the examples (PAR) must work at the command prompt and won't work in a script without exec or something. I don't think Windows users have a "%" prompt at the command line, and even if they did, personally, I'd make the docs idiot proof. Not a request...just a comment about docs in general.

[14:42] <theorbtwo> Do the multiple-running ones have well-defined order and return value?

[14:42] <Juerd> I can see a use for .* and .+ for plugins, perhaps

[14:42] <audreyt> KingDillyDilly: if you'd give me your email, I'll send you a commit bit, and you can go in and fix the docs.

[14:43] <svnbot6> r10129 | audreyt++ | * Implement parsing of "extended long dot":

[14:43] <svnbot6> r10129 | audreyt++ |     $foo.   +method; # same as $foo.+method

[14:43] <audreyt> KingDillyDilly: otherwise, patches welcome on [email@hidden.address]
[14:43] <svnbot6> r10129 | audreyt++ |     $foo.   *method; # same as $foo.*method

[14:43] <svnbot6> r10129 | audreyt++ |     $foo.   ?method; # same as $foo.?method

[14:43] <svnbot6> r10129 | audreyt++ |     $foo.   :method; # same as $foo.:method -- same as $foo.method

[14:43] <svnbot6> r10129 | audreyt++ |   (currently the above three is not specially handled yet)

[14:43] <svnbot6> r10129 | audreyt++ | * The old ".   ." form is still kept before a ruling is made;

[14:43] <svnbot6> r10129 | audreyt++ |   this is just for experimenting with the "feeling" of the syntax.

[14:43] <Juerd> $foo does PluginA does PluginB does PluginC;

[14:43] <Juerd> $foo.*hook_bar()

[14:44] <audreyt> Juerd: so, can I ask your help in writing a p6l post? :)

[14:44] <Juerd> I think you just did :)

[14:44] <audreyt> I meta-asked :)

[14:44] <Juerd> Cool

[14:45] <Juerd> my @m_EN = qw(January .. December);

[14:45] <Juerd> hmm

[14:45] <Juerd> (not mine)

[14:46] <audreyt> Juerd++ # p6l post

[14:46] <theorbtwo> It would seem that $a..$b should call $a+1 until it gets $b out of it.

[14:46] <audreyt> (in advance)

[14:46] <Juerd> audreyt: That's unfair, now you force me to help you :D

[14:46] <audreyt> if you rollback, I can always -- it back :)

[14:47] <audreyt> so it's a "let"

[14:47] <Juerd> theorbtwo: Hopefully not, as that would mean an infinite loop for 3..4.5

[14:47] <Juerd> audreyt: But I used a committing colon in the smiley

[14:47] <Juerd> audreyt: How can I help you?

[14:47] <theorbtwo> Well, unless there already is an infix .. defined on Num and Num, which I should hope there would be.

[14:48] <theorbtwo> Or just change that to "until it gets a >= $b"

[14:48] <Juerd> theorbtwo: That ignores .. for strings

[14:49] <Juerd> theorbtwo: And .. for other nice things that can range, like date objects

[14:49] <theorbtwo> They can define their own infix:<..>

[14:50] <audreyt> Juerd: write to p6l and explain the ".." conflict, and propose ".:" as a solution, and ". :" as an extension, and ". +" as an generalization, and coexistence/removal of ". ." as a consideration

[14:50] <theorbtwo> brb

[14:50] <Juerd> audreyt: Will do; mind if I quote your line? :)

[14:50] <audreyt> please do :)

[14:51] * audreyt feels multisyllabic

[14:52] <audreyt> miyagawa: [OT] I'll go ahead and release JSON::Syck, with alexmv's patch that fixes SingleQuote with trailing spaces.

[14:56] *** haggai_e joined
[14:58] *** turrepurre joined
[15:02] <nothingmuch> audreyt: stevan said you wanted to talk about moose stuff?

[15:09] <audreyt> nothingmuch: sorry, a sec

[15:10] *** manbou joined
[15:15] <Juerd> audreyt: Sent

[15:16] <Juerd> audreyt: What's wrong with short words? I like short words. Why would you want more parts in a word? :)

[15:16] <Juerd> ("parts" means "syllables". Too bad it has no single-syllable synonym ;))

[15:17] * KingDillyDilly wishes "atoms" were called "parts"

[15:18] <KingDillyDilly> in Perlspeak

[15:18] <audreyt> in S02? it's followed by "Molecules"

[15:18] <audreyt> (granted, maybe a bit too cute.)

[15:19] * KingDillyDilly forever tries to simplify things

[15:19] <cognominal> yea, right, so we can speak of private parts...

[15:19] <nothingmuch> i prefer atoms etc

[15:19] <nothingmuch> it implies that it doesn't get smaller

[15:19] <audreyt> I do feel "Molecules" in S02 is a bit inaccessible :)

[15:19] <Juerd> KingDillyDilly: Making things simpler is good.

[15:19] <merlyn> quarks? :)

[15:20] <nothingmuch> in that these are the truely core, lowest level abstractions for Perl 6

[15:20] <Juerd> (simplifying => making simpler)

[15:20] <cognominal> atom, molecule mark a cleart progression. part does not mean anything.

[15:20] <KingDillyDilly> Yeah. I just get antsy when I hear yet another new term

[15:20] <nothingmuch> Mollecules, otoh, is a bit of a pun

[15:20] <Juerd> Esperanto has -er- for parts

[15:20] <audreyt> "Lexical Conventions" and "Whitespace and Comments"

[15:20] *** haggai_e left
[15:20] <audreyt> is perhaps better headings for the respective S02 secions

[15:21] *** mako132_ joined
[15:21] <Juerd> pano => bread

[15:21] <audreyt> (the first two)

[15:21] <Juerd> panero => bread crumb

[15:21] <nothingmuch> i thought they implied more, but that's perhaps just my memory inventing meta-meaning for Atoms, Mollecules =)

[15:21] <audreyt> nothingmuch: it does that to us, but in S02's case, they didn't discuss more :)

[15:21] <nothingmuch> in which case perhaps they were counter productive

[15:21] <Juerd> It doesn't do molekulo, molekulero, though. It has atomo :)

[15:22] <nothingmuch> and should be "lexical conventions" and "whitespace and comments" =)

[15:22] <nothingmuch> audreyt++

[15:22] <nothingmuch> KingDillyDilly++

[15:23] *** simonp joined
[15:23] * audreyt commits to S02 and credits "Wassercrats"

[15:24] * KingDillyDilly Looks foward to bragging...if only he knew what S02 was

[15:24] <audreyt> lol :)

[15:25] <audreyt> it's http://dev.perl.org/perl6/doc/design/syn/S02.html

[15:28] <audreyt> merlyn: amen to "environmental"

[15:29] <audreyt> maybe "env variables" or even "enveloped variables" is better

[15:30] <KingDillyDilly> I'm still not sure what I did, but don't tell me. It's funnier this way.

[15:30] <audreyt> fun is good :)

[15:32] *** weinig|sleep is now known as weinig|away

[15:33] <audreyt> Juerd++ # nice post

[15:33] <audreyt> though I was confused for a bit about the POD part

[15:33] <theorbtwo> Indeed.

[15:33] <audreyt> until I figured out you were talking about

[15:33] <audreyt> $foo.#(

[15:33] <audreyt> =head1 NAME

[15:33] <audreyt> ...

[15:33] <audreyt> ):method(...);

[15:34] <audreyt> which is, well, er, okay.

[15:34] <Juerd> audreyt: It's not something people should ever do :)

[15:35] <theorbtwo> Hm, I wonder if #(...) is going to get confusing when I want to start a comment with a parenthetical phrase.  Probably not, since I generally write #<ws> anyway, and rarely start things with parentheticals.

[15:35] <audreyt> theorbtwo: and column-1 # is special

[15:35] * Juerd knows lots of people who write # without whitespace

[15:35] <Juerd> They will hate this.

[15:35] <theorbtwo> Oh, I forgot that, audreyt.  That's good.

[15:35] <Juerd> I write "  # ", normally

[15:35] <Juerd> Where in block formatted code, I try to first space as far as the block goes

[15:35] <audreyt> yeah. I wonder if line-started-with-whitespace-then-comment

[15:36] <audreyt> is similarly special.

[15:36] <Juerd> aoeuaoeu;

[15:36] <audreyt> that will allow

[15:36] <audreyt> if moose.elk {

[15:36] <Juerd> aoeuao;    # aoeu

[15:36] <audreyt>     #line 15

[15:36] <audreyt>     blah

[15:36] <audreyt> }

[15:36] <audreyt> which reads maybe better. not sure.

[15:36] <Juerd> audreyt: I'd like a character that introduces special things

[15:36] <Juerd> Instead of a word

[15:37] <Juerd> So that people can always write #\w without any risk

[15:37] <audreyt> you mean like

[15:37] <audreyt> =!line 15

[15:37] <audreyt> etc

[15:37] <Juerd> #!line would be fine too

[15:37] <audreyt> ok... that plays well with #!/usr/local/bin/perl

[15:37] <Juerd> It could even generalize the shebang ;)

[15:37] <audreyt> syck minds, etc.

[15:37] <audreyt> I mean, sick minds.

[15:38] <Juerd> I'm not very syck minded because I don't like yaml much.

[15:38] *** simonp is now known as simonp_

[15:38] <Juerd> (I like it a lot, just not the whitespace sensitivity that has caused me trouble)

[15:38] <audreyt> you must be sjck minded then

[15:38] <audreyt> the json subset of yaml does not have whitespace problems

[15:38] <Juerd> No language should ever treat whitespace following or preceding \n specially.

[15:39] <audreyt> POD does.

[15:39] <audreyt> as does many wikis.

[15:39] <Juerd> I don't like that either, in theory.

[15:39] <audreyt> oh. well. :)

[15:39] <Juerd> I would like to indent my paragraphs, under =heads

[15:39] <Juerd> =head1 foo

[15:39] <Juerd>  

[15:39] <Juerd>     Some text here, that isn't code.

[15:39] <Juerd>  

[15:40] <Juerd> =cut

[15:40] <audreyt> I see your point.

[15:40] <audreyt> it's signed and floating. :)

[15:40] <Juerd> I'm used to indent code so much now, I would probably need help to get off it.

[15:40] * Juerd even indents things that aren't flowed paragraphs in e-mail.

[15:41] <Juerd> Someone asked my why I always indent postal addresses in mail :)

[15:41] <audreyt> heh :)

[15:41] *** simonp_ left
[15:41] <Juerd> And was amazed at the answer

[15:42] <Juerd> "Unauthorized copying, reproduction, hiring, lending, public performance and broadcasting prohibited."

[15:43] <Juerd> What artist would ever want this be done to their work?

[15:43] * audreyt goes adding Pugs-Hs items under Google-SoC ideas page

[15:43] <Juerd> Hs?

[15:43] <audreyt> <- probably getting mentorship in both TPF and Hs.org

[15:43] <audreyt> Haskell

[15:44] <audreyt> Pugs-P5 (and -P6) items would be more applicable to the TPF side, I think

[15:45] <Juerd> Are people who go implement Perl 6 using Haskell bi-mentored? ;)

[15:46] <audreyt> maybe ;)

[15:55] * aufrank is gonna try :)

[16:00] <aufrank> Juerd++ # good post!

[16:02] <clkao> what are long dots anyway? what's the different between that and normal $foo.bar()?

[16:04] <theorbtwo> clkao: A long dot takes up more space.

[16:05] <audreyt> clkao: in perl5 you can write

[16:05] <clkao> why do we need them? do we hate ourselves?

[16:05] <audreyt> $x               {foo}

[16:05] <audreyt> $obj->     method

[16:05] <audreyt> $obj           ->method

[16:05] <clkao> aaah

[16:05] <audreyt> it's for alignment

[16:05] <audreyt> and multilines

[16:05] <audreyt> $obj->foo(..............)

[16:05] <audreyt>    ->bar(...)

[16:05] <audreyt> etc

[16:06] <theorbtwo> Does everybody get a bunch of "Testing with sbc30k" messages when they post to p6l, or is it just me?

[16:07] <theorbtwo> Oh, blast.  Juerd just reported that to the list.

[16:10] <KingDillyDilly> Didn't I hear that "long quotes" are something entirely different? Confusing.

[16:11] <Juerd> Perl 5 even allowns $object -> method, which because of the "visual weight" of -> is used by several people I know.

[16:11] <Juerd> KingDillyDilly: There are no long quotes.

[16:11] <audreyt> KingDillyDilly: I don't think there is a "long quotes", unless you mean << ... >>

[16:12] <KingDillyDilly> I thought I heard they were a foriegn language thing.

[16:12] <audreyt> which is known as "Texas quotes"

[16:12] <audreyt> Juerd: I get that too

[16:12] <audreyt> the sbc thing

[16:15] <Juerd> I still think <> should also be considered Texan.

[16:15] <Juerd> As the quote forms aren't <>, but ‹›

[16:16] <Juerd> KingDillyDilly: Texan «» is <<>>, Texan ¥ is Y

[16:17] <Juerd> KingDillyDilly: It is because the people in Texas are unlikely to accept anything other than US-ASCII :)

[16:17] <Juerd> They're too consevative and afraid of foreign influence ;)

[16:17] * KingDillyDilly looks up what he's think of in the logs

[16:25] <KingDillyDilly> You don't have to wait for me, you know. Closest I found so far is "wide yen."

[16:25] *** mako132_ joined
[16:27] <KingDillyDilly> Ha...I was thinking of "full-width quotes" as mentioned http://colabti.de/irclogger/irclogger_log/perl6?date=2006-04-26,Wed

[16:34] <audreyt> ah ok :)

[16:34] <audreyt> "full width quotes" and "long dots" are probably distinct enough

[16:34] <KingDillyDilly> Yeah

[16:43] *** larsen joined
[16:44] * KingDillyDilly fixes bookshelf

[16:44] *** KingDillyDilly left
[16:45] *** xerox joined
[16:52] *** hexmode joined
[16:59] *** jsiracusa joined
[17:07] *** kanru joined
[17:10] *** kanru joined
[17:19] <xerox> Hi.

[17:19] <xerox> Is there anything like a `learn to play (pugs) Perl 6 in small steps today' document somewhere?

[17:22] <audreyt> hi.

[17:23] <audreyt> http://svn.openfoundry.org/pugs/docs/

[17:23] <audreyt> in particular, http://svn.openfoundry.org/pugs/docs/articles/tpr.pod

[17:24] <audreyt> also, http://svn.openfoundry.org/pugs/docs/Perl6/Overview/

[17:24] <audreyt> the spec is at http://dev.perl.org/perl6/doc/synopsis.html

[17:24] <audreyt> also see examples/ and t/ for sample p6 code.

[17:26] <audreyt> xerox: a commit bit is on your way.

[17:26] <audreyt> paolo at nemail it?

[17:27] <xerox> That's my email yes

[17:27] <audreyt> cool. currently the only write-interface is "svn ci", sadly

[17:27] <xerox> I don't exactly know svn, but so noted.

[17:27] <audreyt> but if you see anything needs improvement, just change the files, and type "svn ci", and that'd be all.

[17:28] <xerox> Gotcha.

[17:28] <audreyt> currently we are having some cabal troubles as old cabal does not allow multiple hs-libraries-dir

[17:28] <clkao> audreyt: so where were we on data::bind?

[17:29] <audreyt> and as such you can see that src/Data/ByteString is symlinked

[17:29] <audreyt> I wonder how to cleanly solve this problem without requiring everyone upgrading to new cabal.

[17:29] <audreyt> clkao: I think we were at the point where hooking Perl6::Bindings and port it to use Filter::Simnple::Compiled

[17:29] <xerox> Hmmmm.

[17:29] <audreyt> or something like that, would make sense.

[17:30] <clkao> but it's using a hand crafted grammar parser.. can we reuse something under misc/Comon?

[17:30] <xerox> audreyt: thank you for the invitation.

[17:30] <audreyt> xerox: no prob :) if you feel like testing your svn client, add yourself to AUTHORS

[17:30] <audreyt> and "svn ci AUTHORS"

[17:30] <xerox> I am there hehe.

[17:30] * clkao went to get some beer and got ready for hacking

[17:30] <xerox> I did something *time* ago :-)

[17:31] <audreyt> indeed you are :)

[17:31] <audreyt> yes :)

[17:31] <audreyt> clkao: the closest is the P::RC grammar in Perl6::Subs

[17:32] <audreyt> we don't yet have signature grammar in p6 rules syntax

[17:32] <audreyt> writing that would be a Very Good First Step (tm)

[17:32] <clkao> ok, that requires me learning p6 rules

[17:32] <audreyt> it's yaks all the way down.

[17:32] <clkao> but that's a healthy yak

[17:32] <xerox> I really want to learn something new.  Apart from pen-spinning (yay I learnt a trick today!)

[17:33] <clkao> audreyt: is the rule spec in repo uptodate?

[17:33] <audreyt> clkao: see the tests in P::G::R

[17:33] <audreyt> and Pugs-Grammar-MiniPerl6/lib/Pugs/Grammar/MiniPerl6.grammar

[17:33] <audreyt> rule spec? docs/Perl6/Spec/Rules?

[17:33] <clkao> *nod*

[17:33] <audreyt> sure is, it's refetched every time you type "perl Makefile.PL" :)

[17:33] <audreyt> (as we didn't figure out single-file merges)

[17:33] <clkao> ya, i mean the source itself

[17:33] <audreyt> yes it is.

[17:34] <audreyt> you can also try it out using either P::C::Rules or Pugs itself (which bridges to PGE)

[17:34] <audreyt> (I verified it still works with today's turnk parrot)

[17:35] <audreyt> xerox: well, make sure that pugs builds in your environment is a good first step...

[17:36] <xerox> Right.

[17:36] <xerox> Makefile.PL doesn't seem to like ghc made in-place.

[17:36] <audreyt> nopaste the error? (assuming you have ENV GHC set)

[17:36] <audreyt> # nopaste = http://sial.org/pbot/perl6

[17:37] <xerox> It just can't find it.

[17:37] <audreyt>     export GHC=${HOME}/bin/ghc (bash)

[17:37] <audreyt>     setenv GHC ${HOME}/bin/ghc (csh)

[17:39] <pasteling> "xerox" at 151.37.170.44 pasted "Can't find GHC." (9 lines, 381B) at http://sial.org/pbot/16967

[17:41] <audreyt> hmm

[17:42] <clkao> audreyt: p::g::r? you mean p::c::r?

[17:42] <audreyt> clkao: yes

[17:43] <audreyt> xerox: what's output of ghc --version?

[17:43] <xerox> $ ghc --version

[17:43] <xerox> , version 6.5

[17:43] <audreyt> wow

[17:43] <xerox> haha

[17:43] <audreyt> that's a strange version string.

[17:43] <xerox> I'm using something very unstable.

[17:43] <audreyt> yeah, we parse version string

[17:43] <xerox> ghc-6.5 on i386-darwin-apple, i.e. Mac Intel.

[17:44] <audreyt> oooh. I want that

[17:44] <audreyt> anyway

[17:44] <xerox> (Very pre-alpha build.)

[17:44] <audreyt> type "svn up"

[17:44] <audreyt> and try again

[17:44] <audreyt> it'd be nice to know that MacIntelGHC can build Pugs.

[17:44] <xerox> Yeah.

[17:44] <svnbot6> r10130 | audreyt++ | * xerox reported a GHC 6.5 that doesn't know its own name.

[17:44] <svnbot6> r10130 | audreyt++ |   We cope.

[17:44] <xerox> hahaha.

[17:45] *** elmex joined
[17:45] <xerox> I'd better make install it, I think.

[17:45] <audreyt> dunno if it'd matter.

[17:45] <audreyt> but sure :)

[17:45] <audreyt> xerox: btw, I submitted Pugs embedding, datatypes, and debugger/profiler as tasks

[17:45] <pasteling> "xerox" at 151.37.170.44 pasted "Buildin'" (55 lines, 2.3K) at http://sial.org/pbot/16968

[17:45] <audreyt> the other 10 will need some thinking to refactor into month-sized chunks

[17:46] <xerox> audreyt: great!!

[17:46] <audreyt> "svn up" and try again.

[17:46] *** pmurias joined
[17:46] <pmurias> hi

[17:46] <audreyt> pmurias: hi

[17:46] <svnbot6> r10131 | audreyt++ | * not everyone has LWP::Simple...

[17:47] * xerox blesses audreyt 

[17:47] * audreyt becomes an boxed object

[17:47] <xerox> Gulp.

[17:47] <audreyt> # obscure perl-OO reference

[17:48] <xerox> perl Makefil.PL finally worked.

[17:48] <audreyt> yay.

[17:48] <audreyt> you are on mac intel

[17:48] <audreyt> ergo, you have a fast cpu

[17:48] <audreyt> so, "make" :)

[17:48] <xerox> Lets time make it.

[17:48] <audreyt> (instead of "make unoptimized")

[17:48] <xerox> Yeah.

[17:48] <xerox> I hope it will not file on -packages

[17:48] <audreyt> we rely on STM...

[17:49] <xerox> I probably need to pass -L/custom/ghc/

[17:49] <xerox> But it's a linker thingie, it will show at last.

[17:49] <audreyt> yup

[17:49] <audreyt> and we are using whatever cabal your 6.5 ships

[17:49] <xerox> The numbering of the compiled modules is something added by... ?

[17:49] <audreyt> GHC 6.5

[17:49] <xerox> Oooooh.

[17:49] <xerox> Haskell is great.

[17:49] <audreyt> good stuff :)

[17:50] <xerox> Data.FunctorM is deprected

[17:50] <xerox> *deprecated

[17:50] <xerox> Yay :-)

[17:50] <xerox> *bang* Duplicate instance declarations.

[17:50] <audreyt> ooh, that's new.

[17:50] <audreyt> nopaste again?

[17:50] <xerox> Sure.

[17:51] <audreyt> (it builds fine on 6.4.[12])

[17:51] <xerox> http://sial.org/pbot/16969

[17:51] <audreyt> aha

[17:51] <audreyt> GHC 6.5's tree is typeable now

[17:51] <audreyt> whilst 6.4's is not.

[17:52] <audreyt> this is line 1914 src/Pugs/AST/Internals.hs

[17:52] <xerox> You're pretty damn fast.

[17:52] <audreyt> can you add a ghc_version guard there?

[17:52] <audreyt> #if GHC_VERSION etc

[17:52] <xerox> Yep

[17:53] * audreyt waits for xerox's first commit :D

[17:54] <xerox> <= 6.5 is okay as 'etc' ?

[17:54] <audreyt> sure

[17:55] <audreyt> not sure how pervasive thetypeableness went

[17:55] <audreyt> try+error should reveal them

[17:55] <xerox> Hmmmm tried 'make' to make sure it fixed it

[17:55] <audreyt> cool

[17:55] <svnbot6> r10132 | pmurias++ | Inline-Parrot was copy'ed into Common a week+ ago

[17:55] <xerox> http://sial.org/pbot/16970

[17:56] * audreyt lol's on the line above

[17:56] <xerox> Strange outcome.

[17:56] <audreyt> </DrIFT> Do NOT delete! These instances are your friends! -}

[17:56] <xerox> Maybe I need a make clean before?

[17:56] <xerox> Ah no.

[17:57] <xerox> It's me now knowing about CPP.

[17:57] <xerox> s/now/not/

[17:57] <audreyt> and the test is on __GLASGOW_HASKELL__

[17:58] <audreyt> <= 605

[17:58] <xerox> Gotcha.

[17:58] <audreyt> I mean, <= 604

[18:00] <xerox> Works. /me ^Z the build to svn ci

[18:01] <audreyt> woot

[18:01] <audreyt> xerox++

[18:02] <audreyt> xerox: is it within your priv to add the "Pugs" topic on the SoC wiki?

[18:03] <xerox> Seems worked :-)

[18:03] <svnbot6> r10133 | Paolo++ | Since GHC 6.5 Tree is typeable, added preprocessor directive to check <= 604.

[18:03] <audreyt> yay

[18:03] <xerox> I've to ask Isaac, consider it done.

[18:03] <xerox> Yeah!

[18:03] <xerox> brb

[18:03] <audreyt> the fix didn't break 6.4.2

[18:03] <audreyt> xerox++

[18:05] <audreyt> it's 2am here, so I'll 1)journal and 2)sleep soon

[18:05] <audreyt> see you in ~10 hours :)

[18:05] <xerox> Yeah, see ya later!

[18:05] <xerox> Thanks much Audrey.

[18:05] <audreyt> ditto :)

[18:18] <xerox> Argh.

[18:19] <audreyt> mm?

[18:19] <pasteling> "xerox" at 151.37.170.44 pasted "Build error." (11 lines, 881B) at http://sial.org/pbot/16972

[18:21] <audreyt> svn up and try again

[18:21] <svnbot6> r10134 | audreyt++ | * fix prelude parsefial.

[18:21] <svnbot6> r10133 | Paolo++ | Since GHC 6.5 Tree is typeable, added preprocessor directive to check <= 604.

[18:21] *** Ymmv joined
[18:23] <xerox> I remember when you first started pugs, with TaPL...

[18:23] <xerox> Now it's such a mass of code :-)

[18:23] <audreyt> or a "mess of code" :)

[18:23] <audreyt> but yeah :)

[18:23] <xerox> Which successfully build on MacIntels :-)

[18:23] <audreyt> oooooh!

[18:23] <audreyt> run some sanity tests?

[18:23] <xerox> Sure.

[18:24] <xerox> make test?

[18:24] <audreyt> ./pugs t/01-sanity/01-tap.t

[18:24] <xerox> Oh.

[18:24] <audreyt> but yeah, a "make smoke upload-smoke"

[18:24] <audreyt> can be fun

[18:24] <pasteling> "xerox" at 151.37.170.44 pasted "Sanity cheques." (14 lines, 210B) at http://sial.org/pbot/16973

[18:24] <audreyt> yay, sane.

[18:24] <xerox> ^_^

[18:24] <audreyt> xerox++

[18:25] <xerox> Very pleased.

[18:25] <audreyt> so, where can I get this mysterious MacIntelGHC?

[18:25] <xerox> heh!

[18:25] <xerox> Wolfgang mailed an url, let me find it.

[18:25] <audreyt> I've been debating whether to just give in and buy a MacBookPro17".

[18:25] <xerox> I'd advice you to wait a second revision at least

[18:25] <audreyt> otoh, they are not exactly cheap.

[18:25] <xerox> Everybody is having problems with the first one

[18:25] <audreyt> yeah. so maybe wait for MacBookReal15"

[18:26] <FurnaceBoy> that would be G4 ;-)

[18:26] * FurnaceBoy ducks

[18:26] <audreyt> nah, it'd be a CureDoo

[18:26] <audreyt> or something like that

[18:26] <xerox> I hope I'll have something like a bunch of money to get some 12" lappie too.

[18:26] <FurnaceBoy> they already have a Duo out

[18:26] * FurnaceBoy loves his PB G4 17

[18:27] <xerox> I don't know if it's sane, but here it is: http://www.uni-graz.at/imawww/haskell/ghc-6.5.20060409-i386-apple-darwin.tar.bz2

[18:27] <audreyt> danke sehr.

[18:27] <xerox> Yay to big monitors.  iMac 20" here, heh.

[18:28] <FurnaceBoy> yes, the iMac 20" is nice

[18:28] <xerox> Do you have ghc?

[18:28] <FurnaceBoy> I only have PPC Macs. but on.

[18:28] <FurnaceBoy> +no

[18:28] <xerox> Oh, kay.

[18:30] <xerox> Prelude> primes !! 100000

[18:30] <xerox> 599997

[18:30] <xerox> (24.10 secs, 1690143048 bytes)

[18:31] <xerox> It's: let primes = 2 : 3 : [ n | n <- [5,7..], any ((==0) . (n `mod`)) (takeWhile (\p -> p*p <= n) primes)]

[18:34] <xerox> pugs> [1..10] >>+<< [1..10]

[18:34] <xerox> (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)

[18:34] * xerox remembers! :-)

[18:40] *** cognominal joined
[18:42] *** ruz joined
[18:46] <ruz> ?eval 1.say

[18:46] <evalbot_10082> OUTPUT[1 ] bool::true

[18:49] <ruz> fails on the 10127

[18:52] *** KingDiamond joined
[18:52] *** Khisanth joined
[18:54] *** multic joined
[18:54] *** multic left
[19:03] <xerox> Do statements have to be ended by some special character?

[19:03] <audreyt> ruz: fixed

[19:03] <audreyt> xerox: normally, semicolon.

[19:03] * audreyt remembers that she should be sleeping

[19:03] <xerox> Like 1.say?

[19:04] <audreyt> huh?

[19:04] <svnbot6> r10135 | audreyt++ | * Pugs.Parser: Fix "1.say".  ruz++ for reporting that

[19:04] <svnbot6> r10135 | audreyt++ |   numbers were considered as whitespace.

[19:04] <xerox> pugs> 1.say

[19:04] <audreyt> if you are in the pugs shell, and you see

[19:04] <xerox> ....>

[19:04] <audreyt> ...>

[19:04] <audreyt> then it means a parsefail

[19:04] <xerox> Ah.

[19:04] <audreyt> and you can type ^D

[19:04] <audreyt> ctrl-d

[19:05] <xerox> ....> pugs: <stdin>: hGetLine: end of file -- ^D makes it exit.

[19:05] <audreyt> wow. you didn't have readline

[19:05] <audreyt> in any case

[19:05] <obra> audreyt: weren't you going to bed hours ago?

[19:05] <audreyt> "svn up ; make"

[19:05] <audreyt> will fix it

[19:05] <xerox> Ah, okay.

[19:05] <audreyt> and "1.say" can work again.

[19:05] <audreyt> obra: yeah.

[19:05] <audreyt> good night :) &

[19:05] <obra> night

[19:05] <xerox> Night-o!

[19:07] <audreyt> but, but

[19:07] <audreyt> I fixed the ....>

[19:07] <audreyt> so it should now only do line-continuation when it can sensibly be completed

[19:07] <audreyt> otherwise it parsefails

[19:08] <audreyt> (the intention of ....> is so you can enter a multiline subroutine etc)

[19:09] <audreyt> sleep for real &

[19:10] <svnbot6> r10136 | audreyt++ | * Pugs.hs: In the interactive shell, only display the

[19:10] <svnbot6> r10136 | audreyt++ |   line-continuing "....>" prompt when we have an

[19:10] <svnbot6> r10136 | audreyt++ |   unexpected eof (i.e. when typing something more can

[19:10] <svnbot6> r10136 | audreyt++ |   make it parseok again).  Otherwise we throw parsefail.

[19:12] <xerox> How does one get something readable out of a .pod ?

[19:13] <ruz> perldoc xxxx.pod

[19:13] <xerox> Great.

[19:24] *** dvtoo is now known as dvorak

[19:24] *** dvorak is now known as dvtoo

[19:28] *** dvtoo is now known as dvorak

[19:29] *** dvorak is now known as dvtoo

[19:31] <svnbot6> r10137 | audreyt++ | * resurrect JavaScript compilation by adding back the VCode instance.

[19:33] *** dvtoo joined
[19:33] <svnbot6> r10138 | audreyt++ | * PIL2JS: Work around a subtle parser bug:

[19:33] <svnbot6> r10138 | audreyt++ |     &say.({},1)         # fine

[19:33] <svnbot6> r10138 | audreyt++ |     &say.({},1).({},1)  # parsefail

[19:33] <svnbot6> r10138 | audreyt++ |   will investigate tomorrow...

[19:33] <obra> "sleep"

[19:33] <clkao> does pil2js work again?

[19:41] <xerox> I have got a work around for the hs-libraries-dir problem

[19:41] <xerox> But I don't know Perl to fix Makefile.PL

[19:44] *** jserv-- joined
[19:44] <audreyt> just describe the fix here and someone will pick up it and hack into Makefile.PL :)

[19:46] <audreyt> &

[19:46] <svnbot6> r10139 | audreyt++ | * More workaround to make JS build pass; however, -BJS still

[19:46] <svnbot6> r10139 | audreyt++ |   appears broken, warning about:

[19:46] <svnbot6> r10139 | audreyt++ |     uncaught exception: Error: 1 more parameters passed to sub <anonymous in &JS::Root::join> than expected (1)! at <unknown>

[19:46] <svnbot6> r10139 | audreyt++ |   More investigation needed.

[19:47] <xerox> haha

[19:47] <xerox> You never sleep!

[19:47] <xerox> The fix is "simple", instead of using hs-libraries-dir, use ghc-options with "-idir1 -idir2 ...".

[19:48] <xerox> Don't pretend you're sleeping, nobody believes you now

[19:48] <xerox> <grin>

[19:49] *** nnunley joined
[19:53] *** axarob joined
[20:01] *** shachaf joined
[20:05] *** dvtoo is now known as dvorak

[20:07] *** dvorak joined
[20:07] <svnbot6> r10140 | audreyt++ | * It turns out Cabal allows for comma-separated values

[20:07] <svnbot6> r10140 | audreyt++ |   in hs-source-dir, so the symlink trick is no longer needed...

[20:09] <xerox> Somebody put some sleeping pill in audreyt's drink

[20:09] <nnunley> Sleep committing?

[20:10] <xerox> Somehow.

[20:16] *** borkened joined
[20:16] <svnbot6> r10141 | audreyt++ | * Er, that fix wasn't good at all for GHC 6.4.1.  Applied

[20:16] <svnbot6> r10141 | audreyt++ |   xerox++'s suggestion of hand-adding -ithird-party/fps/

[20:16] <svnbot6> r10141 | audreyt++ |   to Pugs.cabal.in instead...

[20:16] <xerox> ^__^

[20:18] *** aufrank joined
[20:26] *** justatheory joined
[20:26] *** aufrank joined
[20:26] <aufrank> hey all

[20:29] <pasteling> "aufrank" at 128.151.80.181 pasted "build error with r10140" (24 lines, 2.3K) at http://sial.org/pbot/16977

[20:29] <aufrank> same thing happens with regular make (as opposed to make unoptimized)

[20:37] <svnbot6> r10142 | pmurias++ | rm _Inline on make clean

[20:37] <svnbot6> r10142 | pmurias++ | overloading of 0+

[20:48] <pmurias> got to pack my computer now, so that's all for today :) (came back from germany tommorow)

[20:49] <pmurias> s/tommorow/today

[20:50] <pmurias> too much perlguts(1)

[20:52] <pmurias> &

[20:52] <pmurias> good night

[20:56] *** FurnaceBoy is now known as FB|afk

[21:18] *** dpuu joined
[21:19] *** _SamB_ joined
[21:21] *** _SamB_ is now known as SamB

[21:55] *** kattana_ joined
[21:59] *** FB|afk is now known as FurnaceBoy

[22:01] *** justatheory joined
[22:08] *** larsen joined
[22:12] *** rootcho joined
[22:12] <rootcho> hi

[22:12] <rootcho> i see declarations like this :

[22:13] <rootcho> my $domain = ./:host($request, $uri);

[22:13] <rootcho> what "./:....." thing mean

[22:13] <rootcho> does ./ imply some sort of file path

[22:13] <Juerd> That was self.

[22:13] <Juerd> ./foo is now $.foo

[22:14] <Juerd> And :host is now !host

[22:14] <rootcho> aaa i see

[22:14] <Juerd> So ./:foo would now be $!foo, if I recall correctly

[22:14] <rootcho> hmm..cute ;)

[22:14] <Juerd> afk

[22:15] <rootcho> when i use hash

[22:16] <rootcho> why should i use %hash<key> instead %hash{key}

[22:16] <rootcho> why is one prefable than the other

[22:17] <aufrank> rootcho: %hash{key} does not automatically stringify key

[22:17] <aufrank> it used to in p5, but no longer does in p6

[22:17] <aufrank> use the %hash<key> form to get single quotes

[22:18] <rootcho> i see, thanx

[22:18] <aufrank> use the %hash<<key>> form to get interpolating quotes

[22:18] <rootcho> aha

[22:18] <aufrank> or use %hash{'key'} to was two keystroke ;)

[22:18] <aufrank> s/was/waste/

[22:18] <aufrank> afk

[22:27] *** nothingmuch joined
[22:29] *** drbean_ joined
[22:30] *** rootcho left
[22:56] *** multic joined
[23:18] *** drbean joined
[23:24] *** Eroick joined
[23:24] <Eroick> Hi! I check out the perl6 development every so often. How is it comming?

[23:30] *** Odin-LAP joined
[23:34] *** Ymmv joined
[23:38] *** reZo joined
[23:39] *** pdcawley joined
[23:44] *** aufrank joined
[23:53] *** pdcawley joined
[23:55] <meppl> gute nacht

