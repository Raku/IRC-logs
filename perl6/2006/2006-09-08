[00:09] <TreyHarris> markstos: sent C<when> mail to p6-l.  the sub<->meth xversion mail will come later

[00:10] <markstos> Awesome.

[00:10] <markstos> I'll be composing my CATCH clarification msg shortly.

[00:11] <markstos> First, I had to finish this post to PerlMonks that I was encouraged to make, encouraging module users to step up and help with maintenance:

[00:11] <markstos> http://www.perlmonks.org/?node_id=571832

[00:11] <lambdabot> Title: Take Back Your Modules!

[00:18] <markstos> TreyHarris: I just sent a refinement response to your p6l post. Thanks for starting that thread! TreyHarris++

[00:24] *** weinig is now known as weinig|food

[00:25] *** rodi joined
[00:27] *** nekokak joined
[00:45] <markstos> I just sent my CATCH message to p6l.

[00:49] *** weinig|food is now known as weinig

[00:58] *** mdiep_ joined
[00:59] *** hikozaemon joined
[00:59] *** NamelessOne joined
[01:00] *** khisanth_ joined
[01:00] *** khisanth_ is now known as Khisanth

[01:02] *** bsb joined
[01:02] *** bcorn joined
[01:06] *** weinig is now known as weinig|

[01:06] *** weinig| is now known as weinig|bbl

[01:08] *** prism joined
[01:09] <markstos> I contributed my first "Diagnostics explanation:

[01:09] <markstos> http://rakudo.org/perl6/index.cgi?pugs_diagnostics

[01:10] <markstos> If you are currently stuck on "can't modify constant item", it might help you.

[01:14] *** jon__ joined
[01:14] *** mdiep joined
[01:16] <rodi> markstos: on that topic:

[01:17] <rodi> ?eval sub foo ($a is rw) { $a ~~ s/b/c/; } foo('b');

[01:17] <evalbot_r13106> Error: Can't modify constant item: VStr "b"

[01:17] <rodi> I think this is as-yet unimplimented, non?

[01:18] <rodi> or am I putting it in the wrong place?

[01:18] <markstos> What's unimplemented? I think that's correct.  You can't make 'b' into a rw variable.

[01:19] <markstos> "is rw" and "is copy" already seem to work as they should.

[01:19] *** mdiep joined
[01:19] <Limbic_Region> IOW - a constant string can't magiccally become mutable

[01:19] <rodi> righto.

[01:19] <rodi> ?eval sub foo ($a is copy) { $a ~~ s/b/c/; } foo('b');

[01:19] <evalbot_r13106> Bool::True

[01:20] <Limbic_Region> if you had passed in a scalar var - it would have worked

[01:20] <rodi> ?eval sub foo ($a is copy) { $a ~~ s/b/c/; } say foo('b');

[01:20] <evalbot_r13106> OUTPUT[1 ] Bool::True

[01:20] <rodi> ?eval sub foo ($a is copy) { $a ~~ s/b/c/; } my $b="b"; say foo($b);

[01:20] <evalbot_r13106> OUTPUT[1 ] Bool::True

[01:20] <Limbic_Region> change copy to rw

[01:20] <Limbic_Region> still will work

[01:20] <rodi> ?eval sub foo ($a is rw) { $a ~~ s/b/c/; } my $b="b"; say foo($b);

[01:20] <evalbot_r13106> OUTPUT[1 ] Bool::True

[01:20] <markstos> Limbric_Region++

[01:21] <rodi> markstos++

[01:21] <Limbic_Region> (pugs hackers)++

[01:22] * Limbic_Region is still compiling ghc from src

[01:22] <Limbic_Region> 1hr 42min so far

[01:22] <markstos> ouch.

[01:23] <Limbic_Region> hopefully subsequent builds will be much faster

[01:23] <markstos> "make hope"

[01:23] *** mdiep joined
[01:30] *** frederico joined
[01:35] *** avarab joined
[01:36] *** weinig|bbl is now known as weinig

[01:38] <Limbic_Region> finished - less than 2 hours

[01:39] <TreyHarris> yee-hah, speed demon :-)

[01:40] <Limbic_Region> once I compile Pugs with it and verify it works correctly, I will update it to verify subsequent compiles are faster

[01:40] <Limbic_Region> and then I will upload a bin dist for Win32

[01:42] <rodi> Actually, it's impossible that it went that fast, because `units` doesn't understand lighthours.  So there.

[01:42] * rodi hopes for at least a courtesy chuckle...

[01:43] *** avarab is now known as avar

[01:44] * rodi should have spent a little less time on TreyHarris's 500-mile FAQ...

[01:46] *** mdiep joined
[01:47] *** frederico left
[01:53] <markstos> Here's something tricky:

[01:53] <markstos> ?eval my $str = 'a'; $str ~~ s:P5:g/(a)/{'pre'~$1~'post'}/; say $str;

[01:53] <evalbot_r13106> OUTPUT[prepost ] Bool::True

[01:54] <markstos> What's trick is that while the "P5" is present, I think the {} on the right implie P6ness, which among other things, means unlike Perl 5, the captured values start at $0, not $1, hence the missing 'a' in the result.

[01:58] <markstos> I'm adding a mention to Differences.pod, since this certainly confuse people who think just adding :P5 is about all they need to do.

[02:04] <svnbot6> r13107 | markstos++ | Add a s/// example to Differences.pod

[02:07] <svnbot6> r13108 | fglock++ | Pugs-Compiler-Rule - fixed & recompiled Grammar::Rule

[02:08] <Limbic_Region> attempting to compile pugs from source compiled GHC

[02:10] <svnbot6> r13109 | markstos++ | CGI.pm: escapeHTML and unescapeHTML were broken in basic ways and are now working better.

[02:10] <svnbot6> r13109 | markstos++ | two new passing tests were added for them.

[02:14] <Limbic_Region> particle - ping

[02:19] *** weinig is now known as weinig|zZz

[02:20] <statico> Automatic karma with CVS commit?

[02:21] <markstos> Subversion. But what's karma good for anyway? Can I cash it in for a stuffed animal later?

[02:22] <rodi> err... you can run over a dogma with a karma...

[02:23] <statico> Did I say CVS? Yikes!

[02:23] <markstos> It might be more useful in reverse: Given enough karma, you get subversion access. :)

[02:23] <statico> What if the commit introduces a bug?

[02:23] * statico trolls, harbors doubt

[02:24] <markstos> It least you didn't say CSV, which I would have done. :)

[02:24] <markstos> statico: then rollback or commit a bug fix.

[02:24] <rodi> or hit the person with your karmic bat.

[02:25] <markstos> or spray the subversion server with pesticides

[02:25] <rodi> About 90% of my commits introduce at least one bug,

[02:25] <rodi> since they are usually failing tests.  Though I did, admittedly, fix the sprintf one today :-D

[02:25] * rodi preens...

[02:27] <rodi> s/are/consist of/

[02:28] *** shasbot joined
[02:29] <audreyt> wow, I'm going to be late at $work.

[02:30] * audreyt spent 30+ minutes rofl'ing and generally disabled by TreyHarris's 500mi story

[02:34] <markstos> A more mundane pugs blog post today: http://pugs.blogs.com/pugs/2006/09/cgiapp_to_perl__4.html

[02:36] <rodi> well, as one ore more of my babies are likely to wake me in four or five hours, I'm going to go to bed now.  Until next time, fare thee well, my e-buddies.

[02:37] *** markstos left
[02:37] <audreyt> sleep well, rodi

[02:39] <clkao> audreyt: yo. jifty. need a way to have dynamic arguments based on the current state of action. defer doesn't get the action itself.

[02:40] * clkao . o O ( CALLER::$?SELF )

[02:44] <audreyt> do what we do in dispatcher?

[02:44] <audreyt> i.e. have a package global that stands for the current action.

[02:45] <audreyt> seems to me cleaner (far cleaner) than walking the call stack and pull $_[0] out.

[02:45] <clkao> ah. cunning. where are we doing that?

[02:46] <audreyt> local our $Action = ...

[02:46] <audreyt> grep for $Dispatcher in Dispatcher.pm

[02:51] *** shasbot left
[02:54] *** Limbic_Region joined
[02:54] <Limbic_Region> particle ping

[02:55] <Limbic_Region> pugs built successfully btw

[02:55] <Limbic_Region> oh, audreyt - you're about

[02:55] <Limbic_Region> great news

[02:55] <Limbic_Region> I am compiling ghc from source on Win32

[02:56] <Limbic_Region> hrm - can't tell if that late for $work comment meant she was in transit or what

[02:59] *** Termy joined
[03:07] <Limbic_Region> particle - if you backlog, http://feather.perl6.nl/~limbic/

[03:08] <Limbic_Region> audreyt ping http://feather.perl6.nl/~limbic/ # see above for explanation

[03:08] <Limbic_Region> ok, time for bed

[03:13] *** mako132_ joined
[03:14] *** MacVince joined
[03:15] <MacVince> Quick question.  I just saw a post on the perl6 planet blog about CGI.pm.  The guys said that Perl 5's $1 becomes $0 in Perl 6.  So what's $0 in Perl 6?

[03:15] <MacVince> Meaning, how to I get the name of the program

[03:27] <dolmans> MacVince: $*PROGRAM_NAME

[03:28] <MacVince> Cool

[03:30] <dolmans> MacVince: do you use Pugs? in t/magicals there are some magicals variable examples.

[04:49] *** drbean joined
[05:03] *** kanru joined
[05:24] *** iblechbot joined
[05:34] *** hikozaem_ joined
[05:42] <nothingmuch> 9morning

[05:48] <gaal> 8:60morning

[05:48] <gaal> (I see your typo and raise you a leap minute!)

[05:55] *** MacVince left
[06:08] <nothingmuch> gaal: ?

[06:08] <nothingmuch> oh

[06:09] <nothingmuch> me doesn't parse well at these hours

[06:10] *** mugwump joined
[06:10] <gaal> if I ever end up writing a parser engine, I think I'll call it caffeine, since it's my experience that parsing is often imeded by the lack thereof

[06:11] <gaal> *impeded

[06:12] <gaal> typing, however... I don't know of a substance that improves it.

[06:17] <mugwump> how about ibogaine?  it's a strange substance used by shamans in parts of africa to cleanse the brain during rites of passage ceremonies

[06:17] <gaal> that sounds dangerously like iocaine

[06:30] *** hermax_ joined
[06:31] *** christopher joined
[06:31] <svnbot6> r13110 | malon++ | smokeserv-client.pl -

[06:31] <svnbot6> r13110 | malon++ |  * Fail if .yml is not provided

[06:31] <svnbot6> r13110 | malon++ |  * Check that the configurations used for the .yml and .html correspond

[06:31] <svnbot6> r13110 | malon++ |  * Accept .yml and .html arguments in either order

[06:31] <svnbot6> r13110 | malon++ | run-smoke.pl - use a .yml name like the .html, not constantly tests.yml

[06:31] <svnbot6> r13110 | malon++ | Makefile.PL - make upload-smoke depend on smoke.yml instead of tests.yml

[06:32] <christopher> If you have problems submitting your .yml smoke, let me know (by IRC or email).

[06:33] <christopher> I was surprised that the r13105 win32 smoke didn't send .yml properly.

[06:54] *** mj41_ joined
[06:54] *** NamelessOne joined
[07:01] <gaal> audreyt: ping

[07:02] <gaal> need some ghc typing help

[07:03] *** NamelessOne joined
[07:08] <gaal> I *think* this is a ghc bug, in fact :(

[07:09] <araujo> hi

[07:09] <gaal> ho

[07:09] <araujo> gaal, which one?

[07:09] <gaal> which bug? which ghc?

[07:10] <gaal> ghc is having problems unifying types of an implicit parameter and a typeclass-constarined alias

[07:10] <gaal> *constrained

[07:10] <gaal> ghc-6.5.20060818

[07:10] *** iblechbot joined
[07:12] <araujo> i _highly_ recommend you to update gaal

[07:13] <gaal> it's not that old... but yeah, good idea

[07:14] <araujo> gaal, they have recently fixed some bugs

[07:15] * araujo installed yesterday snapshot and now will update again

[07:15] <gaal> hmm, okay, but if indeed this is one of them then this feature won't compile on 6.4.x :(

[07:18] <araujo> well, they expect to release new version soon afaik

[07:18] <gaal> yeah.

[07:19] <gaal> I just hope it'll come with good bindists for all platforms, so that we can update our dependency immediately.

[07:20] <gaal> (I already have another change in a branch waiting on the move...)

[07:35] <gaal> well, that didn't work. scping patch...

[07:37] <gaal> audreyt: could you give http://perlcabal.org/~gaal/tmp/priggy.0.patch a gander?

[07:38] <gaal> the problem occurs in Prim, binding the new implicit parameteric pretty-printer.

[07:42] <gaal> (background w/motivation: .perl should not ultimately show things like 'VPure (NInt 42)', but rather just '42'. But for development we really want some prim to dump the guts with priggy attention to detail.)

[07:47] *** kane-xs joined
[07:49] *** bsb left
[07:53] *** rindolf joined
[07:53] <rindolf> Hi all.

[07:57] *** buu joined
[08:00] <mugwump> anyone got an opbot I can use?

[08:13] <nothingmuch> mugwump: BingOS on irc.perl.org runs flexo/bender

[08:14] <nothingmuch> maybe you could ask him for the code

[08:27] *** drrho joined
[08:27] *** ruoso joined
[08:37] *** ruz joined
[08:37] <rindolf> Hi nothingmuch

[08:37] <nothingmuch> hi ho

[08:41] <rindolf> nothingmuch: what's up?

[08:42] <nothingmuch> meta models

[08:44] *** buu joined
[08:49] <rindolf> nothingmuch: meta models of what?

[08:49] <nothingmuch> of meta models

[08:49] <nothingmuch> meta meta models ;-)

[08:49] <nothingmuch> of perl 6 / moose object space, actually

[08:50] <rindolf> nothingmuch: I see.

[08:51] *** jferrero joined
[08:51] <rindolf> nothingmuch: I'm working on an XSLT transformation.

[08:52] <rindolf> nothingmuch: I think I finally grokked XSLT, after I read the W3Schools and Zvon tutorials.

[08:55] *** avarab joined
[09:17] *** iblechbot joined
[09:22] *** polettix joined
[09:44] *** foo\ joined
[09:49] *** elmex joined
[09:55] *** ludan joined
[10:02] *** NamelessOne left
[10:06] *** bradleym joined
[10:38] *** prefiks joined
[11:17] *** chris2 joined
[11:32] *** Termy joined
[11:44] *** Alias_ joined
[11:44] <Alias_> nice paradigm thingy

[11:53] *** mako132_ joined
[11:57] *** marmic joined
[12:03] <rindolf> Hi Alias_

[12:03] *** ruz joined
[12:03] *** Limbic_Region joined
[12:04] <Alias_> hiya

[12:04] <Alias_> How goes the Error.pm saga

[12:05] <rindolf> Alias_: well LeoNerd took over most of the development.

[12:05] <Alias_> (It's pass'ing on Strawberry now btw)

[12:05] <Alias_> ah

[12:06] <rindolf> Alias_: GBARR (IIRC) made me the primary maintainer.

[12:06] <rindolf> Alias_: and LeoNerd a co-maintainer.

[12:07] <rindolf> Alias_: do you still live in .au ?

[12:07] <Alias_> All that bubbled up to me was some wailing and nashing of teeth after it got broke'd

[12:07] <Alias_> Yeah, in Sydney

[12:07] <rindolf> Alias_: OK.

[12:08] <rindolf> Alias_: I fixed two bugs yesterday and today: one in TAPx::Parser and one in XML::SemanticDiff.

[12:15] *** weinig|zZz is now known as weinig

[12:16] <Limbic_Region> Juerd ping

[12:24] <rindolf> Alias_: what's up with you? How is the Perl refactoring tool progressing?

[12:24] <Alias_> I got distracted by making a Win32 Perl distribution

[12:24] *** xinming joined
[12:24] <Alias_> So I could run it on my laptop

[12:24] *** christopher joined
[12:25] <Limbic_Region> salutations rindolf and Alias_

[12:25] <Alias_> Now that the main group of important modules are all mostly green on Win32 now (Wx and so on) I'm trying to find the time to keep going on the editor part

[12:25] <Alias_> But herbert can be hard to work with (shifting decisions)

[12:25] <Alias_> Xeper -> Kepher -> Kefra etc

[12:26] <Alias_> But as the Win32 Perl stuff gets stronger and stronger, at least I'm not being worried by the base level stuff giving me problems

[12:30] <rindolf> Hi Limbic_Region

[12:30] <rindolf> Alias_: I've been tutoring someone in Perl using Windows this week.

[12:31] <rindolf> Alias_: I found a way to segfault XML::LibXML.

[12:31] <rindolf> If I specified the ISO-8859-8 encoding for my XML.

[12:31] *** buetow joined
[12:32] <Alias_> On Windows? Doesn't sound hard

[12:32] <Alias_> How did you get it installed on Win32?

[12:32] <Alias_> (that's one of our ones with the external modules issues)

[12:33] <Alias_> eep, afk now

[12:33] <Alias_> (talk to you later)

[12:34] <rindolf> Alias_: I installed XML::LibXML by configuring the uwinnipeg ppm repository and then hitting ppm install XML::SAX and ppm install XML::LibXML.

[13:00] *** agentzh joined
[13:01] <agentzh> christopher: the only SYN link on the smoker sever seems to have some problems. :(

[13:01] *** crem_ joined
[13:01] <agentzh> the smoke results are very odd.

[13:03] <christopher> agentzh: I think iblech stopped his smoke after 13 tests, so most things say "0. checks, 0 X's."

[13:04] <agentzh> okay

[13:04] <agentzh> is the smoke server using the latest synopses?

[13:04] <agentzh> what is /var/www/iblech/stuff/pugs-smokes/spec?

[13:05] <christopher> I think so.  I'm not sure how often the refresh-synopsis script is being run.

[13:05] <christopher> That's a directory that should be getting updated with the synopses.

[13:05] <agentzh> i think you should not specify the --syn-dir option your self.

[13:05] <agentzh> or i even should not offer that option.

[13:05] <christopher> It uses the same update script found in docs/Perl6/Spec in the pugs tree.

[13:06] <christopher> But I don't think the entire pugs tree is checked out on the Smoke server.

[13:06] <agentzh> christopher: why not use the default setting?

[13:06] <christopher> The important part is that something's auto-updating the specs, wherever they are.

[13:06] <agentzh> or the syn rev number won't be set in the HTMLs

[13:07] <agentzh> christopher: what is updating that? a cron?

[13:07] <christopher> Yeah, the rev number is a problem.  For some reason, version_h.pl doesn't seem to work in isolation.

[13:07] <agentzh> christopher: smartlinks.pl automatically update the synopses it uses everytime it runs (unless you specify the --fast option)

[13:07] <christopher> Yes, it's meant to be updated by refresh-smoked-synopses.pl, running under cron.

[13:07] <agentzh> *updates

[13:08] <agentzh> so you don't have to do that yourself.

[13:08] <christopher> yes, by running the "update" script which we call every time.

[13:08] <christopher> We do it ourselves because refresh-smoked-synopses will update all the smoked synopses at once.  When done in a batch, it's faster to just call the "update" script once.

[13:09] <agentzh> christopher: i don't understand.

[13:10] <agentzh> you're keeping various revisions of synopses on the smoke server?

[13:10] <christopher> agentzh: When --syn-dir isn't in the pugs tree, you need to run "update" yourself, or smartlinks won't do it for you.

[13:11] <christopher> No, we only keep the latest (unsmoked) synopses on the server

[13:11] <christopher> But we produce a different set of smoked synopses for each smoke report.

[13:11] <agentzh> so i suggest you use the synopses *in* the pugs tree. :)

[13:11] <agentzh> that is *strongly* recommended.

[13:11] <christopher> When the synopses get updated, the refresh script reruns smartlinks on all the previous smoke reports, to give them the latest synopsis.

[13:12] <agentzh> christopher: on all the previous smoke reports? is that necessary?

[13:12] *** cjeris joined
[13:12] <christopher> agentzh: but I don't think there is a full pugs tree on the smoke server.  Would you prefer we checkout pugs/util?  Will that be enough for all your version-watching scripts to work?

[13:13] <agentzh> christopher: you don't need to check out the whole pugs tree.

[13:13] <christopher> It's necessary if you always want to be looking at the latest synopses.  You obviously can't look at the latest tests on an old smoke, but you should always want to compare them to the latest spec.

[13:14] <agentzh> christopher: okay, i can understand that.

[13:15] <agentzh> checking out pugs/util is not enough at all.

[13:15] <[particle]> hrmm, i'd expect you'd want to look at the spec that's at the same pugs rev as the tests

[13:16] <agentzh> particle: yeah, i'm having exactly the same feeling.

[13:16] <agentzh> christopher: is checking out a whole pugs tree *that* bad?

[13:16] <agentzh> you always have cron, you know.

[13:17] <christopher> particle: I envision people mainly want to see how close they are to the current spec, by whatever means are available to measure it.  Meeting an old spec would be like a report-card sort of satisfaction.

[13:17] <Limbic_Region> [particle] - did you get my /msg

[13:17] <Limbic_Region> woot

[13:17] <[particle]> lr: yes, haven't acted on it yet, as i've only been awake for 17mins

[13:17] <[particle]> :)

[13:18] <Limbic_Region> unfortunately, feather is unlikely a good place to host the binary dists as I have been downloading the 54 MB for over an hour now

[13:18] <christopher> agentzh: You can suggest it to iblech.  I don't really mind.  Do you understand why we need the whole tree, though?  (On my machine, it takes 30 seconds to see what files have been updated, from top level, when doing "svn status," so I can see why some people wouldn't want the whole tree.)

[13:18] * Limbic_Region assumes the issue is on feather's end

[13:18] <[particle]> christopher: why not have a local mirror of pugs, and use svk to pull the proper rev?

[13:19] <[particle]> then you have *all* revs locally

[13:19] <christopher> particle: Is this a way svk is faster than svn?  It may be worth installing svk on the smoke server, then.  (It's not under my administration.)

[13:20] <christopher> agentzh: Is the version information you print a synopses revision number, a pugs revision number, or both?

[13:20] <agentzh> christopher: fyi, there's a perl script on feather which updates the whole pugs tree every 5 min or so. :)

[13:20] <[particle]> i think having a local mirror is faster than net traffic

[13:20] <agentzh> christopher: both.

[13:21] <agentzh> christopher: look at here: http://svn.berlios.de/svnroot/repos/unisimu/Perl/Syn/S02.html

[13:21] <[particle]> agentzh: i've started modifying smartlinks for parrot

[13:21] <lambdabot> Title: S02, http://tinyurl.com/lcojf

[13:21] <agentzh> particle: woooot!

[13:21] <[particle]> imo --syn-dir is important to me

[13:21] <agentzh> particle: why?

[13:22] <[particle]> in fact, i want to make it --syn-path

[13:22] <[particle]> because i have two sets of specs to check

[13:22] <[particle]> PDD* and S*

[13:22] <agentzh> ah, gotcha. :)

[13:22] <[particle]> S* are not (currently) checked into parrot repo

[13:22] <christopher> agentzh: I think the current smartlinks assumes that the revision of the pugs tree in which it lives, is the revision of pugs that should be printed.  We wouldn't want to do that on the smoke server, because those revision numbers would keep updating, and the smoked pugs revision should be frozen.

[13:23] <[particle]> christopher++ # if that's the case, it needs fixing

[13:23] <agentzh> christopher: then we need a better way to detect rev number.

[13:23] <christopher> agentzh: so I think smartlinks.pl should read its pugs revision from the .yml, if present, not from its ambient pugs tree.

[13:23] <[particle]> agentzh: it should be in the smoke report

[13:23] *** mdiep_ joined
[13:24] <agentzh> right!

[13:24] <agentzh> when .yml is provided, get pugs rev number from there.

[13:24] <[particle]> Limbic_Region: 6kps -- expected 2:21:00 remaining :(

[13:25] <agentzh> christopher: okay, i'll add that to smartlinks.pl tonight.

[13:26] <agentzh> christopher: but how about the rev number of synopses?

[13:26] <christopher> agentzh++

[13:26] <christopher> Ah, you're getting the synopses by http (and so are we)

[13:26] <agentzh> christopher: i still think we should checkout at least pugs/docs/Perl6/Syn

[13:27] <christopher> If we did a real svn checkout of the synopses we could have the synopsis revision number.

[13:27] <agentzh> christopher: could you check out pugs/docs/Perl6/Syn?

[13:27] <Limbic_Region> I am getting 9

[13:28] <Limbic_Region> tonight, I will put it on my own website

[13:28] <christopher> agentzh: are you getting synopses by http just because you worry people who get the pugs Release versions may not have svn installed on their machines?

[13:28] <Limbic_Region> and if that still is no good - I will try perlmonk.org

[13:28] <agentzh> christopher: aye.

[13:28] <Limbic_Region> unless you have somewhere you would want me to upload it directly?

[13:28] <agentzh> christopher: that's something about "laziness".

[13:28] <agentzh> i just want to resue the pugs mechanism as much as possible.

[13:29] <agentzh> yes, http is slower.

[13:30] <agentzh> but that may not be a problem.

[13:30] <christopher> agentzh: Can the .svn subdirectory (with metadata) of some place that does svn checkouts, be accessed by http?

[13:30] <christopher> We just need to download our synopses from somewhere that also makes the corresponding revision number easily readable.

[13:31] <agentzh> christopher: from feather? i dunno.

[13:32] <rindolf> Alias_: ping

[13:32] *** rodi joined
[13:32] <christopher> agentzh: Yes, feather would be natural, if it's auto-downloading the synopses anyway.

[13:32] <agentzh> christopher: it's updating synopses every 1 hour.

[13:33] <agentzh> ...err, by cron.

[13:33] <[particle]> Limbic_Region: i don't, and i don't mind the wait. hopefully i won't need to get every daily snapshot of ghc to build pugs :)

[13:33] <Limbic_Region> [particle] - oh, you definately won't

[13:34] <christopher> agentzh: If there were http://feather.perl6.nl/syn/.svn, then you could just read the .svn/entries file the same way pugs does, and figure out what revision it was at.

[13:34] <Limbic_Region> [particle] - you ever used Parallel::ForkManger

[13:34] <[particle]> Limbic_Region: yes, about 6 years ago i used it a lot :)

[13:34] <agentzh> christopher: please please don't use svn to check out synopses...that would make my life particularly harder... :)

[13:35] <agentzh> christopher: i have a suggestion.

[13:35] <christopher> agentzh: No, I'm not suggesting that on the client-side.  I'm only suggesting that _feather_ uses svn to check out synopses, instead of using wget.

[13:35] <Limbic_Region> [particle] - I ask because I am updating util/yaml_harness.pl to use Parallel::ForkManager if available (so Win32 can do smoke tests in parallel) and only fall back to the homegrown version in the event it isn't present

[13:36] <Limbic_Region> I was wondering if you were interested in helping

[13:36] <agentzh> christopher: why not using LWP?

[13:36] <christopher> Then the client gets svn synopses from feather (instead of from the perl repository directly) and gets their associated revision number.

[13:36] <[particle]> i think i can help with that

[13:37] <Limbic_Region> fwiw, P::FM isn't foreign to me - I am just more likely to be motivated if I have someone suggesting ideas and helping

[13:37] <Limbic_Region> I'm terribly lazy otherwise

[13:37] <[particle]> i have the 0819 ghc build now, but haven't built pugs with it yet

[13:37] <[particle]> i'll do that now  (no sense waiting for 0906)

[13:37] <[particle]> do you have work-in-progress checked in?

[13:37] <Limbic_Region> no, but I can nopaste it

[13:37] <[particle]> thanks to juerd++ we can use *obby on feather

[13:38] <[particle]> and edit the file together

[13:38] <agentzh> christopher: i don't think the client should get svn synopses from feather. feather updates syn every 1 hour, which is not very frequent.

[13:39] <[particle]> agentzh: do you really think the synopses often change more than once per hour?

[13:39] <christopher> agentzh: The smoke server won't update synopses more than once an hour, probably.

[13:39] <christopher> agentzh: How is the synopsis revision computed currently by smartlinks.pl?

[13:39] <agentzh> particle: i think the user always wants the latest, even psychologically.

[13:40] <Limbic_Region> [particle] - what is the gobby URL

[13:40] <agentzh> christopher: smartlinks.pl gets the syn rev number by invoking util/version_h.pl

[13:40] <[particle]> hrmm, i wonder if an rss feed could be set up so folks can watch for syn updates and act on changes

[13:40] <[particle]> lr: just know sobby debian pkg was installed last night

[13:40] <agentzh> christopher: oh, sorry...

[13:40] <Limbic_Region> and btw - I am not just shoe-horning in P::FM, I am pretty much re-writing it

[13:40] <christopher> agentzh: which does...? (I understand the pugs svn magic but not the synopsis magic)

[13:41] <[particle]> i haven't logged into feather in a while

[13:41] <[particle]> oh, rewriting p::fm! this should be... fun :)

[13:41] <Limbic_Region> ok - no worries, I will nopaste for now and we will bug Juerd when he shows up

[13:41] <Limbic_Region> no, not p::fm - yaml_harness

[13:41] <[particle]> ah

[13:41] <Limbic_Region> lines like @ARGV = sort map glob, "t/*/*.t", "t/*/*/*.t", "ext/*/t/*.t" if ! @ARGV; # bother me

[13:41] <agentzh> christopher: sorry, by reading docs/Perl6/Spec/.spec-revision

[13:42] <agentzh> that file is generated by the "update" script.

[13:42] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "[particle] - here is my work in progress on util/yaml_harness.pl" (293 lines, 8.6K) at http://sial.org/pbot/19541

[13:42] *** weinig is now known as weinig|bbl

[13:43] * [particle] builds pugs with ghc-6.5.20060819 and AS perl-5.8.8b817

[13:43] <christopher> agentzh: Good, it looks like it comes in the http response.  So I think pugs tree checkout is unnecessary.

[13:43] <agentzh> christopher: could you check out docs/Perl6/Spec? that is required.

[13:43] <Limbic_Region> [particle] - my mental hurdle at the moment is figuring out how to modularize P::FM or the homegrown solution as plug-ins so either will work

[13:44] <christopher> agentzh: by what?  I think only that "update" script is required.

[13:44] <Limbic_Region> I was hoping to overcome that hurdle today but I had baby duty last night - no sleep

[13:44] *** NamelessOne joined
[13:44] <rodi> Limbic_Region: me too!!

[13:44] <agentzh> christopher: the *path* is also required.

[13:44] <rodi> err... not the hurdle, but the baby ;)

[13:45] <agentzh> christopher: so please make sure the update script is in the right path. that is very very important.

[13:45] <Limbic_Region> [particle] - additionally, [audreyt] said it was ok to assume perl 5.8 when rewriting so no need to keep 2 arg open, local *fh instead of lexical, etc

[13:45] <[particle]> Limbic_Region: this is the first time i've seen this code... is the homegrown solution in this file?

[13:45] <agentzh> or we'll need to modify smartlinks.pl.

[13:45] <[particle]> i thought 3 arg open was a 5.6.1 thing

[13:45] <Limbic_Region> [particle] - yes, my $s = __PACKAGE__->new; $s->run; $s->emit;

[13:46] <[particle]> k

[13:46] <christopher> agentzh: I think you should modify smartlinks.pl to look for $syn_rev in a file called $syn_dir/.spec-revision (just move that part outside of your "dir eq dir" block)

[13:46] <Limbic_Region> [particle] - my point is there is no need to preserve compatability < 5.8

[13:46] <[particle]> btw i'd put all subs below exit; but that's just my style

[13:46] <agentzh> christopher: i second that. will do tonight. :)

[13:46] <[particle]> Limbic_Region: easy way, 'use 5.008;'

[13:46] <agentzh> christopher++

[13:47] <Limbic_Region> [particle] - that doesn't actually use those features though ;-)

[13:47] <[particle]> have perl worry about compat, so you don't have to

[13:47] <agentzh> christopher: btw, thank you for your excellent work!

[13:47] <Limbic_Region> [particle] - I was arranging the subs by the order I had "touched" them versus ones I still needed to touch

[13:47] <Limbic_Region> with the intention of re-arranging once they were all given a once over

[13:47] <[particle]> gotcha... work-in-progress

[13:47] <[particle]> those above have been touched?

[13:48] *** avarab is now known as avar

[13:48] <[particle]> or below?

[13:48] <Limbic_Region> yes

[13:48] <christopher> agentzh++ (smartlinks is so cool it inspires lots of add-on hacks)

[13:48] <Limbic_Region> below is untouched

[13:48] <agentzh> christopher: :)

[13:48] <[particle]> christopher++ # i totally agree

[13:48] <agentzh> (bbiab)

[13:49] <Limbic_Region> though fix_config() is unfinished - the empty else {} block and the if above it are where the P::FM and homegrown plugins need to go

[13:49] <Limbic_Region> s/need to go/should go I think/

[13:49] <[particle]> yeah

[13:50] <[particle]> and you only need P::FM if it's win32, right?

[13:50] <Limbic_Region> no

[13:50] <[particle]> or are you planning to replace homegrown with P::FM entirely

[13:50] <Limbic_Region> my thinking is we should use P::FM regardless of platform if it is available

[13:50] *** jferrero joined
[13:50] <[particle]> ok

[13:50] <Limbic_Region> if it isn't - then homegrown and Win32 is SOL

[13:51] <Limbic_Region> If the file was self-contained I don't think I would be having the brain cramp but SUPER methods are being called

[13:51] <[particle]> well, if the eval fails, just set $Config{"concurrent"} to zero if platform is Win32

[13:51] <Limbic_Region> and I don't know the test harness stuff all that well

[13:51] <Limbic_Region> no to 1

[13:51] <Limbic_Region> concurrent isn't boolean

[13:51] <[particle]> oh

[13:51] <Limbic_Region> it is the number of tests to run concurrently

[13:51] <[particle]> :)

[13:52] <[particle]> that's not yet obvious

[13:52] * Limbic_Region was confused on that matter too until I started digging into the homegrown code

[13:52] <[particle]> the usage says it, i just didn't read it

[13:52] <[particle]> btw typo in usage

[13:52] <[particle]> Paralle::...

[13:54] *** kanru joined
[13:54] <Limbic_Region> maybe I am just being overly idealistic with converting to plug-ins.  It is relatively simple to just complete two completely different branches and have code duplication

[13:56] *** weinig joined
[13:56] *** weinig is now known as weinig|bbl

[13:57] <Limbic_Region> [particle] oh, I also wanted to use a proper temp file module if available too as the current homegrown solution doesn't always clean up all the files

[13:57] <Limbic_Region> I think it is an issue of no sig handlers but I can't be sure

[13:57] <agentzh> christopher: please don't forget to set the --fast option while invoking smartlinks.pl on the smoke server in case that you invoke the "update" script yourself.

[13:58] <[particle]> yeah, see that

[13:58] <christopher> agentzh: will do!

[13:58] <[particle]> (temp file) *yuck*

[13:58] <agentzh> christopher++

[13:59] <Limbic_Region> and come to think of it - since < 5.8 compatability is being dropped - the shuffle routine can go away completely and be replaced with use List::Util 'shuffle'; since it has been core since 5.7

[13:59] * Limbic_Region just likes messing with the symbol tabls

[13:59] <Limbic_Region> table even

[13:59] <[particle]> :)

[13:59] <[particle]> isn't file::temp core?

[13:59] <Limbic_Region> not sure - check Module::CoreList

[13:59] <[particle]> doing that

[14:00] * Limbic_Region too - slowly

[14:00] <Limbic_Region> yes, since 5.6

[14:00] <Limbic_Region> not sure why it wasn't used originally then

[14:00] <[particle]> easy win

[14:00] <[particle]> false laziness

[14:01] *** mako132_ joined
[14:01] <Limbic_Region> oooh, I am at 95% of my download

[14:01] <[particle]> i'm at 22% and 4.7kps

[14:01] <Limbic_Region> so [particle] - when you get bored of playing with it and/or need to work on something else - just /msg me back the nopaste

[14:01] <[particle]> geez, that's 4800baud

[14:02] <Limbic_Region> or better - email me

[14:03] <agentzh> christopher: please test r13111. (i've tested on my local machine.)

[14:03] <svnbot6> r13111 | agentz++ | [util/smartlinks.pl]

[14:03] <svnbot6> r13111 | agentz++ | - checked the existence of the "update" script in user-

[14:03] <svnbot6> r13111 | agentz++ |   specified syn path instead of mechanically comparing

[14:03] <svnbot6> r13111 | agentz++ |   the path with pugs/docs/Perl6/Spec, requested by

[14:03] <svnbot6> r13111 | agentz++ |   christopher++

[14:04] <agentzh> err...step #2, read pugs rev number from .yml (if any)...

[14:05] *** onsen joined
[14:05] <svnbot6> r13112 | malon++ | smokeserv - call smartlinks.pl with --fast (noticed by agentzh++)

[14:10] *** lisppaste3 joined
[14:16] <agentzh> step #2 is done.

[14:17] <svnbot6> r13113 | agentz++ | [util/smartlinks.pl]

[14:17] <svnbot6> r13113 | agentz++ | - reads pugs rev number from the smoke data (.yml) if

[14:17] <svnbot6> r13113 | agentz++ |   --test-res is specified. this is requested by

[14:17] <svnbot6> r13113 | agentz++ |   christopher++ and particle++.

[14:17] <christopher> agentzh++ (thanks!)

[14:17] *** prefiks left
[14:18] <agentzh> christopher: to be honest, i'm *so* eager to see the first set of smoked synopses on the smoke server. :P

[14:19] <christopher> agentzh: I'd submit one, but "make smoke" stalls for me.

[14:19] <agentzh> hehe.

[14:19] <agentzh> i've never run smoke on my machine. :)

[14:19] <christopher> On t/examples/all_parse.t, it hangs for hours.  If I interrupt, I get no smoke at all.

[14:20] <agentzh> ...just in fear of hanging.

[14:20] <agentzh> *nod*

[14:20] <christopher> And if I run "pugs t/examples/all_prase.t," I get "Illegal instruction."

[14:21] <christopher> Should yaml_harness.pl time out after a fixed amount of time on any test?

[14:22] <agentzh> no clue...i'm not familiar with the smoke facility.

[14:22] *** amnesiac joined
[14:22] <christopher> I'd say "yes," but all_parse.t is a special test that runs many examples, so maybe its timeout threshold should be bigger.

[14:22] <agentzh> i hope it does.

[14:22] <christopher> AFAICS it doesn't time out at all.

[14:23] <christopher> And this is misleading, when the smoke reports can't even be sent in the first place to report the failure.

[14:23] <[particle]> perhaps ipc::run could be helpful

[14:23] <agentzh> if there's timed out mechanism, we can even run autosmoke on feather.

[14:24] *** rindolf left
[14:24] <agentzh> i have no idea how audreyt works around hanging while smoking.

[14:25] <christopher> particle: Is that more portable than "wait", "alarm", and friends?

[14:25] <[particle]> probably not

[14:25] <[particle]> but it offers a lot

[14:26] <[particle]> it is perhaps overkill

[14:26] <christopher> I'm not familiar with it.

[14:26] <agentzh> IRC::Run is not very friendly on Win32.

[14:26] <[particle]> think of it as IPC::Open3 that works

[14:26] <[particle]> agentzh: i use it in production

[14:26] <agentzh> for windows, IPC::Run3 is better, though not very featureful.

[14:27] <[particle]> it's not working on win98, but i have no problems in win2003

[14:27] <agentzh> particle: i once used IPC::Run to rewrite the gnu make test suite (on win2000), but it suffered a lot.

[14:27] <kane-xs> ipc:: on win32 is painful

[14:27] <kane-xs> basically taht which works on every other OS fails on win32

[14:28] <agentzh> kane-xs: IPC::Run3 is a notable exception. :)

[14:28] <kane-xs> it lacks a lot of features

[14:28] <kane-xs> that's a good way to make things work more

[14:28] <agentzh> kane-xs: yes.

[14:29] <agentzh> windows--

[14:30] <[particle]> (perl threads)--

[14:30] <agentzh> heh

[14:32] *** frederico joined
[14:33] *** frederico left
[14:39] *** dakkar joined
[14:42] *** vel joined
[14:47] *** elmex joined
[14:51] <svnbot6> r13114 | agentz++ | [t/closure_traits/in_loop.t]

[14:51] <svnbot6> r13114 | agentz++ | - updated the tests to reflect recent syn changes.

[14:51] <svnbot6> r13114 | agentz++ | Status:

[14:51] <svnbot6> r13114 | agentz++ | all tests are failing.

[14:51] <svnbot6> r13115 | audreyt++ | * Remove the now-obsolete support for precompiled-in-haskell

[14:51] <svnbot6> r13115 | audreyt++ |   prelude, since it's redundant with YAML-based prelude support,

[14:51] <svnbot6> r13115 | audreyt++ |   and (with GHC 6.6) the speed difference is indistinguishable.

[14:51] <agentzh> when should LAST {} be triggered? will return or leave bapasses LAST {}? what about the case when there's no explicit "last"?

[14:51] <agentzh> *bypass

[14:52] *** dakkar joined
[14:54] <audreyt> no explicit last should trigger LAST all the same

[14:54] <agentzh> auderyt, TimToady: what are the exact running circumstances for LAST {}? only if there's a "last" or the end of the loop is reached normally? just like NEXT {}?

[14:55] <agentzh> audreyt: will return/leave/goto bypass LAST {}?

[14:56] <audreyt> I think all three will

[14:57] <agentzh> oh, S04 is still quite hand-waving. :/

[14:57] <audreyt> indeed.

[14:57] <agentzh> maybe it's time for me to start another p6l thread. :)

[14:58] <audreyt> maybe it's time to draw some pictures :)

[14:58] <audreyt> but p6l thread is a good idea

[14:58] <agentzh> okay :)

[14:59] <audreyt> :)

[15:01] * agentzh often gets blocked by the handwaving synopses while writing tests for pugs.

[15:04] <audreyt> you need nonblocking IO

[15:05] <audreyt> i.e. write the test the way you think it ought to work

[15:05] <audreyt> and then ask #perl6 and p6l :)

[15:08] <agentzh> audreyt: good idea. :D

[15:10] <audreyt> iblech used to do that all the time :) it's a very good approach

[15:10] *** weinig|bbl is now known as weinig

[15:11] <agentzh> iblech++

[15:12] <agentzh> i can imagine the painful early days of pugs... :)

[15:12] <audreyt> it's actually a lot of fun :)

[15:12] <audreyt> significantly more frustration than fun at the beginning, though

[15:12] <audreyt> it's getting much better :)

[15:13] <agentzh> nod nod

[15:13] * audreyt looks at gaal's priggy.0.patch

[15:13] <Juerd> Limbic_Region: Pong

[15:13] <agentzh> so i was lurking from pugs day #1 to this july.

[15:14] <Juerd> Limbic_Region: feather should be good for binary dists. If it's slow, please mail me your IP so I can traceroute.

[15:15] <agentzh> fyi, feather was pretty fast while i was downloading a 2 GB file from gaal's home.

[15:16] <[particle]> juerd: can i msg, or is email better?

[15:16] <audreyt> gaal: I _think_ implicit parameters wants to be monomorphic

[15:16] <audreyt> but I also think it's better to use a ReaderT.

[15:16] *** frederico joined
[15:18] <[particle]> juerd: sent email

[15:22] <Limbic_Region> Juerd - both I and particle are extremely slow

[15:24] <Limbic_Region> behind a nat'd firewall so will take a sec to get my IP

[15:25] <audreyt> gaal: however, if you do want to be polymorphic, the one line fix is:

[15:25] <audreyt> type PrettyPrinter = (forall a. Pretty a => a -> String)

[15:26] <audreyt> the explicit foralls will guard the "a" from escaping toward universal quantification.

[15:26] <audreyt> er, nvm, it needs to be a newtype.

[15:30] <svnbot6> r13116 | agentz++ | [t/closure_traits/enter_leave.t]

[15:30] <svnbot6> r13116 | agentz++ | - added this new test file to test ENTER and LEAVE blocks

[15:30] <svnbot6> r13116 | agentz++ | Status:

[15:30] <svnbot6> r13116 | agentz++ | all tests are failing now.

[15:31] <audreyt> gaal: I'll commit your .guts patch

[15:32] <audreyt> gaal: as you can see, the fix is simply to invent a newtype to put existential quantified functions into it.

[15:33] <Limbic_Region> Juerd - email sent

[15:33] <svnbot6> r13117 | audreyt++ | * Commit the .guts patch from gaal++ to ease debugging.

[15:33] <svnbot6> r13117 | audreyt++ |   Not meant to be tested or made into public interface!

[15:34] <Juerd> OrgName:    Computer Sciences Corporation

[15:34] <Juerd> Sound familiar?

[15:34] <Limbic_Region> Juerd - my IP you mean?  I can't really discuss it

[15:34] <Limbic_Region> but I verified it 3 different ways so I am sure that is it

[15:35] <Juerd> Nah, this is jerry's last hop.

[15:35] <Juerd> Limbic_Region: Is leeching from other dutch sites fast?

[15:35] <Juerd> For example speedtest.zylon.net/100mb.bin

[15:35] <Juerd> Or proserve.nl/100mb.bin

[15:36] <Juerd> Both traceroutes end in too-firewalled-to-be-useful networks

[15:36] <Juerd> But until reaching those networks, speeds are okay.

[15:36] *** spinclad joined
[15:36] <Limbic_Region> let me check

[15:36] *** NamelessOne left
[15:37] *** Revision17 joined
[15:37] <Juerd> I can leech at 80 Mb/s from feather, from another datacentre.

[15:38] <Limbic_Region> Juerd - it is slow but not nearly as slow as feather - probably around 20kbs

[15:38] <Limbic_Region> though it is steadily climbing

[15:39] <Limbic_Region> the 8kbs for feather was average over the entire 54mb I downloaded

[15:39] <Limbic_Region> having downloaded 4mb or so from zylon.net - I am at around 30kbs

[15:41] <Juerd> Limbic_Region: Sorry, it is a local thing for you then.

[15:41] <svnbot6> r13118 | agentz++ | [t/closure_traits/enter_leave.t]

[15:41] <svnbot6> r13118 | agentz++ | - added many more tests for explicit return and leave.

[15:41] * Limbic_Region smiles as he is about to build Pugs from ghc 6.6 rc (2006-09-06 built directly from source)

[15:41] <Juerd> Perhaps you're both indirectly connected to the same backend.

[15:41] <Limbic_Region> well, that must be most of the US then

[15:42] <audreyt> ?eval vv 1

[15:42] *** evalbot_r13106 is now known as evalbot_r13117

[15:42] <evalbot_r13117> CCall "perl" CaptMeth {c_invocant = VPure (IFinite 1), c_feeds = [MkFeed {f_positionals = [], f_nameds = {}}]}

[15:42] * Limbic_Region heads out for lunch but thanks Juerd for investigating first

[15:44] <nothingmuch> mooooooooo

[15:44] * nothingmuch takes a nap

[15:44] <nothingmuch> audreyt: want to see an AG runtime with no prettiness?

[15:44] <nothingmuch> i'd like comments if you have the cylces, but very low prio

[15:47] <rodi> In reading S06, I came across the syntax `proto sub foo {...}`, which appears not to be valid in pugs... in t/blocks/multi_sub.t, there is alternative syntax: `proto mmd`, which works- is one of these now invalid?  Should I add a test for the former?

[15:48] <rodi> (mmd being the sub name in the latter)

[15:48] <audreyt> nothingmuch: tomorrow definitely. mail me some urls and/or hivemind me?

[15:48] <nothingmuch> naaah

[15:48] <nothingmuch> it'll be something/somewhere else by then

[15:49] <agentzh> audreyt: could you fix the mysterious parsefail in t/closure_traits/keep_undo.t for me? it's very annoying.

[15:50] <agentzh> it's related to UNDO, i guess.

[15:51] <audreyt> rodi: please grep for a test

[15:51] <pasteling> "agentzh" at 210.22.200.67 pasted "Win32 build failure" (11 lines, 461B) at http://sial.org/pbot/19543

[15:51] <audreyt> and if not there then write one

[15:52] <rodi> audreyt: already did, which is how I found t/blocks/multi_sub.t

[15:52] <rodi> cool.

[15:53] <integral> audreyt: theory's asking for someone to remove his ban in here

[15:54] <agentzh> audreyt: please look at the build failure paste.

[15:54] <agentzh> not sure if i should run realclean.

[15:55] *** ChanServ sets mode: -b justatheory!n=justathe@dsl093-038-250.pdx1.dsl.speakeasy.net!##unavailable

[15:55] <audreyt> did so.

[15:55] <audreyt> agentzh: don't; fixed

[15:55] <agentzh> oops! too late...

[15:55] <agentzh> ;-)

[15:56] <agentzh> audreyt: i was caught by another problem while running `perl Makefile.PL':

[15:57] <svnbot6> r13119 | audreyt++ | * Parse for "proto sub foo {...}" as noticed by rodi++.

[15:57] <svnbot6> r13120 | audreyt++ | * (minor) Further refine the prelude loading communication via env vars.

[15:57] <agentzh> *** ActivePerl 5.8.7 and below does not support Perl 5 embedding.

[15:57] <agentzh> audreyt: must i upgrade my activeperl?

[15:57] <rodi> LOL

[15:58] <rodi> I haven't even finished my tests, svnbot6!

[15:58] <audreyt> agentzh: it's recommended, yeah

[15:58] <agentzh> okay, that will be a long night then. :)

[15:59] *** hcchien joined
[15:59] <svnbot6> r13121 | audreyt++ | * Attempt to unbreak 6.4.1.

[16:00] *** justatheory joined
[16:00] <justatheory> Sorry for all the noise from my stupid PowerBook falling asleep and waking all night the other night.

[16:00] <rodi> Am I to infer from L<S06/"Routine modifiers"> that proto is also allowed as a modifier to any(<sub method submethod regex token rule macro>) ?

[16:01] <audreyt> that would be a correct inference.

[16:01] <rodi> coolio.

[16:02] <agentzh> rodi: or even L<S06/Routine modifiers/Prototypes> :)

[16:02] <rodi> :)

[16:03] <agentzh> i didn't upgrade to 5.8.8 when it was released due to the Module::Install problem.

[16:04] *** weinig is now known as weinig|bbl

[16:04] <agentzh> i think now it's vanished already.

[16:04] <[particle]> agentzh: i just upgraded to AS 5.8.8b817

[16:04] <[particle]> is there something i should look for?

[16:04] <agentzh> particle: good to learn. :)

[16:05] <[particle]> btw my pugs build failed :(

[16:05] <agentzh> particle: some old modules using old Module::Install couldn't compile at ActivePerl 5.8.8.

[16:06] <[particle]> ah

[16:06] <[particle]> well, if there's a specific one, i can try it

[16:06] <pasteling> "[particle]" at 144.81.84.199 pasted "failing win32 pugs build" (213 lines, 10.7K) at http://sial.org/pbot/19544

[16:06] <[particle]> looks like pugs is getting confused with gcc / msvc

[16:06] <agentzh> particle: i didn't remember. sorry.

[16:07] <[particle]> np

[16:07] *** penk joined
[16:08] *** bernhard joined
[16:08] <[particle]> er, wait.

[16:08] <agentzh> particle: it's not failing.

[16:08] <[particle]> i think  pugs built, those are not errors, just warnings

[16:08] <[particle]> duh

[16:08] <agentzh> lol

[16:08] <[particle]> how long for make test?

[16:09] <agentzh> 8 min for audreyt

[16:09] <[particle]> k. started at :08, i'll check it in a few mins

[16:10] * agentzh thinks particle has a shinny configuration for pugs...activeperl 5.8.8, ghc 6.5...

[16:11] <[particle]> yep!

[16:11] <agentzh> *shining

[16:11] <agentzh> :)

[16:11] <[particle]> of course, i need to install half of cpan now for my other progs

[16:12] <justatheory> Ooh, audreyt, you're here!

[16:12] <svnbot6> r13122 | rodi++ | Sanity checks for use of proto modifier.

[16:12] *** Psyche^ joined
[16:12] <agentzh> particle: that's the sad part. :)

[16:13] <[particle]> why is 'nmake test' after 'nmake fast' building pugs ?

[16:13] <svnbot6> r13123 | agentz++ | [t/closure_traits/keep_undo.t]

[16:13] <svnbot6> r13123 | agentz++ | - more tests for multiple KEEP/UNDO blocks

[16:13] <agentzh> particle: you mean the judy compilation?

[16:14] <[particle]> i'm not sure

[16:14] <audreyt> [particle]: it always relinks pugs

[16:14] <audreyt> which should be fast

[16:14] <[particle]> this is not fast, 6min so far

[16:15] <agentzh> i'm planning to offer a Makefile for judy, which can save much time.

[16:15] <pasteling> "[particle]" at 144.81.84.199 pasted "what does this mean?" (444 lines, 23.3K) at http://sial.org/pbot/19545

[16:16] <agentzh> oh, it "nmake" normally

[16:16] <agentzh> maybe the "test" target should depend on "fast"?

[16:16] <agentzh> the default target is very time consuming.

[16:17] *** dada joined
[16:17] <audreyt> once we depend on 6.6, yes, sure :)

[16:17] <dada> hello world

[16:17] <agentzh> hello dada

[16:17] <[particle]> so, i can't test an unoptimized pugs? or just need to run prove instead of 'make test'

[16:18] <dada> quick question: is "has $.attr = 100;" supported yet? (that is, assigning a default value to an attribute)

[16:18] * agentzh just can't remember the last time he ran 'nmake test'.

[16:18] <dakkar> dada: try and see what happens? ;-)

[16:18] <dada> another quick question: it seems that all attributes are rw by default, and they shouldn't. am I right?

[16:18] <dada> dakkar: unexpected "=" happens :-)

[16:18] <audreyt> dada: it is not; workaround is to have a submethod BUILD ($.attr = 100)

[16:19] <audreyt> dada: you are correct; the object model is currently nonexisting; a new one will be swapped in right after reelase.

[16:19] <dada> I see

[16:19] <dada> maybe throwing in a test or two for such things would help, however

[16:19] <audreyt> currently the object model is same as perl5's, basically

[16:19] <audreyt> tagged hash and such

[16:19] <audreyt> it will help, but I think those two are tested under t/oo/. if not, please commit

[16:20] <audreyt> (do you have a commit bit?)

[16:20] <dada> the tests mentioned in the synopsis don't cover this

[16:20] <dada> I had it, I don't know if it's expired

[16:20] <audreyt> then it's missing smartlinks

[16:20] <audreyt> commit bits, once accepted, does not expire

[16:20] <agentzh> dada: we don't have sufficient smartlinks. ;-)

[16:20] <justatheory> audreyt: Did you see my post about evil operator overloading on p5p?

[16:20] <audreyt> please by all means populate t/oo/ with smartlinks

[16:20] <dada> ok, I will hunt down the tests then :-)

[16:20] <audreyt> very important for 6.28.x

[16:21] * agentzh asks audreyt when the next release will be.

[16:22] <agentzh> pugs release == test suite triage

[16:24] *** Psyche^ is now known as Patterner

[16:24] <audreyt> agentzh: if it were not the macbook crash, it should be now

[16:25] <[particle]> $ sobby

[16:25] <[particle]> Address family not supported

[16:25] <agentzh> ohhhhhh

[16:25] <audreyt> with the crash, I'll releng over the next few days

[16:25] <agentzh> macbook-- macbook-- macbook--

[16:25] <audreyt> and aim for a release next weekend

[16:25] <[particle]> that was on feather... anyone have any idea what that message means?

[16:25] <audreyt> no, audreyt-- for dropping her macbook and breaking it.

[16:25] *** penk left
[16:25] <[particle]> (macbook in shower)--

[16:25] <agentzh> LOL

[16:26] <audreyt> that too.

[16:27] <agentzh> audreyt: so on Windows, pugs now requires ActivePerl 5.8.8?

[16:27] <agentzh> i think it's a bit unacceptable for most win32 users.

[16:27] <agentzh> 5.8.8 is the latest version, you know. ;-)

[16:28] <audreyt> agentzh: no, it requires 5.8.8 for perl5 embedding

[16:28] <audreyt> which is enabled by default

[16:29] <audreyt> but yeah, it's sad. but between that and not emabling perl5 embed

[16:29] <audreyt> I think I want perl5 embed.

[16:29] <agentzh> audreyt: i see. :)

[16:29] <dada> I don't think it's a big problem

[16:29] <agentzh> indeed, perl 5 embedding is very useful.

[16:29] *** Eimi joined
[16:29] <dada> dumb and lazy win32 users are not going to use pugs anyway

[16:30] <dada> and installing ActivePerl 5.8.8 isn't that hard

[16:30] <agentzh> dada: but installing half of the cpan *is*

[16:30] <audreyt> er, you can upgrade activeperl without reinstalling half of cpan

[16:30] <audreyt> 5.8.x is binary compatible

[16:30] <dada> at least if you already have 5.8.something

[16:30] <agentzh> audreyt: details?

[16:30] <audreyt> (except for 5.8.1 which I prefer to conveniently forget)

[16:31] <dada> and if you have 5.6.something, you're really _too_ lazt

[16:31] <dada> lazy

[16:31] <agentzh> by coping over lib/ and site/?

[16:31] <audreyt> agentzh: simply install activeperl on top of an existing installation

[16:31] <audreyt> without uninstalling the old

[16:31] <audreyt> that's all I think

[16:31] <dada> it is

[16:31] <audreyt> copying over site/ would work too.

[16:31] <agentzh> auderyt: oh, thanks!

[16:31] <audreyt> :)

[16:34] <[particle]> what's expected passing rate for pugs tests?

[16:34] <[particle]> i see *a lot* of failures

[16:35] <audreyt> about 500ish failures at this moment I think

[16:37] <[particle]> audreyt: are you running 9m test on osx or win?

[16:37] <audreyt> osx parallel=2

[16:38] <audreyt> if you "make fast" the test is going to take longer.

[16:38] <[particle]> ok. i wonder because i find win tests take much longer, since creating processes on windows is expensive

[16:38] <[particle]> also, because i make fast.

[16:38] <[particle]> i'll have a look in another 20mins then :)

[16:41] <audreyt> justatheory: yes, I did. unfortunately I don't have much to contrib

[16:41] <audreyt> except that | and & looks more attractive than && and || indeed

[16:41] <audreyt> (bbiab)

[16:41] <justatheory> audreyt: Bummer. You're the mistress of the overloading tricks!

[16:42] <justatheory> audreyt: I'm fine with & and |, but now I want to overload =~ and !~.

[16:52] <audreyt> that is trickier; though perl5/re-override* in pugs tree shows how.

[16:52] <audreyt> but at some point you should give up and do it via Module::Compile or Filter::Simple::Cached :)

[16:54] <agentzh> audreyt: while running "nmake", i got "Undefined subroutine &main::UpdateHTML_blib called at -e line 1."

[16:55] <justatheory> audreyt: I don't know those modules; I'll have to take a look. Thanks.

[16:55] <agentzh> audreyt: now i'm at 5.8.8.

[16:55] <audreyt> agentzh: nopaste the whole log?

[16:55] <audreyt> or the parts around it, maybe

[16:55] <agentzh> audreyt: okay

[16:56] <pasteling> "agentzh" at 210.22.200.67 pasted ""nmake" failure" (93 lines, 3.4K) at http://sial.org/pbot/19546

[16:58] *** fglock_ joined
[16:59] <agentzh> audreyt: fyi, "nmake fast" works fine and i've built pugs already. unfortunately, "nmake install" and "nmake" don't work.

[16:59] <audreyt> nopaste your Makefile?

[16:59] <agentzh> not sure if it's a 5.8.8 on 5.8.7 problem. ;-)

[16:59] <agentzh> audreyt: okay

[17:00] <agentzh> audreyt: it's huge.

[17:00] <agentzh> :)

[17:00] <pasteling> "agentzh" at 210.22.200.67 pasted "my Makefile" (1875 lines, 126K) at http://sial.org/pbot/19547

[17:05] <agentzh> audreyt: sorry, i can't hold on any more. 1:02 AM here...i've got an exam the next morning (well, actually *this* morning). :)

[17:06] <agentzh> good night &

[17:06] *** agentzh left
[17:09] <dada> bye people

[17:13] <[particle]> okay, make test finished

[17:13] <audreyt> fixed.

[17:13] <svnbot6> r13124 | audreyt++ | * defeat htmlifypods as it broke build for agentzh++.

[17:13] <[particle]> 17 tests and 1157 subtests skipped.

[17:13] <[particle]> Failed 107/578 test scripts, 81.49% okay. 388/9095 subtests failed, 95.73% okay.

[17:16] <audreyt> cool

[17:16] <audreyt> how long did it take?

[17:18] *** araujo joined
[17:18] <TreyHarris> audreyt: do you agree with Limbic_Region that my 300+m smokes on darwin-ppc (1.5 GHz G4) indicates something is wrong with my installation?

[17:18] <TreyHarris> audreyt: glad you enjoyed my story, btw :-)

[17:18] <[particle]> took ~60mins

[17:19] <TreyHarris> well, the one last night was "only" 231 minutes....

[17:20] <TreyHarris> is the smokeserver working?

[17:20] <TreyHarris> ah, spoke too soon

[17:20] *** rindolf joined
[17:21] <rindolf> In Moose, how do I set an 'ro' attribute?

[17:21] <rindolf> Assuming I can.

[17:24] <[particle]> rindolf: C<<writer => '_ro'>> and C<sub _ro{die "cannot set read-only attribute"} # wild guess

[17:25] <audreyt> TreyHarris: GHC 6.4 or 6.6?

[17:25] <audreyt> rindolf: if you don't say "is rw" it defaults to ro, no?

[17:25] *** mauke_ joined
[17:26] <TreyHarris> 6.4.  I'm willing to try 6.6 if anyone can give me a roadmap to get it built on darwin-ppc, but on #haskell they said that's still a work-in-progress

[17:26] <audreyt> nod. don't worry about it for now, I guess

[17:27] <audreyt> I don't think anything's wrong with installation

[17:27] <[particle]> rindolf: sorry, i was looking at the Moose::Meta::Attribute docs

[17:27] <TreyHarris> audreyt: ok, thanks :-)

[17:27] <audreyt> GHC is known to be less optimized for ppc than for x86; 6.6 should remedy this  somewhat for pugs

[17:27] <audreyt> but it's nothing to worry about :)

[17:28] <audreyt> ...and now I need to sleep

[17:28] <audreyt> good night and see y'all tomorrow *wave*

[17:28] <TreyHarris> sweet dreams :-)

[17:28] <[particle]> eew, make is really broken on win32

[17:28] <[particle]> but make fast works fine

[17:29] <audreyt> pasteling: even with r13271?

[17:29] <audreyt> and reran Makefile.PL?

[17:29] <audreyt> s/pasteling/[particle]/

[17:29] <[particle]> i'm at 13124

[17:29] <audreyt> I mean 13124 sorry

[17:29] <[particle]> k

[17:29] <[particle]> i don't see a Makefile.pl update there

[17:29] <[particle]> but i reran it

[17:30] <audreyt> and it still fails?

[17:30] * TreyHarris was wondering how audreyt expected [particle] to run a revision that probably won't exist until Sunday ;-)

[17:30] <[particle]> yse, pasting

[17:30] <pasteling> "[particle]" at 144.81.84.199 pasted "fail" (174 lines, 6.7K) at http://sial.org/pbot/19549

[17:32] <audreyt> what's wrong with that?

[17:32] <[particle]> nmake -f Makefile all -nologo

[17:32] <audreyt> it's a finite loop with 45 iterations

[17:32] <[particle]> huh? why?

[17:32] <audreyt> one for each in ext/

[17:32] <audreyt> it's the subdirs target

[17:33] <[particle]> oh, that's entirely unobvious

[17:33] <[particle]> i'll let it iterate

[17:33] <audreyt> I'd say it is. please see if you can somehow make it more obvious

[17:33] <audreyt> either by prompting or by saying don't panick

[17:33] <audreyt> or something like that

[17:33] <[particle]> k

[17:33] <audreyt> but I can't stay up anymore :)

[17:33] <audreyt> *wave*

[17:33] <[particle]> go away! audreyt++

[17:40] *** mauke_ is now known as mauke

[17:42] *** Limbic_Region joined
[17:42] *** elmex joined
[17:42] <Limbic_Region> grrr

[17:42] <TreyHarris> Limbic_Region: audreyt just confirmed that my installation isn't broken, that GHC 6.4 on PPC is really really slow :-)

[17:43] <TreyHarris> what's wrong?

[17:43] <Limbic_Region> my client just went fubar

[17:43] <TreyHarris>  ACTION CTCP Limbic_Region TICKLE_CLIENT

[17:43] <TreyHarris> did that help? :-)

[17:44] <Limbic_Region> [particle] - the problem that agentz was referring to with AS and Module::Build is the one I was telling you about regarding MinGW - it should not affect you

[17:44] <Limbic_Region> yes TreyHarris - thanks

[17:44] <Limbic_Region> for those using build 817 (5.8.8) and are using MinGW - either upgrade or ping me for the patch to make Module::Build work again

[17:45] * Limbic_Region continues to backlog

[17:46] <Limbic_Region> [particle] - hopefully our project with util/yaml_harness.pl will help improve make test/smoke on Win32 at least

[17:47] <Limbic_Region> 5.8.8 may be the latest version but how long has it been out - it isn't like it is exactly new or anything

[17:49] <Limbic_Region> TreyHarris - you didn't mention your intermitten bus failures to audreyt though when you asked about the speed issues

[17:49] * Limbic_Region factored that into his assessment

[17:50] <Limbic_Region> [particle] - make works fine for me on Win32 as I never run make fast (assuming we are talking about nmake here)

[17:50] <Limbic_Region> ok, all finished backlogging

[17:50] <Limbic_Region> [particle] - if you /msg'd me anything I lost it when this clients went toes up

[17:56] *** Eimi joined
[18:04] *** bradleym joined
[18:06] *** bradleym is now known as bradleym|meet

[18:13] <TreyHarris> Limbic_Region: ah, good point.  she was heading to bed so I was trying to make it brief, but you're right

[18:14] <Limbic_Region> in any case, have you tried setting the number of concurrent tests?

[18:14] <TreyHarris> Limbic_Region: I don't have an SMP

[18:14] <TreyHarris> or even a dual-core

[18:15] * Limbic_Region shakes his head

[18:15] <Limbic_Region> if your single CPU is not at 100% utilization, running things in parallel is likely to still be faster than in serial

[18:15] <Limbic_Region> despite it being done via time slicing

[18:15] <TreyHarris> oh, no, it's at 100% pegged

[18:16] <Limbic_Region> oh, well then - concurrent tests won't help regardless

[18:16] <TreyHarris> the entire 4 hours

[18:16] <TreyHarris> :-)

[18:16] <Limbic_Region> my machine stays under 10% for the full smoke (30 minutes or less)

[18:16] <TreyHarris> i could speed it up if i shut everything else on my system down.  it is my main machine after all.  but i'm usually not using it much

[18:17] <TreyHarris> ah.  even "my $x = 3; say $x" pugs the CPU for a moment

[18:17] <TreyHarris> er, s/pugs/pegs/

[18:17] <TreyHarris> pugs pegs the CPU :-)

[18:17] <Limbic_Region> so those no op spin cycles while it is waiting to hear back from my program could be used to do work for another program

[18:20] *** mugwump joined
[18:23] *** hexmode joined
[18:24] *** hexmode joined
[18:38] *** xerox joined
[18:42] *** gilimanjaro joined
[19:03] *** hexmode joined
[19:23] *** jferrero joined
[19:52] *** hexmode joined
[20:08] <rindolf> audreyt: here?

[20:10] <Limbic_Region> she's supposed to be sleeping

[20:18] <[particle]> lr: i'm back!

[20:20] <svnbot6> r13125 | fglock++ | Pugs-Compiler-Rule - implemented $<KEY>

[20:23] *** weinig|bbl is now known as weinig

[20:28] <Limbic_Region> [particle] - I just wanted to know if you had done anything on the util/yaml_harness.pl

[20:28] <Limbic_Region> get you to /msg me your email again (client barfed)

[20:28] <Limbic_Region> and ask what your make problem was

[20:28] <Limbic_Region> since I am building fine here without make fast

[20:30] <svnbot6> r13126 | fglock++ | Pugs-Compiler-Rule - ChangeLog update

[20:31] <[particle]> haven't touched it today (production issue)

[20:33] <Limbic_Region> no worries

[20:33] <[particle]> i think i had a rogue ghc.exe process locking a file

[20:33] <[particle]> making again to see if that fixed it

[20:33] <Limbic_Region> I was so enjoying the YAHT that I didn't notice the time

[20:34] <Limbic_Region> it is officially 3 minutes into the weekend for me so I am headed homewards

[20:34] <Limbic_Region> will send test email in a minute - no need to reply

[20:36] <svnbot6> r13127 | fglock++ | Pugs-Compiler-Rule - ChangeLog update

[20:36] *** davidfetter joined
[20:49] <rodi> any other Perl 6 people live/visit in the Washington, DC, USA area?

[20:49] <rodi> err... #perl6 people :)

[20:53] *** larsen joined
[21:04] *** theorb joined
[21:05] *** vel joined
[21:17] *** Limbic_Region joined
[21:22] *** markstos joined
[21:23] *** fglock_ left
[22:02] *** davidfetter left
[22:20] *** Termy joined
[22:20] *** thepler joined
[22:37] <gaal> audreyt: thanks for the fix. I'm not sure I understand why this works yet...

[22:37] *** weinig is now known as weinig|bbl

[22:37] <gaal> also, how to write the printers for the non-concrete Val variants?

[22:38] <gaal> the two problems are that they are all monadic, and that they are existential.

[22:38] <gaal> PureVal can maybe cheat and runIdentity...

[22:39] <gaal> and the unpacking could maybe case over typeOf but I wonder if there's a more efficient way?

[22:40] <gaal> ...maybe there needs to be another pretty printer in Eval?

[22:41] <gaal> anymoose it's night time for me. bye! &

[23:06] *** Aankhen`` joined
[23:11] *** Aankhen`` is now known as Moose``

[23:25] *** jferrero joined
[23:33] *** justatheory joined
[23:41] *** penk joined
[23:41] <markstos> I was just reading about Prelude.pm ( http://pugs.kwiki.org/?PreludificationCandidates ) and want to make sure I understand the purpose. I suspect they are primarily: 1. To write some of Perl 6 in Perl 6, and 2. To help support multiple implementations, since anything in Prelude.pm can be used by any implementation. Correct assumptions?

[23:41] <lambdabot> Title: PreludificationCandidates - Pugs - A Perl 6 Implementation, http://tinyurl.com/gaqv8

[23:42] <clkao> yes

[23:43] <markstos> Thanks. I'll update the wiki (.../some wiki/) to clarify this.

[23:44] <markstos> I didn't realize until today that any of core Perl 6 was written in Perl 6, although I'd heard of "Prelude.pm" before, I just assumed it was "different". I know "Prelude" is a term used in the Haskell world, but not so much in Perl culture.

[23:44] <markstos> So I had assumed Prelude==somehowHaskell.

[23:44] <nothingmuch> markstos: the meaning is borrowed

[23:45] <nothingmuch> it's the part that is before every program =)

[23:45] <nothingmuch> good night folks

[23:45] <Limbic_Region> TTFN nothingmuch

[23:48] *** NamelessOne joined
[23:57] <[particle]> markstos: parrot also uses something like this. PGE rules are written in perl 6 regex syntax

[23:57] <markstos> Neat.

[23:57] <[particle]> so the parrot perl6 parser is written as a perl 6 grammar

[23:57] <TreyHarris> one point that I'd appreciate more clarity on: audrey suggested to me that earnest efforts to implement large swaths of S29 should be done in separate, class-based files ("e.g., src/Num.pm" was what she said).  i don't understand how Prelude fits together with such other peices

[23:58] <TreyHarris> would Prelude use the others?  would we have a 'Core.pm' that would use the others, but only Prelude would be used by default?

[23:59] <markstos> TreyHarris: Have you fond this page? It lists candidates for preludification.

[23:59] <markstos> http://pugs.kwiki.org/?PreludificationCandidates

[23:59] <lambdabot> Title: PreludificationCandidates - Pugs - A Perl 6 Implementation, http://tinyurl.com/gaqv8

[23:59] <TreyHarris> i know the overall intention is for base Perl 6 to be much smaller than core Perl 5

