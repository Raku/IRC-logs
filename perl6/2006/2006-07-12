[00:02] <vsoni> seen audreyt

[00:02] <jabbot> vsoni: audreyt was seen 4 hours 56 minutes 48 seconds ago

[00:07] *** justatheory joined
[00:10] *** FurnaceBoy_ joined
[00:12] *** macroron joined
[00:13] *** SamB joined
[00:22] *** qu1j0t3 joined
[00:23] *** frederico joined
[00:31] *** qu1j0t3 is now known as FurnaceBoy

[00:38] *** miyagawa joined
[01:11] <mugwump> audreyt, TimToady, @Larry: if you define a class and a role with the same name, what happens?

[01:11] <mugwump> by design, I mean

[01:20] *** marksto1 joined
[01:31] *** hcarty left
[01:34] <merlyn> what's the name of the Module::Compiler thingy that works like filter?

[01:38] <Steve_p> Module::Compile?

[01:39] * Steve_p isn't sure

[01:39] <merlyn> Yeah, the v6 thingy

[01:39] <merlyn> I remember seeing a second distro that was like Filter::Simple was to Filter

[01:39] *** enantiodrome joined
[01:39] <Steve_p> Hmmm

[01:42] <mugwump> http://search.cpan.org/dist/Module-Compile/ is it

[01:42] <lambdabot> Title: "Ingy d&#246;t Net / Module-Compile - search.cpan.org"

[01:42] <merlyn> right, but there was another module released nearby

[01:42] <merlyn> perhaps from audreyt?

[01:43] <merlyn> nope, I guess not

[01:44] <marksto1> Filter::Simple::Compile

[01:44] *** marksto1 is now known as markstos_

[01:44] <merlyn> that' it!

[01:44] <markstos_> I haven't used it, but I remembered that it existed.

[01:47] <TreyHarris> I thought you were talking about Inline::Module

[01:47] <merlyn> nope

[01:47] <merlyn> oh, but that's interesting too

[02:40] <audreyt> suddenly, http://perl6now.com/ becomes very relevant.

[02:40] <lambdabot> Title: "Perl 6 Now"

[02:41] <audreyt> as does http://search.cpan.org/~swalters/ and http://search.cpan.org/~abergman/ and http://search.cpan.org/~chocolate/ .

[02:41] <lambdabot> Title: "Scott Walters - search.cpan.org"

[02:48] <ingy> bleh

[02:48] <ingy> bring me your tired and weary

[02:48] <ingy> and I will call them Ingy

[02:49] <stevan> do we get umlauts as well?

[02:49] <ingy> stevan!

[02:49] <stevan> ingy!

[02:49] <nothingmuch> stevan!

[02:49] <ingy> that used up all my remaining energy

[02:50] <ingy> noth...!in.,,

[02:50] <ingy> bleh

[02:52] * stevan refills nothingmuch's ritalin drip

[02:53] <stevan> actually I think ingy needs it more

[02:53] <nothingmuch> more ritalin tomorrow

[02:53] <ingy> huh, there's an idea

[02:54] <ingy> I wonder if a gram of ritalin would kill you

[02:54] <stevan> I am getting sleepy listening to nothingmuch yawn all the time

[02:54] <obra> heh

[02:54] <stevan> ingy: ever meet an old meth addict?

[02:54] *** amnesiac joined
[02:54] <ingy> where is nuffin?

[02:54] <ingy> stevan: no

[02:55] <stevan> ingy: yeah, they tend to not last very long,.. very ugly drug,.. which is the same base as ritalin

[02:55] <stevan> although to be honest,.. alot of times it is the crap meth is cut with which does the most damage

[02:55] <stevan> ingy: nothingmuch is in my basement

[02:56] <ingy> jealous

[02:56] <obra> _I_ kept hime above ground

[02:56] <ingy> for how long?

[02:56] <stevan> and if you want him back,.. you need to leave a suitcase of small unmarked bills at the phonebooth around the corner

[02:56] <stevan> obra: its much cooler in the basement,.. damn humidity

[02:56] <ingy> how about a gram of ritalin?

[02:56] <stevan> ingy: probably kill you

[02:57] <stevan> explode your heart and such

[02:57] <ingy> no, I mean for nuffin

[02:57] <vsoni> audreyt: hi

[02:57] <nothingmuch> .oO( i wonder what ann's going to think of all this )

[02:57] <stevan> no,.. I need him alive

[02:57] <stevan> if my plan is to succeed ... muhahahahaha

[02:57] <audreyt> vsoni: greetings

[02:57] <nothingmuch> audreyt: also ping

[02:57] <ingy> nothingmuch: ann is behind all of this

[02:57] <nothingmuch> audreyt: can i have permission to hack $YAML::Syck::SortKeys = sub { }

[02:57] <nothingmuch> oh

[02:58] <audreyt> yes you may.

[02:58] <vsoni> audreyt: Has a big debate about :immediate............again :)

[02:58] <nothingmuch> in that case i'm not sure what i'm going to think of her

[02:58] <audreyt> permission is implicit

[02:58] <audreyt> vsoni: yeah. seems chip+allison are reserving it "for unknown future use"

[02:58] <nothingmuch> audreyt: also, how do i make it pack more nicely when it dumps?

[02:58] <audreyt> vsoni: so I think maybe hack in .loadlib?

[02:58] <audreyt> vsoni: and leave :immediate alone without special handler

[02:58] <audreyt> after all, with .loadlib, nobody in the current language/ tree has a reason to use :immediate

[02:58] <audreyt> so we can just let it bitrot.

[02:59] <pasteling> "nothingmuch" at 71.234.68.135 pasted "YAML prettier than YAML::Syck" (26 lines, 607B) at http://sial.org/pbot/18337

[02:59] <ingy> obra: are you in town for wikimania?

[02:59] <nothingmuch> audreyt: the nopaste explains what I meant

[02:59] <obra> ingy: where/when?

[02:59] <audreyt> i.e. ".loadlib 'foo'" just sugar for ".sub anon :immediate ; loadlib 'foo' ; .end"

[02:59] <vsoni> audreyt: what needs to happen in loadlib

[02:59] <audreyt> vsoni: see the desugaring above

[02:59] <ingy> obra: see google for details

[02:59] <audreyt> vsoni: grep -r :immediate languages

[02:59] <PerlJam> audreyt: Isn't the second arg to .HLL something like what you would send to .loadlib?  WHy not just make it N optional args?

[02:59] <audreyt> vsoni: it gives you all the current use cases

[02:59] <nothingmuch> obra: it's next to you

[02:59] <nothingmuch> ini august

[03:00] <audreyt> PerlJam: sure, that works too, one-at-a-line works too

[03:00] <ingy> Cambridge Aug 4-6

[03:00] <nothingmuch> next to you == walking distance

[03:00] <obra> http://wikimania2006.wikimedia.org/wiki/Main_Page comes up blank here :(

[03:00] <audreyt> the analogy is that we have people writing BEGIN{require} over and over again

[03:00] <obra> but cool.

[03:00] <obra> yeah. I should be here

[03:00] <audreyt> and we want to introduce "use"

[03:00] <audreyt> and "use" is one per line

[03:00] <audreyt> but I'm fine either way

[03:00] *** markstos_ left
[03:01] <PerlJam> audreyt: all of the uses look like it's used approximately once per compilation unit.

[03:01] <nothingmuch> is why generally on freenode?

[03:01] <audreyt> PerlJam: yeah, so one-per-line.

[03:01] <vsoni> audreyt: will look into that

[03:02] <audreyt> PerlJam: my argument was really just "use" doesn't deserve "BEGIN{rm-rf}", but if it's reserved for future purpose, I can just advice sandboxing on it, and the rest is up to @allison

[03:02] <vsoni> audryet: or will take care of it my rewrite      ;D)

[03:02] <audreyt> vsoni: cool, yay :D

[03:02] <audreyt> vsoni++

[03:02] <vsoni> audreyt: I am just kidding...I need to run it by Allison and Chip

[03:03] <audreyt> vsoni: they both said okay for .loadlib

[03:03] <vsoni> audreyt: ok

[03:03] <audreyt> on the RT ticket

[03:03] <audreyt> so that's a go-ahead

[03:03] <PerlJam> vsoni: Have I mentioned to you before that you should have "ack" installed?

[03:03] <vsoni> ParlJam whats ack

[03:03] <PerlJam> vsoni: it's a smarter grep.

[03:04] <vsoni> PerlJam where could i get it

[03:04] <nothingmuch> cpan

[03:04] <audreyt> cpan

[03:04] <nothingmuch> install App::Aclk

[03:04] <PerlJam> vsoni: for instance,  ack --parrot :immediate  will tell you all of the instances of :immediate in any parrot source files beneath the current dir.

[03:04] <nothingmuch> tr/l/d

[03:04] <PerlJam> vsoni: as nothingmuch is trying to say ... install App::Ack  :-)

[03:05] <vsoni> PerlJam: Its installing...thanx

[03:05] <svnbot6> r11465 | Ivan_A_Frey++ | M    TASKS

[03:05] <nothingmuch> audreyt: did you look at the nopaste?

[03:07] *** sanug joined
[03:07] <audreyt> nothingmuch: yes, saw that

[03:07] <nothingmuch> do you know how i could fix it?

[03:07] <audreyt> very carefully

[03:07] <nothingmuch> boilerplate

[03:08] <SamB> boil your boilerplate!

[03:08] <audreyt> line 574 perl_syck.h perhaps

[03:08] <audreyt> not sure

[03:08] <audreyt> you want to ask why? you have to ask why!

[03:08] <audreyt> ("why the lucky stiff", that is.)

[03:09] <audreyt> mm boil your scratchpads

[03:09] <nothingmuch> =)

[03:10] <nothingmuch> boil your scraps and serve on plate

[03:10] <nothingmuch> a.k.a veggie pizza

[03:10] <nothingmuch> i think you are unintentionally an eco head

[03:11] <nothingmuch> because your plates are bio degradable

[03:11] <audreyt> nothingmuch: so, you are supposed to feel a bit tired and can sleep soundly at this hour :)

[03:12] <nothingmuch> yhes

[03:12] <nothingmuch> i have been so for ~30 mins

[03:12] <nothingmuch> maybe a little more

[03:13] <audreyt> don't fight it; just sleep

[03:13] <nothingmuch> not fighting it

[03:13] <audreyt> fighting it will lead to commit-at-sleep syndrome

[03:13] <nothingmuch> i don't feel "ready" yet

[03:13] <nothingmuch> when it's time to sleep i will sleep

[03:13] <audreyt> 'k

[03:13] <nothingmuch> == soon

[03:17] <nothingmuch> meh

[03:17] <nothingmuch> syck docs few

[03:22] <nothingmuch> audreyt: should plain refs be !!perl/ref: or !!perl/ref

[03:24] <audreyt> nothingmuch: whatever YAML.pm does

[03:25] <nothingmuch> ick

[03:25] <nothingmuch> it uses trailing :

[03:25] <nothingmuch> but that's not what the pyaml wiki said

[03:26] <audreyt> ingy: purr?

[03:27] *** kanru joined
[03:27] <nothingmuch> anyway, turns out i forgot to add the test i wrote

[03:27] <nothingmuch> and once i change ref: to ref in perl_syck and ! to !! in the test it passes

[03:32] <nothingmuch> ingy: ping

[03:35] *** khisanth_ joined
[03:37] *** khisanth_ is now known as Khisanth

[03:39] *** rlb3 joined
[04:13] <nothingmuch> audreyt: i'm going to rely on my memory

[04:13] <nothingmuch> because i trust it more than ingy's

[04:14] <nothingmuch> and commit

[04:14] <nothingmuch> it's consistent with the other emissions

[04:14] <nothingmuch> !perl/array etc

[04:14] <nothingmuch> err

[04:14] <nothingmuch> the other parsings

[04:14] <audreyt> just go ahead

[04:14] <audreyt> and let ingy know

[04:14] <audreyt> I've just released Syck 0.62

[04:14] <audreyt> so trunk is safe to checkin

[04:14] <nothingmuch> of course, this is a special case because aside from !scalar which is always blessed it';s the only one that's ever emitted as a type

[04:15] <audreyt> (you broke pretty much all non-GCC compilers btw)

[04:15] <audreyt> by using statement-level instead of block-beginning declarators

[04:15] <audreyt> { expression; expression; char *x = expression; ... }

[04:15] <nothingmuch> oops ;-)

[04:15] <nothingmuch> i can only cargo cult gcc

[04:16] <audreyt> I know; I'm on the same boat. but try -Wall for once :)

[04:16] <nothingmuch> is that the good version or the bad version?

[04:16] <audreyt> you can turn -Wall on in Makefile.PL

[04:16] <nothingmuch> how do i do that?

[04:16] <nothingmuch> okay

[04:16] <audreyt> optimizer_flags

[04:16] <audreyt> anyway, I gotta sleep

[04:16] <audreyt> see ya tomorrow!

[04:16] * nothingmuch sleeps too

[04:24] *** khisanth_ joined
[04:25] *** khisanth_ is now known as Khisanth

[04:31] *** kanru joined
[04:37] *** khisanth__ joined
[04:38] *** khisanth__ is now known as Khisanth

[05:17] *** wesle1 joined
[05:32] *** weinig|coffee is now known as weinig

[05:41] *** macroron joined
[05:51] *** weinig is now known as weinigZZZ

[06:01] *** unobe_ joined
[06:13] *** r0nny joined
[06:17] *** lisppaste3 joined
[06:18] *** unobe joined
[06:39] *** LCamel joined
[06:40] *** unobe_ joined
[06:40] *** iblechbot joined
[06:41] *** masak joined
[06:43] *** rgs joined
[06:45] *** hikozaemon joined
[06:49] *** drrho joined
[06:56] *** unobe joined
[06:58] *** stephanepayrard_ joined
[07:42] *** Aankhen`` joined
[07:46] *** buetow joined
[07:49] *** cognominal joined
[07:52] *** elmex joined
[07:58] *** daxim_ joined
[08:07] *** Aankh|Clone joined
[08:11] *** evalbot_11465 joined
[08:12] *** mauke_ joined
[08:27] *** mauke_ is now known as mauke

[09:04] *** ludan joined
[09:05] *** revision17_ joined
[09:12] *** shachaf joined
[09:56] *** tup joined
[10:08] <svnbot6> r11466 | agentz++ | added myself to AUTHORS although i haven't done anything useful yet :P

[10:39] <clkao> nothingmuch: i am not seeing my diag() being captured if the test is ok

[10:41] <xerox>  /AWAY /AWAY

[10:41] <xerox> Ops.

[10:41] <Bleadof> right

[10:41] <gaal> clkao: are you going through yaml_harness?

[10:41] <gaal> clkao: if so, is it in the yaml?

[10:41] <clkao> gaal: no, i have other use of that

[10:41] <gaal> clkao: I understand

[10:42] <clkao> i am just dumping the structure from ttm

[10:42] <gaal> just trying to pinpiont the problem

[10:42] <gaal> ACK

[10:50] *** pdcawley joined
[10:53] *** nothingmuch joined
[10:54] *** ivanfrey joined
[10:57] <gaal> mugwump: I doubt you can have a role and a class with the same name, because they are both packages underlyingly, and it's the package that has a name.

[10:58] <gaal> but then, that's based on the prospective implementation, which may be wrong :)

[11:03] *** Yaakov_ joined
[11:37] *** tup joined
[11:51] <gaal> clkao: does t/comprehensive.t pass for you?

[11:52] *** Yaakov_ is now known as Yaakov

[11:54] *** chris2 joined
[12:05] <clkao> gaal: which distribution?

[12:08] *** Muixirt joined
[12:08] <xerox> pugs uses PArrows?

[12:08] *** szbalint joined
[12:29] <gaal> clkao: TTM

[12:29] <clkao> gaal: it should. let me look at it

[12:29] <clkao> because i didn't force install it

[12:30] *** buetow joined
[12:31] *** iblechbot joined
[12:36] <xerox> gaal: your licensing is nuts.

[12:37] <gaal> xerox: what license do you refer to?

[12:37] <xerox> D&R :)

[12:38] <gaal> umm.. what?

[12:38] <xerox> http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/checkout/third-party/HsSyck/syck/COPYING?rev=10175

[12:38] <gaal> ahhhh

[12:39] <gaal> that's why's stuff, we just rebundle it.

[12:40] <gaal> xerox: you do have the option of not choosing that license you know :)

[12:42] * xerox chuckles

[12:48] <gaal> audreyt: the other night I noticed we have a Show instance for (a->b). do you remember where we use it? probably just for some debugging session right?

[12:49] <gaal> (well, Typeable a, Typeable b => a -> b, of course)

[12:52] <xerox> Maybe it is like lambdabot's ShowQ.

[12:53] <gaal> xerox: demo?

[12:53] *** Odin- joined
[12:53] <xerox> What?

[12:54] <gaal> I'm not familiar with that. can you demo?

[12:54] <xerox> > chr

[12:54] <lambdabot>  <Int -> Char>

[12:55] <gaal> xerox: oh, nice, though in that case the user can just do @t

[12:55] <gaal> err, @typew

[12:55] <gaal> s/w// I can't type :(

[12:55] <xerox> ?type (+)

[12:55] <lambdabot> forall a. (Num a) => a -> a -> a

[12:55] <xerox> > (+)

[12:55] <lambdabot>  Add a type signature

[12:55] <xerox> %)

[12:55] <gaal> urp!

[12:55] <gaal> > (+) ::Int-> Int

[12:55] <lambdabot>    Expecting a function type, but found `Int'

[12:55] <lambdabot>    Expected type: Int -> I...

[12:55] <gaal> heh

[12:56] *** bpphillips joined
[12:56] <gaal> > (+) :: (Int-> Int)

[12:56] <lambdabot>    Expecting a function type, but found `Int'

[12:56] <lambdabot>    Expected type: Int -> I...

[12:56] <xerox> > id :: () -> () -- Specializing works.

[12:56] <lambdabot>  <() -> ()>

[12:56] <xerox> (+) takes two nums and returns another one.

[12:57] <gaal> xerox: no doubt it was added for some sort of runtime error message, yes, I was just curious where

[12:57] <gaal> doh, of course

[12:57] <gaal> > map

[12:57] <lambdabot>  Add a type signature

[12:57] <xerox> > (+) :: Int -> Int -> Int

[12:57] <lambdabot>  <Int -> Int -> Int>

[12:58] <xerox> > map :: (Int -> Char) -> [Int] -> [Char]

[12:58] <lambdabot>  <(Int -> Char) -> [Int] -> [Char]>

[12:58] <gaal> up to what arity was this ShowQ added?

[12:59] <gaal> > .

[12:59] <lambdabot>  Parse error

[12:59] <gaal> > (.)

[12:59] <lambdabot>  Add a type signature

[12:59] <gaal> grrr

[13:00] <gaal> anyway, it's a pity this can't handle typeclasses directly.

[13:01] <xerox> Every arity.

[13:01] <gaal> I bet there's a Good Reason why that's hard

[13:01] <xerox> map is such an example.

[13:01] <gaal> xerox: well, they could have added intsances just up to arity four or something.

[13:01] <xerox> Its type is of the form a -> b -> c.

[13:01] <gaal> how is it done for all arities?

[13:02] <xerox> Which reads a -> (b -> c), which in turn is of the form a -> d; for which there is the instance.

[13:02] <xerox> That is, because (->) is right-associative.

[13:02] <gaal> ah, yes. cool.

[13:02] <xerox> :D

[13:04] <xerox> > (>>>) :: (Arrow (~>)) => (a ~> b) -> (b ~> c) -> (a ~> c)

[13:04] <lambdabot>  Parse error

[13:04] <xerox> Awww.

[13:05] <gaal> @type (>>>)

[13:05] <lambdabot> forall (a :: * -> * -> *) d b c. (Arrow a) => a b c -> a c d -> a b d

[13:05] <xerox> ?twww.

[13:05] <lambdabot> Unknown command, try @list

[13:05] <xerox> ?t (>>>) :: (Arrow (~>)) => (a ~> b) -> (b ~> c) -> (a ~> c)

[13:05] <lambdabot> Maybe you meant: tell time todo todo-add todo-delete topic-cons topic-init topic-null topic-snoc topic-tail topic-tell type . v

[13:05] <xerox> ?type (>>>) :: (Arrow (~>)) => (a ~> b) -> (b ~> c) -> (a ~> c)

[13:05] <lambdabot> (Arrow (~>)) => (a ~> b) -> (b ~> c) -> (a ~> c) :: forall (~> :: * -> * -> *) a b c. (Arrow ~>) => ~> a b -> ~> b c -> ~> a c

[13:05] <xerox> It was right, at least.

[13:05] <gaal> what's the difference between ?type and @type?

[13:05] <xerox> Oh, it's just that ShowQ doesn't parse constraints.

[13:06] <xerox> There is no difference.

[13:06] * gaal hasn't studied lambdabot carefully

[13:06] <xerox> ?version

[13:06] <lambdabot> lambdabot 4p23, GHC 6.5 (OpenBSD i386 )

[13:06] <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot

[13:06] <xerox> Get it on your computer, it's *so* handy.

[13:06] *** ivanfrey joined
[13:06] <gaal> xerox: I have it somewhere, I was going to add a pugs evaluator to it

[13:06] <xerox> Go for it!

[13:07] <gaal> but got inevitable sidetracked :)

[13:07] <gaal> s/ly/ly/

[13:07] <xerox> (You need latest fps for sure.)

[13:07] <gaal> grrr

[13:07] <xerox> heh heh

[13:07] <xerox> Type slowly.

[13:07] <gaal> "read before hitting enter" should also work.

[13:08] <gaal> anyway, I'd better get back to work.

[13:09] <xerox> What are you working on?

[13:09] <gaal> getting paid

[13:09] <xerox> Sensible work.

[13:11] *** frederico joined
[13:16] <gaal> xeox: heh sorry, didn't mean to be snub - it's $work work, not Perl or Haskell related.

[13:23] <ivanfrey> Just ran a smoke test. I was able to shave 20 min. off the last run.

[13:26] <ivanfrey> I tried to run it overnight but the powerbook went to sleep in the middle of it.

[13:32] <scw> clkao: about r10993, IIRC, ':p' in perl 6 is translated into 'p' => 0

[13:32] <svnbot6> r11467 | ajs++ | a first pass at pack, which seems to play nice with the Perl 6 sense of strings, and yet is not TOO hard to use

[13:33] <clkao> scw: really?

[13:33] <scw> clkao: And about why it makes MiniPerl6 work, since I checked the value in maybe Pugs::Emitter::Rule::Perl5

[13:34] <scw> clkao: oh, no, should it be 1?

[13:34] <clkao> i thought it should be 1

[13:35] <scw> ya, I just think of audrey's "since write nothing means 0"

[13:35] <scw> so now I have to find where did I check the value :(

[13:35] <clkao> i think 0 is :!p

[13:36] <scw> look like something appeared when I didn't take attension on Perl 6 :p

[13:36] <clkao> where have you been

[13:36] *** daxim joined
[13:37] <scw> just overwhelmed by final exam and projects

[13:41] <fglock> hi

[13:41] *** mj41__ joined
[13:42] <scw> hi!

[13:45] <fglock> is there a system command that tells a program memory usage, like 'time' does for cpu?

[13:50] <clkao> after the program finishes or ?

[13:50] <clkao> tcsh time does. or you can use bsd::resource in your program

[13:51] <fglock> clkao: I want to compare memory usage while compiling Test.pm

[13:54] <clkao> does time -l work?

[13:59] <nothingmuch> clkao: vvely odd

[13:59] <fglock> the man page says 'time -v perl ...' should work, but I only get 'bash: -v: command not found'

[13:59] <nothingmuch> clkao: look at http://search.cpan.org/src/NUFFIN/Test-TAP-Model-0.06/lib/Test/TAP/Model.pm

[13:59] <nothingmuch> _handle_other

[14:01] <fglock> fixed - it needs to be run with 'sudo'

[14:01] <nothingmuch> clkao: please write a failing test

[14:02] <nothingmuch> i'm expandinig this a bit: http://search.cpan.org/src/NUFFIN/Test-TAP-Model-0.06/t/basic.t

[14:06] <clkao> k later

[14:06] <clkao> fglock: \time

[14:09] <nothingmuch> clkao:

[14:10] <nothingmuch> clkao: i just added more passing tests

[14:10] <nothingmuch> http://nothingmuch.woobling.org/Test-TAP-Model/t/basic.t

[14:10] <nothingmuch> look for ->diag

[14:12] <scw> fglock: is Pugs::Compile::Rule used some where sensitive now?

[14:12] <scw> fglock: I modified the rule so that the first '|' is skipped

[14:12] <fglock> scw: it's the parser module for v6.pm

[14:12] <fglock> scw: no problem, afaik

[14:13] <scw> so, what should I do before commit to ensure not breaking it?

[14:13] <fglock> try to run hello_world.pl in Pugs-Compiler-Perl6

[14:17] *** xdg joined
[14:19] * scw cpan installing Module::Compile *giggle*

[14:20] <fglock> scw: v6.pm is a sponge that absorbs half of cpan

[14:22] <scw> does that means that I have to wait for cpan to install modules overnight?

[14:22] <kolibrie> I tried to build pugs without embedded parrot (removed parrot from PUGS_EMBED), but the executable still executes rules when external parrot is not in the path

[14:23] <kolibrie> must I also clear PARROT_PATH?

[14:23] <fglock> scw: it depends on your system and bandwidth - it takes only a few minutes in ubuntu, and a few hours in windows for me

[14:24] <scw> I work on a workstation on our department and install everything under my ~ ...

[14:24] <scw> Maybe our admin will kick me before I complete the test :P

[14:30] <kolibrie> yep, that worked.  I had to clear out PARROT_PATH as well as PUGS_EMBED

[14:35] <scw> fglock: I give up testing it... committed and hope it breaks nothing

[14:35] <svnbot6> r11468 | scw++ | Pugs::Compiler::Rule & Pugs::Grammar::MiniPerl6

[14:35] <svnbot6> r11468 | scw++ |  * fix r10993

[14:35] <svnbot6> r11468 | scw++ |  * skip the first '|' in rules

[14:35] <scw> also, I think you'll be able to fix whatever happens :)

[14:35] <fglock> scw: ok - no problem!

[14:39] <fglock> clkao: would you try compiling Test.pm again?

[14:39] <svnbot6> r11469 | fglock++ | v6 - optimized memory usage:

[14:39] <svnbot6> r11469 | fglock++ | -- compiling a single statement - 13k pages

[14:39] <svnbot6> r11469 | fglock++ | -- compiling Test.pm - 40k pages

[14:40] *** miyagawa joined
[14:40] *** cjeris joined
[14:40] <fglock> bbiab

[14:41] <scw> going home... there's a typhoon approaching Taiwan now :p hope I can get home before it rains again

[14:43] <kolibrie> scw: good luck

[14:48] <fglock> scw: it works fine - thanks!

[14:50] <clkao> fglock: sure

[14:51] <clkao> i have some data::bind weirdness

[14:54] *** justatheory joined
[14:56] <buu> Magical web irc log someplace?

[14:56] *** nothingmuch changes topic to:  Summer of Perl | 6.2.12 released! | paste: http://sial.org/pbot/perl6 | pugs.blogs.com | pugscode.org | pugs.kwiki.org | http://www.treehugger.com/files/th_images/paradigm.jpg

[14:57] <svnbot6> r11471 | clkao++ | Fix slurpy.

[14:58] <fglock> buu: http://colabti.de/irclogger/irclogger_log/perl6

[14:58] <buu> Thanks.

[14:58] <svnbot6> r11472 | clkao++ | Don't bother binding undef for now, because it sometimes segfaults. :(

[15:01] <svnbot6> r11473 | clkao++ | * Emit array method calls.

[15:01] <svnbot6> r11473 | clkao++ | * Fix while/until with pointy sub.

[15:01] <svnbot6> r11473 | clkao++ | * Pass statement/while.t

[15:01] *** prefiks joined
[15:02] <clkao> fglock: PCR no worky

[15:03] <fglock> clkao: it worked here - I'll make clean and retry

[15:04] <fglock> still works

[15:05] <clkao> ah, i have to make clean.

[15:07] <clkao> fglock++ # mem usage is about 160M now

[15:08] <nothingmuch> ingy: ping

[15:08] <fglock> :)

[15:08] <nothingmuch> clkao: did you see your passing test?

[15:09] *** vel joined
[15:10] *** rzoz joined
[15:10] <cjeris> Does anybody have a moment to help me build my first pugs?  I think I'm doing something wrong wrt cygwin

[15:10] <cjeris> Windows ghc 6.4.2, cygwin perl... typing perl Makefile.PL gives the following message a couple of times:

[15:11] <cjeris> [NAME OF COMPONENT]: /usr/local/src/pugs/third-party/installed/packages.conf: openFile: does not exist (No such file or directory)

[15:12] <cjeris> [sorry, replace NAME OF COMPONENT with runcompiler.exe] if I ignore that and proceed, make crashes out with a similar message later.

[15:13] <kolibrie> cjeris: Limbic_Region is on windows and recently had to do some workaround

[15:14] <kolibrie> cjeris: I'm not sure what it was, and he doesn't seem to be around just now

[15:14] <ajs> WRT S03, what is a "reference type"? I thought any object would be a reference type, but Str behaves unlike a reference type in S03 WRT C<===> (e.g. it compares two Str values by value, not by .id)

[15:14] *** rzoz left
[15:14] <ajs> Is that an exception or is Str not a reference type?

[15:15] <kolibrie> I thought references were gone

[15:15] <PerlJam> kolibrie: different usage of the word.

[15:15] <ajs> kolibrie: as in "by reference" rather than "a reference"

[15:15] <cjeris> kolibrie: ok, I'll drop him a line later, thanks!

[15:16] <clkao> nothingmuch: not yet, still stuff on my stack

[15:16] <nothingmuch> clkao: anyway, i'm declining your task since I can't reproduce

[15:17] <ajs> If no one knows, I think I'll pose this to p6l. I think something got lost between the original plan to have a "str" type and the current "Str-only" concept.

[15:17] <nothingmuch> IIRC there is no more str type

[15:17] <nothingmuch> there are low level byte buffers

[15:17] <nothingmuch> and Str

[15:18] <ajs> nothingmuch: You are correct. That's what I meant. There used to be a "str", but we dropped it because of representation issues. I think S03 is still partially in the "str" mindset WRT C<===>

[15:19] <ajs> The two solutions that I see are "Str is an exception for C<===>, and that's OK," or "S03 is wrong, C<~$s1 === ~$s2> compares by .id" ... either one is fine with me, but the ambiguity sucks

[15:21] <nothingmuch> Str.id is just the low level buffer in some canonical encoding, i think

[15:21] <nothingmuch> so if it compares by .id it's OK

[15:21] <nothingmuch> since that's just string equality

[15:21] <ajs> ... uh ... that's not good.

[15:21] <nothingmuch> but this, of course, could be made more efficient by making === for strings special case

[15:21] <nothingmuch> why not?

[15:22] *** cognominal joined
[15:22] <nothingmuch> $obj.id, according to audrey is: "return any low level type that uniquely identifies this value"

[15:22] <ajs> Because .id should be the same, if and only if the things being compared are THE SAME THING, not things that happen to have the same value under certain circumstances.

[15:23] <nothingmuch> some people disagree

[15:23] <nothingmuch> i personally don't cacre anymore

[15:23] <nothingmuch> neither scheme makes sense

[15:23] <ajs> Ok

[15:23] <nothingmuch> in a language with mixed semantics

[15:23] <fglock> ajs: that's only valid for containers - values are compared by value

[15:24] <nothingmuch> isn't === supposed to be value oriented, and more DWIM in that it also recurses downwards?

[15:24] <ajs> fglock: "containers" or "reference types"?

[15:26] <ajs> nothingmuch: I didn't see anything about DWIMery or recursion. It's either value-to-value for value types (which I presume to mean unboxed objects) or .id-to-.id for reference types (which I presume to mean containers and objects).

[15:26] <fglock> if you have '$a := $b' then they share the same "cell"

[15:26] <ajs> fglock: aye

[15:26] <nothingmuch> i always thought === was deep by-value comaprison

[15:26] <nothingmuch> e.g. [ 1, 2, 3 ] === [ 1, 2, 3 ] is true

[15:26] <nothingmuch> but == is not since they are different containers

[15:26] <ajs> nothingmuch: Search for === in S03

[15:26] <fglock> that's what makes $a.id ~~ $b.id

[15:27] <PerlJam> There's enough confusion on the subject here, that someone should probably summarize and send a message to p6l

[15:27] <nothingmuch> ughhhhhhhh

[15:27] <ajs> PerlJam: I'm composing the mail now

[15:27] <nothingmuch> we already have that broken behavior with ==

[15:27] <nothingmuch> *sigh*

[15:28] <nothingmuch> acomparing reference deeply is still going to stay a few characters harder than it should be

[15:28] <fglock> see perl5/Perl6-Container/lib/Perl6/Container/Scalar.pm

[15:29] <ajs> nothingmuch: I understand where you're coming from and whether I agree or disagree, that wasn't really my question. I was trying to make sense of S03, not question how it might ought to have been, if I may use the plu-perfect subjunctive for a moment ;)

[15:29] <ajs> fglock: Wilco

[15:29] <nothingmuch> yeah, i'm just complaining

[15:29] <nothingmuch> not to you

[15:29] <nothingmuch> but in general

[15:31] *** Jedai joined
[15:31] <ajs> nothingmuch: The other day, I was writing about Perl 6 on a talk page on Wikipedia. I pointed out that everyone involved in P6 could write a book of rants about the process if they had the time, but that's just the nature of a huge, ambitious project ;-)

[15:31] <nothingmuch> ajs: the reason i'm bitching is that i bitched a lot before === came to be

[15:32] <nothingmuch> and i thought that === resolved the issues i raised

[15:32] <nothingmuch> so i ticked that off in my list

[15:32] <ajs> nothingmuch: ah... yeah, I think I have some vague memory of that thread.

[15:32] <nothingmuch> i thinik it's going to introduce bad coding style to have too much .id everywhere

[15:33] <nothingmuch> and i think that it's easy to do that anyway

[15:33] <nothingmuch> otoh explaining to a newbie that @$foo === @$bar and not $foo === $bar... meh

[15:33] <PerlJam> nothingmuch: er, what do you mean about "too much .id everywhere"

[15:33] <PerlJam> ?

[15:33] <nothingmuch> also, i don't think it's going to recurse

[15:33] <nothingmuch> PerlJam: well, most of my Perl code deals with values

[15:34] <nothingmuch> except where it's very explicit about refaddr

[15:34] <nothingmuch> all the code i've read is also like that

[15:34] <ajs> nothingmuch: I see === as mostly an "implementation detail". Most comparisons will use ~~, == or eq

[15:34] <nothingmuch> == and eq suck even more

[15:34] <nothingmuch> ~~ is not equality, it's "match"

[15:34] <nothingmuch> we need an equality checking operator that will basically be used to implement is_deeply in one line

[15:34] <nothingmuch> Data::Compare

[15:34] <ajs> nothingmuch: exactly, which is what most people mean when they say == or eq in Perl 5.

[15:35] <nothingmuch> yes

[15:35] <nothingmuch> but == and eq are *not* that for arrays

[15:35] <PerlJam> nothingmuch: you do that by defining your own .id for the type and then using ===

[15:35] <nothingmuch> they check derivitive data types

[15:35] <nothingmuch> PerlJam: and that really really sucks for nested structures

[15:36] <nothingmuch> ?eval my @foo = ( [ 1, 2 ], 3 ); @foo

[15:36] *** evalbot_11465 is now known as evalbot_11473

[15:36] <evalbot_11473> [[1, 2], 3]

[15:36] <nothingmuch> ?eval my @foo = ( [ 1, 2 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo === @bar;

[15:36] <evalbot_11473> Bool::False

[15:36] <nothingmuch> ?eval my @foo = ( 1, 2, 3 ); my @bar = ( 1, 2, 3 ); @foo === @bar;

[15:36] <evalbot_11473> Bool::True

[15:36] <nothingmuch> explain that to a newbie

[15:37] <nothingmuch> explain why it's worth anything

[15:37] <nothingmuch> ;-)

[15:37] <merlyn> ?eval my @inner = (1, 2); my @foo = (@inner, 3);

[15:37] <evalbot_11473> [1, 2, 3]

[15:37] *** Muixirt left
[15:37] <merlyn> Hmm.  how do I get that to be a reference?

[15:37] <merlyn> \@inner ? :)

[15:37] <merlyn> ?eval my @inner = (1, 2); my @foo = (\@inner, 3);

[15:37] <evalbot_11473> [[1, 2], 3]

[15:37] <merlyn> ahh, there it is

[15:38] <PerlJam> That makes it a Capture  :)

[15:38] <cognominal> 	?eval my @foo = ( [ 1, 2 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo == @bar;

[15:38] <merlyn> ?eval my @inner = (1, 2); my @foo = (\@inner, 3); my @bar = (\@inner, 3); @foo === @bar;

[15:38] <evalbot_11473> Bool::False

[15:38] <merlyn> hmm.  why is that false?

[15:38] <merlyn> ahh, thinking p5 again

[15:38] <merlyn> ?eval my @inner = (1, 2); my $ref = @inner; my @foo = ($ref, 3); @foo === @bar;

[15:38] <PerlJam> merlyn: for the same reason  [1,2] === [1,2] is false

[15:38] <evalbot_11473> Error: Undeclared variable: "@bar"

[15:38] <merlyn> ?eval my @inner = (1, 2); my $ref = @inner; my @foo = ($ref, 3);

[15:38] <evalbot_11473> [[1, 2], 3]

[15:38] <cognominal> ?eval my @foo = ( [ 1, 2 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo === @bar;

[15:38] <evalbot_11473> Bool::False

[15:39] <merlyn> ?eval my @inner = (1, 2); my $ref = @inner; my @foo = ($ref, 3); my @bar = ($ref, 3); @foo === @bar;

[15:39] <evalbot_11473> Bool::False

[15:39] <cognominal> oops

[15:39] <merlyn> ok - that's still confused

[15:39] <merlyn> or I'm still confused

[15:39] <cognominal> ?eval my @foo = ( [ 1, 2 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo == @bar;

[15:39] <evalbot_11473> Bool::True

[15:39] <merlyn> Oh.  @foo is not the same object as @bar

[15:39] <merlyn> duh

[15:39] *** weinigZZZ is now known as weinig

[15:39] * merlyn needs to go back to p5 now. )

[15:40] <PerlJam> merlyn: too much perl6 will mess you up wrt perl5.

[15:40] <gaal> merlyn: there are no references any more. there will be Captures: http://svn.openfoundry.org/pugs/docs/Perl6/FAQ/Capture.pod

[15:40] <fglock> ?eval my @inner = (1, 2); my $ref = @inner; my @foo = ($ref, 3); my @bar = ($ref, 3); @foo ~~ @bar;

[15:40] <evalbot_11473> Bool::True

[15:40] <gaal> but the implementation currently is broken.

[15:43] <ajs> Silly question 2: do all classes automatically define: C<multi submethod *infix:<as> ($self: $?CLASS) { $self }> ?

[15:44] <ajs> That is to say, can I always .as<anscestor> ?

[15:45] <PerlJam> That's not a silly question at all.

[15:45] <PerlJam> unfortunately for you, I don't have an answer :)

[15:46] <ajs> PerlJam: heh

[15:46] <PerlJam> Wait for TimToady or ask on p6l

[15:46] <svnbot6> r11474 | fglock++ | v6 - ChangeLog update

[15:46] <ajs> PerlJam: Will do. Just trying not to ask leading questions on p6l if a quick answer here will do.

[15:49] <PerlJam> ajs: re your latest email to p6l ... stop apologizing!  :-)   If you can't understand it or find an answer to your question, odds are other people would have the same problem if they thought about it

[15:49] <ajs> Will try... still unsure of self

[15:49] <ajs> Was slacking so long...

[15:50] <PerlJam> Well, ajs++ for the work

[15:50] <PerlJam> and again ajs++

[15:50] <ajs> Thanks

[15:50] <PerlJam> (will karms substitute for confidence? :)

[15:50] <PerlJam> er, s/karms/karma/

[15:50] <Jedai> ?eval my @foo = ( [ 1, 4 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo == @bar;

[15:50] *** evalbot_11473 is now known as evalbot_11474

[15:50] <evalbot_11474> Bool::True

[15:51] <ajs> PerlJam: I suppose it's the same as a pay raise substituting for self-respect, right ;-)

[15:51] <Jedai> ?eval my @foo = ( [ 1, 4 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo ~~ @bar;

[15:51] <evalbot_11474> Bool::False

[15:52] <Jedai> ?eval my @foo = ( [ 1, 2 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo ~~ @bar;

[15:52] <evalbot_11474> Bool::True

[15:53] <Jedai> I'm unsure why we would need "===" if ~~ does the job better ?

[15:53] <PerlJam> ajs: you just reminded me of this guy I know who kept getting pay raises because the boss thought that would motivate him to work harder.  The only problem was that the guy was already working 110% and throwing more money at him isn't going to give him more hours in the day or somehow magically make the work easier

[15:54] <PerlJam> Jedai: they do different things.  ~~ does the "deep comparison" that nothingmuch was talking about  (I think), and === does an identity comparison.

[15:54] <svnbot6> r11475 | clkao++ | * Parse :foo(1)

[15:54] <svnbot6> r11475 | clkao++ | * Pass 02-test-pm/2-force_todo.

[15:54] <Jedai> "==" is stupid that's ok, "~~" is very smart and that can have unexpected side-effect, but "===" needs to be a little bit smarter in my opinion

[15:55] <Jedai> A "is_deeply" operator is really needed while I don't really when I would use the current "==="

[15:55] <PerlJam> hmm. and I think I need to relook at S03 too because I just realized what's been bothering me about === is that I thought it was spelt =:=

[15:56] <Jedai> ?eval 2 =:= 3

[15:56] <evalbot_11474> Bool::False

[15:56] <Jedai> ?eval 2 =:= 2

[15:56] <clkao> fglock: can you make [ 1, 4 ] parse? ;)

[15:56] <evalbot_11474> Bool::True

[15:56] <ajs> Jedai: I expect that the single major use of === is to implement ==, eq and ~~

[15:56] <PerlJam> Hrm.

[15:56] <svnbot6> r11476 | fglock++ | v6 - changelogging for 0.007

[15:57] <Jedai> ?eval my ($i, $j) = (1, 2); ($i + 1) =:= $j;

[15:57] <PerlJam> I'm not sure that there's enough of a difference between === and =:=

[15:57] <evalbot_11474> Bool::True

[15:57] <Jedai> ?eval my ($i, $j) = (1, 2); ($i + 1) === $j;

[15:57] *** evalbot_11474 is now known as evalbot_11476

[15:57] <evalbot_11476> Bool::True

[15:57] <ajs> That is: our bool multi infix:<==> (int $a, int $b) { $a === $b }

[15:57] <Jedai> ?eval my ($i, $j) = (1, 2); ($i + 1) == $j;

[15:57] <evalbot_11476> Bool::True

[15:57] <fglock> clkao: added to first item in TODO :)

[15:58] <ajs> And the same for num, etc.

[15:58] <PerlJam> or, rather === tries to be a magical =:= or something

[15:58] <Jedai> ?eval my @foo = ( [ 1, 2 ], 3 ); my @bar = ( [ 1, 2 ], 3 ); @foo =:= @bar;

[15:58] <evalbot_11476> Bool::False

[15:58] <svnbot6> r11477 | fglock++ | v6 - TODO update

[15:58] <PerlJam> Jedai: in that instance =:= is the same as ===

[15:59] <PerlJam> They're testing the exact same things.

[15:59] <Jedai> Ok, now I'm confused...

[15:59] <Jedai> ?eval "2" =:= 2;

[15:59] <clkao> fglock: also !0 is right, but !(0) is parsed as a call

[15:59] <evalbot_11476> Bool::False

[15:59] <clkao> not op

[15:59] <Jedai> Ok...

[15:59] <clkao> is that an easy fix?

[16:00] <PerlJam> Assuming .id things are stringy,   @foo =:= @bar is the same as @foo.id eq @bar.id

[16:00] <ajs> PerlJam: I think the key difference between === and =:= is this bit in S03 for =:=: "The binding fails if the type of the variable being bound is sufficiently inconsistent with the type of the current declaration."

[16:00] <ajs> Note that === is ALWAYS false if the types differ

[16:01] <fglock> clkao: I think !(0) is a call

[16:01] <Jedai> ?eval my @foo = ( 1, 3 ); my @bar = ( 1, 3 ); @foo =:= @bar;

[16:01] <evalbot_11476> Bool::True

[16:01] <PerlJam> ajs: that sentenxt you quote is referencig := and ::=.  It says nothing about =:=

[16:01] <clkao> ?eval !(Bool::False)

[16:01] <evalbot_11476> Bool::True

[16:01] <SamB> ?eval !(0)

[16:01] <evalbot_11476> Bool::True

[16:01] <PerlJam> ajs: but, I see what you're saying.

[16:01] <ajs> You're right. Ignore that statement on my part

[16:01] <nothingmuch> PerlJam: no, ~~ will also match [ 1, 2, 3 ] with [ { 1 }, { 1 }, { 1 } ]

[16:01] <nothingmuch> it's matching

[16:01] <nothingmuch> the right side is an expression

[16:02] <nothingmuch> the left side is a value

[16:02] <PerlJam> ajs:  @foo =:= $bar could be true if both of their .id methods return the same thing even if their types are radically different.

[16:02] <nothingmuch> my point is that =:= already has .id ish semantics

[16:03] <nothingmuch> ?eval [ 1, 2, 3 ].id

[16:03] *** evalbot_11476 is now known as evalbot_11477

[16:03] <evalbot_11477> undef

[16:03] <nothingmuch> ?eval "foo".id

[16:03] <evalbot_11477> undef

[16:03] <nothingmuch> ?eval 1.id

[16:03] <nothingmuch> hmm

[16:03] <evalbot_11477> undef

[16:03] <nothingmuch> nevermind that then

[16:03] <PerlJam> nothingmuch: well, I'm with you then.   I don't get why we have ~~ === and =:=

[16:03] <nothingmuch> i think that === is confusingly overlapping with =:=

[16:03] <PerlJam> indeed!

[16:03] <ajs> I don't think =:= checks the .id... at least not in spirit. I would think that it is actually grovelling the namespace

[16:03] <nothingmuch> =:= should be "is it the same data, in that when i change one side the other side will change with it"

[16:03] <ajs> My jogging buddy just showed up. Must run! Ciao!

[16:03] <nothingmuch> === should be "are these the same values?", but deeply

[16:04] <nothingmuch> and ~~ should be "does the right hand side describe the left hand side"

[16:04] <PerlJam> ajs: oh, perhaps you're right.  =:= is just "do these two things occupy the same slot"

[16:04] <nothingmuch> where describe is the lovely ~~ semantics, but almost always unrelated to equality

[16:04] <SamB> ?eval "foo".id

[16:04] <evalbot_11477> undef

[16:04] <nothingmuch> see you ajs

[16:04] <SamB> ?eval {}.id

[16:04] <evalbot_11477> undef

[16:04] <SamB> what took so long?

[16:05] <SamB> and why are all these ids coming out as undef?

[16:05] <nothingmuch> because pugs is broken ;-)

[16:05] <SamB> ?eval Pugs.id

[16:05] <evalbot_11477> Error: No such sub: "&Pugs"

[16:05] <SamB> oh, nice

[16:05] <SamB> something other than undef...

[16:06] <SamB> ?eval $Pugs.id

[16:06] <PerlJam> Maybe we can corner TimToady today until we get a resolution on these comparison operators ;)

[16:06] <evalbot_11477> Error: Undeclared variable: "$Pugs"

[16:06] <nothingmuch> TimToady: ping

[16:06] <SamB> hmm, maybe I should read some documentation at some point

[16:06] * nothingmuch will try to write up a small set of questions

[16:06] <PerlJam> nothingmuch++ good idea

[16:09] <SamB> ?eval {}.crazy

[16:09] <evalbot_11477> Error: No such method in class Hash: "&crazy"

[16:09] <svnbot6> r11478 | clkao++ | * Workaround !(0) parse result.

[16:09] <svnbot6> r11478 | clkao++ | * Kill ';' from eval.

[16:09] <svnbot6> r11479 | fglock++ | v6 - updated TODO, MANIFEST - this is v6 0.007 in CPAN

[16:09] <SamB> okay, so there is *some* support for .id somewhere...

[16:09] <fglock> lunch &

[16:11] <pasteling> "nothingmuch" at 71.234.68.135 pasted "===, =:= questions" (23 lines, 1K) at http://sial.org/pbot/18346

[16:11] <nothingmuch> PerlJam: please review

[16:11] <clkao> fglock: need to support interpolation in double quote

[16:13] <PerlJam> nothingmuch: bueno.

[16:13] <nothingmuch> p6l?

[16:13] <PerlJam> The last time this came up I think someone mentioned the idea of modifiers on operators, I don't remember what the general concensus was on that though

[16:13] <nothingmuch> *gag* *cough* *barf*

[16:14] <PerlJam> well, that's a one opinion  :)

[16:21] *** FurnaceBoy joined
[16:23] <kolibrie> audreyt: I am trying to get <ws> overriding to work, picking up where I left off at the Chicago hackathon, but I cannot get it to work anywhere

[16:23] <pasteling> "kolibrie" at 66.239.158.2 pasted "overriding <ws>" (23 lines, 502B) at http://sial.org/pbot/18347

[16:25] <nothingmuch> so

[16:25] <nothingmuch> posted, a bit more details were added

[16:25] <nothingmuch> i hope i didn't err on the side of verbosity

[16:26] *** penk joined
[16:31] <kolibrie> fglock: after I get this working under pugs/parrot, I will of course want it to work under v6.pm

[16:34] <Jedai> ?eval "2" =:= 2

[16:34] *** evalbot_11477 is now known as evalbot_11479

[16:34] <evalbot_11479> Bool::False

[16:34] <Jedai> ?eval "2" === 2

[16:34] <evalbot_11479> Bool::False

[16:34] <Jedai> ?eval "2" == 2

[16:34] <evalbot_11479> Bool::True

[16:34] *** swaroop joined
[16:35] <Jedai> So we in fact have a equal method for Int and Str as ops "==" and "eq"

[16:36] <Jedai> and =:= and === work without implicit conversions

[16:36] <nothingmuch> i think so

[16:36] <nothingmuch> i just posted on p6l on this just now

[16:36] <nothingmuch> p[lease see if it makes sense

[16:37] <Jedai> I read it, it makes sense (to me at least ;) )

[16:37] <nothingmuch> on your == / eq thing?

[16:37] <nothingmuch> as i see it === is never the same for different types

[16:37] <nothingmuch> and eq is just "force it into Str first, then run ==="

[16:38] <Jedai> exact

[16:38] <nothingmuch> and == is the same but Num

[16:38] <nothingmuch> okay

[16:38] <nothingmuch> =)

[16:38] <Jedai> so === is higher level...

[16:38] <nothingmuch> right now it isn't ;-)

[16:38] <nothingmuch> ?eval "2" === "2"

[16:38] <evalbot_11479> Bool::True

[16:38] <Jedai> It should :-(

[16:38] <nothingmuch> it works everything but references

[16:39] <nothingmuch> ?eval (1, 2, 3) === (1, 2, 3)

[16:39] <evalbot_11479> Bool::True

[16:39] <nothingmuch> ?eval [1, 2, 3] === [1, 2, 3]

[16:39] <nothingmuch> *BLAM

[16:39] <evalbot_11479> Bool::True

[16:39] <nothingmuch> *

[16:39] <nothingmuch> oh

[16:39] <nothingmuch> shit

[16:39] <nothingmuch> ?eval ([1, 2], 3) === ([1, 2], 3)

[16:39] <evalbot_11479> Bool::False

[16:39] <nothingmuch> that's even more confusing

[16:39] <nothingmuch> ===--

[16:40] <Jedai> ?eval my $foo = [ 1, 3 ]; my $bar = [ 1, 3 ]; $foo =:= $bar;

[16:40] <evalbot_11479> Bool::True

[16:40] <Jedai> Broken...

[16:40] <nothingmuch> EEIIIIIIIIIIIIIII

[16:40] <nothingmuch> let's make a list of broken behaviors

[16:41] <Jedai> I'm quite sure =:= should give False here o_O

[16:41] <nothingmuch> do you have subethaedit?

[16:42] <Jedai> no ?

[16:42] <Jedai> Why ?

[16:42] <nothingmuch> so that we can ediut the file together

[16:42] <nothingmuch> ?eval "42" === 42

[16:42] <evalbot_11479> Bool::False

[16:42] <nothingmuch> ?eval "42" === "42"

[16:42] <evalbot_11479> Bool::True

[16:43] <Jedai> Ok, but I'm not on Mac :-(

[16:43] <nothingmuch> ?eval " 42 " == "42.0"

[16:43] <evalbot_11479> Bool::True

[16:43] <nothingmuch> that's OK

[16:43] <nothingmuch> i can just share the file when I'm done

[16:45] <nothingmuch> ?eval $foo = [ 1, 2, 3]; $foo =:= $foo

[16:45] <evalbot_11479> Error: Undeclared variable: "$foo"

[16:45] <nothingmuch> ?Eval [ 1, 2, 3 ] === [ 1 .. 3 ]

[16:45] <nothingmuch> ?eval my $foo = [ 1, 2, 3]; $foo =:= $foo

[16:45] <evalbot_11479> Bool::True

[16:45] <nothingmuch> ?val [ 1, 2, 3 ] === [ 1 .. 3 ]

[16:46] *** frederico joined
[16:46] <Jedai> ?eval " 42 " === "42"

[16:46] <nothingmuch> $foo = [ 1, 2, 3 ]; $bar = $foo; $bar =:= $foo

[16:46] <evalbot_11479> Bool::False

[16:46] <nothingmuch> ?eval $foo = [ 1, 2, 3 ]; $bar = $foo; $bar =:= $foo

[16:47] <evalbot_11479> Error: Undeclared variable: "$foo"

[16:47] <nothingmuch> ?eval my $foo = [ 1, 2, 3 ]; my $bar = $foo; $bar =:= $foo

[16:47] <evalbot_11479> Bool::True

[16:47] <nothingmuch> ?eval my $foo = [ 1, 2, 3 ]; my $bar := $foo; $bar =:= $foo

[16:47] <evalbot_11479> Bool::True

[16:47] <Jedai> ?eval [ 1, 2, 3 ] === [ 1 .. 3 ]

[16:47] <evalbot_11479> Bool::True

[16:48] <pasteling> "nothingmuch" at 71.234.68.135 pasted "broken ops" (29 lines, 1.1K) at http://sial.org/pbot/18350

[16:48] <Jedai> ?eval my @foo = (1, 2, 3); my @bar = @foo; @foo =:= @bar;

[16:48] <evalbot_11479> Bool::True

[16:49] *** frederico joined
[16:49] <nothingmuch> that's nasty

[16:51] <nothingmuch> ?eval my @foo = (1, 2, 3); my @bar = @foo; @foo === @bar

[16:51] <evalbot_11479> Bool::True

[16:51] <nothingmuch> ?eval my @foo = (1, 2, 3); my @bar = @foo; @bar[1] = "moose"; @foo =:= @bar

[16:51] <evalbot_11479> Bool::False

[16:51] <Jedai> So I'll add :  my @foo = (1, 2, 3); my @bar = @foo; @foo =:= @bar; - false, not the same container, BROKEN

[16:51] <nothingmuch> yeah, i added that =)

[16:51] <Jedai> Ok

[16:52] <nothingmuch> i added an inspired === test

[16:52] <nothingmuch> and the last thing i ?eval'd

[16:52] <Jedai> ?eval my @foo = (1, 2, 3); my @bar = @foo; @foo[0] = 4; @foo.say; @bar.say;

[16:52] <evalbot_11479> OUTPUT[423 123 ] Bool::True

[16:52] <cjeris> ?eval [1, 2, 3] === [1, 2, 3]

[16:52] <evalbot_11479> Bool::True

[16:53] <Jedai> Ok..

[16:53] <Jedai> So is Pugs optimising in intern ?

[16:53] *** kudra joined
[16:53] <nothingmuch> it looks like it

[16:53] *** ruoso joined
[16:54] <Jedai> Quite a good optimisation then, but the ops should account for it in this case

[16:55] <nothingmuch> ?eval my @foo = ([1, 2], 3); my @bar = @foo; @bar === @foo

[16:55] <evalbot_11479> Bool::False

[16:55] <clkao> v6 passes 147 more tests!

[16:56] <Jedai> Wow ! :-)

[16:56] <nothingmuch> clka++

[16:56] <nothingmuch> fglock++

[16:56] <nothingmuch> clkao++

[16:56] <pasteling> "nothingmuch" at 71.234.68.135 pasted "broken ops" (36 lines, 1.9K) at http://sial.org/pbot/18351

[16:56] <nothingmuch> this is the new version

[16:56] <nothingmuch> please see if it's missing anything

[16:58] <fglock> clkao: wow!

[16:59] <Jedai> It seems complete

[17:00] <Jedai> It would be interesting to know if Pugs optimisation does not arise from the Haskell backend

[17:00] <nothingmuch> sent

[17:00] <nothingmuch> pugs may be cheating by asking GHC for the unsafe pointer to operation

[17:01] <Jedai> (as OCaml has this kind of quirk I guess Haskell may be the one to blame)

[17:01] <nothingmuch> and using that as internal id for refs

[17:01] <nothingmuch> in which case they are actually bound to the same point in memory, until pugs tries to change it

[17:01] <fglock> kolibrie: PCR have problems mixing rule/regex in the same statement - I'm working on it on my "free time" :)

[17:01] <Jedai> Yes, that seems likely as this kind of optimisation is easy and implemented in functionnal programming

[17:01] <nothingmuch> anyway, i need to go take a shower and stuff

[17:02] <Jedai> Ok, see you later :-)

[17:02] <kolibrie> fglock: I'm only finally getting back to this example I started two weeks ago

[17:03] <kolibrie> time seems always short

[17:03] <merlyn> I'm thinking of writing an article on Module::Compile for my next trick

[17:03] <merlyn> then an article using p6-rules to parse my "Spew" compiler

[17:03] <merlyn> time is indeed short

[17:04] <fglock> merlyn: :)

[17:04] <broquaint> Write some perl6 to adapt existing articles to perl6.

[17:04] <merlyn> so two articles in a row that go from Inline::Spew to Spew in the p6 world

[17:04] <merlyn> merlyn-columns: spew

[17:04] *** grufti joined
[17:04] <buubot> Found Random sentence generator (Sep 99) at http://www.stonehenge.com/merlyn/LinuxMag/col04.html;  Creating an Inline language (Mar 04) at http://www.stonehenge.com/merlyn/LinuxMag/col57.html;  Editing files in-place (dec 98) at http://www.stonehenge.com/merlyn/UnixReview/col23.html;  Watching a

[17:04] <buubot> ..logfile in an IRC channel (Feb 04) at http://www.stonehenge.com/merlyn/PerlJournal/col09.html;

[17:04] <lambdabot> Title: "Watching a logfile in an IRC channel (Feb 04)"

[17:04] <lambdabot> Title: "Random sentence generator (Sep 99)"

[17:05] <merlyn> dueling btos

[17:05] <merlyn> bots

[17:05] <fglock> I've been thinking about writing a compiler which adds p6 syntax to p5 but doesn't change semantics - and is easy to install

[17:07] <merlyn> so Module::Compile-based modules just have to return p5 code that replaces the filtered code?

[17:07] <fglock> but that would just confuse the users

[17:07] <fglock> merlyn: yes

[17:07] <merlyn> and what is "use Module::Compile -base";

[17:07] <merlyn> I don't understand the -base there

[17:07] <merlyn> as in, undocumented. :)

[17:07] <mauke> looks spiffy

[17:07] <broquaint> A Spiffy-ism perhaps.

[17:08] <merlyn> Ugh.  this uses spiffy below?

[17:08] * merlyn sighs

[17:10] <bpphillips> merlyn: I don't believe Module::Compile uses Spiffy at all, I think it is just a "Spiffy-ism"

[17:11] <fglock>     # Handler modules can do C< use Module::Compile -base; >. Makethe source says:  # Handler modules can do C< use Module::Compile -base; >. Make  them ISA Module::Compile and get the hell out of Dodge.

[17:11] <fglock> ugh

[17:12] <fglock> it's the same as 'use base ...'

[17:15] <merlyn> OK

[17:15] <merlyn> how weird.

[17:18] <nothingmuch> 	/w 26

[17:18] <svnbot6> r11480 | fglock++ | v6 - updated HACKING file

[17:19] <merlyn> use Foo -base; instead of just use base Foo;

[17:19] <merlyn> that's ... crazy

[17:19] *** fglock left
[17:20] <clkao> fglock: i broke pair parsing. hwo do i make Pugs::Grammar::Term.pair with higher priority than the one after?

[17:20] <merlyn> maybe I should submit a patch. :)

[17:20] *** fglock_ joined
[17:20] *** wesle1 joined
[17:20] <gaal> fwiw, use base Foo is not strict-clean.

[17:21] *** Daveman joined
[17:21] <fglock_> clkao: the priority is set by longest-token

[17:21] <bpphillips> merlyn: I think it's to differentiate between code that uses Module::Compile (like v6) vs. code that is supposed to be compiled by Module::Compile

[17:21] <mauke> use base Foo::;

[17:21] <clkao> fglock_: it doesn't seem so

[17:22] <clkao> fglock_: also statement/redo kindof compiles with V6DUMPAST set

[17:22] <clkao> but fails horribly without

[17:22] <clkao> fglock_: see latest parsing of ':foo<bar>' :/ i broke it

[17:27] <fglock_> clkao: the first rule matches :a:<b> - extra colon there

[17:27] *** elmex joined
[17:29] <clkao> fglock_: oh! but even if i kill that : it still doesnt matche

[17:29] <fglock_> clkao: did you commit 'redo'?

[17:30] <clkao> fglock_: no. i made some changes to kill extra block in if/else

[17:32] <fglock_>  :foo<bar> and :foo work for me

[17:32] <svnbot6> r11481 | clkao++ | DOn't emit extra level of block so redo would work.

[17:32] <fglock_> clkao: I'll commit my Term.pm

[17:35] <clkao> cool

[17:38] *** amnesiac joined
[17:40] <clkao> fglock_: that's the same change i have, but i still have :foo<bar> wrong

[17:42] <fglock_> clkao: I've seen the error now - fixing...

[17:45] <fglock_> ok

[17:45] <svnbot6> r11482 | fglock++ | v6 - parser fix - :foo :$foo :foo<bar>

[17:47] <fglock_> PCR can't merge keys yet - you have to implement all the parsing in a single place

[17:51] <svnbot6> r11483 | fglock++ | v6 - clean up comments in Term.pm

[17:57] *** weinig is now known as weinig|away

[18:02] *** fglock joined
[18:03] *** sahadev joined
[18:11] <nothingmuch> merlyn: it's ingy code

[18:11] <nothingmuch> but it actually doesn't reallyy matter

[18:11] <nothingmuch> M::C does the job

[18:13] *** cognominal left
[18:14] *** penk joined
[18:19] *** cognominal joined
[18:25] <clkao> fglock: *nod* my grammar-fu is still weak ;)

[18:26] <clkao> fglock: did you see the weird thing for statement/redo?

[18:26] <clkao> Error in perl 6 parser: Not a SCALAR reference at lib/Pugs/Grammar/Expression.pm line 208.

[18:27] <clkao> but it kindof works (2 tests emitted) with v6dumpast

[18:28] *** weinig|away is now known as weinig

[18:29] <fglock> sorry, I can't check right now

[18:30] <fglock> I'm doing some sysadmin $work

[18:36] <clkao> k

[18:39] *** frederico joined
[18:39] <svnbot6> r11484 | clkao++ | Make ~@a work.

[18:43] <clkao> it seems v6 is still generating partial .tc file when compilation failed

[18:44] *** xdg joined
[18:48] *** hexmode joined
[18:50] <clkao> nothingmuch: ok ttm is on my stack on

[18:50] <nothingmuch> clkao: look for the link i sent you

[18:50] <nothingmuch> that test passes

[18:51] <clkao> nothingmuch: basic?

[18:51] <nothingmuch> clkao: yes

[18:52] <clkao> nothingmuch: i think you missed something, diag actually goes to stderr

[18:52] <nothingmuch> oh

[18:52] <nothingmuch> right

[18:52] <nothingmuch> that's the harness's problem

[18:53] <clkao> so i have to do my own print of ^#

[18:53] <clkao> :(

[18:53] <nothingmuch> some outputters output on stdout

[18:53] <nothingmuch> there's a Test::Builder hack for this

[18:53] <nothingmuch> but it should be fixed in Test::Harness::Straps

[18:53] <clkao> is it being fixed?

[18:54] <nothingmuch> that's Not My Problem

[18:54] <nothingmuch> i remember it being discussed on perl-qa

[18:54] <nothingmuch> it's probably unfixable in Test::Builder

[18:54] <clkao> nothingmuch: can i have something post_diag like pre_diag?

[18:54] <nothingmuch> possibly unfixable in Test::HarnesS::Straps for backwards compat reasons

[18:54] <nothingmuch> pre_diag and post_diag?

[18:54] *** lollan joined
[18:55] <clkao> there's already pre_diag in ->structure

[18:55] <clkao> so diags are attached to the previous test

[18:55] <clkao> which is actually a bit weird. because test should be covering things before you actually run the ok().

[18:57] <clkao> nothingmuch: also, the is($a,$b) test also outputs to stderr. :/

[18:57] <nothingmuch> pre_diag is diag before any subtests

[18:57] <nothingmuch> diag is automatically attached to any subtest that was right before it

[18:58] <nothingmuch> because is($a, $b) outputs the diag (in Perl 6's Test.pm) right after the ok line

[18:58] <nothingmuch> Test::Builder is not to spec

[18:58] <nothingmuch> because it says diag is emitted to stdout

[18:58] <obra> Didn't it predate the spec? ;)

[18:58] <nothingmuch> i don't remember

[18:58] <clkao> i see.

[18:58] <nothingmuch> but Test::More implies diag goes out to stderrr, when it doesn't

[19:00] <clkao> nothingmuch: do you hate software?

[19:01] <nothingmuch> clkao: very

[19:03] <gaal> awww, crap. and it's impossible to synchronize streams.

[19:03] <xerox> Today I saw a slick implementation of streams in Haskell-on-acid.

[19:04] *** fglock joined
[19:04] <nothingmuch> gaal: moose

[19:04] <gaal> nothingmuch: elk

[19:05] <xerox> Yak.

[19:06] <fglock> clkao: my last Compiler::Perl6 change may have broken error reporting back to v6.pm

[19:06] <obra> gaal: we're very, very close to doing a first cpan release of chimps

[19:07] <gaal> obra: excellent!!

[19:07] <obra> I suspect we may want a little help to add in the hooks pugs needs to do your sexy, sexy test-linking

[19:07] <gaal> <stevan audreyt> >>.ping

[19:07] <nothingmuch> obra: with non HTML result formats?

[19:07] <obra> gaal: audreyt is off to food.

[19:07] <obra> nothingmuch: I don't actually know ;)

[19:07] *** DaGo joined
[19:07] <nothingmuch> obra: you really want that

[19:07] <obra> I know

[19:08] <obra> but. what we have now is still better than what's out there for most everyone

[19:08] <gaal> nothingmuch: what do you mean by non-HTML result formats? I mean, Dump($tap)?

[19:08] <obra> and getting it released and getting people hacking on it and using it is more important than making it Entirely Perfect

[19:08] <nothingmuch> gaal: yes

[19:08] <obra> (I think this 0.001, not 1.00)

[19:08] <nothingmuch> Test::TAP::Model was designed for that

[19:09] <nothingmuch> obra: you know that there is smolder.sf.net

[19:09] <gaal> obra: util/catalog_tests.pl is slightly hacky. I'd suggest, first, porting it to TTM

[19:09] <nothingmuch> http://sf.net/projects/smolder

[19:09] <nothingmuch> cgi app based smokeserver

[19:10] <nothingmuch> hmm, i wonder where they got this from: http://sourceforge.net/project/screenshots.php?group_id=161136&ssid=29635

[19:10] <nothingmuch> ;-)

[19:10] <obra> nothingmuch: no, I've never seen it

[19:10] <gaal> also, it presupposes the small TAP position patch (basically two lines in Test::More or somewhere like that)

[19:11] <gaal> In Perl 6, those two lines are:

[19:11] <gaal> $Test::ALWAYS_CALLER = %*ENV<TEST_ALWAYS_CALLER>; # at module init

[19:11] <gaal> $out = "$out <pos:$?CALLER::CALLER::POSITION>" if $Test::ALWAYS_CALLER;   # in &proclaim

[19:11] * gaal looks at Test::More

[19:12] *** kudra left
[19:13] <gaal> ok in Test::More it's delegated to Test::Builder, and is just a little more complicated, because that isn't careful about uniform callstack depths

[19:14] <gaal> an AOPish solution would be prettiest for this :/

[19:17] <gaal> either that, or walk up caller() filtering out stuff from /^Test/ packages, but that's kinda ugly.

[19:18] <gaal> incidentally, TimToady++ for seeing that caller :LABEL is useful

[19:21] <gaal> bbiab &

[19:25] <kolibrie> would some volunteers like to test http://sial.org/pbot/18347 and tell me if any of the commented out 'schedule' rules work?

[19:25] <lambdabot> Title: "Paste #18347 from "kolibrie" at 66.239.158.2"

[19:26] <kolibrie> needs parrot r13061 or later

[19:27] *** r0nny joined
[19:34] <sahadev> hello, how do fix this compilation error ?

[19:34] <sahadev> Cannot import `Data.ByteString':

[19:34] <sahadev>   it was found in multiple packages: pugs-fps-0.7 fps-0.7

[19:34] <sahadev>   (imported from src/Pugs/AST/Internals/Instances.hs)

[19:35] <audreyt> sahadev: ghc-pkg unregister fps

[19:35] <audreyt> sudo if neccessary

[19:35] <xerox> pugs does weird things wrt fps

[19:35] <audreyt> xerox: Cabal is broken, more likely

[19:35] <audreyt> :/

[19:35] <audreyt> SyntaxNinja volunteered this workaround

[19:35] <xerox> Aww.

[19:35] <audreyt> but we still need a more robust solution to say "prefer this package"

[19:35] <xerox> What does the breakage look like?

[19:36] <audreyt> xerox: can't tell cabal to use a package.conf only

[19:36] <audreyt> need food, will bbiab :) &

[19:36] <xerox> ~~ enjoy

[19:36] *** rindolf joined
[19:36] <rindolf> Hi all.

[19:37] <sahadev> audreyt: "ghc-pkg: cannot find package fps"

[19:37] <sahadev> and "ghc-pkg: cannot find package fps-0.7"

[19:37] <audreyt> sahadev: sudo ghc-pkg ?

[19:37] <sahadev> yet, "ghc-pkg list" shows fps-0.7

[19:37] <sahadev> yes, it was with sudo

[19:38] <audreyt> ghc-pkg unregister --user fps-0.7

[19:38] <sahadev> ah! that did the trick

[19:38] <sahadev> thank you

[19:38] <audreyt> np :) &

[19:39] *** fglock joined
[19:40] *** macroron joined
[19:44] <stevan> gaal: pong

[20:00] *** kudra joined
[20:06] *** r0nny joined
[20:07] <gaal> hey stevan, I wanted to work some on the MOP in pugs

[20:07] <gaal> http://svn.openfoundry.org/pugs/src/Pugs/MOP.hs

[20:08] <gaal> there are a few "stevan" todos there

[20:08] <stevan> gaal: hmm, I have no tuits today,.. but I should have some tomorrow

[20:09] <gaal> okay, it's getting late here anyway. but let's try to moose it soon

[20:11] <stevan> gaal: agreed

[20:11] <gaal> yay

[20:15] *** fglock_ joined
[20:22] <ajs> "let's try to moose it soon": Perl 6 speak for "have youre lawyer's machine call my lawyer's machine, we'll do lunch!"

[20:23] *** cognominal left
[20:25] *** cognominal joined
[20:33] <FurnaceBoy> "have your moose call my moose"?

[20:34] *** bpphillips left
[20:37] <ajs> FurnaceBoy: Our moose are not Herbert... we reach... oh, sorry, different decade.

[20:38] <FurnaceBoy> well, my moose simply said, "That trick never works."

[20:38] <ajs> *snort*

[20:38] <FurnaceBoy> oups

[20:38] <FurnaceBoy> wrong way round

[20:39] <FurnaceBoy> well, my moose simply said, "watch me pull a rabbit out of a hat!"

[20:39] <svnbot6> r11485 | Sage++ | More parser revisions. Heredoc support is in the code, but does not work correctly (but doesn't perturb anything else either). Empty yaml now supported (i.e. /- ''/). Foreach revised and expanded, foreach my $foo (@bar) now translates to foreach @bar -> my $foo (further support may be needed, but split.t is now completely translated). Revised support for literals in multiline quoted yaml scalars. mainParse useage is now mainParse inputf

[20:39] * FurnaceBoy hasn't seen the show for a long, long time...

[20:40] *** hexmode joined
[20:49] *** FurnaceBoy_ joined
[20:54] <kolibrie> audreyt: I thought that pmichaud had made changes to PGE to get <ws> to be overridden in a grammar, but I am not seeing a commit from him during that time (parrot r13059 - r13061)

[20:55] <pmichaud> <ws> can be overridden in a new grammar

[20:55] <kolibrie> pmichaud: do you have recollections of that fix?

[20:55] <pmichaud> it's been that way for a long time

[20:56] <kolibrie> so it was just audreyt's bridge that needed to change?

[20:57] <kolibrie> I know it worked on her laptop that night, but I can't get it to work anywhere else (feather, locally)

[20:57] <pmichaud> I think so

[20:58] *** gruft1 joined
[20:58] <kolibrie> pmichaud: okay.  Maybe audreyt can help

[21:00] <kolibrie> pmichaud: by-the-way, thank you for promptly implementing <'...'> literal matches after I asked

[21:00] <pmichaud> kolibrie: my pleasure.  In fact, when I went to look to see if any tests were there, they already existed :-)

[21:00] <kolibrie> nice!

[21:00] <pmichaud> kolibrie: and I've already come across a couple of cases where they were needed/useful, so it was a big win

[21:06] <kudra> goodnight

[21:08] <ivanfrey> Should I run smoke tests every day?

[21:21] <svnbot6> r11486 | clkao++ | Support default value in signature.

[21:23] *** fglock joined
[21:31] <fglock> v6-pugs was sent to backpan

[21:33] <ruoso> fglock, ?

[21:33] <fglock> ruoso: hi

[21:34] <ruoso> fglock, hi..

[21:35] <ruoso> fglock, so v6-pugs is now v6-alpha...

[21:35] <fglock> ruoso: yes - it makes more sense across implementations

[21:36] <fglock> it gives a feeling of "the real thing" too :)

[21:37] <ruoso> hehe ...

[21:37] <ruoso> in fact v6-pugs was a bit confusing with pugs itself

[21:38] <clkao> fglock: you didn't fix my :foo(1) parsing

[21:38] <clkao> i was to have perl6_expression in ()

[21:39] <fglock> clkao: I'll fix it now

[21:40] <clkao> fglock: excellent

[21:40] <clkao> i'd love to learn how to

[21:42] <svnbot6> r11487 | fglock++ | v6 - aborts code emission if there is a parser error

[21:42] <fglock> clkao: I think it's better to move the implementation to plain rules - I'll do this first

[21:43] *** qu1j0t3 joined
[21:48] <svnbot6> r11488 | fglock++ | v6 - cleanup comments in Term.pm

[21:51] *** ivanfrey joined
[21:52] * ruoso will use v6-alpha to write a quick latex(abntex)2txt converter

[21:54] <fglock> ruoso: rules are not fully implemented yet

[21:54] <ruoso> ahhh

[21:54] <ruoso> :)

[21:55] <fglock> but you can help :)

[21:55] <ruoso> :)

[21:55] <ruoso> what's missing?

[21:57] *** FurnaceBoy_ joined
[21:58] <fglock> ruoso: I think the 'token' declaration already works - I'm not sure how well ~~ works - this is mostly in Emitter/Perl6/Perl5.pm

[21:59] <ruoso> ok... so it can parse it already...

[22:00] <ruoso> but the generated code is still buggy...

[22:00] <ruoso> is it?

[22:01] <fglock> it is untested - probably buggy

[22:01] <ruoso> ah... ok... so first step is to write test cases...

[22:02] <fglock> ruoso: you can reuse pugs tests - v6-alpha can run ext/Test.pm !

[22:02] <ruoso> hmm... nice

[22:03] <fglock> clkao: I'll check :foo(x) now

[22:03] <clkao> fglock: yay

[22:03] <fglock> ruoso: see t/08-test.t

[22:04] <fglock> oops - I killed a terminal and it closed my editor

[22:04] <svnbot6> r11489 | fglock++ | v6 - rewrite of 'pair' parser using rules

[22:04] <ruoso> heh

[22:04] <fglock> clkao: this is not :foo(x) yet

[22:07] * ruoso prays for a better bandwidth

[22:11] <fglock> clkao: please try again

[22:11] <svnbot6> r11490 | fglock++ | v6 - more pair parsing - ':foo<bar>; :$foo; :foo; :foo(1+1);'

[22:11] <svnbot6> r11490 | fglock++ | { 'foo' => 'bar' };

[22:11] <svnbot6> r11490 | fglock++ | { 'foo' => $foo };

[22:11] <svnbot6> r11490 | fglock++ | { 'foo' => 1 };

[22:11] <svnbot6> r11490 | fglock++ | { 'foo' => 1 + 1 };

[22:11] <clkao> yey

[22:12] <wolverian> o vey!

[22:12] <fglock> clkao: now I can guide you through the code - see Term.pm #229

[22:13] <clkao> fglock: now that looks easy ;)

[22:14] <fglock> if ' :foo{"bar"} valid syntax too?

[22:15] <clkao> i think so

[22:15] <clkao> :infix{"+"}

[22:15] <clkao> :infix<+>

[22:15] <clkao> fglock: also there are ony two tests hanging compiling

[22:16] <clkao> subroutine / subroutine and multidimension

[22:17] <fglock> mm - it's a hash deref - not a pair constructor

[22:18] <fglock> I'm not sure how it works

[22:20] <clkao> (!)

[22:20] <svnbot6> r11491 | clkao++ | $*PID & $*EXECUTABLE_NAME.

[22:20] <clkao> t/Dialects/perlego/ passes

[22:21] <fglock> t/subroutines/subroutine.t parsefails, but doesn't hang

[22:21] <clkao> oh ok. maybe it got fixed

[22:22] <clkao> fglock: can you check my signature default param rules, see if i am crazy and using something redundant?

[22:23] <fglock> clkao: it look ok

[22:23] <fglock> looks

[22:24] <clkao> thanks

[22:24] <fglock> maybe it should allow a <ws> after '='

[22:24] <clkao> i tried with a space and it seems to work

[22:24] <clkao> so i am bit confused about the ws

[22:25] <fglock> ok - Expression.pm removes extra ws - no problem

[22:26] <fglock> line #81

[22:30] *** cjeris left
[22:32] <fglock> what does '{ @;AoA }' means in t/subroutines/multidimensional_arglists.t ?

[22:33] *** prefiks left
[22:33] <fglock> is '@;AoA' a single identifier?

[22:34] <fglock> I'll parse it as 'not implemented' for now

[22:39] <TimToady> the @;AoA syntax changed into the @@AoA syntax.

[22:40] <fglock> is @;AoA just a syntax error?

[22:41] <TimToady> should be, until we come up with a different use for a ; twigil.

[22:41] <fglock> ok!

[22:42] <clkao> is there test for subs without signature but with parameter ?

[22:43] <clkao> t/data_types/subtypes.t hangs as well

[22:44] <svnbot6> r11492 | fglock++ | v6 - @;AoA is a syntax error; fixed infinite loop

[22:46] <fglock> clkao: it's not hanging here

[22:46] <fglock> maybe it's fixed

[22:53] *** leo-max joined
[22:53] <leo-max> hi all

[22:53] *** penk joined
[22:54] <leo-max> just wanted you to know... you [perl6 dev team] have totally screwed it in every possible way :(

[22:54] <leo-max> not even funny

[22:54] <TimToady> would you like a commit bit?

[22:58] * ruoso really hopes to have a better bandwidth someday

[23:04] * ruoso also hopes for a better processor... 

[23:05] <ruoso> fglock, are many tests failing? or I just have my environment screwed

[23:05] <ruoso> ?

[23:06] <clkao> ruoso: PCR? make clean first

[23:06] <fglock> ruoso: check the Pugs-Compiler-Rule installation - see also the Requirements section in v6 pod

[23:06] <fglock> bbiab &

[23:07] * ruoso going home...

[23:10] <clkao> we pass 424 tests as of now

[23:11] <clkao> (was 225 two days ago)

[23:21] <obra> nice

[23:40] *** Davemon joined
[23:42] *** Davemon is now known as Daveman

[23:52] *** macroron joined
