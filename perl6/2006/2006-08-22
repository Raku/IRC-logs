[00:07] *** frankg joined
[00:08] <frankg> read about perl6 inards the other day but I'm curious about the outer stuff now -- is the syntax completely diff from perl5?

[00:08] <frankg> as far as the OOP stuff goes?

[00:08] <zgh> different enough, they're not going to backwards compatibility for the syntax

[00:09] <zgh> the object model is the same I think, at least the perl6 object model is available in perl5 now with Moose

[00:09] <markstos> frankg: syntax for Perl6 objects is described here: http://dev.perl.org/perl6/doc/design/syn/S12.html

[00:09] <lambdabot> Title: Synopsis 12: Objects -

[00:09] <frankg> cool - that's what I need

[00:10] <markstos> frankg: I think you'll be happy that writing "my $self = shift" frequent is no longer necessary. :)

[00:10] <markstos> You can skip that and just write self.other_method if you need to.

[00:10] <frankg> yes, nice change -- I really want to see how it compares to python and ruby

[00:10] <zgh> favorably

[00:10] <zgh> :-)

[00:10] <frankg> good to know

[00:25] *** nekokak joined
[00:26] *** xdg joined
[01:24] *** dolmans joined
[01:32] *** mauke_ joined
[01:35] *** justatheory joined
[01:38] *** zgh left
[01:42] *** mauke_ is now known as mauke

[02:07] *** Khisanth joined
[02:11] *** evalbot_12583 joined
[02:26] *** agentzh joined
[02:26] <agentzh> hi, there~

[02:27] <agentzh> audreyt: i feel like writing about Judy on win32 and smartlinks.pl on your blog site. :)

[02:28] <agentzh> but first of all, i need to setup the auto-updating mechanism on feather. ;-)

[02:28] <agentzh> Juerd++

[02:31] <agentzh> TreyHarris: those two bugs in smartlinks.pl were fixed last night. feel free to complain to me if you encounter another bugs. ;-)

[02:31] <agentzh> *bug

[02:35] *** mako132_ joined
[02:35] <markstos> More Perl6 blogging: http://use.perl.org/~markjugg/journal/30714

[02:35] <lambdabot> Title: Journal of markjugg (792)

[02:37] <TreyHarris> markstos: "new() is not needed for simple objects"?  you mean defining a new sub is not required?

[02:40] <markstos> TreyHarris: right. See http://dev.perl.org/perl6/doc/design/syn/S12.html and search on the page for...

[02:40] <lambdabot> Title: Synopsis 12: Objects -

[02:40] <markstos> All classes inherit a default new constructor from Object.

[02:40] <markstos> Perl5 has no default new(), and Perl6 does.

[02:41] <markstos> Although, I'm sure one of the method-making or object-making modules in Perl5 has a default like this.

[02:41] <wolverian> markstos, "ww// has been replaced with  < &gt"

[02:41] <wolverian> er, s/ww/qw/

[02:41] <wolverian> markstos, you're probably missing a trailing ; on the entity

[02:42] <markstos> fixing...

[02:44] <TreyHarris> markstos: sorry, yes, I knew that defining a new was not required.  but that bullet point makes it sound like *calling* new() isn't required

[02:44] *** agentzh joined
[02:46] <markstos> Ah. I'll see if I can clarify.

[02:46] <TreyHarris> (if you'll recall, I'm the one who informed you of that ;-)

[02:48] <markstos> Oops. Everyone looks sort of the same on IRC.

[02:48] <TreyHarris> heh, true :-)

[02:48] <markstos> If only we had floating photos next to our names.

[02:49] *** kanru joined
[02:49] <markstos> Except those can be annoying sometimes...

[02:50] <markstos> TreyHarris: I've updated the post now to give you a credit mention at the bottom. Thanks!

[02:50] <markstos> wolverian: you too!

[02:51] <wolverian> thanks :)

[02:51] <wolverian> markstos++ # spreading the word

[02:52] *** putter joined
[02:55] <TreyHarris> I need to get people to start giving karma to trey++.  I'm only TreyHarris on freenode, because somebody else grabbed the nick from nickserv first

[02:55] <TreyHarris> but thanks :-)  markstos++

[02:59] *** agentzh joined
[03:00] <agentzh> oh, dear...the terminal of feather is pretty slow here...

[03:05] *** xinming_ joined
[03:09] *** hikozaemon joined
[03:12] <markstos> Ok. I think I found a bug. I'll explain it here, if it sounds like a bug to you, too, I'll submit a formal test for it.

[03:13] <putter> audreyt, etal: Did a paragraph ever get written sketching what is interesting about p6 from a CS perspective?  Ie, the type system, STM, parallel stuff, rules, syntactic flexibility, etc.

[03:13] <putter> I'm mainly thinking of a concise jargony characterization.  Though a longer sketch might be interesting too.

[03:13] <putter> Moving on, (stevan - the tradition continues;) has there been any thought on some standard sub/macro names for low-level elements of p6 behavior?  Like method calls or multi dispatch.  Basically the prelude can define a lexically scoped MOP, which the normal "make prelude go fast" tools can usually compile away.

[03:14] <putter> So aggressive flexibility for both syntax _and semantics_.  :)

[03:14] <markstos> If declare a simple parent and child class in the same file, things are fine. However, if I split it up into a parent class file, a child class file, and script to invoke the child, the bug appears. The child file can't find the parent unless I add "use Parent" to  the child file. Shouldn't "class Child is Parent" be enough ?

[03:15] <svnbot6> r12584 | agentz++ | [util/smartlinks.pl]

[03:15] <svnbot6> r12584 | agentz++ | - commented out "use YAML::Syck;", since we no longer need it here.

[03:15] <agentzh> ?eval 1+2

[03:15] <evalbot_12583> 3

[03:16] <markstos> Adding "use Parent" seems wrong, because it's traditionally a "has-a" relationship.

[03:17] <agentzh> ?eval 1+2

[03:17] <evalbot_12583> 3

[03:22] <agentzh> oh, too bad...feather's apache uses the ISO-8859-1 charset...how can i change that to UTF-8?

[03:23] <agentzh> Juerd? audreyt?

[03:25] *** weinig is now known as weinig|zZz

[03:27] * agentzh has found an answer from Google. :D

[03:28] <TreyHarris> didn't Damian say something at YAPC about writing up a "why Perl 6 should be interesting to academics" monograph?

[03:29] <TreyHarris> markstos: not sure if that is wrong or not.  it follows Perl 5, certainly--becoming a subclass of module A requires that you use module A before you express that relation.  TimToady was saying last night that 'does' may need to have implicit requiring sometimes.  perhaps 'is' would be covered by the same thing

[03:30] <TreyHarris> (C<but> too)

[03:30] <TreyHarris> s/have implicit/cause implicit/

[03:31] <markstos> TreyHarris: Thanks for the response. I just asked on p6l for the Synopsis (12) to be clarified regarding this matter... it doesn't say one way or the other right now.

[03:35] *** justatheory joined
[03:36] *** traecer joined
[03:37] <markstos> What's the equivalent for (scalar @a) ?

[03:37] <markstos> ( Is there a handy p5 -> p6 conversion chart ?  )

[03:38] <PerlJam> markstos: scalar @a still works.  You just have to use it in the right context to get the right value out :)

[03:39] <markstos> Ah.

[03:39] <markstos> I also found Perl6/Perl5/Differences.pod, which I'm reviewing.

[03:40] <markstos> I think the answer might be @array.elems

[03:40] <TreyHarris> markstos: yes, that's what you want

[03:40] <TreyHarris> PerlJam: AFAIK, scalar @a doesn't work.  pugs doesn't like it

[03:40] <TreyHarris> ?eval my @a = 1..5; scalar(@a)

[03:40] *** evalbot_12583 is now known as evalbot_12584

[03:40] <evalbot_12584> Error: No compatible subroutine found: "&scalar"

[03:41] <markstos> Right. That's what I got.

[03:41] <TreyHarris> ?eval my @a = 1..5; +(@a)

[03:41] <evalbot_12584> 5

[03:41] <TreyHarris> that works too

[03:41] <TreyHarris> but .elems is clearer

[03:41] <TreyHarris> ?eval my @a = 0..5; +(@a)

[03:41] <evalbot_12584> 6

[03:42] * PerlJam could have sworn scalar was still in the perl lexicon

[03:43] <TreyHarris> no.  it's $(), @(), %() now.  but autoboxing means the scalar value of @a is not what you want:

[03:43] <TreyHarris> ?eval my @a = 0..3; $(@a)

[03:43] <evalbot_12584> [0, 1, 2, 3]

[03:43] <TreyHarris> scalar @a is just an array as a reference (what we'd call an arrayref in Perl 5)

[03:43] <TreyHarris> er, s/as a reference/as a scalar/

[03:46] *** justatheory joined
[03:50] <TreyHarris> +(), ?(), and !() are sub contexts of scalar for numeric, boolean, and boolean-negating

[03:51] <markstos> I'm trying to set a default value for a class trait. It looks like a specc'ed but unimplemented feature:

[03:51] <TreyHarris> ?eval my @a = 0..3; my @b; [+(@a), ?(@a), ?(@b)]

[03:51] <evalbot_12584> [4, Bool::True, Bool::False]

[03:51] <markstos> ?eval class Foo { has $.prop is rw = 1; }

[03:51] <evalbot_12584> Error:  unexpected "=" expecting trait, "handles", comment, ";" or "}"

[03:51] <TreyHarris> markstos: yes

[03:51] <markstos> TreyHarris: Is there a recommended workaround, short of declaring a method for that?

[03:52] <markstos> I suppose I would just write $.prop = 1; at the top of the file...

[03:52] <TreyHarris> ?eval class Foo { has $.prop is rw; START { $.prop = 1 } }

[03:52] <evalbot_12584> Error: Cannot cast into Hash: VRef <Sub:0x894c330>

[03:53] <markstos> TreyHarris: Is the START block necessary to set a class default ?

[03:54] <TreyHarris> ?eval class Foo { has $.prop; method BUILDALL { $.prop = 1 } }

[03:54] <evalbot_12584> undef

[03:54] <TreyHarris> markstos: no, was looking for a workaround

[03:54] <markstos> What about just:

[03:54] <TreyHarris> ?eval class Foo { has $.prop; method BUILDALL { $.prop = 1 } }; my Foo $bar .= new; $bar.prop

[03:54] <evalbot_12584> \undef

[03:55] <markstos> ?eval class Foo { has $.prop;  $.prop = 1;  }

[03:55] <TreyHarris> ?eval class Foo { has $.prop; method BUILD { $.prop = 1 } }; my Foo $bar .= new; $bar.prop

[03:55] <evalbot_12584> Error: Cannot cast into Hash: VRef <Sub:0x894c330>

[03:55] <evalbot_12584> \1

[03:55] <TreyHarris> ?eval class Foo { has $.prop; method BUILD { $.prop = 1 } }; my Foo $bar .= new; $bar.prop

[03:55] <evalbot_12584> \1

[03:55] <TreyHarris> that's what you want

[03:55] <TreyHarris> well, no, not what you want.  but it's a workaround that works :-)

[03:55] <markstos> ?eval class Foo { has $.prop;  $.prop = 1;  }

[03:55] <evalbot_12584> Error: Cannot cast into Hash: VRef <Sub:0x894c330>

[03:56] <markstos> TreyHarris: Thanks!

[03:57] <TreyHarris> generally you don't want executable lines inside a class entry.

[03:57] <TreyHarris> s/entry/definition/

[03:57] <TreyHarris> must go for awhile

[03:57] <TreyHarris> &

[03:57] <markstos> That makes sense.

[04:26] <TimToady> that should be a submethod BUILD.

[04:27] <markstos> TimToady. Thanks. I'll change my code.

[04:31] <TimToady> and if it works, it should probably be seeing $!prop since it's trying to set the internal storage, not the virtual.

[04:31] <TimToady> *setting

[04:32] <TimToady> but the OO implementation is all getting reworked soon...

[04:44] *** markstos left
[04:58] *** avarab joined
[05:14] *** agentzh joined
[05:15] <TreyHarris> < TimToady> but the OO implementation is all getting reworked soon...

[05:16] <TreyHarris> talk about quietly dropping a bombshell :-)

[05:17] *** lambdabot joined
[05:18] <wolverian> I think he means pugs's internals ...

[05:28] *** Khisanth joined
[05:34] <TreyHarris> is there any workaround to overload an object's stringification, since neither *infix:<as> nor prefix:{'~'} seem to currently work?

[05:40] *** jferrero joined
[05:49] *** xinming joined
[06:09] <agentzh> http://feather.perl6.nl/~agentzh/syn/

[06:09] <lambdabot> Title: Index of /~agentzh/syn

[06:11] <wolverian> nice.. what's up with the huge dividers?

[06:14] *** marmic joined
[06:14] <agentzh> dividers?

[06:16] <wolverian> between the sections

[06:16] <wolverian> e.g. immediately after the table of contents, there are two of them, with "back to top" in between

[06:16] <wolverian> the dividers seem oddly big, vertically

[06:17] <agentzh> okay, i'll remove the dividers soon. ;-)

[06:18] <agentzh> i'm also feeling uncomfortable with dev.perl.org's CSS.

[06:18] <agentzh> wolverian: what's your favourite CSS for pod2html?

[06:18] <wolverian> I don't have one.. they all seem rather unsexy

[06:18] * agentzh is sad...

[06:19] <wolverian> the CPAN CSS is ok

[06:19] <agentzh> i'll look into ActiveState's CSS and also JSAN's.

[06:19] * agentzh thinks CPAN's CSS is terrible.

[06:19] <wolverian> I'd like to see one where the table of contents is a sidebar

[06:19] <wolverian> and the titles aren't in ALLCAPS

[06:19] <wolverian> :)

[06:20] <wolverian> (doable-ish with CSS)

[06:21] <agentzh> hmm, maybe we should get someone to write a new CSS file.

[06:21] *** Aankhen`` joined
[06:22] <wolverian> hm, the index <ul> isn't marked with a specific class or id

[06:23] <agentzh> btw, http://feather.perl6.nl/~agentzh/syn will be automatically updated every one hour. ;-)

[06:23] <lambdabot> Title: Index of /~agentzh/syn

[06:23] <agentzh> wolverian: the index is generated by Pod::Html. :)

[06:26] <wolverian> yup

[06:27] <wolverian> it doesn't validate, btw :-)

[06:27] <wolverian> missing one alt attribute

[06:27] <wolverian> er, that was a random CPAN page, sorry

[06:28] <wolverian> well, http://validator.w3.org/check?uri=http%3A%2F%2Ffeather.perl6.nl%2F%7Eagentzh%2Fsyn%2FS02.html

[06:28] <wolverian> ouch

[06:28] <lambdabot> Title: Result for http://feather.perl6.nl/~agentzh/syn/S02.html - W3C Markup Validator

[06:30] <agentzh> wolverian: fixing

[06:30] <wolverian> agentzh++

[06:30] <wolverian> I'm fearfully low on tuits, sorry

[06:30] <agentzh> np

[06:33] *** baest joined
[06:56] <agentzh> wolverian: sigh. most of the HTML errors are caused by Pod::Html...

[06:56] <lambdabot> Im going to be a movie star.  I just applied online for this new movie with chris farley.  It only cost me $50!

[06:56] <wolverian> agentzh, really? I wonder why it claims to be xhtml 1.0 strict then..

[06:56] <lambdabot> i'm 19

[06:56] <wolverian> and what does search.cpan.org use then? (it has only sporadic errors)

[06:57] <agentzh> i'll upgrade my local Pod::Html then.

[06:57] <wolverian> there's Pod::Xhtml too, from BBC :)

[06:58] <agentzh> looking

[06:58] <wolverian> oh.. search.cpan.org is html4

[07:01] <agentzh> i'm wondering which module search.cpan.org is using.

[07:01] <svnbot6> r12585 | agentz++ | [util/smartlinks.pl]

[07:01] <svnbot6> r12585 | agentz++ | - first attempt to fix HTML errors, wolverian++

[07:03] *** ludan joined
[07:03] * agentzh is pondering switching to Pod::Xhtml.

[07:06] <xinming> hmm, anyone here who uses emacs for editing perl 6 scripts?

[07:17] <TreyHarris> xinming: I do

[07:23] *** neoesque joined
[07:23] *** Lorn joined
[07:25] <xinming> TreyHarris: hmm, Ok, since in perl 6, we can't use `sub { } sub { }`, so, we need `sub { }; sub { }` but the problem is, if you use indent in cperl-mode, It will make a newline for the ';' How can we avoid this?

[07:26] <xinming> TreyHarris: I mean the C-M-\

[07:26] *** iblechbot joined
[07:26] <xinming> TreyHarris: try a small example with C-x h C-M-\

[07:35] *** avar joined
[07:41] <TreyHarris> xinming: i'm not seeing that behavior

[07:41] <TreyHarris> can you paste a small script so i can try what you're trying?

[07:42] <xinming> lisppaste3: url

[07:42] <lisppaste3> To use the lisppaste bot, visit http://paste.lisp.org/new/perl6 and enter your paste.

[07:42] <xinming> TreyHarris: Ok.

[07:45] <lisppaste3> xinming pasted "indent problem for perl6" at http://paste.lisp.org/display/24531

[07:45] *** SSelva joined
[07:46] <xinming> TreyHarris: I think you've customized your cperl-mode, Mine is not configured, I'm lazy to do customization if it doesn't hurt. :-)

[07:46] <TreyHarris> xinming: no, i'm seeing the same behavior

[07:46] <TreyHarris> but why do you have semicolons there?

[07:46] <agentzh> wolverian: the HTML code generated by Pod::Xhtml contains almost 0 error. :)

[07:47] <wolverian> agentzh, almost? :(

[07:47] <agentzh> there's 1 warning according to my Firefox.

[07:48] <xinming> TreyHarris: Because, in perl 6, 'sub { } sub { }' is not allowed.

[07:48] <TreyHarris> that's true

[07:48] <TreyHarris> but you're not on the same line

[07:48] <TreyHarris> a closing brace as the last thing on a line always terminates a statement

[07:48] <TreyHarris> so the semicolon is not required

[07:49] * xinming is ashamed for a long time not follow the synopsis...

[07:49] <xinming> TreyHarris: thanks

[07:49] <TreyHarris> "sub foo { ... }; sub bar { ... }", but "sub foo { ... }\nsub bar { ... }"

[07:50] <TreyHarris> thought i think there's an exception for "if $foo { ... }\nelse...."

[07:50] <agentzh> wolverian: sadly the HTML pages from Pod::Xhtml are ugly... :/

[07:50] <xinming> I understand now, for two sub { } in a line without semicolon would raise an error.

[07:50] <TreyHarris> xinming: exactly

[07:50] <xinming> but if they are not in a line, then, they are legal.

[07:50] <wolverian> agentzh, surely you can change the CSS?

[07:51] * xinming thinks, It's like a small trick in perl 6. :-)

[07:51] <agentzh> wolverian: well, it's not a CSS issue. Pod::Xhtml inserts too many "<br /><br />" into the page.

[07:51] <wolverian> oh

[07:51] <wolverian> time for a subclass

[07:51] <wolverian> Pod::Xhtml::Cute

[07:52] <agentzh> hehe

[07:53] <agentzh> wolverian: subclassing now...

[07:54] <wolverian> :-)

[07:54] <wolverian> agentzh++

[07:54] <agentzh> i wonder if i should send Pod::Xhtml::Cute to CPAN. :)

[07:55] <TreyHarris> xinming: it's very like the trick about everything being a closure now, or $foo = @bar not being a reference but still making $foo have the content of @bar.  it's all very subtle stuff that TimToady++ has put a lot of thought into so that you don't have to think about it most of the time :-)

[07:56] *** kane-xs joined
[07:59] <TreyHarris> audreyt: it's midafternoon, where have you been all day?  we miss you. :-)

[08:05] *** nothingmuch joined
[08:07] <TreyHarris> moose!

[08:10] *** Lorn_ joined
[08:10] <agentzh> wolverian: i think postprocessing the HTML source is the simplest way. Pod::Xhtml is not well designed and subclassing it is particularly hard.

[08:11] <wolverian> agentzh, oh. well then.

[08:11] <wolverian> HTML::TreeBuilder to the rescue!

[08:11] <wolverian> (or if you can find a valid SGML POD outputter, XML::LibXML would work too)

[08:12] <agentzh> wolverian: why not plain regexes?

[08:12] <agentzh> i think plain regexes are fine.

[08:12] <agentzh> only a few lines of code...

[08:13] <wolverian> because it's reinventing the wheel

[08:13] <wolverian> the various ways that HTML can be broken are so mindbogglingly, well, various that you don't want to touch it yourself

[08:14] <agentzh> hehe, i don't just want another dependency and extra cost.

[08:14] <agentzh> s/don't just/just don't/

[08:14] <agentzh> everything you said is quite true. :)

[08:15] <wolverian> mm, well discuss it with audrey and others if you think you don't want to make the decision

[08:15] <agentzh> hmm, the HTML source is generated from Pod::Xhtml, so i think it's fine as long as Pod::Xhtml doesn't change.

[08:16] <wolverian> well if you have a dependency on Pod::Xhtml already.. adding another isn't much

[08:16] <wolverian> and HTML::TreeBuilder is rather common

[08:17] *** elmex joined
[08:17] <agentzh> hehe, okay, i'll leave that to someone else as an exercise.

[08:17] <wolverian> sure

[08:18] <agentzh> in the meantime, i'll use the regexes.

[08:18] <agentzh> :)

[08:19] <wolverian> XML::Liberal is nice too

[08:20] <agentzh> looking now

[08:25] <agentzh> oh dear...Pod::Xhtml doesn't support "=hegin html"...

[08:25] <svnbot6> r12586 | masak++ | * realized, through Conrad Schneiker's mail to perl6-users, that there's a search interface for #perl6 archives at http://colabti.de/irclogger/irclogger_log_search/perl6

[08:25] <svnbot6> r12586 | masak++ | * added 14 new references to READTOO that turned up by searching archives for "paper"

[08:25] <svnbot6> r12586 | masak++ | * (still need to backlog just to be sure, though)

[08:25] <svnbot6> r12586 | masak++ | * removed section headings "Current" and "Older" in READTOO, since they were not used, and no clear motive exists for moving things to Older right now

[08:25] <agentzh> *begin

[08:25] <lambdabot> Title: #perl6 irc log search

[08:28] *** traecer left
[08:44] *** buetow joined
[08:52] <dolmans> say there is a class Point with two attributes x and y, are these legal to constructor an object: new Point(x=>2, y=>3) and Point(x=>2, y=>3)?

[08:53] *** Khisanth joined
[08:54] *** agentzh joined
[08:57] <agentzh> i think i should stick with Pod::Html...Pod::Xhtml is not satisfactory at all...

[09:02] *** chris2 joined
[09:09] <xinming> ?eval class A { method update { $.b = "abcdefg" }}; A.new.update;

[09:09] *** evalbot_12584 is now known as evalbot_12586

[09:09] <evalbot_12586> \"abcdefg"

[09:09] <xinming> hmm, should this raise an error instead of returning the value in $.b?

[09:10] <xinming> because $.b hadn't been declared yet.

[09:17] <nothingmuch> ingy: congratulations!

[09:32] *** MacVince joined
[09:34] *** zgh joined
[09:40] *** avar joined
[09:42] *** integral joined
[09:50] *** drrho joined
[09:58] *** dakkar_ joined
[10:04] *** ruoso joined
[10:28] *** visq joined
[10:40] *** MacVince left
[10:47] *** agentzh joined
[10:53] *** Aankhen`` joined
[10:53] *** Southen joined
[10:55] *** alinbsp joined
[10:59] *** frederico joined
[11:02] <svnbot6> r12587 | agentz++ | [util/smartlinks.pl]

[11:02] <svnbot6> r12587 | agentz++ | - stripped extra newlines

[11:02] <svnbot6> r12587 | agentz++ | - got rid of "=begin html"/"=end html"

[11:26] <svnbot6> r12588 | agentz++ | [util/smartlinks.pl]

[11:26] <svnbot6> r12588 | agentz++ | - added more docs to usage outputs.

[11:26] <svnbot6> r12588 | agentz++ | - added the --fast option with which smartlinks.pl won't

[11:26] <svnbot6> r12588 | agentz++ |   update the synopses from the web.[util/smartlinks.pl]

[11:26] <svnbot6> r12588 | agentz++ | - confirmed that option --syn-dir works

[11:26] <svnbot6> r12588 | agentz++ | - added docs for the --syn-dir option to usage outputs.

[11:32] <svnbot6> r12589 | agentz++ | [t/02-test-pm/5-todo.t]

[11:32] <svnbot6> r12589 | agentz++ | - removed too advanced tests where use "[,] ..."

[11:34] <agentzh> fglock: it seems to me the latest v6.pm still can't compile the new Test.pm with &todo defined. are you using an older version of Test.pm?

[11:38] <agentzh> fglock: sorry, my mistake. it compiles now. ;-)

[11:42] *** iblechbot joined
[11:56] *** elmex joined
[11:57] *** nothingmuch_ joined
[12:15] *** weinig|zZz is now known as weinig

[12:18] *** Limbic_Region joined
[12:26] <Limbic_Region> TimToady - thanks for fixing all_parse.t and some of the examples that weren't passing due to syntax errors

[12:26] * Limbic_Region was afraid he was going to screw something up

[12:28] *** baest joined
[12:29] *** takanori joined
[12:30] <agentzh> oh, it's very quiet here today...

[12:32] *** weinig joined
[12:38] <Limbic_Region> I can see

[12:39] <Limbic_Region> there are certain people that seem to be a catalyst for in channel participation - a synergy gets started and more and more join in

[12:39] <Limbic_Region> when they are absent - people tend to work on stuff on their own

[12:39] <Limbic_Region> both are good things IMO

[12:41] <Juerd> 05:23 < agentzh> Juerd? audreyt?

[12:41] <Juerd> agentzh?

[12:41] <agentzh> Juerd: hi

[12:42] <agentzh> Juerd: cron is really helpful. :)

[12:43] <Juerd> agentzh: Yes, it is. Is this your first experience with it?

[12:43] <agentzh> Juerd: and the .htaccess file also solves the charset problem of Apache.

[12:43] <agentzh> Juerd: yes. i seldom or never use Linux.

[12:44] <agentzh> feather++

[12:44] <Juerd> agentzh: If you have some spare time to write these things in FAQ-form for the website, I'd be delighted

[12:44] <Juerd> (The site is in the pugs repository, under docs/feather)

[12:44] <agentzh> Juerd: i'd love to!

[12:44] <Juerd> Thanks

[12:45] <agentzh> my pleasure. :)

[12:45] <agentzh> currently i'm writing an article on smartlinks.pl for audreyt's blog. :)

[12:46] <agentzh> will do that in an other day. :)

[12:46] <Juerd> What are smartlinks?

[12:47] <agentzh> please look at the outputs of smartlinks.pl and then you'll see:

[12:47] <agentzh> http://feather.perl6.nl/~agentzh/syn/S04.html

[12:47] <lambdabot> Title: S04

[12:48] <agentzh> :)

[12:48] <Juerd> Ooh... Visual coverage :)

[12:48] <agentzh> yeah :)

[12:49] <agentzh> with this tool, i'll be more motivated to write tests for pugs. :)

[12:49] <Juerd> It's great that people create selfmotivators :)

[12:49] <agentzh> ...util every paragragh of the synopses is covered.

[12:49] <agentzh> hehe

[12:49] <agentzh> *until

[13:02] <Limbic_Region> fglock ping

[13:03] *** fglock joined
[13:03] <Limbic_Region> fglock ping

[13:04] <Limbic_Region> oh, he is using CGI:IRC - it takes a second for things to load

[13:04] <Limbic_Region> fglock ping

[13:04] *** vytautas joined
[13:06] <svnbot6> r12590 | fglock++ | v6 - updated command line options, docs (requires a Module::Compile patch)

[13:09] *** fglock joined
[13:10] * Limbic_Region tries again

[13:10] *** fglock joined
[13:10] * Limbic_Region doesn't try again

[13:10] <Limbic_Region> fglock ping

[13:10] <fglock> Limbic_Region: pong - sorry, my browser was frozen

[13:11] <Limbic_Region> no worries - here's the deal

[13:12] <Limbic_Region> for the last two days I have tried to update PCR via CPAN.pm - it keeps telling me it is up to date

[13:12] <pasteling> "agentzh" at 210.22.200.67 pasted "The first sketch of my post on smartlinks.pl to Audrey's blog. Please comment. :)" (107 lines, 4.1K) at http://sial.org/pbot/19212

[13:12] <Limbic_Region> so I decide to go and download and install it manually

[13:12] <Limbic_Region> I click the download link from cpan and get

[13:12] <Limbic_Region> http://fx.saintjoe.edu/pub/CPAN/authors/id/F/FG/FGLOCK/Pugs-Compiler-Rule-0.16.tar.gz - 404 not found

[13:13] <Limbic_Region> any idea what's going on?

[13:13] <integral> (that could be indicative that your mirror is behind; I can get it from a mirror near to me)

[13:14] <agentzh> Limbic_Region: change your CPAN mirror and try again?

[13:14] <Limbic_Region> agentzh - I tried several but perhaps they are all not good

[13:14] <agentzh> really? i'm impressed.

[13:14] * Limbic_Region tries another one at random

[13:14] <fglock> Limbic_Region: try cpan.pair.com

[13:15] <Lorn_> fglock: hi :) do you read my reply?

[13:15] <Limbic_Region> got it

[13:16] <agentzh> oh, the latest one on my mirror is 0.12. sigh.

[13:16] <fglock> Lorn_: I'll read it now

[13:18] <[particle]> agentzh: good blog post

[13:19] <agentzh> particle: thanks!

[13:19] <[particle]> i'm just working on adding some unique ids to the pge test suite

[13:19] <[particle]> i think i may change those to smart links

[13:19] <[particle]> ...that format, anyway.

[13:19] <agentzh> particle: nice

[13:19] <[particle]> right now, they disallow ws chars

[13:19] <[particle]> i could instead wrap them in <>, with optional first char

[13:20] <[particle]> this would be a superset of pod links

[13:20] <agentzh> is there any sample? url?

[13:20] <[particle]> today

[13:20] <[particle]> right now it exists only in coke's working copy of parrot

[13:20] <agentzh> ah, okay. no hurry. :)

[13:23] <fglock> Lorn_: create a local copy with: ' svn co http://svn.openfoundry.org/pugs pugs '

[13:23] <lambdabot> Title: Revision 12590: /

[13:28] *** cjeris joined
[13:28] <audreyt> agentzh: great writeup! I have a feeling that, like TestMatrix, this will propagate to the CPAN community in due time

[13:28] <audreyt> I'd like to annotate my module's tests against POD too :)

[13:28] <agentzh> hehe

[13:28] <agentzh> thank you.

[13:29] <audreyt> it's interesting how Pugs has become a net exporter of software engineering technologies into CPAN...

[13:29] <agentzh> yes, it's fun.

[13:29] <agentzh> -Ofun

[13:30] <audreyt> glad to know that the optimization worked

[13:30] * audreyt spent a whole day with GHC on AIX 4.3... happily everything worked out for $job

[13:30] <Limbic_Region> audreyt - a kludgey version of the example parseability tester is in the repo now

[13:30] <audreyt> Limbic_Region: yes, I noticed, I noted TimToady's commits too :)

[13:30] <audreyt> Limbic_Region++

[13:30] <Limbic_Region> TimToady added a try block which fixed a problem he was having locally plus a half a dozen fixes to the examples

[13:30] <Limbic_Region> oh good

[13:30] <audreyt> TimToady++

[13:30] * Limbic_Region was afraid $work had completely consumed you

[13:31] <Limbic_Region> yes TimToady and audreyt plus plus

[13:31] <audreyt> the client site has no internet

[13:31] <audreyt> so... yeah.

[13:31] <audreyt> (and it's in 8th floor, so citywide wifif didn't work there eitheR)

[13:31] <Limbic_Region> :-(

[13:32] <Limbic_Region> is there any reason for me to test the Win32 whacky behavior or have you not had a chance to look locally yet?

[13:32] <agentzh> audreyt: is there a delay between saving posts and showing posts on your site?

[13:32] <audreyt> I havn't got a chance. fortunately tomorrow is $job-free day

[13:32] <audreyt> agentzh: no there is not

[13:33] * agentzh is trying to find a button to click...

[13:33] <Limbic_Region> well, don't spend a lot of time on it - your time is better used elsewhere - there are kludgey work arounds and "working" is what's important

[13:34] <audreyt> true but, a failing test in t/ will make me feel better :)

[13:34] <audreyt> or a failing test in ext/File-Find/t, come to think about tthat.

[13:34] <audreyt> now the perf work is done, I plan to spend tomorrow looking at regressions

[13:34] <audreyt> before I swap in the new MOP

[13:35] <audreyt> so that the Judy/Interning regressions doesn't get mixed with MOP regressions

[13:35] <audreyt> so if a failing test is there tomorrow I'll look at it... probably first

[13:35] <audreyt> as ext/ sorts higher than t/

[13:35] * Limbic_Region is going to run a new smoke this morning 

[13:35] <audreyt> agentzh: you put the state in "Draft"

[13:36] <agentzh> oh...

[13:36] <Limbic_Region> is there a reason that parrot has to be part of the path to run rules tests or can PCR handle those tests?

[13:36] <agentzh> what can i do now then?

[13:36] <audreyt> nothing... it's posted

[13:36] <audreyt> agentzh++

[13:36] <agentzh> okay, finally see the "publish" option...

[13:37] <audreyt> ...which I pressed for you. it's on air now :)

[13:37] <audreyt> agentzh++

[13:37] <agentzh> :)

[13:38] <agentzh> oh, it looks nice.

[13:39] *** mako132 joined
[13:39] <agentzh> except the titles...

[13:39] <agentzh> i mean subtitles...

[13:40] *** cmarcelo joined
[13:40] <cmarcelo> hello

[13:41] * Limbic_Region repeats his earlier question

[13:41] <agentzh> cmarcelo: hi

[13:41] <Limbic_Region> is there any reason Parrot needs to be accessible to run the full test suite - can't PCR fill the role of rules?

[13:44] <cmarcelo> agentzh++ # smartlinks is cool =)

[13:44] <agentzh> Hmm, good question. :)

[13:44] <agentzh> cmarcelo: thanks!

[13:45] <audreyt> Limbic_Region: yes it can.

[13:45] <audreyt> want to help writing a bridge?

[13:45] <audreyt> also, which one should be fallback?

[13:45] <audreyt> modifier? pragma?

[13:46] <audreyt> use rx 'PCR';?

[13:47] <audreyt> currently Pugs expects to send and receive rule match objects in a particular format

[13:47] <Limbic_Region> audreyt - sorry, was on PerlMonks

[13:47] <audreyt> PGE_Match 2 5 [PGE_Array [PGE_Match 2 5 [] []]] []

[13:48] <audreyt> a dumper form PGE into that format is in parrot/runtime/parrot/library/PGE/Hs.pir

[13:48] <Limbic_Region> not sure as far as writing a bridge - /me thinks fglock much better qualified - but here are some thoughts

[13:48] <audreyt> if PCR match object can dump to that format

[13:48] <audreyt> then we can trivially call out to PCR

[13:48] *** mdiep joined
[13:48] <audreyt> the production rules are:

[13:48] <Limbic_Region> 1.  We should have a single module or pragma that does the fallback for us - that way test scripts are abstracted and any rules plugin can be added later

[13:48] <audreyt>     data MatchPGE

[13:48] <audreyt>         = PGE_Match Int Int [MatchPGE] [(String, MatchPGE)]

[13:48] <audreyt>         | PGE_Array [MatchPGE]

[13:48] <audreyt>         | PGE_String String

[13:48] <audreyt>         | PGE_Fail

[13:49] *** hexmode joined
[13:49] <audreyt> the "Int" part and "String" part are normal numbers and double-quoted strings; the "MatchPGE" part is recursive

[13:49] <audreyt> i.e. it can contain submatches. (either positional in the [MatchPGE] array, or named with the ("name", match) syntax)

[13:50] <Limbic_Region> 2.  That module/pragma should also be our universal translator - we should not expect PGE and PCR to maintain uniformity

[13:50] <audreyt> a "bridge" is a perl5 module, or a new method to PCR's Match, that causes this format be dumped

[13:50] <Limbic_Region> 3.  This should all be done by someone who knows what they are doing ;-)

[13:50] <audreyt> sure. the translator for PGE, for example, ins in src/pge/run_pge.pir

[13:51] <audreyt> which is outside PGE proper

[13:51] <Lorn_> fglock: the problem with Module::Compile it is a v6.pm problem? or Module::Compile problem?

[13:51] *** Lorn_ is now known as Lorn

[13:51] <fglock> audreyt: this command line syntax now works, requires a Module::Compile patch to ignore the '-e' switch: echo 42.say | perl -e 'use v6-alpha'

[13:51] <fglock> Lorn_: it's a perl5 command line problem

[13:51] <audreyt> fglock: oh wow

[13:51] <audreyt> fglock: patch url?

[13:51] <fglock> audreyt: one sec

[13:52] <audreyt> Limbic_Region: do you think calling it re::engine makes sense?

[13:52] <audreyt> or re::override? or just "re"?

[13:53] <Lorn> fglock: hmm, ok, i finished the instalation of svn, and i'm sync now.

[13:53] <audreyt> or %ENV<PUGS_P6REGEX_ENGINE> ?

[13:54] *** Alias_ joined
[13:54] <Alias_> seen audreyt?

[13:54] <audreyt> Alias_: hi! ltns

[13:55] <Alias_> indeed, trips to other countries and dealing with personal/family issues and eve online (darned Schwern)

[13:55] <audreyt> oy. but I see you survived and are back to the modlist

[13:56] <Alias_> Yeah, I'm gradually starting to spool up normal life again

[13:56] <audreyt> vanilla at $job has proved to be invaluable. thanks for getting xdg on the boat :)

[13:56] <Alias_> WRT P6 sparse arrays, am I right in thinking that for all current cases where we use hashes with positive integer keys, it's now going to be faster to use arrays?

[13:56] <audreyt> why, yes.

[13:57] <Alias_> And less memory too?

[13:57] * Alias_ thinks maybe, but not much less

[13:57] <audreyt> sure.

[13:57] <audreyt> well, one pointer less for each key

[13:57] <Alias_> righto

[13:57] <audreyt> so not much.

[13:58] <Alias_> That's a lot though, when you're data is just a boolean though

[13:58] <Alias_> s/though//

[13:58] <audreyt> er, yes.

[13:58] <audreyt> Judy has another Set type

[13:58] <audreyt> which can be used natively to implement Set/Junctions some day I hope

[13:58] <audreyt> optimized for the case where your data is just a boolean

[13:58] <Alias_> What is $work at the moment, that Vanilla is used for

[13:59] <audreyt> it's an jifty application running on AIX and Win32.

[13:59] <Alias_> Because Jifty is one of my test cases for Win32, and currently is fails horribly

[13:59] <Lorn> fglock: i got some error, on perl -Ilib -e   'use v6-alpha'   ' "hello world".say '

[13:59] <Alias_> s/is/it/

[13:59] <Lorn> fglock: http://pastebin.com/773231

[13:59] <buubot> The paste 773231 has been copied to http://erxz.com/pb/2846

[13:59] <audreyt> fails, as in not passing tests for its deps? well I use "notest install"...

[13:59] <Alias_> eep

[13:59] <Alias_> ok

[14:00] <Alias_> Just FYI also, if you disable the strange and sort of broken privilege escalation protection, Vanilla works on the latest Vista too

[14:01] <audreyt> I mean, andreas implemented notest in CPAN shell, I gotta use it for something...

[14:01] <audreyt> k, noted :)

[14:01] <fglock> Lorn: you need to run perl5/Pugs::Compiler::Rule 'make install'

[14:01] <Khisanth> well there is a but in Cache::Simple::TimedExpiry in the latest version so that particular dep isn't going to pass either way ...

[14:01] <Lorn> fglock: ok

[14:01] *** rashakil_ joined
[14:01] <Alias_> Also, kane is finally going to add a CPANPLUS_IS_RUNNING-like environment variable that actually does what it says

[14:02] <Alias_> So I might also soon get enough of Module::Install::With able to be finished to start porting bits of M:I over to it

[14:02] <audreyt> good. we need to probe that in Module::AutoInstall

[14:02] <audreyt> exactly the same way it probes for the .cpan lock

[14:02] * Alias_ nods

[14:02] <Alias_> See M:I:With code for my centralisation of all the "who am I playing with" helper functions

[14:03] <Alias_> Once all that works, I'd like to go through the rest of the code and switch everything over to it

[14:03] <audreyt> now that 5.10 is looming with the inevitable CPANPLUS borgification

[14:03] <Alias_> Which still freaks me out

[14:03] <Alias_> Module::Build isn't ready yet, CPANPLUS arguably isn't ready yet

[14:03] <audreyt> it's very important that the, ehem, dual core" situation does not cause breakage

[14:03] <Alias_> Any eta on 5.10

[14:03] <audreyt> Module::Build is already in

[14:03] <Alias_> It's in, but it doesn't work

[14:04] <Alias_> As long as the big problems are fixed before 5.10, I'm happy though

[14:04] <audreyt> rgs makes the call on eta, not me :)

[14:04] <Alias_> true

[14:04] <audreyt> as long as there are big problems, I'm pretty sure there won't be a 5.10 :)

[14:04] <Alias_> Dunno if rgs is aware of them all though

[14:04] <Alias_> Maybe I should email him

[14:04] <Alias_> (I really don't have time for this stuff though)

[14:05] <audreyt> s/him/p5p/

[14:05] <Alias_> Well yes, but him first

[14:05] <Khisanth> email him your IRC logs :)

[14:05] <audreyt> so I can ge tthe mail too and chime in (yes I'm back to p5p but havn't had much time except lurking

[14:05] <Alias_> I got a ticking off from Bill/Richard at YAPC for not contacting people quitely first enough before I, as they put it, open up all guns blazing :)

[14:05] *** bpphillips joined
[14:05] <Alias_> quietly

[14:06] <Alias_> e.g. the rt.cpan anon web thing

[14:06] <audreyt> *nod*

[14:06] <fglock> audreyt: mm - now it seems to work even without the M::C patch - maybe I was doing something wrong

[14:06] <audreyt> fglock: cool then, as I think M::C wouldn't interfere

[14:07] <audreyt> that's fantastic :)

[14:07] <Alias_> BTW, how soon should I have before PPI use v6 support starts to become needed

[14:07] <audreyt> as soon as the first CPAN module that uses v6 becomes a dependency for a non-v6 module

[14:07] <audreyt> which... I don't know how soon.

[14:07] <audreyt> definitely before this christmas.

[14:07] <Alias_> ok

[14:07] <Alias_> hrm

[14:07] <Alias_> sigh

[14:07] <Limbic_Region> audreyt - $work called me away - will back log and let you know what if any input I can give - TTFN

[14:07] * Limbic_Region & # $work

[14:08] <Alias_> I guess I need to look into generalising the implementation of hidden content I created for heredocs

[14:08] <audreyt> but you can work reactively, i.e. punt until someone screams at you :))

[14:08] <Alias_> Oh I am

[14:08] <Lorn> fglock: the delay for print 'hello world' its normal?

[14:08] <Alias_> The PPI bug queue is already embarrasingly long, and "No patches accepted" is starting to yield fruit

[14:09] <audreyt> alias++

[14:09] <Alias_> audreyt++ # Everything I ever learned about encouraging contributors

[14:09] <audreyt> :D

[14:09] <Alias_> (... I stole ruthlessly from you)

[14:10] <Alias_> sigh, ok, back to it then

[14:10] <audreyt> my pleasure. *curtsies*

[14:10] <Alias_> I just saw ingy's grant acceptance

[14:10] *** zgh joined
[14:10] <Alias_> Which means I probably need to get YAML::Tiny finished too, because YAML.pm gets yoinked out and replaced :/

[14:10] <fglock> Lorn: how much delay?

[14:11] <Alias_> ETOOMUCHTODO

[14:11] <Alias_> On the plus side, Mango++

[14:11] <[particle]> ETOOLITTLETIME :)

[14:11] <Alias_> indeed

[14:11] <Khisanth> $Alias.clone; :)

[14:11] <fglock> Lorn: it needs some time to precompile the compiler, but that only happens once

[14:11] <Alias_> Khisanth: I'm a Gemini... so often I've wished I was _actually_ twins

[14:12] <Lorn> fglock: the time is user    0m6.510s

[14:12] <Alias_> Khisanth: But then I wonder, would I be the cool twin, or the shy twin...

[14:12] <Lorn> fglock: and the cpu go to 100% while compile...

[14:12] <Khisanth> well if they are clones then all of them is you

[14:12] <Lorn> ops

[14:13] <Alias_> audreyt: oh, also on the WTF queue, WTF is with YAML::Syck putting a blank line after ---

[14:13] <Lorn> interprets ( confuse now )

[14:13] <Alias_> audreyt: YAML::Syck is less compatible with YAML than YAML::Tiny is, in my tests

[14:14] <Alias_> (and I only test the JSON-subset of data)

[14:14] <audreyt> Alias_: ...a blank line?

[14:14] <Alias_> ---\n\ncontent

[14:14] <audreyt> $ perl -MYAML::Syck -e 'print Dump "content"'

[14:14] <audreyt> --- content

[14:15] <Alias_> Reported by (I forget)

[14:15] <Alias_> hang on

[14:16] <audreyt> Lorn: if you save your file instead feeding it via STDIN to perl -e, then the compilation is cached

[14:17] <Alias_> audreyt: checkout http://svn.phase-n.com/svn/cpan/trunk/YAML-Tiny

[14:18] <Alias_> edit t/lib/MyTests.pm to enable $COMPARE_SYCK, then make test

[14:18] <Alias_> The only tests for YAML::Tiny are to compare it's behaviour against YAML

[14:18] <Alias_> (and now Syck)

[14:18] <Alias_> its

[14:19] <Alias_> So either 1. YAML.pm needs to change, 2. YAML::Syck needs to change 3. erm.. dunno

[14:22] *** prefiks joined
[14:22] <audreyt> Alias_: YAML::Syck::Dump( @$object )  doesn't workl; Dump only handles one arg at the moment

[14:23] <agentzh> g'night &

[14:23] <audreyt> I don't see the blank line

[14:23] *** agentzh left
[14:23] <audreyt> agentzh: g'nite!

[14:23] <Alias_> ok, will skip tests for multi-document tests

[14:23] <audreyt> I changed it to

[14:23] <audreyt>                 local $@;

[14:23] <audreyt>                 my $syck_out = eval { YAML::Syck::Dump( $object->[0] ) };

[14:24] <audreyt> which test reveals the blank line thing?

[14:25] <Lorn> audreyt: i not use -e, i create a file "use v6-alpha; "hello, world".say;"

[14:26] <audreyt> ah. then second time around it should be faster, yes

[14:26] <ingy> hola

[14:26] <fglock> Lorn: did you have Cache::Cache installed?

[14:26] <fglock> s/did/do/

[14:27] <audreyt> ingy: congrats re grant

[14:27] <Lorn> fglock: Cache::Cache is up to date.

[14:28] <audreyt> I see there's a C-based libyaml now too :)

[14:29] <Alias_> (but it isn't finished...?)

[14:29] <Alias_> See Perl Foundation blog

[14:30] <Alias_> OK, changed tests to skip if not @$object == 1 and blank line bug goes away

[14:30] <Alias_> hmm... and other bugs found :)

[14:31] <Alias_> svn update and repeat make test

[14:32] <Alias_> syck doesn't strip comments?

[14:33] <fglock> Lorn: it takes about 6s (windows XP, crusoe 1GHz) and 1s (ubuntu, pentium 4, ???GHz)

[14:33] *** vel joined
[14:34] <ingy> audreyt: thanks

[14:35] <ingy> I found out about that here first ;)

[14:35] <audreyt> x: foo

[14:35] <audreyt>    #bar

[14:35] <fglock> Lorn: and it takes about half the time when running the file a second time

[14:35] <audreyt> ingy: the snippet above, syck considers it a line continuation and YAML.pm considers it a comment

[14:35] <fglock> biab &

[14:35] <ingy> audreyt: syck is correct I believe...

[14:36] <audreyt> Alias_: syck is correct I believe...

[14:36] <ingy> haha

[14:36] <Alias_> hrm... will YAML.pm be fixed?

[14:36] <audreyt> now ingy gets his grant, sure :)

[14:36] <ingy> I'm not entirely sure actually

[14:36] <Alias_> Because the tests it fails are from real world sample files I got from Plagger and Vanilla Perl

[14:36] <Alias_> So any change has real world impact

[14:37] <ingy> Alias_: I'll ask on #yaml

[14:37] <Alias_> ok, thanks

[14:39] <Alias_> ingy: Checkout and make test on http://svn.phase-n.com/svn/cpan/trunk/YAML-Tiny to see the cases where YAML and YAML::Syck disagree on comments

[14:41] <Lorn> fglock: hmm, i had do something wrong, because in perl -e or file.pl the time is, about 7s

[14:41] <ingy> 06:44 < xitology> seems to be a comment :)

[14:41] <ingy> 06:45 < xitology> ' #' cannot appear in a plain scalar.

[14:41] <audreyt> (though it's isomorphic to the foo/#bar one above)

[14:42] <Alias_> (right)

[14:42] <ingy> xitology is the best spec guru we have

[14:42] <Alias_> So I should assume a syck bug?

[14:43] <ingy> looks so

[14:43] <Alias_> ok

[14:43] * ingy looks forward to integrating libyaml

[14:43] *** iblechbot joined
[14:43] <ingy> audreyt: is there a url for my grant acceptance?

[14:44] <audreyt> http://news.perlfoundation.org/2006/08/grant_approved_port_pyyaml_to_1.html

[14:44] *** ivas joined
[14:44] <audreyt> http://use.perl.org/article.pl?sid=06/08/22/1016231

[14:44] <lambdabot> Title: use Perl | 2006 3rd Quarter Grant Votes

[14:44] <audreyt> "The PyYAML port is to be done by Ingy (Brian Ingerson) and was approved because frankly, YAML support in Perl ain't all that great and there are few better qualified that Ingy to get this done right."

[14:46] <ingy> I hope that is true...

[14:46] <ingy> I think it is

[14:46] <ingy> But I'll be doing it pugstyle anyway

[14:46] <Alias_> Ditto. If there are any, they are most certainly "few"

[14:47] <audreyt> I can't think of one...

[14:50] <nothingmuch_> Alias_ || audreyt: can you please pull magic to give IVORW comaint on Tie::FTP?

[14:50] <nothingmuch_> it doesn't show up in my comaint giving page

[14:50] <Alias_> oh right, yes

[14:50] *** nothingmuch_ is now known as nothingmuch

[14:52] <audreyt> I'll let alias do it :)

[14:52] <Alias_> nothingmuch: You can't because GIFF holds primary

[14:52] * Alias_ didn't even know audreyt had perms :)

[14:52] <nothingmuch> GIFF?

[14:52] <audreyt> I've had it for years now :)

[14:53] <Alias_> Tie::FTP  	GIFF  	first-come

[14:53] <nothingmuch> wtf

[14:53] <nothingmuch> it's not in his author dir

[14:53] <Alias_> audreyt: on Tie::FTP, or as PAUSE admin?

[14:53] <nothingmuch> hmm

[14:53] <nothingmuch> i may have passed it on

[14:53] <nothingmuch> but not primary

[14:53] <audreyt> Alias_: pause admin

[14:53] <nothingmuch> i never do that =/

[14:53] <nothingmuch> odd

[14:53] <audreyt> I think I'm still pause committer too

[14:53] <audreyt> not sure

[14:55] <Alias_> You can't pass on first-come

[14:55] <Alias_> only primary

[14:56] <Alias_> "Added IVORW to co-maintainers of Tie::FTP."

[14:56] <Alias_> IVORW will probably need to upload again

[14:56] <Alias_> If they have already...

[14:56] <audreyt> ...or reindex...

[14:56] <Alias_> or that

[14:57] <audreyt> (background: openfoundry.org was running on a forked copy of PAUSE, and I hacked on PAUSE.pm a bit to make it uploadable to CPAN)

[14:57] <audreyt> but then we switched everything to svk and that plan was dopped

[14:58] <clkao> you mean chromatic switched everything to svk?

[14:59] <audreyt> not sure what that has to do with chromatic

[14:59] *** ivas left
[14:59] <audreyt> we as in the openfoundry-version-control-plan-as-drafted-by-clkao :)

[15:00] <Alias_> clkao: So... SVK::GUI... :)

[15:01] <clkao> audreyt: everything2

[15:01] <audreyt> lol

[15:03] *** plisk joined
[15:05] <svnbot6> r12591 | fglock++ | * v6 - export V6NOTIDY=1 - and Test.pm compiles in less than 4s

[15:07] *** ivas joined
[15:08] <audreyt> wow

[15:08] <audreyt> my macbook just fell from 2m height to floor

[15:08] <audreyt> LCD case cracked open and everything froze

[15:08] <Limbic_Region> does the smoke harness abandon if a test is taking "too long"?

[15:09] <obra> poor audrey :/

[15:09] <audreyt> (it fell LCD-side down first)

[15:09] <audreyt> ...and then it rebooted itself

[15:09] <PerlJam> fell?  Or was it *pushed*?  /me suspects foul play.

[15:09] <fglock> audreyt: ugh

[15:09] <audreyt> then everything continued to work just fine.

[15:09] <audreyt> the plastic case is rather easy to push back in, too.

[15:09] <Alias_> Just like your intestines when you suffer a gut wound

[15:10] <Alias_> (doesn't mean everything is ok though)

[15:10] <Limbic_Region> t/examples/all_parse.t works fine for me outside of the harness but the smoke report showed 100% failure???

[15:10] <audreyt> PerlJam: fell. I was in the shower, the computer is placed on the shelf, which I guess became a bit slippery.

[15:10] <audreyt> I'll probably refrain from IRC'ing from the shower for a few days.

[15:10] <Alias_> PerlJam: Questions about the use of a computer in the shower will not be addressed

[15:11] <PerlJam> Alias_: I have no such questions.  I take a laptop with me to the strangest places too  :)

[15:11] <Alias_> audreyt: I think you really need a ToughBook specifically for that case

[15:11] <audreyt> I'm surprised at how tough this macbook has proven itself to be.

[15:11] * [particle] suggests dry cleaning

[15:11] <Alias_> Speaking of macs, I should fire up my new mac

[15:11] <audreyt> esp. the LCD part, which if it was the old Asus, would have broken ~4 times already

[15:11] * Alias_ wonders what sort of screen it takes

[15:12] <Alias_> Time to buy it a monitor methinks

[15:12] <audreyt> but it's clearly a sign I should stop abusing it :)

[15:12] <audreyt> g'nite

[15:13] *** bpphillips joined
[15:14] <Alias_> What. The. Hell

[15:14] <Alias_> Mac OS 9!!!

[15:15] <Alias_> Hm.. background picture of someone else's girlfriend...

[15:15] <Alias_> I think this mac wasn't cleaned before it was sold

[15:15] * Alias_ prepares for some Voyeurism

[15:15] <PerlJam> Alias_: I take it when you said "new" you meant "new to you"?

[15:15] <Alias_> I hate Macs, but I'm starting to need one for things like File::HomeDir testing

[15:15] <Alias_> And other platform issues

[15:16] <Alias_> So I bought a G4 tower for $100 on eBay

[15:17] <Alias_> hmm.. and apparently it's hung already

[15:17] <fglock> clkao: try running v6 make test with 'export V6NOTIDY=1'

[15:18] <Alias_> I guess now I need to get a OS X license

[15:18] <clkao> fglock: uhm?

[15:19] <Alias_> oh man, cooperative multiprocessing really sucks

[15:19] <fglock> clkao: it disables the call to Perl::Tidy, goes 25% faster here

[15:19] <clkao> oh ok. i don't need v6 to be any faster

[15:19] <clkao> otherwise i will actually start using them

[15:19] <clkao> too dagerous ;)

[15:19] *** marmic joined
[15:20] <fglock> clkao: :)

[15:20] <clkao> fglock: do the tests i included pass now?

[15:20] <clkao> i saw lots of failure yesterday

[15:21] <fglock> clkao: I don't know yet - I'll try again in a few hours

[15:21] *** aholanda joined
[15:23] <Alias_> hrm, if a program hangs in OS 9, there wasn't much you could do was there

[15:24] <clkao> ok

[15:25] <fglock> clkao: I'll look for a zip() implementation - this should fix hash.t

[15:25] <fglock> lunch &

[15:28] *** kanru joined
[15:30] *** FurnaceBoy joined
[15:54] <nothingmuch> Alias_: am I maint right now?

[15:54] <Alias_> yes

[15:54] <nothingmuch> okay

[15:54] <nothingmuch> thanks

[15:55] * nothingmuch wasn't sure from the statement

[15:55] <[particle]> where can i find the pod spec for perl6?

[15:55] <audreyt> pugs/docs/Perl6/Spec/Documentation.pod

[15:55] <[particle]> thx!

[15:56] <audreyt> damian says he'll commit a new rev in a few days

[15:56] *** Aankhen`` joined
[15:56] <audreyt> it's still in flux...

[15:56] <[particle]> will the smartlink format fit into std pod?

[15:56] <audreyt> clkao: to support zip() and each(), Data::Bind need to support the idea of pipes

[15:56] <Alias_> What is changing?

[15:56] <audreyt> namely, the callconv would be

[15:57] <audreyt> func($obj, \@pos1, \%nam1, \@pos2, \%nam2, ...)

[15:57] <audreyt> at perl5 land

[15:58] <audreyt> in zip(1,2,3;4,5,6), the (1,2,3) are in pos1, aand 4,5,5 are in pos2

[15:58] <clkao> what what? why second pos and named?

[15:58] <clkao> oh ok

[15:58] <audreyt> feeds

[15:58] <clkao> and how do we use them?

[15:58] <clkao> uhm wait

[15:59] <clkao> isn't that [\[1,2,3],\[4,5,6]] ?

[15:59] <clkao> hm, i don't know ; much yet

[16:00] <audreyt> sub zip (*@@slices) { }

[16:00] <clkao> @.@

[16:00] <lambdabot> Not enough arguments to @.

[16:00] <audreyt> then @slices[0][0] is 1

[16:00] <audreyt> @slices[1][0] is 4

[16:00] <lambdabot> Unknown command, try @list

[16:00] <audreyt> @slices[0]<foo> is not defined

[16:00] <lambdabot> Unknown command, try @list

[16:00] <audreyt> but if you had said zip(1,2,3, foo=>4 ; 5,6,7)

[16:00] <audreyt> then it would be 4.

[16:01] <audreyt> yes, very complicated.

[16:01] <clkao> "hide until" next week

[16:01] <audreyt> (and pugs's new ast migration is partly to address this)

[16:01] <clkao> sorry, i have svn::mirror craziness to fix

[16:01] <audreyt> which simply had no counterpart in old ast

[16:01] <clkao> *nod*

[16:01] *** Alias_ joined
[16:01] <audreyt> oh. "svk pull" for pugs now always do a mergeback and report checksum mismatch

[16:01] <clkao> what's the status compiling the ast to classes?

[16:01] <audreyt> on my laptop

[16:02] <clkao> audreyt: a mergeback?/? how come?

[16:02] <audreyt> I don't know. I just ^C for now

[16:02] <audreyt> truly weird. might be the new pull logic

[16:02] <clkao> nopaste the output?

[16:02] <clkao> hmm

[16:02] <audreyt> and just for pugs not other checkouts

[16:02] <audreyt> comp to mooseclass is done but the ast itself is being integrated

[16:03] <audreyt> maybe in another couple weeks when it's stable and working

[16:03] <audreyt> great. openfoundry down again so I can't test :/

[16:04] <audreyt> till tomorrow then

[16:08] <obra> morning, audrey

[16:09] *** xinming joined
[16:14] *** alinbsp joined
[16:24] *** xerox joined
[16:27] <xinming> audreyt: ping

[16:27] *** zgh joined
[16:29] <Alias_> obra: Someone responded to my post about web anon-rt.cpan pointing to a CPAN module for interfacing with a blog comment anti-spam thing... it may or may not be useful

[16:29] *** Psyche^ joined
[16:29] <Alias_> Your thoughts on that avenue? It means pushing the bug reports over the network to the service before accepting...

[16:30] <obra> Alias_: if you can sell robrt on it, I'll do it. but I'm tired of battling the commentspam. (note that many of our best spammers are humans. the human tests Do Not Helo)

[16:30] <obra> Help, even.

[16:30] <Alias_> Yeah, they said

[16:30] <Alias_> I am stunned at the idea of human spammers being profitable

[16:30] <Alias_> What the hell are they trying to do

[16:31] <Alias_> Just Google points?

[16:31] <Alias_> Because we could always not auto-link URIs

[16:31] *** fglock joined
[16:31] <obra> Alias_: there's a lot of cheap labor out there.

[16:31] <obra> Alias_: it doesn't help

[16:31] <obra> I've tried.

[16:32] <obra> If you can solve the spam problem, lots of folks would be interested.

[16:32] <Alias_> And yet we allow anonymous emails

[16:32] <Alias_> Well, that's what I find the most confusing

[16:32] <Alias_> Email is ok, but web is not

[16:32] <Juerd> email is mostly to-one, not to-many.

[16:32] <Juerd> The to-many's have moderation anyway

[16:33] <Alias_> Juerd: If you email to rt, it's to-many

[16:33] <Juerd> Less impact per message. Less incentive to clean up.

[16:33] <obra> targetted email that runs through spamassassin lets in relatively little spam. email spammers aren't interested in targetting a specific address

[16:33] <Juerd> Alias_: "mostly" :)

[16:33] <obra> blog spammers are targetting a specific venue.

[16:33] <Alias_> But rt isn't a blog, which means they are RT spammer?

[16:33] <Juerd> I get more and more targeted spam

[16:33] <obra> Alias_: for their purposes, it is

[16:34] <obra> Alias_: I'm committed to following perl.org's lead on this one. Robrt has put much more energy into this than I have.

[16:34] <Alias_> And we put an email address to email on the front page... which means humans will just email that

[16:34] <Alias_> I'm just really confused I guess

[16:34] <Alias_> I don't understand how they won't just adapt

[16:34] <Alias_> And register a new bitcard account every time or something

[16:35] <obra> Because bitcard does address verification.

[16:35] <obra> And spammers are historically very not cool with having their addresses verified.

[16:35] <Alias_> I asked about doing address verification for the public web bug reports, and got told no

[16:35] <Alias_> We already require an email address

[16:36] *** zgh joined
[16:36] *** shachaf joined
[16:36] <Alias_> You report via the web, but email the contact email to verify before you let it leave the holding area

[16:36] <obra> Right. I'm not about to build ANOTHER address verification system. that's part of what we use bitcard for

[16:37] <Alias_> bitcard is an account though, it needs a password and so on

[16:37] <obra> Yes.

[16:38] <obra> If you solve the world's spam problems, I'll turn back on anonymous comments.

[16:38] <obra> But. it was making rt.cpan unusable for everyone.

[16:38] <Alias_> I just did... you verify addresses, without scaring people off by making them subscribe to something

[16:39] <Juerd> I'm okay with having my address verified.

[16:39] <Juerd> I'm absolutely not okay with having my address stored in a central database.

[16:40] <obra> Alias_: go sell this to robert

[16:40] <Alias_> ok

[16:40] <Juerd> (snail mail address, that is)

[16:40] <obra> Juerd: we're talking about email only

[16:40] *** Psyche^ is now known as Patterner

[16:41] <Juerd> Oh, okay. Language thing, then. I just now realised that "address" can also mean "e-mail address".

[16:41] <Juerd> The spam problem is solved by changing e-mail.

[16:42] <Juerd> Radically.

[16:43] *** zgh joined
[16:43] <Juerd> Meanwhile, (tubular bells)++

[16:44] <Alias_> I figure we just need to create a proper immune system for the intarweb

[16:45] <xinming> How to type the smile face in utf-8 please?

[16:45] <xinming> I've searched pugs slides from audreyt, But I can't find it... :-/

[16:45] <xinming> oops. sorry, found it, It's too small in my screen. :-/

[16:48] <Juerd> For smileys in unicode, I always go to search.cpan.org/~autrijus/

[16:48] <Juerd> For copy/pasting :)

[16:50] <kolibrie> Juerd: I plan to buy a plain, boring, nice keyboard.  Do you have any brand suggestions?

[16:51] <Juerd> Key Tronic

[16:51] <Juerd> The ErgoForce models, KT2001pro and such.

[16:52] * kolibrie goes to look them up (thanks Juerd)

[16:54] <Juerd> I'm really starting to hate my kinesis keyboard, by the way.

[16:55] <xinming> Juerd: hmm, If I write some test, Is it ok to use some chinese unicode characters? Since I really don't know where to find the utf8 characters. :-/

[16:55] <Juerd> It's better for my hands, but not comfortable. It's annoying.

[16:55] <Juerd> xinming: Why wouldn't it be?

[16:55] <Juerd> As long as it's not profane :)

[16:55] <cjeris> Juerd: which kinesis?  i tried a kinesis maxim and it was okay but too stiff

[16:56] <Juerd> cjeris: Contoured.

[16:56] <Juerd> I loved it. I'm starting to hate it.

[16:56] <cjeris> oh, ok.  can't use those, wrist pronation is part of what i can't take

[16:56] <Juerd> What is pronation?

[16:56] <cjeris> turning your palm flat instead of vertical/inward

[16:56] <Juerd> With this keyboard, my wrists are almost perfectly straight

[16:56] <cjeris> i have a Comfort because it lets you get higher tilt

[16:57] <Juerd> I want IBM to create a split model of their UltraNav keyboards.

[16:57] <xinming> Juerd: Well, Why I thougt of this is because, some people might not understand what I means, hmm, but now, I'll write the test first. :-)

[16:57] <Juerd> Not fixed split, but two separate parts.

[16:58] <obra> I'd even support a fixed split ultranav

[16:59] <Juerd> I'd support it

[16:59] <Juerd> But when they do something new, they have the option to do it GOOD.

[16:59] <cjeris> Comfort is big, heavy, clunky, expensive, and a bit too tall, but the infinite adjustability is lovely

[16:59] <Juerd> well.

[16:59] <Juerd> Big is no option, because big means the mouse is too far away.

[17:00] <Juerd> The contoured keyboard is really great for typing text, but it absolutely sucks for code.

[17:00] <cjeris> in that case you remove the numeric-keypad module from the right and reattach it on the left :)

[17:00] <obra> Juerd: at the moment, the only keyboard I can find that I can type on for long periods and travel with is an MS Natural Elite. What else should I look at?

[17:00] <xinming> Juerd: hmm, what does quote protection mean? hmm, is "qq" in quote protection, or not?

[17:01] *** justatheory joined
[17:01] <xinming> hmm, BTW, I know what is the difference between q and qq, But just don't know, what the quote protection will protect, protect variable, or protect the string itself. :-P

[17:08] <Juerd> xinming: I don't know what quote protection is.

[17:08] <Juerd> obra: Depends on your specific needs. I've used dozens of keyboards intensely, and have had the complete range of physical problems.

[17:09] <Juerd> obra: And if there's one thing I learned, it's that every problem demands its own keyboard.

[17:09] <Juerd> The other thing is that the ideal keyboard doesn't exist.

[17:09] <xinming> Juerd: hmm, can you explain about the q:w and q:ww?

[17:09] <Juerd> (It would be a dual ultranav)

[17:09] <Juerd> xinming: No, sorry.

[17:10] <obra> *nod* I've got cubital tunnel syndrome. I really only type comfortably with a split keyboard in my lap. The Kinesis is too bulky to travel with. the datahand is too space alien. the fingerworks..I need some feedback. the ultranav is, while sexy, still too cramped.

[17:10] <Juerd> xinming: I'd have to look it up in the synopses. You can do that yourself. I find all this far from intuitive, and way too complex and customizable.

[17:11] <Juerd> I want to create a desk chair one time.

[17:11] <Juerd> That lets you have your arms vertical. It'll look silly.

[17:11] <obra> heh. i spend too much time in cafes

[17:11] <xinming> Juerd: the problem currently is... I've tried that, and pugs treat them the same.. :-/

[17:12] <xinming> ?eval my $a = 123; my @b = q:w /$a/;

[17:12] *** evalbot_12586 is now known as evalbot_12591

[17:12] <evalbot_12591> ["\$a",]

[17:12] <xinming> ?eval my $a = 123; my @b = q:ww /$a/;

[17:12] <evalbot_12591> ["\$a",]

[17:12] <Juerd> I often want things that I can perfectly describe, but they don't exist.

[17:12] <Juerd> They're physically possible, and there'd probably be a market for them, but for some reason they don't exist.

[17:12] * Alias_ nods

[17:12] <Juerd> I don't have the means to create them, or to talk to people who could.

[17:13] <Juerd> This is very frustrating.

[17:13] <cjeris> obra: if you can tolerate a little key stiffness, look at a kinesis maxim for traveling? the stiffness was my only problem with mine

[17:13] <Alias_> The trouble is, having them custom made is expensive

[17:13] <Alias_> The only time I did that was with my skating gloves

[17:13] <obra> I've thought about the maxim. stiffness: more or less than an IBM clicky?

[17:13] <cjeris> never used an ibm clicky.  it's stiffer than the $2 made-in-taiwan you get with a new pc.  it loosens with wear.

[17:13] <Juerd> Right now, I want a portable case with adjustable compartments for computer parts, that I can put in my car so that I always have the right parts with me.

[17:14] <Juerd> A camera bag comes close.

[17:14] <Alias_> I have a great pair of inline skating leather gloves, but the leather on the palms was shit, so they wear out. Since nobody makes the gloves any more, I went to a ladies purse repair man and had him upgrade the gloves

[17:14] *** bernhard joined
[17:14] <Juerd> But isn't large enough, and is too portably designed.

[17:14] <Alias_> They rock now, but they are VERY expensive gloves :)

[17:14] <Alias_> I guess there's just no market for a hundred dollar skating gloves :/

[17:15] <Juerd> One of the biggest problems with the kinesis contoured is the stiffness, and that it uses cherry switches

[17:15] <obra>  Alias_ I bet that's not true

[17:15] <Juerd> Who the hell, in ergonomics land, uses cherry switches! Maltron and Kinesis. But these switches SUCK! NO FEEDBACK!

[17:15] <obra> oh. the switches on a kinesis don't bother me.

[17:15] <Juerd> Yeah, a clicky speaker thingy.

[17:15] <Alias_> obra: Let me check

[17:15] <cjeris> Juerd: feedback?

[17:15] <Juerd> cjeris: feedback

[17:15] <obra> Juerd: I've been very tempted to spend time with a HHK Pro

[17:16] <Juerd> obra: Happy H

[17:16] <Juerd> ?

[17:16] <cjeris> i don't understand what you mean by feedback, i guess.

[17:16] <obra>   yeah.

[17:16] <Juerd> cjeris: A subtle feelable click.

[17:16] <Juerd> obra: I find them annoying, feedback wise.

[17:16] <Alias_> obra: They go up to about $60, but they are really bulky and heavy aggressive skating gloves

[17:16] <Juerd> I don't remember exactly why.

[17:16] <obra> Juerd: the Pro or the regular one?

[17:16] <Juerd> I don't remember

[17:16] <obra> (The Pro has entirely different switches)

[17:16] <Juerd> Oh, that's weird.

[17:17] <cjeris> oh.  there's never been a click on any keyboard i've ever used :)

[17:17] <Juerd> Hm - let's try the UltraX keyboard here

[17:17] <cjeris> except a VT100 i typed on once a long time ago

[17:17] *** c6rbon joined
[17:17] <Juerd> cjeris: I don't mean audible click.

[17:17] <obra> http://www.pfu.fujitsu.com/en/hhkeyboard/leaflet/keyspec.html

[17:17] <cjeris> no, i know what you mean.  like the click at the bottom of an ibm selectric buckling-spring type?

[17:21] <Juerd> I'm now using the UltraX keyboard

[17:21] <Juerd> My desk is too low :)

[17:21] *** glasser left
[17:21] <Juerd> Or my chair to high.

[17:21] <Juerd> Hm

[17:21] <Juerd> This is better.

[17:21] <Juerd> I have no idea if I could get used to this.

[17:21] *** jferrero joined
[17:21] <Juerd> I'll give it a try for some time.

[17:22] <Juerd> The kinesis is now in the storage closet again.

[17:22] <Juerd> Hmm. I can mod this one to dvorak, probably

[17:22] <Juerd> Let's see.

[17:23] <integral> juerd++ # reminding me to change my desk height

[17:24] <Juerd> nssssssssssssssvttttttttttttlt==tr==l//ssss[000000000000000000][eeeeeeeeeeeeeeeeeeeeeeeeeeqyeeqqqqqqqqqqqa,,,,,,,,,,,,,,,,,,,,,,,,,,,qqqaaaaaaaaaaaaaa---------------------

[17:24] <Juerd> z//--/////////////////////////////////-vwwwwzzzzzzzz

[17:24] * [particle] thinks Juerd is writing perl 7

[17:24] <cjeris> i can't ever get my keyboard low enough to have 90 degree elbows ... my arms are too long compared to my torso :(

[17:24] <Juerd> ok il unfocus

[17:31] <TimToady> openfoundry's http server appears to have pined for the fjords.

[17:31] <[particle]> yes, audreyt noticed that earlier

[17:31] <[particle]> the fjords are calling me, too...

[17:35] *** nothingmuch joined
[17:40] *** chris2 joined
[17:44] *** visq joined
[17:47] <Alias_> obra: It appears I've had my robert's mixed up for a while then? Which robert is that robert, his link on noc.perl is useless

[17:48] <obra> Robert Spier

[17:50] <Juerd> This was by far the hardest keyboard to physically remap :)

[17:51] <Juerd> I've even killed one key

[17:51] <Juerd> (But sacrificed the windows key to fix it)

[17:52] <cjeris> you mean you just rearranged all your keycaps?

[17:52] <Juerd> Yes, but it's a laptop-ish keyboard

[17:52] <Juerd> So that's hard :)

[17:53] <Juerd> cjeris: That's what desks and chairs are for. You can't change your body, but you can change your furniture

[17:53] <Juerd> Hm, with a lagged ssh, trying out a new keyboard is weird.

[17:59] <Alias_> ingy?

[18:03] <nothingmuch> Alias_: thanks, btw.. i was a bit distracted and forgot that part ;-)

[18:04] <Alias_> which part?

[18:04] <Alias_> The getting primary in the first place part? :)

[18:10] <Juerd> THIS KEYBOAD UCK

[18:10] * Juerd thow the keyboad aay

[18:11] *** zgh joined
[18:13] <Juerd> Ahhh, trusty keytronic.

[18:14] <Juerd> All I need now is a wrist rest. But I can do without.

[18:15] <Juerd> Oh, right. The right shift was broken on this one.

[18:15] * Juerd starts to cry :)

[18:18] <xinming> TimToady: what's doesn't the quote protection mean please?

[18:22] *** hexmode joined
[18:26] <TimToady> I saw the references in the backlog, but have no idea what you're referring to.

[18:27] <Limbic_Region> xinming - you have some context for your question - URL or email msg-id or something - I have no clue either

[18:28] <TimToady> okay, I see 'quote protection' in S02

[18:28] <TimToady> that's Unix-shell-style quote protection.

[18:29] <TimToady> <a 'b c' d> produces ("a", "'b", "c'", "d")

[18:29] <TimToady> <<a 'b c' d>> produces ("a", "b c", "d")

[18:31] <TimToady> it also means that <<$a '$b'>> interpolates $a but not $b

[18:31] <TimToady> <<$a "$b">> interpolates both, but $a will be split into separate words while $b won't.

[18:32] <TimToady> it's still to be decided exactly how "shellish" we want to get here.

[18:33] <TimToady> since various shells have various idiosyncracies when it comes to interpolation and such

[18:34] <TimToady> so <...> is basically q:w/.../ while <<..>> is qq:ww

[18:35] *** _bernhard joined
[18:40] * zgh tries in pugs

[18:40] <zgh> aw

[18:40] <zgh> eval: <<a b "c d" e>>

[18:40] <buubot> zgh: Error: Can't find string terminator " a" anywhere before EOF at eval line 1.

[18:40] <zgh> eval: <a b "c d" e>

[18:40] <buubot> zgh: Error: Can't locate Text/ParseWords.pm:  Too many open files at /usr/lib/perl/5.8/File/Glob.pm line 152.

[18:40] <zgh> well it works better than that in pugs

[18:40] <TimToady> ?eval <<a b "c d" e>>

[18:40] <evalbot_12591> ("a", "b", "\"c", "d\"", "e")

[18:41] <zgh> thanks

[18:41] <TimToady> not impl

[18:41] <zgh> how do you use qq:ww?

[18:41] <zgh> ?eval qq:ww/a b c/

[18:41] <evalbot_12591> ("a", "b", "c")

[18:41] <zgh> ah

[18:41] <zgh> neat

[18:41] * zgh goes back to playing with pugs

[18:42] <TimToady> <<...>> is merely a pretty version of qq:ww/.../

[18:42] <TimToady> just as <...> is a pretty version of qw/.../

[18:42] <zgh> qq:ww doesn't work in pugs yet either with regards to shell quoting

[18:42] <zgh> oh well

[18:42] <xinming> TimToady: thanks for your explanation,  then, I'll leave this in the test first.

[18:49] *** bernhard_ joined
[18:52] *** Eimi joined
[18:54] *** weinig is now known as weinig|away

[18:56] <Limbic_Region> is the repo down?

[18:56] <[particle]> yes

[18:58] *** prefiks joined
[18:58] <Limbic_Region> thanks

[19:08] *** _bernhard joined
[19:15] <ingy> last ingy

[19:21] *** bernhard_ joined
[19:38] *** theorbtwo joined
[19:50] *** jferrero joined
[20:00] *** xerox joined
[20:02] <Limbic_Region> fglock ping

[20:03] <fglock> pong

[20:04] <Limbic_Region> I just tried to install v6 from CPAN

[20:05] <Limbic_Region> many many many failures in the test suite - seem similar to the ones reported by CPAN testers on linux despite myself being on Win32

[20:05] <Limbic_Region> are you aware of these or would you like a test output sent to you?

[20:07] <fglock> Limbic_Region: I've seen the failures - I'll check with clkao to see how he controls the MANIFEST (only passing tests should enter the MANIFEST)

[20:07] <zgh> do you need a specific perl to use v6?

[20:07] <Limbic_Region> that's what I suspected - or else the failing ones should be flagged as todo

[20:07] <zgh> i thought mine was too old

[20:07] <fglock> Limbic_Region: I think it is part of the smoking process

[20:08] <Limbic_Region> think what is part of the smoking process?

[20:08] <fglock> zgh: not sure - how old?

[20:08] <fglock> Limbic_Region: the tests that pass the smoke enter the MANIFEST list and get published

[20:09] <zgh> 5.8.7, on x86_64

[20:09] <zgh> it's the default for ubuntu I think

[20:09] <fglock> zgh: that should work

[20:09] <zgh> fglock: thanks I'll try again later

[20:10] <Limbic_Region> ahh - well, force install then?

[20:12] <fglock> Limbic_Region: yes

[20:13] <Limbic_Region> k

[20:49] *** eden_c joined
[21:02] *** fglock joined
[21:25] *** neoesque joined
[21:27] *** hexmode joined
[21:32] *** beppu joined
[21:34] <TreyHarris> is there a problem with svn?

[21:34] <beppu> ?eval %ENV<USER>

[21:34] <evalbot_12591> Error: Can't modify constant item: VUndef

[21:34] <TreyHarris> http://svn.openfoundry.org/

[21:34] <[particle]> it's down

[21:34] <beppu> ?eval say %ENV<USER>

[21:34] <evalbot_12591> Error: Can't modify constant item: VUndef

[21:34] <TreyHarris> ?eval $+USER

[21:34] <evalbot_12591> Error: Can't modify constant item: VUndef

[21:34] <beppu> tf?

[21:34] *** markstos joined
[21:35] <TreyHarris> ?eval say $+USER

[21:35] <evalbot_12591> Error: Can't modify constant item: VUndef

[21:35] <beppu> ?eval say 'wtf?'

[21:35] <evalbot_12591> OUTPUT[wtf? ] Bool::True

[21:35] <TreyHarris> ?eval say $?PUGS_VERSION

[21:35] <evalbot_12591> OUTPUT[Perl6 User's Golfing System, version 6.2.12, June 26, 2006 (r12591) ] Bool::True

[21:35] <markstos> ?eval class Super { method foo { $?CLASS; } }; class Kid is Super  {}; say Kid.new.foo;

[21:35] <evalbot_12591> OUTPUT[Super ] Bool::True

[21:35] <beppu> ?eval %ENV.keys.sort.map:{ "$_=%ENV<$_>\n" }.say;

[21:35] <evalbot_12591> OUTPUT[ ] Bool::True

[21:35] <TreyHarris> beppu: looks like environment variables are hosed

[21:36] <beppu> I was actually wondering why my map statement wasn't doing what I thought it should be doing.

[21:36] <TreyHarris> beppu: this is new, my r12537 is fine

[21:36] <markstos> I want to get the current class back. But $?CLASS doesn't do that in my example-- it returns the parent class, where $?CLASS is defined. Is there a way to get the class that's currently being executed, versus one were $?CLASS is defined.

[21:37] <beppu> TreyHarris: on your pugs, do you get a bunch of "key=value" pairs printed when you run the last ?eval I did?

[21:37] <TimToady> ?eval %ENV.keys.sort.map:{ say "$_=%ENV<$_>" }

[21:37] <beppu> I'm getting "key=" with no value.

[21:37] <evalbot_12591> ()

[21:38] <markstos> beppu, I have r12583 and I get keys with no values.

[21:38] <beppu> Am I doing something wrong or is it pugs?

[21:38] <TreyHarris> yes.  "CLICOLOR=\nCOLUMNS=\n".  but no values, just keys

[21:39] <beppu> advice?

[21:39] <markstos> ?eval  say %ENV.perl;

[21:39] <evalbot_12591> OUTPUT[\undef ] Bool::True

[21:39] <TimToady> ?eval say %*ENV.perl

[21:39] <evalbot_12591> OUTPUT[\undef ] Bool::True

[21:39] <TreyHarris> ?eval %ENV.sort.map:{ "$_.key()=$_.value()}\n" }.say;

[21:39] <markstos> beppu: try say %ENV.perl on your machine. That works for me.

[21:39] <evalbot_12591> Error: No compatible subroutine found: "&key"

[21:40] <TreyHarris> beppu: the above works on my pugs

[21:40] <markstos> It shows the values.

[21:40] <TimToady> might be not considered "safe" by evalbot

[21:40] <TreyHarris> sort on a hash sorts by key

[21:41] <beppu> %ENV.perl doesn't work for me.  :(

[21:41] <TimToady> works here

[21:42] <beppu> time to recompile pugs, perhaps

[21:42] <TimToady> though theoretically it should have to be %*ENV

[21:42] <TimToady> unless you've imported it into your namespace

[21:42] <markstos> I now the meta model work is still in process, but is there currently a way to get the current class?  I'm looking for something like "say self" would return, but without the extra <Obj:foo> decoration.

[21:42] <TreyHarris> beppu: for sort %*ENV.kv -> $var, $val { say "$var=$val"}

[21:43] <TimToady> which do you mean by "current class"?

[21:43] <TimToady> lexically, or self's actual?

[21:43] <markstos> uh, self's actual ?

[21:43] <beppu> the for loop works.  thanks Trey

[21:43] <markstos> Even if code is stored in the parent, I want the child's name to be returned.

[21:44] <TreyHarris> beppu: ummm... not so sure actually....

[21:44] <TimToady> TreyHarris: that can't possible be correct

[21:44] <TimToady> *possibly

[21:44] <beppu> oh wait...  ;)

[21:44] <TimToady> it would sort the keys independently of the values

[21:45] <TreyHarris> yes, it does

[21:46] <beppu> I took out the sort, but it looks like it comes back to me in sorted order, anyway.

[21:46] <beppu> (and the keys and values match up this time .  ;)

[21:47] <TimToady> .kv will come out in the right pairings but as separate list items

[21:47] <PerlJam> beppu: don't rely on implementation accidents :)

[21:47] <beppu> ;)

[21:48] <beppu> Is the .perl method like a built-in Data::Dumper ?

[21:48] <TreyHarris> it's odd: %*ENV.sort:{$^b cmp $^a} gives me a good reverse-ordered list of lists (not pairs), but %*ENV.pairs.sort:{$^b.key cmp $^a.key} gives me "No compatible subroutine found: "&key""

[21:49] <TimToady> markstos: that'll be whatever we rename .ref to, I suspect

[21:49] <beppu> %ENV.perl was working for me...  silly me forgot to actually `say` it.

[21:49] <markstos> beppu: Yes, like D::D.

[21:50] <TreyHarris> it looks like '.key' is not defined for ::Pair::HashSlice

[21:50] <TreyHarris> which seems quite odd.

[21:50] <TimToady> I've just been dithering about which interrogative pronouns to attach to which metainfo.

[21:51] <markstos> TimToday: "self.ref" works today-- I'm happy. Thanks. I can find/replace later. :)

[21:51] <beppu> I'm curious about why: %ENV.keys.sort.map:{ "$_=%ENV<$_>\n" }.say;    doesn't work

[21:51] <TimToady> if it's something checked into pugs, I'll fix it myself when I make up my mind.

[21:52] <markstos> I would have guessed something like "self.string", or "self.name".

[21:53] <markstos> TimToady: CGI::App p6 isn't in the pugs SVN repo yet. I'm attached to using darcs at the moment, but I may import it one day yet, and live with svn or svk.

[21:53] <TreyHarris> beppu: something funky is going on, because %*ENV.keys.sort.map:{ "::$^a::" } is not interpolating $^a.  or $_.

[21:53] <TreyHarris> i'll write a test as soon as openfoundry is back up

[21:53] <TimToady> it'll probably be self.what or self.WHAT, or maybe who.  But who might be the new name for .SKID

[21:53] <beppu> TreyHarris: thanks, man.

[21:53] <TimToady> would make a great skit about a baseball team...

[21:54] <markstos> :)

[21:54] <markstos> self.meta.class_name seems straight forward, but maybe too long.

[21:54] <TimToady> independent of that is whether these are all submethods of .META, or if .META should be renamed to .HOW

[21:55] <markstos> meta does evoke introspection for me, which seems appropriate.

[21:55] <markstos> HOW doesn't do that for me. It evokes a Native American greeting...

[21:55] <TimToady> and it's likely that a .what or .who would really mean .META.what or .MEAT.who anyway.

[21:56] <TreyHarris> TimToady: tracking this down... is it possible that superclass dispatch does not happen in classes implemented in Haskell?

[21:56] <TimToady> s/AT/TA/

[21:56] <Alias_> TimToady: Can you play Real movies?

[21:56] <markstos> ah, just shorthands.

[21:56] <TimToady> just as .does is short for .META.does

[21:56] <TimToady> or .^does

[21:57] <TimToady> Alias_: I could probably figure out how to play one.

[21:57] <Alias_> http://abc.net.au/science/broadband/catalyst/ram/choice_hi.ram

[21:57] <Alias_> Some interesting stuff for software design types on how many More Ways To Do It there should be :)

[21:58] <Alias_> Although only at a basic level, not very hardcore

[21:58] <TimToady> okay, thanks, but my wife is napping right now so I'd better wait.

[21:58] <Alias_> More of a stepping off point

[21:58] <Alias_> sure, not urgent, it's back of the brain stuff

[21:58] <TimToady> thanks

[21:59] <obra>   *snicker*

[22:02] <TreyHarris> yes, key and val are not implimented for Pain::HashSlice.  is there any reason I shouldn't just implement it?  i'm wondering if there's some deep reason it's unimplemented that i'm just not getting, or if it's just an oversight.

[22:02] <TreyHarris> s/Pain/Pair

[22:05] *** rashakil_ joined
[22:06] *** Khisanth joined
[22:08] *** markstos left
[22:13] *** rashakil_ joined
[22:17] *** diakopter joined
[22:18] *** zgh joined
[22:23] *** cjeris left
[22:28] <Juerd> Hmmm

[22:28] <Juerd> Can we still change the internal representation of text strings?

[22:33] *** mdiep joined
[22:43] *** eden_c left
[22:53] *** visq joined
[23:07] *** avar joined
[23:15] *** yhsuan joined
[23:15] *** lollan joined
[23:18] *** neoesque joined
[23:19] *** mdiep joined
[23:28] *** mdiep joined
[23:35] *** chromo joined
[23:35] *** chromo left
[23:46] *** glasser joined
[23:48] *** JarJarBinks joined
[23:50] *** frederico joined
[23:51] <TreyHarris> ?eval my %a = %(zip('a'..'z';1..26)); my @p = %a.pairs; @p[0].key

[23:51] <evalbot_12591> "a"

[23:52] <TreyHarris> ?eval my %a = %(zip('a'..'z';1..26)); my @p = %a.pairs; @p[0].value

[23:52] <evalbot_12591> \1

