[00:03] *** cognominal joined
[00:10] <qwr> audreyt: thanks.

[00:16] <audreyt> np :)

[00:20] *** hikozaemon joined
[00:21] *** b00t joined
[01:13] *** dduncan joined
[01:14] <dduncan> so, is there an ETA for a prelaunch release candidate that needs testing?

[01:14] <dduncan> tarball that is

[01:18] <audreyt> yes. 5hr from now I think

[01:19] <audreyt> or less

[01:19] <dduncan> okay

[01:21] <dduncan> depending on timing issues, such as whether I want to stay up late, I may only download and build/test this starting at about 8 hours after that (mid-morning my time) ... with results c 3-5 hours later

[01:21] <dduncan> but whatever happens, happens

[01:25] <audreyt> sure

[01:27] *** ludan joined
[01:52] <svnbot6> r10628 | audreyt++ | * Relax the parsing rule for RHS-as-list somewhat:

[01:52] <svnbot6> r10628 | audreyt++ |     $x.foo = 1,; # RHS is a List

[01:52] <svnbot6> r10628 | audreyt++ |     $x.foo = 1;  # RHS is a Int

[01:52] <svnbot6> r10628 | audreyt++ |   again, principle of least surprise.

[01:52] <svnbot6> r10629 | audreyt++ | * "do {block}" now captures lexicals created at the block body level correctly.

[01:59] *** mako132_ joined
[02:45] *** QtPlatypus joined
[02:50] *** viirya joined
[03:34] *** lambdabot joined
[03:45] <audreyt> another perf refactoring hits the trunk :D

[03:45] <audreyt> bbiab &

[03:45] <svnbot6> r10630 | audreyt++ | * Pugs.AST: We now install a multi nullary sub "&Foo" whenever

[03:45] <svnbot6> r10630 | audreyt++ |   the package/class/module/role/grammar "::Foo" is introduced.

[03:45] <svnbot6> r10630 | audreyt++ |     Foo.new;

[03:45] <svnbot6> r10630 | audreyt++ |   is now always commpiled to:

[03:45] <svnbot6> r10630 | audreyt++ |     Foo().new;

[03:45] <svnbot6> r10630 | audreyt++ |   this removes the primary stateful parsing ambiguity, resulting

[03:45] <svnbot6> r10630 | audreyt++ |   in a nice 20% speedup in "make smoke" (15min -> 12min).

[03:58] *** lambdabot joined
[04:20] <dduncan> audreyt, assuming those last few "repository snapshot / darwin" smokes are yours, your smoker is broken

[04:20] <dduncan> it says r10590 for all the last smokes

[04:20] <dduncan> at least a day out of date

[04:21] <dduncan> or the version build is broken

[04:21] *** particle_ joined
[04:22] <dduncan> just checking now, a "pugs -v" on my system shows "r10629", which means the problem is either specific to your install, or it is specific to the smoke process

[04:23] <dduncan> I'm basing my judgement on what http://smoke.pugscode.org/ says

[04:26] <dduncan> its probably your install, since someone's Linux smoke shows a r10627

[05:22] <audreyt> nod

[05:23] <audreyt> I think it's a svk problem

[05:23] <audreyt> i.e. pugs not picking up the svk checkout number

[05:27] *** cognominal joined
[05:31] <svnbot6> r10631 | audreyt++ | * Pugs.Parser: Implement correct OUTER:: compilation:

[05:31] <svnbot6> r10631 | audreyt++ |     my $x; { $x and my $x = 1 }

[05:31] <svnbot6> r10631 | audreyt++ |   is compiled to

[05:31] <svnbot6> r10631 | audreyt++ |     my $x; { $OUTER::x and my $x = 1 }

[05:31] <svnbot6> r10631 | audreyt++ |   but there is no OUTER for this:

[05:31] <svnbot6> r10631 | audreyt++ |     my $x; { my $x = 1 if $x }

[05:31] <svnbot6> r10631 | audreyt++ |   it's according to spec, but a significant divergence from Perl 5.

[05:31] <svnbot6> r10632 | audreyt++ | * scopt.t: correct syntax for global package.

[05:34] <svnbot6> r10633 | cmarcelo++ | * Simple tests on JudyHSIter FFI are working now.

[05:34] <svnbot6> r10633 | cmarcelo++ | * First try at Cabal package. Works here.

[05:36] *** cmarcelo joined
[05:36] *** bjoern_ joined
[05:41] <audreyt> cmarcelo: hi

[05:43] <cmarcelo> audreyt: hello. I malloc'ed some time to work on hsjudy =)

[05:44] <audreyt> good good

[05:45] <cmarcelo> iter bindings seems to be ok. so the low-level stuff is pretty much done.

[05:47] <cmarcelo> audreyt: I'm going for that Pugs.Prim change before looking for new APIs, if that's ok..

[05:47] <audreyt> sure it's okay

[05:47] <audreyt> though please nopaste it as a patch first :)

[05:48] <audreyt> btw, have you seen the Collection API?

[05:48] <audreyt> I think IOCollection or MCollection is a nice fit with it

[05:48] <cmarcelo> not yet..

[05:49] <audreyt> it's a bit more closer to judy than Edison I think

[05:49] <audreyt> http://hackage.haskell.org/trac/ghc/wiki/CollectionClassFramework

[05:52] <audreyt> ByteString is probably natural as JudyHs keys

[05:52] <svnbot6> r10634 | audreyt++ | * Pugs.Parser.Export: Importing via "use" is now treated

[05:52] <svnbot6> r10634 | audreyt++ |   as an in-scope "state" declaration for hoisting/shadowing purposes.

[05:54] <cmarcelo> (i'm taking a look on collection stuff..)  didn't get your ByteString comment =P

[05:54] <cmarcelo> ByteString from fps? It has stuff to export CString?

[05:55] <cmarcelo> s/stuff/functions/

[05:55] <cmarcelo> or must do a BS -> String -> CString?

[05:56] <audreyt>         unsafeUseAsCStringLen,  -- :: ByteString -> (CStringLen -> IO a) -> IO a

[05:56] <audreyt> which is "safe" for all JudyHS uses

[06:01] <cmarcelo> class Collection c i o | c -> i o      -- means knowing c type we can derive/infer i and o types?

[06:01] <audreyt> yes.

[06:01] <audreyt> one idea is simply MCollection

[06:02] <audreyt> class CollectionM c i o m | c -> m i o

[06:02] <audreyt> where m == IO is inferred

[06:02] <audreyt> from the instance

[06:06] <cmarcelo> got it..

[06:10] <cmarcelo> JudyHS seems to be more likely to instance Data.Collections.Map..

[06:11] <cmarcelo> but Collection is good enough for BitSet

[06:11] <svnbot6> r10635 | audreyt++ | * unTODO passing tests.

[06:12] <audreyt> right, but those functions are all pure in the class head

[06:12] <audreyt>     member :: k -> c -> Bool

[06:12] <audreyt> whilst we would need

[06:12] <audreyt>     memberM :: k -> c -> m Bool

[06:12] <audreyt> most likely

[06:13] <cmarcelo> yes yes =)

[06:14] <cmarcelo> is the Freezable-stuff from Meacham still insteresting to keep? I mean, is it actually useful?

[06:14] <audreyt> personally I think it's useful

[06:15] <audreyt> freeze :: (Ix i, MArray a e m, IArray b e) => a i e -> m (b i e)

[06:15] <audreyt> it's analogous to the MArray's freeze

[06:15] <audreyt> so arguably we can turn a CollectionM to a Collection

[06:16] <audreyt> freezeM :: (CollectionM c i o m, Collection c' i o) => c -> m c'

[06:16] <audreyt> makes sense?

[06:18] <dduncan> audreyt, regarding my earlier comment ... what's happening with your versions has happened to me before ... the fix is possibly to work from a clean checkout ... or alternately just following a make realclean ... for the record, myself and at least another person are getting newest versions into pugs from svk at build time, so the problem isn't specific to the code it seems ... but your box

[06:19] <cmarcelo> yes, it makes. i got the types, but i don't get when this kind of thing is used. "just" to jump out from IO monad later (like tests on Freezed BitSets)?

[06:19] <dduncan> or even simpler, explicitly run the Makefile.pl then do a make, perhaps

[06:19] <audreyt> yes. the idea is that we may want to use a BitSet as regular Set

[06:20] <audreyt> in nonmonadic code

[06:20] <audreyt> but we want to construct it very efficiently in IO monad

[06:21] <cmarcelo> ok

[06:45] <spinclad> hi audreyt, cmarcelo

[06:46] <spinclad> audreyt: S02 r9538: "Conversely, put parenthesis around the lvalue expression to force inner context to list:" does not seem to be the case any more.  also, S03 r9575: s/ are allowed.$/&)/ : keep the ending parenthesis.

[06:46] <cmarcelo> spinclad: hey. my iter tests in HsJudy bidings are working now. thanks =)

[06:47] <spinclad> getting my code to meet its own spec helped

[06:48] <spinclad> glad you haven't seen further bugs

[06:52] <audreyt> spinclad: nopaste a S02 patch?

[06:52] <cmarcelo> spinclad: my tests now are very simple -- just to check if the bindings are ok.. next weeks there'll be APIs on top of these low-level bindings, making tests easier to do and bigger..

[06:53] <audreyt> spinclad++ cmarcelo++ # soon Pugs may become Fast Enough For Production (tm)

[06:55] <dduncan> following a new pull+build, my pugs -v reads r10635

[06:55] <dduncan> that's it for today ... in about 9 hours I will check for a preflight tarball and test it

[06:55] <audreyt> okie

[06:55] <audreyt> thanks, dduncan

[06:56] <dduncan> did you solve the version thing at your end? ... it is at your end only

[06:56] <dduncan> for me, certain refreshing of files did the trick

[06:57] <audreyt> yup, I think I grok the reason

[06:57] <audreyt> thanks for the hint

[06:57] <dduncan> you're welcome

[06:57] <svnbot6> r10636 | audreyt++ | * Perl6::Container::Array - revive much of the functionality and unTODO

[06:57] <svnbot6> r10636 | audreyt++ |   the now-passing-because-member-variables-really-works tests

[06:58] <cmarcelo> svk users: how do you people organize svk? in which svk-path you put openfoundry mirror, for example?

[06:58] <audreyt> /pugs/trunk and /pugs/local for m

[06:58] <audreyt> me

[06:59] <audreyt> was //mirror/pugs ad //pugs

[06:59] <audreyt> both works quite well

[06:59] <cmarcelo> audreyt: why change?

[06:59] <audreyt> /pugs/ is so that I can copy the depot to other people without inflicting other paths to them

[06:59] <audreyt> i.e. ~/.svk/pugs is the repo by itself

[07:00] <dduncan> for me, I put it in //pugs_try2/mirror

[07:00] <dduncan> when I used separate local repos, that was in //pugs_try2/local

[07:00] <dduncan> I also use svk for something else, which is named //utsl_try1/mirror

[07:00] <dduncan> so first level is the name of the main server, second level is mirror or local

[07:01] <dduncan> the tryN thing is if certain things go wrong and I want to do a clean re-mirror of the main server

[07:02] <cmarcelo> tks!

[07:02] <dduncan> I'm up to #2 or #3 now, but started at #1, fyi

[07:03] *** iblechbot joined
[07:04] <cmarcelo> dduncan: what did "go wrong" to need a clean re-mirror?

[07:05] <dduncan> I was setup with a dual mirror+local system, so that I could commit locally even if the main server was down, and push those commits later ...

[07:05] <dduncan> as some people here do

[07:05] <dduncan> though I wasn't using part of the reason for that feature, which was keeping a local branch ... I stuck to the mainline

[07:05] <dduncan> the problems ...

[07:07] <dduncan> I often got spurious "merging" going on, where svk says that it was merging specific file differences from my local to the mirror, as if there were third party changes to those files since my checkout and checkin, but in truth I was the only one working on them ...

[07:07] <dduncan> sometimes svk pushed the same change multiple times to the main server, where they show up in pugs' logs as multiple commits, but I only actually committed that once

[07:08] <dduncan> sometimes those spurious things were like undos of previous commits, and then later redos, and I couldn't find any easy way to control this ... it seemed to be random

[07:08] <dduncan> there were some other issues, but that was what came to mind

[07:09] <dduncan> actually, here's another problem:

[07:09] <cmarcelo> dduncan: scary problems...

[07:10] <cmarcelo> dduncan: which version of svk were you using then?

[07:10] <dduncan> when I wanted to "svk mv" a directory or file or something, the main server is supposed to receive the move, which is very light operation in svn, and preserves file history from the old to the new ... but what actually happened is, while this happened correctly on 'local', the copy from local to mirror was done as a merged, and pushed to the main server as a full add plus delete, so those files lost their history, and took up more spac

[07:11] <dduncan> I was using the latest svk and svn at any given time, or exactly 1 version behind

[07:11] <dduncan> all fresh installs

[07:11] <dduncan> now, I found that all the problems went away when I used just a mirror only, and checked out / committed to, that mirror

[07:12] <dduncan> fyi, using just the mirror, the svk is working more like the underlying svn, but that it keeps a local mirror copy of the repo on my machine

[07:13] <cmarcelo> hmm (svk) checking out the //pugs/mirror don't give you offline commits then? i.e., when you commit on a checkout from //mirror, it commits into the mirror server itself?

[07:13] <audreyt> yup

[07:13] <dduncan> you can recheckout previously mirrored server content, but any commit tries to push it live

[07:14] <audreyt> see my diagram

[07:14] <dduncan> generally this isn't a problem for me, as the server is up most of the time I need it, and I don't really travel right now

[07:14] <svnbot6> r10637 | audreyt++ | * don't generate OUTER:: when we are in toplevel.

[07:14] <audreyt> http://commons.wikimedia.org/wiki/Image:Svk-overview.png

[07:15] <dduncan> so the mirror is still helpful when you want to clean-refresh your checkout dir ... it doesn't have to pull it from the server at all

[07:16] <audreyt> also it makes operations such as "log" much, much, much faster.

[07:16] <svnbot6> r10638 | audreyt++ | * err, typo

[07:16] <dduncan> yes

[07:16] *** mjk joined
[07:17] <cmarcelo> audreyt: ask svk devel(s) to update the diagram link in http://svk.elixus.org/

[07:18] <audreyt> it's a wikie...

[07:18] <cmarcelo> didnt find "Edit" =P

[07:18] <audreyt> click "Preferences"

[07:21] *** marmic joined
[07:22] <pasteling> "spinclad" at 209.94.133.172 pasted "suggested diff to S02.pod" (13 lines, 666B) at http://sial.org/pbot/17685

[07:23] <cmarcelo> audreyt: no "edit" for HomePage, it's common for wikis to lock (or restrict) main page to prevent trivial "defacement"...

[07:23] <audreyt> oh, k.

[07:24] <audreyt> clkao: fix "autrijus, diagram: architecture diagram" to point to http://commons.wikimedia.org/wiki/Image:Svk-overview.png and fix my id?

[07:25] <svnbot6> r10639 | audreyt++ | * HTML-Entities: Change this:

[07:25] <svnbot6> r10639 | audreyt++ |     %hash{chr $x} //= 1;

[07:25] <svnbot6> r10639 | audreyt++ |   to this:

[07:25] <svnbot6> r10639 | audreyt++ |     %hash{~chr($x)} //= 1;

[07:25] <svnbot6> r10639 | audreyt++ |   since otherwise the 1-slice is defined and therefore not initialized.

[07:25] <svnbot6> r10639 | audreyt++ |   Not sure if it's sane, but oh well.

[07:31] <svnbot6> r10640 | audreyt++ | * repair Perl6::Value::List too

[07:38] <spinclad> (audreyt: diff pasted)

[07:44] <audreyt> committed

[07:44] <audreyt> spinclad++

[07:45] *** elmex joined
[07:47] *** cognominal joined
[07:52] <dduncan> since I was up longer due to the last chat, I confirm that r10640 also builds and shows up in pugs -v fine

[07:52] <dduncan> &

[08:07] <cmarcelo> time to sleep. see you &

[08:07] *** cmarcelo left
[08:10] *** drrho joined
[08:18] *** bjoern_ joined
[08:19] *** bjoern_ joined
[08:24] *** kanru joined
[08:25] *** lisppaste3 joined
[08:39] *** xern joined
[08:43] *** xerox joined
[08:44] *** xerox joined
[08:49] *** buetow joined
[09:05] *** revision17_ joined
[09:45] *** theorbtwo joined
[09:46] <svnbot6> r10641 | audreyt++ | * getprint.t: @INC needs to be written as @*INC now.

[09:49] <svnbot6> r10642 | audreyt++ | * my.t: This test was bogus:

[09:49] <svnbot6> r10642 | audreyt++ |     try { $undeclared }

[09:49] <svnbot6> r10642 | audreyt++ |   as it is a compile-time, not runtime, failure.  Changed to use 'eval'.

[09:49] <svnbot6> r10643 | audreyt++ | * Change inlinePerform* back to unsafePerform* when

[09:49] <svnbot6> r10643 | audreyt++ |   NOINLINE is in effect.

[09:49] <svnbot6> r10644 | audreyt++ | * Prelude: s/$seek/$self/.

[09:51] *** Aankhen`` joined
[09:52] <svnbot6> r10645 | audreyt++ | * Pugs is now capable of doing parse-time analysis on

[09:52] <svnbot6> r10645 | audreyt++ |   unbound lexical variables:

[09:52] <svnbot6> r10645 | audreyt++ |     $ ./pugs -c -e '$x'

[09:52] <svnbot6> r10645 | audreyt++ |     *** unexpected global symbol "$x" requires explicit package name

[09:52] <svnbot6> r10645 | audreyt++ |         expecting "::"

[09:52] <svnbot6> r10645 | audreyt++ |         at -e line 1, column 3

[09:52] *** szbalint_ joined
[09:53] <svnbot6> r10645 | audreyt++ | * Also, named subroutines are now expressions instead of statements:

[09:53] <svnbot6> r10645 | audreyt++ |     # This is valid Perl 6

[09:53] <svnbot6> r10645 | audreyt++ |     my @subs = (sub f { 1 }, sub g { 2 });

[09:53] <svnbot6> r10645 | audreyt++ |   consequently, all unqualified symbol lookup (&f and &g above) are

[09:53] <svnbot6> r10645 | audreyt++ |   now lexical instead of dynamic.

[09:53] <svnbot6> r10645 | audreyt++ | * Private subroutines are now exportable:

[09:53] <svnbot6> r10645 | audreyt++ |     module Foo;

[09:53] <svnbot6> r10645 | audreyt++ |     my sub bar is export { ... }

[09:53] <svnbot6> r10645 | audreyt++ |   this allows import from Foo but disallows &Foo::bar.

[09:54] <audreyt> another step closer to a Real Language Implementation...

[09:56] <xerox> audreyt++ !

[09:57] <xerox> audreyt, do you know how to get happy compiled? I couldn't compile darcs without it. Or maybe some important dependences.

[09:57] <Juerd> export!

[09:57] <Juerd> audreyt++ :)

[09:59] <audreyt> xerox: it Just Worked for me

[09:59] <audreyt> alex maybe?

[10:00] <audreyt> I did needed to create a UFS partition to get alex darcs checkout

[10:00] <audreyt> due to case sensitivity

[10:00] <theorbtwo> audreyt++

[10:00] <xerox> Happy-1.15 says Unrecognised platform: i686-apple-darwin8.6.1

[10:00] <audreyt> xerox: use darcs trunk

[10:00] <audreyt> also, maybe autoreconf

[10:01] <xerox> audreyt: may you paste somewhere the output of `ghc-pkg list' ?

[10:01] <audreyt> ALUT-2.0, Cabal-1.1.4, GLUT-2.0, HGL-3.1, HUnit-1.1, OpenGL-2.1, QuickCheck-1.0, X11-1.1, base-1.0, fgl-5.2, (ghc-6.5.20060608), haskell-src-1.0, haskell98-1.0, mtl-1.0, network-1.0, parsec-2.0, readline-1.0, rts-1.0, stm-1.0, template-haskell-1.0, time-0.3.1, unix-1.0

[10:02] <xerox> Good.

[10:02] <audreyt> my happy is 1.16

[10:02] <xerox> Ah.

[10:02] <xerox> Hmm.

[10:02] <audreyt> installed with cabal

[10:02] <audreyt> http://darcs.haskell.org/happy

[10:02] *** szbalint_ is now known as szbalint

[10:03] <xerox> No darcs without happy, no happy without darcs...

[10:03] <xerox> Eek.

[10:03] <audreyt> wget -m ;)

[10:05] <svnbot6> r10646 | audreyt++ | * Pugs.Parser: make special allowance for "@INC" because

[10:05] <svnbot6> r10646 | audreyt++ |   Test::Harness uses it.  Sigh.

[10:05] <svnbot6> r10647 | audreyt++ | * more s/@INC/@*INC/

[10:05] <xerox> Hmpf.

[10:06] <xerox> It went into mirroring darcs.haskell.org/* before darcs.haskell.org/happy/*/*

[10:06] <audreyt> wget -m -np

[10:06] <audreyt> sorry

[10:07] <xerox> Don't be sorry, thank you very much.

[10:07] * xerox crosses fingers

[10:07] <xerox> I hate wget manpage, did I say that? :)

[10:07] <audreyt> mm np :)

[10:07] *** iblechbot joined
[10:08] <xerox> (Seems like it will work)

[10:40] *** cdpruden joined
[10:46] <GeJ> audreyt: commiting from the airport?

[10:51] <audreyt> no, it's 24hr from now

[10:54] *** ruoso joined
[11:19] *** chris2 joined
[11:23] *** elmex joined
[11:35] *** ludan joined
[11:36] <ludan> ciao

[11:44] *** buetow joined
[11:45] *** tifo joined
[11:51] *** jsiracusa joined
[11:54] *** b_jonas joined
[12:05] *** b00t joined
[12:17] *** weinig is now known as weinig|work

[12:33] <svnbot6> r10648 | audreyt++ | * Unify named and unamed subroutines.

[12:33] <svnbot6> r10648 | audreyt++ |   (note - for releng, I'll rollback this thread of changes

[12:33] <svnbot6> r10648 | audreyt++ |    and hold until 6.2.12 is released, to investigate more

[12:33] <svnbot6> r10648 | audreyt++ |    into the serious perf hit caused by it.)

[12:38] <svnbot6> r10649 | audreyt++ | * unpush r10645 and r10648 as promised.

[13:12] *** buetow joined
[13:26] <svnbot6> r10650 | audreyt++ | * cherry-pick the unsafePerformSTM patch, as well as other misc. cleanups

[13:29] <svnbot6> r10651 | audreyt++ | * allow redecl of $! and $/

[13:29] <svnbot6> r10652 | audreyt++ | * er, typo

[13:39] *** rafl joined
[13:41] *** vel joined
[13:41] <svnbot6> r10653 | audreyt++ | * when we enter a block at parser level, mark envOuter properly.

[13:41] <svnbot6> r10654 | audreyt++ | * ...and put it back too

[13:47] *** kolibrie joined
[14:00] <svnbot6> r10655 | audreyt++ | * retionalize the OUTER:: generation logic somehow; if it's

[14:00] <svnbot6> r10655 | audreyt++ |   not visible in outer scope either, don't bother.

[14:00] <svnbot6> r10656 | audreyt++ | * Do not generate $_ as implicit method invocant.

[14:00] <svnbot6> r10656 | audreyt++ | * Amazingly, anonymous hash literals are still closures, and

[14:00] <svnbot6> r10656 | audreyt++ |   so OUTER:: should work:

[14:00] <svnbot6> r10656 | audreyt++ |     my $x; my $hash = { 1 => $OUTER::x };

[14:09] <svnbot6> r10657 | audreyt++ | * corrected various tests testing ::Class etc for truth,

[14:09] <svnbot6> r10657 | audreyt++ |   which has been defined as False in the Synopses ever

[14:09] <svnbot6> r10657 | audreyt++ |   since the Arbel Hackathon.

[14:12] <svnbot6> r10658 | audreyt++ | * ditto.

[14:12] <svnbot6> r10659 | audreyt++ | * ditto.

[14:15] <svnbot6> r10660 | audreyt++ | * pairs.t: Now that list assignment is listop, this no longer works:

[14:15] <svnbot6> r10660 | audreyt++ |     ok @pairs = $pair.pairs, "pairs on a pair";

[14:15] <svnbot6> r10660 | audreyt++ |   we have to write this:

[14:15] <svnbot6> r10660 | audreyt++ |     ok((@pairs = $pair.pairs), "pairs on a pair");

[14:15] <svnbot6> r10660 | audreyt++ |   sad but true.

[14:16] *** masak left
[14:17] <b_jonas> does that mean that @foo = 3, 5 will be equiv to @foo = (3, 5) ?

[14:17] <fishb0t> dumb question maybe, but are pack and vec going into pugs?

[14:17] <svnbot6> r10661 | audreyt++ | * substr.t: prototype objects are no longer true.

[14:19] <audreyt> probably not as such, but as compact structures in S09

[14:20] <audreyt> someone proposed doing that a while ago... forgot who

[14:21] <b_jonas> yes, I proposed it on perlmonks and TimToady said they considered it but decided against so it probably won't work

[14:21] <b_jonas> I mean TimToady said they _had_ considered it before that

[14:21] <b_jonas> so someone else has proposed it

[14:22] <b_jonas> http://www.perlmonks.com/?node_id=488991

[14:22] <audreyt> ?eval @foo = 3,5; @foo

[14:22] *** evalbot_10625 is now known as evalbot_10661

[14:22] <evalbot_10661> Error: Undeclared variable: "@foo"

[14:23] <audreyt> ?eval my @foo; @foo = 3,5; @foo

[14:23] <evalbot_10661> [3, 5]

[14:23] <audreyt> look, itworks

[14:23] <b_jonas> cool

[14:23] <b_jonas> ?eval my($foo, $bar) = 3, 5; [$bar, $foo]

[14:23] <evalbot_10661> [5, 3]

[14:24] <b_jonas> ?eval my $foo, $bar = 3, 5; [$bar, $foo]

[14:24] <evalbot_10661> Error: Undeclared variable: "$bar"

[14:24] <buetow> ?eval my ($foo, $bar); $foo, $bar = 3, 5; [$bar, $foo]

[14:24] <evalbot_10661> [3, undef]

[14:25] <b_jonas> ?eval my $foo = 3, 5; $foo

[14:25] <evalbot_10661> \3

[14:25] <svnbot6> r10662 | audreyt++ | * -CPIR: catch up the VType change by treating it as VUndef (for now)

[14:25] <b_jonas> ?eval my $foo = (3, 5); $foo

[14:25] <evalbot_10661> [3, 5]

[14:26] <b_jonas> I wonder how'd it get \3

[14:26] <buetow> Whats \3 ?

[14:26] <b_jonas> the eval said that. I guess it's a ref-to-scalar

[14:26] <buetow> Reference to 3?

[14:26] <buetow> Ah, ok

[14:27] *** fglock joined
[14:28] <audreyt> means it's actually bound to 3 at lvalue

[14:29] <audreyt> instead of a 3 at rvalue

[14:29] <b_jonas> ?eval ref(\3)

[14:29] <evalbot_10661> ::Int

[14:30] <fglock> audreyt, TimToady: I need to know in which city will you be right before YAPC::SA, so that we can arrange the plane tickets with $sponsor

[14:30] <audreyt> Taipei.

[14:30] <b_jonas> I don't quite understand that.

[14:30] <fglock> ok

[14:31] <svnbot6> r10663 | audreyt++ | * another round of triaging...

[14:32] <b_jonas> ?eval my ($foo = 3), 5; $foo

[14:32] *** evalbot_10661 is now known as evalbot_10662

[14:32] <evalbot_10662> \undef

[14:32] <b_jonas> ?eval (my $foo = 3), 5; $foo

[14:32] <evalbot_10662> \3

[14:32] <b_jonas> ?eval my $foo = 3; $foo

[14:32] <evalbot_10662> \3

[14:33] <b_jonas> I don't understand this.

[14:33] <b_jonas> ?eval my $foo = 3; ~$foo

[14:33] <evalbot_10662> "3"

[14:37] <svnbot6> r10664 | audreyt++ | * more triaging and definedness.

[14:37] <audreyt> which one do you not understand?

[14:40] <b_jonas> the '?eval my $foo = 3; $foo' one. why does it print \3

[14:40] <b_jonas> not 3

[14:40] <svnbot6> r10665 | fglock++ | rm empty dir Pugs-Grammar-Perl6-Lib

[14:40] <svnbot6> r10666 | audreyt++ | * intentional regression: sacrifice the macro expansion of

[14:40] <svnbot6> r10666 | audreyt++ |     state $x = 42;

[14:40] <svnbot6> r10666 | audreyt++ |   into

[14:40] <svnbot6> r10666 | audreyt++ |     state $x; FIRST { $x = 42 };

[14:40] <svnbot6> r10666 | audreyt++ |   because currently the declarator cannot look beyond the signature

[14:40] <svnbot6> r10666 | audreyt++ |   it takes.  Suggestions welcome...

[14:47] <audreyt> preflight in ~20 minutes.

[14:47] <svnbot6> r10667 | audreyt++ | * TODOize assign.t.

[14:48] <audreyt> b_jonas: because $foo is bound to a rw \3, so to speak

[14:48] <audreyt> actually the \ is not the correct notation either, should be something like Scalar(3)

[14:48] <audreyt> or even Scalar(Int(3))

[14:49] *** Qiang joined
[14:56] <svnbot6> r10668 | audreyt++ | * because "toplevel" in Parser now has an implicit block,

[14:56] <svnbot6> r10668 | audreyt++ |   extend the inTopLevel test for OUTER:: generation by one level.

[14:56] <svnbot6> r10669 | audreyt++ | * $a[$y xx $z] is not a scalar lhs, unlike $a[$y x $z].

[14:58] *** Teratogex joined
[14:59] <svnbot6> r10670 | audreyt++ | * final triaging and TODOizing. ready for preflight!

[14:59] <Teratogex> is Perl 6 going to be certified to (at least theoretically) be approved for use in critical systems like nuclear reactor control software and avionics and such?

[15:01] *** elmex joined
[15:04] *** bpederse joined
[15:04] *** ushi joined
[15:05] <b_jonas> certified?

[15:05] <b_jonas> what do you mean certified?

[15:06] <stevan> Teratogex: I *highly* doubt that

[15:07] <stevan> there are very strict real-time requirements for any avionics work, and I highly doubt Perl 6 will be able to meet them

[15:07] <stevan> maybe a subset of Perl 6 could be used in some way

[15:07] <stevan> but you would have to write your own compiler for it

[15:07] <tifo> \bye

[15:08] <particle_> or maybe an implementation of perl6 in ada, if someone were to write it

[15:08] <cognominal> so far most language implementation come with a disclaimer that says too bad if you use it in the real world whatever the effect intended or not

[15:08] *** rafl joined
[15:08] <stevan> particle_: :)

[15:09] <stevan> even with Ada, they sometimes have to use a strict subset of the language for certain highly critical tasks

[15:09] <b_jonas> cofnominal: it's not a question of certification but of warranty

[15:09] <stevan> ada is a BIG language though

[15:09] <cognominal> we should start by forbidding any natural language that allow to formulate bad thoughts

[15:10] <cognominal> and certify the natural language used to define Perl6

[15:10] <particle_> without bad thoughts there would be no perl 5! ;)

[15:10] <stevan> b_jonas: no, the FAA has a set of test that a system must pass

[15:10] <b_jonas> does it?

[15:10] <stevan> b_jonas: the real-time tests the FAA has are insane

[15:10] * stevan had a link at one point to information on it

[15:10] <stevan> you could probably google it

[15:10] <stevan> they have a vested interest in keeping planes in the sky ;)

[15:12] <kolibrie> and when a pilot has about two-seconds to make a decision, all the instruments better be working right

[15:13] <stevan> b_jonas: see this link - http://www.lynuxworks.com/solutions/milaero/do-178b.php3

[15:14] <stevan> seems to me that anyone who is selling a product which is to be used in avionics needs to have this certification

[15:14] <stevan> or somesuch

[15:15] <Juerd> We're not selling :)

[15:15] <stevan> Juerd: true

[15:15] <stevan> then they company writing the software needs to be certified

[15:16] <stevan> if they use Perl6/Parrot, they must make Perl6/Parrot pass the certification

[15:23] <svnbot6> r10671 | audreyt++ | * final round of unTODO and TODO before preflight #0

[15:25] <Juerd> Because of certification, open source is always a problem for these branches of business

[15:25] <Juerd> Some try to get oss certified, some even manage to get through it in one piece

[15:25] <Juerd> I personally think certification, almost all of it, should be done by governments, and for free.

[15:26] <Juerd> But that's not a realistic view for the time Perl 6 is released

[15:26] *** nothingmuch joined
[15:26] *** jsiracusa joined
[15:29] <svnbot6> r10672 | audreyt++ | * bump version to 6.2.12; getting ready for preflight.

[15:34] * gaal meows

[15:34] <gaal> have fun with the release everybody, I'm loaded with $work...

[15:36] <audreyt> poor moose

[15:36] <audreyt> I've been consciously ignoring $work...

[15:36] <audreyt> ...and plans to catch up on plane

[15:40] <audreyt> uploading

[15:40] <svnbot6> r10673 | audreyt++ | * don't include third-party Judy in MANIFEST for this release.

[15:49] <audreyt> http://pugs.blogs.com/pre0/Perl6-Pugs-6.2.12.tar.gz

[15:51] <audreyt> SIZE=3550098 SHA1=402a344b0187e69d2e597992e6d910c316675dbe

[15:52] *** audreyt changes topic to: Plese Please test pre0: http://pugs.blogs.com/pre0/Perl6-Pugs-6.2.12.tar.gz | paste: http://sial.org/pbot/perl6 | pugs.blogs.com | pugscode.org | pugs.kwiki.org

[15:52] *** audreyt changes topic to: Please test pre0: http://pugs.blogs.com/pre0/Perl6-Pugs-6.2.12.tar.gz | paste: http://sial.org/pbot/perl6 | pugs.blogs.com | pugscode.org | pugs.kwiki.org

[15:52] *** FurnaceBoy joined
[15:52] *** theorbtwo joined
[15:54] *** qwr left
[15:57] <audreyt> unfortunately, I can't stay up anymore. will check backlog as soon as I wake up

[15:58] <audreyt> some help at changelogging would be most appreciated :)

[15:58] * audreyt waves &

[15:58] <FurnaceBoy> n8

[16:00] *** rindolf joined
[16:00] <rindolf> Hi all.

[16:11] *** macroron joined
[16:17] *** iblechbot joined
[16:21] *** iew0tja joined
[16:50] *** chris2 joined
[16:59] *** tifo joined
[17:10] *** buetow joined
[17:33] *** bernhard joined
[17:37] *** hexmode joined
[17:38] *** mj41_ joined
[17:46] <clkao> audreyt: sure, remind me again later

[17:58] <rindolf> Hi clkao

[18:41] *** FurnaceBoy_ joined
[19:02] *** iblechbot joined
[19:09] *** SamB joined
[19:12] *** dduncan joined
[19:18] *** larsen joined
[19:33] <dduncan> I have now downloaded the preflight and am running the makefile ...

[19:36] <dduncan> now running 'make'

[19:40] *** vel joined
[19:42] *** frederico joined
[19:46] *** baest joined
[20:15] <dduncan> make done, now starting smoke

[20:18] <dduncan> note that this smoke has concurrent=4, on my 2-cpu machine, so both cpus are maxed, and speed hits from blocking should be lessened

[20:18] <dduncan> still lots of / enough ram free beyond that

[20:19] <dduncan> so we'll see if that helps with my past smoke speed problems

[20:24] *** baest joined
[20:50] <svnbot6> r10674 | fglock++ | Pugs::Compiler::Rule - added 2 SKIP'ped tests for parsing errors in t/04-rule.t

[20:53] <dduncan> this is probably known, but I observe that the changelog in the preflight is not ready to go on cpan ... but pre0 is probably just for testing the code anyway

[20:57] *** pasteling joined
[21:05] *** nothingmuch joined
[21:08] *** mj41_ joined
[21:15] <svnbot6> r10675 | fglock++ | ChangeLog - removed XXX note in pX section

[21:28] *** fglock left
[21:34] <leo> audreyt: make test results of  10673

[21:34] <leo> (linux/x86)

[21:34] <leo> Failed Test  Stat Wstat Total Fail  Failed  List of Failed

[21:34] <leo> -------------------------------------------------------------------------------

[21:34] <leo> t/oo/proxy.t               18    6  33.33%  4 6 9 13 15 18

[21:34] <leo> I have these since quite a time - nothing else now

[21:46] *** stennie joined
[21:51] *** iblechbot joined
[21:56] *** kanru joined
[22:49] <dduncan> smoke complete

[22:49] <dduncan> looks like a 2.5 hour runtime

[22:53] <dduncan> my smoke reports all okay except 1 failure at the end of t/pugsrun/07-dash-uppercase-v.t

[23:01] <dduncan> I don't know what the problem is, though, since when I run t/pugsrun/07-dash-uppercase-v.t directly, it passes all 59 tests

[23:01] <dduncan> maybe the harness didn't receive the 59th ok ? ... it says 'stub' in the smoke report

[23:01] <dduncan> is this test failing for anyone else?

[23:09] *** froh-doh joined
[23:21] *** dduncan left
