[00:00] <mugwump> Moose is alive and well, it even has roles support

[00:00] <mugwump> I'm developing a model for standard perl collections with it

[00:00] <mugwump> Actually this needs generics/higher order types/parametric types to work *really* well

[00:01] <mugwump> Those I plan to hack in via obscure package names and UNIVERSAL::isa hacks

[00:01] *** Quell joined
[00:01] <mugwump> (so that, for instance, HASH->isa("Coll of (Str, Any) where Unique(0)")

[00:03] <mugwump> It makes sense to defer exact design decisions on what .meta looks like at least until it is properly metacircular, ie self-defining.  Possibly even further than that.

[00:03] <Toaster> (sorry, got distracted by toast)

[00:03] <Toaster> right - is there an intention to somehow wrap Moose back into p6 once it's done?

[00:04] <Toaster> or is it another prototyping-perl6-concepts-in-perl5 doofer?

[00:04] <mugwump> With good availability of meta-objects, language transformation gets even easier.

[00:05] <mugwump> For instance, you could easily take Class::MOP objects (the model behind Moose) and generate Perl 6 metamodel objects with them

[00:05] <mugwump> then it's just a matter of converting your code fragments, if you care

[00:05] <Toaster> right

[00:06] <Toaster> sounds like i need to go read one of those vast books or thesises on metaobject models :)

[00:06] * Toaster heads librarywards

[00:07] <mugwump> it's certainly a confusing area to research, just ask stevan_ :)

[00:07] <mugwump> but the concept is quite simple.  an object that describes the class.  Change the Class object and (if possible) you mutate the class

[00:08] <mugwump> the confusion arises in questions such as, "what does $object.meta.meta return?".  There's also a chicken and egg problem.

[00:09] <mugwump> but that's ok, I used to live with chickens.  The answer is there are always eggs and chickens.

[00:20] * FurnaceBoy_ marvels

[00:23] * TimToady meta cops out

[00:31] *** mako132_ joined
[00:42] *** jabbot joined
[00:57] *** Odin-LAP joined
[01:13] *** stevan__ joined
[01:14] *** stevan__ is now known as stevan

[01:15] <stevan> Toaster: I suggest "The Art of the Meta Object Protocol" as a good place to start

[01:15] <stevan> mugwump: $object.meta returns an instance of Class which describes $object, and $object.meta.meta also returns an instance of Class, but this one describes the class Class

[01:15] <stevan> for instance with Moose, ... Moose::Object->meta->meta->isa('Class::MOP::Class')

[01:16] <stevan> and ... Moose::Object->meta->meta->name eq 'Class::MOP::Class'

[01:18] <mugwump> This knot tying is not necessarily forced, though - on a particular implementation you might hit the bottom

[01:18] <stevan> mugwump: yes

[01:18] <stevan> knot tying is just one way to do it

[01:18] <stevan> either that or you just decide how deep the turtles go,. and stop there

[01:18] <stevan> knot tying tends to not work as well in more static languages

[01:22] <stevan> but more dynamic languages (Perl, Haskell, etc) tend to handle it just fune

[01:35] *** jserv-- joined
[01:39] *** revdiablo joined
[02:09] <clkao> 4/win 22

[02:10] *** pjcj joined
[02:31] *** mako132_ joined
[02:37] *** KingDillyDilly joined
[02:39] <KingDillyDilly> PerlJam wrote "Soon I will echo Merlyn's lament that Perl 6 may be too bizarre to explain." I searched the #perl6 logs a bit, and I searched the web a bit, and couldn't find such a quote. Any tips on where to look?

[02:40] <KingDillyDilly> (for the cons section of a pros and cons section that I might add to Wikipedia)

[02:43] <audreyt> KingDillyDilly: maybe http://www.nntp.perl.org/group/perl.perl6.language/25160

[02:46] <KingDillyDilly> That would require some research on my part since I don't know if those two terms Merlyn's complaining about will both be used in Perl 6.

[02:47] <azuroth> this red black trees in haskell... it's making my brain explode

[02:47] <KingDillyDilly> I remember you praising Merlyn for "environmental" a few days ago. It reminded me of when I searched Google for "environmental variables" because that's the term I learned from Learning Perl (unless it was my Javascript book) and I couldn't find what I wanted...

[02:48] <KingDillyDilly> Much later on I discovered that "environment variable" is the more common term.

[02:49] <KingDillyDilly> I'm with Merlyn on this one.

[02:49] <azuroth> google is too smart; search for -ental and it includes -ent results

[02:58] * KingDillyDilly limits himself to two lines in chat since discovering he was truncated in the log

[03:01] <KingDillyDilly> Maybe I'll forget about the bizarre remark

[03:03] <audreyt> azuroth: http://www.cs.kent.ac.uk/people/staff/smk/redblack/rb.html ?

[03:10] <audreyt> I've just submitted the title of my talk in November's YAPC::SouthAmerica 2006

[03:10] <audreyt> "Golfing Perl 6"

[03:11] <audreyt> I have no idea what I'll be talking about, but it sounds better than "Deploying Perl 6" imho :)

[03:14] *** penk left
[03:15] <azuroth> audreyt: yeah, the second one

[03:17] <audreyt> Okasaki's book can help

[03:18] <KingDillyDilly> I'd have to check the dictionary to make sure what's meant by "deploying" Perl 6. Releasing the language? Switching to it to program with it?

[03:19] *** particle_ joined
[03:19] *** neoesque joined
[03:19] <audreyt> it means distribute, install, and maintaining Perl 6 programs in a place with programs already written in other languages, specifically Perl 5.

[03:19] <azuroth> 'purely functional data structures'?

[03:19] <audreyt> azuroth: yup.

[03:19] <azuroth> cool. I'll have a look for it

[03:20] <audreyt> KingDillyDilly: it mostly means "what I've learned from putting some perl 6 code in $job"

[03:20] <TimToady> I wonder what I should talk about...

[03:20] <azuroth> talk about me...

[03:21] <TimToady> I'm tired of talking about me...

[03:21] <KingDillyDilly> http://www.m-w.com/dictionary/deploy "to spread out, utilize, or arrange..."

[03:21] <azuroth> which is why there's me instead!

[03:21] <audreyt> KingDillyDilly: yup, that's the meaning

[03:22] <audreyt> or, more specifically

[03:22] <audreyt> http://en.wikipedia.org/wiki/Software_deployment

[03:22] <KingDillyDilly> Could mean developing the language, or could mean learning Perl 6. If I were a programmer rather than curious about development of the language (which I am) I might not go to your talk if I thought it was about the former.

[03:23] <audreyt> which is why I hope people will read the abstract instead of just the title :D

[03:23] <audreyt> (and there is already merlyn+bdfoy's "Learning Perl 6" in the same conference)

[03:25] <KingDillyDilly> Do you use those artsy photos of yourself in promos, or something more business-like?

[03:25] <audreyt> TimToady: I enjoy very much the natural-language parts in your talk

[03:25] <audreyt> in particular on translation

[03:25] <KingDillyDilly> I enjoy the screen saver pictures.

[03:26] <audreyt> yup, me too

[03:26] <audreyt> KingDillyDilly: I don't have "business-like" photo at all

[03:26] <FurnaceBoy_> deploying != learning

[03:26] <KingDillyDilly> Ok, then "utilizing"

[03:26] <FurnaceBoy_> also, "environment variable" is very well established and specific term, cannot be changed (dates back 35 years)

[03:27] <FurnaceBoy_> but apart from that, "hi."

[03:27] <KingDillyDilly> I agree. It's more common than "environmental variable" and I wish it were the only term.

[03:27] <FurnaceBoy_> env-al seems to be confusing.

[03:28] <FurnaceBoy_> but when you said, "I'm with merlyn," I thought you were promoting env'al

[03:28] <FurnaceBoy_> I'm sure the confusion was accidental

[03:28] <KingDillyDilly> I'm with Merlyn because I agree that "If they both have "env"-ish stuff in the name, let's use the same name for both.  If they are far enough apart that they should be distinct, call them something different."

[03:29] <FurnaceBoy_> yes

[03:30] <audreyt> considering how (conceptually)it's passed thru the call stack

[03:30] <audreyt> maybe we can call them "envoy variables"

[03:30] * FurnaceBoy_ has a case of variable envy

[03:30] <audreyt> FurnaceBoy++

[03:31] <spinclad> 'deploying' is more 'putting into place so it's usable' than 'utilizing' or 'making use of' directly, in my experience

[03:31] <audreyt> envy $me of Gucci;

[03:31] *** justatheory joined
[03:32] <spinclad> $audreyt is $Container of Gucci ?  i do envy!

[03:32] <spinclad> a Case of Gucci, even

[03:32] <audreyt> actually no... mostly Dior nowadays.

[03:33] <audreyt> though the :shape of container of envy_me is really pretty.

[03:33] <FurnaceBoy_> deploy -> "use in anger" ? :)

[03:34] <audreyt> FurnaceBoy_: where did you get that definition? :)

[03:34] * FurnaceBoy_ /me

[03:35] <spinclad> deploy -> 'set out for use', in anger or otherwise?

[03:35] <FurnaceBoy_> pretty much

[03:35] <FurnaceBoy_> although,

[03:35] <FurnaceBoy_> people do associate it with "real paying work"

[03:36] <FurnaceBoy_> if you get my drift.

[03:36] <FurnaceBoy_> "put in front of customers"

[03:36] <FurnaceBoy_> battle-ready

[03:36] <spinclad> well, sure, i've deployed lots of stuff and gotten $pay ed

[03:36] * FurnaceBoy_ 's metaphors are overheated today

[03:37] <FurnaceBoy_> I;'m sure context will make the right word obvious :)

[03:37] <spinclad> it does sound a bit like the opposite of 'employ', though

[03:38] <FurnaceBoy_> actually, it's a synonym in some senses. ;)

[03:39] *** aufrank joined
[03:39] <FurnaceBoy_> there is at least one sense of deploy that means exactly employ

[03:39] <spinclad> 'deploy for employment'

[03:39] <FurnaceBoy_> for continued employment, deploy Perl6

[03:39] <FurnaceBoy_> To enjoy your employment, deploy

[03:40] <audreyt> it's all just a ploy...

[03:40] * FurnaceBoy_ feels a limerick coming on

[03:40] <FurnaceBoy_> "...it's not just a toy!"

[03:40] <FurnaceBoy_> To enlarge your endowment, deploy   (Perl6 spam)

[03:41] <azuroth> sounds a bit like a KOMPRESSOR song to me

[03:41] <aufrank> hello all!

[03:41] <FurnaceBoy_> well it needs work.

[03:41] * FurnaceBoy_ phones session musicians

[03:41] <aufrank> audreyt: how's the AIX gcc porting going?

[03:42] <FurnaceBoy_> aufrank: ola

[03:42] <audreyt> aufrank: it works

[03:42] <spinclad> .oO{ no, no, gcc already runs on AIX }

[03:42] <audreyt> right, it's GHC

[03:42] * FurnaceBoy_ rewrote to GHC

[03:42] <audreyt> aufrank: stage1 was completed yesterday, so I was able to compile openagp; I left stage2 running overnight

[03:42] <audreyt> it's already past the typechecker when I left office at 8pm last night

[03:43] <audreyt> so it should be completed by now

[03:43] <audreyt> s/openagp/openafp/

[03:43] <aufrank> :)

[03:44] <audreyt> it's interesting that Dior is also the father-in-law of Earendil the mariner

[03:44] <aufrank> silmarillion++

[03:45] <spinclad> but that one wasn't a Christian

[03:45] <audreyt> no, I don't know any Half-elven Christians

[03:46] *** FurnaceBoy_ is now known as FurnaceBoy

[03:47] *** pjcj joined
[03:48] <audreyt> (though there is an elven Celebrian)

[03:49] <spinclad> and the fields of Celebrant (or i misremember)

[03:51] <audreyt> that's correct; the field is named after the Celebrant river

[03:52] * audreyt blames TimToady for inflicting this strange Tolkien addiction

[03:54] * TimToady blames Tolkien...

[03:55] * spinclad blames Ilúvatar

[03:56] * Kattana demands support for tengwar charsets

[03:58] * audreyt hands Kattana ConScript fonts

[03:59] <audreyt> U+E001 .. U+E07F  iirc

[03:59] <audreyt> er, sorry, U+E000.

[04:01] <Kattana> lol, I should have known.

[04:03] *** lisppaste3 joined
[04:03] * FurnaceBoy blames the Kalevala

[04:12] <KingDillyDilly> Since there's a Wikipedia page for Perl 6, maybe I should create one for Python 3000.

[04:13] <KingDillyDilly> (. o O)

[04:14] *** stevan_ joined
[04:15] <FurnaceBoy> at least due date for that is contained in its name :)

[04:15] <FurnaceBoy> unlike PerlChristmas

[04:15] <FurnaceBoy> err, deployment date?

[04:15] * FurnaceBoy joins the undeployment queue

[04:16] <KingDillyDilly> It seems to be on approximately the same track as Perl 6.

[04:16] <FurnaceBoy> I guess you could say that the long tail of Sourceforge projects are "undeployed".

[04:16] <FurnaceBoy> that's pretty damning for a program.

[04:16] <FurnaceBoy> Like an unseeded torrent

[04:17] <FurnaceBoy> a soul in limbo, disembodied

[04:20] * KingDillyDilly thinks the same in #python, gets a shrug from Jerub, thinks it's Juerd, not sure.

[04:21] <FurnaceBoy> don;t wait for approval, just do it if ya wanna

[04:21] <spinclad> pretty sure Jerub =!= Juerd

[04:21] <KingDillyDilly> Yeah, but all I know is there's an enumerate function. I think it has something to do with numbers.

[04:22] <FurnaceBoy> that's all you know about Python 3000 ?

[04:22] <FurnaceBoy> there are a bunch of PEPs. I came across a trove of info recently, can't be hard to find.

[04:22] <KingDillyDilly> Actually, that may just be Python.

[04:23] <KingDillyDilly> I'd just do a bunch of copy and pasting with some rewording. Like my High School book reports.

[04:25] <KingDillyDilly> I did a good job on Wikipedia's http://en.wikipedia.org/wiki/Comparison_of_programming_languages with that method.

[04:27] <azuroth> C++ isn't _that_ weak, is it?

[04:27] <KingDillyDilly> 3 is it's rank. See the footnote.

[04:27] <KingDillyDilly> 1 is most popular.

[04:28] <azuroth> I mean, in type safety

[04:28] <FurnaceBoy> it's rather strict, as they go...

[04:28] <FurnaceBoy> mathematica ... hmmm!

[04:29] <KingDillyDilly> Don't know. That was carried over from http://en.wikipedia.org/w/index.php?title=Comparison_of_programming_languages&oldid=42439602

[04:29] <FurnaceBoy> influences column looks fairly right

[04:29] <KingDillyDilly> I didn't create the entire chart.

[04:30] <FurnaceBoy> I guess it's been WikiWatched for a While

[04:30] <azuroth> would I be wrong to change C++ from "static, weak" to "static, strong"?

[04:30] * FurnaceBoy wouldn't object

[04:30] * FurnaceBoy didn't really intend the pun

[04:30] <audreyt> C++ allows explicit cast, no?

[04:31] <mugwump> doesn't Java, too ?

[04:31] <spinclad> yes, that weakens its rating

[04:31] <spinclad> [C++]

[04:31] <audreyt> but Java throws exception, while C++ silently permits it, iirc

[04:31] <audreyt> (on incompatible types)

[04:31] <FurnaceBoy> true

[04:31] <azuroth> hmm, I guess so. but it's explicit, and it's not like 'int a = "foo"' works...?

[04:31] <FurnaceBoy> that might explain the rating

[04:32] <azuroth> "static, weak (but far stronger than C)"?

[04:33] <FurnaceBoy> LOL.

[04:33] <azuroth> ;-p

[04:33] <mugwump> Someone here says that (SomeClass)blahObject works in Java

[04:33] <FurnaceBoy> "and especially much much stronger, hard to overstate really, than K&R C"

[04:33] <FurnaceBoy> "...not to mention BCPL"

[04:34] <spinclad> the world an array of int

[04:34] <KingDillyDilly> http://cgibin.erols.com/ziring/cgi-bin/cep/cep.pl?_key=C%2B%2B "The more recent C++ standards do support safe casts, but this feature is not yet  universally available or employed."

[04:34] <audreyt> mugwump: but that only works if it is really of that class or has been special-cased to handle that; it's an exception otherwise

[04:34] <KingDillyDilly> That page was last updated in 2000.

[04:34] <azuroth> what, dynamic_cast?

[04:35] <FurnaceBoy> well, dynamic_cast works around the underlying weakness of C++

[04:35] <mugwump> right, and presumably you can't resume the exception

[04:35] <mugwump> or can you?

[04:36] *** jabbot joined
[04:38] <mugwump> I suppose not, if you get caught by a caller, but possible if you get pushed to an exception handler and can return an appropriate object

[04:44] * KingDillyDilly notices the word "employed" in his quote

[04:46] <azuroth> it's not exactly a common thing you need to do, I don't think..

[04:54] <PerlJam> it certainly is a different crowd here now than when I'm usually paying attention

[04:57] <azuroth> what, you expect us to talk about perl?

[04:57] <azuroth> pft

[05:11] <FurnaceBoy> some days it's the Perl, some days it's the swine.

[05:13] <PerlJam> azuroth: this being #perl6 I expect people to talk about almost anything

[05:13] <FurnaceBoy> we're pathologically eclectic

[05:14] <KingDillyDilly> PerlJam: has Merlyn really said that Perl 6 may be too bizarre to explain?

[05:16] *** kanru joined
[05:16] <PerlJam> KingDillyDilly: not in those words, no.  He has expressed some worry over how to explain perl6 to someone though.

[05:16] <KingDillyDilly> I'm wearing my journalist hat. I need trash talk.

[05:17] <PerlJam> KingDillyDilly: you need to get some context on that though.  Read the lines before I said anything about merlyn

[05:17] <PerlJam> KingDillyDilly: "journalist"?  Where will you journal?

[05:17] <KingDillyDilly> Wikipedia, in Perl

[05:17] <KingDillyDilly> 's con section.

[05:18] <KingDillyDilly> (Perl 6's yet to be created con section)

[05:18] <FurnaceBoy> well at least it's editable :)

[05:18] <FurnaceBoy> unlike yesterday's NYT

[05:18] <PerlJam> no more banging on the monk's door?  :)

[05:19] <KingDillyDilly> Wikipedia has a larger door and gets more visitors.

[05:19] <PerlJam> that's for sure.

[05:22] * FurnaceBoy mentions runs on MySQL :)

[05:25] *** avar joined
[05:26] <KingDillyDilly> I still have some quotes about Perl 6 trying to get emocons to compile though.

[05:26] <KingDillyDilly> I'm scraping for trash because I figure praise will be a lot easier to find when I get to the pros part.

[05:28] <FurnaceBoy> the problem has been mentioned before, that the trash (Fish's article) is meaningless so far, because there's nothing to critique yet.

[05:28] <FurnaceBoy> wait for 1.0 and the bad reviews on opening night.

[05:28] <KingDillyDilly> (emoticons)

[05:28] <FurnaceBoy> well people said that about Perl 5, 4, 3...

[05:29] <FurnaceBoy> Perl 6 just does it more properly like.

[05:30] <KingDillyDilly> Unfortunately, I'm not inclined to give Perl 6 the benefit of the doubt, but I'll still be reasonably fair...considering

[05:34] *** jabbot joined
[05:35] <KingDillyDilly> I use those "emoticons" maybe more heavily than most because of my regexes. It's the non-regex emoticons that make me feel lost, but maybe that's just because I've been reading posts on a this channel instead of tutorials.

[05:35] <FurnaceBoy> this channel will not clarify much :)

[05:36] <FurnaceBoy> to an end user

[05:38] <KingDillyDilly> I hate that show French in Action too. Learning by observation as opposed to instruction is innefficient.

[05:39] <FurnaceBoy> I believe in immersion.

[05:39] <FurnaceBoy> applies to computer languages too.

[05:39] <FurnaceBoy> you only get good at something you do every day, that's what I believe.

[05:40] <PerlJam> If the end user asks pertinent questions that are specific, the channel could clarify some things

[05:40] <FurnaceBoy> and after 5 years of doing something every day, you can consider yourself semi-proficient.

[05:40] <PerlJam> FurnaceBoy: suddenly this sounds like the intro to a porno or something.

[05:41] <FurnaceBoy> PerlJam, it could. I was thinking of 'passive listening' to the channel being unenlightening for tutorial purposes. ;)

[05:41] <KingDillyDilly> FurnaceBoy: It doesn't have to be that way if the language isn't among the most difficult and if the instructions are top notch.

[05:41] *** neoesque joined
[05:41] <FurnaceBoy> true, you can 'get started' quicker, but Perl6 may not be the best 'quick start' language. or maybe it will be. hard to say.

[05:41] <PerlJam> KingDillyDilly: you consider perl6 to be very difficult?

[05:41] <FurnaceBoy> I just had to listen to the caterwauls of an MS-ite installing Gentoo.

[05:42] <KingDillyDilly> PerlJam: I don't really know. I just get the impression that it will be even more difficult to learn than Perl, which is supposedly harder than average.

[05:43] * audreyt can certainly attest that English is much harder to learn than Perl.

[05:44] <audreyt> (I started learning the two at around the same time)

[05:45] <aufrank> audreyt: and that took you about 22 days, right?

[05:45] <audreyt> and I still get plurals all mixed up. I much prefer the prefix "@-" sigil over the suffix "-s" sigil

[05:45] <aufrank> =P

[05:45] <audreyt> aufrank: nope ;)

[05:45] <PerlJam> audreyt: such is the problem with organic growth.  You get all sorts of odd protuberances.

[05:45] <audreyt> but english is also useful :)

[05:45] <FurnaceBoy> English must be learned by rote.

[05:46] <FurnaceBoy> (mostly)

[05:46] <FurnaceBoy> for native english speakers, they only improve by immersion themselves.

[05:46] <FurnaceBoy> constant input

[05:46] <FurnaceBoy> TV doesn't cut it :)

[05:47] <FurnaceBoy> but TimToady's the linguist...

[05:47] <FurnaceBoy> I'm just an end user...

[05:48] <KingDillyDilly> Has anyone who's writing Perl 6 documentation ever taken a technical writing course?

[05:48] <PerlJam> KingDillyDilly: why would a linguist care about technical writing?  ;-)

[05:49] <audreyt> asavige was quite versed in technical writing

[05:49] <audreyt> and merlyn is also reputable for it :)

[05:49] * audreyt looks forward to the YAPC::NA "Learning Perl 6" course

[05:50] * KingDillyDilly critiqued Learning Perl on Perlmonks

[05:51] <audreyt> sure, but well, I still appreciate merlyn's technical writing

[05:51] <PerlJam> criticizing is easy to do.  What's hard is creating something.

[05:51] <KingDillyDilly> As Wassercrats, not the anonymonk who acts like me.

[05:51] <audreyt> (as both translator and instructor)

[05:52] <KingDillyDilly> A better index is easy. Maybe I'm unique in how I learn though.

[05:52] <FurnaceBoy> PerlJam++

[05:54] <KingDillyDilly> One day I'm going to take a printout of my critique to a bookstore to see if the new edition of Learning Perl was improved per my suggestions.

[05:56] <KingDillyDilly> If so, I'll write to O'Reilly to ask for a free copy since I can't buy one due to my boycott.

[05:56] <FurnaceBoy> you could put that time into your own creation...

[05:58] <KingDillyDilly> I use my skill in explaining in other things.

[05:59] <KingDillyDilly> In my criticism, for example.

[06:00] *** elmex joined
[06:04] *** codebreaker_ joined
[06:05] <KingDillyDilly> Copycat: http://www.geocities.com/boycott_o_reilly/

[06:06] <PerlJam> heh, somehow I think that boycott is of a different nature

[06:06] <PerlJam> Do you not purchase parts from O'

[06:06] <PerlJam> O'Reilly auto parts?

[06:07] <KingDillyDilly> I'd try to avoid it, but I haven't had occasion to since my boycott began.

[06:09] <KingDillyDilly> Yes, I'm boycotting the auto parts place too. "Your  browser does not have JavaScript enabled. Most of our site will  not function correctly"

[06:09] <KingDillyDilly> I hate that.

[06:21] <arcady> hah!

[06:21] <arcady> where I go to school, if I use firefox, the webapp used for signing up for classes just throws an exception and dies

[06:24] <FurnaceBoy> ouch.

[06:24] <FurnaceBoy> hit them with a cluestick.

[06:26] <arcady> or just rewrite the whole damn thing in a more sane way

[06:26] <arcady> I'd've used perl 6, if it were remotely ready for that kind of use

[06:48] *** r0nny joined
[06:50] *** iblechbot joined
[06:54] *** KingDillyDilly left
[06:54] *** drrho joined
[07:33] *** marmic joined
[07:44] *** Aankhen`` joined
[07:53] *** Ymmv joined
[08:15] *** kane_ joined
[08:19] <svnbot6> r10222 | scw++ | Pugs::Grammar::MiniPerl6

[08:19] <svnbot6> r10222 | scw++ |  * Combination of function application and anding parsed.

[08:35] *** jserv-- joined
[08:42] *** q[uri] joined
[09:47] *** xinming joined
[09:53] *** Odin-LAP joined
[10:10] *** Aragone is now known as Arathorn

[10:13] *** lichtkind joined
[10:14] *** nnunley joined
[10:31] *** Daveman joined
[10:38] *** codebreaker_ joined
[10:52] *** xinming joined
[10:53] <xinming> what the ip for perlcabal.org is please?  DNS server seems to be down...

[10:54] <Arathorn> 194.145.200.126 is feather - isn't perlcabal hosted on the same box?

[10:56] <xinming> Arathorn: thanks, works now...

[11:03] *** neoesque joined
[11:03] <Arathorn> np

[11:03] *** chris2 joined
[11:03] *** TimToady joined
[11:04] *** nwc10 joined
[11:10] *** TimToady joined
[11:24] *** Maddingue joined
[11:27] *** Grrrr joined
[11:28] <azuroth> if a StockItem is actually a stock type, what should we call {x items of a specific stock type}

[11:36] *** mako132_ joined
[11:57] *** stclare left
[11:58] *** mako132_ joined
[12:04] *** jsiracusa joined
[12:06] *** iblechbot joined
[12:09] *** Limbic_Region joined
[12:14] *** flounder99 joined
[12:23] *** stclare joined
[12:25] *** nwc10 left
[12:33] *** xerox joined
[12:44] <lichtkind> theorbtwo please get tsunami one remix of little fluffy clouds

[12:44] *** neoesque joined
[12:49] <theorbtwo> lichtkind: Huh?

[12:50] <lichtkind> theorbtwo The Orb - Little Fluffy Clouds (Adam Freeland Tsunami One Remix).mp3

[12:50] <lichtkind> theorbtwo i love it

[12:51] <theorbtwo> Ah.

[12:51] <theorbtwo> I'm not named after the band.

[12:51] <lichtkind> i thought you said that

[12:52] <theorbtwo> I'd never heard of the band at the time I started using the name "The Orb" -- indeed, it would have been around the same time they were named.

[12:52] <azuroth> I never even thought to read it as three separate words before. it reminded of theodore somehow.

[12:53] <theorbtwo> I get that surprisingly much.

[12:56] *** merlyn joined
[12:56] <Limbic_Region> oh - FYI, rafael has added "state" variables to bleed perl.  He is also using a p5 varation of examples/cashiers.p6 as a test case - go Pugs

[12:57] <rgs> yes.

[12:57] <rgs> and also, I'm her e:)

[12:57] <theorbtwo> Wow!

[12:57] <rgs> Limbic_Region++ # sends patch ideas

[12:57] * theorbtwo wonders when 5.10.0 will be out.

[12:57] * rgs too.

[12:58] <Limbic_Region> oh, cool - except I think the example could use a bit of refining

[12:58] * Limbic_Region is testing now

[12:58] <theorbtwo> I suppose asking more questions along that line would be both OT and annoying.

[12:58] <rgs> refining patches welcome

[12:59] <rgs> theorbtwo: /me wonders when pugs 2*pi will be out. :)

[13:00] <Limbic_Region> rgs - I guess it is just a matter of taste.  To be closer to the p6 example, $amount belongs inside each of the anonymous subs not the pseudo-object constructor

[13:00] <Limbic_Region> but it works the same

[13:00] <Limbic_Region> so rgs++

[13:01] <rgs> Limbic_Region: in Perl 5, if $amount is not declared outside, those are not closures, so the point of the test is a bit missing

[13:01] <Arathorn> state is for lexical variables which last for the life of the closure, right?

[13:02] <Limbic_Region> rgs - they don't need to be closed over

[13:02] <Limbic_Region> let me provide an example

[13:02] <rgs> right

[13:02] <rgs> but the test is testier that way ! :)

[13:02] <rgs> (meaning, less redundant with previous tests)

[13:06] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "For rgs - a closer bleed perl example of examples/cashiers.p6" (20 lines, 409B) at http://sial.org/pbot/17037

[13:06] <rgs> Limbic_Region: yes, that was my 1st implementation in perl 5 of the cashier example

[13:06] <rgs> (and it works :)

[13:08] <Limbic_Region> anyway - just good to see that Pugs is in a position to be blazing the way for p5

[13:08] <theorbtwo> Roughly how many posts/day does p5p get?

[13:09] <rgs> there are lots of patches lately

[13:10] <rgs> probably 30 posts a day or so

[13:12] <theorbtwo> Hm, that's not bad.

[13:14] *** jiing__ joined
[13:15] *** jiing___ joined
[13:15] *** weinig joined
[13:15] * theorbtwo subscribes to perl5-porters, unsubscribes from qemu-devel

[13:16] <rgs> woot

[13:18] <clkao> audreyt: are you coming to yapc::eu?

[13:18] *** jiing_ joined
[13:19] <theorbtwo> Hm, is there anything stopping us from allowing %foo  {'bar'}, other then paren-less if?

[13:21] <theorbtwo> (Assuming we allow the parser look-ahead to the next non-whitespace char.

[13:23] <Limbic_Region> isn't that what abigail was bitching about a couple of years ago

[13:24] <Limbic_Region> that if you wanted to do that - you need the . to let the parser know what you were doing?

[13:24] <rgs> yes. abigail was also bitching about print ("foo") emitting warnings in perl 5

[13:24] <Limbic_Region> well, he can't be right all the time now can he

[13:24] <Limbic_Region> ;-)

[13:26] <Arathorn> what is the ambiguity in 'print ("foo")', ooi?

[13:26] <Arathorn> (and why doesn't that warning also show for 'print ("foo")'?

[13:27] <azuroth> Arathorn: what's the difference?

[13:27] <rgs> print ($x + $y) + $z

[13:28] <theorbtwo> Which, as abigail pointed out, is an addition in void context.

[13:28] <theorbtwo> I do that all the time, but only because my fingers are programmed to type perl -le instead of perl -wle

[13:29] <rgs> but the keystroke you save on avoiding w is wasted on a good whitespace !

[13:30] <Arathorn> azuroth: oops - this client munges whitespace - the second example had a doublespace between print and (

[13:30] <azuroth> ahh

[13:31] <azuroth> that makes me hurt...

[13:31] <theorbtwo> Arathorn: Because the code that creates the warning is a bit on the buggy side.  It should probably be fixed or removed entirely, but apparently nobody has done either yet, possibly because of not being able to decide which should happen.

[13:31] <theorbtwo> OTOH, in perl6 they mean completely different things.

[13:32] <Arathorn> fair enough.

[13:35] *** KingDiamond joined
[13:36] *** shachaf joined
[13:37] *** manbou joined
[13:39] *** kolibrie joined
[13:50] *** cdpruden joined
[13:56] *** justatheory joined
[13:59] *** eric256 joined
[14:30] *** aufrank joined
[14:44] *** FurnaceBoy joined
[14:53] *** clkao joined
[15:24] *** vel joined
[15:56] *** jserv-- joined
[16:35] *** amnesiac joined
[16:37] <svnbot6> r10223 | scw++ | Pugs::Grammar::MiniPerl6

[16:37] <svnbot6> r10223 | scw++ |  * Function application with parameters supported

[16:52] *** wilx joined
[16:54] *** particle_ joined
[16:54] *** Aankhen`` joined
[16:58] <svnbot6> r10224 | fglock++ | RuleInline-more.pl - additional rule/token primitives, to be merged into RuleInline.pl

[17:03] *** fglock joined
[17:06] *** aufrank joined
[17:20] *** dduncan joined
[17:24] *** miyagawa joined
[17:27] *** FurnaceBoy is now known as PM

[17:35] *** PM is now known as FurnaceBoy

[17:35] *** ghenry joined
[17:39] *** FurnaceBoy is now known as FB|afk

[17:40] <aufrank> ?seen audreyt

[17:57] *** DaGo joined
[18:02] *** ruoso joined
[18:07] *** justatheory joined
[18:19] *** xinming joined
[18:20] *** iblechbot joined
[18:33] <fglock> SoC suggestions answered - I hope I'm not over-promising

[18:36] *** Aankh|Clone joined
[18:36] <aufrank> fglock: what are you proposing?

[18:39] <fglock> basically, a rewrite of Perl6-Value/Perl6-Container for integration with Pugs::Compiler::Rule and the other Perl6-on-Perl5 tools

[18:39] <aufrank> neat!

[18:40] <aufrank> when you say 'suggestions answered' does that mean you proposed something in public somewhere?

[18:41] <fglock> there is a place for people to make contributions in the SoC page - I think only mentors can access that

[18:48] <aufrank> fglock: did you email with your mentor before you submitted the proposal, or was the proposal the first step?

[18:52] *** shachaf joined
[18:54] *** FB|afk is now known as FurnaceBoy

[18:54] <fglock> aufrank: I discussed it here, and then I mailed some people for suggestions - but I don't know who is the actual mentor yet

[18:54] <aufrank> I see

[18:55] *** masak joined
[18:58] <fglock> later &

[18:58] *** fglock left
[18:58] <aufrank> bye!

[19:12] *** Aankh|Clone is now known as Aankhen``

[19:21] *** hugues23 joined
[19:48] *** walter joined
[19:54] *** larsen joined
[19:58] *** Steve_p joined
[19:58] <Steve_p> seen TheDamian?

[19:58] <jabbot> Steve_p: I havn't seen TheDamian, Steve_p

[19:59] <Steve_p> Hmmmm

[20:09] *** DaGo joined
[20:11] *** froh-doh joined
[20:23] *** bernhard joined
[20:41] *** DaGo joined
[20:42] *** geoffb joined
[20:46] *** f_ounder99 joined
[21:12] *** justatheory joined
[21:14] *** frederico joined
[21:30] *** kanru joined
[21:40] *** marcus_ joined
[21:51] *** GameZMember337 joined
[21:59] *** clkao joined
[22:14] *** awwaiid joined
[22:22] <mugwump> TimToady, audreyt : S06 typo: 'subset' under Polymorphic types should be 'subtype', no?

[22:26] <TimToady> no, we renamed it "subset" because people think subtype means derived type, and subsets sets are designed to violate Liskov subst.

[22:29] *** rollie joined
[22:29] *** rollie left
[22:30] <mugwump> ok.  Hey, is there syntax for higher order/parametric types?  I remember something about 'is shape', I'm just searching the synopses for it now

[22:31] <mugwump> I see S09 using it for multidimensional arrays, which is a bit different

[22:32] <TimToady> parametric types are normally declared as roles--see S12.

[22:32] <mugwump> ah, I see

[22:32] <TimToady> shaped arrays are a particular sort of parametric type.

[22:33] <mugwump> yes.  and multidimensional ones are actually nested parametric types, I think.  With a nice syntax of course

[22:34] <mugwump> ie, my int @foo[^3;^3;^3] is something like Array of (Array of (Array of int where { .items == 3}) where { .items == 3 }) where { .items == 3 }

[22:35] * theorbtwo is certianly glad for the nice syntax.

[22:35] <mugwump> so, is Array defined something like;

[22:35] <TimToady> well, it's more like "this dimension's type is 0..2

[22:36] <mugwump> role Array[::X] { ... }

[22:36] <mugwump> ?

[22:36] <mugwump> and Mapping: role Mapping[::X, ::Y] { ... }

[22:39] <mugwump> Can I make it a list?

[22:39] <TimToady> cat you make what a list?

[22:39] <TimToady> *can

[22:40] <mugwump> role Relation[ ::X, ::Y, ... ] { ... }

[22:40] *** aufrank joined
[22:40] <TimToady> presumably one could use a slurpy of some sort.

[22:41] <TimToady> it's just a signature, as far as I know.

[22:41] <mugwump> ooo that's interesting indeed

[22:42] <TimToady> at worst you say role Relation[ \$Capture ] {...} and decode the capture by hand...

[22:43] <mugwump> But could I write : role Tuple[ *::T ] { has @.items of T }

[22:43] <mugwump> ?

[22:44] <TimToady> I don't know.  that looks more like a slurpy scalar than a slurpy array.

[22:45] <TimToady> Type names are first class things, so you can collect them in an ordinary *@types array.

[22:46] <mugwump> cool

[22:46] <TimToady> but how you'd then use that to declare @.items I'm not sure.

[22:47] <TimToady> arrays are generally considered to be of homogenous type.

[22:49] <TimToady> Seems like the Tuple[] declaration is just trying to dup a class declaration with separate attributes...

[22:49] <theorbtwo> TimToady: Why not just has @.items of any(@types)?

[22:50] <TimToady> I don't think that's the customary meaning of Tuple...

[22:50] <mugwump> no, certainly not what I'm after ... :)

[22:50] <theorbtwo> I was just looking at the small problem.

[22:52] <TimToady> classes and roles look like declarations, but they're really just calling metaclass methods underneath when you say "has" and such.

[22:52] <mugwump> ssh don't say that too loudly TimToady ;)

[22:53] <TimToady> Perl will remain a dynamic language... :)

[22:53] <TimToady> the point, though, is that with customary forms of declaration, customary forms of analysis can be brought to bear.

[22:54] <TimToady> BEGIN is just an inside-out eval.

[22:54] <TimToady> both of them are last-ditch escape valves.

[22:54] <TimToady> use of either of them usually indicates a missing language feature.

[22:54] * mugwump nods

[22:55] <TimToady> and usually the language feature can be added with much better control.

[22:55] <TimToady> symbolic links instead of eval...

[22:55] <TimToady> use instead of BEGIN

[22:55] <mugwump> parsetree macros instead of source filters... ;)

[22:55] <TimToady> and the "official" language can encompass those dynamic constructs that

[22:56] <TimToady> can keep track better, like macros, yes.

[22:56] <TimToady> so we can keep the ideal that Perl is really a suite of languages, not a single language.

[22:56] <TimToady> But hopefully still enable tools to work consistently.

[22:58] <mugwump> Perl not single language, it rules!

[22:58] <TimToady> well, we still have to prove it can be done...

[23:13] *** SamB joined
[23:45] *** buu joined
[23:46] <azuroth> gee, it's surprisingly early.

[23:46] <meppl> gute nacht

