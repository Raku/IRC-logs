[00:10] *** BenQ joined
[00:11] <BenQ> who speek english :))

[00:11] <Juerd_> Who does not.

[00:13] *** BenQ left
[00:26] <dduncan> I just sent an email post to both dbi-users and poop-group titled "RFC: renaming SQL::Routine out of SQL"; any feedback there is appreciated

[00:27] <azuroth> hmm. do it!

[00:36] <svnbot6> r8596 | putter++ | misc/JavaScript-FrontEnd/Grammar.pm - Corrected typo.  The file now parses with current pugs and parrot 0.4.0.  But being untested, it is, of course, very unlikely to actually work.

[01:04] *** _SamB_ joined
[01:05] <am> is now known as _SamB_

[01:09] *** freakman joined
[01:09] *** Cryptic_K joined
[01:10] *** freakman left
[01:14] <svnbot6> r8597 | lwall++ | strRange thought "aa" < "z" so string ranges didn't wrap right.

[01:14] <svnbot6> r8596 | putter++ | misc/JavaScript-FrontEnd/Grammar.pm - Corrected typo.  The file now parses with current pugs and parrot 0.4.0.  But being untested, it is, of course, very unlikely to actually work.

[01:36] *** putter joined
[01:39] <putter> audreyt: would you be ok with my dropping a copy of the 25MB 2000+ file mozilla/js/tests in misc/JavaScript-FrontEnd?  A bit large, but it seems like the front-end might eventually make a useful stress test for rules and oo.

[01:39] <putter> rules now, oo later

[02:08] *** putter joined
[02:08] <svnbot6> r8598 | putter++ | The crude beginnings of a JS frontend test suite.  Requires mozilla_js_tests, not yet checked in.

[02:11] <putter> audreyt/etal: Bug report: with parrot-0.4.0 and today's pugs, cd misc/JavaScript-FrontEnd; ../../pugs -I .   and use Grammar;, 

[02:13] <putter> err, never mind. :/

[02:14] <putter> Is embedded parrot known to be broken, src/Pugs/Eval.hs:852:12-52: Irrefutable pattern failed for pattern (Pugs.AST.Internals.App (Pugs.AST.Internals.Var name'), or is my build just flakey?  sigh.

[02:17] *** gilby joined
[02:19] <putter> hmm, pugs.kwiki.org (and www.kwiki.org) are refusing connections.

[02:20] *** oylenshpeegul left
[02:30] *** justatheory joined
[02:42] <putter> ok, with pugs r8593, parrot 0.4.0, amd64, and an unclear gcc/glibc situation (ie, I may have updated glibc since ghc was compiled), embedded/external parrot and "a" ~~ /a/ yields segfault/ok, and /a/ ~~ "a" yields

[02:43] <putter> pugs: src/Pugs/Eval.hs:852:12-52: Irrefutable pattern failed for pattern (Pugs.AST.Internals.App (Pugs.AST.Internals.Var name') invs' args') : rest   with both.

[03:00] <putter> oooo... jsperl5!

[03:03] <putter> Ok, it looks like "a" ~~ /<Foo::Bar>/ doesn't work, as it gives the same PGE error as /<nonexistentmumble>/.   So I place the JS FrontEnd back on hold.

[03:06] <clkao> putter: what a bout jsperl5?

[03:06] *** scrottie joined
[03:07] <putter> err, that is grammar Foo { rule Bar { x }} errors, but rule FooBar {x} works.

[03:08] <putter> clkao: didnt exist the last time I looked.  found it on iblech's smoke list.  thought it was a nifty way to go, so glad someone (iblech?) pursued it.

[03:09] <putter> hmm...

[03:13] <putter> anyone: my current impression is there is little interest in my rules engine running on swi prolog within perl5.  so I've done little work on it (well, some p6 support now exists), and not even kept misc/Grammars/snapshot_of_prolog_engine.pl synced.

[03:13] <putter> But I also thought there was little interest in js/p5 hybrids.  ;)  so if I'm also wrong about the engine, just let me know.

[03:16] <putter> Basically its a quick path to getting _full_ p6&p5 regexp support... and good performance... and utterly undeployable (requires swi prolog compiled with non-default arguments), so it's only good for grammar development.

[03:18] <putter> oh! clkao++ # jsperl5

[03:22] <putter> clkao: nifty!

[03:24] <putter> clkao: have you looked at using a pugs-embedded p5 with js?

[03:26] *** loftcity joined
[03:27] *** xinming joined
[03:30] <putter> iblech/etal: it looks like out of the box, pugs -B js doesnt find its Prelude.js, and gives an error message when offered expressions.  With -I blib6 it goes to (again) precompile it.  If a -I is required, perhaps the error message should offer it?

[03:31] *** scook0 joined
[03:33] <putter> ah well.  I was unsuccessful in trying to run the js backend.

[03:35] <putter> clkao: if the js backend does not as yet support eval(:lang<perl6>), one thing which might be done with jsperl is to inject that capability.  using perl5 to call pugs.

[03:37] <putter> long ago when i tried this, iblech's modules weren't really set up for being use()ed from p5 (... extraneous output...? I don't really remember).  but if that's still a poblem, and if difficult to fix, one could now use pugs -C js.

[03:38] <clkao> *nod*

[03:38] <clkao> we'll see in chubei hackathon

[03:38] <clkao> now i need to pack and move

[03:38] <putter> There may still be some code somewhere in the pugs tree which did a zero-effort stab at it.

[03:38] <putter> ooo, hackathon.  enjoy! :)

[03:39] <putter> cheers &

[03:39] <clkao> but if we call to pugs.pm

[03:39] <clkao> how do we carry current context (variable etc)

[03:40] <clkao> and if you care familiar with pil2js, can you look at the array/shift.t failure? i have several things blocked by that bug

[03:42] <putter> dont immediately see the code.

[03:43] <clkao> it's about array arg being slurpy

[03:43] <putter> re context, didnt. ;)  let's see...

[03:43] <putter> re array/shift.t failure, I'll take a look...

[03:53] <putter> clkao: ping?

[03:57] *** zuulvin_ joined
[04:00] *** joepurl joined
[04:03] <putter> clkao: the problem lies not with pil2js, but with pugs's pil output.

[04:04] <clkao> ah.

[04:04] <putter> given my @a = ([]); push(shift @a,'foo','bar');   you get shift called w 3 args.

[04:06] <putter> pugs -C pil -e 'my @a = ([]); push(shift @a,23,24)'

[04:07] <putter> hopefully there will be an easier way to get yaml-ized pil for pil2.  currently, you can get it (or at least once could) by running pugs -B js and something like eval.yaml expr at the read-eval-print loop.  in pugs-p5.pl repl, you can toggle :v, enter the expression, and scroll up.

[04:09] <putter> given that pil1 is on it's way out, it might be easiest to wait for pil2, rather than trying to fix it.  or not...

[04:13] <putter> someone had a one-liner to yield the pil yaml for an expression, but I cant immediately find or recreate it.

[04:16] <putter> clkao: re context, one trick I used to pass variables to prolog was to do an aggressive scan of the regexp string, noting anything that looked like a variable, and then pass a hash of variable name to... well, that doesnt help

[04:17] <putter> because p6 is so much more picky about predeclaration than p5.  though since the pil2js environment structure is available... ok,

[04:20] <putter> the prolog idea was to note anything that might be a variable, pass a hash of callbacks for each, to be used if it turned out they really were one (rather than, eg, a comment or string literal).  one might play a similar game with the string to be evaled, and on

[04:20] *** PJF joined
[04:21] <putter> the js side, prune the list to vars which are real, and wrap the eval code in an appropriately argumented function for pugs to compile.

[04:22] <putter> not great, as the.... oh, I'm silly.

[04:28] <putter> ok, variables arent an issue, because pugs will happily -C pil code (like -e 'say @a') with dangling vars.  the generated code gets evaled in the backend, so if that's sufficient to connect things up, you're all set.

[04:35] <putter> but if you need prototype info, a (we dont have it yet) parser regexp modification, etc, to get the parse right, that's just not going to happen.  simple cases work ok though, as long as the pil generator continues to be tolerant.  it seems an inherent problem with an external pil generator.

[04:40] <putter> which suggests non-hs backends using hs pugs to generate pil is more of a bootstrap strategy, a way to make backend progress, and ultimately to boot a compiler written in p6 into the non-hs backends.  rather than something which can really be correctly delegated to.

[04:42] <putter> the (small:) price of a flexible syntax.

[04:44] <putter> ok, need to load shed.  good night all &

[04:50] *** aufrank joined
[05:29] *** loftcity joined
[06:11] *** rantanplan_ joined
[06:26] *** Cryptic_K joined
[06:32] *** Aankhen`` joined
[06:45] <svnbot6> r8599 | stevan++ | src/PIL/Native/Bootstrap/Roles/*

[06:45] <svnbot6> r8599 | stevan++ | - rough sketch/start to core "behavioral" Roles

[06:45] <svnbot6> r8599 | stevan++ | - Eq role based on Haskell Eq class 

[06:45] <svnbot6> r8599 | stevan++ | - Ord role based on Haskell Ord class

[06:45] <svnbot6> r8599 | stevan++ | - Num role based on Haskell Num class & Eiffel NUMERIC

[06:50] <dduncan> Citing a follow-up to my post here 6 hours ago, I have sent a message to several mls, including dbi-users, poop-group, and dbix-class, titled "solved the RFC on SQL::Routine; new direction planned"

[06:52] *** Khisanth joined
[07:30] *** lisppaste3 joined
[07:33] *** Khisanth joined
[07:54] *** rashakil_ joined
[08:03] *** lao joined
[08:11] *** xern joined
[08:16] *** drbean left
[08:28] *** azuroth joined
[08:28] <azuroth> t out

[08:28] <azuroth> err. whoops.

[08:31] <gaal> $morning

[08:33] *** scrottie joined
[08:33] <audreyt> yo

[08:33] * audreyt wakes up

[08:34] * azuroth just whacked his harddrive into an amd 64 system. awesome!

[08:34] <azuroth> however, the n-force onboard sound doesn't seem to be working. not so awesome. :-(

[08:37] *** khisanth_ joined
[08:44] <audreyt> gaal: let Just x = blah

[08:44] <azuroth> bwahaha im engaged suck that space cowboys

[08:46] <gaal> audreyt: I got GHC's brain to explode. see comment in commit :-)

[08:46] <svnbot6> r8600 | gaal++ | Yaml emitting:

[08:46] <svnbot6> r8600 | gaal++ |  - some readability improvements, need more work

[08:46] <svnbot6> r8600 | gaal++ |  - towards proper tagging of emitted arbitrary objects (probably need to add

[08:46] <svnbot6> r8600 | gaal++ |    a tag to all YamlNode types, not just YamlMap... we'll see)

[08:46] <audreyt> gaal: oh good, I hit that in my 1st week of Hs hacking

[08:46] <audreyt> I was _very_ afraid

[08:47] <gaal> like I said in #haskell... I'm really happy this relationship is starting to balance out. GHC causes *my* brain to explode very often indeed.

[08:48] <gaal> audreyt: any ideas on how to golf the v@(VRef r) case in toYaml? it's really... "profound", which is my new euphemism for "code that nests too deeply"

[08:51] <audreyt> lookin'

[08:53] <audreyt> wow you were writing lisp

[08:54] <audreyt> ok, I'll golf.

[08:54] <gaal> "))))"

[08:54] <gaal> yeah, ifValTypeIsa kinda pulls that way I guess?

[09:00] *** Khisanth joined
[09:01] *** integral joined
[09:04] <audreyt> done

[09:04] <audreyt> committing

[09:06] *** azuroth joined
[09:08] <gaal> what can I do to make openfoundry faster?

[09:12] <gaal> audreyt: thanks.

[09:12] <svnbot6> r8601 | audreyt++ | * Pugs.Prim.Yaml: Slight refactoring.

[09:12] <gaal> now, another programming pattern question:

[09:13] *** iblechbot joined
[09:14] <gaal> in hashToYaml, and also in emitNode, there's a parameter that's passed through (d and e respectively). Is there a trick akin to the AOP "wormhole protocol" to avoid this? /me vaguely feels a monad can do this (eg. "ask"), but am not sure how to set it up.

[09:14] <gaal> probably not worth it in these simple cases

[09:14] <svnbot6> r8602 | audreyt++ | * More slight refactorings.

[09:15] <gaal> whee :)

[09:18] <gaal> hmmm, I remember some fighting with layout last night that was only solved when I put the labmda in parentheses (yamlmap <- flip mapM assocs ...). how come it works for you? :-p

[09:22] * gaal bounces in glee when, after following up on the thought "I should go study a Haskell style guide

[09:23] <audreyt> re

[09:23] <audreyt> so, the d/e thing

[09:23] <gaal> ", the first thing his eye catches is "There's More Than One Way To Do It"

[09:23] <audreyt> is among one of the very vew cases where n+k pattern is warranted

[09:23] <audreyt> for the 'd' case that is

[09:23] <gaal> n+k is an improvement I made on prettyVal :)

[09:23] <audreyt> yup

[09:24] <audreyt> classically, it's implemented as a ReaderT

[09:24] <gaal> but if you look at emitterCallback

[09:24] <audreyt> (`runReaderT` 0) $ do ... ask...

[09:24] <audreyt> and then

[09:24] <audreyt> local (+1) ...

[09:24] <audreyt> very simple

[09:24] <gaal> that used to be a big function which I splat to emitNode, then it passes e around w/o ever changing

[09:25] <audreyt> oh, so "local" is not even needed

[09:25] <gaal> so, in the case where it's not changed

[09:25] <gaal> heh

[09:25] <audreyt> in that case

[09:25] <audreyt> you want implicit param

[09:25] <audreyt> aka "env" vars in p6

[09:25] <audreyt> aka $+e

[09:25] <gaal> so (`runReaderT` a) sets up "a" as an askable param?

[09:25] *** Khisanth joined
[09:26] <audreyt> yup

[09:26] <audreyt> only it's spelled as ?e in GHC

[09:26] <audreyt> I'll check in a demo

[09:26] <gaal> "?e"? I thought "e <- ask"

[09:26] <gaal> you mean there's even golfy syntax?

[09:26] * gaal 's brain explodes with delight

[09:28] <audreyt> yeah. there is special syntax for the reader monad

[09:28] <audreyt> but it's not really a reader monad per se

[09:28] <audreyt> because you can jump in and out of it using mplicit param

[09:28] <audreyt> I'll check in the code in 1min

[09:29] <gaal> oooohhh asks is so clever in its simplicity! I never realized it works because it accepts a function on a, and a constructor is of course a function!

[09:30] <lao>  /leave #perl6

[09:31] <audreyt> gaal: yeah. arrow/monad/functor/sequence/etc has that kind of sparkling elegance

[09:33] <audreyt> committed.

[09:34] <audreyt> gaal: so, this is not golfy syntax for reader monad -- it's something else, but amounts to the same effect as reader monad.

[09:34] <svnbot6> r8603 | audreyt++ | * Refactoring Yaml code to use implicit parameters for gaal++.

[09:34] <audreyt> I've applied it to both the d case and e case

[09:35] <gaal> "it's something else, but amounts to the same effect as reader monad.

[09:35] <gaal> " -> typical :)

[09:35] <audreyt> :)

[09:36] <audreyt> now, if you want to eliminate the

[09:36] <audreyt>  let ?d = pred ?d in do

[09:36] <audreyt> call, and have each recursion automatically subsctract ?d

[09:36] <audreyt> you'd want linear implicits (%d) instead of ?d

[09:36] <audreyt> but in this case, the explicitness doesn't really hurt 

[09:36] <audreyt> and arguably makes things more apparent

[09:37] <audreyt> env $d = $+d - 1; # that line is equiv to this

[09:37] <audreyt> or rather, :=

[09:37] * gaal nods

[09:37] <gaal> cool stuff

[09:38] <audreyt> the good thing is that, unlike Reader

[09:38] <audreyt> you can call other function without (?d) in its context normally

[09:38] <audreyt> without lifting

[09:38] <audreyt> also you can have the context (?a, ?b, ?c)

[09:38] <gaal> does this work on arbitrarily long call chains?

[09:38] <audreyt> and call something with (?a, ?c)

[09:38] <audreyt> yes.

[09:38] <audreyt> and efficiently too

[09:38] <gaal> ah, you're answering my question :)

[09:39] <gaal> this is VERY cool then.

[09:39] <audreyt> :)

[09:39] <audreyt> yup

[09:39] <audreyt> env vars is going to rock in p6.

[09:40] <audreyt> so, the 'e' case has no recursion

[09:40] <audreyt> so ?e doesn't really save you anything

[09:40] <gaal> Perl's greatest fear now is that someone comes up with a p->Hs emitter and then everyone will just pull CPAN and code in Hs.

[09:40] <audreyt> so it's a matter of style

[09:40] <audreyt> nah... Hs only works if you know what you are doing.

[09:40] <audreyt> half of the time I don't.

[09:40] <gaal> audreyt: I rememer a quote from you on that topic... :)

[09:41] <audreyt> oh? :)

[09:41] <buu> Hs is scary =[

[09:41] <buu> I don't even know what it means and it scares me!

[09:41] <gaal> * autrijus stares at type Eval x = forall r. ContT r (ReaderT x IO) (ReaderT x IO x) and feels very lost

[09:42] <gaal> <shapr> Didn't you write that code?

[09:42] <gaal> <autrijus> yeah. and it works

[09:42] <gaal> <autrijus> I just don't know what it means.

[09:42] <gaal> -- http://www.haskell.org/hawiki/QuotesPage

[09:43] <audreyt> yeah :)

[09:43] <audreyt> and that, well, doesn't really work.

[09:44] <audreyt> I had to put another EvalT on top of ContT and ReaderT.

[09:44] <audreyt> so it supports my point :)

[09:44] <gaal> the "e" case doesn't save me, except that from a refactoring viewpoint, it was annoying to break up a function because I had to introduce paramaters

[09:44] <audreyt> right

[09:44] <audreyt> implicit vars does the \lifting for you

[09:44] <audreyt> at the cost of a sigil

[09:45] <audreyt> anyway... I'll go back to perl6 land and finish repr types for stevan :)

[09:45] <gaal> well, suppose I was very naive. (not far from the case). I'd say hey, this function is long but I don't want the helper functions to need long useless args. I know! I'll put them in a global!

[09:46] <gaal> this is the same thing, except that it doesn't suck.

[09:47] <audreyt> but in Hs, globals takes 60 chars to declare.

[09:47] <audreyt> instead of in p6, where it takes one

[09:47] <audreyt> (the "*" in "$*foo")

[09:48] <audreyt> the 60 chars are "{-# NOINLINE #-}", ":: IORef ()", "unsafePerformIO (newIORef (...))"

[09:49] <gaal> both solutions are similar in that in their respective languages, they can't be golfed further by much.

[09:49] <audreyt> gaal++

[09:49] <audreyt> but global vars are so wrong, I'm not sure leaving ::* open is a great idea.

[09:50] <gaal> one liners.

[09:50] <audreyt> (as now we have envs, and @*ARGS etc can reasonably be @+ARGS so they can be overridden lexically instead of using "temp")

[09:50] *** r0nny joined
[09:50] <audreyt> one liners have "no strict" by default

[09:50] <audreyt> and as such can be lax

[09:52] *** Khisanth joined
[09:52] <gaal> so $x means (our) ::Main::<$x> yes?

[09:54] <audreyt> in 'no strict'

[09:54] <audreyt> yeah

[09:54] <gaal> probably good enough in one liners :)

[09:55] <audreyt> I think so too 

[09:55] * audreyt still doesn't see a reasonable case for an open$*

[09:55] <audreyt> I mean, ::* is conceptually the outermost lexical scope

[09:55] <audreyt> to any compilation unit

[09:55] <audreyt> but in any other lexical scope, you can't introduce symbols

[09:55] <audreyt> i.e. adding to ::OUTER

[09:56] * gaal nods

[09:56] <audreyt> but somehow you can add to ::* _and_ it affects other people importing your cod

[09:56] <audreyt> e

[09:56] <audreyt> so it's even worse than NOINLINE foo

[09:56] <audreyt> because you still have to import foo explicitly

[09:56] <audreyt> or export it

[09:56] <audreyt> but ::* does its action from an distance without chance of detection

[09:57] <audreyt> I don't know, but I'm very uncomfortable with huffmanizing it this heavy

[09:57] * audreyt goes back to piln haxxoring

[09:58] * gaal eyes rubyext.c some more

[10:16] *** kaktus joined
[10:17] *** nothingmuch joined
[10:20] <r0nny> re

[10:21] <r0nny> audreyt: is it usable again ?

[10:21] <nothingmuch> hola

[10:22] <audreyt> r0nny: by the end of tomorrow, you should be able to write p6 class/role code and have it run on piln runcore

[10:23] <gaal> BTW, to pointfree this:

[10:23] <gaal> emitterCallback e vp = let ?e = e in emitNode =<< thawNode vp

[10:23] <gaal> why wasn't it enough to do

[10:23] <gaal> emitterCallback e = = let ?e = e in emitNode =<< thawNode

[10:23] <gaal> ?

[10:24] <gaal> s/= =/=/

[10:24] <audreyt> change =<< to +

[10:24] <gaal> +!?

[10:24] <audreyt> foo x y = x + f y

[10:24] <audreyt> you can't point free it to

[10:24] <audreyt> foo x = x + f

[10:24] <audreyt> could you?

[10:24] <gaal> ah.

[10:25] <gaal> hrmpfh.

[10:25] * nothingmuch goes for a hike

[10:25] <nothingmuch> ciao!

[10:25] <gaal> nothingmuch: it just started raining here :)

[10:26] <audreyt> gaal: so the pf it

[10:26] <audreyt> foo x = (x+) . f

[10:26] <audreyt> and similarily

[10:26] <audreyt> emitterCallback e = let ?e = e in (emitNode =<<) . thawNode

[10:27] <gaal> yes. apart from being completely unreadable, this is beautiful.

[10:27] <nothingmuch> ooh

[10:27] <nothingmuch> rain good

[10:27] <nothingmuch> i'll take ponchos

[10:27] <audreyt> gaal: well, you can define an infix # (as some has done)

[10:27] <audreyt> and write it as

[10:27] <audreyt> emitterCallback e = let ?e = e in emitNode # thawNode

[10:27] <gaal> ah, that's the reverse $ right?

[10:28] <audreyt> er, some people define that to that as well

[10:28] <audreyt> different purpose

[10:28] <audreyt> or you can define infix =<<.

[10:28] <audreyt> which is self explanatory

[10:28] <gaal> # :: ??

[10:28] <audreyt> emitNode =<<. thawNode

[10:28] <audreyt> that may even be a good idea.

[10:33] <gaal> nothingmuch: if by any chance you're areound tlv tonight, I'm serving pizza

[10:34] <gaal> hmmm, the tagging I was doing *is* the right way to tag an object (no need for syck_emit_tag, just give a tag in syck_emit_{map,seq,str}). but there is some initialization apparently needed to make it actually work. tracing...

[10:35] *** larsen joined
[10:36] <nothingmuch> gaal: crap, was there yesterday

[10:39] <gaal> come again! frequent driver miles!

[10:39] <audreyt> is there such a thing? :p

[10:40] <audreyt> it's like "frequent piloting miles"

[10:40] <gaal> no, but the pizza's for real

[10:40] <gaal> I got tagging to (almost!) work

[10:40] <gaal> - !pugs/object/Foo

[10:41] <gaal> instead of !pugs:object/Foo

[10:41] <gaal> getting warm :)

[10:41] * audreyt feels the warm glow of the Amulet

[10:41] <audreyt> the portal is near!

[10:42] <gaal> I just hope it isn't made of plastic

[10:42] <audreyt> plastic amulets don't glow :)

[10:42] <audreyt> s/glow/warm up/

[10:42] <audreyt> (as the glowing one is life-saving)

[10:42] <gaal> that's because all you ever found was the cheap plastic imitations

[10:42] <gaal> i'm talking about the expensive plastic imitations

[10:43] <audreyt> ahh. _expensive plastic imitations_

[10:43] <audreyt> gaal++ # rofl

[10:43] *** verve_ joined
[10:43] <audreyt> I assume they are produced by the same vendor as the camera

[10:44] <gaal> Acme? :)

[10:45] <gaal> they have orthogonal use (blinding your enemies, keeping warm)

[10:45] <gaal> brb

[10:46] <audreyt> "warming your friends and blinding your enemies"

[10:56] <gaal> fixed. committing.

[10:57] <PJF> Mmmm.... Amulet of Yendor.  It shall be mine.

[10:58] * gaal cannot but help noticing that "monadic lifting" is a kind of.. "ascention"

[10:58] * PJF tries not to choke on his dinner in laughter.

[10:58] *** verve_ joined
[11:00] <svnbot6> r8604 | gaal++ | * .yaml emits objects.

[11:00] <svnbot6> r8604 | gaal++ | TODO:

[11:00] <svnbot6> r8604 | gaal++ | - make it parse them, too

[11:00] <svnbot6> r8604 | gaal++ | - serialize rules, native types, etc.

[11:03] <gaal> ?eval class Foo; has $.x; Foo.new(:x<42>).yaml

[11:03] <evalbot_8604> "--- !pugs/object:Foo \nx: 42\n" 

[11:03] <gaal> whee!

[11:13] *** lao left
[11:16] *** qmole joined
[11:17] *** chris2 joined
[11:17] *** elmex joined
[11:30] *** Aankh|Clone joined
[11:31] *** Khisanth joined
[11:33] *** xinming joined
[11:35] <gaal> why's this a parse error?

[11:35] <gaal> data YamlNode = MkYamlNode { Id :: !SYMID , Tag :: !YamlTag , Anchor :: !YamlAnchor , Elem :: !YamlElem } deriving (Show, Ord, Eq)

[11:35] <gaal> ("parse error on input `Id'")

[11:36] <audreyt> gaal: label names aint data constructors.

[11:36] <audreyt> so must be lower case.

[11:40] <gaal> rrrr.

[11:40] <gaal> thanks :)

[11:41] <gaal> I can imagine a more helpful error message here...

[11:46] <audreyt> patches welcome

[11:49] <gaal> :)

[11:49] <gaal> working on some golf in Syck,hsc, next patch up is the YAML::Syck port

[11:56] *** G2 joined
[11:57] *** xern joined
[12:00] *** GeJ joined
[12:01] <wolverian> wait, wasn't parrot on the alioth shootout page?

[12:02] <wolverian> it's disappeared!

[12:04] <azuroth> sandbox

[12:04] <azuroth> http://shootout.alioth.debian.org/sandbox/

[12:05] <wolverian> ah. thanks

[12:10] *** blm joined
[12:12] <svnbot6> r8605 | scook0++ | * s/it's/its/ in a few places

[12:20] *** kane_ joined
[12:21] *** Limbic_Region joined
[12:23] *** xinming joined
[12:27] *** borkened joined
[12:37] *** bsb joined
[12:38] *** Khisanth joined
[12:43] *** iblechbot_ joined
[12:44] *** PJF left
[12:44] <ingy> audreyt: ping

[12:45] <audreyt> pong

[12:48] <ingy> audreyt: what is 'Cannot determine perl version info from lib/YAML.pm'

[12:50] <svnbot6> r8606 | gaal++ | .yaml:

[12:50] <svnbot6> r8606 | gaal++ |   - make YamlNode resemble SyckNode a little better in structure. This

[12:50] <svnbot6> r8606 | gaal++ |     will come useful when eventually we need to serialize "undef but" etc.

[12:50] <svnbot6> r8606 | gaal++ |   - golfage (I hope it's sane, or in the right form of insanity at least)

[12:50] <audreyt> ingy: put a "use 5.005" in it

[12:51] <ingy> use 5.006_001; # ?

[12:54] <ingy> soon to be `use 5.008_003;`

[12:54] <ingy> as punishment to the unfaithful

[12:55] <ingy> Brian the Protector has become Ingy the Punisher

[12:55] <gaal> ingy: make it "v6"

[12:56] <ingy> gaal: mmmm 6

[12:56] <Limbic_Region> rough for people in shops who don't have the luxury of upgrading - though I suppose they can continue to use older module versions too

[12:56] <ingy> use 7.007_007;

[12:56] <ingy> Limbic_Region: exactly

[12:57] <ingy> rough modules for rough perls

[13:02] <audreyt> ingy: "use 5.006001"

[13:03] *** kanru joined
[13:03] * gaal needs to prep the house for pizza party later. audreyt, I'll try to add tag support in between mozarella attacks :)

[13:04] * gaal waves &

[13:04] <gaal> s//to YAML::Syck/

[13:05] <audreyt> woot

[13:06] * Limbic_Region kicks gaal for mentioning pizza

[13:06] <Limbic_Region> it is bad enough that I am on a diet, but I am currently on a forced fast too for bloodwork later this morning

[13:06] <azuroth> where's my pizza?

[13:14] <ingy> !

[13:14] <ingy> A

[13:14] <ingy> Z

[13:14] <ingy> I

[13:14] <ingy> P

[13:15] <azuroth> hmm. thanks, but I'm not arabic

[13:17] <audreyt>     P

[13:17] <audreyt>    I I

[13:17] <audreyt>   ZZZZZ

[13:17] <audreyt>  Z Z Z Z

[13:17] <audreyt> AAAAAAAAA

[13:20] <Limbic_Region> ?eval say `which pizza`;

[13:20] <evalbot_8606> Error:  unexpected "`" expecting block construct, ":", identifier, "(", term, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:35] *** bsb_ joined
[13:36] *** khisanth_ joined
[13:37] *** xinming joined
[13:56] <Juerd_> http://www.cafepress.com/perl6.37792693

[13:57] <audreyt> ooooh

[13:58] <Juerd_> Damn, s/onliner/oneliner/

[14:01] *** alexe_home joined
[14:02] *** khisanth_ joined
[14:02] *** drbean joined
[14:30] *** khisanth_ joined
[14:38] <gaal> It's not a well-known fact, but anyone with a pugs committer bit is automatically invited to any pizza party thrown at foo's diner.

[14:42] <azuroth> that's awesome. do they get free travel?

[14:42] <gaal> Juerd_: shouldn't that url be perl6.28318530717959?

[14:42] <gaal> travel and batteries regrettably not included in the bit.

[14:43] <gaal> out of olive oil. cornerstore &

[14:52] <audreyt> foo's dinner?

[14:55] *** qmole joined
[14:56] <azuroth> my brother moved a long way away, and within a half hour of getting there he's doing the mixing for a jazz band? how does that work?

[14:59] <gaal> audreyt: diner. it's the name of a place.

[15:00] <azuroth> foo's diner is a real place?

[15:01] <gaal> sure

[15:01] <gaal> it's located cospatially with roo's room.

[15:01] <gaal> here's another service it provides apart from pizza: http://gaal.livejournal.com/2002/03/14/

[15:08] <azuroth> gee. libraries can cost over there?

[15:09] <gaal> some do.

[15:10] <gaal> the national library doesn't, and purportedly carries a copy of every book published here

[15:10] *** khisanth_ joined
[15:11] <gaal> the university library in my city is open to academics, but others need to pay a fee. I don't know if the municipal library costs anything.

[15:12] <gaal> the most impressive public library I'd ever seen (and the one that impressed upon me that a non-free library is in fact a grave thing) was the one in the pompidou center in paris

[15:15] <SamB> you can't copy the books?</stupid-joke>

[15:18] *** joepurl joined
[15:30] *** lisppaste3 joined
[15:37] *** justatheory joined
[15:37] *** bernhard joined
[15:40] *** khisanth_ joined
[15:50] *** alexe_home left
[16:07] *** khisanth_ joined
[16:14] *** nothingmuch joined
[16:28] *** elmex_ joined
[16:31] *** xinming joined
[16:43] <abbag> is now known as integral

[16:44] <tgr> is now known as cabbage

[16:48] <azuroth> ?eval [2,5,1][*]

[16:48] <evalbot_8606> Error:  unexpected "[" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:48] <azuroth> ?eval [2,5,1](*)

[16:48] <evalbot_8606> Error:  unexpected "(" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:48] <azuroth> ?eval [*][2,5,1]

[16:48] <evalbot_8606> [2, 5, 1] 

[16:48] <azuroth> ah... ha

[16:48] <azuroth> ?eval say ([*][2,5,1])

[16:48] <evalbot_8606> OUTPUT[2 5 1 ] bool::true 

[16:48] <azuroth> ?eval say (*[2,5,1])

[16:48] <evalbot_8606> OUTPUT[2 5 1 ] bool::true 

[16:48] <azuroth> ?eval say ((*)[2,5,1])

[16:48] <evalbot_8606> Error:  unexpected "(" expecting block construct, ":", term, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:49] <azuroth> ?eval say (+[2,5,1])

[16:49] <evalbot_8606> OUTPUT[3 ] bool::true 

[16:49] <azuroth> ?eval say ([+][2,5,1])

[16:49] <evalbot_8606> OUTPUT[2 5 1 ] bool::true 

[16:49] *** anatolyv joined
[16:50] <azuroth> ?eval say [+]([2,5,1])

[16:50] <evalbot_8606> OUTPUT[2 5 1 ] bool::true 

[16:50] <azuroth> ?eval my @a = [2,1,2]; my $v = [+]@a; say $v;

[16:50] <evalbot_8606> OUTPUT[2 1 2 ] bool::true 

[16:51] <azuroth> ?eval my @a = [2,1,2]; my $v = [*]@a; say $v;

[16:51] <evalbot_8606> OUTPUT[2 1 2 ] bool::true 

[16:51] <azuroth> ?eval my @a = [2,1,2]; my $v = [-]@a; say $v;

[16:51] <evalbot_8606> OUTPUT[2 1 2 ] bool::true 

[16:51] <azuroth> ?eval my @a = [2,1,2]; my $v = @a; say $v;

[16:51] <evalbot_8606> OUTPUT[2 1 2 ] bool::true 

[16:51] <azuroth> ?eval my @a = [2,1,2]; my $v = @a[*]; say $v;

[16:51] <evalbot_8606> Error:  unexpected "[" expecting word character, "::", term postfix, operator, ";" or end of input 

[16:51] <azuroth> I thought I saw audreyt use the hyper reduce earlier

[16:52] <azuroth> ?eval my @a = [2,1,2]; my $v = [*]>>@a; say $v;

[16:52] <evalbot_8606> Error:  unexpected ">" expecting "\171", "<<", ".", ":", "(", block construct, identifier, term, term postfix, operator, ";" or end of input 

[16:53] <azuroth> ?eval my @a = [2,1,2]; my $v = [*]<<@a; say $v;

[16:53] <evalbot_8606> OUTPUT[4 ] bool::true 

[16:53] <azuroth> ?eval my @a = [2,1,2]; my $v = [+]<<@a; say $v;

[16:53] <evalbot_8606> OUTPUT[5 ] bool::true 

[16:53] <azuroth> yayy

[17:05] *** xinming joined
[17:16] *** penk joined
[17:26] *** penk joined
[17:30] *** buu joined
[17:32] <rafl> ingy: How's YAML development going? Can we expect a release in the next time?

[17:36] *** xinming joined
[17:41] *** khisanth_ joined
[17:42] *** dduncan joined
[17:52] <Juerd_> gaal: No :)

[17:53] *** wilx joined
[18:06] *** pen1 joined
[18:08] *** elmex joined
[18:19] *** khisanth_ joined
[18:49] *** khisanth_ joined
[18:52] <hisant> is now known as khisanth_

[19:10] *** xinming joined
[19:26] *** khisanth_ joined
[19:27] <hisant> is now known as khisanth_

[19:28] <ntegra> is now known as ntgrl

[19:31] *** rantanplan_ joined
[19:47] <stevan> audreyt: ping 

[19:55] <stevan> oh well probably middle of the night there 

[19:55] * stevan wanders off again &

[20:10] <nothingmuch> http://www.pandora.com/

[20:20] *** mjl69 joined
[20:43] *** nnunley joined
[21:00] *** frederico joined
[21:26] <gaal> hola

[21:32] <nothingmuch> hola

[21:39] <gaal> no more pizza :)

[21:43] <nothingmuch> good thing or bad thing?

[21:44] <gaal> a force of nature

[21:45] *** vel joined
[22:03] *** mjl69_ joined
[22:03] *** cognominal joined
[22:28] *** Shachaf joined
[22:30] *** chris2 joined
[22:46] <nnunley> Hrm.  Don't grok PArrow/Haskell enough to do the hack that I want to do.  Just trying to figure out what's necessary to convert the IO Monad stuff into what's required (String) for use with Text.Parser.Rule.

[23:00] *** PJF joined
[23:02] *** borkened joined
[23:30] *** lisppaste3 joined
[23:52] *** stennie joined
[23:54] *** bsb_ left
