[00:08] <Limbic_Region> demerphq - my 2.2 billion got reduced to 15.2 million

[00:08] <Limbic_Region> so definately doable

[00:08] <Limbic_Region> NP complete to O(1) here I come

[01:01] *** SubStack joined
[01:08] *** mauke joined
[01:27] *** weinig is now known as weinig|zZz

[01:42] <svnbot6> r14048 | audreyt++ | * Repair "use perl5:Foo".

[02:12] <svnbot6> r14049 | putter++ | t/perl5/return.t - revert disabled code, as exception handling now works.

[02:15] <audreyt> @tell putter eval('"Foo"', :lang<perl5>) is just the same as "Foo"; see roundtrip.t for how to make a constructor in p5land

[02:15] <lambdabot> Consider it noted.

[02:15] <svnbot6> r14050 | audreyt++ | * roundtrip.t: Correct the use of .new.

[02:15] <svnbot6> r14051 | audreyt++ | * roundtrip.t: Use a proper closure so the test now passes.

[02:16] <Limbic_Region> audreyt ping

[02:17] <audreyt> pong

[02:17] <lambdabot> audreyt: You have 2 new messages. '/msg lambdabot @messages' to read them.

[02:17] <audreyt> @messages

[02:17] <lambdabot> Limbic_Region said 12h 22m 37s ago: thanks for the fix. I only managed to fix a few failing tests in ext/ but I think I found 2 pugs bugs. I want to talk to you about them first though

[02:17] <lambdabot> TimToady said 5h 34m 21s ago: something that got checked in last night took my smoke from 48 minutes to 68 minutes. Pretty sure I didn't have anything else running...

[02:17] <svnbot6> r14052 | audreyt++ | * $foo.hash is method call, not hash composer

[02:17] <Limbic_Region> so those couple of bugs

[02:18] <Limbic_Region> one is the following - my $foo = $.foo; when the object hasn't been defined to have a .foo

[02:18] <Limbic_Region> pugs doesn't throw an error and TimToady suggested it should

[02:19] <Limbic_Region> the other is apparently fixed?

[02:19] <Limbic_Region> multi sub *postfix:<++> (Automata::Cellular $self) {

[02:19] <Limbic_Region> that was originally method postfix:<++> { ... }

[02:19] <Limbic_Region> and it wasn't working

[02:20] <audreyt> nod, the second is nonbug

[02:20] <audreyt> "method postfix:<++> is export" may be made to work later

[02:21] <audreyt> but a method alone doesn't get you $obj++

[02:21] <audreyt> re the $.foo thing, is it causing some ext/ fails?

[02:21] <audreyt> I agree it should die

[02:21] <Limbic_Region> well, no - not anymore

[02:21] <Limbic_Region> I fixed it

[02:22] <Limbic_Region> not the bug

[02:22] <Limbic_Region> the mistake

[02:22] <Limbic_Region> $.foo should have been self.foo

[02:22] <Limbic_Region> I made the change

[02:22] <Limbic_Region> but it made me realize it should have died instead of silently being undef

[02:22] <audreyt> nodnod.

[02:22] <TimToady> I had left those in so that audreyt would fix them.  :)

[02:23] <audreyt> though the real bug here is that $.foo was evaled as $!foo

[02:23] <audreyt> while it _should_ eval as self.foo in the first place

[02:23] <Limbic_Region> well - i wanted to write a test for them instead of being in ext/

[02:23] <Limbic_Region> but wasn't sure what exactly it should be

[02:23] <TimToady> that works too

[02:23] <audreyt> though arguably if you want to write self.foo, at least $.foo() is better style than $.foo

[02:24] <audreyt> $.foo is too variable-y to suggest method call to my eyes...

[02:24] <TimToady> that ambiguity is intentional

[02:24] <Limbic_Region> see - that's why I didn't want to write the test

[02:25] <Limbic_Region> do you have a date in mind for the release audreyt?

[02:25] <Limbic_Region> I can poke some more at ext/ as long as we continue to have bad weather here

[02:25] * Limbic_Region is desperately avoiding shampooing the carpets

[02:26] <audreyt> Limbic_Region: gaal says Tuesday he'l be back for chgloging

[02:26] <audreyt> so we have another couple days

[02:26] <Limbic_Region> ok - will play some more than

[02:26] <Limbic_Region> tomorrow anyway - brain is goo ATM

[02:27] *** justatheory joined
[02:29] <audreyt> k, thanks and have fun :)

[02:29] * audreyt goes back fiddling with pugs-prof to find out the 50% slowodown

[02:32] <svnbot6> r14053 | audreyt++ | * t/perl5/: Repair array.t and hash.t with the same closure-new trick.

[02:34] <audreyt> 3 fails left in t/ space...

[02:34] <svnbot6> r14054 | audreyt++ | * io_in_for_loops.t: Remove the scary comment about this test

[02:34] <svnbot6> r14054 | audreyt++ |   not working, as it actually now does.

[02:35] <Limbic_Region> Iyou have 1 hr and 25 minutes left by my clock

[02:37] <audreyt> eh? :)

[02:38] <Limbic_Region> you said yesterday

[02:38] <Limbic_Region> I will definately have t/ finished by tomorrow

[02:38] <audreyt> I have 13hr and 25 minutes.

[02:38] <audreyt> it's but 10:38am here :)

[02:39] <Limbic_Region> what's that about lies, damned lies, and timezones

[02:39] <Limbic_Region> ;-)

[02:39] <audreyt> lol

[02:40] <audreyt> let's see how things break when $.foo is now made self.foo...

[02:40] *** putter joined
[02:41] <Limbic_Region> only method call is second resort though right?

[02:42] <Limbic_Region> IOW - attribute is checked and if not applicable check method?

[02:42] <audreyt> nono

[02:42] <audreyt> $.foo is always self.foo

[02:42] <audreyt> it's just "has $.foo" manufacture an accessor for you

[02:43] <Limbic_Region> oh, yeah

[02:43] <audreyt> which means even subclasses can't see parent classes's $!attr

[02:43] * putter imagines that paragraph is going to be repeated a lot in the next few years.

[02:44] <audreyt> which one?

[02:44] <audreyt> "$.foo is always self.foo" ?

[02:45] *** SubStack joined
[02:45] <putter> and has $.foo... you know, I think I was simply confused. :/

[02:46] <audreyt> I was confused for about a year too...

[02:46] <putter> I dropped another oddity in t/xx for you ;)

[02:47] <audreyt> saw that. :)

[02:48] <audreyt> bbiab...

[02:49] <Limbic_Region> putter - my code is now almost entirely Inline::C - basically Perl is just being used for the dynamic memory mgmt ;-)

[02:49] <audreyt> ooh -- in which case I sincerely recommend D :)

[02:49] <putter> oy

[02:49] <putter> :)

[02:49] <audreyt> it won 2nd place in this ICFP, it must be good for something :)

[02:49] <audreyt> (it's what C++ should've become, imho.)

[02:51] <Limbic_Region> doesn't the F in ICFP = Functional?  Is D a functional language?

[02:53] <Limbic_Region> besides - I am still trying to get proficient at Java and Haskell (and my C could certainly use some work)

[03:01] *** scsibug joined
[03:02] <putter> Limbic_Region: yes, and while multiparadigm, they don't list functional as one of them.

[03:06] <putter> ok, now clearly have a cold. :(  off to bed.  yay for progress towards the new release.

[03:06] <putter> good night all &

[03:08] <Limbic_Region> TTFN - sleep well and be well

[03:08] <Limbic_Region> er uh, too late

[03:14] <audreyt> Limbic_Region: D has closures, so it's functional

[03:15] <audreyt> good, changing $.x to mean $(self.x) does not seem to have adverse effects

[03:16] <audreyt> in fact it gains 6 more yellow boxes

[03:16] <audreyt> not surprisingly in t/oo/attributes/undeclared_attribute.t

[03:17] <Limbic_Region> ;-)

[03:19] <svnbot6> r14055 | audreyt++ | * $.x now always mean $(self.x()), and @.x now always mean

[03:19] <svnbot6> r14055 | audreyt++ |   @(self.x()), and so on.  Previously they were treated as

[03:19] <svnbot6> r14055 | audreyt++ |   $!x and @!x, which circumvented all the important ACLs.

[03:19] <svnbot6> r14056 | audreyt++ | * unTODO the tests in mutators.t and undeclared_attribute.t that now

[03:19] <svnbot6> r14056 | audreyt++ |   passes with the $.x === $(self.x()) change.

[03:23] <audreyt> lunch, bbiab...

[03:24] *** szabgab joined
[03:30] *** b00t joined
[03:34] *** SubStack_ joined
[03:37] *** SubStack_ is now known as SubStack

[04:36] *** Aankhen`` joined
[04:36] *** justatheory joined
[04:37] *** LimbicRegion joined
[04:40] *** LimbicRegion is now known as Limbic_Region

[04:57] *** nperez joined
[05:01] *** dduncan joined
[05:03] <dduncan> fyi, I just installed another 512MB of RAM in my 4-year-old machine, going from 768MB to 1.25GB, and I'm already seeing huge improvements in the machine's responsiveness while compiling Pugs, which tended to use swap space a lot before, and also the Pugs compilation is probably faster too

[05:04] <dduncan> suffice it to say that Haskell code is rather resource intensive to compile

[05:05] <dduncan> (historically, Pugs.Parser seemed to be the most intensive of all, though that may not be true anymore)

[05:15] *** nperez joined
[05:21] *** BooK joined
[05:35] *** dduncan_ joined
[06:12] *** evalbot_r14039 is now known as evalbot_r14056

[06:21] *** nperez joined
[06:56] *** dduncan_ left
[07:33] <svnbot6> r14057 | audreyt++ | * Get a cool 25% win by reducing special builtin macros

[07:33] <svnbot6> r14057 | audreyt++ |   with a table, instead of with linear matches.

[07:45] *** mjk joined
[07:45] <audreyt> TimToady: the spec says

[07:45] <audreyt> A list is of undefined

[07:45] <audreyt> length only if it contains an undefined generator, which, happily, is

[07:45] <audreyt> what is returned by the C<undef> function when used in list context.

[07:46] <audreyt> this doesn't sound right

[07:46] <audreyt> my @x = [undef, undef, 1, 5, undef, 6]

[07:46] <audreyt> here undef is in list context; should they not take one element each?

[07:46] <audreyt> @tell TimToady How does S04:927 work with [undef, undef, 1, 5, undef, 6] ?

[07:46] <lambdabot> Consider it noted.

[07:49] *** nperez joined
[08:52] <svnbot6> r14058 | audreyt++ | * Pugs.CodeGen: Remove the unused -CGHC.

[08:52] <svnbot6> r14059 | audreyt++ | * Remove Pugs.Compile.Haskell from Pugs.cabal.in.

[08:52] <svnbot6> r14060 | audreyt++ | * Speed up evalVal for a marginal (<2%) win.

[08:58] <svnbot6> r14061 | audreyt++ | * Pugs.Eval: Further marginal (<2%) tweak on reduceStmts.

[08:59] *** b00t joined
[09:00] *** elmex joined
[09:03] *** kane-xs joined
[09:12] <nothingmuch> 3/w 21

[09:13] *** larsen joined
[09:45] *** iblechbot joined
[10:01] <svnbot6> r14062 | audreyt++ | * Don't actually keep track of prevChar, instead keep track

[10:01] <svnbot6> r14062 | audreyt++ |   of the last time we've seen a whitespace character.

[10:01] <svnbot6> r14062 | audreyt++ |   This makes parsing quite a bit faster.

[10:22] *** chris2 joined
[10:25] <demerphq> Anybody ever seen the message "This file doesn't appear to be the 1.133 version -- patch anyway?" from GNU patch?

[10:25] <svnbot6> r14063 | audreyt++ | * t/perl5/return.t: import from perl5 land is lexical; fix the test.

[10:42] *** Southen joined
[10:52] <svnbot6> r14064 | audreyt++ | * Pugs.Types: Add a helper varTopic to mean (cast "$_" :: Var)

[10:52] <svnbot6> r14064 | audreyt++ |   to reduce typing and aid migration to a lexical $_.

[10:55] <svnbot6> r14065 | audreyt++ | * Implement smart matching against implicit invocation:

[10:55] <svnbot6> r14065 | audreyt++ |     $obj ~~ .meth       # ?($obj.meth)

[10:55] <svnbot6> r14065 | audreyt++ |     $obj ~~ .[0]        # ?($obj.[0])

[10:55] <svnbot6> r14065 | audreyt++ |     $obj ~~ .<x>        # ?($obj.<x>)

[10:55] <svnbot6> r14065 | audreyt++ |   It's implemented as a macro on the parser level.

[10:59] <svnbot6> r14066 | audreyt++ | * Pugs.Eval: Also implement "when .[0]" and "when .<s>".

[11:02] <audreyt> @tell putter the oddity is not an oddity; grep for "y " in the input to see why.

[11:02] <lambdabot> Consider it noted.

[11:03] <audreyt> @tell putter whilst other lines has "\ty\t" or "\tn\t", the bogus line had a "\ty \t". it's not always pugsbug... :)

[11:03] <lambdabot> Consider it noted.

[11:05] <svnbot6> r14067 | audreyt++ | * regex_tests: fix a stray space.

[11:05] *** TimToady joined
[11:11] <svnbot6> r14068 | audreyt++ | * smartmatch.t: unTODO now that it passes.

[11:12] *** buetow joined
[11:14] *** b_jonas joined
[11:17] *** weinig|zZz is now known as weinig

[11:34] *** elmex joined
[11:41] <svnbot6> r14069 | audreyt++ | * Pugs.Parser.Operator: sort the file test operators so Set.fromAscList won't get confused.

[11:56] *** lollan joined
[12:13] *** elmex joined
[12:15] *** kanru joined
[12:27] <svnbot6> r14070 | audreyt++ | * Pugs.Prim: Force generation of all primitive declarations

[12:27] <svnbot6> r14070 | audreyt++ |   upfront, instead of an as-needed basis.  This is a win

[12:27] <svnbot6> r14070 | audreyt++ |   because the large "syms" string in the Pugs.Prim can then

[12:27] <svnbot6> r14070 | audreyt++ |   be freed away, and the ID generation is consistent.

[12:36] <svnbot6> r14071 | audreyt++ | * Pugs.Eval: Correctly prevent generation of pad entries for siglets:

[12:36] <svnbot6> r14071 | audreyt++ |     sub f ($, $, @) { ... }

[12:36] <svnbot6> r14071 | audreyt++ |   The original code was avoiding generation for "", not "$", which was

[12:36] <svnbot6> r14071 | audreyt++ |   utterly unhelpful.

[12:36] <svnbot6> r14072 | audreyt++ | * Pugs.Types: Make the Var type strict in all its fields

[12:36] <svnbot6> r14072 | audreyt++ |   as lazy evaluation for IDs really doesn't quite make sense.

[12:40] <svnbot6> r14073 | audreyt++ | * Pugs.Internals: Use (IORef . Map) instead of StrMap for keys,

[12:40] <svnbot6> r14073 | audreyt++ |   because internally we're using ByteString.UTF8 now, and it won't do

[12:40] <svnbot6> r14073 | audreyt++ |   the Java-esque '\0' encoding for us (nor do we want it to).

[12:40] <svnbot6> r14073 | audreyt++ |   Benchmark doesn't show significant slowdowns, so going that way

[12:40] <svnbot6> r14073 | audreyt++ |   is probably easiest.

[12:40] <svnbot6> r14073 | audreyt++ |   (Writing a HashTable instance for ByteString.UTF8 can also work, I guess.)

[12:40] <svnbot6> r14073 | audreyt++ |   Maybe some day Judy.Hash can be used instead, but it still frequently

[12:40] <svnbot6> r14073 | audreyt++ |   triggers GC problems here (probably OSX-Intel specific), so play it

[12:40] <svnbot6> r14073 | audreyt++ |   safe for now.

[12:43] <svnbot6> r14074 | kudra++ | This week's summary

[12:52] <svnbot6> r14075 | kudra++ | Yuval found some errors in my linking

[13:02] *** weinig is now known as weinig|bbl

[13:04] <svnbot6> r14076 | audreyt++ | * Remove p6regex_oddity.t now it's no longer an oddity.

[13:25] <clkao> audreyt: you must do something

[13:25] *** discordja joined
[13:25] <clkao> i am also ignoring the parens in if when writing perl5 now

[13:25] <clkao> s/also/always

[13:25] <audreyt> lol

[13:28] <masak> clkao: you must have written your fair amount of perl6 then. I unually forget to omit the parens in perl6 if statements :)

[13:30] <clkao> and every time i added them i feel my face twitching

[13:30] <Juerd> I have the same problem as clkao

[13:31] <clkao> hate hate hate

[13:31] <clkao> can we have "use feature 'ifnoparen'" in perl5 ?

[13:31] <Juerd> I find myself writing <> for qw(), not writing parens with language constructs, and using . instead of ->, in Perl 5.

[13:31] *** chaoslawful joined
[13:32] <chaoslawful> ?eval say "hello!";

[13:32] *** evalbot_r14056 is now known as evalbot_r14076

[13:32] <evalbot_r14076> OUTPUT[hello! ] Bool::True

[13:32] <Juerd> ?eval say "Hi there"

[13:32] <evalbot_r14076> OUTPUT[Hi there ] Bool::True

[13:32] <chaoslawful> ?eval [*] 1..100;

[13:32] <evalbot_r14076> 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

[13:32] *** marmic joined
[13:32] <chaoslawful> ?eval [*] 1..1000;

[13:32] <evalbot_r14076> 4023872600770937735437024339230039857193748642107146325437999104299385123986290205920442084869694048004799886101971960586316668729948085589013238296699445909974245040870737599188236277271887325197795059509952761208749754624970436014182780946464962910563938874378864873371191810458257836478499770124766328898359557354325131853239584630755574091142624174743493475534286465766116677973966688202912073791438537195882498081268678383745597317461360853795345

[13:32] <Juerd> ITIM Inf. :)

[13:34] <chaoslawful> ?eval [+] map {1/$_} 1..100;

[13:34] <evalbot_r14076> Error:  Unexpected "1" expecting comment, ",", ":", operator, statement modifier, ";" or end of input

[13:34] <audreyt> you need a comma

[13:34] <audreyt> after the block

[13:35] <chaoslawful> ?eval [+] map {1/$_},1..100;

[13:35] <evalbot_r14076> 14466636279520351160221518043104131447711/2788815009188499086581352357412492142272

[13:35] <Juerd> ?eval 1..10.map:{$_+1}

[13:35] <evalbot_r14076> (1,)

[13:35] <Juerd> ?eval (1..10).map:{$_+1}

[13:35] <chaoslawful> oh, thanks a lot

[13:35] <evalbot_r14076> (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)

[13:35] <Juerd> ?eval 1..(10.map:{$_+1})

[13:35] <evalbot_r14076> (1,)

[13:35] <Juerd> ?eval 10.map:{$_+1}

[13:35] <evalbot_r14076> (11,)

[13:36] <audreyt> @tell Limbic_Region cribbage_scoring.pl++ # I just implemented >>.meth, >>.<key> and LABEL: parsing for that

[13:36] <lambdabot> Consider it noted.

[13:37] <svnbot6> r14077 | audreyt++ | * cribbage_scoring.pl: add svn properties, and also correct

[13:37] <svnbot6> r14077 | audreyt++ |   the colon/block usage:

[13:37] <svnbot6> r14077 | audreyt++ |     @foo.map: -> $x {...}   # correct

[13:37] <svnbot6> r14077 | audreyt++ |     @foo.map -> $x :{...}   # incorrect

[13:37] <svnbot6> r14076 | audreyt++ | * Remove p6regex_oddity.t now it's no longer an oddity.

[13:40] <svnbot6> r14078 | audreyt++ | * Pugs.Parser.Operator: Warning avoidance, and add a rule for ">>".

[13:40] <svnbot6> r14079 | audreyt++ | * Pugs.Eval: Syn "block" [...] can now double as a runtime-creation-only

[13:40] <svnbot6> r14079 | audreyt++ |   closure for things that does not want to close over the compile-time

[13:40] <svnbot6> r14079 | audreyt++ |   block, typically when there wasn't a real block in the first place.

[13:41] <svnbot6> r14079 | audreyt++ |   This is useful for postfix loops as well as implicit hypers.

[13:44] <svnbot6> r14080 | audreyt++ | * Pugs.Parser: Parse labels, though we don't yet do anything with them.

[13:44] <svnbot6> r14080 | audreyt++ |   Note that our rule for labels is considerably more lax than Perl 5:

[13:44] <svnbot6> r14080 | audreyt++ |     FOO: use Carp;  # this is allowed

[13:44] <svnbot6> r14080 | audreyt++ |   that is, anywhere a statement may begin, a label may occur.

[13:44] <svnbot6> r14080 | audreyt++ | * Implement hyper methods:

[13:44] <svnbot6> r14080 | audreyt++ |     @obj>>meth

[13:44] <svnbot6> r14080 | audreyt++ |     @obj.>>meth

[13:44] <svnbot6> r14080 | audreyt++ |     @obj>>.meth

[13:44] <svnbot6> r14080 | audreyt++ |     @obj.>>.meth

[13:44] *** fglock joined
[13:44] <svnbot6> r14080 | audreyt++ |     @obj\  .>>\  .meth

[13:45] <svnbot6> r14080 | audreyt++ | * Also implement hyper dereference:

[13:45] <svnbot6> r14080 | audreyt++ |     @hash.>>.<key>;

[13:45] <svnbot6> r14080 | audreyt++ |   However, the .>>.[0] form is not very useful, because hypers

[13:45] <Juerd> @obj>>meth, without .?

[13:45] <svnbot6> r14080 | audreyt++ |   (again) recurse into subarrays.

[13:45] <lambdabot> Unknown command, try @list

[13:45] <svnbot6> r14081 | audreyt++ | * UTF8.hs: Add a hash function so we can test if HashTable

[13:45] <svnbot6> r14081 | audreyt++ |   is faster than IORef.Map.

[13:45] <Juerd> Because >> is used postfix, and thus implies ., or for other reasons?

[13:46] <audreyt> actually I'm not sure

[13:46] <Juerd> I think hypers should operate on lists, not arrays

[13:46] <audreyt> @obj>><key> # should work too

[13:46] <lambdabot> Unknown command, try @list

[13:46] <Juerd> (This implies that I think hypers should not recurse, as lists of lists don't exist)

[13:47] <audreyt> but otoh, that's because postcircum is already post

[13:47] <audreyt> Juerd: S03:760 directly contradicts that

[13:47] <Juerd> I know, but I disagree with that.

[13:47] <audreyt> I disagree too.

[13:48] <audreyt> but TimToady seems to want >> to traverse deeply

[13:48] <audreyt> in which case it has to recurse

[13:48] <audreyt> see the para below

[13:48] <Juerd> I think that's a very useful operator, one that does recurse

[13:48] <Juerd> However, the current way means that there's no way to NOT recurse.

[13:48] <Juerd> Which I think will be much more useful, especially as a lot of my objects will does Array.

[13:49] <audreyt> agreeed on all accounts.

[13:49] <Juerd> For recursion, I suggest double hypers: »»

[13:49] <Juerd> (ASCII: >>>>)

[13:49] <audreyt> >>>>+<<<<

[13:49] <Juerd> That can then operate on arrays, and return an array again, as the array is just a one-element list.

[13:49] <audreyt> p6l it? :)

[13:49] <audreyt> (fwiw, I do agree.)

[13:49] <Juerd> Will do

[13:49] <audreyt> Juerd++

[13:50] <demerphq> does perl6 allow comments inside qw( ) ?

[13:50] <Juerd> demerphq: Only in qqw() iirc.

[13:50] <audreyt> it's qw// nowadays

[13:50] <Juerd> Oh, because qw() is qw.()?

[13:50] <audreyt> because qw() is always a call to &qw

[13:51] <demerphq> but there is a qw like construct that is comment tolerant?

[13:51] <demerphq> qqw()?

[13:51] <Juerd> demerphq: Yes. And if not, you can very easily make your own.

[13:51] <Juerd> demerphq: qqw// then, aka «», aka <<>>

[13:52] <audreyt> Juerd: S02:1460 doesn't say qqw allow comments

[13:52] <audreyt> though I agree it'd be nice

[13:52] <Juerd> Then roll your own. Shouldn't be too hard :)

[13:52] <Juerd> I thought that because qqw was called "shell like", it would allow comments.

[13:52] <Juerd> As shells do.

[13:52] <Juerd> (All of 'em)

[13:52] <demerphq> comments inside of qw() would be really useful.

[13:53] <Juerd> Σλπτ γυ σρκγσλαπ

[13:53] <Juerd> Δξ

[13:53] <Juerd> eaeuaoeu That's better.

[13:53] <Juerd> Only if optional

[13:54] <Juerd> Perl 5 *warns* about # characters. That's as annoying as not supporting them, especially if you're writing a list of HTML colours

[13:54] <demerphq> rolling your own is not so usefule, as qw is often used a hash list constructor.

[13:54] <Juerd> < green red #FF0083 >

[13:54] <svnbot6> r14082 | audreyt++ | * Oops, "LABEL:" is a label, but "LABEL :" should not be one.

[13:54] <Juerd> I think this feature would go well in qqw, which will probably be used as a hash list constructor more often anyway :)

[13:55] <Juerd> Because it lets you do << foo "bar baz" quux "xyzzy" >>

[13:55] <Juerd> Which is ('foo', 'bar baz', 'quux', 'xyzzy')

[13:56] <Juerd> So it already has a way to block the #, and use it literally

[13:56] <demerphq> however. ill let you guys work out the details, just wanted to remind folks about it. Damian once told me at a conference he liked the idea and I should follow up. So im following up (well leave aside its taken me two years :-)

[13:56] <Juerd> While in qw or <> it would imply adding a character to the \ escapes.

[13:56] <Juerd> demerphq: Could you f-up it even further, specifically to p6l? :)

[13:57] *** chaoslawful joined
[13:57] <demerphq> whats p6l?

[13:57] <Juerd> perl6-language

[13:57] <Juerd> like perl5-porters, but about Perl 6, and language :)

[13:57] <demerphq> mailing list or irc?

[13:57] <Juerd> Mailing list

[13:57] <demerphq> ah mailing list.

[13:57] <Juerd> [email@hidden.address]
[13:57] <Juerd> Operated just like the other perl.org lists. So you can post, and it'll just wait for moderation. No need to subscribe.

[13:59] *** etzel joined
[14:00] <svnbot6> r14083 | audreyt++ | * Make whitespace mandatory after the label.

[14:00] <svnbot6> r14084 | fglock++ | Pugs-Emitter-Perl6-Perl5 - added several values and containers,

[14:00] <svnbot6> r14084 | fglock++ |   with small differences on implementation or semantics

[14:00] <svnbot6> r14084 | fglock++ | - still breaks v6.pm binding and multi-dispatch

[14:00] <svnbot6> r14085 | audreyt++ | * Pugs.Lexer: Export ruleVerbatimIdentifier.

[14:01] <demerphq> posted

[14:01] <svnbot6> r14086 | fglock++ | v6.pm - minor fixes in runtime classes

[14:01] <audreyt> demerphq++

[14:07] <Juerd> demerphq++ indeed

[14:08] <svnbot6> r14087 | audreyt++ | * cribbage_scoring.pl: Use .>>. instead of >> for prefix hyper

[14:08] <svnbot6> r14088 | audreyt++ | * Pugs.Parser: Disallow @obj>>meth() for now; instead require

[14:08] <svnbot6> r14088 | audreyt++ |   either @obj.>>meth or @obj>>.meth.

[14:09] <demerphq> ++ to whomever implements it.#

[14:09] <svnbot6> r14089 | audreyt++ | * Pugs.Internals: Switch to Data.HashTable instead of (IORef . Map)

[14:09] <svnbot6> r14089 | audreyt++ |   for interning.

[14:10] <Juerd> Shells require whitespace before # for comments. foo#bar is always a 7 char argument.

[14:10] <Juerd> I think that's a useful feature to steal

[14:14] * demerphq nods

[14:14] <svnbot6> r14090 | audreyt++ | * examples/obfu/l33t.pl: Update q:to/END/ syntax.

[14:14] <svnbot6> r14091 | audreyt++ | * spel.pl: Remove an obsolete use of *@x.

[14:17] <svnbot6> r14092 | audreyt++ | * examples/graphics/make_swatch.pl: More q:to/END/ fix.

[14:17] <svnbot6> r14093 | audreyt++ | * perl5/basic.t: VAR()-to-perl5-scalarref is a :todo<bug>.

[14:18] *** Limbic_Region joined
[14:18] <Limbic_Region> salutations all

[14:18] <lambdabot> Limbic_Region: You have 1 new message. '/msg lambdabot @messages' to read it.

[14:20] <svnbot6> r14094 | audreyt++ | * last.t: labels are now parsed, so unTODO.

[14:21] <Limbic_Region> audreyt if you are about, I am only very minimally responsible for cribbage_scoring.pl but thanks for the update

[14:23] <Limbic_Region> I will let rob kinyon (dragonchild) know as the code is his - he wrote it because of me though

[14:23] <svnbot6> r14095 | audreyt++ | * next.t: labels are now parsed, so unTODO.

[14:25] <svnbot6> r14096 | audreyt++ | * all_parse.t: force_todo the 7 remaining tests, which doesn't

[14:25] <svnbot6> r14096 | audreyt++ |   seem to result from parsebugs (some of them are perl5 programs,

[14:25] <svnbot6> r14096 | audreyt++ |   some of the has specific directory requirements, etc.)

[14:25] <svnbot6> r14096 | audreyt++ |     cookbook/01strings/01-02default-variables.pl

[14:25] <svnbot6> r14096 | audreyt++ |     cookbook/test.pl

[14:25] <svnbot6> r14096 | audreyt++ |     hop6/Parser.pm

[14:25] <svnbot6> r14096 | audreyt++ |     hop6/expr-parser.pl

[14:25] <svnbot6> r14096 | audreyt++ |     hop6/it2stream.pl

[14:25] <svnbot6> r14096 | audreyt++ |     hq9+.pl

[14:25] <svnbot6> r14096 | audreyt++ |     network/screen-nodestatus.pl

[14:25] <audreyt> and with that... the triage for t/ is complete.

[14:26] <Limbic_Region> audreyt - there was some code in all_parse.t to skip p5 code

[14:26] <audreyt> (ignoring p5embed/PCR ones, which I delete locally)

[14:26] <Limbic_Region> unfortunately, there isn't a consistent naming convention

[14:26] <audreyt> Limbic_Region: well, cookbook/test.pl wasn't named -p5 etc

[14:26] <audreyt> maybe you can take a look, but I need to sleep now

[14:26] <Limbic_Region> well, I didn't get but a few hours sleep last night myself

[14:26] <Limbic_Region> so sleep well

[14:26] <audreyt> oh ok

[14:27] <audreyt> thanks :) 12 more modules in ext/ to triage, and we can enter preflight

[14:27] <Limbic_Region> I finished my NP complete -> O(1) problem and went to bed only to find my daughter just waking up

[14:27] <audreyt> g'nite folks

[14:28] <audreyt> *wave* &

[14:29] <Juerd> Sleep well

[14:29] <demerphq> what juerd said.

[14:29] <demerphq> :-)

[14:29] <theorbtwo> g'night audrey.

[14:33] <Limbic_Region> demerphq - need to really thank you for the Inline::C assistance yesterday.  I was able to complete all 3 stages in less than 9 hours

[14:39] *** discordja joined
[14:43] *** discordja left
[14:49] <nothingmuch> Juerd++

[14:50] <Limbic_Region> nothingmuch - what was that the other day about offering to sell photos of gaal in the shower?

[14:50] * nothingmuch ? oh nothing

[14:50] <nothingmuch> i just needed some quick $$$

[14:50] <nothingmuch> some nigerian fellow said i need to only send a little bit

[14:50] <nothingmuch> and then i can have my $700,000,000

[14:50] <Limbic_Region> ahhh

[14:52] <Limbic_Region> fwiw - I have never seen a pic of you and your SO together (still larsen I assume)

[14:52] <nothingmuch> hahahaaa

[14:52] <nothingmuch> you missed the smiley

[14:52] <nothingmuch> valdez was hosting larsen and me for ICJ in 2004

[14:52] <nothingmuch> he only had one sofa bed

[14:52] <nothingmuch> so we had to share

[14:52] <Limbic_Region> I thought so and this was my sly way of getting at the truth

[14:53] <Limbic_Region> without coming out and sounding like a dolt

[14:53] <larsen> SO ?

[14:53] <nothingmuch> larsen: significant other

[14:53] <larsen> ROTFL

[14:56] * Limbic_Region wonders if larsen has read nothingmuch's homenode at PerlMonks

[14:56] <nothingmuch> Limbic_Region: he made the joke initially

[14:57] <Limbic_Region> well I was fairly certain it was joke but one never knows

[14:57] <larsen> :)

[14:57] <nothingmuch> well, you can be fairly sure i won't publish my list on my homenode

[14:58] <nothingmuch> i doubt even die hard monks would

[14:58] <Limbic_Region> heh

[15:00] <Limbic_Region> well I guess I could say I have slept and showered with 59 guys at once and most of the time we were hot and sweaty

[15:00] <Limbic_Region> of course, that was basic training in the army

[15:03] <nothingmuch> the important thing is that you had fun =)

[15:03] <svnbot6> r14097 | masak++ | [docs/summaries/2006/10-07.yaml] fixed typo

[15:04] *** loumz joined
[15:28] *** prism joined
[15:30] <svnbot6> r14098 | audreyt++ | * docs/: Perl6::Spec::Documentation, alpha draft, from TheDamian.

[15:57] *** Ijon joined
[15:58] *** Ijon left
[16:13] *** xinming joined
[16:13] *** pasteling joined
[16:14] *** Limbic_Region joined
[16:15] *** rindolf joined
[16:18] *** Psyche^ joined
[16:19] *** Psyche^ is now known as Patterner

[16:37] <rindolf> Hi all.

[16:40] *** larsen joined
[16:44] <Limbic_Region> salutations rindolf

[16:51] <rindolf> Hi Limbic_Region

[16:51] <rindolf> ingy: ping.

[16:52] <rindolf> pingy

[16:52] <rindolf> Limbic_Region: what's up?

[16:52] * rindolf is raising his modules' Kwalitee.

[16:57] *** aufrank joined
[16:57] <aufrank> hey folks

[17:01] *** Corion joined
[17:25] *** if joined
[17:25] *** if left
[17:42] *** putter joined
[17:43] <putter> is openfoundry known to be down?  it pings, but svn timesout.

[17:43] <lambdabot> putter: You have 2 new messages. '/msg lambdabot @messages' to read them.

[17:44] <putter> @tell audreyt thanks

[17:44] <lambdabot> Consider it noted.

[17:45] *** jferrero joined
[17:45] <putter> openfoundry web is unresponsive.

[17:48] <putter> @tell audreyt openfoundry currently down

[17:48] <lambdabot> Consider it noted.

[17:48] <audreyt> putter: yes, maybe it'll be fixed soon; if not, national holiday means it'll remain so for the next 48 hours. meanwhile read-only mirror is still at http://svn.perl.org/perl6/pugs/trunk/

[17:48] <lambdabot> audreyt: You have 2 new messages. '/msg lambdabot @messages' to read them.

[17:48] <lambdabot> Title: Revision 12872: /pugs/trunk

[17:48] <audreyt> @messages

[17:48] <lambdabot> putter said 4m 1s ago: thanks

[17:48] <lambdabot> putter said 7s ago: openfoundry currently down

[17:48] <putter> my thanks

[17:48] <audreyt> np

[17:48] <audreyt> going to migrate away from openfoundry after the release I think

[17:49] <audreyt> ideally to perl.org with commitbit  (http://bestpractical.typepad.com/worst_impractical/2006/10/hey_buddy_can_y.html)

[17:49] <lambdabot> http://tinyurl.com/ef2kc

[17:49] <audreyt> there's a fallback mirror, still sync'ing, at http://pugs.googlecode.com/svn/trunk/

[17:50] <lambdabot> Title: Revision 11274: /trunk

[17:50] <audreyt> but going back to sleep first. :)

[17:50] <audreyt> &

[17:50] <putter> good night audreyt.  thanks again

[17:50] <audreyt> np :)

[17:51] <audreyt> help updating /topic would be appreciated

[17:51] <audreyt> &

[17:52] <putter> will do

[17:52] <putter> help topic

[17:53] <putter> doh!

[17:53] *** Aankhen`` joined
[17:56] *** typewriter joined
[17:57] <typewriter> where is Larry

[17:57] *** larsen joined
[17:59] *** putter changes topic to: Openfoundry is down. Mirrors: read-only: http://svn.perl.org/perl6/pugs/trunk/ read-write (still sync'ing): http://pugs.googlecode.com/svn/trunk/ | Check your feather email | spec.pugscode.org | paste: http://sial.org/pbot/perl6 | pugs.blogs.com |  http://www.treehugger.com/files/th_images/paradigm.jpg

[18:00] *** putter joined
[18:02] *** markstos joined
[18:10] <rindolf> TimToady: here?

[18:10] <rindolf> TimToady: typewriter is looking for you.

[18:48] <avar> where's conway's s26a in svn?

[18:56] <putter> avar: good question.  it used to be here, but I don't see it now...

[18:58] <putter> docs/Perl6/Spec/Functions.pod

[18:59] *** larsen joined
[18:59] <rindolf> Hi avar

[19:01] <putter> looks like googlecode's sync is wedged.  openfoundry still down.

[19:04] <avar> putter: I mean the POD draft

[19:05] <putter> that isn'

[19:05] <putter> t it?

[19:06] <avar> Hrm, I just read "Functions.pod" and thought it was s29

[19:06] <avar> pugs svn?

[19:07] <putter> sorry, docs/Perl6/Spec/Documentation.pod

[19:07] <putter> typo on my search :/

[19:08] <putter> that look right?

[19:08] * avar begins pugs checkout:)

[19:09] <avar> hmm, google hosting the svn now?:)

[19:09] <putter> avar: suggest read-only copy on http://svn.perl.org/perl6/pugs/trunk/

[19:09] <lambdabot> Title: Revision 12872: /pugs/trunk

[19:10] <putter> google isn't sync'ed yet, and openfoundry, which is still the primary, is down.

[19:12] <putter> svn.perl.org revision numbers are different than openfoundry's, though the files look current-ish.

[19:13] *** jferrero joined
[19:13] <putter> pugs.googlecode's sync is definitely stalled.

[19:13] *** nothingmuch joined
[19:15] * putter wonders if that makes nothingmuch reentrant

[19:17] * nothingmuch was too lazy to walk up to the modem and have it restart

[19:17] <nothingmuch> i just waited for it to come back

[19:17] <nothingmuch> didn't take long

[19:17] <nothingmuch> (surprisingly)

[19:18] *** mauke joined
[19:21] *** weinig|bbl is now known as weinig

[19:22] <rindolf> Hi nothingmuch

[19:22] <nothingmuch> hi rindolf

[19:22] <rindolf> nothingmuch: what's up?

[19:22] *** xern joined
[19:22] <nothingmuch> not much

[19:22] <rindolf> nothingmuch: I see.

[19:37] <rindolf> nothingmuch: what was your last Pugs commit ?

[19:37] <nothingmuch> don't know

[19:37] <nothingmuch> it's been a while

[19:37] <nothingmuch> i've been working on semi related code

[19:39] <nothingmuch> the symbol table is tiable now, right?

[19:44] <nothingmuch> audreyt: you did that, right?

[19:46] *** markstos joined
[20:04] <putter> nothingmuch: add a test? ;)

[20:04] <nothingmuch> not in p6

[20:04] <nothingmuch> in p5 =)

[20:04] <putter> ahhh

[20:04] <nothingmuch> also, it's not that i want to do it

[20:04] <nothingmuch> i just want to talk about it on a mailing list ;-)

[20:04] <putter> lol

[20:05] <nothingmuch> some people are doers, like audrey

[20:05] <nothingmuch> and some people are meta-doers, who only talk about possibilities ;-)

[20:06] * putter looks over sholder... who?

[20:08] <putter> googlecode still wedged.  openfoundry still down.  latter suggests openfoundry case B - down for 48 hrs.

[20:09] <nothingmuch> oh how i love thee, distributed version control

[20:09] <nothingmuch> darcs++

[20:11] <putter> 1h40m make test.  eep.

[20:11] <putter> :)

[20:13] <putter> failures in t/blocks/multidimensional_arglists.t t/builtins/io/dir.t t/examples/all_parse.t t/perl5/array.t

[20:14] <putter> t/regex/p6regex/p6regex.t would have failed too, if I hadn't fixed it.  which I'll check in... sometime.

[20:17] <putter> multidimensional_arglists.t parsefails on a multidimensional arg.  io/dir.t works in isolation, not sure why it failed test 18 in make test.  all_parse.t and array.t both segfault.

[20:21] *** mezelf joined
[20:23] <pasteling> "putter" at 66.30.119.55 pasted "[PATCH] t/regex/p6regex/p6regex.t" (44 lines, 2.1K) at http://sial.org/pbot/20280

[20:40] <ingy> seen stevan

[20:40] <jabbot> ingy: stevan was seen 1 days 22 hours 48 minutes 52 seconds ago

[20:45] <rindolf> Hi ingy

[20:45] * rindolf nudges ingy about IO::All

[20:52] <ingy> rindolf: sorry I bought a new motorcycle yesterday

[20:53] <ingy> I'm a little distracted

[20:53] <rindolf> ingy: I see.

[20:53] <rindolf> ingy: what kind of motorcycle?

[20:53] <ingy> did you make IO::All releasable?

[20:53] <rindolf> ingy: it compiles.

[20:53] <rindolf> ingy: what should I do otherwise?

[20:54] <ingy> well as I said yesterday, all the files that need to change for an 0.36 release are not so

[20:54] <ingy> so I can't upload asis, as you implied :p

[20:54] <rindolf> ingy: I See.

[20:54] <rindolf> ingy: what are these files?

[20:55] <ingy> grep for 0.35 :P

[20:56] <rindolf> ingy: should it be 0.36 or 0.35001?

[20:56] <rindolf> is Changes somehow generated from the svn log?

[20:56] <ingy> no

[20:57] <rindolf> ingy: I see.

[21:01] <rindolf> ingy: ok, the update of the versions to 0.36 is committed.

[21:01] <putter> &

[21:02] <ingy> rindolf: thanks

[21:02] *** wilx joined
[21:02] <ingy> rindolf: META.yml?

[21:03] *** aufrank joined
[21:05] <rindolf> ingy: shouldn't it be generated by Makefile.PL?

[21:06] <ingy> no

[21:06] <rindolf> ingy: I see.

[21:07] <rindolf> Committed. r2900

[21:08] <aufrank> I was just looking at the generalized adverbial pair form in Syntax.pod

[21:08] <aufrank> I notice that there isn't an adverb form for a pair with a Capture as its value

[21:08] <aufrank> a => \($x, $y)

[21:09] <aufrank> does one of the existing adverbial forms cover this case?  If not, can we add one?

[21:09] <aufrank> :a\($x, $y) comes to mind

[21:09] <aufrank> but is kind of ugly

[21:12] <gaal> I'd guess :a(\($x, $y)) expresses it.

[21:12] <aufrank> yeah, but yuck ;)

[21:14] <rindolf> Hi gaal

[21:26] *** markstos joined
[21:35] *** fglock joined
[21:42] *** Limbic_Region joined
[21:52] *** cmarcelo joined
[22:06] *** shobadobs joined
[22:09] <cmarcelo> @tell audreyt hi! still not MO for Hs yet but did a little C3 MRO implementation because I didn't found any on the web. comments/ideas/suggestions welcome :)   http://feather.perl6.nl/~cmarcelo/C3.hs

[22:09] <lambdabot> Consider it noted.

[22:09] <cmarcelo> comments from other haskellers are welcome as well..

[22:09] *** autark joined
[22:09] <nothingmuch> cmarcelo: ?!

[22:10] <nothingmuch> you guys have been porting while i was out getting blisters?! *cries*

[22:10] <nothingmuch> i was supposed to learn something

[22:10] <nothingmuch> waaaaah

[22:10] <cmarcelo> nothingmuch: audreyt asked me to investigate a little about translating MO to Hs... nothing concrete done yet..

[22:10] *** Khisanth joined
[22:11] *** weinig is now known as weinig|bb

[22:11] <nothingmuch> =)

[22:11] <nothingmuch> which TZ are you in?

[22:12] * cmarcelo is GMT-3 (Brazil)

[22:12] <nothingmuch> hmmm

[22:12] <nothingmuch> in that case, i think when I'm back tomorrow you be around late morningish

[22:12] <nothingmuch> is that a good time to discuss stuff?

[22:12] <cmarcelo> nothingmuch: your intention was to port it to Hs too?

[22:13] <nothingmuch> yes

[22:13] <nothingmuch> i wrote it to be portable to haskell

[22:13] <nothingmuch> at least partly

[22:13] <aufrank> MO?

[22:13] <cmarcelo> i'll be happy to help you then.

[22:13] <nothingmuch> aufrank: http://nothingmuch.woobling.org/MO/

[22:13] <lambdabot> Title: Index of /MO

[22:14] <fglock> cmarcelo: daylight saving time starts today :)

[22:14] <aufrank> grazzi

[22:15] <cmarcelo> nothingmuch: I understood things from the "basic" tests/interface [basic.t si.t mi.t] but not much from "advanced" things like attribute grammars etc..

[22:15] <nothingmuch> AGs are not as important

[22:15] <nothingmuch> Class.pm can be refactored a bit more

[22:15] <nothingmuch> methods need to be split into a compilable unit

[22:16] <nothingmuch> but aside from that... err

[22:16] <nothingmuch> those tests should cover it, i think

[22:16] <cmarcelo> fglock: so we lost 1 hour? :(

[22:18] <nothingmuch> cmarcelo: i'll try to write some unit tests for the sub complonents

[22:18] <nothingmuch> now that I know what they are

[22:18] <nothingmuch> *components

[22:18] <cmarcelo> nothingmuch: (please, look in MO/_darcs for files permissions in your repo. i'm getting 403 error when 'darcs get'ing)

[22:18] <nothingmuch> very odd

[22:18] <cmarcelo> the file: http://nothingmuch.woobling.org/MO/_darcs/patches/20060924161130-95c31-2884328b223d645208be3fb7085867611cf62921.gz

[22:18] <lambdabot> http://tinyurl.com/l93bj

[22:19] <nothingmuch> fixed

[22:21] <cmarcelo> thank you, it worked :) "discuss stuff" = ?

[22:22] <nothingmuch> like, what has to be done

[22:22] <nothingmuch> or maybe just write some .hs ;-)

[22:23] <nothingmuch> oi! feckin mutt

[22:23] <nothingmuch> it twiddles with the umask

[22:23] <nothingmuch> so darcs apply doesn't work as it should

[22:24] <cmarcelo> well, I'm not sure I'll be here at that time, but i'll try to show up. anyway, I keep track of irc weblogs so you can let a msg in the chan too..

[22:25] <cmarcelo> late morningsh means around 10am?

[22:27] <nothingmuch> at earliest

[22:27] <nothingmuch> might be later

[22:27] <TreyHarris> are spamhauses starting to actually mine people's mail based on maillist subscriptions?  lately i've been getting a lot of spam where the contents include random snippets from Perl 6 maillists.... i can't believe that's a random coincidence

[22:27] <nothingmuch> but from then on till your evening i should be available

[22:28] <nothingmuch> if you can use baysean analysis to detect spam

[22:28] <nothingmuch> why not reuse the same corpii to write it?

[22:28] <nothingmuch> &

[22:28] <TreyHarris> (and of course, those spams score very well for me as legitimate content)

[22:34] <aufrank> nothingmuch: what's the relationship between MO and moose?

[22:38] <wolverian> TreyHarris, I don't know, but they're listing people on perl6-internals (more than one, coincidentally), which is annoying as hell

[22:38] <TreyHarris> wolverian: yep

[22:39] <wolverian> oh well, whitelisting..

[22:40] *** TreyHarris changes topic to: Openfoundry is down, maybe until late 10 Oct GMT.  RO mirror http://svn.perl.org/perl6/pugs/trunk/ RW (out of date) http://pugs.googlecode.com/svn/trunk/ | Check your feather email | spec.pugscode.org | paste: http://sial.org/pbot/perl6 | pugs.blogs.com

[22:41] *** autark joined
[22:41] <TreyHarris> i've been greylisting, but i think that arrow is already gone from the anti-spam quiver...

[22:42] <wolverian> well, I'm forwarding them all to our postmaster, maybe he'll get annoyed enough to stop using blacklists :)

[22:57] *** markstos joined
[22:58] <clkao> is openfoundry fucked again

[22:58] <clkao> and great, it's holiday in taiwan

[23:33] <Limbic_Region> clkao - see the topic

[23:36] *** cmarcelo left
[23:38] *** demerphq joined
[23:46] <stevan> aufrank: MO is an extremely experimental branch of Moose which attempts to solve some meta-issues which are more specific to Perl 6 then Perl 5

[23:55] *** Odin- joined
