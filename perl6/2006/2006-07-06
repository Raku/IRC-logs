[00:09] <nothingmuch> bye guys

[00:09] <nothingmuch> we're leaving

[00:10] *** drbean_ joined
[00:17] <clkao> due to software problem we are stucked

[00:17] <audreyt> mm

[00:17] <obra> clkao: what software?

[00:19] <gaal> bye softwarestuck mountainmoose!

[00:22] *** Bit-Man joined
[00:24] <clkao> printer driver

[00:26] <obra> oh.

[00:26] <obra> come by the office. I'll print whatever you want.

[00:26] <obra> you can grab and go

[00:29] <clkao> it's 50% printed

[00:29] <svnbot6> r11226 | audreyt++ | * try to fix building with GHC 6.4.1

[00:29] <obra>  ok

[00:29] <obra> clkao: how can we get svn mailer.py to ignore property-only commits?

[00:31] <kolibrie> audreyt: what is the magic setting to have minibufexpl.vim show the filenames at the bottom?

[00:34] <clkao> obra: not sure, might worth ask on #svn

[00:34] * clkao &

[00:35] <audreyt> kolibrie: I no longer remember

[00:36] <obra> clkao: no worries. enjoy hiking

[00:38] <pasteling> "TimToady" at 64.0.7.8 pasted "build failure" (112 lines, 8.2K) at http://sial.org/pbot/18251

[00:38] <TimToady> I think this is probably the same problem other people have been having with ghc...

[00:42] <TimToady> this is with a realclean r11226

[00:42] <TimToady> I particularly wonder about the lines:

[00:42] <TimToady> Unregistering pugs-HsSyck-0.1...

[00:42] <TimToady> ghc-pkg: /usr/local/lib/ghc-6.4.1/package.conf: you don't have permission to modify this file

[00:43] <gaal> TimToady: I cheated and chmod a+w /usr/local/lib/ghc-6.4.1/package.conf but I don't think that's Right

[00:43] <kolibrie> audreyt: very sad, can I have your whole .vimrc then?

[00:43] <gaal> she's in a braineat^H^H^Hstorming session

[00:44] <kolibrie> gaal: you can extricate it from her when she's done

[00:45] <gaal> she'll backlog I'm sure :)

[00:45] <kolibrie> no doubt

[00:49] <TimToady> well, still the same result as my pbot log...no Data.Yaml.Syck

[00:51] <audreyt> fixing that

[01:01] *** xdg joined
[01:20] <TimToady> btw, use v6-() also fails the -w test...

[01:22] <audreyt> yeah.

[01:22] <audreyt> v6-perl then?

[01:23] *** mdiep joined
[01:24] <obra> Don't pure perl implementations usually use pp?

[01:25] * obra interjects useless commentary

[01:25] <marksto1> obra: I think so. DBI uses that convention.

[01:25] *** marksto1 is now known as markstos_

[01:25] <ajs> v6-perl or v6-perl5 or v6-pp. I think they all look purty

[01:26] <markstos_> v6-pp++ "v6-perl" looks redundent and v6-perl6 is a bit confusing, although accurate.

[01:26] <obra> audreyt: have you already explored making v6 a "Best" like shim?

[01:26] <TimToady> according to p6 that field is the "authority".

[01:27] <obra> use v6 pugs

[01:29] <audreyt> obra: yes.

[01:29] <obra>    ok

[01:32] <kolibrie> gaal: audreyt: 'let g:miniBufExplSplitBelow=1' puts the MiniBufExplorer at the bottom, but there are still extra (useless) lines audreyt's setup did not have

[01:32] <svnbot6> r11227 | audreyt++ | * remove --global for real

[01:33] <kolibrie> sleep &

[01:33] <svnbot6> r11228 | audreyt++ | * ...ditto

[01:35] *** cmarcelo joined
[01:35] <audreyt> TimToady: the build should now work...

[01:35] <audreyt> (I think)

[01:36] <audreyt> still waiting for "perl Makefile.PL" to finish at szbalint's machinre

[01:41] <cmarcelo> dear perl hackers: i'm having trouble with line 60 of util/build_pugs.pl, it's a call to system(), which call ../../Setup passing a few arguments, but seems one of the arguments is being executed somehow ("/bin/sh: --with-hc-pkg: command not found") during the build. it's like system is considering only some arguments and taking the rest as another command. any idea? [ghc 6.5 and perl v5.8.8]

[01:42] <audreyt> cmarcelo: r11288?

[01:43] <audreyt> have you rerun Makefile.PL?

[01:46] <cmarcelo> audreyt: 11226.. i'm up'ing to 228.. [yes, "re-ran" =P]

[01:49] <cmarcelo> same error.. and after make clean, still the same and a new one, after dep building: $ Setup: executing external program failed: "util/ghc-pkg-wrapper" --global list >tmp11183

[01:50] <audreyt> ok

[01:50] <svnbot6> r11229 | audreyt++ | * even more attempt at taming Cabal from rafl++'s change.

[01:50] <audreyt> try again?

[01:51] <cmarcelo> just a sec

[01:51] <audreyt> 11230

[01:53] <svnbot6> r11230 | audreyt++ | * err, debug

[01:53] *** xdg joined
[01:54] <TreyHarris> hmm.  given the choice between "my %x = map { {$_ => 1} }, 'a'..'c'" and "my %x = map { $_, 1 }, 'a'..'c'", I don't think I like either of 'em (though I'm willing to believe that's just my perl5 brain irrationally fighting change).  is there a better idiom?

[01:54] <audreyt> my $x = any('a'..'c')

[01:56] <TreyHarris> audreyt: :-)  of course, but I was actually trying to construct a hash in order to play with hash-in-regex semantics

[01:57] <TreyHarris> so actually that would have been { $_, "" }

[01:59] <audreyt> well, in p5 we have the idiom

[01:59] <audreyt> my %x; %x{'a'..'c'} = ();

[01:59] <audreyt> and use .exists

[01:59] <TreyHarris> ahh.  yes.

[02:00] <TreyHarris> so undef is treated identically to "" inside a regex?

[02:00] <TreyHarris> no warning either?

[02:01] <audreyt> not currently

[02:01] <audreyt> that may change

[02:02] <TreyHarris> hm

[02:02] <TreyHarris> ?eval my %x{'a'..'c'} = ();

[02:02] <evalbot_11168> [undef, undef, undef]

[02:02] <TreyHarris> hah! recent change.  my pugs says [1, 1, 1] :-)

[02:02] <audreyt> :)

[02:02] <audreyt> in any case

[02:02] <audreyt> that is a good demo of how p6's generalization helps surface syntax

[02:03] <audreyt> you can say "my @x[1,2,3] = ()"

[02:03] <audreyt> while in p5 you have to say "my @x; @x[1,2,3]= ()"

[02:04] <TreyHarris> interesting:

[02:04] <TreyHarris> ?eval my %z{'a'..'c'} = (17,17,17); %z<a b c> = ();

[02:04] <evalbot_11168> [17, 17, 17]

[02:04] <TreyHarris> is that right?

[02:08] <audreyt> no, it's wrong :)

[02:08] <audreyt> write a test?

[02:09] <TreyHarris> :(  unfortunately, i have no machine I own fast enough to rebuild pugs in anything resembling useful time.  it takes about 29 hours on my poor 256MB G4.

[02:10] <audreyt> er no

[02:10] <audreyt> just write a test :)

[02:10] <gaal> what's the difference between Bit and Bool? Both are mentioned in S06

[02:10] <audreyt> Bool has helpers True and False

[02:10] <audreyt> ...and that's it

[02:10] <audreyt> otherwise they are the same thing

[02:11] <audreyt> I wonder if "bit" is just boxed to "Bool"

[02:11] <TreyHarris> audreyt: ok, but if the test works on the latest binary build and breaks now, i won't be held responsible ;-)

[02:11] <audreyt> sure.

[02:11] <gaal> audreyt: so storagewise they're both haskell bools in Pugs yes?

[02:11] <audreyt> also, incremental builds take less time

[02:11] <audreyt> gaal: yes.

[02:11] <audreyt> though you can invent

[02:11] <audreyt> data Bit = On | Off

[02:11] <audreyt> if you feel masochistic

[02:12] <gaal> my Bit $hurts

[02:12] <audreyt> cute

[02:13] <gaal> Thy fingers make early flowers / of all things. / thy hair mostly the hours love:

[02:13] <svnbot6> r11231 | fglock++ | v6 - regex parser: 'multi', signature, attributes

[02:13] <gaal> a smoothness which / sings,saying / (though love be a day) / do not fear,we will go amaying.

[02:14] *** scook0 joined
[02:20] *** cmarcelo joined
[02:59] *** ilogger2 joined
[03:01] <vsoni> audreyt: how are u

[03:04] <TimToady> hmm....

[03:04] <TimToady> dist/build/libHSPugs-6.2.12.a(Parrot.o): In function `sMgK_slow':

[03:04] <TimToady> ghc26105.hc:(.text+0x3cd7): undefined reference to `Parrot_find_global'

[03:05] <audreyt> parrot no longer havea find_global?

[03:05] <audreyt> oy.

[03:06] <TimToady> looks like it only has hungarian find_globals from the nm listing...

[03:06] <audreyt> find_global_p ?

[03:06] <TimToady> dunno what the bare one changed to.

[03:08] *** xinming joined
[03:08] <gaal> how come the .h still has it?

[03:08] <gaal> just an oversight?

[03:08] <audreyt> no

[03:09] <audreyt> #parrot refactored that into global.h

[03:10] <audreyt> thinking about how to go about that

[03:10] <audreyt> trying to just include parrot.h

[03:10] <audreyt> and see if it works

[03:27] *** kanru joined
[03:39] *** sanug joined
[03:47] <TreyHarris> hrm: "svn: Failed to add directory 'pugs/perl5/Pugs-Compiler-Rule': object of the same name already exists"

[03:47] * TreyHarris does not know svn

[03:48] <TimToady> if you don't care about what's currently in the directory, just blow it away and "svn up" again.

[03:48] <TimToady> otherwise rename it.

[03:49] <TreyHarris> TimToady: danke

[03:50] <TreyHarris> so what's this svk i heard mutterings about at yapc?  is it a totally new vcs, or is it a different frontend for SVN?

[03:51] <TimToady> the latter

[03:51] <TimToady> taps in at the C api layer, if I recall.

[03:52] <TreyHarris> ah-hah, looks like my cron job to update the pugs src was always croaking on that error, which is why i was so often confused when my source didn't match what people were talking about here.  *sigh*

[03:52] <TimToady> on this channel it seems to inspire both tremendous loyalty and intense swearing, often from the same people.

[03:53] <TreyHarris> :-)

[03:56] <audreyt> TreyHarris: fixed

[03:56] <ingy> hi audreyt

[03:57] <TreyHarris> audreyt: already?

[03:57] <TreyHarris> ?eval my %z{'a'..'c'} = (17,17,17); %z<a b c> = ();

[03:57] <audreyt> TimToady: try now?

[03:57] <evalbot_11168> [17, 17, 17]

[03:57] <audreyt> TreyHarris: the recompile takes time even on feather :)

[03:57] <svnbot6> r11233 | audreyt++ | * TreyHarris++ reported that slice assignment is broken:

[03:57] <svnbot6> r11233 | audreyt++ |     @a[1,2,3] = 1,2,3;

[03:57] <svnbot6> r11233 | audreyt++ |     @a[1,2,3] = 4;

[03:57] <svnbot6> r11233 | audreyt++ |   used to leave the values of @a[2] and @a[3] intact.

[03:57] <svnbot6> r11234 | audreyt++ | * Pugs.Embed.Parrot: Include <parrot.h> to chase the recent

[03:57] <audreyt> ingy: hi!

[03:57] <svnbot6> r11234 | audreyt++ |   change on find_globals being refactored into global.h

[03:57] <audreyt> TimToady: it worksfor me with 11234 and trunk parrot

[03:57] <TimToady> audreyt: actually, I think v6-pugs is fine, if you take pugs as a naming authority.

[03:58] <TimToady> making...

[03:59] *** lollan joined
[04:00] <ingy> use v6-|*|_|6$;

[04:01] <audreyt> TimToady: yeah.

[04:01] <|n6yl33t> use v6-|*|_|6$;

[04:02] <TreyHarris> ingy: and a syntax error under perl5 is even better than an errant warning? :-)

[04:02] <ingy> we'll special case it

[04:04] <gaal> use v6-lol;

[04:04] *** lollan joined
[04:05] <TimToady> use v6-1e1;

[04:06] <TreyHarris> how can i look at what's just changed before i update?  like cvs?  "svn diff -r HEAD pugs"?

[04:07] <TimToady> I often use svn diff -r PREV on things

[04:07] <PerlJam> TreyHarris: svn st

[04:07] <TimToady> svn status is good too.

[04:07] <PerlJam> TreyHarris: svn st -u

[04:09] <TimToady> hmm, still didn't find Parrot_find_global...

[04:10] <TimToady> prolly shoulda done a realclean first...

[04:10] <TimToady> well, gotta commute a bit before I try that... &

[04:11] <ingy> use v0b0110;

[04:17] <TreyHarris> hrm.  shouldn't i be able to just run a .t file directly with pugs?  it's failing on the first :todo and never tries any of the tests beyond

[04:17] <ivanfrey> audreyt: Well I'm back and I find myself at this point:env PERL_HARNESS=./pugs prove t/01-sanity/*.t

[04:17] <ivanfrey> t/01-sanity/01-tap.................dyld: /usr/bin/pugs can't open library: /System/Library/Perl/lib/5.8/libperl.dylib  (No such file or directory, errno = 2)

[04:17] <ivanfrey> t/01-sanity/01-tap.................dubious

[04:17] <ivanfrey>         Test returned status 0 (wstat 5, 0x5) and so on and so forth.

[04:21] *** guaumiau joined
[04:22] <audreyt> ivanfrey: is libperl.dylib somewhere in /system/LLibrary?

[04:22] <audreyt> find /System/Library/Perl | grep libperl

[04:23] *** stevan joined
[04:23] <ivanfrey> This one: /System/Library/Perl/5.8.1/darwin-thread-multi-2level/CORE/libperl.dylib

[04:24] <audreyt> ok. can you perhaps do a symlink?

[04:24] <audreyt> (I know it's wrong, but give it a try)

[04:27] <TreyHarris> audreyt: where do i get a prove that works with perl6?

[04:28] <audreyt> it's the same prove

[04:28] <audreyt> just a different PERL_HARNESS

[04:29] <TreyHarris> oh.  I just tried running "PERL_HARNESS=/usr/local/bin/pugs prove array.t" and got lots of errors that certainly looked like perl5 was trying to execute perl6 code

[04:29] <audreyt> well, do you actually have /usr/local/bin/pugs?

[04:29] <audreyt> or is /usr/bin/pugs ?

[04:30] <TreyHarris> either way, same error.  i have both, /usr/bin/pugs symlinks to /usr/local/bin/pugs

[04:30] <TreyHarris> i'm using the binary pkg you pointed me at

[04:30] <TreyHarris> under osx 10.4

[04:31] <ivanfrey> audreyt: can't open /usr/lib/libncurses.5.4.dylib

[04:32] <audreyt> ivanfrey: do you have a ncurses /usr/lib/

[04:33] *** stephanepayrard_ joined
[04:33] <audreyt> /usr/lib/*ncurses*

[04:35] <TimToady> use v6-alpha;

[04:35] <TreyHarris> I have an ancient version of Test::Harness, I'll try upgrading that

[04:35] <ivanfrey> audreyt: I have a libncurses.5.dylib and a libncurses.dylib

[04:36] <audreyt> ivanfrey: more symlink?

[04:36] <vsoni> audreyt: hi

[04:36] <audreyt> vsoni: hi!

[04:36] <vsoni> audreyt: did you get my mail

[04:37] <ivanfrey> audreyt: should I symlink libncurses.5.dylib or the other one?

[04:38] <TimToady> do they have the same size?

[04:38] <audreyt> ivanfrey: should be the same; but try .5.

[04:38] <audreyt> yes.

[04:39] <audreyt> vsoni: src/Pugs/Embed/Parrot.hsc

[04:39] <audreyt> in the pugs tree

[04:39] <audreyt> and also the horrible workaround for imcc

[04:39] <audreyt> brokenness

[04:39] <audreyt> is in src/pge/parrotembed.c

[04:39] <audreyt> I hope your work can make src/pge/parrotembed.c go away :)

[04:39] <vsoni> thanks.......would you like to have better interface to imcc

[04:40] <vsoni> audreyt: We can talk about it somet time

[04:40] <audreyt> I'm using imcc_init and imcc_compile_pir

[04:40] <audreyt> that's the only ones I use actually

[04:40] <audreyt> well also Parrot_compreg

[04:40] <audreyt> but that's separate

[04:40] <vsoni> ok

[04:41] <vsoni> Hey about the :immediate discussion

[04:41] <audreyt> well also leo also made me do

[04:41] <audreyt> PackFile_new

[04:41] <audreyt> PackFile_Segment_new_seg

[04:41] <audreyt> PF_create_default_segs

[04:41] <audreyt> etc etc

[04:41] <audreyt> as the boilerplace init sequence

[04:41] <audreyt> I never understood that

[04:41] <audreyt> so I'd welcome them be folded away somehow

[04:41] <audreyt> into one single _inic perhaps

[04:41] <audreyt> _init

[04:42] <vsoni> how about IMCC_push_parser_state

[04:42] <audreyt> the :immediate -- I don't see why an assembly language should have BEGIN block

[04:42] <vsoni> do you use that

[04:42] <audreyt> allison ruled that it's a good thing; I'm still wondering if she'll explain why

[04:42] <audreyt> but at this moment I don't care anymore :) I don't use it, so I pretend it's not there.

[04:42] <ivanfrey> audreyt: t/01-sanity/01-tap.................dyld: /usr/bin/pugs version mismatch for library: /usr/lib/libncurses.5.4.dylib (compatibility version of user: 5.4.0 greater than library's version: 5.0.0)

[04:42] <vsoni> audreyt: How about immediate was an Interface in IMCC.... that calling programs could implement

[04:43] <audreyt> vsoni: well, and IMCC will transfer the partially compiled .pbc to the embedder?

[04:43] <audreyt> vsoni: or the textual .pir?

[04:43] <audreyt> basically I can't see a use case

[04:44] <audreyt> ivanfrey: hm.

[04:44] <audreyt> get http://perlcabal.org/~audreyt/tmp/libncurses.5.4.dylib ?

[04:44] <audreyt> (hopefully it's Universal)

[04:44] <vsoni> audreyt: It will depend on the how the interface is defined....when IMCC: encounters :immediate....The interface that the calling program defined gets called.....So in that interface you could create a new IMCC instance

[04:44] <TimToady> hmm, still getting:

[04:44] <TimToady> dist/build/libHSPugs-6.2.12.a(Parrot.o): In function `sMgK_slow':

[04:44] <TimToady> ghc1790.hc:(.text+0x3cd7): undefined reference to `Parrot_find_global'

[04:44] <TimToady> that's after realclean

[04:44] *** sanug left
[04:45] <audreyt> TimToady: hrm.

[04:45] <audreyt> leo: do you know what's happening here? :)

[04:46] <vsoni> Audreyt: did you get the latest Parrot code....I think Chip made some changes today

[04:46] <audreyt> TimToady: I'm seeing

[04:46] <audreyt> 00165fe0 T _Parrot_find_global

[04:46] <audreyt> from nm

[04:46] <audreyt> oh wait, I'm 2 revs behind.

[04:47] <audreyt> aha. chip removed the API.

[04:47] <audreyt> very well.

[04:47] *** phpError joined
[04:47] <vsoni> I am not sure if he removed the API

[04:48] <audreyt> he did.

[04:48] <vsoni> ok

[04:48] <audreyt> and introduced several variants

[04:48] <vsoni> Break in Binary Compatibility :)

[04:48] <audreyt> it's now Parrot_find_global_s

[04:48] <audreyt> same thing

[04:48] <audreyt> just different name!

[04:48] <vsoni> ok

[04:49] <audreyt> oy. what's the #ifdef.

[04:49] <ivanfrey> audreyt: oh, Camino tried to open libncurses.5.4.dylib in MS Excel.

[04:49] <audreyt> ivanfrey: wow.

[04:52] <audreyt> oh well. I'll just test PARROT_VERSION > 0.4.5.

[04:53] <ivanfrey> audreyt: I've got a problem. Why are the errors referring to /usr/bin/pugs when I wanted to run ./pugs in the Perl6-Pugs-6..2.12 directory.

[04:53] <TimToady> it has PARROT_REVISION.

[04:53] <TimToady> in config.h

[04:54] <audreyt> yeah, but that will break with 0.4.5-devel up until an hour ago

[04:54] <audreyt> but that's fine.

[04:55] <TimToady> it was r13170 that changed it, i think.

[04:55] <audreyt> TimToady: retest?

[04:55] <TimToady> commit?

[04:55] <audreyt> already!

[04:57] <svnbot6> r11235 | audreyt++ | * chase post-0.4.5 Parrot API change: Parrot_find_global

[04:57] <svnbot6> r11235 | audreyt++ |   now becomes Parrot_find_globals

[04:57] <ivanfrey> audreyt: maybe I should delete the parrot and pugs builds I installed earlier from Udobe's site.

[04:58] <audreyt> ivanfrey: that is likely

[04:58] <audreyt> maybe rm /usr/bin/pugs first?

[05:00] *** mauke_ joined
[05:00] <TimToady> looks good.

[05:01] <TimToady> couldn't make miniperl6, but that's 'cuz I don't have Padwalker, apparently.

[05:02] <ivanfrey> audreyt: I'm going to use the script in /usr/local/bin.

[05:02] <audreyt> ivanfrey: k.

[05:03] <ivanfrey> env PERL_HARNESS=./pugs prove t/01-sanity/*.t

[05:03] <ivanfrey> t/01-sanity/01-tap.................Can't exec /usr/bin/pugs at t/01-sanity/01-tap.t line 1.

[05:03] <ivanfrey> t/01-sanity/01-tap.................dubious

[05:03] <ivanfrey>         Test returned status 2 (wstat 512, 0x200)

[05:04] <TimToady> audreyt: what do you thing of v6-alpha?

[05:04] <TimToady> *think

[05:05] <ivanfrey> audreyt: How do we run ./pugs in all incantations of pugs in the test scripts? Is there an environment variable for this.

[05:05] <audreyt> TimToady: when 6.0.0 is here we call it -omega?

[05:06] <ivanfrey> audreyt: maybe a symlink will work.

[05:06] <audreyt> (I'm fine with it. still I think v6-perl, esp without #! line, is more descrptive, but -alpha is a neat social hack.)

[05:06] <TimToady> as in that number we can't calculate? :)

[05:06] <audreyt> -aleph

[05:07] <audreyt> well, it's good, as we can semi-freeze the spec some time in the future

[05:07] <audreyt> and call that level -beta

[05:07] <audreyt> it's really confusing version slot with authority slot

[05:07] *** frederico joined
[05:07] <audreyt> but otoh, it means that before release, nobody can really claim authority to 6.0.0

[05:07] <audreyt> which is a neat social hack.

[05:07] <TimToady> that's what I thought...

[05:07] <TimToady> and -perl claims a little too much, I think.

[05:08] <audreyt> with the surface syntax still changing, yeah.

[05:08] <svnbot6> r11236 | audreyt++ | * findSymRef is made from MonadSTM to Eval, thanks to gaal++

[05:08] <svnbot6> r11236 | audreyt++ |   for noticing it.

[05:08] <audreyt> ok, -alpha it is :)

[05:08] <TimToady> or able, baker, charlie...  alpha, bravo, etc...

[05:08] <TreyHarris> eek.  now i'm really confused.  I thought maybe some old version of Test::Harness was hanging around somewhere on my filesystem confusing things, so I created an empty test with nothing but a CHECK { warn "version of Test::Harness is $Test::Harness::VERSION." }.  when i try to run prove on it, I get "version of Test::Harness is ."

[05:09] <TimToady> -abel, that is...

[05:10] <TreyHarris> oh, duh, we're in test::harness.  *smacks head*

[05:10] <TimToady> or use the hurricane list for this year...

[05:12] <audreyt> so instead of specifying the variant of implementation, it's specifying the "stage of language"

[05:12] <audreyt> I like that.

[05:12] <audreyt> since the implementation in my mind belongs to #! anyway.

[05:12] <TimToady> since the idea is to cut across implementations

[05:12] <audreyt> eexactly.

[05:12] <audreyt> so if you have a script that has no impl prefence, don't put a #!

[05:13] <audreyt> some point in the future maybe #!env perl6

[05:13] <audreyt> but not now :)

[05:13] <TimToady> we're still trying to encourage convergence at this point. :)

[05:14] <audreyt> oh, the idea is that various implementation will symlink to cc :)

[05:14] <audreyt> er I mean runghc

[05:14] <audreyt> *runhaskell

[05:14] <ivanfrey> audreyt: env PERL_HARNESS=./pugs prove t/01-sanity/*.t

[05:14] <ivanfrey> t/01-sanity/01-tap.................dyld: /usr/bin/pugs can't open library: GMP.framework/Versions/A/GMP  (No such file or directory, errno = 2)

[05:14] <ivanfrey> t/01-sanity/01-tap.................dubious

[05:14] <ivanfrey>         Test returned status 0 (wstat 5, 0x5)

[05:14] <audreyt> ivanfrey: ok, you are at the end of the tunnel!

[05:15] *** mauke_ is now known as mauke

[05:15] <TreyHarris> hmmm.  I just found *my* problem... in my version of prove, it's HARNESS_PERL, not PERL_HARNESS.

[05:15] <audreyt> ivanfrey: http://perlcabal.org/~audreyt/tmp/GMP.framework.tar.gz

[05:15] <TimToady> okay, we're schmokin'.

[05:15] <audreyt> ivanfrey: cd /Library/Frameworks

[05:15] <audreyt> and extract it there.

[05:16] <TreyHarris> ivanfrey: where did you get PERL_HARNESS from?

[05:17] <audreyt> it's HARNESS_PERL and never PERL_HARNESS I think...

[05:17] <gaal> ;2~.

[05:17] <gaal> ;2~.

[05:17] <gaal> ;2~.

[05:17] <audreyt> ;3-!

[05:18] <TimToady> ;5-?

[05:18] <ivanfrey> TreyHarris: I thought it was Test::Harness

[05:18] <gaal> wow, ssh escape codes escape windows

[05:19] <ivanfrey> TreyHarris: I used cpan to install it.

[05:19] <TimToady> it's an OS-in-the-middle attack...

[05:20] <audreyt> TimToady: in P6AST work today, I think that

[05:20] <TreyHarris> ivanfrey: you've been running "PERL_HARNESS=./pugs prove..."

[05:20] <audreyt> use v6-alpha

[05:20] <audreyt> is short for

[05:20] <audreyt> use Perl-6-urn:alpha;

[05:20] <audreyt> makes sense?

[05:20] <gaal> use v6-א_0;

[05:20] <TimToady> urn?

[05:20] <TreyHarris> ivanfrey: it should be HARNESS_PERL.  i was about to type the same line when you mentioned it on here, and so I reversed them, too

[05:20] <audreyt> the spec has it that authority has to be a URI

[05:20] <audreyt> which means it has to have a scheme

[05:21] <audreyt> and the default scheme, for things that cannot be located, is urn:

[05:21] <audreyt> as opposed to everybody else like http:, which are URLs

[05:21] <TimToady> I was kinda hoping to locate perl...

[05:23] <ivanfrey> TreyHarris: Well audreyt advised me to run env PERL_HARNESS=.....   as opposed to make test

[05:23] <TreyHarris> and so I spent the past hour reinstalling Test::Harness because I was typing PERL_HARNESS instead of HARNESS_PERL.  but now I have the spelling right, the tests run just fine, no syntax errors or erroneous testing of TODOs.  :-)

[05:23] <TimToady> it's all very Greek: alphas, and urns...

[05:24] <ivanfrey> TreyHarris: I apologize for the confusion. I'm confused myself.

[05:24] <TimToady> gaal: I'm afraid perl5 doesn't deal with א_0 very well.  We're hoping to fix that in perl6...

[05:25] <TreyHarris> ivanfrey: no problem.  but given this, i think it's pretty clear that you have a problem with your Perl (5) installation, whether or not you have a problem with pugs

[05:25] <TimToady> on the other hand it doesn't seem to have much trouble with -Inf.  go figure...

[05:26] <TreyHarris> ivanfrey: since the line you were running was never actually sucessfully calling pugs

[05:26] <ivanfrey> audreyt | TreyHarris: Well it appears to now.

[05:28] <audreyt> TimToady: I committed S11

[05:28] <audreyt> sanity check?

[05:28] <ivanfrey> But I certainly have made a dog's breakfast of things. It appears that some setup of pugs occurred when /sw/bin/perl was still in my path.

[05:30] <ivanfrey> audreyt | TreyHarris:    t/01-sanity/06-use.................pugs: *** Can't locate lib.pm in @*INC (@*INC contains: /sw/lib/perl6/darwin-thread-multi-2level /sw/lib/perl6 /sw/lib/perl6/site_perl/darwin-thread-multi-2level /sw/lib/perl6/site_perl /sw/lib/perl6/auto/pugs/perl6/lib /sw/lib/perl6/site_perl/auto/pugs/perl6/lib .).

[05:30] <ivanfrey>     at t/01-sanity/06-use.t line 1, column 1

[05:30] <ivanfrey> t/01-sanity/06-use.................dubious

[05:30] <ivanfrey>         Test returned status 1 (wstat 256, 0x100)

[05:31] <TimToady> sane.

[05:34] <ivanfrey> audreyt: I guess I better start over?

[05:34] <audreyt> cool.

[05:34] <audreyt> try

[05:34] * geoffb rezzes in for a moment

[05:34] <audreyt>  env HARNESS_PERL=./pugs -Iblib6/lib t/01-sanity

[05:35] <audreyt> you didn't install, so the blib is needed (for hopfully obvious reasons)

[05:35] <geoffb> just wanted to congratulate y'all on the v6.pm getting through the sanity suite.

[05:35] <geoffb> Damn fine progress, that is!

[05:35] <audreyt> geoffb: thanks :) yay :)

[05:35] <audreyt> stevan just release new Moose

[05:35] <audreyt> with Module and Package encodings

[05:35] <audreyt> so it also agrees with the 6.28.0 AST's MOP encodings!

[05:36] <audreyt> (or rather, "so we can import en mass from Moose without reservations")

[05:36] <audreyt> gaal will commit the new AST sketch in a bit.

[05:36] <geoffb> mmmm ... Perlish goodness

[05:36] <audreyt> then the task is to switch both the v6.pm runtiem and Haskell runtime to use it

[05:36] <audreyt> one both are using it, then we call it 6.28.0.

[05:37] <audreyt> it's like, the plan, exactly one year ago, finally starts to come together :)

[05:37] <geoffb> wonderful, I was wondering when that was going to happen

[05:37] <geoffb> heh

[05:37] <TreyHarris> TimToady, audreyt: i hope you're future-proofing perl 6 by allowing some value of "use v7...." that will cause Perl 6 to load v7.pm ;-)

[05:37] <audreyt> lol

[05:37] *** nothingmuch joined
[05:38] <gaal> committed

[05:38] <audreyt> gaal++ gaal++ gaal++ gaal++

[05:39] <audreyt> TimToady: it's actually a good point

[05:39] <audreyt> when perl6 sees use v6

[05:39] <audreyt> use v7

[05:39] <audreyt> instead of curling up and die

[05:39] <audreyt> it should first try to load v7.pm :)

[05:39] <TimToady> sure, why not?

[05:39] <audreyt> fix S11? :)

[05:40] * audreyt needs to shower+sleep

[05:40] <audreyt> alternately...

[05:40] <TimToady> though arguably it should really just load Perl-v7.pm

[05:40] <audreyt> yes.

[05:40] <audreyt> Perl.pm with multiversioning selector

[05:40] <ivanfrey> audreyt:  env: -Iblib6/lib: No such file or directory

[05:41] <TimToady> or maybe we just install a hook that runs if the first word in a Perl file is completely unrecognized.

[05:41] <audreyt> ivanfrey: sorry

[05:41] <geoffb> seen rafl

[05:41] <jabbot> geoffb: rafl was seen 8 hours 24 minutes 29 seconds ago

[05:41] <audreyt> env HARNESS_PERL=./pugs prove -Iblib6/lib t/01-sanity/*.t

[05:42] <audreyt> TimToady: yeah. since as we know "there will be no perl 7" etc :)

[05:42] <gaal> whereof one cannot complie thereof one must not run

[05:42] <audreyt> or rather "perl 7 will be a perl 6 module"

[05:42] <svnbot6> r11237 | gaal++ | * WIP towards an overhaul of Pugs.AST.Internals.

[05:42] <svnbot6> r11237 | gaal++ |   It includes a new and more detailed AST which captures much more

[05:42] <svnbot6> r11237 | gaal++ |   Perl 6 semantics; captures; MOP based on Stevan++'s Moose.pm; and

[05:42] <svnbot6> r11237 | gaal++ |   cleans up some accrued cruft.

[05:42] <audreyt> but hey, perl 6 is now just a perl 5 module.

[05:42] <audreyt> gaal++

[05:42] <audreyt> lol

[05:43] <gaal> one must, so to speak, shed away the antlers after one has paraded around yapc with them # XXX WRONG

[05:43] <geoffb> Anyone know if rafl (or someone else) is still maintaining a Debian package for pugs?

[05:44] <ivanfrey> audreyt: Take a look at this:  All tests successful, 2 subtests skipped.

[05:44] <ivanfrey> Files=19, Tests=63, 50 wallclock secs (34.37 cusr +  1.69 csys = 36.06 CPU)

[05:44] <dduncan> so, with headings like "use v6-alpha;" ... does this mean that we can take identical Perl 6 scripts and run them under multiple runtimes, like saying "pugs <script>" or "perl <script>" ... just like running normal Perl 5 scripts?

[05:44] <dduncan> so only the program name changes on the command line, and everything else is the same?

[05:44] <ivanfrey> audreyt: Ain't that sweet?

[05:46] <TimToady> dduncan: that's the point of scrapping the #! line, which can only indicate a single interpreter.  we wanted to run the tests under various interpreters.

[05:46] <xinming> If `use Perl-v7` is true... someone might even do `use Python-2` or `use Basic`  :-P

[05:46] <ivanfrey> audreyt: So I guess it's sudo make install followed by util/package-osx.pl

[05:47] <audreyt> ivanfrey: yeah :)

[05:47] <dduncan> I would just like it if this means I can simply write a perl 6 version of stuff only, and not bother with a separate perl 5 version, assuming I'm willing to live with alpha quality support structures for awhile

[05:48] <audreyt> dduncan: yes, that would mean that.

[05:48] <dduncan> good ...

[05:48] <TimToady> well, it's still closer to halloween than christmas...

[05:48] <dduncan> then with the current rapid pace of development, I may very well skip a pure perl 5 version of Rosetta since a perl 6 version should be all that is needed, even in a plain perl 5 environment ... good news

[05:48] <audreyt> dduncan: yes. that is I think good news to all CPAN authors :)

[05:49] <audreyt> (as maintaining -6 and -5 takes lots of energy.)

[05:49] <dduncan> but you know what else that means ...

[05:50] * geoffb can't wait until v6.pm is far enough long to convert all the fun stuff from his code library ....

[05:50] <dduncan> it means that lots of stuff in ext/ can now conceptually just be put on their own on CPAN now

[05:50] <dduncan> rather than fattening up the Pugs bundle

[05:50] <dduncan> unless you like their presence in Pugs for testing Pugs in smokes etc

[05:51] <audreyt> yeah, but multiversioning on CPAN needs work.

[05:52] <audreyt> i.e. it needs to implement the full "use" spec.

[05:52] <audreyt> which robkinyon is working on, I believe

[05:52] <dduncan> good point, actually ... the CPAN indexer will need to know how to parse the Perl 6 modules ... perhaps a reason to wait on that to-CPAN move then

[05:52] <geoffb> Hmmm, if ext/ stuff was moved to CPAN, having a bundle of it for use as test fodder would be key

[05:52] <audreyt> geoffb: yes.

[05:53] <dduncan> I think that separating the test suite soon would be a good idea, maybe

[05:53] <TimToady> speaking of which, finally finished my smoke, 44 errors.

[05:53] <audreyt> but CPAN indexer multiversioning ("The Stas Spec") and client multiversiong (JIB) and coexistence of modules (the hack I did in YAPC::NA) needs to be specced and implemented.

[05:53] <dduncan> if all the t/ stuff is a separate downloadable bundle, it can be used with just v6 or just Perl6-Pugs, etc

[05:54] <ivanfrey> audreyt: I don't have a util/package-osx.pl

[05:54] <audreyt> before that if we just throw random v6 modules on CPAN, the indexer, client, and "require" will all just be very confused.

[05:54] <TimToady> interestingly, for the first time, I passed Perl-Grammar/t/basic.t.

[05:54] <audreyt> ivanfrey: it's in the svn checkout

[05:54] <audreyt> TimToady: evidently the parrot cage cleaners are doing some good.

[05:55] <audreyt> ivanfrey: download it from http://svn.openfoundry.org/pugs/util/package-osx.pl

[05:55] <TimToady> hope so.

[05:55] <audreyt> ivanfrey: but I havn't run it myself -- unobe is the one you want to consult

[05:55] <audreyt> and I need to shower+sleep anyway :) bbiab &

[05:55] *** buetow joined
[05:56] <dduncan> I don't suppose that the now rapidly updated version.pm is something that can help with the CPAN multiversioning issues ... or only.pm, or if the fix needs to be done separately from those

[06:00] <ivanfrey> pugs works!

[06:07] <audreyt> yay!

[06:10] <audreyt> dduncan: version.pm is one piece of puzzle

[06:10] <audreyt> only.pm too

[06:10] <audreyt> but yeah, need to graffle them into a roadmap of sorts.

[06:10] <audreyt> there's always tomorrow :)

[06:10] * audreyt waves &

[06:11] * geoffb derezzes as well

[06:11] <dduncan> yes ... but still, this v6 development seems to move some kind of production ready 6.0.0 a lot closer to the present in my eyes ... Perl 5 may be the first production ready runtime

[06:11] <ivanfrey> audreyt: I didn't bother with the package-osx.pl script because my implementation of pugs appears to be installed in /sw and not /usr/local

[06:12] *** kanru joined
[06:12] <dduncan> though not likely the fastest ... Parrot would likely take longer to be production ready, but end up being the fastest one when it is

[06:13] <dduncan> those are my predictions

[06:13] <audreyt> dduncan: that may very well be true.

[06:13] <audreyt> Haskell is the one to prototype semantics and unknown interactions in; once it's well understood we code it as CPAN modules

[06:13] <audreyt> and have another layer of sugar modules like Moose that makes it idiomatic

[06:14] <audreyt> and have finally the v6.pm layer that targets the new idioms

[06:14] <TimToady> and makes sure all the source filters run in the right order.  :)

[06:14] <audreyt> so the lower-layer modules are goign to be production-ready long before v6.pm covers all of perl6

[06:14] <audreyt> there's no source filters anymore :)

[06:14] <audreyt> "precompilers"

[06:14] <audreyt> but yes.

[06:15] <audreyt> dduncan: though it's also possible to retool v5 runtime so that v6-related features runs fast.

[06:16] <audreyt> but that will probably not happen with vanilla 5.8.

[06:16] <dduncan> yes, of course

[06:16] <audreyt> but parrot is needed for platform-independent bytecode, JIT, ease of deployment, etc.

[06:16] <audreyt> ...though there is a fallback plan, namely javascript... :)

[06:17] <obra> ease of deployment?

[06:17] <audreyt> obra: .pbc files

[06:17] <audreyt> and AOP compilation

[06:17] <audreyt> er, AOT

[06:17] <audreyt> (ahead-of-time)

[06:17] <audreyt> though admittedly that's broken with parrot right now

[06:17] <audreyt> but it's part of the spec :)

[06:17] <dduncan> right, so here's a bold prediction of mine ... a subset of Perl 6 that will cover what people need for at least 90% of their work will be at least beta quality by Christmas of THIS year ... over Perl 5 ... and if that isn't bold enough, some people will use it in production by then ... including me

[06:18] <audreyt> dduncan: well, minus the v6.pm sugar layer, I'd say stevan and I and other lambdamoose are already deploying it in production

[06:18] <audreyt> _with_ the sugar layer however... yeah, Christmas _this_ year seems possible.

[06:18] <dduncan> yes, I mean _with_

[06:19] <audreyt> a graffler is coming to this channel...

[06:19] *** justatheory joined
[06:19] *** shachaf joined
[06:20] <audreyt> dduncan: yeah. it would help though

[06:20] <dduncan> that all said ... I am assuming here that, if someone is going to update a legacy Perl 5 module to use a new Perl 6 module under the hood, that doing so would be fairly easy ... like one can invoke Perl 6 in Perl 5 now ... maybe assuming for simplicity that only one author-version of said perl 6 module exists

[06:21] *** Bleadof joined
[06:21] <dduncan> after all, one intended purpose of Rosetta is to have existing ORMs use it under the hood

[06:21] <audreyt> dduncan: sure, but the calling convention is a bit different

[06:21] <audreyt> to call a Perl 6 method from Perl 5 land

[06:21] <audreyt> currently you have to pass your positionals and nameds separately

[06:21] <dduncan> ideally, the users of the legacy modules won't have to change anything at all

[06:21] <audreyt> but we can always have a idiom layer around Data::Bind

[06:21] <dduncan> so such updated ORMs can be drop-in replacements

[06:21] <audreyt> that, like Params::Validate, tries to intuit what the caller means.

[06:22] <audreyt> stevan was suggesting something like that

[06:22] <audreyt> Class::MOP : Moose = Data::Bind : Pugs::Runtime::Call

[06:22] <audreyt> or something like that

[06:22] <audreyt> Buffalo.pm maybe ;)

[06:23] *** sanug joined
[06:23] <audreyt> oh wait, Buffalo.pm is actually a monger group.

[06:23] <audreyt> hi sanug!

[06:23] <sanug> [01:22am] sanug: audreyt: I will repeat from before...  I looked at the announcement you sent on the v6pm now runs t

[06:23] <sanug> [01:22am] sanug: audreyt: layers are from the user perspective - CPAN - Class::MOP - Data::Bind

[06:23] <sanug> [01:22am] sanug: audreyt: Or CPAN Moose Class::MOP Data::Bind

[06:23] <sanug> [01:23am] sanug: audreyt: So we put a user of module using first Moose - which layers on top of Class::MOP which uses Data:Bind...

[06:23] <audreyt> sanug: so, from user point of view, CPAN.pm is still toplevel

[06:23] <audreyt> it installs some modules

[06:23] <audreyt> some of which are written in perl 6

[06:23] <audreyt> for those modules, v6.pm is the topmost "sugar" level

[06:24] <dduncan> speaking of all the undersides of Perl 6 being implemented as Perl 5 modules ... is there something existing to make strong variable typing easy?

[06:24] <audreyt> dduncan: see Moose TypeConstraints

[06:24] <dduncan> okay

[06:24] <audreyt> sanug: v6.pm parses perl 6 code and generates perl 5 code that uses "idiom" level modules

[06:24] <audreyt> so they are the next level

[06:24] <dduncan> effective strong typing is a prerequisite for my database stuff

[06:24] <audreyt> the idiom level does not use Perl 6 rules

[06:25] <audreyt> and just use normal perl5 declarative sugar to make things easier

[06:25] <sanug> So I think that colors would do this best - Perl 6 gets one color and when we get to Perl 5 get another color to show the switch

[06:26] <audreyt> Moose.pm would be an example for that

[06:26] <audreyt> well, yeah, but it's all Perl 5 up and including v6.pm

[06:26] <audreyt> the user module, say Rosetta.pm

[06:26] <audreyt> installed from CPAN

[06:26] <audreyt> is written in perl 6

[06:26] <audreyt> handled in p5 land by v6.pm

[06:26] <audreyt> and from v6.pm onward it's all perl5

[06:26] <sanug> OK - so perl6 code gets the Perl 6 color

[06:27] <sanug> and then all below are perl5

[06:27] <audreyt> yup

[06:27] <audreyt> and Rosetta would be a nice example.

[06:27] <sanug> I would like to make special diagram for the magic of v6.pm

[06:27] <TimToady> s/Cfront/Perlfront/

[06:27] <audreyt> that would be nice

[06:27] <audreyt> yes :)

[06:27] <sanug> It is important that all grok the wow of that module

[06:28] <audreyt> below the idiom level it's the "runtime" level

[06:28] <audreyt> Class::MOP, Pugs::Compiler::Rule, Pugs::Runtime::* etc all go there

[06:29] <sanug> Explain idiom in more detail so I can express tat in the graphic

[06:29] <audreyt> ok.

[06:29] <sanug> s/tat/that/

[06:29] <audreyt> look at the synopsis of http://search.cpan.org/dist/Moose/lib/Moose.pm

[06:29] <lambdabot> Title: "Moose - Moose, it's the new Camel - search.cpan.org"

[06:29] <dduncan> slight change of topic, but I was wondering how .id works with non-trivial types

[06:29] <dduncan> eg, what does the .id of a Pair look like?

[06:29] <dduncan> I know that to users it shouldn't matter, but to people implementing composite types, it does

[06:30] <audreyt> dduncan: one possibility - could be just itself.

[06:30] <audreyt> sanug: note the new pseudo-keywords: "has", "isa", etc

[06:30] <audreyt> sanug: those are just regular perl 5 functions

[06:30] <audreyt> but it hides the underlying Class::MOP calls

[06:31] <audreyt> the "has" actually stands for $class->meta->_process_attribute(...) ect etc

[06:31] <sanug> audreyt: How does the installing of the attributes work?

[06:31] <audreyt> sanug: it calls into Class::MOP

[06:32] <audreyt> sanug: basically, for each perl 6 class, there is one "meta object" behind it

[06:32] <audreyt> accessible by the "meta" method

[06:33] <dduncan> one key thing I'm wondering about .id for immutable types is ... are they supposed to generate some neutral value like an integer, two of which can then be compared independently of the type definition, or will they contain references to the actual object all the time and that the object's class still needs to declare a === method which is invoked as needed?

[06:33] <audreyt> so you can add an attribute in perl 6 by saying

[06:33] <audreyt> Dog.meta.add_attribute(...)

[06:33] <dduncan> if it is the latter, I imagine that implementation will be simpler, at a possible cost of performance if the same comparison is done a lot

[06:33] <audreyt> and with Class::MOP it's

[06:33] <audreyt> Dog->meta->add_attribute(...)

[06:33] <audreyt> but it's not declarative

[06:33] <audreyt> and hence non-idiomatic

[06:33] <audreyt> so Moose.pm introduces the idiom of

[06:34] <audreyt>   has 'x' => (is => 'rw', isa => 'Int');

[06:34] <audreyt> which translates to a bunch of underlying calls to meta objects.

[06:34] <audreyt> dduncan: the latter

[06:34] <dduncan> okay, that answers my question

[06:34] <audreyt> sanug: and the win of the idiom layer is that Perl 5 CPAN modules

[06:34] <audreyt> that do not desire to use perl 6 syntax

[06:35] <audreyt> can neverthelss use those idioms to improve their code

[06:35] <audreyt> _and_ the perl 5 code emitted by v6.pm will look clean and idiomatic too

[06:36] <geoffb> .oO( ... which is *extremely* nice ... )

[06:36] <sanug> When i spoke to Stevan Little on Saturday - he showed me a diagram - that had all of the layers inside the meta object protocol

[06:36] <audreyt> yes.

[06:36] <sanug> Do you recall where that is?

[06:36] <sanug> It was in graffle as well - no colors

[06:36] <audreyt> sanug: somewhere in http://svn.openfoundry.org/pugs/perl5/Perl6-MetaModel/docs/

[06:37] <lambdabot> Title: "Revision 11237: /perl5/Perl6-MetaModel/docs"

[06:37] <audreyt> there are 4 graffles there

[06:38] <audreyt> sanug: so. the runtime layer are, at least ideally, still all pure perl5

[06:38] *** janus` joined
[06:38] <audreyt> but sometimes the perl5 runtime doesn't quite let us do what we want

[06:38] <audreyt> so we delve deeper

[06:39] <audreyt> and use the "core" layer

[06:39] <janus`> hi

[06:39] <audreyt> or "kluge" layer ;)

[06:39] <audreyt> or just neutrally, the "XS" layer

[06:39] <audreyt> which includes autobox.pm, Devel::Caller, etc.

[06:39] <audreyt> also, PadWalker.

[06:39] <sanug> So please explain the magic of v6 again, that you exploited..

[06:40] <audreyt> those augment the perl5 runtime to provide neccessary semantics

[06:40] <sanug> the name v6 doies something magical

[06:40] <sanug> s/doies/does/

[06:40] <audreyt> and I'd like to work with p5p people to make sure that they are documented, supported, and mabye even made into core.

[06:40] <audreyt> sanug: ok. the magick is simple and explained in http://search.cpan.org/dist/v6-pugs/lib/v6.pm

[06:40] * TimToady notes that it's 2:40am where Audrey is having her little slumber party...

[06:40] <lambdabot> Title: "v6-pugs - an experimental Perl 6 implementation - search.cpan.org"

[06:41] <audreyt> true...

[06:41] <audreyt> sanug: basically, when perl5 sees "use v6" it's an error

[06:41] <audreyt> "use v6 -pugs" is an error

[06:41] <audreyt>  "use v6 -alpha" too

[06:41] <audreyt> but when it sees "use v6-alpha"

[06:41] <audreyt> then it magickally loads v6.pm with -alpha as the import list.

[06:42] <audreyt> v6.pm then uses Module::Compile to precompile the module that invoked it -- say it was Rosetta.pm

[06:42] <audreyt> parse it using Pugs::Grammar::Perl6

[06:42] <audreyt> emit it with Pugs::Emitter::Perl6::Perl5

[06:42] <audreyt> and save the emitted Perl 5 code into Rosetta.pmc

[06:42] <audreyt> so that the next time around, "use Rosetta" will simply pick up the .pmc.

[06:42] <audreyt> end of explanation. see Module::Compile docs for more info.

[06:43] * xerox blinkes at chosen names ;)

[06:43] <sanug> Ok so I think this would be not 1 but several slides

[06:43] <sanug> So that the magic is shown one hand wave at a time.

[06:43] <sanug> and then the result is that perl5 is again there when you are done.

[06:43] <audreyt> yes. we collapse one hand wave form at a time

[06:43] <audreyt> yup.

[06:44] <sanug> Then Perl 6 disappears into Perl 5.

[06:44] <sanug> pmc

[06:44] <audreyt> yup.

[06:44] <sanug> And the Objects - can they be collapsed too?

[06:45] <audreyt> yes.

[06:45] <sanug> Stevan talked about optimizations to pare down the 15x - 30x performance hit of the dynamic side.

[06:45] <audreyt> oh, he finished that and released it today as the new Class::MOP.

[06:45] <audreyt> it's now as fast as handwritten code.

[06:45] <sanug> Would like to show those optimizations.

[06:46] <audreyt> but you have to tell v6.pm to "optimize"

[06:46] <sanug> So that has to occur early...

[06:46] <audreyt> which is to say, you promise to close all the classes except those are declared open

[06:46] <audreyt> yeah, it has to happen before the .pmc is written.

[06:46] <sanug> So you can still have your cake and eat it too.

[06:47] <audreyt> yes.

[06:47] <audreyt> so, a Moose object consturcted from v6.pm

[06:47] <audreyt> is indistinguishable from a Moose object constructed using Mosoe idioms

[06:47] <audreyt> the idioms layer is where v6 and regular p5 meet

[06:48] <audreyt> in short, they become normal Perl5 objects.

[06:48] <audreyt> and Perl 6 methods and subs become normal Perl5 subs

[06:48] <audreyt> etc.

[06:48] <sanug> I will refer back to this tomorrow when i resume work.

[06:49] <audreyt> cool.

[06:49] <audreyt> ditto.

[06:49] <audreyt> thanks for the graffling work :)

[06:49] * audreyt waves goodnight &

[06:49] <sanug> I see value in public discussion.

[06:49] *** sanug left
[06:51] *** Aankhen`` joined
[06:56] *** putter joined
[06:57] <putter> ok, one attempted robbery later let's see if I can update mmd draft.  its very late, so i may just punt till tomorrow.

[06:57] <xerox> b/win 21

[06:57] <xerox> Ops.

[07:00] <svnbot6> r11238 | audreyt++ | * mmd-draft.txt - putter++ says he's going to edit it,

[07:00] <svnbot6> r11238 | audreyt++ |   so maybe I'll check in my local clarifications to the

[07:00] <svnbot6> r11238 | audreyt++ |   spoiler-seppuku paragaph in first... :-)

[07:12] *** rashakil_ joined
[07:13] *** scook0 joined
[07:19] *** drrho joined
[07:31] *** sanug_ joined
[07:48] *** kane_ joined
[07:54] *** putter joined
[07:54] <putter> audreyt: sigh :)

[07:58] <TreyHarris> guess i didn't read this right.  anyone know how to suppress :todo tests?  prove hits the first :todo and then fails the remaining tests without trying them

[07:59] *** elmex joined
[08:02] <putter> audreyt: I'm afraid my oh so very rough new draft changes story perspective to the meaning of a single signature.  so the whole paragraph you modified is gone.  sorry.  i'll clean up tomorrow.  middle of my night now.

[08:03] <putter> oh, and for clarity, I was the target, rather than the instigator, of the aforementioned attempted robbery.  just in case anyone was uncertain. ;)  walking home from 'thon (well, looping neighborhood in thought).  nothing like it has happened in many years.  sigh.

[08:04] <putter> TreyHarris: there is currently no mechanism but skip to, err, skip tests.  Todo is just a post-test, how should test failure/success be treated, annotation.

[08:05] <TreyHarris> putter: ack, I thought you were making some joke that went over my head.  i'm sorry to hear that!

[08:05] <TreyHarris> putter: huh, but with my prove at least, it prevents any later test from running.  how do i make it continue later tests?

[08:06] <putter> the inability to skip deadly tests is a pain when doing a new pugs backend, or complete pugs alternative.  the tests grew up with pugs, using evals, and commenting out, to deal with problematic ones.  but we dont have a more general mechanism to easily say "skip/eval this test when running under X".

[08:07] <TreyHarris> so if I add a test, I need to do so before the first :todo?

[08:07] <putter> I assume you are running the new p5 non-pugs version of p6?

[08:09] <putter> Or is the observation that normal prove is now broken.  There was fear of this in yesterday(?) removing the #!/usr/bin/pugs line from test files.  which the t/README file said were helpful to Test::Harness and prove.  Have we just hit this problem.

[08:09] <TreyHarris> eh?  no.  i'm running "HARNESS_PERL=/usr/bin/pugs prove -v t/data_types/array.t"

[08:10] <putter> try adding #!/usr/bin/pugs to the top of your array.t, and see if it works again.

[08:11] *** penk joined
[08:11] <svnbot6> r11239 | audreyt++ | * Squash warning for Pugs::Grammar::Perl6's invalid syntax error

[08:12] <pasteling> "TreyHarris" at 207.171.180.101 pasted "prove failure after first :todo" (24 lines, 1.1K) at http://sial.org/pbot/18254

[08:13] <TreyHarris> putter: that's what I'm getting ^^^^

[08:16] *** ajs_ joined
[08:16] <TreyHarris> (that's after inserting the shebang line)

[08:20] <svnbot6> r11240 | audreyt++ | * Pugs::Emitter::Perl6::Perl5 - more warnings squash.

[08:20] <svnbot6> r11241 | audreyt++ | * v6.pm - change "v6-pugs" to "v6-alpha" in distname and docs.

[08:20] <svnbot6> r11242 | putter++ | mmd-draft.txt: Describes new modified algorithm.  Also altered the approach taken by the spec (now more local, "what it means for my signature here", and less global/algorithmic).  Might need separate "reference implementation" section.  Or maybe not, if the rest ends up clear enough.  Currently very rough - cleanup in morning.  Back to zeroth-draft status.

[08:20] *** elmex_ joined
[08:21] <svnbot6> r11243 | audreyt++ | * This be v6-alpha, version 0.006.

[08:21] <putter> TreyHarris: I'm sorry, I really need to call it a night at this point.  With everything I said I would do now done.  I will look at it in the morning (t+sigh 3 hours.  maybe I'll push it back a bit).  It is something which needs to be explored, and I appreciate your pursuing it.  thanks...

[08:21] <putter> good night all &

[08:22] *** froh-doh joined
[08:30] <unobe> audreyt: i installed ghc-6.5, did svn up, and now Data/YAML/Syck.hsc is barfing: Syck.hsc:180:8: Not in scope: `Buf.unsafeUseAsCStringLen'

[08:31] <unobe> ever run into that?

[08:34] <xinming> hmm, Is current pugs can be compiled with ghc 6.4.2?

[08:34] *** pmurias joined
[08:35] *** pmurias left
[08:37] <unobe> xinming: the 6.2.12 release tarball i compiled with ghc 6.4.2, but hadn't yet tried it on svn

[08:38] <xinming> /usr/bin/ar: creating dist/build/libHSPugs-6.2.12.a

[08:38] <xinming> *** Wasn't able to find 'Parrot_stub.o', aborting..

[08:45] <unobe> xinming: i've switched to ghc-6.4.2 and am trying to build it

[08:45] <xinming> unobe++

[08:55] *** Aankhen`` joined
[09:05] <xinming> unobe: can you build it?

[09:09] *** cognominal joined
[09:09] <unobe> nope, but it's not the problems you're running into

[09:09] <unobe> parsec isn't being found even tho' configure finds it

[09:09] <unobe> still working on it

[09:19] <unobe> mental note: don't forget to re-symlink ghc-pkg when going back to ghc-6.4.2

[09:19] <unobe> xinming: are you compiling with PUGS_EMBED="perl5 parrot"?

[09:19] <xinming> unobe: yes...

[09:20] <unobe> oh, okay. i was told a bit ago that it's unstable, so i've been building only with perl5.

[09:21] <unobe> i'll re-build parrot and try with PUGS_EMBED="perl5 parrot" tho' to see if I can get what you're getting

[09:23] <xinming> unobe: I just have ghc-6.4.2 installed. and I didn't tried ghc-6.5.x series...

[09:29] *** renormalist joined
[09:34] <unobe> xinming: it's building fine so far. is the error near the end of the build?

[09:34] <xinming> Skipping  Pugs.CodeGen     ( src/Pugs/CodeGen.hs, dist/build/Pugs/CodeGen.o )

[09:34] <xinming> Skipping  Pugs.Help        ( src/Pugs/Help.hs, dist/build/Pugs/Help.o )

[09:34] <xinming> Skipping  Pugs             ( src/Pugs.hs, dist/build/Pugs.o )

[09:34] <xinming> /usr/bin/ar: creating dist/build/libHSPugs-6.2.12.a

[09:34] <xinming> *** Wasn't able to find 'Parrot_stub.o', aborting...

[09:34] <xinming> make: *** [pugs] Error 9

[09:35] <unobe> ok

[09:35] <unobe> right at the end

[09:36] <unobe> when was the last time you updated parrot?

[09:41] <unobe> xinming: did you see this? http://xrl.us/oe3v

[09:41] <lambdabot> Title: "#perl6 2006-07-06,Thu"

[09:41] <unobe> maybe that has something to do with it...

[10:05] <unobe> xinming: built fine for me.

[10:05] <unobe> have you tried updating your parrot to the latest in subversion?

[10:06] <xinming> unobe: Yes, It's the latest...

[10:06] <xinming> both parrot and pugs are latest...

[10:06] <xinming> strange... :-/

[10:07] *** Debolaz joined
[10:10] <xinming> unobe: what's your perl version?

[10:10] <xinming> don't know if it's perl's problem,  I'm using gentoo, and perl version is 5.8.7

[10:14] *** joples joined
[10:24] <unobe> oh, i'm on os x 5.8.6

[10:40] *** lollan joined
[10:42] *** ludan joined
[10:42] <ludan> hi

[10:55] *** theorbtwo joined
[11:12] <rafl> geoffb: I am still doing this. The next upload will happen in some days, as soon as the latest hs-plugins package is in unstable.

[11:13] <rafl> geoffb: Which will probably be tomorrow.

[11:27] *** elmex joined
[11:37] *** Odin-LAP joined
[11:43] *** chris2 joined
[11:47] *** kanru joined
[12:03] *** bpphillips joined
[12:03] *** bpphillips left
[12:03] *** bpphillips joined
[12:33] *** shachaf joined
[12:38] *** datasieve joined
[12:42] *** iblechbot joined
[12:48] *** Limbic_Region joined
[13:02] <Limbic_Region> audreyt ping

[13:03] *** elmex joined
[13:04] *** xdg joined
[13:06] *** thepler joined
[13:09] *** lollan joined
[13:23] *** xdg joined
[13:23] *** vel joined
[13:23] <Limbic_Region> seen audreyt

[13:23] <jabbot> Limbic_Region: audreyt was seen 6 hours 34 minutes 24 seconds ago

[13:33] <meppl> guten morgen

[13:41] *** hexmode joined
[13:44] *** shachaf joined
[13:45] *** frederico joined
[13:55] *** rzoz joined
[14:03] *** buetow joined
[14:05] *** justatheory joined
[14:22] *** elmex joined
[14:23] *** elmex joined
[14:23] *** prefiks joined
[14:32] <geoffb> rafl, cool, thanks.  there are times when I just want to apt-get and see how things are going, rather than try to get source trees and build tools up to date after some months ...

[14:38] *** snowstalker joined
[15:03] <szbalint> hm. When building pugs, make runs fine, but when trying to make install:

[15:03] <szbalint> Cannot import `Data.ByteString': it was found in multiple packages: pugs-fps-0.7 fps-0.7 (imported from src/Pugs/AST/Internals/Instances.hs)

[15:04] <szbalint> I think putter had this problem last night, but I can't find how he solved it...

[15:04] <rafl> geoffb: Of course.. I just couldn't update pugs for a while because of various issues with the build system, which now seem to be fixed.

[15:04] <rafl> szbalint: You can hide your local fps.

[15:04] <rafl> szbalint: ghc-pkg hide fps-0.7

[15:05] <audreyt> ghc-pkg unregister --user fps

[15:06] <geoffb> rafl, ah, I get it.

[15:06] <Limbic_Region> audreyt - when/if you feel like working the Win32 build failure - I am a willing guinea pig

[15:06] <rafl> geoffb: At least parrot is pretty much up to date in Debian these days.

[15:06] <szbalint> thanks audreyt. rafl: that didn't work, it said: ghc-pkg: cannot find package fps-0.7

[15:06] <audreyt> Limbic_Region: I think it may be already fixed.

[15:07] <szbalint> seems to build now though.

[15:07] <audreyt> szbalint: did you add the -user?

[15:07] <Limbic_Region> as of when?

[15:07] <geoffb> rafl, cool -- will HEAD pugs build against Debian parrot?

[15:07] <Limbic_Region> I tried it a few hours ago and still b0rk

[15:07] <audreyt> oh ok. same error?

[15:07] <Limbic_Region> I think so,

[15:07] <particle_> hrmm, the 'ghc-pkg unregister fps' incantation gets me to 'could not find module Data.Yaml.Syck'

[15:07] <audreyt> ok. give me the complete nopaste again?

[15:07] <Limbic_Region> let me nmake realclean (which is also still b0rk), svn up, and try again

[15:07] <Limbic_Region> will nopaste in a few

[15:08] <audreyt> particle_: have you rerun Makefile.PL ?

[15:08] <particle_> i'll follow l_r's lead and update working copy

[15:08] <audreyt> k.

[15:08] <audreyt> rafl: seems "make install" needs to be updated to carry over the packageconf

[15:09] <geoffb> rafl, OT Debian question: Why sometimes do packages get pulled from testing, while existing in both stable and unstable?  This happened to PDL for a while a few months ago.

[15:09] <szbalint> audreyt: yes, its working now, the comamnd you gave fixed it.

[15:09] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "'nmake realclean' failure on Win32 (not entire output)" (197 lines, 15.8K) at http://sial.org/pbot/18260

[15:10] <Limbic_Region> ok - that's the nmake realclean failure - will post the nmake failure RSN

[15:11] <Limbic_Region> audreyt - fwiw, this is with gcc-lib NOT in pugs root

[15:12] <Limbic_Region> since gcc-lib is not part of PATH, not sure how one would go about fixing find_path anyway

[15:14] <xinming> audreyt: pugs doesn't compile here, with ghc 6.4.2, svn pugs, and svn parrot

[15:16] <audreyt> xinming: compile without parrotembed and it should work.

[15:17] <audreyt> xinming: it looks like maybe you had an incrementally work

[15:17] <audreyt> s/work/build/

[15:17] <audreyt> one with PUGS_EMBED=parrot and one without

[15:17] <audreyt> and they clashed

[15:17] <audreyt> rm -rf dist/build ; perl Makefile.PL ; make

[15:17] <audreyt> should work

[15:19] <xinming> hmm, I didn't touch the %ENV<PUGS_EMBED>, and also, pugs is newly checked-out...

[15:20] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "nmake failures on Win32 (entire paste of perl Makefile.PL and nmake)" (515 lines, 26.4K) at http://sial.org/pbot/18261

[15:20] <Limbic_Region> audreyt - there you go

[15:20] <Limbic_Region> if you would like, I can confirm that copying the gcc-lib back into pugs root works around the failure?

[15:21] <audreyt> k

[15:21] <audreyt> xinming: well, but without PUGS_EMBED=parrot, pugs will not attempt to load Parrot_stub.

[15:21] <audreyt> o

[15:24] <xinming> audreyt: can't pugs be built with parrot embed?

[15:25] <audreyt> xinming: it can, but the problem is that the pugs_embed flag has to be consistant

[15:25] <audreyt> if you run makefile.pl once with embed

[15:25] <audreyt> then make

[15:25] <audreyt> then change some file via svn up

[15:25] <audreyt> then run makefile.pl again without embed

[15:25] <audreyt> then make

[15:25] <audreyt> then you end up with the error you are seeing

[15:27] <gaal> audreyt: coffeeeeeeee

[15:28] <Limbic_Region> audreyt - out of curiosity, do you know why Pugs suddenly started to need to know where gcc-lib is when it never needed to in the past and would the fact that I have mingw/msys installed be screwing with things?

[15:29] * Limbic_Region was thinking something along the lines of probling $ENV{PATH} for ld.exe - if found but not with GHC delete 

[15:30] <Limbic_Region> this of course is subject to breakage of the unexpected and hard-to-track variety

[15:31] <particle_> i seem to be compiling fine now after up and realclean

[15:31] <particle_> ghc-6.4.1 on win32

[15:31] * Limbic_Region is using ghc-6.4.2

[15:31] <Limbic_Region> can you nopaste your PATH somewhere for me?

[15:33] <particle_> after compile finishes, sure

[15:33] <particle_> btw i'm not using msys

[15:34] <particle_> hrmm, heap exhausted

[15:34] <pasteling> "particle_" at 144.81.84.166 pasted "win32 path for l_r" (11 lines, 850B) at http://sial.org/pbot/18262

[15:46] <Limbic_Region> yep - me too (heap that is)

[15:47] <Limbic_Region> particle - is there an ld.exe in your path anywhere?

[15:48] <particle_> no

[15:49] <particle_> i just restarted nmake after the heap problem, worked fine

[15:49] <particle_> finished to completion, that is

[15:49] <particle_> now running 'nmake test'

[15:50] <particle_> interestingly, 'nmake test' semms to be recompiling pugs :(

[15:50] <particle_> ah, i see why

[15:51] <particle_> d:\usr\local\ghc\ghc-6.4.1\bin\ar.exe: creating dist\build\libHSPugs-6.2.12.a

[15:51] <particle_> ghc.exe: file `s' does not exist

[15:51] * Limbic_Region is still catching up with you (second nmake after heap blowup)

[15:52] <Limbic_Region> though I needed to copy gcc-lib from GHC into pugs root

[15:52] *** ruoso joined
[15:59] <rafl> geoffb: I don't quite get the problem. What distribution are you running?

[16:00] <rafl> geoffb: Yes, HEAD pugs builds against debian parrot.

[16:00] <szbalint> wth

[16:00] <rafl> audreyt: Why? I thought the haskell lib isn't installed anyway at the moment?

[16:01] <szbalint> audreyt: I think perl5 broke or my build is totally whacky

[16:01] <Limbic_Region> audreyt - aside from having to run nmake twice (ran out of heap), compiling on Win32 works fine if I copy \gat\ghc\gcc-lib to \gat\pugs

[16:01] <szbalint> (I was about to test your changes)

[16:02] *** vel joined
[16:03] <szbalint> exception handling passes, but array.t, class.t, etc does not.

[16:03] <szbalint> *** No such method in class Array: "&array" at array.t line 60, column 1-30

[16:05] <audreyt> wow, for real?

[16:05] <audreyt> retesting.

[16:06] <audreyt> rafl: but people still see errors for some reason

[16:06] <audreyt> rafl: and it should be made installable too

[16:09] <rafl> audreyt: Any idea where those problems come from? I don't see how they could be related to make install.

[16:10] <audreyt> rafl: hm. maybe it was "make register"

[16:10] <audreyt> which does copy+register still

[16:14] <rafl> audreyt: Right. paths need to be changed from the build dir to the install dir. I'll look into that either later today (where I unfortunately won't have net access) or tomorrow.

[16:14] *** amnesiac_ joined
[16:15] *** amnesiac_ is now known as amnesiac

[16:15] <Juerd> Limbic_Region: nack, I'm on vacation

[16:16] <audreyt> rafl: cool, thanks!

[16:17] <audreyt> szbalint: duplicated. fixing

[16:17] <Limbic_Region> Juerd - ok, just wanted to let you know in addition to the hardcoding of channel/network - the ability to use the plus symbol is also gone too

[16:17] * Limbic_Region can't karma anyone

[16:18] <audreyt> szbalint: fixed

[16:18] <audreyt> it's an offbyone

[16:18] <szbalint> audreyt: okay, thanks!

[16:19] <Juerd> Limbic_Region: That sucks. Sorry.

[16:19] <Juerd> My internet connecton has over 3000 ms lag, so I can't resonably vim anything.

[16:19] <Juerd> Especially not such complex spaghetti code

[16:19] <SamB> ed(1)!

[16:20] <Juerd> SamB: Lack of overview

[16:20] <Juerd> I've already used ed today a few times for config files.

[16:20] <SamB> just kidding, mostly

[16:20] <Juerd> It's great. But useless for CGI:IRC

[16:20] <Limbic_Region> Juerd - no worries, just letting you know

[16:20] <Limbic_Region> audreyt - I am headed off to lunch but if you think of anything /msg me and I will try when I get back

[16:20] <Juerd> I feel sorry for upgrading CGI:IRC withuot remembering the custom changes

[16:22] <audreyt> Limbic_Region: ok.

[16:23] <audreyt> Limbic_Region: also, I mised your wife's comment yesterday; that was sweet of her :)

[16:27] *** guaumiau joined
[16:35] *** pmurias_ joined
[16:35] <pmurias_> seen chromatic

[16:35] <jabbot> pmurias_: chromatic was seen 147 days 17 hours 22 minutes 5 seconds ago

[16:35] <pmurias_> a long time ago...

[16:37] <szbalint> Feb 9th. Indeed.

[16:39] *** jkanter joined
[16:41] <audreyt> szbalint: fixed

[16:45] <svnbot6> r11244 | audreyt++ | * Repair Perl5 embed; was an off-by-one error.

[16:45] <szbalint> audreyt++

[16:45] <szbalint> :)

[16:46] *** shadowhawk_pl joined
[16:46] *** elmex joined
[16:46] * Limbic_Region returns from lunch and decides that his achey body is a sign that he is or is soon to be under the weather

[16:49] *** putter joined
[16:51] <putter> Hmm.  So an airline passenger can simultaneously be over the weather and under it.

[16:51] <putter> No doubt old news, but, I have a build.  Yay.

[16:51] <audreyt> yay.

[16:52] *** pmurias joined
[16:52] <audreyt> putter: I like the new story of mmd-draft

[16:53] <putter> :)

[16:53] <audreyt> the last paragraph needs work

[16:53] <putter> oh yes

[16:53] <audreyt> otherwise I'd say it exceeds the average clarity level of Synopses

[16:53] <pmurias> does anyone now anything of chromatics parrot in perl5 embbeding?

[16:53] <audreyt> pmurias: no. write him?

[16:54] <putter> ok, that made me pause frozen for a good 3 secs.  yipes.  re exceeds.  ;)

[16:54] <particle_> pmurias: yes, he started it in chicago last week

[16:55] <pmurias> audreyt: wrote to him eariler today

[16:55] <particle_> it's not yet been checked into the parrot repo

[16:55] <putter> audreyt: but ok, I'll try to remember not to over wordsmith it/

[16:55] <audreyt> cool :)

[16:57] <pmurias> particle: do you know what technology is he using, or how much progress did he make?

[16:57] <particle_> i believe he's using p5nci

[16:58] <pmurias> i tried doing the same thing before with Inline::C, that's why i'm intrested

[16:59] <particle_> i think he's got strings going back and forth

[16:59] <pmurias> i got pmc and numbers

[16:59] <audreyt> gaal: http://search.cpan.org/dist/Proc-ParallelLoop/

[16:59] <lambdabot> Title: "Byron Darrah / Proc-ParallelLoop - search.cpan.org"

[16:59] <putter> some items from my "open conceptual issues" todo list include at the moment "how does the new constraint distance metric interact with type compatibility paths which contain implicit conversions", and "think of motivating story which spinclad buys, for why two different role param types need to be comparable".

[17:00] <geoffb> rafl, re: the OT Debian question: I tend to install new Debian boxes every few months, and I always use testing (to get hardware support, etc., without bleeding).  However, I sometimes find a common package like PDL is just plain missing from testing; it exists in oldstable, stable, and unstable, but not testing -- and there's a note in the developer package info page that it was pulled by some automated system.  I was wondering why this silliness happens,

[17:00] <geoffb> since I had the ear of a DD.  :-)

[17:01] <geoffb> It's almost like an RC bug was found, but instead of reverting to a previous version, the package is removed from testing entirely!

[17:02] <putter> P-PL - neat.

[17:03] <Limbic_Region> audreyt - if you can explain to me why Pugs needs to specifically call something in gcc-lib (assuming it is ld.exe) where this never seemed to be an issue before, I can work on a sane fix

[17:04] *** shachaf joined
[17:08] <rafl> geoffb: http://packages.debian.org/cgi-bin/search_packages.pl?searchon=names&version=all&exact=1&keywords=pdl

[17:08] <lambdabot> Title: "Debian -- Debian Package Search Results"

[17:09] <audreyt> Limbic_Region: I cannot, I don't know :)

[17:09] <rafl> geoffb: pdl obviously is in testing.

[17:09] <audreyt> Limbic_Region: I suspect it's hardcoded in GHC-win32 somehow.

[17:09] <geoffb> rafl, that was an example I fell over a few months ago

[17:09] <geoffb> rafl, sorry for the confusion

[17:09] <geoffb> Hmm, I wonder if I can find a recent one that did that

[17:09] <rafl> geoffb: Maybe it has been removed from testing in the past because it was RC buggy and the maintainer nor an other developer fixed it for quite a while.

[17:10] <rafl> geoffb: That's done to keep the rc candidate bug-free as the next release is quite near :-)

[17:10] <geoffb> rafl, why would it not just be replaced with the version from stable?

[17:10] <geoffb> hmmm

[17:10] <geoffb> painful, though.

[17:11] <geoffb> Ah, here's a more recent example:  http://packages.qa.debian.org/n/nvidia-graphics-drivers.html

[17:11] <lambdabot> Title: "Overview of nvidia-graphics-drivers source package"

[17:11] <rafl> geoffb: Because a) it's not said that the given RC bug which caused the removal doesn't exist in stable and b) It's not guaranteed that the older package from stable would work in a testing environment.

[17:12] <geoffb> rafl, OK, that's fair enough.

[17:12] *** penk joined
[17:12] <rafl> geoffb: However, I generally don't recommend using testing. For me it caused much more trouble than using sid.

[17:12] <Limbic_Region> audreyt - let me try again.  gcc runs fine as is, and pugs did as well until very recently, do you know what changed to make it break (and if not, should I do a binary revert search until I find the checkin that caused the problem)?

[17:13] <geoffb> rafl, really?  I've heard so many horror stories of "dear god, don't dist-upgrade today, Perl / X / etc. is in pieces on the floor"

[17:13] <Limbic_Region> btw - how do I revert with svn anyway?

[17:13] <geoffb> That's why I've never run one of my main boxes on sid

[17:13] <rafl> geoffb: Of course sid breaks much more often, but those things are pretty easy to fix most of the time, whereas testing b0rkage might be more troublesome.

[17:14] <geoffb> rafl, nod

[17:14] <rafl> geoffb: If things are too fucked to sort them out manually or when I just don't have the time to do so I just downgrade the package and hold it until it's either fixed or I find the time to fix it.

[17:14] <geoffb> rafl, is there a defined place to look for daily sid horrors before doing my regular dist-upgrade?

[17:15] <audreyt> Limbic_Region: yes, it's rafl's change that makes it look at ../../util/runcompiler instead of  ghc

[17:15] <audreyt> not sure which rev

[17:15] <audreyt> (and I'll bbiab)

[17:15] <Limbic_Region> k

[17:15] <rafl> geoffb: I know a wiki of a german comunity and I think there's something on wiki.d.o as well.

[17:16] * Limbic_Region starts pestering rafl then

[17:16] <geoffb> rafl, hmmm, OK, I'll go look at wiki.d.o

[17:17] <Limbic_Region> rafl - what exactly is util/runcompiler and why is it being used instead of GHC?

[17:17] <geoffb> rafl, looks like http://wiki.debian.org/Status/Unstable is what you were referring to.  Thanks!

[17:17] <lambdabot> Title: "Status/Unstable - Debian Wiki"

[17:19] <Limbic_Region> actually - I bet I can think of a silly workaround

[17:20] <Limbic_Region> invoke runcompiler from the same directory as ghc.exe instead of from util/

[17:21] <geoffb> rafl, back to on topic questions: Will you be packaging v6.pm for Debian?

[17:21] * Limbic_Region waits for rafl before doing anything whacky

[17:27] <svnbot6> r11245 | gaal++ | * set svn:ignore flag on autodownloaded files

[17:28] <particle_> is '...' listop, or term?

[17:28] <particle_> (same for ??? and !!!)

[17:29] <particle_> S03 mentions '...' in listops (precedence table,) but i'm not sure that's right

[17:32] *** Debolaz2 joined
[17:33] <putter> re genders: on mozart-oz list: "One of my programs starts a lot of OS processes [...] However, at one point I get [error] when he tries to select the variable. "  I saw a fun paper go by which compared how views of... keys and bridges (?), were distorted^H influenced by two languages making alternate choices on their genders.

[17:33] <putter> The "he" is very startling for an english reader.

[17:34] <putter> german email addr

[17:37] <audreyt> particle_: my copy of S03 doesn't say that

[17:37] <audreyt> I think it should be term.

[17:37] <audreyt> instead of listop

[17:38] <audreyt> otoh, listop would work equally

[17:38] <putter> is there some wacky way to give them error messages?

[17:38] <audreyt> nvm, I think it's listop :)

[17:39] *** bernhard joined
[17:39] *** TimToady joined
[17:40] <particle_> dev.perl.org's S03 has list ops as C<' print push any all '...' etc.>

[17:41] <particle_> okay, i'll add it to parrot/perl6's opp then

[17:41] *** fglock joined
[17:43] <audreyt> there is also !!! and ???

[17:43] <audreyt> fglock: hi!

[17:43] <fglock> hi!

[17:44] <audreyt> thinking about doing T-shirts with "Perl 6 is just a CPAN module"

[17:44] <fglock> nice! with a big "v6.pm"?

[17:44] <audreyt> yup.

[17:44] <audreyt> got a "probably wise" comment from matt sergent

[17:44] <particle_> Perl6: JACM

[17:44] <audreyt> # http://use.perl.org/comments.pl?sid=32005&op=&threshold=0&commentsort=0&mode=nested&cid=48530

[17:45] <lambdabot> Title: "make perl faster?"

[17:45] <audreyt> er, "probably very wise"

[17:46] <putter> spinclad: how about something this: "any type can of course be viewed as a predicate on objects.  but roles, by virtue of (one of?) their defining property of being folded into classes, and only existing by virtue of such use, look more like predicates on _classes_, and only indirectly like predicates on non-class objects. so

[17:46] <xinming> audreyt: error still exists...

[17:46] <xinming> I just now failed again...

[17:47] <fglock> what's a "Blue Peter"?

[17:47] <putter> ... and that story doesn't work. :/  else :(OrthognonalRole1) couldnt be trumped by :(OrthognonalRole1 OrthogonalRole2).  sigh.

[17:47] <audreyt> xinming: if you comment out line 172 from utils/build_pugs.pl

[17:47] <audreyt> and hit "make" again

[17:47] <audreyt> does that work?

[17:47] <xinming> ok, I'll try

[17:48] <xinming> pass.... :-)

[17:49] <audreyt> putter: "if one side is a strict but smaller subset of another side, that side loses. otherwise, discard Role cards, and both side loses if they are not subset of each other"

[17:49] <audreyt> xinming: you sure your ENV has no PUGS_EMBED?

[17:49] <audreyt> perl -e "print $ENV{PUGS_EMBED}"

[17:49] <audreyt> I need to run

[17:49] <audreyt> bbiab

[17:49] <xinming> I'm using ghc-6.4.2 and I don't know if ghc is installed in /opt matter..

[17:50] <audreyt> no... that shoulfd not matter at all...

[17:50] <audreyt> it's that -DPUGS_HAS_PARROT is somehow in your Makefile

[17:50] <audreyt> trace Makefile.PL and see why it got there if neccessary

[17:50] <audreyt> lunch &

[17:52] *** nothingmuch_ joined
[17:58] <spinclad> putter, audreyt: have some thoughts which for exiguity won't fit this channel, will discuss over high-bandwidth channels when i arrive

[17:58] <spinclad> basically simpler counter-story and algorithm wrt roles; but i need to read your latest thoughts on my way out the door.

[18:03] <putter> looking forward to it

[18:05] <putter> so the card algo just mentioned seems equiv to "params with only roles are a worse fit than any param mentioning a non-Any class; params with only roles are only comparable to each other if a improper subset relation exists, in which case the largest list wins".  hmm.

[18:09] <putter> backing up, we've talked about the desirability of being able to switch between is and does without altering dispatch.  is there a similar desire re roles and subtypes?  (hmm, though from that, I guess, by transitivity, re classes and subtypes, which seems to go against the old hierarchical distance concept).

[18:13] <spinclad> "Chosen|spoiler = alive.":  "Contender | spoiler = alive."

[18:14] <putter> ah, tnx

[18:14] <fglock> what's the command to create/update META.yml automatically?

[18:15] <spinclad> s/sepecu/sepukku/

[18:16] <kolibrie> make dist ?

[18:16] <putter> re implicit conversion and cards, perhaps the card story fall back to "if this zero implicit conversion case fails, then we compare implicit conversion distances.  if different, smaller wins.  if same, then.... something."

[18:16] <fglock> kolibrie: it doesn't work in Pugs-Compiler-Rule/

[18:16] <kolibrie> :(

[18:16] <fglock> bbiab &

[18:17] <putter> fglock: dont know, sorry

[18:18] <ingy> morning!

[18:18] <spinclad> morning ingy!

[18:18] * spinclad heads out  &

[18:19] <ingy> hi spinclad++

[18:21] <putter> for anyone who is wondering what is going on, the objective is to find a plausible multi method/sub dispatch algorithm.  it has three parts.  an ignoring of any variants which are not compatible with the call.  that we understand.  a left to right way to combine the results of "which variant is best at just this position?" applications of some distance metric.  that we are starting to get a grip on.  and finally,

[18:22] <putter> a distance metric.  that we are still wandering about, trying to find something with nice properties.

[18:22] <gaal> audreyt: with variant records... data MutObject = MkObject {} | MkForeign{} | MkPrototype{} should be made more qualified

[18:22] <putter> indeed, still trying to picture what nice properties are.

[18:22] <gaal> MkObject??? | MkObjectForeign | MkObjectPrototype is a little long-winded

[18:23] <audreyt> ObjectInstance{...} | ObjectForeign{...} | ObjectPrototype

[18:23] <audreyt> don't use Mk on variants

[18:23] <audreyt> only use Mk for data/newtype with one con

[18:23] <gaal> ah, oka

[18:23] <gaal> y

[18:23] <audreyt> also, shorten to Obj perhaps

[18:23] <gaal> yeah

[18:23] <audreyt> things have wellknown 3-letter shorthands should

[18:24] <audreyt> be shortened

[18:24] <gaal> sure, like Sig

[18:24] <gaal> (not a record type, but still)

[18:25] <audreyt> k

[18:25] <kolibrie> gaal: what do you have your ghc_heap_size set to?  What is recommended compared to physical memory, etc.?

[18:25] <putter> it's sort of a three prong free for all.  ("here is a algorithm, lets see what properties it has and how to explain it", "here is a nice software engineering property, lets see what might implement it, and how to abstract it", "here is a description of what it means to do dispatch, lets look for an algo and explore properties").

[18:26] <gaal> kolibrie: for low mem machines, make sure it's a little less than available ram just before build time

[18:26] <kolibrie> gaal: okay

[18:26] <gaal> for ram-affluent machines, last time I checed 500m was a reasonable value

[18:27] <gaal> but then that was when making a Hs prelude (wow, a while ago!)

[18:27] <putter> though with a stabilizing thread of audrey maintaining a reference impl, and doing minimum required tweaks as new insights go by.

[18:27] <gaal> I managed to build pugs optimied with ~200m during the .il hackathon but you may need a little more nowadays

[18:28] <kolibrie> I'm swapping like crazy right now.  Can I kill, reset my heap size, then make again?

[18:28] <gaal> sure, but perl Makefile.PL before make

[18:29] <gaal> (config.yml changes always need a makefile rebuild)

[18:29] <kolibrie> oh, right, otherwise it won't see the change

[18:29] <gaal> (which makes me wonder if we should make Makefile depend on it...)

[18:29] <kolibrie> perhaps

[18:36] <kolibrie> seems to be much happier now

[18:39] <gaal> cool

[18:59] *** Aankh|Clone joined
[19:03] <TreyHarris> if someone could take a look at http://sial.org/pbot/18254 ... I'm trying to figure out why prove drops dead after the first :todo test and doesn't even attempt the rest

[19:03] <lambdabot> Title: "Paste #18254 from "TreyHarris" at 207.171.180.101"

[19:03] *** larsen joined
[19:10] *** mauke_ joined
[19:13] <putter> TreyHarris:  it works for me with r11243 (modulo adding -Iblib6/lib (or ../blib6/lib if in t dir), since I didnt precompile Test).

[19:14] <putter> and modulo using a non-installed pugs.

[19:14] <putter> are you using precompiled or compiled at this point?

[19:17] *** shachaf joined
[19:18] <putter> in the pugs build dir, r11243, this   HARNESS_PERL="`pwd`/pugs -Iblib6/lib" prove -v t/data_types/array.t   works for me.

[19:20] <putter> as for why it might be failing in the way yours is... I'm not sure.  sorry.

[19:24] <svnbot6> r11246 | gaal++ | * Pugs::Doc::Hack::Style - Haskell coding guidelines, starting with

[19:24] <svnbot6> r11246 | gaal++ |   a convention for rationalized, punfree data type naming.

[19:25] *** mauke_ is now known as mauke

[19:29] <putter> lol # re punfree

[19:30] <putter> thank you gaal :)

[19:31] <gaal> putter: :-)

[19:31] *** Aankh|Clone is now known as Aankhen``

[19:31] <particle_> moose!

[19:37] <gaal> moose

[19:37] <ajs_> moo

[19:42] <svnbot6> r11247 | gaal++ | * Style.pod - minor tweaks

[19:42] <gaal> http://kpm.monksofcool.org/images/innermoose.jpg

[19:44] <putter> :)

[19:47] <putter> hmm.  someone really has to do an animation of the o'reilly language animals, or other symbols where needed, walk into frame and get assimilated into perl creature in center.  perl1, perl2, perl3, perl4, perl5, perl6.

[19:47] <putter> all sorts of room for inside jokes in the assimilation process.

[19:51] <putter> a python looks on in disbelief, shakes its head and slithers off?

[19:52] *** rzoz_ joined
[19:54] <ajs_> Heh, I'd see it as the python slithering by... spots a small camel... consumes it, and starts to leave... twitches and morphs into a moose with a camel's hump, rubies for eyes and a python's tail... ;-)

[19:55] *** spinclad_ joined
[19:56] <ajs_> But speaking of python, has anyone here used twisted? I work with one of the primary folks involved, and it seems like a nice networking framework that would work even better in p6....

[19:57] * ajs_ thinks thoughts of a large p5/p6 project and cringes in fear and anticipation

[19:58] <integral> is twisted different from POE?

[19:58] <ajs_> Never toyed with POE

[19:58] *** cognominal joined
[19:59] <putter> ajs_: lol # morph

[20:01] <ajs_> I realy hate waiting for 10 minutes of tests to run just so I can type "perldoc The::Freaking::Module".... sigh

[20:02] <putter> ajs_: I've never used twisted for anything real, but my impression is a number of core design decisions had a flavor of "we really want to do x, but we can't with python, so we do y instead".  so I suspect one with twisted motivations would do things differently in p6.

[20:02] <ajs_> putter: interesting. I'll have to ask

[20:03] <particle_> ajs_: that's why there's google The::Freaking::Module

[20:04] <putter> hmm.  as soon as p6 is working a little better, I expect to see, well, at least if p6 doesnt get _too_ static, I expect to see a transliterating implementation of python on p6.  which raises a couple of questions.

[20:04] <putter> CPAN and python folks - what issues arise in trying to reduce the impedance mismatch?

[20:04] <PerlJam> putter: I didn't get that impression of twisted at all.

[20:04] <audreyt> putter: have you read Sam's piethon summary?

[20:05] <gaal> hmm, "data Routine SingleRoutine | MultiRoutine" or RoutineSingle | RoutineMulti ?

[20:05] <gaal> the latter is more consistent but the former more English

[20:05] <audreyt> gaal: RoutineSingle I think.

[20:05] <audreyt> Test::Simple

[20:05] <audreyt> instead of Simple::Test

[20:05] <gaal> okay, give consistency a chance

[20:05] <gaal> all we are saying...

[20:06] * particle_ ups the pun count

[20:06] * putter wonsers if he is confusing twisted with... oy... what is python's big vcs cum everthing?

[20:06] <putter> s/wonsers/wonders/  hmm, wonsers should be a word.

[20:07] <audreyt> tailor?

[20:07] <putter> audreyt:  re have read, don't know.  maybe not?

[20:07] <gaal> The Punner Counter clicks! --More-- You feel irradiated

[20:07] <PerlJam> twisted is roughly equivalent to stem (assuming I understand stem properly)

[20:07] <audreyt> putter: http://intertwingly.net/slides/2005/oscon/

[20:07] <lambdabot> Title: "OSCON: OSCon 2005"

[20:07] <putter> PerlJam: I could well be mistaken.

[20:08] <audreyt> the message seemed to be "Yes parrot may be faster than GCC, but only if you don't use PMCs; if you do, it becomes slower than python."

[20:08] <audreyt> but there's been a lot of work in the past year, so take those slides with sodium

[20:08] <putter> oh, the other question was just how to expose p6 capabilities present in python in a nice pythonish appearance.

[20:08] <putter> s/present/not present/

[20:08] <audreyt> but Sam talks about impedence mismatch too, a bit

[20:08] <audreyt> and the Parrot/HLL design aims to resolve that as well.

[20:09] <audreyt> see the namespace PDD

[20:09] <PerlJam> audreyt: Sam also didn't have TGE  :)

[20:09] * particle_ suggests the sodium be accompanied by chlorine, for health reasons

[20:09] <audreyt> PerlJam: piethon was about speed :)

[20:09] <audreyt> and TGE doesn't get you speed :)

[20:09] <audreyt> (or lack of. it's orthogonal)

[20:09] <PerlJam> well, that's true

[20:10] <putter> audreyt's sodium hits putters dilute thoughts, and boom

[20:10] * gaal looks for a good name for 'Map Ident Val'

[20:10] <audreyt> MIV

[20:11] <gaal> used in Stmt/s_pragmas, Param/p_slots, Code/c_traits

[20:11] <gaal> and ObjSlots is TVar that

[20:11] *** shachaf_ joined
[20:11] <gaal> these are somewhat different uses

[20:11] <audreyt> ValMap?

[20:11] <audreyt> Vappings?

[20:11] <gaal> putter: will you be moosing over?

[20:12] <audreyt> Malues?

[20:12] * audreyt can't think of something good

[20:12] <audreyt> well

[20:12] <particle_> as opposed to Mariable?

[20:12] <audreyt> in Lua it's called Table

[20:12] <putter> MapIndentVal until a better idea arises? ;)

[20:12] <audreyt> let's call it Table and confuse dduncan some more

[20:12] <putter> err, Ident

[20:12] <spinclad_> losing my marriables

[20:12] *** dduncan joined
[20:12] <audreyt> I think Table is good

[20:13] * gaal proposes Desk

[20:13] <putter> ok, I'll keep my eye out for them.

[20:13] <putter> maybe they will be attracted via similarity.

[20:13] <gaal> Nights of the Malue Desk

[20:13] <audreyt> Malloween

[20:14] <ajs_> To the question of exposing p6 (or any other language) to python through parrot, see my recent p6l comments. I think it's useful to start thinking in terms of the language-speicifc abstraction layers that will be needed, and in the case of restrictive languages like python, those will be LARGE layers.

[20:14] <spinclad_> eve of the martian mallows

[20:14] <putter> gaal: yes. re office.  I didn't want to join the circus until the folks who needed quiet had most of their day.

[20:14] <particle_> mmm... bone mallow

[20:14] <gaal> putter: they never showed up today, so come

[20:14] <gaal> I have to leave not-so-far-in-the-future

[20:15] <putter> gaal: ok, be over shortly

[20:15] * gaal wallops in puin

[20:15] * particle_ notices #perl6 is optimized for pun

[20:16] <audreyt> yes, which is why we target multiple puntime

[20:16] <putter> ajs_: different issue.  two versions of python.  directly on parrot.  and on perl6.  I personally expect the later to be more interesting, but that's not a universal view by any means.

[20:16] <ajs_> particle_: what do you meme?

[20:17] <audreyt> it's nice to see the channel rejoyce in pun

[20:17] <putter> p6 is basically mutable enough itself (hopefully), that it can be twisted into pythonness.  err, no pun intended.

[20:17] <putter> oy

[20:17] <gaal> now that AST.Internals is not sucking the pun out of everything it is free to flow rampunt.

[20:17] <spinclad_> but how will the pythoness feel about that

[20:17] <spinclad_> ?

[20:17] <ajs_> putter: no, I think there the same. Seeing python through p6/parrot is roughly the same problem (though potentially easier to solve) as seeing p6 through python/parrot. Both languages will need abstraction layers for each target langauge.

[20:18] <audreyt> instead of pie-thon we need a punthon

[20:18] <ajs_> If v6.pm isn't running by yesterday, I'll take a pun in the face!

[20:19] <audreyt> ajs++ # you win

[20:19] * gaal plays P&P

[20:19] * putter rests shaking head in hand, groans turning to laughter

[20:20] <audreyt> well, if TimToady is here this will get much worse...

[20:20] <putter> ajs_: no parrot need be involved.  python on p6 on p5.  python on p6 on haskell.  python on p6 on js.  whatever.

[20:20] <ajs_> spinclad_: pythoness doesn't have to feel. The language defines a set of semantics, and the (for sake of exaple) lang.parrot.perl6 module uses them as provided. Now, it might be ugly in some cases... but I think that's a second-order probolem

[20:20] <particle_> thank the maker for small favors :)

[20:21] <audreyt> yeah, we can live in relative piece until the supunman returns

[20:21] <audreyt> I mean, peace. (that's a typo, not a typun)

[20:21] <ajs_> If you're talking about using a python grammar in p6 on top of $runtime, then that's a different animal, true.

[20:22] * putter heads out for the hackathon.  it looks suspiciously like fleeing.

[20:22] * particle_ defleas putter

[20:22] <TimToady> not sure whether python will be our main squeeze...

[20:22] <particle_> *how embarassing*

[20:22] <audreyt> oh no the supunman returns

[20:23] <ajs_> putter: I guess your ship sailed in, since you're time here was fleeting....

[20:23] <TimToady> I just think of myself as a pundit...

[20:23] <ajs_> "<TimToady> not sure whether python will be our main squeeze..." That's going in a quotes file....

[20:24] <spinclad_> putter: you won't escape so easily.  out of the fleeingpan into the flier...

[20:24] <PerlJam> TimToady: is that because you often punt language issues into the future?

[20:24] <TimToady> I often shove off issues, but not usually in a punt.

[20:25] <particle_> this discussion might be described as punctuated equilibrium

[20:25] *** rzoz_ is now known as rzoz

[20:26] <TimToady> Holey acu-pun-cture, Batman!

[20:26] <PerlJam> particle_: or punishment.

[20:26] <audreyt> or just dyspunctional.

[20:26] <kolibrie> hmm, my build died with: *** Wasn't able to find 'Parrot_stub.o', aborting...

[20:27] <audreyt> kolibrie: hmm, you are the second one to report that

[20:27] <audreyt> kolibrie: did you build with PUGS_EMBED?

[20:27] <kolibrie> audreyt: yes

[20:27] <kolibrie> perl5 and parrot

[20:27] * particle_ builds with PUNS_EMBED

[20:27] <TimToady> sure it wasn't PUNS_EMBEDD

[20:27] <audreyt> trunk parrot?

[20:27] <TimToady> darn

[20:27] <ajs_> heh, beat me to it!

[20:27] <kolibrie> audreyt: yes

[20:27] <kolibrie> from this morning

[20:28] <gaal> drunken parrot

[20:28] <audreyt> kolibrie: try pugs r11248

[20:28] <TimToady> it's fjording for the pines...

[20:28] <audreyt> and see if it still run

[20:28] <kolibrie> audreyt: will do

[20:28] <svnbot6> r11248 | audreyt++ | * try to instrument Parrot_stub.o error

[20:29] <spinclad_> fjording the river in a borrowed punt

[20:29] * audreyt is punning for the fnords

[20:29] <TimToady> the punic wars fit audrey to a t

[20:29] <kolibrie> audreyt: just make, no realclean or anything?

[20:29] <audreyt> kolibrie: aye

[20:30] <spinclad_> audreyt: no, sorry, can't see em

[20:30] * kolibrie makes

[20:30] <PerlJam> perl6 is scrumdiddlypuntious.

[20:30] <particle_> this is war!

[20:30] * particle_ brings out the big puns

[20:31] <audreyt> hmm, "punning for the fnords" is a googlewhack.

[20:31] <PerlJam> particle_: make puns, not way.

[20:31] <PerlJam> er, war

[20:31] <TimToady> don't need big puns in a punic war...

[20:31] <ajs_> Good greif... I think I've been punt!

[20:31] <audreyt> indeed, you just have to port perl6 to punix

[20:31] <particle_> punning is half the battle

[20:32] <TimToady> punic("Can't win this one...")

[20:32] * gaal punts

[20:32] *** bpphillips left
[20:32] <ajs_> audreyt: Isn't that what punie is for?

[20:32] <particle_> this reminds me of a drinking game... where's nothingmuch?

[20:32] <audreyt> ajs_: yeah, it's a pun project

[20:33] <TimToady> nothingmuch already *won*, apparently...

[20:33] <particle_> patrick ports perl6 to parrot

[20:33] <spinclad_> took to the hills yesterday in a borrowed car

[20:33] <ajs_> audreyt: I bet, after all, it's pretty impuntant

[20:33] <TreyHarris> hrm, adding -Iblib6/lib doesn't help, I still get 'Undeclared variable: "$?CALLER::CALLER::SUBNAME" at blib/lib/Test.pm line 268, column 8-276' after I hit the first :todo test

[20:33] *** Daveman joined
[20:33] <TimToady> that boy has a 6th sense about impending, um, whatevers...

[20:34] <audreyt> ajs_: sure, that's for the  punrot-punters mailing list to decide

[20:34] <TimToady> *impunding

[20:34] <ajs_> audreyt: mercy!

[20:34] <particle_> puncle!

[20:34] <audreyt> TreyHarris: wait. that Test.pm is old

[20:34] <audreyt> TreyHarris: no Test.pm should say CALLER::CALLER::SUBNAME

[20:34] <TimToady> *rotevers

[20:35] <audreyt> TreyHarris: that is curious. it appears your ext/Test/ checkout is really old

[20:35] <audreyt> or somethiing.

[20:35] <audreyt> maybe try replacing it with http://search.cpan.org/src/AUTRIJUS/Perl6-Pugs-6.2.12/ext/Test/lib/Test.pm

[20:35] <audreyt> or just rm -rf blib/lib

[20:35] <audreyt> and try make again

[20:36] <gaal> audreyt: I don't see any Declarator enum in p6ast. did you add it w/o svk ci or push?

[20:36] <TimToady> [We now return you to the usual mindless drivel of this channel.]

[20:37] <gaal> #perl6: we drive you to drivel

[20:37] <audreyt> my our has state constant

[20:37] <audreyt> gaal: that's it

[20:37] *** aufrank joined
[20:37] <spinclad_> putter: s/sepukku/seppuku/  # my bad

[20:37] <TimToady> can I quote you?

[20:37] <PerlJam> seppunku?

[20:37] <spinclad_> sure, but where

[20:37] <audreyt> ?eval q[you]

[20:37] <evalbot_11168> "you"

[20:38] <ajs_> Is "is rw" part of the signature of a p6 sub?

[20:38] <audreyt> yes.

[20:38] <TimToady> only if you put it.

[20:38] <gaal> "My state has our constant ???"

[20:38] <ajs_> As is "sub foo() is rw {}"

[20:38] <audreyt> otherwise perl6 punt it.

[20:39] <audreyt> ajs_: conceptually a Sub holds two signatures; one for the incoming and one for the return

[20:39] <audreyt> gaal: that needs to be reflected in AST :)

[20:39] <kolibrie> audreyt: looks like r11248 worked.  Any expressions I should test before I run the smoke?

[20:39] <gaal> audreyt: does the enum derive Ord like SScope?

[20:39] <audreyt> ajs_: the "is rw" is saying that it returns something that conforms to :(Any is rw)

[20:39] <audreyt> gaal: sure, why not. also, add a return-sgnature to Code

[20:39] <gaal> vecause that's a little sick

[20:40] <ajs_> audreyt: Ok, so if I "multi sub foo() {}" and "multi sub foo() is rw {}" then "foo()=1" will do the right thing....

[20:40] <gaal> ah, good point about that

[20:40] <audreyt> kolibrie: ./pugs -e 'say 1 ~~ /(.)/'

[20:40] <TreyHarris> audreyt: yes, that's my problem.  since make takes forever, i've been trying to use a binary build to write tests in a source tree i compiled a long time ago, but have since updated

[20:40] <audreyt> ajs_: return value multidispatch, like named arg dispatch, is... well... unspecced.

[20:40] <TimToady> the syntax is specced.  :)

[20:40] <kolibrie> audreyt: 1

[20:41] <audreyt> the semantics not :)

[20:41] <ajs_> audreyt: hrm... ok, should I assume an implementation for my S29:splice update?

[20:41] <audreyt> but it's not required for 6.0.0 :)

[20:41] <audreyt> ajs_: don't assume that until Pugs 6.2831.0

[20:41] <spinclad_> a signature already has room for two signatures:  **In -> **Out  or something

[20:41] <particle_> trey: make unoptimized

[20:41] <ajs_> audreyt: Ok... then splice gets... interesting.

[20:42] <audreyt> spinclad_: -->

[20:42] <audreyt> it's actually chaining two Sig objects together

[20:42] <audreyt> not sure about currying

[20:43] <spinclad_> so is --> :: Sig -> Sig -> Sig ?

[20:43] *** monkey_ joined
[20:44] <TimToady> Perl is turning into Haskell.  Someone shoot me.

[20:44] <ajs_> TimToady: -- bang

[20:44] <audreyt> spinclad_: I think it's Sig->Sig->Constraint

[20:45] <TimToady> missed, haha!

[20:45] <szbalint> I wonder if it means that I should learn Haskell or that I should be very afraid. Or both. :)

[20:45] <audreyt> szbalint: both.

[20:45] <ajs_> TimToady: Of course, I missed... it was only a comment! The next one's loaded (and probably a continuation)!

[20:46] <spinclad_> definitely both.

[20:46] <TimToady> learn -> Haskell -> be -> very -> afraid

[20:46] <spinclad_> even TimToady starts to speak it

[20:46] <audreyt> @djinn learn -> haskell -> be -> very -> afraid

[20:46] <lambdabot> -- f cannot be realized.

[20:46] <audreyt> lol

[20:46] <TimToady> I just like the shiny arrows.

[20:47] <TimToady> I suspect they have a religious significance.

[20:47] <ajs_> TimToady: they represent apotheosis, I'm sure....

[20:48] <TimToady> metatheosis, surely, or para...

[20:48] <TimToady> could even argue ortho, I suppose.

[20:48] <spinclad_> they express the directionality of cognition

[20:48] <ajs_> TimToady: possibly apuntheosis....

[20:49] <TimToady> who? ↬  what? ↫ huh?

[20:49] <audreyt> it is the sign of Apuncalypse

[20:49] <TimToady> no, that v6.6.6

[20:50] <ajs_> We'll need a Punopsis to understand it!

[20:50] <spinclad_> our one secret weapon is redirection, and stealth

[20:50] <TreyHarris> stop, this is punishing.

[20:51] <audreyt> but first: repunt for your sins!

[20:51] <TimToady> how many angels can dance on the HEAD of a pun?

[20:52] <gaal> audreyt: again and again?

[20:52] <TimToady> "We never learn"  --a punticle for liebowitz

[20:53] * audreyt goes back to work on her confession and punance.

[20:55] * TimToady just works on his confusion and pennance.

[20:57] <ajs_> Ok, next stupid question: can you pass a slurpy by name? e.g. "sub foo($offset=0,*@slurp)" ... "foo(:@slurp)"

[20:57] <PerlJam> ajs_: wouldn't that kind of defeat the idea of slurpiness?

[20:57] <audreyt> ajs_: no.

[20:58] <szbalint> Isn't *%hash the slurpy for named params?

[20:58] <monkey_> :( for Devel::Caller failing to pass tests

[20:58] <ajs_> Hrm... I recall one of the things that Larry said about splice very early on was that in p6, we wouldn't have that silly "if you want to provide a replacement list, you have to pass all of the optional parameters" thing

[20:59] <ajs_> I don't see a way to accomplish that, given the current slurpy mechanism...

[20:59] <svnbot6> r11249 | gaal++ | * WIP AST code: naming convention updates

[20:59] <audreyt> monkey_: 0.10

[20:59] <audreyt> monkey_: maybe your cpan still carry 0.09?

[21:00] <TimToady> splice @foo, 10 <== @repl

[21:00] <audreyt> ajs_: positional args (and named) can come in multiple batches

[21:00] <monkey_> monkey_: it's 0.10 that is failing :(

[21:00] <audreyt> monkey_: nopaste the error?

[21:00] <audreyt> prove -lv t

[21:01] <monkey_> k, one sec

[21:01] <ajs_> TimToady: that's interesting. It kind of breaks the P5 mindset, but it does work... hmmm

[21:02] <PerlJam> ajs_: lots of things in perl6 "break the perl5 mindset"  :-)

[21:02] <ajs_> PerlJam: treu

[21:02] <szbalint> This reminds me

[21:02] <audreyt> "break all; break test; break install"

[21:02] <ajs_> or true, if you're not french ;)

[21:02] <szbalint> what is the current term for <== and ==> ?

[21:02] <PerlJam> szbalint: good question.  Still "pipe" AFAIK

[21:02] <audreyt> I call them "batches"

[21:02] <TimToady> it's in a quantum superposition between pipe and feed

[21:02] <audreyt> because "pipe" confuses me

[21:03] <ajs_> http://dev.perl.org/perl6/doc/design/syn/S03.html#___top

[21:03] <lambdabot> Title: "Synopsis 3: Summary of Perl 6 Operators -"

[21:03] *** ebvv joined
[21:03] <ajs_> "PIPING OPERATORS" is the section

[21:03] <audreyt> <== Atom <== RSS <== RDF

[21:03] <audreyt> so a function is an aggregator

[21:03] <PerlJam> "feed" makes me think of cattle

[21:03] <TimToady> good

[21:03] <audreyt> and *** is a portal

[21:03] <pasteling> "monkey_" at 87.81.40.22 pasted "Devel::Caller failing tests" (26 lines, 1K) at http://sial.org/pbot/18274

[21:03] <pasteling> "TreyHarris" at 207.171.180.101 pasted "compile error" (15 lines, 1.2K) at http://sial.org/pbot/18275

[21:03] <TimToady> might change *** to @@

[21:04] <TimToady> or just stick with named arrays.

[21:04] <PerlJam> *** (or @@) is a worm-hole, <== is just regular space flight.

[21:04] <audreyt> TimToady: what's wrong with @@_ :)

[21:04] <audreyt> monkey_: wow, it crashed. nopaste a detailed run (perl -Mblib t/Devel-Caller.t)

[21:04] <audreyt> and your perl -V

[21:04] <TimToady> nothing, if you have an array of that name declared somewhere.

[21:05] <monkey_> k, sorry still a noob at tests

[21:05] <audreyt> the idea like $_ it's implicit

[21:05] <monkey_> <3

[21:05] <TreyHarris> audreyt: make unoptimized failed: "Interface file inconsistency: home-package module `Data.Yaml.Syck' is mentioned, but does not appear in the dependencies of the interface".  i pasted the whole error output above

[21:05] <audreyt> TreyHarris: yeah. is this release?

[21:06] <audreyt> Prelude.pm line 78 doesn't contain a ; for me

[21:06] <audreyt> if you have mixed unoptimised/optimised make

[21:06] <TimToady> I like ==> * for sending stuff down the black hole.  Just not sure what to call the corresponding white hole.

[21:06] <audreyt> then it's possible that interface files gets confused

[21:06] <audreyt> (brb)

[21:07] <audreyt> monkey_: you can force an install and see if v6.pm's tests breaks

[21:07] <pasteling> "monkey_" at 87.81.40.22 pasted "Devel::Caller failing tests (part 2 ;)" (106 lines, 5K) at http://sial.org/pbot/18276

[21:07] <monkey_> oh good stuff

[21:08] *** ebvv left
[21:08] <monkey_> perl -Mblib t/Devel-Caller.t segfaults at the end :)

[21:08] <TimToady> but I really don't like *** very much.

[21:10] <TimToady> I'd rather say that ==> * feeds to the next * or ** it finds, while * <== feeds to the previous * or **, I think.

[21:12] <TimToady> on the other hand, when do you actually execute the blunt end of the * <== in that case?

[21:12] <svnbot6> r11250 | Sage++ | split(/;/m, $something) now translates to split(/;/, $something) to avoid nasty issues with the immediacy of /m.

[21:15] <audreyt> monkey_: please paste it to http://rt.cpan.org/Public/Bug/Report.html?Queue=Devel-Caller

[21:15] <svnbot6> r11251 | Sage++ | Updating completed translations to refelect work to date.

[21:15] <audreyt> and force install, and see if v6.pm tests pass.

[21:15] <TreyHarris> audreyt: I guess I'm just making assumptions about how svn works based on my experience with cvs.  I ran "svn update src/perl6/Prelude.pm", and yet, it still hase a ; on line 78.  ("multi sub evalfile (Str $filename; Str :$lang = 'Perl6')".  what should i run if i really, truly want Prelude.pm to be updated?  delete it first and then check it out again?

[21:15] *** macroron joined
[21:16] <audreyt> oh I see

[21:16] <audreyt> sorry, it means your ./pugs is old.

[21:17] <TreyHarris> audreyt: you're right.  i thought i did a make clean.  guess i forgot.  sorry :-)

[21:17] <audreyt> like, before 6.2.12

[21:17] <audreyt> a fresh checkout perhaps?

[21:18] <TreyHarris> huh, a make clean is in my history...

[21:18] <TreyHarris> yeah, i guess i'd better

[21:18] <monkey_> audreyt: cool, k

[21:19] <TreyHarris> can i just 'rm -rf *' and 'svn update'?  or is checkout magical somehow?

[21:19] <szbalint> uh-oh.

[21:19] <szbalint> audreyt: perl5 tests still fail :(

[21:20] <szbalint> With a different error now though

[21:20] <szbalint> not ok 1 - elems

[21:20] <szbalint> #   Failed test (array.t line 62, column 1-53)

[21:20] <szbalint> #   Expected: '4'

[21:20] <szbalint> #     Actual: 'undef'

[21:22] <szbalint> some tests from array.t and method.t fail, the rest passes.

[21:25] <audreyt> szbalint: just that one fails?

[21:26] <audreyt> TreyHarris: you can do that yes

[21:26] <szbalint> no, but I didn't want to paste it all.

[21:27] <audreyt> szbalint: ok. and the .elems one is blocking you?

[21:28] <szbalint> no, that was just the first one I found to fail

[21:28] <szbalint> but well I don't know what exactly is blocking me atm, trying to figure it out now

[21:28] <audreyt> ok, please do

[21:30] * gaal gets ready to catch a train

[21:31] <szbalint> okay, try traps the exception, $! is set, the problem is that $! is mangled

[21:32] <szbalint> instead of "main::org::apache::derby::impl::jdbc::EmbedSQLException=HASH(0x97cd64c)", it is "user error (main::org::apache::derby::impl::jdbc::EmbedSQLException=HASH(0x97cd64c))"

[21:32] <szbalint> at least for what I need.

[21:36] <audreyt> szbalint: that's easy. fixing

[21:37] *** froh-doh joined
[21:37] <szbalint> thanks.

[21:39] <audreyt> np :)

[21:44] * gaal is off to train station &

[21:44] <svnbot6> r11252 | audreyt++ | * szbalint++ requrested that IO errors should not be wrapped

[21:44] <svnbot6> r11252 | audreyt++ |   under "user error".

[21:46] <rafl> geoffb: Of course!

[21:50] *** bpphillips joined
[21:51] <TreyHarris> what is this Task::Smoke referred to in so many places?  CPAN doesn't know about it, and Test::Smoke doesn't appear to be it, either, so i guess it's not a typo...

[21:55] <audreyt> http://search.cpan.org/dist/Task-Smoke/

[21:55] <lambdabot> Title: "Gaal Yahas / Task-Smoke - search.cpan.org"

[21:56] <TreyHarris> huh, how strange.  maybe it's just a problem with CPANPLUS.pm

[21:57] <TreyHarris> "[ERROR] 'Task::Smoke' does not contain an author part; [ERROR] Cannot find 'Task::Smoke' in the module tree; No such module: Task::Smoke; No modules found to operate on! Nothing done"

[21:57] <bpphillips> \'\

[21:58] <monkey_> audreyt: http://rt.cpan.org/Public/Bug/Display.html?id=19011 :/

[21:58] <lambdabot> Title: "#19011: can&#39;t install latest version on debian linux sarge"

[21:58] <monkey_> i'm not alone

[22:00] <TreyHarris> cpan says: "Strange distribution name [Task::Smoke]No objects found of any type for argument Task::Smoke".  and I've tried it at several different sites, with perl installs built by me and by others.  would someone for whom this has worked (via a CPAN install) tell me what version of CPAN.pm you have?

[22:01] <TreyHarris> (yes, I can and will download and install it from the dist, but I'd like to track this problem down)

[22:04] *** bpphillips left
[22:05] <audreyt> TreyHarris: I think it's just your cpan mirror havn't been udpated.

[22:06] <TreyHarris> huh, i swore i saw smoke tests happening at YAPC.  lol.  guess i imagined it :-)

[22:09] *** DaGo joined
[22:09] <audreyt> it was known as Bundle::Pugs::SmokeKit

[22:09] <audreyt> gaal changed its name as it's not only pugs specific now

[22:10] <TreyHarris> ah, that makes sense now.

[22:15] *** macroron joined
[22:15] <ivanfrey> audreyt | TreyHarris: I'd like to run the smoketest and upload the results, but I think I should clean up my perl5 installation first.

[22:16] *** xinming joined
[22:19] <audreyt> ivanfrey: yeah.

[22:25] <ivanfrey> audreyt: possibly odobe might be more knowledgeable about this.

[22:26] *** fhork joined
[22:48] <unobe> ivanfrey: i don't think i can help you much. it seems like you installed perl via fink (if your perl is under /sw), and i don't have any experience with fink

[22:52] <ivanfrey> unobe: I can leave the /sw out of my path and rebuild pugs. It's just that I'd like to help you guys debug pugs not necessarily by fixing bugs because that's a bit over my head but by installing and running tests on my 10.3.9 machine. I can even very easily uninstall the Fink installed perl5.

[22:57] <ivanfrey> unobe: But I have a few questions. Does Pugs require Perl 5.8.6? Isn't the default Perl in 10.3.9, 5.8.1. Does this mean I can't run Pugs in 10.3.9 with the default Perl installation?

[23:02] *** ivanfrey joined
[23:06] *** putter joined
[23:06] <putter> 1/2 kg peanum m&m's, 3 dollars.  a long walk, free.  new perspectives on mmd, err, 2 cents.

[23:07] <audreyt> that's a nice one

[23:07] <kolibrie> hmm, trying to build pugs at home now, I get the fps error szbalint had several hours ago

[23:08] <kolibrie> but the command ghc-pkg unregister --user fps does not seem to work

[23:08] <kolibrie> ghc-pkg: cannot find package fps

[23:10] * kolibrie puts children to bed &

[23:10] <putter> try it without the --user?  (there are a couple of different package.conf around)

[23:10] <putter> :)

[23:10] <putter> audreyt:  :)

[23:10] <putter> ok, let's see

[23:11] <putter> story 1 - in which putter appeals for a  ;;  mark.

[23:11] <putter> "less important" != "not important"

[23:12] <audreyt> Very Good Idea.

[23:12] <audreyt> surely, ;; is final?

[23:12] <audreyt> i.e. no ; after it

[23:12] <putter> yes

[23:12] <audreyt> nor ;; after it

[23:12] <putter> yes

[23:13] <putter> :)

[23:13] <audreyt> semantically the same

[23:13] <audreyt> just better surface?

[23:13] <putter> no

[23:13] <audreyt> (and to confuse OCaml users?)

[23:13] * putter having erased next line of argument, now regrets same ;)

[23:13] <audreyt> ok. how is it different than the "final ;" previously?

[23:14] <putter> no different than final-; .

[23:14] <putter> but final-; (aka last-;), is distinctly different than non-final-;.

[23:15] <putter> and that given (A,B), to make A more important than B, you have to say (A;B;) instead of (A;B) is just wrong.

[23:15] *** vsoni joined
[23:16] <putter>  ;; is implicit in end of arguments if _;;_ hasnt already been seen

[23:16] <putter> ie, the end of the parameters which are involved in choice.

[23:16] <putter> non-incidental to choice

[23:18] <putter> silence == not buying yet? :)

[23:18] <audreyt> it's all surface

[23:18] <audreyt> so I fully agree

[23:19] <putter> ah, ok.

[23:19] <audreyt> now ; only appears between params

[23:19] <audreyt> (A;) is bogus

[23:19] <audreyt> so is (;A)

[23:19] <putter> yes

[23:19] <audreyt> k, vehement agreement reached.

[23:19] <audreyt> I don't have to update the .hs :)

[23:19] <putter> :)

[23:20] <unobe> ivanfrey: to the first question: i haven't tried with anything less. To the second (without a question mark): I don't know. To the third: I don't know.

[23:20] <putter> lol

[23:20] <putter> yet...

[23:21] <unobe> ivanfrey: what you could do is download the source code of perl from http://www.perl.org/get.html and try building it

[23:21] <lambdabot> Title: "Get Perl - perl.org"

[23:21] <putter> story 2 - in which cards are coerced

[23:24] <ivanfrey> unobe: the question is how can I tell if my Perl 5 installation is really borked. I mean it doesn't appear to be, but then all these strange things happened.

[23:24] <ivanfrey> unobe: like when I was make installing pugs it was placing a whole bunch of files under /sw.

[23:25] <vsoni> audreyt: I need some help

[23:25] <unobe> ivanfrey: well, you don't consider all these strange things as a sign of borkage, i don't know what to tell ya

[23:25] <putter> distance again becomes hierarchical.  the most significant component being the number of implicit coercions.  the card story is what you do with two distances of equal coercion count.  modulo, for non-zero coercions, you run the card story on the coerced-to types.

[23:25] <audreyt> ivanfrey: well, yes, because we reuse perl5's sitelib and simply s/perl5/perl6/ as our sitelib

[23:25] <unobe> s/you don't/if you don't/

[23:25] <audreyt> vsoni: sure?

[23:26] <vsoni> audreyt: I would like to write some tests before I start fixing IMCC to make it reenterant.........Any ideas how I could write a test

[23:27] <vsoni> s/write a test/write some tests/

[23:27] <unobe> ivanfrey: maybe that's unfair of me to say.

[23:27] <ivanfrey> audreyt: and the build process found the site lib by search the PATH variable, is that right?

[23:28] <audreyt> ivanfrey: by asking the perl you run Makefile.PL with

[23:28] <audreyt> vsoni: well... use the parrot_embed interface?

[23:28] <unobe> ivanfrey: what you could do is just try building a new version of perl

[23:29] <vsoni> and than I invoke the interpreter multiple times

[23:29] <unobe> ivanfrey: well, maybe not should...but that's what i would do

[23:29] <putter> oh, and if more than one coersion class (in a type conversion path) exists, you have to try all of them, and have an unambiguous win.

[23:29] <vsoni> s/interpreter/imcc/

[23:30] <putter> ok?

[23:31] <audreyt> that seems natural.

[23:31] <ivanfrey> unobe: Hmmmmm, if I keep fink's perl and upgrade that one and put that one back in the path and just leave Apple's perl alone, wouldn't that work.

[23:32] <putter> ok, at that point I think we have subsumed spinclad's tree of bundles.

[23:32] <ivanfrey> unobe:Fink by the way sets up a parallel unix universe under /sw

[23:33] <unobe> ivanfrey: i'm don

[23:33] <unobe> 'tknow

[23:33] <putter> and the only capability that we have discussed that here doesnt exist is that two unrelated roles are now incomparable.

[23:33] <vsoni> audreyt: any documentation on embedding

[23:34] <audreyt> vsoni: parrot/docs/embed.pod

[23:34] <audreyt> also check out the mod_parrot tree

[23:34] <unobe> ivanfrey: remember, i don't use fink, so i'm not sure of what else (if anything) it does to the system

[23:34] <ivanfrey> unobe: it uses standard deb packages, but I can choose to either compile from source or install the equivalent binary package.

[23:34] <audreyt> mod_parrot and pugs are currently the only two publicly-available parrot host applications I'm aware of

[23:35] <audreyt> vsoni: also note embed.pod is probably incomplete and/or misleading

[23:35] <putter> story 3 - in which, with immediate problems believed solved, no doubt naively, putter looks further afield

[23:35] <audreyt> very telling, that story

[23:35] <putter> by suggesting there be two flavors of implicit coercioin

[23:35] <unobe> ivanfrey: what version of perl are you using (under fink)?

[23:36] <unobe> did you already say?

[23:36] <vsoni> audreyt: thanks

[23:36] <ivanfrey> unobe: 5.8.6

[23:36] <putter> high cost and low cost.  "we can get there" vs "just as good as"

[23:36] <audreyt> vsoni: np :) good luck. t/* is probably your best bed

[23:36] <audreyt> putter: I think TimToady wants "we can get there" to be explicit

[23:36] <audreyt> concrete examples?

[23:36] <putter> counts as a distance level of coersion, and doesnt

[23:37] <ivanfrey> unobe: but fink also has a 5.8.8 package available.

[23:37] <audreyt> oh.

[23:37] <audreyt> hm.

[23:37] <audreyt> "Just as good as" is perhaps simply "does"

[23:37] <audreyt> in which case it naturally 0-distances out

[23:37] <unobe> i don't think that will make a difference. This is the perl i'm using:

[23:37] <putter> I have another rep, which is a different class, but we're good friends and dont mind switching back and forth.

[23:37] <unobe> This is perl, v5.8.6 built for darwin-thread-multi-2level

[23:37] <unobe> (with 2 registered patches, see perl -V for more detail)

[23:37] <kolibrie> putter: ghc-pkg: /usr/local/lib/ghc-6.4/package.conf: you don't have permission to modify this file

[23:38] <kolibrie> do I want to sudo that?

[23:38] <audreyt> putter: why don't we do this f2f again? :)

[23:38] <putter> err, not another rep.  a...

[23:38] <audreyt> kolibrie: yes you do

[23:38] <putter> f2f?

[23:38] <kolibrie> thanks

[23:38] <audreyt> face to face

[23:38] <ivanfrey> unobe: the only snag here is if some perl programs specify /usr/bin/perl then that's perl 5.8.l

[23:39] <ivanfrey> unobe: you're running 10.4

[23:39] <ivanfrey> unobe: append ? to last statement

[23:39] <putter> because the outer door was locked, I didn't have a cell number, and though standing in the street tossing a peanut m&m at the window might not be well received. ;)

[23:39] <unobe> ivanfrey: yes. /usr/bin/perl is 5.8.6 here.

[23:39] <audreyt> heh

[23:40] <audreyt> putter: I can come downstairs and get you in

[23:40] <putter> f2f tomorrow sounds like a plan though

[23:40] <audreyt> sure, that can do too

[23:40] <putter> oh, or that

[23:40] <audreyt> just come over :)

[23:40] <putter> will do

[23:41] <putter> in a bit.  will give you a 5min warning. ;)

[23:42] <unobe> ivanfrey: i'd try removing /sw from the path when building pugs to see how it goes

[23:42] <kolibrie> ok, if I run as root, suddenly ghc-pkg cannot find package fps, nor if I relax the permissions of /usr/local/lib/ghc-6.4/package.conf and run as myself

[23:42] <ivanfrey> unobe: perl -v

[23:42] <ivanfrey> This is perl, v5.8.1-RC3 built for darwin-thread-multi-2level

[23:42] <ivanfrey> (with 1 registered patch, see perl -V for more detail)

[23:42] *** Daveman left
[23:43] <unobe> ivanfrey: try removing /sw from your path when building pugs

[23:44] <kolibrie> if I put the permissions back, ghc-pkg sees the file, but complains about not having permissions

[23:44] <audreyt> kolibrie: ghc-pkg list

[23:44] <audreyt> and seek fps among them

[23:45] <audreyt> if it's in your user conf

[23:45] <audreyt> then

[23:45] <audreyt> ghc-pkg unregister --user fps

[23:45] <audreyt> should've removed it

[23:45] <audreyt> putter: the doors are open

[23:46] <pasteling> "kolibrie" at 66.160.89.114 pasted "output from ghc-pkg list" (9 lines, 469B) at http://sial.org/pbot/18284

[23:46] <kolibrie> fps seems to be missing

[23:47] <kolibrie> but make complained of having two of them

[23:47] *** Daveman joined
[23:47] <audreyt> kolibrie: if you type "make" now it still complains?

[23:47] <audreyt> are there two GHCs on your system?

[23:48] <kolibrie> I hope not, let me look

[23:48] <audreyt> kolibrie: there's a package.conf somewhere that has fps in it

[23:49] <putter> audreyt: oh, great.  thanks.

[23:49] <ivanfrey> unobe: I removed it halfway through the last build, so I should retry rebuilding it. Is there a make uninstall command?

[23:50] <audreyt> (bbiab)

[23:50] <kolibrie> audreyt++ # /me finds /usr/bin/ghc and /usr/local/bin/ghc-6.4

[23:50] <unobe> ivanfrey: the first "it" being /sw in $PATH, the second "it" being pugs, right?

[23:51] <unobe> ivanfrey: prolly `make realclean`

[23:51] <ivanfrey> unobe: oops sorry, yes

[23:53] <ivanfrey> unobe: I might download the latest snapshot from the subversion repository. Is there anything preventing me from using Xcode?

[23:53] <putter> steven: thank you for your kind words on the spike regards moose.  it disappeared from collective consciousness so fast, I've never been quite clear on just how much or how little impact it had.  my thanks.

[23:54] *** lampus_ joined
[23:56] <putter> &

[23:57] <unobe> ivanfrey: i've never used Xcode. can't help ya there.

[23:58] <ivanfrey> unobe: I better go eat. You just use an svn client and download the source somewhere in your home directory.

[23:59] <ivanfrey> unobe: forgot the ? again.

[23:59] <unobe> ivanfrey: yeah, i do svn co in my ~/dev dir

