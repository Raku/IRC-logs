[00:01] *** lumi_ joined
[00:05] <TreyHarris> oh, no.  even after a make clean, it's still linked in a non-existant libparrot.

[00:08] *** Eidolos joined
[00:10] *** jferrero joined
[00:11] <dduncan> anyway, I think I'm starting to get the hang of using propedit+VIM for basic stuff

[00:16] *** kanru joined
[00:18] <zgh> is perl5 embedding in pugs broken? or is it just my compile?

[00:18] <TreyHarris> dduncan: hooray!  i have a working pugs again :-)

[00:19] <dduncan> I'm glad

[00:19] <TreyHarris> thanks for your help dduncan++

[00:20] <dduncan> so now I'll just have to figure out how to use libreadline myself

[00:20] <dduncan> assuming its actually useful

[00:20] <TreyHarris> well, i dunno.  just when you get used to being able to edit and use command-line history at a prompt, it's really hard to go back to a dumb prompt

[00:22] *** macroron joined
[00:22] <zgh> readline is essential to my way of life

[00:22] <zgh> vi-keybindings specifically

[00:24] *** nekokak joined
[00:28] *** markstos joined
[00:29] <svnbot6> r12340 | Darren_Duncan++ | set svn:ignore props to hide third-party/installed and any third-party/judy files that aren't in the repo

[00:38] <svnbot6> r12341 | Darren_Duncan++ | third-party/ : set svn:ignore props on appropriate parts of HsJudy, HsSyck, fps

[00:41] <svnbot6> r12342 | Sage++ | The translator test script is now recursive. Just run it in a directory and it recurses through all .yml files and tries to translate them.

[00:41] <svnbot6> r12342 | Sage++ | Useage is the same.

[00:45] <svnbot6> r12343 | Sage++ | The parser for the translation utility now fails much more gracefully if the file is essentially empty. It just returns as empty P5AST, which eventually results in an empty output file.

[00:45] <svnbot6> r12343 | Sage++ | This makes running tests across the full parsed yml of perl5 t provided by lwall much easier, as anything that's empty no longer causes a failure.

[00:45] <svnbot6> r12344 | Darren_Duncan++ | perl5/Pugs-Compiler-Rule/ : set svn:ignore props on make-generated files

[00:45] *** macroron_ joined
[00:45] <SageLT> I;ve got a full test of the translator using the new recursive script running right now, I'll post the results for anybody interested.

[00:46] <SageLT> Current feeling based on the early part of the test: as expected when you expand out your test base, more problems crop up. Not as much coverage as I'd like, but not too shabby either.

[00:46] <svnbot6> r12345 | Darren_Duncan++ | ext/Set-Relation/ : continued split of the 2 test files

[00:47] <SageLT> Ah, the test just finished: out of 1278 files attempted, 142 failed in some catastrophic way. 90 had unknown nodes. Looks like I've got my work cut out for me.

[00:47] <SageLT> That's roughly 90% translating without major errors.

[00:48] <dduncan> This is Pugs Version: 6.2.12 (r12345)

[00:48] <dduncan> now there's a number you don't see every day

[00:51] <dduncan> now, the only non-repo files left without svn:ignore props are various perl5/Pugs-Compiler-Perl6/t/ files and folders plus perl5/Pugs-Grammar-MiniPerl6/lib/Pugs/Grammar/MiniPerl6.pm ...

[00:51] <dduncan> I'm loathe to hide those at the moment, but if someone actually working on those projects thinks its a good idea, then they can do so themselves

[01:16] *** dolmans joined
[01:18] *** kanru2 joined
[01:23] <markstos> I'm running "pugs -cw CGI/Application.pm my CGI::App port, and I'm getting "unexpected end of input" ... at line 2323. I know the error must be about a 1,000 lines earlier, because most of the end of document is POD. Any tips on narrowing down where the error is ?

[01:23] *** lollan joined
[01:24] *** xdg joined
[01:29] <dduncan> I'm not sure if its a transient on my system, but I'm currently running a smoke and getting lots of errors

[01:29] <dduncan> I think I'll abort it and do a clean run, to see if its related to repo code or not

[01:30] <dduncan> but that will take awhile, so see you later &

[01:30] *** dduncan left
[01:35] *** zgh left
[01:50] * audreyt wakes up and sees the topic

[01:50] <TreyHarris> audreyt: you broke it :-)

[01:50] <audreyt> fixing

[01:50] <TimToady> welcome back to the funny farm

[01:51] <audreyt> I see that. should've known better than checkin 5kline changes at midnight 2am

[01:51] <audreyt> who would have thunk?

[01:51] <TimToady> looks like some of the Var/_Var thingies are b0rken, like .keys

[01:52] <TimToady> don't know why that prevents "return if" from parsing though.

[01:52] <TimToady> unless it's looking ahead for the wrong category for statement modifiers somehow

[01:52] <TimToady> maybe trying to figure out "return if =>"

[01:53] <TimToady> or maybe it's the other way around, and the parser is hosing the _Var thingies

[01:54] <TreyHarris> i was reading one of audreyt's old journal entries, and I saw a reference to "multi sub foo (0) { ... } multi sub foo (1..10) { ... }".  has that kind of pattern matching gone away, or just not implemented yet?

[01:54] <TimToady> not implemented yet

[01:55] <TimToady> treating values as subsets is rather important

[01:55] <TreyHarris> ok

[01:56] <TreyHarris> i can't find a test, which was why i asked.  should i write one for multi_sub.t?

[01:57] <TreyHarris> but i admit i haven't read every single test yet :-)

[01:57] <TreyHarris> or maybe it belongs in signature_matching.t

[01:58] <TimToady> there are no tests containing /sub.*\(0\)/, which i would expect.

[01:59] <TreyHarris> yeah, that's what i looked for, but it could be any value, and i couldn't figure out how to write a regex for that :-)

[01:59] <TimToady> implementation is probably waiting on all the Capture/Signature stuff to settle down.

[02:00] <markstos> Perl6 blog entry, powered by 'given', 'when' and the smart match operator. Total LoC reduction: 50%! http://use.perl.org/~markjugg/journal/30663

[02:00] <lambdabot> Title: You have exceeded your Internet quota

[02:00] <TreyHarris> lol

[02:01] <TimToady> ./data_types/subtypes.t:        multi sub my_abs (Num where { $^n <  0 } $n){ -$n }

[02:01] <TimToady> that's about as close as it comes, i think.

[02:05] <TimToady> markstos: the parens around the arg to die are doing no useful work.

[02:06] <markstos> TimToady: Thanks. Removing them now.

[02:06] <TimToady> also does weird line breaks.

[02:07] *** hikozaemon joined
[02:07] <TimToady> reducing my font size seems to fix that though

[02:08] <TimToady> (I tend to run with fairly large fonts for my aging eyes.)

[02:11] *** kanru joined
[02:12] <TreyHarris> perlbot: learn "#perl6 logs" as http://colabti.de/irclogger/irclogger_logs/perl6

[02:12] <perlbot> added "#perl6 logs" to the database

[02:12] <lambdabot> Title: You have exceeded your Internet quota

[02:12] <svnbot6> r12346 | audreyt++ | * A typo (SArray info SArrayMulti) in Operator.hs rendered

[02:12] <svnbot6> r12346 | audreyt++ |   &return into unary, instead of listop. :-/

[02:12] <svnbot6> r12346 | audreyt++ |   The @@ sigil caused us trouble even before it's implemented...

[02:12] <TreyHarris> perlbot: #perl6 logs

[02:12] *** rashakil left
[02:12] <TreyHarris> perlbot: learn #perl6 logs as http://colabti.de/irclogger/irclogger_logs/perl6

[02:12] <perlbot> added #perl6 logs to the database

[02:13] <lambdabot> Title: #perl6 irc log

[02:13] <TreyHarris> perlbot: #perl6 logs

[02:13] <perlbot> http://colabti.de/irclogger/irclogger_logs/perl6

[02:13] <lambdabot> Title: #perl6 irc log

[02:17] <audreyt> should be unb0rked now.

[02:17] <audreyt> Foo::bar.new broken. @foo.map:{...} broken; fixing these two. but smoke loop should be runnable

[02:22] *** mdiep joined
[02:29] <audreyt> Foo:bar unbroken.

[02:29] <svnbot6> r12347 | audreyt++ | * restore metaobjects for Multi::Part::Class's metaobject

[02:29] <audreyt> .map:{} seems fine now

[02:29] *** audreyt changes topic to: SVK users: http://search.cpan.org/dist/SVN-Mirror/ | paste: http://sial.org/pbot/perl6 | pugs.blogs.com | pugscode.org | pugs.kwiki.org | http://www.treehugger.com/files/th_images/paradigm.jpg

[02:30] <TreyHarris> excuse my ignorance, but what is Foo:bar?  run Foo() with an invocant of bar()?

[02:32] *** amnesiac joined
[02:32] <markstos> "trinary" is really spelled ternary, right ? I just spotted that in the docs.

[02:33] <TreyHarris> markstos: a three-arged operator is ternary.  a SQL boolean that can also be null is trinary

[02:33] <audreyt> "ternary"

[02:33] <markstos> audreyt: thanks. Patching docs for !! ?? now.

[02:33] <audreyt> TreyHarris: it's Foo(bar => 1)

[02:34] <audreyt> surprisingly.

[02:35] <audreyt> userdefined infix broken.

[02:35] <svnbot6> r12348 | audreyt++ | * Remove debug statements and reorg a bit.

[02:35] <TreyHarris> markstos: oops, i was discerning a semantic difference where there is none.  both ternary and trinary can be used either way, and ternary is preferred for both.

[02:36] <audreyt> hm wait. broken just with funny unicode brackets.

[02:36] <audreyt> fixing that too

[02:36] <markstos> TreyHarris: Thanks for the clarification, though.

[02:37] <markstos> Ok, so subversion is finding no change when I know I just made one. How do I make it less dumb?

[02:37] <audreyt> "svn add"

[02:37] <audreyt> "svn st"

[02:37] *** Bit-Man joined
[02:37] <audreyt> if you are patching docs/Perl6/Spec/

[02:37] <audreyt> then that is not meant to be checked in; send to p6l

[02:38] <markstos> Yes I am. Ah.

[02:38] <audreyt> upstream is http://svn.perl.org/perl6/doc/trunk/design/syn/

[02:39] <markstos> How about I just shout it out here: s/trinary/ternary/i ? I'm not already subscribed/following p6l.

[02:39] *** xinming_ joined
[02:39] <TreyHarris> markstos: you should subscribe; conversations seem to move back and forth between here and there fairly willy-nilly :-)

[02:40] <TreyHarris> it's not high traffic at all (lately at least, it flares up sometimes)

[02:43] <svnbot6> r12349 | markstos++ | s/trinary/ternary in docs/other/primes_rambling.pod

[02:44] <markstos> Ok. Sent to p6l.

[02:48] *** b_jonas left
[02:48] *** xinming__ joined
[02:49] *** traecer joined
[02:50] <markstos> Oh joy. After at least three evenings of hacking, pugs -cw reports "Syntax OK" on my CGI::Application port. Now I only need to start making the tests pass...

[02:51] <audreyt> ooh.

[02:51] <audreyt> with latest pugs?

[02:51] * Khisanth waits for the "N"."O"x100

[02:51] <audreyt> also, which parts of the metaobject protocol do you need again?

[02:52] <markstos> No, 6.2.12 (r12060)

[02:52] <markstos> Just class_precendence_list.

[02:52] <audreyt> ok. once the tests startss passing

[02:52] <audreyt> please check in to ext/CGI-Application/ :)

[02:52] <markstos> Ok. :)

[02:52] <audreyt> (if you'd like it not to be randomly broken next release)

[02:52] <audreyt> markstos++

[02:53] <markstos> When you say "start" passing, I assume you really mean "not completely passing?" :)

[02:53] <audreyt> yup.

[02:54] <markstos> Ok. Is the darcs gateway considered functional? I really feel more productive with it, and haven't been able to feel so warm and fuzzy about svk yet.

[02:54] <audreyt> it's functional but not bidi

[02:54] <markstos> Now I just use svn.

[02:55] <audreyt> so to commit you need to use "svn add"

[02:55] <audreyt> but that's fine

[02:55] <markstos> So patches return by 'darcs send' ?

[02:55] <audreyt> I mean, it's entire directory

[02:55] <audreyt> it's not like you want/need merge history :)

[02:55] <markstos> Right.

[02:56] <audreyt> I agree re: darcs UI is more flow-happy

[02:56] <markstos> BTW, is something like Carp::croak built into Perl6, or does that need to be ported?

[02:57] <markstos> I love the interactiveness of darcs-- the interactive updates and commits.

[02:57] <audreyt> currently our die() is just croak()

[02:57] <audreyt> so use it for now I think

[02:57] <audreyt> oh, that. "svk ci --interactive"

[02:57] <markstos> A better default. :)

[02:57] <markstos> (croak as die)

[02:57] <markstos> Thanks for the svk tip.

[02:57] <audreyt> interactive as default may also be better ;)

[02:58] <markstos> Yes. :)

[02:58] <audreyt> I think "SVK::Command::DarcsLike"

[02:58] <markstos> Good for beginners, and in my opinion, good for flow.

[02:58] <audreyt> svk rec # interactive by deefault

[02:58] <audreyt> etc

[02:58] <markstos> :)

[02:58] <audreyt> will rock

[02:59] <markstos> One part of the CGI::App port may not be fixed for a while: it depends on HTML::Template (which it probably shouldn't). My solution will probably be to push that functionality into a plugin and remove the dependency.

[02:59] <svnbot6> r12350 | fglock++ | v6 - state variables (need some work)

[03:00] <markstos> So what happens if release time comes around and I haven't got all the tests passing for CGI::App yet? I don't want to mess up the bigger picture for my side project.

[03:04] <audreyt> there's no bigger picture :)

[03:04] <audreyt> your tests will just be marked todo-for-release by some passerby gnome

[03:05] <markstos> Ok.

[03:05] * markstos waves to gnomes

[03:05] <audreyt> The gnome waves back! --More--

[03:05] <audreyt> You feel much better.

[03:05] *** buubot joined
[03:06] <buu> Hrm.

[03:15] <audreyt> $job, bbl

[03:16] <markstos> Here's what I mean, but it's a syntax error. What's correct? self.$coderef(@args)    ?

[03:16] <svnbot6> r12351 | trey++ | Added myself to AUTHORS, and fixed incorrect pathnames in docs/SEEALSO.

[03:18] <TreyHarris> markstos: what are you wanting to do there?  run $coderef with self as an invocant, though self does not actually have that code as a method?

[03:19] <markstos> Let me check what it looked it originally as Perl5. :)

[03:19] <PerlJam> pugs groks self?

[03:20] <PerlJam> I thought it was still using ./

[03:20] <markstos> TreyHarris, in Perl5, this worked: $self->$callback(@args);

[03:20] <markstos> PerlJam: I think "./" is a pugism and not official Perl6.

[03:20] <markstos> Using self.foo works for me, so far.

[03:21] <PerlJam> markstos: yes, ./ is a pugism.  I didn't realize that pugs understood self  (shows how often I write perl6 :)

[03:21] <markstos> TreyHarris: So "Yes", what you said.

[03:21] <markstos> PerlJam, well, from basic tests it seems to grok self.

[03:24] <PerlJam> Grr.  svk says "Incomplete data: Delta source ended unexpectedly"

[03:24] <PerlJam> so much for updating my local pugs

[03:26] *** weinig_ joined
[03:26] <markstos> This isn't a syntax error, so I'll try it now for: $callback(self,@args);

[03:27] <PerlJam> markstos: I wonder if self.$method.(@args) works.

[03:28] <markstos> PerlJam: I thought of that, but it's a syntax error.

[03:28] *** weinig_ is now known as weinig

[03:29] *** weinig is now known as tarzan

[03:29] *** tarzan is now known as weinig

[03:32] *** weinig joined
[03:32] <TimToady> markstos: you will find neither trinary nor ternary in the synopses I'm maintaining.  It's now just the conditional operator.

[03:33] <markstos> TimToady: Interesting. Because "conditional" is more grokable, or that it is meant to be chained, with lots of operators?

[03:34] <TimToady> because it's grokable, and says what it's actually doing.

[03:34] <markstos> OK.

[03:34] <TimToady> looks like ext/Test-Builder/t/010_Test_Builder.t is still in a hard loop...

[03:34] <PerlJam> TimToady++ no more bikeshedding on what to call it!

[03:35] <markstos> So it seems like the website and the pugs repo are behind. They both have Trinary: http://dev.perl.org/perl6/doc/design/syn/S03.html

[03:35] <PerlJam> Also, everyone always calls it "*the* ternary" operator as if there's only one possible.

[03:35] <PerlJam> markstos: the website is brokenish as far as keeping things up to date.

[03:35] <TimToady> okay, I grepped for "trinary", not "Trinary".  it's right in the precedence table though

[03:36] <PerlJam> grep -i is your friend

[03:36] <markstos> PerlJam: true, but in that sense /the/ conditional operator isn't better.

[03:36] <TimToady> on the other hand, it's not using "Trinary" as the name of the operator.

[03:36] <TimToady> it's just using it as one step up from binary.

[03:37] <TimToady> but I'll fix it anyway.

[03:37] <PerlJam> markstos: don't make me imagine some cute non-sensical name to call it

[03:38] <markstos> PerlJam: like the ba-bang, qu-question operator?

[03:39] <PerlJam> markstos: I was thinking something like "quabang"

[03:39] <markstos> The double bang operator...

[03:40] <PerlJam> It's a stuttering quabang

[03:40] <markstos> "conditional" is fine by me, but it would be nice to have the word "ternary" nearby, as that's how Perl5'ers will search for it.

[03:41] <PerlJam> TimToady: Why is it that NEXT blocks fire in reverse order?

[03:42] <TreyHarris> ?eval my $coderef = sub (*@args) { say "{self}: @args[]." }; my $foo = "blahblah" but { sub foo {...}; &foo := $coderef }; $foo.foo(1,2,3)

[03:42] *** evalbot_23570 is now known as evalbot_23612

[03:42] <evalbot_23612> OUTPUT[<SubMacro(self)>: blahblah 1 2 3. ] Bool::True

[03:42] <PerlJam> markstos: yeah, but they won't recognize it when they find it.  :-)

[03:42] <TreyHarris> markstos: that's *almost* what you want....

[03:42] <TreyHarris> markstos: right?

[03:43] * markstos thinks about TreyHarris example

[03:43] <TreyHarris> ?eval my $coderef = sub ($self: *@args) { say "$self: @args[]." }; my $foo = "blahblah" but { sub foo {...}; &foo := $coderef }; $foo.foo(1,2,3)

[03:43] <evalbot_23612> OUTPUT[blahblah: 1 2 3. ] Bool::True

[03:43] <TreyHarris> there.

[03:43] * markstos scratches head

[03:43] <TreyHarris> you have to mixin the coderef before you can call it as a method

[03:44] <markstos> Aha.

[03:44] <TimToady> PerlJam: NEXT fires in reverse order for the same reason LEAVE does, which fires in the same order as END blocks.

[03:45] <TimToady> basically as the code is being elaborated, things get built up that naturally want to be deconstructed in the reverse order.

[03:45] <PerlJam> That seems to make sense in my head except for NEXT for some reason.

[03:45] <TimToady> the loop block is entered and left every time through

[03:45] <TimToady> conceptually

[03:45] <TimToady> NE

[03:45] <TimToady> NEXT and LAST are kinda complementary variants of LEAVE

[03:46] <TimToady> much like KEEP and UNDO

[03:48] <TimToady> dinner &

[03:50] * PerlJam re-reads S04 in search of Understanding.  :)

[03:51] <TreyHarris> ?eval class Rx { has $.x = 19 }

[03:51] <evalbot_23612> Error:  unexpected "=" expecting comment, trait, "handles", ";" or "}"

[03:51] <svnbot6> r12352 | audreyt++ | * Lexical user-defined operators now works again:

[03:51] <svnbot6> r12352 | audreyt++ |     my sub infix:<foo> ($x, $y) { ... }

[03:51] <TreyHarris> what's wrong with that?

[03:52] <audreyt> defaulting not yet handled?

[03:53] <TreyHarris> ah, right

[03:54] <Eidolos> svnbot6 is reporting Pugs checkins, right? And I assume 23612 is the revision number of some other Perl6 project.. but which?

[03:55] <audreyt> it's feather's local repo number

[03:55] <audreyt> i.e. it's broken. thanks for the headsup

[03:56] <Eidolos> Er.. heh, okay :)

[03:59] <audreyt> fixed

[04:00] <svnbot6> r12353 | audreyt++ | * evalbot-loop: Eidolos++ reported that svk was reporting local versnum

[04:00] <svnbot6> r12353 | audreyt++ |   not pugs versnum.

[04:01] <audreyt> TreyHarris: check for tests

[04:01] <audreyt> see if that's tested

[04:01] <audreyt> a workaround exit:

[04:01] <TreyHarris> audreyt: i will

[04:02] <Eidolos> ?eval 1+3

[04:02] <markstos> I was surprised this was an error:

[04:02] <audreyt> class Point { has $.x; submethod BUILD ($.x = 12) {} }; Point.new.x

[04:03] <audreyt> will eval to 12 when evalbot i s back

[04:03] <markstos> ?eval my %h = ( 1 => [2] ); my $b = [ @{%h{1}} ]; say  $b.perl;

[04:04] <markstos> I get an error at "[". It seems something about casting the hash value back to an array doesn't work.

[04:04] <TreyHarris> must uncommute, 9pm is far too late to be going home....

[04:04] * TreyHarris &

[04:04] <markstos> Or rather, I'm getting a syntax error.

[04:04] <audreyt> my @b = %h<1>

[04:04] <audreyt> er

[04:04] <audreyt> my $b = %h<1>

[04:04] <audreyt> but will fix

[04:05] <markstos> audreyt: so it's a Perl6 bug?

[04:06] <audreyt> there's no @{} anymore :)

[04:06] *** neoesque joined
[04:06] <audreyt> there is, hoeever, @()

[04:06] <audreyt> prefix @ is just a function like everyone else

[04:07] <markstos> Ah. I'll test that.

[04:07] <markstos> Yep. That works.

[04:08] <markstos> Should that be mentioned in "Synopsis 9: Data Structures" ?

[04:10] <markstos> Ah, I see light mention of it in S2, "Bits and Pieces".

[04:14] <audreyt> I think I changed somewhere else in tokyo...

[04:14] <audreyt> ah. S03

[04:14] <audreyt> =item * Perl 5's C<${...}>, C<@{...}>, C<%{...}>, etc. dereferencing

[04:14] <audreyt> forms are now C<$(...)>, C<@(...)>, C<%(...)>, etc. instead.

[04:14] *** dduncan joined
[04:17] <markstos> What's the best practice for writing #!/bin/perl in a platform-independent way?  #!/usr/bin/env perl ?

[04:18] <audreyt> either that or #!perl

[04:18] <audreyt> which will portably Not Work everywhere

[04:19] <Maddingue> or you let the EU:: modules change the path

[04:19] <markstos> What? You mean there's More than One Way to Do It ?

[04:19] <audreyt> via install_script(), yes

[04:19] <audreyt> er install_scripts

[04:20] <SamB> so that "#!/usr/bin/env perl" thing works on windows?

[04:20] <audreyt> no

[04:20] <audreyt> win32 is doomed anyway

[04:20] <SamB> heh

[04:21] <svnbot6> r12354 | markstos++ | Update shebang line for util/prove6 to  be more platform independent.

[04:29] <dduncan> ?eval 'fubar'

[04:31] <dduncan> I have used #!perl myself over the last year for my Perl 5 stuff on CPAN

[04:31] <dduncan> but not in Perl 6 considering that "use v6-alpha;" is the current way to do it

[04:33] <markstos> Another question: I'm trying to make prove6 smarter. How I can check to see if 'pugs' is the  path already in a platform-independent way? A number of hacks come to mind, but nothing clean.

[04:34] <audreyt> can_run('pugs')

[04:35] <markstos> Where does 'can_run' come from?

[04:35] <audreyt> Module::Install::Can

[04:35] <audreyt> failing that, use ExtUtils::MakeMaker()

[04:35] *** SubStack joined
[04:35] <audreyt> and then MM->maybe_command()

[04:35] <audreyt> (see EU::MM manpage)

[04:36] <audreyt>     for my $dir ((split /$Config::Config{path_sep}/, $ENV{PATH}), '.') {

[04:36] <audreyt>         my $abs = File::Spec->catfile($dir, $_[1]);

[04:36] <audreyt>         return $abs if $abs = MM->maybe_command($abs);

[04:36] <audreyt>     }

[04:37] <markstos> Thanks, audreyt: Just what I was looking for.

[04:37] <audreyt> glad to know :)

[04:38] <miyagawa_> audreyt: I've a question about M::I and build_requires and auto_include_deps

[04:38] <audreyt> miyagawa_: see Alias on #perl :)

[04:39] <miyagawa_> heh

[04:39] <svnbot6> r12355 | audreyt++ | * Implement "pugs -d" for printing out a debugging trace

[04:39] <svnbot6> r12355 | audreyt++ |   for programs.  Full debugger is for later.

[04:39] <miyagawa_> when you say build_requires('Test::Base') and do auto_include_deps, it'll try to include Algorithm::Diff and Text::Diff, which are actually optional requirement from T::B.

[04:40] <audreyt> yeah. auto_include_deps is not "smart

[04:40] <miyagawa_> I'd just do auto_include (without _deps) but then build_requires('YAML') fails to include other YAML:: modules

[04:40] <audreyt> manual include_deps() call

[04:40] <audreyt> or put auto_include _after_ YAML b_r

[04:40] <audreyt> and then put T::B's b_r after a__i_d

[04:41] <miyagawa_> I see. lemme try

[04:44] *** kanru joined
[04:46] <miyagawa_> build_requires('Test::Base');auto_include;include_deps('YAML'); does the trick

[04:46] <miyagawa_> audreyt++

[04:46] <audreyt> yay

[04:52] <dduncan> I'm in the middle of smoking r12345, but one of the tests is taking 10 minutes and counting

[04:52] <svnbot6> r12356 | audreyt++ | * Unicode identifiers should now work again.

[04:52] <svnbot6> r12357 | markstos++ | Improve the chances of 'prove6' working on code outside of the pugs tree.

[04:52] <svnbot6> r12357 | markstos++ | It will hopefully find pugs now, still not 'Test.pm'.

[04:52] <svnbot6> r12357 | markstos++ | I'm not sure if this is portable:

[04:52] <svnbot6> r12357 | markstos++ |  `pugs --version`

[04:52] <svnbot6> r12357 | markstos++ | (Works on Windows?)

[04:52] <svnbot6> r12357 | markstos++ |     Mark

[04:53] <dduncan> I suppose that functionality to time-out long-running tests was never made

[04:53] <markstos> sleep &

[04:55] <dduncan> fortunately, I can still manually kill the 'pugs' process in question, which would then have a result like the test died rather than hanging, and so the suite moves on to the next one

[04:56] <dduncan> so the rest of the smoke can continue

[04:59] <audreyt> dduncan: yes, I saw that too

[04:59] <dduncan> note that, I saw a comment on the backlog about a hanging test, but that isn't the same one I saw hang

[05:00] <audreyt> nod

[05:00] <audreyt> I'm fixing that

[05:01] <dduncan> eg, the backlog comment said 010_Test_Builder.t was in a hard loop, but it completed normally for me ... on the other hand #21 or so had hung in my case

[05:01] <dduncan> but no matter

[05:02] <dduncan> on a separate note, do you have an ETA where one can actually declare a Mapping?  Afaik, that's the only base type that I want to use right now which isn't implemented last I saw

[05:03] <dduncan> regardless, thanks for your efforts

[05:03] <audreyt> Mapping(x=>1, y=>2) ?

[05:03] <dduncan> yes

[05:03] <audreyt> ETA is probably end of this month

[05:03] <audreyt> i.e. in a couple weeks

[05:03] <dduncan> okay

[05:04] *** agentzh joined
[05:05] <agentzh> hey, folks, what is the easiest way of uploading files from my localhost to feather?

[05:05] <dduncan> sftp?

[05:06] <agentzh> invoke that from feather?

[05:07] <gaal> morn

[05:08] <audreyt> gaal: Eval.Var has a bug

[05:08] <audreyt> eval "  my $say = -> Str $msg { say $msg }; sub f { $say(1,4,5) }; f(1,2,3)"

[05:08] <audreyt> doesn't work currently. can you help investigating if you got cycles?

[05:08] <audreyt> I need to run now to a meeting; bbl

[05:09] <gaal> will after loads of coffee

[05:12] *** kanru2 joined
[05:16] *** kanru2 is now known as kanru

[05:18] <agentzh> gaal: i'm writing a new utility similar to catalog_tests.pl. err, i've named it "smart_links.pl". :)

[05:20] <agentzh> it's supposed to work with both the old L<Sxx/xxx /.../> and the new L<Sxx/xxx/xx xx xx> magic link notations used in the test suite.

[05:20] <gaal> agentzh: excellent!

[05:20] <gaal> what's it written in?

[05:20] <agentzh> perl 5, of course.

[05:21] <gaal> some more speedups and it can be written in perl 6...

[05:21] <agentzh> gaal: do you think i should offer my own css file?

[05:21] <agentzh> gaal: the perl 5 version is even faster than i expected. :)

[05:22] <gaal> I think you should start with the existing one, and if you see it's much different than what you want it to be, switch

[05:22] <gaal> if the changes are minor, patch

[05:22] <gaal> remember to include an option to embed the css in the output file, because when we developed this stuff originally some browsers for some reason required it.

[05:22] <agentzh> gaal: you mean i should start with catalog_tests.pl?

[05:23] <gaal> I mean with the css that that uses

[05:23] <agentzh> gaal: sure.

[05:23] <agentzh> gaal: k

[05:24] *** cnhackTNT joined
[05:24] <agentzh> currently i'm optimizing smart_links.pl for memory instead of time.

[05:24] <agentzh> because i think the number of tests (and also the number of links) are still increasing.

[05:26] <gaal> were you holding all docs in memory?

[05:26] <gaal> was catalog_tests?

[05:26] <agentzh> gaal: nope.

[05:27] <agentzh> i only save the file name and line numbers in the data structure.

[05:28] <agentzh> process one file at a time.

[05:28] <gaal> wow, i'm really groggy this morning

[05:28] <agentzh> gaal: me too. :)

[05:30] <gaal> if you're still groggy I have five hours of mist ahead of me :)

[05:30] <agentzh> heh

[05:31] * agentzh goes back to hack on smart_links.pl

[05:33] * agentzh is very happy to see he can still compile pugs on win32 this morning.

[05:33] <dduncan> I also noted another test that was running about 7 minutes, and I was about to kill it, then it ended on its own

[05:33] <dduncan> t/rules/from_perl6_rules/properties.t was the one I think

[05:35] <TimToady> yeah, those naturally tend to run long

[05:35] <agentzh> hmm, it's funny to see catalog_tests.pl parses and modifies the HTML source generated from POD using HTML::TreeBuilder. i don't it's ideal, so i will take another approach.

[05:36] <agentzh> *think

[05:36] <gaal> agentzh: XML::All it :-p

[05:36] *** kanru joined
[05:37] <agentzh> gaal: will take a look at XML::All.

[05:37] *** MacVince joined
[05:38] <gaal> whee, "falseguard trace" is so useful

[05:38] <gaal> findSub var invs args | trace ("> findSub " ++ (show var) ++ " " ++ (show invs) ++ " " ++ (show args)) $ False = undefined

[05:38] <gaal> | ... other guards ...

[05:40] <agentzh> gaal: catalog_tests.pl currently uses http://dev.perl.org/css/perl.css by default, which is rather ugly in both my firefox and ie browsers. :/

[05:42] <gaal> for the synopses?

[05:42] <gaal> I thought you were asking about tests

[05:42] <gaal> by all means feel free to use another :)

[05:43] <dduncan> fyi, my smoke of r12345 is done and uploaded to the smokeserv

[05:43] <gaal> it you maintain scheme compatiblity consider doing the alternate stylesheet thing so that usres can pick

[05:43] <dduncan> it shows a 77% success rate, compared to 98% of r12237

[05:44] <dduncan> I will now pull and try again

[05:46] <agentzh> gaal: okay.

[05:46] <agentzh> dduncan: the url of the smokeserv please?

[05:47] <dduncan> http://smoke.pugscode.org/

[05:47] <lambdabot> Title: Pugs Smoke Reports

[05:47] <agentzh> thanks

[05:47] <dduncan> I suggest bookmarking it

[05:47] <TimToady> in Test::Builder, new is calling itself recursively via $Class.SUPER::new(...)

[05:47] <agentzh> dduncan: the url is broken here.

[05:48] <dduncan> it works for me

[05:48] <dduncan> what do you get?

[05:48] <agentzh> dduncan: it's redirecting to another site, right?

[05:48] <dduncan> yes

[05:48] <dduncan> but the shorter url is easier to remember

[05:48] <agentzh> redirection is killed by the great firewall.

[05:48] <dduncan> just a minute ...

[05:48] <dduncan> try this then: http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl?

[05:48] <lambdabot> Title: Pugs Smoke Reports

[05:49] <agentzh> yay, it works!

[05:49] <agentzh> bookmarking...

[05:50] <dduncan> fyi, I'm sure that some of that 20% drop was due to simple things that were already fixed since then, so it may not be the best set for looking at tests to fix

[05:50] <TimToady> which is odd, because Test::Builder.pm doesn't seem to define a superclass.

[05:51] <dduncan> for example, .new stopped working

[05:51] <dduncan> and "return;" was a parsefail

[05:55] <MacVince> I have a quick, non-Pugs or Perl6 related question: why does Audrey add "++" to the name of everyone she mentions in blog posts?  Like gaal++ and merlyn++?

[05:55] <MacVince> Praise?

[05:55] <dduncan> pretty much

[05:55] <dduncan> also, there's this little bot which pays attention to those things and keeps a karma score

[05:55] <dduncan> for those who care

[05:55] <MacVince> dduncan++

[05:55] <MacVince> ;-)

[05:56] * agentzh ++ smiles.

[05:56] <merlyn> the karma chameleon

[05:56] <dduncan> that said, the ++ notation is used in many different places, and the bot is only in some of those ... so more generically its just credit/praise

[05:56] <gaal> running out for some errands, back in a couple of hours I hope...

[05:57] <MacVince> A form of new speak in a sense?

[05:57] <MacVince> audreyt++ *= 2;

[05:59] <dduncan> fyi, most IRC clients will also holler when its user's IRC nickname is mentioned, so its common practice that if you want to reach someone, they're more likely to know if you mention their nick, often in the form of "ping <foo>"

[05:59] <dduncan> suffice it to say, your comments probably just caused a number of notifications

[05:59] <MacVince> I usually just just <nick>: hello?

[05:59] <MacVince> Heh

[06:00] <dduncan> the actual thing you say doesn't matter; just spelling out the nick exactly and in full will cause the notification

[06:00] <dduncan> but that's strictly a client feature, a common one though

[06:01] <dduncan> in my Colloquy client for Mac OS X, for example, a nick mention will cause 3 attention-gathering actions: a beep will sound, the program's dock icon will bounce (very attention grabbing, as humans are optimized to notice movement), and a brief floating text message will appear above all other app windows in the corner

[06:02] <agentzh> wow

[06:02] *** weinig is now known as weinig|sleep

[06:02] <ayrnieu> humans are also optimized to shut that shit off right away.

[06:02] <dduncan> the bouncing lasts for awhile, so even if the person's away at the moment, it may still be happening on their return

[06:02] <MacVince> dduncan: I'd find that annoying.  On OSX, I use MacIrssi which adds a red dot to the dock icon.

[06:02] <dduncan> Colloquy is customizable, but what I describe is its default behaviour, and I haven't changed it

[06:03] <MacVince> And on Linux, I use rcirc which just makes a small mention in Emacs statusbar.  Of course, I could add a hook and start playing music and stuff

[06:03] <dduncan> since I like to respond quickly to people, it is useful

[06:03] <MacVince> dduncan: I wonder if all three are necessary. Like you said, the bouncy icon is probably enough to grab your attention

[06:03] <MacVince> That's just me though.

[06:03] <dduncan> yes, but that and the sound attract different senses

[06:04] <MacVince> TMTOWTGN

[06:04] <dduncan> ears vs eyes

[06:04] <MacVince> (GN -> Get Notified)

[06:04] <dduncan> I figured that out

[06:04] <MacVince> Just in case

[06:04] <dduncan> come to think of it, I think the floating message doesn't always appear ... probably just appears when the computer's sound is turned down, as a substitution

[06:04] <dduncan> maybe

[06:06] <ayrnieu> macvince - you should've said "JIC".

[06:06] <MacVince> ayrnieu: ;)

[06:07] <dduncan> anyway, I've got some $job work to do, so I will sign off, &

[06:07] *** dduncan left
[06:08] <ayrnieu> see, with a less annoying IRC client, he could just silently not pay attention for a while, and then respond four hours from now, to someone who will notice tomorrow and catch dduncan in passing.

[06:10] <agentzh> gaal: i would reuse the ``refresh_specs'' sub in docs/perl6/Makefie.PL. so smart_links.pl can stick to docs/perl6/Spec/*.pod and the user don't have to specify the directory where synopses live.

[06:34] *** crem joined
[06:41] *** HXanadu joined
[06:50] <MacVince> Do I absolutely need parrot to use pugs?

[06:50] <ayrnieu> macvince - no.

[06:50] <MacVince> ayrnieu: cool, thanks.

[06:50] <MacVince> Ubuntu doesn't have the latest version and I can't get it to compile properly.

[06:50] <TimToady> however, you're limited to pcre-style regexen.

[06:53] <MacVince> TimToady: I am more interested in the features such as list manipulation

[06:53] <MacVince> Just to check them out.

[06:55] <agentzh> whee! util/smart_links.pl already parses docs/Perl6/Spec/*.pod and t/*/*.t.

[06:56] <agentzh> the next step is to glue them together...

[07:05] <TreyHarris> how do i run just a single .t file correctly?  i notice that 'pugs ....file.t' doesn't work

[07:08] <TreyHarris> ah, i got it.  util/prove6

[07:13] <agentzh> TreyHarris: anther choice is: "pugs -Iblib6/lib t/statements/do.t" :)

[07:14] <agentzh> *another

[07:14] <TreyHarris> agentzh: ah, will that show me what todos unexpectedly succeeded?

[07:14] <TreyHarris> that's what i want

[07:14] <agentzh> of course, util/prove6 is more handy.

[07:15] *** buubot joined
[07:16] * agentzh is excited to see more and more people are using util/prove6.

[07:17] <TreyHarris> agentzh: oh, did you write it?

[07:17] <agentzh> yes

[07:17] <agentzh> the p5 implementation is done by me.

[07:17] <TreyHarris> agentzh: i think i'd like to add a flag to point out succeeded todos.  would you mind if i did so?

[07:18] <TreyHarris> like --show-todos or something

[07:18] <agentzh> TreyHarris: go ahead!

[07:26] * agentzh is tired of the long long "===" thread on p6l.

[07:31] *** elmex joined
[07:32] <TreyHarris> agentzh: ah, it's more complicated than i thought, i'd never actually looked at the 'bonus' field before.  i thought it was a list of the tests that had unexpectedly passed.  it's actually a counter.  so to do what i want, i'll have to handle the TAP output myself.  so not tonight :-)

[07:32] <agentzh> hehe

[07:33] <agentzh> no hurry.

[07:34] <agentzh> well, manipulating TAP output directly in prove6 is not quite clean i'm afraid.

[07:35] <TreyHarris> yes, i noticed that.  that's why i said not tonight :-)

[07:35] *** shachaf joined
[07:36] <TreyHarris> are we marking tests :todo that succeed, but for the wrong reason?  like a test that 'frobniz' returns undef under the circumstances it's supposed to, but in fact 'frobniz' is always returning undef?

[07:37] <agentzh> sorry, i don't quite follow you.

[07:38] <agentzh> btw, the :todo notation currently used in the test suite is now deprecated.

[07:38] <agentzh> please see TASKS for more info on this.

[07:39] <TreyHarris> say the behavior we want to test for is that "foo" returns zero when "$bar" is 1.  but actually, "foo" is totally unimplemented such that any use of "foo" returns zero.  so all the other tests involving "foo" need to be marked todo.  should the one that's currently succeeding by accident be marked todo as well?

[07:41] <agentzh> TreyHarris: yes, it's very likely to happen.

[07:42] <agentzh> but i think audreyt tends to unTODO succeeding TODO tests.

[07:42] <TreyHarris> agentzh: ok, i read TASKS... it sounds like it's deprecated, but the successor is not yet decided?

[07:42] <agentzh> TreyHarris: the successor is a call to the &Test::todo function.

[07:43] <agentzh> Test::todo currently is not implemented in Test.pm.

[07:45] <TreyHarris> agentzh: so what is the upshot of that?  don't write any tests that are todo until it is?  write them using the new syntax even though that will cause the test suite to fail?  write the new syntax, but wrap it in eval?  or continue using :todo for the time being? :-)

[07:46] <agentzh> TreyHarris: currently the strategy is simply leaving tests failing until the new todo mechanism gets implemented.

[07:47] <agentzh> well, parsefail in tests is more annoying.

[07:47] <TreyHarris> ok.  comment them as todo? or just write them

[07:47] <agentzh> just write them.

[07:47] <TreyHarris> the two tests i was going to write tonight are both parsefail.

[07:47] <agentzh> if they're basic tests

[07:48] <agentzh> put tests which can't be parsed in eval please.

[07:48] <agentzh> so you can test your tests.

[07:48] <agentzh> *so that

[07:48] <TreyHarris> ok.  but don't mark todo

[07:49] <TreyHarris> got it

[07:49] <agentzh> :)

[08:06] <agentzh> oh no...smart_links.pl has found many broken links in the test suite...

[08:06] *** ruoso joined
[08:10] *** traecer left
[08:13] <TreyHarris> agentzh: take a look at this commit (r12358) and tell me if that's what you meant

[08:13] <svnbot6> r12358 | trey++ | Added tests for 0 but True to oo/syntax-but.t

[08:13] <agentzh> TreyHarris: looking

[08:15] <gaal> remoose!

[08:16] <agentzh> TreyHarris: i think the smart link in your test file is broken.

[08:16] <agentzh> gaal: a lot of old smart links are broken in the test suite. :/

[08:16] <agentzh> gaal: i'm fixing them by means of smart_links.pl.

[08:17] <agentzh> TreyHarris: L<<S02/Context /objects can override the class definition:/>>

[08:17] <gaal> agentzh: excellent! I'm backlogging now but I see you mentioned manipulating TAP data

[08:17] <gaal> please look at Test::TAP::Model

[08:17] <agentzh> gaal: it's TreyHarris who wants to manipulate TAP data. :)

[08:17] <TreyHarris> agentzh: ah, because it spans lines?  the smart link only works on a single line in the POD?

[08:18] <agentzh> TreyHarris: no, smart links can span two lines.

[08:18] <gaal> agentzh: wanna implement &Test::todo?

[08:18] <gaal> ah

[08:18] <agentzh> the syntax is L<...> instead of L<<...>>.

[08:18] <gaal> TreyHarris: I'm backlogging now but I see you mentioned manipulating TAP data

[08:18] <gaal> please look at Test::TAP::Model

[08:19] <agentzh> gaal: are $?VERSION and $?COMPILER already implemented in pugs?

[08:19] <gaal> ?eval $?VERSION

[08:19] <gaal> I know $?COMPILER isn't

[08:19] <agentzh> once they'

[08:19] <agentzh> re available, i'd have a try.

[08:20] <agentzh> :)

[08:20] <agentzh> TreyHarris: please look at t/syntax/comments.t for the new smart link notation.

[08:20] <gaal> agentzh: nah, go ahead, it's a trivial change from "%?CONFIG<xyz>" to $?xyz :-)

[08:20] <gaal> or, alternatively, you could add them yourself! it's easy :)

[08:20] <agentzh> TreyHarris: L<../.. /.../> is deprecated now.

[08:20] <gaal> agentzh: see Pugs.Run

[08:21] <agentzh> gaal: looking

[08:21] <TreyHarris> agentzh: oh.  ok, then one more time after this commit. :-)

[08:21] <svnbot6> r12359 | trey++ | Fixed smartlink, and the documentation that led me wrong

[08:21] <agentzh> gaal: next?

[08:21] <gaal> hmm?

[08:22] <gaal> around line 140

[08:22] <gaal> all that block defines globals

[08:22] <agentzh> okay

[08:22] <agentzh> hmm, it reads quite well. :)

[08:23] <gaal> look how $*OS works

[08:23] <gaal> it looks at the config

[08:23] <gaal> just add two symbols like that, that peek at versnum and perl_compiler

[08:24] <gaal> of course these eventually need to be renamed, but they do need to be in Pugs.Config so pugs -V shows them

[08:24] <TreyHarris> agentzh: i'm thoroughly confused.  look at the very first smartlink in the file t/syntax/comments.t you pointed me to.  what in the world does "Embedded comments"

[08:24] <agentzh> gaal: will do!

[08:24] <gaal> agentzh++

[08:24] * gaal looks into the OUTER::say problem

[08:24] <TreyHarris> ... does '"Embedded comments" "#" plus any bracket' mean?

[08:24] <agentzh> TreyHarris: looking

[08:25] <agentzh> Embedded comments is a =head in POD.

[08:25] <TreyHarris> no it isn't.

[08:25] <agentzh> TreyHarris: after the second slash, it's a list of "keywords".

[08:25] <TreyHarris> unless it's recently been changed

[08:25] <TreyHarris> ok.  and what do the keywords do?

[08:26] <TreyHarris> so the keywords here are ["Embedded comments", "#", 'plus', 'any', 'bracket']?

[08:26] <agentzh> a sec...

[08:26] <agentzh> sorry, "Whitespace and Comments" is the section name (=head)

[08:27] <agentzh> TreyHarris: eys

[08:27] <agentzh> *yes

[08:27] <TreyHarris> ok.  so regexes are no longer used?

[08:27] <agentzh> but all the keywords should appear within one sentence.

[08:27] <agentzh> and the order is significant.

[08:28] <agentzh> Treyharris: the regex notation is obsolete but will still be supported during the meantime.

[08:28] <agentzh> at last, all the smart links in the suite will switch to the new notation.

[08:29] <agentzh> in fact, i'm implemented util/smart_links.pl which can recognized all the smart links in the test suite.

[08:29] <agentzh> *implementing

[08:32] <TreyHarris> ok, so look at this commit and tell me if i have it right now

[08:32] <svnbot6> r12360 | trey++ | Fixed smartlink again, and the documentation that led me wrong again.  Thanks to agentzh++ for pointing me at the new syntax

[08:33] <TreyHarris> then i'll go to bed :-)

[08:33] *** dduncan joined
[08:33] <agentzh> TreyHarris: the trailing slash is not needed.

[08:34] <agentzh> the trailing slash is actually a indicator of the good old regex notation. :)

[08:34] <agentzh> *an

[08:34] <TreyHarris> oh, bleh :-)

[08:35] <dduncan> ayrnieu, regarding my IRC client, I made a choice to be signed into this IRC channel when I wanted to be responsive to it or to talk, and I sign out when I'm not or it is sleep time ... its not like I miss part of the conversation from it being closed, thanks to this channel being irc-logged

[08:35] * agentzh wonders if the new smart link syntax is so difficult to understand.

[08:35] <svnbot6> r12361 | trey++ | One last time agentzh++

[08:35] <agentzh> TreyHarris++

[08:36] <dduncan> agentzh, regarding the === thread on p6l, I don't plan to respond to it any more, so that should help to not extend it

[08:36] <TreyHarris> agentzh: no, it's just that the README made no mention of it, and was fairly specific about the wrong syntax

[08:36] <agentzh> TreyHarris: i will tweak t/README shortly.

[08:36] <agentzh> dduncan: cool

[08:36] <dduncan> as mentioned, the matter is well documented in Synopsis 3, so a discussion isn't really needed on the list

[08:36] <TreyHarris> agentzh: oh, you didn't like my tweak?

[08:37] <agentzh> TreyHarris: please do if you like.

[08:37] <agentzh> :)

[08:37] <agentzh> dduncan: indeed

[08:37] <TreyHarris> agentzh: no, i mean the one i already committed

[08:37] <agentzh> TreyHarris: oh, i like it.

[08:37] <agentzh> so i said TreyHarris++

[08:38] *** juju` joined
[08:38] <agentzh> TreyHarris: have a sweet dream!

[08:38] <TreyHarris> ah, ok.  i thought you had missed my change to t/README

[08:38] <TreyHarris> thanks :-)

[08:46] *** kane-xs joined
[08:46] <svnbot6> r12362 | agentz++ | [t/builtins]

[08:46] <svnbot6> r12362 | agentz++ | fixed various broken smart links in the tests. (s/Perl6::Str/Str/g)

[08:58] <svnbot6> r12363 | agentz++ | added t/TASKS which holds tasks for the test suite.

[08:59] * agentzh has no idea why catalog_tests.pl didn't help fixing broken links.

[09:01] *** shachaf_ joined
[09:01] <svnbot6> r12364 | agentz++ | [t/builtins]

[09:01] <svnbot6> r12364 | agentz++ | fixed more broken smartlinks in the tests (s/Perl6::Hashes/Hash/g, s/Perl6::Arrays/Array/g)

[09:03] <agentzh> suppertime &

[09:03] *** agentzh left
[09:24] *** xinming joined
[09:31] *** TimToady_ joined
[09:43] *** dduncan left
[09:53] *** foo\ joined
[10:02] *** chris2 joined
[10:17] *** pmurias joined
[10:17] <pmurias> gaal: ping

[10:20] <gaal> hi pmurias

[10:20] <pmurias> hi

[10:20] <pmurias> have you seen hasktags?

[10:21] <pmurias> included with ghc

[10:22] <gaal> it didn't work for me when i tried it, don't remember why

[10:24] <pmurias> having problems with it to

[10:24] <gaal> how much RAM does make profiled need? I keep getting OOM on Pugs.AST.Internals in -prof mode

[10:28] * pmurias has too little RAM, to compile even unoptimised in sensible time

[10:51] <pmurias> gaal: i had sort(1) the tags file and add !_TAG_FILE_SORTED to it

[10:51] <gaal> hasktags or ctags?

[10:52] <gaal> if the former may I suggest you write a patch :-)

[10:53] <gaal> unlines $ "!_TAG_FILE_SORTED" ++ sort $ lines whateverMakesTags

[10:53] <pmurias> the former

[10:54] <gaal> though it's slightly complicated by the fact that recent versions have an '-a'ppend mode

[10:55] <gaal> whew, with 600m allocated and 128m swap 'make profiled' managed to overcome P.A.I

[10:55] <audreyt> rehi

[10:55] <gaal> hey audreyt!

[10:55] <pmurias> hello

[10:56] <gaal> no progress on the Var bug

[10:56] <gaal> I should look into buying some more ram for this machine, clearly 1gb is not enough :/

[10:57] <pmurias> discovered a python runtime in yhc

[10:58] <gaal> wow, the graph for prime search on http://www-users.cs.york.ac.uk/~ndm/yhc/ looks impossible in favor of ghc

[10:58] <pmurias> i.e. a virtual machine for haskell coded in python

[10:58] <lambdabot> Title: yhc - York Haskell Compiler

[10:58] *** Aankhen`` joined
[10:58] <gaal> of course it can't stay linear forever :)

[10:59] *** agentzh joined
[11:00] *** plisk joined
[11:01] <audreyt> the OUTER problem turns out to be false alarm

[11:01] <audreyt> my $say = -> Str $msg { say $msg }; sub f { $say(1,4,5) }; f(1,2,3)

[11:01] <audreyt> doesn't work because param/arg mismatch

[11:01] <audreyt> but the error msg could be improved

[11:01] <gaal> indeed

[11:01] <gaal> though...

[11:02] <gaal> in absence of another say, shouldn't the list be coerced to a Str?

[11:02] <gaal> audreyt: how long does make profiled take on your box?

[11:03] <gaal> here it's quite prohibitive :(

[11:03] <audreyt> from scratch? 30min or so

[11:03] <audreyt> but "make fast profiled" should be faster

[11:03] *** TimToady joined
[11:03] <pmurias> audreyt: how much RAM do you have?

[11:04] <audreyt> 2g

[11:04] <gaal> oh, I wasn't aware that worked: I thought I saw -O hardcoded into the makefile rule

[11:04] <audreyt> "profiled" uses -O

[11:04] <audreyt> because measuring non-optimised profile make very little sense

[11:04] <audreyt> totally different behaviour

[11:04] * gaal nods

[11:05] *** evalbot_12364 joined
[11:05] <gaal> though if all you need is a stacktrace...

[11:05] <audreyt> add a fastprof target?

[11:06] <gaal> * explosion?

[11:07] <audreyt> nah

[11:07] <audreyt> done

[11:08] <gaal> arg, beat me to it

[11:08] *** lisppaste3 joined
[11:08] *** evalbot_12365 joined
[11:08] <svnbot6> r12365 | audreyt++ | * add "make prof" and "make fastprof" as synonyms to

[11:08] <svnbot6> r12365 | audreyt++ |   "make profiled" and "make unoptimised-profiled".

[11:08] *** ludan joined
[11:11] <gaal> is the pugs used by evalbot compiled fast or opt?

[11:11] <audreyt> opt

[11:13] <gaal> didn't evalbot have a feature of lazy nick changes?

[11:14] <audreyt> it does. I'm just testing the build

[11:15] <gaal> k. once pugs remakes here I'll try to improve that error message (dump the capture!)

[11:15] <gaal> dump the infered Sig from a concrete Capt

[11:16] <agentzh> gaal, audreyt: how about adding a script file docs/Perl6/Spec/update which can sync the synopses by invoking docs/Perl6/Makefile.PL?

[11:16] <agentzh> i think it's a good shortcut.

[11:16] <agentzh> and also an update.bat for win32 users.

[11:16] <svnbot6> r12366 | audreyt++ | * Eval.Var: improve the errmsg a bit by pretending it's

[11:16] <svnbot6> r12366 | audreyt++ |   always a multi match failure (which it is.)

[11:17] <gaal> :-)

[11:17] <agentzh> my util/smart_links.pl will use that. :)

[11:17] <gaal> agentzh: dunno, is sv{k,n} up so bad?

[11:17] <gaal> ah

[11:17] <gaal> then sure :)

[11:17] <gaal> or maybe:

[11:17] <agentzh> hehe

[11:18] <gaal> change that Makefile.PL to do the update at make time, not mf generation time

[11:18] <gaal> and call the rule in your script?

[11:18] <gaal> not sure

[11:19] <agentzh> maybe put the code to Spec/update, and let Makefile.PL invoke ``update'' instead.

[11:19] <gaal> sure

[11:19] <agentzh> okay

[11:21] *** SubStack joined
[11:24] <gaal> audreyt: can you explain how withExternalCall works? how the fmap err works?

[11:25] <audreyt> sure. but dinner. briefly:

[11:26] <audreyt> err :: b -> Maybe a -> Either b a

[11:26] <gaal> ah ok, that explains it :)

[11:26] <gaal> it's like assert, a bit

[11:26] <audreyt> yup

[11:27] <audreyt> bbiab :)

[11:29] *** evalbot_12366_ joined
[11:29] *** xinming_ joined
[11:29] *** mdiep joined
[11:33] *** Aankhen`` joined
[11:35] *** evalbot_12366 joined
[11:36] <audreyt> ?eval 1..10

[11:36] <evalbot_12366> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

[11:43] *** nothingmuch joined
[11:43] <svnbot6> r12367 | agentz++ | [docs/Perl6]

[11:43] <svnbot6> r12367 | agentz++ | * added script Spec/update which can sync the synopses from the svn repos

[11:43] <svnbot6> r12367 | agentz++ | removed the syn-updating code from Makefile.PL and make Makefile.PL call Spec/update instead

[11:43] <svnbot6> r12367 | agentz++ | added Spec/update.bat which is a Win32 shortcut for the Spc/update script.

[11:52] *** lichtkind joined
[11:57] *** tifo joined
[11:59] *** weinig joined
[12:01] <svnbot6> r12368 | agentz++ | added util/smart_links.pl which serves a successor of util/catalog_tests.pl. this script is still under development but you can already use it to verify the smartlinks used in a test file or the whole test suit. comments are very welcome.

[12:02] <agentzh> s/suit/suite/

[12:02] *** bpphillips joined
[12:06] <agentzh> s/serves a/serves as a/

[12:07] <svnbot6> r12369 | agentz++ | [util/smart_links.pl]

[12:07] <svnbot6> r12369 | agentz++ | added support for the old L<<...>> syntax.

[12:07] <svnbot6> r12369 | agentz++ | better error messages

[12:18] *** xinming_ is now known as xinming

[12:19] *** Limbic_Region joined
[12:23] <kane-xs> seen audreyt

[12:23] <jabbot> kane-xs: audreyt was seen 46 minutes 48 seconds ago

[12:33] <agentzh> hmm, iblech seems to have written many tests for pugs.

[12:35] <agentzh> seen agentzh

[12:35] <jabbot> agentzh: agentzh was seen 2 minutes 10 seconds ago

[12:35] <agentzh> hehe

[12:36] <nothingmuch> iblech++

[12:36] <tifo> q

[12:36] <tifo> \quit

[12:36] <agentzh> nothingmuch: a lot of legacy smartlinks in the test suite are broken...

[12:36] <agentzh> tifo: "/quit"

[12:37] <agentzh> nothingmuch: the synopses are changing everyday...

[12:37] <nothingmuch> agentzh: yes... there's no really good way to link

[12:38] <nothingmuch> maybe we should use X<> nodes in the synopses

[12:38] <nothingmuch> X<feature_Name>

[12:38] <agentzh> currently i'm fixing them via my util/smart_links.pl.

[12:38] <agentzh> nothingmuch: the problem is even feature names can be changing. :)

[12:38] <svnbot6> r12370 | agentz++ | fixed many more broken smartlinks in the test suite with help from util/smart_links.pl

[12:39] <nothingmuch> yes

[12:39] <nothingmuch> but that bit of text is more noticable

[12:39] <nothingmuch> which means that if someone changes tie

[12:39] <nothingmuch> the X<>

[12:39] <nothingmuch> they can change the links pointing to it

[12:39] <agentzh> nothingmuch: currently i'm introducing "keywords list" instead of plain regexes in the smartlinks.

[12:39] <nothingmuch> X<> is for keywords

[12:39] <nothingmuch> so i think that's a consistent idea =)

[12:40] <nothingmuch> they simply don't show up in the formatted output

[12:40] <agentzh> i think key words are more reliable and more descriptive than a single regex.

[12:40] <nothingmuch> it's like <a name=..."></a>

[12:40] <nothingmuch> yes, i think you are correct

[12:40] * nothingmuch needs a break from the computer

[12:40] <agentzh> nothingmuch: i was actually thinking about your suggestion,

[12:40] <nothingmuch> too much sysadmin for the day

[12:41] <nothingmuch> either way, it looks like you're taking it in the right direction =)

[12:41] <nothingmuch> agentzh++

[12:41] <agentzh> but introducing feature names is adding a new level of abstraction,

[12:41] <agentzh> which may be not a good thing.

[12:41] <nothingmuch> *shrug*

[12:41] <agentzh> nothingmuch: thanks.

[12:41] <nothingmuch> every approach has it's drawbacks

[12:41] <nothingmuch> it's just a tool to be aware of

[12:41] <agentzh> nothingmuch: quite right.

[12:42] <nothingmuch> anymoose, ciao!

[12:42] <agentzh> bye

[12:46] *** FurnaceBoy joined
[12:46] *** mauke_ joined
[12:48] <svnbot6> r12371 | agentz++ | [t/TASKS]

[12:48] <svnbot6> r12371 | agentz++ | added fixing broken smartlinks to the test suite's TASKS.

[12:51] *** bpphillips left
[12:54] *** l33t_h4x0r joined
[12:54] <l33t_h4x0r> i kno more about computas than u all im da best hacker eva

[12:55] <mauke_> great, do you want a committer bit?

[12:55] <Limbic_Region> ok - i'll bite, how about finishing parrot off for us this month so we can all focus on something else?

[12:55] <l33t_h4x0r> i kno more about computas than u all im da best hacker eva

[12:56] <gaal> is p = np?

[12:56] <Limbic_Region> s/parrot/parrot, ponie, perl6, pugs/

[12:56] <mauke_> l33t_h4x0r: patches welcome

[12:56] <l33t_h4x0r> k

[12:57] *** bpphillips joined
[12:58] *** l33t_h4x0r left
[12:59] * agentzh has no idea which language 133t_h4x0r is using.

[12:59] <FurnaceBoy> it's some dialect of Idiot :)

[12:59] <agentzh> hehe

[13:01] *** mauke_ is now known as mauke

[13:03] <agentzh> bedtime &

[13:03] *** agentzh left
[13:09] *** b_jonas joined
[13:13] *** fglock joined
[13:16] <pmurias> hi

[13:19] *** jferrero joined
[13:29] *** weinig is now known as weinig|work

[13:30] <fglock> hi

[13:45] *** vel joined
[14:09] *** b_jonas left
[14:12] <svnbot6> r12372 | audreyt++ | * Unicode as hash keys now work again.

[14:23] *** hexmode joined
[14:34] *** cjeris joined
[14:38] *** penk joined
[14:42] *** elmex joined
[14:57] *** mdiep joined
[14:58] *** plisk joined
[15:13] *** MacVince joined
[15:15] *** mdiep_ joined
[15:24] *** ajs joined
[15:26] *** kanru joined
[15:27] *** marmic joined
[15:31] <svnbot6> r12373 | audreyt++ | * Reduce the verbosity level of (show ClassTree) a bit.

[15:33] *** justatheory joined
[15:33] <svnbot6> r12374 | audreyt++ | * Fix infinite loop in SUPER::new dispatch.

[15:33] <svnbot6> r12374 | audreyt++ | * Also refactoed Eval.Var with implicit parameters, so we can

[15:33] <svnbot6> r12374 | audreyt++ |   more easily get a stack trace when something goes wrong, with

[15:33] <svnbot6> r12374 | audreyt++ |   "make fastprof" and then "./pugs-prof t.pl +RTS -xs".

[15:34] <TimToady> audreyt++

[15:35] <audreyt> :)

[15:40] <audreyt> TimToady: try smoking again?

[15:40] <TimToady> already compiling

[15:40] <audreyt> ooh.

[15:41] <TimToady> and have some hope of leaving it running while I shower, due to audreyt++

[15:41] <TimToady> I used to have to baby sit it for SUPER::new

[15:41] <TimToady> s:6th/<sp>//

[15:43] <TimToady> and the compile takes a while since I always to optimized.

[15:43] <audreyt> *nod*

[15:43] <TimToady> *do

[15:44] *** tifo joined
[15:44] *** discordja joined
[15:44] <TimToady> build failed, paste soon

[15:44] <audreyt> it should be noticeably faster, I think. unless there's some hidden infinite-loop-ish things that I missed...

[15:44] <audreyt> oy. ok

[15:45] <audreyt> feather is still building, so I havn't seen 6.4.x compile log yet

[15:45] <pasteling> "TimToady" at 71.139.13.50 pasted "build fail" (9 lines, 579B) at http://sial.org/pbot/19073

[15:46] <audreyt> hm, 6.4 wants all contextual variables to be mentioned by name. even unused

[15:47] <audreyt> thinking

[15:52] *** cm joined
[15:55] <audreyt> essentially reverted.

[15:55] <audreyt> (infinte loop fix is still there)

[15:56] <audreyt> r12375 should build on 6.4 now

[15:56] <svnbot6> r12375 | audreyt++ | * So much for contextual variables and dynamic binding --

[15:56] <svnbot6> r12375 | audreyt++ |   GHC 6.4's mutual recursion limitation forced us to put

[15:56] <svnbot6> r12375 | audreyt++ |   Eval.Var.findSub into a deeply nested recursive group again.

[15:56] <svnbot6> r12375 | audreyt++ |   /me pines for GHC 6.6...

[15:58] <svnbot6> r12376 | fglock++ | v6 - 'state' array and hash

[15:59] *** rlb3 joined
[16:00] <TimToady> hang on, parrot broke its build and I'm working around it...

[16:01] * audreyt meanwhile fixes pugs -CJS

[16:02] <[particle]> timtoady: same problem from yesterday?

[16:02] <TimToady> no, 4 missing files from WMLScript

[16:02] <TimToady> MANIFEST check upchucks

[16:02] <[particle]> fixed in 14179

[16:02] <[particle]> (aka HEAD)

[16:03] <TimToady> okay, that's recenter than a couple minutes ago. :)

[16:03] <[particle]> you can also work around by C<perl Configure.pl --nomanicheck>

[16:03] <TimToady> k, thanks.

[16:03] <TimToady> is the fix to delete the lines from MANIFEST or add the files?

[16:04] <[particle]> the fix is to regenerate MANIFEST :)

[16:04] <svnbot6> r12377 | audreyt++ | * fix JS prelude generation to take type sigil into account

[16:04] <TimToady> ok, then my patch will svn up smoothly, thanks.

[16:05] <[particle]> the files were moved from foo/src/bar to foo/bar

[16:06] <TimToady> np, I still had my vi session, so I undid.

[16:06] <audreyt> TesT::Builder on 020.t still loops. fixing

[16:06] <[particle]> there's always svn revert, too

[16:06] <TimToady> that implies an understanding of svn.  :)

[16:09] <TimToady> smoking, getting a lot of pugs: Internal error: Sigilless var: "linux"

[16:12] <audreyt> hrm.

[16:14] <TimToady> looks like Test-Builder is still looping.

[16:14] <audreyt> just fixed. committing

[16:14] <audreyt> re sigillss var: does it occur with rules?

[16:14] <audreyt> (as I'm not seeing it here, and embparrot is only possibility I can think of)

[16:16] <TimToady> not sure, error message is uninformative, must do divide-n-conquer

[16:18] <audreyt> I'm getting it too. fixing

[16:18] <TimToady> minimal test case in one file: use File::Spec; use Config::Tiny;

[16:19] <TimToady> so down in one of those files

[16:19] *** iblechbot joined
[16:19] <audreyt> $?OS triggers it.

[16:19] <TimToady> hence "linux"

[16:19] <TimToady> (for me)

[16:19] *** jferrero joined
[16:20] <audreyt> aye

[16:20] <audreyt> recompiling to make sure

[16:28] <svnbot6> r12378 | audreyt++ | * Pugs.hs: "run" in ghci now works again.

[16:28] <svnbot6> r12379 | audreyt++ | * Pugs.Parser: Allow ::Foo::Bar as well as ::Foo.

[16:30] <TimToady> Test::Builder::Test.new doesn't seem to be finding its constructor.

[16:30] <svnbot6> r12380 | audreyt++ | * Pugs.Eval: Improve the "pugs -d" stack trace to be strict.

[16:30] <svnbot6> r12381 | audreyt++ | * Pugs.hs: Enable "pugs -d" again

[16:31] <audreyt> r12382 should be good for resmoke.

[16:31] <audreyt> hand-run TesT::Builder tests now pass

[16:32] <audreyt> bug was that ::Test::Builder wasn't recognized as type literal

[16:32] <svnbot6> r12382 | audreyt++ | * Pugs.Eval.Var: $?OS and $?MODULE no longer triggers

[16:32] <svnbot6> r12382 | audreyt++ |   "sigilless var" errors again.

[16:32] <audreyt> (only ::Test was)

[16:33] *** Psyche^ joined
[16:35] <TimToady> smoking, my hand test also passes, so I'm probably good.

[16:35] <audreyt> yay

[16:35] <audreyt> TimToady++

[16:35] * audreyt goes sleeping

[16:36] <TimToady> sleep hard.

[16:36] *** SageLT joined
[16:36] <svnbot6> r12383 | fglock++ | v6 - initial implementation of 'constant'

[16:36] <svnbot6> r12383 | fglock++ | PCR - token <null>

[16:38] *** Eimi joined
[16:41] *** bradleym joined
[16:41] <svnbot6> r12384 | audreyt++ | * builtins/perl.t and builtins/perl2.t: "\7" and "\123"

[16:41] <svnbot6> r12384 | audreyt++ |   forms are now verboton.

[16:42] *** Aankh|Clone joined
[16:45] *** Psyche^ is now known as Patterner

[16:45] <svnbot6> r12385 | fglock++ | PCR - moved "what's implemented" list from Pod to TODO

[16:45] <svnbot6> r12386 | lwall++ | \229 -> \d229

[16:48] *** Aankh|Clone joined
[16:48] <svnbot6> r12387 | audreyt++ | * Remove the "reduce 1st chunk by 1/3" heuristics

[16:48] <svnbot6> r12387 | audreyt++ |   used by parallel yaml_harness.pl, for recent

[16:48] <svnbot6> r12387 | audreyt++ |   refactorings has rendered ext/ tests roughly as

[16:48] <svnbot6> r12387 | audreyt++ |   fast as t/ ones.

[16:53] *** bernhard joined
[17:01] *** weinig|work is now known as weinig

[17:10] *** zgh joined
[17:12] *** amnesiac joined
[17:15] <svnbot6> r12388 | fglock++ | v6 - 'Expression' code cleanup

[17:16] *** baest joined
[17:18] *** Limbic_Region joined
[17:18] <svnbot6> r12389 | fglock++ | v6 - code cleanup

[17:32] <Limbic_Region> ?eval my @foo = 1..4; @foo.end

[17:32] *** evalbot_12366 is now known as evalbot_12389

[17:32] <evalbot_12389> 3

[17:33] <wolverian> ?eval (1..4).tail

[17:33] <evalbot_12389> Error: No compatible subroutine found: "&tail"

[17:33] <wolverian> noo :(

[17:33] <wolverian> ?eval &tail ::= &postfix:<[ ]>.assuming(1..)

[17:33] <evalbot_12389> Error:  unexpected ")" expecting comment or term

[17:34] <wolverian> erm

[17:34] <Limbic_Region> what's the method to get the count again?

[17:34] <wolverian> ?eval &tail ::= &postfix:<[ ]>.assuming(1...)

[17:34] <evalbot_12389> pugs: *** Undeclared variable: "&postfix:[ ]"     at <eval> line 1, column 11-40

[17:34] <Limbic_Region> ?eval my @foo = 1..4; @foo.count

[17:34] <evalbot_12389> Error: No compatible subroutine found: "&count"

[17:34] <wolverian> ?eval ("a".."c").elems

[17:34] <svnbot6> r12390 | audreyt++ | * from_perl6_rules/*.t: save some time by adding a =begin END

[17:34] <svnbot6> r12390 | audreyt++ |   before disabled tests.

[17:34] <evalbot_12389> 3

[17:34] <Limbic_Region> thanks

[17:34] <wolverian> np

[17:34] <Limbic_Region> ok - what about this

[17:35] <Limbic_Region> for @array -> $elem { $elem.index }   # anything like that possible?

[17:36] <TimToady> ?eval for @array.kv -> $i, $elem { say $i }

[17:36] <evalbot_12389> Error: Undeclared variable: "@array"

[17:36] <Limbic_Region> heh

[17:36] <TimToady> ?eval for [1,2,3].kv -> $i, $elem { say $i }

[17:36] <evalbot_12389> OUTPUT[0 1 2 ] undef

[17:37] <Limbic_Region> TimToady - I was thinking more along the lines of an aliased array element automagically knowing stuff so that

[17:37] <TimToady> too much overhead

[17:37] <Limbic_Region> $elem.delete or $elem.index etc would just work

[17:37] <ayrnieu> limbic - what else would it know?

[17:37] *** SageLT joined
[17:37] <Limbic_Region> TimToady - not thinking in core

[17:37] <Limbic_Region> thinking - possibilities

[17:37] <TimToady> taking into account the possibilities induces overhead

[17:38] <TimToady> better if they're declared upfront

[17:38] <Limbic_Region> so in essense, you would have to resort to @foo being an array of tied $elems

[17:38] <TimToady> on top of which, an object can be a member of more than one array simultaneously

[17:39] * Limbic_Region mumbles something about that darn quantum entanglement

[17:39] <Limbic_Region> ;-)

[17:39] <TimToady> if you're going to privilege the array in the for loop, it might as well be explicitly declared there somehow

[17:40] * [particle] plays a 10-dimensional violin for Limbic_Region

[17:40] <TimToady> if I recall, this is all gone through in the original apocalypse...

[17:40] <TimToady> since this was one of the RFCs

[17:40] * Limbic_Region wasn't around then

[17:41] <TimToady> well, there are probably more important READTHEMs than that...

[17:42] <TimToady> and I don't mind repeating myself, up to a point.

[17:42] <TimToady> might even be a 10-dimensional point.

[17:43] <Limbic_Region> well, I think of #perl6 as being more of a playground and the list as being more serious - if I ask on the list it is because I have done my homework and still don't have a clue

[17:43] <Limbic_Region> here - just musings

[17:45] <Limbic_Region> ?eval my @foo = 1..5; my @bar = @foo.elems; ~@bar

[17:45] *** evalbot_12389 is now known as evalbot_12390

[17:45] <evalbot_12390> "5"

[17:46] <PerlJam> Limbic_Region: only the Synopses are serious.  Anything else is just play.  :-)

[17:46] <PerlJam> And even then the Synposes are only provisionally serious

[17:47] * Limbic_Region mumbles something about still thinking .elems should behave differently in list context

[17:48] <Limbic_Region> hrm - but then again, why

[17:48] <Limbic_Region> ?eval my @foo = 1..5; my @bar = @foo; ~@bar

[17:48] <evalbot_12390> "1 2 3 4 5"

[17:49] <Limbic_Region> ?eval my $str = "1234"; $str.chars;

[17:49] <evalbot_12390> 4

[17:49] <TimToady> ?eval my @foo = 1..5; say @foo.int;

[17:49] <evalbot_12390> OUTPUT[5 ] Bool::True

[17:49] <TimToady> .elems is actually redundant.

[17:49] <Limbic_Region> ?eval my $str ="1234"; my @foo = $str.chars; ~@foo

[17:49] <evalbot_12390> "4"

[17:49] <Limbic_Region> that's the example I was thinking of

[17:49] <TimToady> ?eval my @foo = 1..5; say +@foo;

[17:49] <evalbot_12390> OUTPUT[5 ] Bool::True

[17:49] <TimToady> doubly so

[17:50] <TimToady> rather, Numly so

[17:50] * Limbic_Region agrees that .elems is redundant and was thinking of .chars

[17:52] <TimToady> ?eval my $str = "one small step"; say @str.words.int

[17:52] <evalbot_12390> Error: Undeclared variable: "@str"

[17:52] <TimToady> ?eval my $str = "one small step"; say $str.words.int

[17:52] <evalbot_12390> Error: No compatible subroutine found: "&words"

[17:52] <TimToady> unimpl

[17:52] <TimToady> words(/./) should give you .chars

[17:53] <Limbic_Region> which synopsis would I find words in? S29?

[17:53] <TimToady> words being an insided out split

[17:53] <TimToady> it'd be S29

[17:53] <TimToady> .words defaulting to .words(/\S+/)

[17:54] *** Aankh|Clone is now known as Aankhen``

[17:54] <TimToady> but maybe we should pun on .split and call it .splat or some such...

[17:54] *** elmex_ joined
[17:54] <TimToady> .spilt, drive the lysdexics nuts...

[17:55] <Limbic_Region> hrm - there apparently isn't an S29 in the pugs repo - *shrug*

[17:55] <TimToady> Specs/Functions

[17:56] <Limbic_Region> and the S29 in the pugs repo is the most up to date one or is Rod still working it?

[17:58] <TimToady> you mean the Spec/Functions.pod?  Rod hasn't worked on it in a long time.

[17:58] <TimToady> it's semi-official in that I've more or less blessed it as official, but it's in pugs so other people can still hack on it easily.

[17:59] * Limbic_Region can't find it in Pugs but was sure he saw it there previously

[17:59] <TimToady> the next major change is probably to do way with protos like push() and make them exported methods.

[18:00] <TimToady> docs/Perl6/Spec/Functions.pod

[18:00] <Limbic_Region> ahh, I found it

[18:00] <Limbic_Region> Spec ne Specs

[18:00] <TimToady> need your specs examined

[18:01] <Limbic_Region> actually I do - I can't remember the last time I had an eye exam

[18:01] <TimToady> well, feel free to examine my specs...

[18:05] <Limbic_Region> I do that occassionally but unless you watch every single patch as it is applied on the list - you really need to re-read the whole thing every few weeks

[18:06] <PerlJam> Limbic_Region: amen!

[18:07] <PerlJam> I feel like perl6 has slipped from under me because I haven't kept up with all of the details of the Synopses.

[18:07] *** shachaf joined
[18:07] <PerlJam> Luckily, the language is designed well enough that broad brush strokes can still paint a good picture.

[18:08] <TimToady> trying to butter me up, are ya? :)

[18:08] <TimToady> you must want something...

[18:09] <PerlJam> Just a perl6 by christmas :)

[18:09] <TimToady> *vigorous nod*

[18:10] * SamB wonders if PerlJam is trying to say that Perl6 is fat

[18:10] <TimToady> biab &

[18:12] *** lidden joined
[18:16] <svnbot6> r12391 | fglock++ | v6 - more cleanup; @a.elems; %a.elems

[18:32] <TreyHarris> can anybody tell me why this works:

[18:32] <TreyHarris> ?eval for 1..* -> $i { say $i; last if $i > 5 }

[18:32] *** evalbot_12390 is now known as evalbot_12391

[18:32] <evalbot_12391> OUTPUT[1 2 3 4 5 6 ] undef

[18:33] <TreyHarris> but this does not:

[18:33] <TreyHarris> ?eval my @a = 1..5; @a[1..*]

[18:33] <evalbot_12391> (no output)

[18:33] <TreyHarris> (I know they both should eventually work, I'm just having trouble finding where to look in the pugs source to tell why one does and one doesn't)

[18:34] <Limbic_Region> TreyHarris - I am surprised evalbot didn't whine about being out of memory

[18:34] <PerlJam> Limbic_Region: I don't think it ran out of memory.

[18:34] <Limbic_Region> the first one works because 1..* is acting as an iterator

[18:34] <PerlJam> Limbic_Region: I think it "worked", only the return value got lost

[18:34] <Limbic_Region> PerlJam - I know, which is why I am suprised

[18:34] <TreyHarris> ?eval my @a = 1..5; say @a[1..*]

[18:35] <evalbot_12391> (no output)

[18:35] <Limbic_Region> odd

[18:35] <TreyHarris> i don't think so.  if i run it on my own, it takes constantly growing memory and crashes

[18:35] <TreyHarris> but evalbot kills off things that are taking to long or growing too large

[18:36] *** shachaf_ joined
[18:36] *** hexmode joined
[18:36] <TreyHarris> no, actually its memory usage plateaus, but it spikes the cpu

[18:37] <TimToady> ?eval [1..*].elems

[18:37] <evalbot_12391> pugs: out of memory (requested 1048576 bytes)

[18:37] <[particle]> whee!

[18:37] <TimToady> should just say Inf

[18:38] <TreyHarris> But @a[1..*] should be evaluable on a finitely-sized @a, right?

[18:38] <TimToady> presumably.

[18:38] <TreyHarris> oh, wait, i guess not:

[18:38] <TimToady> * is an operator that is given meaning by it's subsequent execution context.

[18:38] <TreyHarris> ?eval my @a = 1..5; @a[1..8]

[18:38] <evalbot_12391> [2, 3, 4, 5, undef, undef, undef, undef]

[18:39] <TreyHarris> so it's trying to create an infinite number of undefs

[18:39] <TimToady> and 1..* should probably pass the Whateverness on to the subscripting

[18:39] <TreyHarris> for some reason i thought *... yes, what TimToady said.

[18:39] <TreyHarris> is that behavior above correct, though?  i asked for eight elems, so i'm going to get eight elems, padded with undefs?

[18:40] <TimToady> yes

[18:40] <TreyHarris> it's only * that should autosize

[18:40] <[particle]> how about '* but finite'? ;)

[18:40] <TimToady> ?eval my @a = 1..5; @a[1..8]:v

[18:40] <evalbot_12391> Error:  unexpected ":" expecting term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[18:40] <TimToady> ?eval my @a = 1..5; @a[1..8]:val

[18:40] <evalbot_12391> Error:  unexpected ":" expecting term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[18:41] <TimToady> notimpl, probably

[18:41] <TimToady> ?eval my @a = 1..5; @a[1..8]:p

[18:41] <evalbot_12391> Error:  unexpected ":" expecting term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[18:41] <TimToady> ?eval my @a = 1..5; @a[1..8]:kv

[18:41] <evalbot_12391> Error:  unexpected ":" expecting term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[18:41] <TimToady> the subscript modifiers are supposed to "grep" for existing values

[18:42] <[particle]> colon, not dot?

[18:42] <[particle]> modifier, not method.

[18:43] <TreyHarris> ok.  yes, i see t/operators/subscript_adverbs.t

[18:43] <svnbot6> r12392 | fglock++ | v6 - added some scalar functions

[18:43] <TimToady> S02.pod:    @array[0,1,2]:kv;   # returns 0, 'A', 1, 'B'

[18:43] <TimToady> S02.pod:    @array[0,1,2]:k;    # returns 0, 1

[18:44] <TreyHarris> i hope Test::todo gets implemented soon, it's hard to know now what's a notimpl versus bug

[18:47] <Limbic_Region> TreyHarris - that's tantamount to volunteering so we will all be waiting for you to finish implementing it

[18:48] <TreyHarris> Limbic_Region: I know. :-)  unfortunately, I have no time to be anything but a dilettante for the next couple weeks.  writing a test here and there will be my only contribs till then

[18:50] <[particle]> TreyHarris: i hope you can wait a couple weeks for Test::todo then ;)

[18:51] <TreyHarris> [particle]: well, agentzh intimated that he was going to work on it this weekend, so maybe i can dodge :-)

[18:56] * Limbic_Region needs to find a window of time tomorrow to write a better examples/ tester for the test suite since he "volunteered" to do so sometime this week

[18:58] *** ruz joined
[18:58] <obra> hey ruz.

[19:00] *** shachaf__ joined
[19:06] *** fglock joined
[19:11] *** mdiep_ joined
[19:13] *** hexmode joined
[19:22] <svnbot6> r12393 | kudra++ | Add summary YAMLs for May, June and July

[19:24] * nothingmuch cheers for kudra's first commit

[19:44] <lichtkind> Perl6::Bible is horribly out of date, but i found some quirks there

[19:45] <lichtkind> in http://search.cpan.org/~autrijus/Perl6-Bible-0.30/lib/Perl6/Bible/E05.pod#Interpolate_ye_not...

[19:45] <lambdabot> Title: Exegesis_05 - Pattern Matching - search.cpan.org

[19:45] <lichtkind> the second src code box is wrong

[19:48] <TreyHarris> lichtkind: AFAIK, the Apocalypses and Exegeses are frozen as historical documents

[19:53] *** Odin- joined
[19:53] <TimToady> if you're going to read As and Es, read the versions on dev.perl.org, since they've been annotated with [Update:] boxes.

[20:02] <svnbot6> r12394 | audreyt++ | * Thoroughly refactored Pugs.Parser.Operator's

[20:02] <svnbot6> r12394 | audreyt++ |   currentFunctions and related code, so the logic of

[20:02] <svnbot6> r12394 | audreyt++ |   which functions are relevant to parsing is made much

[20:02] <svnbot6> r12394 | audreyt++ |   more apparent.

[20:02] <svnbot6> r12394 | audreyt++ |   Also use interning, memoizing, sharing etc along the

[20:02] <svnbot6> r12394 | audreyt++ |   way, so parsetime is yet again reduced by ~10% or so.

[20:03] <TimToady> smokin'

[20:03] * Limbic_Region wonders how many tests are still failing that should be passing

[20:03] * Limbic_Region wonders how long it takes TimToady to smoke

[20:03] <TimToady> 'bout 28 minutes after compilation finishes.

[20:04] <Limbic_Region> out of curiosity - how many failing tests last smoke?

[20:04] <TimToady> my last two smokes when from 880 errors to 530.

[20:05] <TimToady> early yesterday it was 219

[20:05] <Limbic_Region> ok - bad assumption to think each check-in will result in fewer failures since new fixes may introduce new problems

[20:06] * Limbic_Region slaps his wrists

[20:06] <TimToady> compiles

[20:07] <TimToady> so give it 30 minutes and it'll be on pugscode.org

[20:07] <lichtkind> TreyHarris its a synopsis

[20:07] <TimToady> well, actually, m19s28.vlinux.de

[20:08] <TimToady> lichtkind: no, E05 would be an Exegesis.

[20:08] <TimToady> and see my remark above.

[20:09] <lichtkind> äh yes your right :)

[20:10] <lichtkind> TimToady did something earthshakin changed since your talk at yapc israel acording to perl6 design principles?

[20:11] <Limbic_Region> TimToady - I think you are the only one regularly smokin linux

[20:11] <TimToady> that's my impression, though I think there used to be nightlies from feather

[20:12] <TimToady> lichtkind: depends on how you define earthshaking.

[20:12] <TimToady> I don't think we'd invented Captures yet.

[20:13] <lichtkind> yes i heard somthing like that but i dont mean syntax, more the theory behind it since im still on chapter 2 of this perl6 tutorial

[20:13] <PerlJam> "perl6 tutorial"?

[20:14] *** bpphillips left
[20:14] <PerlJam> with chapters no less?

[20:14] <lichtkind> PerlJam what you exactly asking me?

[20:15] <Limbic_Region> he is asking what you mean by Perl 6 tutorial - link or reference

[20:15] <PerlJam> lichtkind: I'm boggling that a perl6 tutorial even exists

[20:15] <PerlJam> lichtkind: This isn't merlyn and bdf's thing is it?

[20:15] <Limbic_Region> does it refer to one of the presentation titles given at YAPC israel, etc

[20:16] <lichtkind> yes it does

[20:16] * Limbic_Region stops taking words out of PerlJam's mouth

[20:16] <lichtkind> i wrote it in german and its half ready

[20:16] <lichtkind> and audrey gave me commiter bits

[20:16] <lichtkind> so i will rewrite it in english

[20:16] <lichtkind> its in our wiki

[20:17] <lichtkind> the german version

[20:17] <lichtkind> i wasnt aware of that its merlin domain

[20:17] <lichtkind> i thought skud was master of doku

[20:18] <lichtkind> i dont want to pretend to much but im willing to write it :)

[20:18] <lichtkind> and im not stupid :)

[20:19] <lichtkind> PerlJam did i answer your question ?

[20:19] <Limbic_Region> lichtkind - please, write it

[20:19] <PerlJam> lichtkind: sure ... where's the english version wiki so we can hack it too ?  :)

[20:20] <lichtkind> no in wiki is just german because its the german perl community wiki

[20:20] <Limbic_Region> PerlJam - "[16:16] <lichtkind> so i will rewrite it in english" future tense

[20:21] <Limbic_Region> lichtkind - putting a placeholder english version out there might aid in making it a collaborative effort even if you haven't got the time to work on it yourself - perhaps the german perl community might want to take it on together

[20:22] <Limbic_Region> and then us proper english speaking folks can add, modify, etc ;-)

[20:22] <lichtkind> in german wiki the other only corrected misspellings, i think the main work copy should be english since there are more active people

[20:22] <PerlJam> Limbic_Region: I saw the future tense.  I switched to present tense as a subtle form of encouragement  ;)

[20:23] <lichtkind> but you now my first try was informative

[20:23] <nothingmuch> aaah

[20:23] <nothingmuch> Syncing http://svn.openfoundry.org/pugs

[20:23] <nothingmuch> Retrieving log information from 12102 to 12394

[20:23] <nothingmuch> Incomplete data: Delta source ended unexpectedly

[20:23] <lambdabot> Title: Revision 12394: /

[20:23] <lichtkind> for me at last  how to do it :)

[20:23] <nothingmuch> clkao: HELP HELP HELP

[20:23] <PerlJam> lichtkind: how many chapters in this tutorial?

[20:23] <PerlJam> nothingmuch: try #svk

[20:24] *** _abc_ joined
[20:24] <nothingmuch> i think it's a pugs svn problem

[20:24] <nothingmuch> not really svk

[20:25] * PerlJam svk pulls pugs to see what happens

[20:25] <lichtkind> PerlJam: preknoledge and history,, theory, variables, operators, control structure, subroutines, objects, rules,  the first 5 are nearly complete with an index as Appendix A and Apendix B-E:

[20:26] <PerlJam> lichtkind: when you get to subroutines, you'll have to talk about Captures at some point.

[20:26] * justatheory feels nearly complete

[20:27] *** cmarcelo joined
[20:28] *** jferrero joined
[20:28] <lichtkind> PerlJam shure where can i read about it ? i will give a Perl6 talk in 3 weeks so maybe i it will even therefore usefull

[20:29] <Limbic_Region> 16:12] <TimToady> I don't think we'd invented Captures yet.

[20:29] * Limbic_Region ducks

[20:29] <lichtkind> :)

[20:29] <PerlJam> lichtkind: http://dev.perl.org/perl6/doc/design/syn/S06.html#Argument_list_binding might be a good place to start

[20:29] <lambdabot> Title: Synopsis 6: Subroutines -

[20:29] <PerlJam> lichtkind: just grep the synopses for "Capture"

[20:30] <lichtkind> k

[20:31] <cmarcelo> nothingmuch: svk sy -s 12103 //mirror/pugs or (i think) update your SVN::Mirror..

[20:31] <lichtkind> PerlJam and can you give me an impression how does parrot going ?

[20:31] <nothingmuch> cmarcelo: yes,

[20:31] <nothingmuch> thats what i did

[20:31] <nothingmuch> i just wanted clkao to rescue me

[20:31] <nothingmuch> i like being a damsel in distress

[20:31] <nothingmuch> and since he's an official mountain ninja, he's a good candidate

[20:31] <nothingmuch> clkao++

[20:33] <PerlJam> lichtkind: Seems to be going well from what I can see. Some core people (leo, chip, Allison) have changes jobs within the parrot project but it all appears to be for the better.

[20:33] <PerlJam> lichtkind: pmichaud is working on a big PGE/TGE/PAST/POST refactor

[20:34] <lichtkind> PerlJam yes that was my feeled impression too but im not on dayly basis involved

[20:34] <lichtkind> who is pmichaud?

[20:34] <PerlJam> lichtkind: perl6 compiler pumpking

[20:34] <lichtkind> and whats his real name?

[20:35] <PerlJam> nothingmuch: what was the fix?  My "svk pull" finally gave me the "Incomplete data" message too

[20:35] <PerlJam> lichtkind: Patrick Michaud

[20:35] <nothingmuch> PerlJam: what cmarcelo  said

[20:35] <PerlJam> oh, I just missed that.

[20:35] <PerlJam> thanks.

[20:36] <PerlJam> lichtkind: also, there's lots of work being done on the tcl compiler and we've got a new person making imcc better (vsoni)

[20:36] *** _abc_ left
[20:36] <lichtkind> PerlJam PerlJam im a bit knew in this whole its petty i cant see you all, often its good, not to see faces but i really bit interested who you all are (except larry :) which seen listen often )

[20:37] <lichtkind> what is imcc?

[20:37] <PerlJam> imcc is what lets us use PIR rather than the low-level PASM

[20:39] <lichtkind> thanks

[20:40] <lichtkind>  sub bar ($a,$b,$c,:$mice) { say $mice }, that prints $a $b $c ?

[20:40] <gaal> lichtkind: there's a FAQ. http://svn.openfoundry.org/pugs/docs/Perl6/FAQ/Capture.pod

[20:41] <lichtkind> thanks

[20:44] <lichtkind> PerlJam from where you are come from?

[20:45] <PerlJam> what do you mean exactly?  Where do I live? or what part to I play in this whole parrot/perl6 story?

[20:46] * [particle] thinks PerlJam is a fly on the wall somewhere in texas

[20:46] <[particle]> ;)

[20:46] <PerlJam> "a fly"?  Hmm.  I'm not sure if that's insulting or not.   Maybe I'm a lizard on rock instead  :)

[20:49] <lichtkind> PerlJam both im interest what is important to  you , just want to know with whom i talk :) sorry but i could not open private channel, i have ICQ or Skype

[20:49] <PerlJam> Although thinking of me as "a fly on the wall" conjurs images of a small camel with wings perched on Larry's shoulder or something.

[20:50] <PerlJam> lichtkind: nah, public is fine.  :-)

[20:50] <lichtkind> :)

[20:51] <PerlJam> lichtkind: I'm a programmer who is interested in parrot/pugs and will occasionally (rarely) submit patches.

[20:52] <PerlJam> lichtkind: I do live in Texas  :)

[20:52] <pmichaud> perljam lives in a remote part of Texas :_)

[20:52] <pmichaud> not the "remotest" part, but pretty remote :-)

[20:52] <PerlJam> lichtkind: and I'm always willing to discuss things on #parrot, #perl6 because that's how I'm going to learn and remember this stuff :)

[20:53] <PerlJam> lichtkind: oh, and I may have an article in the next issue of the Perl Review on parrot PMCs.

[20:53] <pmichaud> PerlJam++

[20:54] <PerlJam> pmichaud: I'm not sure if youre implying that I should move to the sticks or to a real city  ;)

[20:54] <pmichaud> PerlJam: you're in the sticks already.  :-)

[20:55] <pmichaud> but I wasn't implying anything about relocation :-)

[20:55] <pmichaud> at least, not this time

[20:55] <PerlJam> heh

[20:55] <PerlJam> pm: btw, have I mentioned how annoyed I am at computer services?

[20:56] <svnbot6> r12395 | fglock++ | v6 - s/Regex/Token/ in 'Term' - Test.pm not compiles in <10s

[20:56] *** jferrero joined
[20:57] <PerlJam> pm: james davis got his @tamucc.edu mail forwarded to lighthouse and the message said "this is temporary until we hear from above about folding lighthouse mail into the main campus system"

[20:57] <pmichaud> heh

[20:57] <pmichaud> was this from a worker bee or from someone "in the know"?

[20:58] <PerlJam> pmichaud: I don't quite know how to classify Kay

[20:58] <PerlJam> I guess she's more worker-beeish

[20:58] <pmichaud> my opinion probably doesn't belong on a public channel :-)

[20:59] *** baest_ joined
[21:00] *** fglock joined
[21:02] <svnbot6> r12396 | lwall++ | Getting rid of \040 and such

[21:03] *** ruz joined
[21:14] *** bradleym is now known as bradleym|afk

[21:29] <TreyHarris> can anyone remind me of what the difference is in Perl 5 between Foo::Bar->method() and Foo::Bar::->method()? (notice double colons before arrow in second case)

[21:32] <TimToady> I don't believe I've ever seen the latter form.

[21:32] <xinming> TimToady: I think he mean Foo::Bar::method

[21:32] <TimToady> no, he explicitly said "before arrow"

[21:32] <TreyHarris> at morgan stanley, i remember it was considered proper practice to call constructors as Class::->new, but I can't for the life of me remember why

[21:33] <xinming> *_*

[21:33] <TreyHarris> they seem to do precisely the same thing

[21:33] *** lollan joined
[21:33] <TimToady> forces it to be not officially a bareword

[21:33] <TimToady> so is unnecessary on anything that already contains ::

[21:34] <TimToady> well, latest smoke failed 2 more tests :( but passed 278 more :)

[21:35] <TimToady> and pugs is definitely a bit zippier now

[21:37] <TimToady> TreyHarris: in fact, if I recall, the trailing :: is removed by the lexer.

[21:37] <TimToady> print + FOO::, "\n";

[21:37] <TimToady> FOO

[21:39] <TreyHarris> something voodooy, i guess.  or maybe there was one particular rev that had some odd breakage and it turned into cargo culting

[21:40] <TreyHarris> thanks, the answer is "i don't care and don't need to provide for a semantic difference", which is what I wanted it to be :-)

[21:40] <TreyHarris> TimToady++

[21:40] <PerlJam> When will perl6 be ready for production?

[21:40] * PerlJam wants the answer to by "tomorrow"

[21:40] * PerlJam wants really really hard 

[21:40] <PerlJam> ;)

[21:41] <TreyHarris> PerlJam: according to audreyt's yapc talk, it already is in production, for some value of production

[21:41] <PerlJam> "pugs" ne "perl6"

[21:41] <TreyHarris> oh wait, you said perl6, lowercase, no space.  so you mean the parrot compiler?

[21:42] <PerlJam> TreyHarris: no, if pugs is fast enough an officially blessed, pugs could become perl6 and that would be fine by me.

[21:42] <PerlJam> s/an/and/

[21:42] <[particle]> and ran on enough platforms...

[21:42] <TreyHarris> ah. :-)

[21:42] <TreyHarris> & for a meeting...

[21:42] <PerlJam> But you got the answer you wanted, so I thought I'd see if that worked for me too :)

[21:42] * [particle] hammers nails &

[21:43] <PerlJam> granted, getting the answer and the answer being correct are different things

[21:50] <svnbot6> r12397 | Sage++ | In the parser for the p5 -> p6 translator: Uni blocks can now deal with the end of file (eof) much more gracefully.

[21:50] <svnbot6> r12397 | Sage++ | This was needed to handle many of the files in perl5 t/pod, where long comments often end a file.

[21:50] <svnbot6> r12397 | Sage++ | With this update, a test across all of p5 t/ has 95%+ coverage.

[21:53] *** mdiep_ joined
[21:54] *** weinig joined
[22:11] <svnbot6> r12398 | fglock++ | v6 - cleanup, fixes in grammar

[22:12] <TreyHarris> *grin* somebody at $job.emaillist<perl> said "Perl == TIMTOWTDI.  Or should that be Perl eq TIMTOWTDI?"  I responded that Perl eqv TIMTOWTDI, and maybe currently Perl =:= TIMTOWTDI.

[22:15] *** fglock left
[22:30] *** pmurias_ joined
[22:38] <lichtkind> sorry PerlJam got guest here im an east german freelancer makin also editor in perl

[23:12] <clkao> stevan++ # the autobox thing is bloody scary

[23:21] <TreyHarris> == clkao.  stevan++

[23:22] <clkao> we need hot girl hacker rather than stupid handsome spokeperson

[23:23] <TimToady> ethnic would help too.

[23:33] <svnbot6> r12399 | Sage++ | Better debugging info for the Text Node translator. The text node translator now gives more informative debugging information.

[23:47] <TreyHarris> i've noticed folks syntax-highlighting their Perl 6 code in their blogs.  is that done by hand, or is there a perltidy-ish tool that knows Perl 6?

[23:54] *** cjeris left
[23:56] <Khisanth> well there is a vim syntax highlighting thing in the repo and vim can output HTML of the highlighted version ...

[23:56] <TreyHarris> what's going on here:

[23:56] <TreyHarris> ?eval sub foo (: $a) { say "I got '$a'." }; foo(32)

[23:56] *** evalbot_12391 is now known as evalbot_12399

[23:56] <evalbot_12399> OUTPUT[I got ''. ] Bool::True

[23:57] <TreyHarris> Khisanth: ahh, ok.  can you tell me how?  i'm not a vim user :-)  If it's hard to explain, don't worry about it

[23:58] <Khisanth> I use gvim :)

[23:58] <TimToady> looks like a bug to me.  a sub shouldn't allow an invocant.

[23:59] <TimToady> maybe it's being parsed as :$a though.

[23:59] <TimToady> ?eval sub foo (: $a) { say "I got '$a'." }; foo( :a(32) )

[23:59] <evalbot_12399> OUTPUT[I got '32'. ] Bool::True

[23:59] <TimToady> yep.

[23:59] <TimToady> shouldn't allow a space there.

[23:59] <Khisanth> TreyHarris: under the Syntax menu there is a "convert to html" option

