[00:02] *** Limbic_Region joined
[00:11] <araujo> Juerd, yes

[00:16] <TreyHarris> araujo: memory helps a *lot*.  i went from 512 to a gig and compile time dropped by half

[00:17] <TreyHarris> but it still takes 35 or 45 minutes on my PPC 1.5

[00:24] <araujo> yeah, more memory will do it

[00:39] *** zgh joined
[01:06] *** markstos_ joined
[01:07] <araujo> hi markstos_

[01:07] <markstos_> hello araujo

[01:07] <araujo> markstos_, just read perl6 will have function currying :-)

[01:08] <araujo> that is another very haskellish feature , which i am happy to see here

[01:09] <markstos_> araujo: Where can I read more about how this will look and work in Perl6?

[01:10] <araujo> markstos_, oh, i just read it as a new feature listed on the faqs of perl6 ... i still dont find any further explanation

[01:10] <svnbot6> r12749 | markstos++ | CGI.pm: Use method, not submethod, because we do what these behaviors to be inherited.

[01:10] <svnbot6> r12750 | markstos++ | ChangeLog updates

[01:10] <araujo> i would like to, so, if anyone knows....

[01:10] <markstos_> Let me grep the specification..

[01:11] <dolmans> markstos_: S06/Currying

[01:12] <markstos_> http://feather.perl6.nl/syn/S06.html#Currying

[01:12] <lambdabot> Title: S06

[01:12] <markstos_> Jes. Just found it.

[01:12] <markstos_> s/Jes/Yes.

[01:17] <araujo> cool

[01:18] *** kanru joined
[01:30] * araujo starts the fun reading the code ..... "how to do this monadically? ..." :-)

[01:30] *** theorbtwo joined
[01:43] <markstos_> I'm getting started on feather and syntax highlighting isn't working for me. I get an error on line 42 of syntax/syntax.vim: E216: No such group or event: filetypedetect BufRead

[01:43] <markstos_> That familiar to anyone ?

[01:43] <markstos_> I tried copying audrey's syntax/syntax.vim to my ~/.vim, but that didn't help.

[01:45] <markstos_> I also tried removing my own .vimrc, but I still get the issue, indicating some kind of system level problem.

[01:45] * markstos_ ponders this

[01:48] <markstos_> Here's a bug report and fix for the issue. Perhaps it's related to the OS upgrade earlier today:

[01:48] <markstos_> http://www.ubuntuforums.org/showthread.php?t=161862

[01:56] <ingy> hola

[01:57] <ingy> I just did a file transfer of a 10GB file....

[01:57] <ingy> which took a long time

[01:57] <ingy> the transfer stalled with a few MBs to go

[01:57] <ingy> seriaously 99.999

[01:58] <ingy> so what transfer util will recover from where I left off?

[01:58] <obra> rsync may

[01:58] <ingy> hi obra

[02:00] <ingy> I hate mac so much I just went out and ought a new macbook to teach em a lesson

[02:02] <ingy> I think I'll be integrating libyaml into the new YAML.pm

[02:02] <ingy> it looks ready

[02:03] <ingy> also thinking about a javascript port...

[02:04] <obra> cool. How does libyaml differ from libsyck?

[02:04] *** theorbtwo joined
[02:07] <ingy> obra: it's a streaming API

[02:08] <ingy> it's built the way that yaml tools were indented to be built

[02:08] <ingy> ;)

[02:09] <ingy> libyaml - data the way that ingy indented it

[02:10] <ingy> the other difference is that it probably is much closer to spec correct, and has much better error reporting (I'm guessing)

[02:11] <ingy> libsyck is some whimsical approximation of YAML 1.0

[02:12] <obra>    cool.

[02:12] *** cognominal joined
[02:12] <obra> streaming yaml would be very interesting

[02:13] <ingy> well it's not just for streaming

[02:13] <ingy> it's just that the low level (read hard) stuff is streaming

[02:13] *** weinig joined
[02:19] *** weinig joined
[02:33] <markstos_> Why doesn't this work as expected?

[02:33] <markstos_> ?eval sub foo(%h) { say %h.perl } foo(1=>2,2=>3)'

[02:33] <evalbot_12750> Error:  unexpected "'" expecting ":", term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[02:33] <markstos_> ?eval sub foo(%h) { say %h.perl } foo(1=>2,2=>3)

[02:33] <evalbot_12750> Error: No compatible subroutine found: "&foo"

[02:34] <ayrnieu> ?eval sub foo(%h) { say %h.perl }; foo(1=>2,2=>3)

[02:34] <evalbot_12750> Error: No compatible subroutine found: "&foo"

[02:36] <TreyHarris> ?sub foo(Pair $h, Pair $y) { say ($h, $y).perl }; foo(1=>2,2=>3)

[02:36] <lambdabot>  Parse error

[02:36] <TreyHarris> ?eval sub foo(Pair $h, Pair $y) { say ($h, $y).perl }; foo(1=>2,2=>3)

[02:36] <evalbot_12750> OUTPUT[((1 => 2), (2 => 3)) ] Bool::True

[02:36] <markstos_> It works if I define 1=>2,2=>3 as a hash explicitly has a hash beforehand, and pass the hash in.

[02:36] <TreyHarris> you're not passing in a hash

[02:36] <TreyHarris> you're passing in two pairs

[02:37] <markstos_> But that's the typical way to pass in named arguments, right?

[02:37] <markstos_> Should I be defining each known key of the hash in the subroutine sig ?

[02:37] <TreyHarris> you have two problems

[02:38] <TreyHarris> one, you have to make your hash slurpy:

[02:38] <TreyHarris> ?eval sub foo(*%hash) { say %hash.perl }; foo(1=>2,2=>3)

[02:38] <evalbot_12750> OUTPUT[{} ] Bool::True

[02:38] * markstos_ thinks he has 2 problems, plus the barking dog across the street that won't shut up. 

[02:38] <TreyHarris> but that still doesn't work

[02:38] <TreyHarris> because pairs of random data can't possibly be named args

[02:38] <markstos_> I tried the slurpy. That didn't work.

[02:38] <TreyHarris> they have to be identifiers:

[02:38] <TreyHarris> ?eval sub foo(*%hash) { say %hash.perl }; foo(a=>2,b=>3)

[02:38] <evalbot_12750> OUTPUT[{("a" => 2), ("b" => 3)} ] Bool::True

[02:38] <TreyHarris> there.

[02:39] <markstos_> What's the difference between that and the version above? you changed the key names?

[02:39] <TreyHarris> yes

[02:40] <TreyHarris> '1' and '2' aren't valid identifiers

[02:40] <markstos_> why would that make a difference?

[02:40] <markstos_> Ah.

[02:40] <TreyHarris> named params must be idents

[02:40] <markstos_> idents?

[02:40] <TreyHarris> identifiers

[02:40] <markstos_> Anyway, my keys in my applications don't need to be numbers.

[02:41] <ayrnieu> ?eval [1=>2, '1'=>2]

[02:41] <evalbot_12750> [(1 => 2), ("1" => 2)]

[02:42] <TreyHarris> ?eval %(1=>2, '1'=>3)

[02:42] <evalbot_12750> {("1" => 3),}

[02:43] <ayrnieu> that's not actually intended, is it?

[02:44] <TreyHarris> that's correct behavior

[02:44] <TreyHarris> of a default hash

[02:44] <TreyHarris> because 1 and '1' are the same hash keys

[02:44] <zgh> i though hashes in perl6 dodn't automatically stringify the keys

[02:45] <ayrnieu> ?eval %(1=>2, '2'=>3)

[02:45] <zgh> s/dodn't/didn't/

[02:45] <evalbot_12750> {("1" => 2), ("2" => 3)}

[02:45] <zgh> that's kind of disappointing

[02:45] <zgh> where are the key-type-agnostic hashes in perl6

[02:46] <TreyHarris> zgh: they do currently in pugs.  let me consult the synopses, but i'd expect that to be the default behavior, it would be extraordinarily surprising to perl 5 programmers.

[02:46] <TreyHarris> i believe that .SKID controls (but .SKID is currently unimplemented)

[02:46] <ayrnieu> a perl5 programmer would expect scalars, yes.

[02:47] *** mako132_ joined
[02:47] <TreyHarris> markstos_: to continue what i was saying first:

[02:47] <TreyHarris> ?eval sub foo($a?, *%hash) { say %hash.perl }; foo(a=>2,b=>3)

[02:47] <evalbot_12750> OUTPUT[{("b" => 3),} ] Bool::True

[02:47] <zgh> i'm a perl5 programmer, but i have used languages where hash keys were immutable objects or whtever instead of hashes

[02:47] <zgh> it's not THAT surprising

[02:48] <ayrnieu> zgh - yes, yes, but a perl5 programmer would expect scalars to act like scalars.

[02:48] <zgh> instead of hashes?

[02:48] <zgh> i meant instead of strings sorry lol

[02:48] <zgh> well numbers are scalars

[02:48] <zgh> (some) objects are, yes

[02:48] <TreyHarris> notice the first key was not output, because it was bound to $a.  slurpy hashes are meant to grab all named parameters, so only parameters that could be otherwise named are grabbed

[02:48] <zgh> ?

[02:49] <zgh> i can't say i ever found perl5 hashes lacking...i think the theorist in me likes having whatver types I want in a key

[02:50] <ayrnieu> zgh - as long as one of those types is 'scalar', everyone is happy.

[02:50] <zgh> ayrnieu: how very true!

[02:53] <TreyHarris> zgh: according to S09, you write "my %hash{*}" to indicate that you want to accept keys of any type

[02:53] <TreyHarris> otherwise they are strings

[02:53] <TreyHarris> this is not yet implemented.

[02:54] <zgh> TreyHarris: hey cool! thanks for looking that up.

[02:54] <TreyHarris> the default hash is "my Any %hash{Str}"

[02:54] <zgh> TreyHarris: okay that makes a lot of sense.

[02:55] <zgh> not at all surprising to a perl5 programmer while still thrilling the theorists. yay!

[02:55] <TreyHarris> yes-- TimToady++ is very good at doing that

[02:56] <TreyHarris> kind of like how the issue of whether failing subs should throw exceptions or return undef was resolved

[02:57] <TreyHarris> they return undefs that autothrow exceptions if you try to use them for any other than testing for truth or definedness

[02:58] <TreyHarris> so you can still do if thingThatMightThrow() -> $x { $x.useIt() }

[03:01] *** weinig is now known as weinig|zZz

[03:21] *** zgh joined
[03:27] *** zgh joined
[03:32] *** zgh joined
[03:33] <pasteling> "markstos_" at 12.176.101.89 pasted "bug? multi-dispatch works differently for subs and methods when passing a scalar when a slurpy has is expected" (31 lines, 511B) at http://sial.org/pbot/19291

[03:34] <markstos_> The method dispatching in that paste seems wrong. Even though I call foo(1), I get dispatched to foo (), which explicitly says it has no arguments. (How do I check the arguments when the signature says they are none?)

[03:35] <TreyHarris> heh, it just segfaults me :-)

[03:35] <markstos_> Doh.

[03:36] <TreyHarris> the sub gets "in hash sub but not a hash", and the method gets "none"?

[03:36] <markstos_> Yep.

[03:36] <TreyHarris> oh

[03:36] <TreyHarris> yes

[03:36] <markstos_> yes, bug?

[03:36] <TreyHarris> that's correct, though admittedly surprising

[03:36] * markstos_ sighs.

[03:36] <TreyHarris> remember, like in perl 5, methods are subs with an extra argument for the invocant

[03:37] <markstos_> Ok.

[03:37] <TreyHarris> MMD will never dispatch to a nonconformant subroutine.

[03:37] <TreyHarris> so it tries to figure out what's most conformant

[03:37] <TreyHarris> yes, it *is* a bug now that i think about it

[03:37] <TreyHarris> but it's trying to do the right thing

[03:37] <markstos_> That makes more sense.

[03:37] <markstos_> ..that it's a bug.

[03:38] <markstos_> How would I examine the args in method foo (), since they aren't in the signature ?

[03:39] *** zgh joined
[03:40] <TreyHarris> in the first you have the signature (Foo:), and in the second, (Foo: Any Hash{*}).  you called it with (Foo: Int).  it should have failed, but instead it dispatched the first.  the second time you had signatures () and (Any Hash{*}), and you tried to pass (Int).  it should have failed as well.

[03:40] <TreyHarris> i think it has something to do with this:

[03:40] <TreyHarris> ?eval multi sub foo ($a) { say "yep" }; foo(3)

[03:40] <evalbot_12750> OUTPUT[yep ] Bool::True

[03:41] <TreyHarris> ?eval multi sub foo () { say "yep" }; foo(3)

[03:41] <evalbot_12750> Error: No compatible subroutine found: "&foo"

[03:41] <markstos_> Those results look reasonable.

[03:42] <TreyHarris> guess it was fixed since i last tried it :-)

[03:42] <TreyHarris> hm

[03:42] <markstos_> It's the method case that seems b0rked.

[03:42] <TreyHarris> well, they're both borked because it's not reasonable to set a hash to the value 1

[03:42] <markstos_> In may case, I think I think I'll leave that test failing in the CGI::App suite, and note that I think it's due to a pugs bug.

[03:43] <TreyHarris> but even if it's just doing mmd by arg counting, yes, it's borked

[03:44] *** zgh joined
[03:44] <markstos_> All I wanted to do was die with an nice error about using the wrong number of args, but I can't do that, because it it's dispatched to foo(), where I don't know how to examine the args, since they aren't in the signature....

[03:44] <TreyHarris> introspection is very lacking at present.

[03:44] <TreyHarris> audreyt keeps saying that's her first priority after captures and the object model

[03:45] <markstos_> So far I haven't run into a show stopper for my own work, just some mysterious detours...

[03:46] * TreyHarris sighs

[03:46] <TreyHarris> I've let my pugs get almost a week out of date

[03:46] <TreyHarris> and I wanted to write a little explorer to help me look at changes in an easier format than raw svn commands

[03:46] <TreyHarris> but pugs is segfaulting or giving me "illegal hardware instruction" in my explorer

[03:47] <markstos_> Ug.

[03:48] <TreyHarris> well, it won't be too hard to quickly translate to perl 5

[03:48] *** Aankhen`` joined
[03:51] *** zgh joined
[04:00] *** zgh joined
[04:03] *** Aankh|Clone joined
[04:05] *** zgh joined
[04:11] *** zgh joined
[04:18] *** zgh joined
[04:29] *** zgh joined
[04:32] *** xinming joined
[04:34] *** zgh joined
[04:41] *** zgh joined
[04:49] *** zgh joined
[04:51] *** kanru joined
[05:12] <audreyt> Limbic_Region: cause of win32 sudden death found

[05:12] <audreyt> max limit of concurrent open dirhandle exhausted

[05:12] <audreyt> if you print $dir now, then eager evaluation guarantees that dirhandle can be closed early

[05:12] <audreyt> if you don't, then the system has to maintain those dirstream in thunk

[05:13] <xinming> audreyt: could you please fix the q:x { } bug? :-/  q:x won't do right thing if the process data contains utf8. :-/

[05:14] *** kasei joined
[05:14] <audreyt> sure. a sec

[05:14] <xinming> audreyt++

[05:18] <kasei> can anyone give me some help using PCR?

[05:21] <audreyt> kasei: post to p6c maybe? or nopaste the error

[05:22] <kasei> well, there's no error to paste... i suspect i just have some misunderstanding about p6 rules.

[05:23] <kasei> it's something that would be super easy in p5 regex, but i'd like to use subrules, and just not working as i expect.

[05:23] *** rashakil joined
[05:28] <audreyt> nopaste the code then?

[05:28] <svnbot6> r12751 | audreyt++ | * UTF16 Little-Endian detection was typo'ed.

[05:30] <kasei> code snippet here: http://kasei.us/temp/pcr.pl

[05:30] <kasei> the relativeURI rule failes to match more than one character. i imagine it's a trivial mistake...

[05:31] <audreyt> looking

[05:33] <xinming> audreyt: :-/ I think the bug is still there.

[05:33] <xinming> audreyt: q:x { echo 你好 }; would return nothing...

[05:34] <xinming> pugs t/builtins/quote_basic.t

[05:38] <audreyt> xinming: sure, it's fixed, I'm committing

[05:38] <xinming> audreyt: thanks

[05:39] <ayrnieu> (hey, neat, that Chinese actually displays here.)

[05:40] <xinming> ayrnieu: we use utf-8, so, displaying multi-byte characters should be no problem.

[05:41] <xinming> ayrnieu: and BTW, in perl6, there would be a native language dialect probably... :-)

[05:41] <xinming> ayrnieu: which means, we can write perl 6 in our own language.. :-P

[05:45] <audreyt> what, you mean Perl is not your native language?

[05:45] <audreyt> :)

[05:45] <audreyt> kasei: sorry, still installing PCR dependencies on this win32

[05:47] <kasei> no worries. thanks for taking the time.

[05:49] <xinming> audreyt: No, I mean, we can write a perl 6 dialect which replaces sub and say with native language keywords, I've ever found an interesting program which is written in Chinese in perl 5 from you. :-)

[05:49] <audreyt> er, yeah, that must be Lingua::Sinica::PerlYuYan

[05:49] <audreyt> btw, r12752 is for you :)

[05:50] <xinming> thanks

[05:50] <svnbot6> r12752 | audreyt++ | * qx// now works with non-ASCII characters as well, promted by xinming++

[05:51] <audreyt> kasei: the moose moosed because <uchar>* assumes <ws> between each <uchar>

[05:51] <audreyt> I'm not sure if that should be the case, actually

[05:52] <audreyt> but it is currently the case.

[05:52] <audreyt> so if you change Rule->install to Regex->install

[05:52] <audreyt> (also, you can put <?uchar> instead of <uchar>)

[05:52] <audreyt> since you are capturing the outer sum anyway

[05:53] <audreyt> then it'd work.

[05:53] <xinming> How can I see the difference you edit in src? I mean with your last commit...

[05:54] <kasei> audreyt: thanks!

[05:54] <xinming> hmm, Ok, I'll try myself. :-/

[05:55] <audreyt> svn diff -r 12751:12752

[05:55] <audreyt> like that?

[05:55] <audreyt> kasei: np :)

[05:55] * audreyt goes back playing with opendir

[05:56] <audreyt> svk desc 12752 # for svk people

[05:57] <xinming> thanks

[05:57] <xinming> found that...

[05:57] <audreyt> (bbiab)

[06:21] *** mauke joined
[07:01] *** agentzh joined
[07:03] <agentzh> markstos: pugs' docs/feather/syn_index.html maps to feather's ~agentzh/syn/index.html just because the pugs working copy on feather is living in Audrey's home where i don't have write access. you know, i have to generate *.html into syn/ using smartlinks.pl. :)

[07:07] <agentzh> markstos: now that you have a feather account, feel free to do the pod ==> html conversion yourself. :) you may check the script ~agentzh/update to see an example.

[07:08] <agentzh> markstos: btw, thanks for your recent work on the documentation! :D

[07:09] * agentzh ponders the idea of writing a util/get-irc-logs.pl

[07:10] <agentzh> colabti.de's search page is not satisfactory at all.

[07:17] <gaal> audreyt: moose! how did you diagnose the dirhandle problem? just curious :)

[07:28] <gaal> $client &

[07:34] <agentzh> does anyone here often run "make smoke" on feather?

[07:35] <agentzh> i just want to reuse his/her tests.yml to render the .html files

[07:36] <svnbot6> r12753 | trey++ | [syn_index.html]

[07:36] <svnbot6> r12753 | trey++ | Fixed spelling.

[07:44] *** Bit-Man joined
[07:48] <svnbot6> r12754 | agentz++ | [util/smartlinks.pl]

[07:48] <svnbot6> r12754 | agentz++ | - minor fixes

[08:05] *** elmex joined
[08:17] *** elmex_ joined
[08:18] *** larsen joined
[08:35] *** kane-xs joined
[08:42] <agentzh> has anyone done something interesting with the #perl6 logs?

[08:43] *** xerox joined
[08:46] <ayrnieu> agentzh - interesting like http://ortdotlove.net/c.html ?

[08:46] <lambdabot> Title: C @ Freenode stats by orbitz

[08:46] <agentzh> looking

[08:47] <agentzh> ah, yeah!

[08:48] <agentzh> it was generated by the pisg program...ah, nice~~

[08:48] <agentzh> ayrnieu: thanks!

[08:49] <ayrnieu> welcome :-)  That page is pretty cute.

[08:50] <agentzh> heh, it's also written in perl. :D

[08:50] <agentzh> i'd like to generate a stats page for #perl6. :)

[08:51] <agentzh> we have all the log files on colabti.de. :)

[08:52] <xerox> We have those for #haskell too ! :D http://www.cse.unsw.edu.au/~dons/irc/haskell-06.html

[08:52] <lambdabot> Title: #haskell @ freenode.org stats by dons

[08:52] <xerox> agentzh: add a patch for `the most used suffix', it'll be `++' here :D

[08:53] <ayrnieu> xerox - tibbe also makes sailors blush, 0.0% of the time.

[08:53] <agentzh> aye

[08:53] *** marmic joined
[08:53] *** nubio joined
[09:03] <svnbot6> r12755 | agentz++ | [util]

[09:03] <svnbot6> r12755 | agentz++ | - added get-irc-logs.pl which can download log files of

[09:03] <svnbot6> r12755 | agentz++ |   the specified channel (defaulting to #perl6) from

[09:03] <svnbot6> r12755 | agentz++ |   colabti.de

[09:03] <svnbot6> r12756 | agentz++ | [util/get-irc-logs.pl]

[09:03] <svnbot6> r12756 | agentz++ | - minor output format fixes

[09:04] <agentzh> bbiab &

[09:04] *** agentzh left
[09:12] *** elmex joined
[09:47] *** awwaiid joined
[09:56] *** dolmans joined
[10:06] *** buetow joined
[10:12] *** xerox joined
[10:18] *** Aankh|Clone is now known as Aankhen``

[10:22] <svnbot6> r12757 | kudra++ | Placeholder

[10:51] <clkao> audreyt: svk gone crazy or?

[10:58] <svnbot6> r12758 | kudra++ | Weekly summary

[10:59] *** ludan joined
[11:01] <svnbot6> r12759 | agentz++ | [util/get-irc-logs.pl]

[11:01] <svnbot6> r12759 | agentz++ | - commented out debugging code

[11:03] *** kanru2 joined
[11:03] *** TimToady joined
[11:09] *** agentzh joined
[11:09] <svnbot6> r12760 | kudra++ | Spell checked

[11:12] *** DaGo joined
[11:23] <agentzh> TimToady: it seems to me that you're running pugs smoke regularly (thought also manually). would you be kind enough to always put your latest (compressed) tests.yml on a fixed position on the web?

[11:24] <agentzh> *though

[11:27] *** kanru2 is now known as kanru

[11:30] *** soisoisoi joined
[11:33] <Juerd> http://feather.perl6.nl/~juerd/stats/

[11:33] <lambdabot> Title: #perl6 @ SomeIRCNet stats by MAINTAINER

[11:33] <Juerd> I have no idea how to keep it updated, though. It doesn't say that :)

[11:38] <agentzh> ah!

[11:39] <Juerd> Long live bash scripting, by the way. It's so easy to do complicated things if you have a lot of small but incredibly useful tools, and can glue them together.

[11:40] <agentzh> *nod*

[11:40] <Juerd> for url in `curl | perl -nle`; do perl -e'system "wget -O ... ..."'; done

[11:40] <Juerd> (roughly)

[11:41] <Juerd> A Windows users would first start looking for a tool to download everything on a page, and spend at least 10 minutes on just that.

[11:41] <Juerd> s/users/user/

[11:43] *** wilx` joined
[11:45] *** elmex joined
[11:46] * gaal lols at some appropriate "random" quotes on that stats page:

[11:47] <gaal> eg. putter: "anyone willing to hear a mmd story?"

[11:47] <gaal> and TimToady: "there's a one-word metaform from Mr Rogers: "Can you say ___?""

[11:47] <agentzh> hehe

[11:48] <svnbot6> r12761 | kudra++ | Added one additional location to distributions

[11:48] *** wilx` is now known as wilx

[11:57] *** markstos_ joined
[12:01] <agentzh> ?eval while 1 {}

[12:02] <agentzh> ?uptime

[12:02] <lambdabot> uptime: 2 days, 7 hours, 59 minutes and 49 seconds

[12:02] <svnbot6> Running for 531838 seconds.

[12:02] <evalbot_12761> (no output)

[12:02] <evalbot_12761> Running for 251480 seconds.

[12:02] <agentzh> heh

[12:08] *** baest joined
[12:11] <agentzh> ?eval my $a = 3

[12:11] <agentzh> ?eval $a + 4

[12:11] <evalbot_12761> \3

[12:11] <evalbot_12761> Error: Undeclared variable: "$a"

[12:16] *** p6bot_ joined
[12:21] <xinming> :-/

[12:22] <xinming> I've specified p6bot to go into perlchina... :'(

[12:22] <xinming> try again... :-/

[12:24] <agentzh> diakopter: are you working on trypugs right now?

[12:28] *** diakopter joined
[12:35] <agentzh> diakopter: are you working on trypugs right now?

[12:36] <markstos_> Juerd++ ... he just fixed vim on feather.

[12:36] <Juerd> :)

[12:36] <Juerd> markstos++  # told me how

[12:36] <markstos_> Interwebthingie++ had the answer

[12:53] <markstos_> This is unexpected. If I quote my key, the args disappear. If I leave the key bare, they work:

[12:53] <markstos_> ?eval sub foo (*%args) { warn %args.perl; } foo(  a => 'b' ); foo( 'a' => 'b' );

[12:53] <evalbot_12761> Error: Cannot cast from VUndef to Handle (VHandle)

[12:53] <markstos_> Oh. That's not what I get on feather...

[12:54] <markstos_> Let's see which one is the problem.

[12:54] <markstos_> ?eval sub foo (*%args) { warn %args.perl; } foo(  a => 'b' );

[12:54] <evalbot_12761> Error: Cannot cast from VUndef to Handle (VHandle)

[12:54] <markstos_> ?eval sub foo (*%args) { warn %args.perl; } foo( 'a' => 'b' );

[12:54] <evalbot_12761> Error: Cannot cast from VUndef to Handle (VHandle)

[12:55] <markstos_> Both! That seems perhaps /more/ broken.

[12:55] <markstos_> Passing arbitrary name/value pairs to a subroutine has proven more difficult than I imagined!

[12:57] <agentzh> ?eval sub foo (*%a) { warn %a.perl } foo(:a<b>)

[12:57] <markstos_> So how /does/ one pass arbitrary name/value pairs to a subroutine in Perl6?

[12:57] <evalbot_12761> Error: Cannot cast from VUndef to Handle (VHandle)

[12:58] <markstos_> Let me try that on feather.

[12:58] <agentzh> markstos_: it used to work. :/

[12:59] <markstos_> That works here! Let me check the pugs revision I'm using.

[12:59] <markstos_> r12728

[12:59] <agentzh> i've used slurpy hash args in pugs' Test.pm.

[12:59] <markstos_> So something broke recently, it seems

[13:00] <agentzh> and all the tests in t/02-test-pm/5-todo.t passed at that time.

[13:00] <agentzh> not sure about the status right now.

[13:01] <agentzh> audreyt and gaal are currently working on this part, say captures and signatures.

[13:01] * markstos_ backs up working pugs on feather for fear of impeding breakage. 

[13:01] <agentzh> so it may be temporarily broken. :)

[13:02] <markstos_> Where is the evalbot actually running pugs from ?

[13:02] <Juerd> sub foo (Pair *@pairs) { ... }

[13:02] <agentzh> ~audreyt/pugs

[13:02] <Juerd> When I call foo with a list of pairs, do they need to be in double parens?

[13:03] <Juerd> Or is there another way to break named argument parsing?

[13:03] <Juerd> foo <== foo => 'bar', perhaps?

[13:04] <markstos_> That doesn't seem right. That's where /I/ was just testing from, and a different revision and result were reported.

[13:04] <markstos_> On feather /usr/bin/pugs is a symlink to ~audreyt/pugs/pugs

[13:04] <markstos_> Anyway, the :a<b> syntax is what I needed. You made my tests pass, agentzh!

[13:04] <markstos_> agentzh++

[13:05] <agentzh> markstos_: ahh, nice to hear that. :)

[13:05] <agentzh> bedtime &

[13:05] *** agentzh left
[13:11] *** scook0 joined
[13:16] *** drbean joined
[13:37] *** xdg joined
[13:46] *** onsen joined
[13:59] *** iblechbot joined
[14:02] *** wilx joined
[14:05] <svnbot6> r12762 | kudra++ | Although this week is already posted, URL corrected for next week

[14:06] *** discordja joined
[14:31] <diakopter> agentzh: sort of

[14:31] <diakopter> oh; gone to bed.

[14:37] *** jferrero joined
[14:40] <nothingmuch> audreyt: can i have an invite to pugs.blogs.com? id like to poke around the interface to see how stuff could be automated for ann

[14:45] *** miyagawa_ joined
[15:15] *** kanru joined
[15:18] *** miyagawa_ joined
[15:43] *** weinig|zZz is now known as weinig

[15:43] *** rgs joined
[15:53] *** nubio_ joined
[16:14] <svnbot6> r12763 | nothingmuch++ | template for YAML summaries

[16:16] <Teratogen> perl 6 should qualify for ISO9000

[16:19] <wilx> Why?

[16:19] <wilx> Isn't that the standard about quality?

[16:19] <Teratogen> so it can be used to write software for medical devices, etc.

[16:22] *** _SamB_ joined
[16:24] <nothingmuch> Teratogen: it makes no sense, that's for businesses

[16:24] <nothingmuch> IIRC

[16:24] <nothingmuch> more related to production

[16:24] <nothingmuch> and to management

[16:28] *** nubio__ joined
[16:28] <Teratogen> I guess so, then

[16:31] <xinming> hmm, anyone here build pugs on feather?

[16:40] *** nubio__ is now known as nubio

[17:28] *** nothingmuch joined
[17:49] *** DaGo joined
[17:58] *** mako132_ joined
[18:21] <svnbot6> r12764 | gaal++ | * sub_arg_errors.t - add four failing test cases (in preparation for

[18:21] <svnbot6> r12764 | gaal++ |   a proper Signature parser)

[18:22] *** nothingmuch joined
[18:25] *** weinig is now known as weinig|bbl

[18:25] *** traecer joined
[18:33] *** baest joined
[18:36] *** nothingmuch joined
[18:37] *** traecer joined
[18:39] *** traecer left
[18:39] *** traecer joined
[18:46] *** spoop joined
[18:53] *** mako132_ joined
[18:55] *** justatheory joined
[19:01] *** awwaiid joined
[19:03] *** marksto1 joined
[19:11] *** nothingmuch joined
[19:11] <svnbot6> r12765 | nothingmuch++ | svn props for summaries

[19:11] *** awwaiid joined
[19:12] *** awwaiid joined
[19:13] *** foo\ joined
[19:25] *** b_jonas joined
[19:30] <TimToady> agentzh: see wall.org:~larry/tests.yml.gz for latest

[19:31] <TimToady> I'm also looking into inserting the data as a blob comment at the end of smoke.html so it'll just get uploaded with the smoke.

[19:31] <TimToady> bbl &

[19:44] <marksto1> It'd be nice of S09 provided a reference to what PDL means in this context. I suspect it's different than the "Perl Data Language", located at http://pdl.perl.org/

[19:44] <lambdabot> Title: PDL - The Perl Data Language

[19:50] *** Juerd changes topic to: Please check your feather e-mail | http://search.cpan.org/dist/SVN-Mirror/ | paste: http://sial.org/pbot/perl6 | pugs.blogs.com | pugscode.org | pugs.kwiki.org | http://www.treehugger.com/files/th_images/paradigm.jpg

[19:51] <Juerd> TimToady: You too, please

[19:52] <gaal> Juerd: ask people to ack it if you want to be sure they'd seen it...

[19:52] <Juerd> gaal: I can tell just by looking at directories.

[19:52] <Juerd> gaal: Either:

[19:53] <Juerd> * The message has been forwarded. I assume people check their normal email regularly.

[19:53] <Juerd> * The message has been read, it is either deleted or in ~/Maildir/cur

[19:53] <Juerd> * The message has not yet been read, it is in ~/Maildir/new

[19:55] <gaal> asking for active ACK raises the likelyhood of action. :)

[19:56] <gaal> also, that way you don't have to worry they missed it (filtering, oversight) even though it was forwarded

[19:56] <gaal> bbl&

[19:58] *** autark joined
[20:01] *** Limbic_Region joined
[20:01] *** ruz joined
[20:06] *** justatheory joined
[20:17] *** Selva_ joined
[20:23] *** weinig|bbl is now known as weinig

[20:27] *** araujo joined
[20:27] <araujo> hello

[20:27] <marksto1> Hello araujo

[20:28] *** marksto1 is now known as markstos_

[20:29] *** Selva_ left
[20:31] <araujo> hi markstos_

[20:31] <araujo> :-)

[20:36] *** larsen joined
[21:00] *** foo\ joined
[21:17] *** crem joined
[21:21] <markstos_> Should this be a syntax error instead?

[21:21] <markstos_> ?eval warn @.perl

[21:22] <evalbot_12765> Error: Cannot cast into Hash: VRef <Sub:0x896318c>

[21:22] <Juerd> Not a syntax error. Rather, that it can't call .perl on the current invocant for there is none.

[21:23] <markstos_> Ah. Does that mean that .method is the same as self.method ?

[21:23] <Juerd> No, .method is the same as $_.method

[21:23] <Juerd> But $.method is the same as self.method

[21:23] <Juerd> As is @.method, but then with array semantics

[21:23] <markstos_> Ok. I see the consistency there.

[21:24] <b_jonas> "$.method"? seriously?

[21:25] * markstos_ is testing it now. 

[21:26] <markstos_> It doesn't work yet.

[21:26] <markstos_> ?eval class Foo { method a { $.b } method b { say "worked!" } } my $a = Foo.new; $a.a;

[21:26] <evalbot_12765> \undef

[21:26] <markstos_> If you change "$.b" to self.b, it works.

[21:27] <b_jonas> or just to ".b" I guess

[21:27] <markstos_> ?eval class Foo { method a { .b } method b { say "worked!" } } my $a = Foo.new; $a.a;

[21:27] <evalbot_12765> OUTPUT[worked! ] Bool::True

[21:27] <Juerd> b_jonas: Yes, seriously. $.method, @.method, and %.method will call self.method.

[21:27] <markstos_> So, $_ is set to the invocant there ? I guess so.

[21:28] <Juerd> Which is very useful, given that "has $.foo;", "has @.foo;", and "has %.foo;" create an accessor method called "foo"

[21:28] <markstos_> Juerd, but it doesn't work now if it's true, as my example showed. self.b.

[21:28] <markstos_> s/self.b//

[21:28] <Juerd> Then you can access it via $.foo, @.foo, and %.foo respectively. Useful, isn't it?

[21:28] <Juerd> markstos_: I speak about Perl 6, not Pugs.

[21:29] <markstos_> You mean, the spec, not the implementation.

[21:29] <Juerd> Pugs lags behind the specs, naturally :)

[21:29] <markstos_> Sure.

[21:29] <markstos_> dinner guests. &

[21:29] <Juerd> Though this has been specced for quite a while

[21:29] <Juerd> Pugs development has been about internal changes the past time

[21:33] <b_jonas> what? so $.foo means both a scalar instance variable and a method call of self?

[21:34] * b_jonas looks up in S12

[21:37] <b_jonas> I don't understand. Does this mean that when you declare a public attribute to a class with 'has $.foo;' then a public accessor method of name foo is also created?

[21:38] <Juerd> b_jonas: No, only a method call.

[21:38] <Juerd> b_jonas: With "has", it is special syntax.

[21:38] <Juerd> b_jonas: Yes.

[21:38] <b_jonas> ah, I see

[21:38] <b_jonas> "Public attributes have a secondary sigil of "dot", indicating the automatic generation of an accessor method of the same name. "

[21:39] <b_jonas> I should read before I ask

[21:39] <Juerd> And if you don't use the dot, the method is not created, and you have a normal variable, only instance-specific.

[21:39] <Juerd> Also known as "private"

[21:41] <b_jonas> I think I'll like this syntax

[21:41] <b_jonas> It's perl6ish.

[21:49] *** ruz joined
[22:00] <araujo> [1 .. Inf][3] .... shouldn't that work?

[22:04] *** diakopter_ joined
[22:14] <cmarcelo> araujo: I think 1..Inf isnt working yet..

[22:14] *** clkao joined
[22:16] *** clkao joined
[22:22] *** glasser joined
[22:23] *** obra_work joined
[22:26] *** obra_work is now known as obra

[22:51] *** diakopter_ left
[23:04] *** soisoisoi joined
[23:08] *** christo joined
[23:09] *** christo left
[23:34] *** ruz joined
[23:38] *** bsb joined
[23:50] <araujo> cmarcelo, ok .. but it is supposed to work right?

[23:51] *** mako132_ joined
[23:54] *** markstos_ joined
[23:54] <cmarcelo> araujo: since [1..5][3] works, I think with Inf it should work too.. but isn't clear to me yet the difference in p6 between (1..5) and [1..5], if exists..

[23:55] <avar> you can do @( @array[1..5][3] ) ?

[23:55] *** jferrero joined
[23:57] <cmarcelo> > [1..5][3]

[23:57] <lambdabot>    The function `[1 .. 5]' is applied to one arguments,

[23:57] <lambdabot>   but its type `[...

[23:57] <cmarcelo> ?eval [1..5][3]

[23:57] *** DaGo joined
[23:57] <evalbot_12765> \4

[23:57] <cmarcelo> ?eval (1..5)[3]

[23:57] <evalbot_12765> \4

