[00:30] *** avar joined
[00:38] *** weinig|away is now known as weinig

[00:42] *** mjk joined
[00:43] *** bsb joined
[01:05] <meppl> gute nacht

[01:09] <FurnaceBoy> n8

[01:17] <svnbot6> r10346 | fglock++ | PCR t/09-ratchet - 2 todo, 1 skip; added warnings for all unimplemented switches

[01:28] *** FurnaceBoy_ joined
[01:30] * audreyt goes to run a series of interlocking errands just to get into U.S...

[01:30] <audreyt> (which is a notoriously time-consuming process around here)

[01:31] <clkao>  believe me, it's much better than the french embassy

[01:31] <davidfetter> getting into the u.s. is a giant PITA :(

[01:31] <audreyt> clkao: I thought french is part of schengen

[01:31] <clkao> good thing is you get 5-year visa, rather than stupid 2-month one after spending 5 hours

[01:31] <davidfetter> this is why PostgreSQL's 10th anniversary thing in July will be in Tronno

[01:31] <clkao> yes, schengen visa is horrible in london. but alright in taiwan

[01:31] <audreyt> clkao: I'm not sure US still issue multientry 5year anymore for tourists

[01:32] <davidfetter> :(

[01:32] <clkao> audreyt: they do. i just got one last week

[01:32] <audreyt> will find out tomorrow

[01:32] <audreyt> oh. that's good

[01:32] <davidfetter> where in the u.s. will you be?

[01:32] <clkao> audreyt: sent a mail to you 'bout ref

[01:32] <audreyt> davidfetter: redmond->chicago->boston->portland

[01:32] <audreyt> clkao: got it. will proc tonight

[01:32] <clkao> thank you

[01:33] <obra> audreyt: that reminds me i should get bos->pdx tix

[01:33] <davidfetter> hrm. portland. when?

[01:33] <audreyt> davidfetter: oscon

[01:33] <audreyt> obra: cool. I plan to take the same plane as you

[01:34] * davidfetter is still unsure whether he can get to oscon, as the pg anniversary is 8-9 july

[01:34] <obra>   audreyt: oh. good to know :)

[01:34] <davidfetter> audreyt, will you be @ conisli?

[01:34] <audreyt> that's yapc::sa? probbly yes

[01:35] <clkao> mmmmmmm

[01:35] <davidfetter> cool. i'm hoping i can have enough of pl/parrot done to talk about it there :)

[01:35] <audreyt> ooh nice :)

[01:36] <audreyt> I admit I've been not catching up with any Pg/Mysql progress for months now

[01:36] <obra> pl/parrot?

[01:36] <audreyt> <- abducted by the infinitely hackable sqlite

[01:36] <davidfetter> sqlite is only finitely hackable compared to postgresql ;)

[01:36] <davidfetter> obra, are you familiar with PostgreSQL?

[01:36] <audreyt> well, speaking as someone who doesn't know C...

[01:36] <obra> davidfetter: some

[01:36] <audreyt> ...sqlite is easier to hack :)

[01:37] <davidfetter> i don't know C either

[01:37] <audreyt> wow

[01:37] <audreyt> and you hack PL/Parrot? :)

[01:37] <davidfetter> obra, well, one of the things you can do in PostgreSQL is write functions in lots of different languages

[01:37] <audreyt> obra: stored procedure

[01:37] <davidfetter> i see my role as organizer :)

[01:37] <audreyt> or rather, injected embedded functions

[01:38] <davidfetter> right now, there are separate projects for PL/Perl, PL/PHP, PL/Ruby...

[01:38] <davidfetter> i'd like to get it so there is just one: PL/Parrot, with small (ideally 0) changes for each of the front-end languages

[01:39] <audreyt> so essentially the mod_parrot vision

[01:39] <audreyt> with a different setting

[01:39] <davidfetter> yes :)

[01:39] <audreyt> laudable :)

[01:39] <davidfetter> and besides, i think it would help larger teams

[01:40] <davidfetter> ppl who write python wouldn't have to fight w/ppl who write perl

[01:40] <davidfetter> because they'd both have each other's stuff available :)

[01:40] *** sselva joined
[01:40] <obra>  *nod*

[01:41] <davidfetter> that's the "vision" part

[01:41] <davidfetter> so i am now trolling for ppl who will help move it forward in a more practical way

[01:41] *** Quell joined
[01:42] *** sselva left
[01:42] <audreyt> TimToady: does these two forms differ?

[01:42] <audreyt> f(1, ***) <== @x

[01:42] <audreyt> f(1) <== @x

[01:43] <audreyt> or is the latter equiv to this:

[01:43] <audreyt> f(1; ***) <== @x

[01:43] <audreyt> also, how does multipe pipe batches fit?

[01:43] <audreyt> f(1, ***, 2) <== @x <== @y

[01:43] <audreyt> does that *** only interpolate @x

[01:43] <audreyt> and @y goes into another separate pipe batch ?

[01:44] <audreyt> f(1, @x, 2 ; @y)

[01:44] <audreyt> because

[01:44] <audreyt> f(1, @x, @y, 2)

[01:44] <audreyt> would mean that *** does a flatten of batches

[01:44] <audreyt> the spec is a bit unclear about this.

[01:51] *** SamB joined
[01:54] *** dduncan joined
[01:58] <dduncan> as a follow-up to my comments of a few days ago about OSCON 2006 plans ...

[01:59] <dduncan> for various reasons, I'm now about 90% sure that I will NOT go to OSCON this year ...

[01:59] <dduncan> but rather I will try to attend at least one YAPC

[01:59] <dduncan> that occurs later on

[02:00] <davidfetter> dduncan, may i PM ?

[02:00] <dduncan> the question then becomes, with what seems like a half-dozen-plus YAPC events happening each year, which are the best to focus on if I have to be selective, where the most happens and/or most people in attendance ...

[02:00] <dduncan> davidfetter, IRC pm is fine

[02:00] <dduncan> if its stuff that shouldn't be said in public

[02:02] <davidfetter> fisl 7.0 had > 5500 attendees. dunno how many of those were at YAPC::Brazil, which was part of that

[02:04] <audreyt> dduncan: YAPCNA :)

[02:04] <dduncan> that's possible, but YAPC NA is even earlier than OSCON, so I may not have enough prep time

[02:05] <dduncan> I suppose the biggest issue is getting cheap flights at the last minute

[02:05] <dduncan> you're a lot more experienced with regular world travel, so probably know things ...

[02:06] <dduncan> will there be a YAPC NA hackathon?

[02:06] <audreyt> yes.

[02:06] <audreyt> will be great if yo ucan be there

[02:07] <audreyt> lots of #perl6 people and #parrot people will be there

[02:07] <audreyt> http://yapcchicago.org/wiki/?HackAThon

[02:07] <dduncan> in your experience, what's the latest one can book a round trip flight reliably?

[02:07] <audreyt> reliably, maybe two weeks before

[02:08] <audreyt> if you are wiling to pay for business class... pretty much anytime.

[02:08] <dduncan> I just need a ride and don't care for amenities, so whatever's easy to get and inexpensive

[02:09] <dduncan> also, it may be on the website, but I also have to figure out where to stay ...

[02:10] <dduncan> looking at website ...

[02:14] <dduncan> okay, I'll try to get to YAPC NA 2006 plus hackathon ... should know more definitely in the next 2 weeks or so

[02:20] *** shachaf joined
[02:45] *** diotalevi joined
[02:46] *** weinig is now known as weinig|sleep

[03:15] <svnbot6> r10347 | fglock++ | PCR t/09-ratchet.t - char classes like <alpha> are inlined

[03:36] *** hikozaemon joined
[03:37] *** kanru joined
[03:49] *** coumbes joined
[03:58] *** mako132_ joined
[04:00] *** nirgle joined
[04:40] *** shachaf joined
[04:50] *** shachaf joined
[05:04] *** Khisanth joined
[05:25] *** Quell joined
[05:56] *** bsb left
[06:01] <svnbot6> r10348 | Darren_Duncan++ | ext/Relation/ : updated Relation.pm to refactor code between semijoin() and join(), then add some algorithmic optimization to join(), then add new method semidifference() with aliases semiminus() and not_matching()

[06:03] *** dduncan left
[06:09] *** justatheory joined
[06:12] *** justatheory joined
[06:33] *** justatheory joined
[06:37] *** jserv-- joined
[06:40] *** domm joined
[06:40] *** iblechbot joined
[06:50] *** marmic joined
[06:54] <domm> grr, freenode won't let me /msg Juerd cause I'm not a registered user

[06:54] <domm> Juerd: I sent you a mail wrt train travel to vienna, please reply soon...

[06:55] <rgs> domm: or you can /msg him on irc.perl.org too

[06:57] <Juerd> Hi domm

[06:57] <domm> rgs: oh well, yes, thanks

[06:58] <rgs> hi, Juerd & domm !

[07:02] *** Southen joined
[07:03] *** oozy joined
[07:30] *** drrho joined
[07:30] *** Ymmv joined
[07:48] *** kanru joined
[08:38] *** Aankhen`` joined
[09:00] *** nnunley joined
[09:03] *** cognominal joined
[09:08] *** Aragone is now known as Arathorn

[09:11] <Arathorn> morning everybody

[09:36] *** justatheory joined
[09:51] *** justatheory joined
[10:01] *** justatheory joined
[10:12] *** justatheory joined
[10:17] *** Aankhen`` joined
[10:18] *** justatheory joined
[10:28] *** ludan joined
[10:37] *** justatheory joined
[10:47] *** ruz joined
[10:53] *** justatheory joined
[11:00] *** justatheory joined
[11:04] *** ruz joined
[11:09] *** chris2 joined
[11:09] *** justatheory joined
[11:22] *** justatheory joined
[11:24] *** jsiracusa joined
[11:29] *** neoesque joined
[11:30] *** kane_ joined
[11:35] *** mago joined
[11:38] *** justatheory joined
[11:52] *** justatheory joined
[11:55] *** mako132_ joined
[12:10] *** justatheory joined
[12:11] *** iblechbot joined
[12:17] *** Limbic_Region joined
[12:18] *** kolibrie joined
[12:21] *** ruoso joined
[12:21] *** justatheory joined
[12:23] <Juerd> What's the difference between $foo and $.foo again?

[12:23] <Juerd> Perl6/Overview/Object.pod doesn't explain this; should I be looking elsewhere?

[12:24] *** justatheory joined
[12:27] <azuroth> maybe $foo is just a 'my' and $.foo is a has?

[12:27] <Juerd> S12 of course. I've been doing other stuff too long.

[12:28] <Juerd> Public attributes have a secondary sigil of "dot", indicating the automatic generation of an accessor method of the same name

[12:28] <azuroth> like ruby's @foo I guess?

[12:29] <Juerd> I don't know.

[12:29] <Juerd> I've not used Ruby in ages

[12:30] <azuroth> oh, @foo might not declare an accessor. just makes it an instance var

[12:30] *** justatheory joined
[12:50] *** jiing_ joined
[12:56] *** justatheory joined
[13:11] *** justatheory joined
[13:14] *** justatheory joined
[13:19] *** justatheory joined
[13:21] *** cdpruden joined
[13:26] *** justatheory joined
[13:27] *** weinig|sleep is now known as weinig

[13:30] *** justatheory joined
[13:36] *** justatheory joined
[13:37] <svnbot6> r10349 | putter++ | sprintf_and_as.t - corrected typo.  sprintf("%d",2.4) is "2", not "3".

[13:38] *** justatheory joined
[13:43] *** justatheory joined
[13:45] *** sri_ joined
[13:50] *** justatheory joined
[13:52] *** justatheory joined
[13:54] <gaal> putter!

[13:56] <kane_> what Test::* module would i use to test commandline tools for desired output and exit codes?

[13:57] <obra> kane_: Test::Expect

[13:57] <obra> er oops. that's a p5 module

[13:57] *** justatheory joined
[13:57] <kane_> p5? that's what i want...

[13:59] <obra> Cool

[13:59] *** justatheory joined
[13:59] <kane_> and it's by acme... must be good code ;)

[13:59] <kane_> thanks obra

[14:00] <obra> :)

[14:00] <obra> and acme is responsive to patches

[14:00] *** FurnaceBoy joined
[14:00] <obra> rt 3.6.0rc2 has a set of cli tests based on it

[14:01] *** justatheory joined
[14:04] *** justatheory joined
[14:08] *** justatheory joined
[14:10] *** justatheory joined
[14:13] <svnbot6> r10350 | fglock++ | PCR - subrule-call rewrite under way

[14:16] *** Qiang joined
[14:46] *** cratylus joined
[14:46] <svnbot6> r10351 | putter++ | Common/Regexp-ReplaceEngine.pm wrap-up.  Added some notes, and moved Aside/.

[15:01] *** elmex joined
[15:03] *** cratylus joined
[15:19] *** mako132 joined
[15:20] *** cratylus_ joined
[15:29] *** cratylus joined
[15:34] <svnbot6> r10352 | putter++ | re-override/NOTES - an AUTHORS section attributed this new file to me. I removed it as undesired and misleading.

[15:34] <svnbot6> r10352 | putter++ | Yes, re-override was a fork of some exploratory coding I did.  But neither the code, nor its embedded __END__ notes, were more than development transients.  Given pugs' openness, anyone is of course free to distribute them as they judge fit.  But the quality gap between these development scribbles, and what I consider releasable code and docs, is too large for me to wish my name on such distribution.  Which is why I keep removing it. 

[15:34] <svnbot6> r10352 | putter++ | Thanks for the intent. ;)

[15:35] <FurnaceBoy> nicely structured essay: introduction, body, conclusion.

[15:36] <FurnaceBoy> makes me wonder if commit messages should include HTML, javaScript and inline images.

[15:36] <FurnaceBoy> and GPG signatures

[15:38] *** sahadev joined
[15:43] *** mako132 joined
[15:48] *** nnunley_ joined
[15:50] *** neoesque joined
[15:50] *** nnunley__ joined
[15:56] *** nnunley_ is now known as nnunley

[15:58] *** pdcawley_ joined
[16:01] *** scw_ joined
[16:28] *** Maddingue joined
[16:30] *** penk joined
[16:31] *** kane_ joined
[16:35] *** sri_ joined
[16:38] <svnbot6> r10353 | putter++ | builtins/my.t - Added comment: test $d ($d interpreted as $OUTER::d prior to mid-block my $d declaration) is inconsistent with the current spirit of S04.

[16:38] <svnbot6> r10353 | putter++ | It is not however strictly inconsistent.  While defined as an error, compilers are allowed, but not required, to complain.  But a fully conformant compiler will fail the test.

[16:38] <svnbot6> r10353 | putter++ | It might be worth noting in the spec why this ambiguity is desirable.

[16:41] *** hexmode joined
[16:48] *** fglock joined
[16:50] *** sri__ joined
[16:54] <fglock> how about making 'token' match at pos by default - regex :ratchet :p { ... }

[17:00] <fglock> does "atbtok" ~~ token{ tok } fails? since the first 't' is not followed by an 'o' and backtracking is disabled

[17:03] <TimToady> fglock: already does assume :p if called as a subrule.

[17:03] <TimToady> but a case might be made for doing it always.

[17:04] <fglock> I think :p would make it easier to learn/compile, as it it is mostly supposed to be used inside subrules anyway

[17:04] <TimToady> but if you want to use a token directly, why wouldn't you just use //?

[17:05] <fglock> isn't // a regex?

[17:06] <TimToady> yes, so you'd have to anchor it explicitly, but that's like to be shorter than token {...} inlined still.

[17:06] <TimToady> *likely

[17:06] <TimToady> I'm not really arguing against you--it's something that just hasn't been decided.

[17:07] <fglock> I'm asking because I have to decide whether to fix or to skip a test :)

[17:07] <TimToady> when used as a top-level matcher, there's something to be said for anchoring it on *both* ends.

[17:07] *** FurnaceBoy is now known as CurmudgeonBoy

[17:08] <fglock> sure

[17:08] *** aufrank joined
[17:08] <TimToady> that would in some way increase the "meaning" of token/rule vs regex.

[17:10] <TimToady> and would probably increase the utility of $input ~~ $pattern.

[17:10] <TimToady> for validation of numbers and such.

[17:11] <gaal> TimToady: is it okay to rename the 'reduce' builtin to 'fold' and add one for 'scan'? My understanding is that 'reduce' is the general term for them both.

[17:12] <TimToady> I don't like that usage of "scan" at all.

[17:12] <TimToady> It's far too overloaded to go with that one specific meaning.

[17:12] <gaal> the names ending with 'morphism' are worse

[17:12] <TimToady> which has very little to do with normal usage of the word.

[17:13] <TimToady> besides, there's no "reduction" taking place with it.

[17:13] <TimToady> you get the same number of values out.

[17:14] <TimToady> so I think this is just one of those places where Haskell is cork-brained from a linguistic point of view.

[17:14] <gaal> Okay. I'll try to think of a better name, but I really do think the function should be builtin, since it's easy on the runcore and relatively hard on to express in userland

[17:14] <wolverian> .reduce :keep? kind of fights itself semantically

[17:15] <gaal> .reduce :but_keep_adding_liquid

[17:15] <TimToady> you want something more like the idea of taking more and more terms in mathematics...

[17:15] <TimToady> refine maybe

[17:15] <gaal> .omgitsalive

[17:15] <wolverian> .triangulate? :)

[17:16] <TimToady> [\X]

[17:16] <wolverian> that's where I got it from..

[17:16] <TimToady> triduce.

[17:16] <gaal> [\X] is fine but doesn't accept lambdas, as we said..

[17:16] <wolverian> ha! tridunce

[17:16] <gaal> well, as you said :)

[17:16] <TimToady> traduce

[17:16] <wolverian> [\x -> ...] @list

[17:17] <gaal> wolverian: syntax error: operators don't permit whitespace

[17:17] <gaal> hmm!

[17:17] <wolverian> it's probably a bad idea to emulate the lambda syntax in one specific place...

[17:17] <gaal> so maybe this could be made to work with pointy subs after all? :)

[17:17] <TimToady> if some initial sequence was unlikely to be used in [...] composers, we could distinguish based on longest token even without the ]

[17:18] <TimToady> [\X] was not intended to be a lambda, H notwithstanding.

[17:18] <fglock> deltas

[17:19] <TimToady> we could possibly go with [->...] and [\->...] though.

[17:19] <gdickie> Perhaps [\ ... ] is an operator?

[17:19] <TimToady> at the moment, it's a metaoperaotr.

[17:19] <gaal> gdickie: it's already a metaoperator

[17:20] <svnbot6> r10354 | fglock++ | PCR - t/09-ratchet.t - tokens are only tested for :p cases

[17:20] <TimToady> maybe induce

[17:21] <particle_> is [/.] an operator yet? i think it'd fill your screen and logs with useless garbage :)

[17:22] <gdickie> What's the real difference to the language-user between a metaoperator, and a circumfix operator on Code? The latter might allow [\ -> { ... } ] or [\ myfun ]

[17:23] <TimToady> that latter is too much like a [...] composer

[17:24] <TimToady> but the "real" difference?  hmm.

[17:24] <TimToady> a metaoperator is making stricter promises about what is known at compile time, i think.

[17:25] <TimToady> it has to be based on something that's already completely declared.

[17:25] <TimToady> and more to the point, its interface completely known.

[17:26] <TimToady> if we had something like [-> { $^a mumble

[17:26] *** CurmudgeonBoy is now known as FurnaceBoy

[17:26] <TimToady> [-> $a, $b {...}]

[17:26] <TimToady> then we know the interface at that point, which might be good enough.

[17:27] <TimToady> In the more general case we might just have to assume that the function mentioned takes two arguments, in the absence of type inferencing.

[17:28] <TimToady> but even [-> $a, $b {...}] is ambiguous with a list consisting of one pointy sub.

[17:28] <Juerd> TimToady: Do you have an overview that indicates when to use a role, when to use a class?

[17:28] <TimToady> so we'd have to special case it.

[17:28] <Juerd> TimToady: Something end users can understand :)

[17:28] <TimToady> How the heck would I have one of those when I don't understand it myself?  :)

[17:29] <gaal> how about .radish for a name. It gets asymptotocally closer to a point

[17:29] <TimToady> I'm just a cargo-cult designer.  I leave it to others to understand it all...

[17:29] <Juerd> TimToady: Err...

[17:29] <TimToady> .radish and .reduce are too similar in pronunciation when drunk.

[17:29] <Juerd> I kind of hoped you'd understand the matter...

[17:30] <Juerd> What other languages have roles?

[17:30] <TimToady> none.  Smalltalk has traits though.

[17:30] <Juerd> Then it's not cargo culting :)

[17:31] <TimToady> As with any cargo-culter, I add my own interpretation when I borrow the symbology.  :)

[17:31] <svnbot6> r10355 | fglock++ | PCR - updated benchmark

[17:32] <TimToady> maybe .reduce and .preduce

[17:33] <gaal> .produce even?

[17:33] <gaal> because it produces the result (by stages)

[17:33] <TimToady> has possibilities.

[17:33] <gaal> or was that what the pun was working on?

[17:34] <TimToady> produce the next rabbit out of the hat...

[17:34] <TimToady> I was thinking the pun, but also the "pre"ness of it, as in "what reduce has internally before it gives you the final result"

[17:35] <gaal> .proginate

[17:35] <TimToady> but "pro" can mean "in front", I think, so maybe it works anyway.

[17:35] <Juerd> TimToady: But you have no view of what should be a role and what should be a class?

[17:35] <gaal> s/i/e/

[17:36] <Juerd> That'll be an incredible mess then, the first few years.

[17:36] <TimToady> I like the *duce relationship

[17:36] <Juerd> And I won't have anything useful to say in my Perl 6 OO talk :)

[17:36] *** DaGo joined
[17:37] <TimToady> roles are for abstractions that don't make a lot of sense to instantiate, such as generics

[17:38] <TimToady> that is, to instantiate without more information.

[17:38] <gaal> well, "re-" is back and "pro-" is forward in the ducere etymology

[17:39] <TimToady> I think it can be viewed as working in either Latin or English.

[17:40] <gaal> I meant, it's consistent that way too. I'm for (heh) it.

[17:41] *** bernhard joined
[17:43] <TimToady> Juerd: it's already been an incredible mess for the first few years, which is why you should probably be asking Stevan about this and not me.

[17:43] <gdickie> Somebody mentioned mathematical series a while ago; a mathematician would call the result of [\+] the "partial sums" of the operand. So if [ ... ] is reduce, [\ ... ] is partial-reduce or partial-reductions.

[17:44] <gaal> fwiw, I thought context dependence was a beautiful solution for [\]. If only say [+] weren't in list context.

[17:44] <gaal> .parduce :)

[17:44] <TimToady> I wasn't gonna say it...

[17:45] <aufrank> we're golfing now?  a par two hole?

[17:45] <gaal> aufrank: K does fold AND scan metaoperators in one character each

[17:46] <TimToady> It's no accident that (real) golfers are also called "hackers".

[17:46] <aufrank> gaal: par-deuce

[17:46] <TimToady> *cough* APL *cough*

[17:47] <PerlJam> good $localtime #perl6

[17:47] <gaal> APL, K and J are all related, aren't they?

[17:47] <TimToady> I know J is derived from APL.  Don't know about K.

[17:47] <Juerd> stevan: Do you have an overview that explains to end users when to use classes, and when to use roles?

[17:48] <TimToady> Juerd: or we could always Ask Slashdot.  :)

[17:48] <Juerd> God, please, no.

[17:49] <PerlJam> are there any languages that support the concept of roles out in the wild?

[17:49] <aufrank> stevan borrowed heavily from scala's traits, as I understand it

[17:50] <gaal> K was developed, quoth Wikipedia, by "Arthur Whitney, an influential APL programmer".

[17:50] <merlyn> influential in general, or just about APL?

[17:50] <merlyn> that's an odd use of "influential"

[17:51] <merlyn> maybe he was influential *because* he used APL?

[17:51] <PerlJam> Juerd: perhaps there's some "best practices" wrt traits (roles) in the scala docs

[17:51] <gaal> maybe he was influential because he developed K :)

[17:52] <PerlJam> gaal: so clearly Larry is an influential C programmer :)

[17:52] <TimToady> that's BASIC to you.

[17:54] <gaal> Surely he's influenced the way people think about C programming, and he did it with C.

[17:54] <TimToady> so maybe use P; puts you into the APL subset of P6...

[17:54] <TimToady> though I suppose L should be the next one...

[17:54] <TimToady> use PL;

[17:54] <TimToady> swipe 'em both.

[17:55] <gaal> L for ladder, that which is discarded etc.

[17:56] <gaal> where's audreyt, she gets my oblique Wittgenstein jokes

[17:56] <TimToady> well, I gotta pretend to go and work.  Not being much use right now, I'm afraid, due to incipient grandfatherhood...

[17:57] <gaal> I gotta .produce

[17:57] <gaal> happy incipience

[17:58] <aufrank> wow, that is the first time I actually parsed pro-duce as the verb "produce"

[17:58] <aufrank> in this conversation, that is

[17:58] * PerlJam is the anti-duce

[17:58] <TimToady> well, as long as you've invoked her...  audreyt: I'll think about *** and pipes in general as I'm driving up to Seattle.  There's something declarative I want there, but I'm not sure we've nailed it yet.  Trying to figure out how it all desugars.

[17:58] <particle_> driving to seattle?

[17:59] <FurnaceBoy> incipient? impending?

[17:59] <TimToady> incipient grandfatherhood, as I said...

[17:59] <TimToady> or perhapsh excipient...

[17:59] <FurnaceBoy> "beginning to happen or develop" ... it's been incipient for a while, then. :)

[17:59] <TimToady> perhapsh I should not drink so early in the day.

[17:59] <gaal> bon nascence, TimToady

[18:00] <TimToady> official due date was yesterday, but nuttin' happened.

[18:01] <kolibrie> babies are "never" born on the due date

[18:01] * particle_ was two weeks late, and has been trying to catch up since

[18:01] * kolibrie was late too

[18:02] <TimToady> I'm pretty sure I was conceived on Christmas...

[18:03] <particle_> i guess that's why perl6 will be born on christmas

[18:03] <TimToady> I come by it honestly...

[18:03] <TimToady> commutating... &

[18:04] *** solarbunny left
[18:05] *** ruz joined
[18:06] <stevan> Juerd: ping

[18:14] *** penk joined
[18:21] *** marmic joined
[18:26] *** Maddingue joined
[18:29] <spinclad> [\...]: how about .adduce: lead another item to the heap, and leave it there

[18:30] <spinclad> ..., and pile it on

[18:30] <wolverian> I like .produce

[18:32] <wolverian> btw, why was [\] invented? [] in list context being a scan too weird?

[18:33] <TimToady> yeah, basically, [X] is deemed to be too useful in list context, and the whole point of calling it "reduce" is that you end up with one thing.

[18:34] <TimToady> (or at least something less)

[18:35] <TimToady> And while I've often wanted a reduce operator, I can't recall ever wanting a produce operator.  Probably just lack of imagination on my part, but still, it's a Data Point.

[18:35] <particle_> .greengrocer

[18:36] <PerlJam> does [\X] need the huffmanization?

[18:36] <gaal> well, it was a nice unification

[18:37] <gaal> @triangulars ::= [\...] ...

[18:37] <gaal> @factorials := [*] 1 ..*

[18:37] <gaal> @pidigits := [+] ...

[18:37] <gaal> [\] that is

[18:38] <TimToady> but it was falling into the Haskell trap of huffmanizing the abstruse

[18:38] <TimToady> not to mention the APL trap

[18:39] *** ludan joined
[18:39] <TimToady> PerlJam: we could certainly live without [\X] but it's awfully "cute", to quote at least two of @Larry...

[18:39] <aufrank> has [\...] discussion been pretty much contained in this channel?  no bleed out to p6l yet?

[18:39] * aufrank tries to figure out what he missed

[18:39] <ludan> hi

[18:39] <gaal> I can't argue against that. I just loved the elegance

[18:39] <gaal> aufrank: it was in a thread called "Scans"

[18:40] <PerlJam> aufrank: well, a synopsis has been quite publicly updated on p6l  :)

[18:40] <TimToady> arguably, the [\X] should have been marked as conjectural, but it wasn't, so it isn't.  :)

[18:41] <TimToady> Just like *** and ==> *

[18:41] <aufrank> I remember [+] as reduce

[18:42] <aufrank> maybe this is the problem:  what is \X a standin for?

[18:42] <PerlJam> [\+] for instance,  (X is just some operator)

[18:42] <PerlJam> er, binary operator even :)

[18:43] <PerlJam> [\X] does have the nice allusion to Captures that bridges the mental gap to "save intermediate results"

[18:43] <aufrank> ?eval ([+] [1, 2, 3])

[18:44] <TimToady> 3, I hope.

[18:44] <TimToady> actually, (1,2,3)

[18:45] <TimToady> hmm.  maybe need something about forcing numeric context on a single argument there...

[18:46] <TimToady> well, ([+] [1, 2, 3]) + 1 is 4, so maybe not an issue.

[18:47] *** loud- joined
[18:48] <TimToady> on another subject entirely, I was thinking about unifying {...} and ; parsing a bit by saying that ; also may be continued with a , or followed by an immediate postfix.  Then you could say

[18:48] <TimToady> sort 3,1,2;.say

[18:49] <TimToady> or sort 3,1,2;\   .say

[18:49] <TimToady> not that you'd generally want to write it that way, but it seems like {...} and ; parsing could be more alike than different.

[18:50] <aufrank> gaal: I figured it out.  I missed triangulate in r9216.  I got too distracted by tr/\*/\[,\]/

[18:50] <TimToady> though it seems by that analogy that say 1,2,3;,4 is the same as 1,2,3,4

[18:52] <TimToady> and arguably the sort-say should be written sort 3,1,2 ==> say

[18:52] <TimToady> or sort 3,1,2 ==> ***.say in the current (non)conjecture.

[18:52] <wolverian> an arrow to a verb is weird.

[18:53] <PerlJam> having so many trigraphs in perl seems weird to me, but maybe only because I'm not used to it.

[18:53] <TimToady> how so?

[18:54] <wolverian> the arrow is a verb.

[18:54] <TimToady> how so re "arrow to verb", not trigraphs

[18:55] <wolverian> I read it as "go to" or "put into"

[18:55] <TimToady> "put into the input queue of"

[18:55] <PerlJam> wolverian: it's only weird because the noun is hidden.

[18:56] *** ruz joined
[18:56] <wolverian> yeah, it's not so weird that I won't get used to it.

[18:56] <TimToady> I think it's clearer than foo | bar in the shell...

[18:57] <wolverian> it is that..

[18:57] <PerlJam> TimToady: but we have had decades to get used to shell pipes and only a short time to get used to perl pipes :)

[18:58] <wolverian> the shell | would make more sense if it still had a hole in it.

[18:58] <TimToady> that's at right angles to how I think of the pipe

[18:58] <TimToady> I think it's a very skinny pipe.

[18:59] <wolverian> well, a leaking pipe.. it randomly picks parameters and sends them to the neighbouring statements

[18:59] <PerlJam> So is there a unicode version of ==> that's thicker so that I can increase my throughput?  ;)

[19:00] <wolverian> there is, but I can't type it with this keymap, only → . and I don't know if it's official.

[19:00] <TimToady> ⇛       21DB            RIGHTWARDS TRIPLE ARROW

[19:00] <wolverian> don't you want the double arrow?

[19:00] <TimToady> ⇉       21C9            RIGHTWARDS PAIRED ARROWS

[19:01] <TimToady> the funny thing about

[19:01] <TimToady> ⇒       21D2            RIGHTWARDS DOUBLE ARROW

[19:01] <gaal> Beh. I added "produce" and [\] but am getting SVK errors in pushing it. Don't work on hacking this, folks

[19:01] <TimToady> is that

[19:01] <TimToady> ⇐       21D0            LEFTWARDS DOUBLE ARROW

[19:01] <TimToady> is shorter in my font than the rightwards one.

[19:01] <TimToady> you'd think they'd be symmetrical.

[19:02] <TimToady> course, there's also dingbats:

[19:02] <wolverian> they're the same length here.

[19:02] <TimToady> ➔       2794            HEAVY WIDE-HEADED RIGHTWARDS ARROW

[19:02] <TimToady> ➙       2799            HEAVY RIGHTWARDS ARROW

[19:02] <TimToady> ➛       279B            DRAFTING POINT RIGHTWARDS ARROW

[19:02] <TimToady> ➝       279D            TRIANGLE-HEADED RIGHTWARDS ARROW

[19:02] <TimToady> ➞       279E            HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW

[19:02] <TimToady> ➡       27A1            BLACK RIGHTWARDS ARROW

[19:03] <wolverian> oh, and the double arrow is probably =>, so that the unicode variants are shifted by one, because there's -> and => (both the same length)

[19:03] <TimToady> well, it's not the only thing screwy about my current font...

[19:04] <TimToady> I was actually thinking pipes should maybe be:

[19:04] <TimToady> ⇠       21E0            LEFTWARDS DASHED ARROW

[19:04] <TimToady> ⇢       21E2            RIGHTWARDS DASHED ARROW

[19:05] <aufrank> invisibly different from → here

[19:05] <TimToady> or maybe

[19:05] <TimToady> ⇦       21E6            LEFTWARDS WHITE ARROW

[19:05] <TimToady> ⇨       21E8            RIGHTWARDS WHITE ARROW

[19:06] <TimToady> there do exist:

[19:06] <TimToady> ⟸       27F8            LONG LEFTWARDS DOUBLE ARROW

[19:06] <TimToady> ⟹       27F9            LONG RIGHTWARDS DOUBLE ARROW

[19:06] <TimToady> but those are even shorter in my font...

[19:07] <aufrank>   do those show up with boxes around them for everyone else?

[19:07] <aufrank> or is that my font or my dark background?

[19:07] <TimToady> not me.

[19:07] <TimToady> they just look like a shorter version of the "short" ones in my font.

[19:07] <wolverian> my font doesn't have them, so they show up as ? in boxes

[19:08] <TimToady> I think they don't show up in Firefox either, last I checked.

[19:08] <aufrank> wolverian wins, I think

[19:09] <TimToady> is this the circular scale where it wraps around in back so that wins and loses is the same thing? :)

[19:09] <TimToady> sort of like communist and fascist meet around back at totalitarian?

[19:10] <TimToady> and blue and red meet around back at purple?

[19:10] * FurnaceBoy (h) ASCII

[19:10] <TimToady> I am not familar with the (h) operator...

[19:11] <TimToady> Is that ASCII for ❤ ?

[19:12] <clkao> (y)

[19:12] <clkao> (Y) actually

[19:12] <FurnaceBoy> <3

[19:12] <PerlJam> (h) is the hate operator.  FurnaceBoy was expressing his hatred for ASCII

[19:12] <TimToady> not to be confused with [Y]

[19:12] <FurnaceBoy> (heart)

[19:12] <TimToady> or [\Y]

[19:12] <FurnaceBoy> PerlJam, !hate

[19:12] <clkao> (\/)

[19:12] <clkao> (v)

[19:12] <FurnaceBoy> I see <3 for it, but I always think icecream, or flowers...

[19:13] <TimToady> [nor]

[19:13] <FurnaceBoy> or file descriptor 3...

[19:13] <wolverian> (v) is just hot ..

[19:13] * FurnaceBoy wolfwhistles

[19:13] * FurnaceBoy ... in EBCDIC

[19:13] <gdickie> [Y] transposes a list of lists. Nice!

[19:13] <FurnaceBoy> (v) conflates a crate of plates.

[19:17] <PerlJam> so ... earlier I said that the operator in [X] must be binary.  Is that true?  Could it be N-ary as long as it prodoces a scalar result?

[19:18] <TimToady> for syntactic purposes it must currently be defined as infix:<X>

[19:18] <TimToady> otherwise it's too ambiguous with [...] as an array composer.

[19:19] <PerlJam> okay, good. :

[19:19] <TimToady> It's probably sufficient to say &infix:<X> ::= &X or some such.

[19:20] <TimToady> presuming the signature of X is $x/$y compatible.

[19:27] <svnbot6> r10356 | gaal++ |  r10423@sike:  roo | 2006-05-15 21:52:25 +0300

[19:27] <svnbot6> r10356 | gaal++ |  * parse and honor [\] metaoperator

[19:27] <svnbot6> r10356 | gaal++ |  * produce builtin

[19:27] <svnbot6> r10356 | gaal++ |  * update tests

[19:27] <gaal> clkao++

[19:28] <TimToady> http://wall.org/~larry/umaybe has a list of potential Unicode characters for Perl.  I'm particular fond of

[19:28] <gaal> afk&

[19:28] <TimToady> ⁇       2047            DOUBLE QUESTION MARK

[19:28] <TimToady> ‼       203C            DOUBLE EXCLAMATION MARK

[19:29] <TimToady> mostly just thinking ahead to specifying which characters *might* have mappings someday, and if so, what they'd be.

[19:33] <TimToady> all systems are go for lunch &

[19:41] *** cratylus left
[19:52] <clkao> gaal: :)

[19:56] *** aufrank joined
[20:03] *** aufrank joined
[20:04] <gaal> TimToady: docs/quickref/unicode has a few suggestions

[20:06] <gaal> √ ≡ etc.

[20:27] <TimToady> I'm taking my list down since docs/quickref/unicode is much better organized.

[20:28] *** nothingmuch joined
[20:29] *** justatheory joined
[20:44] *** loud- left
[20:50] *** larsen joined
[20:52] *** shachaf joined
[21:12] *** aufrank joined
[21:23] *** penk joined
[21:25] *** ruoso joined
[21:26] *** jsiracusa joined
[21:37] <azuroth> I can mount my mp3 player and delete one directory on it, but after that it says "this is a read only filesystem!"

[21:42] <szbalint> I suppose linux + usb + storage?

[21:43] <szbalint> If yes you might enable usb debug messages in the kernel and check dmesg

[21:44] <azuroth> hmm, okay. I might just try reformatting the thingy as fat first, because it's got a whole bunch of crazy files on it

[21:47] <FurnaceBoy> did you check system log?

[21:47] <FurnaceBoy> a media error can force it to switch to read only

[21:47] <azuroth> no, I didn't ;-p where is the system log?

[21:48] <FurnaceBoy> /var/log/messages, typically

[21:48] <FurnaceBoy> or you can also just hit 'dmesg' for recent ones

[21:49] <azuroth> ah, cool. I'll check later; hopefully this copying is working now after the format. I think I'm going to miss my train

[21:50] <FurnaceBoy> good luck

[21:55] <azuroth> at least two songs works :D

[22:04] *** froh-doh joined
[22:18] *** weinig joined
[22:30] *** penk joined
[22:31] *** [BlueT_at_Mars] joined
[22:32] <[BlueT_at_Mars]> penk: :p

[22:37] <svnbot6> r10357 | lwall++ | reverse examples are conflicting with built-in, renamed to rev

[22:47] <TimToady> ?eval say"foo"

[22:49] <svnbot6> r10358 | Darren_Duncan++ | ext/Relation/ : TODO-ize the test suite since module prerequisites not ready yet

[22:50] <TimToady> madgolfer.p6 is failing on the say"foo" problem.

[22:52] <TimToady> that should parse.  just because say.bar requires the absence of whitespace doesn't mean that say"foo" requires whitespace...

[23:01] *** rashakil_ left
[23:11] *** penk left
[23:22] *** ruoso joined
[23:26] <Juerd> stevan: It's unlikely that we will be online and active at the same time. Try the asynchronous aspect of IRC, and skip the ping :)

[23:26] <Juerd> afk

[23:26] <Juerd> (z)

[23:45] *** bsb joined
