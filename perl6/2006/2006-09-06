[00:01] *** markstos joined
[00:02] <TreyHarris> renormalist: thanks for looking at it :-)

[00:04] <jdv79> any idea on the status of the metamodel stuff?

[00:04] *** weinig|food is now known as weinig

[00:06] <markstos> What's the recommend tool for viewing the kwid in Perl 6 modules ?

[00:06] <renormalist> TreyHarris: np :-)

[00:07] <svnbot6> r13050 | trey++ | [t/perl5/array.t]

[00:07] <svnbot6> r13050 | trey++ | Un-todo'd passing test.  Wrapped some

[00:07] <svnbot6> r13050 | trey++ | failing tests in eval so that skip_rest

[00:07] <svnbot6> r13050 | trey++ | could be removed.  Wrapped failing

[00:07] <svnbot6> r13050 | trey++ | expressions in eval, and tested them.

[00:07] <svnbot6> r13050 | trey++ | Removed voodoo that doesn't seem necessary

[00:07] <svnbot6> r13050 | trey++ | anymore.

[00:14] <TreyHarris> renormalist: oh, if it's an easy hack, ? can't introduce a regex anymore, and since ?() is used all over the place in pugs' tests, it would be helpful if that were fixed :-)

[00:15] <theorbtwo> Er, what's ?() now?

[00:16] <TreyHarris> theorbtwo: boolean context

[00:16] * theorbtwo slaps his head.

[00:16] <TreyHarris> like @() array context, %() hash context, !() boolean negating context, $() scalar context

[00:17] <theorbtwo> I don't think of those as having parens after them, for some silly reason, so I was thinking of something more function-like and less operator-like.

[00:17] <theorbtwo> (And you missed ~, string context, and +, numeric context.)

[00:19] *** ludan joined
[00:20] *** markstos left
[00:21] *** markstos joined
[00:21] <TreyHarris> yup.  without the parens, my brain starts to hurt though.  maybe i'll get more comfortable with ~expr versus expr1 ~ expr2 as time goes on....

[00:21] <svnbot6> r13051 | trey++ | [t/perl5/array.t]

[00:21] <svnbot6> r13051 | trey++ | Uncommented and munged a hardfail into

[00:21] <svnbot6> r13051 | trey++ | something testable.

[00:22] <markstos> To answer my own question about reading kwid. I found "perl-doc", but it is just currently a kwid to HTML translator. Are they are any direct kwid viewers ?

[00:23] <TreyHarris> markstos: i've been meaning to look into that myself.  there's an ext/Kwid-Event-Parser, but I don't know what it does

[00:24] <markstos> I'm getting frustrated with reading the source of Test.pm each time I wonder about a specific testing method.

[00:24] <TreyHarris> i must have run "perldoc ext/Test/lib/Test.pm" a hundred times....

[00:24] <TreyHarris> lol

[00:24] <TreyHarris> == markstos

[00:24] <TreyHarris> spooky

[00:24] <markstos> I prefer kwid to POD for looks, but I'm considering PODifying Test.pm until kwid tools catch up.

[00:25] <markstos> Can I get a ++ ?

[00:25] <TreyHarris> markstos++

[00:25] <TreyHarris> TreyHarris++

[00:25] <perlbot> What kind of idiot karmas himself?  Your kind of idiot!

[00:25] <TreyHarris> lol

[00:25] <markstos> lol

[00:25] <TreyHarris> &'s for a few

[00:25] <markstos> Ok. I'll PODify Test.pm now.

[00:27] *** nekokak joined
[00:31] *** renormalist_ joined
[00:39] <svnbot6> r13052 | markstos++ | convert Test.pm docs from kwid to POD as there are more tools

[00:39] <svnbot6> r13052 | markstos++ | and familiarity with POD now. Once there are kwid tools for

[00:39] <svnbot6> r13052 | markstos++ | easy viewing, we can change it back.

[00:40] *** GeJ left
[00:40] <TreyHarris> hmmm.... when a test in a loop is todo'd, and it succeeds some of the time, what to do? (pun unintentional.) untodo it?  leave it todo'd?  or go to the trouble of teasing that case out of the loop?

[00:41] <markstos> Ah. http://feather.perl6.nl/~markstos/Test.pm.html

[00:41] <lambdabot> Title: Test - Test support module for perl6, http://tinyurl.com/p2dor

[00:41] <markstos> An easy Test.pm reference. :)

[00:42] <TreyHarris> perlbot: learn perl6 Test.pm as http://feather.perl6.nl/~markstos/Test.pm.html

[00:42] <perlbot> added perl6 Test.pm to the database

[00:42] <lambdabot> Title: Test - Test support module for perl6, http://tinyurl.com/p2dor

[00:42] <markstos> TestHarris: ideally-- extract the test case.

[00:42] <markstos> A simplified test case might be easier to work with anyway.

[00:43] <audreyt> 00:39 < TreyHarris> actually, i know it's not.  Proxy objects aren't  implemented.

[00:43] <lambdabot> audreyt: You have 1 new message. '/msg lambdabot @messages' to read it.

[00:43] <markstos> but it's easy to be idealistic from afar-- you are the one staring it at. :)

[00:43] <audreyt> actually, it's hacked in by schwern long ago :)

[00:43] <audreyt> "user defined" proxy objects aren't implemented.

[00:43] <audreyt> builtin ones like %*ENV or $*CWD works fine

[00:43] <markstos> TreyHarris: so we do we get that information /out/ of perlbot later ?

[00:44] <markstos> perlbot: what is Test.pm?

[00:44] <perlbot> I already have an entry for what

[00:44] <audreyt> perlbot: Test.pm

[00:44] <TreyHarris> audreyt: ah... what's the difference?  they can be written in Haskell but not perl?

[00:44] <TreyHarris> perlbot: perl6 Test.pm

[00:44] <perlbot> http://feather.perl6.nl/~markstos/Test.pm.html

[00:44] <lambdabot> Title: Test - Test support module for perl6, http://tinyurl.com/p2dor

[00:44] <audreyt> TreyHarris: exactly. though I think the plumbing is here for userdefined proxy too

[00:45] <audreyt> just need to be exposed

[00:45] * audreyt backlogeth

[00:45] <TreyHarris> cool... if it were exposed, i think i could actually code up my cloning proposal rather than just describing it.  oh... i guess i'd need user-defined trait_auxiliary:is support too

[00:45] <audreyt> noted

[00:46] <audreyt> is there test for latter?

[00:46] <markstos> The test.pm docs say "This function currently uses require() since Pugs does not yet have a proper use() builtin."  I've found the reverse to be true-- I've had better look with "use" than "require"

[00:46] <TreyHarris> audreyt: i don't remember if i looked.  i'll check, and if not, i'll write one asap

[00:46] <audreyt> markstos: right it's a commentrot

[00:46] <markstos> audreyt: so just remove the comment ?

[00:46] <audreyt> TreyHarris: cool! I've been lately biased toward working at failing tests _with smartlinks_

[00:46] * TreyHarris often gets diverted when he starts looking at stuff inside t/ and comes up for breath hours later not having accomplished what he intended to

[00:46] <audreyt> markstos: sure

[00:47] <TreyHarris> audreyt: dunno if you watch the svn logs, but many of my recent commits have been smartlinking :-)

[00:47] <audreyt> TreyHarris: that's fine... it all adds up :)

[00:47] <audreyt> TreyHarris: I have :)

[00:47] * audreyt still reviews each and every diff... or at least s/review/skim/

[00:48] <TreyHarris> i should clean up my "svn-explorer" script that lets me quickly work through recent commits trn-style and stick it in util/

[00:48] <svnbot6> r13053 | markstos++ | Test.pm: remove note suffering from comment rot.

[00:48] <TreyHarris> but it makes a lot of assumptions about my pugs installation right now.

[00:49] <markstos> I'm close to getting a basic CGI::App port done with tests passing. After that, I might help improve the Test.pm docs and other testing stuff.

[00:49] <audreyt> TreyHarris: that never stops pugs committers from checking things in :)

[00:49] <audreyt> markstos: oooh

[00:50] *** hikozaemon joined
[00:50] <markstos> I saw that agentz recently commited so that this works: L<http://foo.com>

[00:50] <markstos> I like that because, because I can copy and paste Syn URLs from my browser. :)

[00:51] <markstos> s/because, // :)

[00:53] <TreyHarris> markstos: oh, btw, i've cleaned up a few of your smartlinks recently.  don't put the section name in quotes, do include pod directives like C<> in the section names, and run util/smartlinks.pl --check t/<mumble>.t before you checkin to see if they're all valid

[00:54] <markstos> TreyHarris: Thanks for the tip!

[00:56] <TreyHarris> audreyt: there's some ambiguity in the synopses as to whether it's written trait_auxiliary:is or trait_auxiliary:<is>.  the latter is tested, the former is not

[00:56] <audreyt> ok. I think :is is internal storage form, :<is> is canonical

[00:56] <audreyt> so test for latter = correct

[00:57] * markstos just noticed t/README, which already includes all of trey's tips. 

[00:57] <TreyHarris> audreyt: thanks, i'll smartlink them :-)

[00:57] <audreyt> moose! :)

[00:58] * audreyt goes grepping for breakfast -- bbiab

[00:58] <TreyHarris> markstos: yup.  good tips in /lib/Pugs/Doc/Hack.pod too, and IMHO it's too-well-hidden-away

[00:58] <markstos> TreyHarris: link it it from the wiki, or pod2html ~/public_html/Hack.html, and link to /that/ from the wiki.

[00:59] <TreyHarris> markstos: i don't have a feather account, would you mind?

[01:00] <markstos> coming up

[01:00] *** dolmans joined
[01:01] <audreyt> @tell xerox install File::chdir from CPAN and use { local $CWD = '/foo'; ... }

[01:01] <lambdabot> Consider it noted.

[01:02] <audreyt> written, unsurprisingly, by the same Schwern.

[01:03] <TreyHarris> oh... yes... i've used that myself.

[01:03] * TreyHarris smacks his head

[01:03] <markstos> http://feather.perl6.nl/~markstos/Hack.html

[01:03] <lambdabot> Title: Pugs::Doc::Hack - How to hack on Pugs

[01:03] <markstos> Wow, looks  really useful.

[01:03] <markstos> It should really be in doc/ --- that's where I'd expect to find it.

[01:03] <TreyHarris> My memory for CPAN modules is not what it used to be

[01:05] *** scook0 joined
[01:06] <TreyHarris> markstos: you may want to go behind the tests you've added and fix their svn props as described in that doc.  i've caught a couple of them as you committed them, but i haven't gone back and looked exhaustively.

[01:06] <markstos> Ok. I'

[01:06] <markstos> I'm totally unaware of svn props usage, so I'm not surprised.

[01:09] <svnbot6> r13054 | markstos++ | Move lib/Pugs to docs/Pugs for consistency and ease of finding.

[01:09] <svnbot6> r13054 | markstos++ | I'll document this move the Pugs/Doc/Hack.pod layout docs.

[01:11] <markstos> So the svn props util script is normally run just after adding new files? The doc said to run it... it didn't say /when/ :)

[01:11] <svnbot6> r13055 | markstos++ | reflect move of lib/Pugs to docs/Pugs

[01:22] <TreyHarris> markstos: you can run it any time after you do the add.   preferably before you do the commit :-)

[01:22] <markstos> Ah.

[01:26] <svnbot6> r13056 | markstos++ | clarify when to run the svn props scripts.

[01:28] <markstos> Should this emit an error?

[01:28] <markstos> ?eval my @r; @r.push<hi>; say @r.perl;

[01:28] *** evalbot_r13037 is now known as evalbot_r13055

[01:28] <evalbot_r13055> OUTPUT[[] ] Bool::True

[01:28] *** peacock joined
[01:29] <TreyHarris> i think it should emit an error.  S06, I think, specifies that you can't call a subroutine like that

[01:29] *** peacock left
[01:29] <TreyHarris> even if the subroutine returns a hash, which that doesn't

[01:29] *** peacock joined
[01:29] <TreyHarris> s/subroutine/routine/g

[01:30] <markstos> Ok. Adding test.

[01:30] <TreyHarris> *laugh* that irc log stats thing somebody posted a couple weeks ago said that my favorite things to say were "i think" and "specifies".  i think i just proved that it specifies my behavior accurately ;-)

[01:32] <markstos> funny.

[01:32] *** mako132_ joined
[01:35] <svnbot6> r13057 | markstos++ | [t/builtins/arrays/push.t]

[01:35] <svnbot6> r13057 | markstos++ | New failing test for @a.push<hi>: it should emit an error.

[01:51] <markstos> I just porting the Dump function from CGI.pm-p5 and noticed there was a bug in it:

[01:51] <markstos> http://rt.cpan.org//Ticket/Display.html?id=21341

[01:51] <lambdabot> Title: #21341: PATCH: Param names not escaped properly in Dump, allowing raw HTML throu ..., http://tinyurl.com/gbb6f

[01:51] <markstos> s/just/was just/

[01:55] <obra> seen nothingmuch

[01:58] <TreyHarris> hmm.  audreyt, what's your understanding of how @r.push<hi> should parse, if it should parse at all?

[01:59] <markstos> TreyHarris: are you wondering whether it should parsefail, rather than be a runtime error ?

[01:59] <TreyHarris> markstos: yep.

[01:59] <markstos> Earlier feedback is always nicer.

[01:59] <TreyHarris> markstos: apologies, i didn't think of the distinction until i saw your diff, or i would have mentioned it earlier

[02:00] <markstos> No apology needed. I thought it as I was creating the patch, but I knew it could be refined later.

[02:01] <TreyHarris> yep, it's just that in this case, if it should be parsefail, then "success" will be defined as failing not just that test, but any tests which later might follow :-)

[02:02] <TreyHarris> i like to future-proof tests when possible, because a good change causing more test failures is demotivational ;-)

[02:02] <markstos> But we would switch to using eval with a string, rather than dies_ok with a block, right ?

[02:02] <TreyHarris> right.  ok !(eval '...') is how i usually write it

[02:03] <TreyHarris> or rather

[02:03] <TreyHarris> right.  ok !(eval '...; 1') is how i usually write it

[02:03] <markstos> And that would cover a parsefail case, as well as a runtime error? Then it seems there's no downside to switching it now.

[02:11] <TreyHarris> markstos: the downside is you're running string eval, which makes smoke slow. :-)  correct tests are more important than fast tests though

[02:12] <markstos> Oh. On the other hand, yesterday I got rid of two test scripts by consolidating them, so that should bring a small performance boost.

[02:13] <markstos> We can leave it as a dies_ok now, and then it it really does become a parsefail, someone will notice and fix the script. :)

[02:14] <TreyHarris> true enough :-)

[02:16] *** reZo joined
[02:19] *** diakopter joined
[02:22] <dolmans> markstos: you can use eval_dies_ok($str ... too, which is essentially ok !(eval $str ...

[02:25] <TreyHarris> dolmans: yes, in this case it is.  but eval_dies_ok runs the eval in its lexical context, so you can't use it when it refers to something in the test's lexical context

[02:25] <TreyHarris> i've been bitten by that one many times

[02:26] *** diakopter left
[02:27] <TreyHarris> ok !(eval $str) always works, so I tend to just use that now :-)

[02:27] <dolmans> TreyHarris: true, and sometimes package scope is annoying.

[02:34] <markstos> TreyHarris: I can't reminder my password to register with FreeNode to msg you directly

[02:35] <TreyHarris> ahh, ok, i'll make a channel

[02:35] <markstos> or do this: /msg nickserv set unfiltered on

[02:35] <markstos> And you can get msgs from unregistered users

[02:46] *** reZo joined
[02:50] <TreyHarris> markstos: heh, my script fired that opped the last person on the channel before i left :-)

[02:50] * TreyHarris &'s to decommute

[02:54] *** weinig is now known as weinig|zZz

[02:56] * markstos wraps up another blog post, encouraging more people to get involved in Perl 6

[02:56] <clkao> markstos++

[02:57] <markstos> clkao: Would you like a preview?

[02:57] <markstos> http://feather.perl6.nl/~markstos/three_reasons.txt

[03:00] <markstos> if you have feedback, I can incorporate it before I officially publish it.

[03:02] <clkao> looks fine to me. surely you want to mention the irc?

[03:02] <markstos> like "join us on #perl6" or something ?

[03:03] <clkao> ya

[03:03] <markstos> Ok.

[03:03] <TreyHarris> markstos: oh, i was just heading out the door when i noticed my pugs make didn't even get off the ground because Hack.pod had moved.  You may want to make a minor change to Makefile.PL so that people's Makefiles will rebuild

[03:04] <markstos> will do.

[03:04] * TreyHarris &'s for real this time

[03:12] <markstos> We're live: http://pugs.blogs.com/pugs/

[03:13] *** mako132_ joined
[03:16] <markstos> I think we need to start Pugs::Diagnostics.. or something. To help people when they get errors like this:

[03:16] <markstos> Can't modify constant item: VUndef

[03:22] <markstos> What's my crime?

[03:22] <markstos> ?eval my @result; for <a b> -> $param { @result.push("<li><strong>$param</strong></li>"); }

[03:22] *** evalbot_r13055 is now known as evalbot_r13057

[03:22] <evalbot_r13057> Error: Can't modify constant item: VUndef

[03:22] <markstos> I suspect I accidently involved some interpolation operator I'm unaware of.

[03:23] <markstos> Ah, it was $param<

[03:45] <svnbot6> r13058 | markstos++ | CGI.pm: implement code/docs/test for "Dump" method, like CGI.pm-P5 has.

[03:50] <TreyHarris> ?eval my @result = gather { for <a b> -> $param { take "<li><strong>{$param}</strong></li>" } }

[03:50] *** evalbot_r13057 is now known as evalbot_r13058

[03:50] <evalbot_r13058> ["<li><strong>a</strong></li>", "<li><strong>b</strong></li>"]

[03:51] <TreyHarris> I like gather/take :-)

[03:51] <markstos> I haven't used it yet.

[03:52] <markstos> Wouldn't a simple "push" work there, though?

[03:55] <TreyHarris> of course, but I don't think push is simpler... it's only simpler from the perspective of being familiar to perl 5 programmers.  you're not "pushing" anything in that case, there's no stack there... you want to gather up some things after they've been munged in a certain way

[03:56] <TreyHarris> ?eval <a b>.map:{ "<li><strong>{$^param}</strong></li>" }

[03:56] <markstos> but in this case the "Munging" is just creating a string, and that part would remain with a push call there.

[03:56] <evalbot_r13058> ("<li><strong>a</strong></li>", "<li><strong>b</strong></li>")

[03:56] <TreyHarris> might be more familiar to functional programmers.  timtowtdi, of course :-)

[03:56] <TreyHarris> i don't understand.  push?  push is something you do to stacks.  you're creating a list of strings, aren't you?

[03:57] <markstos> right.

[03:57] <markstos> Later to be joined with "\n".

[03:58] <markstos> You're say: conceptually, the stack is not a the best metaphor, and gather/take avoids it ?

[03:58] <TreyHarris> ?eval <a b>.map:{ "<li><strong>{$^param}</strong></li>" }.join("\n")

[03:58] <evalbot_r13058> "<li><strong>a</strong></li>\n<li><strong>b</strong></li>"

[03:58] <markstos> If you want to play with a refactor, I just check in the result to the CGI.pm as the Dump method.

[03:59] <markstos> The code is a mostly-straight port from the P5 Dump method.

[03:59] <markstos> Now I'm playing with "as_yaml" as an alternative, but I'm finding the structure that Pugs generates isn't as "clean" as I would have hoped.

[03:59] <TreyHarris> right.  "push == 'put something onto the end of a list'" is a perl5ism.  whether it's a perl6ism as well remains to be seen.  but i try to look at all perl 6 code from a new set of eyes, not as a translation of perl 5 with some nifty new features

[04:00] <markstos> Yes: I'm definitely interested in learning about and evaluating new styles myself.

[04:00] <markstos> Simply translating P5 into a new-but-same syntax seems like a waste of time.

[04:01] <TreyHarris> especially as we'll have tools to do that for us automatically ;-)

[04:01] <markstos> you mean, to automatically waste time?

[04:01] <markstos> ;-)

[04:01] <TreyHarris> yes, of course.  ever played WoW? :-)

[04:01] <markstos> No, but I heard it is popular... must be for a reason.

[04:02] <TreyHarris> the ultimate time-wasting tool ;-)

[04:03] <markstos> TreyHarris: by the way, I did a 'make' with problem.

[04:03] <markstos> maybe you needed a "make clean" ... or something.

[04:05] <TreyHarris> yes, i did.  and anyone else who last built just prior to r13054 but later than... um... i'd have to dig up the exactly rev, will need to as well.  i suggested you change Makefile.PL so they won't have to manually make clean

[04:05] <markstos> Could you help me? I looked and couldn't find what needed to be changed.

[04:06] <TreyHarris> nothing.  just some change, so Makefile.PL's timestamp gets updated, forcing a make clean

[04:06] <markstos> Uh oh, it's 00:01 o'clock. I'm going to turn into a pumpkin soon.

[04:06] <markstos> No wonder I couldn't find the right spot.

[04:07] <TreyHarris> Makefile.PL automatically generates document targets from the podfiles it finds.  you moved one of the podfiles, but didn't update Makefile.PL.  but Makefile still has a reference to the old loc.  so it bombs, unable to find Hack.pod in its prior location

[04:09] <svnbot6> r13059 | markstos++ | TreyHarris suggested making a trivial change after moving

[04:09] <svnbot6> r13059 | markstos++ | some files from lib/Pugs to docs/Pugs. Reportedly, this

[04:09] <svnbot6> r13059 | markstos++ | prevent a build-break for some people.

[04:16] <TreyHarris> anyway gather/take becomes more useful when it's not just linearly mapping:

[04:16] <TreyHarris> ?eval my @vowels = <a e i o u>; my @after_vowel = gather { for each(@@vowels) -> $letter, $next { take $next if $letter eq any(@vowels) } }

[04:16] *** evalbot_r13058 is now known as evalbot_r13059

[04:16] <evalbot_r13059> Error: Undeclared variable: "$next"

[04:16] <TreyHarris> unfortunately that syntax doesn't work yet.

[04:16] <TreyHarris> :-)

[04:17] <TreyHarris> erm... that's not what i meant.

[04:17] <TreyHarris> ?eval my @vowels = <a e i o u>; my @after_vowel = gather { for each(@@<a..z>) -> $letter, $next { take $next if $letter eq any(@vowels) } }

[04:17] <evalbot_r13059> []

[04:17] <TreyHarris> there we go. :-)  still doesn't work, but progress ;-)

[04:18] <TreyHarris> and wouldn't work anyway, unless the alignment happened to be right.  but that was a contrived example i just pulled out of thin air anyway :-)

[04:24] <TreyHarris> ?eval my @vowels = <a e i o u>; my @letters = 'a'..'z'; my @next_letters = @letters[1..@letters - 1,0]; my @after_vowel = gather { for each(@letters;@next_letters) -> $letter, $next { take $next if $letter eq any(@vowels) } };

[04:24] <evalbot_r13059> ["b", "f", "j", "p", "v"]

[04:24] <TreyHarris> there we go.  lol.

[04:24] <TreyHarris> i think an iterative approach would be much clearer there ;-)

[04:40] *** hermax_ joined
[04:46] *** justatheory joined
[04:47] *** justatheory joined
[04:48] *** justatheory joined
[04:49] *** justatheory joined
[04:50] *** justatheory joined
[04:51] *** justatheory joined
[04:52] *** justatheory joined
[04:55] *** justatheory joined
[04:56] *** justatheory joined
[04:56] *** drrho joined
[04:57] *** justatheory joined
[04:58] *** justatheory joined
[04:59] *** justatheory joined
[05:01] *** justatheory joined
[05:02] *** justatheory joined
[05:03] *** justatheory joined
[05:04] *** justatheory joined
[05:04] *** mjk joined
[05:05] *** justatheory joined
[05:08] *** justatheory joined
[05:09] *** justatheory joined
[05:10] *** justatheory joined
[05:12] *** justatheory joined
[05:14] *** justatheory joined
[05:15] *** justatheory joined
[05:16] *** bjoern_ joined
[05:16] *** justatheory joined
[05:17] <bjoern_> ?eval 0xf6 + 0xffffffffffffffff

[05:17] <evalbot_r13059> 18446744073709551861

[05:17] *** justatheory joined
[05:17] *** bjoern_ left
[05:18] *** justatheory joined
[05:19] *** justatheory joined
[05:20] *** justatheory joined
[05:20] <nothingmuch> obra: pong

[05:21] *** justatheory joined
[05:22] *** justatheory joined
[05:22] *** statico joined
[05:23] *** justatheory joined
[05:24] *** justatheory joined
[05:26] *** justatheory joined
[05:27] *** justatheory joined
[05:28] *** justatheory joined
[05:29] *** justatheory joined
[05:30] *** justatheory joined
[05:31] *** justatheory joined
[05:33] *** justatheory joined
[05:34] <TreyHarris> 17:46 < audreyt> TreyHarris: cool! I've been lately biased toward working at failing tests _with smartlinks_

[05:34] *** justatheory joined
[05:34] <TreyHarris> audreyt: does that mean that I should un-todo those tests? :-)

[05:35] *** justatheory joined
[05:35] *** kanru joined
[05:36] *** justatheory joined
[05:37] *** justatheory joined
[05:38] *** justatheory joined
[05:39] *** justatheory joined
[05:40] *** justatheory joined
[05:42] *** justatheory joined
[05:42] <Teratogen> are we having fun yet?

[05:42] *** justatheory joined
[05:43] *** justatheory joined
[05:43] <TreyHarris> ?eval .fun

[05:43] <evalbot_r13059> Error: No compatible subroutine found: "&fun"

[05:43] <TreyHarris> guess not

[05:44] *** justatheory joined
[05:45] *** justatheory joined
[05:48] *** justatheory joined
[05:48] <obra> nothingmuch: I wanted to thank you for mailtomutt ;)

[05:48] *** justatheory joined
[05:50] *** justatheory joined
[05:51] <nothingmuch> obra: wow

[05:51] <nothingmuch> that's old

[05:51] *** justatheory joined
[05:52] *** justatheory joined
[05:52] <gaal> audreyt: hey. two leftovers in Sig...

[05:53] <nothingmuch> morning gaal

[05:53] <gaal> first, we need to get the existential coercion to work again (ie, make p_unpacking :: Maybe PureSig again)

[05:53] <gaal> hey nothingmuch!

[05:53] <obra> nothingmuch: I was a bit surprised to see your name on it

[05:53] *** justatheory joined
[05:54] <gaal> second, is there a less error prone way of threading traits/traits'/traits''' etc. in that function?

[05:54] *** justatheory joined
[05:55] <nothingmuch> obra: good surprised or bad surprised? ;-)

[05:55] *** justatheory joined
[05:55] <gaal> oh, actually there's a third thing, support for elided varnames (ie unpacked-only params). but there are two p6-l posts that need to be answered for that

[05:56] * nothingmuch ignores justatheory to see if it'll help

[05:56] <obra>  nothingmuch: just amused.

[05:56] <obra> it seems to mostly do what I want

[05:56] <obra> I'm tired to being unable to fully keyboard mail.app

[05:56] <nothingmuch> it should be fixed up a bit

[05:57] <nothingmuch> *nod*

[05:57] *** justatheory joined
[05:58] *** justatheory joined
[05:59] <nothingmuch> the icon contains an easter egg you might appreciate, too ;-)

[05:59] *** justatheory joined
[06:00] <TreyHarris> nothingmuch: oh, is he still popping in and out?  i ignored him an hour ago :-)

[06:00] *** justatheory joined
[06:00] <nothingmuch> ah, so appearantly it does help ;-)

[06:01] *** justatheory joined
[06:02] *** justatheory joined
[06:03] * nothingmuch goes to the post office to mail out A Pattern Language

[06:03] *** justatheory joined
[06:06] *** justatheory joined
[06:07] *** justatheory joined
[06:08] *** justatheory joined
[06:09] *** justatheory joined
[06:10] *** justatheory joined
[06:11] *** justatheory joined
[06:11] <lumi> /ignore justatheory JOINS QUITS

[06:12] <lumi> Under irssi

[06:12] *** pinPoint joined
[06:13] *** justatheory joined
[06:14] *** justatheory joined
[06:15] *** justatheory joined
[06:16] *** justatheory joined
[06:17] *** justatheory joined
[06:18] *** justatheory joined
[06:19] *** justatheory joined
[06:20] *** justatheory joined
[06:21] *** justatheory joined
[06:22] *** justatheory joined
[06:23] *** drrho joined
[06:23] *** justatheory joined
[06:23] <TreyHarris> what would cause a test to not print its trailing status, despite getting through the last test?

[06:24] * TreyHarris wishes for pugs debugger sometimes

[06:24] <audreyt> TreyHarris: tried pugs -d ?

[06:24] <audreyt> not quite a debugger, but in practice for me comes close

[06:24] <TreyHarris> oh, you're kidding me.

[06:24] <TreyHarris> oh.  ok :-)

[06:24] *** justatheory joined
[06:24] <TreyHarris> i'll try it

[06:24] <audreyt> pugs -d your_code_here.pl

[06:24] <audreyt> it's a 10-min hack

[06:25] <audreyt> don't expect too much :) but it's useful

[06:25] <TreyHarris> cool.

[06:25] <TreyHarris> i was semi-seriously asking before, though: should i un-todo those trait_auxiliary tests?

[06:25] *** justatheory joined
[06:26] <audreyt> you can use the force_todo device

[06:26] <audreyt> as a crude hack.

[06:26] <audreyt> not aware of better ways

[06:26] <TreyHarris> no, i meant...

[06:26] <TreyHarris> 17:46 < audreyt> TreyHarris: cool! I've been lately biased toward working at failing tests _with smartlinks_

[06:27] <TreyHarris> there are tests for it, but they're not failing

[06:27] <audreyt> ah right. leave them failing

[06:27] <audreyt> I'll todo or implement them as part of triage

[06:27] <audreyt> thoug trait_aux is almsost definitely todo material for this week

[06:27] <TreyHarris> no, they're not failing because they're todo

[06:27] <audreyt> so the end result is likely same

[06:27] <TreyHarris> *grin* ok :-)

[06:27] <audreyt> :)

[06:27] <audreyt> I finally repaird my ~/.svk space

[06:28] <audreyt> syncing some 400 changes

[06:28] <audreyt> sync the macbook went down

[06:28] <audreyt> s/sync/since/

[06:28] <TreyHarris> more of the fallout from your failing macbook?

[06:28] <audreyt> yeah, finally seeing end of tunnel

[06:28] <TreyHarris> i would just go insane

[06:28] <audreyt> I considered that to

[06:28] <audreyt> *too

[06:29] <audreyt> decided to not do that

[06:29] <TreyHarris> :)

[06:31] *** justatheory joined
[06:31] <audreyt> bbiab..

[06:34] *** justatheory joined
[06:34] <TreyHarris> audreyt: i'd be willing to start implementing missing S29 builtins and S{none(29)} syntactic sugar in Perl 6 if you think it would be worthwhile

[06:36] *** justatheory joined
[06:37] *** joshmoore joined
[06:37] <TreyHarris> joshmoore: josh moore formerly of ibiblio?

[06:38] *** justatheory joined
[06:39] *** justatheory joined
[06:39] <joshmoore> nope, sorry.

[06:40] <TreyHarris> joshmoore: np, just didn't want to snub you if you were an old coworker :-)

[06:40] <svnbot6> r13060 | trey++ | [t/packages/require_and_use.t]

[06:40] <svnbot6> r13060 | trey++ | Un-todo'd passing test.

[06:40] <svnbot6> r13060 | trey++ | Changed test messages in loops to include

[06:40] <svnbot6> r13060 | trey++ | the string being attempted, as the counter

[06:40] <svnbot6> r13060 | trey++ | was counterintuitive.

[06:41] <audreyt> TreyHarris: it certainly would! more helpful even would be to separate them into src/perl6/Num.pm, etc

[06:42] <audreyt> bbiab for real :)

[06:44] *** justatheory joined
[06:47] *** justatheory joined
[06:48] *** justatheory joined
[06:49] *** justatheory joined
[06:50] *** justatheory joined
[06:52] *** deepthink joined
[06:54] *** justatheory joined
[06:55] *** justatheory joined
[06:55] *** deepthink left
[06:55] *** justatheory joined
[06:57] *** justatheory joined
[06:58] *** f0rth joined
[06:59] *** justatheory joined
[07:01] *** f0rth joined
[07:02] *** iblechbot joined
[07:04] *** justatheory joined
[07:05] *** justatheory joined
[07:10] *** justatheory joined
[07:12] <pinPoint> .

[07:13] *** justatheory joined
[07:14] *** justatheory joined
[07:15] *** justatheory joined
[07:16] *** justatheory joined
[07:19] *** justatheory joined
[07:20] *** stennie joined
[07:22] <svnbot6> r13061 | trey++ | [t/oo/traits/basic.t]

[07:22] <svnbot6> r13061 | trey++ | Added a missing test.

[07:25] *** justatheory joined
[07:28] *** justatheory joined
[07:29] *** onsen joined
[07:32] *** justatheory joined
[07:32] *** mjk joined
[07:33] *** justatheory joined
[07:34] *** justatheory joined
[07:35] *** justatheory joined
[07:36] *** justatheory joined
[07:38] *** justatheory joined
[07:39] *** justatheory joined
[07:40] *** justatheory joined
[07:41] *** justatheory joined
[07:42] *** justatheory joined
[07:46] *** justatheory joined
[07:47] *** justatheory joined
[07:49] *** lilo joined
[07:49] <lilo> hmmm, I'm going to be bad now

[07:50] *** lilo sets mode: +b justatheory!n=justathe@dsl093-038-250.pdx1.dsl.speakeasy.net!##unavailable

[07:50] * nothingmuch reenables clothes optional mode

[07:50] <lilo> make sure a channel staffer turns that off in a few hours, when the guy is back

[07:51] <nothingmuch> audreyt: morning

[07:51] * lilo waves and &

[07:51] <pinPoint> .

[07:52] <nothingmuch> pinPoint: ?

[08:00] *** tifo joined
[08:08] <nothingmuch> cute =) http://www.designboom.com/contemporary/peg.html

[08:09] <lambdabot> Title: &lsquo;clothes peg iconography&rsquo;, http://tinyurl.com/fwkqu

[08:18] *** drrho joined
[08:19] *** kane-xs joined
[08:25] *** onsen joined
[08:53] *** bsb left
[08:55] *** ruoso joined
[09:06] *** renormalist joined
[09:08] *** f0rth joined
[09:14] <svnbot6> r13062 | renormalist++ | cperl-mode.el: handle regexp modifiers :Perl5 :perl5 :P5 more explicity

[09:24] *** buetow joined
[09:37] *** dok joined
[09:44] *** tibbe joined
[09:44] *** tibbe left
[09:50] <svnbot6> r13063 | audreyt++ | * Fix "make ghci" in conjunction with Perl5 embedding;

[09:50] <svnbot6> r13063 | audreyt++ |   embed flags now never affects "make ghci" prompts, and

[09:50] <svnbot6> r13063 | audreyt++ |   the _stub.o files, if any, are deleted prior to entering ghci.

[09:54] *** elmex joined
[09:55] *** ludan joined
[09:58] *** xinming joined
[10:04] <TreyHarris> audreyt: i ran ext/libwww-perl/t/live.t five times in a row, and three of those times I got sigbus, "illegal hardware instruction", once i got...oh, it scrolled off but it told me to report a compiler error to GHC, and once all tests passed :-)

[10:04] *** nekokak_ joined
[10:29] <nothingmuch> hmm

[10:30] *** onsen joined
[10:32] <TreyHarris> time for me to sleep

[10:32] <nothingmuch> oh

[10:32] <nothingmuch> i thought you woke up early

[10:32] <TreyHarris> no, hacksies keep the sleepydust away ;-)

[10:33] * TreyHarris & zzzzz

[10:33] * nothingmuch woke up at 8:15 today... </impressive>

[10:33] <nothingmuch> ciao

[10:44] *** tifo joined
[10:49] *** loumz joined
[10:58] *** ruoso joined
[11:29] *** agentzh joined
[11:31] <agentzh> TreyHarris: i suggest you stick with eval_dies_ok as much as possible since it provides detailed parsefail diagnostic info via stderr.

[11:34] *** xerox joined
[11:35] *** xerox joined
[11:37] *** loumz left
[11:54] *** agentzh joined
[11:55] <agentzh> TreyHarris: btw, for smartlinks, putting section name in quotes is okay. :)

[11:55] *** chris2 joined
[11:57] <agentzh> marstos: there's something wrong with the format of your last pugs blog post. i strongly recommend you to use pod to generate well-formed HTML. ;-)

[11:57] <agentzh> *markstos

[11:58] *** ruoso joined
[11:59] *** stennie left
[12:04] *** plisk joined
[12:05] *** iblechbot joined
[12:11] <prism> is it normal for compile to take over 800 hours?

[12:11] <prism> 77337 root          1 128    0 26684K 25112K CPU0   0 792:26 99.22% ghc-6.4.2

[12:11] <prism> well nearly 800 hours

[12:11] <nothingmuch> 800 hours is about 1 month

[12:12] <prism> maybe thats minutes

[12:12] <nothingmuch> *nod*

[12:12] <prism> is it normal to take that long

[12:12] <nothingmuch> in that case - maybe

[12:12] <prism> its a fastish system

[12:12] <prism> dual amd athlon mp

[12:12] <nothingmuch> hmm

[12:12] <nothingmuch> ghc 6.6 might improve the situation

[12:12] <nothingmuch> how much ram does it have?

[12:12] <prism> 4gb

[12:12] <nothingmuch> should be plenty

[12:12] <prism> each chip is around 2Ghz

[12:12] <nothingmuch> i'm afraid i can't help much more

[12:13] <prism> and its using 100% of bot chips

[12:13] <prism> both*

[12:13] <nothingmuch> it doesn't sound normal

[12:13] <chris2> 13h seems a bit too much

[12:13] <prism> hmm i think ill grab it from a package instead of using ports

[12:13] <chris2> even my slow ibook only needs ~8h, with a lot less ram

[12:13] <gaal> prism: what file is the compilation on?

[12:13] <prism> ../../../glafp-utils/mkdependC/mkdependC -f .depend    -I. -Iinclude -I../../includes  -- -O -I. -Iinclude    -- cbits/directory.c cbits/rawSystem.c

[12:13] <prism> /usr/ports/lang/ghc/work/ghc-6.4.2-boot/bin/i386-unknown-freebsd/ghc-6.4.2 -M -optdep-f -optdep.depend  -osuf o -optdep--exclude-module=System.Directory.Internals   -H16m -O -I. -Iinclude -Rghc-timing -ignore-package Cabal -I../../../libraries -fglasgow-exts -no-recomp Compat/Directory.hs Compat/RawSystem.hs Distribution/Compat/FilePath.hs Distribution/Compat/ReadP.hs Distribution/Compiler.hs Distribution/GetOpt.hs Distribution/Install

[12:13] <prism> edPackageInfo.hs Distribution/License.hs Distribution/Package.hs Distribution/ParseUtils.hs Distribution/Version.hs Language/Haskell/Extension.hs

[12:13] <prism> err

[12:14] <prism> sorry for the mini flood

[12:14] <prism> didnt realize it was that big

[12:14] *** markstos joined
[12:14] <gaal> er, what are you compiling? pugs or ghc?

[12:14] <prism> pugs

[12:14] <nothingmuch> looks like it's bootstrapping ghc to do that

[12:14] <prism> ghc must be a dep

[12:14] <gaal> ouch

[12:15] <nothingmuch> get a binary ghc

[12:15] <prism> permission for another mini flood?

[12:15] <gaal> perlbot nopaste

[12:15] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[12:15] <pasteling> "prism" at 88.109.10.46 pasted "pugs" (7 lines, 584B) at http://sial.org/pbot/19486

[12:16] <gaal> pugs depends on freetype?

[12:16] <prism> according to ports it does

[12:16] <gaal> that's.... interesting

[12:17] <prism> its ok i grabbed it via pkg

[12:17] <prism> its nearly installed now

[12:17] <prism> but that compile was worrying

[12:17] <prism> what is ghc anyway and why is it such a monster to compile

[12:17] <gaal> prism: I don't know much about gentoo, but isn't is possible to get a binary ghc?

[12:17] <nothingmuch> ghc is the glasgow haskell compiler

[12:17] <gaal> ghc is the haskell compiler we use.

[12:17] <nothingmuch> that's freebsd, not gentoo

[12:17] <prism> gaal, i dont know much about gentoo either

[12:17] <gaal> (and depend on)

[12:18] <gaal> oops, sorry, don't know much about freebsd either :)

[12:18] <prism> :)

[12:18] <prism> nothingmuch, hmm seems a big compile still.. its like compiling some of the big math programs for linear calculations

[12:18] <prism> i set them things going before i go on holiday

[12:18] <prism> lol

[12:18] <nothingmuch> prism: same ballpark, methinks

[12:19] <nothingmuch> haskell is a tricky language to compile

[12:19] <nothingmuch> and ghc is a tricky project

[12:19] <nothingmuch> since ghc is written in haskell...

[12:19] <gaal> prism: yes you generally don't want to build your own ghc unless you really need to.

[12:19] <prism> fuck ghc depends on compat 4x

[12:19] <prism> yuck*

[12:19] <prism> sorry bad typoe their*

[12:19] <nothingmuch> heh

[12:20] <nothingmuch> prism++ # cutet

[12:20] <prism> :)

[12:20] <nothingmuch> ack, your typos are infecting me

[12:20] <gaal> what's compat 4x?

[12:20] <prism> gaal, their are 4 primary releases so to speak of freebsd

[12:20] <prism> 4

[12:20] <prism> 5

[12:20] <prism> and the latest 6

[12:20] <prism> current is 7

[12:20] <prism> 4 has been dropped its well in-efficiant

[12:20] <gaal> ouch again.

[12:20] <prism> dragonfly is based on 4 it uses a diffrent threading model

[12:21] <prism> 5 was an improvement, to threading at least.

[12:21] <prism> 6 was the improvement again of 5

[12:21] <prism> and 7 is a big improvement over 6

[12:21] <prism> but the changes where so large they could not be put into the same 'id' i.e. 6.1-release 6.2-release etc.

[12:21] <prism> so they had to up the entire 'id'

[12:21] <prism> well version is probably a more correct word

[12:22] *** Limbic_Region joined
[12:22] <nothingmuch> prism: you might want to ask the freebsd folks on #haskell

[12:22] <nothingmuch> they'll prollly know more

[12:22] <prism> its ok i have the package now, I have never even seen a perl6 script im just goona install and fiddle around with it with google open, im mainly intrested in more sane if's

[12:23] <nothingmuch> well, you can ask Juerd for an account on feather, the perl 6 devel box

[12:23] <nothingmuch> so that you can toy around with a compiled pugs

[12:23] <prism> if ($blah eq ($bleh || $test)) { .. } instead of: 'if (($blah eq $bleh) || ($blah eq $test)) { ... }

[12:23] <nothingmuch> those are junctions

[12:24] <nothingmuch> if ( $blah eq ( $bleh | $test ) ) { } # one pipe

[12:24] <gaal> on e|

[12:24] <prism> junctions you say hmm sorry incorrect terminology i just know it would help me alot when i have 20 or 30 nested

[12:24] <prism> i have lines in standard perl that are so long it takes 5 minutes to get to the right coloum

[12:25] <nothingmuch> if you have that many you should probably rely on polymorphism instead

[12:25] <nothingmuch> some form of dispatch table

[12:25] <nothingmuch> like OO, or a hash of subs

[12:25] <prism> hmmm also i would like to get to know perl6 for when it eventually takes over perl5

[12:25] <prism> 8)

[12:25] <prism> dont wanna be out in the cold

[12:26] <nothingmuch> =)

[12:26] <prism> does perl6 have poe and others?

[12:26] <nothingmuch> not yet... it has some modules

[12:26] <nothingmuch> but yoou can use perl5 modules in pugs

[12:26] <prism> io::select etc?

[12:27] <nothingmuch> hmm

[12:27] <nothingmuch> i'm not sure if we have that yet

[12:27] <prism> do we have cpan

[12:27] <nothingmuch> a cpan like thing?

[12:27] <prism> yes

[12:27] <nothingmuch> not yet.. everyone commits to the pugs repo

[12:28] <nothingmuch> btw, do you have a commit bit?

[12:28] <prism> ah i can find perl6 modules in ports

[12:28] <prism> no not yet

[12:28] <nothingmuch> i doubt it

[12:28] <prism> Port:   p5-Perl6-Subs-0.05

[12:28] <prism> Path:   /usr/ports/lang/p5-Perl6-Subs

[12:28] <prism> Port:   p5-Perl6-Form-0.04

[12:28] <prism> Path:   /usr/ports/devel/p5-Perl6-Form

[12:28] <nothingmuch> they're not really used in production yet

[12:28] <prism> Port:   p5-Perl6-Export-0.07

[12:28] <prism> Path:   /usr/ports/devel/p5-Perl6-Export

[12:28] <prism> :)

[12:28] <nothingmuch> that's a perl 5 module for perl 6 like things

[12:28] <prism> oh

[12:28] <prism> ah of course p5-

[12:28] <nothingmuch> s/that's a/those are/

[12:28] <nothingmuch> /msg me or gaal or someone an email address

[12:29] <nothingmuch> you can say it out here, but this channel is logged on the web

[12:29] <prism> paul@alchemy-networks.co.uk

[12:29] <nothingmuch> and might be spam harvested

[12:29] <prism> thats ok that email address is special

[12:29] <prism> ill need to know what email address you send from though

[12:29] <nothingmuch> okies, you're going to get an invite in a sec

[12:29] <nothingmuch> hmm...

[12:29] <nothingmuch> prolly [email@hidden.address]
[12:29] <nothingmuch> but i'm not sure

[12:29] <prism> ill just allow in openfoundry.org

[12:30] <prism> I block all emails that are not on a list for that address

[12:30] <prism> its for digests and the like

[12:30] <nothingmuch> *nod*

[12:30] <prism> wow its hot in england at the moment

[12:31] <nothingmuch> UGHHHHHHH safari!!

[12:31] <nothingmuch> run!

[12:32] <nothingmuch> okay, invite sent

[12:32] <prism> ok hehe :)

[12:33] <prism> does perl6 depend on perl5 strictly for backwards compatability or can i mix and max modeules to

[12:33] <nothingmuch> ?

[12:34] <prism> include perl5 modules within a perl6 script that includes perl6 modules

[12:34] <prism> do they integrate

[12:34] <nothingmuch> ah

[12:34] <nothingmuch> yes, they integrate

[12:34] <prism> neat

[12:34] <nothingmuch> there are some examples

[12:35] <prism> i have a poe spam detection program im planning to run on freenode be nice if i could half progarm it in perl6 (sort of a personal development project)

[12:35] <prism> im also trying to port it to erlang but that is well never dealing with erlang, slighly daunting.

[12:36] * nothingmuch 'd like to learn erlang some day

[12:36] <prism> poe suffers slightly when your dealing with massive data structures, im just wondering if i should program my own sort of mini database instead of just using a 3 dimensional hash

[12:36] <nothingmuch> BerkeleyDB?

[12:36] <nothingmuch> if you want performance you won't find it with pugs

[12:36] <nothingmuch> so far it's completely unoptimized

[12:37] <nothingmuch> and roughly an order of magnitude slower than perl 5

[12:37] <prism> --funrol-loops 8)

[12:37] <prism> j/k lol

[12:37] <prism> how does perl6 compare to perl5

[12:37] <prism> equal or slower?

[12:37] <prism> i imagined it being based in haskell it would be alot quicker

[12:37] <nothingmuch> perl 6 in theory? or right now?

[12:37] <prism> right now, and the future

[12:37] <nothingmuch> well, it's an unoptimized interpreter written in haskell

[12:38] <nothingmuch> vs an optimized interpreter written in C

[12:38] <nothingmuch> perl 5 is faster right now

[12:38] <prism> thats suprising

[12:38] <nothingmuch> otoh, perl 6 is not just an interpreted language

[12:38] *** kalven joined
[12:38] <nothingmuch> it can be compiled, and it has static types

[12:38] <prism> thats good

[12:38] <nothingmuch> and the ability to declare classes etc as closed

[12:38] <prism> has it got the portability perl5 has yet

[12:38] <nothingmuch> not yet

[12:38] <prism> say if i was a masochist i might want to run something on win32, that wasnt a format command

[12:39] <nothingmuch> gaal: do you run pugs on windows?

[12:39] <Limbic_Region> I do

[12:39] <Limbic_Region> particle does

[12:40] <Limbic_Region> I could dig up a few others if you forced me too

[12:40] <prism> where can I checkout availible pugs packages

[12:40] <Limbic_Region> by packages you mean modules?

[12:40] <Limbic_Region> they are in the ext/ dir in the repo

[12:41] <prism> is the location of the repository contained in this email

[12:41] <Limbic_Region> http://svn.openfoundry.org/pugs/ext/

[12:41] <lambdabot> Title: Revision 13063: /ext

[12:41] <prism> thank you

[12:41] <Limbic_Region> you can find just about everything Pugs related from the pugs homepage

[12:41] <Limbic_Region> http://pugscode.org

[12:41] <lambdabot> Title: Pugs - pugscode

[12:42] * nothingmuch goes back to hacking

[12:42] <Limbic_Region> if you find something pugs related that is not mentioned on the pugs homepage, please bring it to our attention so it can be rectified

[12:42] <nothingmuch> prism: good luck with pugs =)

[12:42] <nothingmuch> hehhe, you said "rectified" </bevis & butthead>

[12:42] <prism> if pugs does not have poe nro io::select can it handle multiple tasks in some kind of framework, such as multiple tcp connections or object manipulation

[12:42] <prism> s/nro/nor

[12:43] <Limbic_Region> prism - just because the frameworks haven't been written doesn't mean it can't be done

[12:43] <prism> nothingmuch, also a note on erlang, the entire first part of the book is free online, it teachs you most of the basics, hang around in #erlang and the rest slots in pace :)

[12:43] <prism> place*

[12:43] <Limbic_Region> you have to understand that the Perl 6 language specification is perpetually being updated

[12:43] <prism> I can get you a link if you wish

[12:44] <prism> Limbic_Region, oh I know it can be done, I was just wondering if any frameworks have been written

[12:44] <Limbic_Region> and the primary focus of pugs hackers are on getting the pugs internals to either implement spec'd features

[12:44] <prism> Limbic_Region, anything is possible in any language :D

[12:44] <Limbic_Region> or to keep up with the changing specs

[12:44] <nothingmuch> prism: my big problem is timei ;-)

[12:44] <Limbic_Region> or to boldly go where no one has gone before and suggest new specs

[12:45] <Limbic_Region> so with the focus primarily on internals - examples and modules take a back seat

[12:45] <Limbic_Region> there is a great deal of value however in volunteers writing examples and modules

[12:45] <Limbic_Region> so please, step up

[12:45] <prism> Limbic_Region, how about p6-star-trek, pkg-descy a module for perl6 that gives warp speed calculations

[12:45] <Limbic_Region> we end up finding bugs in pugs

[12:45] <prism> 8-)

[12:45] <Limbic_Region> unimplemented features

[12:45] <Limbic_Region> poor specs in corner cases, etc

[12:45] <nothingmuch> or finding features and unimplemented bugs ;-)

[12:46] <prism> nothingmuch, hehe not enough hours in the day

[12:46] <prism> nothingmuch, I still have not received that email yet,

[12:47] <Limbic_Region> prism - personally, I would rather the folks that can hack on Pugs internals (Haskell) continue to focus on the internals and leave the primarily perl 5 hackers to write examples and modules (perl 6)

[12:47] <prism> Limbic_Region, who are the pugs hackers

[12:47] <Limbic_Region> we all are

[12:47] <Limbic_Region> I guess you meant internal hackers

[12:47] <prism> yes :)_

[12:48] <Limbic_Region> there really aren't that many but I don't know of a list specific to internals

[12:48] <prism> ok

[12:48] <Limbic_Region> the AUTHORS file lists everyone who has contributed in some way to Pugs

[12:48] <Limbic_Region> at least everyone who has allowed themselves to be identified

[12:48] <prism> is their a projected estimate on the time pugs6 will become release

[12:49] <Limbic_Region> prism - again, you have to understand that the Perl 6 language specification is a constantly changing target

[12:49] <Limbic_Region> it can't be release ready until the language is

[12:49] <Limbic_Region> though

[12:49] <Limbic_Region> audreyt does have a timeline/release plan

[12:49] <prism> excellent, is it availible online

[12:49] <Limbic_Region> that would allow for a "we pretty much have enough to let you chew on for a while"

[12:50] <Limbic_Region> is what available online

[12:50] <Limbic_Region> the Perl 6 language specification?

[12:50] <Limbic_Region> yes

[12:50] <prism> audreyt's plan

[12:50] <Limbic_Region> oh, yes - also on the pugs homepage

[12:50] <prism> thanks ill go check that out

[12:50] <Limbic_Region> I believe it is at http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html

[12:50] <lambdabot> Title: Pugs Apocryphon 1, http://tinyurl.com/hnjwx

[12:51] <prism> Ok

[12:51] <prism> I have some reading to do, as the pkg for ghc/pugs is now installed

[12:51] <prism> thank you for your help Limbic_Region, nothingmuch :)

[12:53] <Limbic_Region> no worries - welcome aboard

[12:53] <Limbic_Region> please remind us in a while if your email still hasn't arrived

[13:00] *** crem joined
[13:02] <gaal> nothingmuch: rarely

[13:08] *** crem_ joined
[13:13] <svnbot6> r13064 | agentz++ | [t/README]

[13:13] <svnbot6> r13064 | agentz++ | - added a sample for generic links without quotes.

[13:14] <agentzh> hehe, prism was compiling ghc. so there's no wonder why the compilation took him *so much* time on a *so good* machine.

[13:14] *** cjeris joined
[13:31] *** rodi joined
[13:41] *** prefiks joined
[13:41] <rodi> ?eval my $a = sprintf("%b",1)

[13:41] *** evalbot_r13059 is now known as evalbot_r13064

[13:41] <evalbot_r13064> pugs: Printf.printf: bad formatting char b

[13:41] <svnbot6> r13065 | agentz++ | [t/closure_traits/init.t]

[13:41] <svnbot6> r13065 | agentz++ | - added one more smartlink.

[13:41] <svnbot6> r13065 | agentz++ | - cleaned up the comments.

[13:42] <agentzh> yeah, i also noticed that a few days ago...while adding tests to sprintf.t

[13:43] <rodi> adding a few now :)

[13:43] <agentzh> not sure if it's a bug or not.

[13:43] <agentzh> since it's unspec'd

[13:43] <rodi> It's spec'd:

[13:43] <agentzh> so i held back.

[13:44] <agentzh> oh?

[13:44] <rodi> Functions.pod

[13:44] <rodi> errr...

[13:44] <rodi> Synopsis 29 doesn't count, does it?

[13:44] <agentzh> it says sprintf is like C's sprintf.

[13:44] <agentzh> it counts.

[13:44] <rodi> Under "the directives are:" it lists b.

[13:44] <agentzh> larry has blessed it as official more or less.

[13:45] <rodi> oh, cool.

[13:45] <agentzh> great

[13:46] <agentzh> rodi: or you can even implement that except for writing tests.

[13:46] <agentzh> :)

[13:46] <rodi> agentzh: you've been listening to audreyt too much :-D

[13:47] <rodi> I actually spent the last week or so trying to get my head around Haskell, which I think

[13:47] <rodi> I have accomplished except for Monads, which I still don't grok.

[13:47] <agentzh> rodi: i'm serious though. in Prelude.pm, using Perl 6. :)

[13:48] <agentzh> but i'm not quite sure if it's better to implement that on Haskell land for efficiency reasons.

[13:49] * agentzh is still in fear of haskell.

[13:50] <gaal> agentzh: Haskell is great fun! the way to overcome fear of it is to persist enough in learning it until you get to refactor something -- then you first realize how great it is

[13:50] <rodi> but you still won't know what a Monad is...

[13:51] <agentzh> gaal: i'm sure there's some day that i can grok pugs' haskell internals. thank you for your suggestions. :)

[13:52] <gaal> rodi: yes, they're not easy but you don't have to know everything before knowing something

[13:53] <Limbic_Region> audreyt - ping

[13:54] <gaal> (baby haskell is fine, just like baby perl)

[13:54] <Limbic_Region> perl5 embedding still doesn't work unless env variable is set PUGS_EMBED="perl5"

[13:55] <gaal> the problem is that some basic things require monads, so it's a seemingly magical obstacle to voodoo around (=<< do >> <- fmap) until you get your cargo cult rites just so

[13:59] <gaal> the difference between Perl golf and Haskell golf is that (typically) to shorten Haskell code you employ a deep observation about your problem. In Perl golf you employ the visage of something from the abyss...

[13:59] <svnbot6> r13066 | rodi++ | added an eval_ok for sprintf() with "%b".

[14:03] <rodi> Prelude.pm is actually not that daunting...

[14:06] <gaal> Oh I didn't mean to imply Perl's a horrible language. I rather like it. :)

[14:06] <gaal> I meant that the hardcore golfage usually relies on quirks of the implementation

[14:07] <rodi> LOL, that wasn't meant as a followup- merely as an independent discovery that temporally coincided :)

[14:07] <rodi> I am looking for the right place to muck with sprintf()

[14:07] <gaal> ah

[14:07] <gaal> if you do it in Prelude.pm, all runcores benefit from it.

[14:08] <gaal> so if one of them doesn't have a native sprintf to exploit, tada.

[14:09] <gaal> nothingmuch likes to make the point that eveything should have at least a reference implementation, at least in principle, in pure Perl 6, and that the runtime chooses whether to override that with its own more efficient implementations.

[14:09] *** onsen joined
[14:10] <gaal> but... I thought there already *was* some printfy code in the prelude?

[14:10] <rodi> there is.

[14:10] <rodi> looks like someone forgot %b :)

[14:10] <rodi> nope, I'm wrong.

[14:11] <rodi> it's there.

[14:17] *** efunneko joined
[14:18] *** christopher joined
[14:22] *** ofer0 joined
[14:23] <agentzh> Pugs::Internals::sprintf, hehe.

[14:23] <rodi> yeah, where /is/ that?

[14:23] <agentzh> HS land?

[14:25] *** christopher_ joined
[14:25] *** gugod_ joined
[14:25] <agentzh> grep has told me it's defined in src/Pugs/Prim.hs

[14:25] *** gugod_ is now known as gugod

[14:25] <rodi> yup, looking at it.

[14:25] <agentzh> src/Pugs/Prim.hs:op2 "Pugs::Internals::sprintf" = \x y -> do

[14:26] <rodi> heh,

[14:26] <rodi>     -- XXX printf should be wrapped in a catch so a mis-typed argument

[14:26] <rodi>     -- doesnt kill pugs with a runtime exception.

[14:27] <agentzh> ?eval { START { say "hello" } }

[14:27] *** evalbot_r13064 is now known as evalbot_r13066

[14:27] <evalbot_r13066> OUTPUT[hello ] \Bool::True

[14:27] *** onsen_ joined
[14:27] <agentzh> ?eval my $sub = { START { say "hello" } };

[14:27] <evalbot_r13066> \{Syn "block" {Syn "block" {Pad SState "$?START_RUN" := #<ref:0xb6e495dc>                                       "$?START_RESULT" := #<ref:0xb6e49608>                            Syn "if" {App &postfix:++ (: Var "$?START_RUN");                                      Var "$?START_RESULT";                                      Syn "=" {Var "$?START_RESULT";                                               App (Syn "sub" {{Syn "block" {App &say (:

[14:28] <agentzh> hey, could anyone tell me what's happening here?

[14:28] <agentzh> gaal: is there a quick fix?

[14:29] * agentzh doesn't want to wrap the START {} tests with eval_is or eval_ok.

[14:33] *** penk joined
[14:45] <rodi> ?eval sprintf("%b",1) # where does the following error message come from?

[14:45] <evalbot_r13066> pugs: Printf.printf: bad formatting char b

[14:46] *** gottreu joined
[14:47] <rodi> aaaah, I see- Haskell land.

[14:47] <svnbot6> r13067 | agentz++ | [t/syntax/POD.t]

[14:47] <svnbot6> r13067 | agentz++ | - changed q(...) to q{...}.

[14:48] <agentzh> START {} is behaving oddly in pugs.

[14:49] <agentzh> oh, sorry, it's for's fault in fact...

[14:49] <agentzh> ?eval for 1..2 { say }

[14:49] <evalbot_r13066> OUTPUT[  ] undef

[14:49] *** vel joined
[14:49] *** gottreu left
[14:50] <agentzh> ?eval for 1..2 -> $_ { say }

[14:50] <evalbot_r13066> OUTPUT[  ] undef

[14:50] <agentzh> pugs--

[14:50] <rodi> ?eval for 1..2 { $_.say }

[14:50] <gaal> agentzh: you're getting the AST of the block

[14:50] <evalbot_r13066> OUTPUT[1 2 ] undef

[14:50] <gaal> and re -> $_ say, I don't think builtins default to say any more...

[14:51] <gaal> you have to say ".say"

[14:52] <rodi> So, it appears that pugs relies on Haskell's Printf, which appears to lack %b (at least in my '/usr/lib/hugs/libraries/Text/Printf.hs').  Am I probably missing some better Haskell library, or is this consistent with others' experience?

[14:52] <agentzh> ?eval for 1..2 { .say }

[14:52] <evalbot_r13066> OUTPUT[1 2 ] undef

[14:52] <agentzh> ?eval for 1..2 { say $_ }

[14:52] *** evalbot_r13066 is now known as evalbot_r13067

[14:52] <evalbot_r13067> OUTPUT[1 2 ] undef

[14:52] <gaal> agentzh: remind me, what does START mean?

[14:53] <gaal> agentzh: anyway (I don't know if this is correct or not, but) you're evaluating to the code block value itself, so that's being printed. *that* is correct.

[14:53] <gaal> viz

[14:53] <agentzh> gaal: please see L<S04/Closure traits>

[14:53] <gaal> ?eval {say "hi"}

[14:53] <evalbot_r13067> OUTPUT[hi ] Bool::True

[14:54] <gaal> heh.

[14:54] <gaal> ?eval {say "hi"}.perl

[14:54] <evalbot_r13067> "\{Syn \"block\" \{App \&say (: \"hi\")}}"

[14:54] <agentzh> gaal: okay, i know what you mean, but i think the value of START {} should be returned.

[14:54] <agentzh> START {} is the old FIRST {}

[14:55] <agentzh> gaal: currently i'm suffering from weird parsefail of one test for START {}

[14:56] <agentzh> gaal: i think it has relations with the for statement.

[14:56] <gaal> huh, IRTR START is only parsed, not implemented at all?

[14:56] <agentzh> gaal: it's perfectly implemented by luqui++.

[14:56] <gaal> so that reduces to

[14:57] <gaal> ?eval { { say "moose" } }

[14:57] <evalbot_r13067> OUTPUT[moose ] Bool::True

[14:57] <gaal> er.

[14:57] <gaal> okay.

[14:57] <gaal> :)

[14:57] <agentzh> all tests for START {} are passing except that this one...err, i'd better paste it.

[14:57] *** rafl joined
[14:58] <pasteling> "agentzh" at 210.22.200.67 pasted "A weird parsefail in a test for START {}" (29 lines, 495B) at http://sial.org/pbot/19491

[14:59] <agentzh> that's a story about `for' or `$_', i'm afraid.

[15:00] <agentzh> gaal: sorry, the previous outputs of evalbot are totally correct.

[15:00] <agentzh> gaal: the real problem is in the paste.

[15:00] <gaal> ?eval my $x = { { say "moose" } };

[15:00] <evalbot_r13067> \{Syn "block" {Syn "sub" {{Syn "block" {App &say (: "moose")}}}}}

[15:01] <gaal> agentzh: yes, I agree

[15:01] <gaal> I don't know a fix off hand, sorry, and no tuits atm to look into it

[15:01] <agentzh> gaal: it doesn't matter. :)

[15:01] <agentzh> ?eval my $s; for 1..2 { START { $s ~= $_ } }

[15:01] <evalbot_r13067> Error:  unexpected "}" expecting comment Closure traits take no formal parameters

[15:02] <agentzh> that's it.

[15:02] *** mako132 joined
[15:02] <agentzh> audreyt: please look into this START {} bug when you're back from $work. ;-)

[15:03] <gaal> ok please commit this as a pugsbugs or whatever that's called this week :)

[15:06] <agentzh> gaal: i'd rather put it into t/statements/start.t and wrap the parsefail with eval_is. :)

[15:06] <agentzh> sorry, t/closure_traits/start.t

[15:08] <agentzh> end of day for me &

[15:08] <svnbot6> r13068 | agentz++ | [t/closure_traits/start.t]

[15:08] <svnbot6> r13068 | agentz++ | - moved all the old tests from first.t to this file due

[15:08] <svnbot6> r13068 | agentz++ |   to the recent FIRST {} renaming in the Synopses.

[15:08] <svnbot6> r13068 | agentz++ | - added many more tests and smartlinks.

[15:08] <svnbot6> r13068 | agentz++ | Status:

[15:08] <svnbot6> r13068 | agentz++ | - only the first group of tests are mysteriously

[15:08] <svnbot6> r13068 | agentz++ |   failing. it's obviously a bug related to $_ or the

[15:08] <svnbot6> r13068 | agentz++ |   ``for'' statement. fixes under src/ are welcome. :)

[15:08] *** agentzh left
[15:11] <svnbot6> r13069 | malon++ | run-smoke, smokeserv-client: send both .html and .yml, allow multiple servers

[15:19] *** weinig|zZz is now known as weinig|bbl

[15:20] <Limbic_Region> particle ping

[15:22] *** glasser left
[15:29] <gaal> agentzh++ sure thing

[15:35] *** marmic joined
[15:40] *** weinig|bbl is now known as weinig

[15:45] *** lichtkind joined
[16:03] *** elmex joined
[16:09] *** Psyche^ joined
[16:19] *** [particle] joined
[16:25] *** Psyche^ is now known as Patterner

[16:37] <mugwump> audreyt: I'm told you've been doing recent work on 6pan.  care to talk about it?

[16:45] <rodi> so, not saying I'd do this, but...

[16:45] * Limbic_Region waits to hear what rodi is volunteering to do

[16:46] <rodi> should `sprintf(%b, $n)` be implemented in Perl, could I just put it into Prelude.pm?

[16:46] <rodi> It looks like pugs has enough bit operators (though bit.t is in bad shape- more on that later) to do it

[16:47] <rodi> Limbic_Region: ;)

[16:47] *** kanru joined
[16:48] *** araujo joined
[16:49] <araujo> hi!

[16:49] <araujo> :-)

[16:51] <rodi> araujo: hi!

[16:56] *** mauke_ joined
[17:02] <PerlJam> mugwump: ping

[17:03] <mugwump> hello

[17:04] *** frederico joined
[17:04] * mugwump aims for closer adherance to IRCMP RFC by saying PerlJam 

[17:05] <PerlJam> mugwump: I was just reading the CPAN6 and Pause6 paper and something occurred to me: Why doesn't CPAN store rpms or debs?

[17:05] <PerlJam> wouldn't that be in the spirit of "comprehensive"?

[17:05] *** bernhard joined
[17:06] <mugwump> indeed, and we have dedicated much thought to this, too

[17:07] <PerlJam> mugwump:

[17:07] <PerlJam> mugwump: Well, I must say that I like what I'm reading

[17:07] <araujo> hello rodi

[17:08] <mugwump> excellent, well, please sign  up to the list!  :)

[17:08] <PerlJam> mugwump: I particulary like the idea of "distributed PAUSE" that you've got with scribes.  (I was going to suggest it until I got to the part that described scribes :)

[17:10] <rgs> mugwump: did you migrate accounts to older lists to pause6 and cpan6 ML ?

[17:10] <mugwump> rgs: like 6pan etc?

[17:10] <rgs> yes

[17:11] *** mauke_ is now known as mauke

[17:11] <mugwump> got a link handy, or can you help by e-mailing it to me?

[17:12] <rgs> mugwump: well, the fact is that I've been just subscribed to pause6 :)

[17:12] <rgs> so that's why I'm asking

[17:12] <rgs> I was going to subcribe anyway

[17:12] <mugwump> I invited a total of about 19 people

[17:12] <svnbot6> r13070 | malon++ | smokeserv - smartlinks-server.pl, refresh-smoked-synopses.pl added

[17:12] <svnbot6> r13070 | malon++ |  * First try at producing synopsis versions with inlined smoke,

[17:12] <svnbot6> r13070 | malon++ |    each time a smoke report is submitted

[17:12] <svnbot6> r13070 | malon++ |  * The synopses will be offered as a new link, to the right of the

[17:12] <svnbot6> r13070 | malon++ |    current Test::TAP::HTML link, on the smoke server index page.

[17:12] <svnbot6> r13070 | malon++ |    This might not be the nicest arrangement, but it's an easy first step.

[17:12] <svnbot6> r13070 | malon++ |  * Clients are already sending the necessary .yml smoke (since r13069)

[17:12] <svnbot6> r13070 | malon++ |  * smartlinks-server.pl is branched from, and intended to replace,

[17:12] <svnbot6> r13070 | malon++ |    smokeserv-server.pl.

[17:12] <svnbot6> r13070 | malon++ |  * Either smartlinks-server needs to be renamed, or the clients

[17:12] <svnbot6> r13070 | malon++ |    need to send the smokes to smartlinks-server.pl instead

[17:12] <svnbot6> r13070 | malon++ |  * Might not work yet; contributions and reformatting are encouraged

[17:15] <mugwump> argh, did you get subscribed completely?  I swore I selected "Invite", not "Subscribe"

[17:18] *** buetow joined
[17:21] *** onsen joined
[17:23] <rgs> mugwump: I was subscribed to one, invited to another (to which I confirmed)

[17:23] <obra> mugwump: why not do this via perl.org lists?

[17:23] <TreyHarris> where is the paper PerlJam speaks of?

[17:23] * obra wonders what to do with his 6pan domains

[17:24] <rgs> sell them on ebay !

[17:24] <rgs> or at a yapc auction

[17:25] <mugwump> obra: I'd be happy to move them to a perl.org mailserver, it was in my ability to set this up myself

[17:25] <obra> ok. how many lists do you need?

[17:26] <mugwump> there are three main components; cpan6 (network), pause6 (administration), and the tools/clients.  I didn't think separate cpan6/pause6 would be worthwhile initially

[17:26] <mugwump> so, I made two lists

[17:27] <mugwump> TreyHarris: see cpan6.org

[17:27] <PerlJam> TreyHarris: cpan6.org

[17:27] <obra> mugwump: I suspect that right now, one list makes more sense.

[17:27] <obra> since I bet just about everybody will actually care about all three right now ;)

[17:28] <obra> Though the one thing I'd beg is "evolution, not reinvention" ;)

[17:28] <TreyHarris> huh, was there an annoucement somewhere that i just managed to miss?

[17:28] <[particle]> it was most likely at yapc::eu

[17:28] <mugwump> correct

[17:29] <mugwump> I certainly see cpan6 as an evolutionary step forward, rather than competing or undermining cpan

[17:29] <obra> I meant to actually evolve cpan ;)

[17:30] <obra> given the way the community is going (6on5, etc), I'm not much in favor of creating a brand new cpan for perl6.

[17:30] * rgs concurs

[17:30] <mugwump> we will distribute modules of all languages on cpan6

[17:30] <obra> oh. this is freepan

[17:31] <PerlJam> freepan minus the subversion repositories

[17:31] <obra> ...that was freepan 1.0 ;)

[17:31] <mugwump> yes, there are a couple of slides in the presentation that point out that cpan6 != Yet Another VCS

[17:32] <PerlJam> Maybe call it CSAN if it's not to be perl-specific.  Comprehensive Software Archive Network

[17:32] <nothingmuch> mooooosen

[17:32] <obra> so, really, a perl6-cpan list (following the other perl6 lists) wouldn't be appropriate for your vision, Sam?

[17:32] <[particle]> hey nm. what's moose with you?

[17:33] <mugwump> the project is currently called cpan6, and it is different to cpan - but it will include and support cpan

[17:33] <mugwump> Mark picked the name

[17:33] <[particle]> it seems a misleading name

[17:33] <[particle]> P != Perl

[17:33] <[particle]> 6 != Perl 6

[17:33] <rgs> c*anN

[17:34] <mugwump> I'd rather we didn't bikeshed at this point, really.

[17:34] <[particle]> i agree with that. what's in a name?

[17:34] <PerlJam> picking a good name isn't so much bikeshedding IMHO.

[17:35] <obra> mugwump: this is not a bikeshed. It's not a question about the name. it's a question about the spirit and intent of the project

[17:35] <PerlJam> names are very important because you're modifiying the language people use to include this new thing you've created.

[17:35] <obra> You've basically just defined freepan.

[17:35] <obra> and, well, you've chosen a name that, if this were business land, would be begging for a cease and desist order.

[17:35] <mugwump> no, it's more flexible than the freepan design

[17:36] <mugwump> We asked Andreas first

[17:36] <obra> it's the freepan vision I'm talking about. not ingy's implementation

[17:36] <obra> Did you ask jarkko?

[17:36] <gaal> what happened to the effort by kane and others?

[17:36] <gaal> j something

[17:36] <mugwump> We sent early design documents to Jarkko, and AFAIK he hasn't responded yet

[17:36] <obra> andreas is the PAUSE-master. Jarkko created and named CPAN.

[17:36] <[particle]> gaal: jsan?

[17:37] <gaal> no, I think it was something around .debs but I forget the name

[17:37] <[particle]> oh. good, cause jsan's a whole other ball of wax

[17:37] <obra> mugwump: I, in my capacity as the P6PM would like to humbly request that you use a less confusingly similar name.

[17:37] <gaal> JIB

[17:37] * PerlJam resuggests CSAN  :)

[17:38] <[particle]> sounds like cpan6 would encompass freepan, cpan, jsan, and whatever else

[17:38] <gaal> it was called JIB, and it's in the pugs repo, or used to be

[17:38] <obra> CSAN sounds great ;)

[17:38] <obra> . o O {"CTAN6"}

[17:38] <[particle]> i like CSAR

[17:38] <PerlJam> "R"?

[17:38] <[particle]> one comprehensive software archive repository to rule them all

[17:39] <mugwump> heh

[17:39] <mugwump> I see the 6 as an exponent

[17:39] <obra> mugwump: and everyone else on the planet sees it as "perl6"

[17:39] <PerlJam> indeed

[17:39] <mugwump> why don't we make this an opening discussion on the list?

[17:39] <obra> Because the list is a closed forum of people you've specifically invited.

[17:40] <mugwump> it's not closed

[17:40] <PerlJam> mugwump: because the list is poorly named too!  ;-)

[17:40] *** weinig is now known as weinig|bbl

[17:40] <obra> it's still composed of people you've invited who have accepted your invitation.

[17:40] <PerlJam> obra: I wasn't invited, but I've subscribed.

[17:40] <obra> Why not bring it up on one of the existing perl6 mailing lists?

[17:41] <obra> I will note that this is something like the fourth project to try to recreate the cpan for perl6.

[17:41] <[particle]> which... p6-users?

[17:41] <obra> [particle]: I'd actually say p6-l.

[17:41] <mugwump> I'm really not sure what your intent with all of this is, obra.  Can we not just discuss the design, and once people have a better idea of what we're trying to do, then decide whether the name is wrong

[17:41] <gaal> http://search.cpan.org/dist/Perl6-Bible/lib/Perl6/Bible/S22.pod

[17:41] <lambdabot> Title: Synopsis_22 - CPAN [DRAFT] - search.cpan.org, http://tinyurl.com/gkufa

[17:43] <obra> mugwump: because the thing you've described isn't CPAN and isn't focused on Perl6.

[17:43] <mugwump> I think the name is quite appropriate; it's an evolutionary step forward from cpan6, that will include cpan, and the idea came from the requirements of perl 6.

[17:43] <mugwump> er, s/6// :)

[17:44] <PerlJam> Whatever it's called, I like the design that I've read so far.  Whether it duplicates existing efforts or not.

[17:44] <obra> The fact that you didn't even get jarkko's blessing to use the name...somewhat disposes me against you.

[17:45] <obra> If jarkko gives it his blessing, I'll shut up

[17:45] *** dok left
[17:45] <PerlJam> obra: what if he gets aevil to give her blessing?  That's a tougher test than having Jarkko bless it even  ;-)

[17:45] <jdv79> once its up and running nobody will care about the name

[17:46] <obra> PerlJam: but it's not her call.

[17:46] <PerlJam> jdv79: they will.

[17:46] <jdv79> i don't care what CPAN is named - i just know that's where you go to get all things perl5

[17:46] <PerlJam> jdv79: As soon as the name doesn't make sense; they will care.

[17:47] <jdv79> no, its doesn't matter - i go to 2 or 3 rpm repos - i dont care about the name - just whats in them and who's making then

[17:47] <jdv79> them rather

[17:48] *** hexmode joined
[17:48] <mugwump> you could make the same complaint about any other variant on the name "cpan"

[17:49] *** ruz joined
[17:50] <PerlJam> mugwump: anyway, regardless of the name (I too disagree with it, but I can put that aside for now), why bother with XML when you're using YAML?

[17:51] <mugwump> Because there exists standards for XML Schemata, and we want to encourage widespread adoption with other languages

[17:51] * [particle] wonders if there are yaml schemas

[17:51] <mugwump> so, we will be transforming xml to yaml via a module of MarkOv's

[17:52] <mugwump> including the XMLSchema documents.  So you shouldn't need to touch XML from an early on point

[18:06] <kane-xs> gaal: it's .jib and the problem is with perl's way of stacking @INC :)

[18:07] <kane-xs> gaal: till we mentally figure out what to do with that, the focus is on core-ifying CPANPLUS

[18:08] <kane-xs> mugwump: from what i heard via-via, jarkko was offering advise etc, but got ignored.. perhaps best ping him agian on this

[18:08] <TreyHarris> i have a stupid question.  why can't v6.pm be used to 6-ify the existing CPAN, and then CPAN is CPAN?  (and surely for XS and other such things that can't be finessed like that, Makefile.PL's can take care of it).  why do we need a separate Perl 6 CPAN?

[18:09] <kane-xs> it's not 'CPAN.pm the code' taht's the problem currently :)

[18:09] <kane-xs> hurray for overloading terminology

[18:09] <TreyHarris> kane-xs: sorry, i was referring to the archive, not the module.  6-ify the existing modules

[18:10] <kane-xs> technically, perl5 is supposed to be able to run in perl6, no?

[18:10] <kane-xs> (just like p4 runs in p5)

[18:10] <TreyHarris> why is a separate archive needed?

[18:10] <kane-xs> so you wouldn't /have/ to touch the existing modules

[18:10] <TreyHarris> kane-xs: right, that's my point, if we have forward and backwards compatibility, why a separate archive?

[18:10] <mugwump> because, for instance, with perl 6, you can request any version of any module by any o^Hauthor

[18:10] <kane-xs> the archive format has quite a few short-comings, from an 'admin' point of view

[18:11] <kane-xs> Makefile.Pls are not the best way to convey information to installers, etc

[18:11] <kane-xs> compare Makefile.PL to debians system forexample

[18:11] <TreyHarris> mugwump: and it's a hard and fast limitation in the current cpan that can only be addressed by replacing the entire thing?

[18:11] *** iblechbot joined
[18:13] <mugwump> not alone, no

[18:17] * mugwump has dinner with family while he is still in London &

[18:17] <TreyHarris> i guess that's my question.  CPAN is Perl's crown jewel.  If it's going to be replaced--coming from a totally uninformed viewpoint, which is where 99% of CPAN's users will be coming from--I'd only switch to a different archive if it was a) painless, b) obvious to me why i was doing so, and c) i didn't feel like i was going out on a limb to do so, that i would still be in the bosom of the Perl community and be able to count on continuing support.  it ...

[18:17] <TreyHarris> ... sounds like the answers to those points at the moment are a) possible it could be painless, but very possible it won't, so who knows, b) i still don't understand the motivation--CPAN has too much momentum to be replaced just because it could be done better; c) it sounds like there's a great deal of controversy

[18:19] <TreyHarris> maybe these are just PR issues and not actual ones.  but reading cpan6.org, i don't see answers for these simple questions.

[18:20] <kane-xs> TreyHarris: fair questions.. sounds like something mugwump could answer, surely :)

[18:21] <TreyHarris> yeah, i was still typing when he left :-)

[18:21] <kane-xs> hehe

[18:22] <kane-xs> he'll be back i'm sure

[18:26] <rodi> I hate to bring this all back to mundanity, but... I'm still bit-munging, and have another (new!) question:

[18:26] <rodi> I have a Bool @array, and since:

[18:26] <rodi> ?eval say Bool::False

[18:26] *** evalbot_r13067 is now known as evalbot_r13070

[18:26] <evalbot_r13070> OUTPUT[ ] Bool::True

[18:26] <rodi> I want to coerce the elements of the array to Int context, comme ca:

[18:27] <rodi> ?eval say +Bool::False

[18:27] <evalbot_r13070> OUTPUT[0 ] Bool::True

[18:27] <rodi> But I'm not sure how to do this to the whole array, to avoid:

[18:27] <rodi> ?eval my Bool @a = (?0,?1,?0,?1); @a.say

[18:27] <evalbot_r13070> OUTPUT[11 ] Bool::True

[18:27] <rodi> Anyone know either the answer or the right place to look?

[18:29] <[particle]> ?@array= 0,1,1; @array.*+.say; # wild guess

[18:29] <TreyHarris> rodi: do you need an answer today, or the canonical answer

[18:29] <svnbot6> r13071 | gaal++ | * Pugs.Parser - fix parsefail in closure traits referring to $_,

[18:29] <svnbot6> r13071 | gaal++ |   reported by agentzh++. t/closure_traits/start.t now passes all

[18:29] <svnbot6> r13071 | gaal++ |   tests.

[18:29] <[particle]> nm, that's way wrong

[18:29] <TreyHarris> +>>@a would numify all elements

[18:29] <TreyHarris> but hyperops on unaries doesn't work today

[18:29] <rodi> w00t!

[18:29] <rodi> hyperop.t, here we come!

[18:29] <[particle]> :)

[18:30] <TreyHarris> oh, wait

[18:30] <TreyHarris> ?eval my Bool @a = (?0,?1,?0,?1); +<<@a.say

[18:30] <evalbot_r13070> OUTPUT[11 ] Error: Hyper OP only works on lists

[18:30] <TreyHarris> ?eval my Bool @a = (?0,?1,?0,?1); (+<<@a).say

[18:30] <evalbot_r13070> OUTPUT[0101 ] Bool::True

[18:30] <Limbic_Region> particle - are you still having problems building with 6.4.1 with p5 embedding

[18:30] <TreyHarris> there you go

[18:30] <TreyHarris> :-)

[18:30] <rodi> TreyHarris: wow.

[18:30] <rodi> thanks.

[18:31] <[particle]> l_r: with and without perl5 embedding

[18:31] <[particle]> i can't build pugs

[18:31] <Limbic_Region> ok - I am in the same boat now

[18:31] <[particle]> do you have a 6.6 workaround?

[18:31] <Limbic_Region> at least at work, - will need to try from home tonight

[18:31] <Limbic_Region> in may be a Win32 issue and not a ghc issue

[18:32] <Limbic_Region> s/in/it/

[18:32] <[particle]> sure

[18:32] <TreyHarris> oops, i think this is a bug

[18:32] <TreyHarris> ?eval my @a = (Bool::True | Bool::False) x 12

[18:32] <evalbot_r13070> [("" | "111111111111"),]

[18:32] <TreyHarris> anyone want to argue it's not?

[18:33] <TreyHarris> (i think i should get 12 true/false junctions)

[18:33] <[particle]> why is that a bug?

[18:33] <[particle]> oh, right, junction

[18:33] <gaal> false is "" in stringy context

[18:34] <gaal> "" x 12 is ""

[18:34] * [particle] suspects gaal++ is right

[18:34] <TreyHarris> gaal: yes, i know.  so how to i construct a list of 12 elements, each (Bool::True|Bool::False)?

[18:34] <gaal> if you want 12 junctions, say xx

[18:34] <gaal> ?eval (True|False) xx 12

[18:34] <evalbot_r13070> ((Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False,    Bool::False) |   (Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True,    Bool::True))

[18:34] <gaal> whee.

[18:34] <TreyHarris> oh dear.

[18:34] <TreyHarris> i thought i *did* use xx

[18:35] <TreyHarris> thanks gaal :-)

[18:35] <gaal> that's not very right though.

[18:35] <TreyHarris> no, it's the list of 12 falses or the list of 12 trues

[18:35] <TreyHarris> i want the list of 12 false-or-trues

[18:35] <gaal> ?eval [True|False] xx 3 # I assume 3 is as good as 12 here

[18:35] *** evalbot_r13070 is now known as evalbot_r13071

[18:35] <evalbot_r13071> ((Bool::False | Bool::True), (Bool::False | Bool::True), (Bool::False | Bool::True))

[18:35] <gaal> better.

[18:36] <TreyHarris> when did True andd False show up?  i must have missed that diff

[18:36] <[particle]> why is false coming first? (not that it matters, really)

[18:36] <TreyHarris> [particle]: junctions are definitionally unordered

[18:36] <[particle]> ok

[18:37] <TreyHarris> well, except when you compose one with any() and immediately use it in selective list context ;-)

[18:37] <TreyHarris> then it's guaranteed to maintain the original order of the leftmost any() :-)

[18:38] *** frederico joined
[18:39] * gaal proposes True be renamed to TrUe or something more annoying to type, to prevent code like "if ($the_value_to_check == TRUE)"

[18:39] <TreyHarris> lol

[18:40] <gaal> bad code is only funny when you don't have to maintain it yourself

[18:40] <[particle]> why not have a smart compiler that warns on TRUE/true ?

[18:40] <TreyHarris> gaal: yes, i know people who would loudly maintain that 'if ($the_vaule_to_check == TRUE)' is far more clear and maintainable than 'if $the_value_to_check'.

[18:41] <gaal> supposedly these people think "if (($the_vaule_to_check == TRUE) == TRUE)" is exquisite.

[18:42] <[particle]> true true

[18:42] <TreyHarris> it's the 'verbosity, that is to say, a great, almost, but not quite to the point of, excessive circumlocutory utterance, promotes clarity" school of style ;-)

[18:43] <mugwump> TreyHarris: you are asking good questions, and I hope as you read the design documents that you will see we are actually on the same page on those questions.

[18:43] <TreyHarris> mugwump: you expect all CPAN users to read those documents?

[18:43] <mugwump> no

[18:43] <mugwump> they won't need to

[18:43] <TreyHarris> mugwump: you should be able to answer in one sentence all my worries.

[18:44] <TreyHarris> otherwise, you're not going to get uptake.  cpan is *huge*.

[18:45] <mugwump> how about "cpan6 is distributed cpan, updated for security and multiple programming languages"

[18:45] <rodi> take that! Stephen Wolfram, all your pretty pictures are belong to Perl 6!

[18:45] <TreyHarris> "meh.  i only use it for Perl, and i've never had a security issue with my CPAN modules.  I'll stick with CPAN."

[18:45] <mugwump> and of course you'll be able to!

[18:47] <TreyHarris> and if everyone does so--or just those set who only use CPAN for Perl (100%) and haven't had a security issue with CPAN (>90% i'm sure), CPAN6 can still be a success?

[18:47] <lumi> Just show how the cpan6 tools will make uploading a package 4 characters less

[18:47] *** weinig|bbl is now known as weinig

[18:48] <mugwump> actually most people use CPAN for Perl and XS

[18:49] <svnbot6> r13072 | gaal++ | remove debug print

[18:49] <mugwump> that's two languages

[18:49] <mugwump> then there's also pir, pasm, pbc, etc

[18:50] <TreyHarris> mugwump: i think that's sophistry.  XS is Perl, for a wider definitition of Perl, as are the rest of those.

[18:50] <mugwump> right, so can you upload and fetch pir modules using cpan?

[18:51] <mugwump> or perl6?

[18:51] <TreyHarris> mugwump: ok.  so there's your PR line then: "CPAN will stop working once you move to Perl 6.  Use this instead."

[18:52] <TreyHarris> That rather unfortunately kills one of the promises made by Perl 6's designers... but...

[18:53] <rodi> anyone have a feeling about where in examples/ I should put a script to output wolfram-style cellular automata?

[18:53] <mugwump> a good thing thats not he only pr line, that we have a comprehensive set of documents outlining the problems we are solving.

[18:54] <kane-xs> mugwump: is there a quick faq one could point people at with 1 line problem, 1 line solution + link to more reading?

[18:54] <mugwump> not established yet

[18:55] <TreyHarris> mugwump: my point is that mere incremental technical prowess never caused any technology to overtake a very-well-entrenched one.

[18:56] <mugwump> and a good point that is.  I would value your continued input in this process.

[18:56] <TreyHarris> just take a look at how many better keyboards have come out since qwerty :-)

[18:56] *** rindolf joined
[18:56] <TreyHarris> clearly their inventors didn't write enough technical documents for people to understand what problems they were solving :-)

[18:58] <mugwump> I think in that case, it's just that the problems weren't big enough

[19:01] <svnbot6> r13073 | rodi++ | Example script (ported from an earlier Perl 5 version) to output

[19:01] <svnbot6> r13073 | rodi++ | Wolfram-style cellular automata in a terminal.

[19:18] <rodi> the silence must be everyone rushing off to try my shiny, new script!

[19:20] <rodi> any objection to my any("removal","replacement") of >> and << from t/operators/bit.t?

[19:20] *** frederico joined
[19:25] <TreyHarris> rodi: i'm sorry?  i can't see any recent changes to t/operators/bit.t

[19:25] <rodi> TreyHarris: I'm making changes, just wondering if there's any reason >> and << are still in there, since they're not part of Perl 6, AFAIK

[19:25] <Limbic_Region> no, that's a question in advance TreyHarris

[19:26] <Limbic_Region> rodi - what did they get replaced by?

[19:26] <rodi> ?>, +>, etc.

[19:26] <lambdabot> Maybe you meant: . bf id pl v wn

[19:26] <rodi> LOL

[19:26] <rodi> sorry, lambdabot

[19:26] <Limbic_Region> rodi - I think I am confused - which Synopsis is this from

[19:27] <TreyHarris> rodi: ah... yes.  the lack of smartlinks and the "mostly copied fro perl 5.8.4" is a giveaway :-)

[19:27] <rodi> Limbic_Region: Synopsis 3

[19:27] <TreyHarris> S02

[19:27] <TreyHarris> 3

[19:27] <TreyHarris> typo

[19:27] <Limbic_Region> ok

[19:28] <rodi> TreyHarris: hehe, I "needed" some of those operators in my recently committed script, along with sprintf("%b",$i), but worked around it for now,

[19:28] <rodi> just want to add my tests in, figured I'd clean up while I was there.

[19:28] <TreyHarris> Limbic_Region: L<S02/Changes to Perl 5 operators/Bitwise operators get a data type prefix> ;-)

[19:29] * rodi copies into bit.t

[19:29] <Limbic_Region> yes, but the >> and << operators still exist

[19:29] <Limbic_Region> that's my confusion

[19:29] <TreyHarris> oh dear

[19:29] <Limbic_Region> they just serve a different purpose

[19:29] <TreyHarris> oh

[19:29] <Limbic_Region> hyperoperators

[19:29] <rodi> Ahh, hyperops.

[19:29] <TreyHarris> lol

[19:29] <Limbic_Region> though they are technically unicode

[19:29] <TreyHarris> they're different operators, then.  they're just isolexographic

[19:30] <rodi> LOL

[19:30] <Limbic_Region> actually, all unicode chars have reg ascii counterparts AFAIK, they just usually require more typing

[19:30] <Limbic_Region> The Unicode characters » (\x[BB]) and « (\x[AB]) and their ASCII digraphs >> and << are used to denote

[19:30] <TreyHarris> yes.  >>, Y... what else?

[19:30] <Limbic_Region> that's quoted from S03

[19:31] <Limbic_Region> TreyHarris - I am not keeping a list

[19:31] <Limbic_Region> I was just confused when I saw "should I remove >> and << as they are no longer part of Perl 6"

[19:31] <Limbic_Region> I guess I should have looked at the test name to see that it was for bit operations

[19:32] <TreyHarris> ?eval 'a'..'d' Y 1..4

[19:32] *** evalbot_r13071 is now known as evalbot_r13073

[19:32] <evalbot_r13073> (("a", 1), ("b", 2), ("c", 3), ("d", 4))

[19:32] <PerlJam> It's the Y combinator!

[19:32] <PerlJam> ;)

[19:32] <TreyHarris> no, the Y combinator is spelled &?BLOCK ;-)

[19:33] <rodi> while I'm at it... what do other folks here use for Unicode input in KDE?

[19:33] <Limbic_Region> PerlJam - did you read aristotle's use.perl journal entry on the Y combinator

[19:33] <PerlJam> rodi:  << and >> have gone away as bit shifters, but they've been replaced by +> and +< I do believe

[19:33] <PerlJam> Limbic_Region: I did indeed.

[19:33] * Limbic_Region still can't think of a good use for it in perl

[19:34] <Limbic_Region> PerlJam - yes yes - just not the way I interpreted rodi's original comment

[19:34] *** [particle] joined
[19:34] <PerlJam> Limbic_Region: the Ycomb is useful in perl when you want to live in a restricted universe of pure functional programming.

[19:35] <TreyHarris> perl is an imperative language at its core style, no matter how many oo and functional and whotheheckknows what else gets poked onto it.  the Y combinator seems rather odd...

[19:35] <TreyHarris> == PerlJam.  much more succinctly than i was going ;-)

[19:36] <PerlJam> Think of it as validation.  Perl can do the Ycomb, ergo it's got all the same nifty magic that makes other languages important  ;-)

[19:36] <Limbic_Region> PerlJam - I suppose.  Perl's main paradigm is definately imperative but it allows you to do both OO and Functional to a certain degree.  I just see no need not to put perl's flair on things

[19:37] <Limbic_Region> IOW - A good Fortran programmer may be able to write Fortran in any language but that doesn't mean they should

[19:37] <Limbic_Region> Just because I have the Y combinator doesn't mean I should use it when plenty of other tools will suffice

[19:37] <Juerd> I try to write Perl in every language.

[19:38] <PerlJam> Juerd++ me too

[19:38] <PerlJam> And that's why it takes me a while to shift gears when I write C code :)

[19:38] <TreyHarris> Juerd: I try too, and alas, the language often doesn't let me :-)

[19:39] <PerlJam> PIR is perly enough that I can write it easily.

[19:39] <Limbic_Region> Oh, I didn't see stvn's reply to how it will look in Perl 6

[19:39] <PerlJam> there were no replies when I read it .... /me looks

[19:39] <TreyHarris> Limbic_Region: URL?  i didn't either

[19:39] <Limbic_Region> sub ($n) { return 1 if $n < 2; return $n * $?SUB.($n - 1); }

[19:39] <Limbic_Region> no need for URL

[19:40] <PerlJam> hrm.  use.perl.org is bizarro for me right now.

[19:41] <Limbic_Region> I can see use for Perl 6's ability to anonymously refer to the current code block while in that block without having to predeclare it

[19:41] <TreyHarris> i thought it was &?BLOCK, not $?SUB

[19:41] <Limbic_Region> though I think they are mostly evil

[19:41] <Limbic_Region> TreyHarris - stvn didn't claim the syntax was 100% correct

[19:42] <TreyHarris> oh... $?SUB is the current lexical *named* sub.  &?BLOCK is the current runtime block

[19:43] <TreyHarris> S02 and S06 do not seem to be entirely consistent on these points.  but maybe i need another reading

[19:43] * TreyHarris needs a Perl 6 rabbi

[19:43] <nothingmuch> TreyHarris: it's both

[19:43] <nothingmuch> but with a & sigil

[19:44] <nothingmuch> block is the current block

[19:44] <nothingmuch> (Which is also a sub)

[19:44] <nothingmuch> &?SUB is the current declared sub

[19:44] <nothingmuch> which might be anon

[19:44] <nothingmuch> i think

[19:44] <nothingmuch> if it's only named there's no point in having it

[19:45] <TreyHarris> oops.  yes, i meant declared, not named.  thanks.

[19:45] <TreyHarris> thinko

[19:45] <TreyHarris> but this business of some things being named by their sigilless forms and some named by their sigilfull forms is starting to get to me

[19:46] *** weinig joined
[19:46] <Limbic_Region> ?eval my @foo = 1..10; @foo>>++; ~@foo

[19:46] <evalbot_r13073> Error: Can't modify constant item: VInt 1

[19:46] <TreyHarris> @a and $a, different vars.  @.a and $.a, same attribute.  &?BLOCK and $?BLOCK, same var.  @?INC and %?INC, different var

[19:46] <lambdabot> Maybe you meant: all-dicts arr ask . v

[19:46] <Limbic_Region> hmm - shouldn't that work?

[19:47] <TreyHarris> Limbic_Region: markstos added a test for this just a couple days ago IIRC

[19:47] * TreyHarris must run, back soonish. &

[19:47] <Limbic_Region> okie dokie

[19:48] <Patterner> hmm.... <quote> Warning: retaining unknown function `Pugs_trap_exit' in output from C compiler </>

[19:48] <Limbic_Region> ?eval my @foo = 1..3; @foo.>>say

[19:48] <evalbot_r13073> Error:  unexpected ">" expecting ".", subroutine name, variable name, array subscript, hash subscript or code subscript

[19:48] <Limbic_Region> ?eval my @foo = 1..3; @foo>>say

[19:48] <evalbot_r13073> Error:  unexpected ">" expecting "::", term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[19:55] <svnbot6> r13074 | gaal++ | * cleanups to parameter and signature parsers. also caught a bug

[19:55] <svnbot6> r13074 | gaal++ |   that would have parsed :( :($moose) ) as a named param with no

[19:55] <svnbot6> r13074 | gaal++ |   explicit label.

[19:55] *** [particle] joined
[20:06] *** efunneko_ joined
[20:07] <rodi> Should ?| and ?& be thought of as bitwise operators?

[20:07] <gaal> no,

[20:07] <gaal> ^| and ^& are.

[20:08] <rodi> They're in L<S02/Changes to Perl 5 operators/Bitwise operators get a data type prefix>

[20:08] <Juerd> rodi: + is for numeric bitwise

[20:08] <Juerd> rodi: ~ is for stringy bitwise

[20:09] <Juerd> rodi: ? is for boolean "bitwise", but forget the bitwise part there.

[20:09] <rodi> Juerd: yep, writing tests in t/operators/bit.t now, and they're all in S03 together,

[20:09] <Patterner> "segmentation fault  ./pugs ./examples/ca_wolfram.pl"

[20:09] <rodi> trying to decide whether to put tests in there.

[20:09] <rodi> Patterner: wha!

[20:09] <Juerd> gaal: Mhat's ^ in that?

[20:09] <gaal> er, meant +|

[20:09] <Patterner> rodi: sorry

[20:09] <rodi> I think gaal meant ~^, etc.

[20:10] <rodi> Patterner: that makes me so sad!  runs great for me.  Which pugs version you got?

[20:10] <gaal> I think gaal meant +^ etc but I have insider information :)

[20:10] <rodi> LOL

[20:10] <Patterner> Version: 6.2.12 (r13073)

[20:10] <Patterner> it said ".............................x" and "............................xx", then died...

[20:12] <rodi> Patterner: any error message?

[20:12] <Patterner> nope

[20:12] <rodi> and the other scripts in that dir work fine?

[20:13] <Patterner> 0x00002b556679ebb8 in Parrot_FixedPMCArray_destroy () from ../parrot/blib/lib/libparrot.so.0.4.6

[20:14] <TreyHarris> Patterner: try it again?

[20:15] <gaal> z&

[20:15] <TreyHarris> I get semi-random segfaults from pugs, and 9 times out of 10 just running again fixes it.  I can't explain this.

[20:15] <Juerd> gaal: zoolean? :)

[20:15] <rodi> Juerd: nice, I'm adding that to t/operators/bit.t now...

[20:15] *** penk joined
[20:15] <Patterner> well, i got 5 seg faults out of 5 tries...

[20:16] <TreyHarris> ah.

[20:16] <TreyHarris> 03:03 < TreyHarris> audreyt: i ran ext/libwww-perl/t/live.t five times in a row, and three of those times I got sigbus, "illegal hardware instruction", once i got...oh, it scrolled off but it told me to report a compiler error to GHC, and once all tests passed :-)

[20:16] <TreyHarris> so i've seen some weird behavior before :-)

[20:16] <Patterner> sendmoremoney => No compatible subroutine found: "&collapse"

[20:17] <rodi> wow, that's fun.  Patterner: I'm recompiling 13074, see if it wfm.

[20:17] <TreyHarris> it just ran start-to-finish fine for me

[20:17] <TreyHarris> at r13059

[20:19] <Patterner> running test for 13074 now...

[20:31] <svnbot6> r13075 | fglock++ | Pugs-Compiler-Rule - inner loop optimizations; makes v6.pm another 7% faster

[20:36] *** Eimi joined
[20:38] *** polettix joined
[20:44] *** Eimi joined
[20:59] <svnbot6> r13076 | rodi++ | Names for all tests, linkbacks to S03, additional tests for bitwise and

[20:59] <svnbot6> r13076 | rodi++ | shift operators, removed Perl 5 cruft.  Left some commented-out tests

[20:59] <svnbot6> r13076 | rodi++ | that are not valid for one reason or another.

[21:06] *** Limbic_Region joined
[21:07] <rodi> Patterner: I just recompiled w/revision 13074, and can still run ca_wolfram.pl fine... not sure what's going on :(

[21:13] <Limbic_Region> ok - for sure, pugs is b0rk on Win32

[21:15] <pasteling> "Limbic_Region" at 24.35.57.240 pasted "Win32 problem with embedding Perl 5 (header issues apparently) - setting PUGS_EMBED="!perl5" of no help" (432 lines, 13.5K) at http://sial.org/pbot/19498

[21:17] <Limbic_Region> fwiw - this started happening in the last day or so and is a problem regardless of GHC versoin

[21:17] <Limbic_Region> version even

[21:18] <Limbic_Region> audreyt ping # if you backlog, see the Win32 issue nopasted above

[21:27] <obra> What's the current status of Pugs on Javascript?

[21:28] <Limbic_Region> obra - have you checked the smoke status?

[21:28] <obra> yes

[21:29] <obra> they show no tests passing on JS since um. january

[21:29] <Limbic_Region> apparently 0%

[21:29] <Limbic_Region> yeah

[21:29] <Limbic_Region> not good

[21:29] <rodi> ironpugs++

[21:29] <Limbic_Region> Pugs 6.2.12  	  	18 Aug 2006 16:05 Fri  	152.60 min  	0.00 % ok

[21:30] <Limbic_Region> the interesting thing is - it took 2.5 hours to come up with the goose egg

[21:30] <TreyHarris> hmmm... i didn't even smoke javascript

[21:30] <TreyHarris> looks like make smoke doesn't do so by default?

[21:30] <Limbic_Region> no

[21:30] <Limbic_Region> smokeall would test all backends

[21:30] <Limbic_Region> smoke just does the Perl 6 on GHC IIRC

[21:31] <rodi> I heard smoking javascript causes cancer anyway...

[21:31] <obra> the pugs smokes need a serious cleanout

[21:31] <TreyHarris> ah.  given that make smoke takes 12 hours for me, i think i'll pass on the smokeall :-)

[21:32] <TreyHarris> oh, not 12 hours.  4.

[21:32] <Limbic_Region> well, there should be a way to smoke JS individually too

[21:33] <TreyHarris> "jssmoke", according to the makefile

[21:33] <TreyHarris> i'm trying it

[21:33] <Limbic_Region> for a time - all the hackery was focused on the alternate backends

[21:33] <Limbic_Region> that appears to have died off though

[21:34] <TreyHarris> but of course it's recompiling pugs first.  *sigh*  am i the only one who gets recompilation even when no sources have changed?

[21:34] <Limbic_Region> that was supposed to have been fixed

[21:35] <Limbic_Region> wait is it actually compiling anything or is it just going through the motions to see if anything needs to be compiled

[21:35] <TreyHarris> ah.  if that were fixed, then my "sudo make install" littering root-owned files in my working copy would go away

[21:35] <Limbic_Region> I can't confirm/deny ATM without reverting pugs as the current rev doesn't compile on Win32

[21:36] <TreyHarris> perhaps it just "goes through the motions", but:

[21:36] <TreyHarris> % TZ=UTC ls -l pugs

[21:36] <TreyHarris> -rwxr-xr-x   1 trey  admin  37802496 Sep  6 21:35 pugs

[21:36] <TreyHarris> it is creating a new pugs

[21:38] <Limbic_Region> hrm - I really did think that was fixed

[21:39] <rodi> thanks, everyone, for the help with bitmunging today.

[21:40] <TreyHarris> hmm.  every single test is saying "Error: Precompiled Prelude ("...perl5/PIL2JS/pil2js.pl") does not exist... Can't bless non-reference value at "...pil2js.pl line 77"

[21:40] <TreyHarris> which would explain 0% success :-)

[21:42] <TreyHarris> i cancelled the smoke.  no point I think :-)

[21:45] <Limbic_Region> nope

[21:47] * Limbic_Region saw obra volunteer to clean this all up though

[21:48] <obra> Not a chance in hell

[21:48] <obra> "I'm just the project manager" ;)

[21:48] <TreyHarris> how do you smoke v6.pm?

[21:55] * Limbic_Region pulls out his glock and asks TreyHarris to hold the wiggly bugger above his head

[22:02] *** jon_ joined
[22:05] <jon_> ?eval @x=<1 2 3>;print "@x";

[22:05] *** evalbot_r13073 is now known as evalbot_r13076

[22:05] <evalbot_r13076> Error: Undeclared variable: "@x"

[22:05] <jon_> ?eval my @x=<1 2 3>;print "@x";

[22:05] <evalbot_r13076> OUTPUT[@x] Bool::True

[22:07] <mauke> ?eval my @x=<1 2 3>;print "@x[]"

[22:07] <evalbot_r13076> OUTPUT[1 2 3] Bool::True

[22:08] <statico> ?eval gerbils

[22:08] <evalbot_r13076> Error: No compatible subroutine found: "&gerbils"

[22:09] <jon_> thank you mauke

[22:14] <TreyHarris> or ?eval my @x=1..3; print "{@x}"

[22:14] <TreyHarris> ?eval my @x=1..3; print "{@x}"

[22:14] <evalbot_r13076> OUTPUT[1 2 3] Bool::True

[22:15] <TreyHarris> or, if you're feeling particularly oo-ish:

[22:15] <TreyHarris> ?eval my @x=1..3; @x.join(" ").print

[22:15] <evalbot_r13076> OUTPUT[1 2 3] Bool::True

[22:15] <TreyHarris> (of course, you probably want C<say>, not C<print>....)

[22:22] *** plisk joined
[22:23] *** plisk left
[22:23] <jon_> thanks TreyHarris, but while I like OO where it makes sense, I prefer things like say "@x[]" or say "{@x}"

[22:24] <TreyHarris> well, those are just exactly "@[]".say ;-)

[22:25] <jon_> I know... it's just the aesthetics

[22:25] <TreyHarris> which becomes $*OUT.say("@[]")

[22:25] <TreyHarris> yep, i understand and agree :-)

[22:26] <jon_> cool... someone shares my quirks/foibles :)

[22:27] <TreyHarris> now, let's not go too far ;-)

[22:28] *** lisppaste3 joined
[22:28] <TreyHarris> I can't tell you how many times I've written 'print $fh: "blah blah"' in the past few weeks though when writing perl 5 code

[22:29] <TreyHarris> indirect-object syntax without a colon just looks SO WRONG to me now.

[22:37] <avar> haha:)

[22:41] <avar> when you do "@[]".say what's the delimiter? S28 says $" is gone in place of @x.join, so what's { local $" = $str; print "@_\n"; } in Perl 6?

[22:41] <avar> S28 draft that is

[22:43] *** weinig is now known as weinig|bbl

[22:44] *** jferrero joined
[22:47] *** markstos joined
[22:47] <avar> b.t.w. has noone started writing the equivalent of perldoc in p5 for p6? The synopsis are really replacements for the Camel Book more for anything like that

[22:49] *** lollan joined
[22:49] <obra> do you mean perldoc the command, perldoc the format or "the docs for perl"?

[22:49] <avar> *more than ...

[22:49] <avar> I mean stuff like perlvar, perlre etc.

[22:50] <obra> nod

[22:50] <avar> i.e. the actualy document shipped with the language for core functions et al.

[22:50] <obra> I belive that the intent is to morph the synopses into that

[22:55] <TreyHarris> ?eval my @a = 1..4; say "{@a.join(":")}"

[22:55] <evalbot_r13076> OUTPUT[1:2:3:4 ] Bool::True

[22:55] <markstos> I started a new wiki page so we can help each other figure what some of less intuitive Pugs error messages mean:

[22:55] <TreyHarris> avar: I think the above is the replacement

[22:56] <markstos> http://rakudo.org/perl6/index.cgi?pugs_diagnostics

[22:56] <avar> TreyHarris: So no, you can't do that:)

[22:56] <TreyHarris> the idea being that spooky-action-at-a-distance vars, even localized, or being eschewed

[22:56] <TreyHarris> avar: why can't you?

[22:56] <avar> TreyHarris: I'm not displeased with that, just wondering what the default delimiter was

[22:56] <markstos> I'm currently trying to figure out this one out:

[22:56] <markstos> Can't modify constant item: VUndef

[22:56] <avar> TreyHarris: I mean you can't define custom stringification delimiters with syntax sugar anymore:)

[22:57] <avar> "{@a.join(":")}" not $"=":";"@a"

[22:58] <TreyHarris> avar: ah.  well, not implemented this way yet, but I would assume that there's a multi method Array::as (Str) { self.join($mumble) }, and you'd change $mumble

[22:59] <TreyHarris> and if $mumble were a package var or a class attribute, you could localize it

[22:59] <TreyHarris> but if seriously $" is gone gone, it would be a private lexical or a constant, so you couldn't.

[22:59] <avar> Yeah, but not really friendly:)

[23:00] <TreyHarris> I dunno.  { temp Str.delimiter = ":"; say "@_" } seems friendlier to me...

[23:01] <avar> "@_[]" :)

[23:02] <TreyHarris> right. :-)

[23:11] *** cjeris left
[23:12] <markstos> design question: If I have an object that want to serialize as YAML, but the YAML is /different/ than what a ".yaml" would normally produce, should I: 1. override ".yaml" to use a custom format for that object or 2. avoid the conflict and choose another name like ".as_yaml" ?

[23:14] <avar> different how?

[23:14] <avar> Is it invalid YAML or is the YAML module broken?

[23:15] <markstos> This is for CGI.pm P6. It's useful to dump out the name/values of the params as YAML, but that's different than what you get if you just do $q.yaml

[23:16] <markstos> It's probably better to avoid confusion by not using the builtin name.

[23:16] <avar> ah, sorry

[23:17] <avar> Well on the other hand, if it's compatable yaml I don't see why not

[23:17] <avar> it could still be unserialized when needed by other yaml libs

[23:17] *** mako132_ joined
[23:18] <markstos> I guess if people want the regular yaml, they could do something like $q.perl.yaml, which get the raw Perl, and then the raw yaml.

[23:19] *** jferrero joined
[23:43] *** [particle] joined
[23:53] <markstos> The follow creates an infinite loop, and I think it's a bug:

[23:53] <markstos> class Foo { method yaml { my %s; return %s.yaml } } Foo.new.yaml;

[23:54] <markstos> The bug is that %s.yaml calls "yaml" in the Foo class, even though %s is not a Foo object.

[23:54] <markstos> Thus, a loop is created.

[23:55] <markstos> Agreed ? I can create a test case if so. My test case will include a clause for stopping after a couple of loops. :)

