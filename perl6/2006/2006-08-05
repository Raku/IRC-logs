[00:06] *** mdiep joined
[00:22] *** ludan joined
[00:26] *** xerox- joined
[00:44] <svnbot6> r11929 | fglock++ | pX/Pugs-Compiler-* - more s/Regex/Token/; ram use drops to 100-150MB

[01:23] *** limxeh joined
[01:24] *** limxeh left
[01:27] *** weinig|bbl is now known as weinig

[01:27] *** kanru joined
[01:29] *** buetow joined
[02:08] <svnbot6> r11930 | fglock++ | pX/Pugs-Compiler-* - fixed ':' in Regex; t/01-sanity/* pass; Test.pm fails (uses about 320MB)

[02:11] *** lollan joined
[02:29] *** cmarcelo left
[02:37] *** weinig is now known as weinig|sleep

[02:57] *** penk joined
[03:32] *** dolmans joined
[03:32] *** esammer_ joined
[03:40] <dolmans> seen TimToady

[03:40] <jabbot> dolmans: TimToady was seen 5 hours 33 minutes 11 seconds ago

[03:45] *** kanru joined
[03:53] <dolmans> is there a memo bot?

[03:58] <dolmans> TimToady: [,] seems more sense, i tested and worked. but `for (@a, @b) {}' did NOT flatten currently.

[03:59] *** spoop joined
[04:05] *** esammer_ is now known as esammer

[04:11] <TimToady> dolmans: then it's a bug, I expect

[04:13] <TimToady> I note that for (1,2,3), (4,5,6) -> $x { say $x }

[04:13] <TimToady> seems to work right.

[04:16] <dolmans> TimToady: yes, for your saying, there is a bug.

[04:26] <dolmans> bug is our friend. not-implemented-feature is a synonym.

[04:27] <dolmans> i guess if we really wanna traverse the two array objects, then should say `for (\@a, \@b) { say }'

[04:38] <azuroth> bugs aren't very friendly

[05:10] <dolmans> azuroth: considering them friend makes life easier.

[05:10] <azuroth> heheh, by befriending them and therefore not squashing them? :-P

[05:11] <dolmans> making them behave better not sqaushing in my sight.

[05:15] <spinclad> treat them with loving kindness and compassion to help them ease their unfriendliness and cluelessness of the right way; share their joy in finding the right way

[05:16] * dolmans nod

[05:18] <clkao> win 7

[05:20] <gaal> good morning

[05:20] <dolmans> morning gaal

[05:20] <gaal> audreyt: take over the world^W^W^W^Wswitch over to new AST-p?

[05:20] <gaal> hi dolmans

[05:21] <spinclad> boqer tov, gaal

[05:21] <clkao> moose

[05:21] <gaal> g'antlers to all of ye }:)

[05:23] <spinclad> gaal: hegemony^W: sounds like a plan

[05:24] <gaal> spinclad: I have prepared Special Coffee

[05:25] <spinclad> that's good.  you would need it even more if you were here.  the sun is dead asleep.

[05:26] <spinclad> fuel for enlivening new AST's!

[05:27] <clkao> gaal: hiveminer is launched!

[05:28] <gaal> whee!

[05:29] * gaal hands out royal jelly-spiked coffee for all

[05:29] <azuroth> honey coffee..?

[05:30] <spinclad> coffee to bring out the queen in everyone

[05:30] <azuroth> heheheh

[05:30] <spinclad> y'all rule, now, hear?

[05:32] <gaal> for those who don't like it there's also Abstract Syntax Tea

[05:32] <azuroth> *cringe*

[05:34] * spinclad goes for some functors and tea

[05:39] <azuroth> parsec is sweet.

[06:06] <clkao> fglock: testpm fails because $foo if $bar is not parsing exp1. probably pcr problem for recursive rule

[06:08] <clkao> fglock: actually using $<exp1> rather than the rule name matched returns something not parsed

[06:57] *** wilx` is now known as wilx

[07:05] <gaal> elks

[07:06] <azuroth> meese

[07:09] *** lolage joined
[07:15] *** iblechbot joined
[07:17] <gaal> argh why does the build system attempt to remake all the third-party/ deps every time?

[07:18] <gaal> they don't need to be recompiled but visiting them takes time

[07:35] *** larsen joined
[07:47] *** elmex joined
[08:01] *** xerox- is now known as shapr

[08:19] *** shapr is now known as anglohaskellers

[08:20] *** foo\ joined
[08:42] <audreyt> gaal: switchover will take place at roughly 16 hours from now

[08:42] <audreyt> and continue for 80 hours

[08:43] <audreyt> (with interspersed sleep if I'm fortunate)

[08:43] <audreyt> and we'll see if 3.5 days is sufficient to do it

[08:43] <audreyt> the last time (Pugs.Types.* and IVar) took 3 days

[08:43] <clkao> audreyt: hey

[08:44] <audreyt> hey

[08:44] <audreyt> I just got myself a WiFly account

[08:44] <audreyt> so will be able to remain online much more from now

[08:44] <clkao> cool

[08:44] <clkao> why not use 3g?

[08:44] <audreyt> (citywide wifi)++ # even if they charge for it now

[08:44] <svnbot6> r11931 | audreyt++ | * Data::Bind - silence a gcc warning about pointer type compatibility.

[08:44] <audreyt> WiFly is significantly cheaper?

[08:45] <clkao> 300 a month?

[08:45] <audreyt> and now equally pervasive in city

[08:45] <audreyt> 3000 a year

[08:45] <clkao> ah.

[08:45] <clkao> the roaming didn't work quite well last time i tried

[08:45] <audreyt> mm

[08:45] <audreyt> worksforme

[08:45] <audreyt> (on MRT)

[08:46] <clkao> ya, that works

[08:46] <audreyt> (hotspring with wifly wifi)++

[08:47] <audreyt> (bbiab)

[08:47] <clkao> heh. isn't it a bit too warm not

[08:47] <clkao> fglock: RE: ->recompile mutating parser - need to take out the infix stuff after parsing a module though

[08:56] <meppl> guten morgen

[08:58] <gaal> is 1 ntd ~~ 0.03 usd?

[08:58] <gaal> if so that looks like an amazing deal

[08:58] *** lollan joined
[08:59] * gaal reads arrows paper

[09:00] *** xern joined
[09:02] <azuroth> citywide wifi? what city?

[09:02] * gaal wonders if the PLit class was needed after all and whether literal showing might have been done like the Perl5 class

[09:02] *** rindolf joined
[09:02] <rindolf> Hi all.

[09:02] <rindolf> audreyt: here?

[09:02] <clkao> gaal: where do you think all the wireless chips are made?

[09:02] <gaal> azuroth: Taipei, presumably.

[09:02] *** Southen joined
[09:03] <rindolf> Hi gaal, clkao

[09:03] <gaal> clkao: Taipei, presumably.

[09:03] <clkao> actually hsinchu, 1hr from taipei ;)

[09:03] <gaal> rindolf: Taipei, presumably # okay, two out of three for sense ain't bad

[09:03] <azuroth> rindolf: Taipei, presumably

[09:03] <azuroth> arr

[09:03] <gaal> harr

[09:04] <azuroth> I was four seconds too slow

[09:04] *** Revision17 joined
[09:04] <gaal> 'slong as we're in agreement :)

[09:05] * gaal wonders who invented the typesetting convention in funcP papers to partially overwrite operators.

[09:11] * azuroth wonders who invented the infinity symbol. what a pain to write.

[09:12] <rindolf> Scarvey ye timber!

[09:13] <rindolf> azuroth: in real hand writing?

[09:13] <rindolf> azuroth: it's \inf in LaTeX

[09:13] <rindolf> And also has a unicode symbol.

[09:13] <azuroth> yes, in real hand writing :-)

[09:14] <rindolf> Well, I'd better configure my Mandriva home dir to be available on Kubuntu.

[09:15] <rindolf> I'm an exile because Mandriva Cooker messed up X.org.

[09:15] <StudiesInWords> you know how to write an 8, right..?

[09:15] <rindolf> in exile even.

[09:15] <rindolf> StudiesInWords: yes, just turn the page.

[09:15] <azuroth> yeah, but turning the page is annoying. what a pain.

[09:16] <gaal> you need a pageturning combinator library

[09:16] <azuroth> that would be nice...

[09:16] <azuroth> bye all, I'm off for fun

[09:16] <gaal> inf = pageturn 8

[09:16] <gaal> fun that you're not off for good

[09:16] <rindolf> azuroth: bye!

[09:17] <rindolf> azuroth: have fun.

[09:17] <rindolf> gaal: do you have a gf?

[09:17] <rindolf> gaal: I sent a resignation email yesterday.

[09:17] <rindolf> gaal: I'm going to give a shot at being a freelancer of sorts.

[09:18] <rindolf> gaal: where are you working now?

[09:19] <gaal> from these questions it sounds like you want to be my freelance gf?

[09:20] <rindolf> gaal: no.

[09:20] <rindolf> gaal: I'm just asking.

[09:22] <audreyt> "freelance gf" sounds like a fascinating concept.

[09:22] <rindolf> AUDREYT!!!

[09:22] <rindolf> audreyt: what's up?

[09:22] <audreyt> svk

[09:22] <rindolf> audreyt: cool.

[09:23] <audreyt> as in "svk up" # ok, not funny

[09:23] <rindolf> audreyt: hacking on svk?

[09:23] <rindolf> perlbot: top 10 karma

[09:23] <perlbot> The top 10 karma entries: C: 1146, iblech: 227, $i: 197, C/C: 166, audreyt: 151, fglock: 146, stevan: 127, gaal: 123, putter: 121, $x: 93

[09:23] <rindolf> audreyt: you're gaining more karma recently. Lots of commits?

[09:23] <audreyt> probably just longer commit logs.

[09:24] <rindolf> audreyt: I see.

[09:24] <gaal> there was that time when she committed a formatting change with a three-page log message consisting of blank lines except one period in the middle. I always told her to use the <CENTER> tag, but she wouldn't listen.

[09:26] <audreyt> I learned it from gaal, who has committed a 2-d projection of a three dimensional fractal pyramid

[09:26] <rindolf> gaal: <CENTER> is depracated.

[09:26] <rindolf> audreyt: :-)

[09:26] <rindolf> audreyt: as a test result?

[09:26] <audreyt> that spans 1792 lines

[09:27] <gaal> we should hack svnbot so that it --s someone who's code you're removing

[09:27] <audreyt> rindolf: no... I was replying gaal's counterfactual statement with another one

[09:27] <audreyt> gaal: aww, how very zero sum thinking

[09:27] <rindolf> audreyt: OK.

[09:27] <gaal> audreyt: of course it's counterfactual! it was't a pyramid, it was a dodecahedron!

[09:28] <audreyt> surely it's a icosahedron?

[09:28] <audreyt> d20 system is more popular, I hear

[09:29] <rindolf> audreyt: http://www.shlomifish.org/MathVentures/dodeca.html

[09:29] <gaal> audreyt: actually it's just like adding a RULE to make karma the grep -c ^$name `svk praise` of the project

[09:29] <lambdabot> Title: What's the Volume of a Dodecahedron?

[09:29] <gaal> so there can be fusion, or something

[09:30] <gaal> ok this is getting too inane for noon conversation, even if this is IRC

[09:30] <audreyt> mm karma fusion

[09:30] * gaal plops back to them arrows

[09:31] <rindolf> audreyt: so I decided to enter the fear and become a freelancer of sorts.

[09:31] <audreyt> you may find my ByteString parrows in the pugs tree to be helpful

[09:31] <rindolf> audreyt: I'm also trying to get sponsorship for a year.

[09:31] <audreyt> rindolf: nice.

[09:31] <audreyt> you'll also get uncertainty and doubt for free!

[09:31] <audreyt> but it'll be fun.

[09:31] <gaal> audreyt: gracias

[09:32] <audreyt> de nada

[09:32] <rindolf> audreyt: are you studying a new human language now?

[09:33] <audreyt> no

[09:33] <rindolf> audreyt: I see.

[09:33] <rindolf> audreyt: maybe I should take some German courses.

[09:33] <rindolf> Or work on my Arabic.

[09:33] <rindolf> I studied Written Arabic for 6 years in High School, but lost most of my vocab.

[09:33] <gaal> btw, why the higher-rank polymorphism in the "real" declarations of class Monad? the tutorials always have it class Monad m where (>>=) :: m a -> (a -> m b) -> m b

[09:34] <rindolf> Semitic languages are a bitch, but kids can get the hang of them pretty quickly.

[09:34] <gaal> but the real type in ghc at least is forall a b. m a -> (a -> m b) -> m b

[09:34] <audreyt> it's the same

[09:34] <gaal> hmm, is there a difference at all? the scope is for the entire expresion

[09:34] <audreyt> ghc just makes forall explicit

[09:34] <gaal> then why bother?

[09:34] <gaal> audreyt: this is in the source code...

[09:34] <gaal> not @type

[09:34] <audreyt> for pedagogical reasons

[09:35] <gaal> libraries/base/GHC/Base.lhs

[09:35] <audreyt> alternatively, someone copy and pasted :t

[09:35] <audreyt> ;)

[09:35] <gaal> :)

[09:35] <gaal> pedagogical doesn't make sense here because in the same class, return a :: a -> m a

[09:35] <gaal> w/o explicit quantification

[09:35] <gaal> or maybe, just bad pedagogy :)

[09:36] <audreyt> badagogy

[09:36] <audreyt> they are used interchangeably

[09:37] <audreyt> and might be authored by different people anyway

[09:37] <audreyt> the explicit "forall a b." is clearer because you won't

[09:37] <audreyt> read (a->m b) as (forall b. a->mb)

[09:37] <audreyt> accidentally

[09:37] <audreyt> and "return" has no such problem

[09:37] <audreyt> but that's retrojustifiction... probably just badagogy

[09:37] <gaal> unjustification

[09:38] <audreyt> jestification

[09:38] <gaal> why would you ever read (a->m b) as (forall b. a -> m b) ?

[09:38] <audreyt> jest-driven development

[09:39] <audreyt> you wouldn't. :)

[09:39] <audreyt> so. Class.MOP.

[09:39] <gaal> that's a bit like wager-driven development. "bet you can't write a program to..."

[09:39] <gaal> whee

[09:39] <audreyt> I've backlogged the #moose discussion

[09:40] <audreyt> seems that we really want it to compile before the switch

[09:40] <gaal> after my brain stopped hurting so did i, and it made more sense on a reread

[09:41] <gaal> nothingmuch's proposals often do, if I can get past the brainhurt stage, which I can't always

[09:41] <gaal> audreyt: I'll get it to compile then.

[09:42] <audreyt> yay.

[09:42] <gaal> oh, can you summarize usage gudelines for encodeUTF8 and decodeUTF8 please? they are teh confusing.

[09:42] <audreyt> ok... don't.

[09:43] <audreyt> that's a nice and short summary I hope

[09:43] <gaal> I want to write something that emits a NativeStr as String; should it encode or decode?

[09:43] <gaal> heh.

[09:43] <gaal> jsut use Data.ByteString.Char8?

[09:43] <audreyt> aye

[09:43] <gaal> ACK.

[09:43] <gaal> that's indeed the best possible summary

[09:43] <gaal> you are a monadic summarizer.

[09:44] <audreyt> :D

[09:44] <audreyt> meanwhile I'll work on PIL.Native.Eval

[09:44] <audreyt> porting it to CapInternals

[09:44] <gaal> 'hip' xx 2 ~ hooray

[09:45] <gaal> hope precedence doesn't bork that?

[09:45] <gaal> ?eval 'hip' xx 2 ~ hooray

[09:45] *** evalbot_11922 is now known as evalbot_11931

[09:45] <evalbot_11931> Error: No such sub: "&hooray"

[09:45] <gaal> ?eval 'hip' xx 2 ~ 'hooray'

[09:45] <gaal> grr.

[09:45] <evalbot_11931> "hip hiphooray"

[09:45] <gaal> computers are hard, lets go computer shopping.

[09:45] <audreyt> ?eval "{'hip' xx 2, 'hooray'}"

[09:45] <evalbot_11931> "hip hip hooray"

[09:45] <gaal> ha!

[09:46] <audreyt> it's nice that I got enough $job done that I have nothing on queue until at least wednesday

[09:46] <audreyt> and only a couple afternoons after that

[09:46] <audreyt> jifty++ # massive timesaver

[09:46] <gaal> (pony-oriented programming)++

[09:46] <audreyt> msie6-- # 50% of time spent on working around its bugs

[09:48] <gaal> jifty++ # you'd be spending a lot less than 50% of your time workaroungind msi bugs if it weren't for a framework that made the other things easy

[09:48] <gaal> # but there'd be more time spent overall

[09:48] <gaal> bbiab&

[10:05] <gaal> argh third-party/ annoys me

[10:07] <audreyt> move back to src/?

[10:07] <audreyt> btw, GHC 6.5-trunk now allows multiple module names to be concurrnetly installed

[10:07] <audreyt> and all dependencies are qualified by (package-version-module) triple

[10:08] <audreyt> so userinstalled fps and pugs fps can now coexist

[10:08] <audreyt> and we don't have to rename things anymore

[10:08] <audreyt> i.e. GHC finally supports multiversioning.

[10:09] <gaal> that's very excellent

[10:09] <audreyt> I can't wait for 6.6 to be available as binary on all major platforms.

[10:09] <audreyt> that's perhaps still 3~4 months in the future.

[10:09] <gaal> but my current gripe is that 'make pugs' vists 3rdp superfluously

[10:10] <audreyt> yeah. you can nix the revisit

[10:10] <audreyt> util/build_pupgs

[10:10] <audreyt> line 74

[10:10] <audreyt> probe for -M of the .a file

[10:10] <gaal> does ccache really work with ghc? i just did 'ccache -s' and saw no hits

[10:10] <audreyt> and don't rebuild if there's it

[10:11] <gaal> good idea

[10:14] *** buetow joined
[10:20] <gaal> hmm. what's a good thing to compare the -M of the lib against? the dir modification time?

[10:20] <gaal> s/dir/lib hs source dir/

[10:22] <gaal> don't want to reinvent make... but ISTR the revisits didn't use to happen, was there another clever mechanism?

[10:36] <svnbot6> r11932 | Darren_Duncan++ | ext/Set-Relation/ : start to reimplement this module using fewer Perl 6 features, so that it can be made to work sooner

[10:38] <audreyt> no

[10:38] <audreyt> revisit is neccessary for third-party/

[10:38] <gaal> too bad :(

[10:38] <audreyt> as 6.2.1's cabal doens't support multiple source dirs

[10:38] <audreyt> 6.4.1

[10:38] <audreyt> and in any case we may want to configure each third-party diferently

[10:39] <gaal> troo

[10:41] <gaal> audreyt: I had to use -fno-monomorphism-restriction in a small refactoring I just made. what's the haskell 98 longhand spelling for what I did?

[10:42] <svnbot6> r11933 | gaal++ | * minor cleanups

[10:42] <svnbot6> r11933 | gaal++ | * fps literal string quoter for Perl6Class

[10:42] <audreyt> usually just means you need to decurry

[10:42] <audreyt> and name the params explicitly

[10:42] <gaal> beh

[10:43] <audreyt> ts            = text . show . plShow

[10:43] <audreyt> change to

[10:43] <gaal> (haskell > 98)++

[10:43] <audreyt> ts x = text . show $ plShow x

[10:43] <gaal> so much for equational reasoning :)

[10:44] <audreyt> http://hackage.haskell.org/trac/haskell-prime/ticket/80

[10:44] <lambdabot> Title: #80 (Reform the monomorphism restriction) - Haskell Prime - Trac

[10:46] <gaal> haskell rfc process! when's the first Apocalypse come out?

[10:46] <audreyt> actually... we vote as a committee :)

[10:47] *** prefiks joined
[10:49] *** turrepurre joined
[10:49] <gaal> if Trac were implemented in Haskell, the company that made it would need to have been renamed BestTheoretical

[10:54] <svnbot6> r11934 | gaal++ | remove comment, we'll stay with the extension

[11:00] <gaal> hmmmm looks like hs-boot files again :(

[11:00] <gaal> MOP <-> CapInternals

[11:01] <audreyt> usually solvable with implicit param :)

[11:01] <audreyt> (see Pugs.Parser/Operator)

[11:01] <audreyt> but for now, feel free to use .hs-boot

[11:01] <audreyt> can always refactor later

[11:02] <gaal> it's types, not funcs

[11:02] <audreyt> much better than #include

[11:02] <audreyt> so you can't go anywhere but up

[11:02] <audreyt> types can maybe get factored out?

[11:02] <audreyt> to another common dep mod

[11:02] <audreyt> but .hs-boot is fine

[11:05] <audreyt> jet lag is kicking in bad...

[11:05] <audreyt> I'll resume hacking for real after sleep

[11:05] <gaal> nightie

[11:05] <audreyt> be back in ~10hr :)

[11:14] *** awwaiid_ joined
[11:14] *** iblechbot joined
[11:35] *** kane-xs joined
[11:37] *** dolmans joined
[11:59] *** theorb joined
[12:29] *** Aankhen`` joined
[12:32] *** chris2 joined
[12:35] *** Aankh|Clone joined
[12:48] <svnbot6> r11935 | gaal++ | * Make Pugs.MOP compile. Yippie!

[12:48] <svnbot6> r11935 | gaal++ | * Add demo misc/pX/gaal/CMTest.hs (currently displays some bogosity

[12:48] <svnbot6> r11935 | gaal++ |   in asPerl6Object, hmm)

[12:50] <gaal> audreyt: I punted somewhat with the circularity, and simply moved the type definitions all to Pugs.AST.CapInternals. It's not totally evil since the AST *is* coupled with the MOP a little bit...

[12:54] <audreyt> sure.

[12:54] <audreyt> yay!

[12:55] <gaal> can't sleep? :/

[12:56] <audreyt> oh. right. forgot that I'm sleeping now

[12:56] * audreyt remembers and dozes off

[12:58] <gaal> :P

[13:06] <gaal> .oO( and disappears in a puff of timezone difference )

[13:08] *** lumi joined
[13:08] *** iblechbot joined
[13:17] *** mauke_ joined
[13:27] *** mauke_ is now known as mauke

[13:48] *** ludan joined
[14:06] *** elmex joined
[14:29] *** weinig joined
[14:53] *** Dr_Pi joined
[14:55] *** jferrero joined
[14:55] <jferrero> Hi

[14:55] *** elmex joined
[15:01] <TimToady> howdy

[15:20] <gaal> moose!

[15:25] *** crem_ joined
[15:36] *** weinig is now known as weinig|away

[15:41] *** lichtkind joined
[15:42] <lichtkind> welsome back all here :)

[15:42] <lichtkind> welcome

[15:45] <stevan> gaal: m??se?

[15:47] <stevan> gaal: in response to your question in #moose about Object

[15:47] <stevan> Object has no superclass

[15:47] <stevan> it's metaclass is an instance of Class

[15:47] <stevan> (now here comes the really fun part)

[15:47] <stevan> Class's superclass is Object

[15:48] <stevan> Class's metaclass is an instance of Class

[15:48] <stevan> I made pretty pictures of this a while back (including the Package and Module stuff as well) - http://svn.openfoundry.org/pugs/perl5/Perl6-MetaModel/docs/p6_object_model.jpg

[15:49] <stevan> and the MiniMetaModel is a fairly simple example of how to bootstrap the circularity I described above

[15:49] <stevan> http://svn.openfoundry.org/pugs/perl5/Perl6-MetaModel/docs/MiniMetaModel.pl

[15:51] <stevan> and to further prove that Perl really is the new LISP,... here is a LISP version of the mini-meta-model...which is suprisingly similar - http://sial.org/pbot/18789

[15:51] <lambdabot> Title: Paste #18789 from "stevan" at 71.234.68.135

[15:52] *** justatheory joined
[15:56] <gaal> stevan: moose! but my question was, which *module* does Object have? presumably one with the package "Object", yes?

[15:57] <stevan> gaal: uhm,.. yeah

[15:57] * stevan is a little confused 

[15:57] <TimToady> stevan: but you've just proven that Perl *5* is the new Lisp...

[15:57] <gaal> stevan: See http://svn.openfoundry.org/pugs/src/Pugs/MOP.hs and near the bottom of http://svn.openfoundry.org/pugs/src/Pugs/AST/CapInternals.hs

[15:58] <stevan> TimToady: yes, for Christmas I will prove that with Perl 6 :)

[15:58] <TimToady> I want it now.  Wah! Wah! Wah!

[15:58] <stevan> gaal: is the module the storage?

[15:59] <stevan> TimToady: I know a few people... I will see what I can do :P

[15:59] <gaal> classObject = MkClass { c_module = the modules that has 'Object' as its name, ... }

[16:00] <gaal> stevan: this is code you helped us write in chicago:

[16:00] <gaal> CapInternals.hs:789

[16:00] <gaal> the basic oo thingies

[16:01] <gaal> a package has a name and maybe a parent

[16:01] <gaal> a module is a package + version stuff # and the 'package' part may be anonymous really

[16:01] <stevan> gaal: yes, ok,.. it is coming back to me now

[16:01] * stevan had to put on his Haskell glasses to see 

[16:02] <gaal> a class is a module (maybe) plus superclass list and method+slots stuff

[16:02] <stevan> yup

[16:03] <stevan> so in answer to your question then... yes,.. Object's module is the one with the name *Object*

[16:03] <gaal> nothingmuch had proposed something i'm only partially understanding (but am less shocked at as I was when he first brought it forth)

[16:03] <stevan> the interface stuff?

[16:03] <gaal> in #moose

[16:03] <gaal> yeah

[16:03] <gaal> really needs a better name :)

[16:03] <stevan> yeah we have been discussing that even more in the context of Class::MOP

[16:03] <stevan> gaal: agreed,.. we dont want to have Java connotations

[16:04] <gaal> so excellent, classObject is correct

[16:04] <stevan> gaal: in CapInternals.hs you have the superclass of Class being Class

[16:04] <stevan> it should be Object

[16:04] <stevan> or am I compiling that wrong ?

[16:05] <gaal> stevan: it's not that I'm worried about java connotations as such; it's just that we are already using the term 'protocol' to mean what 'interface' means in java

[16:05] <gaal> (more or less)

[16:05] <stevan> like in Objective C?

[16:05] <gaal> stevan: nope, that is only a *type*

[16:05] <stevan> gaal: ok,..

[16:06] * stevan flips some compiler switches in his wetware GHC

[16:06] <gaal> c_superClasses        :: [Class]      -- the c_superClasses field is of type "list of Class"

[16:06] <stevan> ahh MOP.hs clears it all up

[16:06] <gaal> If I ever design a font, stevan, I'll add a character dedicated to you

[16:07] <gaal> the semicomma:  ",.."

[16:07] <stevan> :)

[16:07] <stevan> kind of like a semicolon that has fallen over and it's brains spilt out

[16:07] *** Psyche^ joined
[16:08] <gaal> yes MOP.hs has the data and eventually the functionality, CapInternals just, uh, schemas

[16:08] <gaal> splillipses

[16:08] *** prefiks joined
[16:14] <stevan> gaal: re: nothingmuch's crazy "interface" idea,.. we have discussed the idea that everything can (on some level) act as a role

[16:14] <stevan> and that there are two kinds of role composition, implict and explicit

[16:15] <stevan> and when an attribute needs to create accessors, etc,.. it creates a role which is implicityly combined into the class

[16:15] *** Psyche^ is now known as StudiesInWords

[16:15] <stevan> and during that implict composition, the class actually pretend to be a role (Class does Role) so that conflicts can be caught and dealt with rather than just blowing up

[16:17] <stevan> it gets a little messier in the details, but it seems to be working out so far

[16:17] <stevan> anym??se, time to do some $work :(

[16:28] *** larsen joined
[16:30] *** marmic joined
[16:32] *** Aankh|Clone is now known as Aankhen``

[16:55] *** weinig|away is now known as weinig

[17:12] *** awwaiid_ is now known as awwaiid

[17:17] *** weinig joined
[17:19] <gaal> The Arrows paper remarks "[...] Luckily this does not matter: it is rare that we /want/ to write a parser which decides on the grammar to accept on the basis of previously parsed values".

[17:19] <gaal> Does this ultimately mean we can't use an Arrow-based parsing library for Perl 6?

[17:20] <gaal> (page 20 in the draft that I have)

[17:21] <gaal> bbiab &

[17:27] *** weinig is now known as weinig|bbl

[17:32] *** mdiep joined
[17:52] *** buetow joined
[17:53] *** chris2 joined
[18:09] *** ludan joined
[18:10] <ludan> re

[18:10] <ludan> re

[18:16] <StudiesInWords> kartoffelpue

[18:45] *** rindolf joined
[19:18] *** pjcj joined
[19:37] *** xinming_ joined
[19:54] *** xinming_ joined
[20:16] <lichtkind> StudiesInWords you mean Kartoffelpueree?

[20:22] *** xinming_ joined
[20:30] *** tup joined
[20:34] *** jmf joined
[20:41] *** xinming joined
[21:15] *** weinig joined
[21:37] *** lolage joined
[21:58] *** larsen joined
[21:58] *** ruz joined
[22:03] <nothingmuch> audreyt: ping

[22:04] <nothingmuch> how do you do <readmore> on typepad?

[22:05] <rindolf> Hi nothingmuch

[22:05] <rindolf> nothingmuch: what's up?

[22:05] <nothingmuch> hi rindolf

[22:05] <nothingmuch> not much

[22:05] *** prefiks left
[22:05] <nothingmuch> helping ann with summaries

[22:05] <rindolf> nothingmuch: nice.

[22:05] <nothingmuch> off to bed soon

[22:05] <rindolf> nothingmuch: is Ann the girl with the piggy tails?

[22:05] <rindolf> nothingmuch: OK.

[22:05] <nothingmuch> ann is the one you liked

[22:05] <rindolf> nothingmuch: whom I said was cute?

[22:05] <rindolf> nothingmuch: OK.

[22:05] <nothingmuch> yes

[22:05] <nothingmuch> she has no pig tails though

[22:06] <rindolf> nothingmuch: OK.

[22:07] <clkao> nothingmuch

[22:07] <clkao> moose

[22:07] <nothingmuch> hiya clkao

[22:07] <nothingmuch> whazaaaap

[22:07] <clkao> knothing much

[22:08] * nothingmuch hopes the tea will arrive tomorrow

[22:09] <clkao> any luick with the tracker?

[22:09] <nothingmuch> not yet

[22:09] <nothingmuch> i thiink the code is wrong

[22:09] <nothingmuch> but *shrug*

[22:09] <clkao> *odh*

[22:09] <clkao> oh well

[22:13] <rindolf> nothingmuch: are you on IRC tomorrow?

[22:13] <nothingmuch> rindolf: probably

[22:13] <rindolf> I'll need you guys help with a TPF grant request.

[22:13] <rindolf> "the help of you guys" even.

[22:14] <rindolf> For HTML::Widgets::NavMenu

[22:15] <nothingmuch> read ovid's tips

[22:15] <rindolf> http://use.perl.org/comments.pl?sid=32177

[22:15] <lambdabot> Title: Call for TPF Grant "Volunteers" : HTML-Widgets-NavMenu

[22:15] <rindolf> nothingmuch: yeah, I know.

[22:15] <rindolf> When is the deadline?

[22:15] <nothingmuch> i dunno

[22:15] * nothingmuch has never submitted a TPF grant

[22:16] <nothingmuch> i doubt i can help other than summarizing what Ovid said ;-)

[22:16] <clkao> are you trying to get a grant not for yoursefl?

[22:17] <nothingmuch> i don't think you can do that

[22:17] <rindolf> clkao: well, I'm now trying to get a grant *for* myself.

[22:17] <rindolf> clkao: my post to the blog was a grant proto-proposal.

[22:17] <rindolf> So other people can submit if they're looking for good idea.

[22:17] <rindolf> s

[22:19] *** lichtkind joined
[22:21] <lichtkind> ? $primzahlen = \(2,3,5,7,11,13,17,19,23);

[22:22] <lichtkind> is this valid perl6 ?

[22:25] <nothingmuch> night fols

[22:25] <nothingmuch> folks

[22:31] <svnbot6> r11936 | Darren_Duncan++ | ext/Set-Relation/ : updated Relation.pm so it compiles ; added 3 new subs/methods ; discovered parsefails for \!=:=, eqv, (probably \!=== and \!eqv too), and 'sub foo of bar ...'

[22:31] *** dduncan joined
[22:31] *** penk joined
[22:32] *** dduncan left
[22:35] <lichtkind> g night

[22:35] <lichtkind> ?eval $primzahlen = \(2,3,5,7,11,13,17,19,23);

[22:36] *** evalbot_11931 is now known as evalbot_11936

[22:36] <evalbot_11936> Error: Undeclared variable: "$primzahlen"

[22:36] <lichtkind> ?eval my $primzahlen = \(2,3,5,7,11,13,17,19,23);

[22:36] <evalbot_11936> [2, 3, 5, 7, 11, 13, 17, 19, 23]

[22:36] <lichtkind> ah thx

[22:51] *** penk joined
[23:04] *** theorbtwo joined
[23:05] *** Schmooster joined
[23:07] *** justatheory joined
[23:08] <jferrero> ?eval print "2+2"

[23:08] <evalbot_11936> OUTPUT[2+2] Bool::True

[23:08] *** wilx joined
[23:17] *** xinming_ joined
[23:36] *** fglock joined
