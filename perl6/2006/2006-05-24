[00:22] *** neoesque joined
[00:28] *** elmex joined
[00:29] *** Cryptic_K joined
[00:51] *** hikozaemon joined
[00:54] *** shachaf joined
[01:22] *** Quell joined
[01:32] *** jserv-- joined
[01:59] *** neoesque joined
[02:02] *** SamB joined
[02:21] *** weinig is now known as weinig|sleep

[02:25] *** rdice joined
[02:40] *** khisanth_ joined
[03:02] *** Khisanth joined
[03:02] *** sproingie joined
[03:09] *** khisanth_ joined
[03:12] *** khisanth_ is now known as Khisanth

[03:40] *** dromano joined
[03:42] *** Quell joined
[03:46] *** khisanth_ joined
[03:47] *** khisanth_ is now known as Khisanth

[03:58] *** dromano is now known as unobe

[04:01] *** unobe is now known as unobe_

[04:02] *** neoesque joined
[04:03] *** unobe_ is now known as uno_be

[04:05] *** uno_be is now known as unobe

[04:22] <unobe> hi everyone

[04:23] <unobe> i finally got pugs built with readline 5.1 on os x, and it seems to run smoothly even in interactive mode

[04:23] <unobe> but during the build, I got two build errors, both the same but on different files: "Build failed: 2816 at util/build_pugs.pl line 96."

[04:24] <unobe> I searched the archives for #perl6 and noticed that this issue has been discussed before

[04:25] <unobe> the reason why I bring it up again is because has_ghc_package('readline') in Makefile.PL, or the subsequent test on the same line, wasn't properly discovering that I had readline support for ghc

[04:27] <unobe> I ended up just copying and pasting "$ghc_flags .= ' -DPUGS_HAVE_READLINE '; # -package readline';" so that it's in the corresponding else {} block of Makefile.PL

[04:28] <unobe> has anyone else tried building pugs with readline support recently, or is there something else that is faulty with having readline built-in that I don't know about?

[04:39] *** bsb joined
[04:58] *** nperez joined
[05:08] *** neoesque joined
[05:10] *** bjoern_ joined
[05:25] *** Quell joined
[05:25] *** Ymmv joined
[06:10] *** Aankhen`` joined
[06:16] *** marmic joined
[06:52] *** SM_ax_ joined
[06:54] *** SM_ax_ left
[06:56] *** SM_ax joined
[07:07] *** iblechbot joined
[07:14] *** drrho joined
[07:24] <scw> Hurray~ SoC accepted!

[07:24] <rgs> woot

[07:41] *** bsb left
[07:45] *** rashakil joined
[07:52] *** elmex joined
[08:27] *** lisppaste3 joined
[08:38] *** malaire joined
[09:11] *** chris2 joined
[09:24] *** Ymmv joined
[09:42] <svnbot6> r10410 | scw++ | Pugs::Compiler::Rule

[09:42] <svnbot6> r10410 | scw++ |  * update compile_p6grammar.pl to work with :ratchet :sigspace

[09:46] *** lichtkind joined
[09:54] <clkao> scw: t/basic....Not a CODE reference at t/basic.t line 8.

[10:01] *** elmex joined
[10:07] <clkao> scw: btw, it's really fast now.  can you see if we can compile the signature ruiles by aufrank?

[10:07] <clkao> (when you have time)

[10:41] *** SM_ax joined
[10:42] *** szbalint joined
[10:57] *** SM_ax joined
[11:13] *** avar joined
[11:15] *** iblechbot joined
[11:24] *** weinig|sleep is now known as weinig

[11:46] *** ruoso joined
[11:47] <meppl> gugu

[11:53] *** avar joined
[12:00] *** neoesque joined
[12:01] *** jsiracusa joined
[12:16] *** loumz joined
[12:20] *** Limbic_Region joined
[12:22] <svnbot6> r10411 | szabgab++ | test slurp in list context

[12:22] *** bjoern_ joined
[12:24] <cognominal> svk-- # agacant ces numeros de revisions differents en local et en remote

[12:24] <cognominal> oops

[12:24] <cognominal> ETOOMANYOPENCHANNELS

[12:25] <szbalint> Happened with me too yesterday. :)

[12:25] *** loumz_ joined
[12:27] *** loumz_ is now known as loumz

[12:37] <svnbot6> r10412 | szabgab++ | more tests for mixed_multi_dimensional data structures

[12:44] *** jsiracusa joined
[12:46] *** iblechbot joined
[12:49] *** gabor529 joined
[12:49] <gabor529> good afternoon

[12:50] <gabor529> how can I use getc on STDIN ?

[12:51] <theorbtwo> In perl 6?

[12:54] <integral> $*IN.getc?

[12:54] <integral> (but what does getc get?  a codepoint?  multiple codepoints (eg. combining chars)?)

[12:54] <cognominal> I have trouble to get used to these new names for global variables

[12:55] <integral> cognominal: pronounce the * as STD?

[12:55] <cognominal> good mnemonic indeed

[13:09] *** fglock joined
[13:11] <gabor529> integral: thanks

[13:11] <integral> np

[13:13] <gabor529> can I somehow trun off the automatic echoin on the screen while typing on command line?

[13:13] <gabor529> s/command line/*IN/

[13:14] <gabor529> like what one should do while accepting a password on STDIN

[13:14] *** Ymmv joined
[13:15] <integral> see perldoc -q password for perl5

[13:15] <integral> that covers what to do with stty(1),  just do the same :)

[13:15] <integral> (or write Term::readKey for perl6 ;-)

[13:17] *** loumz left
[13:29] *** Southen_ joined
[13:31] *** particle_ joined
[13:31] <particle_> ?eval say abs -3.3;

[13:31] <evalbot_10383> OUTPUT[3.3 ] Bool::True

[13:32] <particle_> i'm reading S29 and implementing builtins

[13:32] <particle_> it seems some math ops are implemented in Math::Basic, and / or Num

[13:33] <particle_> are they available in the root namespace as well? (imported by default or something?)

[13:37] *** iblechbot_ joined
[13:37] *** weinig is now known as weinig|out

[13:45] *** marmic joined
[13:58] <svnbot6> r10414 | fglock++ | Pugs::Compiler::Rule - CPAN version 0.04

[14:00] *** jserv-- joined
[14:01] <clkao> fglock: you know miniperl6 is failing tests with new pcr?

[14:01] <clkao> cognominal: what happened to svk?

[14:02] <cognominal> nothing, I just happen to dislike message with remote revision numbers...

[14:03] <cognominal> this is a minor grief :)

[14:09] <gabor529> is there a way to list all the available functions of P6 from within P6 ?

[14:10] *** Southen joined
[14:11] <PerlJam> There will be.  I'm not sure if it's implemented anywhere though (or even specced fully)

[14:14] <fglock> clkao: looking

[14:23] *** kane_ joined
[14:23] <Juerd> gabor529: When the time comes that you're actually going to do this, it helps to have a clear definition of "function".

[14:25] <svnbot6> r10415 | fglock++ | compile_p6grammar.pl - added "use Pugs::Runtime::Match::Ratchet;"

[14:27] *** cdpruden joined
[14:28] *** neoesque joined
[14:29] <fglock> clkao: I think it should be using 'token' instead of 'rule'

[14:30] <svnbot6> r10416 | szabgab++ | Very simple shell

[14:30] *** Southen_ joined
[14:31] <gabor529> Juerd: I would need that list for the shell toy I just committed in my other self

[14:34] *** kane_ left
[14:38] *** penk joined
[14:39] *** pen1 joined
[14:39] *** penk joined
[14:42] *** kane_ joined
[14:47] *** Southen joined
[14:49] *** jabbot joined
[14:50] *** notThis joined
[14:54] <svnbot6> r10417 | fglock++ | compile_p6grammar.pl - changed switches to { s => 0, ratchet => 0 } in order

[14:54] <svnbot6> r10417 | fglock++ | to keep MiniPerl6.grammar running. The compilation of MiniPerl6.grammar

[14:54] <svnbot6> r10417 | fglock++ | needs further debugging.

[14:55] <clkao> oh no! is it going to be slow like hell again

[14:55] <clkao> well it's actually still fast

[14:56] *** Limbic_Region joined
[14:56] <fglock> clkao: grammars are hard to debug :(

[14:57] <Kattana> They are :(

[14:59] *** Qiang joined
[14:59] <Limbic_Region> fglock - what are you trying to say?  (freedom of speech)-- ?

[15:00] <fglock> uh? :)

[15:00] <Limbic_Region> constrained simple grammars are easier to debug so let's just not give anyone any freedom to make our lives easier

[15:01] *** rgs joined
[15:01] <fglock> no, it's just that it takes some time to get it right

[15:01] <Limbic_Region> sorry, my humor probably is a bit off today - (working inside government bs)--

[15:01] <Limbic_Region> I didn't mean to imply that you were suggesting simplification

[15:02] <fglock> so sometimes one have to make a temporary hack to keep things working until they are fixed for real

[15:02] <fglock> np

[15:15] <svnbot6> r10419 | szabgab++ | examples/shell.p6 - improved tab completition

[15:23] *** fglock left
[15:24] *** Southen_ joined
[15:27] <gabor529> if eval "command" fails, where can I get the error message (what was $@ in P5) ?

[15:30] *** particle_ joined
[15:39] <scw> clkao: since the :sigspace is default on now

[15:39] <scw> clkao: I fixed compile_p6grammar.pl this afternoon and will fix MiniPerl6.grammar when I have time

[15:44] *** notThis left
[15:52] *** weinig|out is now known as weinig

[15:52] *** bpederse joined
[16:06] *** elmex joined
[16:07] *** aufrank joined
[16:08] *** mj41_ joined
[16:42] *** justatheory joined
[16:53] *** kattana_ joined
[17:00] * particle_ notes that the Math::Trig section of S29  mentions a :$base adverb, which should probably read :base

[17:01] <particle_> does this syntax look funny?

[17:01] <particle_>  our Num multi Num::func ( Num  $x            : :$base = 'radians' )

[17:01] <particle_>  our Num multi Math::Trig::func ( Num $x, :$base = 'radians' )

[17:05] <particle_> fixed in S29.

[17:05] <svnbot6> r10420 | particle++ | [S29]: s/\$base/base/g in Math::Trig::func definitions

[17:12] *** ruoso joined
[17:16] *** fglock joined
[17:19] *** penk joined
[17:21] *** SubStack joined
[17:23] *** szabgab joined
[17:26] *** mj41_ joined
[17:28] <fglock> scw: you can use 'token' instead of 'rule' - token doesn't default to :sigspace (token needs to be implemented in compile_p6grammar.pl)

[17:56] <svnbot6> r10421 | particle++ | [S29]: revert Math::Trig::func definitions

[17:56] <svnbot6> r10421 | particle++ | these were correct; my understanding of the syntax was incomplete.

[17:56] <svnbot6> r10421 | particle++ | :$base expands to :base<$base>

[17:56] <svnbot6> r10421 | particle++ | that's only good when your variable is actually named $base,

[17:56] <svnbot6> r10421 | particle++ | but it's a complaint for another synopsis

[17:59] *** Aankh|Clone joined
[18:17] *** iblechbot joined
[18:18] *** DaGo joined
[18:18] *** Eimi left
[18:34] *** vel joined
[18:40] *** FurnaceBoy joined
[19:13] *** weinig is now known as weinig|away

[19:13] *** aufrank` joined
[19:14] <szbalint> hey aufrank!

[19:15] <szbalint> How did your SoC application go? :)

[19:18] <aufrank`> no good for me

[19:18] <aufrank`> how bout you?

[19:18] * aufrank` wishes the full list were posted so he could congratulate the lucky ones

[19:19] * particle_ wonders if any list has been posted

[19:19] <szbalint> I got accepted.

[19:19] <szbalint> Not yet afaik.

[19:19] <szbalint> Sorry to hear that aufrank :\

[19:19] <PerlJam> szbalint: what did you apply to do?

[19:20] <szbalint> Re(designing|writing) DBI in Perl 6.

[19:20] *** aufrank` is now known as aufrank

[19:21] *** m joined
[19:21] <aufrank> szbalint: good luck with it :)

[19:21] <szbalint> thanks!

[19:21] <aufrank> where are you at school?

[19:22] <szbalint> ELTE (Eotvos Lorand Tudomanyegyetem), Budapest

[19:24] <aufrank> I may have seen a talk recently by someone from your institution, I think

[19:24] <szbalint> (Eotvos Lorand University of Natural Sciences is the english name)

[19:24] <szbalint> oh really? Nice :)

[19:24] *** larsen joined
[19:25] <PerlJam> szbalint++ that's a really good project to work on.

[19:26] <szbalint> I agree. Also, Tim Bunce seems to be a really nice person to work with!

[19:27] <szbalint> TPF only has 5 slots this year unfortunately so I bet a lot of good projects didn't get approved...

[19:27] <leo> szbalint: looks like you got #5 slot ;)

[19:27] <particle_> wow, only 5? i guess soc got so popular, there look like many more sponsors this year

[19:28] * aufrank hopes fglock got approved

[19:29] <leo> aufrank: doesn't seem so, sorry - but there are no official new yet

[19:29] <leo> news even

[19:30] <szbalint> leo: really? :)

[19:31] <aufrank> szbalint: yeah, turns out he was from there.  Mate Langyel.  He's at the gatsby computational neuroscience unit at University College London now.

[19:31] <aufrank> he did your institution proud-- it was a good talk :)

[19:31] <szbalint> cool :)

[19:31] <leo> I presume aufrank got a google mail and szbalint didn't

[19:32] <szbalint> I did get a congratulations mail, but unfortunately there was an error at Google

[19:32] <szbalint> they sent out 1800 "you're accepted" emails

[19:32] <integral> google-- # webapps aren't their speciality ...

[19:32] <szbalint> and had to retract some of them later.

[19:32] <szbalint> well, most of them.

[19:33] <aufrank> I got an "thanks but no thanks" email from google, yeah

[19:33] <szbalint> So the only way to know for sure is to check the site.

[19:33] <fglock> aufrank: I got that one too

[19:33] <leo> nope - they didn't update organization sites yet :-(

[19:34] <integral> anyone know who got the other tpf slots? I've spotted two others (and am doing POE myself)

[19:34] <leo> fglock was #7, aufrank #8 in last ranking I can see

[19:34] <aufrank> integral++ #congrats!

[19:35] <aufrank> so szbalint is doing DBI in P6, and integral is doing POE

[19:35] <aufrank> who's the third you've spotted integral?

[19:35] * integral goes to look up his logs

[19:36] <integral> someone called "comet".  saw them over on slashnet, but didn't get what they were doing

[19:37] <leo> I don't hink that POE is in the accepted part of the list

[19:37] <szbalint> yeah well I told you I'm not from the .uk integral :)

[19:37] <integral> oh!

[19:37] <integral> leo: o_O

[19:37] <szbalint> so you counted me twice :P

[19:38] <leo> # this is all not official yet - ignore me - just romors

[19:38] <aufrank> leo is tell tales out of school!

[19:38] <aufrank> s/tell/telling/

[19:40] <aufrank> leo (or anyone):  any chance we'll get to see the comments that TPF people made on our applications?

[19:41] <aufrank> it'd be nice to see the criticism

[19:42] <PerlJam> "Dude...this proposal *sucks*!"  :-)

[19:42] <leo> I don't know how anything about TPF policy WRT comments

[19:42] <aufrank> well, the constructive kind, anyway ;)

[19:42] <szbalint> sorry integral for causing confusion but I just like to keep these two sides separate :)

[19:43] <integral> np,  I haven't plenty of nicks too ;-)

[19:44] *** shachaf_ joined
[19:45] <integral> just got someone called "OldeFortran" over on slashnet saying they're TPF SoC accepted

[19:49] <aufrank> fortran on parrot?  ;)

[19:50] *** sri_ joined
[19:50] <integral> the MAD round tripping task they say

[19:50] <aufrank> well tell 'em to get in here ;)

[19:50] <szbalint> :P

[19:52] *** fglock joined
[19:56] <szabgab> szbalint: congrat for the Soc!

[19:56] <szbalint> thanks :)

[19:56] *** OldeFortran joined
[19:57] <aufrank> man, I assumed that was another one of your nicks, szbalint

[19:57] <aufrank> you're blowing my mind here

[19:57] <aufrank> unless you're just congratulating yourself on behalf of an alter ego

[19:57] <szbalint> lol

[19:57] <aufrank> in which case, get a room ;)

[19:57] <szbalint> aufrank: haha! payback for audreyt - aufrank :)

[19:58] <aufrank> :P

[19:58] *** justatheory joined
[19:59] <szbalint> For the record I don't have many nicks. :)

[19:59] <szabgab> aufrank: no, it is not szbalint

[19:59] <szabgab> but we use the same hungarian notation

[19:59] *** FurnaceBoy is now known as FB|afk

[20:00] <aufrank> he does study in Budapest, I guess

[20:01] <leo> hi Gabor btw ;)

[20:01] <szabgab> hi leo

[20:01] <leo> how goes?

[20:02] <szabgab> lots of work, no time for HPW organization nor even to go to YAPCs, what about you ?

[20:02] <leo> no HPW this year?

[20:03] <szabgab> I won't help in it for sure, Andras might do something but I think he is full of work too

[20:03] *** shachaf joined
[20:03] <szabgab> szbalint: will you organize it ?

[20:03] <leo> I'm fine (again) - after some teeth troubles

[20:04] <ingy> ho-la

[20:04] <szbalint> szabgab: well, I think there is interest to do so on the mailinglist, so I could certainly do something with András

[20:05] <szabgab> BTW can I somehow create a scope (for variables) that remains intact between two eval calls ?

[20:05] <aufrank> hey ingy

[20:05] <szabgab> so eval "my $x = 42"; eval "say $x" will work ?

[20:05] <aufrank> you back stateside yet?

[20:06] <szabgab> szbalint: yeah, some people started to talk about it, I won't have time to do anything this year

[20:06] <ingy> hi aufrank

[20:07] <szbalint> szabgab: I think András was full time working before too. I'll help out :)

[20:10] *** weinig|away is now known as weinig

[20:12] <fglock> szabgab: { my $x; eval "\$x = 42"; eval "say \$x" }

[20:13] <szabgab> fglock: yes, but I am trying to write a shell, so I don't know the variable names upfront

[20:15] <szabgab> examples/shell.p6 can now accept commands and execute but it will forget my variables :-( not a good approach

[20:16] <fglock> you should somehow be able to do this using continuations

[20:17] <szabgab> fglock: ah, now I might have a reason to learn them, good, thanks

[20:18] <fglock> you can call your prompt from inside the eval - so that the next eval will be in scope: eval "\$x = 42;" ~ " user_prompt();"

[20:19] <fglock> so the next eval will be executed from "inside" the previous one

[20:20] <szabgab> that would mean to open up man many evals, rioght ?

[20:21] <szabgab> ... many, many evals, right ?

[20:21] <fglock> yes

[20:22] <szabgab> I can try that, though I don't really like the solution

[20:22] *** ludan joined
[20:22] <ludan> hi

[20:25] <aufrank> hello

[20:33] <fglock> szabgab: I've got a working version in P5 :)

[20:34] *** iblechbot joined
[20:34] <pasteling> "fglock" at 200.17.89.80 pasted "perl shell" (5 lines, 123B) at http://sial.org/pbot/17328

[20:36] <pasteling> "fglock" at 200.17.89.80 pasted "perl shell - simplified" (3 lines, 91B) at http://sial.org/pbot/17329

[20:37] *** Limbic_Region joined
[20:38] <ruoso> fglock, doesn't this create a stack for the return value of the outer-most eval?

[20:38] <Limbic_Region> anyone know how well recent Parrot compiles on Win32 using mingw?

[20:39] <particle_> l_r, i believe it compiles fine.

[20:39] * Limbic_Region got a shiny new machine today and is once again able to build Pugs at work

[20:39] <Limbic_Region> cool - if things go well, I can even link against Parrot then

[20:39] <particle_> l_r: there were some mingw patches for win a little while ago

[20:39] <particle_> so somebody's watching that space

[20:40] <Limbic_Region> cool beaners - moldy chicken

[20:40] * Limbic_Region is up to 2.8ghz and 512mb of memory

[20:40] * particle_ runs off for some errands &

[20:40] <aufrank> fancy, Limbic_Region

[20:41] <fglock> ruoso: yes, but it is necessary to keep 'my' working between evals

[20:42] <szabgab> fglock: nice, now let me try to somehow put it in my code

[20:43] <ruoso> fglock++

[20:44] <ruoso> heh...

[20:44] * ruoso just run in the shell: my $a = 1; my $b = 2; oops, the shell is out...

[20:45] <szabgab> my $b = '; print ">> "; my $s = =$*IN; eval $s ~ $b; '; eval $b;

[20:45] <szabgab> this seem to be working in pugs

[20:48] <aufrank> neat :)

[20:48] <fglock> ruoso: there seems to be a problem specific to '$b' in Perl 5

[20:49] <ruoso> heh

[20:49] <fglock> print $@ shows 'Can't use string ("1") as a symbol ref while "strict refs" in use' - but this only happens with '$b'

[20:50] <ruoso> fglock, duh... you do eval '$b'... but $b now is "1" and no more "print ">>"; ..."

[20:50] <fglock> oh, it's because $b is the main program :)

[20:50] <fglock> heh

[20:50] <ruoso> heh

[20:50] <ruoso> fglock++

[20:50] <ruoso> heh

[20:54] <szabgab> great, I could add it to examples/shell.p6 as well, need to clean it up a bit

[20:55] <fglock> szabgab: cool

[21:02] *** FB|afk is now known as FurnaceBoy

[21:04] *** fglock left
[21:04] <svnbot6> r10422 | szabgab++ | examples/shell.p6 - recoursive eval to keep variable scope fglock++

[21:04] *** fglock joined
[21:08] *** coumbes joined
[21:40] *** notThis joined
[21:41] <notThis> Has anyone looked at converting Java interface definitions into (roughly) corresponding Perl6?

[21:44] <aufrank> I don't know Java

[21:44] <aufrank> but when it comes up it's generally in the form of "Roles could be used like Java interfaces, and other ways too"

[21:54] *** jsiracusa joined
[21:56] *** rdice joined
[22:21] *** beppu joined
[22:29] *** froh-doh joined
[23:07] *** rashakil_ joined
[23:16] *** ludan left
[23:25] *** Khisanth joined
[23:35] *** Quell joined
[23:53] *** coumbes joined
