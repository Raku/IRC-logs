[00:12] *** pdcawley joined
[00:20] *** brentdax joined
[00:22] *** pdcawley joined
[00:36] *** Cryptic_K joined
[00:37] *** Zobbo joined
[00:41] *** athomason joined
[00:43] *** Zobbo left
[00:44] *** xinming joined
[01:07] <dduncan> is sigwinch and stuff a new feature in readline?

[01:07] *** putter joined
[01:07] <dduncan> perhaps audreyt and some of you have a newer readline version than I do

[01:08] <putter> hi dduncan.  a fresh r8825 compiled for me.  checking libreadline...

[01:10] <dduncan> I just reverted my Pugs.Shell to r8824, and it now compiles without trouble

[01:11] <putter> i'm at 4.3, (hmm, and segfaulting :/  ah well - os upgrade coming soon).

[01:11] <dduncan> so the r8825 is making some assumption that isn't true for my system

[01:11] <putter> what was one of the undefined symbols?

[01:11] <dduncan> backlog by about 3 hours

[01:11] <putter> looking...

[01:13] <dduncan> see http://colabti.de/irclogger/irclogger_log/perl6?date=2006-01-28,Sat&sel=357#l607

[01:13] *** xinming1983 joined
[01:16] <putter> hmm, rl_catch_signals is just an int.  is it defined in your /usr/include/readline/readline.h or equivalent?

[01:23] <putter> the next question will be, is it defined in your libreadline.  eg, locate libreadline; then  strings /usr/lib/libreadline.4.2.so |grep rl_catch_signals   or some such.

[01:28] <putter> it looks like rl_catch_signals is an 4.2'ism  - googling turns up config files which test for it separately...

[01:28] <putter> exploring further...

[01:28] <dduncan> my /usr/include/readline/readline.h doesn't have them

[01:29] <dduncan> mine is $NetBSD: readline.h,v 1.11 2004/01/17 17:57:40 christos Exp $, copyright 1997

[01:30] <brentdax> Rules are segfaulting right now.  Expected or no?

[01:34] <dduncan> from my reading on the 'net, it seems that 10.4 is the first Mac OS X version to bundle readline, but online reports say it is buggy ... also, this library is used by a number of third party apps

[01:35] <dduncan> see, for example, http://www.justatheory.com/computers/databases/postgresql/howto_avoid_tigers_readline.html

[01:35] <avar> olofyrla:~ avar$ locate readline.h

[01:35] <avar> olofyrla:~ avar$ 

[01:35] <avar> you mean bundled with the 10.4 dev tools I presume?

[01:35] <dduncan> or that

[01:36] <dduncan> I have 10.4.4, plus the devtools 2.0

[01:37] <dduncan> it says XCode is 2.1, though I don't use that program ... mainly I installed the devtools to get cc and stuff

[01:38] <avar> I love how they make you sign up for their developer network just to brag about them having 10 million developers or something

[01:38] <avar> ..when you just need to dl a C compiler

[01:39] <dduncan> in my case, the devtools were bundled with the retail Tiger dve

[01:39] <dduncan> dvd

[01:39] <avar> It's like those "vote for us to download" w4r3z websites I used to go to before I hit puberty

[01:39] <dduncan> I think the devtools were always bundled with Mac OS X, so you don't have to download them

[01:40] <dduncan> unless you want versions newer than came with the os

[01:40] <avar> or I don't want to go digging around for some CD

[01:40] <dduncan> I just install them when I install the OS and be done with it

[01:41] <avar> I just throw the danm thing away and download debian, but each to his own I guess;)

[01:44] <putter> dduncan: ok, so we're in threads (blech;) plus readline land.  hmm.  do we have the equivalent of a ./configure --without-readline option?

[01:45] <dduncan> I don't exactly know

[01:45] <dduncan> I know that some programs do

[01:45] <dduncan> and even the file in question ...

[01:45] <dduncan> has an ifdef regarding readline

[01:45] <putter> that would be the fastest way to get you unstuck (well, no, the fastest would be to comment out Readline.setCatchSignals and the next line in Pugs/Shell.hs. ;)

[01:45] <dduncan> Shell that is

[01:45] *** Limbic_Region joined
[01:46] <dduncan> I just reverted Shell.hs, and that unstuck me

[01:46] <dduncan> make is now successfully done

[01:47] *** luqui joined
[01:47] <putter> yeah.  we dont (--wo-rl).  Makefile.PL just checks has_ghc_package('readline') and based on that -DPUGS_HAVE_READLINE.  though easy enough to add somthing if we go down that path.  let's see...

[01:48] <dduncan> but Shell.hs and/or some pugs config file will have to be updated to account for Tiger having a readline, but that is too old or too wrong

[01:48] *** xinming joined
[01:49] <dduncan> hm, there is something else I'll have to fix on my system too ...

[01:50] <dduncan> the pugs tests are running about 3X slow again ...

[01:51] <luqui> dduncan, when you start pugs shell, does it start instantly, or does it spend some time loading the prelude

[01:51] <dduncan> just a minute

[01:52] <dduncan> that would be the problem

[01:52] <dduncan> oddly enough, lately running the pugs shell also causes a liteny of beeps

[01:53] <dduncan> anyway, the prelude thing is easy enough to fix

[01:56] <putter> dduncan: do you have some way of checking the version of your libreadline?  locate libreadline and see if it's called libreadline.N.N.so?

[01:56] <dduncan> one minute ...

[01:56] <dduncan> fyi, I did say what the top line of my readline.h was

[01:56] * putter hypothesizes its 4.0 <= rev < 4.2 ... ;)

[01:57] <putter> ?

[01:58] <dduncan> in usr/lib it says libreadline.dylib without a version ... looking further

[02:01] <dduncan> that file is a softlink pointing to libedit.2.dylib

[02:01] <dduncan> implying it may not be a real readline

[02:01] <putter> actually, if you found readline.h, it should have a RL_READLINE_VERSION in it..

[02:02] <dduncan> it doesn't

[02:02] <dduncan> it says /*	$NetBSD: readline.h,v 1.11 2004/01/17 17:57:40 christos Exp $	*/

[02:02] <dduncan>  at the top

[02:02] <dduncan> anyway, I have to go for a bit

[02:04] <pasteling> "dduncan" at 24.108.164.7 pasted "my whole /usr/include/readline/readline.h" (190 lines, 6.5K) at http://sial.org/pbot/15652

[02:05] <dduncan> maybe that will help you

[02:05] <dduncan> I have to go to dinner now

[02:05] <putter> mmm, food.  ;)  cheers &

[02:07] *** drbean joined
[02:19] *** xinming1983 joined
[02:21] <putter> dduncan: I assume you are _not_ using darwinports?  (that would raise some, apparently distinct, issues)

[02:25] <putter> dduncan: did you compile ghc yourself, or use the binary from http://www.haskell.org/ghc/download_ghc_641.html ?

[02:27] <putter> the latter explicitly requires libreadline.5.0.dylib.  as for the former...

[02:28] *** sub_chick joined
[02:30] <putter> it's currently looking like tiger uses a netbsd readline.h (thanks to your paste); that netbsd maintains its own readline.h, and is not very systematic about it; tiger's is old, pre-dating the addition of rl_catch_signals ( http://archive.netbsd.se/?ml=netbsd-current-users&a=2005-04&m=868285 ); 

[02:32] <putter> ghc uses a simple "is it readline 4" ifdef (libraries/readline/System/Console/Readline.hsc); soo...

[02:36] <putter> my working hypothesis is ghc is using a test which works fine if gnu readline has been directly installed, but not in the face of the complexity on tiger.  pugs simply uses ghc's conclusion (Makefile.PL's if(has_ghc_package('readline'))), so we lose.

[02:38] <putter> the core problem for pugs is we don't have a way to ask if ghc has a _working_ readline.

[02:43] *** xinming1983 joined
[02:44] <putter> so it's in the log, the key line from the paste is /*	$NetBSD: readline.h,v 1.11 2004/01/17 17:57:40 christos Exp $	*/  

[02:44] *** BillN1VUX joined
[02:44] <dduncan> putter,

[02:45] <dduncan> I'm using the precompiled ghc from GHC-6.4.1.pkg.zip, linked to on the page you mentioned

[02:45] <dduncan> I did not explicitly install libreadline first, though

[02:46] <dduncan> I think I just assumed it was working when GHC executed and pugs otherwise worked, up to today

[02:47] <dduncan> so now I just have to figure out where to get readline ...

[02:48] <putter> right.  ok, I propose: add a PUGS_DONT_USE_READLINE environment variable check to Makefile.PL, and mention it in a tiger-specific INSTALL section.  the alternative is just to require tiger folks to install readline, and fail if they havent.

[02:48] <dduncan> fyi, I was going to install the newer readline

[02:48] <dduncan> as the way to fix the problem

[02:49] <dduncan> assuming that doing so doesn't break something in OS X that depends on broken behaviour of the bundled one

[02:49] <putter> right. :)  I guess I've moved on to the "fix the install problem dduncan turned up". ;)

[02:50] <putter> how much of a barrier to entry is installing readline for the "average user who wants to run pugs"?

[02:50] <dduncan> well, the options are either to add that switch, or make the newer readline a hard dependency of running pugs

[02:51] *** Shillo joined
[02:51] <putter> right.   what do you think?

[02:51] <dduncan> hard to say

[02:51] <dduncan> right now, I'm going to try and install readline, and see how difficult or not that is

[02:51] <dduncan> I would probably need to install it anyway, since some other things like PostgreSQL would require it

[02:52] <putter> ok, I'll add the flag.  its localized enough cruft.  the mere fact you are worrying about it suggests its a nontrivial item.

[02:52] <dduncan> I know that readline is used by many things

[02:52] <dduncan> but to be honest, from a user's point of view ...

[02:53] <dduncan> I would prefer to install as little as possible in order to run pugs

[02:54] <Shillo> dduncan: Plus, readline is strict-GPL. Kinda problem if you want something to be LGPL

[02:54] <Shillo> ... or artistic.

[02:54] <dduncan> would it be simpler for pugs to default to not using readline, and only use it if an environment variable is set?

[02:55] <dduncan> that way, saavy users do a bit of extra work to gain extra functionality that most people don't need

[02:55] <putter> on the other hand, I could just read more carefully.  Makefile.PL is already compiling a little test script to see if readline really works.  I'll just add the signal commands to the test script.  I'd re-underline the "note to self" which says "avoid tunnel vision when debugging", but that paragraph is already worn thru with underlines.  sigh.

[02:56] <dduncan> and non-saavy users can do as little as possible

[02:56] <dduncan> but if as you say there is a way to test this in Makefile.PL, then great, do that

[02:56] <dduncan> and in fact I *won't* go to the trouble to upgrade readline

[02:57] <dduncan> I assume your test will say that if readline is broken, then it will be as if it didn't exist at all

[02:57] <dduncan> I will wait for your commit ...

[03:06] <putter> dduncan: thanks.  I was just about to (belatedly) suggest that :)    edit done, testing...

[03:12] *** vytautas left
[03:17] *** lypanov left
[03:18] <putter> drat!  I forgot to end the "was taking far to long to write" log entry with dduncan++.

[03:18] <putter> Belatedly, dduncan++.  Very.

[03:18] <svnbot6> r8826 | putter++ | Makefile.PL: The embedded haskell test program, which checks whether readline really works, now includes calls with the newly required (r8825) setCatchSignals and setCatchSigwinch calls.

[03:18] <svnbot6> r8826 | putter++ | The old test was passing on Mac OS X 10.4 Tiger, which doesn't support the new calls.

[03:18] <svnbot6> r8826 | putter++ | A result of all these changes is the average Tiger user, who hasn't installed readline herself (installation is suggested by the ghc download page), will no longer get the readline version of pugs.

[03:20] <putter> dduncan: patch is in.  if you could check whether it properly fails, that would be great.  Makefile.PL should run as usual, and the resulting makefile should _not_ have -DPUGS_HAVE_READLINE in it.

[03:20] <dduncan> I am downloading it now, but first I just changed my Shell.hs to the newest version

[03:21] <putter> ah, good idea

[03:22] <dduncan> fyi, rerunning the Makefile.PL does not spit out the "not installed" message

[03:22] * putter thought mac os x was a linux.  what's it doing with a netbsd readline?  does it use the netbst signal system?  curious...

[03:23] <dduncan> Mac OS X is derived from BSD, not Linux

[03:23] <dduncan> its in the BSD family

[03:23] <dduncan> by way of NextStep + OpenStep

[03:23] <putter> "not installed" message?  is that something which was there previously?

[03:23] <putter> ah.

[03:24] <dduncan> what I mean is, it doesn't say disabled

[03:24] <dduncan> oh wait, yes it does

[03:24] <putter> oh.  that's not good.  oh, it does.  whew.

[03:24] <dduncan> for some reason I expected it to come out before all the Writing makefile for ext/foo

[03:24] <dduncan> but it came out after

[03:25] <putter> it looks like Makefile.PL collects the warnings in a @warn list.

[03:25] <dduncan> I've got the simplest possible pugs setup ... all optional extensions are turned off

[03:26] <dduncan> no linking to haskell extensions, no readline, no perl 5, no parrot

[03:26] <dduncan> currently on 'make'

[03:27] <putter> well, you probably had readline before.  now you dont. :/

[03:27] <putter> does the Makefile contain -DPUGS_HAVE_READLINE ?

[03:27] <dduncan> I only switched to Tiger 7 days ago, so I'm used to not having it

[03:27] <putter> ah

[03:27] <dduncan> looking

[03:28] <putter> nice to know NextStep wasn't a complete deadend.  nice system.

[03:28] <dduncan> the text 'readline' is not in the makefile at all

[03:28] <putter> yay

[03:28] <dduncan> yes, Mac OS X has lots of NextStep goodness

[03:29] <Shillo> G'night, all!

[03:29] <putter> good night &

[03:29] *** revdiablo joined
[03:29] <dduncan> the way that all native applications and frameworks are bundles of files, folders etc

[03:29] <dduncan> the whole 'Cocoa' development api

[03:29] <dduncan> which is the whole object-oriented api that NextStep started

[03:29] <dduncan> in Objective-C

[03:30] <putter> ah right

[03:30] <dduncan> of course, what pugs and ghc is working with is beneath that, using the BSD api of mac os x, which is sideways of Cocoa

[03:31] <dduncan> make has successfully compiled Pugs.Shell

[03:31] <putter> woot.

[03:31] <dduncan> thank you for your help

[03:31] <putter> oh, thanks for finding the bug!

[03:32] <putter> and debugging the bug!  (that sounds odd)

[03:32] <putter> if you debug a bug, what have you got?

[03:33] <putter> dduncan: should we keep all the cruft in INSTALL re "until 6.4.1 comes out", or simply say, like x64_64, mac requires 6.4.1 ?

[03:34] <dduncan> I'm using 6.4.1

[03:34] <putter> s/mac/gcc4.0 and mac/

[03:34] <dduncan> and have been since september

[03:34] <dduncan> apparently 6.4.1 is the first version that works properly with Tiger

[03:35] <dduncan> 6.2.2 and 6.4.0 work with Panther

[03:35] <dduncan> which is where I started

[03:36] <putter> right.  sorry - when working the last problem, I noticed INSTALL was still crufty, providing "until 6.4.1 comes out" workarounds.  which should now no longer be needed.  I'm wondering if I can just rip it out, whether you think it still has some value, and should say "6.4.1 recommended.  But if you don't, ...<existing cruft>"

[03:37] <dduncan> 6.4.1 has been out for 4 full months now ... it should be a hard requirement for pugs, such that the Makefile.PL refuses to proceed without it

[03:38] <dduncan> we ditched 6.2.x when keeping that was holding us back, we can do the same with 6.4.0

[03:39] <putter> ok, editing...

[03:41] <putter> oh, wait.  a hard, universal, requirement?  hmm.

[03:41] * putter wonders if that's an audreyt call... eh, I'll do it as a separate patch.

[03:44] *** BillN1VUX left
[03:44] <svnbot6> r8827 | putter++ | INSTALL: Simplified "until GHC 6.4.1 comes out" caveats for gcc 4.0.  Now that 6.4.1 has been out for a while.

[03:45] <dduncan> well, what good reason would someone install 6.4.0 and not 6.4.1?

[03:45] <dduncan> unlike perl 5, ghc is usually not bundled with a system

[03:45] <dduncan> people have to install it anyway

[03:45] <obra> often people install packaged software

[03:45] <dduncan> yes

[03:46] <dduncan> and ghc 6.4.1 has been in package form for many months

[03:46] <obra> And, well, packages aren't 100% up to date.

[03:46] <obra> for every platform?

[03:46] <obra> Don't be too cavalier with forcing people to latest versions.

[03:46] <dduncan> I would think that any platform having a 6.4.0 package also has a 6.4.1 package

[03:46] <obra> I'd check that assumption before possibly freezing people out

[03:47] <dduncan> we already froze 6.2.x out

[03:47] <obra> Bring it up on the mailinglist and see if it'll screw people over?

[03:48] <dduncan> okay

[03:48] <obra> Cool

[03:52] <putter> ok, I'll sit on the Makefile.PL patch.  Both it and INSTALL would be simplified by making 6.4.1 a hard dependency.

[03:52] <putter> audreyt: thoughts?

[03:53] <dduncan> okay, the p6c message is away

[03:53] *** SamB joined
[03:53] <putter> dduncan++

[03:53] <putter> Thanks, that was a fun exercise. :)

[03:54] <dduncan> putter, if you want, you can send a reply to p6c saying you already have a patch ready and are waiting for the good word

[03:54] *** Cryptic_K joined
[03:55] <dduncan> putter, is 8827 just documentation/comment changes?

[03:55] <putter> na, it's pretty trivial.  besides, separating policy from mechanism is always a good call.  this is a policy question.

[03:55] <putter> yes

[03:56] <putter> I removed the notes on how to jump through hoops until 6.4.1 is available.

[03:59] <putter> s/always/usually/

[04:08] * putter runs a smoke to see the ext/ fixes...

[04:08] <dduncan> about 5 distros were affected by what I did yesterday, there are a half dozen or so left to fix

[04:09] <putter> yay :)

[04:10] * putter seriously underestimated how long this release process would take.

[04:10] *** luqui joined
[04:10] <dduncan> this is certainly the longest releast yet ... about 4 months

[04:11] <luqui> dduncan, why should ghc-6.4.1 be minimum?

[04:11] <luqui> is there a feature we're using

[04:11] <luqui> which isn't in 6.4.0?

[04:11] <dduncan> it simplifies things for people using GCC 4

[04:11] <dduncan> 6.4.0 doesn't work with gcc 4

[04:11] <putter> audreyt: once the release is out the door, it might be fun to have another conversation/interview, regards what the next steps are, what exactly they involve, and so on.

[04:11] <luqui> dduncan, so?

[04:11] <luqui> people who aren't using gcc 4 can still use 6.4.0

[04:11] <dduncan> so people with that will have to explicitly say to use a different version when compiling, rather than the default action working

[04:12] <dduncan> you misunderstand

[04:12] <dduncan> ghc 6.4.1 works with both gcc 3.3 and 4.0

[04:12] <dduncan> ghc 6.4.0 works with only gcc 3.3 and not 4.0

[04:12] <luqui> yeah, I understand that

[04:13] <putter> luqui: the set of things which require 6.4.1, and thus have to be documented/tested separately, are gcc4.0 and thus Tiger, x86_64, embedded parrot, and... I think that's it.

[04:13] <dduncan> if ghc 6.4.1 is required, then it doesn't matter what gcc people have

[04:13] <luqui> so the minimum requirements seem to be: gcc 4.0 and ghc 6.4.1 _or_ gcc 3.3 and ghc 6.4.0

[04:13] <luqui> that's logic that can easily be coded in a configure script if necessary

[04:13] <luqui> I don't think *requiring* the installation of ghc 6.4.1 is making anyone's life easier

[04:14] <putter> Oh, maybe not embedded parrot.  I'm confused.  Though my embedded parrot is also not working.  But that's a separate issue ;)

[04:14] <dduncan> the current minimum requirements are (any gcc and ghc 6.4.1) or (gcc 3.3 and below and ghc 6.4.0)

[04:14] <luqui> dduncan, and what's wrong with that?

[04:14] <dduncan> requiring ghc 6.4.1 means not requiring gcc 3.3

[04:14] <dduncan> its a trade off

[04:14] <luqui> so?

[04:15] <luqui> the reason you bump the required version is not to save yourself a couple words in documentation

[04:15] <dduncan> since more people have gcc pre-installed, you have a net result that fewer people have to change something for pugs to work

[04:15] <luqui> if we find a feature that ghc 6.4.1 has that pugs needs, then we can bump the minimum

[04:15] <luqui> dduncan, but what about people who already have ghc 6.4.0

[04:16] <dduncan> what systems have ghc pre-installed?

[04:16] <dduncan> wouldn't people with it have done it themselves?

[04:16] <luqui> just a sec

[04:16] <dduncan> if they could do it once, doing it again is easy

[04:16] <dduncan> if they've never done it, then doing it once is hard

[04:17] <dduncan> but if they've never installed it manually, they probably don't have it

[04:17] <dduncan> s/manually/explicitly/

[04:20] <pasteling> Someone at 67.165.197.242 pasted "new ghc policy requires strictly more work" (13 lines, 449B) at http://sial.org/pbot/15654

[04:20] <luqui> in that table, where I classify all users according to their status

[04:20] <luqui> I can't find a single case where the new policy is less work

[04:20] <putter> lol

[04:21] <dduncan> what if you're only installed version of gcc is 4.0?

[04:21] <luqui> that's the second line of those tables

[04:21] <dduncan> then you have to install 3.3, which is more work

[04:21] <luqui> no, you install ghc 4.1

[04:21] <luqui> er, 6.4.1

[04:23] <putter> luqui: in a production environment, I'd agree with you whole heartedly.  In an experimental system like pugs, the question is whether the value of simplicity and clarity wins out.  the lower complexity.  having, at least until 6.5 comes out, only one version of ghc to care about.

[04:24] <luqui> putter, well, like I said, if we find a feature of ghc 6.4.1 that we think we need

[04:24] <luqui> then by all means, increase

[04:24] <luqui> but atm, 6.4.0 works fine for anyone who has gcc 3.3

[04:24] * putter wonders if we're having a conversation about order-1 (ie, 1-3) or order 10 (ie, 3 to 30) users. ;)

[04:25] <putter> and doesnt have 64bit.

[04:25] <luqui> well, I have gcc 3.3 and ghc 6.4.0

[04:25] <luqui> so it's at least one user

[04:25] <luqui> :-)

[04:25] <dduncan> I note that the recommended process for installing ghc is using a binary package, and doing so only takes a few minutes ... how much trouble is that?

[04:25] <dduncan> or do you do yours from source?

[04:25] <luqui> I build mine from source

[04:26] <dduncan> okay then

[04:26] <dduncan> how long does that take?

[04:26] <luqui> a long long time

[04:26] <dduncan> I hear quite awhile ... days

[04:26] <luqui> (i think last time it took about six hours)

[04:26] <putter> not really the point.  the question luqui is asking is, what is purchased by requiring this effort of mine.  if the answer is a smaller INSTALL file, then it probably isnt worth it.

[04:26] <dduncan> why did you go that route rather than the binary?

[04:26] <luqui> putter, exactly

[04:27] <luqui> dduncan, dunno. for fun?  there's really no reason I couldn't install the binary.  I'm just arguing my point.

[04:28] <luqui> pugs isn't itself using any features particular to ghc 6.4.1, so why not enable a 1% increase in user base (even though 1% of the user base is less than one person :-)

[04:28] <luqui> and haskell is a lazy language.  so we should probably have a lazy upgrade policy, too :-)

[04:29] <luqui> (what a strong argument!)

[04:29] <dduncan> are there any features that pugs would desire to use but isn't due to backwards compatability?

[04:29] <luqui> I think 6.4.1 was a bugfix release

[04:29] <luqui> I'm not sure though

[04:29] * putter tries to remember where the debian package stats are.  now curious as to how many people are using pugs.  and to provide a baseline for comparison with downloads of the next version.

[04:29] <dduncan> and none of those bugs actually cause us trouble?

[04:29] <luqui> pugs works for me :-)

[04:30] <putter> luqui: re (what a strong argument!), and a funny one too!   In a -Ofun environment, that carries extra weight. ;)

[04:34] <putter> dduncan: you and I need 6.4.1 (tiger, x86_64).  luqui doesn't (everything else).  a hard requirement of 6.4.1 is zero work for us.  luqui is standing in for everyone on everything else, and saying "why are you doing this to us???". ;)

[04:35] <putter> as for the bugs, it's quite possible luqui will see bugs that we don't.  if that becomes an issue debugging pugs, then that will be an argument for a hard requirement.

[04:35] <putter> s/will see/is seeing/

[04:38] <audreyt> dduncan: did the readline shell segfault for your (or  cause infinite repetitions, etc) ?

[04:38] <audreyt> s/your/your environment/

[04:38] <audreyt> dduncan: that is, before my sigwinch change

[04:38] <dduncan> I'll check

[04:38] <dduncan> putter did fix the build though

[04:38] <audreyt> yup, but I wonder if it makes sense to restore readline for you

[04:39] <dduncan> oh, and running pugs shell no longer makes all those beeping sounds

[04:39] <audreyt> aha

[04:39] <dduncan> like from trying to output an unprintable character

[04:39] <audreyt> so you _did_ run into that bug

[04:39] <audreyt> with the netbsd readline

[04:39] <putter> so far, I don't think there has been a sign of it.  though it may be hidden in some of the things which have been mentioned as issues, like compilation speed/space, or embedding problems.  no one asks/says which version of ghc is being used, because we haven't yet noted a need to be sensitive to that.

[04:39] <putter> which isnt to say we aren't currently being burned by it.  which is the simplicity argument.

[04:39] <dduncan> I did run into the beeping since a day ago, and now it is gone'

[04:39] <audreyt> hm, since a day ago.

[04:40] <dduncan> I updated to Tiger 7 days ago

[04:40] <dduncan> I rarely use the shell

[04:40] <audreyt> ok

[04:40] <dduncan> the problem may be a bit older, but I only remember it since 1-2 days ago

[04:40] *** drbean joined
[04:40] <audreyt> nod, I hit it at every Tiger installation

[04:40] <audreyt> it's not as bad as segfaulting on freebsd here

[04:41] <audreyt> but still quite annoying

[04:41] <audreyt> ok, I think disabling readline for Tiger by default is sane, then

[04:42] <audreyt> (i.e. putter++'s current treatment)

[04:43] <dduncan> and the way putter did it, by checking for the symbol, is best as it allows Tiger people who installed newer readline themselves to use it

[04:44] <audreyt> hm, let me check in a simple test

[04:44] <dduncan> I was about to smoke now, but I can wait for that

[04:44] <dduncan> or I won't

[04:45] <putter> not so much checking for the symbol, but embedded test hs script again using all the functionality the real Shell uses.  the problem was, the Shell's usage expanded without the test's doing so (and the domain turned out to be complex enough for this to matter).

[04:45] <dduncan> this smoke will see what affects that audreyt's pile-o-changes made since my last commit

[04:46] <dduncan> and then I will look into getting the rest of the ext/ to work

[04:46] * putter is currently smoking 8825

[04:46] <dduncan> I'm doing 8827

[04:46] <putter> k

[04:46] <dduncan> on my machine at normal speed, it takes 2 hours

[04:47] <dduncan> question ...

[04:47] <putter> OSes as complex domains --

[04:47] <audreyt> ok, r8828 is in.

[04:47] <dduncan> if one sets config.yml to have 2 concurrent processes ...

[04:47] <dduncan> how many pugs processes should be running at once during the tests?

[04:47] <audreyt> 2~4?

[04:47] <dduncan> I only ever see 1

[04:47] <putter> hmm.  me too, now that you mention it.

[04:48] <svnbot6> r8828 | audreyt++ | * Readline emulation in Pugs.Shell for people without

[04:48] <svnbot6> r8828 | audreyt++ |   GNU readline in their system.

[04:48] <dduncan> I see 2 perl processes using zero cpu

[04:48] <dduncan> but only 1 pugs process open

[04:48] <audreyt> dduncan: can you try r8828 and shell?

[04:48] <dduncan> so it isn't really using both of my cpus

[04:48] <dduncan> do you want me to kill my smoke first?

[04:48] <audreyt> dduncan: no, not really, ^Z will do

[04:48] *** Amnesiac joined
[04:49] <putter> oh, wait. I'm not setting config.yml.  never mind.

[04:50] <dduncan> well, my config.yml contains "smoke_concurrent: 2" and that value is reflected at 'make' time

[04:50] <dduncan> but I still only see 1 pugs process when smoking

[04:50] <putter> btw, hi audreyt.  :)  good dinner with the folks?

[04:50] <dduncan> this has been the case for quite awhile now

[04:51] <dduncan> Pugs.Shell did not die when being compiled

[04:51] <audreyt> putter: yup, people are quite adaptable :)

[04:51] <dduncan> on r8828

[04:51] <dduncan> otoh, when compiling Pugs, it did die

[04:51] <putter> yay :)

[04:52] <dduncan> a whole bunch of undefined symbols "_SystemziConsoleziSimpleLineEditor_*"

[04:52] <dduncan> audreyt, did that answer your question?

[04:52] <audreyt> dduncan: yes. please hand-hack Pugs.cabal 

[04:52] <dduncan> note that I didn't rerun the Makefile.PL, only 'make'

[04:53] <audreyt> or rather Pugs.cabal.in

[04:53] <audreyt> before "QuickCheck -any"

[04:53] <audreyt> in line 7

[04:53] <audreyt> add a 

[04:53] <audreyt> readline -any, 

[04:53] <audreyt> to it, and "make pugs" again

[04:53] <dduncan> okay, I have pugs.cabal.in open

[04:55] <audreyt> line 7 should be "build-depends: ...", add "readline -any, " as one of the depends

[04:55] * putter notes there is already a readline -any at the end of the line

[04:55] <dduncan> I added the readline -any

[04:55] <dduncan> putter, not on my line 7

[04:55] <clkao> i so want something to tell me all possible occurances of $o->bar calls where $o can be Foo

[04:55] <putter> build-depends: QuickCheck -any, base -any, mtl -any, stm -any, haskell98 -any, network -any, template-haskell -any, unix -any, readline -any

[04:55] <audreyt> putter: yes, and you are looking at .cabal not .in

[04:56] <putter> duh.  tnx

[04:56] <dduncan> audreyt, did you mean run 'make' or 'make pugs'?

[04:56] <dduncan> after that edit?

[04:56] <dduncan> will try 'make pugs'

[04:57] <audreyt> both should do

[04:57] <putter> clkao: maybe next release?  though that will require having type annotations on the ast, so maybe not.

[04:57] <clkao> i mean in perl5

[04:57] <dduncan> that didn't work; same link errors

[04:57] <clkao> *sigh*

[04:58] <putter> lol

[04:58] <clkao> i was ---><---- this close to write some analyser using ppi

[04:58] <pasteling> "dduncan" at 24.108.164.7 pasted "my current (edited) Pugs.cabal.in" (26 lines, 2.2K) at http://sial.org/pbot/15656

[04:59] <dduncan> audreyt, in case that is helpful

[04:59] <clkao> right now i am totally depending on svk's test coverage so get those calls in runtime and fix them

[05:00] <putter> what's the nature of the problem?

[05:00] <audreyt> clkao: welcome to the "dynamic even if not needed, static quite impossible" language world

[05:00] <clkao> the nature of the problem is i had some crappy interface. now lots of codebase is using them. and i am silly enough to do some refactoring when i am on holiday

[05:01] <putter> lol :)

[05:01] <audreyt> dduncan: so, pugs gets built, and you were able to use the shell? does the common line editing keys (home, end, cursors) works for you?

[05:01] <dduncan> no I wasn't

[05:01] <dduncan> after editing the file you mentioned, I get the same link errors as before on attempting to make

[05:01] <clkao> audreyt: we need to write this on 春聯

[05:02] <clkao> putter: so in short, i suck

[05:02] <audreyt> dduncan: ok, bad idea then, I'll revert my change.

[05:02] <audreyt> thanks for the test :)

[05:02] <dduncan> okay

[05:03] <dduncan> maybe I did something wrong, but I thought it was what you told me to do

[05:04] *** drbean joined
[05:04] <putter> clkao: hmm, if there is a test suite, one could try the (ideally automated) edit one/some instances of ->bar, run test and see if it fails, repeat for all ->bar.  assuming $o not Foo has a detectable signature (ie, a test fail)

[05:04] <audreyt> dduncan: you didn't do anything wrong, I think that's as expected

[05:05] <audreyt> no worries :)

[05:05] <clkao> ya. that's more or less what i am doing. but i am depending on the test coverage

[05:05] <clkao> how would perl6 make my life easier in this case?

[05:05] <clkao> i assume it's easy for some tool to tell me all $o that is Foo right?

[05:06] <audreyt> clkao: type inferencing, mostly

[05:06] <putter> could filter the set of interest $o's by excluding ones whose type is known to be incompatible with Foo.

[05:06] <audreyt> clkao: which is that "some tool", yes

[05:06] <clkao> *nod*

[05:06] <svnbot6> r8829 | audreyt++ | * revert the failed attempt at emulating readline

[05:06] <svnbot6> r8829 | audreyt++ |   using System.Console.SimpleLineEditor, as it didn't

[05:06] <svnbot6> r8829 | audreyt++ |   quite work for dduncan++ (and neither for me)

[05:06] <audreyt> but it does require some annotations on your part.

[05:07] <audreyt> e.g. declaring classes with "class" and add types to member variables and function signatures etc.

[05:07] <audreyt> the more annotations you put, the more information the inferencer gets

[05:07] <clkao> yep

[05:08] <putter> could also do semi-automated "aspect oriented programming", ie, massage questionable instances of $o into $o.does(Foo) ?? {log_oops;$o->before} !!  $o->after

[05:09] <audreyt> lexwrap can already do that for perl5

[05:10] <clkao> i think the point is to get those in compile time

[05:10] <putter> oh, I was afraid of that.  meant $o.does(Foo) ?? {log_oops;$o->bar0} !!  $o->bar1

[05:10] <putter> or shouldnt I be looking at Hook::LexWrap?

[05:12] <dduncan> the reverted builds

[05:13] <audreyt> putter: just installing a Foo::bar prehook that does log_oops would do, no?

[05:13] <putter> oh, I get it.  too many different oo languages swirling in my brain.

[05:16] <putter> clkao: so you could annotate / lexwrap all the ->bar's in your program, have the log the caller file/line, run you tests, perhaps if you have a captive user base, have them run it to, and then you'll have a plausible list of $o's to change.

[05:17] <clkao> ya. but i also want to find those not covered by tests

[05:18] <putter> thus the idea of giving users the instrumented version, assuming that's plausible.  then you get the log from their real use.

[05:21] <putter> hey, have smoke

[05:21] <audreyt> woot

[05:21] * audreyt starts triaging based on putter's smoke

[05:22] <putter> http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.10-r8825-linux-normal--1138512146-3958--10721-10008-713-1533-984-0--cf0a8272033e78e61bc3bda2c963593d.html

[05:23] <putter> and dduncan is running an r8828 osx.

[05:27] <putter> clkao: re holiday/suck, as long as it's fun?  if not, then -Ofun ;)

[05:28] * putter ponders the meaning of calling ones' self with alternate arguments...

[05:30] <dduncan> actually, I'm running r8829 now

[05:30] <dduncan> but I expect the test failures to be about the same

[05:31] <dduncan> as far as audreyt's triaging goes, you should focus on the t/ items

[05:32] <audreyt> okay, doing so

[05:32] <dduncan> because ... if they are correct, then any ext/ failures are probably due to bad ext/ code and not bad pugs code, which makes things easier for me

[05:33] <audreyt> nod.

[05:33] <dduncan> that said, I think Pod-Event-Parser was working before your changes

[05:33] <dduncan> but I will confirm

[05:33] <audreyt> okay.

[05:34] <svnbot6> r8830 | audreyt++ | * junction/chained_operators.t: unbreak the test syntax.

[05:34] <audreyt> I'll be offline a bit to focus on triaging

[05:34] <audreyt> will be back in 0.5~1hrs

[05:41] *** xinming joined
[05:56] *** drbean_ joined
[06:05] *** drbean_ joined
[06:07] <dduncan> maybe I just need to configure my terminal, but the current Pugs doesn't accept the delete key

[06:07] <dduncan> hitting it just causes junk to display

[06:07] <dduncan> when in shell

[06:08] <dduncan> mind you, the delete key works in other terminal apps

[06:08] <svnbot6> r8831 | audreyt++ | * TODOing variously dying oo tests.

[06:09] <dduncan> so, Config::Tiny fails to parse, whereas it did parse yesterday

[06:09] <dduncan> it appears that removing the line "$line .= chomp;" allows it to parse

[06:09] <dduncan> currently checking that in isolation ...

[06:10] *** xinming joined
[06:12] <dduncan> ?eval my $x = "fu"; $x .= chomp;

[06:12] *** evalbot_8807 is now known as evalbot_8831

[06:12] <evalbot_8831> Error:  unexpected "." expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[06:12] <dduncan> so that parsed yesterday, and now it doesn't

[06:13] <dduncan> ?eval my $x = "fu"; $x .= chomp();

[06:13] <evalbot_8831> Error:  unexpected "." expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[06:14] <dduncan> ?eval my Str $x = "fu"; $x .= chomp;

[06:14] <evalbot_8831> Error:  unexpected "." expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[06:14] <dduncan> ?eval my $x = "fu"; $x  = $x.chomp;

[06:14] <evalbot_8831> \"fu" 

[06:19] <dduncan> the core test t/pugsrun/03-dash-p.t is also dying, and uses .= chomp

[06:21] <dduncan> oh wait, that's in the pod of the file

[06:22] <dduncan> so its not the cause of dash-p's death

[06:22] <putter> dduncan: I noticed chomp.t is being skipped.

[06:23] <dduncan> oh?

[06:23] <putter> don't know why.  looking at log...

[06:27] <dduncan> oddly enough, chomp.t itself isn't being skipped, but for its last 2 tests

[06:29] <dduncan> chomp.t hasn't been updated in 3 months

[06:30] <dduncan> various evidence points to the Parser changes made yesterday as the culprit, assuming that $foo .= chomp is valid perl 6

[06:30] <putter> someplace between r8818 and r8825, chomp.t became a parsefail

[06:31] <putter> unexpected "." expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" at t/builtins/strings/chomp.t line 24, column 10 

[06:31] <dduncan> it was at r8824-5

[06:32] <dduncan> my posted smoke of 8823 shows it passing

[06:32] <dduncan> as well as various chomp using things passing

[06:33] <putter> t/syntax/inplace.t is like that too.  and there are a couple of other candidates.

[06:33] <dduncan> its r8824, the big mass of triaging, that broke it

[06:33] <putter> ah, ok

[06:34] <dduncan> that change included several parser file changes

[06:34] <putter> ok.  maybe wait until audreyt surfaces.  may already be fixed. ;)

[06:35] <dduncan> mayhaps ... but who better to fix something than the one who broke it?

[06:35] <dduncan> um, ...

[06:35] *** xinming1983 joined
[06:35] <dduncan> you do agree that "$x .= chomp;" is correct, yes?

[06:36] <dduncan> and r8824 wasn't just exposing bad code?

[06:36] <putter> re agree, so chomp.t suggests

[06:36] <dduncan> well, I probably won't be testing any more today, waiting for that fix to come in first

[06:37] <putter> shift change ;)

[06:38] <dduncan> also, unless the issue is transient, which I'm testing now, there are issues using the pugs shell now

[06:38] <putter> oh?

[06:38] <dduncan> eg, backspace/delete key doesn't work

[06:38] <putter> it's *nix.  bs/del are _supposed_ to not work.  ;)

[06:39] <putter> sigh.

[06:39] <dduncan> so what key do you hit to delete something you just typed into the pugs shell?

[06:39] <dduncan> those keys work fine in the ordinary shell, and other cmdline apps

[06:40] <dduncan> anyway, I did a make realclean and am trying building again, in case that experiment with editing cabal left crumbs around

[06:40] <putter> since you're not seeing readline any more, if (haven't checked) pugs is just reading in line-at-a-time mode, then in editing you're just seeing some flavor of your terminal configuration, no?

[06:41] <dduncan> well, the delete key worked in line-at-atime mode before

[06:41] <dduncan> under Panther

[06:43] <putter> I suspect you were getting readline back then.  the downside of the pugs readline changes, is now you dont.

[06:43] <dduncan> you think I was getting readline in Panther?

[06:43] <putter> why not?

[06:43] <dduncan> somehow I thought it was added for Tiger

[06:44] <dduncan> in any event, that stuff we went through today ...

[06:44] <meppl> guten morgen

[06:44] <dduncan> about readline

[06:44] <dduncan> I was under the impression I had never been using it before, under Panther

[06:44] * putter tries to remember how to say good morning in some language other than english.  fails.  sign it's time to say good night.

[06:45] <dduncan> and the delete key is so basic, that even a non-readline input replacement should support it

[06:45] <meppl> good night putter

[06:47] <putter> no, the chain goes like this:  pugs was using readline whenever ghc saw it, and a little test script passed.  but there were issues with threads.  those were fixed by using more of the readline api, which happened to not be supported by tiger.  causing build failure.  so the test was extended to check for the new features.  which

[06:47] <dduncan> but I thought readline was just for providing command histories and such

[06:48] <putter> which fixed the build, but still means that the pugs readline implementation has changed in a way incompatible with current and past osx.  so now osx isnt getting readline any more, unless you install libreadline yourself.

[06:48] <dduncan> very basic things like typing characters and erasing characters should be in any input method

[06:49] <putter> you would think so.  but that's not the *nix tradition. ;)

[06:50] <putter> pugs is in fact falling back to a simple getLine.  so its a ghc + terminal configuration problem.

[06:50] <dduncan> so what then, did unix people never erase characters?

[06:50] <putter> meppl: :)

[06:51] <dduncan> if what you say is true, then why can my same terminal still work properly with those control characters?

[06:51] <putter> so it's a hairy mess which often doesn't work.

[06:51] *** iblechbot joined
[06:53] <putter> I would say ioclt, but part of the fun is each version of *nix has its own nuttiness.  I (happily?) dont remember what bsd's flavor is.

[06:54] <putter> perhaps I'm being too negative.  perhaps posix has improved things.  but this corner of the world, terminal control and configuration, and the inability to get del and backspace reliably working, has been a problem for more than a human generation.  it gets a bit irritating after a while.  smells like dead fish. ;)

[06:57] *** nothingmuch joined
[06:57] *** Alias_ joined
[06:57] <Alias_> ping anyone in the know?

[06:57] <putter> a less obscure answer is that terminals have modes, the modes and the way they are set vary between versions of *nix, and often have obscure nonlocal behavior and dependencies, and thus are often not used to correct result.

[06:58] <Alias_> I just saw the announce of Haskell'

[06:58] <Alias_> So, any other lambdacamels on the committee other than audrey?

[06:58] * putter looks over sholder.  notes audreyt is off to focus on hacking, will be back eventually.

[06:58] <Alias_> Is Perl invading Haskell :)

[06:59] <putter> I don't remember noticing any perl names other than audreyt.  then again, i didnt really look.  so ??

[07:00] <putter> rather than invasion, perhaps a venn-diagram community intersection?  based in part on ghc's use of perl, and in part by audreyt sucking people into pugs?

[07:01] <Alias_> indeed

[07:01] <Alias_> It's an unbelievably elegant merger

[07:01] <putter> good description

[07:01] <Alias_> The more pure, hardcore, computationall strict language, built up from pretty much pure math, and the most flexible, scripty DWIM language

[07:02] <Alias_> Meld the two close enough and you can pretty much do it all from military crypto to obfuscated oneliners

[07:02] <putter> camel mates with ....

[07:02] <putter> ?

[07:02] <Alias_> a bigger brain?

[07:03] <Alias_> We need a camel with a swolen head

[07:03] <putter> oh my.  that's quite an image

[07:03] <Alias_> Or pure math... which would be a camel in black leather in the Matric

[07:03] <Alias_> Matrix

[07:06] <putter> a while back there was the oneliner of "perl6 is the mechanism by which ML?Haskell? tries to take over the world".

[07:06] <Alias_> ML?

[07:07] *** xinming joined
[07:07] <putter> http://en.wikipedia.org/wiki/ML_programming_language

[07:09] <Alias_> The predecessor to Haskell or something

[07:09] <Alias_> O! Caml!

[07:09] <putter> yeah.  yes :)

[07:10] <putter> and sml.  though caml seems to have the more active community.

[07:11] <Alias_> Well, it wins those programming competitions

[07:11] * putter wonders how hard it would be to have ml or hs on top of p6...

[07:11] <Alias_> And that's about all I know

[07:11] <putter> http://caml.inria.fr/

[07:11] <putter> :)

[07:12] <putter> nice web page redesign.  much simpler.  was very cluttered.

[07:15] *** ayrnieu joined
[07:17] <nothingmuch> morning

[07:19] <putter> g'morning

[07:20] <meppl> good morning nothingmuch

[07:25] <putter> Alias_: one nice use of ocaml: http://manju.cs.berkeley.edu/cil/

[07:26] <Alias_> wow

[07:26] <Alias_> But then C analysers have had a LONG time to evolve, and a LOT of money thrown at the problem

[07:30] <putter> yeah, but it's only in the last very few years that open-source solutions have started to exist.  Cil, OpenC++, gcc with tree dumps.  sucks when everything takes multiple decades.

[07:31] <Alias_> true

[07:31] <putter> it at least very vaguely looks plausible that hugs could be massaged into p6.  http://cvs.haskell.org/cgi-bin/cvsweb.cgi/hugs98/src/

[07:31] <Alias_> I have a code generation/refactoring system for Perl, and when I was researching this about 4 years ago, the only BIG refactoring/analyser stuff I could find for C was half a million per seay

[07:31] <putter> yeah

[07:31] <Alias_> seat

[07:32] *** xinming1983 joined
[07:32] <Alias_> And god knows how much CPU needed

[07:33] <putter> arpa et al kept funding individual researcher's efforts.  while encouraging their commercialization.  sometimes a good policy.  but here it meant there was one early limited unsupported public version, and a almost always unsuccessful attempt to commercialize it.  leaving nothing.  there were at least 3? cases like that. :(

[07:36] <putter> then again, it's a non-trivial exercise.  especially C++.  putter wants to see lots and lots of languages on top of p6.  at this moment exploring haskell.  But C++...?  "run away! run away!"

[07:38] <Alias_> heh

[07:38] <putter> hmm...  I wonder how hard it would be to do big refactoring / analyser stuff in p6...  half-million you say... ;)

[07:38] <Alias_> But oh the libraries we'd get

[07:40] <putter> re "But oh the libraries we'd get", that's the "expendable-extra-character choosing to linger to gather more riches" line.   projects head off down that pretty path... and their wreckage washes up years later.

[07:41] <Alias_> oh wait, C++

[07:41] <Alias_> We'd get buffer overflows and such inherited?

[07:41] <Alias_> Surely not :)

[07:41] <putter> s/riches/riches, while the tomb collapses/

[07:41] *** Aankhen`` joined
[07:44] <putter> its more that its really really complex.  so for instance, M$ intentional progrming folks (pour code into database) did C++ because M$ does C++.  several rewrites from scratch later, and n years, the project was eventually shot.

[07:44] <luqui> putter, dost thou havst an example?

[07:44] <luqui> of said riches

[07:44] <putter> lol :)

[07:44] <luqui> er, said wreckage'

[07:45] <luqui> oh, you just gave one

[07:46] <luqui> yeah, C++ is a pretty damn complex language

[07:46] <Alias_> luqui: Pour example, native KDE integration

[07:46] <Alias_> The riches!

[07:46] <Alias_> Integration with games programming

[07:46] <luqui> Alias_, why can't you use NCI for that?  The mangling?

[07:46] <Alias_> Perl 6 as the language for Quake 5 modding

[07:46] <Alias_> anwyas

[07:47] * Alias_ wanders off

[07:47] *** Alias_ left
[07:47] <luqui> Well, Lua saw the light for WoW

[07:47] <putter> ha!  Alias_ is sneaking off to gather riches which are rightfully ours!

[07:47] <putter> WoW?

[07:48] <dduncan>  I'm going to investigate some of these terminal/readline/whatever issues

[07:49] <dduncan> will try rebooting under previous my previous OS from last week, to see if it's normal again

[07:49] *** dduncan left
[07:49] * putter fondly recalls working with dduncan, last seen heading hopefully down a dark and deep rathole

[07:50] * putter heads off for the accessible riches of sleep

[07:50] <putter> 'night all &

[07:50] <Aankhen``> G'night.

[07:57] *** xinming1983 joined
[08:02] <meppl> good night aankhen

[08:03] *** dduncan joined
[08:03] <dduncan> okay, following up with that test

[08:04] <dduncan> I've confirmed that, ...

[08:04] <dduncan> A: the current pugs compilation has the same shell problems under Mac OS 10.3.9 as it does under Mac OS 10.4.4

[08:04] *** Cryptic_K joined
[08:05] <dduncan> B: 10.3.x *never* had any version of readline installed ...

[08:05] <dduncan> and yet the pugs shell worked properly there

[08:05] <dduncan> a few days ago

[08:05] <dduncan> likewise, I seem to recall but not sure it worked normally under 10.4.4 a few days ago

[08:06] <dduncan> seeing the same broken current pugs behaviour under the terminals of both versions seems to rule out that a terminal difference or config is the problem

[08:07] <dduncan> also, the fact that deletes et al worked properly in pugs a few weeks ago, when readline was never installed, says that readline isn't a prerequisite for such simple features

[08:07] <dduncan> which means that the fact my pugs isn't linking in the older readline on my 10.4.4 system shouldn't cause a failure

[08:08] <dduncan> so there would seem to be a problem in the recent pugs shell itself

[08:08] <dduncan> and this should be fixable

[08:08] <dduncan> ... I will look into some file diffs further ...

[08:11] *** elmex joined
[08:22] *** xinming joined
[08:22] <dduncan> comparing Shell.hs from revision 8162, it appears that r8820 may actually be the cause of my problems

[08:23] <dduncan> I think it may be the new linebuffering commands that were added

[08:23] <integral> oh, Makefile.PL has been changed recently :-/

[08:23] <dduncan> they appear in the code unconditionally whether readline is in use or not; I will try moving them into the ifdef for readline

[08:23] <dduncan> I don't think the Makefile.PL has anything to do with my problem

[08:23] <clkao> hmm, jsperl5 is passing less. weird.

[08:24] <dduncan> the problem I'm seeing right now isn't a make linking problem, but a runtime input/output buffering problem

[08:24] <integral> ah, sorry, still thought we were back on that

[08:24] <dduncan> I'll see what moving those lines does

[08:24] <dduncan> no, the linking is fine

[08:26] <dduncan> actually, revision 8825 has those commands in the ifdef

[08:27] <dduncan> I think that autrijus' subsequent experiment and rollback in 8828 and 8829 put the commands in the wrong place

[08:27] <dduncan> specifically, 8829 is at fault, I think

[08:27] <dduncan> will test that theory ...

[08:38] <dduncan> I think I fixed it ... committing

[08:38] <dduncan> at least, the change works for me, and it is based on an older version

[08:42] <dduncan> push done

[08:43] <dduncan> as r8832

[08:44] <dduncan> whomever's around, please update to r8832 and confirm that my Haskell editing didn't break something

[08:44] <svnbot6> r8832 | Darren_Duncan++ |  r2186@darren-duncans-power-mac-g4:  darrenduncan | 2006-01-29 00:41:00 -0800

[08:44] <svnbot6> r8832 | Darren_Duncan++ |  src/Pugs/Shell.hs : updated the expressing setting initializeShell so it only invokes NoBuffering when we're using readline, rather than doing it unconditionally; this fixes a bug seemingly introduced in r8829 ... as a result, the pugs shell now handles the backspace/delete key correctly

[08:44] <dduncan> I don't think it did, but this is like the second time ever that I edited haskell

[08:45] <dduncan> I need two testers, one that has readline and one that doesn't

[08:46] <dduncan> for myself, the delete key works again

[08:48] <dduncan> okay, so its almost 1am here ... good night

[09:02] *** bernhard joined
[09:10] *** drbean joined
[09:19] *** G2 joined
[09:31] *** avar is now known as avar_packing

[09:36] *** avar_packing is now known as avar

[09:45] *** beppu joined
[09:54] *** elmex_ joined
[10:07] *** chris2 joined
[10:09] *** r0nny joined
[10:22] *** feng joined
[10:23] *** kane_ joined
[10:36] *** beppu joined
[11:02] *** christo joined
[11:09] <nnunley> http://www.iro.umontreal.ca/%7Eboucherd/mslug/meetings/20041020/minutes-en.html

[11:09] <svnbot6> r8833 | audreyt++ | * TODOization of three more tests.

[11:14] <audreyt> dduncan: "foo" and "return foo" have different types in haskell, so I removed an extra "return"

[11:14] <svnbot6> r8834 | audreyt++ | * Unbreak dduncan++'s editing for readline users.

[11:14] <audreyt> dduncan: thanks for catching my misedit for nonreadline branch

[11:29] *** drbean joined
[11:37] *** christo left
[11:51] *** elmex joined
[13:12] *** putter joined
[13:12] <putter> dduncan++

[13:13] * putter shall endeavor to be less pessimistic in future.

[13:14] <putter> audreyt: hi.  you saw dduncan's note re r8824 and chomp.t et al?

[13:21] <putter> anyone: re haskell on p6, ghc's ext-core seems a plausible way to go http://www.haskell.org/ghc/docs/latest/html/users_guide/ext-core.html

[13:34] *** verve_ joined
[13:42] *** drbean joined
[14:00] *** iblechbot joined
[14:09] <svnbot6> r8835 | audreyt++ | * TODOize and corrected the rest of main test suite.

[14:10] <audreyt> greetings

[14:11] <audreyt> putter: GHC's Core is less pleasant than (say) YHC or JHC's.

[14:11] <audreyt> I think YHC is most promising

[14:11] <audreyt> but then, now that I grokked the IL in the not-not-ml paper, it seems plausible as well

[14:12] <audreyt> though there's no production-grade compiler from anything to that IL yet

[14:20] *** marmic joined
[14:24] <svnbot6> r8836 | audreyt++ | * "chop" returns chopped string instead of modifying it

[14:24] <svnbot6> r8836 | audreyt++ |   in-place, so remove the "is rw" from its signature.

[14:28] <svnbot6> r8837 | audreyt++ | * -n and -p now always surrounds the remaining flags with

[14:28] <svnbot6> r8837 | audreyt++ |   while () {...} blocks, instead of only the -e parts.

[14:28] <audreyt> ok, I _think_ that's all of the main test suite

[14:28] * audreyt starts another round of smokes

[14:28] <clkao> whoot

[14:28] <audreyt> the anniversary release looks hopeful

[14:28] <audreyt> though I spent far too much time grokking the not-not-ml paper

[14:28] <audreyt> very enlightening, though

[14:29] <audreyt> bestian++ # helpful on the other side of curry-howard bridge

[14:29] <svnbot6> r8838 | audreyt++ | * "$foo .method" now parses again; "$foo. method" now parsefails again.

[14:39] *** xinming joined
[14:46] <putter> audreyt: would you like any of the other backend smokes run in parallel with yours?

[14:46] <audreyt> putter: sure, a pil2js run would be nice

[14:46] <putter> will do

[14:46] <audreyt> putter: and no, what about chomp.t?

[14:47] <putter> http://colabti.de/irclogger/irclogger_log/perl6?date=2006-01-29,Sun&sel=310#l493

[14:49] <audreyt> I accidentally fixed that in r8838

[14:50] <xinming> audreyt: did you have a nice day yesterday? :-)

[14:50] <audreyt> xinming: yeah, got plenty of red envelope too

[14:50] <xinming> I spent a lonely day yesterday. :-(

[14:50] <audreyt> learned a lot about cosmetics and clothings etc from my aunt

[14:50] <audreyt> xinming: ow :/

[14:51] <xinming> hmm, is preparing to go KunMing. I'll go in 2 weeks maybe.

[14:51] <audreyt> how's kunming nowadays? I've never been there, only read about it in books

[14:52] <clkao> audreyt: i did a pil2js run already

[14:52] <clkao> but it's a bit eaerlier

[14:52] *** chris2 joined
[14:52] <xinming> audreyt: Weather in KunMing is the most important case for people choose there. :-P  It's all spring, no summer, no winter, and even no autumn. :-)

[14:53] <xinming> audreyt: You only need 2 suits to live there. :-P

[14:53] <audreyt> wow, constant weather

[14:53] <audreyt> sounds lovely

[14:54] <wolverian> sounds boring ;)

[14:54] * putter thinks it sounds boring (obligatory US New England opinion')

[14:54] <wolverian> (I'm just trying to stand up for the weather-from-hell we have here.)

[14:54] * Odin- lives where there's no weather.

[14:54] <putter> where?

[14:54] <Odin-> Just samples of weather. :)

[14:55] <audreyt> weatherlets

[14:55] <xinming> I grow in KunMing, and then back to WenZhou. It's a pain to live here at first... as I don't know when I need to change the clothes,

[14:56] <xinming> putter: No, It won't boring, You'll love there if you live there for a long time. :-)

[14:56] <xinming> s/won't/won't be/

[14:56] <putter> :)

[15:00] <putter> re haskell on js.  yhs has the advantage of a simple vm, and it looks like someone is meeting with some success doing a .net for it.  disadds include looks like a one-person project, and is still a bit toy-ish.  jhc has a larger community, but is also far more ambitious. it would be nice to have acceess to its analysis phases in p6,

[15:03] <putter> and it seems to be working on some snippets, but scaling issues make self-compilation look somewhat distant.  ghc... is there some disadd to ghc core?  other than the complexity required to run it?  and its perhaps? lack of a user community?  certainly ghc is the most capable of the compilers.  whether that gets reflected in the core code is a separate risk point.

[15:05] *** vel joined
[15:07] <audreyt> putter: YHC is NHC's successor, so it has the sane NHC base

[15:07] <audreyt> putter: GHC is the most capable, but GHC's core is not as easy to work with.

[15:07] <audreyt> putter: certainly a JVM and a CLR backend existed for GHC, and we can work fron there.

[15:07] <audreyt> but YHC's VM instructions does look very accessible.

[15:07] <audreyt> but I need to sleep now :)

[15:07] * audreyt pressed "shift"

[15:08] <audreyt> journal up... see you tomorrow.

[15:08] <putter> ;)

[15:08] <putter> good night audreyt &

[15:08] <Juerd> audreyt: Sleep well

[15:09] *** GeJ joined
[15:10] <putter> http://www-users.cs.york.ac.uk/~ndm/yhc/  http://repetae.net/john/computer/jhc/   http://www-users.cs.york.ac.uk/~ndm/yhc/docs/ByteCode-Instructions.html

[15:14] <integral> oooh, dduncan++ # rewriting File::Spec

[15:17] <putter> a build issue: I've been noticing that make builds a precompiled js prelude, but then make smoke-js builds one again.  so something isn't quite right.

[15:18] <wolverian> hmm. dduncan++ # nice

[15:18] <wolverian> I'll rewrite Path::Class on that as soon as possible :) 

[15:19] <integral> wolverian++

[15:22] *** xinming joined
[16:04] *** apple-gunkies joined
[16:08] *** nnunley joined
[16:24] *** nothingmuch joined
[16:25] *** xinming joined
[16:35] *** Amnesiac joined
[16:53] *** justatheory joined
[17:30] <xinming> anyone here use debian testing?

[17:31] <xinming> Welcome to Pugs -- Perl6 User's Golfing System

[17:31] <xinming> Type :h for help.

[17:31] <xinming> Loading Prelude... done.

[17:31] <xinming> Segmentation fault

[17:31] <xinming> I compiled this on both laptop and my pc. with the same result. and I've tried to make clean. :-/

[17:39] <ingy> hola

[17:39] <ingy> seen audreyt 

[17:39] <jabbot> ingy: audreyt was seen 2 hours 31 minutes 1 seconds ago

[17:39] <obra>    ingy!

[17:39] <obra> how's things?

[17:48] *** weinig joined
[17:52] <clkao> ingy, your mail is fscked. jo sent a mail to you

[18:03] *** dduncan joined
[18:05] *** elmex joined
[18:12] *** pjcj joined
[18:19] <putter> r8838 smokes for both freebsd and linux are up.  core isn't quite green yet, but getting there.

[18:26] *** pjcj_ joined
[18:34] *** elmex joined
[18:40] <xinming> hmm, anyone here got my problem?

[18:40] <xinming> failed to run pugs

[18:55] *** pjcj joined
[18:57] <putter> failed to run pugs?

[19:14] <gaal> yo

[19:15] <gaal> pugs is still Rat-happy. Should this be fixed for the release?

[19:16] <theorbtwo> Rat-happy?

[19:16] <integral> bleh, my pugs really doesn't like t/pugsrun.  /me kicks his box

[19:16] <gaal> ?eval 10 ** 3 / 2 ** 10

[19:17] <gaal> no evalbot? :-(

[19:17] *** evalbot_8831 is now known as evalbot_8838

[19:17] <evalbot_8838> 125/128 

[19:17] <integral> it's just slow when it has to upgrade itself ;)

[19:17] <gaal> ?eval "I wanted a decimal: " ~ 10 ** 3 / 2 ** 10

[19:18] <gaal> integral: I don't think in updates lazily ;-)

[19:18] <evalbot_8838> "I wanted a decimal: 0.9765625" 

[19:18] <gaal> feather must be loaded

[19:18] <theorbtwo> What's wrong with that being a rat?

[19:18] <theorbtwo> ?eval 3/6

[19:18] <integral> oh, damn I forgot to nice my make

[19:19] <evalbot_8838> 1/2 

[19:19] *** phydoxx joined
[19:19] <theorbtwo> ?eval 6/3

[19:19] <evalbot_8838> 2/1 

[19:20] <gaal> it's not morally reprehensible or anything, but it's surprising

[19:20] <theorbtwo> It is?

[19:20] <gaal> sure, do the same code in Perl 5

[19:21] <theorbtwo> Right.  This is better.

[19:22] <gaal> theorbtwo: I'm not sure it is; when the fractional parts get big it loses redability:

[19:22] <gaal> ?eval 1000 ** 3 / 2 ** 1000

[19:22] <theorbtwo> gaal: Only if you do .perl.

[19:22] <evalbot_8838> 1953125/20927902484106783612273926739453160362527437728623703270385749772858418967283908642445280836244059729054583455420959898929436431361178008664032378075583153913934702685203576143400536338012443636480379262017668896452308479037888217888995203019681763505021868120481527671211777014946532005541417320448 

[19:22] <theorbtwo> ...and the two sides are rel prime.

[19:23] <gaal> right. perhaps it should be "fixed" in prettyVal only.

[19:24] <gaal> the fraction quoted above gives very little cue about its size

[19:24] <theorbtwo> If you don't like it, feel free to ~.

[19:24] <Odin-> That's a problem with rational representation in general...

[19:25] <theorbtwo> ?eval ~(1000 ** 3 / 2 ** 1000)

[19:25] <gaal> "indeed" xx 2

[19:25] <evalbot_8838> "0" 

[19:25] <theorbtwo> Um... now /that/ is a bug.

[19:25] <Odin-> Mmmm. Yes.

[19:25] <Odin-> Quite certainly.

[19:26] <gaal> should it be a bigsmalldecimal?

[19:28] <gaal> ?eval [+] (~(1000 ** 3 / 2 ** 1000) xx 1000)

[19:28] <evalbot_8838> 0.0 

[19:28] <gaal> oops, silly test

[19:29] <gaal> see, I don't know how to "shake off" Ratitude except by stringification

[19:29] <theorbtwo> ?eval 1.0 * 1000 ** 3 / 2 ** 1000

[19:29] <gaal> but you know what, maybe I shoudln

[19:29] <gaal> 't care.

[19:29] <evalbot_8838> 1953125/20927902484106783612273926739453160362527437728623703270385749772858418967283908642445280836244059729054583455420959898929436431361178008664032378075583153913934702685203576143400536338012443636480379262017668896452308479037888217888995203019681763505021868120481527671211777014946532005541417320448 

[19:30] <gaal> theorbtwo: not so easy :) adding integers doesn't help either.

[19:30] <theorbtwo> ?eval 1.0 * (1000 ** 3 / 2 ** 1000)

[19:30] <evalbot_8838> 1953125/20927902484106783612273926739453160362527437728623703270385749772858418967283908642445280836244059729054583455420959898929436431361178008664032378075583153913934702685203576143400536338012443636480379262017668896452308479037888217888995203019681763505021868120481527671211777014946532005541417320448 

[19:33] <xinming> putter: I'll get seg fault when I start pugs

[19:33] <theorbtwo> Hm.

[19:33] <xinming> Welcome to Pugs -- Perl6 User's Golfing System

[19:33] <xinming> Type :h for help.

[19:33] <xinming> Loading Prelude... done.

[19:33] <xinming> Segmentation fault

[19:33] <xinming> xinming@HomePc:~$

[19:34] <theorbtwo> Possibly a bit of an issue.

[19:34] <gaal> xinming: what OS are you on?

[19:34] <gaal> xinming: how much RAM do you have?

[19:35] <xinming> debian

[19:35] <xinming> 512M

[19:35] <xinming> I am in debian testing

[19:35] <gaal> and, are you on the last r of pugs? audreyt fixed a segfault lately

[19:36] <gaal> I'd try playing around with heap size:

[19:36] <gaal> ./pugs +RTS -M300        (I think it goes)

[19:36] <xinming> I use the latest version

[19:36] <xinming> gaal: ?? Not works.

[19:37] <gaal> hmmm, i thought there was an infectuous way of telling any ghc-compiled program how much heap to give, but I may be imagining things

[19:38] <xinming> gaal: by the way, Is ghc 6.4 still supported for now?

[19:38] <gaal> yes

[19:39] <gaal> xinming: try seeing what strace says?

[19:39] <gaal> strace -o /tmp/pugs.trace ./pugs ; tail -50 /tmp/pugs.trace

[19:40] *** nicbrown joined
[19:43] <lisppaste3> xinming pasted "last 50 line post" at http://paste.lisp.org/display/16184

[19:46] <gaal> hmm, nothing obvious

[19:46] <gaal> (except that haskell io is way inefficient :-)

[19:47] <gaal> actually, i wonder, why is it trying to open /usr/share/perl/5.8/strict.pm ? :)

[19:47] <gaal> xinming: oh you probably have embedded perl5, right?

[19:48] <xinming> yes

[19:48] <gaal> well, sorry, I can't think of anything. :(

[19:48] <xinming> It's ok, I'll ask audreyt about this

[20:05] <putter> xinming: have you tried it without embedded perl?

[20:18] *** Limbic_Region joined
[20:28] *** amv_ joined
[20:43] <xinming> putter: I compiled it without the perl5 embed, There will be segfaults too. :-/

[20:51] <putter> :(

[20:52] <putter> clean build?  no bits left over from a previous one?

[20:59] <xinming> putter: yes. I've even rm the dir and co again. :'(

[21:22] <putter> smoke of pil2js r8838 is up.

[21:22] <putter> xinming: what os, cpu, etc?

[21:22] <putter> version of ghc?

[21:27] *** lypanov joined
[21:31] <xinming> I use ghc 6.4, and cpu is barton 2500+ from AMD, and using debian testing.

[21:31] <xinming> gcc version is `gcc version 4.0.3 20051201 (prerelease) (Debian 4.0.2-5)`

[22:24] *** drbean joined
[22:34] <Juerd> gaal: What did you mean by "loaded" in "feather must be loaded"?

[22:34] <putter> xinming: ah, gcc 4.0.  that requires 6.4.1.  there's a note in INSTALL.

[22:35] <xinming> putter: Ok, I think I have compile ghc myself. :-/ I'll try that, thanks

[22:48] <putter> xinming: http://www.haskell.org/ghc/download_ghc_641.html has a debian binaries section.

[22:49] <putter> (I googled "debian ghc 6.4.1")

[23:00] <xinming> putter: hmm, I use testing, If I upgrade to 6.4.1, I have to upgrade many packages which are in unstable. :-/

[23:00] <xinming> putter: what Os you use by the way?

[23:01] <xinming> freebsd?

[23:10] *** feng123 joined
[23:11] *** grayson joined
[23:13] *** beppu joined
[23:13] <gaal> Juerd: evalbot was responding slowly. somebody forgot to nice their build but they reniced it when they noticed.

[23:14] <gaal> ?eval "am I slow now?"

[23:14] <evalbot_8838> "am I slow now?" 

[23:14] <gaal> I think now it's okay.

[23:18] <Juerd> gaal: Ah, okay. Thanks for reminding this somebody to nice their processes

[23:19] <Juerd> It's amazing how many people use unixlike systems at home, while having little or no experience with unix systems shared with other people :)

[23:20] <Juerd> I've been considering upgrading feather, by the way

[23:20] <mugwump> hardware or OS?

[23:20] <Juerd> Hardware. I do OS upgrades often.

[23:21] <Odin-> What's feather running, OSwise?

[23:21] <Juerd> Odin-: Debian GNU/Linux

[23:21] <Odin-> Which version?

[23:21] <Juerd> Odin-: Sid

[23:22] * rafl would appreciate that.

[23:23] <Juerd> I'd like a dual cpu system, possible amd64

[23:23] <Juerd> s/ble/bly/

[23:23] <gaal> RAM is probably the first priority, since if two people compile at the same time the machine risks thrashing

[23:24] <gaal> zZZ &

[23:25] <Juerd> gaal: Most of the time, and that's more than 95% of the day, half of the memory is available.

[23:25] <Juerd> gaal: I think making builds faster (and thus making memory available again faster) is more economic

[23:28] <Juerd> Oh, just to make things clear: don't expect such an upgrade soon :)

[23:29] <gaal> Juerd: if just *over* half is available then, fine, but otherwise consider that the danger band is longer than 5% of the time

[23:29] * gaal has no expectations, just cheery hopes regarding everything Perl 6

[23:29] <gaal> now where was that bed

[23:31] <Juerd> Hm, feather has only 1 GB of memory. I really thought it had 2

[23:31] <Juerd> Let's see what this board is capable of

[23:34] <Juerd> "Support for up to 2 GB system memory"

[23:34] <Juerd> Not much, but more than current

[23:38] <Juerd>     Bank: "DIMM0"

[23:38] <Juerd>     Size: 512 MB

[23:38] <Juerd>     Bank: "DIMM1"

[23:38] <Juerd>     Size: 512 MB

[23:39] <Juerd> That's unfortunate, though

