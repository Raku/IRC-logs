[00:21] *** pfenwick joined
[00:24] <svnbot6> r10778 | audreyt++ | * JS Prelude: Fix an incorrect use of reduce.

[00:29] <meppl> gute nacht

[00:35] <cognominal_> is ~{ whatever }   synonymous of  "{ whatever }"   ?

[00:35] <audreyt> ?eval ~{1}

[00:35] <evalbot_10746> "<SubBlock(<anon>)>"

[00:35] <audreyt> no. :)

[00:35] <audreyt> ?eval ~{1}()

[00:35] <evalbot_10746> "1"

[00:35] <audreyt> now that works

[00:52] *** shachaf_ joined
[00:55] *** hikozaemon joined
[01:06] *** Khisanth joined
[01:24] *** Ymmv joined
[01:39] *** mjk joined
[01:49] *** jiing_mIRC joined
[01:51] *** jiing_ joined
[02:29] *** ko1_away is now known as ko1

[02:30] *** christopher joined
[02:38] *** fglock joined
[02:41] <fglock> christopher: in case you backlog - the Pugs::Compiler::Rule tree is at misc/pX/Common

[02:41] <svnbot6> r10779 | fglock++ | Pugs-Compiler-Perl6 - P6.pm doesn't need exec(); added some operators to the emitter

[02:43] *** shachaf_ joined
[02:43] <christopher> fglock: thanks.  Is the one in perl5/ orphaned?

[02:44] <fglock> there was a plan to move it there, but the development went on in pX

[02:45] <christopher> fglock: Also, I got some regexes to work in the pugs shell (utilizing character classes) that don't seem supported yet in Pugs::Compiler::Rule.  I'm confused about where this support is coming from.

[02:45] *** shachaf joined
[02:45] <fglock> so I removed the one in perl5 today

[02:46] <fglock> pugs uses the PGE implementation, which is written in Parrot

[02:47] <christopher> Is the PGE implementation fuller in general?  Are you writing P::C::R just to avoid the parrot dependency?

[02:47] <fglock> the implementations are not in sync

[02:50] <fglock> there are missing features in both - some things are easier to implement in perl5

[02:50] <fglock> but parrot is more efficient

[02:52] <fglock> I hope P::C::R is easier for p5 people to contribute to

[02:57] <christopher> I still haven't traced through the operation of P::C::R, but to implement character classes, it looks like maybe you just need a metasyntax handler for them.  Are there any prototypes for metasyntax handlers yet, or would this be the first?

[03:00] <fglock> see Pugs/Emitter/Rule/Perl5.pm - the metasyntax is handled by a big sub in the end of this file; there is a separate implementation for :ratchet in lib/Pugs/Emitter/Perl5/Ratchet.pm

[03:00] <fglock> christopher: do you have a commit bit?

[03:01] <christopher> yes, a seldom-used one...

[03:02] <fglock> re: avoid parrot - no, the goal is to have pure-perl6 implementation (the grammar is already written in perl6)

[03:02] <fglock> s/have/have a/

[03:03] <fglock> maybe using Pugs::Compiler::Perl6

[03:04] <fglock> P::C::R uses a source filter for $/<0> - the idea is to use P::C::P6 to compile these snippets

[03:05] <fglock> and then rewrite P::C::Perl6 to P6 using itself

[03:15] *** stennie joined
[03:21] *** _SamB_ joined
[03:22] *** _SamB_ is now known as SamB

[03:23] *** FurnaceBoy joined
[03:28] *** stennie left
[03:36] <christopher> fglock: Not sure why I thought character classes didn't work previously.

[03:36] <christopher> But, I see that if I replace "Pugs::Compiler::Regex" with "Pugs::Compiler::Rule" when constructing my rules, the from() and to() on match objects gets screwed up.

[03:47] <fglock> christopher: Regex and Rule use different emitters - can you add a test?

[03:48] <christopher> fglock: done.

[03:48] <fglock> thanks!

[03:53] <fglock> christopher: this is a bit hard to fix - un-anchored match is a hack :(

[03:55] <fglock> Pugs::Compiler::Regex.pm line 126

[03:55] <fglock> from and to are not updated

[03:56] *** mako132_ joined
[03:56] <svnbot6> r10780 | fglock++ | Pugs-Compiler-Perl6 - imported t/01-sanity; 01-sanity/01-tap.t runs.

[03:56] <svnbot6> r10781 | malon++ | Duplicate from() and to() tests from P::C::Regex to P::C::Rule

[03:58] <fglock> sleep time here - I'll see it tomorrow &

[04:00] *** fglock left
[04:01] *** bsb joined
[04:12] <miyagawa> nothingmuch: http://unknownplace.org/cpanrecent/rss/author/nuffin

[04:26] <bsb> I just got the the "Ergo.. Everyone hates Ingy" slides... totally cracked me up

[04:27] <bsb> s/the/to/

[04:29] <gaal> bsb: moose!

[04:37] <bsb> hi gaal

[04:38] *** justatheory joined
[04:47] *** justatheory joined
[04:59] *** ko1 is now known as ko1_away

[05:07] *** iblechbot joined
[05:29] *** buetow joined
[05:34] *** stennie_ joined
[05:46] <ingy> everyone still hates me?

[05:48] <bsb> not after about slide 125 :)

[05:49] <bsb> ingy: I trust you've seen that talk?

[06:04] <QtPlatypus> bsb: Which talk is this?

[06:04] <ingy> the anti-ingy talk!

[06:04] <bsb> http://pugs.blogs.com/talks/npw06-deploying-perl6.pdf

[06:04] <bsb> although I've spoilt the punchline

[06:04] * ingy goes to sleep

[06:04] <ingy> hated...

[06:05] <bsb> no!

[06:05] <ingy> it's ok. be hated is the least of my worries

[06:05] <bsb> that can't be good

[06:05] <wolverian> who is your greatest worry?

[06:06] * ingy embraces the hatred

[06:06] <ingy> wolverian: the man

[06:09] <wolverian> damn I hate that guy.

[06:09] <ingy> all true mongers hate *that guy*

[06:10] <bsb> and The Man hates us...

[06:28] *** szbalint joined
[06:40] *** stennie_ joined
[06:59] *** SM_ax joined
[07:37] *** kane_ joined
[07:49] *** renormalist joined
[08:12] *** marmic joined
[08:27] *** mariuz joined
[08:47] *** rgs joined
[08:47] *** drrho joined
[08:54] *** macroron joined
[09:29] *** nine is now known as niner

[09:30] *** niner is now known as niner_

[09:30] *** niner_ is now known as niner

[09:30] *** niner is now known as nine_r

[09:30] *** nine_r is now known as niner

[09:38] *** lisppaste3 joined
[09:53] *** tup joined
[10:27] <renormalist> ?eval say "hello"

[10:27] <renormalist> damn :)

[10:28] <evalbot_10746> OUTPUT[hello ] Bool::True

[10:28] <renormalist> ah, ok

[10:28] <renormalist> ?eval say 1; say 2; say 3;

[10:29] <evalbot_10746> OUTPUT[1 2 3 ] Bool::True

[10:29] <renormalist> ?eval say for [1,2,3];

[10:29] <evalbot_10746> OUTPUT[ ] undef

[10:30] <renormalist> What I'm trying to tell: My pugs doesn't print newlines after "say" if done in a "for" loop. Compare "say 1; say 2; say 3;" versus "say for [1,2,3];". What's the difference?

[10:33] <renormalist> Stupid me. It has to be:   say for (1,2,3);

[10:34] <renormalist> Even "say for 1,2,3;" works. Ignore me. :-)

[10:38] *** scw joined
[11:00] *** chris2 joined
[11:08] *** Aankhen`` joined
[11:27] <svnbot6> r10782 | audreyt++ | * add concurrency example directory

[11:28] *** visq joined
[11:28] <svnbot6> r10783 | audreyt++ | * Pugs.Prim: Implement &retry and &Code::retry_with as specced in

[11:28] <svnbot6> r10783 | audreyt++ |   liz's Concurrency Spec Draft.

[11:28] <svnbot6> r10784 | audreyt++ | * examples/concurrency/stm-retry-with.pl - demo from the STM

[11:28] <svnbot6> r10784 | audreyt++ |   features "atomically", "retry" and "retry_with".  Help needed

[11:28] <svnbot6> r10784 | audreyt++ |   to convert that to a proper unit test.

[11:30] *** cochrane joined
[11:34] *** penk joined
[11:37] <svnbot6> r10785 | renormalist++ | - minifix in Overview.pod: elems gives number of elements, not last element

[11:41] *** meppl joined
[11:44] *** meppl joined
[11:53] *** jsiracusa joined
[11:55] *** bjoern_ joined
[11:57] *** meppl joined
[12:13] <cognominal_>  $text ~~ /<?ident>/  &&  print %hash{~$/};   # I suppose the necessity of a ~  means that a hash keys is not necessarily a string

[12:13] <audreyt> ys

[12:14] <audreyt> but otoh, in this case {$/} is prolly good enough

[12:15] <cognominal_> because the default value for a Match in scalar context is a string.

[12:15] <audreyt> yeah.

[12:16] * cognominal_ note that Perl6 is overingeenired... just like is de facto a natural language after centuries of use.

[12:16] <cognominal_> overengineered...

[12:17] <audreyt> well, perl is overengineered...

[12:17] <cognominal_> that will be a tough sell for people obsessed by regularity

[12:18] <theorbtwo> People obsessed by regularity should feel free to put in redundant ~s.

[12:18] <audreyt> for people obsessed with regularity, they know where to find Scheme

[12:18] <theorbtwo> ...or use a more regular language.

[12:20] <cognominal_> well. I read a few mail in a recent thread. If the only argument we find for people not groking Perl is "I pity you". we are in a slippy slope.

[12:20] <QtPlatypus> cognominal_: Why?

[12:21] *** visq joined
[12:21] <theorbtwo> I rather agree.

[12:21] <cognominal_> The happy few mentality is a dangerous one.

[12:21] <cognominal_> And it does not help to get a job doing what you like

[12:22] *** elmex joined
[12:22] <QtPlatypus> People should use a lanaguge that maps to there brainspace.  Some people have unperlish brainspaces.  Forcing them to use perl is just as bad as using forcing a perler to use something non perl.

[12:22] <cognominal_> I am not advocating everyone to jump on our boat either :)

[12:23] <cognominal_> we almost have the language, we probably have to invent the media...

[12:24] <audreyt> The Medium is the Message...

[12:24] <audreyt> </McLuhan>

[12:24] <rgs> P5 is overengineered too, but almost noone notices

[12:24] <rgs> because it keeps dwimming

[12:24] <cognominal_> Like Woody Allen, /me pulls a Marshall McLuhan

[12:25] <cognominal_> p5 has been stretched over any reasonnable limit.

[12:25] <rgs> we don't like being reasonable.

[12:25] <cognominal_> Considering the modesty of Perl1, it just proves that the initial concepts were right.

[12:26] <audreyt> initial concepts, you mean like FORMATS? :)

[12:26] <theorbtwo> We do, however, need to find a good niche on the slippery slope where we won't keep rolling downwards.

[12:26] <cognominal_> I don't know any language who started so modest and grew so big in compatible ways

[12:26] <audreyt> er, uhm, BASIC

[12:26] <rgs> FROMATS

[12:28] <cognominal_> apparently a good way to grow is to get infected by good functional memes?

[12:29] <audreyt> well, anything far from the current gene pool is bound to be good

[12:29] <audreyt> or shocking

[12:29] <audreyt> most likely both

[12:30] <cognominal_> yea, that's my point, the Perl5 communauty was becoming shockingly inbred

[12:30] <cognominal_> s/Perl5/Core Perl5/

[12:31] <rgs> well, evolving perl 5 is near to impossible

[12:31] <renormalist> Sth completely different:   Is docs/Perl6/Overview.pod meant to be document how it will work in future or should it match to current Pugs possibilities? (I'm thinking about a regex example in it, that would still need a rx:P5 currently, but not in future, probably)

[12:32] <cognominal_> rgs: tu l'as dit. bouffi

[12:32] *** buetow joined
[12:53] *** EarleMartin joined
[13:01] *** paultcochrane joined
[13:03] *** paultcochrane joined
[13:14] *** dfan joined
[13:19] *** Limbic_Region joined
[13:20] <Limbic_Region> Juerd ping

[13:20] <audreyt> renormalist: huh, rx:P5?

[13:21] <audreyt> renormalist: you can use real regexes today in both Overview.pod and pugs code

[13:21] <audreyt> it's meant to be how it ought to work

[13:22] <Limbic_Region> audreyt - pugs uses pcre for p5 regexen correct?

[13:23] <audreyt> yup

[13:23] <audreyt> breakfast, brb

[13:23] <Limbic_Region> so only those regexen features supported by pcre are available to pugs - do you know if that's @larry's intention for p6?

[13:23] <Limbic_Region> enjoy ;-)

[13:23] <audreyt> eh pcre is a _superset_.

[13:24] <audreyt> to p5

[13:24] <audreyt> I havn't implemented the callback hook

[13:24] <audreyt> but otherwise it should be a strict superset

[13:24] *** bsb joined
[13:25] <Limbic_Region> by callback hook, I assume you mean ? and ?? code constructs

[13:25] <Limbic_Region> or /e

[13:25] <audreyt> yup

[13:25] <audreyt> there is no /e

[13:25] <audreyt> use

[13:26] <audreyt> s:P5/.../{code}/

[13:26] <audreyt> which is far cleaner

[13:26] <audreyt> callback hook is actually quite trivial to do

[13:26] <audreyt> but havn't seen any need yet

[13:26] <Limbic_Region> ok - so by superset - you mean that pcre shouldn't choke on anything p5 is able to handle and some things p5 can't - pcre can?

[13:27] <audreyt> yeah

[13:27] <audreyt> like variable length lookbehind

[13:27] <audreyt> p5 can't do that

[13:27] <Limbic_Region> oh, well features were what I was thinking of - but that's nice too

[13:27] <Limbic_Region> I was thinking more along the lines of hairy regexen which cause p5 to throw-up

[13:28] <audreyt> nod. the bleadperl engine is much better

[13:28] <audreyt> at not crashing the stack

[13:28] <Limbic_Region> many of which were recently fixed (in bleed perl) when ...

[13:28] <Limbic_Region> yeah - just what I was about to say

[13:28] <audreyt> yeah, but PCRE should handle those fine too

[13:28] <Limbic_Region> ok - so do you know the plan for p6?

[13:28] <audreyt> the :P5 is specced to support p5 regexen

[13:28] <audreyt> I imagine PCRE is good enough

[13:29] <audreyt> on environments where we can't reliably bundled a libperl runtime

[13:29] <Limbic_Region> I know japhy (IIRC) was working on a p5 regex parser which would theoretically allow p5 regexen to be done in rules

[13:29] <audreyt> that's a possibility too.

[13:29] <audreyt> but as I said, it should handle what the p5 unit test suite

[13:29] <audreyt> tests its regex

[13:29] <audreyt> at least

[13:29] <Limbic_Region> *shrug* - doesn't really matter to me.  I am a regex neophyte anyway

[13:29] <audreyt> and pcre I think does that.

[13:29] <Limbic_Region> just wondering

[13:30] <audreyt> k :)

[13:30] <audreyt> brb

[13:37] *** christopher joined
[13:40] <Juerd> Limbic_Region: pong

[13:42] <Limbic_Region> did you change the hardcoding in cgi:irc intentionally or did something happen I should make you aware of?

[13:42] <Limbic_Region> specifcally for #perl6 and #parrot

[13:45] <renormalist> damn, now I missed the answers. Real regexes? I'm too slow for Pugs. Is there something special needed during compiling Pugs, eg. PUGS_EMBED="parrot"?

[13:46] <theorbtwo> http://colabti.de/irclogger/irclogger_log/perl6?date=2006-06-21 (start at the bottom).

[13:47] <Juerd> Limbic_Region: That depends - what has changed?

[13:48] <Juerd> timeout :) afk

[13:49] *** ludan joined
[13:52] <audreyt> renormalist: no

[13:52] <audreyt> renormalist: just put parrot in your ENV path

[13:52] <audreyt> that's all you need to use real p6 regexes

[13:52] <audreyt> as well as rules and tokens

[13:53] *** amnesiac joined
[13:54] *** rzoz joined
[13:54] <renormalist> during compiling  pugs or at runtime? I had an old/defunct parrot during my last pugs-compile.In the meantime, parrot is ok.  Do I have to Recompile Pugs?

[13:57] <renormalist> My initial problem is, that the example regex from Perl6/Overview.pod doesn't work for me:     $email ~~ /([^@]+)@(.+)/   while with rx:P5  it does match.

[13:57] <renormalist> ?eval [email@hidden.address] ~~  /([^@]+)@(.+)/

[13:57] <evalbot_10746> Match.new(   ok => Bool::False,    from => 0,    to => 0,    str => "",    sub_pos => (),    sub_named => {} )

[13:57] <renormalist> ?eval [email@hidden.address] ~~  rx:P5 /([^@]+)@(.+)/

[13:57] <evalbot_10746> Match.new(   ok => Bool::True,    from => 0,    to => 15,    str => [email@hidden.address]    sub_pos =>     (Match.new(        ok => Bool::True,         from => 0,         to => 4,         str => "affe",         sub_pos => (),         sub_named => {}      ),       Match.new(        ok => Bool::True,         from => 5,         to => 15,         str => "zomtec.org",         sub_pos => (),         sub_named => {}      )),    sub_named => {} )

[14:00] <Limbic_Region> Juerd - sorry, got pulled away

[14:00] <audreyt> at runtime

[14:00] <Limbic_Region> Juerd - it is no longer hardcoded for #perl6 on freenode and #parrot on irc.perl.org

[14:01] <audreyt> ?eval 'a@a' ~~ rx/([^@]+)\@(.+)/

[14:01] <evalbot_10746> Match.new(   ok => Bool::False,    from => 0,    to => 0,    str => "",    sub_pos => (),    sub_named => {} )

[14:01] <Limbic_Region> IOW - it is now possible to select #perl6 on irc.perl.org

[14:02] <audreyt> it's just syntax.

[14:02] <audreyt> renormalist:

[14:02] <audreyt> ?eval 'foo@bar' ~~ /(<-[@]>+)@(.+)/

[14:02] <Juerd> Limbic_Region: That's weird.

[14:02] <evalbot_10746> Match.new(   ok => Bool::True,    from => 0,    to => 7,    str => "foo@bar",    sub_pos =>     (Match.new(        ok => Bool::True,         from => 0,         to => 3,         str => "foo",         sub_pos => (),         sub_named => {}      ),       Match.new(        ok => Bool::True,         from => 4,         to => 7,         str => "bar",         sub_pos => (),         sub_named => {}      )),    sub_named => {} )

[14:02] <audreyt> the charclass syntax changed is all

[14:03] <Juerd> I think the dist upgrade changed this back :(

[14:03] <audreyt> instead of [^abc] write <-[abc]>

[14:03] <cognominal_> WOW?

[14:03] <Juerd> Limbic_Region: When I have time, I will fix it.

[14:03] <cognominal_> IRL?

[14:03] <cognominal_> oops

[14:03] <Limbic_Region> Juerd - well, you told me to let you know if anything about cgi:irc changed

[14:03] <Juerd> <[]> sucks so much :(

[14:03] <audreyt> [] rocks so much

[14:03] <Limbic_Region> no worries Juerd - I know which goes with which

[14:03] <audreyt> tradeoffs, tradeoffs

[14:03] <Juerd> Limbic_Region: Yep, and it's important that I know this :)

[14:04] <renormalist> audreyt: Nize. Works. Should I update Overview.pod to use that?

[14:05] <Juerd> audreyt: Well, the way I would like the regex syntax to be, <> would be available :)

[14:05] <audreyt> renormalist: please do

[14:06] *** fglock joined
[14:08] <svnbot6> r10786 | renormalist++ | - Overview.pod: corrected regex example

[14:10] *** vel joined
[14:11] <audreyt> renormalist++

[14:11] * audreyt resumes chglogging and releng

[14:12] <audreyt> fglock: update ChangeLog to reflect pX state?

[14:12] <audreyt> bbiab

[14:12] <fglock> audreyt: ok

[14:12] <fglock> any idea on how to make p5 'use v6' to call a module?

[14:13] <audreyt> use v6-pugs;

[14:13] <audreyt> note the dash immediately after

[14:13] <audreyt> that's all

[14:13] <fglock> didn't work the first time I tried - will try again

[14:13] <audreyt> try at cmdline

[14:13] <audreyt> perl -e 'use v9-pugs'

[14:14] <fglock> it should emit an error, right? I got no message

[14:15] <audreyt> eh

[14:15] <fglock> perl 5.8.7 here

[14:15] <audreyt> you prolly already have v6.pm installed

[14:15] <audreyt> try change that to v9

[14:15] <audreyt> or v10

[14:15] <audreyt> pugs ships with a stub v6.pm at this moment

[14:15] <audreyt> feel free to change lib/v6.pm to call into lrep

[14:15] <audreyt> that's what it was designed to do

[14:16] <fglock> cool - thanks!

[14:16] <audreyt> so I'm glad pX is at a state where it can become useful

[14:16] <audreyt> yay

[14:16] <audreyt> fglock++

[14:16] <fglock> did you see hello_world.pl ?

[14:16] <fglock> it runs already

[14:16] <audreyt> yup :)

[14:16] <audreyt> so please s/P6/v6/

[14:17] *** rgs joined
[14:17] <audreyt> and have fun :)

[14:17] <audreyt> &

[14:19] *** stennie_ left
[14:26] *** pfenwick left
[14:30] *** paultcochrane joined
[14:30] *** buetow joined
[14:30] *** bjoern_ joined
[14:30] *** lisppaste3 joined
[14:30] *** renormalist joined
[14:30] *** kane_ joined
[14:30] *** SM_ax joined
[14:30] *** alch` joined
[14:30] *** kanru joined
[14:30] *** buubot joined
[14:30] *** pasteling joined
[14:30] *** kolibrie joined
[14:30] *** evalbot_10746 joined
[14:30] *** jabbot joined
[14:30] *** locksy joined
[14:30] *** revdiablo joined
[14:30] *** dvorak joined
[14:30] *** takesako joined
[14:30] *** obra joined
[14:30] *** perlbot joined
[14:30] *** xerox__ joined
[14:53] <svnbot6> r10787 | fglock++ | Pugs-Compiler-Perl6 - s/use P6/use v6-pugs/

[14:56] *** miyagawa joined
[14:59] <svnbot6> r10790 | fglock++ | Pugs-Compiler-Perl6 - pass 01-sanity/02-counter.t

[15:03] <stevan> audreyt: I could not agree more

[15:04] <stevan> when Perl 6 comes out,.. everyday *will* be like Christmas!

[15:04] <fglock> audreyt: P::C::P6::v6.pm will conflict with Inline::Pugs::v6.pm if both are installed

[15:09] <fglock> we could have a main v6.pm interface that dispatches to an implementation

[15:10] <Limbic_Region> what's the svn/svk command to report who made what change?

[15:12] <clkao> blame

[15:12] <Limbic_Region> thanks

[15:14] <svnbot6> r10791 | fglock++ | Pugs-Compiler-Perl6 - pass 01-sanity/03-equal.t

[15:15] <audreyt> fglock: just kill the inline one

[15:15] <audreyt> it's just stub.

[15:15] <audreyt> "svk ann" is shorter than blame

[15:15] <audreyt> and is more politically correct

[15:15] <audreyt> "svk praise" if you don't mind typing

[15:15] <audreyt> fglock: the inline one is a placeholder because PCP was not working

[15:16] <audreyt> now that it is, simply take it off

[15:16] <audreyt> use v6-pugs; # is just fine

[15:16] <audreyt> to delegate to PCP, that is

[15:16] <fglock> should I use Moose as the p5 target, or is this overkill?

[15:17] <audreyt> I think Moose is the perfect p5 target

[15:17] <fglock> use v6-moose

[15:17] <audreyt> v6-pugs; should simply target moose

[15:17] <audreyt> that should be implied

[15:17] <fglock> ok

[15:17] <audreyt> to take advantage of Moosee::Autobox and friends

[15:18] <audreyt> stevan: glad you like my slides :)

[15:18] <audreyt> 90% of it is existing material... but seriously rearranged

[15:18] <obra> audreyt: I was very amused to see the pieces of that talk

[15:20] <stevan> audreyt: it was very cool,.. kind of a greatest hits collection

[15:20] <stevan> the Audrey Tang - Box Set if you will

[15:20] <stevan> 289 pages of classic slides

[15:20] <audreyt> and I maxed out the unicode use :)

[15:20] <stevan> :)

[15:21] * rgs waits for the dvd deluxe edition

[15:21] * stevan will sell rgs one for 6 easy payments of $19.95 USD

[15:21] <stevan> plus shipping and handling

[15:21] <stevan> 1-800-I-WANT-PERL6

[15:21] <stevan> operators are standing by

[15:22] *** chris2 joined
[15:22] <stevan> call now and we throw in a free Chicken Rotiseree

[15:22] <fglock> do you have a web page?

[15:23] <fglock> mmm chicken - lunch time &

[15:29] <stevan> fglock: re: Moose::Autobox - not that the API does not 100% match the Perl 6 API, and it is very experimental and prone to change (most likely to be closer to Perl 6)

[15:29] <stevan> s/- not/- note/

[15:29] <audreyt> stevan: oh "subset" makes more sense than "subtype"

[15:29] <audreyt> because subtype adds capability

[15:29] <audreyt> and subsets takes away

[15:29] <stevan> yeah true

[15:31] <stevan> well in Moose it kind of does both

[15:31] <stevan> the subtype is created (adding capability)

[15:31] <stevan> but it restricts (taking away)

[15:32] <audreyt> uh, no

[15:32] <audreyt> in normal OO usage

[15:33] <audreyt> a subtype is more like adding new behaviour to an existing type's behaviour

[15:33] <audreyt> but moose subtypes add no behaviour of its own...

[15:34] <audreyt> or does it?

[15:34] *** justatheory joined
[15:34] <stevan> well,.. it creates a new constraint

[15:35] <stevan> its kind of odd,.. because there is no existing type system it can actually hook into

[15:35] <stevan> and it cannot be enforced outside of accessors

[15:36] <stevan> (well it can,... but its really verbose to do so)

[15:36] <stevan> but the subtype does actually create a meta object

[15:38] *** vel joined
[15:40] <audreyt> nod

[15:41] <stevan> moose "subtypes" will never be correct

[15:41] <stevan> since we cannot hook into the existing type system

[15:41] <stevan> or actually create our own

[15:42] <stevan> (we could abuse tie(), but thats makes it less usable)

[15:46] <stevan> maybe Moose::Autobox will lead to a sane type system overlay

[15:46] * stevan really needs to start reading TaPL again

[15:46] <stevan> I think I have read pretty much every MOP book in existsence at this point

[15:46] <TimToady> nm

[15:47] <TimToady> beware, look what it did to Audrey...

[15:47] <stevan> :)

[15:47] <obra> TimToady++

[15:47] <chip> good day

[15:47] <TimToady> Scheme and Lisp, eh?

[15:47] <TimToady> I think it's a good direction, under the covers at least.

[15:48] *** visq joined
[15:48] <chip> well, it's more just Scheme really.  But I hate to dis the Lisp brethren

[15:48] <TimToady> Actually, all you have to do now is port Haskell...  :P

[15:49] <PerlJam> and make it *fast*  :)

[15:49] <TimToady> details, details...

[15:49] <chip> Having learned a new verb tense doesn't automatically qualify me to talk about time travel

[15:49] <TimToady> chip++

[15:50] <chip> a fellow on #scheme wrote a nice description of how unwind-protect could be reasonably defined for Scheme (where "I'm leaving the scope" is not a simple concept), and that clued me in

[15:51] <chip> Taylor Campbell  http://mumble.net/~campbell/blog.txt   most of the content is silly, oddly enough

[15:54] <chip> audreyt: can you use the equivalent of dynamic-wind productively, and do you agree that the third thunk (for "the scope has been left once and for all") is useful?

[15:54] * chip actually isn't too sure about that one

[15:55] <PerlJam> chip: being an ignorant non-language-implementor-but-having-implemented-one-or-two-in-the-past, it seemed reasonable to me when I read your email.

[15:57] <chip> PerlJam: struck me the same way :-)  Thing is, the Scheme primitive only supports the "enter" and "leave" thunks; the third one, for "the last continuation has left the building" is actually kind of the odd one out.  For example, if I've been holding a continuation, and through a GC cascade that last continuation is discarded, that event will trigger the "elvis" callback, at an obviously non-obvious time

[15:58] <chip> it's the closest thing to "finally" you can get when you have all those continuations floating around

[16:01] <PerlJam> I wonder if there are instances in the wild of where Schemers have implemented a work around to get those semantics.

[16:01] <chip> it's easy enough with a closure and GC.  Which maybe is my answer :-)

[16:02] <TimToady> there's a sense in which that third thunk is the Monadic thunk, in the Haskell sense.  It's what controls the side effects that aren't undoable.

[16:03] <TimToady> as in a QM computer that's reversible until you try to observe it, the third thunk is the "observer".

[16:04] <TimToady> all QM is just quantum foam plus persistent accounting errors.  We're the accounting errors...  :)

[16:05] * chip narrowly avoids quoting the Matrix architect's atrociously clunky monologue

[16:06] <fglock> what is the perl 6 way to say: use v6; print 6; use v5; print 5; use v6;

[16:07] <audreyt> ...exactly that?

[16:07] <chip> fglock: system <</usr/bin/perl -e>>, "print 5"   ?

[16:07] * chip kids

[16:08] <TimToady> druther have something that looks well scoped, like we did with file-scoped packages vs embedded package blocks...

[16:08] <audreyt> clkao: I havn't used the 3rd form of unwind

[16:09] <audreyt> s/clkao/chip/

[16:10] <chip> audreyt: there is no third form in the real one

[16:11] <TimToady> package perl5:foo { ... } or some such

[16:11] <chip> audreyt: I introduced it since I figured people would want it

[16:11] <ingy> morning

[16:11] <audreyt> ingy: hey!

[16:12] <ingy> hi audreyt

[16:12] <TimToady> hey ingy, I don't care what everyone says, I think you're okay.

[16:12] <ingy> are you going to ms today?

[16:12] <TimToady> What's in Mississippi? :)

[16:13] <ingy> TimToady: thanks

[16:13] *** snowstalker joined
[16:13] <ingy> a hillbilly monopoly

[16:15] *** pmurias joined
[16:15] <pmurias> hi

[16:16] <audreyt> ingy: yes, probably going to hack CLR<->PIL today

[16:17] <ingy> cool

[16:17] <pmurias> fglock: can i run add-svn-props on PCP6?

[16:18] *** iblechbot joined
[16:18] <audreyt> ingy: so how's your sched looklike in the next 72hr?

[16:19] <ingy> I leave for Chicago in 30 hours. free until then

[16:22] <audreyt> hrm

[16:22] <audreyt> I don't know... pickmeup and meet for dinner?

[16:23] <ingy> at the hotel?

[16:23] <ingy> I remember how to get there... what time

[16:23] <snowstalker> Hello all. If I know Perl 5, and know zilch about Perl 6, where can I start to contribute a little? :-)

[16:24] <ingy> snowstalker: here

[16:24] <ingy> :)

[16:24] <TimToady> the buck starts here, as it were...

[16:24] <snowstalker> ingy, Great. At least I started on the right foot ;-)

[16:25] <snowstalker> TimToady, Greetings :)

[16:25] <fglock> pmurias: sure

[16:25] <TimToady> welcome!

[16:25] <audreyt> ingy: well, actually we can meet the main campus building 35

[16:25] <TimToady> biab &

[16:26] <audreyt> snowstalker: you have a commit bit, right? )

[16:26] <audreyt> :)

[16:26] <snowstalker> audreyt, yep :-D

[16:26] <audreyt> ok. talk to fglock here as I'm about to run :)

[16:26] <snowstalker> audreyt, although not sure how to use it yet

[16:26] <pmurias> snowstalker: a perl5 implementaion can be found in misc/pX

[16:27] <snowstalker> audreyt, okay

[16:27] <pmurias> although it's (much) less advanced then the haskell one

[16:27] <fglock> snowstalker: hi :)

[16:27] <audreyt> ingy: do you know how to drive to main campus?

[16:27] <ingy> audreyt: I don't know where that is.

[16:28] <snowstalker> pmurias, All I need is perl 5 to run whatever is in misc/pX ?

[16:28] <ingy> msg me an address

[16:28] <snowstalker> fglock, Hello :)

[16:28] <audreyt> ingy: "1 Microsoft Way"

[16:29] <ingy> gah

[16:29] <fglock> snowstalker: cd to Pugs-Compiler-Perl6, and perl -Ilib hello_world.pl (you'll need PadWalker and Parse::YAPP at least, I think)

[16:30] <snowstalker> fglock, ok I need to install PadWalker, will start there :)

[16:30] <fglock> you can install Pugs::Compiler::Regex from CPAN, it will get PadWalker

[16:30] <fglock> Pugs::Compiler::Rule, actually

[16:30] <snowstalker> fglock, ok

[16:30] <ingy> audreyt: what time?

[16:31] <audreyt> ingy: does 5pm sound about right?

[16:31] <ingy> ok. will you have irc there?

[16:32] <audreyt> no... use cellphone

[16:32] <ingy> ok, I'll ring you once and you call back

[16:32] <audreyt> 'k

[16:33] <ingy> for this job...

[16:34] <ingy> we should have shotguns

[16:36] <fglock> oops - I lost my ChangeLog changes

[16:42] <svnbot6> r10792 | pmurias++ | fixed line endings

[16:42] <pmurias> fglock: do you like Attribute::Handlers?

[16:49] <pmurias> fglock: sorry i screw Emitter/Perl5.pm

[16:49] <svnbot6> r10793 | fglock++ | Pugs-Compiler-Rule swallows Pugs-Compiler-Precedence

[16:49] <pmurias> fixing it...

[16:49] <pasteling> "snowstalker" at 221.134.203.185 pasted "Pugs-Compiler-Perl6 doesn't compile :-)" (14 lines, 1.3K) at http://sial.org/pbot/17896

[16:50] <snowstalker> fglock, I tried running perl -Ilib helloworld.pl but I get an error, is that normal? It's at http://sial.org/pbot/17896

[16:50] <pmurias> run Makefile.pl from Pugs::Compiler::Rule

[16:50] <pmurias> and make

[16:50] <pmurias> or something similar

[16:51] <fglock> please svn up again - I just changed Makefile.PL

[16:52] <snowstalker> pmurias, When I try to install Pugs::Compiler::Rule using command line 'cpan', it says   ftp://ftp.perl.org/pub/CPAN/authors/id/F/FG/FGLOCK/Pugs-Compiler-Rule-0.05.tar.gz

[16:52] <snowstalker> LWP failed with code[404] message[File 'Pugs-Compiler-Rule-0.05.tar.gz' not found]

[16:52] <snowstalker> fglock, oh okay

[16:54] *** penk left
[16:54] <snowstalker> fglock, I'm at rev 10794, but still see the same error...

[16:54] <kolibrie> fglock: I'm getting the same on feather in my homedir

[16:55] <fglock> checking...

[16:56] * kolibrie wonders if it is because perl5 is trying to use Pugs/Grammar/Rule before a .pmc of it has been made

[16:57] <fglock> perl Makefile.PL / make should take care of the .pmc file

[16:57] <fglock> it works here

[16:57] <kolibrie> fglock: so first go into Pugs-Compiler-Rule and perl Makefile.PL

[16:58] <kolibrie> and then perl -Ilib hello_world.pl ?

[16:58] <fglock> yes, in PC-P6 - but pmurias needs to commit a fix :)

[16:59] * kolibrie twiddles his thumbs

[17:00] * snowstalker did what kolibrie said but sees new errors such as "use" not allowed in expression ...

[17:01] <kolibrie> snowstalker: this is all bleeding edge, btw

[17:01] *** penk joined
[17:02] <kolibrie> fglock: is that what pmurias is fixing?

[17:02] <snowstalker> kolibrie, I get that now. It's just that Day 1 in this p6 world is confusing to me :). Still wondering what a .pmc file is ... etc , Can you tell me which docs I should be reading for all of this?

[17:02] <fglock> yes - a svn message slipped into the source file

[17:03] <kolibrie> snowstalker: this particular hello_world.pl was only written yesterday

[17:03] <svnbot6> r10795 | fglock++ | Pugs-Compiler-Rule - TODOize 2 tests

[17:03] <fglock> snowstalker: .pmc is a perl5 reserved file type for "compiled perl"

[17:04] <kolibrie> snowstalker: hmm, the synopses have a lot about Perl 6 the language

[17:04] <fglock> the perl6-to-perl5 compiler takes a .pl source and generates a .pmc, which contains perl5 code

[17:05] <kolibrie> snowstalker: a lot of the pugs, particularly the pX part, are not documented so well, and change from week to week.

[17:05] <audreyt> snowstalker: btw, add yourself to AUTHORS

[17:06] <kolibrie> snowstalker: hanging out here helps, and reading http://pugs.blogs.com

[17:06] <snowstalker> kolibrie, Yesterday? Damn! That *is* cutting-edge

[17:06] <snowstalker> fglock, what does the "mc" stand for ?

[17:06] <fglock> fixed

[17:07] <kolibrie> snowstalker: .pm (perl module) -> .pmc (perl module compiled)

[17:07] <svnbot6> r10796 | fglock++ | Pugs-Compiler-Perl6 - lib/Pugs/Emitter/Perl6/Perl5.pm fixed

[17:07] <fglock> maybe "perl module compiled"?

[17:07] <snowstalker> kolibrie, I'm looking at  http://svn.openfoundry.org/pugs/docs/getting_started

[17:07] <fglock> please retry hello_world.pl

[17:07] <snowstalker> audreyt, but I haven't even done anything yet :)

[17:07] <snowstalker> kolibrie, aah ok

[17:07] <snowstalker> fglock, ok

[17:08] <pmurias> flock: you were faster with the commit :) i got an merge message from svk

[17:08] <pmurias> s/flock/fglock/

[17:09] <fglock> pmurias: no problem :)

[17:09] <audreyt> snowstalker: that's a good way to test commit

[17:09] <snowstalker> fglock, yippee, It works :)

[17:09] <audreyt> customarily the first checkin

[17:09] <snowstalker> audreyt, oh okay :)

[17:09] <fglock> snowstalker: look at the hello_world.pmc file

[17:10] <snowstalker> fglock, btw it said unrecognized token ''

[17:10] <snowstalker>  at pugs/misc/pX/Common/Pugs-Compiler-Perl6/lib/Pugs/Grammar/Perl6.pm line 14

[17:10] <pmurias> fglock: what tests are supposed to pass

[17:11] <pmurias> ?

[17:11] <fglock> that's just a warning - it had many more yesterday :)

[17:11] <snowstalker> fglock, so it converted p6 to p5, if i understand it correctly ?

[17:11] <snowstalker> fglock, hehe

[17:11] <fglock> the 3 first tests in 01-sanity should pass

[17:11] <fglock> snowstalker: yes!

[17:11] <snowstalker> fglock, gr8

[17:12] <fglock> try running hello_world.pl again - it will reuse the .pmc file

[17:14] <snowstalker> fglock, yeah it looks like it did because it didn't give the warning again

[17:14] <audreyt> fglock: want to carry your journal over or mirror it at pugs.blogs.com?

[17:15] <fglock> audreyt: which you find better

[17:15] *** bernhard joined
[17:15] <audreyt> either is fine but I'd like you (and also any interested #perl6'ers0 to cowrite pugs.blogs.com

[17:16] <audreyt> a journal bit is in your inbox now :)

[17:16] <fglock> ok!

[17:19] <svnbot6> r10797 | snowstalker++ | Adding my name here because audreyt told me to ( http://colabti.de/irclogger/irclogger_log/perl6?date=2006-06-21,Wed&sel=340#l550 ) :-)

[17:19] <fglock> audreyt: is it ok to remove the shebang from .t files? it tells p5 to run pugs...

[17:19] <fglock> or is there a workaround?

[17:22] <audreyt> killall #! lines i'd say

[17:22] <audreyt> or change them to a neutral #!perl6

[17:25] <pmurias> fglock: why does generating the .pmc take so much time?

[17:26] <fglock> pmurias: it is using the old backtracking rules - :ratchet can't run all the syntax needed yet

[17:26] <fglock> audreyt: ok

[17:27] <pmurias> what else is needed in :ratchet?

[17:28] <fglock> hashes and arrays - maybe some extra details

[17:29] <fglock> currently ratchet and non-ratchet rules have problems calling each other, but that's not a problem if you convert everything to non-ratchet

[17:29] *** frederico joined
[17:30] *** bsb left
[17:33] <snowstalker> Are the HTML versions of the synopses at http://dev.perl.org/perl6/doc/synopsis.html kept up to date with the svn versions ?

[17:35] <audreyt> yup

[17:37] *** amnesiac joined
[17:42] <ingy> audreyt: gnip

[17:43] * ingy finally clues in on the meaning of Gnip Gnop (after 30 some years)

[17:44] <TimToady> snowstalker: they should be at most 6 hours out of date, last I knew.

[17:45] *** Southen joined
[17:45] <audreyt> ingy: gnop

[17:45] <audreyt> ingy: maybe 5:30p is better

[17:45] <audreyt> (I'm just about to leave hotel now)

[17:45] <audreyt> going to hack on Microsoft Phoenix it seems

[17:46] <audreyt> that codename seems to be popular

[17:46] <snowstalker> audreyt, TimToady, ok cool

[17:46] <audreyt> hopefully it will not get changed to Microsoft Firebird ;)

[17:46] <ingy> audreyt: maybe just call me when you get back to the hotel room

[17:46] <ingy> instead

[17:46] <pmurias> fglock: my $fixity = $n->{fixity} doesn't seem to work when put in _emit

[17:46] <audreyt> ok ok.

[17:47] <ingy> we don't have to bind on dinner or else

[17:47] <ingy> but if you feel like hanging out, I'll gladly come over

[17:48] * ingy attempts to minimize stress

[17:48] <fglock> pmurias: some nodes don't have a fixity

[17:48] <ingy> audreyt: I wanted to ask you a q, I msged you over to the right

[17:49] <audreyt> I didn't see it

[17:49] <audreyt> try again

[17:50] *** Ymmv joined
[17:51] <pmurias> it is undefined for *all* nodes

[17:51] <pmurias> i implemented a hash based dispath for those that have

[17:52] <pmurias> but can't get it to work because of that

[17:55] <pmurias> looked at P::E::R::P5, there's pretty quoting in there

[17:55] <svnbot6> r10798 | fglock++ | Pugs-Compiler-Perl6 - implemented 'if'; but parser error in 04-if.t

[17:57] <pmurias> it could be cleaned up with ruby style interpolation

[17:57] <fglock> pmurias: example?

[17:57] <pmurias> eq. "#{$var}"

[17:58] <pmurias> or

[17:58] <pmurias> "#{expr}" more generally

[17:59] <fglock> I'm ok with that

[17:59] *** FurnaceBoy joined
[18:00] <pmurias> will do it later

[18:01] <ingy> fglock: ping

[18:01] <pmurias> bbiab

[18:02] <fglock> ingy: pong

[18:03] <ingy> why is P-C-R/{Makefile|blib|pm_to_blib} checked in?

[18:03] <ingy> I'm getting conflicts on them

[18:04] <fglock> probably by mistake - please remove them

[18:04] <fglock> thanks

[18:04] <ingy> ok

[18:05] <nothingmuch> ingy: møøø

[18:05] <nothingmuch> merlyn complained about MC btw

[18:05] <nothingmuch> he said that i should have written 'use tt' with Inline

[18:05] <ingy> he's wrong

[18:05] <nothingmuch> yeah, i told him so

[18:05] <nothingmuch> but he does raise a small issue

[18:05] <ingy> Inline will use MC

[18:05] <ingy> :)

[18:05] <nothingmuch> =)

[18:05] <nothingmuch> http://perlmonks.org/?node_id=556022

[18:06] <nothingmuch> "which already has support for parameter passing"

[18:06] <ingy> so eventually he'll be right

[18:06] <nothingmuch> that thing

[18:06] <nothingmuch> no he won't, 'use tt' is not introducing foreign functions in a nice way

[18:06] <nothingmuch> but meh, details

[18:06] <nothingmuch> anyway, can we iron out the way params are passed on the use line?

[18:07] <nothingmuch> also, if i write a "touch_my_pmc" script, that takes a tarbsall and increments the mtime of the PMCs, would you roll it into the dist?

[18:07] <nothingmuch> that really confused me for a short while

[18:08] <ingy> sure

[18:08] <ingy> params can only be passed as a string...

[18:08] <nothingmuch> due to the filter system's limitations?

[18:08] <ingy> unless it is the *first* compiler module used

[18:09] <nothingmuch> oh

[18:09] <nothingmuch> can you explain why?

[18:09] <ingy> yes

[18:09] <ingy> you see my boy...

[18:10] <ingy> the whole MC process is invoked by the first caller (which coincidentally gets passed a list of params)...

[18:11] <ingy> MC then plays god and parses the rest of the module and calls all the compilers and stitches up the result. so Perl mever even calls the other use lines.

[18:11] <nothingmuch> ... because the moment 'use SomeFilter' is done it gets the rest of the file?

[18:12] <nothingmuch> it can't say where to stop filtering?

[18:12] <ingy> no not really

[18:13] <ingy> because it needs to filter everything to create a pmc

[18:13] <nothingmuch> hmm

[18:14] <nothingmuch> because otherwise the pmc thing won't know when it's done?

[18:14] <fglock> bbiab &

[18:15] <ingy> well the filter really throws away all the lines (up to the data section)

[18:15] <ingy> and rereads the file from disk

[18:15] <nothingmuch> oh

[18:16] <ingy> because it even needs the lines *before* it was invoked

[18:16] <ingy> to be part of the pmc

[18:16] *** DaGo joined
[18:17] <nothingmuch> hmm

[18:17] <nothingmuch> conjecture:

[18:17] <nothingmuch> you open the file and keep it in some closure var

[18:17] <ingy> then after compilation it chops off the head number of lines from the result and passes the back to FUC

[18:17] <nothingmuch> import/filter_add and filter_del are used for 'use' and 'no'

[18:18] <nothingmuch> and another filter after that dups everything the the pmc file

[18:18] <nothingmuch> filling the gaps?

[18:18] <nothingmuch> i'm really scared about low DWIM factor for 'use some_filter $global'

[18:19] <nothingmuch> so it might be worth it =/

[18:19] <ingy> well we could warn if we see $ in the params :P

[18:20] <nothingmuch> okay, so use some_filter foo()'

[18:20] <nothingmuch> it's endless

[18:20] <nothingmuch> give me 5 mins

[18:20] <nothingmuch> and i'll get back to you with an idea

[18:20] *** ludan joined
[18:20] <ingy> ok

[18:21] *** nxu7 joined
[18:29] *** qdlllbp joined
[18:33] *** OuLouFu joined
[18:40] <fglock> pmurias: re time to generate .pmc - it compiles the whole p6 grammar every time

[18:40] <fglock> there is no grammar cache currently

[18:46] <svnbot6> r10799 | fglock++ | Pugs-Compiler-Perl6 - pass 04-if.t

[18:46] *** ruoso joined
[18:47] <gaal> nothingmuch++ # random beingamooseness

[18:52] <fglock> nothingmuch: does Moose aim to approximate the p6 grammar?

[18:57] * nothingmuch whores karma

[18:57] <nothingmuch> fglock: not the grammar, but the feel

[18:57] <nothingmuch> has $.foo is rw;

[18:57] <nothingmuch> has foo => (

[18:57] <nothingmuch>     is => "rw",

[18:57] <nothingmuch> );

[18:57] <ingy> hi nothingmuch

[18:57] <ingy> did you come up with anything?

[18:57] <nothingmuch> hi ingy

[18:57] <nothingmuch> i think so

[18:57] <nothingmuch> but phone confused me

[18:57] <nothingmuch> either way it's too sick to do now

[18:57] <nothingmuch> we'll have a chat at the conf

[18:58] <nothingmuch> and then we'll implement it like the javascript hashcash idea

[18:58] <ingy> I think for now, I should just document how it works

[18:59] <ingy> that it doesn't take a live list of args

[18:59] <ingy> mostly what I'd envisioned was that it would take no args.

[18:59] <ingy> use this; no that;

[18:59] <ingy> etc

[19:00] <ingy> that was the spirit.

[19:00] *** miyagawa joined
[19:00] <ingy> because these lines are compiler invocations

[19:00] <ingy> you could even argue that they shouldn't take live args

[19:01] <ingy> because those will change from invocation to invocation

[19:01] <ingy> but the compile should always be the same

[19:01] <nothingmuch> heh

[19:01] <nothingmuch> the womenbof thrtead is silly

[19:02] <ingy> MenBOF!!!

[19:02] <nothingmuch> well

[19:02] <nothingmuch> BEGIN time is vague in Perl

[19:02] <nothingmuch> but i see what you mean

[19:02] <nothingmuch> that said

[19:02] <nothingmuch> qw/..../ is nicer than ["...", "..."]

[19:02] <nothingmuch> so i want some hack for TT

[19:04] <ingy> either one you have to parse though...

[19:04] <ingy> we can talk more at yapc...

[19:04] <nothingmuch> yeah

[19:22] *** justatheory joined
[19:48] *** ZuluOne joined
[20:12] *** audreyt_ms joined
[20:12] <audreyt_ms> Greetings from behind the restrictive firewall :)

[20:13] <ZuluOne> evening

[20:14] <xerox> The Great Wall?

[20:14] <audreyt_ms> the MS corpnet firewall, as it is

[20:17] <Limbic_Region> how much time did it figure out how to get here from there?

[20:17] <Limbic_Region> nevermind - you are cgi:irc ing

[20:19] <audreyt_ms> yup :)

[20:19] <audreyt_ms> so, no effort at all

[20:20] <Limbic_Region> oh, out of curiosity - was your entry into the US any less problematic this time?

[20:21] <audreyt_ms> was actually very easy

[20:21] <audreyt_ms> though they still did a full baggage check

[20:21] <audreyt_ms> they are certainly much more polite :)

[20:22] <Limbic_Region> glad to hear it - perhaps you might not be so apprehensive about visiting in the future

[20:23] <audreyt_ms> we'll see :)

[20:23] <audreyt_ms> but yeah, perhaps I am less terrorist-looking now

[20:25] <Limbic_Region> well - more likely, your reservations didn't involve any last minute changes but you didn't hear me say that

[20:25] <Limbic_Region> or type it for that matter

[20:27] <audreyt_ms> hm, last time I didn't change it at last minute either...

[20:28] *** Vutral joined
[20:28] *** alch` left
[20:36] *** dolmen joined
[20:45] *** kanru joined
[20:50] <svnbot6> r10800 | audreyt++ | * remove our v6.pm to not clash with the one in misc/pX.

[20:50] <svnbot6> r10800 | audreyt++ |   (eventually I'd like Pugs to install that one by default)

[20:52] *** cmarcelo joined
[20:55] *** fglock left
[20:55] <svnbot6> r10801 | fglock++ | Pugs-Compiler-Perl6 - 'sub' fix

[20:55] *** fglock joined
[20:56] <obra> Who's resposnsible for all the wonerfulness that is the pugs smoke server?

[21:05] <leo> obra: $ svn blame util/smokeserv/smokeserv-server.pl

[21:05] <leo> I think

[21:05] <obra>  sorry. "the whole set of tools"

[21:07] <leo> e.g. http://search.cpan.org/~nuffin/Test-TAP-HTMLMatrix-0.05/lib/Test/TAP/HTMLMatrix.pm#AUTHORS

[21:08] <leo> http://search.cpan.org/~gaal/Bundle-Pugs-SmokeKit-0.04/lib/Bundle/Pugs/SmokeKit.pm

[21:09] <leo> see also http://smoke.parrotcode.org/smoke/ ;)

[21:10] *** fglock joined
[21:11] <audreyt_ms> fglock: I just checked in a new, easier-to-manage v6.pm

[21:11] <obra> We've been doing some fun internal stuff to get ourselves a pugs-based smokeserver

[21:11] <pmurias> g'night

[21:11] <svnbot6> r10802 | audreyt++ | * add a new v6.pm that uses Module::Compile :)

[21:13] <fglock> audreyt_ms: thanks! did it work well for non-modules?

[21:16] *** elmex joined
[21:17] <audreyt_ms> fglock: yup

[21:18] <audreyt_ms> I wonder if instead of .pmc

[21:18] <audreyt_ms> having it as .pl.compiled

[21:18] <audreyt_ms> or .plc

[21:18] <audreyt_ms> because you could've have another same named .pm in the dir

[21:19] <audreyt_ms> sounds sane? I'll check it in

[21:19] <fglock> sure

[21:19] <fglock> how about .t? .tc?

[21:20] <audreyt_ms> see commit msg :)

[21:20] <audreyt_ms> (yes)

[21:21] <svnbot6> r10803 | audreyt++ | * instead of .pmc, use .plc for .pl files, .tc for .t files, etc

[21:21] <svnbot6> r10804 | audreyt++ | * v6.pm: localize $@ before entering p5eval context.

[21:22] *** nxu7 left
[21:23] <nothingmuch> http://www.scienceblog.com/cms/thirst-for-knowledge-may-be-opium-craving-10849.html

[21:35] <audreyt_ms> Interestingly, the VB->PIL->Javascript plan will give Pugs a native code compiler backend as well

[21:35] <svnbot6> r10805 | Sage++ | First version of translation program

[21:35] <audreyt_ms> the same one as used by MSVC

[21:35] <audreyt_ms> and it's even compatible with Rotor

[21:35] <TimToady> Sage++

[21:35] <audreyt_ms> (which means BSD license all the way)

[21:36] <audreyt_ms> ooh Sage

[21:36] * audreyt_ms checks it out

[21:41] <ZuluOne> from nothingmuch's link, "mate selection correlates closely with perceived intelligence"

[21:41] <svnbot6> r10806 | audreyt++ | * translate.hs - add svn properties; fix the nested if/else

[21:41] <svnbot6> r10806 | audreyt++ |   to use a proper case expression, as requested in comment

[21:44] *** penk joined
[21:47] <svnbot6> r10807 | lwall++ | s/oeprator/operator/

[21:47] <svnbot6> r10808 | fglock++ | v6.pm cleanup

[21:56] <svnbot6> r10809 | audreyt++ | * translate.hs - stylistic Haskell cleanup; use Parsec "try" instead

[21:56] <svnbot6> r10809 | audreyt++ |   of fully qualified name; use case expressions instead of if/else

[21:56] <fglock> does Moose has subroutine parameter binding or signatures?

[21:57] <spinclad> is MSIL <-> PIL indeed going to go both ways?

[21:58] <audreyt_ms> actually it's MSIL <-> CIL <-> PIL now

[21:58] <spinclad> a crossover at which to trade front- and back-ends

[21:58] <audreyt_ms> CIL being the MSVC intermediate language

[21:58] <audreyt_ms> it's far easier to work with

[21:58] <audreyt_ms> MSIL too baroque

[21:58] <audreyt_ms> and CIL is common denominator so to speak

[21:58] <audreyt_ms> as it's closer to GIMPLE

[21:58] <svnbot6> r10810 | fglock++ | PC-P6 - sub declarations; no parameter list yet

[21:59] <audreyt_ms> also it has this wonderful Grand Unified Retargettable Language thing

[21:59] <audreyt_ms> which makes parsing and emitting object languages (like PIR, MSIL assembly, etc) trivial

[21:59] <audreyt_ms> so it's a nice midpoint

[21:59] <audreyt_ms> probably going to write Haskell bindings using cpphs

[22:00] <TimToady> GURL power...

[22:00] <audreyt_ms> indeed

[22:00] <audreyt_ms> going to do some tree comparison in the design meeting next hour

[22:00] <spinclad> would PIL -> CIL -> PIR make sense in the next go around then?

[22:00] <audreyt_ms> not sure yet

[22:01] <fglock> audreyt_ms: there is a big community around Mono here - it would probably be a nice talk in CONISLI

[22:01] <audreyt_ms> people here are not using CIL at all really, it being a MSVC technology instead of a CLR one

[22:01] <audreyt_ms> where "here" means "here in the SQL building with CLR/VB folks"

[22:02] <spinclad> and BSD licensed?  amazing,

[22:02] <audreyt_ms> so trying to gather more info in the meantime

[22:02] <spinclad> s/,$/./

[22:02] <audreyt_ms> Rotor is BSD licensed; the CIL is apparently open as an IL

[22:03] <audreyt_ms> the actual tools -- not clear at the moment -- certainly the entire Phoenix chain is noncommercial shared-source -- which is not good enough -- but the Hs binding itself can be BSD

[22:03] <audreyt_ms> will report back in a more coherent fashion after meeting

[22:04] * fglock looks for a p5 module that implement named parameters

[22:05] <audreyt_ms> Params::Validate?

[22:05] *** audreyt_ms is now known as audreyt_

[22:09] *** Ymmv joined
[22:09] <fglock> I mean, at the syntax level

[22:11] <fglock> there is Perl6::Parameters, but it is a source filter

[22:13] *** Vutral joined
[22:18] *** FurnaceBoy is now known as FB|afk

[22:32] <svnbot6> r10811 | fglock++ | PC-P6 - stub routine for param binding

[22:32] <Juerd> There was one that hijacked prototypes iirc

[22:35] <Juerd> Can't find it

[22:44] <svnbot6> r10812 | fglock++ | PC-P6 - fixed parameter list AST

[22:44] *** fglock left
[22:46] *** macroron joined
[23:11] *** kattana_ joined
[23:14] *** penk joined
[23:14] *** cmarcelo joined
[23:14] *** ruoso joined
[23:14] *** OuLouFu joined
[23:14] *** jsiracusa joined
[23:14] *** scw joined
[23:14] *** jiing joined
[23:14] *** Zemyla joined
[23:14] *** Kattana joined
[23:14] *** TimToady joined
[23:14] *** cognominal joined
[23:14] *** qmole joined
[23:14] *** viirya joined
[23:14] *** knewt joined
[23:14] *** Grrrr joined
[23:14] *** amv joined
[23:14] *** rw-rw-r-- joined
[23:16] *** justatheory joined
[23:28] *** cmarcelo_ joined
[23:33] *** cmarcelo_ left
[23:36] *** FB|afk is now known as FurnacePissy

[23:43] *** cognominal_ joined
[23:46] *** Vutral joined
[23:52] *** shachaf_ joined
[23:57] *** dvorak joined
