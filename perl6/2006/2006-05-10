[00:00] *** SamB joined
[00:29] *** trym joined
[00:37] *** azuroth joined
[00:44] *** bsb joined
[00:49] <audreyt> TimToady, azuroth: The Ps/Pe + Bidi table is available at

[00:49] <audreyt> http://svn.openfoundry.org/pugs/src/Pugs/Lexer.hs

[00:50] <audreyt> scroll down a couple pages for "balancedDelim"

[01:02] <svnbot6> r10256 | audreyt++ | * run_pge.pir: set Pugs/PGE external-parrot bridge to

[01:02] <svnbot6> r10256 | audreyt++ |   accept utf8 and output utf8, enabling unicode rules.

[01:02] <svnbot6> r10256 | audreyt++ |   pmichaud++ for the hint on the treating-filehandle-as-arrays

[01:02] <svnbot6> r10256 | audreyt++ |   trick of manipulating its layers.

[01:03] <audreyt> (this doesn't fix embedded parrot)

[01:03] <audreyt> ?eval "\197" ~~ /./

[01:03] <evalbot_10255> Match.new(   ok => bool::true,    from => 0,    to => 1,    str => "\197",    sub_pos => (),    sub_named => {} )

[01:03] <audreyt> ?eval "\197" ~~ /../

[01:03] <evalbot_10255> Match.new(   ok => bool::false,    from => 0,    to => 0,    str => "",    sub_pos => (),    sub_named => {} )

[01:03] <audreyt> have fun :)

[01:04] <meppl> gute nacht

[01:20] *** Alias_ joined
[01:20] <Alias_> Wow those topics sick

[01:20] <Alias_> errr

[01:20] <Alias_> stick

[01:20] <Alias_> Freudian :)

[01:20] <Alias_> seen audreyt?

[01:20] <jabbot> Alias_: audreyt was seen 17 minutes 14 seconds ago

[01:21] <Alias_> audreyt: So, auto_install()... it is safe to remove if there's no features or options?

[01:21] <Alias_> s/safe/safe|preferable/

[01:21] <audreyt> yes.

[01:22] <Alias_> And it's still needed for options/features

[01:22] <Alias_> ?

[01:22] <Alias_> (since I don't see any other obvious user-interaction code)

[01:35] <audreyt> it's needed so the user get to pick features

[01:38] <Alias_> ok

[01:39] <Alias_> So the path to factoring it out is remove for no-interaction immediately, finish ::With, then reimplement the user-interaction somewhere

[01:39] <Alias_> AutoInstall is feeling increasingly mitochondrial

[01:39] <Alias_> Not part of M:I, just sort of lumped in there doin it's own thing

[01:40] <Alias_> :)

[01:49] <audreyt> was,, it _is_ mitochondrial :)

[01:49] *** jserv-- joined
[01:55] <particle_> S02 specifies '::' as the sigil for package/module/class/role/subset/enum/type...

[01:55] <particle_> also included are grammar/regex/token/rule, correct?

[01:56] <audreyt> grammar, yes.

[01:56] <audreyt> regex/token/rule, no.

[01:56] <audreyt> they are either just &

[01:56] <particle_> ah, of course.

[01:56] <audreyt> or explicitly invoked as <rule> within rules

[01:56] <particle_> perhaps those should be added to the synopsis, for my edification :)

[01:56] <audreyt> post a patch?

[01:56] <particle_> will do

[01:57] <particle_> can i svn co? is there a public interface?

[01:58] <obra> audreyt: you're coming to oscon?

[01:58] <particle_> obra: you're coming to yapc::na?

[01:59] <obra> particle_: I am

[02:00] <particle_> it'll be great to meet you

[02:01] <obra> likewise

[02:02] <audreyt> obra: yes

[02:02] <audreyt> particle_: http://svn.perl.org/perl6/doc/trunk/design/syn

[02:03] <particle_> thx, just got doc/trunk

[02:03] <particle_> i'll submit diff from that root

[02:03] <audreyt> k

[02:03] <obra> audreyt: you seeing my /msgs?

[02:04] <audreyt> sorry, forgot nickserv

[02:06] <obra> no worries

[02:10] <audreyt> pmichaud_: where is it specced that "self" means "$/" in rules?

[02:11] <audreyt> it seems deeply wrong in many levels.

[02:15] <pmichaud_> audreyt: I don't think it's specced explicitly

[02:16] <pmichaud_> audreyt: I agree it seems deeply wrong in many levels.  But this is what was discussed at last summer's hackathon (more)

[02:16] <audreyt> I remember that being discussed, but I didn't remember larry made a ruling... but maybe I wasn't there...

[02:16] <pmichaud_> and this is how it came across in some of the earlier versions of S05, as well as A05

[02:16] <audreyt> but it's a very bad idea.

[02:17] <pmichaud_> PGE doesn't actually use it as "self", nor does it create rules as methods

[02:17] <audreyt> unspecced one at that.

[02:17] <audreyt> yup, neither does Pugs

[02:17] <pmichaud_> it was discussed a bit on p6l last fall

[02:18] <audreyt> I think they are better off as class methods, or (even better) normal subroutines in mixin-like rule modules

[02:18] <audreyt> I mean, grammar modules

[02:18] <audreyt> but one way or another, having $.foo and $<foo> mean exactly the same thing

[02:18] <audreyt> doesn't seems like useful to me

[02:18] <pmichaud_> ...is that the case?

[02:18] <pmichaud_> I didn't think that $.foo and $<foo> were the same

[02:19] <audreyt> inside a rule's production

[02:19] <audreyt> they are the same.

[02:19] <audreyt> which worries me.

[02:19] <pmichaud_> ...why is that?

[02:19] <audreyt> because "self" is "$/"

[02:19] <audreyt> and $.foo desugars to self.foo as scalar

[02:19] <audreyt> and $<foo> desugars to $/.<foo> as scalar

[02:19] <audreyt> which turns out to be the same thing

[02:20] <pmichaud_> I'm not sure it is -- at least, it's not that way in PGE

[02:20] <audreyt> assuming the A12 object-serving-as-hash idea

[02:20] <pmichaud_> I didn't catch the A12 object-serving-as-hash idea

[02:20] <pmichaud_> I knew about the relationship of $.foo and self.foo, yes

[02:21] <audreyt> in any case, we still have self.<foo> the same as $<foo>

[02:21] <pmichaud_> but I didn't think that $.foo would also be self.<foo>

[02:21] <audreyt> and $.from the same as $/.from

[02:21] <audreyt> pmichaud_: hm, come to think about it, Match defines its own "as Hash" methods

[02:22] <audreyt> so $.foo won't become self.<foo>

[02:22] <pmichaud_> yes, exactly

[02:22] <audreyt> it only does that, according to TT, for classes with no explicit hashification forms

[02:22] <audreyt> mea culpa

[02:22] <pmichaud_> np

[02:23] <audreyt> but still... what is the use case for $.from being the same as $/.from :)

[02:24] <pmichaud_> it's not so much that there's a use case, just that this is the means by which I've been able to get things to work

[02:25] <audreyt> I understand :) it's just, I don't see the benefit of exposing this to userspace

[02:26] <audreyt> I'll stop bugging you and let you do useful work in #parrot :)

[02:28] <pmichaud_> I don't plan to expose it to userspace.  In fact, it's been this way for almost a year and nobody's noticed "how" it works until they start inquiring and the terms don't make sense :-)

[02:29] <audreyt> ooh, that means Match needs boxing :)

[02:29] <audreyt> (which is fine)

[02:29] <audreyt> nod. it's jsut a bit confusing to think PGE's Match and Perl6's Match

[02:29] <audreyt> as the same thing

[02:29] <audreyt> but if it's clear they are drastically different

[02:29] <audreyt> I think that'd be fine :)

[02:45] *** Cryptic_K joined
[02:56] *** weinig_ is now known as weinig

[02:57] *** weinig is now known as weinig|sleep

[03:28] *** dduncan joined
[03:29] *** aeon__ joined
[03:30] <dduncan> I was just looking at audreyt's new blog entry ... and from that I realized I had a few extra reasons to attend OSCON 2006

[03:30] <dduncan> until reading that, I was on the fence as to whether it would be worth it, having gone to the 2005 one

[03:30] <dduncan> still undecided, but now leaning further towards going

[03:30] <dduncan> fyi

[03:32] <dduncan> when I say "worth it", I mean that I enjoyed the 2005 one a lot, but was wondering how much new stuff there would be over that

[03:32] <dduncan> fyi

[03:32] <audreyt> nod :)

[03:32] <audreyt> you not going to YAPC::NA?

[03:33] <merlyn> <<== going to YAPC::NA and YAPC::SA, but not OSCON

[03:33] <audreyt> I was like that

[03:33] <audreyt> until yesterday

[03:33] <audreyt> now I'm going to all 3 :D

[03:33] <merlyn> oscon is no longer about perl

[03:33] <merlyn> no point in me being there

[03:34] <audreyt> exactly

[03:34] <hcchien> mutt

[03:34] <merlyn> I'm not spending money on any more parties, etc.

[03:34] <hcchien> ouch, sorry. :p

[03:34] <audreyt> I'm there to talk with mono and ruby and js people.

[03:34] <audreyt> not particularly perl folks :)

[03:34] <dduncan> as I'm still limited financially, relative to some of you, I have preferred OSCON to some other large events due to it being close enough that I can go there in a bus rather than needing to fly

[03:34] <merlyn> anyone I could have influenced is already known to me.

[03:34] <dduncan> but do want to go to YAPCs as well before too long

[03:35] <dduncan> s/bus/car-pool

[03:35] <merlyn> the YAPC::SA should be interesting

[03:35] <merlyn> with lwall and audrey and me.

[03:35] <miyagawa> <- going to YAPC::NA, OSCON and YAPC::EU. Not YAPC::SA :/

[03:36] <audreyt> miyagawa: oh, btw. you okay with YAML::Syck and JSON::Syck be released under the same term as libsyck

[03:36] <audreyt> aka the MIT (or BSD1) license?

[03:36] <dduncan> merlyn, do you mean that OSCON has no interest to Perl folks, or that it just isn't as focussed on Perl as it was before?

[03:36] <miyagawa> audreyt: sure

[03:36] <merlyn> It's becoming dead to Perl

[03:36] <audreyt> k, thx, it will go in effect next release

[03:36] <merlyn> fewer talks, fewer special events

[03:36] <merlyn> really no point for perl people to go

[03:37] <merlyn> and this is partially because the OSCON organizers are openly hostile to Perl

[03:37] <dduncan> I thought it was an official annual perl conference, with state of the onion talks and such

[03:37] <audreyt> well, I wouldn't say "dead"

[03:37] <audreyt> "the same status as python"

[03:37] <dduncan> merlyn, is that so?

[03:37] *** hikozaemon joined
[03:37] <merlyn> Yup

[03:37] <audreyt> is more like it

[03:37] <merlyn> Not web 2.0-ish enough. :)

[03:37] <merlyn> Perl - still runs half the known net-verse.  But not interesting to O'Reilly any more

[03:37] <audreyt> and instead of "hostile" I think it's just "not _hip_ anymore"

[03:38] <audreyt> indeed.

[03:38] *** KimJongIl joined
[03:38] <merlyn> hopefully, p6 will bring back the ruby crowd

[03:38] <KimJongIl> perl6 here yet?

[03:38] <audreyt> evalbot_10255: say "I'm here"

[03:38] <audreyt> ?eval say "I'm here"

[03:38] <evalbot_10256> OUTPUT[I'm here ] bool::true

[03:38] <dduncan> well, if I do go, I'll do the Haskell tutorial for sure

[03:39] <dduncan> on the other hand, if I decided to go to YAPC::NA instead, is it too late to get reasonable flights and/or register?

[03:40] <audreyt> KimJongIl: we have a prototype version running a few IRC bots. :)

[03:40] <audreyt> so if "here" means #perl6, yes, the bots are here

[03:40] <audreyt> (written in perl6 themselves, for months now)

[03:40] <KimJongIl> prototype?

[03:40] <KimJongIl> anything for production use?

[03:41] <KimJongIl> i have run out of people wanting to mine the uranium deposits

[03:41] <KimJongIl> and they refuses to be powered by rock soup

[03:41] <KimJongIl> i need robotics powered by production quality perl 6

[03:41] <KimJongIl> ETA?

[03:41] <miyagawa> dduncan: I don't think so, since I booked a flight to Chicago yesterday

[03:41] <audreyt> KimJongIl: by Christmas.

[03:41] <merlyn> it's pretty null - http://thedailywtf.com/forums/71684/ShowPost.aspx

[03:41] <KimJongIl> audreyt: that sounds familiar...

[03:41] <merlyn> Perl needs to support "Null" :)

[03:41] <dduncan> what meaning of "null"?

[03:42] <audreyt> KimJongIl: that is the officially canonical answer

[03:42] <svnbot6> r10257 | audreyt++ | * Pugs.Embed.Parrot: make utf-8 strings when embedding

[03:42] <svnbot6> r10257 | audreyt++ |   Parrot/PGE.  This means proper unicode rule handling

[03:42] <svnbot6> r10257 | audreyt++ |   in both external and embedded parrot.

[03:42] <audreyt> we refuse to give other answers :)

[03:42] <dduncan> Perl's "undef" is already like some senses of "null"

[03:42] <audreyt> dduncan: no, undef+42 isn't undef

[03:42] <audreyt> null+42 would be null

[03:42] <dduncan> so that's a different meaning of null

[03:43] <KimJongIl> audreyt: so when my friends say perl 6 will never come, is that the same thing as christmas?

[03:43] <audreyt> KimJongIl: I don't know. they used to say that Mozilla will never come.

[03:43] <audreyt> _I_ used to say that.

[03:43] <KimJongIl> audreyt: no one uses mozilla

[03:43] <audreyt> there are some firefox users, I hear.

[03:43] <KimJongIl> 10% of power users use firefox

[03:43] <audreyt> it's the same project, same engine.

[03:43] <audreyt> right. if 10% of power programmers use perl6

[03:44] <audreyt> I'd be very, very, very happy.

[03:44] <KimJongIl> the other 90% of power user are too busy doing other stuff, like having sex

[03:44] <audreyt> I think you answered your own question :)

[03:44] <KimJongIl> http://dev.perl.org/perl6/faq.html

[03:45] <KimJongIl> okay i should have heed your answer

[03:45] <KimJongIl> there's no date

[03:45] <dduncan> this isn't the same thing per se, but I once proposed on p6l that the behaviour of undef be changed to say null + 42 = null ...

[03:46] <dduncan> Larry strongly disliked it

[03:46] <dduncan> and in retrospect, I like undef's current behaviour much better

[03:46] <KimJongIl> i guess i should be using ironpython and learn to like "production-quality" commercial crap

[03:46] <dduncan> where it acts like the given type's "empty" value

[03:46] <audreyt> KimJongIl: fwiw, ironpython isn't much more production-worthy compared to pugs.

[03:46] <dduncan> that works a lot better for me than undef + 42  = undef

[03:46] <audreyt> esp. if you run it on Mono.

[03:47] <azuroth> I concur

[03:47] <KimJongIl> audreyt: i am not going to run on it mono

[03:47] <KimJongIl> no offense

[03:47] <audreyt> oh. you are on win32 exclusively.... then I recommend Visual Basic.

[03:48] <audreyt> it's really nice.

[03:48] <audreyt> (seriously.)

[03:48] <audreyt> and production quality too.

[03:49] <KimJongIl> well you see, visual basic is not really production quality, not many bots on this channel were written in vb

[03:49] <KimJongIl> so it must suck

[03:49] <audreyt> well, there are VB IRC bots

[03:49] <dduncan> perhaps if I attend OSCON 2006, I"ll propose/give a lightning talk demonstrating how one can do SQL-like things in native Perl 6, using syntax that is both as similar as possible but better all the same

[03:49] <audreyt> it's just we don't deploy it in #perl6 :)

[03:49] <dduncan> who needs to embed another call layer when you can use Perl 6 itself

[03:49] <azuroth> not many clients on this channel were written in windows, so ...? ;-)

[03:50] <audreyt> dduncan: that would be very nice!

[03:50] <dduncan> indeed

[03:50] <dduncan> and you know from real life that this is one of the most common things people do with programs ... talk to databases

[03:51] * KimJongIl goes back to working with oss software as oppose to fan boying about it

[03:51] <dduncan> Perl looks more "with it" if it can do things itself

[03:51] <dduncan> I'll defer talking more about this in detail until later

[03:52] <buu> dduncan: That sounds damn cool.

[03:52] <audreyt> dduncan: you've read about LINQ?

[03:52] <dduncan> I can't say I have

[03:52] <audreyt> (the same thing for Visual Basic)

[03:53] <dduncan> I know some languages like Coldfusion or Foxpro have db language built into them

[03:53] <dduncan> I figure perl 6 should too

[03:53] <dduncan> as is reasonable

[03:53] <audreyt> oh. http://msdn.microsoft.com/data/linq/

[03:53] <audreyt> the DLinq part corresponds to what you are talking about

[03:54] <azuroth> are there decent free vb.net compilers?

[03:55] <audreyt> no. mono can run the vb.net compiler

[03:55] <dduncan> what I propose for databases in perl 6 is that perl 6 would include an interface for what looks like relational data structures in the language itself ... and it would have a default implementation that just has them in RAM like normal array/hash/set/etc variables ... but that one can tie these to other implementations that make them persist somewhere ... as one can tie hashes etc to DBM files

[03:55] <audreyt> there is also SharpDevelop

[03:55] <dduncan> and in perl 6, such DBM ties are no longer in the core, but third party

[03:56] <audreyt> azuroth: there is a mono-vb compiler

[03:56] <audreyt> but I'm not sure of its current state

[03:56] <audreyt> dduncan: definitely read the LINQ material :)

[03:56] <dduncan> okay

[03:56] <audreyt> erik did exactly that, by making query methods work across a lot of classes

[03:57] <audreyt> azuroth: http://www.mono-project.com/VisualBasic.NET_support

[03:58] <audreyt> alpha-review status, seems to be useful to play with already

[03:58] <dduncan> note that I only mention SQL for familiarity ... I'm not going by any means going to make the interface look like SQL for the sake of that ... more likely the interface will look very different, but wrappers would make it more SQL like

[03:58] <dduncan> no reason to limit oneself

[03:58] <dduncan> back in a bit

[03:59] <azuroth> oh, cool. we were thinking of trying vb.net for a TAFE project, but now we're trying C# instead

[04:05] <audreyt> TAFE?

[04:07] <azuroth> turtle and four elephants. college

[04:08] <audreyt> ah. so it's not turtles all the way down

[04:08] <KimJongIl> audreyt: are progress being made in perl 6 at a worthwhile pace that one might imagine a near future date where asking when perl 6 might be done might be a meaningful question?

[04:08] <KimJongIl> or are we looking at stagnation?

[04:09] <audreyt> KimJongIl: we are definitely not looking at stagnation.

[04:09] <audreyt> some would estimate _this_ christmas, some would estimate next.

[04:09] <audreyt> of course, some may estimate year 3000 as well

[04:10] <audreyt> oh wait, that's another language...

[04:10] <KimJongIl> okay i give up

[04:10] <KimJongIl> i tried, i really tried

[04:10] <KimJongIl> i'll munch on some zen cookies instead

[04:11] <KimJongIl> when it's here, i'll be here, and we'll all be taking five years to learn it and spending ten more years leveraging it

[04:11] <azuroth> ?eval my @a = (1,2,3,4); @a >>*<< (1,2)

[04:11] <evalbot_10257> (1, 4, 3, 4)

[04:11] <KimJongIl> until then, i guess it's just the state it is in and the bot writers, have fun

[04:11] <audreyt> KimJongIl: alternately you can, well, improve the docs and examples and code :)

[04:11] <audreyt> want a commit bit?

[04:12] <azuroth> ?eval my @a = (1,2,3,4); @a >>*<< (1,2) xx *

[04:12] <evalbot_10257> Error:  unexpected end of input expecting term

[04:12] <azuroth> ?eval my @a = (1,2,3,4); @a >>*<< ((1,2) xx *)

[04:12] <audreyt> azuroth: Whatever is not yet parsed

[04:12] <evalbot_10257> Error:  unexpected ")" expecting term

[04:12] <azuroth> ?eval my @a = (1,2,3,4); @a >>*<< (1,2) xx 2

[04:12] <audreyt> or indeed supported ;)

[04:12] <evalbot_10257> (1, 4, 3, 4, 1, 4, 3, 4)

[04:12] <azuroth> ?eval my @a = (1,2,3,4); @a >>*<< ((1,2) xx 2)

[04:12] <evalbot_10257> (1, 4, 3, 8)

[04:12] <azuroth> ahh :-)

[04:15] <buu> Horrifying

[04:15] <azuroth> my eval..?

[04:18] <audreyt> $job, bbl &

[04:22] <dduncan> ditto

[04:24] <Alias_> KimJongIl: Perhaps I can give you your answers

[04:24] <Alias_> You'll see an Alpha this year, and a Beta next year

[04:24] <Alias_> I think that's a fairly safe call, right audreyt?

[04:25] <audreyt> right.

[04:25] <Alias_> As to whether you'll see a beta this year, or a production release next year.... maybe

[04:26] <Alias_> But then reading back over the last hour, he's almost a troll, so I'm not sure that answer helps

[04:27] <audreyt> the way to tell trolls from non- is acceptance of a commit bit.

[04:27] <audreyt> (to me)

[04:27] <FurnaceBoy_> ++(++audreyt)

[04:27] <Alias_> :)

[04:28] <Alias_> So, when's the alpha due? :)

[04:30] <TimToady> what is this "due" thing?

[04:31] <Alias_> Oh come on, you like stage shows. I'm sure somewhere in there you've got a "it would be nice to have something for $event"

[04:31] <Alias_> TimToady: Also, you really need to ask people not to transcribe your talks... they come out weird

[04:32] <TimToady> um...

[04:32] <Alias_> Video's would be great... but your talks don't translate so well to words. All the jokes dissapear

[04:32] <Alias_> Videos

[04:32] <TimToady> my wife married me because I make faces.

[04:33] <FurnaceBoy_> "everybody has something," they say.

[04:33] <TimToady> she also married me because I would eat almost anything.

[04:34] <TimToady> well, at least I can still make faces...

[04:36] <Alias_> Anyways... videos good, transcripts bad

[04:37] <Alias_> Having only seen one talk in person, but read several transcripts

[04:37] <TimToady> yeah, timing is everything when you're doing stand-up comedy.

[04:37] <Alias_> right

[04:37] <Alias_> Standup comedy, without any timing, and without the aid of the visual props

[04:37] <Alias_> That pretty much sums it up

[04:38] *** dduncan left
[04:38] <Alias_> In fact, I recommend your next State of the Onion somewhere early includes an apology to all those reading the transcript :)

[04:41] <TimToady> I could probably spend the whole half hour apologizing.  :)

[04:41] <Alias_> hehh

[04:43] <Alias_> There's probably a few of us that should be though

[04:43] <Alias_> Anyone involved in Bundle::CPAN for a start

[04:43] <Alias_> What amess

[04:43] <azuroth> apologizing?

[04:44] <Alias_> For making such a cluster-fuck of the next-gen toolchain modules

[04:44] <Alias_> By the standards of the previous generation

[04:44] <TimToady> Some apologies are messier than others. :)

[04:45] <Alias_> audreyt: I've asked ANDK to pull Module::Signature support for CPAN.pm for a while

[04:45] <Alias_> audreyt: More problems keep appearing, and there's nobody put up their hand yet to sort them out

[04:46] <Alias_> (or at least, disable it by default, and not include it in Bundle::CPAN)

[04:46] *** justatheory joined
[04:48] *** Khisanth joined
[04:49] <TimToady> how do we avoid a similar mess in Perl 6?

[04:50] <Alias_> Treat the toolchain to a different standard to $everything_else

[04:50] <Alias_> If that means centralised control or something...

[04:50] <TimToady> you mean, kinda like the Parrot model?

[04:51] <Alias_> Most of the problems seem to come from people not realising the impact of recursive dependency cascades

[04:51] <Alias_> So they write some module, and release it, and 4000 modules break on Win32

[04:51] <Alias_> Schwern's Test::Builder trick broke about 3000

[04:52] <Alias_> Schwern++ # Exceptionall well recovered

[04:52] <Alias_> Some of it is just not thinking 4th dimensionally :)

[04:52] <Alias_> In fact, MOST of it is

[04:52] <TimToady> is it something computers can help with, in theory?

[04:52] <Alias_> yep

[04:53] <Alias_> We can go over this at the hackathon if you like

[04:53] *** Khisanth joined
[04:53] <Alias_> But you should get a pretty good intro from the PITA talk

[04:53] <TimToady> we've tried to address a few of the issues where they impact language design, but I'm sure that's the flag flying on the tip of the iceberg...

[04:54] * Alias_ nods

[04:54] <TimToady> PITA?

[04:54] <Alias_> http://ali.as/pita/

[04:54] <Alias_> I haven't talked about it much

[04:54] <Alias_> Not till there's something to actually try out do I want people mucking with it

[04:55] <Alias_> To be honest, MOST of the problem is located above the surface of the language, not below it

[04:55] <Alias_> So there's no a lot you can do from a language design POV

[04:55] <Alias_> There's certainly things to be done in terms of what you roll into the default "Perl 6" dist though

[04:56] <Alias_> In fact, bootstrapping from the raw language up to a CPAN environment is half the problem

[04:56] <TimToady> yes, I was thinking that earlier.

[04:56] <Alias_> And the other half is just quality control, which I think I'll have sorted out by the end of the year

[04:56] <Alias_> CPAN Testers 2 et al

[04:57] <TimToady> we need to be clear what the various definitions of "core" are.

[04:57] * Alias_ nods

[04:57] <Alias_> rigorously so

[04:57] <Alias_> With compliance tests

[04:57] <Alias_> So RedHat can't do this missing-weaken shite

[04:57] <Alias_> RedHat--

[04:58] <Alias_> Some way of running the test suite against the binary package so you can stamp a "Perl" trademark on it

[04:58] <Alias_> Similar to what Java has... that would be nice

[04:59] <Alias_> I'd even commision the stamps for you if you did :)

[04:59] <TimToady> unfortunately, at some point that takes both political and financial resources.

[04:59] <Alias_> Apparently the Perl Foundation has too much money...

[05:00] <Alias_> TimToady: I don't think it's anything you'd want to spend effort legally enforcing

[05:00] <Alias_> But if there's some script to lift the test suite off the build environment, so you can tell RedHat "run that", that would be nice

[05:01] <TimToady> technological fixes are nice that way.

[05:01] <Alias_> right

[05:01] <TimToady> and that's actually something that Perl 5 got a little bit right.

[05:01] <TimToady> more out of necessity than anything...

[05:02] <Alias_> indeed

[05:02] <TimToady> but we could do it so much better if we knew what we were doing.

[05:02] <Alias_> There's a reason that the best Documentation Management companies in the world come from South Africa

[05:02] <Alias_> Because they need to be...

[05:02] <Alias_> I see similar parallels to Perl

[05:03] <Alias_> Anyways, see my talk after yours on Day 1 for the QA plan I want to use for both P5 and P6

[05:04] <Alias_> And I hope to spend some time at the hackfest going over the 6PAN plans

[05:04] <TimToady> sounds like a really good plan

[05:05] <Alias_> And I might solicit your help/name later this year if you don't mind, because I'd like to try and find a $big_company willing to donate a blade server or a small cluster

[05:06] <Alias_> And my contacts in the relevant companies are negligable

[05:07] <TimToady> well, I don't network much that way either...

[05:07] <TimToady> but you can certainly whack people over the head with my name if you like.

[05:07] <Alias_> thanks

[05:08] <Alias_> hmm... actually... I wonder if there might be some SGI stuff going cheap some time soon...

[05:09] <Alias_> Anyways, I have an airport to finish

[05:09] * Alias_ &

[05:09] <TimToady> ciao

[05:11] *** mako132_ joined
[05:20] <azuroth> what's a word for... saving something for later use?

[05:21] <azuroth> I know, thesaurus

[05:21] <FurnaceBoy_> push :)

[05:23] <azuroth> I think 'defer' works: "defer the sale and finish it later"

[05:24] <gaal> postpone?

[05:24] <FurnaceBoy_> yeah, that's how postfix describes its "send later" queue

[05:24] <gaal> { &something } ?

[05:24] <FurnaceBoy_> (deferred)

[05:24] <FurnaceBoy_> in abeyance :)

[05:25] <FurnaceBoy_> held over

[05:25] <gaal> cryogenically treated?

[05:25] <azuroth> postpone isn't bad. it needs to be imperative, for a button

[05:30] <azuroth> I'm hoping to have half a year to work on pugs et al exclusively, soon. it should be cool.

[05:30] <FurnaceBoy_> wheeeee

[05:31] <FurnaceBoy_> christmas comes early this year

[05:31] <azuroth> hopefully :-)

[05:32] <Alias_> wow, half a year?

[05:32] <Alias_> eep, distracted, should be working

[05:33] <azuroth> well, probably. might need to find a job to satisfy my parents, but hopefully they'll let me treat it just as more education or something

[05:35] <Alias_> How old are you?

[05:35] <azuroth> just eighteen :-)

[05:36] <azuroth> I'm at TAFE at the moment, doing a diploma

[05:37] * Alias_ blinks, TAFE?

[05:37] <Alias_> Where?

[05:37] <azuroth> tighes hill, newcastle

[05:37] <azuroth> around three hours from sydney

[05:37] <Alias_> I know

[05:38] <Alias_> I have family there

[05:38] <azuroth> oh, wow

[05:38] <Alias_> Actually, I'll be visiting next week

[05:38] <Alias_> Have to help my aging grandmother buy some headphones

[05:39] <azuroth> heheh. that's a weird request. you're from sydney?

[05:39] <Alias_> Lismore

[05:39] <Alias_> My grandmother is getting quite old now, she's well into her 80s

[05:39] <Alias_> And she doesn't really trust anyone else to help her buy them

[05:39] <Alias_> I helped her get her little CD player, and taught her how to use it

[05:40] <azuroth> ahh

[05:40] <Alias_> Made sure she got one where she'd only need to ever press two buttons, play and eject

[05:41] <Alias_> A lot of people born before the war struggle with technology

[05:41] <azuroth> yeah, I suppose so

[05:41] <Alias_> I'm really pissed off with DVDs, because there's no way in hell she could navigate the menu systems

[05:42] <Alias_> 1. Put in video 2. Hit rewind 3. Wait 4. Hit play

[05:42] <Alias_> So she can't watch movies any more now that everything is DVDs

[05:43] * Alias_ files that away for later under "Examples of why user interface design is important"

[05:43] <azuroth> speaking of user interface design... want to do the gui for a point of sales system? *whince*

[05:44] <Alias_> I'm fully booked till YAPC

[05:44] <Alias_> overbooked, actually

[05:44] <Alias_> So much so I shouldn't be talking to you :)

[05:44] <azuroth> hehehe

[05:45] * Alias_ will be in magnet #perl if anyone wants to talk 6PAN

[05:45] *** Alias_ left
[05:57] <svnbot6> r10258 | scw++ | Pugs::Grammar::MiniPerl6: correct tests

[06:11] <TimToady> ?eval "a" ~~ /a/; /^ <foo> $/;

[06:11] <evalbot_10258> *** Cannot parse PGE: ^ <foo> $ *** Error: Name 'foo' not found  Match.new(   ok => bool::false,    from => 0,    to => 0,    str => "",    sub_pos => (),    sub_named => {} )

[06:11] <TimToady> ?eval "a" ~~ /a/; "a" ~~ /^ <alpha> $/;

[06:11] <evalbot_10258> Match.new(   ok => bool::true,    from => 0,    to => 1,    str => "a",    sub_pos => (),    sub_named =>     { "alpha" =>         Match.new(           ok => bool::true,            from => 0,            to => 1,            str => "a",            sub_pos => (),            sub_named => {}         )     } )

[06:12] <TimToady> those both coredump with embedded...

[06:14] <TimToady> my guess is that parrot is trying to reinitialize whatever it's using for $/.

[06:16] <TimToady> that guess is based on the fact that the first ~~ must succeed to get the core dump.

[06:17] <TimToady> Interestingly, changing /^ <foo> $/ to remove either of the spaces suppresses the core dump.

[06:17] <TimToady> or changine <foo> to .

[06:17] <TimToady> even changing ^ to ^^.

[06:18] <TimToady> so it almost seems like a fencepost error somewhere.

[06:18] <azuroth> this probably isn't the right place to ask, but anybody know any good books/resources about UI design? :x

[06:19] <TimToady> I think most folks around here would rather just redesign the users...

[06:20] <azuroth> hehe :-)

[06:23] <szbalint> I wish.

[06:33] *** ko1_away is now known as ko1

[06:34] *** ko1 is now known as ko1_away

[06:38] *** marmic joined
[06:40] *** reZo joined
[06:47] *** neoesque joined
[06:47] <TimToady> pmichaud: by the way, my pugs smoke test is failing about 222 PGE tests because of the above coredump...

[06:50] *** iblechbot joined
[06:51] <wolverian> azuroth, _The Design of Everyday Things_, by Donald A. Norman

[06:51] <TimToady> ooh, yes, good book.

[06:52] <TimToady> "affordances".

[06:52] <wolverian> yes. great examples. :)

[06:52] <azuroth> thanks :-) I'm reading "the inmates are running the asylum" right now, and it interesting at least

[06:52] <azuroth> s/it/it seems/

[06:53] <TimToady> you'll never walk through the front door of a building without thinking about how the doors are misdesigned....

[06:53] <wolverian> and you'll comment about those misdesigns to your friends all the time, driving them crazy

[06:54] <wolverian> azuroth, that seems like a good book too. thanks!

[06:54] <TimToady> and if you're a language designer, you'll wish you could figure out how to apply some of the principles...

[06:55] <wolverian> that's interesting. have you succeeded in that?

[06:55] <TimToady> 'bout the closest I've come is "If a language construct is doing something weird, it should *look* weird..."

[06:56] <TimToady> sort of negative affordances, if you will

[06:56] <wolverian> that's a good idiom for doors as well :)

[06:59] <TimToady> and just basically pay attention to all the people on PM that say "I tried to pull this thing but I should have pushed it instead."

[06:59] <kattana_> ahh so thats why so many of the FOSS people look the way they do.

[06:59] <TimToady> well, if they consider themselves language constructs, I suppose...

[07:01] <TimToady> But I think the perception that they're trying to do something weird is part of the problem, from the point of view of the Design of Everyday Things.

[07:01] <TimToady> What seems weird now might be an Everyday Thing pretty soon.

[07:02] <azuroth> is 'emotional design: why we love or hate every day things' as good/on the same boat?

[07:02] <Kattana> you make "weird" sound like a bad thing, I find it rather synonymous with "interesting".

[07:02] <TimToady> which is why we have to ask ourselves questions like "are scan and reduce operators actually going to be used frequently?"

[07:02] <TimToady> azuroth: dunno

[07:02] <webmind> good morning

[07:03] <TimToady> Kattana: I'm just attempting to point out that, while "weird" is culturally determined, the culture itself is evolving to make some weird things not-so-weird.

[07:04] <Kattana> Of course, things on the fringe always naturaly gravitate towards the center.

[07:04] <TimToady> In that sense, design is an art, not a science, because you have to be a futurist.

[07:05] <Kattana> Well we are artists if the code is beautiful.

[07:05] <TimToady> well, I dunno if there's a "the center", but things on the fringe often end up defining new centers.

[07:05] *** phpError joined
[07:06] <TimToady> the big design problem is how to simultaneously be fringe friendly and center friendly.

[07:08] <wolverian> oh, by the way, do we need a fold/fold1 distinction in perl6, since you can just do '($initial, @foo).reduce...'? just thinking about typing, as haskell needs the distinction.

[07:08] *** elmex joined
[07:09] <TimToady> don't need to do that at all for operators that define an identity multi.

[07:09] <Kattana> I take the easy way out and settle for not being friendly :)

[07:10] <TimToady> yes, well, we've seen plenty of that kind of design in the world too.  :)

[07:10] <wolverian> I wasn't thinking of operators, actually. just your generic :(Foo, Bar --> Foo) fold.

[07:10] <Kattana> heh, sometimes thats the best way, if the fringe were too friendly with the center a new fringe would appear.

[07:11] <Kattana> What we really need is a bigger mass in the center pulling stuff in, get the interesting ideas into everyday things quicker.

[07:12] <TimToady> now I'm doing free associations with Oklahoma: "a pretty little surrey with a fringe on top".

[07:12] <TimToady> means I should probably be in bed.

[07:12] <TimToady> or turn the whole mess into a black hole quicker...

[07:13] <Kattana> event horizons are interesting...

[07:13] <svnbot6> r10259 | scw++ | Pugs::Compiler::Rule compile_p6grammar.pl: deal with backslashed

[07:13] <TimToady> especially cultural event horizons.

[07:14] <wolverian> oh, well, this is sort of different than in haskell, given mmd. I have to get rid of the static mindset.

[07:15] <TimToady> But, yes, Kattana, getting enough mass in the center to discourage random experimentation without having so much mass that you discourage useful experimentation is another way to think of the design space.

[07:16] <wolverian> and making the mass a sphere instead of a cube..

[07:16] <TimToady> Certainly with P6 we're trying to simultaneously provide all the hooks you might ever need, while taking away nearly all the motivation for using them.

[07:17] <Kattana> Theres the advantage of a black hole, it would shrink the center and let the fringe stretch out in its place.

[07:17] <TimToady> tidal effects can be difficult

[07:20] <Kattana> hmm its also hard to get out of the black hole once you are in it.

[07:20] <TimToady> that's not nearly as uncomfortable a problem as when your feet are already in it and your head isn't.

[07:22] <Kattana> its harder to fix, weird and interesting things often require change and people are loath to do that most of the time.

[07:22] <TimToady> there's a sense in which you're allowed to do weird stuff after you've established the center.

[07:23] <TimToady> we could only work on P6 because P5 was so "centered" already.

[07:23] <wolverian> oh hm. I don't actually see how the identity multi helps with the :(Foo, Bar --> Foo) case. I mean, you want a :(Bar, Bar --> Foo) initial call instead. which, I suppose, isn't a problem, given MMD. heh. I'm seeing the light.

[07:24] <TimToady> well, the lights are going out here, so I'd better retire.

[07:24] <TimToady> nite all. &

[07:24] <wolverian> good night!

[07:24] <Kattana> 'night.

[07:34] *** neoesque joined
[07:47] *** drrho joined
[08:02] *** Aankhen`` joined
[08:15] *** bsb left
[08:20] *** lisppaste3 joined
[08:46] <wolverian> hm, S03 still talks about references with ===

[08:48] <azuroth> http://www.dogthebountyhunter.com/

[08:58] <szbalint> I wish people would stop those annoying flash detect pages...

[08:58] <szbalint> *stop using

[08:59] <azuroth> I'm more worried about the content than the medium. what the hell is it?! a tv show..?

[09:02] <szbalint> well its a bit hard to worry about the content if you can't see it because of the medium. :)

[09:03] <azuroth> good point

[09:10] *** ghenry joined
[09:16] <ludan> szbalint: http://flashblock.mozdev.org/

[09:20] <wolverian> can you give array elements individual types? I can see subscript types in S09, but they all return the same type.

[09:21] <azuroth> like.. tuples?

[09:21] <wolverian> yes, except arrays.. :)

[09:22] <wolverian> I'm just wondering what kind of a type you'd infer for @bar in: 'sub foo (*@bar) {...} foo 1, "a"'

[09:22] <szbalint> ludan: Yes, I'm using exactly just that. :)

[09:27] <ludan> szbalint: it's my salvation :)

[09:54] *** neoesque joined
[10:03] *** r0nny joined
[10:31] *** reZo joined
[10:46] *** Aragone joined
[10:46] *** Aragone is now known as Arathorn

[10:58] *** iblechbot joined
[11:10] *** reZo is now known as phpError

[11:17] <svnbot6> r10260 | scw++ | Pugs::Grammar::MiniPerl6

[11:17] <svnbot6> r10260 | scw++ |  * Temporary variables now available

[11:17] <svnbot6> r10260 | scw++ |  * MiniPerl6 spec updated

[11:18] *** meppl joined
[11:32] *** weinig|sleep is now known as weinig

[12:02] *** mako132_ joined
[12:21] *** Limbic_Region joined
[12:24] *** hexmode joined
[12:26] *** jsiracusa joined
[12:37] *** kolibrie joined
[12:44] *** macroron joined
[12:48] *** Aankh|Clone joined
[12:59] *** GeJ joined
[13:09] *** fglock joined
[13:09] <svnbot6> r10261 | fglock++ | PCR - :ratchet update

[13:14] *** Aankh|Clone is now known as Aankhen``

[13:15] *** jsiracusa joined
[13:29] <nothingmuch> anybody got a machine where i can run perl5.005/perl5.004 ?

[13:30] *** weinig_ joined
[13:31] <audreyt> my laptop ;)

[13:31] <audreyt> but no, not at the moment, I neeed to crash. maybe 10hr from now

[13:31] <audreyt> you can build 5.005_04 on feather surely?

[13:32] * audreyt finds it curious that haskell.org got more than twice SoC applications than perl.org

[13:32] <obra> . o O { Powered by PhD candidates }

[13:33] <audreyt> indeed so

[13:33] <audreyt> though we have our PhD candidate here (fglock) :)

[13:34] *** vytautas joined
[13:36] *** particle_ joined
[13:38] <szbalint> I hope though that perl.org ones were of quality, rather than quantity :)

[13:39] *** jserv-- joined
[13:39] <audreyt> the quality are on par :)

[13:39] <fglock> audreyt: I wish it was CS related :)

[13:40] <audreyt> everything is CS related :)

[13:40] <audreyt> so, the Meeting went well. I should start having slices of time on Capturizing starting tomorrow. yay.

[13:40] <audreyt> but, sleep first :)

[13:40] <audreyt> *wave*

[13:41] <Arathorn> fglock: what it is it, if not CS, out of interest?

[13:41] <Arathorn> night audreyt

[13:43] <fglock> Arathorn: neurology - some kind of wearable wireless device to record EEG

[13:45] <Arathorn> fglock: very cool

[13:45] <Arathorn> a friend of mine was doing a Ph.D in a similar direction on computational neuroscience at UCSD

[13:46] <Arathorn> (although he gave up and went to work for google :\)

[13:46] <szbalint> interesting.

[13:46] *** Southen joined
[13:47] * Arathorn tries to make an EEG once with an ancient valve-based HP oscilloscope with two probes in differential mode, and lots of electrode gel. didn't get much other than mains noise, though... ;)

[13:47] <fglock> Arathorn: heh - I had an interview with google

[13:47] *** justatheory joined
[13:49] <fglock> I once made an ECG using a ZX80 and lots of TTL, 741, resistors and assembler - it was very cool

[13:50] <Arathorn> hehe, that rocks

[13:52] *** cdpruden joined
[13:53] <fglock> good times - I had to remap the char generator to RAM, in order to draw the graphics; and the A/D converter resistors were calibrated with sand paper

[13:55] <Arathorn> did the ZX80 even have a graphics mode?

[13:55] <Arathorn> still, at least Z80 was a relative sane processor to hack on

[13:57] *** stevan_ joined
[13:58] <fglock> Arathorn: it was char-mode only, but the char generator was in EPROM - so I changed the address to RAM and wrote some software to allocate chars to draw the pixels and lines

[13:58] <Arathorn> lovely hack :)

[14:02] <fglock> can I use [[+]] to force list context in a scan?

[14:06] <fglock> OTOH, how about using [[...]] for scans, instead of the implicit context on reduce?

[14:13] <Juerd> fglock++

[14:14] *** Qiang joined
[14:15] *** flounder99 joined
[14:25] *** theorb joined
[14:36] *** nnunley joined
[14:44] *** theorb is now known as theorbtwo

[14:45] *** FurnaceBoy_ joined
[14:57] *** drbean_ joined
[15:00] *** penk joined
[15:05] <scw> fglock: you added \r on eol in t/09-ratchet.t and lib/Pugs/Emitter/Rule/Perl5/Ratchet.pm ...

[15:11] <kolibrie> scw: fglock: just run util/add-svn-props.sh on the file and checkin

[15:25] *** iblechbot joined
[15:28] *** penk joined
[15:47] *** wilx joined
[15:59] *** ghenry joined
[16:10] <Arathorn> kolibrie: doesn't that clobber history?

[16:10] *** bernhard joined
[16:14] <kolibrie> Arathorn: I don't think so, I think it just allows newline conversions and such on checkout

[16:21] <Arathorn> hm, i thought that as you re-check-it-in, it causes every line to change, as the repo standardises on its own canonical line ending style (i.e. \n under unix)

[16:21] <Arathorn> and so you then have to use an external diff tool (e.g. gnu diff -b) to ignore the line endings when diffing

[16:22] <Arathorn> at least, that's what happened to me, and i've yet to find way of working 'round it :(

[16:22] <particle_> it should just affect the svn properties, which are metadata

[16:22] <svnbot6> r10263 | fglock++ | PCR - fix t/09-ratchet.t eol - scw++

[16:24] <fglock> scw: thanks

[16:24] <Arathorn> how do you save the properties (given you can't set them remotely) other than committing after setting them locally, though?

[16:25] * Arathorn goes looks at the util script in question

[16:25] <particle_> it's true, you must commit.

[16:26] * Arathorn tests

[16:33] <pasteling> "Arathorn" at 87.194.32.52 pasted "svn EOL fun" (42 lines, 1.2K) at http://sial.org/pbot/17128

[16:33] <Arathorn> ^ particle_

[16:34] <Arathorn> if you (or anyone else) can suggest the magic required to avoid that...

[16:34] * Arathorn would love to know

[16:35] <PerlJam> Just set svn:eol-style before you commit.

[16:35] <PerlJam> (the first time)

[16:36] <Arathorn> sure - but if you're correcting a file which someone committed incorrectly in the first place?

[16:37] <PerlJam> Then ... you do what you did.

[16:37] <Arathorn> and the history gets melted

[16:37] <particle_> don't think there's a way around that, unless you put a trigger on the svn server

[16:37] <Arathorn> minging

[16:37] * Arathorn nods.

[16:38] <Arathorn> (or tell everyone to populate up their .subversion files to autoset svn:eol-type for certain extensions or mime-types, like Apache do)

[16:38] <PerlJam> particle_: that may be a good idea.  Have it carp if the property isn't set on certain files (which you could glean from the suffix)

[16:38] <particle_> yep, parrot does that

[16:39] <particle_> pj: that is a good idea.

[16:39] <PerlJam> particle_: make it so  ;)

[16:40] <particle_> my delegation skills are a perfect fit for this job ;)

[16:42] <meppl> guten abend

[16:51] *** shachaf joined
[16:53] *** Aankhen`` joined
[16:56] <svnbot6> r10264 | fglock++ | PCR - the 'Match' class is emitter-dependent

[16:59] <svnbot6> r10265 | fglock++ | PCR - :ratchet creates a Pugs::Runtime::Match::Ratchet

[17:08] <svnbot6> r10266 | fglock++ | PCR - MANIFEST update

[17:16] <bernhard> On 'perl Makefile.PL' I get: Could not find module `Data.Yaml.Syck': it is hidden (in package Pugs-6.2.11)

[17:16] <bernhard> Do I need to have that installed?

[17:19] *** szbalint joined
[17:26] <gaal> bernhard: update your source tree

[17:28] <bernhard> No change. I already was at r10266.

[17:29] *** theorb joined
[17:32] <gaal> weird. any chance you have some stale files around?

[17:33] <gaal> rm Pugs.cabal for example

[17:34] <gaal> if that doesn't work try a clean checkout

[17:34] <bernhard> I did a 'make realclean', removed extra file shown by 'svn status'.

[17:43] <bernhard> No change with fresh checkout.

[17:50] *** DaGo joined
[17:52] *** theorb is now known as theorbtwo

[17:54] *** weinig_ is now known as weinig

[17:58] *** aufrank joined
[18:07] <gaal> hmm I don't know, this worksforme

[18:07] <aufrank> scw:  ping?

[18:09] <PerlJam> bernhard: start with ./configure

[18:32] * bernhard building GHC 6.4.2 

[18:37] *** chris2 joined
[18:44] <svnbot6> r10268 | fglock++ | PCR - from/to need to be calculated in 2 steps, it seems

[18:44] *** hexmode joined
[18:51] *** m joined
[19:08] *** SamB joined
[19:11] <svnbot6> r10269 | fglock++ | PCR - :ratchet passes 2 tests

[19:12] <aufrank> fglock++

[19:16] <fglock> "perl -Ilib t/09-ratchet.t | less" for some funny-looking perl6->perl5 code

[19:17] *** p5evalbot joined
[19:26] *** Odin-LAP joined
[19:26] *** FurnaceBoy_ is now known as FB|afk

[19:29] <svnbot6> r10270 | fglock++ | PCR - :ratchet - 7 tests pass

[19:29] <aufrank> fglock: when I try that I _do_ get lib in my @INC, but perl can't find PadWalker.pm

[19:33] <fglock> aufrank: are you sure you have PadWalker installed?

[19:33] <fglock> (it's a separate CPAN module)

[19:35] <aufrank> probably don't ;)

[19:35] * aufrank checks

[19:37] <fglock> bbiab &

[19:41] *** Arathorn is now known as Aragone

[19:48] *** FurnaceBoy_ joined
[19:50] <kolibrie> fglock: pretty cool looking

[19:53] <aufrank> fglock: very cool :)

[20:05] *** nnunley joined
[20:06] *** nothingmuch joined
[20:10] *** ruz joined
[20:38] *** Odin-LAP joined
[20:43] *** vell joined
[20:49] *** kanru joined
[20:58] *** qu1j0t3 joined
[21:06] *** qu1j0t3 is now known as FurnaceBoy

[21:06] *** vell joined
[21:11] <audreyt> bernhard: try

[21:11] <audreyt> ghc-pkg unregister Pugs

[21:11] <audreyt> first

[21:11] <audreyt> if that helps

[21:12] <bernhard> Looks like I had ghc 6.5, from ubuntu repos, on my Linux machine.

[21:13] <audreyt> does ghc-pkg unregister work?

[21:13] <bernhard> After getting ghc 6.4.0 from ubuntu repos and building 6.4.2 things look fine

[21:13] * bernhard running make test

[21:15] *** knewt_ joined
[21:15] <audreyt> ooh.

[21:15] <audreyt> if you are not too deep into it, try "make smoke upload-smoke" instead :)

[21:16] *** knewt_ is now known as knewt

[21:18] <bernhard> About halfway trough, being optimistic

[21:19] <audreyt> k. :)

[21:21] <fglock> audreyt: hi

[21:22] <audreyt> hi

[21:24] <fglock> audreyt: PCR :ratchet generates fully inlined code - it seems to be 10x faster than the plain PCR

[21:24] <fglock> this may be a good idea for actual p6->p5, not only rules

[21:25] <audreyt> elaborate on the 'not only' part?

[21:27] <fglock> there may be parts of p6 than can translate to inlined p5 code - maybe 'Int', 'Str', 'Num' for example

[21:31] <audreyt> 'int', 'str', 'num' surely

[21:31] <audreyt> not sure about boxed variants

[21:31] <audreyt> maybe via autoboxing

[21:31] <fglock> such as Int stringification could generate something like ($_ == $inf ? 'Inf' : $_)

[21:31] <fglock> I was thinking about autounboxing :)

[21:31] <audreyt> right. I think generally the "is inline" flag can be on the prims

[21:31] <audreyt> nod

[21:34] *** vell joined
[21:34] <nothingmuch> do we have a seen bot?

[21:34] *** beppu joined
[21:34] <audreyt> seen nothingmuch

[21:35] <audreyt> guess not

[21:37] <stevan_> audreyt: he is floating around,.. lemme get him for you

[21:38] <buu> jabbot did it

[21:40] <fglock> &

[21:40] <svnbot6> r10271 | fglock++ | PCR - TODO update

[21:40] *** fglock left
[21:41] *** FurnaceBoy is now known as FB|afk

[21:41] *** davidfetter joined
[21:49] *** penk joined
[21:51] <audreyt> nothingmuch: I've painted a porcelain dish for you :)

[21:52] <audreyt> # http://pugs.blogs.com/photos/porcelain/lambdamoose.jpg

[21:53] * nothingmuch hugs audreyt 

[21:53] * nothingmuch bounces

[21:53] <audreyt> (there are other ones, but IrDA is really slow for getting pictures from this phone, so I'll upload them later)

[21:54] * nothingmuch hugs balas too for good measure

[21:54] <audreyt> :)))

[21:57] *** froh-doh joined
[22:03] * bernhard Failed 41/521 test scripts, 92.13% okay. 101/9252 subtests failed, 98.91% okay. 

[22:04] <audreyt> gaal: and this one is for you :) # http://pugs.blogs.com/photos/porcelain/moose.jpg

[22:05] <davidfetter> waht teh m0053?

[22:05] <davidfetter> er, m00se

[22:05] <audreyt> davidfetter: it's... the new camel

[22:05] <audreyt> http://search.cpan.org/dist/Moose/

[22:06] * davidfetter resists urge to start telling jokes about ed meese & hunter thompson

[22:08] <audreyt> bbiab

[22:24] <Toaster> heh, the lamdamoose rocks

[22:26] <nnunley> Moose and Squirrel.

[22:28] *** penk left
[22:28] * davidfetter pages nina

[22:41] *** hexmode joined
[22:46] *** vell joined
[23:02] *** OutThere joined
[23:02] *** OutThere is now known as SubStack

[23:10] *** cdpruden joined
[23:19] *** AtomicStack joined
[23:28] *** larsen joined
[23:29] *** Cryptic_K joined
[23:32] <svnbot6> r10272 | audreyt++ | * Signature.pg: brief answers to aufrank++'s Qs.

[23:33] *** shachaf joined
[23:37] *** mako132_ joined
[23:39] *** Quell joined
[23:47] *** jsiracusa joined
[23:50] *** mako132_ joined
[23:50] *** Ymmv joined
[23:59] *** kanru joined
