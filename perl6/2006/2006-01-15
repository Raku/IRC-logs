[00:27] *** phredmoyer joined
[00:40] <theorbtwo> Evening, people.

[00:41] *** cdpruden joined
[00:48] *** daja77_ joined
[00:52] *** avar\away is now known as avar

[01:13] <dduncan> evening

[01:17] <svnbot6> r8666 | Darren_Duncan++ |  r1965@Darren-Duncans-Computer:  darrenduncan | 2006-01-14 17:13:24 -0800

[01:17] <svnbot6> r8666 | Darren_Duncan++ |  in the ChangeLog, cleaned up the modules section

[01:24] *** brainn joined
[01:44] <dduncan> new r8665 smoke uploaded for darwin on haskell runcore

[01:51] *** justatheory joined
[01:56] *** avar joined
[02:17] *** meppl joined
[02:19] <meppl> guten morgen

[02:33] *** scook0 joined
[02:33] *** azuroth joined
[03:08] *** stevan joined
[03:40] <dduncan> aye

[03:43] <stevan> putter: ping

[03:45] <stevan> putter: I am going to assume you will backlog,.. so I will answer one of your questions 

[03:45] <stevan> re: p6 bootstrap

[03:46] <stevan> see perl5/Perl6-ObjectSpace/lib/Perl6/MetaModel/Bootstrap.pm

[03:47] <stevan> most of the methods have a POD comment over them with a p6 version and a pseudo-scheme version (which is what inspired PIL^N)

[03:49] * stevan goes back to watching a movie

[03:49] * stevan &

[03:57] <audreyt> leo_: it's not your problem -- it's pug's build system's

[03:57] <audreyt> I've just fixed it

[03:58] <audreyt> leo_: can we assume that .so support will be there for all(< darwin Win32 linux >) ?

[03:58] <audreyt> (for parrot that is)

[04:06] <svnbot6> r8667 | audreyt++ | * Fix embedding of threaded parrot.

[04:06] <svnbot6> r8668 | audreyt++ | * make FastPackedString even faster with -optc-O3.

[04:08] *** joepurl joined
[04:10] *** ErNci joined
[04:12] *** miyagawa joined
[04:16] *** Amnesiac joined
[04:18] *** forsaken joined
[04:47] <audreyt> multi export fixed. testing

[05:02] *** miyagawa joined
[05:02] *** putter joined
[05:05] <putter> stevan: thanks.

[05:05] <putter> re multi export, yay :)

[05:10] <putter> audreyt: so what do you think of a "q_to_eof"  construct?  It wont work inside a block (which may be a good thing;), but it will give us source filters.  Which will unblock rules hackery.  But that wont matter much, because it should also allow rapid creation of object spaces on top of the current pugs backend.  Thoughts?

[05:10] <putter> woot

[05:12] <putter> Maybe a Lexer function which sucks up everything.  So in Parser, it just looks like a very simple quoting construct.  No messing with State input needed.

[05:14] <putter> Sad thing is, this would have been just as easy as now to do, at any time in the last 1/2 year(?) since iblech created macros.

[05:18] <audreyt> rehi

[05:18] <audreyt> hm, q_to_eof.

[05:20] <audreyt> will "=begin DATA" fix it as well?

[05:20] <audreyt> and bind its content to $=DATA

[05:21] <gaal> morning. yay exports!

[05:21] <audreyt> gaal: so it's a architectural problem

[05:21] <audreyt> gaal: in AST.Internals

[05:22] <audreyt> search for 'low priority'

[05:22] <audreyt> you've just made that paragraph into "high priority"

[05:22] <audreyt> so I implemented it :)

[05:22] <audreyt> (unionPad was overridding multis even when both side is multi)

[05:22] <audreyt> this also makes non-same-scope multis work properly.

[05:25] <svnbot6> r8669 | audreyt++ | * Makefile.PL: typo on probing parrot-config.pir.

[05:25] <audreyt> r8670. enjoy :)

[05:25] * audreyt goes looking at parrot embed

[05:25] <gaal> cool!

[05:26] <gaal> audreyt++

[05:26] <svnbot6> r8670 | audreyt++ | * Multisubs now exports properly.

[05:26] <svnbot6> r8670 | audreyt++ | * In a pad, multi entries and non-multi entries are now cleanly

[05:26] <svnbot6> r8670 | audreyt++ |   separated.  We can hack in "proto" support as another entry type later.

[05:29] <gaal> could this have also been causing some of the difficulties in var export?

[05:30] <putter> maybe... exploring...

[05:30] <gaal> anyway, there are one or two nice recfactorings possible in Pugs.Parser.Export now, which is starting to put on some sanity :)

[05:31] <audreyt> cool :)

[05:32] <putter> I'm not sure DATA buys you much.  The usage pattern would probably be =begin DATA ... =end BEGIN{eval($=DATA)}.  Though that gets quite iffy given p6's restrictions on eval.  And it might as well be BEGIN{eval <<END ... END} with no DATA.  With the same eval disadvantages, because things are happening

[05:33] <putter> hmm, I was going to say compile time vs parse time, but that's not quite right.  hmm...

[05:34] <audreyt> putter: what does quote_to_eof do again?

[05:35] <putter> Ok, right.  the competition for q_to_eof wouldnt be DATA, which would require an eval, but rather simply  macrofoo <<END ... END.

[05:35] <putter> q_to_eof whatever ===  <<'END' whatever END

[05:36] <putter> put that way, I guess we can get started without it. ;)

[05:36] *** rantanplan_ joined
[05:36] <putter> a source filter consists of macro foo($src){...}  ... foo <<'END' ... END

[05:37] <putter> or macro foo($src){...} ... foo q_to_eof ... <EOF>

[05:38] <audreyt> so q_to_eof just returns the string

[05:38] <putter> perhaps the only advantage of q_to_eof is it could be use()d by importing a macro.

[05:39] <audreyt> it doesn't do eval either

[05:39] <audreyt> I'm still missing something... if we replace q_to_eof with $=DATA and put a =begin DATA immediately after

[05:39] <audreyt> without =end

[05:39] <audreyt> so it goes thru EOF

[05:39] <audreyt> how is that different?

[05:39] <putter> "returns" in the sense of parsing as basically a qLiteral, yes.

[05:42] <putter> perhaps I'm missing something.  say your DATA section contains  sub g(){42}  . How does that get run without an eval?  Whereas in  macrofoo <<'END' sub g(){42} END;  if macrofoo is simply  macro macrofoo($src){$src}, then g gets defined "normally".

[05:42] <putter> s/run/defined/

[05:43] *** hcarty joined
[05:43] <audreyt> I'm saying

[05:43] <audreyt> macrofoo $=DATA;

[05:43] <audreyt> =begin DATA

[05:43] <audreyt> sub g(){42}

[05:43] <audreyt> <EOF>

[05:44] *** hcarty left
[05:45] <putter> and you are right of course.

[05:45] <putter> pugs> macro f($i){say $i;"3"}  our $d="hi";  f $d;

[05:45] <putter> does the right thing.

[05:46] <putter> I wasn't expecting $i to be defined.  it isn't if it's my $i, but is if its our.

[05:46] <audreyt> and this also dtrt:

[05:47] <audreyt> macro f($i){say $i;"3"}  our $d ::= 'hi'; f $d;

[05:47] <audreyt> so you can have it both ways.

[05:48] <putter> hmmm

[05:50] <putter> DATA doesnt exist yet, yes?  (quick test example chokes on the "$")

[05:51] <audreyt> indeed.

[05:52] <audreyt> gaal: parrot's jit core appears broken. switching to a slower core now

[05:52] <svnbot6> r8671 | audreyt++ | * fix embparrot build some more.

[05:53] <gaal> halfwoot

[05:53] <putter> ok.  so no q_to_eof.  I'll use  macrofoo <<'END' ... END; to exercise object spaces.  and general source filtering can wait for another time.

[05:53] <putter> :)

[05:53] <audreyt> putter: or you can make $=DATA happen :)

[05:53] <gaal> audreyt: in export of subs, need the subName be updated with the new package? is that field used anywhere?

[05:53] <audreyt> by evaluating "our $=DATA ::=" whenever "=begin DATA" is seen

[05:53] <audreyt> otoh, maybe we should just implement $=END.

[05:54] <audreyt> gaal: it's just for debug

[05:54] <putter> :)  "IIIIII  muuussssttt resssssiiittt missiioonnnn cccreeeeeppppp"

[05:54] <audreyt> and prettyprint

[05:54] <audreyt> putter: ok, ok, another time

[05:54] <gaal> audreyt: oh, error coordinates? better updated it then.. but can wait till after the release

[05:55] <gaal> I gotta go to $work now.. see you :)

[05:55] <audreyt> gaal: no, I think preserving it is correct

[05:55] <putter> $working on the weekend?

[05:55] <audreyt> as export should retain its original pos

[05:55] <gaal> weekend's unfortunately over here :)

[05:56] <putter> Fri/Sat weekend?  or am I totally confused...

[05:56] <gaal> putter: you aren't

[05:56] <putter> k

[05:56] <putter> or at least not that regard ;)

[05:57] <gaal> heh. well, enjoy!   &

[05:57] <putter> 1 am.  past time to sleep.  play with object spaces tomorrow.  thanks audreyt, stevan.

[05:57] <putter> bye! &

[05:59] * Debolaz yawns.

[06:00] <clkao> audreyt: multisub export is fixed? i got _26main_3a_3aplan_16_.FETCH() is not a function

[06:00] *** gilby joined
[06:02] <audreyt> clkao: it's fixed... but maybe it broke pil2js?

[06:02] <svnbot6> r8672 | audreyt++ | * Disable JIT for embedded parrot; CGP seems unbroken now

[06:02] <svnbot6> r8672 | audreyt++ |   so use it instead.

[06:03] <clkao> audreyt: it doesn't seem to export 'plan' from Test to main.

[06:04] <audreyt> but normal runcore is fine, right?

[06:04] <clkao> ya

[06:05] <audreyt> ok, looking

[06:08] <svnbot6> r8673 | audreyt++ | * include parrot embed flags in building libHSPugs.

[06:11] <svnbot6> r8674 | audreyt++ | * in building the final pugs.exe, we don't need to put embed flags in again.

[06:13] <audreyt> duplicated

[06:18] *** putter joined
[06:19] *** avar is now known as \xc6bot

[06:19] *** \xc6bot is now known as avar

[06:22] *** putter joined
[06:23] <audreyt> working on a -CPIL1-YAML to ease debugging

[06:24] <putter> btw, I suspect it can't be =END or =begin DATA ... <eof> because the parse is finished by the time they are built.  =begin DATA...=end works because the macro use can be placed _after_ the data.  q_to_eof only avoids this by introducing a new Lexer "token" `all characters until eof`.

[06:25] <putter> g'night &

[06:25] *** avar is now known as \xc6var

[06:26] <audreyt> =END can still work through lazy evaluation. maybe. hm.

[06:27] <audreyt> but it's suboptimal.

[06:28] <audreyt> hm, wait, if you use q_to_eof, there can't be anything else following that line either

[06:28] <audreyt> so it amounts to the same thing

[06:28] *** \xc6var is now known as \xe6var

[06:28] <audreyt> (under lazy eval)

[06:29] <audreyt> although that would mean that the "our ::=" built by the =begin END needs to be evaluated (as a dependency) to the $=END token.

[06:29] <audreyt> very much suboptimal then.

[06:29] <audreyt> putter: you are right :)

[06:30] <audreyt> so a q:to_eof token type looks attractive now

[06:33] *** eric256_ joined
[06:35] *** \xe6var joined
[06:35] *** forsaken joined
[06:35] *** Amnesiac joined
[06:35] *** scook0 joined
[06:35] *** SamB joined
[06:35] *** kanru joined
[06:35] *** wilx joined
[06:35] *** binary42 joined
[06:35] *** brentp joined
[06:35] *** webmind joined
[06:35] *** chip joined
[06:35] *** orafu joined
[06:35] *** pdcawley_ joined
[06:35] *** Maddingue joined
[06:35] *** Odin-LAP joined
[06:35] *** ajs joined
[06:35] *** pjcj joined
[06:35] *** Juerd joined
[06:35] *** qmole joined
[06:35] *** amv joined
[06:37] *** _brentp joined
[06:37] *** webmind_ joined
[06:38] *** pdcawley_ joined
[06:39] *** binary42 joined
[06:39] *** qmole_ joined
[06:42] *** chip joined
[06:43] *** forsaken joined
[06:43] *** Amnesiac joined
[06:43] *** scook0 joined
[06:43] *** SamB joined
[06:43] *** kanru joined
[06:43] *** wilx joined
[06:43] *** brentp joined
[06:43] *** webmind joined
[06:43] *** Maddingue joined
[06:43] *** Odin-LAP joined
[06:43] *** ajs joined
[06:43] *** amv joined
[06:45] *** pjcj joined
[06:45] *** gilby left
[06:46] *** Juerd joined
[06:47] *** forsaken joined
[06:48] *** elmex joined
[06:48] *** amv joined
[06:48] *** Amnesiac joined
[06:49] *** Odin-LAP joined
[06:57] *** orafu joined
[07:06] <gaal> audreyt: ping

[07:07] <audreyt> gaal: pong

[07:07] <audreyt> gaal: I've got -CPIL1-YAML working :D

[07:08] <gaal> woohoo!

[07:08] <Khisanth> now for 2?

[07:11] <audreyt> and for PILN

[07:11] <audreyt> but it's a DrIFT rule

[07:11] <audreyt> so is trivial

[07:11] <audreyt> works for any haskell data structures

[07:13] * gaal needs to get that DrIFT

[07:17] *** nothingmuch joined
[07:21] <nothingmuch> morning

[07:25] <audreyt> yay, p5 YAML::Syck now loads !hs/Foo structures

[07:27] <svnbot6> r8675 | audreyt++ | * DriFT.YAML: Dumping Haskell structures as YAML.

[07:27] <svnbot6> r8675 | audreyt++ | * ./pugs -CPIL1-YAML etc works.

[07:29] <audreyt> YAML++ # best AST dump format thus far

[07:29] <audreyt> gaal++ # making this happen

[07:36] <gaal> < audreyt> yay, p5 YAML::Syck now loads !hs/Foo structures

[07:36] <gaal> !!

[07:37] <nothingmuch> morning gaal 

[07:37] <nothingmuch> want to see the list?

[07:37] <gaal> hey nm

[07:37] <gaal> how urgent is it? I have to leave the office for a $client

[07:37] <nothingmuch> not urgent at all

[07:37] <gaal> if this evevning still ok, good

[07:37] <nothingmuch> i just need someone with more clue than me to look it over =)

[07:43] <audreyt> YAML::Syck 0.25 and handles -CPIL1-Yaml dumps :)

[07:45] <audreyt> s/and/uploaded and/

[07:49] <gaal> don't .hs structures needs to predeclare some schema, because they're unions?

[07:49] <audreyt> no, because they are tagged unions

[07:50] <audreyt> so their tags becomes their... tags.

[07:50] <audreyt> .yaml and eval_yaml now supports utf8 literals.

[07:52] <gaal> but the specific data dumped does not include the other possible constructors

[07:52] <gaal> then again when dumping a hashy object undefined fields are not dumepd, either

[07:52] <svnbot6> r8676 | audreyt++ | * Unescaped UTF8 literal support for YAML dump/load, ported

[07:52] <svnbot6> r8676 | audreyt++ |   from Perl5's YAML::Syck.

[07:53] <audreyt> and we don't care about other possible ocnstructures.

[07:53] <audreyt> s/ocnstructure/constructor/

[07:54] *** DesreveR joined
[08:11] <gaal> I don't know how loading an object with unhashy representation is supposed to work though, tied objects etc.

[08:11] <gaal> they should supply a .to_yaml method probably.

[08:13] <gaal> akf &

[08:25] *** luqui joined
[08:37] <audreyt> clkao: -BJS repaired.

[08:37] <audreyt> vs. multi export

[08:38] <audreyt> 2 out of 3 cleaned

[08:38] <audreyt> now working on the remaining showstopper, Emit.PIR

[08:41] <svnbot6> r8677 | audreyt++ | * PIL/JS compilation now works with exported multisubs.

[08:54] *** iblechbot joined
[09:02] *** G2 joined
[09:13] *** elmex joined
[09:20] <svnbot6> r8678 | audreyt++ | * 09-dash-uppercase-c.t should use -CPIR instead of the deprecated

[09:20] <svnbot6> r8678 | audreyt++ |   -CParrot.

[09:28] *** GeJ joined
[09:34] *** nnunley joined
[09:49] *** Grrrr_ is now known as Grrrr

[09:57] *** dolmans joined
[10:03] <audreyt> -CPIR-YAML works too.

[10:03] * audreyt praises YAML again for greatly simplifying debugging

[10:24] *** kane_ joined
[10:28] *** chris2 joined
[10:37] <audreyt> lexical hoisting implemented. parrot codegen regained. trying to make :OUTER support now...

[10:40] <audreyt> argh, segfault.

[10:40] <audreyt> ...which is parrot's way of showing its affection

[10:40] <audreyt> I've missed it for some time now

[10:41] <audreyt> unsurprisingly, it happens on the Continuation PMC.

[10:42] *** webmind_ is now known as webmind

[10:43] *** bsb joined
[10:52] *** DesreveR is now known as r0nny

[10:56] *** Southen_ joined
[11:02] <nothingmuch> audreyt: =)

[11:02] <nothingmuch> we need someone to run an infobot on #perl65

[11:02] <nothingmuch> s/5$//;

[11:03] <nothingmuch> this will really help with all our acronyms

[11:04] <theorbtwo> That would be very good.

[11:04] <theorbtwo> Even better is if it can automagically check things in to a dictionary file in the repo.

[11:04] <nothingmuch> who runs purl on irc.perl.org?

[11:26] * \xe6var has been hacking some perl bots today;)

[11:26] <\xe6var> just using the xchat interface

[11:31] *** ninja6 joined
[11:45] <audreyt> inner closures implemented with :outer

[11:45] <audreyt> working on continuations now

[11:56] *** r0nny joined
[11:58] <theorbtwo> You seem to be making quite a bit of progress today...

[11:58] <audreyt> yeah, now I'm finally 1)off work 2)slept for a day

[11:58] <nothingmuch> sleep is underrated

[12:11] *** hareldvd__ joined
[12:27] *** pdcawley joined
[12:28] *** iblechbot joined
[12:43] *** pdcawley1 joined
[12:50] *** GeJ_ joined
[12:52] *** pdcawley1 is now known as pdcawley

[12:54] *** sky_ joined
[12:55] <xinming> audreyt: ping

[12:58] *** pdcawley joined
[13:07] *** pdcawley joined
[13:11] *** DaGo joined
[13:14] *** pdcawley joined
[13:32] *** pdcawley1 joined
[13:46] <clkao> audreyt: 

[13:46] <clkao> $ ab -clkao- [~/work/pugs] ./pugs -Bjs-perl5 -Iext/Test/lib t/builtins/arity.t

[13:46] <clkao> pugs: -B: openFile: does not exist (No such file or directory)

[13:46] <clkao> what openFile is that?

[13:46] *** bsb joined
[13:49] <nnunley> Perhaps the generated js file?

[13:49] <clkao> but -Bjs works

[13:51] <theorbtwo> strace and find out?

[13:51] <theorbtwo> From the message, it might be trying to open "".

[13:57] *** DaGo joined
[13:59] *** r0nny joined
[14:19] <svnbot6> r8679 | audreyt++ | * DrIFTify Emit.PIR for the "-C PIR-YAML" backend.

[14:22] <clkao> audreyt: so i found pugs-smokejs.pl's hack for not loading Test.pm is not needed anymore, it's using the precompiled one anyway, right

[14:22] <clkao> ?

[14:27] <audreyt> clkao: I think so yeah

[14:27] <clkao> axed

[14:28] <clkao> hopefully we will have a real smoke output now.

[14:29] <svnbot6> r8680 | clkao++ | * Remove the "ABSOLUTELY EVIL BLOODY HACK" from pugs-smokejs.pl, which

[14:29] <svnbot6> r8680 | clkao++ |   doesn't seem needed anymore, and was keeping smoke runs for js not

[14:29] <svnbot6> r8680 | clkao++ |   working.

[14:29] <svnbot6> r8680 | clkao++ | * Enable the rules tests for smokejs and introduce rlimit for rss.

[14:30] <clkao> hmm, # runjs.pl --run=jspm --perl5 t/01-sanity/06-use.t

[14:30] <clkao> pugs: *** Can't locate lib.pm

[14:30] <clkao> we can't use lib?

[14:30] <audreyt> no way

[14:30] <audreyt> is it in libpath?

[14:31] <clkao> no, crap. my blib6/lib is empty again.

[14:33] <clkao> ah i know, i need to kill all pm_to_blib files

[14:39] *** pdcawley joined
[14:40] <clkao> why do we need "$Test::testing_started = 1;" preset in Test.pm ?

[14:49] <audreyt> no idea :)

[14:50] <theorbtwo> grep for testing_started elsewhere?

[14:51] <clkao> it's used in END{} to print 1..0

[14:52] <clkao> consults svk blame

[14:52] <clkao> and that was audreyt!

[14:53] <clkao> actually gaal

[14:54] <clkao> actually mugwump

[14:55] <obra>   heh

[14:56] <audreyt> cascading blame sheet

[14:57] <audreyt> hm, parrot's lexpad is quite nice, although still has multiple inconveniences

[14:57] * audreyt finishes codegen for the new lexpad engine

[14:57] <audreyt> PIL^N->PIR looks very much trivial now.

[14:57] <clkao> oooh

[14:58] <theorbtwo> Woo!

[14:58] <audreyt> -BPIR passes all 01-sanity except .isa, .ref, .multi, .try

[14:58] <audreyt> the .isa and .ref just needs implementation

[14:58] <audreyt> .multi is straightforward as well

[14:58] <audreyt> have to think more about try{}

[14:58] <clkao> now, try to make t/subroutine/currying compile would you

[14:59] <clkao> gr, that's pil2js

[14:59] <clkao> iblechbot: summon iblech

[15:00] *** pdcawley joined
[15:04] <clkao> lists/reverse.t can't be compiled to pil

[15:10] *** daja77_ left
[15:11] <gaal> heya

[15:12] * gaal still at $work but back near a network connection

[15:16] <audreyt> hey gaal :)

[15:16] <audreyt> I'm finishing up -BPIR

[15:19] <gaal> w00t

[15:30] * gaal purrs at patch lines looking like this:

[15:30] <gaal> -    return $ emptyYamlNode{el=YamlSeq n} -- golfme!

[15:30] <gaal> :-)

[15:36] <audreyt> :D

[15:37] * audreyt is gaal's loyal caddy

[15:40] <theorbtwo> Oh, audreyt, why are there so few MkPoses these days?  for t/01-sanity/03-if.t, I only get /one/ on -BPIL[12]-*, or two on -BPIL[12]$

[15:40] <audreyt> theorbtwo: because I've de-GADT'ed the PIL structure

[15:41] <audreyt> so Pos can only attach to Stmt now

[15:41] <theorbtwo> Ah.

[15:41] <audreyt> we can make up by having PosExp etc

[15:41] <audreyt> which would be ugly

[15:42] <theorbtwo> Didn't we want fairly high-resolution poses to give high-quality error messages?

[15:42] <audreyt> we do

[15:42] <theorbtwo> I wanted them for high-quality syntax hilighting...

[15:42] <audreyt> we need a better annotational structure than that

[15:43] <audreyt> theorbtwo: currently dumping syntax tree gets your further for highlighting than PIL anyway

[15:43] <gaal> haskell golf is so fun. audrey, does the drift-yaml stuff mean that in principle the custom code for PGE emitting could have been replaced with someting more generic? (modulo a custom tag)

[15:43] <audreyt> PIL is already too desugared

[15:43] <audreyt> gaal: why, yes.

[15:44] * gaal eyes PCRE serialization :) but I know nothing about PCRE. Time to learn!

[15:50] <gaal> good, they hide real_pcre but they make a comment about future-proofing and keeping the structure head stable.

[15:51] <elmex> will it be possible to have something like Coro in perl6? for example a network program i use Coro and it's way easier than using threads for async programming

[15:51] <svnbot6> r8681 | audreyt++ | * -BPIR now returned to its full glory.

[15:51] <svnbot6> r8681 | audreyt++ | * Test.pm doesn't work yet because of named args.

[15:52] <theorbtwo> How do you dump syntax tree?

[15:52] <gaal> theorbtwo: where? :d or :D in the interactive pugs

[15:52] <audreyt> elmex: sure

[15:52] <theorbtwo> From a command line.

[15:52] <audreyt> ?eval coro foo { yield 1; yield 2 } foo() + foo()

[15:53] <audreyt> gah, evalbot off

[15:53] <audreyt> theorbtwo: I'll make a -CExp-YAML for you.

[15:53] <theorbtwo> That'd be lovely.

[15:53] <elmex> audreyt: but what about the threading in the event system? i read about it in some doc in the parrot source

[15:54] <audreyt> elmex: see http://search.cpan.org/dist/Perl6-Bible/lib/Perl6/Bible/S17.pod

[15:54] <elmex> audreyt: k

[15:59] *** putter joined
[16:00] * putter backlogging, boggles

[16:00] <putter> audreyt++

[16:01] <audreyt> =)

[16:02] <putter> ok, q:to_eof goes on the todo list.  but object spaces first I think.

[16:03] <audreyt> YAML dumping now handles even VRefs

[16:03] <gaal> audreyt: at the bottom of DrIFT.YAML, there are instances for 2-tuples and 3-tuples. why are they needed? alternatively, do longer n-tuples also need to be provided in some cases?

[16:03] <audreyt> thanks to anchoring

[16:03] <gaal> woooo!

[16:03] <gaal> audreyt++

[16:04] <audreyt> I've not finished porting the marking algorithm from YAML::Syck yet

[16:04] <gaal> DrIFT looks like magic to me. The usage is just "asYaml bar" ?

[16:04] <audreyt> and loading of circular structure is still broken (even in p5)

[16:04] <audreyt> gaal: yes.

[16:04] <audreyt> it is magic.

[16:05] <audreyt> look at src/DrIFT/*YAML*

[16:05] <audreyt> for the heavy (?)lifting

[16:05] *** marmic joined
[16:05] <audreyt> oh wait, you already did

[16:05] <audreyt> so yeah, that's all there is

[16:05] <audreyt> (in particular src/DrIFT/RuleYAML.hs)

[16:05] <gaal> yes

[16:05] <audreyt> yeah... it is indeed highly magical

[16:06] <audreyt> "deriving anything whatsoever)

[16:06] <audreyt> s/.$/"/

[16:06] <clkao> how so? not just a seen hash?

[16:07] <gaal> so (VRule (rule@(MkPGERule _))) = do { x <- asYaml rule; return rule{ tag="tag:pugs:rule" } }

[16:07] <audreyt> clkao: not when you are loading

[16:07] <audreyt> clkao: consider circular $x=\$x

[16:07] <audreyt> clkao: the dumping is trivial

[16:08] <gaal> s/rule\{/x{/

[16:08] <audreyt> gaal: yes, and then you'd need to add a drift for VRule

[16:08] <theorbtwo> Data::Dump::Streamer handles this by dumping with a placeholder, then later code to fill it in with the right thing.

[16:08] <audreyt> which I'm doing now anyway

[16:08] <audreyt> theorbtwo: yes, that's what's needed, I've just not got around to it

[16:09] * gaal wonders if SE Asia is experiencing power failures as all the energy seems to be channeled to one hacker

[16:09] <audreyt> heh

[16:10] <gaal> (no offense <clkao ingy> et al)

[16:11] <putter> good night's sleep++ ;)

[16:12] <svnbot6> r8682 | audreyt++ | * place asYAML in the IO monad so we can serialize everything.

[16:15] <putter> ok, not insane++.  pcre bungling negative lookbehind assertion--.  hmm, I wonder when we last updated pcre...

[16:16] <audreyt> feel free to up it

[16:19] * audreyt adds DrIFT to Pugs.AST.Internals and watches the sky fall...

[16:22] <audreyt> wow, that exhausted hugs's default heap.

[16:22] *** iblech joined
[16:22] <audreyt> iblech: hey!

[16:23] <iblech> clkao: pong :); looking...

[16:23] <iblech> Hi :))

[16:24] <clkao> iblech!

[16:26] <clkao> iblech: how to implement want()?

[16:27] <theorbtwo> Check your context.

[16:27] <iblech> clkao: All calls ship an unboxed PIL2JS.Context object; want() could interpret it

[16:27] <iblech> clkao: But, at the time I wrote the context stuff, -CPIL1 reported unreliable context info

[16:28] <clkao> but when implementing want itself as a function, it gets its own .context object, right?

[16:28] <iblech> Right; I'd implement want() in P5 Prelude::JS, i.e. as a macro

[16:29] <clkao> right. i forgot about that

[16:29] <clkao> but iirc the pil has weird context. not something like list, scalar.. but Var or something

[16:30] *** rhayder joined
[16:30] <iblech> I think we've to put the s/sub foo/our sub foo/ hack back in: http://tnx.nl/4398ZCJI

[16:31] <iblech> IIRC it has Item[Any], Item[Foo], Plural[Any], Plural[Foo] etc

[16:31] <clkao> oh bad.

[16:32] <clkao> how can we really fix it?

[16:33] <putter> iblech! :)

[16:33] <clkao> iblech: but we don't need the Test.pm hack right?

[16:34] <iblech> clkao: We've to hack Haskell :) PIL1 puts "global subs" (i.e. /^sub/, not /^our sub/ or /^my sub/) in pilGlob, so we can't know the lexical scope the sub used to live in

[16:34] <clkao> mm, can't we kludge it in pil2js layer?

[16:35] <clkao> or make everything our for now :p

[16:35] <iblech> clkao: Right; but without the s/use Test// smoking will be muuch slower, as Test.pm will be re-parsed and re-compiled on each invocation, even though we already have Test.pm precompiled -- Pugs doesn't know that we implicitly load Test

[16:35] <clkao> iblech: really? it doesn't seem so. i thought runjs.pl already knows how to do that

[16:37] <iblech> lines 95-97 are commented in runjs.pl; pugs wasn't/is not able to parse the resulting command line args

[16:37] <iblech> No, we've to s/// the source; by the time the source is compiled to PIL1 the lexpad info is already lost

[16:38] <clkao> oh, strange. or maybe it wasn't using the precompield one anyway - because they timed the same

[16:38] <clkao> and for some reasons s/use Test/ out is actually making smoke failing.

[16:38] <clkao> that's why i killed it

[16:39] <iblech> I just timed it with arrays/elems.t: 19s with r8680, 10s with 8679 (r8680 was the de-hack-commit)

[16:39] *** justatheory joined
[16:39] <iblech> hm, weird

[16:41] <clkao> does pugs-smokejs.pl ../../pugs -w ../../t/arrays/elems.t work for you?

[16:41] <iblech> yep; that was the exact commandline I timed the two revs

[16:42] <clkao> weird. it didn't work for me

[16:42] <iblech> maybe your precompiled Prelude.js and Test.js are outofdate?

[16:43] <clkao> no, it was clean

[16:43] <clkao> let me try on another box

[16:44] *** GeJ joined
[16:46] <iblech> make smoke-js with r8679 worked without problems here (I ^Ced after pop.t): http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.10-r8289-linux-pil2js--1137343454-201--140-139-1-2-2-0--cd81ec5d99c7e9f763d246fffe8cc0ca.html

[16:52] <audreyt> Exp yamlified.

[16:54] <theorbtwo> Cool.

[16:56] <clkao> ok.. want to revert it ? maybe something was messed up

[16:57] <theorbtwo> audreyt: Um, ci?

[16:58] <iblech> clkao: ok, I'll also add some more comments

[17:06] <putter> is t/pugsbugs/ still the place for such?  pugs -e 'my $s="Foo Hee"; $s ~~ s:perl5:g/(?<!\:)\b(?=[A-Z])/X::/; say $s' --> "X::Foo X::X::Hee".  extra X::.  Looks like a non trivial logic change is needed to the Prim/Match.hs line 129, r7551's attempt to deal with zero width matches.

[17:08] <audreyt> sure

[17:09] <iblech> clkao: r8683

[17:09] <svnbot6> r8683 | iblech++ | PIL2JS: pugs-smokejs.pl:

[17:09] <svnbot6> r8683 | iblech++ | * Put the s/use Test// and s/sub/our sub/ hack back in.

[17:09] <svnbot6> r8683 | iblech++ | * See the improved comments for a more-detailled explanation.

[17:11] <putter> Quickly scanning the pcre change log did not suggest a pressing need for an upgrade (some security fixes, not much in the way of improved functionality), so I punt.  Own problem turned out to be pugs-side.

[17:16] *** elmex joined
[17:16] <svnbot6> r8684 | audreyt++ | * Pugs.AST.Internals now adopts DrIFT.

[17:20] <audreyt> theorbtwo: check if it worksforyou.

[17:22] <svnbot6> r8685 | audreyt++ | * The extremely Syck backend to dump parse tree as YAML:

[17:22] <svnbot6> r8685 | audreyt++ |     ./pugs -C Parse-YAML -e '...'

[17:28] <svnbot6> r8686 | putter++ | In global substitutions, lookbehind information is lost, so some

[17:28] <svnbot6> r8686 | putter++ | patterns with lookbehind yield incorrect results.

[17:32] <svnbot6> r8687 | audreyt++ | * half-finished attempt at dumping the global bindings also.

[17:36] <gaal> rehi

[17:37] * gaal checks out a fresh wc to try building on native win32...maybe my crashes were all colinux's fault?

[17:38] <theorbtwo> Odd, I keep gettting '<<<<<<<' thingies in my source files.

[17:38] <theorbtwo> The .hs-drifts.

[17:38] <audreyt> theorbtwo: rm them and svn up

[17:39] <theorbtwo> Oh, svn revert $filename doesn't DTRT?

[17:39] <ingy> a to the the u the the mf D-rey yo!

[17:40] <audreyt> greetings ingy.

[17:41] <ingy> yoyoyo

[17:42] <audreyt> how goes?

[17:42] <ingy> dot Net itmfh y'all

[17:42] <audreyt> YAML is taking over pugs internals...

[17:42] <ingy> about time

[17:43] <audreyt> indeed

[17:43] <ingy> audreyt: I noticed YAML::Syck don't sort keys on dump

[17:43] <ingy> can it?

[17:43] <clkao>  /win 35

[17:43] <gaal> should it?

[17:44] <gaal> isn't that 'spensive?

[17:44] <audreyt> should it?

[17:44] <ingy> depends on what you use it for

[17:44] <audreyt> we don't mark thinks as !omap

[17:44] <ingy> it should be able to I think

[17:44] <audreyt> so !map semantics calls for unordered

[17:44] <theorbtwo> Well, sorted keys means that you can cmp it.

[17:44] <ingy> audreyt: that's not what I'm talking about

[17:45] <gaal> theorbtwo: sure, which is why the yaml harness makes sure to explicitly sort :)

[17:45] <audreyt> ingy: I'm confused then

[17:45] <ingy> I'm just saying you should have the ability to sort Dump

[17:45] <audreyt> oh, a flag

[17:45] <ingy> it's important

[17:45] <ingy> people like it

[17:45] <ingy> it makes them happy

[17:45] <audreyt> if you say so

[17:45] <ingy> and then they dance

[17:45] <gaal> off by default yes

[17:45] <ingy> so say I

[17:45] <audreyt> implemented.

[17:46] <audreyt> uploading.

[17:46] <gaal> ingy: do they go parkour on it?

[17:46] <ingy> audreyt: feeling a little sluggish tonight?

[17:46] <gaal> they dance == good for humanity

[17:47] <ingy> YAML.pm has it on by default, fyi

[17:47] *** dduncan joined
[17:47] <ingy> human readable being more important more of the time then speed

[17:47] <ingy> but whateversville

[17:48] <ingy> let the people decide

[17:48] <ingy> power to the cavemen, etc etc

[17:48] <gaal> ingy: well, at least if it's on by default you can have a :fast flag

[17:48] <gaal> and make a synonym for it called :audreylike

[17:49] <ingy> $YAML::Audreyonic = 11;

[17:49] <ingy> cause we all know audreyt goes to 11

[17:49] <audreyt> ;)

[17:50] <audreyt> so, syck provides sort_keys

[17:50] <audreyt> but doesn't actually implement it!

[17:50] * audreyt goes implementing it for Why

[17:51] <gaal> audreyt++ # code traceur

[17:54] <audreyt> ..implemented.

[17:55] <obra> heh

[17:56] *** hcarty joined
[17:56] *** hcarty left
[17:58] * theorbtwo grrrs.

[17:58] <theorbtwo> Enough of this...

[17:58] * theorbtwo rm -r's, and re-cos.

[18:00] <audreyt> YAML::Syck 0.26 hits CPAN :)

[18:01] <obra> audreyt++ # perl5 hacking

[18:01] <obra> (Does it bundle libsyck?)

[18:02] <audreyt> sure does

[18:02] <obra> Excellent

[18:02] <audreyt> very fast too. SVK trunk already switched to use it.

[18:03] <obra> Excellent

[18:03] <audreyt> ingy: enjoy my sluggish implementation :)

[18:03] <obra> . o O { When do we get SVK 2.0?}

[18:04] <audreyt> okay. all three showstoppers gone for 6.2.11

[18:04] *** justatheory joined
[18:05] <obra> ooh

[18:05] <audreyt> I'll switch to general bugfix mode after 1)journal 2)some sleep

[18:05] <audreyt> another full day for pugs tomorrow :)

[18:05] <obra> nice.

[18:05] <audreyt> obra: parrot targetting is back and gens much fasters now

[18:05] <obra> !

[18:05] <audreyt> the parrotBrokenXXX global flag is gone.

[18:05] <obra> nice

[18:06] <obra> Tomorrow is a GPLv3 day for me

[18:06] <audreyt> hmmm?

[18:07] <nnunley> Reading it?

[18:07] * gaal didn't know it went to 3

[18:07] <audreyt> hm, anyone got some cycles to remove :todo for unexpected successes?

[18:08] <gaal> audreyt: i'll do it, if my computer doesn't crash :/

[18:08] <obra> nnunley: no. launch conference

[18:08] <audreyt> gaal: :/

[18:09] <nnunley> Cool.

[18:11] * nnunley checks the gnu foundation web site to see what's going on.

[18:13] <obra> gplv3.fsf.org

[18:15] <gaal> drats, heatups again. I'm going off to give it a thorought vacuuming or something. bbiab &

[18:29] *** Limbic_Region joined
[18:32] * gaal praises dyson

[18:32] <gaal> I never thought vacuum technology wouls save my computing day

[18:33] * putter emerges from a maze of twisty little passages, weary and battered, but holding a little shiny thing. 

[18:33] <gaal> ooh :)

[18:35] <putter> package P { use X; }  where X.pm is  class A {] multi method A::f(A $self:) {say "yay"} class B(){}multi B::g(){my $a = A.new; $a.m}   and P::B::g does the right thing.

[18:37] <putter> Clearing the way for attempting  package Test1 { use ObjectSpace1; } package Test2 { use ObjectSpaceVariant2; }  etc.

[18:38] <audreyt> woot!

[18:41] <clkao> iblech: why isn't pil2js using pil2?

[18:41] <audreyt> because there's no pil2 yet ;)

[18:41] <audreyt> (the current one is a stub that's identical to pil1)

[18:42] <audreyt> miyagawa: please apply http://perlcabal.org/~autrijus/tmp/syck-patch.diff when you get a cycle -- that will help Jifty adopt Syck, I think

[18:43] <putter> took an unfortunate amount of hackery.  a source filtering macro on a here doc, which eval()s a s/// statement, filtering code with assorted restrictions.  Pretty photo ops along the way, like  multi B::g{my A $a = .new; } yielding an object of type B.  eep.

[18:43] <gaal> audreyt: my box is sustaining a smoke at peaks of 56 C, instead of 83 C which is a definite improvement. I'll do the deyellowing :)

[18:43] <putter> all because classes are basically currently a flat namespace. ;)

[18:44] <gaal> putter: lol

[18:44] <putter> clkao: re pil2js, what do you mean?  it says it uses pil2 right there in the name!?!

[18:44] <clkao> but it's using pil1 ?

[18:45] <putter> sorry, I should have had a clarifying smiley ;) on that

[18:45] <clkao> XD

[18:46] <putter> gaal: re cool cpu, what changed?

[18:46] <gaal> putter: there was crufy between the leaves of the cpu heatsink. I vacuumed it.

[18:46] <gaal> s/crufy/cruft/

[18:47] <putter> ah.

[18:48] <gaal> these no longer being the 386 days, I'm embarassed to say I couldn't figure out how to detach the fan from the heatsink. but I have a powerful vacuum.

[18:49] <gaal> there are some very weird error messages cropping up here and there from the smoke ("no such sub: &splice" etc.)

[18:50] <audreyt> your prelude is not linked?

[18:50] <audreyt> hm, can't be

[18:50] <gaal> do we have any kind of historical smoke speed data?

[18:50] <gaal> audreyt: my Test.pm is precomp, fwiw

[18:50] <audreyt> nod

[18:50] <gaal> I remember it once caused us insanity errors

[18:50] <audreyt> gaal: smoke.pugscode.org has seconds iirc

[18:50] <gaal> don't remember where any why though.

[18:51] <gaal> audreyt: I'm looking to measure, uh, average test case throughput or something.

[18:51] <audreyt> *nod*

[18:51] <gaal> and iblech++'s server doesn't keep very old smokes

[18:51] <putter> gaal: 386 days?

[18:52] <gaal> 80386

[18:52] <clkao> iblech: up'ing to trunk i am having _26main_3a_3aplan is not defined. :/

[18:52] <putter> ahhhh. :)

[18:52] * putter stops trying to think of things three hundred and eighty six days long.

[18:55] * putter considers creating a script to download pugs in 200 revision increments, timing build, startup, and test times/counts.

[18:55] <gaal> I just remember how a smoke took me about 3 minutes on a fast machine at work now, and we don't have that any more; of course we have zillions of new tests but sometimes I wish pugs were much faster

[18:55] <gaal> s/now/once/

[18:56] <gaal> undef.t loops?

[18:56] <gaal> great, I just used cpu temperature as an indicator for a test bug.

[18:56] <putter> correct first, faster later.  I mostly wish more stuff was working.  Would trade a 100x speed hit for some of it.

[18:57] <putter> lol

[18:57] <gaal> putter: slow smoke == less inclination to smoke

[18:57] *** SamB joined
[18:58] <audreyt> gaal: pugs is about to get much faster :)

[18:58] <gaal> because of? drift?

[18:58] <audreyt> because of PILN's use of FPS and Seq

[18:58] <gaal> confirmed hang after case 59 in undef

[18:58] <gaal> checking.

[18:58] <putter> which is less critical than it might be, given audreyt et.al.'s impressive regression cleanup sweeps.

[18:59] <putter> (re less inclination to smoke)

[18:59] * putter googles FPS...

[18:59] <gaal> ohhh, it's a problem with an old external parrot

[19:00] <gaal> audreyt: can we interrogate external parrots and refuse to work with old ones?

[19:00] <putter> ok, I assume you don't mean Frag, a first person shooter written in haskell. :)

[19:01] <audreyt> ingy: SortKeys defaults to 1 is... sane.

[19:01] <leo_> gaal: $ ./parrot --version

[19:01] <theorbtwo> theorb:/usr/src/pugs> ./pugs -BParse-YAML t/01-sanity/04-if.t

[19:01] <theorbtwo> pugs: user error (Cannot evaluate in Parse-yaml)

[19:01] <audreyt> I'll adjust accordingly.

[19:01] <gaal> aaaah! I foolishly killed the smoke instead of the hung parrot.

[19:01] <gaal> leo_: thanks

[19:01] <ingy> audreyt++

[19:01] <putter> ahhh, fast packed strings.

[19:02] <audreyt> with -optc-O3 no less.

[19:02] <audreyt> (a trick learned from alioth entries)

[19:02] <audreyt> (which Haskell is now placed as the more efficient among languages)

[19:02] <putter> http://www.cse.unsw.edu.au/~dons/fps.html

[19:02] <gaal> very cool

[19:02] <ingy> it makes YAML a great data dumper

[19:03] <leo_> audreyt: parrot r11198 fixes --optimize compile problem

[19:03] <audreyt> # http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=all

[19:03] <audreyt> leo_: excellent

[19:05] <gaal> audreyt: where does the, uh, process load memoization of parrot happen?

[19:05] <theorbtwo> Bah, I'm an idiot sometimes.  I wanted -C, not -B.

[19:06] <audreyt> gaal: external parrot?

[19:07] <audreyt> that's in Pugs.Embed.Parrot.initParrot

[19:08] <gaal> hm, maybe it's better to do this at build time actually

[19:08] <audreyt> purr?

[19:08] <gaal> 0.3.0 on windows causes pugs to hang

[19:09] <gaal> let me see first if 0.4.1 doesn't :-)

[19:14] <audreyt> YAML::Syck 0.27 up.

[19:14] <audreyt> gaal: pugs always targets the previous parrot _and nothing else_

[19:15] <audreyt> because it's infeasible^Winsane to support two consecutive parrot releases.

[19:15] *** justatheory joined
[19:16] <iblech> clkao: Got the error here, too. And there seems to be something wrong with PBind; investigating...

[19:19] <iblech> clkao: (PIL2JS worked with r8684)

[19:19] <gaal> audreyt: okay, but we should buildfail if it isn't found...

[19:20] <audreyt> gaal: nod, commits welcome :)

[19:20] <gaal> okay, pugs+parrot head works

[19:20] <gaal> audreyt: yup

[19:20] <gaal> I'm all over it :)

[19:21] <iblech> audreyt: http://tnx.nl/4400ZKQO (:pil.yaml of my $foo = 42) -- is the PBind $foo := $foo supposed to be there?

[19:22] <theorbtwo> It works (after upgrading my YAML), but My God, It's Full Of Arrayrefs.

[19:22] <audreyt> iblech: that is what Exp desugars to

[19:23] <audreyt> iblech: though I too wonder if we should eliminate it

[19:23] <audreyt> eliminated.

[19:24] <putter> I'm tempted to write someplace "skills: Tests, Perl6 (basic)\n * add additional s:perl5/// tests to t/rules/s_perl5.t.  Including a copy of pugsbugs/global_subst_with_lookbehind.t, and a :todo test showing a :e adverb doesnt exist. \b* Look for other test files which say something like "add more tests" and list them here.\n

[19:24] <svnbot6> r8688 | clkao++ | Make t/magical/pid.t pass for jsperl5 backend.

[19:24] <svnbot6> r8688 | clkao++ | * Implement unlink().

[19:24] <svnbot6> r8688 | clkao++ | * Implement $*PID.

[19:24] <gaal> audreyt: can I use versioning information in Module::Install "recommends" directives? Can I access that data programmatically?

[19:24] <audreyt> gaal: yes, you can load META.yml.

[19:24] <audreyt> with YAML::Syck

[19:24] <gaal> :)

[19:24] <gaal> pugs should prolly not depend on that just yet

[19:25] <audreyt> you can also grep ;)

[19:25] <audreyt> iblech: r8689?

[19:25] <svnbot6> r8689 | audreyt++ | * only explicitly rebind pads if we are importing from somewhere else.

[19:25] <gaal> but our META.yml doesn't mention parrot at all!

[19:25] <wolverian> does parrot use gmp?

[19:25] <audreyt> wolverian: it does here

[19:25] <putter> skills: haskell (but little pugs)\n * modifiy op2Match x (VSubst (rx, subst)) | rxGlobal rx in mumble to handle look-behind correctly (ie, the "back string" cant simply be discarded).\n..."

[19:26] <wolverian> audreyt, ah. thanks

[19:26] * theorbtwo wonders how much of a performance increase that gave.

[19:26] <putter> A TASKS file comes to mind.  But if a lot of people weren't psyced, it would be pointless.

[19:26] <gaal> audreyt: I mean, you can say build_requires  ('ExtUtils::MakeMaker' => 6.15); -- but can you say recommends (parrot => '0.4.1')?

[19:26] * putter listens for signs of psyced people...

[19:27] <audreyt> gaal: yes but it would be silly as perl -Mparrot doesn't do anything

[19:27] <theorbtwo> I think they'd self-reinforce a bit.

[19:27] <theorbtwo> It doesn't hurt anything to have some TODO about.

[19:27] <iblech> audreyt: Thanks :) checking...

[19:27] <gaal> LOL:    $version .= 0 until length($version) >= length('0.123456');

[19:28] * audreyt remembers that

[19:29] <clkao> iblech: you saw the error? but it passes?

[19:30] <audreyt> putter: you fixed global_subst_with_lookbehind.t ?

[19:30] <iblech> clkao: Saw it; does not pass; seems to be related to the PBind issue audreyt++ just fixed

[19:31] <clkao> oh!

[19:31] <audreyt> iblech: will you be @ GPW? if yes, possibility of hackathoning a bit after that?

[19:32] <iblech> audreyt: Very unlikely :( school keeps me more busy than I thought it would some months ago...

[19:33] <audreyt> iblech: ow :/

[19:33] <putter> audreyt: fixed?  no.

[19:33] <clkao> i can fly to .de the weekend after the conference too. does it motivate you against school a bit more?

[19:36] <gaal> audreyt: is there a case where pugs will not attempt to use parrot at all? I'm not sure what's the right thing to do if an old parrot is found

[19:37] <gaal> I thought it was buildfail, but now I'm thinking it should maybe runtimely catchably fail?

[19:37] <iblech> clkao: I'm afraid it's mostly impossible; 2006-03 will be a month full of tests (and 2006-04 will be as well)... while all what mattered in grades 1..11 was to finish them, in grades 12 and 13 every point/mark matters...

[19:37] <audreyt> gaal: I think it's runtime nonchecked at this moment

[19:37] <gaal> maybe I should worry about the tests before this...

[19:37] <audreyt> gaal: catchable fail == improvement

[19:37] <clkao> iblech: hm, doens't seem to work for me

[19:37] <audreyt> but yes, test is more critical as I still hope to release tomorrow :)

[19:38] <gaal> audreyt: the problem is that a too-old parrot causes hangs.

[19:38] <theorbtwo> Oh, hmm.

[19:38] <gaal> OK, Test First! :)

[19:38] <audreyt> gaal: I understand... maybe hack src/pge/run_pge.pir to check version and die

[19:38] <iblech> clkao: here too. Removing the s/use Test// hack seems to fix the problem, but I have no idea why it worked some revs ago

[19:38] <leo_> audreyt: I'll check in the s/Undef/Null/ change for get_global/find_global failure in a minute

[19:38] <theorbtwo> The YAML has classes.  ./pugs -CParse-YAML t/01-sanity/04-if.t |perl -MYAML -MData::Dump::Streamer=Dump -e 'Dump Load (do {local $/; <>})' does not.

[19:38] <audreyt> leo_: cool, then pugs 6.2.0 can use that

[19:39] * theorbtwo gets some coke.

[19:39] <gaal> that seems the best place to put it. I'll have to learn pir though. fun! :)

[19:39] <audreyt> leo_: (also the single-closure-entry lambda-lifting thing)

[19:39] <clkao> iblech: it hasn't been working for me, hence my commit

[19:39] <iblech> clkao: very very weird

[19:39] <audreyt> iblech, clkao: PIL's export semantic changed today

[19:39] <clkao> i need to get some sleep

[19:40] <audreyt> it became all lexical via explicit rebinding to exporter's namespace

[19:40] <leo_> because 'unless defined' is also false for a defined .Undef global so just wrong 

[19:40] <clkao> audreyt: drop by london after gpw?

[19:40] <audreyt> clkao: I'd much rather drop by tokyo

[19:40] <audreyt> clkao: .il + schengen is bad enough

[19:40] <audreyt> .uk is too rushed

[19:40] <clkao> too bad

[19:41] <obra> we should finish figuring out dates for tokyo hackathon

[19:41] <obra> but I need to run

[19:41] <audreyt> yeah, with lwall and dconway, I'm inclined to arrive earlier / stay later

[19:42] <audreyt> (also dan kogai's extra-comfortable penthouse is very attractive.)

[19:42] <ingy> audreyt: what do you think about adding a manifest_skip(...) command to M::I

[19:43] <audreyt> ingy: I think it's a great idea; please commit

[19:43] <ingy> where is the M::I source?

[19:44] <audreyt> http://svn.openfoundry.org/modinstall/trunk/

[19:44] <audreyt> you are a committer

[19:44] <ingy> ok

[19:45] <ingy> audreyt: you should remove it from svn.kwiki.org

[19:46] *** mjl69 joined
[19:47] <iblech> clkao: r8690, PIL2JS works here again

[19:47] <svnbot6> r8690 | iblech++ | PIL2JS: pugs-smokejs.pl: Remove the s/use Test// hack to unbreak PIL2JS.

[19:49] <audreyt> ingy: please do it for me

[19:49] <audreyt> I need to sleep soonish

[19:51] <ingy> audreyt: done

[19:51] * putter puts shiny thing on dusty shelf.  spending a day+ doing object space kludges, to save a few of hours after piln comes out, just isn't the right thing.  some nice results, like q:to_eof, but now time to punt.

[19:52] * theorbtwo wonders if there's an (undocumented?) way to get YAML.pm to load a - !hs/Ann as a bless(..., "Ann"), or at least see after loading what it is.

[19:53] <ingy> theorbtwo: yes

[19:54] <theorbtwo> ...and it would be?

[19:54] <ingy> I forget

[19:54] <ingy> just kidding

[19:54] <ingy> well not really

[19:54] <ingy> one sec

[19:54] <putter> ;)

[19:55] *** _brentp is now known as brentp

[19:55] <ingy> look at t/pugs-objects.t

[19:56] <audreyt> theorbtwo: Class::Rebless

[19:56] <audreyt> with YAML::Syck

[19:56] <audreyt> should dtrt.

[19:56] <audreyt> (but customized marshall hooks with YAML.pm is saner.)

[19:56] <ingy> audreyt: is YAML::Syck going to support the YAML.pm APIs?

[19:57] <audreyt> ingy: you mean by making Dumper:: and Loader:: subclasses?

[19:57] <audreyt> ingy: I think I'll make a separate release for that. I think.

[19:57] <audreyt> not sure.

[19:57] <integral> since YAML::Syck actually works,  shouldn't YAML copy it, rather than the other way around?

[19:58] <audreyt> integral: YAML.pm also actually works :)

[19:58] <audreyt> (since a week ago or so)

[19:58] <leo_> audreyt: [re find_global] r11200 - a nice rev number fixes it

[19:58] <integral> hmm

[19:58] <ingy> theorbtwo: t/pugs-objects.t in the YAML-0.50 dist does what you want in both directions

[19:59] <theorbtwo> Thanks, ingy.

[20:00] <ingy> integral: if that is a diss, whatever. If not, we're talking about the apis that build of the core YAML stuff

[20:00] <ingy> YAML::Syck doesn't have anything to copy

[20:00] <ingy> audreyt: not talking about the subclassing

[20:00] <gaal> how does t/builtins/perl2.t get away without a plan?

[20:01] <gaal> I thought we required plans

[20:01] <ingy> talking about the YAML::Node stuff

[20:03] *** Debolaz2 joined
[20:03] <iblech> Sleep; night all! :)

[20:04] <audreyt> ingy: I think it makes sense to support it.

[20:05] <ingy> let's talk about it later...

[20:08] <svnbot6> r8691 | audreyt++ | * add a mental note-to-self to chase parrot 0.4.2's Null/find_global semantics.

[20:14] <leo_> audreyt: s/@ANON/:anon/

[20:14] <leo_> see also  DEPRECATED.pod 

[20:14] <audreyt> k

[20:15] <leo_> and for the one and only 'main' you could add :main, so that it reads: .sub 'main' :anon :main

[20:19] <audreyt> gotcha

[20:20] <audreyt> I'm fixing PGE::Hs n parrot tree to use compreg for PGE now

[20:20] <audreyt> though our :main is 'init'

[20:20] <audreyt> (as is the usual p5/p6 semantics)

[20:20] <svnbot6> r8692 | gaal++ | t/ - 27 tests unexpectedly succeeded. Expect more of them.

[20:20] <audreyt> so it remains :anon only :)

[20:21] <leo_> well, :main is that what is running first

[20:21] <audreyt> yup, and in p5/p6 it's the INIT block

[20:22] <leo_> yep

[20:22] <audreyt> hm, looks like PILN can target ResizableFooArray directly

[20:22] <audreyt> without going thru the PerlUndef foo

[20:23] <leo_> audreyt: while at INIT blocks - you have a proposal for FIRST blocks aka state?

[20:23] <audreyt> leo_: in parrot?

[20:24] <leo_> yes

[20:24] <audreyt> :first(another_sub)

[20:24] <audreyt> obviously

[20:24] <leo_> that doesn't provide a storage for 'state $a' in the caller

[20:25] <audreyt> it does, if we also make :first's pad part of the sub's.

[20:26] <audreyt> .sub another_sub :anon

[20:26] <svnbot6> r8693 | audreyt++ | * Leo pointed out that @ANON etc is deprecated; change to :anon instead.

[20:26] <audreyt>     .lex "$this_is_initted_only_once" $P0

[20:26] <audreyt>   ...

[20:26] <audreyt> .end

[20:26] <audreyt> .sub this_sub :first(another_sub)

[20:26] <audreyt>    find_lex "$this_is_initted_only_once" # works

[20:26] <audreyt> .end

[20:27] <audreyt> the alternative would be to have a .state form.

[20:27] <leo_> I'm thinking of a more hackish: .sub foo / .lex pmc $a :state / $a = new .Undef / sub.'entry' = not_first / not_first: ... / .end

[20:27] <audreyt> right.

[20:28] <audreyt> but I think a generic :first can be desugared into that

[20:28] <audreyt> and is easier to analyze anyway

[20:28] <audreyt> esp. when you have multiple

[20:29] <leo_> well, and don't want to desugar much more at PASM/PIR level, so ... 

[20:30] <audreyt> nod

[20:30] <audreyt> in any case, I'd be fine with a :state adverb.

[20:31] <leo_> ywah, that'll be needed to provide permanent storage, when the sub is left

[20:31] <audreyt> and we can talk about :let :temp :env :our later ;)

[20:33] <leo_> yep Bob Rogers is working on env vars

[20:33] <svnbot6> r8694 | audreyt++ | * Make YAML a subclass of Typeable, so we can show extra

[20:33] <svnbot6> r8694 | audreyt++ |   information even for undef notes.

[20:34] <audreyt> col

[20:34] <audreyt> cool

[20:34] <audreyt> also with an :env adverb?

[20:39] <leo_> dunno yet what's the result of it and how it'll look like

[20:44] <leo_> see his mails on p6i '[RFC] Dynamic binding...' (@larry[0] has provided input too)

[20:50] <audreyt> *nod*

[20:50] <audreyt> but it's 5am

[20:50] <audreyt> and I should sleep

[20:50] <audreyt> see you folks tomorrow :)

[20:50] <leo_> audreyt: good night

[20:50] * audreyt waves &

[20:51] <Juerd> re

[20:51] <Juerd> Good night, audreyt 

[21:08] <Limbic_Region> is it just me, but are other people not able to build on Win32?

[21:11] <Juerd> I'm not able to build on Win32, but mostly because I don't use that platform :)

[21:14] <Limbic_Region> heh

[21:14] <svnbot6> r8695 | audreyt++ | * Fix build before I went sleeping. ;)

[21:16] <audreyt> Limbic_Region: try r8696.

[21:16] <audreyt> &

[21:17] <svnbot6> r8696 | audreyt++ | * ditto for the two drift targets.

[21:18] <Juerd> Hackaholic :)

[21:18] <Limbic_Region> I have no idea how she is able to maintain a relationship

[21:18] <Limbic_Region> my wife would kill me

[21:19] * theorbtwo was unaware that she was in one.

[21:19] <Limbic_Region> theorbtwo - IIRC, she mentioned a partner in runtime typecasting

[21:20] <theorbtwo> Hm.  G'point.

[21:20] <Limbic_Region> or perhaps it was the journal entry that got pulled from use.perl for not accurately portraying real life

[21:20] <Limbic_Region> it was 1 of the 2

[21:23] *** feng123 joined
[21:23] <Juerd> IIRC, she travelled with her partner when she was in .nl

[21:23] <Limbic_Region> "With love and support from many people (my lover/partner balas, several camelfolks and lambdafolks, my family, a few real-world friends), I..."

[21:24] * Limbic_Region wonders if balas is also a hacker

[21:24] <Limbic_Region> cause if not - I have no idea how she is able to maintain a relationship

[21:24] <Juerd> I haven't seen balas mentioned in hacking context

[21:33] *** justatheory joined
[21:36] * Limbic_Region thanks audreyt as it appears the Win32 build is fixed though not yet finished

[21:42] *** phredmoyer joined
[21:43] <phredmoyer>   I'm writing a function that sets NEW.md5 = md5(somefunction) and was wondering if anyone had a suggestion for a built in function which outputs a text seed for md5

[21:45] <phredmoyer> random()::text?

[21:47] <theorbtwo> .perl?

[22:27] *** macli joined
[22:46] *** rantanplan_ joined
[23:10] *** Debolaz joined
[23:12] *** Cryptic_K joined
[23:22] *** macli joined
