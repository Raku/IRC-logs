[00:13] *** weinig|bbq is now known as weinig

[00:15] * xpeed is away: cooking

[00:22] <nothingmuch> xpeed: please make your client not announce /away publicly, it makes me think people are talking

[00:22] <nothingmuch> thanks =)

[00:38] <xpeed> ein?

[00:39] <xpeed> with all respect, if tha disturbs you, ignore xpeed all :)

[00:40] *** nothingmuch joined
[00:40] <nothingmuch> god damn irssi can't handle SIGWINCH

[01:05] *** jsiracusa joined
[01:28] *** marmic_ joined
[01:36] * xpeed is back (gone 01:21:27)

[01:46] *** frederico joined
[02:01] <drbean> In Pugs::Compiler::Rule, $match->from has become            package MyGrammar;

[02:01] <drbean>            use Pugs::Compiler::Rule;

[02:01] <drbean>            use base 'Pugs::Grammar::Base';

[02:01] <drbean>            *rule = Pugs::Compiler::Rule->compile( '((.).).' )->code;

[02:01] <drbean>            my $match = MyGrammar->rule( 'abc' );

[02:01] <drbean> Sorry. wrong paste.

[02:01] <meppl> gute nacht

[02:02] <drbean> $match->from has become ${$$match->{from}}

[02:03] <drbean> $match->to is now ${$$match->{to}}

[02:07] <drbean> Seems something is wrong with Runtime::Match::Ratchet. Overloading isn't working it seems.

[02:10] <drbean> If I use PRMR in my script, overloading is working.

[02:13] <drbean> "$match->[0]" returns 'ab' and "$match->[0][0]" returns 'a' as in the PCR manpage.

[02:22] *** hcarty joined
[02:29] <drbean> If I replace 'use Pugs::Compiler::Rule' with 'use Pugs::Runtime::Match::Ratchet' it's OK too.

[02:29] *** macroron joined
[02:31] *** FurnaceBoy joined
[02:41] *** qu1j0t3 joined
[02:52] *** jbt joined
[03:01] *** frederico joined
[03:10] *** cmarcelo left
[03:18] *** hcarty left
[03:27] <svnbot6> r10731 | cmarcelo++ | * Part of MapM is done, and Judy.Map is instantiating MapM

[03:27] <svnbot6> r10731 | cmarcelo++ | * Judy.Map value type now is "Refeable" (need a better name for this), this

[03:27] <svnbot6> r10731 | cmarcelo++ | class provides default implementation using StablePtrs, but Int, for example,

[03:27] <svnbot6> r10731 | cmarcelo++ | defines its own methods because an Int type fits in a Value. A strange bug

[03:27] <svnbot6> r10731 | cmarcelo++ | happens when try to define the default implementation: illegal instruction,

[03:27] <svnbot6> r10731 | cmarcelo++ | maybe is something about my arch (x86_64). But solved with a "dummy" workaround.

[03:27] <svnbot6> r10731 | cmarcelo++ | * First steps in Judy.Map finalizer, still not finalizing values (see comments).

[03:27] <svnbot6> r10731 | cmarcelo++ | * TestMap test core dumps if I do something very "memory intensive" and then

[03:27] <svnbot6> r10731 | cmarcelo++ | use HSIter functions, like "last $ take 1000000 [1..]" then testElems. For some

[03:27] <svnbot6> r10731 | cmarcelo++ | values it coredumps and for others it dumps "internal error" complaining about GC

[03:27] <svnbot6> r10731 | cmarcelo++ | having collected main thread (!).

[03:34] *** weinig is now known as weinig|sleep

[03:42] *** mako132_ joined
[04:10] *** cmarcelo joined
[04:26] *** SamB joined
[05:56] <cmarcelo> audreyt: ping

[06:41] <gaal> cmarcelo: she's on a long flight

[06:44] <cmarcelo> i see, i just ping'ed because idle was in 16h and didn't knew how long was the flight =o)..

[06:45] <cmarcelo> s/idle/her idle/

[06:45] <cmarcelo> gaal: what version of GHC do you use?

[07:26] *** Aankhen`` joined
[07:31] *** visq joined
[07:31] *** xern joined
[07:33] *** buu joined
[07:46] *** integral is now known as integral|ZzZzz

[07:47] *** buubot joined
[08:20] *** cmarcelo left
[08:37] *** bjoern_ joined
[08:38] *** marmic joined
[08:40] *** prozessor13 joined
[08:44] *** drbean joined
[08:54] *** bernhard joined
[09:49] *** iblechbot joined
[11:25] *** buubot joined
[11:25] *** buu joined
[11:58] <gaal> cmarcelo: 6.4.1

[12:03] *** iblechbot joined
[12:17] *** Aankh|Clone joined
[12:27] *** lisppaste3 joined
[12:42] <svnbot6> r10732 | audreyt++ | * AUTHORS: Update the list somewhat and lookup CPAN names.

[12:45] <svnbot6> r10733 | audreyt++ | * t/rules: update "rule" to say "regex" when then mean "regex".

[12:57] <svnbot6> r10734 | audreyt++ | * MANIFEST.SKIP: Do not bundle perl5/ modules that are yet unused.

[13:03] <svnbot6> r10735 | audreyt++ | * Perl6-Grammar: Adjust for regex/token/rule change

[13:03] <svnbot6> r10736 | audreyt++ | * Support for rule/regex/token distinction in the ->PGE bridge.

[13:11] *** weinig|sleep is now known as weinig

[13:13] <gaal> welcome home audreyt :)

[13:25] <audreyt> hey :)

[13:25] *** Ymmv joined
[13:25] <audreyt> exhausted, though :)

[13:25] <audreyt> 20hr flight

[13:25] <audreyt> the tree i back to all green 'cept for assign.t

[13:26] <audreyt> going to finish the MS talk tomorrow _and_ roll another preflight

[13:26] <audreyt> then take 11pm plane to the states

[13:26] <audreyt> another 20hr travel

[13:26] <audreyt> arrive at night, sleep, wake up and deliver the talk

[13:27] <miyagawa> that's gonna be tough

[13:27] <obra> :/

[13:27] <obra> good luck

[13:27] <obra> is ms flying you bizness class? ;)

[13:27] <audreyt> sleep for another day, then Seattle.pm talk, then Galois talk the day after, then Portland.pm the day after

[13:27] <audreyt> than YAPC::NA

[13:27] <audreyt> nope ;)

[13:27] <obra> aw

[13:27] <obra> audreyt: I promise not to make you go to boston.pm

[13:28] <audreyt> by the time I'm in boston the jetlag should be better

[13:28] <obra> :)

[13:28] <audreyt> g'nite folks :)

[13:28] <audreyt> *crash* &

[13:29] <gaal> :)

[13:29] <obra> sleep tight

[13:31] *** jsiracusa joined
[14:02] *** vel joined
[14:09] *** Limbic_Region joined
[14:15] *** chris2 joined
[14:19] *** shepherd_tony joined
[14:46] *** lisppaste3 joined
[14:48] *** macroron joined
[14:54] *** lambdabot joined
[15:30] *** amnesiac joined
[15:34] *** FurnaceBoy joined
[15:50] *** weinig joined
[15:58] *** Aankhen`` joined
[16:48] *** jsiracusa joined
[17:01] <svnbot6> r10737 | benedikth++ | * catalog_tests.pl: uses now all test-files mentioned in tests.yaml; colors todo tests

[17:01] <svnbot6> r10737 | benedikth++ | * catalog_tmpl/* : minor changes, still too ugly

[17:07] *** Aankhen`` joined
[17:10] <visq> Hi

[17:11] <visq> Are the hyperlinks in smoke.html indented to point into the test directories ?

[17:12] <visq> If this was just preliminary, the could now (actually working) point to

[17:13] <visq> catdir(t_index, $testfile =~ s/.t$/.html/)

[17:15] <visq> So you have hyperlinks to  *.t (and also cross-references to synopses)

[17:35] <gaal> visq: doesn't that happen now? I'm looking at line 231

[17:36] <gaal> are you getting colored test lines correctly now?

[17:37] <visq> yes, it works fine for me

[17:37] <visq> Do your hyperlinks work without patching testgraph.pl ?

[17:37] <gaal> then (a) cool and (b) I don't understand your question :)

[17:37] <visq> I haven't commited the changes to testgraph.pl yet

[17:37] <visq> Because I didn't know if it is fine to have the test htmls

[17:38] <visq> in t_index/...

[17:40] <visq> Just say "ok, that's sounds fine" ;)

[17:40] <gaal> Sorry, I still don't understand, there *are* test htmls in t_index

[17:42] <gaal> However, I have to go, so do whatever looks correct :)

[17:42] <gaal> visq++

[17:42] <gaal> (source control)++

[17:42] <visq> fine

[17:43] <gaal> BTW for extra points: s/use YAML;/try to load YAML::Syck and fall back on YAML.pm/ for @well_everything

[17:43] <gaal> # faster

[17:43] <gaal> have fun :) &

[17:47] <gaal> CPAN module idea: Best.pm: synopsis: use Best => [ qw(YAML::Syck YAML) ] or use Best => [ [@modlist], @args ]

[17:50] *** chris2 joined
[17:57] <obra>  It'd only work if you had a compat API around them.

[18:00] <obra> (Which we had to do for just that use case for a project here)

[18:01] *** lollan joined
[18:01] <miyagawa> Catalyst::View::JSON also deals with that

[18:07] *** froh-doh joined
[18:54] *** jsiracusa joined
[19:20] <svnbot6> r10738 | benedikth++ | * smoke.html hyperlinks to tests-html generated by util/catalog_tests.pl should now work (except for skipped tests)

[19:24] *** cognominal_ joined
[19:56] *** weinig is now known as weinig|coffee

[20:09] *** putter joined
[20:10] <putter> audreyt, etal: A while back I listed p6 namespaces.  But missed one, as submethod x can coexist with sub x and method x.

[20:12] <putter> Question - when both method x and submethod x are defined, what does o.x gives you the submethod ("A submethod is called only when a method call is dispatched directly to the current class. ".  How does one call the method?  By implication, there is some not-"directly" dispatch mechanism.

[20:12] <putter> s/what does//

[20:13] <wolverian> putter, (::Foo does C).x? :)

[20:14] <putter> Oh, never mind the directly question.  Inheritance.  So, just

[20:14] <putter> :)

[20:14] <putter> so just the How does one call the method?  question.

[20:16] <putter> wolverian: hmm?  given  class A { method x(){2}; submethod x(){3}; method m(){self.x} }

[20:16] <putter> A.new.m #=> 3

[20:16] <putter> So the question is, how to get 2.

[20:17] <wolverian> putter, class B is A { } B.new.x

[20:18] <putter> And, hmm, yes, one could   class A2 is A {};  my A2 $o2 = self as A2;  $o2.m;   maybe?

[20:19] <putter> method m(){ my class A2 is A {}; my A2 $mutant_self = self; $mutant_self.x }    maybe.  eep.

[20:20] *** enantiodrome joined
[20:20] <wolverian> (self as Whatever).x

[20:20] <wolverian> or s/Whatever/*/ :)

[20:22] <putter> Hmm.  Actually, it seems submethod visiblity is normal.  The class merely doesnt use them when handling dispatch inside of an inheritance chain.

[20:22] <putter> And the dispatch table is associated with the object, well, it's meta, and thus not with the variable?  So no variable typing games are going to help us here, no?

[20:27] <putter> Ah, ok...

[20:30] <putter> TimToady, etal: S12 says "A submethod is called only when a method call is dispatched directly to the current class.".  Which in local context (discussing only method-like things) is ok.  But in broader context is misleading, given than

[20:30] <putter> S12 elsewhere (distantly) says "A subroutine call considers only visible subroutines (including submethods) of that name. There is no fail-over from subroutine to method dispatch.".

[20:32] <putter> Hmm, oh, but that still doesn't solve our problem.  As calling self.x gets you the submethod by default, being able to _also_ say x(self) to get the submethod doesn't help us here.  :/

[20:34] <putter> wolverian: re "as Whatever", so the idea is on can wrap an existing object in a level of inheritance... that could be neat... ;)

[20:34] <putter> s/on/one/

[20:35] <putter> maybe even typesafe

[20:35] *** weinig|coffee is now known as weinig

[20:35] <putter> lexical overriding of dispatch to keep up with ruby 2.0

[20:37] <putter> ah, no.  not lexical overriding of dispatch.  only access via the variable is affected.  so, eh.

[20:38] *** spinclad joined
[20:40] <putter> Which all prompts the following random thought,

[20:41] <putter> in a few places we have defined expansions for constructs, eg $.x is short for self.x .

[20:42] <putter> has anyone pondered doing this more generally?  eg,  o.m  is short for  Perl6::method_dispatch(o,m) , and if someone defines  my Perl6::method_dispatch(...){}  in a block, dispatch can be arbitrarily weird there?

[20:44] *** justatheory joined
[20:55] *** mako132_ joined
[21:05] <gaal> obra: yes. which is precisely the case in YAML(?:::Syck)? :)

[21:07] <obra> The APIs aren't identical, iirc

[21:24] <gaal> For simple applications they are. It's unfortunate that there's no class method interface, because if there were you could do $yamlclass = eval { require YAML::Syck; "YAML::Syck" } || do { require YAML; "YAML" }; $yamlclass->Load()

[21:24] <gaal> zzzZ&

[21:26] *** larsen joined
[21:26] *** buubot joined
[21:44] *** bx420 left
[21:58] <nothingmuch> ingy: ping

[21:58] <nothingmuch> ingy: slight bug in Module::Compile - the self validator doesn't delete a .pmc

[21:59] <nothingmuch> wait

[21:59] <nothingmuch> sorry, false alarm

[21:59] <nothingmuch> nothingmuch--; # stupid

[22:06] *** cmarcelo joined
[22:08] *** enantiodrome left
[22:10] <ingy> hi nothingmuch

[22:10] *** kanru joined
[22:14] *** stclare joined
[22:20] *** weinig is now known as weinig|dinner

[22:36] *** dsoull joined
[22:43] *** putter joined
[22:44] <putter> some quick thoughts which were eaten by network outage

[22:44] <putter> As long is it comes the caveat that using such a MOP may cause non-graceful lexically-local performance degradation, it doesnt seem like there would be any more cost to this game, then the current "everything is defined in the prelude, and is overridable in p6".

[22:45] <putter> (re Perl6::method_dispatch)

[22:45] <putter>  atomically { use Ruby::Syntax; use Ruby::Semantics; } p "worked" if 0 }()

[22:45] <putter> but, no.  that's not what atomically does.

[22:45] <putter> do we have a construct that evaluates a bunch of potentially mutually interfering expressions separately, in the parent context, and then applies the resulting world change-set all at once?

[22:45] <putter> eof

[23:02] *** Limbic_Region joined
[23:28] *** b_jonas joined
