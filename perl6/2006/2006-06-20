[00:16] *** ajs_home joined
[00:24] *** lisppaste3 joined
[00:25] <christopher> fglock/wolverian: Why is the CPAN version of Pugs::Compiler::Rule fresher than that in the pugs tree?  To whom should I send tests or patches, if not to the pugs tree?

[00:27] *** hcarty joined
[00:43] <trym> does anyone know how to pass a maxmessage paramter to RPC::PlClient or ::PlServer when using DBI::ProxyServer (or dbd::Proxy)

[00:45] *** rlb3 joined
[00:48] *** hikozaemon joined
[00:49] <trym> ah wrong chan

[00:49] <trym> sorry

[00:51] <pasteling> "TimToady" at 64.0.7.8 pasted "really minimal basic.t version" (1 line, 190B) at http://sial.org/pbot/17863

[00:52] <TimToady> audreyt: the previous is the result of running a minimizer that scans for the same assertion failure.

[01:01] *** hcarty left
[01:11] *** weinig|dinner is now known as weinig

[01:13] *** buetow joined
[01:16] *** christopher joined
[01:26] *** mako132_ joined
[01:31] *** Gnurdux joined
[01:31] *** Gnurdux left
[01:38] *** shachaf joined
[01:41] *** weinig is now known as weinig|sleep

[01:53] <dduncan> this is off-topic, but can anyone recommend DVD-R brands to use or stay away from? ... looking online shows a wide range of opinions for any particular brand

[02:00] *** mjk joined
[02:33] <dduncan> or never mind

[02:57] *** shachaf joined
[03:33] *** pdcawley joined
[03:33] *** _SamB_ joined
[03:41] *** justatheory joined
[03:46] *** pdcawley joined
[04:38] *** dduncan left
[04:38] <svnbot6> r10753 | audreyt++ | * perl2.t: TODO a couple of regex .perl tests.

[04:43] *** pdcawley joined
[04:50] *** pdcawley joined
[04:52] *** vel joined
[04:57] *** pdcawley joined
[04:58] <gaal> so, emit_yaml :)

[05:03] *** pdcawley joined
[05:13] *** pdcawley joined
[05:23] <ingy> hi gaal

[05:24] <ingy> audreyt has been safely delivered to her Seattle hotel

[05:24] <ingy> (in Bellevue :p)

[05:26] *** cmarcelo left
[05:26] <svnbot6> r10754 | audreyt++ | * reduce-metaop.t - unTODO one surprisingly succeeding

[05:26] <svnbot6> r10754 | audreyt++ |   test involving [=].  That's all for tonight...

[05:29] <TimToady> yay.

[05:29] <audreyt> gaal, TimToady: sorry, sleep has priority :)

[05:29] <TimToady> np

[05:29] <TimToady> take care of yourself.

[05:29] <audreyt> (and then wakeup, and then write some 100 more slide, and then deliver this 90min talk at MS)

[05:29] * audreyt is driving the FPS up

[05:29] <audreyt> (frames per second, in this context)

[05:30] <TimToady> good luck

[05:30] <audreyt> thanks, I'll need it :)

[05:30] <audreyt> *wave* *thud* &

[06:00] <gaal> heheh, at some point her slides will achieve persistence of vision

[06:06] <TimToady> if she's gonna be an animator, she'll need to hire some 'tweeners...

[06:09] *** amnesiac joined
[06:16] *** iblechbot joined
[06:18] *** vel joined
[06:18] <wolverian> how does one control the AST creation in grammars/rules? <foo> { return $<foo> as Foo }, to get the type I want?

[06:21] <wolverian> makes me want to add return types to rules

[06:23] <wolverian> I'm trying to port http://j.mongers.org/pub/haskell/darcs/conjure/BEncode/BEncode.hs

[06:24] <wolverian> in short, I want to construct the data structure directly with the grammar, or hand the match object to a constructor, whichever is saner

[06:25] <wolverian> or some other way, I'm kind of still learning this... :)

[06:28] *** pdcawley joined
[06:33] *** lumi joined
[06:35] <svnbot6> r10755 | audreyt++ | * INSTALL: Bump our parrot requirement to 0.4.5 for the shiny

[06:35] <svnbot6> r10755 | audreyt++ |   regex/token/rule :ratchet/:sigspace support.

[06:48] *** Aankhen`` joined
[07:27] *** marmic joined
[08:05] *** pdcawley joined
[08:09] *** xerox joined
[08:10] *** xerox joined
[08:37] *** iblechbot joined
[08:40] *** nothingmuch joined
[09:04] *** lisppaste3 joined
[09:10] *** buetow joined
[09:18] *** SM_ax joined
[09:20] *** bjoern_ joined
[09:51] *** SM_ax joined
[10:03] * audreyt wakes up and resumes slidemaking

[10:18] * gaal is slidemaking for yapc

[10:19] <gaal> that's days ahead

[10:19] <gaal> which only makes it harder

[10:24] *** arguile joined
[10:37] *** chris2 joined
[11:05] *** ludan joined
[11:23] *** jsiracusa joined
[11:31] <Aankhen``> Yay, managed to build Pugs.

[11:31] <Aankhen``> (After manually updating Module::Install in perl5/Data-Bind and perl5/Module-Compile.)

[11:32] *** iood joined
[11:32] *** christopher joined
[11:40] <Aankhen``> *** Error: no ICU lib loaded

[11:40] <Aankhen``> What does that mean in the context of a rule that PGE didn't understand?

[11:43] <cognominal_> sounds like the ICU library, the IBM library to handle Unicode.  is not loaded

[11:43] * nothingmuch ships a module with compiled .pmcs

[11:43] <nothingmuch> and no filter in deps

[11:43] <nothingmuch> *pray*

[11:43] <Aankhen``> Ah.

[11:43] <Aankhen``> Hiya nothingmuch. :-D

[11:43] <nothingmuch> hola

[11:44] <Aankhen``> I'd ask what's up, but that seems to have been answered already.

[11:44] <Aankhen``> In lieu of that, let me ask if your refrigerator is running.

[11:44] <nothingmuch> in that case, i'll ask what's up

[11:44] <nothingmuch> yes, it is =)

[11:44] <nothingmuch> thanks for asking

[11:44] <Aankhen``> Then you better catch it!

[11:44] * Aankhen`` ducks and runs.

[11:44] <nothingmuch> it's a freerange refrigerator

[11:45] <nothingmuch> we let it eat and poop in the yard

[11:45] <Aankhen``> Sorry, that's a really lame joke. :-P

[11:45] <Aankhen``> Heh.

[11:45] <nothingmuch> and it gives us organic coldness

[11:45] <nothingmuch> M::C note:

[11:45] <Aankhen``> I remember when I was in Class II or III... my friends and I thought it was hilarious to call up people and pull this gag on them.

[11:45] *** ko1_away is now known as ko1

[11:45] <nothingmuch> if you use Module::Build etc you must touch the .pmc

[11:45] <nothingmuch> so that perl will be nice to it

[11:46] <nothingmuch> if they are the same mtime it will go to the .pm

[11:46] <Aankhen``> I never did get to pull it myself though. :-\

[11:46] <nothingmuch> my best remembered phone prank is in the 8th grade

[11:46] <Aankhen``> Do tell!

[11:46] <nothingmuch> we called our loathed literature teacher on a holiday

[11:47] <nothingmuch> and told her that she had one a "Wella Cosmetics Holiday Package" for elderly women

[11:47] *** weinig|sleep is now known as weinig|work

[11:47] <nothingmuch> we told her that we were in the marketting dept, and that she needs to contact customer relations with a voucher code to get the package shipped

[11:47] <nothingmuch> s/one/won/;

[11:47] <nothingmuch> and the number we gave her was to some sex line

[11:48] <Aankhen``> LMAO.

[11:48] <ko1> i have a question about parrot

[11:48] * nothingmuch was grand orchestrator

[11:48] <nothingmuch> friend #1 was actor

[11:48] <Aankhen``> Heh.

[11:48] <nothingmuch> and friend #2 provided an el-cheapo magazine with some sex ads at the ened

[11:49] <meppl> guten morgen

[11:49] <nothingmuch> ko1: if it's a very technical question then maybe #parrot on irc.perl.org can help

[11:49] <QtPlatypus> ko1: What is the question?

[11:49] <nothingmuch> but in general we should also know

[11:49] <ko1> parrot's register number is infinite?

[11:49] <nothingmuch> hola meppl

[11:49] <ko1> nothingmuch: ah, thanks

[11:49] <meppl> good morning nothingmuch

[11:51] <ko1> at ver. 0.2 or so, i can only 32 registers on parrot. but now, i can use 500 registers (i0 ... i500) in pasm script

[11:54] <nothingmuch> ko1: at some point parrot got a variable register allocator, i think

[11:54] <nothingmuch> you had to predeclare the number

[11:54] <nothingmuch> and it would compute a static call frame based on that

[11:55] <nothingmuch> PIR otoh has a register spilling thingy that is less "hard coded"

[11:55] <nothingmuch> that's background info

[11:55] <nothingmuch> as fcor your question:

[11:55] <nothingmuch> it's not really infinite

[11:56] <nothingmuch> but it pretends to be

[11:56] <ko1> nothingmuch: i see

[11:56] <nothingmuch> that said, using a very big number is probably not as efficient

[11:56] <nothingmuch> because parrot tries to map registers to hardware registeres

[11:56] <nothingmuch> urf

[11:56] <nothingmuch> so try to keep your lexical scopes slim at the pasm level

[11:57] <nothingmuch> if you want better support for infinite stuff, use PIR

[11:58] <nothingmuch> does that answer your question/

[11:58] <nothingmuch> ?

[11:58] <ko1> http://www.atdot.net/sp/view/zkq51j/ (pir) works :)

[11:59] <ko1> nothingmuch: yes! thanks

[12:00] <nothingmuch> search audrey's blog for it

[12:00] <nothingmuch> she mentioned working out with leo on lexical scopes

[12:00] <nothingmuch> and how the calling semantics and register decls/limits were changed to better support Perl 6

[12:01] <ko1> i only want to know that "register number is logically infinite or not"

[12:02] <ko1> i'm writing parrot introduction article in Japanese :)

[12:03] <nothingmuch> well

[12:03] <nothingmuch> that article should be shared with #parrot

[12:03] <nothingmuch> so you still have to go there ;-)

[12:03] <nothingmuch> good luck, and ko1++

[12:04] <ko1> nothingmuch: ok.  thanks

[12:04] * QtPlatypus watches ko1 mutate into ko2

[12:05] *** bjoern_ is now known as DEpwnsEC

[12:17] *** ko1 is now known as ko1_away

[12:23] *** frederico joined
[12:30] *** visq joined
[12:39] <gaal> visq: hi

[12:41] <gaal> what platform are you on? I'm not getting color in the .html files, and I'm wondering if it's some silly path problem.

[12:43] *** hugues23 joined
[12:45] *** jsiracusa joined
[12:52] <gaal> hmm, yes! it works on linux but fails on windows. checking.

[12:56] <Juerd> webmind: What do you need root access for on feather?

[13:01] *** buetow joined
[13:07] *** amnesiac joined
[13:07] *** _SamB_ is now known as SamB

[13:23] *** iblechbot joined
[13:27] *** amnesiac is now known as amnes1ac

[13:28] *** amnes1ac is now known as amnesiac

[13:40] *** renormalist joined
[13:41] *** fglock joined
[13:42] *** justatheory joined
[13:45] <fglock> my first blog ever - http://use.perl.org/~fglock/journal/

[13:47] <kolibrie> fglock: short and sweet

[13:50] <svnbot6> r10756 | fglock++ | Pugs::Grammar::Perl6 - added @{exp}, exp[], s///,

[13:50] <svnbot6> r10756 | fglock++ |   - added modules Pugs::Compiler::Perl6, Pugs::Emitter::Perl6::Perl5, Pugs::Runtime::Perl6

[13:50] <svnbot6> r10756 | fglock++ |   - added stub module: v6-pugs

[13:50] <svnbot6> r10756 | fglock++ | Pugs::Compiler::Precedence - fixed postcircumfix to allow an empty list

[13:50] <fglock> kolibrie: I'm not much into writing (human language)

[13:53] <svnbot6> r10757 | fglock++ | renamed Pugs-Grammar-Perl6 to Pugs-Compiler-Perl6

[13:55] <Juerd> fglock: That comes naturally when you've been doing it a while :)

[13:55] <fglock> I hope so :)

[13:56] <svnbot6> r10758 | fglock++ | Pugs-Compiler-Perl6 - fixed test.pl

[13:57] <Juerd> It's just like IRC, but without the immediate response.

[13:59] <fglock> but it is also a different public

[14:01] *** arguile joined
[14:02] <Juerd> Ignore that :)

[14:02] * Juerd tries to ignore the audience

[14:02] <Juerd> Otherwise I'm constantly distracted

[14:02] <Juerd> And start to question if I phrased things right

[14:10] *** rzoz joined
[14:20] *** rlb3 joined
[14:26] <audreyt> ?eval [+] 1..100

[14:26] <svnbot6> r10760 | fglock++ | Pugs-Compiler-Perl6 - updated t/02-expression.t

[14:26] <evalbot_10746> 5050

[14:26] <audreyt> ?eval { $_ ?? $_ * &?BLOCK($_-1) !! 1 }.(10)

[14:26] <evalbot_10746> 3628800

[14:30] <audreyt> @djinn (a -> b) -> (c -> b) -> Either a c -> b

[14:30] <lambdabot> f a b c =

[14:30] <lambdabot>   case c of

[14:30] <lambdabot>   Left d -> a d

[14:30] <lambdabot>   Right e -> b e

[14:30] <audreyt> @pl f x = x

[14:30] <lambdabot> f = id

[14:32] <audreyt> @pl @pl f h = do { x <- hGetContents h; return (lines x) }

[14:32] <lambdabot> (line 1, column 1):

[14:32] <lambdabot> unexpected "@"

[14:32] <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression

[14:32] <audreyt> @pl f h = do { x <- hGetContents h; return (lines x) }

[14:32] <lambdabot> (line 1, column 10):

[14:32] <lambdabot> unexpected "{"

[14:32] <lambdabot> expecting variable, "(", operator or end of input

[14:32] <audreyt> @pl @pl f h = hGetContents h >>= \x -> return (lines x)

[14:32] <lambdabot> (line 1, column 1):

[14:32] <lambdabot> unexpected "@"

[14:32] <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression

[14:32] <audreyt> @pl f h = hGetContents h >>= \x -> return (lines x)

[14:32] <lambdabot> f = (lines `fmap`) . hGetContents

[14:32] <audreyt> (sorry for the spam, doing screenshots for $talk)

[14:32] <audreyt> (done now)

[14:51] *** FurnaceBoy joined
[14:51] <fglock> audreyt: how about - would you present the haskell talk in YAPC::SA? We could arrange for it to be presented just before cmarcelo's talk on his SoC work

[14:53] <fglock> lunch &

[15:00] <gaal> hey audreyt, if you got a minute, how could (yaml ::String) <- liftIO $ toYamlNode something work?

[15:02] *** vel joined
[15:03] <xerox> Hey gaal, how're arrows? (:

[15:03] <gaal> hey xerox! dangerous as intended

[15:04] <xerox> Special relativity is more dangerous! (My mind is boggling.)

[15:04] <gaal> General relativity's a lot worse!

[15:05] <xerox> Just don't accelerate, for the sake of my mental stability, please.

[15:07] <gaal> xerox: maybe you can help with my typing problem?

[15:07] <gaal> take a look at Pugs.CodeGen.YAML

[15:07] <gaal> genParseYAML

[15:07] <lumi> Can I help too?

[15:07] <gaal> the question is how could the line with liftIO typecheck

[15:08] <gaal> I hope so :)

[15:08] <lumi> It does typecheck, and you don't know why?

[15:08] <xerox> Do you have a url? I can take a look but I really gotta study for tomorrow exam. And the day after, and the one after that one too.

[15:08] <gaal> http://svn.openfounrdy.org/pugs/src/Pugs/CodeGen/YAML.hs

[15:08] <xerox> What's toYamlNode type?

[15:08] * xerox goes to see

[15:09] <gaal> toYamlNode :: YAML a => a -> IO YamlNode

[15:09] <gaal> data YamlNode .... deriving (Show, Ord, Eq, Typeable, Data)

[15:09] <xerox> liftIO :: (MonadIO m) => IO a -> m a

[15:09] <gaal> so maybe it's a SYB thing I don' understand?

[15:10] <gaal> sure, but look at the next line

[15:10] <gaal> it's VStr yaml

[15:10] <xerox> It's return (VStr yaml)

[15:10] <gaal> VStr :: String -> Val

[15:10] <xerox> return (VStr yaml) :: (Monad m) => m Val

[15:10] <gaal> so how can that work?

[15:10] <xerox> return (VStr yaml) :: Eval Val -- In that context.

[15:11] <xerox> return is NOT a keyword, it is a function!

[15:11] <xerox> return :: (Monad m) => a -> m a

[15:11] <gaal> sure, forget the monad thogh

[15:11] <gaal> the expression (VStr yaml)

[15:11] <xerox> What is showYaml type?

[15:11] <gaal> implies that yaml :: String

[15:11] <xerox> ... -> String, I would say, since it is called show*

[15:11] <gaal> showYaml :: YAML a => a -> IO String

[15:11] <gaal> which is more sane

[15:12] <xerox> It is very straighforward, do you know what <- does in a do block?

[15:12] <gaal> so I fully understand the function genParseYAML, but not genParseHsYAML

[15:13] <xerox> Ah.

[15:13] <xerox> yaml is a YamlNode in the former function.

[15:13] <xerox> yaml is a String in the latter one.

[15:13] <xerox> Thanks to, respectively, toYamlNode, and showYaml.

[15:14] <gaal> indeed, and I don't see how it could be anything else in the first one.

[15:14] <xerox> So?

[15:14] <gaal> so how can it typecheck?

[15:14] *** Southen_ joined
[15:14] <xerox> show . toYamlNode = showYaml

[15:14] <xerox> More or less.

[15:15] <xerox> showYaml = fmap show . toYamlNode

[15:15] <lumi> Aren't they the same?

[15:15] <xerox> lumi, no, because VStr takes a string, and in the former function the `yaml' binding is passed to `show', you see?

[15:15] <gaal> aaaahhhhh  it's show . toYamlNode!

[15:16] <lumi> Yeah.. but show is pure

[15:16] * gaal looks for a nearby wall

[15:16] <gaal> yes yes yes

[15:16] <gaal> I didn't see the "show" :)

[15:16] <xerox> toYamlNode :: YAML a => a -> IO YamlNode

[15:16] <xerox> toYamlNode x = runReaderT (asYAML x) IntSet.empty

[15:16] <xerox> showYaml :: YAML a => a -> IO String

[15:16] <xerox> showYaml x = do

[15:16] <xerox>     node <- toYamlNode x

[15:16] <xerox>     emitYaml node

[15:16] <gaal> I'm stupid, no more questions

[15:17] <xerox> Hmmm.

[15:17] <xerox> Let me show you a thing, now.

[15:17] <gaal> please show me a thing.

[15:18] <xerox> http://video.google.com/videoplay?docid=342080286217914779

[15:23] <gaal> nice clip

[15:30] *** Southen_ is now known as Southen

[15:36] <gaal> why does make unoptimized ; make ghci need to recompile a lot of .hs?

[15:39] *** visq joined
[15:58] <visq> gaal: you were talking about highlighting in the htmlified tests ?

[15:58] <visq> Works for me Windows/IE, Linux/Firefox, MacosX/Firefox

[15:59] <gaal> visq: it's generating everything, just not coloring lines in the tests html files.

[15:59] <visq> Did you look at the page source ?

[15:59] <visq> Should have three inline CSS definitions

[16:00] <visq> And <span class=test_status>...  for highlighting

[16:00] <gaal> sure, but all the tests are classified as non_test.

[16:00] <visq> I see

[16:01] *** pdcawley joined
[16:01] <gaal> :g/  pos:/s,\\,/,g on the yaml file fixes this.

[16:01] <gaal> but I couldn't find the erroneous line in the code yet.

[16:01] <svnbot6> r10762 | gaal++ | * refactor Pugs.CodeGen.YAML a bit

[16:01] <svnbot6> r10762 | gaal++ | * introduce filterPrim, which is supposed to weed out things like handles

[16:01] <svnbot6> r10762 | gaal++ |   in AST dumps

[16:01] <svnbot6> r10762 | gaal++ | * unfortunately, it doesn't in Pugs::Internals::emit_yaml (though it does

[16:01] <svnbot6> r10762 | gaal++ |   work in -CParse::YAML).

[16:03] <gaal> afk&

[16:06] *** penk joined
[16:09] *** marmic joined
[16:12] *** lollan joined
[16:13] <visq> util/catalog_tests.pl:283 :   ($start, $end) = $test->{pos} =~ /line (\d+)(?:.*line (\d+))?/s;

[16:14] <visq> maybe

[16:14] *** gaal joined
[16:21] *** buetow joined
[16:31] *** bpederse left
[16:36] *** bernhard joined
[16:38] <visq> gaal: I found 2 places where '/' was used as a to split resp. join path(s) and rewrote them

[16:41] <svnbot6> r10763 | benedikth++ | util/catalog_tests.pl: Path delimiter issues

[16:42] *** bpederse joined
[16:42] *** lumi joined
[16:44] *** bpederse left
[16:51] *** xerox joined
[16:53] <gaal> visq: nope, they're still miscataloged

[16:53] <gaal> visq++ for working on this though

[16:54] *** shachaf joined
[16:59] <svnbot6> r10764 | fglock++ | Pugs-Compiler-Perl6 - added hello_world.pl (parses ok)

[16:59] *** Ymmv joined
[16:59] *** frederico joined
[17:05] *** neoesque joined
[17:11] *** myavuzselim joined
[17:18] *** ruoso joined
[17:19] *** nxu7 joined
[17:22] *** DEpwnsEC is now known as bjoern_

[17:35] *** lumi joined
[17:39] *** vel joined
[17:41] *** chris2 joined
[17:43] *** rlb3 joined
[18:01] <cognominal_> the class does not need to declare has $.foo as a property # ... in syn12, s/property/attribute/ ?

[18:14] <svnbot6> r10766 | fglock++ | Pugs-Compiler-Perl6 - "hello, world" works

[18:16] *** justatheory joined
[18:35] <svnbot6> r10768 | fglock++ | Pugs-Compiler-Perl6 - v6-pugs renamed to P6-pugs (perl 5 ignores 'v6')

[18:38] <svnbot6> r10769 | fglock++ | Pugs-Compiler-Perl6 - renamed again: P6-pugs.pm to P6.pm

[18:41] <TimToady> fglock: in r10756 you commented, "added @{exp}", but @{exp} is not legal syntax any more.  That's @(exp) these days.

[18:41] <fglock> TimToady: fixing - thanks

[18:45] *** hexmode joined
[18:46] <cognominal_> TimToady, am I confused about the s/property/attribute/ in syn12?

[18:56] *** frobnitz joined
[19:08] <TimToady> cognominal_: no, I checked in a fix for it about 20 minutes ago.

[19:08] <svnbot6> r10770 | fglock++ | Pugs-Compiler-Perl6 - 'use P6' creates a .pmc and exec() it

[19:09] <fglock> "proof-of-concept" - misc/pX/Common/Pugs-Compiler-Perl6$ perl -Ilib hello_world.pl

[19:09] <fglock> (ignore warnings)

[19:19] *** chris2 joined
[19:20] *** stennie joined
[19:21] *** stennie left
[19:21] *** pmurias joined
[19:21] <pmurias> hi

[19:21] <pmurias> is getting all revisions with svk acceptable?

[19:22] <fglock> pmurias: hi

[19:22] <svnbot6> r10772 | fglock++ | Pugs-Compiler-Perl6 - recompile .pmc only if needed

[19:23] <fglock> re svk: I think it is ok, but it takes a lot of time

[19:26] <pmurias> i'll eat dinner and propably just the last 1000 or so

[19:30] <fglock> P6.pm now has very low overhead for precompiled .pl files

[19:30] <svnbot6> r10773 | fglock++ | P6.pm - much faster cache access

[19:36] *** chris2_ joined
[19:42] *** larsen joined
[19:55] *** prefiks joined
[20:01] *** kane_ joined
[20:09] *** amnesiac joined
[20:12] <sahadev> is there "hyper" version of the unary operator !

[20:12] <sahadev> ?

[20:12] <sahadev> i wanna toggle (boolean-wise) all the elements in a list

[20:19] <xerox> map not ?

[20:20] <sahadev> map works, of course. but i wanted to see if i could use the hyperoperator.

[20:20] <sahadev> it seems to work: !<< @a  # returns the list of toggled values

[20:21] <xerox> @a >>! # too ?

[20:21] <lambdabot> Maybe you meant: all-dicts arr ask . v

[20:21] <sahadev> no

[20:21] <sahadev> pugs> @a >>!

[20:21] <sahadev> Internal error while running expression:

[20:21] <sahadev> ***

[20:21] <sahadev>     unexpected ">"

[20:21] <sahadev>     expecting comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[20:22] <xerox> Aw.

[20:22] <xerox> >>! @a # ? :)

[20:22] <sahadev> "expecting program"

[20:22] <gaal> well, it's a prefix operator, so why should >>! work?

[20:22] <xerox> Dunno.

[20:23] <gaal> ?eval perl !<< <1 0 0 1>

[20:23] <gaal> works.

[20:23] <evalbot_10746> "(Bool::False, Bool::True, Bool::True, Bool::False)"

[20:23] *** larsen_ joined
[20:24] *** iood joined
[20:26] *** Bleadof joined
[20:27] <gaal> on the other hand:

[20:27] <gaal> ?eval sub postfix:<!> ($n) { [*] 1 .. $n } say <1 2 0 3> >>!

[20:27] <evalbot_10746> OUTPUT[126 ] Bool::True

[20:27] <gaal> (please exuse the lousy factorial)

[20:28] <gaal> s/x/xc/

[20:28] <sahadev> nice!

[20:29] <sahadev> so, if you define any new list operators, the hyper operator version comes free?

[20:29] <sahadev> s/list //

[20:30] <gaal> sure, because they aren't hardcoded, they're a metaoperator.

[20:31] <sahadev> how come this gives me an error?

[20:31] <sahadev> sub postfix:<!> ($n) { $n ?? [*] 1 .. $n :: 1 }

[20:31] <gaal> "!!" instead of "::"

[20:31] <sahadev> ternary ?: is spelled ?? !! now?

[20:31] <gaal> When laziness is fixed, try this out:

[20:31] <gaal> my @facs := [\*] 1..*; sub fac ($n) { @facs[$n] }; say fac(4)'

[20:32] <gaal> yes, for a while now

[20:32] <gaal> s/'$//

[20:32] <gaal> the above is a port of one of the nice Evolution of a Haskell Programmer functions

[20:32] <sahadev> cool!

[20:33] <gaal> [\*] is a product scan, but here too you can put any user defined op

[20:39] <ingy> seen audreyt

[20:39] <jabbot> ingy: audreyt was seen 6 hours 6 minutes 34 seconds ago

[20:39] <gaal> hmm:

[20:39] <gaal> seen jabbot

[20:39] <jabbot> gaal: jabbot was seen 373 days 3 hours 52 minutes 34 seconds ago

[20:39] <gaal> heh.

[20:40] <gaal> this guy must thrive near the Ravenous Bugblatter Beast of Traal

[20:41] <gaal> more packing &

[20:50] <sahadev> S29 says: multi Int|List Array::keys ( @array : MatchTest *@indextests )

[20:50] <sahadev> how can i use the *@indextests parameter here?

[20:52] <sahadev> ?eval my @a = 1..5; @a.keys { $_ % 2 }

[20:52] <evalbot_10746> Error:  unexpected "{" expecting comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[21:28] <TimToady> sahadev: that's not implemented.  (And even if it was implemented, that syntax doesn't work.  You'd need @a.keys({ $_ % 2}) or @a.keys:{ $_ % 2 } or some such.)

[21:29] <TimToady> .foo by itself is assumed to be argumentless.

[21:33] <sahadev> TimToady: thanks for the clarification. when it is implemented though, what would this return?

[21:33] <sahadev>   my @a = (1..3); for @a.kv: { $_ % 2 } -> $k, $v { say "$k: $v" }

[21:34] <sahadev> "1: 2" ?

[21:34] <sahadev> or, "0: 2" ?

[21:35] <PerlJam> What's $_ bound to there?

[21:36] <sahadev> oops. s/$_/$k/

[21:36] <sahadev> hmm. i dunno actually :)

[21:36] <sahadev> in the first example: @a.keys { $_ % 2 } it's obvious

[21:40] <PerlJam> sahadev: well, there's an "obvious" interpretation with .kv too, $_ would be bound to the keys  ;-)

[21:41] <sahadev> and, if I want to test the "value" in my block, what would I use?

[21:41] <sahadev> the test block, i mean

[21:46] *** FurnaceBoy joined
[21:50] <TimToady> I tend to think that the list passed as the selector would be multidimensional, and if there was an extra dimension on the end, it would be applied to the values.

[21:53] <pmurias> good night

[21:56] <cognominal_> does the Match object contains the name of the matched rule? I can't see anything like that in PGE::Match

[22:00] *** fglock_ joined
[22:02] *** jsiracusa joined
[22:04] <ingy> cognominal_: ping

[22:05] <ingy> or TimToady

[22:05] <ingy> or anyone here :P

[22:06] <fglock_> ingy: pong

[22:06] <cognominal_> pong

[22:06] <ingy> fglock_: lemme test msg you

[22:06] <ingy> fglock_: did you get my msg?

[22:07] <fglock_> not yet

[22:07] <ingy> sigh

[22:08] <nothingmuch> ingy: how do i see MC output of a .t file?

[22:08] <rgs> ingy: you should be a registered user to msg people on freenode

[22:08] <nothingmuch> btw, i released a module with some .pmcs in it

[22:08] <nothingmuch> and no deps for the filter or MC

[22:08] <nothingmuch> wish me luck ;-)

[22:08] <nothingmuch> http://search.cpan.org/dist/Cache-Cascade/

[22:08] <ingy> rgs: I know :(

[22:08] <rgs> and /whois tells me you aren't

[22:09] <ingy> I know :(

[22:09] <fglock_> nothingmuch: it should work without problems - Pugs::Compiler::Rule in CPAN depends on .pmc too

[22:09] <fglock_> nothingmuch: did you see Pugs::Compiler::Perl6?

[22:09] <ingy> rgs: nickserv says I'm already registered

[22:09] <nothingmuch> fglock_: yes, but there's lots more to screw up ;-)

[22:09] <rgs> nothingmuch: interesting module, I suppose that might be usable in large deployments of catalyst things

[22:10] <nothingmuch> (than a normal dist)

[22:10] <nothingmuch> rgs: that's precisely the niche market

[22:10] * nothingmuch is rewriting Catalyst::Plugin::Cache

[22:10] <rgs> nothingmuch: but why pmcs on that ?

[22:10] <nothingmuch> rgs: use tt

[22:10] <rgs> OMG it's intt

[22:10] <nothingmuch> hehe

[22:10] <rgs> [% FOREACH method IN methods %]

[22:11] <rgs> you are a sick, sick man !! :))

[22:11] <nothingmuch> wow, you called me a man

[22:11] <nothingmuch> most people stick to "boy" ;-)

[22:12] <nothingmuch> i think i will add 'use tt for => qw/[ ]/' which will automatically do the [% FOREACH %] thing for you

[22:12] <rgs> is there some tt frontend to M::I ?

[22:12] <nothingmuch> all my usage so far has been loopy

[22:12] <nothingmuch> i don't understand the question

[22:12] <fglock_> nothingmuch: I'm interested in making .pmc at use-time - not sure how to do that yet

[22:12] <nothingmuch> fglock_: explain?

[22:12] <rgs> Module::Compile, I mean

[22:13] <nothingmuch> http://search.cpan.org/perldoc?tt

[22:13] <fglock_> you deploy a perl6 module that 'use P6', and it compiles to p5 and then run - no pre-compilation, if possible

[22:13] *** weinig|work is now known as weinig

[22:13] <fglock_> but it gets cached

[22:13] <nothingmuch> fglock_: doesn't it work like that anyway?

[22:13] <rgs> nothingmuch: ok

[22:13] <ingy> nothingmuch: what was it you wanted?

[22:14] <nothingmuch> ingy: i have a 'use tt' in a .t file

[22:14] <ingy> ok

[22:14] <nothingmuch> and I have a syntax error

[22:14] <nothingmuch> i want to view the filtered code

[22:14] <ingy> ok

[22:14] <ingy> ok

[22:14] <ingy> lemme check

[22:14] <nothingmuch> <3

[22:14] <fglock_> nothingmuch: not yet, it calls the p6 version first, and compiles it - but it doesn't transfer control to the compiled version yet

[22:15] <nothingmuch> ohhhh

[22:15] <nothingmuch> i dont think that's possible for the lines up to the 'use p6'

[22:16] <nothingmuch> but it should be identical, shouldn't it?

[22:16] <nothingmuch> or does the p6 compiler twiddle the .pmc file post factum?

[22:16] <ingy> nothingmuch: subclass pmc_template

[22:16] <ingy> XXX @_;

[22:16] <ingy> or somesuch dump

[22:16] <nothingmuch> !<3

[22:16] <rgs> nothingmuch: that said, to generate methods, p5 does it quite well already. But to generate tailored code that would be more useful

[22:16] <rgs> like, lib/lib_pm.PL in the core perl distor

[22:16] <rgs> distro

[22:17] <ingy> dist0rz!!

[22:17] <nothingmuch> rgs: http://perlmonks.org/?node_id=556341

[22:17] <fglock_> maybe require'ing the .pmc from P6.pm works - I'll try

[22:17] <fglock_> bbiab &

[22:17] <nothingmuch> i find TT more easy to read structurally than BEGIN { eval/closure + glob assign }

[22:18] *** jiing joined
[22:18] <rgs> because you're used to it

[22:18] <nothingmuch> yeah

[22:18] <nothingmuch> well

[22:18] <nothingmuch> i'm not more used to it

[22:18] <nothingmuch> i've been doing pretty sick BEGIN { eval + glob assign } for a while now

[22:18] <nothingmuch> and i was like "hmm... this should stop

[22:18] <rgs> actually to generate test suites that could be extremely neat

[22:18] <ingy> :)

[22:19] <nothingmuch> because if i want code that i can easily explain to my army of minions but that doesn't DRY i suspect this will be easier

[22:19] * rgs wonders whether there is an rss feed for nothingmuch's cpan uploads

[22:19] <ingy> rgs: there is

[22:19] <rgs> woot !!

[22:19] <ingy> ask miyagawa

[22:20] <nothingmuch> <dc:creator>Michael R. Davis</dc:creator>

[22:20] <ingy> there is for any author or combo of authors

[22:20] <nothingmuch> you can plagger + filter

[22:20] <nothingmuch> miyagawa > hand_rolled

[22:21] <nothingmuch> you can view an rss feeds on the bugs for my modules ;-)

[22:21] <ingy> I saw the demo of this at yapc::asia

[22:21] <nothingmuch> uh, i think

[22:21] <wolverian> plagger is GREAT.

[22:22] <ingy> it wasn't plagger iirc

[22:22] <ingy> just a feed

[22:22] <wolverian> a cpan.org feed?

[22:23] <ingy> looking for it....

[22:23] <wolverian> there's the overall feed, at least

[22:24] <wolverian> I don't see per-user feeds

[22:24] <wolverian> i.e. plagger to the rescue :)

[22:24] *** hcchien joined
[22:25] <ingy> wolverian: yeah not that one

[22:25] <ingy> grrr

[22:25] <ingy> hi hcchien!

[22:26] <ingy> nothingmuch: did that work?

[22:27] <nothingmuch> ingy: no, because i didn't try it

[22:27] <nothingmuch> a temp mv t/foo.t t/foo.pm is simpler

[22:27] <nothingmuch> =)

[22:28] <ingy> I'll make a note about making it easy to find errors

[22:29] <ingy> nothingmuch: where is your test code?

[22:29] <ingy> I want to see what it looks like :)

[22:32] <nothingmuch> not yet commitited to public facing repo

[22:32] <nothingmuch> i'll /msg you when it is

[22:32] <nothingmuch> ughghgghghghghghgg

[22:32] * nothingmuch doesn't understand how comments can make a syntax error

[22:33] <nothingmuch> oi vey

[22:33] <nothingmuch> perl -c foo.pmc *does* pass

[22:33] <nothingmuch> nopaste time

[22:33] <ingy> :)

[22:33] <pasteling> "nothingmuch" at 84.108.53.74 pasted "output from perl -c" (6 lines, 338B) at http://sial.org/pbot/17883

[22:34] * ingy looks

[22:34] <pasteling> "nothingmuch" at 84.108.53.74 pasted "troublesome block" (12 lines, 184B) at http://sial.org/pbot/17884

[22:34] <nothingmuch> without the #moose it passes

[22:35] <ingy> can I check this out from somewhere?

[22:35] <nothingmuch> darcs get http://nothingmuch.woobling.org/Class-Workflow for the code

[22:35] <nothingmuch> but uh

[22:35] <nothingmuch> i'm still debugging this test

[22:35] <nothingmuch> it's not supposed to work yet

[22:35] <nothingmuch> Class-Workflow->state != $ready

[22:36] <nothingmuch> i can commit a partial patch

[22:36] <nothingmuch> and then unpull

[22:36] <nothingmuch> but that == conflicts when i commit the real one

[22:36] <nothingmuch> and you'l have to unpull it too

[22:37] <ingy> can't you just delete the #moose line

[22:37] <ingy> and check it in?

[22:37] <ingy> and I'll add it back

[22:37] <nothingmuch> ingy: no

[22:37] <nothingmuch> because there's supposed to be actual code there

[22:37] <pasteling> "nothingmuch" at 84.108.53.74 pasted "also fails, what i really want" (15 lines, 334B) at http://sial.org/pbot/17885

[22:39] <ingy> can you just nopaste the whole test, and let me checkout the rest?

[22:39] <nothingmuch> i did

[22:39] <nothingmuch> huh

[22:39] <nothingmuch> must have done it to another channel

[22:39] <pasteling> "nothingmuch" at 84.108.53.74 pasted "whole .t" (268 lines, 4.4K) at http://sial.org/pbot/17886

[22:40] <ingy> ok

[22:40] <ingy> what's the file called?

[22:41] <nothingmuch> t/example_pop.t

[22:41] <nothingmuch> t/example_pop3.t

[22:42] <nothingmuch> darpull

[22:42] <nothingmuch> darcs pull

[22:42] <nothingmuch> i just checked in all my working stuff

[22:42] <nothingmuch> i can also put a tarball of my working dir

[22:42] <nothingmuch> but my webserver doesn't implement garbage collection, so i don't like doing that often

[22:43] <ingy> so...

[22:43] <ingy> how do I run these tests

[22:44] <ingy> ok.pm?

[22:44] <nothingmuch> osrry, back

[22:44] <nothingmuch> err, like normal tests

[22:44] <ingy> prove -l t

[22:45] <nothingmuch> yep

[22:45] <nothingmuch> thanks, i always used prove -Ilib

[22:45] <nothingmuch> i guess that'll change now =)

[22:45] * ingy can't believe he's installing Moose ;)

[22:45] <nothingmuch> oh wait

[22:45] <nothingmuch> you need trunk moose

[22:45] <nothingmuch> this code ironed out some bugs in the role composition stuff

[22:46] <ingy> url?

[22:46] <nothingmuch> in /msg

[22:46] <nothingmuch> it's not a 100% public repo yet

[22:46] <nothingmuch> the sysadmin is slacking off ;-)

[22:48] <ingy> um Module::Install!

[22:48] <nothingmuch> where?

[22:48] * ingy doesn't even have Module::Build installed

[22:48] <ingy> it's not in Moose

[22:48] <nothingmuch> blame stevan

[22:48] <nothingmuch> personally i dislike the inc stuff

[22:49] <nothingmuch> that's why i don't use it for my code

[22:49] <nothingmuch> and it's got a bad rep because people use auto install needlessly

[22:49] <ingy> get off my motorcycle

[22:50] <ingy> do I need a custom Class::MOP?

[22:50] <nothingmuch> dunnno

[22:50] <nothingmuch> i have them both setup in my devlib alias

[22:50] <ingy> cpan is 0.26

[22:50] <ingy> it wants 0.29_01

[22:51] <ingy> your custom Moose does...

[22:51] <nothingmuch> i think 029_02 is on the CPAN

[22:51] <ingy> Isee

[22:51] <nothingmuch> install with distpath

[22:51] <nothingmuch> but if you like

[22:51] <nothingmuch> Moose/trunk/../../Class-MOP/trunk

[22:54] <fglock> is someone against removing perl5/Pugs-Compiler-Rule? it is no longer the devel version

[22:55] <ingy> you need a Moose dep on Test-LongString

[22:57] <nothingmuch> svk up -s

[22:57] <svnbot6> r10775 | fglock++ | Pugs-Compiler-Perl6 - directory cleanup

[22:59] *** fglock left
[22:59] <svnbot6> r10776 | fglock++ | perl5/Pugs-Compiler-Rule is gone - use misc/pX/Common version instead

[23:02] <ingy> nothingmuch: still in dep hell

[23:02] <ingy> nothingmuch: somebody needs Set::Object

[23:03] <nothingmuch> yes, Class::Workflow's deps aren't yet in a build tool file

[23:03] <ingy> but I guess you don't have a Makefile.PL yet

[23:03] <ingy> use Module::Install

[23:03] <nothingmuch> can i use it without bundling in "inc" ?

[23:03] <ingy> pansy

[23:04] <ingy> NOOOOOOOOOOOOOOO

[23:04] <nothingmuch> it's simple actually

[23:04] <nothingmuch> oh, not it isn't

[23:04] <nothingmuch> you can't inject the deps later

[23:04] <nothingmuch> can you force CPAN.pm to rerun makefile.pl?

[23:05] <ingy> is tt.pm on cpan?

[23:05] <ingy> is 0.01 ok?

[23:05] <nothingmuch> yes

[23:06] <nothingmuch> btw, the .pmc doesn't delete itself if the .pm doesn't use MC anymore

[23:06] *** justatheory joined
[23:07] <ingy> hi David

[23:14] <svnbot6> r10777 | fglock++ | Pugs-Compiler-Perl6 - fixed hello_world.pl comment

[23:19] <ingy> nothingmuch: how does the test fail for you?

[23:19] <nothingmuch> perl -c fails

[23:19] <nothingmuch> the test doesn't do anything yet

[23:20] <ingy> ok, wtf was whole .t then?

[23:20] <nothingmuch> setting up a test case

[23:20] <nothingmuch> that is also a complete example

[23:22] <nothingmuch> ingy - darcs pull - this is a working version with no source filtering

[23:23] <ingy> nothingmuch: http://rafb.net/paste/results/7Qosd630.html

[23:23] <buubot> The paste 7Qosd630 has been moved to http://erxz.com/pb/1637

[23:23] <ingy> seems to work fine here

[23:24] <ingy> except for the warnings

[23:24] <ingy> am I missing something?

[23:25] <nothingmuch> i dunno

[23:25] <nothingmuch> maybe you have a more recent MC?

[23:25] <ingy> no

[23:25] <nothingmuch> oh wait sorry

[23:25] <ingy> hold on

[23:25] <nothingmuch> perl -c t/example_pop3.t

[23:25] <nothingmuch> Workflow.pm is OK

[23:25] <ingy> ok

[23:26] <ingy> why are you compiling a script?

[23:27] <ingy> you can only compile a module

[23:27] <ingy> example_pop3 looks like a script

[23:28] <ingy> nothingmuch: are you peeing or combing your hair or something

[23:28] <ingy> (peeing *is* a euphamism)

[23:28] <nothingmuch> urf

[23:28] <nothingmuch> you weren't listening all along

[23:29] <ingy> oh

[23:29] <nothingmuch> i moved it from .t to .pm to get the compiled output

[23:29] <nothingmuch> i can't cache

[23:29] <nothingmuch> but i can filter

[23:29] <nothingmuch> it was only temporary anyway

[23:29] <nothingmuch> but...

[23:29] <ingy> well I moved it too :p

[23:29] <nothingmuch> when I do that it generates a weird syntax error when perl -c t/example_pop3.pm

[23:29] <nothingmuch> but not when perl -c t/example_pop3.pmc

[23:29] <ingy> still, it seems like you were going down a weird path

[23:30] <ingy> but I'll keep debugging

[23:30] <ingy> don't get uppity

[23:30] <nothingmuch> uppity?

[23:31] <ingy> don't get your panties in a bunch

[23:31] <ingy> or your knickers in a twist, etc

[23:31] <nothingmuch> well, i'm no longer your bitch so i don't have to be nice

[23:32] <ingy> you're still *a* bitch

[23:32] <ingy> you're ingy privledge is merely on suspension

[23:32] <ingy> so be nice please

[23:33] <nothingmuch> bitches are, as a general rule not nice at all

[23:33] <nothingmuch> except to their owner ;-)

[23:33] <ingy> noted

[23:34] <ingy> ok, this at least points out a bug in M::C

[23:34] <ingy> I need to do 3 hours of stuffs

[23:34] <nothingmuch> have fun

[23:34] <nothingmuch> the bug is not urgent

[23:34] <ingy> I will fix this promptly following

[23:34] <nothingmuch> if it's important to you take care of it

[23:34] <ingy> it is now bitch!

[23:34] <nothingmuch> yessir

[23:35] <ingy> :)

[23:35] <nothingmuch> anyway

[23:35] <ingy> have fun too

[23:35] <nothingmuch> i'm going to work out so that i'm nice and lean for you

[23:35] <nothingmuch> wow i love darcs dependency graphs

[23:35] <nothingmuch> so purrrrdy

[23:35] <ingy> I'm on a diet too, so you'll need to work reeeeally hard

[23:35] <ingy> what are you doing after yapc, btw?

[23:36] <nothingmuch> hackathon, obrathon, hike-a-thon, workathon

[23:36] <ingy> is everyone going to Boston?

[23:36] <nothingmuch> i know of audreyt, stevan & $?SELF

[23:36] * ingy wasn't invited. *sobs*

[23:37] <nothingmuch> yeah, it's just for cool folks

[23:37] <nothingmuch> you're too old to be cool

[23:37] <ingy> ouch

[23:37] <TimToady> OUCH!

[23:37] <ingy> hit em where it hurts

[23:37] <nothingmuch> oh, and gaal is also coming

[23:38] <TimToady> I have too many obligations to take on any new obragations...

[23:39] <nothingmuch> =(

[23:39] <nothingmuch> btw, i wasn't really invited either

[23:39] <nothingmuch> i invited myself and it turned out to be OK afterwords

[23:39] <nothingmuch> audreyt implied that it would be OK before I did

[23:39] <nothingmuch> but did not explicitly say so

[23:43] *** FurnaceBoy is now known as unnoun

[23:45] <obra> TimToady: aw ;)

[23:45] <obra> everyone is welcome

[23:46] <nothingmuch> but some ones are more welcome than others ;-)

[23:46] <nothingmuch> (probably depending on the cardinality of the set of ones, and the available physical space)

[23:47] <obra> Only my girlfriend is more welcome than everyone else

[23:47] <obra> we've run out of flat surfaces for sleeping, though

[23:47] <nothingmuch> well, we can have your bed then

[23:47] <obra> ...

[23:47] * nothingmuch just became less welcome ;-)

[23:48] <nothingmuch> anyway, i'm off, i've got bouncing to do

[23:48] <nothingmuch> btw, the more welcome thing was a paraphrase of animal farm, not a cynical comment

[23:49] <audreyt> the talk went extremely well :D

[23:49] <obra> yeah :)

[23:49] <audreyt> (and we did some VB design work afterwards, and also going hack on PIL<->MSIL in the next couple days with emeijer)

[23:49] <audreyt> because they want VB to be compiled to JavaScript through Pugs, heh

[23:49] <obra>   !

[23:51] *** unnoun is now known as FurnaceBoy

[23:52] <cognominal_>  split /<sep>/, $string  # is this a split that returns the separators as well?

[23:52] <audreyt> I think split doesn't respect named separators

[23:53] <audreyt> s/separator/capture/

[23:53] <audreyt> split /(<sep>)/ should do it

[23:53] <cognominal_> I though that

[23:53] <cognominal_> split /<?sep>/, $string # would give the old sematntic

[23:55] <audreyt> it would

[23:55] <audreyt> but not sure about splitting with named captures

[23:55] <cognominal_> I did not realize that the regexp may not be just a rule

[23:56] <cognominal_> split /(<sep>)/  makes more sense because  to be homoegeneous with  split /(,)/

[23:57] <cognominal_> s/because/so as/

[23:57] <audreyt> nod

