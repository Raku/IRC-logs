[00:11] *** buu is now known as buubot

[00:12] *** buubot is now known as buu

[00:13] *** buubot joined
[00:14] *** ruoso joined
[00:48] *** Hue-Bond left
[00:56] *** hikozaemon joined
[01:01] *** FB|zzz is now known as FB|very-very-ric

[01:01] *** FB|very-very-ric is now known as FurnaceBoy

[01:43] <meppl> gute nacht

[01:47] <FurnaceBoy> n8

[02:11] *** aufrank joined
[02:24] *** SamB joined
[02:50] *** buubot joined
[02:53] *** buubot joined
[02:56] *** particle_ joined
[02:56] *** mjk joined
[02:57] *** avar joined
[02:58] *** buubot joined
[03:13] *** weinig is now known as weinig|sleep

[03:35] *** scw joined
[03:54] *** azuroth joined
[04:51] *** FurnaceBoy is now known as TheChannel

[04:52] *** TheChannel is now known as FurnaceBoy

[05:10] *** pdcawley joined
[05:15] *** justatheory joined
[05:43] *** pdcawley joined
[06:34] *** scw joined
[06:47] *** Quell joined
[06:50] *** rashakil joined
[07:00] *** iblechbot joined
[07:05] *** SM_ax joined
[07:14] *** drrho joined
[07:28] *** Aankhen`` joined
[07:58] *** bjoern_ joined
[08:03] *** marmic joined
[08:25] *** YetAnotherEric joined
[08:32] *** elmex joined
[08:34] *** xern joined
[08:44] *** buubot joined
[08:46] *** buubot joined
[08:53] *** sri_ joined
[09:11] *** takesako joined
[09:56] *** ludan joined
[09:56] <ludan> hi

[10:15] *** xern_ joined
[10:39] <Juerd> Hello

[10:40] <audreyt> greetings.

[10:43] <theorbtwo> G'localtime.

[10:56] <szbalint> Hi

[11:26] *** scw joined
[11:28] *** cdfh joined
[11:32] <meppl> guten morgen

[11:34] *** nothingmuch joined
[11:52] <ingy> hola

[11:57] <meppl> good morning ingy

[12:05] <ingy> hi meppl

[12:06] *** khisanth_ joined
[12:07] *** khisanth_ joined
[12:09] *** khisanth_ is now known as Khisanth

[12:27] *** Limbic_Region joined
[12:34] <Limbic_Region> hey all, there is a basic "Getting started with Pugs" question at the Monastery that could use some attention

[12:35] <Limbic_Region> http://perlmonks.org/index.pl?node_id=550348

[12:42] *** weinig|sleep is now known as weinig

[13:06] *** dvorak_ joined
[13:10] *** weinig joined
[13:14] <svnbot6> r10383 | fglock++ | PCR :ratchet - <after>

[13:16] *** fglock joined
[13:19] *** fglock joined
[13:19] *** fglock joined
[13:21] *** bjoern_ joined
[13:31] <fglock> <after> was implemented by "reversing the syntax tree" as in S05 :)

[13:38] *** bjoern_ joined
[13:40] *** Steve_p_ is now known as Steve_p

[13:48] *** malaire joined
[13:50] *** hexmode joined
[13:52] *** andara joined
[13:53] *** jserv-- joined
[13:54] <andara> while $line = =$fh { $_=$line; if m/somepattern/ {... => matches all lines;

[13:54] <wolverian> I think you mean for =$fh -> $line { ... }

[13:54] *** buu joined
[13:54] <andara> while $line = =$fh { $_=$line; if $_ ~~ m/somepattern/ {... => matches pattern.

[13:55] <Juerd> Unary = doesn't get less ugly over time

[13:55] * Steve_p rubs his eyes

[13:55] <andara> well, this works kind of. But my question is: is $_ not impicitly assumed in p6?

[13:57] *** FurnaceBoy joined
[13:57] <andara> in p5: /.../; is equiv to $_=~/.../;

[13:57] <andara> in p6 /.../; is not equiv to $_ ~~ /.../; or so it seems ...

[14:00] <PerlJam> andara: pugs may not implement everything.

[14:01] <PerlJam> andara: but,  m/.../  should match against $_ in perl6 (as in perl5)

[14:01] <andara> That's what I asu

[14:01] <andara> sumed. So I'll wait for the next version :-)

[14:02] <theorbtwo> m/.../ will match against $_.  IIRC, /.../ won't.

[14:03] <PerlJam> theorbtwo: Are you talking about pugs specifically, or perl6?

[14:03] <theorbtwo> Perl6, as specified, not neccessarly as implemented.

[14:03] <theorbtwo> OTOH, my knowledge of the specification is somewhat outdated.

[14:04] <PerlJam> theorbtwo: /.../ will match against $_ in "value context"

[14:04] <andara> I tried m/.../ and rx:perl5/.../

[14:04] <PerlJam> theorbtwo: otherwise you just get a Regex object

[14:06] *** DaGo joined
[14:08] <theorbtwo> That's more or less what I thought.

[14:09] <theorbtwo> I was recommending what I thought was best practce -- being explicit about the m.  Probably I should have been a bit more explicit.

[14:09] *** fglock left
[14:09] <theorbtwo> Er, in fact, a bit more correct, since "won't" says that it never will, not that it sometimes won't.

[14:10] <PerlJam> Right.  My personal best practice says to always use the m when you want a match

[14:17] *** andara joined
[14:21] *** hexmode joined
[14:27] *** turrepurre joined
[14:30] *** rdice joined
[14:30] <audreyt> rdice: hi!

[14:30] <audreyt> ?eval 'hi rdice'

[14:31] *** evalbot_10382 is now known as evalbot_10383

[14:31] <evalbot_10383> "hi rdice"

[14:31] <rdice> audreyt, allo there.

[14:31] <audreyt> ?eval [+] 1, 2, 3, 4, 5

[14:31] <evalbot_10383> 15

[14:43] *** particle_ joined
[14:52] *** trym joined
[14:58] *** Toaster joined
[15:00] *** aufrank joined
[15:01] <audreyt> aufrank: hi :)

[15:01] *** shachaf joined
[15:03] *** stevan__ joined
[15:06] <audreyt> aufrank: the [,] behaviour in Capture.pg

[15:07] <audreyt> aufrank: the old * was unary

[15:07] <audreyt> but the new [,] is listop

[15:07] <audreyt> so it seems that it now marks a "region" in a capture to be flattened later

[15:07] <audreyt> (= at runtime)

[15:08] <audreyt> \( 1, 2, [,](@x, %y), 3, 4)

[15:09] <audreyt> or, without the ()

[15:09] <audreyt> \(1, 2, [,] @x, %y)

[15:10] <audreyt> as such I think it's now better to _not_ parse it in Capture.pg at all

[15:10] <Gothmog_> ?eval 5 >>+<< (1, 2, [3, 4, [5, 6]])

[15:10] <evalbot_10383> (6, 7, 8.0)

[15:10] <audreyt> Gothmog_: it's not recursive

[15:11] <Gothmog_> Okay.

[15:11] <audreyt> aufrank: that is, the transformation for flattening is better expressed by marking [,] a macro

[15:11] <aufrank> audreyt: ok

[15:11] <audreyt> and hence outside the parser 's realm

[15:11] <audreyt> it's also far more regular that way :)

[15:12] <aufrank> so is there any indication in the parse of whether a splatted pair is named?

[15:12] <audreyt> my $pair = :named<foo>

[15:12] <svnbot6> r10384 | scw++ | Pugs::Compiler::Rule ratchet: <rule>* work

[15:12] <audreyt> \([,] $pair)

[15:12] <audreyt> is the same as

[15:13] <aufrank> this means that at parse time only adverbial pairs and bareword pairs are parsed as named arguments

[15:13] <audreyt> \($pair)

[15:13] <aufrank> and pair-ified hashes

[15:13] <audreyt> to flatten it as named

[15:13] <audreyt> you need to say

[15:13] <audreyt> \([,] %$pair)

[15:13] <audreyt> basically treating it as a hash

[15:14] <audreyt> see line 377 S06

[15:16] <scw> Any one has some tip on debuging generated code which is taken by eval?

[15:16] <aufrank> audreyt: ok, that makes sense

[15:17] <scw> It took me a really long time to fix the bug in Pugs::Compiler::Rule :(

[15:17] <aufrank> so am I right in saying the only parse-level nameds are :named<foo> named=>foo and %named:<foo> ?

[15:17] <aufrank> sorry, named=>'foo'

[15:18] <audreyt> scw: perl-d doesn't work?

[15:18] <ingy> hi audreyt

[15:18] <audreyt> aufrank: well, [,] %foo will be genned as "delayed named"

[15:19] <audreyt> but yes, the only things statically known as named are

[15:19] <audreyt> :named<foo> named=>fooo :$foo

[15:19] <audreyt> ingy: hi

[15:19] <scw> audreyt: what's that?

[15:19] <audreyt> oh, and :!foo

[15:20] <ingy> audreyt: did you ever review the yaml tags proposal?

[15:20] <obra_> audreyt: when will you switch the primary identity on your PGP key?

[15:20] <audreyt> scw: the perl debugger. oh also,  Devel::ebug

[15:20] <ingy> hi obra_

[15:20] <audreyt> obra_: if you recv-key again...

[15:20] <obra_> hey ingy-san

[15:20] <obra_> audreyt: ah :)

[15:20] * ingy is heading back to the USSA soon

[15:21] <obra_> ingy: how come?

[15:21] <audreyt> ingy: no. I didn't mark it in my todo

[15:21] <audreyt> I now did

[15:22] <ingy> audreyt: need the url?

[15:22] <audreyt> no

[15:22] <ingy> ok

[15:22] <audreyt> Tomboy++ # my current todo-tool-of-choice

[15:22] <scw> audreyt: perl -d doesn't show the code in eval :(

[15:22] <audreyt> scw: oh uhm. hm. instead of eval

[15:22] <ingy> audreyt: I was just going to ask you that :P

[15:22] <audreyt> save the file externally using File::Temp

[15:22] <audreyt> scw: and then "require" it in?

[15:23] <audreyt> that may work better

[15:23] <scw> seems a good idea

[15:23] <audreyt> do it then :)

[15:23] <scw> I'll try it next time, going home &

[15:23] <audreyt> scw++

[15:25] <aufrank> audreyt: yeah, the three forms of adverbial are :foo :!foo and :foo<bar>

[15:25] <aufrank> I think I parse all of those

[15:26] <aufrank> I'll check to make sure later today

[15:26] <audreyt> k

[15:26] <audreyt> :$foo

[15:26] <audreyt> also

[15:26] *** obra_ is now known as obra

[15:26] <audreyt> which is short for foo=>$foo

[15:26] <aufrank> right

[15:27] <aufrank> I actually have a question about that in the file

[15:27] <obra> audreyt: it's looking like my flights to NPW might not work :/

[15:27] <audreyt> aw :/

[15:27] <aufrank> when the value of a pair is a variable (or function, or anything other than a string or num), do I just store a string representation of its name in the match object?

[15:27] <obra> I can't find something that isn't a redeye with me in the middle of the center section.

[15:28] <obra> "Sure way to get sick and useless before I get there"

[15:28] <audreyt> aufrank: uh, supposedly you store the parsed AST

[15:29] <audreyt> for example, if you parse it with <expression>

[15:29] <audreyt> then just store $<expression> as value

[15:29] <aufrank> ok

[15:30] <aufrank> audreyt: what can I work on that will make it possible to test these grammars I've been working on?  or is it already?

[15:31] <aufrank> also, should I be writing the grammars as Packages so that they can use each other?  what is the right way to import a Grammar?

[15:34] <audreyt> re test the grammars, you can run them with pmichaud's PGE

[15:34] <audreyt> or with pugs itself

[15:34] <audreyt> I'll hack in token/rule support tomorrow

[15:34] <audreyt> manwhile you can also use Pugs::Compiler::Rule

[15:34] <audreyt> to run them on top of perl5

[15:35] <audreyt> look at scw's MiniPerl6

[15:35] <audreyt> for how

[15:35] <aufrank> ok

[15:36] *** davidfetter joined
[15:42] <gaal> moose

[15:43] <audreyt> moose!

[15:43] <gaal> sup?

[15:44] <audreyt> $job surprises :/

[15:44] <audreyt> spec change _after_ the deadline. revised deadline coming monday.

[15:45] <gaal> hmmpf.

[15:45] <aufrank> yargh

[15:45] <audreyt> "yes you did implement everything in our spec. we just realized our spec is totally bogus. here's some more money and four days of time."

[15:45] * audreyt praises jifty for whipuptitude.

[15:45] <gaal> That's one thing Perl 6 won't be able to change, no matter how much hype there is!

[15:46] <audreyt> you mean, perl6 won't fix your client?

[15:46] <gaal> yeah

[15:46] <audreyt> fix $ \client -> client

[15:46] <gaal> specifically the software's world difficulty in, like, speccing software

[15:47] <gaal> local (const client)

[15:47] <audreyt> well, I've been rolling out weekly iterative builds

[15:47] <audreyt> it's just they are less motivated to TestItForReal before the FinalVersion ;)

[15:47] <audreyt> (which sounds familiar...)

[15:48] *** hexmode joined
[15:48] <audreyt> so I need to 1)sleep 2)wake up 3)finish up the revised unit tests

[15:48] <audreyt> hopefully in that order

[15:49] <gaal> hmm, I have to start thinking of my yapc talk

[15:49] * davidfetter tries to picture how 1 followed by 3 would work

[15:49] <gaal> nothingmuch: are you still giving one about tests too?

[15:50] <gaal> audreyt: isn't it a bit late at your localtim?

[15:50] <gaal> e

[15:50] <audreyt> use somnambulism;

[15:50] <audreyt> gaal: yes.

[15:50] <gaal> well, looks like you can use sleep; to me :)

[15:51] <gaal> somnacheckining

[15:54] <gaal> fooprowling &

[15:57] *** dvorak joined
[15:58] <audreyt> &

[15:58] <obra>        night

[15:59] *** stevan_ joined
[16:02] *** amnesiac joined
[16:11] *** weinig is now known as weinig|away

[16:24] *** justatheory joined
[16:28] *** cdfh joined
[16:30] *** sri_ joined
[16:35] *** trym joined
[16:36] *** Bleadof joined
[16:48] *** shachaf joined
[16:51] *** prium joined
[17:03] *** lichtkind joined
[17:36] *** trym joined
[17:58] *** stevan__ joined
[18:04] *** rdice left
[18:22] <aufrank> +    Bag(3,8,[2,Seq(9,3)],8) >>-<< (1,1,2,1); # Bag(2,7,[2,Seq(9,3)],7)

[18:23] <aufrank> why is the third element unmodified?

[18:23] <aufrank> I would have expect Bag(2,7,[0,Seq(7,1)],7)

[18:25] <aufrank> I guess that's a question for TimToady, if he's listening

[18:27] <wolverian> looks like a typo

[18:27] <theorbtwo> To me as well.

[18:37] <aufrank> that's what I figured

[18:38] *** trym joined
[18:40] *** particle_ left
[18:40] *** particle_ joined
[18:42] *** weinig|away joined
[18:44] *** weinig|away is now known as weinig

[18:47] *** doubtm joined
[18:47] <doubtm> i need to write a perl script to create a zip file,

[18:48] <doubtm> i had a look at http://search.cpan.org/~smpeters/Archive-Zip-1.16/lib/Archive/Zip.pod

[18:48] <doubtm> however i want to use the default modules provided by perl

[18:48] <doubtm> and i do not want to install anything extra

[18:48] <doubtm> is there a way out?

[18:49] <Limbic_Region> yes - /quit

[18:49] <Limbic_Region> this is #perl6

[18:49] <Limbic_Region> try #perl

[18:49] <doubtm> fine

[18:49] <Limbic_Region> or #perlhelp

[18:50] <doubtm> thx

[18:50] <Limbic_Region> not sure if that's on this network but the people in #perl will be more than happy to help

[18:50] <doubtm> i'll check

[18:50] <doubtm> thanx neways

[19:22] *** doubtm left
[19:24] *** buu joined
[19:29] <prium> hmm

[19:29] <prium> whats perl6

[19:29] <prium> lol

[19:29] <prium> yeah, yeah i know

[19:29] *** prium left
[19:31] *** trym joined
[19:47] *** justatheory joined
[19:48] <buu> Fascinating.

[19:50] *** frederico joined
[20:12] *** hexmode joined
[20:14] *** ludan joined
[20:15] <ludan> hi all

[20:15] <davidfetter> hi

[20:20] *** nothingmuch joined
[20:23] *** DaGo joined
[20:26] *** weinig joined
[20:46] *** fglock joined
[21:18] *** davidfetter is now known as there

[21:18] *** there is now known as davidfetter

[21:23] *** aufrank joined
[22:05] *** kanru joined
[22:28] *** YetAnotherEric left
[22:32] *** Quell joined
[22:36] *** larsen joined
[22:43] *** Limbic_Region joined
[23:00] *** buu joined
[23:03] *** buubot joined
[23:09] *** jsiracusa joined
[23:28] *** Khisanth joined
[23:41] *** weinig joined
[23:42] <Quell> .

