[00:38] *** joepurl joined
[00:42] *** azuroth joined
[01:03] <brent> is now known as brentp

[01:05] *** lisppaste3 joined
[01:22] *** stevan joined
[01:31] *** stevan_ joined
[01:40] *** cognominal joined
[01:45] *** jiing joined
[01:46] *** SamB joined
[01:50] *** oylenshpeegul left
[02:02] *** dduncan joined
[02:07] <teva> is now known as stevan_

[02:13] *** Amnesiac joined
[02:40] *** stevan joined
[02:53] *** penk joined
[03:23] <stevan> audreyt: ping

[03:40] <stevan> audreyt: I am trying to make Array a subclass of List and I am running into a problem

[03:40] *** vel joined
[03:40] <stevan> Array is a container class, while List is a normal object

[03:40] <stevan> s/object/class/

[03:41] <stevan> oh wait

[03:41] <stevan> hmmm

[03:41] * stevan ponders messing around more with Roles

[03:43] <stevan> nope roles dont work correctly 

[03:43] <stevan> the crux of the issue is this

[03:44] <stevan> List.map needs to return a new List instance 

[03:44] <stevan> which for List is just List.new()

[03:45] <stevan> but for Array is Array`create()

[03:45] <stevan> I managed to overload List.new() so that I could just pass it a []

[03:45] <stevan> but I cannot get Array.new to work

[03:45] <stevan> I am not sure why

[03:47] <stevan> it keeps trying to use List.new

[03:47] <stevan> oh,.. when I say Array, I mean ^Array

[03:47] <stevan> if I use ::Array.new() it DWIM

[04:01] <stevan> ok, I have the ^List class working 100% now (which is not that hard)

[04:02] <stevan> but ^Array is still having issues

[04:02] <meppl> guten morgen

[04:03] <stevan> mostly the problem is that in the inherited ^List.map and co. I am calling $?CLASS.new(...) and since ^Array.new chokes,.. they choke

[04:03] <stevan> good morning meppl 

[04:04] <stevan> audreyt: I think we might be able to fix this if we address this in .CREATE rather than `create, this should give me the level of control I need 

[04:06] <stevan> I am going to commit what I have so you can see what I mean

[04:07] <stevan> I thought about making Array just do the List role,.. which I actually think makes more sense, however, we would still have the same issues re: $?CLASS.new(...)

[04:08] <stevan> however doing that would mean I would need to remove pop/push/shift/unshift from List (which currently has immutable versions of them), otherwise it would conflict with the versions of the same methods in the Array role

[04:08] <svnbot6> r8580 | stevan++ | PIL/Native/Bootstrap/Container/*

[04:08] <svnbot6> r8580 | stevan++ | - attempted to make Array inherit from List, but ran into an issue with 

[04:08] <svnbot6> r8580 | stevan++ |   how Arrays are created as opposed to other objects (like List), see the

[04:08] <svnbot6> r8580 | stevan++ |   #perl6 log for a bunch of rambling on the topic

[04:08] <svnbot6> r8580 | stevan++ |     - added tests for List in list.t

[04:08] <stevan> I don't mind that though, I could just create a ImmutableArray which provided those versions if you need them

[04:09] <stevan> but anyway... I am going AFK, but might be back later,.. if not I will be back in the morning ~10 hours from now

[04:09] * stevan &

[04:55] *** Debolaz2 joined
[05:13] *** avar joined
[05:31] *** kanru joined
[05:37] *** Debolaz joined
[06:27] *** Cryptic_K joined
[06:31] *** christo joined
[06:33] *** christo joined
[06:53] *** GeJ joined
[07:02] *** kanru joined
[07:22] *** nothingmuch joined
[07:30] *** lisppaste3 joined
[07:52] *** azuroth joined
[08:26] *** iblechbot joined
[08:34] *** nothingmuch joined
[08:37] *** K_ joined
[09:01] *** r0nny joined
[09:04] *** dada joined
[09:13] *** linnuxxy joined
[09:36] *** pjcj joined
[09:39] *** larsen joined
[10:09] *** nothingmuch joined
[10:37] *** Southen_ joined
[10:37] *** G2 joined
[11:20] <svnbot6> r8581 | asavige++ | Add anchors to regex in Rpn.pm to fix bug pointed out by Perl Monk ambrus

[11:40] *** marmic joined
[11:51] *** iblechbot joined
[12:05] *** elmex joined
[12:35] <svnbot6> r8582 | asavige++ | added hask2, a monadic haskell version, based on suggestions and code from Cale Gibbard

[12:39] <spinclad> (soo quiet)

[12:39] <spinclad> (sure this is #perl6?)

[12:39] * spinclad checks  (seems to be)

[13:00] <rafl> Debolaz: ping

[13:03] *** chris2 joined
[13:07] <ingy> hola

[13:07] <ingy> seen audreyt 

[13:07] <jabbot> ingy: audreyt was seen 21 hours 23 minutes 10 seconds ago

[13:08] *** sahadev joined
[13:10] *** nothingmuch joined
[13:12] *** nothingmuch joined
[13:16] <rafl> Debolaz: I applied your freebsd patches aa and parts of ab to parrot.

[13:16] <rafl> Debolaz: ad isn't needed anymore. The *_shared binaries are gone.

[13:17] <rafl> Debolaz: I'm not sure about ac. Whys is it needed? init::hints::freebsd uses code from /usr/ports/Mk/bsd.port.mk which should do the right thing, shouldn't it?

[13:45] <audreyt> ingy: yo

[13:46] <audreyt> another $job day tomorrow, and then it's sweet weekend hacking with miyagawa and gugod and ingy and clkao :D

[13:50] *** alexe_home joined
[13:57] *** Limbic_Region joined
[13:59] <gaal> morning (or something)

[14:01] <audreyt> yo :)

[14:01] <audreyt> how's life?

[14:02] <obra> audreyt: hi!

[14:02] <audreyt> obra: hey!

[14:02] <obra> how are things?

[14:02] <obra> how was your demo?

[14:02] <gaal> it's... startling sometimes!

[14:03] <audreyt> demo was yesterday. today is another deployment

[14:03] <gaal> I realized I must read more SPJ.

[14:03] <obra> did it go ok?

[14:03] <obra> (Did you see my incompatible change?)

[14:03] <audreyt> the demo went very well. they want foldable rico livegrid, which I (for once) didn't volunteer to implement

[14:04] <obra> heh. so it's extra $?

[14:04] <audreyt> yeah I did, it made for amusing doc verses like "rule rules"

[14:04] <obra> oops

[14:04] <audreyt> nah, it's extra $people-hacking-jifty

[14:04] <obra> oo

[14:04] <audreyt> which I realize as being much better than extra $

[14:04] <obra> yes

[14:04] <obra> Oh. thanks to you, Why noticed jifty

[14:05] <audreyt> yeah, I replied there :)

[14:05] <audreyt> I'm very amused by the "I might look like a fish, but I want to be a squid." thing

[14:05] <obra> My plan worked perfectly. the perl as ruby's quirky brother comment was intended to get ruby people to laugh

[14:05] <audreyt> # http://redhanded.hobix.com/inspect/hehMmmnnPerlPeople.html

[14:05] <audreyt> obra++ # evil genius

[14:06] <audreyt> gaal: hmm, life is startling and reading more SPJ helps?

[14:06] <audreyt> gaal: you have some very strange brain patterns.

[14:06] * chris2 spies

[14:07] <audreyt> chris2: hi :)

[14:07] <chris2> hi audreyt ;)

[14:07] <ingy> hi audreyt 

[14:07] <audreyt> ingy: hey. sup?

[14:07] <ingy> YAML-0.50 is ready to go

[14:07] <ingy> just sweeping my rt queue

[14:07] <obra> audreyt: I'm _right now_ about to controllerize wifty. anything I should know?

[14:08] <ingy> obra: probably Perl

[14:08] <audreyt> ingy++

[14:08] <audreyt> obra: nope, although I'd like to see if you end up wanting $m as a shorthand for $Dispatcher->{mason}.

[14:08] <gaal> audreyt: well, revisiting awkward squad now that I know more of the elegant army helps; and syb is some seriously great stuff

[14:08] <audreyt> obra: (and maybe $r)

[14:09] <obra> I'd rather never, ever have to touch mason from within the dispatcher

[14:09] <obra> we'll see

[14:10] <audreyt> obra: that's my intuition too. but we'll see. also per-subclass catalyst-style dispatch may still have some merit -- see if you feel a need for it, although I doubt so

[14:11] <obra> nod

[14:11] <gaal> <=<: wow, you got to use an REM title in a sentence (almost).

[14:11] <obra> I expect I'm going to want to move my controller logic into other classes and have "run" run a class and sub

[14:12] <gaal> audreyt: I got a reply from Simon M reagarding that segfault but I'm actually not sure it helps :/

[14:13] <audreyt> gaal: heh, elegant army indeed. his other works tends to be a wee bit more technical (STM, lexical scoped tyvar, SMP, local type inferencing, delimited continuations) but they are all very nice reads

[14:13] <audreyt> gaal: what did JaffaCake say?

[14:14] <audreyt> obra: I'll still make "run" (&) and introduce a "call" form or for ($)

[14:14] <svnbot6> r8583 | nnunley++ | Updating test count.

[14:14] <obra> why?

[14:14] <gaal> audreyt: the STM slides weren't too scary first time I read them.. ETA for understanding is probably under a year

[14:14] <gaal> for some value of understanding (or year)

[14:14] <audreyt> because if you prototype it as ($), you need explicit "sub" for "{}"

[14:14] <obra> why not let run take a coderef or a package+sub name?

[14:14] <obra> ah

[14:14] <audreyt> the "sub" is not optional everywhere... not in that perl5 language we are using anyway

[14:15] * obra forgets that having run ($) and run(&) won't dwim

[14:15] * audreyt mumbles something about the virtue of MMD

[14:16] <audreyt> ingy: woot, looking forward to YAML050 -- I'll take a look at gaal's Haskell Syck emitter tomorrow

[14:16] <gaal> audreyt: basically, I had     thawNode nodePtr = deRefStablePtr (castPtrToStablePtr nodePtr)

[14:16] <audreyt> ingy: which will motivate me to solve the refcycle problem in YAML::Syck as well

[14:16] <gaal> but he said,

[14:16] <gaal> You're attempting to deref the StablePtr, and also run it as an IO 

[14:16] <gaal> action!  I bet the original value wasn't an IO action, right?

[14:16] <gaal> (endQ)

[14:17] <gaal> which I'm kinda still not sure I understand

[14:17] <gaal> s/kinda//

[14:17] <gaal> seeing as your original code had readNode which did something very similar

[14:19] <audreyt> I see

[14:19] <audreyt> thawNode nodePtr = return (deRefStablePtr $ castPtrToStablePtr nodePtr)

[14:19] <audreyt> missing an return will deref it as an (IO a) not an (a)

[14:20] <Debolaz> rafl: In theory, patch-ac shouldn't be needed, but the thing is that libc_r doesn't mix well with other threading libraries, and perl is compiled with a different library when threading is enabled (Which is also default in pkgsrc). Parrot will try to use the threading library that perl uses, and this causes some.. conflict of interest.

[14:21] *** mjl69 joined
[14:22] <gaal> ahh! type inference

[14:22] * gaal tries a fix

[14:24] <Debolaz> rafl: It's probably local to pkgsrc, so it will probably do the Right-Thing(tm) in other situations and the patch shouldn't be neccesary. :)

[14:26] <rafl> Debolaz: Why is it needed at all for pkgsrc?

[14:30] <obra> audreyt: does http://paste.husk.org/4930 look right?

[14:30] *** Qiang joined
[14:31] <audreyt> obra: yeah

[14:32] <obra> hm. now to figure out why it's not triggering ;)

[14:32] * obra was hoping you'd point out something stupid

[14:33] <obra> OH.

[14:34] <obra> Yeah. it totally won't work if I call it "Dspatcher.pm"

[14:35] <gaal> grr, so, still no luck. thawNode :: Ptr () -> IO YamlNode right? not -> YamlNode

[14:35] <gaal> so return $ deRefStablePtr (castPtrToStablePtr nodePtr) is a type error

[14:36] <gaal> return =<< deRef... is still a segfault

[14:36] <gaal> should I NOINLINE this function?

[14:42] *** PerlJam joined
[14:45] *** chris2_ joined
[14:49] <Debolaz> rafl: Because perl is compiled with -lpthread.

[14:50] *** whiteg_ joined
[14:54] *** kanru joined
[14:57] <gaal> argh!

[14:58] <gaal> castPtrToStablePtr :: Ptr () -> StablePtr a

[14:58] <gaal> so if I explicitly say

[14:58] <gaal> let (ptr :: StablePtr YamlNode) = castPtrToStablePtr nodePtr

[14:58] <gaal> then deRefStablePtr ptr

[14:58] <gaal> must have the type IO YamlNode, because

[14:58] <gaal> deRefStablePtr :: StablePtr a -> IO a

[14:59] <gaal> "And yet, it segfaults"

[14:59] <audreyt> ok ok, I give up, I'll take a look instead of doing $work

[14:59] <gaal> my gaudy code was hit by a SIGBUS :-(

[14:59] <audreyt> I guess it's only fair :)

[15:01] <gaal> sorry -- there aren't nearly enough other people I can distract to help me with this :/

[15:01] <audreyt> 'tis fine

[15:05] <Limbic_Region> oh - pugs appears to run much faster than it did before I left for vacation btw

[15:06] <Limbic_Region> where appears is based off eyeball only analaysis

[15:10] <audreyt> gaal: I replicated the segfault. fixing

[15:10] * gaal pads the walls in anticipation

[15:10] <hite> is now known as whiteg_

[15:14] *** xinming joined
[15:30] *** lisppaste3 joined
[15:31] *** vel__ joined
[15:33] <gaal> so this isn't just a redundant indirection is it? :(

[15:37] <gaal> svnbot6: ?check

[15:43] <audreyt> gaal: fixed

[15:43] <audreyt> you were misusing "new".

[15:43] <audreyt> it should just be "return".

[15:43] <audreyt> I also tidied up the emitterextra code.

[15:43] <audreyt> commit in a bit

[15:44] <stevan> good morning all

[15:45] <Debolaz> Moin.

[15:45] <Limbic_Region> salutations

[15:46] <gaal> awwrrghh

[15:46] <gaal> audreyt: many thanks

[15:47] *** mugwump joined
[15:47] <gaal> shower, bbiab &

[15:49] *** hexmode joined
[15:53] *** chris2_ joined
[15:54] <hris> is now known as chris2_

[15:56] *** Eimi joined
[15:56] <svnbot6> r8584 | audreyt++ | * Fix gaal++'s excellent work at Syck emitting.

[15:56] <svnbot6> r8584 | audreyt++ |   Pugs's .yaml now won't segfault anymore!

[15:57] *** elmex joined
[15:58] <audreyt> stevan: greetings. hadn't had time to check ImmutableArray (List) and ImmutableFiniteArray (Tuple) stuff

[15:59] <stevan> audreyt: no worries

[15:59] <stevan> I actually think I need to ponder this a little more

[16:00] <stevan> I think we can fix this using $repr in CREATE

[16:00] <stevan> but I have to figure out the best way to do so

[16:00] <audreyt> *nod*

[16:00] <audreyt> `create definitely should die.

[16:00] <audreyt> it was a hack around ::Scalar.isa('Scalar') not true

[16:00] <stevan> we can discuss this when I have a coherent idea of what the front-end should do

[16:00] <audreyt> but under larry's insanity logic, it's now true

[16:00] *** frey joined
[16:00] <audreyt> okay, cool

[16:01] <stevan> oh,.. BTW,.. what is `make_class all about?

[16:01] <audreyt> shower, bbiab :)

[16:01] <stevan> that I couldnt follow

[16:01] <audreyt> oh, it's a hack to make a shadow object

[16:01] <stevan> ok

[16:01] <audreyt> a prototypical thing that does not have a repr

[16:01] <stevan> gotcha

[16:01] <audreyt> that's what ::Scalar is

[16:01] * stevan never liked that idea too much,.. 

[16:01] <stevan> I see

[16:08] <gaal> audreyt: thanks for the accumulator refactoring too. Is that more efficient? does GHC generate smart allocations when ++ing strings under the assumption that they might be ++ed some more?

[16:11] <gaal> where are tests for .perl located?

[16:13] <Juerd_> It's probably better off without tests in its current state :)

[16:16] <gaal> Juerd_: what makes you say that?

[16:16] <Juerd_> ?eval :foo.perl

[16:16] <evalbot_8584> "(\"foo\" => 1)" 

[16:17] <Juerd_> ?eval eval(:foo.perl).perl

[16:17] <evalbot_8584> "\\\"perl6\"" 

[16:17] <Juerd_> Eh, not what I expected, but a good illustration nevertheless

[16:17] <audreyt> gaal: no, it just makes life easier :) PS.append is definitely more efficient

[16:18] <audreyt> gaal: but because you are rturning a String, it ends up being the same O() anyway

[16:18] <gaal> Juerd_: and that means it's better off w/o tests? :)

[16:18] <Juerd_> gaal: It'll reduce success rate! :)

[16:18] <gaal> audreyt: sure, but the question is who mallocs/frags more

[16:18] <audreyt> Juerd_: tsk ;)

[16:18] <gaal> Juerd_: that's what we have force_todo for :-p

[16:19] <audreyt> gaal: well, FPS does memcpy, so you can't beat that

[16:19] <audreyt> so FPS is gonna win 2:1 I think

[16:19] <gaal> env PASS_ALL make smoke

[16:20] <gaal> even better: echo `grep -cr is t` "tests successful" # bogus, but at least none fail

[16:22] <audreyt> ?eval 'foo'.yaml

[16:22] <evalbot_8584> "--- foo\n" 

[16:22] <gaal> audreyt: theoretically, since we construct a YamlNode tree, we can get an idea for how big the string's going to be, and hint that to the emitting code, which can prealloc

[16:22] <gaal> audreyt: working on undef.yaml, then 42.yaml now.

[16:22] <audreyt> gaal: or we can make FPS's `append` prealloc 10x of needed memory

[16:22] <audreyt> as perl's SVV does

[16:22] <audreyt> s/SVV/SV/

[16:22] <audreyt> on the vain hope that it will be concated more

[16:23] <audreyt> brutal but works

[16:23] <gaal> our VStr's .length is O(n), right?

[16:23] <audreyt> yes, and it's going to be FPS in the future

[16:23] <audreyt> so plan for it :)

[16:23] <gaal> yeah, no way *that* wouldn't be optimized.

[16:24] <gaal> in the case of yaml emitting, the result probably won't be concatted very much

[16:24] <gaal> (typically)

[16:24] <audreyt> it would

[16:24] <audreyt> for large docs

[16:25] <gaal> log "I got { $result.yaml }\n"

[16:25] <gaal> ahh you mean during emitting? of course

[16:25] <gaal> I meant the VStr dumpYaml returns probably won't be concatted much.

[16:26] <audreyt> nod

[16:27] <gaal> ingy about? cd src/YAML-Syck/ ; svn up # hangs

[16:28] <gaal> ahh, no just very slow.

[16:29] <gaal> audreyt: I imagine you know this is broken, yes? perl -MYAML::Syck -le 'print Dump({a=>1})'

[16:30] <gaal> I can work on it a bit later, but the pugs version first :)

[16:30] <audreyt> huh

[16:30] <audreyt> ?eval eval("---\n? a\n: 1\n", :lang<yaml>)

[16:30] <evalbot_8584> (no output)

[16:31] <audreyt> heh

[16:31] <audreyt> $ perl -MYAML -le 'print YAML::Dump(YAML::Load("---\n? a\n: 1\n"))'

[16:31] <audreyt> ---

[16:31] <audreyt> a: 1

[16:31] <audreyt> so it's not broken, just bad yaml style

[16:32] <gaal> wha!?

[16:32] * gaal needs to read some spec :)

[16:32] <audreyt> YAML to JSON is like JavaScript to IO ;)

[16:32] <audreyt> "it may look simple, but really is not"

[16:34] <gaal> wasn't there a shortcut for "-Iblib/lib -Iblib/arch" somewhere?

[16:38] <audreyt> -Mblib ?

[16:39] <gaal> yay :)

[16:40] <gaal> interesting: this pattern match fails on undef.yaml: toYaml VUndef = return YamlNil

[16:41] <gaal> show shows VType (mkType "undef")

[16:41] <gaal> isn't undef a value?

[16:42] <audreyt> undef.yaml is taken as a class call.

[16:42] <audreyt> try (undef).yaml

[16:42] <audreyt> or undef().yaml

[16:42] <audreyt> and yes, it is a bug.

[16:42] <audreyt> s/undef()/undefine()/

[16:43] <gaal> ah, I see

[16:43] <gaal> thanks :)

[16:43] *** mjl69_ joined
[16:43] <audreyt> :)

[16:45] *** TNKS joined
[16:46] <gaal> I'm assuming I can use Pretty's format where appropriate. (I'm assuming it is appropriate soemtimes :)

[16:46] <TNKS> audreyt, I read that you might be working on a Haskell parser for YAML, then I saw on your blog that you might be here.  Is libyaml-haskell still active?

[16:48] <gaal> TNKS: is this useful to you? http://svn.openfoundry.org/pugs/src/Data/Yaml/Syck.hsc

[16:48] <gaal> we're working on it now.

[16:48] <audreyt> TNKS: parser is already quite functional

[16:48] <audreyt> once emission works, I'll cabalize it .

[16:49] <audreyt> TNKS: but you are free to just take the D.Y.S code and pugs's src/syck/*

[16:49] <audreyt> and use it in your project. I don't think there's code for libyaml-haskell in the past.

[16:49] *** elmex joined
[16:52] *** kane_ joined
[16:54] <TNKS> audreyt, cool.  I'll see what I can piece together.

[16:55] <audreyt> cool

[16:55] * audreyt waves and sleeps &

[16:56] <TNKS> Actually, (forgive the Haskell talk in a Perl channel), I'd like to stay in Haskell if I can, but for me there's the issue of persistence.  I've read about a few options for serialization, but YAML seems like a clean way to serialize data into a human-readable format.

[16:56] <PerlJam> and #perl6 continues to interwingle with #haskell :)

[16:57] <TNKS> PerlJam, you might have even been the one who mentioned YAML to me yesterday.

[16:57] <PerlJam> TNKS: indeed I was.

[16:58] <TNKS> I'm thinking that YAML might be the smart way for me to go, but I'm not sure.

[16:58] <TNKS> Do you use it with Haskell?

[16:58] <PerlJam> TNKS: If I'm sure for you will that be enough?

[16:58] <PerlJam> actually, I've never used it with haskell, but other lambacamels have.

[16:59] <gaal> TNKS: fwiw D.Y.S is not at all coupled with Perl at least, but probably the dependency on Data.FastPackedString will stay.

[16:59] <PerlJam> s/lamba/lambda/

[17:00] <SamB> hmm. Is Haskell's mascot going to be the lambda?

[17:00] <TNKS> I should probably admit that I've not picked up Perl yet.

[17:01] <gaal> hahaha, this is what I call overRationalization: ./pugs -e 'say (123.12).yaml' => --- 3078/25

[17:01] <SamB> I thought the mascots had to be animals

[17:04] <Limbic_Region> gaal - great way to find approximations of pi?

[17:05] <Limbic_Region> ?eval say (3.14).yaml

[17:05] <evalbot_8584> pugs: src/Pugs/Prim/Yaml.hs:(46,0)-(49,35): Non-exhaustive patterns in function toYaml   

[17:05] <gaal> Limbic_Region: the version you have doens't do numbers yet, let me check in

[17:05] <gaal> btw tests very very welcome

[17:06] <gaal> I wonder if we can steal them wholesale from somewhere

[17:07] <TNKS> gaal, what does yaml have to do with coverting decimals to fractions?

[17:07] <Limbic_Region> YAML::Parser::Syck  ??

[17:07] <TNKS> or is that more something that pugs is doing before spitting out the yaml.

[17:07] <Limbic_Region> pugs I think TNKS

[17:07] <Limbic_Region> ?eval say '1.1'.perl

[17:07] <evalbot_8584> OUTPUT["1.1" ] bool::true 

[17:08] <Limbic_Region> ?eval say "1.1".perl

[17:08] <evalbot_8584> OUTPUT["1.1" ] bool::true 

[17:08] <Limbic_Region> hmmm 

[17:08] <gaal> TNKS: yeah, it's a pugs thing. I was delegating something to pugs' pretty-printer.

[17:08] <gaal> ?eval (123.12).perl 

[17:08] <evalbot_8584> "3078/25" 

[17:09] <TNKS> is Pugs the only implementation of Perl 6?  Or is there a comparable alternative?

[17:09] <gaal> anyone remember how YAML represents infinity?

[17:10] <Limbic_Region> ?eval (3.14).perl

[17:10] <evalbot_8584> "157/50" 

[17:10] <Limbic_Region> ?eval (3.1415).perl

[17:10] <evalbot_8584> "6283/2000" 

[17:10] <gaal> TNKS: it's the closest one there is

[17:10] <Limbic_Region> heh

[17:10] <TNKS> gaal, cool,.

[17:10] <Limbic_Region> ?eval (3.1415926535897932384626433).perl

[17:10] <evalbot_8584> "31415926535897932384626433/10000000000000000000000000" 

[17:10] <Limbic_Region> that's cheating

[17:10] <TNKS> ha.  

[17:10] <gaal> TNKS: there's quite some work to do yet. the language isn't fully specced.

[17:11] <TNKS> I see.

[17:11] <TNKS> Is it backwards compatible?  Or only partially so?

[17:11] <Limbic_Region> TNKS - it is suspected that since p6 will have actually specification documents and not a reference implementation, there will be multiple implementations 

[17:12] <SamB> what language are the specs to be written in?

[17:12] <Limbic_Region> it will be backwards compatible but there is only a guarantee that about 95% of programs will work 95% of the time without manual intervention

[17:12] <PerlJam> SamB: unfortunately, english  :)

[17:12] <integral> if the synopses are anything to go by, they won't bother writing the syntax specs in perl6 rules :-(

[17:12] <Limbic_Region> give or take a few percentages

[17:13] <SamB> hmm. well... it'll be in good company ;-)

[17:14] <gaal> Limbic_Region: svn up

[17:14] <svnbot6> r8585 | gaal++ | YAML emitting

[17:14] <svnbot6> r8585 | gaal++ |   - "moose".yaml; 42.yaml; (undef).yaml work

[17:14] <svnbot6> r8585 | gaal++ |   - (123.12).yaml gives funny results (because it's delegated to

[17:14] <svnbot6> r8585 | gaal++ |     pugs' pretty-printer

[17:14] <svnbot6> r8585 | gaal++ | Tests very welcome!

[17:15] <Limbic_Region> gaal - did you see my YAML::Parser::Syck comment for stealing tests wholesale?

[17:15] <gaal> no, here? /me looks

[17:16] <Limbic_Region> it was just a quick CPAN search so it may not be applicable at all

[17:16] <gaal> Limbic_Region: if you can work in a patch, I'd be much obliged; I want to ci support for aggregates

[17:18] <Limbic_Region> not today gaal

[17:18] <Limbic_Region> I am in another reality ATM

[17:18] <Limbic_Region> my face feels like it is going to jump off my head and that there are strands of anti-gravity plucking at the skin on top of my head

[17:19] <Limbic_Region> OTC anti-histamines in case anyone was wondering

[17:19] <gaal> ah, you're rushing off to write a patent then? :)

[17:19] <gaal> (for antigrav)

[17:21] <Limbic_Region> well, AFAIK there is no direct evidence of gravitons (though a couple indirect) so I would suspect finding anti-gravity first would make a few more headlines

[17:22] <Limbic_Region> ingy hangs out here right - he is the author of YAML::Parser::Syck so perhaps he might be able to shoehorn in the tests

[17:23] <Limbic_Region> oh nevermind, I just looked at the 1 and only test and it just checks to see if the module loaded ok

[17:29] *** justatheory joined
[17:30] <Limbic_Region> audreyt ping

[17:30] <Limbic_Region> oh that's right $work, nevermind me

[17:31] <Limbic_Region> was just wondering if there was going to be a 1 year summary/journal post on Pugs bday in a few weeks

[17:32] <gaal> yay pugs bday!!

[17:51] *** DaGo joined
[17:52] <ingy> YAML?

[17:53] <SamB> one of those s-expr thingies?

[17:54] <gaal> ?eval "hi, ingy!".yaml

[17:54] <evalbot_8585> "--- hi, ingy!\n" 

[17:54] <gaal> ingy: scalars supported; working on the rest now.

[17:59] <avar> yaml is a core method now?

[17:59] <gaal> avar: yes, but this isn't specced.

[17:59] <avar> it would be neat if it were;)

[18:00] <avar> ?eval 1..2.yaml

[18:00] <evalbot_8585> () 

[18:00] <avar> ?eval [1,2].yaml

[18:00] <evalbot_8585> pugs: Syck.hsc:(88,4)-(98,94): Non-exhaustive patterns in case   

[18:00] <avar> ;)

[18:00] <gaal> avar: scalars only for now. working on it

[18:01] <avar> k

[18:01] <gaal> but tests welcome.

[18:01] <avar> ?eval 5.yaml

[18:01] <evalbot_8585> "--- 5\n" 

[18:01] <avar> ?eval "5".yaml

[18:01] <evalbot_8585> "--- 5\n" 

[18:01] <avar> mm

[18:02] <Limbic_Region> ?eval (3.14159).yaml

[18:02] <evalbot_8585> "--- 314159/100000\n" 

[18:02] <Limbic_Region> loses its creativity after 4 places

[18:02] <Limbic_Region> ?eval(3.1415).yaml

[18:02] <evalbot_8585> "--- 6283/2000\n" 

[18:03] <gaal> Limbic_Region: like I said, this isn't related to YAML :)

[18:03] <gaal> see Pretty.hs

[18:03] <Limbic_Region> I know - pretty printing

[18:03] <Limbic_Region> ?eval (3.1415).perl

[18:03] <evalbot_8585> "6283/2000" 

[18:08] <avar> $ ruby -ryaml -e 'puts YAML::dump( [ 1/3, nil, false ] )'

[18:08] <avar> - 0

[18:08] <avar> - 

[18:08] <avar> - false

[18:08] <avar> in-tee-resting

[18:10] <gaal> nil is wrong. should be "~" AFAIK

[18:10] <gaal> s/nil/the nil case/

[18:11] <gaal> eh. the 1/3 case is wrong too :)

[18:11] <gaal> but thanks for reminding me about booleans.

[18:13] *** rantanplan_ joined
[18:22] <avar> how should 1/3 be encoded?

[18:22] <avar> defenetly can't be 0.333333333..... as that would be lossy

[18:23] <avar> ?eval false.yaml

[18:23] <evalbot_8585> "--- ::false\n" 

[18:23] <gaal> ?eval (bool::false).yaml

[18:23] <evalbot_8585> "--- bool::false\n" 

[18:23] <gaal> needs fixing. tests welcome :)

[18:23] <avar> ?eval ?1.yaml

[18:23] <evalbot_8585> bool::true 

[18:24] <avar> ?eval (?1).yaml

[18:24] <evalbot_8585> "--- bool::true\n" 

[18:57] *** G2 joined
[19:03] <gaal> whee! arrays in.

[19:18] *** peacock joined
[19:23] <Limbic_Region> gaal - if you made a commit for arrays it hasn't shown up yet

[19:24] <gaal> not yet, coming up.

[19:28] *** nothingmuch joined
[19:30] <svnbot6> r8586 | gaal++ | Data.Yaml.Syck:

[19:30] <svnbot6> r8586 | gaal++ |  - emitting arrays

[19:30] <svnbot6> r8586 | gaal++ |  - unbreak eval :lang<yaml>

[19:30] *** lisppaste3 joined
[19:33] <webmind> hmm, someone didn't nice his compile on feather :(

[19:34] <gaal> webmind: I see a cc1 at pr 25

[19:34] <webmind> fibonaci had some cc1 at 0

[19:34] <webmind> and ghc

[19:34] <gaal> looks niced now.

[19:34] <gaal> oh but you're right

[19:35] <gaal> it isn't niced

[19:35] <gaal> it's just pr 25.

[19:35] <webmind> uhuh

[19:35] <gaal> luqui: ping

[19:35] <gaal> ?eval <hello world>.yaml

[19:35] <evalbot_8586> "--- \n- hello\n- world\n" 

[19:35] <gaal> whee!

[19:36] <webmind> yay yaml :)

[19:37] *** Lartuv joined
[19:38] <gaal> urp? is hash_fetchKeys the only way to get at a flattened hash?

[19:40] *** Lartuv joined
[19:49] *** Amnesiac joined
[19:52] * Limbic_Region would think that hash_fetchKeys would return a list of keys not the flattened hash

[19:53] <Limbic_Region> otherwise it is a poorly named routine

[19:53] <gaal> Limbic_Region: yes, I said get *at*

[19:53] <audreyt> hash_fetch.

[19:54] <audreyt> gives you back a list of pairs.

[19:54] <gaal> whew!

[19:55] <Limbic_Region> er um - I completely missed the at there

[19:56] <Limbic_Region> audreyt - planning anything special for Pugs' bday?

[19:56] <gaal> Limbic_Region: sorry, am too terse.

[19:58] <audreyt> Limbic_Region: finishing the migration to new shiny runtime? :)

[19:58] <audreyt> (that'd be 6.28.0)

[19:58] <Limbic_Region> wooo hooo

[19:58] <Limbic_Region> something like 3 weeks to go

[19:59] <audreyt> yup

[20:04] <gaal> hmm, what's wrong with this expression?   return $ YamlMap =<< hash_fetch v'

[20:05] <audreyt> fmap YamlMap (hash_fetch v')

[20:05] <audreyt> alternatively

[20:05] <audreyt> (return . YamlMap) =<< hash_fetch v'

[20:05] <audreyt> because of precedence

[20:05] * audreyt waves and goes back to sleep &

[20:06] <gaal> night :)

[20:06] * gaal hopes to dream of functors one day

[20:48] *** nothingmuch joined
[20:49] *** kanru joined
[20:54] *** mjl69 joined
[20:57] <gaal> any idea why the inferencer is expecting [(Int, Int)] when I deal with flattened hashes?

[20:59] <gaal> ahhhh my bad

[20:59] <gaal> it thought I was currying with the recursion guard

[21:03] <avar> does p6 confess == p5 Carp::confess?

[21:04] <gaal> There's a Carp::longmess in the Prelude. did someone add confess?

[21:04] <gaal> ?eval confess "I don't know"

[21:04] <evalbot_8586> Error: No such method in class Str: "&confess" 

[21:05] <avar> I was under the impression that the whole croak/confess stuff was std & imported by default

[21:06] <gaal> avar: everything in the prelude is str and imported by default, but I don't know whether confess there :)

[21:06] <gaal> longmess is.

[21:06] *** dduncan joined
[21:07] *** hugues23 joined
[21:08] <gaal> avar: just looked. no, there's only longmess defined. you're invited to add the others :)

[21:09] <avar> ;)

[21:09] <avar> what file is it?

[21:11] <gaal> src/perl6/Prelude.pm

[21:36] <gaal> hmmm, "No instance for (HashClass Val) arising from use of `hash_fetch'"

[21:36] * gaal eyes Pretty

[22:11] *** vel__ left
[22:26] *** anatolyv joined
[22:27] <el22> is now known as anatolyv

[22:27] <natoly> is now known as mel222

[22:28] <leo> obra: ping

[22:28] <obra> hey

[22:28] <leo> hi

[22:28] <obra> <- still in spain, a bit sick :/

[22:28] <obra> What's up?

[22:28] <leo> recent #parrotsketch logs seem to be not really enough public

[22:29] <obra> nod. the bot failed somehow

[22:29] <obra> chromatic sent me logs to post

[22:29] <obra> I've been harassing tpf people to get them featured somewhere

[22:29] <obra> perhaps I hsould talk to coke instead

[22:30] <leo> put em on use.perl.org or - yes forward to Coke

[22:46] <gaal> hey anatolyv, didn't notice you stepping in

[22:46] <gaal> openfoundry is acting up :(

[22:49] <anatolyv> hey

[22:49] <svnbot6> r8587 | gaal++ | Data.Yaml.Syck: broken support for hash emitting; thinks hashes are

[22:49] <svnbot6> r8587 | gaal++ | lists of pairs.

[22:49] <svnbot6> r8587 | gaal++ | Lots of trace prints left in the code till I figure this out.

[22:58] <stevan> obra: ping

[22:59] <stevan> http://planetsix.perl-foundation.org/ has gone a bit wonky

[23:00] <stevan> (IIRC this was something you were doing, if not ignore me)

[23:00] * stevan &

[23:10] <gaal> If anyone wants to give the yaml stuff a moose, please do

[23:10] <gaal> I'm off to bed &

[23:13] *** DaGo joined
[23:30] *** lisppaste3 joined
[23:44] *** oylenshpeegul joined
