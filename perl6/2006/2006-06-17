[00:38] *** nnunley joined
[00:45] *** clkao joined
[00:45] *** helix6 joined
[00:49] *** nnunley joined
[00:54] *** helix7 joined
[00:54] *** helix7 left
[00:54] *** helix7 joined
[00:57] *** helix7 left
[00:57] *** helix7 joined
[00:57] *** helix7 left
[00:58] *** helix7 joined
[00:58] *** helix7 left
[00:58] *** helix7 joined
[00:59] *** helix7 left
[00:59] *** helix7 joined
[00:59] *** helix7 left
[00:59] *** helix7 joined
[00:59] *** helix7 left
[01:36] *** nothingmuch joined
[01:57] *** frederico joined
[02:05] *** justatheory joined
[02:32] *** buu joined
[03:01] *** buu joined
[03:05] *** ArthurBrazil joined
[03:05] *** justatheory joined
[03:10] *** buubot joined
[03:20] *** buubot joined
[03:32] *** buubot joined
[04:02] *** buubot joined
[04:17] *** SamB joined
[04:43] *** buubot joined
[05:02] <svnbot6> r10726 | cmarcelo++ | * Judy.Map: fromList and toList

[05:22] <pasteling> "cmarcelo" at 200.232.236.25 pasted "IHash using Judy.Map (not working yet)" (133 lines, 5.3K) at http://sial.org/pbot/17791

[05:26] <cmarcelo> audreyt: take a look at the paste when you have time. Judy.Map is working already, I was playing with Pugs code but didnt get too far. About CollectionM/MapM stuff I'm working on that, I'm thinking about simplifying a little the classes (in particular, integrate the necessary methods from Foldable in original CollectionsM), at least for now.

[05:29] <audreyt> k. I just woke up

[05:29] <audreyt> give me some mins

[05:31] <cmarcelo> ok

[05:33] <audreyt> what original CollectionsM?

[05:33] <cmarcelo> ops

[05:34] <cmarcelo> s/M//

[05:34] <cmarcelo> Collection is child of Foldable, i was thinking by now just defining CollectionM (and take necessary methods from foldable)..

[05:35] *** buubot joined
[05:36] <audreyt> maybe even just implement Foldable and Transversable?

[05:37] <audreyt> hm, bad idea

[05:37] <audreyt> need to have -M suffix and restrict to IO

[05:37] <audreyt> so nvm

[05:37] <audreyt> CollectionM sounds indeed correct

[05:40] <cmarcelo> i wasn't clear: Collection is "child" of Foldable. I'm thinking of doing CollectionM as "orphan".. not defining FoldableM and TransversableM, at least for now.

[05:42] *** amnesiac joined
[05:44] <audreyt> yup.

[05:45] <audreyt> but if you reuse method names such as mapM fmapM mapM_

[05:45] <audreyt> then that's going to clash

[05:45] <audreyt> but maybe that's okay. not sure, my brain havn't woken up yet

[05:47] <cmarcelo> hmm, original collections already clashes with prelude..

[05:49] <cmarcelo> well, there's always "import qualified"..

[06:05] <gaal> morning all

[06:06] <audreyt> hey gaal

[06:06] <audreyt> food, be back in ~30min, then I'll look at releng related items such as emit_yaml

[06:07] <audreyt> my plane leaves at 5:20pm so that gives me ~7hr of pugswork time

[06:09] <gaal> your coming flight brings you to redmond?

[06:09] <audreyt> to taiwan

[06:09] <audreyt> I sleep one night there

[06:09] <audreyt> then immediately fly to redmond.

[06:09] <audreyt> jet lag is going to be fun

[06:10] *** buu joined
[06:10] <gaal> yeah, i can imagine :/

[06:12] *** buubot joined
[06:52] *** bjoern_ joined
[07:09] <audreyt> back from breakfast but going to nap a bit first...

[07:20] <cmarcelo> audreyt: (take a nap first, read later) [context: Judy.Map as IHash impl.] there are places (reducePad in Eval.hs) that use newObject, which may create a new IHash (so it depends on IO monad), but reducePad somehow complains about this. maybe is the liftSTM before the call, dunno. [cf. my last paste in pbot, outdated code but gives the idea].. any idea how to get off this? or am i messing more code than needed?

[07:22] <cmarcelo> i'm going to sleep now. (i read irc logs on web, so it's ok to reply even when i'm off)..

[07:22] <cmarcelo> &

[07:28] *** Aankhen`` joined
[07:30] *** carbon joined
[07:31] <carbon> i will now proceed to ask a question i'm sure is on every faq

[07:31] <carbon> *ahem*

[07:31] <carbon> any estimations on when perl6 will be ready and released?

[07:35] <audreyt> by christmas.

[07:35] <carbon> of this year?

[07:36] <audreyt> that we don't know. :)

[07:37] <audreyt> a zeroth estimation is something alpha or beta quality this year, and a more feature-complete by next christmas, but it varies depending primarily on how many help we get.

[07:41] *** LCamel joined
[07:44] *** Soga joined
[07:44] *** tcliou joined
[07:48] *** |mjk| joined
[07:49] *** bernhard joined
[08:26] *** lisppaste3 joined
[08:37] *** trym_ joined
[08:55] *** larsen joined
[09:08] *** iblechbot joined
[09:16] *** penk joined
[09:19] *** Aankh|Clone joined
[09:20] *** lisppaste3 joined
[09:32] *** mj41_ joined
[09:40] *** bjoern_ joined
[09:55] *** diablo` joined
[10:09] *** chemaja joined
[10:27] *** nothingmuch joined
[10:32] *** diablo`` joined
[10:32] *** diablo`` left
[10:34] *** chris2 joined
[11:13] *** drbean_ is now known as drbean

[11:31] *** buetow joined
[11:54] *** weinig joined
[12:00] <audreyt> ...and I slept well past checkout time, only have 1hr to work now

[12:00] <audreyt> fixed PGE::Hs to support adverbs

[12:01] <audreyt> and corrected captures; emit_yaml next

[12:03] <wolverian> sleeping is good

[12:05] *** DaGo joined
[12:09] *** szbalint joined
[12:24] <audreyt> :s and :sigspace added to PGE

[12:24] <audreyt> now working on the pugs side bridge

[12:28] *** penk joined
[12:30] <gaal> I've been meaning to merge genParseYAML and genParseHsYAML a little more

[12:32] <audreyt> oh cool

[12:33] <wolverian> heh, chmod -x chmod # oops

[12:34] <audreyt> perl -e 'chmod'

[12:34] <audreyt> to the rescue

[12:34] <wolverian> hehe :)

[12:35] <gaal> lol

[12:46] *** elmex joined
[12:47] <audreyt> ok, gotta run to airport now. bbiab

[12:48] <svnbot6> r10727 | audreyt++ | * Pugs.Parser: start parsing for "rule" and "token" specific adverbs.

[12:50] *** marmic joined
[13:03] *** cognominal_ joined
[13:06] *** dolmen joined
[13:10] <nothingmuch> seen ingy?

[13:10] <jabbot> nothingmuch: ingy was seen 18 hours 13 minutes 53 seconds ago

[13:10] <nothingmuch> hmm

[13:10] <nothingmuch> audreyt: can i bug you about Module::Compile?

[13:11] <gaal> nothingmuch: 15:47 < audreyt> ok, gotta run to airport now. bbiab

[13:11] *** dolmen joined
[13:11] <nothingmuch> oops

[13:12] <gaal> I need help loosening this signature (or rank-2ing it or something):

[13:12] <nothingmuch> ingy: ping?

[13:12] <gaal> doGenParseYAML :: YAML a => (a -> IO b) -> Eval Val

[13:13] <gaal> I'm getting the error: Couldn't match the rigid variable `a' against `CompUnit' `a' is bound by the type signature for `doGenParseYAML'

[13:13] <gaal> so without grokking what I'm doing, I try

[13:13] <gaal> doGenParseYAML :: forall a. YAML a => (a -> IO b) -> Eval Val

[13:13] <gaal> but that gives the simple

[13:13] <gaal> Not in scope: type variable `b'

[13:14] <gaal> The task is higher-ordering the nearly identical genParseHsYAML, genParseYAML

[13:14] <gaal> which only differ in toYamlNode / showYaml respectively

[13:15] <gaal> which weirdly are

[13:15] <gaal> YAML a => a -> IO YamlNode and

[13:15] <gaal> YAML a => a -> IO String

[13:18] <gaal> come to think of it how did the CompUnit -> IO VStr work in the original?

[13:34] *** myavuzselim joined
[13:35] *** myavuzselim left
[13:52] *** visq joined
[13:54] *** visq joined
[14:08] *** FurnaceBoy joined
[14:20] <lumi> gaal: try  "forall a b. YAML a => etc.  " ?

[14:20] *** Ymmv joined
[14:20] <lumi> Quantifying explicitly over b

[14:22] *** jsiracusa joined
[14:25] <mj41_> hello

[14:25] <mj41_> Compiling Pugs.Prim        ( src/Pugs/Prim.hs, dist\build\src/Pugs/Prim.o )

[14:25] <mj41_> ghc.exe: internal error: update_fwd: unknown/strange object  0

[14:25] <mj41_>     Please report this as a bug to [email@hidden.address]
[14:25] <mj41_>     or http://www.sourceforge.net/projects/ghc/

[14:25] <mj41_> Preprocessing library Pugs-6.2.12...

[14:25] <lambdabot> Title: "SourceForge.net: The Glasgow Haskell Compiler"

[14:26] <mj41_> Building Pugs-6.2.12...

[14:26] <mj41_> Build failed: 65024 at util\build_pugs.pl line 96.

[14:31] *** justatheory joined
[14:36] *** Limbic_Region joined
[14:41] *** weinig is now known as weinig|coffee

[14:44] <nothingmuch> http://nothingmuch.woobling.org/Module-Compile-TT/

[14:44] <lambdabot> Title: "Index of /Module-Compile-TT"

[14:45] <gaal> mj41_: how much RAM do you have? can you vi config.yml and increase heap?

[14:46] <gaal> mj41_: you need to perl Makefile.PL after you do that.

[14:46] <gaal> lumi: that doesn't help.

[14:46] <gaal> lumi: when I remove the sig altogether I get an error that makes complete sense to me

[14:46] *** mako132_ joined
[14:47] <gaal> saying that you can't take a compUnit and turn it into a VStr

[14:47] <gaal> if it said you can't take a YamlNode and turn it into a VStr I'd also agree.

[15:03] *** ludan joined
[15:10] *** weinig|coffee is now known as weinig

[15:17] <visq> overview question: is it by purpose that some things like the triangular comma are mentioned in the synopsis but neither implemented nor test-cased ?

[15:18] <visq> how to find out what behaviour is intended eventually ?

[15:35] <TimToady> visq: by necessity, things are specced before they are implemented, and often poorly specced before they are tested to see what the actual interactions are.

[15:36] <TimToady> and we're all just volunteers, so often things get specced speculatively long before they're tested or implemented.

[15:38] <TimToady> with something like triangular comma, it's not at all clear what the exact semantics should be yet.  It's just a syntax that falls out of the other triangular infixes.  But the spec is just saying it's available to make it mean something useful maybe.

[15:38] <visq> Ok. Is there another obvious link between the synopses and the implementation other than the L<S?? tags ?

[15:39] <visq> Has someone tried to annotate the synopses with test results based on those tags ?

[15:39] <visq> Found it a bit hard to find out what actually works right now

[15:39] *** soisoisoi joined
[15:40] <TimToady> have you seen http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl?

[15:40] <lambdabot> Title: "Pugs Smoke Reports"

[15:42] <visq> Yes, already did that and it's very nice. But not directly linked to the Spec.

[15:42] <visq> I think

[15:42] <gaal> actually, it is, though we could use help with making the links richer.

[15:42] <TimToady> occasionally some of the tests link back to the spec, but there's nothing official

[15:42] <gaal> look for example in undef.t

[15:42] <gaal> scroll until you see a link and follow it

[15:43] <TimToady> part of it is simply that the specs aren't as well structured as they would be if we were designing, say, Ada.

[15:44] <TimToady> part of it is simply that volunteers aren't generally into that kind of accountability.

[15:44] <TimToady> and like POD, we make it easy for people to contribute, even if it's suboptimal in various ways.

[15:45] <TimToady> but as gaal sez, we'll take help wherever it's offered :)

[15:45] <TimToady> even if it's actually improving things. :)

[15:45] <gaal> visq: specifically to make this better, the'res magic in place that lets you do it w/o needing to edit the synopses

[15:46] <gaal> put a L<S> link in the test file, even to arbitrary places in the middle of a paragraph of the spec

[15:46] <visq> I think it wouldn't be that hard to inject the relevant test results into the synopses .pod files

[15:47] <gaal> visq: commits very, very welcome. we can do something like FIT

[15:47] <TimToady> well, I don't know how many people would actually be interested in reading that, but certainly we could check coverage by backlinking.

[15:48] <TimToady> FIT?

[15:48] *** bjoern_ joined
[15:48] <gaal> it's a way of embedding tests inside spec docs

[15:48] <gaal> Ran Eilam gave a talk on doing it with Perl and MS Word in OSDC

[15:49] <TimToady> seems like a good way to discourage people from reading the specs, but probably there can be multiple ways to view the specs.  :)

[15:49] *** penk joined
[15:49] <gaal> see http://search.cpan.org/~ingy/Test-FIT-0.11/lib/Test/FIT.pm

[15:49] <lambdabot> Title: "Test::FIT - A FIT Test Framework for Perl - search.cpan.org"

[15:49] <TimToady> thanks

[15:50] <gaal> well, it is one way to read the spec and know "is this implemented? is this tested?"

[15:50] <visq> thanks too.

[15:51] *** penk joined
[15:51] <gaal> visq: is this something you could be interested in looking into?

[15:51] <gaal> look at the smoke target and util/catalog_tests.pl

[15:53] <visq> ahh, I see

[15:54] <TimToady> don't let what I said earlier discourage you.  good tools will motivate people to improve their cross-linkages if they can see pretty colors.

[15:56] <TimToady> which reminds me, someone should put a "key" into the TAP matrix that explains what the various colors actually mean...

[15:57] <TimToady> and I think it's a bit disengenuous to make "todo" items dark green...

[15:58] <TimToady> purple, maybe...

[15:58] <visq> maybe you know: make smoke does not generate the linked files like $PUGS_HOME/t/builtins/strings/length.html

[15:58] <visq> for me

[15:58] <gaal> someone should. till it's there: disengenuous dark green = todo; light green = OK; red = fail; yellow = unexpected success

[15:59] <TimToady> I'm still not entirely sure what white means...  Untested on this architecture?

[15:59] <gaal> skipped

[16:00] <gaal> visq: perl util/catalog_tests.pl > /dev/null

[16:03] <TimToady> but in a real sense, the test suite is becoming the specification.  The S* are really intended primarily to just be deltas from Perl 5, whereas the test suite needs to be complete.

[16:04] <TimToady> that's why it makes more sense to do the links from the testing end.

[16:04] <visq> gaal: Didn't finish successfully. Says it cannot find /home/eric256/../code.tmpl :)

[16:04] <visq> Will look at it later

[16:05] <gaal> TimToady: one concern I have with that now that pugs has a lot of language working already, the tests use pretty expressive Perl

[16:05] <TimToady> yep

[16:05] <gaal> a new implementation will have to work hard till it can reuse our tests.

[16:06] <TimToady> nod

[16:06] <visq> TimToday: A test suite is no full spec, right ? And reading the Haskell code is a bit of a burden

[16:06] <TimToady> I remember writing the original TEST program in a very limited subset of Perl 1.  :)

[16:06] <gaal> anyone remember where CPANPLUS keeps its global config?

[16:06] <gaal> :)

[16:07] <TimToady> The test suite *can* be a spec if it's complete enough, I think.  We're nowhere near that yet, of course.

[16:08] <TimToady> but I don't know what "full spec" means.  a spec is not a container that be filled. :)

[16:08] <TimToady> s/be/can be/

[16:09] <visq> Well, no one wants a *formal* spec, right (a bit hard to do as well)

[16:09] <TimToady> I think the government defines full specs to be ones that break the scales you weight them on.

[16:09] <TimToady> the problem with writing a formal spec is that you have to be omniscient to write one.

[16:10] <visq> Still, I like the test suite, but it is not the best way to get started (synopses on the other hand give a good overview picture)

[16:10] <TimToady> we're going for a more evolutionary approach, so the test suite is as formal as it gets.

[16:10] <TimToady> at least the spec is not the C code, like it is with Perl 5.

[16:10] <visq> Well, the semantics of the haskell core, should you dare to think about it, is kind of a formal spec

[16:11] <TimToady> I think thinking about that too hard would damage me as a "language designer for the people" :)

[16:11] *** amnesiac joined
[16:11] <TimToady> I rely on smarter people to do that.

[16:12] <TimToady> I love all the semantic feedback I get from the Haskell implementation though.

[16:13] <TimToady> and I don't mind other people bugging me about areas where I think fuzzily, since that's basically all of 'em.

[16:15] <visq> concerning util/catalog_tests.pl: Has anyone run this besides erik256 ? His home directory is hard-coded ;)

[16:16] <gaal> it's on feather.. fixing

[16:16] <TimToady> that's what symlinks are for  ;p

[16:17] <gaal> or relative paths :)

[16:18] <TimToady> them's is too hifalutin' fer the likes o' myself

[16:18] <cognominal_> WHO THERE triangular comma was close to googlewhack

[16:19] <gaal> I wonder whatever did happen to eric

[16:27] <gaal> fixed.

[16:27] <svnbot6> r10728 | gaal++ | * unbreak util/catalog_tests.pl by keeping the start path around when looking for the templates

[16:28] *** visq_in_lederhos joined
[16:29] <TimToady> you fixed eric?

[16:30] <gaal> ah fixed 'im, all right

[16:30] <gaal> hmm, it used to be that the cataloger painted lines in the tests' HTML according to the test result. I wonder what happened to that too

[16:31] <gaal> maybe it eloped with eric

[16:31] <visq_in_lederhos> gaal: catalog_tests.pl needs to be rewritten, propably

[16:31] <gaal> how come?

[16:32] <visq_in_lederhos> 1. sorry for the nick, my desktop crashed again

[16:32] <visq_in_lederhos> 2. the referenced svn repo now has another layout http://svn.perl.org/perl6/doc/trunk/

[16:32] <lambdabot> Title: "Revision 9686: /doc/trunk"

[16:33] <visq_in_lederhos> my fault

[16:34] <visq_in_lederhos> weird command line argument handling though

[16:35] <gaal> we can fix the command line handling w/o needing to rewrite the whole thing :)

[16:35] <gaal> by all means, hack on adding Getopt::Long to that though

[16:35] <gaal> got a commit bit?

[16:35] *** lisppaste3 joined
[16:36] <visq_in_lederhos> Ahh, it worked now

[16:37] <visq_in_lederhos> gaal: commit bit ?

[16:37] <gaal> can you check in patches to pugs?

[16:38] *** lollan joined
[16:38] *** nperez joined
[16:38] <visq_in_lederhos> I don't think so

[16:38] <gaal> please send me your email, that'll change in a jiffy

[16:39] <gaal> hmm, it's marking everything as 'non_test', that's why the colors are wrong.

[16:44] <gaal> visq_in_lederhos: didn't get an email yet, if you aren't registered in freenode you can't send /msgs

[16:48] *** FurnaceBoy joined
[16:54] *** visq_in_lederhos is now known as visq

[16:58] <visq> \msg gaal :works now ?

[17:02] *** shachaf joined
[17:04] *** cmarcelo left
[17:04] <gaal> visq: invitation on its way to you. welcome aboard, and please update AUTHORS with your name :)

[17:06] <gaal> hey has anyone been using spork lately? its support for images seems broken all of a sudden

[17:06] <gaal> I have {image: localfile.jpg} and it isn't generating HTML for it

[17:06] <gaal> I'm pretty sure this used to.

[17:07] <gaal> ingy about?

[17:08] <nothingmuch> if you find him i need him too

[17:09] <nothingmuch> http://search.cpan.org/~nuffin/Module-Compile-TT-0.01/lib/tt.pm#TODO

[17:09] <lambdabot> Title: "tt - Preprocess Perl code with Template Toolkit and Module::Compile. - search.cp ..."

[17:09] <pasteling> "cmarcelo" at 200.232.236.25 pasted "IHash using Judy.Map (not working yet)" (133 lines, 5.3K) at http://sial.org/pbot/17801

[17:09] <nothingmuch> urf lambadbot

[17:09] <gaal> actually I like that feature

[17:10] <gaal> lowers pain of context switches

[17:10] <nothingmuch> i'm just not used to it yet, i guess

[17:10] * gaal mooses randomly

[17:10] <nothingmuch> ciao guys, bbl

[17:11] <gaal> bye nothingmuch

[17:12] *** cmarcelo joined
[17:15] *** trym_ is now known as trym

[17:19] <gaal> ah, solved the local image problem

[17:19] <gaal> i was sillily copying to slides/ and not to slides/images/

[17:31] *** Limbic_Region joined
[17:51] *** weinig is now known as weinig|out

[18:01] <kane__> gaal: global config is in CPANPLUS::Config

[18:02] <kane__> alternately, where you set $ENV{PERL5_CPANPLUS_CONFIG} to point to

[18:02] *** nperez joined
[18:15] *** nothingmuch joined
[18:15] <svnbot6> r10729 | lwall++ | Slaughter of :w/:words (the rx:w kind, not the q:w kind).

[18:20] *** weinig|out is now known as weinig

[18:22] *** mako132_ joined
[18:33] <ingy> nothingmuch, gaal: pong

[18:33] *** xpeed joined
[18:37] <nothingmuch> ingy: http://search.cpan.org/dist/Module-Compile-TT

[18:37] <lambdabot> Title: "&#1497;&#1493;&#1489;&#1500; &#1511;&#1493;&#1490;'&#1502;&#1503; / Module-Compi ..."

[18:37] <nothingmuch> please look at the TODO

[18:38] <nothingmuch> and comment on how i can improve on those features

[18:43] <nothingmuch> ingy: stevan suggested that I should ride bitch on your bike

[18:53] *** Aankhen`` joined
[19:05] *** penk left
[19:05] <gaal> ingy: I fixed my problem, never mind. just moose then

[19:05] <gaal> kane__: thanks

[19:17] *** bjoern_ joined
[19:34] *** weinig joined
[19:56] <ingy> nothingmuch: sure, you can be my bitch any time

[20:00] <nothingmuch> ingy: i'm more worried about Module::Compile though

[20:01] <ingy> nothingmuch: what about?

[20:01] <nothingmuch> did you look at the link?

[20:02] <ingy> what's the problem?

[20:02] <nothingmuch> well

[20:02] <nothingmuch> a. use foo var => 'bah' kinda sucks

[20:02] <nothingmuch> you have to eval the string afterwords

[20:02] <nothingmuch> and you can't use lexicals from that scope

[20:03] <nothingmuch> which is unintuitive

[20:03] <ingy> backup

[20:03] <nothingmuch> and b. you pmc_compile doesn't know what file/package/from line/to line it's filter

[20:03] <nothingmuch> ing

[20:03] <nothingmuch> it would be nice if those were passed in $_[1] along side $_[1]{use}

[20:03] <ingy> can you say this in the form of tests?

[20:03] <nothingmuch> a. not really

[20:04] <nothingmuch> b. yes, but those will be sucky tests

[20:04] <nothingmuch> a. is more of a please think about it thing

[20:04] <ingy> I really don't have the context at all

[20:04] <nothingmuch> well

[20:04] <ingy> or maybe I do

[20:04] <nothingmuch> my $var;

[20:04] <ingy> but I don't get it yet

[20:04] <nothingmuch> scratch that

[20:04] <nothingmuch> let's say i have a filter

[20:04] <nothingmuch> any filter

[20:05] <nothingmuch> use foo extra_files_filter_cares_about => glob("foo/bar/*.file");

[20:05] <nothingmuch> this is a nice to have thing

[20:05] <nothingmuch> but since everything after 'foo ' is treated as a string, i have to eval it myself in my filter

[20:05] <nothingmuch> which is not 100% safe

[20:05] <nothingmuch> is that intentional?

[20:05] <nothingmuch> is that avoidable?

[20:06] <nothingmuch> ?

[20:07] <ingy> not sure

[20:07] <nothingmuch> okay, please think about it and once you make a decision i promise tests

[20:07] <ingy> best to send me some cogent failing test

[20:07] <nothingmuch> urf

[20:07] <nothingmuch> but i don't know the right behavior

[20:07] * nothingmuch really hates this "send me a failing test" thing

[20:08] <nothingmuch> it only makes sense when it makes sense

[20:08] <ingy> just send a piece of code containing rm -fr /

[20:08] <ingy> that makes me see wtf you are talking about

[20:08] <ingy> I'm planning on hacking M::C today

[20:08] <ingy> so the timing is good

[20:09] <nothingmuch> well... uh

[20:09] <nothingmuch> i seriously don't know how to make this into a test

[20:09] <ingy> just send me some code that makes me see the problem

[20:09] <ingy> I'm just not getting it yet

[20:10] <ingy> but I haven't been in this code in months

[20:10] <nothingmuch> okay, i'll try

[20:10] <nothingmuch> but i can promise you it won't be clear

[20:10] <ingy> just something like

[20:11] <ingy> use tt files => 'system("rm *")';

[20:11] <nothingmuch> heh

[20:11] <ingy> is that what you are talking about?

[20:12] <nothingmuch> not exactly

[20:12] <nothingmuch> or, not so clearly

[20:12] <nothingmuch> do i have to provide the code for the filter?

[20:12] <ingy> dude, I'm just asking for a clear explanation of the problem

[20:13] <nothingmuch> one sec

[20:13] <ingy> pretend that I did't write M::C

[20:13] <nothingmuch> i'm writing

[20:13] <ingy> because at this point I don't even remember what it does

[20:13] <nothingmuch> okay

[20:13] <nothingmuch> i'm sorry, i may have assumed too much

[20:13] <ingy> right

[20:13] <nothingmuch> no jokes about makeup sex

[20:14] <ingy> :P

[20:14] <ingy> they say that's the best kind, but I'm a virgin so I wouldn't really know

[20:15] <pasteling> "nothingmuch" at 84.108.53.74 pasted "<3 ingy" (9 lines, 247B) at http://sial.org/pbot/17811

[20:16] <nothingmuch> ingy: is that clearer?

[20:16] <ingy> much

[20:17] <ingy> it's all coming back

[20:18] <ingy> I'll think more about it

[20:18] <nothingmuch> okay

[20:18] <nothingmuch> now, the second thing is that i'd like $params, in that example, to contain more keys

[20:18] <nothingmuch> like $params->{file}, $params->{package}, $params->{from_line}, $params->{to_line}

[20:19] <ingy> sub foo::pmc_string_args { 0 }

[20:19] <nothingmuch> $params->{file} is the file that 'use foo' was in, $params->package is the package it was in, etc

[20:19] <ingy> perhaps

[20:19] <nothingmuch> i don't really mind what the interface is

[20:19] <nothingmuch> perhaps even provide both

[20:19] <ingy> thing is I might not have access to the runtime values

[20:19] <ingy> I think that the way it is working now is mostly correct

[20:20] <ingy> but I'll try to give you what you want...

[20:20] <ingy> if it's possible

[20:20] <ingy> ideas welcome

[20:21] <nothingmuch> well

[20:21] <nothingmuch> it's not runtime

[20:21] <nothingmuch> i thin

[20:21] <nothingmuch> k

[20:21] <nothingmuch> these are only called once, right?

[20:23] <ingy> right...

[20:23] <nothingmuch> oh, also

[20:23] <nothingmuch> you can't do:

[20:23] <nothingmuch> use foo (

[20:23] <nothingmuch>     blah => "Baz",

[20:23] <nothingmuch> );

[20:23] <nothingmuch> which people sometimes do

[20:23] <ingy> ok

[20:25] <ingy> I don't know how to even run the params as an expression

[20:25] <nothingmuch> i did it using:

[20:25] <nothingmuch> s/^\s*use\s+tt\s*//

[20:25] <nothingmuch> and then eval

[20:25] <nothingmuch> which *really* stinnks

[20:26] <nothingmuch> but works for very simple things

[20:26] <Limbic_Region> ingy - did you see http://perlmonks.org/?node_id=554561

[20:26] <lambdabot> Title: "IO::All is sliced bread"

[20:26] <ingy> perl only calls the first use

[20:26] <Limbic_Region> if you have any unmarried sisters - I would look out

[20:26] <nothingmuch> ingy: oooohhhhhhh

[20:26] <nothingmuch> so use foo is source filtered

[20:26] <nothingmuch> instead of being an ->import trick?

[20:26] <nothingmuch> or rathedr

[20:26] <nothingmuch> the first time it's an import trick

[20:27] <nothingmuch> and every time after that it's a source filter?

[20:27] <ingy> Limbic_Region: praise for ingy code!!??

[20:27] *** FurnaceBoy_ joined
[20:28] <nothingmuch> you have a sisteR?

[20:28] <ingy> guy is obviously a moron

[20:28] <Limbic_Region> ingy - yes

[20:28] <Limbic_Region> "P.S. No, Brian Ingerson didn't pay me to say that, and I'm not married to his sister."

[20:28] <ingy> I need to redo that module sans Spiffy

[20:28] <ingy> Brian Ingerson is dead

[20:29] <ingy> Ingy 2.0 -- The T-Shirt

[20:30] <Limbic_Region> heh

[20:46] *** lde joined
[21:06] *** visq joined
[21:10] *** penk joined
[21:21] *** penk joined
[21:27] *** mako132_ joined
[21:39] * xpeed is away: Busy

[21:45] * xpeed is back (gone 00:05:38)

[21:50] <nothingmuch> ingy: want to reply to http://perlmonks.org/?node=556022?

[21:50] *** Ymmv joined
[21:50] <lambdabot> Title: "Not found"

[21:51] * marcus_ is bored

[21:51] <nothingmuch> err, http://perlmonks.org/?node_id=556022

[21:51] <lambdabot> Title: "Re: Module::Compile::TT"

[22:05] *** weinig is now known as weinig|bbq

[22:15] *** dolmen joined
[22:26] *** cognominal_ joined
[22:58] <svnbot6> r10730 | benedikth++ | * fixed command line handling (sanity checks, GetOpt-Long)

[22:58] <svnbot6> r10730 | benedikth++ | * added help message

[23:12] *** mako132_ joined
[23:23] *** justatheory joined
