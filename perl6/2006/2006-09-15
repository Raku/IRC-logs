[00:00] <rodi> gnuvince: that commit bit is the single most insidious bit in the multiverse :-D

[00:02] <rodi> ahh, my lady is home home with Indian food.  TTFN.

[00:03] <gnuvince> So, how does writing tests work?  I pick a section of a synopsis, write tests for that section (or improve those already existing)?

[00:05] <obra> gnuvince: that will certainly work. do you have a pugs checkout yet?

[00:05] <gnuvince> obra: it dates a couple weeks, I'm gonna update it and recompile.

[00:05] <gnuvince> obra: what happens if I write tests for something that doesn't exist yet?

[00:05] <obra> that's ok.

[00:06] <obra> that's one of the best ways to get new features implemented

[00:06] <obra> checking in failing tests for new features energizes some of pugs' developers.

[00:06] <gnuvince> ok

[00:06] <obra> around release time, they may be 'todo'ed, but don't let that stop you

[00:07] <gnuvince> todo means they can fail, but it's not marked as a failure?

[00:08] <markstos> rodi: I enjoyed your journal post!

[00:08] <obra> todo means they may fail, but that's because we know they're not done yet

[00:09] <markstos> gnuvince: since we are preparing for a release, please use :todo<feature> for unimplemented features

[00:09] <markstos> Here's an HTML version of the p6 Test.pm docs:

[00:10] <markstos> http://feather.perl6.nl/~markstos/Test.pm.html

[00:10] <lambdabot> Title: Test - Test support module for perl6, http://tinyurl.com/p2dor

[00:10] <gnuvince> markstos: thanks.

[00:11] <markstos> The structure of t/ roughly follows that of the Synopsis: try keep that pattern.  So, builtins  functions are spec'ed in Perl6/Spec/Functions.pod, aka "S29" and have tests in "builtins/"

[00:11] *** [particle] joined
[00:12] <markstos> (I'll avocate that it should be "Functions/" instead of builtins to match exactly, but that's a dicussion for another day).

[00:12] <markstos> test your test: prove6 my_test.t

[00:12] <markstos> (prove6 is in ./util )

[00:13] <markstos> And t/README is a good read, too.

[00:13] *** lumi_ joined
[00:16] <gnuvince> ok

[00:16] <svnbot6> r13316 | Darren_Duncan++ | incremented or decremented version numbers of my ext/ modules, brought Pugs' ChangeLog up to date regarding my modules

[00:19] <obra> rodi: ping

[00:23] <dduncan> now starting my first Pugs build since last month ...

[00:24] *** shasbot joined
[00:24] <svnbot6> r13317 | markstos++ | [t/operators/reduce-metaop.t]

[00:24] <svnbot6> r13317 | markstos++ |    New failing test:

[00:24] <svnbot6> r13317 | markstos++ |    sub prod ($x,*@xs) { return $x unless @xs; return $x * prod([,] @xs); } print prod(2,3,4);

[00:24] <svnbot6> r13317 | markstos++ |    Larry Wall and I thought the behavior seemed like a bug.

[00:24] <svnbot6> r13317 | markstos++ |    I wasn't which language feature has the bug, so I blamed it on [,] and stuck the test here.

[00:27] <TreyHarris> TimToady: In S01 diff just sent out, sentence "Mostly we're just a bunch ants" is missing article. :-)

[00:27] <TimToady> anything else?

[00:29] *** nekokak joined
[00:30] <obra>  TimToady++ # Doing the job I'm not ;)

[00:31] <obra>  TimToady: the year on the last-mod date is off by one

[00:31] <obra> also: poeple -> people

[00:32] <clkao> obra: would you like a commit bit ?

[00:32] <obra> to the synopses? I don't think that's under pugs control ;)

[00:33] <TimToady> obra++++ but too late. :)

[00:34] <TimToady> gotta run now... &

[00:34] <obra> *wave*

[00:34] <obra> thanks for that update  :)

[00:35] *** jferrero joined
[00:37] <markstos> Does Haskell have native reduction operators, like [*] ?

[00:37] <wolverian> fold[lr]

[00:37] <markstos> I know it's easy enough to work around them in Haskell, like: prod (x:xs) = x * prod(xs)   ( == [*] )

[00:38] <rodi> obra: pong

[00:38] <mauke> product = foldr (*) 1

[00:38] <obra> rodi: got your mail. we should chatter some time when I'm back home (after the 24th)

[00:38] <mauke> or maybe foldl' (*) 1

[00:38] <obra> I hadn't actually connected your irc nick to the guy I went to legal seafoods with ;)

[00:38] <markstos> What does the "1" do there ?

[00:38] <rodi> obra: sounds great- no rush on my part.  Enjoying my time off, prolly more than I should ;)

[00:39] <obra> Excellent. I'm jealous

[00:39] <mauke> markstos: it's what the empty list reduces to

[00:39] <markstos> Ah.

[00:39] <wolverian> TimToady, "Another aspect of this is [that?] the Perl 6 compiler will be self-hosting."

[00:39] <mauke> concat == foldr (++) []

[00:39] <wolverian> TimToady, (I'm not sure if it is a bug, but I couldn't parse it at first without the 'that'. maybe it's a bug in english.)

[00:43] <markstos> I was comparing the a little subroutine that does what [*] does in Perl5, Haskell and Perl 6. Perl 5 is pitifully verbose by comparison:

[00:43] <markstos> sub prod { my ($x,@xs) = @_; return defined @xs; return $x * prod(@xs); }

[00:44] <markstos> Perl 6 was an improvement, but Haskell looked the cleanest. :)

[00:47] <mauke> return defined @xs;?!

[00:48] <mauke> also, sub prod { List::Util::reduce { $a * $b } 1, @_ }

[00:48] <markstos> Oh. typo.

[00:48] <markstos> It worked before, but that version is broken.

[00:49] <markstos> Should have been:  return $x unless defined @xs;

[00:49] <mauke> why the hell are you using defined with an array?

[00:50] <markstos> Something tells me you strongly prefer another solution.

[00:50] <mauke> no, I prefer a solution

[00:50] <mauke> defined @array is not useful

[00:51] <mauke> (it's also deprecated)

[00:51] *** justatheory joined
[00:51] <markstos> which means the solution you prefer is...

[00:51] <mauke> if you mean return $x unless @xs, that's still broken because it should return 1 for an empty list

[00:51] <mauke> <mauke> sub prod { List::Util::reduce { $a * $b } 1, @_ }

[00:53] *** bsb joined
[00:53] <markstos> The reduce function itself uses the construct: return $x unless @xs >= 1; (basically)

[00:54] <mauke> yeah, but I'm passing an extra argument here

[00:54] *** justatheory_ joined
[00:54] <markstos> I can sense the extra argument in the room.

[00:54] *** justatheory_ joined
[00:55] *** justatheory_ joined
[00:56] *** justatheory_ joined
[00:59] *** justatheory joined
[01:02] *** justatheory joined
[01:18] <dduncan> compile of r13316 on my machine was successful

[01:22] <svnbot6> r13318 | markstos++ | [t/operators/reduce-metaop.t]

[01:22] <svnbot6> r13318 | markstos++ |     Two more failing tests, directly from the spec:

[01:22] <svnbot6> r13318 | markstos++ |     [*]() returns 1

[01:22] <svnbot6> r13318 | markstos++ |     [+]() returns 0

[06:51] *** ilogger2 joined
[07:09] *** zgh joined
[07:15] * gaal mooses

[07:20] <gaal> hahaha, today's wordsmith.org word of the day: vamoose

[07:20] *** zakharyas joined
[07:24] *** jferrero joined
[07:31] *** drrho joined
[07:36] *** f0rth joined
[07:39] *** f0rth joined
[07:42] *** hareldvd joined
[08:09] *** kane-xs joined
[08:18] *** pdcawley joined
[08:29] *** SuperL4g joined
[08:30] *** yuval joined
[08:31] <SuperL4g> yuval: got to re-extract the tree real quick. I logged out by mistake.

[08:32] <SuperL4g> yuval: you pointed out my screenshots already, I take it?

[08:33] <SuperL4g> www.linuxlooney.com/pugs_compile_process.png <-- that's where the process seems to hang

[08:33] <SuperL4g> www.linuxlooney.com/top.png <-- that's self-explanatory

[08:38] *** ruoso joined
[08:39] *** b00t joined
[08:47] *** ludan joined
[08:54] *** SuperL4g joined
[08:56] *** kisu joined
[08:59] <SuperL4g> yuval: trying again, and I can already see >4 ghc processes spawned

[08:59] <SuperL4g> I'm sorry... make that =4

[09:03] *** xern joined
[09:06] <yuval> SuperL4g: i have =4, too (and it compiles fine here)

[09:07] <SuperL4g> yuval: do you get past the stage where mine seems to stop?

[09:07] <yuval> SuperL4g: but they are killed/respawned pretty quickly :)

[09:07] <yuval> not yet, SuperL4g, hold on :)

[09:09] <yuval> SuperL4g: oh, oops, i did. went pretty smoothly :)

[09:33] <ruoso> audreyt, once I saw some slides you made about jifty... do you still have them?

[09:40] <gaal> yuval, SuperL4g: does gentoo have any patches to pugs' Makefile.PL?

[09:40] <gaal> SuperL4g: could you try with a checkout from HEAD?

[09:41] <gaal> make sure no ghcs are running before you start.

[09:42] <SuperL4g> yuval: you would know this better than I, since this is my first time doing anything with perl6

[09:45] <gaal> SuperL4g: svn co http://svn.openfoundry.org/pugs ; cd pugs ; perl Makefile.PL && make fast

[09:45] <lambdabot> Title: Revision 13324: /

[09:46] *** penk joined
[09:48] <yuval> gaal: yes, we patch Makefile.PL (i think i reported this problem here a few times in the past?)

[09:48] <gaal> yuval: the patch you sent me via IM doesn't look like it can cause the GHC problem.

[09:49] <yuval> but we just turn my $build_dir = $ENV{PARROT_PATH}; (because the build dir reported by parrot-config is all wrong when compiled in Gentoo)

[09:49] <yuval> gaal: i know :)

[09:49] <yuval> gaal: fwiw, many people managed to emerge pugs using the same ghc/parrot versions, so it's weird...

[09:50] <gaal> yuval: I have to leave again, but if you want to just go ahead and patch pugs' makefile go ahead

[09:50] <gaal> (re the gentoo patch)

[09:50] <gaal> if it makes sense on non-gentoo ssytems, that is

[09:51] * gaal mooses off &

[09:51] *** kanru joined
[09:51] <yuval> it doesn't... :)

[09:51] *** pdcawley joined
[09:57] <yuval> when co from HEAD, it gets stuck a tiny bit later: Compiling Data.ByteString  ( ./Data/ByteString.hs, dist/build/Data/ByteString.o )

[09:58] <yuval> one ghc-6.4.2 process is at 99.5% CPU :(

[10:16] *** elmex joined
[10:32] *** iblechbot joined
[10:55] *** buetow joined
[11:25] *** autark joined
[11:46] *** mako132_ joined
[11:53] *** pdcawley joined
[12:13] <audreyt> ruoso: yes, they are part of jifty now

[12:13] <lambdabot> audreyt: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:13] <audreyt> doc/talks/oscon.2006.xul

[12:13] <obra> morning

[12:14] <audreyt> ruoso: http://svn.jifty.org/svn/jifty.org/jifty/trunk/doc/talks/oscon.2006.xul

[12:14] <audreyt> hi obra

[12:14] <lambdabot> http://tinyurl.com/h3mtw

[12:14] <audreyt> lambdabot: @messages

[12:14] <lambdabot> putter said 14h 48m 1s ago: Is there a vision for how Prelude.pm is going to evolve? It seems there is no way to define globals but "is builtin", which seems to have the unfortunate sideeffects of

[12:14] <lambdabot> ripping things out of their defining module, and making multis non-multi.

[12:14] <audreyt> mmm.

[12:15] <audreyt> @tell putter indeed. will think about it.

[12:15] <lambdabot> Consider it noted.

[12:15] <gaal> audreyt: yo. what would be the least painful way of getting ~ newval to dispatch?

[12:16] <gaal> (rather than be folded to "CCall" ++ etc.?

[12:16] <gaal> )

[12:17] <gaal> ..I don't want the new parsers to wrap their results in Val . VV, though supposedly that would work

[12:17] *** norageek joined
[12:18] <audreyt> that seems like the best way actuall.

[12:19] <gaal> aw :(

[12:19] <audreyt> write a retVV helper perhaps?

[12:19] *** Limbic_Region joined
[12:20] <gaal> oh wait! return $ Val $ VV $ val $ case inv of ....

[12:20] <gaal> it already is an oldval

[12:21] <gaal> so we must either give up on that CCall dumper or maintain a list of safe methods to dispatch to

[12:24] <audreyt> the ccall dumper was transient anyway

[12:25] <audreyt> it's intended to delegate to the ResponderInterface

[12:25] <audreyt> which will then lookup a concrete Method objec t from a MethodTable

[12:26] <audreyt> # http://nothingmuch.woobling.org/MO

[12:26] <lambdabot> Title: Index of /MO

[12:26] <gaal> oh cool

[12:27] <gaal> with is moose for does, right?

[12:27] <gaal> sorry, "with" is Moose.pm for "does", right?

[12:29] <gaal> anyway, I gotta go once again. back in 7h or so.

[12:35] <audreyt> okie

[12:36] <audreyt> with is moose for does yes.

[12:36] * audreyt triages on

[12:37] <audreyt> @pl \x y z -> x ++ (y ++ z)

[12:37] <lambdabot> (. (++)) . (.) . (++)

[12:37] <audreyt> @pl \x y -> moose ++ ( x ++ y)

[12:37] <lambdabot> ((moose ++) .) . (++)

[12:38] *** prefiks joined
[12:43] *** avarab joined
[12:45] <svnbot6> r13325 | audreyt++ | * Parse for siglets:

[12:45] <svnbot6> r13325 | audreyt++ |     :($, $, &)

[12:47] *** zeriod joined
[12:59] *** agentzh joined
[13:02] *** pdcawley joined
[13:07] <zeriod> what is the difference between http://svn.perl.org/perl6/pugs/ and http://svn.openfoundry.org/pugs/ ?

[13:07] <lambdabot> Title: Revision 11986: /pugs

[13:08] <obra> svn.perl.org is a mirror of svn.openfoundry.org (for pugs)

[13:09] <audreyt> the first is readonly and the second is readwrite

[13:10] <audreyt> zeriod: want a commit bit? :)

[13:10] <zeriod> ok

[13:10] <audreyt> your email?

[13:10] <zeriod> i was going to help with the test smarklinks

[13:10] <zeriod> i dont know how to use svn though yet

[13:13] <audreyt> that's fine, http://search.cpan.org/dist/Perl6-Pugs/lib/Pugs/Doc/Hack.pod has a quickstart

[13:13] <lambdabot> Title: Pugs::Doc::Hack - How to hack on Pugs - search.cpan.org, http://tinyurl.com/nnepz

[13:13] <audreyt> what's your email address? :)

[13:14] <zeriod> send you a pm

[13:15] <kolibrie> hmm, I'm trying to bring my pugs up-to-date, but on r12102 am getting the svk pull error: Incomplete data: Delta source ended unexpectedly

[13:17] *** pdcawley joined
[13:18] <[particle]> kolibrie: it may require an upgrade of SVN::Mirror

[13:18] <[particle]> 0.70 is latest iirc

[13:20] <kolibrie> looks like I have SVN::Mirrir 0.68

[13:22] <audreyt> zeriod: sorry, was disconnected

[13:22] <audreyt> welcome aboard! add your name to AUTHORS as your first commit :)

[13:22] <audreyt> after "svn co http://svn.openfoundry.org/pugs", edit the AUTHORS file, and then "svn ci AUTHORS".

[13:25] *** dakkar joined
[13:35] <kolibrie> [particle]: upgrading SVN::Mirror to 0.70 seems to have worked.  Thank you.

[13:36] <[particle]> clkao++

[13:36] <kolibrie> indeed

[13:36] *** vel joined
[13:37] *** lanny joined
[13:39] <lanny> gaal or  audreyt: any guidance on extracting the isof of a sub using a Siglist and .signature?  Trying to implement  sort() and KeyExtractor uses that info.

[13:40] <lanny> Well... I think it uses that info.  Spec could be interpreted as checking the type on the return value but that doesn't have to be a single type.

[13:40] <audreyt> lanny: it's still unspecced that .signature would actually return isof

[13:41] <audreyt> it's possible that .returns returns naother signature

[13:41] <lanny> I was thinking .returns might be the inner return

[13:41] <audreyt> nod

[13:42] <lanny> I know it's unspecced which is why I am looking for  guidance rather than "the answer".

[13:42] <lanny> Right now I just check the type of the returned val and play with that.

[13:42] <audreyt> I think that's safest right now

[13:42] <audreyt> I think it boils down to whether

[13:42] <audreyt> my $sig = :(Int --> Int)

[13:42] <lanny> Ok.  Guess it's time for  me to learn some more  Haskell and make the whole  thing work then.

[13:43] <audreyt> makes any sense

[13:43] <audreyt> lanny: woot!

[13:44] <audreyt> it's more complicated for perl6 as we allow multiple, even named, return values

[13:45] <lanny> Well.  Nobody ever said it was  gonna be easy.  :)

[13:45] <audreyt> yeah :)

[13:45] <lanny> my $sig = :(Int -> :(Int, Rational $phi))

[13:45] <lanny> oops.  -->

[13:46] <audreyt> if we allow that, then .signature encompasses both sides of

[13:46] <audreyt> the function type

[13:46] <audreyt> so you'd need to say

[13:47] <audreyt> .signature.out

[13:47] <audreyt> .signature.in

[13:47] <lanny> But .signature is a Siglist.  Siglist itself could have attributes .params, .returns, .isof

[13:47] <audreyt> yes but what is the type of .params?

[13:47] <audreyt> SimpleSignature?

[13:47] <audreyt> FirstOrderSignature?

[13:48] *** marmic joined
[13:48] <lanny> heh.  Would love to just say Siglist again but that's not gonna do it

[13:48] <audreyt> right.

[13:48] <audreyt> well, we can say it's a subset of signature

[13:48] <audreyt> but it feels very nonclean

[13:49] <audreyt> I'd rather have Signature to be --> free, and have Code to have three Signature on it.

[13:49] <lanny> agreed

[13:49] <audreyt> and --> in declaration position is just shorthand to define isof

[13:49] *** enantiodrome joined
[13:49] <audreyt> and in :() literals it is bogus.

[13:49] <lanny> also agreed

[13:49] <lanny> Not sure I agree

[13:50] <audreyt> but what would be the type of :(Int --> Int) then?

[13:50] <audreyt> a CodeSignatureSet ?

[13:50] <lanny> my $func;  my $sig = :(Int --> Int);  $func is $sig;

[13:50] <lanny> $func ~~ $sig;

[13:50] <lanny> Probably more useful

[13:50] <audreyt> not really

[13:51] <audreyt> $func is $sig is outside spec a lot

[13:51] <lanny> Although $func.signature.isof ~ $sig gets there easier

[13:51] <audreyt> since isTrait is named

[13:51] *** enantiodrome left
[13:51] <lanny> ah gotcha

[13:51] <audreyt> sub f is signature(...)

[13:51] <audreyt> is canonical

[13:51] <audreyt> so I think &code.signature, &code.of, &code.returns

[13:51] <audreyt> is easiest (and makes slot allocatio agree with trait label)

[13:52] *** cjeris joined
[13:52] <audreyt> &code.of ~~ Int

[13:52] <audreyt> is not bad at all.

[13:53] <lanny> &code.of ~~ :(Str, Num, @x);

[13:53] <lanny> Also not too bad.

[13:54] <lanny> Not sure about mixing typed and untyped.  So used to systems that are all one or all the other.,

[13:54] <lanny> Ok.  Thanks for the guidance.  I'll use &code.of ~~ as the leading possibility.

[13:56] <audreyt> 'k. a S06 diff to p6l would also be much appreciated :)

[13:56] *** stclare joined
[13:57] <lanny> Ok.  Will do.  Gotta take my girls to school and start the day right now.

[13:57] <audreyt> yay!

[13:57] * audreyt is about to sleep... 

[13:57] <audreyt> though I'd like to make

[13:57] <audreyt> while f() -> $x {}

[13:57] <audreyt> work ere I doze off.

[13:58] *** stclare left
[14:02] *** pdcawley joined
[14:36] *** penk joined
[14:37] <audreyt> Limbic_Region: looks like http://www.haskell.org/ghc/dist/current/dist/ghc-6.5.20060914-i386-unknown-mingw32.tar.gz is out

[14:37] <lambdabot> http://tinyurl.com/g7otr

[14:37] <audreyt> havn't tested it myself though.

[14:49] <agentzh> audreyt: is there a haskell builtin like perl's join?

[14:49] <agentzh> unwords == join ' ' :)

[14:56] <audreyt> @type intersperse

[14:56] <lambdabot> forall a. a -> [a] -> [a]

[14:56] <audreyt> > intersperse ',' "moose"

[14:56] <lambdabot>  "m,o,o,s,e"

[14:56] <svnbot6> r13326 | audreyt++ | * Don't parse :a as ::a.

[14:56] <TimToady> reblink

[14:57] <agentzh> audreyt: thanks!

[14:58] <audreyt> TimToady: while/until doesn't bind $_ implicitly, but can do that explicitly right?

[14:58] <audreyt> while f() -> $_ { ... }

[14:58] <audreyt> repeat while f() -> $_ { ... }  # also this?

[14:58] <audreyt> for that latter form I have arbitarily bound the first unconditional loop with the value True

[14:59] <audreyt> and "repeat until" with the value False

[14:59] <audreyt> sensible?

[15:01] *** MacVince joined
[15:01] <TimToady> the first is correct, and the second is probably sensible, though my own sensibility at this hour is suspect

[15:02] <nothingmuch> awa

[15:03] <TimToady> on the other hand, if it makes more sense to simply disallow binding on the repeat, that would be okay too.

[15:04] <TimToady> esp if you think of the "repeat while" as a macro that does code motion of the while to the end.

[15:04] <TimToady> where it makes no sense to say ->

[15:04] <audreyt> you mean as postfix?

[15:05] <TimToady> (at least as -> is currently designed)

[15:05] <audreyt> but that introduces no scope

[15:05] <audreyt> and doesn't quite apply

[15:06] <TimToady> I mean if you remap repeat while X -> $_ {...} to repeat {...} while X -> $_ it makes little sense

[15:06] <TimToady> under current scoping rules

[15:06] <audreyt> ah.

[15:06] <audreyt> right, exactly. though

[15:06] <audreyt> repeat -> $_ {... } while X

[15:06] <audreyt> can be made perfectly fine no?

[15:06] <TimToady> yes

[15:07] <audreyt> then I guess I'd prefer a bindable repeat :)

[15:07] <TimToady> maybe it's "undef but True".  :)

[15:08] <nothingmuch> lumi: ping

[15:08] <audreyt> been thinking that :) though for enums "undef but" makes very little operational sense...

[15:08] <TimToady> but an argument can be made that it's simply undef the first time

[15:08] <audreyt> yes.

[15:08] <audreyt> I think either concrete True or simply undef

[15:08] <audreyt> undef might be better as it would allos

[15:09] <TimToady> yes

[15:09] <TimToady> make it undef

[15:09] <audreyt> while f_ret_moose() -> Moose $x {}

[15:09] <lumi> nothingmuch: pong

[15:09] <audreyt> to not bindfail

[15:09] <TimToady> right

[15:09] <audreyt> yay :)

[15:10] <TimToady> and it gives a good conditional to use to determine if you're after the first itme

[15:10] <TimToady> *time

[15:10] <audreyt> nodnod.

[15:10] <audreyt> since normally it'd be undef,False,False,False,True

[15:10] *** vel joined
[15:10] <TimToady> or versa vica

[15:11] <TimToady> well, you never see the final one

[15:11] <TimToady> inside the loop, but yes

[15:12] <audreyt> k, I amended repeat.t

[15:12] <audreyt> will commit shortly and sleep :)

[15:12] <TimToady> nnito

[15:12] <audreyt> would be cool if you can hack S04 and make the new test smartlinkable :)

[15:13] <TimToady> ryokai!

[15:14] <audreyt> arigato gozaimasu!

[15:14] <TimToady> these smartlink thingers are really good for what ails both ADD and autistic folk...  :)

[15:15] <TimToady> nnito = not necessarily in that order, btw

[15:16] <nothingmuch> TimToady: have you looked at the MO thing?

[15:16] <nothingmuch> i'm thinking of proposing it formally as Perl 6's object metamodel

[15:16] <nothingmuch> but my emails to p6l are always warnocked ;-)

[15:16] <TimToady> ENOTYET

[15:17] * nothingmuch makes a puppy face

[15:17] <nothingmuch> brb, phone

[15:18] <TimToady> it's been a crazy week here, between jury duty and plumbing and jet lag and more plumbing and weird orientations for lewis and jet lag and mail backlog and design backlog and jetlag

[15:19] * nothingmuch wonders which part of that is worse ;-)

[15:23] *** kanru joined
[15:23] * Limbic_Region completely misparsed "weird orientations for lewis"

[15:23] <svnbot6> r13327 | audreyt++ | * t/run/12-script-args.t: Remove "pugsrun" pugsism.

[15:23] <svnbot6> r13328 | audreyt++ | * more removal of "pugsrun".

[15:26] <svnbot6> r13329 | audreyt++ | * repeat.t: test for the soon-to-be-specced:

[15:26] <svnbot6> r13329 | audreyt++ |     repeat while f() -> $x { ... }

[15:26] <svnbot6> r13329 | audreyt++ |   that binds undef to $x first.

[15:26] <svnbot6> r13330 | audreyt++ | * POD.t: %=POD is not for this release, so TODO them.

[15:26] <svnbot6> r13331 | audreyt++ | * while.t: Fix bogus logic in "while f() -> $x {...}" tests.

[15:26] <svnbot6> r13331 | audreyt++ |   (now all subtests pass for this one.)

[15:27] <TimToady> not to mention irc backlog...

[15:28] <svnbot6> r13332 | audreyt++ | * Implement bindable while/until loops:

[15:28] <svnbot6> r13332 | audreyt++ |     while f() -> $x { ... }

[15:28] <TimToady> Limbic_Region: that would be school orientations.  :)

[15:32] <audreyt> ?eval 1

[15:32] <evalbot_r13318> pugs: user error (*** *** Unsafe function 'use' called under safe mode         at -e line 1, column 1     at)

[15:39] <Limbic_Region> yeah, I got it the third time I read it

[15:40] <TimToady> he's in "Middle College", a strange cross between high school and junior college, and the orientation was to go to an organics farm and pick tomatoes for three days.

[15:41] <TimToady> and all the taking and fetching adds up...

[15:41] *** marmic_ joined
[15:42] * nothingmuch did a bit of that in highschool

[15:42] <nothingmuch> it was an agricultural school

[15:42] <nothingmuch> before i could pick cinema i had 1 day of work per week

[15:42] * nothingmuch worked in the greenhouse

[15:43] <nothingmuch> the big win was that people who majored in biology related fields had various experiments

[15:43] <TimToady> beings as this is Northern California, I'm sure the emphasis was more on the "organics" than on the "farm". :)

[15:43] <nothingmuch> my favourite was strawberries =)

[15:43] <nothingmuch> heh

[15:43] <nothingmuch> when i was there it was organic

[15:44] <nothingmuch> by the timie i graduated they started using pesticides for the veggies and chemical fertilizers for the flowers

[15:44] <TimToady> but mostly it was just something for the whole class to do together as a team-building experience, I suspect.

[15:44] <nothingmuch> i think it was to keep people like me from eating the experiments

[15:44] <nothingmuch> =)

[15:44] <TimToady> organic farming would be easy if it weren't for those darn pests...

[15:45] <nothingmuch> aye

[15:45] <nothingmuch> especially since todays market is so intolerant to produce that doesn't look perfect

[15:45] <TimToady> reminds me of software design...

[15:48] *** xdg joined
[15:48] <svnbot6> r13333 | fglock++ | v6 - more WHAT conversion

[15:48] <TimToady> heh, one more week and I will have been running the same irssi process for 6 months.

[15:49] <nothingmuch> ever since OSDC?

[15:49] <TimToady> since Mar22

[15:49] <nothingmuch> oh right, it's september

[15:49] <TimToady> I guess that's pretty much the uptime on my wall.org server.

[15:50] <nothingmuch> my uptime got screwed when the second ethernet card popped out of the PCI slot =/

[15:50] <TimToady> obviously the power has been pretty stable here, considering I don't have a UPS on that machine any more

[15:50] <nothingmuch> one would think power would only become stable after you buy a UPS

[15:51] <TimToady> maybe it doesn't work like umbrellas

[15:51] <nothingmuch> well, that's the case here anymoose

[15:51] *** bernhard joined
[15:51] <TimToady> I think the power becomes more unstable so as to fry your UPS more quicly.

[15:51] <TimToady> *quickly

[15:51] <nothingmuch> oh... hmm. that's a good point.

[15:52] <TimToady> In any event, the only UPS that has remained functional for me is the one on my fishtank.

[15:52] <TimToady> the rest seem to have a halflife of about 6 months.  Maybe I'm just jinxed when it comes to UPSs though.

[15:52] <nothingmuch> are they tropical or something? like, they need heat or they die?

[15:53] <TimToady> just for aeration

[15:53] <nothingmuch> ah

[15:53] <TimToady> there's a great deal of thermal stability in a 100gal fishtank

[15:53] * nothingmuch wonders how much that is in m2

[15:53] <TimToady> and they can live for a while without the main filtration pumps as long as the bubbler keeps bubbling oxygen into the water

[15:54] <nothingmuch> .3

[15:54] <nothingmuch> that's a lot

[15:54] <nothingmuch> .37

[15:54] <TimToady> It's about 400 kg of water.

[15:54] <nothingmuch> *nod*

[15:54] <nothingmuch> like a bathtub and a half?

[15:55] <TimToady> and you can bet I worried alot about how to anchor that sucker down for an earthquake.

[15:56] <TimToady> it's not something you want landing on your foot, or any other part of your anatomy.

[15:56] <nothingmuch> not something you'd want to clean up either

[15:57] <TimToady> well, that probably can't be helped if it sloshes.

[15:57] <TimToady> but slosh is better than crunch

[15:57] <nothingmuch> i'd figure it would smash

[15:57] <nothingmuch> or is it plexiglass or something?

[15:57] <TimToady> given it's a saltwater tank, one also must worry about electrocution.

[15:58] <TimToady> yes, plexiglass

[15:59] <TimToady> so that circuit has a ground fault interrupter.

[15:59] <TimToady> which as also been known to kill my server since it's the same kitchen circuit for both...

[15:59] *** integral joined
[16:00] <TimToady> in fact, what usually kills the server is the refrigerator kicking in while both computers are up and we're making toast and coffee at the same time.

[16:00] <nothingmuch> my dad once accidentally put the washing machine on the lighting grid

[16:00] <nothingmuch> ... with a space heater

[16:01] <TimToady> I've been meaning to split that circuit for about 15 years now, and even have the wires, but the cable routing in the attic is rather problematic.

[16:01] <nothingmuch> how so?

[16:01] <nothingmuch> too much stuff there?

[16:02] <TimToady> getting through that last 4 feet to the circuit box involves getting under where the roof comes down really low.

[16:02] <nothingmuch> ah

[16:02] <nothingmuch> that's what children are for

[16:02] <TimToady> and the existing conduits seem too full to fish something through.

[16:03] <nothingmuch> is it std for circuitry to go through the attic?

[16:03] <nothingmuch> we don't have attics here... it never occured to me

[16:04] <TimToady> around here, yeah

[16:04] <TimToady> plumbing tends to go down below in the crawlspace

[16:04] <TimToady> well, the hot circuitry goes in the attic, but all the phone and ethernet tend to be below.

[16:05] <TimToady> basically, if you spring a plumbing leak you don't want to be crawling around in well-grounded mud with lethal voltages in handreach.

[16:06] <nothingmuch> in .il plumbing generally goes below the floor, and cabling is either dug into the wall and then covered in plaster, or is embedded in irrigation pipes

[16:06] <nothingmuch> the soft plastic ones

[16:06] <nothingmuch> usually they get bent in the concrete

[16:06] <nothingmuch> so they make them redundant

[16:06] <nothingmuch> quite hackish ;-)

[16:11] * nothingmuch wonders how you tell P::G var nodes that their sigil is changing due to a subscript

[16:13] *** kanru joined
[16:13] *** vel joined
[16:14] *** justatheory joined
[16:25] *** pbuetow joined
[16:26] *** Psyche^ joined
[16:28] *** Psyche^ is now known as Patterner

[16:32] <xinming_> hmm, for contextual variable, what will it return by default if the key doesn't exist?

[16:32] <xinming_> eg, $*ENV<not_exist> or $+not_exist

[16:33] <xinming_> an error or undef?

[16:33] <nothingmuch> TimToady: in p5, are labels for loops in an entirelyt different category than labels for statements?

[16:33] <agentzh> i expect the former to be undef and the latter to be an error.

[16:35] * xinming_ shakes hands with agentzh.

[16:36] <agentzh> :)

[16:36] <PerlJam> I expect them both to be undef except in the presence of pragmata used to modulate such behavior.

[16:37] * agentzh is still playing with jifty on win32.

[16:37] * [particle] plays with jifty on win32 also :)

[16:37] <agentzh> wow

[16:38] <[particle]> i wrote an app to manage use case definitions

[16:38] <xinming_> PerlJam: But the problem is, %*ENV is env hash, and $+contextual access...

[16:38] <xinming_> hmm

[16:38] <xinming_> not the problem

[16:38] <xinming_> just the suggestion. because, they are not the same in some sense. :-)

[16:39] * [particle] thinks $+foo de-sugars to $*ENV<<foo>

[16:40] <xinming_> [particle]: No, $+foo is declared by env IIRC, and %*ENV is built-in,

[16:41] <xinming_> then, $+foo and %*ENV<foo> would be better to become the seperated thing, except searching for $+foo fails. It would equal %*ENV<foo>

[16:45] <TimToady> and therefore a non-existent $+foo should return undef

[16:46] <TimToady> well, it would be an "unthrown exception", actually, which would fail if you try to use it, or fail to test it.

[16:48] <TimToady> nothingmuch: no, they're the same as far as the parser is concerned.  It's just that loops pay more attention to statement labels than ordinary statements do.

[16:49] *** hexmode joined
[17:04] <svnbot6> r13334 | fglock++ | v6 - 'Any' compile-time class

[17:05] <TimToady> ooh, that number is extra 13334!

[17:10] *** putter joined
[17:13] <putter> the other 6...  the r6rs draft is out, after, hmm, several, years.  http://www.r6rs.org/  woot.

[17:13] <lambdabot> putter: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:13] <lambdabot> Title: R6RS.Org

[17:13] *** turrepurre joined
[17:16] <putter> the reference implementations will be a nice aid to making scheme-on-p6 tightly compliant.

[17:16] <svnbot6> r13335 | fglock++ | v6 - join 'Value' compile-time classes into single file

[17:18] *** ludan joined
[17:23] *** zeriod joined
[17:36] <putter> talk &

[17:39] <nothingmuch> http://nothingmuch.woobling.org/Perl-Generate/ast_class_tree.rtf

[17:39] <lambdabot> http://tinyurl.com/la73u

[17:39] <nothingmuch> someone please go over this if possible

[17:39] <nothingmuch> i can export to other formats

[17:42] <zeriod> is http://svn.perl.org/perl6/doc/trunk/design/syn where i should be getting the newest synopsis

[17:42] <lambdabot> Title: Revision 12083: /doc/trunk/design/syn, http://tinyurl.com/evycd

[17:42] <[particle]> zeriod: yes

[17:43] <[particle]> nm: what other formats can you do? the output looks funny for me

[17:44] <nothingmuch> [particle]: omnioutliner 2 or 3, opml, html, plain text (tab separated, expanded tabs, or something else that i can't remember)

[17:44] <[particle]> text or html would be great

[17:45] <agentzh> zeriod: try out http://perlcabal.org/syn

[17:45] <lambdabot> Title: Official Perl 6 Documentation

[17:45] <nothingmuch> http://nothingmuch.woobling.org/Perl-Generate/ast_class_tree_html/

[17:45] <lambdabot> Title: , http://tinyurl.com/elxco

[17:50] <agentzh> particle: does jifty's autocompletion works for you?

[17:50] <agentzh> *work

[17:50] <[particle]> nm: did you generate the topic list?

[17:50] <nothingmuch> [particle]: no, i wrote it by hand

[17:50] <nothingmuch> i'm rehauling Perl::Generate's AST

[17:50] <[particle]> agentzh: haven't tried that yet

[17:51] <agentzh> when i hit the enter key, it commits the page instead of completing the text in the textbox.

[17:51] <agentzh> that is very annoying.

[17:51] <[particle]> eew

[17:52] <[particle]> nm: you're definitely missing some special block (PRE/POST...)

[17:52] <nothingmuch> [particle]: that's perl 5, not perl 6 =)

[17:52] <[particle]> ah

[17:52] <nothingmuch> perl 6 can have a cleaner AST

[17:52] <nothingmuch> i'm trying to model something that is easy to write by hand

[17:52] <[particle]> __DATA is missing trailing __

[17:53] <nothingmuch> given enough type info nodes can be coerced correctl

[17:53] <nothingmuch> y

[17:53] <nothingmuch> and then we get higher order macros at the price of not having perl's syntax

[17:53] <nothingmuch> but for Moose & friends this is OK

[17:53] <[particle]> i don't see 'no'

[17:57] <agentzh> particle: it seems that the autocompletion problem is specific to my firefox. ie 6 works fine for the same page.

[17:57] <[particle]> agentzh: i just upgraded ff to 1.5.0.7 today... maybe that'll help?

[17:58] <agentzh> i'm already at the latest version. firefox updates itself automatically.

[17:58] <[particle]> nm: need 'tie' or a 'tieable' role?

[17:59] <[particle]> missing ? regex quantifier

[17:59] <nothingmuch> ? is not a quantifier, it's more of a meta quantifier

[17:59] <nothingmuch> i put it as a flag on the quantifiers

[17:59] <[particle]> yeah

[17:59] <[particle]> oh

[18:00] <nothingmuch> hmm... what is tieable?

[18:00] <[particle]> s/oh/ok/

[18:00] <nothingmuch> any var, no?

[18:00] <nothingmuch> any deref too

[18:00] <nothingmuch> hmm... i suspect this is just LV

[18:00] <nothingmuch> i need to clean up the string stuff a bit

[18:00] <nothingmuch> i haven't yet decided, but i think it'll have it's own sub ast

[18:00] <nothingmuch> that can be reused

[18:01] <nothingmuch> and must be present in an appropriate quasiquoting op (q, qq)

[18:01] <nothingmuch> instead of being just some kind of "constant" thing

[18:02] * nothingmuch needs food

[18:03] <agentzh> @tell obra jifty's autocompletion functionality does not work properly on my windows machine. when i hit the enter key, the whole form is committed instead of completing the text in the box. but my ie works fine for the same page. am i missing something obvious?

[18:03] <lambdabot> Consider it noted.

[18:03] <[particle]> agentzh: the #jifty folks are quite helpful

[18:04] <agentzh> particle: i've just asked there, but no body has replied.

[18:04] *** mauke joined
[18:04] <obra> agentzh: I've seen that locally myself recently.

[18:04] <lambdabot> obra: You have 1 new message. '/msg lambdabot @messages' to read it.

[18:05] <agentzh> obra: i'm happy to see you can reproduce it.

[18:05] <obra> agentzh: I believe it's part of the "don't submit the page, but actually click the right form submit field  when hitting return" bug fix

[18:05] <obra> the javascript there needs to be smarter

[18:05] <agentzh> oh, so it's a known issue. :)

[18:05] <obra> yeah.

[18:06] <agentzh> hopefully it will be fixed *pretty* soon. ;)

[18:06] <agentzh> in the meantime i can use ie as a workaround. :)

[18:07] <[particle]> or mouse instead of kb

[18:07] <agentzh> yeah

[18:07] <zeriod> in cygwin i get: "Can't locate Pod/Simple/HTML.pm" when i do: "~/pugs/util/smartlinks.pl --check --fast *.t"

[18:08] <agentzh> zeriod: you need to install Pod::Simple.

[18:08] <zeriod> how do i go about doing that?

[18:08] <agentzh> preferrably via the cpan utility.

[18:08] <[particle]> > cpan Pod::Simple

[18:08] <lambdabot>  Not in scope: type constructor or class `Simple'

[18:10] <obra> or hitting the right arrow or tab seems to do the right thing

[18:10] <agentzh> okay

[18:11] <agentzh> indeed

[18:11] <agentzh> obra: thanks for the help.

[18:11] <agentzh> jifty is lovely.

[18:11] <obra> I'm glad you like it. what are you building?

[18:12] <agentzh> i'm just trying out wifty. :)

[18:12] <agentzh> i'm still new to jifty.

[18:12] <agentzh> and also new to mason.

[18:13] <[particle]> wifty i couldn't get working. i'll try again after i get my new laptop and install half of cpan again ;)

[18:13] <agentzh> hehe.

[18:13] <agentzh> particle: maybe you'd like to try out the jifty ppm package.

[18:13] *** elmex joined
[18:13] * [particle] is just glad that half of cpan installs on win32

[18:13] <agentzh> that is very helpful.

[18:13] <[particle]> agentzh: i would!

[18:14] <agentzh> :D

[18:14] <TreyHarris> agentzh: hi :-)

[18:14] <agentzh> TreyHarris: hi :)

[18:14] <TreyHarris> i think it's been a week or more since we've both been awake and on channel at the same time :-)

[18:14] <agentzh> TreyHarris: i'm about to leave.

[18:14] <TreyHarris> course :)

[18:15] <agentzh> i've just said "g'night, folks" on #jifty. :)

[18:15] <agentzh> 2:12 AM here...end of day for me...

[18:15] <TreyHarris> lol, well, take care, it was nice to see you briefly ;-)

[18:15] <agentzh> me too :D

[18:15] <agentzh> night &

[18:16] *** agentzh left
[18:20] *** BooK joined
[18:29] <svnbot6> r13336 | trey++ | [t/operators/reduce_le1arg.t]

[18:29] <svnbot6> r13336 | trey++ | Better smartlinks.

[18:33] *** mdiep_ joined
[18:41] * nothingmuch returns

[18:49] <nothingmuch> [particle]: any more comments?

[18:50] <[particle]> i don't see void context

[18:52] <nothingmuch> [particle]: that's just a non last statement

[18:54] <[particle]> i think it looks pretty complete, then.

[18:54] <[particle]> oh, qr? qw?

[18:54] *** araujo joined
[18:57] <[particle]> and 'local'

[19:12] <nothingmuch> qr is a quasiquoting op

[19:12] <nothingmuch> missing

[19:12] <nothingmuch> qw is under constants

[19:12] <nothingmuch> local... hmm

[19:12] <nothingmuch> i guess it's a sub decl

[19:12] <nothingmuch> err, var decl

[19:12] <nothingmuch> no, it isn't

[19:12] <nothingmuch> you can localize any lv

[19:13] <[particle]> agreed, any lv

[19:16] * nothingmuch cheers for local @hash{qw/foo bar gorch/} = ($moose, $elk, $gopher)

[19:21] *** zeriod joined
[19:21] <zeriod> doing the test smartlinks, would it be correct to link pugs/t/oo/can.t to S12/Introspection?

[20:08] <TreyHarris> zeriod: yes, why not?

[20:08] <zeriod> just checking i understand what im supposed to be doing :D

[20:17] *** sockstat joined
[20:30] *** zeriod joined
[20:34] <TimToady> ~.

[20:34] <TreyHarris> cu: disconnected

[20:37] *** zgh joined
[20:47] *** jferrero joined
[20:50] <TimToady> interesting, I only had a half-duplex ssh connection.

[20:54] *** weinig joined
[21:03] *** weinig joined
[21:06] *** fglock joined
[21:10] *** KingDiamond joined
[21:11] *** fglock joined
[21:14] *** fglock joined
[21:19] *** larsen_ joined
[21:24] *** Limbic_Region joined
[21:24] *** polettix joined
[21:28] *** cjeris left
[21:36] *** hareldvd joined
[22:20] <svnbot6> r13339 | fglock++ | v6 (misc/pX/fglock) 'emit( $ast )->perl' generates code; needs more work

[22:22] *** fnave joined
[22:22] <[particle]> fglock++

[22:23] <fglock> [particle]: the code is very ugly, because I'm translating the existing emitter - but misc/pX is a scratchpad area

[22:26] <fglock> it can do simple compile-time things like ' 1.WHAT.say ' compiles to ' print "Int\n" '

[22:26] <[particle]> fglock: it's been too long since i built pcr and friends. what's the make target?

[22:27] <fglock> make target?

[22:27] <clkao> need to fix those tests being disabled!

[22:27] <fnave> Is someone still doing perl6 list summaries?

[22:27] <[particle]> fnave: yes. subscribe to [email@hidden.address] for weekly summaries

[22:28] <[particle]> or visit pugs.blogs.com

[22:28] <fnave> Thx!

[22:29] <[particle]> fglock: to build and test and use v6 and friends, what do i do?

[22:29] <fglock> [particle]: just install as a plain cpan module - install v6

[22:29] * [particle] cpan v6's

[22:34] <fglock> mm - there are some failures from cpan-testers - it looks like a dependency version problem, but where?

[22:34] <[particle]> fglock: line 632 if ($subname eq ... ) would be better as a map, i think

[22:34] <[particle]> s/map/grep/

[22:35] <fglock> [particle]: yes, I know - it will be a hash, some day :)

[22:36] <fglock> [particle]: I'm currently rewriting other things

[22:36] <fglock> the emitter just grew without a plan

[22:36] <[particle]> looks like a lot of this could become multi-level dispatch

[22:37] <fglock> sure

[22:38] <[particle]> i'm still installing v6 and deps (new perl install, missing many modules)

[22:38] <fglock> the v6 project works like: make it work -> refactor -> repeat

[22:39] <clkao> but things are broken!

[22:39] <fglock> clkao: we are in the 'repeat' part

[22:40] <[particle]> :)

[22:40] <clkao> by definition refactor should keep what's working working.

[22:41] <fglock> clkao: yes, sorry

[22:44] <fglock> clkao: I'm trying to split the emitter into manageable chunks

[22:44] <nothingmuch> .oO( // is cool, but with an && ish counterpart we could have something nicer...

[22:44] <nothingmuch> take the expr defined($a) && defined($b) && $a == $b

[22:44] <nothingmuch> i'd like a meta chaining operator

[22:45] <nothingmuch> $a <<< &&, == >>> $n

[22:45] <nothingmuch> $a <<< &&, == >>> $b

[22:45] <nothingmuch> where && is defined-and

[22:45] *** Khisanth joined
[22:45] <nothingmuch> and <<< >>> is some funny syntax

[22:45] <nothingmuch> ) zzzzz

[22:45] <nothingmuch> (somebody remind me i dreamt of this when I wake up

[22:46] <fglock> @tell nothingmuch remember the // && dream

[22:46] <lambdabot> Consider it noted.

[22:46] <dakkar> nothingmuch: write a macro!

[22:47] <mauke> liftM2 (==) $a $b

[22:47] <mauke> using the Maybe monad or something

[22:48] <nothingmuch> mauke: that's the inspiration

[22:48] <lambdabot> nothingmuch: You have 1 new message. '/msg lambdabot @messages' to read it.

[22:48] <nothingmuch> lambdabot: tell me later?

[22:48] <nothingmuch> ;-)

[22:48] <nothingmuch> dakkar: i meant std

[22:48] <nothingmuch> zzzzzzzz

[22:48] *** markstos joined
[22:50] <[particle]> @tell nothingmuch he had a <<< crazy >>> dream

[22:50] <lambdabot> Consider it noted.

[22:50] <fglock> clkao: are you running a v6 smoke?

[22:50] <TreyHarris> anyone have a suggestion of a good way to communicate a code review to someone else over the internet?  a unified diff with annotations?

[22:51] <fglock> TreyHarris: you can work it online with gobby

[22:51] <[particle]> gobby++

[22:51] <[particle]> sobby is installed on feather, even

[22:52] <TreyHarris> too much timezone mismatch, we don't have time to do it in real time

[22:52] <obra> has gobby gotten visible cursors yet?

[22:52] <fglock> going home &

[22:52] *** fglock left
[22:53] <dakkar> TreyHarris: that's what I did when I had to do it...

[22:53] <dakkar> I added comments and code fixes, and sent the diff

[22:55] <TreyHarris> dakkar: yup.  thanks

[22:55] <TreyHarris> just wanted to be sure there wasn't some obvious tool i was missing

[23:14] *** justatheory joined
[23:26] *** weinig is now known as weinig|bbl

[23:29] *** bcorn joined
[23:34] *** larsen_ joined
[23:44] *** mako132_ joined
[23:51] *** weinig|bbl is now known as weinig

