[00:01] *** Psyche^ joined
[00:04] <ingy> nothingmuch: ping

[00:13] *** Psyche^ is now known as Patterner

[00:18] *** frederico joined
[00:20] *** hikozaemon joined
[00:29] *** justatheory joined
[00:29] *** nekokak joined
[00:30] <TreyHarris> dduncan: so you're not happy with any(@x) ~~ { .condition }?  are you generally unhappy with smartmatch semantics lacking explicit identifier versions for particular cases, or just in this one specific case?

[00:30] *** Psyche^ joined
[00:32] <dduncan> unless the syntax of any() is being overloaded here to not make a set/junction, the problem I have is that it looks like it would make a set, which means it won't work for what grep() does ...

[00:32] <dduncan> grep() works with ordered lists that can have duplicates, and returns ordered lists; a Junction/Set is not ordered and has no duplicates

[00:33] <dduncan> but if any() etc is just overloaded syntax that doesn't make a junction, and it is easy to understand as such, then I don't have a problem with the above syntax

[00:33] *** MacVince joined
[00:33] *** Psyche^ joined
[00:34] <dduncan> or alternately, if any() etc is not supposed to replace grep, and just does set logic, then I also have no problem with it, as it is doing the set ops tha it looks like its doing

[00:34] <dduncan> and I prefer it just does what it looks like its doing

[00:35] <dduncan> that is all

[00:36] <TreyHarris> well...

[00:37] <TreyHarris> junctions are *not* equivalent to sets, AFAIK.  they are individual values that are composites of other values

[00:37] <TreyHarris> so duplicates *should* be preserved

[00:38] <TreyHarris> the lack of ordering is true, except than any() in list context has been specifically overridden to preserve order

[00:39] *** bsb left
[00:40] *** mauke_ joined
[00:41] <dduncan> well, Junctions have been defined as being Sets with extra behaviour

[00:41] <TimToady> junctions are a linguistic feature, not a mathematical feature, so it seemed sane to give them an interpretation in list context and not just boolean context.

[00:42] <dduncan> though it was never made clear what all the extras were, afaik

[00:42] <TimToady> "any" and "all" are borrowed from English, not from set theory.

[00:42] <dduncan> but set theory includes those too ... set calculus

[00:43] <SamB> the names should make that clear

[00:43] *** Psyche^_ joined
[00:43] <dduncan> set calculus includes any, all, one, none, etc

[00:43] <SamB> if they were borrowed from maths, they'd have funky symbols!

[00:43] <TimToady> so?

[00:43] * justatheory waves to TimToady 

[00:43] <dduncan> I'm jus saying that they aren't English-only

[00:44] <dduncan> even if that was your influence

[00:44] <dduncan> so I'm glad that they work both ways

[00:44] <TimToady> I don't care if set theory has borrowed my wife--that doesn't mean that I'll take set theory's definition of my wife...

[00:44] <SamB> ... I would be kinda mad at set theory if it borrowed *my* wife. If I had a wife.

[00:44] <justatheory> Or your word that nothing happened with your wife

[00:44] <justatheory> er, its word

[00:45] *** Psyche^_ is now known as Patterner

[00:45] <TimToady> actually, my wife is rather fond of set theory, come to think of it...

[00:45] <dduncan> afaik, the english definition and set definition of those terms is the same, or close enough, so it doesn't matter where they came from

[00:46] <TimToady> and I suppose by some definition or other she has been in union with set theory.

[00:46] <justatheory> lol!

[00:46] <dduncan> fact is, what we have something that works well

[00:46] *** justatheory is now known as SetTheory

[00:46] <SetTheory> Yeah baby!

[00:46] *** SetTheory is now known as justatheory

[00:47] <TimToady> I guess the kid would have to be named Venn...

[00:48] <justatheory> Let me draw you a picture

[00:48] <dduncan> I think there's a unicode symbol for it

[00:49] <TimToady> well, speaking of She Who Must Be Obeyed, she just called me and told me to come to dinner.

[00:49] <TimToady> so I will go and intersect with her. &

[00:50] <dduncan> like all() === all() does

[00:50] *** mauke_ is now known as mauke

[00:51] <dduncan> and I think any() === any() is a union by contrast, or something

[00:51] <dduncan> but whatever

[00:52] <dduncan> or the latter is the intersection

[00:53] *** bsb joined
[01:18] *** weinig|bbl is now known as weinig

[01:24] *** xdg joined
[01:43] *** hexmode joined
[01:45] *** ludan joined
[01:46] <ludan> hi

[01:50] <svnbot6> r13432 | audreyt++ | * Vivify global syms such as @*FOO and $*FOO.  This made

[01:50] <svnbot6> r13432 | audreyt++ |   ./pugs -CPIR work again.

[01:54] *** weinig is now known as weinig|bbl

[01:57] *** buubot joined
[02:17] *** Psyche^ joined
[02:23] *** Psyche^_ joined
[02:32] *** Psyche^_ is now known as Patterner

[02:33] *** cventers joined
[02:34] <cventers> hello, i'm doing a Perl 6 article and I would both like to ask a question and see if anyone is interested in reading a prerelase version of said article to make comments about anything I may have missed or misrepresented

[02:41] <cventers> if anyone is interested in looking over the prerelease article feel free to mail me at [email@hidden.address]
[02:47] *** mako132_ joined
[02:48] <audreyt> I'm interested :)

[02:58] *** markstos joined
[03:05] *** f0rth joined
[03:08] <svnbot6> r13433 | audreyt++ | * unbreak the build

[03:10] <ingy> hi audreyt

[03:16] * cventers is away: will return in a bit.

[03:34] <TimToady> still seems broken: pugs: user error (*** Undeclared variable: "$fatal::DEFAULT_FATALITY" at <prelude> line 127, column 5-33)

[03:55] <MacVince> !eval my @a = ([1, 2, [3, [4, 5], 6], 7], 8, [9, 10]); say ~@a

[03:55] <MacVince> !eval my @a = ([1, 2, [3, [4, 5], 6], 7], 8, [9, 10]); ~@a

[03:55] <MacVince> svnbot6: eval 2+2

[03:56] <MacVince> oh well..

[03:56] <zgh> ?eval say 'foo'

[03:56] *** evalbot_r13431 is now known as evalbot_r13433

[03:56] <evalbot_r13433> OUTPUT[foo ] Bool::True

[03:56] <zgh> gotta start with '?'

[04:00] *** weinig|bbl is now known as weinig

[04:15] *** weinig is now known as weinig|zZz

[04:18] *** kanru joined
[04:36] <svnbot6> r13434 | audreyt++ | * Oops, unbreak for real

[04:45] <TimToady> now here's a cute one:

[04:45] <TimToady> make[1]: *** No rule to make target `lib/.CGI.pm.swp', needed by `pm_to_blib'. Stop.

[04:45] <TimToady> I think something was a little overaggressive with the globbing there...

[04:49] <TimToady> make[1]: *** No rule to make target `Spec/.Functions.pod.swp', needed by `pm_to_blib'.  Stop.

[04:50] <MacVince> .swp?  Those are vim temp files.

[04:51] <TimToady> yep.

[04:51] <TreyHarris> i'm still smoking r13336.  five hours now... my prior smoke of r13324 too just two hours

[04:52] <TreyHarris> s/too/took/

[04:52] <TimToady> you sure it's not looping?

[04:52] <TreyHarris> nope, pretty steady progress

[04:52] <TreyHarris> it's in t/xx-uncategorized now, so almost done

[04:54] <TreyHarris> it could have been lack of memory... i had a browser crash a bit ago, and in my experience the browser often start chugging memory prior to a crash.

[04:54] <TreyHarris> s/start/starts/

[04:54] <TreyHarris> can't type tonight

[04:55] <TimToady> you really clear back at 13336, or did you mean 13436?

[04:57] <TreyHarris> hm... no, i'm at r13427... looks like i'm having the problem somebody mentioned earlier about pugs -v reporting an old result

[04:58] <TreyHarris> but of course, that's what smoke reports.... *sigh*

[04:58] <TreyHarris> guess the past five hours--just now finished--have been in vain

[04:58] <TimToady> finally got through the make to actually start smoking r13434 myself.

[04:59] <TimToady> I generally always do a realclean before a smoke, so I never saw the version problem.

[04:59] <TreyHarris> anyone recall what the solution to the wrong version problem was?  i'm not finding the right keywords to conjure it up

[05:00] <TreyHarris> yeah, besides make realclean... make usually takes an hour for me, make realclean two

[05:01] <TreyHarris> er, make following realclean

[05:02] *** agentzh joined
[05:03] <TimToady> look for "touch" from dduncan

[05:03] <dduncan> yes

[05:03] <dduncan> try "touch util/version_h.pl"

[05:03] <dduncan> then "make" again

[05:03] <TreyHarris> ah, here it is: touch util/version_h.pl, from dduncan++

[05:03] <TimToady> I expect "rm version.h" would work too...

[05:04] <TreyHarris> oops.  i should scroll back down to the end of scrollback before typing ;-)

[05:04] <agentzh> @tell audreyt i don't know how to reply malon's p6c mail: http://www.nntp.perl.org/group/perl.perl6.compiler/1511  maybe you're willing to help? :)

[05:04] <lambdabot> Consider it noted.

[05:04] <dduncan> well, the problem is in whether version_h.pl is invoked at all, not its contents

[05:04] <TreyHarris> dduncan: danke

[05:05] <agentzh> version_h.pl is significant to smartlinks.pl, i think.

[05:05] <dduncan> I don't know the problem, except to speculate that something in Makefile.PL, which queries svn info, isn't doing the corresponding bit for svk

[05:05] <TreyHarris> i use svn

[05:05] <TimToady> there isn't a version.h to rm...

[05:05] <dduncan> I use svk

[05:05] <agentzh> me too

[05:05] <dduncan> maybe you mean pugs_version.h ?

[05:06] <TimToady> if that's what it recreates..

[05:06] <TreyHarris> in that case, i guess it's broke regardless of the VC client you're using

[05:06] <mugwump_> version_h.pl special cases svn and svk

[05:06] <TreyHarris> well... would it be valid for me to edit my smoke.html to put in the correct version number and upload it anyway?

[05:06] <TreyHarris> and smoke.yml...

[05:07] <agentzh> that is not elegent...

[05:07] * agentzh backlogs due to lack of context.

[05:07] <TreyHarris> agentzh: no, but i hate to waste a five-hour smoke, particularly as if i'm going to make again i'd like to make the current rev

[05:08] <agentzh> TreyHarris: i think that maybe okay.

[05:08] <agentzh> smartlinks.pl extracts rev number from tests.yml.

[05:09] <agentzh> editing .html is fine too. i think.

[05:09] <dduncan> mugwump, the contents of version_h.pl aren't at fault ... its whether that script is called at all that is the problem

[05:09] <TreyHarris> agentzh: really?  tests.yml is two weeks out of date!

[05:09] <TimToady> smoke.yml

[05:09] <agentzh> ahh, it has been renamed.

[05:09] <agentzh> sorry, i didn't know. :)

[05:10] <TreyHarris> ah

[05:10] <agentzh> anyway, the yml filename is passed to smartlinks.pl via a commandline option

[05:10] <agentzh> i didn't hard-code the filename.

[05:11] <TreyHarris> i wish i could get a handle on the build process, i'm flummoxed by it.  when i make install, it takes 30 minutes or so and rebuilds quite a chunk even though i haven't done anything since the make but a smoke...

[05:11] <agentzh> i agree

[05:11] <agentzh> "make fast" is more friendly

[05:12] <agentzh> it seems that the smoking mechanism doesn't call version_h.pl correctly?

[05:13] <TimToady> I gave up on make install, and instead put a symlink from /usr/bin/pugs into my build dir.

[05:13] <dduncan> "make" in general doesn't call version_h.pl correctly

[05:13] <dduncan> the smoke mechanism gets the number directly from Pugs

[05:13] <dduncan> so the smoke will say whatever pugs -v says

[05:13] <agentzh> from .h?

[05:13] <dduncan> this isolates the matter of querying VC to just "make" time

[05:13] <dduncan> I know because I made it do that myself

[05:13] <agentzh> i'll try to fix that.

[05:13] <TreyHarris> TimToady: aye, but when there's regression, i like having an installed pugs that i can continue using for whatever has regressed...

[05:14] <TimToady> there is that...

[05:14] *** BooK joined
[05:15] <TreyHarris> well, i'm getting a faster machine this week.  not tremendously faster, a core duo 1.8GHz... but still loads better than this 1.5GHz G4 ppc....

[05:15] <dduncan> what machine is that?

[05:16] <TreyHarris> and with 2GB of real RAM (this one is 1.25GB), so that should help too.

[05:16] <TreyHarris> dduncan: a mac mini

[05:16] <dduncan> I see

[05:16] <dduncan> I'm on a dual 1-Ghz G4 myself, which probably about the speed of your current machine

[05:16] <TreyHarris> i bet your smokes are faster

[05:17] <dduncan> 768M of RAM though ... could use more, particularly when building some parts of Pugs

[05:17] *** coumbes joined
[05:17] <TreyHarris> especially if you have concurrent set to 2

[05:17] <dduncan> I recall about 2.5 hours

[05:17] <agentzh> it seems that $version_h doesn't get updated if one is using svk.

[05:17] <TreyHarris> agentzh: i'm using svn

[05:17] <agentzh> i'll try a fix.

[05:18] <agentzh> TreyHarris: you're having the same problem?

[05:18] <TreyHarris> yeah, my old iMac G4 800Mhz (bought the day they came out in Feb. 2002) finally gave up the ghost this past weekend.  i thought about a new imac, but i'd really like to have an external monitor to kvm with...

[05:18] <TreyHarris> agentzh: yes

[05:18] <dduncan> hm, was the smokeserv reset ... I don't see the older smokes anymore

[05:19] <agentzh> thinking...

[05:19] <dduncan> Trey, the smoke used to take around 5h to do on my machine, when Pugs' multi-threading was broken on my machine ... later it was fixed and them my smokes were about 2.5 hours

[05:19] <TreyHarris> agentzh: my pugs is reporting r13336, but i just build r13427

[05:20] <dduncan> broken meaning that smoke_concurrent > 2 didn't have any effect, with just 1 smoke process at once being run

[05:20] <TreyHarris> s/build/built

[05:20] <dduncan> er >= 2

[05:20] *** traecer joined
[05:20] <agentzh> TreyHarris: what do you mean by "reporting"

[05:20] <agentzh> and what do you mean "just build r13427"

[05:20] <agentzh> ?

[05:21] <TreyHarris> TimToady: is it/will it be legal to use unicode arrows for ->, ==>, <==, <=>, etc?

[05:21] <dduncan> reporting = pugs -v

[05:21] <TreyHarris> agentzh: pugs -v reports r13336, but i just built r13427

[05:21] <agentzh> okay

[05:21] <dduncan> Trey, did you try the touch yet?

[05:21] <agentzh> fixing

[05:22] <agentzh> Trey: does touch work for you?

[05:23] <TreyHarris> dduncan: about to.  first i'm going to edit smoke.html and smoke.yml.  i think perhaps i should s/13336/13427/, but not in the pugs banner, to document this problem?

[05:23] <dduncan> the problem is documented by us talking about it here

[05:24] <dduncan> you can update your smoke files as if the version was working, since the public looking at them should have more accurate info

[05:24] <TreyHarris> ok

[05:24] <dduncan> or if you want to document it, add extra plain text text somewhere in the smoke html, which hopefully won't cause a parse problem on the smoke server

[05:25] <dduncan> in addition to changing the nums

[05:25] <TreyHarris> already uploaded with a global s///

[05:25] <dduncan> good going gone

[05:25] <TreyHarris> now i'll try the touch, but i guess i won't know for a bit

[05:25] <TimToady> TreyHarris: not unless you declare them yourself, probably.

[05:25] <dduncan> you'll know quickly

[05:26] <dduncan> following the "touch ...", just do a "make", which should just take 1 minute or so

[05:26] <dduncan> assuming you haven't made clean

[05:26] <dduncan> then pugs -v is all the verify you need that it worked

[05:26] <dduncan> that and, ...

[05:26] <dduncan> a diagnostic line during "make" should say "compiling version.hs" rather than "skipping version.hs"

[05:27] <TreyHarris> dduncan: ah, yes indeed

[05:27] <dduncan> also, around the 6th output line during "make", it should say "version is NNN" or something like that

[05:27] <TreyHarris> dduncan: but as i said before, make (for me at least) always rebuilds some things, even if nothing is changed in the interim

[05:27] <TreyHarris> dduncan: yes, it did.

[05:28] <TreyHarris> so the minimum time reported by 'make; time make' is 20 minutes or so

[05:28] <dduncan> well, "make" is verbose, but it should only take a minute with no changes if you system is like mine

[05:28] <dduncan> my pugs setup is basically just all the default settings, but some minor changes to config.yml

[05:29] <TreyHarris> dduncan: interesting.  do you have an up to date ./pugs in your working copy now?

[05:29] <dduncan> I also did a clean checkout just last week

[05:29] <dduncan> more or less ... checking ...

[05:29] <dduncan> my pugs -v says r13426

[05:29] <TreyHarris> run make again

[05:30] <TreyHarris> see if the timestamp on pugs changes.  in my case, it would

[05:30] <TreyHarris> i don't have to touch anything but it gratuitously rebuilds pugs

[05:30] <dduncan> actually, my pugs is r13433, but reports the above since I didn't touch the file since last time

[05:31] <dduncan> 34 has an Eval.hs change

[05:31] <dduncan> since I'm making with that, it'll take a bit longer, starting now...

[05:32] <TreyHarris> ah, right.  but what i'm interested in is, once you're done, without touching a thing, running make again...

[05:32] <dduncan> will tell ...

[05:32] <TreyHarris> oh, that was comparatively fast.  only 8m

[05:32] <TreyHarris> urgh, pugs -v still reports 13336

[05:33] <dduncan> biab

[05:33] <TimToady> pugs or ./pugs?

[05:33] <TreyHarris> ./pugs

[05:35] <TreyHarris> even though src/Pugs/pugs_version.h contains: "#define PUGS_SVN_REVISION 13427"

[05:35] <TreyHarris> odd.

[05:36] <agentzh> TreyHarris: you can fix util/yaml_harness.pl. :)

[05:36] <agentzh> s/fix/patch/

[05:36] <TreyHarris> agentzh: yaml_harness.pl isn't what creates the -v string, is it?

[05:37] <agentzh> TreyHarris: i'm afraid that is intentional.

[05:37] <agentzh> or you'll have to rebuild more after your svn update

[05:37] <TreyHarris> agentzh: elaborate?

[05:38] <TreyHarris> it's fine, i don't mind realcleaning this time.  but if i have to realclean *every* time... that is suboptimal.

[05:38] <dduncan> back ... and make finished

[05:38] <dduncan> so <= 5 min that time

[05:38] <agentzh> TreyHarris: i think the real problem is the rev number contained in your smoke reports, right?

[05:38] <agentzh> i can fix that.

[05:39] <TreyHarris> agentzh: no, a perl -i -ape fixed that right up :-)

[05:39] <TreyHarris> er, s/-a/-/

[05:39] *** szabgab joined
[05:41] <dduncan> version didn't change just then, a plain make after didn't change it either, but a touch and a make made it updaet

[05:41] <TreyHarris> dduncan: touch of util/version_h.pl?

[05:41] <dduncan> that workaround continues to work

[05:42] <dduncan> and without that workaround, it is incorrect

[05:42] <agentzh> dduncan: made it update every time is easy.

[05:42] <TreyHarris> hm.  i wonder why not for me?

[05:42] <agentzh> *making

[05:43] <dduncan> it seems to me that the Makefile is treating version like typical other files where it doesn't remake it if it didn't change ... but version is special and shouldn't be treated that way, and in the past it wasn't

[05:43] <agentzh> gotta run &

[05:43] *** agentzh left
[05:44] <TreyHarris> ahh, i just found a possible culprit

[05:44] <dduncan> did you now?

[05:44] <TreyHarris> libHSPugs-6.2.12.a was well out of date, almost a week

[05:44] *** traecer joined
[05:44] <TreyHarris> i removed it and am re-making

[05:45] * dduncan brb

[05:45] <TreyHarris> not almost a week... to Sep 15, which was when r13336 was

[05:45] <TreyHarris> yes, that fixed it

[05:46] <TreyHarris> but that just pushes the problem... why didn't make realize it needed to create a new libHSPugs?

[05:46] <TreyHarris> and of course, this means that my smoke really was invalid...

[05:52] <dduncan> Trey, from what I could see, pugs_version.hs contained the old value

[05:53] <dduncan> that file wasn't recompiled because it didn't change

[05:53] <dduncan> that file is set by version_h.pl

[05:53] <dduncan> do you know for a fact that Pugs wastn't rebuilt aside from the version number?

[05:54] <dduncan> from my determination, your smoke is still valid

[05:54] <TreyHarris> the timestamp

[05:54] <TreyHarris> and i hate to think that it takes an hour to *not* build a new pugs from source :-)

[05:54] <dduncan> if that is so, then we may have multiple problems

[05:55] <dduncan> or multiple manifestations of the same source problem

[05:55] <TreyHarris> *nod*

[05:55] <dduncan> anyway, back to $job for me ...

[05:55] <TreyHarris> dduncan: ...

[05:55] <dduncan> yes

[05:56] <TreyHarris> well, what if I were to svn up now...

[05:56] <TreyHarris> first do a recursive ls -l...

[05:56] <TreyHarris> then svn up... then make

[05:56] <TreyHarris> and, assuming -v doesn't update, see what had not been updated that one would think should have been?

[05:56] <dduncan> you want to see what changed?

[05:56] <TreyHarris> might give us clues

[05:56] <dduncan> good luck with that

[05:56] <dduncan> actually ...

[05:57] <dduncan> if you copy the whole checkout dir first

[05:57] <TreyHarris> seems like the problem is 1) targets are rebuilding when their sources have not, and 2) targets are not rebuilding when their sources have.

[05:57] <dduncan> then if you have a utility to compare directories including file contents, ...

[05:57] <dduncan> you could then see the old versions and new versions where they exist

[05:57] <TreyHarris> *nod*

[05:57] <TreyHarris> easily done.  rsync --dryrun :-)

[05:58] <dduncan> I have yet to use any sort of rsync on purpose

[05:58] <dduncan> backups are still manual

[05:59] <TreyHarris> *grin*

[05:59] <TreyHarris> ok, go $job

[05:59] <TreyHarris> i'll poke around.

[06:23] *** marmic joined
[06:38] *** f0rth joined
[06:40] *** mdiep joined
[06:43] *** traecer joined
[06:47] <nothingmuch> ingy: pong

[06:47] <lambdabot> nothingmuch: You have 1 new message. '/msg lambdabot @messages' to read it.

[06:52] <nothingmuch> @seen putter

[06:52] <lambdabot> I saw putter leaving #perl6 10h 1m ago, and .

[06:52] <nothingmuch> oi

[07:05] *** smee joined
[07:05] <smee> i kno more about computas than u all im da best hacker eva

[07:09] *** smee left
[07:11] <webmind> then way didn't he stay to finish perl6? ;)

[07:13] *** prefiks joined
[07:14] <obra> because he already did it ;)

[07:27] *** iblechbot joined
[07:27] <TreyHarris> last time he came on, audreyt offered him a commit bit :-)

[07:33] <nothingmuch> @tell putter commits welcome ;-) darcs send to http://nothingmuch.woobling.org/MO

[07:33] <lambdabot> Consider it noted.

[07:33] <nothingmuch> @hug

[07:33] <lambdabot> Maybe you meant: msg run

[07:33] <nothingmuch> @botsnack

[07:33] <lambdabot> :)

[07:33] <nothingmuch> ARR! how ye be fairing?

[07:33] *** prefiks left
[07:38] <svnbot6> r13435 | malon++ | smokeserv/smokeserv-server.pl - fix broken links to tests from TAP matrices

[07:38] <svnbot6> r13435 | malon++ | - Reported by markstos++

[07:38] <svnbot6> r13435 | malon++ | - Note that ext/ links will stay broken, because those files aren't checked out

[07:43] *** traecer joined
[07:45] <Juerd> It's Prinsjesdag here today. The day on which the government announces the new budgets, and the queen reads this all.

[07:45] *** drrho joined
[07:48] <nothingmuch> Juerd: here that could constitute as a talk like a pirate day activity

[07:48] <nothingmuch> they are taking more budgets from welfare

[07:49] <nothingmuch> and directing them to the army

[07:49] <nothingmuch> so the pilots can have better lounges

[07:49] <Juerd> Well, I just can't wait for the Queen to talk like a pirate.

[07:49] <Juerd> ...for more than an hour

[07:49] <nothingmuch> =)

[07:49] <Juerd> "Yarr mateys of the Staten Generaal!"

[07:51] <Juerd> ("Geachte leden van de Staten-Generaal", "Dear members of the parliament"))

[07:51] <Juerd> s/))/)/

[08:04] *** dduncan left
[08:11] *** cookys_ joined
[08:12] *** dduncan joined
[08:13] <dduncan> I have a question on ... I think it's called "parameterized types"

[08:14] *** idiotmax joined
[08:15] <dduncan> or "parametric types"

[08:15] <TreyHarris> heh, shoot... i was just writing something about them :-)

[08:16] *** ron__ joined
[08:16] <dduncan> right then ... I was thinking that perhaps I have been thinking too complicated about how to make a Tuple type

[08:16] <dduncan> then I thought, I don't know if I can do this myself or if it has to be built-in

[08:16] <dduncan> if I could just say:

[08:17] <dduncan> my Tuple of { Str $name, Int $age } $foo;

[08:17] <dduncan> or there-abouts

[08:17] <dduncan> the part in the curlies is meant to look sort of like a Signature

[08:18] <dduncan> on the other hand, its meant to look kind of like a C struct, but without the cruft

[08:18] <nothingmuch> dduncan: classes can receive tytpe parameters

[08:18] <TreyHarris> I believe it would be my Tuple[Str, Int]

[08:18] <dduncan> they need to be named

[08:18] <nothingmuch> class Tuple[::t1, ::t2] { has t1 $fst; has t2 $snd }

[08:18] <nothingmuch> it kinda sucks that they're positionals

[08:19] <nothingmuch> but i believe it's on the agenda to fix them

[08:19] *** kanru joined
[08:19] <TreyHarris> my Tuple[Str, :name, Int, :age] today I think then

[08:19] <dduncan> part of the thing is, the base Tuple type itself doesn't declare any attributes ... its users do that

[08:19] <TreyHarris> though none of this works yet, so 'today' only in the sense of the current state of the synopses

[08:20] *** ruoso joined
[08:20] <dduncan> same as users can say "Array of Int" vs "Array of Str"

[08:20] <nothingmuch> so what type is it?

[08:20] <nothingmuch> why not just use an anonymous class?

[08:21] <dduncan> okay, how do I do that?

[08:21] <nothingmuch> my class { has Str $.name; has Str $.age } $foo;

[08:21] <dduncan> I see

[08:21] <nothingmuch> i suspect

[08:21] <nothingmuch> my $class = class { }; # this you can definitely do

[08:21] <nothingmuch> and then you can bind it to a lexical type, i guess

[08:21] <nothingmuch> my ::foo := $class;

[08:21] <nothingmuch> my foo $var;

[08:21] <nothingmuch> that *should* work

[08:21] <nothingmuch> but it's only meaningful at runtime, of course

[08:22] <TreyHarris> anonymous classes are supported, though their syntax is unspecified.  i'd be surprised if my class { .. } $foo did not work though.

[08:23] <dduncan> even if that works, I would need syntactic sugar so that it looks like they are declaring a restricted hash

[08:23] <dduncan> what I want is sort of like a restricted hash but that in addition to the names, you declare types for each possible member

[08:24] <dduncan> which then looks more like a class def

[08:24] <TreyHarris> but, if you're going to have more than one Tuple of the same Tuple type, and you need to support operations on two Tuples iff they are of the same Tuple type, then you'd need to use parameterization, and agreed, the current syntax is somewhat lacking.

[08:24] <dduncan> maybe the anons will do what I want though

[08:25] <TreyHarris> creation of new containers is currently unspecced as well, and it sounds like you're looking for a new container type.

[08:25] <dduncan> there is a set of operators specific to tuples that these anons would need to have, so naming them as a parameterized class could do that, or I could say anon {...} does Tuple role

[08:25] <dduncan> I'm hoping to reuse the meta-model functions to do some of the hard stuff

[08:26] <dduncan> it is possible that a new container type is appropriate

[08:26] <dduncan> my main goal here, however it is accomplished, is that the multi-paradigmitic Perl 6 would support the relational data model as one of its paradigms ... which means tuple and relation data types and operators

[08:27] <nothingmuch> you could declare a meta object for tuples

[08:27] <dduncan> they don't necessarily have to have the same names as existing implementations

[08:27] <nothingmuch> and declare a DSL that inherits the grammar for classes

[08:27] <nothingmuch> and simply constructs a different meta object as a result

[08:27] <dduncan> well, I would like to know how I do that then

[08:27] <nothingmuch> but that's not going to happen soon

[08:27] <dduncan> part of my problem is that it appears that the meta-model is unspecced

[08:28] <nothingmuch> i have a sketch that was working well for me

[08:28] <nothingmuch> based on moose

[08:28] <nothingmuch> which incorperates more than a year of research by stevan and audrey

[08:28] <nothingmuch> audreyt wants to add it into pugs

[08:28] <dduncan> and being a perfectionist of sort, I'm having trouble trying to make a half-baked version using what features do exist

[08:28] <nothingmuch> if that sounds good enough for you to poke with: http://nothingmuch.woobling.org/MO/

[08:28] <lambdabot> Title: Index of /MO

[08:29] <nothingmuch> *nod*

[08:29] <dduncan> I want to be able to use the meta-model api, yesterday

[08:29] <nothingmuch> me too

[08:29] <nothingmuch> that's why i wrote one ;-)

[08:29] <nothingmuch> i hope larry likes it

[08:29] <dduncan> the ironic thing is, isn't the Perl 6 meta-model already implemented?

[08:29] <dduncan> isn't Perl 6 using it right now?

[08:29] <nothingmuch>  several are

[08:29] <nothingmuch> not really

[08:30] <dduncan> so is it just a matter of exposing the API to perl programs?

[08:30] <nothingmuch> well

[08:30] <nothingmuch> pugs' meta model is more of a temporary placeholder

[08:30] <nothingmuch> it's optimized for fun

[08:30] <dduncan> which one is yours?

[08:30] <nothingmuch> that is, getting the max benefit in the least amount of heeadache

[08:30] <nothingmuch> mine is just in that URL

[08:30] <nothingmuch> it's in perl 5

[08:31] <nothingmuch> it's designed to easily work in haskell too

[08:31] <dduncan> one issue is, in my mind, what I require should be technically very simple

[08:31] <TreyHarris> well, without creating a new container, and if you wanted it at compiletime, I think you'd have to do something like class Tuple[Array of (Str Pair{::Type})] or some such....

[08:32] <dduncan> you used parens right there; what does that signify?

[08:32] <TreyHarris> er, no, it would be a value parameter, not a type parameter, so class Tuple[Array of (Str Pair{::Type}) $tupledef] or some such....

[08:32] <nothingmuch> dduncan: this is all highly conjectural

[08:32] <TreyHarris> dduncan: just grouping parens, and == nothingmuch

[08:33] <TreyHarris> probably unnecessary as i read S09

[08:33] <nothingmuch> this is one of the areas that will probably get a big makeover

[08:33] <dduncan> regarding the meta-model API, is that something that @Larry is designing, or is someone else like yourselves doing it officially?

[08:33] <nothingmuch> once it's actually implemented

[08:33] <TreyHarris> but your tuple would need an array of pairs with type keys and string values

[08:33] <dduncan> pretty much

[08:34] <nothingmuch> dduncan: no word from @Larry yet

[08:34] <dduncan> er, it is a mapping of attribute names and type names

[08:34] <nothingmuch> but once i feel that MO is kinda done, i will propose it officially

[08:34] <dduncan> s/type names/type names or other anonymous type defs/

[08:34] <nothingmuch> and hopefully @Larry will run it through and extract the parts they agree with and we will at least have something

[08:34] <nothingmuch> btw, MO doesn't deal with typing

[08:35] <nothingmuch> that's for a separate layer

[08:35] <TreyHarris> unordered?  then you could use class Tuple[Str %attribs{::Type}] or somesuch

[08:35] <dduncan> is MO a design or does it work now?

[08:35] <nothingmuch> that must interpret the meta model

[08:35] <nothingmuch> MO works

[08:35] <nothingmuch> but it's slow

[08:35] <nothingmuch> and desugared

[08:35] <dduncan> yes, tuple attributes are unordered by definition

[08:35] <nothingmuch> my next step is compiling it down to perl 5

[08:35] <nothingmuch> for the named method dispatch type

[08:35] <nothingmuch> which is the only paradigm supported by perl 5 ;-)

[08:35] <TreyHarris> dduncan: interesting.  i was taught that tuples are ordered

[08:36] <dduncan> a Tuple is like a key-and-value-type-constrained Mapping or Hash

[08:36] <TreyHarris> how does a tuple differ from a struct then?

[08:36] <nothingmuch> TreyHarris: he means something more like a record

[08:36] <dduncan> yes

[08:36] <dduncan> actually, the term tuple is overloaded

[08:36] <dduncan> in the relational data model, it is a set of zero or more triples: name, type, value

[08:37] <dduncan> the names are all unique

[08:37] <dduncan> and keying is by name rather than by position

[08:37] <dduncan> a tuple type is a collection of name, type pairs

[08:37] <dduncan> and values of that type fill in the value parts

[08:37] *** ron__ joined
[08:37] <dduncan> sort of like class definitions ...

[08:37] * nothingmuch goes to excercise

[08:37] <dduncan> a tuple type is a class and a tuple value is an object

[08:37] <dduncan> this said ...

[08:38] <dduncan> if using the word Tuple is going to confuse people, where some think they are ordered, we could use another word ... maybe Record instead

[08:38] <dduncan> it doesn't matter so much to me what it is named, as long as something with the right API and a descriptive name exists

[08:39] <TreyHarris> well, wikipedia, the mother of accuracy, says tuples are ordered in the first sentence ;-)

[08:39] <dduncan> one minute ...

[08:39] <dduncan> that's domain specific ... some domains call tuples ordered, some don't

[08:39] <dduncan> so perhaps Tuple isn't the best name, considering both of those meanings exist

[08:40] <TreyHarris> but even if it is an overloaded term, I certainly learned the term as meaning ordered and until today wasn't aware that there was contention on the matter.  but your argument in re set theory versus English could apply here :-)

[08:40] <TreyHarris> yes :)

[08:40] <dduncan> mind you, even the ordered version comes from math

[08:41] <dduncan> what about "Record"? ... does that suggest that fields are ordered?

[08:41] <TreyHarris> but yes, the type parameter for whatever you call it would be that you'd need a mapping of types to strings (or some other symbolic thing)

[08:42] <dduncan> elements of tuples are called attributes, at least in the relational model

[08:42] <TreyHarris> dduncan: i think record is such an incredibly overloaded word that you can usurp it for any typed attribute relationship you might like and no one could reasonably argue :-)

[08:42] <dduncan> that said, I do still prefer the most specific name possible that is applicable

[08:43] <dduncan> I'm trying to search wikipedia now, but it seems to be stuck

[08:43] <TreyHarris> well, then, it might be clearer to define a type, ThingieAttribute, containing a Type and a Symbol (or Str or whatever), and then say that Thingie (I'll leave it to you to decide a name) takes a Bag of ThingieAttributes

[08:44] <TreyHarris> heirarchical typing is a PITA in every language that supports it.

[08:45] <TreyHarris> AFAIK

[08:47] <zgh> that's a quotable quote

[08:47] <TreyHarris> zgh: which? :-)

[08:47] <dduncan> and Perl 6 supports it already

[08:47] <dduncan> eg, Foo of Bar of Baz

[08:47] <zgh> 01:45 < TreyHarris> heirarchical typing is a PITA in every language that supports it.

[08:48] <TreyHarris> well, that's not so bad, but (Array of Bar) Foo of (Array of Baz) Bat and such....

[08:48] <zgh> and perl6's support is more fun than most

[08:48] <dduncan> yes

[08:49] <TreyHarris> zgh: i'm liking it so far, but i worry about it.  trying to finish a writeup of one of my concerns in fact

[08:50] <zgh> TreyHarris: look forward to reading it

[08:51] <dduncan> Trey, post that thing you're writing to p6l or something when you're done

[08:51] <dduncan> and btw, even if it isn't sanctioned yet, I would be happy to use even an unofficial metamodel API soon, so there's something to play with

[08:52] <dduncan> anyway, I'm off &

[08:52] <zgh> Moose++

[08:52] <lumi> Haskell does the higher-order typing nicely

[08:52] <dduncan> I want to play with it in perl 6 though

[08:53] <TreyHarris> lumi: I need to relearn Haskell.  I learned it immediately after Gofer and the two are quite muddled in my mind

[08:53] <TreyHarris> where is YAHT, btw?  i went looking for it the other day and didn't find it, except for the copy in the pugs repo which appears to be truncated

[08:54] <lumi> There isn't a link in READTHEM?

[08:54] *** ron__ joined
[08:54] <TreyHarris> lumi: there is, but it is 404

[08:55] <TreyHarris> perlbot: YAHT

[08:55] <perlbot> Yet Another Haskell Tutorial -- http://www.isi.edu/~hdaume/htut/

[08:55] <TreyHarris> yes, that's broken

[08:55] <lumi> http://www.cs.utah.edu/~hal/publications.html

[08:55] <lumi> (He moved, apparently)

[08:56] <lumi> http://pub.hal3.name/#daume02yaht

[08:56] <TreyHarris> perlbot: relearn YAHT http://www.cs.utah.edu/~hal/publications.html

[08:56] *** Sal joined
[08:56] <TreyHarris> perlbot: YAHT

[08:56] <perlbot> Yet Another Haskell Tutorial -- http://www.isi.edu/~hdaume/htut/

[08:56] <TreyHarris> hrm.

[08:57] <TreyHarris> perlbot: relearn YAHT as Yet Another Haskell Tutorial -- http://www.cs.utah.edu/~hal/publications.html

[08:57] <perlbot> relearned entry for YAHT

[08:58] <TreyHarris> perlbot: relearn YAHT as Yet Another Haskell Tutorial -- http://www.cs.utah.edu/~hal/docs/#daume02yaht

[08:58] <perlbot> relearned entry for YAHT

[08:58] *** foo\ joined
[09:00] <lumi> perlbot: YAHT

[09:00] <perlbot> Yet Another Haskell Tutorial -- http://www.cs.utah.edu/~hal/docs/#daume02yaht

[09:00] <svnbot6> r13436 | lumi++ | YAHT moved, fixed URL

[09:00] <TreyHarris> lumi: hah, I just conflicted trying to make the same change but using the other URL :-)

[09:01] *** dduncan left
[09:02] <TreyHarris> dduncan: looks like in Haskell, a tuple is ordered

[09:02] *** cookys joined
[09:02] <lumi> TreyHarris: I think he means that URL to be permanent

[09:03] <TreyHarris> perlbot: relearn YAHT as Yet Another Haskell Tutorial -- http://pub.hal3.name/#daume02yaht

[09:03] <perlbot> relearned entry for YAHT

[09:03] * zgh boggles at 192 pages

[09:03] <zgh> that's a lot of tutorial

[09:04] <mugwump_> that's ok, it means the slope's not so steep ;)

[09:04] <zgh> i really liked haskell for the month or two that i knew it, but that was years ago and now it's incomprehensible again ^_^

[09:05] * zgh reads &

[09:05] <TreyHarris> well, my first formal programming course was in Haskell, so it should be like riding a bicycle, but strangely it's not.

[09:06] *** ron__ joined
[09:06] *** drrho joined
[09:07] <zgh> wow the descriptions of haskell's goals sound amazingly like perl6

[09:07] <zgh> 's goals

[09:08] <lumi> Perl 6 is all about ideas that enjoy wide consensus :)

[09:12] <TreyHarris> another random typing question: does every type encompasses undef?  or is it necessary to write (--> Int|undef), etc.?

[09:14] * ruoso wonders if there is some class/module modifier to tell it should be read-only (in the terms of a shared library)

[09:15] <TreyHarris> you mean closed?

[09:16] <ruoso> hmmm

[09:17] <TreyHarris> S12:1521: "There is I<no> syntax for declaring individual classes closed or final. The application may only request that the optimizer close and finalize unmarked classes."

[09:18] <ruoso> It makes more sense to think as Roles actually

[09:18] <ruoso> actually, roles works just like shared libraries

[09:19] <TreyHarris> but one can instantiate a role as an anonymous class.  so the above would apply to roles as well, i think.

[09:21] <ruoso> TreyHarris, but I think you don't have a way to change the Role itself

[09:21] <ruoso> you can apply other roles and traits to an object

[09:21] <ruoso> or even create an anonymous class that "does" a role

[09:21] <TreyHarris> role Foo { ... }; role Foo is also { ... }

[09:22] <ruoso> can you use "is also" in a role?

[09:23] <TreyHarris> no, sorry, you're right

[09:23] <ruoso> hmmm..

[09:23] <TreyHarris> roles are closed at compile time

[09:23] * ruoso having weird ideas

[09:24] <ruoso> If this constraints apply to roles,

[09:24] *** idiotmax joined
[09:24] <ruoso> one could make standard shared libraries from them

[09:24] <ruoso> and use them wherever he wants

[09:25] <ruoso> does it makes sense?

[09:25] <ruoso> of course this would mean linking to the vm

[09:25] <TreyHarris> i need more context to know what you mean.

[09:26] <ruoso> It's possible to create Perl 6 shared libraries

[09:26] <ruoso> that loads as any other shared library

[09:27] <ruoso> and are actually shared among processes

[09:27] <TreyHarris> why would that preclude runtime extension?

[09:28] <TreyHarris> a perl 6 shared library wouldn't be ELF or dylib or something like that, it would be something special to Perl 6.

[09:28] *** ivas joined
[09:30] * ruoso trying to think better and ellaborate more on that

[09:31] *** zgh joined
[09:33] <ruoso> a shared library is just a ELF that declares some symbols with pointers to the code to be run as these symbols

[09:35] *** zgh joined
[09:37] *** idiotmax joined
[09:38] * ruoso still thinking...

[09:52] *** penk joined
[10:13] *** zgh joined
[10:30] *** ptc joined
[10:41] *** b00t joined
[10:49] *** jferrero joined
[10:57] *** agentzh joined
[11:03] <agentzh> i'm fixing the pugs -V problem.

[11:03] *** TimToady joined
[11:05] <agentzh> it seems that ghc won't compile Pugs.Version even if pugs_version.h has been updated.

[11:06] <agentzh> so i'd make version_h.pl explicitly touch src/Pugs/Version.hs.

[11:06] <agentzh> this should work for TreyHarris.

[11:07] <agentzh> for svk users, i'd set $svn_entries to 'force_run' which is a phony target.

[11:07] <agentzh> so pugs_version.h will be updated at every "make"

[11:07] <agentzh> (for svk only)

[11:08] <agentzh> for svn users, .svn will still be honored.

[11:08] *** chris2 joined
[11:10] <agentzh> unfortunately i don't use svk, so i can't effectively test the svk part.

[11:11] *** iblechbot joined
[11:12] <lumi> agentzh: I use svk, how would I test this?

[11:13] <agentzh> lumi: i'm still investigating the svn part. (there seems to be some problem.) i'll ping you if i'm ready. :)

[11:14] <lumi> Okay

[11:15] <agentzh> .o O { testing the pugs build system is really tricky }

[11:18] *** elmex joined
[11:22] *** DucK_ joined
[11:23] *** cognominal joined
[11:29] <agentzh> done!

[11:29] <agentzh> lumi: can you help me now?

[11:30] <lumi> agentzh: Yep, tell me who to shoot

[11:30] <agentzh> after i commit the change, please don't rebuild your pugs.

[11:30] <agentzh> after "svk pull", simply run "Makefile.PL".

[11:30] *** christopher joined
[11:31] <agentzh> committed.

[11:31] <svnbot6> r13437 | agentz++ | * attempt to fix the rev number mismatch in pugs -v

[11:31] <agentzh> after "perl Makefile.PL"

[11:31] <agentzh> run "make fast"

[11:32] <agentzh> make sure you see the line "Current version is 13437"

[11:32] <agentzh> and the line "===> touching D:/projects/Pugs2/util/..//src/Pugs/Version.hs"

[11:32] <agentzh> (or something like that)

[11:33] <agentzh> note that you can't test twice.

[11:33] <agentzh> only the first time is meaningful.

[11:34] <lumi> Yes and yes

[11:34] <agentzh> please also tell me if you see the line "Compiling Pugs.Version"

[11:34] <lumi>         pugs_revision: 13437

[11:34] <lumi> Also yes

[11:34] <agentzh> and the rev number in pugs -v?

[11:35] <lumi> 13437

[11:35] <agentzh> great.

[11:35] <lumi> agentzh++ :)

[11:35] <agentzh> can you run "make fast" again.

[11:35] <agentzh> ?

[11:35] <lumi> Yes, what should I see?

[11:36] <agentzh> this time make sure you see the line "Skipped Pugs.Version" instead of "Compiling Pugs.Version"

[11:36] <agentzh> oh, i mean "Skipping"

[11:36] <lumi> Not writing src/Pugs/pugs_version.h because 13437 == 13437

[11:36] <agentzh> aye

[11:37] <lumi> And it didn't show any of the files it's skipping for some reason, and thus didn't shoe "Compiling Pugs.Version" either

[11:37] <agentzh> and also no "touching"?

[11:37] <lumi> Oh, because I have 6.5

[11:37] <lumi> Yes, no touching

[11:37] <agentzh> oh, i see.

[11:37] <lumi> s/shoe/show/

[11:37] <agentzh> so it works now!

[11:37] <agentzh> yay!

[11:37] <lumi> Hooray! :)

[11:38] <lumi> This should result in correct smokes, right?

[11:38] <agentzh> i'm looking forward to more test reports.

[11:38] <agentzh> lumi: sure

[11:38] <agentzh> the smoker reads rev number from pugs -v

[11:40] <agentzh> if anyone still need the "touch util/version_h.pl" or "make realclean" workaround to get the correct pugs version, please let me know.

[11:40] <agentzh> *needs

[11:42] <agentzh> lumi: thanks for the help. :)

[11:42] <agentzh> lumi++

[11:44] * agentzh looks into the Judy win32 rebuilding problem now.

[11:56] *** Limbic_Region joined
[12:01] *** discordja joined
[12:10] *** xinming joined
[12:19] *** ofer0 joined
[12:24] *** iblechbot joined
[12:27] <ptc> #join parrot

[12:28] <Limbic_Region> ptc try s|#|/|

[12:28] <Limbic_Region> although you may be disappointed

[12:28] <Limbic_Region> #parrot is not on freenode

[12:28] <Limbic_Region> you want irc.perl.org

[12:28] <Limbic_Region> salutations all btw

[12:29] <kolibrie> Limbic_Region: salutations

[12:32] *** lumi joined
[12:33] *** agentzh joined
[12:34] <agentzh> writing Makefile for nmake is a nightmare...

[12:34] *** zgh joined
[12:34] <agentzh> i'm making full use of my perl 5 skills to do it right. :(

[12:34] <Limbic_Region> agentzh - by hand?  Or are you writing code to write a makefile

[12:35] <agentzh> 60% is generated while 40% is written by hand.

[12:35] <Limbic_Region> oh - if you are writing code to generate the Makefile then there should be some nifty tricks you can pick up by looking at how Pugs does it

[12:35] <agentzh> 100% automated seems impossible.

[12:36] <agentzh> Limbic_Region: sure

[12:36] <Limbic_Region> in fact, the generated Pugs Makefile doesn't even require nmake.exe 7.x (I accidently had a $ENV{PATH} problem and used 1.5)

[12:37] <agentzh> Limbic_Region: yes, i'm also writing nmake 1.5-compatible code.

[12:37] <Limbic_Region> short lines are key there

[12:37] * agentzh is just trying to understand the Judy compilation flow.

[12:37] *** discordja joined
[12:38] <agentzh> Limbic_Region: really? i didn't know. :)

[12:38] <agentzh> so i need to use "\" to split long lines?

[12:38] <agentzh> i didn't have nmake 1.5 so i can't test it. :)

[12:38] <Limbic_Region> agentzh - I am not even sure that will work though audreyt would know for sure

[12:39] <agentzh> s/didn't/don't/

[12:39] <agentzh> okay

[12:39] <Limbic_Region> she is the one that fixed the Pugs Makefile for me due to the long line breakage IIRC

[12:40] <agentzh> ah

[12:40] <Limbic_Region> does this have anything to do with Makefile::Parser ?

[12:40] <agentzh> to my surprise, pugs' Makefile on my machine contains a lot of very long lines. :)

[12:41] <agentzh> Limbic_Region: nah

[12:41] <agentzh> i'm just wanting to offer a Makefile.win for judy.

[12:42] <agentzh> so we win32 guys won't need to build judy at very make if we have a Makefile.

[12:42] <Limbic_Region> agentzh - so what are the major differences then between a nmake compatible Makefile and say - dmake or ming32-make or msys make?

[12:43] <agentzh> i planned to rewrite Makefile::Parser completely this summer. unfortunately i sidetracked to pugs. :)

[12:43] <Limbic_Region> s/un//

[12:43] <agentzh> nmake is much more stupid.

[12:43] <agentzh> there's very few magic in nmake that i can use.

[12:44] <agentzh> i'm not familiar with dmake. not sure if it's better.

[12:44] <agentzh> gmake is very very powerful compared to nmake.

[12:46] <Limbic_Region> well, IMO, the solution would be to remove the dependency on nmake and use another freely available make on Win32

[12:46] <Limbic_Region> but that's just my opinion

[12:47] <agentzh> well, my Makefile.win32 should also work with other versions of make.

[12:47] <agentzh> its syntax very very simple.

[12:48] <Limbic_Region> well, good luck

[12:48] <agentzh> *is

[12:48] <agentzh> thanks

[12:52] *** ludan joined
[12:53] <ludan> ciao

[13:12] *** baest joined
[13:19] *** dakkar joined
[13:24] *** fglock joined
[13:24] <agentzh> yay! now we have Makefile.win32 for Judy!

[13:25] <agentzh> This Makefile saves 1/3 of the running time of "nmake fast" if there's no change in the pugs tree.

[13:25] *** crem joined
[13:28] *** weinig|zZz is now known as weinig|away

[13:28] <svnbot6> r13438 | agentz++ | [judy/Judy-1.0.3/src/Makefile.win32]

[13:28] <svnbot6> r13438 | agentz++ | - added this Judy Makefile for Win32 users.

[13:28] <svnbot6> r13439 | agentz++ | [util/build_pugs.pl]

[13:28] <svnbot6> r13439 | agentz++ | - the pugs build system now uses Judy's Makefile.win32

[13:28] <svnbot6> r13439 | agentz++ |   instead of .bat.

[13:36] *** discordja joined
[13:46] *** BooK joined
[13:50] *** chris2 joined
[13:50] <svnbot6> r13440 | agentz++ | [third-party/judy/Judy-1.0.3/src/hs_build.bat]

[13:50] <svnbot6> r13440 | agentz++ | - added comment that this file is no longer used by

[13:50] <svnbot6> r13440 | agentz++ |   the pugs build system.

[13:51] <fglock> mm - I believe t/xx-uncategorized/rule_recursive.t is wrong - the first choice in / <null> | x <r> / is <null>

[13:53] *** agentzh joined
[13:59] <svnbot6> r13441 | agentz++ | [third-party/judy/Judy-1.0.3/src/Makefile.win32]

[13:59] <svnbot6> r13441 | agentz++ | - added missing items to its `clean' target.

[13:59] <svnbot6> r13442 | agentz++ | [util/build_pugs.pl]

[13:59] <svnbot6> r13442 | agentz++ | - added /nologo to nmake calling.

[13:59] <audreyt> fglock: I noticed too, it should be corrected

[14:00] <fglock> ok

[14:02] <svnbot6> r13443 | agentz++ | [Makefile.PL]

[14:03] <svnbot6> r13443 | agentz++ | - added the `judy_clean' target to the Makefile to be

[14:03] <svnbot6> r13443 | agentz++ |   generated. judy_clean invokes "make clean" on *nix and

[14:03] <svnbot6> r13443 | agentz++ |   "nmake /F Makefile.win32 clean" on Win32.

[14:03] <svnbot6> r13443 | agentz++ | - made `judy_clean' a dependent of the `realclean'

[14:03] <svnbot6> r13443 | agentz++ |   target.

[14:03] <svnbot6> r13443 | agentz++ | (I'm sure cmarcelo will be happy with this commit. :))

[14:06] <svnbot6> r13444 | agentz++ | [Makefile.PL]

[14:06] <svnbot6> r13444 | agentz++ | - renamed the `judy_clean' target to `cleanjudy'. :)

[14:06] <agentzh> anyone on *nix willing to test Makefile.PL for me?

[14:07] <agentzh> simply run "perl Makefile.PL && make cleanjudy" and paste the outputs here.

[14:07] <agentzh> (i mean via nopaste)

[14:08] <agentzh> i can only test the win32 part of the new patch.

[14:10] *** ofer0 joined
[14:11] * agentzh thinks #perl6 is kinda inactive at this moment. :)

[14:13] <agentzh> i'm pleased to see the pugs build system becomes better after tonight's work. whee!

[14:14] *** thepler joined
[14:15] <agentzh> i'm not sure if it's really worth my time because audreyt has said the build system will experience great refactoring once GHC 6.6 is out.

[14:15] <agentzh> but anyway...

[14:17] * agentzh now tries to find something else to do.

[14:19] <agentzh> okay, 22:17 PM here. end of day for me &

[14:19] *** agentzh left
[14:19] <ajs> TreyHarris: I disagree with both the assertion that Perl 6 code as shared lib would prevent runtime modification AND that Perl 6 as shared lib would not be an elf or similar shared object. There are lots of ways to do both.

[14:19] <lambdabot> ajs: You have 1 new message. '/msg lambdabot @messages' to read it.

[14:20] <ajs> Thank you lambdabot! ;)

[14:20] *** agentzh joined
[14:21] <agentzh> @tell TreyHarris the pugs -v rev number problem ought to have been solved.

[14:21] <lambdabot> Consider it noted.

[14:21] <agentzh> @tell dduncan the pugs -v rev number problem ought to have been solved.

[14:21] <lambdabot> Consider it noted.

[14:21] <ajs> agentzh: I'll run it for you

[14:21] <agentzh> @tell TimToady the pugs -v rev number problem ought to have been solved.

[14:21] <lambdabot> Consider it noted.

[14:22] <ajs> tell me how to nopaste

[14:22] <agentzh> ajs: nice!

[14:22] <kolibrie> ajs: see topic

[14:22] <agentzh> http://sial.org/pbot/

[14:22] <lambdabot> Title: sial.org Pastebot - pasteling

[14:22] <ajs> I have to re-update. I was hunting through revisions for a bug, so I need to get a clean update first... just a few

[14:23] <agentzh> ajs++

[14:24] <ajs> Hmmm... gnupg is running a logo contest. Makes me think about a pugs logo contest. That would be an interesting item for just about the time we're ready for wider beta.

[14:25] <agentzh> hehe

[14:25] <agentzh> that's a funny idea

[14:26] <ajs> I can just see someone doing a pug dog with a hump on it's back and dollar-signs for eyes....

[14:26] <agentzh> lol

[14:26] *** penk joined
[14:27] <ajs> damn, I'm getting this "object of the same name already exists" problem where I have to wait for svn to die for 30 seconds, delete something and re-run

[14:28] *** buetow joined
[14:28] <agentzh> ah

[14:28] *** zgh joined
[14:29] <ajs> It's an iterative thing... will take me a few more min

[14:29] *** hexmode joined
[14:29] <agentzh> no problem. :)

[14:29] <agentzh> i can wait.

[14:30] <ajs> Pastebot is nice.

[14:31] <ajs> What are the current efforts with respect to handling Perl 5 code? Are there multiple?

[14:32] <agentzh> you mean p5 embedding or v6.pm?

[14:33] <ajs> I mean Perl 5 code as parsed by Perl 6 compilers.

[14:33] * agentzh doesn't quite understand.

[14:33] <ajs> use v6; my $x = 1; use v5; $x=~s/(.)\1//g; use v6; say $x;

[14:34] <ajs> or whatever. dumb example, but you get the point

[14:34] <agentzh> oh, i'm not aware of such kind of things in pugs.

[14:34] <agentzh> iirc, v6.pm can handle use v5.

[14:34] <agentzh> but not sure.

[14:34] <ajs> Ok, I thought someone was writing a p5 parser/runtime since PONIE was kaput

[14:34] <agentzh> fglock: confirm it?

[14:35] <fglock> agentzh: yes

[14:36] <fglock> agentzh: but v6.pm doesn't compile p5 code - it passes it to perl5

[14:36] <ajs> I really want to know what makes svn lose it's brain and decide not to update a subdir unless I manually blow it away

[14:36] <agentzh> got it

[14:37] <ajs> fglock: Yeah, it seems to me that we need a pure Perl 6 parser/runtime for Perl 5 at some point, though that's a huge job, and figuring out how to move over XS would be interesting.

[14:37] <agentzh> fglock: btw, i'm so glad to see you are implementing missing features in PCR.

[14:38] <agentzh> .o O ( only perl5 can parse perl5 )

[14:38] <fglock> agentzh: thanks!

[14:38] <ajs> agentzh: Hence the proposal that Perl 6 parse Perl 5 ;)

[14:38] <agentzh> fglock: thank _you_!

[14:39] <fglock> ajs: I think the p6p6 compiler can be reused to compile perl5 - but it would need a lot of tweaking

[14:39] <agentzh> ajs: that can be very hard i'm afraid. :)

[14:39] <ajs> I was looking at it earlier. I would never have wanted to write lex/yacc from scratch for P5. It's WAY too context sensitive. However, P6 rules make a lot of that easier to cope with.

[14:39] <fglock> the perl6 parser is actually much simpler than the perl5 parser

[14:40] <ajs> fglock: yes!

[14:40] *** justatheory joined
[14:42] <ajs> The problem with P5 is that you have to read the P5 source code for the spec, and it's often heuristicly defined.

[14:42] <avar> p5 can't be parsed with a plain lex/yacc combo

[14:42] <ajs> cd third-party\judy\Judy-1.0.3\src && nmake /nologo /F Makefile.win32 clean

[14:42] <ajs> /bin/sh: line 0: cd: third-partyjudyJudy-1.0.3src: No such file or directory

[14:43] <fglock> lunch &

[14:43] <agentzh> ajs: you're on *nix?

[14:44] <agentzh> ajs: thank you for your report! fixing

[14:44] <kolibrie> agentzh: I'm planning on rebuilding pugs in a couple hours, and can test your Makefile

[14:45] <kolibrie> if no one else gets there first

[14:45] <agentzh> kolibrie: that's fine.

[14:45] <agentzh> kolibrie: ajs just found a bug in Makefile.PL

[14:45] <agentzh> and i'm now fixing.

[14:45] <ajs> Work thing coming up... brb

[14:45] <agentzh> that's...really a stupid mistake. :P

[14:46] <agentzh> ajs: see you!

[14:46] <agentzh> ajs++

[14:47] <ajs> Ok, taken  care of.

[14:48] <ajs> Let me know when I should try again

[14:48] <agentzh> okay!

[14:50] <agentzh> ajs: now you can try again. :)

[14:51] <agentzh> committed already.

[14:51] <svnbot6> r13445 | agentz++ | [Makefile.PL]

[14:51] <svnbot6> r13445 | agentz++ | - fixed a stupid OS detecting mistake. (thanks ajs++ for

[14:51] <svnbot6> r13445 | agentz++ |   reporting this bug)

[14:51] <ajs> Trying

[14:53] <agentzh> it at least works for both my cygwin and windows. :)

[14:54] <pasteling> "ajs" at 63.107.91.99 pasted "judy run failed" (80 lines, 3K) at http://sial.org/pbot/19794

[14:55] <agentzh> oh...

[14:55] <agentzh> looking now

[14:56] <ajs> Looks like a Makefile wasn't regenerated that was needed in a "make clean" step

[14:56] *** cjeris joined
[14:56] <agentzh> weird.

[14:57] <agentzh> it shouldn't have triggered in the perl Makefile.PL step.

[14:57] *** buetow joined
[14:58] <ajs> Sec, let me put in some echos between commands. I think Makefile.PL had just finished

[14:59] <ajs> Yeah, that "cd third-party..." is the first line of output from "make cleanjudy", and it gets no further than that, reporting that there is no rule to make target 'clean'

[14:59] <ajs> In the totally annoying gnuish `clean' quoting... grrr...

[15:00] <agentzh> ajs: the error messages are from "make cleanjudy" rather than "perl Maekfile.PL", right?

[15:00] <ajs> Yep

[15:00] <agentzh> got it.

[15:00] <ajs> Yeah, it looks like there is no Makefile in that directory at all right now

[15:00] <agentzh> fixing

[15:04] <agentzh> ajs: "make fast" and then "make cleanjudy"

[15:05] <agentzh> i really don't want to use Makefile.win32 to clean judy on *nix. ;)

[15:06] <ajs> is make fast an alias for make unoptimized?

[15:06] <agentzh> it seems that your pugs is a fresh checkout.

[15:06] <agentzh> aye

[15:06] <agentzh> or "make optimized" if you prefer.

[15:06] <ajs> agentzh: My pugs has been updated to version 11,000-something and back again, so it's going to be fairly cleaned out.

[15:07] <agentzh> *nod*

[15:07] <ajs> But, one would presume that cleanjudy should depend on fast if it needs it?

[15:07] <agentzh> cleanjudy depends on the judy building not directly on "fast".

[15:08] <ajs> make is still running

[15:09] <agentzh> it requires some time.

[15:09] <ajs> agentzh: I'm just saying, it should have a depend chain that allows it to work "out of the box"

[15:09] <agentzh> ajs: okay, i'll try a fix then.

[15:09] <agentzh> a sec...

[15:11] <agentzh> fixed

[15:11] <agentzh> committing now

[15:11] <ajs> I'll let the first run finish, then I'll re-run after a make distclean to see what the new one does

[15:12] <svnbot6> r13446 | agentz++ | [Makefile.PL]

[15:12] <svnbot6> r13446 | agentz++ | - uses Judy's Makefile.win32 to do cleanjudy (a bug

[15:12] <svnbot6> r13446 | agentz++ |   discovered by ajs++)

[15:12] <ajs> Finished with no errors. Does judyclean just do a make clean in the judy dir?

[15:12] <agentzh> ajs: don't make distclean.

[15:12] <agentzh> that's not needed.

[15:13] <agentzh> ajs: update first

[15:13] <ajs> I was just going to make sure your dependency fix worked

[15:13] <agentzh> use r13446

[15:13] <agentzh> fine

[15:13] <ajs> Re-running now

[15:13] <ajs> no distclean

[15:13] <agentzh> k

[15:14] <agentzh> for testing r13446, simply remove third-party/judy/Judy-1.0.3/src/Makefile will suffice.

[15:14] <agentzh> *removing

[15:15] <agentzh> and also run "make cleanjudy" multiple times...

[15:15] *** discordja joined
[15:15] <agentzh> sorry, i mean third-party/judy/Judy-1.0.3/Makefile

[15:16] <agentzh> distclean won't remove Judy's Makefiles, i'm afraid.

[15:16] <agentzh> even realclean won't either.

[15:16] <agentzh> so one have to do that by hand.

[15:16] <agentzh> *has

[15:16] <ajs> agentzh: Hmm... that's not happy

[15:17] <agentzh> which part is not happy?

[15:17] <ajs> That distclean doesn't distclean

[15:17] <agentzh> heh

[15:17] <ajs> Multiple runs of cleanjudy works

[15:18] <ajs> However ... "perl -MExtUtils::Command -e rm_f JudyCommon\JudyMalloc.o" please tell me something is translating that backslash

[15:19] <agentzh> oh well

[15:19] <agentzh> does "\" work for you?

[15:19] <agentzh> i'll convert \ to /.

[15:19] <agentzh> fixing now

[15:19] <ajs> afk

[15:19] <agentzh> oh...there's no easy fix...

[15:20] <agentzh> i think perl is able to handle that automatically, isn't it?

[15:23] <agentzh> okay, Makefile.win32 is not *nix friendly...i'll revert r13446...

[15:25] <agentzh> well, very few people will run "make realclean" or "make cleanjudy" on a fresh pugs checkout...(unless testers, for sure)

[15:25] <agentzh> so we can safely ignore this corner case.

[15:30] <svnbot6> r13447 | agentz++ | [Makefile.PL]

[15:31] <svnbot6> r13447 | agentz++ | - reverted r13446, since Makefile.win32 is not *nix-

[15:31] <svnbot6> r13447 | agentz++ |   friendly. so we will simply ignore the corner case

[15:31] <svnbot6> r13447 | agentz++ |   that the user does "make realclean" and

[15:31] <svnbot6> r13447 | agentz++ |   "make cleanjudy" on a fresh pugs checkout.

[15:34] <svnbot6> r13448 | audreyt++ | * Remove some redundant imports.

[15:34] <svnbot6> r13449 | audreyt++ | * "do {...} while 1" is now explicitly disallowed.

[15:34] <svnbot6> r13449 | audreyt++ |   (same applies to other statement modifiers."

[15:34] <agentzh> yay! audreyt++

[15:35] <agentzh> so more tests should pass now in do.t.

[15:35] * agentzh thinks he needs a fast machine.

[15:36] <agentzh> okay, win32 builds okay from scratch.

[15:37] <[particle]> how can you run make anything after make realclean? doesn't realclean remove the makefile?

[15:37] <agentzh> cygwin build is broken.

[15:37] <agentzh> [particle]: it's Judy's Makefile, not pugs'

[15:37] *** justatheory joined
[15:38] <[particle]> makefile.pl doesn't create judy's makefile?

[15:38] <agentzh> particle: it doesn't.

[15:38] <agentzh> [particle]: for some reasons that i *do* know. :)

[15:38] *** ivas joined
[15:39] <agentzh> it's impossible to generate a Judy Makefile on Win32.

[15:39] <fglock> anyone help me trace a perl5 problem? in v6, Test::report_failure() - Match objects are being stringified as "Pugs::Runtime::Match=REF(0x87dca7c)" - the overloaded stringification is not being called; it works elsewhere

[15:39] <agentzh> but we can make it so on *nix.

[15:39] *** miyagawa_ joined
[15:39] <[particle]> agentzh: well, it could be as simple as a rename

[15:39] <agentzh> [particle]: rename what?

[15:40] <agentzh> [particle]: thank you for suggesting generating Makefile for Judy dureing Makefile.PL

[15:40] <[particle]> np

[15:40] <agentzh> i'm adding that now.

[15:40] <[particle]> i don't understand makefile.pl much... i'm too used to the configure.pl in parrotland

[15:40] <agentzh> (just for *nix users, since win32 users already have their own Makefile.win32)

[15:40] <[particle]> so, that should remove the corner case?

[15:41] <agentzh> yep!

[15:41] <[particle]> yay!

[15:41] <agentzh> :)

[15:41] *** gunya joined
[15:43] <agentzh> oh, the building logic for *nix judy is bogus.

[15:43] <agentzh> at least it seems to be.

[15:43] <agentzh> i won't fix that since i can't test it locally.

[15:45] <agentzh> is mac's shell similar to *nix?

[15:46] <[particle]> yes, mac's os is bsd-based iirc

[15:47] <agentzh> okay

[15:48] <agentzh> people on mac is lucky.

[15:48] <agentzh> *are

[15:48] <agentzh> particle: Judy's configure takes quite a long time...

[15:49] <[particle]> i see, so rather than subject windows users to a slow process, the result is included instead?

[15:49] <agentzh> i'll check the existence of Makefile and config.status before configure.

[15:50] <agentzh> [particle]: sort of.

[15:50] <agentzh> :)

[15:50] <agentzh> win32's judy building is *damn* fast. :)

[15:51] <fglock> mm - just adding this line makes the program die:  if (overload::Overloaded $got) { print "Overloaded\n" }  - but it only dies several statements later

[15:52] <svnbot6> r13450 | agentz++ | [Makefile.PL]

[15:52] <svnbot6> r13450 | agentz++ | - generated Judy's Makefile during the "perl Makefile.PL"

[15:52] <svnbot6> r13450 | agentz++ |   phase as suggested by [particle]++ (this patch only

[15:52] <svnbot6> r13450 | agentz++ |   affects non-Win32 users.)

[15:53] <agentzh> anyone on *nix willing to test r13450 for me?

[15:53] * agentzh thinks it is a long day for him.

[15:57] <agentzh> svn log ~= s/generated/generates/

[15:58] <ajs> svn log ~~ s/ generated / generates /

[15:58] <mauke> parse error before =

[15:58] <agentzh> :P

[15:58] <agentzh> that is p5. :)

[15:58] <mauke> no, =~ is

[15:58] <ajs> How many people do you think will make the mistake of thinking that whitespace in the substitution spec is ignored?

[15:59] <agentzh> oh, sorry...

[15:59] <agentzh> ajs: have some cycles to try out r13450?

[15:59] <ajs> Yeah, ~= in P6 is going to freak me out for a while

[15:59] <ajs> agentzh: sure

[15:59] <agentzh> it should have fixed all your problems.

[16:00] <agentzh> thanks to [particle]++'s suggestion.

[16:00] <ajs> All my problems? What about that burning sensation?

[16:00] <ajs> clean run, thanks

[16:00] <agentzh> Judy's Makefile is now generated at "perl Makefile.PL"

[16:00] <ajs> nice

[16:00] <agentzh> so "make cleanjudy" on a fresh checkout is fine now.

[16:04] * agentzh has been making so many stupid mistakes since he has well passed his bedtime.

[16:05] <agentzh> my brain gets fried...

[16:06] <[particle]> "this is your brain on pugs"

[16:07] <agentzh> (?)

[16:07] <kolibrie> agentzh: I just finished my svk pull, which commands do you want tested?

[16:08] <agentzh> great

[16:08] <agentzh> "perl Makefile.PL"

[16:08] <agentzh> tell me if you see the Judy configuration process.

[16:08] <agentzh> and also the rev number

[16:09] <agentzh> sorry, ignore the "rev number" crapt.

[16:09] <kolibrie> it did say Configuring Judy...

[16:10] <kolibrie> and then a bunch of automake-style checks

[16:10] <[particle]> agentzh: http://en.wikipedia.org/wiki/This_Is_Your_Brain_On_Drugs

[16:10] <agentzh> what's right below that line?

[16:10] <lambdabot> http://tinyurl.com/jf9cx

[16:10] <agentzh> [particle]: looking

[16:11] <agentzh> kolibrie: oh, that's right.

[16:12] <kolibrie> agentzh: checking whether to enable maintainer-specific portions of Makefiles... no

[16:12] <agentzh> cool

[16:12] <agentzh> kolibrie: that is correct behavior.

[16:12] <kolibrie> agentzh: anything else before I 'make'

[16:13] <agentzh> "make judyclean"

[16:13] <agentzh> sorry, i mean "make cleanjudy"

[16:13] <kolibrie> done

[16:14] <agentzh> any errors/

[16:14] <agentzh> ?

[16:14] <agentzh> so there's no error at all?

[16:15] <kolibrie> just recursed through a bunch of directories, and all looks okay

[16:15] <agentzh> cool

[16:15] <kolibrie> now make?

[16:15] <agentzh> check out third-party\judy\Judy-1.0.3\src to see if any subdirectories contain .o files

[16:16] <agentzh> and .c files which are not under version control.

[16:16] * kolibrie tries to do the backslash to forward-slash conversion in his brain

[16:16] <agentzh> kolibrie: sorry, i copied that directly from my win32 environment.

[16:17] <kolibrie> no .o files, only on .c file: Judy.h.check.c

[16:17] <kolibrie> s/on /one /

[16:17] <agentzh> kolibrie: that .c file is under version control, right?

[16:17] <agentzh> how about subdirectories JudyL and Judy1?

[16:18] <agentzh> are there any .o files?

[16:18] <agentzh> JudyL and Judy1 should not hold any .c files at all.

[16:19] <kolibrie> JudyL and Judy1 have no .o nor .c files

[16:19] <agentzh> yay!

[16:19] <agentzh> so now do "make fast"

[16:19] <agentzh> that is the last thing to test.

[16:20] * kolibrie quickly makes

[16:21] <agentzh> tell me the rev number displayed

[16:21] <kolibrie> at the end, or somewhere in the output?

[16:22] <agentzh> somewhere near the beginning

[16:22] <agentzh> something like "Current version is 13436"

[16:23] <agentzh> if you have missed that, then ingore that.

[16:23] <kolibrie> Current version is 13450

[16:23] <agentzh> thanks!

[16:23] <agentzh> that is what i expected.

[16:23] <agentzh> and the build is going smoothly?

[16:23] <svnbot6> r13451 | audreyt++ | * unTODO one passing test.

[16:23] <kolibrie> so far so good

[16:24] <agentzh> excellent

[16:24] <agentzh> oh, audreyt is still in hacking mode.

[16:24] <agentzh> 0:30 AM for her.

[16:24] <agentzh> (for me too)

[16:24] *** zgh joined
[16:25] * kolibrie only hacks between 05:00 and 20:00

[16:25] <agentzh> kolibrie: have you seen the line "Compiling Pugs.Version"?

[16:25] <kolibrie> haven't been watching

[16:26] <agentzh> somewhere in the middle...

[16:26] <kolibrie> it's on pugs-fps-0.7 right now, would that line be above that, or still to come

[16:26] <agentzh> oh, below it!

[16:27] <agentzh> you're still building prerequisites

[16:27] * kolibrie is running on a slow machine today

[16:27] <agentzh> :)

[16:29] * agentzh has caught a bad cold and he is not very conscious atm.

[16:30] <kolibrie> Configuring Pugs-6.2.12...

[16:30] <agentzh> good

[16:30] <agentzh> a short way to go.

[16:31] <agentzh> kolibrie: you're building from scratch, right?

[16:31] <agentzh> a typical "make fast" should take so long.

[16:31] <agentzh> s/should/should NOT/

[16:32] <kolibrie> agentzh: last build on this computer was at least a month ago

[16:32] <agentzh> anyway, it's a more thorough test though much more time is required. :)

[16:32] <agentzh> kolibrie++

[16:33] <kolibrie> Compiling Pugs.Version      ( src/Pugs/Version.hs, dist/build/Pugs/Version.o )

[16:33] <agentzh> right, that's it. :D

[16:34] <kolibrie> glad I could help

[16:35] <agentzh> so once you have built pugs, the test is successful completely. :)

[16:35] <agentzh> kolibrie: thanks for your feedback!

[16:36] <kolibrie> shucks, GHC's heap exhausted

[16:36] <agentzh> kolibrie: after the build, run "make cleanjudy", and see if the .o and .c files are deteleted as expected.

[16:36] <agentzh> kolibrie: simply rerun "make fast" from that point.

[16:37] <kolibrie> thought so

[16:37] <fglock> I'll need to workaround the overload error - I can't find any references to it in google

[16:38] <agentzh> fglock: good luck! (although i can't help)

[16:38] <kolibrie> fglock: I can maybe test something for you here after my build finishes

[16:40] <fglock> kolibrie: I created a 'nomethod' to trace the problem - the stringification function is not being called at all

[16:42] <kolibrie> fglock: anything I can help you with?  /me really doesn't understand what fglock is battling

[16:43] *** Psyche^ joined
[16:44] <agentzh> well, i can't stay up any more...kolibrie: simply report errors (if any) here. i'll backlog tomorrow.

[16:44] <fglock> kolibrie: do you have v6.pm installed? try running perl5/Pugs-Compiler-Perl6$ perl -It ../../t/xx-uncategorized/rule_recursive.t

[16:44] <kolibrie> agentzh: ok

[16:45] <agentzh> g'night everyone &

[16:45] * agentzh waves

[16:45] *** agentzh left
[16:45] <fglock> kolibrie: you will see errors like " Actual: 'Pugs::Runtime::Match=REF(0x8836228)' "

[16:45] <fglock> because the Match object is not being stringified

[16:47] <kolibrie> fglock: will try in a bit when my build is finished

[16:47] <kolibrie> (all CPU and memory are being used)

[16:51] *** frederico joined
[16:54] <fglock> clkao: ping

[16:55] <clkao> fglock: pong

[16:56] <fglock> clkao: any chance that Data::Bind changes overloading somehow?

[16:57] <clkao> overloading?

[16:57] <clkao> i don't recall overloading in data::bind

[16:58] <fglock> clkao: did you see the error I mentioned above?

[16:58] <clkao> no, looking

[16:58] <clkao> which one?

[16:59] *** Psyche^ is now known as Patterner

[17:00] <fglock> clkao: when you pass a Match object in '$got' to Test::report_failure(), the object can no longer stringify using overload

[17:00] <fglock> but overload::Overloaded($got) reports that it is still overloaded

[17:01] <clkao> uhm.  make a small test case so i can look at after dinner?

[17:01] <fglock> ok

[17:06] <kolibrie> agentzh: make cleanjudy left no .o files in Judy-1.0.3/src, and just that one .c file, but JudyL and Judy1 have lots of .c files

[17:07] <[particle]> kolibrie: i think it's only important if those .c files *are not* in the repo (eg if they're generated)

[17:09] *** lampus joined
[17:10] <TreyHarris> ajs: i wasn't earnestly making either assertion, i was just trying to figure out what ruoso was talking about and trying to provoke him to elaborate on his thoughts.

[17:11] <lambdabot> TreyHarris: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:11] <svnbot6> r13452 | agentz++ | [third-party/judy/Judy-1.0.3/src/Makefile.win32]

[17:11] <svnbot6> r13452 | agentz++ | - commented out CC= and COPT= since that will possibly

[17:11] <svnbot6> r13452 | agentz++ |   break other windows users' judy build.

[17:11] <svnbot6> r13452 | agentz++ | ([particle], Limbic_Region: please check if it works for

[17:11] <svnbot6> r13452 | agentz++ |  you. :))

[17:11] <TreyHarris> @messages

[17:11] <lambdabot> agentzh said 2h 49m 52s ago: the pugs -v rev number problem ought to have been solved.

[17:11] <kolibrie> [particle]: they were not there before I did my make

[17:11] *** kanru joined
[17:13] *** lanny joined
[17:16] <pasteling> "fglock" at 200.17.89.34 pasted "possible overloading problem with Data::Bind" (27 lines, 728B) at http://sial.org/pbot/19799

[17:18] <lanny> So here's a question.  I'm working on writing sort() in Perl 6.  My tests of that sort are unexpectedly succeeding because they are using the builtin sort().  Is there a way to turn off the builtin so my tests successfully fail?

[17:18] <pasteling> "fglock" at 200.17.89.34 pasted "fixed test case - was "possible overloading problem with Data::Bind"" (27 lines, 729B) at http://sial.org/pbot/19800

[17:19] <fglock> lanny: add a package name? like My::sort

[17:20] <[particle]> lanny: you're writing in what language?

[17:20] <lanny> Yeah.  Thought of naming it msort() (based on merge sort).

[17:20] <lanny> I'm writing it in Perl 6.

[17:20] <fglock> lanny or use it as a method: $self->sort()

[17:20] <[particle]> and it's using the builtin perl6 sort?

[17:20] <fglock> $self.sort then

[17:20] <lanny> particle: yes.  lots of changes since I last commmited but t/unspecced/sort.t

[17:21] <[particle]> why not override the sort op?

[17:21] <lanny> The way it's defined in the synposis it's not an op.

[17:21] <fglock> clkao: http://sial.org/pbot/19800 shows the problem

[17:21] <lambdabot> Title: Paste #19800 from "fglock" at 200.17.89.34

[17:21] *** mago joined
[17:21] <Limbic_Region> what am I supposed to check out if it works for me?

[17:22] *** lisppaste3 joined
[17:22] <clkao> fglock: oki

[17:22] <fglock> Limbic_Region: are you talking to me?

[17:22] <Limbic_Region> no

[17:22] <lanny> fglock: Thanks.  That would probably work given the Array:: and List:: definitions (i.e., $thing->sort()).

[17:23] <Limbic_Region> [13:11] <svnbot6> r13452 | agentz++ | ([particle], Limbic_Region: please check if it works for you

[17:23] <Limbic_Region> that's what I am talking about fglock

[17:23] <Limbic_Region> agentzh ping

[17:38] <ajs> lumi: thanks for helping me chase down that @*CHECK bug in -BPIR, but of course, it turns out to be only the FIRST of the errors. -BPIR is simply quite broken.

[17:48] *** integral is now known as ntgrl

[17:48] *** integral joined
[17:50] *** lisppaste3 joined
[17:53] *** glasser joined
[17:53] <svnbot6> r13453 | ajs++ | Add in @*CHECK for PIR backend. Can someone please verify this is correct?

[17:57] *** SubStack joined
[17:58] *** ofer0 joined
[18:01] <pasteling> "ajs" at 63.107.91.99 pasted "r13453 regex error that wasn't happening yesterday" (29 lines, 964B) at http://sial.org/pbot/19802

[18:01] <ajs> Anyone else seeing that/

[18:01] <ajs> ?

[18:08] <ajs> Oh freaky. I'm getting different results each time I run my regex example under v6

[18:10] <fglock> ajs: looking

[18:10] <[particle]> v6 builds up compiled mods as it goes, so the first few times may vary

[18:10] <[particle]> (at least i've seen this before)

[18:13] <ajs> [particle]: The main difference seemed to be between when I ran v6 from inside my pugs tree and when I ran it from outside, but then cding back into pugs yielded no change back

[18:18] *** fglock joined
[18:19] <fglock> ajs: try this (works for me): perl -e 'use v6-alpha' - '  regex b { 1 }; "1" ~~ /<b>/;  $/.perl.say;  '

[18:22] <ajs> Trying it

[18:23] <ajs> still get: Can't locate object method "b" via package "Pugs::Grammar::Base" at (eval 121) line 7.

[18:24] <fglock> ajs: there was a fix for this error yesterday, maybe reinstall v6 ?

[18:25] <ajs> did

[18:26] <fglock> it was "r13430 | fglock++ | v6.pm - added headers to allow rule definitions outside of grammars"

[18:26] <perlbot> What kind of idiot karmas himself?  Your kind of idiot!

[18:28] <ajs> Ah... ok, how do I install v6 from the tree instead of CPAN? Do I just CD into the perl5 subdirs and run make install? README says that's bad

[18:28] <fglock> ajs: that should work

[18:34] *** bernhard joined
[18:37] *** buubot joined
[18:40] *** mdiep joined
[18:45] *** larsen joined
[18:47] <svnbot6> r13454 | lanny++ | [t/unspecced/sort.t]

[18:47] <svnbot6> r13454 | lanny++ | - cleanup to better handle @by with traits

[18:47] <svnbot6> r13454 | lanny++ | - tests for most examples in http://www.nntp.perl.org/group/perl.perl6.language/16578

[18:47] <lambdabot> Title: nntp.perl.org - perl.perl6.language (16578), http://tinyurl.com/j9pt5

[19:02] <svnbot6> r13455 | fglock++ | Pugs-Compiler-Rule - the Rule grammar now allows array and hash aliasing

[19:02] <svnbot6> r13456 | fglock++ | Pugs-Compiler-Rule - comment out debugging info

[19:02] *** dakkar joined
[19:03] *** buubot joined
[19:04] *** dakkar joined
[19:12] *** KingDiamond joined
[19:20] *** nferraz joined
[19:25] *** polettix joined
[19:30] <ajs> fglock: README in perl5 should be updated with two things: 1) it's ok to install this stuff and 2) the order in which it should be installed. A Makefile would be awesome, but I'll settle for a README

[19:32] *** lkjasa joined
[19:32] *** dduncan joined
[19:32] *** lkjasa left
[19:33] *** theorb joined
[19:33] <dduncan> agentzh, fyi, I did a pull today, and a 'make' ... and the version is being updated, it seems ... make also rebuilt all of the Haskell

[19:33] <lambdabot> dduncan: You have 1 new message. '/msg lambdabot @messages' to read it.

[19:34] <dduncan> hm, I'm going to have to learn how to leave messages on this system myself

[19:34] <dduncan> I saw the backlog before coming here, fyi

[19:36] <[particle]> @tell dduncan remember to use @tell <user> <message> to leave messages yourself

[19:36] <lambdabot> Consider it noted.

[19:36] <[particle]> scnr

[19:36] <dduncan> whaddayagot?

[19:36] <lambdabot> dduncan: You have 1 new message. '/msg lambdabot @messages' to read it.

[19:36] <dduncan> thatwhatyagot!

[19:37] <Limbic_Region> and if you don't want the entire channel to know what you are telling <user>  use:  /msg lambdabot @tell <user> <msg>

[19:37] <dduncan> figures

[19:37] <[particle]> oh, i'm so glad you can msg lambtabot. it is a bit noisy.

[19:37] <TimToady> of course, that doesn't help if they just say:

[19:37] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[19:37] <TimToady> @messages

[19:37] <lambdabot> agentzh said 5h 15m 32s ago: the pugs -v rev number problem ought to have been solved.

[19:37] <ajs> fglock: Thanks for the help, updating to most recent v6 from the pugs tree helped

[19:37] <dduncan> I knew before that you could use /msg syntax to private message anyone

[19:38] <fglock> ajs: np

[19:38] <dduncan> come to think of it ...

[19:38] <PerlJam> lambdabot needs to be quieter.  Surely it can /msg  people?

[19:39] *** larsen joined
[19:39] <dduncan> hm, I tried to /msg perlbot but it didn't work

[19:39] <dduncan> useful to try out things without spammin the list

[19:39] <pasteling> "ajs" at 63.107.91.99 pasted "build.sh script I ended up using in perl5 in case anyone cares" (11 lines, 320B) at http://sial.org/pbot/19805

[19:41] <TimToady> I wonder what a build system in P6 would look like...

[19:42] <ajs> use Build; my Build $doit .= new :universe<.>;

[19:42] <ajs> ;)

[19:43] <TimToady> your formulation seems to be missing the dependency info...

[19:44] <TimToady> I'm trying not to use the "m" word here...

[19:44] <TimToady> or the "nm" word, or the "gm" word...

[19:44] <TimToady> or the "pm" word, for that matter.

[19:44] <[particle]> @sources>>.build(@args);

[19:44] <lambdabot> Unknown command, try @list

[19:48] <dduncan> yes, that's what it would look like

[19:50] <svnbot6> r13457 | fglock++ | Pugs-Compiler-Rule, Pugs-Compiler-Perl6 - updated README files - ajs++

[19:52] <dduncan> question: I understand that a number of large changes will go into the trunk or be made active following 6.2.13, for inclusion in 6.28.0, but what is the nature of those changes? ...

[19:52] <svnbot6> r13458 | fglock++ | v6 - update usage (pod)

[19:52] <dduncan> eg, will there be some exposure of the metamodel to perl 6 code?

[19:53] <TimToady> the metamodel is available via .HOW

[19:53] <dduncan> oh, and with r13454, 'make' does update the reported version correctly

[19:53] <dduncan> thank you agentzh

[19:54] <TimToady> yes, but the problem with 'make' is that it's about 582 different programs...

[19:55] <dduncan> I will now try another pull and see if it keeps working

[19:56] <dduncan> regarding .HOW, yes that exists, but a bunch of useful functionality isn't there yet; eg, the likes of .attributes doesn't seem to be functional yet that I could see

[19:56] <dduncan> so I wondered if fleshing this out was planned to come soon, or if it is being put off for awhile behind other things

[19:57] <TimToady> that is the next step after this release is out, as far as I know.

[19:57] *** nferraz left
[19:58] <dduncan> great!

[19:58] <[particle]> also i believe, dropping support for ghc 6.4

[19:58] <TimToady> *sniffle*

[19:58] <dduncan> and I apologize if I have said anything that seems insensitive

[19:59] <dduncan> over the last few days

[19:59] <TimToady> and if you didn't, you don't?  :)

[19:59] <TimToady> I have not perceived any perceived problem.

[20:00] *** larsen joined
[20:00] <dduncan> I just said that because I didn't know if I unintentionally said anything that sounds too demanding ... while I never intend to make people angry, it can happen

[20:01] <dduncan> oh, and the version stuff seems to be continuing to work!

[20:01] <dduncan> my pugs -v reports: r13458

[20:01] <dduncan> with a simple pull and make

[20:04] <dduncan> on another matter, TimToady, thanks for the handwaving you added in [svn:perl6-synopsis] r12185 - that helps clear some things up

[20:05] <TimToady> well, it's still full of holes...

[20:05] <dduncan> re class naming

[20:05] <TimToady> but what we're aiming for is something that's really neither name equiv nor struct equiv.

[20:05] <dduncan> yes, but it brings out the idea that parameters can be taken into account when defining when a class is comparable to another

[20:06] <dduncan> indeed

[20:06] <TimToady> it's more like, are these provably generated from the same immutable raw materials?

[20:06] <TimToady> if so, they're the same.

[20:06] *** lisppaste3 joined
[20:06] <TimToady> which in a way is closer to structural typing.

[20:07] <TimToady> but it's not duck typing, because that's accidental name collisions from differently generated types

[20:07] <dduncan> well, I know what I was trying to achieve with my related request, but it is difficult for me to express or simply to know about the best way to achieve it

[20:08] <TimToady> so maybe we need a new term, generative equivalence, or some such.

[20:09] *** integral is now known as ntgrl

[20:09] *** integral joined
[20:10] <dduncan> fundamentally, the structures I'm trying to define are immutable and have immutable components, so it should fit into the immutable raw materials requirement

[20:10] <dduncan> they are just restricted Mapping, really

[20:10] <dduncan> though it would be nice to syntactically use the elements like class attributes

[20:11] <TimToady> roles may be sufficiently immutable

[20:11] <dduncan> yes

[20:14] <TimToady> well, speaking of mutating, I need to mixin the Job role.

[20:14] <dduncan> indeed

[20:14] <TimToady> commutate &

[20:15] <dduncan> good work day

[20:29] <TimToady> & etatummoc

[20:32] <[particle]> how symmetrical

[20:39] <fglock> is there a way to make inheritance work in $obj->$method (p5)

[20:39] <svnbot6> r13459 | fglock++ | Pugs-Compiler-Rule - implemented Matching against non-strings

[20:39] <svnbot6> r13459 | fglock++ |     my $rule = Pugs::Compiler::Regex->compile( '<.meth("param")>' );

[20:39] <svnbot6> r13459 | fglock++ |     my $match = $rule->match( $object );

[20:47] <clkao> fglock: i can reproduce

[20:48] <fglock> clkao: good

[20:49] *** jferrero joined
[20:58] *** larsen joined
[21:01] <svnbot6> r13460 | fglock++ | Pugs-Compiler-Rule - implemented <at($pos)>

[21:03] *** vel joined
[21:09] <fglock> tomorrow is holiday !

[21:11] *** Limbic_Region joined
[21:11] <dakkar> fglock: whre?

[21:11] <fglock> dakkar: yes

[21:11] *** SubStack joined
[21:12] <dakkar> ehm... that was a "where?" (my mistype)

[21:12] <fglock> ah, where - Brazil :)

[21:12] <dakkar> you see, I'm in the US at the moment, but I don't know the local holidays ;-) an unplanned day out of work would be gladly received ;-)

[21:13] <fglock> sure - I just found out :)

[21:14] *** shachaf_ joined
[21:18] *** foo\ joined
[21:21] *** BooK joined
[21:24] <svnbot6> r13461 | fglock++ | Pugs-Compiler-Rule - fixed method dispatch problem while matching against non-strings

[21:28] *** larsen joined
[21:32] *** mdiep_ joined
[21:39] *** fglock left
[21:43] *** DaGo joined
[21:46] *** larsen joined
[21:54] *** dduncan left
[21:58] <svnbot6> r13462 | clkao++ | Make arg_bind work with overloaded objects.

[22:01] *** mago joined
[22:02] *** jdv79 joined
[22:14] *** eden_c joined
[22:18] *** wilx joined
[22:34] *** dduncan joined
[22:34] <dduncan> question: are we using "pass" for anything in Perl 6 right now (ignore the test suite)

[22:35] <dduncan> if appropriate, that's my new suggestion for a renamed "grep"

[22:35] <dduncan> as already posted to p6l

[22:35] <dduncan> (some rationale given there)

[22:37] *** dduncan left
[22:37] <svnbot6> r13463 | putter++ | Common/backtrack_api.pl created.

[22:37] <svnbot6> r13463 | putter++ | 2006-09-19 - The idea here is Perl6::Compiler::Rule needs ranges

[22:37] <svnbot6> r13463 | putter++ | {n..m} and tailcalls implemented, and perhaps performance tuning.

[22:37] <svnbot6> r13463 | putter++ | The old regexp_spike code has these.  This file is a snapshot of

[22:37] <svnbot6> r13463 | putter++ | a quick attempt to strip the old code down to be easily used by

[22:37] <svnbot6> r13463 | putter++ | perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5,pm

[22:37] *** Aankhen`` joined
[22:38] *** ludan joined
[22:39] <ludan> re

[22:40] *** putter joined
[22:42] <putter> fglock: ping?

[22:42] <lambdabot> putter: You have 1 new message. '/msg lambdabot @messages' to read it.

[22:42] <nothingmuch> hi putter

[22:42] <nothingmuch> just in time ;-)

[22:43] <nothingmuch> fwiw MO is just as comitter friendly as pugs except i don't need to know your email to give you a commit bit

[22:43] <avar> Hmm, mm

[22:43] <nothingmuch> you just need to have one ;-)

[22:43] <putter> hi nm.  just sent you a :), but wrong channel. :/

[22:44] <avar> It would be neat if Perl6 included a bug report module to make ${yourapp}bug programs

[22:44] <nothingmuch> avar: i'd say that is definitely premature project management ;-)

[22:44] <putter> re commit friendly, great.  likely wont happen before the weekend though.

[22:44] <avar> Not at all, I think it would be neat in any language stdlib, nothing to do with Perl 6 as such

[22:45] <avar> Well maybe not any stdlib, not C's for instance:

[22:45] <nothingmuch> avar: it *does* have to do with whatever the ExtUtils::MakeMaker replacement will be

[22:45] <nothingmuch> and it *should* be a plugin

[22:45] <avar> nothingmuch: *In**deed*

[22:45] * nothingmuch is just making fun of RFC language =)

[22:46] <nothingmuch> fwiw, all it really needs is to send mail

[22:46] <TimToady> to MicroSoft.

[22:46] <avar> What's the best way to get into writing some of that stuff?

[22:46] <nothingmuch> write a module to abstract SMTP and Sendmail with the same API

[22:46] <nothingmuch> and write a wrapper that will try to send mail very hard, by using either this or that

[22:46] <avar> nothingmuch: which subset of the api?

[22:47] <nothingmuch> and the MX host from the target mail address unless it can learn who the host is from the system

[22:47] <nothingmuch> neither

[22:47] <avar> You want SMTP along with milter callbacks?

[22:47] <nothingmuch> just $sender->sendit( $RFC2822 )

[22:47] <nothingmuch> ick no

[22:47] <nothingmuch> look at markov's stuff

[22:47] <nothingmuch> it's slightly overengineered (too much effort, too much magic)

[22:48] <nothingmuch> but in general it's a good start

[22:48] <avar> Where's his stuff?

[22:48] <nothingmuch> once you have that you just need a template and a command line module thingy

[22:48] <nothingmuch> start with Mail::Box

[22:48] <nothingmuch> and also look at Email::Simple

[22:48] <nothingmuch> (which is arguably a little too simple)

[22:48] <nothingmuch> and also talk with rjbs

[22:48] <nothingmuch> (on irc.perl.org)

[22:48] <avar> I don't want to do mail yet:)

[22:48] <nothingmuch> he should be able to provide lots of insight on what needs to be done better for the p6 mail stuff

[22:48] <nothingmuch> then what do you want?

[22:49] <avar> For the purpose of this question I want to write Perl 6 modules, is it best to just commit them to pugs?

[22:49] <nothingmuch> oh

[22:49] <nothingmuch> yes =)

[22:49] *** eden_c left
[22:49] <nothingmuch> do you have a commit bit?

[22:50] <avar> yeah:)

[22:50] <nothingmuch> okay, all set then =)

[22:50] <nothingmuch> ext/

[22:50] <putter> @tell fglock so the idea on backtrack_api is it's a helper class providing code strings which abstract the combining of backtrackting subs taking one (continuation) argument, and keep application state in local()s.  local()s tend to be faster than passing as args.  once in a form which requires little change from Emitter::Perl5.pm, we can try it and see.  Has ranges and tailcalls, and is well tested.

[22:50] <lambdabot> Consider it noted.

[22:50] <avar> But is there anything particular I should read besides the obvious? Like good examples of porting (and bad ones)?

[22:50] <nothingmuch> @tell lambdabot it's a cool bot

[22:50] <lambdabot> Nice try ;)

[22:51] <nothingmuch> @botsnack

[22:51] <lambdabot> :)

[22:51] <nothingmuch> avar: there's a porting FAQ

[22:51] <nothingmuch> and... err... just ask around for feedback

[22:51] <nothingmuch> once you have code people can comment

[22:51] <avar> yay:)

[22:51] * avar goes crazy

[22:51] <nothingmuch> the best thing to do is to not be shy

[22:51] <nothingmuch> commit often, commit early

[22:51] <nothingmuch> ^_^

[22:52] <nothingmuch> anymoose, sleepy time

[22:52] <putter> g'night &

[23:06] *** justatheory joined
[23:26] *** SubStack joined
[23:28] *** iblechbot joined
[23:30] *** cjeris left
[23:56] *** knewt joined
[23:59] *** SubStack joined
