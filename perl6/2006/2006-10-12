[00:00] <lambdabot> TimToady said 3h 36m 31s ago: that is, we should have the warning, but it probably shouldn't apply to blank lines.

[00:00] <audreyt> as in segfaulting it?

[00:00] <TimToady> no, as in confusing the harness somehow

[00:00] <TimToady> (I think)

[00:00] *** lollan joined
[00:01] <TimToady> however, if you remove the =cut it dies violently

[00:01] <audreyt> after sleeping on it some I think lone =ut should indeed be fatal

[00:01] <audreyt> =cut, even

[00:03] <TimToady> dies as in segv

[00:03] <svnbot6> r14283 | audreyt++ | * Pugs.Parser.Literal: Proper warning (with expected indent,

[00:03] <svnbot6> r14283 | audreyt++ |   the original line, and the line number) about inconsistent

[00:03] <svnbot6> r14283 | audreyt++ |   q:to indentation line, and make an exception for blank lines.

[00:05] <audreyt> 'k will check

[00:05] <audreyt> workshere though

[00:05] <svnbot6> r14284 | audreyt++ | * sort.t: repair lone =cut

[00:07] <nothingmuch> @tell Limbic_Region rain in israel is seasonal, i meant that it was the first rain of the year

[00:07] <lambdabot> Consider it noted.

[00:09] *** lumi_ joined
[00:09] <nothingmuch> night folks

[00:16] <audreyt> nite nothingmuch

[00:16] * audreyt preps for $work

[00:21] *** nekokak joined
[00:24] <TimToady> ?eval say ~"møøse".perl.split(/<null>/)

[00:24] *** evalbot_r14276 is now known as evalbot_r14284

[00:24] <evalbot_r14284> OUTPUT[" m Ã ¸ Ã ¸ s e " ] Bool::True

[00:34] *** mjk joined
[00:35] *** avarab is now known as avar

[00:51] <audreyt> TimToady: see if the segfault still occur with r14385

[00:51] <audreyt> $job &

[00:52] <svnbot6> r14285 | audreyt++ | * ext/ and t/: Repair various lone =cut.

[00:52] <svnbot6> r14286 | audreyt++ | * Pugs.Parser.Doc: Lone =cut is now fatal; also, tolerate

[00:52] <svnbot6> r14286 | audreyt++ |   trailing spaces in POD directives.

[01:08] *** vel joined
[01:12] <TimToady> audreyt: got segfault first time I reran, but since then it doesn't fail.  so appears to be intermittent, or dependent on something that prove6 cleared out (I've been going back and forth between running directly and using prove6).  Failure is after test 17 with no other warning.

[01:12] <TimToady> so does not get to: not ok 18 - parse trait on block closure

[01:14] <TimToady> anyway, have to wander off myself, so should have new smoke in .5 hr. &

[01:40] <audreyt> anyone on win32? sigbjorn would like tester for http://haskell.org/ghc/dist/6.6/ghc-6-6.msi

[01:41] <audreyt> and I'd like to know if it builds pugs fine, too

[01:42] <audreyt> TimToady: does tr[][] still work?

[01:43] <audreyt> or is it always tr/// tr!!! now?

[01:43] <audreyt> I don't think pseudoassignment works for tr[]=

[01:45] <audreyt> trans.t currently tests for $japh ~~ tr(a-zA-Z)(n-za-mN-ZA-M);

[01:46] *** christopher joined
[01:50] *** Eimi joined
[02:15] *** cognominal joined
[02:17] *** kanru joined
[02:33] <audreyt> TimToady: also, "s[...] = .moose" and "s[...] .= moose" behaving differently is a big weird

[02:33] <audreyt> (the first talks abuout $_, the second talks about $())

[02:33] <audreyt> s/big/bit/

[02:38] <audreyt> but I'll keep it implemented that way for now

[02:47] *** mako132_ joined
[02:50] *** weinig|food is now known as weinig

[02:54] *** weinig is now known as weinig|zZz

[02:59] <obra> audreyt: you around?

[03:09] *** lanny joined
[03:10] *** kanru joined
[03:10] <lanny> *: checked for instances of =begin/=end/=cut by grepping=cut and searching previous 7 lines for all t/*.  Either someone handled this already and I missed the svnbot notice or sort.t was only example. (I based sort.t off another files example though so a bit confusing on that score.)

[03:25] *** mdiep joined
[03:32] *** SubStack joined
[03:51] <TimToady> Don't see the problem.  $foo = .moose and $foo .= moose means two different things as well.

[03:52] <TimToady> we could use a tr[] = q[] syntax if we restrict the right side (for now) to q

[03:53] <TimToady> but tr(a-zA-Z)(n-za-mN-ZA-M) is wrong two ways not counting any right-side changes.

[03:54] <TimToady> tr[a..z A..Z][n..z a..m N..Z A..M] is more like.

[03:57] <TimToady> but I'd be just as happy doing away with tr/// sugar entirely and making people write .trans(q[a..z A..Z], q[n..z a..m N..Z A..M]) or some such

[03:58] <TimToady> but maybe we better keep the shell of it for old times' sake, even if we s:g/-/../

[04:00] *** mdiep joined
[04:11] *** mdiep joined
[04:16] *** justatheory joined
[04:18] <TimToady> audreyt: I'm still getting the intermittent set-infinite segfault too with 6.6

[04:20] <svnbot6> r14287 | lwall++ | tr/// allows whitespace and uses .. for ranges.

[04:34] *** mdiep joined
[05:10] *** mdiep_ joined
[05:15] *** BooK_ joined
[05:27] <svnbot6> r14288 | lwall++ | More tr/// whacking.  Still need to make lexer not do qq for us though...

[05:30] <svnbot6> r14289 | lwall++ | forgot to change testplan

[05:32] *** kanru joined
[05:33] *** mdiep joined
[05:44] *** iblechbot joined
[05:48] *** buetow joined
[05:59] *** agentzh joined
[06:02] <agentzh> @messages

[06:02] <lambdabot> audreyt said 5d 18h 20m 38s ago: excellent talk :)

[06:02] <lambdabot> lanny said 1d 10h 39m 54s ago: Feel free to shoot the messanger at any time cause I'm feeling like a broken record myself :) but when I look at latest smoke SYN and Perl 6 docs on feather they still

[06:02] <lambdabot> don't match up. (I use S29 as a test.)

[06:02] <agentzh> audreyt: thanks :)

[06:03] <agentzh> lanny: yes, indeed you're right. S29 on the smoke server still looks odd...

[06:06] <svnbot6> r14290 | audreyt++ | * split.t: Fix plan and unTODO.

[06:06] <agentzh> iblech: would you please update your Pod::Simple::HTML from cpan and check whether S29 is *actually* up-to-date? the "Any" subsection right below the "Function Packages" section is missing in the smoke S29. weird.

[06:08] * agentzh doesn't have access to the smoke server so he can't effectively diagnose the problem.

[06:10] *** marmic joined
[06:14] *** lollan joined
[06:14] <svnbot6> r14291 | malon++ | Spec/update - add more synopses to %Spec hash

[06:14] <svnbot6> r14292 | lwall++ | Further tr/// fixups

[06:15] <TimToady> @tell audreyt I fixed things up to allow tr/// with whitespace and .. but you might well find a better way to rewrite Literal.hs to make tr/// not run its args through qq

[06:15] <lambdabot> Consider it noted.

[06:15] *** lollan joined
[06:15] <audreyt> sure

[06:15] <lambdabot> audreyt: You have 1 new message. '/msg lambdabot @messages' to read it.

[06:15] <audreyt> I implement s[] etc

[06:15] <TimToady> you were probably fiddling with the same rule...

[06:16] <TimToady> the rest of the tr processing is down in Prelude, but you can hoist some of that into the parser as well if you like.

[06:16] <audreyt> @messages

[06:16] <lambdabot> TimToady said 1m 36s ago: I fixed things up to allow tr/// with whitespace and .. but you might well find a better way to rewrite Literal.hs to make tr/// not run its args through qq

[06:17] <TimToady> namely the removal of whitespace and qb//

[06:17] <obra> audreyt: hi

[06:17] <TimToady> hi obra, long time no see, just hear...

[06:18] * obra grins at TimToady. Indeed.

[06:18] <TimToady> audreyt: any clues on the intermittent set-infinite coredump?

[06:18] <obra> Pity I didn't talk myself into Brazil.

[06:18] <audreyt> TimToady: yeah. another Jufy/unsafeEvalExp thing I think

[06:18] <audreyt> but at $job atm

[06:19] <obra> $job! /me swoons. be sure to gather lots of requirements for templating ;)

[06:19] <audreyt> yeah :)

[06:21] <obra> audreyt: I think we've found a hotsprings resort for the pdx hackathon. see your mail

[06:22] <audreyt> obra: see your mail

[06:22] <obra> woo

[06:22] * obra waits for filters

[06:23] *** Daveman joined
[06:26] <svnbot6> r14293 | audreyt++ | * Implement "s[...]=..." and deprecate "s[...][...]".

[06:26] * obra decries his greylisting

[07:08] <svnbot6> r14294 | lwall++ | comb now works better

[07:09] <TimToady> smoking r14294

[07:14] *** takesako joined
[07:19] *** zakharyas joined
[07:28] *** agentzh left
[07:29] *** elmex joined
[07:30] *** theorbtwo joined
[07:32] *** takesako joined
[07:55] <audreyt> ?eval $_ = 'a b c d e f g'; s[\w] .= ord; $_

[07:55] *** evalbot_r14284 is now known as evalbot_r14294

[07:55] <evalbot_r14294> \"97 b c d e f g"

[07:56] <audreyt> ?eval $_ = 'a b c d e f g'; s:g[\w] .= ord; $_

[07:56] <evalbot_r14294> \"97 97 97 97 97 97 97"

[07:56] <audreyt> hm, that looks wrong.

[07:58] <TimToady> you have to delay the . as well...

[07:58] <svnbot6> r14295 | lwall++ | [inplace.t] It helps if you use P6 character class instead of P5...

[08:02] <audreyt> fixed

[08:02] <svnbot6> r14296 | lwall++ | fix a couple of old s{}{} instances.

[08:02] <svnbot6> r14296 | lwall++ | comb potentially faster using lvalue substr instead of copying string.

[08:03] <svnbot6> r14297 | audreyt++ | * Pugs.Parser.Literal: Build .= expression correctly for s[].=

[08:04] <TimToady> btw, the multi method dispatch of comb didn't successfully distinguish a Regex from a Str arg.  That's why the current Prelude impl uses a switch.

[08:06] <audreyt> hm. isolate it into a test of its own?

[08:06] <audreyt> I'll look tonight

[08:06] <audreyt> meanwhile, $job calls... &

[08:06] <TimToady> well, bed calls &

[08:11] <audreyt> sleep well!

[08:12] <TimToady> I added a test to multi.t

[08:13] <TimToady> It fails appropriately. :)

[08:13] <svnbot6> r14298 | lwall++ | [t/oo/methods/multi.t] Added test for misdispatch of Regex to Str

[08:13] <TimToady> Now I shall fail appropriately...

[08:14] <TimToady> zzz &

[08:15] * TimToady is sleepsmoking again...

[08:32] *** nwc10 joined
[08:33] *** nwc10 left
[08:46] *** jferrero joined
[08:49] *** andara joined
[09:20] <nothingmuch> audreyt: is the new YAML::Syck bug a syck problem?

[09:20] <nothingmuch> http://rt.cpan.org/Public/Bug/Display.html?id=22043]

[09:20] <lambdabot> http://rt.cpan.org/Public/Bug/Display.html?id=22043]

[09:20] <nothingmuch> eek, how did that bracket sneak in there

[09:24] <audreyt> nothingmuch: close that ticket please?

[09:24] <nothingmuch> i'm not sure how

[09:24] * nothingmuch doesn't know syck

[09:24] <audreyt> the yaml spec says, pretty clearly, ["foo", "bar"] is fine but ["foo","bar"] not

[09:24] <nothingmuch> where can i find docs?

[09:24] <audreyt> so it's wontfix

[09:24] <nothingmuch> ah

[09:25] <gaal> also, is expect indented?

[09:25] <nothingmuch> in the email i got i think it was

[09:25] <gaal> ysh is putting it inside test

[09:26] <nothingmuch> i think that the RT web interface is not indenting

[09:26] <gaal> what's the rationale for the spec requiring whitespace tere?

[09:26] <nothingmuch> aye, when viewing the source this is evident

[09:27] <audreyt> gaal: I guess same reason  why

[09:27] <audreyt> foo's

[09:27] <audreyt> mo"o"se

[09:28] <audreyt> are all literals

[09:28] <audreyt> as is

[09:28] <nothingmuch> omigawds

[09:28] <nothingmuch> i didn't know that

[09:28] <audreyt> blah,blah,blah

[09:28] <demerphq> hey audreyt, did you ever actually do anything about building pcre with perl? you mentioned something about it a while back...

[09:29] <gaal> so why isn't ["foo","bar"] a singleton list with '"foo","bar"' its element?

[09:29] <audreyt> demerphq: it's http://svn.openfoundry.org/pugs/perl5/re-override-PCRE/

[09:29] <audreyt> gaal: well it would be if it's

[09:29] <audreyt> [_"foo","bar"]

[09:29] <audreyt> but an opening double quote also carries special meaning

[09:30] <lambdabot> Title: Revision 14298: /perl5/re-override-PCRE, http://tinyurl.com/ewktx

[09:30] <audreyt> I think the YAML team, in their json interop mode discussion, considered relaxing it

[09:30] <audreyt> not sure about how it went though

[09:30] *** ruoso joined
[09:31] <nothingmuch> so this is really a bug in YAML ;-)

[09:32] * demerphq pokes around

[09:32] <audreyt> well, parsing "foo","bar" as one single string

[09:32] <audreyt> is surprising as well

[09:32] <audreyt> so bailing out seems sensible to me

[09:32] <pasteling> "nothingmuch" at 84.108.53.74 pasted "YAML bug" (22 lines, 465B) at http://sial.org/pbot/20376

[09:32] <nothingmuch> is implicit concatenation legal?

[09:32] <nothingmuch> that is "mooose"bar

[09:33] <nothingmuch> == "moosebar" ?

[09:33] <demerphq> how much of that is autogenerated code, and how much of it is you?

[09:33] <audreyt> well YAML.pm is broken

[09:33] <nothingmuch> both of them have a syntax error for "moose"bar

[09:34] <audreyt> demerphq: pcre.i is me. pcre_wrap.c is genned from it

[09:34] <audreyt> by swig

[09:35] <demerphq> ok

[09:35] <gaal> this is an "interesting" feature...

[09:35] <demerphq> im a little unfamiliar with this stuff

[09:37] <demerphq> umm, did it work?

[09:40] <nothingmuch> i'm notsure how foo,bar is ever useful

[09:40] <nothingmuch> for example: a sentance: the good, the bad, and the ugly

[09:40] <nothingmuch> sentance in a list: [ the good, the bad, and the ugly ]

[09:40] <nothingmuch> the second is ["the good", "the bad", "and the ugly"]

[09:41] <audreyt> demerphq: it works for me

[09:41] <nothingmuch> it's really confusing that at times part of a literal is a meaningful token

[09:41] <nothingmuch> oh well

[09:41] <audreyt> demerphq: you need to check out the pugs repo in its entirety

[09:41] * nothingmuch will write tests for perlsyck & YAML.pm

[09:41] <audreyt> demerphq: then cd into perl5/re-override/, run makefile.pl and make install

[09:42] <audreyt> demerphq: then cd into perl5/re-override-PCRE etc

[09:42] <audreyt> the reason is that it copies the pcre sources from ../../src/pcre/

[09:42] <demerphq> ok.

[09:42] <audreyt> afterwards you can "make dist" from there

[09:43] <demerphq> im just trying to figure some stuff out in what i can see. I see $^H{regcompp} = sub { ...

[09:44] <demerphq> but i dont recall ever seeing $^H{regcompp} before.

[09:44] <audreyt> there's much more info in re-override/

[09:44] <audreyt> it's all putter's work essentially

[09:44] <audreyt> all I did was some tidynig up

[09:44] <demerphq> ahah.

[09:44] <demerphq> now the dots are connecting.

[09:45] <demerphq> right he hand hacked a perl 5.6 to experiment with right?

[09:45] <audreyt> not sure of the details (and I need to decommute RSN) :) he'll be up in a few hours I think...

[09:47] <demerphq> ok, thanks a lot. this is very interesting.

[09:47] <audreyt> glad to hear that :)

[09:47] <demerphq> parallel evolution or something.

[09:47] <demerphq> perl 5.9.5 has something like what he did there in it.

[09:47] <audreyt> please salvage any ideas and/or bits :)

[09:47] <demerphq> im gunna try.

[09:48] <demerphq> i dont have your compiler foo tho.

[09:48] <demerphq> er, compiler-fu

[09:48] <audreyt> I don't even know C...

[09:49] <gaal> ha.

[09:50] <audreyt> afk, bbl... &

[10:00] *** baest joined
[10:02] *** lumi joined
[10:15] *** norageek2 joined
[10:20] *** ivas joined
[10:32] *** jferrero joined
[11:09] *** chris2 joined
[11:19] *** weinig|zZz is now known as weinig

[11:25] *** kanru joined
[11:31] *** ludan joined
[11:33] *** b_jonas joined
[11:43] *** mauke joined
[11:47] *** weinig joined
[11:58] *** xinming joined
[12:11] *** markstos joined
[12:14] *** Limbic_Region joined
[12:15] <Limbic_Region> salutations all

[12:15] <lambdabot> Limbic_Region: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:15] <Limbic_Region> @messages

[12:15] <lambdabot> nothingmuch said 12h 7m 24s ago: rain in israel is seasonal, i meant that it was the first rain of the year

[12:15] <Limbic_Region> @tell nothingmuch WRT rain I was being quite facetious

[12:15] <lambdabot> Consider it noted.

[12:15] <nothingmuch> rly? ;-)

[12:15] <lambdabot> nothingmuch: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:16] <nothingmuch> @moosages

[12:16] <lambdabot> Limbic_Region said 27s ago: WRT rain I was being quite facetious

[12:17] <b_jonas> oh no, I've started a stupid perl6 flame on #perl

[12:17] <lambdabot> b_jonas: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:42] *** b_jonas joined
[12:48] <stevan> @tell audreyt nothingmuch's $work task for the next few weeks is now officially MO & Perl 6/5 meta stuff, please (ab)use him for your every meta-whim :)

[12:48] <lambdabot> Consider it noted.

[12:49] <nothingmuch> =)

[12:49] *** elmex joined
[13:02] <andara> hi all. Compiling pugs r14289 with GHC 6.6 fails on my linux box:

[13:02] <andara> ghc-6.6: unknown package: base-1.0 (dependency of HsJudy-0.1)

[13:12] <Limbic_Region> andara - hrm, anytime I see something wrong with Judy I rm third-party, svn up, and remake and it usually fixes it

[13:12] <Limbic_Region> drastic measure and likely unnecessary

[13:12] <Limbic_Region> assuming you know exactly what file in third-party that needs to be removed

[13:13] <Patterner> doesn't base belong to ghc?

[13:13] <andara> Limbic_Region: thanks, I can just rm -Rf third-party, no problem

[13:14] <Limbic_Region> don't forget the svn up that goes with it

[13:14] <andara> Limbic_Region: of course :-)

[13:17] <andara> Limbic_Region: yup, that did it. Thanks a lot!

[13:20] <Limbic_Region> andara - no worries

[13:24] <Patterner> I just compiled r14298 with ghc 6.6

[13:26] <andara> Patterner: me too, running smoke now ...

[13:26] * Limbic_Region has been using 6.6 for over a month now

[13:26] <Limbic_Region> of course I was building it from source on Win32 prior to the official release

[13:27] <Limbic_Region> but that's just because i'm a masochist

[13:27] * andara is a mere mortal ...

[13:27] <Limbic_Region> andara - I'm probably more of a mortal

[13:28] <Limbic_Region> but you know the saying "the squeeky wheel gets the greese"

[13:28] <Limbic_Region> whine long enough to people with the capabilities to fix something and they will fix it just to get you to shut up

[13:28] <andara> I'll keep that in mind *grin*

[13:29] * Patterner ponders ignoring andara :P

[13:29] <andara> Limbic_Region: did you by any chance compile 6.6 on OS X as well?

[13:30] <Patterner> my mac is too slow for that...

[13:30] <Limbic_Region> nope but it was also done by another #perl6 person not too long ago

[13:30] <Limbic_Region> @tell audreyt ext/Set-Infinite/t/set-infinite-recurrence.t is still causing the windows level error "pugs has encountered a problem...."

[13:30] <lambdabot> Consider it noted.

[13:31] <Limbic_Region> ok, must wander of for $work - happy hacking all

[13:44] <Limbic_Region> what's the svn parameter to revert to a previous rev?

[13:45] <Limbic_Region> "revert" seems just to undo local changes

[13:45] *** weinig is now known as weinig|bbl

[13:47] *** elmex joined
[13:52] *** hexmode joined
[14:01] *** [particle] joined
[14:10] *** vel joined
[14:11] *** cjeris joined
[14:14] <gaal> Limbic_Region: svn up -rREV

[14:15] <gaal> or svn cat -rREV file > file, if you want to merge off an old r

[14:33] <svnbot6> r14299 | andara++ | [runpugs]

[14:33] <svnbot6> r14299 | andara++ | -added info page, small change to front page

[14:33] <svnbot6> r14300 | lwall++ | [t/xx-uncategorized/unicode.t] added test for "m?\195?\184?\195?\184se".perl.chars == 7

[14:44] <TimToady> heh, looks like svnbot is also unicode confused.  that should read "møøse".perl.chars == 7

[14:45] <b_jonas> TimToady: so is this channel utf8?

[14:46] <TimToady> @tell audreyt I've added a test for the "møøse".perl problem

[14:46] <lambdabot> Consider it noted.

[14:46] *** iblechbot joined
[14:46] <b_jonas> I wonder how I can set a per-channel encoding in xchat

[14:46] <TimToady> do you see slashed o's?

[14:46] <b_jonas> no, I see two-character sequences

[14:46] <b_jonas> because my irc encoding is set to 8859_2

[14:47] <b_jonas> I see something like an A with an u accent then nothing with a hook below

[14:47] <TimToady> yes, that's utf8 encoded in 8859

[14:47] <b_jonas> yes, exactly

[14:48] <TimToady> maybe you can set up a window with utf-8 for unicodey channels.

[14:49] <b_jonas> I dunno, I think the encoding is per-connection

[14:49] <TimToady> most of the Linux terminal emulators will happily do utf-8 these days if LANG is set appropriately

[14:49] <b_jonas> yes,

[14:49] <TimToady> I'm not sure irssi even knows what it's passing.

[14:49] <b_jonas> but this is xchat, so it's not in a terminal

[14:50] <wolverian> xchat supports per-channel encodings, I think. (except the gnome xchat interface, which doesn't expost that functionality)

[14:50] <b_jonas> I set the encoding in the connection settings for each server

[14:50] <wolverian> s,expost,expose,

[14:50] <b_jonas> wolverian: does it? how do I set it?

[14:50] <wolverian> let me check.

[14:50] <b_jonas> this is Xchat 2.4.1 btw

[14:51] <wolverian> (installing xchat now.. I only had xchat-gnome :)

[14:54] *** Eimi joined
[14:55] <wolverian> b_jonas, er, sorry, can't find it. I suppose I was thinking of some other client

[14:55] <wolverian> (use irssi ;)

[14:55] <b_jonas> well, I sometimes use irssi anyway but for other reasons

[14:56] <b_jonas> but I don't really care because nonascii is rare on these channels

[14:56] *** theorbtwo joined
[14:56] *** andara left
[14:56] *** chris2 joined
[14:57] <kolibrie> we get occasional chinese, hebrew, and møøse in this channel

[14:57] <kolibrie> }:)

[14:58] <wolverian> and perl6..

[14:58] <b_jonas> yes, but I wouldn't understand chinese and hebrew anyawy

[14:58] <b_jonas> now perl6, yes, that's a problem

[14:58] <wolverian> for @foo → $bar { ... }

[14:58] <wolverian> (although I don't think that's specced :)

[14:59] <b_jonas> double angles and yen signs are already in use

[15:00] <wolverian> I think set operators, too

[15:00] <wolverian> (though I don't think I can type those easily)

[15:00] <b_jonas> are they? I didn't see those in S03

[15:00] <wolverian> oh, I was thinking I've seen them in some tests. maybe it was examples.

[15:00] <b_jonas> is there an ascii for them, like /\ and \/ and (+) ?

[15:00] <wolverian> yes. something like that.

[15:06] <b_jonas> the folks on the other channel think it's not possible in xchat either.

[15:11] *** b_jonas joined
[15:14] *** b_jonas is now known as b_jonas_

[15:14] *** b_jonas_ is now known as b_jonas__

[15:15] *** b_jonas__ is now known as b_jonas

[15:17] <b_jonas> ok, I did something

[15:17] <b_jonas> could you type moose in utf8 again now please

[15:17] <b_jonas> and, is this an e with an acute in utf8: é

[15:18] <wolverian> it's an e with a right-slanting accent

[15:18] <wolverian> (I'm not sure what acute means)

[15:18] <b_jonas> that's it

[15:18] <wolverian> I'd type moose but I can't find the letter on my keyboard, apparently :) møøse!

[15:18] <svnbot6> r14301 | audreyt++ | * t/builtins/io/dir.t: Use $FindBin::Bin instead of "."

[15:18] <wolverian> found it!

[15:18] <svnbot6> r14301 | audreyt++ |   to test dir.t, because on concurrent smoke, this is a

[15:18] <svnbot6> r14301 | audreyt++ |   race condition against temp files created by other processes.

[15:18] <svnbot6> r14302 | audreyt++ | * Pugs.Prim: ".perl" now returns Unicode strings properly.

[15:19] <b_jonas> nice, thanks

[15:19] <b_jonas> it works

[15:19] <b_jonas> now I have two different connections to freenode

[15:19] <b_jonas> one with utf8 and one with 8859_2

[15:19] <wolverian> I suppse that works too :)

[15:19] <wolverian> s,suppse,suppose,

[15:19] <b_jonas> I just have to take care to join the right channels from the right connection

[15:20] <wolverian> can you automate it in xchat?

[15:20] <wolverian> I think it wants you to connect only once per network if you want to automate it.. same with irssi, I think

[15:22] <kolibrie> irssi can connect multiple times to the same network

[15:22] * kolibrie has done it accidentally a few times

[15:23] <kolibrie> but perhaps not automatted

[15:23] <TimToady> ?eval "møøse".perl.say

[15:23] <b_jonas> wolverian: yes

[15:23] *** evalbot_r14294 is now known as evalbot_r14301

[15:23] <b_jonas> I can automate it

[15:23] <evalbot_r14301> OUTPUT["mÃ¸Ã¸se" ] Bool::True

[15:24] <wolverian> well, that's broken.

[15:24] <svnbot6> r14303 | audreyt++ | * Pugs.Eval: Allow "/.../" to match against $_ immediately

[15:24] <svnbot6> r14303 | audreyt++ |   not only under (Bool $) context, but also (Num $), (Str $)

[15:24] <svnbot6> r14303 | audreyt++ |   and () (aka void) contexts.

[15:24] <b_jonas> maybe I should write an asciifying ircbot and connect it to #perl6

[15:26] <TimToady> ?eval 42

[15:26] <evalbot_r14301> 42

[15:28] <Limbic_Region> is audreyt fixing things in her sleep again or is she around?

[15:28] <Limbic_Region> audreyt ping

[15:30] <TimToady> ?eval "møøse".perl.say

[15:30] <evalbot_r14301> OUTPUT["mÃ¸Ã¸se" ] Bool::True

[15:30] <TimToady> ?eval die

[15:30] *** babusri joined
[15:31] <evalbot_r14301> Error: Died

[15:32] <TimToady> ?eval "møøse".perl.say

[15:32] <evalbot_r14301> OUTPUT["mÃ¸Ã¸se" ] Bool::True

[15:32] <TimToady> is there any way to kick evalbot to the next version from within evalbot?

[15:32] *** babusri joined
[15:33] <audreyt> it's still compiling

[15:33] <theorbtwo> It should do it all by itself, though it won't reload until the next time somebody says something to it after it finishes recompiling.

[15:33] <TimToady> how often does it recompile?

[15:35] <TimToady> hmm, /tmp/ghc26651_0/ghc26651_0.hc:8:24: error: Parrot_hsc.h: No such file or directory

[15:35] <TimToady> going for walk &

[15:41] *** hexmode joined
[15:45] <svnbot6> r14304 | audreyt++ | * Pugs.Eval.Var: Infer (Syn "//" ...) as Regex, not Any,

[15:45] <svnbot6> r14304 | audreyt++ |   thus closing the MMD bug TimToady++ pointed out.

[15:46] <audreyt> ?eval "\x[7777,8888,9999]"

[15:46] *** evalbot_r14301 is now known as evalbot_r14303

[15:46] <evalbot_r14303> "睷袈香"

[15:46] <audreyt> ?eval "\x[7777,8888,9999]".perl

[15:46] <evalbot_r14303> "\"睷袈香\""

[15:46] <audreyt> ?eval "\x[7777,8888,9999]".perl.say

[15:46] <evalbot_r14303> OUTPUT["睷袈香" ] Bool::True

[15:47] <b_jonas> I wanna try that too

[15:47] <b_jonas> ?eval "Árvíztűrő tükörfúrógép".perl.say

[15:47] <evalbot_r14303> OUTPUT["Árvíztűrő tükörfúrógép" ] Bool::True

[15:48] <theorbtwo> What language is that, b_jonas?

[15:48] *** kanru joined
[15:49] <nothingmuch> .no?

[15:49] <nothingmuch> no

[15:49] <b_jonas> theorbtwo: .hu

[15:49] <nothingmuch> .hu mabe?

[15:49] <nothingmuch> ah

[15:49] <b_jonas> yes

[15:50] <b_jonas> it's a common pangram-like thing which has all the accented letters of hungarian so it's used for testing

[15:51] <b_jonas> http://en.wikipedia.org/wiki/Pangram#Only_letters_with_diacritical_marks_and_others_national_specific_letters

[15:51] <audreyt> "\x[041d]\x[043e] \x[0441]p\x[043e]\x[043a] \x[043d]\x[0430]\x[0441]\x[0442]\x[0430]\x[043b], \x[0412] \x[0434]\x[0430]p \x[043f]\x[043e]\x[043b]\x[0443]\x[0447]\x[0438]\x[043b]".say

[15:51] <nothingmuch> cool

[15:51] <audreyt> ?eval "\x[041d]\x[043e] \x[0441]p\x[043e]\x[043a] \x[043d]\x[0430]\x[0441]\x[0442]\x[0430]\x[043b], \x[0412] \x[0434]\x[0430]p \x[043f]\x[043e]\x[043b]\x[0443]\x[0447]\x[0438]\x[043b]".say

[15:51] *** evalbot_r14303 is now known as evalbot_r14304

[15:51] <evalbot_r14304> OUTPUT[Но сpок настал, В даp получил ] Bool::True

[15:51] * theorbtwo sees lots of white boxes.

[15:52] * nothingmuch sees cyrillic

[15:52] * theorbtwo is on the console.

[15:52] <theorbtwo> (I really ought to figure out why X hangs this machine.)

[15:52] <b_jonas> I see cyrillic too except it's ugly because it shows up in a different font but the 'p's show up in the normal font as they're not typed as ciryllic

[16:04] *** araujo joined
[16:08] *** buetow joined
[16:09] *** weinig|bbl is now known as weinig

[16:10] *** Psyche^ joined
[16:10] *** Psyche^ is now known as Patterner

[16:21] <nothingmuch> Duane Allman++

[16:22] <[particle]> (slide guitar)++

[16:22] <nothingmuch> when tasteful =)

[16:24] *** babusri joined
[16:31] *** justatheory joined
[16:31] <[particle]> nothingmuch++ for inspiring me to create an allman brothers pandora station

[16:31] <nothingmuch> =)

[16:38] <nothingmuch> how many of t hem died on motorcycles? 2 or 3?

[16:42] <[particle]> 2

[16:43] <[particle]> like a year apart, in the same town

[16:43] <nothingmuch> aye

[16:43] <nothingmuch> Duane and the bassist, i forgot his name

[16:43] <nothingmuch> anymoose, dinnertime

[16:52] *** mdiep_ joined
[16:55] <svnbot6> r14305 | lwall++ | Use newline surrogate instead of space on evalbot output.

[17:01] <TimToady> ?eval say "hi"

[17:01] *** weinig is now known as weinig|bbl

[17:01] <araujo> hello TimToady

[17:02] <TimToady> hi, araujo.  Thanks for sticking around after I invited you. :)

[17:02] *** evalbot_r14305 joined
[17:02] <araujo> TimToady, hah, it's ok , i am slowly knowing this perl6 language :-)

[17:04] <TimToady> I'm sure you'd rather have been invited by audreyt.

[17:05] <araujo> TimToady, actually, i am starting to like it ;-)

[17:05] <TimToady> Hopefully Perl 6 will be prettier than me and uglier than Audrey.

[17:05] <araujo> hahaha

[17:05] * araujo liked TimToady's HWN recent quote 

[17:06] <TimToady> For a "quote of the week" I thought it was rather ancient...

[17:06] <araujo> hah

[17:06] <TimToady> I don't even remember when I said it.

[17:09] <svnbot6> r14306 | audreyt++ | * Set.pm: Use $!members for stringification, instead of the slightly misleading @.members.

[17:12] <TimToady> ?eval 42

[17:12] <[particle]> evalbot has left the building

[17:12] *** evalbot_r14306 joined
[17:15] <TimToady> I find it difficult to believe that my one-character change killed evalbot...

[17:16] <[particle]> 14304 signed off

[17:17] <[particle]> and has bounced every rev since

[17:18] <TimToady> does evalbot leave a log somewhere on feather?

[17:19] <ajs> I'd like someone to confirm that I'm not making something up. Will P6 rules be able to do this: rule A { <before <B> <!before <C>>> <D> }

[17:19] <ajs> S05 isn't too clear on the extent to which before will be able to encapsulate abitrary rule content.

[17:19] <TimToady> sure

[17:19] <ajs> Ok, thanks

[17:20] <TimToady> <foo blah> is short for <foo(/blah/)>

[17:20] *** evalbot_r14306 joined
[17:20] <ajs> Someone was asking me about the relation between PEGs and P6 rules, and I wanted to be sure that <before> and <!before> could build arbitrary predicates.

[17:20] <[particle]> i don't know about any evalbot log, but i don't know much about evalbot

[17:22] <TimToady> me either--I just cargo cultishly changed it to join output lines with ␤ instead of space.  I find it difficult to fathom that other unicode is handled in the same result string, but that isn't.

[17:22] <audreyt> no, it's failing because of Set.pm doesn't handle "method prefix:<~> is export" gracefully in the current Pugs

[17:22] <audreyt> will fix it properly tomorrow but for now I've reverted to multi *prefix:<~>

[17:22] <TimToady> whew!

[17:23] <audreyt> also, replicated the Set::Infinite segfault.

[17:23] <Limbic_Region> yeah

[17:23] <Limbic_Region> yay even

[17:23] <TimToady> segfault--++

[17:23] <audreyt> strangely here it only shows up on pugs-prof

[17:23] * Limbic_Region was going to mention that all_parse.t is not working again

[17:23] <audreyt> and never ./pugs

[17:23] <audreyt> yes, I saw that

[17:23] <audreyt> replicated tha ttoo

[17:23] <TimToady> oh, well, I can get pugs-prof to segfault on all sorts of things.

[17:23] <TimToady> at least 6.4.2's -prof

[17:24] <audreyt> I'm building GHC 6.6 from source on feather with nice -n 20

[17:24] *** evalbot_r14306 joined
[17:25] <audreyt> ?eval say "hey"; say "hi"; $_ = 'a b c'; s:g[\w] .= ord; $_

[17:26] <Limbic_Region> going to run a smoke in a few minutes

[17:28] <TimToady> maybe the ghc compile is messing up evalbot's dynamic linkage?

[17:28] <TimToady> hmm, you wouldn't think it'd get even that far though.

[17:29] <audreyt> also, ghc doesn't do any dynamic linkage

[17:29] <audreyt> by default, anyway

[17:29] *** araujo joined
[17:29] <Limbic_Region> hey TimToady, did you see where demerphq had gotten named captures working in p5 re?

[17:30] <TimToady> no, I didn't.

[17:30] <TimToady> is this a p5p thing?

[17:30] <Limbic_Region> not sure - I know he is taking a lot of input from you and others here in #perl6

[17:30] <Limbic_Region> thought he might have shared his results here too

[17:31] *** evalbot_r14306 joined
[17:31] * Limbic_Region doesn't follow p5p but he is addicted to PerlMonks which is where demerphq usually hangs out

[17:31] <audreyt> ?eval say "hey"; say "hi"; $_ = 'a b c'; s:g[\w] .= ord; $_

[17:31] <evalbot_r14306> OUTPUT[hey␤hi␤] \"97 98 99"␤

[17:31] <Limbic_Region> ?eval say "hello TimToady"

[17:31] <TimToady> evalbot++

[17:31] <audreyt> whew.

[17:31] <evalbot_r14306> OUTPUT[hello TimToady␤] Bool::True␤

[17:31] <audreyt> I can rest in peace now :)

[17:31] <Limbic_Region> sleep well audreyt

[17:31] <TimToady> I can go primp for $job in peace.  :)

[17:32] <wolverian> what's the [?] character it outputs now?

[17:32] <TimToady> a newline surrogate.  supposed to say NL only on the diagonal in one char

[17:33] <audreyt> on the irssi transliteration here it says "NL"

[17:33] <audreyt> 19:31 < evalbot_r14306> OUTPUT[hello TimToadyNL] Bool::TrueNL

[17:33] <svnbot6> r14307 | audreyt++ | * Set.pm: Remove the "method is export" for prefix:<~>,

[17:33] <svnbot6> r14307 | audreyt++ |   as it causes evalbot failure.  Maybe this release isn't

[17:33] <svnbot6> r14307 | audreyt++ |   ready for exporting methods after all... Will investigate

[17:33] <svnbot6> r14307 | audreyt++ |   in more depth tomorrow.

[17:33] *** bernhard joined
[17:34] <TimToady> It's U+2424.

[17:34] <audreyt> which font of yours can display this?

[17:34] <[particle]> eew, here in says a with carat, box, little box with dots at outside corners

[17:34] <TimToady> my terminal is using sazanami, I think.

[17:35] <Limbic_Region> the CGI:IRC on feather is displaying it correctly too

[17:35] <Limbic_Region> that just has the character set at Unicode (UTF-8)

[17:36] <TimToady> the basic iso-10646 font on Linux also seems to have it.

[17:37] <audreyt> nite :) &

[17:37] <wolverian> very weird. generally pango falls back to whatever font it is that has the character. I find it hard to believe that _none_ of my fonts have it.

[17:37] <TimToady> firefox seems to handle it fine

[17:38] <TimToady> ah well, I think it's worth the temporary visual breakage anyway, though we should chop the final NL

[17:39] *** mako132_ joined
[17:39] <TimToady> which, interestingly, would have happened automatically with P5's split semantics that delete trailing null fields.

[17:39] <TimToady> well, shower &

[17:46] *** larsen joined
[17:57] *** jferrero joined
[17:57] *** weinig|bbl is now known as weinig

[18:10] *** norageek joined
[18:12] *** renormalist joined
[18:16] <svnbot6> r14308 | lwall++ | chomp the last newline from evalbot results.

[18:34] *** aufrank joined
[18:35] *** elmex joined
[18:36] *** weinig is now known as weinig|away

[18:50] *** ron__ joined
[19:28] *** andara joined
[19:29] *** rindolf joined
[19:29] <rindolf> Hi all.

[19:34] <TimToady> hi

[19:36] <TimToady> agh, p5 just used ?+ *+ ++ for possessive quantifiers, where p6 uses ?: *: and +:

[19:36] *** justatheory joined
[19:36] <PerlJam> TimToady: submit a patch :)

[19:36] <TimToady> maybe to prevent confusion p6 shouldn't use ?+ *+ and ++ for greed overrides.

[19:37] <PerlJam> the perl5 version still hasn't made it out into the wild yet, it's still just as mutable as the perl6

[19:37] <TimToady> unfortunately use of + for "possesive" is not suffiently general

[19:38] <TimToady> seen demerphq?

[19:38] <jabbot> TimToady: demerphq was seen 9 hours 50 minutes 14 seconds ago

[19:38] <b_jonas> PerlJam: not exactly, it has to be backwards compatible, so it can't use +:

[19:39] <TimToady> or enable via pragma

[19:39] <b_jonas> TimToady: what do you mean it's not sufficently general?

[19:39] <TimToady> can't put it on other things like [a|b|c]:

[19:39] <TimToady> (a|b|c)+ means something else

[19:39] <b_jonas> TimToady: rather via a regex flag like imsx than a pragma

[19:39] <b_jonas> yes, you can only write that as (?>a|b|c)

[19:39] <integral> dmq was just talking on rhizo #p5p

[19:41] <TimToady> I understand the compatibility issues, but we just can end up using ++ for two misleadingly similar things.

[19:41] <TimToady> *can't

[19:42] <demerphq> hu

[19:42] <demerphq> huh

[19:42] <SamB> you can't?

[19:42] * SamB would never have guessed that it was impossible to do so

[19:42] <TimToady> if x++ means one thing in p5 and something incompatible in p6 it'll be rather confusing

[19:43] <demerphq> er, i would have thought we cant use : in perl5.

[19:43] <demerphq> and the ++ thing is established elswhere from what i understood.

[19:43] <b_jonas> isn't p6 rules syntax sufficently distinct from p5 regexps that it won't cause confusion?

[19:43] <demerphq> also, what b_jonas said.

[19:43] <TimToady> that's correct, not without pragma or /x support.  that's why I'm also considering changing it in p6 instead

[19:43] <demerphq> :-)

[19:43] <TimToady> do you know where else ++ is possessive?

[19:43] <b_jonas> (yeah, I know you don't like me considering p6 a new language)

[19:44] <demerphq> its written in MRE that the '+' is the possessive form.

[19:44] <demerphq> Maybe TCL, id need to check.

[19:44] <TimToady> b_jonas: that doesn't bother me--I can break things if I want, but this is the sort of niggly breakage that isn't obvious enough to stand out.

[19:44] <TimToady> so is likely to be confusing.

[19:44] <demerphq> anyway, i used plus cause thats what friedl said was right, so shoot him if anybody needs shooting. =)

[19:45] <TimToady> so maybe greed override in p6 should be ?! *! +! or something.

[19:45] <TimToady> well, he should know, but I think possessive quantifiers aren't really the general solution to backtracking control...

[19:45] <b_jonas> well, it's true that ? * + ?? *? +? are the same in p5 and p6 res, so it might be confusing

[19:46] <TimToady> as long as our quantifiers start with something reserved we can use other chars after them as "tokens", so ! might work.

[19:46] <b_jonas> I'll look up if vim regexps have a syntax for atomicity (I know it has the equivalent for ?? *? +? {}?)

[19:46] <demerphq> wait, no, they are from java. sorry

[19:46] <demerphq> java.util.regex

[19:47] <PerlJam> demerphq: clearly it's wrong then  ;-)

[19:47] <demerphq> no doubt. why did i ever both.

[19:47] <demerphq> bother.

[19:47] <demerphq> :-)

[19:47] <TimToady> I suppose we could make ++ a synonym for +:

[19:47] <demerphq> Friedl you TRICKED ME!

[19:48] <demerphq> Anyway, im sorry this has caused a problem. Should i change the implementation timtoady?

[19:48] <PerlJam> demerphq: you didn't cause a problem, you hilighted an issue :)

[19:50] <TimToady> no, if other languages are using ++ for possessive, we should probably just avoid it in p6, or make it a synonym for p6's +: backtracking control.

[19:50] <b_jonas> the vim equivalent of ? * + ?? *? +? are \= * \+ \{-,1} \{-} \{-1,}

[19:50] <b_jonas> so there's no special syntax for ?? *? +? but only for {}?

[19:51] <TimToady> the thing I mentioned before you got here was that ++ doesnt generalize to (a|b|c)+

[19:51] <demerphq> friedl makes a big deal out of them.

[19:51] <TimToady> whereas +: does generalize to (a|b|c):

[19:51] <TimToady> they're a partial solution to the issue of backtracking, I think

[19:52] <demerphq> agreed

[19:52] <b_jonas> and \(foo\)\@> might be the vim equivalent of an (?>foo)

[19:52] <b_jonas> I'm not sure I read it correctly

[19:52] <PerlJam> demerphq: friedl makes a big deal about them in mre3?

[19:52] <demerphq> yep

[19:52] <TimToady> I like the visual correspondence of +: and +! too.

[19:52] <demerphq> no, 2nd

[19:53] <Limbic_Region> I thought the major changes in 3rd edition was PHP stuff anyway?

[19:53] <PerlJam> hmm.  I only have mre1 around here

[19:53] <demerphq> anyway, i have to go in a minute

[19:54] <demerphq> but before i go, is there anything i should know or do?

[19:54] <demerphq> btw, i did (?(DEFINE)....) as well just recently.

[19:54] <b_jonas> yes, \@> is atomic match in vim

[19:54] <demerphq> syntactic sugar for (?(?{0})...)

[19:54] <TimToady> i think you're okay now, was just a little panicked at the mismatch

[19:55] <b_jonas> so a++ is \(a+\)\@> in vim

[19:55] <PerlJam> demerphq++ btw for the recent p5 patches  :)

[19:55] <demerphq> ok, well my apologies for the panic. thanks perljam. :-)

[19:55] <TimToady> I'll do something different in P6

[19:55] <demerphq> for define? no doubt, that was just a workaround.

[19:56] <TimToady> +! or +- or +<> or something

[19:56] <demerphq> oh. i get it. duh.

[19:56] <TimToady> no, for greed override

[19:56] * PerlJam likes +! fwiw

[19:56] <demerphq> right.

[19:56] <TimToady> since tokens turn off greed

[19:56] <TimToady> tokens and rules default to possessive

[19:56] <demerphq> ok, well, i must trundle or the boss will get mad. shes waiting in the pub

[19:56] <TimToady> thanks

[19:58] <TimToady> or ?* ** and ?* unless friedl has claimed those as well... :/

[19:59] <b_jonas> I can't find "++" anywhere in S05 -- what does it do?

[19:59] <b_jonas> TimToady: but ** is used for another conflicting thing in perl6 rules, so will that improve anything?

[20:00] <TimToady> it's at line 1234

[20:00] <TimToady> only for **{...}

[20:01] <TimToady> which could be *{...} or just use space to distinguish ** {...}

[20:01] <b_jonas> I'm looking at a (possibly old) html version at "http://dev.perl.org/perl6/doc/design/syn/S05.html" so I can't go to a certain line

[20:02] <TimToady> but if we need space we might as well go with *{...} and require space for * {...}

[20:02] <TimToady> I picked **{...} because it was otherwise illegal.

[20:03] <b_jonas> but it's also nice because it implies power

[20:03] <b_jonas> which is how a mathematician would write repetition

[20:03] <TimToady> but **{0..*} is a lot of stars

[20:03] <Limbic_Region> speaking of dev.perl.org being outdated - is there a reason why S26 isn't there either?

[20:03] <Limbic_Region> is there a sync issue?

[20:03] <TimToady> so only just added to pugs repo, I think

[20:04] <pmichaud_> "My god...it's full of stars"

[20:04] <b_jonas> isn't there a monadic suffix .. now, so you can write **{0..}

[20:04] <TimToady> no, we don't allow infixes to just leave off their argument.

[20:04] <TimToady> throws the whole term/operator expectation thing into disarray

[20:05] <b_jonas> As an unrelated thing, will the ^ prefix operator give numeric context to its argument so I can write ^@array instead of ^+@array ?

[20:05] <b_jonas> yes, that sounds right

[20:06] <b_jonas> once the rules for parenthesis-less function calls fixed as is, they don't cause the parsing ambiguity they would otherwise

[20:06] <b_jonas> so we shouldn't ruin that

[20:06] <TimToady> it will just send a ^ message to the object and the object will do whatever it likes with it.  For most non-class objects it should probably ^+

[20:06] <b_jonas> I see

[20:07] <TimToady> and we're relying very heavily on term/term juxtaposition illegality to keep things sane

[20:07] <svnbot6> r14309 | fglock++ | v6/Emitter/Perl6/Perl5.pm(2) - the emitter does subroutine parameter binding by generating & compiling perl6 code; this way it gets typechecking and coercions for free.

[20:08] *** SubStack joined
[20:08] <TimToady> if ^@foo is 0..^@foo then arguably ^%hash is %hash.keys

[20:08] <b_jonas> I also like ruby's rules for parenless method calls

[20:08] <b_jonas> which is that if the call is a statement then it's ok to leave out the parens, otherwise it's not

[20:08] <PerlJam> But I thought ^ was the "meta" sigil  :)

[20:08] <b_jonas> (of course ruby excepts statements at lot more places than perl5)

[20:09] <TimToady> I looked at that a long time, and decided I didn't like it, compared to the : thing we have

[20:09] <b_jonas> sure

[20:09] <TimToady> ^ is the meta sigil on metathings like prototypes

[20:09] <TimToady> but I think only prototypes respond that way to ^

[20:10] <TimToady> otherwise you should use .HOW

[20:10] <b_jonas> the disadvantage of the ruby thing is that as (foo;bar) is legal, it's difficult to catch unclosed parenthesis errors

[20:10] <b_jonas> especially because a newline also implies a semicolon

[20:10] <b_jonas> in ruby

[20:10] <TimToady> yeah, ; are also useful in self-clocking

[20:10] <b_jonas> ?self-clocking

[20:11] <TimToady> natural sync points, though arguably ; is not natural

[20:11] <b_jonas> as for semicolon, I like the way Mathematica uses it

[20:11] <TimToady> but say like, in Japanese, where most words start with kanji and end with hiragana

[20:11] <PerlJam> EOL works that way too (though invisibly)

[20:11] <PerlJam> er, *can* work that way

[20:12] <PerlJam> (thus ruby's rule about implicit ; )

[20:12] <b_jonas> that is, 'foo;' evaluates foo and then returns void

[20:13] <TimToady> that seems like to small a character to carry that kind of weight.

[20:13] <TimToady> *too

[20:13] <TimToady> especially for people who are used to ignoring ;

[20:13] <PerlJam> so ... was there an agreement on the possessive quantifier modifier character?

[20:13] <PerlJam> (try saying that 3 times fast)

[20:14] <TimToady> agreement? what is this thing?

[20:14] *** andara left
[20:14] <PerlJam> er, concensus?

[20:14] <PerlJam> lack of discord?

[20:14] <b_jonas> PerlJam: wonder why I call it atomic?

[20:14] <PerlJam> fiat?

[20:14] <TimToady> ah, that I understand... :)

[20:15] <b_jonas> PerlJam: as demerphq is gone, I don't think there could be a final word on it yet

[20:15] <PerlJam> And here I thought Guido was the BDFL

[20:15] <TimToady> I gave him permission to stay with ++ in p5

[20:16] <TimToady> I'm mostly wondering if there's prior art with **

[20:16] <TimToady> and ?* and +* and *{...}* of course

[20:17] <TimToady> or whether I should just grab some other character like !

[20:17] <PerlJam> *{...}* is oddly symmetrical (while the others aren't)

[20:17] <TimToady> * would work nicely, all other things being equal, which they never are

[20:17] <b_jonas> what's the problem with the colon then?

[20:18] <TimToady> colon is implicit in tokens and rules, so you need an anticolon

[20:18] <b_jonas> oh,

[20:18] <TimToady> and I don't want to make *: mean opposite things

[20:18] <b_jonas> you want a 'do backtrack' statement

[20:18] <TimToady> yeah

[20:19] <TimToady> the extra + was that, but it looks like a bad idea now.

[20:19] <TimToady> so I wonder if anyone (besides me) as made an extra * mean anything...

[20:19] <[particle]> :(0)

[20:20] <[particle]> if only that would work... or i gues ::(0)

[20:20] <TimToady> is that a smiley or a suggestion?

[20:20] <[particle]> like :i(0)

[20:20] <b_jonas> is there an anti-space for when the :s modifier is in action?

[20:20] <[particle]> of course, it won't work

[20:20] <[particle]> !:

[20:20] <TimToady> :!s

[20:20] <[particle]> :!:

[20:21] <b_jonas> sure, but, for only one place

[20:21] <b_jonas> or does it act only locally?

[20:21] <b_jonas> I mean between two non-space things

[20:21] <TimToady> I guess ! already is a meta after !, except it means "not" there rather than "dammit!"

[20:21] <[particle]> it's lexically scoped

[20:21] <TimToady> after : I mean

[20:22] <[particle]> is ; used?

[20:23] <b_jonas> is "http://dev.perl.org/perl6/doc/design/syn/S05.html" a recent version of the synopsis? if no, are there up-to-date versions easily reachable via http anyehere?

[20:23] <TimToady> no, but I think there's a lot of languages that would be unhappy if ; became a metachar...

[20:23] *** penk joined
[20:23] <[particle]> b_jonas: that should be the latest

[20:23] <b_jonas> isn't the point to make all nonword chars metachars in p6 rules?

[20:23] <b_jonas> :)

[20:24] <[particle]> well, in some languages ; is whitespace

[20:24] <TimToady> and ; is probably too easy to confuse with : visually

[20:24] <b_jonas> (poor fonts)--

[20:24] <[particle]> yes indeed

[20:24] <[particle]> how about =

[20:24] <TimToady> um, S05 has a last-modified date which will tell you how up-to-date it is...

[20:25] <b_jonas> = is already used, isn't it, as named captures

[20:25] <TimToady> no, :=

[20:25] <TimToady> since : is a meta

[20:25] <b_jonas> ah indeed

[20:25] <b_jonas> it says oct 2006

[20:25] <TimToady> maybe :! should mean "don't not backtrack"

[20:26] <[particle]> perhaps it's time for real smileys

[20:26] <[particle]> :P

[20:27] <[particle]> :-*

[20:27] <b_jonas> :(

[20:27] <TimToady> :O

[20:27] <TimToady> :D

[20:27] <[particle]> :X

[20:27] <TimToady> "I would be very happ if you

[20:27] <TimToady> Din't not backtrack here

[20:28] <TimToady> need to learn to type...

[20:28] <b_jonas> = sounds nice for an anti-colon though

[20:28] <TimToady> sec..

[20:28] <[particle]> :-K

[20:28] <[particle]> "that's what i think of backtracking right now..."

[20:29] <b_jonas> oh, so + is the anti-? quantifier-modifier, I see

[20:29] <b_jonas> pcre lacks that

[20:32] <TimToady> I think *:! is superior to ** in the same way that *: is superior: is superior to **

[20:33] <TimToady> you can say [a|b|c]:! and turn bcktracking back on

[20:34] <[particle]> i'd really like to be able to meta-enable backtracking in tokens

[20:34] <TimToady> sorry about the lousy typing, but I'm mostly typing blind because the link between $job and $home is very slow for some reason...

[20:34] <ingy> seen stevan

[20:34] <jabbot> ingy: stevan was seen 7 hours 45 minutes 27 seconds ago

[20:34] <b_jonas> oh, = wouldn't work because := is used already

[20:34] <[particle]> so, [a|b|c]:!? would still work?

[20:35] <[particle]> and is that the same as [a|b|c]?:! ?

[20:35] <TimToady> er, huh?

[20:36] <[particle]> optional a or b or c

[20:37] <TimToady> I suppose, but that is making a good argument for * instead of :! I think...

[20:38] <TimToady> dunno, need to think about it all some more.

[20:38] <TimToady> will do so over lunch.

[20:38] <TimToady> so, lunch. &

[20:49] *** dolmen joined
[20:52] *** buetow joined
[20:52] *** Aankhen`` joined
[21:00] *** weinig|away is now known as weinig

[21:03] *** aufrank left
[21:20] <ajs> <?>...> is already taken? ;-)

[21:23] *** MacVince joined
[21:27] <rindolf> ingy: ping

[21:28] *** leo joined
[21:39] *** Limbic_Region joined
[21:46] <nothingmuch> @seen cmarcello

[21:46] <nothingmuch> @seen cmarcelo

[21:49] <rindolf> Hi nothingmuch

[21:49] <nothingmuch> hi

[21:54] *** lambdabot joined
[21:55] *** avarab joined
[22:01] *** spedri joined
[22:09] *** cjeris left
[22:25] *** Aankhen`` joined
[23:02] *** weinig is now known as weinig|bbl

[23:32] <svnbot6> r14310 | fglock++ | v6/emitter(2) - positional arguments work

[23:33] <svnbot6> r14310 | fglock++ | - passes t/01-sanity/05-sub.t

[23:36] *** mako132_ joined
[23:40] *** demerphq joined
[23:40] *** jferrero joined
