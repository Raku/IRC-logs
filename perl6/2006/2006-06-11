[01:11] *** revision17_ joined
[01:47] *** SamB joined
[01:47] *** Odin-LAP joined
[02:05] *** shachaf joined
[02:06] *** |mjk| joined
[02:07] *** DaGo joined
[02:20] *** weinig is now known as weinig|zzz

[02:23] <svnbot6> r10591 | audreyt++ | * Upgrade fps yet again to synchronize with the eventual GHC 6.6.

[02:30] *** SamB joined
[03:10] <audreyt> TimToady: junctive?

[03:11] <audreyt> $a[1|2] = func();

[03:11] <audreyt> not even sure what it means, so not going to SIMPLE it now

[04:05] *** DaGo joined
[04:20] <audreyt> TimToady: also

[04:20] <audreyt> f(1, 2 and 3, 4)

[04:21] <audreyt> this is one arg call for &f or three?

[04:21] <audreyt> pugs has it as three, based on the observation that within a funcall bracket, "," drops to most loose prec

[04:21] <audreyt> but perl5 has it as one

[04:22] <audreyt> is pugs incorrect?

[04:46] *** nperez joined
[04:47] *** bjoern_ joined
[04:54] *** fglock joined
[05:14] <audreyt> TimToady: also

[05:14] <audreyt> $x = f(); # scalar

[05:14] <audreyt> my $x = f(); # scalar

[05:14] <audreyt> my ($x) = f(); # scalar? list?

[05:14] <audreyt> I'm taking the "list" interpretation

[05:32] <obra> audreyt: could you be bribed to make your shiny new jifty testing stuff jifty-core "soon"?

[05:33] <audreyt> if "soon" means when I get to Boston, that neeeds no bribing

[05:34] <clkao> audreyt: ;)

[05:34] <clkao> sooner will be better

[05:35] <clkao> audreyt: btw, i wrote a callgraph analyseer

[05:36] <audreyt> ooh nice

[05:39] <audreyt> I'm working on variable hoisting at this moment... will be back in ~15min

[05:46] <audreyt> yay, variables hoisted.

[05:47] <audreyt> ?eval my $x = 3 unless $x.defined;

[05:47] *** evalbot_10587 is now known as evalbot_10591

[05:47] <evalbot_10591> Error:  unexpected "u" expecting comment, operator, ";" or end of input

[06:06] <audreyt> my $x; for 1..10 { $x++; say ($x ::= 1) }

[06:06] <audreyt> should this say 2, then 3, all the way to 11?

[06:31] <svnbot6> r10592 | audreyt++ | * Prelude.pm: "our $qualified::name" is invalid syntax.

[06:32] *** jabbot joined
[06:59] *** Aankhen`` joined
[07:14] <xerox> audreyt!

[07:14] <audreyt> yo

[07:14] <xerox> Did you see the message I left you in lambdabot?

[07:15] <audreyt> yes; I updated the link

[07:15] <audreyt> was a typo.

[07:15] <xerox> Thank you very very much.

[07:15] <audreyt> http://hackage.haskell.org/trac/ghc/wiki/X86OSXGhc

[07:15] <audreyt> no prob. let me know if it works

[07:15] <xerox> Will do.

[07:16] <xerox> Question, `make install' installs everything under a simple-to-clean-up directory under /usr/local ?

[07:16] <xerox> (I never installed GHC from its makefile before.)

[07:16] <audreyt> yes.

[07:16] <audreyt> /usr/local/lib/ghc-* and /usr/local/bin/*ghc*

[07:16] <audreyt> that's all

[07:16] <xerox> Perfect!

[07:17] <xerox> I wonder if Wolfgang will eventually produce an universal GHC.app...

[07:17] <svnbot6> r10593 | audreyt++ | * fps: prefix the C functions with fps_ to avoid name clash.

[07:20] <svnbot6> r10594 | audreyt++ | * FindBin.pm: Remove the "our $qualified::name" syntax.

[07:23] <svnbot6> r10595 | audreyt++ | * Prelude.pm: Remove the now-deprecated "my ($x, undef) = f()"

[07:23] <svnbot6> r10595 | audreyt++ |   syntax; simply omitting the rightmost undef in this case will do.

[07:33] <audreyt> okay, I'm ready to push my local branch :)

[07:33] <audreyt> expect massive, massive breakage; also rm blib6/lib/*.yml before building.

[07:38] <svnbot6> r10596 | audreyt++ | * Here begins the changes needed to make TimToady++'s new

[07:38] <svnbot6> r10596 | audreyt++ |   t/operators/assign.t to pass.

[07:38] <svnbot6> r10596 | audreyt++ | * First off, assignment is parsed differently:

[07:38] <svnbot6> r10596 | audreyt++ |         $x = 1, 2;  # ($x = 1), 2

[07:38] <svnbot6> r10596 | audreyt++ |         @x = 1, 2;  # @x = (1, 2)

[07:38] <svnbot6> r10596 | audreyt++ |   this relies on the "isScalarLValue" function to check

[07:38] <svnbot6> r10596 | audreyt++ |   "SIMPLE"ness of an Exp.  See S03 for details.

[07:38] <svnbot6> r10597 | audreyt++ | * Next, we adjust Eval.Var.inferExpCxt to use this static

[07:38] <svnbot6> r10597 | audreyt++ |   inferencing engine, instead of the dynamic one as before.

[07:38] <svnbot6> r10598 | audreyt++ | * We then remove the dated infer calls from Pugs.Eval.

[07:41] <svnbot6> r10599 | audreyt++ | * Now we look at the parser.  To parse the RHS of "=" in a

[07:41] <svnbot6> r10599 | audreyt++ |   way that depends on the LHS, we introduce a new internal

[07:41] <svnbot6> r10599 | audreyt++ |   fixity: "DependentPostfix".

[07:41] <svnbot6> r10599 | audreyt++ | * The idea is that the "= LISTEXPR" itself is parsed as a

[07:41] <svnbot6> r10599 | audreyt++ |   single postfix, and therefore can transcend is current

[07:41] <svnbot6> r10599 | audreyt++ |   "tight op" prec level.

[07:45] <svnbot6> r10600 | audreyt++ | * Armed with DependentPostfix, we rewrite the two "strange"

[07:45] <svnbot6> r10600 | audreyt++ |   rightward infix syntax operators to use it.

[07:45] <svnbot6> r10600 | audreyt++ | * "=" is changed to test for LHS simpleness, and reparse

[07:45] <svnbot6> r10600 | audreyt++ |   with list expressions if it's complex.  if it's simple,

[07:45] <svnbot6> r10600 | audreyt++ |   it retains its original prec and fixity (Infix).

[07:45] <svnbot6> r10600 | audreyt++ | * "::=" is changed to unsafely evaluate itself as ":="

[07:45] <svnbot6> r10600 | audreyt++ |   at parse time, then simply return the LHS to the runtime

[07:45] <svnbot6> r10600 | audreyt++ |   AST tree.  This means the following code now works:

[07:45] <svnbot6> r10600 | audreyt++ |     (my $y ::= 1) := 4;

[07:51] <xerox> ^- scary code

[07:51] <svnbot6> r10601 | audreyt++ | * Now we have ($x = 1, 2) parsing correctly, we still has to fix

[07:51] <svnbot6> r10601 | audreyt++ |     my $x = 1, 2;

[07:51] <svnbot6> r10601 | audreyt++ |   to parse the same way.  Pugs used to only allow variable

[07:51] <svnbot6> r10601 | audreyt++ |   declarations to appear at statement level, so the statement

[07:51] <svnbot6> r10601 | audreyt++ |   above can't be parsed correctly.

[07:51] <svnbot6> r10601 | audreyt++ | * To allow this, we must allow declarations to occur whenever

[07:51] <svnbot6> r10601 | audreyt++ |   a variable may occur, collect those declarations to the

[07:51] <svnbot6> r10601 | audreyt++ |   current innermose block, then hoist them all:

[07:51] <svnbot6> r10601 | audreyt++ |     {

[07:51] <svnbot6> r10601 | audreyt++ |         say (my $x + my $x);    # 0

[07:51] <svnbot6> r10601 | audreyt++ |     }

[07:51] <svnbot6> r10601 | audreyt++ |   note that duplicate declarations is okay.

[07:51] <svnbot6> r10601 | audreyt++ | * The function "addBlockPad" in the RuleParser monad now

[07:51] <svnbot6> r10601 | audreyt++ |   does exactly this, via a new RuleState entry that remembers

[07:51] <svnbot6> r10601 | audreyt++ |   the pad to be allocated for each storage class.

[07:51] <svnbot6> r10601 | audreyt++ | * Also change "localEnv" to remove the new-pad info on scope exit.

[07:51] <svnbot6> r10602 | audreyt++ | * Adjust Parser.Program and Parser.Util for the new parser state.

[07:54] <svnbot6> r10603 | audreyt++ | * Now we are ready to remove the statement-level ruleVarDeclaration

[07:54] <svnbot6> r10603 | audreyt++ |   and change it to the expression-level ruleVarDecl in Parser.hs.

[07:54] <svnbot6> r10603 | audreyt++ | * This is a bit complicated as S03 "Declarator" specifies that

[07:54] <svnbot6> r10603 | audreyt++ |   declarators takes the Sigs syntax, and we need to implement this:

[07:54] <svnbot6> r10603 | audreyt++ |     my ($x!) := 1;

[07:54] <svnbot6> r10603 | audreyt++ | * However, for the parens-less form, the modifiers and defaulting

[07:54] <svnbot6> r10603 | audreyt++ |   permissions introduces ambiguities:

[07:54] <svnbot6> r10603 | audreyt++ |     my $x? = 'default' = 3;

[07:54] <svnbot6> r10603 | audreyt++ |   so we simply disallow them with the "FormalsSimple" flag.

[07:54] <svnbot6> r10603 | audreyt++ |   The "FormalsComplex" flag specifies the full Sigs syntax as before.

[07:54] <svnbot6> r10604 | audreyt++ | * Prim.hs: "die" is now strict in evaluating its operand.

[07:55] <audreyt> 11302 test cases: 11120 ok, 182 failed, 1595 todo, 1179 skipped and 61 unexpectedly succeeded

[07:56] <audreyt> anyone have a minute or so to unTODO the 61 unexpected successes?

[07:56] <svnbot6> r10605 | audreyt++ | * Pugs.Rule: remove unused import.

[07:56] <svnbot6> r10606 | audreyt++ | * Pugs.AST.Internals: finally, bump the CompUnit number

[07:56] <svnbot6> r10606 | audreyt++ |   to indicate that Prelude.pm needs to be reparsed.

[07:56] <svnbot6> r10606 | audreyt++ | * The changed above incidentally fixed the JavaScript backend through

[07:56] <svnbot6> r10606 | audreyt++ |   no efforts of my own...

[08:01] <xerox> audreyt - What font do you use in the terminal? :)

[08:01] <audreyt> Consolas

[08:03] <xerox> Uhm.

[08:04] <xerox> .exe download... nah?

[08:07] <audreyt> should be a .zip somewhere

[08:07] <svnbot6> r10607 | audreyt++ | * Disambiguate "=>", "==" and "=:=" from rightward listop=.

[08:09] <xerox> Ah-ha.

[08:09] <svnbot6> r10608 | audreyt++ | * fix parsefails in tests.

[08:09] <svnbot6> r10609 | audreyt++ | * remove unused ruleVarDeclaration from Parser.

[08:13] <xerox> It does show up nicely there? Looks kinda awful here O_o

[08:13] <audreyt> did you turn up antialias?

[08:14] *** iblechbot joined
[08:14] <xerox> audreyt++

[08:14] <audreyt> :)

[08:14] <xerox> Nice, nice, 14pt.

[08:15] <audreyt> 24pt here ;)

[08:15] <svnbot6> r10610 | audreyt++ | * Parse "my $!x" correctly -- it's after all just "my $x".

[08:17] <xerox> haha

[08:17] <xerox> Really?

[08:18] *** macroron joined
[08:18] <xerox> audreyt - I demand a screenshot.

[08:18] <xerox> (;

[08:20] <audreyt> I'm seriously nearsighted...

[08:21] <xerox> Well, big good-looking fonts are appealing.

[08:24] <xerox> Since you happen to know everything...

[08:24] <xerox> Do you know how to enable `libreadline'-like movements in the Terminal? In particular CTRL+arrows to move between words, (or Alt, or whatever.)

[08:25] <xerox> Here CTRL+<- prints 'D'... very useful.

[08:26] <audreyt> worksforme here.

[08:26] <xerox> Argh!

[08:27] <audreyt> ...but only in irssi, heh.

[08:27] <xerox> haha

[08:27] <xerox> I need it in GHCi, obviously :)

[08:27] <xerox> ^W ^A ^E work...

[08:28] <xerox> If only there was something to move between words :-|

[08:30] <spinclad> .oO{ r10601: s/innermose/innermoose/ }

[08:30] <audreyt> down to 144 fail

[08:30] <audreyt> spinclad: got some time to chase the yellow boxes?

[08:30] <audreyt> http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.11-r10590-darwin-normal--1150014544-766--11554-11410-144-1631-1179-63--1f8fdc86b8b3adfa10907250b370dc83.html

[08:31] <xerox> innermost :)

[08:31] <audreyt> remove the :todo and force_toto on the ywllow boxes...

[08:31] <audreyt> I'll bbiab

[08:32] <spinclad> as long as i don't have to run them... slow box here, smoke takes hours

[08:32] <xerox> hehe, ask for an account on audrey's fast-spinning-macintel ;)

[08:33] <spinclad> or refresh my feather account

[08:33] <audreyt> you don't have to run them :)

[08:33] <audreyt> hovering on the box gives you line #

[08:34] <spinclad> didn't think so; i'll leave verifying them to a later smoke

[08:35] <xerox> Is there a reason why is it called smoke?

[08:35] <spinclad> audreyt: will you be nibbling on these too?  should we nibble from opposite ends?

[08:35] <audreyt> spinclad: I'll nibble redboxes instead

[08:35] <audreyt> so however you nibble it's fine

[08:35] <spinclad> good

[08:35] <spinclad> smoke test:  run it and see what gives off smoke

[08:35] <audreyt> http://en.wikipedia.org/wiki/Smoke_test

[08:36] <xerox> Gee.

[08:36] <audreyt> "Non-toxic smoke is used to find leaks in plumbing and sanitary sewer systems. Artificially created smoke is forced into the pipe or container. Plumes of smoke form where there are defects. It is particularly useful where completely sealing the system is not practical such as ventilated sanitary sewer systems."

[08:36] * xerox laughs

[08:36] <xerox> Makes sense :-)

[08:37] <spinclad> see also 'magic smoke' in the hackers' dictionary

[08:38] <audreyt> dinner, bbiab...

[08:39] *** DaGo joined
[08:39] <spinclad> and 'smoke test' itself there

[08:39] <xerox> A substance trapped inside IC packages that enables them to function (also called `blue smoke'; this is similar to the archaic `phlogiston' hypothesis about combustion). Its existence is demonstrated by what happens when a chip burns up -- the magic smoke gets let out, so it doesn't work any more. See smoke test, let the smoke out.

[08:41] *** qwackqwack is now known as leptonix

[08:42] *** leptonix is now known as qwackqwack

[08:43] <spinclad> smoke test: ... There is an interesting semi-parallel to this term among typographers and printers: When new typefaces are being punch-cut by hand, a /smoke test/ (hold the letter in candle smoke, then press it onto paper) is used to check out new dies.

[08:43] *** qwackqwack is now known as qwacky

[08:47] * spinclad invokes his innermoose

[09:04] *** Revision17 joined
[09:06] *** lambdabot joined
[09:06] *** szbalint joined
[09:16] <cognominal> http://maxao.free.fr/xcode-plugin-interface/  # come on there is a plugin for ocaml, there should be one for haskell

[09:16] * cognominal is learning his way thru his shiny macbook

[09:17] <cognominal> too bad, UPS come Monday to ship it to Apple to get it fixed

[09:18] <xerox> cognominal - Maybe HOC guys have got something!

[09:18] <cognominal> HOC?

[09:19] <xerox> Haskell ObjC

[09:21] <cognominal> camelbones is nice

[09:21] <xerox> What's that?

[09:22] <xerox> By the way, it seems like Apple sold a HUGE quantity of macintels.

[09:28] <xerox> cognominal - I am also interested in the matter too, by the way.

[09:30] <integral> camelbones is the objC<->Perl bridge

[09:35] *** stephanepayrard_ joined
[09:35] <stephanepayrard_> I thought that was a thermal sensor problem but I installed a widget who gives  me  41C as temperature

[09:49] <svnbot6> r10611 | spinclad++ | JudyHS:  silence a few warnings

[09:50] *** Aankh|Clone joined
[10:02] <spinclad> done

[10:02] *** b_jonas joined
[10:02] <svnbot6> r10612 | spinclad++ | - untodo 63 passing todo's

[10:02] *** elmex joined
[10:02] *** chris2 joined
[10:03] *** ludan joined
[10:05] <spinclad> and now to bed... bye, all &

[10:09] <audreyt> spinclad++

[10:30] *** phpError joined
[10:30] *** DaGo joined
[10:39] *** xern_ joined
[10:42] *** reZo joined
[10:51] *** nicks joined
[11:05] *** b_jonas joined
[11:09] *** iblechbot joined
[11:13] *** pjcj joined
[11:39] *** elmex joined
[11:42] *** reZo joined
[11:56] *** phpError joined
[12:02] *** buetow joined
[12:02] *** buetow is now known as pbuetow

[12:02] *** pbuetow is now known as buetow

[12:09] *** reZo joined
[12:23] *** phpError joined
[12:26] *** enantiodrome joined
[12:34] *** cognominal joined
[12:47] *** DaGo joined
[12:49] <QtPlatypus> Are junctions/superpositions related to Superposition calculis or is it just a co-incidence.

[13:14] *** jsiracusa joined
[13:25] *** nperez joined
[13:27] <xerox> What are .pm files?

[13:33] <buetow> Perl modules.

[13:36] <svnbot6> r10613 | audreyt++ | * FindBin.pm: use "our" instead of silly aliasing

[13:39] <svnbot6> r10614 | audreyt++ | * ref.t: unbreak the test; aliasing methods now work.

[13:44] *** jiing joined
[13:53] *** reZo joined
[13:56] *** gaal joined
[14:02] *** FurnaceBoy joined
[14:15] *** b00t joined
[14:22] <svnbot6> r10615 | audreyt++ | * "Cheap and cheerful" prototype objects!

[14:22] <svnbot6> r10615 | audreyt++ |   VType (constructed by ::Foo and friends) is now a prototype

[14:22] <svnbot6> r10615 | audreyt++ |   of the type it represents; it's considered undefined, and is

[14:22] <svnbot6> r10615 | audreyt++ |   indistinguishable from "undef" except on method calls.

[14:22] <svnbot6> r10616 | audreyt++ | * Prim: VType is considered undef

[14:31] <svnbot6> r10617 | audreyt++ | * Support for prototype objects in typed declarators:

[14:31] <svnbot6> r10617 | audreyt++ |     my Moose $x;

[14:31] <svnbot6> r10617 | audreyt++ |     $x .= new;  # this now works

[14:32] <audreyt> pugs... is now a quite different animal compared with yesterday

[14:33] * audreyt wants another 10mins for the new breakage smoke report

[14:33] <audreyt> s/want/wait/

[14:33] <wolverian> whoo!

[14:33] <wolverian> audreyt++

[14:33] <buetow> ++audreyt; :-)

[14:34] <audreyt> the plan is still to fix those breakage and roll a relesae instead of continuing with capturizing :)

[14:34] <audreyt> TimToady++ # committing t/operators/assign.t

[14:34] <audreyt> without that, it's likely that release would have already happened by now...

[14:42] *** enantiodrome joined
[14:46] <FurnaceBoy> audreyt += 7

[14:49] <b_jonas> quite a different animal? it's now a Moose?

[14:51] <audreyt> maybe it's many Moose..

[14:53] *** weinig|zzz is now known as weinig

[14:55] *** neoesque joined
[14:58] *** FurnaceBoy_ joined
[14:58] <svnbot6> r10618 | audreyt++ | * Prototype objects stringifies to empty. I think.

[14:58] <svnbot6> r10619 | audreyt++ | * random cleanup to remove unused imports

[15:00] *** marmic joined
[15:08] *** nothingmuch joined
[15:09] *** cdpruden joined
[15:24] *** elmex joined
[15:27] *** phpError joined
[15:28] *** iblechbot joined
[15:34] <svnbot6> r10620 | audreyt++ | * DateTime: fix misuse of BUILD where it means new.

[15:43] *** reZo joined
[15:49] <svnbot6> r10621 | audreyt++ | * todo Date test.

[16:09] *** penk joined
[16:10] *** bernhard joined
[16:16] <svnbot6> r10622 | audreyt++ | * unTODO 15 more passing subtests.

[16:22] <audreyt> TimToady: should ::Int stringifiy stringify to "Int" or "" ?

[16:22] <audreyt> primciple of least surprise says 'Int'

[16:25] <svnbot6> r10623 | audreyt++ | * Principle of least surprise: ::Int stringifies to "Int", not "".

[16:26] *** dazjorz joined
[16:26] <dazjorz> Hey guys

[16:26] <audreyt> greetings.

[16:26] <svnbot6> r10624 | audreyt++ | * However, fix the tests so they don't depend on the ::Int->"Int" behaviour.

[16:28] *** Aankh|Clone is now known as aankhen``

[16:28] *** aankhen`` is now known as Aankhen``

[16:30] *** phpError joined
[16:30] *** gaal joined
[16:34] <dazjorz> omg perl 6 is freaky.

[16:40] <dazjorz> from what I've seen of it, that is.

[16:40] <dazjorz> Not much, I admit, but enough for my opinion.

[16:42] <audreyt> perl in general is freaky...

[16:43] <audreyt> usefully freaky, I think, mostly.

[16:45] <dazjorz> true

[16:45] <dazjorz> but when you're used to Perl 5, Perl 6 is like... Seeing a spider making a web, when you're used to seeing a ... Well, whatever.

[16:45] <dazjorz> I mean, it's freaky.

[16:49] *** evalbot_10623 joined
[16:50] *** _bernhard joined
[16:52] <audreyt> journal up; good night :)

[16:53] <wolverian> sleep well!

[16:54] *** gaal joined
[16:54] <obra> night

[16:55] <dazjorz> gnight

[16:55] *** reZo joined
[16:59] *** evalbot_10624 joined
[17:01] *** bernhard_ joined
[17:03] <svnbot6> r10625 | audreyt++ | * Net::IRC: change all

[17:03] <svnbot6> r10625 | audreyt++ |         %channels{normalize($chan)}<topic> = $topic;

[17:03] <svnbot6> r10625 | audreyt++ |     to

[17:03] <svnbot6> r10625 | audreyt++ |         %channels{~normalize($chan)}<topic> = $topic;

[17:03] <svnbot6> r10625 | audreyt++ |   lest it tries to dereference an one-elem slice as a hash,

[17:03] <svnbot6> r10625 | audreyt++ |   which is currently a fatal error in Pugs.  Not sure if it

[17:03] <svnbot6> r10625 | audreyt++ |   should be that way...

[17:04] <svnbot6> r10626 | audreyt++ | * "xor" is loose precedence so negated_smartmatch was confused with:

[17:04] <svnbot6> r10626 | audreyt++ |     my $x = ... xor ...;

[17:04] <svnbot6> r10626 | audreyt++ |   rewrite to use:

[17:04] <svnbot6> r10626 | audreyt++ |     my $x = (... xor ...);

[17:05] *** _bernhard_ joined
[17:06] *** evalbot_10625 joined
[17:07] <audreyt> ?eval my Int $a = $a.ref.ref.ref unless $a.defined;

[17:07] <evalbot_10625> \::Int

[17:07] *** Ymmv joined
[17:07] <svnbot6> r10627 | audreyt++ | * indirect_notation - fix scopign

[17:07] <audreyt> good, evalbot is working again. I can rest in peace. :) &

[17:13] *** macroron joined
[17:19] *** phpError joined
[17:20] *** shachaf joined
[17:54] *** weinig joined
[18:00] *** b_jonas left
[18:07] *** reZo joined
[18:08] *** weinig is now known as weinig_

[18:08] *** weinig_ is now known as weinig

[18:12] *** penk joined
[18:23] *** phpError joined
[18:38] *** shlomif joined
[18:38] <shlomif> Hi all.

[18:38] <xerox> Hi you.

[18:38] <shlomif> xerox: hi hi.

[18:38] <shlomif> xerox: what's up?

[18:39] *** reZo joined
[18:41] *** Odin- joined
[18:46] <dazjorz> ping.

[18:48] *** beppu joined
[18:53] <shlomif> Hi dazjorz

[18:53] <dazjorz> Hi shlomif :)

[18:54] <dazjorz> Although I expect people to answer 'pong', or in reality 'abcdef', to my pings. :)

[19:00] *** rindolf joined
[19:04] *** SamB joined
[19:14] *** cflag is now known as Captain_Fourierr

[19:17] *** larsen joined
[19:22] *** lisppaste3 joined
[19:24] *** dazjorz left
[19:36] *** jsiracusa joined
[19:57] *** hexmode joined
[20:04] *** amnesiac joined
[20:36] *** ludanolo joined
[20:37] *** ludan joined
[20:37] *** DaGo joined
[20:38] *** mj41_ joined
[20:38] *** ludanolo is now known as ludan

[20:38] *** ludanolo joined
[21:09] *** iblechbot joined
[21:13] *** qwr joined
[21:15] <qwr> can pugs be told, that its source is for example iso-8859-1 encoded?

[21:25] *** hexmode joined
[22:05] *** Captain_Fourierr left
[23:12] *** elmex joined
[23:18] *** scw joined
[23:18] *** xern joined
[23:18] *** oylenshpeegul joined
[23:21] *** oylenshpeegul left
[23:51] <audreyt> qwr: not yet; it needs support for =encoding pragma I think

