[00:02] *** macroron joined
[00:14] *** macroron_ joined
[00:24] <pasteling> "markstos" at 12.176.101.89 pasted "reduced case of the passing-named-args-through-a-wrapper issue" (20 lines, 677B) at http://sial.org/pbot/19377

[00:27] *** nekokak joined
[00:30] <markstos> Maybe the solution I need lies with Capture options. The example here looks sort of like what I want but doesn't work in pugs now:

[00:30] <markstos> http://feather.perl6.nl/syn/S06.html#Argument_list_binding

[00:30] <lambdabot> Title: S06

[00:36] <markstos> Ah, it looks like everything is broken in t/data_types/arglist.t. :/

[00:47] *** pjcj joined
[01:14] *** foo\ joined
[01:14] <svnbot6> r12889 | markstos++ | Only send the Content-Type header if we have a content-type.

[01:15] *** xinming joined
[01:35] *** xinming__ joined
[01:42] *** luqui joined
[02:02] <audreyt> ?eval audreyt 4

[02:02] *** evalbot_12888 is now known as evalbot_12889

[02:02] <evalbot_12889> Error: No compatible subroutine found: "&audreyt"

[02:02] <audreyt> oops. :)

[02:02] <ajs> hmmm... at some point PARROT_PATH=../parrot used to work... now I get errors unless I give a full path.

[02:02] <audreyt> ajs: that might be the case, as the dir for building embed has changed

[02:08] <audreyt> Limbic_Region: found the bug, fixing

[02:10] <audreyt> fixed

[02:10] <markstos>  ... in 1 minute, 2 seconds.

[02:11] <audreyt> er, it's perl5 code, it's supposedly good for rapid prototyping :)

[02:11] <svnbot6> r12890 | audreyt++ | * Complete PUGS_EMBED defaulting to perl5 in inc/ too, which fixes the problem Limbic_Region++ reported for Win32

[02:11] * audreyt gets ready for $job

[02:13] <audreyt> self.core(%h)  should be

[02:13] <audreyt> self.core([,] %h)

[02:13] <audreyt> in your example, as you are not passing in a hash, you as passing in named arguments

[02:13] <audreyt> but even that doesn't work yet, so please commit it as a test. also arglist.t is now better renamed capture.t or some such

[02:14] <audreyt> sorry, have to run... afk

[02:14] *** mako132_ joined
[02:14] <markstos> thanks for the feedback, audreyt.

[02:24] <markstos> Surprising to me, calling the sub with an array of args dispatches to the method that takes a hash of args:

[02:24] <markstos> ?eval multi sub a (%h, *%h) { say "hash" } multi sub a (@b?) { say "array" } a(<1 2 3>)

[02:24] *** evalbot_12889 is now known as evalbot_12890

[02:24] <evalbot_12890> OUTPUT[hash ] Bool::True

[02:25] <markstos> Making the array required causes the call to be dispatched the array signature.

[02:26] <svnbot6> r12891 | markstos++ | rename arglist.to to capture.t, as audrey suggests

[02:26] <svnbot6> r12890 | audreyt++ | * Complete PUGS_EMBED defaulting to perl5 in inc/ too, which fixes the problem Limbic_Region++ reported for Win32

[02:29] *** dolmans joined
[02:37] *** hcchien_ joined
[02:51] *** hikozaemon joined
[02:57] *** hcchien_ is now known as hcchien

[03:03] *** peacock joined
[03:12] *** dmsantam joined
[03:13] *** neoesque joined
[03:17] *** xdg joined
[03:42] <svnbot6> r12892 | agentz++ | [t/statements/do.t]

[03:42] <svnbot6> r12892 | agentz++ | - used eval_dies_ok to test expected parsefail or

[03:42] <svnbot6> r12892 | agentz++ |   runtime errors.

[03:42] <svnbot6> r12892 | agentz++ | - used eval_is to work around pugs' parsefail.

[03:42] <svnbot6> r12892 | agentz++ | Status:

[03:42] <svnbot6> r12892 | agentz++ | - pugs does not allow loop control structures (e.g.

[03:42] <svnbot6> r12892 | agentz++ |   last, next, redo) within do-once loops (i.e.

[03:42] <svnbot6> r12892 | agentz++ |   do {...}), which is incorrect.

[03:42] <svnbot6> r12892 | agentz++ | - pugs does not revert line-ending `}' to a

[03:42] <svnbot6> r12892 | agentz++ |   semicolon for at least do {...}, which is incorrect

[03:42] <svnbot6> r12892 | agentz++ |   as well.

[03:42] <svnbot6> r12893 | agentz++ | [t/syntax/POD.t]

[03:42] <svnbot6> r12893 | agentz++ | - cleaned up the code using eval_is.

[03:42] <svnbot6> r12893 | agentz++ | - fixed a bug in the tests.

[03:42] <svnbot6> r12893 | agentz++ | Status:

[03:42] <svnbot6> r12893 | agentz++ | - pugs doesn't support =begin DATA/=end DATA

[03:42] <svnbot6> r12893 | agentz++ | - pugs doesn't support %=POD{'DATA'}, $=DATA, or @=DATA.

[03:44] *** agentzh joined
[03:48] <svnbot6> r12894 | agentz++ | - moved t/builtins/hex.t to

[03:48] <svnbot6> r12894 | agentz++ |   t/syntax/numbers/hexadecimal.t

[03:48] <svnbot6> r12894 | agentz++ | - moved t/syntax/parsing/numbers.t to

[03:48] <svnbot6> r12894 | agentz++ |   t/syntax/numbers/misc.t

[03:48] <svnbot6> r12894 | agentz++ | - added t/syntax/numbers/octal.t

[03:48] <svnbot6> r12895 | agentz++ | [t/syntax/char_by_number.t]

[03:48] <svnbot6> r12895 | agentz++ | - added more smartlinks

[03:48] <svnbot6> r12895 | agentz++ | - added tests for "\0fff", "\08", "\07", etc.

[03:48] <svnbot6> r12895 | agentz++ | Status:

[03:48] <svnbot6> r12895 | agentz++ | - pugs tries to recognize and report error on \123 in

[03:48] <svnbot6> r12895 | agentz++ |   *single* quoted strings, which should only happen

[03:48] <svnbot6> r12895 | agentz++ |   to double-quoted strings. '\123' should be "\\123"

[03:48] <svnbot6> r12895 | agentz++ |   at any time.

[03:51] <svnbot6> r12896 | agentz++ | [t/syntax/char_by_name.t]

[03:51] <svnbot6> r12896 | agentz++ | - added this test file to test Unicode chars indexed by

[03:51] <svnbot6> r12896 | agentz++ |   names, such as \c[LEFT CORNER BRACKET].

[03:51] <svnbot6> r12896 | agentz++ | Status:

[03:51] <svnbot6> r12896 | agentz++ | - pugs doesn't support this syntax at all. all tests

[03:51] <svnbot6> r12896 | agentz++ |   fail.

[03:51] <svnbot6> r12896 | agentz++ | - more tests for chars in other charsets are needed.

[03:51] <svnbot6> r12897 | agentz++ | [t/builtins/strings/sprintf.t]

[03:52] <svnbot6> r12897 | agentz++ | - added this new test file

[03:52] <svnbot6> r12897 | agentz++ | - moved the tests from t/builtins/sprintf_and_as.t to

[03:52] <svnbot6> r12897 | agentz++ |   this file

[03:52] <svnbot6> r12897 | agentz++ | - added one smartlink.

[03:52] <svnbot6> r12897 | agentz++ | Status:

[03:52] <svnbot6> r12897 | agentz++ | - all tests pass.

[03:52] <agentzh> *yawn*

[03:55] <svnbot6> r12898 | agentz++ | [t/builtins/strings/uc.t]

[03:55] <svnbot6> r12898 | agentz++ | - updated the old-form smartlink.

[03:55] <svnbot6> r12899 | agentz++ | [src/perl6/Prelude.pm]

[03:55] <svnbot6> r12899 | agentz++ | - renamed all the "multi as" to "multi fmt" to reflect

[03:55] <svnbot6> r12899 | agentz++ |   recent changes of S02.

[03:56] * [particle] renames the channel to #agentz++ :)

[03:56] <svnbot6> r12900 | agentz++ | [t/builtins/fmt.t]

[03:56] <svnbot6> r12900 | agentz++ | - moved related tests from t/builtins/sprintf_and_as.t

[03:56] <svnbot6> r12900 | agentz++ |   into this test file

[03:56] <svnbot6> r12900 | agentz++ | - all the old tests are successful after fixing

[03:56] <svnbot6> r12900 | agentz++ |   src/Perl6/Prelude.pm.

[03:56] <svnbot6> r12900 | agentz++ | - added many more tests.

[03:56] <svnbot6> r12900 | agentz++ | Status:

[03:56] <svnbot6> r12900 | agentz++ | - one test for lists of a single pair is failing:

[03:56] <svnbot6> r12900 | agentz++ |     ('dog' => 'A').fmt("%s => %s", "\n",);

[03:56] <svnbot6> r12900 | agentz++ |   I got the following error:

[03:56] <svnbot6> r12900 | agentz++ |     Insufficient arguments to sprintf

[03:56] <svnbot6> r12901 | agentz++ | [t/builtins/sprintf_and_as.t]

[03:56] <svnbot6> r12901 | agentz++ | - removed this file, since all the existing tests in it

[03:56] <svnbot6> r12901 | agentz++ |   have been moved to t/builtins/strings/sprintf.t or

[03:56] <svnbot6> r12901 | agentz++ |   t/builtins/fmt.t

[03:57] <agentzh> oops...sorry for that...

[03:57] <agentzh> that's all i have in my local working copy. ;-)

[03:57] <[particle]> absolutely nothing wrong with test suite improvements :)

[03:58] <agentzh> i did these changes last night, but failed to find a chance to commit them due to serious web connection problems...

[03:58] <agentzh> particle: thank you!

[03:58] <[particle]> sorry i've had no tuits lately

[03:58] <agentzh> now the chool intranet is up again...so eager to upload them. :)

[03:59] <agentzh> *school

[03:59] <agentzh> and the intranet is much faster after the breakage. so it's really worth it! :=)

[03:59] *** ruz_ joined
[04:00] <agentzh> particle: fine. :)

[04:00] *** justatheory joined
[04:01] *** justatheory joined
[04:02] <agentzh> audreyt: please fix the bugs mentioned in the svn log above when you have some cycles. :)

[04:03] <agentzh> audreyt: i can happily work around parsefails in .t, but not any hanging problems. fortunately, there's no serious segfaulting in my recent work. :)

[04:04] * agentzh thinks it's lunch time already at audreyt's place. :)

[04:05] *** cooljoke joined
[04:07] <agentzh> a large portion of the test suite still hasn't been updated yet.

[04:07] <agentzh> the tests under t/closure_traits/, for example...

[04:07] <agentzh> but we are working on it. ;-)

[04:09] <agentzh> we really really need help here. volunteers welcome!

[04:10] * agentzh heads out to lunch &

[04:10] *** agentzh left
[04:12] *** xinming joined
[04:39] *** xinming_ joined
[04:50] *** reZo joined
[05:09] *** perlbot joined
[05:12] *** mjk joined
[05:14] *** mako132_ joined
[05:26] *** perlbot joined
[05:32] *** drbean joined
[06:56] *** penk joined
[06:57] *** penk joined
[07:18] *** xinming joined
[07:20] *** meppl joined
[07:29] *** dolmans joined
[07:33] *** ofer0 joined
[07:36] *** ToTimkopf joined
[07:48] *** drrho joined
[08:18] *** elmex joined
[08:21] <svnbot6> r12902 | trey++ | [t/statement/for.t]

[08:21] <svnbot6> r12902 | trey++ | Added tests for the absence of foreach;

[08:21] <svnbot6> r12902 | trey++ | added descriptions to tests lacking one;

[08:21] <svnbot6> r12902 | trey++ | added a smartlink.  Will smartlink the remaining tests

[08:21] <svnbot6> r12902 | trey++ | shortly.

[08:28] *** ruoso joined
[08:42] *** iblechbot joined
[08:48] *** miyagawa_ joined
[08:56] *** onsen joined
[09:01] *** borisz joined
[09:39] *** miyagawa_ joined
[09:41] *** penk joined
[09:49] *** kanru joined
[09:50] *** PolettiX joined
[10:01] *** onsen joined
[10:03] *** xerox joined
[10:07] *** polettix joined
[10:09] *** miyagawa_ joined
[10:23] *** cdpruden joined
[10:24] *** miyagawa_ joined
[10:25] <dolmans> ?eval 0_1

[10:25] *** evalbot_12890 is now known as evalbot_12902

[10:25] <evalbot_12902> Error:  unexpected "_" expecting "x", "d", octal digit, "o", "b", fraction, exponent, term postfix, comment, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[10:26] <dolmans> Is it designed to be like this?

[10:26] <audreyt> I believe so

[10:26] <dolmans> hrm, why

[10:27] <audreyt> thinking

[10:27] <audreyt> actually, that depends on how you interpret the _ there

[10:27] <audreyt> it's being interped as a radix marker

[10:27] <audreyt> but I guess it can mean 0d also. maybe

[10:28] <audreyt> more consistent that way I guess.

[10:28] <audreyt> add or write a test?

[10:28] <dolmans> ok, i will.

[10:28] <audreyt> cool. fixed as of r12903

[10:28] <dolmans> but you mean it will be valid in the future or not?

[10:29] <svnbot6> r12903 | audreyt++ | * 0_1 is now parsed as 0d1, not an error, as reported by dolmans++.

[10:29] <audreyt> :)

[10:29] <dolmans> oh, you just said it.

[10:31] <dolmans> Bug fixing is even faster than my brain works. I think you must do a great job.

[10:31] <TimToady> it's often easier to fix the bug than to remember to fix it later.  :)

[10:31] <audreyt> amen to that

[10:31] <audreyt> hi, TimToady :)

[10:31] <audreyt> how's Y::EU?

[10:32] <TimToady> howdy.  Jet lag hits.  --more--

[10:32] <TimToady> you lose 20 hit points.

[10:32] <audreyt> oy

[10:32] <TimToady> I'd be better off if I hadn't stayed up the night before last doing JIT speech.

[10:33] <audreyt> that seems to be a recurring theme...

[10:33] <TimToady> but I knew that's when I'd be awake

[10:33] *** miyagawa_ joined
[10:33] <gaal> hey audreyt

[10:33] <gaal> :() should not be an operator at all!

[10:33] <xerox> :O

[10:33] <gaal> since the parser can construct an Exp for it completely

[10:34] <TimToady> no, it's just a sublanguage like rx//

[10:35] * gaal svk reverts some stuff

[10:35] <audreyt> or it's a circumfix macro

[10:35] <audreyt> with custom 'is parsed'

[10:35] <audreyt> which means, in our current parsec architecture, probably notAnOperator.

[10:35] <TimToady> which is how you do a sublanguage...

[10:35] <audreyt> right

[10:37] <gaal> okay. <\\( )>'s receiving too-special treatment now, because the parser it is hardcoded to use is argy

[10:37] <gaal> that is, (Maybe Exp, [Exp])

[10:37] <gaal> rather than [Exp], as circum ops are in general

[10:37] <gaal> but since we have no other circum ops...

[10:38] <gaal> brb

[10:38] <svnbot6> r12904 | dolmans++ | test-case: 0_1 is parsed as 0d1

[10:53] *** onsen_ joined
[10:56] <gaal> audreyt: have you done any profiling on the order of rules in parseTerm? seeing as this is entered a lot I suppose tweaking things there can help

[10:57] <gaal> are there parsers there that must be tried before others? if so it's worth documenting that too...

[10:57] <audreyt> no I had not

[10:57] <audreyt> I don't think there is, but I can't recall clearly

[10:57] <audreyt> the (Ann Parens) branch can certainly be moved forward, yes.

[10:57] <audreyt> a profile report should give you the call numbers

[10:57] <audreyt> of each variant

[10:58] <gaal> no profiling here :(

[10:58] <audreyt> ok... but profling report doesn't show significant amount of time there

[10:58] <audreyt> it's mostly in the op.prec parser now

[10:58] <audreyt> and we need cross-level longest-token-match instead of the broken aheadSym

[10:59] <audreyt> which will also speed things up I think

[10:59] <audreyt> but my brain is fried... been battling with DB2 design limits (undocumented and no sources available) all day

[10:59] <gaal> oi :(

[10:59] <audreyt> so probably going to be useless tonight

[11:00] <audreyt> I'm almost ready to consider AIX worse than Win32...

[11:00] <gaal> ok but before I'm off chasing red caribous... parseTerm is indeed the right place to register a :() parser right?

[11:00] <audreyt> yup

[11:00] <gaal> which version of AIX?

[11:00] <audreyt> 4.3 and 5.2

[11:00] <gaal> 5.2 is way ahead of my time :) but 4.3 was decent

[11:01] <gaal> 4.1.x were annoying

[11:01] <audreyt> *nod*

[11:02] <audreyt> though the Haskell part of $job is done (and very successfully), so I have 24 hours more to complete the jifty part...

[11:02] <audreyt> ...which means I should 1)shower 2)sleep 3)hack some more

[11:02] <audreyt> so, good luck, and see you on Friday :)

[11:02] <xerox> Have fun!

[11:02] <gaal> night :)

[11:03] <audreyt> oh and I got ghc commit bit :)

[11:03] <xerox> %-)

[11:03] <gaal> like a year after your first commit? what is this, openbsd?

[11:03] <gaal> :-p

[11:04] *** TimToady joined
[11:07] <gaal> :($moose) and :($moose :) are *not* equivalent right? the first is a positional?

[11:08] <gaal> the second is, I was sad, then I metamoose, then I became happy

[11:08] <audreyt> right.

[11:09] <audreyt> it is still debated whether \($x) and \($x:) are equivalent, and whether \$x and \($x:) are equivalent. I'm thinking about (no, yes)

[11:09] <audreyt> but that may be surprising to some.

[11:10] <gaal> I see the motivation in II, about I I don't have an opinion

[11:10] <audreyt> will be greatly assymeterical if \($x) means \($x:) but :($x) not.

[11:11] <audreyt> and :$x is special anyway, so why not \$x :)

[11:12] <gaal> interesting argument :)

[11:12] <audreyt> with interesting perimeters

[11:12] <gaal> what's a golfy way to say:

[11:12] <audreyt> I mean parameters

[11:13] <gaal> do x <- someParser ; someBoringParser ; return x

[11:13] <gaal> is there a followedBy combinator?

[11:14] <audreyt> no, please add one to util

[11:14] <gaal> k

[11:14] <gaal> http://haskell.org/ghc/docs/latest/html/libraries/parsec/Text-ParserCombinators-Parsec-Combinator.html is subpar doc :(

[11:15] <audreyt> the doc is entirely in the paper

[11:15] <audreyt> as usual

[11:16] <gaal> heh, there's a tryFollowedBy

[11:16] <gaal> which unless i'm mistaken turns into 'try followedBy'

[11:18] <audreyt> @pl \x y -> try (x `followedBy y)

[11:18] <lambdabot> (line 1, column 16):

[11:18] <lambdabot> unexpected "`"

[11:18] <lambdabot> expecting variable, "(", operator or ")"

[11:18] <audreyt> @pl \x y -> try (x `followedBy` y)

[11:18] <lambdabot> (try .) . followedBy

[11:18] <gaal> .) . is a pattern I need to get used to

[11:18] <gaal> eg. pointfreeing all:

[11:19] <gaal> foldl (&&) True l

[11:19] <gaal> but if the list is the result of a map:

[11:19] <gaal> foldl (&&) True $ map f l

[11:20] <gaal> to get rid of the explicit args you need a .) .

[11:20] <gaal> @pl \f l -> foldl (&&) True $ map f l

[11:20] <lambdabot> (foldl (&&) True .) . map

[11:22] <gaal> is :($mind_the_comma ,) a syntax error?

[11:23] <gaal> (assuming it's not)

[11:23] <audreyt> noop perhaps

[11:23] <audreyt> but yeah

[11:23] <gaal> k

[11:34] <xerox> pl pl pl pl !

[11:35] <xerox> gaal: ski suggested a better one, too, let me show you

[11:37] <xerox> ?type let (.:) in (.) . (.)

[11:37] <lambdabot> parse error on input `in'

[11:37] <xerox> ?type let (.:) = (.) . (.) in (.:)

[11:37] <lambdabot> forall b c a a1. (b -> c) -> (a -> a1 -> b) -> a -> a1 -> c

[11:37] <xerox> Ops.

[11:38] <xerox> > let (.:) = (.) . (.) in ((+1) .: (/)) 10 5

[11:39] <lambdabot>  3.0

[11:39] <xerox> > (((+1) .) . (/)) 10 5

[11:39] <lambdabot>  3.0

[11:40] *** borisz left
[11:40] <gaal> behold the pointless combinator!

[11:40] <xerox> !_!

[11:40] <gaal> lol actually it should be called ".)"

[11:40] <xerox> .: is like .. but it was taken

[11:41] <gaal> there's always ..., ...., .....,

[11:41] <xerox> If you count the number of '.' on the bottom line, it is equal to the arity of the function composed with an unary function.

[11:41] <gaal> whoa

[11:42] <xerox> You're right, it works!

[11:42] <xerox> ?type let (...) = (.) . (.) . (.) in (and ... zipWith) (||) [True,False] [False,True]

[11:42] <lambdabot> Bool

[11:42] <xerox> > let (...) = (.) . (.) . (.) in (and ... zipWith) (||) [True,False] [False,True]

[11:42] <lambdabot>  True

[11:44] * gaal titters

[11:44] <xerox> Yuck?

[11:45] <gaal> no just... alarming :)

[11:45] * gaal goes back to a language that isn't scary at all

[11:48] <gaal> hm even if basic Sig support makes it into the coming release (and I want it to!) I doubt I'll get unpacking in

[11:48] <gaal> (xerox: that's patmatching in Perl!)

[11:49] <xerox> Ohh.

[11:52] <gaal> hey what happened to the required flag on a Param? and didn't we have something to protect against $x! = 17?

[11:54] <audreyt> it's denoated in s_requiredPositionalCount and I think the =17 is still syntactically legal

[11:54] <audreyt> it's just never trigered

[11:54] <gaal> audreyt: that makes parsing harder, if a param doesn't know about itself whether its required.

[11:55] <gaal> cause you can't have a params <- ruleParam

[11:55] <audreyt> and you have to instead deal in zones, yes.

[11:55] <audreyt> but you can ignore that at themoment and validate later...

[11:55] <audreyt> (bbiab)

[11:56] <gaal> I don't understand :(

[11:56] <audreyt> you want to invalidate ($x!=17)?

[11:56] <gaal> first of all I want to parse a siglist

[11:56] <audreyt> yes, so you use an accumulator of sorts

[11:56] <gaal> is there no params <- ruleParam `sepEndBy` comma ?

[11:57] <audreyt> there could be, if the type pf params is not [Param]

[11:57] <audreyt> but [(Param, IsRequired)] etc

[11:57] <audreyt> and then reassemble later

[11:57] <gaal> what's the motivation for a param not knowing?

[11:58] <audreyt> so that you can't have nonsensical Sig

[11:58] <audreyt> ($x!, $y?, $z!)

[11:59] <gaal> okay.

[12:19] <gaal> is Sig.namedSet populated from Param.label ?

[12:21] *** Limbic_Region joined
[12:27] <gaal> what in a sig param makes it patently named and not positional?

[12:32] <gaal> bbiab &

[12:34] <audreyt> :$foo

[12:34] <audreyt> $foo is named

[12:38] <Limbic_Region> audreyt - did you see my backlog note about enabling p5 embedding by default?

[12:39] <Limbic_Region> I believe it is b0rk on Win32.  At least it was last night my time.  If I built without specifically setting the PUGS_EMBED env variable - it failed outright.  Setting it to "perl5" allowed it to work

[12:44] <audreyt> I fixed it

[12:45] <audreyt> try again?

[12:45] <audreyt> it's fixed in r12890

[12:45] <audreyt> I believe

[12:46] <audreyt> but I need to fade now; I'll checkback if it's still reported here as broken tomorrow

[12:46] <Limbic_Region> well, it isn't a problem for me since setting the env variable is trivial - just wanted to let you know

[12:47] <Limbic_Region> next checkin I will test it

[12:47] <audreyt> ok

[12:47] <audreyt> g'nite

[12:47] <Limbic_Region> sleep well

[12:47] <svnbot6> r12905 | audreyt++ | * Unbreak GHC 6.5-trunk build by preferring our forM_ and forM

[12:47] <svnbot6> r12905 | audreyt++ |   over the now-builtin ones (for now)

[12:59] *** [mago] joined
[13:04] <Limbic_Region> audreyt - If you backlog - it appears to be fixed but I didn't try a realclean build which is where I first noticed the issue.  My work machine takes far too long to rebuild without really good reason

[13:46] *** xinming_ joined
[13:52] *** vel joined
[14:05] *** prefiks joined
[14:06] *** miyagawa_ joined
[14:08] *** chris2 joined
[14:15] *** cjeris joined
[14:24] *** fglock joined
[14:33] <svnbot6> r12906 | fglock++ | v6 - fixed parsing <<...>> quotes

[14:36] *** miyagawa_ joined
[14:43] *** xinming joined
[14:57] *** miyagawa_ joined
[15:03] *** ruz joined
[15:14] *** ruoso joined
[15:15] *** baest joined
[15:21] *** miyagawa_ joined
[15:22] *** kanru joined
[15:23] *** baest joined
[15:39] *** miyagawa_ joined
[15:43] *** [mago] joined
[15:44] *** lollan joined
[15:48] *** miyagawa_ joined
[15:59] *** justatheory joined
[16:12] *** marmic joined
[16:15] *** Psyche^ joined
[16:23] *** Psyche^ is now known as Patterner

[16:23] *** frederico joined
[16:24] *** miyagawa_ joined
[16:31] *** Eimi joined
[16:31] *** azr|elious joined
[16:47] *** DaGo joined
[17:09] *** plisk joined
[17:09] *** elmex joined
[17:14] *** crem_ joined
[17:39] *** ludan joined
[17:45] *** miyagawa_ joined
[17:48] *** soisoisoi joined
[17:53] *** bradleym joined
[18:01] <svnbot6> r12907 | fglock++ | Pugs-Compiler-Rule - TODO update

[18:04] <svnbot6> r12908 | fglock++ | Pugs-Compiler-Rule - fixed bool result of quantified token match

[18:07] <svnbot6> r12909 | fglock++ | Pugs-Compiler-Rule - added t/11-quantifier.t to MANIFEST

[18:10] <svnbot6> r12910 | fglock++ | Pugs-Compiler-Rule - fixed bool result of '?'-quantified token match

[18:29] <svnbot6> r12911 | fglock++ | Pugs-Compiler-Rule - workaround a Text::Balanced problem parsing "<'>>'>"

[18:32] <svnbot6> r12912 | fglock++ | Pugs-Compiler-Rule - ChangeLog update

[18:33] *** kanru joined
[18:39] *** kanru joined
[18:42] *** kanru joined
[18:45] *** lollan joined
[18:45] *** justatheory joined
[18:59] *** rodi joined
[19:01] *** plisk joined
[19:09] *** frederico joined
[19:11] *** awwaiid joined
[19:21] *** lichtkind joined
[19:21] <lichtkind> PerlJam did i offend you or just misunderstood ?

[19:27] *** chris2_ joined
[19:27] *** weinig joined
[19:32] *** SubStack joined
[19:36] <PerlJam> eh?

[19:36] <PerlJam> lichtkind: what are you talking about?

[19:42] <Limbic_Region> PerlJam - there is another user who goes by PearlJam - perhaps a case of mistaken identity?

[19:56] *** larsen joined
[20:14] <svnbot6> r12913 | fglock++ | Pugs-Compiler-Rule - added a TODO test - t/09-ratchet.t

[20:15] *** arguile joined
[20:23] <lichtkind> PerlJam i ask you yesterday something and you gone off

[20:24] <PerlJam> you did?

[20:24] <lichtkind> you did

[20:24] <PerlJam> I'm not constantly on IRC, I do occassionaly do some work.

[20:25] * PerlJam scrolls back to see what he did yesterday

[20:25] <lichtkind> k

[20:25] <lichtkind> no maybe 2 or 3 days ago

[20:25] <lichtkind> PerlJam with the tutorial will take a while but my perl6 talk which is a like trest case for it is nearly ready

[20:25] <lichtkind> unfortunatly my wxperltalk has 80 slides and no end in sight

[20:26] <lichtkind> the third is already ready :)

[20:27] <Limbic_Region> lichtkind - I can't find anything in the IRC logs to indicate PerlJam leaving (or getting upset as "gone off" might mean multiple things) after you spoke with him

[20:28] <lichtkind> Limbic_Rigion no but id wondered me because it was maybe a stupid question :)

[20:29] *** mauke_ joined
[20:29] <Limbic_Region> *shrug* - time to go home

[20:30] <lichtkind> PerlJam have you any interesting informations about latest developements (this year, month) ?

[20:31] *** sahadev joined
[20:31] *** sahadev left
[20:31] *** sahadev joined
[20:31] <PerlJam> lichtkind: The interesting stuff is announced on the mailing lists as it happens.

[20:36] <lichtkind> PerlJam hm are you a bit into wxperl developement?

[20:36] *** sahadev left
[20:37] <PerlJam> nope

[20:37] *** sahadev joined
[20:39] <lichtkind> because it maybe could be usefull to translate this long wxperl talk i writing on also into english, i know nearly every bit on available wxperl doku examples and artikles but nothing like that

[20:40] *** ruz_ joined
[20:41] <lichtkind> also when i startet the perl6 tut i wrote an wxperl tut in parallel that the both major perl interest i currently have

[20:42] <sahadev> hello, what is the verb used to send code to evalbot?

[20:43] <lichtkind> )?

[20:44] <lichtkind> i mean "?"

[20:44] <lichtkind> i mean "?eval"

[20:44] *** mauke_ is now known as mauke

[20:44] <lichtkind> brrr

[20:46] <lichtkind> ?eval {2==2}

[20:46] *** evalbot_12902 is now known as evalbot_12913

[20:46] <evalbot_12913> Bool::True

[20:46] <lichtkind> sahadev seen?

[20:47] <sahadev> lichtkind: thanks

[20:47] <sahadev> ?eval my @l = ({d => 'a'}, {d => ''}, {d => 'cd'}); @l.map($_.d).join("\n")

[20:47] <evalbot_12913> Error: No compatible subroutine found: "&d"

[20:47] <sahadev> ?eval my @l = ({d => 'a'}, {d => ''}, {d => 'cd'}); @l.map($_<d>).join("\n")

[20:47] <evalbot_12913> Error: Cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode)

[20:52] *** DaGo joined
[21:19] *** soisoisoi joined
[21:26] *** Limbic_Region joined
[21:44] <TreyHarris> ?eval my @l = ({d => 'a'}, {d => ''}, {d => 'cd'});

[21:44] <evalbot_12913> [{("d" => "a"),}, {("d" => ""),}, {("d" => "cd"),}]

[21:44] <TreyHarris> huh.... that never finishes executing for me

[21:46] <wolverian> segfault on feather's pugs too

[21:47] <TreyHarris> but evalbot's on feather

[21:47] <wolverian> and it's the same revision too..

[21:47] <wolverian> strange

[21:50] <TreyHarris> it works in an eval

[21:50] <TreyHarris> but doesn't actually produce a value

[21:50] <TreyHarris> except [undef,]

[22:04] <TreyHarris> ?eval my @l = ({d => 'a'}, {d => ''}, {d => 'cd'});  @l.elems

[22:04] <evalbot_12913> 3

[22:04] <TreyHarris> ?eval my @l = ({d => 'a'}, {d => ''}, {d => 'cd'});  @l.perl

[22:04] <evalbot_12913> "[\{(\"d\" => \"a\"),}, \{(\"d\" => \"\"),}, \{(\"d\" => \"cd\"),}]"

[22:04] <TreyHarris> now, why on earth does that compile on evalbot?

[22:04] <TreyHarris> and work?

[22:04] <TreyHarris> what's tdifferent

[22:14] *** Southen_ joined
[22:21] *** araujo joined
[22:22] <araujo> hello!

[22:23] *** prefiks left
[22:29] *** plisk joined
[22:35] *** penk joined
[22:35] <svnbot6> r12914 | fglock++ | Pugs-Compiler-Rule - fixed char class capturing

[22:35] <svnbot6> r12914 | fglock++ | v6 - the build is broken due to changes in Pugs-Compiler-Rule

[22:42] <fglock>  * please don't install the current Pugs-Compiler-Rule from svn - I'm checking why it is not compatible with v6.pm

[22:42] *** fglock left
[22:44] *** cjeris left
[22:58] *** buetow joined
[23:05] <svnbot6> r12915 | markstos++ | Add mention of using "is new" to section on references in Differences.pod

[23:10] *** markstos joined
[23:13] *** Southen_ is now known as Southen

[23:15] *** SubStack joined
[23:26] <markstos> Some perl6 blogging about "is rw" and "is copy": http://use.perl.org/~markjugg/journal/30828

[23:26] <lambdabot> Title: Journal of markjugg (792)

[23:27] <audreyt> markstos++ # nice writeups

[23:28] <markstos> Thanks audreyt.

[23:28] <markstos> I was wondering if it makes sense to integrate my perl6 bloggin with planetsix or pugs.blogs.com for more visibility.

[23:28] <markstos> Both outlets seem a little more "official" what I'm doing.

[23:28] <audreyt> it's writeups like this that makes me feel my hackings worthwhile :)

[23:28] <markstos> Ah. :)

[23:29] <audreyt> sure, would you repost this in pugs.blogs.com (which automagically gets to planetsix)?

[23:29] <markstos> I also know that blogging is part of the marketing effort that attracts new users, so more visibility is good.

[23:29] <markstos> Sure. Do I need any special access for that ?

[23:30] <markstos> And should I post just the most recent one, or the last few Perl6 things ?

[23:30] <audreyt> the last few I think

[23:31] <audreyt> post under the "App" category

[23:31] <audreyt> freshly created for you :)

[23:31] <markstos> My next Perl6 project idea is an interactive "Test" script. A scenerio will be presented, and the /user/ is quized about what value to test against. :) It should be a fun way to test your Perl6 knowledge, and also write some tests at the same time.

[23:31] <audreyt> ooh nice. more educational than examples/games/hangman.pl

[23:31] <audreyt> now that p5embed is the default, I think it's timeto implement S01 closely

[23:31] <audreyt> and make

[23:32] <audreyt> pugs any_perl5_program.pl

[23:32] <audreyt> Just Work

[23:32] <audreyt> to a point where it's generally safe to subst #!/usr/bin/perl into #!/usr/bin/pugs

[23:32] <markstos> I plan to use perl5:HTML::Template as the default template system for p6 CGI::Application.

[23:32] <audreyt> that's great.

[23:32] <markstos> My proof-of-concept coding shows it will work seamlessly.

[23:32] <audreyt> that's how I expect most new p6 code be written.

[23:33] <markstos> I'll have to thank Juerd, too, because I was stuck on my FreeBSD box getting the whole pugs/parrot toolchain working.

[23:33] <markstos> Life on feather is easier. :)

[23:33] <audreyt> just like how p5 programs started as "require 'newgetopt.pl';"

[23:33] <markstos> It even turned me from an svn to an svk user, although I'm not using special svk features yet.

[23:33] <audreyt> funny the "new" there at this moment

[23:33] <markstos> :)

[23:34] <markstos> audreyt: so do I need a pugs.blogs.com account to post there?

[23:34] * markstos hears wife coming home...

[23:34] <markstos> bbiab

[23:34] <audreyt> it's in your inbox now

[23:34] <audreyt> login and post at http://www.typepad.com/t/app/weblog/post?blog_id=272701

[23:34] <markstos> Cool.

[23:35] <lambdabot> Title: TypePad

[23:37] <audreyt> bbiab

[23:50] *** mdiep joined
