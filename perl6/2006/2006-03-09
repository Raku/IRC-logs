[00:05] <FurnaceBoy> yay@putter

[00:14] <putter> ;)

[00:14] *** justatheory joined
[00:14] <putter> s/did indeed capture/did indeed access/.  capture remains to be determined.  but I could live with just access.

[00:19] <dduncan> this is off topic, but I'm looking for a module that'll directly open a MS Access database file ... or otherwise a simple solution for batch converting from a set of 300+ same-schema MS Access databases ... since its more or less single-use, it doesn't even have to be Perl necessarily

[00:22] <mugwump> dduncan: odbc?

[00:22] <dduncan> that's standard for reading a single one ...

[00:22] <dduncan> but automating the connection to a whole list ...

[00:22] <dduncan>  or maybe that could st ill work ...

[00:23] <dduncan> if odbc takes a file name as a dbi handle constructor

[00:23] <dduncan> ...

[00:24] <dduncan> I thought odbc was client/server, so a server has to be set up, associated with one access file, and then dbi connects to that by a service name

[00:24] <dduncan> if not, I have to look further ...

[00:30] <Limbic_Region> dduncan - in my experience, using ODBC with Access requires having set up the ODBC DSN 

[00:30] <Limbic_Region> but if you have done that up front - you can easily batch job it

[00:30] <dduncan> can you have a single DSN that can be used with 300 Access databases?

[00:31] <dduncan> I wanted to just iterate through a file list and open each one in turn

[00:31] <dduncan> kind of like what one can do with text files or SQLite databases

[00:31] <dduncan> I'm looking on line for the answer to this

[00:32] <dduncan> or if you know ...

[00:33] <spinclad> fglock: (bl'ing by 11:00)  for a name for pX/ie, I tossed out 'piXie' last night, but it didn't seem to fly.

[00:33] <Limbic_Region> dduncan - I couldn't get it to work

[00:33] <Limbic_Region> I am not saying it can't work

[00:33] <Limbic_Region> but the examples I found were sketchy at best - so I resorted to the DSN thing

[00:34] <putter> spinclad: currently "lrep" :)

[00:35] <putter> oh, for pX.  never mind.

[00:35] <putter> dduncan: might have better luck at a different time of day

[00:35] <dduncan> hello

[00:40] <Limbic_Region> dduncan - if you look at TFM for DBD::ODBC and search for 'Connect without DSN', it gives an example of connecting with just the filename

[00:40] <Limbic_Region> that's what I didn't get to work - but I didn't spend a lot of time on it

[00:41] <Limbic_Region> OTOH, you could always automate the creation of the DSNs (through other modules) and then everything would "just work"

[00:41] <dduncan> hmm ... I looked at TFM for DBD::ODBC, but must have missed that ... will look again

[00:41] <Limbic_Region> let me know if you get the "just using the file name" working

[00:41] <spinclad> putter: not for pX entire, but for i_e within it... hence, pixie

[00:42] <spinclad> yeah, i saw that fglock liked Juerd's suggestion.

[00:42] *** jisom joined
[00:43] <dduncan> ah, I see the section now ...

[00:43] *** hcarty joined
[00:45] <dduncan> I will let you know if I get it to work

[00:46] *** mako132_ joined
[00:47] *** hcarty left
[01:02] *** christo joined
[01:04] *** Nouk joined
[01:13] <dduncan> fyi, Limbic_Region, if you backlog ...

[01:14] <dduncan> I've decided to abandon the Access thing

[01:14] <dduncan> someone else will be manually-ish exporting them to comma-delim format, and I'll work with those ... no problem at all for them they say

[01:15] <dduncan> but maybe in the future I'll experiment with getting that working for different reasons

[01:16] *** justatheory joined
[01:16] <dduncan> that is all

[01:36] *** elmex joined
[01:50] *** mako132_ joined
[02:03] *** Bit-Man joined
[02:13] *** justatheory joined
[02:17] *** f0rth joined
[02:30] *** K joined
[02:35] *** DesreveR joined
[03:45] *** FurnaceBoy is now known as qu1j0t3

[03:54] *** FurnaceBoy_ joined
[04:11] *** FurnaceBoy_ is now known as FurnaceBoy

[04:26] *** sapper joined
[04:36] *** avar joined
[04:52] *** szabgab left
[05:16] *** Aankhen`` joined
[05:29] *** hoowa joined
[05:30] <hoowa> hi 

[05:30] <hoowa> where is audreyt?

[06:11] *** revdiablo joined
[06:11] *** FurnaceBoy left
[06:14] *** robkinyon joined
[06:14] *** kanru joined
[06:14] *** Odin- joined
[06:14] *** p5evalbot joined
[06:14] *** Steve_p joined
[06:14] *** gaal joined
[06:31] *** drrho joined
[06:42] *** nothingmuch joined
[06:43] *** justatheory joined
[06:44] *** Draconit joined
[06:53] <svnbot6> r9350 | putter++ | Regexp-ReplaceEngine.pm improvements.

[06:53] <svnbot6> r9350 | putter++ | The regcompp hook now permits the perl5 compilation of regexps to be controlled both lexically (using %^H, and thus by a  use mumble/no mumble  pragma), mostly for changing semantics (p6!:), and dynamically, mostly for transparently changing implementation.

[06:53] <svnbot6> r9350 | putter++ | It now also permits, hopefully reliably, a regexp implementation to eval() code in the lexical environment in which the regexp is being defined!  This should allow proper implementation of (??{...}), and eventually, of p6 variable interpolation.

[06:53] <svnbot6> r9350 | putter++ | There is exactly zero-chance either of these would have happened without the help of folks on #perl6.  Thank you.

[06:53] <svnbot6> r9350 | putter++ | Next steps: reduce segfault frequency when running the perl5 t/op/ tests(!); try to clean things up enough to move development fully onto pugs svn.

[07:04] *** Cryptic_K joined
[07:08] *** f joined
[07:17] *** GeJ joined
[07:42] *** iblechbot joined
[07:49] * drrho is away: cutting red tapes

[07:50] *** nothingmuch joined
[07:55] *** elmex joined
[07:55] *** sapper joined
[08:28] *** Kattana joined
[08:30] *** Cryptic_K joined
[08:38] *** kane__ joined
[08:50] *** Barry joined
[08:51] <Barry> Do they still give an award for best web application at the Perl conference?

[08:52] * nothingmuch never heard of that

[08:52] <Barry> I saw a reference to it from a few years ago.

[08:53] <Barry> Guess not.

[08:53] <nothingmuch> googling makes me think it stopped in 2000ish

[08:54] <jisom> what about non web application? you know, show that perl isn't only one liners and cgi

[08:55] <Barry> Yeah, I can make it a non-web app in about one minute. The problem is that I want to keep it closed source. That probably would disqualify me for the app award too.

[08:56] <Barry> (web app)

[08:56] <nothingmuch> Barry: why closed source?

[08:57] <nothingmuch> also, what does it do?

[08:58] <Barry> There's too much piracy/unallowed usage going around, and I'd like to profit from it. It's a file comparison tool. http://www.polisource.com/diffnote

[08:58] <Barry> I'll probably just put a banner on the page.

[09:01] <arcady> I love the "compare local files" feature... of this web application

[09:01] <Barry> Seems I should ad an option to compare local with remote files too.

[09:02] <Barry> s/ad/add/

[09:06] <arcady> looks like an idea that would go well with svn

[09:06] <arcady> then again, I'm sure someone's already thought of that

[09:06] <arcady> a web frontend to diff isn't exactly hard to write

[09:07] <Barry> I was thinking of making it a plugin to a web-based text editor: http://tinymce.moxiecode.com/

[09:08] <Barry> But keeping it closed source and requiring remote usage would be weird. And a banner ad would be even worse.

[09:10] <arcady> yes

[09:10] <nothingmuch> arcady: see also trac

[09:10] <Barry> A web front end to diff SHOULDN'T be hard to write, but I made a mistake parsing diff and it didn't work, so I worked my butt off parsing diff -y before realizing my mistake with plain diff.

[09:10] <arcady> seen.

[09:11] <nothingmuch> Barry: if tinymce is opensource, why not make this also opensource

[09:12] <Barry> I like money, and money makes me think of Microsoft, and Microsoft makes me think of closed source.

[09:12] <arcady> microsoft does not, however, make anyone think of perl

[09:12] <jisom> I don't like money....but then again I am unemployed so.....

[09:12] <arcady> haskell maybe, but not perl

[09:13] <nothingmuch> i like money, and money makes me think of Verby and Verby was good money for writing opensource

[09:13] <nothingmuch> otoh money also makes me think of far less pleasant tasks i do at work

[09:13] <nothingmuch> there are many ways to make money

[09:14] <nothingmuch> if this webapp was a bigger project you could offer professional support

[09:14] <nothingmuch> you could also make have a service oriented website

[09:14] <nothingmuch> then again, if it was bigger the incentive to close it is probably more obvious

[09:14] <nothingmuch> but frankly I doubt you will get rich from a web diff

[09:14] <arcady> the trick to money is convincing someone else to give it to you : )

[09:14] <nothingmuch> exactly

[09:14] <Barry> Yeah, I'll be combining it with a couple of other apps I wrote, and I intend to increase features for subscribers. Not sure when that will happen.

[09:15] <nothingmuch> keep in mind that there are free tools to do this, and that you have to give your clients a good reason to want to use your tools

[09:16] <nothingmuch> also keep in midn that the difference between charging $0 and charging $1 for a service is much bigger than the difference between charging $1 and $10

[09:16] <nothingmuch> people are hesitent to go and pay for things - they need a good reason

[09:16] <arcady> in fact, $1 is infinitely more than $0

[09:16] <Barry> I know, and some of the free ones are more powerful. Mine is just simpler. Nothing to install.

[09:17] <nothingmuch> you can also have a buy-a-feature model

[09:17] <Barry> I won't be charging until there's a drastic improvement. I'll just ad a banner if I get enough traffic.

[09:17] <nothingmuch> anyway

[09:18] <nothingmuch> real work now

[09:18] <nothingmuch> ciao

[09:18] *** penk joined
[09:18] <nothingmuch> good luck with your ventures, Barry 

[09:18] <Barry> ciao

[09:18] <arcady> on an entirely unrelated note, is it at all feasible to write webapps in perl 6?

[09:18] <nothingmuch> arcady: somebody made a memory game a while ago

[09:18] <nothingmuch> and a wiki, but that used roles and stuff so it was non-runnable

[09:18] <nothingmuch> generally: yes

[09:18] <nothingmuch> you can

[09:18] <nothingmuch> but it's too slow to be a good platfork

[09:18] <nothingmuch> platform

[09:18] <nothingmuch> (pugs)

[09:19] <arcady> right

[09:19] *** KingDiamond joined
[09:19] <nothingmuch> both sri and lathos started porting Catalyst and Maypole respectively, just FYI

[09:19] <arcady> intriguing

[09:19] <Barry> Is TimToady here 24/7?

[09:20] <arcady> if I have the time maybe I'll try porting markaby and camping from ruby

[09:20] <nothingmuch> Barry: many people use screen and irssi

[09:20] <arcady> (or at least make something comparable)

[09:20] <nothingmuch> so they're always on even if they are sleeping/far away

[09:20] <nothingmuch> arcady: what's camping?

[09:20] <arcady> a "microframework" by why the lucky stiff

[09:21] <nothingmuch> hehe

[09:21] <arcady> it's like... 130 lines of code or something

[09:21] <nothingmuch> why's naming convention is there just for amusement

[09:21] <nothingmuch> mst made something like markaby

[09:21] <nothingmuch> i'll ask him to release it

[09:22] <nothingmuch> as for this camping thing: sounds like a fun port

[09:22] <nothingmuch> let ruby and Perl 6 duke it out over brevity ;-)

[09:22] <arcady> though I'm not sure that some of the fun ruby tricks will actually work in pugs

[09:22] <arcady> or perl 6 in general for that matter

[09:23] <nothingmuch> which tricks?

[09:23] <arcady> like inheriting from a class that's returned by a function

[09:23] <nothingmuch> works

[09:23] <arcady> wow

[09:23] <nothingmuch> (not in pugs ;-)

[09:23] <nothingmuch> bug stevan on that

[09:23] <arcady> heh

[09:23] <nothingmuch> but the metamodel supports

[09:23] <nothingmuch> it

[09:23] <arcady> how much of OO actually works?

[09:23] <nothingmuch> actually, maybe this stuff was fixed by now

[09:23] <nothingmuch> to tell you the truth I really don't know

[09:24] <jisom> well in parrot, classes are dynamic, created at runtime...so....

[09:24] <nothingmuch> it's been a long while since i've done OO in pugs

[09:24] <nothingmuch> jisom: *always*?

[09:24] <jisom> aside from the root class, essentially.......to use something as an object, yes

[09:24] <nothingmuch> how does it compile static vtables?

[09:25] <jisom> except the core pmc's which are sort of seperate, a little

[09:25] <arcady> from what I understand, there's two things that can be called a "class" in parrot

[09:25] <jisom> what do you mean nothingmuch?

[09:25] <arcady> PMC class, which is a low level class

[09:25] <arcady> and high level class

[09:25] <jisom> classes can be written in pir

[09:25] <jisom> I've done it multiple times

[09:26] <nothingmuch> jisom: i mean... if you have an object

[09:26] <nothingmuch> and you're dispatching a method on it

[09:26] <nothingmuch> the canonical way to make that fast is using vtables

[09:26] <nothingmuch> except when you can completely prebind

[09:26] <jisom> well, methods are sort of compile time......but to be able to say 'new "foo"' is runtime

[09:27] <nothingmuch> if everything is dynamic at runtime then how can it precompute?

[09:27] <nothingmuch> oh

[09:27] <jisom> generally in a :load or ::immediate sub you do the newclass opcode

[09:27] <nothingmuch> i see

[09:27] <nothingmuch> (reminds me of forth ;-)

[09:27] <jisom> you have to declare a sub to be a method and/or multi at compile time....

[09:28] <jisom> well, I don't know the deep internals of pasm and oo code, but with pir it's adding the tag for the sub

[09:28] <nothingmuch> eeek

[09:29] <nothingmuch> camping is obfuscated

[09:29] <nothingmuch> jisom: okay, that make sense

[09:29] <jisom> but finding the method is runtime.....

[09:29] <jisom> including vtables

[09:30] <nothingmuch> ofcourse

[09:30] <nothingmuch> the idea with vtables:

[09:30] <jisom> otherwise inheriting isn't possible...

[09:30] <nothingmuch> not inheriting

[09:30] <nothingmuch> just polymorphism

[09:30] <nothingmuch> with respect to inheritence =)

[09:30] <jisom> eh, something

[09:30] <jisom> :)

[09:30] * nothingmuch is a C++ code monkey

[09:30] <nothingmuch> C++ sucks

[09:30] <jisom> looked into D?

[09:31] <jisom> I get tempted to make a D derivative specific to parrot....

[09:31] <nothingmuch> because it makes you make a distinction between virtual methods (which are vtable dispatched) and "normal" (read: screwed up) methods, which are always on the most generic type that the container is attributed with

[09:31] <nothingmuch> no

[09:31] <nothingmuch> i don't think i'll ever use D

[09:31] <arcady> C++ traumatized me at a young age...

[09:31] <nothingmuch> i don't intend iin staying in this static OO language scene

[09:31] <nothingmuch> and $work won't switch to D just like that

[09:32] <jisom> it's a c oriented language, that realizes backwards compatability isn't always a good thing

[09:32] <nothingmuch> yeah, i kinda know it

[09:32] <nothingmuch> *about* it, sorry

[09:32] <nothingmuch> read some on it's website

[09:32] <nothingmuch> saw some code examples

[09:32] <nothingmuch> was impressed

[09:32] <nothingmuch> sighed, in realization that $work would never switch, and moved on

[09:33] <nothingmuch> ;-)

[09:33] <jisom> too true.......plus i think it's only linux and win32.....only x86

[09:33] <nothingmuch> anyway, one important thing is that sometimes you can use staticly bound methods if you can assert that none of the subtypes of your declared type for a given method dispatch overrides the method by this name

[09:33] <jisom> sometimes backwards compatibility should not be kept, if backwards compatibility means doing things wrong

[09:34] <nothingmuch> backwards compatibility sucks when you're making big changes

[09:34] <nothingmuch> i prefer backwards availability

[09:34] <jisom> I say "if it'd done wrong in the past, ignore backwards compatibility"

[09:35] <nothingmuch> no, don't ignore

[09:35] <nothingmuch> people have needs

[09:35] <nothingmuch> they have tons of code they don't want to change

[09:35] <nothingmuch> so give them a hand

[09:35] <nothingmuch> make it easy for them to integrate the new with the old

[09:36] <jisom> but having the old compiled code being compatible with the new compiled code isn't the same as saying "be able to compile the old as well as the new"

[09:37] *** pdcawley joined
[09:37] <lypanov> jisom: how is D btw?

[09:38] <jisom> I use osx on ppc

[09:38] <jisom> :)

[09:39] <jisom> I can tell by looking as lisp I don't want to program in it......I can tell by D that I can agree with large parts, far more than C

[09:39] <arcady> don't like parentheses, eh?

[09:42] <nothingmuch> there should be a pythonic-lisp

[09:42] <nothingmuch> that is, white space instead of parens

[09:42] <nothingmuch> lumi wondered how that would work out for people

[09:46] <arcady> or maybe just a lispic python

[09:46] *** jisom_ joined
[09:46] * jisom_ increases his want of a new isp

[09:47] <nothingmuch> arcady: hah, guido will shoot you for that

[09:47] <arcady> that's okay, I already want to shoot guido

[09:47] <arcady> we can just have a duel

[09:47] <jisom_> guido's the python guy, right?

[09:48] <nothingmuch> jisom: yes

[09:49] * jisom_ waits for python and forth or lisp to somehow merge

[09:49] <nothingmuch> forth?

[09:49] <nothingmuch> that's completely orthogonal ;-)

[09:49] <nothingmuch> forth is just a big macro language that happens to work well ;-)

[09:49] <jisom_> the whole "explicit precedence" thing

[09:49] <nothingmuch> ah

[09:49] <nothingmuch> syntax wise

[09:50] <arcady> forth is a pretty neat idea

[09:50] <jisom_> syntax is very important....

[09:50] * nothingmuch doesn't really care about syntax

[09:50] <nothingmuch> i learn to use it eventually

[09:50] <jisom_> being able to easily program in a language is important

[09:50] <nothingmuch> and it's always going to suck for something

[09:51] <arcady> syntax postfix fine just works

[09:51] <jisom_> aside from lack of platform independence, it's why assembly's so rare now

[09:51] <nothingmuch> arcady: if you're german ;-)

[09:51] <jisom_> I don't think many ever use prefix notation.....aka Polish Notation

[09:51] <nothingmuch> jisom: assembly has very simple syntax ;-)

[09:51] <jisom_> pir too :)

[09:52] <nothingmuch> right

[09:52] <nothingmuch> == same thing

[09:52] <nothingmuch> ease comes from abstraction

[09:52] <nothingmuch> *good* abstraction

[09:52] <jisom_> and with the support I recently added, pir's now "high level assembly"

[09:52] <nothingmuch> perl 5 kinda sucks for that, since you have to pay for abstraction with lots of syntax

[09:53] *** beppu joined
[09:53] <jisom_> if I remember right, p5's oo syntax was sort of a hack on approach

[09:55] <nothingmuch> yes, very minimal

[09:55] <nothingmuch> kinda, too minimal

[09:55] <jisom_> I prefer perl5's -> method invocant...instead of how java uses a period for too much

[09:56] <arcady> well, perl 6 doesn't use . for package separator

[09:56] <nothingmuch> me actually prefers .

[09:56] <nothingmuch> it keeps properties and their objects together

[09:56] <jisom_> I like -> as it's clearly obvious...may be an extra character, but it's unambious

[09:56] <nothingmuch> so it's easier to read them as one chunk

[09:56] <nothingmuch> . is ambiguous?

[09:56] <arcady> and then there's objective C... which has I think [object method]

[09:56] <nothingmuch> yes

[09:57] <nothingmuch> it had something even weirder

[09:57] <nothingmuch> called selectors

[09:57] <nothingmuch> which are onordered signatures

[09:57] <beppu> I think selectors are dope.

[09:57] <jisom_> I look at obj-c and I don't want to ever again....and sometimes I do

[09:57] <nothingmuch> [object param:value otherparam:otherValue ]

[09:57] <jisom_> I will never be an obj-c programmer

[09:57] <nothingmuch> how come?

[09:57] <beppu> selectors are a thing of beauty to me.

[09:58] <jisom_> but, part of why I became a perl programmer was because I could easily, and freely, learn the language

[09:58] <nothingmuch> beppu: you'll like MMD

[09:58] <beppu> I'm sure I will.  :)

[09:58] <jisom_> pir has mmd :-D

[09:58] <arcady> MMD is definitely a wonderful idea

[09:58] <jisom_> and no pesky semicolons(which can be helpful sometimes)

[09:59] <jisom_> although parrot does lack mmd for constructors, without some kind of hack

[09:59] <beppu> How is parrot doing lately?

[10:01] <lypanov> jisom_: you've used D before or?

[10:01] <jisom_> I think the GPW's slowed down svn commits.....but Leo's done a lot for namespaces lately, and on the list there's been a fair bit of discussion regarding a formal io pdd......for something like parrot I want a pdd before implementing something important

[10:01] <jisom_> I'd noticed D at the shootout, and been to the website.......that's about it

[10:01] <lypanov> okay. as much as me then :)

[10:02] <jisom_> languages targeting machine code that would have to deal directly with ram probably aren't good for parrot...

[10:03] <jisom_> and my little rule for a language, "if it takes more than five lines for a hello world, it's probably not one I'll like"

[10:04] <beppu> is java the prime offender of this rule?

[10:05] <jisom_> it's an offender :)

[10:05] <jisom_> I think c# falls into it to, but, it's almost Java

[10:07] <jisom_> http://shootout.alioth.debian.org/sandbox/benchmark.php?test=hello&lang=all&sort=lines there's a few....and "normal formatting" counds

[10:07] <jisom_> *counts

[10:07] <jisom_> whoohoo, I left

[10:07] *** jisom_ is now known as jisom

[10:08] <beppu> I don't like Java as a language because it lacks conciseness.  However, there are Java programs that I really enjoy using (such as JavE, Azureus, FreeMind (and even Gmail).

[10:08] <beppu> It's a bittersweet situation.

[10:08] <jisom> well I'd guess 99% of computer users don't like C but they like C programs :-p

[10:10] <jisom> as  you'll note, pir has 0 lines for hello world :)

[10:10] <jisom> hello world in pir actually only requires three, in pasm it requires two

[10:12] <arcady> and ocaml has the fastest hello world

[10:12] <jisom> no c intel does

[10:12] <jisom> the link I gave sorted by number of lines

[10:13] <arcady> or rather, ocaml has the fastest one-line hello world

[10:13] <jisom> intel's cc is often the fastest c compiler......

[10:14] <jisom> it'd be nice if they offered a ppc or sparc computer, essentially an uncommon processor where less effort is focused

[10:14] <jisom> io's actually the slowest for hello world

[10:15] <arcady> well, why would intel care about ppc or sparc?

[10:15] <arcady> though IBM would care about ppc

[10:15] <arcady> don't know if they have their own compiler though

[10:16] <jisom> they don't, but it would give an idea of how well a language is across platforms......many embedded devices are ppc

[10:16] <jisom> considering Apple uses gcc, I wouldn't be surprised if IBM used it too

[10:18] <arcady> the official compiler for linux/ppc is definitely gcc

[10:19] <arcady> but I'm not sure about AIX

[10:20] <jisom> Apple has more clout with ppc than linux so if Apple's using gcc, of course linux is using gcc.....of coure openbsd, freebsd, I assume netbsd, linux distro's use gcc.......gcc almost has a monopoly

[10:20] <jisom> but I think it needs cygwin on win32 so.....

[10:21] <arcady> IBM sells two OSs on ppc: linux and AIX

[10:21] <arcady> linux comes with gcc, AIX comes with its own compiler I think

[10:21] <jisom> Apple hardly even tries to make darwin a useable OS

[10:21] <Barry> I just saw that "print" is "say" in Perl 6. I'd prefer "show".

[10:22] <Barry> Make it so.

[10:22] <Barry> Thanks.

[10:22] <azuroth> sure thing, Barry

[10:22] <beppu> sub show { say @_ }

[10:22] <azuroth> show := &say; # right?

[10:23] <beppu> I need to learn perl 6.  ;)

[10:23] <Barry> I don't know. Looks like a dirty smiley to me.

[10:23] <azuroth> so do I

[10:23] <Barry> (:=)

[10:24] <beppu> and perhaps it is.  dirty smilies are how perl likes to express itself.

[10:25] <Barry> So what does printing to a file look like? Still "say"?

[10:25] <jisom> perl6 seems to be too undecided on syntax to commit myself to learning it....... although the perl5.6's "our" is logical and it took a while to it to be added since perl5

[10:26] <arcady> I think the syntax will only decide itself once enough people learn it and start complaining about changes

[10:26] *** gabor529 joined
[10:26] <gabor529> ?eval my @a=("x", "y", "z"); say "@a";

[10:27] *** evalbot_9335 is now known as evalbot_9350

[10:27] <evalbot_9350> OUTPUT[@a ] bool::true 

[10:27] <azuroth> Barry: note that say /= print

[10:27] <jisom> true.....does perl6 have something like "$a = <foo> with $/ = undef" instead of doing something like "do { $/ = undef; $a = <foo>; }"?

[10:27] <arcady> I think there is a "slurp" function

[10:27] <beppu> slurp?

[10:27] <gabor529> ?eval my @a=("x", "y", "z"); say @a;

[10:27] <evalbot_9350> OUTPUT[xyz ] bool::true 

[10:27] <jisom> but general to any global?

[10:28] <jisom> *"local $/ = undef"

[10:28] <arcady> like... $a = slurp $fh

[10:29] <jisom> what about `do { $" = ", ";print @a;}`?

[10:30] * jisom forgot local again

[10:30] <nothingmuch> moosen

[10:30] <jisom> ?

[10:30] <beppu> (I thought something was weird.  (Lack of local))

[10:30] <gabor529> nothingmuch: "@a" does not (yet ?) interpolate

[10:31] <jisom> ?eval say [email@hidden.address]
[10:31] <evalbot_9350> OUTPUT[foo@bar.com ] bool::true 

[10:31] <nothingmuch> gabor529: it never will

[10:31] <jisom> that's why gabor529

[10:31] <nothingmuch> synopsis 4 i think

[10:31] * gabor529 goes back reading in the dark

[10:32] <lumi> ?eval @bar = <a b c>; say [email@hidden.address] foo@bar{}"

[10:32] <evalbot_9350> Error: Undeclared variable: "@bar" 

[10:32] <lumi> ?eval my @bar = <a b c>; say [email@hidden.address] foo@bar{}"

[10:32] <nothingmuch> use { }

[10:32] <gabor529> lumi: oh my :)

[10:32] <evalbot_9350> OUTPUT[foo@bar.com, fooa b c ] bool::true 

[10:32] <nothingmuch> actually it can be prettier

[10:32] <gabor529> ?eval my @a=("x", "y", "z"); say "{@a}";

[10:32] * jisom loves syntax highlighting

[10:33] <nothingmuch> ?eval "my @bar = <a b c>; say "foo{@bar}.com"

[10:33] <evalbot_9350> OUTPUT[x y z ] bool::true 

[10:33] <nothingmuch> and you can also use q:a{ }

[10:33] <evalbot_9350> Error:  unexpected "f" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[10:33] <nothingmuch> but probably not in pugs

[10:33] <beppu> ? eval "perl6 hurts my head"

[10:33] <beppu> ?eval "perl6 hurts my head even more"

[10:33] <evalbot_9350> "perl6 hurts my head even more" 

[10:34] <nothingmuch> ?eval say "per 6 hurts beppu's head" for 1 ...

[10:34] <jisom> ?eval "is perl6 too complex to learn for someone who knows perl5?"

[10:34] <evalbot_9350> pugs: out of memory (requested 1048576 bytes) 

[10:34] <nothingmuch> jisom: no, i took me about 2 days

[10:34] <evalbot_9350> "is perl6 too complex to learn for someone who knows perl5?" 

[10:34] * jisom chuckles

[10:34] <lumi> Not lazy?

[10:34] <nothingmuch> lumi: it actually is lazy

[10:35] <nothingmuch> but the evalbot buffer for accumilating STDOUT prolly filled up

[10:35] <jisom> it needs a meg of memory for a print?

[10:35] <beppu> there's so many new things.  + I'm tired and sleepy.  ;)

[10:35] <lumi> ?eval (1 xx Inf)[Inf]

[10:35] <evalbot_9350> \1 

[10:35] <lumi> (Infinite loops in constant time :P)

[10:36] <arcady> whoa.

[10:36] <jisom> ?eval exp(1)**(pi * i)

[10:36] <evalbot_9350> Error: No such sub: "&i" 

[10:36] <jisom> ?eval exp(1)**(pi * (1 ** .5)) + 1

[10:36] <evalbot_9350> 24.140692632779263 

[10:36] <jisom> wrong!!!!

[10:36] <jisom> oh

[10:37] <jisom> ?eval exp(1)**(pi * (-1 ** .5)) + 1

[10:37] <evalbot_9350> 1.0432139182637723 

[10:37] <jisom> ok, now "wrong!!!!"

[10:37] <jisom> :-D

[10:38] <arcady> even python doesn't let you do that...

[10:38] <jisom> perl5's closer, with Math::Complex

[10:38] <jisom> it doesn't give 0, but it's closer

[10:38] <arcady> well yes, but python has complex numbers built in

[10:39] <arcady> but you can't actually take the square root of -1

[10:39] <nothingmuch> wow! that works now

[10:39] <arcady> you have to write 1j

[10:39] <jisom> perl -MMath::Complex -le 'print exp(1) ** (pi * 

[10:39] <jisom> -1+1.22464679914735e-16i

[10:39] <jisom> perl -MMath::Complex -le 'print exp(1) ** (pi *i);'

[10:39] <Juerd> Hm, sourcefilter?

[10:39] <Juerd> For 16i?

[10:39] *** Barry left
[10:39] *** Gothmog_ joined
[10:40] <nothingmuch> jisom: someone added a Math::Complex to the pugs repo, have a look

[10:40] <jisom> ?eval use Math::Complex; say exp(1) ** (pi * i) + 1

[10:41] <jisom> like that?

[10:41] <evalbot_9350> pugs: *** Can't modify constant item: VUndef     at Prelude.pm line 667, column 14-28        Prelude.pm line 637, column 5-60        <prelude> line 62, column 30-59 

[10:41] <nothingmuch> jisom: i don't know what env evalbot runs in

[10:41] <nothingmuch> try it out for yourself

[10:42] <jisom> that would require booting my freebsd box and, it's lacking on memory for pugs

[10:42] <jisom> ghc wanted over 250 megs to compile!

[10:42] <jisom> pugs wants a lot too

[10:42] <beppu> ?eval %ENV.each

[10:42] <evalbot_9350> Error: No such method in class Scalar: "&each" 

[10:42] * jisom needs to get around to getting complex numbers more fully supported on parrot

[10:43] <nothingmuch> jisom: why not OSX?

[10:44] <nothingmuch> and why do you want to compile GHC?

[10:44] <jisom> ghc bootstraping......dialup.....

[10:44] <nothingmuch> what's dialup got to do with it?

[10:44] <nothingmuch> get your self a binary, BOY!

[10:44] <jisom> slow

[10:44] <jisom> eh, already have ghc source :-p

[10:44] <nothingmuch> ah

[10:44] <nothingmuch> in that case, give me your mailing address and I'll burn you a CD with binaries for freebsd and OSX

[10:44] <jisom> and the freebsd bootstrap....

[10:45] <nothingmuch> bootstrapping GHC is a loooooooooooooooooooooooooooooooooooooooooooooooooooonng process

[10:45] <jisom> parrot's easier to work with for me, and, etc...

[10:45] <nothingmuch> excuses excuses!

[10:45] <jisom> looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooonger if it's constantly swapping

[10:45] <nothingmuch> hence binary ;-)

[10:45] <nothingmuch> i'm willing to help in any way i can

[10:46] <nothingmuch> i'm serious about mailing you a CD

[10:46] <jisom> eh, I imagine the darwin bootstrap isn't too bad, and with my package manager it wouldn't be too stressful, but still....

[10:47] <jisom> and since if I were to really work with pugs, it'd be on the pir backend, and since there's the pil2 work in progress, it's like, "why now?"

[10:47] <nothingmuch> binary binary binary binary

[10:47] <nothingmuch> well

[10:48] <nothingmuch> you get hooked

[10:48] <nothingmuch> it's that simple =)

[10:48] <jisom> on parrot

[10:48] <nothingmuch> -Ofun

[10:48] <jisom> :-D

[10:48] <nothingmuch> you can have fuun on both

[10:48] <nothingmuch> you can help drive PILwhatever so that you can emit PIR

[10:48] <nothingmuch> you can help audreyt work out PIR stuff

[10:48] <nothingmuch> you can start implementing necessary PIR features

[10:48] <jisom> ackermann(leo's branch) and partialsums run faster than c on x86 with jit........that's -Ofun

[10:49] <nothingmuch> you can help fglock and me and anyone else interested figure out what some backend things

[10:49] <nothingmuch> because we want to write perl 6 compiler things that are orthogonal (for now) from pugs

[10:50] <jisom> well in a sense, the more p6 base written in p6 means less to port to parrot.......

[10:50] <jisom> it's not like pugs it optimized towards speed(too me hours, and computer "near crashes" to get it to compile)......and speed can happen after

[10:51] <jisom> but I haven't done anything with lexicals in pir yet

[10:51] <nothingmuch> pweeeeeeeeze pweeeze come help

[10:52] <nothingmuch> i'll give you commit access

[10:52] <jisom> although if you're writting in pir, you really don't need to use lexicals

[10:52] <jisom> doesn't anyone get commit access?

[10:52] <jisom> :-p

[10:52] <nothingmuch> uh

[10:52] <nothingmuch> yeah

[10:52] <nothingmuch> but you're special!

[10:52] <nothingmuch> i'll give you special commit access

[10:52] <nothingmuch> like

[10:53] <nothingmuch> i'll chant something when I add it

[10:53] <jisom> yeah, I've gotten to the point of prefering pir over perl5

[10:53] <jisom> and parrot in no way allows one liners

[10:53] <jisom> besides the "exit $N0", "die 5, 1", and "end"

[10:54] <nothingmuch> is parrot in any way useful for "real" work which is not very very specialized like what dan did?

[10:54] <jisom> platform independent optimized easy to read and work with programming?

[10:55] *** gaal joined
[10:55] <arcady> or whenever you happen to need a vm

[10:56] <nothingmuch> hola gaal 

[10:56] <GeJ> nothingmuch: if I remember correctly, Dan Sugalski had some use of parrot at $work

[10:56] <nothingmuch> GeJ: yeah, i remember that

[10:56] <nothingmuch> but i was more interested in $anything_else

[10:56] <arcady> he used it as a target for a compiler for some horrible specialized language

[10:56] <nothingmuch> i mean, it's a pretty low level language, i'm not sure if it fits any niche but being a target backend

[10:56] <nothingmuch> yeah, i know =)

[10:56] * nothingmuch reads dan's blog

[10:57] <jisom> Dan's currently working on forking parrot to a separate project with another purpose, although seemingly starting from scratch...I guess vm's are fun

[10:57] <nothingmuch> i'm kinda skeptical about this one

[10:57] <jisom> nothingmuch, could anyone but someone who knew pir port something to pir?

[10:57] <nothingmuch> no global data is a bit too much

[10:58] <nothingmuch> jisom: yes, they could learn PIR and then....

[10:58] *** vodka-goo joined
[10:58] * jisom should write up a tutorial for pir using the new hllmacros.pir include that'll make it easier for newbies

[10:58] <arcady> does anything even compile to pir these days?

[10:59] <azuroth> an implementation of tcl 'almost' does

[10:59] * jisom writes in pir

[11:00] <jisom> although it gets far less press, I think lua's coming up a lot......I don't know lua, I haven't used it, but I get the idea it's at least "useful" now

[11:00] <azuroth> and amber

[11:00] <azuroth> amber looks pretty neat

[11:00] *** bsb joined
[11:00] * jisom hasn't looked at amber for a while, but seen the commits for lua

[11:01] <arcady> and perl 1 is coming along reasonably well too

[11:02] * jisom wishes punie had more of what was done in parrot's svn

[11:02] <nothingmuch> i don't understand why it's perl 1

[11:02] <nothingmuch> it's not such a simple language

[11:02] <nothingmuch> but otoh it's a pretty non fun language to write in

[11:03] <jisom> perl1 doesn't run well for me either

[11:04] <jisom> I can understand using perl1 because of it's legacy to perl6, but of course, part of it is more the method of compiling to pir than the language

[11:05] <nothingmuch> right, but the language could be a subset of perl 5

[11:05] * jisom wonders how much of perl6 breaks compatibility with perl1 than perl5 does, besides oo

[11:05] <nothingmuch> which has e.g. lexicals, and more consistency

[11:05] <jisom> but "$  = 'foo';" is valid :-p

[11:06] <jisom> but perl1 does seem to lack sin and cos :(

[11:06] <nothingmuch> and lexicals

[11:07] <nothingmuch> and user subs

[11:07] <jisom> think of how many perl5 programs could relatively easily be ported to perl1, for probably a substantial speed improvement.....

[11:07] <jisom> how many interpreters do you know of that "can compile faster than many programs run"?

[11:08] <nothingmuch> i'm not sure there would be a speed improvement

[11:08] <nothingmuch> the emitter backend has to be very good

[11:08] <nothingmuch> remember that factorial is just one benchmark

[11:09] <nothingmuch> written in high quality PIR

[11:09] <nothingmuch> machines don't write code as good as humans do

[11:10] <jisom> but with proper knowledge of the machine, machines can write code better than humans......for the machine anyway

[11:10] <nothingmuch> true

[11:10] <arcady> machines also don't get bored as easily

[11:10] <nothingmuch> but it's enough that there is one bottleneck

[11:11] * jisom sometimes gets the urge to get parrot/pir stripped to writting portably assembly

[11:11] <nothingmuch> anywho, it doesn't matter... punie is a research project. no one willl port their perl 5 to punie for performance

[11:11] <nothingmuch> call it a "hunch" ;-)

[11:12] <jisom> it's like with the patrialsums benchmark, the fast pir version.....I tried writing a c version of the same style, and compiled it, and it was still slower than parrot

[11:12] <nothingmuch> also, while parrot's speed is good for these things, i've heard many criticisms about speed for other things

[11:12] <jisom> and because punie's a "research project," I personally wish it was more open and less of only Allison's, as in being in parrot's svn :-\

[11:13] <jisom> well, it required using JIT on x86......

[11:13] <audreyt> rehi

[11:13] <jisom> taking advantage of jit on parrot requires knowing it's limitations....

[11:13] <LeTo> hi audreyt 

[11:13] * audreyt breathes in the fresh air of tcpip

[11:13] <jisom> don't get electrocuted

[11:14] <LeTo> audreyt: is all arranged with Gerda wrt travelling?

[11:14] <jisom> http://svn.perl.org/parrot/trunk/runtime/parrot/include/hllmacros.pir <= his pride and joy contribution to parrot, including it's possibility

[11:15] <audreyt> LeTo: no, I havn't called Gerda yet

[11:16] <nothingmuch> LeTo: is this prehackathon or posthackathon arrangements?

[11:16] <LeTo> nothingmuch: pre

[11:16] <LeTo> audreyt: you can mail here too, you got the addr

[11:17] <audreyt> (calling her now)

[11:17] <nothingmuch> LeTo: convince jisom that his assistance will help pugs/parrot get along ;-)

[11:17] <LeTo> nothingmuch: he's helping already

[11:18] <jisom> supporting parrot helps to get rid of pugs :-D

[11:19] <jisom> although if perl1 is any indication, pugs will live on for a long time

[11:19] <nothingmuch> LeTo: i know, i just want to give him pugs commit access too, and make him try to run stuff

[11:19] <nothingmuch> oh, jisom, i know - you can help with the embed-parrot-in-pugs stuff

[11:19] <nothingmuch> pugs uses parrot for rules

[11:20] <jisom> nothingmuch, my fastest computer is 900mHz and around 128M ram....my iBook has 384M ram but 800mHz, i.e. slow for pugs

[11:21] <LeTo> nothingmuch: don't poach my workers here ;)

[11:21] <nothingmuch> LeTo: heh

[11:21] <nothingmuch> jisom: okay okay

[11:21] <jisom> since both perl5 and parrot support constantly running programs, you could write a perl5 program and a pir program that read input, then a text string, and return a dump of matches.....

[11:21] <nothingmuch> jisom: you can have a parrot account though

[11:21] <jisom> I do :-p

[11:22] <nothingmuch> err

[11:22] <nothingmuch> sorry

[11:22] <nothingmuch> a feather account

[11:22] <nothingmuch> *confusion*

[11:22] * jisom has dialup

[11:22] <nothingmuch> dialup can deal with ssh

[11:22] <nothingmuch> no nitpicking

[11:22] <nothingmuch> get a madfast machine to run your parrot on ;-)

[11:22] <nothingmuch> talk to Juerd 

[11:23] <jisom> but I need to be online(and use the phone line) to use...and  "svn revert"

[11:23] <nothingmuch> svk

[11:23] <nothingmuch> ;-)

[11:23] <nothingmuch> i'll give you $1 a month to fund your broadband

[11:23] <nothingmuch> you know what? $3

[11:23] * jisom is unemployed

[11:25] <nothingmuch> intentionally?

[11:25] <jisom> course not

[11:26] <nothingmuch> had a look on jobs.perl.org?

[11:26] <nothingmuch> there's lots of freelance stuff

[11:26] *** uszr` joined
[11:26] <nothingmuch> lots of telecommute, too

[11:26] <jisom> I'd hate to have to program as a job......it'd take the fun out

[11:27] <nothingmuch> not necessarily

[11:27] <nothingmuch> as long as you make sure your hours are good

[11:27] <nothingmuch> what would you rather do as a job?

[11:28] <jisom> didn't mind being a janitor.....didn't mind being a factory working making the same repetitive motion 8 hours a day.....I'm weird like that

[11:29] <nothingmuch> hmm

[11:29] <nothingmuch> what about some crafts profession?

[11:29] <jisom> tiny town

[11:29] * nothingmuch always secretly wanted to be a wood worker

[11:29] <nothingmuch> it makes my dermatitis flare up though

[11:30] <jisom> I kind of prefer clay...clay's repairable

[11:30] <nothingmuch> never managed to do what I wanted with clay

[11:30] <lumi> You wanted to be a lumberjack?

[11:30] <nothingmuch> lumi: no

[11:30] <nothingmuch> nagar

[11:30] <lumi> Ah

[11:30] <nothingmuch> make pretty drawers and stuff

[11:31] <jisom> I have a friend who was a partner in an isp(recently bought out by the other parter), and now bought a metal lathe...

[11:32] <jisom> a guy who one was essentially given a computer by the university who they said "would never work again" and got it to work

[11:36] *** cognominal_ joined
[11:37] <jisom> quick question, does pugs' "make test" test the pod formatting on all files in pugs' svn that  contain pod?

[11:38] <audreyt> no. feel free to add t/00-pod

[11:38] <audreyt> or something like that

[11:38] <audreyt> t/00-doc

[11:39] <jisom> parrot has one, t/doc/pod.t, one of my pet peeves with perl5's default install is not requiring podspec conformance....

[11:39] <audreyt> please add t/00-doc/pod.t then.

[11:40] <jisom> in fact, you can probably copy parrot's over to pugs without much issue

[11:40] <jisom> aside from the "MANIFEST.generated" parts

[11:41] *** Muable joined
[11:41] <audreyt> k. a commit bit is on your way

[11:41] <jisom> eh no need

[11:42] <jisom> I'm tired

[11:42] <audreyt> please commit to the same checkout as http://svn.openfoundry.org/pugs/ 

[11:42] <audreyt> you can surely refuse to accept it :)

[11:45] <jisom> does pugs have a MANIFEST?

[11:45] <audreyt> no, it is generated each time before release.

[11:46] <jisom> so different from parrot's...where it's supposed to be regenerated with each addition or deletion...

[11:46] <audreyt> yeah. it's too much a hassle for our style of dev

[11:46] <jisom> then it's not a simple copy over....

[11:47] * jisom looks for the email he sent to p6i that did it for him

[11:47] *** KingDiamond joined
[11:48] <nothingmuch> frack

[11:48] <gaal> hey audreyt, bsb discovered that:

[11:48] <nothingmuch> how did you get him to get a comitter bit?

[11:48] <nothingmuch> i tried for an hour

[11:48] <gaal> 1. macro M { ..... } M 1+2 works

[11:48] <gaal> 2. .... M(1+2) does not

[11:48] <audreyt> nothingmuch: I looked up his email from p6i and sent one

[11:48] <gaal> 3. even when reverting most of the changes of the castV patch, the same behavior exists

[11:49] <nothingmuch> haha

[11:49] <audreyt> nothingmuch: the key is "don't try"

[11:49] <audreyt> gaal: ok, looking into it

[11:49] <audreyt> but I need to fix the END thing for good now

[11:49] <gaal> sure, just a data point

[11:50] <audreyt> hm, @*END is also bogus. yay

[11:50] <audreyt> it needs to be @Test::END

[11:50] <audreyt> and then merged back to main END

[11:51] <audreyt> I mean *END

[11:51] <audreyt> because `unionPad` cannot join two arrays like that

[11:51] <jisom> find -E . -not \( -name .svn -prune \) -type f -not -perm +111 -not -regex '.*\.([a-z0-9_]+|C)' -not -name Makefile -not -name harness -exec podchecker '{}' \; |& grep -v 'does not contain any pod commands' # under tcsh

[11:51] <gaal> again the confusion between packages and scopes?

[11:51] <jisom> although some of that's specific to parrot

[11:51] <audreyt> gaal: more like, separate compilation

[11:52] <audreyt> gaal: because under monolithic compilation you just keep adding stuff to @*END

[11:52] <audreyt> gaal: but now things are separately compiled

[11:52] <audreyt> and as such the @*END needs to be stringed together

[11:52] <gaal> A.pm: module Test; ...; __END__ blah

[11:53] <svnbot6> r9351 | bsb++ |  r9217@rex:  bsb | 2006-02-27 17:02:33 +0200

[11:53] <svnbot6> r9351 | bsb++ |  make haddock now should work with drift output (by ignoring it)

[11:53] <gaal> B.pm: module Test; ...; __END__ blah

[11:53] <gaal> time for lunch, bbiab

[11:54] <jisom> btw, I wrote a script for parrot, parrot's svn/tools/dev/mk_manifest_and_skip.pl which recreates MANIFEST and MANIFEST.SKIP.....it does require an svn repo

[11:54] <svnbot6> r9352 | bsb++ |  r9345@rex:  bsb | 2006-03-07 22:13:55 +0200

[11:54] <svnbot6> r9352 | bsb++ |  A bare return from a macro results in a Noop AST

[11:54] <svnbot6> r9353 | bsb++ |  r9346@rex:  bsb | 2006-03-07 22:14:27 +0200

[11:54] <svnbot6> r9353 | bsb++ |  haddock_tips tweak

[11:54] <svnbot6> r9354 | bsb++ |  r9347@rex:  bsb | 2006-03-07 22:16:10 +0200

[11:54] <svnbot6> r9354 | bsb++ |  Mention haddock vim syntax

[11:55] *** nnunley joined
[11:55] <svnbot6> r9356 | bsb++ |  r9378@rex:  bsb | 2006-03-09 13:52:20 +0200

[11:55] <svnbot6> r9356 | bsb++ |  Add a subBody omitted in a recent refactor.

[11:55] <svnbot6> r9356 | bsb++ |  Remove a stale comment

[11:56] <bsb> arg!  svk  is freaking out again!

[11:56] *** kane_ is now known as kane-xs

[11:56] * jisom looks at the warnings and errors in pugs' svn repo

[11:58] <audreyt> gaal: er no, it's END{...}

[12:09] *** kisu joined
[12:10] <clkao> bsb: huh?

[12:11] <bsb> During the hackathon I got old log message repeated when doing an svk push

[12:12] <bsb> audrey did some magic and everything was fine

[12:12] <bsb> Now it may be happening again, we'll see with the next svk push

[12:13] <clkao> mmm

[12:14] <bsb> This is svk, version 1.04.

[12:14] <gaal> ah ah ah, END hooks not POD!

[12:15] <audreyt> fixed anyway

[12:15] <audreyt> committing

[12:20] <bsb> clkao: svk pushing now

[12:20] <bsb> One change

[12:23] <svnbot6> r9357 | bsb++ |  r9385@rex:  bsb | 2006-03-09 14:20:53 +0200

[12:23] <svnbot6> r9357 | bsb++ |  Noop q:code{} returning macro test

[12:23] <svnbot6> r9358 | audreyt++ | * Pugs.Prim.Eval: When both modules export the same

[12:23] <svnbot6> r9358 | audreyt++ |   global symbol, let the included module win.

[12:23] <svnbot6> r9358 | audreyt++ |   (Eventually it should be invalid to export global

[12:23] <svnbot6> r9358 | audreyt++ |    non-multi symbols this way, maybe...)

[12:24] <nothingmuch> audreyt: does macro with q:code { BEGIN { } } only execute the begin block when the q:code is interpolated?

[12:24] *** chris2 joined
[12:24] <nothingmuch> (into the receiving AST)

[12:25] <nothingmuch> or within the macro itself?

[12:26] <nothingmuch> bsb: what parts of israel did you see already?

[12:26] <nothingmuch> did you go hiking in the north and stuff?

[12:26] <audreyt> nothingmuch: I think it executes whenever it's interpolated

[12:27] <nothingmuch> goody... i preferred those semantics ;-)

[12:27] <bsb> Tel Aviv, Jerusalem, Nazareth, Haifa, Dead Sea, Masada, hackathon bits

[12:28] <nothingmuch> seems more... "clean", in that code quoting is completely non active

[12:28] <lumi> Jaffa

[12:28] <nothingmuch> what?! you went to mesada and didn't ping me??????? traitors!

[12:28] * lumi didn't go, so not a traitor

[12:29] <svnbot6> r9359 | audreyt++ | * Pugs.Parser: END blocks are now associated to per-package

[12:29] <svnbot6> r9359 | audreyt++ |   symtable instead of pushed into @*END.  "use" a module

[12:29] <svnbot6> r9359 | audreyt++ |   now simply copies its END blocks to the current compilation

[12:29] <svnbot6> r9359 | audreyt++ |   unit -- at program exit, the outermost @END is then executed.

[12:29] <svnbot6> r9359 | audreyt++ | * Moreover, change the END sequences to happen in LIFO order.

[12:29] <bsb> was an organized tour...

[12:29] <nothingmuch> phoeeey! excuses excuses

[12:29] <gaal> the organized tour didn't include nothingmuch's house? traitors!

[12:32] <audreyt> ok, now all modules are compiled, I'm forced to fix emitting of closures

[12:32] <audreyt> otherwise this is currently broken

[12:33] <audreyt> my $x; sub moose is export { say $x } sub goose is export { $x = 9 }

[12:33] <nothingmuch> emitting closures == important

[12:33] <nothingmuch> something difficult though

[12:33] <nothingmuch> if you serialize two closures

[12:33] <nothingmuch> that capture a shared container

[12:34] <nothingmuch> how do you serialize them at the same time?

[12:34] <audreyt> using YAML references

[12:34] <audreyt> YAML is a graph not a tree

[12:34] <nothingmuch> yeah, i know

[12:34] <nothingmuch> i mean, how do you get two codes in the same yaml document

[12:34] <nothingmuch> err

[12:34] <nothingmuch> like

[12:34] <nothingmuch> &code.yaml

[12:35] <nothingmuch> or whatever

[12:35] <nothingmuch> (not just precompilation)

[12:35] <nothingmuch> perhaps .perl is a better example

[12:35] <audreyt> oh. then you need object ids

[12:35] <nothingmuch> hmm

[12:35] <nothingmuch> i think i see a consistent path:

[12:35] <svnbot6> r9360 | gaal++ | * precompilation_cache.pod:

[12:35] <svnbot6> r9360 | gaal++ | - incorporate nothingmuch++'s edits

[12:35] <svnbot6> r9360 | gaal++ | - add load flow (reviews welcome)

[12:35] <nothingmuch> $deserializer = Deserializer.new;

[12:36] <nothingmuch> and if you deserialize with the same deserializer object it'll make sure that all object IDs are shared

[12:36] <audreyt> ...if we use UUIDs internally then we get that anyway

[12:36] <nothingmuch> if they are the same in the serializer output

[12:36] <nothingmuch> isn't that a *BIG* memory overhead?

[12:36] <audreyt> depends on the application

[12:37] <audreyt> (not saying that we do that.)

[12:37] <nothingmuch> hmm

[12:39] <kane-xs> seen rindolf

[12:40] <nothingmuch> kane-xs: jabbot is dead

[12:40] <kane-xs> long live jabbot!

[12:43] *** highfi joined
[12:47] *** nivrrex joined
[12:47] <highfi>  laptop for sale 500$ want it gone today. price includes shipping, case, wireless router. message me if interested on aim at ogd443 or msn at [email@hidden.address]
[13:00] <kane-xs> hooray for kline

[13:01] <nothingmuch> kline?

[13:01] <audreyt> "irc obliterate"

[13:01] *** ruz joined
[13:04] <nothingmuch> oh, i didn't notice the spam

[13:06] *** nivrrex left
[13:10] *** iblechbot joined
[13:15] <svnbot6> r9361 | fglock++ | misc/pX/Common/lrep/Deal.txt - braindump

[13:15] *** rgs joined
[13:17] *** Limbic_Region joined
[13:22] *** kolibrie joined
[13:22] *** fglock joined
[13:25] * nothingmuch gets killed by the desert

[13:26] <nothingmuch> lumi|gaal: have you been getting dust storms in the TA area?

[13:27] <kolibrie> nothingmuch: you just have to stay inside

[13:27] <nothingmuch> kolibrie: not really

[13:27] <nothingmuch> i am inside

[13:27] <nothingmuch> but the air is dry

[13:27] <nothingmuch> especially when they keep the AC on

[13:27] <audreyt> (brb)

[13:28] <nothingmuch> can't run away from nasty weather =/

[13:28] <kolibrie> I never had a problem with dry air

[13:28] <kolibrie> I remember some pretty amazing dust storms, and we just sat back and waited till they were over

[13:29] <gaal> nothingmuch: yeah, but nothing like 3 weeks ago

[13:30] <nothingmuch> what did we have 3 weeks ago? i forgot

[13:30] <nothingmuch> oh... i remember actually

[13:30] <gaal> orange afternoon

[13:30] <fglock> nothingmuch: hi! re yesterday, I wrote a couple of ideas - misc/pX/Common/lrep/Deal.txt

[13:30] <nothingmuch> here it's the same as then

[13:30] <nothingmuch> all week now

[13:30] <gaal> lots of pollution in Tel-Aviv

[13:30] <nothingmuch> fglock: i'll have a look

[13:30] <nothingmuch> take a look?

[13:31] <fglock> dunno - I'm not a native speaker either

[13:31] <kolibrie> nothingmuch: either or, they mean about the same

[13:32] <nothingmuch> fglock: * Long term (>2 weeks) plan - Have a plan for Perl 6 Alpha

[13:32] <nothingmuch> cute ;-)

[13:32] <nothingmuch> i don't think allison can help with types/oo, perl 1 had neither ;-)

[13:33] <nothingmuch> the doc is hard to read, please try to make it  hierarchal

[13:33] <nothingmuch> with headings

[13:33] <nothingmuch> =, ==, ===

[13:33] <nothingmuch> separate thoughts from plans

[13:33] <Limbic_Region> OT but something that looks interesting http://critticall.com/ 

[13:34] <audreyt> Limbic_Region: btw, I can't dupe the zlib problem in win32

[13:34] <nothingmuch> Limbic_Region: they suck, actually

[13:34] <audreyt> and the "use Test" bug you reported is now fixed

[13:34] <nothingmuch> Limbic_Region: they charge $$$$ for stuff that is not very impressive, appearantly 

[13:36] <Limbic_Region> audreyt - great news on the latter, confusing news on the former

[13:37] <Limbic_Region> audreyt - I can't figure out why my Win32 build at home doesn't set USE_ZLIB and the one at work does

[13:37] <audreyt> same version of ghc et al?

[13:37] <Limbic_Region> the one at home works fine (but isn't using zlib) and the one at work also works (uses zlib but requires cygwin)

[13:37] <Limbic_Region> audreyt - AFAICT

[13:38] <gaal> nothingmuch: could you give the code in precompilation_cache a gander?

[13:38] <Limbic_Region> audreyt - on your Win32 build, does your .setup-config have USE_ZLIB enabled?

[13:38] <Limbic_Region> it may be that you aren't reproducing the bizarro behavior because you aren't even attempting to do zlib

[13:39] <audreyt> I see -DUSE_ZLIB -lz

[13:39] <Limbic_Region> and it works right

[13:39] <audreyt> I think what happens is that

[13:39] <audreyt> normally we should see libz.a

[13:39] <audreyt> in gcc-lib

[13:39] <audreyt> but if your PATH has a libz.a first

[13:39] <Limbic_Region> ok - chalk my environment up to an anonomoly

[13:40] <audreyt> i.e. if you have cygwin/bin in path

[13:40] * Limbic_Region thought of that too - and modified his PATH variable accordingly

[13:40] <audreyt> hrm.

[13:40] <Limbic_Region> Cygwin stuff should only come into play when I am in a cygwin shell and not a command prompt

[13:41] <audreyt> well, if it had modified your PATH already

[13:41] <gaal> is "anonomoly" an unassigned bug? 

[13:41] <audreyt> then it affects you no matter what

[13:41] <Limbic_Region> audreyt - no, I mean before I launched the command window

[13:41] <nothingmuch> gaal: yes

[13:41] <Limbic_Region> is there a way to query ld.exe to find where it is finding a lib that it is linking with?

[13:42] <svnbot6> r9362 | audreyt++ | * More warnings avoidance by qualifying instance imports

[13:42] <svnbot6> r9362 | audreyt++ |   and add a type signature to preludeStr. No functional changes.

[13:42] <audreyt> not sure.

[13:42] <Limbic_Region> nothingmuch ref critticall - good 2 know.  I wasn't interested in purchasing but some of the results looked neat

[13:42] <wilx> Hm, try gcc -v, it will show you the commands it runs and then copy the ld command and add -v too.

[13:42] <nothingmuch> Limbic_Region: there was a big discussion in #some_channel a while ago

[13:42] <Limbic_Region> Ok - here is what I can do

[13:43] <nothingmuch> if you look at their hype you can see that it's actually pretty mundane... the "ultra fast sort thing" is just a weird bucket sort, for example

[13:43] <Limbic_Region> I can set up a find through my path looking for anything that resembles libz.a

[13:43] <wilx> Hmm, or rather --verbose for ld.

[13:43] <nothingmuch> also, the code that comes out is only conjecturally correct

[13:43] <nothingmuch> (as in, it seems to work on whatever tests they made for it)

[13:43] <nothingmuch> but since it's usually weird code it's hard to prove it's correctness

[13:43] <nothingmuch> and hard to debug

[13:44] <audreyt> Limbic_Region: yeah, that sounds good. also look for libz.dll.a

[13:44] <fglock> audreyt: would you mind read Deal.txt? I'm likely to delete or change it later

[13:44] <audreyt> fglock: I already am

[13:45] <nothingmuch> gaal: s/die/fail/

[13:45] <gaal> nothingmuch: those are all caught

[13:45] <nothingmuch> just a good habit

[13:45] <gaal> so they need to always die

[13:45] <nothingmuch> oh

[13:45] <audreyt> fglock: FYI I think self-hosting in perl5 is "the" way to go.

[13:45] <nothingmuch> okay

[13:45] <nothingmuch> i thought CATCH always catches fail

[13:45] <nothingmuch> even without use fatal

[13:45] <gaal> nothingmuch: it's used like goto CLEANUP

[13:45] <nothingmuch> it's just that if it's not cought then it's not a deadly catch

[13:45] <gaal> how can that happen?

[13:45] <audreyt> fglock: your only argument against that seems to be "not Pugs tradition"

[13:46] <fglock> audreyt: I'm not happing with yet-another split in the Perl 6 project

[13:46] <audreyt> fglock: I'd like to point out that there is no tradition in Pugs :)

[13:46] <fglock> s/happing/happy/

[13:46] <audreyt> (or rather, our tradition has always been breaking traditions)

[13:46] <audreyt> (as long as it's fun)

[13:46] <gaal> the whole point of no fatal is thatit doesn't raise an exception, no?

[13:46] <audreyt> fglock: I don't see it as a split from the Hs core

[13:46] <nothingmuch> i thought the whole point is that you don't *have* to catch exceptions to resiume execution

[13:47] <nothingmuch> that is, the code will try to continue with a bad value, instead of aborted control flow

[13:47] <nothingmuch> but if you are bothering to check for errors you still get to handle them

[13:47] <gaal> hmmmm

[13:47] <audreyt> fglock: the way I worked with stevan et al has always been: prototype something in p5 quickly, port it to Hs to find out corner cases, then redo it in p5 to get more people involved and CPAN it

[13:47] <audreyt> fglock: I think for OO and for Grammars we are pretty close to the "redo in p5" phase

[13:47] <gaal> nothingmuch: sounds much harder to implement

[13:48] <audreyt> fglock: and the Hs runtime can be replaced piecemeal in p5/p6

[13:48] <nothingmuch> gaal: whenever you exit a scope you check if the parent scope has explicit use fatal or no fatal

[13:48] <audreyt> fglock: p5 for all the infrastructural (VM) things, p6 for the builtins, just like what you are doing

[13:48] <nothingmuch> and if not you check it's caller, etc etc etc

[13:48] <nothingmuch> fail is like return

[13:48] <fglock> audreyt: how do you see a closer collaboration with LambdaCamels? 

[13:48] <nothingmuch> it will always break the current scope

[13:49] <Limbic_Region> audreyt - I have a couple of lz32.dll files in some windows directories but that's it

[13:49] <nothingmuch> but the question is whether it will die in the outer scope or not

[13:49] <audreyt> Limbic_Region: hm, weird

[13:49] <fglock> audreyt: there is a lot of architecture stuff needed

[13:49] <audreyt> Limbic_Region: zlib.h ?

[13:49] <audreyt> fglock: explain... you mean like prim bindings?

[13:49] <fglock> audreyt: like what the AST will look like

[13:49] <Limbic_Region> audreyt - nope

[13:49] <fglock> audreyt: unify the node names

[13:50] <fglock> audreyt: add the proper annotations

[13:50] <Limbic_Region> and yet, when I compile an executable with ghc and link using -lz it works fine

[13:50] <audreyt> fglock: right. but all this can happen piecemeal

[13:50] <audreyt> fglock: like, currently we use PGE for rules.

[13:50] <audreyt> fglock: I'd like to switch to p5 for rules.

[13:50] <nothingmuch> gaal: anyway, the code looks good

[13:50] <fglock> audreyt: you mean, after self-hosting?

[13:50] *** vodka-goo joined
[13:50] <Limbic_Region> audreyt - perhaps there is another env variable at play here

[13:50] <audreyt> fglock: no, like, this week.

[13:50] * Limbic_Region checks again

[13:51] <audreyt> fglock: and then we figure out how to ship objects between Hsland and P5land via YAML serialization

[13:51] <nothingmuch> i don't know if i like IO methods in the String class

[13:51] <nothingmuch> i.e. "foo".readdir

[13:51] <nothingmuch> on the one hand it's very useful

[13:51] <nothingmuch> on the other hand it's also a big intertwined mess

[13:51] <nothingmuch> maybe readdir is a multimethod on Str provided by the IO::Dir prelude module or something?

[13:51] <audreyt> fglock: basically, currently the Hs parts can be split roughly into "runtime" and "compiler" parts

[13:52] <audreyt> fglock: my wish is to port the former to p5 and the later to p6

[13:52] <fglock> audreyt: re p5 for rules - you can already use p6 for rules

[13:52] <audreyt> fglock: right, you ported that to p6

[13:53] <audreyt> in any case, I think p5-as-runtime is definitely the way forward

[13:53] <audreyt> hs-as-runtime was just so that I can understand what's going on better

[13:53] <audreyt> I'll read about Deal.txt more and discuss with Leo tonight

[13:53] <audreyt> I'm leaving Vienna in <1hr 

[13:54] <fglock> audreyt: what would you need the compiler structure to be - it can be changed anytime

[13:54] <gaal> oops, back

[13:54] <fglock> audreyt: actually, you have more resources to change it then I :)

[13:54] <audreyt> fglock: do I? :) you mean time? :)

[13:54] <fglock> audreyt: experience

[13:54] <audreyt> I'll think about it more on the car to Leo's place.

[13:55] <audreyt> s/on/during/; s/car/car drive/; # or something

[13:55] <fglock> audreyt: thanks

[13:55] <audreyt> np :)

[13:55] <audreyt> I'll bbiab

[13:55] <gaal> audreyt: looks like bsb found the macro problem

[13:55] <nothingmuch> ciao

[13:55] <nothingmuch> going home

[13:55] <gaal> (maybe)

[13:56] <gaal> so don't worry about that if it was still in your queue

[13:59] <Limbic_Region> audreyt - I am on to something

[13:59] <Limbic_Region> ran strings on ld.exe

[13:59] <Limbic_Region> it has some hardcoded search paths

[14:00] *** rantanplan_ joined
[14:02] *** rgs joined
[14:06] *** avar joined
[14:08] *** Muable joined
[14:24] * Limbic_Region gives up

[14:31] *** elmex joined
[14:32] <fglock> re OO AST nodes - does it make any sense to use hashes, and autobox when necessary? (just because building objects during the parsing may be expensive - backtracking throws many nodes away)

[14:32] *** Nouk joined
[14:36] <audreyt> fglock: for perf I'll even just use arrays with constant lookup keys

[14:36] <audreyt> fglock: but I'd suggest to _not_ care about performance 

[14:36] <audreyt> just optimize for clarity/effieciency for coding

[14:36] <audreyt> it may be nice to adopt the haskellish

[14:36] <audreyt> Val(VInt(3))

[14:37] <audreyt> i.e. instead of calling ->new, use functions as constructors

[14:37] <fglock> audreyt: but are resulting nodes objects of functions?

[14:39] <fglock> audreyt: you mean like:   rule xxx {... { return Val(VInt(3)) } }

[14:40] <fglock> audreyt: I'm ok with that - Val and VInt are "node constructor" functions, which we can modify later

[14:41] <fglock>     rule xxx {... { return Val(VInt( $1 )) } }

[14:43] <audreyt> yes.

[14:43] <audreyt> this is because in p6

[14:43] <audreyt> VInt(3) 

[14:43] <audreyt> is basically

[14:43] <audreyt> 3 as VInt

[14:44] <audreyt> and you can install multis in the VInt class to anticipate the infix "as" call

[14:44] *** drbean joined
[14:44] <fglock> audreyt: and if Val returns a function, we can delay "building" the AST by not evaluating it, right?

[14:44] <audreyt> yes

[14:44] <audreyt> but I'm not sure how much you gain in p5land from that

[14:45] <fglock> audreyt: I don't know too - just thinking aloud :)

[14:45] <audreyt> without core support for thunks, and with a typical compiler run visiting all nodes

[14:45] <audreyt> delaying ast buildup doesn't gain you much.

[14:46] <fglock> audreyt: you get time by not bulding things that would be destroyed by backtracking - I think that's all

[14:47] <audreyt> yup, so it's CV creation vs HVMG creation

[14:48] <audreyt> well, with the encapsulation offereed by function constuctors we can switch style at all times

[14:48] <audreyt> but my gut feeling is that plain HVMG is good enough

[14:48] <fglock> audreyt: VInt(3) - you don't need to specify the argument name? (sorry, I don't really know p6)

[14:49] <fglock> HVMG?

[14:49] <audreyt> no - it's a coercion

[14:49] <audreyt> blessed hashref

[14:49] <audreyt> some help in p5land for this kind of thing:

[14:49] <audreyt> http://search.cpan.org/dist/Symbol-Opaque/

[14:49] <audreyt> http://search.cpan.org/dist/Data-Variant/

[14:53] <audreyt> ok, I'm leaving here to be picked up to Leo's now

[14:53] <audreyt> be back in ~4hrs

[14:53] <audreyt> &

[15:03] <svnbot6> r9363 | fglock++ | lrep - updated Tasks, Notes

[15:09] *** chris2 joined
[15:10] *** vel joined
[15:19] *** cm joined
[15:36] <broquaint> pugs: *** No such method in class Str: "&use"

[15:36] <broquaint> From the latest checkout. Can someone point me to on how/where to fix this?

[15:37] <broquaint> I'm guessing Prelude.pm

[15:45] *** p2502 joined
[15:55] <clkao> audreyt: yaml::syck bug

[15:55] <clkao> "--- #YAML:1.0 {}" returns undef rather than empty hash

[15:56] <gaal> broquaint: it's known b0rkage

[15:56] <gaal> broquaint: s/macro/sub/ in Prelude for now,

[15:56] <gaal> in "use" and "require"

[15:58] *** uszr` joined
[16:11] *** FurnaceBoy joined
[16:13] <broquaint> Nice. Thanks, gaal :)

[16:21] *** justatheory joined
[16:22] <svnbot6> r9364 | putter++ | Regexp-ReplaceEngine.pm - remove code obsoleted by new lexical scoping.

[16:22] <fglock> audreyt: "_not_ care about performance" - that's the hard part for me - I used to write in assembler :)

[16:23] *** awwaiid_ joined
[16:28] *** putter joined
[16:34] <bsb> ?eval macro M($a) { say $a; return q:code{} }; say(M(1+2)~"<")

[16:35] *** evalbot_9350 is now known as evalbot_9364

[16:35] <evalbot_9364> user error (unhandled elementYamlStr "~") pugs: *** cannot cast from VUndef to Handle (VHandle)     at <prelude> line 200, column 24-45        <prelude> line 224, column 13-25        <prelude> line 278, column 5-55        -e line 1, column 1 

[16:36] <TimToady> fglock: the P6 grammar is designed to not require much backtracking at all (unless you want to go back and give better diags), so I wouldn't sweat it.

[16:36] <fglock> TimToady: ok - it's mostly because I haven't implemented ':' yet :)

[16:37] <TimToady> fglock: in fact, if there's *any* place in the grammar that requires backtracking for a correct parse, I'd like to know about it...

[16:38] <fglock> TimToady: I'll maybe add a switch to disable backtracking or give a warning - so we'll know :)

[16:38] *** avar joined
[16:38] <TimToady> cool

[16:39] <TimToady> we even try to avoid alternation in favor of <%tokens>.

[16:39] *** Draconit_ joined
[16:40] *** Draconit_ left
[16:40] <TimToady> and <%tokens> is potentially the merge of several syntactic categories, so we don't have to say

[16:40] <putter> is there a target grammar category?  (in the parsing sense, not the p6 sense;)

[16:40] <TimToady> <%statements_control> | <%unaries> | <%terms>

[16:41] <fglock> TimToady: is there an existing Grammar file you would recommend as a start point?

[16:41] <TimToady> putter: don't understand what you're asking...

[16:41] * putter wonders what %unaries is

[16:42] <putter> LALR(1), etc

[16:42] <TimToady> s/unaries/prefix/

[16:42] <TimToady> + circumfix left side

[16:42] <putter> ah, ok

[16:42] <TimToady> Actually, circumfix could be considered a subset of terms.

[16:42] <putter> yes

[16:42] <putter> (i think)

[16:43] <TimToady> fglock: not that I'm aware of, unless Patrick has one.

[16:43] <TimToady> The approach we've been taking...

[16:43] *** marmic joined
[16:43] <TimToady> is to have a 3-layer parser.

[16:43] <TimToady> (well, where the 3rd layer is really fractal...)

[16:43] <TimToady> the top layer is top-down, down to expression level.

[16:44] <TimToady> the middle layer is a bottom-up operator precedence parser to avoid

[16:44] <TimToady> excessive recursion through 22 or so prec levels.

[16:44] <TimToady> each term can then be its own little top-down parser inside the token grabber for the op prec parser.

[16:45] <TimToady> I also worry about efficiency... :)

[16:45] <fglock> TimToady: :)

[16:46] <putter> the token grabber selects which term to use how?

[16:46] <TimToady> One of the additional reasons for installing the op-prec parser in the middle is to allow for added prec levels.

[16:47] <TimToady> but we don't necessarily need that for a bootstrap.

[16:47] <TimToady> Unless we actually add all of Perl 6's opcodes that way.

[16:48] <fglock> TimToady: the idea (so far) is to add all prims using sub or macro declarations

[16:48] <TimToady> <%mush_of_all_syntactic_categories_where_term_is_expected>

[16:49] <TimToady> which can have prec declarations, so we could add most prec levels that way, if the underlying prec architecture can support it.

[16:49] <putter> terms can have prec decls?

[16:51] <TimToady> terms by definition have a "squinting" prec that is infinitely tight looking out and infinitely loose looking in.  That's why circumfixes are so popular to represent visually the "surreal" precedence change.

[16:51] <Limbic_Region> TimToady - did you see http://perlmonks.org/index.pl?node_id=535263 (Perl 6 gets some press)?

[16:52] <Limbic_Region> which actually just mentions this article on p6 http://www.eweek.com/article2/0,1895,1932126,00.asp

[16:52] <bsb> the args to macros should always be ASTs, right?

[16:52] *** justatheory joined
[16:54] <fglock> What is the default precedence when you create a sub? (tighter than anything else?)

[16:54] <TimToady> bsb: depends on what the "is parsed" rule returns, and the signature declares, and whether they match.

[16:54] <TimToady> by default subs are list operators.

[16:55] <TimToady> except ($) is still unary op, last I checked.

[16:55] <TimToady> but that might be worth breaking...

[16:55] <fglock> TimToady: '$'?

[16:55] <TimToady> single scalar argument in P5-proto-speak.

[16:56] <bsb> I had an idea about using unary macros to do haskell's comma-less, tight, currying function calls...

[16:56] <TimToady> could be made to work.

[16:57] <bsb> is parsed gives the macro's grammar category, right?

[16:58] <TimToady> I believe at one time we made infix:<X> default to the same prec as infix:<+>, but lately I think we just require "is equiv" or some such.

[16:59] <fglock> bsb: macro infix:<xxx> ... - the grammar category comes before

[16:59] <TimToady> eh?  the grammatical category is part of the macro's name, or I'm misunderstanding your question.

[16:59] <putter> inside a circumfix, are the trailing tokens of surrounding circumfixi still tokens?

[17:00] <bsb> I might just slink away from that question and get to the thing that's confused me...

[17:00] <TimToady> The inner rule has to be parameterized to know what its terminators are, if they would be confused with inner tokens.

[17:01] <bsb> After talking to audreyt, I thought macro's arguments were always ASTs, but the macros in Prelude seem to expect normal values

[17:01] <TimToady> but usually any unbalanced bracket could be assumed to terminate.

[17:02] <TimToady> ASTs are certainly encouraged as the default, much as opaque objects are now the default in P6.  But we want to leave the hooks there to do something else.

[17:03] <bsb> That means the Prelude should probably revert to subs instead of macros for now

[17:04] <TimToady> terminator params might actually be one of the places we choose to backtrack rather than merging categories:

[17:04] <TimToady> <%terminators> | <%expect_term>

[17:05] <TimToady> since the merge would have to be redone on every subrule call.

[17:05] <fglock> TimToady: you mean rules inside 'is parsed' may need to take the terminator as a parameter in order to know where to finish macthing?

[17:05] <bsb> putter: ping

[17:06] <putter> circumfix:<+ +>    +(3+2)+  ?

[17:06] <putter> bsb: pong

[17:07] <TimToady> fglock: yep, if the rule is sufficiently antisocial to want conflicting things.

[17:08] <TimToady> though I see it's actually

[17:08] <bsb> gaal said you know about the macos in Prelude, can they be reverted to subs?

[17:08] <TimToady> <%terminators> | <%expect_operator> from the +...+ example.

[17:08] <fglock> TimToady: the problem is there can be any rule inside the 'is parsed' - and then all rules would need to check is this parameter is set

[17:09] <fglock> I mean, the macro parameter can be any rule

[17:09] <bsb> until we have macros params that can be ASTs or normal values

[17:09] <TimToady> yes, perhaps it's really something environmentally magical that all <%foo> just automatically track.

[17:09] *** GabrielVieira joined
[17:10] <fglock> TimToady: ok

[17:11] <TimToady> Anyway, for well behaved subrules, we can just assume trailing brackets for now, as long as we keep the generalization in mind.

[17:12] <fglock> TimToady: I don't see '^' in the example Grammars - is it automatic (to match on the start of the string)

[17:12] <TimToady> Maybe we can semi-generalize that to "stop on syntax error", but that bugs me a little, since there are real syntax errors as well as fake ones...

[17:13] <TimToady> subrules are always anchored on the left to where their parent rule called them.

[17:13] <TimToady> But some of them may also be marked :p to start at the current pos.

[17:14] <TimToady> but it's possible this will turn into a token vs rule distinction on the declaration itself.

[17:15] <TimToady> we also thought we could do smarter whitespace matching on the transition from a rule into a token as well.

[17:15] <fglock> TimToady: is 'token' a new keyword?

[17:15] <TimToady> conjectured.

[17:16] *** nothingmuch joined
[17:17] * putter fails to parse "subrules are always anchored on the left to where their parent rule called them. BUT some of them may also be marked :p to start at the current pos."  not equivalent sentences?

[17:17] <TimToady> Interestingly, I see a def for "token" in S06 but nothing discussing it...

[17:17] <nothingmuch> moose

[17:17] <gaal> wapiti

[17:17] <nothingmuch> i need someone with good english to look over my CV and help me rephrase all these stupid sentances with an I in them

[17:17] <nothingmuch> it looks like a vanity page

[17:18] <TimToady> not equivalent when the subrule is called directly rather than as a subrule.

[17:18] <gaal> where should `data CompUnit` live? I keep running into layering questions when I do things that are useful for both Prim and CodeGen

[17:18] <bsb> nothingmuch: Just refer to yourself as "Moose"

[17:18] <fglock> putter: :p is optional (that's not a tongue)

[17:18] <bsb> Moose was employed for 6 months as...

[17:18] <nothingmuch> bsb: shadaaaaap

[17:18] <gaal> what eventually happens is that that stuff is pushed to AST.Internals, everybody's favorite catch-all

[17:18] <putter> ah, ok

[17:19] <nothingmuch> anyway, it's spelled Møøse

[17:20] <TimToady> if we had a "token" keyword, it might autoanchor on both ends when called directly on a string rather than as a subrule, unlike :p which is currently specced as just the front anchor.  But it still needs some thought...

[17:20] *** Migo1 joined
[17:21] <putter> is there any conjectured nomenclature for token,definition-of vs token,instance-of?  (ie, class names:)

[17:21] <TimToady> well, if a rule is a Rule, then a token would be a Token, I expect.

[17:21] <nothingmuch> brb

[17:22] <TimToady> I've got to head off to $job now.

[17:23] <putter> thanks for the puzzle answers :)

[17:24] <TimToady> I don't know if they're answers, but maybe they're at least better questions.

[17:24] <TimToady> &

[17:24] <putter> bsb: re macros in Prelude,

[17:25] <bsb> yes

[17:26] <putter> use/require can (should? - i was just about to change it) be subs.  not because the really are, but because Parser.hs is handling making them macros (specifically, macros with an "is parsed"), as well as providing part of their implementation.

[17:26] <putter> so the change is strictly pragmatics

[17:26] <putter> because macros are having bug issues at the moment

[17:26] <putter> I'm not sure that one can do the same with the rx macros

[17:27] <putter> pondering...

[17:27] <fglock> bbiab

[17:27] <putter> fglock:

[17:27] <putter> how, big a bit?  had Deal thoughts

[17:27] <svnbot6> r9365 | fglock++ | lrep - even more Todo

[17:28] <fglock> putter: need to go grab forms for the phd thing ~1h

[17:28] *** p2501 joined
[17:28] <putter> k

[17:29] <putter> ntx

[17:29] <putter> *tnx

[17:29] *** fglock left
[17:30] <bsb> also, as the Prelude is written, it seems to want normal args instead of asts for the macros

[17:30] <bsb> ASTs are the default, and the syntax for the other forms is not clear yet

[17:31] <bsb> probably just ($x is Int) in the sig

[17:32] <putter> might work. # re rx_ things being subs

[17:34] <putter> not normal args, strings.  unless something has changed recently (in pugs), strings are still the default.  but could add Str to the signature, as long as it doesnt break something.

[17:35] <bsb> pugs incorrectly evaluated the macros args as a normal sub would

[17:36] <putter> i dont understand...

[17:37] <bsb> macro M($x) { return q:code {} }; M(say "hi"); # should do nothing

[17:37] <putter> some specific macro, macros in general (pre yaml and subsequent breakage), macros now (apparently broken)

[17:37] *** mj41__ joined
[17:37] <putter> AST returning macros are brand new and quite untested.

[17:38] <putter> and audreyt is fiddling with the macro implementation.

[17:38] <bsb> so were gaal & I

[17:38] <putter> right

[17:38] <putter> so nothing q:code {} does/doesnt do at the moment would surprise me :)

[17:39] <bsb> I've found some very interesting weirdness there

[17:39] <putter> but... what is the connection with the Prelude??  "macro's unstable, let's see if we can pull them form the Prelude for now?"

[17:39] <bsb> Including repeated evaluations of args

[17:40] <bsb> 2 connections: 1) unstable 2) the Prelude macros don't use the AST as default style

[17:40] <bsb> making it had to implement that

[17:40] <bsb> s/had/hard/

[17:41] <bsb> That's what gaal & I were trying to do

[17:42] * putter tries sub'ifying Prelude macros...

[17:43] <putter> so what's the plan, a  macro f(Str $s){} is a string taking macro, and macro f($a){} defaults to $ast?  and either can return q:code {}?

[17:44] <putter> the default seems odd to me, given that ast's are -much- harder to standardize and keep stable than a language spec, so there are likely to be multiple flavors of ast's, but only one flavor of string.  no?

[17:46] <bsb> Yes, I think, to the first question

[17:47] * gaal agrees with putter's observation about ASTs changing

[17:48] *** sandrina_l joined
[17:48] <bsb> I think the various shifting AST problem is avoided by treating them as opaque chunks for now

[17:49] <bsb> They can be returned, spliced into q:code and $ast.perl pretty printed, perhaps $ast.as(Str) -ed too

[17:50] <Juerd> c

[17:50] <Juerd> s/c//

[17:51] <putter> ok, use/require can be sub'ified.  the rx_ cannot (easily).  feel free to modify their signatures, or to rip out the parser patch which calls them (they are the beginning (no dependencies (or few, pil2js?)) of a development path which has been blocked for... well, a really long time (>1/2year)).

[17:52] <putter> ripping would probably speed up parsing too. ;)

[17:52] <putter> oh, hmm, i wonder if some of the rx functionality is now present only in the macros...

[17:54] <bsb> I haven't delved into the dependencies, wanted to check here first

[17:55] *** justatheory joined
[17:55] <putter> re functionality, it looks like at most a modifier might be lost, because something has ended up depending on rx_ conditioning them.

[17:56] *** Lorn joined
[17:56] <putter> that cover it?

[17:58] <bsb> I'm having weird Prelude+YAML issues so I'll have to get back to you

[18:01] *** p2501_ joined
[18:01] *** dduncan joined
[18:02] *** hexmode joined
[18:04] * putter sighs.  a couple of weeks of work, most of it no-side-benefit pugsbug dodging, and the entire net result has been 1/2 year of slower parsing. :(

[18:04] <putter> bbiab

[18:05] <TimToady> putter: on Str vs AST default, the thing is, you can potentially track tree transformations bidirectionally with ASTs, but as soon as you go to straight text, you're throwing away information you might need later to do, say, syntax highlighting or really good error messages.  Text macros are just source filters writ small...

[18:07] *** ruz joined
[18:07] *** fglock joined
[18:08] <bsb> and unevaluated args is part of what make macros special

[18:08] <bsb> gotta go, later &

[18:11] <fglock> putter: back

[18:11] *** p2501_ joined
[18:28] *** justatheory joined
[18:34] <audreyt> safely arrived to Leo's.

[18:34] <fglock> audreyt: hi!

[18:35] <audreyt> hey!

[18:35] <audreyt> I've grokked lrep

[18:35] <audreyt> amazing work!

[18:36] <fglock> audreyt: thanks - specially coming from you!

[18:36] <audreyt> :)

[18:36] <audreyt> we need better interfaces

[18:37] <PerlJam> What is lrep?

[18:37] <fglock> audreyt: interfaces? 

[18:37] <fglock> PerlJam: misc/pX/Common/lrep - very deep in the tree :)

[18:38] <TimToady> stands for Least Recursively Expressed Perl, or some such :)

[18:38] <audreyt> fglock: like, take p6rule.pl and promote it to Perl6::Rule

[18:38] <PerlJam> fglock: does that mean that lrep isn't amenable to a sound-bite-ish description or just that I should read the code?

[18:38] <PerlJam> :-)

[18:38] <audreyt> its README states that it stands for Lister Rubbish Eclectic Pathologically

[18:38] <dduncan> it may just be a transient error on my own machine, but building the latest pugs , generating prelude failed on internal error, WEAK object entered, saying report to haskell team

[18:39] <audreyt> dduncan: yes, I'm fixing it

[18:39] <dduncan> okay

[18:39] <fglock> TimToady: thanks - that fits exactly

[18:39] <audreyt> PerlJam: it's like the pugs in the first ~2 months -- but written in P5

[18:39] <dduncan> so if you see it, then its not just my machine

[18:39] <audreyt> PerlJam: but armed with Rules for parsing instead of Parsec

[18:39] <PerlJam> audreyt: ah.  Now that's awesome!

[18:40] <PerlJam> trebly so!

[18:40] <Juerd> audreyt: That's a first generation backronym ;)

[18:40] <audreyt> fglock: by "better interface" I mean "develop each part in the style of reusable CPAN modules"

[18:41] <audreyt> fglock: I imagine a lot of perl5 folks will like to deploy the Rules iterator engine, even if they don't care about p6 in general

[18:41] <audreyt> with luck it may even make into one of the Perl 5.10 "feature.pm" sets

[18:41] *** nothingmuch joined
[18:41] <nothingmuch> moosen

[18:41] <audreyt> use feature "rules"; # enables Regexp-Engine-Replace

[18:42] <audreyt> (or just enables rx// quoting)

[18:42] <fglock> audreyt: oh, that makes sense - pmurias is helping with that, and putter is actually implementing the ultra-low-level stuff

[18:43] <TimToady> (though rx'' already quotes...)

[18:43] <fglock> audreyt: I'd like to have more info on how Pugs separates the module roles, so that I can follow the same structure - does it makes sense, or should it be reinvented?

[18:43] <mauke> Bad name after rx' at -e line 1.

[18:44] <audreyt> m'' quotes, yeah

[18:44] <audreyt> but I don't know, I sorta like the idea of a separate rx// for Rules

[18:44] <audreyt> instead of lexically tweak what m// means

[18:44] <audreyt> (this is in p5)

[18:44] <TimToady> right, I'm not against tweaking P5.

[18:45] <putter> back

[18:45] <audreyt> well, sure, seeing that you are the mad tweaker here... :)

[18:45] <audreyt> putter: hey

[18:45] <putter> hi

[18:46] <fglock> audreyt: Perl6::Rules is taken. How about Perl6::Lrep::*

[18:47] <putter> (hmm, if ast nodes stringify to code, are they source macros?;)   and overload ~, and...

[18:47] <audreyt> I imagine Perl6::Rule is not taken

[18:47] <audreyt> Perl6::Grammar neither

[18:47] <fglock> audreyt: Perl6::Grammar is much better

[18:47] <audreyt> Perl6::Grammar then

[18:48] <audreyt> my idea is that the runtime parts -- the part that will _stay_ in Perl5 even when we have full perl6boot -- belongs in Perl6::* namespace

[18:48] <fglock> audreyt: so there are no problems if Perl 6 depends on CPAN perl5 modules?

[18:48] <audreyt> I think it should depend on as many module as possible.

[18:49] <audreyt> <- SVK, Jifty, Kwiki developer

[18:49] <putter> Please please please can we not go down the p5 naming route of naming something which will inevitably have multiple implementations by a generic term?  Perl::Editor.  Perl6::Rules.   Class::Multimethods. arg.

[18:49] <audreyt> putter: you are for prefix, then?

[18:49] <fglock> audreyt: It is ready then :) just kidding - 

[18:50] <fglock> how about a plug-in style API for parser, optimizer, etc

[18:50] <audreyt> putter: something like Pugs::Grammar or PX::Grammar?

[18:50] <putter> Perl6::Rules::Foo or Perl6::Grammar::Foo is great.  but the "hey, Perl6::Rules is taken, so let's call it Perl6::Rule" is part of what makes CPAN a mess.

[18:50] <putter> (pet peeve;)

[18:51] <audreyt> putter: "Perl6::Rules is taken, let's write damian to take over it"

[18:51] <audreyt> (would be my first reaction)

[18:51] <nothingmuch> i think so too

[18:51] <fglock> audreyt, putter: agreed - Perl6::Grammar::Lrep for the current implementation - but the main program should use a plug-in struct so that anyone can do it's own implementation

[18:51] <nothingmuch> IIRC p6::rules was sort of abandoned

[18:51] <PerlJam> I wonder if most of what is current in Perl6:: should really be in Perl6Prototype::  (not that that'd ever happen)

[18:52] <PerlJam> Some if it is just proof-of-concept stuff while other parts are "this is useable"

[18:53] <Juerd> Much of CPAN naming makes no sense, or doesn't make sense anymore.

[18:53] <fglock> 'p6 --grammar=lrep --emit=yaml'

[18:53] <putter> I'm not suggesting Perl6::Rules go away.   I'm hoping for a naming scheme which doesn't leave people searching for modules in their current state of "there's an obvious name for what I want to do.  indeed, there is a module with that name.  but I want a different implementation.  let me pull out my thesaurus and stemmer and attempt to find them".

[18:53] <nothingmuch> Array::Heap2 is my fav

[18:53] <Juerd> The "hierarchy" itself is broken in so many ways, that you can't really expect people to follow it, I think.

[18:53] <fglock> no need to go away - Perl6::Rules::Lrep is free

[18:53] <FurnaceBoy> yep.

[18:54] <nothingmuch> Array::Heap doesn't exist, but the name is parked by Jon Orwant iirc

[18:54] <putter> err, s/I'm not suggesting Perl6::Rules go away./I'm not suggesting Perl6::Rules not go away./ ;)

[18:54] <nothingmuch> as one of the MAPL spinoff modules that was not quite finished

[18:55] <fglock> anyway, Perl6::Rules may actually be useable - and Parse::RecDescent too

[18:55] <fglock> all we need is a plug-in API

[18:56] <TimToady> It seems to me that Perl6:: is the prefix that indicates various modules that are *not* expected to interoperate.  Maybe a different prefix would indicate modules that are expected to interoperate.

[18:56] <fglock> or a base Class

[18:56] <putter> Perl6::Rules should become the root of an organizational hierarchy, not some specific implementation.  my $0.02.

[18:57] <fglock> TimToady: Lrep::* / Pugs::Lrep::* ?

[18:57] <Juerd> Interoperate:: :)

[18:57] <Juerd> IO::, in short ;)

[18:57] <TimToady> dunno.  Just Perl6 has Acme-ish connotations at the moment.

[18:57] <Juerd> TimToady: Indeed. And that affects the image of Perl 6 too.

[18:57] <audreyt> I really think Pugs::Runtime or something like it is more accurate than Lrep :)

[18:58] <audreyt> (as the module name, not the project name)

[18:58] <fglock> we can safely hack on Acme::Perl6::* and nobody would notice

[18:58] <audreyt> Bundle::Meta::Acme::Perl6

[18:58] <fglock> audreyt: Pugs::Runtime ++

[18:59] <TimToady> Pugsy::

[18:59] <Juerd> TimToady: I personally think it would be good to ask the Perl6:: authors of modules that are just proofs of concepts (anything using source filters), to rename their modules. On the other hand, changing names is dangerous...

[18:59] <fglock> audreyt: except that it includes compile time

[18:59] <audreyt> or, hell, there's no Pugs::* anything yet

[18:59] <audreyt> so let's just use that

[18:59] <audreyt> Pugs::Grammar, Pugs::Optimizer

[18:59] <fglock> audreyt: ++

[18:59] <Juerd> audreyt: And maybe, Pugs::Prelude?

[18:59] <audreyt> aye

[18:59] <Juerd> audreyt: Which would be nice on CPAN, I think :)

[19:00] <audreyt> yeah.

[19:00] <fglock> audreyt: how about the plug-in thing?

[19:00] <audreyt> fglock: follow the Module::Pluggable tradition

[19:00] <audreyt> Pugs::Optimizer::Plugins::ThisPluginName

[19:00] <nothingmuch> what about freepan?

[19:00] <nothingmuch> isn't that singular Plugin?

[19:00] <audreyt> right.

[19:00] <audreyt> so, what to do with lib/pugs/run.pod ?

[19:01] <audreyt> and hack.pod

[19:01] <putter> oh, yeah, before I turn into a pumpkin, potentially netless for a few days, that's my main reaction to Deal,

[19:01] <nothingmuch> so, no english volunteers?

[19:01] <audreyt> can we merge both back to Pugs.pod (for now)?

[19:01] <fglock> audreyt: Pugs::Doc(s)

[19:01] <audreyt> Pugs::Doc::Run

[19:01] <putter> Perl6 alpha will be mostly written in p6.  pugs+pil2js+pX+whatever.

[19:02] <putter> That p6 mostly doesnt exist yet.

[19:02] <putter> If it existed, it would actually not be tremendously difficult to do new backends, even from scratch.

[19:03] <fglock> putter: not only backends, but compilers, optimizers

[19:03] <putter> Now, when doing a backend, you have to simultaneously write that p6, which also means figuring out/disambiguating/making up a p6 spec.  Which all take far more time than actually doing the backend. ;)

[19:03] <nothingmuch> you're all mean

[19:03] <nothingmuch> you don't love me at all

[19:04] <kolibrie> nothingmuch: we just don't think we speak English

[19:04] * nothingmuch bops kolibrie

[19:04] * kolibrie ducks

[19:04] * nothingmuch kicks kolibrie while he's on the floor

[19:04] <kolibrie> nothingmuch: url?

[19:05] <fglock> nothingmuch: you mean - about the CV? 

[19:05] <nothingmuch> fglock: yes

[19:05] <putter> fglock: right, not just backend.  parser, compiler, emitter, runtime, object space.  the whole thing.

[19:06] * kolibrie catches url offline

[19:06] <svnbot6> r9366 | audreyt++ | * rename pugs::run and pugs::hack to Pugs::Doc::Run

[19:06] <svnbot6> r9366 | audreyt++ |   and Pugs::Doc::Hack, for the Great Pugs Hierarchy.

[19:06] <audreyt> fglock: okay. so move pX things over -- for non-perl6-pugs-specific things, like the iterator engine

[19:06] <fglock> nothingmuch: I can help you with portuguese

[19:06] <audreyt> you can still call it Pugs::Grammar and put into lib/Pugs/Grammar.pm

[19:06] <fglock> audreyt: which /dir?

[19:07] <audreyt> or if you want to distinguish components more

[19:07] <audreyt> lib/Pugs/Runtime/Grammar.pm

[19:07] <nothingmuch> fglock: my sister might like help with her portuguese

[19:07] <audreyt> or if you are not unhappy with the Perl6 acmeness

[19:07] <audreyt> then lib/Perl6/Grammar.pm

[19:07] <putter> The drive spec schrodinger collapse with pugs and pil2js and pilrun has been great.  but i suggest at this point, it's no longer the optimal path.  if we could get some folks simply nailing down the spec, that would free up implementation efforts to simply implement.  

[19:07] <fglock> audreyt: ok!

[19:08] <TimToady> oops.

[19:08] <putter> nailing down spec == reading spec, making up all the questions you can think of, writing them down, getting them answered or approximated, and writing the answers.

[19:08] <audreyt> (aka, ghost-writing)

[19:08] <TimToady> Entirely coincidental, but I'm outta here.  (To see the dentist, again.)

[19:08] <audreyt> rofl

[19:09] <audreyt> TimToady: see ya :)

[19:09] <TimToady> later, let's all have the appropriate amount of fun :/  &

[19:09] <putter> day1 9:00am of pugs alpha development: write down object hierarchy.  day 1 9:15 of pugs alpha development: realize one doesnt exist yet, and shut down alpha development to write one. ;)

[19:10] <putter> bye

[19:10] <PerlJam> writing a spec isn't development?  :)

[19:10] <putter> audreyt ghosting ++

[19:11] <audreyt> I'll bbiab too, dinner with leo

[19:12] <audreyt> fglock: continue in this vein, maybe docs/Perl6/* should be moved to lib/Perl6/*

[19:12] <audreyt> but I'll ponder about it after dinner

[19:12] <audreyt> see you in ~30min &

[19:12] <putter> audreyt: so there's a question, what would help your ghosting?  how can warm bodies help?

[19:15] * nothingmuch ponders going to tea guru's house for tea

[19:18] <putter> PerlJam: writing language spec has very different characteristics (time frame, who needs to be involved, how) then language implementing.  their is unavoidably overlap, even in mature languages.  but right now there's too much "oh, you want an On Button" thought only happening when an implementation tries to do things.

[19:19] <putter> "tea guru"?

[19:19] <nothingmuch> he's this guy i know

[19:19] <putter> ah :)

[19:19] <nothingmuch> who likes tea

[19:19] <nothingmuch> and knows about it more than I do

[19:20] <PerlJam> nothingmuch: it's odd that you would mention tea since I'm sitting here sipping some right now  :)

[19:20] *** netanya_goy joined
[19:21] <nothingmuch> PerlJam: what kind?

[19:21] <nothingmuch> ooh! rain! finally

[19:21] <nothingmuch> we had a bit of it earlier

[19:21] <fglock> putter: re ping 2hr ago - how about the Deal thing

[19:21] <putter> oh, that was it ;)

[19:22] <nothingmuch> putter: so do we have a deal?

[19:22] <fglock> :)

[19:22] <putter> main point is biggest current task, and bottleneck on all projects, is the absence of p6 code.

[19:22] <putter> :)

[19:22] <nothingmuch> yes, i agree

[19:23] <fglock> putter: "absence of p6 code" = no real world things to try the spec on?

[19:24] <putter> one of the things I like about lrep, is, for example, at some point the p5 rules stuff will mature to the point where I'll turn around and say, "great, I need a working p6 rules grammar, anyone have one?".

[19:25] <fglock> putter: "I need a working p5 grammar" - after some years

[19:25] <putter>  "absence of p6 code" == no one has written a grammar for p6 rules, in a real p6 style (ie, terms, etc), which seems likely the easiest style for new implementations to boostrap.  nor p6 parser grammar.  nor object space.

[19:26] <fglock> btw - I need a working p6 rules grammar, anyone have one?

[19:26] <putter> lol :)

[19:27] <fglock> object space = the set of Classes ("high level prims") ?

[19:27] <putter> caveat that bootstrap may become less important once some p6 rules parser, any p6 rules parser, can do a p6 rules ast.  then the easiest path to new implementations might be to just clone the ast, and do an emitter.

[19:27] <putter> yes

[19:28] <fglock> putter: exactly - I was discussing this with audreyt a few hours ago

[19:28] <putter> the "day 1 9am" wasn't entirely a joke.  the pilrun2 development process looked a lot like that.

[19:28] <fglock> putter: and I'll start working on it asap (but not now - I want to do the bootstrapping stuff)

[19:29] <putter> :)

[19:29] *** Southen joined
[19:29] <fglock> putter: that's why I need a plug-in structure 

[19:30] <fglock> putter: so that people can try out different grammars, etc

[19:31] <putter> so, anyone one want to imagine they have a working p6 system, which just happens to be unavailable at the moment, and sit down to write the p6 object space (in p6 of course).

[19:31] <fglock> putter: I really need ideas for inter-module communication API - possibly just using OO is ok

[19:31] <putter> ?

[19:31] <putter> "?" was "anyone?" .  re plugin,

[19:31] *** arcady2 joined
[19:32] <fglock> putter: parser <=> optimizer <=> emitter

[19:32] <fglock> putter: re anyone - people have been using parse::RecDescent for years - at least these people...

[19:32] <fglock> putter: although I never used it :)

[19:33] <fglock> putter: re sit down and write - yes!

[19:34] <putter> one possibility would be to focus on lrep, thinking modular simply as good design, and then worry about plugginness later.  just because doing a pluggin api can make it harder to alter design, so can be costly if it happens too soon

[19:34] <fglock> 'p6 --object-space=putter ...'

[19:34] <fglock> putter: ok

[19:36] * putter wants a file which starts  type Any... continues through class Num... and multi infix:<~~>... and ends with $*PUGS_WELCOME_MESSAGE = "...".  ;)

[19:38] <fglock> putter: how about writing an example file? it really helps knowing what people want :)

[19:38] <fglock> lrep/p6object_space.p6

[19:38] <putter> there is a nice table saying what ~~ means.  been there and stable for a long time.  p6 is a nice language.  why dont we have a p6 version of that table?

[19:39] *** stevan joined
[19:39] <fglock> putter: is it Haskell? reusing is good

[19:39] <audreyt> stevan: hi!

[19:39] <putter> re example file, good idea.  really good idea.

[19:39] *** justatheory joined
[19:39] <stevan> hey audreyt 

[19:40] <audreyt> http://search.cpan.org/~nwclark/perl-5.8.7/pod/perlsyn.pod#Smart_Matching_in_Detail

[19:40] <audreyt> er I mean

[19:40] <audreyt> http://search.cpan.org/dist/perl-5.9.3/pod/perlsyn.pod#Smart_matching_in_detail

[19:40] <putter> hi stevan.  just now flaming the lack of a p6 object space written in p6.  or operators.  or operator parsers.  or... most everything.  we've remarkably little p6 code.

[19:41] <audreyt> stevan: you missed the Great Namespace Acquisition :)

[19:41] <stevan> putter: have you looked in the perl5/Perl6-ObjectSpace ?

[19:41] * stevan leaves for a few hours and all hell breaks loose :P

[19:41] <putter> lol

[19:42] <audreyt> stevan: the pX/ie/lrep code will now move to lib/Pugs/*

[19:42] <audreyt> as in, Pugs::Grammar for the grammar engine

[19:42] <audreyt> and whatever code that supports the p6 runtime can be moved from perl5/Perl6-* into lib/Pugs/*

[19:42] <stevan> putter: if you look in the Perl6-ObjectSpace, I think it is Bootstrap.pm file, it has s-expr and p6 versions of many metamodel methods inside POD comments

[19:42] <audreyt> we're doing a CPAN module now :)

[19:43] <audreyt> named, incidentally, Pugs.pm

[19:43] <stevan> audreyt: nice :)

[19:43] <fglock> audreyt: lib/Pugs == /lib/Pugs ?

[19:43] <fglock> ok

[19:43] <audreyt> fglock: yes.

[19:44] * putter attempts to read lrep/p6object_space.p6.  not found.  svn up's.  still not found.  realizes it was just a name.  very sad.

[19:44] <audreyt> putter: you need a time machine

[19:44] <fglock> audreyt: what goes in Pugs.pm ? - who is "we?" :)

[19:45] <audreyt> fglock: we as in, people who commit to lib/Pugs

[19:45] <audreyt> fglock: Pugs.pm should probably be the toplevel API switches

[19:45] <audreyt> use Pugs; Pugs->parse("...some perl 6 code here...")?

[19:46] <audreyt> or maybe a new environment allocated with Pugs->new; ?

[19:47] <fglock> audreyt: ok! - you are too fast - I was still thinking how to move things :)

[19:47] <svnbot6> r9367 | fglock++ | * p6object_space.p6

[19:47] <audreyt> putter: see? time machine consists of "sleep 180;"

[19:47] <fglock> audreyt: a new environment would be nice - people may want to compile a different language, whatever

[19:48] <audreyt> *nod*

[19:48] <audreyt> I'd like to have a switch that allows writing perl6 code within a perl5 module

[19:48] <fglock> and the parameters to new can be: lib=>[], parser=>[] ...

[19:48] <putter> stevan: yes, but.  I want a clean p6 implementation which assumes the existance of a complete p6 implementation.  " putter wants a file which starts type Any... continues through class Num... and multi infix:<~~>... and ends with $*PUGS_WELCOME_MESSAGE = "..."."

[19:49] <fglock> audreyt: I can make an Inline:: thing

[19:49] <putter> lol # time machine

[19:49] <audreyt> fglock: we already ahve lib/Inline/Pugs

[19:49] <audreyt> fglock: but I want a srcfilter

[19:50] <fglock> audreyt: Inline::Pugs::PP for PurePerl

[19:50] <audreyt> fglock: but I think the Inline API sucks

[19:50] <audreyt> (with all due respect to ingy)

[19:50] <putter> (oh very much yes)

[19:51] <audreyt> { use Perl-6.0; ... write some perl code ... }

[19:51] <audreyt> is the API I'd like

[19:51] <fglock> audreyt: how about eval( '...', {lang=> 'Pugs' } )

[19:51] <putter> (though it exists, and EngineReplace wouldnt exist without it, which forgives many sins)

[19:51] <audreyt> it's even easy

[19:52] <audreyt> just have a Perl.pm

[19:52] <audreyt> with import that detects "-6.0"

[19:52] <audreyt> or rather -6

[19:52] <putter> yes, it is:)  # easy

[19:52] * putter loves %^H.  which he knew about it years ago.

[19:52] <putter> s/which/wishes/

[19:52] <audreyt> it's extremely gonzo though, having Perl.pm -- it's like the ultimate violation of CPAN namespace guidelines :)

[19:52] <putter> lol

[19:53] <fglock> audreyt: isn't it 'use v6' ? --> 'v6.pm'

[19:53] <putter> yes

[19:53] <audreyt> no, that gets caught in the lexer

[19:53] <audreyt> S11 has the

[19:53] <audreyt> use Perl-6.0

[19:53] <audreyt> form

[19:53] <putter> really... oh, right

[19:54] <audreyt> "use v6" is short for "use Perl-6" according to S11.

[19:54] <putter> (i think the question was in perl5 space)

[19:54] <audreyt> (I think we should have a p6 file that's both valid p5 and p6)

[19:54] <audreyt> makes it easier to switch to pure-perl6 boot

[19:55] <putter> http://www.vendian.org/mncharity/dir3/multilang/file/

[19:55] <Juerd> That reminds me (I see "both" and "boot" close to eachother, which makes "booth")

[19:55] <audreyt> so, in order to not upset the CPAN police

[19:55] <audreyt> use Pugs::Perl-6.0; # maybe something like this.

[19:55] <putter> agreed

[19:56] <Juerd> audreyt: rafl and I had a half idea about maybe trying to organize an entire Perl 6 track on froscon.

[19:56] <putter> use Perl6 6-0; ?

[19:56] <putter> err, 6.0

[19:56] * fglock head explode - tooo many days brainstorming

[19:56] <Juerd> audreyt: As we all know that there's lots and lots to tell about Perl 6, pugs, parrot, etcetera. 

[19:56] <audreyt> Juerd: nod

[19:56] <audreyt> putter: 

[19:56] <audreyt> use Perl6.0;

[19:56] <audreyt> I think that works.

[19:57] <Juerd> audreyt: You have a good overview - do you think other (non-Perl) people would be entertained? Many subprojects are interesting for other developers and software fanatics too.

[19:57] <audreyt> or, if we don't care about the CPAN police, we can go with "use Perl-6.0" -- which already exists on CPAN in version 0.03 ( http://search.cpan.org/~bmorrow/PerlInterp-0.03/Perl.pm )-- and will be usurped ;)

[19:57] <audreyt> Juerd: I think so, yeah

[19:59] <putter> re overall package naming, it could be good for someone, anyone, to sit down an write a strawman story about what goes where.  then paste it, and we can go from there.

[19:59] <Juerd> audreyt: Could you use your blog to plug the idea, and to ask people who think they can say something interesting in the form of a talk, to contact me?

[19:59] <audreyt> Juerd: I can if you supply me more details than this

[19:59] <audreyt> (bounce me an email, perhaps)

[20:00] <putter> could someone drop audreyt's link to the ~~ table, and "implement it in p6" task, in TASKS?  tnx.  just about out of time.

[20:00] <fglock> audreyt: re CPAN - will Pugs and Perl6::Pugs be separate packages? 

[20:00] <audreyt> putter: nothingmuch had one.

[20:00] <audreyt> fglock: Perl6::Pugs will get renamed to Pugs.

[20:00] <Juerd> audreyt: Will do tomorrow

[20:01] <Juerd> audreyt: tia

[20:01] <fglock> audreyt: but isn't perl5 pugs have a much shorter release time? (binary Pugs is just too big)

[20:01] <audreyt> putter: it's in docs/Hierarchy.pod -- but we'll see

[20:02] <audreyt> putter: it needs some reformat -- I'll work on a story

[20:02] <audreyt> fglock: not sure what you mean here

[20:02] <putter> cheers.  may not have net for a couple of days.  back by the 12th.

[20:02] <putter> re story, awesome :)

[20:03] <audreyt> fglock: you mean the tarball at 2+MB

[20:03] <audreyt> is too big

[20:03] <audreyt> or that we have too many tests to releng for each release?

[20:03] <putter> have... more than the anticipated amount of fun ;)

[20:03] <putter> &

[20:03] <audreyt> "Unexpected fun encountered. Continue? [Yy]"

[20:04] *** putter joined
[20:04] *** justatheory joined
[20:04] <fglock> audreyt: I mean, the self-hosting version will be very small - it could be downloaded separately (maybe just bundle it in a sub-package)

[20:04] <fglock> audreyt: :)

[20:04] <putter> just want to say - this has been/is really a blast.  audreyt, everyone, my thanks :) &

[20:05] <audreyt> putter++ # started this pX revolution thing

[20:05] <stevan> wow,.. if putter had this much fun,.. I need to backlog

[20:05] <fglock> putter: :)

[20:05] <audreyt> so, I think gobby sessions are in order. :)

[20:05] <fglock> gobby?

[20:05] <audreyt> (last time I SEE'ed with stevan to get ObjSpace v0 nailed down)

[20:06] <audreyt> seems we can really use something like that now

[20:06] <audreyt> (or tomorrow)

[20:06] <audreyt> http://gobby.0x539.de/

[20:07] <audreyt> so, for inlining: I think we go with "use Inline::Perl-6.0"

[20:07] <audreyt> but instead of using the Inline API

[20:07] <audreyt> just allow it lexically

[20:08] <fglock> audreyt: shoudl I install it? still have ~3hours

[20:08] <audreyt> fglock: sure!

[20:08] <fglock> ok!

[20:08] <audreyt> but hm, ingy may get upset with this abuse of Inline namespace

[20:08] <integral> Filter::Perl6 :-/

[20:08] <audreyt> use Pugs-inline; say "Hello!";

[20:10] <audreyt> integral: yeah, that's canonical, isn't it :/

[20:10] <fglock> re p5/p6 file naming - lib6/*.pl or lib/*.p6

[20:12] <audreyt> fglock: lib6/ seems more accurate

[20:12] <audreyt> lib6/*.pm even.

[20:13] *** mj41__ joined
[20:16] *** hlen joined
[20:16] <fglock> audreyt: gobby downloaded...

[20:17] <fglock> audreyt: create session?

[20:18] <audreyt> fglock: do you have a public-facing IP?

[20:19] <fglock> audreyt: I can get one, but it I'll have to reinstall - can I just connect to you instead?

[20:20] <audreyt> hm

[20:20] <audreyt> sec

[20:20] <fglock> audreyt: I'm moving to an external ip - if it works, all is good

[20:21] <audreyt> try connect to perlcabal.org

[20:21] <audreyt> hm nvm, it doesn't work

[20:21] <audreyt> I'll wait for you

[20:22] <fglock> audreyt: how do I open my X - xhost something...

[20:22] <audreyt> er, no idea

[20:23] <audreyt> Juerd: I'm opening up port 6522 on feather for gobby.

[20:23] <audreyt> fglock: try connect to perlcabal.org first?

[20:24] <fglock> audreyt: entered in feathers gobby already

[20:24] <audreyt> try reconnect

[20:24] <fglock> audreyt: yup - I connected through ssh

[20:24] <audreyt> oh ok

[20:24] <Juerd> audreyt: Opening up unused ports is always okay if they're > 1024 and not in between 8000 and 8250 :)

[20:24] <fglock> audreyt: it works - very slowly

[20:24] *** mj41___ joined
[20:25] <fglock> audreyt: should I connect from my local computer's gobby to perlcabal? doing

[20:25] <audreyt> yes.

[20:26] <audreyt> (all #perl6 folks are welcome to join)

[20:26] <fglock> audreyt: it dies (ubuntu + debians gobby)

[20:27] <audreyt> 0.3.0?

[20:27] <fglock> 0.2.2

[20:27] <fglock> I'll try from unstable

[20:27] <Juerd> fglock: 0.3.0 is in dapper

[20:27] <Juerd> I'm apt-get installing it atm

[20:27] <fglock> dapper?

[20:30] <fglock> bbiab - meeting

[20:31] <Juerd> fglock: Dapper Drake, the next version after Breezy Badger

[20:31] <Juerd> fglock: Will be released next month

[20:31] <fglock> back :)

[20:31] <mj41___> hello, are there lib\Pugs and lib\pugs in the repository? .... i can't svn up :-(

[20:31] <mj41___> win32

[20:32] <mj41___> object of the same name already exists

[20:33] *** rindolf joined
[20:33] <rindolf> Hi all!

[20:33] <rindolf> I'm no longer looking for kane-xs - he already replied to me.

[20:33] <rindolf> Heh.

[20:33] <rindolf> kane-xs++

[20:34] <rindolf> In any case, from what I understand in Perl6 "," has tighter precendence than "=".

[20:34] <rindolf> So why does my @a = 1,2,3; puts (1,2,3) into @a ?

[20:34] <rindolf> audreyt: here?

[20:35] <Juerd> rindolf: See S03

[20:35] <rindolf> Juerd: Synposis 03?

[20:35] <Juerd> rindolf: Yes.

[20:35] <rindolf> Juerd: OK.

[20:36] <Juerd> rindolf: After all the investigation needed to write a freshmeat article on Perl 6, you already know such things.

[20:36] <nothingmuch> audreyt: ping

[20:38] <dduncan> fyi, the newer r9367 builds for me

[20:40] <rindolf> Juerd: do you mean http://www.perl.com/pub/a/2004/03/18/synopsis3.html ?

[20:40] <fglock> audreyt: no way in ubuntu - trying again in windows...

[20:40] <Juerd> rindolf: I mean the current synopsis 3, not that of years ago.

[20:41] <rindolf> Juerd: ah, I see.

[20:42] <Juerd> rindolf: Let me help you: http://dev.perl.org/perl6/doc/design/syn/S03.html

[20:48] <audreyt> ouch, netsplit

[20:52] *** audreyt joined
[20:52] *** nnunley joined
[20:52] *** rindolf joined
[20:52] *** mj41___ joined
[20:52] *** hlen joined
[20:52] *** stevan joined
[20:52] *** Southen joined
[20:52] *** netanya_goy joined
[20:52] *** nothingmuch joined
[20:52] *** fglock joined
[20:52] *** ruz joined
[20:52] *** hexmode joined
[20:52] *** dduncan joined
[20:52] *** Lorn joined
[20:52] *** Migo1 joined
[20:52] *** GabrielVieira joined
[20:52] *** awwaiid_ joined
[20:52] *** FurnaceBoy joined
[20:52] *** chris2 joined
[20:52] *** drbean joined
[20:52] *** elmex joined
[20:52] *** rgs joined
[20:52] *** kolibrie joined
[20:52] *** Limbic_Region joined
[20:52] *** iblechbot joined
[20:52] *** gaal joined
[20:52] *** Gothmog_ joined
[20:52] *** Kattana joined
[20:52] *** GeJ joined
[20:52] *** Steve_p joined
[20:52] *** p5evalbot joined
[20:52] *** Odin- joined
[20:52] *** kanru joined
[20:52] *** robkinyon joined
[20:52] *** DesreveR joined
[20:52] *** f0rth joined
[20:52] *** Bit-Man joined
[20:52] *** SamB joined
[20:52] *** Maddingue_ joined
[20:52] *** mauke joined
[20:52] *** Ara4n joined
[20:52] *** whiteg joined
[20:52] *** lisppaste3 joined
[20:52] *** mako132 joined
[20:52] *** integral joined
[20:52] *** kane-xs joined
[20:52] *** xern joined
[20:52] *** ayrnieu joined
[20:52] *** TimToady joined
[20:53] *** wilx joined
[20:53] *** meppl joined
[20:53] *** Khisanth joined
[20:53] *** kakos joined
[20:53] *** mugwump joined
[20:53] *** lampus joined
[20:53] *** miyagawa joined
[20:53] *** Daveman joined
[20:53] *** lypanov joined
[20:53] *** svnbot6 joined
[20:53] *** orafu joined
[20:53] *** Supaplex joined
[20:53] *** clkao joined
[20:53] *** ajs_home joined
[20:53] *** pjcj joined
[20:53] *** evalbot_9364 joined
[20:53] *** stennie joined
[20:53] *** mtve joined
[20:53] *** shric joined
[20:53] *** amv joined
[20:53] *** tewk joined
[20:53] *** szbalint joined
[20:53] *** Shabble joined
[20:53] *** sky_ joined
[20:53] *** rafl joined
[20:53] *** spinclad joined
[20:53] *** arcady joined
[20:53] *** Grrrr joined
[20:53] *** lumi joined
[20:53] *** jvoorhis joined
[20:53] *** gugod joined
[20:53] *** arguile joined
[20:53] *** azuroth joined
[20:53] *** cookys joined
[20:53] *** jp-autark joined
[20:53] *** comet^ joined
[20:53] *** hcchien joined
[20:53] *** dvtoo joined
[20:53] *** Eimi joined
[20:53] *** geoffb joined
[20:53] *** sahadev joined
[20:53] *** perlbot joined
[20:53] *** locksy joined
[20:53] *** sri_ joined
[20:53] *** kcwu joined
[20:53] *** xerox joined
[20:53] *** obra joined
[20:53] *** knewt joined
[20:53] *** ntgrl joined
[20:53] *** ycheng joined
[20:53] *** LCamel joined
[20:53] *** ingy joined
[20:53] *** jiing joined
[20:53] *** buu_ joined
[20:54] *** jjore joined
[20:54] *** buu_ joined
[20:54] *** jiing joined
[20:54] *** audreyt joined
[20:54] *** nnunley joined
[20:54] *** rindolf joined
[20:54] *** mj41___ joined
[20:54] *** hlen joined
[20:54] *** stevan joined
[20:54] *** Southen joined
[20:54] *** netanya_goy joined
[20:54] *** nothingmuch joined
[20:54] *** fglock joined
[20:54] *** ruz joined
[20:54] *** hexmode joined
[20:54] *** dduncan joined
[20:54] *** Lorn joined
[20:54] *** Migo1 joined
[20:54] *** GabrielVieira joined
[20:54] *** awwaiid_ joined
[20:54] *** FurnaceBoy joined
[20:54] *** chris2 joined
[20:54] *** drbean joined
[20:54] *** elmex joined
[20:54] *** rgs joined
[20:54] *** kolibrie joined
[20:54] *** Limbic_Region joined
[20:54] *** iblechbot joined
[20:54] *** gaal joined
[20:54] *** Gothmog_ joined
[20:54] *** Kattana joined
[20:54] *** GeJ joined
[20:54] *** ingy joined
[20:54] *** LCamel joined
[20:54] *** ycheng joined
[20:54] *** ntgrl joined
[20:54] *** knewt joined
[20:54] *** obra joined
[20:54] *** xerox joined
[20:54] *** kcwu joined
[20:54] *** sri_ joined
[20:54] *** locksy joined
[20:54] *** perlbot joined
[20:54] *** sahadev joined
[20:54] *** geoffb joined
[20:54] *** Eimi joined
[20:54] *** dvtoo joined
[20:54] *** hcchien joined
[20:54] *** comet^ joined
[20:54] *** jp-autark joined
[20:54] *** cookys joined
[20:54] *** azuroth joined
[20:54] *** arguile joined
[20:54] *** gugod joined
[20:54] *** jvoorhis joined
[20:54] *** lumi joined
[20:54] *** Grrrr joined
[20:54] *** arcady joined
[20:54] *** spinclad joined
[20:54] *** rafl joined
[20:54] *** sky_ joined
[20:54] *** Shabble joined
[20:54] *** szbalint joined
[20:54] *** tewk joined
[20:54] *** amv joined
[20:54] *** shric joined
[20:54] *** mtve joined
[20:54] *** stennie joined
[20:54] *** evalbot_9364 joined
[20:54] *** pjcj joined
[20:54] *** ajs_home joined
[20:54] *** clkao joined
[20:54] *** Supaplex joined
[20:54] *** orafu joined
[20:54] *** svnbot6 joined
[20:54] *** lypanov joined
[20:54] *** Daveman joined
[20:54] *** miyagawa joined
[20:54] *** lampus joined
[20:54] *** mugwump joined
[20:54] *** kakos joined
[20:54] *** Khisanth joined
[20:54] *** meppl joined
[20:54] *** wilx joined
[20:54] *** TimToady joined
[20:54] *** ayrnieu joined
[20:54] *** xern joined
[20:54] *** kane-xs joined
[20:54] *** integral joined
[20:54] *** mako132 joined
[20:54] *** lisppaste3 joined
[20:54] *** whiteg joined
[20:54] *** Ara4n joined
[20:54] *** mauke joined
[20:54] *** Maddingue_ joined
[20:54] *** SamB joined
[20:54] *** Bit-Man joined
[20:54] *** f0rth joined
[20:54] *** DesreveR joined
[20:54] *** robkinyon joined
[20:54] *** kanru joined
[20:54] *** Odin- joined
[20:54] *** p5evalbot joined
[20:54] *** Steve_p joined
[20:54] <Limbic_Region> Win32 can't svn up ATM

[20:54] <Limbic_Region> hmmm - not sure why I am telling anyone this - it looks like the universe is bouncing

[20:54] *** audreyt joined
[20:54] <integral> hmm, I see

[20:54] <integral> doesn't something like deleting the dir, and syncing up fix stuff?

[20:54] <Limbic_Region> integral - usually

[20:55] <integral> oh, my mistake, there's still both

[20:55] <Limbic_Region> but not in this case - whatever the problem is is still in the rep

[20:55] <integral> hmm, I think I can just svk rm .../lib/pugs

[20:55] *** jiing_ joined
[20:56] <nothingmuch> yay! spam spam spam spam!

[20:56] <Limbic_Region> well - last time this happened I kissed audreyt and she made it all better

[20:56] <integral> Limbic_Region: fixed!  or at least deleted.  any more problems with that should be on your end now hopefully :)

[20:56] <nothingmuch> ciao guys, i'm off for tea

[20:56] <nothingmuch> thanks for much patience WRT the CV

[20:56] * Limbic_Region kisses integral

[20:57] <svnbot6> r9369 | bsmith++ | Deleting empty lib/pugs directory now that files are in lib/Pugs (for the benefit of win32 users)

[20:58] <FurnaceBoy> yep, pugs + Pugs will break case insensitive svn users

[20:58] <FurnaceBoy> deleting one or t'other is the right fix

[20:59] <FurnaceBoy> that is, if you care about them. ;)

[20:59] *** audreyt joined
[21:00] <mj41___> thanks

[21:02] <audreyt> whew, netsplit over

[21:02] <audreyt> gobby session still going on on perlcabal.org

[21:03] <Steve_p> gobby?

[21:06] <audreyt> http://gobby.0x539.de/

[21:06] <audreyt> multiplayer notepad

[21:06] <audreyt> a bit better than IRC (multiplayer cat)for design sessions

[21:07] <Steve_p> Ahhhh

[21:07] <Limbic_Region> jZed was working on something like that - wonder what became of it

[21:07] *** mj41____ joined
[21:08] <audreyt> I think gobby is Good Enough (tm)

[21:08] <Steve_p> If we can get it hooked to an EVE client, we could get schwern working on pugs for 18 hours at a time ;)

[21:09] <audreyt> schwern implemented $*CWD in Pugs.

[21:10] <audreyt> but 18hrs at a time... wow :)

[21:10] *** avar joined
[21:13] <Steve_p> audreyt, I could have sworn I've seen you working on pugs for nearly that long a few days :)

[21:13] <audreyt> yeah :)

[21:18] <szbalint> audreyt: oh, .at? You're in the neighbourhood :)

[21:21] *** stevan_ joined
[21:22] *** buu_ is now known as buu

[21:25] *** mj41_____ joined
[21:28] <audreyt> szbalint: :)

[21:41] *** mj41______ joined
[21:42] <audreyt> <- working with fglock now on Pugs::Grammar::Rule API

[21:42] <audreyt> <- also working with LeTo now on getting ParrotObject work with perl6 ::Proto objects

[21:43] *** ruz joined
[21:44] *** Limbic_Region joined
[21:50] *** fglock joined
[21:51] <fglock> audreyt: ping

[21:51] <audreyt> fglock: pong

[21:51] <fglock> I'm trying to reconnect...

[21:52] *** pmurias joined
[21:56] <svnbot6> r9370 | pmurias++ | --format xml implemented using XML::Generator

[21:56] <svnbot6> r9370 | pmurias++ | Data::Dumper not used in p6compiler.pl

[22:01] *** mauke_ joined
[22:02] *** mauke_ is now known as mauke

[22:07] *** stevan joined
[22:14] <svnbot6> r9371 | audreyt++ | * misc/pX/Common/lrep/Notes-Pugs.pm - draft gobby meeting notes about

[22:14] <svnbot6> r9371 | audreyt++ |   how to proceed the Grand Move from /misc/pX/Common/lrep to /lib/Pugs/*

[22:14] <svnbot6> r9372 | audreyt++ | * last-second edits from fglock.

[22:22] *** audreyt_ joined
[22:22] *** Alias_ joined
[22:24] *** binary42 joined
[22:31] <Alias_> seen audreyt

[22:31] <Alias_> (you guys really need to get a bot)

[22:31] <Alias_> (that deals with such queries implicitly)

[22:32] <fglock> Alias_: audreyt is not online

[22:32] <Alias_> fglock: Yep, purl told me. Arrived at leo's a few hours ago, so I imagine she won't be around for another 8 hours or so

[22:33] <fglock> Alias_: I'd like a "who's online" button - the irc's one doesn't mean anything

[22:33] <fglock> yup

[22:34] <fglock> audreyt++ accept new ideas fast

[22:35] <Alias_> You killed her

[22:36] <fglock> no, she quit because of no new ideas to keep her connected

[22:38] *** SamB joined
[22:39] <FurnaceBoy> hey, I'm still connected but I haven't had  a new idea in years

[22:39] <Alias_> AWAY WITH YOU!

[22:40] *** Alias_ left
[22:40] <fglock> Alias_ away-ed herself?

[22:44] *** Muable joined
[22:45] <fglock> .oO( people all quit about the same time, even if they are in different timezones )

[23:02] *** justatheory joined
[23:04] <fglock> the more I try to explain lrep, the more complicated it looks :(

[23:04] *** nothingmuch joined
[23:05] <fglock> nothingmuch: hi!

[23:05] <nothingmuch> hola

[23:06] <fglock> I'm trying to explain lrep internals in misc/pX/Common/lrep/Notes-Pugs.pm - but it is much harder than I thought

[23:07] <Juerd> Heh.

[23:07] *** ruz joined
[23:07] <Juerd> Asked my dad on the phone if he could disconnect the network cable from my computer.

[23:07] <Juerd> "I can't find your computer. Where did you put it?"

[23:07] *** avar joined
[23:07] <Juerd> But I could still ping it, so it couldn't be stolen.

[23:08] <fglock> Juerd: login and make it beep

[23:08] <Juerd> He ignored my Mac mini on his search for my computer.

[23:08] <Juerd> He thought it was some peripheral device :)

[23:08] <nothingmuch> fglock: was that for me?

[23:08] <Juerd> It's too small!

[23:08] *** mj41_______ joined
[23:10] <fglock> nothingmuch: maybe - just talking to "irc" - whoever is there :)

[23:10] <nothingmuch> ah

[23:10] <fglock> nothingmuch: Juerd is doing the same

[23:11] * nothingmuch will try to join in the fun in a few minutes ;-)

[23:11] <nothingmuch> then I could also talk to nothing in particular

[23:11] <fglock> nothingmuch: talk about the CV thing

[23:11] <nothingmuch> ah

[23:11] <nothingmuch> my cv is now on my website

[23:11] <nothingmuch> http://nothingmuch.woobling.org/

[23:12] <Juerd> fglock: Re making it beep: couldn't do that - it beeps through external sound.

[23:12] <fglock> nothingmuch: cool - now you've joined the fun

[23:12] <Juerd> 00:10 < fglock> nothingmuch: maybe - just talking to "irc" - whoever is there :)

[23:12] <Juerd> Talking to irc rocks.

[23:13] <Juerd> If there's something you want to say, pick a channel and start talking. Works well.

[23:13] <fglock> :)

[23:13] <Juerd> I sometimes wonder how people without IRC do that. I wonder what to do if I'm without IRC and want to tell something.

[23:13] <Juerd> (When alone)

[23:14] <Juerd> nothingmuch: Are the cyan borders around certain things in your CV intentional?

[23:15] <nothingmuch> Juerd: no

[23:15] <nothingmuch> oh wait

[23:15] <Juerd> They distract, turn combined colour/bw printers into their slow mode, and hurt eyes :)

[23:15] <nothingmuch> it's hyperlinks, i guess

[23:15] <nothingmuch> eek

[23:15] <Juerd> There are no hyperlinks in paper.

[23:15] <integral> hmm, I can't see those on os X preview

[23:15] <nothingmuch> try clicking them

[23:15] <nothingmuch> pdf has hyperlinks

[23:15] <Juerd> nothingmuch: My reader is ghostscript

[23:16] <nothingmuch> ah

[23:16] <nothingmuch> err, i'll make you a .ps?

[23:16] <Juerd> I can do that myself

[23:16] <Juerd> But thank you

[23:18] <wolverian> I can't see cyan either

[23:18] <Juerd> nothingmuch: http://search.cpan.org/~nuffy is incomplete, postfix another /.

[23:19] <nothingmuch> Juerd: the hyperlink is "correct"

[23:19] <nothingmuch> i just think that without the trailing slash it looks kind of better

[23:19] <nothingmuch> i tried both and went on a gut feeling

[23:19] <nothingmuch> but since then the formatting has changed

[23:19] <nothingmuch> i'll try to twiddle it

[23:20] <Juerd> nothingmuch: It's not, but the server end is forgiving enough to send you a Location: header.

[23:21] <nothingmuch> the hyperlink is

[23:21] <nothingmuch> \href{http://search.cpan.org/~nuffin/}{http://search.cpan.org/$\sim$nuffin}.

[23:21] <nothingmuch> that's the source

[23:21] <Juerd> Awwh

[23:21] <Juerd> Then the text is just misleading.

[23:21] <Juerd> :)

[23:21] <Juerd> I always consider CVs to be paper documents.

[23:21] <Juerd> It makes many things easier, including comparisons.

[23:22] <obra> When candidates submit resumes in something other than ascii or HTML, I'm less likely to open them. 

[23:22] <obra> PDF is also generally ok, but somewhat less ideal.

[23:23] <Juerd> obra: I'm used seeing most in PDF

[23:23] <Juerd> I prefer PDF because that includes some of the submitter's design thoughts or skills.

[23:23] <obra> When we ask for "not word" and they still send word...Well, it's not an automatic bitbucket.

[23:23] <obra> But it makes me sad

[23:23] <Juerd> If they use TeX with default settings, that says a lot about the person, for example.

[23:23] <obra> were I looking at a designer who did print stuff, I'd want to see their handywork ;)

[23:24] <Juerd> If they send anything in Comic Sans MS, that does too :)

[23:24] <FurnaceBoy> 	<obra>	When we ask for "not word" and they still send word...Well, it's not an automatic bitbucket.

[23:24] <FurnaceBoy> maybe it should be -- the most basic IQ test...

[23:25] <FurnaceBoy> agree @ Juerd

[23:25] <Juerd> If someone chooses plain text (ASCII is a bit too limiting perhaps) without previous communication with indicating that that is desired, than that information by itself is useful.

[23:25] <Juerd> s/, than/, then/

[23:25] <fglock> obra: would you take a look at /misc/pX/Common/lrep/Deal.txt - with "project leader hat"

[23:25] <Juerd> Whether these are positive or negative depends on the job, of course.

[23:25] <Juerd> Default TeX is perfect for programmers: they should be lazy.

[23:25] <fglock> we've been discussing it the whole day

[23:26] <Juerd> Plain text is awful for designers.

[23:26] <Juerd> Word is negative in any case.

[23:26] <Juerd> :)

[23:26] <obra> fglock: I'll pull and have a look

[23:26] * stevan looks at it with his "code monkey" hat on (the rainbow colored one with the little propellor on top)

[23:26] <obra> fglock: I'm somewhat distracted today

[23:26] <Juerd> I wish we had a quotes database here :)

[23:26] <szbalint> If you use PDF::Api2 for your resum􏿽xE9 then it means you're a genius or really twisted to understand the documentation

[23:27] <szbalint> ;)

[23:27] <fglock> stevan: that's a cool hat.

[23:27] <Juerd> szbalint: Hehe

[23:27] <Juerd> Someone once sent me a CV written in ... EXCEL.

[23:28] <fglock> obra: one page in plain unformatted text

[23:28] <fglock> obra: http://svn.openfoundry.org/pugs/misc/pX/Common/lrep/Deal.txt

[23:30] <obra> Well, I'd argue that p6 is still short some specs.

[23:31] <FurnaceBoy> lol@Juerd

[23:31] <Juerd> nothingmuch: Your catalyst plugins are effectively listed twice. That's cheating ;)

[23:31] <obra> Like, say, concurrency. unless larry blessed audrey's spec while I wasn't watching

[23:32] <Juerd> obra: Even if not, then still everyone else has :)

[23:32] <fglock> obra: the main idea is to bootstrap soon, but go on working as usual

[23:32] <nothingmuch> Juerd: shaadaaaaaap ;-)

[23:32] <obra> fglock: go send it to p6l to get some discussion going outside #perl6

[23:33] <Juerd> nothingmuch: :))

[23:34] <fglock> obra: thanks - please ask me if I should clarify something before you send - I woudn't like to leave a wrong impression (I'm not a native speaker)

[23:34] <obra> Sorry. you should send it, not me :P

[23:34] <stevan> fglock: (caveat: i have not read it yet), but the more details the better

[23:35] <obra> It needs an introduction explaining what you're trying to do

[23:35] <szbalint> I'd read it but my technical knowledge is too poor for that...

[23:36] <fglock> obra: ok

[23:37] <fglock> obra: is there a real separation between TPF's perl6 and Pugs perl6, or is it just me?

[23:37] <obra> They're parallel implementation efforts that have a lot of cross-pollination.

[23:37] <FurnaceBoy> a.k.a. "they swap spit"

[23:38] <wolverian> eww, isn't that incest?

[23:38] <FurnaceBoy> (less syllables)

[23:38] <szbalint> Btw, I love the linguistics puns and inside jokes - but they do make the barrier of entry higher

[23:38] <FurnaceBoy> no, it's kissin' -- unless you're from... nm

[23:38] *** mako132_ joined
[23:39] <fglock> obra: are you aware of lrep?

[23:44] <obra> lrep?

[23:44] <svnbot6> r9373 | fglock++ | lrep/Notes-Pugs.pm - Grammar engine: about boxed/unboxed, Rule x Match

[23:46] *** larsen joined
[23:47] <fglock> obra: lrep is an implementation of a Perl 6 compiler in plain perl5. The compiler is already bootstrapped - the grammar is written in Perl 6

[23:47] *** stevan_ joined
[23:47] <fglock> obra: audreyt is helping move this into the "main" Pugs

[23:48] <wolverian> how do you move perl code to pugs? :) 

[23:48] <fglock> obra: I announced it a week ago

[23:48] <fglock> wolverian: it's perl6 code!

[23:49] <wolverian> oh, the grammar is. right. what about the primitives?

[23:49] <wolverian> or is this a compiler only

[23:50] <fglock> wolverian: the primitives are Perl6 too - we are moving the few remaining things to modules, and than they will be translated to perl6 or not (since perl6 supports perl5 syntax)

[23:50] <wolverian> right 

[23:50] <wolverian> neat :)

[23:50] <obra> oh. fglock I just didn't know the name. cool

[23:50] <fglock> obra: although a week ago it didn't have a name

[23:51] <fglock> obra: so I think it is a great time to synch with the TPF people

[23:52] <obra>  *nod*

[23:52] <stevan_> fglock: re: make OO nodes in the AST

[23:52] <fglock> obra: sorry for "TPF people" - how can I name them politely?

[23:52] <fglock> stevan_: that's under way

[23:52] <stevan_> the metamodel should be able to desugar all class definitions into basic method calls 

[23:53] <Juerd> Is "people" inpolite?

[23:53] <fglock> stevan_: sure - so implementing OO will be pure syntax, right?

[23:53] <stevan_> fglock: see this paste http://sial.org/pbot/16191

[23:53] <obra> fglock: do you mean the design team for perl6, patrick who does pge, or the parrot hackers?

[23:53] <fglock> Juerd: calling pople "them" like: "not us" :(

[23:54] <fglock> s/pole/people/

[23:54] <stevan_> the macro syntax is totally off,.. but the desugared code at the bottom is what I am thinking of

[23:54] <Juerd> "they" very commonly are "not us"

[23:55] <stevan_> fglock: make any sense?

[23:55] <fglock> obra: I mean the people who work in perl6-related things - Patrick, Allison - we are redesigning some things (like the rule engine) and it would be nice if they could be part of this

[23:55] <fglock> steva_: will look

[23:56] <fglock> s/steva_/stevan_/ - I'll stop correcting myself now :)

[23:56] <fglock> stevan_: just a note, before I finish reading

[23:57] <Juerd> fglock: Do you not use tab completion? :)

[23:57] <obra> fglock: you should have as much discussion as you can on the mailinglist

[23:57] <obra> even if it's a summary of today's irc discussion

[23:57] <fglock> obra: ok - I'll try (tomorrow - too late here for real thinking)

[23:58] <obra> nodnod

[23:58] <fglock> stevan_: some initialization will take place in the bootstrap

[23:58] <obra> patrick, allison, chip and so on do better with the lists than pure irc.

[23:58] <obra> So using the lists will get more of their attention

[23:58] *** jisom joined
[23:58] <stevan_> fglock: yes, nothingmuch pointed out that much of that will happen inside a BEGIN {} block

[23:59] <fglock> obra: writing the intro will take some time, but I'll do it - it's not like an informal talking - some people will just read it and don't even reply to me

