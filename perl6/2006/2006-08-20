[00:26] *** elmex joined
[00:26] <svnbot6> r12498 | trey++ | [t/oo/syntax-but.t]

[00:26] <svnbot6> r12498 | trey++ | Added tests for "but False";

[00:26] <svnbot6> r12498 | trey++ | fixed tests to use eval correctly;

[00:26] <svnbot6> r12498 | trey++ | fixed a mispelling.

[00:44] <svnbot6> r12499 | fglock++ | * v6 - given/when/default/break/continue

[00:48] *** cmarcelo left
[00:59] <renormalist> MacVince, TreyHarris: cperl-mode thing: A known issue with new Unicode emacs and cperl-mode 5.x. Fixed in cperl-mode 5.20, but I didn't merged that version changes into Perl6-enhanced version yet. TreyHarris: thanks.

[01:01] *** rashakil joined
[01:03] <MacVince> renormalist: I think there are still a few issues with the code TreyHarris put up.

[01:03] <MacVince> However, there are not enough details for me to know where to look: no line numbers or anything.

[01:05] <renormalist> The fix to the original problem should be a simple \ --> \\ conversion somewhere in a docu string.

[01:06] <renormalist> MacVince: I will have a look at it tomorrow. Must sleep now. sorry.

[01:06] <MacVince> np.

[01:12] *** elmex joined
[01:14] <svnbot6> r12500 | fglock++ | v6 - statement/expression closure traits

[01:23] <TreyHarris> is this correct behavior, and if so can someone explain it:

[01:23] <TreyHarris> ?eval my @a = (Bool::False|Bool::True); my @b = 0..3; say "yes" if all(@a) eq any(@b)

[01:23] *** evalbot_12497 is now known as evalbot_12500

[01:23] <evalbot_12500> OUTPUT[yes ] Bool::True

[01:25] *** Bit-Man joined
[01:28] *** fglock joined
[01:31] *** ludan joined
[01:48] <svnbot6> r12501 | fglock++ | v6 - fixed scientific notation

[01:53] <wolverian> http://search.cpan.org/~eilara/Aspect-0.11/lib/Aspect/Library/Wormhole.pm -- scary

[01:53] <lambdabot> Title: Aspect::Library::Wormhole - A wormhole between call frames - search.cpan.org

[02:12] *** gantrixx joined
[02:26] <TimToady> ?eval my $a = (Bool::False|Bool::True); say "yes" if $a eq 1;

[02:26] *** evalbot_12500 is now known as evalbot_12501

[02:26] <evalbot_12501> OUTPUT[yes ] Bool::True

[02:27] <TimToady> ?eval my $a = (Bool::False|Bool::True); say "yes" if $a eq 0;

[02:27] <evalbot_12501> undef

[02:27] <TimToady> that is...strange...

[02:27] <TimToady> ?eval my $a = Bool::False; say "yes" if $a eq 0;

[02:27] <evalbot_12501> undef

[02:28] <TimToady> ?eval my $a = Bool::False; say "yes" if $a == 0;

[02:28] <evalbot_12501> OUTPUT[yes ] Bool::True

[02:28] <TreyHarris> eqv works

[02:28] <TreyHarris> so i just switched to that

[02:28] <TimToady> ?eval my $a = Bool::True; say "yes" if $a eq 1;

[02:28] <evalbot_12501> OUTPUT[yes ] Bool::True

[02:28] <TimToady> ?eval say "yes" if Bool::True eq 1;

[02:28] <evalbot_12501> Error: No compatible subroutine found: "&eq"

[02:29] <TimToady> ?eval say "yes" if Bool::True == 1;

[02:29] *** weinig is now known as weinig|zZz

[02:29] <TimToady> did I kill it?

[02:30] <TreyHarris> ?eval 2+2

[02:30] <TimToady> maybe it's pining

[02:30] <TreyHarris> i get *** Cannot cast from VInt 1 to Handle (VHandle)

[02:31] <TimToady> weird

[02:31] <TreyHarris> oh, this is maddening.  i'm trying to write a test for the last S09 change, and i got a parse failure.  so i put it in eval_ok, and the eval test succeeds.

[02:32] <TimToady> you mean "for any(@x) > 42" stuff?

[02:32] <TreyHarris> yes

[02:32] <TimToady> maybe eval_ok is hosed.

[02:35] <TreyHarris> i'm getting three different behaviors depending on whether the same code's run from a file or -e (parse fails), eval (parses, but doesn't work), or run at the pugs interactive line-by-line (wrong behavior, but different behavior if i run the same line a second time)

[02:35] <TreyHarris> still trying to figure this all out.  it's very very strange.

[02:36] <TimToady> well, I wouldn't expect it to work yet in any event, since we've never given comparisons a list meaning before.  But presumably it's trying to return a junction even in list context and messing up somehow.

[02:38] <TreyHarris> no, i wasn't expecting it to work, but i was expecting to be able to write a test that failed :-)

[02:43] <TreyHarris> if i write 'ok ?(blah)' and pugs bombs out, i do *not* expect "ok eval '?(blah)'" to just magically ok.

[02:48] <TimToady> well, I think eval may be having other troubles--I see a lot of eval failures in the current smoke tests.

[02:49] <pasteling> "TreyHarris" at 207.171.180.101 pasted "help me make tests 1 and 3 fail!" (28 lines, 1K) at http://sial.org/pbot/19149

[02:53] <TimToady> the insides of test one parse if I put them all as one line.

[02:53] <TimToady> ?eval  my @x = 1..20;my $code = -> $x { $x % 2 };my @result = any(@x) ~~ $code;

[02:54] <TreyHarris> you're right.  huh.  so how do i document this problem with a test fail?

[02:57] <TimToady> I also don't have a problem with

[02:58] <TimToady> ?eval my @x = 1..20; say ?(all(@x) ~~ { $_ < 21 })

[02:58] <TimToady> oh wait, the main loop of interactive pugs is an eval.  duh.

[02:58] *** kanru joined
[02:59] <TreyHarris> oh... so how do lexicals escape so you can use them in successive lines?

[02:59] *** Gruber joined
[02:59] <TimToady> escape from eval?  They can't.

[02:59] <TimToady> not unless you declare them outside

[02:59] <TimToady> just as in P5

[03:00] *** trym_ joined
[03:00] <TreyHarris> no, i mean my $x = 32 makes $x go away before you can type the next line with perl -d.  but at pugs interactive, you can do my $x = 32 and then use $x in the next line

[03:01] <TimToady> that's interesting.  I didn't think it would do that.

[03:01] *** meppl joined
[03:01] <TimToady> well, anyway, even putting the commands in a file, i can't get them to parsefail.

[03:02] *** avar joined
[03:02] <TreyHarris> oh.  so maybe it's my build of pugs?  i'm at r12433

[03:02] <TimToady> can you give me a file that bombs?

[03:02] *** obra joined
[03:02] <TreyHarris> ok

[03:02] *** autark joined
[03:02] <TimToady> I'm at 488

[03:08] <TreyHarris> oh, pasteling didn't announce it

[03:08] <TreyHarris> http://sial.org/pbot/19150

[03:08] <lambdabot> Title: Paste #19150 from Someone at 207.171.180.101

[03:09] *** glasser joined
[03:10] <TimToady> uh, wow, I just got a screen and a half of one single error message.

[03:10] <TreyHarris> yep

[03:10] <TreyHarris> that's what i get

[03:11] <TreyHarris> Cannot cast from VCode (MkCode {isMulti....

[03:11] <TimToady> ...to Double at foo line 6

[03:11] <TreyHarris> I get ...to Double (VNum) at foo, but yes

[03:13] <TreyHarris> despite the references to Test.pm in that error message, you can comment out the ok and still get a bombou

[03:13] <TreyHarris> t

[03:17] <TreyHarris> ahh.... but if you don't use Test, it works!

[03:17] <TreyHarris> not the ok obviously

[03:18] <TimToady> use Test; { my @x = 1..20; my $code = (sub ($x) { $x % 2 }); my $result = any(@x) == $code; };

[03:18] <TimToady> makes 5 screens of error

[03:19] <TimToady> without the use Test it's only 3.5 screens

[03:20] <TimToady> without the curlies it's only 1.5 screens.

[03:21] <pasteling> "TreyHarris" at 207.171.180.101 pasted "works with first line commented, otherwise fails" (6 lines, 124B) at http://sial.org/pbot/19152

[03:21] <svnbot6> r12502 | fglock++ | v6 - fixed a statement modifier bug

[03:23] <TimToady> looks to me like the junction logic is doing random stuff with code

[03:28] <TreyHarris> huh, you can't 'require "/path/to/filename"' anymore?

[03:33] <TreyHarris> TimToady: well, unless you have a better idea, I'm just going to return 0 at the end of the eval, and put a comment saying not to remove it until it works outside of the eval

[03:33] <TreyHarris> since i can't generate an actual test failure

[03:40] <TimToady> audreyt: when you get a change, see last paste above.

[03:40] <TimToady> *chance

[03:49] *** justatheory joined
[03:54] *** fglock left
[04:03] <TreyHarris> TimToady: is CATCH like this: "try { CATCH { when Exception::1 { ... } when /error/ { ... } default { ... } }?  or is it "try { CATCH Exception::1 { ... } CATCH /err/ { ... } CATCH default { ... } }"?  I read S04 pretty clearly as saying the former, but only the latter appears to be tested.

[04:04] *** xinming joined
[04:05] *** kanru joined
[04:10] *** justatheory joined
[04:27] <gaal> moose!

[04:33] <PerlJam> TreyHarris: It's the former.  It's a CATCH block that acts as a special kind of given (on $!)

[04:34] <TreyHarris> meese, mice, mose

[04:34] <TreyHarris> PerlJam: ok, I'll rewrite the tests

[04:35] <TreyHarris> TimToady: interestingly enough, the word 'try' is not just self-documentation in this case.  if you do nothing to the code but wrap it in a block, it still fails.  but add the magic word "try", and poof, it succeeds--though it doesn't actually make it past the point where it failed before.  so i now have an avenue for a test

[04:47] <audreyt> fixed.

[04:47] <gaal> in any case should that not have been $code()?

[04:48] <gaal> not that it worked with the parens

[04:49] <audreyt> TreyHarris, TimToady: $x ~~ &c  was broken and executed as $_ ~~ &c regardless of $x

[04:49] <svnbot6> r12503 | audreyt++ | * Implement ($lhs ~~ &code) correctly.  Previously the

[04:49] <svnbot6> r12503 | audreyt++ |   value of $lhs is ignored and only $_'s value is considered.

[04:49] <svnbot6> r12503 | audreyt++ |   I wonder who implemented that... ;)

[04:49] <gaal> hmm wait, $code has arity 1

[04:49] <gaal> audreyt: 07:49 < svnbot6> r12503 | audreyt++ |   I wonder who implemented that... ;)

[04:49] <gaal> that would be me, I think

[04:50] <gaal> does any~~ set the topic? why *should* Trey's code work?

[04:50] <audreyt> it would set the topic.

[04:50] <audreyt> see the S03 table

[04:50] <audreyt> the lhs column says $_

[04:51] <audreyt> I love the utterance "see the S03 table"

[04:51] <audreyt> as most tables are in S03 ;)

[04:52] <gaal> wow, I dont' think it wasn '$_' and '$x' last time I looked...

[04:52] <audreyt> that might be the case... :)

[04:53] <gaal> "potentially references to container objects" # fossil?

[04:53] * audreyt is doing her hair right now (citywide wifi++), so connection will be intermittent

[04:53] <audreyt> not really fossil

[04:53] <audreyt> it means they are lvalues

[04:53] <gaal> for a minute there I couldn't understand how come you needed wifi to do hair

[04:53] *** shachaf joined
[04:54] <audreyt> I need wifi to fix pugsbugs :)

[04:54] <gaal> as in, I'll do away with heated air, I'll fry my hair with radio waves!

[04:54] <TreyHarris> audreyt: fixed?

[04:54] <audreyt> "I do my hair with 802.11"

[04:54] <TreyHarris> lol

[04:54] <gaal> or maybe, sleep on the NIC

[04:54] <audreyt> TreyHarris: aye

[04:55] <audreyt> "Micro-wavy hair style"

[04:55] <TreyHarris> I just spent the past 20 minutes writing a set of tests that will fail!

[04:55] <audreyt> commit them!

[04:55] <TreyHarris> ok

[04:56] * gaal wonders if wifi NICs get warmer when the signal is low

[04:56] <gaal> "the signal is weak but the hair is dry"

[04:56] <TreyHarris> how should I write an explanation?  i notice some people use =kwid blocks, is that how i should too?

[04:56] <gaal> TreyHarris: sure

[04:57] <audreyt> or you can use multiline #{} now

[04:57] <audreyt> timtowtdi

[04:57] <gaal> :}s/^# //

[04:57] <gaal> er

[04:57] <gaal> /^/# /

[04:57] <gaal>  /^/# /

[04:58] <gaal> that is /^/# /

[04:58] * gaal looks for running water

[05:00] *** Revision17 joined
[05:13] <TreyHarris> hmmm.  everything in smartmatch.t is marked todo, with the explanation that ~~ isn't implemented yet

[05:22] *** tup joined
[05:31] <svnbot6> r12504 | trey++ | [junction/chained_operators.t]

[05:31] <svnbot6> r12504 | trey++ | [operators/smartmatch.t]

[05:31] <svnbot6> r12504 | trey++ | Tests for evaluative junction

[05:31] <svnbot6> r12504 | trey++ | behavior described in S09, and tests

[05:31] <svnbot6> r12504 | trey++ | for fix made in r12503.

[05:38] *** neoesque joined
[05:40] *** agentzh joined
[05:47] <TreyHarris> where's nothingmuch been?  haven't seen him make a sound in a few days

[05:48] <agentzh> TreyHarris: she is busy with her sysadmin work.

[05:48] <TreyHarris> ah

[05:48] <agentzh> :)

[05:53] *** cmarcelo joined
[06:22] <svnbot6> r12505 | cmarcelo++ | * HsJudy: swapMaps is now part of MapM. Also, now we have a

[06:22] <svnbot6> r12505 | cmarcelo++ | instance of MapM for IORef (Data.Map.Map a b).

[06:24] <gaal> wow, MapM is a confusing name :)

[06:25] <gaal> (<=> the mapM function)

[06:27] <cmarcelo> gaal: yes, i agree.. my first names ideas are always very confusing  =P... the idea was Collections => Map, then CollectionsM => MapM... =P

[06:27] <cmarcelo> but people in general don't need to deal with the name MapM too much.. [e.g. there's no mention of it in Pugs code AFAIK]..

[06:28] <gaal> cmarcelo: it's just an observation, not a complaint :)

[06:28] <svnbot6> r12506 | agentz++ | [t/README]

[06:28] <svnbot6> r12506 | agentz++ | - polished the wording.

[06:28] <svnbot6> r12506 | agentz++ | - updated the TODO part by encouraging the use of the `todo' function.

[06:37] <svnbot6> r12507 | agentz++ | [Test/lib/Test.pm]

[06:37] <svnbot6> r12507 | agentz++ | - polished the Kwid doc.

[07:13] *** drbean joined
[07:18] <nothingmuch> TreyHarris: i'm alive

[07:18] <nothingmuch> agentzh: i'm not a she ;-)

[07:18] <agentzh> nothingmuch: sorry. :)

[07:18] <nothingmuch> the sysadmin stuff was actually trivial, once it was done

[07:19] <nothingmuch> the PCI card popped out

[07:19] <nothingmuch> so by the time i told you guys it was over with

[07:19] <nothingmuch> anymoose, /me hunts food

[07:19] <TreyHarris> hunting moose?

[07:20] * nothingmuch is going to start hunting in the freezer

[07:20] <nothingmuch> if i don't see anything there, maybe i'll find some moose eventually

[07:30] <gaal> nothingmuch: I hope you didn't push it back in while the system was running

[07:32] <lumi_> Good morning, folk

[07:32] <lumi_> gaal: Do you have an opinion on what I asked yesterday?

[07:35] <svnbot6> r12508 | masak++ | paper was first mentioned 2006-08-06 (or earlier), not 2006-08-09

[07:37] <cmarcelo> masak: are you the one that added monad links into READTHEM? did you see http://sigfpe.blogspot.com/2006/08/you-could-have-invented-monads-and.html ?

[07:37] <lambdabot> Title: A Neighborhood of Infinity: You Could Have Invented Monads! (And Maybe You Alrea ...

[07:37] * cmarcelo likes sigfpe blog

[07:40] *** traecer joined
[07:44] <gaal> lumi_: sorry no, at $work now so low on cycles too

[07:45] <gaal> but why not just moose it and see if it simplifies things?

[07:45] <lumi_> k, I'll try it

[07:45] <traecer> just m00se it

[07:55] <agentzh> what is the advantage and disadvantage of using Pod::Simple::HTML instead of Pod::Html?

[07:56] <agentzh> util/catalog_tests.pl uses the former and i don't know why. :)

[08:07] *** integral joined
[08:11] <nothingmuch> gaal: no, i didn't

[08:11] <nothingmuch> gaal: i shut it down to open it

[08:13] <gaal> nothingmuch: ok. it's an expensive and not very effective way to defrost frozen food

[08:13] <nothingmuch> =)

[08:13] * nothingmuch didn't know

[08:13] <nothingmuch> the scary part was that it was half in there

[08:14] <nothingmuch> and i think it was still picked up by lspci -v

[08:14] <gaal> ugh

[08:14] <nothingmuch> yes, very confusing =(

[08:14] <gaal> remember the old cascade virus? /me wonders if a flaky card is like that

[08:14] <nothingmuch> no, i don't

[08:15] * nothingmuch is a mac head, didn't have many viruses

[08:15] <nothingmuch> what did it do?

[08:15] <gaal> gotta go back to work

[08:15] <nothingmuch> ah... see you then

[08:15] <gaal> google for an emulator :)

[08:15] <nothingmuch> btw, my first bookmooch book arrived

[08:15] <nothingmuch> awesometown!

[08:18] *** iblechbot joined
[08:39] *** kane-xs joined
[08:41] <xerox> G'day.

[08:43] <cmarcelo> xerox: hi

[08:44] <xerox> About yesterday's prime code...

[08:45] <TreyHarris> audreyt: so r12503 only fixed the spewing of the long error... it still causes the closure executing to fail immediately.  so my tests for parsing (at the bottom of t/operators/smartmatch.t) still fail

[08:45] *** DaGo joined
[08:45] <xerox> import Text.ParserCombinators.ReadP; composite = do { x <- liftM2 (:) (char '1') (many (char '1')); y <- many1 (string x); z <- look; guard (null z); return (x,y) }; prime = null . readP_to_S composite . flip repeat '1'

[08:53] <cmarcelo> xerox: could you help me here? readP_to_S "runs" the composite parser, and if it doesn't match anything, will return []... right?

[08:54] <xerox> "...and if "^(11+)\1+$" doesn't match, will return []."  :)

[08:58] <cmarcelo> cool! (I was in doubt if it returned [] or [(?, original_string)]). but perl one is still prettier =)

[08:59] <xerox> roar.

[08:59] *** shachaf joined
[08:59] <cmarcelo> xerox: the first ocurrence of many shouldn't be many1 ?

[09:00] <xerox> cmarcelo: that's equivalent, right.

[09:00] <xerox> No

[09:01] <xerox> At least *two* ones.

[09:02] <cmarcelo> but (char '1') (many (char '1')), which I read as /11*/, could parse just "1", right?

[09:02] <xerox> Ooops.

[09:02] <xerox> I thought you meant x <- many1 (char '1').

[09:03] <xerox> Yes, that's a typo.

[09:06] <cmarcelo> and... manyN 0 = many; manyN n p = liftM2 (:) p (manyN (n-1) p)... so you can use x <- manyN 2 (char '1')... makes sense?

[09:07] <xerox> Does it work?

[09:07] <TreyHarris> agentzh: are you here?

[09:12] *** Aankhen`` joined
[09:15] <cmarcelo> xerox: is "repeat" what you really meant in the "prime" definition? repeat :: a -> [a], so that flip sounds a little strange.

[09:16] <xerox> replicate

[09:16] <xerox> Sorry for the typos

[09:16] <cmarcelo> np =)...

[09:22] *** chris2 joined
[09:23] <cmarcelo> xerox: everything works now. manyN too.. \o/

[09:39] *** iblechbot joined
[09:43] <svnbot6> r12509 | trey++ | TASK done:

[09:43] <svnbot6> r12509 | trey++ | spellchecking Overview PODs.

[09:45] <TreyHarris> whoops.  what to do for a segfault?  write a test or no?

[09:55] <gaal> TreyHarris: sure

[09:56] <gaal> TreyHarris: isolate it in one file, put it in t/pugsbugs

[09:57] *** Aankh|Clone joined
[09:59] *** DaGo joined
[10:00] <TreyHarris> gaal: i don't see pugsbugs.  create the directory?

[10:00] *** bernhard joined
[10:07] *** penk joined
[10:08] <gaal> urp? it used to be there

[10:09] <TreyHarris> svn log t/pugsbugs doesn't give me anything

[10:09] * gaal confers with svk log

[10:10] <gaal> ah, r11323 renamed it to t/bugs

[10:11] <TreyHarris> i don't have that either...

[10:23] <gaal> r11334 renamed it to t/xx-uncategorized...

[10:24] <TreyHarris> oh?  one of the TASKS says to move xx-uncategorized into the approriate directory by synopsis

[10:25] <gaal> then r11334 must be bogus :) please make sure it hasn't accrued non-buggy tests, and if not, rename it back to something with 'bugs' in it :)

[10:25] * gaal thinks pugsbugs was in fact a good name

[10:26] <TreyHarris> oh, well.  it may not be a generic issue anyway, i just noticed that my uninstalled pugs is using a Prelude from my installed pugs.  i guess my idea of installing only versions that seemed pretty stable and then build often in the source dir for testing was not a worthy idea...

[10:26] <gaal> since we can't expect other implementations to copy our bugs

[10:26] <gaal> TreyHarris: that's simply a search path issue

[10:26] <TreyHarris> oh?  what should i change?

[10:27] <gaal> if you want local prelude, export PERL6LIB=blib6/lib

[10:27] <gaal> or put a `pwd` there to protect yourself when cd'ing around

[10:27] <gaal> (I almost never use cd, so I don't bother)

[10:27] <TreyHarris> no, that didn't do it

[10:28] <gaal> huh? what does pugs -V say?

[10:28] <TreyHarris> it's still saying Consider removing /Library/Perl6/Prelude.pm.yml and make it again

[10:29] <TreyHarris> oh, i typoed :-)

[10:30] <gaal> whew

[10:30] * gaal wanders off to $job again...

[10:32] <xerox> $job eh...

[10:39] <cmarcelo> audreyt: ping?

[10:49] <svnbot6> r12510 | trey++ | [STATUS]

[10:49] <svnbot6> r12510 | trey++ | [t/builtins/control_flow/try.t]

[10:49] <svnbot6> r12510 | trey++ | [t/xx-uncategorized/hashes-segfault.t]

[10:49] <svnbot6> r12510 | trey++ | Updated status of tests, changed try.t to

[10:49] <svnbot6> r12510 | trey++ | use current CATCH syntax, and added a test

[10:49] <svnbot6> r12510 | trey++ | for a bug that's causing Pugs to segfault

[10:49] <svnbot6> r12510 | trey++ | whenever hashes are used in certain

[10:49] <svnbot6> r12510 | trey++ | contexts.

[11:02] *** Aankhen`` joined
[11:04] *** DaGo joined
[11:04] *** TimToady joined
[11:12] <masak> cmarcelo: yes, I added a few links yesterday. and good suggestion about "You Could Have Invented Monads", I'll add that too

[11:13] <cmarcelo> audreyt: http://sial.org/pbot/19159 => two main blog posts I'm planning on Judy + Pugs. could you take a little look? at least to check if I didn't said anything insane or sureal?

[11:14] <lambdabot> Title: Paste #19159 from "cmarcelo" at 200.232.236.222

[11:15] <cmarcelo> masak: great.. =)

[11:16] <audreyt> looking now

[11:16] <svnbot6> r12511 | masak++ | added reference suggested by cmarcelo++

[11:17] <audreyt> s/as I already described/as I'll describe below/

[11:19] <audreyt> all looks very sane

[11:19] <cmarcelo> (I pasted in reverse order)

[11:20] <audreyt> actually the interning was not heavily usef until r12317

[11:20] <audreyt> which resulted in much more drastic speedup

[11:20] <audreyt> so you may bench this moment's pugs and compare it against that two revs also

[11:21] <cmarcelo> ok.. but: this moment's = r12317 or trunk?

[11:21] <audreyt> (in r12215 only Type (type tags)were interned, r12317 and afterwards, Var (variable identifiers) was also interned)

[11:21] <audreyt> trunk

[11:21] <audreyt> what I've been doing was throwing more memo and intern at the problem

[11:21] <audreyt> which all uses Judy one way or another

[11:23] <audreyt> in one place (line 126, Parser.Operator) I switched back to HashTable

[11:24] <audreyt> which was slower (forgot by how much) but didn't occasionally segfault with "Judy.IntMap: interrupted" / "Judy.Hash: interrupted"

[11:24] <audreyt> havn't had time to investigate that yet.

[11:25] <audreyt> but anywhere the ID type is used, a Judy-backed interning is used

[11:25] <cmarcelo> audreyt: hmmm.. that amazing "100% speedup on mandelbrot" was counting with these other interning things? because here it wasn't that big the difference (considering this two old revs)..

[11:25] <audreyt> it was counting other interning things.

[11:25] <audreyt> mostly Var/ID interning

[11:25] <audreyt> which made variable lookup much, much faster

[11:26] *** ludan joined
[11:26] <audreyt> (from Map String PadEntry to Map ID PadEntry)

[11:27] *** evalbot_12487 joined
[11:27] <cmarcelo> audreyt: I added Data.Map instance in collectionM, if the functions you use for HashTable are the default ones, I can instantiate HashTable too, so it will become easy to swap them and test...

[11:28] *** nothingmuch_ joined
[11:28] <audreyt> oh! that's a very good thought

[11:28] <audreyt> please go ahead and do that

[11:28] <audreyt> though I'm not sure whi Data.Map is collcetionM

[11:28] <audreyt> sinceyou cannot destructively update it, no?

[11:28] <audreyt> or did you mean IORef (Map)?

[11:28] <cmarcelo> audreyt: yes, IORef (Map)...

[11:28] <audreyt> gotcha.

[11:29] <cmarcelo> is it bad manners to use IORef in Pugs code (since all over TVar is used)? I tested here and it seems to work.

[11:31] *** shachaf_ joined
[11:32] <audreyt> well, when use use IORef, atomically{} cease to work

[11:32] <audreyt> since our atomically{} support (that's STM) depends on TVars

[11:33] <audreyt> that's an open design problem actually, since we assume a share-everything model

[11:33] <audreyt> in multithreading

[11:33] <audreyt> instead of forcing people to say

[11:33] <audreyt> my %hash is shared;

[11:33] <audreyt> previously we implement Hash as space-inefficient TVar (Map)

[11:34] <audreyt> which means all hash can be transactional (essentially blocking random access)

[11:34] <audreyt> but when not running in multithreaded context, we'd like to use the faster Judy.Hash

[11:34] <audreyt> which cannot provide rollback

[11:35] <audreyt> so my idea is to switch only to STM-friendly storage (perhaps the THash from edwardk) only when user wants them

[11:35] <audreyt> and otherwise default to share-nothing cloning

[11:35] <audreyt> ala perl5

[11:35] <audreyt> which I think TimToady had said he'd be more comfortable with

[11:35] <audreyt> but that's still an open design question.

[11:36] <audreyt> </rant>

[11:36] *** prefiks joined
[11:38] <cmarcelo> i see.. well, I can try instantiating TVar (Map) too, but would not work out-of-the-box since CM references in pugs are all supposing that it'll be an IO-action.

[11:38] <svnbot6> r12512 | kudra++ | Added threads from Saturday

[11:38] <audreyt> I thought MapM is c->kam

[11:38] <audreyt> so m = STM and that's all it takes, no?

[11:38] <audreyt> (yes it'd require liftSTM)

[11:40] <cmarcelo> yep, CM part is easy I think. but in pugs' code all references to CollectionsM functions are preceded by liftIO.

[11:43] <audreyt> maybe we can replace both with just "cast"...

[11:43] <svnbot6> r12513 | audreyt++ | * This is now an error, in compliance with the revised S04 ruling:

[11:43] <svnbot6> r12513 | audreyt++ |     my $x; { $x = 1; my $x = 2 }

[11:43] <svnbot6> r12513 | audreyt++ |   "If you've referred to C<$x> prior to the first declaration, and the

[11:43] <svnbot6> r12513 | audreyt++ |    compiler tentatively bound it to C<$OUTER::x>, then it's an error

[11:43] <svnbot6> r12513 | audreyt++ |    to declare it, and the compiler is required to complain at that point."

[11:43] <svnbot6> r12513 | audreyt++ |   The error message it gives is currently:

[11:43] <svnbot6> r12513 | audreyt++ |     unexpected redeclaration of "$x" conflicts with earlier OUTER references in the same scope

[11:43] <svnbot6> r12513 | audreyt++ |   which is kinda wordy -- improvements welcome.

[11:44] <audreyt> but nvm... where would you like to CM? envGlobal?

[11:47] <cmarcelo> actually the idea was keeping the possibility of safely swap Data.Map / Judy / whatever without breaking, so it's easy to pick the best one for each scenario..

[11:47] * cmarcelo will take a look on THash also..

[11:48] <cmarcelo> s/also/too/ =P

[11:48] <audreyt> oh... then I'm afraid you need polymorphic lift

[11:48] <audreyt> which can be defined as "cast" I guess

[11:48] <audreyt> see src/Pugs/AST/SIO.hs for casting between monads

[11:48] <audreyt> but I wouldn't suggest doing that right now...

[11:49] <audreyt> I think it's a better idea to implement them as Pugs.Val.Mut instances

[11:49] <audreyt> so that we expose each at surface level for a while

[11:49] <audreyt> my %h is Hash::Transactional

[11:49] <audreyt> my %h is Hash::Judy

[11:49] <audreyt> so we can write benchmarks in perl6

[11:49] <audreyt> to compare them directly without recompilation

[11:52] <cmarcelo> oh. cool =).. well, will only do the  MapM HashTable thing then..

[11:52] <gaal> 'declaration of "$x" conflicts with earlier OUTER reference in same scope'

[11:52] <audreyt> please commit ahead :)

[11:55] <svnbot6> r12514 | kudra++ | spelling corrections

[11:58] *** iblechbot joined
[11:59] *** DaGo joined
[12:02] <gaal> I would but Text.ParserCombinators.Parsec.Prim.unexpected gives me the creeps

[12:03] <audreyt> "unepxected declaration"  is fine

[12:03] <svnbot6> r12515 | kudra++ | Spell-checked

[12:04] <audreyt> so just (unexpected "declaration...")

[12:04] <gaal> tell that to the guy who wants a Hebrew translation of the error message

[12:04] <audreyt> well that can be done at the reporting layer

[12:04] <gaal> no it can't :)

[12:04] <audreyt> Left err -> show (loc err))

[12:05] <audreyt> of course it can :)

[12:05] <audreyt> get errorMessages

[12:05] <audreyt> and case into each, loc them

[12:06] <gaal> It *could have* if there were markers in the error string

[12:06] <gaal> or if loc does NLP :)

[12:06] <audreyt> data Message        = SysUnExpect !String   --library generated unexpect             | UnExpect    !String   --unexpected something      | Expect      !String   --expecting something | Message     !String   --raw message

[12:06] <audreyt> you don't have to use the default Show

[12:06] <audreyt> as you have access to constructors

[12:07] <audreyt> see Error.hs in parsec

[12:07] <audreyt> actually just use showErrorMessages

[12:07] <audreyt> and supply different prefix markers

[12:07] <audreyt> that will do

[12:08] <audreyt> emeijer and daan is quite big on this hook-providing thing...

[12:08] <gaal> but not all languages need the error class in prefix location

[12:08] <gaal> you need to closurize the renderer

[12:08] <audreyt> so showErrorMessages them with unique markers

[12:08] <audreyt> yes.

[12:08] *** elmex joined
[12:09] <gaal> I'm not seeing where the hook is.

[12:10] <audreyt> showErrorMessages is it.

[12:11] *** tup joined
[12:11] <svnbot6> r12516 | kudra++ | change title of august summary

[12:13] <gaal> I don't see how this is done by looking at the code, but never mind for now...

[12:16] <audreyt> Left err -> localize (showErrorMessages "!!OR!!" "!!UNKNOWN!!" "!!EXP!!" "!!UNEXP!!" "!!EOF!!" $ errorMessages err)

[12:16] <audreyt> ...and parse back the unique markers to get the structure

[12:17] <audreyt> (yes, that is wrong, cheating, adhoc, etc. but Locale::Maketext::Fuzzy did exactly that))

[12:18] <audreyt> Locale::Maketext::Fuzzy to Locale::Maketext is what Template::Extract is to Template :)

[12:18] <gaal> *groan*

[12:18] * gaal needs to wander away again

[12:19] <audreyt> have fun... bbiab too

[12:25] <cmarcelo> pugs w/ 6.4.2 here is way slower than pugs w/ 6.5 here...

[12:28] <audreyt> list numbers for both then?

[12:28] <audreyt> (not surprising as ByteString is heavily tuned as part of 6.5)

[12:31] <cmarcelo> trunk+6.4.2 is worst than judy 0-day rev =P

[12:31] <cmarcelo> (also with 6.4.2)

[12:34] <audreyt> wow...

[12:34] <audreyt> on linux?

[12:34] <audreyt> "make profiled" and

[12:34] <audreyt> ./pugs-prof ... +RTS -p

[12:35] <audreyt> and nopaste the profiling chart in pugs-pugs.prof ?

[12:35] <audreyt> (just the first section)

[12:36] <cmarcelo> ok.. i'm on linux amd64...

[12:36] <cmarcelo> ops: make prof => Could not find module `Data.ByteString.Char8':

[12:36] *** evalbot_12514 joined
[12:37] <audreyt> try nuke third-party and svk revert -R it

[12:39] <audreyt> ?eval my $x; { $x = 1; my $x = 3 }

[12:39] <evalbot_12514> Error:  unexpected redeclaration of "$x" conflicts with earlier OUTER references in the same scope expecting comment, "?", "!" or trait

[12:39] <audreyt> good.

[12:43] *** masak joined
[12:50] <cmarcelo> (compiling...)

[12:54] <svnbot6> r12517 | agentz++ | [util/smartlinks.pl]

[12:54] <svnbot6> r12517 | agentz++ | - the HTML emitter now works! you can generate HTML files

[12:54] <svnbot6> r12517 | agentz++ |   for all the synopses with embedded test snippets

[12:54] <svnbot6> r12517 | agentz++ |   using the following command:

[12:54] <svnbot6> r12517 | agentz++ |     util/smartlinks.pl t/*/*.t t/*/*/*.t

[12:54] <svnbot6> r12517 | agentz++ |   yay!

[12:54] <svnbot6> r12518 | cmarcelo++ | * HsJudy: Add instance of HashTable for MapM.

[12:58] *** agentzh joined
[12:59] <agentzh> audreyt, gaal, nothingmuch et al: please comment on the HTML files (with test snippets) generated by util/smartlinks.pl. :)

[12:59] <agentzh> though the CSS and HTML templates still need treatment, but the idea is already quite obvious at this moment. ;-)

[13:00] <nothingmuch_> agentzh: ETOOBUSY right now to run it myself and all

[13:00] <nothingmuch_> do you have sample html i could take a quick look at?

[13:00] <agentzh> yes, i have.

[13:00] *** nothingmuch_ is now known as nothingmuch

[13:00] <agentzh> email?

[13:00] <nothingmuch> [email@hidden.address]
[13:00] <agentzh> okay

[13:01] <agentzh> a sec...

[13:01] <svnbot6> r12519 | audreyt++ | * Fix build for inconsistent .hi-boot files in GHC 6.4.

[13:03] *** mdiep joined
[13:03] <agentzh> sent

[13:04] * nothingmuch bounces

[13:04] <agentzh> bounced?

[13:05] <agentzh> nothingmuch: only S02.html is attached. :)

[13:05] <nothingmuch> no

[13:05] * nothingmuch bounces out of joy

[13:05] <nothingmuch> =)

[13:05] <agentzh> search for "Show t/" in your browser please.

[13:06] <agentzh> i'll change the color of the code snippets so as to make them distinguished from the context.

[13:06] <nothingmuch> that's awesome

[13:06] <nothingmuch> agentzh++

[13:06] <nothingmuch> agentzh++

[13:06] <nothingmuch> agentzh++

[13:06] <agentzh> sorry, end of day for me. my computer will be shut down in 17 sec...see you tomorrow...

[13:06] <agentzh> nothingmuch: :)

[13:06] <agentzh> bye &

[13:06] <audreyt> nothingmuch: put the sample html somewhere

[13:06] <audreyt> :)

[13:06] <audreyt> I wanna look!

[13:06] <audreyt> agentzh: take care :) 

[13:07] <nothingmuch> http://nothingmuch.woobling.org/S02.html

[13:07] <lambdabot> Title: TITLE

[13:07] <audreyt> ...beautiful.

[13:08] *** mauke_ joined
[13:11] *** jferrero joined
[13:18] *** mauke_ is now known as mauke

[13:22] *** Eidolos joined
[13:27] <cmarcelo> audreyt: post the entire .prof or only the first page summary ?

[13:27] <cmarcelo> s/post/paste/

[13:27] <audreyt> first page first

[13:29] <audreyt> but I may need to afk for a bit

[13:29] *** masak joined
[13:29] <pasteling> "cmarcelo" at 200.232.236.222 pasted "prof summary for pugs execution of examples/mandel.pl" (38 lines, 2.2K) at http://sial.org/pbot/19160

[13:30] <cmarcelo> np.. it took 9m of user time (a little bit more of wallclock, because i'm multiprocessing...)

[13:32] <audreyt> ok. hm. try changing "30" to "3" in mandel.pl

[13:32] <audreyt> and see if 6.4 and 6.5 still differ

[13:37] <audreyt> (bbiab)

[13:38] *** shachaf joined
[13:38] <cmarcelo> audreyt: (ok).... still big difference 6s vs. 30s...

[13:56] *** diakopter joined
[14:04] <cmarcelo> audreyt: i have to go sleep a bit, but i always read irc.pugscode.org... will be back later &

[14:04] *** discordja joined
[14:04] *** cmarcelo left
[14:07] <svnbot6> r12520 | fglock++ | * v6 - cleanup extra parenthesis and braces in emitted code

[14:07] <svnbot6> r12520 | fglock++ | - fixed 'num' Term

[14:08] *** diakopter joined
[14:36] *** DaGo joined
[14:37] <gaal> agentzh: are you planning on colorizing tests with results?

[14:37] <svnbot6> r12521 | gaal++ | [util/smartlink.pl]

[14:37] <svnbot6> r12521 | gaal++ | - when a test comes just before a table, it's hard to tell them

[14:37] <svnbot6> r12521 | gaal++ |   apart. Put a border around the test code. This should of

[14:37] <svnbot6> r12521 | gaal++ |   course move over to a stylesheet eventually.

[14:52] *** mollmerx joined
[14:55] *** drbean joined
[14:59] *** marmic joined
[15:08] <svnbot6> r12522 | audreyt++ | * op2Numeric: slightly clean up syntax; no functional changes.

[15:08] *** lunartear joined
[15:08] *** lunartear left
[15:31] *** weinig|zZz is now known as weinig

[15:33] *** justatheory joined
[15:45] *** pmurias_ joined
[16:04] *** [mago] joined
[16:05] *** tup joined
[16:14] <svnbot6> r12523 | audreyt++ | * Shave 60% off parsetime... Simply by making decodeUTF8

[16:14] <svnbot6> r12523 | audreyt++ |   and encodeUTF8 strict using `seq`.

[16:14] <svnbot6> r12523 | audreyt++ |   It's the first time I've used space profiling ("+RTS -hc"

[16:14] <svnbot6> r12523 | audreyt++ |   on "make prof"), and wow was it effective.

[16:15] <audreyt> (*60% only on large modules. on very small ones, it's more like 25%.D[D[D[D[D[D)

[16:15] <audreyt> (but still...)

[16:19] <gaal> w00t

[16:20] *** diakopter_ joined
[16:20] <gaal> is there perhaps a faster *codeUTF8 implementation available?

[16:20] <gaal> do it in ffi entirely?

[16:21] <gaal> uh why is it even String->String?

[16:22] <audreyt> because Parsec takes String

[16:22] <xerox> gaal: ask dcoutts, I think he knows the right ways to do it

[16:22] <audreyt> (the heap overflow happens at the entrance to Parsec, namely withProgramRun)

[16:23] <audreyt> it's not in the usual place such as "cast".

[16:23] <audreyt> so until we switch to linspire or sjanssen's bytestring parsec

[16:23] <audreyt> --both of which doesn't have an url yet--

[16:23] <gaal> audreyt: is it an encoding of the entire program string or of parts?

[16:23] <audreyt> entire program

[16:23] <gaal> linspire have a bytestring parsec!?

[16:23] <gaal> wow

[16:24] <audreyt> spj et all's history-v2 paper quotes them saying their bytestring parser has speed indistuiguishable from cat.

[16:24] <audreyt> and meory use is 10% compared to parsec

[16:24] <audreyt> which all sounds very reasonable

[16:24] <gaal> well, then it's probably moose to Buf.unpack . encode . Buf.pack

[16:24] <audreyt> it's moose. the current treatment is probably best we can do

[16:25] <xerox> audreyt: I pinged stepcut about it but he didn't answer or something, yarrr.

[16:25] <audreyt> thanks, xerox :)

[16:25] <gaal> I meant the happy moose :)

[16:25] <audreyt> ah :)

[16:25] <gaal> what's withProgramRun?

[16:25] <gaal> i gotta go

[16:26] <gaal> sorry

[16:26] <xerox> ~~

[16:26] <audreyt> er. doParseWith, actually

[16:26] <audreyt> the thing that calls decode in Pugs.hs

[16:26] <audreyt> see ya

[16:31] *** Psyche^ joined
[16:35] *** weinig is now known as weinig|bbl

[16:42] *** Psyche^ is now known as Patterner

[16:49] *** lambdabot joined
[16:51] *** Bit-Man joined
[16:59] *** weinig|bbl is now known as weinig

[17:15] *** plisk joined
[17:26] *** plisk_ joined
[17:30] *** jikanter joined
[17:30] *** evalbot_12523 joined
[17:37] *** jikanter joined
[17:55] *** justatheory joined
[18:07] *** ruoso joined
[18:10] *** Bit-Man joined
[18:18] <nothingmuch> seen markstos

[18:18] <nothingmuch> jabbor: seen markstos

[18:18] <nothingmuch> aaaah?

[18:31] *** foo\ joined
[18:35] *** justatheory joined
[19:01] *** MacVince joined
[19:11] *** justatheory joined
[19:12] <svnbot6> r12524 | audreyt++ | * Another 25% combined win, this time thanks to retainer set

[19:12] <svnbot6> r12524 | audreyt++ |   profiling (+RTS -hr) to save heap space.

[19:12] <svnbot6> r12524 | audreyt++ | * Loading pads from YAML prelude now saves an unpack/pack roundtrip.

[19:12] <svnbot6> r12524 | audreyt++ | * The heavily used "string" matcher no longer cause memory leaks.

[19:12] <svnbot6> r12524 | audreyt++ |   (This was #1 reason why parsing slows down semi-exponentially.)

[19:12] <svnbot6> r12524 | audreyt++ | * Lazy data constructors (Maybe, (:)) in the tight Parser.Operator

[19:12] <svnbot6> r12524 | audreyt++ |   loop are made strict to reduce leaks when there are a large number

[19:12] <svnbot6> r12524 | audreyt++ |   of user-defined functions that could influence parsing.

[19:36] <gaal> audreyt: who provides the 'encode' and 'decode' functions used by encodeUTF8?

[19:37] <audreyt> UTF8.lhs

[19:37] *** cmarcelo joined
[19:37] <gaal> oh. so much for grep ^encode :-)

[19:38] <wolverian> ack

[19:38] <audreyt> I should sleep, but I'm having too much fun with hp2ps :)

[19:38] <wolverian> . o (Does ack parse lhs files?)

[19:38] <audreyt> prolly not

[19:38] <wolverian> yeah.

[19:39] <gaal> wolverian: i hacked mine so it at least searches them... but does it purport to parse code?

[19:39] <audreyt> gaal: send Andy the hack?

[19:39] <wolverian> gaal, no, I don't think so, but it could!

[19:40] <gaal> audreyt: surely encode would be faster if it were inside bytestring and operated on strings not chars?

[19:41] <gaal> ie not via encodeOne?

[19:41] <gaal> is the Elbereth poem Pugs-contributed?

[19:42] <gaal> does seq seep down and force encodeOne to be strict too?

[19:42] <audreyt> surely is.

[19:42] <audreyt> seq on length forces the entire list

[19:43] <audreyt> encode would be faster if it's in bytestring, but if the consumer in String, pack+unpack overhead may well be larger.

[19:43] <audreyt> the profiling is showing decodeUTF8 + encodeUTf8 is currently <1% of time

[19:43] <audreyt> and 3% of space

[19:43] <gaal> isn't there a cheaper way to construct a bytestring for this purpose?

[19:44] <audreyt> so please not be worrying about them :)

[19:44] * TreyHarris blinks

[19:44] <gaal> okay :)

[19:44] <gaal> my hovercraft is full of strings

[19:44] <audreyt> :D

[19:45] <cmarcelo> hello folks

[19:45] <TreyHarris> i find myself doing "svn stat -u | perl -ne 'print unless /^\?/'" a lot.  is there a faster way, some flag I haven't noticed or something?

[19:45] <cmarcelo> audreyt: any suggestion on that strange 6.4.2 slowdown here?

[19:45] <leo> TreyHarris: svn st -q

[19:46] <gaal> TreyHarris: apart from |grep -v ^\? ...

[19:46] <gaal> add svn:ignore properties to things that should obviously be ignored

[19:46] <TreyHarris> gaal: perl's faster than grep :-)

[19:46] <audreyt> cmarcelo: not sure... I'm hoping that my last few patches would help 6.4.2 as well

[19:46] <TreyHarris> leo: that prints nothing at all :-)

[19:46] <gaal> actually, prolly not.

[19:47] <TreyHarris> ah but -uq.... there's the ticket

[19:48] <TreyHarris> gaal: on file sizes of any significance, it is.  at least on OS X.

[19:48] <cmarcelo> audreyt: ok, i'll try it. was there any anomaly in that prof summary I paste or the proportions were sane?

[19:48] <audreyt> that was sane

[19:52] <gaal> audreyt: done (patch to Andy)

[19:52] <audreyt> gaal++

[19:52] <gaal> hah, 2 lines

[19:52] <audreyt> it's curious to note that spj implemented the .hs-boot rationalization due to you

[19:52] <audreyt> and the nfound out GHC itself ws using .hs-boot inconsistently with .hs

[19:52] <gaal> something deserving of a ++ would be to refactor the fileliest out to a config file :)

[19:53] <gaal> I'm beginning to think that ".hs-boot rationalization" should be "cat *hs" :-(

[19:54] <audreyt> oy. 6.5 not working for you yet? :)

[19:54] <gaal> no -- bindist wants readline 4, debian doesn't carry it

[19:54] <gaal> and I don't feel like installing my one one

[19:54] <audreyt> you can get that by hand surely

[19:54] <gaal> though come to think of it

[19:54] <audreyt> it's trivial

[19:54] <gaal> that's much easier than getting a ghc by hadn :)

[19:55] <audreyt> excellent reasoning sir

[19:55] * xerox is compiling ghc

[19:55] <xerox> ...for the first time since I learned Haskell, hehe.

[19:55] * gaal seeks a readline4.tgz

[19:57] <svnbot6> r12525 | audreyt++ | * some more `seq` to get a pretty linear space on the heap graph.

[19:58] <gaal> audreyt: how bad was the nonlinearity in concrete nubmers? eg. on a ~100k source file

[20:01] <xerox> Dum de dum

[20:02] <xerox> audreyt: does it take long to build GHC on your macbook?

[20:02] <audreyt> xerox: ~3hr I think

[20:02] <xerox> Do you do make -j3 ?

[20:02] <audreyt> gaal: "string"'s leak only occurs when it matches but not immediately demanded, so it varies a lot

[20:02] <audreyt> no

[20:04] <audreyt> gaal: unlike the "decodeUTF8" leak, which basically keeps a thunk alive for each chacracter of the input source

[20:04] <gaal> ouch!

[20:04] <audreyt> parsec is great in that it can parse infinite streams

[20:05] <audreyt> sometimes it's not so great when you know you are dealing with finite source files that can fit in memory :)

[20:05] *** cmarcelo left
[20:07] *** awwaiid joined
[20:07] <gaal> yay, the familiar ol' [n of n] 6.5 message looms again!

[20:08] <audreyt> ooh

[20:08] <gaal> oh but HsJudy is broke

[20:08] <pasteling> "gaal" at 192.115.25.249 pasted "judy breakage on 6.5" (34 lines, 1.5K) at http://sial.org/pbot/19169

[20:10] <audreyt>      warning: "__GLASGOW_HASKELL__" redefined

[20:10] <audreyt> Private.hsc in judy has a version check

[20:10] <audreyt> check the headers a bit? it works here

[20:11] <gaal> yes looking

[20:13] <gaal> what's Private_hsc.h genned from? it indeed has a #define __GLASGOW_HASKELL__ 604

[20:13] <gaal> maybe this is stale, let me clean things up

[20:16] <xerox> ghc doesn't have smoke test eh... :)

[20:16] <gaal> pugs' make clean/realclean should run clean in third-party/*

[20:16] <xerox> What does pugs use for it?

[20:16] <audreyt> ghc surely has

[20:17] <gaal> xerox: for smoke tests? lots of stuff

[20:17] <xerox> Oh, it has?

[20:17] <audreyt> ghc/testsuite/

[20:17] <xerox> Didn't know, nice. I'll try it when it finishes compiling.

[20:18] * gaal wonders where QuickCheck/LectroTest might come in handy in Pugs' t/

[20:19] *** marmic joined
[20:20] <gaal> xerox: if you're interested in Pugs testing, see http://perlcabal.org/~gaal/pugstest/

[20:20] <lambdabot> Title:

[20:20] <gaal> http://perlcabal.org/~gaal/pugstest/start.html even

[20:20] <lambdabot> Title:

[20:20] <xerox> Will do, now the system is too slow for anything, though :)

[20:20] <gaal> (hmm why no title?)

[20:21] <xerox> lambdabot is having a bad time

[20:21] <xerox> > 2+2

[20:21] <lambdabot>  /home/pls/lib/ghc-6.4.2/package.conf: openFile: hardware fault (Input/output...

[20:21] <xerox> We're waiting for dons to wake up and check :(

[20:22] <gaal> no there really is no title on that page. weird.

[20:22] <xerox> Ah.

[20:22] <gaal> ok, running 'make clean' in HsJudy/ helped.

[20:25] <gaal> any idea how 6.5 compares with 6.4.2 in compilation speed?

[20:26] <gaal> I guess we'll know in 30-odd minutes when this build finishes :)

[20:30] <gaal> i should probably have cleared ccache before doing this exercise though...

[20:30] <svnbot6> r12526 | audreyt++ | * Restore support for utf8 identifiers in programs.

[20:31] <audreyt> ?eval 536 / 670 * 100

[20:31] *** evalbot_12523 is now known as evalbot_12525

[20:31] <evalbot_12525> 80/1

[20:31] <gaal> dRat.

[20:31] <audreyt> so smoke apparently thinks there's a 20% win today, everything considered

[20:32] <audreyt> on my computer here, that is

[20:32] <gaal> whee!

[20:32] <audreyt> TimToady's numbers (with GHC 6.4) seems to agree with mine linearly pretty much

[20:32] <audreyt> whee indeed :)

[20:32] <audreyt> s/seems to agree/seemed to have been agreeing/

[20:32] <audreyt> zzz &

[20:33] <gaal> could knight ode tree

[20:42] *** weinig joined
[20:44] <TreyHarris> how can i diagnose what's going wrong when i get "user error (incompatible version number for compilation unit)" out of prove6

[20:44] <gaal> you need to rm a .yml file

[20:45] <gaal> having that error message include the offending filename is proably a good idea :)

[20:45] <gaal> for now, strace

[20:46] <gaal> or fix the message :)

[20:48] <TreyHarris> hm, 'user error.*incompatible' doesn't appear in the sources.  any hint?

[20:48] *** weinig is now known as weinig|bbl

[20:48] <gaal> src/Pugs/Prim/Eval.hs:128

[20:49] <gaal> simply change to

[20:49] <gaal> err $ "incompatible blah: " ++ fileName'

[20:51] <TreyHarris> thanks

[20:51] <gaal> TreyHarris++

[20:53] <gaal> so, 6.5 is slower to compile Pugs from realclean than 6.4.2 by about 15% :(

[20:53] <svnbot6> r12527 | fglock++ | * v6 - fixed subroutine declarator

[20:53] <svnbot6> r12527 | fglock++ | - fixed class method calls on 'self'

[20:53] <gaal> but that may have been related to ccache misses

[20:54] <gaal> let's see how they compare running part of t/

[21:00] <gaal> wow, on the other hand 6.5 produces a *much faster* pugs!

[21:00] <xerox> Yarrr

[21:00] <xerox> It took 2hours

[21:00] <xerox> ...fast? :D

[21:01] <gaal> t/builtins takes 26 cpu seconds on 6.5, 42 on 6.4.2

[21:03] <TreyHarris> gaal: woot

[21:03] <gaal> what platforms is 6.5 hard to get running on? on debian it's kinda klunky

[21:04] <gaal> but I really feel like dropping 6.4...

[21:04] <xerox> Somebody should do this kind of work with GHC

[21:05] <xerox> A community to make it FAST :)

[21:05] <gaal> offer a phd as bounty?

[21:08] <xerox> ?fptools System.IO

[21:08] <lambdabot> http://darcs.haskell.org/packages/base/System/IO.hs

[21:08] <xerox> haha

[21:09] <gaal> ?

[21:09] <xerox> No the System.IO thing was unrelated

[21:10] <xerox> to the discussion here

[21:10] <gaal> k

[21:15] <TreyHarris> Trey

[21:15] <TreyHarris> lol

[21:15] <TreyHarris> macro misfired

[21:16] * gaal pines for the fr0rds and ghc 6.6

[21:16] <gaal> and also, goes to bed... zzZ &

[21:17] <TreyHarris> gaal: it must be coming from elsewhere, i'm not even getting the colon i put after "incompatible version".  but i can't find any text file that contains it.  gah, i guess i'm going to have to do make clean.

[21:17] <TreyHarris> bleh.  3 hours to find out what yml i need to delete

[21:17] <TreyHarris> of course, make clean will mean that i'll never know... :-/

[21:18] <TreyHarris> i wish os x has strace.

[21:18] <gaal> it does have something

[21:18] <gaal> ktrace maybe?

[21:19] <gaal> it works in the aixish model of start the service, do something, stop the service

[21:19] <gaal> it also has fam I think or some other thingie that can monitor file access

[21:19] <gaal> ask nothingmuch

[21:20] <gaal> anymoose, I really doubt your error is coming from somewhere else

[21:21] <TreyHarris> why wouldn't the colon display?

[21:21] <gaal> are you sure you're running the right pugs?

[21:21] <TreyHarris> yes.  modify time was after my last make

[21:21] <TreyHarris> i even had prove6 print out the path of pugs

[21:22] <TreyHarris> Eval.hs is getting recompiled, but it isn't getting included, or else the message is coming from elsewhere

[21:24] *** weinig|bbl is now known as weinig

[21:24] <gaal> hm well, come to think of it it's weird that the 'failed loading Yaml: ' part of the error isn't there

[21:25] <gaal> but there's nowhere in the source that can otherwise produce this

[21:25] <gaal> can you just run it manually?

[21:25] <gaal> anyway I need to sleep

[21:25] <TreyHarris> ktrace worked.  it was blib6/lib/Prelude.pm.yml

[21:25] <gaal> you'll think of something :)

[21:26] <gaal> that's good too

[21:26] <TreyHarris> but i guess i can't really commit that change since it doesn't do anything

[21:26] <TreyHarris> guess i'll revert

[21:26] <TreyHarris> i do wonder where that error is coming from...

[21:26] <TreyHarris> ah, well :-)

[21:26] <TreyHarris> sleep tight

[21:26] <gaal> well, if you're up to it a fix would be good to have... if you chase it

[21:26] <gaal> thanks, bye :)

[21:28] <TreyHarris> ahhh

[21:28] <TreyHarris> i think i just figured it out

[21:29] <TreyHarris> /usr/bin/pugs is using ~/src/pugs/blib6/lib/Prelude.pm.yml, but ~/src/pugs/pugs is using /Library/Perl6/Prelude.pm.yml

[21:29] <TreyHarris> now, *why* that is so broken... I don't know :-)

[21:29] <TreyHarris> my installed copy is using my working dir libs, and vice versa...

[21:35] *** prefiks left
[21:35] *** diakopter joined
[21:40] *** takanori joined
[21:45] <svnbot6> r12528 | fglock++ | v6 - optimized op-precedence usage; gets about 10% performance; Test.pm

[21:45] <svnbot6> r12528 | fglock++ | compilation now requires <100M ram (was up to 400M)

[21:45] <clkao> (!)

[21:47] <obra> wow

[21:50] <nothingmuch> gaal: ktrace is like strace, in terms of usage

[21:50] <nothingmuch> it just dumps to a binary log

[21:50] <nothingmuch> and kdump filters that log

[21:50] <nothingmuch> and prints it

[22:21] <svnbot6> r12529 | Sage++ | The translator now declares any variables not already declared when the -S option is _not_ in effect. At present, it's not too smart: all variables are my, and _everything_ that's bot declared gets declared, even things that may not need to be explicitly defined.

[22:21] <svnbot6> r12529 | Sage++ | Anything the code declares will not be redeclared.

[22:21] <svnbot6> r12529 | Sage++ | This update includes updates to ASTUtil (for some new untility functions) ASTTranslate-sage (for the actual new translation) and TestInit.pm (to show off the new translations).

[22:21] <svnbot6> r12529 | Sage++ | The new TestInit.pm can be fed to pugs, as is, and run (I think) correctly. At the very least, it doesn't die...

[22:24] <svnbot6> r12530 | fglock++ | v6 - $?POSITION calls &?POSITION

[22:27] *** cmarcelo joined
[22:28] *** avarab joined
[22:31] *** ludan joined
[23:03] <TreyHarris> anyone know how to make a new Prelude.pm.yml?  i'm trying what seems obvious with util/gen_prelude.pl, but i'm getting "illegal hardware instruction"

[23:03] <svnbot6> r12531 | fglock++ | v6 - fixed a few warnings

[23:07] *** justatheory joined
[23:21] *** justatheory joined
[23:49] *** FurnaceBoy joined
