[00:29] *** mjk joined
[00:29] *** perlbot joined
[00:38] *** perlbot joined
[00:46] *** perlbot joined
[00:55] *** hikozaemon joined
[00:58] *** perlbot joined
[00:59] *** jdv79 joined
[01:08] *** neoesque joined
[01:41] *** jserv-- joined
[01:42] *** aufrank joined
[01:50] <aufrank> audreyt: ping?

[02:06] *** neoesque joined
[02:09] <svnbot6> r10302 | audreyt++ | * in docs/Perl6/Makefile.PL, don't propagate errors upward if LWP::Simple can't be found.

[02:33] <audreyt> aufrank: pong

[02:33] <aufrank> hi hi

[02:33] <aufrank> re: your comments on whitespace in Sig.pg

[02:33] <audreyt> gaal++ # compunit

[02:34] <audreyt> yes?

[02:34] <aufrank> rule bla { <subrule1> <subrule2 }

[02:34] <audreyt> vs

[02:34] <aufrank> is different than <subrule1><subrule2> ?

[02:34] <audreyt> rule bla { <sr1><sr2> }

[02:34] <audreyt> yes

[02:34] <aufrank> ok, I thought whitespace was _always_ cosmetic in rules

[02:34] <audreyt> rule blah {<sr1><sr2>}

[02:34] <aufrank> I thought that was the whole assume :x thing

[02:34] <audreyt> also means something different

[02:35] <audreyt> that's for regexes

[02:35] <aufrank> ok, this is good to know

[02:35] <audreyt> regex blah { ...cosmetic... }

[02:35] <aufrank> I thought it extended up into the "higher" forms

[02:35] <audreyt> but rules assume :w

[02:35] <audreyt> I mean :s

[02:35] <audreyt> whatever

[02:35] <aufrank> *

[02:35] <audreyt> the effect is that spaces in them are not compiled away

[02:35] <audreyt> they turn into <?ws>.

[02:35] <aufrank> ok

[02:36] <audreyt> so the way to thik about this

[02:36] <audreyt> is to merge things that allows no space

[02:36] <audreyt> rule blah { <sr1><sr2> }

[02:36] <aufrank> ok, I get it :)

[02:36] <audreyt> and sep things that must be sepped

[02:36] <audreyt> good :)

[02:37] <audreyt> this is all very new :)

[02:37] <audreyt> like, this-week new

[02:37] <aufrank> yeah, I noticed

[02:37] <aufrank> what's your mail reading client of choice?

[02:38] <aufrank> do you do mail and lists differently?

[02:38] <audreyt> yes

[02:38] <audreyt> I use thunderbird

[02:38] <audreyt> and sometimes gmail

[02:39] <audreyt> e.g. when I'm behind a oppressive firewall

[02:39] <aufrank> right

[02:40] <aufrank> and gmane for lists?  or you get all of p6* into thunderbird?

[02:41] <audreyt> the latter

[02:41] <aufrank> i see

[02:44] <aufrank> and tokens don't assume :s, only :ratchet

[02:44] <aufrank> (sorry, jumping back and forth here)

[02:45] <audreyt> yup.

[02:49] <svnbot6> r10303 | audreyt++ | * inc/Module/Install/Pugs.pm now absolutize the 'subdir' section so it no longer runs 'cd ..' when actually we are two-levels deep.  This is a bug with (some versions of) MakeMaker, apparently.

[02:50] <audreyt> ok. the win32 build errors reported by Limbic_Region appears to be a cygwin/win32 mixup

[02:50] <audreyt> it's now fixed.

[02:50] <svnbot6> r10304 | audreyt++ | * docs/Perl6/Makefile.PL: test for LWP.pm before LWP::Simple.

[02:50] * audreyt likes the monad shell

[02:50] <aufrank> audreyt: I definitely agree

[02:51] <aufrank> except that it's the Windows PowerShell now

[02:51] <audreyt> well, yeah.

[02:51] <aufrank> =\

[02:52] <aufrank> using the svk 1.07 in the monad shell you can hardly tell you're stuck on a windows box ;)

[02:52] <aufrank> the binary package, that is

[02:53] <audreyt> what's the equiv for ^Z in the MSH?

[02:53] <aufrank> I haven't found one

[02:53] <aufrank> I wondered the same thign

[02:53] <aufrank> *thing

[02:59] <audreyt> well, that's fine

[02:59] <audreyt> I've got screen ;)

[02:59] <aufrank> in MSH?

[02:59] <audreyt> # http://home.tiscali.de/emilio.lopes/screen/screen.html

[03:00] <audreyt> yup

[03:00] <aufrank> wow, that's really great

[03:01] <aufrank> I'll try it tomorrow at work :)

[03:01] <audreyt> though it has autoflush issues

[03:02] <audreyt> however

[03:02] <audreyt> screen -s cmd

[03:02] <audreyt> works just fine.

[03:02] <aufrank> so composing subrules when the characters that make them all run together is done with token

[03:02] * audreyt praises screen(1) technology

[03:03] <aufrank> :!words is done token { <adverb> <adv_twigil> <name> }

[03:04] <audreyt> yes.

[03:04] <aufrank> ok, I can dig it

[03:04] <audreyt> rule { <adverb><adv_twigil><name> }

[03:04] <audreyt> works too, because you may want the left-right boundaries

[03:04] <aufrank> yeah, but that's ugly ;)

[03:04] <audreyt> I know ;)

[03:04] <audreyt> so nvm :)

[03:04] <aufrank> oh, good point

[03:04] <audreyt> and it's a token for sure

[03:05] <audreyt> just make sure the thing that calls is a rule

[03:05] <aufrank> you'd get l-r boundaries when you composed it into something else

[03:05] <audreyt> yup

[03:05] <audreyt> Parsec's got ruleWs now

[03:05] <aufrank> rule bla { <pair> }

[03:05] <audreyt> so I should be able to handle whatevr rule/token combination you throw at me :)

[03:06] <aufrank> ok, I'm doing adverbs in Capture.pg right now

[03:06] <audreyt> yay

[03:06] <aufrank> I'll fix up ws issues in Sig.pg sometime this weekend

[03:07] <aufrank> scw mentioned that he doesn't know rules well enough to write some part of MiniPerl-- do you know what he needs a grammar for?

[03:07] <aufrank> I'm happy to wear this hat for a while

[03:07] <audreyt> he needs a grammar for your productions

[03:08] <audreyt> that is the miniperl part

[03:09] <aufrank> so this is the production part where match objects get turned into the syntactic representation?

[03:09] <audreyt> where match objects are _annotated_ with p6ast objects.

[03:09] <audreyt> the annotation is done with "return"

[03:09] <audreyt> {return}

[03:09] <aufrank> ok, that makes sense

[03:09] <aufrank> and how tied down are p6ast objects?

[03:09] <audreyt> and each subrule are annotated similarily

[03:09] <audreyt> the superrule composes the subrules

[03:10] <audreyt> for this moment, assume the Pugs "Exp" structure

[03:10] <audreyt> we'll invent things as we go along :)

[03:10] <aufrank> Exp ~~ / Expression / ?

[03:11] <audreyt> (the "Exp" structure will also need tweaking to match the new calling convention. I'm taking a look at it today, and will work on it fulltime after 6.2.12)

[03:11] <audreyt> yeah. see src/Pugs/AST/Internals.hs for the definition

[03:11] <audreyt> also gaal's slides may help

[03:11] <audreyt> # http://perlcabal.org/~gaal/peek/start.html

[03:12] <audreyt> lunch -- I'll bbiab

[03:12] <aufrank> k

[03:37] *** neoesque joined
[03:37] <meppl> gute nacht

[03:37] <aufrank> sleep good

[03:38] <meppl> ;)

[03:38] <meppl> (im so drunken ;)

[03:38] <aufrank> are there any twigils that are valid in named arguments?

[03:38] <meppl> again

[03:39] * aufrank needs to start keeping some beer around

[03:39] <merlyn> you mean somebody drank you?

[03:39] <meppl> no

[03:39] <merlyn> drunken = objective form

[03:39] <aufrank> merlyn!  Hi!  You were nice to me as a young monk about 6 years ago

[03:39] <merlyn> I am drunken = "$(somebody) drunk me"

[03:39] <meppl> so im silly, and drank, and i must go to work soon

[03:39] <merlyn> I am drunk = "I have been drinking"

[03:39] <meppl> at 10 o'clock

[03:40] <aufrank> without you, I might be using python right now =\

[03:40] <meppl> or 12 o'clocl

[03:40] <merlyn> I'm sorry.  You'd probably be better off indenting. :)

[03:40] <merlyn> Python as Guido Indented~!

[03:41] <aufrank> I indent-- any d*mn way I want to!

[03:41] <aufrank> oooh!  Snap!

[03:41] <aufrank> anywya, hi :)

[03:41] <merlyn> then there's PHP - http://tnx.nl/php.jpg

[03:41] <aufrank> yeah, that got posted in here the other day

[03:42] <meppl> *zZzZ

[03:46] *** phpError joined
[03:50] *** KingDillyDilly joined
[03:50] *** puetzk_ joined
[03:50] <KingDillyDilly> aufrank: Today too. I don't understand the choice in background.

[03:51] <aufrank> those are training wheels sitting on a park bench

[03:51] <aufrank> what's not to understand?

[03:51] <aufrank> (without a bike, to be totally clear)

[03:51] <KingDillyDilly> I didn't even know it was a park bench. I would have put them on the ground.

[03:52] <wolverian> hum. CPANPLUS::Dist::Deb says it might need to build debs for the dependencies of the module I am installing, but doesn't do so, and dpkg complains. augh.

[03:52] <aufrank> I await your line of posters with bated breath

[03:52] <aufrank> ;)

[03:52] <KingDillyDilly> Before I knew the context and saw the caption, I thought it had something to do with the internal mouse wheels.

[03:53] *** vel joined
[03:57] <wolverian> hm, now it seems to be building the deps too.

[03:58] <aufrank> audreyt: what are the restictions on the lhs and rhc of an explicit pair?

[03:59] <aufrank> is it really just 'rule pair { [ $<key> := <expression> ] <pair_constructor> [ $<value> := <expression> ] }' ?

[04:05] <aufrank> is there ever ambiguity between bareword lhs and nullary sub call lhs?

[04:05] <aufrank>  

[04:05] <aufrank> sub foo { "bar" }

[04:05] <aufrank> my $pair = foo => "baz";

[04:05] <aufrank> if exists $pair<foo> { say $pair<foo> }

[04:05] <aufrank> else { say $pair<bar> }

[04:06] <aufrank> I expect that you have to use 0-ary foo() on the lhs side if that's what you mean...

[04:11] <aufrank> new q:  what does space around grouping brackets do in the presence of :s ?

[04:11] <aufrank> rule bla { [<foo>|<bar>] } === rule bleh { [ <foo> | <bar> ] }

[04:12] <aufrank> I think I want :w turned off inside grouping brackets, but maybe I haven't thought through the ramifications of that

[04:17] *** Quell joined
[04:29] <spinclad> aufrank: S02: "But C<< => >> still autoquotes any bare identifier to its immediate

[04:29] <spinclad> left (horizontal whitespace allowed but not comments).  The identifier is not

[04:29] <spinclad> subject to keyword or even macro interpretation."

[04:29] <aufrank> spinclad++ # thanks!

[04:30] <spinclad> TimToady: in S02: "But note that C<..> is not a long dot because at least one internal space

[04:31] <spinclad> is required to differentiate from the range operator."  seems to refer to the late x. .y long dot form.

[04:34] <spinclad> aufrank: but note a little later:     %hash = (($keykey => $keyval) => $value);   and i don't quite see how to reconcile the two passages.

[04:35] <aufrank> spinclad: yeah, it's clear that $keykey gets interpolated into a string key, but I don't know what happens when you autoquote an anonymous pair

[04:36] <aufrank> audreyt: any way to pull the key and value out of a flattened pair within the rule that parses the flattened pair?

[04:37] <spinclad> ok, that could be part of it...  if we take the lhs as a qq string without the quotes but still with interpolation,

[04:38] <spinclad> ({$keykey => $keyval} => $value) could work by {} interpolation.

[04:38] <spinclad> (note change of inner brackets)

[04:39] <aufrank> token flattened_pair {

[04:39] <aufrank>     <is_flattened> <sigil> <twigil>? <name>

[04:39] <aufrank>     : { ($<key>, $<value>) := $<#(something)>.kv } # ?

[04:39] <aufrank> }

[04:39] <aufrank> spinclad: that seems much cleaner to me

[04:39] <aufrank> (your curly solution seems much cleaner, that is)

[04:40] <spinclad> it's still not clear to me how you decide when to start and stop parsing the string, though

[04:41] <spinclad> parse backwards from =>, how far?

[04:42] <aufrank> spinclad: yeah, my pair parser only supports an (optionally quoted) name on the lhs

[04:42] <spinclad> one token or {} expression, maybe

[04:42] <aufrank> if we expand it out to a full <expression> then it's unclear what autoquoting means applied to most expressions

[04:42] * KingDillyDilly runs from punctuation

[04:42] *** KingDillyDilly left
[04:43] <aufrank> [ <block> | <open_quote>? <name> <close_quote>? ] # something like this ?

[04:43] <aufrank> (where it's someone else job to define <block> ;)

[04:44] <aufrank> maybe there'll be a good motivation to define a <auto-quotable>

[04:44] <aufrank> or <qquotable>

[04:44] <spinclad> no idea.  sounds like a dreadful backtrack, just when we thought we got rid of them all

[04:44] <aufrank> I agree

[04:45] <aufrank> man, those taiwanese really know how to linger over there lunches

[04:45] <aufrank> audreyt is such a slacker!  ;)

[04:45] <spinclad> make her work harder!

[04:45] <spinclad> oh, wait -- that's me

[04:46] <aufrank> my gf is getting annoyed that I now tend to hack in bed until about 2 am every night

[04:47] <xinming> lisppaste3: url

[04:47] <lisppaste3> To use the lisppaste bot, visit http://paste.lisp.org/new/perl6 and enter your paste.

[04:49] <spinclad> oh, wait...  i misread that first passage:  it says 'autoquotes any bare identifier to its left', so (<expr>) => $val is fine, and you only have to hold off on a bareword one token to tell if it's a pair or function.

[04:50] <aufrank> much better

[04:50] <spinclad> it feels so much saner now

[04:50] <aufrank> perl6++

[04:50] <aufrank> cabal++

[04:51] <spinclad> and $keykey isn't a bareword

[04:51] <aufrank> right

[04:51] <aufrank> my foo example above did have barewords

[04:51] <aufrank> but this answers that

[04:52] <aufrank> foo => bar is always 'foo' => bar

[04:52] <aufrank> and never foo() => bar (or &foo => bar)

[04:56] <spinclad> 'no need to propagate confusion': who said that?

[04:57] <PerlJam> you did.  just now  :)

[04:57] <spinclad> oh, yeah... that was me, back then.

[04:57] <spinclad> maybe i should listen.

[04:58] <aufrank> I got told that after posting some cargo cult DBI code at the monastery back in the day

[04:58] <aufrank> boy was my face red

[05:06] <spinclad> (lack of) progress report on JudyHS: i've worked through some more ownership and readers-writers ramifications and a different possible API, but haven't coded concretely in the last couple days... ready to, now, though.  let's see how it goes.

[05:07] <aufrank> good luck :)

[05:07] <spinclad> and so to bed.  it's 01:00 here, early to bed for me lately.  &

[05:08] <aufrank> gnight

[05:08] <spinclad> g'night, all

[05:08] <spinclad> and thx

[05:13] *** neoesque joined
[05:24] <azurot1> I got a dumb terminal yesterday. now I need to find some cables to set it up

[05:50] *** hawkaloogie joined
[05:55] *** Maddingue joined
[06:28] *** hawkaloogie left
[06:31] *** reZo joined
[06:51] <svnbot6> r10305 | aufrank++ | beginnings of a parsing strategy for Perl 6 Captures

[06:51] <svnbot6> r10305 | aufrank++ | implements parsing of named arguments in Captures

[06:51] <svnbot6> r10305 | aufrank++ | contains questions (??? lines)

[06:51] <svnbot6> r10305 | aufrank++ | and tasks (XXX lines)

[06:54] <svnbot6> r10306 | aufrank++ | made some notes about the .pg files in src/Pugs/Parser/

[06:54] <svnbot6> r10306 | aufrank++ | includes tasks for people to go after

[06:54] <svnbot6> r10306 | aufrank++ | includes questions from effort so far

[06:54] <svnbot6> r10306 | aufrank++ | includes some references to information for future projects

[06:59] <aufrank> http://notebook.aufrank.net/development/p6parsing.html

[06:59] <aufrank> online version of that readme, for anyone who's interested

[07:03] <svnbot6> r10307 | aufrank++ | added link to online copy of this file

[07:04] *** marmic joined
[07:05] <aufrank> audreyt: src/Pugs/Parser/README.org is some notes I've been keeping around

[07:05] *** iblechbot joined
[07:05] <aufrank> if it's not useful, feel free to give it the ax.

[07:05] <aufrank> I can also take out the link if it's not appropriate

[07:06] *** penk joined
[07:09] <aufrank> ok, that's it for me for tonight

[07:38] *** drrho joined
[07:39] <gaal> is there a publically available of the monad shell somewhere? I'd like to try

[07:39] <gaal> (good morning!)

[07:57] *** neoesque joined
[08:21] *** azuroth joined
[08:31] *** elmex joined
[08:31] *** kane_ joined
[08:46] *** KingDiamond joined
[08:46] *** szbalint joined
[09:42] *** lichtkind joined
[09:45] *** drbean joined
[09:52] *** penk joined
[10:32] *** ruz joined
[10:36] *** Aankhen`` joined
[10:49] *** penk left
[10:54] *** chris2 joined
[11:09] *** rorx joined
[11:16] <Arathorn> gaal: www.microsoft.com/technet/scriptcenter/topics/msh, no?

[11:17] <Arathorn> unless you're talking about haskelly monads rather than windowsy monads

[11:17] <Arathorn> http://www.microsoft.com/technet/scriptcenter/topics/msh/download.mspx, even

[11:17] <Arathorn> stupid site

[11:20] *** lisppaste3 joined
[11:22] *** iblechbot joined
[11:23] <ingy> seen audreyt

[11:23] *** KingDiamond joined
[12:04] *** kolibrie joined
[12:14] *** drbean joined
[12:24] *** jsiracusa joined
[12:27] *** Limbic_Region joined
[12:38] <svnbot6> r10308 | pmurias++ | removed a stray [ from the capture grammar

[12:47] *** jserv-- joined
[13:05] *** cdpruden joined
[13:05] *** Ymmv joined
[13:06] *** nnunley joined
[13:15] *** szbalint joined
[13:17] <audreyt> re :)

[13:21] <Arathorn> morning

[13:24] <audreyt> good localtime to you, too :)

[13:28] *** Qiang joined
[13:30] <Arathorn> these mac book pros really are rather nice

[13:31] <audreyt> I'm still holding out for the black macbook :)

[13:31] <Arathorn> should be here on tuesday, if the rumours are to be believed

[13:31] <audreyt> they said the same last tuesday...

[13:31] <Arathorn> indeed :(

[13:35] <Arathorn> hm, also very frustrating to use the ctrl-click idiom for right clicking if you're left handed, when there's only a left hand ctrl key

[13:36] <audreyt> I don't usually use pointers anyway...

[13:36] <audreyt> <- previously ion user

[13:37] <gaal> ^^ current hand waver

[13:37] <gaal> rehi :)

[13:37] * Arathorn has used ratpoison a fair bit

[13:37] <Arathorn> but if you're drinking the OSX kool aid...

[13:37] *** hexmode joined
[13:39] <audreyt> hand waver? :)

[13:41] <azuroth> ion?

[13:41] <gaal> ~Y~

[13:41] <audreyt> http://modeemi.cs.tut.fi/~tuomov/ion/

[13:41] <azuroth> looks interesting

[13:41] <audreyt> what did I do to earn this hand-waver title? :)

[13:42] <gaal> vi S??.pod

[13:42] <gaal> :-P

[13:42] <gaal> sorry, I'm just pulling your moose

[13:42] <audreyt> I thought I was degaussing the waves there...

[13:43] <gaal> yes but there was interference

[13:43] <audreyt> ahh indeed

[13:43] <audreyt> thanks for the reminder

[13:47] *** miyagawa joined
[13:47] *** chris2 joined
[13:53] *** ruz_ joined
[13:54] *** justatheory joined
[14:13] <audreyt> TimToady: should this be a named call?

[14:13] <audreyt> f(('x')=>3)

[14:13] <audreyt> currently pugs has to do rather expensive backtracking to make it into named.

[14:14] <audreyt> instead of a "if an arg starts with left paren then it's never named" rule

[14:15] <Juerd> I think that calculated argument names are as bad an idea as calculated gotos :)

[14:15] <audreyt> well, but 'x'=>3 should be ok

[14:15] *** FurnaceBoy joined
[14:15] <aufrank> hey folks

[14:15] <audreyt> constant-only keys is a good idea

[14:16] <Juerd> Yes, but it may not be a bad idea to say that a ( makes it positional, always, regardless of where the ) is.

[14:16] <audreyt> nod.

[14:16] <audreyt> I'd prefer that; makes it a bit easier to explain

[14:16] <audreyt> aufrank: hi

[14:16] <aufrank> Juerd: (f(('x') => 3)) should be the same s as f(('x') => 3) ?

[14:17] <Juerd> If someone must calculate, they can still use "{...}" => ...

[14:17] <Juerd> aufrank: I don't see the relevance of your outer parens.

[14:18] <azuroth> what about $x => 3, or $p = $x => 3; f($p) ?

[14:18] <aufrank> you said parens make it positional no matter where they are

[14:18] <Juerd> aufrank: I wasn't careful enough, and hoped audrey would understand what I meant.

[14:18] <audreyt> no matter where the "right" paren is.

[14:18] <aufrank> maybe I meant to ask about (f('x' => 3))

[14:19] <audreyt> I think uwas precise

[14:19] <audreyt> s/u/it /

[14:19] <audreyt> that is, a named-arg never start with (

[14:19] <audreyt> regardless of where the matching ) falls

[14:19] <aufrank> I see

[14:19] <audreyt> \(x=>1) # named

[14:19] <aufrank> that would make some sense

[14:19] <audreyt> \('x'=>1) # named

[14:19] <audreyt> \(('x'=>1)) # positional

[14:20] <audreyt> \(('x')=>1) # positional

[14:20] <audreyt> I'd prefer that over

[14:20] <Juerd> I still think captures shouldn't be \(), but can't think of something better :)

[14:20] <audreyt> \(('x'=>2)=>1) # named(!)

[14:20] <aufrank> is there a difference between *pair and *($pair) ?  is the second allowed?

[14:21] <audreyt> no difference. yes, allowed.

[14:21] <aufrank> ok, that's what I figured

[14:21] <aufrank> audreyt: you don't mind my notes living where I put them in the tree for now?

[14:22] *** amnesiac joined
[14:23] <audreyt> To be more specific, named arguments may never begin with C<(>:

[14:23] <audreyt> doit 'when' => ('now');     # always a named arg doit ('when' => 'now');     # always a positonal arg doit ('when') => 'now';     # always a positonal arg

[14:24] <audreyt> er, again:

[14:24] <audreyt> To be more specific, named arguments may never begin with C<(>:

[14:24] <audreyt>     doit 'when' => ('now');     # always a named arg

[14:24] <audreyt>     doit ('when' => 'now');     # always a positonal arg

[14:24] <audreyt>     doit ('when') => 'now';     # always a positonal arg

[14:24] <audreyt> TimToady: sanity check for the 4 lines before I commit to S06? :)

[14:24] <audreyt> aufrank: I don't mind at all

[14:26] <aufrank> :)

[14:27] <aufrank> ok, time to head in to the office

[14:33] <svnbot6> r10309 | audreyt++ | * Pugs.Parser: Conjectural - instead of using the expensive

[14:33] <svnbot6> r10309 | audreyt++ |   backtacker and/or post-processor, simply rule that a named

[14:33] <svnbot6> r10309 | audreyt++ |   arg can never begin with a left parens:

[14:33] <svnbot6> r10309 | audreyt++ |     doit 'when' => ('now');     # always a named arg

[14:33] <svnbot6> r10309 | audreyt++ |     doit ('when' => 'now');     # always a positonal arg

[14:33] <svnbot6> r10309 | audreyt++ |     doit ('when') => 'now';     # always a positonal arg

[14:33] <svnbot6> r10309 | audreyt++ |   the behaviour of the last one is the one that's been changed.

[14:33] <svnbot6> r10309 | audreyt++ |   In the rare case where you'd like to make calculated names

[14:33] <svnbot6> r10309 | audreyt++ |   with operators looser than =>, write:

[14:33] <svnbot6> r10309 | audreyt++ |     doit "{f 1, 2, 3}" => 'now';

[14:41] *** hexmode joined
[14:42] *** cratylus joined
[14:42] <svnbot6> r10310 | scw++ | Pugs::Compiler::Rule: change eol stype and set svn prop on some files

[14:49] *** froh-doh joined
[15:00] <svnbot6> r10311 | audreyt++ | * Fix t/subroutines/return_with_trailing_stuff.t by hard-coding calls

[15:00] <svnbot6> r10311 | audreyt++ |   to statement-level return() and yield() to inherit caller context,

[15:00] <svnbot6> r10311 | audreyt++ |   instead of forcing void context upon them.  Capturizing should render

[15:00] <svnbot6> r10311 | audreyt++ |   this obsolete.

[15:00] <audreyt> bbl... &

[15:02] *** kanru joined
[15:06] <TimToady> I think it'd make more sense to say that *only* the autoquoted form is a named argument by default, and you have to use * to make anything else into an argument.

[15:06] <Juerd> Hmmm

[15:06] <TimToady> but it's a pre-caffeinated think

[15:07] <Juerd> Your reasoning is that you have to have valid identifiers anyway?

[15:07] <TimToady> yep

[15:07] <Juerd> Makes sense.

[15:08] <TimToady> must wander through shower &

[15:10] *** drbean joined
[15:15] *** flounder99 joined
[15:16] *** meppl joined
[15:24] *** ruz_ joined
[15:26] *** DaGo joined
[16:04] *** weinig joined
[16:17] *** iblechbot joined
[16:25] *** weinig joined
[16:40] *** aufrank joined
[16:41] *** nnunley joined
[16:42] <aufrank> hey folks

[16:42] <aufrank> quick question:

[16:43] <Juerd> ...

[16:43] <aufrank> when I open a new frame with C-x 5 2, the colors I set with set-backgound-color and set-foreground color aren't applied to the new frame

[16:43] <Juerd> Oh, there it is :)

[16:43] <aufrank> whoops

[16:43] <aufrank> wrong channel

[16:43] * aufrank blushes

[16:44] <Juerd> I was all excited.

[16:44] <aufrank> I'll try to come up with one for you, Juerd ;)

[16:44] * Juerd gets excited again

[16:49] <aufrank> Juerd: think about parsing array slices

[16:50] <aufrank> what would you want the Match object to hold when you got done parsing something like $foo[1,2,3;4;1..9] ?

[16:50] <aufrank> (that's my question)

[16:51] <particle_> is ; denoting multi-dimensions?

[16:52] <aufrank> particle_: yes

[16:53] <particle_> wouldn't it be a 3x1x9 array?

[16:55] <Juerd> aufrank: I have no idea.

[16:55] <aufrank> particle_: yes, I think it would

[16:55] <aufrank> Juerd: me neither

[16:55] <aufrank> ;)

[16:56] <particle_> aufrank, did you mean @foo, or is there a subtlety i missed?

[16:56] <aufrank> particle_: I might have even meant @@

[16:56] <particle_> k

[16:56] <aufrank> I am really fuzzy on multidim stuff right now

[16:57] * particle_ thinks in 1D

[16:57] <particle_> if you're moving fast enough, everything looks like a line

[17:03] <aufrank> Juerd: different question:  what are you working on these days? :)

[17:04] <FurnaceBoy> sounds like something a particle might say :)

[17:04] *** Ymmv joined
[17:04] * particle_ waves

[17:05] <azuroth> different question: how do you find the intersection of two lines in 2d

[17:06] *** jserv-- joined
[17:06] <aufrank> azuroth: are you teasing me?

[17:06] <Juerd> aufrank: Not much. Mostly business stuff and watching tv. My wrists hurt almost all the time.

[17:06] <aufrank> yargh

[17:06] <azuroth> I'm not teasing you in that I sincerely wanted to know, if that's a sufficient question

[17:06] <azuroth> err, answerrr

[17:07] <kolibrie> Juerd: when I noticed my wrists were hurting, I bought a recumbent bicycle

[17:07] <kolibrie> all fixed now

[17:07] <aufrank> oh, I thought you were just joining in on my litany of 'different question:'s ;)

[17:07] <Juerd> kolibrie: I haven't used my bicycle for over a year now.

[17:07] <azuroth> it was a bit of both, aufrank

[17:07] <kolibrie> Juerd: and you call yourself Dutch

[17:07] <Juerd> kolibrie: I'd advise you to also try different keyboards, and a different keyboard layout if you still use qwerty.

[17:08] <Juerd> For me, dvorak means I can use a keyboard for about twice as long

[17:08] <kolibrie> Juerd: I've been on Dvorak for almost a year, thanks to you :)

[17:08] <Juerd> Oh, okay :)

[17:08] <azuroth> twice as long? that's probably ten times as long as you should be ;-)

[17:08] *** ruz joined
[17:09] *** Limbic_Region joined
[17:10] <Arathorn> tried a maltron?

[17:11] <particle_> azuroth? intersection of two lines... get theformulae for the lines ,and solve

[17:11] <particle_> iy1 = m1 * x1 + b1 (same for y2)

[17:11] <particle_> s/iy/y/

[17:12] <Juerd> azuroth: No, couldn't afford one.

[17:12] <Juerd> azuroth: So I tried the clone, Kinesis Contoured Advantage.

[17:12] <azuroth> s/azuroth/Arathorn/ :-)

[17:12] <Juerd> Eh, yea

[17:13] <Juerd> I probably read only a.*th.*

[17:13] <Juerd> Arathorn: No, couldn't afford one.

[17:13] <Juerd> Arathorn: So I triedthe clone, Kinesis Contoured Advantage.

[17:13] <Juerd> I'm using it now.

[17:14] <azuroth> the 'solving' part is what gets me, particle_. I think I can find the distance from start of line to other line.. then do some funky stuff with the normal of the first line, since they form a right-angled tri?

[17:14] <particle_> y = m1 x + b1 = m2 x + b2

[17:14] <Arathorn> yeah - the kinesis ones seemed the best bet to me, short of throwing $$$

[17:14] <particle_> given m1, m2, b1, b2, you can solve

[17:15] <particle_> y = 3x+2 = 4x-1 ## do these intersect?

[17:15] <TimToady> I believe I'm about to dehuffmanize unary * and **.

[17:16] <particle_> whatever

[17:16] <particle_> :)

[17:16] <aufrank> unary:<*> === whatever?

[17:16] <particle_> no

[17:16] <azuroth> but I don't care whether they intersect, the computer does :-(

[17:17] <aufrank> what's unary:<**>

[17:17] <aufrank> ?

[17:17] <aufrank> and is unary:<foo> actually written term:<foo>  ?

[17:17] <wolverian> azuroth, Math::Intersection::StraightLine :)

[17:17] <TimToady> prefix:<**> is the "steamroller", eager flattening like P5

[17:18] <aufrank> prefix is the same as unary?

[17:18] <TimToady> prefix is one form of unary

[17:18] <TimToady> prefix is the "unmarked" form of unary

[17:18] <particle_> unary * looks like *(0..^7) or such

[17:18] <TimToady> but postfix operators are also technically unary

[17:18] <aufrank> and you're dehuffmanizing that prefix form?

[17:18] <particle_> lazy array interpolation

[17:19] <TimToady> push *@args;

[17:19] <azuroth> wolverian: :D

[17:19] <TimToady> but it's interfering too much with * as global and * as Whatever

[17:19] <TimToady> and I don't think we need to copy Ruby that closely here.

[17:20] <particle_> what's it look like expanded?

[17:20] <TimToady> so I want some thing a little longer for *@args.

[17:20] <TimToady> what's what look like expanded?

[17:20] <particle_> dehuffmanized

[17:20] <Juerd> ***@args

[17:20] <TimToady> :*@args perhaps

[17:20] <TimToady> args(@args) perhaps.

[17:20] <particle_> *..@args

[17:20] <Juerd> Not another colon please

[17:21] <particle_> mine's a sideways colon

[17:21] <Juerd> Circumfix *** *** :)

[17:21] <particle_> () aren't lazy anyway?

[17:21] <Juerd> ***@args***

[17:21] <Juerd> Gives the expression wings

[17:22] <aufrank> TimToady: I agree that they interfere.  When I first read S06 I posted to p6l asking what the connection was between marking global-ness and marking lazy flattening

[17:22] * particle_ gives juerd a red bull

[17:22] <TimToady> It's only *@foo because that's what Ruby uses, actually.  Well, and both Ruby and C are using * there to mean a kind of dereferencing.

[17:23] *** ghenry joined
[17:23] * aufrank searches the top row of his keyboard

[17:23] <TimToady> Yeah, been there...

[17:23] <particle_> can't use `

[17:23] <azuroth> what about pipe?

[17:23] <TimToady> still reserving that for users

[17:24] <TimToady> *|@foo

[17:24] <TimToady> |*@foo

[17:24] <particle_> yuck

[17:24] <TimToady> need to keep the * in there, I think, so we also get **

[17:24] <aufrank> sort of like "open up @foo"

[17:24] <azuroth> /

[17:24] <TimToady> :$foo already means :foo($foo), which is why :*$foo kinda means "get the name indirectly".

[17:25] <azuroth> /(\@foo)

[17:25] <TimToady> Did think about */@foo maybe

[17:25] <TimToady> same reasoning

[17:25] <particle_> *<@foo

[17:25] <TimToady> hmm

[17:26] <aufrank> visual yuck

[17:26] <azuroth> it looks like a clown. I like it

[17:26] <TimToady> the only think I don't like about args(@foo) is that it uses up a really nice word.

[17:26] <aufrank> also, too close to *<@foo>, whatever that would mean

[17:27] <azuroth> _\ "un-slash"

[17:27] <TimToady> and everything else about arguments is punctuational

[17:28] <particle_> swym: lazy(@foo)

[17:29] <aufrank> vs eager(@foo)

[17:29] <TimToady> except I think that means something else right now.

[17:29] <aufrank> is *@foo the same as @foo is lazy?

[17:29] * particle_ jumps over the lazy foo

[17:29] <aufrank> maybe we want a generic prefix trait notation?

[17:32] *** FurnaceBoy is now known as FB|afk

[17:33] <TimToady> flat() and flatnow()...

[17:33] <particle_> now & later

[17:33] <TimToady> backwards huffman

[17:35] <aufrank> time for neologisms

[17:35] <aufrank> splat and splort

[17:36] <TimToady> did think a little about stealing unary = and == for this

[17:37] <aufrank> those are iterator-makers now?

[17:37] <particle_> unary = is filehandle read?

[17:37] <TimToady> unary = is tell iterator to iterate

[17:37] <aufrank> we were close particle_.  points for trying ;)

[17:38] <TimToady> but we were waffling about its meaning in list context anyway...

[17:38] <TimToady> and $x = =$fh is really ugly.

[17:38] <particle_> well, aren't you basically making the array an iterator?

[17:39] <aufrank> do we have $=foo yet?

[17:40] <aufrank> (is there a general distinction between twigil functionality and prefix functionality?)

[17:40] <TimToady> no, but I don't think a twigil is right for this

[17:40] <TimToady> twigils almost always indicate weird scoping.

[17:40] <aufrank> I see

[17:42] <particle_> *+@foo

[17:42] <aufrank> TimToady: if you hadn't already grabbed @@ for multidim, I might have said @foo is passed as an array, @@foo is a lazy flattened list, @@@foo is an eager flattened list

[17:43] <TimToady> well, I just need to let it rattle around a little more.  Mostly just wanted to give y'all a heads up to the immiment demise of * and **.

[17:43] <aufrank> particle_: why are you flattening @foo.count ? (or whatever method returns number of elems)

[17:44] <TimToady> hmm.  [,] is an interesting idea.

[17:44] <aufrank> how to you eagerize it?

[17:44] <TimToady> eager as a list operator.

[17:45] <TimToady> The one niggly little thing about [,] is that it would have to be a list operator.

[17:45] <TimToady> so you'd have to say [,](@foo), @bar to not apply it to @bar

[17:46] <TimToady> that might not be a showstopper.

[17:46] *** FB|afk is now known as FurnaceBoy

[17:46] <TimToady> and [,] is *very* recognizably metasyntactic.

[17:46] <aufrank> is there a way to hyper op it?

[17:47] <TimToady> eh?  list operators are naturally somewhat hyperopey

[17:47] <aufrank> I'm wondering about a @foo>>infix:<,> or something

[17:48] <aufrank> to eliminate the (@foo), @bar restriction

[17:48] <kolibrie> I can immediately see what [,](@foo) means, compared with some of the other ideas just brainstormed

[17:48] <particle_> i assume list context is for all reduction ops. good idea to add a (@foo), @bar example to S03

[17:48] <aufrank> I like [,] as well

[17:48] <TimToady> hmm @foo.[,] almost works

[17:49] <TimToady> @foo.[*] already means something though.

[17:49] <particle_> ., method postfix?

[17:49] <TimToady> too invisible.

[17:49] <TimToady> idea is, can we put a reduce on the right end of @foo

[17:50] <particle_> (@foo)[,]

[17:50] <particle_> :)

[17:50] *** ruz joined
[17:50] <aufrank> with [,]@foo, how do you do:

[17:50] <aufrank>     push @foo, @bar;

[17:50] <aufrank>     push *@foo, @bar;

[17:50] <aufrank>     push **@foo, bar;

[17:50] <aufrank> ?

[17:50] <TimToady> push @foo, @bar;

[17:50] <TimToady> push [,](@foo), @bar;

[17:50] <TimToady> push [,](eager @foo), @bar;

[17:51] <particle_> could the third be push [,], @foo, @bar ??

[17:51] <particle_> too many commas

[17:51] <particle_> push [,] @foo, @bar

[17:51] <aufrank> is the middle the same as push [,](lazy @foo), @bar ?

[17:52] <TimToady> lazy is the unmarked condition in list context already.

[17:52] <TimToady> I don't think the third can be eagerified by including @bar in the args list.

[17:53] <TimToady> the args list itself is still lazy.

[17:53] <particle_> good, because it's visually indistinct otherwise

[17:53] <TimToady> push [,] @foo, eager @bar would work though

[17:53] <particle_> the parens tend to disappear in my in-head parser

[17:54] *** FurnaceBoy is now known as FB|afk

[17:54] <TimToady> but I think 90% of the time we'll just see "foo [,]@args;"

[17:54] <PerlJam> um ... is [,] meant to replace flattening * ?

[17:55] <TimToady> Yes, I'm trying to dehuffmanize prefix:<*>

[17:55] <TimToady> and prefix:<**>

[17:55] <PerlJam> why exactly?  Wrong huffmanization?

[17:55] <TimToady> because it's too overloaded with GLOBAL:: and Whatever.

[17:56] <TimToady> and *foo() is visually ambiguous as to whether it means GLOBAL::foo() or *(foo())

[17:56] *** Arathorn is now known as Aragone

[17:56] <TimToady> I've been going back and forth in my copy of S06 about it, and getting unhappier and unhappier with borrowing * straight from Ruby

[17:57] <TimToady> And I actually think the flattener is going to be fairly rare in common practice.

[17:57] <PerlJam> ruby uses * to flatten too?

[17:57] *** obra_work joined
[17:57] <TimToady> That's where I stole^H^H^H^H^Hborrowed the idea from.

[17:58] <TimToady> Ruby needs it far more often than Perl because Ruby doesn't actually believe in list context, I think.

[17:59] <aufrank> thinks on my keyboard that look flat: - = _ | [ ]

[17:59] <TimToady> and because Ruby threw away the $/@ distinction.

[17:59] <aufrank> s/thinks/things/

[17:59] <PerlJam> so does that mean that * in sigs gets replaced too?

[17:59] <TimToady> no.

[17:59] <TimToady> that's a different *

[17:59] <TimToady> that's still a "globby" star.

[17:59] <aufrank> that's a slurpy star

[18:00] <TimToady> not a deref star

[18:00] <aufrank> right

[18:00] <TimToady> I think I really like [,] for it's meta-clarity.

[18:00] <particle_> ship it!

[18:00] * PerlJam trolls the example code in pugs looking for flattening *

[18:00] <TimToady> And for it's you-don't-have-any-clue value in alerting people that something strange is going on.

[18:01] <TimToady> It'll be hard to find, but look for * followed by a sigil.

[18:01] <PerlJam> yeah, it's proving difficult :)

[18:02] <aufrank> so how are these two different?

[18:02] <TimToady> and almost all of those will be slurpy stars

[18:02] <aufrank>     push (@foo), @bar;

[18:02] <aufrank>     push [,](@foo), @bar;

[18:02] <PerlJam> TimToady: yep.

[18:03] <TimToady> push (@foo), @bar is identical to push @foo, @bar

[18:03] <TimToady> parens are just used for grouping (mostly)

[18:05] <aufrank> @foo is in list context as the first argument of push, even without the parens

[18:05] <PerlJam> and push [,]@foo, @bar  is like push @foo[0], @foo[1..*], @bar;  ?

[18:05] <TimToady> we'd give [,] the extra little semantic push of dereferencing its argument

[18:05] <TimToady> PerlJam, yes

[18:06] <TimToady> As with any reduce, it pretends it wrote it out that way.

[18:06] <TimToady> so I guess it doesn't really need extra "push"

[18:06] <TimToady> it just means that already.

[18:06] <PerlJam> and ** has become a keyword "eager"?

[18:06] <TimToady> gotta go to work...

[18:07] <TimToady> so it would seem

[18:07] <PerlJam> things that happen so soon don't seem to fit well (in my head) with all lowercase keywords

[18:08] <TimToady> soon?

[18:09] <TimToady> you think it should be a Monad or something?

[18:09] <PerlJam> flattening now rather than as needed moves along my time-axis to "sooner"

[18:09] <TimToady> it's just the default in P5...

[18:10] <TimToady> so "eager" from that perspective is already shouting...

[18:10] *** particle__ joined
[18:10] <PerlJam> But when I'm on #perl6, I'm not a perl5 programmer  :-)

[18:11] <TimToady> of course not, which is why I had to qualify what a said...

[18:11] <TimToady> I think we both have a tremendous grasp of the obvious... :)

[18:11] <PerlJam> heh

[18:12] <PerlJam> So ... any clue when the language details will settle down a bit?  (Is that even a question that makes sense?)

[18:12] * particle__ guesses by christmas

[18:12] <TimToady> well, really gotta commute.  Language will settle down for the next 15 minutes or so... :)

[18:12] <PerlJam> particle__: that would have been my guess as well :)

[18:13] <TimToady> biab &

[18:13] <particle__> 0..^xmas # infinite list

[18:15] <gaal> Arathorn: thanks for the link

[18:21] <azuroth> leet. I know whether a convex poly contains a given line segment

[18:22] *** shachaf joined
[18:25] *** KingDiamond joined
[18:30] *** ruz joined
[18:32] *** justatheory joined
[18:42] *** vel joined
[18:44] *** sri__ joined
[18:53] *** vel joined
[18:53] *** sri__ is now known as sri_

[18:54] *** sri_ joined
[18:59] *** DaGo joined
[19:02] *** ruz joined
[19:03] *** vel joined
[19:06] *** SamB joined
[19:12] *** nnunley joined
[19:23] *** particle_ joined
[20:02] *** elmex joined
[20:05] *** Eimi joined
[20:14] *** cdfh joined
[20:20] *** ynux joined
[20:21] *** aufrank joined
[20:50] <aufrank> did [,](@foo) get blessed?

[21:03] *** larsen joined
[21:05] *** flounder99 left
[21:18] <TimToady> aufrank: working on it, and seeing what the ramifications are.

[21:19] <aufrank> fun :)

[21:19] <aufrank> I'll keep an eye out for news from this sector

[21:24] *** Limbic_Region joined
[21:26] *** ynux left
[21:30] *** justatheory joined
[21:38] *** FB|afk is now known as FurnaceBack

[21:45] *** jsiracusa joined
[21:52] *** FurnaceBack is now known as FurnaceBoy

[21:55] <TimToady> okay, I've whacked * and **.  Let the fur fly...

[21:56] *** rashakil left
[21:59] *** rashakil joined
[22:00] <TimToady> hmm, p6l seems to have choked on the updates...

[22:01] *** rashakil left
[22:01] <TimToady> maybe the svnbot was using * or **?  :)

[22:04] <arcady> uh oh. what happened to * and **?

[22:04] <PerlJam> When did that back slash thing happen for a listy reduce?

[22:04] <TimToady> only the prefix versions.  they caught bird flu and died.

[22:05] * PerlJam misses all the good stuff

[22:05] <TimToady> just now

[22:05] <TimToady> [\X] should probably have been marked conjectural...

[22:06] <PerlJam> TimToady: Well, I decided I liked it rather quickly, so it can't be too bad :)

[22:06] <TimToady> has anyone else seen the updates in p6l yet?

[22:06] <TimToady> maybe perl.org is boycotting wall.org now.  :)

[22:07] <PerlJam> I'm looking at it now (obviously)

[22:07] *** rashakil joined
[22:07] <particle_> what does All(*) give?

[22:07] <TimToady> well, you could have checked it out from svn. :)

[22:07] <PerlJam> TimToady: true, but no, I'm reading p6l.

[22:08] <TimToady> hmm, I wonder what's up with my mail.

[22:08] <PerlJam> oops, gotta go pick up my son

[22:08] * PerlJam &

[22:08] *** Qtax joined
[22:09] *** Qtax left
[22:10] *** rashakil joined
[22:14] <pmichaud> TimToady: I've seen the p6l post.  I'm fine with whacking * and **

[22:15] <pmichaud> particle_: do you think you'll get to the \x, \o, \d items soon?

[22:15] <particle_> you just can't wait, can you ;)

[22:16] <particle_> finished my work and chores, looking at it now

[22:16] <pmichaud> I want to prove that  "\xc5" ~~ /<alpha>/ works :-)

[22:16] <particle_> :)

[22:17] <particle_> i want to see $x = 5; $x ~~ 5; works

[22:17] <pmichaud> nope, haven't implemented that one yet

[22:17] <particle_> i know :)

[22:17] <particle_> i have tests for the \x\d\o locally, so i'll be coding to those now

[22:17] *** FurnaceBoy_ joined
[22:18] <pmichaud> okay, great

[22:20] *** drrho joined
[22:23] <gaal> TimToady:

[22:23] <gaal>  (string) context.  You can force list context on the expression using

[22:23] <gaal> -either the C<*> or C<list> operator if necessary.

[22:23] <gaal> +either the C<list> operator if necessary.

[22:23] <gaal> using either the C<list> operator

[22:23] <gaal> ?

[22:26] <gaal> is this valid?  [-> {$^a+$^b}] @list

[22:26] <gaal> (anonymous ops)

[22:27] <TimToady> no.

[22:27] <TimToady> only declared infix: ops

[22:27] <TimToady> otherwise it's completely ambiguous with [1,2,3] composer

[22:27] <gaal> okay. but reduce lambda works, of course yes?

[22:28] <TimToady> sure.

[22:28] *** dolmen joined
[22:28] <gaal> good, I was doing a double take because for a minute I saw [\ ] and was thinking in haskell

[22:28] <gaal> probably time to go to bed

[22:29] <TimToady> I wondered if some people might see a lambda there...

[22:30] <gaal> [\] in haskell would be a singleton list of some function. fun. night :)

[22:30] <TimToady> sweet dreams

[22:31] *** FurnaceBoy_ joined
[22:31] <pmichaud> particle:

[22:31] <pmichaud> p6> my $x = 5; if $x ~~ 5 { say "ok"; }

[22:31] <pmichaud> ok

[22:31] <pmichaud> p6> my $x = 'abc';  if $x ~~ 'abc' { say 'ok'; }

[22:31] <pmichaud> ok

[22:31] <pmichaud> happy?

[22:31] *** elmex joined
[22:33] <particle_> my $x = 5; my $y = 5; if $x ~~ $y { say "ok"; }

[22:33] <particle_> invoke() not implemented in class 'Integer'

[22:33] * particle_ pushes pmichaud

[22:33] <pmichaud> did you svn up?

[22:33] <particle_> yep

[22:34] <particle_> pmichaud++ for the string and numeric smart match

[22:34] <pmichaud> p6> my $x = 5; my $y = 5; if $x ~~ $y { say 'ok'; }

[22:34] <pmichaud> ok

[22:34] <pmichaud> did you 'make'?

[22:34] <particle_> yep, make test

[22:34] <pmichaud> hmmm, it works on my box

[22:34] <particle_> i'll clean

[22:34] <pmichaud> just add a test :-)

[22:36] <TimToady> I noticed my last smoke failed all its rule tests.  recompiling to see if it was transient...

[22:37] <TimToady> the smoker on feather seems to have worked better, so maybe it's an embedded/external thing.

[22:39] <particle_> i'll rebuild parrot...

[22:40] <TimToady> hmm, I'm getting user error (no tag found)

[22:40] <TimToady> pugs: user error (no tag found)

[22:40] <gaal> uh, I just realized that you can't scan with reduce after this change

[22:41] <gaal> so we probably need to rename it to fold and add a scan function?

[22:41] <particle_> pm: passing now

[22:41] <gaal> back to sleep &

[22:42] *** ludan joined
[22:42] <particle_> pm: subs next? i wanna import the pugs test suite pronto

[22:43] <pmichaud> p6> if (3,4,5) ~~ 4 { say 'ok'; }

[22:43] <pmichaud> ok

[22:45] <pmichaud> particle_: yes, subs are soon on the list.  I might do regex/rule first

[22:45] <pmichaud> I'd like to have subs done by #parrotsketch

[22:46] <TimToady> I'm not sure that one should be okay.

[22:48] <TimToady> probably about time to glare at the smartmatch table again...

[22:49] <TimToady> embedded still fails.  time for realclean...

[22:51] <pmichaud> ?eval (3,4,5) ~~ 4

[22:51] *** evalbot_10299 is now known as evalbot_10311

[22:51] <evalbot_10311> user error (no tag found) Bool::False

[22:52] <TimToady> maybe it's not just embedded...

[22:52] <pmichaud> ?eval my @x = (3,4,5);  @x ~~ 4

[22:52] <evalbot_10311> user error (no tag found) Bool::False

[22:52] <TimToady> my world, and welcome to it.

[22:52] <pmichaud> heh

[22:52] <pmichaud> np

[22:53] <pmichaud> ?eval "\xc5" ~~ /<alpha>/

[22:54] <evalbot_10311> user error (no tag found) Match.new(   ok => Bool::True,    from => 0,    to => 1,    str => "\197",    sub_pos => (),    sub_named =>     { "alpha" =>         Match.new(           ok => Bool::True,            from => 0,            to => 1,            str => "\197",            sub_pos => (),            sub_named => {}         )     } )

[22:56] *** arcady joined
[22:56] <particle_> no tag found???

[22:57] <particle_> crap. i messed up my tests.

[22:57] * particle_ repeats, "save first, commit second."

[22:58] <pmichaud> gotta go pick up the kids -- later, all

[22:59] <rorx> i read through the pugs docs.. but I'm still not clear.. is it an just implementation of p6 done in Haskell? Will perl6 actually use pugs in any way, or is it more of a proof of concept?

[22:59] <TimToady> Perl 6 is a language, not an implementation.  It'll use anything that runs it.

[23:00] <rorx> TimToady: I see.. so that's different than perl5 then right?

[23:00] *** DaGo joined
[23:00] <TimToady> The intent is not to require people to download Haskell though.

[23:00] <TimToady> yes, it's specs and test suite.

[23:00] <rorx> so the perl folks won't have some official "perl6 runtime", just a specification and leave it to others to implement it?

[23:01] <TimToady> well, they may have that too, if parrot gets its act together.

[23:01] * pmichaud is working to get parrot's act together.

[23:01] <TimToady> I thought pmichaud is picking up kids...

[23:02] <pmichaud> I'm multitasking :-)

[23:02] <aufrank> pmichaud++

[23:02] <pmichaud> even time afk is spent thinking about perl6 on parrot :-|

[23:02] <particle_> pm: i broke perl6, i'll fix

[23:03] <rorx> TimToady: so what the official perl6 will look like is still a bit unkwown? maybe that's what's confusing me. And parrot, I assume it one part of the solution.

[23:03] <particle_> however, i haven't broken it as frequently as timtoady has :)

[23:03] *** Odin- joined
[23:04] * particle_ points rorx to the perl6 docs: http://dev.perl.org/perl6/doc/synopsis.html

[23:04] <rorx> or is parrot analogous to pugs, being a full implementation of perl6..

[23:04] <aufrank> the official perl6 will probably have green eyes

[23:04] <particle_> do pythons have green eyes?

[23:04] <TimToady> rorx: the specs evolve as the implementations point out problems.

[23:04] <rorx> particle_: thanks

[23:05] <TimToady> would you like to help?

[23:05] <TimToady> I'm sure audreyt will pop up at any moment and offer you a commit bit...

[23:06] <particle_> ...did you see the bit about the committed perl6 developer?

[23:06] <rorx> Well I'm just a perl5 user that's curious about the future.

[23:07] <TimToady> guess, what, that describes most of us...

[23:07] <TimToady> just some of us are curious enough about the future to try to ask leading questions... :)

[23:08] <rorx> yeah, it sounds like it's still work in progress, at least what the runtime will look like.

[23:09] <TimToady> At the moment we're basically in the bootstrap era.  Within a month or two we should have a Perl 6 compiler written in Perl 6.

[23:09] <aufrank> rorx: parrot is a virtual machine, like the JVM or the CLR, which is being designed to be good at hosting dynamic languages

[23:09] <aufrank> perl 6 and perl 5 are examples of languages that parrot will hopefully be good at hosting

[23:09] <SamB> it is actually designed?

[23:09] <SamB> it has so many opcodes!

[23:10] <aufrank> early on, the plan was that the reference implementaion of perl 6 would be on parrot

[23:10] <aufrank> (I think)

[23:10] <rorx> aufrank: that's what I was wondering.

[23:12] <aufrank> right now pugs and parrot are informing each other as they try to figure out how to implement the current perl 6 spec

[23:12] <rorx> aufrank: I see.

[23:12] <TimToady> pugs is a top-down approach, while parrot is bottom up.  They're relatively complementary.

[23:13] <TimToady> there's sort of a friendly race to see who gets to the middle first.

[23:13] <rorx> so a different group (ie, not pugs) is working on the perl6 compiler that will target the "parrot IL" whatever it may be called?

[23:13] <TimToady> kinda like the first transcontinental railroad in the U.S.

[23:14] <aufrank> yeah, but like I said, there's some overlap

[23:14] *** feng joined
[23:14] <aufrank> a lot of crosstalk

[23:14] <TimToady> not to be confused with cross talk.

[23:14] <particle_> rorx: it's called PIR "parrot intermediate language"

[23:14] <rorx> ah, thanks.

[23:15] <rorx> I saw something about PIL, but I guess that's only applicable to pugs.

[23:15] <aufrank> rorx: and there approximately a billion intermediate layers between perl 6 source code and PIR

[23:15] <TimToady> give or take a trillion

[23:16] <rorx> i see

[23:16] <particle_> not really for the parrot impl: perl 6 -> parse -> past -> post -> pir

[23:17] <particle_> where right now the parser, past, and post compilers are written in... pir.

[23:24] <rorx> particle_: I see, thanks.. making more sense now.

[23:25] <TimToady> pugs view of reality is of course somewhat different.

[23:25] <particle_> poit.

[23:28] <rorx> so besides Perl6, have any other languages expressed any interest to targetting the Parrot VM?

[23:29] <particle_> there are many languages in various states of completion

[23:29] <TimToady> the most active currently are Tcl and Scheme, i think.

[23:29] <SamB> but te languages aren't very articulate in themselves

[23:29] <particle_> and apl, and perl1

[23:29] <SamB> er, the.

[23:30] <SamB> how do you even write APL?

[23:30] <particle_> it's all in the wrist ;)

[23:30] <SamB> or store it

[23:30] <particle_> parrot supports unicode if built with icu libs

[23:30] <SamB> ick, unicode...

[23:30] <particle_> needless to say they're required for apl. but, they are for perl6, too

[23:31] <SamB> unicode is well and good for some things, but the handling of strange characters is not great

[23:31] <SamB> especially strange characters that are related to other characters and should match them in appearence

[23:33] <TimToady> still getting stupid yaml errors...

[23:43] <gaal> TimToady: where do you get them?

[23:45] <TimToady> t/rules/*.t mostly, I think.

[23:46] <TimToady> tried removing *.pm.yml but that didn't help.

[23:47] <gaal> in blib6/lib/?

[23:49] <TimToady> yes, those.

[23:49] <gaal> it's working for me :/

[23:50] <gaal> hmm, did you install pugs ever on this machine? another .yml in your @INC?

[23:52] <TimToady> reinstalling pugs doesn't seem to make any difference.

[23:53] <gaal> strace ./pugs t/failing/test | grep .yml     ?

[23:58] <TimToady> okay had an old Test.pm.yml out there.

[23:58] <gaal> arg.

[23:59] <TimToady> works after I did rm /usr/lib/perl6/site_perl/Test.pm.yml

[23:59] <TimToady> was dated May 4.

[23:59] <PerlJam> TimToady: as in parrot-land, I've heard that things work better if you don't do "make install"

