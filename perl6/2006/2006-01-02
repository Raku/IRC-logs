[00:00] <theorbtwo> What's the syntax for p5evalbot ?

[00:01] <buu> eval:

[00:04] <theorbtwo> eval: local $x=4; $x

[00:04] <p5evalbot> theorbtwo: Return: 4 

[00:08] *** evalbot_8551 is now known as evalbot_8552

[01:19] <deoxy> This is probably not new but parrot0.4.0-devel pulled directly from svn does not recognize new_pad lines emitted by pugs also pulled directly from svn. Could someone point me to the solution?

[01:41] <Debolaz> [debolaz@leviathan] ~/temp8# pugs -BParrot test.p6 

[01:41] <Debolaz> error:imcc:syntax error, unexpected PREG, expecting '('

[01:41] <Debolaz> in file '/tmp/pugs95422.pir' line 71

[01:41] <Debolaz> This can't be good. :/

[05:18] <svnbot6> r8555 | Darren_Duncan++ |  r1752@Darren-Duncans-Computer:  darrenduncan | 2006-01-01 21:16:17 -0800

[05:18] <svnbot6> r8555 | Darren_Duncan++ |  /ext/Rosetta-Incubator : finished converting generic string exceptions to specific LKT ones; added 2 messages to SRT/L/en.pm, and a few to LKT/L/en.pm, upgraded both SQL::Routine classes, adding 7 private methods ... this probably still doesn't execute

[05:47] <svnbot6> r8556 | Darren_Duncan++ |  r1758@Darren-Duncans-Computer:  darrenduncan | 2006-01-01 21:45:51 -0800

[05:47] <svnbot6> r8556 | Darren_Duncan++ |  /ext/Rosetta-Incubator : updated 21 files with copyright statements to read '-2006' rather than '-2005'

[06:36] <svnbot6> r8557 | stevan++ | PIL/Native/Bootstrap.pil

[06:36] <svnbot6> r8557 | stevan++ | - added ::Pair object, minimal implementation for now

[06:36] <svnbot6> r8557 | stevan++ | - filled in several ::Array methods, including .join

[06:36] <svnbot6> r8557 | stevan++ | t/pil/container/

[06:36] <svnbot6> r8557 | stevan++ | - added this directory for testing containers

[06:36] <svnbot6> r8557 | stevan++ |     - basic tests for ::Scalar and ::Hash

[06:36] <svnbot6> r8557 | stevan++ |     - ::Array test have decent coverage, but could use

[06:36] <svnbot6> r8557 | stevan++ |       some more complex tests

[06:46] <tewk> q

[07:42] <aufrank> hello?

[07:43] <aufrank> evalbot_8552: say "hello world";

[07:44] *** evalbot_8552 is now known as evalbot_8557

[07:44] <aufrank> ?eval 2+3;

[07:44] <evalbot_8557> 5 

[07:45] <Limbic_Region> ?eval 1...;

[07:45] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:45] <Limbic_Region> heh

[07:45] <aufrank> ?eval sub add ($i, $j) { $i + $j} my &add2 = {add( 2, $^x) }; add2(4);

[07:45] <buu> That seems .. broken

[07:45] <evalbot_8557> 6 

[07:45] <buu> I guess it's really not

[07:45] <buu> ?eval (1...)[9000213123]

[07:45] <aufrank> hey, I just curried!

[07:45] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:45] <buu> heh

[07:46] <buu> Ok, why doesn't that one work?

[07:46] * aufrank feels like a stud, even if it's silly

[07:46] <Limbic_Region> ?eval(1...)[3]

[07:47] <evalbot_8557> \4 

[07:47] <buu> ?eval (1...)[900000]

[07:47] <Limbic_Region> it doesn't work because evalbot has a limit of 1mb of memory per request it looks like

[07:47] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:47] <buu> Limbic_Region: Sure, but why should that require a meg?

[07:48] <Limbic_Region> dunno how pugs stores data structures internally but obviously each element in the array is consuming enough space to make X * 900_000 > 1_048_576

[07:49] <buu> Then let me rephrase

[07:49] <buu> It *should* work!

[07:49] <Limbic_Region> why?

[07:49] <buu> Because it shouldn't allocate all 899,999 preceding elements

[07:49] <Limbic_Region> buu - it has to

[07:49] <buu> Why?

[07:49] <Limbic_Region> lazy doesn't mean magic

[07:50] <Amnesiac> indeed

[07:50] <Limbic_Region> you still have to evaluate every element up to and including the one being requested

[07:50] <buu> So why does it need to store them all?

[07:50] <Limbic_Region> you asked it to by making it a list with a subscript

[07:50] <Limbic_Region> if you had done this instead

[07:50] <buu> That doesn't answer the question

[07:51] <Limbic_Region> ?eval for 1... { last if $_ == 4; } say 4;

[07:51] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:51] <Limbic_Region> ooh - now that is a problem

[07:51] <Limbic_Region> that should work

[07:51] <aufrank> heh

[07:51] <buu> I accept that the current implementation does that, but my contention is that it should not.

[07:51] <Limbic_Region> well, my contention is that my last example should work and the former shouldn't

[07:52] <buu> Limbic_Region: Why shouldn't the former?

[07:52] <Limbic_Region> well - what if I had said my @foo = 1..4;

[07:53] <Limbic_Region> are you saying it should act as an iterator

[07:53] <Limbic_Region> and only return the last value iterated over?

[07:53] <buu> Well, in general I think that's a different case

[07:53] <Limbic_Region> again, lazy doesn't mean magic

[07:53] <buu> In specific it'd be nice if @x= 1...; worked 

[07:53] <anatolyv> ?eval for 1... { last }

[07:53] <buu> Although there are situations where it wouldn't work

[07:53] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:54] <Limbic_Region> there can certainly be optimizations that would allow you to check context

[07:54] <buu> ?eval my @x = 1...;

[07:54] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:54] <Limbic_Region> and I agree that my @x = 1...; should work too

[07:54] <Limbic_Region> hmmm

[07:54] <Limbic_Region> whatever

[07:54] <anatolyv> ?eval my $x=(1...)[2];

[07:54] <buu> I think the principle I'm reaching for here is "deferred laziness"

[07:54] <evalbot_8557> \3 

[07:55] <anatolyv> it flattens the list when it enters for? it shouldn't

[07:55] <buu> Apparently it do!

[07:56] <anatolyv> ?eval (1...)[400_000]

[07:56] <evalbot_8557> \400001 

[07:56] <anatolyv> ?eval (1...)[999_999]

[07:56] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:56] <anatolyv> heh

[07:57] <Limbic_Region> ?eval lazy 1...;

[07:57] <evalbot_8557> Error: cannot cast from VInt 1 to Pugs.AST.Internals.VCode (VCode) 

[07:57] <Limbic_Region> interesting

[07:57] <Limbic_Region> does pugs have a lazy keyword?

[07:58] <aufrank> ?eval my @x is lazy = 1...

[07:58] <anatolyv> ?eval lazy (1...);

[07:58] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:58] <evalbot_8557> pugs: out of memory (requested 1048576 bytes) 

[07:58] <aufrank> I think it's a trait

[07:58] <aufrank> is lazy

[07:58] <gaal> Limbic_Region: it does, (op1 "lazy") but I'm not sure what's its status; some laziness has been disabled afaik

[07:58] <aufrank> ?eval my @x :lazy = (1...)

[07:58] <evalbot_8557> Error:  unexpected ":" expecting trait, "=", ".=", ":=", "::=", ";" or end of input 

[07:59] <gaal> ask nothingmuch if he's around

[07:59] <Limbic_Region> it's 3am here and I am trying to convince my jet lag that sleep is OK now

[08:00] <Limbic_Region> of course the fact that the computer room is currently freezing probably is making the desire for warmth more overpowering than that for sleep

[08:01] <aufrank> eah, 3 am here too

[08:02] <buu> 2 here

[08:02] <aufrank> were you west or east, Limbic_Region ?

[08:03] <aufrank> does your body think it's earlier or later than 3?

[08:03] * aufrank deduces west, earlier

[08:03] <buu> Phillipines

[08:04] <Limbic_Region> Philippines to east coast

[08:04] <aufrank> that's some kind of time difference, I reckon

[08:04] <Limbic_Region> my body isn't sure what to think

[08:04] <aufrank> heh

[08:04] <aufrank> sucks, sorry

[08:05] <Khisanth> Limbic_Region: cold environment makes sleeping easier :)

[08:08] <Juerd> Moin

[08:10] <Limbic_Region> Khisanth - not if it is so cold your body is shivering to try and stay warm

[08:10] <Khisanth> Limbic_Region: well the idea is to have a warm blanket as well :)

[08:12] <buu> Khisanth: I was wondering if I was the only one who felt that way.

[08:16] <aufrank> how does the p6 case statement look?

[08:16] <aufrank> is it given ... when... ?

[08:16] <aufrank> whoops, apparently I disapeared.

[08:16] <aufrank> I didn't even notice

[08:16] <aufrank> sorry-- spotty connection

[08:17] <wolverian> aufrank, given $foo { when $bar { ... } } it's in one of the synopses.

[08:17] <aufrank> yeah, S04

[08:17] <aufrank> I found it right after I asked, as usual

[08:17] <aufrank> doing tutorials for other languages in perl6 is kinda fun

[08:19] <aufrank> I guess I'm gonna turn in for the night

[08:19] <aufrank> bye all!

[11:12] <svnbot6> r8558 | asavige++ | Rpn Haskell code tightened via GHC (Larry) -Wall switch, plus style improvements, audreyt++ for teaching me

[13:23] *** xunxin is now known as agentz

[13:23] *** agentz is now known as agent

[13:28] <agent> Hi,all. i've found precompile_prelude key doesn't work as expected in Config.yml.

[13:28] <agent> audreyt: recently, when i set the precompile_prelude to "true" in Config.yml, no precompilation happened. But to my surprise, when i commented the whole line out, precompilation worked beautifully.

[13:30] <agent> another issue on Win32 was "nmake" broke on "cd .." but both "nmake optimised" and "nmake unoptimised" worked. I'm not quite sure if they've been fixed in these days.

[13:30] <agent> i may have a try tomorrow.

[13:42] <gaal> agent: did you remake the Makefile after you edited config.yml?

[13:42] <agent> sure

[13:43] <agent> in my memory, precompile_prelude is set to "true" by default.

[13:43] <gaal> do you still have the shell history for that build? it dumps configuration before the compilation.

[13:43] <gaal> agent: I think you're right.

[13:43] <agent> :=)

[13:44] <agent> someone else has mentioned this issue here a few days on ago

[13:46] <agent> but autreyt was busy discussing some other issues like PILN or Rules support at that moment.

[13:55] <gaal> agent: I'm not on native win32 any more so I'm afraid I can't help much with nmake

[15:19] <stevan> audreyt: what do you think about some kind of use/include functionality for PIL^N? Recompiling Bootstrap.pil all the time is kind of a pain, and I think it would be better from a maintainence point of view to be able to include seperate files

[15:19] <gaal> stevan: do you need symbol export stuff there?

[15:19] <stevan> gaal: probably not

[15:20] <gaal> urp, do you have namespaces at all, or is evreything classy lexical there anyway?

[15:20] <stevan> it is mostly that Bootstrap.pil is getting quite large with all the container types

[15:20] <stevan> gaal: no namespaces, everything is lexical

[15:20] <gaal> sounds easy to do then

[15:20] <stevan> actually there are no real lexical variables even

[15:21] <stevan> $foo := 3 is desugared to -> $foo { }`(3)

[15:21] <gaal> (without knowing much about piln. Hmm, I hereby dub it "pilsner".)

[15:22] <gaal> if pugs had named releases versions should be named after beers.

[15:22] <stevan> :)

[15:22] <gaal> "have you tried out pugs leffe? strong stuff!"

[15:23] <stevan> Pugs 6.28.0  - The King of Beers

[17:11] <audreyt> rehi!

[17:11] <obra> reaudrey!

[17:11] <Debolaz> Yes.. rehi to you too.

[17:11] <Alias_> hi

[17:12] <Alias_> Question: How long does a single ... -> make test take for pugs

[17:12] <Alias_> ballpark

[17:14] <audreyt> 30min?

[17:15] <Alias_> ouch

[17:16] <Alias_> ok, so I need some sort of more configurable timeout then

[17:16] <Debolaz> audreyt: Pugs didn't like using parrot as backend. :/

[17:17] <audreyt> Debolaz: http://pugs.blogs.com/pugs/2005/12/release_plans.html

[17:18] <audreyt> "The current plan is to push out 6.2.11 on early January following Parrot 0.4.1's release.  0.4.0's introduction of new lexical pads broke our Parrot compilation backend (that is a good thing -- I called for obliteration of the old lexical pads)."

[17:24] <audreyt> I think I'd like to try out PIR targetting for PILN.

[17:25] <audreyt> stevan: so, Pair ends up mutable... are you doing something with ::Pair yet?

[17:36] <audreyt> stevan: re inclusion of bootstrap... I think it's best to split into multiple .pil files, but we'd still need to let "make pil" link them in statically, no?

[17:37] <avar> audreyt: you're not obeying the GFDL on your blog;)

[17:38] <audreyt> avar: how so?

[17:38] <audreyt> did I include some GFDL work?

[17:38] <audreyt> (can't think of any)

[17:38] <avar> you copied the wp page verbatim without follwing all the annoying little GFDL clauses;)

[17:39] <obra> "wp"?

[17:39] <avar> http://pugs.blogs.com/about.html

[17:39] <obra> oh. wikipedia

[17:39] <audreyt> point. fixing.

[17:40] <avar> copying wp stuff is actually hell for small texts

[17:40] <avar> you have to include the GFDL verbatim (can't just link to it), as well as other stuff

[17:41] * avar hates the GFDL

[17:43] <audreyt> hm, not so

[17:43] <audreyt> wikipedia explicitly says a boilerplace notice is okay

[17:43] <audreyt> http://en.wikipedia.org/wiki/Wikipedia:Copyrights#Users.27_rights_and_obligations

[17:44] <audreyt> I've added the notice. thanks for the reminder!

[17:45] <avar> mm, they're wrong

[17:45] <avar> I think

[17:48] <Debolaz> audreyt: Ah, that enlightens things. :)

[17:48] <Debolaz> Hmm.. I actually read that, just didn't remember it.

[17:48] <avar> it's *totally* wrong

[17:49] <avar> "You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies"

[17:50] <anatolyv> well then... edit the wikipedia page? :)

[17:52] <anatolyv> http://en.wikipedia.org/wiki/Wikipedia:Verbatim_copying says you can link to a local copy of the GFDL instead of copying it.

[17:52] <avar> yeah, because then you're including it in your publication

[17:52] <anatolyv> I think it makes sense because after all GFDL is not inclduded on every Wikipedia page, it's linked to.

[17:53] <avar> but you can't for example distribute a flyer to turists with info on country $x and just say "this article is under the GFDL 1.2 [link], from [link]"

[17:53] <avar> that's one of the big problems with the GFDL, it's a PITA for distributing/copying small works

[17:54] <anatolyv> right, because then it's not "reproduced". that's quite inane though, isn't it?

[17:54] <Alias_> yay PITA!

[17:54] <avar> well depending on how you look at it

[17:55] <avar> first of all, it wasn't designed for that at all, it's a documentation license, and documentation tends to be long, so distributing a 2.5 page license in your 500 page documentation isn't going to be a problem

[17:55] <avar> the real problem is people using it for things they shouldn't be using it for;)

[17:55] <anatolyv> :)

[17:55] <Alias_> avar: I hijacked the acronym for something cooler

[17:56] <Alias_> :)

[17:56] <avar> It's not at all as "portable" for free works as as the GPL is for free software, it's designed for a very specific application

[17:57] <anatolyv> Alias_: I like pita as in food :)

[17:57] <Alias_> me too

[17:57] <Alias_> Im happy with it as a project name

[17:57] <anatolyv> Ah, that explains it then!

[17:58] * avar uses the DWTFYWWI license for everything now;)

[17:58] <anatolyv> avar: too late now to relicense anything :)

[17:58] <Alias_> Using it is to constantly remind me that it's replacing a manual way that was a PITA, so if my PITA is a PITA, there's no point

[17:58] <anatolyv> as far as Wikipedia goes.

[17:58] <avar> anatolyv: true

[17:58] <avar> anatolyv: the only thing that can be done is the FSF releasing 1.3 that doesn't suck as much

[17:58] * anatolyv likes avar's license :)

[17:59] <avar> anatolyv: it rocks;)

[18:00] <avar> oo, I'm on google

[18:00] <anatolyv> avar: that's... quite unique of you :)

[18:01] <anatolyv> avar: ah, the license is! Cool.

[18:02] <avar> http://tools.wikimedia.de/~avar/COPYING

[18:04] <anatolyv> butbut... don't you need the LDWTFYWWI as well?

[18:04] <avar> L being?

[18:05] <anatolyv> well, Lesser, or Library... or in your case, maybe Liberally?

[18:05] <avar> the DWTFYWWI allows linking;)

[18:22] <gaal> hola

[18:22] <anatolyv> hey gaal

[18:23] <gaal> yo toly-san

[18:57] *** ilogger2 joined
[18:58] *** ilogger2 joined
[19:00] *** orafu joined
[19:18] *** r0nny joined
[19:18] *** DesreveR joined
[19:20] <nothingmuch> given N numbers, what's the funkiest way of finding the median?

[19:21] <audreyt> stevan: I'll refactor things into src/PIL/Native/Bootstrap/*.pil.

[19:21] <audreyt> commit in a minute.

[19:21] <audreyt> nothingmuch: keep doing rand()

[19:22] <audreyt> rand(MINNUM .. MAXNUM)

[19:22] <nothingmuch> audreyt: i need to be hellalllllllllllllaaaa fast

[19:22] <audreyt> and test whether if it's median

[19:22] <audreyt> oh, fast.

[19:22] * nothingmuch is benchmarking event pickup code

[19:22] <nothingmuch> where mutexes are too slow

[19:22] <nothingmuch> err scrap that

[19:22] <nothingmuch> thread local storage is too slow

[19:22] * nothingmuch is using a shizznit trick to hash the stack

[19:22] <nothingmuch> void func (int param) {

[19:23] <nothingmuch> hash[ (char)( (size_t)&param >> 19 ) ];

[19:23] <audreyt> just use quicksort algorithm

[19:23] <nothingmuch> that's almost unique per thread

[19:23] <audreyt> Select a random element in the data set as a pivot, and use it to partition the data into sets of elements less than and greater than the pivot. From the sizes of these sets, we know the position of the pivot in the total order, and hence whether the median lies to the left or right of the pivot. Now we recur on the appropriate subset until it converges on the median.

[19:23] <nothingmuch> now i need to find a fun algorithm to implement a worker-boss layout

[19:23] <nothingmuch> hehe, i'm implementing quicksort

[19:24] <nothingmuch> and I want a probably good median for chunks over 10000 elements

[19:24] * nothingmuch would like even sized chunks later on

[19:24] <nothingmuch> but merge sort just isn't as cool

[19:24] <nothingmuch> although.... hmm

[19:25] <nothingmuch> you know what, i'll do an in place merge sort

[19:25] <nothingmuch> that's fun

[19:29] <audreyt> stevan: feel free to move .pil files freely or create a Container subdir etc... improvise, now we have #include ;)

[19:32] *** dduncan joined
[19:42] *** aufrank joined
[19:43] <aufrank> is asavige in the channel?

[19:45] <svnbot6> r8559 | audreyt++ | * util/file_to_hs.pl: support #include in source files.

[19:45] <svnbot6> r8559 | audreyt++ | * Factor PIL.Native.Bootstrap PIL code into multiple sub .pil files.

[19:47] *** raptorXXX joined
[19:47] <audreyt> aufrank: he was earlier, but I don't think he had mastered the art of screen(1) yet

[19:47] <aufrank> heh

[19:47] <raptorXXX> hi...

[19:47] <audreyt> stevan: journal up -- see if it makes sense to you :)

[19:47] <audreyt> now I need to sleep. see you tomorrow *wave*

[19:47] <aufrank> I just got used to using given/when, and he's got a bunch of if/elsif/else in his rpn code

[19:48] <aufrank> wanted to suggest how he could make it sexier :)

[19:48] <audreyt> ahh... probably just commmit a fix ;)

[19:48] <aufrank> is that fair game?

[19:48] <audreyt> yes in the pugs tree.

[19:48] <audreyt> if you'd like to be polite, drop him a note.

[19:48] <aufrank> ooh, commit #1 coming up :)

[19:49] <raptorXXX> i made a simple diagram of perl6-to->parrot compilation..but have no place where to host it... does somebody know to whom i can send this page so that it can host it on some perl6/parrot related site ? thanx

[19:49] <audreyt> woot

[19:49] <audreyt> aufrank: ajsavige at yahoo com au

[19:49] <aufrank> danke

[19:49] <audreyt> raptorXXX: sure... do you have it online somewhere currently?

[19:50] <raptorXXX> no i dont have it online..

[19:50] <audreyt> raptorXXX: you can send it to me. autrijus at gmail dot com

[19:50] <raptorXXX> ok..wait a sec..

[19:52] <raptorXXX> it is on the way

[19:52] <audreyt> k

[19:52] <raptorXXX> :) thnx

[19:52] <audreyt> np :)

[19:53] *** kakos` joined
[19:54] <ako> is now known as kakos`

[19:54] <audreyt> it's in HTML? cool!

[19:54] <raptorXXX> yep :)

[19:55] <raptorXXX> i hope it is correct

[19:55] *** kakos joined
[19:55] <aufrank> which is better coding style:

[19:56] <aufrank> when 'x' { bla() }

[19:56] <aufrank> or when 'x' { bla(); }

[19:56] <audreyt> raptorXXX: I think it is correct for the compiler_tools.pod's purpose

[19:56] <aufrank> ?

[19:56] <wolverian> bla when 'x'; # :)

[19:56] <raptorXXX> ok

[19:57] <audreyt> raptorXXX: I'm pursuing a closely related, though not parrot-based (until the PASM/PBC stage), route

[19:57] <audreyt> that uses Perl 6 objects instead of Parrot objects for the upper layers

[19:57] <PerlJam> aufrank: Are you asking about a single semicolon?

[19:57] <audreyt> but the layers and flow stays the same.

[19:57] <aufrank> yes

[19:57] <aufrank> wolverian: is that { bla() } when x; 

[19:57] <raptorXXX> it is easy changable... i can modify it...only if i know what to modify :)

[19:58] <audreyt> raptorXXX: if you apply for a feather account, you can host it in your ~/public_html/

[19:58] <raptorXXX> feather account ?

[19:58] <wolverian> aufrank, I don't know if they are the same.

[19:58] <wolverian> ?eval given 2 { say "hi" when 2 }

[19:58] <evalbot_8559> Error:  unexpected "{" expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[19:58] <wolverian> oh, well. :)

[19:59] <raptorXXX> audreyt: what is feather account ?

[19:59] <aufrank> ?eval given 2 { say "hi" when {2} }

[19:59] <evalbot_8559> Error:  unexpected "{" expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[19:59] <aufrank> ?eval given 2 { {say "hi"} when 2}

[19:59] <evalbot_8559> Error:  unexpected "{" expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[19:59] <aufrank> ?eval given 2{ when 2 {say "hi"} }

[20:00] <evalbot_8559> Error: No such method in class Any: "&given" 

[20:00] <audreyt> raptorXXX: http://www.mail-archive.com/perl6-language@perl.org/msg20060.html

[20:00] <raptorXXX> checking... tnx

[20:02] <audreyt> np... I've temporarily hosted it at

[20:02] <svnbot6> r8560 | audreyt++ | * add a link to the feather announcement.

[20:02] <audreyt> http://perlcabal.org/~autrijus/perl6-to-parrot-via-tge.html

[20:02] <raptorXXX> how i can contact Juerd for account ?

[20:03] <audreyt> the URL won't become invalid

[20:03] <audreyt> but we may want to find a better home of it afterwards

[20:03] <audreyt> but I need to sleep now

[20:03] <audreyt> Juerd is on this channel

[20:03] <audreyt> so you can /msg him

[20:03] <audreyt> (if you have registerd your freenode nick)

[20:03] <audreyt> or drop him a mail

[20:03] <raptorXXX> aha

[20:03] <audreyt> (which is likely to be more reliable)

[20:04] <audreyt> with your real name and desired login etc

[20:04] <stevan> audreyt: hey :)

[20:04] <raptorXXX> oki..tnx 

[20:04] <stevan> #include works great :)

[20:04] <audreyt> his email is juerd at convolution nl

[20:04] <stevan> and your journal makes sense

[20:04] <aufrank> whoops, now audreyt can't sleep, stevan showed up

[20:04] <audreyt> woot, then I can rest in peace for tonight

[20:04] <audreyt> it's 4am already

[20:04] <audreyt> horribly late :)

[20:04] <audreyt> or early

[20:05] <aufrank> yargh

[20:05] <aufrank> gnight!

[20:05] <stevan> audreyt: go to sleep,.. I will have stuff for you in the morning :)

[20:05] * audreyt waves &

[20:05] <audreyt> wunderbar

[20:05] <stevan> night

[20:05] <audreyt> &

[20:07] *** DaGo joined
[20:24] *** raptorXXX left
[20:32] <svnbot6> r8561 | aufrank++ | Changed ajsavige's rpn code to use given/when.  Added myself to AUTHORS.

[20:33] *** _SamB_ joined
[20:35] <am> is now known as _SamB_

[20:38] *** mjl69_ joined
[21:08] *** kanru2 joined
[21:15] <svnbot6> r8562 | asavige++ | minor adjustments to make unit tests pass, aufrank++ for improving p6 code

[21:19] *** nnunley joined
[21:21] <aufrank> anyone want to talk over multi dimensional methods on arrays?

[21:22] <aufrank> it's missing in quickref/data

[21:22] <stevan> do you mean methods on multi-dimensional arrays?

[21:22] <aufrank> heh, yeah, those too ;)

[21:22] <nnunley> Cool.

[21:23] <stevan> I imagine they would not be any different from normal, just that they are filled with arrays 

[21:23] <aufrank> there are some possible specific ones

[21:23] <nnunley> Would be a good idea to look at the ops offered in things like Octave/Matlab.

[21:23] <nnunley> And PDL.

[21:23] <aufrank> matlab, for example, offers a squeeze() function

[21:24] <nnunley> Does that de-sparsify an array?

[21:24] <stevan> aufrank: there is some PDL stuff in one of the AES, I dont recall which one though

[21:24] <aufrank> collapses a singleton dimension and returns an array of one less dimension

[21:24] <aufrank> yah, I read it

[21:25] <aufrank> I just figured since you guys are working off of quickref/data, and it says these are missing there, maybe there was something to talk about

[21:25] <stevan> aufrank: quickref/data was just something simple to start with

[21:26] <stevan> however, having this all compiled in some spot is a good thing :)

[21:26] <aufrank> indeed :)

[21:26] <stevan> I think actually S29 has more complete/official info

[21:26] <stevan> but it is also (IIRC) suffereing from neglect

[21:27] <gaal> is hyperop traversal finalized?

[21:27] <gaal> [[1,2], [3,4]] >> that is

[21:27] <aufrank> stevan: is there going to be a mutable/immutable distinction on scalars like in scala?

[21:28] <stevan> aufrank: possibly, I am reading over the Scala docs now, but that is just for PIL^N right now

[21:28] <aufrank> s/scalars/containers/

[21:29] *** Odin-LAP joined
[21:30] <stevan> aufrank: I think Tuple's are basically immutable since they evaled at compile time

[21:30] <stevan> and the List interface (as described in S29) looks to be fairly immutable

[21:31] <stevan> but I am not sure what @Larry's position on this is

[21:39] * aufrank hadn't seen S29... good stuff

[21:39] <stevan> aufrank: yes it is very helpful

[21:41] *** oylenshpeegul joined
[21:56] *** justatheory joined
[22:06] <svnbot6> r8563 | stevan++ | PIL/Native/Bootstrap/*

[22:06] <svnbot6> r8563 | stevan++ | - broke out the different containers into src/PIL/Native/Bootstrap/Container/*

[22:06] <svnbot6> r8563 | stevan++ | - added proper name/version/authority to all the container classes and roles

[22:06] <svnbot6> r8563 | stevan++ |     - added tests for this info

[22:06] <svnbot6> r8563 | stevan++ | - added stubs for a number of methods listed in S29 for ::Hash and ::Array

[22:06] <svnbot6> r8563 | stevan++ | PIL/Native/Bootstrap/Container/Array.pil

[22:06] <svnbot6> r8563 | stevan++ | - ::Array.grep has been cleaned up so it no longer rely's on mutable features

[22:06] <svnbot6> r8563 | stevan++ | - ::Array.join now properly converts items using `as_str()

[22:06] <svnbot6> r8563 | stevan++ | PIL/Native/Bootstrap/Container/Pair.pil

[22:06] <svnbot6> r8563 | stevan++ | - ::Pair.kv now correctly returns a 2 element ::Array instead of a ::Pair (S29++)

[22:06] <svnbot6> r8563 | stevan++ | - ::Pair.new now accepts k & v for the $!key and $!value attributes respectively 

[22:07] *** petdance joined
[22:13] *** amv joined
[22:31] *** oylenshpeegul left
[22:38] *** Amnesiac joined
[23:00] *** knewt joined
[23:07] *** frodo72 joined
[23:10] *** Debolaz joined
[23:19] *** frodo72 joined
[23:24] <Juerd> audreyt: Thanks for letting raptorXXX know how to contact me

[23:24] <Juerd> audreyt: I only accept feather requests by mail, though - with only very specific exceptions 

[23:24] <Juerd> audreyt: By the way - I love your new journal. The frequency, design and the continued writeup quality.

[23:30] *** lisppaste3 joined
[23:48] <Debolaz> I get the feeling that when I manage to fix something, I break something else.

[23:50] <Amnesiac> same Debolaz as Efnet?

[23:51] <Amnesiac> s/as/from/

