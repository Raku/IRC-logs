[00:01] <markstos> This feels like a bug. I can't store and execute a code reference in an attribute:

[00:01] <markstos> ?eval class Foo { has $.a is rw; method BUILD { $.a = sub {}; $.a(); } } Foo.new;

[00:01] *** evalbot_12805 is now known as evalbot_12822

[00:01] <evalbot_12822> Error: No compatible subroutine found: "$.a"

[00:05] <pasteling> "markstos" at 12.176.101.89 pasted "Bug? A method appears to be successfully called on a random string." (16 lines, 376B) at http://sial.org/pbot/19331

[00:09] *** foo\ joined
[00:09] <araujo> hello

[00:11] <markstos> Hello araujo

[00:12] <araujo> hi there markstos :-)

[00:18] <ingy> anyone know or guess whether I can "upgrade" debian unstable to ubuntu dapper?

[00:19] <markstos> ingy: I think not. I don't think they are that compatible.

[00:19] <markstos> But I'm mostly a Mandriva user, so get a second opinion.

[00:25] <ingy> k

[00:29] *** nekokak joined
[00:30] <TreyHarris> markstos:

[00:30] * markstos listens

[00:30] <TreyHarris> ?eval class Foo { has $.a is rw; method BUILD { $!a = sub { say "hi!" }; } }; my $a = Foo.new; $a.a.()

[00:30] <evalbot_12822> OUTPUT[hi! ] Bool::True

[00:30] <TreyHarris> inside BUILD, your object isn't built yet

[00:30] <TreyHarris> so you can't call methods

[00:32] *** hikozaemon joined
[00:33] <markstos> TreyHarris: pugs lets you:

[00:33] <markstos> ?eval class Foo { method BUILD { self.see; } method see { say "saw"; }; } my $a = Foo.new;

[00:33] <evalbot_12822> OUTPUT[saw ] \Foo.new()

[00:35] <TreyHarris> you're not actually accessing the object in that case except for method dispatch (which only requires an actual instantiated class which has already happened by that time), so that's possible.  but what you want to do is chicken-and-egg, I think

[00:36] <TreyHarris> but this works:

[00:37] <markstos> I don't think so. Adding this line did allow the callback to run in BUILD: instead of call $.a(), I added: $aa = $.a, and then called $aa(), that worked.

[00:37] <TreyHarris> ?eval class Foo { has $.a is rw; method BUILD { self.a = sub { say "hi!" }; } }; my $a = Foo.new; $a.a.()

[00:37] <evalbot_12822> OUTPUT[hi! ] Bool::True

[00:37] <TreyHarris> so maybe it is a bug

[00:37] <TreyHarris> but the Synopses do mention that inside BUILD you'll probably use $! rather than $. ....

[00:37] <markstos> I tried $!, too. Same result.

[00:38] <TreyHarris> eh?

[00:38] <TreyHarris> ?eval class Foo { has $.a is rw; method BUILD { $!a = sub { say "hi!" }; } }; my $a = Foo.new; $a.a.()

[00:38] <evalbot_12822> OUTPUT[hi! ] Bool::True

[00:38] <TreyHarris> you're not getting that?

[00:40] *** agentzh joined
[00:40] <markstos> ?eval class Foo { has $!a is rw; method BUILD { $!a = sub { say "hi!" };  $!a() } };

[00:40] <evalbot_12822> undef

[00:40] <agentzh> TreyHarris: why did you say that the synopses on feather was two weeks behind?

[00:41] <agentzh> TreyHarris: the last update to the syn repos was r11527, made by audreyt according to my p6l mails. :)

[00:41] <TreyHarris> hmmmm

[00:42] <agentzh> TreyHarris: please correct me if i was wrong. :)

[00:42] <TreyHarris> agentzh: one sec

[00:44] <agentzh> the rev number of the syn repos is not increasing one by one.

[00:44] <agentzh> because syn/ is a subdirectory per se.

[00:47] *** mako132_ joined
[00:48] <agentzh> hence the rev number on the page of http://svn.perl.org/perl6/doc/trunk/design/syn/ is somewhat misleading. :)

[00:48] <lambdabot> Title: Revision 11549: /doc/trunk/design/syn

[00:49] <TreyHarris> ah, i see my problem

[00:49] <agentzh> :)

[00:49] <TreyHarris> i thought i saw a change to S03 in the svn logs... it was to S02

[00:49] <TreyHarris> so when I searched S03 for it on feather.... i thought it was out of date

[00:49] <markstos> It would be nice to have a more helpful error messages, when one commits this mistake, as Perl5ers like me are likely to do:

[00:49] <markstos> ?eval class Foo {} Foo.new( 'a' => 'b' );

[00:49] <TreyHarris> since it said "Aug 16"

[00:49] <evalbot_12822> Error: Must only use named arguments to new() constructor

[00:50] <TreyHarris> that's not helpful?

[00:50] <TreyHarris> ?eval class Foo {} Foo.new( a => 'b' );

[00:50] <evalbot_12822> Foo.new(("a" => "b"),)

[00:51] <markstos> It would be more helpful to say: "Found quoted key in Pair passed to new(), expected unquoted key."

[00:51] <markstos> When it says "Must used named arguments", I think: I /was/ using named arguments!

[00:51] <markstos> In Perl5, Hash quoted and unquoted hash keys mean the same thing.

[00:52] <markstos> s/Hash //

[00:52] <TreyHarris> but you weren't.  you were using Perl 5 "named arguments".  Perl 6 actually has a first-class citizen called named arguments, and you weren't using one

[00:53] *** f0rth joined
[00:53] <markstos> I know that now, but a more helpful error message would help new folks learn that faster, and with less frustration.

[00:54] <markstos> Alternatively, something like "use warnings" for Perl5 would be nice, which gives more detail about each error, including common pitfalls.

[00:54] <agentzh> markstos: pugs has been optimized for feature experimentation or verification. :)

[00:55] <agentzh> audreyt: trypugs (or webpugs) is sort of beyond my capability (i'm still new to AJAX), so i'd return to the pugs test suite. :)

[00:55] <markstos> That's fine. I'm providing feedback from a users perspective. If you want to more users, you'll have to eventually optimize for them, too!

[00:55] <agentzh> markstos: indeed.

[00:55] <markstos> Otherwise, it  may never be Christmas....

[00:55] <agentzh> the problem is that we're having too few audreys here. :)

[00:56] <markstos> I don't think so. I see a website that could be in better shape, docs that could written and clarified, and tests that could be written in Perl6. Those are are different skill sets, and you don't have to be a uber-hacker to contribute.

[00:57] <agentzh> the christmas is still quite far from us, given the current status of the perl 6 language, the test suite, and the implementation.

[00:59] <markstos> I don't know. As I port CGI::Application, pugs has been working rather well for me, in terms of correctness. For me, it's a bigger problem that I don't find the docs accessible to confirm if I have a problem with my code, or if there is a pugsbug. So far, I haven't found any show stopping bugs in pugs, mostly missing features.

[00:59] <agentzh> markstos: what you're saying is all true. i'm talking about the tasks which require skills of "audrey level" anyway. :)

[00:59] <markstos> Of course, it's particularly slow, but it's generally good enough for people to port real applications to it, at least in terms of the features available, even if the performance lacks now.

[01:00] <agentzh> markstos: oh, you must be very lucky then!

[01:00] <TreyHarris> agentzh: but let's not get too doom-and-gloom.  the progress in the past year has been incredible, and it's been accelerating, especially if you look at it quarter-to-quarter rather than day to day (when there are fits and starts)

[01:00] <markstos> Users can become contributers and contributers can be become uberhackers.

[01:00] <markstos> It's not too early to start paying attention to users.

[01:00] <agentzh> TreyHarris: i was not complaining, or i wouldn't be here. :)

[01:02] <agentzh> markstos: yes, i agree everything you've said.

[01:02] <markstos> Something like the named parameters error message could well become an FAQ on the channel for new users, but a better error message could save everyone that headache.

[01:02] <agentzh> markstos: i'm only telling the reality or something like that. :)

[01:03] <agentzh> what i want to say is that we just need to be patient enough. :)

[01:04] <agentzh> markstos: btw, i'll be very happy if you add that warning message to pugs' src/ :)

[01:04] <agentzh> or get audreyt or someone to do that. :)

[01:05] <markstos> agentzh: Maybe I'll poke around. I have limited Haskell skills, but I think I'm equipped to update a string...

[01:05] <agentzh> good luck then. ;-)

[01:08] <markstos> Uh oh. Tornado warning here. I'll have to check the wifi in the basement...

[01:12] *** xdg joined
[01:17] * markstos notes there /is/ wifi in the basement, and hunkers down for the storm to pass.

[01:21] <SamB> markstos: but... if the storm hits, will there still be?

[01:22] <markstos> If the storm hits, my 24/7 hosting facility downtown will be a bigger concern....

[01:22] <markstos> (It's my business, not just where I store files!)

[01:26] <svnbot6> r12823 | agentz++ | [TASKS]

[01:26] <svnbot6> r12823 | agentz++ | * added a new task that we need a new smoke client to

[01:26] <svnbot6> r12823 | agentz++ |   upload tests.yml as well as the HTML matrix, and a new

[01:26] <svnbot6> r12823 | agentz++ |   smoke server which makes .yml files accessible to all

[01:26] <svnbot6> r12823 | agentz++ |   (especially to feather). :)

[01:26] *** b00t joined
[01:26] * markstos notes the electricity blinks for the first time...

[01:26] <agentzh> markstos: ohhh

[01:27] <markstos> agentz: Are you aware of Smolder ? It's a smoke server written in Perl with YAML support.

[01:27] *** dolmans joined
[01:27] <agentzh> aye ;-)

[01:29] <agentzh> once we have .yml on the smoke server, feather can use the latest one to render the synopsis HTML. hence no need to do autosmoking ourselves. :)

[01:35] *** coumbes joined
[01:35] <xdg> If I want to test the Perl 6 CPAN Stack on win32, what modules should I be installing? just v6.pm?  Or others?

[01:36] <markstos> Install v6, it will hopefully handle the dependencies for you.

[01:37] <xdg> OK.  I'm manually smoking Strawberry Perl alpha 2 prerelease

[01:37] <xdg> So I'm trying to test various strange things that might cause problems.

[01:37] <markstos> Ok. I'm listening to hail through the heating ducts.

[01:38] <xdg> That's funky.  (Remind me where you are again?)

[01:38] *** diakopter joined
[01:39] <markstos> I'm in Richmond, Indiana, taking shelter in my basement while a tornado passes.

[01:39] *** b00t joined
[01:39] <diakopter> hi markstos

[01:39] <markstos> Hello diakopter.

[01:39] <svnbot6> r12824 | markstos++ | Attempt a more helpful error message for "Must only pass named parameters..."

[01:39] <svnbot6> r12824 | markstos++ | (Sorry about the long line. My Haskell-fu is weak. )

[01:40] <xdg> We had a tornado watch in NYC last week.  Rained cats and dogs, but no hail (and no spouts, either)

[01:40] <diakopter> anyone going to the Chicago hackathon in November?

[01:40] <markstos> I lived in Manhattan for a college semester. I enjoyed my time there

[01:41] *** agentzh left
[01:41] <markstos> diakopter: I didn't know about, but I'm relatively close by. ( < 5hrs by car ).

[01:41] <markstos> What's the focus ?

[01:41] <diakopter> http://hackathon.info/

[01:41] <lambdabot> Title: Chicago Perl Hackathon: Nov 10-12, 2006, Crystal Lake, IL

[01:43] *** khisanth_ joined
[01:49] <markstos> Here's another error message that could use potential improvement. For multi methods, you can get the message: "No compatible subroutine found". I think it should be split into two messages: 1. (same as above). and 2. "Found 3 potential subroutines, but none with compatible signatures".   That gives you more feedback about exactly where the problem is.

[01:51] <TreyHarris> markstos: i agree, but i'm not sure of the prioritization here.  i've generally kept quiet about confusing error messages, because i'd rather the new object model and captures get finished and stabilized first.  i think getting good error reporting could be a tremendous timesink

[01:52] <TreyHarris> i just pretend that any error is like BASIC's "syntax error", and if it tells me more than that, that's just gravy.

[01:54] <markstos> OTOH, I just commited an improvement to an error message. They are often string changes and light Haskell work, not the domain of an uberhacker.

[01:55] <markstos> I used to improve some of the darcs strings, even though I only learned enough Haskell to do "string\n"++"string" and "make"

[01:55] <markstos> The one I suggested above does involve a little logic change in Haskell, which I'm not ready to dive into yet.

[01:58] <markstos> A good question is: What's the most direct route to the tipping point: When a tremendous amount of energy forms around it, and there are lots of tuits? Is focusing on features the shortest route, or is polishing a smaller feature set a shorter route?  I don't have answers, but I know that sometimes answers are surprising. Sometimes little things like string changes can make a big difference, because they turn frustrated users into interested us

[02:11] *** b00t joined
[02:17] *** coumbes joined
[02:19] <ajs_home> Does anyone know off the top of their heads (without dragging the whole channel OT), what the most efficient YAML parser is out there? I just crushed the performance of a CGI program by converting its data to YAML... :(

[02:23] <xdg> I think it's YAML::Syck

[02:23] <ajs_home> Thanks... yeah, I just spotted that. Checking it out now

[02:23] <TreyHarris> markstos: well, i think the whole pugs project showed that.  initially there were people who were rather hostile to energy being drawn away from parrot

[02:24] * TreyHarris must decommute now &

[02:25] <markstos> ...but know I would say that interest in pugs probably interest in parrot...

[02:25] <xdg> For anyone working on v6, it looks like somewhere in the chain there is a dependency on Cache::Cache, which depends on Error, and the latest version of that hangs during testing on Win32.  Not fun.

[02:25] <ajs_home> Every time I see that nomenclature of "foo &" I'm reminded how how simple and powerful the Unix shell was....

[02:26] <ajs_home> xdg: there is nothing that I think has done more to errode the Perl user-base than the fact that tests rot.

[02:26] <TreyHarris> ajs_home: was?  still is!  i'm still typing here in the background, even though the other me is busy decommuting ;-)

[02:26] <ajs_home> heh

[02:27] <markstos> Your joking.

[02:27] * TreyHarris &'s for real this time

[02:27] <markstos> We know you are really giving voice commands to your treo while driving.

[02:29] <ajs_home> markstos: If you are talking to me, no I'm serious. I've never seen such anger at a programming language as when an end user is told to type "sudo cpan Foo::Bar" and they get 20 test failures in their fact

[02:29] <ajs_home> er face

[02:33] *** mjk joined
[02:36] <markstos> ajs_home: I wasn't talking to you, but maybe you would be happy to know I removed tests against Google from the WWW::Mechanize suite. They kept breaking because Google changed their pages...

[02:37] <ajs_home> hah! That's got to have made google happy ;)

[02:38] <markstos> My personal favorite failing CPAN test that I've written was one that I (accidently) constructed such that it passed  for me, but when people tested it from other time zones, it failed...

[02:38] <markstos> what a pain to fix.

[02:38] <ajs_home> ouch

[02:39] <ajs_home> I love the idea of having tests run, but in practice it seems like the pain gets shifted to the people who have the least time and ability to track down the problem in most cases.

[02:39] <ajs_home> I've tried to think of a way to solve that for Perl 6.... nothing yet

[02:40] <markstos> I always thought tests were good for exposing bugs triggered by different environments.

[02:41] <ajs_home> They're great for that... but if the trade-off is user pain, that's not always a trade-off you want. There must be a middle-ground

[02:45] <markstos> beta testeres.

[02:45] <markstos> s/e//g

[02:46] <markstos> Also,

[02:46] <markstos> interns.

[02:48] <ajs_home> Good ideas... ideas that cost $....

[02:48] <markstos> Well, there's an automated build farm, but that costs money.

[02:49] <markstos> There's having every environment in your home office, and testing it yourself, but that costs money.

[02:49] <ajs_home> There's throwing money at it, but... well.

[03:05] *** crem joined
[03:11] *** norageek2 joined
[03:16] *** rafl joined
[03:18] <markstos> It would be nice if "Parameters and Arguments" quickly mentioned the difference between parameters and arguments.

[03:18] <markstos> http://feather.perl6.nl/syn/S06.html#Parameters_and_arguments

[03:18] <lambdabot> Title: S06

[04:15] *** coumbes joined
[04:18] <audreyt> markstos: send patch to p6l?

[04:18] * audreyt gets ready for $job (horribly late)

[04:20] *** drbean joined
[04:24] *** xdg joined
[04:25] *** buubot joined
[04:26] *** jferrero joined
[04:32] *** buubot joined
[04:35] *** buu joined
[04:41] *** justatheory joined
[05:06] *** Aankhen`` joined
[05:07] *** onsen joined
[05:10] *** Yobert joined
[05:26] <svnbot6> r12825 | agentz++ | [t/syntax/comments.t]

[05:26] <svnbot6> r12825 | agentz++ | - added some more tests. all tests now pass.

[05:27] *** agentzh joined
[05:28] <agentzh> thanks to audreyt++'s recent utf-8 fixes. :)

[05:28] *** xinming_ is now known as xinming

[05:30] <agentzh> many new tests for pugs were lost in the hardware failure this noon. :(

[05:30] <agentzh> now i'm rewriting them. :-/

[05:30] <agentzh> that old nasty machine is really HATEFUL!!!

[05:31] *** christo joined
[05:35] <Yobert> Hey do you know what would be cool in perl 6

[05:35] <Yobert> A special variable for when you do a for (@array) style loop

[05:35] <Yobert> it would always have the index of the array

[05:36] <araujo> ?

[05:36] <araujo> you mean the current iteration index?

[05:36] *** DHGE joined
[05:40] <gaal> ?eval my @array = <moose elk caribou>; for @array.kv -> $i, $val { say "$i. $val" }

[05:40] *** evalbot_12822 is now known as evalbot_12825

[05:40] <evalbot_12825> OUTPUT[0. moose 1. elk 2. caribou ] undef

[05:40] <gaal> Yobert: good enough? :)

[05:41] <masak> :)

[05:41] <masak> ask, and ye shall find perl6 probably already has it

[05:44] <buu> Bah, way too clumsy.

[05:45] * araujo likes it

[05:46] *** onsen_ joined
[05:46] <gaal> buu: what don't you like about it, the need for an explicit variable? for an explicit method call on @array?

[05:46] <buu> gaal: Both.

[05:46] <agentzh> has %=DATA been specified?

[05:46] <svnbot6> r12826 | agentz++ | [t/syntax/comments.t]

[05:46] <svnbot6> r12826 | agentz++ | - added tests for "=begin comment/=end comment" from

[05:46] <svnbot6> r12826 | agentz++ |   t/syntax/POD.t

[05:46] <svnbot6> r12826 | agentz++ | - added tests for "=for comment"

[05:46] <agentzh> i saw $=DATA and @=DATA in S02, but not %=DATA.

[05:47] <gaal> okay then: { my $i; for @arr -> $k { NEXT { $i++ } ... } }.()

[05:48] <gaal> I don't think an implicit "current iterant index" variable makes sense. how would you use it in nested loops?

[05:49] *** kanru joined
[05:49] <masak> if I wanted, could I throw an extra method each_with_index into Array at runtime?

[05:49] <masak> I think that would be the cleanest way in that case

[05:49] <buu> gaal: It would always be the innermost loop

[05:50] <buu> gaal: Or whatever. Honestly it can do whatever as long as it exists.

[05:51] <gaal> well, the point of having something like this is that you can mention the index if you suddenly remember you need it without refactoring your code.

[05:51] <Yobert> yeah, exactly

[05:51] <Yobert> I just want a quickie way

[05:51] <gaal> but if it's always the innermost, or "whatever", then you can hardly do that

[05:52] <buu> gaal: Sure you can

[05:52] <Yobert> it could have local scope so it'd work in nested lops

[05:52] <Yobert> *loops

[05:52] <gaal> buu: well, by all means, propose something on p6-l

[05:52] <buu> 95% of the time it would be in the right scope anyway

[05:52] <buu> gaal: They're scary =[

[05:53] <masak> buu: if you don't, I will :)

[05:53] <buu> Go for it.

[05:53] <masak> 'kay

[05:53] <buu> Magic special variable, scoped inside the loop.

[05:53] <masak> np

[05:53] * masak goes off to write to p6-l

[05:54] <gaal> masak: things to consider:

[05:54] <svnbot6> r12827 | agentz++ | [t/syntax/comments.t]

[05:54] <svnbot6> r12827 | agentz++ | - added even more tests and smartlinks.

[05:54] <gaal> - what if you're iterating over something that isn't an array? still set the index?

[05:54] <Yobert> well

[05:54] <Yobert> for a file glob

[05:54] <Yobert> it could be the byte position

[05:54] <gaal> - does 'next' skip an index or not? (surely on arrays it should, not clear in other cases)

[05:55] <Yobert> I'm sure there are a zillion perly things you could do

[05:55] <gaal> byte position? of what?

[05:55] <masak> gaal: I'll throw your questions in verbatim

[05:55] <gaal> masak: go ahead. I'm not convinced this is a good idea though :)

[05:55] <Yobert> well, i guess something like STDIN doesn't have a byte position really.. or does it.  I was thinking in a while (<STDIN>) loop you could have the byte position or something

[05:55] <buu> gaal: It doesn't *really* matter either way

[05:56] <buu> gaal: I'm fine with every iteration increases

[05:56] <gaal> buu: I don't understand what really matters.

[05:56] <Yobert> sorry for my perl5 examples I'm not confident yet, haha

[05:56] <gaal> Yobert: ah, that's not a glob :)

[05:56] <buu> gaal: That it works for array/list iterations =]

[05:56] <Yobert> sorry.. just a filehandle in general i meant

[05:57] <gaal> Yobert: sure, there's a "tell" in Perl 5, and in Perl 6 you'll presumably have both the OS byte position and the character position.

[05:58] <gaal> buu: that's what I'm not convinced about. you have a specific problem you want to make prettier, and you don't care about the rest

[05:58] <gaal> any program can be compressed to 1 byte with a certain compression algorithm

[05:58] <gaal> we're not aiming for that though :)

[05:58] <buu> gaal: I care, but in limited ways.

[05:58] <Yobert> gaal:  Ahh.. I see.  I've never used tell, that's probably my problem ;)

[05:58] <buu> gaal: My point was more than either alternative suggestion was perfectly workable.

[05:58] <agentzh> how can i read a single line from a Perl 6 file handle? my $line = =$fh?

[05:59] <gaal> Yobert: well, tell is a system call, so it's not for free.

[05:59] <gaal> agentzh: yes

[05:59] <gaal> brb

[05:59] <Yobert> gaal:  I see.  So it would still be cool to have a builtin index

[05:59] <agentzh> gaal: thanks

[06:03] <agentzh> ?eval my $fh = undef; my $line = =$fh; $line

[06:03] <gaal> Yobert: presumably $fh.position :chars or something shorter queries Perl's notion

[06:04] <agentzh> gaal: the above line hangs in pugs. :(

[06:04] <gaal> hmm.

[06:04] <agentzh> gaal: could you make it return undef immediately?

[06:04] <gaal> looking

[06:04] <gaal> shouldn't though. should fail""

[06:05] <agentzh> :)

[06:05] <agentzh> okay, fail is also fine. :)

[06:05] <agentzh> *failing

[06:05] * agentzh hates segfaulting.

[06:06] *** Yobert left
[06:06] <agentzh> ?eval 1+2

[06:06] <gaal> why does AUTHORS have the BOM again?

[06:06] <agentzh> oh, i've killed evalbot. :(

[06:06] <agentzh> BOM?

[06:07] <gaal> http://en.wikipedia.org/wiki/Byte_Order_Mark

[06:08] <agentzh> k

[06:14] *** marmic joined
[06:15] <agentzh> what should the elems of @=DATA be?

[06:16] <agentzh> each of @=DATA should be a single line or a single DATA block?

[06:16] <agentzh> and should the elems contain leading or trailing newlines?

[06:19] <pasteling> "masak" at 130.238.83.176 pasted "Ok, so here's what I've come up with. Last call for changes. :)" (41 lines, 1.7K) at http://sial.org/pbot/19336

[06:21] <svnbot6> r12828 | agentz++ | [t/syntax/POD.t]

[06:21] <svnbot6> r12828 | agentz++ | - added new tests for %=POD{'DATA'}, $=DATA, and @=DATA

[06:21] <svnbot6> r12828 | agentz++ |   (all tests are failing now)

[06:22] <masak> buu: does the email capture your wishes?

[06:22] <svnbot6> r12829 | agentz++ | [t/syntax/POD.t]

[06:22] <svnbot6> r12829 | agentz++ | - fixed broken smartlinks

[06:23] <agentzh> xinming: would you please merge the tests in t/builtins/quote_basic.t and t/operators/quoting.t?

[06:23] <gaal> ah, agentzh, it's not hanging, it's waiting on $*ARGS -- presumably stdin

[06:23] <agentzh> xinming: i think they had better be put in the same place (or same directory at least)

[06:24] <agentzh> gaal: ohh

[06:24] <masak> gaal: sounds like a situation that would arise quite often

[06:24] <agentzh> gaal: so this is expected?

[06:24] <masak> gaal: isn't there a way to always feed $*ARGS to evalbot?

[06:24] <agentzh> the file handle is undef anyway...

[06:25] *** mauke_ joined
[06:25] <gaal> masak: well, it's like what you get when you put on the command line

[06:25] <gaal> % grep moose

[06:25] <masak> anyway, anybody has any last comments on the p6-l mail? http://sial.org/pbot/19336

[06:25] <lambdabot> Title: Paste #19336 from "masak" at 130.238.83.176

[06:25] <masak> in other case, I'll just send it along

[06:25] <gaal> looking

[06:26] <masak> gaal: yes, but evalbot never gets any input from anywhere

[06:26] <masak> gaal: making it wait indefinitely does nobody any good

[06:26] <masak> gaal: better to have some "standard" standard input stream for it

[06:26] <agentzh> i kinda dislike the t/builtins/ directory since too many unrelated tests are living there. :-/

[06:26] <gaal> no, it oughta be caught in the evalbot harness, not hacked into pugs

[06:27] <masak> nod

[06:27] *** onsen joined
[06:27] <masak> 'course

[06:28] <gaal> masak: I don't get the each_with index thing. How is it different from .kv?

[06:28] <masak> gaal: it isn't, really

[06:29] <gaal> (except that it reverses the order? and is longer? :)

[06:29] <masak> maybe it's a bad example

[06:29] <masak> I just wanted to show that ruby has thought of this somehow

[06:29] <gaal> anyone happy with the ruby solution would surely be fine with the Perl 6 spelling?

[06:29] <masak> yes... except...

[06:29] <gaal> uh, it's semantically precisely the same as .kv

[06:30] <masak> they have a _method_ for it

[06:30] <gaal> .kv is a method

[06:30] <masak> which makes the purpose so much clearer

[06:30] <masak> .kv doesn't really do it for me

[06:30] <gaal> ?

[06:30] <masak> it doesn't say "index"

[06:30] <masak> it says "key"

[06:31] <masak> maybe it'll grow on me, but right now it feels every so slightly hackish

[06:31] <gaal> er, so you're just unhappy with the name, not the functionality?

[06:31] <masak> kinda

[06:31] <masak> but I'll go back and review the ruby example

[06:31] <svnbot6> r12830 | agentz++ | [t/operators/quoting.t]

[06:31] <svnbot6> r12830 | agentz++ | - fixed one smartlink.

[06:31] <gaal> so you're not certain, like buu is, that there needs to be an implicit magical?

[06:32] <masak> no, not at all

[06:32] <buu> I'm all about the implicit magic.

[06:32] <masak> the more I look at the .kv example, the more I think "this is quite ok"

[06:32] <gaal> "use DWIM"

[06:33] * masak sends the mail now

[06:35] <masak> &

[06:35] <buu> Bah. I hate the .kv example.

[06:36] <buu> It's long and useless

[06:39] *** mauke_ is now known as mauke

[06:39] <clkao> env is now temp right?

[06:40] <gaal> no, context

[06:41] <gaal> temp is what was 'local'

[06:45] <clkao> so env is now context?

[06:45] <clkao> i saw some stuff in tests with env

[06:46] <gaal> clkao: I think that's wrong, but better check the synopses

[06:46] <clkao> i can't grep out anything about context variables ecept $+foo

[06:47] <gaal> that's the mention, but there's something about declaration. hold on

[06:49] <gaal> L<S09/Names/"The C<CONTEXT> pseudo-package">

[06:50] *** reZo joined
[07:04] *** araujo joined
[07:04] <svnbot6> r12831 | agentz++ | [t/statements]

[07:04] <svnbot6> r12831 | agentz++ | - added repeat.t with the tests from t/statements/loop.t.

[07:04] <svnbot6> r12831 | agentz++ | - added several smartlinks.

[07:04] <svnbot6> r12832 | agentz++ | [t/statements/loop.t]

[07:04] <svnbot6> r12832 | agentz++ | - removed tests specific to the repeat statment. (they

[07:04] <svnbot6> r12832 | agentz++ |   have gone into t/statements/repeat.t.

[07:07] *** rashakil_ joined
[07:07] <svnbot6> r12833 | agentz++ | [t/statements/loop.t]

[07:07] <svnbot6> r12833 | agentz++ | - fixed the ``plan'' number.

[07:22] <agentzh> bbiab

[07:22] <svnbot6> r12834 | agentz++ | [t/operators/quoting.t]

[07:22] <svnbot6> r12834 | agentz++ | - added many tests for unicode-delimited q-style strings

[07:22] *** agentzh left
[07:29] *** kane-xs joined
[07:40] *** ofer0 joined
[08:07] <svnbot6> r12835 | yiyihu++ |  r12866@Laptop:  xinming | 2006-08-29 15:45:57 +0000

[08:07] <svnbot6> r12835 | yiyihu++ |  agentz++ pointed it t/builtins/quote_basic.t

[08:07] <svnbot6> r12835 | yiyihu++ |  and t/operators/quoting.t should merge.

[08:07] <svnbot6> r12835 | yiyihu++ |  r12878@Laptop:  xinming | 2006-08-29 16:01:18 +0000

[08:07] <svnbot6> r12835 | yiyihu++ |  agentz++ pointed out that t/operators/quoting.t and t/operators/quote_basic.t

[08:07] <svnbot6> r12835 | yiyihu++ |  should merge.

[08:07] <xinming> :-/

[08:08] * xinming thinks, svk sucks sometimes

[08:11] <wolverian> all software sucks. it's just a matter of sucking less.

[08:35] <masak> xinming: anything in particular?

[08:35] <masak> there's always ways to improve things

[08:41] *** penk joined
[08:47] <gaal> hmm, I wonder if agentzh's bug report should in fact be fixed in pugs. to wit:

[08:47] <gaal> $ perl -e 'my $x; print readline $x'

[08:47] <gaal> # immediate nothing

[08:48] <gaal> the kink is that readline is currently defined (?IO) in Prim, so it has no way of distinguishing an actual undef arg and a missing arg

[08:49] <gaal> the fix to that is to split to two readlines: op0 "readline" and op1 "readline" of sig (IO)

[08:49] <gaal> this is so that the legitimate "say item readline" still works (ie reads from stdin)

[08:50] <gaal> if Prim were in newval, perhaps that could have been made nicer by passing a UFailure "missing param" instead of an unsidcriminating VUndef.

[08:50] <gaal> I gotta moose for a while, so if anyone wants an easy Haskell task, go for it..

[08:53] *** lollan joined
[08:55] *** lollan joined
[08:57] *** glasser joined
[08:59] *** glasser joined
[09:04] *** nothingmuch joined
[09:11] *** plisk joined
[09:17] *** elmex joined
[09:27] *** b_jonas joined
[09:28] *** Fuzie joined
[09:31] *** PolettiX joined
[09:41] *** ToTimkopf joined
[09:48] *** xinming_ joined
[09:54] *** orafu joined
[09:56] *** onsen joined
[10:20] *** buetow joined
[10:26] *** penk joined
[10:39] *** agentzh joined
[10:39] <agentzh> xinming++ # unified two quoting-related tests.

[10:40] <agentzh> well, i mean test files. :)

[10:44] <svnbot6> r12836 | agentz++ | [t/operators/quoting.t]

[10:44] <svnbot6> r12836 | agentz++ | - fixed a smartlink.

[10:48] <agentzh> i think we had better rename t/subroutines/ to t/blocks/. anyway, blocks are much general then subroutines in Perl 6's termilogy.

[10:49] <agentzh> you know, we have pointy.t and closure.t under t/subroutines, which are not subroutines.

[10:50] <svnbot6> r12837 | bsmith++ | Added a ranlib step after embedding the judy libraries into HsJudy.

[10:53] <svnbot6> r12838 | agentz++ | - moved return.t and return_from_inner_block.t from

[10:53] <svnbot6> r12838 | agentz++ |   t/statements/ to t/subroutines/.

[10:54] <gaal> the genesis for names under t/ is the Perl 5 test suite. but since this is indeed a change from Perl 5 changing it looks reasonable to me.

[10:59] <agentzh> gaal: okay. :)

[10:59] <svnbot6> r12839 | agentz++ | [t/no_implicit_block.t]

[10:59] <svnbot6> r12839 | agentz++ | - added this new test file to test the nonexistence of

[10:59] <svnbot6> r12839 | agentz++ |   implicit blocks around standard control structures.

[10:59] <svnbot6> r12839 | agentz++ |   currently only if/given/while are tested. more tests

[10:59] <svnbot6> r12839 | agentz++ |   soon. :)

[10:59] <svnbot6> r12838 | agentz++ | - moved return.t and return_from_inner_block.t from

[10:59] <svnbot6> r12838 | agentz++ |   t/statements/ to t/subroutines/.

[11:01] <gaal> agentzh: but I'd be happy to see more discussion on this before svn mv.

[11:02] <gaal> p6-c it?

[11:02] <agentzh> gaal: i'm just about to commit. ;-)

[11:02] <gaal> okay, that works too :)

[11:02] <nothingmuch> gaal: http://code2.0beta.co.uk/moose/svn/notes/nuffinmop/

[11:02] <lambdabot> Title: Revision 1855: /notes/nuffinmop

[11:03] <gaal> ooh

[11:03] <agentzh> nothingmuch: are you agree to rename t/subroutines to t/blocks?

[11:03] <nothingmuch> i don't remember what's in t/subroutines

[11:03] <nothingmuch> but in general since every block is a closure... *shrug*

[11:03] <agentzh> hehe

[11:03] <nothingmuch> what's the rationale?

[11:04] <agentzh> we have pointy.t and closure.t and etc etc under t/subroutines. :)

[11:04] <nothingmuch> ah

[11:04] <nothingmuch> heh

[11:04] <agentzh> pointy blocks are not subrountes.

[11:04] <nothingmuch> sure, sounds fair

[11:04] <agentzh> okay :)

[11:14] <svnbot6> r12840 | agentz++ | - renamed t/subroutines to t/blocks with permission from

[11:14] <svnbot6> r12840 | agentz++ |   gaal++ and nothingmuch++.

[11:15] <agentzh> oh, i just see S06 is titled "subroutines".

[11:15] <agentzh> following this reasoning, i should revert r12840. :)

[11:15] <agentzh> any idea?

[11:16] <nothingmuch> agentzh: or submit a doc patch =)

[11:17] <agentzh> oh, is there a better name for that?

[11:17] <nothingmuch> blocks?

[11:17] <agentzh> S04 is already named "blocks and statements". :(

[11:19] <nothingmuch> mmm

[11:19] <nothingmuch> well, the tests do cover s04 and s06 simultaneously

[11:20] <agentzh> oh

[11:20] <agentzh> but most of them are for S06.

[11:21] <agentzh> okay, i'll forget the name of S06 and use t/blocks.

[11:21] <agentzh> if anyone else feels t/subroutines is better, feel free to rename back. :)

[11:21] *** diakopter joined
[11:22] <agentzh> (but don't svn revert, since i'm going to commit updates to t/blocks)

[11:24] *** xinming joined
[11:26] <nothingmuch> agentzh++

[11:27] <agentzh> :)

[11:27] * nothingmuch tries to get the compile time object protocol down on paper

[11:27] <nothingmuch> what happenned to jabbot, btw?

[11:29] <svnbot6> r12841 | agentz++ | [t/statements/while.t]

[11:29] <svnbot6> r12841 | agentz++ | - seriously reviewed all the tests and did some code

[11:29] <svnbot6> r12841 | agentz++ |   cleanup.

[11:29] <svnbot6> r12841 | agentz++ | - more smartlinks.

[11:35] <svnbot6> r12842 | agentz++ | [t/statements/no_implicit_block.t]

[11:35] <svnbot6> r12842 | agentz++ | - added tests for the unless/for/loop control structures.

[11:41] *** b00t joined
[11:44] <svnbot6> r12843 | agentz++ | [docs/feather/syn_index.html]

[11:44] <svnbot6> r12843 | agentz++ | - made the synopses much more remarkable.

[11:44] <svnbot6> r12844 | agentz++ | [t/README]

[11:44] <svnbot6> r12844 | agentz++ | - now that we have almost all the features of

[11:44] <svnbot6> r12844 | agentz++ |   util/catalog_tests.pl implemented in

[11:44] <svnbot6> r12844 | agentz++ |   util/smartlinks.pl, we now claim smartlinks.pl as

[11:45] <svnbot6> r12844 | agentz++ |   the main cross-referencer. :)

[11:47] * agentzh is happily kicking off items from his todo list.

[11:47] <svnbot6> r12845 | agentz++ | [util/catalog_tests.pl]

[11:47] <svnbot6> r12845 | agentz++ | - added note for util/smartlinks.pl.

[11:47] <svnbot6> r12845 | agentz++ | - fixed a typo in the source.

[12:00] <svnbot6> r12846 | agentz++ | [t/statements/unless.t]

[12:00] <svnbot6> r12846 | agentz++ | - reviewed all the tests

[12:00] <svnbot6> r12846 | agentz++ | - tweaked the code to conform with modern Perl 6

[12:00] <svnbot6> r12846 | agentz++ | - added more tests

[12:00] <svnbot6> r12846 | agentz++ | - added smartlinks.

[12:00] <svnbot6> r12847 | agentz++ | [t/statements/unless.t]

[12:00] <svnbot6> r12847 | agentz++ | - adjusted the plan number.

[12:05] <nothingmuch> agentzh++ # not that you need any more ;-)

[12:06] <agentzh> nothingmuch: (?)

[12:06] *** bpphillips joined
[12:08] <nothingmuch> agentzh: karma

[12:08] <svnbot6> r12848 | agentz++ | [t/statements/until.t]

[12:08] <svnbot6> r12848 | agentz++ | - reviewd all the tests.

[12:08] * nothingmuch goes to sweat a bit

[12:08] <svnbot6> r12848 | agentz++ | - fixed the lexical problem.

[12:08] <svnbot6> r12848 | agentz++ | - added a smartlink.

[12:08] <agentzh> ah, hehe :)

[12:09] * agentzh collects all the ++'s for him.

[12:14] <svnbot6> r12849 | agentz++ | [t/statements/while.t]

[12:14] <svnbot6> r12849 | agentz++ | - changed the smartlink to point to a more appropriate

[12:14] <svnbot6> r12849 | agentz++ |   position in the synopses.

[12:26] *** Limbic_Region joined
[12:26] *** audreyt changes topic to: Check your feather email | spec.pugscode.org | paste: http://sial.org/pbot/perl6 | pugs.blogs.com |  http://www.treehugger.com/files/th_images/paradigm.jpg

[12:27] * audreyt goes back from $job and saw huge number of checkins

[12:27] <audreyt> agentzh++

[12:27] <agentzh> :)

[12:28] <audreyt> unfortunately, I need to crash now... very long day today with lots of Haskell hacking

[12:28] <Limbic_Region> sleep well

[12:29] <audreyt> it's really a good tool to deal with rapidly shifting specs ;)

[12:29] <Limbic_Region> hope you got my note that embedded AS Perl works

[12:29] <audreyt> I did. yay!

[12:29] <audreyt> I wonder if we can turn on embp5  by default now

[12:29] <audreyt> but I'll sleep on it

[12:31] <Limbic_Region> well, I have it set as a perm env var so I can certainly let you know when it is b0rk now

[12:31] <audreyt> cool :) ciao!

[12:32] <agentzh> night, audreyt. :)

[12:32] <svnbot6> r12850 | agentz++ | [t/statements/statement_modifiers.t]

[12:32] <svnbot6> r12850 | agentz++ | - reviewed all the tests

[12:32] <svnbot6> r12850 | agentz++ | - simplified most of them

[12:32] <svnbot6> r12850 | agentz++ | - fixed the smartlink

[12:42] <agentzh> oh, pugs doesn't support postfix given.

[12:42] *** jferrero joined
[12:42] <agentzh> gaal: any quick guide to add support to that under src/?

[12:42] <agentzh> (if such quick guide exists)

[12:42] <Limbic_Region> agentzh - if there isn't an existing failing test case (which I assume there isn't since you would be linking to it), then please write one

[12:42] <agentzh> ;-)

[12:42] <agentzh> LR: i've already written one. :)

[12:43] <Limbic_Region> well, if this client didn't eat plus symbols I would agentz plus plus you

[12:43] <agentzh> hehe

[12:43] <agentzh> thanks

[12:44] <agentzh> i've been reading tests in the whole afternoon, so i can quickly commit many updates tonight. :)

[12:45] <audreyt> where is postfix given specced?

[12:45] <agentzh> audreyt: S04

[12:46] <agentzh> # L<S04/The C<for> statement/"given" "use a private instance of" $_>

[12:46] <agentzh> audreyt: but i think you should be sleeping. ;-)

[12:46] <audreyt> indeed. implemented

[12:46] <agentzh> audreyt++

[12:48] <agentzh> ohhhh, smartlinks.pl is really really helpful while writing tests for pugs. :)

[12:48] <Limbic_Region> well, it is really helpful to the extent it can let us know where we don't have tests (and possibly implementation) for that which is specced

[12:49] <Limbic_Region> and that is really really helpful

[12:49] <agentzh> aye

[12:49] <Limbic_Region> but too bad it didn't have some type of mind probe where it could be pointed at @larry to discover what is not-yet specced

[12:49] <agentzh> hehe.

[12:50] <agentzh> LR: oh, no problem, that is *my* task.

[12:52] <Limbic_Region> agentzh - at the risk of bringing her back to the channel - what prompted all the haskell hacking today?  I didn't see a lot going on the list so I presume it wasn't related to changing specs

[12:52] <svnbot6> r12851 | agentz++ | [t/statements/statement_modifiers.t]

[12:52] <svnbot6> r12851 | agentz++ | - added tests for use of private instance of $_ when

[12:52] <svnbot6> r12851 | agentz++ |   postfix for and given are used.

[12:52] <svnbot6> r12851 | agentz++ | - more smartlinks.

[12:52] <Limbic_Region> and yet she implied rapidly changing specs were a good thing

[12:53] <agentzh> LR: no clue. :(

[12:53] <agentzh> LR: maybe $job?

[12:54] <agentzh> i think she said Haskell is a good thing to rapidly changing specs.

[12:54] <audreyt> $job

[12:54] <agentzh> not the specs themselves.

[12:54] <audreyt> hacking on 面了?爸媽這邊也有許多有趣的朋友，歡迎妳參加共同的活動。有時間我們父女兩人一齊用一次午餐，好好享受深談的樂趣，如何?

[12:54] <audreyt> Vater

[12:54] <audreyt> oops!

[12:54] <mauke> AIIRRR

[12:54] <agentzh> cd audreyt && make realclean

[12:54] <audreyt> wow, mispaste mail from my data ;)

[12:54] * audreyt has to remember it's not OSX anymore

[12:55] <audreyt> anyway. it's $job, hacking on http://svn.openfoundry.org/openafp/

[12:55] <lambdabot> Title: Revision 31: /

[12:55] <mauke> weirdly enough I can see all those characters

[12:55] <agentzh> oh, i can't understand those characters even if i speak chinese.

[12:56] <agentzh> mauke: can you grok them?

[12:56] <mauke> hah, no

[12:56] * agentzh grins.

[12:56] <mauke> win xp <- putty <- linux <- screen <- irssi, and it just works. I think that's impressive.

[12:57] <agentzh> indeed!

[12:57] * audreyt mumbles something about X and Gtk having two distinct clipboards.

[12:57] <agentzh> but i'm using the path freenode <- waysonline proxy <- mIRC <- win xp

[12:57] <audreyt> anyway, postfix given is in.

[12:58] <agentzh> audreyt++++++

[12:58] <svnbot6> r12852 | audreyt++ | * Pugs.Eval/Pugs.Parser: Implement postfix "given" as

[12:58] <svnbot6> r12852 | audreyt++ |   requested by agentzh++.

[12:59] <agentzh> (brb)

[12:59] <audreyt> (bbl, g'nite)

[13:01] *** mago joined
[13:04] <wolverian> spec.pugscode.org doesn't respond

[13:05] <agentzh> spleep time already &

[13:05] *** agentzh left
[13:05] *** fglock joined
[13:07] <svnbot6> r12853 | agentz++ | [t/statements/statement_modifiers.t]

[13:07] <svnbot6> r12853 | agentz++ | - fixed a failing test.

[13:07] <svnbot6> r12853 | agentz++ | - with Audrey' last commit, all tests here are

[13:07] <svnbot6> r12853 | agentz++ |   successful!

[13:15] *** cjeris joined
[13:33] *** vel joined
[13:40] <svnbot6> r12854 | fglock++ | * v6 - Pugs::Emitter::Perl6::Perl5::Perl5Hash - (experimental)

[13:40] <svnbot6> r12854 | fglock++ |   a compile-time object that represents an unboxed hash;

[13:40] <svnbot6> r12854 | fglock++ |   attempting to reduce the combinatorial complexity in the emitter

[14:02] <mago> ping fglock

[14:02] *** eden_c joined
[14:02] <fglock> mago: pong

[14:03] <mago> fglock: /j #perl.br

[14:03] <fglock> ok

[14:06] *** eden_c left
[14:06] *** hexmode joined
[14:22] <svnbot6> r12855 | fglock++ | - misc/pX/fglock/Perl5.pm - optimized emitter; ' %hash5.isa("X") ' compiles to ' "X" eq "Hash" '

[14:25] *** weinig|bbl is now known as weinig

[14:26] *** DaGo joined
[14:28] *** rashakil_ joined
[14:32] <svnbot6> r12856 | fglock++ | - mv Emitter/Perl6/Perl5 to misc/pX/fglock/Pugs-Compiler-Perl6/lib...

[14:33] *** prefiks joined
[14:38] <svnbot6> r12857 | fglock++ | * v6 - added Emitter/Perl6/Perl5/Perl5Array.pm; Perl5Scalar.pm

[14:39] *** onsen joined
[14:48] <Limbic_Region> anyone know how to run a specific test only under the smoke harness?

[14:48] <Limbic_Region> I ask because something that passes from the command line fails under the harness

[14:49] <Limbic_Region> nevermind, found it from the Makefile.PL

[15:05] <Limbic_Region> bah, that didn't work - oh well

[15:15] *** soisoisoi joined
[15:25] *** plisk joined
[15:25] <kolibrie> Limbic_Region: does util/prove6 do what you want?

[15:26] <kolibrie> or you want to make smoke <some way to specify which test>?

[15:27] <Limbic_Region> kolibrie - I don't know about util/prove6

[15:27] <Limbic_Region> what I can say is this

[15:27] <Limbic_Region> pugs -Iblib6/lib t/examples/all_parse.t

[15:27] <Limbic_Region> works

[15:28] <Limbic_Region> but the test fails completely under the harness

[15:28] <Limbic_Region> so I want to see why

[15:29] <Limbic_Region> I have to go to lunch for a meeting in a minute but if you could figure out how to test that under the harness or verify prove6 does the same thing - I would appreciate it

[15:30] *** xerox joined
[15:31] *** justatheory joined
[15:36] *** kanru joined
[15:37] <gaal> Limbic_Region: export HARNESS_PERL=./pugs ; export PERL6LIB=blib6/lib ; prove t/some/test.t

[15:38] *** xinming joined
[15:38] <gaal> or in a pinch, $EDITOR util/yaml_harness.pl , change the default test inclusion list, and make smoke

[15:45] *** rashakil joined
[15:48] *** gugod_ is now known as gugod

[15:54] *** takanori joined
[16:10] *** weinig is now known as weinig|brb

[16:15] *** hcarty joined
[16:16] *** hcarty left
[16:17] *** Psyche^ joined
[16:18] *** Aankh|Clone joined
[16:19] *** amnesiac joined
[16:29] <nothingmuch> lambdabot: @seen luqui?

[16:29] <lambdabot> I haven't seen luqui?.

[16:29] <nothingmuch> lambdabot: @seen luqui

[16:29] <lambdabot> I saw luqui leaving #perl6 13 days, 21 hours, 1 minute and 58 seconds ago, and .

[16:29] <nothingmuch> damnit, every time

[16:30] <fglock> I can't remember how to coerce an array into a hash in perl5

[16:31] <audreyt> {@{$a}}

[16:31] <[particle]> my %hash= %{[ @array ]};

[16:31] <audreyt> er no, no [].

[16:31] <avar> my %hash= %{@{[ @array ]}}; :)

[16:32] <avar> just do my %hash = @array if @array % 2;

[16:32] <fglock> perl -e ' @a="a","b"; print %{[ @a ]}{a}; ' - doesn't work

[16:32] <avar> except without the undef behaviour

[16:32] <[particle]> fglock: change % to $ in that exapmle

[16:33] <audreyt> fglock: you've been brainwashed by p6...

[16:33] <avar> my %hash; %hash = @array unless @array % 2;

[16:33] <avar> I mean

[16:33] <audreyt> $ perl -le 'print ${{"a","b"}}{a}'

[16:33] <audreyt> b

[16:33] <audreyt> $ perl -le 'print {"a","b"}->{a}'

[16:33] <audreyt> b

[16:34] <audreyt> pick one :)

[16:34] <xerox> ->{a} ? :D

[16:34] <audreyt> sure

[16:34] <avar> to access the anon hashref

[16:34] <audreyt> $ perl -le 'print ENV->{LC_ALL}'

[16:34] <audreyt> zh_TW.UTF-8

[16:35] *** Psyche^ is now known as Patterner

[16:35] <fglock> no luck with ${{@a}}{a} or ${@a}{a}

[16:35] <audreyt> since it's rewritten to ${ENV}{LC_ALL} and finally $ENV{LC_ALL}

[16:35] <avar> like my $hr = { a => "b" }; $hr->{a];

[16:35] *** asz joined
[16:36] <xerox> anon?

[16:36] <xerox> Yuck.

[16:36] <audreyt> fglock:

[16:36] <audreyt> $ perl -le 'my @a = qw(a b); print ${{@a}}{a}'

[16:36] <audreyt> b

[16:36] <avar> audreyt: I didn't know of that

[16:36] <avar> (ENV->..)

[16:37] <audreyt> it's not exactly common knowledge :)

[16:37] <avar> Is all of this stuff documented somewhere?

[16:37] <audreyt> another not exactly common knowlege:

[16:37] <audreyt> $ perl -le 'print %ENV->{LC_ALL}'

[16:37] <audreyt> zh_TW.UTF-8

[16:37] <avar> like my @a; push a, "b";

[16:38] <fglock> audreyt: thanks :p

[16:38] <audreyt> it's documented somewhere, I'm sure, but it's very hard to find them...

[16:38] <gaal> audreyt: spread the ev0l :)

[16:38] <audreyt> ...I know the ENV-> trick is documented in Damian's selfgol talk

[16:38] <gaal> it's actually only half documented. it's mentioned in perldiag.

[16:38] <audreyt> ah. right. that's where I learned it

[16:39] <gaal> as a technique to avoid sigils in Makefiles that have to be cross-platform, I think it's best documented in the commit log for a certain Perl 6 implementation...

[16:40] <audreyt> :)

[16:41] *** Aankhen`` joined
[16:42] <gaal> is there a config option to get irssi to display unicode? here I see unicode in other screen(1) windows but not in irssi.

[16:43] <lumi> /set term_type utf-8

[16:44] <gaal> lumi: rssi: Unknown setting term_type

[16:44] <lumi> What's in your term_charset?

[16:45] <wilx> Hmm, google, I don't remember what it was, but one of the options was renamed....

[16:45] <gaal> UTF-8

[16:45] <lumi> Mu. Dunno then, sorry :/

[16:46] <gaal> ah well.

[16:46] <audreyt> hm. embedding perl5 always with pugs, and then demand perl 5.8, can give rise to lots of nice utility functions

[16:47] <audreyt> e.g. full encoding support without thinking about libicu.

[16:47] <audreyt> or rx:P5// that supported embedded closures.

[16:47] <gaal> embedded Perl 6 closures?

[16:47] <audreyt> code inside rx:P5// are taken as p5, iirc.

[16:47] <audreyt> but sure, callback to p6land is already there, if needed.

[16:49] <gaal> does activestate come with all the .h files needed to embed perl by default?

[16:49] <audreyt> yes, and Limbic_Region already confirmed it as working.

[16:49] <gaal> cool

[16:50] <gaal> does ghc's bundled gcc take care of everything? that's great

[16:50] <audreyt> yup.

[16:50] <gaal> (on windows)

[16:50] <audreyt> the earlier buildfail was simply that

[16:50] <audreyt> perl5's dirent.h was loaded

[16:50] <audreyt> instad of mingw's

[16:50] <audreyt> so need a -D

[16:50] <audreyt> that's all

[16:51] <gaal> what does switching rx backend entail though? wouldn't that be quite some work?

[16:51] <audreyt> but that means I need to more properly use ExtUtils::Embed...

[16:52] <audreyt> well, calling into perl5 is already there, so it's not a lot of work

[16:52] <audreyt> but not going to tackle that any time soon

[16:52] <audreyt> it involves writing a RRegex.Perl5

[16:52] <audreyt> that uses the Pugs.Embed.Perl5 callconv

[16:52] <audreyt> and then just use it like RRegex.PCRE.

[16:53] <gaal> that doesn't look too hard

[16:53] <audreyt> it probably isn't

[16:53] * gaal shudders at the comment at the top of those files.. "arch-tag:..."

[16:53] <gaal> <- tla ph33r

[16:55] * audreyt suddenly recall she had another module that used ExtUtils::Embed extensively and contains lots of useful workarounds

[16:56] <gaal> oh? this is going to be funny :)

[16:56] <audreyt> PuAgRs

[16:56] <gaal> w00t

[16:57] *** ludan joined
[16:58] *** chris2 joined
[16:58] <svnbot6> r12858 | fglock++ | * v6 - more unboxed types (misc/pX/fglock)

[16:59] <audreyt> perhaps PUGS_EMBED to '-perl5' will disable p5 embedding

[16:59] <audreyt> or '!perl5'

[16:59] <gaal> whee http://search.cpan.org/src/SMUELLER/PAR-0.952/myldr/Makefile.PL has OS/2 support :-)

[17:00] <Limbic_Region> audreyt - you don't like 5lrep for that?

[17:00] <audreyt> yeah, contributed by ilyaz

[17:00] <audreyt> Limbic_Region: mmm?

[17:00] <Limbic_Region> perl5 spelled backwards

[17:00] * Limbic_Region murmurs redrum redrum

[17:00] <Limbic_Region> sorry - just got back from lunch

[17:01] <audreyt> np :)

[17:01] * gaal has to moose for a bit! see y'all :)

[17:01] <Limbic_Region> testing in a sec

[17:01] <Limbic_Region> gaal - thanks for earlier

[17:04] <Limbic_Region> anyone know what "dubious - Test returned status 5 (wstat 1280, 0x500)" means in english?

[17:04] <fglock> audreyt: I'm testing compile-time autoboxing emulation, it seems to work so far - http://svn.openfoundry.org/pugs/perl5/Pugs-Compiler-Perl6/lib/Pugs/Emitter/Perl6/Perl5/

[17:04] <lambdabot> Title: Revision 12858: /perl5/Pugs-Compiler-Perl6/lib/Pugs/Emitter/Perl6/Perl5

[17:06] <audreyt> Limbic_Region: it segfaulted.

[17:06] <audreyt> fglock: ooh! nice

[17:06] <svnbot6> r12859 | audreyt++ | * First sketch at using ExtUtils::Embed on non-Win32 platforms

[17:06] <svnbot6> r12859 | audreyt++ |   for perl5 embedding.  Need to the solve "make ghci" problem

[17:06] <svnbot6> r12859 | audreyt++ |   (probably using 'ar' to extract DynaLoader.o out) before

[17:06] <svnbot6> r12859 | audreyt++ |   we can enable this by default.

[17:07] <Limbic_Region> audreyt - ok, question is why - it works fine from the command line

[17:07] <audreyt> and with that I'm back to moose as well... see y'all

[17:07] <Limbic_Region> pugs -Iblib6/lib t/examples/all_parse.t # works but not under harness

[17:07] <Limbic_Region> TTFN audreyt

[17:08] <audreyt> there's many possibilities... but TTFN

[17:08] *** Daveman joined
[17:12] * Limbic_Region thinks he has it

[17:15] *** crem_ joined
[17:15] <Limbic_Region> the debugging info that is making it work under the command line is making it fail under the harness

[17:18] * Limbic_Region will figure it out another time

[17:37] <TreyHarris> heh.  smoke on r12792: duration 12894 secs, 10400 ok, 679 failed.  r12835: duration 9654, 10547 ok, 617 failed

[17:37] <TreyHarris> I think r12835 was better :-)

[17:39] *** nothingmuch joined
[17:49] *** larsen joined
[18:06] <TreyHarris> ?eval class Foo { has ($.y is rw, @!a); method bar (Str $yish, Array @aish) { $.y = $yish; @!a = @aish } }; my $x = 'hi'; my @z = <<hi $x how are you>>; my Foo $obj .= new; $obj.bar($x, @y); say $obj.perl

[18:07] *** [[mago]] joined
[18:07] <TreyHarris> ?eval 1 + 1

[18:08] *** ruoso joined
[18:09] <xinming> TreyHarris: I think you can join #perlchina for eval the bot currently

[18:09] <xinming> hmm, It seems I have to rerun the p6bot-loop

[18:09] <xinming> bbl

[18:09] <TreyHarris> xinming: thanks

[18:10] *** DaGo joined
[18:10] <xinming> I mean the perlchina one, I don't have right to change this bot. :-P

[18:11] <TreyHarris> xinming: yep, understood.  but i don't need the bot after all

[18:11] *** autark joined
[18:25] <svnbot6> r12860 | fglock++ | v6 - more tweaks to make [email@hidden.address] generate '${{@array}}{"c"}'

[18:26] *** markymoon joined
[18:29] *** weinig|brb is now known as weinig

[18:32] *** qmole joined
[18:36] <TreyHarris> just noticed r12853.  when will ".foo given XXX" and "XXX.foo" not be interchangeable?

[18:37] <araujo> hello!

[18:37] <TreyHarris> is postfix given just provided for completeness?

[18:37] <TreyHarris> araujo: que tal

[18:37] <araujo> hola TreyHarris :-)

[18:39] *** markymoon left
[18:42] <Limbic_Region> TreyHarris - I received your email but marked it as spam at first

[18:42] <Limbic_Region> something made me decide to go pull it out of the trash though ;-)

[18:42] <TreyHarris> um... ok

[18:42] * TreyHarris doesn't know how to interpret that

[18:42] *** pdcawley joined
[18:43] <TreyHarris> i wasn't asking you to donate to anything

[18:44] <Limbic_Region> no no

[18:44] <Limbic_Region> just that I received an email from someone I don't correspond with regularly with a subject line of "answer"

[18:44] <Limbic_Region> I flagged it (and many others at the same time) as spam

[18:44] <Limbic_Region> a few minutes later something in the back of my head told me to actually read that one

[18:44] <Limbic_Region> so I fetched it out of the trash

[18:45] <TreyHarris> oh, i see. :-)

[18:45] *** frederico joined
[18:45] <TreyHarris> i thought you meant you read it and then marked it.  lol

[18:47] <Limbic_Region> not that I want to open up that can of worms again but I think I wasn't clear that the majority of my negative sentiment was directed towards the PerlMonks fund within TPF

[18:47] <Limbic_Region> TPF as a whole, I haven't dealt with enough to have formed an opinion

[18:48] <TreyHarris> ah

[18:48] *** pdcawley left
[18:58] *** weinig is now known as weinig|food

[18:58] <svnbot6> r12861 | fglock++ | v6 - more unboxed Array methods

[19:03] *** Aankh|Clone joined
[19:07] *** penk joined
[19:09] *** ruz joined
[19:11] *** marmic joined
[19:11] *** perlbot joined
[19:12] *** perlbot joined
[19:17] *** weinig|food is now known as weinig

[19:29] *** DaGo joined
[19:40] *** Lorn joined
[19:40] *** jferrero joined
[19:43] <svnbot6> r12862 | gaal++ | * Alias for upload-smoke, because half of the time I get it backwards

[19:46] *** iblechbot joined
[19:47] <Daveman> :p

[19:52] <cognominal> milgram++

[20:10] *** avarab joined
[20:13] <fglock> araujo: ahora tenemos la pagina tambien en espanol: http://www.perl.org.br/twiki/bin/view/YAPC/YAPCSA2006_ES

[20:13] <lambdabot> Title: YAPCSA2006_ES &lt; YAPC &lt; TWiki

[20:14] *** weinig joined
[20:14] *** hexmode joined
[20:15] *** weinig joined
[20:17] *** avarab is now known as avar

[20:18] *** buubot joined
[20:19] *** buu joined
[20:24] *** PolettiX joined
[20:32] <svnbot6> r12863 | fglock++ | v6 - more emitter tweaks - [email@hidden.address] compiles to

[20:32] <svnbot6> r12863 | fglock++ |   ( map { ( $_, @array[$_] ) } 0..@array-1 )[4,5]

[20:37] *** frustrato joined
[20:45] *** frederico joined
[20:49] *** [[mago]] joined
[21:19] *** ToTimkopf joined
[21:24] *** ruz joined
[21:33] *** fglock left
[21:44] *** justatheory joined
[21:49] *** xdg joined
[21:59] *** frederico joined
[22:11] *** awwaiid joined
[22:14] *** [[mago]] joined
[22:44] *** cjeris left
[22:45] *** explorer__ joined
[22:50] *** weinig is now known as weinig|work

[22:51] *** foo\ joined
[22:57] *** weinig|work is now known as weinig

[23:24] *** weinig is now known as weinig|bbl

[23:29] *** markstos joined
[23:39] <markstos> We have a Perl6::Perl5::Differences, but I wonder if we should have two documents for Perl5 users: 1, like Differences.pod mostly does now, would focus on how to Perl5ish things in a Perl6ish way.  And 2. more of a "new features" document. These would of course be differences as well, but would be things which /didn't exist/ in Perl5.  Thoughts ?

[23:54] * markstos just sent a clarification question about return types to p6l

[23:55] *** miyagawa_ joined
