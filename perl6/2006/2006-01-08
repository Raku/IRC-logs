[00:25] *** Southen joined
[00:29] *** scook0 joined
[00:31] <PJF> Somewhat off-topicly, for but the antipodeans in the room, http://perl.net.au/ is coming off beta soon, and discussions are held in #PerlNet .

[01:13] *** wilx joined
[01:27] *** frederico joined
[01:45] *** DaGo joined
[02:04] *** elmex joined
[02:09] *** sapper joined
[02:26] *** stennie left
[02:27] *** stennie joined
[02:49] *** SamB joined
[02:53] *** verve_ joined
[03:02] *** vel left
[04:00] *** zuulvin_ joined
[04:46] *** Amnesiac joined
[04:56] *** Khisanth joined
[05:06] <audreyt> nnunley: say again?

[05:07] <audreyt> nnunley: what are you trying to do with parrows?

[05:07] <audreyt> rafl: YAML 0.49_70 is on CPAN; I think 0.50 will be released in this hackathon

[05:08] *** whiteg joined
[05:11] *** whiteg joined
[05:12] *** buu joined
[05:48] *** Khisanth joined
[05:49] *** DaGo joined
[05:53] *** Aankhen`` joined
[06:10] *** Khisanth joined
[06:15] * audreyt goes to zhubei for hackathon &

[06:17] <gaal> have fun!

[06:18] <audreyt> :))

[06:18] <audreyt> gaal: how's YAML::Syck? will you (or did you) have cycles to work on that for the next ~4hrs

[06:18] <audreyt> if not I'll give it a go

[06:19] <gaal> I have something that should work but doesn't :(

[06:19] <gaal> on two counts it doesn't:

[06:20] <gaal> 1. the perlapi isn't returning the right blesstype (obviously i'm using it wrongly)

[06:20] <gaal> 2. the tag isn't emitted, though I'm doing the same thing as in .Hs!

[06:20] <gaal> I

[06:20] <gaal> 'll send you the patch; I have to go to $work now

[06:20] *** nothingmuch joined
[06:22] <gaal> btw, the implicit "e" arg in the .hs source was very useful for me for learning, but I think of maybe putting it back to an explicit arg because it isn't doing something special there and someone who didn't follow your lesson might find it confusing :)

[06:26] <gaal> sent

[06:28] *** khisanth_ joined
[06:30] <gaal> also, I was wondering if there was a golfier way to patmatch against records? the last change meant some of the code looks a lot clumsier :(

[06:31] <audreyt> ok, please mail me the patch

[06:31] <audreyt> like, in 5mins, if possible :)

[06:31] <audreyt> yeah, the implicit ?e should go

[06:31] <audreyt> oh, I didn't parse the "sent"

[06:32] <audreyt> patmatch against records is verbose since hs doesn't have punning; but you can match it asif it's positional.

[06:32] <audreyt> i.e. for data Foo = MkFoo { foo :: Int, bar :: Int }

[06:32] <audreyt> you can patmatch it as

[06:32] <audreyt> f (MkFoo x y) = ...

[06:32] <audreyt> totally ignoring the label bit

[06:33] <audreyt> also, YAML's emitting of undef as completely null

[06:33] <audreyt> is valid and legal

[06:33] <gaal> really?

[06:33] <audreyt> yup

[06:33] <audreyt> checked with ingy

[06:33] <gaal> interesting. but I like ~ better (visual cue)

[06:34] <gaal> please tell me if you got it, sometimes my outgoing mail sucks.

[06:34] <audreyt> it's a matter of taste

[06:34] <audreyt> I got it

[06:34] <audreyt> ok, gotta run now

[06:34] <audreyt> ciao!

[06:34] <gaal> ok (anyway the tick with null is parsing it, too :-)

[06:34] <gaal> enjoy

[06:36] <gaal> positional patmatches feel like tighter coupling than is warranted.. is there a meta-_ character that means "I don't care about the rest of the positional fields?"

[06:55] *** mjl69 joined
[07:20] *** nothingmuch joined
[07:30] *** lisppaste3 joined
[07:37] *** loftcity joined
[08:20] <nnunley> audreyt: I'm trying to get the -g option working under PIL.

[08:35] <gaal> (not that named field changes don't change the ABI... but at least that only requires recompilation, not source code changes)

[08:39] *** nothingmuch joined
[09:14] *** kakos joined
[09:33] *** bernhard joined
[09:40] *** iblechbot joined
[09:45] *** whiteg joined
[10:16] *** chris2 joined
[10:20] *** kane_ joined
[10:22] *** GeJ joined
[10:40] *** whiteg joined
[10:46] *** kanru joined
[10:57] *** kanru joined
[10:58] <gaal> audreyt: so, emitting the tag doesn't work because we (oughtta) find out the blessing at the reference level, but that's where we hit 'case SVt_RV' and immediately recurse into perl_syck_emitter_handler again. too bad there's no way to pass an implicit arg here too :)

[10:59] <gaal> as for why sv_reftype returns 'REF' and not the blessed class... I'm still pondering that

[11:01] <gaal> ugh, an ugly hack is to take advantage of the fact we have a void pointer and pass a struct with the class tag in the case of a blessed reference, and a real SV in the other cases. the handler can look for a magic cookie to determine what input it received. I don't believe I just suggested this.

[11:01] *** xinming joined
[11:02] *** kanru joined
[11:16] <gaal> ...memory management of this is simple at least; it can all be done with an automatic variable

[11:45] <audreyt> gaal: yo

[11:45] <audreyt> I've fixed the tag problem

[11:46] <audreyt> via extra emitter bonus field

[11:46] * clkao waits for miyagawa 

[11:47] <audreyt> clkao: @ airport?

[11:48] <clkao> hai

[11:59] <nnunley> Konnichi wa clkao-san

[11:59] <gaal> ah, the bonus field is certainly the right way to do it :)

[11:59] <gaal> but did you find out why the sv_reftype was being weird?

[11:59] <clkao> nnunley: nihao

[12:00] <gaal> wow, I actually understood what you said.

[12:00] <nnunley> About the most Japanese that I can write. :/

[12:00] <audreyt> gaal: yes, sv_retype should test the SvRV

[12:00] <gaal> nihao's in Chinese, and I got that too :)

[12:00] <audreyt> not the sv itself

[12:01] <audreyt> now, the hash style thing, I still don't have a clue.

[12:01] <clkao> audreyt: i need gugod's address

[12:01] <gaal> there's an enum, maybe we just need a different value?

[12:01] <gaal> or does that control inlining?

[12:02] <audreyt> clkao: &#x52dd;&#x5229;&#x4e94;&#x8def;31&#x865f;

[12:02] <clkao> cant resad

[12:02] <audreyt> gaal: I have no idea

[12:02] <audreyt> clkao: they are html

[12:02] <clkao> orz

[12:02] <gaal> hmmm magic is stored in the hash, not the reference. ok, makes sense

[12:03] <gaal> so the bless keyword is highly magical

[12:03] <gaal> i mean of course it is

[12:03] <gaal> but more so than obvious

[12:03] <audreyt> perl -e 'print "\x{52dd}\x{5229}\x{4e94}\x{8def}31\x{865f}"'

[12:03] <audreyt> clkao: better?

[12:03] <clkao> ya got it already

[12:03] <audreyt> gaal: svn up http://svn.kwiki.org/audreyt/YAML-Syck/

[12:03] <gaal> and address is five characters? so cool

[12:05] <gaal> wah!?

[12:05] <gaal> *** glibc detected *** double free or corruption (fasttop): 0x082cd2c0 ***

[12:05] <gaal> at the end of 'make'

[12:06] <audreyt> yeah, there might be an double free going on

[12:06] <gaal> urp, not at the end of make, at runtime.

[12:06] <clkao> got him!!

[12:07] <audreyt> attempted a fix.

[12:07] <audreyt> clkao: oooh!

[12:07] <gaal> Safefree == ?

[12:07] <audreyt> gaal: Safefree = free

[12:07] <clkao> audreyt: dinner yet?

[12:07] <audreyt> see r67

[12:07] <audreyt> clkao: I ate a lot of cookies

[12:07] <audreyt> clkao: gugod went out to buy some food material

[12:07] <audreyt> but not proper dinner yet

[12:07] <clkao> oh ok. so we will see meet you directly

[12:08] <audreyt> ingy's working on releasing YAML 0.50 -- we've got the callback API figured out and YAML::Syck is going to roundtrip well with taguri

[12:08] <audreyt> yup

[12:09] *** Alias_ joined
[12:09] <Alias_> Anyone know who set up the logging bot?

[12:10] <leo> obra: ping

[12:12] <gaal> audreyt: can't the safefree+NULL always be done in cleanup?

[12:12] <audreyt> gaal: no, because HV/AV can't propaget their tags to elems

[12:13] <audreyt> *propagate

[12:15] <gaal> ....do they need to?

[12:15] *** elmex joined
[12:15] <audreyt> they must not

[12:15] <gaal> just the syck_emit_seq / _map needs to be tagged

[12:15] <audreyt> if you freeze at end of cleanup, they will

[12:16] <gaal> oh, of course, we're reusing the bonus. duh.

[12:16] <gaal> but that's where the double free is happening then, no?

[12:17] <gaal> hmm, no.

[12:19] <gaal> Safefree == free + double free guard? then in cases where there *isn't* a tag it'll be freed twice.

[12:20] <gaal> should be "if (tag) free (tag)"

[12:22] *** r0nny joined
[12:23] <gaal> heh. running this in gdb, of course there is no double free :-(

[12:23] <Alias_> ping?

[12:24] <Alias_> erm.. guys, that log bot? Anyone know what it is and where I can get one?

[12:28] <gaal> Alias_: I don't know, sorry. maybe talk to the colabti admin? alternatively, iblech runs a private bot, ask him for a copy of the code?

[12:28] <Alias_> colabti?

[12:28] <gaal> Alias_: http://colabti.de/irclogger/irclogger_log/perl6

[12:29] <gaal> ah, a hop and a half away: http://colabti.de/IrcLogger2.html

[12:29] <Alias_> aha, found it

[12:29] <Alias_> yep

[12:33] *** iblechbot joined
[12:38] <audreyt> okay... enough YAML for now

[12:38] <audreyt> ingy threatens to port PArrows to perl5 and have a working/robust/stable Rules implementation

[12:38] <audreyt> on perl5

[12:38] <audreyt> that's probably the next h'thon item

[12:38] * audreyt goes back implementing PILN repr types and the Code type

[12:38] <gaal> maybe ingy wants to come to .il in feb?

[12:39] <audreyt> I don't know; I'll ask

[12:40] <Alias_> So is Ingy doing the "travelling around the world" thing too?

[12:40] <audreyt> apparently so

[12:52] *** frodo72 joined
[12:55] *** whiteg joined
[13:08] *** azuroth joined
[13:12] * avar made a megapugs hack

[13:12] <avar> well

[13:12] <avar> not exactly

[13:12] <audreyt> mm?

[13:13] <audreyt> miyagawa arrived :)

[13:13] <avar> http://avar.lir.dk/mw/HEAD/wiki/Perl_6 <- perl 6 pastebin

[13:13] <avar> using the syntax highlight from util/perl6.vim

[13:13] <audreyt> ooh

[13:13] <avar> \o/

[13:16] <rafl> audreyt: Great.

[13:16] <azuroth> any idea how to get `.nsv` streams to play under linux?

[13:17] <azuroth> apparently google does.

[13:17] <avar> so, uh, cool?;)

[13:19] <nnunley> avar: Pretty cool.

[13:22] <avar> I'm still trying to find a way to make vim work using stdin / stdout 

[13:22] <avar> i.e. echo food | vim ... - > yummie

[13:23] <avar> so I'm just using temporary files now

[13:23] *** whiteg joined
[13:28] <gaal> avar: I think you can't, but -f and --cmd might help.

[13:30] <gaal> yay l33t :)

[13:30] <avar> shell_exec( "vim -u {$this->mVimrc} -e +'setf perl6' +'run! syntax/2html.vim' +':w {$this->mOutFile}' +':qa!' {$this->mInFile}" );

[13:30] <avar> just using that right now

[13:35] <azuroth> how annoying. xine reckons it can handle it, but it doesn't seem to be able to

[13:38] *** whiteg_ joined
[13:39] *** ilogger2 joined
[13:40] *** ilogger2 joined
[13:41] *** mjl69 joined
[13:44] *** PJF left
[13:44] *** stennie joined
[13:46] *** alexe_home joined
[13:51] <gaal> azuroth: maybe mplayer?

[13:51] *** kane_ joined
[13:51] *** G2 joined
[13:59] <obra> leo: pong

[14:08] <leo> obra: it was re META.yml - but too late for this release

[14:09] <obra> oh no :/

[14:09] <leo> well, do you have a working meta.yml?

[14:09] <obra> well, it sounds like andreas can fix it for us.

[14:09] <obra> oh. does parrot have _no_ meta.yml?

[14:10] <leo> exactly

[14:10] <obra> ah.

[14:10] <obra> nod. ok. 

[14:10] <obra> we can fix it next month

[14:10] <leo> well - if there is a quick solution, I can still include it in 0.4.1

[14:11] <clkao> obra!

[14:11] * obra isn't enough of a META.yml wizard to definitely get it right

[14:11] <obra> clkao: hi!

[14:11] <leo> I think we should discuss this on #parrot

[14:11] <obra> and broken metadata is scarier than no metadata

[14:11] <obra> and andreas can fix it in PAUSE

[14:11] <leo> ok

[14:12] <obra> we just need to get him a list of what parrot has that it shouldn't

[14:12] <leo> yup - please send a TODO to p6i

[14:12] <gaal> modulo not working, I have YAML round-trip working.

[14:13] <gaal> so audreyt, when you get a moment, I need some explanation of IVars :)

[14:17] <obra> leo: done

[14:17] <leo> thanks

[14:24] <gaal> I modulorized not working. Roundtrip YAML works now, committing.

[14:26] <svnbot6> r8607 | gaal++ | * eval :lang<yaml> deserializes pugs objects.

[14:28] <gaal> this probably breaks horribly with fancy classes :)

[14:28] <gaal> ?eval class Foo; has $.x; my $x = Foo.new(x=>"xxa").yaml; say $x; my $y = eval $x, :lang<yaml>; say $y.yaml

[14:28] <evalbot_8606> OUTPUT[--- !pugs/object:Foo  x: xxa  pugs: unexpected node: <Scalar> 

[14:28] <gaal> here, '07...

[14:30] <gaal> ?eval class Foo; has $.x; my $x = Foo.new(x=>"xxa").yaml; say $x; my $y = eval $x, :lang<yaml>; say $y.yaml

[14:30] <evalbot_8606> OUTPUT[--- !pugs/object:Foo  x: xxa  pugs: unexpected node: <Scalar> 

[14:30] <azuroth> ?eval say "sarah smells";

[14:30] <valbot_860> is now known as evalbot_8607

[14:30] <evalbot_8607> OUTPUT[sarah smells ] bool::true 

[14:31] <gaal> ?eval class Foo; has $.x; my $x = Foo.new(x=>"xxa").yaml; say $x; my $y = eval $x, :lang<yaml>; say $y.yaml

[14:31] <evalbot_8607> OUTPUT[--- !pugs/object:Foo  x: xxa  --- !pugs/object:Foo  x: xxa  ] bool::true 

[14:31] <gaal> tada!

[14:31] <azuroth> wow, it must be true

[14:32] <Alias_> ?eval say "azuroth suxx0rs";

[14:32] <evalbot_8607> OUTPUT[azuroth suxx0rs ] bool::true 

[14:32] <Alias_> ;)

[14:32] <gaal> ?eval say "everything you read"

[14:32] <evalbot_8607> OUTPUT[everything you read ] bool::true 

[14:33] <azuroth> you'll pay for this Alias_

[14:33] * gaal praises Syck and why

[14:36] <azuroth> sar

[14:36] <azuroth> ul8o

[14:37] *** azuroth left
[14:57] *** Limbic_Region joined
[15:02] *** bsb joined
[15:09] <audreyt> gaal: pong

[15:13] <audreyt> ?eval my $x; $x = \$x; $x.yaml

[15:13] <evalbot_8607> "--- \n<ref>: ~\n" 

[15:15] *** nothingmuch joined
[15:19] <avar> ?eval my Num $x = 5.5; $y = \$x; $y.yaml 

[15:19] <evalbot_8607> Error: Undeclared variable: "$y" 

[15:19] <avar> ?eval my Num $x = 5.5; my $y = \$x; $y.yaml 

[15:19] <evalbot_8607> "--- \n<ref>: 11/2\n" 

[15:22] <nnunley> 5.5 is being converted to a fraction?

[15:23] <audreyt> yeah, bad idea

[15:23] <audreyt> since I don't think yaml supports rationals natively

[15:30] *** lisppaste3 joined
[15:38] <audreyt> gaal: hm, where did you parse the tags stuff in syck load?

[15:38] <audreyt> I can't seem to find the relevant line.

[15:41] <audreyt> ahh, syckNodeTag

[15:50] <gaal> rehi

[15:50] <gaal> hello. :)

[15:50] <gaal> I was looking at serializing rules previously, but was interrupted.

[15:51] <audreyt> yo

[15:51] <audreyt> want to take a stab in adding parsing tags to YAML::Syck? :)

[15:51] <gaal> sure

[15:52] <audreyt> k. I'll release 005

[15:52] <gaal> btw please inspire the haskell' folks to add some kind of syntax making patmatches against sting prefixes less clunky :)

[15:53] <Alias_> 005?

[15:53] <audreyt> ("foobar", rest) <- splitAt 6, string

[15:53] <audreyt> s/,//

[15:53] <audreyt> gaal: isn't that good enough?

[15:53] <Alias_> Is this a versioning system based on spy code numbers?

[15:53] <audreyt> Alias_: no, it's YAML::Syck 0.05

[15:53] <audreyt> now with object dumping and no memory leaks

[15:53] <Alias_> ah :)

[15:54] <gaal> hey, but did you figure out the double free? I didn't

[15:54] <Alias_> Remind me again why YAML stopped being for outputting simple reports your secretary could read?

[15:54] <audreyt> gaal: I added tag=NULL

[15:54] <Alias_> :)

[15:54] <audreyt> Alias_: well, if your data type is simple, it still does that :)

[15:54] <Alias_> riiiight

[15:54] <audreyt> like, if you only use the JSON subset of YAML.

[15:54] <Alias_> Did someone solve me "prove that a file only contains the JSON subset"

[15:54] <Alias_> my

[15:55] <gaal> one serious issue with yaml is that it serializes badly to dead trees

[15:55] <Alias_> For the purposes of sanity checking YAML data

[15:55] <Alias_> ->load( $filename, json_subset => 1 )

[15:56] <gaal> (... think "page break")

[15:56] <gaal> audreyt: so can i svn up?

[15:56] <audreyt> gaal: sure

[15:56] <Alias_> gaal: sure it does, within sufficiently simple subsets

[15:57] <audreyt> Alias_: sure... it's called "dump with JSON.pm ;)"

[15:57] <Alias_> If you like UGLY

[15:57] <Alias_> The thing that most attracted me to YAML was readability, not the hardcore serialization aspect

[15:58] <Alias_> Speaking of which, have you solved the Storable problems yet?

[15:58] <gaal> "I have this excellent compression algorithm, if you happen to have data that is equivalent to what I had in mind"

[15:59] * gaal needs to $work a bit... audreyt, can the tagparse stuff wait a few hours or did you want to get 005 out your-today?

[16:00] <gaal> s/equivalent/equal/

[16:01] <gaal> re: splitAt: (a) I don't like having to count and (b) does the compiler generate the same code it did for an explicit 'a':'b':'c': patmatch?

[16:01] <gaal> anymoose: gotta go, bbiab :b<~2hr>

[16:01] <gaal> &

[16:02] <audreyt> gaal: no, probably not. hm

[16:06] <Limbic_Region> audreyt - were you only joking when you journaled that objects would be done this weekend?

[16:06] <Limbic_Region> or just that one aspect of objects?

[16:07] *** marmic joined
[16:08] <audreyt> Limbic_Region: no, objects as specced as S12

[16:08] <audreyt> Limbic_Region: but I've been distracted into YAML hacking... will go back to objects in a few mins

[16:09] <Limbic_Region> heh

[16:09] <Limbic_Region> s/distracted/conned/

[16:13] <Limbic_Region> ?eval ([+] 1..100).yaml

[16:13] <evalbot_8607> "--- 5050\n" 

[16:13] <Limbic_Region> heh - cool

[16:14] <Limbic_Region> ?eval { "this is $^weird" }.("cool").yaml

[16:14] <evalbot_8607> "--- this is cool\n" 

[16:14] <Limbic_Region> sweet

[16:15] <Juerd_> ?eval [].yaml

[16:15] <evalbot_8607> "--- []\n\n" 

[16:15] <Juerd_> Sometimes things just make sense.

[16:21] *** aufrank joined
[16:21] <aufrank> ?seen schwern

[16:21] <gaal> i am teh eevil audreyt distraxx0r lol

[16:22] <aufrank> are they fun distractions?

[16:22] *** Alias_ left
[16:22] <audreyt> gaal: I implemented blessed obj loading ;)

[16:23] <gaal> too fast for me, as usual :)

[16:23] <audreyt> nah, because clkao pressured me into it

[16:23] <audreyt> that's the thing about hackathons

[16:23] <clkao> bwahaha

[16:23] <audreyt> clkao: threatened to switch svk to Y::Syck

[16:23] <clkao> now, what do you need from me

[16:23] <audreyt> per-checkout .svk ;)

[16:24] <clkao> mm

[16:24] <audreyt> gaal: do you have any inkling about the hash map style?

[16:24] <audreyt> the hs call Just Worked

[16:24] <audreyt> I can't seem to figure out how it differes from the p5 one

[16:24] <audreyt> clkao: YAML::Syck 0.07 out.

[16:24] <clkao> k

[16:24] <audreyt> 3 releases in an hour ;)

[16:29] <aufrank> nice work, any parrot people in the room

[16:30] <audreyt> leo++

[16:30] <aufrank> oh yeah, that's how we do it

[16:30] <aufrank> leo++

[16:32] <gaal> sorry, i keep getting abducted by cows.

[16:32] <leo> thanks folks

[16:36] <gaal> audreyt: is YAML::Syck's syck the same version as pugs'?

[16:36] <gaal> why mentioned he's realeasing a new version soon, incidentally.

[16:36] <gaal> the API exercise for emitting looks precisely the same to me, so only an implementation difference can explain it.

[16:37] <audreyt> gaal: I took from svn snapshot

[16:37] <audreyt> so probably a bit delta

[16:37] <audreyt> let me look at cping from pugs

[16:37] <gaal> either that, or he's playing tricks on us: if (caller eq 'audreyt') { play_tricks }

[16:38] <geoffb> Have to keep audreyt amused somehow, she clearly doesn't have enough things to work on ...

[16:38] <audreyt> gaal: yeah, reverting to the pugs version works

[16:38] <audreyt> okay, releasing 0.09.

[16:39] <gaal> whee :)

[16:39] <aufrank> syck is a yaml parser, is that right?

[16:40] <gaal> +emitter

[16:40] <gaal> yeah

[16:40] <aufrank> k

[16:40] <audreyt> 0.09 released.

[16:41] <gaal> ?eval my $x = "hi aufrank".yaml; say $x; my $y = eval $x :lang<yaml>; say $y

[16:41] <evalbot_8607> OUTPUT[--- hi aufrank  hi aufrank ] bool::true 

[16:41] * gaal dances the round trip

[16:41] <audreyt> gaal++

[16:42] <gaal> audreyt++ for $releases_per_hour

[16:42] <aufrank> nice!

[16:44] <gaal> audreyt: also does objects, and simultaneously available at a CPAN near you for p5. ("after a pause", as leo++ so punningly put it)

[16:44] <audreyt> very punny

[16:44] <audreyt> -Opun

[16:44] * aufrank groans

[16:46] <audreyt> *rimshot*

[16:46] <gaal> oooh! rxRule is a String! I see rule serialization coming soon :)

[16:47] <aufrank> we can pass around grammars in yaml

[16:47] <gaal> i bet that'll change sooner or later though.

[16:48] <gaal> anyway, this looks like an excellent time to go home. see you later :)    &

[16:48] <aufrank> audreyt: what representation do you think rule objects will use?  p6opaque?

[16:48] <aufrank> bye gaal 

[16:49] <audreyt> aufrank: probably p6opaque, yes

[16:50] <aufrank> does each representation define its own .yaml method?

[16:53] <aufrank> or do some representations do a yamlizable role?

[17:05] <audreyt> probably they need to be able to coerce into YamlNode

[17:07] <aufrank> so is eval $x :lang<yaml> the same as eval $x.as<yaml> ?

[17:12] <Limbic_Region> ?eval .25.yaml

[17:12] <evalbot_8607> "--- 1/4\n" 

[17:12] <Limbic_Region> ?eval 1.2.3.yaml

[17:12] <evalbot_8607> Error:  unexpected "." expecting exponent, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[17:31] <audreyt> aufrank: in the future, yeah, I think so ($x as YAML::Node)

[17:31] <audreyt> oh wait, you mean $x is a string?

[17:31] * audreyt is confused

[17:38] <audreyt> miyagawa: http://svn.kwiki.org/audreyt

[17:40] <audreyt> miyagawa: going to release JSON::Syck just for fun? :)

[17:40] <miyagawa> maybe, yeah :9

[17:40] <audreyt> that will contribute toward your missing 13 modules

[17:40] <miyagawa> right, exactly

[17:47] <gaal> rehi

[17:47] <gaal> ooooh automatic yaml coersion

[17:47] <gaal> or coercion. now we have to learn *two* languages.

[17:49] <audreyt> XD

[17:52] * aufrank is cleaning house for the imminent return of my $girlfriend

[17:52] <gaal> the ruby convention of letting user-defined objects live in a separate tag namespace appeals to me

[17:52] <aufrank> oh, wait

[17:53] <aufrank> that would make her local to this block, right?

[17:53] <gaal> vs. p5's !perl/CGI

[17:53] <aufrank> my $*girlfriend, I guess?

[17:53] <gaal> you could say our $girlfriend, but that doesn't look too good.

[17:53] <aufrank> she is classy, though

[17:54] <gaal> has $.girlfriend

[17:54] <audreyt> gaal: hm, how does ruby dump?

[17:54] <gaal> !rub:object/CGI

[17:54] <gaal> *ruby

[17:54] <gaal> I made pugs do that too

[17:55] <audreyt> that is correct

[17:55] <gaal> let YAML::Syck do !perl

[17:55] <audreyt> however, p5 doesn't really work that way

[17:55] <audreyt> !perl/@CGI

[17:55] <gaal> for compat with YAML.pm

[17:55] <audreyt> means an array ref blessed into CGI package

[17:55] <audreyt> there's nothing object-ish about that

[17:55] <aufrank> ruby calls it marshalling, right?

[17:55] <audreyt> since in perl5, every thing is not an object.

[17:55] <gaal> well, do Dump(CGI->new)

[17:55] <gaal> lol # "since in perl5, every thing is not an object."

[17:56] <gaal> money is no object!

[17:56] <Juerd_> I object.

[17:57] <gaal> romance languages, ready, set, go!

[17:57] <aufrank> gaal: I think the pickaxe book has an example of marshaling and YAML

[17:57] <gaal> I subject (you to trite puns)

[17:57] *** justatheory joined
[17:58] <gaal> I think ruby's syck can install symbols right into the namespace. ahh, joy, in p6 that'll be interesting again.

[17:58] <aufrank> yeah, gaal it's page 414-417 in the pickaxe.

[17:58] <gaal> I thought I was taking a break from the crazy exporter stuff and now it's chasing me!

[17:59] <gaal> aufrank: thanks, is that book online?

[17:59] * gaal is only picking up ruby now

[18:01] <aufrank> gaal: no, not online unfortunately

[18:01] <aufrank> but google seems to think that syck will eventually be included in ruby, if it's not already

[18:01] <aufrank> http://www.rubygarden.org/ruby?YamlInRuby

[18:02] <gaal> I believe it is.

[18:03] <chris2> syck is included since 1.8.0

[18:03] <aufrank> gotcha

[18:03] <chris2> and it heavily fuds inside ruby's symbol table :|

[18:04] <gaal> bbiab &

[18:18] <audreyt> bbl too &

[18:26] * rafl is looking for testers for the parrot 0.4.1 Debian packages: http://files.perldition.org/debian/

[18:29] <Juerd_>  pakket-architectuur (i386) komt niet overeen met het systeem (powerpc)

[18:29] <Juerd_> ;)

[18:30] <rafl> Juerd_: I can upload the source package as well, if you like.

[18:30] <Juerd_> It's not a matter of me liking or wanting, it's a matter of you seeking testers :)

[18:35] <rafl> Juerd_: Uploaded.

[18:37] *** lisppaste3 joined
[18:43] <Juerd_> rafl: Compiles and installs

[18:43] <Juerd_> And runs

[18:44] <Juerd_> rafl: Didn't have libicu34-dev, as Ubuntu doesn't provide it. It's in Build-depends, though.

[18:45] *** Limbic_Region joined
[18:55] <rafl> Juerd_: That's fine. I want the Debian version to be linked against icu.

[18:55] <Juerd_> What is it? :)

[18:56] <rafl> International Components for Unicode library

[18:56] <Juerd_> Sounds scary

[18:56] <rafl> Did your camera already arrive, btw?

[18:56] <rafl> It is, of course.

[18:56] <Juerd_> No, not yet

[18:57] <Juerd_> I'm hoping it arrives the coming four days, because I want to use it Friday :)

[18:57] <Limbic_Region> Parrot's continued dependency on ICU for unicode support is unfortunate

[18:58] <rafl> Limbic_Region: Why?

[18:58] <leo> Limbic_Region: perl Configure.pl --without-icu

[18:58] <Limbic_Region> well, for one its requirement of c++

[18:58] <Limbic_Region> the original plan for Parrot was to be very basic ANSI C compliance - for portability sak3e

[18:59] <rafl> Juerd_: I guess so. I told my housemate to send it three or four days ago because I wasn't at home. I guess it'll arrive soon.

[18:59] <Limbic_Region> for another, the plan was that Parrot's Unicode interface would be very generic allowing many/any unicode library to be used

[18:59] <Limbic_Region> and AFAIK, that hasn't happened

[18:59] <leo> Limbic_Region: we have reduced the need for icu vastly - if it isn't there all compiles and tests too

[18:59] <Juerd_> As proven by my system :)

[18:59] <Limbic_Region> leo - and still retained unicode support?

[19:00] <Juerd_> Who needs unicode ;)

[19:00] <leo> sure, if ICU is installed and used, you get enhanced functionality

[19:00] <Juerd_> leo: Isn't it better for a VM to provide a single stable interface?

[19:01] <Limbic_Region> so then has Parrot been building in its own unicode library and not just an API to external libraries?

[19:01] * Limbic_Region guesses he should follow Parrot development more than just the summaries

[19:01] <Juerd_> That isn't so platform dependent that things differ even based on whether a certain lib is available...

[19:01] <leo> Limbic_Region: no, w/o ICU there is no unicode support, that's it

[19:02] <Limbic_Region> right - so my original sentiments stand

[19:02] <Juerd_> leo: But don't we *always* want unicode support, and not depend on something external for it?

[19:02] <Limbic_Region> not that making Parrot compile without ICU isn't a step in the right direction

[19:02] <leo> patches welcome for you own unicode lib ;-)

[19:03] <Juerd_> It's not as if this icu thing is omnipresent.

[19:03] <leo> if we got a better lib we can use it - np 

[19:03] <Limbic_Region> right - someone made a massive patch which mostly worked so it got accepted

[19:03] <Limbic_Region> no one else stepped up to the plate to support a different library

[19:03] <Juerd_> leo: This should perhaps be on a somewhat higher level of priority than "patches welcome"

[19:04] <Juerd_> Perl 6 requires unicode support, and IIRC, Parrot was supposed to be used by Perl 6...

[19:05] <leo> and icu provides unicode for paot - where is the problem actually?

[19:05] <leo> rrr

[19:05] <Limbic_Region> well, getting ICU to build did get easier Juerd_

[19:05] <Juerd_> leo: Eh, unavailability of binary packages for my system.

[19:05] <leo> we don't build icu - we use it as a lib

[19:05] <Limbic_Region> not the point

[19:05] <Limbic_Region> if you can't build the lib

[19:05] <Limbic_Region> then you can't use unicode

[19:06] <leo> Juerd_: compiling icu one from src isn't a biggy 

[19:06] <Limbic_Region> and building ICU isn't trivial

[19:06] <Juerd_> leo: And, as L~R said, portability, although I'm just copying his argument now :)

[19:06] <Limbic_Region> though it has been a year or more since I did it

[19:06] <Limbic_Region> c++ isn't that big of a deal but it does go against the original dependency plan for Parrot

[19:06] <leo> Limbic_Region: - then please don't tell rants

[19:06] <Juerd_> leo: Oh, but there you are mistaken. It is. Compiling anything from source IS a biggy, because it interrupts my standard work flow, and makes me WAIT for software to install.

[19:07] <leo> Juerd_: what system are you using w/o any icu lib?

[19:07] <Juerd_> When it comes to non-toy things, I either use available binary packages, or another tool altogether.

[19:07] <Juerd_> leo: Apparently Ubuntu

[19:08] <Limbic_Region> leo - I think you are misunderstanding my rant

[19:08] <leo> and ubuntu doesn't have any ICU binary package?

[19:08] <Juerd_> Oh, my previous apt-cache search had a spelling error. There is some icu available for this platform. An old version, but available.

[19:08] * Juerd_ was searching for uci

[19:08] <leo> ok then

[19:09] <Juerd_> s/.*// :)

[19:09] <Limbic_Region> I am not against ICU support for Parrot - I am against the idea that it is the only option for Unicode support

[19:09] <Limbic_Region> but as you said - patches and volunteers welcome

[19:09] <leo> Limbic_Region: it isn't - please provide another package

[19:10] <leo> it's currently the only one we have that's it

[19:10] <Juerd_> Limbic_Region: Does ICU have a bad reputation?

[19:10] <leo> same with libgmp

[19:11] <Limbic_Region> Juerd_ - no, not that I know of

[19:11] <leo> Juerd_: it provides much more than needed for usual defs of needed

[19:11] <Limbic_Region> the developers were quite helpful at trying to resolve the build problems I was having on Cygwin

[19:11] <Limbic_Region> but it is a monster

[19:11] <Juerd_> I see

[19:12] <Juerd_> For a libicu-lite ;)

[19:12] <Juerd_> s/For/Fork/

[19:13] <leo> that's not a new idea - but we for sure don't do it

[19:13] <Limbic_Region> actually, I tried

[19:13] <Limbic_Region> but that was still when ICU was part of the parrot trunk

[19:13] <leo> reinventing just smaller wheels is still a bad idea

[19:14] <Limbic_Region> well, I wasn't reinventing anything - just trimming the enormous amounts of fat

[19:14] <Juerd_> leo: Through histories, wheels in general have become available in much lighter forms.

[19:14] <Juerd_> Though history in plural doesn't quite make sense in English :)

[19:15] <leo> that's still wellcome of course - trimming existing stuff - otoh it is a lot of work

[19:15] <Juerd_> leo: As it turns out, if the spokes are reliable, you can do with less :)

[19:15] <Juerd_> And if you have a nice steel rail to roll on, rubber can be left off the wheel too

[19:16] <Juerd_> The ultimate realisation is of course that the wheel itself was a bad idea :)

[19:17] <leo> all ok - what parrot will need is one PMC (e.g. UnicodeString) that DTRT

[19:26] *** hcarty joined
[19:27] <rafl> Juerd_: Which version?

[19:32] <Juerd_> rafl: 28

[19:33] <rafl> Juerd_: Maybe report a bug against the icu src package to include 34 as well.

[19:33] <rafl> Juerd_: Should not be much work as it's in Debian already.

[19:34] <rafl> Juerd_: Erm, http://packages.ubuntu.com/dapper/libs/libicu34

[19:34] <Juerd_> Ahh, dapper

[19:34] <Juerd_> But dapper is too scary on powerpc

[19:34] <Juerd_> It barely even runs on i386 sometimes :)

[19:35] <rafl> I know a lot of people using dapper. Hrm..

[19:36] <Juerd_> I've had quite some trouble with dapper on my laptop

[19:36] *** Amnesiac joined
[19:41] <svnbot6> r8608 | gaal++ | YAML serialization -

[19:41] <svnbot6> r8608 | gaal++ | * emit PGE Rules (rx:g/a/.yaml works)

[19:41] <svnbot6> r8608 | gaal++ | * normalize emitted booleans

[19:41] <svnbot6> r8608 | gaal++ | * src/Data/Yaml/Syck.hsc cleanups

[19:41] <svnbot6> r8608 | gaal++ |   - YamlNode structure shouldn't change much henceforth

[19:41] <svnbot6> r8608 | gaal++ |   - remove implicit vars

[19:50] *** Lartuv joined
[19:58] <clkao> ?eval rx:g/a/.yaml

[19:58] <valbot_860> is now known as evalbot_8608

[19:58] <evalbot_8608> "--- !pugs/Rule \nrule: a\nglobal: true\nstringify: false\nadverbs: \n  g: 1\n" 

[19:59] <clkao> subalashi!

[20:05] <gaal> clkao: other direction coming up.

[20:06] <gaal> btw, what does "stringify" mean, anyway? :)

[20:13] <aufrank> gaal:  are you joking or in earnest? 

[20:14] <aufrank> stringify means "make into string"

[20:14] <gaal> aufrank: I meant in the context of a PGE Rule record member :)

[20:14] <aufrank> oh

[20:14] <aufrank> nevermind then :)

[20:14] <gaal> what does it mean for a Rule to say "no stringify"?

[20:15] <aufrank> not a clue

[20:17] <gaal> argh why does dist/ need manual cleaning after hsc hacking? :(

[20:24] <gaal> okay, I have Rule deserialization, but it segfaults when used.

[20:24] <gaal> probably I need to copy values.

[20:25] <gaal> just redumping out the deserialized Rule works, though.

[20:25] <gaal> so I'll checkin, if $you can fix please do :)

[20:29] <svnbot6> r8609 | gaal++ | Yaml serialization -

[20:29] <svnbot6> r8609 | gaal++ | * parsing rules works (but they segfault when applied, probably need

[20:29] <svnbot6> r8609 | gaal++ |   a copy made?)

[20:31] <gaal> ?eval my $r = rx:g/a/.yaml; (eval $r :lang<yaml>).yaml.say

[20:31] <evalbot_8608> pugs: can't deserialize: pugs/Rule 

[20:31] <gaal> oh yes you can!

[20:31] <gaal> call your younger brother.

[20:32] * aufrank goes to airport

[20:32] <aufrank> bye all

[20:32] <gaal> ?eval my $r = rx:g/a/.yaml; (eval $r :lang<yaml>).yaml.say

[20:32] <valbot_860> is now known as evalbot_8609

[20:32] <evalbot_8609> OUTPUT[--- !pugs/Rule  rule: a global: true stringify: true adverbs:    g: 1  ] bool::true 

[20:32] <gaal> bye aufrank 

[20:37] <gaal> audreyt: I'm still getting double-frees with r70

[20:39] <gaal> is anyone still awake from the hackathon?

[20:45] <gaal> ah, great, scratch that: make clean fixed my problems :)

[20:57] *** Southen_ joined
[21:02] *** brentp joined
[21:09] *** brentp joined
[21:29] *** kanru2 joined
[21:34] *** rantanplan_ joined
[21:35] <gaal> audreyt: got perl -MYAML::Syck -le 'print Dump(\qr/foo/)' to work, but bizarrely, not Dump(qr/foo/). maybe tomorrow :)

[21:36] <gaal> for now, zzZ &

[21:41] <buu> ?join #perl

[21:41] <evalbot_8609> you should only do ?join in a private message so other bots don't accidentally come.

[21:41] <buu> arfgh

[21:41] <buu> sigh

[21:41] <buu> Now ?join gets the svnbot and not the evalbot

[21:47] *** hcarty left
[22:05] *** bsb left
[22:18] *** DaGo joined
[22:28] * gaal realizes a SYB approach is actually warranted to transform all native types like Rules (and probably Roles etc) to yaml

[22:28] * gaal goes back to sleep

[22:38] *** dduncan joined
[22:57] *** penk joined
[23:04] <dduncan> so apparently Parrot 0.4.1 was just released

[23:05] <dduncan> since audreyt's proposal had Pugs 0.2.11 going out just after this, how much time do I have left to get in changes first?

[23:05] <dduncan> ... will check journal ...

[23:12] <svnbot6> r8610 | stevan++ | PIL/Native/Roles/*

[23:12] <svnbot6> r8610 | stevan++ | - small comment update for Num.pil

[23:12] <svnbot6> r8610 | stevan++ | - added new Seq role which implements an immutable sequence type with 

[23:12] <svnbot6> r8610 | stevan++ |   the canonical set of list operations (ala LISP/Scheme/etc), all it 

[23:12] <svnbot6> r8610 | stevan++ |   needs is to have .head and .tail defined

[23:12] <svnbot6> r8610 | stevan++ | PIL/Native/Classes/*

[23:12] <svnbot6> r8610 | stevan++ | - a new folder with a set of core PIL^N classes which will be used to 

[23:12] <svnbot6> r8610 | stevan++ |   build the code Perl6 classes (maybe,... uhm, I think, it's my current 

[23:12] <svnbot6> r8610 | stevan++ |   thought direction at the moment at least)

[23:12] <svnbot6> r8610 | stevan++ | - added immutable Sequence and LazySeqeunce clases, neither is really 

[23:12] <svnbot6> r8610 | stevan++ |   tested (waiting on the repr refactor from audreyt++), and LazySequence

[23:12] <svnbot6> r8610 | stevan++ |   has some issues when a methods must return a new sequence (apply, filter,

[23:12] <svnbot6> r8610 | stevan++ |   & reverse) since that sequence won't be lazy (I have to ponder this 

[23:12] <svnbot6> r8610 | stevan++ |   some more before I can decide what is the best approach for it, ideally

[23:12] <svnbot6> r8610 | stevan++ |   they will return lazy sequences too).

[23:27] *** vel joined
[23:27] <svnbot6> r8611 | stevan++ | docs/notes/PILN_core_classes.pod

[23:27] <svnbot6> r8611 | stevan++ | - start of a document describing the core PIL^N classes/roles, 

[23:27] <svnbot6> r8611 | stevan++ |   think of these as being like Parrot's core PMC types, but more

[23:27] <svnbot6> r8611 | stevan++ |   powerful than the native PIL^N methods. More to come on this 

[23:27] <svnbot6> r8611 | stevan++ |   later.

[23:30] *** lisppaste3 joined
[23:57] <dduncan> regarding 6.2.11 release date, the last journal mention was on dec 24th, which said in early january just after Parrot 0.4.1, and both of those prerequisites now exist

[23:58] <dduncan> aside from getting all the tests to pass or skip, are there any other todo items now?

[23:58] *** mlh joined
