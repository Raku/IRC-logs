[01:03] <rhesa> Congratulations on the new release folks!

[01:07] <dduncan> I Nth that notion

[01:16] *** pjcj joined
[01:37] *** justatheory joined
[01:38] *** vel joined
[01:55] *** jroc joined
[02:02] *** vel joined
[02:15] *** Khisanth joined
[02:18] *** revdiablo joined
[02:20] *** vel6608 joined
[02:31] *** vel joined
[02:36] <dduncan> I have download and am now smoking the official 6.2.11 CPAN release

[02:36] <dduncan> er, I'm making it right now, will smoke

[02:37] *** vel joined
[02:46] *** vel joined
[02:55] *** Amnesiac joined
[02:58] *** xinming joined
[03:03] *** justatheory joined
[03:14] *** drbean joined
[03:14] *** SamB joined
[03:21] <azuroth> "I dropped out of school at the age of 3" "why?" "because all the teachers tried to player hate on me"

[03:36] <dduncan> now smoking the 6.2.11 release

[03:36] <dduncan> this time, the prelude was compiled, so speed is normal

[03:37] <dduncan> should be done in about 135 minutes

[03:37] *** putter joined
[03:39] <putter> I'm trying to think of a name for a file.  It's like READTHEM, but more transient, less curated.  Basically, papers that went by on #perl6, that someone thought highly enough about (whether they read them or not) to add to a file.  So I don't again have to grovel over weeks of irc log trying to find a paper.  Thoughts?

[03:40] *** xinming joined
[03:40] <putter> perhaps ideally matches READ[U-Z].*

[03:42] <rhesa> READXTRAS? bleh

[03:42] <rhesa> READWEITER ;)

[03:43] <mlh_> READTOO?

[03:45] <putter> weiter?

[03:46] <putter> READTOO... hmm...

[03:46] <putter> READUP?

[03:47] <putter> ok, READTOO seems the best so far... any other ideas?

[03:47] <rhesa> weiter is german for further. but i agree that READTOO is the best

[03:47] <azuroth> READYRC ;-)

[03:48] <putter> *groan* ;)

[03:48] <putter> oh, thanks all

[03:48] <putter> s/oh/ok/

[03:53] <putter> "readyrc" grumble grumble groan

[03:53] <svnbot6> r8938 | putter++ | READTOO: New file for papers recently mentioned on #perl6.

[03:56] *** rantanplan_ joined
[04:07] *** kanru joined
[04:34] *** justatheory joined
[04:35] *** ozone joined
[05:33] *** rantanplan_ joined
[05:44] <lypanov> obviously it should have been READON .. :P

[05:53] <Daveman> :p

[06:04] <Kattana> READALSO or FURTHERREADING sound better/make more sense imo

[06:06] <wolverian> easier to find with READ<tab>

[06:06] <wolverian> (than FURTHERREADING)

[06:07] <dduncan> okay, I just posted a smoke of the release version of Pugs 6.2.11, haskell runcore, darwin

[06:07] <dduncan> no errors, as expected

[06:12] *** revdiabl1 joined
[06:12] *** revdiabl1 is now known as revdiablo

[06:30] *** vel joined
[06:32] *** mj41_ joined
[06:33] *** shapr left
[06:41] *** vel joined
[06:43] *** vel joined
[06:45] *** vel joined
[06:49] *** KingDiamond joined
[07:22] *** Debolaz joined
[07:22] *** integral joined
[07:24] *** rantanplan_ joined
[07:31] *** scook0 joined
[08:19] *** beppu joined
[08:41] *** offby1 joined
[08:42] <offby1> bah.  Built r8934 from http://svn.openfoundry.org/pugs on Debian sarge; "make test" passed (first time I ever saw that -- great work!).

[08:42] <offby1> but now, when I run ./pugs, it dies with a segfault ...

[08:42] <wolverian> ouch..

[08:42] <offby1> I _did_ try "fakeroot make -f debian/rules binary".

[08:42] <offby1> I wonder if that hosed something.

[08:42] <offby1> (probably did ...)

[08:42] <wolverian> try without? and report back :)

[08:43] <offby1> well, I expect I'll have to "make clean all", which will take ... long enough that I'll fall asleep.

[08:43] <offby1> oh well

[08:43] <offby1> my fault

[08:44] <wolverian> maybe it's faster to download again? :)

[08:44] <offby1> yeah, there's likely an x86 binary somewhere.

[08:44] <offby1> I've never done that; always built from svn, for no particularly good reason.

[08:44] <wolverian> it's actually in debian, but I don't know if 6.2.11 is yet

[08:44] <wolverian> (unstable, naturally..)

[08:45] <offby1> yeah, I'm running stable.

[08:45] <offby1> stuff from unstable tends to want to pull in a new libc6, which scares me.

[08:45] <wolverian> are you sure you want to do anything at all on it? isn't stable meant for an environment that doesn't change, at all? :)

[08:46] <lypanov> win 2

[08:46] <wolverian> lose 3

[08:46] <offby1> I assume it doesn't change except for security updates.

[08:46] <offby1> cool zippy stuff I usually build from source, and keep well separated from the OS.

[08:46] *** elmex joined
[08:47] <szbalint> heh, I see not only me uses irssi here. ;)

[08:47] <wolverian> yeah. I generally steal another box from somewhere to use new things on

[08:47] <wolverian> and keep the old one running stable 

[08:48] *** mj41_ left
[08:48] <offby1> hmm, the "Download" link on http://search.cpan.org/dist/Perl6-Pugs/ gets me a 404

[08:49] <wolverian> it's most likely not on your mirror yet

[08:49] <offby1> "make unoptimized"-ing

[08:51] *** christo joined
[08:52] *** christo left
[08:54] <lypanov> wolverian: ;)

[08:54] <wolverian> just realistic :)

[08:59] *** kane_ joined
[09:17] *** G2 joined
[09:18] *** flw joined
[09:35] *** frodo72 joined
[09:43] <gaal> I'm pretty sure 6.2.11 hasn't hit unstable yet.

[09:57] *** cognominal joined
[09:59] *** r0nny joined
[10:02] *** dada joined
[10:10] <dduncan> fyi, corresponding to Pugs 6.2.11 release on cpan, the perl 5 counterparts of my perl 6 modules bundled with it (Locale-KeyedText, Rosetta, Rosetta-Engine-Native) have been uploaded to cpan in 3 distros

[10:10] <dduncan> after some pause, you should see them as versions 1.72.1, 0.720.0, 0.1.0 respectively

[10:10] <dduncan> you heard it here first

[10:11] <dduncan> those are the first post-rewrite versions of Rosetta on cpan

[10:15] *** binary42 joined
[10:15] *** j0sephi joined
[10:22] *** Debolaz2 joined
[10:25] <lypanov> dduncan: is there a good summary of rosetta lying around anywhere?

[10:25] *** nnunley joined
[10:26] <dduncan> there are several, of different levels of accuracy

[10:26] <dduncan> one is in ext/Rosetta/docs

[10:26] <dduncan> that one should take 4 minutes to read aloud

[10:27] <dduncan> it was written 2 months before the rewrite, so some details are now false, but the general idea is still true

[10:27] <dduncan> I hope to have better unified docs over time

[10:28] <lypanov> thx. i'll take a look at that :)

[10:28] <dduncan> a more up to date summary is that ...

[10:29] <dduncan> Rosetta is a federated truly relational database whose query language is derived from Tutorial D, which is like relational algebra, and not very much like SQL

[10:29] <dduncan> it gets its name because it is also good for making database engine independent apps

[10:30] <dduncan> I'm also positioning it as a good tool to make object relational mappers with

[10:30] <lypanov> how's it doing database backend wise?

[10:30] <dduncan> the current post-rewrite version is mostly documentation, and doesn't implement any backends yet

[10:30] *** feng joined
[10:31] <dduncan> that should happen over the next month, at least one backend

[10:31] <lypanov> neat :)

[10:31] <lypanov> unit tested?

[10:31] <dduncan> even the documentation needs a lot added or changed, but I figured I should push what I had now as a snapshot

[10:31] <dduncan> it is very component based, so it should be easy to unit test

[10:32] <dduncan> unlike DBI, which just provides database driver independence, Rosetta provides database language independence

[10:33] <dduncan> besides that docs/ file, look at the various pod in the lib/ directory for various pieces of info

[10:43] *** Debolaz joined
[10:44] <lypanov> dduncan: is it a sane design that won't make me want to cry?

[10:44] <lypanov> dduncan: dbi is awful in both api design and implementation...

[10:45] <lypanov> dduncan: my last experience with hacking up a workaround for a bug in the db we used ended up with me writing the patch for ruby dbi and then porting as i just couldn't code otherwise :P

[10:52] *** Debolaz2 joined
[11:06] <dduncan> lypanov, you shouldn't have any of those problems with Rosetta

[11:06] <dduncan> it is designed to be sane, and elegant, and more or less to be mathematically/logically sound

[11:07] <dduncan> of course, I welcome all possible assistence to make it better, including design

[11:07] <dduncan> but I have to bed now, so that's for another day

[11:08] <dduncan> the design is intended to be both correct and unambiguous

[11:12] <dduncan> lypanov, who are you outside #perl6?

[11:13] <dduncan> are you in the pugs AUTHORS file, or have a cpan id ?

[11:14] <dduncan> I saw no "lypanov" in either place

[11:15] <dduncan> actually, I may have found you ...

[11:15] <dduncan> is this yours: http://www.lypanov.net/ ?

[11:16] <dduncan> I'll assume so, since it talks about Ruby

[11:16] <dduncan> well, good night

[11:28] *** wilx joined
[11:41] *** wilx joined
[11:45] *** wilx joined
[12:00] *** vytautas joined
[13:00] *** iblechbot joined
[13:05] *** chris2 joined
[13:08] <lypanov> mornin' chris2

[13:09] <chris2> hi lypanov 

[13:13] <chris2> lypanov: i got my toy compiler to work today =)

[13:21] <audreyt> chris2: ooh, url?

[13:22] <lypanov> chris2: yay!

[13:22] <lypanov> heya audreyt :)

[13:24] <szbalint> morning.

[13:24] <chris2> audreyt: nothing to see yet

[13:25] *** Debolaz joined
[13:29] *** kolibrie joined
[13:29] *** sahadev joined
[13:34] *** pdcawley joined
[13:35] <audreyt> :)

[13:35] * audreyt is still recovering after a 15hr sleep

[13:38] * clkao has been sketching new svk internals with perl6 classes etc. breezy!

[13:39] <audreyt> indeed? nice

[13:39] <audreyt> I slept till 8pm

[13:39] <audreyt> clkao: are you using the full set of features S12 offers?

[13:39] <audreyt> in particular "handles" 

[13:39] <clkao> we might still have a chance to meet tomorrow. i also want to make the js backend prelude compilation not suck

[13:39] <clkao> ya, handles. and method signatures

[13:39] <audreyt> cool

[13:40] <clkao> ( --> SVK::Root)

[13:40] <audreyt> woot

[13:40] <audreyt> ok... I may have some time tomorrow afternoon

[13:40] <audreyt> not sure yet

[13:40] <clkao> can one say ( --> (SVK::Root, SVK::Foo, Hash of something)) ?

[13:40] <audreyt> characteristically of me, my cellphone is already lost

[13:41] <clkao> i am just using it to help myself thinking.  as we know, a real language helps a lot finding out stupidness

[13:41] <audreyt> and the answer is yes, you can write that

[13:41] <clkao> whoot

[13:41] <audreyt> method foo ((A, B, C) --> (D, E, F)) ought to be legal

[13:42] <audreyt> though you'll need to use := instead of = to take advantage of the types

[13:42] <clkao> := in ?

[13:42] <audreyt> otherwise it distributes using normal list distribution semantics (ala p5)

[13:42] <audreyt> my ($d, $e, $f) := $obj.foo($a, $b, $c);

[13:42] <clkao> ah.

[13:43] <audreyt> which is good, as it involves no copying

[13:43] <audreyt> and can reuse the same heap objects (or registers, or boxes, or whatever the underlying runtime uses)

[13:43] <clkao> do you still remmeber the context issue in pil? i don't see them map correctly to what Want should know.

[13:43] <clkao> if only we start to care about performance :P

[13:43] <audreyt> ah, but that's SEP

[13:43] * clkao grins

[13:44] <audreyt> someone else's (in particular, Leo, Nicholas and Brendon's) problem

[13:44] <audreyt> or maybe s/Nicholas/$&+Rafael/

[13:44] <audreyt> PILN is reasonably optimized for performance... but only when clarity is not at risk

[13:45] <audreyt> I'm not going to pull the -optc-O3 tricks the #haskell people are doing for alioth

[13:45] *** chris2 joined
[13:46] <clkao> how about the context thingy?

[13:47] <kolibrie> my svk update is only pulling down up to r8820.  how do I unstick it?

[13:48] <audreyt> svk sy -s 8821 //mirror/pugs

[13:48] <audreyt> try that

[13:48] * kolibrie tries

[13:48] <audreyt> clkao: the static context inferencer is not what you want... JS needs its own dynamic context info

[13:49] <audreyt> clkao: do you just want item/slurpy distinction or down to types as well?

[13:49] <clkao> no no, Want.Scalar, Want.Void etc

[13:50] <audreyt> so just the same as perl5

[13:50] <clkao> perl5 backend already have want?

[13:50] <audreyt> er no, I mean the same granularity as perl5's watnarray

[13:50] <audreyt> wantarray, even

[13:50] <kolibrie> audreyt: Retrieving log information from 8821 to 8938

[13:50] <clkao> sure, but i suppose pil should give me the inforamtion?

[13:50] <kolibrie> audreyt: thanks

[13:51] *** Limbic_Region joined
[13:51] <audreyt> clkao: so there are static contexts and dynamic contexts

[13:52] <audreyt> clkao: before we have "proto" support, there can be no useful static context information really

[13:52] <audreyt> except maybe for invoking closure literals or lexical scoped subroutines 

[13:53] <audreyt> the reason for this is that the user is free to insert new variants at runtime, or rebind existing (multi)subs away into something that yields a different context

[13:53] <clkao> er? i am talking about things like the differences between calling is(not(), undef) and (not())

[13:54] <audreyt> clkao: yeah, (not()) is guaranteed void

[13:54] <audreyt> but is(not(), undef) doesn't guarantee anything for not()'s context, statically, at this moment

[13:55] <audreyt> unless &is is early bound with a type signature

[13:55] <audreyt> docs/notes/context_*.pod attempts to fix this

[13:55] <audreyt> as is docs/notes/mmd*

[13:55] <audreyt> but neiter are implemented at this moment, so you have to rely on dynamic information instead of looking at the PIL tree

[14:01] <clkao> ok.

[14:07] *** cdpruden joined
[14:08] *** elmex joined
[14:25] *** Grrrr joined
[14:42] *** Southen_ joined
[14:53] *** stevan joined
[14:59] <tewk> Morning Stevan

[14:59] <stevan> morning tewk

[15:01] <tewk> Whats on the radar now the release is out the door, pug wise that is.

[15:03] *** BakedB joined
[15:09] *** rodi joined
[15:10] *** vel joined
[15:12] *** vel joined
[15:12] *** theorbtwo joined
[15:13] <Limbic_Region> tewk - I would imagine objects objects objects for 6.28.  IIRC, audreyt wants to make that the next release

[15:14] <stevan> Limbic_Region: yup, 6.28 is the "Object" release and will be the next one we do

[15:14] <stevan> it should also have the new PIL2 runcode

[15:17] <tewk> stevan: So I have an hour or two to burn, what in PILN needs tests or something like that?

[15:18] <stevan> tewk: I think the PILN classes more needs a serious reworking

[15:18] <stevan> we have to fix the representation type issue

[15:18] <stevan> resolve how &bless works with &CREATE

[15:19] <stevan> or doesnt work with it,.. I am not 100% sure yet

[15:19] *** vel joined
[15:20] *** eric256_ joined
[15:20] *** eric256_ left
[15:20] * stevan is just waiting for $work to slow up a bit so he can get back to pugs

[15:23] <tewk> Where can I find irc logs for #perl6?

[15:23] *** putter joined
[15:23] <putter> howdy all

[15:24] <putter> http://colabti.de/irclogger/irclogger_log/perl6

[15:25] <stevan> heya putter

[15:29] <putter> heya.  re piln, I have only the fuzziest picture of it myself, but perhaps there's more to it that is stable than uncertain?  on the one side, there's lots of stuff beside the type rep, and on the other, client side, a lot of the object prelude is independent of the details of the metamodel.  or am I missing the point?

[15:30] <szbalint> hey

[15:30] <putter> I guess my real question is "What is piln?" :)   What should I read/look at?

[15:31] <stevan> putter: what do you mean by "a lot of the object prelude is independent of the details of the metamodel"?

[15:35] <Limbic_Region> tewk - in general, if you want to find information about Pugs or #perl6 check the pugs homepage - the links are there

[15:35] <putter> I was thinking in terms of  class String is Item { method mumble....}  or whatever.  where CREATE/bless decisions perhaps only affect a line or two.  but now that you ask, another concept is

[15:35] <stevan> yeah those are the boxed types

[15:36] <stevan> String, etc

[15:36] <Limbic_Region> stevan - I am waiting for life to slow up so I can think about getting involved with Pugs again, write a book, learn C and Haskell up skydiving - err the list goes on and on

[15:36] <putter> putting together an oo interface to piln code is also something which could likely be done now (assuming it hasnt been already)

[15:36] <stevan> putter: OO interface? 

[15:36] <putter> it would be nice to be able to manipulate piln trees in p6

[15:37] *** Eimi joined
[15:37] <stevan> it has basic method dispatch,  and a fully bootstrapped metamodel already

[15:37] <stevan> putter: that would be nice,.. 

[15:37] <putter> so how would you suggest someone get a handle on piln?  start at the test suite and work backward?

[15:38] <stevan> putter: the best way to understand piln is to understand the Perl6-ObjectSpace stuff

[15:38] <putter> looking...

[15:39] <stevan> putter: the basic idea is to create a core set of "things" that the runtime must implement 

[15:39] <stevan> those core things are then used to construct the metamodel

[15:39] <stevan> then the metamodel is used to construct the contianer types

[15:40] <stevan> then the boxed types are created or wrapped with the metamodel

[15:40] <stevan> then we have the containers, the boxed types and the metamodel

[15:41] <stevan> then we build some kind of bridge between this runtime system and Perl 6

[15:41] <stevan> that bridge is PIL2 

[15:45] <stevan> the PILN VM is basically those "core things"

[15:45] <stevan> the fuzzy hand waving part of all this is the "bridge to Perl 6" part,.. but I think audreyt has that worked out in her head, just not in bits yet

[15:45] <stevan> of course there are other fuzzy details too like containers and boxed types,.. but that is what the whole repr debate/issue is about

[15:45] <stevan> basically asking the question "what is the best way to handle these"

[15:45] * stevan has to run and grab some more coffee bbiab &

[15:46] <putter> oh, drat.  ah well. ;)

[15:51] *** Debolaz2 joined
[15:52] *** binary42_ joined
[15:53] <putter> so, my first question is, wasn't there a concept that pil-mumble was going to be "a language, like scheme, but with additional constructs to handle p6's richer semantics"?  So I was imagining I would be saying "ok, there's lambda, there's the dynamic environment, there's exceptions and continuations, ...".  no?

[15:54] <gaal> so, trying to add exports for vars, but ruleVarDeclaration is full of distractions

[15:55] *** hexmode joined
[15:55] <gaal> my $a is AAA, $b is export; # what's exported?

[15:55] <gaal> my $a, $b is export # for that matter

[15:55] <gaal> of course there are crazier combos:

[15:56] <gaal> my $a := $b is export = 42;

[15:56] <putter> eeep

[15:56] <integral> ah, C's *'s problem

[15:57] * putter has always been a bit puzzled by the "is export" concept.

[15:57] *** binary42_ is now known as binary42

[15:57] <gaal> const * const :-)

[15:57] <gaal> putter: by itself it isn't that bad

[15:57] <putter> Though I suppose this is a general "how do you apply....attributes(?)" to variables.

[15:57] <gaal> it's a decoration on a var marking it as exportable

[15:57] <theorbtwo> What's confusing about the product of two constants?  <G>

[15:57] <putter> :)

[15:57] <theorbtwo> Anyway, I think the answer is that is binds tightly.

[15:58] <gaal> theorbtwo: no, actually it's an OCaml tuple of two consts :-p

[15:58] <theorbtwo> my $a, $b is export, I think, just exports $b.

[15:58] <cognominal> in rules what the diff between <null> and <?null>

[15:58] <putter> is there anyone to distribute an "is mumble" over a bunch of vars?

[15:59] <gaal> my ($a, $b, $c) is export; #??

[15:59] <putter> null?  you mean nothing?

[15:59] <gaal> clearly sanity is a precious thing

[15:59] <gaal> because there's so little of it

[15:59] <putter> (or is putter remembering the name wrong..)

[16:00] *** vytautas joined
[16:00] <cognominal> putter: see in S06 the part with the header "nothing is illegal"

[16:00] <putter> oh, right.  <null>.  nothing is a sub.

[16:01] <stevan> putter: PILn is a language like scheme

[16:01] <stevan> but a very minimal one

[16:01] * gaal is very glad for that rule - I was actually bitten by null| in p5 just a few days ago

[16:01] <putter> cognominal: <null> creates a capture (not entirely uninteresting - has position info after all), but <?null> doesnt?

[16:02] <stevan> putter: there is lambdas, a dynamic environment, lists, hashes, numbers, strings,... no exceptions and continutations though 

[16:02] <cognominal> ok, thx

[16:02] <cognominal> it is a long time I have not read the synopsis. MAny thingd have changed

[16:03] * putter had to grep http://dev.perl.org/perl6/doc/design/syn/S05.html

[16:03] <putter> stevan: non-determinacy?

[16:03] <cognominal> ho that was S05 not S06, sorrt about that.

[16:04] <theorbtwo> Mmmpf.  Is the tree not compiling now, or is my checkout toasted again?

[16:05] <putter> r8933 was fine for me

[16:05] <stevan> putter: what do you mean?

[16:09] <szbalint> Is there somewhere a list of what is currently implemented in Pugs aside the source code and the verbose changelog? I'm looking for a shorter summary.

[16:09] <cognominal> $<0 1 2> is equivalent to $/[0,1,2]  # should not that read  $/<0 1 2> is equivalent to $/[0,1,2]  ?

[16:19] <offby1> bah.  Built r8934 from http://svn.openfoundry.org/pugs on Debian sarge; "make test" passed (first time I ever saw that -- great work!). but now, when I run ./pugs, it dies with a segfault ...

[16:19] <offby1> wonder if there's something odd about not passing it any command-line arguments.

[16:19] <offby1> unfortunately I don't get a meaningful stack trace if I invoke it under gdb.

[16:21] <offby1> ... looks like it's in some sort of recursive loop -- the stack has hundreds of frames.

[16:22] *** justatheory joined
[16:25] <putter> offby1: embedded parrot?

[16:25] <offby1> you know -- I don't know.

[16:25] <offby1> how do I find out?

[16:25] <offby1> (oddly, 'make test' passes.)

[16:26] <putter> set your PATH so parrot can't be found, and try "a" ~~ /a/  ?

[16:26] <offby1> one moment.

[16:26] <putter> oh, better also not have parrot where PARROT_PATH said it would be

[16:27] * putter thinks it would be nice to have a $PUGS_mumble variable saying what's embedded.  or is that info available via config?

[16:27] <offby1> well, I "hid" parrot, so it's no longer on my PATH, but the problem persists.

[16:28] <offby1> the problem doesn't happen if I give it some command-line arguments: in gdb I typed <<run -e 'say "what"'>>, and that worked fine

[16:28] <offby1> not surprisingly

[16:28] <putter> cognominal: $0 $1 $2  all work.  their aliases for $/[0] $/[1] $/[2].  so that may be valid?  though perhaps unnecesary

[16:28] <putter> s/their/they're/

[16:29] <gaal> offby1: embedded or external parrot?

[16:29] <offby1> gaal: I don't know.

[16:29] <gaal> offby1: is there an old parrot installed too?

[16:30] <offby1> gaal: I don't have a "parrot" executable on my PATH, for what that's worth.

[16:30] <gaal> offby1: when you ran perl Makefile.PL, did you have PUGS_EMBED include "parrot" ?

[16:30] <offby1> gaal: again, I don't know.  The command I typed was "perl Makefile.PL".  

[16:31] <cognominal> putter: oh, ok. I got it. it is also equivalent to $/<0 1 2> but that was not the point that was made in the doc.

[16:31] <offby1> gaal: so I didn't set PUGS_EMBED by hand, but I have no idea what its default value (if any) is.

[16:31] <gaal> It's not to embed.

[16:31] <offby1> OK, then I didn't ask to embed parrot.

[16:31] <gaal> but to make sure: please ldd pugs|grep parrot

[16:31] <putter> stevan: sorry.  an amb() or choice() operator.  perhaps with a fail() and maybe commit() to go with it.   amb(exp1,exp2), evaluate one of the exp, it decides which, and maybe you get to ask it to choose another (fail) and to cease accepting such requests (commit).

[16:32] <cognominal> TSMWTDI!  # There are so many ways to do it!

[16:32] <offby1> gaal: ldd shows no "parrot".

[16:32] <szbalint> How long should "perl Makefile.PL" take btw?

[16:32] <offby1> not very.

[16:32] <gaal> offby1: okay. please strace -o /tmp/something ./pugs -e "something that segfaults"

[16:33] <gaal> and find the last mention of parrot in /tmp/something

[16:33] *** marmic joined
[16:33] <offby1> gaal: one moment.

[16:34] <gaal> oh wait! did you say just "./pugs" segfaults for you?

[16:34] <offby1> gaal: yes.

[16:34] <gaal> then it's probably similar to the readline trouble people were having on MacOSX

[16:34] <offby1> gaal: and there's no mention of parrot whatever in the output from stracce.

[16:34] <gaal> offby1: right, that was a red herring, sorry.

[16:34] * offby1 nods

[16:34] <gaal> you have trouble with the interactive shell.

[16:35] <gaal> ldd pugs | grep readline ?

[16:35] <putter> could someone with an embedded parrot look at ./pugs -V and see if there is any sign of it?

[16:35] <gaal> putter: there is not.

[16:35] <offby1> gaal: libreadline.so.5 => /lib/libreadline.so.5 (0x40017000)

[16:36] *** nothingmuch joined
[16:36] <gaal> offby1: okay, same version as mine. but i don't have the problem :(

[16:36] <offby1> :( indeed

[16:36] <gaal> offby1: hmmm, how big is your src/Pugs/PreludePC.hs ?

[16:37] <offby1> $ ll src/Pugs/PreludePC.hs

[16:37] <offby1> -rw-r--r--  1 erich erich 3311450 Feb  2 01:18 src/Pugs/PreludePC.hs

[16:37] <gaal> okay, so you have a standard precomp prelude... is the segfault immediate or after the banner shows?

[16:37] <offby1> what's weird is that when it segfaults, not only does pugs die (of course), but the shell from which I invoked it also dies.  I don't know if I've ever seen behavior like that before.

[16:37] <offby1> gaal: after the banner

[16:38] *** kulp joined
[16:38] <gaal> I suspect the readline stuff.

[16:38] <offby1> me too

[16:38] <offby1> seems reasonable

[16:38] <offby1> wonder if I can re-build without readline.

[16:39] <offby1> I wouldn't miss it.

[16:39] <gaal> when was your last dist-upgrade? (you said debian unstable yes?)

[16:39] <offby1> gaal: no, debian Sarge, which is stable.

[16:39] <stevan> putter: in what context would that be in?

[16:40] <gaal> We have lots of knobs in the build system, but I don't think it's possible to configure pugs to build w/o readline :(

[16:40] <offby1> any way to get gdb to work?

[16:40] <gaal> well, you can trace the output of the probing and hack it to suppress it...

[16:40] <offby1> gaal: probing?  Are you talking to me, or to someone else?

[16:40] <svnbot6> r8939 | putter++ | TASKS +=1; ./pugs -V should mention whether parrot is embedded or not.

[16:41] <gaal> gdbing a haskell program is... sanitaxing.

[16:41] <gaal> offby1: I was.

[16:41] <offby1> I don't know what "probing" is in this context, and ... I don't know what "sanitaxing" is, but I can guess, and I agree :-|

[16:41] <gaal> offby1: when you create the makefile, there's some automagic detection of your system

[16:41] <offby1> ah

[16:41] <offby1> so I can hide the readline headers and re-rerun Makefile.PL :-)

[16:41] * offby1 hides stuff a lot

[16:42] <offby1> "sanitaxing" -- taxing of one's sanity

[16:42] <gaal> chmod -r may be sufficient :) too bad there's no "temp" directive for unix commands

[16:42] <offby1> or "local"

[16:42] <gaal> offby1: indeed, we like portmanteaus here

[16:42] <gaal> offby1: "temp" is p6 for "local"

[16:42] <offby1> that is to say: you're portmantliking

[16:43] <offby1> gaal: ah

[16:43] <nothingmuch> hola

[16:43] <offby1> see, I know so little of p6.

[16:43] <offby1> guess I'll just write little scripts for now.

[16:43] <gaal> aloha mr nm sir!

[16:43] *** Amnesiac joined
[16:43] <offby1> is there some official way to report this as a bug?

[16:43] <gaal> consider it reported :) but you can write to p6-c if you prefer.

[16:43] <offby1> nah

[16:43] <offby1> I'd rather consider it reported; you sound authoritative

[16:44] <offby1> (I'll believe anyone who sounds authoritative; it's a weakness :-| )

[16:44] <gaal> stop believing me!

[16:44] <gaal> (heh heh heh.)

[16:44] <offby1> I don't believe you when you say you're not believable.

[16:44] <gaal> stop believing just anyone who sounds authoritative!

[16:45] <offby1> I'll try, I promise.

[16:45] * stevan suggests gaal say that in a more authoritative tone of voice

[16:45] * gaal is reminded of Smullyan riddles

[16:45] <offby1> Does the barber shave himself?

[16:45] <szbalint> you're not alone offby1. Most people are like that. :)

[16:45] <offby1> szbalint: that's why we have the government we do :-|

[16:45] <offby1> it's all my fault.

[16:46] * offby1 sulks

[16:46] <szbalint> Since I don't know you personally and can't see your host I can only wonder which government you mean.

[16:46] <szbalint> It is probably true to every one of them though. :)

[16:46] <putter> stevan: in piln?  another, perhaps more useful construct, would be a "I don't care what order these happen in".   I don't remember the name for that.  the semantics of let (vs let*) in scheme.   its a way of avoiding adding incedental ordering constraints.

[16:47] * offby1 is USA-ian

[16:47] <putter> "$x should be set to 1, and $y to 2, but I dont care in what order this occurs".

[16:47] <stevan> putter: PILN doesnt work on that level really, I think that will be the territory of PIL2, and it will just compile the PILN as appropriate

[16:48] <gaal> darn, I was about to suggest to offby1 to use examples/obfu/l33t.p6 as a replacement REPL till pugs' is fixed, but I notice it's accrued a bug :-(

[16:48] <putter> or more usefully,  @a[0..2000] = @b[2..2002] and I don't care in what order the cell assignments occur.

[16:48] <stevan> putter: that might be handled with a lazy generator anyway

[16:48] <offby1> well, I'm not l33t myself, so it'd be pretentious to use it.

[16:49] * stevan sees that as two lazy slices, and a lazy assignment

[16:49] <offby1> (plus my eyes would cross)

[16:49] <gaal> offby1: you magically become l33t when you use it

[16:49] * putter looks at the looong backlog, decides to ask

[16:49] <offby1> gaal: but I don't -want- be become l33t.

[16:49] <offby1> then I'd have to play video games.

[16:49] <offby1> and drink Mountain Dew.

[16:49] <putter> gaal: so what's the one-liner summary of offby1's issue?

[16:49] <offby1> putter: pugs segfaults when invoked with no arguments.

[16:49] <szbalint> Anyone who has a number in his nick, is by definiton, l33t. :)

[16:49] <gaal> putter: interactive repl segfaults on debian stable.

[16:49] *** offby1 is now known as dummy

[16:50] <putter> ouch

[16:50] * dummy feels better

[16:50] <szbalint> lol.

[16:50] *** dummy is now known as offby1

[16:51] <putter> platform info?  ghc version?  parrot version?  gcc version (3or4)?

[16:51] <gaal> putter: we're suspecting readline is the culprit. offby1, what does dpkg -l libreadline say?

[16:52] <offby1> putter: Debian sarge (stable), ghc 6.4, not using parrot, gcc (GCC) 3.3.5 (Debian 1:3.3.5-13)

[16:52] <gaal> grrr, or wahtever package provides it

[16:52] <putter> stevan: ok.  I was just going down my fuzzy mental list of constructs I've seen kernel languages support.  wondering what pil... "piln", yes?  supports.

[16:52] <offby1> libreadline5-dev                 5.0-10

[16:52] <stevan> putter: its basically lambda calc + a few literals

[16:53] <gaal> FWIW, on unstable I have 5.1-5

[16:53] <stevan> most of the fancy stuff you are talking about will likely be handled in PIL2

[16:53] <putter> offby1:  mac (version?)? linux? ...?

[16:53] <putter> cpu?

[16:53] <offby1> putter: Debian linux "Sarge" (aka "Stable"), x86

[16:53] <offby1> model name	: Intel(R) Pentium(R) 4 CPU 2.40GHz

[16:53] <offby1> if that matters

[16:53] * stevan waves his hands to show the fabulous, mysterious and magical PIL2 ;)

[16:54] <putter> :)

[16:54] * stevan now wanders off to do some $work :(

[16:54] * offby1 squints, but sees not

[16:54] <putter> offby1: ok.  (x86_64 needs 6.4.1..)

[16:55] <gaal> offby1: for the sake of the experiment... how hard would it be for you to try 5.1-5? I haven't been running stable for a while now so I don't remember how likely libs are likely to pull in half the world with them as dependencies

[16:55] <offby1> gaal: probably not too hard.

[16:56] <offby1> I'd uninstall the libreadline5-dev package, and install 5.1-5 from source.

[16:56] <gaal> offby1++

[16:56] * offby1 checks packages.debian.org

[16:56] <szbalint> isn't it still down?

[16:56] <offby1> which is dead, per usual :-(

[16:56] <offby1> jinx!

[16:57] <szbalint> heh

[16:58] <gaal> there may be a newer 5.1 actually, I haven't updated in a... week? :)

[16:58] <svnbot6> r8940 | putter++ | TASKS +=0.5;  It would also be nice if ./pugs -V answered the "usual questions one asks someone with a pugs problem" - what os, cpu, ghc version, gcc version, etc.  But some of that could be hard.

[16:59] <putter> ralf: note the surrounding discussion of a debian stable x86 "pugs segfaults on startup" issue.

[16:59] * putter is starting to really like the new TASKS file ;)

[16:59] <gaal> putter: a lot of the info in pugs -V is stolen from perl -V

[17:00] <putter> right

[17:00] <putter> time to add a bit of our own perhaps

[17:00] <putter> can one see the -V info from within pugs?

[17:00] <gaal> and fixup archname, which on my pugs says something as funny as i486-linux-gnu-thread-multi

[17:01] <gaal> ?eval %?CONFIG.perl

[17:01] *** evalbot_8937 is now known as evalbot_8939

[17:01] <evalbot_8939> "\\undef" 

[17:02] <putter> gaal: add a TASKS entry.:)  hmm, this is starting to sound like a TASKS section!

[17:02] <gaal> oh, it's hidden in safe mode. but it's there.

[17:02] <putter> ok.  I wonder if that's mentioned in pugsrun.pod

[17:02] <putter> or whatever it's called

[17:03] <gaal> ::run

[17:03] <putter> or someplace...  where should info like that go?

[17:04] <putter> (I was thinking of lib/pugs/run.pod, but I'm not sure that's the right place... maybe not.)

[17:04] *** sapper joined
[17:05] <putter> ah, it's already in ./docs/quickref/var

[17:09] <putter> gaal: so, in what way is  i486-linux-gnu-thread-multi  funny?

[17:09] <svnbot6> r8941 | gaal++ | Remove warning about embedded parrot as requested by TASKS.

[17:09] <svnbot6> r8941 | gaal++ | Add more information about `pugs -V` TASKS.

[17:09] <gaal> putter: it's there because my perl was compiled by debian

[17:09] <gaal> but my box is not i486

[17:10] <putter> ahhh

[17:10] <putter> err, but if your box isnt i486 compatible, how are you running it?

[17:10] <gaal> of course it's i486 compatible

[17:10] <gaal> but my pugs probably isn't

[17:10] <gaal> even though my perl is.

[17:10] * putter thinks iX86 is more a comment on what instructions the binary uses, rather the cpu of the platform...

[17:11] <putter> ie, a i486 binary doesnt use any i586-only instructions...

[17:11] <gaal> yeah, but pugs probably does use them.

[17:12] <gaal> i686 ones too, even :)

[17:13] <gaal> as for -thread-multi-, these things sound perl5ish too; doesn't multi mean I can have multiple perl5 interpreters in one process?

[17:15] <putter> might mean threads-compatible, ie, `-mthreads'

[17:15] <putter>      Support thread-safe exception handling on `Mingw32'.  Code that

[17:15] <putter>      relies on thread-safe exception handling must compile and link all

[17:15] <putter>      code with the `-mthreads' option.  When compiling, `-mthreads'

[17:15] <putter>      defines `-D_MT'; when linking, it links in a special thread helper

[17:15] <putter>      library `-lmingwthrd' which cleans up per thread exception

[17:15] <putter>      handling data.

[17:15] <putter> from gcc info

[17:15] <theorbtwo> gaal: You're right on the definition of multi.

[17:16] <putter> s/might mean/might also mean/

[17:18] * theorbtwo wonders where mulitplicity is supposed to be documented.

[17:18] <putter> though if pugs always uses threads (yes? maybe?), and the gcc standard libraries always supports them, it may not be useful information.

[17:18] <gaal> I need to go now, catch y'all later! &

[17:18] <putter> &

[17:22] <offby1> OK, installed newer readline library; rebuilding pugs; will let y'all know how it works when it's done (which will probably be an hour or so ...)

[17:23] <svnbot6> r8942 | putter++ | TASKS: tweak.

[17:27] <putter> offby1: thanks :)

[17:28] <pasteling> "putter" at 66.30.119.55 pasted "pugs files which match /\bPIL/i (excluding perl5/(PIL2JS|PIL-Run)/)" (115 lines, 3.5K) at http://sial.org/pbot/15713

[17:29] <putter> stevan: could do a quick summary of what's what with the /pil/ pugs files?

[17:37] <putter> ./ext/Test/lib/Test/PIL is used by ./t/pil/*...

[17:38] *** awwaiid joined
[17:39] <putter> ./ext/Perl-Compiler/ is currently inactive...

[17:39] <putter> the docs are relevant...

[17:40] <putter> and the PIL2 src/Pugs files...

[17:42] <putter> and ./misc/Parser-Mini...

[17:42] <putter> and the piln examples...

[17:43] <putter> ./src/PIL/misc is the beginnings of a prelude to run on top of piln...

[17:44] <putter> and ./src/PIL/ ...

[17:44] <putter> and that's it/

[17:44] *** stevan joined
[17:46] <putter> lib/pugs/hack.pod, slightly out of date, says

[17:47] <putter>     |   |-- Perl-Compiler      A Perl 6 port of Pugs

[17:47] <putter>     |   |-- PIL                PIL2 implementation

[17:48] <putter> hey stevan.  just trying to figure out what all the /bPIL/i files are...

[17:49] *** kulp is now known as kulp|afk

[17:50] * putter tries  make pil  unsure what it does...

[17:50] <stevan> putter: src/PIL/Native/* is where everytghing is

[17:51] <stevan> putter:  make pil will create a pil executable

[17:51] <stevan> which evaluates pil code

[17:51] <stevan> piln code to be more precise

[17:51] * stevan wanders off the lunch

[17:52] *** bernhard joined
[17:52] <putter> ./pil

[17:52] <putter> ### Welcome to PIL2 REPL, the Pugs Again Shell! ###

[17:52] <putter> pugs>

[17:52] <putter> :)

[17:52] <putter> thanks stevan

[17:53] * putter wonders if we have a pil evalbot? ;)

[17:53] <stevan> nope

[17:53] <stevan> but I bet you could make one easily

[17:53] * stevan really wanders off to lunch

[17:54] <putter> :)

[17:54] <putter> though there's the whole pesky "is safe" security thing... no?

[17:55] <putter> hmm, pugs> 3  and pugs> say 3  and pugs> say "3"  all give errors.

[17:55] * putter goes to t/ to find stuff which works...

[17:56] * putter wonders if doing this online is not exactly achieving its objective of tempting people to play with piln...?

[17:58] <putter> drat.  it seems unfortunate that trivial Makefile.PL changes force a pugs recompile...

[18:02] *** Mister_Ed joined
[18:06] *** frodo72 left
[18:07] * putter wonders if Rule is(does?) Method for the sole purpose of participating in inheritance.  the minute you have multiple engines, a Rule looks more like a blob of DSL info for multi's, rather than something you would actually ever call.

[18:10] <putter> might be nice to have an... Inheritable role... "is inheritable"...?  So random stuff can participate in class/role inheritance?   perhaps a bit evil, but...

[18:11] *** Southen_ joined
[18:11] *** azuroth joined
[18:11] *** mlh_ joined
[18:17] * putter tries to picture how you would do a macro  <a=2pi*r**2> () { "L(a,2) = 2*pi*L(r)**2" }  so you can { use SymbolicCalculator; use Eqns :circle_stuff; } or { use NumericCalculator; use Eqns :circle_stuff }.  One copy of the equation, which depending on context, is used differently.

[18:18] <putter> the "one copy of the equation" being the objective of the exercise.

[18:27] <putter> stevan: so, I get almost a complete failure of the t/pil/ tests.  a couple of bindings work, and a couple of Class etc are defined.  all the rest fail.  is this current state, or did I do something wrong?

[18:28] *** Mister_Ed left
[18:31] <stevan> putter: that might be my doing

[18:31] <stevan> i checked in too much when i commited yhe changelog

[18:31] <gaal> is there a way to protect whitespace from the <<>> quoter?

[18:32] * stevan resolves to devote some time to pugs this weekend

[18:32] <gaal> I was reminded that it does handle pairs.... <<:animal(moose)>>

[18:33] <gaal> but can you do something like <<{"alces alces"} caribou deer elk moose>> ?

[18:34] *** Ovid joined
[18:35] <gaal> and back to crazy var declarations: is this legal? my $a = 42, $b = 54;

[18:36] <gaal> I'm still trying to get a sense of var decl and there's so much stuff

[18:37] <cognominal> the comma bind less than the = I think

[18:37] <cognominal> I would write it like in Perl5

[18:37] *** nothingmuch joined
[18:37] <gaal> my ($a, $b) = (42, 54) I can understand

[18:41] *** xinming joined
[18:41] <svnbot6> r8943 | putter++ | t/syntax/parsing/numbers.t: added failing tests, :todo<bug>, for adverbial based numbers with invalid digits.  Eg, :2<9>.

[18:42] <putter> stevan: ok, thanks.  I'll try using an earlier version.

[18:43] <cognominal> gaal I am very surprised that it works in Perl5 too

[18:43] <cognominal>  perl -e 'use strict; my $a = 42, $b = 54; print qq|"$a""$b"|'

[18:44] <cognominal> new idiom to me.

[18:44] <cognominal> and with -MO=Concise, we indeed see the pad slot creation

[18:45] <cognominal> why should it be different in Perl6

[18:46] <putter> gaal: looking at S02, <<"alces alces" caribou deer elk moose>>  should work.

[18:46] <putter> (grep for french)

[18:47] <putter> The implicit split is done after interpolation, but respects quotes in a shell-like fashion, so that «'$foo' "@bar[]"» is guaranteed to produce a list of two "words" equivalent to ('$foo', "@bar[]").

[18:48] <gaal> oh, thanks putter

[18:49] <gaal> oh, weird, cognominal 

[18:49] <gaal> :)

[18:49] <putter> gaal: re declarations, how about \(my $a = 2), \(my $b = 3); ;)

[18:49] <putter> that is, an expression which returns a list of two refs

[18:49] <gaal> GetOptions \our %Cmdline, qw(....) is an idiom I use a lot

[18:50] *** hcarty joined
[18:50] <putter> ah.  I was quite surprised the first time i saw such.  had been thinking of my in a very non-expression (statement) kind of way.

[18:51] * cognominal reads the synopsis in constant time. Each time I read them there is so much adds and changes that it takes as much time

[18:52] * putter really likes google:  site:dev.perl.org  mumble mumble ;)

[18:52] *** offby1 joined
[18:53] <offby1> OK, about to try the new shiny pugs-with-newer-readline, to see if it too segfaults immediately

[18:54] <offby1> oh hell, it still seems to be linking with the stock libreadline, despite my having purged the libreadline5-dev package.

[18:55] <offby1> hmph.

[18:55] <offby1> doesn't help.

[18:56] <offby1> $ LD_LIBRARY_PATH=/usr/local/stow/readline/lib/ ldd pugs

[18:56] <offby1> 	libreadline.so.5 => /usr/local/stow/readline/lib/libreadline.so.5 (0x40001000)

[18:56] <offby1> looks good, right?

[18:56] <offby1> $ LD_LIBRARY_PATH=/usr/local/stow/readline/lib/ ./pugs => Welcome to Pugs -- Perl6 User's Golfing System

[18:56] <offby1> Type :h for help.

[18:56] <offby1>  

[18:56] <offby1> Segmentation fault

[18:56] <offby1> :-(

[18:58] <gaal> putter: you know about \($x, $y) in p5?

[18:58] <gaal> curious feature :)

[18:59] <cognominal> I hate it.

[18:59] <gaal> offby1: too bad... maybe the tail of strace has a hint?

[19:00] <xinming> gaal: \($a, $y) is the same as [$x, $y]

[19:00] <gaal> xinming: not in p5 :)

[19:00] <cognominal> no!

[19:00] <xinming> ??

[19:00] <xinming> ...

[19:00] <gaal> xinming: it's (\$x, \$y)

[19:01] <xinming> ah... right. I forgot.

[19:01] <cognominal> the \ is distributes amoung the element of the list

[19:01] <cognominal> s/distributes/distributed/

[19:02] <cognominal> on the other hand, if what you want to say is [$x, $y ], why using the more convoluted syntax? so that may the rational for giving it another meaning

[19:03] <cognominal> s/may/may be/

[19:04] *** vel joined
[19:04] * xinming is confused with perl 6 as he doesn't use perl 5 for a long time.

[19:06] <putter> offby1: :(

[19:06] <putter> gaal: re \($x,$y), eeep!

[19:07] <putter> offby1: you could try compiling pugs without... oh, you're not compiling pugs are you?

[19:07] <cognominal> unix always fingers this poor Segmentation guy. Wonder why he has never been fired :)

[19:08] <putter> lol

[19:09] <putter> offby1: binary distribution?

[19:09] <putter> offby1: rafl, the debian... "packager"(?), will be by... at some point.  he might have thoughts.

[19:11] * putter backlogs to see what the strace results were...

[19:12] <putter> ghc 6.4.1 isnt in stable yet?

[19:20] <putter> gaal: the mac readline issue seems unlikely to arise on linux.  the problem was mac had an out-of-date netbsd version (not quite a fork, but significantly modified) of readline.  so that's probably not it.

[19:21] <putter> googling for ghc and gcc 3.3.5, I didn't see any obvious reports of incompatibility.

[19:22] *** DaGo joined
[19:22] <putter> hmm... if the debian distribution is binary... is stuff compiled with ghc 6.4.1 backwards compatible with a 6.4 library (assuming one is used... it seems unlikely but possible that a debian binary is statically linked).

[19:25] *** G2 joined
[19:28] <putter> xinming: did you send of a patch with your => to -> change?

[19:29] <putter> (xinming noticed one of the synopsis was saying => in places where -> seemed clearly intended)

[19:30] <xinming> putter: No, I haven't, I just asked in p6l,

[19:31] <putter> ah, ok.  that should take care of it too.  tnx :)

[19:33] * putter again notes that www.nntp.perl.org doesnt do so well with some encodings.  eg http://www.nntp.perl.org/group/perl.perl6.language/24611  is a blob of encoding. :/

[19:33] * putter goes to look at google's copy...

[19:34] <putter> s/again notes/again notices/   haven't note'ed it before ;)

[19:35] <putter> but google is out of date.  ah well.

[19:36] <putter> maybe proofreading the synopsis should be added to TASKS as a reoccurring task?

[19:36] <putter> s/sis/ses/

[19:36] <xinming> putter: how to create a patch by the way? :-/

[19:36] <xinming> diff S05.pod nS05.pod > patch.txt ?

[19:36] <putter> diff -u  , but yes. :)

[19:38] <putter> If it's a subdirectory, still run diff in the top pugs directory, so it's easy to apply.   diff -u foo/bar foo/bar.new should do it

[19:39] <putter> you can test it out by running patch < patch.txt   or perhaps patch -p1 < patch.txt .

[19:40] <xinming> putter: thanks,

[19:40] <xinming> I'll send the patch

[19:41] <offby1> putter: I am indeed building pugs myself.  I'd gladly disable readline support if I knew how to.

[19:42] <offby1> it appears to die immediately after printing the banner:

[19:42] <offby1> write(1, ".", 1)                        = 1

[19:42] <offby1> write(1, "\n", 1)                       = 1

[19:43] <offby1> --- SIGSEGV (Segmentation fault) @ 0 (0) ---

[19:43] <offby1> +++ killed by SIGSEGV +++

[19:43] <offby1>  

[19:43] <putter> ah.  turned out we didnt add something as simple as an env flag, but you can just edit Makefile.PL:      if (has_ghc_package('readline') 

[19:43] <putter>         and  try_compile("import System.Console.Readline\n"

[19:43] <xinming> offby1: what os you use?

[19:43] <putter> if(0 and has_ghc...  should do it.

[19:43] <xinming> offby1: I ever in debian testing, and encountered this problem.

[19:44] <xinming> putter: Do I copy the content of the patch file to the mail. or I attach a file to send to p6l ?

[19:44] <putter> xinming: debian stable x86.

[19:45] <putter> how did you deal with it?

[19:45] <xinming> offby1: upgrade the ghc to 6.4.1 in debian. apt-get install -t unstable ghc6. these 2 problems will go.

[19:45] <putter> xinming: re patch, attach. ;)

[19:45] <putter> xinming++

[19:45] <xinming> offby1: hmm, also, please. use testing in debian if the system isn't a server. :-P

[19:47] <putter> luqui: re the complexity cost of permitting 6.4.0... ;)

[19:47] * putter _likes_ stable.

[19:47] <xinming> hmm, If you wish to compile ghc 6.4.1 from source. I'd tell you "don't do that", There is a bug in make which comes with debian make the compliation fail.

[19:48] <offby1> xinming: my system _is_ a server, so I don't want to upgrade to testing.

[19:49] <xinming> I tried that, and waste 2 days... (I ever thought How can the compliation progress take so long? over a day. It is still compiling...)

[19:49] <xinming> offby1: hmm, check your make version. if it is `3.81beta4`, then, I think You should also compile make yourself.

[19:50] <offby1> xinming: make --version => GNU Make 3.80

[19:50] <putter> offby1: so it looks like you have two options: edit Makefile.PL to disable readline (simple, but leaves you without it - not a big deal); or get 6.4.1 from testing (but my fuzzy understanding is grabbing things from testing can be problematic/contagious).

[19:50] <xinming> offby1: I don't know if this version of make contains the bug I encountered.

[19:51] *** nothingmuch joined
[19:51] <offby1> putter: I'll try disabling readline.  Thanks.

[19:51] <putter> luqui: ok, I note that requiring 6.4.1 would have here caused even _more_ problems. ;)

[19:52] <putter> offby1: np

[19:52] <xinming> putter: hmm, I think he'd better install ghc 6.4.1 as in 6.4 , the complied program might be buggy.

[19:54] <putter> perhaps, but it's (pugs) not being used in production, there aren't yet reports of such, and, correct me if I'm wrong, mixing debian testing into stable is not something to be done lightly.

[19:54] <putter> no?

[19:55] <xinming> mixing testing with unstable is much a better choice than stable + testing. :-)

[19:55] <offby1> not by me, anyway

[19:55] <putter> (well, the readline would be such a report... how about any _other_ reports;)

[19:58] <putter> stevan: the r8912 did modify a bunch of src/PIL/ files

[19:58] <putter> should they be reverted?

[19:59] <stevan> putter: yeah I have a copy and so will the VCS

[19:59] <putter> k

[20:05] *** Debolaz joined
[20:11] *** lightstep joined
[20:12] *** offby1 joined
[20:14] <svnbot6> r8944 | putter++ | src/PIL/Native/Bootstrap: revert various files unintentionally modified by r8912.

[20:17] <gaal> "omniscient debugger" google tech talk: http://video.google.com/videoplay?docid=3897010229726822034&q=Google+techtalks

[20:18] <nothingmuch> omniscient debugging is cool

[20:18] <offby1> sounds like domestic surveillance.

[20:20] *** KingDiamond joined
[20:23] <putter> hmm, can't watch the video just now.  but debuggers that can slide around in time have been around for a long time... the simplest approach being schemes which roll forward to the t of interest, using checkpoints to avoid having to keep going back to the beginning of the program.

[20:24] <putter> wonder if nifty new stuff has been added?  or maybe just "the tools we're using still suck compared to what we know how to do".

[20:25] <putter> :/

[20:26] <offby1> :\

[20:26] <offby1> that makes a "K".

[20:27] *** frederico_ joined
[20:30] *** chris2 joined
[20:31] <offby1> hooray -- disabling readline (by nixing the relevant stuff in Makefile.PL) fixed my problem on Debian.

[20:32] <offby1> now I wonder if I can get the functionality back, without provoking the bug, by just using "rlwrap" ... :-)

[20:34] <offby1> hee hee!  rlwrap works fine.

[20:34] <putter> *laugh*

[20:34] <offby1> strange but true.

[20:34] <offby1> thanks folks.

[20:34] *** offby1 left
[20:36] <putter> stevan: the reversion fixed all the tests but those in t/pil/container/  which entirely failed.  expected?

[20:37] *** frodo72 joined
[20:42] *** offby1 joined
[20:43] <gaal> putter, what does the tweak in r8942 mean? %?CONFIG has whatever -V does, it's just not available in safe mode hence for evalbot

[20:43] *** offby1 left
[20:44] <gaal> -V is basically $_.perl.say for %?CONFIG, @*INC

[20:44] <putter> I just wanted to mention it's existence.

[20:45] *** Shillo joined
[20:45] <gaal> okies

[20:45] <putter> one of the ideas for TASKS is for people who have the "big picture" to brain dump that which is needed for someone without it to solve the problem.  the existence of %?CONFIG seemed like such a thing to mention

[20:46] <gaal> yes, good idea. I wish I could have a chat with someone with a big picture re: ver decl

[20:46] <gaal> *var decl

[20:47] <gaal> but for now I must afk! see you.

[20:47] <putter> bye & :)

[20:47] * SamB wonders why he is now considered an admin

[20:48] <putter> yeah, right now our only "request for clarification" mechanism is p6l posts... I wonder what else might be done...?

[20:49] <gaal> putter: get larry and audreyt together in the same room as oneself for a week, as in fact is going to happen in three weeks :-)

[20:49] <putter> SamB: because everyone who contributes is a committer, and everyone who.... becomes an admin?

[20:49] <gaal> *ppf*

[20:49] <SamB> but... but... I didn't do anything!

[20:49] <putter> gaal: that sound like great fun :)

[20:49] <putter> lol

[20:50] <putter> then it logically follows that mere existence is sufficient... ;)

[20:50] <SamB> well, I mean, I did get commit access somehow

[20:51] <SamB> I don't remember doing anything useful

[20:51] <SamB> I think I broke building on non-GHCi platforms

[20:52] <integral> well now you can recruit someone to unbreak it ;-)

[20:52] <putter> My fuzzy impression is the idea behind spreading around the admin bit is so there is always someone here who can add new committers.

[20:52] <SamB> it was fixed months ago

[20:53] <Shillo> Hmm, one question, about specs. S06 mentions tokens, which should be a special kind of rules. Where are they described?

[20:53] <Shillo> Don't remember seeing them on A05 or S05.

[20:54] <stevan> putter: yes, the container tests should still fail

[20:56] <Shillo> Hmm, also, does anyone else get insta-crash running PUGS interactively? I suspect readline.

[20:57] <putter> Shillo: re tokens, I don't know.  perhaps 

[20:59] <putter> they are related to the as yet undocumented(?)  top-down/operator-precedence/top-down parser sandwitch ... but it may also jut be historical artifact?

[20:59] <putter> re insta-crash, bet you have ghc 6.4.0 not 6.4.1, yes?

[21:00] <putter> that if you're running linux.  on mac, readline.

[21:00] * Shillo facepalms.

[21:00] <putter> facepalms?

[21:00] <Shillo> And I -did- read that change.

[21:01] <Shillo> Yeah. As in, cover my face with the palms of my hands.

[21:01] * putter is confued... and my s-key is intermittant...

[21:01] <putter> ah.  which change?

[21:03] * putter rediscovers "is parsed" in S06... decides he really really wants it... ;)

[21:04] <Shillo> 6.4 -> 6.4.1 required

[21:04] <Shillo> Although, pugs works for me just fine if I just run scripts.

[21:05] <putter> actually, while that was talked about, 6.4.1 is only required on x86_64, and, well, strongly encouraged on mac osx 10.4.  the debian dependency on 6.4.1 was not expected.

[21:05] <Shillo> I think it's readline, then.

[21:05] <Shillo> pugs itself does work.

[21:06] <putter> what platform?  mac?  linux?

[21:06] <theorbtwo> SamB: email address?

[21:06] <putter> Multivac: can entropy be reversed?

[21:06] * theorbtwo wonders if he can figure out again how to give people committer bits.

[21:06] <theorbtwo> (WHile drunk.)

[21:06] <SamB> theorbtwo: you want to know my email address?

[21:07] <Shillo> putter: Ubuntu

[21:07] <theorbtwo> I want to give you a comitter bit.

[21:08] <SamB> theorbtwo: oh, what happened to my old one?

[21:08] <theorbtwo> i thought you just said you didn't get one...

[21:08] <theorbtwo> nevermind.

[21:08] <putter> theorbtwo: SamB was just saying he unexpectedly got an admin bit... o I assume he ha (d*mn s) a commit bit

[21:09] *** lightstep left
[21:10] <putter> Shillo: ah.  right.  that is readline related too.  yes, the options are upgrade to 6.4.1 or fiddle with Makefile.PL to build without readline support (and then you can rlwrap to get it back)

[21:10] <Shillo> putter: Hmm. :)

[21:10] <Shillo> I'm fine with running noninteractive for now, actually.

[21:10] <Shillo> I kinda want SLIME for p6.

[21:11] <putter> there may be other options... there's only been one case so far...

[21:11] <putter> or two

[21:11] <putter> SLIME for p6 ++

[21:14] * Shillo grins!

[21:14] <putter> I started to look into being a slime backend... http://common-lisp.net/project/slime/  ... swank...  But I guess I got distracted.  Next step would be to grab the source and see if the protocol is something we can easily handle.

[21:15] <Shillo> And in-language support. SWANK introspects everything.

[21:15] <Shillo> Like Intellisense on steroids.

[21:16] <Shillo> Protocol is just a socket.

[21:16] <Shillo> Probably textual, beneath that.

[21:17] <Odin-> Hey, once that gets working, how about integrating Perl6 into emacs? :p

[21:17] <theorbtwo> A while back I looked at smart syntax hilighting, but didn't get terribly far.

[21:17] * putter goes looking for ghc debugger...  we may be too "compiled" to make this easy until there is more of a pure p6 implementation...

[21:18] <Odin-> (After that, I think the only remaining thing would be to turn emacs into a Mozilla-y thingamajig. Whoo, all the big swiss army knives rolled into one.)

[21:18] *** Debolaz2 joined
[21:18] <putter> theorbtwo: the sticking point was... not enough position annotations?

[21:18] <Shillo> Hehe. Well, I suspect something specs enough introspections for things to work.

[21:18] <theorbtwo> Even at the Parse-YAML level, we don't have enough position information, or possibly enough syntax left, for it to be very um, um, informative.

[21:18] <theorbtwo> putter: That, and 90% of them were just "app".

[21:19] <putter> ah

[21:19] <ingy> hola

[21:19] <theorbtwo> I'll put my code somewhere if you want it.

[21:19] <Odin-> ingy: You know, that translates into "a hole" in Icelandic.

[21:19] <putter> Odin-: :)

[21:20] <theorbtwo> It's kind of in a half-done state, where it extrats information, but doesn't actually do anything with it.

[21:22] <putter> theorbtwo: instead of using the pug parser, I wonder if pge is far enough along that one could start using a grammar for p6 to grovel over the file... no, I guess that's a bad idea.  need a more informative parser then...

[21:22] <Shillo> Does parrot support shared substrings?

[21:22] <putter> hi ingy

[21:22] <Shillo> If yes, you get position info for free from the rules matches, you only need to add methods to substrings to tell you what they're pointing to.

[21:23] <ingy> hi putter

[21:23] <theorbtwo> The problem with using the rules engine for this is that pugs doesn't use the rules engine, so you can get into situations where what your hilighter says is going on doesn't match reality, and avoiding that was the whole point.

[21:24] <Shillo> theorbtwo: Isn't that a self-solving problem, since it will have to use rules eventually?

[21:25] <putter> Shillo: the gotcha with just using rules to grovel over p6 source is that p6 is too much a live thing.  not so much now, because macros and such are barely implemented, but increasingly.  you basically cant parse p6 without a live p6 system.

[21:26] <Shillo> Hmm.

[21:26] <theorbtwo> Well, rules should be a live perl6 system, when done.

[21:26] <theorbtwo> In the meantime, however...

[21:27] <putter> theorbtwo: though one idea would be to start using rules (putting together a p6 grammar is a worthwhile goal in and of itself), which gives you position info, which you can pretend came from the parser.  which lets you get the rest of the system up.  then when the parser provides more info, you can just switch over..?

[21:27] <theorbtwo> Or when your grammar is good enough, pugs can switch over.

[21:27] <putter> ;)

[21:28] <Shillo> The main problem, actually, are string-returning macros. AST-returning macros would be nice and neat.

[21:28] <xinming> In fact, every time you face this excited idea of perl 6. You'll be surprised..

[21:29] <putter> one of the questions I want to ask audreyt is what her vision for the mix of haskell and p6 is.  ie, should we be adding statement-control:<while> or however that's specced, and yanking it from Parser.hs?  or not?

[21:29] <Limbic_Region>  /quit tiuq\

[21:31] <putter> theorbtwo: actually, you could argue you want _both_ sources of info - heuristic patterns and the parser tree.  because you still want to highlite etc code even when it's broken, when the parser will be of little help.

[21:33] <putter> have you thought about how say emacs(?) and this analyzer interact?

[21:33] *** Khisanth joined
[21:33] *** dduncan joined
[21:34] <putter> if i did slurp ~~ /^(sub|class|package)\s+(\w+)/  how much more would I need to do basic syntax coloring?

[21:35] <Shillo> slurp can be overloaded. So can ~~. /.../ can be redefined (right?)

[21:36] <Shillo> sub prefix:slurp ...; :)

[21:37] <putter> I'm just wondering if one can usefully get started immediately, with a relatively small analyzer, get it plugged into emacs or whatever, and start gaining experience.

[21:38] <Shillo> Er, yeah. Now I reread what you said and figured I misunderstood.

[21:41] <putter> http://www.gnu.org/software/emacs/elisp-manual/html_mono/elisp.html#Font-Lock-Mode

[21:41] *** frederico_ joined
[21:46] <putter> bbiab

[21:46] <Shillo> Laters, all.

[21:46] *** Shillo left
[22:10] *** hcarty left
[22:29] *** dudley_ joined
[22:32] *** rantanplan_ joined
[22:38] *** Shachaf joined
[22:43] <rafl> putter: You rang the bell?

[22:50] *** Debolaz joined
[22:55] <putter> hey rafl

[22:56] <putter> just to note that some debian stable folks running 6.4 were getting segfaults on pugs startup.

[22:56] <rafl> putter: Which pugs?

[22:56] <putter> works if readline support is disabled by munging Makefile.PL

[22:56] <rafl> putter: And I don't even provide packages for debian stable.

[22:57] * putter backlogs...

[22:58] <putter> ok, it looks like compiling pugs on debian stable or testing with 6.4 causes the described behavior.

[22:59] <putter> which I guess is not your problem ;)

[22:59] <putter> any suggestions in case it comes up again?

[23:00] <putter> on non-stable, one can upgrade ghc.  on stable, one can edit the Makefile.PL.  any other options come to mind?

[23:00] <nothingmuch> rafl: how's the smoke server coming along?

[23:00] <rafl> nothingmuch: I waited on YAML 0.5 a while. Now that it is out I could continue, but it's exam time.

[23:01] <rafl> nothingmuch: I'll continue work in 1.5 - 2 weeks.

[23:01] <putter> rafl: anyway, that was the ping.  problem+debian=>consult-ralf

[23:01] <putter> arg

[23:01] <putter> rafl

[23:02] <putter> thanks

[23:02] <rafl> putter: Who had the problem?

[23:02] <szbalint> offby1

[23:03] <nothingmuch> rafl: =)

[23:04] <rafl> Ah. I think he should contact me so I can get some additional info.

[23:05] <putter> offby1 http://colabti.de/irclogger/irclogger_log/perl6?date=2006-02-02,Thu&sel=31#l70  down thru 20:34.

[23:06] *** weinig joined
[23:06] <putter> he had the stable.  xinming reported (briefly) the same problem on testing.

[23:07] <putter> offby1: if you ever see this, ping rafl

[23:08] *** Debolaz joined
[23:15] *** Limbic_Region joined
[23:16] *** justatheory joined
[23:24] *** feng123 joined
[23:27] *** cdpruden joined
[23:41] *** azuroth joined
[23:41] <svnbot6> r8945 | putter++ | misc/IDE-support: a silly little demo of emacs calling a p6 program which then highlights the emacs buffer from which it was called.  The idea is to have a p6 server which provides source code analysis and refactoring services to editors and IDEs.

[23:44] <putter> theorbtwo: here's a toy.  if you're interested in pursuing it, let's talk.

[23:44] <putter> or if anyone else is ;)

