[00:09] *** timthelion joined
[00:10] *** timthelion left
[00:23] *** hikozaemon joined
[00:32] *** nekokak joined
[00:44] *** macroron joined
[00:54] <cmarcelo> seen audreyt

[00:54] <jabbot> cmarcelo: audreyt was seen 10 hours 56 minutes 52 seconds ago

[01:03] *** xdg joined
[01:20] *** unobe is now known as unobe_away

[01:21] *** lambdabot joined
[01:25] *** dolmans joined
[01:42] *** weinig joined
[01:48] *** Vutral joined
[01:49] *** christopher joined
[01:55] *** rodi joined
[02:21] *** bradb joined
[02:26] *** esammer joined
[02:28] *** Captain_Fourier joined
[02:34] <meppl> gute nacht

[02:34] *** mdiep joined
[02:52] *** bradb left
[02:56] * Khisanth wonders what is a lambdamoose

[03:04] *** kattana_ joined
[03:16] <svnbot6> r11896 | fglock++ | pX/Pugs-Compiler-* - implemented <%hash>; several fixes

[03:20] <cmarcelo> audreyt: ping

[03:25] *** amped3 joined
[03:39] *** perlchina joined
[03:49] *** amped3 left
[03:51] *** tup joined
[03:58] *** ajs_home joined
[04:09] <mdiep> STATUS says the Perl 5 backend is "Broken; once passed <50% of main tests (no ext/); inactive; will probably be rewritten around PIL2. [2006-01-30]"

[04:10] <mdiep> is that different form the p6-to-p5 effort? or is this out of date?

[04:11] <obra> I believe that's a whole different effort

[04:22] *** amnesiac joined
[04:24] *** sahadev2 joined
[04:58] <audreyt> uhm, not exactly

[04:58] <audreyt> the p5 backend was PIL-run, then pX, then lrep, then v6-alpha

[04:58] <audreyt> there's some continuity involved (though code is all rewritten)

[04:58] <audreyt> and now pugs -CPerl5 simply uses v6-alpha

[04:58] <audreyt> so STATUS is outdated

[04:59] <obra> was PIL-run an attempt to convert p6 to p5 or to do a lower-level bytecode and a bytecode interpreter?

[05:00] <audreyt> it was an attempt to convert pil into perl5 and then eval"" it I think

[05:00] <audreyt> but there was not sugar layer

[05:00] <audreyt> and it's not as modularized, and does not attempt to bootstrap with a grammar implementation

[05:01] <obra> *nod*

[05:13] *** drrho joined
[05:23] *** scw joined
[05:29] *** pdcawley joined
[05:34] <gaal> hullo

[05:34] <obra> hey gaal

[05:34] <gaal> hi obra!

[05:38] <cmarcelo> audreyt: hi. re: IArray, i'm defining type IArray = (Judy.Map2 ..., TVar ArrayIndex), the index would hold the size of array.. is it a bad idea? i'm doing this to avoid filling the structure with lots of undefs..

[05:56] <audreyt> I think that's fine

[06:04] <xerox> audreyt: yow :)

[06:07] *** Captain_Fourier left
[06:17] *** masak joined
[06:36] * gaal mooses

[06:37] * xerox is flying over to AngloHaskell!

[06:41] <gaal> xerox: url?

[06:42] <xerox> ?wiki AngloHaskell

[06:42] <lambdabot> http://www.haskell.org/haskellwiki/AngloHaskell

[06:43] <gaal> ha, haskell is the only language I know where the presence of a job opening shakes the community :)

[06:46] <gaal> "Lemmih could give a short talk on breakpoints in GHC"

[06:46] * gaal wants to hear that!

[06:47] *** kanru joined
[06:47] *** Revision17 joined
[06:54] *** nirgle2 joined
[06:57] *** sofit joined
[07:08] *** Aankhen`` joined
[07:09] *** buetow joined
[07:19] *** elmex joined
[07:27] *** beppu_ joined
[07:28] *** iblechbot joined
[07:29] <beppu_> I'd like to build pugs on OSX (x86).  Are there any resources that can help me along?

[07:38] *** theorb joined
[07:43] <beppu_> ghc has the most thorough ./configure script EVER.

[07:43] <dolmans> since pugs in build on top of ghc, then the question is how to build ghc on osx. unoffical answer. :-)

[07:48] <StudiesInWords> there is a 6.4.1 ghc for os x

[07:51] <beppu_> Indeed there is....  I think I'll use that.

[07:55] <beppu_> is the osx build of ghc on http://haskell.org/ghc/download_ghc_641.html popwerpc only?

[07:55] <lambdabot> Title: GHC: Download version 6.4.1

[07:57] <StudiesInWords> seems like powerpc only

[07:58] <beppu_> I guess I'll find out in a moment.

[07:58] <StudiesInWords> i have only ppc

[08:01] <beppu_> It is a PPC binary package, but OSX for x86 manages to be able to run it, anyway.

[08:01] <StudiesInWords> "undefined symbols: _rl_catch_sigwinch"

[08:04] <beppu_> doh.  ppc ghc won't build pugs on x86 osx.

[08:05] <beppu_> I get errors like: /tmp/ghc14275.s:24:no such 386 instruction: `addi'

[08:05] <beppu_> it's trying to use ppc assembly

[08:07] *** tup joined
[08:09] <StudiesInWords> lots of stuff not found, but still compiling here

[08:20] <svnbot6> r11897 | dolmans++ | Builtin reduce operators on null or one elem list.

[08:21] *** tup joined
[08:26] <gaal> beppu_: IRTS audreyt or nothingmuch mentioning you need arecentish 6.5.x for macs.

[08:41] *** kane-xs joined
[08:50] *** Aankh|Clone joined
[09:39] *** ruoso joined
[09:57] *** Aankhen`` joined
[10:02] *** zeyata joined
[10:04] *** zeyata left
[10:08] *** rodi joined
[10:23] *** kanru joined
[10:26] *** hugues23 joined
[11:10] *** silug joined
[11:14] <StudiesInWords> "Failed 4/521 test scripts, 99.23% okay, 38/9471 subtests failed, 99.60% okay" (pugs 6.2.12 with ghc 6.4.1 on OS X)

[11:16] *** chris2 joined
[11:21] *** ruz joined
[11:30] *** xdg joined
[11:41] *** marmic joined
[11:56] *** iblechbot joined
[12:00] *** tokuhirom is now known as toku_away

[12:03] *** ivas joined
[12:25] *** Limbic_Region joined
[12:29] *** ivas joined
[12:37] *** Aankh|Clone joined
[12:44] *** Aankh|Clone is now known as Aankhen``

[12:46] <miyagawa> audreyt: ping

[12:50] *** lolage joined
[12:54] *** dakkar joined
[12:55] *** [particle] joined
[12:59] *** marmic joined
[13:02] *** dolmans joined
[13:07] *** Revision17 joined
[13:09] <audreyt> miyagawa: pong (though I'm about to sleep)

[13:10] <audreyt> filterm++ # does what GNU screen cannot do

[13:10] <audreyt> alias nethack="filterm UTF8-cp437 cp437-UTF8 nethack"

[13:10] <audreyt> (display of line drawing characters)

[13:10] <miyagawa> that's fine. have you read the JSON::Syck utf-8 complaint mail?

[13:10] *** mauke_ joined
[13:11] <audreyt> uh no

[13:11] <miyagawa> oh, ok. it's rt 20830

[13:12] <dakkar> filterm? doesn't 'luit' do the same thing?

[13:13] <audreyt> miyagawa: mlehmann contradicts himself

[13:13] <audreyt> "If it is 1, it sometimes returns json objects with "bytes"

[13:13] <audreyt> >255."

[13:13] <audreyt> I don't understand that part.

[13:13] *** weinig is now known as weinig|away

[13:14] <miyagawa> maybe he's thinking latin-1 as Unicode

[13:14] <miyagawa> ?

[13:14] <audreyt> not sure

[13:14] <miyagawa> alright. I'm glad you feel the same way i do

[13:14] <audreyt> I think he means that when ImplicitUnicode is on

[13:14] <audreyt> the Dump() should still yield byte buffers

[13:15] <audreyt> not unicode strings

[13:15] <audreyt> which does have a certain merit

[13:15] *** mindbob joined
[13:15] <audreyt> but he can get that behaviour trivially using utf8::encode() or utf8::downgrade() or Encode::_utf8_off or Encode::encode_utf8

[13:15] <audreyt> following the Dump

[13:15] <miyagawa> probably he wants Pelr (Unicode) to JSON (utf-8)

[13:15] <miyagawa> which JSON::Syck doesn't?

[13:16] <miyagawa> yeah, it's really trivial ..

[13:16] <audreyt> he wants the return value of Dump to by byte string

[13:16] <audreyt> s/by/be/

[13:16] <audreyt> can you reply to him to suggest that?

[13:16] <audreyt> i.e. post process the Dump himself in perl land

[13:16] <miyagawa> yep

[13:16] <audreyt> I think it's generally more useful, our current behaviour

[13:17] <miyagawa> yeah, we don't have any problem with the current

[13:17] <audreyt> also

[13:17] <audreyt> Perl only knows about binary strings (octet strings)

[13:17] <audreyt> and text strings (unicode character strings), both of which can have the

[13:17] <audreyt> UTF-8 flag set or cleared.

[13:17] <audreyt> I think mlehmann is confused... there is no "utf8-flagged binary strings"

[13:17] <audreyt> in perl5

[13:18] <audreyt> but maybe it's just a terminology confusion

[13:18] *** bpphillips joined
[13:19] <audreyt> anyway, you can always give him a commit bit and tell him to file bug reports in the form of regression tests :)

[13:20] <audreyt> *wave* &

[13:25] *** mauke_ is now known as mauke

[13:40] *** frederico joined
[13:49] *** vel joined
[13:49] *** wazzuteke joined
[13:51] *** justatheory joined
[13:51] *** jiing_ is now known as jiing

[13:57] *** justatheory joined
[14:00] *** fglock joined
[14:01] *** theorbtwo joined
[14:02] *** kanru joined
[14:07] <svnbot6> r11898 | fglock++ | pX/Pugs-Compiler-Rule - TODO t/09-ratchet.t

[14:12] *** penk joined
[14:13] *** _mago joined
[14:13] <fglock> mago: hi!

[14:14] <_mago> yeah!

[14:16] <fglock> did you get my last mail? I sent to e-via

[14:16] <_mago> nop

[14:17] <_mago> mago at rio dot pm dot org

[14:17] <fglock> k

[14:18] *** pochi left
[14:19] <fglock> re-sent :)

[14:20] <fglock> I'm refactoring v6.pm - it was starting to take too much ram to load

[14:20] <[particle]> fglock: i have some cycles to devote to get parrot's p6regex tests working for p6-on-p5

[14:22] *** autark joined
[14:22] <fglock> [particle]: if the tests work for pugs they should work in v6 - or do you mean fixing v6 to get the tests running?

[14:22] <[particle]> no, i mean writing a harness so t/p6regex/regex_tests can be run

[14:22] <[particle]> it's just a data file right now

[14:23] <[particle]> need a .t file that loads and runs the individual subtests

[14:23] <fglock> sure, that would be very useful

[14:23] <[particle]> it'll need to be written in perl6 i assume

[14:23] <fglock> [particle]: yes

[14:24] *** prefiks joined
[14:24] <[particle]> and should i try to only use syntax that passes 01-sanity?

[14:24] *** hexmode joined
[14:24] <[particle]> or 02-test-pm, anyway

[14:24] <fglock> [particle]: I'm rewriting some parts of Pugs-Compiler-Rule, it should be a bit easier to maintain

[14:25] <[particle]> great

[14:25] <fglock> [particle]: Test.pm works with v6.pm, but it would be good to have the basic tests not depending on it

[14:26] <[particle]> well, these are p6regex tests, i don't know if you consider them basic or not

[14:26] *** cjeris joined
[14:27] <[particle]> i'll need to open and iterate through a file, at minimum

[14:27] <[particle]> i don't see open tests in 01-sanity

[14:27] <[particle]> happily, split and substr are there :)

[14:28] <fglock> I think using Test.pm is ok

[14:28] <[particle]> great

[14:28] <[particle]> brb

[14:29] <StudiesInWords> the documentation Pugs::Doc::Hack says "cpan Bundle::Pugs::SmokeKit", but doing that gives "Bundle::Pugs::SmokeKit has been obsoleted by Task::Smoke."

[14:31] *** justatheory joined
[14:35] <gaal> StudiesInWords: what version are you looking at?

[14:35] <StudiesInWords> http://search.cpan.org/dist/Perl6-Pugs/lib/Pugs/Doc/Hack.pod

[14:35] <lambdabot> Title: Pugs::Doc::Hack - How to hack on Pugs - search.cpan.org

[14:35] <gaal> look in HEAD...

[14:35] <gaal> it no longer says that there :)

[14:36] <StudiesInWords> right

[14:37] <StudiesInWords> i was still checking out...

[14:50] *** [particle] joined
[14:53] <[particle]> which Test.pm is 'use Test' actually loading? (there are several in the repo)

[14:54] <fglock> it should use ext/Test/lib - or a copy of the same file in perl5/Pugs-Compiler-Perl6/t

[14:55] <gaal> blib6/lib/Testl.pm.yml, which a precompiled verison of the Test.pm copied over to that dir from ext/Test/lib

[15:01] *** lidden joined
[15:02] *** tup joined
[15:05] <fglock> any ideas to debug a message like 'Not a CODE reference at (eval 80) line 126.' in perl5 (in pX/v6.pm) ?

[15:06] <fglock> I can't find the place

[15:07] <gaal> fglock: install a __DIE__ handler that dumps Carp::longmess?

[15:07] <fglock> gaal: I'll try - thanks!

[15:08] <fglock> although this is functional code - I think it will just dump a long list of unnamed subs

[15:09] <gaal> run under perl -d with trace on? (or one of the -D tracers)

[15:10] <gaal> it'll be pretty slow and give lots of output

[15:12] *** bpphillip1 joined
[15:19] *** rodi joined
[15:24] <fglock> gaal: It worked - I used '-d:Trace' and grepped for '(eval 80)'

[15:25] <fglock> &

[15:27] *** penk joined
[15:32] *** avar joined
[15:40] *** weinig|away is now known as weinig

[15:48] *** ruoso joined
[15:49] *** vel joined
[15:49] <vel> 2Ac2rn1

[15:53] *** cm joined
[15:57] *** weinig is now known as weinig_bbl

[16:14] *** Psyche^ joined
[16:17] *** weinig_bbl is now known as weinig

[16:23] *** typester joined
[16:27] *** Psyche^ is now known as StudiesInWords

[16:34] <rodi> 1.5 ~~ 1^..^2  # this evaluates to False in pugs, and should evaluate to true, per S03 - "New Operators"

[16:34] <svnbot6> r11899 | cmarcelo++ | * Judy.Map2: Take* primitives and a missing file required for testing.

[16:34] <svnbot6> r11898 | fglock++ | pX/Pugs-Compiler-Rule - TODO t/09-ratchet.t

[16:34] <rodi> Where should this test go?

[16:34] <rodi> t/operators/?

[16:35] <rodi> smartmatch.t?

[16:35] <fglock> rodi: t/operators/range.t

[16:35] <rodi> fglock: tx

[16:38] *** frederico joined
[16:47] <svnbot6> r11900 | rodi++ | test for lazy evaluation of range operator

[16:48] *** buubot joined
[16:56] *** bernhard joined
[17:15] *** avar joined
[17:25] <clkao> fglock: are we nearly there yet? ;)

[17:35] *** frederico joined
[17:38] <fglock> clkao: I'm debugging a failure in Term match - everything else works ...

[17:39] <clkao> i was wondering. does A orz B being parsed as &infix:<orz>(A, B) only when the infix is defined?

[17:40] <fglock> clkao: I think so - otherwise it would be A( orz( B )) or an error

[17:40] <clkao> but when you have that compiled in foo.pm, and you define it somewhere else and the require foo.pm...

[17:41] <clkao> i heard that one module is closed by itself, so it peeks for that during compilation or ?

[17:42] *** Eimi joined
[17:43] *** ludan joined
[17:44] <fglock> I don't know - it would need to read that info from somewhere, or emit lazy code that gets fixed after 'use'

[17:44] <clkao> TimToady: any idea about this?

[17:49] <fglock> clkao: would you take a look at a bug?

[17:50] <clkao> i am about to head out. but you can leave message on ir

[17:50] <clkao> c

[17:51] <fglock> ok - I'll commit what I have

[17:52] *** awwaiid joined
[17:52] <svnbot6> r11901 | fglock++ | pX/Pugs-Compiler-Perl6 - inserted debugging info for "Not a CODE

[17:52] <svnbot6> r11901 | fglock++ | reference at (eval 80) line 27124" compiling ':foo(42)'

[17:52] <fglock> 'line 27124' means code chunk 27, line 124 - i made it print the code right before the error

[17:53] <fglock> s/code/source code/

[18:06] *** crem joined
[18:23] <fglock> ugh - I found the bug:

[18:23] <fglock> ([_|\w] ) captures an array to $/[0]

[18:23] <fglock> which is right, but I need the string it matched - how do I get that?

[18:24] <[particle]> .match ?

[18:24] <fglock> there is a plus sign between ] and ) - cgi-irc doesn't show that

[18:24] <[particle]> $match = $/[0] ?

[18:25] <fglock> [particle]: $/[0] is a bare array

[18:25] <fglock> of matches

[18:25] <[particle]> oh, it doesn't notice scalar context, and stringify the array?

[18:25] <[particle]> i believe it should

[18:26] <[particle]> in parrot, we do $S0 = match[0]

[18:26] <[particle]> it sees it's assigning to a string register, and returns the matched string

[18:26] <[particle]> however, this is probably a bit different in perl6

[18:26] * [particle] checks S05

[18:27] <fglock> maybe it should only be an array in array context

[18:28] <[particle]> yes

[18:28] <[particle]> Notionally, a match object contains (among other things) a boolean success value, a scalar result object, an array of ordered submatch objects, and a hash of named submatch objects. To provide convenient access to these various values, the match object evaluates differently in different contexts:

[18:29] <[particle]> In string context it evaluates to the stringified value of its result object, which is usually the entire matched string:

[18:29] <[particle]> $match = ~$/[0]

[18:29] <[particle]> or $match ~= ...

[18:29] *** avar joined
[18:30] <fglock> "the corresponding array element for the quantified capture will store a (nested) array rather than a single Match object" - maybe it means "store a submatch with positional captures?

[18:30] <fglock> that would work

[18:30] <[particle]> yep

[18:32] <fglock> fixing this requires more coffee &

[18:44] *** larsen joined
[18:48] *** buetow joined
[18:53] *** weinig is now known as weinig|away

[18:57] <fglock> after some coffee - it may be an implementation bug, i'll check

[19:04] <svnbot6> r11902 | fglock++ | pX/Pugs-Compiler-Rule - added t/11-quantifier.t with a failing test

[19:09] *** lollan joined
[19:09] <svnbot6> r11903 | fglock++ | pX/Pugs-Compiler-Rule - no errors in t/11-quantifier.t

[19:15] *** weinig|away is now known as weinig

[19:19] *** justatheory joined
[19:20] *** salty-horse joined
[19:30] <svnbot6> r11904 | fglock++ | pX/Pugs-Compiler-Rule - fixed the 'not a CODE' bug (localized static capture counts)

[19:36] *** embedded_cm joined
[19:39] *** vel joined
[19:45] <svnbot6> r11905 | fglock++ | pX/Pugs-Compiler-* - t/00-grammar/01-pcr.t passes

[20:36] *** cognominal joined
[20:49] <svnbot6> r11906 | fglock++ | pX/v6 - more parser tests

[20:53] *** SageLT joined
[21:10] <SageLT> I've got a p5 regex question that I think somebody here might be able to help me with: in t/op/pat.t there's a match on the pattern / {([^}]*)}/. To me this looks illegal (the opening { seems to start a count, not be a de-meta'ed character). How does this work? By translator is braking on it, cause the way I've got it coded it thinks that's a count (which i isn't)

[21:14] <fglock> SageLT: is this a pugs file? I don't see it. Maybe it was meant to read <(...)> ?

[21:15] <SageLT> Sorry, it's a P5

[21:15] <SageLT> my mistake

[21:15] <SageLT> Sorry bout that, forgot where I eevn got it from. Dang file's been giving me problems all morning

[21:19] *** Khisanth joined
[21:20] *** rindolf joined
[21:20] <rindolf> IO::All!

[21:20] <rindolf> TimToady: here?

[21:20] <rindolf> audreyt: here?

[21:21] <rindolf> With all the hardware failures on the Perl NOC perhaps someone should shell them the money to get high-end hardware.

[21:22] <rindolf> For {perl,cpan}.org that is.

[21:24] *** avar joined
[21:30] <SageLT> Is ghc supported on intel macs? I just tried building some of my code for the first time on a Mac, and I get a slew of 'no such 386 instruction' errors, which would seem to be a problem targeting the processor. Is this a known bug? Is there a workaround?

[21:30] *** cjeris left
[21:30] <rindolf> SageLT: also try #haskell

[21:30] <SageLT> I was just looking for a good channel for haskell thanks

[21:31] <obra> SageLT: there's a build. hang on.

[21:31] <SageLT> Just figured with pugs being haskell based people might nkow here

[21:31] <obra> (audrey pointed me at it ;)

[21:31] <SageLT> obra: great!

[21:31] <rindolf> audreyt is using Mac, right?

[21:31] <rindolf> So does nothingmuch

[21:32] <rindolf> TimToady seems to have an IBM laptop.

[21:32] <obra> http://cvs.haskell.org/trac/ghc/wiki/X86OSXGhc

[21:32] <lambdabot> Title: X86OSXGhc - GHC - Trac

[21:32] <obra> That may be the right start

[21:32] <rindolf> But Perl runs on anything remotely UNIXy.

[21:32] <SageLT> obra: thanks

[21:33] <rindolf> "All the world is a VAX, and all the actors are Unixes."

[21:33] <obra> np.

[21:33] <rindolf> This day was pretty quiet on Freenode.

[21:34] <rindolf> Maybe it's Tisha B'av or something.

[21:34] <obra> SageLT: how's the hacking been going, anyway? TimToady says you're doing good work :)

[21:35] <SageLT> obra: Well, i hope I'm doing good work. I;m a but worried that I may not finish in time, but instead of worrying I'm working.

[21:35] <SageLT> Worrying would only slow me down more, might as well just work

[21:36] <obra> Indeed.

[21:37] <obra> I _have_ to ask: have you tried feeding the p5 generated version of pugs Test.pm in?

[21:37] <SageLT> With some code upgrades I'm about to push, I can at least partially translate about 98% of exising code, which a couple of annoying problems

[21:38] <SageLT> I haven't tried feeding testInit.pm to pugs in some time, but I think it's about ready, I'll try it again sometime soon

[21:39] <obra>   Thats' very cool

[21:40] <SageLT> I've haven't re-translated it in a while. It made a good first target since it's short enough to read through the yaml parse by hand, now I've been testing with a simple script that runs that translator across everything in t/op/ of perl5, with fairly good results.

[21:40] <obra> Very cool.

[21:46] <svnbot6> r11907 | fglock++ | pX/v6 - fixed 'Match' return object in some contexts

[21:51] *** cognominal joined
[22:06] *** lolage joined
[22:14] <mdiep> fglock: ping

[22:16] <clkao> greetings

[22:18] <mdiep> greetings, clkao. you're working on v6-alpha, yes?

[22:19] <mdiep> I'm looking for a bit of direction jumping in

[22:19] <mdiep> t/01-sanity seems to pass, but the first test after that seemed to hang when I ran it

[22:19] <clkao> i had been working on it. but not recently

[22:19] <mdiep> ah, okay

[22:19] <clkao> mdiep: which one?

[22:20] <rindolf> Hi clkao

[22:20] <SageLT> obra: I just tried installing the Mac haskell build you pointed me to, but when I try to run ghc or ghci it gives me an error about not finding a suitable version of /Library/Frameworks/Versions/A/GMP. Any clue what's up?

[22:20] <clkao> iirc they all pass for me last i tried

[22:20] <rindolf> clkao: how much time are you supposed to dedicate to svk?

[22:20] <clkao> does it hang or is it just slow?

[22:20] <clkao> rindolf: supposed? i decide that myself

[22:20] <rindolf> clkao: but you're employed to work on it.

[22:20] <clkao> mdiep: install cache::filecache

[22:20] <clkao> if it's just slow

[22:21] <rindolf> clkao: OK.

[22:21] <clkao> rindolf: yes, and i can employ people to work on it as well

[22:21] <mdiep> clkao: huh. it seems to be passing now. maybe it was just slow

[22:21] <clkao> mdiep: ok. try having the cache

[22:21] <rindolf> clkao: I'm now trying to get sponsorship, to do the random stuff I normally do.

[22:21] <clkao> maybe we should suggest that *strongly* in makefile.pl ;)

[22:21] <clkao> rindolf: like what? ;)

[22:22] <obra> SageLT: yeah. audrey talked me through this. hm.

[22:23] <obra> I don't actually remember how to fix it

[22:23] <SageLT> obra: if it's too much trouble, don't worry, I can just run an older ghci for now.

[22:23] <rindolf> clkao: http://www.shlomifish.org/

[22:23] <lambdabot> Title: Shlomi Fish' Homepage

[22:23] <obra> ok. likely audrey has a canonical doc somewhere. I'm sorry I don't have a good reference handy

[22:23] <SageLT> obra: no prob

[22:23] <mdiep> t/data_types/hash pretty much hangs my whole machine though

[22:24] <rindolf> clkao: thing is the things I work in at the job, while interesting are of no relevance to what I like to do.

[22:24] <mdiep> I'm really looking for tests that aren't passing atm but could be with a bit of work

[22:24] <clkao> you better find another job or live with it then

[22:24] <clkao> mdiep: oh ok.

[22:24] <clkao> mdiep: actually, in v6 the tests are copied if they are in manifest

[22:24] <clkao> but they are only in manifest if the test is passing.

[22:24] <rindolf> clkao: did you read http://shlomif.livejournal.com/11004.html

[22:24] <mdiep> ahh...

[22:24] <lambdabot> Title: shlomif: Patronage and Self-Patronage

[22:25] *** rashakil joined
[22:25] <clkao> so it's basically regression guardian

[22:25] <rindolf> clkao: that's why I'm trying to get a sponsorship.

[22:25] <clkao> mdiep: use util/prove6 for the pugs test suite itself

[22:25] <[particle]> hrmm, i'm getting v6.pm missing in @INC with util/prove6

[22:25] <clkao> imo, you don't _try_ to get sponsorship. they come around to you when people think it worths it

[22:26] <clkao> in the worst case you can move to mountain and live with no cost and StFUaWSC

[22:27] <clkao> sorry i might be cynical

[22:27] <rindolf> clkao: are you feeling alright?

[22:27] * [particle] wonders how those shirts came out

[22:27] <clkao> cant be better

[22:27] <rindolf> clkao: OK.

[22:27] <clkao> [particle]: try make build_perl5 first

[22:27] <clkao> [particle]: and/or perl util/src_to_blib

[22:28] <clkao> see my use.perl for instruction, i can't remember them all

[22:28] <[particle]> sure, i followed that

[22:28] <mdiep> clkao: make build_perl6? from pugs/?

[22:28] <rindolf> clkao: I also would like to publish two books.

[22:28] <mdiep> err, build_perl5

[22:28] <[particle]> i had it working before, then rebuilt

[22:28] <clkao> build_perl5 ;) from toplevel pugs tree

[22:28] <[particle]> now it's busted

[22:28] <rindolf> One with essays and one with funny stories.

[22:29] <clkao> [particle]: grr! i will take a look in a bit

[22:29] <[particle]> take your time, clkao

[22:29] <mdiep> but I can't use that makefile with install ghc :-)

[22:29] <clkao> [particle]: there's no v6 in blib6/pugs/perl5 ?

[22:29] <clkao> mdiep: someone on my journal make a script to avoid using the makefile requiring ghc

[22:30] <[particle]> ./lib, it's there

[22:30] <[particle]> yeah, the script is ./make_build_perl5 i think

[22:30] <[particle]> not windows friendly, but it's just a / vs \ prob

[22:31] <clkao> when you can easily fix provided you have a commit bit...

[22:31] <rindolf> Bleh! I hate these Israelis Jews that think it's acceptable for Israel to be constitutionally discriminatory.

[22:31] <rindolf> Or that it's the Land of the Jews.

[22:31] *** rdice joined
[22:31] <[particle]> clkao: sure, when i have cycles. i'm committed already :)

[22:32] <[particle]> currently working on a perl6 harness for sharing parrot's p6regex tests

[22:32] <clkao> [particle]: i already done that

[22:32] <[particle]> clkao: where?

[22:32] <clkao> [particle]: v6/t/regex.t

[22:32] <clkao> the harness is still in perl5. should be ported to perl6

[22:32] <[particle]> that's what i'm doing

[22:33] *** Khisanth joined
[22:33] <clkao> excellent

[22:33] <[particle]> perl6 harness means written in perl 6

[22:33] <[particle]> :)

[22:33] <[particle]> i don't see a v6/t/regex.t

[22:34] <clkao> Pugs-Compiler-Perl6/t/

[22:34] <clkao> sorry my eyes skipped the 'perl6' ;)

[22:34] <[particle]> np

[22:34] <[particle]> pugs is a huge somewhat disorganized (to me) project, so it takes me a while to find what i'm looking for

[22:35] <clkao> if only we have a source code index engine....

[22:35] <[particle]> krugle? :)

[22:35] *** weinig is now known as weinig|away

[22:35] <clkao> Enter Kasago

[22:35] <mdiep> lxr?

[22:36] <clkao> Kasago is on CPAN

[22:39] <mdiep> util/prove6 has "#!/bin/perl". ew.

[22:40] <clkao> uhm i didnt do it. it started as a shell script just running perl with some env

[22:46] <svnbot6> r11908 | Sage++ | Fixed code that resulted in errors when head was called on an empty list, along with other sanity checks.

[22:46] <svnbot6> r11908 | Sage++ | Revisions to regex handling, both in the general case and count modifiers. Regex errors also now give more informative error messages.

[22:46] <svnbot6> r11908 | Sage++ | With these fixes, 95%+ of perl5 t/op is handeled, with the only remaining errors being in parsing: a couple of regex problems and a very infuriating general error that I haven't been able to track down.

[22:53] <SageLT> audreyt: you around?

[23:04] <[particle]> what the heck did $@ become in p6?

[23:04] <[particle]> i can't find it in the synopses

[23:05] <clkao> $!

[23:05] <clkao> always $!

[23:06] <clkao> $? $@ and $! are all $

[23:06] <clkao> $!

[23:06] <[particle]> great, i wasn't sure which one it always was

[23:14] <clkao> $? for system $@ for eval and $! for builtins

[23:14] <clkao> all confusing

[23:14] <[particle]> ok( ! $! ?& $match, $description ); $! and diag $!; # :)

[23:20] <clkao> excuse me, are you cursing?

[23:21] <[particle]> perl6 is a vulgar language :)

[23:22] *** _mago joined
[23:23] <[particle]> think this incantation will work?...

[23:23] <[particle]> sub p6rule_is( $target, $pattern, $description?, :%todo ) {

[23:23] <[particle]>     my $match = $target ~~ /$pattern/;

[23:23] <[particle]>     ok( ! $! ?& $match, $description );

[23:23] <[particle]>     $! and diag $!;

[23:23] <[particle]> }

[23:24] <[particle]> i should add %todo to the end of ok() there

[23:24] <[particle]> heck, i guess i could use like() instead of ok

[23:25] <clkao> might be, i am guess the current v6 should already suppor tthose.  not sure about ?&

[23:25] <[particle]> like( $target, $pattern, $desc...)

[23:25] <[particle]> ?& is easy to write, if it doesn't support it.

[23:25] <lambdabot> Maybe you meant: . v

[23:26] <[particle]> lambdabot: bite me

[23:26] <clkao> yep. i was going to suggest like. but iirc there's something about checking the match as well.

[23:26] <[particle]> well, i can leave it as is for now

[23:27] <clkao> commit it somewhere and lets see if it works?

[23:27] <[particle]> it's a good start, and once i get v6 working , i can test it

[23:27] <[particle]> hrmm, ok

[23:31] <[particle]> 11909: t/p6regex/p6regex.t

[23:31] <svnbot6> r11909 | particle++ | [t]: beginning of a perl6 test harness for parrot's p6regex tests

[23:46] <svnbot6> r11910 | particle++ | [t]: p6regex adds and changes, still not passing tests

[23:52] <clkao> rx// is the same as // right?

[23:52] <[particle]> i think so

[23:53] <[particle]> i'm getting no such sub &p6rule_is ... with the haskell backend

[23:54] <[particle]> perhaps it doesn't like the named / optional params

[23:57] <clkao> (!)

