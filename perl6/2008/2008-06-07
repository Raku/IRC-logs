[00:04] *** Limbic_Region joined
[00:16] *** xinming joined
[00:21] *** jjore is now known as zz_jjore

[00:21] *** zz_jjore is now known as jjore

[00:26] *** cjfields joined
[00:27] *** cjfields left
[00:31] <pugs_svnbot> r20692 | diakopter++ | [yap6]

[00:31] <pugs_svnbot> r20692 | diakopter++ | added some S12 syntax features; more to come.x

[00:32] *** xinming_ left
[00:46] <pugs_svnbot> r20693 | diakopter++ | [yap6]

[00:46] <pugs_svnbot> r20693 | diakopter++ | declare all the stuff I just added...

[00:50] <diakopter> yap6: say 32; my $gdaasfd = multi sub (Int $sdf: $foo, $bar) { say 9880 }

[00:50] <exp_evalbot> OUTPUT[Parse successful␤]

[00:51] <diakopter> yap6: say 32; my $gdaasfd = multi sub (Int $sdf: $foo; $bar) { say 9880 }

[00:51] <exp_evalbot> OUTPUT[Parse successful␤]

[00:51] <diakopter> yap6: say 32; my $gdaasfd = multi sub (Int $sdf: $foo; $bar) { has something ; say 9880 }

[00:51] <exp_evalbot> OUTPUT[Parse successful␤]

[00:51] *** Limbic_Region left
[00:52] <diakopter> yap6: say 32; my $gdaasfd = -> Int $whole, $another,,,,,$someoneElse { has something ; say 9880 }

[00:52] <exp_evalbot> OUTPUT[  Syntax Error near: ">"]

[00:52] <diakopter> yap6: say 32; my $gdaasfd = <- Int $whole, $another,,,,,$someoneElse { has something ; say 9880 }

[00:52] <exp_evalbot> OUTPUT[  Syntax Error near: "<"]

[01:11] *** Maghnus left
[01:26] *** bacek left
[01:26] *** Ched- left
[01:27] *** Ched- joined
[01:31] *** jhorwitz left
[03:04] *** Lorn joined
[03:26] *** Maghnus joined
[03:27] *** nipotan is now known as nipotaway

[03:41] *** eternaleye left
[03:42] *** alester joined
[03:43] *** eternaleye joined
[03:45] *** alanhaggai joined
[03:54] *** alanhaggai__ joined
[03:56] *** alanhaggai_ left
[04:00] *** olmazeg left
[04:08] <pmichaud> Is C<pop> a named unary?

[04:08] <pmichaud> (also C<shift>)

[04:09] *** alanhaggai left
[04:18] <rakudo_svn> r28160 | pmichaud++ | [rakudo]:

[04:18] <rakudo_svn> r28160 | pmichaud++ | * In scalar assignment, only call .item() on those objects that support it.

[04:18] *** bacek joined
[04:20] *** meppl joined
[04:31] <rakudo_svn> r28161 | pmichaud++ | [rakudo]:

[04:31] <rakudo_svn> r28161 | pmichaud++ | * Add t/S29-list/grep.t to spectest_regression (bacek++)

[04:46] *** eternaleye left
[05:03] *** xinming_ joined
[05:08] *** eternaleye joined
[05:19] *** xinming left
[05:20] *** alanhaggai_ joined
[05:23] <diakopter> heh.  theoretically yap6's parser generator system could emit one gigantic capturing regular expression

[05:31] *** sri_work joined
[05:31] <rakudo_svn> r28162 | pmichaud++ | [rakudo]:

[05:31] <rakudo_svn> r28162 | pmichaud++ | * Rework handling of named unaries a bit.

[05:34] *** alanhaggai__ left
[06:07] <bacek> perl6: my Bool $a=1; my Bool $b=0; say $a xor $b;

[06:07] <pugs_svnbot> r20694 | pmichaud++ | S29-num/abs.t:

[06:07] <pugs_svnbot> r20694 | pmichaud++ | * Unmark two tests as skip (rakudo now understands prefix WHAT)

[06:07] <pugs_svnbot> r20694 | pmichaud++ | * improve skip messages for remaining tests

[06:07] <exp_evalbot> kp6 r20693: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824c004)', 'APPLY', 'HASH(0x8e52594)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[06:07] <exp_evalbot> ..main::DISPATCH('HASH(0x824c004)', 'APPLY', 'HASH(0x8e52594)') ca...

[06:07] <exp_evalbot> ..pugs: OUTPUT[1␤]

[06:07] <exp_evalbot> ..rakudo r28162: OUTPUT[init_pmc() not implemented in class 'ResizableBooleanArray'␤current instr.: 'parrot;P6metaclass;get_parrotclass' pc 750 (runtime/parrot/library/P6object.pir:462)␤

[06:07] <exp_evalbot> ..elf r20693: OUTPUT[1␤]

[06:07] <bacek> time to realclean rakudo in evalbot...

[06:07] <pmichaud> ....resizableboolean array?  what's up with that?

[06:08] <bacek> pmichaud, miscompile after removing Version pmc

[06:08] <bacek> > my Bool $a=1; my Bool $b=0; say $a xor $b;

[06:08] <lambdabot>  Parse error at "=1;" (column 11)

[06:08] <bacek> Type check failed

[06:09] <bacek> I've got this in my checkout...

[06:09] <pmichaud> yes, because 1 and 0 aren't booleans.  :-)

[06:10] <bacek> yes...

[06:11] <bacek> i triggered some very odd rakudo bug during righting test for Test.pm... I fails randomly.

[06:13] <bacek> perl6:  my $a=1; my Int $b=1; say $a xor $b;

[06:14] <exp_evalbot> kp6 r20694: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824c004)', 'APPLY', 'HASH(0x8e52594)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[06:14] <exp_evalbot> ..main::DISPATCH('HASH(0x824c004)', 'APPLY', 'HASH(0x8e52594)') ca...

[06:14] <exp_evalbot> ..pugs: OUTPUT[1␤]

[06:14] <exp_evalbot> ..rakudo r28162: OUTPUT[init_pmc() not implemented in class 'ResizableBooleanArray'␤current instr.: 'parrot;P6metaclass;get_parrotclass' pc 750 (runtime/parrot/library/P6object.pir:462)␤

[06:14] <exp_evalbot> ..elf r20694: OUTPUT[␤]

[06:14] <pmichaud> evalbot is going to have trouble with rakudo until parrot gets rebuilt.

[06:15] <bacek> pmichaud, can you check ' my $a=1; my Int $b=1; say 'res="' ~ $a xor $b ~'"';' in your version?

[06:15] <bacek> i've got no output at all...

[06:15] <pmichaud> > my $a=1; my Int $b=1; say $a xor $b;

[06:15] <lambdabot>  Parse error at "=1;" (column 6)

[06:15] <pmichaud>  

[06:15] <pmichaud> >

[06:15] *** alester left
[06:15] <bacek> looks like another bug...

[06:15] <pmichaud> well, perhaps not, since $a xor $b is false.

[06:16] <bacek>  say 'res="' ~ $a xor $b ~'"';

[06:16] <bacek> ok. My fault. I forgot parentises.

[06:16] <bacek> But why false is empty string???

[06:17] <pmichaud> note that C<xor> is not a boolean operator.

[06:17] <pmichaud> i.e., it doesn't return a Bool (unless its arguments are Bools)

[06:18] <pmichaud> so $a xor $b returns undef.

[06:18] <pmichaud> (which stringifies to '')

[06:19] <bacek> yak...

[06:22] <bacek> time to realclean my rakudo...

[06:22] *** Psyche^ joined
[06:30] *** acmoore_ joined
[06:33] *** vixey left
[06:38] *** acmoore left
[06:39] *** Patterner left
[06:39] *** Psyche^ is now known as Patterner

[06:41] *** justatheory left
[07:07] *** nipotaway is now known as nipotan

[07:10] <moritz_> rakudo: say "Good morning"

[07:10] <exp_evalbot> rakudo r28162 OUTPUT[init_pmc() not implemented in class 'ResizableBooleanArray'␤current instr.: 'parrot;P6metaclass;get_parrotclass' pc 750 (runtime/parrot/library/P6object.pir:462)␤

[07:10] <rakudo_svn> r28163 | pmichaud++ | [rakudo]:

[07:10] <rakudo_svn> r28163 | pmichaud++ | * Make C<pop> and C<shift> into named unaries.

[07:13] <pugs_svnbot> r20695 | pmichaud++ | S29-array/shift.t, S29-array/pop.t:

[07:13] <pugs_svnbot> r20695 | pmichaud++ | * Remove some more #?rakudo skip lines

[07:13] <pugs_svnbot> r20695 | pmichaud++ | * Remove some trailing spaces

[07:14] <pugs_svnbot> r20696 | diakopter++ | [yap6]

[07:14] <pugs_svnbot> r20696 | diakopter++ | Added whitespace detection

[07:14] <pugs_svnbot> r20696 | diakopter++ | Added the through() function, which generates a parser

[07:14] <pugs_svnbot> r20696 | diakopter++ | that slurps stuff up until and including a match on another parser.

[07:14] <pugs_svnbot> r20696 | diakopter++ | Changed some of the core routines to optionally enforce no whitespace.

[07:14] <pugs_svnbot> r20696 | diakopter++ | Trying to find a syntax error in STD_hand.pm; commiting its current

[07:14] <pugs_svnbot> r20696 | diakopter++ | state so that I can diagnose using the html diff.

[07:17] *** c9s left
[07:20] <diakopter> well, I can't find my syntax error in STD_hand.pm.  Tomorrow.

[07:27] *** iblechbot joined
[07:34] <bacek> rakudo: say 'hi'

[07:34] <exp_evalbot> rakudo r28163 OUTPUT[init_pmc() not implemented in class 'ResizableBooleanArray'␤current instr.: 'parrot;P6metaclass;get_parrotclass' pc 750 (runtime/parrot/library/P6object.pir:462)␤

[07:34] <bacek> anyone, please, make realclean evalbot.

[07:35] <moritz_> *rebuilding*

[07:35] <bacek> moritz_, thanks

[07:41] <moritz_> rakudo: say "hi"

[07:41] <exp_evalbot> rakudo r28163 OUTPUT[init_pmc() not implemented in class 'ResizableBooleanArray'␤current instr.: 'parrot;P6metaclass;get_parrotclass' pc 750 (runtime/parrot/library/P6object.pir:462)␤

[07:42] <moritz_> b0rked

[07:42] <moritz_> after a 'make realclean' in parrot

[07:42] <moritz_> trying again

[07:46] * moritz_ just found a segfault in parrot

[07:46] <moritz_>  sub a { 1 }; &a = sub { 2 }; a()

[07:50] *** alanhaggai_ is now known as alanhaggai

[08:13] *** alanhaggai left
[08:34] <moritz_> rakudo: say "Hi"

[08:34] <exp_evalbot> rakudo r28164 OUTPUT[Hi␤]

[08:35] <moritz_> finally ;)

[08:43] <bacek> moritz++

[08:44] *** nipotan is now known as nipotaway

[08:55] *** xinming_ left
[08:55] *** xinming joined
[08:56] <bacek> perl6: eval('die'); say (defined $!) xor Bool::True;

[08:56] <exp_evalbot> kp6 r20696: OUTPUT[syntax error at position 17, line 1 column 17:␤eval('die'); say (defined $!) xor Bool::True␤                 ^ HERE␤]

[08:56] <exp_evalbot> ..pugs: OUTPUT[1␤]

[08:56] <exp_evalbot> ..rakudo r28164: OUTPUT[␤]

[08:56] <exp_evalbot> ..elf r20696: OUTPUT[ at (eval 16) line 3␤ at ./elf_f_faster line 243␤␤]

[08:57] <bacek> gotcha!

[08:57] <bacek> perl6: eval('die'); say (defined $!) xor 1;

[08:58] <exp_evalbot> kp6 r20696: OUTPUT[syntax error at position 17, line 1 column 17:␤eval('die'); say (defined $!) xor 1␤                 ^ HERE␤]

[08:58] <exp_evalbot> ..pugs: OUTPUT[1␤]

[08:58] <exp_evalbot> ..rakudo r28164: OUTPUT[␤]

[08:58] <exp_evalbot> ..elf r20696: OUTPUT[ at (eval 16) line 3␤ at ./elf_f_faster line 243␤␤]

[08:59] <bacek> perl6: try { die }; say (defined $!) xor Bool::True;

[08:59] <exp_evalbot> kp6 r20696: OUTPUT[syntax error at position 17, line 1 column 17:␤try { die }; say (defined $!) xor Bool::True␤                 ^ HERE␤]

[08:59] <exp_evalbot> ..pugs: OUTPUT[1␤]

[08:59] <exp_evalbot> ..rakudo r28164: OUTPUT[␤]

[08:59] <exp_evalbot> ..elf r20696: OUTPUT[␤]

[09:02] *** alanhaggai joined
[09:05] <bacek> rakudo: try{die}; say defined $!; say (defined $!) xor Bool::True;

[09:05] <exp_evalbot> rakudo r28164 OUTPUT[1␤␤]

[09:38] <bacek> rakudo: say (0+(defined $!)) xor 1;

[09:38] <exp_evalbot> rakudo r28164 OUTPUT[1␤]

[09:38] <bacek> rakudo: say (defined $!) xor 1;

[09:38] <exp_evalbot> rakudo r28164 OUTPUT[1␤]

[09:38] <bacek> rakudo: try{die}; say defined $!;

[09:38] <exp_evalbot> rakudo r28164 OUTPUT[1␤]

[09:39] <bacek> rakudo: try{die}; say defined $!; say (defined $!) xor 1;

[09:39] <exp_evalbot> rakudo r28164 OUTPUT[1␤␤]

[09:40] <bacek> rakudo: try{die}; say (defined $!) xor 1;

[09:40] <exp_evalbot> rakudo r28164 OUTPUT[␤]

[09:42] <bacek> rakudo: try{1;}; say (defined $!) xor 1;

[09:42] <exp_evalbot> rakudo r28164 OUTPUT[1␤]

[09:47] <moritz_> rakudo: try { die 1; }; say defined $!

[09:47] <exp_evalbot> rakudo r28164 OUTPUT[1␤]

[09:47] <moritz_> rakudo: try { 1; }; say defined $!

[09:47] <exp_evalbot> rakudo r28164 OUTPUT[0␤]

[09:48] *** kane_ left
[09:54] *** jan left
[09:55] *** Ched- left
[09:57] *** Ched- joined
[10:01] *** barney joined
[10:05] *** meppl left
[11:01] *** jan_ joined
[11:15] *** alanhaggai left
[11:24] *** alanhaggai joined
[11:44] *** alanhaggai_ joined
[11:51] *** acmoore_ is now known as acmoore

[11:54] *** icwiener joined
[11:56] *** alanhaggai left
[11:59] *** dominiko joined
[12:04] *** dominiko left
[12:44] *** alanhaggai_ left
[12:45] *** perl7 joined
[12:46] *** alanhaggai joined
[13:05] *** mjk joined
[13:13] <diakopter> cool; memoize-ing the parser generator functions sped that up a lot.

[13:14] <diakopter> , subjectively appraised

[13:14] *** alester joined
[13:15] *** iblechbot left
[13:21] *** meppl joined
[13:22] *** alester left
[13:25] *** dominiko joined
[13:28] *** iblechbot joined
[13:30] <perl7> congrats!

[13:35] *** perl7 left
[13:37] <diakopter> #perl helped

[13:47] <cognominal_> what is the equivalent convention for yadayadayada in regex. Cuz  ... is meaninful in regex.  Shoudl I use <...>?

[13:47] <diakopter> heck if I know... sorry

[13:48] <cognominal_> I want something that is a placeholder that parses but fails if someone paste it.

[13:55] *** masak joined
[14:00] <pmichaud> {...}

[14:01] <cognominal_> ya that what I am coming with in the mail I prepare to perl6-language  :)

[14:25] *** zev left
[14:30] *** [1]Maghnus joined
[14:32] *** Lorn left
[14:36] <masak> moritz_: re http://perlgeek.de/en/article/mutable-grammar-for-perl-6

[14:36] <lambdabot> Title: article | A Mutable Grammar For Perl 6

[14:36] <masak> I have now read it, and found it enjoyable

[14:37] <masak> (it took a while, because my browser tab queue has grown into the hundreds during the final spring exams)

[14:38] <masak> I think I found a spelling error in "<term> [ <operator> term>"

[14:38] <masak> seems to me the "[" should really be a "|"

[14:44] <masak> so, what is this Auzon fellow working on?

[14:44] <diakopter> masak: http://www.brokd.com/psoc08/

[14:44] <lambdabot> Title: Planet Perl Summer of Code 2008

[14:45] <diakopter> masak: oops I mean http://auzon.blogspot.com/

[14:45] <lambdabot> Title: Auzon's Blog

[14:45] <pugs_svnbot> r20697 | ruoso++ | [smop] braga hacking! Better division between Object/Meta/REPR in src-s1p. src-s1p/P6Meta.pm implements, in Perl 6, the default Perl 6 Metaclass for SMOP.

[14:46] <masak> diakopter: cool, thanks

[14:46] *** mjk left
[14:46] *** drbean left
[14:46] *** Maghnus left
[14:46] *** [1]Maghnus is now known as Maghnus

[14:51] *** drbean joined
[14:52] <diakopter> based on my limited understanding, if you do longest-token matching in a recursive descent parser, it effectively is a bottom-up parser

[15:14] *** dominiko left
[15:18] <pugs_svnbot> r20698 | pmichaud++ | S29-num/roots.t:  pointy block parameters don't need 'my'

[15:31] *** icwiener left
[15:34] *** justatheory joined
[15:40] *** chris2 joined
[15:44] *** cognominal_ left
[15:49] *** icwiener joined
[16:02] *** nothingmuch left
[16:02] *** alanhaggai left
[16:24] *** Lorn joined
[16:32] *** alester joined
[16:34] *** alanhaggai joined
[16:42] *** ruoso joined
[16:43] *** alester left
[16:47] *** nothingmuch joined
[16:47] *** nothingmuch left
[16:49] *** iblechbot left
[16:54] *** nothingmuch joined
[16:55] * ruoso implementing $obj.^isa

[16:56] <ruoso> Is "$superclass.WHAT === $candidate" the correct way of checking if $object.^isa($candidate)?

[16:57] *** nothingmuch left
[17:03] <pmichaud> ruoso: what about super-superclass?

[17:04] <ruoso> pmichaud, I meant recursively

[17:04] <ruoso> doing that test 

[17:04] <ruoso> but the question is if it should be === test

[17:04] <ruoso> or if it should be something else

[17:08] *** nothingmuch joined
[17:08] <pugs_svnbot> r20699 | ruoso++ | [smop] More P6Meta.pm code.

[17:09] *** nothingmuch left
[17:10] *** nothingmuch joined
[17:11] <ruoso> quick survey... should I keep or remove the restriction on calling BUILDALL on objects with definitions? This exists for the sole pourpose of avoiding the user from making Object defined...

[17:20] *** khisanth_ joined
[17:20] *** khisanth_ left
[17:22] *** Auzon joined
[17:26] <Auzon> pugs: <a b c d>.pick(*).perl.say

[17:26] <exp_evalbot> OUTPUT[("d", "b", "c", "a")␤]

[17:26] <Auzon> pugs: say <a b c d>.pick(*) eq a&b&c&d

[17:26] <exp_evalbot> OUTPUT[*** No such subroutine: "&a"␤    at /tmp/tcYXqErtqx line 1, column 5 - line 2, column 1␤]

[17:26] <Auzon> pugs: say <a b c d>.pick(*) eq all <a b c d>

[17:26] <exp_evalbot> OUTPUT[all(VBool False)␤]

[17:27] <Auzon> pugs: say <a b c d>.pick(*) eq any <a b c d>

[17:27] <exp_evalbot> OUTPUT[any(VBool False)␤]

[17:27] <Auzon> perl6: say <a b c d>.pick(*).perl

[17:27] <exp_evalbot> kp6 r20699: OUTPUT[syntax error at position 18, line 1 column 18:␤say <a b c d>.pick(*).per␤                  ^ HERE␤]

[17:27] <exp_evalbot> ..pugs: OUTPUT[("d", "a", "b", "c")␤]

[17:27] <exp_evalbot> ..rakudo r28165: OUTPUT[Method 'pick' not found for invocant of class 'List'␤current instr.: '_block11' pc 76 (EVAL_12:26)␤

[17:27] <exp_evalbot> ..elf r20699: OUTPUT[Undefined subroutine &GLOBAL::whatever called at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[17:28] <Auzon> pugs: say <a b c d>.pick(*).sort === <a b c d>

[17:28] <exp_evalbot> OUTPUT[1␤]

[17:33] *** Blasi left
[17:33] *** bbkr_ left
[17:38] <pmichaud> how is 1+6i parsed?  (specifically, the '6i' part?)

[17:38] *** bbkr_ joined
[17:40] <pmichaud> ah, found it.

[17:40] <pmichaud> token postfix:sym<i> ( --> Autoincrement)

[17:43] *** cognominal_ joined
[17:51] *** ruoso left
[17:54] *** icwiener_ joined
[17:54] *** ruoso joined
[17:58] *** chris2 left
[18:04] *** alanhaggai left
[18:07] *** icwiener left
[18:07] *** alester joined
[18:09] *** masak left
[18:11] *** icwiener_ is now known as icwiener

[18:16] *** sri_work_ joined
[18:16] *** sri_work left
[18:21] *** jedai joined
[18:29] *** xinming_ joined
[18:34] *** viklund` joined
[18:34] *** sri_work_ left
[18:34] *** nothingmuch left
[18:34] *** Patterner left
[18:34] *** eternaleye left
[18:34] *** agentzh left
[18:34] *** hcchien left
[18:34] *** yahooooo left
[18:34] *** Khisanth left
[18:34] *** cls_bsd left
[18:34] *** zostay left
[18:34] *** ingy left
[18:34] *** viklund left
[18:35] *** eternaleye joined
[18:37] *** Psyche^ joined
[18:37] *** Psyche^ is now known as Patterner

[18:37] *** cls_bsd joined
[18:37] *** zostay joined
[18:38] *** hcchien joined
[18:39] *** ingy joined
[18:42] *** sri_work joined
[18:42] *** yahooooo joined
[18:44] *** icwiener left
[18:44] *** cls_bsd left
[18:44] *** agentzh joined
[18:44] *** cls_bsd joined
[18:44] *** cls_bsd_ joined
[18:45] *** cls_bsd left
[18:46] *** nothingmuch joined
[18:46] *** xinming left
[18:51] *** nothingmuch left
[18:51] *** agentzh left
[18:52] *** sri_work left
[18:53] *** sri_work joined
[18:53] <pasteling> "nothingmuch" at 82.154.140.37 pasted "class Dog meta OtherMeta.new(" (19 lines, 357B) at http://sial.org/pbot/31235

[18:54] <pugs_svnbot> r20700 | Auzon++ | [gsoc_spectest] added tests for pick(*). (Added 2 tests)

[18:56] *** nothingmuch joined
[18:56] *** agentzh joined
[18:56] *** nothingmuch left
[18:59] *** sri_work left
[19:00] *** sri_work joined
[19:00] *** nothingmuch joined
[19:04] <pasteling> "ruoso" at 82.154.140.37 pasted "Meta syntax example" (3 lines, 141B) at http://sial.org/pbot/31236

[19:07] *** jedai left
[19:07] *** Khisanth joined
[19:19] *** nothingmuch left
[19:19] *** agentzh left
[19:21] <ruoso> TimToady, nothingmuch just convinced me that we need to keep the meta-object to support meta-meta-classes (like the example I've just pasted)

[19:22] <ruoso> which means that the metamethods need two invocants.... :)

[19:22] <ruoso> or... 

[19:22] <ruoso> an invocant, and a meta-invocant

[19:22] <ruoso> we actually came to an idea of having a capture and a meta-capture

[19:25] *** nothingmuch joined
[19:25] *** agentzh joined
[19:26] *** nothingmuch left
[19:27] *** nothingmuch joined
[19:29] <ruoso> for now, we'll assume that this will always be enclosed by a more complex dispatching process that might set some context variables...

[19:29] <ruoso> but that needs to be better thought...

[19:31] *** exp_evalbot left
[19:31] *** fser left
[19:31] *** yves left
[19:31] *** shachaf left
[19:31] *** awwaiid left
[19:31] *** joejaxx left
[19:31] *** spinclad left
[19:31] *** ilbot2 left
[19:31] *** pmichaud left
[19:31] *** pasteling left
[19:31] *** exp_evalbot joined
[19:31] *** fser joined
[19:31] *** ilbot2 joined
[19:31] *** pasteling joined
[19:31] *** pmichaud joined
[19:31] *** shachaf joined
[19:31] *** yves joined
[19:31] *** awwaiid joined
[19:31] *** joejaxx joined
[19:31] *** spinclad joined
[19:34] *** TreyHarris is now known as TreyOld

[19:34] *** TreyHarris joined
[19:34] *** TreyHarris left
[19:34] *** TreyHarris joined
[19:36] *** TreyOld left
[19:43] *** cls_bsd_ left
[19:43] *** eternaleye left
[19:43] *** viklund` left
[19:43] *** bbkr_ left
[19:43] *** Auzon left
[19:43] *** Lorn left
[19:43] *** barney left
[19:43] *** jferrero left
[19:43] *** dalek left
[19:43] *** diakopter left
[19:43] *** qmole left
[19:43] *** kolibrie left
[19:43] *** PerlJam left
[19:43] *** meteorjay left
[19:43] *** perlbot left
[19:43] *** TimToady left
[19:43] *** gugod left
[19:44] *** TimToady joined
[19:44] *** cls_bsd_ joined
[19:44] *** eternaleye joined
[19:44] *** viklund` joined
[19:44] *** bbkr_ joined
[19:44] *** Auzon joined
[19:44] *** Lorn joined
[19:44] *** barney joined
[19:44] *** jferrero joined
[19:44] *** dalek joined
[19:44] *** kolibrie joined
[19:44] *** qmole joined
[19:44] *** meteorjay joined
[19:44] *** gugod joined
[19:44] *** PerlJam joined
[19:44] *** diakopter joined
[19:44] *** perlbot joined
[19:44] *** irc.freenode.net sets mode: +o TimToady

[19:46] *** qmole left
[19:46] *** barney left
[19:46] *** bbkr_ left
[19:46] *** diakopter left
[19:46] *** kolibrie left
[19:46] *** meteorjay left
[19:46] *** PerlJam left
[19:46] *** Lorn left
[19:46] *** cls_bsd_ left
[19:46] *** perlbot left
[19:46] *** eternaleye left
[19:46] *** TimToady left
[19:46] *** Auzon left
[19:46] *** viklund` left
[19:46] *** gugod left
[19:46] *** dalek left
[19:46] *** jferrero left
[19:49] *** TimToady joined
[19:49] *** cls_bsd_ joined
[19:49] *** eternaleye joined
[19:49] *** viklund` joined
[19:49] *** bbkr_ joined
[19:49] *** Auzon joined
[19:49] *** Lorn joined
[19:49] *** barney joined
[19:49] *** jferrero joined
[19:49] *** dalek joined
[19:49] *** kolibrie joined
[19:49] *** qmole joined
[19:49] *** meteorjay joined
[19:49] *** gugod joined
[19:49] *** PerlJam joined
[19:49] *** diakopter joined
[19:49] *** perlbot joined
[19:49] *** irc.freenode.net sets mode: +o TimToady

[19:49] *** alester left
[19:51] <pugs_svnbot> r20701 | ruoso++ | [smop] P6Meta apparently written, we need a lot of features to run it tho...

[19:52] *** Maghnus left
[19:54] *** qmole left
[19:54] *** barney left
[19:54] *** bbkr_ left
[19:54] *** diakopter left
[19:54] *** kolibrie left
[19:54] *** meteorjay left
[19:54] *** PerlJam left
[19:54] *** Lorn left
[19:54] *** cls_bsd_ left
[19:54] *** perlbot left
[19:54] *** eternaleye left
[19:54] *** TimToady left
[19:54] *** Auzon left
[19:54] *** viklund` left
[19:54] *** gugod left
[19:54] *** dalek left
[19:54] *** jferrero left
[19:55] *** TimToady joined
[19:55] *** cls_bsd_ joined
[19:55] *** eternaleye joined
[19:55] *** viklund` joined
[19:55] *** bbkr_ joined
[19:55] *** Auzon joined
[19:55] *** Lorn joined
[19:55] *** barney joined
[19:55] *** jferrero joined
[19:55] *** dalek joined
[19:55] *** kolibrie joined
[19:55] *** qmole joined
[19:55] *** meteorjay joined
[19:55] *** gugod joined
[19:55] *** PerlJam joined
[19:55] *** diakopter joined
[19:55] *** perlbot joined
[19:55] *** irc.freenode.net sets mode: +o TimToady

[19:57] *** lichtkind joined
[19:57] <pugs_svnbot> r20702 | Auzon++ | [gsoc_spectest] tabs to spaces.

[19:57] <pugs_svnbot> r20703 | ruoso++ | [smop] P6Meta is a class, its declaration is as if it was going to be used normally, it is the invocation that is different

[19:59] *** dominiko joined
[20:00] <ruoso> pugs: my $a = \(1: 2,3,4); sub foo ($invocant: ($inner_invocant: $p1, $p2, $p3)) { say $invocant, $inner_invocant }; foo('a', $a)

[20:00] <exp_evalbot> OUTPUT[*** ␤    Unexpected "($"␤    expecting formal parameter or ")"␤    at /tmp/e4bRRQ2NzG line 1, column 42␤]

[20:01] *** qmole left
[20:01] *** barney left
[20:01] *** bbkr_ left
[20:01] *** diakopter left
[20:01] *** kolibrie left
[20:01] *** meteorjay left
[20:01] *** PerlJam left
[20:01] *** Lorn left
[20:01] *** cls_bsd_ left
[20:01] *** perlbot left
[20:01] *** eternaleye left
[20:01] *** TimToady left
[20:01] *** Auzon left
[20:01] *** viklund` left
[20:01] *** gugod left
[20:01] *** dalek left
[20:01] *** jferrero left
[20:01] <ruoso> pugs: my $a = \(1: 2,3,4); sub foo ($invocant: |($inner_invocant: $p1, $p2, $p3)) { say $invocant, $inner_invocant }; foo('a', $a)

[20:01] <exp_evalbot> OUTPUT[*** ␤    Unexpected "|($"␤    expecting ":", "*", parameter name or ")"␤    at /tmp/BnKjoBRejO line 1, column 42␤]

[20:01] <ruoso> pugs: my $a = \(1: 2,3,4); sub foo ($invocant: :($inner_invocant: $p1, $p2, $p3)) { say $invocant, $inner_invocant }; foo('a', $a)

[20:01] <exp_evalbot> OUTPUT[*** ␤    Unexpected "($"␤    expecting space or ")"␤    at /tmp/Fa5fMS0qDx line 1, column 43␤]

[20:01] *** TimToady joined
[20:01] *** cls_bsd_ joined
[20:01] *** eternaleye joined
[20:01] *** viklund` joined
[20:01] *** bbkr_ joined
[20:01] *** Auzon joined
[20:01] *** Lorn joined
[20:01] *** barney joined
[20:01] *** jferrero joined
[20:01] *** dalek joined
[20:01] *** kolibrie joined
[20:01] *** qmole joined
[20:01] *** meteorjay joined
[20:01] *** gugod joined
[20:01] *** PerlJam joined
[20:01] *** diakopter joined
[20:01] *** perlbot joined
[20:01] *** irc.freenode.net sets mode: +o TimToady

[20:01] <ruoso> pugs: my $a = \(1: 2,3,4); sub foo ($invocant: ($inner_invocant: $p1, $p2, $p3)) { say $invocant, $inner_invocant }; foo('a', $a)

[20:01] <exp_evalbot> OUTPUT[*** ␤    Unexpected "($"␤    expecting formal parameter or ")"␤    at /tmp/hEHsJ5qwW8 line 1, column 42␤]

[20:02] <ruoso> hrm...

[20:03] *** barney left
[20:03] <ruoso> pugs: my $a = \(1: 2,3,4); sub foo ($invocant: $inner_invocant) { say $invocant, $inner_invocant }; foo('a', $a)

[20:03] <exp_evalbot> OUTPUT[*** Missing invocant parameters in '&foo': 0 received, 1 missing␤    at /tmp/f5JSPhmXu6 line 1, column 95 - line 2, column 1␤]

[20:04] <ruoso> pugs: my $a = \(1: 2,3,4); sub foo ($invocant: $inner_invocant) { say $invocant, $inner_invocant }; foo('a': $a)

[20:04] <exp_evalbot> OUTPUT[aCaptMeth {c_invocant = IFinite 1, c_feeds = [:MkFeed {f_positionals = [:IFinite 2,IFinite 3,IFinite 4:], f_nameds = fromList []}:]}␤]

[20:06] <ruoso> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: $p1, $p2, $p3) { say $invocant }}; Foo.new.foo('a': $a)

[20:06] <exp_evalbot> OUTPUT[*** ␤    Unexpected end of input␤    expecting ":"␤    Only one invocant allowed␤    at /tmp/TYswmm01J0 line 1, column 112␤]

[20:06] <ruoso> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: $p1, $p2, $p3) { say $invocant }}; Foo.new.foo($a)

[20:06] <exp_evalbot> OUTPUT[*** No such method in class Foo: "&foo"␤    at /tmp/Lz67WjcFAt line 1, column 92 - line 2, column 1␤]

[20:08] <ruoso> pugs: my $a = \(1: 2,3,4); class Foo { method foo ([*] $invocant: $p1, $p2, $p3) { say $invocant }}; Foo.new.foo($a)

[20:08] <exp_evalbot> OUTPUT[*** ␤    Unexpected "[*]"␤    expecting formal parameter or ")"␤    at /tmp/ejrOGGxur1 line 1, column 46␤]

[20:08] <ruoso> pugs: my $a = \(1: 2,3,4); class Foo { method foo (Whatever $invocant: $p1, $p2, $p3) { say $invocant }}; Foo.new.foo($a)

[20:08] <exp_evalbot> OUTPUT[*** No such method in class Foo: "&foo"␤    at /tmp/48PYABXeOZ line 1, column 101 - line 2, column 1␤]

[20:08] *** qmole left
[20:08] *** bbkr_ left
[20:08] *** diakopter left
[20:08] *** kolibrie left
[20:08] *** meteorjay left
[20:08] *** PerlJam left
[20:08] *** Lorn left
[20:08] *** cls_bsd_ left
[20:08] *** perlbot left
[20:08] *** eternaleye left
[20:08] *** TimToady left
[20:08] *** Auzon left
[20:08] *** viklund` left
[20:08] *** gugod left
[20:08] *** dalek left
[20:08] *** jferrero left
[20:08] <pugs_svnbot> r20704 | moritz++ | [evalbot] shorter name for evalbot, in order to use up less screen space

[20:08] <pugs_svnbot> r20704 | moritz++ | it's also not *so* experimental anymore ;-)

[20:09] *** TimToady joined
[20:09] *** cls_bsd_ joined
[20:09] *** eternaleye joined
[20:09] *** viklund` joined
[20:09] *** bbkr_ joined
[20:09] *** Auzon joined
[20:09] *** Lorn joined
[20:09] *** jferrero joined
[20:09] *** dalek joined
[20:09] *** kolibrie joined
[20:09] *** qmole joined
[20:09] *** meteorjay joined
[20:09] *** gugod joined
[20:09] *** PerlJam joined
[20:09] *** diakopter joined
[20:09] *** perlbot joined
[20:09] *** irc.freenode.net sets mode: +o TimToady

[20:09] <pmichaud> evalbot shortname ++

[20:09] <pugs_svnbot> r20705 | moritz++ | [irclog] recognize 'p6eval' as a bot

[20:10] <moritz_> evalbot control restart

[20:10] *** exp_evalbot left
[20:10] *** exp_evalbot joined
[20:10] <moritz_> evalbot control restart

[20:10] *** exp_evalbot left
[20:10] *** p6eval joined
[20:11] <moritz_> say "this is me"

[20:11] <moritz_> rakudo: say "this is me"

[20:11] <p6eval> rakudo r28167 OUTPUT[this is me␤]

[20:12] *** Limbic_Region joined
[20:13] <ruoso> Btw... I've just decided that $obj.^can($foo) invocation will turn $obj into the first positional argument, and send the meta as invocant...

[20:13] <ruoso> this way disatching won't fail because of mismatched invocant type...

[20:14] <pasteling> "ruoso" at 82.154.140.37 pasted "can implementation in P6Meta is so cool! :)" (9 lines, 325B) at http://sial.org/pbot/31239

[20:14] <pugs_svnbot> r20706 | moritz++ | [evalbot] yap6 has a svn revision as well

[20:16] <moritz_> ruoso: for sake of efficiency you should consider storing the methods in a hash

[20:16] <moritz_> ruoso: now can is linear in the number of methods

[20:17] <moritz_> well, but that's probably premature optimization

[20:17] <ruoso> moritz_, yeah... that's not very interesting because it first builds the list of all methods and then grep them...

[20:17] <ruoso> moritz_, except that it doesn't ;)

[20:17] <ruoso> moritz_, this is all lazy

[20:17] <ruoso> :)

[20:18] <ruoso> but yeah... I should probably make the local lookup and then deliver to the superclass ^can

[20:18] <moritz_> still O(n)

[20:18] <moritz_> where n = number of methods

[20:18] <ruoso> internally p6opaque will store as a hash

[20:19] <ruoso> not really a hash, but a bsearcheable data structure

[20:19] *** qmole left
[20:19] *** bbkr_ left
[20:19] *** diakopter left
[20:19] *** kolibrie left
[20:19] *** meteorjay left
[20:19] *** PerlJam left
[20:19] *** Lorn left
[20:19] *** cls_bsd_ left
[20:19] *** perlbot left
[20:19] *** eternaleye left
[20:19] *** TimToady left
[20:19] *** Auzon left
[20:19] *** viklund` left
[20:19] *** gugod left
[20:19] *** dalek left
[20:19] *** jferrero left
[20:20] <moritz_> we perl programmers tend to forget that there are data structures beside hashes and arrays ;)

[20:20] <ruoso> :)

[20:20] *** TimToady joined
[20:20] *** cls_bsd_ joined
[20:20] *** eternaleye joined
[20:20] *** viklund` joined
[20:20] *** bbkr_ joined
[20:20] *** Auzon joined
[20:20] *** Lorn joined
[20:20] *** jferrero joined
[20:20] *** dalek joined
[20:20] *** kolibrie joined
[20:20] *** qmole joined
[20:20] *** meteorjay joined
[20:20] *** gugod joined
[20:20] *** PerlJam joined
[20:20] *** diakopter joined
[20:20] *** perlbot joined
[20:20] *** irc.freenode.net sets mode: +o TimToady

[20:21] *** qmole left
[20:21] *** bbkr_ left
[20:21] *** diakopter left
[20:21] *** kolibrie left
[20:21] *** meteorjay left
[20:21] *** PerlJam left
[20:21] *** Lorn left
[20:21] *** cls_bsd_ left
[20:21] *** perlbot left
[20:21] *** eternaleye left
[20:21] *** TimToady left
[20:21] *** Auzon left
[20:21] *** viklund` left
[20:21] *** gugod left
[20:21] *** dalek left
[20:21] *** jferrero left
[20:22] *** TimToady joined
[20:22] *** cls_bsd_ joined
[20:22] *** eternaleye joined
[20:22] *** viklund` joined
[20:22] *** bbkr_ joined
[20:22] *** Auzon joined
[20:22] *** Lorn joined
[20:22] *** jferrero joined
[20:22] *** dalek joined
[20:22] *** kolibrie joined
[20:22] *** qmole joined
[20:22] *** meteorjay joined
[20:22] *** gugod joined
[20:22] *** PerlJam joined
[20:22] *** diakopter joined
[20:22] *** perlbot joined
[20:22] *** irc.freenode.net sets mode: +o TimToady

[20:22] <pugs_svnbot> r20707 | ruoso++ | [smop] HOW calls are made with the meta as invocant and the object as a prepended first positional argument (doing the same thing the sub-dispatch fallback does)

[20:23] *** qmole left
[20:23] *** bbkr_ left
[20:23] *** diakopter left
[20:23] *** kolibrie left
[20:23] *** meteorjay left
[20:23] *** PerlJam left
[20:23] *** Lorn left
[20:23] *** cls_bsd_ left
[20:23] *** perlbot left
[20:23] *** eternaleye left
[20:23] *** TimToady left
[20:23] *** Auzon left
[20:23] *** viklund` left
[20:23] *** gugod left
[20:23] *** dalek left
[20:23] *** jferrero left
[20:24] *** TimToady joined
[20:24] *** cls_bsd_ joined
[20:24] *** eternaleye joined
[20:24] *** viklund` joined
[20:24] *** bbkr_ joined
[20:24] *** Auzon joined
[20:24] *** Lorn joined
[20:24] *** jferrero joined
[20:24] *** dalek joined
[20:24] *** kolibrie joined
[20:24] *** qmole joined
[20:24] *** meteorjay joined
[20:24] *** gugod joined
[20:24] *** PerlJam joined
[20:24] *** diakopter joined
[20:24] *** perlbot joined
[20:24] *** irc.freenode.net sets mode: +o TimToady

[20:27] <ruoso> TimToady, all that brings us back to an old discussion... $obj.HOW.can('foo') is not necessarly the same as $obj.^can('foo')

[20:27] <ruoso> if the HOW is shared among objects

[20:27] <ruoso> $obj.HOW.can('foo') might simply not have all the data it needs... and once SMOP will accept meta objects that are real objects (like a XSD parser)

[20:28] <ruoso> the idea of having the proxy object that sets the invocant doesn't fit anymore....

[20:28] <ruoso> in fact...

[20:29] <ruoso> $obj.HOW should probably be clarified to say that it can only be used as in the spec for class-based OO

[20:30] <ruoso> prototype-based OO will have a hard-time, since the HOW is shared...

[20:30] *** eternaleye left
[20:31] <ruoso> and one might actually want to talk to the HOW shared object, and might even ask Foo.HOW.^does(Something) for Meta-Meta-Class code composition (like... does this Clsas support Roles?

[20:31] <ruoso> Foo.HOW.^does(Object::Composition::Roles)

[20:31] <ruoso> or even...

[20:31] <ruoso> Foo.HOW does(Object::Composition::Roles)

[20:32] <ruoso> Foo.HOW does Object::Composition::Roles; # that, actually

[20:32] <ruoso> and all objects that share that metaclass would have this new feature...

[20:42] *** FurnaceBoy joined
[20:44] * ruoso sending an email to p6-language...

[20:48] *** qmole left
[20:48] *** bbkr_ left
[20:48] *** diakopter left
[20:48] *** kolibrie left
[20:48] *** meteorjay left
[20:48] *** PerlJam left
[20:48] *** Lorn left
[20:48] *** cls_bsd_ left
[20:48] *** perlbot left
[20:48] *** TimToady left
[20:48] *** Auzon left
[20:48] *** viklund` left
[20:48] *** gugod left
[20:48] *** dalek left
[20:48] *** jferrero left
[20:49] *** TimToady joined
[20:49] *** cls_bsd_ joined
[20:49] *** viklund` joined
[20:49] *** bbkr_ joined
[20:49] *** Auzon joined
[20:49] *** Lorn joined
[20:49] *** jferrero joined
[20:49] *** dalek joined
[20:49] *** kolibrie joined
[20:49] *** qmole joined
[20:49] *** meteorjay joined
[20:49] *** gugod joined
[20:49] *** PerlJam joined
[20:49] *** diakopter joined
[20:49] *** perlbot joined
[20:49] *** irc.freenode.net sets mode: +o TimToady

[20:53] *** ruoso left
[20:57] *** Jedai joined
[20:59] *** nothingmuch left
[20:59] *** agentzh left
[21:00] *** nothingmuch joined
[21:00] *** agentzh joined
[21:09] *** Jedai left
[21:09] *** qmole left
[21:09] *** bbkr_ left
[21:09] *** diakopter left
[21:09] *** kolibrie left
[21:09] *** meteorjay left
[21:09] *** PerlJam left
[21:09] *** Lorn left
[21:09] *** cls_bsd_ left
[21:09] *** perlbot left
[21:09] *** TimToady left
[21:09] *** Auzon left
[21:09] *** viklund` left
[21:09] *** gugod left
[21:09] *** dalek left
[21:09] *** jferrero left
[21:09] *** TimToady joined
[21:09] *** Jedai joined
[21:09] *** cls_bsd_ joined
[21:09] *** viklund` joined
[21:09] *** bbkr_ joined
[21:09] *** Auzon joined
[21:09] *** Lorn joined
[21:09] *** jferrero joined
[21:09] *** dalek joined
[21:09] *** kolibrie joined
[21:09] *** qmole joined
[21:09] *** meteorjay joined
[21:09] *** gugod joined
[21:09] *** PerlJam joined
[21:09] *** diakopter joined
[21:09] *** perlbot joined
[21:09] *** irc.freenode.net sets mode: +o TimToady

[21:11] *** iblechbot joined
[21:32] *** pugs_svnbot left
[21:32] *** pugs_svnbot joined
[21:32] <diakopter> hrm

[21:34] <pasteling> "diakopter" at 209.9.237.164 pasted "commit message for r20708" (25 lines, 1.2K) at http://sial.org/pbot/31240

[21:34] <diakopter> sorry it was so long

[21:35] <moritz_> I'd summarize that as "major improvements in yap6" ;-)

[21:35] *** IllvilJa left
[21:35] <moritz_> rakudo: say (1, 2, 3).pick

[21:35] <p6eval> rakudo r28168 OUTPUT[Method 'pick' not found for invocant of class 'List'␤current instr.: '_block11' pc 56 (EVAL_12:22)␤

[21:36] <pmichaud> I can probably add that here quickly.  :-)

[21:38] <moritz_> just saw #49085 and wondered if we already had it

[21:53] <spinclad> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: $p1, $p2, $p3) { say $invocant }};  Foo.new.foo($a)

[21:53] <p6eval> OUTPUT[*** No such method in class Foo: "&foo"␤    at /tmp/AvBWdoVCI9 line 1, column 93 - line 2, column 1␤]

[21:55] <moritz_> spinclad: you need to interpolate the capture with |$1

[21:55] <moritz_> erm, |$a

[21:55] *** Maghnus joined
[21:55] <diakopter> moritz_: evalbot? or is it netsplit?

[21:56] <moritz_> diakopter: I renamed evalbot to make the name use up less screen space ;)

[21:56] <moritz_> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: $p1, $p2, $p3) { say $invocant }};  Foo.new.foo(|$a)

[21:56] <p6eval> OUTPUT[*** No such method in class Foo: "&foo"␤    at /tmp/D0ByuTtOht line 1, column 93 - line 2, column 1␤]

[21:57] <moritz_> why doesn't it find the method?

[21:59] <moritz_> maybe because 1 !~~ Foo ?

[22:00] <moritz_> anyway, sleep

[22:01] *** iblechbot left
[22:01] <pugs_svnbot> r20709 | diakopter++ | [yap6]

[22:01] <pugs_svnbot> r20709 | diakopter++ | cleaning up warnings for evalbot's sake...

[22:01] <diakopter> evalbot control version

[22:01] <p6eval> This is evalbot revision 20705

[22:02] <diakopter> evalbot control restart

[22:02] *** p6eval left
[22:02] *** p6eval joined
[22:02] <spinclad> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: *$aa) { say $invocant, $aa }}; Foo.new.foo(|$a)

[22:02] <p6eval> OUTPUT[<obj:Foo>CaptMeth {c_invocant = IFinite 1, c_feeds = [:MkFeed {f_positionals = [:IFinite 2,IFinite 3,IFinite 4:], f_nameds = fromList []}:]}␤]

[22:03] <spinclad> .oO{gotcha!}

[22:04] <spinclad> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: *($i2: $p1, $p2, $p3)) { say $invocant, $i2, $p1, $p2, $p3 }}; Foo.new.foo(|$a)

[22:04] <p6eval> OUTPUT[*** ␤    Unexpected "*($"␤    expecting parameter name or ")"␤    at /tmp/WsB4VW6GCZ line 1, column 57␤]

[22:05] <spinclad> but still don't know how to unpack the inner capture...

[22:08] *** dominiko left
[22:18] <rakudo_svn> r28170 | pmichaud++ | [rakudo]:

[22:18] <rakudo_svn> r28170 | pmichaud++ | * Add a preliminary implementation of Complex.

[22:21] <pugs_svnbot> r20710 | pmichaud++ | S29-num/complex.t:  Update #?rakudo fudging.

[22:21] <rakudo_svn> r28171 | pmichaud++ | [rakudo]:

[22:21] <rakudo_svn> r28171 | pmichaud++ | * Add 'test_summary.pl' script used to provide an alternate view

[22:21] <rakudo_svn> r28171 | pmichaud++ |   of running spectest_regression (and generate the regression history).

[22:26] *** lichtkind left
[22:27] *** braceta joined
[22:41] <meppl> good night

[22:42] *** braceta left
[22:44] *** Lorn left
[22:45] *** Lorn joined
[22:45] <bacek> pugs: sub foo($a){say $a}; my $f:=&foo('hello'); $f()

[22:45] <p6eval> OUTPUT[hello␤*** Cannot cast from VBool True to Pugs.AST.Internals.VCode (VCode)␤    at /tmp/ULoD8z680r line 1, column 44 - line 2, column 1␤]

[22:46] <bacek> pugs: sub foo($a){say $a}; my $f:=&foo.prebind('hello'); $f()

[22:46] <p6eval> OUTPUT[*** No such method in class Sub: "&prebind"␤    at /tmp/7DSqTPmAvv line 1, column 22-50␤]

[22:46] *** meppl left
[22:47] <bacek> pugs: sub foo($a){say $a}; my $f:=&foo.prebind('a'=>'hello'); $f()

[22:47] <p6eval> OUTPUT[*** No such method in class Sub: "&prebind"␤    at /tmp/PqwijSwHGi line 1, column 22-55␤]

[22:49] *** justatheory_ joined
[22:50] <pasteling> "spinclad" at 209.6.140.232 pasted "moritz: typo fixes to http://perlgeek.de/en/article/mutable-grammar-for-perl-6" (64 lines, 5K) at http://sial.org/pbot/31241

[22:51] <spinclad> moritz_: re http://perlgeek.de/en/article/mutable-grammar-for-perl-6: see http://sial.org/pbot/31241

[22:52] <spinclad> reads well, good article, moritz_++

[22:52] <pmichaud> agreed, excellent article.

[23:00] <bacek> rakudo: say (defined $!) xor 1;

[23:00] <p6eval> rakudo r28171 OUTPUT[1␤]

[23:01] *** jan_ left
[23:01] <pugs_svnbot> r20711 | diakopter++ | [yap6]

[23:01] <pugs_svnbot> r20711 | diakopter++ | hopefully the final warnings fixes for this round.

[23:02] <spinclad> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: |cc ($i2: $p1, $p2, $p3)) { say $invocant, $cc, $i2, $p1, $p2, $p3 }}; Foo.new.foo(|$a)

[23:02] <p6eval> OUTPUT[*** ␤    Unexpected "|"␤    expecting ":", "*", parameter name or ")"␤    at /tmp/5RIE6iHxjT line 1, column 57␤]

[23:02] <bacek> rakudo: say undef xor 1;

[23:02] <p6eval> rakudo r28171 OUTPUT[1␤]

[23:03] *** jan_ joined
[23:03] <spinclad> pugs: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: Capture $cc ($i2: $p1, $p2, $p3)) { say $invocant, $cc, $i2, $p1, $p2, $p3 }}; Foo.new.foo(|$a)

[23:03] <p6eval> OUTPUT[*** ␤    Unexpected "($"␤    expecting "?", "!", trait, "=", default value, "-->" or ")"␤    at /tmp/MHz9WGlqSX line 1, column 69␤]

[23:03] <pmichaud> rakudo: say (1 xor 1).WHAT;

[23:03] <p6eval> rakudo r28171 OUTPUT[Failure␤]

[23:03] <bacek> ouch...

[23:04] <pmichaud> correct, it should be Bool::False.  As I said in #parrot, the spec changed on me a bit there.

[23:04] <pmichaud> (either that or I misread it to begin with)

[23:04] *** justatheory left
[23:04] <spinclad> rakudo: my $a = \(1: 2,3,4); class Foo { method foo ($invocant: Capture $cc ($i2: $p1, $p2, $p3)) { say $invocant, $cc, $i2, $p1, $p2, $p3 }}; Foo.new.foo(|$a)

[23:04] <p6eval> rakudo r28171 OUTPUT[Statement not terminated properly at line 1, near "= \\(1: 2,3"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[23:05] <pmichaud> rakudo doesn't do Captures yet.

[23:05] <spinclad> didn't think so; figured this was a long way from working yet

[23:05] <pmichaud> I don't know about "long way" -- jonathan++ already has some preliminary support

[23:05] <spinclad> Signatures too, and unpacking?

[23:05] <pmichaud> signatures might be a little longer.

[23:07] <spinclad> i expect the path there is paved with low-hanging fruit :)

[23:07] <pmichaud> I'm gorging myself on low-hanging fruit these days

[23:08] <pmichaud> as posted in #parrot:  22:07 <nopaste> "pmichaud" at 76.183.97.54 pasted "Rakudo spectest regression history" (29 lines) at http://nopaste.snit.ch/13204

[23:08] <wolverian> 2006?

[23:08] <pmichaud> oh, typos :-)

[23:08] <pmichaud> (fixing.)

[23:09] <diakopter> oh, I see the problem :D evalbot runs 5.8; I have 5.10

[23:09] <pmichaud> the current HEAD numbers are:

[23:09] <wolverian> yeah, it's only on every line ;)

[23:09] <pmichaud>   59 test files                                 1110 1139  697    0   17  425

[23:09] <wolverian> what's the diff between skip and todo?

[23:09] <pmichaud> skip is a test we don't even bother to try parsing.  (In fact, we skip it because we cannot parse it.)

[23:09] <bacek> rakudo: say (1 ^^ 1).WHAT

[23:09] <p6eval> rakudo r28171 OUTPUT[Failure␤]

[23:10] <pmichaud> todo is a test that we can parse but that fails, and we don't expect to fix "immediately".

[23:11] *** sri_work left
[23:12] <pmichaud> 23:10 <nopaste> "pmichaud" at 76.183.97.54 pasted "specte_regression results in head" (62 lines) at http://nopaste.snit.ch/13206

[23:16] <pugs_svnbot> r20712 | diakopter++ | [yap6]

[23:16] <pugs_svnbot> r20712 | diakopter++ | don't use 5.10 features for evalbot's sake

[23:19] <bacek> perl6: say 1 xor 0 xor 0

[23:20] <p6eval> kp6 r20712: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bf54)', 'APPLY', 'HASH(0x8e52490)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[23:20] <p6eval> ..main::DISPATCH('HASH(0x824bf54)', 'APPLY', 'HASH(0x8e52490)') ca...

[23:20] <p6eval> ..pugs: OUTPUT[1␤]

[23:20] <p6eval> ..rakudo r28171: OUTPUT[1␤]

[23:20] <p6eval> ..elf r20712: OUTPUT[1␤]

[23:20] <bacek> perl6: say 1 xor 1 xor 0

[23:20] <p6eval> kp6 r20712: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bf54)', 'APPLY', 'HASH(0x8e52490)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[23:20] <p6eval> ..main::DISPATCH('HASH(0x824bf54)', 'APPLY', 'HASH(0x8e52490)') ca...

[23:20] <p6eval> ..pugs: OUTPUT[1␤]

[23:20] <p6eval> ..rakudo r28171: OUTPUT[0␤]

[23:20] <p6eval> ..elf r20712: OUTPUT[␤]

[23:20] <diakopter> yap6: my $foo = my $fee = 23442; { package Something; say $do_This_Now; }

[23:20] <p6eval> yap6 r20712 OUTPUT[Illegal usage: "Can't declare a non-block package]

[23:29] <pugs_svnbot> r20713 | diakopter++ | [yap6]

[23:29] <pugs_svnbot> r20713 | diakopter++ | enable syntax error output for evalbot

[23:41] *** Jedai left
