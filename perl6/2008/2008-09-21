[00:15] *** meppl joined
[00:25] <slavik> is there a simpler way to read from stdin besides =$*IN?

[00:31] *** alester left
[00:32] *** alester joined
[00:39] <wknight8111> that isn't simple enough?

[00:39] <slavik> I like the old <> :)

[00:39] <slavik> also, is there a grammar usage example anywhere?

[00:40] <slavik> as in, I have a grammar, how can I check if a string $string matches the grammar?

[00:40] <wknight8111> I'm pretty sure it's $string ~~ Grammar::Rule

[00:40] <wknight8111> or maybe Grammar::Rule.match($string)

[00:41] <slavik> k

[00:41] <wknight8111> or maybe both. It's probably faster to just start trying things then to look up a resource on it

[00:41] <wknight8111> do you have the Pugs repo?

[00:41] <slavik> yes, it's installed and everything, just wasn't sure of the syntax

[00:41] <slavik> well, I defined my own grammar

[00:42] <wknight8111> $string ~~ /Grammar::Rule.TOP/

[00:43] <wknight8111> no, I think it's $string ~~/Grammar::Rule/, which implicitly calls the TOP rule

[00:43] <wknight8111> (this obviously isn't my area of expertise)

[00:44] <slavik> hmm

[00:44] <slavik> my $string = "http://google.com/";

[00:44] <slavik> that seems to be a problem for pugs

[00:45] <wknight8111> hmm, weird

[00:45] <slavik> pugs: Internal error:   Unknown pseudo-assignment form:Syn "=" [Var "$*_",Ann (Cxt (CxtItem (mkType "Str"))) (Val (VStr "http://google.com/"))] Please file a bug report.

[00:45] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "\"=\""␤    expecting ":", "(", operator or ","␤    at /tmp/CiWGr7LrHi line 1, column 54␤]

[00:45] <wknight8111> do you need to escape the forward slashes?

[00:46] <wknight8111> my $string = 'http://google.com' (with single quotes)

[00:46] <wknight8111> or my $string = "http:\/\/google.com\/"

[00:47] <slavik> hmm, nope, nothing

[00:48] <slavik> hmm

[00:50] <slavik> http://perlgeek.de/blog-en/perl-5-to-6/07-rules.html

[00:50] <lambdabot> Title: blog | Perlgeek.de Blog :: Rules (formerly Regexes)

[00:50] <slavik> I copied my grammar from there

[00:51] <slavik> *** Cannot parse regex: Grammar::URL

[00:51] <slavik> hmm

[00:52] <pasteling> "slavik" at 67.100.227.140 pasted "grammar example" (17 lines, 399B) at http://sial.org/pbot/32231

[00:52] <slavik> there

[00:59] <wknight8111> Does that example work?

[00:59] <slavik> no, that's why I posted it

[01:00] <wknight8111> I would try switching the last line to say $str ~~ URL

[01:00] <wknight8111> instead of /Grammar::URL/

[01:02] <slavik> ty

[01:02] <slavik> hmm, doesn't match it :(

[01:02] <wknight8111> $str ~~ URL.TOP?

[01:03] <slavik> no such method ...

[01:03] <wknight8111> oh wait, the trailing "/" doesnt match anything

[01:03] <wknight8111> $str = "http://google.com"

[01:03] <lambdabot> Title: Google

[01:04] <wknight8111> that should match the regex, if you can find a way to call it

[01:04] <slavik> hmm

[01:06] *** calin left
[01:06] <wknight8111> or change token hostname { ([\w+][\.\w+]*) '/' }

[01:06] <slavik> nope

[01:07] <wknight8111> what errors are you getting? is it saying your syntax is bad, or is it just not saying anything?

[01:07] <slavik> nope, it just doesn't match

[01:08] <wknight8111> nopaste your current code?

[01:08] <pasteling> "slavik" at 67.100.227.140 pasted "grammar example" (16 lines, 375B) at http://sial.org/pbot/32232

[01:11] <wknight8111> try changing TOP from a token to a rule?

[01:11] <wknight8111> I don't think tokens can contain references to other tokens

[01:11] <slavik> nope

[01:12] <wknight8111> I don't have pugs on here now, so I can't really test any of this

[01:12] <wknight8111> and I dont want to take the effort to build it right now

[01:12] <slavik> use cabal

[01:15] <wknight8111> okay, battery is dieing. Have to go. Good luck with your grammar

[01:15] <slavik> bye

[01:15] <slavik> ty for the help

[01:25] *** wknight8111 left
[01:29] *** Limbic_Region left
[01:45] <s1n> @seen pmichaud

[01:45] <lambdabot> pmichaud is in #perl6. I last heard pmichaud speak 1d 8h 5m 27s ago.

[02:37] *** meppuru joined
[02:41] *** xinming_ joined
[02:44] *** LCamel joined
[02:51] <s1n> is anyone familiar with the rakudo parser? i'm looking to see where a certain symbol is being processed

[02:54] *** meppl left
[02:55] *** xinming left
[02:57] *** meppuru is now known as meppl

[03:01] *** elmex left
[03:03] *** elmex joined
[03:03] *** iblechbot left
[03:12] *** alester left
[03:17] *** ab5tract left
[03:27] *** ab5tract joined
[04:05] *** justatheory joined
[04:09] *** sail0r joined
[04:14] *** sail0r left
[04:14] *** sail0r joined
[04:22] *** aindilis left
[04:22] *** cognominal left
[04:22] *** simcop2387 left
[04:22] *** nothingmuch left
[04:22] *** s1n left
[04:22] *** cotto_home left
[04:22] *** funktio left
[04:22] *** justatheory left
[04:22] *** meppl left
[04:22] *** slavik left
[04:22] *** meteorjay left
[04:22] *** mberends left
[04:22] *** tcliou left
[04:22] *** araujo left
[04:22] *** felipe left
[04:22] *** AzureStone left
[04:22] *** ingy left
[04:23] *** sail0r left
[04:28] *** justatheory joined
[04:28] *** meppl joined
[04:28] *** slavik joined
[04:28] *** meteorjay joined
[04:28] *** mberends joined
[04:28] *** tcliou joined
[04:28] *** araujo joined
[04:28] *** felipe joined
[04:28] *** AzureStone joined
[04:28] *** orafu joined
[04:28] *** p6eval joined
[04:28] *** StephenPollei joined
[04:28] *** speckbot joined
[04:28] *** audreyt joined
[04:28] *** Gothmog_ joined
[04:28] *** ingy joined
[04:28] *** perlbot joined
[04:28] *** krunen joined
[04:28] *** funktio joined
[04:28] *** aindilis joined
[04:28] *** cognominal joined
[04:28] *** simcop2387 joined
[04:28] *** nothingmuch joined
[04:28] *** cotto_home joined
[04:28] *** s1n joined
[04:32] *** justatheory left
[04:55] *** alanhaggai_ joined
[04:58] *** Minthe joined
[05:01] *** Minthe left
[05:03] *** justatheory joined
[05:08] *** justatheory left
[05:08] <obra> a/win 50

[05:09] <slavik> ?

[05:09] <obra> typo. sorry

[05:10] <obra> commands are what most irc clients use for 'do something'

[05:10] <obra> er. "slash commands"

[05:10] <slavik> I know what slash command are

[05:11] *** alanhaggai left
[05:22] *** ab5tract left
[05:27] *** charsbar left
[05:27] *** charsbar_ joined
[05:44] *** alanhaggai_ left
[05:49] *** Psyche^ joined
[06:06] *** Patterner left
[06:06] *** Psyche^ is now known as Patterner

[06:11] *** sail0r_ joined
[06:12] *** sail0r_ left
[06:27] <meppl> good night

[06:27] <slavik> night

[06:27] <meppl> ;)

[06:28] *** meppl left
[06:47] *** lambdabot joined
[06:50] *** Bzek joined
[06:52] *** slavik left
[07:04] *** alanhaggai joined
[07:14] *** BinGOs joined
[07:19] *** kanru left
[07:19] *** raiph joined
[07:20] *** kanru joined
[07:20] <raiph> rakudo: ::qux = Foo::Bar

[07:20] <p6eval> rakudo 31292: OUTPUT[Scope not found for PAST::Var '::qux'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤]

[07:23] <raiph> rakudo: my ::qux = Foo::Bar

[07:23] <p6eval> rakudo 31292: RESULT[undef]

[07:26] <raiph> rakudo: Foo::Bar::Baz = "abc"; my ::qux = Foo::Bar; say "!" if "abc" ~~ ::qux::Baz

[07:26] <p6eval> rakudo 31292: RESULT[0]

[07:29] <raiph> rakudo: Foo::Bar::Baz = "abc"; my $qux = Foo::Bar; say "!" if "abc" ~~ ::($qux)::Baz

[07:29] <p6eval> rakudo 31292: OUTPUT[Use of contextualizer :: not implemented. at line 1, near "::Baz"␤␤current instr.: 'parrot;Perl6;Grammar;Actions;circumfix' pc 128050 (src/gen_actions.pir:10599)␤]

[07:30] *** zamolxes joined
[07:30] <raiph> pugs: Foo::Bar::Baz = "abc"; my ::qux = Foo::Bar; say "!" if "abc" ~~ ::qux::Baz

[07:30] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "="␤    expecting ":" or "("␤    at /tmp/el6VVmTDSN line 1, column 33␤]

[07:31] <raiph> pugs: Foo::Bar::Baz = "abc"; my ::qux := Foo::Bar; say "!" if "abc" ~~ ::qux::Baz

[07:31] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "="␤    expecting "("␤    at /tmp/IdU7MDijYl line 1, column 34␤]

[07:32] <raiph> pugs: Foo::Bar::Baz = "abc"; my ::qux ::= Foo::Bar; say "!" if "abc" ~~ ::qux::Baz

[07:32] <p6eval> pugs: OUTPUT[*** ␤    Unexpected ":="␤    expecting "("␤    at /tmp/9g7C933VdR line 1, column 34␤]

[07:32] *** raiph left
[07:41] *** alanhaggai_ joined
[07:53] *** pmurias joined
[07:57] *** alanhaggai left
[07:58] <Ontolog> wrt MMD does Rakudo implement it's own type-matching algorithm or use Parrots?

[07:59] *** abra joined
[07:59] *** Fersure joined
[08:00] *** Fersure left
[08:05] <pmurias> Ontolog: from Jonathan's blog post i think it uses Rakudos blog, anyway what would be the point of a MMD in parrot *not* used by rakudo

[08:07] *** charsbar_ left
[08:07] *** charsbar joined
[08:07] <Ontolog> hm?

[08:07] <Ontolog> the Parrot docs say Parrot has its own method finding algorithm for MMD

[08:07] <Ontolog> but that any language can plug in its own

[08:08] <Ontolog> so I'm wondering if Rakudo plugs in its own or uses Parrots?

[08:17] *** alanhaggai_ is now known as alanhaggai

[08:18] <moritz_> I think it uses its own

[08:21] <Ontolog> what does Test.pm suppose to do anyway?

[08:22] <Ontolog> why would it be making a call to split and causing the no such method problem

[08:22] <Ontolog> moritz_: did you see my last perl6-comp mail?

[08:22] <Ontolog> i still don't feel like i got a satisfactory response from anyone so maybe you could take a look

[08:22] <Ontolog> ?

[08:23] <Ontolog> oh I see Test.pm is the test module all the tests in the pugs repo use

[08:24] <Ontolog> but i don't understand how ../../parrot  perl6.pbc --target=pir --output=Test.pir Test.pm

[08:24] <Ontolog> calls split

[08:29] <moritz_> Ontolog: which one? the :multi :method mail?

[08:30] <Ontolog> yes

[08:30] <Ontolog> "method signature issues"

[08:32] <moritz_> I think that much code in the builtins is a bit cargo-culted and not necessarily optimal

[08:33] <Ontolog> cargo-culted?

[08:35] <moritz_> copied from other signatures without really understanding it

[08:35] *** raiph joined
[08:35] <Ontolog> ahh i see

[08:35] <Ontolog> well that's what i want to do, is understand it

[08:36] <Ontolog> i feel kind of stuck right now

[08:41] <Ontolog> is there an area other than the builtins that needs some help?

[08:43] *** raiph left
[08:45] <moritz_> lots of things

[08:45] <moritz_> there are many bugs in the RT that could need some attention

[08:45] <moritz_> then there's the ROADMAP

[08:48] <rakudo_svn> r31294 | tene++ | [parrot]

[08:48] <rakudo_svn> r31294 | tene++ | Remove the second argument passed to exception handlers.

[08:48] <rakudo_svn> r31294 | tene++ | You can get the message by stringifying the exception object.

[08:48] <rakudo_svn> r31294 | tene++ | All parrot tests pass.  Looks like the languages are all okay too.

[09:02] *** zamolxes left
[09:16] *** fridim_ joined
[09:19] *** barney joined
[09:38] *** fridim_ left
[10:30] *** Front_slash left
[10:38] *** Bzek left
[11:11] *** Ontolog left
[11:14] *** Ontolog joined
[11:36] <pmurias> Ontolog: you could try rewritting some of the pir stuff in Perl 6

[11:46] <Ontolog> yes i would enjoy doing that actually, can builtins be written in Perl 6 now and used by Rakudo?

[11:49] *** ruoso joined
[11:59] <pmurias> ruoso: hi

[11:59] <ruoso> hi pmurias 

[12:01] <pmurias> ruoso: what do you think of using GET and SET for locked access to objects?

[12:01] <ruoso> what do you mean?

[12:02] *** Ontolog left
[12:07] <pmurias> SET(foo,123) would smop_lowlevel_wrlock(invocant);((appopriate_cast*)invocant))->foo = 123;smop_lowlevel_unlock(invocant);

[12:07] *** araujo left
[12:08] <pmurias> and GET(int,foo) would smop_lowlevel_rwlock(invocant);int foo = ((appropriate_cast*)invocant)->foo;smop_lowlevel_unlock(invocant)

[12:09] <ruoso> but how would it know which type to cast to?

[12:09] <ruoso> ah..

[12:09] <ruoso> you mean in the ri dsl

[12:10] <pmurias> yes

[12:11] <pmurias> the DSL would write the appropriate macro

[12:12] <ruoso> right... just consider it would be interesting to consolidate serveral accesses into a same lock call...

[12:12] <ruoso> since it's fairly common to access more than one value at a time

[12:12] <pmurias> yes thought about it

[12:25] *** Ontolog joined
[12:28] <pmurias> ruoso: locks should propably be used to perform a set of operations as an atomic unit so making them too easy might not be a good thing

[12:29] <ruoso> pmurias, and also, I think we should start think in s1p...

[12:34] <pmurias> ruoso: things not supporting FETCH is the blocker on s1p

[12:35] <ruoso> just that :)? 

[12:35] <ruoso> that's easy to solve :)

[12:36] <pmurias> that's the blocker for having the easy things working ;)

[12:36] *** araujo joined
[12:42] <ruoso> pmurias, so let's fix it :P

[12:43] <pmurias> ruoso: with copy and paste? ;)

[12:45] <ruoso> pmurias, well... maybe it's not a bad idea

[12:46] <ruoso> I mean... if that takes us to s1p sooner...

[12:49] <pmurias> it would only be } else (SMOP__ID__FETCH == identifier) { ___VALUE_FETCH___; } else if (SMOP__ID_STORE == identifier) { ___VALUE_STORE__; }

[12:51] <ruoso> where ___VALUE_FETCH___ is the placeholder for the "modifying read-only value" thing...

[12:52] <pmurias> ___VALUE__STORE___

[12:55] *** meppl joined
[12:55] <ruoso> yeah... that...

[12:59] <pmurias> it should be possible to add it with a script which would look for ___UNKNOW_METHOD___

[13:00] <ruoso> indeed...

[13:01] *** araujo left
[13:16] *** masak joined
[13:18] *** ruoso left
[13:25] *** wknight8111 joined
[13:40] *** abra left
[13:47] *** reedhe joined
[13:48] *** pmurias_ joined
[13:50] *** reedhe left
[13:50] *** pmurias left
[14:10] <pugs_svn> r22303 | pmurias++ | [smop/pugs]

[14:10] <pugs_svn> r22303 | pmurias++ | added .FETCH and .STORE to Code and constant identifiers

[14:10] <pugs_svn> r22303 | pmurias++ | m0ld emitted by pugs uses FETCH

[14:16] <pmurias_> Ontolog: you are Chris Davaz?

[14:29] <Ontolog> pmurias_: yes

[14:29] <Ontolog> perlbot: who is Ontolog?

[14:29] <perlbot> I already have an entry for who

[14:29] <Ontolog> perlbot: Ontolog?

[14:29] <perlbot> cdavaz

[14:30] *** pmurias_ left
[14:31] *** pmurias joined
[14:33] <pmurias> Ontolog: Pugs isn't dead

[14:33] <masak> perlbot: masak?

[14:33] <perlbot> masak

[14:33] <masak> right.

[14:33] <pmurias>  /whois nickname is the right command in irssi?

[14:34] <Ontolog>  /whois works with every irc client i've ever used

[14:34] <masak> aye.

[14:34] *** alanhaggai left
[14:36] <Ontolog> pmurias: i didn't say it's ... dead... i say its not being actively developed

[14:38] <pmurias> you'll get away with it this time ;)

[14:38] * Ontolog just did an svn update on pugs

[14:39] <Ontolog> I see the tests are indeed being developed and smop! 

[14:39] <Ontolog> i still don't really understand this smop stuff

[14:40] <Ontolog> why is it all separated into its own space?

[14:40] <Ontolog> i thought it's just a feature of perl 6

[14:41] <pmurias> smop is a different runtime from parrot

[14:42] <Ontolog> smop is a perl 6 interpreter?

[14:43] <pmurias> yes

[14:43] <pmurias> and i'm using pugs as the compiler for smop

[14:44] <Ontolog> huh? i'm so confused

[14:44] <Ontolog> pugs and smop are both perl 6 interpreters yes?

[14:44] <Ontolog> how does pugs compile c code?

[14:45] <pmurias> pugs compiles perl6 into m0ld (the smop eqivalent of pir) 

[14:46] <pmurias> pugs can also just run the AST

[14:47] <masak> that's what it "normally" does

[14:47] <Ontolog> ahh i see, ... i think...

[14:47] <Ontolog> pugs *is* perl6 (or a subset thereof) yes?

[14:47] <masak> Ontolog: Pugs implements (a subset of) Perl 6

[14:47] <Ontolog> so perl6 compiles perl6 into m0ld then runs it?

[14:47] <Ontolog> masak: yes, that's what i'm saying

[14:48] <Ontolog> sounds all kind of circular to me

[14:48] <masak> Ontolog: Pugs can compile Perl 6 into m0ld, and then smop can run it

[14:48] <Ontolog> i see, so the part where pugs compiles perl6 into m0ld, is that written in haskell?

[14:48] <masak> Ontolog: alternatively (and "normally"), Pugs just parses the Perl 6 into an AST and runs that

[14:49] <masak> Ontolog: I guess, yes. Pugs is written in Haskell.

[14:49] <masak> pmurias would know :)

[14:50] <pmurias> it is

[14:50] <pmurias> it compiles only very little atm, but this will change this week

[14:52] * masak likes the promising near future of smop, elf, Rakudo...

[14:53] <masak> exciting times indeed!

[14:54] <Ontolog> i think it's so messy!

[14:54] <Ontolog> so many redundant efforts going on

[14:54] <Ontolog> if we were all just focused on one of them i think it would be much better for perl6

[14:55] <Ontolog> sorry to be such a party pooper :p

[14:56] <masak> Ontolog: you're not, you're just not used to -Ofun :)

[14:57] <masak> this is how Things Are Done in Perl 6 land

[14:57] <masak> and no, it wouldn't go faster if everyone crowded around one single project

[14:57] <Ontolog> well, not by itself no

[14:58] <masak> I've seen all the large projects contribute in some way to the furthering of Perl 6

[14:58] <Ontolog> but with proper management

[14:58] <Ontolog> of course it would

[14:58] *** Limbic_Region joined
[14:58] <masak> Ontolog: well, Parrot is definitely managed

[14:58] <Ontolog> what about rakudo?

[14:58] <masak> the more I find out about the structures in place around Parrot, the more I'm in awe

[14:58] <Ontolog> i haven't been here long but i get the feeling that the left hand doesn't know what the right is doing

[14:58] <avar> Ontolog: Presuming a world where those resources are managable, which they aren't. Some people have no interest working on one of these implementations and want to do their own

[14:59] <masak> Ontolog: I think that's an exaggeration

[14:59] <masak> Ontolog: but I'd be interested to know what makes you think that

[14:59] <Ontolog> masak: maybe is, just a feeling... people tend to have conflicting views of how things should be done

[15:00] <masak> Ontolog: ah, you're referring to the recent discussion about :multi and :method?

[15:00] <Ontolog> masak: as one example yes

[15:00] <masak> that's just healthy in-project discussion, according to me

[15:00] <Ontolog> my point is, it's not clear in everyone's mind how we should be going about development

[15:00] <masak> people are not robots, and sometimes you need to communicate common practices and patterns

[15:00] <Ontolog> it's just sort of trial-and-error and if 'it works', it goes in 

[15:01] <masak> Ontolog: decidedly not.

[15:01] <masak> Ontolog: apparently you haven't been submitting many bugs yet to Rakudo :)

[15:01] <Ontolog> masak: yeah not so many

[15:01] <Ontolog> just starting out

[15:01] <Ontolog> just giving me first impressions is all

[15:01] <masak> yes, that's important, of course

[15:02] <Ontolog> i know there is a lot for me to learn really before i am in a place to criticize 

[15:02] <masak> for me too

[15:02] <masak> Ontolog: you're right in the sense that Rakudo could need more hands

[15:03] <masak> you can never assume that things will be done for you

[15:03] <Ontolog> well it would be nice if we made it easy to get people 'onboard' with developing rakudo

[15:03] <Ontolog> like some kind of docs on how to develop rakudo

[15:03] <Ontolog> but so many things are in flux too i know

[15:03] <Ontolog> like, are we doing the builtins in pir or perl6?

[15:03] <Ontolog> we still don't know

[15:03] <masak> Ontolog: PIR, mostly

[15:04] <Ontolog> but when some problems come up about pir / parrot then the response it 'well we're going to be doing things in perl6 later on so it won't matter'

[15:04] <Ontolog> it would be nice if we just settled on one and ironed out all the problems in that one area

[15:06] <masak> Ontolog: I hear you. not saying you're right or wrong, just that every change from current affairs will need manpower, and exercise of will

[15:07] <Ontolog> indeed... i'm focusing right now on learning parrot a bit more before i continue with the perl6 builtins

[15:07] <pmurias> Ontolog: the problem with PIR is one should be emitting it not writting it

[15:07] <Ontolog> so many problems pop up that i don't know how to handle

[15:07] <Ontolog> pmurias: what's the problem with hand-written pir?

[15:08] <Ontolog> pmurias: and isn't it kind of chicken-and-egg? i mean we need perl6 features to be written (in pir) before we can use perl6 to generate pir, no?

[15:10] <pmurias> you propably need a tiny bit of pir, but having stuff such as the PCT in pir is not a good thing

[15:10] <masak> Ontolog: nqp can generate PIR

[15:11] <Ontolog> is nqp complete? and can it generate any pir needed by perl 6?

[15:11] <Ontolog> so this is what i'm saying... i don't know what i should be doing, what language to be developing in, and where to put it

[15:11] <Ontolog> some kind of ground-rules would be nice

[15:12] <masak> Ontolog: npq is "complete enough". it does things. it's not "complete" complete

[15:12] <masak> Ontolog: who would you like ground rules from?

[15:13] <masak> Ontolog: re nqp completeness, see compilers/nqp/README.pod in the Parrot tree

[15:14] <Ontolog> masak: i don't know.. who's like the 'team lead' for rakudo?

[15:14] <masak> Ontolog: pmichaud

[15:14] <Ontolog> ok

[15:15] <masak> it's definitely ok to ask him stuff

[15:15] <Ontolog> he's so busy developing though, hard to get access all the time

[15:15] <masak> Ontolog: still, specific questions are always welcome

[15:15] <Ontolog> hmm yeah maybe i'll hit perl6-compiler with some more

[15:16] <masak> and if you volunteer to put together a document with tips for newcomers, that would definitely be appreciated by people

[15:16] <Ontolog> yeah i wouldn't mind doing that, as soon as i find out myself ;-)

[15:17] <masak> Ontolog: I choose mail when my questions exceed a certain complexity threshold, or when I don't know who knows the answer. otherwise, I stick with IRC. YMMV.

[15:17] <masak> :)

[15:17] *** iblechbot joined
[15:17] <Ontolog> good idea hehe

[15:17] <Ontolog> anywho time for me to go to bed

[15:18] *** nothingmuch_ joined
[15:18] * Ontolog &

[15:24] *** apeiron left
[15:36] *** jhorwitz joined
[15:43] *** nothingm1ch_ joined
[15:47] *** apeiron joined
[15:57] *** araujo joined
[15:57] *** nothingmuch_ left
[16:00] <pmurias> pugs: my $var;(do {say 1;$var}) = (do {say 2;7});say $var 

[16:00] <p6eval> pugs: OUTPUT[1␤2␤7␤]

[16:04] *** kanru left
[16:07] *** wknight8111_ joined
[16:07] *** wknight8111 left
[16:08] *** wknight8111_ is now known as wknight8111

[16:08] *** nothingm1ch_ left
[16:16] <pugs_svn> r22304 | Whiteknight++ | [Book] A few small updates to chapters 6 and 7

[16:20] *** zamolxes joined
[16:26] *** justatheory joined
[16:34] *** jferrero joined
[16:40] *** justatheory left
[16:57] *** alanhaggai joined
[17:00] *** ruoso joined
[17:01] <pmurias> audreyt: my declarations are not marked in PIL1 in any way, but variables are initialised at first use?

[17:02] <pmurias> ruoso: do you think adding lookup_or_new to LexicalPad is ok?

[17:03] *** mberends left
[17:05] <ruoso> pmurias, that's what autovivification is, isn't it?

[17:05] <ruoso> I mean.. at this moment, hash already autovivifies...

[17:06] <ruoso> not as specced for p6, but it does

[17:07] <pmurias> so lookup should do autovivification instead of printing an error for an unknown var?

[17:08] <ruoso> ops.. sorry...  you said lexicalpad and I read root namespace

[17:09] <ruoso> pmurias, well, we need to support "no strict" at some time...

[17:09] <ruoso> but do you have any immediate use for "no strict"?

[17:10] <pmurias> "no strict" is a bit useless

[17:11] <pmurias> anyway it falls back to globals instead of creating a lexical

[17:13] <ruoso> pmurias, but "lookup_or_new" is "no strict", isn't it?

[17:13] <pmurias> ruoso: the problem i have is that pugs doesn't mark lexicals

[17:14] <ruoso> it doesn't need to

[17:14] <ruoso> every time you use a variable you lookup for it

[17:14] * ruoso senses that pmurias is talking about "our $foo"

[17:14] <pmurias> meant it doesn't mark lexical declarations

[17:15] <ruoso> it doesn't have the "my $foo" in the AST?

[17:15] <pmurias> yes

[17:15] <ruoso> it probably stores in the block then...

[17:15] <ruoso> it needs to store somewhere...

[17:15] *** aindilis left
[17:18] <pmurias> stupid me, it does

[17:20] <ruoso> :P

[17:28] <ruoso> pmurias++ # pugs -Cm0ld is pretty impressive

[17:29] <ruoso> pmurias, but $*OUT shouldn't be looking in the lexical scope

[17:29] <ruoso> it looks directly in the global namespace

[17:29] <pmurias> yes

[17:30] <pmurias> ;)

[17:30] <ruoso> as well as ::Code

[17:31] <pmurias> Code doesn't

[17:31] <pmurias> you can have "my class Code {...}"

[17:31] <ruoso> oh... ok...

[17:32] <pmurias> but i forgot about the * twigil in $*OUT

[17:32] <ruoso> does that mean that "use Foo" is required not only for making sure the file is load, but also to declare locally the name?

[17:33] <ruoso> or does that mean that the lexical scope only goes lookup global names for class names?

[17:34] <pmurias> i think class names are lexical

[17:34] <pmurias> which propably means packages are lexical too

[17:36] <ruoso> hmm

[17:36] * ruoso re-re-re-re-reading specs

[17:37] <pmurias> &

[17:37] *** pmurias left
[17:49] <ruoso> indeed... an explicit "use" is required to have some package visible... S11:130

[17:52] *** Limbic_Region left
[17:55] *** barney left
[18:04] *** sri_work joined
[18:15] <ruoso> hmm... actually that was about exported variables, not the package name itself...

[18:17] *** meppl left
[18:27] <ruoso> TimToady, considering class, module and package names are lexical, does it mean that "use" will bind the global package name to the local lexical scope? the other alternative is the lexical scope going to find globals when it is not found, but the boring part is that it should only do it for package names, not for other types of variables...

[18:29] <ruoso> and more importantly, does that mean that every time a topmost scope is initialized, all the built-in types need to be declared in that scope? 

[18:30] <ruoso> which could actually mean that there's a Prelude scope... which is probably a sane idea

[18:30] <ruoso> and every "root" scope has the prelude scope as the "outer"

[18:30] <ruoso> that is actually a very good idea :)

[18:31] * ruoso . o O ( nothing like finding the solution just by asking for it )

[18:33] *** jovs joined
[19:02] *** rindolf joined
[19:06] *** scrottie joined
[19:11] *** sri_work_ joined
[19:25] *** Auzon joined
[19:25] *** wknight8111_ joined
[19:25] *** wknight8111 left
[19:26] *** sri_work left
[19:27] <wknight8111_> moritz, do you have that link again?

[19:27] <wknight8111_> my computer crashed :(

[19:28] <moritz_> wknight8111_: http://irclog.perlgeek.de/parrot/2008-05-31#i_322490

[19:28] <lambdabot> Title: IRC log for #parrot, 2008-05-31

[19:29] <wknight8111_> I just got the message that linux thinks my laptop battery may be "old or broken"

[19:29] <wknight8111_> so that's disheartening

[19:30] <moritz_> :(

[19:30] *** rindolf left
[19:30] *** scrottie_ joined
[19:32] *** scrottie_ left
[19:32] <wknight8111_> so $string ~~ MyGrammar.new is the syntax that we should be using?

[19:32] <wknight8111_> as opposed to "MyGrammar" or "MyGrammar.TOP"?

[19:32] <moritz_> it is, but not yet in S05

[19:32] *** scrottie2 joined
[19:33] <wknight8111_> okay, so this whole area is still under design/review? I won't work on that chapter of the book then till I get some confirmation about it

[19:35] <moritz_> I proposed a patch,but the thread was warnocked

[19:35] <moritz_> http://www.nntp.perl.org/group/perl.perl6.language/2008/09/msg29636.html

[19:35] <lambdabot> Title: [PATCH] How to match against a grammar - nntp.perl.org, http://tinyurl.com/4rcksm

[19:36] <moritz_> wknight8111_: also the section that calls methods on $_ is misleading - $_ isn't `self' by default

[19:36] <wknight8111_> This is exactly the reason why I like writing my books in a wiki: When things change in the world, it's fast and easy for the book to change

[19:37] <moritz_> but it's hard to make money out of it ;-)

[19:38] * wknight8111_ isn't always in it for the money

[19:39] * wknight8111_ is in it for the good of all mankind

[19:39] *** raiph joined
[19:39] *** wknight8111_ is now known as wknight8111

[19:39] <masak> moritz_++ # Impatience workaround

[19:41] <moritz_> wknight8111: as long as they don't contradict as goals I'm in for both ;)

[19:42] <wknight8111> I'm young though, I have plenty of time to make money

[19:42] <wknight8111> I've got an entire $day_job for that purpose

[19:42] <moritz_> I don't ;)

[19:42] *** scrottie left
[19:43] <wknight8111> I come home at night and I'm tired of making money, I want to relax by writing code and writing books :)

[19:43] *** jovs left
[19:44] <moritz_> but that reminds me... I could dump the PODs from my perl-5-to-6 blog into the pugs repo

[19:49] <wknight8111> that would be nice!

[19:51] <moritz_> done

[19:51] <pugs_svn> r22305 | moritz++ | [docs] added POD files for the "perl-5-to-6" blog

[19:51] <wknight8111> moritz++

[19:52] *** pmurias joined
[19:52] *** sri_work_ left
[19:52] *** sri_work joined
[19:53] <pmurias> ruoso: the problem with a Prelude scope is that you can't unimport stuff

[19:55] *** scrottie2 is now known as scrottie

[20:04] *** scrottie left
[20:04] *** scrottie joined
[20:05] <scrottie> grr.

[20:08] <pmurias> is any one here familiar with pugs internals?

[20:08] *** sri_work left
[20:08] *** sri_work joined
[20:08] *** sri_work left
[20:08] *** sebastian_ joined
[20:09] *** sebastian_ left
[20:10] *** sebastianr joined
[20:10] *** sebastianr left
[20:11] *** sri_work joined
[20:12] <pmurias> ruoso: i think we will have to work around Pugs not putting 'my $foo' in the AST (as sadly is the case)

[20:14] <ruoso> pmurias, is it even possible to unimport things from the prelude?

[20:15] <ruoso> pmurias, but it doesn't even define in the block the local variable declarations?

[20:15] * ruoso eat something &

[20:18] *** masak left
[20:33] *** justatheory joined
[20:37] *** ruoso left
[20:43] *** alester joined
[20:46] *** meppl joined
[20:55] *** iblechbot left
[20:58] *** meppl left
[21:01] *** jferrero left
[21:10] *** ruoso joined
[21:34] <pmurias> pugs dosn't use PIL1 when executing programs?

[21:41] <pmurias> is my package GLOBAL {...} legal?

[21:42] <ruoso> pmurias, I don't think so

[21:43] *** wknight8111 left
[21:49] *** simcop2387 left
[21:52] *** baest_ left
[21:53] *** baest joined
[21:55] *** baest left
[21:56] *** simcop2387 joined
[21:58] *** baest joined
[22:10] *** cotto_w0rk left
[22:10] *** apeiron_ joined
[22:19] *** apeiron left
[22:21] *** BinGOs left
[22:39] <pugs_svn> r22306 | pmurias++ | [pugs/mold] pugs -Cm0ld handles multiple arguments to a method/function calls

[22:44] *** apeiron joined
[22:47] *** pmurias left
[22:52] *** apeiron_ left
[22:56] <raiph> diakopter: ping

[22:58] <raiph> @seen diakopter

[22:58] <lambdabot> diakopter is in #perl6. I don't know when diakopter last spoke.

[23:01] *** justatheory left
[23:04] <ruoso> @tell pmurias, how hard do you think it would be to have pugs running the mold instead of just emitting it?

[23:04] <lambdabot> Consider it noted.

[23:07] *** elmex left
[23:08] *** yahooooo left
[23:11] *** yahooooo joined
[23:17] *** wknight8111 joined
[23:38] *** Ontolog left
[23:42] <pugs_svn> r22307 | putter++ | [elf] Minor tweaks.

[23:51] <pugs_svn> r22308 | putter++ | [elfish/on_sbcl] Added basic OO.  Fleshing out language features.

[23:51] <pugs_svn> r22308 | putter++ | PrimitivesSBCL.pm has grown to include the elf_g Prelude.

[23:51] <pugs_svn> r22308 | putter++ | Progress on download and compilation of as yet unused CL libraries.

[23:51] <pugs_svn> r22308 | putter++ | README updated.

