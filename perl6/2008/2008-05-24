[00:01] *** fridim_ joined
[00:02] *** vixey left
[00:04] *** justatheory left
[00:19] *** cmarcelo joined
[00:19] *** FurnaceBoy left
[00:27] *** Limbic_Region joined
[00:31] *** fridim_ left
[00:37] *** nipotan is now known as nipotaway

[00:40] *** elmex left
[00:44] *** icwiener left
[00:45] *** meteorjay left
[01:04] *** Limbic_Region left
[01:14] *** Caelum left
[01:15] *** Caelum joined
[01:27] *** Ched- left
[01:27] *** Ched- joined
[01:41] *** penk left
[01:46] *** justatheory joined
[01:53] *** penk joined
[02:24] *** pen1 joined
[02:25] *** penk left
[02:48] *** qmole left
[02:55] *** jhorwitz left
[02:56] *** justatheory left
[03:09] *** alexe joined
[03:13] *** ludan left
[03:20] *** pen1 left
[03:22] *** penk joined
[04:59] *** eternaleye_ is now known as eternaleye

[05:06] *** Ched- left
[05:23] *** alexe left
[06:03] *** cmarcelo left
[06:15] *** TimToady joined
[06:19] *** meppl joined
[07:00] *** alexe joined
[07:10] *** alexe left
[07:31] *** _REPLeffect joined
[07:32] *** REPLeffect_ left
[07:35] <rakudo_svn> r27778 | pmichaud++ | [rakudo]:

[07:35] <rakudo_svn> r27778 | pmichaud++ | * Refactor lots of stuff dealing with Pairs, argument handling, and lists.

[07:35] <rakudo_svn> r27778 | pmichaud++ |   The resulting code is 127 lines shorter, more correct, gets rid

[07:35] <rakudo_svn> r27778 | pmichaud++ |   of lots of unwanted references to "infix:,", and helps get us closer

[07:35] <rakudo_svn> r27778 | pmichaud++ |   to being able to handle list assignment and list context.

[07:47] *** iblechbot joined
[08:09] *** pmurias joined
[08:09] <pmurias> spinclad: lval-accessor idiom? what it is?

[08:09] <pmurias> * what is it?

[08:09] *** elmex joined
[08:17] *** vixey joined
[08:33] <pmurias> vixey: would you prefer the ast dumping to use named arguments

[08:33] <pmurias> ?

[08:34] <vixey> I'm not sure

[08:36] <vixey> pmurias: is that a STD_red thing?

[08:39] <pmurias> no, i mean the Ast elf prints out when -v is called

[08:39] <pmurias> it's done in p6

[08:40] <pmurias> by Ast i refered to IRx1

[08:42] *** pjcj left
[08:44] <vixey> I wasn't able to figure out if STD_red or IRx1_FromAST or whichever stage post if was lost

[08:44] <vixey> but it doesn't seem to be around in the -v output

[08:50] <pmurias> by named params i meant the ast being dumped as CompUnit(statements=>[...],filename=>undef) instead of CompUnit([...],undef)

[08:51] <vixey> oh that sounds good

[09:04] *** qmole joined
[09:20] *** penk left
[10:03] <moritz_> rakudo: my $x = sub { say "foo" }; $x();

[10:03] <exp_evalbot> OUTPUT[foo␤]

[10:22] <moritz_> rakudo: my &x = sub { say "foo" }; x()

[10:22] <exp_evalbot> OUTPUT[foo␤]

[10:22] <moritz_> rakudo: my &x = 1; x()

[10:22] <exp_evalbot> OUTPUT[invoke() not implemented in class 'Integer'␤current instr.: '_block11' pc 39 (EVAL_11:20)␤

[10:23] <moritz_> rakudo: my @x = 1; say "still there"

[10:23] <exp_evalbot> OUTPUT[still there␤]

[10:28] *** chris2 joined
[10:38] *** jferrero joined
[10:41] *** lisppaste3 left
[10:42] *** b_jonas joined
[11:08] <moritz_> @tell masak I made an article for my homepage, not a perlmonks meditation; anyway, here it is: http://perlgeek.de/en/article/mutable-grammar-for-perl-6 - comments welcome

[11:08] <lambdabot> Consider it noted.

[11:13] *** ludan joined
[11:14] <ludan> hi

[11:14] <moritz_> hi ludan ;)

[11:22] <fullermd> moritz_: "<[A..Z> <[A..Z0..9_]>*"

[11:22] <fullermd> Missing a ] there?

[11:23] <moritz_> fullermd: yes, thanks

[11:23] *** Psyche^ joined
[11:25] <moritz_> fullermd: is the article understandable?

[11:26] *** ludan left
[11:26] <fullermd> Well, I haven't finished it; just grabbed a minute or two away from work to glance at it.

[11:26] <moritz_> ok

[11:26] <fullermd> The proto regex section is a little greek, but it feels like it'll yield to a more careful reading.

[11:27] <moritz_> perhaps I'll find a simpler/more verbose explanation

[11:27] <vixey> moritz cool!

[11:29] <fullermd> May have time later to go through it with more brain cells committed.

[11:40] *** Patterner left
[11:40] *** Psyche^ is now known as Patterner

[11:48] *** rindolf joined
[11:53] <pugs_svnbot> r20515 | pmurias++ | [elf] removed a unused hack

[11:53] <pugs_svnbot> r20515 | pmurias++ | the ast dump uses named arguments

[11:59] *** iblechbot left
[12:01] *** ruoso left
[12:04] *** ruoso joined
[12:06] <rakudo_svn> r27779 | jonathan++ | [rakudo] A few updates to Mutable PMC, and subclass it for Scalar, Array and Hash containers.

[12:07] <rakudo_svn> r27780 | jonathan++ | [rakudo] Tests for Mutable PMC.

[12:28] *** iblechbot joined
[12:39] <Patterner> <error revision="20515"> Generating precompiled Prelude, Math::Basic... pugs: Internal error: Invalid grammatical category: "Bool" </>

[12:39] <moritz_> Patterner: known error, nobody managed to fix it so far

[12:53] *** jferrero left
[13:00] *** lisppaste3 joined
[13:14] *** kane_ left
[13:31] *** kane_ joined
[13:31] <pmurias> moritz_: why did you use a letter for a hypotetical new sigil?

[13:32] <b_jonas> there was some old joke with internationalizing perl by replacing keywords with french variants and "$" with "Fr"

[13:34] <rindolf> b_jonas: £

[13:34] <rindolf> b_jonas: or ¥

[13:35] <rindolf> There's also the ILS sign.

[13:37] <pmurias> moritz_: it's really akin to using token sigil:sym<x> { <sym> } with x being easier to type

[13:37] <Patterner> Freedom Sigil!

[13:40] *** FurnaceBoy joined
[13:50] <pmurias> vixey: is there anything in elf which particulary annoys you?

[13:50] <pmurias> * particularly

[13:52] <vixey> pmurias: The link from STD_red to IRx1 is not clear to me

[13:53] <pmurias> STD_red emitts the match object as perl5 code which is eval'ed by Parser.pm

[13:54] <pmurias> IRx1_FromAST (created by IRx1_FromAst_create) then turnes that into IRx1

[13:55] <pmurias> * emits

[14:00] <pmurias> vixey: clearer now?

[14:00] <b_jonas> rindolf: it was before the introduction of EUR

[14:01] <rindolf> €

[14:02] <vixey> pmurias: cool ty, I might try to get post if working when I'm back home

[14:02] <b_jonas> let's use a funny space like as a silgil, e.g.  foo -- no-one would notice that

[14:02] <b_jonas> or, as p6 already has @@ as a silgil, what about %%

[14:02] <b_jonas> or &&

[14:05] *** hsv-al joined
[14:05] *** hsv-al left
[14:06] *** alc joined
[14:09] <moritz_> pmurias: I wasn't aware that ¢ is a letter actually ;)

[14:09] <pmurias> ł is a letter

[14:09] <moritz_> ah, that

[14:10] <moritz_> I randomly typed some charcates and took the weirdest-looking ;)

[14:14] <pmurias> i have an ł in my name

[14:18] <pugs_svnbot> r20516 | moritz++ | [fudge] add lives_ok and eval_lives_ok to fudge, bacek++

[14:19] <b_jonas> cent certainly isn't a letter

[14:23] <pmurias> it's much easier to pronounce too

[14:25] *** jhorwitz joined
[14:37] *** justatheory joined
[14:46] *** demq joined
[14:48] <pugs_svnbot> r20517 | moritz++ | [spec] fudged S29-list/{grep,sort}.t, patch curtesy of bacek++

[15:21] *** pmurias left
[15:26] *** rindolf left
[15:41] *** IllvilJa left
[15:44] *** alester_ joined
[16:06] *** rindolf joined
[16:07] *** _REPLeffect left
[16:14] <wolverian> hm. why is there /usr/bin/X11/perl on feather? just curious. 

[16:15] <moritz_> what's the output of 'dpkg -S /usr/bin/X11/perl'?

[16:16] <wolverian> not found

[16:16] <wolverian> that's why I asked :)

[16:16] <wolverian> someone *did* install 5.10 into /usr/local before debian got it in a package, perhaps it's a leftover from there (but why is it not in local?)

[16:18] *** FurnaceBoy left
[16:27] *** pmurias joined
[16:27] <pmurias> wolverian: i have a perl in /usr/bin/X11/ on a gentoo box too

[16:27] <moritz_> that's really weird if you ask me

[16:28] <wolverian> I don't have one on ubuntu 8.04 server 

[16:31] <pmurias> moritz_: it's a link to ../bin

[16:34] <pmurias> on feather it's a symbolic link to /usr/bin

[16:34] <moritz_> ok

[16:35] <Juerd> It doesn't appear to be installed by a debian package either

[16:36] *** demq left
[16:37] <moritz_> systems tend to collect garbage unless cared for very thouroughly

[16:37] <wolverian> it is? ls -l doesn't show it is..

[16:38] <pmurias> wolverian: depends how you call it

[16:38] <pmurias> ls -ld dosn't

[16:38] <wolverian> how's that? 

[16:39] <pmurias> but ls -l /usr/bin/ | grep X11 does

[16:39] <moritz_> that's weird

[16:39] <moritz_> isn't that even a bug in ls?

[16:40] <pmurias> likely

[16:41] *** polettix joined
[16:43] <b_jonas> no, how it quotes characters and how it columnates and colors CAN depend on whether the output is a terminal,

[16:43] <b_jonas> but you can override all of these via options

[16:44] <moritz_>        -d, --directory

[16:44] <moritz_>               list directory entries instead of contents, and do not  derefer‐

[16:44] <moritz_>               ence symbolic links

[16:44] <b_jonas> uh

[16:44] <wolverian> oh, *X11* is a symbolic link, not X11/perl

[16:44] <moritz_> it's all documented

[16:44] <b_jonas> sure

[16:44] <moritz_> yes

[16:44] <wolverian> that was confusing :)

[16:44] <b_jonas> you added -d

[16:46] <moritz_> ah right, ls -l X11 shows that it's a link

[16:46] <moritz_> but ls -l $normal_dir shows $normal_dir's contents

[16:46] <moritz_> that's inconsistent

[16:46] <moritz_> (but documented)

[16:47] <pmurias> it's not documented on my ls version

[16:48] <moritz_> uhm, you're right

[16:48] <pmurias> so it could be a documented bug

[16:50] *** chris2 left
[16:51] *** ewilhelm joined
[16:52] *** Psyche^ joined
[17:03] *** Patterner left
[17:03] *** Psyche^ is now known as Patterner

[17:12] *** wknight8111 left
[17:47] *** alester_ left
[17:47] *** alester_ joined
[17:48] *** rindolf left
[17:48] *** alester_ left
[17:48] *** alester_ joined
[17:51] <rakudo_svn> r27783 | jonathan++ | [rakudo] Add more tests to the known passing list. Patch courtesy of moritz++.

[17:51] <moritz_> YaY, karma in two channels ;)

[17:51] <moritz_> rakudo patches really pay off ;)

[17:54] *** slavi3 joined
[17:54] <rakudo_svn> r27784 | jonathan++ | [rakudo] Update makefile to build the scalar, array and hash PMCs that subclass Mutable.

[17:55] <slavi3> where can I go if I I am having trouble building pugs?

[17:55] *** mncharity joined
[17:55] <slavi3> Generating precompiled Prelude, Math::Basic... pugs: Internal error:Invalid grammatical category: "Bool" Please file a bug report.

[17:57] *** alester_ left
[17:57] <mncharity> stevan_: re 6/3, neat.  lunch or somesuch?

[17:59] *** polettix left
[17:59] <moritz_> slavi3: pugs is known to be broken. Try an older version with ghc 6.6.1

[17:59] <moritz_> slavi3: more specifically r19915 (from svn) works for me

[18:00] <slavi3> I see, will have to bother later then

[18:00] <slavi3> ty

[18:00] *** slavi3 left
[18:05] *** rindolf joined
[18:19] *** braceta joined
[18:26] *** braceta left
[18:27] <pmurias> mncharity: hi

[18:30] *** alc left
[18:30] <mncharity> hi ﻿pmurias

[18:31] <mncharity> have elf_f working again.  running regression tests.

[18:31] <rakudo_svn> r27787 | jonathan++ | [rakudo] Turns out that calling a PMC Scalar isn't such a good idea. :-)

[18:32] <pmurias> mncharity: is the hack pretty ;) ?

[18:32] <mncharity> re 'what to do', how about attribute defaults for Faster?  has $.x = 3;   It's also used to initialize array/hash, eg, has @.a;

[18:35] <mncharity> re pretty, not so much.  ﻿but needed things working again. ;)

[18:35] <pugs_svnbot> r20518 | pmurias++ | [elf] -v uses Perl::Tidy

[18:35] <mncharity> realized an lvalue sub could *also* support the (argument=>assignment) api.  with ~0 cost over lvalue.

[18:35] *** vixey left
[18:35] <mncharity> re Perl::Tidy, I thought kp6 found PT was a major performance hit?

[18:36] <pmurias> only on -v

[18:37] <pmurias> if you prefer to get badly formated code faster i can make it dependend on an env var or something

[18:38] <mncharity> re -v, ah, ok :)

[18:41] <mncharity> err, probably want emitter1 rather than emitter0.

[18:43] <pmurias> yes

[18:43] <pmurias> have you seen the improved -v output?

[18:43] <mncharity> not yet

[18:47] <pugs_svnbot> r20519 | putter++ | [elf] elf_f works again.  run-tests.result_faster updated.

[18:50] <pmurias> mncharity: (argument=>assignment) api, explain please

[18:51] <mncharity> re -v output... ++avoids having to look at the node fields; --much more verbose, so harder to eyeball large chunks of code.  a good tradeoff.  might want both at some point.

[18:53] <spinclad> pmurias: re lval-accessor:  accessor in lval position, $foo.part = newval  (as opposed to accessor-as-setter, $foo.part(newval) ).

[18:53] <spinclad> (just names, no new content)

[18:54] <pmurias> i know that, implemented that recently

[18:54] *** cognominal_ left
[18:54] <mncharity> re tidy, any needed p5 code should go into one of the preludes.  eval_perl5 should not appear elsewhere.  else it stops looking like a bootstrap.

[18:54] <mncharity> re api,

[18:57] <spinclad> moritz_: s/(changes )too( great care)/took/   # had to read this a few times to reparse and repair

[18:58] <moritz_> spinclad: thank, fixing now

[19:00] *** cognominal_ joined
[19:01] <pmurias> mncharity: could you continue please ;)

[19:04] *** FurnaceBoy joined
[19:05] <pugs_svnbot> r20520 | putter++ | [elf] elf_f_faster again uses lvalue subs.

[19:05] <mncharity> sorry, got sucked into code.

[19:05] <pmurias> np

[19:06] *** Psyche^ joined
[19:06] <mncharity> basically, Faster accessors can now use both the elf_f and elf_f_faster "assign to accessor method call" apis.

[19:06] <mncharity> hmm.... now is that really needed anymore....

[19:07] <mncharity> no

[19:07] <pmurias> bo

[19:07] <pmurias> * no

[19:07] <pmurias> was working on the same thing

[19:07] <pmurias> can i have a try?

[19:09] <mncharity> re no, err, empirically yes.  not sure why.  my code is in.  re try, feel free.  I'll move on..

[19:15] * pmurias would bet elf self-compilation is slower now

[19:18] *** Patterner left
[19:18] *** Psyche^ is now known as Patterner

[19:19] <mncharity> lvalues?

[19:20] * pmurias hopes not

[19:20] <mncharity> why slower?

[19:21] <mncharity> or "observed to seem slower"?

[19:22] <spinclad> not observed, expected?

[19:22] <mncharity> re lvalues/accessor assignment, unless p5 is nonlocally pessimizing upon seing them, it doesn't seem likely.  my impression is they are not much used in elf.

[19:22] <pmurias> used to self compile in 10sec in the old days, now 20

[19:23] <mncharity> parser cache?

[19:23] <pmurias> maybe just more code

[19:23] <moritz_> pmurias: well, but the code size increased as well, right?

[19:23] <pmurias> it's 40 withough the cache

[19:23] <mncharity> is the 20 repeatable?  ie, it's not just parser cache refresh?

[19:24] <mncharity> re "old days", oh, not a recent step-function change.  hmm...

[19:26] <mncharity> the elf_f startup times really tempt me to avoid regressing testing elf_f :/

[19:26] <mncharity> hmm, maybe time to rename the elf_f executable elf_f_simple or some such, to avoid ambiguity.

[19:27] <moritz_> mncharity: can't you do many parses with one startup? (to get many tests parse)

[19:27] <mncharity> the code size shouldn't have changed much.

[19:27] <moritz_> or is it the compied stuff that takes so long to execute?

[19:27] <pmurias> maybe the machine slowdowned :(

[19:30] <mncharity> ﻿moritz_: most tests still go boom.  hmm... might add a --avoid-going-boom-by-wrapping-file-in-eval argument... or, to help distinguish file results, perhaps a --ugly-speed-kludge-cooperating-with-run-tests argument... eep

[19:31] <mncharity> ﻿pmurias: could choose a fixed test object which could be compiled the whole time, time "old days" and current elf_f_faster, and if there's a difference, go looking inbetween. 

[19:32] <moritz_> bisecting?

[19:34] <mncharity> hmm... not sure the new IR layout is actually a worthwhile tradeoff in practice...

[19:34] <mncharity> maybe if it got split up onto separate lines like the Match output.

[19:35] <pmurias> do you have Perl::Tidy?

[19:37] <pmurias> it's supposed to formating

[19:38] <mncharity> looking...

[19:38] <mncharity> ah, no.

[19:39] <mncharity> so when the eval_perl5 gets moved into the prelude, PT should be added to the dependencies so things die cleanly if its missing.

[19:40] <mncharity> better simplicity of behavior than robustness in its absence.

[19:40] <mncharity> s/its/tolerating its/

[19:41] <pmurias> only speced things should be in the prelude

[19:41] <mncharity> no.

[19:41] <mncharity> the prelude is guided more by what degree of p5 independentness a bit of code has.

[19:42] <mncharity> specific p5 api dependence -> Emit; generic p5 backend -> PrimitiveP5; p6 -> Prelude.pm.  spec'ness isn't an issue.

[19:43] <mncharity> once rakudo can run p6 prelude, we may start working on a combined prelude.  but if so, that will be a separate thing.

[19:45] <mncharity> ooooo, tidy... ﻿pmurias++

[19:47] <mncharity> we aspire to specness... but basically, there is no existent compiler which can handle even a few lines of a real spec prelude.  that's been our long-term problem. :/

[19:48] *** ting joined
[19:49] *** agentz1 joined
[19:50] <pmurias> while the PT adapter could be moved to a p5 stuff file it shouldn't be in the prelude

[19:51] <pmurias> the prelude contains things which are part of the language

[19:52] <pmurias> and does eval_perl5 hurt in the perl5 emitter?

[19:52] <pugs_svnbot> r20521 | pmurias++ | [elf] the accessor hack is conditional

[19:54] <mncharity> we can call it something other than prelude if you like.  but all p5 has to be localized or it becomes rather less a bootstrap.  the only two places with p5 at the moment are Emit's prelude string, and PrimitivesP5.

[19:56] <pmurias> ok, it will matter when we have a non-p5 backend

[19:58] <mncharity> indeed.  one of the stronger arguments for starting a js or CL backend now is it will help force us to stay honest.

[19:58] <pmurias> do you now a good CL book?

[19:59] <mncharity> http://www.lisp.org/HyperSpec/FrontMatter/Chapter-Index.html ?

[19:59] <lambdabot> Title: CLHS: Chapter Index

[19:59] <mncharity> http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node1.html

[19:59] <lambdabot> Title: Contents

[20:00] <pmurias> would non-spec things having a HACK prefix be a good idea?

[20:01] <mncharity> http://www.gigamonkeys.com/book/

[20:01] <lambdabot> Title: Practical Common Lisp

[20:01] <pmurias> you have all of them?

[20:01] <mncharity> they are all online :)

[20:01] <mncharity> and free

[20:01] <mncharity> CL++

[20:02] <mncharity> haven't read ﻿Practical Common Lisp, but it's been well reviewed.

[20:03] <pmurias> my only experience with a () style language is scripting the gimp

[20:05] <mncharity> re HACK, basically I expect at most a stray fragment or two of code might survive from now until a spec-compliant p6.  even getting to pugs-level capability will involve quite a bit of churn.  so basically there's is a HACK prefix, attached to the entire codebase.  and things are just slowly made more test-passingly hackish.

[20:05] *** ting_ left
[20:05] *** agentzh left
[20:05] <mncharity> javascript?

[20:06] *** ewilhelm left
[20:06] <pmurias> did an AJAX app

[20:08] <pmurias> i can write js fairly fluently

[20:10] <pmurias> the JavaScript: The Definitive Guide is a good book

[20:11] *** FurnaceBoy left
[20:11] <mncharity> be nifty to have a js backend.  with better analysis and increasingly optimized spidermonkey, it seems it would need not even be slow like PIL2JS was.

[20:11] <pmurias> would a CL backend be much faster then the p5 one?

[20:12] <mncharity> very much so.  at least for compilation, like elf's currently, which is focused more on performance than p6 correctness.

[20:13] *** rindolf left
[20:13] <moritz_> maybe you could win avar for a CL backend? he said he'd work on one for kp6 as soon as it was bootstrapped

[20:13] <mncharity> there was a cl backend for kp6.  might look at that.  i assume it has some of the "primitives p5 has but cl doesn't" code which could just be copied.

[20:14] <mncharity> :)

[20:15] <mncharity> re things to do, another is to replace cruft like  $.var.sigil eq '$'

[20:16] <mncharity> in Emit with methods in/added-to Analysis.  eg, is_scalar.

[20:18] <mncharity> basically Emit should move gradually towards being a clean explanation of how to compile p6 on a p5 like language.  with Analysis providing the analysis and vocabulary to let that happen.

[20:18] <pmurias> should i remove non speced non used stuff as each_with_index?

[20:19] <mncharity> perhaps comment it out, rather than removing?

[20:19] * mncharity tries to remember what the p6 idiom is for each_with_index...

[20:19] <pmurias> to tempt the next person into using non-speced stuff ? ;)

[20:21] <pmurias> prototypes on methods don't make any sense

[20:21] <moritz_> mncharity: for @list Z 0 .. * -> $item, $index { ... }

[20:21] <moritz_> pugs: for <a b c>.kv -> $a, $b { say "$a|$b" }

[20:21] <exp_evalbot> OUTPUT[*** Not a keyed value: VList [VStr "a",VStr "b",VStr "c"]␤    at /tmp/MTL59ZMmCL line 1, column 5-16␤]

[20:22] *** cihhan joined
[20:22] <mncharity> hmm... with a $500 multicore machine,  make test_faster would only take a couple of minutes...

[20:22] *** b_jonas left
[20:23] <mncharity> re tempt, so if someone needs and goes looking for the capability, it's only an uncommenting away.

[20:23] *** Ingmar joined
[20:23] <cihhan> sorry I am new to Perl but I'd like to ask if tehre is any way to execute an exe and then read the outputs of this exe?

[20:24] <moritz_> cihhan: wrong channel, here is perl 6 compiler development

[20:24] <cihhan> ooohh, so sorry 

[20:24] <moritz_> cihhan: try #perl or #perlhelp or some channels on irc.perl.org

[20:24] <cihhan> thank u very much 

[20:25] <cihhan> good luck on ur works

[20:25] <cihhan> :)

[20:25] <pmurias> ;)

[20:25] <moritz_> thanks ;)

[20:25] <mncharity> ﻿for @list Z 0 .. * { ...$^each...$^index... }   err, that can't be the right placeholder variable format, can it?

[20:26] *** cihhan left
[20:27] <pmurias> that remindes me of $^whiteboard

[20:28] <moritz_> why not?

[20:29] <moritz_> for <a b c d e f> -> { say $^b, $^a; }

[20:29] <moritz_> pugs: for <a b c d e f> -> { say $^b, $^a; }

[20:29] <exp_evalbot> OUTPUT[*** Undeclared variable: ("$^b",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb679342c>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xb67932f4>}),("@_",PELexical {pe_type = (mkType "Array"), pe_proto = <Array:0xb67932c8>, pe_flags =

[20:29] <exp_evalbot> ..MkEntryFlags {ef_isContext = False}, pe_store = ...

[20:29] *** pjcj joined
[20:29] <moritz_> rakudo: for (1, 2, 3, 4) -> { say $^b, $^a; }

[20:29] <exp_evalbot> OUTPUT[21␤43␤]

[20:29] <moritz_> rakudo++

[20:31] <mncharity> ﻿pmurias: todo: add positional analysis to Analysis. :)

[20:31] <mncharity> *positionals

[20:32] <pmurias> mncharity: each_with_index in p6 is @a:kv

[20:35] <pmurias> mncharity: should i write the todo's down?

[20:36] <Eevee> rakudo: for (1, 2, 3) -> { say $^b, $^a; }

[20:36] <exp_evalbot> OUTPUT[21␤StopIteration␤current instr.: '_block11' pc 65 (EVAL_11:28)␤

[20:38] <mncharity> writing todos would be great.  the "what are some easy things for people to work on" idea

[20:38] <mncharity> README is almost empty in elf_f_src

[20:39] <mncharity> ﻿@a:kv not ﻿@a.kv ?

[20:40] <pmurias> yes

[20:40] <moritz_> pugs: for <a b c d>:kv -> $a, $b { say "$a|$b" }

[20:40] <exp_evalbot> OUTPUT[*** ␤    Unexpected ":kv"␤    expecting term postfix, operator or block construct␤    at /tmp/87QA4HWkND line 1, column 14␤]

[20:41] <moritz_> pmurias: what's the syntax called? or where can I read more about it?

[20:41] <pmurias> S09:527

[20:41] <pmurias> right to using string as array indexes

[20:41] <moritz_> pmurias: thanks, looking

[20:42] <pmurias> * next to

[20:42] <moritz_> ah, it's an adverb

[20:42] <moritz_> it'll take some time for me to get used to it ;)

[20:44] <mncharity> btw, elf ignoring :todo's is intentional.  so some Test tests will fail indefinitely.

[20:45] <pmichaud> in the suite I think we're planning to avoid :todo in favor of fudge anyway

[20:45] <mncharity> re get used to, oh, yeah.  I keep on thinking "some day I should actually try to learn p6". ;)

[20:45] <pmichaud> (assuming that was in reference to the suite)

[20:46] <mncharity> was, thanks :)

[20:47] <mncharity> also planning on avoiding fudge, at least until test coverage is pugs-like broad, and regression avoidance and test-loss is critical.

[20:47] <pmichaud> that works.

[20:48] <mncharity> * test-loss avoidance

[20:50] <mncharity> ﻿pmurias: something for the todo list, range op ..

[20:52] <mncharity> err, no, hmm, why didn't that work...

[20:53] <pmurias> what?

[20:54] <pmurias> mncharity: the match tree looks much more readable withought the text position and the matched text but looses some info

[20:57] <mncharity> re what?, turned out to be a $n<x> to $n.x regression.  I should probably do a code walk to look for other such.  :/  ah well.

[20:58] <mncharity> re tree readability, best bet is to do a string clipper.  ie, any string longer than n (say 30 chars) gets the middle clipped out of it and replaced by ... .

[20:58] <mncharity> or have two different dumper formats

[20:59] <mncharity> 60 chars?

[20:59] <mncharity> also can do s/\n/\\n/ which makes it more compact

[20:59] <pmurias> mncharity: two formats might be sensible

[21:01] <mncharity> more compact, but less useful for debugging, so yeah, perhaps two formats.  we'll probably need to decompose -v at some point.  -v -v2.  -vSomeParticularThingToBeVerboseAbout.  somesuch

[21:02] <pmurias> the char pos & orginal string is usefull for debugging parsing

[21:02] <pmurias> otherwise it's a hindrance

[21:05] <mncharity> err, when would one look at a Match tree except when ﻿debugging parsing, or looking a the Match result from a regex?

[21:05] <pmurias> ast->ir

[21:06] <pmurias> if the match is correct it's obvious which part belongs to what

[21:08] <pmurias> i mainly look at the Match out of curiosity

[21:08] <mncharity> ah, ok.

[21:08] <mncharity> what did you think of showcode?

[21:08] <mncharity> apropos ast->ir

[21:09] <pmurias> i'll look at it again

[21:10] <pmurias> i don't like pink

[21:11] <pmurias> the left pane turnes left when i click on it

[21:14] <mncharity> re pink, :)  could switch to external css. :)

[21:14] <mncharity> "﻿left pane turnes left", huh?

[21:15] <mncharity> or just change the color :)

[21:19] <pmurias> it turns red

[21:19] <mncharity> I don't understand...

[21:22] <pmurias> the text in the leftmost column turnes red permanently

[21:22] <mncharity> oh, I see.  "Match's clicked on in the left window turn red, but isn't changed back when you cli..."  what you said.

[21:22] <pmurias> yes

[21:24] <mncharity> yeah.  never got as far as dealing with that.  I'm wondering what you think more "big picture" rather than "details'.

[21:24] * mncharity crosses fingers, runs t/ yet again...

[21:25] <pmurias> can't think of a real use for it

[21:25] <pmurias> mncharity: have you changed anything significant?

[21:25] <mncharity> you mean since it was created? no

[21:25] <mncharity> re use, ah, ok

[21:26] <mncharity> primary motivation was to have a way to show non-local analysis info... but it doesn't do that yet so...

[21:27] <pmurias> it could used for exploring a file and seeing what it compiles to

[21:28] <pmurias> shower&

[21:29] <mncharity> yeah.  Emitter would have to add (lots of) position markers.

[21:29] <mncharity> maybe could wrap Emitter methods.

[21:40] <pmurias> the thing it you be usefull for is finding compiler errors in big pieces of code

[21:41] <pmurias> checking if the compiler compiles the area near the assumed bug correctly

[21:42] <pmurias> but it would need emitter integration

[21:52] <mncharity> *nod

[21:53] <pmurias> it could also be used as part of a "run elf in your browser and see how cool it is thingy"

[21:54] <pmurias> but that sort of things don't seem a worthwhile time use

[21:58] <mncharity> indeed

[21:58] * mncharity fights with svn... svn winning... :/

[22:03] <mncharity> weary yay.

[22:03] *** Psyche^ joined
[22:03] <pugs_svnbot> r20522 | putter++ | [elf] Better hash/array/pair literal support.  run-tests.result_faster updated.  And tweaks.

[22:04] <mncharity> perl6: +"foo"

[22:04] <exp_evalbot> kp6: OUTPUT[syntax error at position 0, line 1 column 0:␤+"foo␤^ HERE␤]

[22:04] <exp_evalbot> ..pugs: RESULT[0.0]

[22:04] <exp_evalbot> ..rakudo: RESULT[Method 'perl' not found for invocant of class 'Integer'␤current instr.: '_block11' pc 38 (EVAL_11:18)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 783 (src/PCT/HLLCompiler.pir:458)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1065 (src/PCT/HLLCompiler.pir:587)␤called

[22:04] <exp_evalbot> ..from Sub 'parrot;PCT::HLLCompiler;command_line' pc 1244 (...

[22:04] <exp_evalbot> ..elf: RESULT[syntax error at (eval 11) line 3, near "GLOBAL::statement_prefix:"␤ at ./elf_f_faster line 4371␤]

[22:05] <moritz_> perl6: say +"foo";

[22:05] <exp_evalbot> kp6: OUTPUT[␤]

[22:05] <exp_evalbot> ..pugs: OUTPUT[0␤]

[22:05] <exp_evalbot> ..rakudo: OUTPUT[0␤]

[22:05] <exp_evalbot> ..elf: OUTPUT[foo␤]

[22:05] <mncharity> ah, tnx

[22:11] <mncharity> nobody warned. :/

[22:12] <moritz_> mncharity: I guess that's because warnings aren't really specced all that much (and tested, for that matter)

[22:13] <pmurias> mncharity: it might usefull to do seperate compilation before attempting the CL backend to cut compile times

[22:18] <mncharity> because of sbcl?  it's fairly fast.

[22:19] <pmurias> i'll get to sleep now, as i'm only rambling and yawing ;)

[22:19] <pmurias> g'night

[22:19] *** pmurias left
[22:19] <moritz_> good night

[22:19] *** Patterner left
[22:19] *** Psyche^ is now known as Patterner

[22:20] <moritz_> rakudo: say 4.perl

[22:20] <exp_evalbot> OUTPUT[4␤]

[22:20] *** vixey joined
[22:20] <moritz_> then why did it say Method 'perl' not found for invocant of  class 'Integer

[22:21] <moritz_> earlier on?

[22:21] <mncharity> good night ﻿pmurias

[22:21] <moritz_> ah, something returned and Integer, not an Int

[22:21] <moritz_> rakudo: say  (+"foo").WHAT

[22:21] <exp_evalbot> OUTPUT[Int␤]

[22:22] <mncharity> Integer != Int ?

[22:22] <moritz_> intproto = p6meta.'new_class'('Int', 'parent'=>'Integer Any')

[22:22] <moritz_> rakudo: my Integer $x = 3; say $x.WHAT

[22:22] <exp_evalbot> OUTPUT[Int␤]

[22:22] <moritz_> rakudo: my Integer $x = 3; say $x.perl

[22:22] <exp_evalbot> OUTPUT[3␤]

[22:23] <mncharity> rakudo: my Int $x = 3; say $x.WHAT

[22:23] <exp_evalbot> OUTPUT[Int␤]

[22:23] <mncharity> rakudo: my Int $x = 3; say $x.perl

[22:23] <exp_evalbot> OUTPUT[3␤]

[22:24] <mncharity> pugs: +{3=>4,5=>6}

[22:24] <exp_evalbot> OUTPUT[*** ␤    Unexpected end of input␤    Closing hash curly may not terminate a line;␤    please add a comma or a semicolon to disambiguate␤    at /tmp/Y4YMUi0HGt line 2, column 1␤]

[22:24] <mncharity> pugs: my %h = (3=>4,5=>6); say +%h

[22:24] <exp_evalbot> OUTPUT[2␤]

[22:27] <mncharity>  /me so wants to do  multi prefix:<+> as a real multi... but just don't want a dependency on mmd working yet... :/

[22:39] <moritz_> mncharity: for now you can just make prefix:<+>($x) call $x.Num, that's also correct

[22:51] *** iblechbot left
[22:52] *** jisom joined
[22:57] <mncharity> re .Num, oh, neat.  tnx.

[23:00] <mncharity> perl6: +(:a<3>)

[23:00] <exp_evalbot> kp6: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤   KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bdac)', 'APPLY', 'HASH(0x8e5335c)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[23:00] <exp_evalbot> ..main::DISPATCH('HASH(0x824bdac)', 'APPLY', 'HASH(0x8e5335c)') ca...

[23:00] <exp_evalbot> ..pugs: RESULT[2]

[23:00] <exp_evalbot> ..rakudo: OUTPUT[Null PMC access in type()␤current instr.: 'parrot;PAST::Compiler;keyed' pc 6062 (src/PAST/Compiler.pir:1694)␤called from Sub 'parrot;PAST::Compiler;post_children' pc 1671 (src/PAST/Compiler.pir:362)␤called from Sub 'parrot;PAST::Compiler;call' pc 2766

[23:00] <exp_evalbot> ..(src/PAST/Compiler.pir:780)␤called from Sub 'parrot;PAST::Compiler;post_children' pc 167...

[23:00] <exp_evalbot> ..elf: OUTPUT[Unquoted string "a" may clash with future reserved word at (eval 10) line 3.␤]

[23:05] <mncharity> ok, let's see...

[23:06] <mncharity> int is Int ?

[23:06] <mncharity> err, no.  int does Int ?

[23:06] <mncharity> and what is Integer ?

[23:10] <mncharity> what is the relationship between Bit Int and Num?  Do they have a common role other than Any?

[23:14] <mncharity> pugs: my $x = :a<3>; say $x.WHAT; say +$x;

[23:14] <exp_evalbot> OUTPUT[Pair␤2␤]

[23:14] <mncharity> rakudo: my $x = :a<3>; say $x.WHAT; say +$x;

[23:14] <exp_evalbot> OUTPUT[Null PMC access in type()␤current instr.: 'parrot;PAST::Compiler;keyed' pc 6062 (src/PAST/Compiler.pir:1694)␤

[23:22] <mncharity> sigh.  neither roles nor recursive inheritance in p5. :/

[23:33] <mncharity> rakudo: Any.can('foo')

[23:33] <exp_evalbot> OUTPUT[Method 'can' not found for invocant of class ''␤current instr.: '_block11' pc 35 (EVAL_11:18)␤

[23:33] <mncharity> rakudo: Object.can('foo')

[23:33] <exp_evalbot> OUTPUT[Method 'can' not found for non-object␤current instr.: '_block11' pc 35 (EVAL_11:18)␤

[23:42] <pugs_svnbot> r20523 | putter++ | [elf] STRING now inherits from Str, etc.  .Num added to Prelude.  prefix:<+> calls .Num .  Emit of Pair() tweaked.

