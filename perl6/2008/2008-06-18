[00:05] *** eternaleye_ left
[00:05] *** eternaleye_ joined
[00:24] *** deven_ left
[00:30] * DietCoke yawns

[00:38] <diakopter> DietCoke: auction won't start for a while, I think

[00:38] <DietCoke> <shrug> I ain't goin. =-)

[00:40] *** cmarcelo left
[00:45] *** jferrero left
[00:58] *** agentzh left
[01:10] *** agentzh joined
[01:39] <diakopter> kolibrie: yo

[01:41] *** penk joined
[01:45] *** Blasi left
[01:56] *** Lunchy left
[02:05] *** Lorn left
[02:31] *** pbuetow left
[02:42] <kolibrie> diakopter: yo

[03:04] *** elmex_ joined
[03:20] *** elmex left
[03:20] *** elmex_ is now known as elmex

[03:40] *** nekobaka joined
[03:46] *** rindolf joined
[03:52] *** Southen left
[03:54] *** stevan_ joined
[03:56] *** Southen joined
[04:34] *** Alias_ joined
[04:44] *** kyon joined
[05:00] *** Alias_ left
[05:17] *** BinGOs_ joined
[05:20] *** stevan_ left
[05:29] *** BinGOs left
[05:35] *** kyon left
[05:44] *** alc joined
[06:19] *** bacek joined
[06:28] *** Jedai joined
[06:35] *** penk left
[06:35] *** penk joined
[06:56] *** iblechbot joined
[06:57] *** Psyche^ joined
[07:00] *** xinming_ left
[07:00] *** xinming joined
[07:08] *** Patterner left
[07:08] *** Psyche^ is now known as Patterner

[07:24] *** Jedai left
[07:27] *** revdiablo left
[07:29] *** masak joined
[07:29] *** Jedai joined
[07:37] *** BinGOs_ is now known as BinGOs

[08:00] *** bacek left
[08:03] *** bacek joined
[08:05] *** bacek left
[08:20] *** DietCoke left
[08:21] *** nipotaway is now known as nipotan

[08:37] *** cookys joined
[08:43] *** cookys left
[08:43] *** cookys joined
[08:44] *** pjcj left
[08:44] *** pjcj joined
[09:06] *** masak left
[09:13] *** lumi left
[09:15] *** lumi joined
[09:45] *** sri_work joined
[09:54] *** alc left
[09:56] *** chris2 joined
[10:00] *** luqui joined
[10:15] *** lumi_ joined
[10:18] *** meteorjay left
[10:19] *** vixey joined
[10:22] *** lumi__ joined
[10:34] *** lumi left
[10:36] *** lumi_ left
[10:44] *** lumi__ left
[10:51] *** lumi joined
[11:00] *** xinming left
[11:01] *** xinming joined
[11:08] *** pmurias joined
[11:08] <pmurias> TimToady: why do you mangle print instead of using perl5.10's say?

[11:13] *** lumi left
[11:18] *** lumi joined
[11:24] *** kanru left
[11:30] *** kanru joined
[11:37] *** meteorjay joined
[11:40] *** icwiener joined
[11:47] *** vixey left
[12:01] *** DietCoke joined
[12:03] *** chris2 left
[12:10] *** kanru left
[12:13] *** iblechbot left
[12:17] *** xinming left
[12:18] *** xinming joined
[12:19] *** lumi left
[12:21] *** kanru joined
[12:23] *** a-jing joined
[12:23] *** a-jing left
[12:23] *** sri_work left
[12:25] *** b_jonas joined
[12:39] *** redicaps left
[13:01] *** Lunchy joined
[13:05] *** pbuetow joined
[13:27] *** penk left
[13:53] *** TJCRI joined
[14:06] *** iblechbot joined
[14:21] *** Lorn joined
[14:27] <TimToady> pmurias: er, because I forgot that 5.10 has say...

[14:30] <diakopter> sub say (@) { print($_,"\n") for @_ }

[14:31] <Lorn> TimToady: does today will have IRC on tv? hehe 

[14:32] <cj> dvad`1trtdrqdrxtzyuogrtbdgty5fty784iop[kp/l.;oty8uieq/u'kpouy9nghuhguivhbjigknj

[14:32] <Eevee> cj: this is irc, not a malbolge interpreter

[14:33] <cj> scarlet is learning to type

[14:34] <cj> ... so is her little sister... I have to be careful what state I leave things in...

[14:35] <spinclad> diakopter: sub say (@) { print($_) for @_; print("\n"); }

[14:35] <diakopter> spinclad: ok; that

[14:36] <rakudo_svn> r28508 | pmichaud++ | [rakudo]:

[14:36] <rakudo_svn> r28508 | pmichaud++ | * Update docs/spectest-progress.csv to 2008-06-18.

[14:52] *** Auzon1 joined
[15:05] <moritz_> pmurias: re moving perlhints out of STD, you can, but it would make it harder to keep those up-to-date

[15:05] <moritz_> pmurias: the last time I discussed that (on p6l or p6c) nobody objected to having them in there

[15:06] *** bacek_ left
[15:08] *** Auzon left
[15:10] <Gothmog_> diakopter, spinclad: Shouldn't that be more like: sub say { local $\ = "\n"; print @_ }

[15:10] <pugs_svnbot> r20859 | moritz++ | [spec] fixed and fuged chop.t, patch courtesy of Raphael Descamps

[15:10] *** alanhaggai joined
[15:16] <pugs_svnbot> r20860 | pmurias++ | [STD5_dump_match] move out the actual match dumping into DumpMatch.pm

[15:20] <pmurias> moritz_: is anyone other the you keeping the up to date?

[15:20] <pmurias> * then

[15:20] <diakopter> keeping the what?

[15:20] <pmurias> perlhints

[15:21] <moritz_> pmurias: no

[15:21] <moritz_> pmurias: if it annoys you, move it to a single file docs/perlhints or something

[15:22] <pmurias> i'll do it

[15:22] <pmurias> are they used for anything?

[15:23] <moritz_> at the moment just a proof-of-concept search

[15:37] *** REPLeffect_ joined
[15:37] <pugs_svnbot> r20861 | moritz++ | [spec] fiddled a bit with comb.t 

[15:38] <pmurias> where should i banish them to?

[15:38] <moritz_> docs/perlhints perhaps

[15:38] <pmurias> seen the anwser

[15:38] <pmurias> ;)

[15:38] <moritz_> ;)

[15:39] <moritz_> or misc/perlhints/data or some such

[15:46] <pugs_svnbot> r20862 | pmurias++ | moved perlhints out of STD.pm

[15:46] <pmurias> nobody stops you from adding them while editing and banishing them before ci

[15:47] <pmurias> why haven't you used them for something more complex then the proof-of-concept misc/perlhints? lack of tuits?

[15:47] <moritz_> mostly, yes

[15:47] <moritz_> rakudo's parse tree doesn't tell me which rule matched

[15:48] <moritz_> and I didn't look at other compilers in-depth yet

[15:48] <Lorn> where i can see the last commit comments in the svn? does exists a something like svnweb of the repository ? 

[15:49] <moritz_> Lorn: on irc.pugscode.org all the revisions are links to their changesets

[15:49] <pmurias> do you have a working copy?

[15:49] <moritz_> the last one is http://dev.pugscode.org/changeset/20862 for example

[15:49] <lambdabot> Title: Changeset 20862 - Pugs - Trac

[15:49] <moritz_> pmurias: of what?

[15:49] <diakopter> TimToady: rjbs was just talking about role factories using Sub::Exporter; I was thinking that could be used to create parametric roles in Moose...

[15:50] <moritz_> pmurias: misc/perlhints/ contains a very simple parser of the hint files

[15:50] <Lorn> pmurias: yes, but i prefer to view the comments in the web :P

[15:50] <moritz_> pmurias: you can enter '+', and it lists all tokens that contain a literal +

[15:51] <TimToady> problem with parametric roles is that different types of arguments need different treatement

[15:51] <TimToady> *treatment

[15:51] <TimToady> (from the viewpoint of p5)

[15:51] <moritz_> pmurias: but the long term goal is to have it spit out html, where the whole source code is clickable, and each piece can shows the associated perlhint

[15:51] <TimToady> biab &

[15:52] <pmurias> moritz_: not reall hard

[15:52] <pmurias> * really

[15:52] *** Jedai left
[15:53] <moritz_> pmurias: and TimToady assured me that this information (ie parse tree + which text was matchted by what) should somehow be available for third party tools 

[15:53] <moritz_> although it's not yet specced

[15:53] <pmurias> the match object is speced

[15:53] <moritz_> yes, but it doesn't contain the name of the matching rule, for instance

[15:55] <pmurias> it's not nessesary

[15:57] <moritz_> not necessary if I store the whole parse tree hirarchy

[15:57] <pugs_svnbot> r20863 | moritz++ | [perlhints]

[15:57] <pugs_svnbot> r20863 | moritz++ |  * more data

[15:57] <pugs_svnbot> r20863 | moritz++ |  * removed ^=begin perlhints and ^=end perlhints lines

[15:57] <moritz_> but I would like to avoid that

[16:00] <pmurias> why?

[16:00] <moritz_> because STD.pm changes, and I only want to update perlhints if the names of the rules chang, not the structure

[16:01] <moritz_> and because I have no idea how stuff will appear in the parse tree that is matched by the bottom-up parser

[16:02] *** lumi joined
[16:02] <pmurias> have you seen STD5_dump_match?

[16:03] *** a-jing joined
[16:03] <pugs_svnbot> r20864 | pmichaud++ | Use "#?rakudo 2 skip ..."  instead of "#?rakudo skip 2 ..."

[16:04] *** a-jing left
[16:04] * moritz_ b0rked that. sorry.

[16:05] *** Jedai joined
[16:05] <pmurias> it would be trivial to put a <span class="foo">...</span> around the text wrapped by rule foo, and then you could add a gui in js

[16:06] <moritz_> sounds like a plan ;)

[16:07] <moritz_> you'd need some name mangling for stuff like infix:<+>

[16:08] <moritz_> don't think that's a valid css class name ;)

[16:09] <pugs_svnbot> r20865 | pmurias++ | removed a debuggin leftover

[16:09] <pmurias> mangling routines are numerous

[16:11] <moritz_> @tell Auzon in types.t you used eval_dies_ok without quoting the test as a string. The lives_ok tests are fine, though

[16:11] <lambdabot> Consider it noted.

[16:11] *** alanhaggai_ joined
[16:12] *** alanhaggai left
[16:13] <Auzon1> oops, sorry moritz_. ;)

[16:13] *** Auzon1 is now known as Auzon

[16:13] <moritz_> Auzon: no problem, just fix it ;)

[16:13] <moritz_> btw I'm very pleased with the tests you checked in last week

[16:14] <Auzon> Thanks :)

[16:14] <lambdabot> Auzon: You have 1 new message. '/msg lambdabot @messages' to read it.

[16:14] <Auzon> @messages

[16:14] <lambdabot> moritz_ said 2m 47s ago: in types.t you used eval_dies_ok without quoting the test as a string. The lives_ok tests are fine, though

[16:17] *** alanhaggai_ is now known as alanhaggai

[16:20] *** IllvilJa joined
[16:27] <pugs_svnbot> r20866 | pmichaud++ | Rakudo doesn't implement comb.

[16:28] <moritz_> pmichaud: why not just remove it from spectest_regression?

[16:28] *** luqui left
[16:30] <pugs_svnbot> r20867 | Auzon++ | [gsoc_spectest] fixed function misuse spotted by moritz++

[16:30] <Auzon> I also changed a rakudo fudge message to be more accurate

[16:33] *** cathyal joined
[16:37] *** kanru left
[16:48] *** IllvilJa left
[16:50] *** rindolf left
[16:54] *** cathyal left
[16:57] <pugs_svnbot> r20868 | deven++ | Added myself to AUTHORS file.

[16:59] *** alanhaggai left
[17:00] <pugs_svnbot> r20869 | deven++ | Added quotes in case fudge path has spaces. (Tested on Linux and Win32 with Strawberry Perl environment, reviewed by Patrick Michaud and Jerry Gay.)

[17:01] <moritz_> deven++

[17:01] *** alanhaggai joined
[17:03] *** nipotan is now known as nipotaway

[17:05] *** saladsn joined
[17:09] *** kanru joined
[17:17] *** barney joined
[17:18] *** iblechbot left
[17:19] *** cjfields joined
[17:30] *** Southen left
[17:32] *** FurnaceBoy joined
[17:33] *** pmurias left
[17:49] *** Southen joined
[17:53] *** icwiener_ joined
[18:01] *** sri_work joined
[18:07] *** iblechbot joined
[18:09] *** toddr joined
[18:10] *** icwiener left
[18:10] *** sri_work_ joined
[18:15] *** toddr left
[18:22] *** nipotaway is now known as nipotan

[18:23] *** toddr joined
[18:24] *** toddr left
[18:25] *** sri_work left
[18:26] *** toddr joined
[18:32] <moritz_> #parrot-soc in 1h

[18:32] <moritz_> erm, #perl6-soc of course ;)

[18:35] <smtms> in 1h? what does that mean?

[18:35] <Auzon> in one hour

[18:35] <Auzon> We're having a meeting.

[18:35] <Auzon> Anyone is welcome to attend :)

[18:35] <smtms> nice :-)

[18:37] <moritz_> only interesting if you care about perl6 test suite

[18:37] <TimToady> ~.

[18:38] <moritz_> you know you're a nerd if you read ~. as "quit ssh connection" ;-)

[18:38] *** ovid joined
[18:39] <pasteling> "ovid" at 91.84.126.204 pasted "Cannot make perl6 on OS X" (6 lines, 288B) at http://sial.org/pbot/31353

[18:40] <ovid> I just grabbed and compiled the latest parrot from svn.

[18:41] <moritz_> ovid: maybe try #parrot on irc.perl.org, your chances are better there

[18:41] <ovid> Thanks. I'll try that :)

[18:41] <moritz_> that being said, the perl6 executable has always been a bit buggy

[18:41] <moritz_> use ../../parrot perl6.pbc if you want quick results

[18:44] *** toddr left
[18:49] *** toddr joined
[18:50] *** toddr left
[18:56] *** toddr joined
[18:56] <pugs_svnbot> r20870 | Auzon++ | [gsoc_spectest] adding more tests for S02 variable name syntax. (added 2 tests)

[19:02] *** toddr left
[19:07] *** IllvilJa joined
[19:14] *** schmalbe joined
[19:15] *** schmalbe left
[19:18] *** schmalbe joined
[19:23] *** IllvilJa left
[19:23] *** gbacon left
[19:23] *** Schwern joined
[19:26] *** pmurias joined
[19:27] *** Schwern left
[19:27] *** Schwern joined
[19:28] <pmurias> STD_red-- # returning matches in a stupid,ambiguous and memory inefficient way

[19:28] <pugs_svnbot> r20871 | Auzon++ | [gsoc_spectest] added more variable name lookup tests for S02. (added 9 tests)

[19:28] <pmurias> STD_red-- # in an ugly format

[19:28] <pmurias> @karma STD_red

[19:28] <lambdabot> STD_red has a karma of -2

[19:29] <Auzon> heh.

[19:29] <Auzon> Inanimate things usually end up with slightly negative karma, from what I've seen

[19:29] <Auzon> while people end up with widely positive karma

[19:30] *** gbacon joined
[19:30] <moritz_> @karma ack

[19:30] <lambdabot> ack has a karma of 2

[19:30] <moritz_> ack++ # really cool tool ;)

[19:30] *** barney left
[19:30] <moritz_> @karma C

[19:30] <lambdabot> C has a karma of 15

[19:30] <moritz_> C has the slight advantage of a dialect not named C--

[19:30] <pmurias> moritz_: there is a C-- language

[19:31] *** ovid left
[19:32] <moritz_> pmurias: but it's not so often mentioned here ;)

[19:34] <Auzon> Indeed ack++ # better than grep, more concise than writing my own one-liner

[19:38] <pmurias> Auzon: not giving people negative karma keep the atmosphere positive

[19:38] <Auzon> Indeed, just an observation.

[19:43] <pmurias> not sure how to name an elf branch

[19:43] <moritz_> pixie

[19:44] <moritz_> woodelf

[19:44] <pmurias> ;)

[19:44] <moritz_> ork (they were elfes once, right? ;)

[19:44] <pmurias> no, orcs were elves

[19:45] <moritz_> ork, not orc ;)

[19:45] * moritz_ would also suggest zwoelf

[19:46] <moritz_> because elf is also the German word for the number 11, and zwölf (or zwoelf) is the word for 12

[19:50] *** Chillance joined
[19:54] * pmurias likes pixie most

[19:54] * Auzon too

[19:56] <pmurias> elf boostrap is broken :(

[19:58] *** REPLeffect_ left
[20:02] *** donaldh joined
[20:13] *** Schwern left
[20:16] <Auzon> perl6: say(1 .. 10 :by(3))

[20:16] <p6eval> kp6 r20871: OUTPUT[syntax error at position 3, line 1 column 3:␤say(1 .. 10 :by(3)␤   ^ HERE␤]

[20:16] <p6eval> ..pugs: OUTPUT[*** Named argument found where no matched parameter expected: ("by",Ann (Pos (MkPos "/tmp/lb1r3mZz0k" 1 17 1 18)) (Val (VInt 3)))␤    at /tmp/lb1r3mZz0k line 1, column 1 - line 2, column 1␤]

[20:16] <p6eval> ..rakudo r28526: OUTPUT[Statement not terminated properly at line 1, near "(1 .. 10 :"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:16] <p6eval> ..elf r20871: OUTPUT[Parse error in: /tmp/CxFpxAK72I␤panic at line 1 column 18 (pos 18): No previous operator visible to adverbial pair ([#<Match:0xb7cae2f4 @on_str="say(1 .. 10 :by(3))", @from=12, @to=18, @bool=true, @hash={:value=>#<Match:0xb7cae330 @on_str="say(1 .. 10 :by(3))", @from=13,

[20:16] <p6eval> ..@to=18, ...

[20:17] <TimToady> I don't think anyone really implements adverbs yet

[20:18] <Auzon> perl6: q[test].say

[20:18] <moritz_> there's a lot of things nobody really implements atm

[20:18] <p6eval> kp6 r20871: OUTPUT[syntax error at position 7, line 1 column 7:␤q[test].sa␤       ^ HERE␤]

[20:18] <p6eval> ..pugs: OUTPUT[test␤]

[20:18] <p6eval> ..rakudo r28526: OUTPUT[Statement not terminated properly at line 1, near "[test].say"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:18] <p6eval> ..elf r20871: OUTPUT[Undefined subroutine &GLOBAL::q called at (eval 115) line 3.␤ at ./elf_f_faster line 4656␤]

[20:20] <Auzon> perl6: sub foo {"bar"}; say "test &foo";

[20:20] <p6eval> kp6 r20871: OUTPUT[test &foo␤]

[20:20] <p6eval> ..pugs: OUTPUT[test &foo␤]

[20:20] <p6eval> ..rakudo r28526: OUTPUT[test &foo␤]

[20:20] <p6eval> ..elf r20871: OUTPUT[test &foo␤]

[20:20] *** chris2 joined
[20:20] <moritz_> perl6: sub foo {"bar"}; say "test {foo}"

[20:20] <p6eval> kp6 r20871: OUTPUT[test {foo}␤]

[20:20] <p6eval> ..pugs: OUTPUT[test bar␤]

[20:20] <p6eval> ..rakudo r28526: OUTPUT[test bar␤]

[20:20] <p6eval> ..elf r20871: OUTPUT[test {foo}␤]

[20:20] <Auzon> perl6: sub foo {"bar"}; say "test &foo()";

[20:20] <p6eval> kp6 r20871: OUTPUT[test &foo()␤]

[20:20] <p6eval> ..pugs: OUTPUT[test bar␤]

[20:20] <p6eval> ..rakudo r28526: OUTPUT[test &foo()␤]

[20:20] <p6eval> ..elf r20871: OUTPUT[test &foo()␤]

[20:20] <moritz_> rakudo++

[20:20] <moritz_> pugs++

[20:21] <moritz_> uhm, is that actually specced? ;)

[20:21] <Auzon> Yes.

[20:22] *** jferrero joined
[20:22] <moritz_> should be easy to implement if interpolating closures are already implemented

[20:22] <moritz_> it's just syntactic sugar, after all

[20:22] <Auzon> q:f, implied by q:qq, which is done by ""

[20:24] <moritz_> all those quote things are really nice and very flexible

[20:24] <moritz_> but I don't really use them, because I've not yet learned them

[20:25] <moritz_> having an implementation might help

[20:25] <Auzon> perl6: my $alpha = "foo"; my @beta = <bar baz>; say Qs/$alpha @beta/;

[20:25] <p6eval> kp6 r20871: OUTPUT[syntax error at position 60, line 1 column 60:␤my $alpha = "foo"; my @beta = <bar baz>; say Qs/$alpha @beta/␤                                                            ^ HERE␤]

[20:25] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "@beta"␤    expecting operator, ":" or ","␤    at /tmp/WlFWXy86lF line 1, column 56␤]

[20:25] <p6eval> ..rakudo r28526: OUTPUT[Statement not terminated properly at line 1, near "@beta/;"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:25] <p6eval> ..elf r20871: OUTPUT[Parse error in: /tmp/BFIlMP99M0␤panic at line 1 column 41 (pos 41): Can't understand next input--giving up␤WHERE:  "foo"; my @beta = <bar baz>; say Qs/$alpha @beta/;␤WHERE:                              /\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:76:in

[20:25] <p6eval> ..`scan_uni...

[20:26] <moritz_> rakudo: say Complex ~~ Num

[20:26] <p6eval> rakudo r28526 OUTPUT[0␤]

[20:26] <moritz_> rakudo: say Num ~~ Complex

[20:26] <p6eval> rakudo r28526 OUTPUT[0␤]

[20:27] <moritz_> if that's intentential, the specs need updates

[20:27] <moritz_> specifically, all these nice multis need a Complex variant

[20:30] <Auzon> perl6: my $a = "a"; say "$a.ord";

[20:30] *** IllvilJa joined
[20:30] <p6eval> kp6 r20871: OUTPUT[a.ord␤]

[20:30] <p6eval> ..pugs: OUTPUT[a.ord␤]

[20:30] <p6eval> ..rakudo r28526: OUTPUT[a.ord␤]

[20:30] <p6eval> ..elf r20871: OUTPUT[$a.ord␤]

[20:30] <Auzon> bzzt. all wrong!

[20:30] <Auzon> oh wait

[20:30] <Auzon> perl6: my $a = "a"; say "$a.ord(0";

[20:30] <Auzon> perl6: my $a = "a"; say "$a.ord()";

[20:30] <p6eval> kp6 r20871: OUTPUT[a.ord(0␤]

[20:30] <p6eval> ..pugs: OUTPUT[$a.ord(0␤]

[20:30] <p6eval> ..rakudo r28526: OUTPUT[a.ord(0␤]

[20:30] <p6eval> ..elf r20871: OUTPUT[$a.ord(0␤]

[20:30] <p6eval> kp6 r20871: OUTPUT[a.ord()␤]

[20:30] <p6eval> ..pugs: OUTPUT[97␤]

[20:30] <p6eval> ..rakudo r28526: OUTPUT[a.ord()␤]

[20:30] <p6eval> ..elf r20871: OUTPUT[$a.ord()␤]

[20:31] <Auzon> perl6: my @a = <a b c>; say "@a"; say "@a[]";

[20:31] <p6eval> kp6 r20871: OUTPUT[@a␤a b c␤]

[20:31] <p6eval> ..pugs: OUTPUT[@a␤a b c␤]

[20:31] <p6eval> ..rakudo r28526: OUTPUT[@a␤@a[]␤]

[20:31] <p6eval> ..elf r20871: OUTPUT[@a␤@a[]␤]

[20:33] <moritz_> interpolation is like russian roulette

[20:33] <Auzon> No one wins at the end?

[20:34] <moritz_> well, $larry wins in the end ;)

[20:36] <Auzon> It's going to be fun acking for these things to see what's tested. :P

[20:36] <jferrero> perl6: my @a = <a b c>; print "@a"

[20:36] <p6eval> kp6 r20871: OUTPUT[@a]

[20:36] <p6eval> ..pugs: OUTPUT[@a]

[20:36] <p6eval> ..rakudo r28526: OUTPUT[@a]

[20:36] <p6eval> ..elf r20871: OUTPUT[@a]

[20:37] <moritz_> at least they all get that one right

[20:37] <jferrero> perl6: my @a = <a b c>; print @a

[20:37] <p6eval> kp6 r20871: OUTPUT[a b c]

[20:37] <p6eval> ..pugs: OUTPUT[abc]

[20:37] <p6eval> ..rakudo r28527: OUTPUT[abc]

[20:37] <p6eval> ..elf r20871: OUTPUT[ARRAY(0x87dbc2c)]

[20:37] <jferrero> ha!

[20:38] <Auzon> nice one, elf.

[20:38] <moritz_> ;)

[20:38] <Eevee> ha

[20:38] <rhr_> perl6: say 1.e+0

[20:38] <p6eval> kp6 r20871: OUTPUT[no method 'e' in Class 'Int'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤  

[20:38] <p6eval> ..pugs: OUTPUT[*** No such method in class Int: "&e"␤    at /tmp/OdndVNDE1U line 1, column 5 - line 2, column 1␤]

[20:38] <p6eval> ..rakudo r28527: OUTPUT[Method 'e' not found for invocant of class 'Int'␤current instr.: '_block11' pc 31 (EVAL_12:17)␤

[20:38] <p6eval> ..elf r20871: OUTPUT[Can't call method "e" without a package or object reference at (eval 113) line 3.␤ at ./elf_f_faster line 4656␤]

[20:38] <Eevee> that fills my whole screen

[20:39] *** toddr joined
[20:39] <Auzon> perl6: say "$?PERLVER"

[20:39] <p6eval> kp6 r20871: OUTPUT[$?PERLVER␤]

[20:39] <p6eval> ..pugs: OUTPUT[*** Undeclared variable: ("$?PERLVER",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb689619c>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xb68a1638>}),("@_",PELexical {pe_type = (mkType "Array"), pe_proto = <Array:0xb689...

[20:39] <p6eval> ..rakudo r28527: OUTPUT[Scope  not found for PAST::Var '$PERLVER'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤

[20:39] <p6eval> ..elf r20871: OUTPUT[$?PERLVER␤]

[20:39] <jferrero> perl6: print 1e+0

[20:39] <p6eval> kp6 r20871: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[20:39] <p6eval> ..pugs: OUTPUT[1]

[20:39] <p6eval> ..rakudo r28527: OUTPUT[1]

[20:39] <p6eval> ..elf r20871: OUTPUT[1]

[20:41] <jferrero> perl6: print 1.0e+7

[20:41] <p6eval> kp6 r20871: OUTPUT[no method 'APPLY' in Class 'Int'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤      

[20:41] <p6eval> ..pugs: OUTPUT[10000000]

[20:41] <p6eval> ..rakudo r28527: OUTPUT[1e+07]

[20:41] <p6eval> ..elf r20871: OUTPUT[10000000]

[20:42] <donaldh> perl6: print 1.2e+7

[20:42] <p6eval> kp6 r20871: OUTPUT[no method 'APPLY' in Class 'Int'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤      

[20:42] <p6eval> ..pugs: OUTPUT[12000000]

[20:42] <p6eval> ..rakudo r28527: OUTPUT[1.2e+07]

[20:42] <p6eval> ..elf r20871: OUTPUT[12000000]

[20:44] <Auzon> rakudo: say 1.2e+2

[20:44] <p6eval> rakudo r28527 OUTPUT[120␤]

[20:44] <moritz_> rakudo: say 1.2e+3 + 1

[20:44] <p6eval> rakudo r28527 OUTPUT[1201␤]

[20:44] <Auzon> Mhm, so Rakudo is correct, just abbreviating it. Not too useful though...

[20:45] <pmichaud> rakudo: say 1.2e+7+1

[20:45] <p6eval> rakudo r28527 OUTPUT[1.2e+07␤]

[20:45] <Eevee> given that there are already some p6 equivalents of p5 modules, what's the plan re perl 6 and cpan?  start fresh, use parrot to use p5 modules, or depends per module?

[20:45] <pmichaud> ick.

[20:45] <Eevee> on treo, sorry if I'm terse

[20:46] <moritz_> Eevee: most hackers dream of a p5<->p6 bridge

[20:47] <pmichaud> I think "depends per module"

[20:47] <pmichaud> but TimToady did work on the p5-to-p6 translator

[20:47] <Eevee> oh I remember that

[20:47] <Eevee> vaguely

[20:48] <jferrero> Eevee, CPAN have perl6 code now... http://search.cpan.org/src/GUGOD/JavaScript-Writer-0.2.0/lib6/JavaScript/Writer.pm

[20:48] <lambdabot> http://tinyurl.com/5sk4d6

[20:48] <Auzon> If I'm not mistaken, different languages have different namespaces so you can 'use WWW::Mechanize:from<Perl5>'

[20:48] <Auzon> S11:382 mentions that syntax...

[20:48] <Eevee> I'm sure some common cpan modules could use a rethinking just as much as p5 though

[20:48] <Eevee> oh interesting

[20:49] <Auzon> The idea is that you can 'use Foo:from<LanguageX>', especially with Parrot's language support.

[20:49] <Eevee> yeah

[20:50] <Eevee> but that would still allow a clean break for a pure p6 rewrite

[20:50] <donaldh> Yep, so it should be possible to use parrot libs in rakudo. E.g. use JSON:from<parrot>

[20:50] <Eevee> cool

[20:51] <pmichaud> I expect that to happen in the next 2 weeks.

[20:51] <Eevee> does cpan have any way of differentiating between modules of the same name in different versions?  eg some repo has a p6 CGI.pm

[20:51] <Auzon> Very cool, pmichaud.

[20:51] <pmichaud> primarily because I want  use SDL:from<parrot>

[20:51] <donaldh> pmichaud++

[20:51] <Eevee> that would be awesome

[20:51] <donaldh> That'd be nice.

[20:51] <b_jonas> Eevee: they could be under different distribution names

[20:51] <Eevee> and I spied a parrot-to-exe recently

[20:52] <Eevee> we could have a p6game with easy windows distrbution before long

[20:52] <donaldh> I'm working on a pir binding for Sqlite3 in the absence of DBI or DBDI. So I'd like use sqlite:from<parrot> too.

[20:52] <Eevee> ah true.  could just do CGI6

[20:53] <Auzon> See the CPAN synopsis (DRAFT) http://svn.pugscode.org/pugs/docs/Perl6/Spec/CPAN.pod

[20:53] <Eevee> donaldh: might not be a bad idea to lay some groundwork for a DBI6

[20:53] <Eevee> on treo, link-impaired

[20:53] <schmalbe> There is CGI::QueryHash

[20:53] <Auzon> Oh, sorry Eevee.

[20:54] <donaldh> Yeah, there's an out of date plan of record by a DBI maintainer, I think.

[20:54] <Eevee> but will try to remember to look later

[20:54] <Auzon> I think the basic plan is for new CPAN tools to be built that understand multiple languages.

[20:55] <moritz_> that's correcty

[20:55] <Eevee> merge pypy with cpan!

[20:55] <moritz_> s/y$//

[20:55] <Eevee> call it cyan

[20:55] <donaldh> http://www.nntp.perl.org/group/perl.dbdi.dev/2004/01/msg8.html

[20:55] <lambdabot> Title: Parrot DBDI Design Notes - nntp.perl.org

[20:55] <Auzon> It can still be called CPAN :P

[20:56] <moritz_> CPAN has a good repuation, even outside perl world

[20:56] <Eevee> cppan

[20:56] <Eevee> throw in php, call it cpppan

[20:57] <moritz_> caan - comprehensive all-language archive network ;)

[20:58] <Eevee> how's python on parrot support doing?  I seem to remember one yapc speaker said it was a bit primitive and not quite actively developed

[20:58] <Eevee> c*an

[20:58] <donaldh> Am I right in understanding that Perl 6 will allow switching to different grammars mid module? 

[20:58] <pmurias> yes

[20:58] <donaldh> Does that open the door for supporting inline XML a la javascript?

[20:58] <pmurias> yes

[20:59] <Eevee> oh god

[20:59] <pmurias> no

[20:59] <pmurias> t

[20:59] <pmurias> xml is ugly

[20:59] <Eevee> perl 5 lets you shoot yourself in the foot

[20:59] <moritz_> multiple times ;)

[20:59] <donaldh> but a necessary evil

[20:59] <Eevee> perl 6 upgrades you to a cannon and lets you shoot everyone else's feet too

[20:59] <pmurias> Eevee: i read god as good ;)

[21:00] <donaldh> pmurias: you've lost me

[21:00] <Eevee> my first thought on seeing the switching grammar example was "hey cool"

[21:00] <Eevee> second thought, "some idot is going to fuck this up"

[21:00] <Eevee> +i

[21:00] <pmurias> donaldh: i meant inline XML isn't good

[21:00] *** xdg left
[21:01] <Tene> use xmlmagic; my $xml = <item><foo>bleh</foo><bar id="nob">baz</bar></item>

[21:01] <pmurias> why not just use Captures?

[21:01] <donaldh> useful for scripting things though

[21:01] <b_jonas> pmurias: I think you can have inline xml in perl5 too with some magic like that

[21:01] <pmurias> yes with glob

[21:02] *** cjfields left
[21:02] *** cjfields_ joined
[21:02] <moritz_> or with source filters *me ducks*

[21:02] <donaldh> tene: yes, that's what I'm thinking.

[21:02] <b_jonas> yep. what module was that?

[21:02] * Auzon imagines the chaos caused by inline XML via source filtering and XML parsing via regexes

[21:02] <b_jonas> but actually it doesn't gain much over just defining a function with a short name and writing eg. xml q<<foo>bar</foo>>

[21:03] <donaldh> Except the syntax gets hairy.

[21:03] <Auzon> or a macro so it's a real quoting construct

[21:03] <moritz_> the difference is one-pass parsing

[21:03] <Auzon> qXML "<foo>"

[21:03] <Eevee> at midway &

[21:03] <moritz_> so you can do q:xml{<foo>}</foo>} and DWIM

[21:04] <b_jonas> why's a midway & a problem?

[21:04] <pmurias> b_jonas: XML::All

[21:04] *** cjfields_ is now known as cjfields

[21:04] <b_jonas> pmurias: ah, thanks

[21:07] <Auzon> What's with the =kwid in some .t files?

[21:08] <moritz_> Auzon: old POD syntax

[21:09] <b_jonas> old?

[21:09] <Auzon> I can convert it to =pod, correct?

[21:09] <b_jonas> isn't any = at the beginning of line still pod?

[21:09] <Auzon> b_jonas: I'm guessing 'old new'

[21:09] <b_jonas> that is, from the perl parser's view, not from the pod parser's

[21:09] *** IllvilJa left
[21:09] <moritz_> Auzon: yes

[21:10] <pmurias> isn't kwid a pod alternative?

[21:11] *** schmalbe left
[21:12] <moritz_> pmurias: don't think it's in the spec

[21:15] *** b_jonas left
[21:15] *** IllvilJa joined
[21:19] <Auzon> perl6: say q:abc:

[21:19] <p6eval> kp6 r20871: OUTPUT[syntax error at position 5, line 1 column 5:␤say q:abc␤     ^ HERE␤]

[21:19] <p6eval> ..pugs: OUTPUT[*** No such subroutine: "&q"␤    at /tmp/3UlyQc1gWk line 1, column 5-10␤]

[21:19] <p6eval> ..rakudo r28527: OUTPUT[Statement not terminated properly at line 1, near ":abc:"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[21:19] <p6eval> ..elf r20871: OUTPUT[Permission denied at ./elf_f_faster line 255.␤]

[21:22] <Auzon> Is ~@array defined in the spec?

[21:23] <moritz_> Auzon: yes, ~ is string context

[21:23] <Auzon> I meant is the result defined to be a certain thing

[21:24] <moritz_> dunno

[21:25] *** IllvilJa left
[21:30] *** bacek_ joined
[21:30] <Auzon> rakudo: my $s = 'one'; my @a = <two three>; say $s ~ @a;

[21:30] <p6eval> rakudo r28527 OUTPUT[onetwo three␤]

[21:30] <pugs_svnbot> r20872 | pmurias++ | [sm0p] actions are un6'ed (not run yet)

[21:30] <pugs_svnbot> r20872 | pmurias++ | updated sm0p_dump_march

[21:30] <pugs_svnbot> r20872 | pmurias++ | <alpha> is <.alpha>

[21:36] *** donaldh left
[21:38] *** toddr left
[21:41] *** cjfields left
[21:42] *** chris2 left
[21:45] <pugs_svnbot> r20873 | Auzon++ | [gsoc_spectest] added more quoting tests. removed kwid from quoting.t and moved quoting.t to spec/S02-literals. (added 10 tests)

[21:45] <pugs_svnbot> r20873 | Auzon++ | Also removed unneeded smartlink in radix.t.

[21:48] *** cjfields joined
[21:51] <moritz_> Auzon++ # good work

[21:51] *** Jedai left
[21:53] *** pmurias left
[21:54] *** toddr joined
[21:56] *** toddr left
[22:01] *** TJCRI left
[22:21] *** iblechbot left
[22:21] <pugs_svnbot> r20874 | moritz++ | [spec] replaced kwid by pod in S02-magicals/pid.t

[22:24] *** pbuetow left
[22:25] *** pbuetow joined
[22:34] *** _Maghnus joined
[22:35] *** meppl joined
[22:41] <awwaiid> where can I find the grammar interpreter that larry used during his talk?

[22:41] <awwaiid> I found the Perl-6.0.0-STD.pm in the pugs repo without issue :)

[22:45] *** cjfields left
[22:47] *** FurnaceBoy left
[22:49] *** FurnaceBoy joined
[22:50] *** Maghnus left
[22:50] *** _Maghnus is now known as Maghnus

[23:15] *** cjfields joined
[23:23] *** felipe left
[23:23] *** cjfields left
[23:25] <TimToady> awwaiid: if that's the name of the file, you must have a very old pugs repo

[23:26] <TimToady> it was renamed to STD.pm some time ago

[23:32] *** eternaleye_ left
[23:32] *** eternaleye_ joined
[23:37] *** icwiener_ left
[23:46] *** FurnaceBoy left
[23:51] *** jferrero left
[23:55] *** bacek joined
