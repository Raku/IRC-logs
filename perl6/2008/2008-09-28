[00:06] *** araujo left
[00:15] *** meppl joined
[00:23] *** dolmen left
[00:23] *** dolmen joined
[01:23] *** FurnaceBoy joined
[01:25] *** icwiener_ left
[01:27] *** Ontolog joined
[01:31] *** japhb_ left
[01:38] *** agentzh joined
[01:42] *** Limbic_Region joined
[01:56] <Ontolog> I just found out about the Perl 6 conference in China

[01:56] <Ontolog> that rocks because I am in China

[01:56] <Ontolog> I see people can submit speaches

[01:57] <Ontolog> but I am not sure what to write about

[02:04] *** dolmen left
[02:06] *** Limbic_Region left
[02:34] *** meppl left
[02:34] *** meppl joined
[02:51] *** araujo joined
[02:53] *** eternaleye left
[03:03] <meppl> good night

[03:04] *** meppl left
[03:10] *** ha joined
[03:14] *** justatheory joined
[03:22] *** agentzh left
[03:22] *** agentzh joined
[03:26] *** FurnaceBoy left
[03:29] *** scrottie joined
[03:52] *** justatheory left
[03:55] *** alester joined
[04:18] *** xunxin joined
[04:18] *** xunxin left
[04:43] *** azawawi joined
[04:46] <rakudo_svn> r31470 | tene++ | [exceptionhandler]

[04:46] <rakudo_svn> r31470 | tene++ | * Only check for previous usage on unfiltered EHs.

[04:46] <rakudo_svn> r31470 | tene++ | [rakudo]

[04:46] <rakudo_svn> r31470 | tene++ | * Add a filter on and remove a workaround in gather.

[05:16] *** Bzek joined
[05:19] *** azawawi left
[05:21] *** iblechbot joined
[05:31] *** justatheory joined
[05:46] *** Psyche^ joined
[05:47] *** justatheory left
[05:48] *** baest left
[05:57] *** Patterner left
[05:57] *** Psyche^ is now known as Patterner

[06:14] *** agentzh left
[06:15] *** agentzh joined
[06:33] *** BinGOs left
[06:35] *** iblechbot left
[06:48] *** alester left
[07:00] *** BinGOs joined
[07:01] *** xuser left
[07:32] *** baest joined
[07:40] *** eternaleye joined
[07:57] *** elmex joined
[08:00] *** sri_work joined
[08:01] *** larsen_ left
[08:33] *** ha left
[08:35] *** barney joined
[08:46] *** pmurias joined
[08:46] *** agentzh left
[08:48] *** pmurias left
[08:55] *** agentzh joined
[09:40] *** iblechbot joined
[09:50] *** xuser joined
[10:04] *** Ontolog left
[10:08] *** barney left
[10:42] *** meppl joined
[10:47] *** masak joined
[11:03] *** zamolxes joined
[11:19] *** jan_ left
[11:23] *** agentzh left
[11:24] *** agentzh joined
[11:25] *** Tene left
[11:25] *** Tene joined
[11:40] *** jan_ joined
[11:53] *** jferrero joined
[12:05] *** abra joined
[12:09] *** masak left
[12:24] *** icwiener joined
[12:36] *** redicaps joined
[12:37] *** ruoso joined
[12:41] *** larsen_ joined
[12:42] *** redicaps left
[12:44] *** pmurias joined
[12:44] <pmurias> ruoso: hi

[12:47] <ruoso> hi pmurias 

[12:49] <pmurias> using STD as our frontend might be a sensible option

[12:50] <ruoso> I was just looking at the output of std_dump_match... and it's pretty reasonable

[12:50] <pmurias> we won't even need perl5 embedding to make it work if the AST2m0ld is written in perl5

[12:51] <ruoso> hmm.. I see..

[12:58] <pugs_svn> r22441 | pmurias++ | [smop] a proposed AST format

[12:59] <pmurias> a treeified version of m0ld might work as the AST, as we desugar everything to method calls anyway

[13:00] <pmurias> ruoso: i'm starting my CS degree in a few days so i'm moving to a different city so i might not have internet access

[13:00] <pmurias> (at first ;)

[13:01] <ruoso> congrats ;)

[13:01] <ruoso> I always admire the people who have the patience to go through CS

[13:01] <ruoso> ;)

[13:02] * wolverian is running out of it

[13:06] <ruoso> pmurias, so you mean turning std ast into mold ast?

[13:07] <pmurias> yes

[13:07] <pmurias> std ast is a parse tree so it represents how something was parsed not what is it

[13:10] <pmurias> it might be too big a jump, but i don't know how p6 ast should look like

[13:11] <pmurias> what should i hack on while i don't have internet?

[13:13] <ruoso> well... that translation seems like a good job ;)

[13:14] * fullermd would think "getting internet"   :p

[13:16] *** pmurias left
[13:17] <ruoso> @tell pmurias, although STD returns a parse tree... it doesn't really seem so far from an AST

[13:17] <lambdabot> Consider it noted.

[13:27] *** azawawi joined
[13:32] *** azawawi_ joined
[13:33] *** azawawi left
[13:33] *** azawawi_ is now known as azawawi

[13:38] *** ruoso left
[13:39] *** ruoso joined
[13:44] *** abra left
[13:50] <azawawi> @seen moritz_

[13:50] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 20h 39m 49s ago.

[13:51] <azawawi> hi

[13:51] <moritz_> hi

[13:51] <azawawi> @seen moritz_

[13:51] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 9s ago.

[13:51] <azawawi> lol

[13:51] <azawawi> how do i get a commit bit for parrot?

[13:52] <moritz_> by submitting so many good patches that the other commiters grow tired of applying your patches

[13:52] <moritz_> and grant you a commit bit

[13:52] <azawawi> im thinking of implementing a few of Str.pir

[13:52] * ruoso seriously considering making SMOP embedded in p5

[13:53] * ruoso later &

[13:53] <moritz_> azawawi: most Str builtins should actually go into builtins/any-str.pir, and be a method of Any (and convert to Str as necessary)

[13:53] <moritz_> azawawi: S29 is a bit outdated in that respect

[13:53] <moritz_> azawawi: anyway, patches are always welcome

[13:54] <azawawi> where do i submit patches?

[13:54] <moritz_> [email@hidden.address]
[13:55] <azawawi> moritz_: do they have a mailing list archive for [email@hidden.address]
[13:56] <moritz_> azawawi: the archive is the request tracker at rt.perl.org/rt3/, and also go to the mailing list(s)

[13:56] <azawawi> moritz_: thx

[14:04] *** Southen joined
[14:14] <s1n> moritz_: ping

[14:16] <moritz_> s1n: pong

[14:20] <azawawi> moritz_: what happened to kp6?

[14:20] <s1n> moritz_: have you seen those radix tests i added yesterday?

[14:21] <moritz_> azawawi: it was close to bootstrapping, but was too slow...

[14:21] <moritz_> azawawi: so a new backend was planned, which became "smop"

[14:21] <moritz_> s1n: yes

[14:21] <s1n> moritz_: are there any more tests you think i'm missing there?

[14:22] <s1n> keep in mind, full radix support isn't there yet

[14:22] <moritz_> s1n: not sure, I haven't found something obvious to test

[14:23] <moritz_> s1n: except perhaps more cases wher the conversion fails

[14:23] <moritz_> like ":2<1.1stff"

[14:23] <s1n> moritz_: i can add more failing tests

[14:24] *** [particle]1 is now known as [particle]

[14:24] <moritz_> s1n: but all in all I think the tests are quite good

[14:26] <s1n> moritz_: good, i was going to start adding more of the spec for radix notation

[14:29] <azawawi> moritz_: i think S06*/code.t could be removed since it is a duplicate of closure-parameters.t 

[14:29] <azawawi> moritz_: http://feather.perl6.nl/syn/S06.html#Closure_parameters

[14:30] <lambdabot> Title: S06

[14:31] * moritz_ takes a look

[14:32] *** apeiron_ joined
[14:32] <moritz_> azawawi: can rakudo already run closure-parameters.t?

[14:32] <pugs_svn> r22442 | s1n++ | [t/spec] added a few more invalid radix notation tests

[14:32] <azawawi> let me check

[14:33] <azawawi> moritz_: "Lexically scoped subs not yet implemented"

[14:34] <azawawi> moritz_: i will try to make it work

[14:34] <moritz_> azawawi: I think it will block on signature parsing

[14:34] <azawawi> moritz_: code.t does not work on pugs btw

[14:35] <moritz_> it works here

[14:36] <azawawi> moritz_: i must have ran another one by mistake... my mistake.

[14:36] <moritz_> "It works on my machine" -- Nicholas Clark

[14:37] <azawawi> i ran it using old (/usr/bin/pugs)

[14:39] *** apeiron left
[14:48] <azawawi> moritz_: S06-signature/closure-parameters.t totally fails at parsing...

[14:48] <azawawi> moritz_: unfudgable ;-)

[14:48] <moritz_> that's what I feared

[14:49] <azawawi> oh well, at least i will solve the TODO smartlink in code.t ;-) 

[14:51] *** Tene left
[14:51] *** Tene joined
[14:54] <pugs_svn> r22443 | azawawi++ | [t/spec] Added a smartlink and a future move order TODO ;-)

[15:03] *** apeiron joined
[15:11] *** apeiron_ left
[15:13] *** justatheory joined
[15:15] *** larsen_ left
[15:21] *** iblechbot left
[15:33] *** justatheory left
[15:37] *** Limbic_Region joined
[15:52] *** masak joined
[15:56] <moritz_> can there be default values for named parameters?

[15:56] <masak> moritz_: why not?

[15:57] <moritz_> masak: "Perl 6 and Parrot Essentials" says "only on optional parameters"

[15:57] <masak> the nameds are automatically optional, right? so it's only natural that they have defaults

[15:57] <moritz_> ok, what's the syntax for them?

[15:57] <masak> dunno

[15:57] <moritz_> std: sub (:$x($y)) { $x }

[15:57] <p6eval> std 22443: OUTPUT[parsed␤]

[15:57] <masak> seems reasonable.

[16:00] <moritz_> std: sub (:$x("foo")) { $x }

[16:00] <p6eval> std 22443: OUTPUT[parse failure␤]

[16:00] <moritz_> some like it's not

[16:01] <moritz_> std: mixed('a' <==  'b', 'c', 'd', 'e');

[16:01] <p6eval> std 22443: OUTPUT[Unknown routines:␤     mixed called at 1 ␤parsed␤]

[16:01] * moritz_ didn't know about the <== operator

[16:02] <moritz_> std: sub mixed ($req, +$opt, +$another, *@slurpy) {...}

[16:02] <p6eval> std 22443: OUTPUT[parse failure␤]

[16:17] *** iblechbot joined
[16:30] *** abra joined
[16:36] *** iblechbot left
[16:43] *** mberends left
[16:45] *** Bzek left
[17:07] <masak> what if, instead of writing `sort { $^a <=> $^b }`, I wanted to write something like `sort using(infix:<< <=> >>)`. that wouldn't be a problem, would it? I mean, a sub such as &using can easily be defined, right?

[17:14] *** FurnaceBoy joined
[17:24] *** eternaleye left
[17:27] *** PZt left
[17:28] *** masak left
[17:39] *** FurnaceBoy left
[17:40] *** Limbic_Region left
[17:41] <pugs_svn> r22444 | azawawi++ | [t/spec] Fixed Copy&Paste mistakes in no-implicit-block.t

[17:51] *** mtve joined
[17:56] *** justatheory joined
[18:08] *** iblechbot joined
[18:22] *** xinming left
[18:24] <azawawi> @seen moritz_

[18:24] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 2h 22m 10s ago.

[18:29] *** azawawi left
[18:50] *** abra left
[18:54] *** justatheory left
[19:12] *** apeiron left
[19:17] *** apeiron joined
[19:59] <moritz_> std: sub foo($optional? = 3) { ... }

[19:59] <p6eval> std 22444: OUTPUT[parsed␤]

[19:59] <moritz_> std: sub foo($optional = 3?) { ... }

[19:59] <p6eval> std 22444: OUTPUT[parse failure␤]

[20:00] *** literal joined
[20:00] <moritz_> std: sub foo($optional? is rw)

[20:00] <p6eval> std 22444: OUTPUT[parse failure␤]

[20:00] <moritz_> std: sub foo($optional is rw?)

[20:00] <p6eval> std 22444: OUTPUT[cp: cannot create regular file `lex/STD/EXPR': Permission denied␤parse failure␤]

[20:01] <moritz_> std: sub foo($optional is rw?)

[20:02] <p6eval> std 22444: OUTPUT[parse failure␤]

[20:05] <moritz_> '$optional? is rw' works on my machine

[20:05] <moritz_> std: sub foo($optional? is rw)

[20:05] <p6eval> std 22444: OUTPUT[parse failure␤]

[20:05] <moritz_> so don't trust evalbot

[20:05] <moritz_> at least not with STD.pm

[20:06] <literal> is it possible to do "given $scalar;" ?

[20:06] <literal> so that the remaining "when"s in that scope will use it

[20:06] <moritz_> no, but you can just use $_ = $scalar

[20:07] <moritz_> erm temp $_ = $scalar

[20:07] <literal> yeah

[20:07] <moritz_> sometimes one way to do it is enough ;)

[20:13] <meppl> good night

[20:14] *** meppl left
[20:34] *** icwiener left
[20:36] *** PZt joined
[21:01] *** Ehtyar joined
[21:01] <pugs_svn> r22445 | moritz++ | [docs/tutorial] book update

[21:01] <pugs_svn> r22445 | moritz++ | Including, but not limited to:

[21:01] <pugs_svn> r22445 | moritz++ |  * optional params now have the ? after the name

[21:01] <pugs_svn> r22445 | moritz++ |  * capture interpolation is done with prefix:<|> (used to be prefix:<*>)

[21:01] <pugs_svn> r22445 | moritz++ |  * Chapter 7 is vastly out of date. Updated to use "regex" instead of "rule"

[21:01] <pugs_svn> r22445 | moritz++ |    (but got only half way), updated much other stuff, added a huge TODO list

[21:04] *** justatheory joined
[21:28] *** lichtkind joined
[21:29] *** iblechbot left
[21:32] <lichtkind> do capture contain references?

[21:34] <ruoso> lichtkind, reference is not really a concept in Perl 6

[21:35] <lichtkind> ruoso: i know ok i explain in detail

[21:36] <lichtkind> ruoso:  $var  = 2;$capture = \$var;  $var  = 3; say  $$capture;

[21:36] <lichtkind> what should be output?

[21:36] <ruoso> 2, because a capture is not a bind

[21:37] <lichtkind> thanks that makes sense

[21:37] <lichtkind> but cature can contain default falues vor parameters?

[21:38] <lichtkind> capture

[21:40] <lichtkind> ruoso: even if you dunno that you helped me greatly

[21:40] <ruoso> it's the signature that contain default values, not the capture

[21:41] <lichtkind> ah

[21:41] <lichtkind> ruoso++

[21:42] <ruoso> ;P

[21:42] <lichtkind> i currently writing the tutorial part 5

[21:42] <lichtkind> is there way to match capture of 2 bubs like |&routine1 ~~ |&routine2; ?

[21:43] *** sail0r joined
[21:43] *** sail0r left
[21:47] <ruoso> lichtkind, I don't think there's anything specced on capture ~~ capture...

[21:47] <lichtkind> thatswhy i ask :)

[21:48] <lichtkind> but its specced to match sigmatures

[21:48] <lichtkind> how to get sig of a sub

[21:51] <ruoso> &foo.signature ?

[21:51] <ruoso> I'd guess

[21:52] <ruoso> pugs: sub abc ($x) { }; say &abc.signature

[21:52] <p6eval> pugs: OUTPUT[:($x)␤]

[21:52] <ruoso> pugs: sub abc ($x) { }; say &abc.signature.arity

[21:52] <p6eval> pugs: OUTPUT[*** No such subroutine: "&arity"␤    at /tmp/pXL9BSAiMs line 1, column 23 - line 2, column 1␤]

[21:56] *** justatheory left
[21:57] <lichtkind> thanks

[22:02] <ruoso> pugs: sub abc { }; say &abc.signature

[22:02] <p6eval> pugs: OUTPUT[:(@_)␤]

[22:05] *** sri_work left
[22:49] *** jferrero left
[22:57] *** meppl joined
[23:18] *** eternaleye joined
[23:19] <lichtkind> pugs: @a, $b, %c = 1 .. 5, 6, {'sonnen' => 'schein'};	$capture = \(@a, $b, %c);

[23:19] <p6eval> pugs: OUTPUT[*** ␤    Unexpected ","␤    expecting "::"␤    Variable "@a" requires predeclaration or explicit package name␤    at /tmp/tvHYsMF4Nq line 1, column 3␤]

[23:27] *** Alias_ joined
[23:40] *** meppl left
[23:45] *** justatheory joined
