[00:16] *** vixey left
[00:20] *** ejs left
[00:35] *** iblechbot left
[00:45] *** alanhaggai_ joined
[00:50] *** alanhaggai__ joined
[00:52] *** buubot left
[00:52] *** buu left
[00:52] *** alanhaggai_ left
[00:59] *** AzaTht left
[00:59] *** jferrero left
[01:00] *** alanhaggai left
[01:02] <Hinrik> perl6: sub foo { 1 }; foo.perl

[01:02] <p6eval> elf 24354: RESULT["1"␤]

[01:02] <p6eval> ..pugs, rakudo 33872: RESULT["1"]

[01:03] <Hinrik> perl6: sub foo { 1 }; &foo.perl

[01:03] <p6eval> elf 24354: OUTPUT[/home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:141:in `block in to_dump0': undefined method `to_dump0' for true:TrueClass (NoMethodError)␤     from /home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:140:in `each'␤       from

[01:03] <p6eval> ../home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.r...

[01:03] <p6eval> ..pugs: RESULT["\\sub :(\@_) \"\$_\" := \"Scalar\" #<Scalar:0xb7a69459>\n          \"\@_\" := \"Array\" #<Array:0xb7a69461>\n          \"\&?ROUTINE\" := \"Sub\" #<Sub:0xb7184961>\n          \"\&?BLOCK\" := \"Sub\" #<Sub:0xb7184961> \{\"\&foo\" := \"Sub\" #<Sub:0xb6568611>, \"\$_\" := \"Scalar\"...

[01:03] <p6eval> ..rakudo 33872: RESULT["\{ ... }"]

[01:03] *** alanhaggai__ left
[01:05] <Hinrik> perl6: my $baz = sub foo { 1 }; &$baz

[01:05] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "$baz"␤    expecting "=", subroutine parameters, trait, block, context, ":" or "("␤    at /tmp/BzXM7xyw9Z line 1, column 4␤]

[01:05] <p6eval> ..elf 24354: OUTPUT[/home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:141:in `block in to_dump0': undefined method `to_dump0' for true:TrueClass (NoMethodError)␤     from /home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:140:in `each'␤       from

[01:05] <p6eval> ../home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.r...

[01:05] <p6eval> ..rakudo 33872: OUTPUT[Syntax error at line 1, near "&$baz"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[01:05] <Hinrik> perl6: my $baz = sub foo { 1 }; & $baz

[01:05] <p6eval> rakudo 33872: OUTPUT[Use of contextualizer & not implemented. at line 1, near ""␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[01:05] <p6eval> ..elf 24354: OUTPUT[Parse error in: /tmp/AIrCcXRITO␤panic at line 1 column 25 (pos 25): Can't understand next input--giving up␤WHERE: my $baz = sub foo { 1 }; & $baz␤WHERE:                         /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤ 

[01:05] <p6eval> ..STD_red/std.r...

[01:05] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "$baz"␤    expecting "=", subroutine parameters, trait, block, context, ":" or "("␤    at /tmp/VBdHM7iEMb line 1, column 4␤]

[01:11] *** dukeleto left
[01:12] *** buubot joined
[01:12] *** buubot left
[01:20] *** buu joined
[01:23] *** buu left
[01:31] <Hinrik> perl6: (1&(2&3)).perl

[01:31] <p6eval> pugs: RESULT["(1 \& 2 \& 3)"]

[01:31] <p6eval> ..elf 24354: RESULT["0"␤]

[01:31] <p6eval> ..rakudo 33872: RESULT["all(1, all(2, 3))"]

[01:32] <Hinrik> how does it not that &() there is not a contextualizer?

[01:37] *** buu joined
[01:37] *** buubot joined
[01:41] *** alanhaggai__ joined
[01:41] <Hinrik> what's that "W" in t/S03-operators/assign.t ?

[01:41] <Hinrik> bah, nm

[01:41] <Hinrik> didn't notice the "sub W ..."

[01:42] <TimToady> Hinrik: the parser knows when it's expecting a term vs an infix, so it's not confused about &

[01:42] <lambdabot> TimToady: You have 4 new messages. '/msg lambdabot @messages' to read them.

[01:54] *** alanhaggai__ left
[01:57] *** Entonian left
[02:00] *** alanhaggai joined
[02:00] *** stephens joined
[02:09] *** DemoPhreak left
[02:22] <Hinrik> ah, of course

[02:24] *** liufeng joined
[02:39] *** [particle]1 joined
[02:39] *** [particle]1 left
[02:43] <pugs_svn> r24355 | hinrik++ | [util/perl6.vim] a bunch of small fixes related to angles, comments, reduce identifiers, hyperoperators, etc

[03:02] *** Psyche^ joined
[03:04] *** Patterner left
[03:04] *** Psyche^ is now known as Patterner

[03:06] *** dukeleto joined
[03:17] *** alanhaggai left
[03:19] *** kanru left
[03:22] *** kanru joined
[03:32] <meppl> good night

[03:33] *** meppl left
[03:44] *** dukeleto left
[03:44] *** bacek left
[03:52] *** dukeleto joined
[03:55] *** Limbic_Region left
[04:02] *** elmex_ joined
[04:13] *** dukeleto left
[04:17] *** elmex left
[04:17] *** elmex_ is now known as elmex

[04:57] *** apeiron_ joined
[05:03] *** apeiron left
[05:05] *** eternaleye left
[05:06] *** simcop2387 left
[05:07] *** simcop2387 joined
[05:10] *** mncharity joined
[05:12] *** eternaleye joined
[05:23] <Hinrik> perl6: sub foo'sub { 1 }.perl

[05:23] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "'"␤    expecting "::", "handles", "is", bare trait, subroutine parameters, trait or block␤    at /tmp/S5Gg4HnQxM line 1, column 8␤]

[05:23] <p6eval> ..rakudo 33873: OUTPUT[Statement not terminated properly at line 1, near ".perl"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[05:23] <p6eval> ..elf 24355: OUTPUT[Parse error in: /tmp/xHfgNJOQih␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: sub foo'sub { 1 }.perl␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[05:23] <p6eval> ..STD_red/std.r...

[05:23] <Hinrik> perl6: sub foo-sub { 1 }.perl

[05:23] <p6eval> rakudo 33873: OUTPUT[Statement not terminated properly at line 1, near ".perl"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[05:23] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "-"␤    expecting "::", "handles", "is", bare trait, subroutine parameters, trait or block␤    at /tmp/ABQmHj5ZU4 line 1, column 8␤]

[05:23] <p6eval> ..elf 24355: OUTPUT[Parse error in: /tmp/iN4KMQABCs␤panic at line 1 column 17 (pos 17): Statement not terminated properly␤WHERE: sub foo-sub { 1 }.perl␤WHERE:                 /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:355:in `eat_terminator'␤  STD_red/std.rb:269:in `block in

[05:23] <p6eval> ..stat...

[05:24] *** yahooooo left
[05:25] <Hinrik> perl6: class Foo { method foo-bar { 1 } }

[05:25] <p6eval> elf 24355: OUTPUT[Undefined subroutine &GLOBAL::foo called at (eval 121) line 5.␤ at ./elf_f line 3861␤]

[05:25] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "-"␤    expecting "::", "handles", "is", bare trait, subroutine parameters, trait or block␤    at /tmp/446pLKV6YT line 1, column 23␤]

[05:25] <p6eval> ..rakudo 33873: RESULT[{ ... }]

[05:25] <Hinrik> perl6: class Foo { method foo'bar { 1 } }

[05:25] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "'"␤    expecting "::", "handles", "is", bare trait, subroutine parameters, trait or block␤    at /tmp/Ic0ATmYFA9 line 1, column 23␤]

[05:25] <p6eval> ..elf 24355: OUTPUT[Parse error in: /tmp/unOjkJtzxZ␤panic at line 1 column 12 (pos 12): Missing right brace␤WHERE: class Foo { method foo'bar { 1 } }␤WHERE:            /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤  STD_red/std.rb:242:in `block in block'␤ 

[05:25] <p6eval> ..STD_r...

[05:25] <p6eval> ..rakudo 33873: RESULT[{ ... }]

[05:31] *** alanhaggai joined
[05:31] *** preflex left
[05:35] <mncharity> I note in passing that elfblue is ok with both. ;)

[05:35] *** preflex joined
[05:36] *** yahooooo joined
[05:38] *** dukeleto joined
[05:43] *** alester joined
[05:54] *** azawawi joined
[05:55] *** azawawi left
[06:05] *** dukeleto left
[06:07] *** alanhaggai left
[06:11] *** dukeleto joined
[06:19] *** alanhaggai joined
[06:29] <pugs_svn> r24356 | putter++ | [STD_blue] Enabled parse caching.  Pass a few rx_on_re re tests.

[06:30] *** mncharity left
[06:34] *** rhr joined
[06:36] *** dukeleto left
[06:47] *** rhr_ left
[06:58] *** stephens left
[07:00] *** dukeleto joined
[07:05] <Hinrik> perl6: say NaN.perl

[07:05] <p6eval> rakudo 33874: OUTPUT[undef␤]

[07:05] <p6eval> ..pugs: OUTPUT[NaN␤]

[07:05] <p6eval> ..elf 24356: OUTPUT[Can't locate object method "perl" via package "NaN" (perhaps you forgot to load "NaN"?) at (eval 117) line 3.␤ at ./elf_f line 3861␤]

[07:05] <Hinrik> perl6: say -NaN.perl

[07:05] <p6eval> elf 24356: OUTPUT["\-NaN"␤]

[07:05] <p6eval> ..pugs: OUTPUT[NaN␤]

[07:05] <p6eval> ..rakudo 33874: OUTPUT[-0␤]

[07:06] *** apeiron_ is now known as apeiron

[07:18] *** araujo left
[07:21] *** justatheory joined
[07:39] *** alester left
[07:49] *** nothingmuch left
[07:50] *** nothingmuch joined
[07:56] *** nothingmuch left
[07:56] *** nothingmuch joined
[08:00] *** edenc left
[08:02] *** nothingmuch left
[08:02] *** nothingmuch joined
[08:13] *** nothingmuch left
[08:13] *** nothingmuch joined
[08:20] *** edenc joined
[08:21] *** nothingmuch left
[08:22] *** nothingmuch joined
[08:32] *** iblechbot joined
[08:42] *** mj41_ joined
[08:43] *** iblechbot left
[08:43] *** justatheory left
[08:43] *** elmex left
[08:43] *** kanru left
[08:43] *** jnthn left
[08:43] *** kolibrie left
[08:43] *** Guest16015 left
[08:43] *** shachaf left
[08:43] *** mj41 left
[08:43] *** stigtsp left
[08:43] *** yves left
[08:43] *** tewk_ left
[08:43] *** StephenPollei left
[08:43] *** ilbot2 left
[08:43] *** spx2 left
[08:43] *** Trey left
[08:43] *** jrockway left
[08:43] *** r0bby left
[08:43] *** preflex left
[08:43] *** szbalint left
[08:43] *** nnunley left
[08:43] *** hcchien left
[08:43] *** lambdabot left
[08:43] *** allbery_b left
[08:43] *** pasteling left
[08:43] *** mj41_ is now known as mj41

[08:44] *** allbery_b joined
[08:44] *** szbalint joined
[08:44] *** nnunley joined
[08:44] *** hcchien joined
[08:44] *** lambdabot joined
[08:44] *** preflex joined
[08:44] *** pasteling joined
[08:44] *** shachaf joined
[08:45] *** tewk joined
[08:45] *** jnthn joined
[08:45] *** Guest16015 joined
[08:45] *** spx2 joined
[08:45] *** kolibrie joined
[08:51] *** iblechbot joined
[08:51] *** justatheory joined
[08:51] *** elmex joined
[08:51] *** kanru joined
[08:51] *** stigtsp joined
[08:51] *** tewk_ joined
[08:51] *** ilbot2 joined
[08:51] *** yves joined
[08:51] *** StephenPollei joined
[08:51] *** justatheory_ joined
[08:52] *** elmex_ joined
[08:52] *** justatheory left
[08:52] *** ilbot2 left
[08:52] *** iblechbot left
[08:53] *** ilbot2 joined
[08:56] *** r0bby joined
[08:58] *** tewk_ left
[08:59] *** stigtsp left
[09:00] *** elmex left
[09:00] *** elmex_ is now known as elmex

[09:00] *** xinming left
[09:10] *** xinming joined
[09:14] *** alanhaggai left
[09:25] *** smtms left
[09:32] <pugs_svn> r24357 | hinrik++ | [util/perl6.vim] match all bare identifiers, match proper Pod identifiers, a few other small fixes

[09:32] *** ejs joined
[09:32] *** xinming left
[09:36] <pugs_svn> r24358 | hinrik++ | [t/spec] changed 'use Perl' test to match S11 syntax

[09:42] <pugs_svn> r24359 | hinrik++ | [util/perl6.vim] add the GLOBAL package

[09:48] *** alanhaggai joined
[09:54] *** ejs left
[10:01] <pugs_svn> r24360 | hinrik++ | [util/perl6.vim] fix typo

[10:01] *** mberends joined
[10:05] *** araujo joined
[10:08] *** sri_kraih left
[10:08] *** xuser left
[10:08] *** sri_kraih joined
[10:08] *** alech_ joined
[10:08] *** alech left
[10:11] *** justatheory_ left
[10:18] *** eternaleye left
[10:32] *** xuser joined
[11:02] *** iblechbot joined
[11:04] *** hyy joined
[11:05] *** hyy left
[11:05] *** xinming joined
[11:06] *** xinming left
[11:07] *** pmurias joined
[11:07] *** xinming joined
[11:07] *** pmurias left
[11:07] *** xinming left
[11:08] *** xinming joined
[11:08] *** pmurias joined
[11:12] *** maerzhase joined
[11:15] *** araujo left
[11:16] *** araujo joined
[11:21] *** pbuetow joined
[11:46] *** dukeleto left
[11:46] *** rgs joined
[11:46] *** theorbtwo joined
[11:47] <theorbtwo> http://dev.perl.org/perl6/doc/design/syn/S03.html says "A negated smart match is spelled !~~", but doesn't specify it at the table at the top.  Doc bug?

[11:52] *** dukeleto joined
[11:58] *** adc_penner joined
[12:02] *** jan_ left
[12:03] *** jan_ joined
[12:04] *** jan_ left
[12:04] *** jan_ joined
[12:06] *** alech_ left
[12:15] *** alech joined
[12:29] *** meppl joined
[12:31] *** xinming_ joined
[12:31] *** xinming left
[12:36] *** xinming_ left
[12:42] *** xinming joined
[12:44] *** smtms joined
[12:47] *** dukeleto left
[12:48] *** pmurias left
[12:57] *** vixey joined
[13:08] *** nickeldeuce joined
[13:24] *** ihrd joined
[13:24] <ihrd> hi

[13:24] <ihrd> question about .kv

[13:24] <ihrd> rakudo: my @a = {a => 1}, {b =>2}; my %h = foo => @a; say %h.kv.perl;

[13:24] <p6eval> rakudo 33880: OUTPUT[["foo", {"a" => 1}, {"b" => 2}]␤]

[13:24] <ihrd> rakudo: say ({ foo => [{a=>1}, {b=>1}]}).perl;

[13:24] <p6eval> rakudo 33880: OUTPUT[{"foo" => [{"a" => 1}, {"b" => 1}]}␤]

[13:25] <ihrd> I feel result should be the same

[13:25] <ihrd> I miss something?

[13:30] *** alanhaggai left
[13:33] *** dukeleto joined
[13:41] <ihrd> any body home?

[13:42] *** jan_ left
[13:53] *** rindolf joined
[13:56] *** ihrd left
[13:59] *** justatheory joined
[14:04] <jnthn> ihOn the first one you did .kv.perl, on the second just .perl

[14:04] <jnthn> oops

[14:04] <jnthn> I meant ihrd

[14:05] <jnthn> ...who left. Fail.

[14:07] *** nickeldeuce left
[14:17] *** meteorjay left
[14:23] *** theorbtwo left
[14:25] *** pmurias joined
[14:25] *** broquaint left
[14:25] *** Chillance joined
[14:26] <pmurias> ruoso: ^!private_storage does what ^!instance_storage should right?

[14:33] *** alanhaggai joined
[14:42] *** Limbic_Region joined
[14:52] *** justatheory left
[14:52] *** justatheory joined
[14:52] <cognominal> in objc 2.0, protocols can specify that a method is optional using @optional, is there anything equivalent in Perl 6 roles? is there a benefit to have something similar?

[15:12] *** jan_ joined
[15:15] *** broquaint joined
[15:17] *** jhorwitz left
[15:24] <jnthn> cognominal: I think if you write a method foo { ... } in a role it's an error not to implement it.

[15:24] <jnthn> What's the use case in ObjC 2.0 for this?

[15:31] <pmurias> all methods to mentioned in a given role are optional

[15:33] <pmurias> s/mentioned/not mentioned/

[15:34] <jnthn> Sure, but it seems here you can specify and interface contract that the implementer may choose to fulfil completely or partially.

[15:34] <jnthn> I'm not quite sure I see the point... :-)

[15:34] <jnthn> s/and/an/

[15:36] <jnthn> OTOH, I doubt it woulda made it into ObjC if there wasn't a reason or use case of sorts...

[15:38] *** apeiron left
[15:41] *** Limbic_Region left
[15:43] <pmurias> jnthn: it is something that would otherwise need to be specified by convention

[15:45] *** apeiron joined
[15:48] *** rindolf left
[15:50] <rakudo_svn> r33882 | pmichaud++ | [rakudo]:  Adjust grammar to use <?{{...}}> assertion syntax.

[16:05] *** jferrero joined
[16:30] <rakudo_svn> r33885 | pmichaud++ | [rakudo]: spectest-progress.csv update: 240 files, 5005 passing, 0 failing

[16:36] *** alech left
[16:44] *** xinming left
[16:45] *** xinming joined
[16:50] *** pmurias left
[16:50] <cognominal> jnthn, I am learning objc, was seing that... not sure about the utility. I know that if you call with a null pointer an existing method, it's a noop, maybe if you call a missing method maybe that's a noop too.

[16:52] <jnthn> That sounds...dangerous. :-|

[16:58] <cognominal> life is dangerous with dynamic languages

[17:07] *** tewk left
[17:10] <rakudo_svn> r33893 | pmichaud++ | [rakudo]:  Reorganize method ordering, other minor cleanups.

[17:11] <jnthn> http://developers.slashdot.org/article.pl?sid=08/12/14/1523236 # /Perl 6?/ on /.

[17:13] *** alester joined
[17:20] *** DemoFreak joined
[17:22] <pmichaud> hmm.  the article on Perl 6 says "There will be a standard implementation and a test suite shipped with Perl 6. "

[17:23] <pmichaud> Looks like the reporter got that one wrong.  Either that or there's been a development I'm unaware of. 

[17:23] *** azawawi joined
[17:23] <azawawi> hi

[17:24] <jnthn> Aye, I spotted taht too.

[17:24] <jnthn> Suspect confused reporter.

[17:24] <pmichaud> probably meant "language standard"

[17:24] <jnthn> aye

[17:24] <pmichaud> but yes, given Perl's history it'd be easy to assume a "standard implementation".  And it's what a lot of people in the community still expect.

[17:24] * azawawi reading...

[17:38] *** alech joined
[17:40] <azawawi> what is the best level to set perlcritic to?

[17:44] *** smtms left
[17:44] *** smtms joined
[18:07] <ruoso> @tell pmurias yes, private_storage and instance_storage are the same thing... 

[18:07] <lambdabot> Consider it noted.

[18:08] * ruoso wonders if TimToady will have some time to answer a few pending issues in p6-l

[18:08] <ruoso> s/if/when/

[18:10] <rakudo_svn> r33895 | pmichaud++ | [rakudo]:  Clean up flattening a fair bit.

[18:10] <rakudo_svn> r33895 | pmichaud++ | This removes 15 seconds from "make spectest" on my machine,

[18:10] <rakudo_svn> r33895 | pmichaud++ | and eliminates the special-case 'isa' checks from !flatten.

[18:10] <moritz_> re

[18:16] <ruoso> jnthn, about yada methods in roles, I'm using .yada to realize when that implementation must be substituted by the class' own implementation (or the implementation of some other role), but I'm not doing a specific check to see if all the yada methods are indeed implemented... I think it would be pretty sane to assume that if a non-implemented yada method is never called, the class doesn't really need to implement it

[18:17] <pugs_svn> r24361 | moritz++ | [t] and [t/spec] (two train travels worth of changes):

[18:17] <pugs_svn> r24361 | moritz++ |  * move arrays/end.t, assuming_and_mmd.t, value_alias_readonly.t, 

[18:17] <pugs_svn> r24361 | moritz++ |    say-crash.t and anchors.t to spec/

[18:17] <pugs_svn> r24361 | moritz++ |  * trig.t: these subs are only available after 'use Num :Trig'

[18:17] <pugs_svn> r24361 | moritz++ |  * s/lives_ok/eval_lives_ok/ for things that happen at compile time

[18:17] <pugs_svn> r24361 | moritz++ |  * Add a whole bunch of smartlinks

[18:17] <pugs_svn> r24361 | moritz++ |  * removed unnecessary eval()s

[18:17] <pugs_svn> r24361 | moritz++ |  * Str.pos is dead, long live 

[18:17] <pugs_svn> r24361 | moritz++ |  * various small cleanups

[18:17] <pugs_svn> r24361 | moritz++ |  * delete xx-uncategorized/return_in_anonymous_subs.t,

[18:17] <pugs_svn> r24361 | moritz++ |    which declared itself obsolete

[18:19] <jnthn> How can you know it's never called?

[18:30] <moritz_> [particle]: ping

[18:30] <ruoso> jnthn, if it doesn't break, it was never called

[18:31] <jnthn> ruoso: The point is that we can detect the method is missing at compile time.

[18:31] <ruoso> jnthn, but that would require the concept of an Abstract class

[18:32] <jnthn> Erm, huh?

[18:32] <ruoso> because you can design a class that is incomplete, waiting for it to be used as a superclass for other classes that will then be incomplete

[18:32] <ruoso> we would need to add a keyword saying: "this is an incomplete class"

[18:33] <ruoso> and I do think incomplete classes can be used in what they are complete

[18:33] <jnthn> If a role merely declares methods without defining them, it degenerates to an interface:

[18:33] <jnthn> Note that, while these methods must become available at class composition time, they might be supplied by any of: another role, the class itself, or some superclass. We know the methods that are coming from the other roles or the class, but we don't necessarily know the complete set of methods supplied by our super classes if they are open or rely on wildcard delegation. However, the class composer is allowed to assume that only currently declared supercl

[18:33] <jnthn> (From S12)

[18:33] <ruoso> hmm

[18:33] <ruoso> ok... 

[18:33] <pugs_svn> r24362 | moritz++ | [t/spec] various small improvements.

[18:33] <pugs_svn> r24362 | moritz++ | Also deleted S29-hash/isa.t, which is pretty pointless and 50% wrong

[18:33] <jnthn> So it needs checking at composition time.

[18:34] <jnthn> It's not hard to do that, I don't think.

[18:34] <ruoso> I'd be happier with a more relaxed constraint

[18:34] <jnthn> I'm happy with it like that.

[18:34] <ruoso> maybe we could have it as a control exception

[18:34] <ruoso> that could be re-defined to be just a warning

[18:34] <ruoso> or no warning at all

[18:34] <jnthn> If we're giving people the ability to write an interface, we should have the default being something that usefully enforces it.

[18:35] <ruoso> I rephrase... just make it a control exception that can be caught by a CONTROL block

[18:36] <jnthn> This is a compile time check...

[18:36] <ruoso> meh

[18:36] <jnthn> I agree it'd be good to provide a pragma that lets you change this.

[18:36] <jnthn> But I don't think we need to worry too much about that part now. :-)

[18:36] <ruoso> indeed...

[18:36] * ruoso bbiab &

[18:37] <jnthn> There's enough to implement without making it harder. ;-)

[18:46] *** cspencer joined
[18:47] <cspencer> anybody available to field a rakudo question? :)

[18:47] <pmichaud> here.

[18:48] <moritz_> I can try

[18:48] <cspencer> is it possible yet to call a code block that's been passed into a subroutine?

[18:48] <pmichaud> sure.

[18:48] <pugs_svn> r24363 | azawawi++ | [Syntax::Highlight::Perl6] Text::VimColor support is totally optional now.

[18:48] <pugs_svn> r24363 | azawawi++ | [Syntax::Highlight::Perl6] ->vim_html will croak if it is not installed and will 

[18:48] <pugs_svn> r24363 | azawawi++ | [Syntax::Highlight::Perl6] also provide some advice about life in general ;-)

[18:48] <pmichaud> sub foo($code) { $code() }

[18:48] <pmichaud> foo( { say 'hello' } );

[18:48] <cspencer> ie) if i do a: myroute({ .say "howdy" }).

[18:48] <cspencer> how do i get at that from inside the routine?

[18:48] <moritz_> rakudo: sub foo(&x) { x(3);  }; foo({ say 2 * $^x })

[18:48] <p6eval> rakudo 33895: OUTPUT[6␤]

[18:49] <azawawi> rakudo: say 'hello to moritz_';

[18:49] <p6eval> rakudo 33895: OUTPUT[hello to moritz_␤]

[18:49] <cspencer> ah okay, thanks :)

[18:50] <rakudo_svn> r33896 | pmichaud++ | [rakudo]: Optimize flattening a bit further.

[18:50] <rakudo_svn> r33896 | pmichaud++ | When splicing in a flattened element, we don't need to

[18:50] <rakudo_svn> r33896 | pmichaud++ | re-flatten the things we just spliced in.

[18:50] <moritz_> azawawi: re submitting perl6.vim to vimorg, I think it's a bit too early yet

[18:51] <azawawi> moritz_: anyway im bundling it with my package and making vim_html and Text::VimColor totally optional

[18:51] <moritz_> azawawi: nice

[18:51] <azawawi> moritz_: Text::VimColor failure report is a bit too much to handle ;-)

[18:54] <cspencer> i'd been trying with $code->() previously which was failing

[18:54] <cspencer> thanks again :)

[18:55] <moritz_> tha's Perl 5 ;-)

[18:57] <cspencer> o

[18:58] <cspencer> i've yet to switch that over in my head! :)

[18:58] <moritz_> it's not easy, most of us confuse the syntaxes from time to time

[18:59] <moritz_> (including Larry himself ;-)

[19:00] <rakudo_svn> r33897 | moritz++ | [rakudo] add a few files to t/spectest.data, restore alphabetical order,

[19:00] <rakudo_svn> r33897 | moritz++ | and add reasons why we don't include other file(s) here

[19:05] *** ejs1 joined
[19:11] *** justatheory left
[19:20] *** sri_kraih left
[19:20] <pugs_svn> r24364 | moritz++ | [t/spec] fudge 'use Num :Trig' line for rakudo

[19:30] <moritz_> @tell [particle] I've glanced over S19 and I think there should be an --encoding option to specify the encoding of the source file

[19:30] <lambdabot> Consider it noted.

[19:35] <pmichaud> wasn't there supposed to be some way to put that in the source itself?

[19:36] <moritz_> pmichaud: maybe, but out-of-band signalling should be allowed nonetheless

[19:36] <pugs_svn> r24365 | azawawi++ | [Syntax::Highlight::Perl6] More documentation updates

[19:36] <moritz_> pmichaud: because if that information is only in the source file, the compiler first has to guess to even parse the encoding specification

[19:37] <moritz_> which might be non-trivial for ASCII incompatible encodings

[19:37] <pmichaud> it would be at the beginning of the source file

[19:37] <pmichaud> I think the spec (or apocalypses) said somewhere that source is assumed to be utf8 until declared otherwise.

[19:37] <pmichaud> obviously that declaration would need to occur prior to any non-utf8 source.

[19:38] <pmichaud> once the declaration is spotted, transcode the rest of the source according to the declaration, and then continue parsing from there.

[19:38] <azawawi> moritz_: can i ask u for a favour? ;-)

[19:38] <moritz_> azawawi: asking is cheap ;-)

[19:38] <azawawi> moritz_: 'sudo cpan Perl::Critic'

[19:39] <azawawi> moritz_: What's the best way to get Syntax::Highlight::Perl6 into Bundle::Perl6 ?

[19:40] <moritz_> azawawi: contact the author, I think

[19:41] <moritz_> azawawi: perlcritic installed

[19:42] <azawawi> moritz_: thx a lot

[19:43] <pugs_svn> r24366 | moritz++ | [t/spec] add tests for sort, both with unary closure and to ensure that sort

[19:43] <pugs_svn> r24366 | moritz++ | is stable

[19:43] * azawawi starts accepting --harsh perlcritic-s about his module...

[19:44] <moritz_> you must be a masochist ;-)

[19:44] *** masak joined
[19:47] <azawawi> lol

[19:48] * azawawi sent a request to be added into Bundle::Perl6...

[19:48] <Hinrik> moritz_: S26 has something to say about that regarding =encoding

[19:51] *** EnQLey_ joined
[19:52] <EnQLey_> Quand tu vas r􏿽xE9ussi 􏿽xE0 chier des perls, ils vont tous dire que t'es devenu une huitre.

[19:54] <moritz_> Hinrik: I'll take a look, thanks

[20:00] <rakudo_svn> r33898 | pmichaud++ | [rakudo]:  Fix bare return value in item and list context (RT #58770)

[20:05] *** cspencer left
[20:06] <pugs_svn> r24367 | azawawi++ | [Syntax::Highlight::Perl6] Fixed 01-vim.t to work

[20:06] <pugs_svn> r24367 | azawawi++ | [Syntax::Highlight::Perl6] Passed perlcritic -5 (--gentle)

[20:10] <alester> Is Nil different from undef?

[20:11] <alester> "Bare return in subs now return Nil, which dtrt"

[20:11] <masak> alester: yes, but Nil will usually behave as you'd expect undef to do.

[20:11] <Hinrik> S02 says Nil is an "Empty list viewed as an item"

[20:11] <alester> Nil is in addition to undef, not a replacement?

[20:12] <masak> alester: correct.

[20:12] <alester> SO what's the additional value of it?

[20:12] <masak> alester: undef is more of a property of objects than an object in itself.

[20:12] <moritz_> azawawi: Nil is something that's undef in scalar context, and empty list in list context

[20:13] <moritz_> erm, I meant alester 

[20:13] <moritz_> alester: it's needed to make bare return; work roughly the same as in perl 5

[20:13] * alester goes reading http://dev.perl.org/perl6/doc/design/syn/S02.html

[20:14] <alester> ok, so Object, Nil, Whatever and Failure are just typed versions of the undef-in-Perl-5 semantics.

[20:15] <masak> alester: that's a nice way to summarize it, yes.

[20:15] <moritz_> or as TimToady usually puts it, "interesting values of undef" ;-)

[20:16] <alester> or as Tufte puts it: To clarify, add detail.

[20:17] <Hinrik> alester: btw, some synopses aren't linked to on perl.org but are available here: http://perlcabal.org/syn/

[20:18] <alester> that's tragic.

[20:18] <pugs_svn> r24368 | moritz++ | [S29] small clarification of @list.end

[20:19] <Hinrik> and apparently some of the ones on perl.org are just empty placeholders, like S29

[20:20] *** cspencer joined
[20:21] *** ZoteCut joined
[20:30] *** ZoteCut left
[20:31] *** EnQLey_ left
[20:33] <pugs_svn> r24369 | moritz++ | [t/spec] fudge test that's likely out of date

[20:34] *** ejs1 left
[20:36] *** eternaleye joined
[20:40] <rakudo_svn> r33899 | moritz++ | [rakudo] export @list.end as a sub

[20:40] <rakudo_svn> r33900 | moritz++ | [rakudo] add test for @list.end to spectest.data

[20:41] <pugs_svn> r24370 | moritz++ | [t/spec] unfudge passing tests in return.t, pmichaud++

[20:45] *** cspencer left
[20:49] <pugs_svn> r24371 | moritz++ | [t/spec] fudge a test that's likely wrong

[21:20] *** alexn_org joined
[21:27] *** SamB left
[21:27] *** SamB joined
[21:29] *** jcrites joined
[21:31] <pugs_svn> r24372 | azawawi++ | [Syntax::Highlight::Perl6] survived perlcritic -3 (--harsh) with 2 unsolved...

[21:31] <pugs_svn> r24372 | azawawi++ | [Syntax::Highlight::Perl6] Added Readonly dependency

[21:36] *** masak left
[21:44] *** justatheory joined
[21:48] *** liufeng left
[21:54] *** dukeleto_ joined
[21:55] *** Limbic_Region joined
[21:59] *** adc_penner left
[22:05] *** dukeleto left
[22:30] <rakudo_svn> r33903 | pmichaud++ | [rakudo]:  Eliminate use of %!properties attribute in favor of getprop/setprop.

[22:40] *** jferrero left
[22:41] <pugs_svn> r24373 | moritz++ | [t/spec] unTODO another test in return.t

[22:42] *** justatheory left
[22:42] <pugs_svn> r24374 | azawawi++ | [Syntax::Highlight::Perl6] Only 35 warnings in perlcritic --brutal or -1

[22:42] *** alexn_org left
[22:44] *** spx2 left
[22:44] *** spx2 joined
[22:46] <pugs_svn> r24375 | azawawi++ | [Syntax::Highlight::Perl6] svn propset svn:keywords "Date Author Revision Id"

[22:47] <pugs_svn> r24376 | azawawi++ | [Syntax::Highlight::Perl6] only svn propset svn:keywords "Id"...

[22:48] <pugs_svn> r24377 | moritz++ | [t/spec] clean up passing TODO tests in assign.t

[22:48] <azawawi> moritz_: perlcritic -1 is really annoying ;-) it should be called --annoying or --silly

[22:49] <moritz_> azawawi: then don't run it

[22:49] <azawawi> moritz_: you never learn until you try ;-)

[22:49] *** jcrites left
[22:49] *** mberends left
[22:51] <azawawi> moritz_: e.g. POD section warnings are pretty much useless...

[22:51] <azawawi> moritz_: "configuration and environment", that's cobol ;-)

[22:51] * moritz_ finds much of perlcritic pretty useless

[22:52] <azawawi> i thought -1 would check for more possible errors, not syntactic preferences...

[22:53] <moritz_> http://www.perlmonks.org/?node_id=655882

[22:58] *** maerzhase left
[23:00] <Hinrik> perlcritic -1 is pretty anal

[23:00] <moritz_> but more anal than pretty ;-)

[23:01] <Hinrik> I use -3 minus a few annoying policies (set in .perlcriticrc)

[23:08] *** pbuetow left
[23:13] <pugs_svn> r24378 | azawawi++ | [Syntax::Highlight::Perl6] Updated perl6.vim to r24360

[23:13] <pugs_svn> r24378 | azawawi++ | [Syntax::Highlight::Perl6] Added missing t/01-vim.t to MANIFEST

[23:13] <pugs_svn> r24378 | azawawi++ | [Syntax::Highlight::Perl6] Bumped to version 0.025... Releasing to CPAN.

[23:16] <pugs_svn> r24379 | moritz++ | [t/spec] add test for overriding <.ws> rules

[23:17] <pugs_svn> r24380 | moritz++ | [t/spec] svn props

[23:18] <azawawi> not bad, i learnt a lot from building this cpan module ;-)

[23:19] * azawawi wonders why cpan does not use .tar.bz2

[23:19] <moritz_> azawawi: it doesn't gain very much, but is so much slower

[23:20] <Hinrik> perl6: my $var = [1,2,3]; @@$var

[23:20] <azawawi> moritz_: yeah but makes sense in terms of storage space...

[23:20] <p6eval> pugs: OUTPUT[*** Unknown syntactic construct: Syn "@@{}" [Var "$var"]␤    at /tmp/jQz0eT10rG line 1, column 20 - line 2, column 1␤]

[23:20] <p6eval> ..rakudo 33904: OUTPUT[Syntax error at line 1, near "@@$var"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[23:20] <p6eval> ..elf 24380: OUTPUT[Not a SCALAR reference at (eval 115) line 4.␤ at ./elf_f line 3861␤]

[23:20] <Hinrik> perl6: my $var = sub { 1 }; &$var

[23:20] <p6eval> elf 24380: OUTPUT[/home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:141:in `block in to_dump0': undefined method `to_dump0' for true:TrueClass (NoMethodError)␤     from /home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:140:in `each'␤       from

[23:20] <p6eval> ../home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.r...

[23:20] <p6eval> ..pugs: RESULT[sub :(@_) "$_" := "Scalar" #<Scalar:0xb7a60afd>␤          "@_" := "Array" #<Array:0xb7a60af5>␤          "&?ROUTINE" := "Sub" #<Sub:0xb7184961>␤          "&?BLOCK" := "Sub" #<Sub:0xb7184961> {, "$var" := "Scalar" #<Scalar:0xb7a69141>, "$_" := "Scalar" #<Scalar:0xb7a6fbe5>␤        ...

[23:20] <p6eval> ..rakudo 33904: OUTPUT[Syntax error at line 1, near "&$var"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[23:21] <moritz_> Hinrik: &$var doesn't make sense anymore

[23:21] <moritz_> Hinrik: calling subs happens as $var() or $var.()

[23:21] <Hinrik> ok

[23:22] <pugs_svn> r24381 | moritz++ | [t/spec] test for non-capturing of the right rules

[23:23] <azawawi> moritz_: 0.026 release is going to add a bin/syntaxhighlightp6 (the good old STD_syntax_highlight)

[23:24] *** iblechbot left
[23:24] <azawawi> moritz_: or bin/shp6, bin/colorp6, bin/p6_in_color, ... etc ;-)

[23:25] <moritz_> I'm thoroughly confused: why does this fail: http://nopaste.snit.ch/14946 but t/spec/S05-grammar/ws.t pass?

[23:25] <Hinrik> I think the convention is to keep it in script/ (in the capn package, that is) if it's platform-independent

[23:25] <Hinrik> cpan*

[23:27] <azawawi> Hinrik: that's what puzzles me, some modules put it in root, some in bin/, some in same last package name; so no std so far there...

[23:30] <rakudo_svn> r33905 | moritz++ | [rakudo] add tests for overridable <.ws> rules to spectest.data

[23:30] <azawawi> good night guys... oops it is 1:30am here... ;-)

[23:31] <moritz_> good night

[23:32] <jnthn> moritz_: Does changing your failing example from rule b {x y};

[23:32] <jnthn> to have 'x' 'y'

[23:32] <jnthn> Make a difference?

[23:32] <jnthn> That's the only difference that stands out.

[23:32] <jnthn> If it doesn't make a difference, it's...odd.

[23:33] <Hinrik> heh, only 3 (out of >500) syntax files bundled with vim are longer than perl6.vim

[23:34] * azawawi is dreaming about a faster 'lex'-free, 'log'-free STD.pm and a working Text::VimColor on all platforms ;-) &

[23:34] <azawawi> that's Perl 6 in Action ;-)

[23:34] * azawawi sleep &

[23:42] *** alexn_org joined
[23:56] *** vixey left
[23:56] *** dukeleto_ left
[23:57] *** dukeleto joined
[23:57] *** bacek__ joined
