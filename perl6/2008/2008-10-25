[00:04] *** [particle] left
[00:04] *** eternaleye joined
[00:09] *** strelok7 left
[00:10] <FireMinion> is there any testing frameworks like Test::Simple or Test::More build for perl6 yet?

[00:14] *** sri_work_ joined
[00:15] <TimToady> sure

[00:16] <TimToady> see  https://svn.pugscode.org/pugs/t

[00:16] <lambdabot> Title: pugs - Revision 22745: /t

[00:17] <FireMinion> excellent , Thanks TimToady

[00:18] <TimToady> and we'll probably be building the basic testing calls right into Perl 6 eventually

[00:19] <FireMinion> That be good

[00:20] <FireMinion> Planning to start writing some modules in perl6 and want some basic testing at least

[00:20] <TimToady> the proposal is to have a testing adverb that can turn any built-in comparison operator into a test

[00:20] <TimToady> but we already have 18,000 tests or so for you to look at

[00:22] <FireMinion> Should be enough of a reference for me

[00:24] *** sri_work left
[00:25] <wayland76> I have some code where $fullimplementationname contains the name of a class, and I have a line that says...

[00:25] <wayland76> self.implementation = macro { quasi { {{{ $fullimplementationname }}}->new(|$params); } };

[00:25] <wayland76> But naturally that doesn't work in Rakudo yet

[00:25] <wayland76> Is there another way to instantiate the class without macros?

[00:26] *** pcbuetow is now known as pbuetow

[00:26] <ruoso> wayland76, well... at first I should correct ->new to .new ;)

[00:27] *** mjk left
[00:28] <ruoso> wayland76, but I'm having a hard time understanding what you're trying to do

[00:32] *** pbuetow left
[00:34] <wayland76> Ok, I have a class (?) that we could call "Tree::Axis".  It wants to delegate everything to another class, but which other class depends on the options passed to the .new() method of Tree::Axis

[00:35] <wayland76> So Tree::Axis.new() constructs the string $fullimplementationname, and then tries to create an instance of that class

[00:37] <ruoso> I'd guess ::($fullimplementationname).new()

[00:37] * ruoso sleep &

[00:38] <wayland76> I'm still getting "Statement not terminated properly"

[00:38] <wayland76> But maybe it's a bug :)

[00:38] <wayland76> Have a good sleep :)

[00:38] *** justatheory left
[00:39] *** justatheory joined
[00:39] <FireMinion> bah who needs sleep......

[00:40] <TimToady> "Statement not terminated properly" is what rakudo says when it can't think of anything better to say, which is usually :)

[00:41] <TimToady> it just means, "there was a syntax error somewhere near here"

[00:41] <TimToady> STD will generally give you a more informative error message, assuming it's actually in error

[00:41] *** eternaleye left
[00:42] <wayland76> TimToady: Thanks, I've gotten it often enough to figure that :)

[00:42] <wayland76> It tends to do that when you keep writing code with macros in it :)

[00:43] <FireMinion> maybe it's not ready for it yet wayland76

[00:43] *** eternaleye joined
[00:43] <wayland76> FireMinion: That's right; macros are the last thing on the Rakudo ROADMAP

[00:44] <pugs_svn> r22746 | lwall++ | [STD] fix parameter parsing problem noted by moritz++

[00:44] <TimToady> was the last thing on the pugs map too

[00:44] <wayland76> which is why none of my code works, except the code that's running into problems with loops and recursion :)

[00:45] <TimToady> as far as I know, STD is the only thing that even parses macors

[00:45] <TimToady> *macros

[00:45] <wayland76> (and that doesn't work either :) ) 

[00:45] <wayland76> ...and humans :)

[00:45] <FireMinion> I am still trying to get a good enough grasp of the concepts in the new syntax 

[00:45] <wayland76> (Humans can even parse "Macros the Black" )

[00:46] <TimToady> btw, the latest change found an error in the test suite

[00:46] <wayland76> FireMinion: Oh, me too :).  

[00:46] <TimToady> Can't put required parameter after optional parameters at ../../t/blocks/currying.t line 47:

[00:46] <TimToady> ------> sub __hyper ($op?, Array @a, Array @b) {

[00:46] <wayland76> great :)

[00:46] <FireMinion> thanks TimToady

[00:47] *** sri_work_ is now known as sri_kraih

[00:47] <FireMinion> I  got another error right now in the Test.pm module which I'm trying to figure out

[00:47] <wayland76> TimToady++ :)

[00:49] <pugs_svn> r22747 | lwall++ | [currying.t] move misplaced optional parameter to end (only used by name anyway)

[00:51] *** sri_kraih is now known as sri_work

[00:51] *** sri_work is now known as sri_kraih

[00:52] *** TimToady left
[00:53] *** TimToady joined
[00:57] *** sri_kraih left
[00:57] *** sri_work joined
[01:00] <wayland76> Btw, I just saw the message on p6l about Assigning and passing $/

[01:01] <wayland76> And I noticed that the following code prints "Str"

[01:01] <wayland76> rakudo: if ("f" ~~ m/f/) { my $m = $/; say $m.WHAT() }

[01:01] <p6eval> rakudo 31963: OUTPUT[Str‚ê§]

[01:01] <TimToady> you mean p6c?

[01:02] <wayland76> Sorry, p6u

[01:02] <wayland76> [email@hidden.address]
[01:02] <wayland76> I'm only on p6u and p6l, so I've missed any other messages that might be going around :)

[01:03] <wayland76> I was running into this while trying to figure out a way around the looping/recursion bug :)

[01:03] <wayland76> But now I'll just wait for the looping/recursion bug to be fixed instead :)

[01:06] *** mj41 left
[01:07] <TimToady> decommuting &

[01:08] *** eternaleye left
[01:11] *** meppl left
[01:16] *** eternaleye joined
[01:20] *** Limbic_Region left
[01:29] *** hercynium joined
[01:34] *** mberends joined
[01:42] *** Entonian joined
[01:52] *** Entonian left
[01:53] *** alester joined
[02:06] *** alester left
[02:10] *** Ehtyar left
[02:20] *** kanru left
[02:28] *** kanru joined
[02:34] *** alanhaggai joined
[02:38] *** Psyche^ joined
[02:38] *** alester joined
[02:39] *** alanhaggai_ joined
[02:39] *** alanhaggai left
[02:39] *** alanhaggai_ is now known as alanhaggai

[02:54] *** Patterner left
[02:54] *** Psyche^ is now known as Patterner

[03:01] *** Psyche^ joined
[03:02] *** elmex_ joined
[03:03] *** Patterner left
[03:03] *** AzureStone_ left
[03:03] *** FireMinion left
[03:03] *** ting left
[03:03] *** lumi left
[03:03] *** clkao left
[03:03] *** lisppaste3 left
[03:03] *** pasteling left
[03:03] *** kane_ left
[03:03] *** Guest70230 left
[03:03] *** yahooooo left
[03:03] *** orafu left
[03:03] *** cxreg left
[03:03] *** gantrixx left
[03:03] *** jiing_ left
[03:03] *** literal left
[03:03] *** c1sung left
[03:03] *** Psyche^ is now known as Patterner

[03:04] *** Patterner left
[03:04] *** Patterner joined
[03:04] *** AzureStone_ joined
[03:04] *** FireMinion joined
[03:04] *** ting joined
[03:04] *** clkao joined
[03:04] *** lisppaste3 joined
[03:04] *** lumi joined
[03:04] *** pasteling joined
[03:04] *** kane_ joined
[03:04] *** Guest70230 joined
[03:04] *** yahooooo joined
[03:04] *** orafu joined
[03:04] *** literal joined
[03:04] *** gantrixx joined
[03:04] *** c1sung joined
[03:04] *** jiing_ joined
[03:04] *** cxreg joined
[03:04] *** Psyche^ joined
[03:04] *** Patterner left
[03:04] *** Psyche^ is now known as Patterner

[03:04] *** sri_work is now known as sri_kraih

[03:05] *** cookys left
[03:05] *** audreyt left
[03:05] *** audreyt joined
[03:05] *** cookys_ joined
[03:08] *** sri_kraih left
[03:08] *** sri_work joined
[03:09] *** sri_work is now known as sri_kraih

[03:09] *** sri_kraih left
[03:09] *** sri_work joined
[03:11] *** sri_work left
[03:11] *** sri_kraih joined
[03:13] *** Jmax left
[03:14] *** Jmaxxx joined
[03:16] *** elmex left
[03:16] *** elmex_ is now known as elmex

[03:27] *** mberends left
[03:42] *** hercynium left
[03:59] *** PZt left
[04:02] *** PZt joined
[04:03] *** PZt left
[04:04] *** PZt joined
[04:10] *** alanhaggai left
[04:10] *** alanhaggai_ joined
[04:10] *** alanhaggai_ is now known as alanhaggai

[04:11] *** apeiron left
[05:16] *** justatheory left
[05:24] *** alester left
[05:33] *** alanhaggai_ joined
[05:34] *** alanhaggai left
[05:34] *** alanhaggai_ is now known as alanhaggai

[05:34] *** xuser left
[05:34] *** kcwu left
[05:34] *** jauaor left
[05:34] *** jauaor joined
[05:34] *** xuser joined
[05:34] *** kcwu joined
[06:13] *** rhr left
[06:33] *** zamolxes joined
[06:41] *** smg left
[07:16] *** [particle] joined
[07:30] *** AzureStone_ left
[07:36] *** AzureStone joined
[07:36] *** abra joined
[07:38] *** ZuLuuuuuu joined
[07:43] <pugs_svn> r22748 | azawawi++ | [STD_syntax_highlight] no more podchecker warnings

[08:11] *** smg joined
[08:21] *** schmalbe joined
[08:39] <wayland76> If we ever make a POD viewer, in which you can /see/ the doco, we should call it seedpod :)

[08:44] *** abra left
[08:44] *** abra joined
[08:57] *** cpfr left
[08:57] *** cpfr joined
[09:03] *** pedrob joined
[09:08] *** preflex left
[09:08] <moritz_> good morning

[09:10] *** preflex joined
[09:10] <moritz_> is a class of type "Class"?

[09:20] <pugs_svn> r22749 | moritz++ | [t] some cleanups, moved oo/attributes/class.t to spec, and cleaned up.

[09:23] *** mj41 joined
[09:24] <pugs_svn> r22750 | moritz++ | [t] move oo/class/literal.t to spec/

[09:26] *** iblechbot joined
[09:28] *** pedrob left
[09:30] <pugs_svn> r22751 | moritz++ | [t] some cleanup in instance.t

[09:32] <moritz_> @tell azawawi many of the links in the synpsis are broken, because they contain a superfluous t/ in the path (for example in S12)

[09:32] <lambdabot> Consider it noted.

[10:21] *** abra left
[10:25] <moritz_> http://perlgeek.de/blog-en/perl-6/syntax-highlighter.html

[10:25] <lambdabot> Title: blog | Perlgeek.de Blog :: A Syntax Highlighter for Perl 6

[10:25] *** AzureStone_ joined
[10:27] *** AzureStone left
[10:27] *** xuser left
[10:27] *** kcwu left
[10:27] *** jauaor left
[10:28] *** AzureStone joined
[10:28] *** jauaor joined
[10:28] *** xuser joined
[10:28] *** kcwu joined
[10:39] *** azawawi joined
[10:40] <azawawi> hi lambdabot ;-)

[10:40] <lambdabot> azawawi: You have 1 new message. '/msg lambdabot @messages' to read it.

[10:44] *** AzureStone left
[10:52] *** iblechbot left
[10:54] <ruoso> moritz_++ # very informative blog posts....

[11:03] <azawawi> hi ruoso

[11:04] <azawawi> moritz_++ # thx

[11:06] *** zamolxes_ joined
[11:06] *** zamolxes left
[11:07] *** fridim_ joined
[11:13] *** Alias_ joined
[11:17] *** Alias_ left
[11:17] *** Alias_ joined
[11:18] *** Alias_ left
[11:19] *** Alias_ joined
[11:21] <ruoso>  hi azawawi 

[11:22] * jauaor wonders which blog post

[11:23] <ruoso> jauaor, the one posted here just before you join ;)

[11:23] <ruoso> http://perlgeek.de/blog-en/perl-6/syntax-highlighter.html

[11:23] <lambdabot> Title: blog | Perlgeek.de Blog :: A Syntax Highlighter for Perl 6

[11:23] <jauaor> :-D

[11:23] <jauaor> Thanks!

[11:26] * ruoso misses a construct like a recurse map...

[11:27] <ruoso> @foo = recurse-map { .isa  } { .variants } $object

[11:27] <lambdabot> Maybe you meant: faq ft todo yow

[11:27] <ruoso> somethign like that

[11:42] <pugs_svn> r22752 | ruoso++ | [smop] implementation of Class.can($methodname, $capture?) and Class.dispatch...

[11:47] <ruoso> for people wanting to write Perl 6 code, there's an important task now, which is to write all the built-in types in Perl 6... it's starting in pugs/v6/smop/src-s1p/

[11:48] *** zamolxes_ left
[11:48] <ruoso> azawawi, do you think you could put a STD-syntax-highlight for the files (the ones that parse, of course) in v6/smop/src-s1p ?

[11:48] <ruoso> I mean... put it into a public place...

[11:48] <azawawi> ruoso: yeah why not

[11:48] * azawawi checking it

[11:50] *** smtms left
[11:52] *** adc_Penner joined
[11:54] <moritz_> ruoso: if it's important, write about and. And also about how to test what you write.

[11:54] <lambdabot> moritz_: You have 1 new message. '/msg lambdabot @messages' to read it.

[11:55] <moritz_> azawawi: I think html for t/spec/ is enough, since nearly all of t/* will be moved there anyway

[12:01] *** pmurias joined
[12:01] <ruoso> moritz_, well, the first test is that it should parse

[12:02] <ruoso> but it's mostly abstract at the moment...

[12:02] <ruoso> because there are circular dependencies that will only be solved as all the types are declared

[12:03] <ruoso> the idea is declaring all the types, 

[12:03] <pmurias> it's more spec task then an implementation one atm

[12:04] <ruoso> yes... indeed..

[12:07] <ruoso> but at the same time, a lot of actual implementation needs to be made

[12:07] <ruoso> like how method dispatch work

[12:07] <ruoso> (which is defined in Class.pm)

[12:07] <ruoso> how Object.new works...

[12:08] <ruoso> (which is defined in Object.pm and Class.pm)

[12:23] <pmurias> ruoso: the last check in can seems strange

[12:23] <ruoso> my last check in?

[12:24] <pmurias> if (! .^!methods.{$name}.multi) {

[12:27] <pmurias> it might be correct that an only methods hides all more derived multi ones

[12:30] <pmurias> but how to overwrite a multi with a multi in such a scheme is not clear to me

[12:40] <ruoso> I don't think you can

[12:40] <ruoso> unless you use the same signature

[12:41] *** ZuLuuuuuu left
[12:41] *** iblechbot joined
[12:42] *** Alias__ joined
[12:43] <azawawi> ruoso: http://feather.perl6.nl/~azawawi/html_smop/src-s1p/

[12:43] <lambdabot> Title: Index of /~azawawi/html_smop/src-s1p

[12:44] <pasteling> "azawawi" at 212.38.152.37 pasted "./smop_highlight" (47 lines, 1.5K) at http://sial.org/pbot/32858

[12:46] <pugs_svn> r22753 | azawawi++ | [STD_syntax_highlight] Added smop_highlight which highlights *.pm 

[12:46] <pugs_svn> r22753 | azawawi++ | [STD_syntax_highlight] code in v6/smop/src-s1p

[12:46] *** smtms joined
[12:49] <ruoso> azawawi, interesting that it doesn't highlight much

[12:50] <azawawi> ruoso: errors, see the output i sent earlier

[12:52] <azawawi> ruoso: pod comments are not yet supported via standard STD.pm

[12:52] *** Bzek joined
[12:54] <azawawi> ruoso: List.pm fails in STD parsing. is that right?

[12:55] <ruoso> yeah yeahj

[12:55] <ruoso> azawawi, I thought it would find the =begin and =end

[12:57] <azawawi> i think we should discuss it with pmurias

[12:58] <azawawi> i can hack it with a special type _comment if you want but i wanted it to be more standard...

[12:59] <ruoso> but what it has that it's not standard?

[12:59] *** Alias_ left
[13:00] <azawawi> i meant by that not getting that information from STD.pm

[13:00] <ruoso> what I don't get is what is the difference from the pods in the tests

[13:00] <ruoso> ?

[13:01] <azawawi> ah comp_unit

[13:02] <azawawi> ruoso, can u give me a specific example?

[13:03] <ruoso> why isn't it blue?

[13:03] <moritz_> ruoso: STD.pm matches POD and comments as (implicit) <.ws> that doesn't appear in the parse tree. Thus the HTML output shows it as part of the rule in which it was matched

[13:03] * azawawi looking at http://feather.perl6.nl/~azawawi/html_smop/src-s1p/Class.pm.html

[13:03] <lambdabot> Title: ./STD_syntax_highlight ../../v6/smop/src-s1p/Class.pm

[13:03] <moritz_> ruoso: the syntax hilighter uses an evil hack: it colors statement_list blue, and everything below in different colors, because most comments appear at that level

[13:04] <moritz_> ruoso: if there's a comment at a different level in the parse tree, it won't show up in blue

[13:05] <ruoso> oh... I got it

[13:05] <ruoso> but I'm missing some colors...

[13:05] <ruoso> is everything colored right?

[13:06] <moritz_> only the tokens for which colors are defined

[13:07] <moritz_> btw it's "True", not "true"

[13:08] <azawawi> the problem is in block; it is black... you make it blue and everything works

[13:09] <moritz_> but it will also make the curlies blue, no?

[13:10] <azawawi> unfortunately yeah...

[13:11] <azawawi> either we use a modified STD.pm and risk not getting the latest fixes; or we try to hack it in STD_syntax_highlight

[13:11] *** jauaor left
[13:11] <pmurias> azawawi: with a minor change to gimme5 we could make it treat <.foo> as <foo>

[13:12] <pmurias> azawawi: we can use a modified gimme5

[13:12] <moritz_> I think that TimToady would welcome a --keepall option to gimme5

[13:12] <pmurias> which would have a $KEEPALL variable to skip bind everything

[13:13] <pmurias> i have to do math now but i'll hack it in later if TimToady has nothing against such an option

[13:13] <azawawi> great

[13:14] <azawawi> pmurias: i managed to hack it work with --simple but most <span> were not closed (i.e. bad html) 

[13:15] * azawawi is thinking what to order for lunch? ;-)

[13:22] <pmurias> azawawi: you mean --simple generates bad html?

[13:24] <moritz_> it seems that --simple is actually more complicated ;)

[13:24] <azawawi> pmurias: my version generates bad html but works

[13:24] <azawawi> moritz_: --simple is complicated ;-)

[13:25] * azawawi wonders if sleep deprevation and hunger can be a reason why --simple is complicated ;-)

[13:26] * moritz_ recommends a good meal and sleep to ponder over that question ;)

[13:27] <pugs_svn> r22754 | pmurias++ | [STD_syntax_highlight] --simple closes spans properly

[13:27] * pmurias was suferring from an abused sleep schedule yesterday when he wrote that bugish code

[13:27] <ruoso> isn't there a way to detect "unparsed" code in STD match tree?

[13:28] * azawawi tests --simple over foo.pl

[13:28] <moritz_> ruoso: no. Problem is, some tokens match text correctly without capturing

[13:28] <pmurias> ruoso: and pod and comments and whitespace are bundled together

[13:29] <ruoso> hmm... ok... it's seen as whitespace

[13:29] <ruoso> and whitespaces are not captured

[13:29] <moritz_> what one could do is try to hook a reduction action into ws that stores the offset and matched branch, or something

[13:30] <moritz_> but I guess that :keepall is the better alternative

[13:30] <pmurias> yes

[13:30] <azawawi> pmurias: one thing why --simple is a bit complicated is that CSS actually helps you with parent/child coloring

[13:30] <ruoso> but anyway... wasn't the code in Object.pm for instance supposed to have more colors?

[13:30] <pmurias> azawawi: does it spit out incorrect output?

[13:30] <azawawi> nop

[13:31] *** alester joined
[13:31] <pmurias> it's more complicated as it tries to be smarter

[13:31] <pmurias> math for real&

[13:31] *** pmurias left
[13:32] <ruoso> ok... I know what the problem is...

[13:32] <ruoso> I'm too much used to emacs coloring scheme

[13:32] <ruoso> which is considerably richer than vi's

[13:33] *** pbuetow joined
[13:33] <ruoso> for instance, it highlights some known keywords

[13:33] <ruoso> like 'my', 'for', 'sub'

[13:33] *** alanhaggai left
[13:33] <ruoso> and it also highlights arrays and hashes differently

[13:34] <ruoso> and the scalar has a different color when it's declared

[13:34] <ruoso> like 'my $foo'

[13:39] *** ChanServ sets mode: +o diakopter

[13:39] *** diakopter sets mode: +o TimToady

[13:39] *** diakopter sets mode: -o diakopter

[13:39] * azawawi going out for a meal... cya later

[13:39] *** azawawi left
[13:43] *** alester left
[14:04] *** ZuLuuuuuu joined
[14:06] *** alanhaggai joined
[14:27] *** rhr joined
[14:38] *** alester joined
[14:43] *** abra joined
[14:43] *** alester left
[15:02] *** [particle] left
[15:06] *** Limbic_Region joined
[15:08] *** ZuLuuuuuu left
[15:12] <TimToady> moritz_: no, there's not a Class type in official p6.  a class is represented by a protoobject of the same type as the object

[15:13] *** alanhaggai_ joined
[15:13] *** alanhaggai left
[15:13] *** alanhaggai_ is now known as alanhaggai

[15:13] <ruoso> in SMOP, Class is a meta-type

[15:14] <TimToady> if you call in Class people will get confused

[15:14] <TimToady> *it

[15:14] <ruoso> I was calling it P6Meta first, 

[15:15] <ruoso> then I renamed to Class... 

[15:15] <TimToady> why?

[15:15] <ruoso> because it's what define how classes work

[15:15] <ruoso> it is what govern the "class" keyword

[15:15] <TimToady> maybe it's ClassHow or some such

[15:16] <ruoso> MetaClass

[15:17] <ruoso> ?

[15:17] <TimToady> then people will think it defines how Class works, and there isn't one :)

[15:19] <TimToady> Howclass maybe

[15:19] <TimToady> though that's not quite right either

[15:19] <TimToady> more like Declclass

[15:20] <TimToady> but this is all under pre-caffiene disclaimer

[15:22] <TimToady> could maybe go for Dclass, Drole, Dmodule, etc'

[15:22] <TimToady> s/'/./

[15:23] <TimToady> re KEEPALL

[15:23] <ruoso> which abstraction is abstracter than Class?

[15:23] <TimToady> I still think you guys want a decorated _ array

[15:23] <TimToady> what is a Class?

[15:24] <ruoso> hmm... ok... I think the greater confusion is mixing prototype-based and class-based oo

[15:24] *** justatheory joined
[15:24] <ruoso> Perl 6 uses the Class-based lingo, but it's quite prototype-based

[15:25] <TimToady> it uses class-based lingo, not Class-based :)

[15:25] <ruoso> heh

[15:26] <TimToady> are you asking about the type of .HOW objects?

[15:27] <ruoso> right... the HOW for classes will be Class

[15:27] <ruoso> (as SMOP currently names)

[15:27] <TimToady> and that is what is not a classical class, which is why I'm objecting

[15:27] <diakopter> Classness

[15:28] <TimToady> that would work, if we'd stuck with my earlier suggest of howness :)

[15:29] <TimToady> Knowclass maybe

[15:29] <diakopter> Classiness

[15:30] <diakopter> Classence

[15:30] <TimToady> Classic

[15:30] <fullermd> Declasse

[15:30] <ruoso> the problem is that the class keyword does not describe a class, but a protoobject...

[15:30] <TimToady> √©

[15:31] <diakopter> Classete

[15:31] <diakopter> Classeme

[15:31] *** justatheory left
[15:32] <TimToady> Classhalfempty

[15:32] <TimToady> Halfclassed

[15:32] <diakopter> Outclassed? :P

[15:32] <TimToady> Declassified

[15:34] <diakopter> ProtoClass ?

[15:35] <TimToady> I still think if it's returned by HOW it should be something with "how" in it

[15:36] <ruoso> maybe ClassHow is not a bad idea

[15:36] <ruoso> since it's a knowhow

[15:36] <ruoso> heh

[15:37] <TimToady> it very much says "I am the *implementation* of class, not *a* class"

[15:37] <diakopter> CowBrownNow.HOW

[15:37] <TimToady> Cow<Brown>.HOW :now

[15:37] *** azawawi joined
[15:38] <ruoso> knowhow ClassHOW {...}

[15:38] <TimToady> even better HuffMAN coding, more remote from normal

[15:38] <azawawi> @tell lambdabot hi

[15:38] <lambdabot> Nice try ;)

[15:39] <ruoso> and that makes me realize that the API for HOW should be a little bit different

[15:39] <ruoso> something like...

[15:39] <TimToady> @tell time

[15:39] <lambdabot> Consider it noted.

[15:39] <ruoso> register($keyword, $name, *%attributes)

[15:39] <diakopter> @tell it noted.

[15:39] <lambdabot> Consider it noted.

[15:40] <ruoso> where $keyword would be 'method', 'attribute', 'submethod'

[15:40] <ruoso> and $name would be the name of the thing

[15:40] <ruoso> and *%attributes would contain the signature, traits, and the code...

[15:40] * ruoso thinking in Catalyst::Controller having its own HOW

[15:41] <ruoso> which defines 'action's instead of 'method's

[15:41] * ruoso lunch &

[15:41] <diakopter> @messages

[15:41] <lambdabot> You don't have any new messages.

[15:41] <diakopter> @tell diakopter .

[15:41] <lambdabot> You can tell yourself!

[15:42] <diakopter> I know; that's what I was doing.

[15:42] <TimToady> @till diakopter

[15:42] <lambdabot> Consider it noted.

[15:45] <diakopter> @pointy ['']

[15:45] <lambdabot>  Improperly terminated character constant at "'']" (column 2)

[15:46] <diakopter> @src larry

[15:46] <lambdabot> Source not found. That's something I cannot allow to happen.

[15:46] <diakopter> @src TimToady

[15:46] <lambdabot> Source not found. Your mind just hasn't been the same since the electro-shock, has it?

[15:48] *** pedrob joined
[15:49] <TimToady> I wonder if I should install a rule in STD that carps if someone tries to use the word "Class"...

[15:49] <TimToady> "Perl 6 has no Class at line 42"

[15:49] <Limbic_Region> why TimToady - because you have not Class and neither should anyone else?

[15:49] <Limbic_Region> :P

[15:49] *** abra left
[15:49] <Limbic_Region> you beat me to the punch

[15:49] <TimToady> actually, tomorrow I probably have two classes...

[15:50] <TimToady> since I just got a call from Sharon, who can't teach her class

[15:50] <diakopter> oh, not 2 sections of the same class.

[15:50] <lambdabot> diakopter: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:50] <diakopter> @messages

[15:50] <lambdabot> TimToady said 8m 30s ago:

[15:50] * Limbic_Region hasn't taught in years

[15:51] <diakopter> @tell pugs plumbit

[15:51] <lambdabot> Consider it noted.

[15:51] <diakopter> pugs: ''

[15:51] <p6eval> pugs: OUTPUT[/home/evalenv/pugs/pugs: error while loading shared libraries: libsmop.so: cannot open shared object file: No such file or directory‚ê§]

[15:51] <diakopter> @tell p6eval erm

[15:51] <lambdabot> Consider it noted.

[15:52] <diakopter> pugs: '

[15:52] <p6eval> pugs: OUTPUT[/home/evalenv/pugs/pugs: error while loading shared libraries: libsmop.so: cannot open shared object file: No such file or directory‚ê§]

[15:52] <lambdabot> p6eval: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:53] <diakopter> @girl19

[15:53] <lambdabot> I have been into not actually hacking, but social engineering

[15:58] <ruoso> TimToady, anyway... did you think how new keywords like 'class' and 'knowhow' are going to be defined in Perl 6? Considering, for instance, the Catalyst controller which have actions... how would that be defined?

[15:59] <ruoso> controller Foo { action bar is Path('/') { ... } }

[16:01] <ruoso> actually it would be more like

[16:01] <ruoso> controller Foo { action bar does Path('/') { ... } }

[16:03] <TimToady> macro package_declarator:<controller>

[16:04] <TimToady> or just derive a grammar

[16:04] <ruoso> right... that's on the parsing part

[16:05] <ruoso> how to give meaning to that?

[16:06] <TimToady> a macro can turn that into anything else.  and a grammar can have random actions.  beyond that, I don't really care

[16:07] <ruoso> ok... I thought there would be something *after* the parse that would have the chance to add meaning....

[16:07] <ruoso> but that's probably very compiler-specific

[16:07] <TimToady> something has to be left for the programmer to do :)

[16:08] <TimToady> and one of my assets/liabilities as a language designer is that I'm not actually much into meta-ness

[16:09] <ruoso> maybe the compiler should leave some hooks to let the user overwrite the meaning of some AST nodes

[16:11] <ruoso> that will probably be easier after the compiler bootstraps

[16:16] <pugs_svn> r22755 | ruoso++ | [smop] mv Class.pm ClassHOW.pm, as suggested by TimToady++

[16:20] *** pedrob left
[16:21] *** pedrob joined
[16:23] *** PZt left
[16:25] *** jhorwitz joined
[16:25] *** _Jedai_ joined
[16:27] *** explorer joined
[16:28] *** apeiron joined
[16:42] *** Jedai left
[16:42] *** Jedai joined
[16:43] *** cognominal left
[16:45] *** |Jedai| left
[16:45] *** schmalbe left
[16:53] *** Bzek left
[17:09] *** [particle] joined
[17:27] *** smtms left
[17:27] *** pedrob left
[17:35] *** smtms joined
[17:40] *** Limbic_Region left
[17:54] *** ZuLuuuuuu joined
[18:00] *** [particle] left
[18:00] *** TreyHarris is now known as Trey

[18:02] *** zamolxes joined
[18:19] <azawawi> pmurias: ping

[18:43] *** pedrob joined
[18:48] *** zamolxes left
[19:07] *** Alias__ left
[19:09] *** jauaor joined
[19:10] *** cognominal joined
[19:14] <pugs_svn> r22756 | azawawi++ | [STD_syntax_highlight] finally implemented the complicated --simple ;-)

[19:14] <pugs_svn> r22756 | azawawi++ | [STD_syntax_highlight] results are not optimal but it generates correct html.

[19:20] <azawawi> @tell pmurias --simple is done see r22756

[19:20] <lambdabot> Consider it noted.

[19:30] <azawawi> @seen particle

[19:30] <lambdabot> I haven't seen particle.

[19:30] <azawawi> @seen [particle]

[19:30] <lambdabot> I saw [particle] leaving #perl6 1h 29m 13s ago, and .

[19:30] <azawawi> @tell [particle] size results between --simple and full mode are http://feather.perl6.nl/~azawawi/simple_test/

[19:30] <lambdabot> Consider it noted.

[19:32] *** pmurias joined
[19:33] <pmurias> azawawi: pong

[19:33] <lambdabot> pmurias: You have 1 new message. '/msg lambdabot @messages' to read it.

[19:33] <azawawi> pmurias: it turned out we need to push rules to pop them out ;-)

[19:34] <azawawi> pmurias: simple ;-)

[19:43] <ruoso> std: class Foo { multi submethod FOO (Int $a) {...}}

[19:43] <p6eval> std 22756: OUTPUT[parsed‚ê§]

[19:44] *** [particle] joined
[19:44] *** rindolf joined
[19:46] <pmurias> ruoso: overwriting a multi method completly is important

[19:46] <ruoso> pmurias, maybe if you declare the subclass method as only

[19:47] <ruoso> pmurias, I think proto also does it...

[19:47] <pmurias> it could

[19:48] <pugs_svn> r22757 | ruoso++ | [smop] submethod takes precedence over traversing the method hierarchy

[19:49] *** [particle] left
[19:49] <azawawi> pmurias: fyi, --simple generates 20%-30% of full html file so far even though it is not optimal

[19:50] <ruoso> pmurias, what I'm not sure is if a superclass declare a method as multi, does the subclass sees the default as multi also?

[19:50] <ruoso> or it only composes the multi variants if you explicitly says "multi method"

[19:51] <pmurias> not sure, it seems a language design issue

[19:51] *** ZuLuuuuuu left
[19:51] <ruoso> std: class Foo { multi method bar (Int $a) {say 1} }; class Bar { method bar (Str $b) { say 2 } }; Bar.bar(2);

[19:52] <p6eval> std 22757: OUTPUT[parsed‚ê§]

[19:52] <ruoso> is Bar.bar a multi method or not?

[19:52] <ruoso> that seems like a question for TimToady... ;P

[19:54] <pugs_svn> r22758 | rhr++ | [t/spec] add S06-signature/unpack-array.t

[19:54] <pugs_svn> r22758 | rhr++ |          STD doesn't seem to like this

[19:55] *** alanhaggai left
[19:56] <ruoso> pmurias, but you think the current ClassHOW.dispatch is sane??

[20:07] <pugs_svn> r22759 | ruoso++ | [smop-s1p] missed renaming the knowhow declaration\

[20:09] <ruoso> I'm assuming a method is only a multi if explicitly declared that way... I'm not considering magically finding out if a superclass defines a method as multi to automatically turn this method into a multi also

[20:09] <ruoso> this is somewhat different from how multi subs work, but multi sub is about the lexical scope, not arbitrary relationships with potentially many many other objects

[20:14] <pugs_svn> r22760 | ruoso++ | [smop-s1p] making Object.pm more real-like

[20:19] <pugs_svn> r22761 | ruoso++ | [smop-s1p] BUILDALL receives |@protoobjects and |%initialize

[20:19] <ruoso> I really think Object.pm is in the shape it was supposed to be

[20:21] *** alester joined
[20:24] <pugs_svn> r22762 | ruoso++ | [smop-s1p] $repr //= "p6opaque" in Object.CREATE

[20:25] <ruoso> it's cool that Object.pm doesn't use the REPR API

[20:26] <ruoso> only the HOW API... and that keeps the REPR API completely contained in the HOW implementation

[20:26] <ruoso> which make REPR API only relevant as a standard if we consider sharing the implementation of metaclasses

[20:26] <ruoso> (which I, honestly, think is a very interesting thing to do)

[20:27] *** azawawi left
[20:27] *** jauaor left
[20:31] <pugs_svn> r22763 | ruoso++ | [smop-s1p] .^!does should not be traversed when finding methods or attributes... it is responsability of the composition process to install the methods and attributes in the composed prototype

[20:32] *** alester left
[20:33] <pugs_svn> r22764 | ruoso++ | [smop-s1p] missed to fix ^attributes on last commit

[20:36] <moritz_> TimToady: uhm, S02 mentions Class in the list of mutable types

[20:36] <pmurias> ruoso: i think standardization of the REPR API shouldn't be hard as people don't generally care much about it

[20:36] <pmurias> it = the REPR API

[20:40] <pugs_svn> r22765 | ruoso++ | [smop-s1p] protoobjects sent to BUILDALL, including WHENCE, are evaluated as closures when its WHAT === the prototype in which BUILD will be called

[20:40] <ruoso> pmurias, I'm not too much worried about it myself... 

[20:41] <ruoso> pmurias, but I do think it would be cool if we could share metaclass implementations among different runtimes of Perl 6

[20:42] <ruoso> specially because I see that as a really cool way of doing interesting things...

[20:42] <ruoso> i.e. Catalyst::Controller in Perl 6 would be a metaclass, not a superclass

[20:42] <eternaleye> This is odd

[20:42] <eternaleye> pugs: say hi

[20:42] <p6eval> pugs: OUTPUT[/home/evalenv/pugs/pugs: error while loading shared libraries: libsmop.so: cannot open shared object file: No such file or directory‚ê§]

[20:43] <ruoso> eternaleye, pmurias accidentally didn't make smop dependency off by default

[20:43] <eternaleye> Oh, okay

[20:43] <ruoso> you should be able to solve it by running make in v6/smop

[20:43] *** pbuetow left
[20:44] <pmurias> ruoso: smop dependency is off by default 

[20:45] *** zamolxes joined
[20:45] <pmurias> the pugs in the evalbot is built to use a static library and smop is now a shared one

[20:45] <ruoso> ahm... ok... so a simple rebuild would solve

[20:45] <pmurias> no

[20:46] <pmurias> it needs the LD_LIBRARY_PATH set

[20:46] *** pbuetow joined
[20:46] <pmurias> it discovered that libsmop is a shared one during the regular rebuild

[20:46] <pugs_svn> r22766 | ruoso++ | [smop-s1p] WHENCE is evaluated before BUILDALL and sent as named arguments... the test of matching the type of the protoobject would not work with it, because it is simply a closure

[20:48] <moritz_> evalbot control restart

[20:48] *** p6eval left
[20:48] <pugs_svn> r22767 | moritz++ | [evalbot] set LD_LIBRARY_PATH

[20:48] *** p6eval joined
[20:48] <moritz_> pugs: say 1

[20:48] <p6eval> pugs: OUTPUT[1‚ê§]

[20:49] <pugs_svn> r22768 | ruoso++ | [smop-s1p] the protoobjects also need to have the whence called .() not the protoobject itself

[20:49] <pmurias> ruoso: re dispatch multis actually choose the most specific type

[20:50] *** r0bby left
[21:02] *** pcbuetow joined
[21:03] *** snooper joined
[21:06] *** [particle] joined
[21:10] *** pbuetow left
[21:10] *** snooper left
[21:18] <pmurias> ruoso: a strange error broke mildew

[21:21] *** ispy_ joined
[21:22] *** pcbuetow is now known as pbuetow

[21:23] *** alester joined
[21:26] *** ispy_1 joined
[21:37] *** alester left
[21:44] *** ispy_ left
[21:48] * ruoso later

[22:06] *** adc_Penner left
[22:06] *** rindolf left
[22:07] *** justatheory joined
[22:09] *** ruoso left
[22:10] *** ispy_1 left
[22:22] *** ispy_ joined
[22:32] *** fridim_ left
[22:38] *** pmurias left
[22:41] *** sri_kraih left
[22:42] *** sri_kraih joined
[22:45] *** sri_kraih left
[22:45] *** sri_kraih joined
[22:53] <pugs_svn> r22769 | rhr++ | [STD] allow anonymous unpacked arrays in sigs per S06:1330

[22:54] *** smg left
[23:11] *** sri_kraih_ joined
[23:13] *** sri_kraih left
[23:13] *** iblechbot left
[23:17] *** sri_kraih_ left
[23:21] *** sri_kraih joined
[23:23] *** [particle] left
[23:27] *** jhorwitz left
[23:27] *** sri_kraih left
[23:27] *** sri_kraih joined
[23:29] *** pbuetow left
[23:33] *** jauaor joined
[23:34] *** sri_kraih left
[23:34] *** sri_kraih joined
[23:39] *** sri_kraih left
[23:39] *** sri_kraih joined
[23:52] *** PZt joined
[23:55] *** sri_kraih left
[23:55] *** sri_kraih joined
[23:57] *** sri_kraih left
[23:57] *** sri_kraih joined
