[00:00] *** wknight-away is now known as wknight8111

[00:02] *** Limbic_Region left
[00:13] *** macroron joined
[00:14] *** LionWRK left
[00:24] *** macroron left
[00:38] *** wknight8111 left
[00:41] *** thoughtpolice joined
[00:50] *** mac_ joined
[00:51] *** mac_ is now known as nodboy

[00:52] *** BinGOs_ joined
[00:54] *** BinGOs left
[00:56] *** nipotaway is now known as nipotan

[00:56] *** ispy_ left
[01:02] *** pbuetow left
[01:03] *** Limbic_Region joined
[01:04] *** devogon left
[01:13] *** blindfish left
[01:25] *** cyberpass joined
[01:26] *** Andy_ joined
[01:34] *** justatheory left
[01:41] *** kst joined
[02:00] <pugs_svn> r19805 | lwall++ | [t/operators/assign.t] mods to new assignment semantics

[02:01] <pugs_svn> r19806 | lwall++ | move assign.t into t/spec

[02:10] *** cyberpass left
[02:12] <meppl> good night

[02:14] *** meppl left
[02:43] *** jferrero left
[02:48] *** peepsalot left
[02:49] *** peepsalot joined
[02:57] *** kanru left
[02:58] *** kanru joined
[02:59] *** Limbic_Region left
[03:02] *** apple-gunkies joined
[03:16] *** justatheory joined
[03:34] *** alester left
[03:40] *** jjore joined
[03:41] *** vainguard_ joined
[03:48] *** vainguard left
[04:27] *** orafu joined
[04:37] *** agentzh joined
[04:38] *** vainguard_ left
[04:38] *** vainguard joined
[04:42] *** thoughtp1lice joined
[04:44] *** OuLouFu_ left
[04:53] *** thoughtpolice left
[04:56] *** Southen_ joined
[04:58] *** thoughtp1lice left
[04:58] *** kanru left
[04:58] *** Andy_ left
[04:58] *** araujo left
[04:58] *** ludan left
[04:58] *** simcop2387 left
[04:58] *** Patterner left
[04:58] *** faxathisia left
[04:58] *** gbacon left
[04:58] *** lisppaste3 left
[04:58] *** marmic left
[04:58] *** ruoso left
[04:58] *** nothingmuch left
[04:59] *** ting joined
[04:59] *** nothingmuch joined
[05:00] *** jjore left
[05:00] *** apple-gunkies left
[05:00] *** mj41 left
[05:00] *** IRSeekBot left
[05:00] *** broquaint left
[05:00] *** allbery_b left
[05:00] *** mugwump left
[05:00] *** GeJ left
[05:00] *** pasteling left
[05:00] *** Southen left
[05:00] *** sri_work left
[05:01] *** jjore joined
[05:01] *** apple-gunkies joined
[05:01] *** mj41 joined
[05:01] *** broquaint joined
[05:01] *** allbery_b joined
[05:01] *** mugwump joined
[05:01] *** GeJ joined
[05:01] *** pasteling joined
[05:01] *** Southen joined
[05:02] *** thoughtp1lice joined
[05:02] *** kanru joined
[05:02] *** Andy_ joined
[05:02] *** araujo joined
[05:02] *** ludan joined
[05:02] *** simcop2387 joined
[05:02] *** Patterner joined
[05:02] *** faxathisia joined
[05:02] *** gbacon joined
[05:02] *** lisppaste3 joined
[05:02] *** marmic joined
[05:02] *** ruoso joined
[05:02] *** arguile joined
[05:02] *** Caelum joined
[05:02] *** f0rth joined
[05:02] *** dalek joined
[05:02] *** Maddingue joined
[05:02] *** kcwu joined
[05:02] *** cognominal joined
[05:02] *** wolverian joined
[05:02] *** Eidolos joined
[05:03] *** thoughtp1lice left
[05:27] *** Southen left
[05:34] *** monomorph joined
[05:44] *** Aankhen`` joined
[05:46] *** justatheory left
[05:53] <pugs_svn> r19807 | putter++ | misc/Ruby6: rmdir.  Directory was empty, old, and never had files.

[05:53] <pugs_svn> r19807 | putter++ | karhu: if you are still around and interested, let's talk. :)

[05:53] *** cyberpass joined
[06:00] <pugs_svn> r19808 | putter++ | putter/talk.txt: tweak.

[06:07] <pugs_svn> r19809 | putter++ | src/perl6/STD_extract: created.  The start of a script to take STD.pm, and extract its information into a more accessible form.

[06:07] *** peeps[work] joined
[06:09] <pugs_svn> r19810 | lwall++ | [pugs] simplified assignment parsing

[06:25] *** agentzh left
[06:46] *** peeps[work] left
[06:49] *** kcwu left
[06:53] *** devogon joined
[06:53] *** BinGOs_ is now known as BinGOs

[06:54] *** Andy_ left
[07:01] *** cyberpass left
[07:07] *** lumi joined
[07:33] <pugs_svn> r19811 | lwall++ | [assign.t] cut-n-paste errors

[07:37] *** lumi left
[07:56] *** Southen_ left
[07:59] *** ludan left
[08:12] *** iblechbot joined
[08:15] *** meppl joined
[08:33] *** ting left
[08:33] *** orafu left
[08:33] *** BinGOs left
[08:33] *** Auzon left
[08:33] *** cognominal_ left
[08:33] *** jiing left
[08:33] *** penk left
[08:33] *** bloonix left
[08:33] *** djm left
[08:33] *** tewk_ left
[08:33] *** sunnavy left
[08:33] *** LCamel left
[08:33] *** revdiablo left
[08:33] *** pugs_svn left
[08:33] *** Grrrr left
[08:33] *** diakopter left
[08:33] *** jql left
[08:33] *** Grrrr joined
[08:34] *** faxathisia left
[08:34] *** revdiablo joined
[08:35] *** tewk joined
[08:35] *** sunnavy joined
[08:35] *** pjcj joined
[08:38] *** pugs_svn joined
[08:38] *** vainguard left
[08:38] *** cognominal_ joined
[08:39] *** mattz joined
[08:40] *** cosimo joined
[08:45] *** BinGOs joined
[08:52] *** penk joined
[08:52] *** Auzon joined
[08:58] *** viklund joined
[09:01] *** njbartlett left
[09:16] *** meppl left
[09:49] *** ruoso left
[09:50] *** ruoso joined
[09:53] *** IllvilJa joined
[09:54] *** kanru left
[10:11] *** kcwu joined
[10:14] *** ebassi joined
[10:16] *** pbuetow joined
[10:24] *** njbartlett joined
[10:29] *** njbartlett left
[10:29] *** njbartlett joined
[10:29] *** jql joined
[10:32] *** spinclad_ joined
[10:34] *** mattz left
[10:34] *** njbartlett left
[10:35] *** njbartlett joined
[10:35] *** kanru joined
[10:38] *** njbartlett left
[10:38] *** njbartlett joined
[10:39] *** mattz joined
[10:43] *** njbartlett left
[10:44] *** Southen joined
[10:59] <pugs_svn> r19812 | ruoso++ | [smop] First major milestone achieved!!!! Stage 0 SMOP finished. No memory leaks, no valgrind dected errors, ALL TESTS PASSING.

[11:00] *** penk left
[11:00] <moritz_> ruoso++ indeed

[11:00] <moritz_> @karam ruoso

[11:00] <lambdabot> Maybe you meant: karma karma+ karma-

[11:00] <moritz_> @karma ruoso

[11:00] <lambdabot> ruoso has a karma of 231

[11:04] <pbuetow> @karma pbuetow

[11:04] <lambdabot> You have a karma of 0

[11:04] <pbuetow> :P

[11:05] <pbuetow> i used to have a karma of 1

[11:05] <moritz_> pbuetow: you need to commit a bit more ;)

[11:05] <pbuetow> :(

[11:05] <moritz_> perhaps lambdabot lost its information

[11:05] <moritz_> @karma audreyt

[11:05] <lambdabot> audreyt has a karma of 115

[11:05] <moritz_> @karma moritz

[11:05] <lambdabot> moritz has a karma of 186

[11:05] <pbuetow> yes can be

[11:08] *** chacha_chaudhry joined
[11:20] <pugs_svn> r19813 | ruoso++ | [smop] when destroying the interpreter using the interpreter prototype, make sure to do a goto(false) and a runloop before. This seems to be a bug in the stackfull implementation used to destroy the stackless interpreter.

[11:24] *** chris2 joined
[11:25] *** blindfish joined
[11:26] *** Aankh|Clone joined
[11:36] *** Aankhen`` left
[11:41] * ruoso starting to wonder how p6opaque should look like in smop...

[11:44] *** Aankhen`` joined
[11:51] *** Aankh|Clone left
[12:33] *** Aankh|Clone joined
[12:35] *** zamolxes joined
[12:42] *** riffraff joined
[12:49] *** nipotan is now known as nipotaway

[12:51] *** Aankhen`` left
[12:53] *** Aankh|Clone left
[13:28] *** tcliou_ joined
[13:37] *** chris2 left
[13:40] *** tcliou left
[13:46] *** alester joined
[13:50] *** alester left
[14:09] *** diakopter joined
[14:09] *** ChanServ sets mode: +o diakopter

[14:13] *** cognominal_ left
[14:14] *** meppl joined
[14:30] *** jhorwitz joined
[14:48] *** Auzon left
[14:49] *** barney joined
[14:57] *** cognominal_ joined
[15:03] *** Aankhen`` joined
[15:15] *** chacha_chaudhry left
[15:20] *** TJCRI joined
[15:22] <cognominal_> is there a pragma to promote pairs of slurpy hash to behave as lexicals as  a temporary mesure before changing the signature and adding them as named parameter or as a way to avoid overcrowding the signature.

[15:22] *** alester joined
[15:22] <cognominal_> Maybe that deserve a dedicated twigil

[15:22] <moritz_> uhm

[15:23] <moritz_> that's too fast for me

[15:23] <cognominal_> ??

[15:23] <moritz_> show us a line of code

[15:23] <moritz_> what do you want to achieve?

[15:25] <cognominal_> sub toto (*%f) {  ... shitload of %f<>  } 

[15:25] <cognominal_> versus

[15:25] <moritz_> so you want slurpy named parameters?

[15:26] <moritz_> pugs: sub a(%f) { say %f.perl } a(:foo(bar));

[15:26] <exp_evalbot> OUTPUT[*** Named argument found where no matched parameter expected: ("foo",Ann (Pos (MkPos "/tmp/RUKg9GtJ6c" 1 34 1 37)) (App (Var "&bar") Nothing []))␤    at /tmp/RUKg9GtJ6c line 1, column 27-39␤]

[15:26] <moritz_> pugs: sub a(%f) { say %f.perl } a(foo => 'bar');

[15:26] <exp_evalbot> OUTPUT[*** Named argument found where no matched parameter expected: ("foo",Ann (Pos (MkPos "/tmp/T6fDU03IUp" 1 36 1 41)) (Val (VStr "bar")))␤    at /tmp/T6fDU03IUp line 1, column 27-42␤]

[15:28] <cognominal_> subu toto(*%f) { $+a }   # + would be the wtwigil

[15:28] <cognominal_> toto( a => 1 );

[15:28] <Tene> pugs: sub a(*%f) { say %f.perl } a(foo => 'bar');

[15:28] <exp_evalbot> OUTPUT[{("foo" => "bar"),}␤]

[15:28] <cognominal_> that would avoid to deal wit the hash

[15:29] <moritz_> I think that's too much of a shortcut

[15:29] <moritz_> Tene's solution sounds good

[15:29] <cognominal_> but would not conflict with other names

[15:29] <moritz_> anyway, the idea is not all that bad

[15:30] <cognominal_> see the module JQuery translated in Perl6

[15:30] <moritz_> $^<identifier> are for list args, so $<other twigil><identifier> could be named args

[15:30] <cognominal_> the params hash everywhere is just structural code

[15:30] <Tene> which hash?  %_?

[15:31] <Tene> nice idea

[15:31] <moritz_> pugs: sub f { say %_.perl } f(:a(b))

[15:31] <exp_evalbot> OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "%_" requires predeclaration or explicit package name␤    at /tmp/jQQZQxd5qk line 1, column 15␤]

[15:32] <Tene> pugs: sub f { say %_.perl } f(:a<b>)

[15:32] <exp_evalbot> OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "%_" requires predeclaration or explicit package name␤    at /tmp/4xnAoeuiZ5 line 1, column 15␤]

[15:32] <cognominal_> I am rereading the synopsis so I may miss obvious things

[15:32] <moritz_> re JQuery translated in Perl6, do you have a link anywhere?

[15:33] <cognominal_> no, I am just playing with the idea

[15:33] <cognominal_> but get the original JQuery perl module and you will et the idea

[15:34] <cognominal_> it is full of   $my->{param}{remote} = 0 if  ! defined $my->{param}{remote} ; 

[15:34] <cognominal_> where $my->{param}  whould be a slurpi hash in Perl6

[15:35] <moritz_> do you use $my as self?

[15:35] <cognominal_> no in that code $my is not self

[15:35] <moritz_> can you name a particular method that you'd like to look me at?

[15:36] <cognominal_> any methods with $my->{param}

[15:36] <cognominal_> they are all over the place in the JQuery/*.pm modules

[15:37] <moritz_> why not just declare them as formal parameters?

[15:37] <moritz_> it's a very good way to make the methods self-documenting

[15:37] <cognominal_> "> is there a pragma to promote pairs of slurpy hash to behave as lexicals as  a temporary mesure before changing the signature and adding them as named parameter or as a way to avoid overcrowding the signature."

[15:38] <moritz_> well, the answer is "no", I guess

[15:38] <cognominal_> I don't deny they can make formal parameter but they may be too numerous to be of any interest

[15:38] *** peeps[work] joined
[15:38] <moritz_> but overcrowed signatures are a design problem, not a language problem

[15:38] <[particle]> %my{param} // 0

[15:38] <[particle]> %my{param} //= 0

[15:39] <cognominal_> the design is out of the scope of Perl here, this is jquery

[15:39] <moritz_> hmmm

[15:39] <moritz_> well, perhaps TimToady picks up your idea

[15:39] <cognominal_> this is just in idea, now it is in my log :)

[15:40] <moritz_> or you'll have to life a with either crowded formal parameters or a slurpy hash

[15:40] <[particle]> i don't understand what you're trying to do. flatten the hash?

[15:40] <cognominal_> I want to avoid to dereference explictely a hash

[15:40] <moritz_> [particle]: cognominal_ wants something like like $^a, $^b for named arguments

[15:41] <cognominal_> some twigil would say me this variable comme from the slurpy hash.

[15:41] <[particle]> ok, i see.

[15:41] <cognominal_> I don't care about the name of the slurpy hash so why should I other with it everywhere

[15:42] <cognominal_> a twigil seems nicer that naming the slurpy hash in the body of the sub

[15:42] <[particle]> does $%hash have meaning in perl 6 today?

[15:43] <[particle]> that is, can '%' be the twigil

[15:43] <moritz_> well, the idea is appealing because of the symmetry between named and positional args

[15:43] <[particle]> yes, agreed.

[15:43] * moritz_ thought of $|name, for no particular reason

[15:43] <cognominal_> appealing? english fails me here

[15:44] <moritz_> "looks nice to have"

[15:44] <moritz_> cognominal_: what's your native language?

[15:44] <cognominal_> french

[15:44] <cognominal_> and I am too lazy to reach the dict of my mackbook, shame on me

[15:45] <moritz_> appealing = attractive

[15:45] <moritz_> in good approximation ;)

[15:45] *** devogon left
[15:45] <[particle]> shame on us for writing in the *other* international language ;)

[15:45] <moritz_> [particle]: like, uhm, Spanish? ;)

[15:45] <[particle]> i meant chinese

[15:46] <cognominal_> we should go esperanto to be on equal footing :)

[15:46] <cognominal_> I suppose the asiatic would disagree

[15:47] <moritz_> actually chinese is spoken by many people, but not (officially) in many countries

[15:48] <cognominal_> kudo for TimToady and co. The synopsis are not easu reading but very compelling. Good progress here.

[15:48] <cognominal_> s/easu/easy/

[15:51] <rhr_> hard to find a new twigil.  the ones taken are . ! + ? * = ^ and : $ @ % & / < _ ( can't be used there either, afaics

[15:52] <moritz_> so | is still free?

[15:52] <cognominal_> there are so much twigils

[15:52] <cognominal_> what's the + for?

[15:52] <rhr_> | might work, but it looks a lot like !

[15:52] <moritz_> yes

[15:52] <rhr_> + is for context vars

[15:54] <cognominal_> amazing, with many degrees of liberties added, Perl6 is already running out of ASCII chars 

[15:55] <[particle]> we still have ` but it's (unofficially iirc) reserved for users

[15:56] <[particle]> i suppose $'foo suggests a named var

[15:58] <cognominal_> back reading the synopses to get some lagunes in the see of my ignorance

[15:59] <[particle]> ah, "lagoons in the sea".

[16:00] <[particle]> hey, wow! i understand french :)

[16:00] <cognominal_> arf, that does not translate in english

[16:00] *** kanru left
[16:00] <cognominal_> lagune is more like a bank of sand

[16:01] <[particle]> i knew what you meant, but yeah, lagoon must not be the translation for lagune

[16:01] <cognominal_> and lacune is lacuna in English

[16:01] <[particle]> more like "sand bar"

[16:04] *** kanru joined
[16:05] *** devogon joined
[16:10] *** Aankhen`` left
[16:11] *** Aankhen`` joined
[16:16] *** chris2_ joined
[16:16] *** luqui joined
[16:17] *** chris2_ is now known as chris2

[16:20] *** barney left
[16:25] *** Patterner left
[16:29] <pugs_svn> r19814 | putter++ | src/perl6/STD_extract: more constructs recognized.

[16:29] *** stevan_ left
[16:30] *** Psyche^ joined
[16:30] *** Psyche^ is now known as Patterner

[16:30] *** thepler joined
[16:31] *** stevan_ joined
[16:35] *** rindolf joined
[16:38] <TimToady> $:foo is actually available, i think

[16:40] *** REPLeffect joined
[16:41] <moritz_> pugs: sub f { say $:foo.perl } f(:foo('bar'))

[16:41] <exp_evalbot> OUTPUT[*** ␤    Unexpected ":foo"␤    expecting "::"␤    at /tmp/B9Zt5LCYRz line 1, column 14␤]

[16:42] <moritz_> oh, I misunderstood "available" ;)

[16:42] *** vainguard joined
[16:48] <cognominal_> TimToady owns the colon   :)

[16:50] <moritz_> all your colon are belong to us

[16:51] *** aindilis joined
[16:52] <TimToady> now if you really want to start confusing people, write foo(:$:foo)

[16:56] *** justatheory joined
[16:57] *** rindolf left
[16:58] *** vainguard left
[16:59] *** vainguard joined
[17:00] *** vainguard left
[17:00] *** vainguard joined
[17:01] *** jjore left
[17:04] <[particle]> ::('$')(:$:_)

[17:06] <cognominal_> so we will have the visual equivalent of tongue twisters in Perl6

[17:07] <cognominal_> any sufficient rich language cannot avoid that

[17:09] <cognominal_> ton thé t'a t'il oté ta toux :)   ->   has you tea got rid you of your cough

[17:09] *** djm joined
[17:13] <moritz_> cognominal_: "simple things should look simple, weird things should look weird" ;)

[17:15] *** pcbuetow joined
[17:18] <pugs_svn> r19815 | lwall++ | Fixed smartlink.

[17:25] *** IRSeekBot joined
[17:28] *** silug left
[17:32] *** silug joined
[17:39] <cognominal_> following on the implication of my twigil nad my study of JQuery , this may means that a object may have optionnal  attributes declared as $:a   and that a constructor may have a slurpy hash too.

[17:39] <cognominal_> s/nad/and/

[17:39] <cognominal_> I can't see the ramification

[17:42] <cognominal_> ho, that can't do, that should be $.:a , arf multiletter twigils :(

[17:45] *** cognominal_ left
[17:45] *** cognominal_ joined
[17:47] *** Aankhen`` left
[17:47] *** Aankhen`` joined
[17:49] <pugs_svn> r19816 | rhr++ | [Unicode.pm] delegate encoding to pack/unpack

[17:50] <[particle]> thrigils!

[17:50] <TimToady> all attributes are optional already :)

[17:50] <TimToady> at least, everything derived from Object is already a "maybe" type

[17:50] <moritz_> recursive countable n-igils!

[17:51] <[particle]> you can't do $.^a so i don't see how $.:a would make sense

[17:52] <pugs_svn> r19817 | rhr++ | [assign.t] some more cun-n-paste errors

[17:54] <cognominal_> anyway I find that JQuery is a good yardstick for conversion in Perl6

[17:54] <cognominal_> maybe, Perl6 should be called haskell :)

[17:56] *** jferrero joined
[17:56] <moritz_> no, its syntax is much prettier

[17:57] <TimToady> significant whitespace, ugh!  :P

[17:57] <[particle]> i can't believe you chose to steal *that* from python. of all things....

[17:57] <[particle]> :P

[17:58] <cognominal_> python predates haskell? I don't think so

[17:58] <TimToady> yes, but at least I'm sneaky about it

[17:59] <cognominal_> ho, I was confused

[17:59] <TimToady> gee, an unclear antecedent to a pronoun, fancy that...

[17:59] <TimToady> reminds me I should go read PerlMonks this morning...

[18:04] * ruoso just received the result for the grant proposal on smop with 6 votes no, 2 abstentions and no vote for yes... it appears that the perl foundation is not very much -Ofun oriented... one of the comments: "I think there is no need in more engines for Perl 6. I think that ONE is required, and people should work on it. If Parrot is the one more developed, I think we should grant parrot projects;"

[18:04] <pugs_svn> r19818 | lwall++ | Added : twigil

[18:04] <[particle]> ruoso: that's a real shame. imo the problem is that the grants committee is full of p5 folk

[18:05] <ruoso> m completely against new runtimes. Let's not reinvent every

[18:05] <ruoso> wheel at once.

[18:05] <ruoso>     * Not yet another Perl 6 compiler/runtime/implementation/whatever!

[18:05] <ruoso> There are way to many already.

[18:05] <ruoso> these are some other comments

[18:06] <moritz_> jerks

[18:07] <moritz_> that contradicts the "not one official perl6 implementation" idea

[18:07] <[particle]> apparently the grants committee hasn't read the perl 6 spec.

[18:07] <TimToady> well, tpf should really be named "The Parrot Foundation", I suspect

[18:07] <[particle]> or, chooses not to agree with it.

[18:08] <ruoso> it's sad, specially now that I've finished the stage 0 of smop

[18:08] <TimToady> well, not many people actually get paid to do any of this, alas...

[18:08] <ruoso> and I was counting on the grant to deliver more time to it

[18:20] <moritz_> ruoso: did you apply for a "real" grant, or for a perl 6 microgrant?

[18:20] <ruoso> real grant

[18:20] *** cosimo left
[18:21] *** cosimo joined
[18:23] <ruoso> later &

[18:23] *** manfred joined
[18:23] *** cosimo left
[18:24] * diakopter wonders what TPF is planning to do with all of its money in the bank

[18:24] <[particle]> we may never find out.

[18:24] <diakopter> I suppose endowing its own overhead is not out of the question

[18:30] *** barney joined
[18:31] *** zamolxes left
[18:33] *** ebassi left
[18:34] *** tewk left
[18:34] *** tewk joined
[18:34] <cognominal_> can one write my $a, $b  meaning the Perl5 my ($a, $b)?

[18:35] <moritz_> pugs: my $a, $b = 2, 3; say $a, '|', $b

[18:35] <exp_evalbot> OUTPUT[*** ␤    Unexpected " ="␤    expecting "::"␤    Variable "$b" requires predeclaration or explicit package name␤    at /tmp/nqk8ggfLuK line 1, column 10␤]

[18:36] <cognominal_> ok

[18:36] <moritz_> cognominal_: don't take pugs as a spec ;)

[18:37] <moritz_> cognominal_: btw your proposal of a new twigil has been accepted (in case you don't read p6l)

[18:37] <cognominal_> I hope this is a good idea

[18:37] <[particle]> indeed, it is. it's in the spec now :)

[18:38] <cognominal_> well, Larry is always right ... even if he changes his mind

[18:39] <moritz_> honestly, I don't think it's all that usefull, but it's certainly not harmful, and nice to have ;)

[18:40] <cognominal_> at least, it proves that I understant the general Perl6 zeitgeist

[18:40] *** lisppaste3 left
[18:41] *** DarkWolf84 joined
[18:41] *** wknight8111 joined
[18:53] *** Aankhen`` left
[18:53] *** GeJ left
[18:53] *** lisppaste3 joined
[18:55] *** qmole joined
[19:14] <TimToady> Or I suppose we could rename it the Turf Protection Foundation...

[19:22] <cognominal_> buzz is entered in the judiciary french language thx to the suite of our president and our first lady against Ryanair  :)

[19:22] *** meppl left
[19:23] <cognominal_> even though we have (had?) a low against the gratuitous use of hte english language

[19:23] <cognominal_> ...has entered

[19:23] <moritz_> not just against English, IIRC

[19:24] <cognominal_> yea, but English is the perceived menace.

[19:25] <moritz_> the enemy, just across the channel ;)

[19:25] <[particle]> and the pond :)

[19:25] *** barney left
[19:26] <cognominal_> anyway. thx to the writer strike,  no more american series and movies will protect us

[19:27] <cognominal_> for the perfid Aliban, that's another story

[19:28] <cognominal_> Albion!

[19:35] *** icwiener joined
[19:41] * [particle] checks if the 'self' keyword is in STD.pm

[19:42] <[particle]> ah, there it is.

[19:42] <[particle]> however, some uses of self in the grammar itself use a sigil, others don't

[19:43] <moritz_> it shouldn't have one, I guess

[19:43] <moritz_> unless  you assign it, or use it in my_methods($self: $other, $ags)

[19:43] <[particle]> ok, actually it all looks good

[19:43] <[particle]> my $self = qlang(...)

[19:44] <[particle]> that's the only use with sigil

[19:45] *** REPLeffect left
[19:47] <jnthn> [particle]: lwall++ added term:self at the weekend; I put it into the Rakudo grammar, a tad differently. See comment.

[19:47] *** vainguard left
[19:48] <[particle]> fab. yep, we need to put those in the grammar a bit differently since we don't have protoregexes yet

[19:49] <DarkWolf84> so 'self' will be part of the grammar 

[19:49] <jnthn> Well, for other reasons too...

[19:50] <DarkWolf84> ?

[19:50] <jnthn> [particle]: Not only did I ad the parse rule, I added an action too, so self actually works. ;-)

[19:50] <jnthn> DarkWolf84: Yes, the self keyword/function is in the grammar.

[19:51] *** vainguard joined
[19:51] <moritz_> rakudo: class Foo { method bar { say self } };

[19:51] <exp_evalbot> RESULT[Null PMC access in find_method()␤current instr.: '_block10' pc 19 (EVAL_10:10)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 789 (src/PCT/HLLCompiler.pir:459)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1059 (src/PCT/HLLCompiler.pir:585)␤called from Sub

[19:51] <exp_evalbot> ..'parrot;PCT::HLLCompiler;command_line' pc 1242 (src/PCT/HLLCompiler.pir...

[19:52] <cognominal_> how would you translate that in Perl6?   ref($c) =~ /\S/ 

[19:52] <jnthn> Hmm...

[19:53] <cognominal_> and   $object.can('get_css') ;

[19:53] <moritz_> cognominal_: most ref($something) tests are now done with the Smart match operator

[19:54] <jnthn> rakudo: class Foo { method bar { say "hi"; }; method baz { self.bar(); }; }; my $x = Foo.new(); $x.baz();

[19:54] <exp_evalbot> OUTPUT[hi␤]

[19:54] <wolverian> why does it need to be in the grammar? 

[19:54] <moritz_> so the first might be $c ~~ Object or something

[19:55] <cognominal_> that would mean $c is an instance of a subclass of Object, meaning any class

[19:55] <moritz_> cognominal_: $object.can('get_css') perhaps 'get_css' ~~ $object.HOW.methods # dunno if there's an easier way

[19:55] <moritz_> cognominal_: aye

[19:55] <moritz_> cognominal_: what you you like ref($c) =~ m/\S/ to mean?

[19:55] <wolverian> $object.?get_css(); 

[19:56] <moritz_> wolverian: sounds much clearer ;)

[19:56] *** pbuetow left
[19:56] <cognominal_> this is in JQuery, test if the var is an obj or a string

[19:56] *** pbuetow joined
[19:56] <wolverian> you'd probably use signatures in perl 6

[19:57] <wolverian> multi foo (Str $bar) { ... } multi foo (Object $bar) { ... } # or so

[19:57] <moritz_> cognominal_: $c ~~ Str ?

[19:57] <cognominal_> I don't know if I will go anywhere playing with JQuery but I lean a log of Perl 6

[19:57] <wolverian> though certainly you can do it in one method too. it's just a bit ugly, given that multimethods are so natural.

[19:57] <cognominal_> yea

[19:57] <cognominal_> "I learn a lot of Perl6"

[19:58] <cognominal_> I can't type on this macbook keyboard and I don't know anymore how to type on any other keyboard :(

[20:02] <cognominal_> $object.?get_css();   calls get_css() if it exists but the code involves has a rupture of sequence if get_css is not defined so here this is not the right way

[20:02] *** riffraff left
[20:02] <[particle]> jnthn++ # that is SO COOL!

[20:03] <moritz_> so who's going to the German Perl Workshop next week?

[20:04] <cognominal_> I  wish I spoke german

[20:05] <cognominal_> but French don't speak anything but french

[20:05] <moritz_> it takes place in my home town and I have vacations, so I'll surely go there

[20:05] <cognominal_> where is that?

[20:05] <moritz_> Erlangen

[20:06] <moritz_> close to Nürnberg, if you happen to know that

[20:07] <cognominal_> I know the Erlangen program thx to Felix Klein but not the town itself

[20:07] <jnthn> moritz_: In a last minute change of plan - I will be there!

[20:07] <moritz_> jnthn: cool

[20:08] <jnthn> cognominal_: Ich speaken kein Deutsch, but I'm gehen anyway. ;-)

[20:08] <jnthn> [particle]: It's only a fancy way of writing say "hi"; ;-)

[20:08] <cognominal_> :)

[20:09] <[particle]> jnthn: the madness is in the method :)

[20:09] <jnthn> <groan>

[20:10] *** namelessuser joined
[20:10] <jnthn> Wonder why say self blows up...

[20:10] <moritz_> jnthn: perhaps it doesn't know how to stringify?

[20:11] <jnthn> moritz_: Yeah, I think so too.

[20:11] <[particle]> say $( self )

[20:11] <jnthn> How do classes stringify?

[20:12] <[particle]> i forget. need to check the spec

[20:12] <moritz_> according to their Str method ;)

[20:12] *** luqui left
[20:12] <moritz_> don't know what the default method is, though

[20:13] <[particle]> what do the pugs tests say?

[20:13] <[particle]> t/oo hasn't been moved to t/spec yet

[20:13] <jnthn> The PIR that the compiler is generating looks sane, at least.

[20:13] <jnthn> pugs: class Foo { method bar { say self; }; }; my $x = Foo.new(); $x.bar();

[20:13] <exp_evalbot> OUTPUT[<obj:Foo>␤]

[20:14] <[particle]> jnthn: it could call the parrot 'name' method

[20:14] <[particle]> that looks like haskell underneath

[20:15] <jnthn> class Foo { method bar { say self; }; };

[20:15] <jnthn> my $x = Foo.new(); $x.bar();

[20:15] <TimToady> cognominal_: no, $object.?method merely returns undef if there is no such method

[20:15] <jnthn> get_string() not implemented in class 'Foo'

[20:15] <cognominal_> thx

[20:15] <TimToady> now if you try to use the value without checking it, then you could get an exception thrown

[20:16] *** pbuetow left
[20:16] *** pbuetow joined
[20:16] <TimToady> but I think you'll see a lot of $object.?method // "NONESUCH"

[20:17] * jnthn has been writing too much C#, and mis-read // as a comment there

[20:17] <TimToady> there's a sense in which it is certainly less important than the mainline code

[20:18] *** manfred left
[20:18] <[particle]> unsurprisingly, perl hasn't stolen much from C++

[20:18] <jnthn> :-)

[20:18] <TimToady> it stole the idea of *not* putting const everywhere...

[20:18] <TimToady> :)

[20:18] <wolverian> "orelse" works pretty well there too

[20:19] <TimToady> or would, if anyone implemented it yet

[20:19] <wolverian> though for now I go "huh? where's the STM here?" when I see it

[20:19] <wolverian> well, if I saw it...

[20:19] <jnthn> orelse is to // what or is to ||?

[20:20] <wolverian> yes 

[20:20] <[particle]> rakudo: my $x; say ($x orelse 'foo');

[20:20] <exp_evalbot> OUTPUT[Null PMC access in invoke()␤current instr.: '_block10' pc 28 (EVAL_10:15)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 789 (src/PCT/HLLCompiler.pir:459)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1059 (src/PCT/HLLCompiler.pir:585)␤called from Sub

[20:20] <exp_evalbot> ..'parrot;PCT::HLLCompiler;command_line' pc 1242 (src/PCT/HLLCompiler.pir:676)...

[20:20] <TimToady> mostly

[20:20] <TimToady> it also captures the undefined value into $! for handiness

[20:20] <[particle]> hrmm

[20:21] <TimToady> which // doesn't

[20:22] <[particle]> 'orelse' is in the rakudo opp

[20:22] <[particle]> but infix:orelse doesn't seem to be implemented

[20:23] <jnthn> Time to go do some $REAL_LIFE for a bit... &

[20:23] <wolverian> I was going to look at it, but before pulling parrot I realised my git is at least a week old, so now I'm rebuilding git.. I'll probably get distracted by something else in a few minutes

[20:24] *** njbartlett joined
[20:24] <TimToady> andthen :)

[20:24] <[particle]> don't fear the yak.

[20:24] <TimToady> andthen andthen andthen andthen

[20:25] <wolverian> butfirst

[20:26] <TimToady> butwait!

[20:26] <[particle]> whatif

[20:26] <wolverian> eventhough 

[20:26] <[particle]> noway

[20:30] <spinclad_> pleasedon't

[20:31] *** pbuetow left
[20:32] <spinclad_> inasmuchaswhich

[20:32] <wolverian> isn't that cobol?

[20:32] <spinclad_> insofaras it's anything, maybe

[20:33] <spinclad_> whereas

[20:33] <spinclad_> andyet

[20:34] *** pbuetow joined
[20:35] <[particle]> pleasepleaseplease

[20:35] <spinclad_> [puppyeyes]

[20:35] <moritz_> actually eiffel has the "implies" keyword, where "a implies b" is (not a) or b

[20:36] <spinclad_> ew, how boolean!

[20:36] *** vainguard left
[20:36] <moritz_> actually it's pretty useful - eiffel is very strong on design by contract, and that makes it more readable in some places

[20:38] <[particle]> parrot has complete boolean logic support, including xand

[20:39] <[particle]> a and b, but not both

[20:39] <spinclad_> [useful] oh, definitely -- i just think of when a isn't (known to be) true or false (yet).

[20:39] *** ebassi joined
[20:39] <spinclad_> such as a protoobject of its type

[20:40] *** __Ace__ joined
[20:41] <spinclad_> 'a implies b' when a's truthspace is inside b's

[20:41] <moritz_> that's a perfect exercise to define such an op at runtime

[20:43] <spinclad_> when b is ineverycase at least as true as a

[20:44] *** spinclad_ is now known as spinclad

[21:00] <TimToady> well, "implies" is easily expressed in Perl 6 as !?>    :)

[21:01] <moritz_> and _so_ readable

[21:01] <TimToady> well, it's like math's ->, with the unexplanatory - replace with the elements of logic ? and !

[21:01] <TimToady> *replaced

[21:02] *** meppl joined
[21:04] <spinclad> idle question: is ?Bool just == Bool?  (that is, boolifying the generic Boolean)  (and not true or false, like most ?<expr>)

[21:04] <TimToady> 'course, we haven't actually defined ?> as boolean right shift yet...

[21:05] <TimToady> and you can't use a ! metaoperator on anything that isn't a chaining comparator...

[21:05] <spinclad> i thought boolean right shift would be ?>>

[21:06] <spinclad> (as opposed to >>?>>)

[21:06] <TimToady> maybe that means ?| and ?& and ?^ really belong at the comparator level, not the additive level

[21:06] <TimToady> no, we reduced them to single > and < to avoid confusion with Texas quotes

[21:07] <spinclad> and gain confusion with comparison...

[21:07] <TimToady> troonuff

[21:07] <TimToady> but that's just mental confusion, not parser confusion

[21:07] <spinclad> but Texas quotes are deeper parsering

[21:08] <spinclad> right

[21:18] *** gbacon left
[21:18] *** gbacon joined
[21:30] *** iblechbot left
[21:30] *** GeJ joined
[21:32] *** sri_work joined
[21:34] *** njbartlett_ joined
[21:48] *** whiteg joined
[21:50] *** njbartlett left
[21:51] *** jhorwitz left
[22:03] *** kst left
[22:04] *** kst joined
[22:11] *** DarkWolf84 left
[22:16] *** TJCRI left
[22:22] *** vainguard joined
[22:25] <ruoso> TimToady, Undef isa Object?

[22:25] <moritz_> pugs: say Undef ~~ Object

[22:25] <exp_evalbot> OUTPUT[*** No such subroutine: "&Undef"␤    at /tmp/5yOxIcjRtn line 1, column 5 - line 2, column 1␤]

[22:26] <moritz_> pugs: say undef ~~ Object

[22:26] <exp_evalbot> OUTPUT[1␤]

[22:26] <ruoso> kp6: say Undef ~~ Object

[22:26] <exp_evalbot> r19818: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤        KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824be54)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[22:26] <exp_evalbot> ..main::DISPATCH('HASH(0x824be54)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[22:26] *** icwiener left
[22:26] <ruoso> the thing is... is it right?

[22:28] *** apple-gunkies left
[22:28] <ruoso> I've been thinking on how to implement p6opaque and the classes in smop...

[22:29] <ruoso> in theory, a class is "Undef" with add ons...

[22:29] <ruoso> like 

[22:29] <ruoso> my $foo = Undef;

[22:30] <ruoso> $foo.^add_method(name => 'bar', code => $baz);

[22:30] <[particle]> why are you capitalizing? looking for a basic type called 'Undef'?

[22:30] <[particle]> or the value 'undef'?

[22:30] <ruoso> well... as per S02, "undef" is a function, not a value

[22:30] <[particle]> ok, nullary function, like self.

[22:31] <[particle]> <term>

[22:31] <ruoso> yep... the value is of the Undef type

[22:31] <ruoso> there's no "native undef"

[22:31] <ruoso> Undef is a class like any other...

[22:32] <ruoso> except that it returns false to "defined"

[22:32] <[particle]> ah, i see in S02

[22:32] <TimToady> Object is the most generic Undef class

[22:32] <TimToady> but all "classes" in p6 are protoobjects, and hence typed versions of undef

[22:32] <TimToady> one could argue that undef === Object should return true

[22:33] <[particle]> my Undef $x = 2;

[22:33] <ruoso> so, taking a copy of undef and adding methods is a sane way of creating a class...

[22:33] <TimToady> well, but p6 really has no classes in that sense, it has protoobjects and metaclasses

[22:34] *** blindfish left
[22:34] <ruoso> yeah... yeah...

[22:34] <TimToady> class Foo is already the undef you

[22:34] <TimToady> want

[22:35] <ruoso> I know... but I'm not talking about syntax...

[22:35] <TimToady> pugs: class Foo {}; defined(Foo)

[22:35] <ruoso> but about runtime

[22:35] <exp_evalbot> RESULT[Bool::False]

[22:35] <ruoso> how one would do it by reflection code

[22:35] <ruoso> s/reflection/introspection/

[22:35] * ruoso wonders why java uses "reflection"

[22:36] <TimToady> well, more or less the way Moose and MO handle it

[22:37] * ruoso have to take a look in MO looking for that in specific...

[22:37] <TimToady> you should probably mostly be talking to nothingmuch and stevan at this point

[22:38] <TimToady> I ignore everything that goes on behind the .HOW curtain :)

[22:38] <ruoso> but isn't this something that should work across implementations?

[22:39] <ruoso> I mean... shouldn't .HOW have an API

[22:39] <TimToady> the basic methods need to be interoperable, yes

[22:39] <TimToady> and nothingmuch's MO is pretty much what everyone should be aiming for

[22:40] <ruoso> ok... just before I get in deep MO again... 

[22:40] <pugs_svn> r19819 | putter++ | src/perl6/STD.pm: normalize a couple of unusual { } indentations.

[22:40] <TimToady> however, stevan's implementation of Moose is a solider implementation

[22:40] *** Limbic_Region joined
[22:40] <TimToady> but doesn't yet (I don't think) do Responder Interfaces quite MOish

[22:41] <TimToady> I sure hope putter knows about cheat and metholate already...

[22:41] <TimToady> but he seems to be scarce around here lately...

[22:42] <ruoso> my $foo = Undef.clone(); $foo.^add_method(name => 'foo', code => $bar, signature => $sig); seems like a sane way of initializing a new anonymous class

[22:42] <TimToady> s/Undef/Object/

[22:42] <TimToady> there is no Undef type

[22:43] *** xeridon joined
[22:43] <ruoso> hm?

[22:43] <TimToady> there is no Undef type

[22:43] * ruoso lost now

[22:43] <TimToady> the type of "undef" is Object

[22:44] <TimToady> Object is the most generic undefined type

[22:44] <ruoso> ah.. ok.. Undef is simply anything that returns false to "defined"

[22:44] *** xeridon left
[22:44] <[particle]> s/putter/mncharity/

[22:44] <TimToady> was doing that already

[22:45] <pugs_svn> r19820 | putter++ | src/perl6/STD_extract: Additional constructs recognized (feature complete?).  Command-line controlled output.  Todo and questions.

[22:45] <TimToady> still scarce

[22:46] *** vainguard left
[22:46] <TimToady> sure looks to me like he's reinventing cheat/metholate

[22:46] *** vainguard joined
[22:46] <TimToady> maybe it needs to be reinvented, but still...

[22:48] <TimToady> maybe I'm just irritated because I can no longer type "vi S<tab>" and get it to complete :)

[22:49] <Tene> TimToady: what if you just press tab extra hard?

[22:49] <Tene> analog sensitivity in a keyboard would have some interesting uses...

[22:50] <Tene> Especially if integrated with an editor and a programming language.  To refer to a global variable, type the name extra hard!

[22:51] <TimToady> well, if the vibrations push down the shift and 8 keys simultaneously, it might just work

[22:52] <TimToady> @seen mncharity

[22:52] <lambdabot> I saw mncharity leaving #perl6 2d 17h 2m 24s ago, and .

[22:52] * Tene laughs and gets a funny look from a student.

[22:56] *** ebassi left
[23:04] <ruoso> pugs: class Foo { }; my $a = Foo.new(); say $a.HOW() === Foo.HOW()

[23:04] <exp_evalbot> OUTPUT[1␤]

[23:05] <ruoso> pugs: class Foo { }; say Foo.clone().HOW() === Foo.HOW()

[23:05] <exp_evalbot> OUTPUT[*** Pattern match failure in do expression at src/Pugs/Prim.hs:1351:4-14␤    at /tmp/p7DhvUJDth line 1, column 20 - line 2, column 1␤]

[23:06] <ruoso> pugs: class Foo { }; my $a = Foo.clone(); say $a.HOW() === Foo.HOW();

[23:06] <exp_evalbot> OUTPUT[*** Pattern match failure in do expression at src/Pugs/Prim.hs:1351:4-14␤    at /tmp/NhmBGOyUl0 line 1, column 19-35␤]

[23:06] *** kst left
[23:06] *** kst joined
[23:07] <ruoso> pugs: class Foo { }; my $a = Foo.clone; say $a.HOW() === Foo.HOW();

[23:07] <exp_evalbot> OUTPUT[*** Pattern match failure in do expression at src/Pugs/Prim.hs:1351:4-14␤    at /tmp/aiSBJyXUvw line 1, column 19-33␤]

[23:07] <ruoso> pugs: class Foo { }; my $a = Foo; my $b = $a.clone(); say $b.HOW() === Foo.HOW();

[23:07] <exp_evalbot> OUTPUT[*** Pattern match failure in do expression at src/Pugs/Prim.hs:1351:4-14␤    at /tmp/oIMBXyhu2n line 1, column 32-47␤]

[23:08] <TimToady> I don't believe pugs implements .clone, nor does it really quite implement .HOW

[23:08] <ruoso> hmmm... 

[23:09] <ruoso> but do you think the way I'm going is sane?

[23:09] *** mattz_ joined
[23:09] *** vainguard left
[23:11] <ruoso> if Foo.clone().HOW() !=== Foo.HOW(), then I can use it as a way to boot new classes

[23:15] <TimToady> well, merely saying class {} ought to get you an anonymous class derived from Object

[23:15] <TimToady> but puts doesn't do that

[23:15] <TimToady> *pugs

[23:15] <ruoso> sure... but again... I'm using p6 syntax here just for simplicity...

[23:15] <Limbic_Region> pugs does an extraordinary amount considering it hasn't really been maintained for over a year

[23:15] <ruoso> I'm talking about the runtime... or better... which code will be executed for "class { }"

[23:17] *** marmic left
[23:18] <TimToady> I don't have an opinion on the subject, as long as it ends up with an anonymous class derived from Object

[23:18] <ruoso> heh

[23:19] *** peeps[work] left
[23:20] *** marmic joined
[23:21] *** silug_ joined
[23:23] *** mattz left
[23:25] *** silug left
[23:26] <Limbic_Region> TimToady - are you following rakudo much?

[23:26] *** silug_ left
[23:26] <TimToady> pretty much

[23:27] *** silug joined
[23:28] <Limbic_Region> have any feel for how much is implemented compared to pugs?

[23:28] <Limbic_Region> seems like many features that get implemented don't equate to more passing tests with spectest

[23:28] <ruoso> rakudo: class Foo { }; my $a = Foo.clone; say $a.HOW() === Foo.HOW();

[23:28] <exp_evalbot> OUTPUT[Method 'clone' not found for invocant of class ''␤current instr.: '_block10' pc 9 (EVAL_9:8)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 789 (src/PCT/HLLCompiler.pir:459)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1059 (src/PCT/HLLCompiler.pir:585)␤called from Sub

[23:28] <exp_evalbot> ..'parrot;PCT::HLLCompiler;command_line' pc 1242 (src/PCT/H...

[23:28] <TimToady> we've only ported over a smattering of tests so far

[23:29] <Limbic_Region> right

[23:29] <TimToady> and I doubt they're always the simple ones :)

[23:29] <Limbic_Region> which is why it is difficult for me to judge

[23:29] <Limbic_Region> since I am not following

[23:29] <Limbic_Region> source that is

[23:29] <ruoso> kp6: class Foo { }; my $a = Foo.clone; say $a.HOW() === Foo.HOW();

[23:29] <exp_evalbot> r19820: OUTPUT[syntax error at position 47, line 1 column 47:␤class Foo { }; my $a = Foo.clone; say $a.HOW() === Foo.HOW()␤                                               ^ HERE␤]

[23:29] <moritz_> I think it's far from pugs' feature completeness

[23:30] <ruoso> kp6: my $a = Object.clone; say $a.HOW() === Foo.HOW();

[23:30] <exp_evalbot> r19820: OUTPUT[syntax error at position 35, line 1 column 35:␤my $a = Object.clone; say $a.HOW() === Foo.HOW()␤                                   ^ HERE␤]

[23:30] <TimToady> It's probably closer to having a fast compiler, and the parts associated with that, but the rest isn't there yet

[23:30] <TimToady> on the other hand, they're implementing something close to MO

[23:31] *** vainguard joined
[23:33] <TimToady> it remains to be seen whether the subsurface structure is solid or rotten to support the superstructure...

[23:33] <jnthn> TimToady: If you've an object and you stringify it, is there some default method that's called to get the string representation that you define in your class, and what should the default stringification of an object me?

[23:33] <Limbic_Region> . o O ( .perl ? )

[23:33] <jnthn> Or if I've missed the appropriate bit of the synonypis, just point me at it... 

[23:34] <jnthn> s/me/be/

[23:35] <TimToady> see S13:212

[23:35] *** vainguard left
[23:35] <moritz_> .perl is the equivalent to Data::Dumper

[23:35] <TimToady> method Str is export {...}

[23:35] <Limbic_Region> moritz_ - let's hope not

[23:36] <Limbic_Region> moritz_ - more like, .perl is like Data::Dump::Streamer only better ;-)

[23:36] <moritz_> Limbic_Region: not in the litereal sense ;)

[23:36] <moritz_> pugs: my $a = sub { }; say $a.perl

[23:36] <exp_evalbot> OUTPUT[\sub :(@_) "$_" := "Scalar" #<Scalar:0xb7b1c380>␤          "@_" := "Array" #<Array:0xb7b1c378>␤          "&?ROUTINE" := "Sub" #<Sub:0xb6604df4>␤          "&?BLOCK" := "Sub" #<Sub:0xb6604df4> {"$_" := "Scalar" #<Scalar:0xb7270e78>␤                                                "@_" :=

[23:36] <exp_evalbot> .."Array" #<Array:0xb72d245c>␤                          ...

[23:37] <jnthn> TimToady: Thanks.

[23:37] <TimToady> kp6: my $a = sub { }; say $a.perl

[23:37] <exp_evalbot> r19820: OUTPUT[{ ... }␤]

[23:38] <TimToady> hmm, that's kind of a misuse of ... there

[23:38] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop_p6opaque_implementation -- first sketches...

[23:39] *** vainguard joined
[23:39] <pugs_svn> r19821 | putter++ | src/perl6/STD_extract: a minor start at regex pattern analysis.

[23:42] <ruoso> any review on the above sketches are very much welcome

[23:43] *** alester is now known as AndyAway

[23:43] *** wknight8111 is now known as wknight-away

[23:52] <rakudo_svn> r25542 | jonathan++ | [rakudo] Tweaks to inheritance so now we can inherit from Bool, etc.

[23:53] <pugs_svn> r19822 | lwall++ | [STD_extract] query to putter who is ignoring #perl6 :)

[23:59] *** kst left
