[00:14] <pugs_svn> r19538 | cosimo++ | Refactored `pick' tests under /t/spec/S29-list/

[00:14] <pugs_svn> r19538 | cosimo++ | "Fudgified" :todo tests markers.

[00:15] <cosimo> I'm marking todo tests now with "#?pugs"...

[00:17] <pugs_svn> r19539 | cosimo++ | No more tests here. Destroying folder.

[00:20] *** IllvilJa left
[00:22] <cosimo> Guys, I *have* to have sleep now. It's 1:20 am here.

[00:22] <cosimo> Good night to you all. God bless Perl6.

[00:23] <[particle]> ~~

[00:31] <pugs_svn> r19540 | cosimo++ | Refactored container.cat,roundrobin tests into /t/spec/S29-container.

[00:31] <pugs_svn> r19540 | cosimo++ | Fudgifying of :todo test markers. ":depends" are now explained in

[00:31] <pugs_svn> r19540 | cosimo++ | the test description. 

[00:32] *** cspencer left
[00:38] *** cosimo left
[00:47] *** cosimo joined
[00:47] *** cosimo left
[00:51] <Coke> depends?

[00:51] <Coke> sure, feed the bot, get nothing. ^_^

[00:51] <[particle]> what bot?

[00:53] *** polettix joined
[00:55] *** REPLeffect left
[00:58] *** nipotaway is now known as nipotan

[00:58] <Coke> well, perhaps that's my problem.

[01:08] *** cnhackTNT joined
[01:21] *** lyokato_ joined
[01:21] *** devogon left
[01:34] *** ispy_ left
[01:43] *** explorer__ joined
[01:44] *** explorer__ left
[01:49] *** jferrero left
[01:50] *** jjore left
[01:51] *** japhb left
[01:52] *** BinGOs left
[01:52] <pugs_svn> r19541 | lwall++ | [Test] allow todo 'feature', :by<6.28>

[01:52] <pugs_svn> r19541 | lwall++ | [fudge] fix bracket bug on block todo

[01:57] *** BinGOs joined
[02:02] *** BinGOs left
[02:11] *** alester left
[02:14] *** japhb joined
[02:15] *** alester joined
[02:28] *** polettix left
[02:55] *** jhorwitz left
[03:08] <diakopter> rakudo_svn: um, work, please

[03:31] *** ashleyb left
[03:34] *** alester left
[03:42] *** alester joined
[03:48] *** jjore joined
[03:49] *** kanru left
[04:25] *** agentzh left
[04:56] *** kanru joined
[05:02] *** wknight8111 is now known as wknight-away

[05:03] *** penk joined
[05:08] *** orafu joined
[05:40] *** masak joined
[05:51] *** Auzon left
[05:58] *** wknight-away left
[06:16] *** Jamtech joined
[06:17] *** alc joined
[06:19] *** Jamtech left
[06:19] *** Jamtech joined
[06:20] *** Jamtech left
[06:25] *** chacha_chaudhry joined
[06:28] *** iblechbot joined
[06:36] *** kst joined
[06:52] *** jisom joined
[06:56] *** devogon joined
[06:58] *** autin joined
[07:02] *** SCalimlim joined
[07:02] *** BinGOs joined
[07:12] *** iblechbot left
[07:17] *** cnhackTNT left
[07:29] *** alester left
[07:30] *** thoughtpolice joined
[07:43] *** alc left
[07:54] *** rob_ joined
[07:55] *** rob_ left
[07:59] *** chacha_chaudhry left
[08:08] *** TimToady left
[08:09] *** cosimo joined
[08:10] *** diakopter left
[08:14] *** jisom left
[08:31] *** f0rth left
[08:34] *** Aankhen`` joined
[08:43] *** njbartlett_ left
[09:29] *** wknight-away joined
[09:35] *** mj41____ left
[09:42] *** autin left
[09:54] *** thoughtpolice left
[10:10] *** polettix joined
[10:14] *** penk left
[10:21] *** penk joined
[10:39] *** wknight-away left
[10:45] *** meteorjay joined
[10:48] *** meteorjay left
[10:49] *** meteorjay joined
[10:50] *** cognominal_ joined
[10:53] *** cognominal_ left
[10:59] *** agentzh joined
[11:01] *** iblechbot joined
[11:15] *** njbartlett_ joined
[11:18] *** ebassi joined
[11:20] *** mj41 joined
[11:22] *** Schwern joined
[11:27] <pugs_svn> r19542 | ruoso++ | [smop] adding a repository for identifier constants in include/smop_identifiers.h

[11:28] <moritz_> @seen fglock

[11:28] <lambdabot> I haven't seen fglock.

[11:30] <pugs_svn> r19543 | ruoso++ | [smop] adding smop_identifiers reference on smop.h

[11:37] *** nipotan is now known as nipotaway

[11:39] *** lisppaste3 left
[11:40] *** qmole_ left
[11:40] *** qmole__ left
[11:42] *** IllvilJa joined
[11:45] *** lyokato_ left
[11:52] *** Casan joined
[11:54] *** DarkWolf84 joined
[11:56] *** lisppaste3 joined
[11:59] *** masak left
[12:05] *** masak joined
[12:15] *** meppuru joined
[12:22] *** mosno joined
[12:27] *** Schwern left
[12:28] <pugs_svn> r19544 | ruoso++ | [smop] created a new test for the stack... this test already counts on the sm0p language already being used inside the C source to help define a set of stack nodes.

[12:34] *** iblechbot left
[12:34] *** Aankh|Clone joined
[12:36] <pugs_svn> r19545 | ruoso++ | [smop] changing the sm0p representation inside the C code to look just like Perl 6...

[12:40] *** renormalist joined
[12:53] *** Aankhen`` left
[12:56] *** qmole joined
[12:56] *** qmole_ joined
[12:57] *** explorer joined
[13:01] *** fglock joined
[13:02] <fglock> @messages

[13:02] <lambdabot> mncharity said 17h 28m 12s ago: fyi: perl Makefile.PL kp6_mp6 "Please inform the author." error message: http://sial.org/pbot/29880

[13:02] <lambdabot> mncharity said 17h 26m 41s ago: I didn't run make. Oops. Never mind. Thanks. pmurias++

[13:10] *** wknight-away joined
[13:11] <pugs_svn> r19546 | ruoso++ | [smop] moving all builtin identifiers to the constant identifier repository in smop_identifiers.h. Changing every other identifier definition to a constant that points to the constant in identifiers.h. identifiers.h is included just after base.h

[13:12] *** wknight-away is now known as wknight8111

[13:13] <pugs_svn> r19547 | ruoso++ | [smop] updating the destroy sm0p code to reflect the use of the constant identifiers

[13:13] *** pbuetow left
[13:15] *** cmarcelo joined
[13:15] *** pbuetow joined
[13:22] *** pbuetow left
[13:33] *** pbuetow joined
[13:36] *** pcbuetow joined
[13:37] *** Lorn joined
[13:38] *** Ariel_Eran joined
[13:40] *** cognominal_ joined
[13:41] *** pbuetow left
[13:42] *** ispy_ joined
[13:43] *** f0rth joined
[13:50] *** Alias_ joined
[13:50] *** icwiener joined
[13:58] *** iblechbot joined
[14:04] *** ashleyb joined
[14:11] *** njbartlett_ left
[14:20] *** pcbuetow is now known as pbuetow

[14:27] *** ashleyb left
[14:31] *** chacha_chaudhry joined
[14:40] *** jhorwitz joined
[14:44] *** hanekomu joined
[14:44] *** go|dfish left
[14:48] *** DarkWolf84 left
[14:51] <fglock> http://research.microsoft.com/users/bobmoore/    # parsing algorithms, perl5 implementations

[14:51] <lambdabot> Title: Robert C. Moore - Natural Language Processing Group

[14:53] <fglock> http://javascript.crockford.com/tdop/   # Top Down Operator Precedence, simplified Javascript impl (could be translated to mp6)

[14:53] <lambdabot> Title: Top Down Operator Precedence

[15:01] *** njbartlett_ joined
[15:03] *** chris2_ joined
[15:04] *** chris2_ is now known as chris2

[15:14] *** pmichaud joined
[15:16] *** alester joined
[15:16] <pugs_svn> r19548 | fglock++ | [kp6-ruby] say "hello, World"

[15:17] *** chacha_chaudhry left
[15:19] <alester> The unhappiness has started: http://perlbuzz.com/2008/01/perl-6-on-parrot-is-now-known-as-rakudo.html

[15:19] <lambdabot> Title: Perl 6 on Parrot is now known as Rakudo - Perl Buzz, http://tinyurl.com/ywcc5l

[15:21] <avar> so we can use "onion" eh?

[15:21] <[particle]> yep, you can use onion

[15:21] <[particle]> andy: nice response.

[15:21] <avar> We always could actually, we eat parrot developers

[15:22] <ruoso> you know... there's a funny comment in that post

[15:22] <alester> particle: I'm workin' on a doc explaining the differences.

[15:22] <ruoso> saying that the perl6 name should be reserved from when perl5 is able to implement Perl 6

[15:22] <[particle]> did you ever know that you're my hero?

[15:22] <ruoso> :P

[15:23] <alester> I am the wind that breaks beneath your wings.

[15:23] <[particle]> ...then my wife *hates* you.

[15:24] <alester> What'd I ever do to her?

[15:24] <[particle]> you stink, man.

[15:25] * ruoso anxious to have a usefull version of smop to see it it gets to the radar of Perl 6 implementations...

[15:25] <[particle]> ruoso: you can put it on the radar... advertise!

[15:28] <ruoso> heh

[15:28] * ruoso hates advertising vaporware... I need to get at least something running before giving it a advertisement shot...

[15:28] *** mosno left
[15:33] *** explorer left
[15:33] <meppuru> hm

[15:33] <meppuru> rakudo sounds japanese

[15:34] <pugs_svn> r19549 | ruoso++ | [smop] adding two other native types: idconst and bytes. idconst will be used to initialize the constant identifiers to be used in sm0p and s1p. Added a test for the const identifier.

[15:34] <[particle]> because it is japanese

[15:34] <[particle]> http://rakudo.org/

[15:34] <lambdabot> Title: Rakudo.org:

[15:35] <alester> ping rakudo.org

[15:35] <alester> I must be the only one with rakudo.org resolving to petdance.com's IP

[15:37] <Coke> that's not entirely surprising, since it's Andy's domain.

[15:37] <meppuru> 楽土 らくど

[15:37] <alester> You mean "your", right?

[15:37] <meppuru> the paradise

[15:38] <alester> o/` and we'll be rockin' the Paradise.... o/`

[15:38] *** alester is now known as AndyAway

[15:39] * Coke peers at alester's psuedo.

[15:39] <Coke> "how was I supposed to know you'd be robbing your OWN HOUSE!?"

[15:54] *** bbkr__ left
[16:17] <pugs_svn> r19550 | ruoso++ | [smop] In theory, we have constant identifiers already... with the help of a little script that takes the smop_identifiers.h file and generate the code to init and destroy them...

[16:17] * ruoso with his hands in his boot straps and ready to pull

[16:19] <pugs_svn> r19551 | ruoso++ | [smop] adding the main smop.c file that have the smop_init and smop_destr functions...

[16:20] *** jferrero joined
[16:20] <ruoso> fglock, I think I'll need help on the sm0p part... to create an emitter for that...

[16:21] <ruoso> and I still need some idea on the best way of putting a preprocessor before cpp

[16:22] *** rdice joined
[16:23] <fglock> ok but coffee

[16:24] <ruoso> coffe.HOW

[16:25] *** Bzek joined
[16:25] *** jferrero left
[16:25] *** Bzek left
[16:32] *** hanekomu left
[16:35] *** Alias_ left
[16:37] *** penk left
[16:58] *** TimToady joined
[17:19] *** masak left
[17:20] *** hanekomu joined
[17:24] *** TJCRI joined
[17:27] *** jjore left
[17:33] *** penk joined
[17:34] *** hanekomu left
[17:41] *** meppuru left
[17:43] *** meppuru joined
[17:44] *** cosimo left
[17:51] *** kanru left
[17:52] *** beppu joined
[17:54] *** pmurias joined
[17:55] *** kanru joined
[17:57] <ruoso> It's weird to realise that after reinventing the wheel you make it looking like someone else's

[17:57] <moritz_> lol

[17:58] <ruoso> fglock just noticed the resemblances between smop and forth, which made me realise that smop use the same technique as the older forth compilers

[17:58] <ruoso> indirect-threading

[17:58] <ruoso> http://en.wikipedia.org/wiki/Threaded_code#Indirect_threading

[17:59] <ruoso> and even the implementation looks alike

[17:59] <ruoso> http://www.complang.tuwien.ac.at/forth/threading/

[17:59] <lambdabot> Title: Index of /forth/threading

[17:59] <ruoso> a benchmark... in the end there's a link to the code, which looks like how smop implements it...

[18:00] <ruoso> the good news is that I was worried about smop performance, but according to wikipedia, indirect threading is "Faster than byte code."

[18:09] *** pmurias left
[18:29] *** ebassi left
[18:29] *** TJCRI left
[18:30] *** cosimo joined
[18:44] *** Schnueff joined
[18:55] *** israel_ joined
[18:55] *** TJCRI joined
[18:57] *** devogon left
[19:01] *** bwisti joined
[19:13] *** xinming_ left
[19:18] *** jhorwitz_ joined
[19:24] *** apple-gunkies joined
[19:25] *** rdice left
[19:30] *** jhorwitz left
[19:34] <apple-gunkies> Hi folks. I've read through S05 and A05, and am looking at the lolcode grammar, and still don't really understand: What, precisely, is supposed to be the difference between a rule and a token? Can someone explain, please?

[19:35] <moritz_> rule = token + :sigspace-modifier

[19:35] <moritz_> so regex = without modifiers

[19:35] <moritz_> token = implied :ratchet (backtracking control)

[19:35] <moritz_> rule = :ratchet :sigspace

[19:36] <moritz_> I think that's a FAQ by now - we should put it up somewhere ;)

[19:36] *** baest_ left
[19:36] <apple-gunkies> ok, simple then. Guess I was looking too hard for some profound difference. Thanks :)

[19:37] <apple-gunkies> and yes, the synopsis doesn't really spell it out

[19:37] <pugs_svn> r19552 | ruoso++ | [smop] a small exercise on how to transform sm0p code into C code... sm0p2C.txt...

[19:38] *** lisppaste3 left
[19:41] *** baest joined
[19:41] <[particle]> apple-gunkies: Just as C<rx> has variants, so does the C<regex> declarator.

[19:41] <[particle]> In particular, there are two special variants for use in grammars:

[19:41] <[particle]> C<token> and C<rule>.

[19:41] <[particle]> from S05

[19:42] <[particle]> granted, it's halfway down, buried in =head1 Regexes are now first-class language, not strings

[19:42] <pugs_svn> r19553 | ruoso++ | [smop] sm0p2C.txt: uses gcc static anonymous array in the exercise code.

[19:47] <TimToady> most of the synopses desperately need reorganizing, but I'm afraid to break smartlinks

[19:48] <moritz_> TimToady: it will not get better if you wait longer

[19:48] <TimToady> I need something that chases smartlinks the other direction and tells me when I've broken one. :)

[19:48] <moritz_> let's rephrase it: if you reorganise the spec, I'll invest some time to unbreak the smart links

[19:49] <TimToady> that's the other approach, yeah

[19:49] * ruoso wonders how to create more room for optimizations in the smop stack... having to run a code like the one in sm0p2C.txt everytime entering a new stack frame...

[19:49] <TimToady> but it's a convenient excuse when I don't want to admit having the time or energy :)

[19:50] <TimToady> ruoso: are there any Forth implementations that do continuations?

[19:51] <TimToady> s/any/any fast/

[19:51] <ruoso> TimToady, I don't know Forth that much...

[19:51] *** lisppaste3 joined
[19:52] <TimToady> it's just like Japanese, only with a different vocabulary

[19:52] <TimToady> well, different writing system too...

[19:52] *** fglock left
[19:53] <ruoso> hmmm.. as I don't know japanese, comparing them do make sense...

[19:53] <ruoso> :P

[19:53] <wolverian> are there millions of implementations of japanes, or only one (or a few variants)?

[19:53] <wolverian> s/nes/nese/

[19:54] <TimToady> I dunno, but most of them are pretty fast implementions, faster than my brain can process

[19:55] <ruoso> But I'm trully concerned about the possible performance impact of the dynamic and polymorphic eval of smop

[19:55] <ruoso> TimToady, take a look at the sm0p2C.txt file

[19:55] <ruoso> that's the code that will be run everytime...

[19:55] <ruoso> because the stack nodes are dynamic

[19:56] <[particle]> ...every time an opcode farts?

[19:56] <ruoso> everytime a new recursion in the stack is needed

[19:56] <ruoso> unless some optimization is made

[19:56] <ruoso> I just need to make sure I leave room for it

[19:56] <TimToady> where's Lisp when you need it?

[19:57] <[particle]> (here(right))

[19:57] <ruoso> at least I feel that sm0p is usefull... having to write that C code seems awful

[19:57] <ruoso> it actually *was* awful to write the exercise

[19:59] <TimToady> You can solve any problem in computer science with another level of indirection, except for the problem of too many levels of indirection. :)

[19:59] <ruoso> heahahaehe

[19:59] <ruoso> indeed..

[20:00] <ruoso> but I feel like there is some way to optimize it...

[20:00] <ruoso> I just can't see it clearly right now

[20:00] <ruoso> and I feel unconfortable to keep going without knowing that there's actually room to optimize it...

[20:01] <TimToady> well, you probably need more contextual information on where continuations are guaranteed to be single-use

[20:01] <ruoso> I was thiking about some long-living constant copy of that structure that is then clonned in a more efficient way

[20:03] <TimToady> but I'm not really an expert on CPS

[20:03] *** pmurias joined
[20:03] <ruoso> TimToady, CPS is not the big deal here..

[20:03] <ruoso> but the whole stack thing

[20:03] <pmurias> ruoso: is it worth to have everything stackless?

[20:03] <ruoso> pmurias, other way the C stack would bite me

[20:03] <ruoso> at some point

[20:04] *** barney joined
[20:04] <ruoso> when trying to implement continuation for instance...

[20:04] <ruoso> because I would have to mix the C stack with the Perl stack

[20:04] <ruoso> and that seems very hard to keep up

[20:06] <pmurias> i wander about keeping the c level stackfull and the layer in bytecode in stackles

[20:06] <ruoso> it's hard to bootstrap the oo system that way

[20:08] <apple-gunkies> particle: I had stepped away, thanks for following up. I had thought that regex and rule were synonymous. It all makes more sense now;) 

[20:08] <integral> (chicken scheme does some tricks to use the C stack, yet do GC and continuations)

[20:08] <TimToady> googling for "efficient cps continuation" gives some interesting hits

[20:09] <cosimo> Hi all!

[20:10] <moritz_> hi cosimo 

[20:11] <cosimo> I'm sorry, I'm always breaking in with some newbie question... :-)

[20:11] <cosimo> Even this time :)

[20:12] <cosimo> Given this code:

[20:13] <cosimo> if $?PUGS_BACKEND ne "BACKEND_PUGS" {

[20:13] <cosimo>   skip_rest "PIL2JS and PIL-Run do not support eval() yet.";

[20:13] <cosimo>   exit;

[20:13] <cosimo> }

[20:13] <cosimo> Is it correct to replace it with #?pugs: skip 'reason'    with a block?

[20:14] <cosimo> I don't think they have the same meaning...

[20:14] <moritz_> since PIL2JS and PIL-Run are bit-rotten, you can just ignore that block

[20:14] *** thoughtpolice joined
[20:15] <moritz_> aka delete it

[20:15] <cosimo> thx

[20:15] <moritz_> in the cleaned-up version

[20:16] <pmurias> svk-- #behaving strangly (mergin stuff which hasn't changed)

[20:17] * ruoso going home &

[20:17] * ruoso have to take his mind in order...

[20:19] <pugs_svn> r19554 | cosimo++ | Refactored eval tests, moved under t/spec/S29-context/

[20:19] <pugs_svn> r19554 | cosimo++ | Ignored old PIL2JS/PIL2Run backends notice, they are no more used, it seems. 

[20:22] <pugs_svn> r19555 | cosimo++ | Refactored 'defined' builtin tests, moved under t/spec/S29-scalar

[20:24] *** pmurias left
[20:24] <pugs_svn> r19556 | cosimo++ | Refactored 'die' builtin tests, moved under t/spec/S29-context

[20:25] <pugs_svn> r19557 | cosimo++ | Refactored 'die' builtin tests, moved under t/spec/S29-context

[20:27] *** diakopter joined
[20:30] *** ChanServ sets mode: +o diakopter

[20:30] *** diakopter sets mode: +o TimToady

[20:30] *** diakopter sets mode: -o diakopter

[20:35] *** cosimo left
[20:38] *** cosimo joined
[20:40] *** TJCRI left
[20:42] *** TJCRI joined
[20:44] *** Aankh|Clone left
[20:46] *** apple-gunkies left
[20:59] *** chris2 left
[21:20] <pugs_svn> r19558 | cosimo++ | Refactored evalfile tests under t/spec/S29-context

[21:31] *** barney left
[21:32] *** AndyAway is now known as alester

[21:33] <cosimo> Are these tests relevant anymore? http://perlsix.org/svn/pugs/view/t/builtins/control_flow/exit-in-if.t

[21:33] <lambdabot> Title: view: /pugs/t/builtins/control_flow/exit-in-if.t (Rev: HEAD, via SVN::Web), http://tinyurl.com/2ohtud

[21:33] <cosimo> http://perlsix.org/svn/pugs/view/t/builtins/control_flow/exit.t

[21:33] <lambdabot> Title: view: /pugs/t/builtins/control_flow/exit.t (Rev: HEAD, via SVN::Web)

[21:33] <moritz_> looking...

[21:34] <moritz_> I seen no reason why they shouldn't be relevant

[21:34] <moritz_> look like old pugs regressions, but other implementations might run into the same errors

[21:34] <cosimo> They seem to be about PIL2JS

[21:35] <moritz_> but they test valid perl 6

[21:35] <cosimo> ok!

[21:36] *** israel_ left
[21:39] *** Coke left
[21:40] <pmichaud> I've been thinking that specific compiler regressions could go into a regressions.t 

[21:41] <pmichaud> it would still get run by all implementations, but might make the test organizations a bit easier

[21:41] <pugs_svn> r19559 | cosimo++ | Refactored exit and nothing tests into t/spec/S29-context

[21:41] *** Lorn left
[21:42] <cosimo> pmichaud: by implementation you mean pugs, rakudo, and such..?

[21:42] *** jhorwitz__ joined
[21:42] <pmichaud> cosimo: yes

[21:42] *** jhorwitz__ is now known as jhorwitz

[21:43] <[particle]> as in, t/spec/S29-misc/regressions.t ??

[21:43] <pmichaud> well, it could even be t/spec/S29-context/regressions.t

[21:43] <[particle]> ok, sure

[21:44] <pmichaud> it depends a bit on the test... if it looks 'funny' with respect to the other tests, then perhaps it belongs in regressions.t

[21:47] <pmichaud> Andy++ # "you can't declare a de facto standard"

[21:47] <alester> Heh, thanks.

[21:47] <pmichaud> that's a wonderful comment/insight

[21:48] <meppuru> good night

[21:49] *** meppuru left
[21:53] *** rdice joined
[21:53] <pmichaud> afk -- heading home

[21:53] <alester> pmichaud: Seriously.

[21:53] <alester> We could say "This is the official Perl 6", but everyone's free to ignore it.

[21:55] <pugs_svn> r19560 | cosimo++ | Refactored time-related function tests into t/spec/S29-time/

[21:57] *** ispy_ left
[21:58] *** jhorwitz_ left
[22:00] <pugs_svn> r19561 | cosimo++ | Fudge-ified :todo tests  

[22:00] <pugs_svn> r19562 | moritz++ | Test suite refactoring: 

[22:00] <pugs_svn> r19562 | moritz++ |   * move ignorecase regex modifier tests to t/spec/S05-modifier/*

[22:00] <pugs_svn> r19562 | moritz++ |     (still need more tests here)

[22:00] <pugs_svn> r19562 | moritz++ |   * small correctiion in t/builtins/math/log.t

[22:04] <pugs_svn> r19563 | cosimo++ | Added all t/builtins/hashes/exists.t tests to existing

[22:04] <pugs_svn> r19563 | cosimo++ | spec/S29-hash exist tests.

[22:05] <[particle]> (test refactoring)++

[22:07] <pugs_svn> r19564 | cosimo++ | Refactored and merged existing hash.delete() tests

[22:07] <pugs_svn> r19564 | cosimo++ | with spec/S29-hash/delete.t tests

[22:08] *** alester is now known as AndyAway

[22:08] *** IllvilJa left
[22:10] <pugs_svn> r19565 | cosimo++ | Moved system() test script under t/spec/S29-os/

[22:14] <pugs_svn> r19566 | moritz++ | moved :basechar tests to t/spec/S05-modifier/basechar.t

[22:14] <pugs_svn> r19567 | cosimo++ | Refactored isa hash tests into t/spec/S29-hash/

[22:14] *** devogon joined
[22:19] <pugs_svn> r19568 | moritz++ | test for repetition modifier under t/spec/

[22:21] *** iblechbot left
[22:22] *** Auzon joined
[22:22] <pugs_svn> r19569 | moritz++ | moved tests for the :continue regex modifier

[22:24] <[particle]> i like that this test refactoring means nobody's tests will work right until utils/fudge is ready :)

[22:24] *** apple-gunkies joined
[22:25] <cosimo> :-)

[22:25] <moritz_> [particle]: I thought it already handles the simple cases?

[22:25] <[particle]> moritz_: it did, until everything changed

[22:25] <[particle]> so now it doesn't handle any cases

[22:26] <[particle]> i mean, no implementation handles #?<impl>: todo

[22:26] <moritz_> but fudge does the for the implementation, doesn't it?

[22:26] <moritz_> of course it's not yet integrated into the "make smoke" thingy

[22:26] <[particle]> never tried it

[22:27] <[particle]> i've been meaning to, but too few cycles

[22:27] <cosimo> [particle]: maybe I should change {#?<impl>: todo} with {#?<impl>: todo ''}   ?

[22:28] <[particle]> cosimo: i don't think that'll matter

[22:28] <[particle]> in any case, rakudo hasn't been tested with fudge

[22:28] <[particle]> larry may have tested pugs, iunno

[22:31] *** jjore joined
[22:36] <moritz_> a small question of spec interpretation: my $s = "aB "; $s =~ s:ii/.*/abcd/; should $s now be "aBcd" or "aBcD"?

[22:37] *** cmarcelo left
[22:37] <moritz_> so if the last matched char has no case information, is the rest of the substition string left unchanged?

[22:39] *** TJCRI left
[22:40] <[particle]> i'd hope the rest is left unchanged.

[22:40] <moritz_> ok

[22:45] <pugs_svn> r19570 | moritz++ | Added tests for the :ii modifier

[22:47] <cosimo> and good night #perl6

[22:47] <moritz_> good night cosimo ;)

[22:47] <Auzon> gnight!

[22:48] *** cosimo left
[22:52] *** jhorwitz left
[22:52] *** skids left
[22:56] *** Schnueff left
[22:56] <pugs_svn> r19571 | moritz++ | tests for the "smart" :ii modifier

[23:03] *** _sprocket_ joined
[23:03] *** pack joined
[23:04] *** pack left
[23:05] *** cognominal_ left
[23:21] *** icwiener left
[23:22] *** rdice left
[23:49] *** skids joined
[23:54] *** atobey joined
[23:54] *** Limbic_Region joined
[23:57] <mncharity> perl script/kp6 -Cruby -e 'say "hello, world!"' :)  fglock++

