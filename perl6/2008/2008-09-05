[00:00] *** sail0r joined
[00:03] *** alester_ left
[00:06] * ruoso needs a fresher brain to implement map... zZzZz

[00:07] *** bacek joined
[00:11] *** jferrero left
[00:12] <rjbs> http://use.perl.org/~rjbs/journal/37357

[00:12] <lambdabot> Title: Journal of rjbs (4671)

[00:12] <rjbs> That's the entry I was asking questions in furtherance of.

[00:12] *** avar joined
[00:29] <literal> "[...] multiple language. In explaining some of the issues I have with Ruby, both the scope of scope and the resolution of methods."

[00:30] <literal> is that supposed to say "scope of scope"?

[00:30] <literal> and also, multiple languageS

[00:31] *** justatheory joined
[00:33] *** xuser_ left
[00:34] *** sail0r left
[00:34] <rjbs> thanks :)

[00:43] *** eternaleye joined
[00:55] *** sri_work joined
[01:04] *** wknight8111 joined
[01:07] *** Lichtkind_ joined
[01:08] *** Lichtkind_ left
[01:19] *** sail0r joined
[01:20] *** c9s joined
[01:26] *** Lichtkind left
[01:31] *** kanru joined
[01:39] *** scrottie left
[01:45] *** ruoso left
[02:04] *** justatheory left
[02:04] *** justatheory joined
[02:06] *** drbean left
[02:13] *** [particle]1 joined
[02:29] *** wknight8111 left
[02:29] *** sail0r left
[02:31] *** [particle] left
[02:48] <pugs_svn> r22158 | s1n++ | [spec] updated bool to support the latest tests and Bool class.

[02:56] <s1n> moritz_: go ahead and add S02-builtin_data_types/bool.t to the spectest_regression

[03:03] *** elmex_ joined
[03:05] *** penk joined
[03:15] *** finchely joined
[03:15] *** Jedai left
[03:16] *** wknight8111 joined
[03:18] *** elmex left
[03:18] *** elmex_ is now known as elmex

[03:19] *** finchely left
[03:30] *** hercynium_ left
[03:30] *** hercynium_ joined
[03:30] *** yahooooo left
[03:32] *** scrottie joined
[03:36] *** xuser joined
[03:37] *** meteorjay joined
[03:57] *** Auzon joined
[04:16] *** yahooooo joined
[04:24] *** elmex_ joined
[04:26] *** Patterner left
[04:26] *** Psyche^ joined
[04:26] *** Psyche^ is now known as Patterner

[04:32] *** yahooooo left
[04:35] *** wknight8111 left
[04:38] *** elmex left
[04:38] *** elmex_ is now known as elmex

[05:08] *** elmex_ joined
[05:10] *** elmex left
[05:10] *** elmex_ is now known as elmex

[05:25] *** zamolxes joined
[05:28] *** Psyche^ joined
[05:31] *** BinGOs left
[05:43] *** justatheory left
[05:44] *** Patterner left
[05:44] *** Psyche^ is now known as Patterner

[06:17] <rakudo_svn> r30772 | chromatic++ | [Rakudo] Improved caller lookup algorithm in !OUTER; it's slightly more clear

[06:17] <rakudo_svn> r30772 | chromatic++ | this way.  It also appears to clean up RT #58578 (reported by Moritz Lenz).

[06:17] <rakudo_svn> r30772 | chromatic++ | Neither Patrick nor I trust it completely though.

[06:22] *** scrottie left
[06:35] *** ashizawa joined
[06:38] <moritz_> rjbs: re use.perl.org, it's 'self', not '$self'

[06:38] <moritz_> rjbs: in the Perl 6 example

[06:52] *** masak joined
[07:02] *** BinGOs joined
[07:05] *** viklund left
[07:06] *** enton joined
[07:19] *** viklund joined
[07:21] *** zamolxes left
[07:31] *** cosimo joined
[07:33] <rakudo_svn> r30778 | duff++ | Make the expressions in a loop statement optional and refactor loop_statement

[08:00] *** meppl joined
[08:04] *** sri_work left
[08:14] *** scrottie joined
[08:15] *** Alias_ joined
[08:30] *** jferrero joined
[08:44] *** barney joined
[08:59] *** mj41_ joined
[09:00] *** d4l3k_ joined
[09:01] *** Auzon left
[09:01] *** fullermd left
[09:01] *** StephenPollei left
[09:01] *** gbacon left
[09:01] *** simcop2387 left
[09:01] *** mj41 left
[09:01] *** ilbot2 left
[09:01] *** apeiron left
[09:01] *** PZt left
[09:01] *** cotto_work left
[09:01] *** r0bby left
[09:01] *** c1sung left
[09:01] *** allbery_b left
[09:01] *** pmichaud left
[09:01] *** les left
[09:01] *** sirhc left
[09:01] *** ptman left
[09:01] *** pasteling left
[09:01] *** dalek left
[09:01] *** fullermd joined
[09:01] *** mj41_ is now known as mj41

[09:01] *** d4l3k_ is now known as dalek

[09:01] *** cotto_work joined
[09:02] *** c1sung joined
[09:02] *** ptman joined
[09:03] *** pmichaud joined
[09:06] *** Pzt3 joined
[09:07] *** apeiron joined
[09:09] *** Pzt3 is now known as PZt

[09:10] *** PZt left
[09:12] *** barney left
[09:12] *** xuser left
[09:12] *** bacek left
[09:12] *** pochi left
[09:12] *** Guest70230 left
[09:12] *** ting_ left
[09:12] *** Khisanth left
[09:12] *** hercynium left
[09:12] *** SamB left
[09:12] *** Myoma left
[09:12] *** szbalint left
[09:12] *** spinclad left
[09:12] *** PerlJam left
[09:12] *** nnunley left
[09:12] *** jiing left
[09:12] *** sunnavy left
[09:12] *** beppu left
[09:12] *** idemal left
[09:12] *** obra left
[09:12] *** clkao left
[09:12] *** pmichaud left
[09:12] *** cosimo left
[09:12] *** baest left
[09:12] *** s1n left
[09:12] *** broquaint left
[09:12] *** buubot left
[09:12] *** literal left
[09:12] *** awwaiid left
[09:12] *** pmichaud joined
[09:12] *** barney joined
[09:12] *** cosimo joined
[09:12] *** xuser joined
[09:12] *** bacek joined
[09:12] *** pochi joined
[09:12] *** ting_ joined
[09:12] *** idemal joined
[09:12] *** hercynium joined
[09:12] *** Myoma joined
[09:12] *** Khisanth joined
[09:12] *** Guest70230 joined
[09:12] *** jiing joined
[09:12] *** s1n joined
[09:12] *** awwaiid joined
[09:12] *** spinclad joined
[09:12] *** broquaint joined
[09:12] *** literal joined
[09:12] *** obra joined
[09:12] *** sunnavy joined
[09:12] *** clkao joined
[09:12] *** SamB joined
[09:12] *** nnunley joined
[09:12] *** szbalint joined
[09:12] *** PerlJam joined
[09:12] *** beppu joined
[09:12] *** baest joined
[09:12] *** buubot joined
[09:13] *** zamolxes joined
[09:13] *** Myoma left
[09:13] *** PZt joined
[09:14] *** simcop2387 joined
[09:16] *** Auzon joined
[09:16] *** pasteling joined
[09:17] *** gbacon joined
[09:17] *** StephenPollei joined
[09:18] *** sirhc joined
[09:19] *** ilbot2 joined
[09:20] *** meppl left
[09:20] *** les joined
[09:21] *** allbery_b joined
[09:38] *** ting_ left
[10:04] *** OuLouFu left
[10:06] *** bacek left
[10:10] *** penk left
[10:23] *** wknight8111 joined
[10:28] *** barney left
[10:37] *** dmq joined
[11:05] *** barney joined
[11:10] *** iblechbot joined
[11:20] <rjbs> moritz_: thanks

[11:36] *** Alias__ joined
[11:55] *** Alias_ left
[11:56] *** masak left
[12:12] *** alanhaggai joined
[12:15] *** barney left
[12:34] *** Jedai joined
[12:35] <rakudo_svn> r30785 | pmichaud++ | [rakudo]: spectest-progress.csv update: 157 files, 3129 passing tests

[12:36] <moritz_> http://rakudo.de/rakudo-progress-nonstacked.png that looks nice ;)

[12:37] *** clintongormley joined
[12:38] *** holli joined
[12:38] *** clintongormley left
[12:51] *** rjbs left
[12:52] *** Alias__ left
[12:55] *** ashizawa left
[12:55] *** eternaleye left
[13:08] *** jan_ left
[13:09] *** jferrero left
[13:17] *** alanhaggai_ joined
[13:24] <rakudo_svn> r30786 | coke++ | [cage] fix trailing whitespace causing smolder failures.

[13:27] *** alanhaggai__ joined
[13:32] *** alanhaggai left
[13:32] *** alanhaggai__ left
[13:34] *** eternaleye joined
[13:40] *** cognominal left
[13:42] *** alanhaggai_ left
[13:45] *** cognominal joined
[13:47] *** Auzon left
[14:01] *** BinGOs left
[14:01] *** BinGOs joined
[14:08] *** scrottie left
[14:11] *** TJCRI joined
[14:34] *** jan joined
[14:35] *** Exodist joined
[14:42] *** frobnitz joined
[15:02] *** xuser left
[15:10] *** meppl joined
[15:12] *** hercynium_ left
[15:14] *** kst left
[15:18] *** xuser joined
[15:22] *** justatheory joined
[15:22] <pugs_svn> r22159 | moritz++ | [t/spec] add subset mmd tests

[15:24] <pugs_svn> r22160 | moritz++ | [t/spec] fixed previous commit

[15:40] *** Lichtkind joined
[15:46] *** zamolxes left
[15:53] *** alanhaggai joined
[15:54] *** holli left
[15:59] *** kanru left
[16:23] *** Caelum left
[16:25] *** Caelum joined
[16:27] *** enton left
[16:33] *** pmurias joined
[17:08] *** pmurias left
[17:10] *** rindolf joined
[17:19] *** ruoso joined
[17:26] *** sri_work joined
[17:28] *** cosimo left
[17:29] *** ruoso_ joined
[17:31] *** sri_work left
[17:31] *** sri_work joined
[17:40] *** ruoso left
[17:40] *** ruoso_ left
[17:41] *** ruoso joined
[17:41] *** ruoso left
[17:42] *** ruoso joined
[17:43] *** TheFluff joined
[17:47] <Khisanth> pugs: my  @a=([1,2],[3,4]); @a[0;0..1];

[17:47] <p6eval> pugs: OUTPUT[*** ␤    Unexpected ";"␤    expecting "x", octal digit, "o", "b", fraction, exponent, term postfix, operator or "]"␤    at /tmp/xa4yI1WkYg line 1, column 27␤]

[17:47] <Khisanth> o_O

[17:47] <moritz_> no multi dimensional arrays and indexes yet

[17:47] <moritz_> and no slice context either

[17:48] <Khisanth> but why is it expecting an oct?

[17:48] <Khisanth> or fraction or exponent those seem like strange things to be expecting there

[17:49] <Khisanth> or does p6 accept fractional array indices? :P

[17:49] <moritz_> when you write '@a[0', it's a valid continuation from that point to write an octal digit, I suppose

[17:50] <moritz_> or an exponent

[17:50] <moritz_> for example '@a[0**1]' would be a valid continuation with an exponent

[17:51] *** barney joined
[17:54] <TimToady> it should not be expecting an octal digit unless it sees 0o

[17:54] <moritz_> that's probably a pugs anachronism

[17:54] <moritz_> but given that all octal digits are also decimal digits...

[17:54] <moritz_> pugs: say 010

[17:54] <p6eval> pugs: OUTPUT[10␤]

[17:55] <moritz_> pugs: say 1+010

[17:55] <p6eval> pugs: OUTPUT[11␤]

[17:56] *** eternaleye left
[17:58] <TimToady> btw, I'm making a fudgable pge.t out of what you checked in

[17:59] <moritz_> cool

[18:00] <moritz_> I already thought about adding #emit rakudo $test_number in these skip/todo junctions

[18:02] <moritz_> erm, #?rakudo emit

[18:02] <TimToady> I'm just translating it all to inline code with appropriate skip/todo directives

[18:04] <TimToady> only comes out to about 2500 lines of code :)

[18:04] <TimToady> including all the old data as comments

[18:05] <moritz_> so you're not even eval'ing?

[18:05] <TimToady> I'm just using a variant of pge-tests.t that spits out code instead

[18:05] <TimToady> it inserts evals where it needs them

[18:05] <TimToady> (I hope)

[18:06] <TimToady> some trickiness to get the quoting right

[18:06] <TimToady> since the tests depend on being data rather than code in spots, sigh

[18:07] <TimToady> already found a few bugs in STD with it :)

[18:07] <TimToady> like it couldn't parse / a : b /

[18:08] <TimToady> or  <- [a..z]>

[18:09] <[particle]1> yay for tests!

[18:09] <moritz_> now I know why you want inline code ;)

[18:09] *** [particle]1 is now known as [particle]

[18:10] <TimToady> and there are pervasive regex-as-string assumptions, like /foo # bar/ eating up final /

[18:11] *** r0bby joined
[18:12] <ruoso> TimToady, do you plan to add Iterator (maybe a Role, instead of a Class) type to the builtin types? 

[18:13] <TimToady> oh, likely

[18:13] <rakudo_svn> r30793 | pmichaud++ | [rakudo]:  Update svn:ignore to ignore auto-generated 'Test.pir'

[18:13] <ruoso> TimToady, right.. it's just because I'm assuming that in SMOP ;)

[18:15] <ruoso> TimToady, btw... I'm assuming that an iterator in item context should return one item at a time, even if the effective "producer" (like a map block) returns two items in an iteration... it would only return the capture when in slice context...

[18:15] <pmichaud> TimToady: are you using the rx_* files from parrot?  

[18:16] <pmichaud> I'm not entirely sure of the status of the pge_tests file that is in t/spec

[18:16] <[particle]> me neither, i haven't looked at it since moritz imported it

[18:19] <ruoso> TimToady, actually... "an iterator in item context should return" means "my $iterator = something(); foo(=$iterator);"... which should probably be written as "an iterator in item context should have prefix:<=> returning one item at  a time"

[18:20] <TimToady> pmichaud: I don't know where moritz_ got pge_tests from, but that's what I'm translating

[18:21] <pmichaud> if it came from the pugs repository, I suspect it's a bit out of date

[18:21] <[particle]> what does svn log say?

[18:21] <pmichaud> I can check in the rx_* files from parrot

[18:22] * [particle] updates his pugs wc

[18:23] <pmichaud> oh, never mind -- the version I'm looking at now looks okay

[18:23] <TimToady> *nod*

[18:29] *** Myoma joined
[18:46] *** meppl left
[18:48] <moritz_> yes, it was the freshly imported pge tests (sorry, should have made that clearer)

[18:50] *** ludan joined
[18:51] *** Lichtkind left
[18:53] <TimToady> heh, /:s[]foo/ is no longer legal

[18:55] <pmichaud> what is it now?

[18:55] <TimToady> [] is not legal rx since it's null inside

[18:55] <pmichaud> (I've been through too many syntax changes to remember accurately :-)

[18:56] <TimToady> well, :s::foo is the next workaround in the tests

[18:56] <pmichaud> ah, yes... at one time  :s[]   was meant to be similar to :s()

[18:56] <TimToady> but I just changed that one to :s foo since it wasn't actually caring about the ws

[18:56] <TimToady> bug :s() is presumably false

[18:57] <moritz_> pmichaud: if you implement Object.defined in trunk I can push some test changes that fix is ($stuff, undef,...)

[18:57] <TimToady> *but

[18:57] <pmichaud> moritz_: doing that now.  I'm merging the failthrow branch back into trunk, and then I can easily do an Object.defined

[18:57] <moritz_> pmichaud: ok

[18:57] <TimToady> yow, :perl5 as an internal modifier

[18:58] *** silug left
[18:58] <TimToady> maybe I'll end up with an entire P5 grammar embedded in STD  :)

[18:58] <pmichaud> I don't think that PGE ever implemented :perl5 

[18:58] <pmichaud> I think we just skip it

[18:58] <TimToady> STD gets upset when it sees things like \z

[18:59] <TimToady> well, it was \Q in this case

[18:59] * ruoso have sketched some notes about "map" in http://www.perlfoundation.org/perl6/index.cgi?smop_map_operator ... and appreciate very much any comment...

[18:59] <lambdabot> Title: SMOP map operator / Perl 6

[18:59] <rakudo_svn> r30797 | pmichaud++ | [rakudo]:  Merge failthrow branch back into trunk.

[18:59] *** yahooooo joined
[19:00] <TimToady> funny it accepted \A, but I guess that's "not an alarm character" o_O

[19:01] <pmichaud> ...nothing to be alarmed about.  :-)

[19:01] *** ludan left
[19:01] <TimToady> well, except that we should probably catch \A and warn about obsolete P5isms

[19:01] *** barney left
[19:02] <TimToady> (in the absence of :P5, of course)

[19:02] <TimToady> well, I know how to implement :P5, I just don't wanna  :)

[19:02] <PerlJam> it's weird that we're parsing parts of a some other language just so we can warn.

[19:03] <moritz_> otoh it feels bad to reserve all these nice control sequences just to catch p5isms

[19:03] <TimToady> could warn only if there's a subsequent \z

[19:03] <TimToady> though they don't always occur together

[19:04] <TimToady> but the \a match is relatively useless in any case

[19:04] <TimToady> and the \A not-a-bell match is even uselesser

[19:05] <moritz_> aye

[19:05] <TimToady> so I'll just remove \A as a P6ism, I think

[19:07] <pmichaud> +1

[19:08] <pmichaud> perhaps get rid of \a also?

[19:08] <ruoso> TimToady, could you please, when you have some free time, take a look at the wiki page I just posted above about map? I should get to implement it in the weekend, so it would be nice to have some sanity checking on it... ;)

[19:09] * PerlJam wonders how many times people have used 

[19:09] <PerlJam> (I can't recall a single time I've used it)

[19:09] * ruoso cannot remember what  is...

[19:09] <pmichaud> I've used it a couple of times in strings, but I don't think I ever used it in a regex

[19:16] <PerlJam> ruoso: and   map { $^a + $^b } @stuff  falls under the lazy slice rubric?

[19:17] <ruoso> PerlJam, I forgot to mention that map will consume as many items of the .arity of the block signature...

[19:18] *** yahooooo left
[19:18] <ruoso> PerlJam, but this specific example will take a iterator for @stuff in item context, and consume twice for each call to the block

[19:19] <pmichaud> that's what rakudo's map is currently doing.

[19:19] <ruoso> pmichaud, is rakudo using iterators already?

[19:19] <ruoso> or you mean just by using two items from the list as arguments?

[19:21] <pmichaud> rakudo doesn't make a strong distinction between lists and iterators

[19:21] <ruoso> but it isn't implementing lazyness in map yet, right?

[19:21] <pmichaud> no, but that's because we don't have a good gather/take model yet

[19:22] <pmichaud> and we don't really have lazy lists yet

[19:22] <ruoso> pmichaud, in smop map lazyness won't be implemented in terms of gather/take...

[19:22] <ruoso> using iterators makes that easier

[19:22] <ruoso> pmichaud, have you seen the notes on the wiki page I've posted above?

[19:22] <pmichaud> not yet -- been busy trying to get some stuff into rakudo for moritz

[19:22] <pmichaud> and I have to go pick up kids in about 3 mins

[19:23] <ruoso> ok... but try to take a look at it later... it should help you in rakudo...

[19:24] <pmichaud> looking now.... but conceptually I don't see how Iterator differs significantly from List

[19:24] <pmichaud> that is, if Iterator is a class.  I could see List implementing an Iterator role, however.

[19:24] <ruoso> pmichaud, that would mean that the state of the iterator would be stored in the List?

[19:25] <pmichaud> no, it's simply that when we ask a List for an iterator, it returns a clone of itself.

[19:26] <ruoso> oh... ok... 

[19:26] <pmichaud> unless, of course, the intention of the spec is that modifying a List also modifies any previously created iterators, in which case I'll have to rethink that

[19:26] *** TJCRI left
[19:27] <ruoso> pmichaud, that's indeed an important point..

[19:27] <pmichaud> I haven't seen or heard any clear examples one way or the other

[19:27] <pmichaud> but it's a question of:

[19:27] <pmichaud> my @a = 1..5;   for @a { .say;  @a = (); }

[19:28] <pmichaud> ...what gets output?

[19:28] <ruoso> that's something spec related...

[19:28] <pmichaud> exactly.  I haven't seen it clearly laid out anywhere.

[19:28] <ruoso> I mean... both ways could be valid...

[19:28] <pmichaud> and the choice will decide the implementation of iterators in Rakudo :-)

[19:28] <ruoso> pmichaud, but wait...

[19:28] <ruoso> this example is not precise...

[19:29] <ruoso> because you're replacing the list entirely

[19:29] <ruoso> my @a = 1..5; for @a { .say; @a[3] = 1 }

[19:29] <ruoso> that should be a better example

[19:29] <pmichaud> sure, that's another possibility

[19:30] <ruoso> pugs: my @a = 1..5; for @a { .say; @a[3] = 1 }

[19:30] <p6eval> pugs: OUTPUT[1␤2␤3␤1␤5␤]

[19:30] <ruoso> that actually looks natural to me...

[19:30] <pmichaud> pugs:  my @a = 1..5; for @a { .say; @a = (); }

[19:30] <p6eval> pugs: OUTPUT[1␤2␤3␤4␤5␤]

[19:31] <ruoso> the iterator points to the list which is no longer stored in the variable @a

[19:31] <pmichaud> then why did @a[3] = 1;   modify the iterator?

[19:31] <ruoso> it didn't

[19:31] <ruoso> it modified the list

[19:31] <pmichaud> pugs:  my @a = 1..5; for @a, 6 { .say; @a[3] = 1; }

[19:31] <ruoso> as for is lazy...

[19:31] <p6eval> pugs: OUTPUT[1 2 3 4 5␤6␤]

[19:32] <pmichaud> pugs:  my @a = 1..5; for (@a, 6 ){ .say; @a[3] = 1; }

[19:32] <p6eval> pugs: OUTPUT[*** ␤    Unexpected ";"␤    expecting term postfix, operator or "}"␤    at /tmp/cO9OOho02P line 1, column 33␤]

[19:32] <pmichaud> pugs:  my @a = 1..5; for (@a, 6) { .say; @a[3] = 1; }

[19:32] <p6eval> pugs: OUTPUT[1 2 3 4 5␤6␤]

[19:32] <Myoma> pugs:  my @a = 1..5; for @a, @a, 6 { .say; @a[3] = 1; }

[19:32] <p6eval> pugs: OUTPUT[1 2 3 4 5␤1 2 3 1 5␤6␤]

[19:32] <pmichaud> those all look wrongish to me.

[19:33] <ruoso> pmichaud, @a,6 expanded the array at that time... not lazily

[19:33] <pmichaud> no, it stringified @a

[19:33] <pmichaud> i.e.,   @a,6 was treated as a list with two elements

[19:33] <ruoso> ah..ok

[19:33] <ruoso> yeah...

[19:33] <ruoso> that's simply wrong

[19:34] <pmichaud> anyway, the question is whether the iterator takes a reference to the list (and modifications to the list modify what the iterator sees) or if it is a snapshot of the list at the time of creation

[19:34] <pmichaud> and with that I have to run.

[19:34] <ruoso> indeed... 

[19:34] <rakudo_svn> r30799 | pmichaud++ | [rakudo]:  Initial implementation of .defined for Object.

[19:34] <ruoso> however, "snapshot" doesn't seem to fit well with lazy lists 

[19:35] <pmichaud> the snapshot can itself be lazy

[19:35] <pmichaud> it doesn't require eagerness

[19:35] <PerlJam> but the other way seems action-at-a-distancey

[19:35] <pmichaud> if I say   my @b = (@a, 1..5, 8..10);    @b can still be lazy with respect to @a

[19:35] <pmichaud> but changes to @a shouldn't cause @b to change

[19:36] <pmichaud> I'm late -- bbl

[19:36] <ruoso> pmichaud, I can't really see how to make snapshots of a network flow... (considering a network flow can be seen as a list)

[19:36] <ruoso> (which <== implies)

[19:37] <ruoso> pmichaud, and that should apply to database-backed lists as welll

[19:38] <ruoso> pmichaud, my @b = (@a, 1..5, 8..10) can only be lazy if you have COW...

[19:39] <ruoso> pmichaud, which is not always possible...

[19:42] <ruoso> PerlJam, by "other way" you mean which way? ;)

[19:43] *** Auzon joined
[20:00] *** riffraff joined
[20:04] <pmichaud> anyway, I can argue it either way, so it probably needs clarification from p6l

[20:04] <pmichaud> (back, btw)

[20:05] <pmichaud> moritz_: Object.defined is now available

[20:05] <pmichaud> it might have some bugs... but that's what tests are for :-)

[20:11] *** jan left
[20:11] *** jan joined
[20:12] *** jan left
[20:13] *** jan_ joined
[20:32] *** dduncan joined
[20:33] <pugs_svn> r22161 | moritz++ | [t/spec] correct test wrt undef

[20:35] <pasteling> "moritz_" at 89.13.234.179 pasted "pmichaud: those tests fail wrt .defined" (37 lines, 2K) at http://sial.org/pbot/32095

[20:35] <moritz_> pmichaud: see paste

[20:36] * moritz_ goes to bed now

[20:36] *** Chillance joined
[20:36] <pmichaud> looking

[20:36] <pmichaud> moritz_: yes, there's a problem with uninitialized scalars

[20:36] <pmichaud> I'll need jonathan to fix it

[20:36] <pmichaud> or to suggest ways to fix it

[20:40] *** silug joined
[20:40] *** ruoso left
[20:42] *** meppl joined
[20:43] *** dduncan left
[20:45] *** yahooooo joined
[20:49] *** jferrero joined
[21:07] *** riffraff left
[21:07] *** yahooooo left
[21:13] *** iblechbot_ joined
[21:17] *** yahooooo joined
[21:23] <pugs_svn> r22162 | lwall++ | [STD] bugs found by rx.t

[21:23] <pugs_svn> r22162 | lwall++ | [rx.t] bugs found by STD

[21:27] *** iblechbot left
[21:28] <pugs_svn> r22163 | lwall++ | [pge-tests] no longer needed but moritz++ anyway

[21:31] *** _Chillance_ joined
[21:32] <pugs_svn> r22164 | lwall++ | [rx.t] forgot to use Test and plan

[21:33] <Auzon> TimToady++ # making bugs cancel each other out

[21:48] *** Chillance left
[21:52] *** araujo left
[22:04] *** araujo joined
[22:20] *** iblechbot_ left
[22:33] <s1n> pmichaud: any work done to support smoke with those test results?

[22:34] <s1n> moritz_: unless you want me to make a bug, add S02-builtin_data_types/bool.t to spectest_regression

[22:36] <pugs_svn> r22165 | Auzon++ | [spectest] tests for regexes and closures in .trans. Also one test to ensure that y/// is gone

[22:38] <Auzon> Also, a ++ for whoever added the PGE tests. I assume that was the huge jump in tests today :)

[22:44] *** Exodist left
[23:04] <s1n> Auzon: i think that was moritz

[23:04] <s1n> http://www.parrotvm.org/svn/pugs/log/t?limit=100;rev=22165

[23:04] <lambdabot> Title: log: /pugs/t (Rev: HEAD, via SVN::Web)

[23:05] <Auzon> moritz_++ then :)

[23:10] *** rindolf left
[23:23] *** Auzon left
[23:29] *** kanru joined
[23:44] *** kanru left
