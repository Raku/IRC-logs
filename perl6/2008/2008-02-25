[00:00] <mncharity> eg, you can't in general have functions pass arguments to other functions, and almost never 3 deep, because you have to quote/escape each level in a content dependent manner.

[00:00] <mncharity> *shudder*

[00:01] <FurnaceBoy> eek

[00:01] <mncharity> that's why there's lots of   <begin foo>  do stuff <end foo>   rather than <foo(stuff)>

[00:06] <mncharity> FurnaceBoy: re twiki, yeah, I ran one for parrot development years ago.  Never caught on, and went away when it was used as a security hole.  But having a real language provided lots of opportunity for "domain specific" value-added, like wiki-based pod editing.  

[00:06] *** loer left
[00:11] <mncharity> what's something quick and simple to do...  been thinking of a "sixcmd", which takes env vars PUGS_ROOT and PARROT_ROOT, so I can just say "sixcmd pugs ..."  or "sixcmd rakudo..." or "sixcmd kp6...", anywhere, and not have to worry about what directory I have to be in for each one to run (they can't be installed).

[00:13] <FurnaceBoy> twiki didn't go anywhere :)

[00:13] <FurnaceBoy> but its security status is a little under a cloud.

[00:13] <FurnaceBoy> prefer its markup to MediaWiki

[00:14] <FurnaceBoy> i mean, it's still around.

[00:14] <mncharity> at the time, there wasn't even a security mailing list.  after lots of sites were compromised, there was "hmm, maybe we should start a list for admins".

[00:16] <mncharity> re markup, what's really sad is they are all so similar, one could have a "I want to edit pages in X-like markup" as a preferences setting.

[00:17] <FurnaceBoy> yes.

[00:18] <mncharity> a feature request for the eventual 'wiki written in p6'. :)

[00:18] <FurnaceBoy> similar - and every one is imperfect.

[00:18] *** xinming_ left
[00:18] <FurnaceBoy> switchable markups is a very good idea

[00:18] <FurnaceBoy> because there is no sign that people are evolving "the perfect markup", 

[00:18] <FurnaceBoy> or if they are, it's very hard to tell.

[00:18] <mncharity> lol

[00:18] <FurnaceBoy> e.g. Redmine copied Trac, but made some things better and some things *worse*.

[00:18] <FurnaceBoy> that was depressing.

[00:19] <mncharity>  /me googles redmine

[00:19] <FurnaceBoy> http://redmine.org

[00:19] <lambdabot> Title: Redmine - Overview - Redmine

[00:21] *** ruoso joined
[00:21] <mncharity> ooo, if that could grow into an alternative to gforge (the maintaining of which is apparently very scary), that would be quite valuable.

[00:22] <FurnaceBoy> Trac is so reliable for us that I am loath to switch tools or even upgrade it. :-)

[00:24] <FurnaceBoy> plus there are little things in redmine's wiki markup that are going to annoy me unbearably

[00:25] <mncharity> re reliable/upgrade, :)

[00:26] <FurnaceBoy> i guess that also implies that we don't find it *too* lacking.

[00:26] <FurnaceBoy> we use the Svn hook to annotate tickets. awesome feature, combined with Trac mail notifications.

[00:26] <mncharity> 'Svn hook to annotate tickets'?

[00:27] <FurnaceBoy> commit messages get appended to tickets.

[00:27] <mncharity> by mentioning a ticket number in the message?

[00:27] <FurnaceBoy> we also have an svnbot in our jabber room inspired by the one here

[00:27] <FurnaceBoy> yes.

[00:28] <FurnaceBoy> 'blah blah refs #333 and resolves #666'

[00:28] *** Klovn joined
[00:29] <mncharity> re svnbot, :)  yes, nice infrastructure here.  

[00:32] *** gilmrex joined
[00:32] <mncharity> end of day.  g'night all &

[00:32] *** gilmrex left
[00:32] *** mncharity left
[00:32] *** gilmrex joined
[00:33] *** ruoso left
[00:33] *** gilmrex left
[00:34] *** gilmrex joined
[00:35] *** gilmrex is now known as yoloeg

[00:35] *** yoloeg left
[00:37] *** gilmrex joined
[00:38] *** gilmrex is now known as yogels

[00:38] *** yogels left
[00:40] <pasteling> "Klovn" at 77.46.173.220 pasted "I need help with last line. The thing is: can I put Value of POSTDATA between ""(double-quotes) instead of ''(single-quotes), cause I need to include variables?" (14 lines, 695B) at http://sial.org/pbot/30340

[00:40] *** FurnaceBoy left
[00:41] *** nipotaway is now known as nipotan

[00:41] *** gilmrex joined
[00:42] *** gilmrex is now known as lemnix

[00:42] *** lemnix left
[00:42] *** FurnaceBoy joined
[00:46] *** Klovn left
[00:50] *** devogon left
[00:55] *** leminic joined
[01:23] *** LimbicRegion joined
[01:23] *** LimbicRegion left
[01:25] *** justatheory joined
[01:30] *** lyokato joined
[01:38] *** Limbic_Region left
[01:40] *** wtgee joined
[01:41] *** wtgee left
[01:43] *** wtgee joined
[01:45] *** Limbic_Region joined
[02:11] *** wknight8111 joined
[02:18] *** awwaiid joined
[02:22] *** agentzh left
[02:27] *** cnhackTNT joined
[02:33] *** wtgee left
[02:37] *** wtgee joined
[02:37] *** wknight8111 left
[02:52] *** agentzh joined
[02:53] *** wtgee left
[03:11] *** wtgee joined
[03:15] *** wknight8111 joined
[03:18] *** cnhackTNT left
[03:29] *** jjore joined
[03:30] *** jjore left
[03:31] *** wtgee left
[03:34] *** wtgee joined
[03:42] *** wtgee left
[03:47] *** FurnaceBoy left
[03:49] *** Auzon joined
[03:49] *** wtgee joined
[03:59] *** Limbic_Region left
[04:00] *** cmarcelo_ joined
[04:00] *** cmarcelo left
[04:01] *** julian_ joined
[04:02] *** cmarcelo_ is now known as cmarcelo

[04:04] *** julian_ left
[04:04] *** julian_ joined
[04:04] *** julian_ left
[04:16] *** JDlugosz joined
[04:16] <JDlugosz> Hello world!

[04:16] <Auzon> Hi

[04:17] <JDlugosz> I aim to learn Perl6.

[04:17] <JDlugosz> This is my first time to use IRC.

[04:17] *** RayMagini left
[04:18] <Auzon> Perl 6 is a moving target somewhat

[04:18] <pmichaud> although it's moving less than it once did :-)

[04:18] <spinclad> you *will* like it.

[04:18] <JDlugosz> Am I missing something?  I figured this place is always hoppin, but I only see a couple lines of chat.

[04:18] <pmichaud> certainly I don't expect the basics to change much more

[04:19] <JDlugosz> Anyway... I installed Pugs on Windows Vista.  I'm looking for some answers.

[04:19] <TimToady> well, most of the daytime is spread over the Pacific Ocean at the moment :)

[04:19] <spinclad> it's been pretty quiet today (typical weekend lately)

[04:19] <JDlugosz> Daylight?  Hackers come out at night.

[04:19] <Auzon> pssssh, daytime

[04:19] <pmichaud> 05:18 here.

[04:19] <pmichaud> although I'll have a lot more daytime than usual today.

[04:20] <JDlugosz> 10:18 PM here in Dallas.

[04:20] *** RayMagini joined
[04:20] <spinclad> 23:19:15

[04:20] <pmichaud> heh.  24 hours from now, my local time will be the same as JDlugosz'

[04:20] <JDlugosz> So, Pugs on Vista.  Anyone else here a Windows user?

[04:21] <Auzon> Not here

[04:21] *** julian_ joined
[04:21] <pmichaud> I use Windows for Photoshop and TurboTax, but that's about it.

[04:21] <spinclad> [particle1 is

[04:22] * pmichaud wonders if it's too early to find some breakfast here

[04:22] <JDlugosz> My Vista-specific question concerns UTF-8.  I set the Console to utf-8, but Pugs itself still acts wrong.  For example, it chokes on the double angle quotes.

[04:22] <Auzon> does it work fine in a separate file?

[04:22] <spinclad> chokes how?

[04:22] <JDlugosz> It works fine (assumes UTF-8) for reading files, but for the interactive mode...

[04:23] <pmichaud> I wonder if Rakudo suffers the same issue.  Actually, I'm not sure that Rakudo is even reading files as utf8 yet

[04:23] <Auzon> I'd suggest trying it in Cygwin's bash or something

[04:23] <pmichaud> maybe that'll be a project for the plane -- get the <<'s to work

[04:23] <spinclad> i would wonder if the console is full unicode aware, but i'd be showing my bias

[04:24] *** julian_ left
[04:24] *** julian_ joined
[04:24] <Auzon> spinclad: I wonder the same thing

[04:24] <Auzon> You could try it by printing some Unicode (Perl 5 would be a good baseline)

[04:24] <JDlugosz> For details, see <http://www.perlmonks.org/?node_id=669807>.

[04:25] <JDlugosz> I'll be on a plane this weekend, but no power!! 18 hours with no Jolt Cola nor computer.  I'll go insane.

[04:25] <pmichaud> for the answer to your other question, it's "\x[00ab]"

[04:25] <JDlugosz> Auzon: yes, a file only works in UTF-8.

[04:25] <pmichaud> (square brackets instead of curlies)

[04:26] *** wknight8111 left
[04:26] <Auzon> JDlugosz: does printing UTF8 work?

[04:26] <JDlugosz> spinclad: I set the console to UTF8 using the proper command.  I can paste characters and they look right.

[04:27] <JDlugosz> pmichaud:  many thanks.

[04:27] *** julian_ left
[04:28] <pmichaud> 75degF in Dallas!  Is winter over already...?

[04:28] <pmichaud> (tomorrow's high)

[04:28] <JDlugosz> Well, Pugs writes the character as two unprintable control characters.  

[04:29] <JDlugosz> pmichaud: why did they change to square brackets?

[04:29] <pmichaud> curlies in Perl 6 mean "closure"

[04:29] <pmichaud> thus:   say "You have { $base + $extra / 2 } units."

[04:30] <pmichaud> for consistency, curlies in Perl 6 always mean "closure", which means we don't want to be using them for \x

[04:30] <JDlugosz> Auzon: I just tried, and it did not print correctly.  I got two unprintable characters.

[04:30] *** julian_ joined
[04:30] <JDlugosz> pmichaud: I see.  I did notice the general use of curlies there, which is nice.

[04:31] *** julian_ left
[04:31] <JDlugosz> In the console window, I used the command "chcp 65001" and set the suitable font.  Perhaps there is something else that is needed?

[04:31] *** julian_ joined
[04:32] *** julian_ left
[04:32] <spinclad> JDlugosz: (no idea.  the windows i use are X.)

[04:32] <JDlugosz> Hopefully someone will see this in the logs.  If nobody knows, I can fiddle with the Windows console end of things, and meet up with someone who knows how the stdio streams in Pugs are set up.

[04:33] <JDlugosz> OK, I have another question.

[04:34] <JDlugosz> Is there a list of what works and what doesn't yet, in Pugs?

[04:34] <spinclad> the tests it passes; you could check the smoke site.

[04:34] <JDlugosz> For example, I tried a macro, and got an error.  But I thought some things already were macros, so how can they not work?  Is it my mistake or are macros unsupported?

[04:35] <pmichaud> I don't know that there's a list of things that work/don't work in pugs

[04:35] <TimToady> no macros yet

[04:36] <pmichaud> the best way to find out is to often look at the tests and see if there's a test for it

[04:36] <pmichaud> if there's no test, it probably doesn't work

[04:36] <pmichaud> if there is a test, then you can see if the test works

[04:36] <spinclad> t/macros/*.t: 6 files

[04:36] <TimToady> macros were planned to be the last thing implemented in pugs

[04:36] *** xinming joined
[04:37] <TimToady> after MO, which audreyt didn't get to quite

[04:37] *** penk joined
[04:37] <JDlugosz> Hmm, I found smoke.pugscode.org, but the reports are all quite old.

[04:37] *** julian_ joined
[04:38] <Auzon> http://feather.perl6.nl/syn/

[04:38] <Auzon> Try that

[04:38] <JDlugosz> OK, where are these *.t files?

[04:38] <spinclad> could likely use some love

[04:38] <pmichaud> *.t is in the t/ directory

[04:39] <TimToady> most of the active development is on other implementations than pugs these days

[04:39] <JDlugosz> Tim: after what?  M0?

[04:39] <TimToady> but it was very useful for developing tests

[04:39] <spinclad> purl: MO?

[04:40] <TimToady> Metaobjects

[04:40] *** snooper joined
[04:40] <JDlugosz> Auzon: that just has specifications.  Can you be more specific re feather?

[04:41] <Auzon> look in them

[04:41] <JDlugosz> Tim: then is there some implementation you'd suggest over Pugs?

[04:41] <Auzon> they have the test code crossrefed

[04:41] <TimToady> depends on what your interests are

[04:42] <TimToady> perl6: say 42+1

[04:42] <exp_evalbot> kp6: OUTPUT[43␤]

[04:42] <exp_evalbot> ..pugs: OUTPUT[43␤]

[04:42] <exp_evalbot> ..rakudo: OUTPUT[43␤]

[04:43] <spinclad> purl, MO is meta-objects, the self-descriptive aspect of a class and object system

[04:43] <TimToady> no purl here

[04:43] <JDlugosz> pmichaud: I guess they didn't include that in the binary windows distribution.  I got tons of junk, but no t directory.

[04:43] <Auzon> I like the perl6 mode :

[04:43] <spinclad> i knew that, and i still had no idea.

[04:43] <Auzon> :)

[04:44] <JDlugosz> Tim: rakudo is parrot's version?

[04:44] <TimToady> nod

[04:44] <spinclad> so you don't have an svn checkout then

[04:44] <TimToady> (sorry, a bit distracted at the moment...)

[04:44] <TimToady> svn co is the easiest

[04:44] <pmichaud> JDlugosz: ah, that's possible.  You can also see the tests at http://svn.pugscode.org/pugs/t

[04:45] <JDlugosz> My interest is in learning, which includes interactive trying, and writing programs for my own use.

[04:45] <Auzon> perl6: {use v5; print "{1+1} # not 2";}

[04:45] <TimToady> at the moment that depends on whether you're more interested in low-level stuff or high-levle

[04:45] <exp_evalbot> kp6: OUTPUT[{1+1} # not 2]

[04:45] <exp_evalbot> ..pugs: RESULT[1.0]

[04:45] <exp_evalbot> ..rakudo: OUTPUT[Error: file cannot be read: v5.pm␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 158 (src/PCT/HLLCompiler.pir:103)␤called from Sub 'require' pc 5728 (src/gen_builtins.pir:4051)␤called from Sub 'use' pc 5694 (src/gen_builtins.pir:4032)␤called from Sub '_block15' pc 57

[04:45] <exp_evalbot> ..(EVAL_10:31)␤called from Sub '_block10' pc 27 (EVAL_10:15)␤called fr...

[04:45] <TimToady> pugs does more of the abstract stuff, rakudo more of the low-level

[04:46] <Auzon> kp6 got it right at least :)

[04:46] *** cmarcelo left
[04:46] <JDlugosz> For real programs, interoperability is good.  I need system functions, not just examining its own navel.  I saw in Audrey Tang's slides that pugs had that?

[04:46] <spinclad> not entirely right...

[04:46] <TimToady> another week or so there may be something based on STD as well  :)

[04:46] <TimToady> at least, I can currently parse 42+1 with STD...

[04:47] <JDlugosz> pmichaud:  thanks, I see that.

[04:47] <TimToady> pugs's system interactions are only adequate for simple tasks

[04:47] <spinclad> oh, wait

[04:47] <TimToady> but I doubt rakudo is much further along there

[04:47] <pmichaud> correct, rakudo doesn't have much in the way of system functions yet

[04:48] <TimToady> most of the implementations are treating that as peripheral to their primary boostrap route

[04:48] <pmichaud> just needs someone to write the appropriate objects and classes

[04:48] <TimToady> pugs lets you get at most of Perl across a bridge

[04:48] <TimToady> *Perl 5

[04:49] <TimToady> though I've found that's a little to flakey to run a parser with :)

[04:49] <TimToady> *too

[04:49] <JDlugosz> If it handles Perl5 modules, no problem.  There is lots of Windows stuff in CPAN, and the Win32 calling class.

[04:49] <JDlugosz> What is STD?

[04:49] *** pcbuetow left
[04:49] <TimToady> the standard Perl 6 grammar written in Perl 6

[04:49] <TimToady> under pugs repo

[04:49] <TimToady> in src/perl6/STD.pm

[04:49] <pmichaud> http://svn.pugscode.org/pugs/src/perl6/STD.pm

[04:50] <TimToady> I'm currently working on a chewing gum and bailing wire approach to translating that to Perl 5 and running it

[04:50] <pmichaud> it's a good idea to put on sunglasses before looking at it

[04:50] <TimToady> it's Perl, but it's not your father's Perl  :)

[04:51] <JDlugosz> OK, so what did you mean by "something based on STD", when discussing versions to run?

[04:51] <TimToady> it will look a lot more like yacc to you

[04:51] <TimToady> well, it's just a parser, so it would need a back end

[04:51] <TimToady> kp6 and STD are both retargetable on the back end

[04:51] <TimToady> sort of the inside out approach of parrot

[04:52] <TimToady> which is one target for many languages

[04:52] <TimToady> complementary approaches, we all hope

[04:52] <spinclad> both kp6 and rakudo are aiming their grammars towards STD

[04:52] <TimToady> yes, everyone is aiming there, but STD is aiming there faster :)

[04:53] <JDlugosz> What do you mean by rakudo is better at "low level" stuff?

[04:53] <TimToady> it can do that because it sets all its other sights very low

[04:53] <TimToady> parrot is about VM development

[04:53] <TimToady> so it has primarily been a bottom-up approach

[04:53] <pmichaud> well, I'm hoping that I can liberally steal from the STD parser for PGE :-)

[04:53] <TimToady> they had OO assembly language before they had higher level languages

[04:54] <TimToady> and the parts of HLL they implement so far tend to be the less abstract ones

[04:54] *** julian_ is now known as jjore

[04:54] <JDlugosz> So what kind of things work in rakudo that don't work in pugs?  I assume that arithmetic and such were all in there!

[04:54] <TimToady> if parrot comes to grief with respect to Perl 6, it'll be because it was originally designed just to run a better Perl 5

[04:54] <JDlugosz> What is PGE?

[04:55] <TimToady> Parrot Grammar Engine

[04:55] <pmichaud> PGE is the regex engine (parser engine) for Parrot

[04:55] <TimToady> pmichaud's baby

[04:55] <pmichaud> one of them, at any rate.

[04:55] <TimToady> that's one thing that parrot has had a better one of than pugs

[04:55] <TimToady> pugs never did manage to write its own regex engine

[04:55] <TimToady> and all of the ones it borrowed were flakey

[04:55] <pmichaud> pugs had the advantage of already having a parser library.  I didn't really have that for Parrot :-)

[04:55] <JDlugosz> So rakudo will be better at getting the grammar correct, for complex or baroke statements?

[04:56] <TimToady> well, the basic problem with pugs's grammar is that it was written in Haskell

[04:56] <pmichaud> rakudo doesn't really have hashes yet, and it still has a bit to do on list context

[04:56] <TimToady> which most perlfolx don't grok

[04:56] <pmichaud> many of the basic operators work, yes

[04:56] <TimToady> and the parser library isn't really something that was designed to parse Perl 6 the way it wants to be

[04:57] <JDlugosz> doesn't have hashes?  I don't follow.  I tried some simple examples.

[04:57] <pmichaud> rakudo doesn't understand      my %a = ( foo => 'bar' );

[04:57] <pmichaud> it does understand   %a<foo> = 'bar';

[04:57] <TimToady> pugs understands a lot of things, but it runs very slowly

[04:58] <JDlugosz> Oh, I thought you said pugs.

[04:58] <TimToady> and some of the things it understand wrong

[04:58] <TimToady> but it gets hashes

[04:58] <JDlugosz> It reminds me of C++ when I started.

[04:58] <TimToady> JDlugosz: btw, I just added .end .elems and .shape to S29 for you :)

[04:59] <TimToady> but haven't had a chance to respond on PM

[04:59] <JDlugosz> Thanks Tim.

[04:59] <spinclad> pugs also hasn't been tracking Perl 6 changes for the last year

[04:59] <pmichaud> well, I think I'm going to see if the breakfast buffet here is worthwhile.  If not, then I'll head off to the airport

[05:00] <TimToady> have a good flight back

[05:00] <JDlugosz> With all the talk contrasting pugs and parrot, and not any mention of the others, it seems like I should be using those two.

[05:00] <JDlugosz> I'm flying to Shanghi this weekend.  Coach, no laptop power.

[05:00] <pmichaud> well, you may be seeing the biases of the people present now

[05:00] <spinclad> those are the two solidest

[05:00] <TimToady> kp6 is also an interesting effort, much on par with parrot's nqp (not quite perl)

[05:00] <JDlugosz> What is kp6?

[05:00] <pmichaud> I don't know how far along kp6 is as far as Perl 6 execution

[05:00] <TimToady> kinda perl 6

[05:01] <TimToady> fglocks bootstrap on p5, basically

[05:01] <pmichaud> http://www.perlfoundation.org/perl6/index.cgi#implementations

[05:01] <JDlugosz> is pqp what you call parrot's implementation, or is that different from rakudo?

[05:01] <TimToady> recently one call smop was started that is looking to be bare metal in C

[05:01] <spinclad> npq?

[05:01] <TimToady> and hopes to be a back end for kp6 and STD

[05:01] <TimToady> not quite perl

[05:02] <TimToady> what rakudo is being bootstrapped in

[05:02] <pmichaud> nqp is a parrot tool for building stuff in parrot

[05:02] <pmichaud> but it's name says it all -- it's really "not quite perl"  :-)

[05:02] <JDlugosz> So... if people keep trying different approaches, will anyone ever finish one?

[05:02] <TimToady> smop

[05:02] <TimToady> smop's strength

[05:02] <Auzon> The idea is that we'll finish enough of them to have diversity :)

[05:02] <TimToady> is that it is trying to build in some fundamental OO abstractions

[05:02] <JDlugosz> Why does perl5 bootstrapping easier now that it was originally?

[05:02] <TimToady> right at the runloop level

[05:03] <TimToady> captures and signatures and such

[05:03] <pmichaud> (perl5 bootstrap)  well, one of the reasons is that it has other implementations (pugs, parrot) to borrow from

[05:03] <TimToady> that's an excellent question

[05:04] <pmichaud> also, the language specification has evolved quite a bit since the last time a perl6-on-perl5 implementation was attempted

[05:04] <pmichaud> and the newer language specs simplify a number of items

[05:04] <TimToady> mncharity is also working on a translation of STD to ruby

[05:04] <pmichaud> (while simultaneously making them more powerful)

[05:04] <TimToady> but basically we understand the semantics much better than we did a couple of years ago

[05:04] <TimToady> and which ones have an impedance match with Perl 5

[05:05] <TimToady> the STD to perl 5 translator hardly uses p5 regexen at all

[05:05] <TimToady> except for very low level matching

[05:05] <pmichaud> oooh, that sounds interesting

[05:05] <TimToady> attempts to use the built-in p5 regex to do parsing have come to grief

[05:05] <pmichaud> I'm eager to look at that

[05:06] <JDlugosz> So it is really a matter of implementing semantics, in whatever language, and you understand those semantics better.

[05:06] <TimToady> cd src/perl6; cheat STD.pm | gimme5 >STD5.pm

[05:06] * spinclad thinks he hears the sound of STD to nqp

[05:07] <TimToady> to bootstrap the parser, yes

[05:07] <TimToady> but there's a lot more to a complete implementation than a parser

[05:07] <TimToady> it's just the part I'm most interested in

[05:07] <pmichaud> however, a parser is a necessary requirement :-)

[05:07] <JDlugosz> perl6: say "test evalbot"

[05:07] <exp_evalbot> kp6: OUTPUT[test evalbot␤]

[05:07] <exp_evalbot> ..pugs: OUTPUT[test evalbot␤]

[05:07] <exp_evalbot> ..rakudo: OUTPUT[test evalbot␤]

[05:07] <TimToady> which is why the system functions and such are in such sad shape :)

[05:08] <pmichaud> TimToady: does gimme5 do the bulk of "creating the parser"?  cheat just fills in the {*} stubs?

[05:08] <JDlugosz> Are "system functions" standardized already?  I assume file I/O is pretty well defined.

[05:08] <TimToady> cheat mostly just treats roles as macros

[05:08] <TimToady> and also

[05:08] <TimToady> undoes the multis into straight calls

[05:08] <TimToady> using name mangling

[05:09] <pmichaud> okay, got it

[05:09] <TimToady> it's also originally used by metholate

[05:09] <pmichaud> JDlugosz: actually, I don't know that file I/O is pretty well defined yet

[05:09] <TimToady> originally cheat was enough to get pugs to parse STD

[05:09] <TimToady> but I've started moving some of the functionality into gimme5

[05:09] <TimToady> and likely cheat will go away at some point

[05:09] <pmichaud> excellent

[05:10] <TimToady> gimme5 is a complete hack, of course

[05:10] <TimToady> but all it has to do is spit out really good Perl 5 :0

[05:10] <TimToady> :) rahter

[05:10] <JDlugosz> Strangly enough, system stuff is something I have an interest in.

[05:10] <TimToady> it's low hanging fruit, for some definition

[05:10] <pmichaud> (gimme5 as hack)   that's okay, I just need something that gives the general idea of adding in the longest token matcher

[05:10] <TimToady> and if you have an interest in it, go for it

[05:10] <TimToady> that part is mostly does right now

[05:11] <JDlugosz> Right now, simply doing file I/O will go a long way.

[05:11] <TimToady> though a* b still doesn't add a's and b's tokens together right

[05:11] <pmichaud> file I/O in perl 6 was also a topic of a hallway conversation yesterday 

[05:11] <pmichaud> so it's not only low hanging fruit, but it may also be ripe

[05:11] <JDlugosz> I must go.  Thanks for the pointers.

[05:11] <TimToady> sure

[05:11] <Auzon> See you, JDlugosz

[05:12] <TimToady> if you want to change anything in the pugs repo

[05:12] <TimToady> just ask for a commit bit here

[05:12] * ewilhelm wonders where this hallway was

[05:12] <TimToady> fix tests, etc

[05:12] <pmichaud> ewilhelm: fosdem 2008

[05:12] <JDlugosz> Since I've never used svn, that will be a while et.

[05:12] <TimToady> it's pretty easy

[05:12] <JDlugosz> I'll be mostly off-line during my China trip.

[05:13] <pmichaud> JDlugosz: so, have we met?  I live in the Dallas area also (Plano)

[05:13] <TimToady> download a bunch of stuff to look at

[05:13] <TimToady> but don't expect it to look the same when you get back :)

[05:13] <JDlugosz> pmichaud: I don't know.  I used to live in Plano, now Allen.  Maybe some Perlmongers meeting once.

[05:13] <pmichaud> possibly.  DFW.pm hasn't been very active lately.  :-|

[05:14] <TimToady> anyway, appreciate your interest

[05:14] <pmichaud> okay, time for me to check on breakfast -- bbiab

[05:14] *** JDlugosz left
[05:16] *** wtgee left
[05:18] *** jjore left
[05:18] *** jjore joined
[05:19] *** leminic left
[05:19] <pmichaud> looks like I'll take my chances at the airport

[05:19] <pmichaud> see you all later (possibly _much_ later)

[05:20] <Auzon> bye

[05:30] <obra> hello from texas, #perl6

[05:30] <TimToady> howdy doo

[05:32] * obra grins. I'm working to implement 'conservation of perl6-related people in texas'

[05:33] <Tene> I was also just considering looking into adding file IO stuff to rakudo.

[05:34] <Tene> I was in texas a month ago.

[05:36] *** monomorph joined
[05:37] <obra>   I'm here for all of 36 hours

[05:39] <TimToady> good luck in your conservation efforts

[05:39] <obra> Thanks much :)

[05:39] <TimToady> sounds a bit...euphamistic...

[05:40] <Auzon> Are Perl 6 people a scarce resource in Texas?

[05:40] <TimToady> is there somewhere they aren't scarce?

[05:41] <Auzon> Touche. Maybe I can find something to hack on someday...

[05:41] <TimToady> *euphemistic

[05:42] <jjore> Isn't the internet in Texas? You've got all the Perl 6 people in your living room already?

[05:47] *** njbartlett left
[05:47] *** snooper left
[05:52] *** araujo left
[06:02] *** monomorph left
[06:07] *** monomorph joined
[06:11] *** justatheory left
[06:25] *** DarkWolf84 left
[06:27] *** devogon joined
[07:08] *** monomorph left
[07:11] *** zamolxes joined
[07:25] *** jjore-w left
[07:27] *** cnhackTNT joined
[07:28] *** kanru joined
[07:31] *** alc joined
[07:49] *** kanru left
[07:54] *** kst left
[07:58] *** IllvilJa joined
[08:10] *** iblechbot joined
[08:17] *** ludan left
[08:17] *** Aankhen`` joined
[08:19] *** garo left
[08:25] *** araujo joined
[08:45] *** njbartlett joined
[08:53] *** cognominal_ left
[09:04] *** dalek left
[09:04] *** cognominal_ joined
[09:04] *** dalek joined
[09:09] *** Maddingue left
[09:09] *** Maddingue joined
[09:11] *** alc left
[09:14] *** njbartlett left
[09:15] *** alc joined
[09:23] *** ruoso joined
[09:37] *** Jamtech joined
[09:44] *** lambdabot left
[09:49] <ruoso> @tell mncharity I'm not sure I understood what you've said... SMOP still doesn't have anything related to AST, it will need a limited compiler that translates the code in src-s1p to C

[09:49] <ruoso> ops, no lambdabot...

[09:51] *** sri_work joined
[09:54] *** cnhackTNT left
[09:57] *** meteorjay joined
[09:59] *** simcop2387 left
[10:01] *** simcop2387 joined
[10:07] *** Jamtech left
[10:19] *** ebassi joined
[10:22] *** kanru joined
[10:23] *** alc left
[10:47] *** njbartlett joined
[11:06] *** wknight8111 joined
[11:06] *** cookys left
[11:06] *** cookys joined
[11:08] *** cookys left
[11:08] *** orafu left
[11:08] *** cookys joined
[11:10] *** cookys left
[11:11] *** cookys joined
[11:11] *** njbartlett left
[11:14] *** IllvilJa left
[11:31] *** broquaint left
[11:48] *** lyokato left
[11:52] *** wknight8111 left
[11:53] *** penk left
[11:58] *** hanekomu joined
[12:04] *** ntgrl joined
[12:04] *** integral left
[12:05] *** ntgrl is now known as integral

[12:12] *** iblechbot left
[12:34] *** njbartlett joined
[12:35] *** wknight8111 joined
[12:40] *** mncharity joined
[12:43] <ruoso> mncharity, hi

[12:43] <ruoso> lambdabot would have messages for you

[12:46] <mncharity> I just saw. :)

[12:48] <mncharity> the idea is,

[12:48] <mncharity> hmm, maybe I should look at smop first... bbiam

[12:50] *** cmarcelo joined
[12:50] <ruoso> later &

[12:50] <ruoso> mncharity, I'll backlog when I get back

[12:51] *** ruoso left
[12:56] <mncharity> interesting.  basically, when you would find it useful to have the parse p6 and compile to s1p/sm0p, i'd be happy to collaborate.

[12:56] *** orafu joined
[12:59] *** njbartlett left
[13:07] *** nipotan is now known as nipotaway

[13:09] *** wknight8111 left
[13:12] <pugs_svnbot> r19998 | putter++ | [redsix] Separate "done and put to bed" Spring 2006 work, from current development.

[13:12] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19998

[13:13] *** ruz left
[13:15] *** ruz joined
[13:25] *** lumi left
[13:25] <pugs_svnbot> r19999 | putter++ | [redsix] Removed r19948's recent for() loop kludge.  for() loops simply aren't working at the moment.

[13:25] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19999

[13:26] <mncharity> Who wants the rollover commit? :)

[13:36] *** Lorn joined
[13:41] *** pbuetow joined
[13:51] *** lumi joined
[13:52] *** alester left
[13:52] *** Lorn_ left
[13:54] *** monomorph joined
[14:00] *** falesca left
[14:37] *** lambdabot joined
[14:59] *** TJCRI joined
[15:01] *** alc joined
[15:02] *** agemo left
[15:12] *** alester joined
[15:15] *** cookys left
[15:16] *** cookys joined
[15:19] *** cookys left
[15:19] *** cookys joined
[15:21] *** kanru left
[15:21] <mncharity> $ svn log -r1

[15:21] <mncharity> r1 | autrijus | 2005-02-06 11:52:06 -0500 (Sun, 06 Feb 2005) | 1 line

[15:21] <mncharity> * Initial checkin.

[15:22] <pasteling> "putter" at 76.24.29.201 pasted "svn log -v -r1" (29 lines, 722B) at http://sial.org/pbot/30343

[15:25] *** ruoso joined
[15:29] <pugs_svnbot> r20000 | putter++ | README: Updated copyright line.

[15:29] <pugs_svnbot> r20000 | putter++ | Pugs is Copyright 2005-2008, The Pugs Contributors.

[15:29] <pugs_svnbot> r20000 | putter++ | Celebrating 3 years and 20,000 commits of pugs.

[15:29] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20000

[15:29] <lambdabot> Title: Changeset 20000 - Pugs - Trac

[15:31] *** meteorjay left
[15:31] *** meteorjay joined
[15:32] <ruoso> mncharity, I think it may already be usefull to experiment on the conversion from s1p to C

[15:33] <mncharity> I was thinking of the conversion from p6 to s1p. :)

[15:33] <ruoso> s1p is already p6

[15:33] <mncharity> ooo, missed that.

[15:34] *** meppl joined
[15:35] *** chris2 joined
[15:39] <mncharity> http://www.perlfoundation.org/perl6/index.cgi?smop_oo_api "transversal to Perl 6" *universal (not sure where my pf.org password is:/)

[15:39] <lambdabot> Title: SMOP OO API / Perl 6

[15:39] *** Auzon left
[15:41] *** xdg joined
[15:44] *** bphillip1 joined
[15:46] <mncharity> hmm.  i'm still fuzzy.  there sm0p is running and has tests.  s1p is currently just spec?  and the need is for a s1p-dialect p6 to sm0p compiler?

[15:47] <cognominal_> slp?

[15:47] <rakudo_svn> r26057 | jonathan++ | [rakudo] Implement indirect method calls of forms $x.'foo'() and $x.$foo().

[15:50] *** [particle1 is now known as [particle]

[15:50] <pugs_svnbot> r20001 | particle++ | [spec] migrate some S12 methods tests

[15:50] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20001

[15:50] <lambdabot> Title: Changeset 20001 - Pugs - Trac

[15:52] <mncharity> cognominal_: http://www.perlfoundation.org/perl6/index.cgi?smop_s1p_language

[15:52] <lambdabot> Title: SMOP s1p Language / Perl 6

[15:52] <pugs_svnbot> r20002 | putter++ | misc/winter_jig/rx/sixrx: Created.  Script for easy command-line access to regex engines.  Currently only Pugs::Compiler::Rule.

[15:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20002

[15:52] <lambdabot> Title: Changeset 20002 - Pugs - Trac

[15:53] <mncharity> main page http://www.perlfoundation.org/perl6/index.cgi?smop

[15:53] <lambdabot> Title: SMOP / Perl 6

[16:07] <rakudo_svn> r26058 | particle++ | [rakudo] remove deprecated compiler directives replaced by t/spec/fudge

[16:22] <mncharity> bbl.  ruoso: it looks quite interesting. :)  I'll have to look at it more carefully.

[16:22] <alc> :mncharity!n=jobsearc@c-76-24-29-201.hsd1.ma.comcast.net PRIVMSG #perl6 :+bbl.  ruoso: it looks quite interesting. :)  I'll have to look at it more carefully.

[16:23] * mncharity wonders what the bleep that was.

[16:23] <alc> :mncharity!n=jobsearc@c-76-24-29-201.hsd1.ma.comcast.net PRIVMSG #perl6 :+ACTION wonders what the bleep that was.

[16:25] <TimToady> weird

[16:25] <alc> :TimToady!n=larry@host01a.appflux.net PRIVMSG #perl6 :+weird

[16:25] *** alc was kicked by TimToady (TimToady))
[16:26] <TimToady> hopefully that fixed it

[16:26] <Tene> looks like a bot with a bug.

[16:26] <mncharity> :)

[16:26] *** Tene sets mode: +o [particle]

[16:26] <[particle]> ty

[16:40] *** iblechbot joined
[16:43] *** wtgee joined
[16:44] *** kst joined
[17:38] *** njbartlett joined
[17:43] *** justatheory joined
[17:46] *** Psyche^ joined
[17:57] *** tobeya joined
[18:01] *** Patterner left
[18:01] *** Psyche^ is now known as Patterner

[18:02] *** ruoso left
[18:21] *** ebassi left
[18:24] *** r0bby left
[18:29] *** bbkr joined
[18:32] *** dconway joined
[18:33] *** zamolxes left
[18:40] *** r0bby joined
[18:43] *** sordith joined
[18:53] *** xdg left
[19:01] *** kane__ joined
[19:02] *** sri_work left
[19:06] *** hanekomu left
[19:12] *** TJCRI left
[19:15] *** schmalbe joined
[19:21] *** smtms joined
[19:26] <pugs_svnbot> r20003 | putter++ | misc/winter_jig/sixen/sixcmd: Created - A script making it easier to call pugs/kp6/rakudo/redsix.  Hides what directory you need to be in, and the executable invocation.  The variation in command-line arguments is _not_ normalized - that's another project.

[19:26] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20003

[19:26] <lambdabot> Title: Changeset 20003 - Pugs - Trac

[19:28] *** meppl left
[19:28] *** lichtkind joined
[19:29] *** peeps[work] joined
[19:34] *** TJCRI joined
[19:36] *** jjore-w joined
[19:36] *** jjore-w left
[19:41] <pugs_svnbot> r20004 | putter++ | [redsix] dusting (first half).  Move redsix to redsix.rb.  The suffix makes emacs ruby-mode syntax colorizing happier, which on the redsix code, makes a big difference.

[19:41] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20004

[19:41] <lambdabot> Title: Changeset 20004 - Pugs - Trac

[19:44] <pugs_svnbot> r20005 | putter++ | [redsix] dusting (second half).  Add symlink so .../redsix still works.

[19:44] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20005

[19:44] <lambdabot> Title: Changeset 20005 - Pugs - Trac

[19:51] *** Aankhen`` left
[19:51] <pugs_svnbot> r20006 | putter++ | [redsix] Add a -v verbose argument.  Change default behavior to non-verbose.

[19:51] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20006

[19:51] <lambdabot> Title: Changeset 20006 - Pugs - Trac

[20:07] *** lisppaste3 left
[20:16] *** barney joined
[20:18] *** lisppaste3 joined
[20:18] <mncharity>  /me wonders whether to add pil2js to sixcmd.  ./runjs.pl -e 'say(3);' fails with  InternalError: too much recursion .  And it's inactive. and doesn't seem on a critical path... so I guess not for now.

[20:28] *** schmalbe left
[20:31] <mncharity> hmm.  the misc/old_pugs_perl5_backend/ is also off the air.  perhaps pugs -C PIL changed in the intervening 2+ years?

[20:32] <mncharity> hmm, or rather since 2006-10.

[20:37] <mncharity> ok, that's depressing.  all for the want of oo declarations in an ast yaml dump. :/

[20:37] <mncharity> back to work.

[21:04] *** pbuetow left
[21:09] *** barney left
[21:14] <mncharity> obra: apropos my claim we've been blocked since late 2005 for want of a parser willing to provide a parse tree with oo info, consider http://svn.pugscode.org/pugs/perl5/PIL2JS/lib6/Prelude/JS/ http://svn.pugscode.org/pugs/perl5/PIL2JS/libjs/Perl6/ and http://svn.pugscode.org/pugs/misc/old_pugs_perl5_backend/PIL-Run/lib6/P5Runtime/PrimP6.pm .

[21:14] <lambdabot> Title: Revision 20006: /perl5/PIL2JS/lib6/Prelude/JS

[21:16] *** pbuetow joined
[21:16] <mncharity> We're still trying to recreate those capabilities.  To do the same thing, just this time without pugs and audreyt.  Lots of assorted progress has certainly been made since.  And we can look forward to moving rather more rapidly than we could have back then.  Once we catch back up to where we were.

[21:27] *** wtgee left
[21:33] *** poletti joined
[22:11] *** sordith is now known as sordith_

[22:12] *** alester left
[22:15] *** wtgee joined
[22:16] *** jferrero joined
[22:21] *** Auzon joined
[22:24] *** Limbic_Region joined
[22:32] *** chris2 left
[22:35] *** TJCRI left
[22:42] *** IllvilJa joined
[22:45] *** ludan joined
[22:46] <ludan> hi

[22:48] <diakopter> TimToady: what do you want to name your prog that can parse 42+1, for moritz' evalbot

[22:48] *** cmarcelo left
[22:51] *** pbuetow left
[22:51] *** pbuetow joined
[22:55] *** poletti left
[23:08] *** thoughtpolice joined
[23:09] *** wknight8111 joined
[23:13] <TimToady> given that the output of that is currently 454 lines of yaml, I don't think you want evalbot to do anything with it yet

[23:14] <TimToady> likely what you're going to end up with is names of both a frontend and backend

[23:15] <TimToady> STD-smop, STD-parrot, etc.

[23:15] <TimToady> or STD5-whatever

[23:15] <Limbic_Region> TimToady - did you see the PM /msg I left you?

[23:15] <TimToady> if you count the gimme5-translated version of STD to be a different thing

[23:16] <TimToady> yes, he was on here last night

[23:16] <TimToady> several of us were trying to help him along

[23:17] <TimToady> I also added .end, .elems etc to S29

[23:17] <Limbic_Region> I didn't triage it

[23:17] <Limbic_Region> just noticed it was up your alley

[23:18] <TimToady> well, he had a good point, I just didn't repsond directly, but like I do respond half the time, just with a spec update :)

[23:18] <TimToady> and to give other people a chance to respond :)

[23:19] <TimToady> if all I do is answer questions directly, nothing ever actually gets done. :)

[23:19] <TimToady> though I enjoy doing that...

[23:30] *** iblechbot left
[23:32] <Limbic_Region> regarding LTM, is it the greatest thing since sliced bread or is it still a work in progress (the idea - not the implementation)

[23:38] *** Patterner left
[23:41] *** TreyHarris left
[23:45] *** peeps[work] left
[23:46] *** iblechbot joined
[23:48] <TimToady> the idea is pretty much nailed down

[23:48] <Limbic_Region> ok - something you are happy with then

[23:48] <Limbic_Region> good

[23:48] <TimToady> I don't know if it's the greatest thing since sliced bread, but it's a necessity for mutable grammars

[23:48] <TimToady> it's a form of reducing footprint of damage

[23:49] <TimToady> much as you want to restrict a declaration to its smallest lexical scope

[23:49] *** TreyHarris joined
[23:49] <Limbic_Region> well, I guess what I was getting at is that I knew you knew what you wanted to achieve but were struggling with the way to accomplish it.  I was wondering if you conceded a comprimise for forward progress or if you actually were pleased with the result

[23:49] <TimToady> the other extreme, illustrated in p5, is source filtering

[23:49] <TimToady> well, the implementation still doesn't quite match the idea, in spots

[23:50] <TimToady> at the moment the implementation treats each named rule as an alternation

[23:50] <TimToady> but the granularity of LTM is the (a|b|c) level

[23:50] <TimToady> and a given named rule can have several of those

[23:50] <TimToady> each of those has to do its LTM separately

[23:51] <TimToady> but it has to take into account any (|) from the top of any subrules too

[23:51] <Limbic_Region> that's what the cache thingy is for?

[23:51] <TimToady> the interesting questions come at the point where you decide what to propagate upward as visible alternatives

[23:51] <TimToady> yes, but the cache is currently based on the name of the rule

[23:52] <TimToady> I've got it to where it gives each (|) its own name now

[23:52] <TimToady> but I have to convert the caching to that granularity

[23:52] <TimToady> or maybe not, since you can't get at the lower ones without entering the top one

[23:53] <Limbic_Region> now is that a matter of fiddling with the implementation

[23:53] <Limbic_Region> or is that a matter of further thinking

[23:53] <TimToady> but the lower ones have to sometimes participate in the higher ones, depending on where they come in a sequence and how they are quantified

[23:53] <TimToady> it's certainly an interesting problem

[23:53] <Limbic_Region> well, yes - at least for me from afar

[23:54] <TimToady> if you have /a* b/ then the initial LTM depends on whether a is itself pure

[23:55] <TimToady> if so, you just treat it as part of the rule, since something like / \w* \d / can be done in DFA

[23:55] <TimToady> if not, you have to treat a as its own alternative, and your list of initial tokens ends up being the union of a's LTM and b's

[23:55] <Limbic_Region> do you remember the thread a while back on perl regexes and how performance wise, things could be made much faster if a few features were dropped (greatly paraphrased on my part)?

[23:56] <TimToady> and there are interesting questions such as, suppose a is only partly pure?

[23:56] <Limbic_Region> at perlmonks that is

[23:56] <rakudo_svn> r26062 | jonathan++ | [rakudo] Make $.x used away from declaration with has do something closer to the right thing.

[23:56] *** kanru joined
[23:56] <TimToady> certainly, considering this will fix that once and for all

[23:57] <TimToady> my response to that thread was .oO(grr, working on it...)

[23:57] <Limbic_Region> that's the reason this is so interesting to me

[23:57] <TimToady> this is not just about rules at the parsing level

[23:57] <TimToady> all regex in p6 will be smart about doing those parts in DFA that they can

[23:57] <jnthn> TimToady: In STD.pm, I'm trying to work out how a method call on $_ (as in, just .foo()) gets parsed.

[23:57] <Limbic_Region> exactly

[23:57] <TimToady> and then transparently (more or less) switching to backtracking where necessary

[23:58] <Limbic_Region> that's what I was thinking in that thread - for p5 that is - only rather than expect perl and the regex engine to figure it out

[23:58] <Limbic_Region> a special syntax to allow the user to specify - safe to DFA

[23:58] <TimToady> jnthn: it's possible it's simply missing :)

[23:58] <jnthn> TimToady: Aha, OK. Was trying to work out the Right Way to add that to Rakudo.

[23:59] <TimToady> I know there's been work in p5 to inflict tries on the regex engine where possible

[23:59] <TimToady> a trie is just a DFA extended only over the constant strings

[23:59] <TimToady> (to the first approx)

[23:59] <Limbic_Region> yes, demerphq (Yves) did a lot of work on the p5 regex engine

[23:59] <Limbic_Region> as did others (now re-entrant safe)

[23:59] <TimToady> but I'm going for all the marbles :)

