[00:00] *** Exodist left
[00:08] *** aindilis2 joined
[00:20] *** pjcj left
[00:22] *** pjcj joined
[00:33] <pugs_svn> r22696 | lwall++ | [Cursor] work around accidental interpolation of $. in pattern

[00:35] *** pjcj left
[00:36] *** pjcj joined
[00:37] *** [particle] joined
[00:38] *** [particle]1 left
[00:51] <lizsac> ii  libperl5.10                       5.10.0-15             Shared Perl library

[00:51] <lizsac> i have libperl

[00:51] <lizsac> i decided to scrap the whole haskel crap and pugs

[00:51] <lizsac> i'll try out one of the other ones

[00:52] <lizsac> PerlJam told me to do the rakudo

[01:05] <wayland76> rakudo is what I'm using

[01:06] <wayland76> However, I should warn you that, unless getting it from SVN, the next version of parrot/rakudo is expected to come out on the Parrot website sometime today or tomorrow

[01:06] <wayland76> (but then, I tend to download the tarball, and build it into an RPM, and go from there)

[01:08] *** alester joined
[01:08] <wayland76> btw, people, I have a scalar (actually a PGE::Match) that can act as a hash, and I'm trying to do something like: for $M -> $k1, $v1

[01:08] <wayland76> (where $M is the scalar/hash in question)

[01:08] <wayland76> Should that work?

[01:23] <wayland76> Ok, here's another question instead; if I have an object $M, is there a way I can get $IM to refer to what $M refers to, and then reassign $M for another purpose?

[01:24] <wayland76> lizsac: Correction, the new version of Parrot just came out :)

[01:24] <wayland76> YAY!

[01:24] <wayland76> ==================> PARROT PARTY TIME EVERYONE <======================================

[01:24] <wayland76> :)

[01:28] <wayland76> Hmm.  I guess it hasn't come through CPAN yet :)

[01:29] <lizsac> i just downloaded and built some parrot

[01:29] <lizsac> i dunno if it's the latest

[01:29] <lizsac> it compiled pretty quick

[01:30] <lizsac> so if i just did a svn checkout of parrot i got the new one?

[01:31] <FireMinion> the latest one, so yes

[01:33] <lizsac> ok so i built parrot now what

[01:34] <FireMinion> what you want to do?

[01:34] <lizsac> create some perl6 scripts!

[01:50] *** alanhaggai joined
[01:57] *** hercynium left
[02:09] <wayland76> the latest parrot was 0.7.1, but is now 0.8.0.  But SVN is even more up-to-date

[02:09] <wayland76> But I insist on having all my software in RPM, and the RPM takes a long time to build

[02:09] <wayland76> so I just use the releases :)

[02:10] <wayland76> Anyway, hopefully in the process of building parrot, you'll also have gotten a perl6 executeable

[02:10] <wayland76> If not, I have to admit I don't know how you'd get one, although going to the languages/perl6 directory and building there would probably be a step in the right direction

[02:11] <wayland76> Then, you create a perl6 script, and run "perl6 scriptname"

[02:12] <wayland76> Btw, I'm near Geelong, near Melbourne in Australia

[02:12] *** alc joined
[02:12] <wayland76> Where are the other awake people?

[02:12] <wayland76> :)

[02:13] <diakopter> wayland76: they are here in this channel

[02:15] *** Ehtyar left
[02:15] <wayland76> diakopter: I know that, but I was wondering what country/timezone they're in (if they're happy to tell me -- I don't mind if people want to keep it secret :) )

[02:16] <wayland76> ( diakopter: but that's exactly the sort of thing I'd say myself :) )

[02:18] *** justatheory left
[02:31] <lizsac> parrot: error while loading shared libraries: libparrot.so.0.8.0: cannot open shared object file: No such file or directory

[02:31] <lizsac> i installed parrot in /usr/local

[02:31] <lizsac> do i need to setup some kind of env vars to get it to see the libs?

[02:38] *** Aisling left
[02:40] *** eternaleye joined
[02:41] *** Psyche^ joined
[02:43] <wayland76> hmm.  Have you run ldconfig since compiling?

[02:43] *** Patterner left
[02:43] *** Psyche^ is now known as Patterner

[02:46] <lizsac> nope

[02:47] <lizsac> Parrot VM: Can't stat perl6.pbc, code 2.

[02:47] <lizsac> main: Packfile loading failed

[02:47] <lizsac> heh i rand ldconfig now i get that

[02:47] <lizsac> parrot perl6.pbc hash.pl

[02:47] <lizsac> that's the command i'm trying

[02:52] <lizsac> aah unless i set LD_LIBRARY_PATH

[02:52] <wayland76> Have you tried perl6 hash.pl

[02:52] <wayland76> ?

[02:52] <lizsac> no

[02:52] <lizsac> command not found

[02:52] <wayland76> ok, depends on build options I guess

[02:53] <wayland76> anyway, I'm glad you thought of the LD_LIBRARY_PATH

[02:53] <lizsac> i just followed what they said on the parrot getting started page

[02:53] <wayland76> That would've taken me a while 

[02:53] <wayland76> ok :)

[02:53] <lizsac> and then i read the readme and saw the LD_LIBRARY_PATH

[02:54] <lizsac> But please note that dynamic libs will not be found for non-standard

[02:54] <lizsac> locations unless you set LD_LIBRARY_PATH or similar.

[02:54] *** johnjohn101 joined
[02:54] <johnjohn101> hello

[02:54] <FireMinion> hey

[02:55] <johnjohn101> where can I read about the most recent progress for perl 6?

[02:55] <wayland76> Depends on what level of detail you want

[02:55] <FireMinion> they just release the latest version

[02:56] <FireMinion> http://www.parrot.org/news/2008/Parrot-0.8.0?destination=node%2F48

[02:56] <lambdabot> Title: Parrot 0.8.0, "Pareto principle" released! | Parrot VM, http://tinyurl.com/5soy3g

[02:56] <wayland76> There are three or four competing implementations of Perl6, but the one that seems to be both the most complete and progressing well is rakudo

[02:57] <wayland76> http://www.rakudo.org/

[02:57] <FireMinion> for now :)

[02:57] <lambdabot> Title: Rakudo.org:

[02:57] <wayland76> Its latest release is bundled with Parrot

[02:57] <wayland76> which FireMinion just gave you the link for :)

[02:57] <johnjohn101> why so many implementations?

[02:57] <wayland76> Because people couldn't agree :)

[02:58] <wayland76> But I think it'll converge down to two in the near future

[02:58] <wayland76> (well, within the next year)

[02:58] <lizsac> still can't run it

[02:58] <lizsac> hrmm

[02:58] <wayland76> Pugs is the first one, but it's written in Haskell, and so people have trouble with that

[02:58] <lizsac> Parrot VM: Can't stat perl6.pbc, code 2.

[02:58] <lizsac> what does that mean?

[02:58] <wayland76> lizsac: What's the error now?  If it's long, use the pastebot :)

[02:59] <wayland76> Oh

[02:59] <lizsac> is it not finding perl6.pbc?

[02:59] <wayland76> yes

[02:59] <wayland76> but not sure what code 2 is :)

[02:59] <lizsac> yeah it's not in there

[02:59] <lizsac> wtf is perl6.pbc?

[02:59] <wayland76> Hmm.  Well, that needs fixing.  

[02:59] <johnjohn101> thanks, I think i have what I was looking for

[02:59] <wayland76> Have you investigated doing a build in the languages/perl6 directory

[03:00] <lizsac> doing a build?

[03:00] <lizsac> ahh like make perl6 ?

[03:00] <wayland76> johnjohn101: Rakudo is the one built on Parrot, and the one that I think will eventually develop into the main perl6

[03:00] <lizsac> that would make sense i guess :)

[03:00] <wayland76> lizsac: languages/perl6/README

[03:01] <wayland76> that has directions, I think

[03:01] <wayland76> oh, wait.. :)

[03:01] <wayland76> yeah, that README will help :)

[03:01] <johnjohn101> i'm probably not going to mess with it until it's released.  I am still loving perl 5.

[03:01] <johnjohn101> but I was curious,

[03:02] <wayland76> johnjohn101: The current estimate for the 1.0 release is Christmas

[03:02] *** elmex_ joined
[03:04] <lizsac> is there a way i can set a prefix dir for installing perl6 ?

[03:04] <johnjohn101> very cool. I hope to look at it in 2009.  i'm sure it will be well received

[03:04] <lizsac> i want to put it in /usr/local

[03:04] * lizsac reads the Makefile

[03:06] <wayland76> johnjohn101: You may also be interested in https://svn.perl.org/parrot/trunk/languages/perl6/ROADMAP

[03:06] <wayland76> That's the plan for what happens next in Perl6

[03:06] <lizsac> hrmm don't see a way to install perl6 into /usr/local

[03:06] <wayland76> but it was written in August, so there's been some progress

[03:07] <lizsac> do i have to manually move it in there?

[03:07] <wayland76> lizsac: That doesn't sound right.  Mine doesn't have a makefile right there; let me have a look around...

[03:07] <johnjohn101> tx wayland76

[03:09] *** sail0r joined
[03:09] <wayland76> lizsac: have a look at parrot.spec (which is for building RPMS), and do a search for "make"

[03:10] <wayland76> johnjohn101: No worries :).  I was doing the same thing a year ago :)

[03:10] <wayland76> lizsac: See the one that says make reallyinstall DESTDIR=$RPM_BUILD_ROOT

[03:10] <wayland76> that might be worth a go :)

[03:10] <lizsac> i already did that

[03:11] <wayland76> but try it with DESTDIR=/tmp/testwhatever

[03:11] <wayland76> ok, and what happened?

[03:11] <lizsac> ohh i mean i did a prefix in the config

[03:11] <lizsac> hrmm

[03:11] <lizsac> i already installed parrot in /usr/local

[03:12] <wayland76> ...but now it will have more files to install?

[03:12] <wayland76> (I'm guessing here)

[03:13] <wayland76> back in 10, hopefully :) &

[03:15] *** sail0r left
[03:16] <wayland76> back :)

[03:17] *** elmex left
[03:17] *** elmex_ is now known as elmex

[03:17] <FireMinion> weclome back

[03:19] <lizsac> how do i install perl6 after i've compiled it?

[03:20] <lizsac> ohh ohh i see

[03:21] <lizsac> like compile parrot then compile perl6 then make install parrot?

[03:21] <wayland76> I hope so :)

[03:21] <wayland76> that's the sort of thing I was assuming

[03:21] <lizsac> hrmm

[03:21] <wayland76> (although rpmbuild -ta parrot.tar.gz is a little simpler, but takes longer)

[03:21] <lizsac> i don't have rpms

[03:22] <wayland76> yeah, I know

[03:22] <wayland76> RPMs have advantages :) (and disadvantages, I guess :) )

[03:23] <lizsac> it looks like it's in /usr/local/languages/perl6/perl6.pbc

[03:24] <lizsac> does parrot look there by default for .pbc files?

[03:25] <wayland76> Hmm.  No idea

[03:25] <lizsac> also do i need to put anything in the top line of the perl script?

[03:25] <lizsac> you know like #!/usr/local/bin/perl

[03:25] <wayland76> The stuff at the top of the perl script is only necessary if you don't want to type the extra on the command line

[03:26] <wayland76> For example, if you have a perl5 script called test.pl

[03:26] <wayland76> if you run "perl test.pl", you don't need the #! line

[03:26] <wayland76> ...but if you want to run it as just "test.pl", then you do

[03:28] <wayland76> The #! line is utterly ignored by perl, and only the operating system takes any notice

[03:31] *** ab5tract joined
[03:32] <TimToady> actually, no, perl looks at the #! line anyway

[03:33] <wayland76> Does it? 

[03:33] <wayland76> ok, there we go

[03:33] <wayland76> TimToady is the expert here

[03:34] <literal> wayland76: some options have to be set on the command line, setting them on the #! line can be too late

[03:34] <literal> in Perl 5 anyway

[03:34] <wayland76> ok :)

[03:34] <TimToady> like -T

[03:34] <wayland76> oh, of course :)

[03:34] <wayland76> I remember reading that about -T

[03:35] <wayland76> Anyway, to answer the original question, I'm currently using perl6 without the #! lines :)

[03:37] <TimToady> I doubt rakudo pays attention to #!, but I don't know for sure

[03:38] <wayland76> great!  We can pool our ignorance then :)

[03:38] <FireMinion> heh

[03:48] <wayland76> Anyway, I have things that need doing, so unfortunately I'll have to leave your conversation to scintillate without me :)

[03:48] <lizsac> well i know where perl6.pbc is but parrot doesn't

[03:48] <wayland76> lizsac: Have you tried putting the path in?

[03:49] <wayland76> (ie. parrot  /usr/local/languages/perl6/perl6.pbc example.pl)

[03:49] *** wayland76 left
[03:49] <lizsac> parrot /usr/local/languages/perl6/perl6.pbc hash.pl

[03:49] <lizsac> Statement not terminated properly at line 7, near ". kv->$gir"

[03:54] <eternaleye> Heh, http://www.parrotcode.org/release/devel is a lottery ticket

[03:56] <eternaleye> I 403'd at secsup and 404'd at datapipe before hitting a good mirror

[03:56] *** johnjohn101 left
[03:57] *** FireMinion left
[04:03] *** Aisling joined
[04:08] *** araujo left
[04:08] <lizsac> yay i ran my first perl6 script

[04:13] *** Limbic_Region left
[04:16] <lizsac> perl6 say.pl

[04:16] <lizsac> Hello World

[04:16] <lizsac> heh

[04:28] *** cognominal_ left
[04:35] *** alanhaggai left
[04:44] <eternaleye> That's odd. http://zlin.dk/p/?YWY4ZjAw

[04:44] <lambdabot> Title: K-nopaste

[04:45] <eternaleye> While making "./perl6"

[04:47] <eternaleye> My memory was nowhere near full, nor my ulimit - I have 2gb ram and 4gb swap, and my ulimit is set to match

[04:48] <eternaleye> It never even swapped out

[04:54] *** BinGOs left
[04:55] *** jfredett joined
[04:58] <eternaleye> This error occurs in "make languages": http://zlin.dk/p/?YThiZTU1

[04:58] <lambdabot> Title: K-nopaste

[05:00] <lizsac> i just did a make perl6

[05:00] <lizsac> didn't know you could make languages

[05:07] *** Maghnus left
[05:08] *** Maghnus joined
[05:09] <eternaleye> I'm trying to make an ebuild for gentoo - the newest one in the tree is 0.6.1 :(

[05:09] <eternaleye> It happens in "make reallyinstall" too

[05:09] <lizsac> ahh

[05:10] <lizsac> well i know that making an ebuild is good practice but when it comes to development environments i try to keep them seperate from the system

[05:10] <lizsac> i usually do from source and keep them in /usr/local without root privs

[05:19] <eternaleye> I'm just wanting to submit it on bugzilla to be put in the tree so more people on gentoo will try it :D

[05:25] *** Bzek joined
[05:32] <lizsac> yeah it's crazy when i first upgraded to 5.10 and started getting into the features i found that it's been around for years and same with perl6

[05:32] <lizsac> but yet it's not streamlined

[05:33] <lizsac> i keep hearing too much talk about ruby and python 

[05:34] <lizsac> i'm going to check them out but i think perl6 deserves a chance too

[05:42] *** cpfr joined
[06:00] <ab5tract> lizsac: perl6 deserves a chance but parrot makes it dance

[06:01] <ab5tract> parrot.has %w( ruby python perl6 ) == 'perfect'

[06:02] <ab5tract> parrot.has %w( ruby python perl6 perl5 ) == 'perfect++'

[06:04] <lizsac> so parrot is king in this matter?

[06:06] <eternaleye> If it isn't now, it will be then.

[06:06] <lizsac> i was looking at some of these .pir deals

[06:06] <lizsac> wtf is .pir

[06:06] <eternaleye> Parrot Intermediate Representation

[06:07] <eternaleye> Higher-level than PASM, which is higher-level than PBC (Parrot Byte Code). All are lower-level than Perl 6

[06:07] <eternaleye> http://www.perlfoundation.org/parrot/index.cgi?pir_tutorial_and_faq

[06:08] <lambdabot> Title: PIR Tutorial and FAQ / Parrot, http://tinyurl.com/5mhdqv

[06:08] *** bsb left
[06:10] *** alc left
[06:12] *** cognominal joined
[06:22] *** BinGOs joined
[06:30] *** iblechbot joined
[06:35] *** ashizawa joined
[06:37] *** kisu joined
[06:40] *** kisu left
[06:44] *** araujo joined
[06:51] *** mj41 left
[06:56] *** pbuetow joined
[06:57] *** xinming_ joined
[07:06] *** ejs joined
[07:10] *** xinming left
[07:14] *** cosimo joined
[07:20] *** pmurias joined
[07:20] *** pmurias left
[07:29] *** pbuetow left
[07:31] *** renormalist joined
[07:33] *** xinming_ left
[07:35] *** ab5tract left
[07:36] *** schmalbe joined
[07:40] *** alester left
[08:25] *** zamolxes joined
[08:26] *** tomyan joined
[08:40] *** kanru left
[08:45] *** kanru joined
[09:21] *** xinming joined
[09:22] *** mberends joined
[09:37] *** mberends left
[09:38] *** mberends joined
[09:45] *** schmalbe left
[09:48] *** schmalbe joined
[09:54] *** explorer joined
[09:54] *** fullermd left
[09:54] *** fullermd joined
[09:57] *** pedrob joined
[10:03] *** ludan joined
[10:41] *** tomyan left
[10:48] *** drbean left
[11:23] *** tomyan joined
[11:33] *** pedrob left
[11:34] *** drbean joined
[12:11] *** renormalist left
[12:13] *** Lorn joined
[12:24] *** abra joined
[12:41] *** abra left
[13:07] *** explorer left
[13:10] *** pedrob joined
[13:10] *** tomyan left
[13:13] *** alanhaggai joined
[13:14] *** mberends left
[13:15] *** avar left
[13:15] *** avar joined
[13:20] *** bennymack left
[13:20] *** silug left
[13:21] *** aindilis2 left
[13:22] <[particle]> lizsac: parrot is a virtual machine. pir is the language humans use to program at the virtual machine level. it's like assembler for the vm, but with some sugar that makes it easier on the eyes.

[13:25] *** ashizawa left
[13:30] *** alanhaggai left
[13:38] *** abra joined
[13:48] *** frobnitz joined
[13:53] *** justatheory joined
[14:01] *** abra left
[14:03] *** abra joined
[14:17] *** bcornett joined
[14:26] *** TJCRI joined
[14:29] *** alester joined
[14:30] *** abra left
[14:31] *** IllvilJa joined
[14:31] *** eternaleye left
[14:31] <IllvilJa> Hello! Planet perl 6 (planet6

[14:32] <IllvilJa> (oops... hit return too early)... Planet perl 6 (planetsix.perl.org) has a lot of entries recently that do NOT relate to Perl 6 at all.

[14:33] <IllvilJa> Anyone here who has any "hooks" into the RSS aggregation for that site who can have a look if the proper RSS feeds are used?\

[14:39] <moritz_> IllvilJa: since it's a perl.org site, you should contact webmaster at perl.org. 

[14:39] <moritz_> IllvilJa: i guess that Geoff's blog should be filtered by tag or something

[14:40] <IllvilJa> Yes.  I'll bring it up with them.  (I was hoping some of those guys were around here, yes, I confess, I am a bit lazy at times)

[14:43] <moritz_> I think they tend to hang out in #p5p, if at all on IRC.

[14:44] <IllvilJa> Ok!

[14:53] *** fullermd left
[15:00] *** hercynium joined
[15:01] <[particle]> emailing [email@hidden.address] is probably the best way to get their attention

[15:02] *** zamolxes left
[15:02] *** ejs left
[15:03] <moritz_> can I extend a class lexically scoped?

[15:04] <moritz_> ie add a method List.foo that's only visible in the current scope?

[15:04] <moritz_> 'my sub foo(@List:, $other, $args) { ... }' perhaps?

[15:05] <[particle]> s/sub/method/

[15:05] <[particle]> not sure if lexical methods have been implemented though, i'd have to run the code

[15:06] <moritz_> I'm quite sure they aren't in rakudo

[15:06] <moritz_> not even lexical subs are

[15:06] *** alanhaggai joined
[15:07] *** abra joined
[15:09] *** cosimo left
[15:15] *** bcornett left
[15:18] *** explorer joined
[15:24] *** pedrob left
[15:25] *** pedrob joined
[15:25] *** mj41 joined
[15:37] *** apeiron_ joined
[15:44] *** abra left
[15:45] *** apeiron left
[16:09] *** abra joined
[16:09] *** adc_Penner joined
[16:33] *** Exodist joined
[16:36] *** meppl joined
[16:37] <meppl> good evening

[16:46] *** explorer left
[16:47] *** abra left
[16:47] *** abra joined
[16:50] *** alanhaggai_ joined
[16:50] *** alanhaggai left
[16:51] *** alanhaggai_ is now known as alanhaggai

[16:54] <cognominal> 1 loop; # is this an infinite loop or an error?

[16:55] <moritz_> in Perl 6? an error

[16:56] <moritz_> std: 1 loop;

[16:56] <p6eval> std 22696: OUTPUT[parse failure␤]

[17:01] <cognominal> std:  1 while 1;

[17:01] <p6eval> std 22696: OUTPUT[parsed␤]

[17:02] <cognominal> i see them as synonyms

[17:02] <[particle]> std: loop 1;

[17:02] <p6eval> std 22696: OUTPUT[parse failure␤]

[17:02] <cognominal> std  loop { 1 }

[17:02] * [particle] hands cog a :

[17:03] <cognominal> std:  loop { 1 }

[17:03] <p6eval> std 22696: OUTPUT[parsed␤]

[17:03] <PerlJam> std: loop;

[17:03] <p6eval> std 22696: OUTPUT[Unknown routines:␤     loop called at 1 ␤parsed␤]

[17:03] <cognominal> this is loopy...

[17:08] *** pedrob left
[17:11] *** Bzek left
[17:12] *** abra left
[17:13] *** apeiron_ left
[17:16] *** pbuetow joined
[17:16] *** ludan left
[17:18] *** jan_ left
[17:19] *** ruoso joined
[17:20] <ruoso> Hello!

[17:21] <moritz_> hi ruoso ;)

[17:21] <ruoso> hi moritz_ 

[17:34] <TimToady> loop is not allowed as a statement modifier

[17:36] <TimToady> it doesn't read well in English, and it's just too easy to not see

[17:36] *** cognominal_ joined
[17:37] *** schmalbe left
[17:38] <TimToady> cognominal_: loop is just too unusual and lightweight to serve as "change what the left side means" control flow

[17:38] *** REPLeffect left
[17:42] *** cognominal left
[17:44] *** REPLeffect joined
[17:49] *** cognominal joined
[17:50] *** cognominal_ left
[17:51] *** pedrob joined
[17:54] *** pedrob left
[17:56] *** azawawi joined
[18:01] *** pedrob joined
[18:11] *** jan__ joined
[18:34] *** alester left
[18:49] *** IllvilJa left
[18:53] <pugs_svn> r22697 | azawawi++ | css is moved to STD_syntax_highlight.css and is not inlined when --clean-html is used

[18:53] <pugs_svn> r22697 | azawawi++ | fixed empty arguments check

[19:01] *** IllvilJa joined
[19:02] *** IllvilJa left
[19:03] *** masak joined
[19:08] *** eternaleye joined
[19:11] *** zamolxes joined
[19:11] *** eternaleye left
[19:13] *** eternaleye joined
[19:13] <avar> http://u.nix.is/fuck-sexy-girls-near-undefined.png <- /me tries to remember what language stringifies undef to "undefined"

[19:14] <avar> Maybe it's just the image library they're using

[19:15] * masak hasn't been to undefined yet

[19:15] <masak> seems like a nice place

[19:15] <Khisanth> javascript!

[19:17] *** pmurias joined
[19:19] <ruoso> azawawi, how do I run STD_syntax_highlight?

[19:19] *** eternaleye left
[19:20] <pmurias> ruoso: like STD5_dump_match

[19:20] <pmurias> ruoso: hi

[19:21] *** eternaleye joined
[19:22] <ruoso> hi pmurias 

[19:28] <pmurias> ruoso: the viv tree is a bit different from the Match in places what works best for me when trying to understand how to implement something is to first look at the output of STD5_dump_match and then at the viv tree (should be both included with the --debug option to mildew)

[19:29] <pmurias> util/gen_STD_ctags.pl helps when looking at STD.pm

[19:30] *** araujo left
[19:34] <ruoso> pmurias, I've been thinking... and there's a good reason for having the built-in types written in plain Perl 6 instead of the 'my $class = ::p6opaque.CREATE()' idiom

[19:34] *** eternaleye left
[19:34] <ruoso> if we make it plain Perl 6, it can be used by other implementations..

[19:35] <ruoso> if we make it with the specific idiom, we'll be completely smop-specific

[19:37] *** araujo joined
[19:38] *** sri_work_ joined
[19:41] *** abra joined
[19:49] *** kanru left
[19:50] *** pedrob left
[19:53] <TimToady> hmm, obvioulsy Object should stringify to U+FFFC OBJECT REPLACEMENT CHARACTER

[19:53] <TimToady> *obviously

[19:53] <TimToady> pity there's no JUNCTION REPLACEMENT CHARACTER...

[19:54] <moritz_> ;)

[19:54] *** armagad joined
[19:54] * ruoso wonders how Object looks like

[19:54] *** kanru joined
[19:54] <TimToady> dunno, my font doesn't have it...

[19:54] <moritz_> class Object is boring { ... };

[19:55] <ruoso> speaking of complements to class Object...

[19:55] *** sri_work left
[19:55] <ruoso> TimToady, I think there needs to be a "class Foo meta Bar {...}"

[19:55] <ruoso> that says that the metaclass for Foo is Bar

[19:55] <moritz_> in my font it's just the letter OBJ in a dashed frame

[19:56] * ruoso trying to remember how gnome accepts input of arbitrary unicode characters

[19:56] <ruoso> ￼

[19:58] <moritz_> xterm uses a quite different one than gucharmap

[19:58] *** abra left
[19:59] <ruoso> Ctrl+Shift+U + code

[19:59] <ruoso> Ctrl+Shift+U, code

[20:01] *** pedrob joined
[20:11] *** alanhaggai left
[20:14] <pmurias> ruoso: other implementations will propably also use a REPR api of some sort

[20:14] <masak> say I want to add a method to class X, but the method name is in a scalar variable $new_method. how would I do that, apart from eval'ing a string?

[20:14] <pmurias> ruoso: and the REPR api is supposed to be standard

[20:17] <pmurias> ruoso: other implemenation = parrot,elf,pugs? pugs is dead untill audreyt resurrects it, elf could be easily influenced to use whatever we want by implementing it and parrot will likely do the metamodel in pir/C

[20:18] <pmurias> and it's even less likely the other implementation will have a bootstrap the metamodel mode in the compiler

[20:19] <pugs_svn> r22698 | azawawi++ | [STD_syntax_highlight] resources are now in ../ when --clean-html is used

[20:22] <ruoso> masak, the MOP api should provide the interface to do that

[20:22] <masak> sounds good.

[20:22] <ruoso> pmurias, the REPR api is not a standard, at least not yet... it's something smop specific...

[20:24] * ruoso later & will backlog, as usual...

[20:24] *** ruoso left
[20:27] *** elmex left
[20:29] *** zamolxes left
[20:32] *** zamolxes joined
[20:33] *** Lorn left
[20:33] <pugs_svn> r22699 | moritz++ | [docs] delete donate.pugscode.org, since it's hopelessly out of date.

[20:34] <pmurias> masak: it would be something like MyClass.HOW.add_method($new_method,method {...})

[20:39] <masak> pmurias: oh, so you can use the method keyword like that, in the middle of an expression?

[20:39] <moritz_> std: my $x = method { ... }

[20:39] <p6eval> std 22699: OUTPUT[Unknown routines:␤     method called at 0 ␤parsed␤]

[20:40] <moritz_> obviously STD.pm doesn't like anonymous methods

[20:40] <pmurias> masak: yes, STD currently parses it incorrectly

[20:40] <masak> oki.

[20:40] <pmurias> you can also use a sub

[20:40] <masak> I see.

[20:40] <pmurias> with the invocant being mapped to the first positional

[20:40] <masak> but declaring methods outside of classes is still disallowed, yes?

[20:40] <moritz_> but will the 'self' keyword work within a sub?

[20:41] <moritz_> S12 has two examples of anonymous methods (at least)

[20:41] <moritz_> S12:286 and S12:289

[20:41] <masak> thanks. moritz_++

[20:41] <moritz_> ack++

[20:42] * moritz_ should make an alias specack='cd ~/pugs/docs/Perl6/Spec; ack'

[20:43] <masak> moritz_: do it!

[20:43] <masak> then you can answer my impertinent questions even faster :)

[20:43] <moritz_> we need a specack-bot!

[20:44] <masak> aye

[20:44] <masak> and what a success it would be :)

[20:44] <moritz_> hey, its line numbers could directly link to the HTML output...

[20:45] * moritz_ senses the opportunity for endless tweaking, for about 3 users a day, if at all ;)

[20:45] *** [particle]1 joined
[20:46] <pugs_svn> r22700 | lwall++ | [STD] allow anonymous methods for moritz++ et al.

[20:49] *** pbuetow left
[20:51] *** jhorwitz left
[20:52] <masak> std: my $x = method { ... }

[20:52] <p6eval> std 22700: OUTPUT[Unknown routines:␤     method called at 0 ␤parsed␤]

[20:52] <masak> maybe I'm too quick on the trigger...

[20:53] <moritz_> masak: STD.pm isn't recompiled very often on the server... perhaps once per hour, or even less frequent

[20:53] <[particle]1> yes, sholud be hourly

[20:53] <masak> makes sense.

[20:53] <[particle]1> so, try in 10 minutes or so

[20:53] <moritz_> [particle]1: do you have access on that server? ;-)

[20:54] <[particle]1> supposedly, but i've never attempted anything

[20:54] <moritz_> 0-59/18 * * * *      sh /home/evalenv/build-std.sh >> ~/std.log 2>&1

[20:54] <moritz_> [particle]1: that's not feather, but timtowtdi.org

[20:54] <[particle]1> ah

[20:54] * [particle]1 <== clueless()

[20:57] *** pbuetow joined
[20:59] <pugs_svn> r22701 | moritz++ | [t] move instance.t to spec/, some small updates.

[20:59] <pugs_svn> r22701 | moritz++ | Also updated deprecated-syntax.pod

[21:02] <pmurias> TimToady: <== is parsed as a <= with the = meta operator

[21:03] *** armagad left
[21:05] <pmurias> it would be nice if free cpu cycles where automaticly devoted to rebuilding evalbot backends

[21:07] <pugs_svn> r22702 | moritz++ | [t/spec] some fudging of instance.t, and small corrections

[21:09] <pugs_svn> r22703 | azawawi++ | [STD_syntax_highlight] Right-aligned the syntax tree div and it is collapsed by default

[21:09] <pugs_svn> r22703 | azawawi++ | [STD_syntax_highlight] Added Expand/Collapse and Help buttons along with keep results onclick functionality

[21:13] <pugs_svn> r22704 | azawawi++ | [STD_syntax_highlight] Fixed css/divs to work with previous commit

[21:14] *** adc_Penner left
[21:14] <[particle]1> azawawi: i'm really digging the syntax highlighter

[21:15] <azawawi> [particle]1: thx

[21:18] <azawawi> right now loading so many spans can cause firefox to use like 450MB when closing the tab... -> jquery cleaning mouseover events from <span> tags

[21:18] <azawawi> chrome does not exibit the same problem

[21:18] <[particle]1> yikes

[21:19] <azawawi> Perl6 is pushing jQuery and browsers to their limits ;-)

[21:21] <azawawi> STD_syntax_highlight does take a lot of CPU time especially on t/spec/..../rx.t

[21:22] <moritz_> azawawi: are the syntax hilighted test files online somewhere?

[21:22] <azawawi> http://sial.org/pbot/32762

[21:22] <lambdabot> Title: Paste #32762 from "azawawi" at 212.38.144.4

[21:22] <[particle]1> azawawi: you need to blog about this

[21:22] <azawawi> http://feather.perl6.nl/~azawawi/html/

[21:22] <lambdabot> Title: Index of /~azawawi/html

[21:24] <azawawi> 5486 secs for rx.t -> rx.html

[21:27] <azawawi> avg secs for generating an html is like 30 secs

[21:27] <masak> ooh! azawawi++ # html files

[21:27] * moritz_ tries how long it takes for STD.pm itself

[21:27] <azawawi> avg 16 secs if we exclude rx.html generation

[21:28] <masak> azawawi: something strange happens when hovering over comments. you're probably already aware of that.

[21:29] <pmurias> an emty tooltip is displayed

[21:29] <pmurias> * empty

[21:29] <azawawi> really?

[21:29] <azawawi> masak: which one?

[21:29] <masak> all of them, so far

[21:29] <[particle]1> and the tooltip is always anchored to top, rather than top of visible screen

[21:30] <[particle]1> i get statementlist for pod

[21:30] * [particle]1 checks comments...

[21:30] * azawawi is currently generating another round of improved htmls....

[21:31] <masak> azawawi: it would also be worthwhile not to change the size of the spans when hovering on them. right now things jump around just a little.

[21:31] <pmurias> azawawi: would a lightweight no-tooltip mode be usefull? i have an idea how to do it?

[21:31] <pmurias> s/?$//

[21:31] <masak> adding an invisible border to all spans should be enough.

[21:31] <azawawi> those are already fixed... generating ;-)

[21:31] <masak> :)

[21:31] <masak> azawawi++

[21:32] * azawawi is waiting for sample S02 to finish

[21:33] <[particle]1> trouble here: http://feather.perl6.nl/~azawawi/html/S11-modules/export.html

[21:33] <lambdabot> Title: STD_syntax_highlight ../../t/spec/S11-modules/export.t

[21:34] <[particle]1> see ##  exp_no_parens

[21:35] <moritz_> [particle]1: you mean that the comment is parsed together with the preceeding block?

[21:35] <azawawi> right now we're not getting pod comment nodes from STD.pm

[21:35] <[particle]1> yes, as opposed to the other comments

[21:35] <[particle]1> right, no pod parsing in STD (yet)

[21:35] <moritz_> [particle]1: I don't think that a <.ws> at the end of a rule means trouble

[21:36] <[particle]1> moritz_: i'd argue that a block should end at the first \n

[21:36] *** wknight8111 joined
[21:37] <moritz_> [particle]1: I don't know enough about parsing to counter that argument ;)

[21:37] *** pedrob left
[21:37] <masak> the parsing of === in the same file looks suspicious.

[21:37] <moritz_> aye, it's parsed as == =

[21:37] <[particle]1> yes, it's somewhat odd that === and <== parse differently than =:=

[21:38] <[particle]1> but, there's no =: op

[21:38] <[particle]1> so it has no other way to parse than =:=

[21:38] <moritz_> infix:<==> infix_postfix_meta_op<=>

[21:38] <masak> I don't want excuses, I want results! :P

[21:38] <moritz_> azawawi++ # helping to identify parse errors with his shiny tool

[21:38] <[particle]1> you have a pugs commit bit, masak :)

[21:39] <masak> true.

[21:39] <masak> I also have homework...

[21:39] <moritz_> I don't want excuses, I want ...

[21:39] <[particle]1> sheesh, i've heard that before... from moritz!

[21:39] <masak> :)

[21:40] <masak> in all fairness, moritz_ does produce results.

[21:40] *** pmurias left
[21:40] * lizsac creates a random excuse generator

[21:40] <[particle]1> masak: expect namespace export/import to work soon in rakudo

[21:40] <pugs_svn> r22705 | moritz++ | [t] move oo/can.t to spec/, and cleared up misleading test descriptions

[21:41] <masak> [particle]1: yes, I've read about the good news.

[21:41] <[particle]1> good

[21:42] <masak> not sure exactly what it means, though.

[21:42] <masak> does it mean :: will start working for classes again?

[21:42] <masak> we got sort of attached to that feature while it worked :)

[21:43] <[particle]1> it means, for example, module Test { sub plan is export() {...} }; <different file> use Test; plan(...) #works

[21:43] <masak> that's good.

[21:43] <azawawi> i uploaded the latest S02 htmls into http://feather.perl6.nl/~azawawi/html/S02-builtin_data_types. Can anyone test it since i have a stupid ISP caching proxy :-( ?

[21:43] <lambdabot> Title: Index of /~azawawi/html/S02-builtin_data_types

[21:43] <[particle]1> which also means many pir subs can be rewritten in perl 6

[21:44] <masak> yes, I think someone mentioned that.

[21:44] <moritz_> masak: are you aware of any other feature that you came attached to, and that's under-tested?

[21:45] <masak> moritz_: well, it sucks that we don't have enough integer precision to use the bitwise operators for arbritary unsigned 24-bit integers

[21:45] <[particle]1> azawawi++ looks great!

[21:45] <moritz_> azawawi: the syntax tree doesn't show up for me (FF 2)

[21:45] <masak> for me neither

[21:46] <azawawi> moritz_: you have to enable it first

[21:46] *** cognominal left
[21:46] <[particle]1> hit the button!

[21:46] <azawawi> ;-)

[21:46] <masak> azawawi: things still jump around due to the borders on the hovered elements.

[21:46] *** TJCRI left
[21:46] <moritz_> azawawi: I pressed the button. Nothing happend. Same for "Help"

[21:46] <masak> button doesn't work here.

[21:46] <[particle]1> yes, i see subtle (1px?) movements

[21:46] <masak> Help!

[21:46] <masak> [particle]1: aye.

[21:47] <azawawi> i didnt use ff2 for testing

[21:47] <azawawi> ff3

[21:47] <masak> they're fixable, by adding invisible borders to everything

[21:49] <lizsac> the button froze my firefox

[21:49] <azawawi> i think jquery cleans span mouseover events from span elements recursively on window.unload that's why F5 causing FF3 to hiccup...

[21:49] <lizsac> when i pressed unhide 

[21:49] <[particle]1> hee, my ff is using 1.2GB now :)

[21:50] <azawawi> show -> bind mouseover to all nodes, hide -> unbinds...

[21:50] <lizsac> mines taking a dive

[21:50] <azawawi> 15 secs max

[21:51] <lizsac> heh my laptop is a pIII

[21:51] <azawawi> lizsac: the funny thing is that dev google chrome is really faster on *.unbind... No problems there.

[21:52] <lizsac> at least there was a stop script dialog that saved me

[21:52] <azawawi> lizsac: jquery cleans automatically on window.unload...

[21:52] <lizsac> yeah still waiting for the google chrome to be released for freebsd!

[21:53] <[particle]1> or maybe you should be running android

[21:53] <lizsac> i couldn't get android to work

[21:54] <lizsac> i wanted to start making android apps but never got the emulator working

[21:54] *** cognominal joined
[21:54] <lizsac> though my java ide is oracle's jdeveloper

[21:56] <lizsac> it has really nice buttons

[21:58] <lizsac> azawawi: ever play with php?

[21:58] <azawawi> lizsac: nop

[21:58] *** alester joined
[22:00] * lizsac force kills his firefox

[22:01] <azawawi> i think i should be attaching mouseover events to nodes with actual text child nodes to reduce strain on browsers...

[22:01] <lizsac> i'm sure most people wouldn't have a problem

[22:02] <lizsac> it's just i only have 512mb of ram

[22:02] <lizsac> and a pIII

[22:02] <lizsac> on this laptop

[22:02] <moritz_> that doesn't mean that we should strain the user's browser more than necessary

[22:02] <azawawi> lizsac: it took like 450mb to exit on my 2gb laptop [Firefox 3.0.3]

[22:03] <lizsac> yeah it's amazing i have xorg even running with firefox in the first place

[22:04] * azawawi remembers moritz_++'s earlier talk about having so many <span>s ;-)

[22:05] <moritz_> lizsac: not quite; three or four years ago 512mb where standard, and people used it with FF and x.org or xfree86. Nothing special about it.

[22:05] *** pbuetow left
[22:06] <lizsac> 512mb was standard maybe 10 years ago

[22:06] <lizsac> heh

[22:07] <moritz_> not for a poor student ;)

[22:07] <lizsac> are poor students even considred a standard?

[22:07] <[particle]1> :)

[22:07] <moritz_> by poor students, yes.

[22:08] * moritz_ seriously doubts that 10 years ago any consumer PC had 512mb RAM

[22:09] <lizsac> i found a 19" LCD by the dumpster in the parking garage a few weeks back

[22:09] <lizsac> had a bad svga cable

[22:10] <lizsac> i keep finding stuff out there

[22:10] <lizsac> i need to stop dragging crap back to my apartment

[22:10] *** gbacon left
[22:11] <lizsac> lemme see what are we talking about 98

[22:12] <lizsac> yeah i remember everyone oogling over my p200 with 512MB ram!

[22:15] <lizsac> i could buildworld in under 12hrs

[22:17] <moritz_> wow, STD_syntax_highlight took 12 minutes to hilight STD.pm

[22:17] <azawawi> http://dev.jquery.com/ticket/2586

[22:17] <lambdabot> Title: #2586 (Firefox3b4 hangs on page leave) - jQuery - Development

[22:17] *** masak left
[22:18] <azawawi> moritz_: how many nodes for STD.pm?

[22:18] <azawawi> moritz_: it will be shown on the right when you load it the first time...

[22:19] <moritz_> 77k iirc

[22:19] <moritz_> now FF uses 1GB RAM

[22:19] <azawawi> moritz_: 1GB when events are bound or at startup?

[22:20] <moritz_> now. After I clicked "show syntax tree"

[22:20] <moritz_> 77071 nodes

[22:21] * azawawi wonders if moritz_ can share it so he can test it

[22:21] <moritz_> sure, just a second..

[22:22] <moritz_> actually the syntax tree does work. It's just awefully slow.

[22:22] *** gbacon joined
[22:23] <moritz_> azawawi: http://moritz.faui2k3.org/tmp/STD.pm.html.gz there you go

[22:24] * azawawi is testing it over chrome...

[22:24] <moritz_> speaking of going... need to go to bed now :(

[22:25] <azawawi> me 2 it is 1:24 AM here ;-)

[22:25] <moritz_> sleep well ;)

[22:25] <[particle]1> you should come here, it's only 3:25p

[22:26] <TimToady> yeah, but here it's 3:25p and warm

[22:27] <[particle]1> :P

[22:27] <[particle]1> i'll be in your neighborhood on friday

[22:27] <TimToady> thanks, I'll watch out :)

[22:35] *** apeiron joined
[22:45] *** mberends joined
[22:49] *** alester left
[22:56] *** hercynium left
[23:07] *** alester joined
[23:07] *** azawawi left
[23:12] *** [particle]1 left
[23:16] *** iblechbot left
[23:17] *** alester left
[23:21] *** apeiron_ joined
[23:28] *** apeiron left
[23:41] *** zamolxes left
[23:51] <meppl> good night

[23:51] *** alester joined
[23:52] *** meppl left
[23:55] *** alester left
