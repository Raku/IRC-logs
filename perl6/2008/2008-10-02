[00:00] <Tene> Okay.

[00:01] <TimToady> it doesn't seem necessary to be able to look up a block by its label, anyway

[00:02] <TimToady> on the other hand, if all implementations end up making it easy, who knows...

[00:02] <TimToady> but the p6 model doesn't require it

[00:03] <TimToady> kinda like it doesn't actually require continuations, quite...

[00:25] *** Chillance left
[00:26] *** wayland76 joined
[00:32] <pugs_svn> r22482 | lwall++ | [Cursor] fix macro bug induced by implicit {*} reductions

[00:57] *** felipe left
[01:12] *** Limbic_Region left
[01:14] *** jdv79 left
[01:39] *** charsbar left
[01:39] *** charsbar_ joined
[01:58] *** PZt left
[02:06] *** sri_work left
[02:09] *** Ontolog left
[02:14] *** s1n joined
[02:15] *** PZt joined
[02:21] *** Ontolog joined
[02:42] *** felipe joined
[02:45] *** wknight8111 left
[02:45] *** Alias_ joined
[02:50] <wayland76> Can anyone see the problem with this? ...

[02:51] <wayland76> role    testrole { method infix:<==> (testrole $self, testrole $other --> bool) { print "foo\n";}}

[02:51] <wayland76> ???

[02:51] <wayland76> (It gives an error in parrot 0.7.0)?

[02:57] <pmichaud> rakudo doesn't support defining/overloading operators yet.

[02:57] <pmichaud> beyond that, I don't know that infix:<==> will be a method.

[02:58] <wayland76> Hmm, that would do it :). 

[02:58] <wayland76> I don't understand the bit about infix:<==> not being a method

[02:58] <pmichaud> it's a multisub

[02:59] <pmichaud> multi sub infix:<==> ( $a, $b ) { ... }

[02:59] <wayland76> Ok, got it :)

[02:59] <wayland76> I had that first, but it wasn't working :)

[02:59] <pmichaud> right -- see "rakudo doesn't support defining/overloading operators" above :-)

[03:00] <pmichaud> it should come in the next month or so, but we've got to do quite a few parser improvements to get there

[03:00] <wayland76> I'll keep an eye on the Rakugo page, then :)

[03:00] <wayland76> Ok, great :)

[03:02] <wayland76> (I've seen the ROADMAP file, btw, but only had a cursory glance over it, so I missed this -- stupido (that's me :) ))

[03:05] *** yewenbin joined
[03:09] *** eternaleye_ joined
[03:13] *** meteorjay left
[03:18] <pugs_svn> r22483 | cjfields++ | [t/spec] added tests for checking number of times closures are invoked, ready for fudge

[04:07] *** sail0r joined
[04:08] *** Bzek joined
[04:12] *** sail0r left
[04:18] <pugs_svn> r22484 | lwall++ | [Cursor] add_macro couldn't handle macro name containing single quotes

[04:35] *** alester joined
[04:54] *** iblechbot joined
[04:56] *** [particle]1 joined
[05:11] *** Psyche^ joined
[05:12] *** alester_ joined
[05:12] *** [particle] left
[05:26] *** alester left
[05:27] *** Patterner left
[05:27] *** Psyche^ is now known as Patterner

[05:43] *** [particle] joined
[06:02] *** [particle]1 left
[06:15] *** alester_ left
[06:29] <azawawi> rakudo: say "Hi";

[06:29] <p6eval> rakudo 31561: OUTPUT[Hi␤]

[06:30] *** ashizawa joined
[06:32] *** iblechbot left
[06:34] *** ashizawa left
[06:35] *** ashizawa joined
[06:44] <literal> rakudo: "Hi".WHAT

[06:44] <p6eval> rakudo 31561: RESULT["Str"]

[06:44] <literal> rakudo: "Hi".WHAT.WHAT

[06:44] <p6eval> rakudo 31561: RESULT["Str"]

[06:57] <azawawi> is feather.perl6.pl down?

[06:58] <moritz_> it .nl, not .pl

[06:58] <moritz_> and it's up

[06:59] <azawawi> hmmm

[06:59] <azawawi> cant seem to reach it

[06:59] <moritz_>  then you have a network problem

[07:08] *** simcop2387 left
[07:10] <azawawi> yup im down for today... DNS problems...

[07:11] *** azawawi left
[07:11] *** azawawi joined
[07:11] <moritz_> feather.perl6.nl has address 193.200.132.135

[07:12] <azawawi> pinging doesnt work

[07:13] <azawawi> so i guess it is not dns; it is a routing problem in my ISP

[07:14] *** kst` left
[07:14] *** kst`` joined
[07:23] *** hanekomu joined
[07:25] *** azawawi left
[07:28] *** simcop2387 joined
[07:31] *** penk joined
[07:47] <rakudo_svn> r31562 | moritz++ | [rakudo] implement regex and closure handling in Str.trans.

[07:47] <rakudo_svn> r31562 | moritz++ | Patch courtesy by Chris Fields, cjfields++. Closes RT #59446

[07:50] <pugs_svn> r22485 | moritz++ | [t/spec] unfudged trans.t for rakudo

[07:52] *** zamolxes left
[07:55] <rakudo_svn> r31563 | moritz++ | [rakudo] more transliteration tests for spectest_regression

[08:09] *** Torment left
[08:11] *** tomyan joined
[08:15] <moritz_> up to 4414 passing tests now

[08:19] *** elmex joined
[08:19] *** elmex left
[08:19] *** elmex joined
[08:32] *** Liempt joined
[08:32] *** Liempt left
[08:32] *** meteorjay joined
[08:45] *** viklund joined
[08:59] *** yewenbin left
[09:03] *** barney joined
[09:25] *** mtve left
[09:27] *** mtve joined
[09:41] *** dmq joined
[09:41] *** dmq left
[09:42] *** mtve left
[10:46] *** kanru left
[10:53] *** penk left
[11:02] *** iblechbot joined
[11:18] *** ruoso joined
[11:20] *** azawawi joined
[11:40] <azawawi> @seen moritz_

[11:40] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 3h 24m 38s ago.

[11:42] *** lumi left
[11:57] *** Alias_ left
[12:02] <azawawi> @tell moritz_ http://rt.perl.org/rt3//Public/Bug/Display.html?id=59552

[12:02] <lambdabot> Consider it noted.

[12:17] *** kanru joined
[12:24] *** bennymack-work left
[12:47] *** masak joined
[12:48] *** abra joined
[12:52] *** ashizawa left
[13:03] *** drbean_ joined
[13:09] <azawawi> @tell moritz http://rt.perl.org/rt3//Public/Bug/Display.html?id=59556

[13:09] <lambdabot> Consider it noted.

[13:12] *** Lorn joined
[13:17] *** drbean left
[13:19] *** kst`` left
[13:19] *** kst`` joined
[13:21] *** drbean_ left
[13:24] *** pyrimidine joined
[13:33] *** pyrimidine left
[13:35] *** cognominal left
[13:35] *** aindilis left
[13:35] *** aindilis joined
[13:37] *** cognominal joined
[13:38] <masak> rakudo: for {next}, {nothing}, {next} { $_(); say "whoa!" }

[13:38] <p6eval> rakudo 31564: OUTPUT[whoa!␤]

[13:41] *** barney left
[13:42] <masak> rakudo: class A { method x { self++ }; method increment { say "I can haz one bigger?" } }; A.new.x

[13:42] <p6eval> rakudo 31564: OUTPUT[increment() not implemented in class 'A'␤current instr.: 'postfix:++' pc 15846 (src/gen_builtins.pir:9887)␤]

[13:42] <masak> :(

[13:43] <masak> should I consider that a bug, or is it just Parrot internals poking out that makes it look like a bug?

[13:44] *** jhorwitz joined
[13:47] *** drbean_ joined
[13:51] * ruoso sees the issue of "tree grammar" appearing on the list again, and that makes him remeber YAPC::EU::2007... 

[13:53] *** drbean__ joined
[13:55] *** eternaleye__ joined
[13:55] <masak> ruoso: why? (I wasn't there)

[13:56] *** eternaleye_ left
[13:56] *** eternaleye__ is now known as eternaleye

[13:56] <ruoso> we had discussed this issue and we pretty much found out that XPath and XQuery are good enough... and that we could have a XPath grammar

[13:59] <ruoso> because XPath might look like being specific to XML, but it actually isn't

[13:59] <masak> no

[13:59] <wayland76> Hmm

[13:59] <wayland76> That's interesting :)

[14:00] <wayland76> So does that mean that you're recommending that we implement something XPath-like as a sublanguage?

[14:01] <masak> it will happen

[14:01] <ruoso> maybe not even XPath-like, but actually XPath

[14:01] <ruoso> I don't know how to compose the XPath expressions

[14:01] <ruoso> hierarchically

[14:01] <wayland76> Hmm.  I think there's room for improvement in XPath :)

[14:02] <ruoso> like tokens and rules can

[14:03] <ruoso> btw... the definition is not "dimension", but "axis"

[14:03] <wayland76> Anyway, I'm happy if the whole thing provokes a discussion about the whole thing fits together :)

[14:04] <ruoso> one of the "axes" of XPath is attribute, which in P6 mean a method call anyway...

[14:04] *** drbean___ joined
[14:05] *** drbean_ left
[14:06] * ruoso taking the output of STD5_dump_match to sketch some ideas about that

[14:10] *** drbean_ joined
[14:10] *** drbean__ left
[14:10] <ruoso> ok... I just found out how to compose hierarchically XPath expressions...

[14:11] <ruoso> <...> is not valid inside a XPath expression... that should mean a sub-path...

[14:11] <ruoso> ;)

[14:12] *** hanekomu left
[14:12] <wayland76> I'm unsure what you mean by "hierarchically"

[14:13] <ruoso> a xpath expression that requires another expression to be evaluated as part of that expressoin

[14:13] <wayland76> Oh, ok :)

[14:13] <ruoso> and that might return an already transformed structure

[14:14] <wayland76> That's a new one :). 

[14:14] <wayland76> One thing I'd like to see instead of XPath -- the filters in the [] part could be even more useful if they were in Perl :)

[14:15] <pasteling> "ruoso" at 201.45.49.162 pasted "first sketch on what a xpath-grammar could look like" (6 lines, 131B) at http://sial.org/pbot/32425

[14:15] <ruoso> in that example, the root element is dropped from the structure

[14:16] <ruoso> and <statementlist> would be another token...

[14:17] <ruoso> it would probably make sense to turn that expression into a relativepath...

[14:18] *** abra left
[14:18] <wayland76> Not sure I understand either P6 grammars or what you're trying to achieve well enough to understand what's actually going on :)

[14:19] <ruoso> let me sketch a little more

[14:19] <wayland76> But I was trying to implement an XPath variant in C recently, so I've got some grasp on its grammar

[14:19] <wayland76> :)

[14:20] <wayland76> (Btw, it's midnight here, so I probably won't be here for too much longer)

[14:20] <ruoso> wayland76, please check the logs later then...

[14:21] <wayland76> Btw, ruoso, just got your e-mail, and will peruse :)

[14:21] <wayland76> (and my most recent message got crossed with yours in the ether, so I actually say some of the same things :) )

[14:21] <ruoso> ;)

[14:23] *** drbean___ left
[14:25] <masak> wayland76: what do you mean by XPath being too inflexible to be Perl?

[14:25] *** drbean__ joined
[14:26] <masak> I'm not trying to defend XPath, just curious

[14:26] *** eternaleye_ joined
[14:27] *** drbean_ left
[14:30] *** eternaleye left
[14:31] *** kanru left
[14:32] <wayland76> inflexible?  Well, I guess the way I see it, each XML element represents an instance of a type...

[14:33] <wayland76> ...oops

[14:33] <wayland76> Sorry, I started talking about why XPath isn't the best for non-XML trees :)

[14:33] <ruoso> is '[foo]?' the token for "match optionally the text foo without creating a capture?

[14:34] <wayland76> As far as inflexibility goes, it's basically just what I was saying above -- I want to be able to use Perl in the [] part of XPath, not just XPath expressions

[14:35] *** pyrimidine joined
[14:35] <pasteling> "ruoso" at 201.45.49.162 pasted "a little more ellaborated version of the sketch" (27 lines, 843B) at http://sial.org/pbot/32426

[14:36] <wayland76> Anyway, bedtime all, so gotta go.  Will try to remember to check the logs tomorrow or Monday, whenever I get back here

[14:36] <wayland76> ...ok, *after* I've looked at the pasteling :)

[14:37] <wayland76> ruoso: still unsure what you're demonstrating, but let me clarify my questions...

[14:37] *** drbean___ joined
[14:37] <wayland76> it could be...

[14:38] <ruoso> wayland76, that is based on the actual output of the STD match

[14:38] <wayland76> a) a proposal to be able to use XPaths in grammar

[14:38] <ruoso> it would be able to turn the STD parse tree into other hierarchy of other types

[14:38] <ruoso> in this case, turning the semantic-less parse tree into semantic "Module", "Statement" types

[14:38] <wayland76> ruoso: ok, I'll keep reading with that extra info in mind

[14:39] <wayland76> ...so we're talking about the transformation of a parse tree?

[14:39] <ruoso> yes...

[14:39] <ruoso> (btw... the par that lists <statement> should have a + modifier after it

[14:39] <wayland76> Is the parse tree just an example of a type of tree?

[14:40] <ruoso> yes

[14:41] <wayland76> (just to check), so we could've been talking about file trees, or the tree of an XML document instead?

[14:41] <wayland76> (sorry, filesystem trees)

[14:41] <ruoso> yes

[14:42] *** drbean__ left
[14:45] *** sri_work joined
[14:47] <wayland76> I'm not sure about the syntax of some parts (eg. <<   text() = module >>, but I think I'm starting to get the idea.  

[14:49] <wayland76> Just so I understand, am I right in understanding that the parts with the XPath syntax are a proposed syntax, rather than something that's possible now?

[14:49] <pasteling> "ruoso" at 201.45.49.162 pasted "even more ellaborated version of the sketch" (29 lines, 1K) at http://sial.org/pbot/32427

[14:49] *** yves left
[14:49] <ruoso> wayland76, yes... it's a sketch of a proposed syntax

[14:50] <wayland76> Ok. 

[14:50] <pasteling> "ruoso" at 201.45.49.162 pasted "the last wasn't quite right" (29 lines, 1K) at http://sial.org/pbot/32428

[14:51] <wayland76> So how do we implement that?

[14:51] <wayland76> ie. how do we distinguish between an XPath and the division operator?

[14:52] <moritz_> I think / as an operator is already occupied too much

[14:52] <lambdabot> moritz_: You have 1 new message. '/msg lambdabot @messages' to read it.

[14:52] <ruoso> that's the purpose of the xtoken thingy

[14:52] <ruoso> it defines a different syntax inside that block

[14:52] <wayland76> Ok, I see

[14:53] <moritz_> the general, friendly form of introducing a DSL is q:xpath{ .... } or something along these lines

[14:53] <ruoso> hmmm... token doesn't have a q: in the front

[14:53] <wayland76> moritz_: We're proposing that it be used as a path separator as well as a division ... is that new?

[14:54] <ruoso> moritz_, my idea is that the entire 'xgrammar' block is parsed by a different grammar...

[14:54] <moritz_> wayland76: it's in general a bad idea...

[14:54] <moritz_> wayland76: because in perl, the operators determine the context of the operands...

[14:54] <moritz_> wayland76: so current / always implies numeric context

[14:54] <ruoso> moritz_, it's not Perl at all, so it's not the same operator

[14:54] <ruoso> moritz_, it's not even the same grammar

[14:55] <moritz_> ruoso: ok, then... why not?

[14:55] *** drbean___ left
[14:55] <ruoso> why not the same grammar?

[14:55] <moritz_> in lexical scopes everything is fair ;)

[14:55] <moritz_> that was a rhetorical question

[14:55] <ruoso> ah

[14:55] <ruoso> ok

[14:55] <ruoso> ;)

[14:56] <wayland76> moritz_: The way I was origincally talking about (on the mailing list), the / would only be used as a path operator when it followed a Plex or Plex::Node

[14:56] <wayland76> (or array thereof)

[14:56] <ruoso> wayland76, but it doesn't need to be seen that way... because the places that expect XPath won't be expecting Perl code

[14:57] <ruoso> so there's no confusion

[14:57] <moritz_> so in $x = Plex.new; $x / 4; # will $x be numified? or 5 be plexified?

[14:57] <wayland76> Yeah, as long as we keep discussing the best way to do trees, I'm happy :)

[14:57] <moritz_> it sounds a bit like having + both for addition and string concatenation, which is a bit ugly, IMHO

[14:58] *** yves joined
[14:58] <wayland76> moritz_: I would say that the left operator would determine what it was

[14:59] *** silug left
[14:59] <moritz_> why?

[15:00] <ruoso> does this discussion have a point? we're already considering a different grammar.... 

[15:00] * ruoso runs

[15:00] <PerlJam> he's a fan of arbitrary distinctions

[15:00] <wayland76> ruoso: I guess I'd still like to be able to use Perl in the filtering stage of XPath :)

[15:00] <ruoso> wayland76, it's just a matter of defining that inside the [ ] it's Perl code

[15:00] <ruoso> and that's all

[15:00] <ruoso> problem solved

[15:00] <wayland76> ruoso: Ok, fine by me :)

[15:00] <ruoso> no need to mix the syntaxes 

[15:00] <wayland76> But then it's not XPath any more :)

[15:00] <ruoso> fine fine...

[15:01] <ruoso> XPath doesn't support the <subexpression> also

[15:01] <ruoso> so, yes... it's not XPath anymore ;)

[15:01] <wayland76> moritz_: I'm not sure I agree, but ruoso has kindly invalidated any point I saw to the argument :)

[15:01] <wayland76> (ie. any point I saw in continuing the argument)

[15:02] <moritz_> well, all the hooks are in place

[15:02] <wayland76> in place for what?

[15:02] <moritz_> go write a library, and as soon as user defined operators and derived grammars work, profit

[15:02] <wayland76> ruoso's idea?

[15:02] <moritz_> wayland76: for all the stuff we've discussed so far

[15:02] <wayland76> ok

[15:02] <moritz_> wayland76: at least in the specs the hooks are in place

[15:03] <wayland76> I'm already working on a Plex library which models the objects

[15:03] <moritz_> extending existing types (like Hash, Array), adding DSLs, new operators...

[15:03] <wayland76> But it's pretty much useless now :)

[15:03] <ruoso> wayland76, still, defining the semantics and syntax would be of great help...

[15:03] <wayland76> (ie. my code is useless, due to there not being much)

[15:03] <wayland76> ruoso: Agreed

[15:04] *** alester joined
[15:04] <ruoso> wayland76, would you be interested in continuing from where I stopped?

[15:04] <ruoso> wayland76, I don't really have the time to work in that

[15:04] <ruoso> and there are several semantic issues on how it's going to be parsed

[15:04] <ruoso> and specially, in which node it is when evaluating which part of the expression...

[15:05] <wayland76> ruoso: well, not right now, but maybe monday or whenever I get back to Perl6 :)

[15:05] <ruoso> one thing I'm quite confident is that every part of the path expression can be seen as method call

[15:05] <wayland76> Quite possibly

[15:06] <pyrimidine> moritz_: (not to interrupt) thx for the .trans commit

[15:06] <ruoso> wayland76, but my major concern is when to use the method in list context and when to use in scalar context...

[15:07] <ruoso> i.e the 'statementlist' xtoken 

[15:07] <moritz_> pyrimidine: thank you for the patch ;)

[15:07] *** alanhaggai left
[15:07] <pyrimidine> np

[15:08] *** drbean___ joined
[15:08] <ruoso> anyway...

[15:08] * ruoso lunch &

[15:09] <ruoso> wayland76, please consider extending this idea :) it will be much helpful in very short term

[15:09] *** eternaleye_ left
[15:11] <pyrimidine> moritz_: btw, did we ever sort out how we would handle :g and other regex modifiers?  Didn't see it come up on the list, but maybe pmichaud asked in the weekly perl6 meeting...

[15:11] <wayland76> ruoso: Well, ok, I'll do that, but it may be a few days :)

[15:11] <[particle]> yes, :g will be on the op, not inside the regex (for now)

[15:12] <[particle]> m:g/.../ not m/:g.../

[15:12] <[particle]> you'll see the design meeting discussion when chromatic posts it

[15:12] <pyrimidine> that def. makes it easier to implement this in .match, .subst (i.e. pass named arguments)

[15:13] *** wayland76 left
[15:13] <moritz_> [particle]: so what will $str.subst(rx:g/.../) translate to on the side of the callee?

[15:15] *** drbean_ joined
[15:15] <[particle]> :g is an adverb on the operator

[15:16] <[particle]> so, $str.subst(:g rx/.../) or something

[15:17] <moritz_> in inside the sub subst { ... } I'll just ask if $regex ~~ :g ?

[15:17] <[particle]> :g is not and adverb on the regex

[15:17] <[particle]> so you can't ask $regex ~~ :g

[15:17] <[particle]> you have to ask .subst

[15:18] <moritz_> so subst has to ask self?

[15:18] <[particle]> how do you introspect an op to tell what attributes have been set?

[15:18] * moritz_ finds that very confusing

[15:18] <moritz_> [particle]: what about subs that can take multiple regexes?

[15:18] <moritz_> sub compare_matches($str, $re1, $re2) { ... }

[15:19] <moritz_> how will that know which adverbs are set on $re1 and $re2, if it's not stored in the regexes?

[15:20] <pyrimidine> This is an example from S05: $target.subst(rx:g[pattern], { $() op expr })

[15:20] <[particle]> i don't know. i was a fly on the wall in the discussion. larry and patrick are the two to ask for final answers, but i'm afraid it's still rattling around in larry's head

[15:20] <pyrimidine> which to me indicates :g is part of the regex (not a named arg)

[15:20] <pyrimidine> [particle]: ok, so it may change a bit

[15:21] <[particle]> it may change entirely

[15:21] <[particle]> i think the way to move forward is to implement something, and see what problems that causes/solves

[15:21] <moritz_> well, I'm sure that Larry will do a sane thing, and if not, we can convince him that insanity isn't appropriate here ;)

[15:22] <pyrimidine> agreed.  It's wouldn't be hard to implement :g as a named argument in .subst

[15:23] <pyrimidine> as for .match, I assume :g would get back a (lazy?) list of Matches

[15:23] <PerlJam> It seems to me that this is a case where things that are different should look different.  we can use :i on the inside of a regex because that's tied to the regex.  But "global match" isn't a function of the regex, but how you apply it.

[15:24] <moritz_> aye

[15:24] <pyrimidine> yes

[15:24] <moritz_> likewise :c

[15:24] <PerlJam> I.e., having / :i foo /  work would make me expect  / :g foo / to work  

[15:25] <moritz_> which looks kinda useless

[15:25] <PerlJam> (I don't know what different should look like but I think they should be different syntactically somehow)

[15:25] *** bennymack joined
[15:25] *** drbean__ joined
[15:26] <PerlJam> Luckily @Larry has said that non-alphanumerics are de facto "special", so maybe we could appropriate one of them for this use

[15:27] *** drbean___ left
[15:32] *** drbean___ joined
[15:34] *** drbean_ left
[15:37] *** hercynium joined
[15:43] *** drbean__ left
[15:48] *** masak left
[15:49] *** drbean___ left
[15:51] *** kanru joined
[15:52] *** justatheory joined
[16:02] *** kst`` left
[16:03] <azawawi> rakudo: my $os = $*EXECUTABLE_NAME;

[16:03] *** kst``` joined
[16:03] <p6eval> rakudo 31565: RESULT[undef]

[16:03] <azawawi> pugs: my $os = $*EXECUTABLE_NAME;

[16:03] <p6eval> pugs: RESULT[\undef]

[16:04] <azawawi> pugs: my $os = $*EXECUTABLE_NAME; say $os;

[16:04] <p6eval> pugs: OUTPUT[␤]

[16:09] *** justatheory left
[16:28] <azawawi> is feather a bit slow today?

[16:29] <azawawi> feather (ONE): tclsh -> 2478m VIRT...

[16:30] <azawawi> @tell juerd feather (ONE) is a bit slow... i suspect tclsh (2478m VIRT) is the culprit...

[16:30] <lambdabot> Consider it noted.

[16:33] *** ruoso left
[16:34] *** scrottie left
[16:35] *** justatheory joined
[16:36] <azawawi> does anyone have root access on feather1?

[16:41] <moritz_> I don't see such a job anymore

[16:43] <azawawi> moritz: top and then see non-idle

[16:43] <azawawi> pid: 10510

[16:43] <azawawi> 92.9% MEM and growing

[16:43] <moritz_> killed

[16:44] <azawawi> cool but after 8 hours it grew to 2.2GB

[16:44] <azawawi> and the new tclsh is like 9.1% and growing

[16:47] *** Bzek left
[16:48] *** drbean_ joined
[16:53] *** apeiron_ joined
[16:55] *** Exodist joined
[16:58] *** drbean___ joined
[17:00] *** ab5tract joined
[17:01] *** apeiron left
[17:05] *** drbean_ left
[17:06] * azawawi wonders why tclsh is still taking 2.2g on feather1

[17:12] *** exodist_ joined
[17:12] *** apeiron joined
[17:16] *** drbean___ left
[17:18] *** Exodist left
[17:21] *** apeiron_ left
[17:21] <pugs_svn> r22486 | lwall++ | [STD] more ACTIONS infrastructure, can now set $ACTIONS to a class in which

[17:21] <pugs_svn> r22486 | lwall++ | methods are called according to reduction tag.

[17:23] <pmichaud> I'd like to set up a mailing list to report pugs svn commits.  Would this be better done (1) via Google groups, (2) on my private server, or (3) other.  And once I set up the mailing list, would anyone be able to get svn on pugs to forward commit details to that list?

[17:24] *** kst``` left
[17:24] <moritz_> I think it doesn't matter where the list is

[17:25] *** kst``` joined
[17:27] <pasteling> "azawawi" at 212.38.136.170 pasted "$*EXECUTABLE_NAME & $*OS globals.pir patch" (27 lines, 820B) at http://sial.org/pbot/32433

[17:28] <azawawi> i can only get it to work with $*OS but not with $?OS

[17:28] <moritz_> they could, in principle, have different values

[17:29] <azawawi> the thing is that with $?OS i simply get the PAST:VAR out of scope error

[17:29] * [particle] prefers google groups

[17:29] <[particle]> it's straightforward to set up svn to forward commits to an ml

[17:29] * azawawi thinks that google groups is a good idea also

[17:29] <moritz_> pmichaud: I have root privileges on feather, so I could set up a mailing script

[17:43] <TimToady> note to treematching folks: it is envisaged that signatures in a rule will match nodes in a tree

[17:46] <[particle]> t\spec\S02-builtin_data_types\anon_block..................Could not find non-existent sub plan

[17:46] <[particle]> pmichaud: any ideas?

[17:59] *** drbean__ joined
[18:01] *** tomyan left
[18:09] *** Lorn left
[18:09] <ewilhelm> azawawi, I found a 5.10.0-ism '//' in pugs's Makefile.PL

[18:11] <[particle]> we can get rid of v6-alpha everywhere, yes?

[18:16] *** drbean__ left
[18:17] *** zamolxes joined
[18:18] *** justatheory left
[18:19] *** drbean__ joined
[18:35] *** ludan joined
[18:38] <pmichaud> [email@hidden.address]
[18:38] <pmichaud> if someone can get svn to forward commits to that address, we can announce it

[18:39] *** drbean__ left
[18:40] *** drbean__ joined
[18:40] <pmichaud> azawawi:  $?OS is a compile-time variable, so it's not exactly the same as $*OS

[18:41] <pmichaud> at present rakudo isn't doing much in the way of compile-time variables, although that will likely change soon.

[18:41] <azawawi> i know but most tests in S02-magicals are using $?

[18:42] <azawawi> pmichaud: how do i define a $? global variable?

[18:42] <pmichaud> it has to be defined in the compiler -- probably as part of actions.pm

[18:42] <pmichaud> basically we have to use the value at compile-time

[18:42] *** kst``` left
[18:42] *** kst``` joined
[18:46] <pmichaud> so, if I have    my $x = $?OS;     then the compiler needs to switch that to be something like    my $x = 'Linux ...';

[18:46] <azawawi> i see

[18:47] <pmichaud> (except that $?OS should probably be some sort of object, not just a string.  We'll have to think about that a bit.)

[18:47] <azawawi> so the change wont be as easy as i first thought...

[18:48] <pmichaud> we could *fake* $?OS to act like $*OS for now, though, assuming that the compile-time value will be the same as the runtime value.

[18:48] <pmichaud> But that sounds like a serious cheat.

[18:50] <azawawi> the thing that i dont understand is how the PAST compiler sees $?OS as $OS but not $*OS

[18:57] *** drbean__ left
[19:00] <pmichaud> I don't understand the question.

[19:01] *** justatheory joined
[19:06] *** ksem joined
[19:07] <ksem> Evening.

[19:08] *** ksem left
[19:11] <azawawi> pmichaud: r u there?

[19:12] <pmichaud> here.

[19:12] <azawawi> im sorry i wasnt clear in my last question

[19:12] <pmichaud> no problem.  :-)  Perl has lots of murky areas sometimes.  

[19:13] <azawawi> set_hll_global("$*OS",...) works perfectly but $?OS results in a scope error and it sees it as $OS

[19:13] <[particle]> is the ? twigil implemented?

[19:14] <pmichaud> I don't think we implement the ? twigil yet.

[19:14] <azawawi> i dont know... that's why im asking ;-)

[19:14] <[particle]> there you go.

[19:14] <azawawi> cool

[19:14] <pmichaud> I'm thinking we might cheat for now and make the ? twigil act like *, though.

[19:14] <[particle]> works for me

[19:14] <pmichaud> but that feels like an awfully big cheat.  :-|

[19:15] <[particle]> until we're failing tests because of the cheat, all's fair ;)

[19:15] <azawawi> we're failing a lot of tests because we dont support ? twigil

[19:16] <azawawi> btw, where do we implement the ? twigil ??

[19:22] *** Lorn joined
[19:22] <[particle]> needs to be parsed in src/parser/grammar.pg, if it's not already

[19:22] <pmichaud> I'm pretty sure it's parsed in grammar.pg already

[19:23] <[particle]> then probably the variable method in src/parser/actions.pm needs modification

[19:23] <pmichaud> right.  but ?-twigil variables are a little special.

[19:23] <pmichaud> for example, $?LINE needs to be able to query the line number from the match object.

[19:24] <[particle]> well, if you're copying *, then it's in variable, no?

[19:24] <pmichaud> yes, if we just treat ? the same as *, then it's easy.

[19:24] <pmichaud> but that doesn't work for many ? variables

[19:25] <pmichaud> for example, there's not a $*PACKAGE global.

[19:26] *** drbean__ joined
[19:26] <[particle]> true

[19:27] <pmichaud> so, things like $?CLASS, $?MODULE, $?LINE, etc. aren't represented in PAST as normal PAST::Var lookups.  Generally they become PAST::Val nodes of some sort.

[19:27] <pmichaud> at runtime, $?LINE is a constant.

[19:28] <pmichaud> anyone know what needs to be done to get pugs svn commit to post to the mailing list I just created?

[19:29] <[particle]> need to add a post-commit hook to the pugs svn repo

[19:29] <[particle]> google 'svn post commit email'

[19:30] *** exodist_ left
[19:41] *** Exodist joined
[19:41] <rakudo_svn> r31569 | particle++ | [rakudo] accept apostrophe (' and -) in identifiers

[19:44] *** drbean__ left
[19:54] <pugs_svn> r22487 | particle++ | [t] remove use of external module

[19:56] *** drbean joined
[19:58] *** kst``` left
[19:58] *** kst``` joined
[20:02] *** drbean_ joined
[20:07] *** pyrimidine left
[20:13] *** drbean___ joined
[20:15] *** drbean left
[20:17] *** pyrimidine joined
[20:21] *** drbean_ left
[20:28] *** drbean__ joined
[20:30] *** drbean___ left
[20:39] *** pmurias joined
[20:40] <pugs_svn> r22488 | moritz++ | [t/spec] unfudge passing transliteration tests

[20:41] <pugs_svn> r22489 | particle++ | [t] improve sub names in export tests

[20:44] * pmurias is back home for the weekend so has internet access again ;)

[20:45] <moritz_> pmurias: did you notice that STD.pm got reduce actions?

[20:46] *** ab5tract left
[20:46] <pmurias> looking

[20:46] <pmurias> moritz_: hi

[20:47] <moritz_> hi pmurias ;)

[20:49] * pmurias needs "This week in #perl6" ;)

[20:49] *** drbean__ left
[20:50] *** drbean__1 joined
[20:51] *** iblechbot left
[20:51] <pmurias> moritz_: having that builting instead of inheriting and using nasty hacks is nice

[20:54] * moritz_ reports 4424 passing spec tests for rakudo

[20:56] <azawawi> moritz_++

[20:56] *** drbean_ joined
[20:56] * moritz_ hates RT

[20:57] <moritz_> why does it redirect me to the public interface after successful login?

[20:57] <azawawi> if you use the public url, it does...

[20:58] *** iblechbot joined
[20:59] <moritz_> azawawi: could please send your patches to rt as attachments? either your mail client or RT wraps  the lines of inline patches

[21:00] <azawawi> moritz_: hmmm let me check

[21:00] <pmurias> what would be a good name for a STD parse tree to mold compiler?

[21:01] <[particle]> mildew is mold growing on fabric

[21:02] <azawawi> moritz_: gmail is the culprit...

[21:02] <azawawi> moritz_: would u like a final any-str.pir with all patches applied?

[21:03] <moritz_> azawawi: no, one by one is fine

[21:03] <moritz_> azawawi: with p5cho(m?)p I'd like to wait until pmichaud has refactored the scalars/list/container stuff

[21:04] <moritz_> I'm reviewing/testing chomp() right now

[21:04] <pmurias> [particle]: mildew seems a nice word

[21:05] <moritz_> uhm, wtf is that .newline method in S29-str/chomp.t?

[21:05] <moritz_> I've never seen a reference to it anywhere

[21:05] <azawawi> moritz_: yeah

[21:06] <azawawi> moritz_: i was surprised when i saw it....

[21:07] <moritz_> that's... weird. unspecced. evil.

[21:07] *** drbean__ joined
[21:08] *** drbean__1 left
[21:10] <azawawi> moritz_: the patches are on RT as attachments

[21:10] <pugs_svn> r22490 | moritz++ | [t/spec] chomp.t: deleted tests involving unspecced .newline method.

[21:10] <pugs_svn> r22490 | moritz++ | Fudged for rakudo

[21:12] *** drbean___ joined
[21:13] *** zamolxes left
[21:13] *** drbean_ left
[21:15] <rakudo_svn> r31573 | moritz++ | [rakudo] implement Str.chomp, and add test to spectest_regression.

[21:15] <rakudo_svn> r31573 | moritz++ | Patch courtesy by Ahmad Zawawi <ahmad dot zawawi at gmail.com>, azawawi++

[21:15] <rakudo_svn> r31573 | moritz++ | Closes RT #59556

[21:16] <azawawi> moritz_: thx

[21:16] *** kst``` left
[21:16] *** kst``` joined
[21:17] *** jhorwitz left
[21:18] * moritz_ wants a post-commit hook that automatically closes tickets when I say 'closes RT #d+' in the commit message

[21:18] *** wknight8111 joined
[21:24] *** drbean__ left
[21:27] <pyrimidine> moritz_: only place I could find .newline is in pugs/docs/Perl6/Overview/Data.pod

[21:28] <pyrimidine> and it's def. unspecced (and quite possibly evil)

[21:29] *** drbean___ left
[21:31] <pyrimidine> line 18:        .chomp    # Returns chomped string with a .newline property giving the newline removed

[21:31] <pasteling> "azawawi" at 212.38.136.170 pasted "'make spectest' output" (161 lines, 10.9K) at http://sial.org/pbot/32441

[21:34] *** drbean__ joined
[21:35] *** pyrimidine left
[21:36] <azawawi> moritz_: This bug can be closed http://rt.perl.org/rt3//Public/Bug/Display.html?id=57014

[21:36] <lambdabot> Title: #57014: ./perl6 -e '1' gives error and segfaults

[21:38] <moritz_> azawawi: thanks, closing it now

[21:39] *** zamolxes joined
[21:39] <moritz_> azawawi: if you want to get information about tests that are not in spectest_regression, you can also run 'perl tools/update_passing_test_data.pl'

[21:40] <azawawi> moritz_: cool

[21:41] * azawawi thinks about working on RT #49586

[21:41] <azawawi> http://rt.perl.org/rt3//Public/Bug/Display.html?id=49586

[21:41] <lambdabot> Title: #49586: [TODO] Write tests for perl6 -c/-v/-e/-h

[21:44] <moritz_> the chomp.t assume that there's a perl 5 like List.chomp form

[21:44] <moritz_> *tests

[21:44] <azawawi> moritz_: Can't locate TAP/Harness.pm in @INC when running it on feather1

[21:45] <azawawi> i noticed... let me check

[21:45] * moritz_ iinstalls TAP::Harness

[21:46] <azawawi> moritz_: you're right; only one signature 'our Str multi method chomp ( Str $string: ) is export'

[21:47] <moritz_> azawawi: please try again

[21:47] * azawawi thinks it a very cool script

[21:48] <azawawi> moritz_++

[21:49] <azawawi> moritz_: one note though, it does not go through them in order

[21:49] <moritz_> azawawi: right, it just goes through them in the order in which they are found in the dir tree

[21:51] <azawawi> hmmm actually it is a bit random... e.g. S16 

[21:51] *** Limbic_Region joined
[21:52] *** pmurias left
[21:52] <moritz_> "found in the dir tree" doesn't mean "as ls returns them", but rather in the order that the inodes are stored on disk

[21:52] *** drbean__ left
[21:52] <azawawi> ;-)

[21:55] <rakudo_svn> r31574 | moritz++ | [rakudo] in tools/update_passing_test_data.pl, try to print out the number of

[21:55] <rakudo_svn> r31574 | moritz++ | planned tests instead of the number of ran tests. That's only possible for

[21:55] <rakudo_svn> r31574 | moritz++ | very new TAP::Harness versions, so be nice if it's not new enough.

[21:55] *** jferrero joined
[21:56] *** Exodist left
[21:56] <azawawi> moritz_: t/spec/S29-str/chop.t has also unspecced stuff at the end...

[21:56] *** Exodist joined
[21:58] <moritz_> azawawi: yes, that's rather obscure

[21:59] <moritz_> azawawi: especially the last two tests seem to assume that chop mutates the values in-place

[21:59] * azawawi checks svn log

[22:00] *** drbean__ joined
[22:02] *** hercynium left
[22:03] <pugs_svn> r22491 | moritz++ | [t/spec] remove two very obscure chop.t tests that seemed to assume in-place

[22:03] <pugs_svn> r22491 | moritz++ | mutating semantics. azawawi++ for noticing.

[22:05] <azawawi> they seem to come from t/unspecced/chop.t

[22:06] <moritz_> freaky, t/sunspecced/sort.t actually implements its own sort routine

[22:07] <azawawi> moritz_: to start working on RT #49586, i need RT #59570 to be committed

[22:07] <azawawi> moritz_: so that $*OS and $*EXECUTABLE_NAME work...

[22:13] <moritz_> azawawi: where is  $*EXECUTABLE_NAME specced?

[22:13] <azawawi> Variable.pod

[22:15] <azawawi> moritz_: docs/Perl6/Overview/Variable.pod

[22:15] <pasteling> "moritz_" at 89.13.235.192 pasted "$*EXECUTABLE_NAME misbehaviour?" (5 lines, 153B) at http://sial.org/pbot/32442

[22:15] <moritz_> I'd expect that to print out './foo.pl'

[22:16] <azawawi> hmmm but you ran it using #!./perl6

[22:17] <moritz_> compare with perl 5

[22:17] *** kst``` left
[22:18] *** kst``` joined
[22:18] *** drbean__ left
[22:18] <pasteling> "moritz_" at 89.13.235.192 pasted "perl 5 equivalent" (5 lines, 103B) at http://sial.org/pbot/32443

[22:20] <azawawi> $0 is not $EXECUTABLE_NAME (use English)

[22:21] <moritz_> right, that's $*PROGRAM_NAME

[22:21] <azawawi> moritz_: anyway, i only found the following in parrot

[22:22] <moritz_> azawawi: if you go by perl 5 analogy, $*EXECUTABLE_NAME should be an absolute path

[22:22] *** iblechbot left
[22:23] <azawawi> http://www.parrotcode.org/docs/ops/core.html

[22:23] <lambdabot> Title: Parrot Core Ops - parrotcode

[22:23] <azawawi> moritz_: search for interpinfo

[22:25] <moritz_> I'm half sleeping alredy, and shouldn't try to think about such things right now ;)

[22:25] <azawawi> me 2 ;-)

[22:26] <pmichaud> it's possible that parrot doesn't have a convenient hook to that information yet.

[22:26] <[particle]> moritz_: i hope by the time you wake up, 'is export' will work in rakudo :)

[22:26] <azawawi> maybe we can get it like _config() in perl6.pir

[22:27] <moritz_> [particle]: that would be great ;)

[22:27] <pmichaud> well, that would provide the parrot config information, but that probably wouldn't hold the address of the perl6 executable

[22:27] <pmichaud> but it might.

[22:27] <pmichaud> okay, I see how to enable post-commit email messages in subversion; how does one get admin access to the svn repository for pugs?

[22:28] <pugs_svn> r22492 | azawawi++ | [t/spec] removed comment about evil unspecced chomp.newline

[22:28] <[particle]> you need root on feather

[22:28] <pmichaud> I have root on feather

[22:28] <moritz_> pmichaud: either ask Juerd for access, or tell me what to do ;)

[22:28] <moritz_> oh

[22:28] <moritz_> you just need file-level access

[22:28] <pmichaud> is feather the pugscode svn repo?

[22:28] <moritz_> yes

[22:28] <pmichaud> ah.

[22:28] <moritz_> in /data/svn/

[22:29] <pmichaud> /data/svn/pugs/ ?

[22:29] <moritz_> yes

[22:30] *** ab5tract1 joined
[22:30] <moritz_> this host has a surprising number of host names

[22:30] <moritz_> perlcabal.org, parrotvm.org, pugscode.org, feather.perl6.nl

[22:31] <pmichaud> okay, going for "forgiveness rather than permission"  :-)

[22:31] <[particle]> well, parrotvm.org is now property of parrot foundation

[22:31] <[particle]> we'll keep it pointed at feather until we decide what to point it to instead :)

[22:32] <azawawi> [particle]: any idea how to get $*PID for perl6/parrot process?

[22:33] <[particle]> hrmm...

[22:34] <pmichaud> okay, pugs-commit should be enabled.  Now to do a commit and see if it works.  :-)

[22:35] <[particle]> azawawi: not possible afaics

[22:36] <pugs_svn> r22493 | moritz++ | [util/perl6.vim] coro is gone, macro rules!

[22:36] *** tristes_tigres joined
[22:36] <tristes_tigres> hi

[22:37] <moritz_> hi

[22:37] <moritz_> pmichaud: what's the google group?

[22:37] <pmichaud> just a sec

[22:39] <[particle]> pugs-commits@ iirc

[22:39] <[particle]> [email@hidden.address]
[22:39] <pmichaud> yeah, that's it.

[22:39] <pugs_svn> r22494 | pmichaud++ | Fix my cpan id in AUTHORS.

[22:40] <ab5tract1> are there any plans to write a(nother, newer) book on parrot? 

[22:41] <azawawi> http://groups.google.com/group/pugs-commits

[22:41] <lambdabot> Title: pugs-commits | Google Groups

[22:41] <moritz_> ab5tract1: Whiteknight is updating p6pe these days

[22:41] *** justatheory left
[22:42] *** justatheory joined
[22:44] * azawawi feeling sleepy

[22:45] <azawawi> good night

[22:45] *** justatheory left
[22:46] <pmichaud> what's a good return address to use for the svn commit messages?

[22:47] <pmichaud> (From: address, that is.)

[22:47] *** Khisanth left
[22:47] <ab5tract1> p6pe?

[22:47] <ab5tract1> this link is broken on the smop wiki page: http://people.debian.org/~ruoso/SMOP.pdf

[22:47] <pmichaud> ab5tract1: p6pe is "Perl 6 and Parrot Essentials"

[22:47] <pmichaud> an O'Reilly book

[22:48] <ab5tract1> okay. so there will be a new version soon-ish?

[22:48] <pmichaud> I don't know.

[22:48] <moritz_> pmichaud: so far I haven't got a mail from pugs-commits

[22:49] <[particle]> we're wearing our hacker hats, not our author hats lately

[22:49] <pmichaud> moritz_: I still have to subscribe the svn commit bot to the group (or else open the group up to "anyone can post")

[22:49] <[particle]> &

[22:52] *** eternaleye_ joined
[22:55] <ab5tract1> [particle]: i dig it. i'd rather see parrot 1.0.0 than p6pe 2 

[22:55] *** ludan left
[22:55] <ab5tract1> though i am definitely looking forward to the 4th edition of the camel book

[22:55] <moritz_> ok, first mail arrived

[22:55] *** drbean___ joined
[22:59] <pmichaud> I sent that mail manually -- now we need to see if it happens automatically upon a commit.

[22:59] <pugs_svn> r22495 | pmichaud++ | [t/spec]  Add a note about Junction.values to TASKS.

[22:59] <pmichaud> yay, it works!

[23:00] <moritz_> pmichaud++

[23:00] *** drbean_ joined
[23:01] *** tristes_tigres left
[23:06] <pmichaud> now to get a good procmail filter on it so I only see the good stuff.  :-)

[23:10] *** justatheory joined
[23:11] *** drbean__ joined
[23:13] *** kanru left
[23:14] *** drbean___ left
[23:15] *** eternaleye_ left
[23:15] *** eternaleye_ joined
[23:18] *** kanru joined
[23:18] *** drbean_ left
[23:27] *** Exodist left
[23:28] *** Exodist joined
[23:30] *** drbean__ left
[23:32] *** drbean__ joined
[23:32] <ab5tract1> how does one leave a message? i saw it happen earlier

[23:36] <ab5tract1> wait, nevermind, its a wiki i can change the link myself :)

[23:36] *** kst``` left
[23:36] *** kst``` joined
[23:37] *** drbean___ joined
[23:37] *** Exodist left
[23:43] *** kanru left
[23:43] *** Exodist joined
[23:44] *** kanru joined
[23:47] *** eternaleye_ left
[23:50] *** drbean__ left
[23:50] *** kanru3 joined
[23:51] *** Khisanth joined
[23:53] *** drbean__ joined
[23:55] *** drbean___ left
[23:59] *** eternaleye_ joined
