[00:10] *** jfredett_ joined
[00:23] *** xinming joined
[00:23] *** xinming_ left
[00:23] *** jfredett left
[00:26] *** a-jing joined
[00:26] *** a-jing left
[00:44] *** cjfields joined
[00:47] <Auzon> moritz_: t/spec/S02-builtin_data_types/range.t can be added to spectest_regression (slightly impure)

[00:47] <pugs_svnbot> r21156 | Auzon++ | [gsoc_spectest] added some range tests for *..*. Also added some tests for bugs in Rakudo's handling of Inf versus -Int. Added some basic tests for p5=>. (added 15 tests)

[00:48] <Auzon> that should be "Inf versus -Inf", and those are in t/operators/arith.t.

[00:57] *** alester_ joined
[00:59] *** jfredett_ is now known as jfredett

[01:00] *** cjfields_ joined
[01:00] *** cjfields left
[01:05] *** cjfields_ left
[01:05] <pugs_svnbot> r21157 | Auzon++ | [gsoc_spectest] Added tests for the little-mentioned reverse method on Hashes. (added 4 tests)

[01:11] <Auzon> What does this message from Rakudo mean? "Method 'isdecl' not found for invocant of class 'PAST::Op'"

[01:12] <ingy> hi scrottie  :)

[01:19] <pmichaud> it means that whatever is being declared with 'my' or 'our' isn't a simple variable.  Rakudo and PCT don't know how to handle those yet.

[01:21] <Auzon> thanks pmichaud. If you want, you can add that test I mentioned above to spectest_regression since I think moritz_ is asleep now

[01:22] <pmichaud> I'm catching up on other backlogged items :-)

[01:22] *** justatheory left
[01:22] <Auzon> ok :)

[01:23] <pmichaud> I'll get to it if I can but it might not happen soon, so moritz++ may get to it before me anyway.

[01:23] <pmichaud> any comments or thoughts to add on my recent blog post?  http://www.rakudo.org/2008/07/wheres-the-goal-line.html

[01:25] <Auzon> If you're looking for diving in points, you can mention t/TASKS, which is just a list of things to help in the test suite that require minimal knowledge. I try to keep a few items in there for other people to grab if they want.

[01:26] <pmichaud> oh, that's a good poing.  I'll add that to the post.

[01:27] <pmichaud> s/poing/point/

[01:27] <Auzon> And you may want to mention this channel as a coordination point for all things Perl 6

[01:27] <Auzon> I'm usually willing to help someone get involved with the tests.

[01:27] <pmichaud> I will do that.

[01:28] <Auzon> Thanks for the visibility pmichaud++

[01:28] <pmichaud> thank *you* for the outstanding work on the tests -- it is a huge help to Rakudo (and Perl 6)

[01:32] *** justatheory joined
[01:41] <rakudo_svn> r28928 | pmichaud++ | [rakudo]:

[01:41] <rakudo_svn> r28928 | pmichaud++ | Make sure the expression in a for statement is interpreted in

[01:41] <rakudo_svn> r28928 | pmichaud++ | list context.  cjfields++ for finding and reporting this.

[01:41] *** nipotan is now known as nipotaway

[01:42] <pmichaud> for [1..3,4..6] { say $_.WHAT; }

[01:42] <pmichaud> rakudo: for [1..3,4..6] { say $_.WHAT; }

[01:42] <p6eval> rakudo 28927: OUTPUT[Int␤Int␤Int␤Int␤Int␤Int␤]

[01:43] <pmichaud> (not updated yet)

[01:44] <Auzon> rakudo: my $a = "abc"; my @b = $a; say @b.WHAT

[01:44] <p6eval> rakudo 28928: OUTPUT[Array␤]

[01:45] <Auzon> rakudo: my $a = "abc"; my @b = $a.reverse; say @b.WHAT

[01:45] <p6eval> rakudo 28928: OUTPUT[Array␤]

[01:45] *** justatheory left
[01:46] <pmichaud> rakudo: for [1..3,4..6] { say $_.WHAT; }

[01:46] <p6eval> rakudo 28928: OUTPUT[Array␤]

[01:47] <pmichaud> yay.

[01:47] <Auzon> pmichaud++ :D

[01:47] <pmichaud> perl6:  for [1..3,4..6] { say $_ }

[01:47] <p6eval> elf 21157: OUTPUT[123456␤]

[01:47] <p6eval> ..kp6 21157: OUTPUT[syntax error at position 4, line 1 column 4:␤for [1..3,4..6] { say $_ ␤    ^ HERE␤]

[01:47] <p6eval> ..pugs: OUTPUT[1 2 3 4 5 6␤]

[01:47] <p6eval> ..rakudo 28928: OUTPUT[1 2 3 4 5 6␤]

[01:47] <pmichaud> yay.

[01:48] *** kanru left
[01:53] <Auzon> I have doubts about the isa_ok function's accuracy in Rakudo's Test.pm...

[01:54] <pmichaud> probably good reason to doubt them, too :-)

[01:54] <Auzon> @foo.WHAT and @foo ~~ Type both work, so we'll use them instead.

[01:54] <pmichaud> I have doubts about Parrot's 'isa' opcode, myself.

[01:54] <pmichaud> we can always fix Test.pm

[01:54] <Auzon> Which is what this function uses: multi sub isa_ok($var,$type) {ok($var.isa($type), "The object is-a '$type'");}

[01:55] <pmichaud> well, @foo ~~ Type does more than simple 'isa' semantics, I think

[01:55] <pmichaud> because it also checks for 'does'

[01:56] <Auzon> Yeah. But .WHAT eq 'Class' should be the same as .isa('Class')

[01:58] <Auzon> and it looks like .isa in Rakudo calls directly to the isa opcode.

[02:02] <pmichaud> well, if .WHAT eq 'Class' returns true then I would expect .isa('Class') to return true also

[02:02] <pmichaud> but the converse is not true

[02:02] <Auzon> rakudo: my @a = <1 2 3>; say @a.WHAT; say @a.isa('Array');

[02:02] <p6eval> rakudo 28929: OUTPUT[Array␤0␤]

[02:03] <pmichaud> and afaik we still haven't heard official word if strings are valid arguments to .isa (although I suspect they are)

[02:03] <pmichaud> ohhhhhhhhh

[02:03] <pmichaud> that's because Parrot has its own 'Array' class, that isn't the same as Rakudo's Array

[02:03] <pmichaud> hrm.

[02:03] <pmichaud> rakudo:  my @a = <1 2 3>; say @a.isa(Array);

[02:04] <p6eval> rakudo 28929: OUTPUT[1␤]

[02:05] <Auzon> mmm... ok, we'll avoid the string form then

[02:05] <pugs_svnbot> r21158 | Auzon++ | [gsoc_spectest] fudged reverse.t for Rakudo

[02:08] <pugs_svnbot> r21159 | Auzon++ | [gsoc_spectest] unfudging two tests

[02:08] <Auzon> moritz_ or anyone else: t/spec/S29-list/reverse.t can be added to spectest_regression, too

[02:18] *** PZt joined
[02:24] <Auzon> the next data point in the chart should be a nice jump. 1793 total tests :)

[02:27] *** Schwern joined
[02:29] <pugs_svnbot> r21160 | pmichaud++ | S29-list/first.t: update skip message, convert tabs to spaces

[02:46] *** cjfields joined
[02:53] *** Psyche^ joined
[02:53] *** cjfields left
[02:54] *** cjfields joined
[02:55] *** cjfields_ joined
[02:55] *** cjfields left
[02:56] *** cjfields_ left
[03:05] *** elmex left
[03:05] *** elmex joined
[03:09] *** Patterner left
[03:09] *** Psyche^ is now known as Patterner

[03:23] *** kanru joined
[03:28] *** xinming left
[03:28] *** xinming joined
[03:35] *** xinming_ joined
[03:36] *** cjfields joined
[03:40] *** snooper joined
[03:42] <pmichaud> rakudo: for [1..3,4..6] { say $_.WHAT }

[03:42] <p6eval> rakudo 28931: OUTPUT[Array␤]

[03:51] *** cjfields left
[03:52] *** pbuetow_ left
[04:00] *** kanru left
[04:02] *** xinming left
[04:06] <pugs_svnbot> r21161 | cjfields++ | * add some list context tests per #perl6 and #parrot discussions

[04:06] <pugs_svnbot> r21161 | cjfields++ | * will convert over to t/spec/S04-statements/for.t for spec regression tests

[04:06] <pugs_svnbot> r21162 | pmichaud++ | Some updates to S29-list.

[04:06] <pugs_svnbot> r21163 | pmichaud++ | Add a note that "XXX" marks places where the test needs review.

[04:10] *** Alias__ joined
[04:10] <pugs_svnbot> r21164 | pmichaud++ | S29-list/first.t:  Change "adverbial closure" to "adverbial block"

[04:11] *** Alias_ left
[04:13] <pugs_svnbot> r21165 | pmichaud++ | S29-num/abs.t:  correct #?rakudo skip message

[04:20] <pugs_svnbot> r21166 | pmichaud++ | S29-str/chop.t:  Correct #?rakudo skip message.

[04:20] *** kanru joined
[04:25] *** Schwern left
[04:35] *** Psyche^ joined
[04:46] *** redicaps left
[04:49] *** Patterner left
[04:49] *** Psyche^ is now known as Patterner

[05:03] *** lambdabot joined
[05:08] *** rindolf left
[05:11] *** rindolf joined
[05:11] *** justatheory joined
[05:31] *** justatheory left
[05:31] *** bsb left
[05:36] *** PZt left
[05:37] *** PZt joined
[05:38] *** xinming joined
[05:42] *** justatheory joined
[05:43] *** justatheory left
[05:46] *** xinming__ joined
[05:51] *** xinming_ left
[05:54] *** Psyche^ joined
[05:57] *** xinming_ joined
[05:58] *** alester_ left
[05:59] *** xinming left
[06:02] *** alanhaggai joined
[06:10] *** xinming__ left
[06:10] *** xinming joined
[06:11] *** Patterner left
[06:11] *** Psyche^ is now known as Patterner

[06:13] *** wknight8111 left
[06:20] *** xinming__ joined
[06:23] *** xinming_ left
[06:31] *** alanhaggai left
[06:33] *** xinming left
[06:44] *** xinming joined
[06:48] <moritz_> Auzon: adding the two tests to spectest_regression - will commit after running the tests

[06:53] *** xinming_ joined
[06:54] *** xinming left
[06:56] *** xinming_ left
[06:57] *** xinming__ left
[06:57] <rakudo_svn> r28932 | moritz++ | [rakudo] fix infix:<x> for negative repetition count, patch curtesy of

[06:57] <rakudo_svn> r28932 | moritz++ | bacek++. Closes RT #56516

[07:00] *** xinming joined
[07:01] <rakudo_svn> r28933 | moritz++ | [rakudo] adding two more files to spectest_regression

[07:01] <rakudo_svn> r28933 | moritz++ | Auzon++ for fudging and reporting

[07:09] *** alanhaggai joined
[07:10] *** Psyche^ joined
[07:13] <spinclad> perl6: for [1..3,4..6] { .WHAT.say }

[07:13] <p6eval> elf 21166: OUTPUT[Use of uninitialized value in concatenation (.) or string at ./elf_f line 3408.␤syntax error at (eval 119) line 4, near "{->WHAT"␤ at ./elf_f line 3861␤]

[07:13] <p6eval> ..kp6 21166: OUTPUT[syntax error at position 4, line 1 column 4:␤for [1..3,4..6] { .WHAT.say ␤    ^ HERE␤]

[07:13] <p6eval> ..pugs: OUTPUT[Array␤]

[07:13] <p6eval> ..rakudo 28933: OUTPUT[No result object␤current instr.: 'parrot;Perl6;Grammar;Actions;expect_term' pc 118605 (src/gen_actions.pir:9400)␤]

[07:13] <moritz_> spinclad: rakudo doesn't do implicit $_ invocant yet

[07:14] <moritz_> rakudo: for [1..3, 4..6] { $_.WHAT.say }

[07:14] <p6eval> rakudo 28933: OUTPUT[Array␤]

[07:14] <spinclad> i'm a bit surprised so few of our stable do it

[07:15] *** xinming_ joined
[07:15] <spinclad> perl6: for 1..3,4..6 { .WHAT.say }

[07:15] <p6eval> elf 21166: OUTPUT[Use of uninitialized value in concatenation (.) or string at ./elf_f line 3408.␤syntax error at (eval 119) line 4, near "{->WHAT"␤ at ./elf_f line 3861␤]

[07:15] <p6eval> ..kp6 21166: OUTPUT[syntax error at position 8, line 1 column 8:␤for 1..3,4..6 { .WHAT.say ␤        ^ HERE␤]

[07:15] <p6eval> ..pugs: OUTPUT[Int␤Int␤Int␤Int␤Int␤Int␤]

[07:15] <p6eval> ..rakudo 28933: OUTPUT[No result object␤current instr.: 'parrot;Perl6;Grammar;Actions;expect_term' pc 118605 (src/gen_actions.pir:9400)␤]

[07:15] <spinclad> perl6: for 1..3,4..6 { $_.WHAT.say }

[07:16] <p6eval> elf 21166: OUTPUT[Int␤Int␤Int␤Int␤Int␤Int␤]

[07:16] <p6eval> ..kp6 21166: OUTPUT[syntax error at position 8, line 1 column 8:␤for 1..3,4..6 { $_.WHAT.say ␤        ^ HERE␤]

[07:16] <p6eval> ..pugs: OUTPUT[Int␤Int␤Int␤Int␤Int␤Int␤]

[07:16] <p6eval> ..rakudo 28933: OUTPUT[Int␤Int␤Int␤Int␤Int␤Int␤]

[07:16] <moritz_> spinclad: no so surprising if you know a bit about STD. I tried to detect the case in rakudo's grammar (which is modelled after STD), and failed

[07:16] <spinclad> kp6: for 1..3 { $_.WHAT.say }

[07:16] <p6eval> kp6 21166: OUTPUT[error in Block at compiled/perl5-kp6-mp6/lib/KindaPerl6/Grammar/Sub.pm line 753, <> line 1.␤*** Syntax Error in Block: missing closing curly bracket  ␤]

[07:17] <spinclad> do you know, is it spectested yet?

[07:17] <moritz_> spinclad: it's used all over the test suite

[07:18] <moritz_> spinclad: which makes it quite an annoyance that rakudo doesn't implement it yet

[07:18] *** a-jin1 joined
[07:18] <spinclad> so fixing it would give a nice boost

[07:18] <moritz_> indeed

[07:19] <moritz_> as would my ($var1, $var2);

[07:19] *** polettix left
[07:20] <rakudo_svn> r28934 | moritz++ | [rakudo] added S29-str/lc.t to spectest_regression

[07:20] *** xinming left
[07:21] *** a-jin1 left
[07:27] *** Patterner left
[07:27] *** Psyche^ is now known as Patterner

[07:32] *** xinming joined
[07:34] *** rindolf left
[07:45] *** xinming_ left
[07:53] *** tuxdna joined
[07:53] *** c1sung left
[07:54] *** xinming_ joined
[08:02] *** xinming__ joined
[08:03] *** araujo left
[08:06] *** xinming left
[08:15] *** xinming_ left
[08:16] *** barney joined
[08:25] *** BinGOs joined
[08:27] *** xinming joined
[08:28] *** meppl joined
[08:40] *** Jedai joined
[08:41] *** xinming__ left
[08:46] *** chris2 joined
[08:52] *** barney left
[08:54] *** bacek_ left
[09:12] *** wknight8111 joined
[09:22] *** tuxdna left
[09:22] *** tuxdna joined
[09:31] *** wknight8111 left
[09:47] *** smtms joined
[10:04] *** ludan joined
[10:07] <moritz_> pixie: my ($a, $b); say 1;

[10:07] <moritz_> elf: my ($a, $b); say 1;

[10:07] *** orafu left
[10:07] <p6eval> pixie: OUTPUT[1␤]

[10:07] <p6eval> elf 21166: OUTPUT[1␤]

[10:23] *** smtms_ joined
[10:23] <pugs_svnbot> r21167 | moritz++ | [spec] unfudged a few tests, added a test to S29-str/lc.t

[10:25] *** smtms left
[10:25] *** redicaps joined
[10:25] *** Jedai left
[10:31] *** smtms_ is now known as smtms

[10:34] *** redicaps left
[10:37] *** ruoso left
[10:38] <rakudo_svn> r28944 | moritz++ | [rakudo] add tools/autounfudge.pl

[10:54] *** smtms_ joined
[10:56] *** smtms left
[10:56] *** smtms_ is now known as smtms

[11:10] *** smtms_ joined
[11:22] *** smtms left
[11:30] *** smtms_ is now known as smtms

[11:39] *** meppl left
[11:58] *** pmurias joined
[11:59] *** pmurias left
[12:03] *** pmurias joined
[12:18] *** Jedai joined
[12:22] <pmurias> TimToady: what is the STD5.pm self-parsing speed goal?

[12:23] <pmurias> s/self-parsing/STD.pm parsing/

[12:28] <moritz_> pmurias: what's the recommended way to get a parse tree out of STD5?

[12:28] <moritz_> pmurias: specifically I'm intersted in how 'my ($x, $y)' would parse

[12:29] <pmurias> i use STD5_dump_match

[12:30] <moritz_> I just get a parse failure :(

[12:32] <pmurias> me too

[12:32] <moritz_> I wanted to implement that in rakudo, so I tried to find out how STD.pm parses it

[12:32] <moritz_> turns out not at all ;)

[12:32] <moritz_> which is a bad way to do it

[12:35] <pmurias> moritz_: it works if you pass it a file

[12:36] <moritz_> pmurias: with STD5_dump_match? not for me

[12:37] <pmurias> how do you invoke it?

[12:37] <moritz_> perl5.10.0 STD5_dump_match foo

[12:37] <pmurias> cat foo

[12:38] <moritz_> my ($x, $y);

[12:38] <moritz_> pmurias: could you paste me the parse tree please?

[12:39] <pmurias> moritz_: it works here

[12:39] <pmurias> do you have an up to date STD5.pm?

[12:39] <moritz_> I did a gimme5 STD.pm > STD5.pm

[12:40] <pmurias> and rm -fr lex?

[12:41] <moritz_> ah, that does the trick

[12:43] *** barney joined
[12:46] *** pmurias left
[12:49] <moritz_> pmurias++

[12:52] *** alanhaggai left
[12:54] *** iblechbot joined
[13:05] *** cmarcelo joined
[13:07] *** alester_ joined
[13:07] *** alester_ left
[13:08] *** rindolf joined
[13:08] *** iblechbot left
[13:22] *** riffraff joined
[13:23] *** riffraff left
[13:23] *** riffraff joined
[13:26] <moritz_> rakudo: say('foo')

[13:26] <p6eval> rakudo 28949: OUTPUT[foo␤]

[13:26] <moritz_> rakudo: say(sqrt('foo'))

[13:26] <p6eval> rakudo 28949: OUTPUT[0␤]

[13:28] *** rurban joined
[13:28] <rurban> packaging questions allowed?

[13:29] <moritz_> rurban: you can try ;)

[13:30] <rurban> Hi :) I'm just making up the new parrot packages for cygwin. I wonder how others named the rakudo or perl6 package? I want to name it parrot-perl6.

[13:30] <rurban> I found nothing useful at debian, gentoo and freebsd ports.

[13:31] <rurban> For pugs I need first ghc and this is a major work todo, so the simple parrot languages first.

[13:32] <moritz_> rurban: I don't know if they have a different package at all

[13:32] <moritz_> rurban: but I recommend #parrot on irc.perl.org

[13:33] <rurban> Ok. I'll try there. Maybe rakudo is not ready yet for primetime.

[13:41] *** wknight8111 joined
[13:58] <moritz_> it just needs more attention ;)

[14:01] *** Alias__ left
[14:01] *** Alias__ joined
[14:04] *** rurban left
[14:05] *** a-jin1 joined
[14:05] *** a-jin1 left
[14:09] *** Alias_ joined
[14:11] *** Alias__ left
[14:12] *** orafu joined
[14:21] *** TJCRI joined
[14:24] *** iblechbot joined
[14:25] *** nipotaway is now known as nipotan

[14:28] * rindolf is writing an email to TPF.

[14:35] *** jferrero joined
[14:53] *** Guest16015 joined
[14:56] *** vixey left
[14:57] *** bacek_ joined
[14:57] *** vixey joined
[14:58] *** peepsalot joined
[14:59] *** bacek left
[15:09] *** c1sung joined
[15:09] *** rindolf left
[15:11] *** Exodist joined
[15:11] *** Exodist left
[15:16] *** ggoebel joined
[15:16] *** araujo joined
[15:17] *** riffraff left
[15:17] *** riffraff joined
[15:22] *** justatheory joined
[15:27] *** sri_work joined
[15:28] *** ludan left
[15:28] *** ludan joined
[15:37] *** jferrero left
[15:38] *** tuxdna left
[15:41] *** ludan left
[15:41] *** Lorn_ joined
[15:43] *** riffraff left
[15:43] *** Alias_ left
[15:43] *** Alias_ joined
[15:52] *** Alias__ joined
[15:52] *** Alias_ left
[15:58] *** justatheory left
[15:58] *** Lorn left
[16:02] *** mj41 left
[16:06] *** jfredett_ joined
[16:11] *** ruoso joined
[16:14] <rakudo_svn> r28960 | pmichaud++ | [rakudo]:

[16:14] <rakudo_svn> r28960 | pmichaud++ | * Update spectest-progress.csv:  80 files, 1290 passing tests

[16:15] *** meppl joined
[16:17] *** jfredett left
[16:21] *** mj41 joined
[16:28] *** sri_work left
[16:35] *** broquaint left
[16:37] *** broquaint joined
[16:39] *** meppl left
[16:48] *** nipotan is now known as nipotaway

[16:59] *** Alias_ joined
[16:59] *** Alias__ left
[17:07] *** nipotaway is now known as nipotan

[17:08] *** kanru left
[17:17] *** meppl joined
[17:21] *** eternaleye left
[17:22] *** cjfields joined
[17:26] *** kanru joined
[17:27] *** eternaleye joined
[17:42] <DietCoke> rakudo calls itself perl6 when the fake-cecutable is built, but I can see if you had multiple perl6es how that would be an issue. I think calling it "rakudo" in a port is fine.

[17:43] <DietCoke> I'm not sure having a separate port for parrot and the languages will work, since the languages expect to be in the build directory of parrot when built, but that's a question for #parrot on irc.perl.org

[17:43] <ruoso> DietCoke, the executable perl6 will probably be handled the same way the "java" executable is... I consider the rakudo use of "perl6" as legacy...

[17:44] <DietCoke> While I'm a java guy, I don't know what you're referring to here.

[17:44] <ruoso> the "java" executable is provided by every implementation...

[17:44] <ruoso> the user is the one who chooses which one to use

[17:44] <ruoso> in Debian, for instance, there is the "update-alternatives" tool

[17:45] <ruoso> that helps in managing that...

[17:45] *** hercynium joined
[17:46] *** jfredett_ is now known as jfredett

[17:46] <DietCoke> yes, but with java, you typically have a directory "somewhere", and you can add those to your path or not. With a package manager, I'm more used to the executable ending up in a single directory; having two 'java's or two 'perl6's there could be problematic.

[17:46] <DietCoke> s/c/w/

[17:46] <PerlJam> "typiwally"?

[17:46] <PerlJam> :-)

[17:47] <DietCoke> ah, pedants. s/could/would/; but yah, it would be nice if all the various perl6's agreed on that.

[17:47] <DietCoke> and apologies for my extra apostrophes. =-)

[17:56] *** wks joined
[17:59] *** barney left
[17:59] <Gothmog_> you might also have an executable perl6.rakudo and a symlink perl6 to it...

[18:02] *** wks left
[18:05] *** planofish joined
[18:09] *** ruoso left
[18:20] <pmichaud> once @Larry comes up with a standard for perl6 invocation options, we'll probably look at switching rakudo then.

[18:34] *** rindolf joined
[18:38] <pugs_svnbot> r21168 | Auzon++ | [gsoc_spectest] added more range tests, fixed existing ones, and unfudged some passing ones. (added 27 tests, removed 2)

[18:41] <pugs_svnbot> r21169 | pmichaud++ | S29-num/rand.t:  remove #?rakudo skip line since RT #56184 is now fixed

[18:42] *** vixey left
[18:42] <cjfields> Auzon: I added some tests to t/statements/for.t yesterday (don't think it is in spec yet)

[18:42] *** vixey joined
[18:43] <Auzon> cjfields++: Excellent!

[18:44] <Auzon> There's also a t/statements/for_with_only_one_item.t that might have some related tests.

[18:44] <Auzon> Your tests look good to me, though. :)

[18:44] <pmichaud> and I'd hope they end up in a single file :-)

[18:44] <cjfields> agreed

[18:52] *** stevan_ left
[19:01] *** stevan_ joined
[19:04] <pmichaud> #perl6-soc in 30

[19:04] <pmichaud> 29

[19:07] *** ruoso joined
[19:07] <pugs_svnbot> r21170 | Auzon++ | [gsoc_spectest] fixed syntax error in pi.t and added more general TASKS

[19:09] <Auzon> pmichaud: Regarding that syntax error, my guess is that it was from an eval('whatever') or similar being partially removed

[19:32] <Auzon> #perl6-soc in 2 minutes

[19:35] <pmichaud> #perl6-soc in -2?

[19:36] <Auzon> yes.

[19:36] *** tuxdna joined
[19:37] <tuxdna>  /users

[19:37] *** [particle]1 is now known as [particle]

[20:09] *** tuxdna left
[20:12] *** cggoebel joined
[20:22] *** ggoebel left
[20:24] *** chris2 left
[20:43] *** lisppaste3 left
[20:47] *** meppl left
[20:50] *** hercynium left
[20:54] *** lisppaste3 joined
[21:00] *** rindolf left
[21:00] *** jfredett left
[21:00] *** c1sung left
[21:00] *** Jedai left
[21:00] *** snooper left
[21:00] *** yahooooo left
[21:00] *** pjcj left
[21:00] *** jferrero joined
[21:00] *** rindolf joined
[21:00] *** jfredett joined
[21:00] *** c1sung joined
[21:00] *** Jedai joined
[21:00] *** snooper joined
[21:00] *** yahooooo joined
[21:00] *** pjcj joined
[21:00] *** yahooooo left
[21:01] *** yahooooo joined
[21:10] *** TJCRI left
[21:27] *** ruoso left
[21:32] *** redicaps joined
[21:44] <moritz_> sorry, forgot to mention that I'd be absent for #perl6-soc

[21:44] * moritz_ backlogs

[21:48] *** PZt left
[21:48] *** avar left
[21:59] *** meppl joined
[21:59] *** snooper is now known as pbuetow_

[22:17] *** rindolf left
[22:21] *** meppl left
[22:23] *** meppl joined
[22:26] *** redicaps left
[22:40] *** cmarcelo left
[22:41] *** breinbaas joined
[22:42] *** sri_work joined
[22:50] *** asita joined
[23:09] *** cjfields left
[23:14] *** peepsalot left
[23:31] *** asita left
[23:41] <meppl> good night

[23:43] *** cggoebel left
[23:44] *** Coleoid_ left
[23:45] *** meppl left
[23:46] *** felipe left
