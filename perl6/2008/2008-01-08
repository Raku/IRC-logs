[00:01] <TimToady> anyway, currently :foo($bar) invokes <param_var> to parse $bar, and needs something recursive to allow nested :()

[00:02] *** jferrero joined
[00:10] <stevan_> mncharity: pong

[00:32] <Khisanth> [particle]: how can it be anonymous and named at the same time? :)

[00:32] <[particle]> stevan_: ping

[00:32] <[particle]> Khisanth: that's precisely the point

[00:33] <[particle]> it's an ambiguity

[00:38] *** Limbic_Region joined
[00:40] *** DaGo left
[00:57] *** nipotaway is now known as nipotan

[01:04] *** devogon left
[01:12] *** zgh_ joined
[01:13] *** polettix left
[01:14] <stevan_> [particle]: I have collected many of the moose slides here -> http://www.iinteractive.com/moose/ (sorry damn freenode wont let me speak over /msgs) 

[01:14] <lambdabot> Title: Moose - A complete modern object system for Perl 5

[01:14] <stevan_> they are all quite incestuious, so feel free to borrow anything you like I am sure no one will mind :)

[01:15] <[particle]> that'll do, thx

[01:16] <stevan_> :)

[01:16] *** tobeya left
[01:16] *** lyokato_ joined
[01:17] <stevan_> [particle]: my current favorite for a "quick" talk is Chris Prather's "Intro to Moose" he pulled all the good bits from the previous talks and smushed it into a 20-30 min  I think

[01:18] <stevan_> [particle]: if you end up putting it online, please pass on the URL and I will post it here too :)

[01:18] <[particle]> roger, wilco

[01:24] *** amnesiac left
[01:32] *** ting joined
[01:34] <meppuru> good night

[01:34] *** ispy_ joined
[01:35] *** meppuru left
[01:42] *** ting left
[01:43] *** ting joined
[01:43] *** muixirt2 joined
[01:43] *** ting left
[01:43] *** ting joined
[01:46] *** Schwern joined
[01:53] *** ispy_ left
[01:54] *** ispy_ joined
[01:59] *** Muixirt left
[02:00] *** Schwern left
[02:00] *** Schwern joined
[02:03] *** Squern joined
[02:10] *** japhb left
[02:11] *** cnhackTNT joined
[02:13] *** Squern left
[02:13] *** Squern joined
[02:18] *** bwisti left
[02:23] *** Squern left
[02:24] *** Squern joined
[02:25] *** RiXtEr joined
[02:25] <RiXtEr> Can someone ask in #perl why i am banned from there? I would really appreciate it..

[02:25] *** Schwern left
[02:27] <RiXtEr> buu, are you around?

[02:28] *** japhb joined
[02:29] *** jjore left
[02:29] *** lambdabot left
[02:30] *** lambdabot joined
[02:34] *** Squern left
[02:34] *** Squern joined
[02:42] *** jferrero left
[02:46] *** RiXtEr_ joined
[02:48] *** RiXtEr left
[02:48] *** RiXtEr_ is now known as RiXtEr

[02:48] *** agentzh joined
[03:05] *** muixirt2 left
[03:08] <buu> RiXtEr: Nope.

[03:09] <RiXtEr> buu,why not?

[03:12] <buu> RiXtEr: You are unbanned.

[03:12] <buu> Wait, no, I was lying.

[03:12] <RiXtEr> i am able to get in now

[03:12] <buu> HA HA I WAS LYING ABOUT LYING

[03:12] <buu> FOOLED YOU.

[03:13] *** agentzh left
[03:40] <Limbic_Region> buubot: be glados =~ lying

[03:40] <buubot> Limbic_Region: Sorry, no quotes matched the search term: lying

[03:40] <Limbic_Region> buubot: be glados =~ joking

[03:40] <buubot> Limbic_Region: Sorry, no quotes matched the search term: joking

[03:40] <Limbic_Region> buubot: be glados =~ kidding

[03:40] <buubot> Limbic_Region: I'm not kidding now. Turn back or I WILL kill you. I'm going to kill you, and all the cake is gone.

[03:40] <Limbic_Region> not the quote I was hoping for

[03:40] <Limbic_Region> buubot: be glados =~ pretend

[03:40] <buubot> Limbic_Region: Remember when the platform was sliding into the fire pit and I said 'Goodbye' and you were like (deep male voice) 'NO WAY!' (normal voice) and then I was all 'We pretended we were going to murder you'? That was great!

[03:49] *** drbean joined
[03:53] <Limbic_Region> sorry, I thought I was in another channel

[04:05] *** alester joined
[04:18] * mncharity is somewhat bemused by recent conversations.

[04:19] <mncharity> none the less, woot!  specifically,

[04:19] *** RiXtEr left
[04:24] <mncharity> @tell fglock epiphany.  Consider a possible path to a very rapid, low risk, p6 bootstrap.  Call it kp6rb.  Sort of kp6 + ruby introspection + redsix.  Say kp6's p6 code were hand transliterated into ruby.  That ruby code could (1) run directly, at full speed.  And because you can get an ast from ruby code, you can also (2) get a *kp6 ast* from it too!  And thus (3), also regenerate the p6 code.

[04:24] <lambdabot> Consider it noted.

[04:25] <mncharity> @tell fglock We thus escape incremental bootstrap hell.  Since you can get the ast without p6 parsing, compiler and backend development no longer depends on the front-end working.  Since you can run directly, all development no longer depends on the compiler and backends working.  And since we have an alternate ast source, front-end development no longer depends on having a compiler and backend working.  Things decouple.  Development is unshackled.

[04:25] <lambdabot> Consider it noted.

[04:28] <mncharity> @tell fglock The decoupling also means development can go in parallel, using as many people as we can get.  And since the ruby code is intentionally simple and p6-like, even while writing ruby, most of the developers need only know simple p6.  We could get by with only a couple of ruby folks for infrastructure.

[04:28] <lambdabot> Consider it noted.

[04:30] <Auzon> You know, I feel sorry for anyone trying to explain the complete development process of Perl 6 from start to finish (once it is finished) ;)

[04:33] *** alester left
[04:34] <Tene> Auzon: didn't you hear?  you were nominated to compile the history.

[04:35] <Auzon> Heh

[04:36] <mncharity> @tell fglock Basically, we use ruby as a proxy for p6.  And write a p6 implementation in it.  Bootstrap becomes a flexible thing, something to do incrementally when convenient, rather than a constant burden.  So that's the idea, no doubt poorly explained and glossing over issues.  Questions, comments, etc, all most welcome.

[04:36] <lambdabot> Consider it noted.

[04:36] <Auzon> Can't it just be interpreted instead?

[04:38] <mncharity> Auzon: was that a question for me?

[04:38] <Auzon> Oh, nope.

[04:39] <mncharity> drat :)

[04:39] <Auzon> It was regarding Tene's comment about me being the one to compile the history

[04:39] <Tene> ><

[04:39] <Tene> mncharity: can't it just be interpreted instead?

[04:39] <Tene> mncharity: that better?

[04:39] <mncharity> lol

[04:39] <mncharity> re can't it just be interpreted instead?,

[04:39] <Auzon> hah. I don't even see how that'd apply, but...

[04:42] <mncharity> the big challenges of implementing p6 are, the regex engine, the parser, the runtime, and the lack of spec.  also

[04:43] <Limbic_Region> why do you think those are big challenges?

[04:43] <Limbic_Region> pge is a pretty good engine

[04:43] <mncharity> the compiler and emitter if you are doing real, full p6.  but if you are just worrying about bootstrap, and have a nice oo language as a backend target, then the backend is relatively less painful than the other challenges.

[04:43] *** charsbar left
[04:45] <Limbic_Region> mncharity - nevermind, after reading backwards I see you are talking about general problems

[04:45] <mncharity> Limbic_Region: I didn't mean _current_ challenges.  Yes, we now have a collection of engines good enough to be used for a bootstrap.

[04:45] <Limbic_Region> and not so much what huge hurdles still need to be faced

[04:45] <mncharity> right

[04:45] <Limbic_Region> I just happened to be flipping through my channel windows and saw that

[04:45] <mncharity> :)

[04:45] <Limbic_Region> should have read some more for context

[04:46] <mncharity> the biggest current are perhaps

[04:46] <Limbic_Region> 1.  longest token matcher

[04:46] <Limbic_Region> 2.  lack of up to date tests

[04:47] <mncharity> lack of spec, parser, integration/bootstrap pain

[04:47] <Limbic_Region> when perl6 can parse correctly STD then you will have your parser

[04:47] <Limbic_Region> I don't really see lack of spec as a hurdle

[04:47] <mncharity> I don't mind old tests.  A working but out of date p6 would be a dandy environment to write an up to date p6.

[04:48] <Limbic_Region> the spec is mostly going under refinements

[04:48] <Limbic_Region> where do you see holes?

[04:48] <mncharity> re spec

[04:48] <Limbic_Region> mncharity - the test point was 2 parts - lack of tests and out of date

[04:49] <Limbic_Region> mncharity - since anything that passes the test suite is considered official perl 6 - the test suite needs to be extremely comprehensive

[04:49] <Limbic_Region> despite how large it is now, it still is far short of the mark

[04:49] *** zgh_ left
[04:50] <Auzon> Is there a TODO list for the test suite? I was hoping to contribute to that sometime if there's a list of stuff

[04:51] *** alester joined
[04:51] <Limbic_Region> Auzon - there was a project to align tests with the synopses.  I am not sure if it is still active, but that would point to what tests need updating (because the spec has changed) and what tests need writing (because there is no tests linked to that portion of the synopsis)

[04:51] <zgh> hey andy

[04:51] <mncharity> re spec, we don't have a language reference manual.  we sort of have a collection of language design policy decisions.  the kind of thing which might be the "backstory" section/inserts in a reference. figuring things

[04:51] <zgh> have i thanked you for ack lately?

[04:52] <alester> zgh: Not that I recall.

[04:52] <zgh> thanks for ack

[04:52] <zgh> been using it since your lightning talk at oscon

[04:52] <Tene> alester: thanks for ack.

[04:52] <alester> you're welcome.

[04:52] <Limbic_Region> mncharity - can you point to a language reference manual for another language so I can relate to what you are saying?

[04:53] <alester> zgh: Glad I got a user out of that.

[04:53] <mncharity> out about the language require a detective story exercise.  and then asking here or p6l when, invariably, even many simple obvious questions cant be answered from sNN.  the reason spec is an obsticle is

[04:53] <zgh> alester++

[04:53] <Auzon> hm, I should reinstall ack...

[04:53] <Auzon> the use of real Perl patterns made it worth it :)

[04:53] *** xwrn joined
[04:54] <zgh> there's a ruby clone now, but I'll have none of it ^_^

[04:54] <alester> Have we ever met, zgh?  Your name doesn't ring a bell.

[04:54] <zgh> even though I'm now a rails developers *ducks*

[04:54] <alester> zgh: rak is missing key features, too.

[04:54] *** xwrn left
[04:54] <zgh> i'm zack hobson we met when I worked for Shopzilla

[04:54] *** xwrn joined
[04:54] <alester> ah, ok

[04:55] <zgh> now geni.com, mostly the same software team though

[04:55] <mncharity> because with a reference, one could hand a random any-language programmer the reference, and say, here, implement this.  or any part of this.  but now, one has to join in an incremental language design process.  which I'm not knocking, but that's why spec is there as a major challenge for implementation.  because refining design and improving sNN is an unavoidable part of doing implementation at present.  Though much less than in the distant past. audreyt

[04:56] * mncharity backlogs

[04:57] * Limbic_Region wanders off to try and get some sleep

[04:57] <Limbic_Region> TTFN all

[04:57] *** Limbic_Region left
[04:57] <mncharity> Limbic_Region: re point to a language reference manual,

[04:57] <mncharity> err, drats.

[05:01] <mncharity> @tell Limbic_Region The CL manual.  The ANSI C standard.  Um, it's more like _most_ languages have more of a reference manual than p6.  Than p5 even.

[05:01] <lambdabot> Consider it noted.

[05:01] <mncharity> zgh: ahhh, a ruby developer...

[05:02] *** Squern left
[05:03] <mncharity> have you seen http://svn.pugscode.org/pugs/misc/pX/Common/redsix/ ?  It's quite different in approach from what would be done now, but it was inspiration, and perhaps some bits might be scavanged for the runtime.

[05:03] <lambdabot> Title: Revision 19374: /misc/pX/Common/redsix

[05:04] *** xwrn left
[05:04] *** xwrn joined
[05:05] <mncharity> zgh: basic introspection idea is a ruby2ruby derivative (ruby2p6) .

[05:07] <zgh> that does sound interesting

[05:08] <zgh> i think parrot is a probably more important than perl6 in the long run

[05:09] <zgh> i like to think that it's just syntax anywau

[05:09] <zgh> er, anyway

[05:09] <mncharity> re parrot...  I better leave it as "no comment".  My estimation is the opposite of yours (p6 importance >> parrot).

[05:10] * zgh is inspired to svn up parrot and poke around in languages/perl6 &

[05:10] <mncharity> zgh: there are some nice pure ruby projects which could be done an would help

[05:11] <mncharity> eg, doing a real version of the redsix kludge for taking StringScanner and wrapping it to permit user code to be part of the pattern.

[05:12] <mncharity> that would give ruby regexps what p5 already has with (?{...}) and friends.

[05:12] <mncharity> and provide the foundation for grammars in ruby.

[05:13] <mncharity> another, less useful to the ruby community, would be a multi with p6 multimethod dispatch semantics.

[05:14] <mncharity> zgh: still there, or eaten by parrot?

[05:14] <zgh> a little of both

[05:14] <mncharity> :)

[05:15] <zgh> i'm an experienced perl5 (and to a lesser extent ruby) programmer, but I still feel a bit out of my depth in parrot

[05:15] <zgh> it makes me want to finish my CS degree

[05:16] <mncharity> or just read more CS papers :)

[05:18] <mncharity> another of-general-use ruby project might be a pure-ruby multiple inheritance capability.  one which didn't depend on evil.rb.  but... that one's not critical path for the kp6rb effort.

[05:21] <zgh> that's do-able as long as you don't care about syntax

[05:22] <zgh> i haven't seen evil.rb though

[05:23] <mncharity> the ruby2ruby mutant (ruby2kp6ast probably (with separate kp6ast->p6), rather than a ruby2p6), and some DSL hackery to set up the p6(looks-like-ruby) developers, seems the big ruby-side sink.  until you start working on a real ruby backend runtime (as distinct from the kp6-ish ruby runtime).

[05:24] <mncharity> evil.rb is cute, lets, for instance, classes serve as modules, but it's now unsupported, losing functionality (#become() is gone, snif), and doesn't work on 1.9.

[05:26] <TimToady> if ruby is ~4x slower than p5, how is that gonna help a bootstrap, when the main feature of the p5 bootstrap is its blazing lack of speed?

[05:26] <pugs_svn> r19375 | rhr++ | [Unicode.pm] process DerivedCoreProperties.txt, begin casing algorithms

[05:26] <mncharity> ruby2ruby/ParseTree don't work on 1.9 either, but using 1.8 for kp6rb, and 1.9 (with real lambdas) as the target for a hypothetical (and entirely separate issue) backend, doesn't seem a problem.

[05:26] <zgh> yeah I'm not enthused about working with the existing ruby interpreter for something like this

[05:27] <zgh> i'd much prefer to use perl6 ^_^

[05:27] <zgh> on parrot

[05:28] <zgh> it'll be tempting to implement many of the parrot languages in perl6 i expect

[05:28] *** ispy_ left
[05:28] <mncharity> TimToady: ruby oo is close enough to p6 oo to be used directly, at least for a bootstrap where one is using a limited p6 dialect.  redsix was faster than pugs for several weeks, until audreyt applied additional hs magic.  Even then, it was within a few 10's% I fuzzily recall.

[05:29] <zgh> since perl6 will probably be the first complete HLL on the platform

[05:30] <mncharity> and re ruby is ~4x slower than p5, I suspect that does not refer to oo in ruby vs p5.  My understanding is ruby oo is significantly faster than p5, let alone p5+Moose.  it's just that ruby uses oo everywhere, so when p5 can avoid oo, it's faster.  no avoid oo on this project, at least until we have not just a compiler, but a wizzy compiler.

[05:30] <mncharity> *avoid_ing_

[05:31] <TimToady> troonuff

[05:31] <zgh> mncharity: really? i hadn't thought of that

[05:32] *** kanru joined
[05:33] <mncharity> zgh: re "really?", err, which part?

[05:33] <zgh> certainly p5+moose is slower, but I always imagined that would put it on par with ruby ^_^

[05:33] <zgh> although I haven't used the new faster moose even

[05:33] <mncharity> ah, no.

[05:34] <mncharity> p5 oo is rather slow.  and in ruby, being the common case, it gets lots of optimization attention.

[05:35] <zgh> sure that makes a lot of sense, I had never considered it since I always did OO in perl5 anyway

[05:35] <zgh> but now that I think about it perl5 was much easier to optimize...

[05:36] <zgh> er is, I only say was because I don't write much perl5 anymore

[05:40] <mncharity> hmm, s/faster than pugs for several weeks/...for a while/.  I've the fuzzy recollection of an "oh, drat, well, that window was rather short".  like a week or two.

[05:45] <mncharity> ruby is also much better than p5 for metaprogramming.  comparable to CL imho.  and since it's common practice, it's much more robust than when you try to play similar games in p5.

[05:45] <zgh> that's very true

[05:45] <zgh> although my memories of metaprogramming in perl are fond

[05:48] <mncharity> yeah.  but it usually doesn't take me long to hit, drat, I really want macros.  and then, hmm, the Filter::Simple bug is still there.  and here I am again contemplating writing a more macro-ish wrapper for Filter.

[05:50] <mncharity> followed sometimes by I wish I could use this code as data, maybe I should be using CL or scheme here.  as in this kp6rb case.  a similar CL/scheme bootstrap path has been available.  it's just they are so verbose, it hasn't been -Ofun, at least for me.

[05:51] <zgh> code-as-data needs to cross the gap syntax wise, it seems like all the languages that do it are schemes and lisps

[05:51] <zgh> me no likee the parens

[05:52] <zgh> that's one of ruby's faults for sure

[05:52] <zgh> all the metaprogramming but no code as data

[05:53] <TimToady> well, look at it this way, if there were some language that was close to what we want in p6, we probably wouldn't want p6 so much...

[05:53] <zgh> TimToady that's why I'm here

[05:53] <mncharity> re syntax gap, anything with an exposed parser and ast can do it.  java, ruby, etc.  p5 even, though because using B is a bit painful and limited, and not done much, it ends up not robust.

[05:53] <mncharity> TimToady: indeed

[05:54] <mncharity> oh, yeah.  re want p6 so much.  which brings us back to could kp6rb be a way to get it soonish.

[05:58] <mncharity> zgh: with ripper in 1.9, the assorted node reflectors (ParseTree, Nodewrap, RubyNode), it's getting to the point where ruby has code as data.  ruby just as other ways of dealing with the same kind of issues a lisp would use that for.  so they are less mainstream than they might be.  though some things like Heckle(sp?) use them.

[05:58] <mncharity> *has

[05:58] <zgh> yeah 've seen that but always considered it experimental

[05:59] <zgh> i guess now that meta is part of the culture I've gotten spoiled and want code as data as part of the culture as well

[05:59] <mncharity> getting there, slowly, I think.

[05:59] <zgh> also there is something about the approach taken by the lisps, something pure that I feel ruby hasn't learned

[05:59] <zgh> but it seems so close

[06:00] <zgh> but for expressiveness perl6 is going to blow the doors off

[06:00] <zgh> but purity isn't really something perl strives for

[06:00] <mncharity> (aside: Heckle is a testing tool, a test coverage checker - it mutates your code - if your test suite then *doesn't* fail, you are obviously failing to test whatever part of the code ceased to work due to mutation)

[06:01] <zgh> it's a clever idea, i've used it a few times

[06:01] <zgh> part of the problem is that you can't really produce nice little red-to-green completion graphs for heckle

[06:01] *** IllvilJa left
[06:01] <zgh> it's less satisying ^_^

[06:01] <mncharity> re purity, expressiveness, agreed

[06:02] <mncharity> :)

[06:02] <Auzon> re the green/red charts, I definitely agree :)

[06:02] <zgh> those guys have some other interesting code tools as well

[06:04] <zgh> i think code testing as an art is making juge strides in the ruby community

[06:04] <zgh> juge? huge.

[06:07] <mncharity> basically kp6rb would be like using a p6 implementation snatched from the future, but with "use Ruby;" unavoidably set, and only partial language coverage (perhaps bigger than kp6, but most likely smaller than pugs), and likely some quirks (10%/60% kind of effot/result tradeoff - eg macros, but no lexically scoped macros).  and then one just writes ruby-style p6 implementation, to avoid the "use Ruby;", and address coverage and correctness.

[06:07] <zgh> that sounds super interesting but fragmented.

[06:08] <zgh> is this an ongoing effort?

[06:08] <mncharity> But the neat thing is there is no "big switch day".  One can keep on using kp6rb in parallel with whatever evolves from it, until you simply don't want to bother anymore.

[06:08] <mncharity> re ongoing effort, it's an idea from this morning.

[06:09] <zgh> i looked in the few pages of logs that I have for this channel but I don't see much else about kp6rb

[06:09] <zgh> what is it exactly?

[06:09] <zgh> aha

[06:09] <mncharity> re fragmented, how so?

[06:09] <zgh> from this morning okay

[06:09] <zgh> i see

[06:09] <zgh> mncharity re fragmented only the description

[06:09] <mncharity> re what is it, best description is my @tell to fglock a few (err, lots of) minutes ago.

[06:09] *** meppuru joined
[06:10] <zgh> mind repeating it here?

[06:10] <mncharity> http://irclog.perlgeek.de/perl6/2008-01-08#i_173739

[06:10] <lambdabot> Title: IRC log for #perl6, 2008-01-08

[06:11] <mncharity> I'm happy to repeat, get comments, answer questions, ramble, etc.

[06:11] <zgh> wow

[06:11] *** xwrn left
[06:12] <zgh> that's a really good idea. the bootstrap argument is an excellent lever

[06:13] <mncharity> re fragmented, yeah, that was an odd description.  its basically "write a simple p6 implementation in ruby, and oh, by the way, most of the usual bootstrap challenges vanish".

[06:13] <zgh> i think if I had to choose between ruby or haskell as a bootstrap language the choice seems obvious...

[06:15] <mncharity> haskell will make a very nice backend langauge at some point.  some things like STM, are vastly more straightforward to get working in haskell than elsewhere.  basically "big non-local stuff" is easier to do there.  with enough hs type wizards, it would even be plausible as a bootstrap language.  but without them... well, non-strictly typed was a requirement as I looked for languages which might simplify bootstrap.

[06:15] *** IllvilJa joined
[06:16] <mncharity> a haskell backend will let us play very magical games with p6.

[06:17] <mncharity> haskell as a bootstrap language, because of its clarity, was also excellent for pushing language design.

[06:20] <mncharity> but re wow, that's a really good idea, thanks! :)  appreciate the feedback.

[06:21] <zgh> just the ideas re bootstrapping are compelling by themselves

[06:21] <zgh> ruby also happens to be an excellent language for the purpose

[06:22] <zgh> although writing perl6 in perl6 is what i look forward to most

[06:23] <mncharity> indeed

[06:27] <pugs_svn> r19376 | rhr++ | [Unicode.pm] begin grapheme cluster stuff

[06:32] <mncharity> re compelling by themselves, after lots of bouncing off the walls, design space's maze of twisty little passages, there was definitely that nice "have found the right representation - problem simplifies" feeling as it started to look like it might be a real.  love those moments. :)

[06:33] *** Auzon left
[06:34] <mncharity> zgh: so, interested in hacking? :)

[06:38] <zgh> mncharity: sure

[06:39] <mncharity> (hmm, the ircbot ate my audreyt++ fglock++ re "Though much less than in the distant past.")

[06:40] <mncharity> re sure, :) !

[06:40] *** meppuru left
[06:42] <mncharity> I think the immediate task graph looks like:

[06:45] *** bwisti joined
[06:45] *** bwisti left
[06:46] *** bwisti joined
[06:51] *** alc joined
[07:01] *** mncharit1 joined
[07:02] *** mncharity left
[07:06] <mncharit1> sigh.  partition.  missing text following "I think the immediate task graph looks like:" was:

[07:06] <mncharit1> create directory in pugs, start planning/overview doc, create rb class to abstract creation of kp6 ast (eg, methods bind, call, whatever), ast for same, ast->p6 emitter, ruby2ruby derivative which uses kp6 ast creation object; transliterate kp6 .p6 files, most complex first, into rb; milestone 1 - actually see good p6 coming out the pipe

[07:06] <mncharit1> that will address the risk that ruby2ruby has "doesn't quite work on things we care about" gotchas.

[07:07] <mncharit1> sound plausible?  thoughts?

[07:07] <mncharit1> actually, ast for same is just transliterated kp6 code

[07:07] <mncharit1> hmm.  will talk with fglock tomorrow.  see what he thinks.  there are both perl and ruby user group meetings tomorrow.  conflicting.  not sure which would be better to go to to get volunteers. :)

[07:07] <mncharit1> I don't really have the heart for a long, drawn out, lonesome exercise.  I'd like to do real project management, perhaps even more than fglock has been doing, gather enough people, and just nail it.

[07:07] <mncharit1> so I guess the first task is really a project planning exercise

[07:07] <mncharit1> end of day.  g'night all &

[07:08] <mncharit1> end of missing text

[07:08] <mncharit1> sound plausible?  thoughts?

[07:08] <mncharit1> :)

[07:09] <zgh> sounds plausible

[07:09] <zgh> i have to say g'night as well

[07:09] <mncharit1> right.  it was nice talking with you.

[07:10] <pugs_svn> r19377 | rhr++ | [Unicode.pm] rename %is to %category, arrayish interfaces to strings

[07:10] <zgh> nice talking to you too, keep in touch

[07:10] <mncharit1> will do

[07:10] * zgh &

[07:12] *** devogon joined
[07:20] <mncharit1> &

[07:20] *** mncharit1 left
[07:51] *** asprillia joined
[08:05] *** iblechbot joined
[08:08] *** kanru left
[08:10] *** charsbar joined
[08:21] *** Aankhen`` joined
[08:23] *** alester left
[08:30] *** LCamel joined
[08:31] *** ruoso left
[08:34] *** rindolf joined
[08:40] *** franck___ joined
[08:56] *** braceta joined
[09:01] *** bwisti left
[09:05] *** jisom joined
[09:17] *** njbartlett_ left
[09:22] *** masak joined
[09:22] <spinclad> @tell mncharity plausible, fascinating, and very shiny.  must find some ruby references and join the -Ofun.

[09:22] <lambdabot> Consider it noted.

[09:25] *** ebassi joined
[09:26] *** penk joined
[09:27] *** cj_ joined
[09:32] *** rindolf left
[09:33] *** cj left
[09:33] *** ludan joined
[09:34] <ludan> hello

[09:46] *** kanru joined
[09:48] *** pen1 joined
[09:51] *** ruoso joined
[09:51] *** alc left
[10:02] *** njbartlett_ joined
[10:07] *** penk left
[10:12] *** chris2 joined
[10:30] *** njbartlett_ left
[10:33] *** lyokato_ left
[10:34] *** cnhackTNT left
[10:36] *** jferrero joined
[10:43] *** njbartlett_ joined
[11:42] *** alc joined
[11:49] *** Aankh|Clone joined
[11:57] *** Aankhen`` left
[12:03] *** jisom left
[12:04] *** ludan left
[12:08] *** braceta left
[12:39] *** njbartlett_ left
[12:40] *** njbartlett_ joined
[12:50] *** chris2 left
[12:53] *** iblechbot left
[12:53] *** lisppaste3 left
[12:56] *** njbartlett__ joined
[12:57] *** njbartlett_ left
[13:01] *** lisppaste3 joined
[13:05] <pugs_svn> r19378 | ruoso++ | [yap6] Some notes on the ROADMAP, making some steps more clear

[13:08] *** fglock_ joined
[13:08] *** fglock_ is now known as fglock

[13:13] *** nipotan is now known as nipotaway

[13:18] *** iblechbot joined
[13:35] *** cmarcelo joined
[13:39] *** mj41 left
[13:44] *** iblechbot left
[13:54] *** jferrero left
[14:01] *** hexmode left
[14:09] *** jferrero joined
[14:09] *** jferrero left
[14:13] *** njbartlett__ left
[14:18] *** mj41 joined
[14:31] *** alester joined
[14:32] *** pen1 left
[14:39] *** rdice joined
[15:01] *** njbartlett_ joined
[15:02] * ruoso wonders why is this so quiet today..

[15:02] *** jhorwitz joined
[15:02] *** Aankh|Clone is now known as Aankhen``

[15:03] *** Psyche^ joined
[15:04] *** meppuru joined
[15:12] *** iblechbot joined
[15:20] *** rlb3 joined
[15:20] *** Patterner left
[15:20] *** Psyche^ is now known as Patterner

[15:23] *** stevan_ left
[15:30] *** pmurias joined
[15:32] *** stevan_ joined
[15:33] *** kanru left
[15:41] *** Alias_ left
[15:49] *** ispy1 joined
[16:05] *** asprillia left
[16:09] *** meppuru left
[16:11] *** meppuru joined
[16:23] *** nitro25 joined
[16:23] *** jjore joined
[16:30] *** alc left
[16:31] *** barney joined
[16:32] *** Psyche^ joined
[16:36] *** pmurias left
[16:44] *** Patterner left
[16:44] *** Psyche^ is now known as Patterner

[16:53] *** zamolxes left
[16:55] *** nitro25 left
[16:59] *** zamolxes joined
[17:01] *** polettix joined
[17:04] *** jjore left
[17:09] *** jferrero joined
[17:24] <pugs_svn> r19379 | ruoso++ | [yap6] include/yap6_stack.h -> defining the lowlevel operator identifiers. This is way too crazy...

[17:33] *** masak left
[17:49] <qmole> /1333//3/2

[17:49] <qmole> er, oops

[18:04] *** franck___ left
[18:05] *** bwisti joined
[18:06] *** meppuru left
[18:14] *** tobeya joined
[18:18] *** ebassi left
[18:20] <pugs_svn> r19380 | ruoso++ | [yap6] one stronger advise on the evilness of the 4 stack manipulation operators.

[18:20] <pugs_svn> r19381 | rhr++ | [Unicode.pm] process HangulSyllableType.txt, implement UAX #29 Grapheme Cluster Boundary Determination

[18:22] *** jjore-w joined
[18:24] *** kane__ left
[18:29] <pugs_svn> r19382 | rhr++ | [Unicode.pm] fix isGCBHangulSyllable

[18:45] <ruoso> I had just noticed that the semantics of $dog.^methods() is different from the semantics of ^$dog.methods(), and even more different than $dog.HOW.methods()

[18:45] <ruoso> $dog.^methods() keeps a relation to the $dog object, while the other two doesn't

[18:46] <ruoso> consider I have 

[18:46] <ruoso> my $a = $dog.HOW();

[18:46] <ruoso> $a.methods;

[18:46] <ruoso> The thing is, the metaclass could be generic to more than one prototype

[18:47] <ruoso> and in my $a = $dog.HOW(); $a.methods(); I lost the link to the $dog prototype

[18:48] <ruoso> unless $dog.HOW() returns a proxy object to $dog that always calls everything with "^"

[18:48] <ruoso> $a.methods would make the proxy object to call $dog.^methods.

[18:50] <ruoso> but on the other hand, $dog.HOW would be usefull to get the real metaclass

[18:50] <ruoso> even being a generic one

[18:50] *** tobeya left
[18:52] <ruoso> considering yap6, where every method is dispatched to the metaclass, the metaclass would know when it's a metamethod, when its name starts with the "^" sigil

[18:52] *** lunatic joined
[18:53] *** pmurias joined
[18:53] <ruoso> and in methods like "methods", use the invocant to realise the prototype

[18:53] <pmurias> ruoso: i think $dog.^methods is syntax sugar for $dog.HOW().methods

[18:54] <ruoso> pmurias, not sure...

[18:54] <pmurias> swimming&

[18:55] <ruoso> look for method ^count in S12

[18:56] <pmurias> looking it defines a method ^count for the class metaclass instance

[18:56] <pmurias> s/looking/looked, /

[18:57] <pmurias> &

[18:57] *** pmurias left
[18:57] *** ruoso left
[18:58] *** ruoso joined
[18:59] <ruoso> the thing is... what's the point in having both prototype and metaclass if the metaclass can't be generic?

[19:03] *** jhorwitz_ joined
[19:05] <ruoso> TimToady, in $dog.^methods, is $dog still the invocant?

[19:06] <ruoso> if so, implementing $dog.HOW as a proxy object seems reasonable

[19:06] <ruoso> as it would keep passing $dog as the invocant

[19:07] <ruoso> which makes it possible to have generic metaclasses.

[19:17] *** gast_test joined
[19:19] *** jhorwitz left
[19:23] *** jisom joined
[19:24] <pugs_svn> r19383 | rhr++ | [Unicode.pm] clean up grapheme_cluster

[19:25] <TimToady> certainly the metamethods have to have some way to access the actual object

[19:26] <TimToady> and .HOW is really just a namespace changing macro

[19:26] <TimToady> (method namespace, not package namespace)

[19:28] <ruoso> TimToady, muuuuuuuch better

[19:28] <ruoso> so the metaclass can be generic and $dog.HOW may return a proxy

[19:29] <pugs_svn> r19384 | rhr++ | [Unicode.pm] grapheme_cluster: handle Controls correctly

[19:30] <TimToady> or we just require that all metamethods take an additional first arg that is the actual object, if not supplied by ^ or HOW

[19:31] <ruoso> hmm... that's a spec thingg

[19:31] <ruoso> :)

[19:31] <ruoso> that's a very reasonable thing actually

[19:31] <TimToady> just wondering about the efficiency of enforcing proxy creation unnecessarily

[19:32] <ruoso> yeah...

[19:32] *** mncharity joined
[19:32] <ruoso> that was my first option, but then I realised the spec doesn't enforce that

[19:32] <TimToady> in fact, the spec is intentionally completely vague about what hides behind .HOW

[19:33] <ruoso> but calling convention on HOW must be specced IMHO

[19:33] <TimToady> and .HOW can mean different things in different scopes, even

[19:33] <TimToady> .HOW is just the abstraction macro, it's not a real method

[19:33] <ruoso> but...

[19:33] <ruoso> my $a = Dog.HOW; 

[19:34] <ruoso> how can a macro affect that?

[19:34] <TimToady> well, maybe the macro is really .HOW.foo

[19:34] <TimToady> like ^foo

[19:35] <TimToady> and bare .HOW is different

[19:35] <ruoso> hmm

[19:35] <ruoso> if the spec say that I may be unable to do: my $a = Dog.HOW; $a.methods; without passing Dog as the invocant

[19:35] <TimToady> and you have to call $a.methods(Dog)

[19:35] <ruoso> or Dog:

[19:35] <ruoso> actually

[19:36] <ruoso> $a.methods(Dog: )

[19:36] * [particle] flails his arms with intentional vagueness

[19:36] <ruoso> [particle], the thing is that it isn't that vague now

[19:36] <TimToady> maybe metaclass methods are really mmd

[19:37] <TimToady> with "two invocants"

[19:37] <ruoso> hmmm

[19:37] <ruoso> actually I was wrong

[19:37] <TimToady> or maybe we only generate the proxy for bare .HOW

[19:37] <ruoso> Dog should be the first parameter, not the invocant

[19:37] <TimToady> that's what I said

[19:37] <ruoso> yes yes

[19:38] * ruoso changes his mind too easily

[19:38] <ruoso> TimToady, but anyway... I think proxy for bare .HOW may be ok

[19:38] <TimToady> me too, but when I do it most everyone else seems to change their mind along with me.  :)

[19:39] <[particle]> when you put it that way... you're right!

[19:39] <TimToady> what about when I don't put it that way?

[19:39] <ruoso> but... after all... I lost myself... did we got to a consensus or not?

[19:40] <[particle]> lol

[19:40] <ruoso> and which was it?

[19:40] <TimToady> general .HOW requires proxy, but easily optimized away on direct call

[19:41] <ruoso> ok... I'm fine with that

[19:41] <ruoso> which seems that the current spec is ok

[19:41] * [particle] likes general .HOW's chicken

[19:42] <TimToady> mmm, tastes like parrot

[19:43] <ruoso> anyway... so, in yap6 everything is dispatched to the metaclass

[19:43] <ruoso> that realises using the invocant which is the object

[19:43] <[particle]> :)

[19:43] <ruoso> and decides if run the code itself or if tries to resolve the method in the prototype according to the "^" sigil

[19:45] <ruoso> TimToady, but still, the "Class methods" section in S12 seems to imply that the metaclass may not be generic

[19:46] <ruoso> a metaclass method will be available to all objects dispatched by the same metaclass

[19:46] <ruoso> and not only that class

[19:47] <ruoso> actually I think that section should even warn that not all metaclasses will be open and non-final...

[19:48] <ruoso> that declaration regarding a closed and final metaclass should give an error

[19:49] *** fglock left
[19:49] *** ebassi joined
[19:50] * ruoso home &

[19:53] *** lorn joined
[19:59] *** Shillo joined
[20:00] *** Shillo left
[20:02] *** Auzon joined
[20:16] *** jisom left
[20:18] *** TJCRI joined
[20:18] <mncharity> fglock: ping?

[20:18] <lambdabot> mncharity: You have 1 new message. '/msg lambdabot @messages' to read it.

[20:18] *** dlocaus joined
[20:18] <dlocaus> @seen fglock

[20:18] <lambdabot> I saw fglock leaving #perl6 29m 43s ago, and .

[20:19] <Auzon> @seen Auzon

[20:19] <lambdabot> You are in #perl6. I last heard you speak just now.

[20:19] <mncharity> spinclad: :)

[20:19] <mncharity> lol

[20:19] <mncharity> @seen lambdabot

[20:19] <lambdabot> Yes, I'm here. I'm in #friendly-coders, #fi.muni.cz, #curry, #scannedinavian, #gentoo-haskell, ##logic, #xmonad, #unicycling, #perl6, #parrot, #jtiger, #haskell-soc, #haskell-overflow, #haskell-blah,

[20:19] <lambdabot>  #scala, #haskell, #ghc and #darcs

[20:19] <Auzon> Nice

[20:20] <[particle]> can you kick that bot from #parrot? there shouldn't be a #parrot on freenode

[20:20] <Auzon> Where should #parrot be, out of curiosity?

[20:20] <moritz_> Auzon: irc.perl.org

[20:21] <mncharity> [particle]:  i've no idea

[20:30] <mncharity> [particle]: @leave #parrot ... but I don't have the privileges

[20:31] <moritz_> @operator

[20:31] <lambdabot> Unknown command, try @list

[20:31] <moritz_> @list

[20:31] <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot/COMMANDS

[20:32] <mncharity> @tell dons from #perl6, re lambdabot "[particle]: can you kick that bot from #parrot? there shouldn't be a #parrot on freenode".  There's only one person there, plus lambdabot.  The real #parrot is on irc.perl.org.  fyi.  Thanks for the wonderful bot.

[20:32] <lambdabot> Consider it noted.

[20:32] <[particle]> mncharity++

[20:35] <mncharity> Maybe it's a channel about birds, and they like lambdabot? ;)

[20:37] *** dlocaus left
[20:39] *** tobeya joined
[20:48] *** Aankhen`` left
[20:49] *** lorn left
[20:50] *** mj41__ joined
[20:54] *** pmurias joined
[20:56] *** ispy1 left
[21:00] *** barney left
[21:01] <pmurias> mncharity: does ruby have named parameters and an efficient way to autovivification correctly

[21:02] <pmurias> s/correctly/efficiently/

[21:05] *** mj41 left
[21:13] <pmurias> as i percive it kp6 is blocking on a lack of a vm which can run p6 fast enough

[21:13] <pmurias> withought cutting on features and correctness

[21:14] <moritz_> aye

[21:14] <moritz_> that's why ruoso++ is working on yap6, right?

[21:17] <pmurias> mncharity: yes

[21:18] <spinclad> (yes it's a channel about bird?)

[21:18] <spinclad> *birds

[21:19] <spinclad> moritz_: yes aiui

[21:20] * spinclad & again

[21:20] <pmurias> moritz_: cutting on completness isn't that bad, but cutting on correctnes isn't nice at all

[21:21] <moritz_> pmurias: aye ;)

[21:25] *** jferrero left
[21:26] *** blindfish joined
[21:32] *** Ben_Hwa joined
[21:32] <Ben_Hwa> Oh my God!  Turn to the News!  President Bush was just assassinated in Israel! 

[21:32] *** gast_test left
[21:33] * Tene suspicious.

[21:34] * Auzon is skeptical

[21:34] *** TJCRI left
[21:34] <Ben_Hwa> ok just turn on the news

[21:35] <Ben_Hwa> omg

[21:35] <Tene> Google News does say stuff about bush visiting israel and predictions of violence.

[21:36] <Auzon> Nothing on CNN. Nice try though

[21:36] <Ben_Hwa> its all over fox news

[21:36] <Ben_Hwa> probably hasnt brok on cnn yet

[21:36] <Auzon> Find me a link

[21:36] <Ben_Hwa> fox news! you know, fox news?

[21:36] <Ben_Hwa> its like right on the front page duh

[21:37] *** Ben_Hwa left
[21:37] <wolverian> um, no.

[21:38] <Auzon> Seriously. Do crazies just like this channel?

[21:38] <Tene> Perhaps.

[21:39] <wolverian> well, it's listed on the channel list. 

[21:39] <wolverian> and not private

[21:39] <Auzon> Maybe we're a fairly large channel.

[21:40] <[particle]> bush gave a speech on the economy today in the rose garden at the white house.

[21:41] *** chris2 joined
[21:51] <pmurias> maybe they like channel names with a 6 in them?

[21:51] <moritz_> now I know why some folks want to rename perl6 ;-)

[21:57] *** thoughtp1lice joined
[21:58] *** ludan joined
[21:58] *** TJCRI joined
[21:58] <ludan> hi

[21:59] <Auzon> Hi

[22:03] <pbuetow> hi

[22:05] <mncharity> pmurias: moritz_: I suggest neither features nor correctness are key objectives when doing a bootstrap.  rather, developability is the sole critical need, of which fast enough is one component (vis kp6), and hackability is another (vis pugs hs, and "keeping everything working while doing a self-hosted bootstrap" vis kp6).

[22:06] <mncharity> actually, keeping everything working vis pugs hs too.

[22:08] <pmurias> mncharity: it would be possible to write a fast perl5 backend for kp6 if those are your criteria

[22:08] <pmurias> in a short amount of time

[22:09] <pugs_svn> r19385 | rhr++ | [Unicode.pm] fix grapheme_cluster again, use a regex state machine for %ps_to_pe

[22:09] <mncharity> then why do you say kp6 is blocked?

[22:09] *** cmarcelo left
[22:10] <pmurias> mncharity: it won't get you very far in the long term, unless you find a suitable backend (avar is interested in trying cl)

[22:11] *** jferrero joined
[22:12] *** renormalist joined
[22:13] *** renormalist left
[22:13] *** thoughtpolice left
[22:14] *** renormalist joined
[22:14] <mncharity> "long term"?  my impression is the current goal is to have something no less capable than pugs (ie, can run and largely pass t/ ), but written in p6.  with grammar work being the next blocker, itself being help up by backend speed, and perhaps slowed by self-hosting (not sure).

[22:15] *** jferrero left
[22:16] <mncharity> it seems likely that very little code which is written before that point with end up in a p6 release.  rather, it's all bootstrap cruft, and the only interesting criteria is does it help us get there.  no?

[22:17] <pmurias> mncharity: you'll get blocked on by some stuff in t/

[22:17] <pmurias> such as autovification

[22:19] <mncharity> if pugs hs had gotten one step further, and had usable oo, we would long ago have used that to write a p6 implementation of p6.

[22:19] <pmurias> mncharity: but if you are prepared to sacrifice correctness you will get pretty far quite fast

[22:20] <mncharity> pugs and kp6, and I suggest anything with a chance of succeeding, is willing to sacrifice correctness to get far fast. ;)

[22:21] <mncharity> re autovification, I don't understand why you think it difficult, eg,

[22:21] <pmurias> mncharity: i started work on a new faster kp6 perl5(Perl5V6) backend but got blocked by lack of time and not knowing how to do autovification and proper calling conventions fast

[22:21] <pmurias> mncharity: perl5 autovification is subtly diffrent

[22:22] <pmurias> different

[22:22] <mncharity> class Hash; def av(k); exists?(k) ? self[k] : self[k] = Value.new end    or some such

[22:23] <pmurias> mncharity: foo($hash{bar}) 

[22:23] <mncharity> bootstrap shouldn't require autovification.  calling conventions, and mmd, are perhaps more of an issue.  but one 

[22:23] <pmurias> mncharity: if you go for all positionals it's easiy

[22:24] <mncharity> advantage of the kp6rb approach, is one can use different conventions for the ruby p6-ish source, and any p5 or ruby or cl backend.  the former

[22:24] <pmurias> mncharity: if sub foo ($arg is rw) {...} is autovifies if sub foo ($arg is ro) {} not

[22:25] <mncharity> can be fast but restricted, the latter whatever, and you simply don't switch over to using the latter until you are comfortable with its performance.

[22:25] <Auzon> Is the bootstrapping problem the execution speed?

[22:26] <pmurias> Auzon: the bootstraped compiler is too slow with the current backend

[22:26] <pmurias> mncharity: it will be fast but incorrect

[22:26] <mncharity> re positionals, sorry, language noise, rb uses [] for hash lookup too.

[22:27] <pmurias> mncharity: i meant calling convention are easy, sorry

[22:29] <pmurias> you could try completing the new perl5 backend (KindaPerl6::Visitor::Emit::Perl5V6)

[22:29] <mncharity> hmm, maybe we need the exercise of creating a consensus document, describing where we are, what is holding us up, and what the challenges we face going forward are.

[22:29] <mncharity> as a way of creating collective focus and understanding of what we need to do to win

[22:31] <pmurias> i have to sleep now& (time zones--)

[22:31] <pmurias> g'night

[22:31] *** pmurias left
[22:31] <mncharity> oh, drat

[22:31] <mncharity> thanks for banging on the idea

[22:34] <mncharity> Auzon: http://irclog.perlgeek.de/perl6/2008-01-05#i_172914 and 23:19

[22:34] <lambdabot> Title: IRC log for #perl6, 2008-01-05

[22:34] *** alester left
[22:34] <mncharity> so I don't know if speed is critical or not

[22:36] * Auzon takes a look at STD.pm

[22:38] <mncharity> re kp6rb, it may well be the right thing is to instead do a faster kp6 p5 backend.  or refactor the grammar.  or something else.  I simply noticed a strikingly sweet sweet-spot, and that another xmas has passed us by.

[22:39] <mncharity> potentially sweet sweet-spot.  still insufficiently tested to be sure it just doesn't smell nice, but taste aweful.

[22:40] <Auzon> This would be a whole lot easier if my text editor understood Perl 6 :P

[22:40] <mncharity> http://svn.pugscode.org/pugs/src/perl6/STD.pm

[22:41] <mncharity> which editor?

[22:41] <Auzon> I have it checked out, I'm just trying to get some syntax highlighting

[22:41] <Auzon> I usually use Kate, but I'm reaching for Vim now

[22:41] <mncharity> i believe there is a vim mode...

[22:42] <Auzon> yep. Just looking on how to use it

[22:42] <Auzon> I'm not a Vim wizard :-/

[22:42] <mncharity> ./util/perl6.vim

[22:42] <mncharity> ah

[22:42] <mncharity> sorry, i've no idea (emacs)

[22:42] <Auzon> :P

[22:42] <Auzon> I think I can figure it out in a minute

[22:44] <Auzon> eh, I'll just turn it off for now

[22:50] *** TJCRI left
[22:52] *** ludan left
[22:55] <Auzon> Can anything (Pugs, KP6, etc) start to parse STD.pm?

[22:56] <Auzon> well, parse and use

[23:05] *** renormalist left
[23:08] *** rdice left
[23:08] *** blindfish left
[23:28] <mncharity> Auzon: not yet

[23:28] <mncharity> bbl &

[23:35] <TimToady> actually, pugs can parse it, if you run it through the cheat script

[23:36] <TimToady> was actually up to parsing 42+1 until I got sidetracked onto the longest token matching

[23:36] <Auzon> Isn't that enough to start writing a Perl 6 equivalent with Pugs to bootstrap it?

[23:36] <[particle]> then try 1+1 :)

[23:46] *** mj41____ joined
[23:57] *** iblechbot left
[23:57] *** ebassi left
[23:57] *** istarex joined
