[00:01] *** sri_work_ left
[00:11] *** eternaleye left
[00:13] *** Jedai left
[00:16] *** eternaleye joined
[00:27] *** eternaleye left
[00:28] *** Jedai joined
[00:29] *** eternaleye joined
[00:32] *** justatheory joined
[00:44] *** BinGOs left
[00:47] <pugs_svn> r22573 | lwall++ | [viv] can now reproduce t/01-sanity/01-tap.t

[00:47] <pugs_svn> r22573 | lwall++ | [STD] remember list separators

[00:55] *** BinGOs joined
[01:16] *** eternaleye left
[01:20] *** meppl joined
[01:21] *** mncharity joined
[01:24] *** bjakb left
[01:28] *** hercynium joined
[01:30] * mncharity searches for a description of the vision for viv and VAST... unsuccessfully. :/

[01:32] <mncharity> Didn't find any comments at all actually.  Maybe once the Design Minutes catch up?  They seem to have about a month latency.

[01:34] *** apeiron_ joined
[01:36] <mncharity> yay, '2 < 3' parses in viv now.

[01:38] *** eternaleye joined
[01:39] *** alanhaggai left
[01:39] *** alanhaggai joined
[01:43] <mncharity> @tell pmurias Could you add a README to misc/elfish/AST/ ?  Thanks.  Not quite clear what it is.

[01:43] <lambdabot> Consider it noted.

[01:43] *** apeiron left
[01:51] <mncharity> @tell pmurias What is the status of misc/elfish/elf_f_work/ ?  Could you update README?  Thanks.  Dusting a bit...

[01:51] <lambdabot> Consider it noted.

[02:14] *** Limbic_Region left
[02:14] *** zostay left
[02:15] *** zostay joined
[02:16] *** apeiron_ is now known as apeiron

[02:33] *** wknight8111 left
[02:53] <pugs_svn> r22574 | putter++ | [elfish/rx_on_re] Update to elf_h.  Dust README.  Delete obsolete EmitRegexYare.pm.  Fixed a bogus classname.

[02:53] *** meppuru joined
[02:54] *** mncharity left
[03:00] *** elmex left
[03:02] *** elmex joined
[03:10] *** meppl left
[03:15] *** _Lee_ joined
[03:36] <rakudo_svn> r31875 | tene++ | [rakudo]: Fix Str.trans.  cjfields++

[03:39] *** alester joined
[04:10] *** Alias_ joined
[04:11] *** kanru left
[04:12] *** kanru joined
[04:14] *** z80ASM joined
[04:26] *** justatheory left
[04:44] *** ihrd joined
[04:45] <ihrd> hi, we have vladivostok.pm meeting right now, and topic perl6 and November wiki. And we catch this:

[04:45] <ihrd> rakudo:my $foo = { $^z.say; $^a.say }; $foo("HAI", "HER");

[04:46] *** meppuru left
[04:46] *** Bzek joined
[04:46] <ihrd> rakudo: my $foo = { $^a.say; $^z.say }; $foo("HAI", "HER");

[04:46] <p6eval> rakudo 31875: OUTPUT[HAI␤HER␤]

[04:46] <ihrd> rakudo: my $foo = { $^a.say; $^z.say }; $foo("HAI", "HER");

[04:46] <p6eval> rakudo 31875: OUTPUT[HAI␤HER␤]

[04:47] <ihrd> akudo: my $foo = { $^z.say; $^a.say }; $foo("HAI", "HER");

[04:47] <ihrd> sorry

[04:47] <ihrd> rakudo: my $foo = { $^z.say; $^a.say }; $foo("HAI", "HER");

[04:47] <p6eval> rakudo 31875: OUTPUT[HER␤HAI␤]

[04:48] <ihrd> rakudo sort $^vars be name

[04:49] <ihrd> and assign to $^a first args, and to $^z second

[04:49] <Tene> lolcode: VISIBLE "OH HAI GUYZ"

[04:50] <Tene> Ack, mischen.

[04:50] <Tene> chan.

[04:53] <ihrd> dose it`s right behaviour?

[04:57] *** z80ASM left
[04:58] *** sail0r joined
[04:58] *** sail0r left
[05:05] *** _Lee_ left
[05:19] <pugs_svn> r22575 | lwall++ | [viv] straighten out chain operators

[05:47] *** alanhaggai left
[05:51] *** ihrd left
[06:03] *** Psyche^ joined
[06:12] *** BinGOs left
[06:14] *** sri_work joined
[06:15] *** Patterner left
[06:15] *** Psyche^ is now known as Patterner

[06:17] *** zamolxes joined
[06:37] *** alester left
[06:58] *** BinGOs joined
[07:13] *** alanhaggai joined
[07:15] <rakudo_svn> r31876 | pmichaud++ | [rakudo] spectest-progress.csv update: 203 files, 4366 passing

[07:27] <pugs_svn> r22576 | lwall++ | [viv] now outputs p6 variables, declarations

[07:27] <pugs_svn> r22576 | lwall++ | [STD] more random hackage for viv and :exists

[07:27] <pugs_svn> r22576 | lwall++ | [STD] now parses declaration initializers as normal assignops

[07:38] *** alanhaggai left
[07:38] *** alanhaggai joined
[07:49] *** masak joined
[07:51] *** araujo left
[07:52] *** mberends joined
[07:58] *** iblechbot joined
[08:52] *** alanhaggai left
[09:03] *** iblechbot left
[09:05] *** alanhaggai joined
[09:17] *** hanekomu joined
[09:20] *** hanekomu left
[09:22] *** pmurias_ joined
[09:23] *** icwiener joined
[09:24] <pmurias_> @tell mncharity everything in elf_f_work seems to be obsolete

[09:24] <lambdabot> Consider it noted.

[09:26] <pmurias> @tell misc/elfish/AST is supposed to contain the description of the IRx1 in Perl 6 as opposed to a strange "DSL"

[09:26] <lambdabot> Consider it noted.

[09:27] <moritz_> pmurias: EWRONGNICK

[09:27] <pmurias> @tell mncharity misc/elfish/AST is supposed to contain the description of the IRx1 in Perl  6 as opposed to a strange "DSL"

[09:27] <lambdabot> Consider it noted.

[09:50] *** alanhaggai_ joined
[09:53] *** alanhaggai left
[09:53] *** alanhaggai_ is now known as alanhaggai

[10:03] *** bacek joined
[10:04] <bacek> pugs: my @a = (1); @a[0] := @a; @a.perl

[10:04] <p6eval> pugs: RESULT["\\((1,),)"]

[10:13] <rakudo_svn> r31877 | masak++ | [rakudo] prefix/postfix ++ and -- now delegate to succ and pred, respectively

[10:13] <rakudo_svn> r31877 | masak++ | patch courtesy of Vasily Chekalkin (bacek++)

[10:13] <rakudo_svn> r31877 | masak++ | this patch fixes bug #59596

[10:41] <pugs_svn> r22577 | masak++ | [t/spec/S03-operators/autoincrement.t] added tests for overriding succ and pred

[10:45] *** iblechbot joined
[10:49] *** zamolxes left
[10:49] <masak> moritz_: what's running pugs_svn?

[10:50] <moritz_> masak: a mix of Bot::BasicBot and SVN::Log

[10:50] <masak> is there source somewhere?

[10:52] <pasteling> "moritz_" at 89.13.235.160 pasted "svnbot source for masak" (77 lines, 1.8K) at http://sial.org/pbot/32576

[10:52] <masak> dz :)

[10:52] <masak> I'm mainly looking for inspiration right now.

[10:53] <moritz_> I've been planning for ages to make it configurable and put it somewhere

[10:54] <masak> moritz_: what's calling &tick ?

[10:55] <masak> ah, found it

[10:55] <masak> Bot::BasicBot

[10:55] <masak> of course

[10:56] <masak> that's what I need!

[10:56] * masak membles enthusiastically

[11:00] *** alanhaggai left
[11:01] <literal> what kind of inspiration? for writing an IRC bot?

[11:02] <masak> literal: aye. using POE.

[11:02] <literal> have you read the POE::Component::IRC documentation?

[11:02] <masak> literal: partly.

[11:02] <masak> will read it again. :)

[11:03] *** bacek left
[11:03] <literal> bug me if you find anything wrong with it :P

[11:03] <masak> literal: hokay.

[11:03] <masak> & lunch

[11:03] *** masak left
[11:03] <literal> also, here's something, http://search.cpan.org/dist/IRC-Bot/

[11:03] <lambdabot> Title: Benjamin W. Smith / IRC-Bot - search.cpan.org

[11:14] *** alanhaggai joined
[11:37] *** pmurias_ left
[11:39] *** bjakb joined
[11:49] *** meppl joined
[12:21] *** masak joined
[12:30] *** zamolxes joined
[12:51] *** iblechbot left
[12:52] *** alanhaggai_ joined
[13:01] *** alanhaggai left
[13:01] *** alanhaggai_ is now known as alanhaggai

[13:13] <masak> perl6: say map {; $_ => "foo" }, (1, 2, 3, 4)

[13:13] <p6eval> pugs: OUTPUT[1  foo2    foo3    foo4    foo␤]

[13:13] <p6eval> ..elf 22577: OUTPUT[Use of uninitialized value in join or string at ./elf_f line 169.␤Undefined subroutine &GLOBAL::map called at (eval 119) line 3.␤ at ./elf_f line 3861␤]

[13:13] <p6eval> ..rakudo 31880: OUTPUT[Null PMC access in get_string()␤current instr.: 'parrot;P6metaclass;add_parent' pc 95 (runtime/parrot/library/P6object.pir:126)␤]

[13:14] <masak> hm, my local rakudo doesn't die on that.

[13:14] <moritz_> say (map {; $_ => "foo" }, (1, 2, 3, 4)).WHAT

[13:14] <moritz_> rakudo: say (map {; $_ => "foo" }, (1, 2, 3, 4)).WHAT

[13:14] <p6eval> rakudo 31880: OUTPUT[Null PMC access in get_string()␤current instr.: 'parrot;P6metaclass;add_parent' pc 95 (runtime/parrot/library/P6object.pir:126)␤]

[13:14] <masak> anyway, I was going to say that it's a bit unfortunate that the tabs make the wrong things group together

[13:15] <masak> I don't know if that counts as a design flaw, it's just unfortunate

[13:16] <moritz_> unfortunate design flaw? ;-)

[13:18] <masak> oh, oh, I've found out now why the S29 link under "caller" is broken

[13:18] <masak> it's line 35 of Pod::Simple::HTML

[13:19] <masak> it says to always strap on the prefix 'http://search.cpan.org/perldoc?' to a link

[13:19] <masak> apparently it's overridable

[13:19] <masak> (Sean M. Burke)++

[13:21] <masak> as I see it, I want to set $Perldoc_URL_Prefix = 'http://perlcabal.org/syn/'; $Perldoc_URL_Postfix = '.html'; in util/smartlinks.pl

[13:22] <moritz_> that would make S\d**2 links work

[13:22] <masak> ...which is what I'm after

[13:22] <moritz_> great

[13:22] <masak> it bugs me that they're broken

[13:23] <masak> hm, those variables are imported using a 'use vars' declaration

[13:23] <moritz_> s/imported/declared/

[13:23] <masak> ok.

[13:23] <moritz_> that's rougly the same as our

[13:24] <masak> does that mean I don't have to use our in util/smartlinks.pl?

[13:24] <moritz_> you can access them via $Full::Package::Name::Perldoc_URL_Postfix or somethiing

[13:24] <moritz_> (I hope)

[13:24] <masak> ah.

[13:24] <masak> good.

[13:25] <masak> before or after the eval { require Pod::Simple::HTML }; ?

[13:25] <moritz_> after

[13:26] <masak> will that work? won't line 35 in Pod::Simple::HTML have executed by then?

[13:26] <masak> ah, but that doesn't matter, does it? :)

[13:26] <moritz_> is it in a sub?

[13:26] <masak> no

[13:27] <moritz_> uhm

[13:27] <masak> it's out in the open

[13:28] <moritz_> just try it. Since it's only a default it should be possible to override afterwards

[13:28] <masak> I think so too.

[13:29] <masak> that variable is used in the constructor, so as long as I set it before I create a new object, it should be ok

[13:31] <pugs_svn> r22578 | masak++ | [util/smartlinks.pl] unbroke cross-reference links between synopses

[13:33] <masak> "step 2: wait."

[13:33] <moritz_> why wait?

[13:33] <moritz_> you can generate the HTML on your machine

[13:33] <moritz_> it's one of the countless options in smartlinks.pl

[13:36] <masak> ooh

[13:37] * masak generates

[13:42] <masak> it worked! :D

[13:46] *** charsbar joined
[13:46] <pugs_svn> r22579 | moritz++ | [t/spec] some smartlinks for rx.t. Many more needed.

[13:46] *** bacek joined
[13:50] <pugs_svn> r22580 | moritz++ | [t/spec] more smartlinks for rx.t, removed a few vim modelines

[13:54] *** zamolxes left
[14:02] *** charsbar_ left
[14:04] <moritz_> masak++ # it works, and is now online

[14:04] <masak> excellent.

[14:13] *** [particle] joined
[14:24] *** dominiko joined
[14:24] *** bacek left
[14:24] *** [particle] left
[14:29] <dominiko> Ri, faccio un sonellino adesso (k)

[14:29] *** icwiener_ joined
[14:29] *** dominiko left
[14:30] *** zamolxes joined
[14:42] *** [particle] joined
[14:42] *** icwiener left
[14:42] *** mncharity joined
[14:59] <mncharity> sigh.  change in plans.  back later.  current plan is to viv-ify STD_blue, with eye towards doing () tools, () STD_blue elf bootstrap, () STD_blue elf does STD.pm -> IR, () flesh out rx IR with rx_on_re in some form, () bootstrap, () profit.

[14:59] <lambdabot> mncharity: You have 2 new messages. '/msg lambdabot @messages' to read them.

[15:04] <mncharity> @tell pmurias re elf_f_work, ok, sounds rm-able.  re misc/elfish/AST, create README please (if havent'a already) ?  though it looked like it was simply  cat IRx1_Nodes.pm |perl -ne 'print if /^\s*(class|has)/;' or something vaguely like that.

[15:04] <lambdabot> Consider it noted.

[15:04] *** mncharity left
[15:10] <moritz_> std: proto [foo] (*@args) { 1; }

[15:10] <p6eval> std 22580: OUTPUT[parse failure␤]

[15:11] <moritz_> @tell TimToady STD.pm can't parse proto [foo] as illustrated in S03/Reduction operators/

[15:11] <lambdabot> Consider it noted.

[15:18] *** [particle] left
[15:21] <TimToady> whee

[15:21] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:22] <moritz_> are you serious about that syntax?

[15:23] <moritz_> oh, and I think rafl++ pointed out that array and hash unpacking in signatures wasn't parsed either

[15:23] <moritz_> but I haven't verified myself

[15:24] <TimToady> dunno

[15:24] <TimToady> not sure why it's a proto either

[15:24] <moritz_> std: sub quicksort ([$pivot, *@data], $reverse?, $inplace?) {1; }

[15:24] <p6eval> std 22580: OUTPUT[parse failure␤]

[15:25] <moritz_> (never trust p6eval's std output though, it's a bit unstable)

[15:25] <TimToady> well, I don't even trust STD's output yet :)

[15:26] <TimToady> half of the fixes to viv involve fixing STD too

[15:26] <moritz_> it can parse more Perl 6 than I can ;)

[15:26] <TimToady> well, there's that....

[15:27] <TimToady> I'm trying to think of a way to simplify all the sigil hoisting that is more like attribute grammars than procedures

[15:28] <pugs_svn> r22581 | moritz++ | [t/TASKS] two more tasks

[15:30] <pugs_svn> r22582 | moritz++ | [t/TASKS] **? is tested in rx.t and repeat.t

[15:32] *** iblechbot joined
[15:34] <moritz_> currently [\$op] is only tested with left-assoc $op

[15:35] <moritz_> would @@ [\**] 2, 3, 4 return [4], [3**4], [2**3**4]?

[15:36] <moritz_> erm, just 4, 3**4, 2**3**4

[15:37] *** Ehtyar left
[15:37] <TimToady> yes

[15:39] <moritz_> pugs: 2**3**4

[15:39] <p6eval> pugs: RESULT[2417851639229258349412352/1]

[15:39] <TimToady> here's an interesting ambiguity:  -> $x { #<I am a hash unpacker> }

[15:39] <moritz_> ouch

[15:39] <masak> :/

[15:40] <TimToady> and you can't change it to -> $x{...} because that's a shaped array declaration

[15:40] <TimToady> s/array/hash/

[15:41] <TimToady> well, %x{...} would be, anyway

[15:41] <TimToady> not sure there are shaped scalars :)

[15:41] <pugs_svn> r22583 | moritz++ | [t/spec] tests for [\$op] with right assoc $op

[15:44] *** [particle] joined
[15:49] <TimToady> actually, it's not clear why we shouldn't just unpack arrays and hashes with sub-signatures, which parse already

[15:50] <TimToady> sub quicksort ([$pivot, *@data], $reverse?, $inplace?)

[15:50] <TimToady> could just as easily be:

[15:50] <TimToady> sub quicksort (($pivot, *@data), $reverse?, $inplace?)

[15:51] <moritz_> and [...] suggest a reference to an array anyway

[15:51] <TimToady> other than the doc value

[15:51] <TimToady> but sigs can unpack mixed positional named

[15:52] <TimToady> the bad ambiguity goes away if we change

[15:52] <TimToady> sub register ({:$name, :$addr, *%guest_data}, $room_num)

[15:52] <TimToady> to

[15:52] <TimToady> sub register ((:$name, :$addr, *%guest_data), $room_num)

[15:52] <pmichaud> in http://irclog.perlgeek.de/perl6/2008-10-07#i_609762 I asked the question:

[15:52] <lambdabot> Title: IRC log for #perl6, 2008-10-07

[15:53] <pmichaud> class Foo { ... };   say Foo.WHAT;  # "Foo\n"

[15:53] <pmichaud> module Bar { ... };   say Bar.WHAT;   # ???

[15:53] <pmichaud> ruoso answered: 'cannot find class Bar in the current scope'

[15:53] <pmichaud> ...is that correct?

[15:54] <pmichaud> because S11 has  Foo::Bar.EXPORTALL, which seems to be a method call on the Foo::Bar module

[15:54] *** justatheory joined
[15:54] <masak> seems there has to be _some_ way to refer to a module

[15:54] <TimToady> modules and packages are objects too :)

[15:55] <pmichaud> so .WHAT would work, then?

[15:55] <TimToady> but the distinction seems to be rather like the @x.method vs $x.method distinction

[15:55] <TimToady> on the other hand WHAT is really a macro

[15:56] <TimToady> not sure I've had enough caffiene to puzzle it out yet

[15:56] <pmichaud> yes, I know it's a macro, but if Foo::Bar is an object, it seems like we should be able to do .WHAT on it.

[15:56] <TimToady> I think Foo::Bar is first of all a package name

[15:57] <TimToady> which can in some cases be used as a class

[15:57] <pmichaud> well, protoobject.

[15:57] <TimToady> it's first of all a package name that can also be used as a protoobject :)

[15:58] <TimToady> I guess the question is where there are ambiguities in "how is it being used?" and what we need to do to clear those ambiguities

[15:58] <TimToady> or however you say that in English

[15:58] <pmichaud> at the moment I'm just curious what .EXPORTALL is being called on :-)

[15:59] <pmichaud> if the answer is that it's called on a Package, that's fine with me.  :-)

[15:59] <TimToady> one could consider all packages to be protoobjects

[15:59] <TimToady> it's just that

[16:00] <pmichaud> that's the way I was headed first, until I asked the .WHAT question above (and got ruoso's answer)

[16:00] <TimToady> no methods are automatically constructed unless it's a class

[16:00] <pmichaud> I'm wondering if Foo::Bar is just an instance of a package.

[16:00] <TimToady> well, ruoso thinks sideways from the rest of us, which has both advantages and disadvantages :)

[16:01] <TimToady> was wondering that earlier, but it makes a discontinuity of sorts

[16:01] <pmichaud> agreed.

[16:02] <TimToady> it may be that Foo:Bar.randommethod should fail just to keep all package names looking like undefs

[16:02] *** alanhaggai left
[16:03] <TimToady> except for methods that are defined on undefs, of course :)

[16:03] <TimToady> but WHAT is exempt as a macro

[16:04] <TimToady> so I think WHAT on a package name/protoobject should return the packagename/protoobject probably

[16:04] <TimToady> it's just you can't do much more with it than you could before :)

[16:07] <TimToady> anyway, WHAT is fundamentally not an ordinary method

[16:07] <pmichaud> sure, I get that

[16:07] <TimToady> I think that's where the discontinuity should be

[16:08] <TimToady> not between packages and classes

[16:08] <pmichaud> my question was more along the lines of   "for Foo::Bar.EXPORTALL", what is the class of the thing receiving ".EXPORTALL"?

[16:10] <TimToady> I think, probably, fundamentally packages and modules are also classes; they just guarantee certain extra apparatus when you use a particular keyword

[16:10] <TimToady> so maybe it's fine to put a method in a package and call it, but you get no automatic EXPORTALL method, for instance

[16:11] <TimToady> (unless we want to support @ISA somehow in that case for old time's sake...:)

[16:12] <TimToady> so you could import methods from a module into a class maybe too, albeit without the protection of roles

[16:12] <TimToady> and by default they'd be imported as "my methods"

[16:12] <TimToady> which seems like it might be useful for importing infrastructure

[16:12] <TimToady> since roles are mostly for composing api

[16:13] <TimToady> certainly STD doesn't care where you define a method

[16:14] <TimToady> certainly ruby gets along by making everything a class really, but we can be clearer about intent

[16:16] <TimToady> if we want to talk about a package as a container, maybe it's VAR(package)

[16:16] <TimToady> so Foo::Bar.method is more like $x.method than like @x.method, which is what I was trying to get at earlier

[16:17] <TimToady> or Foo::Bar:: is also perhaps the container

[16:17] <TimToady> which is why Foo::Bar::{'$foo'} works

[16:18] <TimToady> yow, does that mean would do away with VAR and just use $foo:: to mean the container of $foo?

[16:18] <pmichaud> or perhaps ::$foo ?  O

[16:18] <TimToady> s/would/we could/

[16:18] <TimToady> doesn't backport to ::Foo::Bar

[16:18] <TimToady> with the current meaning of that

[16:19] <TimToady> which is, I know this is a valid package name, don't check it

[16:19] <pmichaud> ah, okay.

[16:19] <TimToady> package/type/protoobject...

[16:21] <pmichaud> lunchtime here -- bbiaw

[16:22] <TimToady> yeah, I need to go break my house

[16:23] *** [particle] left
[16:26] *** zamolxes left
[16:27] *** PZt left
[16:39] *** Southen_ left
[16:39] <pugs_svn> r22584 | masak++ | [t/TASKS] fixed a few typos

[16:41] *** Southen joined
[16:45] *** alanhaggai joined
[16:47] *** justatheory left
[16:55] *** kanru left
[16:56] *** masak left
[17:00] *** kanru joined
[17:09] *** Alias_ left
[17:19] *** alanhaggai_ joined
[17:19] *** alanhaggai left
[17:20] *** alanhaggai_ is now known as alanhaggai

[17:37] *** Bzek left
[17:44] *** rjbs joined
[17:44] <rjbs> So, I see ./languages/json, but is there a way to use that or something else to turn JSON into Perl6 data?

[17:50] *** [particle] joined
[17:50] *** justatheory joined
[18:04] <rakudo_svn> r31886 | pmichaud++ | [rakudo]:  Some updates to progress-graph.pl.

[18:07] *** sri_work_ joined
[18:09] * rjbs wonders if he can get a json answer in the hackathon room. :)

[18:16] <pmichaud> at present we don't have a way of doing language interop in rakudo.

[18:18] <rjbs> Is there a way to find if someone has written a library to do X apart from Google?

[18:18] <rjbs> Maybe I can just write some rules.

[18:19] *** explorer joined
[18:21] *** jfredett joined
[18:23] *** sri_work left
[18:26] <rakudo_svn> r31887 | pmichaud++ | [rakudo]: STD.pm alignment -- add <args>, split out <morename> in <name>

[18:39] <speckbot> r14593 | larry++ | clarify use of [...] and {...} in a signature

[18:45] *** dierot joined
[18:50] <rakudo_svn> r31888 | pmichaud++ | [rakudo]:  STD.pm alignment -- convert <identifier> in term:name to <name>

[18:53] <literal> pugs: [*] 2, 3, 3.14

[18:53] <p6eval> pugs: RESULT[471/25]

[18:53] <literal> O_o

[18:54] <TimToady> pugs are fond of rats

[18:55] <pugs_svn> r22585 | lwall++ | [STD] implement [...] and {...} subsigs, rafl++ and moritz++

[18:55] <pugs_svn> r22585 | lwall++ | [viv] warning suppression

[18:56] <TimToady> now that I've broken the house, it's time to go on the roof

[18:56] <moritz_> TimToady: in that spec commit you used the same example twice, which seems a bit non-sensical to me

[18:57] <moritz_> copy & paste gone wrong?

[18:58] <TimToady> example is right, but comment is wrong

[18:58] <TimToady> fixing

[18:58] <speckbot> r14594 | larry++ | copy/paste error, moritz++

[18:59] *** dierot left
[19:00] <TimToady> afk & # roof

[19:04] <[particle]> jump!

[19:10] <pmichaud> std: /join #ppw

[19:10] <pmichaud> oops!

[19:10] <p6eval> std 22585: OUTPUT[parse failure␤]

[19:10] <[particle]> wait, perl 6 doesn't understand irc syntax!?!?

[19:11] <[particle]> ISAGN.

[19:11] <pmichaud> std: ::Apache::foo 3, 4

[19:11] <p6eval> std 22585: OUTPUT[parse failure␤]

[19:11] <pmichaud> std: ::Apache::foo(3, 4)

[19:11] <p6eval> std 22585: OUTPUT[parsed␤]

[19:27] *** justatheory left
[19:43] <rakudo_svn> r31889 | pmichaud++ | [rakudo]:  Eliminate bogus duplicate <name> rule.

[19:45] * rjbs is looking for documentation on how to force an indirect subrule into a named capture.

[19:46] <rjbs> Perhaps that is irrelevant...

[19:46] <rjbs>   my $members = /x/; my $object  = /'{' <$members> '}'/;

[19:46] <rjbs> rakudo barfs, Statement not terminated properly at line 72, near "$members> "

[19:49] <pmichaud> rjbs: the syntax is    my $object = / <$members> /;

[19:49] <pmichaud> but that will use the value of $members at the time the regex is invoked, as opposed to when the regex is defined (I think)

[19:49] <pmichaud> there's not really an "interpolation" mechanism like in p5

[19:49] <rjbs> That's what I expect.

[19:49] <pmichaud> (and rakudo doesn't currently support the <$foo> syntax, sadly.)

[19:49] *** BinGOs left
[19:50] <rjbs> OH!

[19:50] <rjbs> Well, that's a bit of a blocker.

[19:50] <pmichaud> that will come with the next iteration of PGE

[19:50] <rjbs> Thanks

[19:50] <rjbs> Can I define named subrules inside a single rule?  (Like I can in Perl 5 v10)

[19:50] *** BinGOs joined
[19:51] <rjbs> Well, whatever, no worries.  Thanks very much!

[19:51] <moritz_> $stuff=(capture)

[19:52] <moritz_> rakudo: "abc" =~ m/$x:=(.)/; say $<x>;

[19:52] <p6eval> rakudo 31889: OUTPUT[Method 'lvalue' not found for invocant of class 'PAST;Val'␤current instr.: 'parrot;PAST;Compiler;as_post' pc 2887 (src/PAST/Compiler.pir:736)␤]

[19:52] <moritz_> rakudo: "abc" =~ m/$x=(.)/; say $<x>;

[19:52] <p6eval> rakudo 31889: OUTPUT[Method 'lvalue' not found for invocant of class 'PAST;Val'␤current instr.: 'parrot;PAST;Compiler;as_post' pc 2887 (src/PAST/Compiler.pir:736)␤]

[19:52] <moritz_> uhm :(

[19:52] <[particle]> ahem

[19:52] <[particle]> ~~ not =~

[19:52] <pmichaud> rakudo:  "abc" ~~ /$x=(.)/; say $<x>

[19:52] <moritz_> ouch

[19:52] <p6eval> rakudo 31889: OUTPUT[Use of uninitialized value␤␤]

[19:53] <rjbs> yeah, what I want to do is reuse the (.) though

[19:53] <pmichaud> rakudo:  "abc" ~~ /$<x>=(.)/; say $/<x>

[19:53] <p6eval> rakudo 31889: OUTPUT[a␤]

[19:53] <rjbs> by name rather than by cut and paste

[19:53] <rjbs> but knowing $<x>=(.) is definitely useful too

[19:53] <moritz_> then use 'rule x { ... }'

[19:53] *** gantrixx joined
[19:54] <pmichaud> rakudo:  regex x { . };  "abc" ~~ / <x> <x> <x> /; say $<x>[1];

[19:54] <p6eval> rakudo 31889: OUTPUT[b␤]

[19:54] <rjbs> woah. rakudo just went nuts

[19:55] <rjbs> rule members = { 'x' }; my $object  = / '{' <members> '}' /;

[19:55] <rjbs> perl6(7644) malloc: *** error for object 0x2a934a0: double free

[19:55] <rjbs> *** set a breakpoint in malloc_error_break to debug

[19:55] <pmichaud> wow, that's odd.

[19:55] <rjbs> same for s/rule/regex

[19:56] <pmichaud> no = in 'rule' statement

[19:56] <rjbs> ha, duh

[19:56] <pmichaud> I'm not sure why that's not a syntax error, though.

[19:56] <rjbs> perfect

[19:56] <rjbs> thanks much

[19:56] <rjbs> gotta get ready to give my talk, back to this later

[19:56] <rjbs> rule{ } is even better than <$rule anyway, for me

[19:56] *** zamolxes joined
[20:05] *** araujo joined
[20:31] *** wknight8111 joined
[20:34] *** alanhaggai_ joined
[20:34] *** alanhaggai left
[20:40] *** iblechbot left
[20:42] *** justatheory joined
[20:43] *** bjorn` joined
[20:50] *** Ehtyar joined
[20:56] *** lomolar joined
[21:09] *** kst left
[21:10] *** kst joined
[21:12] *** [particle] left
[21:21] *** pmurias left
[21:23] *** BinGOs left
[21:29] *** BinGOs joined
[21:33] *** bacek joined
[21:34] *** Kirchhoff joined
[21:37] *** Kirchhoff left
[21:38] *** mberends left
[22:18] <rakudo_svn> r31891 | cotto++ | [codingstd] trailing space fix

[22:28] *** sri_work_ left
[22:32] *** bacek left
[22:50] *** alanhaggai__ joined
[22:54] *** alanhaggai_ left
[23:10] *** justatheory left
[23:11] *** justatheory joined
[23:48] *** Khisanth left
[23:49] *** PZt joined
[23:55] *** justatheory left
[23:58] *** Khisanth joined
