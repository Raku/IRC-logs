[04:20] *** ilogger2 joined
[04:34] *** eternaleye joined
[04:47] *** eternaleye left
[04:58] *** eternaleye joined
[05:02] *** Psyche^ joined
[05:05] * allbery_b wonders if that last message was a mistake

[05:06] <spinclad> allbery_b: no, he did leave after 'good night all &'

[05:06] <spinclad> :)

[05:07] <allbery_b> mm, wrong venue :)

[05:14] *** Psyche^ is now known as Patterner

[05:48] *** Zaba_ joined
[05:53] <TimToady> allbery_b: yes, it was.  :)

[05:54] <allbery_b> hm

[06:16] *** Zaba_ is now known as Zaba

[06:21] <cathyal> anyone using irssi

[06:21] <cathyal> hi tim, allbery_b

[06:22] <Patterner> is that a trick question, cathyal?

[06:22] <cathyal> no 

[06:22] <Patterner> yes

[06:23] <cathyal> ok so Irssi: Join to #irssi was synced in 253 secs

[06:23] <cathyal> how does that work?

[06:23] <cathyal> addition multiplication, not a single step procesS?

[06:23] <cathyal> seems like a prime number

[06:23] <cathyal> 253..

[06:23] <fullermd> It's not, it's 11*23   :)

[06:23] <cathyal> wait go slow, what do you mean

[06:24] * fullermd shrugs.

[06:25] <fullermd> It's not prime, it's a product of 2 primes.

[06:25] <cathyal> is it not a single step process?

[06:25] <fullermd> What, the syncing?

[06:25] <cathyal> yeah

[06:25] <fullermd> I dunno.  It pulls a list of users at least.  Not sure what else it does.

[06:26] <cathyal> ok

[06:28] <Eevee> wow

[06:28] <Eevee> I've gotten 23 seconds before but not four minutes

[06:28] <cathyal> thats my point

[06:29] <Eevee> might have lost an unimportant response to something and irssi waited a while before giving up

[06:31] * cathyal shrugs

[06:31] <cathyal> k

[07:03] *** justatheory joined
[07:04] *** justatheory left
[07:07] *** araujo joined
[07:13] <pugs_svnbot> r20338 | lwall++ | [STD5] throw out $depth and $binding params; should be done by caller, not callee

[07:13] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20338

[07:13] <lambdabot> Title: Changeset 20338 - Pugs - Trac

[07:24] *** meppl joined
[08:18] *** iblechbot joined
[08:24] *** Schwern joined
[08:40] *** luqui joined
[09:01] *** FurnaceBoy joined
[09:10] *** wknight8111 joined
[09:20] *** icwiener joined
[09:30] *** FurnaceBoy left
[09:37] *** FurnaceBoy joined
[09:39] *** barney joined
[09:55] *** meppl left
[09:56] *** meppl joined
[10:05] *** FurnaceBoy left
[10:06] *** smtms joined
[10:24] *** nipotan joined
[10:41] *** barney left
[10:47] *** icwiener_ joined
[10:59] *** icwiener left
[11:04] *** yewenbin joined
[11:32] *** meppl left
[11:33] *** pbuetow joined
[11:35] *** meppl joined
[12:17] *** nipotan is now known as nipotaway

[12:39] *** wknight8111 left
[12:53] *** iblechbot left
[13:25] *** sscaffidi joined
[13:37] *** eternaleye left
[13:46] *** riffraff joined
[13:55] *** kcwu_ joined
[14:02] *** TJCRI joined
[14:11] *** Zaba_ joined
[14:11] *** Lorn joined
[14:14] *** iblechbot joined
[14:23] *** Zaba left
[14:24] *** Zaba_ is now known as Zaba

[14:24] *** tzoa joined
[14:32] *** chris2 joined
[14:39] *** yewenbin left
[14:39] *** syle joined
[14:44] *** cognominal_ joined
[14:55] *** FurnaceBoy joined
[15:01] *** rhr joined
[15:07] <pugs_svnbot> r20339 | lwall++ | [STD] fate should also be completely hidden from user view

[15:07] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20339

[15:07] <lambdabot> Title: Changeset 20339 - Pugs - Trac

[15:08] *** yewenbin joined
[15:08] *** mncharity joined
[15:11] *** kyrbe joined
[15:11] *** kyrbe left
[15:19] <TimToady> now that I've cut out all the parameter bogosity and callee-binding, maybe I have some small hope of constructing a well-formed match tree...

[15:20] <TimToady> at least what's left looks a heck of a lot cleaner now

[15:20] <kolibrie> TimToady++ # tidying up

[15:21] <TimToady> well, thanks, I just hate fighting my own past stupidities.  but it's the only way forward...

[15:32] *** kcwu_ is now known as kcwu

[15:35] *** alester joined
[15:37] <[particle]> so... does perl 6 have a 'reset' op? or is that a method on ::?COMPILER now? ;)

[15:38] <TimToady> which reset are you referring to?

[15:38] <TimToady> it was overloaded...

[15:38] <TimToady> but I believe we've managed to get rid of all its meanings now

[15:38] <[particle]> yes, i believe so too

[15:39] <[particle]> was reset in perl 1?

[15:39] <TimToady> I believe so

[15:39] <TimToady> at least, the variant that clobbered lots of variables

[15:39] <Eevee> wow I completely forgot reset even existed

[15:39] <TimToady> not sure about resetting ?...?

[15:39] <[particle]> i wonder about implementing that in punie.

[15:40] <Eevee> hack from before lexicals existed?

[15:40] <TimToady> indeed

[15:40] <[particle]> shouldn't be hard, but i'm not sure pct supports it. there are ways around that, thought.

[15:40] <[particle]> *though.

[15:41] <TimToady> variable reset just needs to be able to navigate the symbol table

[15:41] <TimToady> regex reset could be harder

[15:42] <mncharity> "ï»¿I just hate fighting my own past stupidities.  but it's the only way forward...", oh yeah.  :)

[15:42] <mncharity> civilization and life as a bootstrap exercise

[15:42] <TimToady> anyway, I think you'll find STD.pm rather prettier now

[15:44] <mncharity> just to double check before I do a code =~ s/if\(/if (/g,  'if(3){4}', with no space after the if, is invalid p6, correct?

[15:45] <TimToady> it's valid, it just doesn't mean what you think it means

[15:45] <mncharity> :)

[15:45] *** sscaffidi left
[15:45] <TimToady> it calls the "if" subroutine, and then derefs as a hash subscript of 4

[15:46] <TimToady> which, fortunately, is likely to blow up

[15:46] <TimToady> especially if you've neglected to define an "if" sub

[15:46] <pugs_svnbot> r20340 | jnthn++ | [spectest] A little fudging for Rakudo.

[15:46] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20340

[15:46] <lambdabot> Title: Changeset 20340 - Pugs - Trac

[15:46] <TimToady> so it can catch it at compile time

[15:47] <TimToady> (usually)

[15:47] <mncharity> a new day, a new number sequence... (1) in statement_control:if, 'elsif' and 'else' should perhaps be followed by <nofat_space> to match if's behavior.

[15:48] <mncharity> we'll need a new conversational idiom to distinguish "if()" from "if ()".  :)  "sc:if"?

[15:50] <TimToady> the first one's pronounced "interface" :)

[15:55] *** meppl left
[15:56] <TimToady> re (1), yes, though interestingly repeat's while/until probably doesn't

[15:56] *** meppl joined
[15:58] <pugs_svnbot> r20341 | lwall++ | [STD] elsif and else need <nofat_space> since they could be a new statement

[15:58] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20341

[15:58] <TimToady> whoops, forgot your putter++  :)

[16:03] <TimToady> biab &

[16:03] <mncharity> lol

[16:03] <pugs_svnbot> r20342 | putter++ | [elf_e] if's must be followed by a space.

[16:03] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20342

[16:03] <lambdabot> Title: Changeset 20342 - Pugs - Trac

[16:13] *** luqui left
[16:22] <mncharity> (2) q_balanced is still using the now non-existent $stop argument to EXPR.

[16:25] <mncharity> What is the story behind  subcall  being commented out?

[16:27] *** rindolf joined
[16:29] *** yewenbin left
[16:31] *** kanru joined
[16:32] *** Chillance joined
[16:36] *** rdice joined
[16:40] <pugs_svnbot> r20343 | putter++ | [elf] else's must be followed by a space.

[16:40] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20343

[16:40] <lambdabot> Title: Changeset 20343 - Pugs - Trac

[16:41] <TimToady> mncharity: the story is that it's currently handled by term:name because my LTM doesn't yet do backoff to tied or shorter tokens

[16:41] <rindolf> Hi TimToady 

[16:41] <TimToady> same story as packagevar and fulltypename, basically

[16:41] <TimToady> howdy

[16:42] <rindolf> TimToady: I have more lines for my "I'm the Real TimToady song."

[16:42] <rindolf> "And Randal Schwartz said... Nothing, you Idiot! Randal Schwartz's mad at you for not paying attention."

[16:42] <TimToady> I don't recognize that tune...

[16:42] <rindolf> TimToady: wait a sec.

[16:42] <rindolf> TimToady: can you see YouTube?

[16:42] <TimToady> not at the moment

[16:42] <Eevee> TimToady: you're not really missing much

[16:43] *** eternaleye joined
[16:43] <rindolf> TimToady: well use http://www.youtube.com/watch?v=zCuwOG39HMo

[16:43] <lambdabot> Title: YouTube - Oops The Real Sim Shady Did It Again

[16:43] <rindolf> TimToady: you can also use youtube-dl.

[16:44] <rindolf> TimToady: which is written in Python (Shavess!) but is still cool.

[16:45] <mncharity> re subcall, ah, ok.  then I'll continue using it for now.

[16:45] <rindolf> TimToady: do you know Yiddish?

[16:45] <rindolf> TimToady: I know a little of it.

[16:46] <mncharity> (3) token dotty uses explict '.' rather than <sym>, so does endsym unspacey get used or not?

[16:47] <TimToady> re (2), the quote languages should be using a derived terminator like the regex sublanguages

[16:47] <TimToady> I'm still refactoring that

[16:47] <mncharity> nod

[16:47] <TimToady> rindolf: not enough to know whether I'm a schlemiel or a schlemazl

[16:48] <rindolf> TimToady: heh.

[16:48] <rindolf> TimToady++

[16:48] <TimToady> endsym is only used on <sym>

[16:51] <obra> pmichaud: ping

[16:52] <TimToady> I'm disinclined to all unspace in the middle of .* et al. but after that token is probably okay

[16:52] <TimToady> *allow

[16:55] <mncharity> ok.  just noting proto token dotty is ensym unspacey, but it no longer looks like there's a dotty <sym> to use it anywhere.

[16:55] <pugs_svnbot> r20344 | lwall++ | [STD] dotty needs more unspaciness, putter++

[16:55] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20344

[16:55] <lambdabot> Title: Changeset 20344 - Pugs - Trac

[16:55] <mncharity> ah :)

[16:55] <TimToady> problem is that <sym> would match .* literally, rather than .+, .?, etc.

[16:56] <TimToady> otherwise I have to split those all out as separate tokens

[16:56] <TimToady> and that was one of the things that was making my lexers huger earlier

[16:57] <TimToady> probably not as big a problem now that I split lexers on first char

[16:58] *** sscaffidi joined
[16:59] <TimToady> twigils also act as lexer multipliers if you're careful...

[16:59] <TimToady> *not careful

[17:02] <[particle]> depends on what you're being careful to accomplish

[17:08] *** tzoa left
[17:09] <TimToady> I/O, I/O, so off to work I go...  &

[17:10] <rindolf> A Bit or Bite so late at night.

[17:10] <rindolf> I Bit a Bite so late at night.

[17:19] <mncharity> oy :)

[17:21] <pmichaud> 16:46 <obra> pmichaud: ping

[17:21] <pmichaud> pong

[17:22] <[particle]> rats. now i gotta go. bbi~2h

[17:23] <obra> pmichaud: hiya.

[17:23] <obra> particle has been talking me through some of the bits of extracting and converting pugs tests.

[17:24] <obra> I started poking at something at looked "easy" and got an interesting explosion:

[17:24] <obra> then perl t/harness --fudge --keep-exit-code t/pugs/operators/arith.t

[17:24] <obra> sub tryok ($ok, $todo = '') {

[17:24] <obra> trips up rakudo's parser

[17:25] <pmichaud> just a sec

[17:25] <pmichaud> I don't know if initializers are implemented yet

[17:25] <rindolf> Hi pmichaud 

[17:25] <rindolf> Hi obra, [particle] 

[17:25] * rindolf is editing http://www.perlfoundation.org/perl5/index.cgi?history

[17:25] <lambdabot> Title: History / Perl 5 Wiki

[17:26] <pmichaud> obra:  it looks like rakudo doesn't understand the  = ''    part yet

[17:26] *** justatheory joined
[17:26] <pmichaud> not hard to implement, just hasn't been done yet.  Could try it as  $todo?   though

[17:27] <obra> poking

[17:27] <pmichaud> oh, I misread rakudo's grammar -- looks like ? and ! aren't there yet either

[17:27] <pmichaud> oh wait, yes they are

[17:29] <obra> there's other fudging I need to do

[17:29] <obra> for undefine $a;

[17:29] <obra> and ..some operator

[17:30] <obra> but I'm doing the brute force thing right now

[17:30] <obra> t/pugs/operators/arith......Scope  not found for PAST::Var 'ok'

[17:30] <pugs_svnbot> r20345 | clkao++ | use items for bind_pad.

[17:30] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20345

[17:30] <lambdabot> Title: Changeset 20345 - Pugs - Trac

[17:30] *** tcliou joined
[17:31] <pmichaud> we should be able to get the '=' initializer implemented relatively quickly

[17:31] <pmichaud> I'll file a ticket for it

[17:33] <obra> cool.

[17:33] <obra> mostly, I'm trying to understand the test extraction process

[17:33] <obra> so that I can write it up for the list to maybe lure in some willing help

[17:33] <pmichaud> feel free to ask questions here -- any of myself, particle, or TimToady can likely answer

[17:33] <pugs_svnbot> r20346 | putter++ | [STD_red] cleanup continues.  statement_control et.al. whitespace; term:BEGIN; <?stdstopper> calls added (disabled in expect_term due to massive regression); dotty changes (one deferred); EXPR argument list tweaked.

[17:33] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20346

[17:34] * obra nods

[17:34] <pmichaud> one potential workaround for now is    sub foo($ok, $todo?) { $todo = $todo // '';  ... }

[17:34] <pmichaud> I *think* we've implemented infix:<//>

[17:35] * obra nods

[17:35] * pmichaud checks.

[17:35] <obra> I don't know what that new failure I pasted means

[17:36] <pmichaud> looks like a typo in the codegen somewhere

[17:36] <pmichaud> we shouldn't have a PAST::Var 'ok' -- it should be '$ok'

[17:36] <obra> (Pasted to: http://paste.husk.org/11305

[17:36] <obra> both failures and the currently hacked up t file

[17:37] <pmichaud> oh

[17:37] <pmichaud> that's looking for &ok

[17:37] <pmichaud> (which gets automorphed into 'ok')

[17:38] <pmichaud> what is the &ok.nextwith(...)   supposed to do?

[17:38] <obra> looking

[17:39] <obra> Any pugs test hackers able to shed light?

[17:39] <pmichaud> my initial guess is that it's automatically counting tests

[17:39] *** pmurias joined
[17:39] <pmichaud> and that .nextwith is some sort of currying

[17:40] <pmichaud> (updating my pugs repo so I can check)

[17:40] <pmurias> mncharity: do you use the elf_e executable?

[17:41] <mncharity> TimToady: (4) why is stdstopper a regex rather than a token?  also fulltypename.

[17:41] <obra> (I sadly need to run away for a going-away lunch)

[17:41] <pmichaud> no problem.  I'll look into it a bit further and message you

[17:41] <pmichaud> I need to do lunch also

[17:41] <pmichaud> I'll be back around 1400 CDT

[17:42] <pmichaud> (80 mins from now)

[17:42] <mncharity> ï»¿pmurias: yes.  and _nomoose.

[17:42] <pmichaud> ah, .nextwith is in S06

[17:43] <mncharity> ï»¿pmurias: ... why? :)

[17:44] <pmichaud> my opinion is that testing for arithmetics shouldn't depend on the availability of wrapping.

[17:45] <pmurias> mncharity: i'm wondering if there is any point of keeping it

[17:45] <pmurias> mncharity: why do you use elf_e instead of elf_e_nomoose? (testing?)

[17:47] <pmurias> pmichaud: .nextwith is used to provide better error traces

[17:49] <pmichaud> pmurias: how so?

[17:50] <pmichaud> regardless, I think it's a bit of a mistake to say that any given p6 implementation must have .wrap and .nextwith working before it can run the arithmetic tests.

[17:50] <mncharity> nextwith is a tailcail, so caller remains the test line of interest

[17:50] <pmurias> it's a bit pointless as &ok dosn't throw exceptions

[17:51] <mncharity> don't think .wrap is needed.  (could be wrong.  and not expressing a preference on it's (non)existance)

[17:51] *** jferrero joined
[17:51] <pmichaud> oh.  S06 describes .nextwith in its section on wrapping.

[17:53] *** chris2 left
[17:54] <pmurias> mncharity: will elf support named parameter?

[17:57] <pmurias> pmichaud: do you want to change the test?

[17:57] <pmichaud> definitely

[17:57] <pmichaud> (want it to change, yes.)

[17:58] <pmurias> changing .nextwith to function application should work

[17:58] <pmichaud> yes

[17:58] <pmichaud> also, particle and I were talking about adjusting the standard Test.pm functions a bit

[17:59] <pmichaud> but I don't have any specifics handy at the moment

[17:59] <mncharity> ï»¿pmurias: re why... given the very large amount of effort embedded in Moose, it's an attractive path.  and elf_e_nomoose doesn't yet do variable default values.  but I often use eenm for testing.  and always(~) check that both bootstrap.

[18:00] <pmurias> mncharity: i'm not really sure how much Moose features can we use

[18:01] <mncharity> at some point in the not too distant future, someone has too look at the performance of autobox, and decide whether to continue building the EmitSimpleP5 object system on autobox or do something else.

[18:02] <pmurias> and the moose on is too slow for me, so i don't update/use it all

[18:03] <pmurias> mncharity: boxing everything would be the alternative to autobox

[18:04] <pmurias> re named parameters they would change our calling convention

[18:04] <TimToady> re (4), I tend to use "regex" to document the fact that I'm not actually trying to traverse a token

[18:05] <pmurias> so we must choose if we do them properly, hack them on or omit them

[18:05] <mncharity> re ï»¿'will elf support named parameter?', I'd rephrase that as will EmitSimpleP5 support named parameters.  elf can be used to compile and run emitters which do anything.  There's also the related question of whether the core elf code will depend on named parameters working.  soo...  ESP5 support, probably.  but I don't want to take a runtime hit from

[18:05] <TimToady> not sure why fulltypename has that, unless I had it backtracking in some form or other

[18:06] <mncharity> it so it may be compiler analysis intensive.

[18:06] <mncharity> I'm tempted to minimize the feature set of my elf core code

[18:07] <mncharity> s/of/used by/, but... maybe not.  So I'm unclear on whether using named parameters in the elf implementation itself is a good idea or not.

[18:09] <pmurias> mncharity: i don't thing the runtime hit will be significant but the calling convention would be incompatible from the perl5 one

[18:10] <pugs_svnbot> r20347 | lwall++ | [STD] fulltypename should probably be a rule

[18:10] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20347

[18:11] <pmurias> as one would have to pass the named parameters as one of the positionals

[18:11] <mncharity> re calling convention properly/hack/omit, I am tempted to emit routines as two parts, one for when the compiler understands the arguments, and one which takes a Capture.  providing fast case and general case.  and with the elf core being mostly fast case.  and named args... not clear.  maybe included in fast case, perhaps restricted, or maybe not.

[18:14] <mncharity> compatibility with p5 calling convention isn't really a priority.  at least for me and EmitSimpleP5.  but again, its easy to fork a EmitDifferentlySimpleP5.  :)

[18:15] <pmurias> if you don't care for compatibility i think it's worth having them in

[18:15] <mncharity> actually, it would eventually be nice to be able to control calling convention on a per-sub basis.

[18:17] <mncharity> though that requires cross-module analysis, which may fit the independently compiled modules story.

[18:17] *** eternaleye left
[18:17] <mncharity> *not fit

[18:17] <pmurias> you have independently performed analysis then

[18:18] <mncharity> re regex, ah, ok.

[18:19] *** eternaleye joined
[18:20] <mncharity> re independently, which requires either access to the non-compiled form, or requires the compiled form to contain all the information in the non-compiled form.  not clear to me either is required by spec at present.

[18:26] <mncharity> ï»¿pmurias: but the real answer is anyone coming up with a more featureful calling convention and emitter, would be great.  and, assuming we get any users, appreciated.  and if fast and having an attractive development path, might displace the current one.

[18:27] <mncharity> elf is intended to be more a family of compilers than a single monolithic thing like pugs.

[18:29] <mncharity> if no one creates elf derivatives than something is wrong, because no single set of tradeoffs can possibly be appropriate for the wide range of things one might do with it (eg, run on different backends, or serve as a platform for developing (type analysis, compilation games, alternate calling conventions, etc, etc)).

[18:29] <mncharity> and both the "it's all p6"(well, except the parser for now) and the architecture is designed to facilitate such use.

[18:30] <mncharity> s/than/then/

[18:31] <pmurias> the current design of having a seperate executable for each variant would get in the way loads of derivatives

[18:33] <mncharity> the demands of "elf as a way of doing parsing with grammars for p5 cpan modules" is very different than "elf as a reference p6 self-implementation" or my current focus "elf as a tool to shake down STD, and encourage people working on a p5 backend components, and start passing pugs t/ to provide test driven development opportunities".

[18:34] *** FurnaceBoy left
[18:36] <pmurias> what subset should elf be in?

[18:36] <pmurias> the one shared by all|most backends, or the most complete one?

[18:36] *** Zaba_ joined
[18:37] <mncharity> elf_x EmitSomethingElse.pm foo.pm   can run foo.pm with the new emitter (but which requires, of course, SomethingElse be compatible with the emitter which compiled elf_x - that's why you often want a separate executable).

[18:38] <mncharity> ï»¿elf_x EmitSomethingElse.pm  -x -o foo.whatever foo.pm  compiles foo.pm with the new emittter.

[18:39] <pmurias> i'm aware of the monkey patching trick ;)

[18:42] <mncharity> re what subset/dialect, good question.  I'm tempted towards "be featureful where it simplifies architecture (ie, multimethods), but less so for only local bumming".  but it's a pragmatic "what is most convenient for most people at the moment" question, with possible multiple forks.  and we don't yet have even a second backend.

[18:43] <mncharity> or no, I guess we do.  that's _nomoose.  currently maintained as a small fork.

[18:44] *** rindolf left
[18:45] <mncharity> feel free to start another one. :)   I should probably move the RegexYare stuff out of elf as a fork until it matures.  oh, there's also the smop emitter fork of elf_e (elf_d?).

[18:47] <mncharity> someone is needed to take on the task of looking at Data::Bind and the rest of the cpan "this will help doing p6 like stuff in p5" and weave them together into runtime convention(s).

[18:48] <mncharity> http://dev.pugscode.org/browser/perl5/Data-Bind

[18:49] <lambdabot> Title: /perl5/Data-Bind - Pugs - Trac

[18:49] <pmurias> mncharity: the problem with forks starts when they are incompatible with each other

[18:49] <pmurias> mncharity: i used Data-Bind in the short-lived mp6v6

[18:49] *** Zaba left
[18:52] *** riffraff left
[18:52] <mncharity> re ï»¿ï»¿forks incompatible, that, like, implies active development!  more than one developer!  that would be a wonderful problem to have.  ;)

[18:52] <pmurias> for example code emitted by RegexYare would either follow the named parameter convention, or the positional only one

[18:55] <mncharity> and if bridging that difference is difficult, given collaborating developers working in a common environment and community, then it indicates something badly broken in p6 as a language, or a too-narrow implementation of same.

[18:57] *** hermax_ joined
[18:57] *** hermax_ left
[19:04] <mncharity> elf, noun: (a) ~8 p6 files which happen to define a p6 backend capable of compiling files like themselves; (b) a p6 implementation based, in whole or in part, on those files or derivatives; (c) a movement; (d) one of santa's helpers.

[19:07] <mncharity> but the key point is it's just a couple of files.  encoding knowledge of what a p6 implementation looks like.  no big infrastructure or entanglement.

[19:09] <mncharity> ï»¿you might even be able to run them in pugs.  eventually at least (I haven't tried, and expect it would take some work).

[19:12] <mncharity> anyone with an itch to scratch, a corner of the very very big p6 implementation picture you wish to pursue, is encouraged to grab and make use of the files and/or executables.

[19:14] <mncharity> type analysis and such written in p6 seem likely to be just as useful for rakudo as elf-ish implementations, a new pugs, or whatever else.

[19:15] <mncharity> issues of divergent IR's seem likely to be minor compared to shaking down spec and "getting the first one working".

[19:16] <mncharity> bbiab

[19:34] *** jferrero left
[19:37] <pmichaud> obra: message about arith.t sent to perl6-compiler mailing list

[19:39] <obra> pmichaud: thanks

[19:40] <pmichaud> er, maybe not.  checking

[19:40] <pmichaud> oops, sent to wrong address.  Re-sending.

[19:40] <pmichaud> *now* it's sent.

[19:40] <pmichaud> (time to fix my mail aliases)

[19:41] <obra> heh

[19:41] <obra> my goal is more about getting down an easy recipe for taking old pugs tests and bringing them into the new world order easily

[19:41] <pmichaud> this message somewhat addresses that, I think.

[19:42] <pmichaud> in the case of arith.t, I think we should get rid of the "helper subs" that are at the top of the file and just use what already exists in Test.pm

[19:42] <pmichaud> (where Test.pm might end up meaning "Rakudo's Test.pm")

[19:44] *** rob__ joined
[19:45] *** rob__ is now known as r0bby_

[19:46] *** r0bby_ left
[19:55] <mncharity> ï»¿obra: re ï»¿the new world order, are there any docs? :)

[19:55] <pugs_svnbot> r20348 | putter++ | t/operators/arith.t: .nextwith tailcalls commented out to help rakudo.

[19:55] <pugs_svnbot> r20348 | putter++ | Probably degrades error messages, so restore once rakudo does .nextwith.

[19:55] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20348

[19:56] <mncharity> Oh, I should have mentioned I failed to test the modified file against pugs. :(  I don't have a working one at the moment. :-(

[19:56] <pugs_svnbot> r20349 | clkao++ | assign into pad for rw.

[19:56] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20349

[19:57] <pmichaud> per my message, I disagree with "restore .nextwith"

[19:57] <pmichaud> rakudo isn't the only other Perl 6 implementation

[19:59] <obra> mncharity: mailing list conversation between pmichaud [particle] and TimToady with a bunch of existing work to create the spec/ hierarchy

[20:00] <obra> what I'm trying to help get together is "and here's how to masssage the existing body of not-so-organized tests

[20:01] <[particle]> obra++

[20:01] <mncharity> re nextwith, but setting up .nextwith as an alias to subcall is easy.

[20:02] <mncharity> s/is/should be/

[20:03] <obra> does having .nextwith enhance the tests or are you suggesting it as a porting bandaid?

[20:04] <mncharity> re massage, note that, at least the last time I looked, my impression was the t/spec and t/ test philosophies were rather different.  t/ generally trying to avoid off-topic dependencies like .nextwith, and t/spec feeling free to use maximal p6.  both have a role.  t/spec beeing a good validation suite, but t/ being more useful as a new impl takes its first steps.

[20:04] <obra> I am not qualifed to talk about this. 

[20:04] * obra defers to [particle] and pmichaud 

[20:04] <[particle]> mncharity: i disagree with that perspective

[20:05] <[particle]> t/spec/ should be well-factored

[20:05] <mncharity> re ï»¿suggesting, merely pointing out that for elf, I'd have hacked in .nextwith, rather than hacking the test.

[20:05] <[particle]> it's not where it should be yet, because it needs a larger effort

[20:06] <[particle]> tests should rely only on well-documented parts of perl 6

[20:06] <[particle]> that is, whatever is required for Test.pm to work

[20:06] <[particle]> of course, that may be different for each implementation

[20:07] <mncharity> ï»¿[particle]: validating p6 well will be quite hard.  making it harder by using a restricted dialect seems a problematic choice.

[20:07] <[particle]> how do i best say this...

[20:08] <[particle]> ultimately, yes, we need to validate full perl 6. and it should be free to use macros, etc.

[20:08] <[particle]> now, today, when there are multiple burgeoning implementations, we need to concentrate on developing tests that rely on a minimum of features

[20:09] <[particle]> that set of features will grow as the implementations grow

[20:09] <[particle]> there's really no one way to bootstrap

[20:09] <[particle]> we have to be reasonable about it

[20:09] <[particle]> so, when testing math, it's better not to rely on tailcalls

[20:10] <[particle]> that's my feeling, at least.

[20:11] <mncharity> "ï»¿that set of features will grow as the implementations grow" that's a reprise of the approach taken with pugs.  it was arguably a mistake then too. :)  the difficulty is

[20:13] <Eevee> not that I have any room to talk, but it seems to me that spec tests are only really useful if features are kept to a minimum except for what you're actually testing, so an implementation can get useful results no matter how far along it is, as long as it meets a known and very simple baseline

[20:13] <Eevee> if you have a math test failing because you don't support tailcalls, what use is the math test

[20:15] <[particle]> an important difference between the pugs approach an the t/spec/ approach is that the latter is organized by synopsis

[20:15] *** Zaba joined
[20:15] <[particle]> ...and the synopses are mainly numbered such that you can implement them in numeric order

[20:17] <[particle]> so, for example, you don't need to have implemented s12-objects before s02-bits&pieces

[20:18] <mncharity> ok, let's see...  there is definitely a role for hand-holding.  t/01-sanity has been *very* helpful in getting infant implementations moving.  the next phase is making toy implementations less toyish.  with t/ tending to avoid off-topic complexity, the main problem there has been

[20:18] *** wknight8111 joined
[20:19] <mncharity> the file based testing.  parse fails somewhere in the file, or there's a runtime error, and you lose the file.

[20:20] <mncharity> pugs dealt with that by being selective about what was actually put in .t files (no bulk dumping of failing tests), and individually tagging problematic tests.

[20:20] <mncharity> redsix, and I believe PIL-Run dealt with it by trying to be incremental - trying to run as much of the file as possible.

[20:20] <mncharity> don't remember what PIL2JS did.

[20:22] <[particle]> we now have 't/spec/fudge' to do preprocessing

[20:22] <mncharity> but the upshot of that experience was a feeling (at least by me;) that a less file-oriented approach was needed for the long talked about t/-next generation.

[20:22] <[particle]> you no longer have to worry about parsefails, because '#?elf skipall "parsefail"' will take care of that for you

[20:22] <mncharity> one where individual test setups and tests could succeed or fail on their own.

[20:22] <[particle]> (i may have screwed up the syntax a bit there)

[20:23] <mncharity> and the same infrastructure could serve for generative testing.

[20:23] <obra> but writing your trivial test function to use .trynext seems to be counterproductive

[20:24] <mncharity> so that's making implementations less toyish.  (will backlog in a sec - one bit more).  once an implementation is ceasing to be a toy, is passing much of the test suite, the set of what is useful changes.  rather than being accessible to toy implementations, what's important is

[20:26] <mncharity> shaking down a non-toy impl as hard and efficiently and well as possible.  that's implicitly the same argument as ï»¿"ï»¿that set of features will grow as the implementations grow".   grown implementations require a different set of tests than toy ones.

[20:26] <obra> mncharity: do you object to having feature tests refactored to exercise fewer features which aren't what you're actually testing?

[20:26] *** nipotaway is now known as nipotan

[20:26] <[particle]> mncharity: you're getting ahead of yourself, and the rest of us. all perl 6 implementations are toys now.

[20:27] <[particle]> some day near the release of Pelr 6.0 (official spec and test suite)

[20:27] *** icwiener_ left
[20:27] <[particle]> *Perl

[20:27] <mncharity> but just like t/spec shouldn't be rewritten to look like t/01-sanity, it's not clear to me t/ itself should either.  let alone a t/shake_the_last_incompatibilities_out_of_a_mature_impl (aka t/spec?).

[20:27] <mncharity> backlogging...

[20:27] <[particle]> we'll refactor the tests again to make them better

[20:27] *** Schwern left
[20:27] *** Zaba_ left
[20:28] <[particle]> we're in a process of continuous refinement and refactoring

[20:28] <[particle]> right now, t/spec/ better meets the needs of implementations

[20:28] <[particle]> in the future, that's likely to change, and we'll change it.

[20:28] <obra> (http://www.nntp.perl.org/group/perl.perl6.compiler/2007/12/msg1667.html has been linked here today, right?)

[20:28] <lambdabot> Title: Proposal: refactor the test suite according to synopsis - nntp.perl.org, http://tinyurl.com/64882k

[20:30] <mncharity> re "ï»¿when testing math, it's better not to rely on tailcalls", yeah, I don't really disagree.  but, for instance, I had the same feeling about adverbs (:todo). :)  If .nextwith was harder to implement, it would be a clearer argument.  but the suggested change to the test is identical to an implentation faking .nextwith as a regular subcall.  I've no objection to

[20:31] <mncharity> the change itself, but it seemed a useful discussion foil.  a test suite without :todo<foo>'s could be nice too. :)

[20:34] <mncharity> ï»¿re "what use is the math test", a math test verifies, for some implementation, that the math is working.  the key is 'for some implementation'.  One could suggest "my implementation can't do operator precedence parsing - can math be rewritten using just subcalls?".  Or "my implementation is robust and mature, can math be rewritten in non-toy p6 to give maximum testing bang?".  the

[20:36] <mncharity> issue is in part what development profile you expect.  if it's a slow infancy, short childhood of rapidly developing capabilities, and long adulthood of trying to get things right, then, for instance, it's not clear whether you care that a toy implementation is handing Inf right or not.  it should be focusing on other things until it is non-toy.

[20:38] <obra> the point of the spec tests is to test specific features defined in the synopses.

[20:38] <pmichaud> handling :todo<...>

[20:38] <pmichaud> is already being done with fudge

[20:38] <obra> Broken down by synopsis.

[20:38] <pmichaud> so we already eliminate those from the test suite

[20:38] <pmichaud> (or at least refactor them out into fudge-able todo markers instead of part of the call)

[20:38] <obra> Trying to turn them into torture tests for whatever code some hacker wrote one evening is intentionally making them into something they're not supposed to be 

[20:39] <Eevee> why would you want to rewrite a math test in non-toy p6?  everything you could possibly use should already be tested elsewhere

[20:39] <obra> Eevee: right.

[20:39] <pmichaud> "can math be rewritten using just subcalls" would mean that we're not really testing the math operators, which I presume to be the point of the test

[20:39] <mncharity> re "ï»¿organized by synopsis", tying tests to spec can certainly be useful.  I'm unclear on how far that goes as an architectural principle.  re "ï»¿you can implement them in numeric order", eep, but it seems very unlikely to be that far.

[20:40] <[particle]> mncharity: what's "official" about Perl 6?

[20:40] <Eevee> isn't it *always* a good idea to make tests as specific as possible

[20:40] <[particle]> 1) the Spec. 2) the test suite.

[20:40] <pmurias> obra: what's wrong with torture tests?

[20:41] <pmichaud> nothing's wrong with torture tests.  But they should be identified as torture tests, and not part of the "simple mathematical operators" test.

[20:41] <obra> ==pmichaud

[20:41] <[particle]> t/spec/torture/some_crazy_tests.t

[20:41] <pmichaud> also, fudge gives us a convenient way to segment out the torture tests so that a given implementation can still test the basic stuff and skip over the tortuous stuff

[20:42] <pmichaud> ...as long as all of the tests aren't using the tortuous stuff :-)

[20:42] *** lisppaste3 joined
[20:42] <mncharity> oh, let's see, lots of threads...

[20:42] <pmichaud> (er, as long as the basic stuff isn't using the tortuous constructs.)

[20:43] <pmichaud> phrasing it slightly different

[20:43] <pmichaud> I would posit that a Perl 6 implementation could be "non-toy" and still not have .nextwith implemented.

[20:44] <pmichaud> it's not complete, but I wouldn't say that ".nextwith" is something that is critical to any non-toy implementation of Perl 6

[20:44] <pmichaud> having operator precedence working is critical to any non-toy implementation

[20:44] <pmichaud> as is conditionals, loops, variables, etc.

[20:44] <Eevee> yes, feature implementation order isn't guaranteed

[20:44] <Eevee> and if you murk tests with other features then implementors get to figure out what order they have to implement features in before the tests are useful

[20:46] <mncharity> re "ï»¿why would you want to rewrite a math test in non-toy p6?" and "ï»¿aving operator precedence working is critical to any non-toy", ï»¿Eevee: so "ok(2 == 2);"  requires non-toy. ;)

[20:47] <mncharity> if we were serious about supporting toy no-opp impls, we would need to do "ok(eq(2,2));" or some such.

[20:47] <pmichaud> yes, but that doesn't mean tests should also be using .nextwith or tailcalls or the like :-)

[20:48] <Eevee> I think == is a liiittle bit more basic than tailcalls

[20:48] <pmichaud> also, mncharity's logic doesn't quite follow

[20:48] <pmurias> the .nextwith is a bad example as it serves no purpose in that particular test

[20:48] <pmichaud> just because every non-toy implementation requires == doesn't mean you can't have == in a toy implementation :-)

[20:49] <mncharity> at the risk of overly focusing on the discussion foil, re "ï»¿posit that a Perl 6 implementation could be "non-toy" and still not have .nextwith implemented", the point is _not_ that tailcall is critical, but that subcall is, and that a non-toy can trivially fake nextwith as a subcall.

[20:49] <pmichaud> mncharity: that's assuming that my subs are objects on which I can easily attach methods

[20:49] *** justatheory left
[20:49] <pmichaud> Parrot isn't quite there yet

[20:49] *** justatheory joined
[20:50] <mncharity> err, yeah.  s/subcall/method call/g.

[20:50] <mncharity> ah.  hmm.

[20:50] <pmichaud> so, "any non-toy can trivially fake..." isn't exactly true in Rakudo's case

[20:50] <obra> so. every implementation could also implement a rot13 filter to keep the content of a test a surprise until runtime.

[20:50] <obra> that doesn't make it useful

[20:51] <pmichaud> but still, the point remains -- why does arithmetic testing need to rely on .nextwith?  That doesn't belong in arithmethic testing -- those sorts of things should be factored out into the generic testing library

[20:51] <Eevee> I don't want to have to implement $x higher-level "trivial" features just to run tests

[20:51] <obra> implicitly requiring an unrelated feature to perform basic feature tests is pointless and frustrating.

[20:52] <obra> mncharity: you'll note that nobody is arguing about initalizers on variables in signatures, which these tests also required.

[20:53] <mncharity> ok, so that's the "what is a toy" thread.  re 'has there ever been a non-toy', such things are relative of course, but pugs was at least sufficiently non-toy that people kept trying to use it as if were not one.  PIL2JS had the next greatest test passing, but was slow.  PIL-Run passed somewhat less.  redsix was down around 1/4.  I've no idea where rakudo is.

[20:54] <mncharity> for the purposes of this discussion, I'd say pugs was non-toy.  perhaps PIL2JS.

[20:54] <pmichaud> I'm not too concerned with figuring out what is "toy" versus "non-toy", but I agree that Pugs is non-toy.

[20:54] <[particle]> pugs and pil* all used the same parser, no?

[20:55] <pmichaud> I don't know that toy versus non-toy is a useful label or distinction to try to definitively establish

[20:55] <mncharity> re same parser, yes

[20:56] <mncharity> re toy/non-toy, let's see, the core question is...

[20:58] <obra> More blood has been shed over whether a given p6 implementation is/was/will be a toy than has been shed over many other more important religious debates.

[20:59] <mncharity> what dialect do you write various subsets of tests in?  it's clear very highly restricted dialects can be useful (ie, sanity).  it's clear you can do a "non-fixed subset - dialect grows as some privileged impl grows".  it's clear that doesn't as well serve other impls at differing stages of paths of development.  what else...

[20:59] <mncharity> *or paths

[21:01] <pmichaud> I'd take the general guideline as being that tests should, as far as possible, use only those features in sanity and that are core to the thing being tested

[21:02] <mncharity> ... there seems disagreement on whether the test suite for mature impls will use a rich dialect.  "write validation suite richly, and consider impls toys until they have the rich dialect working", and "grow to rich with growning impl" both suggest yes, "why would you want it?  be minimal" suggest no.

[21:03] <pmichaud> "rich dialect" is a sliding scale, not a definitive item

[21:03] <pmichaud> if the purpose of the test suite is to make it possible to verify implementations and to assist implementers, then increasing the richness of the suite for its own sake makes it less useful

[21:04] <mncharity> ok, so "ï»¿why would you want it?",

[21:04] <pmichaud> why would I want... what?

[21:05] <mncharity> "ï»¿why would you want to rewrite a math test in non-toy p6?"

[21:05] <pmichaud> I wouldn't.

[21:05] <mncharity> :)

[21:05] <pmichaud> if "toy p6" is sufficient to test my math features, then I should use that for writing the test.

[21:06] <mncharity> one can not only test math features, but implement a p6-ish backend, without array variables working.  it's not clear that means the test suite should avoid using array variables outside of the array tests.

[21:08] <pmichaud> arrays are currently part of sanity, I think.  But I think we can agree there are basic features that we expect that a p6 implementation would handle sooner rather than later, and that arrays might be in that list.

[21:08] <pmichaud> I also think that if we asked the general population "is it reasonable to write p6 programs even if .nextwith isn't available", then a lot of people would agree.

[21:08] <mncharity> I note that "complexity of dialect-of-tests will grow as implentation strength grows" and "use a minimal sanity-like ï»¿ï»¿ï»¿dialect-of-tests" are incompatible positions.

[21:09] <pmichaud> I disagree

[21:09] <mncharity> !  say on :)

[21:09] <pmichaud> one can have increasing complexity of the suite without having to increase the complexity of every test in the suite

[21:10] <pmichaud> "complexity of passable tests will grow as implementation strength grows"

[21:10] <mncharity> so tests are written in varying dialects, whose complexity is a function of their position along some bootstrap path?

[21:11] <pmichaud> ...whose complexity is a function of whatever functionality is needed to adequately describe the test.

[21:11] <pmichaud> tests for basic mathematical operations don't require complex functionality.

[21:13] <pmichaud> it's just like Perl 6 itself, as a language.  We don't require someone to learn about .nextwith and currying if they don't need it to write a program.  But it's there when they do need it.

[21:14] <pmichaud> someone should be able to use Perl 6 without having to know all of its richness.

[21:14] <pmichaud> The tests are the same say -- they should be able to test various parts of Perl 6 without having to know all of the rich features

[21:14] <pmichaud> s/say/way/

[21:15] <pmichaud> afk for a bit

[21:17] <Eevee> pmichaud++

[21:22] <mncharity> let's see, wrapping up...  it looks like areas of non-concensus include: () role of non-minimalism - is it ever useful?  if useful, avoid it anyway? () selection of (locally) minimal dialect - is there an obvious choice?  is it sanity-like?  what is the cost of this?  is it adequate? () what else...?

[21:23] <mncharity> my take is () yes, no, () no, shudder, high, no.

[21:23] *** felipe joined
[21:24] <mncharity> my fuzzy impression is ï»¿Eevee is () no, yes () ??, yes, ??, yes

[21:25] <mncharity> and ï»¿pmichaud:  () ??, sometimes?? () yes, yes, acceptable??, ??

[21:26] <Eevee> ehh.  if non-minimalism is useful your test might be too complicated

[21:26] <Eevee> but as a general rule..  the more complex some feature, the more effort it is probably worth expending to not use it in an unrelated test

[21:28] <mncharity> re what else... () variation of 'is there an obvious choice': is there an obvious complexity ordering - yes/no?

[21:28] <mncharity> :)

[21:29] <Eevee> re obvious choice: the line is blurry and depends per feature how often it's particularly useful for the rest of the suite

[21:30] <pmichaud> obvious choice:  as with most things of this nature, it may be better to get there by successive approximations with refinement rather than try to a-priori determine it at the outset

[21:30] <Eevee> agreed

[21:30] <pmichaud> and I don't think it has to be a strict ordering

[21:30] <pmichaud> but I think we can all agree that it's perfectly reasonable to do math tests without having .nextwith available :-)

[21:30] <Eevee> if the test suite hits 70% complete and some feature X is only used (outside its tests) in one place, it's probably worth rewriting

[21:31] <pmichaud> this isn't to say that none of the test suite can use .nextwith, but just that it's not really necessary or important for math tests

[21:31] <Eevee> (fsvo '70%', 'complete', 'its'...)

[21:31] <pmichaud> especially since if, as in this case, there's a far more straightforward way to do the tests using only basic Test.pm functionality

[21:31] <mncharity>  ... yes/no?  is it a function of ease of (some) implementation, or of usefulness to test suite?  is the concept flawed, or merely unknown-but-approximatable?

[21:31] <pmichaud> function of both

[21:32] <mncharity> re 70% agreed.

[21:32] <pmichaud> is having .nextwith in the arith.t tests useful?  I don't think it is.

[21:32] <pmichaud> so, ease of implementation concerns dominate.

[21:33] <Eevee> well, I think those are somewhat similar

[21:33] <Eevee> if X is particularly useful to the test suite then it's probably going to be useful in general

[21:33] <pmichaud> I'm not so sure about that

[21:33] *** Auzon joined
[21:33] <pmichaud> I can think of features that would be particularly useful for testing but might not be terribly important for general purpose programming

[21:34] <pmichaud> END blocks come to mind

[21:34] <Eevee> ah, hm

[21:34] <pmichaud> I'm not saying END is generally unimportant, but simply that I can write a lot of useful programs without ever needing END

[21:34] <pmichaud> that said, END is important enough to testing that I think it's a reasonable candidate for sanity-level

[21:34] <mncharity> the design points I'd like hit are () sanity (concensus)  () not-too insane tests for test-driven-development of toys (some disagreement on details, but basic agreement), () 'pull out all the stops for maximal programmer productivity and test coverage' tests for validation (no concensus).

[21:34] <Eevee> yeah that's fair

[21:35] <pmichaud> "pull out all stops"  -- we do that by using #skip blocks in the test files, and or separating them out

[21:36] <pmichaud> if by "maximal programmer productivity" you mean "maximal 'test programmer' productivity", I think that actually argues in favor of more simplicity because we increase the number of potential test authors

[21:36] <mncharity> err, rephrasing "ï»¿pull out all stops", "no holds barred", "anything goes", "maximal use of p6 power".

[21:36] <pmichaud> in a particular test implementation?

[21:36] <pmichaud> in the test suite in general?

[21:36] <pmichaud> or in the language?

[21:37] <mncharity> in the third "flavor of tests", whose focus is on validation of mature implementations, rather than helping immature ones.

[21:37] <pmichaud> simply put the mature tests into test files that focus on the mature features

[21:38] <obra> t/spec, which is what I thought was being discussed, is defined as validating particular features as defined in the synopses.

[21:38] *** japhb joined
[21:38] <pmichaud> yes, I thought our discussion was limited to t/spec tests

[21:39] <pmichaud> I'm not talking about all testing for modules written in Perl 6

[21:39] <obra> which makes "anything goes" somewhat antithetical to the whole point.

[21:39] <mncharity> sigh, so I'm clearly failing, let's see..

[21:39] <pmichaud> give me an example of a "mature feature" that you think is appropriate for arith.t

[21:40] *** rdice left
[21:40] <pmichaud> oh, I've got one.  heredocs.

[21:41] <obra> . o { POD } 

[21:41] <pmichaud> I can see why someone would want to use a heredoc in arith.t, perhaps as a database of things to be tested inside of a loop or the like

[21:42] <pmichaud> however, I think we can do some basic tests in arith.t without heredocs, and then skip over the part that does use heredocs

[21:42] <pmichaud> fudge allows us to do that.

[21:42] <mncharity> re t/spec, if t/spec's role is defined as validation of mature impls, rather than helping immature ones, then that's a very hard task which I'd like to write in real p6, not in some restricted dialect.

[21:43] <pmichaud> mncharity: would you need "real p6" for *every* test ?

[21:44] <pmichaud> I'm not saying that tests can't contain "real p6".  I'm saying that we should adjust the amount of "real p6" in each test to the level appropriate for each test.

[21:44] <pmichaud> clearly a mature impl should be able to pass any tests that an immature one passes.

[21:44] <obra> t/spec is for validation of features.

[21:45] <obra> I would expect that tests for arithmetic are going to require fewer interesting features than tests for overloading.

[21:45] <pmichaud> exactly

[21:46] *** pmurias left
[21:46] <obra> In all cases within t/spec, if a refactoring can remove a feature not related to the spec being tested, that refactoring should be considered reasonable

[21:46] <obra> er. remove a dependency on

[21:46] <pmichaud> obra++

[21:47] <Eevee> yes

[21:47] <mncharity> I just got an out of band "please shut up now".  so, I'm out.  bbl

[21:47] <pmichaud> in general it's better to reduce dependencies than to increase them :-)

[21:47] <Auzon> Definitely.

[21:47] <Auzon> I'll keep that in mind this summer.

[21:51] *** jferrero joined
[21:56] <[particle]> auzon, we'd like you to sign a cla so you can get a parrot commit bit if you need one this summer

[21:56] <[particle]> cla?

[21:56] <pmichaud> purl, CLA?

[21:56] <pmichaud> purl?

[21:56] <[particle]> purl: cla is Contributor License Agreement or http://www.perlfoundation.org/contributor_license_agreement

[21:56] <pmichaud> ENOPURL

[21:56] <pmichaud> (purl already knows cla :-)

[21:57] <Auzon> ;)

[21:57] <[particle]> Auzon: it's probably not necessary, but it can't hurt to send one in

[21:57] <Auzon> Alright. I'll check it out

[21:58] *** Zaba_ joined
[21:59] <mncharity> unless there has been a profound culture shift here in pugs land, there is no 'the consensus' and no 'the plan' for technical discussion to constitute an attempt to derail.  that kind of political crud and groupthink has had little role here, and hopefully this will remain the case.

[22:00] <mncharity> perhaps it can't survive in the absence of a benevolent dictator.  but the local culture has been quite distinct from p6l and parrot.

[22:07] *** iblechbot left
[22:12] *** Zaba left
[22:16] *** Limbic_Region joined
[22:24] *** TJCRI left
[22:29] *** sscaffidi left
[22:39] *** clintongormley joined
[22:39] <clintongormley> heya

[22:40] <clintongormley> any idea why the http://dev.pugscode.org/changeset/xxxx links aren't working?

[22:40] <clintongormley> -> 500 errors

[22:41] <Eevee> they've been off and on for me, not sure why

[22:41] <clintongormley> http://dev.pugscode.org/browser is doing the same

[22:42] <Eevee> looks like everything is

[22:42] <clintongormley> damn python

[22:43] <clintongormley> .oO( always blame the language )

[22:43] <Eevee> could be damn apache -> damn C

[22:43] *** eternaleye left
[22:44] <clintongormley> :)

[22:47] <clintongormley> this has probably been asked a million times before, but...

[22:47] <clintongormley> how can i contribute? i'm a reasonably experienced Perl programmer, but zero C experience

[22:47] <clintongormley> are there a list of small finite tasks that i could choose from?

[22:47] <obra> clintongormley: one of the things that needs lots of help is fleshing out the p6 spec tests 

[22:48] <clintongormley> i presume there isn't a list of tests that need writing, but rather : here are the specs, add the missing tests?

[22:48] * [particle] is very glad obra++ is still here

[22:48] <obra> rakudo, the p6 implementation on top of parrot finally got its milestone act together

[22:48] <obra> so there's a list of milestones which roughly tie to p6 'synopses' (specs)

[22:49] <Eevee> clintongormley: ha, same boat as I

[22:49] <clintongormley> yeah, i saw that post

[22:49] <obra> and there is a huge mass of disorganized tests built up over time as pugs (the haskell implementation) has grown.

[22:50] <obra> so basically, it's a matter of picking a section of one of the synopses tied to a near-term milestone and starting to enumerate clean, simple tests for that syn's features

[22:50] <obra> either pulled from the existing pugs tests or out of whole cloth

[22:50] <clintongormley> that last line just answered the question i was writing :)

[22:50] <Eevee> oh, there are pugs tests outside of t/spec?  where are they?  (or is it obvious like pugs/t/)

[22:50] <clintongormley> which would be a good syn to start with?

[22:51] <obra> pugs/t 

[22:51] <[particle]> eevee: occam's razor

[22:51] <Eevee> the world would be a better place if occam's razor always applied to programming

[22:51] <Eevee> so far its success rate for me is around 7%

[22:51] <obra> [particle]: opinions on good syns to start with?

[22:52] <[particle]> i say go to spec.pugscode.org

[22:52] <clintongormley> and the tests are written in p5 or p6 or other

[22:52] <[particle]> pick a synopsis from the list

[22:52] <obra> tests are written in p6

[22:52] <obra> svn co http://svn.perl.org/parrot/trunk parrot

[22:52] <lambdabot> Title: Revision 27277: /trunk

[22:52] <obra> cd parrot

[22:52] <obra> perl Makefile.PL

[22:52] <obra> make 

[22:52] <obra> cd languages/perl6

[22:52] <obra> make spectest

[22:52] <[particle]> however... rakudo sorely needs more oo tests

[22:52] <obra> that will grab all of the existing t/spec from the pugs repo and run it

[22:53] <clintongormley> you've never done that before, have you ;)

[22:53] <Auzon> Aha, obra++ for make spectest

[22:53] <Auzon> I was looking for that recently

[22:53] <obra> Auzon: I didn't do that

[22:53] <obra> I tried this for the first time today

[22:53] <Auzon> No, pointing it out

[22:53] <obra> I'm cribbing from my notes

[22:53] <[particle]> so t/oo/ is a good place to start

[22:53] <obra> ah :)

[22:53] <obra> particle++ created it

[22:53] <Auzon> Can we run Rakudo against pugs/t yet?

[22:53] <[particle]> no

[22:54] <[particle]> probably never will

[22:54] <obra> [particle]: can I nopaste our this-morning conversation about tests and tools

[22:54] <[particle]> auzon: we need to convert all pugs/t/ to pugs/t/spec

[22:54] <Eevee> isn't the idea to get rid of pugs/t and merge it into t/spec?

[22:54] <[particle]> obra: feel free

[22:54] <[particle]> i'll throw some tuits into converting tests in the next week

[22:55] <obra> Eevee: let's not go there ;)

[22:55] <Auzon> I'll have tuits starting a week from today

[22:55] <obra> there will always be a wide variety of tests that aren't spec-based

[22:55] <[particle]> Auzon: good to know!

[22:55] <Auzon> I'd love to jump in now, but I have finals.

[22:55] <[particle]> something that would really help us out, and is very easy to do, is to convert all pod blocks to pod6

[22:56] <obra> http://paste.husk.org/11312

[22:56] <[particle]> replace =begin with =begin pod and =cut with =end pod

[22:56] <obra> that's the conversation [particle] and I had about how to start doing this

[22:56] <clintongormley> particle - that's it?

[22:57] <clintongormley> just search all available code and change those lines?

[22:57] <[particle]> no, but it's a start

[22:57] <Auzon> Hm... I bet I could automate that ;)

[22:57] <[particle]> clintongormley: for the pod, basicly, yes

[22:57] <[particle]> as soon as the pod parses, it means rakudo will actually parsefail source, instead of docs

[22:57] <clintongormley> :)

[22:57] <clintongormley> ok - so just the rakudo files?

[22:58] <obra> clintongormley: Eevee: would the two of you like commit bits to the pugs repo so you can start to commit to t/spec?

[22:58] <[particle]> no.

[22:58] <[particle]> pugs/t, except t/spec/

[22:58] <clintongormley> and for committing changes?

[22:58] <obra> yes

[22:58] <clintongormley> yes please

[22:58] <Eevee> sure

[22:58] <obra> email addresses, pelase

[22:58] <obra> please

[22:58] <clintongormley> time is short, so can't promise results, but....

[22:58] <clintongormley> [email@hidden.address]
[22:58] <mncharity> pugs: my $a = [3,4,5]; my @b = @($a); say pop(@b); say $a;

[22:58] <exp_evalbot> OUTPUT[5â¤3 4 5â¤]

[22:58] <obra> even a single commit is good :)

[22:58] <clintongormley> svn ci "changed whitespace"

[22:59] <obra> if it's more readable :)

[22:59] <clintongormley> svn revert

[22:59] <obra> traditional first commit is to add yourself to AUTHORS

[22:59] <Eevee> [email@hidden.address]
[22:59] <obra> just to test everything

[22:59] <obra> ok. you should each have a commit bit in your inbox

[23:00] <clintongormley> is there a syntax highlighter available for p6 yet?

[23:00] <clintongormley> i suppose it is changing too fast

[23:00] <Eevee> I vaguely recall seeing something for vim a while back

[23:00] <Eevee> so there might be an up-to-date one floating around

[23:01] <clintongormley> will google

[23:01] <clintongormley> commit bit received - thanks

[23:01] <obra> look in pugs/util when you check out the pugs repo

[23:01] <Eevee> got bit

[23:01] <obra> I see a vim mode at the least

[23:01] <obra> "updates to that would be cool too"

[23:01] <obra> Ok. I'm brain-fried and need to wander off

[23:01] <Eevee> what a coincidence!  I've always meant to figure out vim syntax highlighting

[23:02] <obra> good luck, guys

[23:02] <clintongormley> thanks :)

[23:03] <Eevee> seeya

[23:06] <clintongormley> commits to trunk? a branch?

[23:06] <Auzon> I believe everything is in trunk

[23:07] <clintongormley> ok

[23:07] <Auzon> I don't actually see any branches.

[23:08] <clintongormley> http://svn.perl.org/viewvc/parrot/branches/

[23:08] <lambdabot> Title: 1 [ 6 parrot 1 ] 1 12 Index of /branches 30

[23:08] <Auzon> oh, that's parrot.

[23:08] <Auzon> ^_^'

[23:09] <Auzon> Are you committing to Parrot or Pugs?

[23:09] <clintongormley> ummm which one should i be committing to :)

[23:09] <Auzon> Commitbit is for Pugs.

[23:09] <clintongormley> isn't the focus on rakudo (and thus parrot) now?

[23:10] <Auzon> Yes, but a lot of stuff still lives in Pugs

[23:10] <clintongormley> ah ok

[23:10] * clintongormley is puzzled

[23:10] *** vaughn joined
[23:11] <Auzon> Yeah. You'll be working in the Pugs repo

[23:11] <Auzon> That's where the big test suite resides.

[23:11] <Auzon> And pretty much all Perl6 code that isn't Rakudo.

[23:12] <clintongormley> so, i should be writing tests in pugs but running them with rakudo?

[23:12] <[particle]> clintongormley: the perl 6 tests are in the pugs repo, because it's very easy to get a pugs commit bit

[23:12] <[particle]> that makes it easy to recruit testers

[23:12] <clintongormley> so: pugs/trunk/t

[23:13] <[particle]> rakudo does an 'svn co' of pugs/t/spec/

[23:13] <[particle]> no, there's no trunk iirc

[23:13] <[particle]> svn co  http://svn.pugscode.org/pugs pugs

[23:13] <lambdabot> Title: Revision 20349: /

[23:13] <[particle]> or, if you don't want it to take all day,

[23:13] <[particle]> svn co  http://svn.pugscode.org/pugs/t pugs/t

[23:13] <lambdabot> Title: Revision 20349: /t

[23:13] <clintongormley> ahhh - ok, so not : http://svn.perl.org/viewvc/perl6/pugs/

[23:14] <lambdabot> Title: 1 [ 5 perl6 1 ] 1 e Index of /pugs 30

[23:14] <[particle]> no, go with pugscode

[23:14] <[particle]> http://pugscode.org for more

[23:14] <lambdabot> Title: Pugs - pugscode

[23:15] <clintongormley> so the previous instructions for rakudo : "make spectest" - does this require me to have the pugs tests downloaded and in a particular directory?

[23:16] * clintongormley promises to stop annoying shortly

[23:16] <[particle]> no

[23:16] <clintongormley> ok - ta

[23:16] <[particle]> you need to have and build parrot

[23:16] <clintongormley> will shut up now and give things a try :)

[23:16] <[particle]> then build languages/perl 6/

[23:17] <[particle]> *perl6

[23:17] <[particle]> if you look at the Makefile in languages/perl6/ it'll tell you all you need to know

[23:17] <clintongormley> many thanks

[23:17] <clintongormley> g'night all

[23:17] <[particle]> ~~

[23:17] <Auzon> see you

[23:18] *** clintongormley left
[23:23] *** felipe left
[23:33] *** cookys_ joined
[23:34] <mncharity> TimToady: (5) it seems at eos, statementlist -> EXPR which calls expect_term, which succeeds on stdstopper, and exists the loop because pos hasn't moved.  but EXPR then panics because @termstack is empty?

[23:35] *** felipe joined
[23:44] <mncharity> works if panic() is replaced by regex failure.

[23:45] <mncharity> *search failure

[23:48] <meppl> good night

[23:52] <mncharity> good night meppl :)

[23:53] <meppl> ;)

[23:53] *** meppl left
[23:55] <mncharity> ï»¿TimToady: (6) It looks like dotty doesn't get prec set?  perhaps dotty --> Term  and an additional prec case in post.

[23:58] *** japhb left
