[00:10] *** bacek joined
[00:31] *** Schwern left
[00:44] <Auzon> std: qw(a b c d)

[00:44] <p6eval> std 21641: OUTPUT[############# PARSE FAILED #############]

[00:45] <Auzon> std: 1+1

[00:45] <p6eval> std 21641: OUTPUT[parse ok]

[00:45] <Auzon> hm, the line counting is off somewhere

[00:45] <vixey> woah

[00:45] <vixey> how is std run?

[00:45] <Auzon> tryfile in pugs/src/perl6

[00:46] <vixey> it's pugs and not the std.pm?

[00:46] <Auzon> No, it's STD.pm.

[00:46] <Auzon> It's stored in src/perl6 in the pugs repo

[00:48] <Auzon> It parses pretty much all of t/spec

[00:54] <pugs_svn> r21642 | Auzon++ | [evalbot] another attempt at improving STD.pm support in evalbot

[00:55] *** p6eval left
[00:55] *** p6eval joined
[00:59] <Auzon> bah, it's not working now.

[01:00] *** nipotaway is now known as nipotan

[01:00] *** Lorn left
[01:03] *** SamB joined
[01:04] *** cmarcelo left
[01:07] *** r0bby_ joined
[01:08] *** jferrero left
[01:10] *** sail0r left
[01:38] *** p6eval left
[01:38] *** p6eval joined
[01:38] <Auzon> (sorry for the p6eval noise)

[01:39] *** p6eval left
[01:39] *** p6eval joined
[01:39] *** p6eval left
[01:39] *** p6eval joined
[01:43] *** p6eval left
[01:43] *** p6eval joined
[01:47] *** p6eval left
[01:47] *** p6eval joined
[01:48] *** p6eval left
[01:49] *** p6eval joined
[01:51] <pugs_svn> r21643 | Auzon++ | [evalbot] STD works in evalbot again now

[01:51] *** wknight8111 is now known as ampersand

[01:52] *** hercynium joined
[01:52] <Auzon> ok. Now at least it works. It spews all over the console though :-/ (sorry moritz)

[01:53] *** LimbicRegion joined
[01:53] <Tene> STD: 1+1

[01:53] <Auzon> std: 1+1

[01:53] <p6eval> std 21642: OUTPUT[parse ok]

[01:54] <Auzon> std: /<[]]>/

[01:54] <p6eval> std 21642: OUTPUT[parse ok]

[01:54] <Auzon> erm. I thought it worked...

[01:54] <Tene> rakudo: [~] <m oo se>

[01:54] <p6eval> rakudo 29834: OUTPUT[Syntax error at line 1, near "[~] <m oo "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤]

[01:54] <Auzon> std: +++++++++

[01:54] <p6eval> std 21642: OUTPUT[parse ok]

[01:54] <Auzon> :-/

[01:54] *** vixey left
[01:55] <Tene> std: {{{{{{{{{{{{{

[01:55] <Auzon> I'm going to bang my head into a wall, and then start my own copy elsewhere to figure it out

[01:55] <p6eval> std 21642: OUTPUT[parse ok]

[01:55] *** LimbicRegion left
[02:03] *** vixey joined
[02:04] *** Limbic_Region left
[02:06] *** vixey left
[02:07] *** vixey joined
[02:13] *** kanru left
[02:15] *** lambdabot left
[02:15] *** silug left
[02:16] *** lambdabot joined
[02:30] *** hercynium left
[02:33] <s1n> is the readme correct in stating that rakudo specific (languages/perl6) patches go to rakudobug at perl dot org?

[02:33] *** hercynium joined
[02:41] *** hercynium left
[02:42] <ampersand> i believe so, yes

[02:43] *** ampersand is now known as wknight8111

[02:45] *** wknight8111 left
[02:45] *** Lorn joined
[02:52] <s1n> pmichaud: i saw on rt# 44211 you mentioned 'e' was no longer in the spec, is that true?

[03:00] *** r0bby_ is now known as r0bby

[03:01] *** r0bby left
[03:01] *** r0bby joined
[03:08] *** elmex_ joined
[03:22] *** elmex left
[03:22] *** elmex_ is now known as elmex

[03:26] *** silug joined
[03:47] *** alester_ joined
[03:51] *** Schwern joined
[04:04] *** BinGOs_ joined
[04:10] *** BinGOs left
[04:10] *** rindolf joined
[04:12] *** josh left
[04:13] *** josh joined
[04:50] *** masak joined
[05:52] *** Psyche^ joined
[05:53] *** alester_ is now known as AndyAway

[05:53] *** AndyAway left
[06:01] *** aindilis left
[06:04] *** aindilis joined
[06:09] *** Patterner left
[06:09] *** Psyche^ is now known as Patterner

[06:14] <meppl> good night

[06:16] *** meppl left
[06:22] *** justatheory left
[06:27] *** ashizawa joined
[06:41] *** iblechbot joined
[06:52] *** broquaint left
[06:52] *** broquaint joined
[07:05] *** BinGOs_ is now known as BinGOs

[07:31] *** pmichaud left
[07:31] *** jfredett_ left
[07:31] *** simcop2387 left
[07:31] *** broquaint left
[07:31] *** bacek left
[07:31] *** nnunley left
[07:31] *** s1n left
[07:31] *** elmex left
[07:31] *** pjcj left
[07:31] *** rakudo_svn left
[07:31] *** rhr left
[07:31] *** spinclad left
[07:31] *** Auzon left
[07:31] *** moritz_ left
[07:31] *** japhb left
[07:31] *** TreyHarris left
[07:31] *** ingy left
[07:31] *** jrockway left
[07:31] *** smtms left
[07:31] *** Schwern left
[07:31] *** silug left
[07:31] *** p6eval left
[07:31] *** thepler left
[07:31] *** jan left
[07:31] *** bbkr left
[07:31] *** c1sung left
[07:31] *** AzureStone left
[07:31] *** SamB left
[07:31] *** pugs_svn left
[07:31] *** Guest16015 left
[07:31] *** baest_ left
[07:31] *** Lunchy left
[07:31] *** ilbot2 left
[07:31] *** meteorjay left
[07:31] *** gbacon left
[07:31] *** audreyt left
[07:31] *** lisppaste3 left
[07:31] *** kane_ left
[07:31] *** orafu left
[07:31] *** iblechbot left
[07:31] *** masak left
[07:31] *** rindolf left
[07:31] *** viklund` left
[07:31] *** cosimo left
[07:31] *** leto left
[07:31] *** les left
[07:31] *** pl0d left
[07:31] *** PZt left
[07:31] *** Southen left
[07:31] *** jiing left
[07:31] *** smg left
[07:31] *** apeiron left
[07:31] *** cookys left
[07:31] *** mj41_ left
[07:31] *** hcchien left
[07:31] *** allbery_b left
[07:31] *** pasteling left
[07:31] *** tcliou left
[07:31] *** charsbar left
[07:31] *** r0bby left
[07:31] *** arguile left
[07:31] *** kolibrie left
[07:31] *** lumi left
[07:31] *** TimToady left
[07:31] *** ptman left
[07:31] *** Maddingue left
[07:31] *** IRSeekBot left
[07:31] *** LCamel left
[07:31] *** cls_bsd left
[07:31] *** dalek left
[07:31] *** Lorn left
[07:31] *** lambdabot left
[07:31] *** speckbot left
[07:31] *** cognominal__ left
[07:31] *** kcwu left
[07:31] *** nothingmuch left
[07:31] *** buubot left
[07:31] *** Patterner left
[07:31] *** vixey left
[07:31] *** demq left
[07:31] *** yahooooo left
[07:31] *** fullermd left
[07:31] *** mtve left
[07:31] *** PerlJam left
[07:31] *** Khisanth left
[07:31] *** frobnitz left
[07:31] *** sunnavy left
[07:31] *** obra left
[07:31] *** clkao left
[07:31] *** nipotan left
[07:31] *** cj left
[07:31] *** Tene left
[07:31] *** integral left
[07:31] *** BinGOs left
[07:31] *** Caelum left
[07:31] *** yath_ left
[07:31] *** pengrate_ left
[07:31] *** [particle] left
[07:31] *** jdv79 left
[07:31] *** Juerd left
[07:31] *** bloonix left
[07:31] *** zamanfou left
[07:31] *** perlbot left
[07:31] *** funktio left
[07:31] *** Grrrr left
[07:35] *** Tene joined
[07:35] *** Gruber joined
[07:35] *** broquaint joined
[07:35] *** iblechbot joined
[07:35] *** Patterner joined
[07:35] *** masak joined
[07:35] *** rindolf joined
[07:35] *** BinGOs joined
[07:35] *** Schwern joined
[07:35] *** silug joined
[07:35] *** elmex joined
[07:35] *** r0bby joined
[07:35] *** Lorn joined
[07:35] *** lambdabot joined
[07:35] *** vixey joined
[07:35] *** p6eval joined
[07:35] *** SamB joined
[07:35] *** bacek joined
[07:35] *** Caelum joined
[07:35] *** viklund` joined
[07:35] *** Southen joined
[07:35] *** gbacon joined
[07:35] *** les joined
[07:35] *** bbkr joined
[07:35] *** lisppaste3 joined
[07:35] *** dalek joined
[07:35] *** meteorjay joined
[07:35] *** s1n joined
[07:35] *** jan joined
[07:35] *** cognominal__ joined
[07:35] *** jfredett_ joined
[07:35] *** integral joined
[07:35] *** jiing joined
[07:35] *** [particle] joined
[07:35] *** simcop2387 joined
[07:35] *** pengrate_ joined
[07:35] *** mj41_ joined
[07:35] *** charsbar joined
[07:35] *** tcliou joined
[07:35] *** cls_bsd joined
[07:35] *** rhr joined
[07:35] *** jdv79 joined
[07:35] *** rakudo_svn joined
[07:35] *** perlbot joined
[07:35] *** frobnitz joined
[07:35] *** jrockway joined
[07:35] *** pl0d joined
[07:35] *** zamanfou joined
[07:35] *** kane_ joined
[07:35] *** ptman joined
[07:35] *** irc.freenode.net sets mode: +o Tene

[07:35] *** AzureStone joined
[07:35] *** PZt joined
[07:35] *** moritz_ joined
[07:35] *** LCamel joined
[07:35] *** ingy joined
[07:35] *** nnunley joined
[07:35] *** leto joined
[07:35] *** Auzon joined
[07:35] *** apeiron joined
[07:35] *** Khisanth joined
[07:35] *** smg joined
[07:35] *** orafu joined
[07:35] *** lumi joined
[07:35] *** cookys joined
[07:35] *** nothingmuch joined
[07:35] *** pmichaud joined
[07:35] *** funktio joined
[07:35] *** yath_ joined
[07:35] *** Juerd joined
[07:35] *** bloonix joined
[07:35] *** c1sung joined
[07:35] *** arguile joined
[07:35] *** japhb joined
[07:35] *** speckbot joined
[07:35] *** IRSeekBot joined
[07:35] *** obra joined
[07:35] *** clkao joined
[07:35] *** sunnavy joined
[07:35] *** PerlJam joined
[07:35] *** buubot joined
[07:35] *** yahooooo joined
[07:35] *** mtve joined
[07:35] *** nipotan joined
[07:35] *** kcwu joined
[07:35] *** allbery_b joined
[07:35] *** Lunchy joined
[07:35] *** Guest16015 joined
[07:35] *** ilbot2 joined
[07:35] *** Maddingue joined
[07:35] *** pasteling joined
[07:35] *** cosimo joined
[07:35] *** baest_ joined
[07:35] *** pugs_svn joined
[07:35] *** kolibrie joined
[07:35] *** cj joined
[07:35] *** fullermd joined
[07:35] *** smtms joined
[07:35] *** pjcj joined
[07:35] *** thepler joined
[07:35] *** TreyHarris joined
[07:35] *** spinclad joined
[07:35] *** hcchien joined
[07:35] *** audreyt joined
[07:35] *** demq joined
[07:35] *** TimToady joined
[07:35] *** irc.freenode.net sets mode: +o TimToady

[07:42] *** Helios- left
[07:42] *** viklund joined
[07:43] *** Helios- joined
[07:44] *** smtms left
[07:49] *** felipe joined
[08:06] <pugs_svn> r21646 | lwall++ | [STD] renamed main package to STD

[08:06] <pugs_svn> r21646 | lwall++ | fixed package name conflicts

[08:06] <pugs_svn> r21646 | lwall++ | fixed tests that used function call syntax for quotes

[08:06] <pugs_svn> r21646 | lwall++ | various other bugs

[08:06] <pugs_svn> r21646 | lwall++ | now parses all but one of the t/spec tests (needs macros)

[08:13] *** pmurias joined
[08:15] *** Gruber is now known as Grrrr

[08:24] *** vixey left
[08:28] *** vixey joined
[08:28] <pmurias> TimToady: how should grammar modification which should be propagated be marked? and how should their lexicality be handled?

[08:33] *** Caelum left
[08:36] *** Caelum joined
[08:36] <masak> is it allowed to have an enum with only one value?

[08:36] <pmurias> why not?

[08:36] <masak> rakudo: enum Weekday<Monday>

[08:36] <p6eval> rakudo 29834: OUTPUT[get_pmc_keyed() not implemented in class 'Perl6Str'␤current instr.: 'parrot;Perl6;Grammar;Actions;enum_declarator' pc 132437 (src/gen_actions.pir:12724)␤]

[08:37] <masak> pmurias: because rakudo fails on it

[08:37] <masak> rakudo: enum <Monday>

[08:37] <p6eval> rakudo 29834: OUTPUT[get_pmc_keyed() not implemented in class 'Perl6Str'␤current instr.: '!anon_enum' pc 12173 (src/gen_builtins.pir:7750)␤]

[08:37] <moritz_> masak: that's because <Monday> is a Str, not a List, and rakudo tries to handle it as a List

[08:37] <masak> moritz_: feels like a common problem

[08:37] <moritz_> rakudo: say <Monday>.WHAT

[08:37] <p6eval> rakudo 29834: OUTPUT[Str␤]

[08:38] <moritz_> masak: it's one of the reasons so many list builtins are moved to Any

[08:38] <masak> yes.

[08:38] <masak> it still feels like one of those slightly askew things to which a Grand Solution would be welcome

[08:39] <pmurias> rakudo_svn: enum Weekday <a b>

[08:40] <pmurias> rakudo: enum letter <a b>

[08:40] <p6eval> rakudo 29834: RESULT[Null PMC access in find_method()␤current instr.: '_block16' pc 25 (EVAL_16:12)␤]

[08:40] <pmurias> rakudo: enum letter<a b>

[08:40] <p6eval> rakudo 29834: RESULT[Null PMC access in find_method()␤current instr.: '_block16' pc 25 (EVAL_16:12)␤]

[08:40] <pmurias> rakudo: enum <a b>

[08:40] <moritz_> rakudo: enum letter<a b>; say 1

[08:40] <p6eval> rakudo 29834: RESULT[{"a" => 0, "b" => 1}]

[08:40] <p6eval> rakudo 29834: OUTPUT[1␤]

[08:40] <pmurias> rakudo: enum<a b>

[08:40] <p6eval> rakudo 29834: RESULT[{"a" => 0, "b" => 1}]

[08:41] <pmurias> TimToady: _STARr keeps an useless @all, should i remove it?

[08:44] *** jferrero joined
[09:01] *** kanru joined
[09:02] *** alc joined
[09:16] <pugs_svn> r21647 | fglock++ | [v6.pm] fixed array emitter

[09:26] *** fridim_ joined
[09:33] *** iblechbot left
[09:43] *** xinming joined
[09:47] *** bacek left
[10:02] *** drbean joined
[10:02] *** lleksah joined
[10:06] <pmurias> std: 1 =~ 2

[10:06] <p6eval> std 21647: OUTPUT[cp: cannot create regular file `lex/STD/EXPR': Permission deniedObsolete use of =~ to do pattern matching; in Perl 6 please use ~~ instead at line 1:]

[10:07] <pmurias> std: {{{{{

[10:07] <p6eval> std 21647: OUTPUT[parse ok]

[10:07] <moritz_> "here be dragons"

[10:30] *** Alias_ joined
[10:31] *** alc left
[10:50] *** Jedai joined
[11:11] <pugs_svn> r21648 | fglock++ | [v6.pm] complex

[11:14] *** lambdabot left
[11:14] *** lambdabot joined
[11:14] *** lambdabot left
[11:15] <s1n> moritz_: thanks for applying that patch so soon, i'll mark the tests with some todo's and come back to it when we have use working

[11:15] *** lambdabot joined
[11:16] <moritz_> s1n: I think we should even test that there is no 'e' exported by default

[11:16] <moritz_> eval_dies_ok 'e', 'no "e" exported by default';

[11:17] <moritz_> sadly rakudo is currently rather broken, as documented in RT #57452

[11:17] *** meppl joined
[11:22] *** Alias_ left
[11:28] *** Alias_ joined
[11:36] *** meteorjay left
[11:36] *** meteorjay joined
[11:38] <s1n> moritz_: okay, i'll add a todo and check for the bareword in that test too, i'll also look at that RT, all tonight

[11:39] <moritz_> s1n: great

[11:43] <pugs_svn> r21649 | pmurias++ | [smop] subs work when called for the first time

[11:45] *** nipotan is now known as nipotaway

[11:48] <moritz_> http://use.perl.org/~audreyt/journal/37062

[11:49] <lambdabot> Title: Journal of audreyt (6654)

[11:49] *** sri_work joined
[11:50] *** vixey left
[12:04] <moritz_> pugs: say $?PUGS_VERSION

[12:04] <p6eval> pugs: OUTPUT[Perl6 User's Golfing System, version 6.2.13.11, July 31, 2008␤]

[12:04] <moritz_> audreyt++

[12:10] <masak> audreyt has trouble finding a job? I thought by now she'd be getting several job offers per week

[12:10] <Alias_> She needs quite a bit of cash

[12:11] <Alias_> Becoming audrey hasn't been cheap

[12:11] * moritz_ has a freaky idea regarding Perl 6 donations and audreyt...

[12:11] <masak> I can understand that

[12:11] <masak> I'd donate.

[12:11] <Alias_> I doubt you can donate enough to matter

[12:11] <Alias_> :)

[12:12] <masak> might be a start

[12:13] <moritz_> Alias_: the TPF has received 100k USD for Perl 6 development

[12:13] <Alias_> true

[12:13] <moritz_> don't know if they want to spend anything on pugs

[12:18] <pugs_svn> r21650 | fglock++ | [v6.pm] more tests

[12:19] *** smtms joined
[12:28] <masak> I still think it should be exceedingly easy for potential employers to see the worth of having audreyt on board. she's one of those "Done, and Gets Things Smart" people that Steve Yegge talks about.

[12:29] *** rindolf left
[12:29] <moritz_> indeed

[12:31] <masak> hear that, all you lurking headhunters on #perl6?

[12:31] <moritz_> I guess asking for jobs in a perl related journal increases her chances of getting a perl related job, though

[12:32] <masak> anything haskell related should be easy, too

[12:33] <moritz_> for me that would be s/anything/nothing/ ;-)

[12:33] <masak> moritz_: I'm not a virtuoso either, but I can wield the Maybe monad now

[12:34] <masak> I feel it makes me a better programmer just to know about it

[12:34] <masak> ("better" meaning "slightly better close to the very bottom of the scale", by the way)

[12:34] <moritz_> in perl, every variable has the implicit Maybe monad ;)

[12:35] <masak> sort of

[12:35] <masak> but in haskell, you can "bless" every calculation with "maybeness"

[12:35] <masak> that's extremely powerful

[12:35] <moritz_> every variable as Just value | undef

[12:35] <moritz_> s/as/is/

[12:36] <masak> having it on by default as in Perl, and many other languages, creates the risk of uncaught undefs

[12:36] <masak> that hardly happens in Haskell

[12:36] <moritz_> yes, right

[12:36] <masak> monads++

[12:37] <moritz_> low level types in perl 6 aren't Maybe, but I think that's the only exception

[12:38] <masak> and even that is with a nod to the metal, not to type theory

[12:38] *** Lorn left
[12:41] *** iblechbot joined
[12:44] *** lleksah left
[12:53] *** Alias_ left
[12:59] *** szbalint joined
[13:02] *** cmarcelo joined
[13:09] *** jferrero left
[13:11] *** alester_ joined
[13:13] *** alester_ left
[13:13] *** iblechbot left
[13:23] *** Limbic_Region joined
[13:25] *** BinGOs left
[13:28] <Limbic_Region> salutations all

[13:28] * moritz_ has a deja-vu ;-)

[13:29] <moritz_> Limbic_Region: have you seen that blog post by audreyt?

[13:29] <Limbic_Region> I have already emailed her

[13:29] <moritz_> ok ;)

[13:30] * zamanfou is now away: In the rain my tears are forever lost.

[13:31] *** BinGOs joined
[13:42] *** sri_work_ joined
[13:43] <pmurias> ruoso: is there anything we need implemented before lexicals?

[13:51] *** sri_work left
[14:00] *** ashizawa left
[14:13] *** ron joined
[14:16] *** Limbic_Region left
[14:18] *** ron left
[14:18] *** m0py joined
[14:23] *** icwiener joined
[14:28] *** m0py left
[14:35] <jdv79> cool, she's still alive.

[14:36] *** jhorwitz joined
[14:44] <moritz_> masak: in  #57448 you're missing the actual revision number

[14:45] <masak> moritz_: I just saw that too

[14:45] <masak> sloppy-and-paste

[14:45] <masak> I'll reply and supply it

[14:46] *** Exodist joined
[14:47] *** Sinaps joined
[14:48] * moritz_ observes with delight that Rakudo can't complain about lack of tests

[14:48] <moritz_> s/tests/testers/

[14:48] <[particle]> masak: do you create spec tests for these errors you find in rakudo?

[14:48] <masak> [particle]: not always, no.

[14:49] <[particle]> you should consider it. it would help all perl 6 implementations

[14:49] <moritz_> I usally try to add some when I see tickets

[14:49] <[particle]> the bug reports are quite helpful

[14:49] <masak> [particle]: actually, you could help me clear up what goes in the spec test and what doesn't

[14:50] <masak> I thought the spec tests were _spec_ tests because they reflect the spec

[14:50] <moritz_> well, they say for example that every object has a .WHAT method

[14:50] <masak> using that logic, they shouldn't be contaminated with regression tests from diverse bugs in implementations

[14:50] <masak> moritz_: yes, that could be a spec test

[14:51] <moritz_> masak: they are only bugs because they violate the specs

[14:51] <masak> hm.

[14:51] <[particle]> you're testing that Enum has a .perl method... that's a spec test

[14:51] <moritz_> thus all regressioin tests are spec tests

[14:51] <masak> ok

[14:51] <[particle]> where it belongs, that's the hard bit

[14:51] <masak> now that I know, I will be more active in providing tests

[14:51] <moritz_> the only thing that does not go into the spec tests are things that are implementation specific

[14:52] <masak> oki

[14:53] <pugs_svn> r21651 | moritz++ | [spec] testing .WHAT and .perl on enum mixins

[14:55] <pugs_svn> r21652 | moritz++ | [spec] test .WHAT and .perl on actual enums, masak++

[14:55] *** TJCRI joined
[14:55] <moritz_> sad thing is that the tests I've added are not in spectest_regression

[14:56] <moritz_> can somebody please take a look at S12-enums/thorough.t, line  28?

[14:56] <moritz_> it uses |~~ - am I right in assuming that it should actually be !~~ ?

[14:57] <[particle]> what the heck is |~~ ? that's funky

[14:57] <masak> moritz_: I think you're correct

[14:58] <moritz_> STD.pm parses it

[14:58] <[particle]> blame says: 21146     moritz   ok $x |~~  Wed,     "smartmatch worked correctly ($x-4)";

[14:59] <[particle]> sure, it's valid perl, but looks funky

[14:59] <[particle]> prefix:|

[15:00] <moritz_> [particle]: I think I moved that file in r21146

[15:00] <moritz_> can you have a prefix operator on another operator?

[15:00] <[particle]> sure

[15:00] <[particle]> you can stack prefix:! for example

[15:00] <moritz_> or does it parse as $something infix:<|> prefix:<~>prefix:<~> $other?

[15:01] <[particle]> longest token

[15:01] <moritz_> right

[15:01] <[particle]> so, !! may be problematic

[15:01] <pugs_svn> r21653 | moritz++ | [spec] fixed negated smart match in enum test

[15:02] <moritz_> [particle]: we've got preifx:<?> for perl 5 stlye !! usage

[15:02] <[particle]> right, but it's a perl5ism that may want a warning

[15:02] *** agentzh left
[15:03] *** agentzh joined
[15:03] *** iblechbot joined
[15:04] <moritz_> we could use a no-op prefix:<!!> to mark important lines in our code... ;-)

[15:04] <pugs_svn> r21654 | fglock++ | [v6.pm] IO fixes

[15:07] <masak> moritz_: !! is not no-op :)

[15:07] <moritz_> ;)

[15:10] *** kanru left
[15:19] *** Lorn joined
[15:21] <TimToady> moritz_: subsets are "Just" types

[15:22] <moritz_> rakudo: say Int.What

[15:22] <p6eval> rakudo 29834: OUTPUT[Method 'What' not found for invocant of class ''␤current instr.: '_block11' pc 24 (EVAL_13:15)␤]

[15:22] <moritz_> pugs: say Int.WHAT

[15:22] <p6eval> pugs: OUTPUT[Int␤]

[15:23] <moritz_> pugs: say Int.perl

[15:23] <p6eval> pugs: OUTPUT[::Int␤]

[15:23] <moritz_> TimToady: how absolute is the "everything must implement .perl" rule?

[15:24] <moritz_> or is there no such rule?

[15:26] <moritz_> for example, does `eval $closure.perl' has to work?

[15:27] <TimToady> well, it might just give you a bunch of JITted code... :)

[15:28] <moritz_> is that a "perlish representation", to quote S02?

[15:28] <TimToady> companies want their security-through-licensed-obscurity...

[15:28] <TimToady> but I think reasonable efforts should be made to provide .perl where possible

[15:28] <TimToady> and that includes closures generally

[15:30] <moritz_> which leads us to the question: how can we reference an anonymous lexical scope?

[15:31] <moritz_> my $x; { # variable definitions here; $x = sub { ... }; # other stuff here }; say $x.perl

[15:31] *** TJCRI left
[15:31] <TimToady> how does pugs do it?

[15:32] <moritz_> TimToady: it emits a bunch of YAML AST, iirc

[15:32] <moritz_> pugs: my $x = sub { 1; } say $x.perl

[15:32] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "say"␤    expecting operator␤    at /tmp/LjY0C9q9jb line 1, column 20␤]

[15:32] <moritz_> pugs: my $x = sub { 1; }; say $x.perl

[15:32] <p6eval> pugs: OUTPUT[\sub :(@_) "$_" := "Scalar" #<Scalar:0xb7b6897d>␤          "@_" := "Array" #<Array:0xb7b68975>␤          "&?ROUTINE" := "Sub" #<Sub:0xb7a8a539>␤          "&?BLOCK" := "Sub" #<Sub:0xb7a8a539> {"$_" := "Scalar" #<Scalar:0xb7aed15d>␤                                                "@...

[15:33] <TimToady> that's Perl, not YAML

[15:34] <TimToady> this is, I suspect, a good place to follow the lead of pugs

[15:34] <moritz_> pugs: my $x = sub { 1; }; eval $x.perl; say "still here"

[15:34] <p6eval> pugs: OUTPUT[still here␤]

[15:34] <moritz_> so you can actually write code like that in Perl 6?

[15:34] * moritz_ shudders

[15:35] <TimToady> well, applying := to a "" is probably illegal really...

[15:36] <moritz_> I mean I'm quite sure that whatever $closure.perl emits, it won't be all that pretty...

[15:36] <TimToady> actually, I think that's spittout out Haskell there maybe

[15:36] <TimToady> *spitting out

[15:37] <TimToady> not awake enough yet to see straight

[15:37] *** mofino joined
[15:37] *** cosimo left
[15:38] <TimToady> but anyway, the pugs notion was that everything just desugars down to primitives, so .perl might give  you the primitives, but it still has the same meaning

[15:40] <TimToady> we probably have to keep some kind of representation like that around internally anyway if we want auto-optimizing/pessimizing jit alternatives

[15:41] *** Southen_ joined
[15:41] <TimToady> or at least you have to keep a fully pessimized version around to fall back on if the optimized version's preconditions are violated

[15:42] <moritz_> that's the classical optimization for dynamic languages, yes

[15:42] <TimToady> but that sort of all-or-nothing view reminds me of source filters somehow

[15:42] <TimToady> so it's probably better to keep the semantic representation and re-emit

[15:43] *** masak left
[15:43] <moritz_> otoh, do we want to eval($stuff.perl) a clone of $stuff? if so, it would just have to emit something like do { # variables here; sub { ... } } to create a new closure that's tied to a differenc lexical pad

[15:44] <moritz_> just like eval $ordinary_object.perl will not return the same object, but a clone

[15:44] <moritz_> s/a clone of $stuff/to be a clone of $stuff/

[15:45] <TimToady> well, maybe it depends on whether you're asking for .perl of the continuation or not... :/

[15:47] <[particle]> VAR($x).perl

[15:47] <TimToady> but certainly something that references lvalues can't work outside the referential scope of them

[15:47] <TimToady> not without ipc that communicates back to the original machine  :)

[15:49] <TimToady> so basically we're talking about a universal naming scheme for anonymous values at that point...

[15:49] *** hercynium joined
[15:50] <moritz_> and if we want and need something like that

[15:50] <TimToady> which is not terribly practical unless you really need relocatable code

[15:50] <moritz_> it feels a bit stupid to invent a naming scheme for something that might be intentionally anonymous

[15:51] <[particle]> sounds like perl 6.1 or perl 7

[15:51] <TimToady> I don't know Perl 6 will end up with, but Perl 7 will be fought with sticks and stones...

[15:52] <moritz_> luckly we mostly agreed on not writing perl 7 ;-)

[15:53] <TimToady> it's probably just something to bear in mind for now, but in generally wrapping up code has to wrap up its entire visible state, and that's not terribly practical

[15:53] <TimToady> *general

[15:54] *** kanru joined
[15:57] <TimToady> so I don't know if we can mandate .perl on everything easily; what we *could* say is that the AST for a comp_unit must be kept around by default unless explicitly discarded

[15:58] *** Southen left
[15:59] <TimToady> and then a closure's .perl can be emitted assuming that information, maybe

[15:59] <TimToady> not sure how cloning fits into all that though

[15:59] <TimToady> the continuations tend to sneak back in

[15:59] <moritz_> so basically eval($stuff.perl) would deep clone $stuff for normal objects, and only half-deep for closures?

[15:59] <moritz_> (or even shallow)

[15:59] <[particle]> *hip-deep

[15:59] <moritz_> ;)

[16:00] <TimToady> I'm not an expert on these things, and it feels PhDish

[16:00] <TimToady> I've already earned enough of those with Perl 6... :)

[16:01] <[particle]> in sigils, bolt-ons, and other topics

[16:02] <[particle]> oh, wait, those are perl 5 :)

[16:02] * [particle] misparsed

[16:03] * zamanfou is now away: In the rain my tears are forever lost.

[16:08] *** justatheory joined
[16:19] <mofino> zamanfou, that's a pretty emo away message

[16:20] <mofino> geez, now I'm depressed.

[16:20] <mofino> ;)

[16:20] <moritz_> independently of *how* it is, we don't want to know anyway

[16:21] *** fridim_ left
[16:22] <TimToady> it seems a bit antisocial to put away messages on a channel you're just lurking on...

[16:22] <moritz_> but now (s)he is away anyway, and won't read what we say

[16:22] <TimToady> well, I was just wondering if a mild kick was in order

[16:23] <mofino> mild?

[16:23] <moritz_> maybe

[16:23] <moritz_> mofino: no /kickban

[16:24] <TimToady> well, our ban table is full, so not on the table :)

[16:24] <mofino> wow 50 bans

[16:24] <TimToady> but I wasn't suggesting that

[16:25] <moritz_> maybe you could also lift some old bans, in the hope that they aren't necessary anymore, and to be able to intervene when it's really needed

[16:25] <mofino> aye

[16:25] <mofino> i never understood old bans

[16:35] *** lambdabot left
[16:35] *** lambdabot joined
[16:47] *** TimToady sets mode: -b *!*@65.99.218.179

[16:47] *** TimToady sets mode: -b *!*@IGLD-84-229-83-227.inter.net.il

[16:48] *** TimToady sets mode: -b *!*@mic92-6-82-227-94-181.fbx.proxad.net

[16:48] *** TimToady sets mode: -b *!*@one.hand.on.mouse.*

[16:48] *** TimToady sets mode: -b *!*@124.77.123.48

[16:53] *** alester joined
[17:23] * araujo greets TimToady 

[17:48] *** [particle]1 joined
[17:55] *** eternaleye joined
[17:55] <mofino> haha @one.hand.on.mouse...

[17:56] <mofino> ahh, people troll right down to their domain, excellent.

[18:00] *** meppl left
[18:01] * hercynium wonders how he can set his hostname to @one.hand.on.mouse.com...

[18:02] * hercynium used to have the email address... [email@hidden.address]
[18:02] *** Jedai left
[18:05] *** [particle] left
[18:27] *** fnDAY joined
[18:29] *** fnDAY left
[18:32] *** BinGOs left
[18:38] *** BinGOs joined
[18:42] *** smtms left
[18:51] *** smtms joined
[18:56] <pmurias> TimToady: how is the autolexer implemented? (i have to make it preserve grammar modifications and don't really understand it)

[18:59] *** justatheory left
[19:07] *** ruoso joined
[19:08] <ruoso> Good Afternoon!

[19:09] <ruoso> pmurias, we need to start supporting the language constructs

[19:10] <ruoso> if, while, for, gather, take etc

[19:11] <moritz_> you want to implement them in smop?why?

[19:11] <moritz_> I mean if and while can perfectly done in C

[19:11] <moritz_> and if smop is a runtime library, not a VM..

[19:12] <ruoso> moritz_, if we do it in C we're going to recurse in the C stack

[19:13] <moritz_> if and while don't need a stack, do they?

[19:13] <ruoso> they do... 

[19:13] <ruoso> they even need a lexical pad

[19:14] <ruoso> and you also need to be able yeld the continuation in a gather/take construct

[19:15] <ruoso> speaking of which...

[19:15] <ruoso> one thing that isn't clear to me is how ==> is going to affect the invocation...

[19:16] <pmurias> ruoso: good evening

[19:17] <ruoso> pmurias, :P

[19:17] <pmurias> moritz_: smop is sort of a vm

[19:18] <pmurias> ruoso: if and while don't need a c stack

[19:18] <ruoso> pmurias, they need a Perl stack

[19:21] <pmurias> we could to an if as &if(cond,&iftrue,&else)

[19:21] <pmurias> s/to/do/

[19:22] <ruoso> that's how I planed to do...

[19:22] <ruoso> implement each of this constructs as standard objects

[19:23] <pmurias> is Frame.back tested anywhere?

[19:25] *** justatheory joined
[19:27] <ruoso> pmurias, not really...

[19:28] <ruoso> in fact... Frame.back is implementation specific

[19:28] <ruoso> the public interpreter API is just has_next, next, eval

[19:28] <pugs_svn> r21655 | pmurias++ | [smop]

[19:28] <pugs_svn> r21655 | pmurias++ | expanded 21_code.p6

[19:28] <pugs_svn> r21655 | pmurias++ | the RI is set in Frame.clone

[19:29] <pmurias> SLIME Frames are mostly implementation specific

[19:32] <pmurias> ruoso: how should the method to get the SLIME Frame from a Code be called?

[19:39] <pmurias> ruoso: is sub {...}.SLIME_FRAME ok?

[19:42] *** lleksah joined
[19:42] <pmurias> btw have you thought of testing smop's test suit coverage?

[19:48] *** donaldh joined
[19:53] <ruoso> pmurias, .continuation()?

[19:55] <pmurias> ruoso: it's meant to be used only for testing SLIME

[19:55] <ruoso> ah... in this case .SLIME_FRAME si ok...

[20:01] <pugs_svn> r21656 | pmurias++ | [smop] assingment via = works

[20:02] <pmurias> ruoso: and what do you thing about testing test coverage?

[20:03] <ruoso> pmurias, that's something that should be done at some time...

[20:04] * ruoso having a weird week... almost no work done... (probably related to the fact that he started building his house)

[20:04] * ruoso home &

[20:04] *** ruoso left
[20:08] *** justatheory_ joined
[20:11] *** REPLeffect joined
[20:24] *** justatheory left
[20:29] *** dolmen joined
[20:34] <dolmen> rakudo: class Foo; class Foo; class Foo;

[20:34] <p6eval> rakudo 29834: OUTPUT[Class 'Foo' already registered!␤current instr.: '!keyword_class' pc 11881 (src/gen_builtins.pir:7565)␤]

[20:38] *** cognominal__ left
[20:41] *** baest_ left
[20:46] *** cognominal_ joined
[20:52] *** drbean left
[20:57] *** wknight8111 joined
[20:57] *** drbean joined
[20:58] <pugs_svn> r21657 | Auzon++ | [gsoc_spectest] finished up angle bracket syntax tests (added 21 tests)

[21:05] <Auzon> TimToady: STD.pm has trouble with /<*foo+>/ and similar patterns (S05:1459). t/spec/S05-metasyntax/angle-brackets.t demonstrates several issues.

[21:09] *** hercynium left
[21:14] *** cathya joined
[21:18] *** meppl joined
[21:20] *** explorer joined
[21:25] *** jhorwitz left
[21:43] *** cmarcelo left
[21:45] *** iblechbot left
[22:05] *** Jamtech joined
[22:08] *** wknight8111 left
[22:08] *** wknight8111_ joined
[22:09] *** eternaleye left
[22:11] *** Jamtech left
[22:12] *** bacek joined
[22:17] *** Lorn_ joined
[22:18] *** alester is now known as AndyAway

[22:19] *** Lorn left
[22:23] *** justatheory_ left
[22:25] *** cmarcelo joined
[22:28] *** Limbic_Region joined
[22:28] *** bacek_ joined
[22:30] *** donaldh left
[22:33] *** dolmen left
[22:35] *** meppl left
[22:38] *** meppl joined
[22:38] *** ryanc joined
[22:45] *** justatheory joined
[22:45] <pugs_svn> r21658 | moritz++ | [spec] fixed file propos of range.t

[22:47] <pugs_svn> r21659 | moritz++ | [spec] more svn props fixes

[22:47] *** bacek left
[22:47] *** ruoso joined
[22:48] *** icwiener_ joined
[22:49] <ruoso> Good Evening!

[22:55] *** ruoso left
[23:01] *** icwiener left
[23:01] *** ruoso joined
[23:01] *** justatheory left
[23:05] *** lleksah left
[23:13] *** bacek joined
[23:14] <ruoso> pmurias, how hard would it be to add support for named arguments in sm0p?

[23:14] <ruoso> s/sm0p/use v6 blocks/

[23:21] *** cmarcelo left
[23:22] *** justatheory joined
[23:25] *** [particle] joined
[23:26] <pugs_svn> r21660 | ruoso++ | [smop] Created the attribute test, now we need named arguments in use v6 blocks

[23:27] <ruoso> pmurias, could you please take a look at test/22... we would need the commented part to be compiled as named arguments to that call...

[23:31] *** icwiener_ left
[23:35] *** bacek_ left
[23:36] *** fridim_ joined
[23:38] *** [particle]1 left
[23:40] <pugs_svn> r21661 | lwall++ | [STD] now parses enum declarators

[23:40] <pugs_svn> r21661 | lwall++ | [STD] now parses <*...> as containing regex (Auzon++)

[23:40] <pugs_svn> r21661 | lwall++ | [STD] now parses <~~0> in addition to <~~foo>

[23:42] *** bacek_ joined
[23:44] *** Exodist left
[23:47] *** aindilis left
[23:47] *** aindilis joined
[23:48] *** bacek left
[23:50] *** SamB left
[23:51] *** SamB joined
[23:51] <pmurias> ruoso: it shouldn't be very hard, elf ast is broken in this regard, but it can be worked around

[23:51] *** pmurias left
[23:52] *** Khisanth left
[23:56] *** sri_work_ left
[23:58] *** Khisanth joined
[23:59] *** fridim_ left
