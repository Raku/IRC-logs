[00:12] *** justatheory joined
[00:13] <s1n> @tell pmichaud i have some tests i'm going to commit for the radix stuff, but it'll be TODO until you commit my patch in rt#59222

[00:13] <lambdabot> Consider it noted.

[00:27] *** justatheory left
[00:33] *** Limbic_Region left
[00:35] *** Kitchy left
[00:44] *** BinGOs left
[01:23] <pugs_svn> r22420 | pmichaud++ | [t/spec] Fix operator precedence in regex matching tests, +3 pass

[01:27] *** [particle]1 joined
[01:28] *** sri_work_ left
[01:41] *** [particle] left
[02:00] *** eternaleye joined
[02:00] *** jdv79 joined
[02:04] <jdv79> anyone have any resources for someone who wants to learn about Self's pros and cons?

[02:04] *** meppuru joined
[02:04] *** [particle] joined
[02:07] <pugs_svn> r22421 | putter++ | [elf] More backend neutrality.

[02:20] *** justatheory joined
[02:20] *** [particle]2 joined
[02:21] *** [particle]1 left
[02:21] *** meppl left
[02:37] *** [particle] left
[02:39] *** Ontolog joined
[02:52] *** hercynium joined
[02:58] *** justatheory left
[03:02] *** elmex_ joined
[03:09] *** [particle]2 left
[03:09] *** [particle] joined
[03:15] <meppuru> good night

[03:17] *** elmex left
[03:17] *** meppuru left
[03:17] *** elmex_ is now known as elmex

[03:37] *** wknight8111 left
[03:41] *** Caelum joined
[03:42] *** kanru left
[03:44] <pugs_svn> r22422 | azawawi++ | [t/spec] Fixed 2 skip messages for unicode.t

[03:47] <pugs_svn> r22423 | s1n++ | [t/spec] added 45 tests (rehashes) of string conversions of radix notations (see rt# 59222)

[03:50] *** kanru joined
[04:05] *** hercynium left
[04:13] <s1n> @tell moritz_ i added the first set of radix tests to radix.t, i'm going to add more tomorrow

[04:13] <lambdabot> Consider it noted.

[04:24] *** Ehtyar left
[04:41] *** zostay joined
[05:08] <azawawi> rakudo: print $?OS

[05:08] <lambdabot> azawawi: You have 1 new message. '/msg lambdabot @messages' to read it.

[05:08] <p6eval> rakudo 31451: OUTPUT[Scope not found for PAST::Var '$OS'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤]

[05:08] <azawawi> @messages

[05:08] <lambdabot> moritz_ said 6h 48m 14s ago: please don't fudge tests where the thing that's tested is not yet implemented - it doesn't help anybody

[05:09] <azawawi> @seen moritz_

[05:09] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 6h 34m 4s ago.

[05:09] <azawawi> @seen moritz

[05:09] <lambdabot> I haven't seen moritz.

[05:09] <azawawi> rakudo: print $?OS

[05:09] <p6eval> rakudo 31451: OUTPUT[Scope not found for PAST::Var '$OS'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤]

[05:09] <azawawi> pugs: print $?OS

[05:09] <p6eval> pugs: OUTPUT[linux]

[05:10] <azawawi> kp6: print $?OS

[05:10] <p6eval> kp6 22423: OUTPUT[syntax error at position 6, line 1 column 6:␤print $?O␤      ^ HERE␤]

[05:10] <azawawi> elf: print $?OS

[05:10] <p6eval> elf 22423: OUTPUT[Global symbol "$OS" requires explicit package name at (eval 117) line 3.␤ at ./elf_f line 3861␤]

[05:12] <azawawi> @tell moritz_ For not-yet-implemented things, use #?rakudo todo instead?

[05:12] <lambdabot> Consider it noted.

[05:29] *** sail0r joined
[05:31] *** sail0r left
[05:42] *** Psyche^ joined
[05:42] *** [particle]1 joined
[05:58] *** agentzh left
[05:58] *** Patterner left
[05:58] *** Psyche^ is now known as Patterner

[05:59] *** agentzh joined
[06:00] *** [particle] left
[06:03] <pugs_svn> r22424 | azawawi++ | [t/spec] Fudged config.t as un-implemented for rakudo 

[06:10] *** abra joined
[06:11] *** Bzek joined
[06:18] <pugs_svn> r22425 | azawawi++ | [t/spec] Fudged block.t for rakudo

[06:24] *** z80ASM joined
[06:24] <z80ASM> timtowtdi

[06:24] <z80ASM> Hi

[06:43] *** entonian1 joined
[07:00] *** allbery_b joined
[07:07] *** agentzh left
[07:07] *** agentzh joined
[07:08] <pugs_svn> r22426 | azawawi++ | [t/spec] Fudged dollar_bang.t for rakudo

[07:24] *** abra left
[07:26] <pugs_svn> r22427 | azawawi++ | [t/spec] Fixed earlier fudging in int-uint.t to skip everything as unimpl

[07:34] *** entonian1 left
[08:08] *** jfredett joined
[08:18] *** lumi left
[08:20] *** kanru left
[08:23] *** BinGOs joined
[08:24] *** pmurias joined
[08:37] *** z80ASM left
[08:49] *** agentzh left
[08:53] *** funktio_ is now known as funktio

[08:54] *** xunxin joined
[08:55] *** xunxin left
[09:03] *** jan_ joined
[09:03] *** agentzh joined
[09:08] *** xunxin joined
[09:09] <pugs_svn> r22428 | azawawi++ | [t/spec] Fudged names.t for rakudo

[09:09] <moritz_> azawawi: for example rakudo doesn't implement native types (int, uint) yet. There's simply no point in fudging things like int-uint.t because it won't meaningfully parse any test

[09:09] <lambdabot> moritz_: You have 3 new messages. '/msg lambdabot @messages' to read them.

[09:09] *** xunxin left
[09:09] <azawawi> moritz_: hi

[09:10] <azawawi> moritz_: how about skipping them as unimpl

[09:10] <azawawi> moritz_: ?

[09:11] *** iblechbot joined
[09:44] <moritz_> azawawi: don't skip them. If they are skipped, and somebody implements the feature, the tests still aren't run

[09:45] <moritz_> azawawi: if a file contains only tests for unimplemented features, simply leave then alone until at least some of them are implemented

[09:45] <azawawi> moritz_: ok, i'll revert changes to int-uint.t

[09:46] <azawawi> moritz_: thx for the advice ;-)

[09:46] <azawawi> moritz_: the problem is that i dont know what's implemented or not

[09:54] <moritz_> azawawi: in case of doubt run one very simple test manually

[09:54] <moritz_> or ask

[09:54] <azawawi> moritz_: cool

[09:55] *** Ontolog left
[09:56] <azawawi> moritz_: i found out that sometimes '#?rakudo try' is pretty useful in deciding what works or not

[09:56] <azawawi> moritz_: but not with syntax errors ofcourse

[09:56] <moritz_> aye

[09:58] <azawawi> maybe we can apply it to unimplemented test features like int-uint.t

[10:05] *** lichtkind_ joined
[10:07] *** sri_work joined
[10:23] <pugs_svn> r22429 | azawawi++ | [t/spec] Fudged fmt.t for rakudo

[10:23] *** lichtkind left
[10:39] *** mberends joined
[10:46] <azawawi> @seen moritz_

[10:46] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 49m 34s ago.

[10:47] <azawawi> @tell moritz_ Should rakudo support $?PUGS_BACKEND (e.g. pid.t)?

[10:47] <lambdabot> Consider it noted.

[10:48] <moritz_> azawawi: no

[10:48] <lambdabot> moritz_: You have 4 new messages. '/msg lambdabot @messages' to read them.

[10:48] <moritz_> azawawi: the usual approach is to prefix those tests with #?pugs emit

[10:48] <azawawi> moritz_: one more thing

[10:48] <azawawi> lvalues

[10:49] <azawawi> rakudo: my ($a, $b) = (10,20);

[10:49] <p6eval> rakudo 31451: OUTPUT[Method 'lvalue' not found for invocant of class 'PAST::Stmts'␤current instr.: 'parrot;PAST::Compiler;as_post' pc 2878 (src/PAST/Compiler.pir:735)␤]

[10:49] <azawawi> pugs: my ($a, $b) = (10,20);

[10:49] <p6eval> pugs: RESULT[(\10, \20)]

[10:49] <moritz_> azawawi: list assignment is NYI in rakudo

[10:50] <azawawi> moritz_: so in that case, should i emit compatible code for run the actual tests? 

[10:50] <azawawi> moritz: e.g. #?rakudo emit my $a = 10; my $b = 20;

[10:51] <moritz_> azawawi: if it's not list assignment that's being tested, you can also just simplify the test

[10:51] <azawawi> moritz_: cool thx

[11:04] *** agentzh left
[11:20] <azawawi> pugs: say $*PID;

[11:20] <p6eval> pugs: OUTPUT[␤]

[11:21] <azawawi> pugs: say $*EXECUTABLE_NAME;

[11:21] <p6eval> pugs: OUTPUT[␤]

[11:21] <azawawi> raduko: say $*PID;

[11:21] <azawawi> rakudo: say $*PID;

[11:21] <p6eval> rakudo 31451: OUTPUT[␤]

[11:22] <azawawi> pugs: my $p = $*PID

[11:22] <p6eval> pugs: RESULT[\undef]

[11:22] <azawawi> pugs: my $p = $*PID;

[11:22] <p6eval> pugs: RESULT[\undef]

[11:22] <azawawi> pugs: my $p = $*PID; say $p;

[11:22] <p6eval> pugs: OUTPUT[␤]

[11:23] <moritz_> azawawi: p6eval runs pugs in safe mode...

[11:23] <azawawi> moritz_: how do i know the process id of perl6 process?

[11:24] <azawawi> moritz_: i noticed...

[11:24] <moritz_> azawawi: it could be that some of the special variables are disabled

[11:24] <moritz_> azawawi: on my machine $*PID works

[11:25] <azawawi> moritz_: for rakudo?

[11:25] <moritz_> no, on pugs

[11:27] <azawawi> rakudo: my $p=$*PID // "default"; say $p;

[11:27] <p6eval> rakudo 31451: OUTPUT[default␤]

[11:27] <azawawi> moritz_: undefined....

[11:28] <azawawi> moritz_: that's why many of the tests that depend on those special vars are failing...

[11:31] *** zamolxes left
[11:32] <moritz_> yes :/

[11:52] *** meppl joined
[11:54] <rakudo_svn> r31454 | moritz++ | [rakudo] implement Hash.reverse, bacek++. Closes RT #59396

[11:54] <rakudo_svn> r31454 | moritz++ | Patch courtesy of Vasily Chekalkin

[11:54] <pugs_svn> r22430 | moritz++ | [t/spec] unfudged Hash.reverse test, bacek++

[12:02] *** lumi joined
[12:02] <rakudo_svn> r31455 | moritz++ | [rakudo] export Str.reverse as a function, as perl S29 and bacek++

[12:03] <pugs_svn> r22431 | moritz++ | [t/spec] unfudge passing reverse.t tests, bacek++

[12:04] *** pmurias_ joined
[12:05] *** rindolf joined
[12:05] *** pmurias_ left
[12:05] *** pmurias left
[12:21] *** Ontolog joined
[12:32] <pugs_svn> r22432 | moritz++ | [t] move operators/recursive_definition.t to spec/, and add a simpler test as well

[12:39] *** pmurias joined
[12:40] *** Alias_ joined
[12:58] *** mberends left
[12:58] *** mberends joined
[13:00] *** rindolf left
[13:02] <pugs_svn> r22433 | azawawi++ | [t/spec] Fudged increment.t for rakudo

[13:03] <rakudo_svn> r31456 | moritz++ | [rakudo] move some Str builtins to any-str, bacek++. Closes RT #59398.

[13:03] <rakudo_svn> r31456 | moritz++ | Patch courtesy by Vasily Chekalkin

[13:08] *** jferrero joined
[13:22] *** fridim_ left
[13:33] *** iblechbot left
[13:39] *** abra joined
[13:45] *** Alias__ joined
[14:00] *** Alias__ left
[14:02] *** Alias_ left
[14:19] *** Ontolog left
[14:37] <rakudo_svn> r31460 | coke++ | [codingstd] remove trailing whitespace

[14:38] <pugs_svn> r22434 | azawawi++ | [t/spec] reverted the fudging done earlier to unicode.t (azawawi--, moritz++)

[14:39] <moritz_> azawawi++ # fixing own "mistakes"

[14:39] <azawawi> moritz_: lol

[14:45] <pugs_svn> r22435 | azawawi++ | [t/spec] reverted to unfudged version since it failed in rakudo

[14:45] <azawawi> moritz_: im feeling bored now ;-)

[14:46] <moritz_> azawawi: there are lots of things to be done... look at t/TASKS

[14:54] <lichtkind_> is $capture = \$var still reference to this var?

[14:55] *** lichtkind_ is now known as lichtkind

[15:28] *** pmurias_ joined
[15:28] *** pmurias_ left
[15:37] <pmurias> lichtkind: yes

[15:37] <lichtkind> thanks

[15:38] <pmurias> if you mean what i think ;)

[15:41] *** abra left
[15:49] *** abra joined
[15:55] *** iblechbot joined
[16:03] *** rindolf joined
[16:08] <lichtkind> of course

[16:09] <lichtkind> i mean that i can use than $$capture

[16:09] <lichtkind> anybody tried &routine() ~~ &routine() ?

[16:09] <lichtkind> anybody tried &routine() ~~ &routine2() ?

[16:09] <lichtkind> :)

[16:13] *** jhorwitz joined
[16:21] <lichtkind> later

[16:21] *** lichtkind left
[16:35] *** mberends left
[16:43] *** Limbic_Region joined
[16:46] *** jferrero left
[16:54] *** justatheory joined
[16:58] <rakudo_svn> r31462 | moritz++ | [rakudo] add :multi directives on many methods in any-str.pir, bacek++

[17:06] *** mberends joined
[17:10] <rafl> is sub foo ($bar is ro is rw) {} valid?

[17:10] <rafl> if so, what does it mean?

[17:10] <moritz_> std: sub foo ($bar is ro is rw) {}

[17:10] <p6eval> std 22435: OUTPUT[parsed␤]

[17:10] <moritz_> rafl: it might be syntactically valid, but I don't think it is semantically

[17:11] *** dmq left
[17:24] <pmurias> rafl: it depends what do you define ro to mean, it's readonly in Perl 6

[17:38] <azawawi> std: my ($a,$b) = (10,"20");

[17:38] <p6eval> std 22435: OUTPUT[parsed␤]

[17:38] <azawawi> rakudo: my ($a,$b) = (10,"20");

[17:38] <p6eval> rakudo 31462: OUTPUT[Method 'lvalue' not found for invocant of class 'PAST::Stmts'␤current instr.: 'parrot;PAST::Compiler;as_post' pc 2878 (src/PAST/Compiler.pir:735)␤]

[17:59] *** alester joined
[18:02] *** rindolf left
[18:12] <pugs_svn> r22436 | moritz++ | [docs] a few small fixes in the book

[18:36] <azawawi> pugs: "test\\" eq 'test\\'

[18:36] <p6eval> pugs: RESULT[Bool::True]

[18:36] <azawawi> rakudo: "test\\" eq 'test\\'

[18:36] <p6eval> rakudo 31462: RESULT[Bool::True]

[19:11] *** icwiener joined
[19:13] *** silug joined
[19:14] <pugs_svn> r22437 | azawawi++ | [t/spec] added a smartlink for ('test\\' eq "test\\") test

[19:16] *** abra left
[19:20] *** Bzek left
[19:28] <rakudo_svn> r31463 | pmichaud++ | [rakudo]:  spectest-progress.csv update: 187 files, 4090 passing tests

[19:33] *** Limbic_Region left
[19:37] *** azawawi left
[19:58] *** dolmen joined
[20:29] <pugs_svn> r22438 | moritz++ | [t/spec] fudged increment.t for rakudo

[20:34] <pmurias> rafl: sorry, what i meant to say "is readonly" is used in perl6 instead of "is ro"

[20:34] <rafl> pmurias: oh, that makes more sense :-)

[20:36] <rafl> but then i guess my question would be if is rw is readonly is valid

[20:36] <pugs_svn> r22439 | moritz++ | [t/spec] unfudge passing TODO tests in radix.t

[20:37] <rakudo_svn> r31464 | moritz++ | [t/spec] add increment.t to rakudo, azawawi++

[20:37] *** larsen_ joined
[20:44] *** REPLeffect left
[21:15] *** meppuru joined
[21:21] <pmurias> rafl: i guess what it does would depend in the order they were applied, but i think it would be valid

[21:23] *** meppl left
[21:33] *** sri_work left
[21:35] *** meppuru left
[21:39] *** justatheory left
[21:39] <pugs_svn> r22440 | s1n++ | [t/spec] added 8 radix tests that should fail parsing and return 0

[21:40] <s1n> moritz_: have and ideas for other things that i should test?

[21:40] *** pmurias left
[21:43] *** pmurias joined
[21:49] *** iblechbot left
[22:01] *** pmurias left
[22:02] *** jhorwitz left
[22:04] *** elmex left
[22:04] *** alester left
[23:17] *** icwiener_ joined
[23:31] *** icwiener left
[23:45] *** japhb left
[23:45] *** japhb_ joined
[23:53] *** dolmen left
[23:54] *** dolmen joined
