[00:21] *** c9s left
[00:39] *** valkyr0 left
[00:41] *** sri_work joined
[01:01] *** REPLeffect left
[01:03] *** agentzh left
[01:11] *** bacek_ joined
[01:11] *** bacek left
[01:14] *** bacek_ left
[01:14] *** bacek joined
[01:18] *** Jedai left
[02:22] *** simcop2387 left
[02:22] *** simcop2387 joined
[02:25] *** mncharity joined
[02:26] *** cjfields joined
[02:29] *** nipotan is now known as nipotaway

[02:31] *** cjfields left
[02:31] *** sri_work left
[02:31] *** meppl left
[02:40] *** cjfields joined
[02:42] *** kanru left
[02:43] *** agentzh joined
[02:46] *** meppl joined
[02:47] <mncharity> pugs: my @a=3,4;my @b=5,6;push @a,@b;say @a;

[02:47] <p6eval> OUTPUT[3456␤]

[02:48] <mncharity> pugs: my @a=3,4;my @b=5,6;push @a,@b,7,8;say @a;

[02:48] <p6eval> OUTPUT[345678␤]

[02:49] <mncharity> ﻿pugs: my @a=3,4;my @b=5,6;@a.push(@b,7,8);say @a;

[02:49] <mncharity> pugs: my @a=3,4;my @b=5,6;@a.push(@b,7,8);say @a;

[02:49] <p6eval> OUTPUT[345678␤]

[02:50] <mncharity> pugs: my @a=3,[4,5];say @a; say @a.list;

[02:50] <p6eval> OUTPUT[34 5␤34 5␤]

[02:55] *** kanru joined
[02:58] <mncharity> pugs: my @a=3,4;@a.push([5,6]);say @a;

[02:58] <p6eval> OUTPUT[345 6␤]

[02:59] <mncharity> rakudo: my @a=3,4;@a.push([5,6]);say @a;

[02:59] <p6eval> rakudo r28570 OUTPUT[345 6␤]

[03:00] <mncharity> ﻿rakudo: my @a=3,4;my @b=5,6;push @a,\@b,7,8;say @a;

[03:00] <mncharity> pugs: my @a=3,4;my @b=5,6;push @a,\@b,7,8;say @a;

[03:00] <p6eval> OUTPUT[345 678␤]

[03:01] <meppl> good night

[03:02] *** meppl left
[03:04] <mncharity> :)

[03:04] *** elmex_ joined
[03:05] <mncharity> moritz_++ pmurias++

[03:09] <mncharity> as you saw, elf's treatment of list context, array auto flattening, \ , etc, is non-existent.  it would be nifty if someone who actually understands it all wanted to take it on.

[03:10] <mncharity> even ok to take something of a performance hit for it.(!) :)

[03:11] *** cjfields left
[03:13] *** corneliu1_ joined
[03:14] *** corneliu1_ left
[03:15] *** corneliu1_ joined
[03:16] *** a-jing joined
[03:16] *** a-jing left
[03:17] *** BinGOs_ joined
[03:19] *** cjfields joined
[03:20] *** elmex left
[03:20] *** elmex_ is now known as elmex

[03:21] *** Grrrr left
[03:22] *** BinGOs left
[03:25] *** kanru left
[03:26] *** kanru joined
[03:30] *** tuxdna left
[03:32] <diakopter> mncharity: if only I understood it (both elf & list context

[03:32] *** corneliu1_ left
[03:32] <diakopter> )

[03:36] <mncharity> :)

[03:36] <pugs_svnbot> r20901 | putter++ | [elf] Minor tweaks, of Pair (moved attribute defs out of the big class graph), tidy (enforced p5 code segregation), and (re)set the executable bit on elf_f.

[03:38] <mncharity> ﻿diakopter: I'd be happy to contribute the elf-understanding part...

[03:38] <cjfields> perl6: role A { has $.answer is rw }; my $i = 100; $i does A(42); say $i; say $i.answer;

[03:38] <p6eval> kp6 r20901: OUTPUT[error in Block at compiled/perl5-kp6-mp6/lib/KindaPerl6/Grammar/Sub.pm line 753, <> line 1.␤*** Syntax Error in Block: missing closing curly bracket  ␤]

[03:38] <p6eval> ..pugs: OUTPUT[*** Unknown syntactic construct: Syn "does" [Var "$i",App (Var "&A") Nothing [Ann (Pos (MkPos "/tmp/1NCnKGbCxd" 1 55 1 57)) (Val (VInt 42))]]␤    at /tmp/1NCnKGbCxd line 1, column 45-58␤]

[03:38] <p6eval> ..rakudo r28570: OUTPUT[100␤42␤]

[03:38] <p6eval> ..elf r20901: OUTPUT[Unknown rule: package_declarator:role␤It needs to be added to ast_handlers.␤ at ./elf_f line 1918␤]

[03:39] *** pbuetow_ joined
[03:39] <cjfields> jonathan++

[03:39] <cjfields> mixins are a-workin'!

[03:39] <mncharity> :)

[03:42] * diakopter kicks pugs_svnbot

[03:42] <pugs_svnbot> r20902 | diakopter++ | [yap6] fixed regression/bug in rule(); re-enabled the POC lrule commalist; fixed stmtList so it can eat trailing whitespace (anything can immediately follow a statement-terminating semicolon); combined declare and assign rules as declaration is a special case of assign; refactored the blkPrmbl rule's members so they actually work, now; reorganized the rules in a bit of top-down order; added a panic for things like BEGIN: {} (I

[03:43] <diakopter> <sigh>

[03:43] <diakopter> I can't win

[03:43] <mncharity> svn log :)

[03:44] <mncharity> like BEGIN: {} (I need a "worry" equiv); added the ^ alternation operator, which doesn't have the correct relative precedence to quite be like STD's ||, but it's close ("first match" as opposed to one's "ltm"); fixed the iff() parser combinator so it actually works; added some premature optimizations such as a qualifying regex hint to keywords()...

[03:45] <mncharity> end of day.  good night all &

[03:45] *** mncharity left
[03:49] *** alanhaggai left
[03:51] *** alanhaggai joined
[03:51] *** cjfields left
[03:52] *** pbuetow left
[03:56] *** drbean left
[03:56] *** drbean_ joined
[04:02] *** alanhaggai_ joined
[04:05] *** Limbic_Region left
[04:10] *** alanhaggai left
[04:32] *** snooper joined
[04:45] *** pbuetow_ left
[04:46] *** wknight8111 left
[05:24] *** alanhaggai_ left
[05:34] *** alester_ joined
[05:40] *** sri_work joined
[06:06] *** alester_ left
[06:20] *** Psyche^ joined
[06:32] *** lambdabot left
[06:33] *** lambdabot joined
[06:34] *** BinGOs_ is now known as BinGOs

[06:35] *** Psyche^ is now known as Psyche

[06:36] *** Patterner left
[06:42] *** DietCoke left
[06:53] *** a-jing joined
[06:53] *** a-jing left
[07:01] *** Jedai joined
[07:04] *** iblechbot joined
[07:12] *** Grrrr joined
[07:17] *** sri_work left
[07:31] *** corneliu1_ joined
[07:32] *** corneliu1_ is now known as c9s

[07:51] *** pmurias joined
[07:51] <pmurias> pugs: [1;2,3;4]

[07:51] <p6eval> OUTPUT[*** ␤    Unexpected "["␤    expecting program␤    at /tmp/UpCa4zWN2Q line 1, column 1␤]

[07:52] <moritz_> pmurias: I don't think any implementation handles multi-dimensional arrays

[07:52] <pmurias> moritz_: can be fixed ;)

[07:52] <pmurias> my @a=(1,2,3);my $a = [@a,4,5]; say $a;

[07:53] <pmurias> pugs: my @a=(1,2,3);my $a = [@a,4,5]; say $a;

[07:53] <moritz_> that should flatten

[07:53] <p6eval> OUTPUT[1 2 3 4 5␤]

[07:53] <moritz_> pugs++

[07:53] <moritz_> rakudo: my @a=(1,2,3);my $a = [@a,4,5]; say $a;

[07:53] <p6eval> rakudo r28570 OUTPUT[1 2 3 4 5␤]

[07:53] <moritz_> rakudo++

[07:53] <moritz_> elf: my @a=(1,2,3);my $a = [@a,4,5]; say $a;

[07:53] <p6eval> OUTPUT[ARRAY(0x8832e28)45␤]

[07:53] <moritz_> elf: my @a=(1,2,3);my $a = [@a,4,5]; say $a.perl;

[07:53] <p6eval> OUTPUT[[[1,2,3],4,5]␤]

[07:54] <moritz_> very creative, the first output ;)

[07:55] <pmurias> it's just bits of perl5 sticking out

[07:59] <moritz_> elf: my $a = (1, 2, 3); say $a.perl

[07:59] <p6eval> OUTPUT[Useless use of a constant in void context at (eval 115) line 3.␤3␤]

[07:59] <moritz_> elf: my $a = [1, 2, 3]; say $a.perl

[07:59] *** simcop2387 left
[08:00] <p6eval> OUTPUT[[1,2,3]␤]

[08:00] <moritz_> elf: my @a = 1, 2, 3; say @a.perl

[08:00] <p6eval> OUTPUT[[1,2,3]␤]

[08:00] <moritz_> rakudo: my @a = 1, 2, 3; say @a.perl

[08:00] <p6eval> rakudo r28570 OUTPUT[[1, 2, 3]␤]

[08:00] *** simcop2387 joined
[08:06] <pmurias> sub foo($a,$b,$c) {say }

[08:07] <pmurias> pugs: sub foo($a,$b,$c) {say "$a $b $c"};my @a = 1,2,3;foo(@a);

[08:07] <p6eval> OUTPUT[*** No compatible multi variant found: "&foo"␤    at /tmp/DWO1DkXFBF line 1, column 50-57␤]

[08:10] <pmurias> how do i find out if a sub is called in string context?

[08:11] <moritz_> if want.Str I think

[08:11] <moritz_> pugs: sub foo($a,$b,$c) {say "$a $b $c"};my @a = 1,2,3;foo(|@a)

[08:11] <p6eval> OUTPUT[1 2 3␤]

[08:11] <pmurias> sub listcontext {say want.array};sub foo($a) {};foo(listcontext())

[08:12] <pmurias> pugs: sub listcontext {say want.array};sub foo($a) {};foo(listcontext())

[08:12] <p6eval> OUTPUT[*** No such method in class Str: "&array"␤    at /tmp/SuLr36iSvx line 1, column 22-32␤]

[08:12] <moritz_> want.List or want.list or some such

[08:12] <pmurias> pugs: sub listcontext {say want};sub foo($a) {};foo(listcontext())

[08:12] <p6eval> OUTPUT[Scalar (Any), LValue␤]

[08:12] <moritz_> pugs: sub listcontext {say want};sub foo($a){}; foo(|listcontext)

[08:12] <p6eval> OUTPUT[Scalar (Capture)␤]

[08:13] <moritz_> pugs: sub listcontext {say want ~~  List };sub foo($a){}; foo(|listcontext)

[08:13] <p6eval> OUTPUT[␤]

[08:13] <moritz_> pugs: sub listcontext {say want ~~  Capture };sub foo($a){}; foo(|listcontext)

[08:13] <p6eval> OUTPUT[␤]

[08:14] <pmurias> pugs: sub listcontext {say want ~~ LValue};sub foo($a) {};foo(listcontext())

[08:14] <p6eval> OUTPUT[*** No such subroutine: "&LValue"␤    at /tmp/jX9jWzY7pQ line 1, column 22-36␤]

[08:14] <pmurias> walk&

[08:15] *** bacek left
[08:16] *** pmurias left
[08:21] *** cognominal_ left
[08:21] <pugs_svnbot> r20903 | moritz++ | [t/TASKS] document need for more say() and print() tests

[08:29] *** meppl joined
[08:31] *** Jedai left
[08:44] *** agentzh left
[09:03] *** LCamel_ left
[09:04] *** tcliou left
[09:17] *** pmurias joined
[09:18] <rakudo_svn> r28571 | bernhard++ | Remove trailing whitespace.

[09:19] *** barney joined
[09:21] <pugs_svnbot> r20904 | pmurias++ | [sm0p] renamed strip_out_blocks to strip_out_actions

[09:22] <pmurias> perl6: class Foo {has $.foo;has $.bar};my $foo = Foo.new(foo=>54532,bar=>12133);say $foo.foo~":"~$bar.bar

[09:22] <p6eval> kp6 r20903: OUTPUT[no method 'bar' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤      

[09:22] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "$bar" requires predeclaration or explicit package name␤    at /tmp/X9Lg6ZJaNQ line 1, column 95␤]

[09:22] <p6eval> ..rakudo r28570: OUTPUT[Scope  not found for PAST::Var '$bar'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤

[09:22] <p6eval> ..elf r20903: OUTPUT[Global symbol "$bar" requires explicit package name at (eval 115) line 10.␤ at ./elf_f line 3854␤]

[09:22] <pmurias> perl6: class Foo {has $.foo;has $.bar;};my $foo = Foo.new(foo=>54532,bar=>12133);say $foo.foo~":"~$bar.bar

[09:23] <p6eval> kp6 r20904: OUTPUT[no method 'bar' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤      

[09:23] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "$bar" requires predeclaration or explicit package name␤    at /tmp/p1m25Qq9Sg line 1, column 96␤]

[09:23] <p6eval> ..rakudo r28571: OUTPUT[Scope  not found for PAST::Var '$bar'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤

[09:23] <p6eval> ..elf r20904: OUTPUT[Global symbol "$bar" requires explicit package name at (eval 115) line 10.␤ at ./elf_f line 3854␤]

[09:23] <pmurias> perl6: class Foo {has $.foo;has $.bar;};my $foo = Foo.new(foo=>54532,bar=>12133);say $foo.foo~":"~$foo.bar

[09:23] <p6eval> kp6 r20904: OUTPUT[54532:12133␤]

[09:23] <p6eval> ..pugs: OUTPUT[54532:12133␤]

[09:23] <p6eval> ..rakudo r28571: OUTPUT[54532:12133␤]

[09:23] <p6eval> ..elf r20904: OUTPUT[Odd number of elements in anonymous hash at ./elf_f line 19.␤Odd number of elements in anonymous hash at ./elf_f line 19.␤Use of uninitialized value in concatenation (.) or string at (eval 115) line 10.␤Use of uninitialized value in concatenation (.) or string at (eval 115)

[09:23] <p6eval> ..line ...

[09:26] <pmurias> TimToady: STD parses Foo.new(foo=>54532,bar=>12133) wrongly?

[09:26] <pmurias> TimToady: STD parses Foo.new(:foo(54532),:bar(12133)) wrongly?

[09:27] <pmurias> TimToady: the second question is a mistake

[09:39] *** ting joined
[09:44] *** Jedai joined
[09:46] *** penk joined
[09:54] <moritz_> Juerd: I just updated a unicode related article of mine, and included some results of a discussion we had on this channel: http://perlgeek.de/en/article/encodings-and-unicode#philosophy

[09:54] <lambdabot> Title: article | Character Encodings in Perl

[10:04] <Juerd> moritz_: I find the upwards pointing arrows in links confusing.

[10:05] <moritz_> Juerd: maybe I should find a better symbol for "external links"

[10:05] <Juerd> moritz_: "but many encodings are ASCII-incompatible in the first 127 characters" - you really meant byte values there, I think!

[10:06] <moritz_> Juerd: yes

[10:06] <Juerd> "How to Do it Right: Out-of-band Signalling" I luvs you.

[10:06] <Juerd> phone, brb

[10:09] <Juerd> "unless it is specified exactly in which encoding the encoding information is written." --> "unless an exact specific byte sequence is known for each encoding, for example because the it is specified exactly ..."

[10:10] <Juerd> You could very well have a set of supported encodings, and reserve a single byte for it, as long as all parties know that 0x03 means UTF-8.

[10:10] <Juerd> Although you could call that an encoding too, I guess.

[10:10] <moritz_> I'll re-formulate it a bit differently

[10:10] <Juerd> "A possible workaround could have been to specific that the first line of any XML file has to be ASCII encoded, and the rest of the file is in the encoding that is specified in that first line. But it's an ugly workaround" It's not just a workaround, it'll break many a parser.

[10:11] <Juerd> The document is no longer valid XML in any encoding after that, if the rest is not ASCII compatible.

[10:11] <moritz_> yes. It would have bot be specced that way in the first place

[10:11] <moritz_> I should make that clear

[10:11] *** ting left
[10:14] <Juerd> "any system that works with text data" --> "Every system ..."

[10:15] <Juerd> In general, I think it's a very good article

[10:15] <moritz_> thank you, and thanks for the suggestions / clarifications

[10:15] <Juerd> I've only read from Philosophy downwards. don't have the time to review the rest right now.

[10:15] <moritz_> that's fine

[10:15] <Juerd> I see one thing, and that's that you're advocating the use of is_utf8.

[10:16] <Juerd> I strongly suggest using Devel::Peek instead.

[10:16] <moritz_> I also suggest that

[10:16] <Juerd> People tend to become obsessed with the SvUTF8 flag once they start using is_utf8, and worse: they tend to leave their checks in when code reaches production stage.

[10:16] <moritz_> I'll re-word it to make clear that it's only a debugging aid

[10:16] <Juerd> Which then other people read, and get silly ideas from

[10:17] <Juerd> Whereas Devel::Peek provides you with the same info, but also an ugly bunch of other info, which'll make sure that you remove it after debugging.

[10:17] <moritz_> aye

[10:17] <moritz_> brb

[10:17] <Juerd> afk

[10:25] *** pmurias left
[10:40] *** zamolxes joined
[10:50] *** edpratomo joined
[10:56] *** Lorn_ left
[11:14] *** DietCoke_ joined
[11:21] *** ruoso joined
[11:34] *** iblechbot left
[11:36] <diakopter> pmurias: yap6' lrule() is working as expected, as are (I think) all the rules currently in the grammar

[11:38] <diakopter> now that the grammar engine is "stable" (*again*, sort of), i'll work on the Match object generation & action hanging

[11:39] <diakopter> like I said yesterday, I don't know how a this() parser combinator would be implemented, since when inside this(), it would have no idea in what rule it was going to end up...

[11:40] *** Grrrr left
[11:40] * moritz_ thinks of dynamically scoped variables

[11:40] <moritz_> ie local()

[11:40] *** Grrrr joined
[11:41] <diakopter> moritz_: re: what I said?

[11:41] <moritz_> diakopter: yes

[11:41] <moritz_> diakopter: I don't quite understand what a this() parser is, but I think you can use local()ized variables to give it some context of what it is, or which subrule it is in

[11:42] <diakopter> but the parsers are generated bottom-up/inside-out

[11:42] <moritz_> (but I could also be far off iwth my guess)

[11:42] <moritz_> didn't you start just the other way round? ;-)

[11:43] <diakopter> perl would execute this() before the parser combinator in which this() is an argument

[11:43] <diakopter> I suppose you could use some caller() magic

[11:43] *** cognominal_ joined
[11:44] <diakopter> (once you got inside the actual $p

[11:44] <diakopter> )

[11:44] <moritz_> could you defer the execution?

[11:45] <diakopter> the main body of each parser combinator is of course executed in the order as stated above; the generated tree of closures is evaluted top-down/left-right, so yeah, if you kept "tree position" and some model of the tree in an outside data structure, each node could know where it was on the parse tree

[11:46] <diakopter> s/parse tree/closure tree/

[11:46] <diakopter> depth-first, I should specify, for the closure tree evaluation.

[11:48] <diakopter> I suppose, using a similar technique, each parser-closure could know where on the in-construction parse-tree it was, too....

[11:49] <diakopter> but anyway, I don't see how '$_[0]' is that much uglier than 'this'

[11:50] *** Alias_ joined
[11:50] <diakopter> especially since you must have the '$_[1]' somewhere in the rule anyway

[11:50] <diakopter> lrule

[11:50] <diakopter> Alias_: still using the irc proxy?

[11:51] <Alias_> nope nope, at YAPC

[11:51] <Alias_> oh wait, maybe?

[11:51] <Alias_> Actually, yes

[11:51] <Alias_> Will need it for up to 48 hours

[11:51] <Alias_> By then everyone will be checked out

[11:51] <diakopter> oh; ok.

[11:51] <Alias_> There's still a good 50 people here today

[11:52] <Alias_> between master classes and hackathon

[11:52] <diakopter> wow; lots of learnin' goin' on

[11:52] *** Lorn joined
[11:52] <Alias_> ok, sleeping

[11:52] <diakopter> "sleeping"!

[11:52] <Alias_> Long night

[11:53] *** cognominal_ left
[11:53] <Alias_> But some exciting developments

[11:53] <Alias_> That sill add significantly to the CPAN

[11:53] <Alias_> will

[11:53] <Alias_> But for now, sekrit

[11:57] * diakopter dubs the operation precedence spectrum "the gamut"

[11:57] <diakopter> ... and names the spectrum layers after colors

[12:00] <diakopter> tightest precedence should probably be shortest wavelength...

[12:03] *** barney left
[12:05] *** meppl left
[12:06] *** cognominal_ joined
[12:07] *** zamolxes left
[12:08] *** rindolf joined
[12:18] *** iblechbot joined
[12:31] *** pmurias joined
[12:32] <pmurias> diakopter: why do you support only one parameter to lrule

[12:32] <pmurias> ?

[12:33] <moritz_> diakopter: shortest wave length being gamma rays? ;-)

[12:38] <diakopter> pmurias: that's a good question

[12:38] <diakopter> moritz_: well, I was going to stick to visible light

[12:39] <diakopter> I suppose lrule could become a generic combinator constructor

[12:39] <diakopter> oh!  templated rules!

[12:39] <moritz_> diakopter: that's clever - you can always extend your scope to UV and IR if you need more on either side of the spectrum ;)

[12:39] <diakopter> moritz_: heh

[12:40] <pmurias> diakopter: i have tested the weaken not to work

[12:41] <diakopter> .oO( could a source filter work by a 'use' stmt in eval("") )

[12:41] <diakopter> pmurias: ok; you convinced me... :)

[12:43] <moritz_> diakopter: re source filter for string eval, don't think so

[12:43] <pugs_svnbot> r20905 | pmurias++ | [yap6] removed a useless potentialy dangerous &weaken use

[12:43] <pmurias> diakopter: you mean eval("use sourcefilter;filtered stuff")?

[12:43] <diakopter> pmurias: yeah

[12:43] <pmurias> you can try, can't see why not

[12:44] <diakopter> well then we can do really cool things in generated grammars at runtime

[12:44] <pmurias> we don't depend on the source filter

[12:45] <pmurias> it's used for trivial syntax suger

[12:45] *** alester_ joined
[12:45] <pmurias> diakopter: cool things - example please ;)

[12:45] <moritz_> well, if the source filter inside eval doesn't work, you can still ovverride CORE::GLOBAL::eval or whatever it's called

[12:46] <pmurias> moritz_: is eval overidable?

[12:47] <moritz_> pmurias: don't know why it shouldn't be. If not, use my_eval instead ;)

[12:49] <pmurias> moritz_: it's hard to write a custom eval: my $foo="hello world";eval("print $foo");

[12:49] <pmurias> eval('print $foo') acutaly

[12:50] <diakopter> pmurias: you would be right about the only-sugar, except for the "my " predeclarations.

[12:50] *** a-jing joined
[12:50] *** a-jing left
[12:50] <diakopter> otherwise we can turn off warnings....

[12:50] <pmurias> diakopter: i get "syntax error near the end of input"

[12:51] <pmurias> diakopter: my predeclarations?

[12:51] <diakopter> besides, warnings only *need* to be there during development :P, right?

[12:51] <diakopter> pmurias: on what input?

[12:51] *** cognominal_ left
[12:51] <pmurias> use v6;say 3;

[12:52] <diakopter> oh yeah; I don't know why that doesn't work...

[12:52] * moritz_ wanders off for the weekend, TTFN and have a good time

[12:52] <diakopter> moritz_: cya l8r

[12:52] <pmurias> it prints some stuff afterwards

[12:53] <diakopter> diagnosing an infinite loop I created...

[12:54] <pugs_svnbot> r20906 | pmurias++ | [yap6] removed useless lrule predeclarations

[12:54] <diakopter> pmurias: but they would need to be predeclared if the rules were in a different order...

[12:54] <diakopter> er, um

[12:55] <pmurias> no

[12:56] <pmurias> why do you use sbin instead of bin?

[12:57] <diakopter> I thought sbin was for scripts

[12:57] <pmurias> it's superuser bin in linux

[13:00] <diakopter> ohhhh :|  

[13:00] <diakopter> silly me

[13:01] <diakopter> well, yap6 should be used only by superuser :P

[13:02] <pmurias> it needs to setup a root shell at port 88? ;)

[13:04] *** alester_ left
[13:05] *** rindolf left
[13:08] <diakopter> j/k of course

[13:08] <diakopter> you can fix it if you like

[13:10] <pmurias> why can't i localize a lexical in perl5? :(

[13:10] *** cognominal_ joined
[13:14] *** cognominal_ left
[13:19] *** penk left
[13:24] *** barney joined
[13:27] *** pmurias left
[13:33] *** cognominal_ joined
[13:39] *** meppl joined
[13:40] *** wknight8111 joined
[13:43] *** donaldh joined
[14:07] *** jhorwitz joined
[14:12] <pugs_svnbot> r20907 | diakopter++ | [yap6] added if/while/try blocks to the grammar

[14:56] *** ilogger2 joined
[14:57] <pmurias> diakopter: is there a perl6 snippet which works and uses commalist

[14:58] <diakopter> pmurias: nope :) blkPrmsList isn't working; just tried it

[14:59] <diakopter> pmurias: now it is; committing

[15:00] <pugs_svnbot> r20909 | diakopter++ | [yap6] fixed blkPrmsList

[15:00] <pmurias> do you have a bit of perl6 which parses and uses it

[15:02] <diakopter> argh; nm it's not fixed... meeting&

[15:06] *** simcop2387 joined
[15:10] *** hercynium joined
[15:17] *** cjfields joined
[15:26] *** toddr joined
[15:30] <pmurias> got to pack sails and stuff&

[15:33] *** zaphar_ps joined
[15:39] <cjfields> pugs: say "ABC".trans('A..C' => 'a..c');

[15:39] <p6eval> OUTPUT[abc␤]

[15:39] <cjfields> pugs: say "ABC".trans('A-C' => 'a-c');

[15:39] <p6eval> OUTPUT[aBc␤]

[15:40] *** Schwern joined
[15:44] <cjfields> pugs: say "Whfg nabgure Crey unpxre".trans('a..z' => 'n..za..m', 'A..Z' =>'N..ZA..M');

[15:44] <p6eval> OUTPUT[Just another Perl hacker␤]

[15:55] <cjfields> say " ABC-".trans('A-C ' => 'a_cZ');

[15:55] <cjfields> pugs: say "ABC".trans('A-C' => 'a-c');

[15:55] <p6eval> OUTPUT[aBc␤]

[15:56] <cjfields> pugs: say " AB-C".trans(' A-C' => 'Za_c');

[15:56] <p6eval> OUTPUT[ ZBa_␤]

[15:57] <cjfields> pugs: say " AB-C".trans(' A..C-' => 'Za..c_');

[15:57] <p6eval> OUTPUT[ Zacb␤]

[15:58] <cjfields> hmm...

[16:01] <cjfields> We're not using '-' for range anymore (just '..'), but something odd happens with the second range (not expanded)

[16:02] <cjfields> Spaces appear to be important (which makes sense) but the test suite thinks otherwise

[16:10] <rakudo_svn> r28577 | pmichaud++ | [rakudo]:

[16:10] <rakudo_svn> r28577 | pmichaud++ | * Update spectest-progress.csv (65 files, 792 passing)

[16:15] *** Grrrr joined
[16:51] *** ilogger2 joined
[16:53] *** Psyche^ joined
[16:53] *** Psyche^ is now known as Psyche

[16:53] *** Psyche is now known as Patterner

[17:06] *** pengrate left
[17:08] <diakopter> pmurias: back

[17:09] *** sri_work joined
[17:11] *** pengrate joined
[17:13] <pugs_svnbot> r20910 | diakopter++ | [yap6] fixed blkPrmsList (see above in the irc log)

[17:19] <pugs_svnbot> r20911 | diakopter++ | [yap6] removed alleged optimization ;)

[17:19] *** FurnaceBoy joined
[17:19] *** r0bby joined
[17:36] *** FurnaceBoy left
[17:58] <pugs_svnbot> r20912 | diakopter++ | [yap6] *truly* fixed lrule, commalist, blkPrms, invcDecl

[18:01] <pugs_svnbot> r20913 | diakopter++ | [yap6] fixed evalbot for yap6 as 'use v6' is no longer enforced

[18:07] <pugs_svnbot> r20914 | diakopter++ | [yap6] fixed lrule/blkPrms .... further.

[18:08] *** Grrrr joined
[18:10] *** sri_work_ joined
[18:10] <pugs_svnbot> r20915 | diakopter++ | [yap6] if only I had a test suite.

[18:12] <diakopter> yap6: say $a; sub say ( $foo, $arg1   ,,, ,$arg2  , ,, ,,,,   ) { my $a = sub { use Foo; }};

[18:12] <p6eval> yap6 r20915 OUTPUT[parsed: [["use","v6",";","say","\$","a",";","sub","say","(","\$","foo",",","\$","arg1",",",",",",",",","\$","arg2",",",",",",",",",",",",",",",")","{","my","\$","a","=","sub","{","use","Foo",";","}","}",";"],[]]␤]

[18:13] <diakopter> yap6: say $a; sub say ($foo: $arg1,$arg2) { my $a = sub { use Foo; }};

[18:13] <p6eval> yap6 r20915 OUTPUT[parsed: [["use","v6",";","say","\$","a",";","sub","say","(","\$","foo",":","\$","arg1",",","\$","arg2",")","{","my","\$","a","=","sub","{","use","Foo",";","}","}",";"],[]]␤]

[18:15] *** sri_work left
[18:16] <diakopter> evalbot control restart

[18:16] *** p6eval joined
[18:22] *** kanru joined
[18:27] *** rindolf joined
[18:37] <pugs_svnbot> r20916 | diakopter++ | [yap6] added worry() and error() and warning(); modified panic() accordingly

[18:39] <diakopter> yap6: BEGIN: { }

[18:39] <p6eval> yap6 r20916 OUTPUT[Syntax warning at line 1 col 6 : colons are for block labels, not special compilation units␤parsed: [["BEGIN",":","{","}"],[]]␤]

[18:43] <pugs_svnbot> r20917 | diakopter++ | [yap6] re-fixed compUnit

[18:44] *** Alias_ joined
[18:45] *** rindolf left
[18:46] *** iblechbot joined
[18:49] *** rindolf joined
[18:54] <jhorwitz> Alias_: ping

[18:55] <rindolf> Hi all.

[18:55] <rindolf> jhorwitz: are you Jewish?

[18:55] <jhorwitz> um, with my name, it's a requirement.

[18:55] <rindolf> jhorwitz: nice. So do I.

[18:56] <rindolf> jhorwitz: but my last name is "Fish".

[18:56] <rindolf> There are not too many Israelis called Fish.

[18:56] <jhorwitz> yeah.  that can go either way here.

[18:56] <pugs_svnbot> r20918 | diakopter++ | [yap6] <sigh> 

[18:56] <rindolf> However, the only Technion student called "Fish" besides me lived in an apartment next door.

[18:57] <rindolf> Then my sister joined and we were three Fishes.

[18:57] <rindolf> The Technion.

[18:57] <rindolf> Now my other sister is learning Medicine there.

[18:57] <diakopter> yap6: BEGIN: { }

[18:57] <p6eval> yap6 r20918 OUTPUT[Syntax warning in /tmp/47oPqwp6TE at line 1 col 6 : colons are for block labels, not special compilation units␤parsed: [["BEGIN",":","{","}"],[]]␤]

[18:57] <diakopter> yap6: BEGIN { }

[18:57] <p6eval> yap6 r20918 OUTPUT[parsed: [["BEGIN","{","}"],[]]␤]

[19:00] <jhorwitz> the fish bowl

[19:05] <pugs_svnbot> r20919 | diakopter++ | [yap6] I think this is a safe optimization.  We'll find out later.

[19:05] *** simcop2387 joined
[19:16] <Alias_> jhorwitz: Pong

[19:16] <Alias_> (sorry for the delay, I've been trying to rebook the flight)

[19:16] <jhorwitz> Alias_: get your flight changed?

[19:17] <rindolf> Hi Alias_ 

[19:18] <Alias_> Yup

[19:18] <Alias_> Let me grab the details

[19:18] <Alias_> I'll mail it as well

[19:18] <rindolf> Alias_: where are you located at present?

[19:19] <Alias_> Fri 21st, UA148 Departing 13:10 arriving 16:26

[19:20] <Alias_> rindolf: I'm currently opposite from Schwern and to the immediate left of ingy and cog

[19:20] <jhorwitz> you mean Sat 21st, right?  :)

[19:20] <rindolf> Alias_: ah.

[19:20] <Alias_> ... in Chicago

[19:20] <rindolf> Alias_: ah.

[19:20] <Alias_> jhorwitz, correct

[19:20] <Alias_> :)

[19:21] <jhorwitz> excellent.  see you at the airport.  :)

[19:22] <Alias_> great, awesome

[19:22] <pugs_svnbot> r20920 | diakopter++ | [yap6] fixed mandatory leading whitespace rules :/

[19:22] <pugs_svnbot> r20920 | diakopter++ | as a consequence  say 4  works again.

[19:22] <diakopter> yap6: say 3

[19:22] <p6eval> yap6 r20920 OUTPUT[parsed: [["say",3],[]]␤]

[19:22] <diakopter> yap6: say

[19:22] <p6eval> yap6 r20920 OUTPUT[parsed: [["say"],[]]␤]

[19:23] <rindolf> Alias_: I'd better get to better publicise the next TelAvivLinClub/OSDClub meeting.

[19:23] <diakopter> yap6: say say say ({ say })

[19:23] <p6eval> yap6 r20920 OUTPUT[parsed: [["say","say","say","(","{","say","}",")"],[]]␤]

[19:28] <spinclad> pugs: say " AB-C".trans(' A..C-' => 'Za..c_');

[19:28] <p6eval> OUTPUT[ Zacb␤]

[19:29] *** hercynium joined
[19:29] <spinclad> pugs: say " AB-C".trans(' ABC-' => 'Zabc_');

[19:29] <p6eval> OUTPUT[ Zacb␤]

[19:30] <spinclad> pugs: say " AB-C".trans(' ' => 'Z', 'A..C' => 'a..c', '-' => '_');

[19:30] <p6eval> OUTPUT[ ab_c␤]

[19:31] <spinclad> pugs: say " AB-C*".trans(' ' => 'Z', 'A..C' => 'a..c', '-' => '_', '*' => 'Inf');

[19:31] <p6eval> OUTPUT[ ab_cI␤]

[19:32] <spinclad> pugs: say " ".trans(' ' => 'Z');

[19:32] <p6eval> OUTPUT[ ␤]

[19:33] *** Alias__ joined
[19:33] *** peepsalot joined
[19:34] <spinclad> pugs: say " a a".trans('a ' => '1Z');

[19:34] <p6eval> OUTPUT[ 1 1␤]

[19:34] <spinclad> pugs: say " a b".trans('a b' => '1Z2');

[19:34] <p6eval> OUTPUT[ 1 Z␤]

[19:34] *** Alias_ left
[19:35] <spinclad> yes, that's odd: spaces are ignored on lhs

[19:39] <cjfields> ah, you caught on...

[19:39] <cjfields> I think this is an area which we need to define more

[19:40] <cjfields> for instance, the trans.t tests seem to imply we should support '-' as a range operator

[19:40] <cjfields> but it isn't used in pugs

[19:40] <cjfields> ('..' is used instead)

[19:41] *** araujo joined
[19:42] <cjfields> with p5 tr///, spaces aren't ignored

[19:43] <cjfields> afk

[19:47] <spinclad> i believe the trans.t tests are out of date as to '-' v. '..'

[19:49] *** araujo left
[19:49] *** peepsalot left
[19:49] *** araujo joined
[19:50] <diakopter> pmurias: you around?

[19:50] <diakopter> tuit?

[19:55] <spinclad> pugs: say " ".trans([' '] => ['Z']);

[19:55] <p6eval> OUTPUT[Z␤]

[19:56] <spinclad> pugs: say " ".trans([' '] => ['ZOMG']);

[19:56] <p6eval> OUTPUT[ZOMG␤]

[19:56] <diakopter> pugs: say " ".trans(['  '] => [' Z']);

[19:56] <p6eval> OUTPUT[ ␤]

[19:57] <spinclad> pugs: say " ".trans(['  '] => ['ZOMG']);

[19:57] <p6eval> OUTPUT[ ␤]

[19:57] <spinclad> [warning: no character '  ' found]

[19:59] <spinclad> perl6: say " ".trans(' ' => 'Z');

[19:59] <p6eval> kp6 r20920: OUTPUT[no method 'trans' in Class 'Str'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤      

[19:59] <p6eval> ..pugs: OUTPUT[ ␤]

[19:59] <p6eval> ..rakudo r28580: OUTPUT[too few arguments passed (2) - 3 params expected␤current instr.: '_block11' pc -340725544 ((unknown file):-1)␤

[19:59] <p6eval> ..elf r20920: OUTPUT[Can't call method "trans" without a package or object reference at (eval 115) line 3.␤ at ./elf_f line 3854␤]

[19:59] <spinclad> nobody wins; prize carried over.

[20:02] <diakopter> hmph

[20:03] <diakopter> this lrule() parser generator generator generator gives yap6 the ability to generate precedence-climbing parsers for terms/expressions.

[20:03] <diakopter> while still fitting in the packrat recursive descent paradigm.

[20:04] * diakopter looks into it further

[20:04] <ingy> hola

[20:05] <diakopter> ingy: hi

[20:05] <pmurias> diakopter: i'm around now

[20:06] <diakopter> pmurias: see comment about precedence-climbing...

[20:06] * ingy should have ops. I created this channel :)

[20:06] *** ChanServ sets mode: +o diakopter

[20:06] *** ChanServ sets mode: +o ingy

[20:06] *** diakopter sets mode: -o diakopter

[20:06] <ingy> haha

[20:06] <ingy> thanks ;)

[20:07] <ingy> I remember when it was just me and audreyt...

[20:08] <ingy> for about 30 seconds

[20:10] <diakopter> ingy: did you find your keys

[20:13] <pmurias> diakopter: my OPP experience is implementing the algorithm at http://en.wikipedia.org/wiki/Operator-precedence_parser

[20:18] *** masak joined
[20:18] <masak> in what way will perl 6 have native continuations support?

[20:20] <pmurias> masak: i don't think they are speced yet

[20:21] <masak> we just know it's something we like, and will support natively?

[20:21] <masak> does parrot have it yet?

[20:21] <pmurias> yes

[20:21] <masak> given the nature of perl 6, one might suppose that a continuation will be an object of some sort...

[20:22] <pmurias> masak: coroutines are here if you want them ;)

[20:22] <masak> pmurias: 'here', as in...?

[20:23] * masak loves gather/take as of late

[20:23] <pmurias> masak: here as in gather/take

[20:24] <masak> ah.

[20:24] <masak> is there any chance of ever getting gather/take in perl 5?

[20:24] <masak> I'm starting to need it already

[20:24] <masak> esp. the laziness

[20:25] <pmurias> Perl6::GatherTake

[20:26] <diakopter> jhorwitz: was mod_perl6 going to become mod_rakudo?

[20:26] <pmurias> diakopter: have you considered using unit testing for yap6?

[20:26] <diakopter> pmurias: not until it's generating Match objects like STD5

[20:26] <masak> moritz_++

[20:27] <jhorwitz> diakopter: no, i think i'm keeping it mod_perl6 until there's a competing project.  my goal is for it to be the "official" mod_perl6.

[20:28] <diakopter> eh? but it's tied to rakudo only...

[20:29] <diakopter> or... I might have misunderstood your talk... :)

[20:29] <jhorwitz> no, it's definitely tied to rakudo

[20:30] <jhorwitz> but everyone knows what mod_perl6 means

[20:30] <diakopter> mod_parrot_perl6?

[20:30] <jhorwitz> and there's no competing project, so i'm leaving it as is.  :)

[20:30] <pmurias> diakopter: it should be possible to test parses/not parsers withought match objects

[20:31] <diakopter> I'm confused about this "no competing project" idea you have

[20:31] <jhorwitz> the name "rakudo" exists because there's multiple implementations of perl6, and we needed a name to distinguish it from others.

[20:31] <jhorwitz> since there's no "official" implementation

[20:31] <jhorwitz> but there's only one mod_perl6 project AFAIK

[20:33] <diakopter> jhorwitz: ok.. it makes sense to me now.

[20:33] <jhorwitz> my thinking is this: i could walk up to a random mod_perl developer and say "mod_perl6" and he'd know what i mean.  he probably wouldn't know what mod_rakudo is. 

[20:34] <jhorwitz> plus it's one less letter.  :)

[20:34] <diakopter> pmurias: oh, yeah, parse success/failure would be interesting

[20:34] <diakopter> pmurias: but if that's done, it might as well be against the whole test suite via some Test.pm hack

[20:35] <diakopter> or at least a fudged one

[20:35] <SamB> if there got to be contention you could qualify it mod_rakudo_perl6

[20:36] <pmurias> diakopter: i meant more testing each parser combinator

[20:37] <pmurias> does lit('abc') match against 'abc', and againt 'def'? style

[20:38] <diakopter> pmurias: oh, ok

[20:38] <diakopter> oh yeah; unit testing

[20:38] <diakopter> heh

[20:39] <masak> (actually, two letters less)

[20:40] <diakopter> pugs: say 'rakudo'.chars - 'perl6'.chars

[20:40] <p6eval> OUTPUT[1␤]

[20:41] <jhorwitz> masak: what are you smoking and can i have some?

[20:41] <masak> char != letter

[20:41] <masak> just sayin'

[20:41] <jhorwitz> LOL

[20:41] * jhorwitz is internationally-challenged

[20:41] <pmurias> shower&

[20:41] <diakopter> well, if we're going to get technical, it's two letters *fewer*, not two letters less, since letters are discrete quanta

[20:42] <diakopter> :P

[20:42] <masak> diakopter: there's some controversy on that topic, IIRC

[20:42] <jhorwitz> is chromatic standing next to you or something?  ;-)

[20:42] <diakopter> masak: oh

[20:42] <masak> there are a few Language Log posts on fewer/less

[20:43] <masak> (I'm not defending my usage, though. I might be wrong)

[20:43] <diakopter> masak: I was referring to the technical usages...

[20:43] <masak> http://itre.cis.upenn.edu/~myl/languagelog/archives/003775.html

[20:43] <lambdabot> Title: Language Log: If it was good enough for King Alfred the Great...

[20:44] <masak> diakopter: ok. that might actually make a difference, then

[20:44] *** cognominal_ joined
[20:44] <diakopter> although perhaps some Unicode person would argue that there are letters that aren't discrete.

[20:47] <masak> that's a scary thought

[20:47] <diakopter> (in that some letters are concatenations of others...

[20:47] <diakopter> )

[20:48] *** japhb left
[20:48] <masak> yes

[20:48] <diakopter> but that would be talking about the representation, not the symbol...

[20:48] <diakopter> oh wel

[20:53] <pmurias> diakopter: and what do you thing about unit testing?

[20:55] <diakopter> well, I have nearly full confidence in the first tier or two of nonterminal combinators...

[20:55] <pmurias> OTOH it wouldn't be nice to be betrayed by them

[20:56] <diakopter> I wouldn't be offended :)

[20:56] *** gbarr joined
[20:56] *** gbarr left
[20:58] <pmurias> diakopter: the things which most need testing is stuff like lrule which i'm nearly sure is wrong

[20:58] <diakopter> pmurias: but I changed it a lot while you were out

[20:58] <diakopter> seems to work fine for blkPrmsList

[21:00] <diakopter> yap6: say $a; sub say (Trap $fall: $foo, $arg1   ,,, ,$arg2  , ,, ,,,,   ) { my $a = sub { use Foo; }};

[21:00] <p6eval> yap6 r20920 OUTPUT[parsed: [["say","\$","a",";","sub","say","(","Trap","\$","fall",":","\$","foo",",","\$","arg1",",",",",",",",","\$","arg2",",",",",",",",",",",",",",",")","{","my","\$","a","=","sub","{","use","Foo",";","}","}",";"],[]]␤]

[21:00] <pmurias> diakopter: the thing is was nearly sure was an error is fixed ;)

[21:00] <diakopter> pmurias: oh good

[21:02] <diakopter> yap6: if ($a-$b) { if($wrong) {} }

[21:02] <p6eval> yap6 r20920 OUTPUT[syntax error near the end of input␤[[],[]]]

[21:02] <diakopter> yap6: if ($a-$b) { if ($wrong) {} }

[21:02] <p6eval> yap6 r20920 OUTPUT[parsed: [["if","(","\$","a","-","\$","b",")","{","if","(","\$","wrong",")","{","}","}"],[]]␤]

[21:03] <diakopter> although of course, once function/method calls work, that will appear to be wrong until type/declaration checking is added :{

[21:03] <diakopter> actually I'm wrong... it won't work.. but if() will be allowed

[21:05] <pmurias> i'm leaving for a two week vacation tommorow morning

[21:06] <pmurias> and i won't have internet access (except through my mobile) :(

[21:06] <diakopter> boating I guess

[21:06] <pmurias> windsurfing

[21:08] <pmurias> i could propably connect my laptop at some internet cafe 

[21:11] <pmurias> i haven't tried using the wifi on it yet, and i'm not sure if they would let me use a cable

[21:17] *** japhb joined
[21:18] <pmurias> diakopter: why aren't you generating Match objects now?

[21:18] <pmurias> you could try looking at the kp6 regex implementation v6/v6-KindaPerl6/src/KindaPerl6/Visitor/Emit/Perl5Regex.pm  for a way of doing it efficiently

[21:18] <pmurias> diakopter: why aren't you generating Match objects now?

[21:18] <pmurias> disconnected the network cable accidently

[21:19] <pmurias> got to sleep&

[21:19] <pmurias> g' nigh

[21:19] <pmurias> t

[21:19] <diakopter> pmurias: b/c too many bugs that were haunting

[21:24] *** rindolf left
[21:28] *** donaldh joined
[21:30] <diakopter> pugs: say 'rakudo'.letters # ;)

[21:30] <p6eval> OUTPUT[*** No such method in class Str: "&letters"␤    at /tmp/dsh6QQr0Yq line 1, column 5 - line 2, column 1␤]

[21:30] <masak> :)

[21:34] *** hercynium left
[21:35] <spinclad> warn "claim of 2 less than 6 letters unverifiable"

[21:37] <diakopter> lrule rule_template_1 { non_term_1 . non_term_2 . opt( $_[1] ) . $_[2] }

[21:38] <diakopter> rule baloney { rule_template_1( non_term_3 ) | rule_template_1(non_term_4) }

[21:39] <diakopter> oops; rule_template_1() takes 2 parameters.. :/

[21:39] <diakopter> anyway, you get the idea

[21:39] <diakopter> rule baloney { rule_template_1( non_term_3 , non_term_5 ) | rule_template_1( non_term_4 , non_term_6 ) }

[21:41] <diakopter> baloney will match { non_term_1 . non_term_2 . opt( non_term_3 ) . non_term_6 }  .. or the other production with 4 & 6

[21:42] <diakopter> man, I messed that last msg up

[21:42] <diakopter> baloney will match { non_term_1 . non_term_2 . opt( non_term_3 ) . non_term_5 } .. or the other production with 4 & 6

[21:43] <diakopter> but not 4&5 nor 3&6

[21:43] <diakopter> basically it's a method of saving typing time when writing rules, though it also will assist in generating/modifying rules at runtime.

[21:44] <diakopter> I didn't show the usage of $_[0] in the lrule, which magically refers to itself (the lrule being formed)

[21:46] <diakopter> no one has questions, I guess

[21:46] <diakopter> :D

[21:48] <diakopter> hm; this implies that *all* the generated opp rules could be parameterized as such, so that they're hot-swappable among each other... (or have another level inserted between them, or have another alternative shape added)

[21:56] <pugs_svnbot> r20921 | diakopter++ | [yap6] make statement rules parametric in StmtList

[22:02] *** masak left
[22:10] *** pjcj joined
[22:15] *** Southen_ joined
[22:26] *** Alias__ left
[22:32] *** donaldh left
[22:32] <pugs_svnbot> r20922 | diakopter++ | [yap6] renamed sbin to bin; pmurias++

[22:49] *** iblechbot left
[22:55] <scrottie> "Unable to read terminal settings in GetControlChars at /home/knoppix/lib/perl5/site_perl/5.8.8/SVK/Util.pm line 195" in 'make' in pugs, checked out last night... after two days of installing dependencies.

[22:55] <scrottie> !%&$

[22:55] <scrottie> is this bit of fragility really appropriate?

[22:58] <scrottie> on the other hand, that doesn't look like the fatal bit.

[22:59] <diakopter> scrottie: someone should've told you... which version of ghc do you have

[22:59] <scrottie> "6.8.0.20070914, for Haskell 98, stage 3 booted by GHC version 6.6.1"

[22:59] <scrottie> is there a "building pugs" FAQ?

[23:00] <diakopter> I'm fairly certain building pugs requires 6.6.1 only

[23:01] <diakopter> I haven't heard of anyone being able to successfully build pugs-as-it-has-been-in-svn for quite a while

[23:01] <diakopter> although I guess moritz_ did it for the evalbot

[23:01] <scrottie> that's too bad... so someone broke the thing then everyone followed suit?

[23:01] <diakopter> well no; ghc moved on

[23:02] <diakopter> and it's difficult to get particular versions of ghc... I think is the primary stopper

[23:02] <scrottie> looks like there is a binary 6.6.1 for linux readily available...

[23:02] <diakopter> ok... certain versions of the hackage packages are required too

[23:03] <scrottie> "hackable packages"?

[23:03] <scrottie> what am I getting myself into here?  what's the scope of the "get pugs running" project?

[23:03] <diakopter> hackage.haskell.org

[23:04] <diakopter> scrottie: I truly don't know...

[23:04] <diakopter> moritz_: are you around

[23:05] <scrottie> how many people besides Larry are working on this thing?

[23:05] <diakopter> Larry doesn't work on pugs

[23:06] <Tene> scrottie: nobody is working on pugs anymore.

[23:06] <scrottie> he's working on a p6 written in pugs' p6 dialect, right?

[23:06] <scrottie> ack

[23:06] *** mjk joined
[23:07] <scrottie> alright.  that explains why people were happier to talk about Ingy's Lightning Talk than Larry's keynote.

[23:07] * scrottie sighs

[23:09] <Tene> The most-active p6 right now is running on parrot.

[23:10] <scrottie> not to gossip, but other than Audrey turning attention to other matters, why did the pugs developers stop work?  some technical reason, or just fatigue?

[23:11] <Tene> scrottie: Audrey was the primary pugs developer.  There wasn't really anyone else actively working on core pugs, as I recall.

[23:12] <scrottie> despite all the commit bits.  no wonder she burnt out.

[23:12] <scrottie> Tene, diakopter, thanks for your replies.

[23:13] <Tene> Those commit bits were pretty useful.  The pugs test suite has been very helpful to the other implementations.

[23:13] <SamB> it turns out that throwing commit bits at people doesn't turn them into core developers

[23:13] <Tene> It's the test suite that rakudo (perl 6 on parrot) is using.

[23:14] * scrottie nods

[23:16] <Tene> What were you trying to get pugs running for?

[23:20] <awwaiid> pugs is still the most feature-complete perl6 implementation, correct?

[23:20] <awwaiid> and the best peforming.

[23:20] <awwaiid> I think those two reasons alone are enough to get it running :)

[23:24] *** rindolf joined
[23:46] <diakopter> TimToady: does \n terminate a statement that ends in a bare block , inside a semi-list?

[23:47] <diakopter> (or does it require a semi-colon b/c it's in a semi-list)

[23:53] <PerlJam> diakopter: that you would ask the question worries me slightly.

[23:53] <diakopter> PerlJam: :( why

[23:54] <cognominal_> TimToady, in S05 there are some "<before"  and "<after"  that should be "<?before"  and "<?after".

[23:54] <diakopter> cognominal_: I think the lack of ? is a shorthand...?

[23:55] <PerlJam> diakopter: part of the point the of new statement termination rules is to be least-surprisey

[23:55] <cognominal_> I thought the ? was the reminder of a sssertion and guaranty of zero-width

[23:56] <cognominal_> I think dropping it is bad

[23:56] *** bacek joined
[23:57] * cognominal_ does a svk pull on the synopses

[23:58] *** japhb left
[23:59] <cognominal_> the stuff starting line 1378  seems to agree with my thinking.

