[00:03] *** timbunce left
[00:04] *** bacek joined
[00:08] *** eternaleye_ left
[00:12] *** timbunce joined
[00:12] *** rindolf left
[00:30] *** Limbic_Region joined
[00:31] *** Alias_ joined
[00:31] *** justatheory joined
[00:33] *** Chillance left
[00:53] *** kolibrie left
[00:53] *** nnunley left
[00:53] *** audreyt left
[00:58] *** nnunley joined
[00:58] *** Maddingue joined
[00:58] *** audreyt joined
[00:58] *** rakudo_svn joined
[01:05] *** Psyche^ joined
[01:07] *** Alias_ left
[01:07] *** Alias_ joined
[01:09] *** Schwern left
[01:10] *** arguile joined
[01:12] *** pasteling joined
[01:13] *** timbunce left
[01:17] *** Patterner left
[01:17] *** Psyche^ is now known as Patterner

[01:20] *** justatheory left
[01:25] *** elmex left
[01:29] *** Alias_ left
[01:32] *** ikeda left
[01:41] *** Limbic_Region left
[01:48] *** bsb joined
[02:03] *** josh- left
[02:06] *** jeremy-wrk left
[02:27] *** planofish joined
[02:40] *** wknight8111 left
[02:46] *** apeiron_ joined
[02:50] * zamanfou is now away: In the rain my tears are forever lost.

[02:51] *** Schwern joined
[02:54] *** apeiron left
[02:57] *** awwaiid joined
[03:02] *** luqui joined
[03:15] *** Schwern left
[03:16] *** apple-gunkies joined
[03:23] *** pbuetow joined
[03:24] *** Schwern joined
[03:30] *** Schwern left
[03:43] *** pbuetow_ joined
[03:50] *** pbuetow_ left
[03:53] *** pbuetow left
[04:15] *** eternaleye joined
[04:29] *** josh- joined
[04:41] *** eternaleye left
[04:42] *** penk joined
[04:48] <pugs_svn> r21422 | Auzon++ | [gsoc_spectest] added tests to return.t and fudged for rakudo. (added 6 tests)

[04:48] <Auzon> pugs/t/spec/S04-statements/return.t is ready for spectest_regression

[04:57] *** luqui left
[05:13] *** alester joined
[05:25] *** Redeemer joined
[05:26] *** Redeemer left
[05:28] *** Psyche^ joined
[05:41] *** Patterner left
[05:41] *** Psyche^ is now known as Patterner

[05:43] *** Alias_ joined
[05:56] *** josh- left
[05:57] *** josh- joined
[06:16] *** justatheory joined
[06:27] *** justatheory left
[06:27] *** jferrero joined
[06:46] *** polettix joined
[07:02] *** IRCMonkeydsss joined
[07:04] *** IRCMonkeydsss left
[07:16] *** alester left
[07:17] *** barney joined
[07:35] *** cosimo joined
[07:36] *** iblechbot joined
[07:43] *** timbunce joined
[08:10] *** hanekomu joined
[08:11] *** masak joined
[08:13] *** timbunce left
[08:14] *** timbunce joined
[08:16] *** timbunce left
[08:21] *** timbunce joined
[08:29] *** hanekomu left
[08:37] *** timbunce left
[08:42] *** zamanfou is now known as zamanf

[08:43] *** zamanf is now known as zamanfou

[08:56] *** jferrero left
[08:58] *** jferrero joined
[09:00] *** elmex joined
[09:00] *** bacek left
[09:07] <moritz_> re

[09:21] <Patterner> hbock

[09:21] *** baest_ joined
[09:21] *** baest left
[09:25] <rakudo_svn> r29647 | moritz++ | [rakudo] add S04-statements/return.t to spectest_regression, Auzon++

[09:25] <rakudo_svn> r29647 | moritz++ |  +12 pass, +2 skip

[09:34] <masak> moritz_: could you clarify to me what the advantage of fudge-skip is?

[09:35] <moritz_> masak: rakudo doesn't die if a test is skipped and it tests a not-yet-implemented feature ;)

[09:35] <masak> and what happens once the feature is implemented?

[09:35] <moritz_> if it executes, and just yields the wrong results, a TODO is better

[09:35] <moritz_> masak: we run autounfudge.pl ;-)

[09:36] <moritz_> and hope it catches the skips

[09:36] <masak> ah, that's new to me

[09:36] * masak checks out autounfudge.pl

[09:37] <masak> cool!

[09:37] <masak> now the picture is clearer to me

[09:37] <masak> moritz_: thanks

[09:38] *** chris2 joined
[09:38] <moritz_> I just started it, and it found one passing todo test in S02-builtin_data_types/anon_block.t

[09:45] <masak> autounfudge.pl++

[09:47] <moritz_> thanks ;)

[10:13] <pugs_svn> r21423 | moritz++ | [spec] unfudge a few tests for rakudo, autounfudge++

[10:15] <masak> moritz++

[10:17] *** Jedai joined
[10:31] <rakudo_svn> r29648 | moritz++ | [rakudo] add S04-statements/given.t to spectest_regression. Auzon++

[10:31] *** pugs_svn left
[10:31] *** rakudo_svn left
[10:32] *** pugs_svn joined
[10:32] *** rakudo_svn joined
[10:32] <moritz_> perlbot: karma Auzon 

[10:32] <perlbot> Karma for Auzon: 137

[10:44] *** pmurias joined
[10:57] *** barney left
[11:04] *** PZt left
[11:05] *** PZt joined
[11:07] * zamanfou is now away: In the rain my tears are forever lost.

[11:27] *** wknight8111 joined
[11:29] *** barney joined
[11:42] *** kanru joined
[11:42] *** ruoso joined
[11:51] *** iblechbot left
[11:55] *** a-jing joined
[11:55] *** a-jing left
[11:57] *** iblechbot joined
[11:58] <pmurias> ruoso: hi

[11:59] <ruoso> pmurias, hi

[12:00] <pmurias> i'm still unsure if the object representation should store the metadata in a special way

[12:02] <pmurias> ruoso: would a 'use v6' for switching from c to perl6 would be a good idea?

[12:02] <ruoso> would it be easy to parse?

[12:02] <pmurias> if we do it the pythonic way, easy

[12:03] <ruoso> what do you mean? by using indentation?

[12:03] <pmurias> ues

[12:03] <pmurias> * yes

[12:04] <pmurias> did a mockup even

[12:05] <ruoso> seems fine to me

[12:06] <pmurias> should the object representations be interchangable?

[12:09] *** wknight8111 left
[12:10] <ruoso> pmurias, yes... 

[12:10] <ruoso> pmurias, that's the entire point... you should be able to freely interchange WHAT/HOW/REPR

[12:12] <moritz_> @tell Auzon when you fudge files ready for inclusion into spectest_regression, just /msg or @tell me, I'll add them when I'm online again

[12:12] <lambdabot> Consider it noted.

[12:13] <moritz_> @tell Auzon thinking a bit more, just adding a note in the commit log is also enough, since I read all your commit messages (big moritz is watching you ;-)

[12:13] <lambdabot> Consider it noted.

[12:16] *** meppl joined
[12:18] <ruoso> pmurias, the REPR api is not implemented as a completely separated object because that requirement would be too much arbitrary... meaning... if you implement p5hash as a REPR you would have the methods and attributes being managed in a entirely different way...

[12:18] <ruoso> pmurias, and having it as an explicit API makes it easier for non-p6opaque representations to be implemented.

[12:23] <pmurias> under the current design (on the wiki) a metaclass instance needs to be available to interpret the metadata

[12:25] <ruoso> yes... 

[12:25] <ruoso> the metaclass is REPR independent

[12:25] <ruoso> because of the REPR API

[12:25] <pmurias> what i would make sense would be to have the repr api seperated as a set of roles, the most basic providing only attribiute storage and .dispatch forwarding, others stuff as vtables

[12:25] <pmurias> * what i think would

[12:26] <ruoso> pmurias, oh sure... sure... nothingmuch had pointed me that direction before...

[12:26] <moritz_> pmurias: re v6.pm in evalbot: no. Would you benefit from it?

[12:26] <ruoso> I think we lack the level of maturity to properly define this hierarchy

[12:27] <pmurias> moritz_: not really

[12:28] <pmurias> ruoso: we can just split it into basic and advanced for now ;)

[12:28] <ruoso> pmurias, heh...

[12:28] <ruoso> nothingmuch have some ideas about that...

[12:31] *** planofish left
[12:54] <pmurias> what's the multi argument form of ``?

[12:55] <moritz_> in p5?

[12:55] <moritz_> open()

[12:55] <pmurias> in p5, it's unspeced in p6

[12:56] <moritz_> open $handle, '|-', @args or die $!; local $/; my $data = <$handle>; close $handle

[12:57] <moritz_> or something along these lines

[12:57] <moritz_> but I can never remember if it's |- or -|

[13:01] *** kolibrie joined
[13:04] *** cmarcelo joined
[13:04] <pugs_svn> r21424 | pmurias++ | [smop] sm0p.pl turns use v6;p6 code... into frame = q:sm0p {...}

[13:05] *** cmarcelo left
[13:05] <pmurias> moritz_: i just stuck it into a nearby open3

[13:08] *** cmarcelo joined
[13:14] <pugs_svn> r21425 | moritz++ | [spec] fixed POD

[13:16] <pugs_svn> r21426 | moritz++ | [spec] more pod fixes

[13:18] * moritz_ doesn't see a perlfix:sym<\> anywhere in STD.pm

[13:18] <moritz_> is it simply missing? or is it handled as a separate term?

[13:18] <pmurias> you can run STD on \1?

[13:19] <moritz_> how do I do that?

[13:21] <ruoso> pmurias, btw... about repr-api-hierarchy... I think the most basic one is the support for private storage. That should be enough to implement a pure-prototype-oo...

[13:22] <moritz_> moritz@lara:~/pugs/src/perl6>echo '\1;' > test.t

[13:22] <moritz_> moritz@lara:~/pugs/src/perl6>./tryfile test.t 

[13:22] <moritz_> Starting...

[13:22] <moritz_> ############# PARSE FAILED #############

[13:22] <moritz_> ----> <<<HERE>>>\1;

[13:23] *** jferrero left
[13:24] <ruoso> pmurias, I think we should create a directory inside smop to document all the roles then...

[13:26] <pugs_svn> r21427 | pmurias++ | [smop] how a "a basic" p6opaque will look like

[13:27] <masak> ok, so t/spec/S12-class/inheritance-class-methods.t passes in rakudo if I shuffle a few lines around in the class definitions. should I commit that?

[13:27] <moritz_> masak: that depends on wether the order of declarations is being tested for

[13:28] <ruoso> pmurias, are you planning to store the methods and attribute definitions in the storage itself?

[13:28] <pmurias> ruoso: yes creating such a directory would make sense

[13:28] <masak> moritz_: not in this particular test, no

[13:28] <pmurias> ruoso: in the most basic case yes

[13:28] <moritz_> masak: the canonical answer is "yes, but make sure the failing behaviour is tested somewhere"

[13:28] <masak> moritz_: I submitted a bug report for it

[13:28] <masak> but I guess I could write a test as well, if needed

[13:28] <moritz_> masak++

[13:28] <ruoso> pmurias, how would you answer to "defined"?

[13:29] <moritz_> masak: another test is always good ;-)

[13:29] <pmurias> a defined bit maybe ;)?

[13:29] * masak writes the test

[13:29] <ruoso> pmurias, hmm...

[13:29] <pmurias> or just see if the metadata is present like in the previous scheme

[13:30] <ruoso> pmurias, you mean having it as a separated slot from the storage?

[13:30] <pmurias> $objcje.^!private_storage('^METADATA').defined

[13:30] <pmurias> * $object

[13:31] <ruoso> pmurias, I think it might be ok to implement it that way in p6opaque for now...

[13:31] <ruoso> pmurias, but that should not be exposed as the REPR API

[13:32] *** donaldh joined
[13:32] <masak> hm, I use lives_ok when something is syntactically correct but likely to fail, right?

[13:32] <pmurias> exposed meaning part of the REPR API?

[13:32] <ruoso> yes

[13:33] <ruoso> pmurias, and I'm not sure about having "defined" inside "metadata", because you will require every object to have a metadata, even if it's a plain instance of a single proto-object

[13:33] <ruoso> in the previous schema, the object was "defined" when it had a private storage... 

[13:34] <ruoso> and usually the prototypes would only have a metadata storage

[13:34] <ruoso> (considering the restriction to avoid Object.BUILDALL() making undef defined

[13:35] <ruoso> pmurias, what do you think about the following...

[13:35] <ruoso> has Hash $.metadata; has Hash of Hash $.private_storage

[13:39] *** pmurias_ joined
[13:40] <pugs_svn> r21428 | masak++ | [declaration_order.t] new test file testing order-independent class declaration

[13:41] <pugs_svn> r21429 | masak++ | [inheritance-class-methods.t] changed around the order of class declaration

[13:41] <pugs_svn> r21429 | masak++ | due to a bug in rakudo, you must currently declare the base class first

[13:41] <pugs_svn> r21429 | masak++ | the tests now run in rakudo

[13:41] <ruoso> pmurias, then you'd have $obj.^!private_storage.{$package}{'$!a'} and $obj.^!metadata.{'methods'}

[13:41] <ruoso> but we could then expose the API in more detailes...

[13:41] <ruoso> like having a $obj.^!methods that would do the hash lookup directl

[13:41] <moritz_> masak: please use - to separate words in file names

[13:41] <masak> oops

[13:41] <moritz_> masak: we're slowly moving to that conventioin (or at least try to)

[13:42] <masak> moritz_: I remember the thread, but forgot the conclusion :/

[13:42] <masak> I just saw that all the other test files in that folder used _

[13:42] <moritz_> yes :(

[13:43] <ruoso> pmurias, but I would still keep  an "instanceof" to allow "diret delegation to a single prototype" which, afaics, is the most common case...

[13:43] <pugs_svn> r21430 | masak++ | dashes, not underscores

[13:43] <masak> moritz_++

[13:43] <ruoso> pmurias, what do you think?

[13:44] <moritz_> maybe I should change the file names in one big rush in both the test suite and in rakudo's test files

[13:44] <moritz_> but then again I should coordinate that with other people first ;-)

[13:45] * pmurias_ got sucked in some stupid blog posts from chromatics stupidity column

[13:46] * ruoso where where?

[13:46] *** pmurias left
[13:46] *** pmurias_ is now known as pmurias

[13:46] <pmurias> ruoso: where where refered to?

[13:47] * moritz_ suspects http://use.perl.org/~chromatic/journal/

[13:47] <lambdabot> Title: Journal of chromatic (983)

[13:48] <ruoso> pmurias, the blog post?

[13:49] <ruoso> pmurias, but... what do you think on what I've proposed?

[13:49] <pmurias> from planet.perl.org

[13:49] <pmurias> the difference is slight

[13:50] <pmurias> actually it was the top one from planet.parrotcode.org

[13:52] <pmurias> ruoso: i don't think we should add convenience methods to the representation object

[13:53] <ruoso> what do you mean "conveinence"?

[13:53] <ruoso> *convenience

[13:55] <ruoso> pmurias, you mean .^!methods is convenience?

[13:55] <pmurias> methods which don't add any functionality but make some thing more convenient

[13:56] <pmurias> yes

[13:56] <ruoso> pmurias, the convenience in this case is the REPR api

[13:57] <ruoso> the thing is we don't need to force every object repr implementation to implement a full Hash of Hash to access each method...

[13:57] <pmurias> a Hash of Hash is equivalent to a Hash

[13:57] <ruoso> p6opaque is designed in a way that .^!methods looks like convenience, but that might not be the case for other implementations

[13:58] <ruoso> p5blessedhash, for instance...

[13:58] <pmurias> the .^methods as currently wikied wouldn't map to perl5 methods

[13:59] *** TJCRI joined
[13:59] <ruoso> pmurias, I should update .^!methods to be Hash of Array of Method

[13:59] <pmurias> p5blessedhash would have to use AUTOLOAD (or lowlevel equivalent) and redispatch to .how.dispatch

[14:00] <ruoso> pmurias, yes... but .how.dispatch would need to ask the p5blessedhash for the methods 

[14:00] <ruoso> considering you implement a protoobject in p5...

[14:01] <ruoso> I think the point of confusion here is about class-based × prototype-based OO

[14:01] *** jiing joined
[14:01] <pmurias> but the p5blessedhash would store them as any other data

[14:02] <ruoso> pmurias, not really... it would look at the 'ref' the hash has, and look the methods available for that package...

[14:03] <ruoso> then you can have a mixed hierarchy of protoobjects of different representations...

[14:04] <pmurias> p5blessedhash would be incompatible with a lot of metaclasses

[14:04] <ruoso> why would it?

[14:05] <pmurias> if the metaclass has a different dispatching order

[14:06] <ruoso> I didn't get it

[14:06] <ruoso> the "methods storage" is "used by" whatever metaclass 

[14:07] <ruoso> the REPR is not responsible by the dispatch

[14:08] * pmurias has to think

[14:08] <ruoso> the repr delegates the dispatch to the how, the ho looks up the methods using the REPR api, and make the call

[14:08] <ruoso> s/the ho /the how/

[14:10] * ruoso drawing a sequence diagram 

[14:17] * pmurias can only find contrived examples of metaclasses not assuming a method list

[14:19] <pugs_svn> r21431 | ruoso++ | [smop] sequence diagram on the invocation

[14:19] <pugs_svn> r21432 | ruoso++ | [smop] ops, the last call was coming from the wrong object

[14:20] <ruoso> pmurias, take a look at doc/InvocationSequence.png

[14:21] *** jhorwitz joined
[14:22] <ruoso> pmurias, this example would be a pure-prototype-oo case

[14:22] *** alester joined
[14:23] <ruoso> I also need to say that I'm in favour of making the default implementation for P6 prototype-based (by delegation...)

[14:24] <ruoso> because class-based OO makes it very hard to adopt different dispatching mechanisms... Class::C3 × Single inheritance × whatever

[14:24] <ruoso> if we make the protoobject the storage for the metadata, we can have a metaclass instance that is transversal to the entire hierarchy

[14:25] <ruoso> and, more importantly, that can be easily replaced

[14:28] <ruoso> pmurias, do you see what I mean?

[14:28] <pmurias> yes

[14:29] <pmurias> lunch&

[14:31] *** Lorn joined
[14:32] <ruoso> TimToady, would it be ok for a Perl 6 implementation to make the built-in types Prototype-based-by-delegation instead of class-based?

[14:33] <ruoso> TimToady, or is 'class-based OO' part of the spec for the builtin types?

[14:36] <pmurias> TimToady is away for a couple of days for OSCON

[14:37] <moritz_> but I guess he'll have internet access there, from time to time ;-)

[14:38] <moritz_> the last documented design minutes where 2008-06-11 - d'oh

[14:44] *** barney left
[14:51] <ruoso> pmurias, after all the reasoning, what do you think about p6opaque structure?

[14:53] <pmurias> i would go for having .^!methods and .^!attributes (and perhaps .^!metadata) as separate roles with the default implemenation using .^!private_storage

[14:53] *** polettix left
[14:54] *** polettix joined
[14:55] <ruoso> and storing "isa", "does" etc as part of the private_storage?

[14:55] *** hercynium joined
[14:55] <pmurias> unless the representation overides that

[14:57] <ruoso> so you mean making .^!storage.{'^METADATA'}.how as *the* REPR API

[14:57] * ruoso renaming private_storage simply to "storage"...

[14:58] <pmurias> dunno, ^!how might be better

[14:58] *** polettix is now known as ipw2008

[14:58] <ruoso> and so for .^!storage.{'^METADATA'}.{'methods'}, doesn't it...

[14:59] <ruoso> I mean...

[14:59] <ruoso> you said Role, and I agree with you

[14:59] <ruoso> if some representation doesn't support methods, it *doesn't support* them

[14:59] <ruoso> it means that the how needs to fetch the methods elsewhere

[14:59] *** ipw2008 left
[15:00] *** alester left
[15:00] <ruoso> and not that the how is going to traverse some hash to fetch it

[15:00] *** ipw2008 joined
[15:00] <ruoso> or...

[15:00] <ruoso> it might mean that you have a pure-prototype-oo

[15:00] <ruoso> with no delegation

[15:01] <ruoso> and that your methods are slots in the private_storage

[15:01] <ruoso> and your metaclass is aware of that

[15:01] *** ipw2008 left
[15:02] <ruoso> and in that case, this metaclass would be incompatible with other metaclasses

[15:03] <ruoso> which is the syntax to specify the type of the key in a Hash?

[15:04] <pmurias> Hash of something

[15:04] <ruoso> that's for the value

[15:04] <pmurias> ah key

[15:05] <pmurias> my Any %hash{Str};

[15:05] <ruoso> ahm...

[15:05] <ruoso> that doesn't solve my problem...

[15:05] <pmurias> that's the default hash

[15:05] <ruoso> I have a

[15:05] <ruoso> Hash{Package} of Hash

[15:06] <pmurias> my Hash %hash{Package}

[15:06] <ruoso> but how do I put that into a Signature?

[15:06] <ruoso> (as the return value, I should say)

[15:07] * pmurias is just looking up stuff from s* not from memory

[15:07] * zamanfou is now away: In the rain my tears are forever lost.

[15:08] * ruoso hate public away notices...

[15:08] <pmurias> zamanfou seems to live in a rainy climate

[15:09] <pmurias> ruoso: what's the benefit of not supporting methods if the can be supported (emulated) by storing stuff in private_storage

[15:10] <moritz_> and in a very verbose climate, if (s)he minds telling us all status changes

[15:10] <ruoso> pmurias, because that would make your metaclass incompatible with representations that do have a way to support methods

[15:10] * ruoso lunch &

[15:11] * ruoso brb &

[15:11] <pmurias> what i meant is that the emulation happens at the repr level, the metaclass just calls .^!methods

[15:12] *** cmarcelo left
[15:16] <rakudo_svn> r29654 | moritz++ | [rakudo] fiddled with spectest_regression:

[15:16] <rakudo_svn> r29654 | moritz++ |  - added S12-class/inheritance-class-methods.t, masak++

[15:16] <rakudo_svn> r29654 | moritz++ |  - fixed typo in name of S12-class/anonymous.t, jonathan++ for implementing

[15:16] *** cmarcelo joined
[15:23] <rakudo_svn> r29655 | moritz++ | [rakudo] whitespace fixes in spectest_regression.data

[15:33] *** alester joined
[15:35] <pmurias> fixing my mountain bike&

[15:35] *** pmurias left
[15:44] *** pl0d joined
[15:55] *** justatheory joined
[15:58] *** penk left
[15:58] *** penk joined
[16:01] *** masak left
[16:08] *** justatheory left
[16:19] *** dmq joined
[16:20] *** mofino joined
[16:33] *** Exodist joined
[16:40] *** kanru left
[16:42] *** cls_bsd joined
[16:43] *** TJCRI left
[16:48] *** cls_bsd left
[16:48] *** donaldh left
[16:48] *** justatheory joined
[16:48] *** cls_bsd joined
[16:51] *** kanru joined
[16:53] *** ruoso left
[16:57] *** Exodist left
[17:03] *** justatheory left
[17:04] *** Exodist joined
[17:07] *** alester left
[17:09] *** ruoso joined
[17:16] *** penk left
[17:24] *** BinGOs left
[17:27] *** justatheory joined
[17:27] *** jfredett joined
[17:27] *** nipotaway is now known as nipotan

[17:37] *** alester joined
[17:38] *** rindolf joined
[17:40] *** jfredett_ left
[17:47] *** BinGOs joined
[17:49] <Auzon> thanks moritz_ :)

[17:49] <lambdabot> Auzon: You have 2 new messages. '/msg lambdabot @messages' to read them.

[17:51] <Auzon> moritz_: for some reason, the progress graph isn't updating on rakudo.de (or anywhere else that I've seen)

[17:58] *** Chillance joined
[18:00] <pugs_svn> r21433 | fglock++ | [v6.pm] requires perl 5.8.6

[18:03] *** timbunce joined
[18:10] *** kanru left
[18:26] *** TJCRI joined
[18:26] *** pmurias joined
[18:33] <pmurias> ruoso: do you agree with what i'm proposing?

[18:36] *** meppl left
[18:42] *** kanru joined
[18:55] *** Alias_ left
[18:59] <pmurias> ruoso: i'm not sure myself, so i'll implement it and will see if it's a good scheme

[18:59] <pmurias> does anyone have examples of usefull custom metaclasses?

[19:04] *** apeiron_ is now known as apeiron

[19:07] *** alester left
[19:08] *** justatheory left
[19:15] *** rindolf left
[19:17] <pmurias> j

[19:35] *** donaldh joined
[19:56] *** meppl joined
[19:59] <moritz_> Auzon: yes, pmichaud didn't update spectest-progress.csvn for a while

[20:00] <Auzon> I didn't know if it was that or the cronjob not working

[20:00] <moritz_> svn info languages/perl6/docs/spectest-progress.csv |grep Date

[20:00] <moritz_> Last Changed Date: 2008-07-15 16:01:39 +0200 (Tue, 15 Jul 2008)

[20:08] * pmurias is tempted by a elf rewrite

[20:08] *** justatheory joined
[20:08] <Auzon> Why/

[20:09] *** alester joined
[20:10] <pmurias> beind constantly hindered by little bugs and misdesignes

[20:10] <pmurias> * misdesigns

[20:15] *** meppl left
[20:18] *** meppl joined
[20:33] *** Alias_ joined
[20:36] *** alester left
[20:39] *** alester joined
[20:57] *** jferrero joined
[20:59] *** meppl left
[21:01] *** meppl joined
[21:04] *** Schwern joined
[21:08] *** jhorwitz left
[21:09] *** jferrero left
[21:09] *** jferrero joined
[21:21] *** Alias_ left
[21:21] *** Alias_ joined
[21:23] *** meppl left
[21:25] <pugs_svn> r21434 | Auzon++ | [gsoc_spectest] moved leave.t into spec, changed $?BLOCK to &?BLOCK, other cleanup

[21:26] <Auzon> I could've sworn that Rakudo had a basic implementation of leave.

[21:26] <moritz_> control exceptions are still on the ROADMAP

[21:26] <moritz_> return() being the notable exception

[21:27] *** meppl joined
[21:27] <Auzon> on a side note, leave() is really cool, especially with being able to travel up multiple levels.

[21:28] *** s1n left
[21:28] <Auzon> It's a good way to tangle up code if you're not careful, but most powerful constructs are like that.

[21:29] <moritz_> and &?BLOCK is cool for recursion into anonymous blocks ;-)

[21:29] <Auzon> and @?BLOCK for recursion into the parent block.

[21:29] *** wknight8111 joined
[21:31] <moritz_> .oO( @?BLOCK[(^@?BLOCK).pick].()  )

[21:31] *** s1n joined
[21:32] <Auzon> I can't even imagine what use that would be. Maybe obfu :)

[21:33] <moritz_> none at all, probably

[21:33] <moritz_> but it looks really nice ;-)

[21:34] <Auzon> Why is it (^@?BLOCK) instead of just @?BLOCK ?

[21:34] *** alester left
[21:34] *** alester joined
[21:34] <moritz_> because it's too late and I'm playing chess at the same time ;-)

[21:34] <moritz_>  @?BLOCKS.pick().()

[21:35] <[particle]1> try http://en.wikipedia.org/wiki/Chess_boxing

[21:35] <lambdabot> Title: Chess boxing - Wikipedia, the free encyclopedia

[21:35] *** [particle]1 is now known as [particle]

[21:35] <Auzon> @?BLOCKS.pick().() would be the same as &?BLOCK() for some types of recursion...

[21:35] <moritz_> for some ;-)

[21:37] <Auzon> @?BLOCKS.unique.pick().() # ;)

[21:37] <Auzon> (assuming that .unique does what I mean)

[21:38] <moritz_> I don't think there's a builtin .unique

[21:38] <Auzon> Nope, I checked

[21:38] <moritz_> probably because it encourages usage of the "wrong" data structure

[21:39] <moritz_> does @?BLOCKS contain the lexical or the dynamic calling blocks?

[21:39] <moritz_> ah, lexical, otherwise the ? twigil would be wrong

[21:39] <moritz_> so no need for unique at all

[21:40] <Auzon> also, @?BLOCK[0] === &?BLOCK

[21:40] <moritz_> but that's the same for both lexical and dynamic scopes

[21:41] <Auzon> Ok, makes sense. I guess. ;)

[21:42] <[particle]> @?BLOCKS.pick.clone.()

[21:44] * ruoso going home &

[21:46] <[particle]> who needs closures remembering state, anyway?

[21:46] <moritz_> continuations? ;-)

[21:47] <[particle]> if i'm picking blocks at random, might as well make sure i get consistently inconsistent results

[21:47] <moritz_> when you call srand() first you might get a nice obfu from it

[21:58] *** iblechbot left
[21:58] *** alester left
[22:02] *** ruoso left
[22:02] *** meppl left
[22:02] *** donaldh left
[22:03] *** justatheory left
[22:04] *** alester joined
[22:06] *** Alias__ joined
[22:06] *** meppl joined
[22:09] *** Alias_ left
[22:13] *** alester left
[22:15] *** Jedai left
[22:16] *** TJCRI left
[22:20] *** alester joined
[22:32] *** Alias__ left
[22:32] *** jferrero left
[22:34] *** justatheory joined
[22:41] *** Alias__ joined
[22:45] *** cj joined
[23:10] *** Limbic_Region joined
[23:13] *** pbuetow joined
[23:29] *** Sartak left
[23:33] *** Exodist left
[23:45] *** alester left
[23:49] *** Chillance left
[23:50] *** cmarcelo left
[23:52] *** bacek joined
[23:55] *** chris2 left
[23:55] *** timbunce left
