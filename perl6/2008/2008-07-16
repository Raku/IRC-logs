[00:03] <spinclad> say vray.

[00:08] *** icwiener left
[00:09] *** jfredett_ joined
[00:10] *** armagad left
[00:11] *** donaldh left
[00:12] *** donaldh joined
[00:24] *** jfredett left
[00:26] *** Psyche^ joined
[00:43] *** Patterner left
[00:43] *** Psyche^ is now known as Patterner

[01:01] *** Alias__ left
[01:11] *** LordBr4in left
[01:18] <pugs_svn> r21346 | ruoso++ | [smop] YAY! Finally the memory leaks in test/14 are solved. I still need to implement .^!methods().shift and push for the test to pass, but the memory leak being solved is a giant step already. test/15 now only leaks the two char* based Str, but I should work on it now

[01:20] *** LordBrain joined
[01:22] *** r0bby left
[01:26] <pugs_svn> r21347 | ruoso++ | [smop] fixed memory leak in test/15. We are all clean again

[01:27] <ruoso> valgrind++

[01:29] *** rindolf left
[01:29] *** r0bby joined
[01:32] * ruoso sleep &

[01:36] *** s1n joined
[01:43] *** justatheory left
[02:09] *** alester joined
[02:09] *** cjfields joined
[02:32] *** kanru joined
[02:50] *** nonick_ joined
[02:52] *** cschneid__ joined
[02:52] *** cjfields_ joined
[02:55] *** cjfields left
[02:55] *** cjfields joined
[02:59] *** cschneid__ left
[02:59] *** cschneid__ joined
[03:05] *** PZt left
[03:06] *** cjfields left
[03:07] *** elmex_ joined
[03:11] *** Limbic_Region left
[03:12] *** cjfields_ left
[03:14] *** wknight8111 left
[03:22] *** elmex left
[03:22] <s1n> Auzon: if some of the spectest files that are fudged have fudged section that are actually passing, should they not be fudged anymore? the comment indicates it's "unspecced"

[03:22] *** elmex_ is now known as elmex

[03:23] <Auzon> s1n: all unneeded fudge should be removed. Which file is this?

[03:23] <s1n> range.t

[03:23] <Auzon> which one?

[03:23] <Auzon> There's one in S02 and one in S03

[03:24] <s1n> test 4..7 at least, in S02

[03:24] <s1n> in fact, there are many tests that can be unfudged, so i need to setup a t/ checkout with my svn permissions so i can commit the changes

[03:25] <Auzon> Sounds great :)

[03:25] <Auzon> But yes, they should be unfudged and a comment above them should be listed

[03:25] <s1n> how do i keep a manual checkout in my parrot checkout? i tried a symlink but that caused grief

[03:27] <Auzon> Try removing parrot/languages/perl6/t/spec and checking out pugs/t/spec

[03:27] <s1n> just the spec folder?

[03:27] <Auzon> Yes, because that's all Rakudo checks out in the tests.

[03:28] <Auzon> and put pugs/t/spec in place of the other one, in case I wasn't clear with that

[03:29] <s1n> so move t/spec out, checkout pugs/t/spec to t/?

[03:29] <Auzon> Yeah.

[03:31] <s1n> bleh, i don't know my way around svn well enough, how do i authenticate with it?

[03:31] <s1n> i.e. how do i handle the password?

[03:32] *** cschneid__ left
[03:32] <Auzon> It should ask you automatically when committing

[03:32] <s1n> just provide username during co and password during ci?

[03:33] <Auzon> both during ci, since you don't need it to co

[03:34] <Auzon> It should cache them the first time, which is why I don't remember either ;)

[03:34] <s1n> i'm used to using cvs thru ssh, makes things much easier

[03:36] <s1n> okay, so back to the problem, what does it mean that it's "unspecced"? the tests pass but the comment indicates there's no reason for it to

[03:36] <Auzon> Unspecced means that it's not defined in the spec

[03:37] <s1n> should i mark it with a TODO or not unfudge it?

[03:37] <Auzon> Go ahead and unfudge but put a # NOTE: .perl on Range is unspecced

[03:38] <s1n> is that the format that is typically used "# NOTE: "?

[03:39] <Auzon> # NOTE or # XXX

[03:39] <Auzon> unspecced is the important thing.

[03:39] <s1n> what's the triple X mean?

[03:39] <Auzon> eye catching attention getter

[03:40] <s1n> oh heh

[03:40] <s1n> i usually use FIXME or TODO since they tend to get highlighted by most editors

[03:40] <Auzon> It's also easy to grep for

[03:41] <s1n> i'll go with the XXX, thanks

[03:41] <Auzon> The p6 highlighting on vim catches XXX but not NOTE

[03:41] <Auzon> I think we prefer XXX

[03:41] <s1n> yeah, looks like pmichaud is using that too

[03:45] <s1n> Auzon: what's the easiest way to fudge a single test file so I can test just what I changed?

[03:46] <Auzon> You can edit spectest_regression.data to only hold that test and then revert it.

[03:46] <Auzon> I usually do this, though:

[03:47] <Auzon> ../../parrot perl6.pbc `~/pugs/t/spec/fudge rakudo testfile`

[03:47] *** cjfields joined
[03:47] <Auzon> (I'm assuming you're on Linux)

[03:48] <s1n> yeah

[03:50] <s1n> aight, bedtime, i'll finish this up and check it in tomorrow, thanks

[03:56] *** nonick_ left
[03:56] *** PZt joined
[03:58] *** nipotan is now known as nipotaway

[04:10] *** cjfields left
[04:11] *** Alias__ joined
[04:50] *** justatheory joined
[04:57] *** penk joined
[05:28] *** fullermd left
[05:28] *** iblechbot joined
[05:31] <ingy> [particle]: hai

[05:47] *** alester left
[05:54] *** Psyche^ joined
[05:55] *** justatheory left
[06:04] *** donaldh left
[06:04] *** iblechbot left
[06:04] *** donaldh joined
[06:05] *** Patterner left
[06:05] *** Psyche^ is now known as Patterner

[06:28] *** bacek_ joined
[06:34] *** ashizawa joined
[06:44] <moritz_> Auzon, s1n: echo testfile > t/localtest.data; make localtest

[06:45] <moritz_> "testfile" is assumed relative to t/spec/

[06:45] *** bacek left
[06:46] *** icwiener joined
[06:49] *** icwiener left
[06:59] *** barney joined
[07:06] *** masak joined
[07:31] *** mathr2 joined
[07:31] <mathr2> the year by year returns given this fund's financial report do not match the annual returns given in the monthly performance report. any idea why this might be?

[07:32] <moritz_> because the reporting software is b0rked?

[07:32] <mathr2> that is your best guess?

[07:32] <moritz_> anyway, if it's not written in Perl 6 it's off topic here

[07:32] <mathr2> i can show you the documents if you are interested.

[07:33] <mathr2> i can show you the documents if it might help.

[07:35] <moritz_> is any component of your system written in Perl 6?

[07:36] *** jfredett_ left
[07:37] *** jfredett joined
[07:41] <mathr2> why were the americans not outraged when they found out that their civil servant ted kennedy was bypassing the system when he had his brain tumor?

[07:41] <mathr2> what incentive do men like ted kennedy have to improve the system when they themselves are exempt from it?

[07:42] <araujo> ?

[07:42] <mathr2> if your politicians are not going to utilize the very system they are supposed to be serving,

[07:42] <mathr2> if they are free to live in a bubble world above yours

[07:43] <mathr2> then they are not your civil-service politicians but instead your rulers.

[07:43] <mathr2> ted kennedy BYPASSED your health system when he had his brain tumor.

[07:44] <mathr2> why did you americans not FORCE him to utilize the common system?

[07:44] <mathr2> HE WOULD HAVE DIED.

[07:48] <mathr2> At least in the corporate world executives have performance incentive salaries.

[07:48] <moritz_> politics are also off-topic in #perl6

[07:48] <araujo> there is a channel for it

[07:48] <mathr2> They are TIED to their vehicle of employment. They have an INCENTIVE to it.

[07:48] <araujo> go there

[07:48] <mathr2> But these Ted Kennedy politicians are out of this world!

[07:49] <mathr2> That man would have DIED if it used the system he gave to you!

[07:49] <kane_> hard to argue with a bot...

[07:49] <moritz_> ingy, TimToady: if you are around, could you please ban mathr2?

[07:54] <moritz_> I think we need more ops here :/

[07:55] *** pmurias joined
[07:55] *** barney left
[07:55] <pmurias> ruoso: hi

[08:02] *** masak left
[08:04] *** zamolxes left
[08:06] *** mathr2 left
[08:12] *** meppl joined
[08:13] <pmurias> pugs: &*say.("hi\n");

[08:13] <p6eval> pugs: OUTPUT[hi␤␤]

[08:13] *** rafl left
[08:13] <pmurias> pugs: $*OUT.print("hi\n");

[08:13] <p6eval> pugs: OUTPUT[hi␤]

[08:13] <pmurias> pugs: $*OUT.say("hi");

[08:13] <p6eval> pugs: OUTPUT[hi␤]

[08:21] *** redicaps joined
[08:21] *** redicaps left
[08:45] <pugs_svn> r21348 | moritz++ | [spec] clean up :todo that's now handled by a fudge

[08:49] *** alanhaggai_ joined
[08:55] <pmurias> moritz_: what kind of info should i put into the pixie HACKING file?

[08:55] *** alanhaggai__ joined
[08:56] <pmurias> pixie: say 3;

[08:56] <p6eval> pixie: No output (you need to produce output to STDOUT)

[08:57] *** alanhaggai left
[08:58] <moritz_> pmurias: structure of the expected AST, a (very) short summary of available syntax, how to test/debug it

[08:58] <moritz_> pmurias: and maybe a short note where to start with simple things

[08:58] <pugs_svn> r21349 | pmurias++ | [pixie] renamed brew compile

[09:00] <pmurias> moritz_: would you be satisified with writing the action in, er, perl5?

[09:00] *** pbuetow joined
[09:00] <moritz_> pmurias: probably, erm, yes ;-)

[09:01] <pmurias> available syntax means the syntax which elf or pixie parses?

[09:02] <pmurias> s/elf/STD_red/

[09:02] <moritz_> well, the question is moot if the actions are writtin in perl5 anyway

[09:02] <moritz_> I meant the Perl 6 subset that I could use for actions - haha ;-)

[09:05] *** agentzh left
[09:05] *** agentzh joined
[09:08] <pmurias> moritz_: i'll get working on santiy-04 to rembemer what i blocked on last time

[09:11] *** alanhaggai_ left
[09:15] <ruoso> pmurias, hi...

[09:15] * ruoso just passing around before shutting down the computer to go to work...

[09:16] <ruoso> pmurias, have you seen that I did all the plumbing ;)

[09:28] *** bacek_ left
[09:29] *** jferrero joined
[09:35] *** Alias__ left
[09:36] <pmurias> ruoso: yes

[09:36] <pmurias> ruoso: nice work

[09:46] <pmurias> s/work/job with the plumbing

[09:50] <pugs_svn> r21350 | pmurias++ | [pixie]

[09:50] <pugs_svn> r21350 | pmurias++ | initial HACKING

[09:50] <pugs_svn> r21350 | pmurias++ | fixed to work with refactored elfX

[09:52] <pmurias> moritz_: pixie should now work

[09:52] *** chris2 joined
[09:53] <moritz_> pmurias: OK, I'll take a look

[09:53] <pmurias> moritz_: re simple things you can choose a simple bit of syntax, and backtrack if it gets to complicated ;)

[09:54] <moritz_> pmurias: that's exactly the answer I didn't want ;-)

[09:54] <pmurias> s/to/too/

[09:55] <moritz_> for a beginner it's hard to know which features can be implemented without having to implement a whole bunch of other features first

[09:55] <pmurias> you can just swith to the other features

[09:55] <pmurias> * switch 

[09:55] <pmurias> ;)

[09:55] *** alanhaggai__ is now known as alanhaggai

[09:56] <pmurias> moritz_: it's hard to judge it for me to

[09:57] <moritz_> that's a better answer, albeit not very helpful either ;-)

[09:57] <pmurias> but you can tell me what you want to chose, and i'll see how hard it is

[09:58] <moritz_> ok, I'll do, but I don't know if I'll find tuits today

[09:58] <moritz_> I should really be learning stuff for my exams :(

[09:59] <pmurias> physics?

[09:59] <moritz_> yes

[10:00] *** sri_work joined
[10:00] <araujo> moritz_, just remember everything that goes up, has to come down

[10:01] <moritz_> ?

[10:03] *** pbuetow left
[10:17] * ruoso off to work &

[10:17] *** ruoso left
[10:29] *** revdiablo joined
[10:36] *** sri_work_ joined
[10:53] *** sri_work left
[10:58] *** alanhaggai left
[10:58] *** alanhaggai joined
[11:03] *** fullermd joined
[11:17] *** barney joined
[11:23] *** ruoso joined
[11:23] *** penk left
[11:29] *** iblechbot joined
[11:33] *** zamolxes joined
[11:33] *** zamolxes left
[11:34] *** zamolxes joined
[12:25] *** dduncan joined
[12:29] *** dduncan left
[12:33] *** ruoso left
[12:36] *** masak joined
[12:45] *** ruoso joined
[12:46] *** alester joined
[12:47] *** alester left
[13:05] *** alanhaggai left
[13:07] *** awwaiid left
[13:12] *** awwaiid joined
[13:19] *** jhorwitz joined
[13:25] *** Jedai joined
[13:40] *** jferrero left
[13:47] *** rindolf joined
[13:48] *** Exodist joined
[13:57] *** alanhaggai joined
[14:14] *** hercynium joined
[14:19] *** ashizawa left
[14:23] *** zamolxes left
[14:31] <pmurias> ruoso: why can't REFERENCE and RELEASE be handled by MESSAGE?

[14:31] *** sri_work_ left
[14:31] <ruoso> hmmm... I thought that as it would be called all the time, it would be nice to have it as part of the responder interface

[14:32] <pmurias> so it's an optimalisation

[14:32] <pmurias> ?

[14:34] <ruoso> yes... it could be made inside MESSAGE as well... but it looked too pessimistic to have to do an additional compairision instead of just invoking a function pointe

[14:41] <pmurias> it can always changed when our method calls are as faster than function pointer invocation ;)

[14:48] <ruoso> hehe

[15:09] *** cjfields joined
[15:12] *** chris2_ joined
[15:14] *** chris2 left
[15:14] *** chris2_ is now known as chris2

[15:17] *** pmurias left
[15:23] *** masak left
[15:25] *** pbuetow joined
[15:45] *** ashleyb joined
[15:59] *** armagad joined
[16:00] *** justatheory joined
[16:18] *** mj41_ joined
[16:18] *** barney left
[16:21] *** iblechbot left
[16:21] *** iblechbot joined
[16:23] *** justatheory left
[16:30] *** icwiener joined
[16:33] *** mj41 left
[16:33] *** cschneid joined
[16:34] *** cschneid left
[16:39] *** icwiener left
[16:39] *** Alias_ joined
[16:40] *** icwiener joined
[16:44] <pugs_svn> r21351 | moritz++ | [irclog] removed obsolete Net::IRC based bot, and updated README a tiny bit

[16:59] *** ashleyb left
[17:01] *** donaldh left
[17:04] *** kanru left
[17:04] *** pmurias joined
[17:05] <pmurias> * it can always be changed when our method calls are faster the function pointer invocation

[17:06] * pmurias wonders why his english ends up so horrible on irc

[17:06] <spinclad> optimize them enough and it's bound to happen

[17:06] <spinclad> (both english and faster calls)

[17:06] <moritz_> lol

[17:07] *** masak joined
[17:07] *** nipotaway is now known as nipotan

[17:23] *** gbacon left
[17:26] *** LordBr4in joined
[17:26] *** LordBrain left
[17:30] *** kanru joined
[17:36] *** ashleyb joined
[17:38] *** justatheory joined
[17:40] *** gbacon joined
[17:47] *** ruoso left
[17:49] *** hercynium left
[17:55] <pmurias> TimToady: can i add a use v6 to Cursor.pm and STD.pm so nicer error are thrown if perl5 attempts to run them?

[17:57] <TimToady> um Cursor.pm is p5

[17:57] <TimToady> actually, there is no Cursor.pm right now

[17:58] <TimToady> or shouldn't be

[17:58] <TimToady> that Cursor.pm is way obsolete

[17:58] <pmurias> there is one for sure in the repo i'm using

[17:59] <TimToady> STD.pm shouldn't need it because it starts out with 'grammar', but if you add one, be sure to make gimme5 remove it.  :)

[17:59] <TimToady> it's ancient

[17:59] <TimToady> and wrong it any number of ways

[18:00] <TimToady> we need to backtranslate Cursor.pmc to a P6 Cursor.pm that can produce Cursor.pmc via p6-to-p5 translation

[18:00] <pugs_svn> r21352 | pmurias++ | [STD] another [@list] hack to make chaining operators produce proper ast

[18:01] <pmurias> TimToady: we need a proper p6-to-p5 translator

[18:01] <TimToady> indeed, that's the next step; replace gimme5 with a STD-based translator

[18:02] <TimToady> well, not replace, but overlay

[18:02] <TimToady> since we need to keep gimme5 for bootstrapping

[18:03] <TimToady> also need to do some refactoring of namespaces so that "use Perl" means use the language, not the grammar

[18:03] <TimToady> maybe "use STD::Perl" pulls in the grammar

[18:03] <TimToady> or maybe that's backwards...

[18:04] <TimToady> anyway, we need to distinguish the operations from the standpoint of the user

[18:04] <TimToady> they can't both be "use Perl".

[18:05] <pmurias> it's the same issue with use Python, and other language changing modules

[18:05] <TimToady> indeed

[18:05] <TimToady> which is why we need to figure out the policy now

[18:06] <TimToady> possibly even by having a "use" variant that does the other thing, whichever that is

[18:06] <moritz_> use Perl :syntax; ?

[18:06] <TimToady> blech

[18:07] <TimToady> I mean a different keyword even

[18:07] <[particle]> like 'load'

[18:07] <TimToady> lang Perl;

[18:07] <[particle]> lang++

[18:07] <TimToady> except

[18:07] <TimToady> that ordinary "use" is also expected to mutate langauges

[18:07] <TimToady> *languages

[18:08] <TimToady> so it seems like "use Perl" should be a mutator, and the derives from could perhaps just be intuited from the "is" declarations

[18:09] <TimToady> so "grammar STD::Perl is STD::Cursor" would automatically pull in STD::Cursor without a use, maybe

[18:09] <moritz_> do we have `require' in perl 6?

[18:09] <TimToady> though we had trouble with "use base" because of htat

[18:09] <TimToady> yes

[18:10] <moritz_> why not just make require Perl; load the Perl module, and 'use Perl;' be the mutator?

[18:10] <pmurias> require works at runtime

[18:11] <moritz_> that's a good reason ;)

[18:14] <TimToady> the problem with auto-using or auto-requiring is that you don't know if there's really a module of that name out there or some other module is expected to define the base class, which is why "use base" fails silently if it can't require

[18:15] <TimToady> on the other hand, class names used in Perl 6 are generally required to be defined first

[18:15] <TimToady> so maybe we can just autouse the class if it's not predefined

[18:15] <pmurias> we can always use "use Perl::Grammar"

[18:15] <TimToady> that's not right

[18:16] <TimToady> "Grammar" should be top level

[18:16] <TimToady> otherwise what is the name of Grammar::Perl::Regex?

[18:16] <TimToady> or STD::Perl::Regex, or whatever we end up with

[18:17] <TimToady> (I like the psychology of using STD for the standard language, but it doesn't generalize)

[18:17] <pmurias> use STD::Python?

[18:17] <TimToady> if it *is* the STD Python, that's fine :)

[18:17] <TimToady> but I think we'll have people fighting over the STD space in that case

[18:17] *** justatheory left
[18:18] <TimToady> (though only if they implement Python in the Perl namespace :)

[18:18] <TimToady> since otherwise it's just "use Python" as a black box

[18:20] <pmurias> also we will likely also have a Perl grammar for using in regexes, for matching if something is in Perl

[18:20] <TimToady> if we have other languages *choosing* to implement their parsers in STD space, then maybe it really is a Sexually Transmitted Disease :)

[18:20] <TimToady> pmurias: I don't follow that

[18:21] <TimToady> are you referring to the language inside regex closures?

[18:21] <TimToady> that's just an anonymous language to the regex, pulled out of $+LANG

[18:22] <pmurias> something like: if /<Perl.comp_unit>|<Python.comp_unit>/ { say '$_ is in either Perl or Python' }

[18:23] <spinclad> ( 'use Perl <Grammar Actions>' ? )

[18:24] <TimToady> currently written something like / [:lang(Perl) <comp_unit>] | [:lang(Python) <comp_unit>] /

[18:24] <pmurias> the current STD would choke on syntax errors if run on something which is not a perl string

[18:24] <TimToady> no, "use Perl" should mean exclusively that you want to use the language, not the grammar, I think

[18:25] <TimToady> you've just said that a parser will choke on anything it doesn't recognize, or did you mean something more?

[18:25] <spinclad> so 'use Grammar::Intercal' and 'use Grammar::Intercal::Actions' ?

[18:26] <spinclad> s/Grammar/STD/

[18:26] <spinclad> :)

[18:26] <pmurias> TimToady: yes

[18:27] <pmurias> will normal regexes would just fail

[18:27] <TimToady> what's "normal"?

[18:28] <pmurias> s/will/while/

[18:28] <TimToady> currently STD would handle the "normal" regex above if you define the Python grammar

[18:28] <TimToady> [:lang(Perl) <comp_unit>] | [:lang(Python) <comp_unit>] /

[18:28] <TimToady> that's why I put slashes around it

[18:29] <TimToady> but it'll probably end up :lang(STD::Perl) instead

[18:30] <TimToady> next question is whether it's STD::Perl::Regex or just STD::Regex

[18:30] <TimToady> since "STD" already implies a P6 namespace

[18:30] <pmurias> want the perl6 comp_unit die when it encouters a syntax error

[18:30] <TimToady> then other languages could use STD::Regex without having to type the dreaded P word

[18:31] <pmurias> * won't

[18:31] <TimToady> sure, but after a :lang(STD::Python) it won't be calling perl 6's <comp_unit>

[18:31] <Auzon> perl6: my $tracker = 0; for (1..5) { next if 2 < $_ < 4; $tracker = $_;}; say $tracker;

[18:31] <p6eval> elf 21352: OUTPUT[Undefined subroutine &GLOBAL::next called at (eval 121) line 6.␤ at ./elf_f line 3861␤]

[18:31] <p6eval> ..pugs: OUTPUT[5␤]

[18:31] <p6eval> ..rakudo 29525: OUTPUT[Could not find non-existent sub if␤current instr.: '_block25' pc 207 (EVAL_14:66)␤]

[18:32] <moritz_> rakudo does neither "next" nor "if" as an statement modifier

[18:32] <Auzon> The test says it should be 3, and I don't see why.

[18:33] <moritz_> uhm, shouldn't it be 5?

[18:33] <Auzon> Yeah. I agree.

[18:33] <pmurias> by normal i meant like things in Regex::Common, which just fail if the don't match something instead of throwing an error

[18:33] <TimToady> perhaps it should be unless

[18:33] <Auzon> TimToady: That's what the comments seem to indicate

[18:34] <moritz_> or just '$tracker = $_ if 2 < $_ < 4'

[18:34] <moritz_> then it's clear without any break() logic

[18:34] <Auzon> It's specifically testing next.

[18:34] <moritz_> s/break/next/

[18:34] <moritz_> oh

[18:34] <moritz_> ok ;-)

[18:34] <Auzon> t/statements/next.t ;)

[18:34] <Auzon> Sorry, didn't give you context there

[18:34] * moritz_ thought it was a test for chained comparison ;-)

[18:36] <moritz_> somehow I don't think it's a very good test at all ;-)

[18:36] <TimToady> pmurias: so perhaps the relationship of comp_unit with panic is special

[18:36] <Auzon> moritz_: It's the first linked test below "Loop Statements" in S04: http://perlcabal.org/syn/S04.html#Loop_statements

[18:36] <lambdabot> Title: S04

[18:37] <TimToady> rather than scoping the parse failure to //, scope it to the comp_unit

[18:37] <TimToady> I'll have to think about that

[18:38] <TimToady> ordinarily you might just write / [:lang(STD::Perl) <comp_unit>] / or / [:lang(STD::Python) <comp_unit>] / currently

[18:38] <TimToady> but the | form would do longest token matching across both languages :)

[18:39] *** justatheory joined
[18:39] <pmurias> don't i have to wrap it in try {} to catch die's

[18:39] *** perlbot joined
[18:40] <TimToady> the p5 impl of STD is actually using eval {} and die to do backtracking control

[18:40] <TimToady> so it's merely a matter of trapping it correctly

[18:40] <TimToady> it pays to know the scope of one's failure :)

[18:41] <moritz_> or the scope of one's death ;-)

[18:42] <TimToady> well, in this case, the scope of what you're trying to kill

[18:42] <TimToady> fortunately, "close" only counts in horseshoes and hand grenades

[18:42] <TimToady> unfortunately, nukes are a type of hand grenade

[18:43] <TimToady> and at the moment, <panic> is more of a nuke...

[18:43] *** Alias_ left
[18:43] <TimToady> we need something more like an Orion Drive

[18:43] <rindolf> Hi all.

[18:43] <rindolf> Hi TimToady 

[18:44] <pmurias> hi rindolf

[18:44] <rindolf> Hi moritz_ 

[18:44] <rindolf> Hi pmurias 

[18:44] <rindolf> pmurias: I biked today.

[18:44] <rindolf> Was kinda late.

[18:44] <moritz_> .oO( chainsaw fail() ? )

[18:44] <rindolf> But I saw a group of Brazilians in the end of the Park playing and singing.

[18:44] <rindolf> They rocked.

[18:44] <rindolf> Wish I could record them.

[18:47] *** hercynium joined
[18:50] <pmurias> rindolf: don't you carry your cellphone around ;)

[18:50] <pmurias> ?

[18:51] <rindolf> pmurias: I do.

[18:51] <pugs_svn> r21353 | Auzon++ | [gsoc_spectest] moved next.t into spec. Fixed a test case in it.

[18:53] *** chris2 left
[18:54] <pmurias> TimToady: will the perl6->perl5 translator go through an AST stage or directly to perl5?

[19:11] <TimToady> pmurias: well, even gimme5 uses more of an AST approach for the regex parsing, since it blesses nodes that can have methods called on them

[19:15] <rindolf> pmurias: I thought about calling my mom.

[19:15] <rindolf> pmurias: but recording using it would probably be awful quality.

[19:15] <rindolf> And not sure it has a recording.

[19:16] <rindolf> I heard about a girl who got arrested for photographing the Transformers movie using her cellphone.

[19:16] <rindolf> Do they really consider it copyrights-infringement?

[19:20] *** ujwalic joined
[19:20] <moritz_> #perl6-soc in 1/4 h

[19:22] <spinclad> no, they really consider it off-topic...

[19:23] <spinclad> but i've been there myself now and then

[19:23] * Auzon .oO(testing an infinite loop? Seems like a bad idea to me)

[19:24] *** PZt left
[19:24] <moritz_> Auzon: we'll might to have to test for infinite junctions soon :/

[19:25] <Auzon> How can they be infinite? any(1 .. *) ?

[19:26] <moritz_> Auzon: see p6l, thread "Complex planes"

[19:27] <moritz_> Auzon: and yes, through being lazy (and perhaps special cased)

[19:27] <Auzon> Ah, ok

[19:27] <Auzon> Makes sense :)

[19:27] *** PZt joined
[19:28] *** fullermd left
[19:28] <pugs_svn> r21354 | Auzon++ | [gsoc_spectest] smartlink cleanup

[19:29] <spinclad> 2pi * (any(Int) + 1/4)

[19:30] <spinclad> suggests the extension  any(Type)

[19:31] <spinclad> (s/2pi/2*pi/, of course)

[19:31] <Auzon> What would that stringify or numify to?

[19:31] * masak liked 2pi :)

[19:31] <Auzon> masak: my constant 2pi = 2 * pi; # ;)

[19:32] <masak> hehe

[19:32] <Auzon> Or define pi as a postfix operator

[19:32] <spinclad> postfix:<pi>

[19:32] <moritz_> spinclad: any(Type) might not be computable for subsets

[19:33] *** ujwalic left
[19:35] <pmurias> rindolf: intellectual property is arbitrary, but i find it hard to imagine her facing serious consequences

[19:35] <spinclad> in some uses, it might not need to be generable, only matchable:  is(acos(1), 2pi * any(Int))  perhaps

[19:35] <rindolf> pmurias: yes.

[19:35] <rindolf> pmurias: but it's ridiculous.

[19:36] <pmurias> it's hard to destinguish a photograph from a recording

[19:38] <spinclad> but that (matching 2pi * any(Int)) is of course numerically ill-defined (what epsilon?)

[19:38] <spinclad> s/what epsilon/to within &/

[19:48] <masak> it's r29526 on my box, and I can't get rakudo running

[19:49] <masak> can anyone confirm this?

[19:49] <masak> running ./perl6, I get "Class 'Perl6Sub' already registered!"

[19:49] * moritz_ tries

[19:50] <moritz_> ../../parrt perl6.pbc works fine, and ./perl6 segfaults

[19:50] <Auzon> masak: That usually means you need to rebuild parrot.

[19:50] <masak> :/

[19:50] <masak> I just did

[19:50] <moritz_> with a "make realclean"?

[19:50] <Auzon> with make realclean?

[19:50] <moritz_> hehe ;)

[19:50] <masak> moritz_: no. I'll try that

[19:51] <masak> Auzon: no. I'll try that :)

[19:55] <masak> everything works now -- thanks

[19:56] <masak> ok, say I want to read a line from STDIN. do I use =<> ?

[19:57] <masak> my $a = =<>; # gives me a strange "Lexical '$expr' not found" error

[19:59] *** donaldh joined
[19:59] <masak> is rakudo in error here, or should I go read up on a given Sxx ?

[20:00] <moritz_> my $a = =$*IN

[20:00] <masak> ah.

[20:00] <moritz_> <> is an empty < ... > list, I think

[20:00] <moritz_> but I'm not sure

[20:00] <moritz_> or $*IN.readline

[20:01] <masak> my $a = =$*IN # gave me the same error, plus a segfault :/

[20:01] <speckbot> r14563 | larry++ | [S04] another whack at defining consistent closure semantics

[20:01] <masak> ./perl6 -e 'say "hello world"' # gives same error, segfaults

[20:02] <masak> something is in a state of relative b0rkenness here.

[20:02] <moritz_> open a ticket, if you feel like

[20:02] <masak> I feel like. hold on.

[20:03] <masak> ./perl6 -e '1' # error, segfaults

[20:03] <masak> ./perl6 -e '' # enters REPL mode!

[20:03] <masak> now I have two distinct bugs to report :)

[20:04] <moritz_> heh, ../../parrot perl6.pbc -e  0 also goes in REPL mode

[20:04] <masak> perl 5 doesn't

[20:04] <moritz_> so it seems to do a perl5-like truthness test on the argument to -e

[20:06] <masak> truthness test?

[20:06] <masak> seems to me it checks the length of the argument after -e

[20:07] <moritz_> if ($ARGV[-1]) { .... }

[20:07] <moritz_> false for '', '0' 

[20:07] <moritz_> true for "foo", "1", "0;" etc.

[20:08] <masak> ah

[20:09] <masak> would `if (defined $ARGV[-1])` help?

[20:13] <masak> ah, EOBATTERY. seeya.

[20:13] *** masak left
[20:17] <moritz_> (just for backlog: not quite, unless the '-e' is stripped from @ARGV first)

[20:18] *** rindolf left
[20:21] <pmurias> TimToady: can i delete expect_tight_infix?

[20:34] <spinclad> r14563++  # much clearer

[20:37] *** alanhaggai left
[20:39] <TimToady> pmurias: yes, you can delete it

[20:43] *** cjfields left
[20:51] *** wknight8111 joined
[20:54] *** Jedai left
[21:01] *** lambdabot left
[21:02] *** lambdabot joined
[21:03] *** dduncan joined
[21:03] *** lambdabot left
[21:04] *** iblechbot left
[21:04] *** lambdabot joined
[21:08] <pugs_svn> r21355 | pmurias++ | [STD] remove expect_tighter_infix

[21:20] *** Limbic_Region joined
[21:23] *** LordBr4in left
[21:29] *** cjfields joined
[21:46] *** pmurias left
[21:59] *** Lorn left
[22:09] *** meppl left
[22:11] *** lambdabot left
[22:14] *** meppl joined
[22:14] *** cjfields left
[22:14] *** meppl left
[22:15] *** meppl joined
[22:20] *** jferrero joined
[22:28] *** donaldh left
[22:49] *** ruoso joined
[22:58] <speckbot> r14564 | larry++ | typo from Brandon++

[23:16] *** lambdabot joined
[23:17] *** pbuetow left
[23:26] *** elmex left
[23:28] *** bacek joined
[23:43] *** jfredett_ joined
[23:46] *** Exodist left
[23:51] *** jhorwitz left
