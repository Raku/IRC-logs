[00:04] *** lichtkind left
[00:25] <pugs_svn> r19423 | cosimo++ | Testing commit bit

[00:25] *** justatheory joined
[00:48] <pugs_svn> r19424 | lwall++ | Defined .bytes, .codes, .graphs, and .chars

[00:48] <pugs_svn> r19424 | lwall++ | Defined samecase and samebase

[00:48] *** rdice joined
[00:57] <pugs_svn> r19425 | cosimo++ | Refactored substr.t tests into S29-functions\str\substr.t

[00:57] *** nipotaway is now known as nipotan

[01:03] *** polettix joined
[01:03] *** arxc_ joined
[01:05] *** cnhackTNT joined
[01:07] <pugs_svn> r19426 | lwall++ | Add svn props to substr.t

[01:08] <pugs_svn> r19427 | lwall++ | [STD] added ugly p5=> operator

[01:09] *** arxc__ joined
[01:09] *** arxc__ left
[01:12] *** lyokato_ joined
[01:19] *** arxc left
[01:23] *** lunatic joined
[01:26] *** arxc_ left
[01:26] <pugs_svn> r19428 | rhr++ | [Unicode.pm] implement samebase

[01:31] *** arxc joined
[01:34] *** devogon left
[01:38] *** Southen_ joined
[01:43] <TimToady> 'course, samebase is rather misnamed, should really be sameaccent...

[01:47] <rhr> transfer_grapheme_extenders hey nobody will ever use it anyway :)

[01:52] *** luqui left
[01:58] *** Southen left
[02:05] *** rdice left
[02:20] *** Psyche^ joined
[02:23] *** Limbic_Region joined
[02:35] *** Patterner left
[02:35] *** Psyche^ is now known as Patterner

[02:40] *** LimbicRegion joined
[02:44] *** [1]Limbic_Region joined
[02:46] *** Limbic_Region left
[02:46] *** [1]Limbic_Region is now known as Limbic_Region

[02:58] *** LimbicRegion left
[03:02] *** bwisti left
[03:09] *** thoughtpolice left
[03:11] *** alester joined
[03:13] *** penk joined
[03:18] *** pen1 joined
[03:20] *** pen1 left
[03:20] *** pen1 joined
[03:22] *** silug left
[03:30] *** py77 left
[03:36] *** penk left
[03:46] *** cognominal_ left
[03:55] *** Schwern joined
[04:13] *** Schwern left
[04:14] *** Schwern joined
[04:28] *** Limbic_Region left
[04:33] *** alc joined
[04:40] *** justatheory left
[04:43] *** _mjk_ joined
[05:13] *** jferrero left
[05:32] *** _mjk_ left
[05:35] *** nothingmuch left
[05:46] *** Schwern left
[06:22] *** DarkWolf84 left
[06:40] <araujo> hello

[06:41] <araujo> what the '|' does inside a subroutine call subcall(|arg) ?

[06:50] <TimToady> it binds the entire Capture to the variable

[06:50] *** Auzon left
[07:02] <araujo> thanks TimToady 

[07:13] <araujo> TimToady, so, it's a way to say ... pack all these variable into this one variable?

[07:13] <araujo> er, values

[07:17] *** devogon joined
[07:18] <TimToady> it's a way to defer deciding which of the arguments bind to scalar parameters and which to list parameters

[07:18] <araujo> I see

[07:19] <TimToady> for instance, if you want to pass the exact same arguments off to some other function, but you don't know what the exact signature of the other function is.

[07:19] <TimToady> it's kinda like call-by-name but on the whole argument list rather than the individual arguments

[07:20] <araujo> ah, get it

[07:20] <araujo> I was checking some functional-like code, so now it makes sense

[07:38] *** alester left
[07:52] *** cognominal_ joined
[07:57] *** riffraff joined
[08:14] *** asprillia joined
[08:30] *** iblechbot joined
[09:11] *** njbartlett_ left
[09:17] *** polettix left
[09:17] *** frodo72 joined
[09:23] *** frodo72 is now known as polettix

[09:32] *** mattz joined
[09:43] *** Alias_ joined
[09:46] *** riffraff left
[09:55] *** cognominal_ left
[10:01] *** njbartlett_ joined
[10:05] *** ebassi joined
[10:17] *** chris2 joined
[10:22] *** jisom joined
[10:42] *** masak joined
[10:43] *** chacha_chaudhry joined
[10:51] *** Alias_ left
[10:52] *** Alias_ joined
[10:53] *** chacha_chaudhry left
[10:55] <pugs_svn> r19429 | ruoso++ | [smop] Updating the roadmap. The Stage 1 Language for SMOP will be called S1P, readed as "swamp".

[10:57] *** pen1 left
[10:58] <moritz_> ruoso: is the plan to emit C code from kp6 that uses smop as a runtime lib?

[11:00] <ruoso> moritz_, S1P is that...

[11:00] <moritz_> ruoso: ok

[11:00] <ruoso> but I expect it to be used as a interpreter in the full Perl6-on-SMOP

[11:01] <ruoso> actually, s1p will be used to write the built-in types

[11:01] <ruoso> because the built-in types will have to be stack friendly already

[11:02] <ruoso> after that, the best will be to make KP6 to generate a SMOP-Compatible C AST Dump of the parse

[11:03] <ruoso> moritz_, if you take a look at the roadmap you'll see what I mean

[11:03] <moritz_> ruoso: ok

[11:08] *** lyokato_ left
[11:17] *** qmole_ joined
[11:31] *** njbartlett_ left
[11:33] *** cnhackTNT left
[11:36] *** nipotan is now known as nipotaway

[11:41] *** jisom left
[11:42] *** xinming left
[11:43] <ruoso> I've been wondering, SMOP will require each "code block" to build the stack nodes when calling it... how much will it cost in performance terms?

[11:43] <ruoso> is there something that can be simplified or changed to create more room for optimizations?

[11:44] *** asprillia left
[11:45] *** cj_ is now known as cj

[11:49] *** ofer joined
[11:57] *** njbartlett_ joined
[12:07] *** IllvilJa left
[12:13] *** nothingmuch joined
[12:34] <ruoso> are lvalue subroutines return values always evaluated as Scalar?

[12:35] <ruoso> S06 seems to imply that

[12:35] <ruoso> by saying that a tied return would have to implement STORE and FETCH

[12:36] <ruoso> and actually... thinking better... it's the only thing that makes sense...

[12:37] *** polettix left
[12:43] *** ebassi left
[13:00] *** chris2 left
[13:01] *** AzureBOT left
[13:02] <pugs_svn> r19430 | ruoso++ | [smop] As every operator in Perl 6 is a multi sub, lets put multi earlier on the ROADMAP...

[13:10] *** Aankhen`` joined
[13:11] *** dmast joined
[13:13] <pugs_svn> r19431 | ruoso++ | [smop] Detailing a little more the ROADMAP, effectivelly, multi sub is a very important feature for the bootrap

[13:13] <ruoso> lunch &

[13:19] *** dmas1 left
[13:26] *** cmarcelo joined
[13:47] *** root____1 joined
[13:48] *** meppuru joined
[13:56] *** ispy_ joined
[14:03] *** ixolit joined
[14:03] *** dmast left
[14:04] *** dmaster joined
[14:06] <root____1> so quiet...

[14:06] *** njbartlett_ left
[14:07] *** ixolit left
[14:10] <pbuetow> root____1: yes

[14:12] *** lunatic left
[14:30] *** polettix joined
[14:39] *** silug joined
[14:40] *** xyxu joined
[14:41] *** xyxu left
[14:42] *** jhorwitz joined
[14:46] *** rindolf joined
[14:49] *** xinming joined
[14:53] *** iblechbot left
[14:57] *** cognominal_ joined
[14:58] *** njbartlett_ joined
[14:58] *** root____1 left
[15:02] *** jferrero joined
[15:05] *** meppuru left
[15:09] *** alester joined
[15:21] *** devogon left
[15:22] *** devogon joined
[15:22] *** meppuru joined
[15:33] *** marmic left
[15:37] *** marmic joined
[15:54] *** cognominal__ joined
[15:56] <pugs_svn> r19432 | ruoso++ | [smop] smop_lowlevel.h is an optional API (not included by smop.h) for ResponderInterface implementations that wish to use the same lowlevel management (libc malloc, refcount gc and pthread_rwlock) as the default smop objects. smop_lowlevel will use Continuation-Passing-Style for

[15:56] <pugs_svn> ..the DESTROY phase of the objects.

[16:00] * ruoso keeps getting happier and happier on how things are fitting together in SMOP

[16:00] <ruoso> CPS for DESTROYALL made me smile :)

[16:01] *** IllvilJa joined
[16:02] *** cognominal_ left
[16:03] <[particle]> me too :)

[16:04] * ruoso feels that he may be able to learn lisp now ;)

[16:04] <[particle]> sure, while porting it to your new shiny vm :)

[16:04] <ruoso> heh

[16:10] *** meppuru left
[16:11] *** meppuru joined
[16:23] *** cognominal_ joined
[16:28] *** cognominal__ left
[16:29] *** cognominal__ joined
[16:30] *** cognominal_ left
[16:31] *** devogon left
[16:34] *** pmurias joined
[16:35] *** devogon joined
[16:35] *** lisppaste3 left
[16:43] *** lisppaste3 joined
[16:43] *** Psyche^ joined
[16:45] *** rindolf left
[16:46] *** meppuru left
[16:48] *** meppuru joined
[16:51] <pugs_svn> r19433 | ruoso++ | [smop] moving src to old_src, in order to have a fresh start...

[16:52] *** Ashizawa joined
[17:00] *** ahmadz joined
[17:00] *** Ashizawa left
[17:00] *** Patterner left
[17:00] *** Psyche^ is now known as Patterner

[17:00] *** ahmadz left
[17:01] *** mncharity joined
[17:07] *** masak left
[17:08] *** barney joined
[17:10] *** dmaster left
[17:10] <mncharity> I'm going to attempt to quickly create a ruby-based backend for kp6, in the hope of its giving us a bootstrapped kp6 which is usably fast.  Basically by using ruby oo directly, rather than the p5 backend's much heavier approach.  Your questions, comments, and assistance would be most welcome.

[17:10] <pugs_svn> r19434 | ruoso++ | [smop] Starting to port YAP6__CORE__Value* to SMOP__Object*, lowlevel management ported... tests missing...

[17:10] <lambdabot> mncharity: You have 2 new messages. '/msg lambdabot @messages' to read them.

[17:11] <ruoso> mncharity, I wouldn't expect to be able to implement Perl 6 semantics on ruby oo

[17:13] <avar> He can probably use ruby dispatch, no?

[17:13] *** TJCRI joined
[17:13] <mncharity> ruoso: is there some specific aspect you expect to be problematic?  it's my hope that it might be 'good enough' for the bootstrapped kp6, and then for supporting the next kp6 task of working on the grammar.  no?

[17:14] <avar> mncharity: Just implement add_method and the rest of the MOP early:)

[17:14] <mncharity> lol

[17:14] <ruoso> avar, yeah... and end up with another runtime on top of ruby's runtime

[17:14] <ruoso> just like kp6 does

[17:15] <ruoso> does ruby support prototype objects? or anon-classes?

[17:15] *** rdice joined
[17:15] <ruoso> doing it without anon-classes will be very hard

[17:15] <TimToady> you get an anon-class in Ruby every time you do a mixin

[17:16] <TimToady> though I don't know if there's a way to declare one from scratch

[17:17] <pmurias> multi-inheritance?

[17:17] <avar> yes

[17:17] <pmurias> mncharity: why do you prefare ruby to perl5?

[17:18] <mncharity> an anon-class is automagically created when you do something which requires it.  like  some_object.instance_eval("def new_method()...end")

[17:18] <pmurias> * prefere

[17:18] <pmurias> argh, prefer 

[17:19] <mncharity> no multiple inheritance unfortunately, but there is enough introspection to fake it dynamically at runtime (eg, when a method gets added, scurry around adding it to derived classes as needed)

[17:19] * ruoso today really believes that any attempt to implement the Perl6 object system in some non-p6-oriented already existing object system will end up with too much emulation and probably being as slow as kp6

[17:20] <mncharity> an alternate approach is there's a hack to be able to mixin classes rather than modules, but it's a reach-down-into-the-C and noone-really-uses-it-in-production kludge.

[17:20] <pmurias> ruoso: if you do caching you pay the price only when you add a method

[17:20] <mncharity> ruoso: so re, does ruby support prototype objects? or anon-classes? yes

[17:22] <ruoso> I mean... I'm really not stopping you from doing it, but what I'm saying is that from what I've seen so far, you'll end up building a very complex emulation at some point that will give you very poor performance...

[17:23] <ruoso> like, do ruby support continuations and coroutines?

[17:23] <mncharity> re MOP and runtime, I was thinking of doing one level of indirection to handle namespaces - eg, method c_foo() returns the &foo Code object.  Similarly for methods, etc.  ruby oo is faster than p5 oo, so it's not much of a hit.

[17:23] <ruoso> multi dispatch?

[17:23] <ruoso> lazy evaluation of context?

[17:23] <pmurias> ruoso: ruby does continuations

[17:24] <pmurias> (even GNU C does them ;)

[17:24] <mncharity> one might be able to take the MOP approach, and that's something to explore, but the other I know works and gives acceptable performance (from redsix), and I'm afraid I don't really understand the mop yet, so... something for version 2. :)

[17:26] <mncharity> re why ruby instead of p5, ruby oo is faster than p5 oo, and I hope close enough to p6 oo to allow it to be used more or less directly, rather than p5's using it to implement an additional layer.

[17:27] <ruoso> mncharity, as en exercise, take some codes from the kp6 tests

[17:27] <ruoso> and try to figure out which ruby code would execute it

[17:27] <ruoso> but without cheating differently for each test

[17:27] <ruoso> if you cheat, the cheat must be there for every case

[17:28] <mncharity> re multi dispatch, no, there are libraries, but not quite the right thing, but they are small, because the dynamic flavor of ruby makes it easy to implement.  my feeling is the risk there is low.  i'm not sure kp6 even needs multi to bootstrap?  nor for grammar.  but it would be nice to have for the prelude.

[17:28] <[particle]> sounds like test-driven development to me

[17:29] <ruoso> [particle], I mean, exercising the code before trying to write a full kp6 backend

[17:29] <mncharity> not sure if kp6 bootstrap uses multiple inheritance either.

[17:29] <ruoso> s/the code/the ruby code/

[17:29] <ruoso> mncharity, does ruby have roles? if not, you must do it with MI...

[17:30] <mncharity> re lazy, they're libraries.  not sure how critical for kp6 bootstrap.  ruby continuations, while my fuzzy impression is they are not up to smalltalk/scheme standards, are real continuations, not exceptions, like C's.

[17:32] <mncharity> (it would be very very nifty if gnu c did continuations... and there are (or have been) spagetti stack hacks using it... but nothing very widely used... no?)

[17:33] *** cognominal__ left
[17:33] <mncharity> ruoso: redsix used the approach described, and was passing... some not large but non-trivial percent of the pugs t/ tests.

[17:33] *** cognominal_ joined
[17:34] <ruoso> well, I'm just playing devil's advocate here

[17:34] <mncharity> so the project risks don't seem all that great, given the limited objectives of fast bootstrapped kp6, and supporting just the next step using it (grammars).

[17:35] <mncharity> ruoso: very much appreciated :)

[17:35] *** skids joined
[17:36] <mncharity> re risks...  redsix didn't do signature/capture.  so getting enough of them for kp6, both in development pain and performance impact, seems a biggy.

[17:36] <ruoso> mncharity, one thing that might help would be to bootstrap mp6 in ruby before...

[17:37] <ruoso> as a great part of kp6 is compiled by mp6

[17:37] <pmurias> ruoso: i don't think that would help

[17:37] <ruoso> I think if you're planning to bootstrap kp6 it will... 

[17:37] <mncharity> ruoso: ooo, please go on.   my understanding of mp6 is minimal.  what would doing that buy?

[17:38] <pmurias> s/would help/be a good idea/

[17:38] <ruoso> the kp6 grammar is compiled by mp6, at least a big part of it...

[17:38] <avar> 1/w 25

[17:39] <ruoso> mncharity, and also, mp6 doesn't implement a runtime on top of p5 as kp6 does... which is closer to what you want

[17:39] <pmurias> ruoso: kp6 can also compile it

[17:40] <ruoso> pmurias, yeah... but it is still compatible with mp6...

[17:40] <ruoso> and if mncharity is planning to use the ruby runtime as is, mp6 is closer

[17:41] <ruoso> while kp6 enforces the "kp6" runtime

[17:41] <pmurias> but he will need to port it over to kp6 for the compiler to bootstraped

[17:41] <pmurias> * bootstrap

[17:42] <mncharity> i'm not sure the closeness is an issue.  kp6 provides an ast, and the backend-specific emitter can do what it pleases.  though it may have to add an ast munging pass if it needs any non-local information which can't be gathered as part of the emit.

[17:43] <pmurias> mp6 is less pleasant to work on

[17:43] <mncharity> re 'kp6 can also compile it', hmm, there's a point.  so we know mp6 can compile the grammar, because it gets used all the time for that, yes?  are we sure kp6 can compile its grammar?

[17:45] <pmurias> the bootstraped version sort of parsed stuff

[17:45] <mncharity> "sort of"?

[17:45] <pmurias> mncharity: there was one bug

[17:46] <pmurias> in the bootstraped parser

[17:46] <ruoso> pmurias, it doesn't seem to be compiling right now

[17:46] <ruoso> or the makefile is broken

[17:48] <pmurias> mncharity: do you know how to translate := into ruby

[17:48] <pmurias> ?

[17:48] <mncharity> are mp6's requirements from a backend a subset of kp6's?  wrt supported p6 language features

[17:48] *** TJCRI left
[17:49] <pmurias> mncharity: yes

[17:49] <ruoso> pmurias, kp6-kp6 seems to be completely broken right now

[17:49] <ruoso> it doesn't even starts compiling anything

[17:49] <pmurias> mncharity: but a mp6 ruby backend won't give us anything

[17:51] <pmurias> ruoso: perl Makefile.PL --target=KP6-BOOT?

[17:51] <ruoso> ah... ok... I was trying KP6-KP6

[17:51] <ruoso> as the Makefile.PL says

[17:53] <mncharity> re :=, maybe = (s_x = whatever  vs s_x.assign(whatever)), maybe s_x.bind(whatever).  not sure.  don't remember if redsix's Cell (box? - Container-like-thing) did :=.

[17:56] <mncharity> ok, redsix did = for := and ::=, s_x.assign(whatever) (actually (s_x)._(whatever)) for =

[17:58] <ruoso> pmurias, perl script/kp6 -Cperl5rx --noperltidy -o compiled/perl5-kp6-kp6/lib/KindaPerl6/Ast.pm src/KindaPerl6/Ast.pm

[17:58] <ruoso> this is failing

[17:58] <mncharity> well, xS rather than s_x.  new cleaner encoding for the backend, as being pretty for hand writing the code doesn't matter anymore.

[17:58] <pmurias> mncharity: i use $lvalue = $rvalue for assignment in perl5v6 and bind_op("$lvalue",\$rvalue) (from Data::Bind) for :=

[17:59] <mncharity> right, so that's identical.

[17:59] <mncharity> re failing, :(

[18:01] <mncharity> ok, so that's a risk I didn't take seriously enough.  that bootstrapped kp6 might not be working at the moment.

[18:03] <pmurias> mncharity: i don't think it's broken by anything serious

[18:03] <pmurias> just minor bitrot

[18:04] <pmurias> ruoso: it worked here

[18:04] <pugs_svn> r19435 | pmurias++ | [perl5rx] fixed DISPATCH.new into ::DISPATCH

[18:04] <pmurias> no,it's still compiling here :(

[18:05] <mncharity> :) ^H :(

[18:05] <ruoso> mm... in fact it worked now

[18:05] <mncharity> ^H :)

[18:06] <ruoso> I think I had something borked in my working dir

[18:06] <ruoso> but if you try to recompile it it faile

[18:07] <ruoso> anyway... I'm away from kp6 for too much time to understand it :)

[18:08] <mncharity> re 'but if you try to recompile it it faile', so the 'perl script/kp6 -Cperl5rx --noperltidy -o compiled/perl5-kp6-kp6/lib/KindaPerl6/Ast.pm src/KindaPerl6/Ast.pm' runs, but the resulting compiled Ast.pm breaks kp6?

[18:08] <ruoso> no.... I've tried cleaning the kp6-kp6 files and calling make again

[18:08] <ruoso> it failed somewhere else

[18:09] <ruoso> but it seems like a Makefile issue

[18:10] <pmurias> ruoso: doing make forcerecompile;make

[18:11] <pmurias> mncharity: i think someone fill will have fixed when you have the backend complete enough

[18:11] <ruoso> pmurias, I think the makefile depends on files that are in the compiled dir

[18:11] <ruoso> i mean

[18:11] <ruoso> I understand that kp6-kp6 depends on the kp6-mp6 files for the bootstrap

[18:12] <ruoso> but if I remove the compiled/ ... kp6-kp6... it should rebuild correctly

[18:12] <mncharity> hmm, ok.  so kp6-on-mp6 can compile kp6, and the result is known to run small bits of code.  has the result done more?  compiled any of the kp6 files?  passed the kp6 test suite?

[18:12] <mncharity> re 'someone will have fixed', right.  good point.

[18:13] <ruoso> hmmm make test with target kp6-boot is a noop

[18:13] <pmurias> ruoso: the bug wrong parsing of my broke almost every test

[18:16] *** ispy_ left
[18:16] *** cognominal_ left
[18:28] <mncharity> oky.  well, doing much of a ruby backend seems like it would only take a day or two.  if not, something unexpected is going on, the finding of which could be worthwhile in itself.  so I'm still inclined to make it this weekend's project.  and if it turns out kp6 has bootstrap issues, finding them could be useful too.  and no doubt any will get resolved.  no?

[18:29] <mncharity> s/no?/sound plausible?/

[18:29] <pmurias> yes

[18:30] <ruoso> mncharity, one thing I know for sure, bootrapping exercises always fixes a lot of bugs ;) so, yes, it's a very usefull thing

[18:31] <mncharity> re 'bootrapping exercises always fixes a lot of bugs', sigh, right.  :)

[18:31] <mncharity> ok, many thanks for all the help bashing on the idea.

[18:32] <mncharity> it's appreciated.

[18:32] <TimToady> It's particularly useful if you discover missing tests

[18:32] *** meppuru left
[18:33] <ruoso> oh yeah... I probably wrote like 10 or 15 new test cases when bootstrapping kp6

[18:33] <ruoso> as I like to say about TTD

[18:33] <ruoso> TDD

[18:33] <ruoso> a bug report is only successfull if it includes a test case reproducing the bug

[18:35] *** meppuru joined
[18:37] <mncharity> re missing tests, ah, ok.  (wistful chant "don't hit any kp6 bugs, don't hit any...").  re successful, modulo a quibble vis heisenbugs, understood.

[18:40] *** jferrero left
[18:42] <mncharity> I'm hoping to simply be able to do a ruby version of Emit/Perl5.pm.  and otherwise not reach into kp6, or do anything different wrt kp6 than the existing p5 backend does.  effort/risk would seem to shoot up dramatically if that proves not to be the case.

[18:44] <mncharity> hmm, that's a good clarification of objectives.  a new, fast backend, no less capable than the existing p5 backend.  if it turns out that's not sufficient to fully bootstrap, well, that's a separate project.

[18:45] <mncharity> with quite different skill requirements, flavor, etc.

[18:47] *** ispy_ joined
[19:01] * skids wonders if it is his brain broken or Proxy accessors, they return <obj:Proxy> rather than call FETCH

[19:01] <pugs_svn> r19436 | ruoso++ | [smop] Added a goto method to the stack. It will be used to implement Continuation-Passing-Style

[19:04] *** iblechbot joined
[19:10] *** Limbic_Region joined
[19:10] *** __Ace__ joined
[19:19] *** cmarcelo left
[19:31] *** buubot left
[19:32] *** buubot joined
[19:36] *** DarkWolf84 joined
[19:37] *** rdice left
[19:39] *** rdice joined
[19:42] *** Psyche^ joined
[19:43] *** jisom joined
[19:45] *** alc left
[19:47] *** rdice left
[19:57] <ruoso> home &

[19:58] *** Patterner left
[19:58] *** Psyche^ is now known as Patterner

[20:00] *** cmarcelo joined
[20:14] *** ispy_ left
[20:16] *** ruoso left
[20:16] *** jisom left
[20:18] *** riffraff joined
[20:19] *** snearch joined
[20:22] *** ispy_ joined
[20:37] *** rlb3 left
[20:38] *** thoughtpolice joined
[20:43] *** barney left
[20:46] *** snearch left
[20:51] *** Aankhen`` left
[20:51] *** iblechbot_ joined
[20:53] *** araujo left
[21:05] *** iblechbot left
[21:08] *** TJCRI joined
[21:11] *** lunatico joined
[21:31] *** riffraff left
[21:49] *** nipra_ left
[21:49] *** japhb left
[21:52] *** Auzon joined
[22:02] *** ispy_ left
[22:04] *** ashleyb joined
[22:07] *** jhorwitz left
[22:17] *** cognominal_ joined
[22:21] *** japhb joined
[22:31] *** cmarcelo left
[22:56] *** pmurias left
[23:03] *** alester left
[23:03] *** iblechbot_ left
[23:10] *** thoughtpolice left
[23:17] *** c9s joined
[23:27] *** TJCRI left
[23:31] *** bwisti joined
