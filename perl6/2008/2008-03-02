[00:06] <meppl> good night

[00:12] *** meppl left
[00:14] *** Limbic_Region left
[00:16] *** silug left
[00:25] *** devogon left
[00:26] *** Limbic_Region joined
[00:33] *** hugues24 joined
[00:37] *** justatheory joined
[00:40] *** [particle1 joined
[00:43] *** lichtkind left
[00:44] *** [particle2 joined
[00:49] *** aindilis left
[00:57] *** [particle] left
[01:01] *** [particle1 left
[01:05] *** [particle] joined
[01:10] *** aindilis joined
[01:14] *** DaGo left
[01:15] *** [particle2 left
[01:22] *** [particle1 joined
[01:35] *** [particle] left
[01:53] *** silug joined
[01:55] *** lambdabot left
[01:56] *** lambdabot joined
[01:57] *** blindfish left
[02:13] *** justatheory left
[02:23] *** Jedai left
[02:23] *** Jedai joined
[02:41] *** tcliou_ left
[02:44] *** literal joined
[03:54] *** Lorn left
[03:55] *** Limbic_Region left
[04:18] *** RayMagini left
[04:20] *** RayMagini joined
[04:26] *** chacha_chaudhry joined
[04:28] *** ahmadz joined
[04:30] *** ahmadz left
[04:32] *** chacha_chaudhry left
[04:33] *** chacha_chaudhry joined
[05:02] *** chacha_chaudhry left
[05:55] *** silug left
[05:58] *** Schwern left
[06:16] *** jwest-- left
[06:21] *** meteorjay joined
[07:19] *** smtms joined
[07:24] *** cj left
[07:24] *** cj joined
[07:26] *** devogon joined
[07:29] *** arcady left
[07:30] *** drrho joined
[07:45] *** fridim_ left
[07:52] *** silug joined
[08:02] *** Aankhen`` joined
[08:08] *** cj_ joined
[08:13] *** cj left
[08:14] *** iblechbot joined
[08:20] *** IRSeekBot left
[08:23] *** IRSeekBot joined
[08:29] *** silug left
[08:46] *** BinGOs_ is now known as BinGOs

[08:58] *** drbean_ joined
[09:00] *** drbean_ left
[09:08] *** meppl joined
[09:30] *** barney joined
[09:48] *** njbartlett left
[09:48] *** njbartlett joined
[09:57] *** whiteg_ joined
[09:57] *** gugod left
[09:57] *** gugod joined
[10:03] *** BinGOs_ joined
[10:17] *** BinGOs left
[10:17] *** iblechbot left
[10:26] *** silug joined
[10:26] *** iblechbot joined
[10:37] *** chris2 joined
[10:52] *** BinGOs_ is now known as BinGOs

[10:52] *** Chillance left
[10:54] *** lichtkind joined
[10:55] <lichtkind> are min and max arraymethods?

[11:05] *** silug left
[11:36] *** cls_bsd joined
[11:53] *** iblechbot left
[11:55] *** drrho left
[12:06] *** DarkWolf84 joined
[12:22] *** jrockway left
[12:22] *** jrockway joined
[12:23] *** drrho joined
[12:40] <pugs_svnbot> r20043 | putter++ | src/perl6/STD5_run_post: a postprocesser for STD5_run, which improves the yaml output (currently by removing the prior field in class Perl).

[12:40] <pugs_svnbot> r20043 | putter++ | ./STD5_run EXPR '-3+2' | ./STD5_run_post

[12:40] <pugs_svnbot> r20044 | putter++ | src/perl6/STD5_run_post: fix the 'example usage' comment.

[12:40] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20044

[12:40] <lambdabot> Title: Changeset 20044 - Pugs - Trac

[12:44] *** silug joined
[13:00] *** iblechbot joined
[13:18] *** barney left
[13:21] *** chris2 left
[13:45] *** njbartlett left
[13:57] *** aindilis left
[13:57] *** aindilis joined
[14:04] *** jrockway left
[14:04] *** jrockway joined
[14:04] *** DarkWolf84 left
[14:10] *** wknight8111 joined
[14:21] *** Zygo left
[14:21] *** Zygo joined
[14:34] *** jrockway left
[14:56] *** chris2 joined
[15:01] *** turrepurre left
[15:07] *** wknight8111 left
[15:22] <TimToady> lichtkind: yes, but min and max are also binary operators. so [min] and [max] are reduce ops.

[15:23] *** iblechbot_ joined
[15:25] <lichtkind> TimToady: yes than one i remembered thanks i currently updating my perl 6 tutorial :)

[15:25] <lichtkind> TimToady: do you consider perl table as a bad name for an tutorial ?

[15:27] <lichtkind> TimToady: the idea behind it is similiarity to emerald table and also table in a sense that you know where to look for if you look for something specific

[15:29] *** iblechbot left
[16:11] *** simcop2387 left
[16:13] *** kanru joined
[16:13] *** simcop2387 joined
[16:25] *** silug left
[16:29] *** drrho left
[16:43] *** sordith_ joined
[16:44] * sordith_ sits with lichtkind at his perl table and computes

[16:45] *** mncharity joined
[16:50] *** marmic left
[16:51] *** sordith left
[16:54] *** marmic joined
[17:04] <mncharity> Consider "class A { }".

[17:05] <mncharity> The STD story is  token package_declarator:class { <sym> <package_def> {*} }

[17:05] <mncharity> modified by a  proto token package_declarator (:$endsym is context = 'nofat') { }

[17:05] <mncharity> to  token package_declarator:class { 'class' <nofat> <package_def> {*} }.

[17:05] <mncharity> The a parser/compiler takes that {*} or Match, and does something magic.

[17:06] <mncharity> If the user wishes to make class() do something slightly different, say take an extra argument, it's unclear how they should interact with the magic.

[17:07] <mncharity> There's also been a second story, fuzzily in my mind, whose validity or connection to the first I dont' grok.

[17:07] <mncharity> That the prelude has a  macro package_declarator:class is parsed / <sym> <package_def> / {...}.

[17:08] <mncharity> Now, the <block> in <package_def> is spec'ed as "executes at compile time as the body of a method of the metaclass, which is responsible for interpreting the keywords of the class definition".

[17:08] <mncharity> Suggesting that the {...} above rewrites the block, changing say "method m(){}" to something like

[17:08] <mncharity> "./method(m,\(),{});", and then eval'ing it A.

[17:08] *** wknight8111 joined
[17:09] <mncharity> With the second story I understand what a user does to modify 'class'.

[17:09] <mncharity> But... thoughts?

[17:12] <mncharity> In the second story I don't understand how BEGIN{} works.  It is needed to finish parsing the <block> (eg, it might modify the running parser).  But it can also see things earlier in the <block>, which the macro hasn't had a chance to rewrite, or eval in the right place.

[17:13] <mncharity> s/chance/chance yet/

[17:15] *** lisppaste3 left
[17:16] <mncharity> It makes me think of having separate PARSE{} and BEGIN{}, one only able to see the parser, the other... dunno...?

[17:17] <mncharity> s/and then eval'ing it A./and then eval'ing it in A./

[17:30] *** lumi left
[17:31] *** lisppaste3 joined
[17:38] *** whiteg_ is now known as whiteg

[17:43] *** njbartlett joined
[17:47] <mncharity> Perhaps 'method' is a macro, which does the rewrite.  And perhaps BEGIN{} calls a, not magic but unusual, sub which grovels upward over the ast.  An "eval everything which hasn't been, in preparation for BEGIN' sub.   Which seems a bit messy.  Then the package_declarator:class macro doesn't do much.  In the absence of a BEGIN... hmm.

[17:49] *** Psyche^ joined
[17:49] *** Patterner left
[17:49] *** Psyche^ is now known as Patterner

[17:55] *** DarkWolf84 joined
[17:55] *** njbartlett left
[18:03] <TimToady> mncharity: declarations always take effect immediately, so in essence the method reduction is what actually runs the code in the metaclass to install the method; it's not a separate pass from the parser, though that's how the 2nd story makes it seem.

[18:05] <TimToady> lichtkind: 'table' can't really be made to mean that in English.  It's either something you sit in front of, or it's a rectangular layout of data.

[18:06] <TimToady> mncharity: in fact, the way declarations are specced to work is that the name is inserted into the symbol table the moment it is seen, even before we've seen the rest of its declaration.

[18:07] <TimToady> the rest of the declaration just modifies the initial entry

[18:07] <TimToady> whether by (...) signature or "is" traits or by a {...} body

[18:08] <TimToady> sub foo ($x) { foo($x-1) if $x > 0 } is legal self-reference

[18:08] <TimToady> as is sub foo ($x = foo($x-1)) {...}

[18:09] <TimToady> likewise any declared item in a signature can refer to earlier items in the same signature

[18:10] <TimToady> so as soon as you see "method foo" the metaclass must be told that "foo" is a valid method, though not completely defined yet

[18:10] <lichtkind> TimToady: and tablets?

[18:11] <TimToady> well, people will think "pills", unless you say "stone tablets" in which case people will think about the Ten Commandments :)

[18:12] <lichtkind> TimToady: but the emerald tablet were there first and moses did just cheap ripoff

[18:12] <lichtkind> but true the guy from tpf also had problems with it

[18:13] <TimToady> I've never heard of the emerald tablet...

[18:14] <TimToady> sounds like something from Oz

[18:14] <lichtkind> haha

[18:14] <TimToady> maybe it's called something else in our culture?

[18:14] <lichtkind> its at least old as pyramids it from agyptian mystery tradition

[18:15] <lichtkind> written long before moses came to egypt

[18:17] *** pmurias joined
[18:17] <pmurias> lichtkind: tables brings more a referance than a tutorial to mind

[18:17] <lichtkind> pmurias: but thats exactly the direction i heading with that attempt :)

[18:18] <pmurias> * reference

[18:18] <TimToady> I seriously doubt it's as old as Moses

[18:18] <TimToady> feels gnostic to me

[18:18] <lichtkind> yes was also part of gnostic traditian

[18:19] <TimToady> oldest attestation is about 800ad

[18:19] <lichtkind> tradition

[18:19] <lichtkind> shure

[18:20] <lichtkind> but thats only science pint of view

[18:22] <TimToady> the name Hermes also strikes me as rather derivative of greek culture

[18:22] *** silug joined
[18:22] <lichtkind> TimToady: for good reason but thats whyt it was called in theses days

[18:22] <mncharity> hmm.  ok.  so the key question is how things provide context downwards.  eg, a 'class' macro saying "btw, you're now inside a class, not just a module", for all the code which gets run in it's <block>, before the macro gets to touch the control flow again.

[18:22] <lichtkind> TimToady: before these times it was called djehuti

[18:23] <TimToady> well, let me know if you have any luck turning lead into gold...

[18:24] <mncharity> Perhaps things groveling *up* the ast is part of the story?  but has the flavor of an abstraction violation.  perhaps one could constrain it as passing a "blackboard" down, somehow restricting/clarifying what gets scribbled there.

[18:24] <TimToady> mncharity: so far we've been using context vars for things like that, but maybe we need a more official way to pass info down the parse tree

[18:25] <lichtkind> TimToady: i never tried but its easier than many think if you know the works of walter russel

[18:26] <mncharity> macro package_declarator:class is parsed / <sym> <package_def> / has blackboard(:package_type<class>) {...}  ?

[18:27] <mncharity> has gossip

[18:28] <TimToady> is parsed / :my $?CLASS = self.mumble; <sym> <nofat> <package_def> /

[18:28] <TimToady> or some such

[18:29] <TimToady> :my $?CLASS is context = ...

[18:30] <TimToady> hmm, :constant $?CLASS is context =.... maybe

[18:31] <TimToady> something that looks lexically scoped to a user is often dynamically scoped in the compiler

[18:31] <pmurias> TimToady: is $?CLASS constant?

[18:31] <mncharity> is parsed / {do_classy_stuff()} <sym> <nofat> <package_def> / ?  to abstract away the details, else I fear / <sym> <nofat> <package_def> / becoming many lines of opaque code.

[18:31] <TimToady> it's a constant at run time, but the compiler is in the business of determining the value of all sorts of constants, and limiting their scope dynamically

[18:31] <TimToady> (dynamically to the compiler, statically to the user)

[18:33] <TimToady> well, <sym> is just parsing "class", so we haven't even got to the name yet

[18:33] <TimToady> package_def parses that part

[18:33] <TimToady> or something package_def calls...

[18:34] <TimToady> gotta go play drums

[18:34] <TimToady> bbl &

[18:35] <mncharity> yes, but in general, one want's to abstract it away into an api, no?  eg, it's no just :my $?CLASS is context = ..., but :my $?CLASS is context = my $?MODULE is context = my $?PACKAGE is context = ... ;  and that's probably not the end of it all.

[18:36] <mncharity> mmm, play drums.  neat idea.

[18:36] <mncharity> nah.  STD_red for a few hours I think.

[18:36] <lichtkind> where i can find the std.pm ?

[18:37] <mncharity> src/perl6/STD.pm.  Run with  STD5_run.  parses '-42+3'.

[18:37] <mncharity> err, ./STD5_run EXPR -e '-42+3'

[18:38] <mncharity> there's also misc/STD_red, with std.rb, a ruby hand transliteration of STD.pm.

[18:39] <pugs_svnbot> r20045 | pmurias++ | [kp6-mp6like] removed a bit of accidentaly comiited code which didn't compile

[18:39] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20045

[18:39] <lambdabot> Title: Changeset 20045 - Pugs - Trac

[18:42] *** Aankhen`` left
[18:42] *** peeps[work] joined
[18:47] <lichtkind> mncharity: what is std_red?

[18:47] <lichtkind> thanks

[18:47] <lichtkind> (for the answer)

[18:48] <lichtkind> so pugs seems still alive?

[18:48] <mncharity> TimToady: in STD.pm, the paragraph beginning "Also, some rules are named by syntactic category", seems to suggest a infix:sym<+> would get a default "symbol name for the rule" of '+', not 'infix:+'?  which seems odd.

[18:52] <mncharity> lichtkind: STD_red purpose is to be a rapidly available 'more or less full' parser for p6, which runs useably fast, to serve as a temporary support for development of things further down the pipeline (ast's, compilation, and backends).  It differs from the other similar things in:

[18:52] *** Psyche^ joined
[18:53] *** ikeda joined
[18:54] <mncharity> STD5 is more focused on figuring out the true longest-token parse story.  STD_red just fudges, accepts backtracking, and hopes not to lose to much of the language.  parrot 'parse and emit ast', not yet available, plans on doing an incremental converge on STD.  If it existed, and proved to have good coverage, STD_red would probably stay on hold.  Next,

[18:55] *** ikeda left
[18:57] *** ikeda joined
[18:57] <mncharity> ./script/kp6 -Cast-yaml, parses only the small kp6 dialect of p6.  redsix uses a ruby version of pugs's old parser grammar, which is now somewhat out of date.  By itself, redsix would be easier to set up as a temporary support.  But STD_red has fringe benefits of helping somewhat with STD.pm, and being closer to spec, which helps make downstream more spec-ish.

[18:59] <mncharity> And pugs, which can do -CPIL-mumble, but doesn't include oo information, which is needed as soon as we have a running pipeline, to pour prelude and rx_on_re and other p6 code through.

[19:00] <mncharity> maze of twisty little passages.

[19:02] *** silug left
[19:02] *** rindolf joined
[19:03] <mncharity> re alive, in the last few days, it seems the pugs build broke.  i'm unclear on the current story.  if it doesn't converge soon, we'll likely need to revert.  or perhaps someone haskelly can take on what would have helped us many times over the years, duplicating pugs into a stable and development copy.  We were able to fudge the two together early on because we

[19:03] *** Patterner left
[19:03] *** Psyche^ is now known as Patterner

[19:04] *** ikeda left
[19:04] <mncharity> had high-powered hs developers.  It's rather more iffy now.

[19:05] <mncharity> *who could keep the build working, even while doing major changes

[19:07] <lichtkind> ah thanks but pugs itsel dont evolve these days?

[19:07] *** Daveman left
[19:08] *** ikeda joined
[19:08] <mncharity> mostly just "adapt to new versions of ghc" maintenance.

[19:09] <mncharity> i suspect once more of the fuzzy uncertainties about what a p6 implementation should do (which in it's day, pugs was key in pruning back, and now, other implementations are helping with), a hs implementation will wake up again.  there's just so much neat stuff one can do with one.

[19:10] *** njbartlett joined
[19:11] <mncharity> but pugs is, by far, still the closest thing we have to a working p6 implementation.  

[19:13] <mncharity> err, avoiding ambiguity, that's  *still the thing we have which most resembles a working p6 implementation

[19:13] *** Daveman joined
[19:14] <ewilhelm> any interest in mentoring pugs projects for summer of code?

[19:15] <mncharity> ewilhelm: pugs as in haskell pugs, or non-parrot perl 6 in general?

[19:15] <ewilhelm> either

[19:15] *** Chillance joined
[19:16] <ewilhelm> http://www.perlfoundation.org/perl5/index.cgi?gsoc2008

[19:16] <lambdabot> Title: gsoc2008 / Perl 5 Wiki

[19:18] <diakopter> ewilhelm: leave a message for ruoso and/or fglock

[19:19] <mncharity> lichtkind: re closest thing in development space (rather than resemblance), there are currently three interrelated visions, and lots of commone pieces: parrot's rakudo (fully parrot based impl); my decoupling implementation for bootstrap on a big and fast p6 subset and p5/ruby backends; and kp6's bootstrap on a small p6 subset.

[19:19] <mncharity> ewilhelm: looking...

[19:20] <lichtkind> mncharity: word about rakudo is well spread but havent herad recently anything abou tkp6

[19:23] <mncharity> kp6 has lately been less active than it once was.  though pmurias has been working recently to give it a faster p5 backend, hoping to work towards a bootstrap of kp6 on kp6.

[19:23] <mncharity> ewilhelm: ahh, you're looking for mentors as the mentor admin, not as a mentoree. :)

[19:24] <ewilhelm> yep, trying anyway

[19:24] <ewilhelm> we still have to write the application and hope google accepts us

[19:25] <mncharity> hmm.  a task would have to have what characteristics: not critical path; not likely to be rendered obsolete by changing context; cost less time in mentoring than doing it yourself; ... what else?

[19:27] <ewilhelm> well, the student will be working full time for 11 weeks and getting paid

[19:27] <mncharity> concrete deliverables (it would be nice to have people become domain experts on various things, to serve as resources, but that doesn't fit well with the soc model).

[19:28] <ewilhelm> yeah, hopefully you gain a long-term participant

[19:28] <ewilhelm> and one that had to compete to get in

[19:29] *** rimad joined
[19:29] *** innocuous joined
[19:29] <ewilhelm> but the main deliverable is code

[19:29] <mncharity> part of the problem is student time ranges from what passes for software engineers in the world, through people you'd hire at $200K/yr and feel you got a deal.  which makes it hard to target.

[19:30] <ewilhelm> of course, the ideas page is only for suggestions

[19:30] *** ikeda left
[19:30] *** ikeda_ joined
[19:30] <ewilhelm> assume 11 weeks at 40hrs/wk with allowance for learning time

[19:31] <ewilhelm> nevermind that this is $8/hr -- it is an internship

[19:32] <mncharity> perhaps something Perl 6 spec-ish?  there's lots and lots of work which needs to be done.  some (much?) of it not bottlenecked on deciding what the spec should be.

[19:32] <mncharity> *needs to be done to get us to a Perl 6 certification test suite.

[19:33] <ewilhelm> as long as it is code -- google won't buy documentation-only projects

[19:33] <mncharity> either manual groveling or generative testing

[19:33] <mncharity> re doc-only, I'm thinking test cases and infrastructure.  but I'm out of date / unfamiliar with what the current t/spec vision/story is.

[19:34] <ewilhelm> hmm, actually it is $10/hr

[19:35] <ewilhelm> don't get too detailed thinking of project ideas -- you first need to help sell google the idea of "Perl Foundation" as a mentor organization, then you need to sell the student on the idea of working on Perl 6

[19:36] <mncharity> for p6 coding, so much depends on where we are at a few months from now.  we might have a wizzy p6 by end of March, or still be slogging along come summer.

[19:36] <lichtkind> mncharity: i also ask because the things i recognized on pugs werent fixed  in the last 6 month therefore, even nevermind to hype perl 6 i bit careful to write something about pugs for larger publisher  when its not alive

[19:36] * ewilhelm cannot read the future either

[19:37] <mncharity> ah, ok.  yes, for that, no, pugs is not under active development.

[19:38] <ewilhelm> so, would any SOC work "re: perl 6" be better aimed at supporting/testing the language on parrot?

[19:38] <ewilhelm> or is there something that a student would want (and be able) to do from the pugs approach?

[19:39] <lichtkind> mncharity: i also heard that someone is doing something also called p6doc (i maintain the module perl6::Doc)

[19:39] *** ikeda_ left
[19:40] <mncharity> re 'read the future either', my impression, and thus my focus, is it's not actually a technical problem anymore, but a social one.  eg, given a couple of good fte resources, I strongly suspect we could have a pugs-like p6 (on ruby backend, static parser, prelude in p6) by end of month.  so the question is how to find the people, and get them moving in the same direction.

[19:41] <diakopter> ewilhelm: ruoso is working on a possible backend for kp6/mp6 (fglock's kindaperl6 Perl 6 bootstrapping implementation) - see http://www.perlfoundation.org/perl6/index.cgi?smop  for details.  Also see http://www.perlfoundation.org/perl6/index.cgi?kindaperl6

[19:41] <lambdabot> Title: SMOP / Perl 6

[19:42] <mncharity> an old thought was to structure it as a ruby-community hackathon, a few days of low order 10 people.  but current vision looks like there's much more p6 than ruby code, so that's looking less viable now.

[19:43] <lichtkind> mncharity: why you think its so much ruby inside of pugs?

[19:43] <diakopter> ewilhelm: along with what mncharity mentioned, a possible project could be to "complete" (haha) the Perl 6 test suite (which is currently officially maintained in the pugs subversion repository)

[19:43] <lichtkind> mncharity: my focus is strictly on organising and writing docs, since i have project my own

[19:44] <mncharity> clarification: smop will work as a backend for anything.  given some of what it requires from it's compiler (eg, making lexical scopes go away), a kp6 dialect implementation actually seems the less likely path.

[19:44] <diakopter> mncharity: oh; clarification taken

[19:44] <mncharity> but perhaps not less likely by much :)

[19:44] * ewilhelm is just herding cats

[19:44] <lichtkind> which status has SMOP i read the wiki but not learned from it that much

[19:45] <mncharity> lichtkind: "why you think its so much ruby inside of pugs?", I don't understand?

[19:45] <diakopter> ewilhelm: I am sure that the "Perl 6 Test Suite" SoC project would 

[19:45] <diakopter> meet the qualifications

[19:45] <ewilhelm> volunteer to mentor and add your ideas http://www.perlfoundation.org/perl5/index.cgi?gsoc2008_projects

[19:45] <mncharity> re cats, there are some hiding on top of the cabinet

[19:45] <lambdabot> Title: gsoc2008_projects / Perl 5 Wiki

[19:45] <diakopter> and I'm sure you could find someone here to nominally mentor, though the whole channel would end up mentoring, really.

[19:46] <ewilhelm> or just add your ideas

[19:46] <ewilhelm> well, mentors need to be readily available to guide the student through the shark-infested waters of irc/lists

[19:47] <ewilhelm> and to nag them for commits, progress reports

[19:47] <mncharity> sharkbots

[19:47] <diakopter> ewilhelm: good point.

[19:47] <lichtkind> mncharity: why do you think, there is so much ruby code inside of pugs?

[19:48] <mncharity> ok, food.  bbiab.  re  http://www.perlfoundation.org/perl5/index.cgi?gsoc2008_projects , perhaps highlight the deadlines and what is needed for them?

[19:48] <lambdabot> Title: gsoc2008_projects / Perl 5 Wiki

[19:50] <mncharity> lichtkind: there is no ruby inside pugs, the haskell p6 implementation.  there is some ruby in pugs, the repository, mostly as misc/pX/Common/redsix , though also as misc/STD_red and a stillborn ruby backend for kp6, well, because I wrote it. :)  the motivation being

[19:51] <lichtkind> mncharity: may i ask where you are :)

[19:51] <mncharity> it's traditional, and easiest, to implement a new language, and get it bootstrapped, by building on a similar but existing language.  eg, lisp-like languages usually bootstrap from lisp.  ruby is probably the most p6-like existing language.  and also has metaprogramming as a strength, which makes it even more valuable for the task.

[19:52] <mncharity> re where, geographically?  Boston

[19:53] <mncharity> lunch.  bbiab.

[19:53] <lichtkind> allright

[19:54] <lichtkind> mncharity: i ment more something else your vision what you done ar so

[19:54] *** justatheory joined
[19:54] *** Rmann joined
[19:59] <diakopter> ewilhelm: I added 3 entries to the suggested projects list.

[20:04] <lichtkind> ewilhelm:  what cats you are hearding?

[20:05] <mncharity> re where, ah, d'oh.  backends are not a problem.  direct to p5 (simple, fast, ok but not great p6 coverage).  direct to ruby (similar, but uninteresting because).  better ruby backend (fast, surprisingly good coverage).

[20:06] <mncharity> compilation is largely unneeded.  redsix, kp6, we're all basically just emitting from a slightly massaged asts.

[20:07] *** ikeda joined
[20:07] <mncharity> ast's aren't a big deal.  it's a day's or so work to roll infrastructure for a new (with existing spec, and running code) one.  getting it right is very much harder, but unneeded and explicitly not a goal for the exercise.

[20:10] <mncharity> parser's are the gotcha.  we don't have one.  pugs won't talk about oo.  kp6 is very restricted.  parrot doesn't yet export/expose it's ast (though that could change any day now).  STD5.pm is still limited, and is more research than "be infrastructure *now*.  STD_red is a bit less limited, and has the right focus, but needs lots of grunge work.  redsix... looks less 

[20:10] <mncharity> interesting with the prospect of parrot soon, and STD_red maybe.

[20:14] <mncharity> so the development path looks something like 'make the parser bottleneck go away' (finally, after 3-ish years of blockage).  slap an ast on the back.  do dumb a dumb but fast emitter/backend.  start writing p6 objects.  priorities being prelude, and a p6rx_on_p5re engine (probably translated from the p5 yet_another_regex_engine).  bootstrap whenever - doesn't really matter because you're already writing and running ok p6.

[20:18] <mncharity> It's literally under a person week once there's a parser.  the kp6 ast wrapper took a day (albeit without finishing a schema validator).  the ruby backend is basically just copying redsix's with some tweaks.

[20:19] *** ikeda left
[20:19] <ewilhelm> lichtkind: mentors and students -- its like herding cats who herd cats

[20:21] <mncharity> lichtkind: so that's where I'm at.  thinking of do the next task on the STD_red path, 'sync and check against current STD.pm, and add Match constructors', because I don't have a feel for when parrot rakudo's yaml ast will become available (eg, it's rsn, but does that mean Monday, or mid March), and what it will cover.  It's March.  Time to get moving.

[20:22] <mncharity> lunch,really &

[20:58] <pmurias> ewilhelm: will TPF participate in 2008  SoC?

[21:00] *** silug joined
[21:00] *** cmarcelo joined
[21:02] <ewilhelm> pmurias: that's what I'm trying to make happen

[21:02] <ewilhelm> TPF has "not impressed" google in the last few years though

[21:03] <ewilhelm> so I need to demonstrate that we have ourselves organized -- need to show a significant pool of willing mentors and project ideas in our application

[21:03] <ewilhelm> (by next friday)

[21:05] <pmurias> ewilhelm: i would like to work on kp6 as my SoC project

[21:07] <pmurias> shower&

[21:07] <ewilhelm> pmurias: you're a qualifying student?

[21:08] <ewilhelm> check back on ~Mar 17th

[21:17] *** hugues24 left
[21:23] *** wknight8111 left
[21:27] <pmurias> ewilhelm: i hope i'll be ;) (i won't if i fail to get accepted to university)

[21:28] <mncharity> :)

[21:29] *** Psyche^ joined
[21:30] *** ewilhelm left
[21:32] *** rindolf left
[21:45] *** Patterner left
[21:45] *** Psyche^ is now known as Patterner

[21:48] *** DarkWolf84 left
[21:49] *** buchetc joined
[21:51] <lichtkind> is there a sprintf format rule to get dotty number like 44.444 ?

[22:00] <pmurias> %.3f

[22:00] <pugs_svnbot> r20046 | pmurias++ | [kp6-mp6like]

[22:00] <pugs_svnbot> r20046 | pmurias++ | runtime in KindaPerl6::Runtime::MiniPerl6Like

[22:00] <pugs_svnbot> r20046 | pmurias++ | for and .map for arrays support

[22:00] <pugs_svnbot> r20046 | pmurias++ | autobox is used

[22:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20046

[22:00] <lambdabot> Title: Changeset 20046 - Pugs - Trac

[22:02] <pmurias> any interest in a mp6like ROADMAP?

[22:12] <lichtkind> pmurias: thanks a lot

[22:13] <pmurias> your welcome

[22:13] <pugs_svnbot> r20047 | pmurias++ | [kp6-mp6like] &push

[22:13] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20047

[22:13] <lambdabot> Title: Changeset 20047 - Pugs - Trac

[22:14] <lichtkind> pmurias: no thats something different i ment every 3 numbers one dot

[22:17] <lichtkind> found it in the FAQ :)

[22:17] <pmurias> lichtkind: i'm afraid you have to code it yourself

[22:17] <pmurias> lichtkind: how do you do it?

[22:17] <pmurias> i mean the sprintf code

[22:18] <lichtkind> pmurias: in the FAQ where local $_  = shift; 1 while s/^([-+]?\d+)(\d{3})/$1,$2/;  return $_;

[22:18] <lichtkind> which works perfectly

[22:26] <lichtkind> pmurias: i reduced it to 1 while s/^(\d+)(\d{3})/$1.$2/;

[22:27] <lichtkind> good night

[22:27] *** lichtkind left
[22:28] <pmurias> literal: g' night

[22:28] *** pmurias left
[22:31] *** yahooooo joined
[22:39] *** ikeda joined
[22:39] *** ikeda left
[22:47] *** naxxtor left
[22:49] *** ikeda joined
[22:50] *** ikeda left
[22:51] *** peepsalot left
[22:51] *** peepsalot joined
[22:56] *** peeps[work] left
[22:59] *** [particle] joined
[22:59] <pugs_svnbot> r20048 | buchetc++ | [INSTALL] workaround for ghc 6.6.1/cabal 1.1

[22:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20048

[22:59] <lambdabot> Title: Changeset 20048 - Pugs - Trac

[23:03] *** ikeda joined
[23:06] *** ikeda left
[23:14] <pugs_svnbot> r20049 | buchetc++ | [t] S17 implementation checks

[23:14] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20049

[23:14] <lambdabot> Title: Changeset 20049 - Pugs - Trac

[23:17] *** [particle1 left
[23:18] *** buchetc left
[23:19] *** nipotaway is now known as nipotan

[23:21] *** ikeda joined
[23:21] *** ikeda left
[23:25] *** iblechbot_ left
[23:29] *** innocuous left
[23:32] *** ikeda joined
[23:33] *** ikeda left
[23:37] *** ikeda joined
[23:37] *** ikeda left
[23:41] <pugs_svnbot> r20050 | putter++ | misc/STD_red: work-in-progress sync'ing against STD.pm r20027.  And adding more Match()s.  No testing.

[23:41] <pugs_svnbot> r20050 | putter++ | Regression: "use x;" no longer works above the statement rule (ie, in statementlist and UNIT).

[23:41] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20050

[23:42] <lambdabot> Title: Changeset 20050 - Pugs - Trac

[23:44] *** jrockway joined
[23:47] * mncharity will try the 6.6.1 workaround later (doesn't work for me on 6.8.2 either).  buchetc: thanks!

[23:47] *** eternaleye joined
[23:48] <mncharity> btw, that regression is, i'm confident, in my edit,not STD itself.

[23:48] <mncharity> good night all &

[23:48] <meppl> gute nacht

[23:49] <meppl> good night

[23:51] *** meppl left
[23:53] *** ikeda joined
[23:53] *** ikeda left
