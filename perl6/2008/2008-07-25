[00:13] *** lumi left
[00:17] *** alester left
[00:19] <pugs_svn> r21523 | lwall++ | [STD] globalize $DEBUG

[00:24] *** alester joined
[00:26] <pugs_svn> r21524 | Auzon++ | [gsoc_spectest] moved one-pass-parsing test into spec. Added tests for regex creation syntax. (added 11 tests, fudged for rakudo)

[00:26] *** hercynium left
[00:28] <Auzon> both S02-whitespace_and_comments/one-pass-parsing.t and S05-metasyntax/regex.t can be added to spectest_regression

[00:42] *** Alias_ joined
[00:43] *** Alias__ left
[00:50] *** nipotaway is now known as nipotan

[00:56] *** Alias_ left
[00:59] *** elmex left
[01:04] *** ruoso joined
[01:12] *** justatheory left
[01:19] *** sirhc joined
[01:20] *** spencer_ joined
[01:20] *** spencer_ is now known as spencerio

[01:22] *** stephen joined
[01:22] <stephen> :D   ^_^~~~  

[01:23] *** sirhc left
[01:24] <stephen> Ingy dot Net is on the left side of the room.   ^_^~  yah for Ingy.

[01:26] *** ua joined
[01:30] <ua> Hello St. Louis!!  Whoo!  Yeah, Bon Jovi!

[01:33] *** justatheory joined
[01:43] *** agentzh left
[01:49] <meppl> good night

[01:50] *** meppl left
[01:57] *** agentzh joined
[01:57] *** a-jing joined
[01:57] *** a-jing left
[01:58] <ruoso> are we live?

[02:03] *** kanru left
[02:07] *** nothingmuch left
[02:12] *** nothingmuch joined
[02:16] *** stephen left
[02:16] *** alester left
[02:16] *** icwiener_ left
[02:22] *** Limbic_Region left
[02:23] *** alester joined
[02:23] *** alester left
[02:33] *** s1n joined
[02:33] <s1n> rakudo: ^0.1

[02:34] <p6eval> rakudo 29733: RESULT[0..^0.1]

[02:34] <s1n> rakudo: [^0.1]

[02:34] <p6eval> rakudo 29733: RESULT[[0]]

[02:38] *** wknight8111 left
[02:38] *** kanru joined
[02:39] *** spencerio left
[02:40] *** ua left
[02:47] *** timbunce left
[02:48] *** ruoso left
[02:48] *** a-jing joined
[02:49] *** a-jing left
[02:50] *** justatheory left
[02:56] <s1n> rakudo: ("d".."a").perl

[02:56] <p6eval> rakudo 29733: RESULT["\"d\"..\"a\""]

[02:57] <s1n> rakudo: ("d"^.."a").perl

[02:57] <p6eval> rakudo 29733: RESULT["\"d\"^..\"a\""]

[03:21] <pugs_svn> r21525 | s1n++ | [pugs_s02,s03] moved the auto-reversing range tests to the S03-operators section. cleaned up the 

[03:21] <pugs_svn> r21525 | s1n++ | S02-builtin_data_types to mostly test the auto-reversing ranges can be created. filled in a few

[03:21] <pugs_svn> r21525 | s1n++ | single boundry tests that seemed missing.

[03:42] *** pbuetow_ joined
[03:54] *** pbuetow left
[04:18] *** s1n left
[05:08] *** zch051383471952 joined
[05:13] *** xinming_ joined
[05:26] *** xinming left
[05:40] *** xinming joined
[05:48] *** eternaleye joined
[05:52] *** xinming_ left
[05:58] *** Psyche^ joined
[06:00] *** xinming_ joined
[06:10] *** Patterner left
[06:10] *** Psyche^ is now known as Patterner

[06:14] *** xinming left
[06:19] *** stephen joined
[06:40] *** ashizawa joined
[06:42] *** stephen left
[06:47] <pugs_svn> r21526 | moritz++ | [spec] range.t: fixed tests for decreasing ranges, fudged again for rakudo

[06:58] <rakudo_svn> r29734 | moritz++ | [rakudo] three more test files for spectest_regression, Auzon++

[07:12] <moritz_> do we still have \N{CHAR NAME} escapes in Perl 6?

[07:16] *** penk joined
[07:22] *** rho joined
[07:40] *** Mr`Michael joined
[07:41] *** Mr`Michael left
[07:42] *** renormalist joined
[07:46] *** timbunce joined
[07:46] *** _timbunce joined
[07:57] *** eternaleye left
[07:58] *** iblechbot joined
[08:02] *** timbunce left
[08:08] <pugs_svn> r21527 | fglock++ | [PCR] added 'isGraphemeLink'

[08:10] *** masak joined
[08:25] *** renormalist left
[08:27] *** _timbunce left
[08:27] *** timbunce joined
[08:38] <pugs_svn> r21528 | fglock++ | [PCR] unicode fixes

[08:41] *** sri_work left
[08:54] *** explorer__ joined
[08:57] *** ludan joined
[09:00] <pugs_svn> r21529 | fglock++ | [PCR] version 0.34

[09:04] *** meppl joined
[09:15] <pugs_svn> r21530 | fglock++ | [v6.pm] 0.26

[09:16] *** donaldh joined
[09:22] *** cookys joined
[09:25] *** iblechbot left
[09:25] <agentzh> heh, OpenFoundry is upgrading to RoR

[09:27] <moritz_> from what?

[09:27] <agentzh> maybe Perl

[09:27] <agentzh> not sure

[09:27] <moritz_> RubyOnSticks? ;-)

[09:28] <agentzh> heh

[09:33] *** chris2 joined
[09:34] *** lumi joined
[09:34] *** bacek left
[09:36] <Patterner> Ruby is on rails, so you can run over it with a train.

[09:37] * moritz_ is reminded of sun's "data center in a container" which would also fit nicely on a train

[09:39] *** wknight8111 joined
[09:52] *** bacek joined
[10:03] *** pmurias joined
[10:03] *** AzureStone left
[10:07] *** AzureStone joined
[10:07] *** bacek left
[10:09] *** bacek joined
[10:15] *** penk left
[10:17] *** a-jing joined
[10:17] *** a-jing left
[10:23] *** pmurias left
[10:25] *** kanru left
[10:26] *** Jedai joined
[10:29] *** snooper joined
[10:31] *** jferrero left
[10:39] *** Jedai left
[10:39] *** pbuetow_ left
[10:43] *** iblechbot joined
[10:44] *** wknight8111 left
[10:48] *** Jedai joined
[10:51] * zamanfou is now away: In the rain my tears are forever lost.

[10:55] *** bacek_ joined
[10:58] *** elmex joined
[11:13] *** bacek left
[11:16] *** bacek_ left
[11:20] *** wknight8111 joined
[11:25] *** agentzh left
[11:31] *** rindolf joined
[11:40] *** a-jing joined
[11:40] *** a-jing left
[11:43] *** nipotan is now known as nipotaway

[11:47] *** meppl left
[11:48] *** meppl joined
[11:52] *** pmurias joined
[12:00] *** pbuetow_ joined
[12:00] *** ashizawa left
[12:06] *** wknight8111 left
[12:10] *** snooper left
[12:39] *** iblechbot left
[12:47] <pugs_svn> r21531 | pmurias++ | Array.elems and Array.postcircumfix:<[ ]> (called postcircumfix:<{ }> temporarly) work

[12:59] *** explorer__ left
[12:59] *** jferrero joined
[13:00] <pmurias> pugs: $*OUT.print("hello world\n");

[13:00] <p6eval> pugs: OUTPUT[hello world␤]

[13:00] *** pmurias left
[13:04] <masak> perl6: $*OUT.close; $*OUT.print("hello world")

[13:04] <p6eval> elf 21531: OUTPUT[Can't call method "close" on an undefined value at (eval 115) line 3.␤ at ./elf_f line 3861␤]

[13:04] <p6eval> ..pugs: OUTPUT[*** Unsafe function 'IO::close' called under safe mode␤    at /tmp/7CitqEnr4n line 1, column 1-12␤]

[13:04] <p6eval> ..rakudo 29736: OUTPUT[src/io/io.c:1047: failed assertion 'io'␤Backtrace - Obtained 15 stack frames (max trace depth is 32).␤  (unknown)␤    Parrot_confess␤      PIO_putps␤        Parrot_print_p_s␤          (unknown)␤            (unknown)␤              (unknown)␤                (unknown)␤          

[13:04] <p6eval> ..   ...

[13:11] *** orafu joined
[13:11] *** orafu left
[13:15] *** orafu joined
[13:16] *** cai joined
[13:17] *** cai left
[13:21] *** jferrero left
[13:24] *** a-jing joined
[13:24] *** a-jing left
[13:31] *** rho left
[13:32] *** cmarcelo joined
[14:00] <xinming_> perl6: "hello, print".say;

[14:00] <p6eval> elf 21531: OUTPUT[hello, print␤]

[14:00] <p6eval> ..pugs: OUTPUT[hello, print␤]

[14:00] <p6eval> ..rakudo 29736: OUTPUT[hello, print␤]

[14:01] <xinming_> "hello, world!".say.say;

[14:01] <xinming_> perl6: "hello, world!".say.say;

[14:01] <p6eval> elf 21531: OUTPUT[hello, world!␤1␤]

[14:01] <p6eval> ..pugs: OUTPUT[hello, world!␤1␤]

[14:01] <p6eval> ..rakudo 29736: OUTPUT[hello, world!␤1␤]

[14:02] *** ruoso joined
[14:08] *** iblechbot joined
[14:10] *** rdice joined
[14:21] <pugs_svn> r21532 | ruoso++ | [smop] test/14 passing finally! the object was being held in the namespace.

[14:22] <pugs_svn> r21533 | ruoso++ | [smop] p6opaque mostly done, other features will be added as needed

[14:23] *** Lorn left
[14:23] *** Lorn joined
[14:25] *** peeps[work] joined
[14:29] *** jferrero joined
[14:30] *** jferrero left
[14:47] *** justatheory joined
[14:49] *** Chillance joined
[14:50] <pugs_svn> r21534 | fglock++ | [v6.pm] minor fixed in ranges, error messages

[14:59] *** hercynium joined
[15:01] <pugs_svn> r21535 | fglock++ | [v6.pm] added error msg

[15:04] *** ebassi joined
[15:10] *** justatheory left
[15:13] *** zch051383471952 left
[15:17] *** kanru joined
[15:20] *** timbunce left
[15:20] *** Exodist joined
[15:21] *** jferrero joined
[15:21] <pugs_svn> r21536 | fglock++ | [v6.pm] more SKIP Unicode tests from cpan-tester reports

[15:22] *** rindolf left
[15:22] <pugs_svn> r21537 | fglock++ | [v6.pm] 0.027

[15:27] *** araujo left
[15:50] *** Chillance left
[15:58] <rakudo_svn> r29737 | pmichaud++ | [rakudo]: spectest-progress.csv update: 107 files, 1845 passing, 56 failing

[16:01] *** timbunce joined
[16:05] *** meppl left
[16:07] *** meppl joined
[16:09] *** ebassi left
[16:17] <xinming_> TimToady: ping

[16:19] <xinming_> @tell TimToady hi, Since we can consider [infix_op] <a b c>; and raw version of foldl in haskell, Will there be a foldr version in perl 6? :-)

[16:19] <lambdabot> Consider it noted.

[16:21] <xinming_> @tell TimToady Will we be able to asign some dynamic attr to the reduce operator? eg. [infix_op]:l <a b c>; or [infix_op]:r <a b c>;

[16:21] <lambdabot> Consider it noted.

[16:23] <rhr> reduce ops take their assocativity from the infix op inside

[16:23] <xinming_> @tell TimToady Or will there be a postfix version of reduce op?

[16:23] <lambdabot> Consider it noted.

[16:24] <xinming_> rhr: How do you think of this? [-] (1 .. 3);

[16:24] <rhr> so you'd have to define another infix op to change the assoc

[16:25] <xinming_> rhr: But In my understanding, That's not the best practise. :-)

[16:25] <rhr> infix:<-> is left assoc

[16:26] *** donaldh left
[16:27] <xinming_> rhr: yes, so, [-] (1 .. 3) will be ((1 - 2) - 3); But how about people wants to express it with (1 - (2 - 3)) ?

[16:28] <xinming_> I don't know if there will be confliction with current syntax for (1 .. 3) [-]; version

[16:28] *** pmurias joined
[16:28] <pmurias> ruoso: hi

[16:29] <rhr> something like: multi infix:<-r> is assoc<right> ($a, $b) { $a - $b }; [-r] 1..3

[16:30] <rhr> S06:1760

[16:32] <xinming_> rhr: In pod source?

[16:32] <xinming_> I think it is.

[16:33] <rhr> http://irclog.perlgeek.de/perl6/today makes it a link :)

[16:33] <lambdabot> Title: IRC log for #perl6, 2008-07-25

[16:40] *** justatheory joined
[16:45] *** eternaleye joined
[16:46] *** alester joined
[16:54] *** iblechbot left
[17:00] <pugs_svn> r21538 | lwall++ | [is-rw.t] s/\xa0/\x20/g

[17:04] *** a-jing joined
[17:04] *** a-jing left
[17:05] <TimToady> I think such rare cases should me mediated by something like foldr {$^a - $^b}, 1,2,3

[17:05] <lambdabot> TimToady: You have 3 new messages. '/msg lambdabot @messages' to read them.

[17:05] <TimToady> @messages

[17:05] <lambdabot> xinming_ said 45m 37s ago: hi, Since we can consider [infix_op] <a b c>; and raw version of foldl in haskell, Will there be a foldr version in perl 6? :-)

[17:05] <lambdabot> xinming_ said 43m 33s ago: Will we be able to asign some dynamic attr to the reduce operator? eg. [infix_op]:l <a b c>; or [infix_op]:r <a b c>;

[17:05] <lambdabot> xinming_ said 42m 14s ago: Or will there be a postfix version of reduce op?

[17:07] <TimToady> or rreduce, or something human readable

[17:08] <TimToady> either that, or there should be a metaoperator that reverses any infix operator

[17:08] <TimToady> and then you could say [rev-] reverse 1,2,3

[17:09] <TimToady> but I think a higher-order function is much better than complicating the operator syntax for something that will be rarely used

[17:11] <TimToady> the point of huffman coding is not just to make everything short

[17:14] <xinming_> hmm, Ok, thanks, Why I think about this is because of the consistence. BTW, I think we have an op which toggles the association might be the best sollution to me.

[17:14] <xinming_> But thanks anyway for your explaination.

[17:15] *** jferrero left
[17:17] <pmurias> xinming_: you mean an metaop to toggle associativity?

[17:18] <xinming_> pmurias: yes.

[17:19] <xinming_> But I know that we normally don't need to toggle this. So, what TimToady said is correct. It's a rare case.

[17:20] *** alester left
[17:23] *** eternaleye left
[17:23] *** timbunce left
[17:31] *** timbunce joined
[17:33] *** timbunce left
[17:34] *** alester joined
[17:34] *** rindolf joined
[17:43] *** masak left
[17:43] *** ingy left
[17:44] *** stephen joined
[17:48] *** justatheory left
[17:49] *** meppl left
[17:55] *** justatheory joined
[18:07] <xinming_> TimToady: with 'our $.attr' vs 'my $.attr', Can we change the scope of these two? 'our $.attr' will be shared by it's class, and all subclasses. and 'my $.attr' will affect only the current class, when we call Class.attr, we will get the one defined with our, If there is 'my $.attr' for a specified class, then, that 'my $.attr' is accessed which overrides the 'our $.attr'.

[18:08] *** alester left
[18:09] * xinming_ just get some _random_ thoughts while reading the synopsis.

[18:12] *** meppl joined
[18:14] *** alester joined
[18:20] * zamanfou is now away: In the rain my tears are forever lost.

[18:20] *** ludan left
[18:24] <pugs_svn> r21539 | pmurias++ | [smop] removed io and hash from the boilerplate

[18:24] <pugs_svn> r21539 | pmurias++ | Scalar does method delegation

[18:25] <pmurias> xinming_: what would be it's use?

[18:26] <ruoso> pmurias, hi

[18:26] <pmurias> ruoso: hi

[18:26] <pmurias> ruoso: what should i implement now?

[18:27] <xinming_> pmurias: hmm, I don't know, But since normally, my and our declarator are different. But with class attributes, they are almost the same which will confuse people IMO. :-)

[18:28] <ruoso> pmurias, now we can take from the ROADMAP directly untill the point marked as 0.2.7 

[18:29] <pmurias> attributes then?

[18:29] <pmurias> or Code?

[18:32] <pmurias> the Code.new should take a slime frame?

[18:36] *** araujo joined
[18:47] <pugs_svn> r21540 | pmurias++ | [elfX] undo a accidently comitted not-working-out-of-the-box merge

[18:49] *** peeps_work joined
[18:57] <ruoso> pmurias, oh... if Hash and Array are done, could you please move them from the roadmap to the changelog?

[18:58] *** ingy joined
[18:58] *** fridim_ left
[19:00] *** chris2 left
[19:01] <pmurias> ruoso: Hashes don't do any hashing, and i'm fixing Arrays to use [] now

[19:02] <rindolf> Hi all.

[19:02] <ruoso> pmurias, at this level, they just need to implement .{} correctly... they don't need to be too smart

[19:02] <ruoso> .{} and .[] I mean

[19:03] *** lambdabot left
[19:03] <pugs_svn> r21541 | pmurias++ | [s1p] arrays use postcicumfix:<[ ]>

[19:03] *** alester left
[19:04] *** lambdabot joined
[19:06] *** peeps[work] left
[19:06] <pmurias> ruoso: i update the changelog when i feel like fighting with openid again ;)

[19:07] *** hercynium left
[19:10] <ruoso> pmurias, I could update it for you ;)

[19:10] <pmurias> anok

[19:10] <pmurias> * ok

[19:11] <ruoso> so, I'll push Hash and Array down...

[19:12] <ruoso> pmurias, have you ever considered signing into ohloh?

[19:12] <ruoso> (btw, I've just updated the changelog... could you please check if I wrote your name correctly?)

[19:15] <ruoso> pmurias, about the lowlevel code... I'm not sure they can store a slime frame because slime frames are dependant of the C context... 

[19:16] <ruoso> I think we're going to need the generation of a callback function specific for that code instance

[19:16] <ruoso> at least in s1p

[19:19] * ruoso always feels good seeing "All tests successful"

[19:20] <pmurias> what are the benefits of ohloh?

[19:20] <ruoso> an "open source portfolio"?

[19:20] <ruoso> I usually use it when I send a CV

[19:20] <ruoso> and it's nice to see the "contributor map" of the project ;)

[19:24] *** fridim_ joined
[19:25] * ruoso converting test/14 into a benchmark test of the dispatching mechanism

[19:28] *** stephen left
[19:32] <ruoso> SMOP takes 18.509s to execute 10000 dispatchings like the one in test/14, creating a new frame for each invocation...

[19:33] <pugs_svn> r21542 | ruoso++ | [smop] first smop benchmark...

[19:34] <pugs_svn> r21543 | fglock++ | [v6.pm] emitter hacks

[19:35] <pmurias> ruoso: i registered on ohloh

[19:35] <ruoso> :)

[19:35] <pmurias> re slime frames are dependant on the C context, only at creation time

[19:36] <ruoso> but they can't be re-used...

[19:37] <pmurias> that's a problem

[19:38] *** justatheory left
[19:38] <ruoso> yes... that's why they're called SLIME

[19:38] <ruoso> but SLIME is only 100x slower than p5+moose ;)

[19:39] <pmurias> what?

[19:39] <ruoso> test/dispatch_benchmark

[19:39] * pmurias misread the number a 100% and was horrified

[19:40] <ruoso> but I'm not quite sure the comparision is fair...

[19:41] *** Alias_ joined
[19:42] <pmurias> isn't p5+moose as fast as pure p5 for method calls?

[19:42] <ruoso> nope... it's about 10x slower

[19:43] *** justatheory joined
[19:46] <ruoso> maybe not...

[19:46] <ruoso> I think my benchmark was wrng

[19:47] <ruoso> anyway...

[19:48] *** timbunce joined
[19:48] <ruoso> SLIME have this name because it's the SMOP Lame Interpreter Implementation

[19:51] <pmurias> ruoso: we can either .clone frames *or* replace SLIME

[19:51] <pmurias> we have only 4 sm0p blocks + 2 in sm0p tests

[19:52] <ruoso> pmurias, that we can promote to v6 blocks

[19:52] <pmurias> that was what i meant ;)

[19:54] <ruoso> ;)

[19:54] <ruoso> and we need a better interpreter implementation

[19:54] <ruoso> ;)

[19:57] *** jkeroes joined
[19:57] <ruoso> something less lame

[20:01] <pmurias> i hopped to write it in perl6, but if work is to be wasted on sm0p we can replace it sooner

[20:02] <ruoso> maybe we could wait a little longer

[20:02] <ruoso> as we're not creating more sm0p blocks

[20:02] <ruoso> we're not making the problem bigger

[20:03] <ruoso> we can replace the v6 blocks implementation later with a small effor

[20:03] <ruoso> t

[20:04] <pmurias> it's not worth to extend something which will be thrown away

[20:08] *** ua_ joined
[20:08] <pmurias> would there be an major issues with a llvm jit only interpreter?

[20:10] <pmurias> if we won't get away with it i don't see why shouldn't we do a replacement c one

[20:12] <ruoso> pmurias, I think we can neglect that issue for now... considering we have the eval polymorphism and we can replace the interpreter itself later

[20:12] <ruoso> and also considering we are already writing v6 blocks, which are implementation independent

[20:16] <pmurias> ruoso: do you know to implement Code withough extending slime?

[20:16] *** jkeroes left
[20:16] <ruoso> pmurias, we can make it using a c callback (just like lowlevel method does)

[20:19] <pmurias> that would mean emitting c from s1p :(

[20:20] <ruoso> pmurias, oh... but s1p will be compiled down to C anyway

[20:20] <ruoso> we'll implement the interpreter in s1p

[20:20] <ruoso> then we don't need to generate C anymore

[20:22] *** jkeroes joined
[20:23] <ruoso> pmurias, if you take a look in the ROADMAP, you'll see that we have two major milestones before implementing the AST types

[20:23] <ruoso> and only after that we'll have the effective interpreter

[20:24] * ruoso will update the roadmap and replace KP6 by elf

[20:25] <ruoso> pmurias, can I just s/KP6/elf/g? or is there any other important difference?

[20:29] <pmurias> elf's grammar is in ruby so compiling it to smop would be a radically different task

[20:29] <ruoso> hmmm...

[20:30] <ruoso> maybe we could think about compiling STD to smop then

[20:30] <ruoso> STD targets bootstrap, doesn't it?

[20:31] <pmurias> yes

[20:31] <ruoso> maybe we just go directly to STD 

[20:31] <ruoso> we use elf as the s1p compiler

[20:32] <ruoso> pmurias, do you think that is possible?

[20:34] <ruoso> (of course a lot of features will be needed before we actually get there...)

[20:35] <pmurias> directly you mean instead of doing kp6?

[20:35] <pmurias> or withough elf?

[20:36] <ruoso> by using elf in s1p and port STD using s1p to bootstrap it

[20:37] *** timbunce left
[20:37] <pmurias> makes sense

[20:38] *** ua_ left
[20:38] <ruoso> so that part of the roadmap turns intp

[20:38] <ruoso> * STD AST types

[20:39] <ruoso> * STD AST -> runtime frames (effective interpreter)

[20:39] <ruoso> * STD5 SMOP backend

[20:39] <ruoso> * STD5 bootstraps STD in SMOP

[20:40] <ruoso> * christmas ;)

[20:40] <ruoso> pmurias, right?

[20:41] <pmurias> those are all very big steps, but the basic order is right

[20:41] <ruoso> cool... 

[20:42] <ruoso> pmurias, did I mentioned STD × STD5 correctly/

[20:42] <ruoso> ?

[20:42] <ruoso> I'm not completely familiar with them

[20:42] <ruoso> (the difference between them)

[20:43] <pmurias> STD5.pm was the name of the compiled to perl5 STD.pm

[20:43] <pmurias> it is STD5.pmc

[20:43] <ruoso> "was"?

[20:43] <pmurias> i would just use STD everywhere

[20:44] <ruoso> alright

[20:44] <pmurias> s1p wiki page is totally outdated

[20:45] <ruoso> indeed

[20:46] <ruoso> pmurias, take a look into the updated rodmap "Perl 6 SMOP" milestone

[20:47] *** justatheory left
[20:48] <pmurias> seems ok

[20:48] *** jkeroes left
[20:49] *** smg left
[20:52] *** smg joined
[20:54] *** rdice left
[21:00] <ruoso> is it ok for the lowlevel attribute to support only scalar, array and hash as valid containers?

[21:06] <pugs_svn> r21544 | lwall++ | [STD] parses 98% of t/spec

[21:06] *** Alias_ left
[21:07] <pugs_svn> r21545 | lwall++ | [Cursor.pm] delete completely obsolete P6ish Cursor.pm

[21:08] <pmurias> ruoso: why do you need to special case it?

[21:09] <ruoso> pmurias, to avoid having to look into the string of the attribute name to discover the container type

[21:10] <ruoso> hmm...

[21:10] <ruoso> but thinking again...

[21:10] <ruoso> I don't need to do it..

[21:10] <ruoso> if I store simply the container "type"

[21:10] <ruoso> I can call "new" on the "type"

[21:11] *** jferrero joined
[21:11] <ruoso> then the compiler sets the container protoobject into the attribute

[21:12] * ruoso home &

[21:12] *** ruoso left
[21:15] *** hanekomu joined
[21:15] *** hanekomu left
[21:16] *** hanekomu joined
[21:30] *** iblechbot joined
[21:41] *** pmurias left
[21:50] *** Limbic_Region joined
[21:57] <pugs_svn> r21546 | fglock++ | [v6.pm] emitter fixes

[22:00] *** iblechbot left
[22:03] *** Limbic_Region left
[22:08] *** peeps_work left
[22:10] *** justatheory joined
[22:25] *** Limbic_Region joined
[22:35] *** cmarcelo left
[22:44] *** jferrero left
[22:53] *** rindolf left
[23:15] *** hanekomu left
[23:17] *** dduncan joined
[23:20] *** pmurias joined
[23:22] <pmurias> @tell ruoso i think it's better to do Code before Attribute as it should be possible to do Attribute in perl6

[23:22] <lambdabot> Consider it noted.

[23:34] *** Alias_ joined
[23:40] *** Exodist left
[23:49] *** pmurias left
[23:55] *** Alias_ left
