[00:11] <pugs_svnbot> r20729 | diakopter++ | [yap6] works again.  CPS and all.

[00:14] *** p6eval left
[00:14] *** p6eval joined
[00:15] *** p6eval left
[00:15] *** p6eval joined
[00:17] *** p6eval left
[00:17] *** p6eval joined
[00:19] *** bacek joined
[00:41] *** Chillance left
[01:00] *** Eevee left
[01:09] *** alanhaggai joined
[01:26] *** Ched- left
[01:26] *** Ched- joined
[01:39] *** Lorn joined
[02:44] *** polettix left
[03:02] *** meteorjay joined
[03:04] *** drbean left
[03:04] *** drbean joined
[03:07] *** awwaiid left
[03:13] *** [1]Maghnus joined
[03:14] *** wknight8111 left
[03:15] *** bacek left
[03:15] *** mncharity left
[03:15] *** broquain1 left
[03:15] *** Maghnus left
[03:15] *** pugs_svnbot left
[03:15] *** agentzh left
[03:15] *** nothingmuch left
[03:15] *** [1]Maghnus is now known as Maghnus

[03:18] *** broquaint joined
[03:19] *** meteorjay left
[03:19] *** yves left
[03:19] *** pmichaud left
[03:19] *** shachaf left
[03:19] *** fser left
[03:19] *** joejaxx left
[03:19] *** spinclad left
[03:19] *** ilbot2 left
[03:19] *** pasteling left
[03:19] *** nothingmuch joined
[03:20] *** shachaf joined
[03:21] *** bacek joined
[03:21] *** mncharity joined
[03:21] *** broquain1 joined
[03:21] *** pugs_svnbot joined
[03:21] *** agentzh joined
[03:22] *** broquain1 left
[03:25] *** meteorjay joined
[03:25] *** fser joined
[03:25] *** ilbot2 joined
[03:25] *** pasteling joined
[03:25] *** pmichaud joined
[03:25] *** yves joined
[03:25] *** joejaxx joined
[03:25] *** spinclad joined
[03:25] *** justatheory joined
[03:25] *** mncharity left
[03:25] *** joejaxx left
[03:37] *** Limbic_Region left
[04:11] *** bacek left
[04:11] *** agentzh left
[04:11] *** pugs_svnbot left
[04:13] *** bacek joined
[04:13] *** pugs_svnbot joined
[04:13] *** agentzh joined
[04:19] *** bacek left
[04:19] *** agentzh left
[04:19] *** pugs_svnbot left
[04:19] *** alanhaggai left
[04:28] *** bacek joined
[04:28] *** pugs_svnbot joined
[04:28] *** agentzh joined
[04:28] *** acmoore left
[04:28] <nothingmuch> @tell ruoso ping me when you are back online, I have an interesting idea for perl 5 <-> SMOP

[04:28] <lambdabot> Consider it noted.

[04:31] *** qmole left
[04:35] *** bacek left
[04:35] *** agentzh left
[04:35] *** pugs_svnbot left
[04:44] *** bacek joined
[04:44] *** pugs_svnbot joined
[04:44] *** agentzh joined
[04:49] *** bacek left
[04:49] *** agentzh left
[04:49] *** pugs_svnbot left
[04:55] *** justatheory left
[04:58] *** bacek joined
[04:58] *** pugs_svnbot joined
[04:58] *** agentzh joined
[04:58] *** nothingmuch left
[04:58] *** nothingm2ch_ joined
[05:00] *** dalek left
[05:01] *** viklund` left
[05:01] *** viklund` joined
[05:01] *** dalek joined
[05:02] *** bbkr_ left
[05:02] *** bbkr_ joined
[05:04] *** Lorn left
[05:04] *** Lorn joined
[05:09] *** araujo left
[05:13] *** Psyche^ joined
[05:13] *** Patterner left
[05:13] *** Psyche^ is now known as Patterner

[05:25] <bacek> perl6: my Int $a; say (try{$a='a'}) eq undef;

[05:26] <p6eval> kp6 r20729: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[05:26] <p6eval> ..pugs: OUTPUT[␤]

[05:26] <p6eval> ..rakudo r28192: OUTPUT[Null PMC access in type()␤current instr.: '_block11' pc 131 (EVAL_11:54)␤

[05:26] <p6eval> ..elf r20729: OUTPUT[Use of uninitialized value in string eq at (eval 14) line 4.␤␤]

[05:30] *** Lorn left
[05:30] *** bbkr_ left
[05:30] *** nothingm2ch_ left
[05:30] *** bacek left
[06:17] *** ilogger2 joined
[06:19] *** barney joined
[06:19] *** Psyche^ joined
[06:22] *** barney left
[06:23] *** polettix joined
[06:36] *** Psyche^ is now known as Patterner

[06:45] *** poletti joined
[06:52] *** polettix left
[07:10] *** alanhaggai joined
[07:12] *** iblechbot joined
[07:14] *** poletti left
[07:17] *** pmurias joined
[07:19] *** baest joined
[07:24] *** smtms left
[07:32] *** SCalimlim joined
[07:33] *** kane_ joined
[07:40] *** Jedai joined
[07:43] *** cosimo joined
[07:45] *** r0bby left
[07:57] *** r0bby joined
[08:22] *** r0bby left
[08:23] *** qmole joined
[08:55] *** r0bby joined
[09:11] *** ruoso joined
[09:15] *** sri_work_ joined
[09:33] <drbean>  I think bicycle riders are going to have trouble with the idea that ratcheting means no backtracking.

[09:34] <drbean> See the bicycle explanation at http://www.sheldonbrown.com/gloss_ra-e.html.

[09:34] <lambdabot> Title: Sheldon Brown's Bicycle Glossary Ra-Re

[09:35] <drbean> The perl6 idea of ratcheting however is recognized there.

[09:35] <drbean> Which is probably the idea that will be familiar to drawers of water from wells.

[09:37] *** chris2 joined
[09:40] <drbean> Hewers of wood and drawers of water: Apparently a biblical term of abuse: http://www.google.com/search?num=100&hl=en&lr=&as_qdr=all&ie=ISO-8859-1&q=%22hewers+of+wood+and+drawers+of+water%22&btnG=Search

[09:40] <lambdabot> Title: "hewers of wood and drawers of water" - Google Search, http://tinyurl.com/69s8mr

[10:14] *** sri_work joined
[10:14] *** sri_work_ left
[10:15] *** charsbar joined
[10:16] *** alanhaggai_ joined
[10:16] *** alanhaggai left
[10:18] *** ludan joined
[10:22] *** alanhaggai__ joined
[10:34] *** charsbar_ left
[10:37] *** alanhaggai_ left
[10:38] *** iblechbot left
[10:48] *** xinming joined
[11:20] *** xinming_ joined
[11:27] *** xinming left
[11:36] <moritz_> rakudo: class A { has $.a, $.b }; my $x = A.new(:a(3), :b(4)); say $x.perl

[11:36] *** p6eval joined
[11:44] *** bacek joined
[11:50] <pmichaud> moritz_: perhaps   has $.a;  has $.b;

[11:50] <moritz_> pmichaud: yes, that works

[11:51] <moritz_> has ($.a, $.b) leads to segfaults

[11:51] <pmichaud> (I don't know about that -- haven't dealt with the class code yet

[11:51] <moritz_> and other very weird behaviour

[11:52] <pmichaud> that would be a good rakudobug ticket, though.

[11:52] <moritz_> ok, I'll write one

[11:56] <pmichaud> pugs:  say sign(undef);

[11:56] <p6eval> OUTPUT[*** use of uninitialized value␤    at /tmp/29IoGCdZOo line 1, column 5-16␤]

[11:56] <pmichaud> pugs:  say abs(undef);

[11:56] <p6eval> OUTPUT[0␤]

[11:56] <pmichaud> pugs:  say sin(undef);

[11:56] <p6eval> OUTPUT[0␤]

[11:57] <pmichaud> ummmmm......

[11:58] *** awwaiid joined
[11:59] <pmichaud> t/spec/S29-num/sign.t   has

[11:59] <pmichaud> dies_ok { sign(undef) }, 'sign on undefined value fails';

[11:59] <pmichaud> ...why?

[11:59] *** chris2 left
[11:59] <moritz_> that's weird

[11:59] <moritz_> IMHO it should return 0 + optional warning

[11:59] <bacek> rakudo: my $a=[]; say $a.elems

[11:59] <p6eval> rakudo r28197 OUTPUT[0␤]

[12:00] <moritz_> rakudo: say undef ~~ Num

[12:00] <p6eval> rakudo r28197 OUTPUT[0␤]

[12:02] *** alanhaggai__ left
[12:03] <bacek> rakudo: my $a=[]; say $a.sort;

[12:03] <p6eval> rakudo r28197 OUTPUT[␤]

[12:04] <moritz_> pmichaud: ticket sent

[12:04] <pmichaud> moritz_: many thanks

[12:05] <moritz_> pmichaud: you're welcome. I'm happy to help in any way that doesn't involve learning PIR ;-)

[12:05] <moritz_> test suite, testing infrastructure and spamming rakudobug with tickets seem a good way ;)

[12:06] <bacek> moritz_, PIR is nice language :)

[12:07] <moritz_> bacek: for an assembly language, yes

[12:08] <bacek> moritz_, indeed. My first computer had 16K of memory. And I program directly in octet codes :)

[12:10] <masak> let's see, LTM concerns only the tokenizing step of parsing, right?

[12:11] <moritz_> masak: I don't think that Perl 6 rules have a clear definition of what the tokenizing is

[12:11] <moritz_> masak: the grammar engine has to figure that out for itself

[12:11] <masak> hm

[12:12] <masak> so what you're saying is that the model imposed on p6 grammars does not necessarily decompose into a step called 'tokenizing'?

[12:12] <masak> couldn't all the limits between rule matches be said to delimit tokens?

[12:13] <moritz_> don't think that's efficient

[12:13] <masak> I don't mean from an implemenation viewpoint

[12:14] <moritz_> I think that some form of closures and backtracking control *do* stop LTM

[12:14] *** iblechbot joined
[12:14] <masak> I'm just trying to argue that there's tokenizing in there somewhere

[12:14] <masak> is there LTM code committed somewhere that one can look at?

[12:14] <moritz_> I think that gimme5 + Curso5.pm do a bit LTM

[12:15] *** Lorn joined
[12:15] <kolibrie> it is possible to modify the grammar mid-parse, so tokenizing must be tied pretty closely to the rest of the compilation

[12:15] <masak> yes, I see that

[12:16] <masak> and it fits in with the rest of Perl, in a way

[12:16] <moritz_> kolibrie: actually "mid-parse" is quite well defined

[12:16] <masak> but in some situations it might still be useful to talk about tokenizing as if it was a step in the process

[12:16] <moritz_> the parsers parses a BEGIN block or use; statement

[12:16] <moritz_> then executes it

[12:16] <moritz_> then resumes parsing

[12:17] <masak> moritz_: still, that means that you cannot tokenize everything and then do the other steps

[12:17] <masak> or, if you do, you might have to throw a lot away

[12:17] <moritz_> masak: right. The tokenizer needs to be iterator-like

[12:37] *** gbacon left
[12:37] <masak> is there LTM code committed somewhere that one can look at?

[12:38] <moritz_> lol

[12:38] <masak> no?

[12:39] <moritz_> if gimme5+cursor5 isn't readable, then not

[12:39] <moritz_> at least not in perl 6 land

[12:40] <masak> gimme5+cursor5?

[12:40] *** gbacon joined
[12:40] *** wknight8111 joined
[12:40] <kolibrie> masak: pugs/src/perl6

[12:40] *** wknight8111 left
[12:41] <kolibrie> those are TimToady's experimentations

[12:41] <masak> oki

[12:42] *** Lorn left
[12:42] *** cmarcelo joined
[12:52] *** wknight8111 joined
[12:56] *** acmoore joined
[12:56] <masak> well, taking a look at Cursor5, I see that it's well written but very high-density

[12:57] <masak> maybe I would follow better if I understood the problem domain better

[12:57] <masak> I saw a couple of unrelated idioms in there that I liked, though

[12:58] <moritz_> I wish I could tell you more, but my own understanding doesn't go far beyond my article

[12:59] <moritz_> anyway, gotta run &

[12:59] <pmurias> masak: the approach i use with Cursor5 is to view the output of small snippets fed into gimme5

[12:59] <masak> ok

[12:59] <masak> do these two work together?

[13:01] <masak> ah, I see now

[13:01] <masak> the latter generates the former

[13:01] <pmurias> no

[13:02] <masak> ok :)

[13:02] <pmurias> what do you mean by those two?

[13:02] <masak> Cursor5 and gimme5

[13:02] <bacek> rakudo: multi sub foo($a){say $a}; foo(undef)

[13:02] <p6eval> rakudo r28197 OUTPUT[␤]

[13:02] <pmurias> Cursor5 is used by the code which is generated from gimme5

[13:02] <masak> ah, ok

[13:02] <pmurias> gimme5 is broken in the svn HEAD

[13:03] <bacek> rakudo: multi sub foo($a){say $a}; multi sub foo($a,$b) {say "2"}; foo(undef)

[13:03] <p6eval> rakudo r28197 OUTPUT[␤]

[13:03] <pmurias> gimme5 is a hackish way of translating STD.pm into perl5 code

[13:03] <bacek> rakudo: multi sub foo($a){say $a}; multi sub foo($a,$b) {say "2"}; foo(try{die})

[13:03] *** dmq left
[13:03] <p6eval> rakudo r28197 OUTPUT[Null PMC access in type()␤current instr.: '_block11' pc 59 (EVAL_13:27)␤

[13:09] <pmurias> masak: revision 20656 seemed to work

[13:09] <masak> pmurias: ok, great

[13:10] <pmurias> @tell TimToady add mangle.pl to the repo

[13:10] <lambdabot> Consider it noted.

[13:13] *** alanhaggai joined
[13:16] <bacek> perl6: (try{die}) ~~ undef

[13:16] <p6eval> kp6 r20730: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[13:16] <p6eval> ..pugs: RESULT[Bool::True]

[13:16] <p6eval> ..rakudo r28197: OUTPUT[Method 'ACCEPTS' not found for invocant of class 'Failure'␤current instr.: 'infix:~~' pc 8870 (src/gen_builtins.pir:5963)␤

[13:16] <p6eval> ..elf r20730: OUTPUT[syntax error at (eval 14) line 3, near ") ~"␤ at ./elf_f_faster line 4492␤]

[13:17] <bacek> perl6: defined(try{die}) 

[13:17] <p6eval> kp6 r20730: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[13:17] <p6eval> ..pugs: RESULT[Bool::False]

[13:17] <p6eval> ..rakudo r28197: RESULT[0]

[13:17] <p6eval> ..elf r20730: RESULT[␤]

[13:26] *** araujo joined
[13:32] *** alester joined
[13:35] <diakopter> masak: yes; in yap6 there's really only 1 tokenizer/parser.  well, the tokenizer just split(//)

[13:36] <masak> diakopter: ok

[13:36] <masak> does that mean that it parses $a+$b as one token?

[13:36] <diakopter> no; 5 tokens

[13:36] <masak> ah

[13:36] <masak> I see

[13:38] <diakopter> and in fact, the ast generated by the yapc parser is really a somewhat-hierarchical token stream

[13:38] <diakopter> yap6

[13:38] <diakopter> why do I keep saying yapc

[13:38] <diakopter> probably b/c the pronounciation is too similar in my ind

[13:38] <diakopter> mind

[13:38] *** jhorwitz joined
[13:38] <masak> diakopter: how far along is yap6?

[13:39] <diakopter> well; I've refactored it around 4 times now :D

[13:40] <diakopter> you could say it's still stuck in constant-refactoring

[13:40] <masak> why is that?

[13:40] <moritz_> because design is hard ;)

[13:41] <diakopter> and addictive

[13:41] <masak> :)

[13:42] <diakopter> why didn't I know about graphical perl debuggers before this month....

[13:42] <masak> seems to me that Pugs showed that design needn't be up-front to go quite a bit

[13:42] *** hanekomu joined
[13:42] <masak> diakopter: URL?

[13:43] <diakopter> masak: the Perl Dev Kit/Komodo from ActiveState, as well as EPIC for Eclipse

[13:43] <masak> ok, thanks

[13:44] <diakopter> masak: my belief is that there was *plenty* of design up-front while audreyt was preparing the beginnings of pugs

[13:45] <masak> diakopter: ok

[13:45] <moritz_> ... and still some refactoring necessary ;)

[13:47] *** cognominal_ joined
[13:47] *** cognominal_ left
[13:48] *** cognominal_ joined
[13:53] <pmichaud> there was at least five years of up-front design before pugs got started.

[13:53] <pmichaud> (okay, we'll say four on the conservative side.)

[13:53] <pmichaud> and also a couple of aborted attempts at a perl 6 translator.

[13:54] *** alanhaggai_ joined
[13:54] *** ludan left
[13:55] <diakopter> things with which to experiment in yap6 today: parse-time swapping of parser objects; parsing unit stoppers "fateing" particular branches; ast structure formulation/display

[13:55] <masak> pmichaud: I had the impression that Pugs just started from nothing, implementing a side-effect-free subset of Perl 6

[13:55] <masak> though that of course doesn't contradict what you said

[13:57] *** ofer joined
[13:57] * diakopter imagines audreyt reading type-theory books/papers and thinking about a Perl 6 compiler design the whole time... and then deciding to learn Haskell by writing pugs.

[13:57] <masak> :)

[13:57] <masak> she already knew a bit of Haskell, through the Darcs project

[13:58] <diakopter> ok; I thought I read somewhere that was one of the motivations.

[13:58] * moritz_ too

[13:59] *** Lorn joined
[13:59] <masak> it probably was, too

[14:01] <diakopter> you know what; I think I'm actually significantly more productive developing on win32/strawberry than on my macbook

[14:01] <diakopter> than on mac os on my macbook

[14:01] *** alanhaggai left
[14:01] *** alanhaggai_ is now known as alanhaggai

[14:07] <masak> diakopter: why is that, you think?

[14:11] <diakopter> perhaps I like the pointer control/movement in windows better.  I do use the mouse.

[14:11] <pmurias> rats--

[14:13] <masak> pmurias: try doing CAD or vector drawing without them :)

[14:13] <masak> possible, but very frustrating, I'd guess

[14:16] *** rdice joined
[14:17] <pmurias> masak: i use the rat for browsing the web ;)

[14:17] <masak> also useful

[14:18] <pmurias> but i use ratpoison as my wm

[14:21] *** ofer left
[14:21] <masak> pmurias: I could almost tell from your jargon

[14:22] <pmurias> ;)

[14:28] *** pmurias left
[14:47] *** Jedai left
[14:49] *** poletti joined
[14:51] *** Jedai joined
[14:57] *** sscaffidi joined
[15:20] *** jjore is now known as zz_jjore

[15:20] <pugs_svnbot> r20731 | lwall++ | [STD5] add mangle.pl

[15:20] *** zz_jjore is now known as jjore

[15:24] *** Lorn left
[15:24] *** Lorn joined
[15:38] *** stevan_ joined
[15:43] *** TJCRI joined
[15:47] <ruoso> TimToady, if you have some time, could you please take a look at the 'Foo.HOW.metamethod × Foo.^metamethod' message I posted on p6-language?

[15:47] <lambdabot> ruoso: You have 3 new messages. '/msg lambdabot @messages' to read them.

[15:47] <ruoso> @message

[15:47] <ruoso> oops

[15:47] <lambdabot> Maybe you meant: messages messages?

[15:53] <ruoso> nothingmuch, I'm back online... I couldn't read carefully the article you pointed yet... but I think I kinda understand what it's saying...

[15:55] *** lambdabot left
[15:56] *** lambdabot joined
[15:58] *** hanekomu left
[16:02] *** alanhaggai left
[16:13] *** alanhaggai joined
[16:20] *** smtms joined
[16:23] *** armagad joined
[16:23] <nothingmuch> ruoso: please do

[16:23] <nothingmuch> it's very easy to follow through

[16:23] <nothingmuch> basically it's how to compile your exact frame based setup

[16:24] *** pdcawley joined
[16:24] <nothingmuch> into exception based stuff

[16:26] *** cosimo left
[16:26] *** cosimo joined
[16:31] *** meppl joined
[16:32] <ruoso> nothingmuch, ok... I just had a more carefull read...

[16:33] <ruoso> SLIME basically works the same way, but it's much lower-level... for instance... there isn't an exception model yet..

[16:33] <ruoso> my idea is to get the exception model on top of that

[16:34] <ruoso> but the main point of comparision is that nothing stops some code to go through without being part of a series of eval calls...

[16:34] <ruoso> for instance..

[16:34] *** jjore is now known as zz_jjore

[16:34] <ruoso> some frame might go executing without getting back

[16:34] *** zz_jjore is now known as jjore

[16:34] <ruoso> and only returning when need to recurse into the SLIME stack

[16:35] <nothingmuch> ruoso: this is on how to compile SLIME to efficient C code

[16:35] <nothingmuch> slime frames get linearized

[16:35] <ruoso> oh... instead of reinitializing everytime...

[16:35] <nothingmuch> yes

[16:35] <nothingmuch> it does this by using administrative normal form

[16:36] *** justatheory joined
[16:36] <nothingmuch> and I actually came to the realization that perl 5 code can also be compiled to ANF at least in the abstract

[16:36] <nothingmuch> actually getting it to run is something different though

[16:36] <nothingmuch> either the opcode code has to be refactored

[16:36] <ruoso> ok... and that with llvm allows that to be made in runtime

[16:36] <nothingmuch> to use internal functions for the logic without caring about the stack

[16:36] <nothingmuch> or they need wrappers

[16:37] <nothingmuch> to set up the stack from normal parameters

[16:37] <nothingmuch> and then we can actually get a CPS and from there an ANF form for perl 5

[16:37] <nothingmuch> so continuations are potentially sane there too

[16:37] *** IllvilJa joined
[16:37] <nothingmuch> so that got me thinking

[16:37] <nothingmuch> maybe I can compile perl 5 optrees to SMOP

[16:38] <nothingmuch> SV *, opcodes etc are just an RI

[16:38] <ruoso> that would need to be implemented at some point anyway

[16:38] <nothingmuch> yes

[16:38] <nothingmuch> but it's probably easier than I initially thought

[16:38] <nothingmuch> at least for a certain subset of perl5's operational semantics

[16:39] <nothingmuch> so basically we use perl 5 to parse perl 5

[16:39] <nothingmuch> it's kinda like PONIE

[16:39] <nothingmuch> but not at the representation layer

[16:39] <nothingmuch> B::Simple is key here

[16:39] <ruoso> well.. in theory... if I get it correctly... we could just replace the runops from p5 to smop

[16:39] <nothingmuch> well, that would work for simple things

[16:39] <nothingmuch> i mean something that can actually give perl 5 continuations too =)

[16:41] <ruoso> we would still initialize the p5 interpreter

[16:41] <ruoso> to have GC working and etc

[16:41] <ruoso> as well as to have current XS code working as well

[16:41] <ruoso> but instead of cooperating the two runloops, we simply reimplement the p5 runloop inside SMOP

[16:41] <ruoso> the good thing is that we just need to reimplement the OP dispatch, not the OP themselves

[16:41] <ruoso> that would be a nice challenge... 

[16:42] <ruoso> well.. I might be missing something...

[16:42] <ruoso> but as long as we're off p5 runops stacking (one runops calling another), there's not reason for not having continuation for any p5 code...

[16:42] <nothingmuch> that's pretty much it, yes

[16:43] <nothingmuch> but what I would like to alter the calling convention for p5 ops

[16:43] <ruoso> but once that we're reimplementing the runloop

[16:43] <nothingmuch> instead of using the perl value stack, etc

[16:43] <ruoso> we can override the ops that recurse

[16:43] <nothingmuch> that is retained only for compat

[16:43] <ruoso> to avoid recursing

[16:43] <nothingmuch> anymoose, i need to finish something worky

[16:43] <ruoso> ok... me too..

[16:43] <ruoso> but that's a scary plan

[16:43] <ruoso> that could work

[16:43] <ruoso> ;)

[16:43] <nothingmuch> it's going to require a lot of work before I can actually get something remotely similar

[16:44] <ruoso> we need to toss this idea into #p5p after we mature it a little...

[16:44] <nothingmuch> a lot ;-)

[16:45] <ruoso> :)

[16:45] <moritz_> the general sentiment against low-level improvements seems to be "it would be *so* cool to have something better than we have now, but it's aint gonna work"

[16:49] <ruoso> the key is making something outside (assuming moritz_ were talking about p5+smop runloop merge)

[16:49] *** bacek left
[16:49] <moritz_> ruoso: I was, and I think that you're right

[16:50] <ruoso> I now realise that after getting the OO bootstrapped in SMOP, the most important milestone is embedding a full-feature p5

[16:51] <ruoso> and getting a Moose metainstance on top of that immediatly afterwards...

[16:51] <nothingmuch> embedding an unaware perl 5 shouldn't be too tricky

[16:51] <nothingmuch> the thing is calling back to SMOP and then back to perl 5

[16:51] <ruoso> yes... that's the "full-featured" part

[16:51] <ruoso> ;)

[16:51] <nothingmuch> tso the problem with that

[16:52] <nothingmuch> is if you try to take a continuation in SMOP space

[16:52] <nothingmuch> while part of the stack is perl 5

[16:52] *** nipotaway is now known as nipotan

[16:53] <ruoso> which wouldn't be a problem if p5 was completely stackless

[16:53] <ruoso> I mean...

[16:53] <nothingmuch> so yes

[16:53] <nothingmuch> that's exactly what I'm talking about

[16:53] <nothingmuch> making a stackless perl 5 =)

[16:53] <ruoso> that's a interesting project... :)

[16:54] <ruoso> #p5p people think it is not possible in the current interpreter

[16:54] <nothingmuch> in it's own right too

[16:54] <nothingmuch> it isn't

[16:54] <nothingmuch> this is a big change

[16:54] <nothingmuch> it won't be easy

[16:54] <nothingmuch> but i think there is a  lot more we can reuse than people previously suspected

[16:54] <nothingmuch> i realized the optree might actually be good enough for this

[16:55] <nothingmuch> well, B::Simple would

[16:55] <ruoso> ok... maybe we could get the "stackless p5 project" to #p5p even before we think on how that would work with SMOP

[16:55] *** ashleyb joined
[16:55] <ruoso> although I also realised it should be possible to implement it by delegating everything to p5

[16:56] <ruoso> and allowing p5 to recurse as it wishes

[16:56] <ruoso> as long as it starts another SMOP interpreter instance for each runops call

[16:56] <ruoso> in theory... that should work, as long as p5 works..

[16:58] <ruoso> the good thing is that starting a SMOP interpreter instance is very cheap

[17:06] *** lambdabot left
[17:07] *** lambdabot joined
[17:12] *** dduncan joined
[17:12] *** dduncan left
[17:21] *** pmurias joined
[17:26] *** [particle] joined
[17:27] *** barney joined
[17:27] *** Jedai left
[17:35] *** aindilis joined
[17:36] *** rdice left
[17:48] <mofino> *CHEER* *CHEER* PERL SIX IS COMING *CHEER* *CHEER*

[17:50] <TimToady> ...when there's good cheer 'mong the guests, he cocks an ear at all the jests, and laughs until he chokes

[17:50] <SubStack> it'll be the best christmas present ever I suspect

[17:51] <SubStack> although I usually get pretty lousy gifts

[17:51] <smtms> SubStack, are you sure this won't be a lousy gift too? :-)

[17:52] <SubStack> it'll probably say "CPAN not included" in small print on the box someplace

[17:52] <Auzon> That would be disappointing.

[17:53] *** poletti left
[17:54] <pmurias> TimToady: got my || is always ratchety bug report?

[17:57] * ruoso more and more sees Perl 6 as a different language and project, and more and more accepts that /usr/bin/perl will be pointing to p5 still for a long time... but that is far from a bad thing...

[17:57] <pmurias> SubStack: it hardly reasonable to expect cpan to be included in the default distribution ;)

[17:58] <diakopter> TimToady: how fast/slow is STD5.pm these days; i'm curious

[17:59] <diakopter> perl6: use v6; say 2;

[17:59] <p6eval> kp6 r20731: OUTPUT[2␤]

[17:59] <p6eval> ..pugs: OUTPUT[2␤]

[17:59] <p6eval> ..rakudo r28205: OUTPUT[2␤]

[17:59] <p6eval> ..elf r20731: OUTPUT[2␤]

[18:01] <diakopter> moritz_: how about adding execution times to p6eval's output..? maybe just when it's privmsg?

[18:02] <diakopter> or would they not be meaningful?

[18:03] <pmichaud> I'm guessing not very meaningful

[18:03] <pmichaud> since these tend to be short scripts

[18:03] <pmichaud> one-liners, even.

[18:03] <ruoso> and the environment is not that predictable AFAIK

[18:06] <diakopter> pmichaud: but rakudo would always win :P

[18:07] <pmichaud> oh, I'm not at all sure about that -- at least not until I get a chance to re-do the parser.

[18:08] <diakopter> yap6's parser takes 280x longer with full trace output enabled on a half KB file compared to tracing disabled

[18:08] <diakopter> (and generates a 60MB tracelog file)

[18:08] <diakopter> in case anybody cared :)

[18:09] <pmichaud> and, rakudo tends to be running on unoptimized parrot.

[18:09] <diakopter> I thought it fails to run on optimized parrot?

[18:10] <pmichaud> I think chromatic had it running.  I could try very quickly.

[18:10] * diakopter wonders if you could have a rakudo-specific optimization setting for parrot

[18:11] <pmichaud> and it may be that rakudo doesn't run under optimized parrot under specific architectures.

[18:11] <pmichaud> (given that optimized parrot has difficulty under specific architectures.)

[18:19] *** meppl left
[18:24] *** rdice joined
[18:25] <TimToady> pmurias: yes, got that--eventually we'll have to solve token backtrack for non-ratchet, but it'll be easier once we have lazy lists, so that we don't have to generate all possible token matches on every token

[18:26] <TimToady> diakopter: don't know how fast except once when I turn off all logging, and it was doing roughly 2000 chars/sec

[18:26] <TimToady> but nothing is really optimized for speed except the LTM itself

[18:27] <TimToady> and a lot of the overhead is from assuming non-ratchet where ratchet would have only one possibility

[18:28] <TimToady> commuting & # back in about 2 hr

[18:47] *** meppl joined
[19:02] <pmichaud> rakudo spectest_regression on optimized parrot: 3m37  (1 failure)   unoptimized:  4m21 (0 failures)

[19:02] *** jisom joined
[19:04] *** jan_ joined
[19:10] *** sri_work left
[19:11] *** sri_work joined
[19:14] *** dr_cherry joined
[19:15] *** xinming_ is now known as xinming

[19:43] *** jisom left
[19:45] <pmurias> moritz_: how do you run elf under debian?

[19:46] <Auzon> pmurias:  I compiled Ruby 1.9 from source

[19:46] <pmurias> no luck with apt?

[19:46] <Auzon> evalbot

[19:47] <Auzon> evalbot is running debian stable

[19:47] <spinclad> lenny has ruby-1.9

[19:47] <spinclad> right

[19:47] <Auzon> I think there was an issue in the past with Debian's ruby-1.9 being not recent enough since 1.9 was the development branch for a long time

[19:47] <Auzon> Still isn't the stable one

[19:49] <diakopter> <- lightbulb circuit closes

[19:52] *** yahooooo2 joined
[19:54] *** barney left
[19:56] <moritz_> pmurias: which distribution?

[20:05] *** sri_work left
[20:05] *** sri_work joined
[20:05] <pmurias> moritz_: stable upgraded to lenny

[20:05] <moritz_> pmurias: aptitude install ruby1.9

[20:06] <moritz_> pmurias: it's a separate package in lenny

[20:06] <pmurias> is apt-get install any different?

[20:06] <moritz_> not rreally

[20:06] <pmurias> moritz_: should i remove ruby 1.8?

[20:06] *** armagad left
[20:06] <pmurias> i get a no readline error

[20:06] <moritz_> ruby1.9-readline or something

[20:06] <moritz_> libruby...

[20:07] <moritz_> pmurias: ruby1.8 and 1.9 can coexist - don't know if you need 1.8 for anything

[20:08] <pmurias> i guess i don't

[20:11] *** Jedai joined
[20:20] *** sscaffidi left
[20:21] *** meppl left
[20:23] *** vixey joined
[20:35] *** chris2 joined
[20:42] *** vixey left
[20:42] <pugs_svnbot> r20732 | pmurias++ | [Cursor5] replaced a 2 with DEBUG::lexer

[20:54] <pugs_svnbot> r20733 | lwall++ | [STD5] switch debugging output to ::deb function

[21:07] *** armagad joined
[21:07] *** alanhaggai left
[21:07] *** armagad left
[21:19] *** dr_cherry left
[21:22] *** rdice left
[21:36] *** sscaffidi joined
[21:50] *** bacek joined
[21:56] *** pmurias left
[21:59] *** xinming_ joined
[22:01] *** xinming left
[22:02] *** poletti joined
[22:11] *** Limbic_Region joined
[22:15] *** TJCRI left
[22:15] *** stevan_ left
[22:23] *** jhorwitz left
[22:34] *** poletti left
[22:37] *** iblechbot left
[22:41] *** jjore is now known as zz_jjore

[22:41] *** stevan_ joined
[22:41] *** zz_jjore is now known as jjore

[22:44] *** bacek left
[22:46] *** pdcawley left
[22:48] <Auzon> rakudo: class Foo {multi bar() {say "hi"}}; Foo.new.bar;

[22:48] <p6eval> rakudo r28205 No output (you need to produce output to STDOUT)

[22:48] <Auzon> rakudo: class Foo {multi method bar() {say "hi"}}; Foo.new.bar;

[22:48] <p6eval> rakudo r28205 No output (you need to produce output to STDOUT)

[22:48] <Auzon> rakudo: class Foo {multi method bar() {say "hi"}}; say Foo.new.bar;

[22:48] <p6eval> rakudo r28205 No output (you need to produce output to STDOUT)

[22:48] <Auzon> rakudo: class Foo {method bar {say "hi"}}; say Foo.new.bar;

[22:48] <p6eval> rakudo r28205 No output (you need to produce output to STDOUT)

[22:48] <Auzon> pugs: class Foo {method bar {say "hi"}}; Foo.new.bar;

[22:48] <p6eval> OUTPUT[hi␤]

[22:48] <Auzon> pugs: class Foo {multi bar {say "hi"}}; Foo.new.bar;

[22:48] <p6eval> OUTPUT[hi␤]

[22:49] <Auzon> pugs: class Foo {multi method bar {say "hi"}}; Foo.new.bar;

[22:49] <p6eval> OUTPUT[hi␤]

[22:49] <Auzon> pugs: class Foo {multi sub bar {say "hi"}}; Foo.new.bar;

[22:49] <p6eval> OUTPUT[hi␤]

[22:49] <pugs_svnbot> r20734 | diakopter++ | [yap6] lots of fixes/improvements

[22:54] *** ashleyb left
[23:01] * ruoso trying hard to stress the fact that there's no way to avoid side effects in a method call...

[23:02] <ruoso> even if that method call is part of a subset definition...

[23:02] *** sscaffidi left
[23:02] <Limbic_Region> ruoso - did you see my reply to your PerlMonk's post?

[23:03] <ruoso> which one?

[23:03] <Limbic_Region> pregnancy weeks

[23:04] <ruoso> Limbic_Region, :) thansk

[23:27] *** Jedai left
[23:30] *** cjfields joined
[23:34] *** aindilis left
[23:35] *** aindilis joined
[23:42] *** yahooooo2 left
[23:42] *** yahooooo joined
[23:42] *** sri_work left
[23:49] *** cjfields left
[23:52] *** chris2_ joined
[23:54] *** Lorn_ joined
[23:57] *** chris2_ left
[23:58] *** Lorn_ left
[23:58] *** Lorn_ joined
