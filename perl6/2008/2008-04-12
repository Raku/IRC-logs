[00:04] *** Fokez left
[00:12] *** eternaleye_ joined
[00:22] *** eternaleye left
[00:22] *** Jedai left
[00:38] *** thestarslookdown joined
[01:15] <pugs_svnbot> r20262 | Darren_Duncan++ | ext/Muldis-DB/ : part 1 of 20080411 resync with Perl 5 version

[01:15] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20262

[01:15] <lambdabot> Title: Changeset 20262 - Pugs - Trac

[01:15] *** eternaleye_ left
[01:20] *** meppel-san joined
[01:20] <pugs_svnbot> r20263 | Darren_Duncan++ | ext/Muldis-DB/ : part 2 of 20080411 resync with Perl 5 version

[01:20] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20263

[01:20] <lambdabot> Title: Changeset 20263 - Pugs - Trac

[01:26] *** penk joined
[01:28] *** meppl left
[01:30] *** Greyscale joined
[01:36] *** penk left
[01:37] *** penk joined
[01:39] *** syle left
[01:54] *** pen1 joined
[01:54] *** penk left
[01:57] *** ofer joined
[02:02] *** pen1 left
[02:43] <meppel-san> good night

[02:47] *** meppel-san left
[02:52] *** ofer left
[02:54] *** thestarslookdown left
[03:05] *** elmex_ joined
[03:05] *** elmex_ left
[03:10] *** elmex left
[03:12] *** eternaleye_ joined
[03:31] *** eternaleye_ left
[03:32] *** eternaleye_ joined
[03:57] *** eternaleye joined
[03:58] *** eternaleye_ left
[03:58] *** justatheory left
[04:14] *** mj41___ joined
[04:29] *** mj41 left
[05:02] *** Psyche^ joined
[05:02] *** alester joined
[05:07] *** alanhaggai joined
[05:10] *** Patterner left
[05:10] *** Psyche^ is now known as Patterner

[05:22] <pugs_svnbot> r20264 | Darren_Duncan++ | ext/Muldis-DB/ : part 3 (done?) of 20080411 resync with Perl 5 version

[05:22] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20264

[05:22] <lambdabot> Title: Changeset 20264 - Pugs - Trac

[05:25] *** alanhaggai_ joined
[05:30] *** eternaleye left
[05:30] *** eternaleye joined
[05:37] *** alanhaggai left
[05:38] *** eternaleye_ joined
[05:41] *** wtgee left
[05:54] *** s3ir left
[06:03] *** sri_work joined
[06:06] *** eternaleye left
[06:11] *** alanhaggai_ left
[06:19] *** alester left
[06:29] *** alanhaggai_ joined
[07:14] *** yewenbin joined
[07:26] *** ilbot2 left
[07:33] *** alanhaggai_ left
[07:34] *** alanhaggai joined
[07:52] *** kanru2 left
[07:55] *** kanru joined
[07:57] *** Jedai joined
[07:57] *** iblechbot joined
[08:20] *** xinming left
[08:20] *** kcwu left
[08:20] *** araujo left
[08:21] *** xinming joined
[08:21] *** araujo joined
[08:21] *** kcwu joined
[08:27] *** Auzon left
[08:42] *** barney joined
[08:46] *** xinming left
[08:46] *** kcwu left
[08:46] *** araujo left
[08:46] *** xinming joined
[08:46] *** araujo joined
[08:46] *** kcwu joined
[08:56] *** alanhaggai__ joined
[09:00] *** yewenbin left
[09:07] *** alanhaggai left
[09:22] *** eternaleye_ left
[09:32] *** kanru2 joined
[09:32] *** kanru left
[09:36] *** cognominal_ left
[09:40] *** xinming left
[09:40] *** kcwu left
[09:40] *** araujo left
[09:41] *** xinming joined
[09:41] *** araujo joined
[09:41] *** kcwu joined
[09:42] *** wknight8111 joined
[09:45] *** cognominal_ joined
[10:10] *** wknight8111 left
[10:40] *** chris2 joined
[10:43] *** nirz joined
[10:45] *** jan_ left
[10:47] *** nirz left
[10:57] *** Zygo joined
[11:03] *** literal joined
[11:05] <pasteling> "literal" at 194.144.99.91 pasted "pugs svn build fails" (744 lines, 65.7K) at http://sial.org/pbot/30800

[11:05] <literal> ^-- help!

[11:05] *** chris2 left
[11:09] <pugs_svnbot> r20265 | putter++ | [elf_e] Move global $*variables to GLOBAL package.

[11:09] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20265

[11:09] <lambdabot> Title: Changeset 20265 - Pugs - Trac

[11:32] *** Fokez joined
[11:38] *** jan joined
[11:48] *** alanhaggai__ is now known as alanhaggai

[11:55] *** Dave2 left
[12:00] *** mncharity joined
[12:01] *** chris2 joined
[12:04] <mncharity> moritz_: irclog is down

[12:04] <lambdabot> mncharity: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:04] <mncharity> literal: wierd, let's see...

[12:05] <mncharity> ﻿/msg lambdabot @messages

[12:05] <mncharity> :/

[12:09] <mncharity> ﻿stevan_: re "﻿package B ﻿its a reserved "package"", oy, right, thanks.  bad, bad naming.  um, I've forgotten context... aside from "my test case was odd" and "someday package names should be mangled to avoid 'B'", was there an impact?

[12:12] <mncharity> ﻿literal: are you setting PUGS_EMBED?

[12:41] *** jan left
[12:41] *** yewenbin joined
[12:41] *** jan_ joined
[12:45] *** barney left
[12:48] <pugs_svnbot> r20266 | pmurias++ | [elf]

[12:48] <pugs_svnbot> r20266 | pmurias++ | removed the unrefactored ElfD_NoMoose and put the refactored one it it's place

[12:48] <pugs_svnbot> r20266 | pmurias++ | added an elf_d_nomoose executable

[12:48] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20266

[12:48] <lambdabot> Title: Changeset 20266 - Pugs - Trac

[13:05] <spinclad> mncharity: '< mncharity> ﻿/msg lambdabot @messages': i see a box (non-break space?) before the /.

[13:07] <stevan_> mncharity: I suspect your test case would pass if you removed B

[13:09] *** meppl joined
[13:11] <meppl> good morning

[13:15] <mncharity> good morning meppl.

[13:15] *** meppl left
[13:15] <mncharity> ﻿stevan_: ah.  /me no longer remembers failing test case, goes backlogging...

[13:16] *** meppl joined
[13:16] <meppl> good morning mncharity

[13:18] <mncharity> perl -we '{package A;use Moose;sub f{print 3}}{package C;use Moose; extends qw(::A);}A->f;B->f;'

[13:18] <mncharity> Can't call method "can" without a package or object reference at /usr/local/lib/perl5/site_perl/5.10.0/Moose/Meta/Class.pm line 278.

[13:18] <mncharity> oh, duh.  sigh

[13:19] <mncharity> perl -we '{package A;use Moose;sub f{print 3}}{package C;use Moose; extends qw(::A);}A->f;C->f;

[13:19] <mncharity> still fails.  no typos. ;)

[13:19] <stevan_> s/:://

[13:19] <stevan_> perl -we '{package A;use Moose;sub f{print 3}}{package C;use Moose; extends qw(A);}A->f;C->f;'

[13:19] <stevan_> works fine

[13:21] <mncharity> re '﻿s/:://', works fine, yes, that was the point. :)   @ISA is happy with ::A.  extends() is not.  I got briefly burned by the difference, so thought I'd mention it.

[13:21] <stevan_> @ISA is an internal mechanism though

[13:21] <lambdabot> Unknown command, try @list

[13:21] <stevan_> extends is just a "macro" really

[13:22] <stevan_> and honestly, you are the first person I have seen use ::A for a package name in @ISA

[13:22] <stevan_> :)

[13:22] <stevan_> if you really want it to work for Moose though, you can patch Class::MOP::Class::superclasses to do it

[13:22] <stevan_> I will even give you a commit bit :)

[13:23] <mncharity> re 'really want it', no, no, just noting an oddity.

[13:23] <mncharity> re 'first person', /me points finger at code generator.

[13:24] <mncharity> re '﻿@ISA is an internal mechanism though'... huh?

[13:24] <stevan_> well sorry,.. method dispatch is an internal mechanism

[13:24] <stevan_> and it reads @ISA

[13:24] <stevan_> and I would assume (based on your example) that method dispatch sees ::A and A as equic

[13:24] <stevan_> equiv

[13:25] <mncharity> ah, so the observation is "you can use ISA directly, instead of extent(), and Moose will still work"?  nifty, I was wondering about that.

[13:26] <stevan_> sure

[13:26] <mncharity> hence the   extends(grep{!/^Moose::Object$/}@ISA,'AddANewClass')  hack

[13:26] <stevan_> extends is just a helper

[13:26] <stevan_> use base Foo; @ISA = qw(Foo),.. it all works

[13:27] <mncharity> ok.  thanks :)

[13:27] *** araujo left
[13:28] <stevan_> one of the primary design goals of Moose was to make sure it interoperated as nicely as possible with existing Perl idioms/techniques and modules

[13:28] <mncharity> ﻿spinclad: re '﻿box (non-break space?) before the /', ahhhh.  thanks.  /me wonders if lambdabot changed, or gaim.

[13:28] <mncharity> :)  # re goal

[13:30] <allbery_b> LB didn't change (and would have no control over your client sending garbage before a `/')

[13:33] *** araujo joined
[13:38] <mncharity> ﻿allbery_b: ok.  gnome/gaim then.  tnx. :)

[13:38] <allbery_b> gaim/pidgin is fairly well known for odd /msg (and /-command in general) behavior

[13:40] <mncharity> sigh. :)

[13:46] <moritz_> re

[13:47] *** ilbot2 joined
[13:47] <moritz_> mncharity: thanks, now started agian

[13:50] <mncharity> :)

[13:50] <pugs_svnbot> r20267 | putter++ | [elf_d] Tweaks in support of elf_e: HASH::dup, and a second copy of irbuild_ir.

[13:50] <pugs_svnbot> r20267 | putter++ | README: Working elf_d_nomoose build instructions.

[13:50] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20267

[13:50] <lambdabot> Title: Changeset 20267 - Pugs - Trac

[13:55] *** chris2_ joined
[13:57] *** chris2 left
[13:57] *** chris2_ is now known as chris2

[14:02] <pugs_svnbot> r20268 | putter++ | [elf_e] Moved global subs to GLOBAL.  The current emitter hack for f() is "if I've seen a sub decl for f, emit 'f()', else emit 'GLOBAL::f()'".

[14:02] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20268

[14:03] <lambdabot> Title: Changeset 20268 - Pugs - Trac

[14:03] *** meppl left
[14:04] <mncharity> maybe prelude next...

[14:10] <mncharity> @tell rouso ping?  it should now be possible to build a smop compiler on elf.  how goes work?

[14:10] <lambdabot> Consider it noted.

[14:25] *** IllvilJa left
[14:40] *** chris2 left
[14:45] *** chris2 joined
[14:48] *** pmurias joined
[14:48] <pmurias> mncharity: hi

[14:49] <pmurias> why did you have to create elf_e instead of adding analysis to elf_d?

[14:49] *** meppl joined
[14:50] <mncharity> here's a todo list for someone: tweak autobox to permit mapping subtypes of SCALAR.  eg STRING, NUMBER, perhaps INTEGER, UNSIGNED, FLOAT.  can support the old SCALAR with no performance hit, and the new subtypes at the cost of a hash lookup.

[14:52] <mncharity> hi ﻿pmurias.  because elf_c doesn't support the class inheritance used in Analysis, and I didn't want elf_d to be self hosting only, given that it is already carrying the non-trivial step of switching IRs.

[14:53] <mncharity> I think that was it... let's see...

[14:54] <mncharity> yes.  "@ISA can be incrementally extended."

[14:55] <mncharity> s﻿/the cost of a/﻿the cost of a _extra_/

[14:55] <pmurias> using Elf instead of ElfLetter would help moving stuff over ;)

[14:56] <pmurias> mncharity: re autobox how would you do it?

[14:57] *** alanhaggai left
[14:58] <mncharity> in http://search.cpan.org/src/CHOCOLATE/autobox-2.23/autobox.xs  if the reftype is SCALAR, and the hash does _not_ have a SCALAR entry, use SvIOK and friends to create a more specific reftype, and check that.

[15:02] <pmurias> i see

[15:02] <mncharity> that would give a usage of   use autobox SCALAR => undef, STRING => 'STring', NUMBER => 'Number';

[15:03] <mncharity> hmm, let's see, what are the p6 number types...

[15:07] <mncharity> TimToady: S02 mentions Rat, but then doesn't include it in the Im/mutable type list.  Does it exist?

[15:09] <mncharity> Also, S02 lists Int, Num, Complex, Rat, Bit, Bool, but S29 says Num is a role.  What type is a float?

[15:11] <mncharity> I also have a very fuzzy recollection that the type of a literal 3 was some weird Int/Num junction thing?

[15:12] <[particle]> Num is float

[15:13] <mncharity> so S29 is wrong, Num is a class not a role, but... classes can also serve as roles?

[15:13] <[particle]> roles are composition-time only

[15:14] <[particle]> if you request my SomeRole $x,

[15:14] <[particle]> it autovivifies a class out of the role in order to type $x

[15:14] <[particle]> it's in S12 somewhere iirc

[15:16] <mncharity> so  role RA {...}  is identical to  class CA {...}  except RA has a "can be used as a role at composition-time" bit set?

[15:17] <[particle]> well, not exactly

[15:17] <[particle]> if you want to use a class at composition time, the object system tries to make a role out of it for you

[15:17] <[particle]> it's DWIMmy too

[15:17] <[particle]> sometimes this may fail

[15:18] <[particle]> RA and CA differ in their levels of definedness

[15:18] *** meppl left
[15:19] <mncharity> s12: "You can use a role name as a type, but only for constraints, not for declaring actual objects. (However, if you use a role as if it were a class, an anonymous class is generated that composes the role, which provides a way to force a role to test its crony composition for infelicities.)"

[15:20] <mncharity> so every instance of a Num gets a unique anonymous class?

[15:21] * [particle] looks in S29 for the "Num is a role" bit

[15:21] <mncharity> http://feather.perl6.nl/syn/S29.html#Num

[15:21] <lambdabot> Title: S29

[15:21] <mncharity> "The following are all defined in the Num role:"

[15:22] <mncharity> if a class Num can be used as a role, then maybe that's just a "not quite right" phrase.

[15:23] <TimToady> no, there's only one anonymous class generated for Num

[15:23] <TimToady> it memoizes

[15:23] <TimToady> which is fine, since role is immutable

[15:23] <TimToady> going the other way, you can only make a role out of a class by taking a snapshot of the class's current state

[15:24] <TimToady> it's still debatable whether that is generally allowed

[15:25] <[particle]> if we can pull it off, it's allowed.

[15:26] <mncharity> so to modify Num's memoized class at runtime, one gets the class with something like $num_class = 3.14.HOW; ?

[15:26] *** yewenbin left
[15:26] <[particle]> why is the class anonymous, if the role is Num and it's immutable?

[15:26] <TimToady> well, that's the metaclass, which presumably has some way of dealing with its bits

[15:27] <TimToady> it's anonymous so we can pun the name

[15:27] *** yewenbin joined
[15:27] <mncharity> class NumDeriv is 3.14.HOW { ... }

[15:27] <TimToady> and so that JMD doesn't have to have Tie::Array class to go with Array role

[15:27] <TimToady> it's just Array class and Array role

[15:28] <TimToady> no, a class is not a metaclass

[15:28] <mncharity> oh... .WHAT ?

[15:28] <mncharity> ﻿class NumDeriv is 3.14.WHAT { ... }

[15:28] <TimToady> that is likelier to work

[15:30] <pmurias> isn't .HOW the metaclass instance?

[15:31] <TimToady> it's something that does the metaclass role, I suppose...

[15:31] <mncharity> re Array class and Array role...  so a class "is for object management", and a role "is for code reuse"... who handles "type which signifies an Array-like interface"?    Array::Like ?   where Array does Array::Like?

[15:32] <mncharity> Array::Interface

[15:32] <TimToady> roles also work for interfaces

[15:32] <TimToady> if you just ignore their suggested implementations

[15:33] <mncharity> how does one say  'does Array :but_ignore_its_suggested_implementations' ?

[15:33] <TimToady> $x ~~ Array

[15:34] <mncharity> class A2 ﻿does Array(:but_ignore_its_suggested_implementations) { ... } ?

[15:34] <TimToady> you mean composition...

[15:34] <TimToady> just override all the methods

[15:36] <pmurias> if you miss one you'll end in trouble

[15:37] <pmurias> s/one/any/

[15:37] <mncharity> a cpan module Array::Interface with all the method bodies overwritten with yadas?

[15:38] <[particle]> you can loop over the list of methods and redefine them

[15:38] <Tene> I dunno... sounds like it might be nice to have a convenient way to say "I already provide the interface of this role..."

[15:39] <pmurias> mncharity: but_ignore_method_implementations(::Foo) function in a cpan module would be better

[15:39] <Tene> Perl could even check to confirm.

[15:39] <TimToady> seems like a pretty easy thing to do

[15:39] <mncharity> re loop, feels like ruby. :)   (Array.methods - Object.methods).each{...}

[15:39] <moritz_> you can just write a class that 'does Positional', can't you?

[15:40] <moritz_> you don't have to use the Array class at all

[15:40] <Tene> class MagicArray provides Array { ... }

[15:40] <mncharity> re bimi function, nice.  though... applied to roles it seems straightforward.  applied to classes, less so.

[15:43] <mncharity> re roles, or no?  compile-time role composition has multiple definition as an error.  so does()ing an Array::Interface at compile-time...  you can't say  class A2 does AnImperfectArrayImplementation does Array::Interface {}  ?  that would go boom, yes?

[15:44] <TimToady> a class can override any colliding methods

[15:45] <mncharity> that requires A2 to mention them all, rather defeating the point of code reuse

[15:45] <mncharity> use Xlib2 does PartialXlibImpl does XlibSpec { ...400 pointless functions... }

[15:46] <TimToady> so don't use imperfect role models :)

[15:47] <pmurias> mncharity: a partial implementation dosn't match the spec for obvious reasons ;)

[15:47] <mncharity> well, I'm not sure were at the bottom of that one, but mission creep

[15:47] *** yewenbin left
[15:48] <mncharity> ﻿pmurias: so it looks like a STRING, INTEGER, NUMBER distinction might be most useful

[15:48] <mncharity> unless one wants to potentially expose p5 types as the  int  and uint  p6 types...

[15:49] <mncharity> ﻿pmurias/et al :)

[15:49] *** alanhaggai joined
[15:51] <mncharity> but for now, I'll fudge it in a SCALAR prelude, which checks the magic "is it a string or number" phrase, and ... redispatches.  +sub_call_cost on each string op. :/  

[15:53] <mncharity> ~$obj&$obj  <- the magic.

[15:53] <mncharity> from Class/Multimethods.pm

[15:54] <mncharity> if anyone knows a better approach... I'd be most interested.   "better" == "faster on 5.10" :)

[16:01] *** justatheory joined
[16:08] <mncharity> @perl [0,1].shape

[16:08] <lambdabot> Maybe you meant: keal part pl spell tell url vera

[16:08] <mncharity> perl: ﻿[0,1].shape

[16:08] <TimToady> nobody does S09 yet

[16:11] <mncharity> [].end  is ... undef?  s29 says index of final element.

[16:12] <mncharity>  final subscript of the first dimension

[16:14] <TimToady> [] is one dimensional as a term

[16:14] <TimToady> so just -1

[16:14] <TimToady> .[] is 0-dimensional

[16:15] <TimToady> I suppose Array is 0 dimensional :)

[16:17] *** FurnaceBoy joined
[16:17] <mncharity> lol

[16:19] <mncharity> s29 Array exists() and delete() appear to be handling their @indices in a confusingly inconsistent manner.

[16:20] *** ruoso joined
[16:20] <mncharity> hmm, or maybe not.  nm

[16:23] <TimToady> are they the newer :exists and :delete forms?  If not, they're probably fossils

[16:23] <TimToady> sorry, don't have time to check it all myself--still trying to catch up with p6l backlog... :)

[16:27] <mncharity> ﻿newer :exists and :delete?  sigh.  sounds like I'm doing fossils

[16:28] <mncharity> the s29 Array pop/shift/push/unshift sigs should probably be all @array _is rw_.

[16:29] <mncharity> anyone have a pointer to "﻿newer :exists and :delete forms"?

[16:30] <TimToady> invocant is rw already

[16:30] <TimToady> S12:755

[16:32] <TimToady> and in fact, splice doesn't need the rw

[16:32] <TimToady> presumably the exported versions of methods also mark the first arg as rw

[16:34] <mncharity> ah, ok

[16:39] <pmurias> does compile (or copy over if timestamp/checksum matches) and follow all the @DEPENDENCIES outputing a directory of files sound like a sane way to do seperate compilation?

[16:42] *** wtgee joined
[16:46] <mncharity> I don't know of a sane way to do separate compilation.  because,

[16:47] <pmurias> mncharity: continue please ;)

[16:49] <pmurias> mncharity: would replacing Compiler be the right way to experiment with seperate compilation?

[16:51] <mncharity> timestamp is just a proxy for content.  so the "traditional"  foo.c -> foo.o  is simply a mapping from <foo> to an output file.  with the timestamp of the Makefile, and dependencies from *.o to the Makefile, encoding "what compiler and options were used".

[16:52] <mncharity> so could add a .p5 suffix recognition to... 

[16:59] <mncharity> yeah, it would be Compiler.  but

[17:00] <mncharity> hmm

[17:02] *** ujwalic joined
[17:03] <mncharity> since you are going to need a makefile anyway, I'm wondering whether it might be easier to  -s the individual files, and just cat them on to the end of one generated by compiling an empty file (to get the prelude).

[17:03] <pmurias> mncharity: i'm not going to use a makefile

[17:03] <mncharity> separate build dirs?

[17:03] *** sri_work left
[17:04] *** japhb joined
[17:04] <pmurias> mncharity: sort of

[17:04] <mncharity> and adding a builddir option to elf?  or using builddirs via -I, and teaching use() about .p5?

[17:04] <pmurias> yes

[17:05] <mncharity> yes, which?

[17:05] <pmurias> all of them

[17:06] <pmurias> the first one really

[17:09] <mncharity> re sane, how long does it take your moose elf to start up?

[17:09] <mncharity> (for me, separate compilation would actually take longer...  oh, right.  compile multiple files in invocation.  nm)

[17:11] <mncharity> is there any kind of perl "mips" module?  Ie, so we can tell that my machine is running N perl ops per second, and yours is running M?

[17:11] <pmurias> don't know of any

[17:12] *** ujwalic left
[17:13] <pmurias> my current view of seperate compilation is elf --seperate-compilation Elf.pm -o elf creating a directory named "elf" with compiled Elf.pm and all the p6 stuff it uses in it

[17:17] <mncharity> re mips, ah well.  re sane, I guess it sound sane, given the performance you are still seeing?  I just wish we were sure it's your machine being inherently slow, before adding complexity... .  

[17:18] *** Jedai left
[17:18] <mncharity> re api, it would be nice if -o didn't change meaning.  so ﻿elf --foo=builddir ...everything else is the same as usual...

[17:20] *** justatheory left
[17:20] <mncharity> ﻿elf --cachedir=bar/ -o elfx ElfX.pm ?

[17:22] <pmurias> --builddir maybe

[17:23] *** Auzon joined
[17:25] *** ujwalic joined
[17:26] <mncharity> if you use checksums, then you don't have to duplicate a directory tree in bar, and "cache" would be a good name.  if you mirror the tree, then "build dir" is a good name.

[17:28] <pmurias> you mean renaming the filenames to checksums?

[17:28] <pmurias> i think duplicating the tree is better

[17:29] <mncharity> re checksums, yes.  eg, what STD_red is doing in STD_RED_CACHEDIR.

[17:29] <pugs_svnbot> r20269 | putter++ | [elf_d] Compiler now has hooks for caching to avoid compilation.

[17:29] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20269

[17:29] <lambdabot> Title: Changeset 20269 - Pugs - Trac

[17:29] <mncharity> btw, you are setting ﻿STD_RED_CACHEDIR, yes?

[17:30] <mncharity> so you should be able to just inherit from Compiler now, and use whichever scheme you want.

[17:30] *** Greyscale left
[17:30] <pmurias> mncharity: yes ;)

[17:31] <mncharity> :)

[17:31] <mncharity> feel free to change the hooks.  I was just sketching them in to see what it would look like.

[17:34] <mncharity> anyone know if there is a standard method name for shallow copy?  eg, dup or clone in ruby?

[17:35] <pmurias> i think it's clone

[17:38] <mncharity> ah, ok.

[17:38] <mncharity> tnx

[17:44] *** ujwalic left
[18:08] *** barney joined
[18:19] *** aindilis left
[18:21] <pmurias> mncharity: does perl5.10 run elf faster then perl5.8.8

[18:24] *** aindilis joined
[18:26] *** stevan_ left
[18:27] <mncharity> ﻿pmurias: don't know, checking...

[18:28] *** Fokez left
[18:29] <mncharity> 9.5 vs 10.9 sec

[18:29] <mncharity> so not by much

[18:39] <pmurias> for elf_d

[18:39] <pmurias> ?

[18:41] *** chris2 left
[18:43] <pmurias> i get ~10sec for nomoose

[18:44] *** meppl joined
[18:49] <mncharity> for elf_e moose

[18:52] <mncharity> lunch.  bbl &

[18:52] <mncharity> re ﻿~10sec for nomoose, :/

[18:53] <mncharity> could it be something silly like perl was built unoptimized?

[19:00] *** eternaleye_ joined
[19:03] <mncharity> ﻿pmurias: note that when working on the emitter, you can avoid one compile cycle by doing  elfw EmitWhatever.pm -o elfx ElfX.pm   The EmitWhatever is used to generate elfx, rather than the emitter compiled into elfw.

[19:04] *** cmarcelo joined
[19:46] *** barney left
[19:51] *** stevan_ joined
[19:56] *** ujwalic joined
[19:57] *** meppl left
[20:19] *** eternaleye joined
[20:19] *** eternaleye_ left
[20:25] <literal> <mncharity> ﻿literal: are you setting PUGS_EMBED?

[20:25] <literal> yes, to "parrot perl5"

[20:27] <moritz_> don't embed parrot

[20:27] <moritz_> it's kinda b0rked atm

[20:27] <moritz_> the PIL/PIR emitter, that is

[20:37] <literal> moritz_: my buils still fails in the same way if I don't embed parrot

[20:37] <literal> build

[20:37] <literal> http://sial.org/pbot/30800

[20:37] <lambdabot> Title: Paste #30800 from "literal" at 194.144.99.91

[20:46] <moritz_> literal: did you try a 'make realclean' first?

[20:46] <moritz_> *** Wasn't able to find 'Parrot_stub.o' (this may be a problem)...

[20:46] <moritz_> this looks like it shouldn't happen without parrot

[20:46] <literal> it's a clean make

[20:47] <moritz_> pugs: say $?VERSION

[20:47] <exp_evalbot> OUTPUT[6.2.13␤]

[20:47] <moritz_> pugs: say $?REVISION

[20:47] <exp_evalbot> OUTPUT[*** Undeclared variable: ("$?REVISION",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb689e30c>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xb68a66d8>}),("@_",PELexical {pe_type = (mkType "Array"), pe_proto = <Array:0xb689f7f8>,

[20:47] <exp_evalbot> ..pe_flags = MkEntryFlags {ef_isContext = False}, pe_s...

[20:49] <TimToady> pugs: say $?PUGS_VERSION

[20:49] <exp_evalbot> OUTPUT[Perl6 User's Golfing System, version 6.2.13, October 17, 2006 (r18093)␤]

[20:52] <moritz_> literal: current versions are broken. r18093 is known to compile with GHC 6.6.1 at least

[20:53] <literal> the whole thing actually compiles, as you see (right?), seems to be something else a matter

[20:55] <moritz_> aye

[20:55] <moritz_> and r18093 actually *works*

[20:55] <moritz_> like, it executes code. Smoking works etc.

[21:10] *** jferrero joined
[21:18] *** eternaleye_ joined
[21:20] *** syle joined
[21:23] *** eternaleye left
[21:26] *** ez joined
[21:26] <pugs_svnbot> r20270 | Darren_Duncan++ | ext/Muldis-DB/ : temp removed Value.pm , it will return later

[21:26] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20270

[21:26] <lambdabot> Title: Changeset 20270 - Pugs - Trac

[21:39] *** wtgee left
[21:47] <pugs_svnbot> r20271 | Darren_Duncan++ | renamed ext/Muldis-DB/ to ext/Muldis-Rosetta/

[21:47] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20271

[21:47] <lambdabot> Title: Changeset 20271 - Pugs - Trac

[21:47] *** pmurias left
[21:49] *** syle left
[21:53] *** alanhaggai__ joined
[21:59] *** eternaleye joined
[22:05] <pugs_svnbot> r20272 | Darren_Duncan++ | ext/Muldis-Rosetta/ : part 1 of renaming Muldis DB to Muldis Rosetta - file/path renames

[22:05] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20272

[22:05] <lambdabot> Title: Changeset 20272 - Pugs - Trac

[22:06] *** IllvilJa joined
[22:07] *** alanhaggai left
[22:08] *** FurnaceBoy left
[22:11] *** ez left
[22:26] *** eternaleye_ left
[22:30] *** meppl joined
[22:35] <mncharity> wow.  amazing weather in BOS.  the expression is "weather fronts collide", but how often are things lit so you can watch "there's a cloud zooming along... slam, smoosh, rip, shred, blam... no more cloud" in a few 10's of seconds.

[22:42] *** iblechbot left
[23:01] <mncharity> anyone know if ref() is still part of p6?  the few instances of it in t/ look fossil-like.  

[23:02] <Auzon> I'm pretty sure it's replaced by .WHAT and such, but I'm looking

[23:03] *** thestarslookdown joined
[23:06] *** wtgee joined
[23:07] <mncharity> thanks! :)

[23:07] <Auzon> I can't actually find the specs in the Pugs SVN repo though :-/

[23:07] <Auzon> You can also use "$var ~~ HASH"

[23:07] <Auzon> pugs: $var = {}; $var ~~ HASH

[23:07] <exp_evalbot> OUTPUT[*** ␤    Unexpected " ="␤    expecting "::"␤    Variable "$var" requires predeclaration or explicit package name␤    at /tmp/ahQ3Jtuqic line 1, column 5␤]

[23:07] <Auzon> pugs: $var = {}; $var ~~ HASH;

[23:07] <exp_evalbot> OUTPUT[*** ␤    Unexpected " ="␤    expecting "::"␤    Variable "$var" requires predeclaration or explicit package name␤    at /tmp/NPywboueAz line 1, column 5␤]

[23:08] <Auzon> hm... I'm missing something

[23:08] <[particle]> rakudo: my $var = {}; say $var ~~ Hash;

[23:08] <exp_evalbot> OUTPUT[0␤]

[23:09] <[particle]> rakudo: my %; say %var ~~ Hash;

[23:09] <Auzon> perl6: $var = {}; $var ~~ Hash;

[23:09] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "%; say %va"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;Perl6::Grammar;statementlist' pc 16390 (src/gen_grammar.pir:2404)␤called from Sub

[23:09] <exp_evalbot> ..'parrot;Perl6::Grammar;statement_block' pc 13561 (src/gen_grammar.pir:1390)␤called f...

[23:09] <exp_evalbot> kp6: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤   KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824c084)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[23:09] <exp_evalbot> ..main::DISPATCH('HASH(0x824c084)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[23:09] <exp_evalbot> ..pugs: OUTPUT[*** ␤    Unexpected " ="␤    expecting "::"␤    Variable "$var" requires predeclaration or explicit package name␤    at /tmp/K7PqhQK2zI line 1, column 5␤]

[23:09] <Auzon> Oops.

[23:09] <exp_evalbot> ..rakudo: OUTPUT[Scope  not found for PAST::Var '$var'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 158 (src/PCT/HLLCompiler.pir:103)␤called from Sub 'parrot;PAST::Compiler;post_children' pc 1207 (src/PAST/Compiler.pir:144)␤called from Sub 'parrot;PAST::Compiler;inline' pc 4310

[23:09] <exp_evalbot> ..(src/PAST/Compiler.pir:1062)␤called from Sub 'parrot;PAST::Compiler;post...

[23:09] <Auzon> sorry [particle]

[23:09] <[particle]> rakudo: my %var; say %var ~~ Hash;

[23:09] <exp_evalbot> OUTPUT[1␤]

[23:10] <[particle]> rakudo: my $var = {}; say $var.WHAT;

[23:10] <exp_evalbot> OUTPUT[Code␤]

[23:11] <Auzon> Then again, hashrefs are dead and captures should be used instead, which I don't know yet

[23:13] *** Limbic_Region joined
[23:15] <mncharity> ok, thanks.

[23:18] *** ujwalic_ joined
[23:24] <mncharity> okay... WHAT's up.

[23:25] *** justatheory joined
[23:26] <mncharity> so who's going to translate the classic "Who's on first?" joke to p6?

[23:28] <Auzon> pugs: $.WHO

[23:28] <exp_evalbot> OUTPUT[*** Undeclared variable: ("$__SELF__",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb699ee40>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xb67de42c>}),("@_",PELexical {pe_type = (mkType "Array"), pe_proto = <Array:0xb699e2dc>,

[23:28] <exp_evalbot> ..pe_flags = MkEntryFlags {ef_isContext = False}, pe_st...

[23:28] <Auzon> I think we need .WHO first ;)

[23:29] <mncharity> lol

[23:35] *** justatheory left
[23:39] <mncharity> pugs: Str ~~ Object

[23:39] <exp_evalbot> RESULT[Bool::True]

[23:39] <mncharity> ﻿pugs: Str ~~ Any

[23:40] <mncharity> ﻿pugs: Str.does(Str)

[23:40] <Auzon> hm, it didn't like that one :P

[23:40] <mncharity> :)

[23:40] <mncharity> ﻿pugs: Str.isa(Object)

[23:40] <[particle]> rakudo: Str ~~ Any

[23:40] <exp_evalbot> RESULT[Method 'perl' not found for invocant of class 'Bool'␤current instr.: '_block10' pc 35 (EVAL_11:16)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 785 (src/PCT/HLLCompiler.pir:458)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1067 (src/PCT/HLLCompiler.pir:587)␤called from Sub

[23:40] <exp_evalbot> ..'parrot;PCT::HLLCompiler;command_line' pc 1246 (src...

[23:40] <[particle]> rakudo: say Str ~~ Any

[23:40] <exp_evalbot> OUTPUT[0␤]

[23:41] <[particle]> rakudo: say Perl6Str ~~ Any

[23:41] <exp_evalbot> OUTPUT[0␤]

[23:41] <[particle]> hrm

[23:41] <Auzon> rakudo: say Any ~~ Any

[23:41] <[particle]> rakudo: say String ~~ Any

[23:41] <exp_evalbot> OUTPUT[1␤]

[23:41] <exp_evalbot> OUTPUT[0␤]

[23:41] <mncharity> ﻿rakudo: say Str ~~ Object

[23:41] <wolverian> mncharity, leading space :)

[23:42] <wolverian> rakudo: say Str ~~ Object

[23:42] <exp_evalbot> OUTPUT[1␤]

[23:42] <mncharity> sigh.  thanks

[23:42] *** ujwalic left
[23:42] <wolverian> np

[23:42] <[particle]> looks like rakudo still needs a little jiggering in its type hierarchy

[23:42] <mncharity> p﻿ugs: Str ~~ Any

[23:42] <mncharity> p﻿ugs: Str ~~ Any

[23:42] <mncharity> ﻿p﻿ugs: 3

[23:42] <[particle]> rakudo: say Junction ~~ Any

[23:42] <exp_evalbot> OUTPUT[0␤]

[23:42] <Auzon> rakudo: say Object ~~ Any

[23:42] <exp_evalbot> OUTPUT[0␤]

[23:42] <[particle]> rakudo: say Junction ~~ Object

[23:42] <exp_evalbot> OUTPUT[1␤]

[23:43] <mncharity> pugs: 3

[23:43] <exp_evalbot> RESULT[3]

[23:43] <[particle]> rakudo: say Any ~~ Object

[23:43] <exp_evalbot> OUTPUT[1␤]

[23:43] <mncharity> pugs: Str ~~ Any

[23:43] <exp_evalbot> RESULT[Bool::True]

[23:44] <mncharity> pugs: Str.isa(Any)

[23:44] <exp_evalbot> RESULT[Bool::True]

[23:45] *** tango1 joined
[23:46] <tango1> hey everyone

[23:46] <Auzon> Hi.

[23:46] <tango1> wow a long time since I been in an IRC chat room

[23:47] <Tene> Hi!

[23:48] <wolverian> welcome back, then :)

[23:48] <tango1> been at least over 4 years

[23:53] *** xdg left
[23:53] *** xdg joined
[23:56] *** meppl left
