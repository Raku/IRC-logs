[00:00] <thei0s> a solution would be the old perl5 style: ${/<single><sth>}

[00:06] <[particle]1> thei0s: you can look at http://feather.perl6.nl/~azawawi/html/spec/S05-mass/rx.t.html to see how STD.pm parses it

[00:07] <lambdabot> Title: ../../t/spec/S05-mass/rx.t

[00:07] <[particle]1> it'll take me a while to load 7.2MB over my mobile phone

[00:07] <thei0s> huh, you are on the net over a mobile?...

[00:07] <[particle]1> yes

[00:09] <[particle]1> getting an iv infusion atm in a hospital

[00:09] <[particle]1> sounds more dramatic than it is, though

[00:09] <thei0s> yes, it sounds dramatic... :)

[00:10] <rakudo_svn> r33469 | jonathan++ | [rakudo] Track changes in namespace/class symbol handling in Parrot in code to convert multis to Perl6MultiSub.

[00:10] <rakudo_svn> r33470 | jonathan++ | [rakudo] Implement some missing methods and add some documentation to the Perl6MultiSub PMC.

[00:10] <thei0s> it looks like this is not covered

[00:19] <[particle]1> pmichaud: still around?

[00:19] *** smg left
[00:20] <rakudo_svn> r33471 | jonathan++ | [rakudo] Re-enable multi dispatch caching, tests continue passing.

[00:32] *** elmex left
[00:34] <meppl> gute nacht

[00:36] *** meppl left
[00:46] *** bacek joined
[00:52] *** Limbic_Region left
[00:55] *** thei0s left
[00:59] <pmichaud> following the postcircumfix notion, $/<single> would likely parse as $<single> and not [$/]<single>

[00:59] <pmichaud> however, I think it'd be rare to want to match $/ in a regex, and as you can see, it's easy to use brackets to disambiguate.

[01:00] <rakudo_svn> r33473 | jonathan++ | [rakudo] .perl for proto-objects.

[01:00] <rakudo_svn> r33474 | jonathan++ | [rakudo] First cut of .perl for Signature.

[01:00] <rakudo_svn> r33475 | jonathan++ | [rakudo] When we have an ambiguous dispatch, report the signatures of the candidates that were ambiguous.

[01:00] <pmichaud> [particle]: I'm back.  :-)

[01:00] <pmichaud> will have to leave again shortly.

[01:01] <pmichaud> jnthn: wouldn't .perl on a protoobject need to return its longname?

[01:02] *** lambdabot left
[01:02] <jnthn> pmichaud: Hmm. Yes. :-)

[01:02] <jnthn> But we haven't done .WHERE yet, I don't think.

[01:02] <jnthn> No

[01:02] <jnthn> .WHO

[01:03] <[particle]1> pmichaud: i'm trying to figure the best tree to represent cmdline options

[01:03] <[particle]1> actually, right now i'm testing my grammar, which parses everything in S06 so far

[01:03] <[particle]1> don't know if it parses correctly, but it does parse

[01:03] <pmichaud> I tend to think of cmdline options as array-like things and not tree-like things.

[01:04] *** lambdabot joined
[01:04] <pmichaud> unless, of course, you mean array of tree-like things :-)

[01:06] <[particle]1> well, i need to differentiate between options and resources

[01:06] <[particle]1> but still get them in order

[01:07] <[particle]1> rule arguments {    [ $<argument>=[ <option> | <resource> ] ]* ... }

[01:07] <jnthn> pmichaud: I've added a comment to the ticket for .WHO saying .perl for Proto Object should be updated when it's done.

[01:07] <[particle]1> is what i have now

[01:08] <[particle]1> that gives me in-order, and by-type arrays

[01:09] <pmichaud> I'm not sure you can tell for each element if it's an option or a resource, though.

[01:09] <pmichaud> $<argument> will just be an array of text-like objects with no submatches.

[01:10] <pmichaud> have to run -- bbl

[01:10] <[particle]1> ok, i've modified to something better

[01:10] <[particle]1> thanks

[01:14] *** DemoFreak joined
[01:18] <jnthn> [particle]1: How's the S16 spec going?

[01:19] <jnthn> .oO( I think it's S16... )

[01:19] <[particle]1> 19

[01:19] <jnthn> Ah. :-)

[01:19] <jnthn> The one you're working on.

[01:19] <[particle]1> i'm writing tests for my grammar

[01:19] <jnthn> Ah, OK. Code work. :-)

[01:19] <[particle]1> if i can keep a nice regression suite, i can make sure i haven't missed anything

[01:20] <jnthn> Yes.

[01:20] <[particle]1> the grammar is still in progress, and will be the basis for my synopsis

[01:20] <[particle]1> it's code-first-speccing

[01:20] <jnthn> Aha, good plan.

[01:20] <[particle]1> er, test-first-design?

[01:20] <[particle]1> anyway... :)

[01:20] <[particle]1> i'm agile like that.

[01:23] *** alester_ joined
[01:36] <[particle]1> gotta run &

[01:36] *** [particle]1 left
[01:49] *** smg joined
[01:50] *** bacek left
[02:02] *** DemoFreak left
[02:15] *** cognominal left
[02:24] *** eternaleye joined
[02:32] *** hercynium_ left
[02:40] *** [particle]1 joined
[02:54] *** sail0r joined
[03:00] *** sail0r left
[03:05] *** drbean left
[03:06] *** drbean joined
[03:08] *** cookys left
[03:08] *** cookys joined
[03:14] *** Psyche^ joined
[03:18] *** stephens left
[03:24] *** alester_ left
[03:30] *** Patterner left
[03:30] *** Psyche^ is now known as Patterner

[03:31] *** ChrisDavaz joined
[03:39] *** alc joined
[04:04] *** wayland76 joined
[04:05] <wayland76> Well, I'm back, but my screen's only 800x600 (anyone else hate Xorg sometimes?) :)

[04:06] <Patterner> I violate the spirit of linux and use a binary gfx driver. but I have 2048x1536. Har.Har.Har.

[04:21] *** alester_ joined
[04:23] *** ChrisDavaz left
[04:34] *** pnu_ joined
[04:34] *** pnu left
[05:27] *** ChrisDavaz joined
[05:35] *** drbean_ joined
[05:36] *** drbean left
[05:37] <pugs_svn> r24148 | hinrik++ | [util/perl6.vim] fix interpolated contextualizers, add more keywords, more todo items

[05:40] *** xinming joined
[05:55] *** xinming_ left
[05:59] *** lambdabot left
[06:00] *** justatheory joined
[06:02] *** lambdabot joined
[06:08] *** drbean joined
[06:13] *** ab5tract_ joined
[06:13] *** drbean__ joined
[06:13] *** [particle]1 left
[06:15] *** ab5tract_ left
[06:16] *** ab5tract_ joined
[06:17] *** drbean left
[06:17] *** ab5tract_ left
[06:18] *** drbean_ left
[06:19] *** drbean__ left
[06:19] *** drbean joined
[06:25] *** drbean left
[06:26] *** drbean joined
[06:37] *** jrockway left
[06:37] *** lisppaste3 left
[06:38] *** jrockway joined
[06:38] <wayland76> Patterner: I installed the binary driver, and it locked up my whole computer when I tried to get both screens going :)

[06:39] <Patterner> ouch

[06:39] <Patterner> Evil ATI or Good Nvidia?

[06:40] *** xinming_ joined
[06:45] *** buubot left
[06:45] *** buubot joined
[06:48] *** alester_ left
[06:49] *** drbean_ joined
[06:59] <literal> damn you Perl 6

[07:00] <literal> vim syntax highlighting of unicode stuff and unspace is quite impossible

[07:00] <literal> :)

[07:02] *** drbean left
[07:04] *** xinming left
[07:13] *** stephens joined
[07:13] *** [particle]2 joined
[07:14] *** apeiron left
[07:16] *** adc_penner joined
[07:31] *** [particle] left
[07:34] *** stephens left
[07:39] *** DemoFreak joined
[08:08] *** adc_penner left
[08:09] *** ashizawa joined
[08:12] *** adc_penner joined
[08:16] <literal> perl6: say "yay" if 1<3

[08:16] <p6eval> elf 24148, pugs, rakudo 33477: OUTPUT[yay␤]

[08:32] <pugs_svn> r24149 | hinrik++ | [util/perl6.vim] literal string fixes, support hyperoperators, keyword reorganization, more todo items

[08:38] *** iblechbot joined
[08:41] <literal> perl6: 050.perl

[08:41] <p6eval> rakudo 33477: OUTPUT[Leading 0 does not indicate octal in Perl 6␤]

[08:41] <p6eval> ..pugs: RESULT["50"]

[08:41] <p6eval> ..elf 24149: RESULT["40"␤]

[08:41] <moritz_> rakudo: say 050

[08:41] <p6eval> rakudo 33477: OUTPUT[Leading 0 does not indicate octal in Perl 6␤50␤]

[08:41] <moritz_> elf FAIL

[08:42] <literal> very much so

[08:42] *** drbean_ left
[08:42] *** drbean joined
[08:42] <moritz_> rakudo's output didn't include the '50' due to a p6eval weirdness

[08:43] <moritz_> perl6: print 050.perl

[08:43] <p6eval> pugs: OUTPUT[50]

[08:43] <p6eval> ..rakudo 33477: OUTPUT[Leading 0 does not indicate octal in Perl 6␤50]

[08:43] <p6eval> ..elf 24149: OUTPUT[40]

[08:47] <literal> perl6: say 1e2

[08:47] <p6eval> elf 24149, pugs, rakudo 33477: OUTPUT[100␤]

[08:49] <literal> perl6: say 1E1

[08:49] <p6eval> elf 24149, pugs, rakudo 33477: OUTPUT[10␤]

[08:51] <literal> perl6: say 1.

[08:51] <p6eval> rakudo 33477: OUTPUT[Statement not terminated properly at line 1, near "."␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[08:51] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected end of input␤    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript␤    at /tmp/X0aIBBAze0 line 1, column 7␤]

[08:51] <p6eval> ..elf 24149: OUTPUT[Parse error in: /tmp/p6CVKUYqSH␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: say 1.␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤  STD_red/std.rb:210:in

[08:51] <p6eval> ..`_UNIT'...

[08:52] <moritz_> I think that's actually correct (that it's a parse error)

[08:52] <literal> ok

[08:55] *** nothingmuch left
[08:58] *** bacek joined
[09:07] *** zamolxes left
[09:07] *** elmex joined
[09:11] *** araujo left
[09:13] *** kane_ joined
[09:18] *** adc_penner left
[09:23] *** jferrero joined
[09:29] <pugs_svn> r24150 | hinrik++ | [util/perl6.vim] improved highlighting of numbers, <> quote, and variables

[09:49] *** nothingmuch joined
[09:50] *** DemoFreak left
[09:55] *** thei0s joined
[09:56] *** wayland76 left
[10:15] *** alc left
[10:20] *** smg left
[10:22] *** nothingmuch left
[10:46] *** zamolxes joined
[10:55] *** smg joined
[11:02] *** ChrisDavaz left
[11:10] *** knollix_ru joined
[11:17] *** knollix_ru left
[11:28] *** smg left
[11:42] *** masak joined
[11:44] *** ChrisDavaz joined
[11:51] <bacek> pugs: my ($a,$b,@c) = 1..5; say ~@c

[11:51] <p6eval> pugs: OUTPUT[3␤]

[11:51] <bacek> hmmm

[11:52] <bacek> pugs: my ($a,@b,$c) = 1..5; say ~@b

[11:52] <p6eval> pugs: OUTPUT[2␤]

[11:52] *** aindilis left
[11:53] *** aindilis joined
[11:54] <bacek> pugs: my ($a,@b,$c) = 1..5; say $c

[11:54] <p6eval> pugs: OUTPUT[3␤]

[11:54] * bacek prefer to have $c eq 5...

[11:56] <masak> bacek: how would @b know to take exactly three elements?

[11:56] <bacek> masak: how [*-1] works?

[11:56] <masak> what if there were two arrays, `my ($a, @b, $c, @d)`

[11:57] <masak> bacek: I've been thinking about that too ([*-1])

[11:57] <masak> I honestly don't know.

[11:57] <bacek> masak: good question :)

[11:57] <masak> seems like magic to me

[11:58] *** bsdperl left
[11:59] * bacek vote for postcircumfix:<?>

[12:00] <bacek> ($a,@b,$c,@d) = 1..5; will produce @b ~~ (2,3,4)

[12:01] <bacek> ($a,@b?,$c,@d) = 1..5; will produce @b ~~ (2) :)

[12:01] <masak> postcircumfix ? in parameter lists already has other semantics.

[12:07] *** Lorn joined
[12:09] <bacek> pugs: grammar Foo { rule Token { \w+ }; rule ws { \s+| 'W'+ }; rule Tokens { <Token> <Token>}; }; say "foo WWW bar" ~~ Foo::Tokens

[12:09] <p6eval> pugs: OUTPUT[*** No compatible multi variant found: "&Foo::Tokens"␤    at /tmp/DrOz8QlL3O line 1, column 97 - line 2, column 1␤]

[12:09] <bacek> pugs: grammar Foo { rule Token { \w+ }; rule ws { \s+| 'W'+ }; rule Tokens { <Token> <Token>}; }; say "foo WWW bar" ~~ Foo

[12:09] <p6eval> pugs: OUTPUT[␤]

[12:09] <bacek> pugs: grammar Foo { rule Token { \w+ }; rule ws { \s+| 'W'+ }; rule TOP { <Token> <Token>}; }; say "foo WWW bar" ~~ Foo

[12:09] <p6eval> pugs: OUTPUT[␤]

[12:10] <bacek> pugs: grammar Foo { rule Token { \w+ }; rule ws { \s+| 'W'+ }; rule TOP { <Token> <Token>}; }; say "foo" ~~ Foo

[12:10] <p6eval> pugs: OUTPUT[␤]

[12:10] <bacek> pugs: grammar Foo { rule Token { \w+ }; rule ws { \s+| 'W'+ }; rule TOP { <Token> <Token>}; }; say ("foo" ~~ Foo).perl

[12:10] <p6eval> pugs: OUTPUT[Bool::False␤]

[12:10] <bacek> interesting...

[12:10] <masak> bacek: it's not a good idea at this time to call a rule 'ws', methinks.

[12:10] <masak> it's a bug in PGE.

[12:10] <bacek> it's 'rule'

[12:11] <masak> yes. so?

[12:11] <bacek> masak: 'rule' should use 'ws' rule between tokens

[12:11] <bacek> But I agreed with 'bug in PGE' :)

[12:12] <bacek> s/d//

[12:15] <bacek> pugs: grammar Foo { rule Token { \w+ }; rule ws { [\s| 'W']+ }; rule TOP { <Token> <Token>}; }; say ("foo" ~~ Foo).perl

[12:15] <p6eval> pugs: OUTPUT[Bool::False␤]

[12:15] <bacek> pugs: grammar Foo { rule Token { \w+ }; rule ws { [\s| 'W']+ }; rule TOP { <Token>+}; }; say ("foo" ~~ Foo).perl

[12:15] <p6eval> pugs: OUTPUT[Bool::False␤]

[12:16] <bacek> it's... weird

[12:16] <bacek> perl6: grammar Foo { rule Token { \w+ }; rule ws { [\s| 'W']+ }; rule TOP { <Token>+}; }; say ("foo" ~~ Foo).perl

[12:16] <p6eval> rakudo 33477: OUTPUT[maximum recursion depth exceeded␤current instr.: 'parrot;PGE;Match;new' pc 25 (compilers/pge/PGE/Match.pir:54)␤]

[12:16] <p6eval> ..pugs: OUTPUT[Bool::False␤]

[12:16] <p6eval> ..elf 24150: OUTPUT[Can't locate object method "cb__RegexDef" via package "EmitSimpleP5" at ./elf_f line 1612.␤]

[12:27] *** jimmy__ joined
[12:27] <jimmy__> rakudo: grammar Foo { rule Token { \w+ }; rule ws { \s+| ''W''+ }; rule Tokens { <Token> <Token>}; }; say "foo WWW bar" ~~ Foo::Tokens;

[12:27] <p6eval> rakudo 33477: OUTPUT[foo WWW ␤]

[12:28] <jimmy__> rakudo: grammar Foo { rule Token { \w+ }; rule ws { \s+| ''W''+ }; rule Tokens { <Token><.ws><Token>}; }; say "foo WWW bar" ~~ Foo::Tokens;

[12:28] <p6eval> rakudo 33477: OUTPUT[foo WWW ␤]

[12:28] <jimmy__> rakudo: grammar Foo { rule Token { \w+ }; rule ws { \s+| ''W''+ }; rule Tokens { <Token><ws><Token>}; }; say "foo WWW bar" ~~ Foo::Tokens;

[12:28] <p6eval> rakudo 33477: OUTPUT[foo WWW ␤]

[12:28] <jimmy__> rakudo: grammar Foo { rule Token { \w+ }; rule ws { \s+| ''W''+ }; rule Tokens { <Token> }; }; say "foo WWW bar" ~~ Foo::Tokens;

[12:28] <p6eval> rakudo 33477: OUTPUT[foo ␤]

[12:28] <jimmy__> rakudo: grammar Foo { rule Token { \w+ }; rule ws { \s+| ''W''+ }; rule Tokens { <Token><ws> }; }; say "foo WWW bar" ~~ Foo::Tokens;

[12:28] <p6eval> rakudo 33477: OUTPUT[foo ␤]

[12:28] <jimmy__> rakudo: grammar Foo { rule Token { \w+ }; rule ws { \s+| 'W'+ }; rule Tokens { <Token><ws> }; }; say "foo WWW bar" ~~ Foo::Tokens;

[12:28] <p6eval> rakudo 33477: OUTPUT[foo ␤]

[12:29] *** [particle] joined
[12:29] *** [particle]1 joined
[12:29] <jimmy__> rakudo: grammar Foo { rule Token { \w+ }; rule ws { \s+| 'W'+ }; rule Tokens { <ws> }; }; say "foo WWW bar" ~~ Foo::Tokens;

[12:29] <p6eval> rakudo 33477: OUTPUT[␤]

[12:31] <moritz_> rakudo: Grammar A { rule stuff { \d+ \d+}; token ws { 'A'+ } } say "3A4" ~~ A::stuff

[12:31] <p6eval> rakudo 33477: OUTPUT[Statement not terminated properly at line 1, near "A { rule s"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[12:31] <moritz_> rakudo: Grammar A { rule stuff { \d+ \d+ }; token ws { 'A'+ } }; say "3A4" ~~ A::stuff

[12:31] <p6eval> rakudo 33477: OUTPUT[Statement not terminated properly at line 1, near "A { rule s"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[12:31] <moritz_> rakudo: grammar A { rule stuff { \d+ \d+ }; token ws { 'A'+ } }; say "3A4" ~~ A::stuff

[12:31] <p6eval> rakudo 33477: OUTPUT[␤]

[12:31] *** ejs joined
[12:31] <moritz_> so overriding <ws> from rakudo doesn't work.

[12:31] <jimmy__> yes

[12:33] *** [particle]2 left
[12:34] <masak> ...and calling something 'ws' is not a good idea from the beginning, due to ticket number <mumble mumble>.

[12:35] <moritz_> masak: calling something 'text' is equally confusing, as you surely remember :-)

[12:35] <masak> yes, that's the bug.

[12:35] <masak> too bad, 'text' is a useful, common name

[12:36] <moritz_> rename that to ____pge__text__should__never__be__exposed, and nobody will ever find out with black box testing :-)

[12:38] <masak> I've been thinking along similar thoughts.

[12:38] <masak> but I'll leave that in pmichaud++'s competent hands.

[12:58] *** smg joined
[13:02] <pmichaud> the problem is that PGE confuses Match's .text with a grammar's .text

[13:02] <pmichaud> in the case of <ws>, the issue is that the thing that invokes a rule isn't creating the correct sort of Match object.

[13:04] <pmichaud> right now Match objects are intimately tied to grammars

[13:04] <pmichaud> (so that inheritance can work)

[13:05] <masak> pmichaud: are you blocking on the spec in some regards?

[13:05] <jimmy__> <.ws> and <ws> are the same ?

[13:05] <pmichaud> same rule, yes.  <.ws> is non-capturing, <ws> is capturing.

[13:05] <masak> jimmy__: the latter "captures" into $/, the former doesn't.

[13:06] <jimmy__> i saw.

[13:06] *** ashizawa left
[13:06] <jimmy__> so, PGE should be improved ?

[13:07] <moritz_> I think it's the rakudo "bindings" to PGE

[13:07] <moritz_> (but PGE also needs to be improved, it needs to handle longest-token-matching)

[13:07] <pmichaud> the immediate issue is rakudo's interfacing with PGE

[13:07] <masak> ...and Perl 6 closures.

[13:08] <pmichaud> the next issue after that is that we don't have the official syntax for invoking a rule from a grammar

[13:08] <pmichaud> and the issue after that is that PGE needs to be improved to follow the spec (whatever it ends up being)

[13:08] <moritz_> and the spec might change a bit, if $/.tokens or some such will be incorporated

[13:13] <pmichaud> (that could actually be a somewhat significant change)

[13:15] *** apeiron joined
[13:20] <rakudo_svn> r33478 | pmichaud++ | [rakudo]: spectest-progress.csv update: 227 files, 4703 passing, 0 failing

[13:23] *** vixey joined
[13:32] <masak> ($/.tokens)++

[13:33] *** jimmy__ left
[13:37] *** [particle]1 left
[13:42] *** [particle]1 joined
[13:49] *** cognominal joined
[13:50] *** cognominal left
[13:53] *** cognominal joined
[13:56] *** [particle]2 joined
[13:56] *** [particle]3 joined
[13:57] *** masak left
[14:01] *** [particle] left
[14:02] *** cdavaz joined
[14:03] *** ChrisDavaz left
[14:06] *** jferrero left
[14:07] *** Lunchy left
[14:07] *** Lunchy joined
[14:08] *** Lunchy left
[14:09] *** Lunchy joined
[14:12] *** [particle]1 left
[14:19] *** lisppaste3 joined
[14:23] *** ejs1 joined
[14:33] *** ejs left
[14:36] *** jhorwitz joined
[14:40] *** zamolxes left
[14:41] *** zamolxes joined
[14:49] *** hercynium joined
[14:55] *** smg left
[15:00] * ruoso later &

[15:00] *** ruoso left
[15:04] *** ejs1 left
[15:13] *** alester left
[15:13] *** apeiron left
[15:20] *** rindolf joined
[15:21] *** apeiron joined
[15:23] *** Exodist joined
[15:24] *** masak joined
[15:33] *** DemoFreak joined
[15:35] <masak> rakudo: say "我想租一辆自行车。"

[15:35] <p6eval> rakudo 33480: OUTPUT[我想租一辆自行车。␤]

[15:35] <masak> impressive.

[15:45] *** cdavaz left
[15:55] <masak> rakudo: say "我想租一辆自行车。".chars

[15:55] <p6eval> rakudo 33481: OUTPUT[9␤]

[15:55] <masak> yup.

[15:57] * moritz_ didn't know that p6eval was that unicode safe :-)

[15:57] <masak> no, it's a positive surprise :)

[15:59] *** eternaleye left
[16:05] *** stephens joined
[16:06] *** ejs joined
[16:09] *** [particle]2 left
[16:17] *** thei0s1 joined
[16:20] *** zamolxes_ joined
[16:21] *** zamolxes left
[16:23] *** thei0s1 left
[16:23] *** thei0s1 joined
[16:26] *** smg joined
[16:29] *** rindolf left
[16:33] *** thei0s left
[16:52] *** zamolxes_ left
[16:52] *** smg left
[17:00] <[particle]3> http://creativecommons.org/weblog/entry/11045

[17:00] <lambdabot> Title: Non-Commercial study questionnaire - Creative Commons

[17:00] *** [particle]3 is now known as [particle]

[17:03] *** ejs left
[17:09] *** ejs joined
[17:12] <masak> [particle]: I agree with Stephen, the last to comment on that post. the 21% question is impossible to answer correctly.

[17:15] <[particle]> i'm at 56% and sick of this survey already

[17:16] <masak> I dropped it at 21%, but even before that I didn't like the alternatives.

[17:16] <[particle]> agreed

[17:17] <[particle]> i wonder how much of pugs's CGI.pm rakudo can parse now

[17:18] <[particle]> and the other ext/ modules

[17:18] <[particle]> it'd be a good test for STD.pm, too, i suppose

[17:18] <masak> aye

[17:18] <[particle]> masak: do you have highlighted November code yet?

[17:19] <masak> [particle]: define 'highlighted November code'.

[17:19] <[particle]> azawawi's script

[17:19] <[particle]> run against November codebase

[17:19] <masak> [particle]: haven't tried that, no.

[17:19] <masak> what should I expect to find?

[17:20] <[particle]> wonder if there's a way to plug in a highlight engine to SVN::Web etc

[17:20] <masak> would be neat.

[17:21] <masak> [particle]: but don't go revive CGI.pm before we can develop a decent Web.pm :)

[17:21] * masak has to go now

[17:22] *** masak left
[17:27] *** buu joined
[17:28] *** ejs left
[17:35] *** jan__ left
[17:36] *** alester joined
[17:36] *** DemoFreak left
[17:37] *** jan_ joined
[17:46] *** meppl joined
[17:49] *** ejs joined
[17:51] *** apeiron left
[17:56] *** M8YCjC56g joined
[17:58] *** M8YCjC56g left
[17:59] *** diakopter joined
[18:02] *** charsbar_ joined
[18:04] *** diakopter left
[18:04] *** diakopter joined
[18:07] *** araujo joined
[18:09] *** shachaf joined
[18:20] *** schmalbe joined
[18:21] *** apeiron joined
[18:22] *** [particle]1 joined
[18:22] *** [particle] left
[18:22] *** smg joined
[18:22] *** [particle]1 is now known as [particle]

[18:27] *** diakopter left
[18:29] *** diakopter joined
[18:32] *** ejs left
[18:34] *** sri_kraih joined
[18:39] *** sri_kraih left
[18:53] *** ryanc left
[18:54] *** adc_penner joined
[18:55] <thepler> rakudo: (undef === undef).say

[18:55] <p6eval> rakudo 33482: OUTPUT[0␤]

[19:10] <rakudo_svn> r33483 | bernhard++ | [codingstd] Fix some glitches: c_parens, tabs and trailing_space

[19:15] <PerlJam> Are most of the perl6 modules that people have developed in the pugs repo?

[19:16] <moritz_> PerlJam: either there, or in the repo of the November wiki

[19:17] *** ryanc joined
[19:21] *** ejs joined
[19:24] *** renormalist joined
[19:26] *** [particle]1 joined
[19:31] *** [particle] left
[19:40] *** [particle] joined
[19:46] *** Lorn left
[19:48] *** schmalbe left
[19:58] *** [particle]1 left
[20:10] <rakudo_svn> r33487 | pmichaud++ | [rakudo]:  Add inline PIR to Perl 6 subroutines.

[20:10] *** mncharity joined
[20:16] <mncharity> no coding yesterday.  did see a fun talk - Saul Greenberg's Enhancing Creativity Through Toolkits  http://crpit.com/confpapers/CRPITV28Greenberg.pdf  http://www.google.com/url?sa=U&start=1&q=http://www.researchchannel.org/prog/displayevent.aspx%3FrID%3D11041%26fID%3D569&ei=aDk4SasZjLL0BMydoZgP&usg=AFQjCNHmwemUxuzeuImMSxqaAYs-qQ8oGg

[20:16] <lambdabot> Title: Enhancing Creativity with (Groupware) Toolkits

[20:16] <mncharity> (I don't know that the web video matches the talk)

[20:17] <mncharity> sigchi committee in town.  lots'o talks. :)

[20:20] <rakudo_svn> r33488 | moritz++ | [cage] trailing whitespace

[20:21] <mncharity> cage?

[20:21] <moritz_> mncharity: cage cleaning for the bird

[20:21] *** kane_ left
[20:22] <mncharity> :)

[20:31] *** Hinrik joined
[20:31] <Hinrik> perl6: say 'a\\b\''

[20:31] <p6eval> pugs, rakudo 33489: OUTPUT[a\b'␤]

[20:31] <p6eval> ..elf 24150: OUTPUT[a\b\'␤]

[20:32] <moritz_> mncharity: do you haev a bug tracker for elf? ;-)

[20:33] <moritz_> perl6: say 'a\\b\''.chars

[20:33] <p6eval> pugs, rakudo 33489: OUTPUT[4␤]

[20:33] <p6eval> ..elf 24150: OUTPUT[5␤]

[20:35] <pugs_svn> r24151 | moritz++ | [t/spec] add a quoting test by Hinrik++

[20:43] <mncharity> moritz_: ???  To report to the mncharity and TimToady of early Spring that some combination of STD and STD_red is being sloppy with strings?  Known.  Even at the time.  Since then, the STD.pm string code has been rewritten, and STD_red is in maintenance-only mode, awaiting disposal.  Since it turned out no one was interested in writing p6 prelude, elf has been about bootstrap, not bits and pieces.

[20:44] <mncharity> So a bug tracker wouldn't help.  They're for coordinating work among developers, or tracking details.  No developers, and nothing to track just now.  Just a clearly staked path to bootstrap, being walked slowly...

[20:45] <moritz_> mncharity: it seems you didn't notice the smiley ;-)

[20:45] <mncharity> ;)

[20:45] <PerlJam> moritz_: when you hit that close to a nerve, smileys don't help  :)

[20:46] <mncharity> I think it was an "elf FAIL" comment in the backlog seen a few minutes ago. :)

[20:46] <moritz_> sorry for that

[20:47] <moritz_> not important for bootstrap, that one

[20:47] <mncharity> oh, so very no problem.  #re sorry

[20:47] <moritz_> mncharity: what's your plan right now? first bootstrap, then try to get more developers on board? or the other way round?

[20:48] <mncharity> re string, STD_blue is giving a valid string parse, so modulo my having a very incomplete understanding of nibbles and quibbles and etcbibbles, escaping should be working in elfblue.

[20:48] <moritz_> lol # etcbibbles

[20:50] *** ruoso joined
[20:50] <mncharity> re plan, bootstrap and then developers.

[20:51] <ruoso> Hello!

[20:51] <mncharity> Though I'd welcome anyone working on prelude written in p6, either on elf or rakudo.

[20:51] <mncharity> hi ruoso :)

[20:51] <ruoso> hi mncharity 

[20:51] <ruoso> I must say I make mine your words 

[20:51] <ruoso> SMOP will need prelude written in Perl 6

[20:51] <ruoso> also

[20:52] <ruoso> mncharity, are you aware of v6/smop/src-s1p/*pm 

[20:52] <ruoso> ?

[20:53] <mncharity> there are bits of prelude scattered around.  in pugs, elf, elsewhere(?).  any thoughts on how to attract someone to work on prelude?

[20:53] <mncharity> re aware, no, well, not sure, looking...

[20:53] <mncharity> http://svn.pugscode.org/pugs/v6/smop/src-s1p/

[20:54] <lambdabot> Title: pugs - Revision 24151: /v6/smop/src-s1p

[20:54] <ruoso> mncharity, the src-s1p directory is my intended place for prelude in SMOP

[20:56] *** sjwalters left
[20:58] <mncharity> neat.  the ClassHOW and Object code aren't things elf can handle any time soon.  But once you start putting in things like pug's Prelude.pm, some of that should be elfable.

[20:58] *** sjwalter joined
[20:58] <mncharity> http://svn.pugscode.org/pugs/src/perl6/Prelude.pm

[20:58] *** sjwalter left
[20:59] *** bacek left
[21:00] <mncharity> elf currently has http://svn.pugscode.org/pugs/misc/elf/elf_h_src/Prelude.pm  http://svn.pugscode.org/pugs/misc/elf/elf_h_src/PrimitivesP5.pm  http://svn.pugscode.org/pugs/misc/elfish/on_sbcl/PrimitivesSBCL.pm

[21:00] <mncharity> there's various other stuff scattered around.  I'm not sure how much of it is worth salvaging, if any.

[21:00] *** eternaleye joined
[21:02] *** apeiron left
[21:02] <ruoso> mncharity, SMOP is not able to run all of ClassHOW and Object yet...

[21:02] <ruoso> we're working on mildew to make it work

[21:03] <ruoso> I started by ClassHOW and Object just because SMOP is all about OO, so that was pretty much the most reasonable place to start

[21:03] <mncharity> nod

[21:03] <ruoso> mncharity, take a look at mildew/t

[21:03] <ruoso> you'll see what it can run alreadey

[21:04] <ruoso> I need the map operator now, so I can implement ClassHOW.can

[21:04] <ruoso> and then I can have ClassHOW.dispatch

[21:05] <mncharity> One suggestion, as I notice the empty Any.pm.  I'd suggest organizing core methods by method, rather than scattering them across class files.  Spec and spec changes tend to impact methods, rather than classes.  And there are a _lot_ of classes.

[21:06] <ruoso> mncharity, take a look at v6/mildew/Map.pm

[21:06] <mncharity> http://svn.pugscode.org/pugs/v6/mildew/t/

[21:06] <ruoso> that's a sketch on how the map implementation would be added to the prelude

[21:06] <lambdabot> Title: pugs - Revision 24151: /v6/mildew/t

[21:06] <mncharity> http://svn.pugscode.org/pugs/v6/mildew/Map.pm

[21:07] <mncharity> knowhow?

[21:07] *** apeiron joined
[21:07] <ruoso> mncharity, yes... a Pure Prototype Object

[21:07] <ruoso> (it should appear in S12 sometime)

[21:07] <ruoso> *someday

[21:08] <ruoso> knowhow is important for bootstrap reasons

[21:08] <ruoso> and is important for prototype-based oo

[21:09] <ruoso> mncharity, I should leave now...

[21:09] * ruoso later &

[21:09] * ruoso will try to backlog...

[21:09] <mncharity> cheers :)

[21:09] *** ruoso left
[21:09] <mncharity> thanks for the pointers

[21:15] <mncharity> moritz_: re bootstrap and then developers: though, there are a couple of people around Boston who are interested in pushing p6, so the idea has been floating around of doing a sprint.  Boston ruby group manages a weekly meeting (to hack; normal meeting; bar; ruby movies).  Perhaps could try for a 1st and 3rd Wednesday of the month, elf and p6 hacking at <someplace with wifi and free food>.

[21:16] <mncharity> Or perhaps at some perl conference, though my travel budget approximates zero at the moment.

[21:19] <Tene> Anyone here feel like looking up some Perl 6 specs for me about the behavior of try {} blocks?

[21:22] <mncharity>  /me shakes head, sorry, hacking...

[21:23] *** ejs left
[21:25] *** zamolxes joined
[21:25] *** bacek joined
[21:26] <moritz_> "A try block by default has a CATCH block that handles all exceptions by ignoring them."

[21:26] <moritz_> http://perlcabal.org/syn/S04.html#Exception_handlers

[21:26] <lambdabot> Title: S04

[21:28] <moritz_> that seems to imply control exceptions, IMHO

[21:28] <moritz_> (and notices that in Perl 5 an eval { ... } block also catches return() )

[21:28] <moritz_> $ perl -wle 'sub f { eval { return; }; print "alive" }; f()'

[21:28] <moritz_> alive

[21:35] *** apeiron left
[21:40] *** apeiron joined
[21:42] <pugs_svn> r24152 | hinrik++ | [t/spec] remove Windows line endings from S06-signature/type-capture.t

[21:50] <mncharity> moritz_: any thoughts on attracting developers?

[21:53] <moritz_> mncharity: docs & blog

[21:54] <moritz_> a nice architectural overview (that explains all abbreviations ;-), and a short hacking howto (where to change what, what do you need to rebuild, how to test etc.)

[21:57] <mncharity> good thoughts.  blog is raw exposure.  the others are about visitor experience.  have we been getting visitors, and if so, do we have feedback on what made it more/less likely they would contribute?

[21:59] <moritz_> when I mention elf on perlmonks, I often got asked "elf? what's that?", so I gave them the link

[22:00] <moritz_> I thought about contributing to elf as well, but I found it a bit deterrent (description used abbreviations I didn't know, so little docs, no overview what features are working)

[22:01] <moritz_> mncharity: my offer for you is: I can try to set up a 'make spectest' for elf similar to that of rakudo

[22:02] <moritz_> mncharity: ie a test target that's supposed to run cleanly, and for which it's worth to fudge tests

[22:02] <moritz_> mncharity: I don't know if that makes sense in the current stage, but as soon as it does, tell me

[22:08] <mncharity> re deterrent, ah, good to know.   re offer/spectest, nice.   re "as soon as it does, tell me", will do.

[22:08] <mncharity> is parrot ready to accept prelude code written in p6?

[22:10] <moritz_> not yet (you knew that, didn't you?)

[22:10] <moritz_> though most pieces are in place now

[22:10] <moritz_> class Array is also { ... } works now

[22:11] *** justatheory left
[22:11] <moritz_> and today pmichaud added inline PIR to rakudo

[22:11] <moritz_> don't know what else is needed right now

[22:11] <pmichaud> we're getting closer

[22:11] <pmichaud> we need to fix method generation (jonathan++'s version is a little heavier weight than I want)

[22:11] <PerlJam> what does prelude need that rakudo doesn't have?

[22:12] <pmichaud> PerlJam: depends on what we expect to write in Prelude.

[22:12] <pmichaud> rakudo will be moving nearly all of its builtins to Perl 6 wrappers, at least.

[22:12] <pmichaud> if not actual Perl 6 code within the wrappers.

[22:13] <moritz_> (and if it's just to get the signatures right ;-)

[22:13] <mncharity> moritz_: re "(you knew that, didn't you?)", no.  last I heard, a few months back, was rsn.

[22:13] <pmichaud> well, signatures and multidispatch are one of the driving reasons for it, yes.

[22:13] <pmichaud> jonathan and I both took vacations.

[22:13] <PerlJam> well, I'm looking at pugs/src/perl6/Prelude.pm.  I think whatever is in there is what we expect to write  :)

[22:13] <moritz_> mncharity: that's wasn't entirely serious as well :)

[22:14] * PerlJam doesn't know what "is builtin" or "is unsaef" are supposed to do

[22:14] <moritz_> PerlJam: 'is unsafe' was obviously used for pugs' safe mode

[22:14] <moritz_> PerlJam: and I guess 'is builtin' is a pugs hack

[22:14] <pmichaud> I expect rakudo's Prelude to be much longer than the current Prelude.pm

[22:15] <pmichaud> and fairly different, as well.

[22:15] <pmichaud> we'll have a lot of     class Any is also { method ... ; method ... ; method ... ;}

[22:15] <pmichaud> to define most of the builtins

[22:15] <mncharity> yay

[22:16] <PerlJam> feels like monkey patching, but official  :)

[22:16] <pmichaud> well, when we can write the methods in pure Perl 6, we will; when we can't, we'll use inline PIR.

[22:16] <pmichaud> eventually I suspect we'll separate out the pure Perl 6 parts and leave them with stubs to be filled in with the PIR

[22:17] <pmichaud> so that we'll have a pure Perl 6 Prelude.pm with { ... } for the parts we didn't write in Perl 6

[22:17] <pmichaud> and a PIR-Prelude.pm with q:PIR for the parts we wrote in PIR (filling in the parts we didn't write in Perl 6)

[22:17] <pmichaud> all of which will be Perl 6 syntax.

[22:18] <pmichaud> I better disappear for a while or I won't have my presentation finished.  bbl.

[22:19] <mncharity> thanks for the update.:)

[22:21] *** bacek left
[22:24] <Hinrik> perl6: say 1 if 'a'eq'a'

[22:24] <p6eval> elf 24152, pugs, rakudo 33492: OUTPUT[1␤]

[22:28] *** Limbic_Region joined
[22:32] *** b_jonas joined
[22:33] <b_jonas> hello! are the slides (or transscript or something) of the 2008 state of the onion keynote up somewhere?

[22:34] *** smg left
[22:35] <b_jonas> ah, irc logs say from 2008-10-08 that "TimToady probably won't publish this year's since it was a tech talk/demo of STD.pm

[22:35] <b_jonas> "

[22:35] <b_jonas> pity

[22:49] <meppl> good night

[22:50] <b_jonas> by the way, thanks for fixing the search feature of the irc logs page

[22:50] <b_jonas> -> moritz

[22:51] <moritz_> b_jonas: I didn't fix anything, the failures seem random :/

[22:52] *** meppl left
[22:56] <[particle]> ok, my grammar successfully parses all cmdline options in S06. baseline complete. now to attack my additions.

[22:58] <b_jonas> heh

[23:01] <Limbic_Region> b_jonas - Larry emailed me back - said that a very similar talk is available via youtube at his google chicago talk

[23:01] <Limbic_Region> b_jonas - http://www.youtube.com/watch?v=JzIWdJVP-wo

[23:01] <lambdabot> Title: YouTube - Larry Wall Speaks at Google

[23:02] <b_jonas> ah, thanks

[23:03] <b_jonas> I wonder what should go to [id://153]

[23:03] <Tene> Can someone tell me what $! should be after a try{} that threw an exception?

[23:03] <Limbic_Region> b_jonas - btw, your homenode pic on perlmonks no longer matches the caption

[23:04] <b_jonas> I still have a caption?

[23:04] <b_jonas> I thought I removed that so I don't have to change it

[23:04] <b_jonas> let me see

[23:04] <b_jonas> uh huh

[23:05] <b_jonas> ok, this time I'll just remove it and don't add what this picture is (chrismas decoration on a shop in Wien)

[23:06] <Tene> ah, there's the spectest

[23:06] <moritz_> Tene: which could be wrong :/

[23:06] <Tene> t/spec/S02-magicals/dollar_bang.t

[23:06] *** dr_df0 joined
[23:07] <dr_df0> pugs: my @a=<1 2 3 4>; my @b=<1 2 3 4>; my @c = @a >>+<< @b; say @c

[23:07] <p6eval> pugs: OUTPUT[2468␤]

[23:07] <Limbic_Region> pugs: my @a=<1 2 3 4>; my @b=<1 2 3 4>; my @c = @a >>+<< @b; say @c.perl

[23:07] <p6eval> pugs: OUTPUT[\(2.0, 4.0, 6.0, 8.0)␤]

[23:07] <Tene> I guess it makes sense to have Exception always return 1 for get_bool...

[23:08] <moritz_> yes, because if $! isn't set it's undef, not an Exception

[23:08] <Tene> Are there any false exception values?

[23:08] <Tene> I would'nt think there were...

[23:08] *** adc_penner2 joined
[23:08] <[particle]> Exception;false

[23:08] <[particle]> :)

[23:08] <moritz_> die 0;

[23:08] <[particle]> does exit throw an exception?

[23:09] <Tene> so: try { die 0; }; say 'True' if $!;

[23:09] <moritz_> dunno if it should act as a proxy for capture that die() saw

[23:09] <Tene> Does that print?

[23:09] <moritz_> dunno

[23:09] <Tene> Maybe it should call get_bool on its payload?

[23:12] <moritz_> "If you test a C<Failure> for C<.defined> or C<.true>, it causes C<$!>

[23:12] <moritz_> to mark the exception as I<handled>;"

[23:12] <moritz_> "Because the contextual variable C<$!> contains all exceptions collected in the

[23:12] <moritz_> current lexical scope [...]"

[23:12] <moritz_> uhm.

[23:12] <Tene> moritz_: could I get you to review dollar_bang.t and update it?

[23:13] <moritz_> So $! is a collectioin of exceptions...

[23:13] <PerlJam> moritz_: but you probably only get to look at the "top" one in item context.

[23:13] *** adc_penner2 left
[23:13] <moritz_> Tene: I tried that not-so-long-ago, and couldn't find the appropriate specs

[23:13] <moritz_> Tene: maybe I need to send a mail to p6l for clarification, so that might take a while.

[23:14] <[particle]> assume it means something that's reasonable to implement until we know what it really means

[23:15] <moritz_> actually just having Excpetion.get_bool returning always 1 would give us a few more passing tests

[23:19] <Tene> I'll have it always return 1 for now.  Can you ask p6l?

[23:20] <moritz_> I'm writing the mail right now.

[23:22] <moritz_> Tene: actually dollar_bang.t looks saner than I remembered ;-)

[23:23] *** adc_penner left
[23:23] <Tene> make sure to ask for clarification of what the default argument referred to in test 8 is.

[23:24] <Tene> or 9 or whichever

[23:24] <Tene> the end

[23:24] *** b_jonas left
[23:26] <moritz_> will do.

[23:27] <pugs_svn> r24153 | tene++ | Unfudge a few tests to track new passes in Parrot.

[23:30] <moritz_> mail sent, going to bed now.

[23:34] <Tene> Thank you.

[23:37] *** iblechbot left
[23:42] *** renormalist left
[23:48] *** eternaleye left
[23:50] <Hinrik> perl6: say 1x2

[23:50] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "x2"␤    expecting "_", fraction, exponent, term postfix, operator, ":" or ","␤    at /tmp/1f70jZkvX3 line 1, column 6␤]

[23:50] <p6eval> ..elf 24153: OUTPUT[11␤]

[23:50] <p6eval> ..rakudo 33494: OUTPUT[Syntax error at line 1, near "say 1x2"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[23:50] <Hinrik> perl6: say 1 x 2

[23:50] <p6eval> elf 24153, pugs, rakudo 33494: OUTPUT[11␤]

[23:52] <Hinrik> perl6: say "ok" if 1eq1

[23:52] <p6eval> elf 24153: OUTPUT[ok␤]

[23:52] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "eq1"␤    expecting "_", "-", "+", exponent, term postfix or operator␤    at /tmp/ZSuf0Brfre line 1, column 14␤]

[23:52] <p6eval> ..rakudo 33494: OUTPUT[Syntax error at line 1, near "if 1eq1"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[23:52] <Hinrik> I see

