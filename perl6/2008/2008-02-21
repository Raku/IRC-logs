[00:10] *** iblechbot left
[00:12] *** arcady joined
[00:26] *** alc joined
[00:26] *** devogon left
[00:30] *** fakename joined
[00:36] *** Auzon left
[00:40] <cj> hurm... is the reason that v6-KindaPerl6/src/KindaPerl6/Visitor/Emit/Perl5.pm doesn't declare its namespace using 'package' because mp6 doesn't know how to do that?

[00:44] *** pack|eet joined
[00:48] *** fakename left
[00:57] <cj> does mp6 know how to do inheritence?

[01:02] *** wknight-away is now known as wknight8111

[01:02] <cj> s/ence/ance/ :)

[01:04] *** cnhackTNT joined
[01:14] *** lyokato_ joined
[01:20] *** alester_ joined
[01:23] <cj> does parrot allow you to do anything like perl -c? :)

[01:28] *** pack|eet left
[01:31] <TimToady> that would be better to ask on #parrot

[01:31] <pugs_svnbot> r19964 | lwall++ | [gimme5] random cleanups

[01:31] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19964

[01:31] <lambdabot> Title: Changeset 19964 - Pugs - Trac

[01:33] *** penk left
[01:36] *** penk joined
[01:59] *** Zygo left
[02:00] *** chris2 left
[02:00] *** Zygo joined
[02:05] <meppl> good night

[02:06] *** meppl left
[02:07] *** demq joined
[02:07] *** [particle1 joined
[02:09] *** demerphq left
[02:15] *** Schwern left
[02:15] *** baest left
[02:20] *** tobeya left
[02:22] *** zakame joined
[02:24] *** [particle] left
[02:32] <pugs_svnbot> r19965 | gwern++ | rm some now-useless stuff from the 6.8 patch. I hand-applied most of the changes and couldn't get it to work, which is a bit frustrating.

[02:32] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19965

[02:32] <lambdabot> Title: Changeset 19965 - Pugs - Trac

[02:43] *** alester_ left
[02:52] *** cmarcelo joined
[02:55] *** kanru left
[02:59] *** cmarcelo left
[03:01] *** alester_ joined
[03:04] *** cmarcelo joined
[03:15] *** mncharity left
[03:32] *** cmarcelo left
[03:35] *** cmarcelo joined
[03:37] *** Limbic_Region left
[03:43] *** rindolf joined
[03:47] *** dlocaus joined
[03:47] <dlocaus> .

[03:47] *** dlocaus left
[03:50] *** Lorn left
[04:02] *** wknight8111 is now known as wknight-away

[04:04] *** alc left
[04:11] *** DarkWolf84 left
[04:11] *** DarkWolf84 joined
[04:16] *** Auzon joined
[04:17] *** RayMagini left
[04:20] *** RayMagini joined
[04:24] *** [particle1 left
[04:28] *** [particle] joined
[04:31] *** Sephir0th joined
[04:33] *** heyhey8185 joined
[04:33] *** heyhey1508 joined
[04:33] *** heyhey6091 joined
[04:33] *** heyhey1508 left
[04:33] *** heyhey8185 left
[04:33] *** heyhey6091 left
[04:34] *** heyhey8185 joined
[04:34] <heyhey8185> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:34] <heyhey8185> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:34] *** heyhey577 joined
[04:34] *** heyhey8185 left
[04:34] *** heyhey577 left
[04:35] *** heyhey8185 joined
[04:35] *** heyhey8185 left
[04:35] <allbery_b> juerd / tene : ping

[04:35] <Tene> allbery_b: hi

[04:35] *** heyhey8185 joined
[04:35] <allbery_b> see above

[04:36] *** heyhey2097 joined
[04:36] <Tene> Ahh.

[04:36] *** Tene sets mode: +b *!*n=heyhey@221.130.185.*

[04:36] *** heyhey2097 was kicked by Tene (Tene))
[04:36] *** Tene sets mode: +b *!*n=heyhey@218.25.39.*

[04:36] *** heyhey8185 was kicked by Tene (Tene))
[04:36] *** heyhey9215 joined
[04:36] *** Tene sets mode: +b heyhey*!*@*

[04:36] *** heyhey9215 was kicked by Tene (Tene))
[04:37] <allbery_b> danke schรถn

[04:37] * allbery_b has no idea what that was about but it was annoying

[04:38] *** justatheory left
[04:38] <allbery_b> Tene++

[04:38] *** youaredead4595 joined
[04:38] *** youaredead4725 joined
[04:38] <youaredead4595> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,''(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:38] <youaredead4725> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,''(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:38] <youaredead4595> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,''(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:38] <youaredead4725> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,''(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:38] <youaredead4595> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,''(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:38] <youaredead4725> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,''(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:38] <youaredead4595> '(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,''(y(-((u-nru'-'_,",,'-_,-_-(_"-,_"'-_,"',-_้"''-"",'"',",'",_-'_(',_'(-_',(_-,'-_,(-_-_,'

[04:38] *** youaredead4725 left
[04:38] *** youaredead4595 left
[04:38] <allbery_b> sigh

[04:38] *** wknight-away left
[04:38] *** Tene sets mode: +b youaredead*!*@*

[04:42] *** Sephir0th left
[04:43] * allbery_b thinks he'll involve opers next time...

[04:43] *** pcbuetow joined
[04:44] <Tene> I was just thinking the same.

[04:56] <TimToady>  Tene can you oper me?  seem to have lost it at some point

[04:56] *** Tene sets mode: +o TimToady

[04:56] <TimToady> thanks

[04:56] <Tene> You should be able to say /msg chanserv op #perl6 if you're identified and set with rights on the channel

[04:57] <TimToady> that may be more possible now that I'm not coming from a dynamic IP, which (I was told) was the problem with that earlier...

[04:58] <Tene> Looks like you're not set with privs.

[04:58] *** pbuetow left
[04:58] <allbery_b> chanserv thinks he's not allowed to have rights, it nukes his opr every time it's restarted or rejoins from a netsplit

[04:58] * TimToady .oO(that's because I'm a *dangerous* man!)

[04:59] <allbery_b> beware of the keeper of the swiss army tac nuke

[04:59] <Tene> looks like only 'autrijus' has privs to modify the access list.

[05:01] *** cmarcelo left
[05:28] *** rindolf left
[05:40] *** monomorph joined
[05:45] *** gwern left
[05:48] <rakudo_svn> r25915 | petdance++ | Added tene's patch to Object.pir to do say. Added a perl6 test to test it out.

[05:53] *** gwern joined
[05:55] *** njbartlett left
[06:02] *** Auzon left
[06:07] *** kane_ joined
[06:07] *** kane__ left
[06:13] <pmichaud> pugs: <ok 4>.say

[06:13] <exp_evalbot> OUTPUT[ok4โค]

[06:13] <pmichaud> pugs: (~<ok 4>).say

[06:13] <exp_evalbot> OUTPUT[ok 4โค]

[06:14] <rakudo_svn> r25922 | pmichaud++ | [perl6]:

[06:14] <rakudo_svn> r25922 | pmichaud++ | * .say method should redispatch to say() function. instead of

[06:14] <rakudo_svn> r25922 | pmichaud++ |   printing directly.

[06:14] <rakudo_svn> r25923 | petergibbs++ | Set svn properties to keep file_metadata.t happy

[06:18] *** zakame_ joined
[06:28] *** zakame left
[06:31] *** zakame__ joined
[06:31] *** zakame__ is now known as zakame

[06:32] *** zakame_ left
[06:32] *** [particle] left
[06:32] *** Jedai left
[06:32] *** BinGOs left
[06:32] *** marmic left
[06:32] *** pravus left
[06:32] *** agentzh left
[06:32] *** ruoso left
[06:32] *** araujo left
[06:33] *** zakame_ joined
[06:33] *** [particle] joined
[06:33] *** Jedai joined
[06:33] *** BinGOs joined
[06:33] *** marmic joined
[06:33] *** pravus joined
[06:33] *** agentzh joined
[06:33] *** ruoso joined
[06:33] *** araujo joined
[06:33] *** zakame_ left
[06:33] <rakudo_svn> r25925 | petdance++ | added some new sneaky ways to invoke say, but ok 4 started failing on me all of a sudden.

[06:37] *** zakame_ joined
[06:37] *** zakame left
[06:44] *** baest joined
[06:48] *** zakame_ left
[06:48] *** zakame_ joined
[07:24] *** devogon joined
[07:40] *** zakame__ joined
[07:40] *** zakame_ left
[07:43] *** Schwern joined
[07:48] *** BinGOs left
[07:48] *** BinGOs joined
[07:51] *** meteorjay joined
[07:52] <pugs_svnbot> r19966 | lwall++ | [gimme5] can now fallback on normal match if lexer fails

[07:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19966

[07:52] <lambdabot> Title: Changeset 19966 - Pugs - Trac

[07:58] *** ting joined
[07:58] *** iblechbot joined
[07:59] *** ting left
[08:00] *** ting joined
[08:12] *** DarkWolf84 left
[08:17] *** zakame__ left
[08:17] *** zakame__ joined
[08:22] *** BinGOs left
[08:23] *** BinGOs joined
[08:27] *** BinGOs left
[08:31] *** zakame joined
[08:35] *** BinGOs joined
[08:38] *** GPenguin joined
[08:40] *** zakame__ left
[08:41] *** zakame_ joined
[08:45] *** zakame__ joined
[08:45] *** IllvilJa joined
[08:46] *** razvanm02 joined
[08:55] *** zakame left
[08:56] <Juerd> allbery_b: pong

[09:01] *** zakame_ left
[09:03] *** zakame_ joined
[09:08] *** zakame__ left
[09:11] *** Schwern left
[09:46] *** zakame_ left
[09:54] *** IRSeekBot left
[09:56] *** IRSeekBot joined
[10:10] *** Auzon joined
[10:10] *** Auzon left
[10:20] *** cnhackTNT left
[10:33] *** finger joined
[10:34] <GPenguin> does anybody know whats up with moritz_?

[10:38] *** chris2 joined
[10:40] *** nipotan is now known as nipotaway

[10:47] *** SCalimlim left
[10:52] *** mattz left
[10:55] *** mattz joined
[11:12] *** [particle] left
[11:13] *** cmarcelo joined
[11:13] *** [particle] joined
[11:18] <ruoso> TimToady, I've read that paper... It's interesting to notice that it is, in theory, very simple to implement that in SMOP. The fact that the SMOP interpreter is an object itself, allows us to implement several interesting features...

[11:18] <ruoso> like STM-like interface using distributed transactions

[11:19] <ruoso> async IO programmed as sync IO

[11:19] <ruoso> and I was even thinking about implementing positronic variables

[11:19] <ruoso> just because I can ;)

[11:20] <ruoso> one thing I was thinking on the other hand is about syntax (for the async IO programmed as sync IO)

[11:21] <ruoso> at first I thought that while ($conn.accept()) { ... } could transparently create as much lines of execution as needed

[11:22] <ruoso> it could have weird side effects if the user don't expect that

[11:23] <ruoso> maybe it's more reasonable going to a java-like solution... which would be

[11:24] <ruoso> $conn.handle($handler_object)

[11:24] <ruoso> where $handler_object.^can("run"), and that code is supposed to have concurrent executions...

[11:30] *** wknight-away joined
[11:34] *** xinming left
[11:39] *** ebassi joined
[11:39] <ruoso> POE implemented in SMOP would be able to have a preemptive multitask, that's something that is in my mind since I reached to the current interpreter design

[11:40] *** [particle] left
[11:41] *** lyokato_ left
[11:41] *** lyokato_ joined
[11:42] *** backdraft joined
[11:42] *** backdraft left
[11:42] <ruoso> in fact... as SMOP is supposedly thread-safe, POE implemented in SMOP could mix green threads and os threads...

[11:45] * ruoso still wonder which lesser exotic name could be given to positronic variables, as junctions came for quantum superpositions...

[11:47] * ruoso really believes that positronic variables may create a different and simpler perspective to some algorithms... the bsearch example given by damian at YAPC::EU still impesses me...

[11:49] *** [particle] joined
[12:01] *** riffraff joined
[12:06] *** penk left
[12:22] *** wknight-away left
[12:22] *** xinming joined
[12:28] *** Aankhen`` joined
[12:28] *** GPenguin left
[12:31] *** chris2 left
[12:34] *** masak joined
[12:35] *** lyokato_ left
[13:19] *** snooper joined
[13:28] *** cognominal_ joined
[13:31] *** fridim_ joined
[13:31] *** pcbuetow left
[13:49] *** riffraff left
[13:57] *** alester_ left
[14:09] *** alester_ joined
[14:10] *** andara joined
[14:11] *** GPenguin joined
[14:14] *** macae joined
[14:17] *** Lunchy left
[14:31] *** Lunchy joined
[14:44] *** rdice joined
[14:53] *** alester_ left
[15:01] <allbery_b> Juerd: sorry, was looking for a chanop when the channel was being bugged,

[15:01] *** rindolf joined
[15:13] <GPenguin> 70 hours idle, i hope moritz_ is doing fine

[15:21] *** njbartlett joined
[15:21] *** andara left
[15:29] *** mncharity joined
[15:35] *** araujo left
[15:37] *** Zygo left
[15:38] *** Zygo joined
[15:38] *** shlomif joined
[15:39] * mncharity goes to try running gimme5...

[15:39] *** gbacon joined
[15:45] <pugs_svnbot> r19967 | putter++ | src/perl6/gimme5: switch from #!/usr/local/bin/perl to  #!/usr/bin/perl  (as ./cheat is already).  Hopefully the difference isn't intentional.

[15:45] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19967

[15:45] <lambdabot> Title: Changeset 19967 - Pugs - Trac

[15:46] *** alester is now known as Andy

[15:46] * ruoso . o O ( the silence on the things I've wrote may mean two things... or I am so offtopic that no one has hope in pointing me the right direction, or it just makes sense and nobody has nothing to add...  )

[15:47] * mncharity backlogs...

[15:47] <[particle]> ruoso: things you've wrote on channel?

[15:47] *** penk joined
[15:49] <ruoso> yep

[15:49] * [particle] generally doesn't backlog, but does read the mailing list

[15:50] *** shlomif left
[15:50] *** njbartlett left
[15:51] *** cognominal_ left
[15:52] *** masak left
[15:53] * allbery_b no clue but suggests that mailing lists are better for tossing such things around; here, it was in a vacuum

[15:54] *** rindolf left
[15:55] <mncharity> ruoso: if the topic is your most recent paragraphs, I brief scan suggests they boil down to "SMOP can do it, and other neat stuff too" :), and 'musing on syntax'.  does that cover it?  The former I took as a status update.  I should have said "neat!". :)  The latter...  syntax musing ends up being mostly tossing ideas into the pool, until things are actually working, at which time it gets pursued with a bit more intent.

[15:55] *** gbacon left
[15:55] <TimToady> I'm not usually up at 3:00 am...

[15:56] <[particle]> slacker.

[15:56] * mncharity wonders if I've *ever* done a p6l post... not sure.

[15:56] <TimToady> the reason I had /usr/local/bin/perl is because /usr/bin/perl on fedora isn't 5.10 yet, and I was using // freely :)

[15:56] * ruoso have success in his experiment... ;)... drama works in #perl6 ;)

[15:56] <TimToady> but I should really be using make to run things anyway...

[15:57] <[particle]> why don't you 'use 5.010;' instead of relying on broken shebangs?

[15:57] <mncharity> re 5.10, oh, drat.  sorry.  was just barely below threshold for asking before commiting.  reverting. :)

[15:57] <GPenguin> ruoso: you mean #perl and not #perl6 with the drama, right? :-)

[15:57] <TimToady> ruoso: well, of course, that's because the camel is a drama dairy.

[15:57] <ruoso> heh

[15:58] <TimToady> [particle]: if I were going to rely on use 5.010, I'd use 6 instead :)

[15:59] <TimToady> as far as I know, use 5.010 merely fails if the version isn't high enough

[15:59] <[particle]> yes, it fails

[16:00] <pugs_svnbot> r19968 | putter++ | src/perl6/gimme5: reverted r19967.  gimme5, unlike cheat, requires 5.010.  Added 'use 5.010;'.

[16:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19968

[16:00] <lambdabot> Title: Changeset 19968 - Pugs - Trac

[16:01] <TimToady> so maybe there should be some mechanism in Perl for looking for the newer version and running that when you say "use 6.1"

[16:01] <TimToady> instead of scattering versions in random locations around the filesystem

[16:01] <TimToady> if we register all versions of modules in the standard library, and perl 6 registers its version and location...

[16:03] <mncharity> re gimme5 parsing 42, are things set up so I can hand something 42 and get back a match object?  reason for asking is

[16:05] <TimToady> 'course, my shell can find perl5.10.0 perfectly well, but then #! can't be as smart for some reason

[16:05] <TimToady> .matchify doesn't really work yet, so all you can get back is a Cursor

[16:06] <TimToady> part of the reason for switching to p5 was that pugs was too flakey to write .matchify

[16:07] <mncharity> it might be nice to set up a full pipeline.  gimme5 takes 42, hands back a match object.  I write something which takes that match and dumps a yaml version of kp6's ast.  which something else picks up and dumps "transliterate to p5" for.  and "to ruby".  and others can start migrating kp6 backends to use the full STD.  and shaking down their runtimes.  and

[16:08] <mncharity> STD_red can plug in if needed to provide a complementary but compatible source of ast's.  maybe even a quicky from redsix to.  so by end of day, a full pipeline is up, even if the current flow is just a trickle.  and rather than thinking of it as a pipeline,

[16:10] <mncharity> it's more a "ok, here is the exposed data.  there's more than one person working on it, so it's real, and not going to just evaporate.  and you can start doing your thing, whatever that is, right now.  integrated with what everyone else is doing".

[16:10] <mncharity> or something vaguely like that.  maybe.  the hope is.

[16:12] <mncharity> hmm.  maybe I _should_ of put off presenting that concept until after breakfast, to increase clarity.  ah well.

[16:12] <mncharity> thoughts?

[16:13] <TimToady> .oO(coffee!!!)

[16:13] <mncharity> :)

[16:14] <GPenguin> :D

[16:15] <TimToady> .oO(!flu would also be nice)

[16:17] <TimToady> mostly I've been doing depth-first programming on longest-token matching because everyone else was taking the breadth-first approach, to the first approx

[16:17] <TimToady> so nobody was looking at DFA matching

[16:18] *** finger left
[16:18] <TimToady> also, is kb6 ast actually documented anywhere?

[16:18] <TimToady> *kp6

[16:18] <TimToady> that sounds more snide than I mean it

[16:19] <TimToady> I just haven't looked

[16:19] <TimToady> since I've been concentrating elsewhere

[16:19] <mncharity> the basic ideas are "avoid another monolithic system".  like pugs (monolithic because it's yaml is incomplete), kp6, redsix.  redsix should *not* start emitting say p5 code.  if anything, it should start dumping yaml. <pause>

[16:19] <mncharity> re documented, I'm not sure.  that would indeed be a todo.

[16:20] <TimToady> anyhoo, up till now the parts that I felt I had to concentrate on were too far removed from reality to worry about integration

[16:20] <TimToady> but you're right, it seems like we're getting a lot closer to that point

[16:21] <mncharity> basically, it seems like we've gotten away from the concept that "doing a parse requires a complete running p6 hanging off the parser".  it may be true ultimately, but not near term.  that "not trying to do it near term" means we can decouple implementation and development better.

[16:22] <TimToady> well, pugs had the right idea insofar as the bootstrap for a real compiler must be written in another high-level language

[16:22] *** ebassi left
[16:23] *** justatheory joined
[16:23] <TimToady> it's just that p5 is sufficiently close for an approach like gimme5 to work on STD

[16:23] <TimToady> and haskell isn't so close

[16:23] <spinclad> positronics++  # next: asimovian robots!

[16:24] <TimToady> and doubtless the bottom up approach of parrot would work eventually too

[16:24] <TimToady> but I've always refused to learn PIR :)

[16:24] <spinclad> but what is the damage when variables and antivariables meet?

[16:24] <[particle]> just write non-strict perl without semicolons

[16:24] <[particle]> it'll probably compile ;)

[16:25] <spinclad> no, keep anti/variables apart with ;'s !

[16:26] <spinclad> sorry, wrong thread?

[16:27] <TimToady> as long as one [particle] is spinclad up and there is spinclad down, there's no trouble

[16:27] <TimToady> s/there/the other/

[16:27] <[particle]> or half-spinclad

[16:27] <mncharity> re comments, agreed.  i'm more observing that given this moment, what we understand, and how we think we want to approach things, what pieces we have lying around, what we are currently working on... our constraints on development may now be quite different then they have been historically.

[16:27] *** kanru joined
[16:27] <spinclad> spinhalfclad

[16:28] <mncharity> so different that we might be able to crack things wide open, like, today.

[16:29] <TimToady> and add a STDbot to the list?  :)

[16:29] <mncharity> STDbot?

[16:30] <spinclad> 'keep those uptime and downtime particles apart! don't cross the streams!'

[16:30] <TimToady> eval: 42

[16:30] <TimToady> perl6: 42

[16:30] <mncharity> :)

[16:30] <exp_evalbot> kp6: RESULT[42]

[16:30] <exp_evalbot> ..pugs: RESULT[42]

[16:30] <exp_evalbot> ..rakudo: RESULT[Method 'perl' not found for invocant of class 'Integer'โคcurrent instr.: '_block10' pc 35 (EVAL_10:16)โคcalled from Sub 'parrot;PCT::HLLCompiler;eval' pc 789 (src/PCT/HLLCompiler.pir:459)โคcalled from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1063 (src/PCT/HLLCompiler.pir:586)โคcalled

[16:30] <exp_evalbot> ..from Sub 'parrot;PCT::HLLCompiler;command_line' pc 1246 (...

[16:30] <mncharity> redsix: 42

[16:30] <mncharity> snif.

[16:30] *** gbacon joined
[16:30] <mncharity> but that would be security headache noone wants. :)

[16:31] *** arguile left
[16:31] <[particle]> the only thing keeping me in this channel is my magnetic bottle []

[16:31] <spinclad> just don't let it do anything interesting.

[16:31] <TimToady> yes, well, especially since gimme5 scribbles the filesystem currently to keep its cache

[16:31] <TimToady> so STD5 has to read the filesystem at least

[16:31] <TimToady> and there goes /etc/passwd to St Petersburg...

[16:32] <TimToady> well, there's chroot for that, at least, and maybe Safe

[16:33] * spinclad is lost in superposed *ix and w*nd*z security models

[16:33] <mncharity> though what would the STDbot print?  match tree, ast, emitted code, or runtime output. :)

[16:33] *** arguile joined
[16:33] <TimToady> there's a comment in STD right now

[16:33] <TimToady>     # XXX will this please work somehow ???

[16:33] *** blindfish joined
[16:34] <TimToady> it's on the .eval in:

[16:34] <TimToady>     token regex_mod_internal:sym<:i( )> { <sym> <regex_mod_arg> { $+insensitive = $<regex_mod_arg>.eval } }

[16:34] <TimToady> so if that please works somehow, then STDbot should be able to print 42 :)

[16:35] <mncharity> re XXX,  ok.  expectation management note to self: gimme5 is an exercise in DFA engine research.  yes? :)

[16:35] <mncharity> ah, i see

[16:35] <TimToady> primarily, yes

[16:36] <TimToady> but to do that research I have to have a running version of STD

[16:36] <TimToady> which happens to also be what you want for a Perl 6 parser eventually :)

[16:36] <mncharity> but said research has the nice side effect of an official grammar getting actively banged on.

[16:37] <TimToady> indeed, any attempt to converge on the grammar improves the grammar, one way or another, as long as there's feedback

[16:37] *** snooper left
[16:37] <TimToady> I do find myself tweaking a few things to make it easier to gimme5 them over to p5 :)

[16:38] <mncharity> re feedback, yes, part of the pipeline idea came from how to keep gimme5 fed with feedback and "other people using it"-ness.

[16:38] *** pbuetow joined
[16:38] <TimToady> as long as what I start with is still officially p6, that seems okay

[16:38] <TimToady> so like, turning @foo.join, which is hard to translate, into ~@join which is easy

[16:39] <TimToady> 'cause it's not a real generic translator, just a transliterator for a known plaintext

[16:39] <mncharity> re seems okay, oh yeah.  and I expect, once we're a bit more bootstrapped, the creep will then go in the other direction.

[16:39] <TimToady> and it's very, very easy to break

[16:40] <mncharity> ("since feature X works on all our backends Y, now the grammar can use X...")

[16:40] <TimToady> *nod*

[16:40] *** gbacon left
[16:41] <rakudo_svn> r25935 | petdance++ | fix the "say <ok 4>"

[16:41] <TimToady> but some nice things have fallen out semi-generically, like the ability to translate any "is context" into localized our vars

[16:42] <TimToady> by the trick of declaring the our vars in main:: before the first package Perl;

[16:42] *** lichtkind joined
[16:42] <TimToady> and the signature mangling has got pretty good generically too

[16:43] <mncharity> ah, ok.  hmm.  perhaps an env:: rather than main::.

[16:43] <TimToady> I still have to completely replace the p6 method heredoc though

[16:43] <TimToady> it just doesn't translate well at all.

[16:43] * Andy is happy to be writing his first Rakudo test.

[16:43] <TimToady> mainly because it's doing too much internal pattern matching on strange data structures

[16:43] <mncharity> Andy++ :)

[16:43] * [particle] is happy at andy

[16:44] <Andy> I might actually learn some syntax.

[16:44] * spinclad hurls happiness

[16:44] *** kyrbe joined
[16:44] *** kyrbe left
[16:44] <TimToady> is this a test inside or outside of t/spec?

[16:44] <mncharity> re heredoc, there's a ruby version in std.rb, but it's never actually been run, so... salt required.

[16:45] <Andy> outside of

[16:45] <TimToady> have joy

[16:45] <TimToady> mncharity: re heredoc, I rewrite it heavily when I had to translate to p5 because I realized the original approach was bogus

[16:46] <TimToady> *rewrote

[16:46] <TimToady> so it might have changed in STD since you last saw it

[16:46] <mncharity> ok.  np.

[16:46] <TimToady> it now just mangles the Match @<text>s instead of having an out-of-band list of texts

[16:47] *** GPenguin left
[16:47] <TimToady> but the tricky thing is it has to allow for texts to be interrupted by interpolations in the middle of the line

[16:47] <TimToady> and not mangle leading whitespace that's really in the middle of the line

[16:47] <TimToady> so ^^ matching doesn't work

[16:48] <TimToady> also, flattened out the @<more><text> things in Match so there's now just @<text>

[16:48] <TimToady> using the newfangled ** <separator> syntax

[16:49] <mncharity> looks like I have the current version of heredoc, though part of it is commented out as a todo.

[16:49] <TimToady> if it prepends a "\n" to start with, that's the new version

[16:49] <TimToady> since it does literal "\n" matching rather than relying on ^^

[16:50] <TimToady> then we aren't fooled by gnostic interpolations into believing there's a line start after the interpolation

[16:51] <mncharity> should the ^ (\t+) instead be ^^ (\t+) ?

[16:51] <lichtkind> @seen fglock

[16:51] <lambdabot> I haven't seen fglock.

[16:53] <TimToady> should probably be matching literal \n

[16:54] <TimToady> oh, wait, no

[16:54] <TimToady> it's already the capture after a \n

[16:54] <TimToady> so ^ really is beginning of string

[16:54] <TimToady> $white is $0 from after \n

[16:55] <mncharity> ooo, there's a bot I'd like to see.  a p6 glossary and pointer bot.  ...  explain: gnostic interpolations    mumble mumble SNN mumble

[16:55] <TimToady> you'll note also the careful use of || rather than | matching so that it prefers $ws over \h*

[16:56] <TimToady> otherwise \h* would be longest token, and almost never match $ws that we want to match

[16:56] <mncharity> oy.  I've been avoiding noticing the differences between || and | ... an empowering innocence which probably has to come to an end rsn.

[16:57] <TimToady> also, it's really important to do the s:g in one pass, rather than one s:g for $w, and another for \h*

[16:57] <spinclad> gnostic: might refer to any of a-, mono-, bi-, or tritheistic interpolations in the canon, perhaps

[16:58] <spinclad> as long as they think they *know*

[16:58] *** justatheory left
[16:58] <TimToady> mostly gnostic means "I know something you don't know, nyah, nyah, nyah, please join our cult and I'll tell you."

[16:58] <mncharity> lol

[16:59] <TimToady> I prefer a theology that doesn't keep secrets for insiders

[16:59] *** DarkWolf84 joined
[17:00] <TimToady> but people do find the nyah, nyah, nyah part rather attractive from the giving end, sigh

[17:01] <mncharity> sigh indeed.  off to food i think.  i'll write up a strawman "meta-project" proposal after.

[17:01] <spinclad> 'we have it from this volume hidden on a mountain from the beginning of time by the Great Seth, son of Adam...'

[17:02] <lichtkind> TimToady: sorry for this rude question most of time i try to follow p6l but was there some significant changes in the lang in last 2 month?

[17:02] <TimToady> many people will believe this in 10 years, so you can reap great rewards by getting in on the pyramid now

[17:03] <TimToady> um, depends on what you mean by significant

[17:03] <spinclad> if you start now you can even help build the pyramid!

[17:03] *** Lunchy left
[17:03] <TimToady> if you look at the p6l archive and just look for spec changes, most of the (embedded, alas) checkin messages will tell you whether the changes are major or minor

[17:04] * spinclad could use some blood sugar... off to eat & again

[17:04] <TimToady> or just use svn log on the specs repo directly...

[17:05] <TimToady> that's at https://svn.perl.org/perl6/doc/trunk/design/syn

[17:05] <lambdabot> Title: Revision 14514: /doc/trunk/design/syn

[17:06] *** jhorwitz joined
[17:08] <TimToady> lichtkind: any particular reason for asking?

[17:08] <lichtkind> TimToady: because i do a lot of writing about perl 6 and not always understand consequences of the logchanges

[17:08] <lichtkind> TimToady: was'nt ther in 2006 announced a "major feature freeze" ?

[17:10] <TimToady> not by me

[17:11] <TimToady> I don't do freezes, only slushes

[17:11] <lichtkind> but it was somewhere in official looking texts and sounded pretty serious :)

[17:11] <TimToady> we approach stable asymptotically

[17:11] <lichtkind> iknow :)

[17:12] <TimToady> well, people want to say that the design is largely complete, and it is

[17:12] <lichtkind> but you cant say that in forehand i understand

[17:12] <TimToady> sometimes they overstate that

[17:13] <TimToady> I have always said for several years now that the design of the language is now primarily influenced by feedback from implementors

[17:13] <TimToady> but that doesn't mean we can't simplifiy or generalize when we see the opportunity

[17:13] <[particle]> it's been influenced by teachers and authors, too :)

[17:14] <TimToady> one major recent change is that sub foo ($a) no longer produces a named unary

[17:14] <TimToady> you have to explicitly say prefix:<foo> to get that to happen

[17:15] <TimToady> the syntax of ** quantification has changed recently to allow separators on the right

[17:15] <TimToady> not too many changes in the operators, except to split out the precedence of ~ and x

[17:15] <TimToady> so they're now looser than math ops

[17:16] <lichtkind> TimToady:  please what means unary foo($a) ?

[17:17] <lichtkind> TimToady: i recently returned from german perl workshop

[17:17] <TimToady> well, foo($a) is just a function call because of the parens in postfix position, so that's not a unary call

[17:17] <lichtkind> the real problem lays that the orga team which is real decent and intelligent

[17:17] <TimToady> but if you say "foo $a" that's an operator

[17:17] <TimToady> and the question is how to parse "foo $a, $b"

[17:18] <TimToady> a true unary would parse that as "foo($a),$b"

[17:18] <lichtkind> but the really believe that people who skoke about perl 6 in last years told every time soon its there so its sometimes difficult to comunicate

[17:18] <TimToady> a listop makes it "foo($a,$b)"

[17:19] <lichtkind> ah thanks

[17:19] <TimToady> well, maybe some people misunderstand the Christmas joke and then get overexcited

[17:19] <TimToady> and maybe some people just have a different idea of "soon"

[17:20] <lichtkind> i think its more than that, i think people who are excited were not best comunicators

[17:21] <PerlJam> TimToady: most people don't have the long view that some of us do.

[17:21] <lichtkind> TimToady: so foo $a, $b now translates to foo ($a, $b) ?

[17:21] <TimToady> and some of it was the rapid progess that pugs was making at the time, but that came to a screeching halt when audreyt got sick

[17:21] <lichtkind> yes kp6 and v6 also seemed to slowd down

[17:24] <TimToady> most of my work lately has been toward getting an executable version of STD.pm with correct semantic

[17:24] <TimToady> s

[17:24] <TimToady> STD.pm being kind of an executable spec for how the parser should work

[17:25] *** TJCRI joined
[17:26] <TimToady> foo ($a, $b) is something else again

[17:26] *** razvanm02 left
[17:26] <TimToady> you've passed ($a,$b) as the first arg to foo with that

[17:27] <TimToady> foo $a, $b translates to foo($a,$b)

[17:27] <TimToady> whitespace is significant in distinguishing postfix () from non-postfix ()

[17:27] <lichtkind> TimToady:  yeah i should know since i written text about :) currently i writing on an update status of the overall project

[17:27] <TimToady> but yes, given "sub foo ($)" p5 makes a unary operator

[17:28] <TimToady> but p6 makes a list operator

[17:28] *** Psyche^ joined
[17:28] <TimToady> and you have to say "sub prefix:<foo> ($a)" to get the p5 behavior

[17:29] *** ebassi joined
[17:32] <lichtkind> TimToady: thanks i copy that into a file and understand it later fully :) no most of it i think i got

[17:32] *** Lunchy joined
[17:33] <lichtkind> TimToady: something alse.. i maintain the p6doc module, currently i add further material to it like perl.com articles some doce from patrick, what you think should p6doc contain?

[17:34] <lichtkind> its not that drastic since bible docs are evolving and also the officialp5 docs sontains some gut infos

[17:35] <lichtkind> i just scream around if someone has further usefull material

[17:36] <TimToady> I don't have a strong opinion about documentation, other than that there's a lot of obsolete documents that people refer to without realizing how old they are

[17:37] <Juerd> Is that an opinion?

[17:37] <TimToady> I prefer to have opionions that are also facts.  :)

[17:37] <TimToady> *opinions

[17:38] <TimToady> .oO(what's an opi-onion?)

[17:39] <TimToady> maybe it's more of an opinion if you s/a lot of/far too many/

[17:39] <Juerd> Ah, then I agree :)

[17:42] <lichtkind> TimToady: i tkae care of that all things i included are mared as old or draft that are so

[17:42] <lichtkind> marked

[17:43] *** nnunley joined
[17:46] *** Patterner left
[17:46] *** Psyche^ is now known as Patterner

[17:47] *** eternaleye left
[17:54] <rakudo_svn> r25938 | petdance++ | "6.say"

[17:54] <rakudo_svn> r25938 | petdance++ |  now works

[17:55] <lichtkind> TimToady:  thanks for answers

[17:58] *** rdice left
[17:59] *** rdice joined
[18:08] *** Waleee joined
[18:09] *** njbartlett joined
[18:13] *** Aankhen`` left
[18:13] <[particle]> Andy: my method for converting spec tests goes something like this:

[18:13] <[particle]> visit http://perlcabal.org/syn/, and pick a synopsis (eg. S12)

[18:13] <lambdabot> Title: Official Perl 6 Documentation

[18:13] *** njbartlett left
[18:14] <[particle]> look for smartlinks (eg. - Hide t/oo/class/basic.t lines 13โ38 (9 โ, 0 ร) -)

[18:15] <[particle]> open the file named there, and a file named appropriately for the spec tests (eg. t/spec/S12-classes/basic.t)

[18:16] <[particle]> move the tests, svn add the file, svn ci.

[18:16] <[particle]> if you don't have a commit bit, let me know and i'll fix it asap

[18:17] <TimToady> there are no andys or petdances in the commiter list

[18:19] <TimToady> also, consider adding your conversion recipe to t/spec/README

[18:19] *** meppl joined
[18:19] <TimToady> shower &

[18:19] <[particle]> good ideas, all three.

[18:21] <TimToady> we could probably semi-automate the movement of pugs specific :todo into fudge format

[18:21] <pugs_svnbot> r19969 | ruoso++ | [smop] starting to write a lowlevel implementation of method that resolves to a C function call.

[18:21] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19969

[18:21] <lambdabot> Title: Changeset 19969 - Pugs - Trac

[18:21] <TimToady> that can actually be done in-place since pugs runs fudge over all .t files

[18:21] <TimToady> really &

[18:21] *** ebassi left
[18:22] *** justatheory joined
[18:27] <pugs_svnbot> r19970 | particle++ | [spec] convert basic S12 class tests

[18:27] <pugs_svnbot> r19971 | particle++ | [spec] convert pod to pod6

[18:27] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19971

[18:27] <lambdabot> Title: Changeset 19971 - Pugs - Trac

[18:27] <Andy> I don't understand the spec test stuff, Particle.

[18:28] *** eternaleye joined
[18:28] <[particle]> ok, want a commit bit anyway?

[18:30] *** justatheory left
[18:33] <Andy> yes.

[18:34] <Andy> I'm not able to think about it.

[18:34] <Andy> My question: Is there a common t/spec repo we're building?

[18:35] <[particle]> yes. it's in the pugs repo.

[18:35] <[particle]> just like STD.pm is in the pugs repo.

[18:35] <Andy> I didn't see a t/spec

[18:35] <[particle]> eventually, they may move somewhere more "official," but this way it's optimized for development. anyone can find and fix bugs in the spec

[18:36] <Andy> oh wait, it's there.

[18:36] <Andy> ok, and so "make spectest" should work under languages/perl6?

[18:36] <Andy> I see.

[18:37] <Andy> I hpoe that Audrey doesn't kick your ass for giving me commit access!

[18:38] <PerlJam> Andy: I think we're almost to the point where the number of people who have commit access exceeds those that do not.  :-)

[18:38] <Andy> PJ: I know, I kid.

[18:39] *** chris2 joined
[18:40] *** njbartlett joined
[18:45] <rakudo_svn> r25939 | particle++ | [rakudo perl6doc]capture pod bodies, and process pod options

[18:54] *** macae left
[18:59] <TimToady> 6u

[18:59] <TimToady> er, 6metoo

[19:02] *** aindilis left
[19:03] *** pbuetow left
[19:03] *** aindilis joined
[19:03] *** pbuetow joined
[19:06] *** tobeya joined
[19:07] *** smtms left
[19:13] *** smtms joined
[19:13] <pugs_svnbot> r19972 | gwern++ | I found a nicer workaround for the cabal/hsc2hs problem. Mention it.

[19:13] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19972

[19:13] <lambdabot> Title: Changeset 19972 - Pugs - Trac

[19:24] *** drrho joined
[19:34] *** drrho left
[19:42] *** qmole left
[19:42] *** qmole joined
[19:43] *** rff_ joined
[19:43] <rff_> hi

[19:45] <TimToady> howdy doo

[20:02] *** Coke joined
[20:04] <Coke> I have a perl5 guy who is wondering if perl6 will have some way to say '[complicated expression] && return it for [some list]' # return the value of the expression the first time it is true. Is there such a beast? (or a better way to get a similar effect?)

[20:06] <TimToady> well, first {expr}, @list is supposed to do that eventually

[20:08] <TimToady> hmm, but that's returning the first element of the list, not the computed value

[20:08] <PerlJam> "return the value the first time it's true"?

[20:08] <Coke> TimToady: ah, perfect.

[20:08] <PerlJam> that sounds like an until to me.

[20:08] <TimToady> until is kinda imperative...

[20:09] *** jferrero joined
[20:09] <TimToady> but I guess you could do "first True, map {expr}, @list if you want the other semantics

[20:10] <TimToady> first {.true} in the worst case

[20:12] <TimToady> mncharity: I am rather amazed to discover that .matchify actually seems to be working more or less correctly without any tweakage from the pugs version (other than translation to p5)

[20:12] <Coke> ~

[20:14] *** rff_ left
[20:24] *** meppl left
[20:27] <mncharity> re .matchify, ! :)

[20:31] <TimToady> well, there are still a few extra levels in there, but the ->{prior} mechanism seems to be working

[20:32] <TimToady> to get the integer node out of noun, I have to say

[20:32] <TimToady> print Dump(@r[0]->{prior}{number}[0]{integer});

[20:32] <TimToady> where it should just be $r{number}{integer}

[20:33] <TimToady> that's mainly a side effect of using list context to hold alternatives and quantifier backtracks

[20:33] <TimToady> er, $r->{number}{integer}

[20:33] <TimToady> I forget this is Perl 5  :)

[20:34] <wolverian> what's the -> in perl 6? ;)

[20:34] <TimToady> lambda

[20:34] <TimToady> -> $a, $b {...}

[20:34] <TimToady> or do you mean the other way?

[20:35] <TimToady> $r<number><integer>

[20:35] <wolverian> just remarking on the @r[0]->; if you thought it was perl 6, what's the -> doing there? 

[20:35] <TimToady> or just $<number><integer> if $r is really $/

[20:35] <wolverian> I need to come up with something constructive

[20:36] <wolverian> in the near future, hopefully :/

[20:37] <wolverian> (sorry :) 

[20:37] <TimToady> this is irc; remarking is perfectly okay  :)

[20:39] <wolverian> it doesn't make me feel less of an ass :)

[20:41] <Juerd> I haven't done much Perl 6 recently but I do find myself typing Perl 6 syntax when I'm working on Perl 5 code.

[20:41] *** mofino left
[20:43] <TimToady> you think you've got problems--I go straight from STD.pm to STD5.pm and back, and I'm always in the wrong file typing the wrong code. :)

[20:43] <TimToady> you'd think I'd be able to tell them apart by now... :)

[20:43] <Tene> TimToady: perhaps you should jus tmake a p6->p5 compiler so that you can just type only p6 code.  ;)

[20:44] <TimToady> um, great idea, why didn't I think of it earlier... :)

[20:44] <Tene> I suspect that someday I'll stop finding myself so funny.

[20:44] <Tene> That day is not today, though.

[20:46] *** rindolf joined
[20:47] <Juerd> TimToady: Haha

[20:47] *** araujo joined
[20:47] <Juerd> TimToady: Try alternating background colors in your editor. I did that when configuring two nearly identical new email servers and it worked well. I had a blue server and a red server, and used similarly colored labels on the actual machines.

[20:48] <Juerd> It doesn't fix the problem, but it can reduce it

[20:48] <mncharity> ooo, background colors, neat idea.

[20:48] <TimToady> well, obviously I can't use red...

[20:48] <Juerd> Maybe it should be obvious, but I don't see it... :)

[20:49] <TimToady> mncharity has been working on the ruby version of STD

[20:49] <Juerd> Oh, heh

[20:49] <wolverian> quick, pick green..

[20:49] <TimToady> green is my favorite color, but I like purple better...

[20:50] <[particle]> grue and bleen make a good combination

[20:51] <Juerd> In PC BASIC, 5 was purple, 6 was brownish :)

[20:52] <TimToady> I'll bet they got their backslashes backwards as well...

[20:52] <Juerd> In ANSCI, 5 is purple, 6 is teal

[20:52] <Juerd> ANSCI? ANSI!

[20:53] <Juerd> Well, of course it wasn't just BASIC that did this. It was 80x25 text thing that had this... Somewhere at &HB800 :)

[20:54] <TimToady> 25!?!? real terminals only have 24 lines!!!

[20:54] <Juerd> *PC* BASIC :)

[20:54] <Juerd> In BASIC, the 25th line was the status line. It didn't participate in scrolling :)

[20:55] <TimToady> I blame DEC

[20:55] <Juerd> I don't know who to blame :)

[20:55] <[particle]> D|I|G|I|T|A|L

[20:55] <TimToady> if they'd just stuck and 72x20 when they had it so good with the VT05

[20:55] <Juerd> I like that terminals are all more or less the same nowadays: xterm! :)

[20:55] <TimToady> *at

[20:56] <TimToady> course, the VT05 was uppercase only

[20:56] <TimToady> and Japanese was right out

[20:56] <Juerd> ๏ผต๏ผฐ๏ผฐ๏ผฅ๏ผฒ๏ผฃ๏ผก๏ผณ๏ผฅ ๏ผฉ๏ผณ ๏ผฎ๏ผฏ๏ผด ๏ผก ๏ผฐ๏ผฒ๏ผฏ๏ผข๏ผฌ๏ผฅ๏ผญ ๏ผก๏ผณ ๏ผฌ๏ผฏ๏ผฎ๏ผง ๏ผก๏ผณ ๏ผน๏ผฏ๏ผต ๏ผจ๏ผก๏ผถ๏ผฅ ๏ผต๏ผฎ๏ผฉ๏ผฃ๏ผฏ๏ผค๏ผฅ

[20:57] <TimToady> I guess it could type U+263A just fine

[20:57] <TimToady> and everyone knows what that means anyway

[20:57] <Juerd> Racial unicode :)

[20:58] <Coke> TimToady: it just takes so long to fire up character map.

[20:58] <Juerd> Though it's not entirely accurate. On my terminal, the WHITE SMILING FACE is black, and the BLACK SMILING FACE is white. :)

[20:58] <[particle]> how well does that work with EBCDIC

[20:58] <TimToady> yes, only whites are allowed to frown

[20:58] <Juerd> TimToady: That's blacks on my white-on-black terminals :)

[20:58] <TimToady> Juerd: mine too

[20:59] <TimToady> which is why purple would work better than green--closer to black

[20:59] <Juerd> But then, the BLACK HEART SUIT is white too.

[20:59] <TimToady> no!?!

[20:59] <TimToady> I detect a conspiracy

[20:59] <Juerd> โฅ

[21:00] *** arguile left
[21:00] <TimToady> it's really confusing to read the irc logs with the colors reversed from what they should be :)

[21:00] <Juerd> Given the de factor standard for four color playing cards, green is โฃ

[21:00] <wolverian> FILLED would make more sense..

[21:00] <PerlJam> Juerd: clover

[21:00] <Juerd> PerlJam: Clubs

[21:01] <PerlJam> well, when it's green it's a clover or a shamrock

[21:01] <Juerd> And diamonds are blue. โฆ

[21:02] <Juerd> Hearts are red, spades are black.

[21:03] <TimToady> well, everyone's gonna be running white-on-black screens when we have active OLED displays that run twice as long as black-on-white

[21:03] <wolverian> OLED++ 

[21:04] <TimToady> unless they can find a way to make the dark pixels use more power than the light ones... ;)

[21:05] *** Andy is now known as AndyAway

[21:06] <TimToady> maybe light up our screens indirectly with burning US embassies...

[21:06] <TimToady> sigh

[21:07] <PerlJam> future displays will stimulate rods and cones directly.  No need for a "screen"

[21:07] <TimToady> will still take more power for the light pixels :)

[21:08] <[particle]> we'll be using cheap, renewable, nuculur power by then

[21:08] <TimToady> maybe we should rename smop to kosovo, then go burn down the microsoft embassy in parrotland

[21:10] <PerlJam> [particle]: portable nuclear power plants like from Asimov's Foundation series.

[21:10] *** lichtkind left
[21:15] *** devogon left
[21:18] *** rindolf left
[21:18] *** blindfish left
[21:19] *** devogon joined
[21:20] *** mofino joined
[21:28] *** Waleee left
[21:30] *** cognominal_ joined
[21:31] *** meppl joined
[21:44] <mncharity> lol # /me backlogs

[21:53] <mncharity> My impression is kp6's ast is the most recent and best attempt at designing a Right Thing ast/il.  anyone disagree?  any interesting runner-ups worth looking at?

[21:54] <[particle]> mncharity: i think parrot's ast is at least equally good, but i'm biased

[21:55] <[particle]> mncharity: http://www.parrotcode.org/docs/pdd/pdd26_ast.html

[21:55] <lambdabot> Title: Parrot Abstract Syntax Tree - parrotcode

[21:55] * mncharity looks...

[21:55] <mncharity> thx !:)

[21:56] *** wknight-away joined
[21:57] * [particle] is currently working on a yaml dump format and dumper for parrot's ast

[21:58] *** buchetc joined
[21:59] <mncharity> kp6 ast: http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/src/KindaPerl6/Ast.pm

[21:59] <lambdabot> http://tinyurl.com/2f66ak

[21:59] <mncharity> re working on a yaml dump format, ooo...

[21:59] <mncharity> note http://www.kuwata-lab.com/kwalify/

[21:59] <lambdabot> Title: Kwalify: schema validator and data binding for YAML/JSON

[22:00] <[particle]> it's not incredibly important the the ASTs be the same between implementations, but it is important for them to be quickly and easily converted

[22:00] *** tobeya left
[22:02] <[particle]> re kwalify: thanks!

[22:03] *** jferrero left
[22:06] *** jferrero joined
[22:08] <pugs_svnbot> r19973 | lwall++ | [Cursor5] .matchify produces a better behaved Match object

[22:08] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19973

[22:08] <lambdabot> Title: Changeset 19973 - Pugs - Trac

[22:12] <TimToady> this now works:

[22:13] <TimToady> my $r = Perl->new(orig => '42')->noun([]); print Dump($r->{value}{number}{integer});

[22:13] <TimToady> and prints a yaml AST(ish)

[22:14] <TimToady> now we just have to get the rest of it to work :)

[22:14] <mncharity> ! :)

[22:19] *** TJCRI left
[22:19] *** justatheory joined
[22:24] *** buchetc left
[22:32] <mncharity> oky.  here's where i'd really like a whiteboard.  I don't suppose anyone is in the boston area and would like to get together in the next couple of days to talk through "a project architecture for the next few weeks"?

[22:32] <mncharity> but basically:

[22:34] <TimToady> obra lives near boston

[22:34] <obra> mncharity: I'm happy to _listen_ if that would help

[22:34] <obra> And comment.

[22:34] <obra> but I can't commit to being a useful design contributor ;)

[22:35] <obra> also, I have large whiteboards

[22:42] *** tobeya joined
[22:43] *** IllvilJa left
[22:45] <mncharity> obra: that would be helpful.  i find simply discussing and answering questions often yields new insights and better design.

[22:45] <obra> ok.

[22:46] <obra> could do tomorrow from 6-7 if that's good for you

[22:46] <mncharity> that would be great.  see you at 6 (pm I assume?  am would be fine too).

[22:48] <obra> pm is better for me ;)

[22:48] <obra> wanna pop by the bps office?

[22:49] <mncharity> ok.  yes.  see you 6 pm at bps.

[22:49] <obra> lovely

[22:50] * obra has no idea if there's an easy way to use this nice macbook to broadcast the whiteboard and discussion in the room but we could try if other folks wanna

[22:51] *** justatheory left
[22:52] <mncharity> basic idea is:  a kp6/ast-like yaml format.  kwalify-ed.  with a p5 wrapper lib.  (also rb and p6 - all metaprogrammed from p5 - they are basically just class names and vars).

[22:53] <mncharity> a lot like kp6 -Cast, and in fact there would be a  kp6 -Cast | kp6ast-to-kp6ast-like-yaml > foo.yaml, but the key difference is

[22:54] <mncharity> the backends can be written in p5 (or rb:),  rather than in the kp6 subset-dialect of p6.  so development is easy, and they run fast.

[22:55] <obra>   talked to fglock about this?

[22:57] <mncharity> two p5 backends are of particular interest - a very simple transliterator - which simply converts from p6 syntax to p5 syntax, and doesn't try to emulate p6 semantics.  you simply have to avoid writing p6 things which will be broken by that process.  it's a way to write in p6, instead of p5/rb/whatever, while having a zero-performance hit.  so backends can

[22:57] <mncharity> start being written in p6 now, rather than needing to be mostly in native language.

[22:58] <mncharity> re fglock, no, hasn't been around, and the current form of the argument is just gelling now.

[22:58] <obra> nod

[22:59] <mncharity> the other p5 backend is the current effort.  hmm... there might be a third, but later on that.

[23:00] <mncharity> the...  for now "yail", yet-another-intermediate-language, also provides a target for three, maybe four other pipes.

[23:01] <mncharity> redsix, STD5, and STD_red (as backup to STD5).  maybe pugs.

[23:02] *** rdice left
[23:02] <mncharity> STD5 flow is   STD5 .matchify -> match tree (dump as yaml... simply because I'd find it easier to cleanly massage in ruby than in p5) ->  gast (more in a moment) -> yail.

[23:04] <mncharity> gast(ly) is just an oo ast which closely matches the STD grammar.  Basically to insulate the parser from yail, provide a place to do any non-local analysis needed, etc.  If it ends up being a no-op, well, then it ends up being very simple.

[23:04] *** [particle1 joined
[23:05] <mncharity> STD_red generates a match tree vaguely similar to STD5's, but sufficiently different that it gets its own -> gast converter.

[23:05] *** charsbar_ joined
[23:06] *** tobeya left
[23:06] *** qmole left
[23:06] *** Lunchy left
[23:06] *** kanru left
[23:06] *** [particle] left
[23:06] *** iblechbot left
[23:06] *** meteorjay left
[23:06] *** arcady left
[23:06] *** silug left
[23:06] *** tewk left
[23:06] *** rakudo_svn left
[23:06] *** AndyAway left
[23:06] *** kolibrie left
[23:06] *** charsbar left
[23:06] *** ilbot2 left
[23:06] *** allbery_b left
[23:06] *** falesca left
[23:06] <mncharity> gast is again yaml-ified, dtd'ed (though less stably).  basically so someone wanting to

[23:06] <mncharity> drat, net partition. :(

[23:07] <mncharity> wanting to generate an alternative to yail can do so.

[23:07] <mncharity> insulated from the STD parsers.

[23:08] *** meteorjay joined
[23:08] *** Lunchy joined
[23:08] <mncharity> again, each node is likely only a line or few long, basically to massage away oddities in the match tree (like the ones mentioned this morning).  plus whatever analysis proves needed.

[23:10] <mncharity> hmm... ok, I havent thought where to put "compilation", distinct from "any analysis needed to generate yail" and "things the backends do when emitting".  sigh.  ok, todo.

[23:11] <mncharity> I'm not sure whether a hacked redsix should generate gast or yail.

[23:11] *** rakudo_svn joined
[23:11] *** ilbot2 joined
[23:12] *** alester joined
[23:13] <mncharity> development path might be:  the kp6 -Cast -> yail  postprocessor, plus yail dtd and lib and unit tests.  and the simple yail to bare p5.  that get's yail designed, implemented, tested.  folks interested in doing backends, such as already have done kp6 backends, can then bang on it.

[23:13] *** Limbic_Region joined
[23:14] *** qmole joined
[23:14] <mncharity> a person day or three, unless kp6 -Cast turns out to have problems.

[23:16] <mncharity> then STD5 .matchify to gast, and gast itself, but it a more exploratory mode.  eg, get 42 working through gast to yail and thus p5, before worrying to hard about the rest of gast and gast->yail conversion.

[23:16] *** kolibrie joined
[23:17] <mncharity> do the same for the bit of STD_red which is working.

[23:17] *** tobeya joined
[23:17] *** kanru joined
[23:17] *** [particle] joined
[23:17] *** iblechbot joined
[23:17] *** arcady joined
[23:17] *** silug joined
[23:17] *** tewk joined
[23:17] *** falesca joined
[23:17] *** allbery_b joined
[23:17] *** charsbar joined
[23:17] *** AndyAway joined
[23:17] <mncharity> maybe.

[23:17] *** tewk left
[23:18] *** charsbar left
[23:18] *** nipotaway is now known as nipotan

[23:18] <mncharity> then redsix to gast, hopefully making redsix sort of a kp6 alternative (trading kp6's bootstrap concept for better performance).

[23:18] *** AndyAway left
[23:19] *** tewk joined
[23:19] *** tobeya left
[23:19] <mncharity> i believe, with some uncertainty, that last bit will let us start writing p5-style p6, which gets compiled to real bare p5.

[23:20] *** arcady left
[23:20] *** [particle] left
[23:20] *** allbery_b left
[23:20] *** falesca left
[23:20] *** silug left
[23:20] *** iblechbot left
[23:20] *** kanru left
[23:20] *** silug_ joined
[23:20] *** arcady joined
[23:20] *** falesca joined
[23:20] <mncharity> so folks writing backends can, for the most part, work in p6.

[23:20] *** kanru joined
[23:21] <mncharity> and folks creating runtimes.

[23:22] <mncharity> eg, i could take the p5 yet-another-regex-engine, which does p6 rx on top of a p5 re, translate it into p5-like p6, and then any platform with a pcre library would have p6 rx.  as well as being bootstrap.

[23:27] *** pbuetow left
[23:27] *** pbuetow joined
[23:28] <mncharity> i think those are all the pieces.  it's sortof generalizing the observation that STD5 is easier than STD/pugs.  and exposing yail so 

[23:28] *** pbuetow left
[23:29] <mncharity> 'permitting' p5/rb use doesn't preclude p6/other use.

[23:29] *** pbuetow joined
[23:30] <mncharity> gets us out of "the only way to use pugs's parser is to write in haskell in pugs", "kp6's in kp6 in kp6", and "redsix in ruby in redsix".

[23:30] *** ruz left
[23:30] *** ruz joined
[23:30] <mncharity> <handwaving ends>

[23:30] <mncharity> hah

[23:31] <mncharity> thoughts?

[23:31] <mncharity> questions?

[23:33] <mncharity> eep.  that was 40 min. :/  in retrospect, perhaps writing it up and nopasting it would have been better.(?)

[23:33] *** cmarcelo left
[23:34] *** eternaleye left
[23:34] <mncharity> 60 min.

[23:35] <[particle1> email is a much better medium for monologues

[23:36] *** [particle1 is now known as [particle]

[23:36] <mncharity> hadn't envisioned it as a monologue :)

[23:40] <[particle]> :)

[23:43] <Juerd> Hi. Who could send me a test email? #####@juerd.nl - thanks!

[23:44] <wolverian> sure

[23:44] <Juerd> Thanks

[23:44] <wolverian> you can yell at me again for misconfiguring my mta :)

[23:44] <Juerd> Haha :)

[23:44] <Juerd> I'll yell at my own MTA configuration first :)

[23:45] <wolverian> oh, my network is having problems

[23:45] <wolverian> hmm.

[23:45] <wolverian> it might have left now

[23:45] <[particle]> i sent one

[23:45] *** chris2 left
[23:45] <Juerd> So far, greylisting seems to work well

[23:45] <wolverian> yes, it did.

[23:45] <wolverian> tell me if it reaches you -- I'm kind of curious too

[23:45] <wolverian> this is a brand new laptop :)

[23:45] <wolverian> (mutt + msmtp)

[23:45] <Juerd> I got it :)

[23:46] * Juerd uses his feather user administration for nick <-> realname mapping :)

[23:47] <wolverian> I also have it in my /whois

[23:47] * wolverian is nice that way

[23:51] <mncharity> not a single comment or question?  ^.^

[23:54] <mncharity>  /me listens to 5.10 make test go by, on an unshielded audio wire which picks up disk and display activity... very neat.  a gnome "ambient system sound" utility.

[23:55] *** pbuetow left
[23:57] <wolverian> whoa, that's cool

[23:57] <wolverian> I want it too :)

[23:57] <meppl> good night

[23:57] <mncharity> any thoughts on a name for the kp6 ast -like ast...

[23:57] <mncharity> g'night meppl

[23:57] <meppl> ;)

[23:58] <mncharity> ... package.   yail.  nail.  fail.  ...

[23:58] <[particle]> kast

[23:59] *** meppl left
