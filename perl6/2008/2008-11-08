[00:04] *** pmurias left
[00:24] *** pcbuetow joined
[00:33] *** KidShenck joined
[00:39] *** pbuetow left
[00:54] *** bsb joined
[01:02] <meppl> good night

[01:03] *** Exodist left
[01:04] *** meppl left
[01:06] *** masak left
[01:16] *** Aisling left
[01:16] *** Aisling joined
[01:16] *** Aisling left
[01:18] *** pcbuetow left
[01:21] *** kanru left
[01:22] *** KidShenck left
[01:22] *** bacek joined
[01:23] <bacek> perl6: class Foo {};  my $a = Foo.new; my $b = $a;

[01:23] <p6eval> rakudo 32442: RESULT[Method 'perl' not found for invocant of class 'Foo'␤current instr.: '_block11' pc 25 (EVAL_12:12)␤]

[01:23] <p6eval> ..elf 22847: RESULT[Foo.new(!!!)␤]

[01:23] <p6eval> ..pugs: RESULT[\Foo.new(()]

[01:26] *** Aisling joined
[01:41] *** bacek left
[01:47] *** pedrob left
[01:51] *** bacek joined
[01:54] *** hercynium joined
[01:56] *** alexn_org left
[01:58] *** simcop2387 left
[02:24] *** jauaor left
[02:25] *** wknight8111 left
[02:50] <[particle]> rakudo: class Foo {}; my Foo $a .= new; my $b = $a;

[02:50] <p6eval> rakudo 32442: RESULT[Method 'perl' not found for invocant of class 'Foo'␤current instr.: '_block11' pc 25 (EVAL_12:12)␤]

[02:50] <[particle]> harumph

[02:57] <bacek> perl6: class Foo {};  my Foo $a .= new; my $b = $a; say $b.WHAT

[02:57] <p6eval> pugs, rakudo 32442: OUTPUT[Foo␤]

[02:57] <p6eval> ..elf 22847: OUTPUT[Undef␤]

[03:02] *** jiing joined
[03:04] <bacek> perl6: say Bool.pick

[03:04] <p6eval> rakudo 32442: OUTPUT[Bool␤]

[03:04] <p6eval> ..pugs: OUTPUT[*** pick not defined: VType (mkType "Bool")␤    at /tmp/eOLK8UuPHE line 1, column 5 - line 2, column 1␤]

[03:04] <p6eval> ..elf 22847: OUTPUT[Can't locate object method "pick" via package "Bool" at (eval 117) line 3.␤ at ./elf_f line 3861␤]

[03:05] *** simcop2387 joined
[03:12] *** sri_kraih joined
[03:20] *** sri_kraih_ left
[03:24] *** sri_kraih left
[03:24] *** sri_kraih joined
[03:30] <rakudo_svn> r32443 | chromatic++ | [Rakudo] Fixed a C++ compilation error (Vasily Chekalkin).

[03:45] *** Psyche^ joined
[04:00] *** Patterner left
[04:00] *** Psyche^ is now known as Patterner

[04:01] *** elmex left
[04:02] *** elmex joined
[04:10] *** bacek_ joined
[04:13] *** bacek left
[04:25] *** cpfr left
[04:30] *** Limbic_Region left
[04:33] *** stephenos left
[04:40] *** rindolf joined
[04:41] *** DemoPhreak joined
[04:56] *** DemoFreak left
[05:06] <pugs_svn> r22918 | pmichaud++ | [spec]:  Clean up some arrayref tests for rakudo.

[05:12] *** z80ASM joined
[05:28] <pmichaud> pugs:  my %hash = <a 3>; say %hash.perl;

[05:28] <p6eval> pugs: OUTPUT[\(\("a", "3"),)␤]

[05:28] <pmichaud> pugs:  my %hash = { a => 3}; say %hash.perl;

[05:28] <p6eval> pugs: OUTPUT[\(\("a", 3),)␤]

[05:28] *** tcliou|slept is now known as tcliou

[05:29] <pmichaud> my %hash = ( a => 1, b => 2);  say %hash.perl;

[05:29] <pmichaud> pugs: my %hash = ( a => 1, b => 2);  say %hash.perl;

[05:29] <p6eval> pugs: OUTPUT[\(\("a", 1), \("b", 2))␤]

[05:30] <pmichaud> pugs: my %hash = ( a => 1, b => 2);  my $x = \%hash; say $x.WHAT;

[05:30] <p6eval> pugs: OUTPUT[Hash␤]

[05:30] <pmichaud> pugs: my %hash = ( a => 1, b => 2);  my $x = \%hash; say $x.perl;

[05:30] <p6eval> pugs: OUTPUT[\\(\("a", 1), \("b", 2))␤]

[05:31] <pmichaud> pugs:  my $x = \( 1, 2, :foo(3) );  say $x.perl;

[05:31] <p6eval> pugs: OUTPUT[CaptSub {c_feeds = [:MkFeed {f_positionals = [:IFinite 1,IFinite 2:], f_nameds = [(foo,[:IFinite 3:])]}:]}␤]

[05:32] <pmichaud> pugs: my %hash = ( a => 1, b => 2);  my $x = \( %hash ); say $x.perl;

[05:32] <p6eval> pugs: OUTPUT[CaptSub {c_feeds = [:MkFeed {f_positionals = [:VList [VRef <Pair:0xb7a8465d>,VRef <Pair:0xb7ab769d>]:], f_nameds = []}:]}␤]

[05:34] *** justatheory left
[05:46] *** kanru joined
[06:26] *** nacho_ joined
[06:53] *** tcliou is now known as tcliou|GroundZer

[06:53] *** tcliou|GroundZer is now known as tcliou|Ground-0

[06:54] *** tcliou|Ground-0 is now known as tcliou|Away

[07:01] *** just joined
[07:12] *** adc_Penner joined
[07:27] *** azawawi joined
[07:27] <azawawi> ping

[07:27] <lambdabot> azawawi: You have 5 new messages. '/msg lambdabot @messages' to read them.

[07:27] <azawawi> @messages

[07:27] <lambdabot> moritz_ said 3d 10h 32m 57s ago: all required modules are installed on feather1 now (for evalbot)

[07:27] <lambdabot> TimToady said 1d 14h 8s ago: you should find your parsers running somewhat faster now, given that STD now parses itself twice as fast as it did yesterday (given a preloaded cache)

[07:27] <lambdabot> TimToady said 11h 21m 16s ago: S_s_h seems to be calling is_type and is_routine on all sorts of things for which it makes no sense, such as the insides of strings like "True" and the various bits of

[07:27] <lambdabot> longnames like statement_control:PRE

[07:27] <lambdabot> TimToady said 11h 5m 4s ago: the problem is you can't just scan for /identifier/; you need to pick color based on the *last* context you care about, like nibbler or deflongname

[07:27] <lambdabot> TimToady said 10h 56m 58s ago: so in the case of push @basetypenames, "True" the True is currently blue because the push is an identifier, which is bogus, since True is just a nibble

[07:28] <pugs_svn> r22919 | particle++ | [t/spec] unmark some passing rakudo tests due to container/value refactor

[07:31] <azawawi> @seen moritz_

[07:31] <lambdabot> moritz_ is in #perl6. I last heard moritz_ speak 22h 15m 32s ago.

[07:31] *** adc_Penner left
[07:31] <azawawi> @tell moritz_ syntax highlighted html snippets are now generated on feather1 (e.g. http://feather.perl6.nl/~azawawi/html/S05-match/blocks.t.snippet.html)

[07:31] <lambdabot> Consider it noted.

[07:38] <pugs_svn> r22920 | azawawi++ | [STD_syntax_highlight] ETOOMUCHTIME -> spec_highlight

[07:38] <pugs_svn> r22920 | azawawi++ | [STD_syntax_highlight] removed comments about it being slow, TimToady++

[07:42] <azawawi> is http://irclog.perlgeek.de/perl6/today offline?

[07:42] <lambdabot> Title: IRC log for #perl6, 2008-11-08

[07:42] <azawawi> or at least not bringing any results

[07:42] <TimToady> people were complaining about it earlier

[07:42] <azawawi> hi TimToady

[07:42] *** apeiron left
[07:44] *** apeiron joined
[07:46] <azawawi> TimToady: when is lex directory generated?

[07:46] <TimToady> as needed when you start parsing a rule/language that hasn't been parsed before

[07:46] <TimToady> it's a JIT lexer

[07:47] <azawawi> so after 'make', it would not be generated

[07:47] <TimToady> well, a little bit is from the test case

[07:48] <TimToady> the try5 tries to at least generate terms and infixes

[07:49] <azawawi> is there an option to disable lex dir caching?

[07:50] <TimToady> not really.  it does currently suppress it on any package containing /ANON/

[07:51] <TimToady> so anything else could turn it off at the same point

[07:59] <pugs_svn> r22921 | particle++ | [t/spec] unmark some more tests passing for rakudo

[08:03] *** abra joined
[08:08] <TimToady> zzz &

[08:09] <azawawi> TimToady: have a nice zzz ;-)

[08:23] *** iblechbot joined
[08:32] *** apeiron left
[08:36] *** just left
[08:36] *** nacho_ left
[08:36] *** pmurias joined
[08:37] *** bacek_ left
[08:37] <pmurias> ruoso: hi

[08:38] <azawawi> hi pmurias

[08:38] <pugs_svn> r22922 | azawawi++ | [STD_syntax_highlight] check: working directory should end with src/perl6

[08:38] <pmurias> azawawi: hi

[08:39] *** bsb left
[08:39] <azawawi> whats new with mildew/smop?

[08:40] <pmurias> i threw out slime yesterday, was mostly offline last week

[08:41] <azawawi> does it parse all of t/spec?

[08:41] <pmurias> STD parses all of t/spec

[08:42] <pmurias> mildew uses it, but it can only handle very simple things atm

[08:42] <azawawi> i dont know all of mildew/smop... what is it exactly?

[08:43] <pmurias> smop is a runtime to run perl6 on, and mildew is the perl6 compiler for it

[08:44] <pmurias> mildew/smop is like rakudo/parrot

[08:45] <pmurias> azawawi: what's the state of padre STD_syntax_highlighting integration?

[08:50] *** bacek_ joined
[08:51] <azawawi> pmurias: sorry i was away a bit

[08:51] <azawawi> pmurias: i dont know about any effort to integrate padre with STD_syntax_highlight

[08:52] <azawawi> pmurias: with the perlgeek.de irclog being offline... i cant follow up like before

[08:53] <pmurias> i saw in the irc logs that szabgab talked to you about that

[08:54] <azawawi> and that's it...

[08:54] *** kst left
[08:54] <azawawi> i didnt hear from him afterwards

[08:54] <bacek_> perl6: my %h = {}; exists %h<a>; say %h.perl

[08:54] <p6eval> pugs: OUTPUT[*** No compatible multi variant found: "&exists"␤    at /tmp/xQEEtY7TN2 line 1, column 13-25␤]

[08:54] <p6eval> ..rakudo 32444: OUTPUT[No applicable methods.␤␤current instr.: '_block11' pc 66 (EVAL_12:25)␤]

[08:54] <p6eval> ..elf 22847: OUTPUT[Undefined subroutine &GLOBAL::exists called at (eval 119) line 4.␤ at ./elf_f line 3861␤]

[08:55] <azawawi> pmurias: im actually working on croning it and then going to work on evalbot to 'highlight:' simple lines to sial.org/pbot

[08:56] <pmurias> azawawi: irc supports color

[08:56] <bacek_> perl6: my %h = {}; say %h.exists('a'); say %h.perl

[08:56] <p6eval> rakudo 32444: OUTPUT[0␤{}␤]

[08:56] <p6eval> ..pugs: OUTPUT[␤\()␤]

[08:56] <p6eval> ..elf 22847: OUTPUT[␤{}␤]

[08:56] <azawawi> pmurias: yeah but moritz_ does not colors ;-)

[08:57] <azawawi> s/color/like color/

[08:58] <pmurias> 8colored

[08:59] <azawawi> 4i know ;-)

[08:59] <pmurias> azawawi: why doesn't moritz_ like colors in evalbot output

[08:59] <azawawi> some irc clients dont support it

[09:00] <azawawi> pmurias: interesting link -> http://news.perlfoundation.org/2008/11/2008q4_grant_proposal_integrat.html

[09:00] <lambdabot> Title: 2008Q4 Grant Proposal: Integrating Padre with Parrot and Rakudo - The Perl Found ..., http://tinyurl.com/69gflq

[09:01] <azawawi> and this link: http://szabgab.com/blog/2008/11/1225946474.html

[09:01] <lambdabot> Title: Syntax highlighting nightmare

[09:03] *** ab5tract left
[09:08] *** meppl joined
[09:11] <meppl> good morning

[09:21] *** samlh joined
[09:26] <pugs_svn> r22923 | pmurias++ | [smop] mold is used to call DESTROYALL, we still don't have a free this register RI

[09:27] <pugs_svn> r22924 | pmurias++ | [smop] remove the sm0p/ directory

[09:31] *** pmurias left
[09:49] <pugs_svn> r22925 | azawawi++ | [STD_syntax_highlight] refactored error writing routine

[09:49] <pugs_svn> r22925 | azawawi++ | [STD_syntax_highlight] catching CTRL-C is not needed with backticks

[09:50] *** z80ASM left
[09:54] <pugs_svn> r22926 | azawawi++ | [STD_syntax_highlight] refactored code into MAIN

[10:10] *** smg left
[10:13] <pugs_svn> r22927 | azawawi++ | [STD_syntax_highlight] added a cron script

[10:19] *** cpfr joined
[10:21] *** bacek_ left
[10:30] *** schmalbe joined
[10:32] *** |Jedai| joined
[10:32] *** bacek_ joined
[10:35] *** pmurias joined
[10:42] *** z80ASM joined
[10:43] *** alexn_org joined
[10:44] *** abra left
[10:52] *** Jedai left
[10:56] <pugs_svn> r22928 | jnthn++ | [spectest] Add some tests for generic subs.

[11:02] *** ZuLuuuuuu joined
[11:10] <rakudo_svn> r32446 | jonathan++ | [rakudo] When you use a type in a signature that was captured earlier in the signature, need to fix up the scope.

[11:13] *** araujo left
[11:31] *** pbuetow joined
[11:32] *** DeadlyTiga joined
[11:32] *** DeadlyTiga left
[11:33] <pmurias> @tell ruoso we mold doesn't support $r777 = $scope, and i don't know how to cleanly do the previous scheme

[11:33] <lambdabot> Consider it noted.

[11:36] <pmurias> @tell ruoso s/cleanly do/cleanly do it without using the/

[11:36] <lambdabot> Consider it noted.

[11:36] *** ejs joined
[11:36] <pmurias> ruoso: ping

[11:40] *** smg joined
[11:42] <pugs_svn> r22929 | pmurias++ | [mildew] reverted 22887 and 22888 as they output broken m0ld, 22888 likely needs to be reapplied once things works again

[11:42] *** bacek__ joined
[11:42] *** pedrob joined
[11:45] <pugs_svn> r22930 | pmurias++ | [smop] hello wold works with m0ld --exec again

[11:45] <pugs_svn> r22930 | pmurias++ | it is a problem with BValues

[11:45] <pugs_svn> r22930 | pmurias++ | added BValue.DEBUG and smop_describe_object to help debugging

[11:46] *** pedrob_ joined
[11:47] <pmurias> walk&

[11:50] *** pedrob left
[11:51] *** pedrob joined
[11:54] *** bacek_ left
[11:56] *** pedrob__ joined
[12:01] *** pedrob left
[12:01] *** pedrob joined
[12:03] *** pjcj left
[12:05] *** pedrob___ joined
[12:06] *** pedrob_ left
[12:07] *** z80ASM left
[12:09] *** rindolf left
[12:15] *** rindolf joined
[12:20] *** samlh left
[12:21] *** pedrob__ left
[12:23] *** pedrob left
[12:25] *** pedrob___ left
[12:27] *** pjcj joined
[12:38] *** abra joined
[12:38] <bacek__> perl6:  sub is($a,$b) { $a eq $b }; say is (42,42)

[12:38] <p6eval> rakudo 32447: OUTPUT[too few arguments passed (1) - 2 params expected␤current instr.: 'is' pc 89 (EVAL_13:37)␤]

[12:38] <p6eval> ..pugs: OUTPUT[pugs: Extra space found after &is (...) -- did you mean &is(...) instead?␤]

[12:38] <p6eval> ..elf 22847: OUTPUT[1␤]

[12:38] *** abra left
[12:39] *** bacek__ is now known as bacek

[12:59] *** plash_ joined
[12:59] <pmurias> perl6:  sub is($a,$b) { $a eq $b }; say is(42,42)

[12:59] <p6eval> elf 22847, pugs, rakudo 32447: OUTPUT[1␤]

[12:59] <bacek> pmichaud: I just wonder why extra space is prohibited...

[13:02] <pmurias> bacek: it propably passes a list as a single param

[13:03] <bacek> pmichaud: yes, indeed...

[13:04] <azawawi> @tell moritz_ spec_highlight is now scheduled to run every 3 hours on feather1

[13:04] <lambdabot> Consider it noted.

[13:04] <pmurias> bacek: i'm pmurias ;)

[13:05] *** rindolf left
[13:05] <bacek> pmurias: oh shi.. :) 2 letters isn't enough for tab completion :)

[13:05] <azawawi> how do i nice all bash commands by default?

[13:05] <pmurias> nice bash?

[13:05] <bacek> azawawi: . /etc/bash_completion

[13:06] <bacek> perl6: sub foo($x) { $x/=2 }; my $a=84; foo($a); say $x

[13:06] <p6eval> rakudo 32447: OUTPUT[No handler to delete.␤current instr.: 'parrot;PAST;Compiler;as_post' pc 6052 (src/PAST/Compiler.pir:1651)␤]

[13:06] <p6eval> ..pugs: OUTPUT[*** Can't modify constant item: VRef <Scalar:0xb5edf639>␤    at /tmp/xXdYANXJpC line 1, column 15-21␤]

[13:06] <p6eval> ..elf 22847: OUTPUT[Unknown rule: infix_postfix_meta_operator:=␤It needs to be added to ast_handlers.␤ at ./elf_f line 1918␤]

[13:06] <azawawi> cool thx

[13:06] <bacek> perl6: sub foo($x) { $x/=2 }; my $a=84; foo($a); say $a

[13:06] <p6eval> pugs: OUTPUT[*** Can't modify constant item: VRef <Scalar:0xb5ddf639>␤    at /tmp/KS3nSbHGGK line 1, column 15-21␤]

[13:06] <p6eval> ..rakudo 32447: OUTPUT[42␤]

[13:06] <p6eval> ..elf 22847: OUTPUT[Unknown rule: infix_postfix_meta_operator:=␤It needs to be added to ast_handlers.␤ at ./elf_f line 1918␤]

[13:07] <bacek> azawawi: put it into .bash_profile :)

[13:08] *** abra joined
[13:10] <rakudo_svn> r32448 | jonathan++ | [rakudo] Add spectest file for generic subs to spectest_regression.

[13:12] <pmurias> ruoso: we need a way of doing SMOP_DISPATCH in a stackfull way in order for C code to be able to receive an anwser from setr

[13:24] *** abra left
[13:30] *** pedrob joined
[13:30] *** pedrob left
[13:41] *** bacek left
[13:54] *** z80ASM joined
[13:56] *** bacek joined
[13:58] *** masak joined
[14:00] *** lisppaste3 left
[14:02] *** wknight8111 joined
[14:13] *** schmalbe left
[14:14] *** KidShenck joined
[14:18] *** bacek left
[14:19] *** bacek joined
[14:19] *** araujo joined
[14:25] *** pedrob joined
[14:30] *** iblechbot left
[15:01] *** Bzek joined
[15:02] *** dbrock joined
[15:02] <dbrock> if I wanted to write a parser in Perl 6, how would I go about doing that?

[15:02] <masak> dbrock: so, you want to use the grammars in Perl 6 to parse something?

[15:03] *** z80ASM left
[15:03] <dbrock> yeah, I just want to parse it and write out the syntax tree in some structured format

[15:03] <dbrock> is that a good idea?

[15:03] <dbrock> is Perl 6 a good tool for that?

[15:03] <masak> dbrock: 1. download Rakudo, 2. write a grammar, 3. write the code that matches on a text and traverses $/

[15:03] <masak> dbrock: Perl 6 is an excellent tool for that

[15:03] <dbrock> cool :-)

[15:03] <dbrock> what's $/?

[15:03] <masak> dbrock: if you need working examples, see the November source code.

[15:04] <dbrock> okay

[15:04] <masak> dbrock: ok, if you don't know what $/ is, you need to read S05

[15:04] <masak> http://perlcabal.org/syn/S05.html

[15:04] <lambdabot> Title: S05

[15:04] <dbrock> thanks!

[15:05] <dbrock> I'm kind of excited that I'm about to try to actually write something in Perl 6 :-)

[15:05] <masak> dbrock: np. let me know if you have any questions.

[15:05] <masak> dbrock: I know the feeling :)

[15:09] <masak> rakudo: grammar SSN { rule TOP { ^ \d ** 10 $ } }; say ?("8936628302" ~~ SSN::TOP)

[15:09] <p6eval> rakudo 32449: OUTPUT[1␤]

[15:15] *** bacek_ joined
[15:16] *** bacek left
[15:25] *** hercynium left
[15:26] *** meteorjay left
[15:32] *** DemoPhreak left
[15:38] *** alexn_org left
[15:45] *** ZuLuuuuuu left
[15:47] *** bacek joined
[15:57] *** bacek_ left
[16:01] *** apeiron joined
[16:06] *** pedrob left
[16:08] *** justatheory joined
[16:11] *** pedrob joined
[16:13] *** slavik joined
[16:17] *** iblechbot joined
[16:20] *** adc_Penner joined
[16:21] <slavik> there should be an extension to grammars called syntax

[16:23] *** bacek_ joined
[16:24] <masak> slavik: what would syntax be that grammar would not?

[16:25] *** bacek left
[16:25] <slavik> masak: it would try to match any "simple" token in case it didn't match something it expected

[16:25] <masak> slavik: not sure I understand. do you have an example?

[16:26] *** samlh joined
[16:26] <slavik> masak: basically, it should detect that it was given not something it was expected

[16:27] <slavik> as in an <operator> appeared where <keyword> was expected or something

[16:27] <masak> slavik: sounds wortwhile, yes. couldn't you make a module use grammars in such a way?

[16:28] <slavik> masak: probably

[16:28] <slavik> masak: this is like a basic syntax checker made from grammars, since a valid grammar generates what could be seen as a syntax tree

[16:29] <slavik> so you define a grammar, which will parse 'code' and then you just need to build something which will evaluate the matcher object (since that is the syntax tree)

[16:30] <masak> aye

[16:30] *** pedrob_ joined
[16:30] <slavik> basically, perl6 comes prebuilt with half of a compiler/interpreter :)

[16:30] *** pedrob left
[16:30] <masak> I'm still hoping that something like the {*} syntax will make it easier to tie actions to rules

[16:32] <slavik> hmm?

[16:32] <slavik> as in do stuff if some rule matches?

[16:33] <masak> yes.

[16:34] <masak> this is how PCT does it, for example, so PGE has support for it.

[16:34] <masak> but Rakudo currently doesn't.

[16:34] <slavik> PCT, PGE???

[16:35] <masak> slavik: these are Parrot components.

[16:35] <slavik> ahh

[16:35] <masak> the Parrot Compiler Toolkit makes it easier to build high-level languages quickly

[16:35] *** nacho_ joined
[16:35] <slavik> gotcha

[16:35] <masak> the Parrot Grammar Engine implements Perl 6 rules and grammars

[16:36] <slavik> right

[16:39] <pmichaud> Rakudo supports {*}

[16:40] <masak> pmichaud: is it possible to tie a sub or method to a {*} in Rakudo?

[16:40] <pmichaud> yes.

[16:40] <pmichaud> I'm creating an example now.

[16:40] <masak> oh. I missed when that happened.

[16:40] <masak> that is excellent news.

[16:40] <pmichaud> it's been there from the beginning.  :-)

[16:40] <masak> strange. I've complained about it before, and never got this answer. :)

[16:45] <pmichaud> 16:45 <nopaste> "pmichaud" at 76.183.97.54 pasted "action methods in Rakudo (for masak)" (21 lines) at http://nopaste.snit.ch/14512

[16:46] <masak> cool.

[16:46] <masak> I'll notify the November mailing list immediately.

[16:47] <pmichaud> of course, it's not officially part of the Perl 6 spec, but it works.  :-)

[16:47] <pmichaud> I'm hoping something like it makes it into the spec someday.

[16:47] <masak> as do I.

[16:54] <slavik> NICE!!!

[16:55] <pmichaud> I like this approach because it makes it easy to plug new actions into an existing grammar, or to derive a new Action class that replaces one or more actions and inherits the rest.

[16:56] <masak> ideed. I've been mulling over how to solve that.

[16:57] <[particle]> protoactions )

[16:57] <[particle]> :)

[16:58] <masak> and you get the Match objects as a parameter, that's very good.

[16:59] <pmichaud> and if you name the parameter as $/, then the $<...> and $0 syntaxes work as expected.

[16:59] <slavik> in regex, what is the syntax to match an int in a certain range?

[16:59] <masak> pmichaud: cool.

[16:59] <slavik> as in \d{1,3} where it is in 0-255 ?

[16:59] <masak> slavik: use a closure, perhaps?

[17:00] <slavik> masak: what would it look like?

[17:00] <masak> slavik: \d{1,3} is written \d ** 1..3 nowadays, I think.

[17:00] <pmichaud> from S05:

[17:00] <pmichaud> A leading ?{ or !{ indicates a code assertion:

[17:00] <pmichaud> (\d**1..3) <?{ $0 < 256 }> / / (\d**1..3) <!{ $0 < 256 }> /

[17:00] <pmichaud> oops

[17:00] <pmichaud> silly slashes

[17:00] <pmichaud>     / (\d**1..3) <?{ $0 < 256 }> /

[17:01] <slavik> why the <>?

[17:01] <slavik> closure?

[17:01] <pmichaud> it's a "code assertion"  -- we execute the closure testing it for truth/false

[17:01] <slavik> k

[17:01] <pmichaud> if done as a pure closure, it would need to be

[17:02] <pmichaud>     / (\d**1..3) { $0 < 256 or fail } /

[17:02] <slavik> !{} I assume would do something more error like than ?{} ???

[17:02] <pmichaud>    <!{...}>   fails the match if the code returns true

[17:02] <pmichaud>     <?{...}>   fails the match if the code returns false

[17:02] <slavik> ahh

[17:03] <slavik> got it

[17:03] <pmichaud> or, another way of thinking of it

[17:03] <pmichaud>     <?{...}>    #  assert that ... is true

[17:03] <pmichaud>     <!{...}>   # assert that ... is false, fail otherwise

[17:03] <dbrock> isn't there any way to refer to the last capture?

[17:03] <dbrock> so you don't have to say $0

[17:03] <pmichaud> in general '?' in Perl 6 means "is it true?"  and '!'  means  "is it false?"

[17:04] <slavik> pmichaud: gotcha, ty

[17:05] <pmichaud> (last capture) -- if there is, it's likely to be longer than $0  :-)

[17:05] <pmichaud> I suspect someone could do   $[*-1]

[17:05] <pmichaud> but that's also kinda odd.

[17:06] <masak> $/.end :)

[17:06] <slavik> hmm, if I have something like: rule blah { \d+\s? }, how can I match against <blah> without the \s being extracted?

[17:06] <masak> slavik: put it in a subrule and call it with a colon, I think

[17:07] <masak> or was it a dot?

[17:07] <masak> yes, a dot, I think

[17:07] <slavik> umm, how would it look like?

[17:07] * slavik is still learning perl6 syntax :P

[17:07] <masak> slavik: have you read S05? :)

[17:08] <masak> http://perlcabal.org/syn/S05.html

[17:08] <lambdabot> Title: S05

[17:08] <slavik> yes, but I probably missed it

[17:08] <slavik> I'll read it again

[17:08] <pmichaud> I don't quite understand "without the \s being extracted"

[17:08] <masak> I think slavik meant 'without it ending up in $/'

[17:09] <slavik> if you do "12312312 1231232" ~~ <blah> it will return "12312312 ", I want "12312312"

[17:09] <slavik> yes

[17:10] <pmichaud> first, you probably don't want a rule there.

[17:10] <slavik> token?

[17:10] <[particle]> tokens rule!

[17:10] <[particle]> ;)

[17:10] <masak> slavik: ah, here: http://perlcabal.org/syn/S05.html#line_1226

[17:10] <lambdabot> Title: S05

[17:10] <slavik> heh

[17:10] <dbrock> quick and stupid question: how do I run a Perl 6 program?  I have installed Parrot; what else do I need?

[17:11] <pmichaud> slavik: I suspect you want <( and >)

[17:11] <masak> dbrock: cd languages/perl6; make perl6

[17:11] <pmichaud> token blah { <( \d+ )> \s? }

[17:11] <dbrock> I installed it via Ubuntu

[17:11] <masak> dbrock: ./perl6 -e 'say "OH HAI"'

[17:11] <slavik> dbrock: perl6 is in Ubuntu?!

[17:11] <pmichaud> I think the Ubuntu package is very old.

[17:11] <dbrock> well, parrot is anyway

[17:11] <pmichaud> what version of Parrot?

[17:11] <dbrock> oh, okay

[17:11] <masak> dbrock: oh. I don't know how Ubuntu does it.

[17:11] <slavik> oh yeah, it is

[17:12] <dbrock> 0.4.13

[17:12] <pmichaud> ancient.

[17:12] <masak> dbrock: better download from svn and get the latest, coolest, stuff

[17:12] <dbrock> ah

[17:12] <slavik> masak: ty :)

[17:12] <dbrock> will do

[17:12] <masak> slavik: np.

[17:12] <pmichaud> token blah { <( \d+ )> \s? }

[17:12] <slavik> pmichaud: has the semi-colon required after {} BLOCK been fixed? :P

[17:12] <slavik> pmichaud: I see, ty

[17:13] <pmichaud> "12312312 12312312" ~~ / <blah> /;      #   $<blah> matches the space but doesn't include it.

[17:13] <pmichaud> slavik: which semi-colon required after {} BLOCK?   ;)

[17:13] <pmichaud> slavik: example?

[17:13] <masak> pmichaud: in grammars.

[17:13] <masak> there's a ticket about it, hold on.

[17:13] <pmichaud> oh, in grammars.  I think that's a bug in the grammar grammar.

[17:13] <slavik> ROFL

[17:13] <pmichaud> I just noticed that as well.

[17:13] <masak> *lol*

[17:14] <masak> at least it's not a bug bug in the grammar grammar.

[17:14] <slavik> WTF?!

[17:14] <slavik> heh

[17:14] <masak> WWTTFF??!!

[17:14] <slavik> btw, what is the name of the notation used to show syntax for a language?

[17:14] <dbrock> BNF?

[17:15] <slavik> yes

[17:15] <slavik> basically, grammar == BNF (IMO)

[17:15] <masak> http://rt.perl.org/rt3/Ticket/Display.html?id=57874

[17:15] <lambdabot> Title: #57874: Tokens inconsistently require semicolons after them

[17:16] <masak> slavik: that's reducing away a lot of cool stuff.

[17:16] <slavik> huh?

[17:16] <masak> slavik: grammars are quite powerful in Perl 6.

[17:16] <slavik> masak: right

[17:16] <slavik> masak: they are BNF that build a parse tree :)

[17:16] <masak> slavik: so, at least in Perl6, grammar > BND

[17:17] <masak> s/BND/BNF/

[17:17] <pmichaud> and that's a BFD.  :-P

[17:17] <slavik> masak: like I said before, grammars are a half of a compiler :)

[17:17] <masak> slavik: it's a bit like saying that a car is basically a bicykle.

[17:17] <slavik> well, they both have wheels :P

[17:17] <slavik> tires rather

[17:17] <masak> slavik: exactly, so you're not 100% wrong.

[17:17] <masak> just 90% or so.

[17:18] <slavik> masak: I know, just trying to use existing understanding to base new understanding on it :)

[17:18] <[particle]> my bike has cupholders

[17:18] <masak> slavik: yes, that's perfectly ok.

[17:19] <masak> slavik: just saying that a grammar is not _only_ a BNF

[17:19] <masak> slavik: and that clinging to that view might limit your horizons

[17:19] <slavik> right

[17:20] <slavik> [particle]: any reason you are not "particle" ???

[17:20] * slavik knows "particle"

[17:20] *** justatheory left
[17:20] <slavik> heh

[17:20] <slavik> I know 2 particles ... :-\

[17:23] <pmichaud> okay, I think I have 57874 fixed -- running make spectest now.

[17:23] <masak> pmichaud++

[17:24] <masak> pmichaud: speaking of tickets, how's the lex branch going?

[17:24] <pmichaud> a little slower this week -- I have to figure out how to handle autoclose semantics

[17:24] <masak> ok.

[17:25] <pmichaud> now that container semantics are fixed the lexicals are (by far) the highest priority on my plat

[17:25] <pmichaud> *plate

[17:25] <masak> yay!

[17:28] <pmichaud> 17:28 <nopaste> "pmichaud" at 76.183.97.54 pasted "token no longer requires semicolon (RT #57874, for masak)" (7 lines) at http://nopaste.snit.ch/14513

[17:28] <masak> nice.

[17:38] *** alexn_org joined
[17:40] <rakudo_svn> r32450 | pmichaud++ | [rakudo]:  Closing } in regex/token/rule can terminate statements (RT #57874)

[17:40] *** pedrob_ left
[17:53] *** spx2_ left
[17:53] *** spx2 joined
[18:02] <dbrock> how would you write a grammar to match any comma-separated list of words, where the last word may optionally have a star in front of it?

[18:04] <dbrock> I currently have this:  rule args { <restarg> | [<arg> [',' [<args> | <restarg>]]?]? }

[18:04] <dbrock> where <arg> is a word and <restarg> is a star-word

[18:06] <dbrock> (it works; I'm just wondering if there is a better way)

[18:11] *** pmurias_ joined
[18:11] *** pmurias_ left
[18:11] <[particle]> maybe something like { <restarg> || <arg> ** ',' [ ',' <restarg> ] }

[18:12] <[particle]> i think you'll need that second comma there because ** ',' won't match a trailing one

[18:13] <slavik> pmichaud: so, now rakudo's grammars are not broken?

[18:15] *** ejs left
[18:15] *** aindilis left
[18:16] *** aindilis joined
[18:17] <dbrock> I don't think ** ',' works in rakudo :-(

[18:19] *** ejs joined
[18:21] <slavik> pmichaud: I am building it now :)

[18:22] <slavik> pmichaud: can has fixed bignum naoh plz?

[18:24] <slavik> perl6 has OpenGL bindings???

[18:25] <slavik> I saw -lGL and -LGLU while making rakudo ...

[18:32] *** ab5tract joined
[18:32] <masak> dbrock: you're correct. that spec feature is newer than PGE.

[18:41] *** eternaleye joined
[19:02] *** simcop2387 left
[19:02] *** simcop2387-vnc joined
[19:03] *** stephang joined
[19:03] *** simcop2387-vnc is now known as simcop2387

[19:04] *** Bzek left
[19:11] *** lisppaste3 joined
[19:11] *** FurnaceBoy joined
[19:14] *** lisppaste3 left
[19:18] *** ejs left
[19:18] <masak> so the type int1 has the two possible values 0 and -1 ? :)

[19:19] <masak> TimToady: S09: "The unsized types C<int> and C<num> are based on the architecture's normal size for C<int> and C<double> in whatever version of C the run-time system (presumably Parrot) is compiled in." The last "in" is redundant.

[19:19] *** lisppaste3 joined
[19:20] *** ejs joined
[19:29] <masak> rakudo: say Complex ~~ Num

[19:29] <p6eval> rakudo 32450: OUTPUT[0␤]

[19:29] <masak> if a Complex isn't a Num, how come sign(1+1i) works in Rakudo?

[19:30] <masak> rakudo: say sign(1+1i)

[19:30] <p6eval> rakudo 32450: OUTPUT[1␤]

[19:30] <masak> S29 doesn't say anything about non-Num arguments to &sign

[19:35] <masak> (oh. S09 even mentions the two possible values of int1. TimToady++)

[19:41] <masak> rakudo: sub foo (@a) { 1.say for @a }; foo(1,2,3)

[19:41] <p6eval> rakudo 32450: OUTPUT[too many arguments passed (3) - 1 params expected␤current instr.: 'foo' pc 74 (EVAL_13:37)␤]

[19:41] <masak> do I need to make @a slurpy?

[19:41] <masak> rakudo: sub foo (*@a) { 1.say for @a }; foo(1,2,3)

[19:41] <p6eval> rakudo 32450: OUTPUT[1␤]

[19:41] <masak> that must be ihrd's bug.

[19:42] <slavik> is rakudo going to be "THE Perl6"?

[19:42] <masak> slavik: what do you mean?

[19:42] <slavik> seems like nobody does pugs work anymore :(

[19:43] <masak> slavik: audreyt++ has said she will resume work on Pugs once GHC gets a few planned features

[19:43] <slavik> I see

[19:43] <masak> slavik: and there are also a lot of other implementations showing promise

[19:44] * slavik is not aware of other

[19:44] <slavik> others

[19:44] <slavik> I know there is kp6, but that is supposed to be just enough to write perl6 in perl6

[19:44] <masak> something called mildew, worked on by pmurias++ and ruoso++

[19:44] <masak> and something called elf

[19:45] <masak> slavik: yes, kp6 is not Perl 6

[19:45] <masak> slavik: it's considered more or less stable, as I understand it

[19:45] <masak> slavik: it's being used in the actions parts of PCT

[19:46] <slavik> hmm, haven't seen though

[19:46] <slavik> those*

[19:46] <slavik> bah

[19:47] <masak> slavik: you will if you keep hanging around here at #perl6

[19:47] <slavik> masak: I try L(

[19:47] <slavik> :)

[19:48] <slavik> btw, masak++

[19:48] <slavik> :)

[19:48] <masak> perl6: <OH HAI>.say

[19:48] <p6eval> elf 22847, pugs, rakudo 32453: OUTPUT[OHHAI␤]

[19:48] <slavik> grr, shouldn't that give you karma?

[19:48] <masak> @karma masak

[19:48] <lambdabot> You have a karma of 36

[19:48] <masak> slavik: it did, silently.

[19:48] <slavik> ahh, ok

[19:48] <slavik> :)

[19:49] <slavik> pmichaud++

[19:49] <masak> indeed.

[19:57] *** jfredett joined
[20:09] <samlh> actually, kp6 [kinda perl6] was an attempt to bootstrap, that ended up too slow to be useful

[20:09] <samlh> while nqp [not quite perl] is the language used for PCT actions

[20:10] <masak> samlh: ah, yes. that's right; I misremembered.

[20:15] *** ejs left
[20:17] <pugs_svn> r22931 | masak++ | [S04-statements/for-scope.t] added tests against [perl #60404]

[20:19] *** ab5tract left
[20:22] *** ab5tract joined
[20:30] *** smg left
[20:31] <ruoso> slavik, we're already starting to write the Perl 6 built-in types in Perl 6... you might want to take a look at svn.pugscode.org/pugs/v6/smop/src-s1p/

[20:31] <lambdabot> ruoso: You have 2 new messages. '/msg lambdabot @messages' to read them.

[20:33] <ruoso> pmurias, about stackfull DISPATH, I've thought about using some longjmp hacks to make it work

[20:33] *** abra joined
[20:33] <ruoso> pmurias, about my $id = $otherreg; I think it's easier to solve it in a second pass, like an optimizer that removes all the redundant registers

[20:38] <ruoso> pmurias, in fact... I was already wondering how hard would it be to do rewrite the m0ld compiler in p5 using "use SMOP"

[20:44] <japhb> slavik: Parrot has OpenGL bindings (I created them, or at least, the first few versions of them).  I have not had a chance to try them from Rakudo itself yet.  You can be the first!

[20:44] <japhb> :-)

[20:48] <pmurias> ruoso: hi

[20:49] <pmurias> ruoso: why are you opposed to the previous way of emitting stuff

[20:50] <pmurias> ruoso: re rewrite of the mold compiler the problem ./m0ld --exec works now for some stuff

[20:51] *** abra left
[20:59] *** fridim_ joined
[21:09] <ruoso> pmurias, hi

[21:10] <ruoso> pmurias, the previous way you mean using globals?

[21:13] *** dmq left
[21:14] <ruoso> pmurias, I think we can solve the problem by leaving the assignment of an id to the node being emitted

[21:14] <ruoso> then it returns a code to initialize the register and the register that contains the info

[21:15] <ruoso> instead of the current schema of sending the desired register...

[21:15] <ruoso> then the node can decide if it's worth creating a new register or not...

[21:17] <ruoso> then AST::*->m0ld would receive only $self and return ($code, $reg)

[21:18] <pugs_svn> r22932 | ruoso++ | [mildew] the support for SMOP__S1P__Array

[21:22] *** Jedai joined
[21:23] <ruoso> pmurias, nevermind my changes... it's working now... I'll keep it as it is....

[21:24] <pmurias> ruoso: any idea what causes the test failures in mildew tests now?

[21:25] <ruoso> I think it's the indentation

[21:26] <pmurias> indentation?

[21:26] <ruoso> hmm... no... it's not

[21:27] <ruoso> it's if.t that is failing in the compilation

[21:27] <ruoso> the others are failing somewhere else

[21:28] <ruoso> I think it's the Code lookup

[21:28] <pmurias> what's the point of interpreter.goto(false)

[21:28] <ruoso> pmurias, it forces a release of the current continuation

[21:29] <ruoso> which will lead to destroying a lot of objects immediatly

[21:31] <pmurias> if the interpreter is destroyed shortly afterwords it's pointless?

[21:32] <ruoso> mostly yes... I usually used it in the tests to be able to test DESTROYALL calls order

[21:33] <ruoso> pmurias, but.... beware that without an interpreter some DESTROYALL codes might fail

[21:33] <ruoso> so before destroying the interpreter it's sane to make sure it doesn't contain a continuation

[21:34] <pmurias> ok

[21:34] <pmurias> ruoso: adding stuff to mildew before it passes it's tests is not very sane

[21:35] <pmurias> as it tends to break it more

[21:35] <ruoso> you mean the AST::If?

[21:36] <pmurias> just in general ;)

[21:37] <pmurias> and why do we need AST::If instead of using AST::Call?

[21:37] <ruoso> because it generates a different m0ld code?

[21:38] <ruoso> and how do I pass a test without adding it to mildew/

[21:38] <ruoso> ?

[21:39] *** DemoFreak joined
[21:39] <pmurias> ruoso: what i meant is that mildew is currently broken

[21:39] *** fridim_ left
[21:40] <pmurias> ruoso: sorry, i meant AST::List

[21:40] <pmurias> AST::If is ok

[21:40] <ruoso> pmurias, AST::List was in the way of adding proper slice context to captures

[21:41] <pmurias> you can do what it does with an AST::Call

[21:42] <ruoso> yeah... ok

[21:43] <pmurias> you can add it to AST::Helpers if using AST::Call is inconvenient

[21:45] *** jferrero joined
[21:48] <pmurias> ruoso: found the bug which break mildew tests

[21:48] <pmurias> S1P::IO.print was assuming FETCH does a C return

[21:48] <ruoso> hmm

[21:48] <ruoso> ok

[21:50] <pmurias> ruoso: any ideas how i should cleanly fix it

[21:50] <pmurias> ?

[21:51] <ruoso> pmurias, make it a m0ld

[21:51] <ruoso> and then call it with the value already fetched

[21:51] <ruoso> call an internal mehtod

[21:52] <pmurias> and add infix:<+> in order to loop through positionals

[21:52] <pmurias> ?

[21:53] <ruoso> infix:<+> ?

[21:53] <ruoso> ah... int + int

[21:53] <pmurias> in order to increment the positional index

[21:53] <pmurias> yes

[21:54] <ruoso> infix:<+> would probably be a multi, right?

[21:54] <pmurias> yes :(

[21:54] <pmurias> i'll just have the S1P::IO require a native type for now, and make a perl6 wrapper call FETCH

[21:54] <ruoso> maybe we could get an iterator for the capture

[21:54] <ruoso> and call map with it

[22:00] *** smg joined
[22:06] <pugs_svn> r22933 | pmurias++ | [mildew] S1P::IO.print no longer FETCHes it's arguments t/binding.t passes

[22:07] <pmurias> ruoso: mildew seems to semi-work now, so if you want to add features feel free

[22:07] <ruoso> ok

[22:10] <pmurias> mildew: $OUT.print("Mildew is back-ish\n");

[22:10] <p6eval> mildew: No output (you need to produce output to STDOUT)

[22:11] <masak> ish.

[22:17] *** PZt left
[22:18] *** Limbic_Region joined
[22:22] <pmurias> ruoso: do we need mildew to 'use SMOP' now?

[22:22] <ruoso> pmurias, not really needing... but I guess I could be more helpful if it did

[22:23] <pmurias> is there anything in the haskell part that needs changing?

[22:35] *** bacek_ left
[22:39] *** justatheory joined
[22:40] *** bacek_ joined
[22:50] <rakudo_svn> r32456 | pmichaud++ | [rakudo]:  spectest-progress.csv update: 210 files, 4439 passing, 4 failing

[22:59] *** justatheory left
[23:03] *** silug joined
[23:05] *** bacek__ joined
[23:07] *** bacek_ left
[23:07] *** Psyche^ joined
[23:11] *** aindilis left
[23:11] *** aindilis joined
[23:14] *** adc_Penner left
[23:15] *** DemoPhreak joined
[23:18] *** Psyche^ is now known as Patterner1

[23:19] *** Patterner left
[23:19] *** Patterner1 is now known as Patterner

[23:22] *** pmurias left
[23:28] *** DemoFreak left
[23:32] *** masak left
[23:34] *** bacek__ left
[23:36] <slavik> japhb: awesome :D, there are two things missing IMO, SDL and gtk/glade :D then I'm all set

[23:38] *** samlh left
[23:44] *** bacek__ joined
[23:50] *** apeiron is now known as zpeiron

[23:55] <ewilhelm> where are these syntax highlighted spectests that particle mentions?

[23:55] <ewilhelm> "they're linked from spec.pugscode.org"  -- http://use.perl.org/~chromatic/journal/37825

[23:55] <lambdabot> Title: Journal of chromatic (983)

[23:56] <ewilhelm> but spec.pugscode.org redirects me to http://perlcabal.org/syn/

[23:56] <lambdabot> Title: Official Perl 6 Documentation

[23:57] <ewilhelm> hmm, which is also the "spec coverage" link from pugscode.org sidebar :-/

