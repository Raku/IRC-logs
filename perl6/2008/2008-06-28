[00:18] *** dolmen left
[00:19] *** jfredett_ joined
[00:30] *** jfredett left
[00:34] *** ruoso joined
[00:36] *** r0bby joined
[00:38] *** jfredett_ is now known as jfredett

[00:39] *** [particle]1 joined
[00:40] *** hercynium joined
[00:44] <pugs_svnbot> r21090 | lwall++ | [STD5] now supports :i including in LTMish spots

[00:44] <pugs_svnbot> r21090 | lwall++ | [STD] now (more) correctly parses character classes

[00:50] <pugs_svnbot> r21091 | lwall++ | [Cursor5] be slightly more unicodey on :i

[01:01] <TimToady> decommuting &

[01:01] <pugs_svnbot> r21092 | lwall++ | [Cursor5] more unicodification

[01:10] *** zostay left
[01:10] *** zostay joined
[01:15] *** cmarcelo joined
[01:24] *** alanhaggai joined
[01:44] *** Coleoid_ joined
[01:44] *** Coleoid_ is now known as Coleoid

[01:49] *** nipotan is now known as nipotaway

[01:57] *** jfredett is now known as rhobot

[01:58] *** rhobot is now known as jfredett

[01:58] *** jfredett is now known as pibot

[02:00] *** pibot is now known as jfredett

[02:08] *** Coleoid left
[02:12] *** rong joined
[02:12] *** rong left
[02:14] *** Coleoid joined
[02:16] *** justatheory left
[02:21] *** Coleoid left
[02:30] *** meppl left
[02:44] *** Coleoid joined
[02:53] *** meppl joined
[03:06] *** elmex_ joined
[03:06] *** mjk left
[03:21] *** elmex left
[03:21] *** elmex_ is now known as elmex

[03:34] *** a-jing joined
[03:34] *** a-jing left
[03:38] *** hercynium left
[03:44] *** pbuetow_ joined
[03:52] *** pbuetow left
[04:11] *** jfredett is now known as pibot

[04:13] *** pibot is now known as jfredett

[04:13] *** apeiron_ joined
[04:14] *** apeiron left
[04:19] *** redicaps left
[04:20] *** Entonian joined
[04:25] *** cmarcelo left
[04:59] <pugs_svnbot> r21093 | lwall++ | [STD] now gets 15% of the way through parsing itself

[05:05] *** Psyche^ joined
[05:11] *** apeiron_ is now known as apeiron

[05:21] *** Patterner left
[05:21] *** Psyche^ is now known as Patterner

[05:22] *** justatheory joined
[05:30] *** apeiron_ joined
[05:38] *** apeiron left
[05:46] *** s11 joined
[05:46] <s11> Auzon: is there vim syntax highlighter somewhere for the test files?

[05:48] <s11> also, what's the difference between the .rakudo and the .t test files?

[05:49] *** xinming left
[05:49] *** meppl left
[05:50] *** gugod left
[05:52] *** gugod joined
[05:56] *** xinming joined
[05:58] *** xinming left
[05:59] *** xinming joined
[06:01] *** xinming left
[06:02] *** xinming joined
[06:02] *** Psyche^ joined
[06:14] *** cls_bsd joined
[06:16] *** cls_bsd left
[06:16] *** cls_bsd joined
[06:18] *** Patterner left
[06:18] *** Psyche^ is now known as Patterner

[06:19] *** apeiron joined
[06:21] *** apeiron__ joined
[06:21] *** apeiron__ left
[06:24] *** cls_bsd left
[06:34] *** Pzt left
[06:35] *** apeiron_ left
[06:38] *** apeiron left
[06:56] <TimToady> s11: the .t files are the standard test files.  the .rakudo is a preprocessed version of the .t that takes into account the "fudging" needed to run under rakudo

[06:56] <pugs_svnbot> r21094 | lwall++ | [STD] 23%

[06:56] <TimToady> the perl6.vim file can be found in util/

[07:01] *** iblechbot left
[07:01] <TimToady> diff the .t and the .rakudo and you'll see what fudge does

[07:02] <TimToady> zzz & # thunk

[07:07] *** drbean left
[07:13] *** drbean joined
[07:16] *** alester left
[07:17] *** justatheory left
[07:22] *** audreyt joined
[07:41] *** iblechbot joined
[08:00] *** bacek left
[08:08] *** tuxdna joined
[08:18] *** barney joined
[08:28] *** xinming` joined
[08:30] *** xinming left
[08:31] *** xinming`` joined
[08:47] *** xinming` left
[08:49] *** Entonian left
[08:55] *** xinming`` left
[09:34] *** masak joined
[09:43] *** schmalbe joined
[09:43] *** schmalbe left
[09:54] *** iblechbot left
[09:58] *** barney left
[10:05] *** bacek joined
[10:05] *** riffraff joined
[10:16] *** chris2 joined
[10:17] *** bacek left
[10:31] *** xinming joined
[10:32] *** bacek joined
[10:54] *** cognominal_ left
[10:57] *** bacek left
[10:59] *** cognominal_ joined
[11:23] *** Auzon1 joined
[11:23] *** Auzon left
[11:26] *** masak left
[11:33] *** riffraff left
[11:35] *** bacek joined
[11:44] *** chris2 left
[11:44] *** chris2 joined
[12:12] *** polettix joined
[12:15] *** xinming_ joined
[12:21] *** xinming left
[12:34] *** kanru left
[12:43] *** kanru joined
[12:55] *** s11 left
[12:58] *** s1n joined
[13:28] *** jfredett_ joined
[13:29] *** tuxdna left
[13:41] *** jfredett left
[13:52] *** iblechbot joined
[13:56] *** wknight8111 joined
[13:57] *** xinming joined
[14:03] *** xinming left
[14:03] <pugs_svnbot> r21095 | moritz++ | [spec] misc: unfudged a test, modified other, marked one as unspecced

[14:11] *** iblechbot left
[14:11] *** apeiron joined
[14:14] *** xinming_ left
[14:15] *** dolmen joined
[14:16] *** wknight8111 left
[14:16] <dolmen> perl6: my @a = 0..9; say @a.delete(5..9).perl; say @a.perl; 

[14:16] <p6eval> elf 21095: OUTPUT[Can't call method "delete" without a package or object reference at (eval 123) line 4.␤ at ./elf_f line 3861␤]

[14:16] <p6eval> ..kp6 21095: OUTPUT[syntax error at position 10, line 1 column 10:␤my @a = 0..9; say @a.delete(5..9).perl; say @a.perl␤          ^ HERE␤]

[14:16] <p6eval> ..pugs: OUTPUT[(5, 6, 7, 8, 9)␤\(0, 1, 2, 3, 4, undef, undef, undef, undef)␤]

[14:16] <p6eval> ..rakudo 28780: OUTPUT[get_integer() not implemented in class 'Range'␤current instr.: 'parrot;Perl6Array;delete' pc 4215 (src/gen_builtins.pir:2796)␤]

[14:19] <dolmen> I would like to fix this in rakudo, but I don't know how to handle it

[14:20] <moritz_> dolmen: try to grep for get_integer in the rakudo part of the repo, and look how it's done for other stuff

[14:21] <dolmen> Do we have to explicitelty handle Range objects (or more generally objects which "can" 'iterator()') or it is a list expansion issue?

[14:22] <moritz_> don't know, but you'd better ask on #parrot where rakudo implementation questions are normally handled

[14:22] <dolmen> I tried to implement get_integer in Range, but it will be called only once, so it will only return the first element of the range

[14:25] <moritz_> I'd guess get_integer returns the number of items, not the first item (which doesn't have to be an integer)

[14:27] <dolmen> this answers my question: I think that we should handle Range objects explicitely in delete

[14:28] <dolmen> if not only the first element of the range will be deleted and this is not what the user expects

[14:38] *** pmurias joined
[14:38] <pmurias> TimToady: is it ok if i overload operators on Cursor5 objects? (stringification specificly)

[14:39] <TimToady> yes

[14:39] <TimToady> I keep forgetting to say .text as it is...

[14:41] <TimToady> just try to keep your changes localized, because I'll be working offline for half a day or so and will want to merge

[14:41] *** pmurias left
[14:42] *** pmurias joined
[14:42] *** pmurias left
[14:43] <TimToady> afk &

[14:44] *** bacek left
[14:45] <pugs_svnbot> r21096 | dolmen++ | Check Array.delete with a Range argument.

[14:50] *** bacek joined
[15:09] *** bacek left
[15:26] *** cj joined
[15:29] *** iblechbot joined
[15:29] *** alester joined
[15:34] *** alanhaggai left
[15:35] *** alester left
[15:36] *** losinggeneration joined
[15:37] *** losinggeneration left
[15:39] *** alester joined
[15:39] *** alester left
[15:52] <rakudo_svn> r28785 | pmichaud++ | [rakudo]:

[15:52] <rakudo_svn> r28785 | pmichaud++ | * spectest-progress update for 6-28:  75 files, 1072 passing, 17 failing

[16:06] *** alanhaggai joined
[16:15] *** jferrero joined
[16:16] <jferrero> perlbot, say "Hola"

[16:17] <pmichaud> perl6: say "Hola"

[16:17] <p6eval> elf 21096: OUTPUT[Hola␤]

[16:17] <p6eval> ..kp6 21096: OUTPUT[Hola␤]

[16:17] <p6eval> ..pugs: OUTPUT[Hola␤]

[16:17] <p6eval> ..rakudo 28785: OUTPUT[Hola␤]

[16:18] <jferrero> perl6: print "Thanks, pmichaud"

[16:18] <p6eval> elf 21096: OUTPUT[Thanks, pmichaud]

[16:18] <p6eval> ..kp6 21096: OUTPUT[Thanks, pmichaud]

[16:18] <p6eval> ..pugs: OUTPUT[Thanks, pmichaud]

[16:18] <p6eval> ..rakudo 28785: OUTPUT[Thanks, pmichaud]

[16:20] <rakudo_svn> r28786 | pmichaud++ | [rakudo]:

[16:20] <rakudo_svn> r28786 | pmichaud++ | * Add temporary implementation of Order::Same, Order::Increase,

[16:20] <rakudo_svn> r28786 | pmichaud++ |   Order::Decrease

[16:20] <rakudo_svn> r28786 | pmichaud++ | * t/spec/S03-operators/comparison.t passes again

[16:33] <Juerd> Who maintains p6eval?

[16:38] *** nowhea left
[16:40] *** dolmen left
[16:42] *** alanhaggai_ joined
[16:43] * moritz_ 

[16:46] <pugs_svnbot> r21097 | moritz++ | [SLAVES] exp_evalbot is now called p6eval

[16:49] *** polettix left
[16:56] *** alanhaggai left
[16:59] <rhr> does the Order enum conflict with the Order role? how do you declare an enum and a role (other than the role made by the enum) of the same name?

[16:59] <rhr> our enum Order ...; role Order is also {...} ?

[17:04] <moritz_> I think that an enum is a way to define a role (not sure, though)

[17:05] <moritz_> S12:1650

[17:05] <moritz_> or S12/"Enums" if you like that better ;)

[17:05] <rhr> right, but Order needs more than just an enum

[17:05] <moritz_> "An enum is a low-level class that can function as a role or property."

[17:18] <pmichaud> I'm thinking that eventually we'll be able to say something like (in Prelude):   enum Order << :Increase(-1), Same, Decrease >>;

[17:19] <pugs_svnbot> r21098 | moritz++ | [spec] delete.t: fix plan, improve fudging for rakudo

[17:21] <rakudo_svn> r28787 | moritz++ | [rakudo] delete.t in spectest_regression.data is no longer "pure", 

[17:21] <rakudo_svn> r28787 | moritz++ | dolmen++ added new tests.

[17:22] <pugs_svnbot> r21099 | moritz++ | [spec] delete.t: exclusive ranges are 2^..4, not ^2..4

[17:34] <pmichaud> rakudo:  say 1^..10;

[17:34] <p6eval> rakudo 28787: OUTPUT[101010101010101010␤]

[17:34] <pmichaud> oops.

[17:36] <moritz_> rakudo:  1^..10

[17:36] <p6eval> rakudo 28787: RESULT[1^..10]

[17:36] <moritz_> rakudo:  (1^..10).perl.say

[17:36] <p6eval> rakudo 28787: OUTPUT[1^..10␤]

[17:47] *** japhb left
[17:49] *** japhb joined
[17:52] *** s1n left
[18:00] <rakudo_svn> r28788 | pmichaud++ | [rakudo]:

[18:00] <rakudo_svn> r28788 | pmichaud++ | * Fix exclusive from ranges (1^..5)

[18:11] <rakudo_svn> r28789 | pmichaud++ | [rakudo]:

[18:11] <rakudo_svn> r28789 | pmichaud++ | * Make sure Array.delete flattens its arguments in list context.

[18:11] *** alanhaggai__ joined
[18:14] <pugs_svnbot> r21100 | pmichaud++ | S29-array/delete.t:

[18:14] <pugs_svnbot> r21100 | pmichaud++ | * Uncomment #?rakudo skip on ranges

[18:14] <pugs_svnbot> r21100 | pmichaud++ | * Fix one incorrect test result.

[18:18] *** alanhaggai__ left
[18:24] <rakudo_svn> r28791 | pmichaud++ | [rakudo]:

[18:24] <rakudo_svn> r28791 | pmichaud++ | * Adjust <=>, cmp, leg to return Order::* values.

[18:26] *** pmurias joined
[18:26] *** alanhaggai_ left
[19:02] <pugs_svnbot> r21101 | pmurias++ | [pixie] 01-sanity/01-tap.t passes

[19:14] *** justatheory joined
[19:19] *** justatheory left
[19:25] <pmurias> is Common Lisp fast enough to get resonable performance using smop style responder interfaces?

[19:27] <vixey> yes

[19:27] <vixey> pmurias  If you mean CLOS ?

[19:28] *** jferrero left
[19:28] <SamB> if CLOS can do it, I imagine you can too (in theory)

[19:29] <SamB> CLOS is, as I understand it, implemented (almost?) 100% in standard CL

[19:29] <pmurias> vixey: i meant $obj->{_dispatcher}(...)

[19:30] <pmurias> if CLOS is not specialy hard coded in the compiler, i guess the performance wouldn't suffer much

[19:32] *** wknight8111 joined
[19:32] <SamB> hmm, apparantly there is an unofficial MOP...

[19:33] <pmurias> SamB: in Common Lisp?

[19:33] <SamB> http://www.lisp.org/mop/index.html

[19:33] <lambdabot> Title: MetaObject Protocol

[19:37] <pmurias> by smop style responder interfaces i meant adding a layer of indirection where the object itself desides how a method call should be done

[19:37] <pmurias> s/call/dispatch/

[19:38] <SamB> well, it shouldn't be any more unreasonable than in any other environment

[19:39] <pmurias> it's was extremely unreasonable in kp6 perl5 backend

[19:41] <pmurias> because the difference between $obj->{_DISPATCH}($obj,"method",...args...) and $obj->method(...args...) is significant in perl5

[19:41] <SamB> well, this is CL we are talking about

[19:43] <pmurias> how fast is CL compared to C?

[19:44] <vixey> very fast

[19:45] *** wknight8111 left
[19:46] <pmurias> vixey: compared to C?

[19:46] <pmurias> ;)

[19:46] <vixey> pmurias: Yes

[19:48] <pmurias> ;)

[19:50] *** pmurias left
[20:04] *** alester joined
[20:23] *** simcop2387 left
[20:31] *** simcop2387 joined
[20:32] *** alester left
[20:50] *** peepsalot joined
[20:50] <pugs_svnbot> r21102 | Auzon++ | [gsoc_spectest] minimal whitespace test. (added 8 tests)

[20:51] *** Auzon1 is now known as Auzon

[20:57] *** xinming joined
[20:57] *** xinming left
[20:58] *** xinming joined
[21:14] *** cathya joined
[21:15] *** iblechbot left
[21:21] *** ggoebel left
[21:44] <cathya> anyone awake

[21:44] <cathya> i've got a doubt about somthing not related to perl6

[21:44] *** ggoebel joined
[21:45] <vixey> *not* related to perl6

[21:48] <cathya> yep not

[21:53] <TimToady> I doubt there's anything not related to Perl 6.

[21:53] <pugs_svnbot> r21103 | lwall++ | [STD] 47%

[21:54] <vixey> hehe TimToady

[22:14] *** eternaleye joined
[22:24] *** chris2 left
[22:25] <rakudo_svn> r28796 | chromatic++ | [Rakudo] Fixed SVN metadata.

[22:30] *** aindilis left
[22:34] *** bacek joined
[22:37] *** cjfields joined
[22:44] *** aindilis joined
[22:52] *** peepsalot left
[22:57] *** pbuetow_ left
[22:57] *** pbuetow joined
[23:09] *** cjfields left
[23:26] *** SamB left
[23:27] *** SamB joined
[23:38] *** mjk joined
[23:49] *** pbuetow left
[23:49] *** pbuetow joined
[23:49] *** pbuetow left
[23:50] *** pbuetow joined
