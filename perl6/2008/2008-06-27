[00:01] *** Chillance left
[00:03] *** bacek__ joined
[00:12] *** bacek_ left
[00:15] *** dduncan joined
[00:18] *** bacek_ joined
[00:19] <dduncan> opinion question: what's a good name for a fundamental quasi-function that is used for arbitrary expression validation, where it returns its primary argument if its secondary argument is true, and it throws an exception if its secondary argument is false?  This would be used in a pure functional context, throwing an exception aside

[00:21] <dduncan> eg, say it was called 'gate', it could be invoked using gate( $x, $x != 0 )

[00:21] <dduncan> but I was looking for a name that wasn't a verb but a noun

[00:22] <dduncan> alternates could be 'expected' or such

[00:22] <dduncan>  or nevermind, I"ll just pick something and maybe change it later

[00:27] *** bacek__ left
[00:30] *** silug joined
[00:36] *** justatheory left
[00:37] *** bacek__ joined
[00:43] <pugs_svnbot> r21072 | lwall++ | [STD] some progress in finding outer $LANG correctly

[00:43] <pugs_svnbot> r21072 | lwall++ | use feature 'say'

[00:46] *** bacek_ left
[00:46] *** apeiron joined
[00:54] *** bacek_ joined
[01:03] *** bacek__ left
[01:04] *** a-jing joined
[01:04] *** a-jing left
[01:12] *** justatheory joined
[01:19] *** nekobaka joined
[01:20] *** bacek__ joined
[01:21] *** alester joined
[01:22] *** bacek___ joined
[01:24] *** bacek__ left
[01:33] *** Limbic_Region left
[01:38] *** bacek_ left
[01:49] *** nipotan is now known as nipotaway

[02:00] *** pbuetow left
[02:01] *** bacek_ joined
[02:10] *** bacek___ left
[02:14] *** kanru left
[02:23] *** elmex left
[02:55] *** FurnaceBoy left
[03:00] *** dduncan left
[03:06] <rakudo_svn> r28737 | pmichaud++ | [rakudo]:

[03:06] <rakudo_svn> r28737 | pmichaud++ | * Add sigil listop contextualizers.

[03:09] *** Pzt joined
[03:10] *** Alias_ joined
[03:11] <pugs_svnbot> r21073 | pmichaud++ | Remove some #?rakudo skip markers for sigil contextualizers.

[03:14] <pugs_svnbot> r21074 | pmichaud++ | Update #?rakudo skip messages.

[03:17] *** smtms_ joined
[03:29] *** smtms__ joined
[03:30] *** smtms left
[03:30] *** PerlPilot joined
[03:32] *** PerlJam left
[03:32] *** justatheory left
[03:32] *** alanhaggai left
[03:33] *** justatheory joined
[03:33] *** bacek__ joined
[03:35] <pmichaud> pugs: my %hash = 1..6;   say %hash.join(':');

[03:35] <p6eval> pugs: OUTPUT[1  2:3     4:5     6␤]

[03:35] *** smtms joined
[03:36] *** smtms_ left
[03:38] *** alanhaggai joined
[03:39] *** cjfields joined
[03:42] *** kanru joined
[03:48] *** bacek___ joined
[03:50] *** bacek_ left
[03:50] *** alanhaggai_ joined
[03:52] *** smtms__ left
[03:54] *** mncharity joined
[03:56] *** bacek__ left
[03:57] <mncharity> rakudo: Array ~~ KitchenSink

[03:57] <p6eval> rakudo 28737: OUTPUT[Method 'ACCEPTS' not found for invocant of class 'Failure'␤current instr.: 'infix:~~' pc 10492 (src/gen_builtins.pir:6878)␤]

[03:57] <mncharity> rakudo: Array ~~ Array

[03:57] <p6eval> rakudo 28737: RESULT[1]

[03:57] <mncharity> rakudo: Array ~~ Ordered

[03:57] <p6eval> rakudo 28737: OUTPUT[Method 'ACCEPTS' not found for invocant of class 'Failure'␤current instr.: 'infix:~~' pc 10492 (src/gen_builtins.pir:6878)␤]

[03:57] <mncharity> rakudo: Array ~~ Num

[03:58] <p6eval> rakudo 28737: RESULT[0]

[03:58] <mncharity> rakudo: Array ~~ Any

[03:58] <p6eval> rakudo 28737: RESULT[1]

[03:58] <mncharity> rakudo: Array ~~ Container

[03:58] <p6eval> rakudo 28737: OUTPUT[Method 'ACCEPTS' not found for invocant of class 'Failure'␤current instr.: 'infix:~~' pc 10492 (src/gen_builtins.pir:6878)␤]

[04:04] *** a-jing joined
[04:04] *** a-jing left
[04:05] *** justatheory left
[04:05] *** bacek_ joined
[04:05] *** alanhaggai left
[04:11] *** cjfields left
[04:13] *** bacek___ left
[04:14] <pugs_svnbot> r21075 | lwall++ | [STD] now parses 400 lines of itself in about 5 seconds

[04:16] <mncharity> rhr++  # docs/p6types

[04:39] *** BinGOs_ joined
[04:43] *** smtms left
[04:45] *** BinGOs left
[04:47] *** smtms joined
[04:48] *** alanhaggai_ left
[04:48] *** bacek__ joined
[04:57] *** bacek_ left
[04:59] *** cognominal_ left
[05:05] *** bacek_ joined
[05:05] *** xinming joined
[05:06] *** Psyche^ joined
[05:08] *** Patterner left
[05:08] *** Psyche^ is now known as Patterner

[05:12] *** cognominal_ joined
[05:14] *** smtms_ joined
[05:14] *** bacek__ left
[05:14] *** Pzt left
[05:19] *** smtms__ joined
[05:20] *** bacek__ joined
[05:21] *** alanhaggai joined
[05:23] <pugs_svnbot> r21076 | putter++ | [STD_red] Added missing trait_verb:does (currently trait_auxiliary:does in STD.pm), and new role_name .

[05:26] *** smtms left
[05:29] *** bacek_ left
[05:29] *** agentzh left
[05:33] *** alester left
[05:35] *** nekobaka left
[05:35] *** bacek_ joined
[05:35] *** smtms_ left
[05:41] *** agentzh joined
[05:42] *** FrostDog_ joined
[05:43] *** bacek__ left
[05:48] *** bacek__ joined
[05:48] <pugs_svnbot> r21077 | putter++ | elfish/doc_p6types: Created.  Unfinished work assimilating the new docs/p6type into the elf prelude.  rhr++

[05:48] <pugs_svnbot> r21077 | putter++ | Signatures are faked, since docs/p6type doesn't yet have them.

[05:58] *** bacek_ left
[06:17] *** smtms__ is now known as smtms

[06:19] *** FrostDog_ left
[06:20] <pugs_svnbot> r21078 | putter++ | [elf_f] Added basic support for does() and roles.  They are currently emitted identically to classes.

[06:20] *** mncharity left
[06:38] *** bacek__ left
[06:51] *** scrottie left
[07:03] *** bacek_ joined
[07:14] *** apeiron_ joined
[07:20] *** apeiron left
[07:21] *** apeiron_ is now known as apeiron

[07:22] *** elmex joined
[07:23] *** bacek_ left
[07:34] *** |Jedai| left
[07:37] *** zostay left
[07:37] *** cj left
[07:37] *** zostay joined
[07:38] *** moritz_ left
[07:38] *** moritz_ joined
[07:38] *** jan__ left
[07:38] *** Lorn_ left
[07:39] *** Lorn joined
[07:41] *** apeiron left
[07:41] *** apeiron joined
[07:50] *** mtve left
[08:02] *** cj joined
[08:09] *** a-jing joined
[08:09] *** a-jing left
[08:11] *** cj left
[08:22] *** japhb left
[08:22] *** iblechbot joined
[08:24] *** gbacon_ joined
[08:25] *** gbacon left
[08:27] *** japhb joined
[08:31] *** iblechbot left
[08:37] *** cj joined
[08:48] *** ting joined
[08:48] *** ting left
[08:51] *** penk joined
[08:52] *** vixey left
[08:52] *** kanru left
[08:53] *** masak joined
[09:04] *** xinming left
[09:11] *** BinGOs_ is now known as BinGOs

[09:17] *** Kattana left
[09:41] *** mtve joined
[09:46] <moritz_> re

[09:55] *** jfredett joined
[10:06] *** jfredett_ left
[10:11] *** dmq left
[10:27] *** ruoso left
[10:35] *** xinming joined
[10:59] *** ruoso joined
[10:59] *** Kattana joined
[11:09] *** penk left
[11:24] *** vixey joined
[11:35] *** chris2 joined
[11:44] *** iblechbot joined
[11:53] *** cognominal_ left
[11:53] *** ruoso left
[11:56] *** bacek_ joined
[12:00] *** meppl joined
[12:04] *** vixey left
[12:05] *** iblechbot left
[12:18] *** alanhaggai left
[12:19] *** FurnaceBoy joined
[12:22] *** FurnaceBoy left
[12:35] *** bacek__ joined
[12:36] *** alanhaggai joined
[12:39] *** alanhaggai left
[12:43] *** vixey joined
[12:48] *** bacek__ left
[12:48] *** riffraff joined
[12:51] *** alanhaggai joined
[13:01] *** alanhaggai left
[13:02] *** pmurias joined
[13:05] *** bacek_ left
[13:05] *** smtms_ joined
[13:10] *** jhorwitz joined
[13:10] *** cmarcelo joined
[13:11] <pmurias> what is the lexical scope of $/?

[13:11] <pugs_svnbot> r21079 | pmurias++ | [elfX] removed _let_end,_let_gen,Hash.dup and fixed STD_red path

[13:14] <pmurias> the same as if there was a my before the ~~?

[13:14] <moritz_> pmurias: I think it's :context<rw> or some such

[13:17] <pmurias> moritz_: thanks

[13:17] *** vixey left
[13:17] <pmurias> moritz_: S02 proved you right

[13:18] *** alester joined
[13:18] *** smtms left
[13:19] <pmurias> moritz_: and an implicit my $/ is context<rw> is added at the start of every block?

[13:20] <moritz_> that I don't know

[13:20] *** smtms_ is now known as smtms

[13:22] *** wknight8111 joined
[13:23] <pmurias> what is the url of the more formal perl6 spec?

[13:24] <moritz_> http://perlcabal.org/syn/ is as formal as you can get

[13:24] <lambdabot> Title: Official Perl 6 Documentation

[13:24] <moritz_> or do you mean Dlougzs ($correct name here) effort?

[13:24] <moritz_> that would be http://www.dlugosz.com/Perl6/

[13:24] <lambdabot> Title: Perl 6

[13:25] *** vixey joined
[13:25] <masak> hehe, I like how he very humbly calls it "Perl 6 Rigorous Technical Specification"

[13:26] *** iblechbot joined
[13:30] *** FurnaceBoy joined
[13:31] *** alester left
[13:38] <pmurias> avar: is the kp6 common-lisp backend a good source of guidance for a common-lisp backend for elf?

[13:39] <pugs_svnbot> r21080 | pmurias++ | [elfX] removed debugging leftover

[13:49] <pmurias> TimToady: what is the exact point an implicit my $_,$/,$! is inserted?

[13:54] *** rdice joined
[13:56] *** vixey left
[13:56] <pugs_svnbot> r21081 | pmurias++ | [elfX] merged 21078

[14:01] <rakudo_svn> r28746 | particle++ | [rakudo] refactor contextualizer code into a subroutine (DRY++)

[14:05] *** pmurias left
[14:06] *** TJCRI joined
[14:34] *** pbuetow joined
[14:40] *** pmurias joined
[14:42] *** cognominal_ joined
[14:46] *** peepsalot joined
[14:51] *** slavi1 joined
[14:52] *** r0bby left
[14:52] *** jan__ joined
[15:08] *** pmurias left
[15:16] *** Lorn_ joined
[15:23] *** Lorn left
[15:32] *** hercynium joined
[15:41] *** rodi joined
[15:59] *** FurnaceBoy left
[16:00] *** apeiron_ joined
[16:00] *** kanru joined
[16:01] <TimToady> @tell pmurias those variables are an intrinsic part of any block's lexpad, so must be created as soon as the lexpad is created, but just after the signature has added its lexicals, in case the signature has already inserted one of those variables (typically $_)

[16:01] <lambdabot> Consider it noted.

[16:15] *** apeiron left
[16:23] *** zostay left
[16:31] *** aindilis joined
[16:35] *** gbacon_ is now known as gbacon

[16:37] *** apeiron_ is now known as apeiron

[16:39] <rakudo_svn> r28753 | pmichaud++ | [rakudo]:

[16:39] <rakudo_svn> r28753 | pmichaud++ | * spectest-progress update, 75 files, 1080 passing tests, 1 failing test

[16:43] *** justatheory joined
[16:45] <pmichaud> http://www.pmichaud.com/perl6/rakudo-tests-2008-06-27.png

[16:46] <Auzon> very cool rakudo++

[16:50] <slavi1> 6.2.13.a(Perl5_stub.o): In function `stginit_export_Pugszm6zi2zi13_PugsziRunziPerl5_zdfundefValzua78GC':

[16:50] <slavi1> does that error make any sense?

[16:53] *** riffraff left
[16:54] *** slavi1 left
[17:00] *** PerlPilot is now known as PerlJam

[17:01] *** AndyAway is now known as alester

[17:02] *** nipotaway is now known as nipotan

[17:03] <pugs_svnbot> r21082 | putter++ | docs/p6types: Small cleanups for r21077 - normalized foofix quoting styles (3 conventions -> 2), and commented out "method" lines which are aggregates (eg, "etc"), rather than an actual method.

[17:14] *** drbean left
[17:16] *** cj left
[17:33] *** alester is now known as AndyAway

[17:35] *** pmurias joined
[17:36] *** masak left
[17:36] <pmurias> pugs: $_ = 7;if (1) { $_ = 3 

[17:36] <lambdabot> pmurias: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:36] <p6eval> pugs: OUTPUT[*** ␤    Unexpected end of input␤    expecting operator or "}"␤    at /tmp/P4NnrYa0VY line 2, column 1␤]

[17:36] <pmurias> pugs: $_ = 7;if (1) { $_ = 3 };say $_;

[17:36] <p6eval> pugs: OUTPUT[3␤]

[17:37] <pmurias> TimToady: shouldn't it print out 7?

[17:37] *** rdice left
[17:42] <pmichaud> I think that the block to a C<if> is an immediate block, so it doesn't localize $_

[17:42] *** justatheory left
[17:43] <pmurias> pmichaud: only none immediate blocks do?

[17:43] <pmurias> or doesn't -> {} do initialization to?

[17:43] <pmichaud> I think -> {} gets a local $_

[17:44] <pmichaud> and takes no arguments

[17:44] <TimToady> the block is really -> $_ = OUTER::<$_> {...}, and since if doesn't pass a param, it is bound to the outer $_

[17:44] <pmichaud> ...bound or copied?

[17:44] <TimToady> bound

[17:44] <TimToady> or it doesn't work right

[17:44] <pmichaud> right

[17:44] <pmichaud> so $_ = OUTER::<$_>  also has an (implicit?)  is rw

[17:45] <TimToady> yes

[17:46] <TimToady> parameters are for binding, so defaults are bound as well, despite the appearance of =

[17:46] <pmichaud> right

[17:46] <pmichaud> except for something like is copy, I suspect

[17:46] <TimToady> which is why we often call it pseudo-assignment

[17:46] <pmurias> pugs: $_ = 8;my $code = -> {$_ = 5};$code.();say $_;

[17:46] <p6eval> pugs: OUTPUT[5␤]

[17:46] <TimToady> well, one of the reasons...

[17:47] <TimToady> arguably wrong there, since -> implies a () sig

[17:48] <pmichaud> pugs: $_ = 8;my $code = -> {$_ = 5};$code.(1);say $_;

[17:48] <p6eval> pugs: OUTPUT[*** No compatible multi variant found: "$code"␤    at /tmp/jEdp1dyJUX line 1, column 31-40␤]

[17:48] <TimToady> but pugs may be treating -> {...} as equivalent to {...}

[17:48] <pmichaud> so, in the -> { ... }   case, the $_ should not be bound to the outer $_

[17:48] <pmichaud> (which is as I remember it)

[17:48] <TimToady> I would think not.

[17:49] <pmichaud> okay, thanks.

[17:50] <pmurias> TimToady: thanks for the clarification

[17:51] <TimToady> np, mp

[17:52] *** Coleoid left
[17:53] *** pmurias left
[17:55] *** drbean joined
[17:58] *** rindolf joined
[17:58] <rindolf> Hello boys and girls!

[17:58] * rindolf returned from the swimming pool.

[18:02] <smtms> rindolf, I thought you were going to ride a bike

[18:03] <TimToady> the two are not mutually exclusive if it's a water bike...

[18:03] <rindolf> smtms: no, pool eventually.

[18:03] <rindolf> TimToady: :-)

[18:03] <rindolf> Something from #perlcafe

[18:04] <rindolf> "On the Internet no one knows you're a female dog."

[18:04] <rindolf> "But everyone can tell you're a Bitch."

[18:05] <rindolf> smtms: did you see the geek pseudo-sextalk yesterday?

[18:05] <rindolf> I'll fortune it.

[18:05] <rindolf> Well, XML-Gram-Fortune it actually.

[18:05] <rindolf> But I'm a lazy leech.

[18:07] <rindolf> ls -t | head -4 | (while read T ; do tail -10000 "$T" ; done) | gvim - ==> gotta love bash.

[18:07] <rindolf> Golf!

[18:07] <rindolf> Bash golf!

[18:07] <rindolf> rm -fr ~

[18:07] <rindolf> Dangerous golf.

[18:14] *** hercynium left
[18:16] * rindolf is listening to Sister Act - Oh Maria - rHASQg8fR0s

[18:16] <rindolf> It's the best part of the movie.

[18:18] *** cj joined
[18:18] <rindolf> Ah, great a Hebrew song with iso-stupid-8859-8 garbage for ID tags.

[18:19] <rindolf> Now /nowplay for you!

[18:19] <rindolf> For one song!

[18:19] <rindolf> No /nowplay for you!

[18:20] *** eternaleye left
[18:22] <rindolf> TimToady: http://www.shlomifish.org/humour/fortunes/shlomif.html#sextalk-according-to-perlers

[18:22] <lambdabot> Title: Shlomi Fish's Quotes as Fortunes Cookies, http://tinyurl.com/6jnmyl

[18:28] *** hercynium joined
[18:29] <rindolf> TimToady: what's up?

[18:33] <spinclad> oh, please!

[18:36] <spinclad> well, we just had a thunderstorm pass over, with no casualties

[18:36] <spinclad> (unless i'm still caught in the eye)

[18:36] *** justatheory joined
[18:42] <rindolf> WTF? There's no one but me in #japan?

[18:42] <rindolf> How come there are virtually no Japanese on Freenode?

[18:43] <smtms> I think en_JP is too different to en_GB and en_US, and they just cannot understand the rest of the world

[18:44] <smtms> or they think IRC is an 1980's technology, and they use only technologies from the future in Japan :-)

[18:45] <TimToady> um, it's about 4am in Japan...

[18:48] <[particle1> http://www.theonion.com/content/news/earthquake_sets_japan_back_to_2147

[18:48] <lambdabot> Title: Earthquake Sets Japan Back To 2147 | The Onion - America's Finest News Source, http://tinyurl.com/yt4egq

[18:48] *** zamolxes joined
[18:49] <rindolf> TimToady: ah.

[18:49] <rindolf> TimToady: hmm...

[18:49] <rindolf> TimToady: still, some people should be there.

[18:49] <rindolf> Some people keep IRC open even when they sleep.

[18:50] <rindolf> It's like there's hardly any free decent docs for Ruby in English.

[18:50] <rindolf> And there is in Japanese.

[18:50] <TimToady> so learn Japanese

[18:51] <spinclad> rindolf: perhaps you're thinking of audreyt, well known for both coding and ircing in her sleep?

[18:51] <rindolf> spinclad: heh.

[18:51] <rindolf> spinclad: does she sleep?

[18:51] <rindolf> TimToady: I've been thinking of Latin, Greek, German or something.

[18:52] <rindolf> TimToady: and I need to keep up with my Written Arabic.

[18:52] <rindolf> Written Arabic is beautiful but often counter-intuitive.

[18:52] <rindolf> and no longer actively spoken.

[18:52] <rindolf> My friend has a theory that in 50 years Hebrew will be the Lingua Franca of the middle east.

[18:53] <rindolf> Not Arabic.

[18:53] <TimToady> Japanese has the advantage of teaching you to think in reverse polish

[18:53] <rindolf> TimToady: heh.

[18:53] <rindolf> TimToady: I wonder if Aristotle' Prior Analytics is any less opaque in the original Greek.

[18:54] <rindolf> Or his Metaphysics.

[18:54] <TimToady> depends on whether you speak original Greek I imagine :)

[18:54] <rindolf> TimToady: ancient Greek.

[18:54] <rindolf> Greek evolved quite a bit.

[18:54] <TimToady> that too

[18:55] <rindolf> From Linear B.

[18:55] <rindolf> Now modern Greek is quite incompatible with it.

[18:55] <rindolf> TimToady: do you want to learn Hebrew?

[18:55] <TimToady> you can read the street sings

[18:55] <TimToady> *signs

[18:55] <TimToady> after I'm done with Japanese and Mandarin

[18:55] <rindolf> TimToady: ah, cool.

[18:55] *** eternaleye joined
[18:55] <rindolf> TimToady: can you ever be done with them?

[18:56] <rindolf> TimToady: infi once showed me a web-site he prepared to learn Kanji.

[18:56] <rindolf> TimToady: BTW, what's your source of income now?

[18:56] <TimToady> once you learn Kanji you can read a certain amount of Chinese

[18:57] <TimToady> $dayjob with Netlogic Microsystems

[18:57] <rindolf> TimToady: I once joked that you have more $ in the bank than in your Perl code.

[18:57] <TimToady> I'm doing the Linus trick of working for a hardware company

[18:57] <rindolf> TimToady: ah.

[18:57] <TimToady> eh?  must be a different TimToady--my net worth is quite negative at this point.

[18:58] <rindolf> TimToady: hope Netlogic won't fare as Transmeta.

[18:58] <rindolf> Trance-Metal

[18:58] <rindolf> New anti-pop music genre.

[18:58] <TimToady> they seem to be doing very well right now

[18:58] <rindolf> TimToady: there are over 130 Larry Walls in the USA but only one that matters.

[18:59] <rindolf> TimToady: who? Netlogic?

[18:59] <TimToady> actually, two of them are me, last I checked...

[19:00] <TimToady> and at that point there were 137 of us

[19:01] <rindolf> TimToady: http://www.shlomifish.org/humour/fortunes/shlomif.html#larry-wall-facts

[19:01] <lambdabot> Title: Shlomi Fish's Quotes as Fortunes Cookies, http://tinyurl.com/6jnmyl

[19:01] <rindolf> Any additions will be welcome.

[19:02] <TimToady> I leave it to other people to figure out how to harvest email and irc these days.  :)

[19:02] <TimToady> feel free to fix the capitalization and spelling of anything you find on irc from me.

[19:03] <rindolf> TimToady: there isn't a Larry Wall junior, right?

[19:03] <rindolf> I mean your son called that.

[19:03] <rindolf> Do you have a son?

[19:03] <[particle1> yes, his name is Berlin

[19:03] *** [particle1 is now known as [particle]

[19:03] <TimToady> I name all my computers after famous walls

[19:04] <rindolf> TimToady: ah.

[19:04] <rindolf> TimToady: people called Wall?

[19:04] <TimToady> no, famous walled cities

[19:04] <rindolf> TimToady: or Berlin Wall? The western wall, etc.

[19:04] <rindolf> TimToady: ah.

[19:04] <rindolf> Do you have the Western Wall?

[19:04] <Auzon> (wall naming scheme)++

[19:04] <TimToady> kiev, london, beijing, edo, athens, troy, etc

[19:05] <rindolf> TimToady: ah.

[19:05] <rindolf> TimToady: Jerusalem.

[19:05] <rindolf> London Wall is falling down....

[19:05] <rindolf> Falling down.

[19:05] <rindolf> Falling down.

[19:05] <rindolf> Larry Wall will build a new one.

[19:05] <rindolf> My fair lady!

[19:05] <rindolf> Heh.

[19:06] <rindolf> TimToady: I think Pugs was a mistake.

[19:06] <rindolf> They spent too much effort on an implementation in a bad language.

[19:06] <TimToady> you're entitled to your opinion, but every effort has taught us many things

[19:06] <rindolf> TimToady: right.

[19:07] <TimToady> and not just how not to do it

[19:07] <TimToady> we have a test suite right now because of pugs

[19:07] <rindolf> TimToady: ah.

[19:07] <rindolf> Which Pugs fail some of the tests of it.

[19:07] <TimToady> we now understand the synopses in much greater detail because of pugs

[19:08] <TimToady> programming in Haskell forced us to answer some very important questions that would otherwise have never been asked

[19:08] <TimToady> because Haskell don't stand for no nonsense... :)

[19:08] <rindolf> I suppose 1 bird in the hand is better than 2 in the tree.

[19:08] <rindolf> <TimToady> because Haskell don't stand for no nonsense... :) - pardon?

[19:09] <TimToady> 1 bird in the hand *and* 2 in the tree beats the *or* version

[19:09] <spinclad> which is good reason to revive pugs, if we can manage it

[19:09] <allbery_b> rindolf: sloppy thinking and haskell don't mix

[19:09] <rindolf> allbery_b: ah.

[19:10] <TimToady> plus there are many simplifications that we noticed because of pugs

[19:10] *** zamolxes left
[19:11] <TimToady> so basically, thinking that pugs was a mistake is a mistake

[19:12] <TimToady> and it could yet turn out that pugs is the best implementation once we glue in a real compiler/regex engine

[19:14] <rindolf> TimToady: http://www.shlomifish.org/screenplay-xml-f6y8/outline.txt - new O'ReillyNet article that I'd like to write.

[19:15] <rindolf> chromatic and the OnLAMP editor did not return to me.

[19:15] <rindolf> I've used Perl and XML.

[19:15] <rindolf> O'ReillyNet did not have too many articles recently.

[19:15] <rindolf> Mostly blog posts.

[19:16] *** eternaleye left
[19:17] <rindolf> Why can't they say "We got your email and will deal with it soon."

[19:19] <rindolf> OTOH, an essay on my homepage was deprecated by chromatic. I feel so loved.

[19:19] <rindolf> "My blog post was chromaticd. I pwn you as a blogger."

[19:19] <rindolf> "My blog post was chromatic'd. I pwn you as a blogger."

[19:20] <rindolf> TimToady: so BASIC was your first language?

[19:20] <TimToady> no, English was my first language.  :)

[19:21] <rindolf> TimToady: I started with XT ROM BASIC, but I suppose it was something like Perl 5 was to Perl 4 for your BASIC.

[19:21] <rindolf> BASIC has greatly evolved since Dartmouth BASIC.

[19:21] <rindolf> TimToady: ah.

[19:21] <rindolf> TimToady: not Chomsky's Universal language?

[19:21] <TimToady> feh

[19:21] *** cosimo left
[19:22] <diakopter> rindolf: what's the name of the Parrot implementation of Intercal?

[19:22] <Juerd> 21:04 <@TimToady> we have a test suite right now because of pugs

[19:22] <Juerd> Very, very important.

[19:22] <rindolf> diakopter: I don't know.

[19:22] <rindolf> Juerd: yes, very.

[19:23] <rindolf> Juerd: anyway, I expect that at every given time all tests will pass.

[19:23] <Juerd> Well, there are probably bad tests too :)

[19:23] <Juerd> Given the volume of the suite, and that pugs has never been able to even parse everything :0

[19:23] <Juerd> :)

[19:23] <TimToady> testrot accounts for many of those :)

[19:23] <rindolf> TimToady: testrot...

[19:23] <rindolf> TimToady++

[19:24] <rindolf> How long does it take Pugs to run the entire Pugs test suite?

[19:24] <TimToady> but a number of them were misunderstandings at the time

[19:24] <rindolf> Because Pugs is kinda slow.

[19:24] <diakopter> defudge should be renamed Passover...

[19:24] <TimToady> used to run on my old laptop in about 25 minutes

[19:24] <rindolf> TimToady: or cute bugs.

[19:24] <rindolf> I mean implementation details.

[19:24] <rindolf> TimToady: kinda long.

[19:25] <TimToady> audreyt's dual core used to run them in 10 minutes

[19:26] <TimToady> I haven't tried on my new laptop, since I haven't installed the lates ghc yet

[19:26] <Juerd> The old feather used to take 25 minutes. The new one'd probably be faster.

[19:27] <TimToady> first make it run, then make it run right, then make it run fast

[19:27] *** eternaleye joined
[19:27] <rindolf> TimToady: another problem with Pugs is that it kept requiring the latest ghc.

[19:27] *** vixey joined
[19:28] <Juerd> Did pugs drive GHC development perhaps? :D

[19:28] <TimToady> shrug, you shouldn't pick on a software project when it's down

[19:29] <TimToady> Juerd: yes, I believe some of that happened too

[19:32] <rindolf> TimToady: "After Death - say holy."

[19:32] <rindolf> TimToady: it's a Hebrew phrase.

[19:32] <TimToady> Actually, I'm just about out of After Death--I've got a bottle of Mega Death now too.

[19:33] <TimToady> just had some on my potatoes, yum.

[19:36] <spinclad> sounds hot

[19:36] <TimToady> of the first six ingredients, five of them are hot.  Red habanero pods, cayenne chilies, white vinegar, natural pepper flavor, ancho chilies, chipotle chilies, molasses, guava nectar, fresh ginger, salt, spices.

[19:36] <TimToady> 'bout 550,000 scovilles

[19:37] <TimToady> After Death is only about 500k

[19:37] <TimToady> Tobasco is only about 35k

[19:38] <TimToady> Tabasco, 'scuse me

[19:38] *** johan` joined
[19:38] <spinclad> tabasco i'm calibrated on -- now i can (only) imagine

[19:38] *** johan` left
[19:39] <TimToady> so roughly 15 times hotter

[19:39] <spinclad> 'add 1/15 drop per 100 potatoes'

[19:40] <TimToady> I generally only use it about one "plop" at a time

[19:40] <TimToady> unless I really want a large endorphin kick

[19:42] *** viklund joined
[19:42] <rindolf> TimToady: LOL.

[19:42] <spinclad> enjoy yr clear sinuses

[19:42] <rindolf> TimToady+=5

[19:42] <rindolf> "After Death"

[19:42] <rindolf> Reminds me of that screensaver.

[19:42] <rindolf> "After Hours"

[19:42] <vixey> After Dark

[19:43] <vixey> with the flying toasters?

[19:43] <rindolf> vixey: yes, that's the one.

[19:43] <rindolf> Also had a nice Looney Tunes one.

[19:43] <rindolf> "I now proclaim this computer in the name of Mars!"

[19:43] <rindolf> (Marvin the Martian)++

[19:44] <vixey> they were cool

[19:45] <rindolf> I recall something about wine being able to run Windows screensavers.

[19:45] <spinclad> "where's the kaboom?  there was meant to be a case-shattering kaboom."

[19:45] <rindolf> XScreenSaver is a pre-Autoconf hell from what I understood.

[19:48] <Auzon> pugs: say ord(0); say ord(1);

[19:48] <p6eval> pugs: OUTPUT[48␤49␤]

[19:49] <Auzon> rakudo: say +"a"

[19:49] <p6eval> rakudo 28754: OUTPUT[0␤]

[19:49] <Auzon> rakudo: say "a" > "1"

[19:49] <p6eval> rakudo 28754: OUTPUT[0␤]

[19:49] <Auzon> rakudo: say "a" gt "1"

[19:49] <p6eval> rakudo 28754: OUTPUT[1␤]

[19:54] <Auzon> perl6: say "a" cmp "1"

[19:54] <p6eval> elf 21082: OUTPUT[1␤]

[19:54] <p6eval> ..kp6 21082: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤     ]

[19:54] <p6eval> ..pugs: OUTPUT[1␤]

[19:54] <p6eval> ..rakudo 28754: OUTPUT[1␤]

[19:54] <Auzon> perl6: say "a" cmp 1

[19:54] <p6eval> elf 21082: OUTPUT[1␤]

[19:54] <p6eval> ..kp6 21082: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤     ]

[19:54] <p6eval> ..pugs: OUTPUT[1␤]

[19:54] <p6eval> ..rakudo 28754: OUTPUT[1␤]

[19:56] *** justatheory left
[20:03] <Auzon> What context does cmp use in this case?

[20:03] *** dolmen joined
[20:03] <rindolf> TimToady: do you have an RSS reader?

[20:03] <rindolf> Maybe say is an operator.

[20:03] <rindolf> Auzon: ^^^

[20:03] <pmichaud> say is a function.

[20:03] <rindolf> pmichaud: ah.

[20:03] <rindolf> pmichaud: but in perl 5 all built-ins are operators.

[20:03] <rindolf> Well, they have prototypes.

[20:03] <Auzon> rindolf: In Perl 6, all operators are functions.

[20:03] <rindolf> Auzon: ah, cool.

[20:03] <rindolf> I figured so.

[20:03] <pmichaud> (but not all functions are operators :-)

[20:03] <Auzon> just with funny names like infix:<~>

[20:03] <rindolf> Auzon: but they have precedence.

[20:04] <Auzon> re precedence, yes, but so do functions. :)

[20:06] <rindolf> Auzon: ah, nice.

[20:06] <rindolf> Auzon: did you figure out how macros are going to change the grammar on the fly?

[20:06] <rindolf> Would it be something like Scheme's hygienic macros?

[20:06] <rindolf> The (define-syntax stuff?

[20:06] <Auzon> rindolf: I haven't investigated it beyond a brief look at S02's quoting section

[20:06] *** pmurias joined
[20:07] <Auzon> rindolf: Have you seen my factorial operator example?

[20:07] <rindolf> I have yet to read that featured LtU article about Scheme's macro systems.

[20:07] <rindolf> But I want to.

[20:07] <vixey> every macro system goes in define-syntax

[20:08] <rindolf> Auzon: I cna understand CL's and Arc's (defmacro Or (mac but they kinda suck.

[20:08] <vixey> there's some hygienic and some non-hygienic

[20:08] <vixey> defmacro is good in CL since you have multiple namespace, but that approach is not useful in scheme (with a single namespace)

[20:08] <vixey> (except in rare circumstances)

[20:09] *** jhorwitz left
[20:09] <rindolf> vixey: ah. :S

[20:09] <rindolf> vixey: CL's namespaces kinda suck.

[20:09] <rindolf> I prefer Perl's

[20:10] <vixey> no they don't

[20:10] <rindolf> Which are nested.

[20:10] <rindolf> Well, they are flat.

[20:10] <rindolf> vixey: BTW, I'm renaming Park to Spark and continuing to design it.

[20:10] <rindolf> And I'll probably start working on a Parrot implemetnation.

[20:10] <Auzon> apparently my factorial example no longer works in Pugs here. :-/

[20:11] <rindolf> It will be a Random-Tweakers project.

[20:11] *** rodi left
[20:11] <rindolf> Auzon: bitrot!

[20:11] <Auzon> Presumably so, since p6eval's environment was upgraded, and maybe Pugs was recompiled

[20:12] <rindolf> Auzon: hmmm...

[20:12] <rindolf> Auzon: isn't it pure-p6?

[20:12] <Auzon> Pugs, no. Pugs is significantly Haskell

[20:12] <pmurias> rindolf: what is Park/Spark?

[20:12] <Auzon> anyway, here's my example: multi postfix:<!> (Int $a) {[*] 1 .. $a}; say 6!;

[20:14] <rindolf> pmurias: http://www.shlomifish.org/open-source/projects/Park-Lisp/

[20:14] <lambdabot> Title: Documentation for the Park Lisp Dialect

[20:14] <rindolf> pmurias: it's still incomplete.

[20:14] <rindolf> And I haven't updated it.

[20:14] <rindolf> Auzon: why does it have to be a multi-method?

[20:15] <Auzon> It doesn't, but it allows another one to be declared for another signature

[20:16] <pmurias> rindolf: if you like lisp/perl6 projects you might consider helping with a common lisp elf backend

[20:18] <rindolf> pmurias: Common Lisp.

[20:18] <rindolf> pmurias: thing is I think both CL and Scheme suck.

[20:18] <rindolf> I like Lisp as a concept.

[20:18] <rindolf> Arc is nice, but has too many implementation problems.

[20:18] <rindolf> And missing features.

[20:19] <vixey> Arc is not nice

[20:19] <rindolf> I want to give a presentation to the Perl Mongers about "Foreign Languages: Lisp"

[20:19] <rindolf> vixey: I like it.

[20:19] <rindolf> Though I hate that "(not)" has become "(no)"

[20:19] <rindolf> it's so non-English.

[20:19] <vixey> it's just TCL with horrible syntax

[20:20] <rindolf> vixey: but it's missing  a lot of exciting features.

[20:20] <pugs_svnbot> r21083 | pmurias++ | [pixie] support for keeping arbitrary stuff inside {*} blocks and storing in in an external (to STD) filenot yet used/properly tested but i'm comiting as i rm it once before ;)

[20:20] <rindolf> Which PG deemed (sp?) as unnecessary.

[20:20] <rindolf> Doesn't look like the 100-years language to me.

[20:20] <rindolf> Which is why - Spark!

[20:21] <pbuetow> hmm.

[20:21] <pmurias> why not just write an s-expression p6 dialect?

[20:22] <rindolf> pmurias: could be.

[20:22] <rindolf> pmurias: it's another approach.

[20:22] <rindolf> But some things make sense in Lisp and not in p6.

[20:22] <rindolf> For example, Perl does not like to use + for string or list concat.

[20:23] <rindolf> While Python does and it seems to be OK in Arc too.

[20:23] <rindolf> And in CL you have (concatenate) (yuck!).

[20:23] <pbuetow> (((hehe)))

[20:24] <pmurias> + for strings sucks

[20:24] <Auzon> seconded.

[20:24] <vixey> rindolf: If you don't like CONCATENATE you can just rename it

[20:25] <rindolf> vixey: yeah.

[20:32] *** vixey left
[20:32] *** vixey joined
[20:35] <rindolf> vixey: but I'd rather not rename concatenate because then people won't understand my code.

[20:35] <rindolf> vixey: as TimToady said people hate abstractions.

[20:35] <vixey> yes they will rindolf

[20:36] <rindolf> They want things to work out of the box.

[20:36] <vixey> A program is many many totally newly defined procedures

[20:36] <vixey> just renaming one thing is nothing in the context if a big program

[20:37] <rindolf> vixey: "let's spend 3 days creating a new language, and 1 day implementing the solution with it."

[20:39] <TimToady> if it would take 10 days without the new language, it's worth it

[20:39] <rindolf> TimToady: yeah.

[20:39] <rindolf> TimToady: but this is the CL mentality.

[20:39] <vixey> no it's not

[20:39] <rindolf> Sometimes you can take 1 day to write an API.

[20:39] <vixey> CL is too diverse you cannot generalize like that

[20:40] <rindolf> vixey: I meant a common idiom there.

[20:40] <rindolf> I think I'll /quit and do something productive.

[20:40] <rindolf> Like work on Spark.

[20:41] <pugs_svnbot> r21084 | pmurias++ | [elfX] fixed simple bugs actions, simple actions insertion/extraction roundtrip work

[20:41] <pmichaud> pugs:  my $b = (1,2);  say $b.WHAT;

[20:41] <vixey> another quote:

[20:41] <p6eval> pugs: OUTPUT[Array␤]

[20:41] <vixey> how to write any computer program in two easy stages:

[20:41] <vixey> Design and implement the programming language which would be best for solving the problem.

[20:41] <vixey> Write the program in the language you’ve just implemented.

[20:41] <pmichaud> pugs:  my @b = (1,2);  say @b.WHAT;

[20:41] <p6eval> pugs: OUTPUT[Array␤]

[20:41] <rindolf> vixey: or just use Perl which is the best for everything.

[20:41] <pugs_svnbot> r21085 | rhr++ | [p6types] shuffle methods around

[20:41] <pmichaud> pugs:   my @a = (1,2,3);  my @b = (4,5);  push @a, @b;   say @a.elems;

[20:41] <p6eval> pugs: OUTPUT[5␤]

[20:41] <rindolf> vixey: J/K.

[20:42] <vixey> heh

[20:42] <pmichaud> pugs:  my @a = (1,2,3);  my $b = (4,5);  push @a, $b;   say @a.elems;

[20:42] <p6eval> pugs: OUTPUT[4␤]

[20:42] <TimToady> the second step is obvious--the best language for the job is one that does the job on a null input

[20:43] * pmichaud notes that vixey's algorithm is somewhat recursive

[20:43] <TimToady> "All rules of thumb are false, including this one."

[20:43] <pmurias> rindolf: when you feel like writing Common Lisp backends, contact me or mncharity ;)

[20:44] <rindolf> I wish my shlomif addresses didn't get banned from perl.org.

[20:44] <rindolf> And I cannot effecitvley talk to ABH.

[20:44] <rindolf> pmurias: ah.

[20:45] <pmurias> rindolf: ABH = ?

[20:45] <rindolf> pmurias: Ask Bjoern Hansen.

[20:45] <rindolf> There's also Robert.

[20:46] <rindolf> Spier IIRC.

[20:47] <rindolf> In the Internet banning, kicking, etc. someone is so effortless so people abuse it too much.

[20:47] <rindolf> I hate it when people say "Spam" to something low-quality, or flamatory.

[20:47] <rindolf> Or that they refer to banning someone as kicking.

[20:48] <pmurias> kicking people in real life definitly requires more effort

[20:48] <rindolf> http://www.google.com/search?hl=en&c2coff=1&safe=off&q=geek2geek+blog&btnG=Search - WTF?

[20:49] <rindolf> pmurias: well, kicking on IRC is not like kicking IRL.

[20:49] <pmichaud> okay, I'm a little confused again.  I'm trying to get rid of a rakudo cheat but I'm missing an important piece

[20:49] <rindolf> You can tell this person to shut up.

[20:49] <TimToady> isnt that what a /kick means? :)

[20:49] <pmichaud> if we have  "my @b = (4,5)"  and "my $b = (4,5)", both @b and $b have type Array

[20:50] <pmichaud> but push @foo, @b   and push @foo, $b   have different results

[20:50] <TimToady> yes, well $b is technically Scalar of Array, i suppose

[20:50] <pmichaud> ok, so $b is Scalar of Array

[20:51] <TimToady> Scalars stay scalar in list context

[20:51] <pmichaud> but what controls the flattening or non-flattening here?

[20:51] <pmichaud> ohhhhh

[20:51] *** Kenichiro joined
[20:51] <pmichaud> that could make it very easy  :-|

[20:51] *** Fieldy joined
[20:51] <Kenichiro> Wanna Play Fun RPG game ? /q me or join #HypeRPG

[20:51] <pmichaud> thanks.

[20:52] <TimToady> commuting &

[20:52] <pmurias> got to leave

[20:52] *** pmurias left
[20:54] *** t joined
[20:55] *** Fieldy left
[20:55] *** cj left
[20:56] *** Kenichiro left
[20:57] <dolmen> perl6: my @a = [ 1, 2 ]; @a.delete(1); @a.perl.say;

[20:57] <p6eval> elf 21085: OUTPUT[[1]␤]

[20:57] <p6eval> ..kp6 21085: OUTPUT[syntax error at position 39, line 1 column 39:␤my @a = [ 1, 2 ]; @a.delete(1); @a.perl.say␤                                       ^ HERE␤]

[20:57] <p6eval> ..pugs: OUTPUT[\(\(1, 2),)␤]

[20:57] <p6eval> ..rakudo 28758: OUTPUT[[[1, 2]]␤]

[20:57] <dolmen> perl6: my @a = [ 1, 2 ]; @a.delete(0); @a.perl.say;

[20:57] <p6eval> elf 21085: OUTPUT[[undef,2]␤]

[20:57] <p6eval> ..kp6 21085: OUTPUT[syntax error at position 39, line 1 column 39:␤my @a = [ 1, 2 ]; @a.delete(0); @a.perl.say␤                                       ^ HERE␤]

[20:57] <p6eval> ..pugs: OUTPUT[\()␤]

[20:57] <p6eval> ..rakudo 28758: OUTPUT[[]␤]

[20:59] <rindolf> TimToady: yes.

[21:00] *** japhb left
[21:00] *** t left
[21:08] *** eternaleye left
[21:08] <pugs_svnbot> r21086 | Auzon++ | [gsoc_spectest] Added more cmp, leg, and <=> tests. Tested the values of Order::*. Added some tests for explicitly disallowed Perl 5 syntax. (added 14 tests)

[21:08] <pugs_svnbot> r21086 | Auzon++ | Also removed some unneeded smartlinks and updated formatting in general.

[21:08] <dolmen> in rakudo, where is implemented the operator [] for arrays?

[21:09] <pmichaud> it's currently given as PAST::Val keyed_int node

[21:10] <pmichaud> src/parser/actions.pm:972

[21:11] <pmichaud> (or thereabouts -- I have a locally modified copy of actions.pm at the moment)

[21:16] *** justatheory joined
[21:24] <pmichaud> uh oh, rakudo doesn't know Order:: yet.

[21:24] <dolmen> what is Order:: ?

[21:24] <pmichaud> that's what gets returned by the various comparison ops

[21:25] <Auzon> Order::Increase, Order::Same, Order::Decrease numify to -1, 0, 1 in that order

[21:25] *** AndyAway is now known as alester

[21:25] <pmichaud> 'a' gt 'b'    returns Order::Increase

[21:25] <dolmen> ok

[21:25] <pmichaud> sorry, 'a' cmp 'b' returns ...

[21:25] <Auzon> erm, pmichaud, I thought that returned Bool::True

[21:25] <Auzon> yeah

[21:25] <pmichaud> right, wrong op :-)

[21:26] <pmichaud> I may just cheat Order:: for now :-)

[21:26] *** TJCRI left
[21:26] <pmichaud> otherwise we fail the spectest_regressions ...

[21:27] <Auzon> I don't know what they need to do other than numify properly

[21:28] <pmichaud> I _really_ wish we had automatic email of changes to pugs svn repo.

[21:28] <dolmen> they have to perl-ify properly too

[21:28] <pmichaud> it would be much easier to keep track of changes

[21:29] <pmichaud> (to the spec tests)

[21:29] <pmichaud> otherwise I start getting spectest_regression failures and I have to go track it down.

[21:32] <dolmen> I have created S02-builtin_data_types/range yesterday and it fails

[21:32] <pmichaud> it may be fixed soon :-)

[21:33] <pmichaud> the one I'm having trouble with at the moment is S04-declarations/multiple.t

[21:33] <pmichaud> I'm getting a failure and I don't know if it's because the test changed or if it's something I did.

[21:34] <pmichaud> (but please don't take this as an indication that I don't want the test files to change.. I'll gladly hunt down changes if it means the test suite is improving, which it is)

[21:34] <pmichaud> (I just wish pugs svn was sending me email notifications about it :-)

[21:35] <dolmen> how do you get verbose output of tests?

[21:35] <dolmen> 'make localtest' is too quiet

[21:36] <pmichaud> there's not a really good way to do it.

[21:36] <dolmen> It doesn't say which test failed

[21:36] <pmichaud> normally I just run them directly

[21:37] <Auzon> Same here

[21:37] <pmichaud> (doesn't say which test failed)   depends on what version of T::H you have.

[21:37] <pmichaud> (Test::Harness)

[21:37] <pmichaud> on my system it tells me which tests failed

[21:37] <Auzon> If I'm testing fudge, I'll do something like: ../../parrot perl6.pbc `fudge blah blah`

[21:37] <pmichaud> I typically do   ./parrot perl6.pbc t/spec/S00-whatever/foo.t

[21:37] <pmichaud> or

[21:38] <pmichaud> ./parrot perl6.pbc t/spec/S00-whatever/foo.rakudo

[21:38] <dolmen> you mean 'parrot perl6.pbc t/spec/...

[21:38] <dolmen> ?

[21:38] <dolmen> :)

[21:38] <pmichaud> yes, but I'll choose the .t or .rakudo test as appropriate

[21:39] <pmichaud> (the .rakudo version of the is the fudged version)

[21:39] <pmichaud> *of the test is ....

[21:39] <pmichaud> (can't type. argggh!)

[21:40] *** chris2 left
[21:45] *** eternaleye joined
[21:51] *** rindolf left
[21:52] * Auzon was not aware that {my $x; my $x} was legal

[21:53] *** alester left
[21:56] <TimToady> yes, what you cannot do is { $x; my $x } since the first $x is bound to an outer $x

[21:56] <Auzon> so sub foo ($x) {my $x} is invalid?

[21:57] <TimToady> perhaps only because the signature's declaration of the lexical is readonly, which conflicts

[22:00] <TimToady> note that the compiler is allowed to warn about {my $x; my $x} unless you say proto $x up front.

[22:01] <TimToady> but it's just a warning, and both $x's are the same $x

[22:01] <TimToady> so we don't have to figure out scopes of the form "here to the end of the block"

[22:02] <Auzon> Yeah, makes sense

[22:02] <TimToady> especially when looking up the dynamic stack

[22:03] <TimToady> and since {$x; my $x} presumably captures a link from $x to $OUTER::$x on the first $x, we can note the collision

[22:11] <pugs_svnbot> r21087 | pmichaud++ | S04-declarations/multiple.t:  rakudo doesn't understand "state" yet

[22:13] <rakudo_svn> r28762 | pmichaud++ | [rakudo]:

[22:13] <rakudo_svn> r28762 | pmichaud++ | * Clean up handling of Array, eliminate Arrayref cheats

[22:17] *** wknight8111 left
[22:26] *** hercynium left
[22:28] <pmichaud> my @array = [ 1, 2, 3 ];    # does @array have 3 elements, or 1?

[22:28] *** hercynium joined
[22:29] <pmichaud> perl6: my @array = [ 1, 2, 3 ];    # does @array have 3 elements, or 1?

[22:29] <p6eval> elf 21087: RESULT[[1,2,3]␤]

[22:29] <p6eval> ..kp6 21087: OUTPUT[substr outside of string at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MP6Runtime.pm line 98, <> line 1.␤substr outside of string at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MP6Runtime.pm line 98, <> line 1.␤substr outside of string at

[22:29] <p6eval> ..compiled/perl5-kp6-mp6/l...

[22:29] <p6eval> ..pugs: RESULT[\(\(1, 2, 3),)]

[22:29] <p6eval> ..rakudo 28762: RESULT[[1, 2, 3]]

[22:29] *** hercynium left
[22:29] <dolmen> pugs: say 1..5 ~ 3;

[22:29] <p6eval> pugs: OUTPUT[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253␤]

[22:29] <dolmen> pugs: say 1..5 ~~ 3;

[22:29] <p6eval> pugs: OUTPUT[␤]

[22:30] <dolmen> pugs: say (1..5) ~~ 3;

[22:30] <p6eval> pugs: OUTPUT[␤]

[22:30] <dolmen> pugs: say Bool::True;

[22:30] <p6eval> pugs: OUTPUT[1␤]

[22:30] <dolmen> pugs: say ((1..5) ~~ 3);

[22:30] <p6eval> pugs: OUTPUT[␤]

[22:30] <dolmen> pugs: say ((1..5) ~~ 3).WHAT;

[22:30] <p6eval> pugs: OUTPUT[Bool␤]

[22:30] <dolmen> pugs: say !((1..5) ~~ 3);

[22:30] <p6eval> pugs: OUTPUT[1␤]

[22:30] <pmichaud> (note that ~~ is not commutative.)

[22:30] <dolmen> pugs: say Bool::False;

[22:30] <p6eval> pugs: OUTPUT[␤]

[22:31] <dolmen> pmichaud, yes, I'm checking that in S02-builtins/range.t

[22:31] <dolmen> (not yet committed)

[22:32] <pmichaud> ...you're checking that ~~ is not commutative?

[22:32] <dolmen> no

[22:32] <dolmen> I want to check that "(1..5) ~~ 3" fails

[22:33] <dolmen> pugs: say (3 ~~ (1..5)).perl;

[22:33] <p6eval> pugs: OUTPUT[Bool::False␤]

[22:33] <dolmen> pugs: say (3 !~~ (1..5)).perl;

[22:33] <p6eval> pugs: OUTPUT[Bool::True␤]

[22:34] <dolmen> pugs: say (3 ~~ (4..5)).perl;

[22:34] <p6eval> pugs: OUTPUT[Bool::False␤]

[22:34] <pmichaud> rakudo:  say (3 ~~ (1..5)).perl

[22:34] <p6eval> rakudo 28762: OUTPUT[Bool::True␤]

[22:34] <dolmen> pugs: say ((1..5) ~~ 3).perl;

[22:34] <p6eval> pugs: OUTPUT[Bool::False␤]

[22:35] <dolmen> rakudo: say ((1..5) ~~ 3).perl;

[22:35] <p6eval> rakudo 28762: OUTPUT[get_number() not implemented in class 'Range'␤current instr.: 'parrot;Int;ACCEPTS' pc 1897 (src/gen_builtins.pir:1327)␤]

[22:35] <dolmen> this is ok

[22:35] <pmichaud> haven't implemented that part yet, but it'll return "5"

[22:35] <dolmen> why 5?

[22:35] <pmichaud> because that's the numification of a range containing 5 elements

[22:36] <dolmen> rakudo: say (+(1..5) ~~ 3).perl;

[22:36] <p6eval> rakudo 28762: OUTPUT[get_number() not implemented in class 'Range'␤current instr.: 'prefix:+' pc 11636 (src/gen_builtins.pir:7754)␤]

[22:36] <dolmen> rakudo: say (+(1..5)).perl;

[22:36] <p6eval> rakudo 28762: OUTPUT[get_number() not implemented in class 'Range'␤current instr.: 'prefix:+' pc 11636 (src/gen_builtins.pir:7754)␤]

[22:36] <pmichaud> pugs:  say +(1..5)

[22:36] <p6eval> pugs: OUTPUT[5␤]

[22:36] <pmichaud> pugs:  say +(6..14)

[22:36] <p6eval> pugs: OUTPUT[9␤]

[22:36] <dolmen> ok

[22:37] <dolmen> pugs: say (+('a'..'zz'));

[22:37] <p6eval> pugs: OUTPUT[702␤]

[22:38] <dolmen> pugs: say (+('a'..'ab'));

[22:38] <p6eval> pugs: OUTPUT[28␤]

[22:38] <pmichaud> when the second operand to ~~ is a number, then it's the same as doing ==

[22:39] <dolmen> pugs: say (+('0'..'f'));

[22:39] <p6eval> pugs: OUTPUT[10␤]

[22:39] <dolmen> pugs: say (('0'..'f'));

[22:39] <p6eval> pugs: OUTPUT[0123456789␤]

[22:41] *** Kattana left
[22:42] *** zostay joined
[22:43] <TimToady> pugs: say (1..9).WHAT

[22:43] <p6eval> pugs: OUTPUT[Array␤]

[22:43] <TimToady> note that pugs doesn't implement Range yet

[22:46] *** peepsalot left
[22:50] *** alester joined
[22:50] <pugs_svnbot> r21088 | dolmen++ | More Range tests.

[22:50] <pugs_svnbot> r21088 | dolmen++ | Rakudo TODOs:

[22:50] <pugs_svnbot> r21088 | dolmen++ | - .ACCEPTS for Range

[22:50] <pugs_svnbot> r21088 | dolmen++ | - numification of Range

[22:56] <dolmen> karma dolmen

[22:57] *** viklund left
[23:00] <dolmen> pmichaud: is ":vtable('get_integer')" the numification?

[23:00] <pmichaud> :vtable('get_number'), actually

[23:00] <TimToady> @karma dolme

[23:00] <lambdabot> dolme has a karma of 0

[23:00] <pugs_svnbot> r21089 | lwall++ | [STD] removed redundant regex_ from Regex:: names

[23:00] <TimToady> @karma dolmen

[23:00] <lambdabot> dolmen has a karma of 6

[23:00] <pmichaud> (it needs to work for get_integer also, yes :-)

[23:01] <pmichaud> TimToady:  if you have a moment, my question above:    my @a = [1, 4, 10];   causes @a to have one element or three ?

[23:01] <TimToady> one

[23:01] <pmichaud> yay

[23:01] <pmichaud> thanks.

[23:01] <TimToady> := would make three

[23:01] <pmichaud> right

[23:01] <pmichaud> okay, I'm happy happy happy about that

[23:01] <dolmen> :)

[23:02] <pmichaud> so then

[23:02] <TimToady> most p5 programmers will also be happy about that :)

[23:02] <pmichaud>     my @array = [ 11 .. 15 ];

[23:02] <pmichaud>     is(@array[0].elems,  5, 'arrayref has 5 elements');

[23:02] <pmichaud> is wrong

[23:02] <pmichaud> (from t/spec/S02-builtin_data_types/flattening.t)

[23:02] *** Kattana joined
[23:02] <TimToady> why? it has a [0]

[23:02] <pmichaud> oh

[23:02] <pmichaud> so it does

[23:03] <pmichaud> okay, never mind then

[23:03] <pmichaud> I misread the test :-(

[23:03] <pmichaud> thanks again

[23:03] <dolmen> it is misleading

[23:03] <TimToady> was there just a buzzing in the air around here?

[23:03] <pmichaud> I don't know.  I know there's a lot of background events at my house right now :-|

[23:04] <TimToady> now to implement :i...

[23:04] <TimToady> (or not use :i in STD.pm :)

[23:05] <pmichaud> oh, I see where I went wrong.  I don't have postcircumfix:<[ ]> implemented on Range yet.

[23:05] <pmichaud> or... hrm.

[23:05] <pmichaud> I'll figure it out in a bit.

[23:06] <dolmen> I could do it

[23:08] <dolmen> well, if it is in actions.pm, if fact no.

[23:08] <dolmen> s/if/in/

[23:11] <dolmen> I see no references to keyed_int in Array.pir

[23:12] <dolmen> how is keyed_int implemented?

[23:12] <dolmen> is it a Parrot or PCT builtin?

[23:12] *** eternaleye left
[23:21] *** cggoebel left
[23:23] <dolmen> elf: my $a = (1..20)[3];

[23:23] <p6eval> elf 21089: OUTPUT[Can't use string ("1E0") as an ARRAY ref while "strict refs" in use at (eval 117) line 3.␤ at ./elf_f line 3861␤]

[23:24] <dolmen> perl6: my $a = (1..20)[3];

[23:24] <p6eval> elf 21089: OUTPUT[Can't use string ("1E0") as an ARRAY ref while "strict refs" in use at (eval 117) line 3.␤ at ./elf_f line 3861␤]

[23:24] <p6eval> ..kp6 21089: OUTPUT[syntax error at position 6, line 1 column 6:␤my $a = (1..20)[3]␤      ^ HERE␤]

[23:24] <p6eval> ..pugs: RESULT[\4]

[23:24] <p6eval> ..rakudo 28763: OUTPUT[get_pmc_keyed() not implemented in class 'Range'␤current instr.: '_block11' pc 55 (EVAL_14:25)␤]

[23:26] *** Pzt joined
[23:35] *** cmarcelo left
[23:35] *** japhb joined
[23:44] *** mjk joined
[23:48] *** audreyt left
