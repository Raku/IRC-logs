[00:21] *** cj left
[00:28] *** japhb joined
[00:32] *** jhorwitz left
[00:33] *** hercynium left
[00:57] *** cls_bsd left
[00:57] *** cls_bsd joined
[01:16] *** alester joined
[01:25] <bacek> pugs: index("Hello World", "x")

[01:25] <p6eval> pugs: RESULT[-1]

[01:28] *** kanru left
[01:31] *** scrottie joined
[01:31] *** hcchien_ is now known as hcchien

[01:31] <scrottie> grr.

[02:01] *** justatheory left
[02:01] *** justatheory joined
[02:03] *** Limbic_Region left
[02:12] *** vixey left
[02:13] *** vixey joined
[02:23] *** kanru joined
[02:28] *** a-jing joined
[02:29] *** a-jing left
[02:52] *** Auzon1 joined
[02:52] *** Auzon left
[02:52] *** Auzon1 is now known as Auzon

[03:02] *** lambdabot left
[03:03] *** Limbic_Region joined
[03:04] *** stevan_ left
[03:06] *** xinming joined
[03:09] *** xinming left
[03:10] *** xinming_ left
[03:14] *** xinming joined
[03:31] *** stevan_ joined
[03:32] *** stevan_ left
[03:32] *** stevan_ joined
[03:42] *** pbuetow_ joined
[03:42] *** apeiron_ joined
[03:49] *** apeiron_ left
[03:52] *** pbuetow left
[03:53] *** Limbic_Region left
[03:57] *** apeiron left
[04:08] *** apeiron joined
[04:24] *** xinming_ joined
[04:34] *** PZt left
[04:35] *** wknight8111 left
[04:37] *** bacek_ joined
[04:37] *** xinming left
[04:39] *** nipotan is now known as nipotaway

[04:41] *** Alias_ joined
[04:46] *** bacek left
[05:02] *** xinming_ left
[05:07] *** bacek_ left
[05:17] *** bacek joined
[05:18] *** xinming joined
[05:42] *** xinming_ joined
[05:49] *** xinming_ left
[05:49] *** zostay left
[05:53] *** xinming_ joined
[05:53] *** xinming_ left
[05:54] *** xinming_ joined
[05:56] *** xinming left
[05:59] *** alester left
[06:05] *** Psyche^ joined
[06:09] *** xinming joined
[06:15] *** Patterner left
[06:15] *** Psyche^ is now known as Patterner

[06:16] *** xinming_ left
[06:16] *** xinming_ joined
[06:17] *** zostay joined
[06:25] *** dduncan joined
[06:26] *** xinming__ joined
[06:27] <dduncan> question: what toolkit do you presenters recommend or are currently using: eg, Spork, or XUL, or something else?  I see talks in both formats in the Pugs repo.  I'm inclined to try Spork first, but I'm concerned about CPAN showing it has a lot of failing tests with recent Perls, though that may just be the tests ... is anyone using Spork right now?

[06:28] *** bacek_ joined
[06:29] *** xinming left
[06:38] *** bacek left
[06:40] *** xinming_ left
[06:46] *** justatheory left
[06:47] *** xinming__ left
[06:48] *** c1sung left
[06:49] *** LCamel left
[06:58] *** Alias_ left
[07:02] *** elmex joined
[07:07] *** xinming joined
[07:13] *** cognominal_ left
[07:17] *** xinming left
[07:18] *** masak joined
[07:19] *** Jedai joined
[07:21] *** dduncan left
[07:36] *** xinming joined
[07:41] *** r0bby left
[07:41] *** p6eval left
[07:41] *** simcop2387 left
[07:41] *** silug left
[07:41] *** yves left
[07:41] *** ilbot2 left
[07:41] *** rafl left
[07:42] *** r0bby joined
[07:42] *** p6eval joined
[07:42] *** simcop2387 joined
[07:42] *** silug joined
[07:42] *** rafl joined
[07:42] *** ilbot2 joined
[07:42] *** yves joined
[07:56] *** penk joined
[07:58] *** xinming left
[07:58] *** xinming joined
[08:02] *** Eevee joined
[08:11] *** xinming_ joined
[08:12] *** xinming left
[08:21] *** meppl joined
[08:28] *** xinming joined
[08:41] *** xinming_ left
[08:43] *** Auzon left
[08:59] *** xinming_ joined
[09:00] *** bacek_ left
[09:07] *** cognominal_ joined
[09:07] *** xinming left
[09:07] *** rindolf joined
[09:07] <rindolf> Hi all.

[09:09] <rindolf> clkao: here?

[09:10] *** cognominal__ joined
[09:10] *** cognominal_ left
[09:13] *** pmurias joined
[09:13] <pmurias> rindolf: hi

[09:16] <rindolf> Hi pmurias 

[09:16] <rindolf> pmurias: what's up?

[09:17] <pmurias> last minute registering for university ;)

[09:20] <pmurias> i'll propably make pixie pass more tests ones i get that done

[09:21] <pmurias> rindolf: and what's up for you?

[09:21] <rindolf> pmurias: chatting.

[09:21] <rindolf> pmurias: trying to be able to send email again to @perl.org

[09:21] <rindolf> I can receive email.

[09:23] <pmurias> rindolf: you're trying to get unbanned?

[09:23] <rindolf> pmurias: yes. :-(

[09:23] <pmurias> you can always get a new email adress :(

[09:23] <rindolf> pmurias: I did.

[09:23] <rindolf> [email@hidden.address]
[09:24] <rindolf> But I like shlomif.

[09:45] *** barney joined
[09:55] *** rindolf left
[10:01] *** agentzh left
[10:04] *** agentzh joined
[10:10] *** luqui joined
[10:13] <pmurias> pixie: say 'hi'

[10:13] <p6eval> pixie: No output (you need to produce output to STDOUT)

[10:17] <pmurias> moritz_: what does the recompilation of implemenations in the evalbot?

[10:19] <moritz_> pmurias: cron

[10:20] <moritz_> pmurias: sudo chroot /new_chrrot; su - evalenv; crontab -e

[10:20] <moritz_> don't know if I've installed oone for pixie yet

[10:21] <pmurias> pixie: say 'hi'

[10:21] <p6eval> pixie: No output (you need to produce output to STDOUT)

[10:23] *** pmurias left
[10:28] *** icwiener joined
[10:28] *** ludan joined
[10:30] *** yahooooo2 left
[10:32] *** yahooooo joined
[10:35] *** penk left
[10:47] *** a-jing joined
[10:47] *** a-jing left
[11:10] *** jfredett left
[11:11] *** jfredett joined
[11:13] *** chris2 joined
[11:18] <moritz_> pugs: .print if $_ % 2 for ^11;

[11:18] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "for"␤    expecting operator␤    at /tmp/OhQtSW0ba7 line 1, column 18␤]

[11:21] *** barney left
[11:23] *** vixey` joined
[11:25] *** vixey left
[11:27] *** FadeAway7 joined
[11:29] <FadeAway7> hi, audreyt

[11:31] *** FadeAway7 is now known as DJ_Dongdot

[11:33] *** vixey` left
[11:35] *** a-jing joined
[11:36] *** a-jing left
[11:36] *** meppl left
[11:39] <moritz_> rakudo: my $x = sub { 1; }; say $x.WHAT

[11:39] <p6eval> rakudo 28889: OUTPUT[Sub␤]

[11:40] <moritz_> rakudo: my $x = { 1; }; say $x.WHAT

[11:40] <p6eval> rakudo 28889: OUTPUT[Code␤]

[11:56] *** DJ_Dongdot left
[12:08] *** barney joined
[12:58] *** alester joined
[12:58] *** kanru left
[12:58] *** alester left
[12:59] *** redicaps joined
[13:04] * ruoso starts today on the SMOP grant work ;)

[13:08] <kolibrie> ruoso++

[13:08] *** kanru joined
[13:08] *** ludan left
[13:13] *** ludan joined
[13:16] *** Psyche^ joined
[13:18] *** cmarcelo joined
[13:19] *** wknight8111 joined
[13:19] *** Khisanth left
[13:21] *** barney left
[13:23] <moritz_> TimToady: maybe you could/should add a clause to statement_control:unless that warns nicely about 'else'

[13:23] <moritz_> s/warns/croaks/, more likely

[13:27] <rakudo_svn> r28895 | pmichaud++ | [rakudo]:

[13:27] <rakudo_svn> r28895 | pmichaud++ | * spectest-progress update:  75 files, 1172 passing tests

[13:28] *** Patterner left
[13:28] *** Psyche^ is now known as Patterner

[13:32] *** icwiener_ joined
[13:34] *** icwiener left
[13:38] *** baest_ left
[13:42] *** Khisanth joined
[14:07] *** jan__ left
[14:11] *** jan__ joined
[14:14] *** TJCRI joined
[14:20] *** renormalist left
[14:22] *** alester joined
[14:28] *** hercynium joined
[14:37] *** iblechbot joined
[14:37] <ruoso> @tell pmurias how far have you gone with the alternative sm0p parser? is it producing code already?

[14:37] <ruoso> ops... E_NO_BOT

[14:44] *** DietCoke joined
[14:45] <pugs_svnbot> r21129 | ruoso++ | [SMOP] Starting to write the test for p6opaque. Currently it is created and destroyed, but nothing is called

[14:59] *** kanru left
[15:00] *** Khisanth left
[15:00] *** justatheory joined
[15:11] *** Khisanth joined
[15:12] <pmichaud> anyone know how many tests are in the pugs test suite (approximate number)?

[15:12] <[particle]> 18k-20k

[15:12] <pmichaud> okay, works for me.

[15:13] <[particle]> so we're 5+% done :)

[15:15] <moritz_> I can confirm that

[15:15] <pmichaud> thanks :-)

[15:17] <pmichaud> I'll say 19k then.

[15:18] <pmichaud> any estimates for how many have made it into t/spec ?

[15:18] <[particle]> looking now...

[15:18] <moritz_> by sheer file size a quarter to third

[15:18] <pmichaud> that's probably good enough

[15:19] <pmichaud> since it's a rapidly moving target anyway

[15:19] <moritz_> not as rapidly as I'd hoped for

[15:19] <moritz_> but still not bad

[15:20] <[particle]> ack plan t/spec -wh

[15:20] <[particle]> should be a way to add those quickly enough

[15:23] *** barney joined
[15:24] *** icwiener_ left
[15:25] *** icwiener joined
[15:28] *** icwiener left
[15:38] <[particle]> there are at least 4500 tests in t/spec atm

[15:39] <[particle]> ack plan t/spec -wh | perl -nle"$_=~m/(\d+)/;$x+=$1;print$x"

[15:40] <[particle]> ...

[15:40] <[particle]> 4525

[15:40] <[particle]> running that on t/ gives 19389

[15:41] <moritz_> ok, between 1/5 and 1/4

[15:41] <pmichaud> perfect

[15:41] <[particle]> some plan()s have expressions in them, so it's not exact

[15:41] *** Auzon joined
[15:42] <moritz_> aye

[15:42] <pmichaud> I'm saying ~19,000 in pugs and ~5,000 in t/spec

[15:42] <pmichaud> we're within 10% :-)

[15:42] <pmichaud> (er, those numbers are within 10% of the actual numbers)

[15:42] <[particle]> yep

[15:43] <[particle]> btw stevan says the t/oo/from_moose/ tests should be removed--they're way too out of date

[15:44] <pmichaud> stevan++

[15:44] <pmichaud> are all of the tests in t/   for Perl 6, or do some of them test other things (such as moose)?

[15:44] <moritz_> [particle]: will you rip them out? or should I?

[15:44] <stevan_> [particle]: soon we will have better tests for you guys

[15:46] <moritz_> stevan_: if you want to be the hero of the realm, formulate them language agnostic ;-)

[15:47] <[particle]> ok, 18864 tests in pugs/t/ now

[15:47] <pugs_svnbot> r21130 | particle++ | these are way out of date, and will be updated soon, so sayeth the Moooooooose

[15:47] <stevan_> moritz_: one second, let me clone myself first ...

[15:47] <moritz_> ;)

[15:47] <[particle]> don't forget to clone your threads

[15:47] <[particle]> we don't need another ingy around here

[15:47] <pugs_svnbot> r21131 | moritz++ | [t] operators/inc.t: shanged tests from dies_ok to eval_dies_ok

[15:48] <stevan_> moritz_: the idea is that we will move the class defs into their own files, and associate them with some .pl files that run the actual tests

[15:48] <stevan_> they we have small test-runner that basically is the code for your .t file

[15:48] <moritz_> sounds sane

[15:48] <stevan_> so while they wont be language agnostic,.. they will be cleaned up such that mechanical translation should be easier

[15:53] <pugs_svnbot> r21132 | moritz++ | [spec] moved operators/inc.t to spec/. rakudo says "Null PCM access in type()"

[15:54] <moritz_> t/operators/repeat.t sys that $str x -1 should be '', rakudo say "Cannot repeat with negative arg"

[15:54] <moritz_> the former seems to be more in line with perl 5

[15:54] <pmichaud> is there a ticket for the Null PMC access in type() yet?  

[15:55] <pmichaud> okay, we can fix repeat.  Feel free to file a ticket for it -- it should be an easy fix.

[15:55] <pmichaud> I need to refactor the Str class anyway.

[15:55] <moritz_> pmichaud: Ovid++ reported something with the same error message

[15:55] <pmichaud> okay.  That probably needs to be passed over to jonathan++

[15:56] <pmichaud> I'll see if I can find it and do that.

[16:02] <pugs_svnbot> r21133 | moritz++ | [spec] moved operators/repeat.t to t/spec/, fixed POD

[16:05] *** renormalist joined
[16:06] <moritz_> rakudo: say ( (1, 2) xx 2 ).perl

[16:06] <p6eval> rakudo 28901: OUTPUT[[1, 2, [1, 2]]␤]

[16:06] <moritz_> that's so wrong ;)

[16:07] <pmichaud> yes, lists of captures has an issue with it.  I have no idea what that problem is right now, but since I just updated Array handling it might be ripe for fixing now.

[16:07] <pmichaud> pugs:  say ( (1,2) xx 2 ).perl

[16:07] <p6eval> pugs: OUTPUT[(1, 2, 1, 2)␤]

[16:08] <pmichaud> I might just get infix:<xx> to work in list context for now and worry about slicing context a bit later.

[16:08] <pugs_svnbot> r21134 | moritz++ | [spec] fudged and corrected S03-operators/repeat.t

[16:09] <moritz_> funny, rakudo has infix:<x=>, but no infix:<xx=>

[16:09] <pmichaud> STD.pm constructs the inplace assignment operators from the infixes automatically -- at present Rakudo has to identify them individually

[16:10] <pmichaud> that will undoubtedly be fixed as part of the STD.pm convergence effort.

[16:11] *** Auzon left
[16:12] <rakudo_svn> r28902 | moritz++ | [rakudo] one more file for spectest_regression

[16:15] *** vixey joined
[16:15] <pugs_svnbot> r21135 | moritz++ | [spec] moved ternary.t to spec/

[16:16] *** Auzon joined
[16:16] <pugs_svnbot> r21136 | moritz++ | [spec] fixed (aka removed) POD from ternary.t

[16:16] *** kanru joined
[16:19] <pugs_svnbot> r21137 | moritz++ | [spec] fudged ternary.t

[16:22] <pugs_svnbot> r21138 | moritz++ | [spec] S29-list/grep.t fixed adverbial closure test

[16:23] <rakudo_svn> r28903 | moritz++ | [rakudo] tests for ternary now in spectest_regression

[16:23] *** barney left
[16:26] *** cathyal left
[16:26] <moritz_> pmichaud: I see you added "### refactored to t/spec/S03-operators/equality.t" note to some tests - is there a good reason not to delete those?

[16:27] <pmichaud> you can delete them now.  I was trying to keep people from saying "oh, we need equality tests here too" and duplicating the tests.

[16:27] <moritz_> ok

[16:27] <pmichaud> might leave a note that "tests for equality are in S03-operators/equality.t" though.

[16:28] <moritz_> don't think it's worth, since the tests are moving away from plain t/ anyway

[16:28] <pmichaud> that's fine.  

[16:31] <pugs_svnbot> r21139 | moritz++ | [t] removed redundant tests

[16:34] *** masak left
[16:34] <pugs_svnbot> r21140 | moritz++ | [spec] moved short_circuit.t to spec/, fixed POD, shortened test descriptions

[16:37] <pugs_svnbot> r21141 | moritz++ | [spec] fudged short-circuit.t

[16:38] <moritz_> moving tests to spec/ and fudging is much more rewarding when it leads to inclusion into  spectest_regression

[16:38] <moritz_> I just see one problem as the test suite grows: speed

[16:40] <pmichaud> we'll be fixing that soon, too.  I expect within the month.

[16:40] <pmichaud> we can quickly shave about 60% on each test file by precompiling Test.pm

[16:40] <moritz_> YaY

[16:40] <[particle]> what's the remaining hurdle for that?

[16:40] <pugs_svnbot> r21142 | moritz++ | [spec] added ticket number to fudge message in repeat.t

[16:40] <pmichaud> [particle]: hurdle*s*, plural

[16:41] <pmichaud> at the moment the big hurdle is lexical handling

[16:41] <pmichaud> after that it'll be :load :init handling

[16:41] <pmichaud> but I can't fix :load :init until lexicals get resolved

[16:42] <pmichaud> every time I try to do something with fixing Rakudo to handle precompiled modules better, it comes back to an issue with lexical bugs in parrot

[16:42] <moritz_> should +'Inf' return a numeric Inf?

[16:42] <[particle]> obviously they're undertested

[16:42] <[particle]> numeric Inf is 'Inf' no?

[16:43] <moritz_> it seems rakudo doesn't do Inf at all

[16:43] <moritz_> [particle]: think so

[16:44] <[particle]> parrot doesn't handle Inf and NaN in a consistently yet

[16:44] <[particle]> it relies on platform-dependent representation

[16:44] <[particle]> s/representation/behavior/

[16:44] <pmichaud> afk, errands

[16:46] <pugs_svnbot> r21143 | moritz++ | [spec] moved numify.t to spec/, started fudging

[16:53] *** renormalist left
[16:56] *** nipotaway is now known as nipotan

[17:03] * ruoso just realised that the default object dispatcher for Perl 6 in SMOP will also be written in Perl 6

[17:04] <ruoso> method dispatch($meta: $object, $identifier, $capture --> Any)

[17:04] <ruoso> in the metaclass

[17:04] <ruoso> it would be nice if someone could write a dispatch implementation in smop/src-s1p/P6Meta.pm

[17:04] <moritz_> why --> Any and not --> Object?

[17:05] <ruoso> moritz_, not sure... maybe it should be --> Object

[17:06] <rakudo_svn> r28906 | moritz++ | [rakudo] two more files for spectest_regression

[17:06] <ruoso> it's cool that as I make progress in the low-level of SMOP, more things are to be defined in a higher level...

[17:07] <ruoso> it's also cool that as this high-level parts are written, I can have a more precise idea of exactly which minimum features the runtime needs

[17:08] *** luqui left
[17:10] <moritz_> ruoso: how on earth could dispatch() written in perl 6 work? Surely it has to call methods, and take care not loop

[17:10] <ruoso> by using the REPR api

[17:10] <ruoso> it has means of introspecting the actual object contents

[17:11] <ruoso> and all that is available by method calls only...

[17:11] <ruoso> since the same metaclass can be used by different representations...

[17:12] <moritz_> so the methods for introspection would be dispatched by a different dispatcher?

[17:12] <ruoso> yes, because the dispatcher is always object-specific

[17:12] <ruoso> then I can break the loop by having low-level objects behaving as high-level objects

[17:13] <ruoso> the REPR API is usually implemented directly in C

[17:13] <ruoso> actually.... in p6opaque, the REPR calls are intercepted by the C code, and only the other calls go to "dispatch"

[17:14] <ruoso> but from the outside, they're all simply method calls

[17:15] <ruoso> moritz_, want to write a dispatcher? ;) ;) ;) ;)

[17:19] <moritz_> ruoso: I considered it. But I think I understand too little of introspection and mmd

[17:20] * ruoso understands less

[17:20] <ruoso> ;)

[17:21] <ruoso> maybe that's a task for TimToady ;)

[17:21] <moritz_> hey, you know of the REPR API, I don't ;)

[17:21] * ruoso hides

[17:25] *** barney joined
[17:31] *** hercynium left
[17:32] *** hercynium joined
[17:44] *** hercynium left
[17:44] *** vixey left
[17:44] *** justatheory left
[17:44] *** japhb left
[17:44] *** buu left
[17:47] *** hercynium joined
[17:47] *** vixey joined
[17:47] *** justatheory joined
[17:47] *** japhb joined
[17:47] *** buu joined
[17:47] *** buu_ joined
[17:48] *** buu left
[18:00] *** rindolf joined
[18:03] *** ludan left
[18:07] *** pmurias joined
[18:09] <pmurias> ruoso: hi, it great that you started your grant ;)

[18:09] *** ruoso left
[18:14] *** pmurias left
[18:16] *** pmurias joined
[18:19] *** peepsalot joined
[18:23] <pmurias> @tell ruoso the alternative sm0p parser produces code for the stuff that was in KP6Grammar

[18:23] <pmurias> nfffn

[18:23] <pmurias> sorry

[18:28] *** pmurias left
[18:30] *** wknight8111 left
[18:30] *** wknight8111 joined
[18:33] *** jhorwitz joined
[18:38] *** perlbot joined
[18:41] *** buu_ is now known as buu

[18:46] *** armagad joined
[18:48] <ingy> hola

[18:48] <moritz_> an ingy!

[18:48] <moritz_> hi

[18:49] <ingy> hi moritz_ 

[18:49] <ingy> I R A P 6 PORGAMMR!

[18:51] <ingy> anyone here use TimToady's new parser on a regular basis?

[18:51] <moritz_> ingy: pixie (a clone of "elf") does

[18:52] <ingy> url?

[18:52] <ingy> who hacks on pixie?

[18:52] <moritz_> ingy: pmurias does

[18:52] <ingy> thanks

[18:52] <moritz_> ingy: url is misc/pixie in the pugs repo

[18:52] <moritz_> pixie: say "hi"

[18:52] <moritz_> .oO( hope it works )

[18:52] <p6eval> pixie: No output (you need to produce output to STDOUT)

[18:53] <moritz_> seems to be b0rked atm, and pmurias is on vacation

[18:53] <ingy> moritz_: what is pixie in a nutshell? just a bot?

[18:53] *** armagad left
[18:53] <moritz_> ingy: no, it's a mostly bootstrapped compiler

[18:54] <moritz_> ingy: p6eval is just a frontend, as it is to about every other implementation we have ;)

[18:54] <ingy> perl 6 compiler?

[18:54] * DietCoke hopes ingy has pants on.

[18:54] <ingy> undies

[18:54] * ingy works from home

[18:54] <moritz_> ingy: aye

[18:54] <DietCoke> better'n'nothing.

[18:54] <ingy> :)

[18:55] *** meppl joined
[18:56] * ingy is writing a new porgamming lang

[18:56] <ingy> hoping to use p6 stuff for parser

[18:57] <moritz_> ingy: PGE is fairly stable. It's on parrot, but uses (mostly) Perl 6 rules

[18:57] *** polettix joined
[18:57] <ingy> well my backend code is already written

[18:57] <ingy> a long long time ago :)

[19:01] *** icwiener joined
[19:14] *** Southen joined
[19:19] *** Southen_ left
[19:52] *** wknight8111 left
[19:57] *** wknight8111 joined
[19:57] *** Jedai left
[20:03] <moritz_> rakudo: say Bool::True

[20:03] <p6eval> rakudo 28911: OUTPUT[1␤]

[20:04] <moritz_> rakudo: say <1 4 5>

[20:05] <p6eval> rakudo 28911: OUTPUT[./parrot: error while loading shared libraries: /home/evalenv/parrot/blib/lib/libparrot.so.0.6.3: invalid ELF header␤]

[20:05] *** meppl left
[20:05] <moritz_> rakudo: say <1 4 5>

[20:05] <p6eval> rakudo 28911: OUTPUT[145␤]

[20:06] <moritz_> rakudo: say <<1 2 3>>

[20:06] <p6eval> rakudo 28911: OUTPUT[Statement not terminated properly at line 1, near ">"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤]

[20:08] <moritz_> rakudo: my Int $x = 0; say $x.does(Int)

[20:08] <p6eval> rakudo 28911: OUTPUT[Method 'does' not found for invocant of class 'Int'␤current instr.: '_block11' pc 118 (EVAL_13:51)␤]

[20:08] <moritz_> rakudo: my Int $x = 0; say $x.isa(Int)

[20:09] <p6eval> rakudo 28911: OUTPUT[1␤]

[20:10] *** hercynium left
[20:12] <pugs_svnbot> r21144 | moritz++ | [spec] added simple tests for Enums, for jonathan's next rakudo day

[20:13] *** hercynium joined
[20:15] <pugs_svnbot> r21145 | moritz++ | [spec] moved S12-enums to spec/, mistakenly added it to t/ first. moritz--

[20:15] *** rindolf left
[20:15] <Auzon> moritz_: I think there are some enum tests already lurking about

[20:17] *** hercynium left
[20:17] *** icwiener left
[20:17] *** perlbot left
[20:17] *** barney left
[20:17] *** elmex left
[20:17] *** apeiron left
[20:17] *** Coleoid left
[20:17] *** speckbot left
[20:17] *** avar left
[20:17] *** rhr left
[20:17] *** lumi left
[20:17] *** jrockway left
[20:17] <moritz_> Auzon: yes, I let me inspire by them. But the test too much at once to be of any real use for jonathan, I think

[20:18] <moritz_> actually they are quite thoroughly tested, it seems

[20:18] <moritz_> the tests seem logically fine, but have a lot of cruft

[20:19] <moritz_> I'm going to remove a ton of evals ands :todo<feature>s

[20:19] *** hercynium joined
[20:19] *** icwiener joined
[20:19] *** perlbot joined
[20:19] *** barney joined
[20:19] *** elmex joined
[20:19] *** apeiron joined
[20:19] *** Coleoid joined
[20:19] *** speckbot joined
[20:19] *** avar joined
[20:19] *** rhr joined
[20:19] *** jrockway joined
[20:19] *** lumi joined
[20:19] *** [particle]1 joined
[20:20] *** Coleoid_ joined
[20:21] <moritz_> from S12:     $x does day;

[20:21] *** Alias_ joined
[20:21] <moritz_> does that mean we have an inifx:<does>?

[20:21] <Auzon> brb

[20:21] <Auzon> and yes, there is a does somewhere

[20:21] *** Auzon left
[20:22] <moritz_> scary ;)

[20:22] <moritz_> rakudo: say 1.2 !~~ Int

[20:22] <p6eval> rakudo 28916: OUTPUT[1␤]

[20:27] <pugs_svnbot> r21146 | moritz++ | [spec] moved oo/enum.t to spec/

[20:29] *** iblechbot left
[20:33] <pugs_svnbot> r21147 | moritz++ | [spec] updated t/state.t - need more review before moving it to spec/

[20:34] *** Coleoid left
[20:34] <moritz_> rakudo: say  ('' eq ('' & ''))

[20:34] *** [particle] left
[20:35] <p6eval> rakudo 28917: OUTPUT[1␤]

[20:35] <moritz_> rakudo: say  ('' eq ('' & 'd'))

[20:35] <p6eval> rakudo 28917: OUTPUT[0␤]

[20:36] *** Exodist joined
[20:39] *** rindolf joined
[20:39] <rindolf> Hi all.

[20:39] <rindolf> I'm so unbeliavably pissed off atm!

[20:40] <rindolf> Somebody should calm me down.

[20:40] <moritz_> rindolf: I think that's easier for somebody in RL

[20:40] <rindolf> moritz_: maybe.

[20:41] <rindolf> moritz_: first KDE 3 got hanged up on Cooker. Twice!

[20:41] <rindolf> moritz_: then I tried to talk about my @perl.org banning on irc.perl.org and Robrt-- was not there.

[20:41] <rindolf> moritz_: and now he first banned and then K-lined me.

[20:42] <rindolf> moritz_: so far he seems like he has a missing screw.

[20:42] <rindolf> Well, maybe I'm more calm now.

[20:42] <rindolf> I took a few deep breathes.

[20:45] <pugs_svnbot> r21148 | moritz++ | [spec] started to move junction tests (and upate POD). Much more work need

[20:46] *** hercynium left
[20:54] *** ruoso joined
[21:03] *** hercynium joined
[21:04] *** icwiener left
[21:09] <pugs_svnbot> r21149 | moritz++ | [spec] fudged S03-junctions/misc.t

[21:15] * rindolf is doing CBT

[21:16] <vixey> hey rindolf

[21:17] *** hercynium left
[21:17] <pugs_svnbot> r21150 | moritz++ | [spec] a bit more fudge fiddling

[21:17] <rakudo_svn> r28921 | moritz++ | [rakudo] first junction tests in spectest_regression

[21:18] <rindolf> Hi vixey 

[21:19] <moritz_> d'oh, t/junction/associative.t seems totally borked to me

[21:19] <moritz_> it assumes that Junction.values returns the item in the order they were put it

[21:21] <rindolf> TimToady: here?

[21:21] <moritz_> even more "d'oh', Junction.values is neither in in S03 not in S29

[21:21] *** Auzon joined
[21:22] *** TJCRI left
[21:24] *** jhorwitz left
[21:24] <pugs_svnbot> r21151 | moritz++ | [t] junctions/associative.t is b0rked

[21:24] <moritz_> rakudo: +(1..2)

[21:24] <Auzon> moritz_: Am I correct in assuming that p5=> doesn't quote the LHS like the Perl 5 version?

[21:24] <p6eval> rakudo 28922: RESULT[2]

[21:25] <moritz_> Auzon: I think it does (otherwise it would just be a comma)

[21:26] <moritz_> on the other hand, infix:«p5=>» doesn't do any special handling in STD.pm

[21:26] <moritz_> so actually I dunno

[21:26] <Auzon> S03:1465 says that it's the same as a comma

[21:27] <moritz_> "This operator, which behaves exactly like the Perl 5 fatarrow in being equivalent to a comma"

[21:27] <moritz_> I interpret that as "it constructs a list, not a pair"

[21:28] <moritz_> and the p5 fatarrow does quote its LHS

[21:30] *** ruoso left
[21:30] *** Southen left
[21:30] *** agentzh left
[21:30] *** broquaint left
[21:30] *** SamB left
[21:30] *** Lunchy left
[21:30] *** diakopter left
[21:30] *** wolverian left
[21:30] *** TimToady left
[21:30] *** buubot left
[21:30] <Auzon> perl6: say (1,2) !~~ Pair

[21:30] <p6eval> elf 21151: OUTPUT[No viable candidate for call to multimethod infix__33_126(#,#,$) at (eval 123) line 3␤ at ./elf_f line 3861␤]

[21:30] <p6eval> ..kp6 21151: OUTPUT[syntax error at position 10, line 1 column 10:␤say (1,2) !~~ Pai␤          ^ HERE␤]

[21:30] <p6eval> ..pugs: OUTPUT[1␤]

[21:30] <p6eval> ..rakudo 28922: OUTPUT[1␤]

[21:30] *** TimToady joined
[21:30] *** ruoso joined
[21:30] *** Southen joined
[21:30] *** agentzh joined
[21:30] *** broquaint joined
[21:30] *** SamB joined
[21:30] *** Lunchy joined
[21:30] *** buubot joined
[21:30] *** wolverian joined
[21:30] *** diakopter joined
[21:30] *** irc.freenode.net sets mode: +o TimToady

[21:30] <rindolf> vixey: have you contributed stuff to Parrot lately?

[21:31] <moritz_> Auzon: I suppose you've seen http://rakudo.de/progress.png (or the similar graph rakudo.org)? part of it is your progress ;-)

[21:32] <Auzon> Yep, I saw it on one (or more ;)) RSS feed

[21:33] <Auzon> I'm simply amazed by everyone++'s progress

[21:34] <moritz_> .oO( t/junctions/chained_operators.t - what's the connection between file name and contents? )

[21:35] * moritz_ decides that working on t/junction/* isn't very productive atm

[21:36] <moritz_> I'd actually have to *think* ;-)

[21:37] <Auzon> moritz_: In your graph, the yellow is mostly fudge, correct?

[21:37] <moritz_> Auzon: I think *all* of it is fudge ;)

[21:37] *** barney left
[21:40] <moritz_> I'm running tools/test_summary.pl now, and it seems that most fudges are spread out over various files

[21:41] <moritz_> which mean it's probably mostly done right

[21:41] <Auzon> great :)

[21:42] <moritz_> well, exp.t passes 2 and skips 44

[21:43] *** meppl joined
[21:43] <pmichaud> Junction.values was discussed in p6l, I believe.

[21:43] <moritz_> but that should be fixed as soon as somebody applies bacek++'s patches for various Complex methods, including prefix:<->

[21:44] <moritz_> pmichaud: pretty much everything has been discussed on p6l ;-)

[21:45] <moritz_> pmichaud: what do we do with #56230 ?

[21:45] <moritz_> (bacek's patches for Complex stuff)

[21:46] <vixey> rindolf, no never

[21:46] <pmichaud> I was thinking that bacek was going to move some of the operators into src/classes/Complex.pir, but apparently he didn't do that yet.

[21:46] <pmichaud> i.e., I think the complex stuff belongs in complex.pir, as opposed to the main operators file.

[21:46] <moritz_> I can do some of the moving, and apply it

[21:47] *** cjfields joined
[21:47] <moritz_> the question is if we stick to multis (for example for exp), or use a :multi(_) with a pmc as the param

[21:47] <Auzon> perl6: my @arr = 1 .. 4; my %hash = @arr; %hash.perl.say

[21:47] <pmichaud> what do we do if we get a pmc type that doesn't understand the 'exp' opcode?

[21:48] <p6eval> elf 21151: OUTPUT["1E0"␤]

[21:48] <p6eval> ..kp6 21151: OUTPUT[syntax error at position 45, line 1 column 45:␤my @arr = 1 .. 4; my %hash = @arr; %hash.perl.sa␤                                             ^ HERE␤]

[21:48] <p6eval> ..pugs: OUTPUT[\(\("1", 2), \("3", 4))␤]

[21:48] <p6eval> ..rakudo 28922: OUTPUT[{"1" => 2, "3" => 4}␤]

[21:48] <moritz_> elf++ # most creative output ;)

[21:49] <cjfields> perl6 : for [1..3, 4..6] { say $_.WHAT}

[21:49] <Auzon> Yeah... I don't get it. Pugs's output is interesting as well

[21:49] <cjfields> perl6: for [1..3, 4..6] { say $_.WHAT}

[21:49] <p6eval> elf 21151: OUTPUT[Array␤]

[21:49] <p6eval> ..kp6 21151: OUTPUT[syntax error at position 4, line 1 column 4:␤for [1..3, 4..6] { say $_.WHAT␤    ^ HERE␤]

[21:49] <p6eval> ..pugs: OUTPUT[Array␤]

[21:49] <p6eval> ..rakudo 28922: OUTPUT[Int␤Int␤Int␤Range␤]

[21:49] <cjfields> Rakudo's wrong

[21:50] <moritz_> and very interesting ;-)

[21:50] <cjfields> perl6: for [1..3, 4..6] { say $_}

[21:50] <p6eval> elf 21151: OUTPUT[123456␤]

[21:50] <p6eval> ..kp6 21151: OUTPUT[syntax error at position 4, line 1 column 4:␤for [1..3, 4..6] { say $_␤    ^ HERE␤]

[21:50] <p6eval> ..pugs: OUTPUT[1 2 3 4 5 6␤]

[21:50] <p6eval> ..rakudo 28922: OUTPUT[1␤2␤3␤456␤]

[21:51] <pmichaud> I'm not sure that any of them are correct.  :-)

[21:51] <moritz_> I think that for [...] -> {...} should always do only one iteration

[21:51] <pmichaud> seems to make sense

[21:52] <pmichaud> I bet I can fix that one.

[21:52] <cjfields> So what would be the expected answer

[21:52] <pmichaud> if only one iteration, then pugs has it correct

[21:52] <pmichaud> "1 2 3 4 5 6\n"

[21:52] <cjfields> That's what I thought

[21:52] <moritz_> OTOH, how would one iterate over an array ref?

[21:52] <moritz_> for @$ref -> { stuff } ?

[21:52] <pmichaud> perhaps   for =[...]   ?

[21:52] <Auzon> for @ [...] ?

[21:53] <pmichaud> prefix:<=> is the standard "iterator operator"

[21:53] <pmichaud> rakudo:  for @ [1..3,4..6] { say $_; }

[21:53] <p6eval> rakudo 28922: OUTPUT[1␤2␤3␤456␤]

[21:53] <pmichaud> oh, that's weird.

[21:54] <cjfields> rakudo: for [1..3, 4..6, 7..9] { say $_.WHAT}

[21:54] <p6eval> rakudo 28922: OUTPUT[Int␤Int␤Int␤Range␤Range␤]

[21:54] <pmichaud> rakudo:  say @ [1..3, 4..6]

[21:54] <p6eval> rakudo 28922: OUTPUT[1 2 3 4 5 6␤]

[21:54] <pmichaud> rakudo:  say (@ [1..3, 4..6]).WHAT

[21:54] <p6eval> rakudo 28922: OUTPUT[Array␤]

[21:55] <pmichaud> that looks a little funny to me.

[21:55] <pmichaud> rakudo:  say (list [1..3, 4..6]).WHAT

[21:55] <p6eval> rakudo 28922: OUTPUT[List␤]

[21:55] <pmichaud> rakudo:  say [1..3,4..6].list.WHAT;

[21:55] <p6eval> rakudo 28922: OUTPUT[Array␤]

[21:56] <pmichaud> that's definitely not what I expect.

[21:56] <cjfields> rakudo: say @ [1..3, 4..6].elems

[21:56] <p6eval> rakudo 28922: OUTPUT[6␤]

[21:57] <pmichaud> oh, hrm.

[21:58] <cjfields> rakudo: for 1..3, 4..6 { say $_.WHAT}

[21:58] <p6eval> rakudo 28923: OUTPUT[Int␤Int␤Int␤Range␤]

[21:59] <cjfields> same thing

[21:59] <moritz_> cjfields: make it a test, if it's not there in the suite yet

[21:59] <pmichaud> rakudo:  for (1..3, 4..6) { say $_.WHAT }

[21:59] <p6eval> rakudo 28923: OUTPUT[Int␤Int␤Int␤Range␤]

[21:59] <pmichaud> rakudo:  say 1..3, 4..6;

[21:59] <p6eval> rakudo 28923: OUTPUT[1234 5 6␤]

[22:00] <cjfields> it's only expanding the first Range; any after are not expanded

[22:00] <pmichaud> obviously a problem with listcontext there.

[22:00] <cjfields> yep

[22:00] <cjfields> moritz_: where should the test go?  

[22:01] <Auzon> Does it only happen with 'for'? If so, probably t/statements/for.t

[22:01] <pmichaud> there are two problems here

[22:01] <pmichaud> one is what is happening with ranges inside of list contexts

[22:02] <pmichaud> i.e.,  say 1..3, 4..6;   should result in 1\n2\n3\n4\n\5\n6\n

[22:02] <pmichaud> the other problem is how 'for' is iterating over Array

[22:02] <pmichaud> perl6:  for [1,2,3,4,5,6] { say $_; }

[22:02] <p6eval> elf 21151: OUTPUT[123456␤]

[22:02] <p6eval> ..kp6 21151: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤     ]

[22:02] <p6eval> ..pugs: OUTPUT[1 2 3 4 5 6␤]

[22:02] <p6eval> ..rakudo 28923: OUTPUT[1␤2␤3␤4␤5␤6␤]

[22:02] <pmichaud> pugs is correct.

[22:03] <pmichaud> (assuming that we think of iterating over an Array as being a single element, which I think it should be.)

[22:03] <cjfields> I agree

[22:03] <moritz_> t/statements/for.t for that one, as Auzon++ suggested

[22:03] <moritz_> the other one... do we have range tests?

[22:04] <pmichaud> yes, in range.t, right?

[22:04] <Auzon> /t/spec/S03-operators/range.t

[22:04] <Auzon> or maybe t/spec/S02-builtin_data_types/range.t

[22:04] * Auzon looks to see the difference

[22:05] <pmichaud> I think it's a question of whether we're testing the operator or the type

[22:06] <cjfields> So should 'for 1..3, 4..6 { say $_.WHAT}' give a single Array, or two Ranges?

[22:06] <pmichaud> neither.  six Ints

[22:06] <cjfields> So it should expand

[22:06] <pmichaud> yes, because it's in list context.

[22:06] <moritz_> yes

[22:06] <cjfields> the ranges

[22:06] *** scrottie left
[22:07] <cjfields> That's what I thought

[22:08] *** BinGOs_ joined
[22:09] <cjfields> perl6: for [1..3] { say $_.WHAT}

[22:09] <cjfields> I think I killed it

[22:10] <p6eval> elf 21151: OUTPUT[Array␤]

[22:10] <p6eval> ..kp6 21151: OUTPUT[syntax error at position 4, line 1 column 4:␤for [1..3] { say $_.WHAT␤    ^ HERE␤]

[22:10] <p6eval> ..pugs: OUTPUT[Array␤]

[22:10] <p6eval> ..rakudo 28923: OUTPUT[Int␤Int␤Int␤]

[22:10] <Auzon> No, p6eval seems slower recently

[22:10] <cjfields> perl6: for [1..3], [4..6] { say $_.WHAT}

[22:10] <p6eval> elf 21151: OUTPUT[Array␤Array␤]

[22:10] <p6eval> ..kp6 21151: OUTPUT[syntax error at position 4, line 1 column 4:␤for [1..3], [4..6] { say $_.WHAT␤    ^ HERE␤]

[22:10] <p6eval> ..pugs: OUTPUT[Array␤Array␤]

[22:10] <p6eval> ..rakudo 28923: OUTPUT[sh: ./parrot: Permission denied␤]

[22:11] <Auzon> rakudo: 1.say

[22:11] <p6eval> rakudo 28923: OUTPUT[1␤]

[22:11] <cjfields> rakudo: for [1..3], [4..6] { say $_.WHAT}

[22:11] <p6eval> rakudo 28923: OUTPUT[Array␤Array␤]

[22:11] <cjfields> ?!?

[22:11] <cjfields> definitely a list context issue

[22:11] <moritz_> that last one is right

[22:11] <cjfields> yes, but...

[22:12] <cjfields> rakudo: for [1..3] { say $_.WHAT}

[22:12] <p6eval> rakudo 28923: OUTPUT[Int␤Int␤Int␤]

[22:12] <pmichaud> right

[22:12] <pmichaud> the comma is imposing list context

[22:12] <pmichaud> when the comma isn't there, the for statement is defaulting to item context, which is wrong.

[22:12] <Auzon> rakudo: for ([1..3],) { say $_.WHAT}

[22:12] <p6eval> rakudo 28923: OUTPUT[Array␤]

[22:12] <cjfields> bingo

[22:13] <pmichaud> yes.  sorry for not explaining it earlier.  I even know how to fix it, but I'm trying to figure out why 1..3,4..6 isn't working first.  :-)

[22:13] *** BinGOs__ joined
[22:13] <cjfields> sorry to unload that one on you.  

[22:14] *** BinGOs left
[22:15] <pmichaud> testing spectest_regression now with fix for 1..3,4..6

[22:17] * moritz_ runs spectest_regression with the Complex patches applied 

[22:20] *** BinGOs__ left
[22:20] <rakudo_svn> r28924 | moritz++ | [rakudo] Implement prefix:+, prefix:-, sqrt() and exp() for Complex.

[22:20] <rakudo_svn> r28924 | moritz++ | Patch curtesy of bacek++, Vasily Chekalkin [email@hidden.address]
[22:21] <pugs_svnbot> r21152 | moritz++ | [spec] unfudge complex.t

[22:22] <rakudo_svn> r28925 | moritz++ | [rakudo] S29-num/complex.t is now pure. bacek++

[22:24] *** bacek joined
[22:25] *** scrottie joined
[22:25] <scrottie> dammit.  missed the reply to ingy's "anyone using TimToady's p6?".

[22:25] *** meppl left
[22:26] <moritz_> scrottie: that's what the good lord invent IRC logs for ;-)

[22:26] <moritz_> scrottie: last URL in /topic

[22:31] <Auzon> moritz_++ # irclog

[22:32] <rakudo_svn> r28926 | pmichaud++ | [rakudo]:

[22:32] <rakudo_svn> r28926 | pmichaud++ | * Fix list context flattening when a lazy element (e.g., a Range)

[22:32] <rakudo_svn> r28926 | pmichaud++ |   increases the number of items in the resulting list.

[22:32] <rakudo_svn> r28926 | pmichaud++ | * cjfields++ for finding this and providing useful test examples.

[22:34] *** BinGOs_ left
[22:37] *** chris2 left
[22:39] <pugs_svnbot> r21153 | moritz++ | [spec] fixed tests for return of failed Str.index(). bacek++, pmichaud++

[22:41] <moritz_> actually all of these builtins need to be tested with named arguments

[22:41] <pugs_svnbot> r21154 | moritz++ | [spec] tests for return type of index()

[22:42] <moritz_> so not only index($s1, $s2) but also index(string=>$s1, substring=>$s2)

[22:46] <Auzon> Can I safely .pop an item off the end of an infinite array?

[22:46] <moritz_> no, don't think so

[22:47] <moritz_> perhaps my @x = *..1; pop @x; might work

[22:48] *** FurnaceBoy joined
[22:48] <Auzon> also, does reverse(1 .. *) go from Inf down to 1?

[22:48] <moritz_> no

[22:49] <moritz_> it'll loop, I fear

[22:49] <moritz_> unless you have a clever reverse(Range) multi

[22:49] <Auzon> S03 says that reversed Ranges are still lazy

[22:49] <moritz_> maybe I should look into the specs before spilling bullshit ;)

[22:52] <Auzon> S03:2650 is the section that I'm looking at

[22:52] <Auzon> or it begins the section that is

[22:54] <pmichaud> a reversed range is still lazy, yes.

[22:54] *** c1sung joined
[22:54] <pmichaud> I suspect that reverse() will be implemented such that it (lazily) reverses all of the elements of the list

[22:55] <Auzon> S03 says that there is a .min, .max, .to, and .from, which would be enough to do that without iterating it.

[22:56] *** FurnaceBoy left
[22:56] <pmichaud> also need .by

[22:56] <Auzon> yeah, forgot that one.

[22:57] <pmichaud> but what would be interesting is whether    (1.1 .. 4.5).reverse    starts at 4.1 

[22:57] <pmichaud> (I'm assuming it will.)

[22:58] <Auzon> I don't think so, since (1.1 .. 4.5).pop gives 4.5, and reversing a range only flips the to and from.

[22:58] <pmichaud> actually,   1.1 .. 4.5   gives 4.1

[22:59] <Auzon> oh, but there's .min and .max. Not sure :-/

[22:59] *** cjfields left
[23:07] *** Lunchy left
[23:08] *** peepsalot left
[23:11] *** wknight8111 left
[23:11] *** Lunchy joined
[23:11] *** wknight8111 joined
[23:12] <pugs_svnbot> r21155 | moritz++ | [spec] unfudge passing tests

[23:15] *** lumi left
[23:26] *** cmarcelo left
[23:34] *** lumi joined
[23:41] *** Exodist left
[23:58] *** bacek_ joined
