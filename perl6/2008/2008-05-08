[00:00] *** Psyche^ joined
[00:00] *** Psyche^ is now known as Patterner

[00:17] *** felipe joined
[00:22] *** cls_bsd left
[00:30] *** cls_bsd joined
[00:32] *** r0bby joined
[00:38] *** cmarcelo left
[00:43] *** japhb left
[01:11] *** armagad left
[01:14] <pmichaud> TimToady: in regexes, is a colon followed by a word character always considered a modifier?

[01:15] <pmichaud> i.e., / \d+:abc /  parses as / [\d+] :abc /  and not  / [\d+:] abc /

[01:15] <pmichaud> (I think I asked this once before and got that answer, but want to reconfirm before committing to code.)

[01:16] *** BinGOs_ joined
[01:20] *** BinGOs_ left
[01:20] *** felipe left
[01:20] *** ting left
[01:20] *** diakopter left
[01:20] *** BinGOs left
[01:20] *** pravus left
[01:20] *** Gothmog_ left
[01:20] *** yath left
[01:21] *** BinGOs_ joined
[01:21] *** felipe joined
[01:21] *** BinGOs joined
[01:21] *** pravus joined
[01:21] *** ting joined
[01:21] *** diakopter joined
[01:21] *** Gothmog_ joined
[01:21] *** yath joined
[01:21] *** [particle1 joined
[01:23] <pmichaud> oops, that's a bad example, since +: is a token

[01:23] <pmichaud> so...

[01:23] <pmichaud> <xyz>:i /   parses as / [<xyz>] :i /   and not / [<xyz>:]  i /   ?

[01:28] *** japhb joined
[01:31] *** Ched- left
[01:36] *** fredlaforge joined
[01:37] *** BinGOs left
[02:57] *** cotto left
[02:57] *** cotto joined
[03:17] *** Psyche^ joined
[03:24] *** wknight8111 left
[03:26] *** justatheory left
[03:33] *** Patterner left
[03:33] *** Psyche^ is now known as Patterner

[03:35] *** justatheory joined
[03:59] *** eternaleye left
[04:32] *** armagad joined
[04:41] *** alanhaggai left
[04:45] *** nipotan is now known as nipotaway

[04:46] *** Psyche^ joined
[04:50] *** Eevee_ joined
[04:52] *** Eevee left
[04:57] *** Patterner left
[04:57] *** Psyche^ is now known as Patterner

[04:58] *** alester_ joined
[05:01] *** eternaleye joined
[05:02] *** fredlaforge left
[05:04] *** `nipra joined
[05:05] <syle> this perl6 stuff gonna be good? or is c/c++ still gonna beat the shit out of it for eventloop performance and such?

[05:29] *** alanhaggai joined
[05:30] *** [particle1 left
[05:34] *** alanhaggai_ joined
[05:37] <spinclad> definitely good.  i also note that your two questions are unrelated.

[05:37] *** meppl joined
[05:43] <TimToady> pmichaud: that's correct

[05:51] *** alanhaggai left
[06:23] *** masak joined
[06:32] *** carl_masak joined
[06:32] *** carl_masak left
[06:34] *** masak left
[06:34] *** masak joined
[06:44] *** zamolxes_ joined
[06:44] *** zamolxes left
[06:51] *** alester_ left
[06:53] *** BinGOs_ is now known as BinGOs

[06:54] <syle> give control over freeing memory, i can't stress this enough

[06:55] <syle> i cannot build a big app without that control

[06:55] <masak> syle: well, the general trend goes towards abstracting away memory management in programming languages

[06:56] <syle> i understand this , but that is for simple applications under 5 thousand lines of code

[06:57] <masak> I understand that your argument is that need of control is related to code size

[06:57] <masak> not sure I agree

[06:57] <masak> just as optimization has been successively delegated to compilers, memory management has been successively delegated to GCs

[06:58] <syle> i understand free it self is expensive, but if i set my own counters to free memory after so much memory allocation, is it so much to ask?

[06:58] *** elmex joined
[06:58] <masak> however, since you have very fine control over your VM (Parrot), you should most likely be able to reach into it and do such things

[06:58] <masak> ...I think

[06:59] <syle> thats a cop out, write the free routine and make everyone happy

[06:59] <masak> but we're not quite there yet where anyone can guarantee that

[07:00] <masak> syle: can you explain how your request would not affect everyone else

[07:00] <masak> more specifically, people who do not want to care about memory management

[07:01] <syle> people do CARE about memory management in big applications, are you saying perl6 should be some little scripting language incompentent of being used in big applications?

[07:01] <masak> no

[07:02] <masak> I'm saying that many successful programming languages where people do in fact write big applications do not allow manual freeing

[07:02] <moritz_> syle: they only care because existing garbage collecters aren't good enough (like perl5s ref counting)

[07:03] <syle> on moritz statement yes thats a big factor because of alot of c modules being loaded could keep references and become problematic if the reference has been weakened or not

[07:04] <syle> regardless perl loads alot of c modules etc, and if some asshole c author keeps a reference, we need better control to free that memory

[07:05] <masak> syle: what happens to the reference?

[07:05] <moritz_> that's the wrong approach. If there is a reference left, it could segfault

[07:06] <moritz_> the right approach is to make C extensions much easier and safer

[07:06] <masak> aye

[07:06] <syle> well for example, eventlib allows you to remove events, but not destroy them

[07:06] <moritz_> so that it's very unlikely that something like this happens

[07:06] <moritz_> Perl 6 won't fix buggy C software for you

[07:06] <moritz_> it simply can't do that

[07:07] <masak> syle: it's like this: if the Perl 6 design team said "ok, we'll add it" in reply to every request for features, Perl 6 would be a mess.

[07:07] <masak> I'm saying your feature request would mess up Perl 6 a little

[07:08] <moritz_> I'd say that if it turns out to be needed, somebody will write a module that does it

[07:08] <syle> omg, look, you malloc so much memory for a hash, allow someone to call free on that exact structure, that is not alot to ask

[07:08] <masak> at least until you show me how you can introduce it without also introducing segfaults, and worries for people who don't want to care

[07:08] *** iblechbot joined
[07:08] <masak> syle: sounds to me you just want Perl 6 to be C, period.

[07:08] <masak> get over it

[07:08] <syle> in a sense yes

[07:08] <syle> i want it to be better

[07:09] <syle> after using hashes , honestly who wants to be stuck using just arrays and scalars

[07:09] <masak> de gustibus not est disputandum -- you think it would be better, 99% of Perl programmers would hate it

[07:10] <syle> well i;d have to ask you what do 99% of perl programmers in your opinion use it for?

[07:10] <masak> Perl?

[07:10] <masak> most things, I guess

[07:10] <masak> including large stuff

[07:10] <syle> cgi, tcp , server apps, client apps, what?

[07:10] <masak> sure

[07:11] <moritz_> many many CGI and reporting applications

[07:11] <moritz_> GUI stuff

[07:11] <moritz_> everything.

[07:11] <moritz_> I even read about prototyping scanner drivers with perl the other day ;)

[07:11] <syle> i want perl6 to compete with being able to write a tcp server that can compete with c

[07:11] <masak> I disagree with the idea that lack of `free()` would prevent one from writing large-scale applications

[07:11] <syle> otherwise its useless

[07:12] <masak> as moritz_ says, at least wait until you've tried a good GC along with Perl

[07:12] <masak> you'd be surprised

[07:12] <syle> good GC i heard new one is up on google summer of code

[07:13] <moritz_> syle: most people are quite happy with writing applications in perl that are twice as slow as the C equivalent, but take 1/10 of the time to develop

[07:13] <masak> yes

[07:13] <syle> so thats a big maybe right

[07:13] <masak> syle: it always is with planned code

[07:13] <masak> Java/JVM has developed quite a bit over the years with regards to its GC

[07:13] <syle> moritz: i agree completely, but fuk if it was somewhat close to c at 1/10th of the code, you;d dominate the market wouldn;t you

[07:14] <masak> syle: that's not a sensible argument

[07:14] <moritz_> syle: at least the part of the world that doesn't hate sigils ;-)

[07:14] <masak> no-one argues that Perl should be unlike C just for the sake of it

[07:15] <masak> it's just unlike C where it's more like Perl :)

[07:15] <moritz_> and nobody argues that it should be fast

[07:15] <syle> well with processors getting faster, and becomming dual core etc, as long as you can compile it i guess in longrun it will survive is the consensus then right

[07:15] <moritz_> but most people think that speed shouldn't be top priority these days

[07:15] <masak> however, parallel constructs might be a big win

[07:16] <masak> gotta use those cores

[07:16] <syle> well with async applications , non blocking sockets for example, we are creating more demand on the cpu that memory than ever before

[07:17] <syle> s/that/than

[07:17] <masak> syle: exactly. so forget about your `free()` request :)

[07:18] *** justatheory left
[07:18] <syle> however if processors reach a point which i suspect that it becomes overly fast and memory stays as expensive as it is, then can run less perl on one box

[07:19] <syle> i realize with new 8 core cpus, that cpu will become less of an issue, but i have not seen memory drop in price

[07:20] <syle> but regardless there is still issue of i could run the same app with 10 times more threads in c than with perl

[07:21] <syle> i am a strong beleiver perl6 with compete with c, and we in the 20th century can stop using languages with shitty structures

[07:21] <moritz_> you're speaking about your bad experiences with Perl 5

[07:21] <moritz_> Perl 6 has taken great care not to fall into the same trap

[07:21] <moritz_> like much less global variables (so that threads stay light weight)

[07:22] <syle> perl 5.10 remove the byte code, that pissed me off

[07:22] <moritz_> byte code?

[07:22] <moritz_> what do you mean?

[07:22] <masak> syle: it's sort of a central assumption in Perl that references cannot dangle. that's why they're _references_, not pointers. if you don't solve that, Perl programmers will simply not be interested.

[07:22] <moritz_> it still uses byte code

[07:23] <syle> perl -MO=Bytecode,-H,-oa.out blah.pm

[07:23] <moritz_> well, nobody was able and willing to maintain that

[07:23] <moritz_> and fix it

[07:23] <moritz_> if you want it badly, you can get it in shape

[07:24] <moritz_> and if you maintain it, I'm sure people will use it

[07:24] <syle> ohhh christ, don;t put that on me, i;m already writing an app in perl5 thats over 7 thousand lines and not done yet

[07:24] <moritz_> but you can't expect volunteers to do exactly what you want

[07:24] <moritz_> ah, then don't complain

[07:25] <masak> syle: think of it! if you get control of the bytecode, you can add your own `free()`! :)

[07:25] <syle> lol well with parrot i think i can probably export my own free routines anyways

[07:25] <syle> i would just like to see it apart of core

[07:26] <moritz_> core is totally overrated

[07:26] <moritz_> in Perl 6 core will be just the things that you need to install new modules

[07:26] <masak> yeah, core is so 1990

[07:26] <masak> Perl 6 is more of a micro-core

[07:27] <syle> ok so standard has changed, usually you have core tree and devel tree

[07:28] <masak> not sure if that's the same nomenclature

[07:29] <moritz_> devel/maint and core/non-core are orthogonal concepts

[07:32] *** Lorn left
[07:32] <syle> Typical anti-egalitarian view

[07:33] <masak> huh?

[07:33] <masak> in what sense?

[07:38] *** Lorn joined
[07:40] <eternaleye> syle: devel/maint is stability/testedness index, core/non-core is essentiality index

[07:40] <eternaleye> AFAIU, it's only in core if it's needed to install things that aren't in core

[07:41] <masak> however, someone who has different opinions on what should be core is wont to call the division 'anti-egalitarian'

[07:42] *** masak left
[07:44] <syle> why wouldn't they?

[07:47] <syle> devel/maint is a means to an end regardless

[07:53] *** yewenbin joined
[07:53] <syle> and while everyone struggles to remember their comp sci debate classes, i;m just stating a free routine would be nice in case new author of GC routine doesn't work out well

[07:54] *** Schwern joined
[07:55] *** Lorn_ joined
[08:01] <eternaleye> syle: GC engines are modular and pluggable, feel free to implement one which hooks into the code being executed with free() routines invoking collection

[08:03] *** masak joined
[08:08] *** Lorn left
[08:25] *** Lorn joined
[08:35] *** meppl left
[08:36] *** Ched- joined
[08:38] *** Lorn_ left
[08:51] *** pmurias joined
[08:54] *** cls_bsd left
[08:56] <pmurias> syle: what exactly do you want to be avalible, do you want to force the gc to do garbadge collection or do you want to create dangling pointers and enjoy segfaults

[08:57] <pmurias> ?

[08:59] <pmurias> the perl5 style reference counting dosn't have to eat much more memory than c style manual memory allocation, you just can't avoid having a reference counter on most objects

[09:04] <pmurias> so doing manual memory allocation would help on the small scale only

[09:09] <masak> just the opposite of what syle wanted it for

[09:16] *** cls_bsd joined
[09:20] *** alanhaggai joined
[09:35] *** agentz1 left
[09:36] *** alanhaggai_ left
[09:36] *** agentzh joined
[09:42] *** buu left
[09:42] *** buu joined
[10:00] *** penk joined
[10:17] *** pmurias left
[10:20] *** yewenbin left
[10:53] *** pbuetow joined
[11:24] *** cls_bsd left
[11:25] *** chacha_chaudhry joined
[11:26] *** chacha_chaudhry left
[12:03] *** araujo left
[12:06] *** cls_bsd joined
[12:12] *** riffraff joined
[12:16] *** syle left
[12:20] *** pmurias joined
[12:21] *** rff joined
[12:29] *** riffraff left
[12:35] *** iblechbot left
[12:47] *** bockmabe_ left
[12:47] *** bocksp left
[12:54] *** agentzh left
[13:08] *** meppl joined
[13:11] *** agentzh joined
[13:21] *** iblechbot joined
[13:35] <moritz_> class Foo { my $a }; class Foo is also { say $a }; # is that allowed?

[13:36] <moritz_> I mean is "my $a" scoped to the block or to the class?

[13:38] *** eternaleye left
[13:39] <pmichaud> my is scoped to the block.

[13:39] <pmichaud> to scope to the class, use 'our'

[13:39] <pmichaud> er.

[13:40] <pmichaud> hmmm.  actually, would need our $a in both cases.

[13:40] <pmichaud> that's my guess, anyway.

[13:40] <moritz_> but then it's not a private variable anymore

[13:41] <moritz_> our $!a; ?

[13:41] <pmichaud> probably

[13:42] <pmichaud> from S12:      our %!cache is rw;  # generates no public accessor

[13:42] <moritz_> ah, cool

[13:43] <moritz_> it would be really useful if I could search the synopsis with queries like <siglil>'!'<identifier>, where <sigil> takes its definitioin from STD.pm ;-)

[13:44] <pmichaud> I just did a search of S12 for ' our '

[13:44] <pmichaud> yes, you're correct, it would be cool.  Someday it will even be possible :-)

[13:44] <pmichaud> when we have the p6-version of 'ack', certainly :-)

[13:44] <moritz_> aye

[13:46] <pmichaud> afk # appointment

[13:47] *** rff left
[13:53] *** cmarcelo joined
[14:07] *** TJCRI joined
[14:07] *** cls_bsd left
[14:13] *** cls_bsd joined
[14:13] *** chris2 joined
[14:17] *** riffraff joined
[14:35] *** rdice joined
[14:36] *** Ched- left
[14:37] *** Ched- joined
[14:38] *** Ched- left
[14:38] *** Ched- joined
[14:49] *** cls_bsd left
[14:57] *** kanru joined
[15:10] *** cls_bsd joined
[15:14] *** yewenbin joined
[15:14] <pugs_svnbot> r20390 | moritz++ | [t/spec] changed 'use v6-alpha;' to 'use v6;'

[15:14] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20390

[15:14] <lambdabot> Title: Changeset 20390 - Pugs - Trac

[15:15] *** cosimo left
[15:21] <pmurias> moritz_: is use v6-alpha incorrect?

[15:22] <moritz_> pmurias: v6-alpha is the perl 6 syntax as we have it today

[15:22] <moritz_> pmurias: but the test suite should test Perl 6.0.0

[15:22] <moritz_> pmurias: so there's nothing wrong with using it, but it doesn't belong into the test suite

[15:23] <[particle]> v6-alpha is not legal perl 6 anymore

[15:23] <moritz_> was it removed from S02?

[15:23] *** cosimo joined
[15:24] <moritz_> it's still in S01

[15:24] <moritz_> (not S02, sorry)

[15:25] <moritz_> and S11 says The use v6-alpha line also serves as the Perl 5 incantation to switch to Perl 6 parsing. In Perl 5 this actually ends up calling the v6.pm module with a -alpha argument, for insane-but-useful reasons.

[15:25] <pmurias> it is specced in in S11:369

[15:25] <[particle]> ah, hrmm, it is still specced.

[15:26] <[particle]> i thought that had been changed, sorry.

[15:33] *** araujo joined
[15:39] *** jjore is now known as zz_jjore

[15:39] *** zz_jjore is now known as jjore

[15:40] <moritz_> is this valid syntax? my %h{'a' .. 'z'} = (1..26);

[15:40] <moritz_> it's in S29-hash/exists.t, but it looks suspicious to me

[15:40] <moritz_> (and rakudo chokes on it)

[15:40] *** meppl left
[15:41] <[particle]> i believe it's valid, but rakudo and list assignment are not friends yet

[15:41] <moritz_> in perl 5 you can't do things like that

[15:47] *** [particle1 joined
[15:51] *** cjfields joined
[15:55] *** IllvilJa left
[15:59] *** iblechbot left
[16:01] *** plaqnet joined
[16:04] <masak> moritz_: you can't? why not?

[16:05] <moritz_> masak: because you first have to declare the container (%h) and then assign ( @h{'a' ... 'z'})

[16:07] <[particle]> @$_[...] = (...) for \my %h;

[16:07] <lambdabot> Unknown command, try @list

[16:07] <[particle]> errands &

[16:09] <masak> moritz_: ah, you declare it too. missed that.

[16:11] *** cls_bsd left
[16:12] *** masak left
[16:22] *** iblechbot joined
[16:22] *** riffraff left
[16:25] *** syle joined
[16:29] *** cls_bsd joined
[16:37] *** riffraff joined
[16:42] *** nipotaway is now known as nipotan

[16:46] *** eternaleye joined
[16:46] *** justatheory joined
[16:49] *** nnunley left
[16:57] *** eternaleye left
[16:59] *** IllvilJa joined
[17:02] <pmichaud> (v6-alpha)  TimToady has remarked in the past that "use v6-alpha;" is going away.  I'm guessing he either changed his mind or that the synopses haven't been changed to reflect that yet.

[17:05] *** rff joined
[17:05] <[particle]> i think the syns are out of date.

[17:05] <[particle]> unless you still want them frozen :P

[17:06] <pmichaud> uhhhhhh.... NO.  :-P

[17:06] *** eternaleye joined
[17:07] *** lisppaste3 left
[17:08] *** rff left
[17:08] *** eternaleye left
[17:09] *** eternaleye joined
[17:11] *** riffraff left
[17:12] <pmurias> how much of Perl 6 remains to be speced?

[17:12] *** yewenbin left
[17:12] <moritz_> the second 80%?

[17:13] <moritz_> most of I/O and concurrency is unspecced

[17:13] <moritz_> iirc there's no formal definition of the hierarchy of the builtin types

[17:15] <pmurias> &

[17:18] *** eternaleye left
[17:18] *** eternaleye joined
[17:21] *** cls_bsd left
[17:22] *** cls_bsd joined
[17:22] *** lisppaste3 joined
[17:27] <TimToady> that won't be legal, but you'll hopefully be able to say (my %h){'a'..'z'} = 1..26

[17:28] <TimToady> v6-alpha is going away slowly.  :)

[17:29] <[particle]> ah, i had the (accent) on the wrong (syllable).

[17:33] <[particle]> TimToady: thank you for bringing even more cool, grey weather to seattle.

[17:34] <TimToady> you must be confusing Mountain View with San Francisco...

[17:35] <TimToady> Mountain View tends to be short of cool, grey weather, so that's why I'm going to Tokyo, to fetch some more back home...

[17:36] *** penk left
[17:37] <TimToady> unfortunately Seattle has bribed the prevailing westerlies to blow a little from the south as well, so you're taking more than your fair share of Tokyo weather from us down south

[17:37] <[particle]> i blow and i blow, but the westerlies still prevail :(

[17:39] <[particle]> i miss nepal. at least there, if you didn't like the weather, you had three options

[17:39] <[particle]> 1) walk uphill, 2) walk downhill, 3) wait.

[17:40] <TimToady> well, you could hang-glide downhill, or, depending on the weather, uphill as well

[17:41] <[particle]> :)

[17:41] <TimToady> oh, wait, there's no air there--nevermind...

[17:41] <TimToady> how do they have weather without air, I wonder...

[17:41] <[particle]> ask the old man with enormous wings for a lift

[17:45] *** ispy_ joined
[18:06] <pugs_svnbot> r20391 | moritz++ | [t/spec] split illegal declaration+initialzation of a hash

[18:06] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20391

[18:06] <lambdabot> Title: Changeset 20391 - Pugs - Trac

[18:09] <[particle]> moritz++

[18:09] <[particle]> moritz_: have any tuits to add #?rakudo decls to t/spec to make our parsefails less visible?

[18:10] <moritz_> [particle]: I'm currently going through the parsefails...

[18:11] <moritz_> [particle]: and I first search for syntax errors, and clear them

[18:11] <moritz_> [particle]: when I'm done with that I'll take a look at remaining parsefails

[18:12] <moritz_> but it's a tedious business atm

[18:14] <[particle]> indeed, it is

[18:15] <[particle]> you're starting in s29-hash?

[18:15] <moritz_> not really, that was a coincidence

[18:15] <[particle]> okay.

[18:15] <moritz_> but for now I'll look at various S29-* stuff

[18:15] <[particle]> just don't want to step on your toes

[18:16] <moritz_> allright

[18:16] <[particle]> it should be easy enough to skip most of S29-list, as i bet most of it is due to lack of list context

[18:16] <[particle]> something like #?rakudo emit skip_rest 'no list context'

[18:17] <[particle]> however, you'll still need #?rakudo 999999 skip 'parsefail' 

[18:18] <[particle]> ...or somesuch, because code in fudge's emit declaration happens *after* parrot parses

[18:18] <moritz_> @array.delete doesn't seem to work

[18:18] <lambdabot> Unknown command, try @list

[18:18] <moritz_> but that's not a parse failure, at least ;)

[18:18] <[particle]> what's @array.WHAT ?

[18:19] <moritz_> List

[18:19] <moritz_> which might be the problem

[18:19] <[particle]> hrmm, src/classes/List.pir contains a 'delete' method

[18:20] <moritz_> it dies with Could not invoke non-existent sub undef

[18:20] <moritz_> so I won't fudge the test because it fails legitimately

[18:21] <[particle]> yes, that's legit

[18:21] <[particle]> that's a rakudobug

[18:23] <moritz_> what's the status of calling 'pop @list' instead of [email@hidden.address]
[18:23] <moritz_> I mean in general for those methods that can also be called as sub

[18:23] <moritz_> s

[18:24] <moritz_> they seem to cause quite many failures

[18:24] <[particle]> eventually we'll have a role that handles the exporting

[18:24] <[particle]> currently, we have sub wrappers that call the method

[18:24] <[particle]> it's possible some of those wrappers are missing

[18:25] <[particle]> eg:

[18:25] <[particle]> .sub delete :multi('List')

[18:25] <[particle]>   .param pmc list

[18:25] <[particle]>   .param pmc indices :slurpy

[18:25] <[particle]>   .return list.'delete'(indices :flat)

[18:25] <[particle]> .end

[18:30] <pugs_svnbot> r20392 | moritz++ | [spec] S29-array/splice.t: qw(..) is normally <...> now

[18:30] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20392

[18:30] <lambdabot> Title: Changeset 20392 - Pugs - Trac

[18:35] *** revdiablo left
[18:39] <pugs_svnbot> r20393 | moritz++ | [spec] fudged S29-hash/delete.t

[18:39] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20393

[18:39] <lambdabot> Title: Changeset 20393 - Pugs - Trac

[18:43] *** dduncan joined
[18:44] *** tobeya joined
[18:47] *** cjfields left
[18:52] *** meppl joined
[18:59] *** Ched- left
[19:07] <pmurias> would it be possible to pass additional parameters using the perl5 stack in such a way that they won't end up in @_?

[19:07] *** cjfields joined
[19:09] <moritz_> you could use global var instead of the stack

[19:09] <pmurias> figured a way how do what i want withought bring the perl5 stack/xs into the picture

[19:12] <pmurias> moritz_: what i won't is to pass named params seperatly from @_

[19:12] <pmurias> * want

[19:12] <pmurias> in a way that subs which don't support them will ignore them

[19:14] *** alanhaggai_ joined
[19:14] <moritz_> pmurias: you could try some evil hackery with a global hash that is indexed by the current sub name, or caller or something like that

[19:15] <[particle]> and use attributes to specify which subs use the global?

[19:15] <[particle]> course, that's not thread-friendly

[19:15] <[particle]> (the global)

[19:17] *** dduncan left
[19:17] <pmurias> pugs: sub foo($b) {say $b;}

[19:17] <exp_evalbot> RESULT[\sub :($b) "$_" := "Scalar" #<Scalar:0xb72c7e98>␤          "&?ROUTINE" := "Sub" #<Sub:0xb6604cec>␤          "&?BLOCK" := "Sub" #<Sub:0xb6604cec>␤          "$b" := "Scalar" #<Scalar:0xb72c6b7c> {"&foo" := "Sub" #<Sub:0xb7210f70>, "$_" := "Scalar" #<Scalar:0xb7270d00>␤                         

[19:17] <exp_evalbot> ..                                               ...

[19:17] <pmurias> pugs: sub foo($b) {say $b;}; foo(b=>3)

[19:17] <exp_evalbot> OUTPUT[3␤]

[19:17] <pmurias> pugs: sub foo($b) {say $b;}; foo(b=>3,c=>5)

[19:18] <exp_evalbot> OUTPUT[*** No compatible multi variant found: "&foo"␤    at /tmp/J8yASCGu1v line 1, column 24 - line 2, column 1␤]

[19:18] <[particle]> rakudo: sub foo($b) {say $b};

[19:18] <exp_evalbot> RESULT[Method 'perl' not found for invocant of class 'Closure'␤current instr.: '_block10' pc 35 (EVAL_12:16)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 785 (src/PCT/HLLCompiler.pir:458)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1067 (src/PCT/HLLCompiler.pir:587)␤called from Sub

[19:18] <exp_evalbot> ..'parrot;PCT::HLLCompiler;command_line' pc 1246 (...

[19:18] <pmurias> pugs: sub foo {}; foo(b=>3,c=>5)

[19:18] <exp_evalbot> OUTPUT[*** Named argument found where no matched parameter expected: ("b",Ann (Pos (MkPos "/tmp/Sld6Xsf8DD" 1 20 1 21)) (Val (VInt 3)))␤    at /tmp/Sld6Xsf8DD line 1, column 13 - line 2, column 1␤]

[19:18] <[particle]> heh. that's exp_evalbot getting carried away

[19:19] <[particle]> rakudo: sub foo($b) {say $b}; 1

[19:19] <exp_evalbot> RESULT[1]

[19:19] <[particle]> rakudo: sub foo($b) {say $b}; foo(b => 3)

[19:19] <exp_evalbot> OUTPUT[too many named arguments - 'b' not expected␤current instr.: 'foo' pc 38 (EVAL_12:21)␤called from Sub '_block10' pc 32 (EVAL_12:15)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 785 (src/PCT/HLLCompiler.pir:458)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1067

[19:19] <exp_evalbot> ..(src/PCT/HLLCompiler.pir:587)␤called from Sub 'parrot;PCT::HLLCom...

[19:19] <[particle]> rakudo: sub foo(:$b) {say $b}; foo(b => 3)

[19:19] <exp_evalbot> OUTPUT[3␤]

[19:21] <pmurias> [particle]: re thread safety, are perl threads used much?

[19:21] <moritz_> pmurias: most people try to avoid them wherever possible ;)

[19:22] *** alanhaggai left
[19:23] <pmurias> re passing of named parameters separately, i was trying to do a stupid thing, no wander it has to be done very hackishly

[19:24] <pmurias> * wonder

[19:24] * pmurias hates the fact that his spelling suffers horribly when he uses irc :(

[19:53] *** Ched- joined
[20:03] *** plaqnet left
[20:11] *** barney joined
[20:11] *** wknight8111 joined
[20:21] *** alanhaggai_ is now known as alanhaggai

[20:43] *** pmurias left
[20:46] <moritz_> rakudo: class A { has $.a; has $.b; }; my $x = A.new(a => 1, b => 2); say $x.a; say $x.b

[20:46] <exp_evalbot> OUTPUT[1␤␤]

[20:47] <moritz_> b0rked

[20:47] <[particle]> yes, i think rakudo only handles the first Pair

[20:48] <[particle]> not certain though

[20:48] <[particle]> rakudo: class A { has $.a; has $.b; }; my $x = A.new(b => 2, a => 1); say $x.a; say $x.b

[20:48] <exp_evalbot> OUTPUT[␤2␤]

[20:48] <[particle]> so it seems.

[20:49] <moritz_> should I write a small bug report?

[20:50] <[particle]> sure

[21:06] *** cjfields left
[21:08] *** ispy_ left
[21:09] *** eternaleye left
[21:11] *** alanhaggai left
[21:12] *** eternaleye joined
[21:15] *** Schwern left
[21:15] *** barney left
[21:16] <moritz_> in NQP this is an error if $<foo> isn't a list: for $<foo> { ... }

[21:16] <moritz_> is there an easy workaround?

[21:17] *** cjfields joined
[21:19] *** TJCRI left
[21:21] <cjfields> I saw the same Pair problem the other day (only accepting the first Pair)

[21:22] <cjfields> rakudo: class A { has $.a; has $.b; }; my $x = A.new(:a(1), :b(2)); say $x.a; say $x.b

[21:22] <exp_evalbot> OUTPUT[1␤2␤]

[21:22] <cjfields> class A { has $.a; has $.b; }; my $x = A.new(a => 1, b => 2); say $x.a; say $x.b

[21:22] <cjfields> rakudo: class A { has $.a; has $.b; }; my $x = A.new(a => 1, b => 2); say $x.a; say $x.b

[21:22] <exp_evalbot> OUTPUT[1␤␤]

[21:22] <moritz_> cjfields: I submitted a bug report for rakudo

[21:23] <moritz_> cjfields: but good to know that colon pairs work

[21:23] <moritz_> or whatever their name is ;)

[21:23] <cjfields> pugs: class A { has $.a; has $.b; }; my $x = A.new(a => 1, b => 2); say $x.a; say $x.b

[21:23] <exp_evalbot> OUTPUT[1␤2␤]

[21:24] <cjfields> well, pugs gets it right, but I guess that's no longer maintained  :( 

[21:24] <cjfields> moritz_: thanks for submitting that!

[21:27] *** rdice left
[21:28] *** chris2 left
[21:29] *** klle joined
[21:41] *** cjfields left
[21:43] *** mncharity joined
[21:50] <meppl> good night

[21:51] <moritz_> good night ;)

[21:51] <meppl> ;)

[21:54] *** meppl left
[21:59] *** sscaffidi left
[22:07] <mncharity> pugs: \(4:5,6)

[22:07] <exp_evalbot> RESULT[CaptMeth {c_invocant = IFinite 4, c_feeds = [:MkFeed {f_positionals = [:IFinite 5,IFinite 6:], f_nameds = fromList []}:]}]

[22:08] <mncharity> rakudo: \(4:5,6)

[22:08] <exp_evalbot> OUTPUT[Syntax error at line 1, near "\\(4:5,6)"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;Perl6::Grammar;TOP' pc 11308 (src/gen_grammar.pir:249)␤called from Sub 'parrot;PCT::HLLCompiler;parse' pc 564

[22:08] <exp_evalbot> ..(src/PCT/HLLCompiler.pir:348)␤called from Sub 'parrot;PCT::HLLCompiler;compile...

[22:08] <moritz_> what's 4:5 supposed to be?

[22:08] <mncharity> i was wondering that.  but now think it's an invocant of 4, and extra positional args of 5 and 6.

[22:09] <moritz_> not very intuitive

[22:10] <moritz_> we had the discussion what $obj.math:{block} means 

[22:10] <moritz_> and it turned out to be parsed as $obj.meth :{block}

[22:10] <moritz_> so why would a capture be parsed differently?

[22:10] *** lambdabot left
[22:11] *** lambdabot joined
[22:13] <mncharity> ﻿moritz_: a Capture is a generalized right hand side, and : as a comma-like thing to separate invocant from other args matches the generalized left hand side Signature's similar use for parameters.

[22:13] <mncharity> sub foo($a: $b) { ... }

[22:14] <mncharity> I might not even have been puzzled by it if it had been spaced as  \(4: 5, 6)  ;)

[22:16] <moritz_> ok, it can't be parsed as \(4 :5, 6) because that's not valid perl 6, right?

[22:16] <moritz_> pugs: print perl \(4 :5, 6)

[22:16] <exp_evalbot> OUTPUT[CaptMeth {c_invocant = IFinite 4, c_feeds = [:MkFeed {f_positionals = [:IFinite 5,IFinite 6:], f_nameds = fromList []}:]}]

[22:16] <mncharity> TimToady: (1) <capture> uses EXPR which doesn't seem to match '4:5'.  should there be a token infix:sym<:> ( --> Comma) ?

[22:24] <mncharity> re ':5,6', looking...

[22:24] *** justatheory left
[22:24] *** justatheory joined
[22:25] *** iblechbot left
[22:26] <mncharity> re ﻿':5,6', right, doesn't look like it's a valid parse.

[22:27] <moritz_> anyway, I'm off to bed

[22:27] *** PerlPilot joined
[22:27] <moritz_> g'night

[22:27] *** Juerd_ joined
[22:27] <mncharity> oh, wait.  ﻿\(4 :5, 6)  is valid.  it's (:5,6) which looks like not.

[22:27] *** wolv joined
[22:27] <mncharity> good night :)

[22:27] *** wolverian left
[22:28] *** wolv is now known as wolverian

[22:28] <mncharity> ﻿wolv: you're... shorter

[22:28] <mncharity> ah, back

[22:28] *** dalek left
[22:28] <mncharity> :)

[22:28] *** pmichaud left
[22:28] *** PerlJam left
[22:32] * mncharity checks if  multi f() {} is valid... (ie, no 'sub')

[22:33] <mncharity> yep

[22:35] <mncharity> TimToady: (2) plurality_declarator:multi doesn't parse 'multi foo() {}' (ie, implicit 'sub').

[22:38] *** Juerd left
[22:44] *** elmex left
[22:45] *** syle left
[22:47] *** eternaleye left
[22:57] <mncharity> oh, that was happy.  have parsefail, check STD.pm, notice changes, apply changes, parsefail gone. :)

[22:57] <Tene> nice

[22:58] *** PerlPilot left
[22:58] *** wolverian left
[22:59] *** Juerd_ left
[23:00] *** pugs_svnbot left
[23:02] <mncharity> TimToady: (3) regex_def doesn't seem to handle adverbial modifiers?  'token f :P5 {a}'

[23:20] *** [particle2 joined
[23:21] *** eternaleye joined
[23:26] <mncharity> TimToady: (4) fatarrow has a lhs of ident, but STD.pm in several places (and a kp6 test) says 'foo'=>... .  ie, lhs string.  ??

[23:31] *** cognominal_ left
[23:35] *** pbuetow left
[23:37] *** [particle1 left
[23:38] <mncharity> low-key happiness.  if (4) is fudged, STD_red accepts kp6's t/kp6/*.t .

[23:39] <mncharity> pugs t/ acceptance is still a mess.

[23:40] <mncharity> acceptance does _not_ imply the parse is correct, or the tree returned is healthy.  it simply means "didn't choke on it".

[23:40] *** wolverian joined
[23:44] *** Juerd joined
[23:44] *** PerlJam joined
[23:48] <mncharity> Are the =kwid ... =cut   pod comments in pugs t/ now all obsolete/invalid?

[23:48] *** armagad left
[23:50] <mncharity> TimToady: (5) lots of pugs t/ tests use a =kwid...=cut construct, which STD doesn't understand.  depreciated?  invalid?

[23:51] *** cjfields joined
[23:52] <obra> =kwid was ingy's attempt a first cut of pod6

[23:53] <obra> as I understand it, it's been superceded by damian's pod6 spec

[23:53] *** cjfields_ joined
[23:53] *** cjfields left
[23:55] <mncharity> thanks obra

[23:56] <obra> nnn

[23:57] <obra> np

[23:57] <obra> I can't find the conversation I had with particle last week, but I believe current is:

[23:57] <obra> =begin pod

[23:57] <obra> I don't know if a global search and replace is Right or Wrong

