[00:03] *** cmarcelo left
[00:57] *** lambdabot left
[00:57] *** lambdabot joined
[01:00] *** Schwern left
[01:03] *** alester joined
[01:10] *** mncharity joined
[01:10] *** mncharity left
[01:10] *** mncharity joined
[01:14] <meppl> good night

[01:18] *** meppl left
[01:26] *** luqui left
[01:31] *** jiing left
[01:32] *** jiing joined
[01:33] *** hercynium joined
[01:38] <mncharity> pmurias: a while back you mentioned you had been blocked on elf string escapes (now fixed, yes?).  are you blocked on anything else?

[01:38] <mncharity> @tell pmurias a while back you mentioned you had been blocked on elf string escapes.  are you now blocked on anything?

[01:38] <lambdabot> Consider it noted.

[01:39] * mncharity puzzles over what goals elf should have for August'08.

[01:42] <mncharity> @tell TimToady What is your planned direction after STD parses t/ ?  Performance improvements?  Moving back to p6?  Starting a runtime?  Wrapping it up and moving to the OO core?  Something else...??

[01:42] <lambdabot> Consider it noted.

[01:46] *** Sebastian_Knapp left
[01:47] <mncharity> @tell TimToady My impression is elf is no longer providing either technical or motivational assistance for your STD work, correct?  Any thoughts on how it might be of use to you over the coming month?

[01:47] <lambdabot> Consider it noted.

[01:49] *** pjcj left
[01:53] *** jferrero left
[01:53] <mncharity> Sigh.  There seems some small interest in high performance common lisp full bootstrap.  With STD maturing, it's at least a feasible goal, but a great deal of work given the low level of interest.  There's been very slight interest in writing p6 prelude, but... very slight.

[01:59] *** wknight8111 left
[02:07] <Auzon> TimToady: re STD appearing accepting, it seems that it works and then fails as a result of a cronjob or svn up. p6eval's code is looking for "--- !!perl" to indicate success, though, so I don't know why it's returning ok.

[02:14] <mncharity> moritz_: a while back you asked whether elf was "limited by parsing, or by the rest of the compiler".  I answered parsing.  Mostly because a fast authoritative-AST parser would permit close coupling with the test suite.  Real concrete TDD, rather than the incompleteness and fuzziness of recent years.

[02:14] <Auzon> mncharity: moritz is on vacation, if you didn't know.

[02:15] <mncharity> But the real answer is neither.  elf is limited on developer resources.  STD_red could have been transliterated into p6, so frontend was boostrapped too.  STD_red could have been synced with a more recent STD.  The prelude signatures in Snn could have been copied to a file.  the elf common lisp backend could have been fleshed out into a bootstrap.

[02:15] <mncharity> Auzon: oh, yeah, right. :/  ah well.  thanks :)

[02:16] *** alester left
[02:16] <Auzon> I imagine he'll backlog and grep. And it's interesting (to me at least)

[02:18] <mncharity> punchline is, even things which would take no great skill, little time, and are repeatedly mentioned, arent't happening.  No social momentum.  That's what elf is limited on.

[02:18] <mncharity> Auzon: re backlog, *nod*.  re interesting, :)

[02:18] <mncharity> questions/comments welcome/encouraged.

[02:23] <Auzon> I think it's interesting how you mention the parser being a crucial part. I've found that STD.pm is very helpful in writing tests, and while I don't know any specifics, I can see how it'd help in a number of cases. Would STD.pm be a significant improvement over STD_red?

[02:25] *** jhorwitz left
[02:28] <mncharity> re STD.pm vs STD_red, well, 100% vs ~70% coverage.  but...  much of the value I think is authoritativeness.  think how much harder your work would be if the t/ tests were "parrot has one set of t/, and pugs another, and elf, and...", instead of "this is the current, authoritative, best understanding of what the language is".  having a reference parser,

[02:28] *** Limbic_Region left
[02:30] <mncharity> regardless of whether you can easily use it, moves the "and it's all a hack" boundary from between source and AST to between AST and IR.

[02:31] <Auzon> What's your current goal with elf? It's being used on SMOP, correct?

[02:32] <mncharity> re SMOP, I believe so.  re goal, unclear.  thus this evening's exercise.

[02:35] <mncharity> for most of its existence, the goal might be described as "help keep STD rolling" and "see whether once people can work on compiler internals in a fast big p6 dialect, they do".  STD rolled, and they didn't.

[02:36] *** Schwern joined
[02:37] <mncharity> an initial hypothesis was that if an unfinished implementation with a solid foundation/walls could be constructed, people would be motivated to flesh it out.

[02:38] <Auzon> It was somewhat attractive to me, but I had other obligations. I don't know how many free developers you could've attracted :-/

[02:40] <mncharity> eg, say a STD parser written in p6, with a compiler written in p6, with no performance problems (eg, a fast common lisp runtime), and solid real oo.  so you could say "the foundational oo is there.  the tests for full p6 are there.  you're getting their authoritative AST's.  the development pragmatics are good.  you can work in p6.  Christmas will be here as soon as you write enough p6."

[02:41] <s1n> is it possible to verbose test output from using localtest (without having to execute it by hand)?

[02:42] <mncharity> re how many free developers, don't know.  there seems a background reservoir of

[02:43] <mncharity> s1n: err, testing what against what?

[02:43] <s1n> mncharity: using the harness and the localtest make target

[02:43] <Auzon> Rakudo against something in t/spec.

[02:43] *** apeiron_ joined
[02:43] <mncharity> s1n: ah, sorry, don't know.

[02:43] <s1n> Auzon: yeah, but i'd like to do something like "make localtest" and have the harness spit out each test result

[02:44] <s1n> i couldn't see anything and I don't know enough about parrot's Test.pm to change it to not capture the test output

[02:44] <s1n> or change it to capture and print it as well (i.e. verbose mode)

[02:45] <Auzon> I usually don't use the harness which is quite verbose.

[02:45] <s1n> yeah but i want to see each of the tests results

[02:45] <s1n> all of the passes and where fails occur

[02:45] <Auzon> try: ../../parrot perl6.pbc `t/spec/fudge rakudo t/spec/whatever/foo.t`

[02:46] <Auzon> That assumes you have a bash-like shell that supports backticks

[02:46] <s1n> i could do this all by hand (such as your example), but i was looking for a shortcut

[02:47] <s1n> well, there's "../../parrot ./perl6.pbc --tests-from-file=t/localtest.data" which is easier, but i'm looking for something short and sweet

[02:48] <s1n> err well, that doesn't do the fudging, but you get the idea

[02:48] <mncharity> there seems a background reservoir of interest.  people occasionally wander by here, before being scared off by the lack of project management.  kind of hard to judge the reservoir level in the absence of probes.  a hypothesis is if we had something to give them which actually worked, and could be easily developed, they would come.  "had an active development community" might be

[02:48] <mncharity> another requirement there, and thus a community bootstrap issue.

[02:49] *** kanru joined
[02:49] <Auzon> Hm, sorry s1n, I can't think of anything else. I must go &

[02:49] <s1n> Auzon: thanks anyways

[02:50] <s1n> Auzon: i'll probably just write a make target for it :)

[02:50] *** ryanc left
[02:50] *** apeiron left
[02:51] <mncharity> but my previous hypothesis was "people worked on kp6, before getting stuck.  given a faster better less sticky version of kp6, people would work on that".  but didn't.  modulo pmurias.  so... not sure I believe the hypothesis.  not enough to burn a couple of weeks to test it, in the absence of anyone else believing it.

[02:53] <s1n> mncharity: rakudo isn't so hard to get started with, it just has a fairly different build system than i'm used to, and i had to adjust to the harness idea. all of this could be improved if the interface to these operations (changing, building, testing) were simplified and documented

[03:03] <mncharity> s1n: thanks for the thought.  the rakudo folks tend to be bottlenecked on "someone getting around to it" too, so you might write up your "what I wish *I* had seen documented, and would have made my life easier", and send it to them.

[03:04] *** justatheory left
[03:06] <avar> The people who work on rakudo are also the guys who wrote the subsystems it uses so they understand all the pir stuff already:)

[03:07] <mncharity> avar, you worked on kp6 at one point, didn't you?

[03:08] <avar> I tried:)

[03:09] *** elmex_ joined
[03:09] <avar> It was really fglock's project though and he disappeared in a black hole or something

[03:09] <mncharity> hmm... so let's see...

[03:11] <mncharity> pretty mountains, cool breeze, someone mentions a new p6 "xmas sled" project.  describes it's attributes.  you're excited to work on it.  ...  what characteristics does it have? :)

[03:13] <mncharity> or alternately, did you ever look at elf?  if not, any particular reason?  if so, any things you liked/disliked come to mind?  any thoughts on "if it had only been/not-been X, I might have been psyced"?

[03:15] <mncharity> "The code was unreadable.  The performance glacial.  It wasn't really p6.  Yet another soon-to-be-abandonware p6 project. ...?"

[03:17] <mncharity> "Didn't believe the architecture.  Completely unnecessary given rakudo.  Given STD.  Given kp6.  Don't really believe in p6 anymore. ...?"

[03:17] <mncharity> (have run into "Don't really believe in p6 anymore" a couple of times now :/ )

[03:17] *** alanhaggai_ joined
[03:18] <hercynium> Do you believe in p6? … If you believe clap your hands.

[03:19] <hercynium> Every time a hacker says, 'I don't believe in p6,' there is a unit test somewhere that fails for no good reason.

[03:19] <mncharity> ...wind whispers though the seemingly abandoned city...

[03:20] <mncharity> lol

[03:20] <hercynium> something about your statement made me think of tinkerbell

[03:20] <mncharity> noticed ;)

[03:21] <avar> mncharity: I haven't really followed perl6 at all since I stopped hacking on kp6 other than compiling parrot's perl6 every ~3-6 months

[03:21] <avar> I looked at elf once and didn't understand it:)

[03:21] <mncharity> :)

[03:22] <mncharity> so "The barrier to entry on elf is too high."

[03:22] *** elmex left
[03:23] *** elmex_ is now known as elmex

[03:24] <avar> "avar was impatient that it wasn't a full perl6 implementation and probably proceeded to watch some crappy TV show"

[03:24] <mncharity> *lol*

[03:25] <avar> But I don't think I'd work on any perl6 project right now, it's all a bit pie-in-the sky

[03:25] <avar> Hopefully parrot will have something at least as useful as raw scheme for writing programs in 1-2 years

[03:26] <avar> Or someone starts hacking pugs again

[03:26] <avar> But well, stuff like kp6 and elf is cool also because it shifts the compiler problem elsewhere which is nice

[03:29] <mncharity> re sky pie, sigh, indeed lots of work needed.  perhaps not that much time with lots of people, but lots of time with current population.

[03:32] *** alanhaggai left
[03:33] <mncharity> so "I can be using p6 in production WHEN?!?  In only <startlingly soon> n weeks?!?  It's no longer pie-in-the-sky?!?" might be the key characteristic of interested.

[03:36] <mncharity> for myself, I most often feel the need for p6 when I have to write something in multiple languages, eg js+python+ruby, and would much rather write it once in p6, and emit the others from there.  also when I have to do ugly architectures because I don't have high performance multimethods.  or macros.

[03:39] <mncharity> so my "p6 is real for me when.."s might be "when I can write simple libraries in p6, and have usable from js/py/rb" and "when I can write a smallish low order 10k line programs, and use multimethods with performance more like CL than python".

[03:40] <mncharity> anyone have their own?

[03:44] <mncharity> Auzon: re role of STD.pm, note the "it wasn't a full perl6 implementation".  having it "it's fully real from the top down to there, and from the bottom up to here, ... it's just the compiler and prelude which need more p6 written"... might, hypothetically, who knows, be more attractive.

[03:46] <mncharity> ok.  elf goals for 2008.08, "make elf more approachable", and... whatever comes from having asked for suggestions/requests.

[03:47] <mncharity> Auzon: avar: s1n: thanks for your help.

[03:48] *** mncharity left
[04:01] <Auzon> @tell mncharity re "I can use p6 in $small_unit_of_time", I had some time during this summer when I wanted to make an IRC bot. I'm not a huge fan of the existing p5 modules for this (either Net::IRC or Bot::BasicBot/::Pluggable), so I would've used p6, but it had no sockets. Elf supported sockets via p5, but then I may as well have used p5. (Not sure how the p5-to-p6 interfacing worked. It may have been OK.)

[04:01] <lambdabot> Consider it noted.

[04:03] <Auzon> @tell mncharity For me, wanting to use p6 in a project was with IRC (and required sockets as a minimum). I've heard file IO as another minimum, but I'm really not sure what a lot of people consider as the minimum requirement.

[04:03] <lambdabot> Consider it noted.

[04:09] *** hercynium left
[04:20] *** sri_work left
[04:24] <s1n> Auzon: if it's accepted, you'll be able to do a "make localtest_loud" (see rt#57522)

[04:25] *** alester joined
[04:26] <Auzon> s1n++ # improving the toolchain

[04:29] *** alanhaggai__ joined
[04:30] *** Lorn joined
[04:37] *** josh left
[04:37] *** josh joined
[04:37] <pugs_svn> r21719 | lwall++ | [STD] detect obsolete use of =cut

[04:37] <pugs_svn> r21719 | lwall++ | [t/*.t] delete obsolete uses of =cut

[04:38] *** josh is now known as jjore

[04:38] *** jjore is now known as jjore-fn

[04:44] <pugs_svn> r21720 | lwall++ | [t/*] s/:perl5/:Perl5/

[04:44] *** alanhaggai_ left
[04:48] <pugs_svn> r21721 | lwall++ | [t/*] s/qn/Q/

[05:05] <pugs_svn> r21722 | lwall++ | [t/*] fix all the rands and $*PID."... instances

[05:08] <pugs_svn> r21723 | lwall++ | [t/xx-uncategorized/hyperop.t] postfix hyper can't have space before it

[05:29] *** alanhaggai__ left
[05:36] <audreyt> avar: yes.

[05:39] <gaal> hey audreyt. my build is... too fast :) and almost all smoke tests were timing out

[05:39] <gaal> 'time make' is wel under a minute and only two files are being compiled?

[05:41] <gaal> after make clean, only Pugs.Config and Pugs.Parser[boot] seem to require building

[05:41] *** alester left
[05:41] <gaal> ooh, dist/build is full of objects!

[05:43] <clkao> gaal!

[05:43] <gaal> hey :)

[05:44] <clkao> has my friend landed tel aviv yet ;)

[05:44] <gaal> I think not -- last week I was told sunday or Monday

[05:55] *** Psyche^ joined
[06:00] <gaal> hmmm. many tests still timing out (e.g. Cypher

[06:00] <gaal> )

[06:05] <audreyt> gaal: yes please hack make clean to run ./Setup clean

[06:05] <audreyt> avar: yes that is the error I'm getting

[06:08] *** ilogger2_ joined
[06:16] <clkao> audreyt: http://pastebin.com/m26c2f03e

[06:16] <buubot> clkao: The paste m26c2f03e has been copied to http://erxz.com/pb/11160

[06:16] <clkao> doesn't quite build

[06:18] <audreyt> clkao: it's in http://svn.pugscode.org/pugs/src/Pugs/CodeGen/PIR/Prelude.hs though

[06:18] <clkao> what should i do then? i am just running make

[06:19] <audreyt> committing

[06:20] <pugs_svn> r21724 | audreyt++ | * Try resolve the "file already exists" bug

[06:21] <audreyt> ok try r21725.

[06:21] <clkao>     Could not find module `Pugs.CodeGen.PIRPrelude':

[06:21] <clkao> but you had:

[06:21] <clkao> A   src/Pugs/CodeGen/PIR_Prelude.hs

[06:21] <clkao> does that seem right to you?

[06:22] <clkao> (sorry, i've been watching firefly)

[06:22] <audreyt> you're one rev behine

[06:22] <audreyt> behind

[06:22] <audreyt> need 21725

[06:22] <pugs_svn> r21725 | audreyt++ | * Rename PIR.Prelude to PIR_Prelude

[06:22] <clkao> tada

[06:22] <clkao> compiling is so fast

[06:23] <audreyt> science have progressed

[06:23] <clkao> indeed

[06:23] <clkao> http://xkcd.com/54/

[06:23] <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe

[06:24] <clkao> gcc-4.0: -E, -S, -save-temps and -M options are not allowed with multiple -arch flags

[06:25] <clkao> i think the universal binary flag from perl extutil is messing things up

[06:26] <audreyt> I thought I fixed it.

[06:26] <audreyt> did you see -arch in Pugs.buildinfo?

[06:26] <audreyt> actually, you reported it months ago

[06:26] <clkao>  -optl-arch -optli386 -optl-arch -optlppc 

[06:27] <clkao> yeah i didi

[06:27] <audreyt> fixed

[06:27] <audreyt> up and make again should work

[06:27] <clkao> does it read the build info during make? or do i have to reconfigure?

[06:27] <pugs_svn> r21726 | audreyt++ | * Remove -arch from optl as well.

[06:28] <clkao> oh worky now

[06:28] <audreyt> configure is part of make

[06:28] <clkao> so you can't build universal binary with ghc then. 

[06:28] <clkao> does that seem right to you?

[06:28] <audreyt> cabal configure is so fast, it's okay to do it over and over again

[06:28] <clkao> mtl:pugs clkao$ time ./pugs -e 'say 1'

[06:28] <clkao> 1

[06:28] <clkao> real    0m0.201s

[06:28] <audreyt> that seems right to me.

[06:28] * clkao is now happ

[06:28] <audreyt> there's a ghc ticket for it

[06:28] <clkao> happy, even

[06:29] <clkao> i think someone needs to refactor the mad htmlmatrix smoke thing with the new harness infrastructure

[06:29] <pugs_svn> r21727 | audreyt++ | * Just to be sure, nuke -optc-arch as well

[06:30] <clkao> how do i smoke just the core tests? it's failing CGI crap

[06:31] <audreyt> env PUGS_SMOKE_EXCLUDE_EXT=1 make smoke

[06:32] <clkao> is inc etc not working?

[06:32] <clkao> t/01-sanity/06-use.t

[06:32] <clkao> pugs: *** Can't locate lib.pm in @*INC (@*INC contains: blib6/lib /System/Librar

[06:32] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "***"␤    expecting program␤    at /tmp/yXLp1NJU0m line 1, column 1␤]

[06:32] <audreyt> did you run "make"

[06:32] <audreyt> or jsut "make pugs"

[06:33] <audreyt> oh nvm.

[06:33] <audreyt> mea culpa. sec

[06:33] <pugs_svn> r21728 | audreyt++ | * Build ext/.

[06:34] <audreyt> there.

[06:34] <audreyt> (make ; make smoke)

[06:34] <clkao> well but this was 06-use.t

[06:34] <clkao> not ext

[06:34] <clkao> uh, lib is unde ext/ too?

[06:35] <clkao> worky now

[06:35] <clkao> now let's just see how well the smoke is 

[06:39] <pugs_svn> r21729 | gaal++ | * "make clean": wipe dist/ too by having it call ./Setup clean

[06:43] <clkao> t/examples/all_parse.t

[06:43] <clkao>     304 wallclock secs ( 0.00 usr +  0.03 sys =  0.03 CPU) @ 33.33/s (n=1)

[06:43] <clkao> this test is slow

[06:44] <audreyt> *nod* that's because the parser is slow

[06:48] <audreyt> TimToady: will a longest-token re::engine::TDFA be of any interest/help to you?

[06:52] <clkao> does make smoke submit to the right place?

[06:55] <audreyt> you need to say "make upload-smoke"

[07:07] *** alanhaggai joined
[07:08] <clkao> yeah, but is the smoke aggregation server still running

[07:15] <audreyt> sure is

[07:28] *** meppl joined
[07:33] <pugs_svn> r21730 | gaal++ | * Makefile.PL: don't use literal tabs to construct the makefile.

[07:36] <gaal> most of the examples and t/junction are timing out. is it just me?

[07:44] *** meteorjay joined
[07:53] *** fridim_ joined
[08:01] *** hcchien joined
[08:09] <audreyt> gaal: t/junction worksforme

[08:09] <audreyt> gaal: are you still on colinux?

[08:13] *** alanhaggai joined
[08:36] *** pmurias joined
[08:54] * zamanfou is now away: In the rain my tears are forever lost.

[09:58] *** pjcj joined
[10:10] *** masak joined
[10:13] <pugs_svn> r21731 | pmurias++ | [smop] start of m0ld, the DSL for Mold

[10:19] <masak> 'make' works now!

[10:19] <masak> audreyt++

[11:10] *** BinGOs joined
[11:25] <pugs_svn> r21732 | fglock++ | [v6.pm] more tests  # 7100

[11:39] *** BinGOs joined
[11:59] *** cognominal_ joined
[12:13] *** sri_work joined
[12:50] *** meppl joined
[13:00] *** BinGOs joined
[13:07] *** BinGOs joined
[13:12] *** wknight8111 joined
[14:02] *** meppl joined
[14:09] <masak> a lot of the modules in ext/ time out during make smoke

[14:28] *** alester joined
[14:46] <pugs_svn> r21733 | pmurias++ | [smop] start of Mold implementation

[14:47] <pugs_svn> r21734 | lwall++ | various buglets, STD now parses 94% of t/

[14:50] <gaal> audreyt: no, real ubuntu hardy

[14:51] <gaal> eep, and all of t/operator is timing out too

[14:51] <gaal> basically my smoke from ~8hrs ago is still going

[14:52] <gaal> ghc-6.8.2

[14:53] <gaal> hmm, what would be a good way to add profiling to pugs?

[15:01] <pmurias> @tell ruoso what do you think of turning has_next,next and eval into next only?

[15:01] <lambdabot> Consider it noted.

[15:33] *** justatheory joined
[15:33] <TimToady> my make test seems to have hung in examples/algorithms/lambda-calculus.pl

[15:33] <lambdabot> TimToady: You have 2 new messages. '/msg lambdabot @messages' to read them.

[15:33] <TimToady> @messages

[15:33] <lambdabot> mncharity said 13h 56m 14s ago: What is your planned direction after STD parses t/ ? Performance improvements? Moving back to p6? Starting a runtime? Wrapping it up and moving to the OO core?

[15:33] <lambdabot> Something else...??

[15:33] <lambdabot> mncharity said 13h 51m 45s ago: My impression is elf is no longer providing either technical or motivational assistance for your STD work, correct? Any thoughts on how it might be of use to you over

[15:33] <lambdabot> the coming month?

[15:36] <TimToady> audreyt: I'm not really interested in substituting one buggy tagged dfa implementation for another :)

[15:39] <TimToady> @tell mncharity after t/ I'm probably going to be working on mutating my TRE-prevention code into a real dfa matcher, then translate that to P6.

[15:39] <lambdabot> Consider it noted.

[15:41] *** alester joined
[15:41] <TimToady> @tell mncharity but to get t/ parsing right involves adding symbol tables/pads to STD to implement user-defined operators and post-declarations

[15:41] <lambdabot> Consider it noted.

[15:42] *** jhorwitz joined
[15:43] <pmurias> TimToady: how will be the lexicality of grammar modification handled?

[15:43] <lambdabot> pmurias: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:43] <TimToady> @tell mncharity and of course, performance improvements are always in the back of my mind in some kind of repressed state, and translating Cursor to p6, and prelude, and...

[15:43] <lambdabot> Consider it noted.

[15:46] <TimToady> it's handled automatically by the fact that cursor_fresh starts a new language and _SUBSUME throws it away at the end of the construct, but of course that begs the question of how the new grammar represents its lexical symbols to itself that aren't new rules

[15:47] <pmurias> but _SUBSUME has to propagate grammar changes or they won't get far

[15:47] <TimToady> sub postfix:<!> needs a new rule, whereas my sub foo just needs a new lexpad entry

[15:47] <pmurias> far meaning to the next statement

[15:48] <TimToady> _SUBSUME automatically propagates the language it entered with onward

[15:49] <pmurias> if i have a sub infix:<more_than_plus> {...};1 more_than_plus 2;

[15:51] <TimToady> the add_macro has to figure out which language to add it to, really

[15:51] <pmurias> TimToady: not create a new one?

[15:51] <TimToady> at the moment it's assuming it's adding to $¢ but that might not propagate out of the current construct

[15:52] <pmurias> it dosn't

[15:52] <TimToady> so it probably needs to tell some higher SUBSUME to switch to the new language, maybe more than one

[15:53] <pmurias> by changing SUBSUME, STARr and PLUSr i got it as far as too the noun

[15:53] <pmurias> s/too/to

[15:53] <TimToady> it probably needs to change any SUBSUME up to the statement level

[15:54] <TimToady> since it needs to influence the rest of the declaration as well as the next statement

[15:54] <pmurias> the autolexer blocks the propagation at noun, so it needs to be changed too

[15:55] <pmurias> i could put a path some where which propagates a hardcoded infix:<more_than_plus>

[15:57] <TimToady> I wonder if we could fake it by failing and reparsing

[15:57] <TimToady> that is, fail back to the statement level, add the symbol to the language, and reparse.

[15:58] <TimToady> probably not workable for deeply embedded declarations

[16:00] <pmurias> the grammar changed could be effective from the next statement

[16:00] <TimToady> anyway, I will think about how to do that, since we need it for the one failing test in t/spec

[16:00] *** macroron joined
[16:00] <TimToady> that's what p5 does, but that's got its own problems

[16:01] <TimToady> which is why p6 tries to consistently introduce it right at the name, even if the definition isn't complete

[16:03] <TimToady> but it's basically a situation that we're adding a method to a base class and expecting the autolexer to cope, I think

[16:03] <TimToady> (which it doesn't currently)

[16:05] <TimToady> it may be as simple as invalidating all the lexers derived from the current statement language and letting the autolexer recalculate (hopefully lazily)

[16:10] <pugs_svn> r21735 | pmurias++ | [STD] fixed bug with autolexer hack in derived grammars

[16:15] <pmurias> s/changed/change/

[16:18] <TimToady> anyway, there can be more than one "next" statement when the declaring construct contains a block, and we'd like to be able to express recursive ideas, like using postfix:<!> in its own definition

[16:19] <TimToady> a related interesting problem is that if we introduce infix:<foo> right when we see the name, we don't yet know its precedence until the traits are parsed

[16:20] <TimToady> so the natural place to introduce a new symbol may be after its traits

[16:20] *** iblechbot joined
[16:20] <TimToady> this works for parameters in sigs too, since an earlier parameter is visible to a later parameter's default expression

[16:21] <TimToady> and parameters can have traits

[16:23] <TimToady> this is probably all magically orchestrated by the COMPILING scope somehow, since that represents the current lexpad, so maybe it keeps an autolexer valid bit somewhere that sublanguages can check

[16:26] <TimToady> at some point we'll probably also have to think about how different autolexers can share common elements so that we don't have to regenerate everything every time we mixin a new symbol

[16:26] <TimToady> using polymorphic tries or some such

[16:27] <TimToady> at the moment I'm just hoping most mumble:<x> definitions get added without being used soon, so we don't have to autolex the intermediate languages

[16:28] <TimToady> and I'm also banking on the fact that normal sub defs don't really change the language, but just add to the symbol table accessed by a \w+ match

[16:29] <TimToady> (which is why we can have postdeclared identifiers, but not post-declared operators)

[16:43] <TimToady> but after thinking a bit longer, the correct solution is probably to just provide a way for SUBSUME to have some way of merging interior declarations with the outer language, if there's some sane way to represent the current set of pending declarations

[16:44] <TimToady> the list of pending declarations could even be used as an exception list of some sort in the current sublanguage, so the sublanguage could decide on its own whether to go to the trouble of autolexing a grammar that will soon be thrown away

[16:44] <TimToady> but maybe this is isomorphic to tweaking the outer grammar in a way that is visible to inner grammars

[16:45] <TimToady> in any case, it is an *interesting* problem  :)

[16:49] <pmurias> &

[16:50] <gaal> TimToady: is your smoke still running, and timing out on many subsequent tests?

[16:55] *** jjore joined
[17:25] <TimToady> I thought it would continue when I ^C'd the hanging test, but it stopped everything, and I didn't restart.  next time I'll try kill

[17:25] <TimToady> and it wasn't a smoke, but a test

[17:42] <TimToady> starting a real smoke to see how it does

[17:44] <TimToady> ext/Cipher/t/0-cipher-oo.t seems to loop

[17:45] *** ruoso joined
[18:01] <rhr> I just ran a smoke, and nothing seemed to hang here

[18:01] <rhr> however everything in t/regex/from_perl6_rules fails with ~/.cabal: createDirectory: already exists (File exists)

[18:10] <masak> rhr: no five-minute pauzes in almost all of ext/ ?

[18:11] <rhr> masak: the whole smoke completed in 4:59 :)

[18:11] <masak> lucky you :)

[18:12] <gaal> that's just a spurious warning (which I'm in the middle of fixing), not an error

[18:21] *** araujo joined
[18:28] <gaal> hee, looks like I was wrong and so was 9630

[18:29] <gaal> createDirectory is failing with a alreadyExists exception, killing the caller (in this case, doMatch)

[18:30] <gaal> unfortunately, the paths are wrong, so switching to createDirectoryIfMissing True $ foldl1 (</>) [_cabal, "share", "Pugs-" ++ versnum] only yields a perl error

[18:30] <gaal> gotta go now :(

[18:39] *** pmurias joined
[18:40] <pmurias> ruoso: hi

[18:40] <ruoso> hi pmurias 

[18:40] <lambdabot> ruoso: You have 1 new message. '/msg lambdabot @messages' to read it.

[18:42] <pmurias> ruoso: what do you think about changing that (see @messages)?

[18:43] <ruoso> pmurias, it might be ok... I would keep the "eval" name for that tho

[18:43] <ruoso> but...

[18:43] <ruoso> how do you know when to stop the loop?

[18:43] <ruoso> has_next is still needed, isn't it

[18:43] <pmurias> when the eval returns false

[18:43] <ruoso> ?

[18:44] <ruoso> what if the expected return from the eval is false

[18:45] <pmurias> i don't understand

[18:46] <ruoso> eval returns the value returned by that step

[18:46] <pmurias> not in SLIME

[18:47] *** meppl joined
[18:47] <ruoso> hmm... indeed

[18:47] <pmurias> and i think we should abstract away the idea of step so we don't impose a particular implementation on interpreters

[18:49] <ruoso> that's ok... as long as we always return to the runloop instead of recursing

[18:49] <ruoso> and also that any object may "goto" another interpreter at any time

[18:51] *** alanhaggai joined
[18:59] <pugs_svn> r21736 | ruoso++ | [smop] sm0p.pl now uses non-blocking IO and no longer freezes waiting for a return of the compiler. 

[18:59] <ruoso> pmurias, test/22 no longer freezes

[19:01] <pmurias> ruoso: why did it block?

[19:02] <ruoso> no idea ;)... but making it non-blocking solved ;)

[19:05] <pugs_svn> r21737 | ruoso++ | [smop] test/22 passes :) :) :) :) :)

[19:08] <ruoso> btw... that means we have attributes already

[19:11] <pmurias> what will we do with/to slime once mold is ready?

[19:11] *** jferrero joined
[19:11] <ruoso> throw it away? :)

[19:11] <ruoso> slime was meant to be replaced

[19:12] <pmurias> good

[19:18] <pmurias> should constants in mold be virtual ro registers or be just used for setting defaults to registers

[19:19] <pmurias> ?

[19:19] *** Lorn joined
[19:23] <pmurias> constants here meaning  low level constants like 44 not high-levl constant $foo = 4

[19:23] <pmurias> * high-level

[19:48] <pmichaud> Aloha

[19:50] <pmurias> pmichaud: hi

[19:54] *** xinming joined
[20:18] *** japhb joined
[20:29] *** jan__ joined
[20:43] *** cathyal joined
[20:50] <pugs_svn> r21738 | pmichaud++ | S29-trig/trig.t:  remove skip marker from atan2 tests.

[21:07] <pmurias> c--

[21:30] *** lambdabot joined
[21:30] *** ruoso joined
[21:31] * ruoso back

[21:35] <pmurias> ruoso: do the frame receive correct interpreters to their methods?

[21:36] <ruoso> yes

[21:37] <pmurias> are you aware that test 09 fails sometimes?

[21:39] <pugs_svn> r21739 | pmurias++ | [smop] added Mold.Frame, it's currently a battleground with segfaults but comit early, commit often...

[21:39] <gaal> @tell audreyt I think getDataFileName isn't working: or rather, that the modules looked for there aren't being found. this is causing RE matches to fail

[21:39] <lambdabot> Consider it noted.

[21:40] *** explorer__ joined
[21:41] <gaal> @tell audreyt also, the particular path is wrong; we create a cabal_ </> Pugs-... but return _cabal </> "Pugs-" ... </> fn

[21:41] <lambdabot> Consider it noted.

[21:41] <gaal> @tell audreyt anyway, my ~/.cabal has none of the actual files we want.

[21:41] <lambdabot> Consider it noted.

[21:45] <ruoso> pmurias, I am, but I have not a single clue on why it does...

[21:45] * ruoso dinner

[22:29] *** hercynium joined
[22:45] *** Alias__ joined
[23:19] <ruoso> pugs: module Foo { my &foo; sub foo { }; };

[23:19] <p6eval> pugs: RESULT[\:() {}{Prim ([Pugs.AST.Internals.Val] -> Pugs.AST.Eval.Eval Pugs.AST.Internals.Val)}]

[23:19] <ruoso> pugs: module Foo { my &foo = sub { 1 }; sub foo { 2 }; }; say Foo::foo();

[23:19] <p6eval> pugs: OUTPUT[*** Can't modify constant item: VStr "MkCode {isMulti = True, subName = \"&\", subType = SubPrim, subOuterPads = [], subInnerPad = MkPad (padToList []), subPackage = , subAssoc = AIrrelevantToParsing, subParams = [], subBindings = [], subSlurpLimit = [], subReturns = (mkType \"An...

[23:21] <ruoso> do Package hold different storages for the subs and global variables?

[23:22] *** hercynium joined
[23:24] <ruoso> or is that just like p5, where package subs are just a special type of package variable

[23:50] *** ruoso joined
