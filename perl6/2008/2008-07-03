[00:03] *** elmex left
[00:05] *** bacek joined
[00:29] *** broquaint left
[00:38] *** ruoso joined
[00:50] *** felipe joined
[01:04] *** planofish left
[01:05] *** a-jin1 joined
[01:05] *** a-jin1 left
[01:09] *** alester_ joined
[01:17] *** alanhaggai joined
[01:24] *** planofish joined
[01:54] *** jferrero left
[02:03] *** justatheory joined
[02:20] *** Eevee left
[02:30] *** Eevee joined
[02:36] *** planofish left
[02:37] *** planofish joined
[02:43] *** xinming left
[02:44] *** xinming joined
[02:48] *** Alias_ left
[02:50] *** dduncan joined
[03:00] *** xinming_ joined
[03:00] *** PZt joined
[03:03] *** kanru left
[03:05] *** xinming_ left
[03:09] *** xinming_ joined
[03:09] *** justatheory left
[03:12] *** xinming left
[03:35] *** sri_work left
[03:39] *** BinGOs left
[03:39] *** kanru joined
[03:39] *** BinGOs joined
[03:40] *** snooper joined
[03:41] *** cls_bsd left
[03:44] *** cls_bsd joined
[03:44] *** BinGOs left
[03:45] *** publius_ joined
[03:47] *** publius_ left
[03:52] *** pbuetow_ left
[03:52] *** kanru left
[03:55] *** kanru joined
[03:58] *** kanru left
[04:02] *** kanru joined
[04:03] <TimToady> moritz_: no particular speed goal for STD5 other than "fast enough to bootstrap something else"

[04:04] <TimToady> most of the slowness comes from using almost none of the built-in Perl 5 regex engine

[04:05] <TimToady> so presumably with better builtin support of P6 regexes we can get to something approaching the speed at which gimme5 parses STD.pm

[04:05] <TimToady> alternately, we can speed up STD5 by doing more aggressive ratchet optimizations to discover more spots that can map directly into P5 regexen

[04:06] <TimToady> but the overriding goal of STD5 was to implement correct semantics rather than fast

[04:10] <TimToady> gah, the firewall here doesn't allow PROPFIND, so I can't get at svn directly... :(

[04:16] *** Ara5n joined
[04:17] *** [particle]1 joined
[04:18] *** jfredett_ joined
[04:19] *** felipe left
[04:19] *** lisppaste3 left
[04:19] *** bacek_ left
[04:19] *** wknight8111 left
[04:19] *** [particle] left
[04:19] *** hcchien left
[04:19] *** awwaiid left
[04:19] *** moritz_ left
[04:19] *** IRSeekBot left
[04:19] *** revdiablo left
[04:19] *** nnunley left
[04:19] *** yath left
[04:19] *** Ara4n left
[04:19] *** Gothmog_ left
[04:19] *** Juerd left
[04:19] *** clkao left
[04:19] *** obra left
[04:19] *** wknight8111 joined
[04:20] *** lisppaste3 joined
[04:20] *** bacek_ joined
[04:20] *** [particle] joined
[04:20] *** hcchien joined
[04:20] *** awwaiid joined
[04:20] *** moritz_ joined
[04:20] *** revdiablo joined
[04:20] *** clkao joined
[04:20] *** obra joined
[04:20] *** Gothmog_ joined
[04:20] *** Ara4n joined
[04:20] *** yath joined
[04:20] *** nnunley joined
[04:20] *** Juerd joined
[04:20] *** yath left
[04:20] *** yath joined
[04:20] *** nnunley left
[04:21] *** nnunley_ joined
[04:21] *** moritz_ left
[04:21] *** moritz_ joined
[04:21] *** revdiablo left
[04:21] *** Gothmog_ left
[04:21] *** Gothmog_ joined
[04:22] *** awwaiid_ joined
[04:22] *** IRSeekBot joined
[04:25] *** Gothmog_ left
[04:25] *** yath left
[04:25] *** Ara4n left
[04:25] *** bacek_ left
[04:25] *** [particle] left
[04:25] *** Juerd left
[04:25] *** hcchien left
[04:25] *** awwaiid left
[04:25] *** clkao left
[04:25] *** obra left
[04:25] *** lisppaste3 left
[04:27] *** Juerd joined
[04:28] *** hcchien joined
[04:29] *** obra joined
[04:29] *** clkao joined
[04:29] *** xinming joined
[04:30] *** jfredett left
[04:32] *** Gothmog_ joined
[04:32] *** yath joined
[04:32] *** lisppaste3 joined
[04:32] *** bacek_ joined
[04:32] *** [particle] joined
[04:32] *** awwaiid joined
[04:32] *** Ara4n joined
[04:33] *** yath_ joined
[04:33] *** awwaiid left
[04:34] *** yath left
[04:35] *** Gothmog_ left
[04:35] *** Ara4n left
[04:35] *** Gothmog_ joined
[04:36] *** [particle] left
[04:41] *** xinming_ left
[04:42] *** xinming_ joined
[04:46] <rakudo_svn> r28991 | pmichaud++ | [rakudo]:

[04:46] <rakudo_svn> r28991 | pmichaud++ | * Clean up placeholder variable actions.

[04:48] *** xinming__ joined
[04:56] *** xinming left
[04:58] *** cls_bsd left
[05:00] *** xinming joined
[05:00] *** xinming_ left
[05:06] *** xinming__ left
[05:07] <rakudo_svn> r28992 | pmichaud++ | [rakudo]:  change 'process_contextualizer' to 'contextualizer_name'

[05:08] *** xinming left
[05:08] *** xinming joined
[05:13] *** iblechbot left
[05:17] *** alester_ left
[05:29] *** cls_bsd joined
[05:29] <rakudo_svn> r28995 | pmichaud++ | [rakudo]: methods should be .blocktype('method') instead of using pirflags

[05:29] *** wknight8111 left
[05:29] *** dduncan left
[05:39] *** Psyche^ joined
[05:47] *** xinming left
[05:50] *** Patterner left
[05:50] *** Psyche^ is now known as Patterner

[05:51] *** xinming joined
[06:00] *** skor joined
[06:09] *** [particle] joined
[06:15] *** [particle]1 left
[06:34] *** xinming_ joined
[06:37] *** planofish left
[06:47] *** xinming left
[06:57] *** xinming joined
[07:02] *** PZt left
[07:07] *** alegor joined
[07:09] *** nipotan is now known as nipotaway

[07:09] *** xinming__ joined
[07:15] *** xinming__ left
[07:15] *** xinming__ joined
[07:22] *** xinming left
[07:22] *** xinming_ left
[07:31] *** xinming joined
[07:39] <pugs_svnbot> r21171 | moritz++ | [spec] unfudged a passing test, autounfudge++

[07:39] *** penk joined
[07:39] *** penk left
[07:42] *** penk joined
[07:43] *** rindolf joined
[07:47] *** elmex joined
[07:49] *** BinGOs joined
[07:56] *** xinming__ left
[08:37] *** bacek__ joined
[08:39] *** bacek_ left
[08:40] *** meppl joined
[08:45] *** bacek left
[08:49] *** xinming_ joined
[08:53] *** jferrero joined
[08:55] *** eternaleye left
[08:57] *** xinming__ joined
[09:02] *** xinming left
[09:07] *** jan__ left
[09:09] *** luqui joined
[09:11] *** xinming_ left
[09:12] *** broquaint joined
[09:18] *** luqui left
[09:29] *** chris2 joined
[09:43] *** alegor left
[09:55] *** bacek_ joined
[09:57] *** meppl left
[09:57] *** bacek__ left
[09:58] *** bacek_ left
[10:03] *** meppl joined
[10:11] *** bacek joined
[10:19] *** barney joined
[10:47] *** wknight8111 joined
[11:00] *** Schwern joined
[11:21] *** wknight8111 left
[11:25] <pugs_svnbot> r21172 | moritz++ | [t/TASKS] add todo for junction tests

[11:40] <pugs_svnbot> r21173 | moritz++ | [t] statements/for.t: major cleanup

[11:43] <pugs_svnbot> r21174 | moritz++ | [spec] moved for.t to spec/, updated POD

[11:52] <pugs_svnbot> r21175 | moritz++ | [spec] fudged for.t. Fails with 'Null PMC access in type()'

[12:05] *** alanhaggai left
[12:06] *** sunnavy joined
[12:07] *** felipe joined
[12:13] <pugs_svnbot> r21176 | moritz++ | [spec] enhanced index.t a bit

[12:15] <rakudo_svn> r29006 | moritz++ | [rakudo] implement Str.index, patch curtesy by bacek++ (Vasily Chekalkin)

[12:21] <rakudo_svn> r29007 | moritz++ | [rakudo] add S29-str/index.t to spectest_regression.

[12:21] <rakudo_svn> r29007 | moritz++ | bacek++ for implementing

[12:28] *** barney left
[12:41] *** BinGOs left
[12:47] *** BinGOs joined
[12:49] <rakudo_svn> r29008 | pmichaud++ | [rakudo]: coding stds in src/classes/Str.pir .

[12:49] *** |Jedai| joined
[12:56] <pugs_svnbot> r21177 | moritz++ | [spec] improved fudge messages in log.t

[12:56] <pugs_svnbot> r21178 | ruoso++ | [SMOP] p6opaque delegates method calls to the how (still not working)

[12:56] <pugs_svnbot> r21179 | ruoso++ | [SMOP] p6opaque now uses sm0p block, so needs to be renamed

[12:59] <pugs_svnbot> r21180 | ruoso++ | [SMOP] updating Makefile.am

[13:01] <ruoso> interesting... it's the first time I write a long block of sm0p code that simply works at first attempt

[13:02] <moritz_> ruoso: that's called "practise" ;-)

[13:03] <ruoso> it seems that p6opaque is succesfully dispatching non-repr calls to the metaclass

[13:05] <pugs_svnbot> r21181 | moritz++ | [spec] fixed complex log10() tests

[13:06] *** Jedai left
[13:11] *** sunnavy left
[13:12] *** sunnavy joined
[13:15] *** cmarcelo joined
[13:22] *** jfredett joined
[13:23] *** wknight8111 joined
[13:33] *** TJCRI joined
[13:34] *** jfredett_ left
[13:36] <rakudo_svn> r29010 | pmichaud++ | [rakudo]: spectest-progress update: 83 files, 1365 passing tests

[13:38] <ruoso> @tell pmurias, can you please provide me some guidance on how to use your sm0p parser? the kp6 parser is too much slow, and p6opaque already have two blocks... so it's starting to be a real pain....

[13:38] <moritz_> wohoo - that makes our graph look quite nice

[13:38] <lambdabot> Consider it noted.

[13:40] <pmichaud> http://www.pmichaud.com/perl6/rakudo-tests-2008-07-03.png

[13:40] <moritz_> or on http://rakudo.de/

[13:41] <lambdabot> Title: Rakudo - A Perl 6 Compiler

[13:50] *** rdice joined
[13:55] <moritz_> ruoso: it seems that pmurias either forget to commit a file, or his 'brew' script is wrong

[13:57] <ruoso> hmm

[13:57] <ruoso> sm0p.pl takes forever to parse p6opaque.sm0p now that it has two blocks

[13:57] <moritz_> (I'm talking about misc/sm0p/ )

[13:59] <ruoso> moritz_, I know... 

[14:05] <ruoso> $ (cd src; time perl ../sm0p.pl .. p6opaque.sm0p p6opaque.c) --> real    1m6.884s, user    1m6.360s

[14:05] <ruoso> gah

[14:06] <moritz_> that's a good reason to switch to elf ;)

[14:08] <pugs_svnbot> r21182 | ruoso++ | [smop] some more work in p6opaque, delegation almost working... I need to finish the "setting how" method, so I can effectively test the delegation

[14:15] *** Ontolog joined
[14:15] <Ontolog> Which is more complete Rakudo or Pugs?

[14:16] <SamB> isn't there some kind of test status comparison page which would allow you to form your own answer to that question?

[14:17] <vixey> Pugs

[14:17] <moritz_> Ontolog: pugs

[14:17] <Ontolog> Thanks

[14:17] <moritz_> pugs passes well over ten thousand tests in the official test suite, rakudo 1300 or something

[14:18] <Ontolog> Is the Perl 6 specification still being worked on?

[14:18] <moritz_> yes

[14:18] <Ontolog> or is everything now just to be implemented?

[14:18] <Ontolog> i see

[14:18] <SamB> and pugs spawned the testsuite, didn't it?

[14:18] <PerlJam> Well ... to be fair, the "official test suite" was written for pugs originally, so there may be bogus tests in there since the design has changed 

[14:18] <pmichaud> implementation issues often cause minor tweaks to the specification

[14:18] <pmichaud> and I always think of the "official test suite" as t/spec

[14:19] <pmichaud> (which doesn't have 10,000 tests in it yet :-)

[14:19] <DietCoke> PerlJam: that just means that when rakudo overtakes pugs, it will do so violently.

[14:19] <Ontolog> haha sorry i started a flame war

[14:19] <moritz_> PerlJam: yes, that why said "well over 10k", not "roughly 17k" ;)

[14:19] <pmichaud> moritz_++

[14:19] <DietCoke> ah, I like pmichaud's way of thinking. =-)

[14:19] <moritz_> Ontolog: no flame, just discussion

[14:19] <DietCoke> we're all friends here. =-)

[14:19] <pmichaud> Ontolog: we're still clarifying terms among ourselfs

[14:19] <pmichaud> *ourselves

[14:20] <Ontolog> Is there a CPAN for Perl 6?

[14:20] <pmichaud> SamB: yes, pugs spawned the test suite

[14:20] <moritz_> not yet

[14:20] <vixey> yes CPAN

[14:20] <PerlJam> Ontolog: yes, it's called CPAN  :)

[14:20] <Ontolog> haha

[14:20] <moritz_> vixey: where?

[14:20] <Ontolog> are you serious?

[14:20] <SamB> cpan.org isn't it ?

[14:20] <Ontolog> shouldn't there be like a seperate CPAN just for perl 6?

[14:20] <vixey> moritz_: There's no Perl 6 yet.. but when there is it will work with CPAN

[14:20] <SamB> why?

[14:20] <moritz_> SamB: I see no perl 6 modules on cpan (only perl 5 moduls named Perl6::)

[14:20] <SamB> doesn't it just have a seperate namespace or something?

[14:21] <vixey> Ontolog: that sounds like a bad idea

[14:21] <SamB> oh.

[14:21] <pmichaud> we'll undoubtedly need some way to distinguish perl 6 modules from perl 5 ones

[14:21] <moritz_> current cpan.org and CPAN.pm doesn'T have a way to tell which language a module is written in

[14:21] <SamB> so that will need some redesign

[14:21] <moritz_> Ontolog: the plan for CPAN6 is to allow packaging of modules in arbitrary languages

[14:21] <SamB> and those Perl6:: modules are going to confuse matters

[14:21] <SamB> oh, so CPAN6 will replace Debian?

[14:22] * pmichaud goes back to working on implicit vars

[14:22] <PerlJam> SamB: no.

[14:22] <moritz_> SamB: no

[14:22] <SamB> hehehehe

[14:22] <moritz_> SamB: Debian is mostly there for binary distribution

[14:22] <SamB> Gentoo?

[14:22] <Ontolog> I see, so there will indeed be a separate CPAN :p

[14:22] <PerlJam> Assuming everything works as we intend, CPAN will likely keep it same name, only the P will change meaning  

[14:22] <moritz_> Ontolog: well, we don't know yet if we morph existing CPAN into what we want it to be, or rewrite it and embrace the old stuff

[14:22] <SamB> but it will probably be hosted on cpan6.org

[14:23] <moritz_> SamB: both Debian and Gentoo are OS-Specific

[14:23] <Ontolog> ok here's a better question, if I were to write a Perl 6 module that I wanted to share, where would I put it?

[14:23] <SamB> sadly so :-(

[14:23] <PerlJam> Ontolog: CPAN.

[14:23] <moritz_> Ontolog: currently in the pugs repo

[14:23] <SamB> Ontolog: in a public repository

[14:23] <moritz_> Ontolog: that's where other Perl 6 modules live as well

[14:23] <SamB> which can be contributed to easily

[14:24] <PerlJam> Ontolog: or anywhere else you like.

[14:24] <SamB> maybe pugs repository needs a rename?

[14:24] <moritz_> SamB: why?

[14:24] <SamB> if it has everything perl6

[14:24] <moritz_> SamB: everybody(tm) knows it hosts much more than pugs ;)

[14:24] <SamB> how about perl6fun

[14:24] * pmichaud looks at perl6fun.org

[14:24] <moritz_> not found

[14:25] <moritz_> GO GRAB IT!

[14:25] <SamB> grr

[14:25] <SamB> why did verisign have to go and give my ISP ideas???

[14:26] <SamB> % host perl6fun.org

[14:26] <SamB> perl6fun.org        	A	65.200.200.35

[14:26] <SamB> perl6fun.org        	A	63.251.179.51

[14:26] <moritz_> SamB: I hope you didn't use a browser? that's what 'whois' is for

[14:26] <moritz_> SamB: ok, that sucks mightily

[14:26] *** a-jin1 joined
[14:26] *** a-jin1 left
[14:26] <moritz_> Ontolog: if you want to put something perl 6 related into the pugs repo, you can easily get a commit bit

[14:27] <SamB> moritz_: indeed, you would be hard pressed to avoid one

[14:34] <Ontolog> moritz_: I was just thinking today about doing something with Perl6

[14:34] <Ontolog> moritz_: but I'm not sure what haha

[14:35] <Ontolog> moritz_: are you guys at the point where you are writing Perl6 modules to implement parts of the standard or is the whole thing in Haskell?

[14:36] <moritz_> Ontolog: pugs is written in haskell, but has a prelude (ie standard library) in Perl6...

[14:36] <PerlJam> Ontolog: As far as I'm concerned, rakudo is perl 6 and pugs is an interesting prototype :)

[14:36] <pmichaud> rakudo is currently writing the major components of the compiler in Perl 6

[14:36] <moritz_> Ontolog: but pugs isn't being worked on

[14:36] <moritz_> pmichaud: except runtime.

[14:36] <Ontolog> hmm

[14:36] <pmichaud> moritz_: I don't consider the runtime as part of the compiler :-)

[14:36] <pmichaud> but yes, we'll be writing the runtime components in Perl 6 soon also

[14:36] <Ontolog> but there is nobody in #Rakudo

[14:37] <moritz_> which is slightly ironic, because that's where most compilers start to allow the usage of the native language

[14:37] <pmichaud> the rakudo folks hang out here or on irc.perl.org/#parrot

[14:37] <moritz_> Ontolog: that's because rakudo is being discussed either here or on #parrot on irc.perl.org

[14:37] <pmichaud> we don't need our own channel :-)

[14:37] <Ontolog> haha

[14:38] <Ontolog> but how am I going to write Perl 6 modules if Rakudo doesn't even implement most of the standard?

[14:38] <pmichaud> ...doesn't even implement most of the standard?

[14:38] <moritz_> use the subset that is already supoprted

[14:38] <Ontolog> moritz_: haha ok good idea

[14:38] <Ontolog> pmichaud: err maybe i'm wrong sorry

[14:39] <moritz_> for example most object orientation features are supported

[14:39] <PerlJam> Ontolog: how are you going to write Perl 6 modules if <insert any perl 6 compiler> doesn't implement most of the standard?  ;)

[14:39] <pmichaud> note that it's difficult to measure how much of a standard is implemented based on the size/composition of the test suite

[14:39] <Ontolog> what is Rakudo written in?

[14:39] <pmichaud> the compiler is Perl 6

[14:39] <pmichaud> the runtime libraries are PIR

[14:39] <PerlJam> pm: it's difficult to measure anything when everything is in flux :)

[14:39] <pmichaud> (so far)

[14:39] <Ontolog> PIR?

[14:40] <pmichaud> PIR is parrot's low-level language

[14:40] <Ontolog> shit

[14:40] <Ontolog> is it easier than Haskell?

[14:40] <moritz_> Ontolog: a variety of languages, which include NQP (not quite perl6), Perl 6 rules, PIR, C

[14:40] <pmichaud> *much* easier

[14:40] <moritz_> aye

[14:40] <pmichaud> and long-term we'll only be using PIR for the primitives

[14:40] <pmichaud> i.e., those things that can't be easily or efficiently written in Perl 6

[14:41] <Ontolog> but moritz_ said C

[14:41] <Ontolog> which parts are written in C?

[14:41] <pmichaud> there is some C, yes -- for very low-level types

[14:41] *** pmurias joined
[14:41] <pmurias> ruoso: ping

[14:41] <moritz_> Ontolog: the so-called "PMCs" or "Parrot Magical Cookies", which are parrot extensions

[14:42] <Ontolog> haha, you said PMCs

[14:42] <pmichaud> the only pieces written in C at the moment are Scalar containers and the string-to-number conversions

[14:42] * Ontolog has been playing MGS4 recently

[14:42] <Ontolog> I see, so the C parts are all done right?

[14:42] <pmichaud> well, there will undoubtedly be more as we try to improve efficiencies, but I'm trying to keep as much out of C as I can

[14:42] <PerlJam> Ontolog: nothing is "all done" yet :)

[14:43] <moritz_> Ontolog: considering that parrot is mostly written in C, and it's our runtime, I wouldn'T say "all done" ;-)

[14:43] <Ontolog> The special thing about the Parrot is that it can convert between one language and another right?

[14:43] <pmichaud> Parrot has a lot of special things :-)

[14:43] <pmichaud> but it's intended to be a runtime environment for multiple dynamic languages

[14:44] <pmichaud> so, it doesn't convert between languages as much as it allows them to run together

[14:44] <Ontolog> it's like a JVM right?

[14:44] <pmichaud> yes, but more dynamic

[14:44] <moritz_> yes and no

[14:44] <Ontolog> why not just compiler Perl6 code to JVM byte code?

[14:44] <pmichaud> because JVM isn't dynamic enough :-)

[14:44] <moritz_> Ontolog: because JVM doesn't suppport dynamic types very well

[14:44] <PerlJam> This sort of "education session" would make a good perl.com article (or something with wide distribution)

[14:45] <pmichaud> PerlJam:  ...write it!

[14:45] <Ontolog> haha

[14:45] <PerlJam> pm: wish I had the time to.

[14:45] <moritz_> Ontolog: and no continuations and stuff

[14:45] <Ontolog> Just post this IRC log

[14:45] <moritz_> I could make a summary of it

[14:45] <pmichaud> yeah, the IRC log itself is pretty good

[14:45] <pmichaud> Ontolog asks good questions in the right sequence :-)

[14:46] <Ontolog> haha thanks

[14:47] *** SamB left
[14:47] * pmichaud goes back to implicit vars.

[14:48] <ruoso> pmurias, I'm going for lunch now... I should be back in a hour, maybe a little more...

[14:49] <pmurias> ok

[14:49] *** SamB joined
[14:52] <[particle]> pmichaud: can't you take an .implicit_lunch?

[14:52] <pugs_svnbot> r21183 | pmurias++ | [sm0p] fixed brew

[14:54] * DietCoke is sure some intrepid soul will make a perl6 on JVM.

[15:00] <ruoso> DietCoke, the problem with that is that it will perform worst than Java... because it will be a runtime on top of another...

[15:01] * ruoso now really going for lunch

[15:11] *** penk left
[15:12] <Juerd> One of feather's hard drives just failed

[15:12] <moritz_> D'oh

[15:12] <Juerd> So I'm going to replace it quickly. If you have open files, save them :)

[15:12] <Juerd> (feather doesn't have hot swappable hardware)

[15:13] <SamB> Juerd: shutdown does display a message ;-P

[15:13] <moritz_> SamB: it's nice to inform us in advance nonetheless ;)

[15:13] <SamB> true, true

[15:14] <SamB> after all you might be wasting time on IRC rather than actively editing

[15:14] <SamB> but then, that's what autosave files are for

[15:14] <Juerd> SamB: I know, but from my experience, several people pay more attention to IRC than to wallmessages.

[15:15] <Juerd> And here, people who aren't logged in can also see what's going on.

[15:15] <Juerd> After all, you will see several people timeout after a while :)

[15:15] <Juerd> Or connection reset by peer, etc.

[15:18] <Ontolog> shit

[15:18] <Ontolog> I just installed parrot and I get: parrot: error while loading shared libraries: libparrot.so.0.6.3: cannot open shared object file: No such file or directory

[15:18] <Ontolog> what did I do wrong?

[15:19] <moritz_> Ontolog: can you run it locally? (ie ./parrot)

[15:22] *** pmurias left
[15:24] <[particle]> Ontolog: you installed parrot

[15:25] <Ontolog> yes did make install

[15:25] <Ontolog> after make test and and make and perl Makefile.PL

[15:25] <Ontolog> I will try to run it locally hold on

[15:25] <Ontolog> same result

[15:25] <[particle]> and you read what it says, about install not working well

[15:26] <[particle]> and you must run make reallyinstall if you really want to install it

[15:26] <Ontolog> i did

[15:26] <Ontolog> run reallyinstall

[15:26] <[particle]> well, ok then.

[15:26] <Ontolog> i read that it said if you want to develop parrot on the same machine it doesnt't work well

[15:26] <Ontolog> yes so what is the biff?

[15:26] <Ontolog> why can't it find the librarY?

[15:26] <[particle]> hrmm, maybe that message is confusing, then

[15:26] <Ontolog> /usr/local/lib does indeed have libparrot.so.0.6.3

[15:27] <[particle]> we parrot developers run parrot from the build directory

[15:27] <[particle]> none of us install it

[15:27] <Ontolog> haha

[15:27] <[particle]> if you want to have an installed parrot, and develop parrot, you're asking for trouble

[15:27] <Ontolog> well im not so much at the "wanting to develop parrot" stage yet

[15:27] <Ontolog> i'm more at seeing wtf it is all about

[15:28] <Ontolog> is there a make uninstall?

[15:28] <[particle]> no

[15:28] <[particle]> hence the problems

[15:28] <Ontolog> shit! you guys screwed me! I'm suiing

[15:28] <Ontolog> sueing!

[15:28] <Ontolog> haha

[15:28] <Ontolog> yeah running parrot in the build directory works

[15:28] <Ontolog> what a load of crap

[15:29] <Ontolog> how do I find and delete everything parrot under /usr/local?

[15:29] <Ontolog> I will run it from the build like you guys

[15:29] <[particle]> i'm a windows guy, mostly, so i won't be much help with that

[15:29] <Ontolog> sorry my what a load of crap statement not about parrot about my rushing into installing it haha

[15:30] <Ontolog> a windows guy working on Perl 6?

[15:30] <Ontolog> hehehe

[15:30] <Ontolog> did you every try linux (or bsd or some such)?

[15:30] *** edpratomo joined
[15:30] <[particle]> i have at least seven different linux virtual machines

[15:30] <Ontolog> i see

[15:31] <Ontolog> i like to run linux on the host and windows as a guest

[15:31] <[particle]> i've got BeOS running, too... well, Haiku anyway

[15:31] <Ontolog> so your not exactly "a windows guy" :p

[15:31] <DietCoke> ... you have to ignore a warning about not installing to install it. =-)

[15:31] <Ontolog> DietCoke: that warning was about not installing it and developing it at the same time!!!!!!!!!!111!!!1!!

[15:31] * DietCoke catches up.

[15:33] <Ontolog> it's cool I have the list of all the files that got installed

[15:33] <Ontolog> and I will delete all them shits

[15:34] *** wolv joined
[15:34] *** DietCoke left
[15:40] *** pugs_svnbot left
[15:40] *** dalek left
[15:40] *** wolverian left
[15:41] *** PerlJam left
[15:41] *** Juerd left
[15:41] *** pmichaud left
[15:52] *** cjfields joined
[15:52] *** agentzh left
[15:53] *** ruoso left
[15:54] *** rindolf left
[15:55] *** kanru left
[16:00] *** snooper is now known as pbuetow

[16:04] *** masak joined
[16:04] <masak> I've been thinking

[16:05] <masak> often enough I want to access adjacent elements in for loops

[16:05] <masak> it bugs me that I have to resort to an index variable just to acheive that

[16:05] *** ruoso joined
[16:06] <masak> is there a way I could get around this using Perl 6?

[16:06] <Auzon> for @array -> $a, $b {}

[16:06] <masak> Auzon: well, then I get them pairwise

[16:06] <masak> that's not exactly what I want

[16:07] <cjfields> is that working with Rakudo?

[16:07] <Auzon> Oh, processing multiple arrays in parallel?

[16:07] *** jan__ joined
[16:07] <cjfields> yes

[16:07] <masak> Auzon: that could be the solution, if I could shift the same array out of place one step

[16:07] <Auzon> I know where it is. Give me a minute

[16:07] <masak> I'm thinking something along the lines of for @a -> $e { ... $e.prev ... }

[16:07] <Auzon> oh. hm.

[16:08] <masak> but that's syntactically confusing, because .prev is more of a macro than a method on $e

[16:08] <Auzon> Let me check S04

[16:08] <moritz_> masak: my @x = ...; my @y = @x; @x.shift; for @x Z @y -> $a, $b { ... }

[16:09] <masak> moritz_: yes. that works

[16:10] <moritz_> or better, for @x Z @x[1..*] -> $a, $b {..}

[16:10] *** pmichaud joined
[16:10] <masak> now we're talking

[16:10] <moritz_> ;)

[16:10] <Auzon> There we go, that's like what I was thinking.

[16:10] <Auzon> only note is that the final element of @x is repeated in the second array

[16:11] <moritz_> is it? 

[16:11] <moritz_> perhaps @x Z @x[1..@x.end] then

[16:11] <Auzon> Or maybe that was with ranges instead

[16:11] *** dalek joined
[16:11] * masak likes Perl 6

[16:12] <moritz_> ranges don't sound Haskellish enough for that sort of problem ;)

[16:14] <Auzon> ok. zip stops as soon as the first one is exhausted

[16:14] *** cosimo left
[16:14] <moritz_> the first item in a smartlink, does it have to be =head1? or an arbitrary =head\d ?

[16:14] <Auzon> roundrobin can be used to avoid this issue

[16:14] <moritz_> after the L<S\d\d/ that is ;)

[16:15] *** Juerd joined
[16:15] *** wolverian joined
[16:15] *** PerlJam joined
[16:16] <Auzon> moritz_: I think it can match anything in the table of contents.

[16:16] <moritz_> Auzon: ok, thanks

[16:18] *** wolv left
[16:20] *** kanru joined
[16:22] <moritz_> Juerd++ # brining feather back up in about no time

[16:22] *** wknight8111 left
[16:22] <moritz_> even commitbit works again

[16:22] *** wknight8111 joined
[16:25] *** meppl left
[16:26] <Juerd> moritz_: I'm confused that you call this no-time

[16:27] <moritz_> Juerd: I did something in between, so the time had passed switfly ;-)

[16:27] *** cls_bsd left
[16:27] <Juerd> moritz_: So did I - we had a small power outage in one of our breaker/fuse groups

[16:28] <Juerd> The one that has feather, so the shutdown+powerup was nicely done around that. No suffering on feather, but plenty on 2 other machines.

[16:36] *** PZt joined
[16:37] *** justatheory joined
[16:39] *** barney joined
[16:40] <moritz_> wait. Where did our precious pugs_svnbot go?

[16:40] <Auzon> Good question

[16:40] <Auzon> I was just checking :)

[16:40] <moritz_> maybe I should start one on timtowtdi.org

[16:41] <Auzon> Who runs it normally?

[16:41] <moritz_> SLAVES says it's diakopter 

[16:41] <moritz_> but istr that he's on vacation

[16:42] *** justatheory left
[16:42] *** justatheory joined
[16:42] <Auzon> If Rakudo had sockets, I'd offer to make a pure Perl 6 one :P

[16:42] <Auzon> But yeah, we can start one on timtowtdi.org

[16:42] <moritz_> Auzon: do that. After you soc project ;-)

[16:43] <moritz_> s/you/your/

[16:43] *** pugs_svn joined
[16:43] <pugs_svn> r21183 | pmurias++ | [sm0p] fixed brew

[16:43] <pugs_svn> r21184 | Auzon++ | [gsoc_spectest] reorganization and smartlinks for filetest.t

[16:43] <pugs_svn> r21185 | moritz++ | [t] documentation updates:

[16:43] <pugs_svn> r21185 | moritz++ |  * first shot at t/HOWTO

[16:43] <pugs_svn> r21185 | moritz++ |  * updated t/README

[16:43] <pugs_svn> r21185 | moritz++ |  * mentioned Junction oddities in t/deprecated-syntax.pod

[16:43] <pugs_svn> r21185 | moritz++ |  * deleted an empty directory

[16:43] <pugs_svn> r21186 | Auzon++ | [gsoc_spectest] fixed broken smartlink, Auzon-- 

[16:45] <Auzon> thanks moritz_++ :)

[16:46] <moritz_> any idea why http://dev.pugscode.org/changeset/21186 is empty? svn diff shows it correctly

[16:46] <lambdabot> Title: Changeset 21186 - Pugs - Trac

[16:46] <Auzon> It's a whitespace change

[16:47] <Auzon> apparently.

[16:47] <Auzon> All I did was bang on the link until it works

[16:47] <moritz_> oh yes, and I had the "ignore whitspace changes" box ticked

[16:47] <Auzon> To be fair, I didn't see the change when editing either :P

[16:48] <moritz_> it could be freakin' unicode non-breaking space

[16:48] *** justatheory left
[16:48] <moritz_> and once you did a copy & paste it worked

[16:48] <Auzon> I had to copy/paste from ack's output, though. My browser didn't copy it the same

[16:49] <moritz_> (Auzon's browser)--

[16:49] <Auzon> IWBNI whitespace didn't matter when matching

[16:50] <pugs_svn> r21187 | Auzon++ | fixed some POD errors

[16:50] <moritz_> I think that double quotes causes them to be matched more liberally

[16:51] <Auzon> Interesting

[16:51] <moritz_> don't know if it actually works ;)

[16:52] <moritz_> Auzon: thanks for the fixes

[16:52] <moritz_> Auzon: what do you think of t/HOWTO?

[16:52] <Auzon> I like it :)

[16:52] <moritz_> it should be enhanced a bit

[16:53] <Auzon> Yeah, I'll see if I can find anything to add

[16:53] <moritz_> biggest problem is that I don't know how much knowledge from the reader I can assume

[16:53] <moritz_> I planned to add something about putting related test in blocks to ease fudging

[16:53] <moritz_> but I didn't have the motivation to explain fudging ;-)

[16:54] <moritz_> anyway, ISTR that pmichaud wanted to blog about something similar, maybe it's a start for him

[16:55] <Auzon> Did you read his post about how the test suite improved significantly recently? We got some nice press :)

[16:56] *** |Jedai| left
[16:56] <moritz_> aye, I did ;)

[16:57] <Auzon> I think what he talked about was a followup to that post

[16:57] <moritz_> if you look at that progress graph, the yellow curve is our doing

[16:57] <moritz_> (mostly)

[16:57] <moritz_> the green one is combined effort of testers and implementors

[17:00] *** TJCRI left
[17:01] <masak> moritz_++ Auzon++

[17:02] *** meppl joined
[17:02] <moritz_> @karma Auzon

[17:02] <lambdabot> Auzon has a karma of 13

[17:03] <moritz_> lambdabot: you lost

[17:03] <moritz_> perlbot: karma Auzon

[17:03] <perlbot> Karma for Auzon: 106

[17:03] <moritz_> much better

[17:04] <moritz_> http://irclog.perlgeek.de/perl6/2008-05-22#i_306074

[17:04] <lambdabot> Title: IRC log for #perl6, 2008-05-22

[17:04] <Auzon> Yeah, I remember that ;)

[17:09] <moritz_> Auzon: do you happen to have German ancestors? your name sounds a bit like it ;)

[17:09] <Auzon> Yep, I do

[17:10] *** Schwern left
[17:10] <Auzon> I don't know if I still have close relatives in Germany, but I do have some in England.

[17:10] <Auzon> (where close is roughly 4 steps)

[17:10] <moritz_> ;)

[17:12] <moritz_> 4 steps isn't all that much, considering that cousins are already 3 steps away

[17:13] <Auzon> ok, well, maybe <10 steps then :P

[17:13] <masak> Juerd recently taught me the necessity of decode/encode of all string data that crosses the I/O barrier of a program. what's the lay of the land in Perl 6 re the same thing? do we still decode/encode?

[17:14] <moritz_> masak: Str is a decoded string

[17:14] <masak> which in practice means...?

[17:14] <moritz_> masak: I think that the IO stuff isn't fully specced, but the language design very strongly encourage the usage of Str over Buf

[17:15] <moritz_> masak: so you'll probably add an encoding information on open()

[17:15] <masak> as in Perl 5, then

[17:15] <moritz_> in this respect yes

[17:16] <moritz_> but what's different is that you have different data types for text strings (Str) and byte strings (Buf)

[17:16] <moritz_> which means that if you write a sub foo(Str $x), you force everybody who uses that to decode their strings

[17:16] <masak> I'm not sure I see how that translates to real code

[17:17] <masak> and what if I don't give my variable a type, what then?

[17:17] <moritz_> neither am I

[17:17] <moritz_> masak: oh, you will. When you want to match a string against a regex, you'll want it to be a Str

[17:18] <Juerd> moritz_: Well, using Str over Buf because it's recommonded is a stupid idea. Using it because it matches what you're doing is much better.

[17:18] <masak> would a literal "like this" be a Str?

[17:19] <moritz_> masak: string literals are Str

[17:19] <Juerd> And where you have I/O, you have bytes, thus Bufs.

[17:19] <Juerd> And some conversion (that is: decoding/encoding) is necessary.

[17:19] <Juerd> The nice thing here is that Buf know their encoding

[17:19] <masak> what does my Bufs = "encode me"; do re encoding?

[17:20] <masak> oops, my Buf $buf = "encode me";

[17:20] <Juerd> masak: Use the default encoding, which'll probably be either something that fails on everything, or ISO-8859-1, or UTF-8

[17:20] <masak> what decides? how would I know?

[17:20] <Juerd> masak: Larry does

[17:21] <masak> :)

[17:21] <moritz_> Juerd: so it's not locale dependent?

[17:21] <Juerd> I'm hoping for "something that fails on everything".

[17:21] <Juerd> moritz_: Locale dependent would be good only for STDIO.

[17:21] <Juerd> moritz_: And there I wish that locales are only used when explicitly requested.

[17:21] <Juerd> It doesn't make sense all of the time.

[17:22] <Juerd> For example, if stdin is a file, it makes no sense to make it locale dependent -- the file might be encoded with whatever the locale was when the file was written, but that information is *lost*, so it's better to specify a single encoding than to rely on heuristics.

[17:23] <Juerd> "Assume that it hasn't changed" is stupid. If you assume that things never change, you wouldn't need to store things in a file :)

[17:24] <moritz_> you do store pi in a file, although it'll never change ;)

[17:25] <smtms> you never know. someone might discover that pi is dependent on speed just like mass is

[17:26] <masak> pi is dependent on local curvature :)

[17:27] <moritz_> smtms: no. That's the difference between math and physics. ;-)

[17:27] <moritz_> masak: not pi, only the ratio between circle circumfence and diameter

[17:28] <smtms> btw, you are not storing pi in a file, but just a finite approximation of it

[17:28] <masak> moritz_: good point

[17:28] *** jferrero left
[17:28] <masak> but then you need a new name for that ratio. lots of people call it 'pi'

[17:29] *** masak left
[17:30] <Juerd> moritz_: I wonder though how localedependent pi is ;)

[17:30] <Juerd> Does it get reset back to 22/7 when you set it to ancient greek? :)

[17:33] <moritz_> not pi again.. they'll just parameterize the ratio depending on the curvature

[17:40] <ruoso> hmpf.... pmurias already gone away...

[17:48] *** silug left
[17:50] <moritz_> ruoso: but he fixed something in the mean time

[17:50] <ruoso> hmm... I'll take a look... thanks

[17:51] <moritz_> 'sh brew' now works (if you have perl 5.10.0 installed and as the default 'perl' in $PATH)

[17:53] <ruoso> cool

[18:04] *** Alias_ joined
[18:06] *** nnunley_ is now known as nnunley

[18:14] *** peepsalot joined
[18:21] *** cjfields left
[18:22] *** charsbar left
[18:22] *** charsbar joined
[18:29] *** eternaleye joined
[18:45] *** nipotaway is now known as nipotan

[18:48] *** skor left
[18:54] <Auzon> moritz_: I'm working on moving operators/arith.t into the spec, but it's a pain to fudge since it uses its own testing routines. Do you have any suggestions?

[18:55] <moritz_> Auzon: first move it

[18:55] <moritz_> Auzon: when you have done the move, I'll take a look

[18:55] <Auzon> OK

[18:57] *** pmurias joined
[18:57] <pmurias> ruoso: i'm back again ;)

[18:57] <ruoso> cool

[18:58] <ruoso> would you like to test replacing the sm0p parser by yours?

[18:58] <pmurias> tried it already

[18:59] <pmurias> my parsers has nasty bugs with the code emitting

[18:59] <Auzon> moritz_: done

[18:59] <Auzon> or should be in a second

[18:59] <pmurias> nasty bugs means stringing array refs

[19:00] <moritz_> At revision 21187.

[19:00] <Auzon> Yeah, svn-- is hanging

[19:01] <Auzon> ok, done

[19:01] <pugs_svn> r21188 | Auzon++ | [gsoc_spectest] staging commit for fudging arith.t

[19:02] <pmurias> ruoso: KP6sm0p.p6 is the proper thing to use?

[19:02] <ruoso> yes

[19:03] <pmurias> i'll copy that over and try to make it work

[19:03] <ruoso> take a look at sm0p.pl in the parent directory

[19:04] <ruoso> it calls the compiled one

[19:04] <ruoso> KP6sm0p.pl

[19:04] <ruoso> but you could change sm0p.pl to call the appropriate script

[19:07] <moritz_> Auzon: I'm now trying to fudge it. Part of the trick is to use #?DOES for the tryeq and tryok subs

[19:10] <Auzon> So what does DOES do?

[19:10] *** pmurias left
[19:11] *** pmurias joined
[19:11] <moritz_> it says "this sub or block is equivalent to $x tests"

[19:11] <moritz_> #?DOES $x at least

[19:11] <moritz_> so it basically register it as a known test function

[19:11] <Auzon> cool

[19:11] <Auzon> fudge++

[19:13] <moritz_> I'm now at 175/190 tests (run or skipped)

[19:14] <pugs_svn> r21189 | moritz++ | [spec] started to fudge artih.t - got rid of all compilation and run time

[19:14] <pugs_svn> r21189 | moritz++ | errors, doesn't PASS yet

[19:15] <moritz_> Auzon: we can remove tryok, because todo is now handled differently

[19:17] <moritz_> Auzon: same with tryeq, I think - it's just a fancy "is" that's not needed anymore

[19:18] *** vixey left
[19:18] *** vixey joined
[19:19] <Auzon> tryeq uses ==, and is uses eq for comparisons. Does that matter?

[19:20] <moritz_> good point

[19:20] <moritz_> I'll keep tryeq for a moment

[19:20] <moritz_> s/a/the/

[19:20] <Auzon> But we should be able to replace tryeq with one line or so.

[19:22] <moritz_> aye

[19:23] <Auzon> Are you still working on it, or can I take over?

[19:23] <moritz_> wait a second, I'll make a commit

[19:23] <Auzon> ok

[19:23] <moritz_> then you can take over

[19:23] <Auzon> Great :)

[19:23] <pugs_svn> r21190 | moritz++ | [spec] arith.t more fudging, not quite there yet

[19:24] <moritz_> Auzon: it's yours ;-)

[19:26] <moritz_> and it's really ugly to fudge, because it doesn't have too many test description, so it's hard to find the failing tests in the source file

[19:26] <Auzon> yep

[19:27] <moritz_> but you aked for it ;)

[19:28] <Auzon> I can use the same way I use to check for what line is causing a parsefail

[19:29] <moritz_> well, parsefail gives you a line number immediately ;)

[19:29] <moritz_> that's why I love them

[19:29] <Auzon> Not the one I had yesterday :-/

[19:29] <Auzon> er, Tuesday

[19:33] *** cj joined
[19:33] *** lambdabot left
[19:33] <cj> TimToady: so, by "There's more than one way to do it" do you mean "We just hacked something together, and it may work in mysterious ways"?

[19:34] <PerlJam> cj: that's an odd interpretation.

[19:35] <moritz_> perl has been remarkably successful with its Timtowtdi approach, and not all of it seems like "hacked something together" ;-)

[19:37] *** barney left
[19:38] <cj> PerlJam: heh.  blame the guy sitting next to me :)

[19:39] <cj> PerlJam: hey, go update this... maybe reify what I've said...

[19:41] <Auzon> moritz_: I found a way to get a bit of a hint on what line to look at by having tryeq report the $lhs and $rhs :)

[19:49] <pmurias> TimToady: a|b is broken in gimme5

[19:51] <moritz_> pmurias: how so? it's parsed as inifx:<|>(a, b) it seems

[19:51] <Auzon> heh. Rakudo does poorly on these corner cases. 121 skip, 69 pass.

[19:51] <pmurias> token foo {a|b}

[19:52] <moritz_> pmurias: ah, I thought you meant 'a|b' as input

[19:52] <pmurias> return 1 instead of proper match objects

[19:52] *** iblechbot joined
[19:52] <moritz_> Auzon: mostly it doesn't do Inf and NaN yet

[19:52] <Auzon> The UV/IV tests hurt too

[19:53] <moritz_> aye. How lucky sombody wrote them already ;-)

[19:53] <cj> PerlJam: http://en.wikipedia.org/wiki/Rob_Levin#.23LinPeople_an_The_Linux_Internet_Support_Co-Operative

[19:53] <pugs_svn> r21191 | Auzon++ | [gsoc_spectest] fudged arith.t for Rakudo

[19:53] <Auzon> moritz_: You can add this file to the spectest_regression list now :)

[19:54] <moritz_> Auzon: running spectest_regression now. If it passes here, I'll commit it

[19:56] <Auzon> great :)

[19:56] <Auzon> only ~11000 tests left outside of spec/ ;)

[19:56] <moritz_> my crappy ISP disconnects me every ~30s

[20:00] *** Chillance joined
[20:00] <moritz_> 4 TODO passed

[20:01] <Auzon> Cool :)

[20:02] <pugs_svn> r21192 | moritz++ | [spec] use is_approx() instead of tryeq_sloppy for two tests, and remove their

[20:02] <pugs_svn> r21192 | moritz++ | TODO marking

[20:03] * moritz_ runs the tests again, and gets some food in the mean time

[20:08] <pugs_svn> r21193 | pmurias++ | [sm0p] initial version of the new grammar

[20:11] <pugs_svn> r21194 | pmurias++ | [smop] added a SM0P_FASTER env var to used the new parser

[20:12] <ruoso> pmurias++ 

[20:12] <pmurias> i'm now getting autotools to check if the new parser actually works

[20:13] *** Jedai joined
[20:13] <ruoso> :)

[20:15] <pmurias> ruoso: have you tried it yourself

[20:16] <ruoso> not yet...

[20:16] <ruoso> still getting the dependencies

[20:16] <pmurias> fixing bugs...

[20:22] <pmurias> other people want to use the internet&

[20:22] *** pmurias left
[20:22] <rakudo_svn> r29035 | moritz++ | [rakudo] added S03-operators/arith.t to spectest_regression. Auzon++

[20:23] *** edpratomo left
[20:24] *** lambdabot joined
[20:26] <pugs_svn> r21195 | moritz++ | [spec] un-TODO two more tests in arith.t

[20:47] *** polettix joined
[20:52] *** rindolf joined
[20:55] <pugs_svn> r21196 | moritz++ | [t] removed duplicate test

[20:55] <pugs_svn> r21197 | moritz++ | [spec] while.t: cleaned up two useless tests

[20:57] *** rindolf left
[20:58] <pugs_svn> r21198 | moritz++ | [spec] moved statements/repeat.t to spec/, cleaned up a test

[20:59] <pugs_svn> r21199 | moritz++ | [util/perl6.vim] 'repeat'  is a keyword like 'while'

[21:04] <pugs_svn> r21200 | moritz++ | [spec] fudged repeat.t

[21:07] *** lisppaste3 left
[21:07] *** lisppaste3 joined
[21:10] *** rindolf joined
[21:11] <rakudo_svn> r29037 | moritz++ | [rakudo] add S04-statements/repeat.t to spectest_regression

[21:27] <pugs_svn> r21201 | ruoso++ | [smop] still more work on p6opaque, few bugs fixed, some slime bugs still.

[21:28] * moritz_ likes ruoso++'s names very much

[21:28] <moritz_> smop, s1p, slime ...

[21:29] <ruoso> heh... i just hope slime communicates how lame the interpreter is ;)

[21:34] *** iblechbot left
[21:39] *** SamB left
[21:54] *** SamB joined
[22:15] *** rdice left
[22:24] *** rindolf left
[22:25] *** meppl left
[22:46] *** peepsalot left
[22:49] *** silug joined
[22:54] *** sri_work joined
[22:55] <TimToady> @tell pmurias you can use [a|b] as a workaround until I have svn access again

[22:55] <lambdabot> Consider it noted.

[22:56] *** meppl joined
[22:58] *** cls_bsd joined
[23:02] <ruoso> geez... p6opaque have yet another sm0p block... it should be taking ~ 2 or 3 minutes to parse...

[23:02] *** lambdabot left
[23:03] *** lambdabot joined
[23:04] *** Chillance left
[23:05] *** ikeda joined
[23:07] *** cmarcelo left
[23:11] *** dbrock joined
[23:49] *** chris2 left
[23:56] *** bacek_ joined
