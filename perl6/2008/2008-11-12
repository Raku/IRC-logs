[00:02] *** mmorrow joined
[00:05] *** mmorrow left
[00:11] *** bacek_ joined
[00:13] *** bacek left
[00:46] *** Exodist left
[00:50] *** px_ left
[00:55] *** bacek__ joined
[00:57] *** bacek_ left
[01:07] *** kanru joined
[01:21] *** wknight8111 left
[01:28] *** Limbic_Region left
[01:49] *** samlh left
[02:08] *** rhr joined
[02:09] *** mj41 left
[02:15] *** Alias_ joined
[02:17] <pugs_svn> r22986 | lwall++ | [Cursor] factor out fate linked list generation from "ch2" code so we can

[02:17] <pugs_svn> r22986 | lwall++ |     refer to fates by number later when we are more dfa-ish.

[02:34] *** |Jedai| joined
[02:35] *** kanru left
[02:51] *** Jedai left
[02:52] *** kanru joined
[03:02] <lizsac> does lwall ever come in here?

[03:06] *** alester joined
[03:16] *** sri_kraih joined
[03:18] *** meppuru joined
[03:25] *** sri_kraih_ left
[03:32] <TimToady> beats me

[03:33] <alester> Q: Why do you stay with your husband, Mrs. de Sade?

[03:34] *** meppl left
[03:38] *** johnjohn101 joined
[03:39] <johnjohn101> is perl6 supposed to fix the perl threading model currently in use?

[03:40] <TimToady> in spots

[03:40] <johnjohn101> what about the memory usage for threads?

[03:42] <TimToady> there's much less global state, so probably less

[03:43] *** stephenos left
[03:44] <meppuru> good night

[03:44] *** meppuru is now known as meppl

[03:46] *** meppl left
[03:52] *** hercynium left
[03:54] *** johnjohn101 left
[04:02] *** elmex_ joined
[04:03] *** Patterner1 joined
[04:04] *** nacho_ left
[04:14] *** Patterner left
[04:14] *** Patterner1 is now known as Patterner

[04:16] *** elmex left
[04:16] *** elmex_ is now known as elmex

[04:29] *** alc joined
[04:50] *** z80ASM joined
[05:03] *** z80ASM left
[05:19] *** sri_kraih left
[05:21] *** rhr_ joined
[05:27] *** smg left
[05:33] *** justatheory left
[05:34] *** sri_kraih joined
[05:34] *** rhr left
[05:41] *** rhr_ is now known as rhr

[05:53] *** jauaor left
[06:14] *** advizor joined
[06:14] *** advizor left
[06:42] *** ashizawa joined
[06:43] *** sri_kraih left
[06:54] *** masak joined
[06:57] *** smg joined
[06:58] *** Bzek joined
[07:01] *** sail0r joined
[07:01] *** sail0r left
[07:34] *** samlh joined
[07:40] *** alester left
[07:41] <moritz_> TimToady: STD.pm dies with "Out of memory" on ../../t/spec/S06-traits/precedence.t (more than 2G available)

[07:44] <masak> perl6: say log(0)

[07:44] <p6eval> pugs: OUTPUT[-Inf␤]

[07:44] <p6eval> ..rakudo 32569: OUTPUT[-inf␤]

[07:44] <p6eval> ..elf 22847: OUTPUT[Undefined subroutine &GLOBAL::log called at (eval 119) line 3.␤ at ./elf_f line 3861␤]

[07:45] <masak> S29 says calling with 0 is an error.

[07:45] <moritz_> is elf_f still the things to execute, or should I use elf_g or something instead?

[07:53] *** mj41 joined
[08:07] *** DemoFreak joined
[08:16] *** emacsian joined
[08:16] *** emacsian left
[08:17] *** ludan joined
[08:18] *** aindilis left
[08:27] *** stephenos joined
[08:37] *** drbean_ joined
[08:42] *** ejs joined
[08:49] <masak> arrgh, we need to start using Perl 6 on a massive scale before all these well-meaning self-proclaimed web journalists succeed in convincing the world that it's vapourware!

[08:54] *** drbean left
[08:58] <pugs_svn> r22987 | audreyt++ | * Support Cabal 1.6.0 (comes with GHC 6.10.1) in Makefile.PL.

[09:00] <pugs_svn> r22988 | audreyt++ | * GHC 6.10 support, part 1 of 3: Adjust for Map.lookup's new signature.

[09:00] <pugs_svn> r22989 | audreyt++ | * GHC 6.10 support, part 2 of 3: Adjust for extensible exceptions.

[09:01] <pugs_svn> r22990 | audreyt++ | * GHC 6.10 support, part 3 of 3: Adjust for GADT's "rigid types" restriction.

[09:03] <fullermd> Well, until it's released, it IS vapourware  :p

[09:04] <moritz_> fullermd: that statement gives definition power to the release process. So if I release it today, does it stop being vapourware?

[09:04] <fullermd> Yes.

[09:04] <fullermd> (it may be completely broken crap non-vapourware, but it's non-vaprous at least ;)

[09:04] *** idemal left
[09:05] <moritz_> well, parrot+rakudo has monthly releases

[09:05] <moritz_> so by your definition it's not vapourware anymore

[09:05] * fullermd suspects you're reading way too much semantic rigor into offhand flip statements...

[09:06] *** iblechbot joined
[09:06] <masak> fullermd: the point is, words are powerful, and spreading lies can be harmful.

[09:06] <fullermd> But still.  Are those rakudo releases "perl 6", or "steps toward perl 6"?  It's a definitional issue to be sure, but...

[09:06] <masak> fullermd: stop discussing and start trying out Perl 6 for yourself instead. :)

[09:07] <masak> fullermd: then you don't need to exactly define your terms.

[09:07] <fullermd> Right, 'cuz perl 5 doesn't make me cranky ENOUGH with PHP   :p

[09:07] <masak> fullermd: I didn't understand that last part. what does Perl 5 have to do with PHP?

[09:07] <moritz_> fullermd: without semantic rigour discussions are pointless, and just contribute to FUD.

[09:08] <masak> my sentiments exactly.

[09:08] <moritz_> anyway, I should focus on that freakin' tight binding hamiltonian now...

[09:09] * fullermd shrugs.

[09:09] <fullermd> I don't intend to spend paragraphs on precise term delineation when I'm explicitly blurring terms to have fun with language.

[09:10] <masak> fullermd: well, if enough people think it's "fun" to go around calling Perl 6 vapourware when it actually isn't, it won't matter much that Perl 6 exists today and can be used to write code. people simply won't try it out, because they've been misinformed.

[09:10] <fullermd> Whistling in the dark isn't meant to be the same as 'discussion'.

[09:11] *** tomyan joined
[09:11] <fullermd> Don't worry.  It won't happen again.

[09:11] *** fullermd left
[09:11] <masak> another happy acolyte! yay!

[09:11] *** idemal joined
[09:16] *** cosimo joined
[09:21] <masak> is there a way to ask people not to call Perl 6 bad names without intimidating them?

[09:21] <literal> ask nicely? :)

[09:22] <masak> literal: I don't think I was rude in the discussion above, but I do think that fullermd got a bit scared anyway.

[09:23] <literal> I guess he was miffed because he wasn't really being serious when he called it vapourware

[09:23] <masak> aye.

[09:24] <masak> the discussion was more serious than he was.

[09:26] <masak> but then again, his claims to not being too serious were in response to moritz_ rigourously proving him wrong. I don't think he would have claimed to be unserious if we hadn't objected.

[09:42] *** stephenos left
[09:42] *** masak left
[09:47] *** agentzh left
[09:53] *** agentzh joined
[10:00] <szabgab> where is this vaporware article?

[10:02] <moritz_> http://21cdb.wordpress.com/2008/10/23/perl-6-isnt-vaporware-really/ I think

[10:02] <lambdabot> Title: Perl 6 isn’t vaporware? Really? « 21st Century Digital Boy, http://tinyurl.com/6chbgf

[10:07] *** meppl joined
[10:16] <szabgab> lovely 

[10:29] *** masak joined
[10:30] *** zamolxes left
[10:34] *** ruoso left
[10:40] *** ruoso joined
[10:55] *** ejs left
[10:58] *** ejs joined
[11:02] *** schmalbe joined
[11:11] <ruoso> @tell pmurias I've been thinking about the AdhocSignature, and I think we can move on with it, even with the need to compare signatures. I realized that Signature is not a native-type, therefore, at most the AdhocSignature will need to be expanded to provide all the API of the standard Signature type, but it can still be completely ad-hoc...

[11:11] <lambdabot> Consider it noted.

[11:42] *** smg left
[11:54] *** masak left
[12:23] *** masak joined
[12:26] *** iblechbot left
[12:31] <masak> rakudo: sign(0+1i)

[12:31] <p6eval> rakudo 32570: RESULT[1]

[12:32] <masak> it might possibly be considered a bug that &sign accepts Complex instances

[12:35] *** ashizawa left
[13:08] *** Lorn joined
[13:09] <Lorn> ppl, someone ask at perlmonks about Perl6::Form

[13:09] <masak> Lorn: url?

[13:11] <masak> this one? http://perlmonks.org/?node_id=723128

[13:11] <lambdabot> Title: Perl6::Form verbatim won't do what I want

[13:11] <Lorn> masak: http://www.perlmonks.org/?node_id=723128

[13:11] <lambdabot> Title: Perl6::Form verbatim won't do what I want

[13:11] <Lorn> masak: yes 

[13:11] <masak> :)

[13:11] <masak> Lorn: Perl6::Form is written in Perl 5, though.

[13:13] *** smg joined
[13:21] *** iblechbot joined
[13:25] *** alexn_org joined
[13:28] *** cosimo left
[13:29] *** meppl left
[13:32] *** sri_kraih joined
[13:35] *** ChrisDavaz joined
[13:43] *** bacek_ joined
[13:45] *** cognominal left
[13:47] *** z80ASM joined
[13:50] *** alc left
[13:50] *** bacek__ left
[14:00] <pmichaud> std: my $a; @$a;

[14:00] <p6eval> std 22847: OUTPUT[cp: cannot create regular file `lex/STD/EXPR': Permission denied␤parsed␤]

[14:01] <masak> std: my @a[10]; my @b.[10];

[14:01] <p6eval> std 22847: OUTPUT[parsed␤]

[14:01] <masak> I think that's wrong.

[14:01] <masak> the second form is not allowed.

[14:02] <moritz_> please check it locally as well, p6eval's std: target isn't 100% reliable

[14:02] <masak> moritz_: oki, how do I check it locally?

[14:02] <masak> moritz_: PS: I don't have Perl 5.10.

[14:03] <moritz_> masak: then you need to check somewhere that has perl 5.10

[14:03] <moritz_> or I can do, wait a sec

[14:03] *** z80ASM left
[14:03] <masak> moritz_: thanks.

[14:03] <masak> I'd like to have 5.10, but so far I haven't found any way to install it. Maybe other Mac OS X 10.5 users know how.

[14:04] <moritz_> yes, it parses

[14:04] <masak> and do you agree that it shouldn't?

[14:05] <pmichaud> I don't see where  @$a  gets parsed.

[14:05] <moritz_> masak: aye

[14:05] <masak> @tell TimToady STD gives a false positive on `my @a.[10];`

[14:05] <lambdabot> Consider it noted.

[14:05] <masak> .oO( false parsitive )

[14:06] <pmichaud> it might be parsing as    (my @a).[10]

[14:06] <masak> is @%$a correct Perl 6?

[14:06] <masak> pmichaud: still worthy of reporting, in that case.

[14:07] <pmichaud> there are a _bunch_ of instances of @$foo  in the synopses.

[14:07] <moritz_> std: @$a

[14:07] <p6eval> std 22847: OUTPUT[parsed␤]

[14:07] <masak> std: @%$a

[14:07] <pmichaud> but I can't see where STD parses that.

[14:07] <p6eval> std 22847: OUTPUT[parse failure␤]

[14:09] <moritz_> DumpMatch.pm needs updates wrt recent Cursor changes, I think

[14:09] <pmichaud> perhaps someone could get the parse tree from std for me?  (I don't have STD available on this system -- still stuck at perl 5.8)

[14:22] *** ejs left
[14:23] *** Lorn_ joined
[14:28] *** bacek__ joined
[14:30] <rakudo_svn> r32571 | pmichaud++ | [rakudo]: spectest-progress.csv update: 216 files, 4528 passing, 8 failing

[14:30] <rakudo_svn> r32571 | pmichaud++ | Failure summary:

[14:30] <rakudo_svn> r32571 | pmichaud++ |     S02-literals/radix.rakudo aborted 8 test(s)

[14:30] <rakudo_svn> r32572 | pmichaud++ | [rakudo]: update test_summary.pl to report failures, output < 80 cols

[14:35] *** Lorn left
[14:35] *** d4l3k_ joined
[14:35] *** dalek left
[14:35] *** d4l3k_ is now known as dalek

[14:37] *** pmurias joined
[14:38] <pmurias> ruoso: why do you use $/ instead of newline

[14:38] <lambdabot> pmurias: You have 6 new messages. '/msg lambdabot @messages' to read them.

[14:39] *** bacek_ left
[14:39] *** pmurias left
[14:42] *** ejs joined
[14:42] *** Lorn_ left
[14:42] *** Lorn joined
[14:43] *** rdice joined
[14:53] *** Exodist joined
[15:00] <rakudo_svn> r32573 | pmichaud++ | [rakudo]:  Fix .list method on arrays (and arrayrefs).

[15:00] *** rindolf joined
[15:05] *** Lorn_ joined
[15:05] <ruoso> @tell pmurias I use $/ just because it's easier to write than "\n" considering I'm using single-quote most of the time...

[15:05] <lambdabot> Consider it noted.

[15:05] <masak> :)

[15:15] *** ejs left
[15:15] *** ejs joined
[15:18] *** alester joined
[15:20] *** kanru left
[15:25] *** kanru joined
[15:26] *** mepp1 joined
[15:26] *** mepp1 is now known as meppl

[15:28] *** Lorn left
[15:42] <masak> rakudo: say sin(0)

[15:42] <p6eval> rakudo 32573: OUTPUT[0␤]

[15:42] <masak> sin shouldn't be exported by default, according to S29.

[15:44] *** cosimo joined
[15:46] *** hercynium_ left
[15:46] *** hercynium joined
[15:49] <Alias_> masak: So there should only be the original sin?

[15:49] <Alias_> (ducks)

[15:49] <masak> er.

[15:56] <masak> Alias_: more like, there should only be the :Trig sin. which can then be exported using something like `use Num :Trig;`

[15:57] *** schmalbe left
[15:57] <Alias_> I think your pun detector has malfunctioned slightly :)

[15:58] <masak> Alias_: it's just a tendency I have to try to think up serious answers to people who are obviously joking.

[15:58] <masak> Alias_: it's fun, you should try it. :)

[15:59] <Alias_> I do, but in my case it's my sarcasm detector

[15:59] <masak> Alias_: (besides, it's only a pun if something has two interpretations. I could only deduce the punny one.)

[15:59] <rindolf> Hi Alias_ 

[15:59] <Alias_> \o

[16:00] <rakudo_svn> r32574 | pmichaud++ | [rakudo]:  Make log(0) return a Failure (RT #60490, masak++)

[16:00] <masak> pmichaud++

[16:02] <masak> though I find the non-local exception throwing mechanism a bit disconcerting, to be honest.

[16:02] *** masak left
[16:07] *** rindolf left
[16:11] *** stephenos joined
[16:20] * ruoso later &

[16:20] *** ruoso left
[16:32] *** masak joined
[16:35] <pmichaud> (non-local)    I think that's so that things like     my $b = any(0..5);   my $c = log($b);    doesn't always blow up in your face.

[16:36] <masak> oh. makes sense.

[16:36] <pmichaud> and eventually the exception will report the location where it was created -- we just don't have that in Parrot yet.

[16:39] *** smg left
[16:40] *** jhorwitz joined
[16:40] <pmichaud> (sin)  since we don't have a good import mechanism yet, we should probably leave it global by default for now.  That will likely change soon.

[16:43] *** tomyan left
[16:44] <TimToady> it remains to be seen exactly what gets imported into the prelude by default

[16:44] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[16:45] <TimToady> but we're just going with a conservative approach, since it's much harder to undo later

[16:47] <TimToady> masak: my @a.[10] is equivalent to my @a[10] which is is a shaped array declaration

[16:47] <masak> TimToady: then I must have misunderstood S09

[16:48] <masak> "Note that the square brackets are a compile-time declarator, not a run-time operator, so you can't use the "dotted" form either"

[16:48] <TimToady> well, it could be that S09 is wrong

[16:48] <masak> certainly.

[16:48] <pmichaud> ...the synopses can be wrong?  *shudder*  :-)

[16:48] *** alexn_org left
[16:49] <masak> pmichaud: according to the authority hierarchy, it can.

[16:49] <masak> :)

[16:49] <pmichaud> TimToady: (quick question, I hope)   -   what parses the leading @  in something like  @$foo

[16:49] <TimToady> "Can Larry create a synopsis he cannot implement?"

[16:49] <pmichaud> "No, but Damian probably can."

[16:50] <moritz_> it's not so hard. halt(&f) yields 1 if f() ever stops, 0 otherwise. Now implement....

[16:50] *** pbuetow joined
[16:51] <masak> moritz_: sssh! don't give him ideas! :)

[16:51] <TimToady> pmichaud: desigilname

[16:52] <TimToady> or rather, desigilname is what parses everything after the @

[16:53] <TimToady> note that variable calls desigilname, which can call variable

[16:53] <pmichaud> okay, that's what I missed.  THanks.

[16:54] <pmichaud> I was thinking of "desigilname" as "name without any sigil", but it really means "name with one less sigil" I guess.

[16:54] <pmichaud> or, "take away a sigil"

[16:57] *** cosimo left
[16:57] *** justatheory joined
[17:03] <masak> also, from S09: `@@shape = (4;2);` -- how does this work? what variable has been declared beforehand? @shape, right? can one write `my @@shape = (4;2);` ?

[17:10] <TimToady> yes, @@shape always stores as @shape, but gives slice context instead of list context

[17:11] <TimToady> and slice context pays attention to ; while list context doesn't

[17:11] <masak> aha, ok.

[17:11] <TimToady> at least, that's the theory--remains to be seen how it works out in practice

[17:11] *** tewk_ joined
[17:13] *** adc_Penner joined
[17:15] <pmichaud> ....this is all still theoretical?  ;-)

[17:16] <pmichaud> can't we find someone who can reduce it to pra.... oh.  Never mind.

[17:16] *** pmurias joined
[17:16] *** ruoso joined
[17:17] <pmurias> ruoso: hi

[17:17] <lambdabot> pmurias: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:19] <ruoso> hi pmurias 

[17:19] <pmurias> ruoso: i find $/ a bit strange, as the input record separator isn't always a newline

[17:19] <pmurias> * doesn't have to be a newline

[17:19] <ruoso> I know I know... it's just lazyness...

[17:19] <ruoso> :P

[17:20] *** pbuetow left
[17:20] <pmurias> you could make vim insert "\n" easily

[17:20] <ruoso> but we could have a local $/ = "\n" at the beggining of mildew :P

[17:20] <pmurias> or i could just fix $/ to "\n"

[17:20] <ruoso> heh

[17:20] <ruoso> no problem...

[17:21] *** masak left
[17:21] <pmurias> ruoso: we have memory leaks in smop again?

[17:22] <ruoso> yes, we do... I don't know when it did start...

[17:23] *** tewk left
[17:23] *** ejs left
[17:24] <TimToady> on my keyboard $/ is harder to type than \n, plus it's obfuscational

[17:26] <[particle]> $/ is easier to type than "\n"

[17:26] <[particle]> print $_,$/ for @a; # i prefer that over "$_\n"

[17:27] <TimToady> I prefer .say

[17:27] <TimToady> :)

[17:27] <TimToady> but say $_ works in p5

[17:27] <TimToady> .10

[17:28] <TimToady> but in 5.8 I'd write print "$_\n"

[17:28] <ruoso> [particle], it gets even more annoying when you're using single quotes before the newline...

[17:28] <ruoso> 'something'."\n"

[17:29] * ruoso .oO( note that we're talking about a long string concatenation, not a single call to print

[17:29] <TimToady> anyway, you really want to get out of the habit of using $/ for that or you'll get confused in p6 :)

[17:29] <ruoso> TimToady, how does 4 strokes can be easier than 2 strokes?

[17:29] *** pmurias_ joined
[17:30] <TimToady> I'm just saying I usually prefer interpolation anyway, so I usually already have quotes

[17:30] <ruoso> ok... ok... I usually only use $/ when it's after a single-quote

[17:30] *** pmurias_ left
[17:31] <TimToady> but $/ *is* obfuscational to the casual reader

[17:31] * ruoso wonders if ␤ can be a core function in Perl 6 ;P

[17:31] <TimToady> and anything in your dynamic scope can change $/, so if you call out and back in to foreign code, you could be hosed

[17:32] <TimToady> ␤  is even harder to type...

[17:34] *** pmurias_ joined
[17:34] <ruoso> but it's pretty ;)

[17:34] <[particle]> not in my font

[17:34] <TimToady> unfortunately, isn't a word character, so it'd have to be an operator

[17:35] *** pmurias left
[17:35] <TimToady> or a term:<␤ >

[17:35] <ruoso> in my environment I just have to type Ctrl+Shift+U, 2424

[17:36] <pmurias_> 5 strokes

[17:36] <TimToady> 7 keystorks, whatever a keystork is

[17:36] <ruoso> yeah... but it's pretty ;)

[17:36] <pmurias_> it's strange

[17:37] <jnthn> So...it's pretty strange? ;-)

[17:39] <TimToady> so if we have that we should also have ones like ␇ and ␚

[17:39] <pugs_svn> r22991 | pmurias++ | [mildew] added suport for block in item context my $foo = {say 5} and for .()

[17:39] <pugs_svn> r22991 | pmurias++ | also added a &capturize helper for creating captures

[17:41] <pugs_svn> r22992 | pmurias++ | [mildew] replaced $/ by "\n"

[17:42] *** pmurias_ is now known as pmurias

[17:44] * ruoso votes for unicode subs

[17:44] <ruoso> :)

[17:44] * pmurias votes for ASCII

[17:46] *** zamolxes joined
[17:46] <pmurias> ruoso: if we had a :(@*_,%*_) in m0ld+C we could have realish signatures in p6

[17:47] *** PerlJam left
[17:47] *** PerlJam joined
[17:47] <pmurias> later&

[17:47] *** pmurias left
[17:47] <ruoso> pmurias, I think you mean *@_, *%_...

[18:03] *** pbuetow joined
[18:09] *** cognominal joined
[18:09] *** smg joined
[18:11] *** rhr_ joined
[18:11] *** rdice left
[18:12] *** Alias_ left
[18:22] *** pcbuetow joined
[18:22] *** pcbuetow left
[18:24] *** bacek_ joined
[18:24] *** rhr left
[18:26] *** rhr_ is now known as rhr

[18:32] <ruoso> @tell pmurias the thing is that Signature is not a native-type, therefore anything that .^does(Signature) is a valid signature. I think it will be even better for the ACCEPTS and BIND code to be compiled directly than have to traverse the Signature object to do that... I could even argue that Signature is a Role, not a Class

[18:32] <lambdabot> Consider it noted.

[18:32] <ruoso> TimToady, what do you think about Signature being a role instead of a class?

[18:33] *** bacek__ left
[18:36] *** ludan left
[18:37] <ruoso> and actually being only an interface, not even providing any implementation...

[18:38] *** pbuetow left
[18:46] <TimToady> seems like it might be sane

[18:52] <ruoso> I'm quite convinced the compiler generating ad-hoc signature objects is pretty much a good idea not only for bootstrap, but as the actual way it works

[18:55] *** smtms left
[18:59] *** armagad joined
[19:12] *** jauaor joined
[19:14] *** Bzek left
[19:14] *** smg left
[19:17] <TimToady> demos welcome :)

[19:28] <TimToady> wow, my trie implementation inspired 5.10 to say

[19:28] <TimToady> Attempt to free unreferenced scalar: SV 0xaaaa058 at STD.pm line 9180.

[19:29] <moritz_> TimToady: try with the 5.10-maint branch, it fixed several such bugs

[19:29] <TimToady> well, I think if my implementation were right it wouldn't trigger that...

[19:30] <TimToady> it was trying to recover from calling a non-existent sub, after all

[19:31] <TimToady> actually, I'm quite sure it was from feeding trash to YAML::XS :)

[19:37] <pugs_svn> r22993 | ruoso++ | [mildew] doing s{\$/}{"\n"}g might not be a good idea if you have regexes using slashes as terminators and trying to get the end of the string

[19:38] <TimToady> see, even the p5 lexer thinks $/ is obfuscated. :)

[19:38] <pugs_svn> r22994 | ruoso++ | [mildew] adding a test for a signature with two positional arguments, this is going to be the initial test bed for ad-hoc signatures

[19:40] <ruoso> TimToady, it would be nice if the VAST returned already placed the implicit "our"s in the declarations...

[19:40] * ruoso bbiab &

[19:44] <TimToady> I'm a bit leary of compilers that lie to themselves...

[19:45] <TimToady> I'm also leary of YAML implementations that are stupid about unicode

[19:46] <TimToady> YAML::XS Error: Emit scalar '�', error: expected SCALAR, SEQUENCE-START, MAPPING-START, or ALIAS

[19:48] <TimToady> and that exit without throwing a catchable Perl error

[20:11] *** rindolf joined
[20:22] *** aindilis joined
[20:22] <pugs_svn> r22995 | moritz++ | [t/spec] clean up of S29-num/rounders.t

[20:22] <pugs_svn> r22995 | moritz++ |  * remove rakudo cludge, it now handles nested arrays sufficiently well

[20:22] <pugs_svn> r22995 | moritz++ |  * replace "$array[0]" interpolation by "{$array[0]}" for poor compilers

[20:22] <pugs_svn> r22995 | moritz++ |    that don't do one-pass-parsing yet

[20:22] <pugs_svn> r22995 | moritz++ |  * use numeric comparison for numeric values

[20:39] <diakopter> TimToady: leery?

[20:39] <diakopter> x2

[20:39] *** ChanServ sets mode: +o diakopter

[20:39] *** diakopter sets mode: +o TimToady

[20:39] *** diakopter sets mode: -o diakopter

[20:45] *** smg joined
[20:50] *** jferrero joined
[20:55] <[particle]> TimToady: how about coersion with *('file.foo') for strings to io objects? ;)

[21:00] * moritz_ wonders if [particle] had much exposure to fortran formats ;-)

[21:05] *** elmex left
[21:11] <[particle]> i still find myself reviewing algorithms in "numerical recipies in fortran" from time to time

[21:16] *** masak joined
[21:20] <TimToady> I'd much prefer io() or .io

[21:21] <TimToady> though perhaps not *quite* as dwimmy as inginess would suggest

[21:25] *** rindolf left
[21:27] *** zamolxes left
[21:27] *** sri_kraih left
[21:27] *** iblechbot left
[21:27] *** mj41 left
[21:27] *** cpfr left
[21:27] *** araujo left
[21:27] *** jan_ left
[21:27] *** PZt left
[21:27] *** ilbot2 left
[21:27] *** StephenPollei left
[21:27] *** scrottie left
[21:27] *** kane_ left
[21:27] *** kolibrie left
[21:27] *** Guest16015 left
[21:27] *** hcchien left
[21:27] *** sirhc left
[21:27] *** Trey left
[21:27] *** moritz_ left
[21:27] *** allbery_b left
[21:27] *** buubot left
[21:27] *** IRSeekBot left
[21:27] *** armagad left
[21:27] *** PerlJam left
[21:27] *** adc_Penner left
[21:27] *** nothingmuch left
[21:27] *** charsbar left
[21:27] *** clkao left
[21:27] *** ewilhelm left
[21:27] *** pasteling left
[21:29] *** zamolxes joined
[21:34] *** aindilis` joined
[21:43] *** StephenPollei joined
[21:43] *** kcwu left
[21:45] *** buubot joined
[21:45] *** sri_kraih joined
[21:45] *** iblechbot joined
[21:45] *** mj41 joined
[21:45] *** cpfr joined
[21:45] *** araujo joined
[21:45] *** jan_ joined
[21:45] *** PZt joined
[21:45] *** ilbot2 joined
[21:45] *** kane_ joined
[21:45] *** sirhc joined
[21:45] *** Trey joined
[21:45] *** Guest16015 joined
[21:45] *** moritz_ joined
[21:45] *** hcchien joined
[21:45] *** kolibrie joined
[21:46] *** smg left
[21:47] *** kcwu joined
[21:47] *** armagad joined
[21:47] *** PerlJam joined
[21:47] *** adc_Penner joined
[21:47] *** nothingmuch joined
[21:47] *** charsbar joined
[21:47] *** pasteling joined
[21:47] *** clkao joined
[21:47] *** allbery_b joined
[21:49] *** aindilis left
[21:50] *** ewilhelm joined
[22:00] *** pedrob joined
[22:06] *** adc_Penner left
[22:15] *** alester left
[22:20] <pugs_svn> r22996 | masak++ | [t/spec/integration/substr-after-match-in-gather-in-for.t]

[22:20] <pugs_svn> r22996 | masak++ | * added this one test from a bug discovered in November development

[22:25] *** Lorn_ left
[22:33] *** masak left
[22:36] <moritz_> pugs: say %*ENV[0]

[22:36] <p6eval> pugs: OUTPUT[*** Can't modify constant item: VUndef␤    at /tmp/C8C8rDERe5 line 1, column 5 - line 2, column 1␤       /tmp/C8C8rDERe5 line 1, column 5 - line 2, column 1␤]

[22:36] <moritz_> pugs: say %*ENV<PATH>

[22:36] <p6eval> pugs: OUTPUT[*** Can't modify constant item: VUndef␤    at /tmp/LYvDSpZgem line 1, column 5 - line 2, column 1␤       /tmp/LYvDSpZgem line 1, column 5 - line 2, column 1␤]

[22:37] <moritz_> maybe related to evalbot's server not having ghc 6.10.1 yet

[22:50] <rakudo_svn> r32580 | moritz++ | [rakudo] more test files for spectest, and restored alphabetical order.

[23:05] *** pjcj left
[23:08] *** pjcj joined
[23:17] *** smg joined
[23:21] *** scrottie joined
[23:22] *** spx2 joined
[23:25] *** PZt left
[23:30] *** iblechbot left
[23:30] *** PZt joined
[23:33] *** hercynium left
[23:39] *** rakudo_svn left
[23:42] *** pugs_svn left
[23:43] *** Exodist left
[23:45] *** aindilis` left
[23:50] *** nacho_ joined
[23:50] *** _Thoth_ joined
[23:51] *** p6eval left
[23:51] *** p6eval joined
[23:58] *** aindilis joined
