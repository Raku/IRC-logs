[00:03] *** kanru joined
[00:07] *** justatheory left
[00:19] *** wknight8111 joined
[00:27] *** tcliouAway is now known as tcliou

[00:33] *** Chillance left
[00:56] *** wknight8111 left
[00:56] *** ispy_ left
[00:57] *** alanhaggai_ is now known as alanhaggai

[01:13] <pugs_svn> r22289 | ruoso++ | [smop] Array.unshift implemented.

[01:51] *** BinGOs left
[01:57] *** BinGOs joined
[02:00] *** Pnz joined
[02:00] *** PZt left
[02:01] *** Pnz is now known as PZt

[02:11] *** cognominal left
[02:11] *** scrottie left
[02:12] *** wknight8111 joined
[02:19] *** xinming joined
[02:21] *** cognominal joined
[02:22] *** xinming_ left
[02:36] *** hercynium joined
[02:39] *** [particle] left
[02:39] *** BinGOs left
[02:40] *** BinGOs joined
[02:47] *** BinGOs left
[02:57] <pugs_svn> r22290 | bacek++ | [spec] Replace many 'skip' with 'todo' for rakud. moritz++ for autounfudge

[03:03] *** elmex_ joined
[03:12] *** wknight8111 left
[03:18] *** [particle] joined
[03:18] *** elmex left
[03:18] *** elmex_ is now known as elmex

[03:21] *** eternaleye left
[03:25] *** eternaleye joined
[03:29] *** sri_work left
[03:40] *** [particle]1 joined
[03:45] *** [particle]2 joined
[03:58] *** [particle] left
[04:02] *** [particle]1 left
[04:15] <Ontolog> what the hell IS smop?

[04:16] <PerlJam> simple meta object protocol  (I think)

[04:24] <Ontolog> what is the point of that mop stuff

[04:24] <Ontolog> what does it make easier?

[04:28] *** epoch joined
[04:31] *** kanru left
[04:44] *** justatheory joined
[04:47] <Ontolog> I hope someone can take a look at the latest of my bitching and moaning on perl6-compiler

[04:54] <hercynium> purl, smop?

[04:54] <hercynium> hmm, she's not here

[05:02] <PerlJam> Ontolog: see http://search.cpan.org/~drolsky/Class-MOP-0.65/lib/Class/MOP.pm

[05:02] <lambdabot> Title: Class::MOP - A Meta Object Protocol for Perl 5 - search.cpan.org

[05:03] *** xinming_ joined
[05:04] <PerlJam> Ontolog: wrt p6c bitching and moaning ... So it appears the MMD is dispatching based on type first, then number of args?  (i.e., you sent split(Str,Sub,Int) and it got dispatched to split(_,Str) instead of split(_,Str,Int) )

[05:06] <PerlJam> er, ... instead of split(_,Sub,Int)

[05:07] <PerlJam> or something 

[05:10] <Ontolog> I sent split(String,Sub,Int) and split(String) got invoked instead of split(_,Sub)

[05:10] <Ontolog> but

[05:10] <Ontolog> when I sent split(String,Sub), split(_,Sub) gets invoked

[05:10] <Ontolog> spooky? yes

[05:12] *** hercynium left
[05:13] <PerlJam> right.  It looks like the sorting algorithm for multiple dispatch puts entries with matching types first before those with matching parameter count (if it even looks at the number of parameters.  I'm just assuming that it does)

[05:14] <Ontolog> if that was the case, then split(String,Sub) should invoke split(String) and produce the error then, but it doesn't

[05:15] *** xinming left
[05:16] <PerlJam> well, maybe it's not the sorter but the matcher that's faulty

[05:17] <PerlJam> (yes, I'm clinging to the not-so-rational belief that the dispatcher is the problem and not something else :-)

[05:22] <Ontolog> well parrot hasn't reached a 1.0 yet so it could very well be the dispatcher...

[05:22] <Ontolog> i'm not so familiar with it all to know

[05:24] <PerlJam> Hmm. pdd27 says that those parameters that participate in multiple dispatch are marked with :invocant

[05:24] <PerlJam> I don't recall seeing that at all in the split() multis

[05:24] *** xinming joined
[05:25] <PerlJam> so, maybe they are all equally likely as far as the dispatcher is concerned wrt number of parameters, so it's only matching based on type.

[05:26] <PerlJam> of course ... the only place :invocant is mentioned is pdd27 and pirc and imcc.

[05:26] <PerlJam> (i.e. no other pir files use it)

[05:29] *** justatheory left
[05:31] <PerlJam> Ontolog: the haskeller in me wonders what happens if you move the split(String) multi to be defined after the split(_,Sub) multi

[05:33] *** eternaleye left
[05:37] *** xinming_ left
[05:38] *** xinming_ joined
[05:50] *** xinming left
[05:51] <PerlJam> Ontolog: why is the multi for split(String)  not really declared as split(String,String) I wonder?  Seems like that would be best and may actually solve your problem.

[05:51] <PerlJam> enough random musing for me, it's time for bed.

[05:51] * PerlJam &

[05:55] *** Psyche^ joined
[06:11] *** Patterner left
[06:11] *** Psyche^ is now known as Patterner

[06:12] *** Bzek joined
[06:40] *** aindilis left
[06:41] *** aindilis joined
[06:55] *** eternaleye joined
[07:01] *** Tene left
[07:02] *** kanru joined
[07:15] *** Tene joined
[07:26] *** Tene left
[07:27] *** Tene joined
[07:28] *** Ontolog left
[07:35] *** sri_work joined
[07:39] <pugs_svn> r22291 | moritz++ | [t/spec] unfudged a passing TODO test

[07:41] <pugs_svn> r22292 | moritz++ | [t/spec] more fudge fiddling

[07:47] *** BinGOs joined
[07:55] <pugs_svn> r22293 | moritz++ | [t/spec] some fudge fiddling

[07:57] *** kanru left
[08:07] <rakudo_svn> r31285 | moritz++ | [rakudo] make tools/autounfudge.pl work in parallel, bacek++

[08:07] <rakudo_svn> r31285 | moritz++ | Patch courtesy by Vasily Chekalkin

[08:14] *** kanru joined
[08:21] *** drbean_ left
[08:21] *** drbean joined
[08:25] *** smg left
[08:29] *** sri_work left
[08:34] *** jan_ left
[08:36] <pugs_svn> r22294 | moritz++ | [t/spec] simple split tests

[08:37] <pugs_svn> r22295 | moritz++ | [t/spec] svn props for split-simple.t

[08:41] *** jan_ joined
[08:45] <pugs_svn> r22296 | moritz++ | [t/spec] more simple split tests

[08:46] <rakudo_svn> r31286 | moritz++ | [rakudo] add split test to spectest_regression

[08:54] *** Ontolog joined
[08:57] <pugs_svn> r22297 | moritz++ | [t/spec] more split tests

[09:11] *** smtms left
[09:24] *** iblechbot joined
[09:25] *** kanru left
[09:47] *** masak joined
[09:55] *** smg joined
[10:04] *** zamolxes joined
[10:48] *** Lichtkind joined
[10:50] <Lichtkind> are there ideas how to write optional named parameters ?:name or :?name ?

[10:54] <ruoso> Ontolog, http://www.perlfoundation.org/perl6/index.cgi?smop

[10:54] <lambdabot> Title: SMOP / Perl 6

[11:03] *** rindolf joined
[11:03] <rindolf> Hi all.

[11:04] *** cotto_w0rk joined
[11:06] <rindolf> I'm trying to run http://svn.openfoundry.org/pugs/examples/qotw/008e/graham.pl using Rakudo - {{ ../../parrot perl6.pbc ./graham.p6 }} but I'm getting {{ Statement not terminated properly at line 7, near "(@$n,@$m)." }}

[11:08] <masak> rindolf: hi

[11:08] <rindolf> Hi masak 

[11:08] <masak> rindolf: seems @$foo conversion is not implemented in Rakudo yet.

[11:08] <rindolf> masak: ah.

[11:08] <rindolf> Hmmmm....

[11:08] <masak> patches welcome :)

[11:08] <rindolf> masak: OK.

[11:09] <rindolf> masak: I recall when I converted that program from Perl 5 to Perl 6 and pugs. I uncovered a few Pugs bugs this way.

[11:10] <masak> trying to run actual code tends to do that

[11:21] *** cotto_work left
[11:29] *** Psyche^ joined
[11:30] *** zamolxes left
[11:42] *** Patterner left
[11:42] *** Psyche^ is now known as Patterner

[11:49] *** kanru joined
[12:04] *** alanhaggai left
[12:24] *** slavik joined
[12:25] *** wknight8111 joined
[12:38] *** alanhaggai joined
[12:39] *** abra joined
[12:47] <slavik> I have a system wide install of cabal and I am having trouble installing Pugs, the error is: Could not find module `Pugs.Compat'

[12:56] <slavik> hmm, Pugs depends on haskeline which depends on terminfo, I get an error when installing haskeline saying that cabal could not find terminfo, but it is actually installed

[13:05] *** demq left
[13:12] * ruoso is assuming that there is no slice view of a grep...

[13:12] *** Lichtkind_ joined
[13:12] *** Lichtkind_ left
[13:13] *** Lichtkind_ joined
[13:18] <pugs_svn> r22298 | ruoso++ | [smop] starting grep implementation... almost working...

[13:30] *** Lichtkind left
[13:31] <Lichtkind_> TimToady: how to spell optional named  parameters?

[13:32] *** agentzh left
[13:32] <ruoso> Lichtkind_, named parameters are optional by default

[13:32] <Lichtkind_> thanks ruoso++

[13:32] <ruoso> :)

[13:32] <Lichtkind_> ruoso: and when there ar erequired put an ! at the end?

[13:33] <ruoso> iirc, yes

[13:33] <ruoso> but consider taking a look at s06

[13:33] <Lichtkind_> ruoso: i did bit if i write about it i want to get shure

[13:34] <Lichtkind_> what means iirc?

[13:35] <ruoso> if i recall correctly

[13:36] <slavik> are there gtk binding for perl6?

[13:36] <Lichtkind_> i dont know of any

[13:36] <Lichtkind_> also no wx 

[13:37] <pugs_svn> r22299 | ruoso++ | [smop] YAY! YAY! we do have map and grep now!

[13:37] <pugs_svn> r22299 | ruoso++ | test/35 is the m0ld version of the following code

[13:37] <pugs_svn> r22299 | ruoso++ | map { $_ > 3 ?? print "not ok - item > 3\n" !! print "ok - item < 3\n" },

[13:37] <pugs_svn> r22299 | ruoso++ |  grep { print "ok - grep iteration"; $_ < 3 } 2..5;

[13:37] <slavik> what is the accepted extension for perl6 code?

[13:37] <Lichtkind_> slavik: you extend parrot not in perl 6

[13:37] <slavik> is it pl or something else?

[13:38] <slavik> ?

[13:38] <Lichtkind_> there is an OGL binding in Parrot

[13:38] <slavik> ahh

[13:38] <slavik> ok

[13:38] <Lichtkind_> just look how they done it

[13:38] * ruoso later &

[13:39] <Lichtkind_> bye

[13:39] *** Lichtkind_ left
[13:42] *** jiing joined
[13:48] <ruoso> pugs: say map { $_ ==  3; fail } 1..5;

[13:48] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "1"␤    expecting ",", ":" or operator␤    at /tmp/CwvXZYl6BH line 1, column 28␤]

[13:48] <ruoso> pugs: say map { $_ ==  3; fail }, 1..5;

[13:48] <p6eval> pugs: No output (you need to produce output to STDOUT)

[13:48] <Ontolog> what's up with nobody responding to my perl6-compiler mails! waaaaaah!

[13:48] <Ontolog> i'm not sure what to work on while i'm blocked with my issue

[13:48] *** agentzh joined
[13:49] <ruoso> Ontolog, maybe your questions are too hard ;)

[13:49] *** jferrero joined
[13:50] <masak> Ontolog: better learn to handle not being replied to _now_, before the phenomenon disappoints you even more.

[13:51] <masak> this is a volunteer-driven project. people respond if they have time, and feel that they can add anything

[13:56] * ruoso very happy! SMOP is the first implementation to have lazy map and grep :)

[13:58] * ruoso starting to think about how to implement gather/take now...

[13:59] <ruoso> pugs: map { say $_ }, map { $_ ==  3; fail }, 1..5;

[13:59] <p6eval> pugs: No output (you need to produce output to STDOUT)

[14:04] *** masak left
[14:08] <slavik> what is the accepted extension for perl6 code? is it pl?

[14:09] <ruoso> slavik, file extension has no meaning most of the time... perl 6 modules will keep the extension .pm

[14:10] <slavik> what should I use for source code though?

[14:11] <ruoso> for perl modules, .pm for perl scripts usually no extension in the unix world.. but in the windows world you probably need to put .pl

[14:12] <slavik> ruoso: I just want to be able to separate perl6 code from other code ...

[14:12] <slavik> in case I put it all in the same directory with shell scripts and such

[14:12] <ruoso> that's not the role of the file name...

[14:12] <ruoso> but you *can* use .pl in the end

[14:13] <ruoso> if that helps you...

[14:13] <ruoso> but in the unix world that is completely unnecessary...

[14:13] <slavik> ruoso: I know

[14:13] <slavik> ruoso: people put .sh at the end of shell script filenames though :)

[14:13] <ruoso> mostly they don't

[14:14] <ruoso> just take a look of how many shell scripts you have in your /usr/bin without .sh in the name

[14:14] <ruoso> the same for perl scripts

[14:14] <ruoso> and for any other language, actually

[14:15] <slavik> true, but we are people :)

[14:15] <ruoso> I'm not sure I see your point...

[14:23] <slavik> well, I got pugs installed, but no cool things to try out :(

[14:26] <slavik> ooh, does perl6 use bignum by default?

[14:27] <ruoso> slavik, it uses something that can be extended to the size it needs...

[14:27] <slavik> I see, cool

[14:28] <slavik> I almost peed my pants just now ...

[14:30] *** [particle] joined
[14:30] <pasteling> "slavik" at 67.100.227.140 pasted "factorial code" (19 lines, 2.7K) at http://sial.org/pbot/32226

[14:30] <slavik> ^^

[14:30] <slavik> 0.3 seconds for 1000!

[14:38] *** z80ASM joined
[14:38] <z80ASM> timtowtdi

[14:40] <rindolf> pugs: [2..5].product

[14:40] <p6eval> pugs: OUTPUT[*** No such method in class Array: "&product"␤    at /tmp/MahsFFJZ81 line 1, column 1 - line 2, column 1␤]

[14:40] <rindolf> pugs: [2..5].reduce(*)

[14:40] <p6eval> pugs: OUTPUT[*** Cannot cast from VList [VNum Infinity] to Pugs.AST.Types.VCode (VCode)␤    at /tmp/fnU47fha1d line 1, column 1 - line 2, column 1␤]

[14:44] *** [particle]2 left
[14:45] <slavik> hmm, how do I append things to an array?

[14:45] <slavik> is it @array.push?

[14:45] <ruoso> tits

[14:47] <slavik> ?

[14:47] <slavik> looks like perl5 style works :)

[14:47] *** alanhaggai left
[14:49] <ruoso> slavik, you probably want to take a look at the synopsis...

[14:49] <rindolf> pugs: [*] 1 .. 4

[14:49] <p6eval> pugs: RESULT[24]

[14:49] <ruoso> slavik, http://feather.perl6.nl/syn/

[14:49] <slavik> ruoso: I couldn't find push there :(

[14:49] <ruoso> slavik, and also moritz_'s 5-to-6 series http://perlgeek.de/blog-en/perl-5-to-6/

[14:49] <slavik> but I think I got it ... except I am getting a weird result

[14:50] <slavik> pugs takes a while to calculate 100,000th fibonacci term ...

[14:50] <slavik> or maybe it should take long

[14:53] <rindolf> pugs: [*] 1 .. 10

[14:53] <p6eval> pugs: RESULT[3628800]

[14:54] <lambdabot> Title: Official Perl 6 Documentation

[14:54] <lambdabot> Title: blog | Perlgeek.de Blog :: Category Perl-5-to-6

[14:54] <ruoso> lambdabot seems a little delayed...

[14:55] <slavik> hmm, looks like push @array is slower in perl6 :(

[14:56] <slavik> much slower

[14:57] <ruoso> slavik, pugs is a prototype perl 6, it is supposed to be slower

[14:57] <slavik> :(

[14:57] <slavik> but it's awesomer :)

[14:57] <slavik> no, it's not a word :)

[14:58] <PerlJam> slavik: you mean slower in pugs.  How fast is it in rakudo?

[14:58] <slavik> I haven't tried rakudo

[14:58] <PerlJam> (or any of the other perl6 implementations for that matter)

[14:58] <slavik> isn't rakudo the parrot based one?

[14:59] <slavik> hmm, pugs does use less memory than perl5 in my case

[15:00] <PerlJam> It seems a tad premature to be measuring memory consumption and execution speed (unless you're doing so explicitly to improve a particular implementation)

[15:01] <slavik> I am just looking at it

[15:01] <slavik> for comparison's sake

[15:01] *** rindolf left
[15:02] <PerlJam> if an implementation is in flux (granted, pugs isn't very fluxy) then whatever numbers you get will be close to meaningless.

[15:02] <slavik> PerlJam: it satisfies my curiosity :)

[15:04] <PerlJam> If you compare all of the perl 6 implementations, it might be useful in a gross sort of way.

[15:04] * slavik doesn't have rakudo installed ... yet

[15:10] <slavik> going to install parrot

[15:18] *** z80ASM left
[15:20] <slavik> ok, so I have the latest parrot installed (0.7.1) but not rakudo?

[15:27] *** xinming_ left
[15:29] *** jferrero left
[15:30] <slavik> hmm, how do I compile perl6 code for parrot?

[15:30] *** larsen_ joined
[15:32] <ruoso> [particle], if you haven't yet seen test/30 I should recommend you looking at test/35 which is a much more complex example and now uses map and grep...

[15:34] *** xinming joined
[15:35] *** epoch left
[15:36] *** pmurias joined
[15:36] <ruoso> hi pmurias 

[15:36] <ruoso> :P

[15:38] <pmurias> ruoso: hi

[15:39] <ruoso> have you seen the latest evolutions ;)?

[15:44] <pmurias> ruoso: we could implment gather/take with continuations

[15:44] <pmurias> ruoso: btw. if you want to point someone at the smop wiki you can use www.p3rl.org/smop

[15:44] <ruoso> cool

[15:44] *** pmurias left
[15:45] *** pmurias joined
[15:45] <pmurias> All tests successfull in smop withough ugly warnnings ;)

[15:46] <ruoso> pmurias, yes... gather/take will be implemented using continuations... my doubt is how to implement the "take" part, not the "gather" part

[15:46] <ruoso> :)

[15:46] <ruoso> pmurias, take a look at test/35

[15:46] <ruoso> it's beautiful :)

[15:46] <ruoso> it shows that the evaluation of map and grep is streamlined from the input iterator

[15:46] <pmurias> i'll look just got back home

[15:47] <ruoso> which means "guaranteed lazyness" ;)

[15:48] <pmurias> every time a gather needs to fetch an element it has to save to continuation somewhere, invoke the continuation used for generating the results and take will invoke the orginal continuation

[15:49] <ruoso> but how do take find the gather?

[15:50] <ruoso> do we just $interpreter.continuation.back.back.back untill we get to the gather?

[15:51] <pmurias> maybe a stack of some sort?

[15:54] <pmurias> it would have to be thread local

[15:56] <ruoso> a global stack doesn't seem very likely...

[15:56] <ruoso> but if you think that way, $interpreter.continuation.back.back.back is a stack

[15:57] <ruoso> we just need a way to find out when we reached the gather

[15:58] <pmurias> we need also some way to attach info to frames (we could also read a register... but it's a bit hackish)

[16:02] <ruoso> pmurias, well... the "continuation API" is supposed to provide that kind of information

[16:02] <pmurias> ruoso: isn't "local @Something::GATHER" enough

[16:03] <ruoso> that's not very concurrency friendly

[16:03] *** alanhaggai joined
[16:07] *** eternaleye left
[16:07] <ruoso> pmurias, it's important to realize that each thread will have its own interpreter instance, but the global namespace is still the same, and lexical scopes might point to the same outer...

[16:08] <pmurias> ruoso: found it ;) we could use a contextual variable

[16:08] <ruoso> heh... we

[16:08] <ruoso> well

[16:08] <ruoso> a context var simply means $continuation.back.back.back...

[16:09] <pmurias> food&

[16:09] <ruoso> then we still need to find out when that back is the gather

[16:11] <ruoso> that problem is actually very similar to the problem on how "return" should work

[16:11] <ruoso> since take is like a special kind of return

[16:17] <pmurias> return throws a control exception

[16:17] *** epoch joined
[16:20] <epoch> witchcraft says I

[16:20] *** epoch left
[16:22] *** alc joined
[16:22] <alc> /join #haskell

[16:23] *** alc left
[16:25] <pmurias> ruoso: take could throw a control exception and gather could catch and resume it but it would require implementing exceptions in smop

[16:29] <ruoso> pmurias, maybe it's time to do it

[16:29] *** Front_slash joined
[16:40] <pmurias> ruoso: could be, we workaround the lack of exceptions already in some places

[16:40] <pmurias> (in the unknown method at least)

[16:43] <ruoso> but I mean... if "return" should be implemented in terms of exceptions... it's probably the time to implement it

[16:46] <pmurias> yes

[16:46] <pmurias> return and warn are implemented are meant to be implemented in terms of exceptions, but the compiler if free to optimise

[16:47] <ruoso> alright then... let's start designing the exception model ...

[16:48] <ruoso> what I have thought so far is having a "jail" property in the continuation, which, if defined, should decide if and how to handle the exception...

[16:51] <pmurias> maybe CATCH or catch instead of jail?

[16:52] <pmurias> ruoso: will we have a mold frame for every block?

[17:01] <ruoso> maybe...

[17:01] <ruoso> but we can't count on that...

[17:01] <ruoso> but we almost certainly will have more than one frame for a routine

[17:02] <pmurias> ruoso: Perl 6 has both a CONTROL and CATCH S04:788

[17:03] <pmurias> ruoso: context() and exceptions seem to work at per block glanularity

[17:04] <pmurias> inlined subroutines might not have a frame

[17:09] *** larsen_ left
[17:15] *** Bzek left
[17:19] <pugs_svn> r22300 | pmurias++ | [smop] fixed warnings

[17:20] <pmurias> ruoso: what are the main problems with the ri DSL?

[17:20] *** alanhaggai_ joined
[17:21] <pmurias> (as you don't use it for new stuff)

[17:21] *** alanhaggai left
[17:23] *** alanhaggai_ is now known as alanhaggai

[17:44] <pmurias> ruoso: are you implementing exceptions now, or can i work on them?

[18:02] *** Maghnus left
[18:02] <ruoso> pmurias, please take it

[18:06] *** pmurias left
[18:10] *** dennis101010_ joined
[18:10] <dennis101010_> http://www.pennergame.de/change_please/7880287/

[18:10] <lambdabot> Title: Pennergame

[18:12] *** smtms joined
[18:13] *** dennis101010_ left
[18:16] *** Maghnus joined
[18:22] *** kanru left
[18:23] *** kanru joined
[18:26] *** rindolf joined
[18:32] *** abra left
[18:35] *** BinGOs_ joined
[18:36] *** BinGOs left
[18:36] *** BinGOs_ is now known as BinGOs

[18:54] *** eternaleye joined
[18:54] *** BinGOs left
[18:56] *** pmurias joined
[18:59] <pmurias> ruoso: why do we set to NULL stuff that will be free()d? we can run valgrind at it will warn about the use of free'd memory

[19:02] *** BinGOs joined
[19:02] <pmurias> ruoso: i think i'll just to some cleaning up/mild refactoring/conversion to RI DSL today, as some things are getting nasty

[19:03] *** Maghnus left
[19:10] <ruoso> pmurias, about the ri rsl, there's nothing specially bad about it, it's just because two of the types I created are not really conventional (they never have instances), and the other was a copy of another (grep was a copy of map)

[19:13] <ruoso> pmurias, for some reason I think that setting NULL in pointers after the region it is pointing was freed is a good practice... but I don't have any concrete information to support that idea...

[19:24] <pmurias> what do you think for having GET(foo) and SET(foo,...) for locked setting and getting the fields in RI's

[19:24] <pmurias> seems a bit too smart for me so i hesitate a bit

[19:30] <pmurias> would need GET(type,foo) to be portable to none-gcc compilers

[19:34] <pmurias> S

[19:35] *** pmurias left
[19:39] *** pmurias joined
[19:40] * pmurias confused ips and halt'ed his computer accidently

[19:44] *** Maghnus joined
[19:45] <smtms> pmurias, you ssh'ed to your own computer? :-)

[19:46] <wknight8111> extra super security

[19:47] *** ruoso left
[19:52] <pmurias> smtms: yes

[19:53] <smtms> some people use names instead of IP's :-)

[19:53] * pmurias is too lazy

[20:03] *** yahooooo joined
[20:03] <smtms> w/in 7

[20:07] *** sri_work joined
[20:10] *** Limbic_Region joined
[20:12] *** pmurias left
[20:24] *** mncharity joined
[20:33] *** pmurias joined
[20:34] *** pmurias left
[20:38] *** eternaleye left
[20:43] *** eternaleye joined
[20:50] *** rindolf left
[20:52] <slavik> I have parrot installed, where do I get rakudo?

[20:52] <wknight8111> it comes with parrot

[20:53] <slavik> hmm ...

[20:53] <wknight8111>  /languages/perl6

[20:54] <pugs_svn> r22301 | Whiteknight++ | [Book] A few small changes for readability and flow. Remove some trailing whitespace

[20:55] <slavik> hmm, I guess rakudo wasn't compiled and installed in my path when I did make reallyinstall

[20:57] *** yahooooo left
[21:17] <slavik> I need help getting rakudo installed/compiled/etc ...

[21:18] <slavik> I ran make on parrot and I have it installed systemwide ... but no rakudo :(

[21:19] *** larsen_ joined
[21:22] <wknight8111> you can build rakudo with "make perl6"

[21:22] <wknight8111> that should create a perl6 executable file, which you should be able to install manually

[21:22] <slavik> ty

[21:24] <wknight8111> if you have the time, you could ask around in irc.perl.org/#parrot, they might know more about the installation process

[21:24] <slavik> wknight8111: that worked, thanks ...

[21:25] <slavik> although my perl6 code gives a wrong result with pugs :(

[21:26] <moritz_> the usual way to write bug reports for pugs is to submit failing test cases

[21:26] <slavik> oops, my fault

[21:26] <slavik> it's wrong in parrot

[21:26] <slavik> pugs is correct

[21:27] <slavik> hmm, I think parrot might not be doing bigint stuff when needed

[21:28] *** sri_work left
[21:28] <wknight8111> yeah, Parrot doesn't have a working bigint implementation, I don't think

[21:28] <wknight8111> or maybe they do but it's immature

[21:28] <slavik> I don't think it's there

[21:29] <slavik> I am doing 100! and it outputs way more numbers than it should

[21:29] *** jfredett_ joined
[21:30] <slavik> on my system, it happens at 22!

[21:30] <slavik> looks like pugs is more complete at this point ...

[21:33] <moritz_> yes, pugs is more feature complete

[21:34] <slavik> is there like a checklist of what is (not)availabe in pugs?

[21:37] <moritz_> not really

[21:38] <slavik> now I just wish pugs was faster ^^

[21:39] <moritz_> did you build a recent version?

[21:40] *** mncharity left
[21:40] <slavik> I used the cabal install system

[21:40] <slavik> 6.2.13.11

[21:40] *** jfredett left
[21:41] <moritz_> that should be fairly up-to-date

[21:42] <slavik> when i say slow, i am comparing it to perl5

[21:42] <slavik> 1000! in perl5 is 0.15sec, in pugs, it's 0.3sec

[21:42] <moritz_> ah well, I'd expect the difference to be much larger, actually

[21:43] <slavik> and generating a fibonacci sequence is eve slower

[21:46] <moritz_> it's hardly fair to compare pre-release software with mature, 14 year old software ;)

[21:47] <slavik> I know

[21:47] <slavik> but I was curious

[21:48] <moritz_> aye

[21:52] <slavik> although I dislike =$*IN for STDIN

[21:52] *** BinGOs left
[21:52] <slavik> <> was much nicer ...

[21:53] <pugs_svn> r22302 | Whiteknight++ | [Book] Add some clarificaitons about named parameters. Make some other small fixes here and there.

[21:54] <wknight8111> Pugs is more feature complete, but it's not maintained as actively anymore

[21:54] <wknight8111> plus, Parrot and Rakudo are being developed at a very fast pace

[21:54] <slavik> as compared to?

[21:55] <slavik> k

[21:55] <slavik> I guess I'll wait some more :)

[21:59] *** BinGOs joined
[22:04] *** BinGOs left
[22:07] *** yahooooo joined
[22:09] *** BinGOs joined
[22:14] *** BinGOs left
[22:17] *** BinGOs joined
[22:34] *** ab5tract joined
[22:39] *** larsen_ left
[22:49] *** BinGOs left
[23:15] *** eternaleye_ joined
[23:28] *** eternaleye left
[23:54] *** calin joined
