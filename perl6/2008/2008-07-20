[00:07] *** ikeda_ left
[01:13] *** kchys left
[01:22] *** wknight8111 joined
[01:25] *** mtrimpe left
[01:31] *** bacek left
[01:46] <Auzon> rakudo: say 1.true

[01:46] <p6eval> rakudo 29623: OUTPUT[1␤]

[01:46] <Auzon> rakudo: say 0.true

[01:46] <p6eval> rakudo 29623: OUTPUT[0␤]

[01:56] *** zamanf is now known as zamanfou

[01:57] <pugs_svn> r21400 | Auzon++ | [gsoc_spectest] moved given.t to spec/, cleaned up syntax, fudged for rakudo.

[01:57] <Auzon> rakudo committers: t/spec/S04-statements/given.t is ready for spectest_regression:

[02:05] *** meppl left
[02:06] *** pbuetow joined
[02:06] *** meppl joined
[02:17] *** meppl left
[02:25] *** pbuetow left
[02:28] *** wknight8111 left
[02:38] *** meppl joined
[03:06] *** kanru left
[03:25] <pugs_svn> r21401 | lwall++ | [STD] successfully parses heredocs and trims leading whitespace.

[03:32] *** alester joined
[03:32] *** alester left
[03:33] *** alester joined
[03:54] *** _00z joined
[04:09] *** _00z left
[04:11] *** eternaleye_ joined
[04:11] *** simcop2387 left
[04:15] *** Blasi left
[04:19] *** simcop2387 joined
[04:27] *** simcop2387 left
[04:28] *** meppl left
[04:31] *** simcop2387 joined
[04:34] *** simcop2387 left
[04:42] *** simcop2387 joined
[04:51] *** justatheory left
[04:56] *** Psyche^ joined
[05:07] *** Patterner left
[05:07] *** Psyche^ is now known as Patterner

[05:09] <pugs_svn> r21402 | lwall++ | [STD] list all expectations, not just ones matching first letter

[05:19] *** Psyche^ joined
[05:31] *** Patterner left
[05:31] *** Psyche^ is now known as Patterner

[05:48] <TimToady> STD successfuly parses about 2/30 of t/spec

[05:48] <TimToady> *2/3

[05:53] <pugs_svn> r21403 | lwall++ | [kv.t] must have space before -> and {

[05:54] <Auzon> TimToady++: Very impressive!

[05:54] *** Psyche^ joined
[05:55] <Auzon> How do you convince STD.pm to check it?

[06:05] *** Patterner left
[06:05] *** Psyche^ is now known as Patterner

[06:18] *** alester left
[06:28] *** ashizawa joined
[07:02] <pugs_svn> r21404 | lwall++ | [teststd] program to run STD over t/spec

[07:17] <pugs_svn> r21405 | lwall++ | [Cursor] short circuit some () returns

[07:17] <pugs_svn> r21405 | lwall++ | [next.t] fix some malformed for loops

[07:22] <pugs_svn> r21406 | lwall++ | [ord_and_chr.t] some malformed double-quoted strings

[07:35] <pugs_svn> r21407 | lwall++ | three more malformed tests spotted by STD

[07:35] <pugs_svn> r21407 | lwall++ | (remember that if() and for() are function calls!)

[07:58] *** cognominal_ left
[08:00] *** cognominal_ joined
[08:02] *** pbuetow joined
[08:12] *** iblechbot joined
[08:58] *** masak joined
[09:38] *** Jedai left
[09:40] *** fridim_ joined
[09:58] *** meppl joined
[10:00] *** polettix joined
[10:10] *** wknight8111 joined
[10:20] *** araujo left
[10:26] *** pmurias joined
[10:27] <pugs_svn> r21408 | fglock++ | [v6.pm] implemented string interpolations \x[99] and \c[FOUR TEARDROP-SPOKED ASTERISK]

[10:31] <pmurias> v6: say 4

[10:31] <pmurias> moritz_: we don't have v6.pm in the evalbot?

[10:32] *** ashizawa left
[11:00] *** elmex joined
[11:05] <pmurias> (lex poisoning)--

[11:12] <pugs_svn> r21409 | pmurias++ | [pixie] code vanishing protection

[11:13] <pugs_svn> r21410 | pmurias++ | [STD5_dump_match] added an option to mark arrays with a circumfix []

[11:17] *** jfredett_ joined
[11:19] <pugs_svn> r21411 | pmurias++ | [smop]

[11:19] <pugs_svn> r21411 | pmurias++ | s1p handles integers and multiple parameters now

[11:19] <pugs_svn> r21411 | pmurias++ | + SMOP__S1P__Array_create()

[11:19] <pugs_svn> r21411 | pmurias++ | + Str.perl

[11:19] <pmurias> is adding a use v6; to switch to perl6 in C a sane idea?

[11:22] *** alester joined
[11:28] <pmurias> is there a p6 C grammar somewhere?

[11:29] *** jfredett left
[11:30] <pugs_svn> r21412 | pmurias++ | [elf] converted the elf AST description into perl6 

[11:37] <pugs_svn> r21413 | pmurias++ | fixed teststd to work on systems without . in $PATCH

[11:39] *** alester left
[11:53] *** pmurias left
[11:58] *** hanekomu joined
[11:58] *** hanekomu left
[11:59] *** lumi left
[11:59] *** lumi joined
[12:10] *** lumi left
[12:18] *** lumi joined
[12:23] *** lumi left
[12:23] *** HadleyTheFox left
[12:25] *** lumi joined
[12:29] *** apeiron_ joined
[12:36] *** lumi left
[12:36] *** meppl left
[12:38] *** apeiron left
[12:39] *** lumi joined
[12:48] *** ashizawa joined
[12:48] *** chris2 joined
[12:49] *** lumi left
[12:56] *** ashizawa left
[13:03] *** lumi joined
[13:10] *** aindilis left
[13:11] *** lumi left
[13:12] *** lumi joined
[13:12] *** polettix left
[13:20] *** apeiron joined
[13:28] *** apeiron_ left
[13:28] *** lumi left
[13:32] *** lumi joined
[13:36] *** pmurias joined
[13:41] *** iblechbot left
[13:42] *** lumi left
[13:42] *** meppl joined
[13:48] <pugs_svn> r21414 | pmurias++ | [teststd] added use strict

[13:48] *** lumi joined
[13:52] <pugs_svn> r21415 | rhr++ | [ord_and_chr.t] typo - '{' is 123

[13:56] *** lumi left
[14:01] *** araujo joined
[14:02] *** Chillance joined
[14:07] *** lumi joined
[14:15] *** lumi left
[14:19] *** lumi_ joined
[14:19] <pmurias> TimToady: i'm trying to inline tryfile into teststd (wraping it in eval), so far i have found problems with $::HIGHWATER and $::HIGHEXPECT, but when even when resetting them manualy the subsequent parses don't work

[14:20] <pmurias> are you aware of things which might be causing that?

[14:24] *** lumi_ left
[14:31] *** lumi joined
[14:36] *** lumi left
[14:38] *** lumi joined
[14:40] *** jhorwitz joined
[14:43] *** lumi left
[14:45] *** lumi joined
[14:45] <TimToady> pmurias: well, anything declared our that isn't re-initialized in either Cursor.pm or STD.pmc

[14:46] <TimToady> also, anything declared my at file scope

[14:46] <TimToady> (that isn't functioning as constant)

[14:47] <TimToady> in theory %lexers could get poisoned, but it shouldn't happen

[14:47] <TimToady> it's most likely one ours at the front of STD.pmc

[14:47] <TimToady> s/on/one of the/

[14:48] <TimToady> gah, can't tipe this morning

[14:48] <TimToady> (will be afk for a couple days starting in an hour or so)

[14:48] *** lumi left
[14:49] *** lumi joined
[14:53] *** pmurias left
[14:54] *** lumi left
[14:55] *** lumi joined
[15:00] *** lumi left
[15:01] *** meppl left
[15:03] *** pbuetow_ joined
[15:03] *** pbuetow left
[15:04] *** pbuetow_ left
[15:04] *** pbuetow joined
[15:06] *** lumi joined
[15:07] *** pmurias joined
[15:07] <pmurias> TimToady: the lex/ directory gets poisoned often

[15:14] *** iblechbot joined
[15:18] *** lumi left
[15:20] *** lumi joined
[15:20] <pmurias> i'll check all globals (not only directly in main::) and lexicals than

[15:23] *** nothingmuch left
[15:24] *** lumi left
[15:25] *** lumi joined
[15:30] <pmurias> * then

[15:34] *** lumi left
[15:34] *** pmurias left
[15:39] *** lumi joined
[15:44] *** lumi left
[15:45] *** lumi joined
[15:53] *** lumi left
[15:54] <TimToady> lex/ poisoning would affect separate tests as well

[15:54] *** lumi joined
[15:56] <TimToady> it's only semantic changes to STD and Cursor that can affect lex/; otherwise it's immutable data

[15:56] <TimToady> 'k, heading out for OSCON now...

[16:00] <TimToady> bbl &

[16:04] *** lumi left
[16:11] *** lumi joined
[16:15] *** chris2 left
[16:21] *** justatheory joined
[16:21] *** lumi left
[16:23] *** lumi joined
[16:27] *** jan___ left
[16:35] *** lumi left
[16:36] *** nothingmuch joined
[16:50] <pugs_svn> r21416 | fglock++ | fixed char class with spaces

[16:52] *** lumi joined
[17:01] *** justatheory left
[17:14] *** alester joined
[17:18] *** timbunce joined
[17:27] *** [particle]1 joined
[17:33] *** chris2 joined
[17:43] *** [particle] left
[17:49] *** jan_ joined
[17:58] *** justatheory joined
[18:00] *** jan__ joined
[18:04] *** alester left
[18:09] *** lumi left
[18:10] *** pmurias joined
[18:10] *** lumi joined
[18:13] *** jan_ left
[18:18] *** alester joined
[18:23] *** masak left
[18:33] <pugs_svn> r21417 | Auzon++ | [gsoc_spectest] testing that block eval is not implemented. also cleaned up eval.t. (added 1 test)

[18:36] *** timbunce left
[18:43] <pugs_svn> r21418 | fglock++ | [PCR] unicode fixes

[18:44] <pmurias> fgl

[18:44] <pmurias> sorry

[18:44] <Auzon> pmurias: Are you a rakudo committer?

[18:46] <pmurias> Auzon: no

[18:46] <pmurias> i'm not even a rakuo harcker

[18:46] <pmurias> * rakudo hacker

[18:47] <Auzon> ah, ok

[18:52] *** rindolf joined
[18:52] <rindolf> Hi all.

[18:53] <Auzon> Hi.

[18:54] <pugs_svn> r21419 | fglock++ | [v6.pm] version 0.022  # 827 tests pass

[18:56] *** timbunce joined
[18:58] <pmurias> rindolf: hi

[18:58] <rindolf> Hi Auzon , pmurias 

[19:02] *** Schwern joined
[19:02] <pmurias> rindolf: want to do some perl6 hacking or looking for casual discussion?

[19:02] <rindolf> pmurias: just discussion.

[19:03] <rindolf> pmurias: still didn't really start with Tucan or Spark.

[19:03] <rindolf> pmurias: email to @perl.org works now.

[19:03] <rindolf> There was an email I wanted to write.

[19:03] <rindolf> Should I blog about the OSDClub "puts ruby" meeting on use.perl.org?

[19:04] <rindolf> OSDClub Tel Aviv == Tel Aviv Linux Club + Perl-IL etc.

[19:04] <pmurias> "puts ruby" = ?

[19:06] *** s1n left
[19:09] * rindolf is watching the Gilmore Girls.

[19:09] <rindolf> 4th Season.

[19:10] <rindolf> pmurias: a presentation about Ruby.

[19:10] <rindolf> By ik_5

[19:10] * pmurias dosn't watch tv

[19:10] <pmurias> * doesn't

[19:13] <pmurias> rindolf: why is it called "puts ruby"?

[19:13] <rindolf> pmurias: it's from torrent.

[19:13] <rindolf> pmurias: because puts is like say in Ruby.

[19:13] <rindolf> I think.

[19:13] <pugs_svn> r21420 | fglock++ | [PCR] unicode fix

[19:14] <pugs_svn> r21421 | fglock++ | [v6.pm] require new PCR

[19:14] <pmurias> a "say perl" would be a better name

[19:15] <pmurias> (for a perl presentation)

[19:15] *** timbunce left
[19:17] *** nothingmuch left
[19:17] *** Lunchy left
[19:17] *** orafu left
[19:18] *** nothingmuch joined
[19:18] *** Lunchy joined
[19:18] *** orafu joined
[19:18] *** broquaint joined
[19:18] *** p6eval joined
[19:18] *** Guest16015 joined
[19:18] *** ilbot2 joined
[19:18] *** alester left
[19:18] <pmurias> real time html rendering while editing code in firebug is cool

[19:31] *** jhorwitz left
[19:36] *** timbunce joined
[19:41] *** s1n joined
[19:48] *** Limbic_Region joined
[20:03] *** PZt left
[20:03] *** timbunce left
[20:03] *** justatheory left
[20:04] *** PZt joined
[20:08] <pmurias> what is the recommended way to ask for an AST review?

[20:11] <pmurias> should i mail p6-compiler, it seems to contain mostly rakudo patches and bug reports

[20:16] *** josh- joined
[20:20] <pmurias> nothingmuch: should the metainformation for an object be stored using a special API provided by the object representation or is it dependend on the metaclass and should be stored using the API for normal attributes?

[20:23] <nothingmuch> what kind of meta information?

[20:24] <pmurias> nothingmuch: the methods an object has

[20:24] <nothingmuch> that's altering the metaclass

[20:24] <nothingmuch> it has it's own API

[20:24] <nothingmuch> its

[20:24] <nothingmuch> or if you're editing the object's proto

[20:24] <nothingmuch> then it's still the same metaclass api

[20:25] <pmurias> hm

[20:25] <nothingmuch> it isn't the representation though

[20:25] <pmurias> and in prototype based oo?

[20:26] <nothingmuch> the best answer I have for that is "it depends"

[20:26] <nothingmuch> but technically I would say since the meta and the repr and the object in prototype oo *can* be different in the pure sense

[20:26] <nothingmuch> then still not the same

[20:26] <nothingmuch> by different I mean it might be the same data, the same object, but a different responder

[20:27] <pmurias> ruoso sketch the api like this http://www.perlfoundation.org/perl6/index.cgi?smop_oo_api

[20:27] <lambdabot> Title: SMOP OO API / Perl 6

[20:27] <pmurias> * sketched

[20:27] <nothingmuch> yeah

[20:27] <nothingmuch> note the '^'

[20:27] <nothingmuch> this denotes it is a meta call

[20:28] <nothingmuch> also, this is specific to perl 6 prototype OO

[20:28] <nothingmuch> it's useful as a base API

[20:28] <pmurias> the ^! is an object representation call

[20:28] <nothingmuch> but for some models it doesn't make sense

[20:28] <nothingmuch> in SMOP land repr is the meta

[20:29] <nothingmuch> if your question was about some hypothetical object viewable from perl 6 then the answer is that they may be different

[20:29] <nothingmuch> if you're asking about SMOP, check with ruoso but in general meta calls are made on the repr

[20:29] <pmurias> i was asking because i want to implement this

[20:29] <nothingmuch> implement where?

[20:30] <pmurias> in SMOP ;)

[20:30] <nothingmuch> oh

[20:30] <nothingmuch> definitely ask ruoso

[20:30] <nothingmuch> i'm not your guy =

[20:30] <nothingmuch> =)

[20:32] <pmurias> i just want to know what you think

[20:32] <nothingmuch> IIRC i agreed with ruoso

[20:32] <nothingmuch> but I'm not fully up to date on the model

[20:33] <nothingmuch> i don't know if it diverged since the PTP

[20:33] <nothingmuch> W

[20:33] <pmurias> what do you mean by the meta in "in SMOP land repr is the meta"

[20:34] <pmurias> the metaobject instance is different from the object representation

[20:35] <nothingmuch> i meant that all meta calls are goverened by the repr IIRC

[20:35] <nothingmuch> the confusing bit is that we use 'meta' to mean one of two things

[20:35] <nothingmuch> well, one of like 432 things

[20:36] <nothingmuch> but mainly it's either the instance of the metaclass, or the concept of what governs the object's interface 

[20:36] <nothingmuch> i meant the second in this case

[20:36] <nothingmuch> i hope that clarifies instead of confuses ;-)

[20:37] <pmurias> it mostly generalised ;)

[20:37] <nothingmuch> at any rate, conceptually the representation type and the object interface stuff don't need to be the same

[20:37] <pmurias> there are 3 things which govern the interface the RI,the repr and the metaclass instance

[20:37] <nothingmuch> typically the representation is a product of the meta stuf

[20:37] <nothingmuch> define govern ;-)

[20:38] <nothingmuch> as I see it there is only one:

[20:38] <pmurias> influence

[20:38] <nothingmuch> at runtime it's the RI

[20:38] <nothingmuch> at compile time it's the meta class instance, for creating the repr and the RI

[20:38] <nothingmuch> and the repr kinda ties the knot

[20:39] <pmurias> different the way the ruoso's previous attempt in smop tried to do it

[20:39] <nothingmuch> well, again, i'm not 100% up to date

[20:39] <pmurias> the metaclass instance is also used in the runtime

[20:39] <nothingmuch> that's the RIs business though

[20:39] <nothingmuch> nobody except the RI knows that the RI is delegating to the metaclass

[20:40] <nothingmuch> so on the outside looking in only the RI is responsible

[20:41] <pmurias> aren't the object representations supposed to be indistinguishable from the outside?

[20:41] <nothingmuch> at some point the RI has to be consulted

[20:41] <nothingmuch> the repr is kind of a meta meta

[20:42] <nothingmuch> since it contains enough info to locate the RI

[20:42] <nothingmuch> or maybe I'm being confused

[20:42] <nothingmuch> anyway, i'm sorry but I have to get back to $real_work, and my brain is not fully functional today

[20:42] <nothingmuch> so I can't multitask

[20:42] <nothingmuch> hunt down ruoso, he'll be much more helpful

[20:43] <pmurias> i would have to track him down ;)

[20:43] *** Schwern left
[20:43] <pmurias> i anybody else responsible for the meta stuff?

[20:43] <nothingmuch> i dunnop

[20:44] <nothingmuch> i only ever discussed this stuff with ruoso/audreyt/TimToady to my recollection

[20:44] <nothingmuch> i'm pretty out of the loop

[20:45] <pmurias> i'll implement it the way i would like it to be than ;)

[20:46] <nothingmuch> at any rate run it by ruoso

[20:46] <pmurias> ok

[20:47] *** pbuetow left
[21:16] *** simcop2387 left
[21:16] *** simcop2387 joined
[21:18] *** pmurias left
[21:20] *** iblechbot left
[21:29] *** simcop2387 left
[21:29] *** simcop2387 joined
[21:40] * zamanfou is now away: In the rain my tears are forever lost.

[21:42] *** jferrero joined
[21:50] *** polettix joined
[21:57] *** timbunce joined
[21:59] *** Alias__ left
[22:02] *** lambdabot left
[22:03] *** lambdabot joined
[22:05] *** lambdabot left
[22:06] *** lambdabot joined
[22:16] *** lambdabot left
[22:17] *** lambdabot joined
[22:39] *** jferrero left
[22:46] *** Alias_ joined
[22:57] *** chris2 left
[23:09] *** polettix left
[23:12] *** Limbic_Region left
[23:18] *** eternaleye_ left
[23:19] *** eternaleye_ joined
[23:35] *** frobnitz joined
[23:37] *** alester joined
[23:37] *** alester_ joined
[23:39] *** Schwern joined
[23:41] *** alester_ left
[23:56] *** ikeda joined
[23:57] *** Alias_ left
[23:57] *** alester left
