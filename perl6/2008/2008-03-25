[00:13] <clkao> i am not saying we don't need testing. 

[00:14] <clkao> oop miscan

[00:33] *** BinGOs joined
[00:42] *** Auzon left
[01:05] *** dduncan joined
[01:06] *** elmex_ left
[01:08] *** tobeya left
[01:10] *** LazyJim left
[01:10] *** meppl left
[01:11] *** meppl joined
[01:12] *** dduncan left
[01:29] *** wknight8111 joined
[02:00] <meppl> good night

[02:02] *** wknight8111 is now known as wknight8112

[02:02] *** wknight8112 is now known as wknight8111

[02:03] *** meppl left
[02:44] *** damianc joined
[03:01] *** peepsalot left
[03:02] *** peepsalot joined
[03:02] *** Limbic_Region left
[03:10] *** peepsalot left
[03:11] *** peepsalot joined
[03:12] *** justatheory left
[03:14] *** peepsalot left
[03:14] *** peepsalot joined
[03:20] *** peepsalot left
[03:22] *** peepsalot joined
[03:24] *** alester joined
[03:25] *** peepsalot left
[03:26] *** peepsalot joined
[03:34] *** peepsalot left
[03:35] *** peepsalot joined
[03:37] *** justatheory joined
[03:39] *** peepsalot left
[03:39] *** peepsalot joined
[03:41] *** peepsalot left
[04:15] *** damianc left
[04:19] *** wknight8111 left
[04:30] <mncharity> i suppose it's technically tomorrow already, and way past end of day, but let's see, something quick...

[04:32] *** wtgee joined
[04:34] <mncharity> v6/v6-KindaPerl6/src/KindaPerl6/Runtime/Perl6/Match.pm is Capture is Value... hmm.  simpler...

[04:37] <mncharity> g'night all &

[04:37] <pugs_svnbot> r20166 | putter++ | [elf_b] Dropped new() from ir_nodes.p6.  Moose provides.  The real-soon-now elf_b_create ast_handler creator can almost as easily use named arguments as positional.

[04:37] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20166

[04:37] *** mncharity left
[04:37] <lambdabot> Title: Changeset 20166 - Pugs - Trac

[04:50] *** FurnaceBoy left
[05:09] *** vsoni joined
[05:30] *** vsoni left
[05:30] *** alc joined
[05:37] *** justatheory left
[05:44] *** alester left
[06:32] *** penk joined
[06:34] *** wtgee left
[06:59] *** BinGOs left
[07:16] *** BinGOs joined
[07:17] *** BinGOs left
[07:17] *** BinGOs joined
[07:18] *** BinGOs left
[07:26] *** BinGOs joined
[07:42] *** Aankhen`` joined
[07:46] *** marmic left
[08:11] *** marmic joined
[08:26] *** iblechbot joined
[08:34] *** elmex joined
[08:58] *** Southen_ joined
[09:54] *** meteorjay joined
[09:55] *** ruoso joined
[10:17] *** codenight joined
[10:32] *** alc left
[10:38] * ruoso . o O ( *sigh* It's probably two weeks without coding SMOP... real life sucks... *sigh* )

[10:46] *** xinming joined
[10:49] *** codenight left
[10:55] *** IllvilJa joined
[11:42] *** Lorn left
[11:49] *** Lorn joined
[12:09] *** Lorn_ joined
[12:22] *** Lorn left
[12:24] *** r0bby left
[12:36] *** FurnaceBoy joined
[12:39] *** r0bby joined
[12:42] *** iblechbot left
[12:45] *** [particle1 joined
[13:01] *** penk left
[13:03] *** masak joined
[13:30] *** wknight8111 joined
[13:30] *** iblechbot joined
[13:31] *** lichtkind joined
[13:36] *** eternaleye left
[13:46] *** cmarcelo joined
[13:47] *** simcop2387 left
[13:47] *** simcop2387 joined
[13:54] *** rdice joined
[14:01] *** alester joined
[14:14] *** pmurias joined
[14:14] *** pmurias left
[14:20] *** orafu joined
[14:32] *** TJCRI joined
[14:36] *** avar left
[14:36] *** avar joined
[14:58] *** mncharity joined
[14:58] <mncharity> ruoso: re two weeks without coding SMOP, :/

[15:11] *** LazyJim joined
[15:21] *** Foke2 joined
[15:40] *** Zygo left
[15:40] *** Zygo joined
[15:51] *** Aankhen`` left
[15:51] *** Foke2 left
[15:56] *** pmurias joined
[16:01] *** gbarr joined
[16:17] <pmurias> mncharity: does the order of fields returned by field_names matter (other than being the same as field_values)?

[16:17] *** justatheory joined
[16:22] *** wtgee joined
[16:26] *** Foke2 joined
[16:37] *** Jamtech joined
[16:40] *** Jamtech_ joined
[16:45] *** tobeya joined
[16:46] *** Jamtech_ left
[16:57] *** Jamtech left
[17:00] <pugs_svnbot> r20167 | lwall++ | [STD] fighting all kinds of YAML, TRE, and P5 bugs...

[17:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20167

[17:00] <lambdabot> Title: Changeset 20167 - Pugs - Trac

[17:07] *** masak left
[17:17] <mncharity> lol #re commit message

[17:17] <mncharity> sigh

[17:18] <mncharity> re YAML, it might be easier and faster to do a "dump as p5" format like STD_red_run's new --dump5.

[17:21] *** xinming left
[17:22] <TimToady> I'm just dumping lex/* as raw lines now

[17:23] *** eternaleye joined
[17:23] <TimToady> the only thing left in YAML is the DATA section, and that seems pretty harmless

[17:25] *** wtgee left
[17:29] <mncharity> ok

[17:30] <mncharity> err, "nod"

[17:44] *** barney joined
[17:46] *** cmarcelo_ joined
[17:46] *** cmarcelo left
[17:52] *** [particle1 left
[17:53] <mncharity> my first bit of programming on elf_b.  yay. :)

[17:53] <pugs_svnbot> r20168 | putter++ | [elf_a] Start of for() and while() support.  New -xe option: -xe -e 3  runs 3 in a separate perl.

[17:53] <pugs_svnbot> r20168 | putter++ | [elf_b] New -e CODE.  Calls STD_red, and builds a Match tree.  Match::describe is unfinished.

[17:53] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20168

[17:53] <lambdabot> Title: Changeset 20168 - Pugs - Trac

[17:55] <mncharity> oops, forgot to svn add Match

[17:59] <pugs_svnbot> r20169 | putter++ | [elf_b] Add the new Match.pm file missing from r20168.

[17:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20169

[17:59] <lambdabot> Title: Changeset 20169 - Pugs - Trac

[18:01] <pmurias> mncharity: why do you prefere positional arguments to named ones?

[18:02] <pmurias> * prefer

[18:03] <mncharity> pmurias: in what context?

[18:04] <mncharity> the --dump5 format uses positional because it's faster in p5, plus smaller and simpler.

[18:05] <pmurias> in Match.pm you wrote a special positional version of new

[18:07] <mncharity> with it, knowledge about Match's exact method names remains localized in Match for now, rather than leaking into main.p6, which otherwise has no need for it.  so it's a firewall to stop Match naming decisions from propagating into main.pl.

[18:08] <mncharity> Also, Match, and its field name choices, hadn't been written yet when the main.p6 code was. :)

[18:08] <mncharity> err, s/main.*/main.p6/g

[18:11] <pmurias> the first reason is a bit lame

[18:14] <pmurias> can i purge Match.make ?

[18:16] <mncharity> re lame, perhaps, but it's compartmentalization.   The dump pipe/format and its ends should be independent of the Match format used (since every single p6 impl has had a different one, and that's not likely to stop).  make() is basically make_from_dump5_match_format().

[18:17] <pmurias> you count on the positionals being maped to the right attribiutes nonetheless

[18:18] <mncharity> placing the make_from_dump5_match_format in Match rather than in a not yet existent Parser class which encapsulates the pipe might be something to refactor in future, but as Parser doesn't really exist yet, just scattered pieces of it, and as Match is likely to change, the current location seems plausible.

[18:19] <mncharity> the match() terms on the --dump5 pipe are defined positionally.

[18:19] <mncharity> and subject to change of course - I punted bool for instance, since it currently isn't being used in STD_red match trees.  which perhaps needs to change, but for now, kiss.

[18:20] <mncharity> but the contents and layout of those terms are a separate issue from how any particular p6 client may chose to structure its Match object.

[18:21] *** marmic left
[18:21] <pmurias> sorry, misunderstood Match.make() intended purpose 

[18:22] <pmurias> wouldn't

[18:22] <pmurias> package Fastdump { sub match ($r,$s,$f,$t,$h){Match.new('rule',$r,'str',$s,'from',$f,'to',$t,'hash',$h)}

[18:22] <pmurias> }

[18:22] <pmurias> be cleaner?

[18:23] <pmurias> forgot the rationale at the top

[18:23] <pmurias> silly me

[18:23] <mncharity> so the question is, should the nacient Parser code, depend Match providing an "undump" function (ie, "Match understanding pipe format"), or should Parser understand Match layout.  I guess it doesn't matter much at the moment, since they are both likely to change.  spreading pipe knowledge around seemed simpler... not sure why.  perhaps because the current Match

[18:24] <mncharity> seems even more of a hack than the pipe layout.

[18:26] <pmurias> the Match.new interface needs to be specced

[18:26] <pmurias> * speced

[18:26] <mncharity> with the exception of from() and to() there, everything else is non-spec.  AST handlers unavoidably have to deal with it, though the current ast_handler.config preprocessor provides insulation from .rule and .str.

[18:26] <mncharity> re speced, yes

[18:28] <mncharity> Match has "been in need of" spec'ing for a very long time.  But there are sort of different visions for what Match is.  And the choices seem non-local, tied up in regex engine implementation for instance.  So... the issue gets deferred, probably properly so.

[18:29] <mncharity> my impression is only the from(), to() and the coerced behavior of Match (eg, as hash or bool or ...) have been speced.  I could well be wrong/out of date though.

[18:30] <mncharity> taking a look at Snn and making elf_b_src/Match.pm ... err... can't resist...  making elf_b_src/Match.pm match them... would be great.

[18:30] <mncharity> hmm, though maybe that should wait for elf_c.

[18:31] <pmurias> you can't resist looking at the spec?

[18:31] <mncharity> focus of elf_b is to work at least as well as elf_a, being able to compile itself and be used as the platform for further development.

[18:31] <mncharity> re ?, err, no, lame pun, never mind.

[18:34] *** qmole left
[18:37] <mncharity> so anyway, that's the story on make().  no big deal - whichever.  feel free to do your suggested edit.  a first commit by someone else to elf_b!  woot :)  that would be nice.

[18:38] *** meppl joined
[18:43] <mncharity> pmurias: I'm contemplating adding a cache for parser output, to speed things up.  I'd be interested in any feedback re "it's fine" vs "yeah, faster would be more usable".

[18:47] <pmurias> it dosn't matter to the user much only for the elf developer

[18:48] <mncharity> hmm, re "AST handlers unavoidably have to deal with it", err, no.  that's wrong.  I was confused.  the whole point of that preprocessing of ast_handlers.config to avoid dependency on .str is because then the handlers *don't* have to deal with it.  Keeping the internal structure of Match something only (un)dumpers and elf_x_create have to worry about.

[18:48] <mncharity> elf developers are currently the only users. :)  so I gather that was a "yes, faster would be more usable"?

[18:50] <pmurias> yes

[18:51] <mncharity> ok.  sounds like a plan.  indeed, even the 7 sec delay when working on main.p6 was getting to be a pain.

[18:53] <mncharity> so caching and perhaps better error messages for usability,  finishing match_describe and a start at ast_handlers for elf_b.

[18:57] <pmurias> &

[18:58] <mncharity> lunch &

[19:00] *** Psyche^ joined
[19:00] *** cmarcelo_ is now known as cmarcelo

[19:16] *** Patterner left
[19:16] *** Psyche^ is now known as Patterner

[19:21] *** TJCRI left
[19:33] *** peeps[work] joined
[19:40] *** barney left
[19:44] *** marmic joined
[19:46] *** qmole joined
[20:01] *** Lorn_ left
[20:03] *** Lorn joined
[20:10] *** thoughtpolice joined
[20:11] *** ruoso left
[20:22] *** Jamtech joined
[20:28] *** perlbot left
[20:28] *** perlbot joined
[20:35] *** Lorn left
[20:39] *** Lorn joined
[20:57] *** TJCRI joined
[21:03] <pmurias> mncharity: would it speed up the compile if methods in ir_nodes where inherited instead of generated?

[21:14] *** eternaleye_ joined
[21:15] *** eternaleye left
[21:15] *** eternaleye_ is now known as eternaleye

[21:33] <mncharity> pmurias: anything which reduces the code to be parsed, would speed up the compile.  but since our objective to create lots more code, it's a best a very short term fix.  let me check in an attempt at a caching STD_red_run...

[21:40] <pmurias> mncharity: caching code - that assumes the code dosn't change right?

[21:40] <mncharity> right

[21:41] <mncharity> so it doesn't help if you are working one something big, like ir_nodes.p6

[21:41] <pugs_svnbot> r20170 | putter++ | [STD_red_run] An attempt at caching, to speed repeated parsing.

[21:41] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20170

[21:41] <lambdabot> Title: Changeset 20170 - Pugs - Trac

[21:42] <mncharity> but if you are working on something else, eg, Match.p6, then the ir_nodes.p6 parse will be fast after the first run.

[21:42] <mncharity> just set STD_RED_CACHEDIR to some temporary dir.

[21:44] <mncharity> for me, the caching takes the 7 sec ./elf_b_create down to 3 sec.

[21:44] <mncharity> of which 1+ is ./elf_b perl5 startup time, so the compile+emit is taking < 1 sec.

[21:45] <mncharity> err, no.  < 2 sec.

[21:46] <mncharity> I'd be interested in hearing how it runs for you.

[21:50] *** TJCRI left
[21:50] <pmurias> STD_RED_CACHEDIR env var?

[21:52] <mncharity> yes

[21:53] <mncharity> --help has some details.  only one of note here is  -e CODE isn't cached.

[21:54] <pmurias> 11sec

[21:57] <mncharity> :/

[21:57] <pmurias> the orginal thing is even slower

[21:57] <mncharity> the first run takes how long?

[21:58] <pmurias> mncharity: the cached matches are very large

[21:58] <pmurias> 24sec

[21:59] <pmurias> the cached file is 968K

[22:00] <pmurias> * are

[22:02] <mncharity> could try compressing them.  but on a cpu limited machine that seems problematic.  success would depend on the filesystem being even slower.  hmm.

[22:04] <mncharity> i really really want to avoid the mess of build systems and individual file compilation.

[22:04] <pmurias> the string that was matched against is duplicated over and over again

[22:05] <mncharity> I don't suppose your laptop has a cpu knob, one with a "waste power, be hot, run fast" setting? :)

[22:05] <mncharity> "the string that was matched against"?  oh, yes.

[22:06] <mncharity> currently each Match object has its own copy of its match string, rather than using indexes into a single copy of it.

[22:07] *** Jamtech left
[22:07] <mncharity> perhaps order 10x bigger.

[22:08] <mncharity> went back and forth a couple of times fighting with yaml.  didn't seem to have any performance impact.

[22:09] <pmurias> mncharity: i'm using a standalone box

[22:09] *** Limbic_Region joined
[22:10] <pmurias> * desktop box

[22:13] <mncharity> oh, sorry, misremembered

[22:13] <mncharity> hmm.

[22:14] <mncharity> sigh.

[22:14] <pmurias> np

[22:14] <pmurias> ;)

[22:15] <mncharity> lol

[22:15] <mncharity> relieved lol :)

[22:20] *** elmex left
[22:20] <pmurias> mncharity: is there a reason for not keeping on copy of the str? (besides simplisity)

[22:21] *** rdice left
[22:23] *** Blazeix joined
[22:24] <mncharity> pmurias: not really.  could tweak the --dump5 protocol to be something like   matching_string('...one copy...',match('comp_unit',0,3,{...}))  and then unpack it at the other end.

[22:24] <pmurias> i get try doing it tomorrow

[22:25] <pmurias> s/get//

[22:25] <mncharity> hmm..  matching_string('...one copy...'); match('comp_unit',0,3,{...})

[22:25] <mncharity> not s-expressions, but function calls. :)

[22:25] <mncharity> re tomorrow, :)

[22:27] <mncharity> might want to check how fast it is just to pipe it through compress or gzip -<small int>.  with the text gone, it will be more a machine format than one which can be eyeballed, so could go all the way. :)

[22:28] <pmurias> maybe bind_str('string',0); match(...,get_string(0))

[22:28] <mncharity> (un)compressing it would just be a 2 line change.

[22:28] <pmurias> loading the match by perl takes 0.65sec

[22:29] *** BinGOs left
[22:29] <mncharity> re 10000 copies of "get_string", perhaps have a match2(...) in which the get_string is implicit.

[22:30] <mncharity> but I like being able to index into multiple strings...

[22:31] <pmurias> i should get to sleep instead of wasting time not coding

[22:31] *** pmurias left
[22:34] <mncharity> good night...

[22:36] <mncharity> the current dump is 34x bigger than the ir_nodes.p6.  gzip -9 takes that down to 3x in < 0.1 sec.

[22:37] <mncharity> s/than/for

[22:37] <mncharity> but... we are talking less than a MB.  for a big file.  do we care?

[22:39] *** eternaleye left
[22:41] *** lichtkind left
[22:43] <Blazeix> Hi, I'm trying to learn Perl 6, so I'm implementing a card game. I was originally going to use an array of strings to keep track of the suit types, but I was wondering if there was a more perl6-centric way. Any insights?

[22:46] <Blazeix> maybe a junction?

[22:46] <mncharity> class Suit?

[22:50] <Blazeix> And just have publicly accessible constants?

[22:53] <pugs_svnbot> r20171 | putter++ | [elf_a] Added kludgy primitives for s/// and file_exists().  Added quote:regex and its IR node.  $x.re_gsub(/b/,'B') emits as $x =~ s/b/B/g;

[22:53] <pugs_svnbot> r20171 | putter++ | [elf_b] Fleshed out match_describe().  elf_b, given its own code, currently dumps a description of the Match tree.  >4x slower than elf_a does.

[22:53] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20171

[22:53] <lambdabot> Title: Changeset 20171 - Pugs - Trac

[22:56] <mncharity> p5 encouraged a very "bottom up, non-oo, minimalistic" style.  p6 is much more like ruby or python in encouraging a more oo approach.  so more like "what are my concepts, and the operations on them - those can be objects", than a p5-ish "what language primitive shall I use to express a concept".

[23:00] <mncharity> my answer to "how to learn p6" is starting to be "learn ruby". :)

[23:02] *** cmarcelo left
[23:10] *** peeps[work] left
[23:16] *** eternaleye joined
[23:25] *** iblechbot left
[23:26] *** eternaleye left
[23:31] *** cmarcelo joined
[23:32] *** eternaleye joined
[23:50] *** cai joined
[23:51] *** cai left
[23:51] *** cai joined
