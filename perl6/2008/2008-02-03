[00:04] *** IllvilJa left
[00:11] <mncharity> my impression is the parrot folks have been working to make t/ less monolithic.  does anyone know the details?

[00:12] <mncharity> specifically, has anyone looked at "chunking" the tests?  ie, groveling over the files and determining which lines are needed for each test?

[00:22] <peepsalot> jnthn, when was that FAQ originally written?

[00:22] <peepsalot> and how much is perl 6 still changing?

[00:25] <peepsalot> pmichaud, i added a comment to RT#39930 earlier today, regarding the smoke test being broken

[00:26] <peepsalot> oops, semi-wrong-channel

[00:26] *** Auzon left
[00:27] <peepsalot> time for dinner.  afk

[00:27] *** qmole left
[00:29] <jnthn> peepsalot: I think over a year ago. And, well, hard to say how much stuff is changing. Sometimes I think something won't change, and a good reason comes up to change it, etc.

[00:30] <jnthn> Like the list assignment discussion earlier today.

[00:30] * jnthn afk too, sleepz

[00:30] *** zamolxes joined
[00:41] *** devogon left
[00:49] *** Juerd is now known as Whreq

[00:55] <meppl> good night

[00:58] *** meppl left
[01:07] *** stevan_ joined
[01:16] *** jferrero left
[01:18] *** icwiener left
[01:31] *** jjore joined
[01:44] *** blindfish left
[01:46] <mncharity> re tests, it looks like t/spec is the development hotspot for the test suite.  (ah, so *that's* what fudge is:)

[01:52] *** luqui joined
[01:55] *** jiing left
[02:06] <TimToady> ah, so you found the README didja?

[02:11] *** zamolxes left
[02:16] *** Connel joined
[02:23] <monomorph> mncharity: earlier today, you wondered what keeps people from contributing to perl6

[02:23] <monomorph> mncharity: i'm new to this channel, so i have an "outsider" perspective that might be interesting (maybe not)

[02:24] <monomorph> mncharity: this is long, so i posted it on http://jottit.com/r3stt/

[02:24] <lambdabot> Title: Perl6 Thoughts: Home

[02:24] <monomorph> mncharity: perhaps at least food for discussion

[02:28] *** literal left
[02:33] *** Lion2 joined
[02:37] <mncharity> re README, hmm, not ./README... t/spec/README ?    $ find .|grep -v svn|grep README|wc -l   #=> 134 ;)

[02:37] *** ruoso left
[02:38] <mncharity> hmm, maybe there's a t/README... yes, but no mention.  so my guess is t/spec/README, right? 

[02:38] <mncharity> re food for discussion, nifty, looking...

[02:51] <mncharity> Unmaintained websites - very much agree - big problem.

[02:54] <mncharity> Thoughts on cause: "perl6 isn't a project". :)   Assorted related projects create stuff, which then lacking a core support team, then rots.  Perhaps an expectation of brokenness develops - eg, I didn't even try to figure out how to report http://svn.perl.org/perl6/ 's brokenness.

[02:54] <lambdabot> Title: Revision 14497: /

[02:55] *** aindilis joined
[02:55] <mncharity> Thoughts on resolution: ... hmm, good question.  Searching around, and creating a wiki page summarizing the assorted brokenness, might help.  With the bug list concentrated like that, it might draw attention and peoples' time.

[02:59] <mncharity> Unclear project boundaries.  Interesting.  It didn't strike me as odd until you mentioned it. :)   Thoughts on cause: perl doesn't have a centralized community _development_ site (repo, cia, etc).  So pugs and parrot both rolled their own.  Pugs being... ? most open? featureful? site of the first real test suite? encouragement of other p6 related projects? whatever, 

[03:00] <mncharity> ended up being the default p6 repo.  Moving t/spec off to a different repo would require recreating infrastructure.  Rather than say, if perl had a gforge, simply new-project'ing it.

[03:01] <mncharity> Oh, and the move would lose the pugs development community (by losing their commit bits).

[03:02] <monomorph> the actual url is not the issue IMO, but it's definitely non-obvious what on pugscode belongs to pugs and what doesn't

[03:02] <mncharity> One could imagine a perl6 super-project on source forge, with parrot and pugs and spec projects within it, sharing access rights.  But, didn't happen that way.

[03:03] <mncharity> ah, ok.  yes.  pugscode is now perhaps now an approximation of "most perl 6 stuff, aside from parrot, and the mailing-lists".

[03:04] <mncharity> which would be a useful thing to say somewhere. :)

[03:06] <mncharity> I'm afraid shifting around directories to reflect that, eg, putting pugs off in a subdirectory, would break things.  And tuits are a bit short to clean up after it.  But better README's seem a good and tractable goal. :)

[03:08] <mncharity> Parsing Perl6 requires Perl6.  STD.pm is a bit complex.  But then, so is p6.  I am unclear on it's status.  My impression is it's simply spec at this point.  Given the pain redsix had trying to cope before it existed, I'm delighted that it's there.  Even if I kind of expect if I end up doing something which needs it, a bunch of massage will be needed.

[03:09] <mncharity> But yes, it's not casual reading. :)

[03:10] <monomorph> i see. but again, it's right inside the pugs source, and there's no document anywhere (that i could find...) to explain its purpose

[03:11] <mncharity> Over-ambition.  Hmm.  The specific example I'm not sure is correct.  The backends were spun off, at least originally, because they were easy.  And while the percent of attention they got, vs Pugs haskell development, increased in time, I'm not sure to what extent that was cause, or effect.

[03:11] <monomorph> in fact, my last three points may all be explained by me misunderstanding the project goals

[03:12] <mncharity> s/effect/an effect of haskell development slowing down/

[03:13] <mncharity> re project goals, interesting.  yeah, it might be nice to have something which captured those somewhere.  I was looking around earlier today for an svn heat map generator, so I could more easily see what people were spending time on.

[03:16] <mncharity> finally, re bootstrapping, I think it's an artifact of the language was (and is) still evolving, and the language is quite complex.  Lua engineered for simplicity.  p6, very not so much.

[03:16] <mncharity> (though the core can be much simpler than the surface)

[03:18] <mncharity> So writing Lua in C was a no brainer.  Hmm, curiously, you might view parrot as an attempt to write p6 in C... well, sorta kinda not really.

[03:20] <mncharity> monomorph: very neat.  might the observations be summarized as "it was hard to look for a big picture description of the Perl 6 project, and it turned out one didn't exist"?  or something like that?

[03:20] <monomorph> i'm not sure if i understand the part about perl evolving... that makes bootstrapping harder, not easier

[03:21] <monomorph> about complexity: i agree, lua and perl are very different beasts

[03:23] <mncharity> re makes bootstrapping harder, I guess the idea is p6 complexity and size push you towards implementing non-core stuff in the language itself, and towards using as high-level a language as you can get (which then tends to blur into bootstrap).

[03:23] <monomorph> mncharity: in a nutshell, yes. although i wonder if there's no description of the big picture because there *is* no big picture. if that makes any sense.

[03:24] <mncharity> (I note, re non-core and high-level language, parrot took a very different approach)

[03:25] *** Auzon joined
[03:26] <mncharity> re *no* big picture, well, one necessarily exists, even if it's balkanized.  the 'two line summaries of everything' would have made you effort easier, no?

[03:26] *** japhb left
[03:27] <mncharity> *your

[03:27] <Tene> So, I could give a two-line summary of most parts of the Perl 6 effort.

[03:28] <Tene> So could many people here.

[03:28] <mncharity> the glossary might be tweaked in that direction?

[03:28] <Tene> Where should that summary be posted such that it would solve that problem?

[03:29] <mncharity> in the face of Unmaintained websites, it's not clear.   the current wiki?  pugs svn?  as long as it's written somewhere, folks could point to it.

[03:30] <mncharity> one issue is how to keep it updated.

[03:30] <mncharity> but yeah, given a browsing user, I don't know how to get it to them before they hit #perl6.

[03:31] <mncharity> which rather suggests any website updating should emphasize #perl6, to age better.

[03:33] <mncharity> Tene: re two lines, if the first line is what it is, and the second line is status, I could give one-line summaries for lots of things, but few two-line summaries.

[03:36] <mncharity> What is kp6-perl5 blocked on in core p5 and cpan module bugs?   What can and can't one do with STD.pm?  How far did the pugs hs new ast/compiler changes get?  What if anything about pil2js is rotted?

[03:38] <mncharity> How close is kp6 to being bootstrap-able?  Do we have any idea what it would take to update pugs to current versions of ghc?  What, briefly, can/can't PCR currently do?'

[03:39] <mncharity> ok, starting to get to more than two lines there.

[03:40] <mncharity> but lots of basic questions.  pugs seems to be passing fewer tests than it used to.  is that just because the language and test suite has been evolving, or is there some rot in pugs itself?

[03:41] <mncharity> what are the two lines on Moose?  how close is it to the current vision/spec of p6 oo?

[03:42] <mncharity> but perhaps all that is more like a paragraph each, rather than two lines each.

[03:44] <mncharity> Is parrot running against the pugs t/ ?  How much is passing?

[03:47] *** alester left
[03:47] <mncharity> same question for pugs, pugs alternate backends, kp6, mp6, redsix.

[03:50] <obra> getting all these questions on the wiki where folks can edit in answers would probably be very useful

[03:50] <obra> (and then a note to p6c and p6l encouraging people to actually do the filling in ;)

[03:51] <Tene> Is there now a wiki that is considered authoratative for Perl 6?

[03:52] <obra> http://www.perlfoundation.org/perl6/index.cgi is likely reasonable

[03:52] <lambdabot> Title: Perl 6 / Perl 6

[03:54] <mncharity> http://www.perlfoundation.org/perl6/index.cgi claims officialness.  it's unfortunately a socialtext wiki.  There's also PerlNet.  http://perl.net.au/wiki/Perl_6

[03:54] <lambdabot> Title: Perl 6 / Perl 6

[03:57] <mncharity> so yes, but if you used to mediawiki, well, it's a much simpler data model.  so, for instance, in the absence of discussion/Talk pages, it's hard to calibrate collaboration.

[03:57] <monomorph> almost 5am here, i'll finally go to bed. thanks for the discussion, a few things are clearer now

[03:58] <mncharity> monomorph: thanks for your work, and the resulting discussion! :)

[03:59] *** monomorph left
[04:00] *** justatheory left
[04:01] <mncharity> I note www.perlfoundation.org/perl6/ points into the ~year out of date svn.perl.org.

[04:01] <obra> ...it is a wiki, no?

[04:02] <mncharity> or maybe not.  parrot.  r25454?

[04:02] <obra> parrot and the specs are still canonically in svn.perl.org

[04:03] <mncharity> ah, great.

[04:04] <mncharity> "perl6 is currently in the Parrot repository in languages/perl6/, but needs to become its own repository." ?!?

[04:05] <stevan_> mncharity: hey :)

[04:05] <mncharity> http://www.perlfoundation.org/perl6/index.cgi?development_dashboard

[04:05] <lambdabot> Title: Development Dashboard / Perl 6, http://tinyurl.com/276go6

[04:05] <mncharity> hey steven_! :)

[04:05] <obra> that means rakudo

[04:05] <obra> Rakudo was called 'perl6' until recently

[04:06] <stevan_> mncharity: Moose is not directly tracking the p6 OO spec,.. but I every once in a while I do review it and try and keep us heading the same general direction

[04:07] <stevan_> mncharity: also Moose is helping push some of the other p6-ish p5 based efforts such as Devel::Declare, Devel::BeginLift, B::Simple and others 

[04:10] *** sanxiyn joined
[04:11] <stevan_> mncharity: and mst is been hanging out over on p5p a lot too... so I wouldnt be suprised if some of these efforts end up in 5.12 too

[04:12] <obra> well, mst is a p5 person more than a p6 person ;)

[04:13] <mncharity> neat.  :)  what are the most important current objectives and challenges?

[04:15] <mncharity> re spec, does Moose have the same "a class is an undef instance of itself" kind of flavor, or is it more p5-like with a strong class/instance distinction?

[04:16] <stevan_> obra: he is one of the bridge folk :) we who stand between the two (sorry watching LoTR with my daughter)

[04:16] <stevan_> mncharity: it has the same p5 class/instance distinction

[04:16] <mncharity> oh, np.  just curious.  another time perhaps.

[04:17] <mncharity> k

[04:17] <stevan_> there is a point where I cant do it in pure perl

[04:17] <stevan_> without crazy autoload hacks, etc

[04:17] <stevan_> so thats where mst has been coming in (Devel::Declare, etc)

[04:17] <stevan_> B::Simple is basically LISPish macros that operate on the p5 opcode level

[04:18] <mncharity> http://search.cpan.org/~mstrout/Devel-Declare-0.001006/lib/Devel/Declare.pm

[04:18] <lambdabot> Title: Devel::Declare - - search.cpan.org, http://tinyurl.com/2gk6zd

[04:19] <stevan_> yeah look at the tests... the docs are crap

[04:19] <stevan_> http://search.cpan.org/~mstrout/Devel-Declare-0.001006/MANIFEST

[04:19] <lambdabot> Title: The CPAN Search Site - search.cpan.org

[04:20] <mncharity> hmm, i'm not getting a cpan hit on B::Simple

[04:22] <mncharity> http://www.faqs.org/docs/perl5int/x1854.html  B/Simple

[04:25] *** japhb joined
[04:27] *** orafu joined
[04:27] *** simcop2387 left
[04:30] <mncharity> obra:  re questions->wiki, email->p6c|p6l, ... volunteers welcome.  I'm afraid it's too non-Ofun with too low a "do it anyway, it's critical" payoff for me.

[04:30] *** luqui left
[04:33] <obra> k

[04:34] *** simcop2387 joined
[04:34] *** Limbic_Region left
[04:37] <mncharity> TimToady: re t/spec, it might be helpful if one could easily break the .t files into fragments which could be run separately.  so an implementation could use the tests without having to do a lot of test file editing.  or at least many of the tests.

[04:38] <Auzon> Well, the tests can be marked to skip for a certain implementation...

[04:38] *** pbuetow left
[04:38] *** pbuetow joined
[04:38] <obra> mncharity: how much have you read up on fudge?

[04:39] <mncharity> indeed.  but if, for instance, the tests guarenteed that any state which affected a test was within a surrounding block, then one could automagically break up the test files, run the tests independently, and not have to worry about maintaining a set of skip/eval/etc tags.

[04:39] <mncharity> re read up on fudge, skimmed only.

[04:40] <Auzon> well, then you're maintaining a list of which tasks to execute somewhere...

[04:40] <obra> It's my understanding that fudge is timtoady's solution to the problem you're describing

[04:41] <obra> I may well be wrong, though ;)

[04:43] *** OuLouFu left
[04:43] <mncharity> re solution, yes, but it's the same approach of pugs.  tagged tests, and no information on whether those tests depend on other parts of the file (decls, mutation in other tests, etc).

[04:44] <mncharity> which is ok.  but since the tests are being touched anyway, it might be nice to add additional nature-of-the-test tagging to permit use without editing the files.

[04:45] *** literal joined
[04:46] <mncharity> re "you're maintaining a list of which tasks to execute somewhere", maybe, at least for regression testing, but it means everyone with a p6 implementation or mutant doesn't need to be banging on the spec .t files.

[04:50] <sanxiyn> mncharity: You want test inclusion/exclusion list maintained outside of test file itself?

[04:50] <mncharity> that said, it's not clear to me whether there's a nice way to do it.  without going for a perhaps painfully more verbose  '(test jig / optional setup / tests... )+" approach.

[04:52] <mncharity> sanxiyn: I'm picturing being able to mechanically grovel over t/spec, and run the tests independently.  so instead of "test file" being the unavoidable unit of test running, it's instead "cluster of tests which can't be run separately".

[04:53] <mncharity> ideally it would be nice to have full dependencies.  so you know test1 and test2 depend on the preceding decl, but not on each other.

[04:54] <mncharity> but each step down that path can make the spec less readable, less maintainable.

[04:55] <mncharity> so I'm wondering if there might be a low-hanging fruit around.  like saying top level blocks in the test files are independent of the rest of the file.

[04:55] <mncharity> the one could go through the files, yank each top level block, and run it separately.

[04:56] <sanxiyn> You want setup/teardown?

[04:56] *** alester joined
[04:57] <mncharity> that would do it.

[04:57] *** literal left
[04:57] <mncharity> as long as the clarity cost wasn't too high.

[05:00] <mncharity> people with mutants can always make their own copy of t/spec, to avoid having to edit the master.  so perhaps it's not a big deal.  it's just been on the pugs t/ wish list since forever, for a t/ rev 2, and t/spec seemed to have some t/ rev 2-ness to it, so I thought I reraise the issue for consideration.

[05:03] <mncharity> I was also thinking earlier today, "how might one set up a test-driven-development hackathon to create a p6 implementation?".  to which an immediate response is one wants test rather than file level failure granularity.  (the one bit of file you can't handle failing the entire, or rest of, the file).

[05:04] <mncharity> a test suite one could set up at the beginning.  I suppose one could go through and tag all tests, and all declarations, EVAL or some such.  but... not a pretty approach to TDD.

[05:06] <mncharity> hmm, my decls are local to eval() blocks.  otherwise automagically wrapping every single statement in an eval might be a solution.

[05:09] <mncharity> perhaps it's just an observation that new implementations should build fault tolerance into their parsers, compilers and runtimes.

[05:09] <mncharity> though the difficulty in doing that is what motivated tagging to start with.

[05:13] <mncharity> rather than actual blocks of related tests, perhaps one could just use comments.  #cluster{  ...setup...  #tests  ...tests... #cluster}

[05:14] <mncharity> with a default that otherwise, the tests are independent.  or something...

[05:15] *** manfred joined
[05:15] <mncharity> #{ ... setup ... ...first-test-terminates-setup...tests... #}

[05:15] <sanxiyn> IMO, tests should be independent.

[05:19] <mncharity> "tests in ...tests... are independent, and can be run on a fresh copy of ...setup..., unless bracketed together with #( ... #) " ?

[05:25] <mncharity> use v6; #{ my $x;  #{ $x = 3;  is($x,3);  #( is(++$x,3); is($x,4); #) is($x+2,5) #}  #{ my @a;  $x = +@a;  is($x,0); #}}

[05:28] <mncharity> err, no: is($x++,3)

[05:31] <mncharity> hmm.  though that set of tests _depends_ on tests being independent.  which would be a non-trivial departure from the current style.  the #mumbles are no longer simply comments.  so...

[05:34] <mncharity> perhaps just tag the #{ #} with whether the enclosed tests are independent or not.   #{i vs #{ ?  tests in #{i being declared to be sideeffect-free.  or at least not to depend on each others sideeffects. ?

[05:35] <mncharity> re _depends_, ie, $x went from 4 to 3 just because a #) was passed.  which seems a no-no.

[05:35] *** Connel left
[05:36] *** Connel joined
[05:41] <mncharity> so, calling them #{i and #{d for in/dependent enclosed tests, the story might be "test files can be decomposed into independent tests, and #{d clusters of tests, all with associated setup".

[05:42] <mncharity> anyway.  maybe something to consider.

[05:42] <mncharity> end of day.  g'night all. &

[05:44] <sanxiyn> bye

[05:49] *** mncharity left
[05:50] *** jordilin joined
[06:21] *** justatheory joined
[06:29] *** Auzon left
[06:29] *** Auzon joined
[06:40] *** thestarslookdown joined
[06:42] *** _newbie_ joined
[06:43] *** _newbie_ left
[06:53] *** jordilin left
[07:01] *** thestarslookdown left
[07:02] *** kanru joined
[07:03] <peepsalot> are negative indices supported in slices?  @a[0..-2] for example could get everything but the last element?

[07:07] *** sri_work left
[07:20] *** Connel left
[07:21] *** Conne1 joined
[07:21] *** Conne1 is now known as Connel

[07:39] *** devogon joined
[07:45] <peepsalot> pugs: %*ENV

[07:45] <exp_evalbot> RESULT[\undef]

[07:47] <peepsalot> pugs: my $a = 123; %*MY;

[07:47] <exp_evalbot> RESULT[{}]

[07:47] <peepsalot> pugs: my $a = 123; %*MY

[07:47] <exp_evalbot> RESULT[{}]

[07:48] <peepsalot> this page talks about symbol tables, http://search.cpan.org/dist/Perl6-Doc/lib/Perl6/Doc/Overview.pod#Variable_scoping but I don't understand how you access them

[07:48] <lambdabot> Title: Perl6::Overview -- a brief introduction and overview of Perl 6 - search.cpan.org, http://tinyurl.com/2ez6gj

[07:49] <peepsalot> i was able to access %*ENV in pugs on my local machine, but not the other ones?

[07:50] <peepsalot> ugh, why do i keep ending statements with question marks.  past my bed time

[07:50] <Auzon> This one is running in a safe compartment or something of the sort

[07:50] <Auzon> e.g.

[07:50] <Auzon> pugs: sleep

[07:50] <exp_evalbot> OUTPUT[*** ␤    Unexpected end of input␤    at /tmp/jJMHcch0Cp line 2, column 1␤]

[07:50] <Auzon> pugs: sleep 1;

[07:50] <exp_evalbot> OUTPUT[*** Unsafe function 'sleep' called under safe mode␤    at /tmp/wZpsMmsxFY line 1, column 1-8␤]

[07:51] <peepsalot> Auzon, ok, i can understand that %*ENV might not be good to display here, but what about all the other symbol tables?  MY OUR GLOBAL etc. ?

[07:51] <Auzon> No idea.

[07:52] <peepsalot> I can't figure out how to show them in my own pugs terminal

[07:52] <peepsalot> should they theoretically be accessed in the same way?  with %* ?

[07:52] <Auzon> pugs:%::

[07:53] <Auzon> pugs: %::

[07:53] <exp_evalbot> OUTPUT[*** ␤    Unexpected end of input␤    expecting "(", "!", "/", twigil or word character␤    at /tmp/rtv3cEDYKK line 1, column 4␤]

[07:53] <Auzon> pugs: %*::

[07:53] <exp_evalbot> OUTPUT[*** ␤    Unexpected "*::"␤    expecting "::"␤    at /tmp/tSNfUrWz7Y line 1, column 2␤]

[07:53] <Auzon> pugs: %::*

[07:53] <exp_evalbot> OUTPUT[*** ␤    Unexpected end of input␤    expecting word character␤    at /tmp/jx3ZuTIbno line 1, column 5␤]

[07:54] <Auzon> Hm. There's somewhere to get it, or there should be

[07:57] <TimToady> peepsalot: see S09:619 "Negative and differential subscripts"

[08:02] <peepsalot> TimToady, where do I find that?  i'm new to all this

[08:03] <peepsalot> nevermind, i found it

[08:03] <peepsalot> ugh, was looking in s06 instead of s09

[08:03] * peepsalot smacks head

[08:04] *** Aankhen`` joined
[08:04] <peepsalot> will read tomorrow, it's getting too late for me to function

[08:07] <TimToady> anyway, you'll write @a[0..*-2] for that

[08:08] <TimToady> (not implemented yet, btw)

[08:08] <TimToady> so you'll still see a lot of @a[-1] that will eventually be @a[*-1]

[08:09] <Auzon> What does the star signify?

[08:10] <TimToady> * is a term that is of type Whatever, and it is intentionally context dependent

[08:10] <TimToady> the operator that receives a * gets to decide what it means

[08:10] <Auzon> So it's a DWIM operator?

[08:10] <TimToady> so an infinite range is just 0..* for instance

[08:11] <TimToady> essentially, as long as you mean what most people would mean by * in that situation :)

[08:11] <Auzon> Fair enough.

[08:11] <Auzon> so what should @a[-1] do? throw an error?

[08:12] <TimToady> turns out to be useful all over the place

[08:12] <TimToady> yes

[08:12] <Auzon> Thank you. :) I've been bitten in Perl 5 by $arr[$index] when $index is below 0

[08:12] <TimToady> well, we're trying to fix everything wrong with Perl 5 and then some... :)

[08:14] <Auzon> Yeah. I cannot wait to start using Perl 6 in my freetime project. :)

[08:14] <TimToady> unfortunetly Perl 6 is my freetime project :/

[08:15] <Auzon> No one wants to pay you to work on Perl 6? That's unfortunate :(

[08:16] <TimToady> I wish people could send back a little money from the future for that, but that doesn't seem to work

[08:18] <TimToady> course, maybe that means we've made money obsolete in the future :)

[08:19] <Auzon> I don't know if that'd be good or not. Too much to think about at this time of night...

[08:20] <TimToady> yeah, I'm waiting for my antihistamine to hit so I can sleep...

[08:21] <TimToady> and thinking more about possible list assignment operators

[08:23] <Auzon> Where are captures defined in the spec?

[08:24] <Auzon> ah, I see something now

[08:27] <TimToady> well, sort of all over the place, S02, S03, S04, S06

[08:27] <Auzon> or this: http://svn.pugscode.org/pugs/docs/Perl6/FAQ/Capture.pod

[08:28] *** Lion2 left
[08:29] *** Aankh|Clone joined
[08:47] *** Aankhen`` left
[09:09] *** iblechbot joined
[09:32] *** blindfish joined
[09:35] *** drrho joined
[09:40] *** Aankh|Clone is now known as Aankhen``

[09:54] *** meppl joined
[10:06] *** IllvilJa joined
[10:08] *** rindolf joined
[10:15] *** ispy_ left
[10:17] *** barney joined
[10:28] <rakudo_svn> r25461 | bernhard++ | [Rakudo]

[10:28] <rakudo_svn> r25461 | bernhard++ | Clean up perl6.o

[10:40] *** ruoso joined
[10:47] *** Aankh|Clone joined
[11:05] *** Aankhen`` left
[11:05] *** chris2 joined
[11:05] *** drrho left
[11:06] <rakudo_svn> r25462 | bernhard++ | [Rakudo]

[11:06] <rakudo_svn> r25462 | bernhard++ | Fiddle with perl6/Makefile.

[11:06] <rakudo_svn> r25462 | bernhard++ | - Use make variable $(EXE)

[11:06] <rakudo_svn> r25462 | bernhard++ | - Remove setup of unused commands

[11:06] <rakudo_svn> r25462 | bernhard++ | - Let 'make help' tell about the targets 'perl6' and 'xmas'.

[11:06] <rakudo_svn> r25462 | bernhard++ | - Use $(RM_F) instead of $(RM_RF).

[11:44] *** riffraff joined
[11:46] <riffraff> hi

[12:06] *** manfred left
[12:09] *** jferrero joined
[12:10] *** IllvilJa left
[12:12] *** monomorph joined
[12:14] *** pdy joined
[12:15] <pdy> hi

[12:45] <pugs_svn> r19796 | ruoso++ | [smop] Most of the memory leaks are solved... ALL TESTS PASSING :) 

[12:47] *** cognominal_ joined
[12:49] *** cognominal__ left
[13:07] *** turrepurre left
[13:21] *** manfred joined
[13:48] *** DarkWolf84 left
[13:57] *** chris2 left
[13:57] *** DarkWolf84 joined
[13:59] *** wilx joined
[14:08] *** barney left
[14:13] <rakudo_svn> r25464 | coke++ | [rakudo]

[14:13] <rakudo_svn> r25464 | coke++ | 

[14:13] <rakudo_svn> r25464 | coke++ | Spelling fix; minor output consistentifcation.

[14:25] *** Whreq is now known as Juerd

[14:28] *** rff_ joined
[14:34] *** drrho joined
[14:39] *** riffraff left
[15:07] *** alester left
[15:18] *** Aankh|Clone is now known as Aankhen``

[15:45] *** alester joined
[16:08] *** marmic left
[16:08] *** meppl left
[16:09] *** Psyche^ joined
[16:11] *** meppl joined
[16:12] *** marmic joined
[16:14] *** chris2 joined
[16:20] <peepsalot> TimToady, so, this perl6 doc has some misinformation about arrays then?  I guess that's the perl 5 way of donig things, not perl 6.

[16:20] <peepsalot> http://search.cpan.org/dist/Perl6-Doc/lib/Perl6/Doc/Overview.pod#Variable_scoping

[16:21] <peepsalot> er, its closer to this part of the page http://search.cpan.org/dist/Perl6-Doc/lib/Perl6/Doc/Overview.pod#Perl_variable_types under arrays of course

[16:22] <peepsalot> should I not be reading this perl 6 doc?

[16:22] *** penk left
[16:23] *** penk joined
[16:26] *** Patterner left
[16:26] *** Psyche^ is now known as Patterner

[16:26] *** alester left
[16:28] *** lambdabot joined
[16:32] <rakudo_svn> r25472 | jonathan++ | [rakudo] Allow classes whose last declaration is an attribute to compile.

[16:37] *** penk left
[16:38] *** penk joined
[16:46] *** pbuetow left
[16:46] *** pbuetow joined
[16:53] <rakudo_svn> r25473 | jonathan++ | [rakudo] Have the new method on objects initialize the attributes to Undef or the supplied value. Note we aren't passing named parameters yet, so can't really use that bit. It does, however, let us mutate attributes through the accessor (we're always is rw by default at the

[16:53] <rakudo_svn> ..moment, though that will change).

[16:54] *** barney joined
[17:02] *** meppel-san joined
[17:13] *** pmurias joined
[17:19] *** meppl left
[17:23] *** schmalbe joined
[17:29] <pugs_svn> r19797 | cosimo++ | [t/spec] Minor fixes to S16 tests (pod + fudgify)

[17:31] *** rff_ left
[17:38] *** schmalbe left
[17:40] *** barney left
[17:43] <TimToady> peepsalot: the Overview directory is not canonical, and can get out of date with respect to the synopses, as it is in this case on negative subscripts.

[17:48] <peepsalot> ok

[17:54] *** thoughtpolice joined
[17:56] *** pcbuetow joined
[17:58] <pugs_svn> r19798 | lwall++ | Added "self" for jonathan++

[18:01] *** drrho left
[18:14] *** avar left
[18:17] <pmurias> ruoso: how will s1mp look like?

[18:17] *** wilx left
[18:35] *** icwiener joined
[18:43] <rakudo_svn> r25477 | jonathan++ | [rakudo] Implement self. Note that we can't make it a term yet, where it belongs, so it's a noun for now.

[18:44] <ruoso> pmurias, s1p looks like Perl 6... but it is translated to smop C runtime + sm0p code...

[18:45] <ruoso> it doesn't have namespaces, so everything should resolve to the smop C runtime names...

[18:45] <ruoso> it doesn't have lexical scopes also, which means that variables should be compiled to sm0p operations

[18:45] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop_inter_continuation_communication

[18:46] <lambdabot> Title: SMOP Inter Continuation Communication / Perl 6, http://tinyurl.com/yuqcgm

[18:46] <ruoso> that is how one sm0p frame can communicate with another to pass the values that transcend the frames.

[18:47] <ruoso> s1p will already be completely stackless, that's why all its code is sm0p  based

[18:48] <ruoso> after I finish the stage0 details (memleaks), we'll implement p6opaque which is the default responder interface for Perl 6 objects

[18:48] <ruoso> s1p will already be a KP6 backend, just not the final one...

[18:50] *** jordilin joined
[18:52] *** riffraff joined
[18:54] <pmurias> ruoso: i see

[18:54] *** meppel-san is now known as meppl

[18:55] *** jordilin left
[19:02] <pmurias> ruoso: s1p will feed source code into the kp6 the ususal way rather than via q:s1p {...} right?

[19:16] <peepsalot> is this class Marker ... example correct? http://www.oreillynet.com/onlamp/blog/2007/09/yap6_operator_repeat_operators_1.html

[19:16] *** rindolf left
[19:16] <lambdabot> Title: YAP6 Operator: Repeat Operators - O&#039;Reilly ONLamp Blog, http://tinyurl.com/2jzu42

[19:17] * moritz_ looks

[19:17] *** meteorjay left
[19:17] <moritz_> it should, yes

[19:17] <peepsalot> i guess I just don't undertand the method declaration, and how it knows the way to convert to string

[19:17] <peepsalot> it doesn't seem to run correctly in pugs in my terminal

[19:18] <moritz_> when you have a method with name $type, it is used to convert to that $type

[19:18] <moritz_> ah, pugs isn't very up to date

[19:19] <peepsalot> ok

[19:19] <moritz_> class A { method Num { 1 } }; my $a = A.new; say $a + 1; # should print 2

[19:20] <peepsalot> pugs: class A { method Num { 1 } }; my $a = A.new; say $a + 1;

[19:20] <exp_evalbot> OUTPUT[*** Cannot cast from VObject (MkObject {objType = (mkType "A"), objAttrs = <Hash:0xb714e378>, objOpaque = Nothing, objId = MkObjectId {unObjectId = 3}}) to Double (VNum)␤    at /tmp/AEgbJxf10x line 1, column 50-56␤]

[19:20] <peepsalot> heh

[19:21] <moritz_> that feature was introduced to the specs after audrey got sick

[19:21] <moritz_> and nobody cared to implement it since

[19:21] <peepsalot> do you not need semicolons after method declarations?

[19:21] *** Connel is now known as SomeWiktAdmin

[19:22] *** avar joined
[19:22] <moritz_> no

[19:22] <moritz_> in general you don't need any semicolons after closing } that delimits a block

[19:23] <moritz_> in p5 you needed here one: my $a = sub { ... };

[19:49] *** SamB joined
[19:52] *** Limbic_Region joined
[20:02] *** jferrero left
[20:07] *** aindilis left
[20:07] *** aindilis joined
[20:09] <TimToady> more precisely, you don't need one after a line-ending }

[20:09] <TimToady> you do if you put more on the same line

[20:10] <TimToady> bbl &

[20:22] *** Aankhen`` left
[20:28] <peepsalot> lol

[20:28] <peepsalot> This synopsis summarizes Apocalypse 10, which discusses packages despite never having been written.

[20:28] <moritz_> ;)

[20:29] *** riffraff left
[20:33] *** sri_work joined
[20:34] <peepsalot> is Order package?  (ex. Order::Decrease)

[20:34] <peepsalot> s/Order/Order a/

[20:37] <peepsalot> i'm trying to follow these micro articles, but I guess they assume knowledge of perl 5

[20:37] <peepsalot> i don't know what is the difference (as far as perl 6 is concerned) between a package, module, class, etc

[20:38] <peepsalot> was wondering if there's a list somewhere of builtin things like Order::

[20:38] <moritz_> a package is basically a namespaces

[20:38] <moritz_> classes introduces namespaces

[20:38] <moritz_> and modules do as well

[20:40] <peepsalot> so what is Order ?

[20:41] <moritz_> in p5 namespaces are not hirarchical, so you could have Order::Decrease without having Order::

[20:42] <moritz_> I'm not sure how that's don in p6

[20:43] <ruoso> pmurias, yeah... s1p is plain code to be compiled by kp6...

[20:43] <ruoso> but still generating C code, or better, sm0p code...

[20:44] <peepsalot> moritz_, is there a way to list all the global namespaces that are part of the language like that?

[20:44] <peepsalot> or a page that lists them

[20:45] <moritz_> peepsalot: there will be, both

[20:45] <moritz_> but I don't think there is a way yet

[20:45] <peepsalot> doh

[20:45] <moritz_> the most important builtins are summarized in S29 though

[20:45] <peepsalot> ko

[20:50] *** Khisanth left
[20:59] <moritz_> TimToady: are you going to make the parse tree available trough a special variable?

[21:00] <moritz_> perhaps only on request, to avoid performance impact

[21:01] *** chris2 left
[21:02] *** chris2_ joined
[21:07] *** jferrero joined
[21:10] * pdy slaps moritz_ with a rubber band

[21:11] <TimToady> well, if I don't make it available, someone else surely will  :)

[21:11] <moritz_> pdy: why that? that hurts!

[21:11] <moritz_> TimToady: I meant in terms of specs ;)

[21:12] <pdy> moritz_: was looking for you this weekend till i found out that i can help myself via your website :-p

[21:12] <moritz_> pdy: ;)

[21:12] <moritz_> pdy: you don't have a different nick in #perlde by chance? ;-)

[21:12] <pdy> sure, i am Leibsle there

[21:12] <moritz_> thought so

[21:12] <pdy> :-)

[21:13] <pdy> your log bot is really a good learning example

[21:13] <moritz_> thanks

[21:14] <peepsalot> what website?

[21:15] <peepsalot> ist auf deutsche?

[21:15] * moritz_ assumes http://irclog.perlgeek.de/ or http://moritz.faui2k3.org/en/ilbot

[21:15] <lambdabot> Title: IRC logs - Index

[21:15] <pdy> yep, http://moritz.faui2k3.org/ i finally found when i followed the white rabbit in the channel topic

[21:15] <lambdabot> Title: Moritz Lenz

[21:16] <pdy> cause i failed to find the svn source

[21:22] *** Khisanth joined
[21:24] *** silug left
[21:29] *** cosimo_ joined
[21:35] *** Khisanth left
[21:35] *** Khisanth joined
[21:44] *** alester joined
[21:44] *** cosimo_ left
[21:47] *** SomeWiktAdmin is now known as Connel

[21:50] <ruoso> monomorph, about your post at http://jottit.com/r3stt/... the problem with trying to write a something simply in ANSI C is that Perl 6 features require a very rich runtime environment. While I don't completely agree with chromatic (in the sense that I do believe that it can be simpler than parrot), it's not simple as gcc *.c, just take a look in how smop is evolving and you can have a better understanding...

[21:50] <ruoso> brb &

[21:50] <monomorph> i stumbled upon smop after i wrote this

[21:51] <monomorph> i don't yet understand what it does :)

[21:52] <monomorph> but i agree with what mncharity said yesterday on that point, lua is unique in that the language is specifically engineered  to have a very simple implementation

[21:56] *** alester left
[22:01] *** manfred left
[22:01] *** pmurias left
[22:05] *** Connel left
[22:07] *** iblechbot left
[22:08] *** kane__ joined
[22:08] *** kane_ left
[22:17] *** silug joined
[22:30] *** wknight8111 joined
[22:37] *** sanxiyn left
[22:39] *** pbuetow left
[22:40] <moritz_> is $foo[$a] the same as $foo.postcircumfix:<[ ]>($a) ?

[22:41] *** jferrero left
[22:52] *** alester joined
[22:52] *** Torment joined
[22:52] *** alester left
[22:59] *** jferrero joined
[23:02] *** justatheory left
[23:09] *** Jedai left
[23:14] *** alester joined
[23:25] *** jferrero left
[23:27] *** BinGOs left
[23:27] *** BinGOs joined
[23:30] *** jferrero joined
[23:33] *** marmic left
[23:34] *** blindfish left
[23:36] <ruoso> monomorph, smop is an effort on doing Perl 6 the most pragmatic way I can possibly find out... 

[23:37] *** jeffreykegler joined
[23:37] *** marmic joined
[23:42] <jeffreykegler> TimToady (if you're there): you mentioned the other day that Perl 6 would be "deterministically parseable"

[23:42] <jeffreykegler> I take you mean by that LR(k), or parseable by a deterministic PDA

[23:43] <jeffreykegler> Another reading is that you mean "no rand() stuff in BEGIN blocks can affect the parse" -- a much weaker statement

[23:43] <jeffreykegler> Correcting the above ...

[23:44] <jeffreykegler> That is, you said that under certain circumstances Perl 6 would be "deterministically parseable"

[23:44] <jeffreykegler> I think it was in the context of the tools discussion

[23:52] <TimToady> I mean that Perl 6 is many languages, but we'll know exactly which one we're in at any moment

[23:53] <jeffreykegler> So both the above readings are wrong

[23:54] <jeffreykegler> In the parsing world "determinism" means a zillion different things

[23:55] <TimToady> everyone keeps treating Perl 6 like it's a single language; it's really a metalanguage

[23:55] <TimToady> well, I'm going for vigor, not rigor :)

[23:55] <jql> I see perl6 as the language between the {} in the rules syntax

[23:56] <jeffreykegler> In particular, then, my reading you're using the phrase in the Grune and Jacobs sense ...

[23:56] <jeffreykegler> to mean LR(k) is just totally wrong

[23:57] *** pcbuetow is now known as pbuetow

[23:57] <Tene> "Wherever I go, there I am!"

