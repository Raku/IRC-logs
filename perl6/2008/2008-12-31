[00:50] *** alc joined
[00:51] *** cspencer joined
[00:53] *** [particle] left
[01:02] <Caelum> should I read "perl6 and parrot essentials" or is it completely out of date?

[01:10] *** Larry joined
[01:10] *** Larry left
[01:11] *** Larry joined
[01:12] *** Larry is now known as Hell_Kaiser

[01:12] *** [particle] joined
[01:12] *** Hell_Kaiser left
[01:15] *** Hell_Kaiser joined
[01:16] *** cspencer_ joined
[01:17] *** cspencer left
[01:22] <pmichaud> Caelum: it's very much out of date.

[01:23] *** Limbic_Region joined
[01:29] *** hercynium left
[01:34] *** [bjoern] joined
[01:35] <pasteling> "[bjoern]" at 88.75.226.0 pasted "Latest svn, win32 build failure (In file included from perl5\p5embed.c:1:0: ...)" (32 lines, 1.2K) at http://sial.org/pbot/34137

[01:37] <[bjoern]> perhaps it's about the " in '/Perl/lib/CORE"/EXTERN.h'?

[01:37] <[bjoern]> not sure where that is coming from...

[01:38] <Caelum> pmichaud: I see, thank you. What should I read then to learn perl6? "beginning perl6" is not going to be out until october

[01:39] <pmichaud> Caelum: that's a good question at the moment.  You might look and see if there's anything useful on the perl6 wiki, or else there are the synopses.

[01:39] <pmichaud> perl6 wiki:  http://www.perlfoundation.org/wiki/perl6

[01:40] <Caelum> will do, thank you

[01:40] <pmichaud> oops, wrong url.

[01:40] <pmichaud> just a sec

[01:40] <[bjoern]> ( http://www.perlfoundation.org/perl6 )

[01:41] <pmichaud> http://www.perlfoundation.org/perl6/index.cgi?perl_6

[01:41] <pmichaud> bjoern's url works also (and is probably more canonically correct)

[01:46] <Limbic_Region> hrm

[01:47] <Limbic_Region> suggestion if anyone here has maintenance rights to http://www.perlfoundation.org/perl6/index.cgi?fud

[01:47] <Limbic_Region> it is unclear that some of the FUD has no rebuttal

[01:47] <Limbic_Region> http://www.perlfoundation.org/perl6/index.cgi?fud#it_takes_too_long_to_port_all_cpan_modules 

[01:47] <Limbic_Region> for instance

[01:49] <Limbic_Region> oh, and some rebuttals really should be updated

[01:49] *** icwiener left
[01:49] *** jferrero joined
[01:49] <Limbic_Region> "If you do not want to have to keep Perl 5 around, the Ponie project aims to port Perl 5 on Parrot....."

[01:50] <Limbic_Region> Ponie has been dead for years

[01:55] <[bjoern]> So I take it it's Configure.PL that tries to get the path to the perl5 headers...

[01:56] <[bjoern]> and it seems it tries to get the path out of the libpath flag...

[01:56] <[bjoern]> hmm looks like a non-greedy match gone wrong there

[02:03] <[bjoern]> that does not appear to be the problem

[02:05] <[bjoern]> hmm it may be caching the configure.pl ...

[02:10] <rakudo_svn> r34682 | pmichaud++ | [rakudo]:  eval() returns Nil for void expressions (RT #61868, lathos++)

[02:13] *** hercynium joined
[02:14] <pugs_svn> r24698 | lwall++ | [S02] clarification of meaning of HyperWhatever

[02:14] <[bjoern]> Does `$flags =~ s{([\\"'])}{\\$1}g;` do anything useful?

[02:15] <[bjoern]> Oh i see...

[02:17] <Caelum> my perl6 segfaults :(

[02:18] <Caelum> oh right, I forgot to make clean first

[02:23] <pugs_svn> r24699 | lwall++ | [S03] clean up some awkward phrasing

[02:27] *** kisu left
[02:28] *** DemoFreak left
[02:29] <pasteling> "[bjoern]" at 88.75.226.0 pasted "New build failures, ActivePerl 5.10.x's /Perl/lib/CORE/win32iop.h probably fails to define intptr_t in a manner compatible with mingw" (13 lines, 637B) at http://sial.org/pbot/34138

[02:29] <[bjoern]> I only got there by stripping the quote marks from Pugs.buildinfo manually and setting the file to read only

[02:30] <[bjoern]> somehow changes to Configure.PL didn't propagate quite as they should have

[02:31] <[bjoern]> So let's patch the perl header file and see...

[02:32] <[bjoern]> Great, now it fails because it cannot delete Pugs.buildinfo

[02:33] *** kisu joined
[02:34] <[bjoern]> ah I take it I have to modify the configure.pl in some Pugs-6.2.13.14.tar.gz file...

[02:46] *** cspencer_ left
[02:50] <rakudo_svn> r34683 | pmichaud++ | [rakudo]:  Enable whatever star meaning "full slice" (e.g. @a[*])

[02:55] *** Whiteknight left
[03:03] *** cataska left
[03:05] *** jhorwitz left
[03:17] *** azawawi joined
[03:17] <azawawi> hi

[03:28] <meppl> good night

[03:30] *** meppl left
[03:43] *** Limbic_Region left
[04:00] *** elmex left
[04:02] *** elmex joined
[04:02] *** c9s__ joined
[04:11] <azawawi> # last day morning in 2008 ;-)

[04:21] *** s1n left
[04:47] *** hercynium left
[04:50] *** kisu left
[04:54] *** kisu joined
[05:37] *** simcop2387 left
[05:38] *** simcop2387 joined
[05:47] *** alc left
[06:09] *** brunoV left
[06:11] *** jferrero left
[06:18] *** justatheory joined
[07:22] *** ChrisDavaz joined
[07:33] *** samlh joined
[07:39] <samlh> perl6: (0..1,2)[1].perl.say

[07:39] <p6eval> pugs: OUTPUT«\1␤»

[07:39] <p6eval> ..rakudo 34688: OUTPUT«2␤»

[07:39] <p6eval> ..elf 24699: OUTPUT«Can't use string ("2") as an ARRAY ref while "strict refs" in use at (eval 117) line 3.␤ at ./elf_f line 3861␤»

[07:41] <samlh> I beleive rakudo is wrong; should submit a rakudobug?

[07:49] *** Hell_Kaiser left
[07:57] *** samlh_ joined
[08:00] *** samlh left
[08:00] *** samlh_ is now known as samlh

[08:08] *** samlh left
[08:09] *** vixey joined
[08:15] *** [bjoern] left
[08:27] *** azawawi left
[08:28] *** DemoFreak joined
[08:33] *** iblechbot joined
[08:34] *** azawawi joined
[09:09] *** barney joined
[09:12] *** pdcawley joined
[09:17] *** DemoPhreak joined
[09:33] *** DemoFreak left
[09:40] *** vixey left
[09:40] *** duke_leto joined
[09:40] *** vixey joined
[10:00] <rakudo_svn> r34694 | bernhard++ | [codingstd] Satisfy trailing_space.t and pdd_format.t

[10:09] *** pmurias joined
[10:14] *** ejs joined
[10:23] *** kisu_ joined
[10:24] *** pmurias_ joined
[10:24] *** pmurias_ left
[10:26] *** tomyan joined
[10:28] *** kisu left
[10:32] <pmurias> ruoso: i'm going to the runloop integration with Coro now, it's going to be slow but i don't know how to do it otherwise

[10:37] *** yantom joined
[10:48] *** tomyan left
[10:49] *** justatheory left
[10:51] *** maerzhase joined
[10:57] *** kidd left
[11:02] *** kidd joined
[11:07] *** pdcawley left
[11:10] *** ejs left
[11:17] *** kisu__ joined
[11:20] <moritz_> @tell masak I'm working on adding isa, does, can, clone to S29, but atm I can't commit here due to technical limitations

[11:20] <lambdabot> Consider it noted.

[11:25] *** kisu_ left
[11:46] *** clintongormley joined
[11:50] <pmurias> moritz_: what stopes you from commiting, lack of a subversion client or a pesky proxy?

[12:05] *** tacocat joined
[12:15] *** icwiener joined
[12:17] *** kisu_ joined
[12:18] *** slavik joined
[12:19] *** rindolf joined
[12:23] *** kisu__ left
[12:32] *** masak joined
[12:35] <ruoso> TimToady, Foo::.bar() really parses in a weird way... it considers "bar" a sym, instead of a dotty 

[12:38] *** tacocat left
[12:39] *** tacocat joined
[12:40] *** tacocat left
[12:43] *** azawawi is now known as azawawi2009

[12:57] *** meppl joined
[13:51] *** justatheory joined
[14:04] *** vixey left
[14:05] *** vixey joined
[14:07] <ruoso> TimToady, forget it... it just works now...  ;)

[14:08] <masak> just like that?

[14:08] <lambdabot> masak: You have 1 new message. '/msg lambdabot @messages' to read it.

[14:08] <masak> @messages

[14:08] <lambdabot> moritz_ said 2h 47m 57s ago: I'm working on adding isa, does, can, clone to S29, but atm I can't commit here due to technical limitations

[14:08] <masak> moritz_++

[14:08] <masak> moritz_: I'm dangerously close to working on S29 too today. thanks for the update.

[14:09] <slavik> fix eval?

[14:09] <slavik> :P

[14:09] <slavik> perl6: my $a = 5; eval 'say $a';

[14:09] <p6eval> elf 24699, pugs: OUTPUT«5␤»

[14:09] <p6eval> ..rakudo 34701: RESULT«undef»

[14:09] <slavik> ooh, one of them works :D

[14:09] <masak> hey, something's changed :)

[14:09] <slavik> my $a = 5; eval 'say $b';

[14:10] <masak> rakudo: my $a = 5; eval 'say $b';

[14:10] <p6eval> rakudo 34701: RESULT«undef»

[14:10] <masak> that's correct, at least.

[14:10] <masak> rakudo: my $a = 5; eval 'say $b'; say $!

[14:10] <p6eval> rakudo 34701: OUTPUT«Scope not found for PAST::Var '$b'␤»

[14:11] <masak> rakudo: my $a = 5; eval 'say $a'; say $!

[14:11] <p6eval> rakudo 34701: OUTPUT«Scope not found for PAST::Var '$a'␤»

[14:11] <masak> hah!

[14:11] <masak> that's wrong.

[14:11] * masak reports this new development

[14:14] <masak> slavik: I'd fix it, but the bug is likely somewhere in lexicals land, which scares me a bit.

[14:14] <pugs_svn> r24700 | ruoso++ | [mildew] Foo::.method works now

[14:14] <slavik> :(

[14:15] <ruoso> mildew: module Foo { }; $OUT.print(Foo::.name.FETCH)

[14:16] <p6eval> mildew: OUTPUT«Could not find variable $?PACKAGE in the lexical scope.␤»

[14:16] <ruoso> hmm... mildew evalbot is a bit outdated

[14:16] <masak> slavik: all right, I'll look. but I might not get very far.

[14:17] <slavik> :D

[14:19] <masak> I've always wanted to know how the eval function works anyway.

[14:19] *** kisu_ is now known as kisu

[14:20] <masak> rakudo: eval "use Foo" or die $!

[14:20] <p6eval> rakudo 34703: OUTPUT«Can't find ./Foo in @INC␤current instr.: 'die' pc 14778 (src/builtins/control.pir:188)␤»

[14:20] <masak> hm, that's different from the output on my bow.

[14:20] <masak> s/w/x/

[14:20] <masak> updating.

[14:21] <pmurias> ruoso: does make test in mildew work for you?

[14:22] <ruoso> pmurias, I had only one or two tests failing

[14:22] * ruoso re-running

[14:24] <ruoso> pmurias, the p5 test has two sub-tests failing

[14:24] <pmurias> fixed

[14:24] <pugs_svn> r24701 | pmurias++ | [mildew] fixed test count in p5.t

[14:24] <ruoso> and classhow_add_method_real.t needs to be implemented with the new signature 

[14:27] <slavik> is there support for .perl on matchers yet?

[14:27] <slavik> rakudo: say 2**32

[14:27] <p6eval> rakudo 34703: OUTPUT«4294967296␤»

[14:27] <slavik> rakudo: say 2**64

[14:27] <p6eval> rakudo 34703: OUTPUT«1.84467440737096e+19␤»

[14:27] <slavik> :(

[14:28] <masak> slavik: I'm getting increasingly curious as to what it is you're trying to build.

[14:29] <slavik> masak: I would like to be able to match a string against a grammar and get a dump of the structure of the matcher object that is returned

[14:30] <masak> slavik: aye, that'd be neat. is it specced?

[14:30] <slavik> masak: not sure :(

[14:30] <slavik> masak: is it possible, looking at a var to tell what the type is, like if it's a plain scalar or a reference to an array and such

[14:31] <masak> slavik: the var or the value it contains?

[14:31] <slavik> the var

[14:31] <masak> slavik: $x.VAR.WHAT, perhaps?

[14:31] <slavik> like $var =5; $var2 = 1,2,3,4; to be able to tell that $var holds a single value and that $var2 is a reference to an array

[14:32] <masak> rakudo: 'foobar1bar2' ~~ / [ bar \d ]+ /; say $/.perl

[14:32] <p6eval> rakudo 34703: OUTPUT«Method 'perl' not found for invocant of class 'Match'␤current instr.: '_block14' pc 78 (EVAL_15:43)␤»

[14:32] <slavik> that's interesting ...

[14:32] <masak> slavik: well, $var.WHAT is enough for that.

[14:33] <slavik> I see

[14:33] <masak> slavik: becuase you're only interested in the value inside the variable.

[14:33] <slavik> rakudo: my $var =5; say $var.WHAT;

[14:33] <p6eval> rakudo 34703: OUTPUT«Int␤»

[14:33] <slavik> rakudo: my $var =1..6; say $var.WHAT;

[14:33] <p6eval> rakudo 34703: OUTPUT«Range␤»

[14:33] <slavik> rakudo: my @list = 1..5; my $var = @list; say $var.WHAT;

[14:33] <p6eval> rakudo 34703: OUTPUT«Array␤»

[14:33] <slavik> awesome

[14:33] <slavik> rakudo: my @list = 1..5; my $var = @list; say $var.perl;

[14:33] <p6eval> rakudo 34703: OUTPUT«[1, 2, 3, 4, 5]␤»

[14:34] <slavik> rakudo: my %list = 1..5; my $var = @list; say $var.perl;

[14:34] <p6eval> rakudo 34703: OUTPUT«Scope not found for PAST::Var '@list'␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[14:34] <slavik> rakudo: my %list = 1..5; my $var = %list; say $var.what, $var.perl;

[14:34] <p6eval> rakudo 34703: OUTPUT«Odd number of elements found where hash expected␤current instr.: 'parrot;Perl6Hash;!STORE' pc 5748 (src/classes/Hash.pir:154)␤»

[14:34] <slavik> rakudo: my %list = 1..6; my $var = %list; say $var.what, $var.perl;

[14:34] <p6eval> rakudo 34703: OUTPUT«Method 'what' not found for invocant of class 'Perl6Hash'␤current instr.: '_block14' pc 122 (EVAL_14:55)␤»

[14:34] <slavik> rakudo: my %list = 1..6; my $var = %list; say $var.perl;

[14:34] <p6eval> rakudo 34703: OUTPUT«{"1" => 2, "3" => 4, "5" => 6}␤»

[14:36] <slavik> rakudo: my %list = 1..6; my $var = %list; say $list.what;

[14:36] <p6eval> rakudo 34703: OUTPUT«Scope not found for PAST::Var '$list'␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[14:36] <slavik> rakudo: my %list = 1..6; my $var = %list; say %list.what;

[14:36] <p6eval> rakudo 34703: OUTPUT«Method 'what' not found for invocant of class 'Perl6Hash'␤current instr.: '_block14' pc 122 (EVAL_14:55)␤»

[14:36] <slavik> :(

[14:37] <masak> .WHAT, not .what

[14:37] <slavik> oh

[14:37] <slavik> rakudo: my %list = 1..6; my $var = %list; say %list.WHAT;

[14:37] <p6eval> rakudo 34703: OUTPUT«Hash␤»

[14:37] <slavik> masak: that's a bit inconsistant ...

[14:37] <slavik> .perl, but .WHAT

[14:37] <slavik> is .perl a function?

[14:37] <masak> slavik: yes. and .WHAT is (ideally) a macro.

[14:37] <slavik> I see

[14:37] <masak> well, .perl is a method. :)

[14:38] <slavik> masak: method/function ...

[14:38] <masak> aye.

[14:38] <slavik> masak: same **** different name :P

[14:38] <masak> except when it isn't.

[14:38] <slavik> is it possible to dereference a var as a hash to see what functions/macros and such it has?

[14:38] *** yantom left
[14:38] <masak> it will be.

[14:39] <slavik> awesome

[14:39] <masak> %hash.^methods

[14:39] <slavik> I mean to do it for $var

[14:39] <masak> or %hash.WHAT.methods (I think)

[14:39] <masak> slavik: exemplify.

[14:40] <slavik> in perl5, you can take a package, treat it as a hash and print out all the functions/variable/whatever it has

[14:40] <masak> you can? neat!

[14:41] <slavik> err, you didn't know that?

[14:41] <masak> I know at least classes will have such introspection capabilities in Perl 6. don't know about modules and packages and such.

[14:42] <masak> slavik: no, I'm relatively inexperienced as a Perl 5 programmer.

[14:42] <slavik> I see

[14:42] <masak> slavik: I use it a lot, but I'm no expert.

[14:42] <slavik> it would be nice, because then you can literally check if the module/whatever has the functionality you need

[14:43] <slavik> no need to rely on version and such, unless the output from stuff changes

[14:43] *** jhorwitz joined
[14:44] <slavik> masak: the package introspection is how I was able to get a list of the Purple and Pidgin API that is exposed to the Perl interpreter. :) then it was a matter of looking up the appropriate C function to see what it does

[14:45] <masak> slavik: I suggest you make it your mission to have this corner of Perl 6 specced and eventually implemented.

[14:45] <masak> slavik: I also predict that this will make you very happy.

[14:45] <slavik> yes

[14:45] <slavik> I love that Perl let's you do everything ...

[14:46] <masak> slavik: seriously. go put your suggestions in the nearest Spec document.

[14:46] <wolverian> including misusing apostrophes! graa! 

[14:46] * wolverian runs outside screaming 

[14:46] <masak> wolverian++ # 哈哈哈

[14:47] <wolverian> are those houses? :) 

[14:48] <masak> wolverian: I thought you were outside.

[14:48] <masak> wolverian: no, they're sinographs for laughter.

[14:48] <masak> wolverian: I've found that's a very logical way to depict laughter.

[14:49] <wolverian> ah. I thought it was the scenery.

[14:49] <wolverian> I have a laptop; I can run outside _and_ IRC.

[14:49] <masak> wolverian: I can picture it very clearly.

[14:49] <slavik> masak, will look at it ...

[14:50] <slavik> but been busy

[14:50] <wolverian> yet another normal day in my life; http://irc.fi/wolverian might help.

[14:50] <masak> ah, .fi

[14:50] <masak> hello, neighbour.

[14:51] <slavik> masak: here's another one ... since it is possible for evaled code to inherit the current state (defined vars and such), what if it was possible for the oposite? define a var in an eval and then access it after eval

[14:51] <slavik> so that basically, the eval simply copies/pastes the codes like a #define

[14:51] <wolverian> maybe I will run to sweden!

[14:52] *** tomyan joined
[14:52] <masak> wolverian: screaming all the way!

[14:53] <wolverian> absolutely. though I suppose if I want to run over land, the detour is a bit long..

[14:53] <masak> wolverian: or run right up to the border, throwing the extra apostrophe as long as you can over it.

[14:54] *** tomyan left
[14:55] <wolverian> haha.

[14:55] <wolverian> masak++

[14:56] <masak> if I can keep this up, I'll acheive my life-long dream: being able to write like _why.

[14:58] <masak> http://poignantguide.net/ruby/chapter-5.html

[14:58] <masak> slavik: see 'macros'.

[14:59] <slavik> will do

[14:59] <slavik> in that chapter?

[15:01] <masak> S06, methinks.

[15:01] <masak> somewhere near the bottom.

[15:01] <masak> slavik: got ack?

[15:02] <slavik> huh?

[15:02] <masak> http://search.cpan.org/dist/ack/

[15:02] <slavik> what's the new url for the synopsis?

[15:03] <slavik> never used it

[15:04] <masak> slavik: I suggest you try it. specifically, download Pugs and docs/Perl6/Spec, and use ack on it. you'll never have to search manually again.

[15:04] <slavik> I see

[15:04] <masak> .oO( maybe now would be a good time to implement that spec-ack-bot we've been mumbling about )

[15:04] <masak> slavik: http://perlcabal.org/syn/S06.html

[15:04] <masak> bbiab

[15:05] <slavik> bbiab?

[15:05] *** masak left
[15:05] <ruoso> pmurias, I was thinking we could refactor mildew, creating a src/VAST directory with each vast type in a separated file

[15:05] <ruoso> slavik, Be Back In A Bit

[15:05] <slavik> oh, ok

[15:05] <slavik> brb is shorter

[15:06] <ruoso> pmurias, mildew is starting to be too big in loc

[15:09] <pmurias> ruoso: ok

[15:11] <pmurias> you mean like moving VAST::comp_unit::emit_m0ld to src/VAST/comp_unit.pm

[15:11] <pmurias> ?

[15:11] <ruoso> yes...

[15:12] <pugs_svn> r24702 | ruoso++ | [mildew] initial support for Symbolic_unary

[15:12] <pmurias> seperating the traversal routines from the main code would be a good start

[15:12] <ruoso> then we do a "for <src/VAST/*.pm> { require $_ }"

[15:15] <pmurias> i'm fighting with Coro now feel free to refactor mildew

[15:18] *** tomyan joined
[15:26] *** kisu left
[15:27] *** masak joined
[15:27] *** tomyan left
[15:30] <masak> slavik: 'brb' is shorter, but it also IMO conveys a shorter time span

[15:30] *** kisu joined
[15:30] <slavik> oh

[15:31] <SamB> how about biab? that's shorter than bbiab but conveys the same idea, no?

[15:31] <masak> SamB: aye.

[15:32] <masak> offhand, I don't see a difference between the two.

[15:32] <Matt-W> aieee

[15:32] <Matt-W> my parrot won't compile

[15:33] <masak> Matt-W: 'make realclean; perl Makefile.PL; make'?

[15:36] <Matt-W> masak: I shall try

[15:36] <slavik> make realclean; perl Makefile.PL; make; make perl6; sudo make reallyinstall

[15:36] <slavik> that's what I do :)

[15:37] <slavik> and an svn update after make realclean :)

[15:37] <Matt-W> I don't install my parrot yet

[15:37] <Matt-W> which means my perl 6 scripts have #!/home/matthew/Compiling/parrot/languages/perl6/perl6 at the top

[15:37] <pmurias> ruoso: have you ever tried using gobby?

[15:37] <Matt-W> but I can live with that :)

[15:38] <slavik> k

[15:38] <Matt-W> how's rakudo doing for rule/grammar support at the moment?

[15:38] <slavik> Matt-W: really good :)

[15:38] <slavik> Matt-W: bcacm.org/~slavik/

[15:39] *** alester joined
[15:39] *** ft joined
[15:40] <Matt-W> slavik: thanks. I'm planning to try something with them and thought I should check if it's a pointless undertaking yet

[15:41] <ruoso> pmurias, gobby?

[15:41] <slavik> Matt-W: afaik there are no assertions yet

[15:42] <Matt-W> slavik: I don't know what assertions are yet, so perhaps I won't miss them too much

[15:42] <Matt-W> I really need to play with rules to understand more about how they work

[15:42] <slavik> Matt-W: after you read the post, you will start missing them ;)

[15:42] <slavik> Matt-W: rules, tokens, etc are just regex with some preapplied flags.

[15:43] <pmurias> ruoso: gobby is a "multiplayer" editor

[15:43] <slavik> grammar = hierarchy of said rules, tokens, regex

[15:43] <slavik> pmurias: I believe that is IRC :P

[15:45] <pmurias> slavik: do you consider cat(1) an editor?

[15:46] <slavik> hmm

[15:46] <slavik> no, but cat | sed is :)

[15:47] <pmurias> doesn't sed make only one pass?

[15:47] <pmurias> i guess if we all used ed we could have an editorbot

[15:48] <Matt-W> I'm afraid I'm very fussy and am only truly happy when I'm using vim

[15:48] <ruoso> pmurias, is there a debian package for gobby?

[15:48] <pmurias> yes gobby

[15:52] <ruoso> pmurias, I cant host a gobby session, because I'm behind asquerade

[15:53] <pmurias> you mean masquerade?

[15:54] <ruoso> yes

[15:54] <Matt-W> woo, I have a perl6 again

[15:54] <Matt-W> I shall have to remember make realclean for next time, as make clean didn't sort it out

[15:56] <pmurias> ruoso: opened one on feather.perl6.nl:6522

[15:57] <ruoso> pmurias, it doesn't seem to have syntax highlight

[15:57] <ruoso> ah it does

[15:58] *** kisu left
[15:59] *** kisu joined
[15:59] <pmurias> the editor doesn't support vim binding unfortunatly...

[16:00] <Matt-W> do grammars, rules and objects share the same namespace?

[16:00] <slavik> Matt-W: grammars and classes, probably

[16:01] <pmurias> rules share the namespace with methods

[16:01] <ruoso> pmurias, hmm... I think emacs+irc seems more productive

[16:01] <Matt-W> okay

[16:02] *** kisu left
[16:15] *** lichtkind joined
[16:15] *** kisu joined
[16:16] *** eric2561 joined
[16:17] <eric2561> @tell unobe i added you to the git-hub repo as a collaborator

[16:17] <lambdabot> Consider it noted.

[16:22] <pugs_svn> r24703 | pmurias++ | [smop] trying out using Coro for runloop integration - proof of concept pulp

[16:28] <masak> eric2561: how's the repo going?

[16:29] *** duke_leto left
[16:29] <ruoso> pmurias, I'm doing that refactoring... so if you plan to change mildew, please wait a little bit...

[16:29] <masak> Matt-W: instead of providing the whole path to perl6 in your perl scripts, consider creating an alias.

[16:30] <masak> Matt-W: `alias perl6=/.../parrot/languages/perl6`

[16:30] <Matt-W> masak: at this stage, I'm quite content with the current arrangement

[16:30] <masak> and putting it in your ~/.bash_profile

[16:30] <masak> Matt-W: ok. you do what you prefer.

[16:30] <Matt-W> I am having some trouble with a rule though

[16:30] <slavik> how about PERL6LIB that is predefined?!

[16:30] <slavik> :P

[16:31] <slavik> Matt-W: see my example, if you use rule, the spaces between braces matter

[16:31] <masak> slavik: doesn't solve the above problem, but yes, it'd be nice.

[16:31] <slavik> hence the use of tokens in my article

[16:31] <Matt-W> I thought whitespace was always metasyntactic in perl 6 rules

[16:32] <slavik> Matt-W: not in rules, tokens yes, rules no

[16:32] <slavik> regex is also /x I think

[16:33] <masak> all of them are /x in Perl6

[16:33] *** DemoPhreak left
[16:34] <Matt-W> it appears that the :sigspace modifier (default on rules) makes *some* whitespace significant

[16:34] <eric2561> masak just stalled while i'm vacationing ;) the few days i've had to work on it i've been to busy with real work...and now its back to cleaning the house, but i'll be back soon

[16:34] <masak> eric2561: sounds good. looking forward to seeing it grow and prosper.

[16:35] <slavik> Matt-W: I prefer to use token :)

[16:36] <ruoso> pmurias, it wasn't that hard... I'm about to commit the refactoring..

[16:38] <szabgab> rakudo: $year = 2008; $year++; $year.say

[16:38] <p6eval> rakudo 34710: OUTPUT«Scope not found for PAST::Var '$year'␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[16:38] <szabgab> rakudo $year = 2008;

[16:39] <szabgab> rakudo: $year = 2008;

[16:39] <p6eval> rakudo 34710: OUTPUT«Scope not found for PAST::Var '$year'␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[16:39] <szabgab> rakudo: my $year = 2008;

[16:39] <p6eval> rakudo 34710: RESULT«2008»

[16:39] <szabgab> rakudo: my $year = 2008; $year++;

[16:39] <p6eval> rakudo 34710: RESULT«2008»

[16:39] <szabgab> rakudo: my $year = 2008; $year++; $year.say

[16:39] <p6eval> rakudo 34710: OUTPUT«2009␤»

[16:39] <szabgab> rakudo: my $year; $year //= 2009;

[16:39] <p6eval> rakudo 34710: OUTPUT«get_bool() not implemented in class 'Timer'␤current instr.: 'parrot;PCT;HLLCompiler;command_line' pc 1442 (src/PCT/HLLCompiler.pir:771)␤»

[16:40] * masak reports rakudobug

[16:41] <rindolf> szabgab: hi.

[16:41] *** vixey left
[16:41] <rindolf> Happy new year

[16:43] *** cspencer joined
[16:43] *** ejs joined
[16:44] <pmurias> rindolf: happy new year

[16:45] <rindolf> pmurias: thanks.

[16:46] <pugs_svn> r24704 | ruoso++ | [mildew] refactor VAST::* to separated files, should be easier to maintain...;

[16:46] * ruoso still counts a few hours (and a second) to new year

[16:47] <masak> yes, can't they leave those seconds alone?

[16:47] <masak> now we have to go '3 .. 2 .. 1 .. hold it .. happy new year!' this year.

[16:48] <ruoso> and you never know if the clock was already updated or not

[16:48] <ruoso> because the second is added 00:00:00 UTC

[16:48] <slavik> rakudo: say 6..1;

[16:48] <p6eval> rakudo 34710: OUTPUT«␤»

[16:48] <slavik> rakudo: say -6..1;

[16:48] <p6eval> rakudo 34710: OUTPUT«-6-5-4-3-2-101␤»

[16:48] <ruoso> I always thought 6..1 would return 6,5,4,3,2,1

[16:49] <slavik> ruoso: I thought so, too

[16:49] <slavik> perl6: say 6..1;

[16:49] <p6eval> elf 24703, pugs, rakudo 34710: OUTPUT«␤»

[16:49] <slavik> oh, wow

[16:50] <icwiener> say reverse 1..6

[16:50] <rindolf> say 6..1:-1

[16:50] <rindolf> rakudo: say 6..1:-1

[16:50] <p6eval> rakudo 34710: OUTPUT«Statement not terminated properly at line 1, near ":-1"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:50] <rindolf> rakudo: say 6..1,-1

[16:50] <p6eval> rakudo 34710: OUTPUT«-1␤»

[16:51] <ruoso> rakudo say 6..1 :by -1

[16:51] <pmurias> how was the env variable to tell where the perl5 modules live called?

[16:51] <ruoso> perldoc perlrun should tell you

[16:52] <icwiener> rakudo: say reverse 1..6

[16:52] <p6eval> rakudo 34710: OUTPUT«654321␤»

[16:52] <ruoso> rakudo: say 6..1 :by -1

[16:52] <p6eval> rakudo 34710: OUTPUT«Statement not terminated properly at line 1, near ":by -1"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:53] <masak> needs parens.

[16:53] <icwiener> rakudo: say 6..1:by(-1)

[16:53] <p6eval> rakudo 34710: OUTPUT«Statement not terminated properly at line 1, near ":by(-1)"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:54] <masak> rakudo: say (6,,1):by(-1)

[16:54] <p6eval> rakudo 34710: OUTPUT«Statement not terminated properly at line 1, near ":by(-1)"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:54] <masak> rakudo: say (6..1):by(-1)

[16:54] <p6eval> rakudo 34710: OUTPUT«Statement not terminated properly at line 1, near ":by(-1)"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[16:54] <masak> ok, Rakudo simply doesn't implement that yet.

[16:57] <icwiener> S03 says: 2..1:by(-1) but reverse 1..2 is preferred because it works for alphabetic ranges as well.

[16:58] <masak> icwiener: not true anymore. :)

[16:58] <masak> at least, I've written tests for ('C'..'A'):by(-1)

[16:58] <masak> see recent discussion on this channel

[16:58] <masak> (as in, a few days back)

[16:59] <pugs_svn> r24705 | ruoso++ | [mildew] support :(\$capture) in signatures, all tests pass now ;) 

[16:59] <icwiener> Ok. Is S03 going to be updated accordingly? I mean, is it standard procedure?

[17:00] <masak> icwiener: the spec and the tests will just have to fight it out, I guess,

[17:01] <icwiener> What does that mean?

[17:01] *** vixey joined
[17:02] <ruoso> now mildew supports receiving a capture as-is and passing it forward to another method without enforcing any context on it... :) :) :)

[17:02] <ruoso> this means that you can call foo(bar(),baz(),bla()) and foo might delay enforcing the context as long as it wants

[17:10] *** Morpheus[PL] joined
[17:10] <Morpheus[PL]> Hi

[17:10] <pmurias> Morpheus[PL]: hi

[17:11] <Morpheus[PL]> Hi pmurias (:

[17:11] *** ejs left
[17:13] <Morpheus[PL]> What I need to try perl6?

[17:13] <Morpheus[PL]> Only pugs or pugs+parrot..?

[17:13] <slavik> Morpheus[PL]: pugs or rakudo :)

[17:13] *** hercynium joined
[17:13] <slavik> I'd suggest rakudo since it is more feature complete atm

[17:14] <slavik> rakudo = perl6 on parrot

[17:14] <Morpheus[PL]> Hm

[17:14] <Morpheus[PL]> So what is pugs for ?

[17:14] <Morpheus[PL]> It's different perl6 implementation?

[17:15] <pmurias> yes, pugs is written in haskell and dead atm

[17:15] *** mberends joined
[17:15] <Morpheus[PL]> So which one will be official perl distribution in future?

[17:16] <slavik> Morpheus[PL]: anything passing the spec test :)

[17:17] <pugs_svn> r24706 | lwall++ | [undef.t] there is no my() function...declarators require space

[17:21] *** Morpheus[PL] left
[17:25] <ruoso> TimToady, "is export" only means that it is exportable, right... you still need to "use Foo <symbol>" to import it, right?, does the :DEFAULT tagset means that it is imported even without explicit request?

[17:25] *** cspencer left
[17:25] *** smtms left
[17:26] <TimToady> that was how it was designed, but I'm thinking multis should always be imported by default

[17:28] <TimToady> most languages that do multiple dispatch just make them all global

[17:28] <TimToady> we don't do that, but importing all the multis we find anywhere seems like the next best thing

[17:29] <TimToady> where, in this case, "next best" actually means "better" :)

[17:31] <pmurias> if do different modules declare a multi with proto should we just mix them together?

[17:32] <pmurias> as multis without a proto declaration declare additional meaning and ones with a proto declaration override it

[17:32] <TimToady> we could just merge them into a multisig proto

[17:33] *** jrockway joined
[17:33] <TimToady> then we complain only on a multi that doesn't match either of the protos

[17:34] <TimToady> on the other hand, it might pessimize rewriting named args to positionals, and make it much harder to do multiple dispatch

[17:34] *** araujo left
[17:35] <literal> hm, are private object attributes read only by default?

[17:35] <slavik> rakudo: my $a = 1..10; for =$a { say $_; }

[17:35] <p6eval> rakudo 34712: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[17:35] <TimToady> readonly to whom?

[17:35] <slavik> rakudo: my $a = 1..10; for =$a { say; }

[17:35] <p6eval> rakudo 34712: OUTPUT«␤␤␤␤␤␤␤␤␤␤»

[17:36] <literal> to the object itself

[17:36] <TimToady> no, they're rw

[17:36] <literal> oh, ok, so Ovid was just being overly verbose in his hangman source then

[17:36] <literal> http://use.perl.org/~Ovid/journal/38191

[17:38] <TimToady> yes, "is rw" is applied only to the accessor, and since there aren't any accessors there, it's a Useless Use of "is rw"

[17:39] <literal> will Rakudo eventually warn of such things?

[17:39] <pmurias> if someone implement it

[17:39] <pmurias> * implements

[17:40] <literal> yeah, I'm just asking if that's something to be desired or not :)

[17:40] <TimToady> we could require it in the spec, but that seems like overkill

[17:40] <TimToady> in general, it's fine to warn about anything the compiler knows is completely bogus

[17:41] <TimToady> it's when it starts guessing that it gets into trouble

[17:41] <TimToady> there are some instances of .= that STD currently guesses about wrongly, for instance

[17:42] <literal> that's temporary, right? I thought getting rid of guessing was one of the objectives with Perl 6 :)

[17:44] <TimToady> well, guessing on warnings has less danger than guessing on the actual p6 parse...

[17:44] *** xinming joined
[17:48] <literal> eric2561: so how does this work, what do I do if I want to push a patch (e.g. euler solution) to the perl6-examples repo?

[17:48] <TimToady> and in the case of .= it continues parsing as if it's a mutating method call, but it doesn't like my Fooz $f .=(:x(1)) from t/oo/construction.t

[17:51] <ruoso> TimToady, it feelds awkward that multis get to the default tagset where regular subs doesn't

[17:52] * azawawi2009 starts highlighting hangman ;-)

[17:52] <TimToady> it's because multis are really more like methods than like functions

[17:53] *** barney left
[17:53] <TimToady> you don't have to worry about exporting methods either

[17:53] <TimToady> they Just Happen

[17:53] <TimToady> the only reason we don't just shove all multis into GLOBAL is that we want different lexical scopes to be able to support different languages

[17:54] <TimToady> and we don't want magical action at a distance, esp at run time

[17:54] <TimToady> so we want to know at least the set of protos by compile time

[17:56] <TimToady> we could go as far as to disallow run-time multis in packages unless there's a compile-time proto in that package

[17:56] <TimToady> because it would be really nice for the optimizer to know exactly what set of multis it's dealing with

[17:57] <azawawi2009> TimToady: p5 '~=' => p6 '~~', right?

[17:57] <TimToady> =~ rather

[17:57] <TimToady> in p5 ~= would be the xor assignment operators

[17:58] <azawawi2009> so in line 15: subset Letter of Str where { $_ =~ /^ <[a..z]> $/ };

[17:58] <TimToady> or maybe that's ^=

[17:58] <azawawi2009> i get obsolete use of =~, please use ~~

[17:58] *** azawawi2009 is now known as azawawi

[17:58] <TimToady> indeed

[17:59] <TimToady> the warning is entirely correct

[17:59] <masak> I was going to write that in a comment.

[17:59] <masak> just haven't gotten around to it.

[17:59] *** xinming_ left
[17:59] <TimToady> and p6 will parse that as $_ = ~/.../

[17:59] *** s1n joined
[17:59] <TimToady> so it's Simply Wrong

[18:00] *** apeiron left
[18:01] <ruoso> TimToady, ok... mildew/smop doesn't support multis yet, so I'm more concerned about the exportation of regular subs

[18:01] <s1n> jerry gay is responsible for the S19 draft, correct?

[18:03] *** pdcawley joined
[18:04] <[particle]> yes, i am.

[18:04] <ruoso> TimToady, anyway... have you thought about the 'capture in item context' issue?

[18:05] <s1n> [particle]: i have a question about one part, it says single letter options cannot be clustered

[18:05] <s1n> [particle]: why? that not only breaks from perl5 but also most unices

[18:05] <[particle]> you need to get the updated version

[18:05] <s1n> lemme check the cabal...

[18:05] <[particle]> clustering is now allowed again, see...

[18:06] <[particle]> http://perlcabal.org/syn/S19.html

[18:06] <s1n> ahh yeah, okay, thanks heh

[18:06] <s1n> sorry, i was sifting through _a lot_ of spec commit emails heh

[18:07] <[particle]> no problem, i committed a bunch of changes yesterday which i made on holiday travel flights

[18:08] <s1n> ahh okay, well i clearly have a few weeks worth of ml emails to sift though, thanks for saving me from making an embarassing email :)

[18:08] <[particle]> i'd be very happy to hear any other comments you have

[18:08] <ruoso> TimToady, smop currently implements the changed behavior, you can see how that looks like in pugs/v6/mildew/t/return_function.t

[18:09] <s1n> there's a bunch to digest, looks like the arguments will get very complex very quick but i'm not really that much of a perl expert :)

[18:10] <s1n> the open/close delimiters look confusing, not sure how you're going to use that

[18:11] <[particle]> basically, we need to be able to pass values through to subsystems without perl parsing them

[18:11] <s1n> is that the best way to do it? ...

[18:11] <s1n> how is --argsproc options,values,options,values any different than what you have?

[18:12] <s1n> in other words, why is the closing delimiter needed?

[18:12] <[particle]> because the subsystem might take an option that is a valid perl 6 option

[18:12] <[particle]> need to make sure perl doesn't get confused

[18:13] <s1n> pardon my ignorance, but couldn't you assume the next token shouldn't be parsed?

[18:13] * azawawi syntax highlighted hangman -> http://feather.perl6.nl/~azawawi/hangman/

[18:13] <s1n> btw, autoloop-print is missing the '--' in front

[18:13] <[particle]> ++parser -o -- -foobar-file- ++/parser -o foo -O pbc

[18:14] <s1n> what about: --parser '-o -- -foobar-file' -o foo -O pbc

[18:15] <[particle]> then you need to deal with shell quoting

[18:15] <TimToady> doesn't allow file globbing in args very well

[18:15] <[particle]> and what if you want to ... right

[18:15] <s1n> oh, well just asking

[18:15] <[particle]> these are good questions

[18:15] <s1n> it's rather unique, so i wanted to know why

[18:16] <TimToady> most users will only see the mundane options

[18:16] <TimToady> even if they desugar to something with ++foo ... ++/foo

[18:16] <s1n> TimToady: isn't that true with perl5 too :)

[18:16] <TimToady> in this sense p5 only has mundane options :)

[18:17] <s1n> i'm not saying it's bad, just unique, that is most users will not be familiar with command-line syntax that has delimiters like that

[18:17] <[particle]> well, perl 6 is a language spec, not an implementation spec. it needs to deal with multiple implementations.

[18:17] <TimToady> I do think I'd capitialize all the magical ++FOO thingies though because it's hard to see them otherwise

[18:18] <[particle]> imagine how nice life would be for c programmers if all c compilers took the same options

[18:18] <TimToady> what there's other compilers than gcc?

[18:19] <s1n> that's absurd

[18:19] <s1n> There Can Be Only One

[18:19] <TimToady> it must be 2008 or something

[18:19] <slavik> [particle]: that would make sense, and we can't have none of that

[18:20] <[particle]> ok, so it looks like i'm on the right track :)

[18:20] <slavik> :D

[18:20] <s1n> [particle]: have to checked to see how well ++ and ++/ play with unix shells?

[18:20] <s1n> or other shells for that matter

[18:20] <[particle]> TimToady: i can capitalize them, it just looked like shouting to me. would titlecase be loud enough?

[18:20] <s1n> IMPORTANT THINGS ARE ALWAYS SHOUTED!

[18:20] <TimToady> I think they want to be shouted

[18:20] <slavik> is there a C compiler for parrot?

[18:21] <[particle]> ok, then.

[18:21] <[particle]> slavik: there's a c header parser

[18:21] <slavik> doesn't count :P

[18:21] <TimToady> otherwise the proper subsystem might not hear :)

[18:21] <[particle]> TimToady: i wonder how subsystems will return errors to perl 6, and does that need to be specced?

[18:22] <s1n> [particle]: another thing, something like autoloop-split should probably be ++...

[18:22] <TimToady> p6 knows how to deal with failure :)

[18:22] <s1n> that is, ++F use Text::CSV ++/F

[18:22] <s1n> rather than the {}?

[18:23] *** buu left
[18:23] <[particle]> well, i see the compiler (and other) subsystems removing the -- before things like '--CHECK{...}'

[18:24] <[particle]> then executing the code contained within

[18:24] *** icwiener left
[18:24] <s1n> why is {} different than option closures though?

[18:24] <[particle]> so the {...} syntax allows arbitrary perl 6 code to run

[18:24] <s1n> that's providing 2 different kinds of option delimiters

[18:25] <pmurias> what's the runtime equivalent of -O

[18:25] <pmurias> ?

[18:25] <[particle]> pmurias: for rakudo, it's --target=[parse|past|post|pir]

[18:26] <pmurias> what i really meant if with -O i can specify what to compile to, how to i specify how to execute the code when not compiling

[18:26] <[particle]> i forget what pugs did

[18:26] <[particle]> that will depend on your runtime

[18:27] <pmurias> pugs has -B and -C like mildew and kp6 had?

[18:27] <[particle]> i don't know if perl will take for example foo.past as input and compile it the rest of the way

[18:27] <TimToady> --CHECK seems unnecessary when you can just say -e 'CHECK {...}'

[18:27] *** ovid joined
[18:28] <TimToady> bbl &

[18:28] <[particle]> i'm not certain i can just say 'CHECK{...}' as it may be interpreted as a filename

[18:29] *** Psyche^ joined
[18:29] <ovid> If I submit a bug report for Rakudo, I would like to include patch with a test, but I don't want a failing test suite. Are there guidelines on submitting TODO, or "must not run" tests?  How do they get converted to passing tests later?

[18:30] <[particle]> ovid: can you make it into a spectest, and fudge it for rakudo?

[18:30] <ruoso> ovid, you can add a fudged test

[18:30] <ovid> Spectest? Does that mean commit it to the old pugs repository? I don't even know my user/pass for that any more :)

[18:31] <[particle]> #?rakudo todo 'RT #nnnnn'

[18:31] <[particle]> ovid, i can give you a new commit bit

[18:31] <ovid> @particle: OK.

[18:31] <lambdabot> Unknown command, try @list

[18:32] <[particle]> ovid your current email is: publiustemp-perl6pugs@yahoo

[18:32] <ovid> Ooh, let me check to see if that's still active.  brb

[18:33] <ovid> Looks like that's long gone. I'll recreate it.

[18:33] <[particle]> you'd still have to remember the password :)

[18:34] <[particle]> apparently, you're an administrator, and i can't delete administrator commit bit accounts

[18:34] <[particle]> oh, i see, i can only delete pending bits anyway

[18:34] <ovid> What's the checkout URL? I'll see if I can remember it.

[18:34] <[particle]> i can resend the email

[18:34] <[particle]> http://svn.pugscode.org/pugs

[18:35] <ovid> Email address added.

[18:36] <[particle]> ovid: message sent

[18:36] <ovid> Thanks

[18:37] <rindolf> Hi ovid 

[18:37] <rindolf> ovid: Happy New Year.

[18:37] <ovid> HI Shlomi. Thanks.

[18:37] <ovid> Er, rindolf. Sorry. :)

[18:37] <ovid> Hope you (and everyone else) has a happy new year, too.

[18:37] <rindolf> ovid: what's up?

[18:38] <ovid> Just trying to figure out how to submit test patches for bugs.

[18:38] <rindolf> ovid: which bugs?

[18:38] <ovid> Any I find. There are several in RT.

[18:39] <rindolf> ovid: ah.

[18:39] <[particle]> ovid: it's a little annoying, since you need to deal with multiple repositories, but that's the way of the future, i hear.

[18:39] <ovid> It would be a little less annoying if it were at least git instead of Subversion :)

[18:39] <rindolf> ovid: have you released that module you blogged about a lot on use.perl.org?

[18:39] <[particle]> i hate git on windows.

[18:39] <ovid> Which module?

[18:40] <ovid> I've blogged about many.

[18:40] <rindolf> ovid: don't remember.

[18:40] <rindolf> ovid: but you've blogged about it a lot.

[18:40] <rindolf> And then stopped.

[18:40] <rindolf> Let me find it on your journal.

[18:40] <rindolf> It had a Japanese-sounding name.

[18:40] <ovid> Bermuda? (Not Japanese sounding, but that might be what you mean)

[18:41] <s1n> [particle]: you use windows?

[18:41] *** Patterner left
[18:41] *** Psyche^ is now known as Patterner

[18:41] <rindolf> ovid: maybe. Let me see.

[18:41] <[particle]> ovid: nice work on the hangman program. i noticed at least one magic number there though

[18:41] *** araujo joined
[18:41] <[particle]> s1n: yes, i've been developing on windows for many, many years

[18:42] <s1n> [particle]: i'm sorry :)

[18:42] <ovid> Number of tries on finding a valid word or appropriate word length? It's a bit hackish and embarrassing, but I struggled to make it work with what I knew and what Rakudo offers.  Fun, though.

[18:43] <rindolf> ovid: yes - http://use.perl.org/~Ovid/journal/35655

[18:43] <[particle]> 6..* is what i remember

[18:43] <ovid> And all of those "self!private_method" calls are just ugly!

[18:43] <ovid> [rindolf]: never released it.  It's nowhere close to good to go. I could toss it on github at some point, but it's abandonware right now. :/

[18:44] <rindolf> ovid: ah.

[18:44] *** apeiron joined
[18:46] *** rindolf left
[18:50] <pugs_svn> r24707 | particle++ | [S19] fix typo, s1n++

[18:54] <pugs_svn> r24708 | particle++ | [S19] metasyntactic options should shout, to stand out. TimToady++

[18:54] *** rindolf joined
[19:00] *** abebae joined
[19:00] <ovid> [particle] Are you sure that email went out? I just sent a test one from gmail and received it a few seconds later. [email@hidden.address]
[19:00] <ovid> NM. Spam folder :)

[19:03] <pugs_svn> r24709 | Ovid++ | Add test to check autovivification of accessing a top-level hash element.  [perl #61882]

[19:10] *** pdcawley left
[19:13] <masak> azawawi: http://feather.perl6.nl/~azawawi/hangman/hangman.snippet.html is very beautiful.

[19:14] <s1n> sigh, man getting 5.10 into gentoo has been a real struggle

[19:14] <[particle]> s1n: it's easy on windows ;)

[19:15] <s1n> [particle]: they decided making separate ebuilds for each module would be a good idea. it wasn't (imho)

[19:16] <ovid> Hmm, took me a moment to realize why this wasn't working:  ack -i 'pigs skip' t/spec

[19:16] <[particle]> azawawi: seems coloring is off for "You guessed '$letter'"; in hangman, due to embedded quoting

[19:17] <s1n> ovid: they skip now? i thought it was cool that they could fly

[19:17] <ovid> Well, you know, genetic engineering and all.

[19:17] <TimToady> [particle]: you missed the -e

[19:17] <masak> [particle]: what's off about it?

[19:18] <ovid> So with 'fudge', you can't skip a test in the middle of a test block? It must be the whole block or nothing?

[19:18] <[particle]> method guess_letter ($letter) has blue '$', red 'letter'

[19:18] <[particle]> '$letter' has purple "'" and blue '$letter'

[19:18] <TimToady> [particle]: as in -e 'CHECK...'

[19:19] <[particle]> TimToady: ah, gotcha

[19:19] <masak> ovid: someone might have said this already, but parens isn't required around the list in an array assignment.

[19:19] <masak> ovid: nice script, btw.

[19:19] <TimToady> only thing is, -e would throw off the line count

[19:19] <ovid> masak: post the 'parens' comment to use.perl or the mailing list. Others should see that so they can get the new idioms drilled in.

[19:20] <masak> ovid: gotcha.

[19:20] <[particle]> actually, method guess_letter has blue '$l' and red 'etter'

[19:20] <ovid> [masak]: thanks :)

[19:21] <[particle]> ovid, masak: thoughts about a script repo with liberal commit policy?

[19:22] <ovid> Tempting, but you might get a lot of junk in there (might be better than a lot of nothing, though)

[19:22] <[particle]> like, say, pugs? examples/ maybe?

[19:22] <masak> [particle]: is eric2561's Perl 6 Examples repo liberal enough for you?

[19:22] <[particle]> never heard of it

[19:22] <masak> [particle]: http://github.com/eric256/perl6-examples/

[19:22] <[particle]> please don't say it's git.

[19:22] <[particle]> eh, well.

[19:22] <s1n> hah

[19:22] <masak> it's git.

[19:22] <ovid> git++

[19:23] <s1n> [particle]: come to the dark side :)

[19:23] <s1n> we have cookies

[19:23] <ovid> And git.

[19:23] <s1n> yes, and git :)

[19:23] <masak> (cookies and git)++

[19:23] *** apeiron_ joined
[19:23] <[particle]> git and tonic, maybe

[19:24] <masak> :)

[19:24] <s1n> [particle]: at least install a vm already

[19:24] <TimToady> all the self!foo should be replacable with $!foo

[19:24] *** apeiron left
[19:24] *** apeiron_ is now known as apeiron

[19:24] *** justatheory left
[19:25] <TimToady> and as pointed out earlier, 'is rw' is useless on private vars

[19:25] <[particle]> s1n: i have 14 vms

[19:25] <s1n> [particle]: i assume there's one with git

[19:26] *** GitHub148 joined
[19:26] <GitHub148> perl6-examples: 3David Romano 07master0 SHA1-f8b6172

[19:26] <GitHub148> Added wsg (Winter Scripting Games) directory and an example

[19:26] <GitHub148> http://is.gd/eiYh

[19:26] *** GitHub148 left
[19:26] <pugs_svn> r24710 | Ovid++ | Trying to make this suitable for "make spectest" with Rakudo.

[19:26] <pugs_svn> r24710 | Ovid++ | 

[19:26] <pugs_svn> r24710 | Ovid++ | The skip tests work, but the first TODO test doesn't TODO.

[19:26] <pugs_svn> r24710 | Ovid++ | Also, tests die part way through, but I can't figure out how to make part of a

[19:26] <pugs_svn> r24710 | Ovid++ | test skip instead of all of it.

[19:27] <ovid> If anyone wants to add that test to ls t/spectest.data in languages/perl6 (just locally, not as a commit), I'd be grateful if you could explain the issues I raised in that commit.  Sorry to be a pain :/

[19:27] <[particle]> i wonder if pmichaud++'s rval branch will fix these hash autovivification errors

[19:28] <masak> TimToady: by "useless", you mean "the default, so you're wasting keystrokes", right?

[19:28] <ovid> [TimToady] Replace self!foo with $!foo? What if I have "has $!foo" and "my method foo"? That's a bug I had to work around.

[19:28] <[particle]> ovid: did you know you can create t/localtest.data and run 'make localtest' to test only those files you want?

[19:29] <masak> ovid: first time I've seen the =open($file) idion. neat!

[19:29] <TimToady> ovid: Doctor, it hurts when I do this...

[19:29] <ovid> [particle]: nope. I wrote vim bindings that let me run perl6 tests from my editor. That's just the way I'm used to doing things. Maybe not the best.

[19:30] *** GitHub2 joined
[19:30] <GitHub2> perl6-examples: 3David Romano 07master0 SHA1-0de80d0

[19:30] <GitHub2> [wsg] Added README

[19:30] <GitHub2> http://is.gd/eiYY

[19:30] *** GitHub2 left
[19:31] * [particle] turns off enter/leave messages

[19:31] <ovid> [TimToady]: are you saying that people shouldn't have methods with the same names as variables? I routinely have 'sub foo { shift->{foo} }'. It's a common idiom. Or have I misunderstood?

[19:31] <[particle]> then have the accessors auto-generated

[19:31] <TimToady> if it's a public method, you should just use $.foo

[19:32] <TimToady> if it's private and you know it's a no-op, why do you have it?

[19:32] <ovid> [particle]: but that doesn't work if I need to do some any work before returning the variable (such as precalculate it on demand).

[19:33] <ovid> Or fetch it from a Web service, or check the user's permissions, etc.

[19:33] <ovid> [TimToady]: I had get_word() because it could be read publicly, but is set privately. I'll have to read through the docs some more.

[19:34] <TimToady> then give the backing store a different name, since it obviously doesn't mean the same thing :)

[19:34] * ovid scratches his head :)

[19:37] <pugs_svn> r24711 | particle++ | [S06] update to shortname syntax in command-line examples

[19:38] <Matt-W> Ow my head

[19:38] <Matt-W> I clearly don't understand rules as much as I thought I did

[19:39] <pugs_svn> r24712 | particle++ | [S19] update C<--CHECK{...}> syntax with more standard C<-e 'CHECK{...}'>

[19:39] <Matt-W> Oh

[19:40] <masak> Matt-W: I know the feeling.

[19:40] <Matt-W> There seems to be some automatic chomping going on

[19:40] <ovid> [TimToady]: so if naming a private method the same name as a variable is discouraged and a no-op, should it be illegal? It was a hard bug for me to track down.

[19:40] <masak> Matt-W: that's likely not the rules, but the readline.

[19:41] <Matt-W> masak: yes, is it supposed to chomp by default? I didn't tell it to

[19:41] <masak> Matt-W: =$*IN chomps by default, yes.

[19:41] <Matt-W> Right

[19:41] <Matt-W> Okay, so that's all behaving properly then

[19:41] <nnunley> How lazy is START?  Could ovid use that for his lazy initialization pattern?  (ie has $foo = START { ... } )

[19:42] <Matt-W> Now I have some tokens that match entire lines in my input. Can I write a rule or token or something which can match a specified sequence of them in a multiline input string?

[19:43] *** apeiron left
[19:43] <masak> Matt-W: exemplify.

[19:44] <[particle]> rule some_lines { <one_line> <another_line> <a_different_line> }

[19:44] <masak> right. where each rule for a line looks like { ^^ ... $$ }

[19:44] <s1n> [particle]: what does CHECK do?

[19:45] <Matt-W> gargh

[19:45] <Matt-W> curse my Perl 5 brain

[19:45] *** apeiron joined
[19:46] <Matt-W> oh also, how do I say 'a line that doesn't begin with a .'?

[19:46] <masak> s1n: (from S04) 'at compile time, ALAP, only ever runs once'

[19:46] <TimToady> ^^ <!before '.'>

[19:47] <Matt-W> TimToady: thanks

[19:47] * masak smiles at the ^^

[19:48] * TimToady smiles at $$  :)

[19:48] <masak> 哈哈

[19:49] <TimToady> funny that that also means pugs

[19:49] <Matt-W> It's like I can see that underneath it all makes sense... I'm just not tuned in yet

[19:50] <masak> is there someone here who runs a bot on feather? I'd like to ask someone who's set one up a few questions.

[19:50] <Matt-W> oh dear now none of the tokens match

[19:50] <masak> Matt-W: nopaste?

[19:50] <masak> TimToady: you lost me. what also means pugs?

[19:51] <TimToady> 哈

[19:51] <masak> oh! I didn't know that.

[19:51] <TimToady> 哈 哈 [ha1] /laughter/yawn/

[19:51] <TimToady> 哈 哈 [ha3] /a Pekinese/a pug/

[19:51] <masak> how exceedingly appropriate.

[19:52] <TimToady> "the mouth is fitting" :)

[19:52] <masak> aye.

[19:54] <masak> TimToady: I'm sometimes toying with the idea of creating a database of hanzi, with focus on character components. ISTR you have already made something like this.

[19:54] <ovid> Are there any docs on how to "fudge" tests. I appear to be failing at it, badly.

[19:54] <pasteling> "Matt-W" at 81.101.136.8 pasted "Silly problem with rules" (48 lines, 791B) at http://sial.org/pbot/34147

[19:55] <TimToady> masak: 54c8 09	哈	mouth.l fit.r

[19:55] <masak> TimToady: nice.

[19:55] <masak> what's the 09?

[19:55] <masak> I think I got the rest.

[19:55] <TimToady> 9 strokes

[19:55] <masak> aah.

[19:55] <TimToady> can search on that too

[19:56] <masak> convenient.

[19:56] <[particle]> for golfing? ;)

[19:56] <TimToady> you'd have to ask putter about that...

[19:56] * masak groans

[19:56] *** clintongormley left
[19:58] <[particle]> #perl6 rejects 48-hour cease-pun request

[19:58] <Matt-W> It wouldn't be IRC without puns

[19:58] <masak> what's the latest word on grammar matching syntax? is the syntax at the bottom of http://sial.org/pbot/34147 ok?

[19:58] <TimToady> it's just a method call

[19:58] *** clintongormley joined
[19:59] <masak> so it should be StoryGrammar.story instead?

[19:59] <TimToady> and Grammar.parse($string) should work

[19:59] <masak> is that specced?

[19:59] <[particle]> ovid:  i'm looking at autovivification.t now, but will be distracted by a phone call

[20:00] <ovid> No worries. I'm not as concerned about that feature, per se, as I am about being able to safely add tests for Perl 6.

[20:00] <TimToady> or StoryGrammar.new($string).TOP

[20:00] <[particle]> yes, trying to help you Get It Right.

[20:00] <masak> TimToady: I gotta write this down somewhere.

[20:00] <pugs_svn> r24713 | Ovid++ | Trying to make this fudgeable test work. Need to understand fudge better.

[20:00] <pugs_svn> r24713 | Ovid++ | Mmm ... fudge.

[20:01] *** Whiteknight joined
[20:01] <ovid> OK, I think my housemate and I need to run off and look at pretty fireworks soon.  Happy New Year everyone!

[20:01] <masak> ovid: and to you, sir.

[20:02] *** ovid left
[20:02] <Matt-W> .parse($string) on a grammar doesn't seem to be implemented in rakudo atm

[20:03] <azawawi> masak: thx

[20:03] <masak> Matt-W: would you like to submit a TODO rakudobug about it?

[20:03] <Matt-W> masak: I might do that

[20:03] <masak> Matt-W++

[20:04] <azawawi> masak: Padre + Padre::Plugin::Perl6 + p5 PPI rocks ;-)

[20:11] *** c9s_ joined
[20:11] <TimToady> also .parsefile($filename)

[20:11] <mberends> Matt-W, could your =$ifh { ... } loop simplify to: $contents=slurp($input_file); ?

[20:12] <Matt-W> umm

[20:12] <Matt-W> perhaps

[20:12] <ruoso> I think I'll declare EXPORT::ALL and EXPORT::DEFAULT on every package from the start, it should be easier than checking if that package is there...

[20:12] <Matt-W> yes, yes it can

[20:12] <Matt-W> mberends: thanks

[20:13] <mberends> :)

[20:13] <Matt-W> &

[20:14] <ruoso> TimToady, I've been naming packages with the "::" in the end, like Foo::Bar::baz means looking for "Foo::" in the current scope, than looking for Bar:: inside that package, and for &baz inside the last

[20:14] *** c9s left
[20:16] *** eric2561 left
[20:16] <mberends> $contents = slurp($input_file).chomp; #may be even better to suppress a superfluous final \n

[20:16] <ruoso> that means the type and the package are stored with different names

[20:17] <pugs_svn> r24714 | particle++ | [S19] s/bundl/cluster/g; update date/version

[20:18] *** clintongormley left
[20:21] <literal> can I do something like "use lib '.'" in Perl 6?

[20:22] *** eric2561 joined
[20:27] *** eric2562 joined
[20:34] <mberends> probably not yet, I looked in vain a few weeks ago

[20:35] <mberends> PERL6LIB seems to be the only facility so far

[20:44] *** iblechbot left
[20:45] *** eric2561 left
[20:55] *** Limbic_Region joined
[20:57] *** vixey left
[20:59] *** slavik left
[21:04] <masak> literal: it's not implemented in Rakudo yet.

[21:07] <mberends> masak, apart from run(), do you know of a qx{} or `backtick` facility in Rakudo?

[21:08] <masak> mberends: nope.

[21:08] <mberends> :(

[21:08] <masak> I don't do shell games a lot.

[21:09] <masak> Matt-W: did you send rakudobug a message about .parse? otherwise I'll do it now.

[21:10] *** buubot left
[21:17] *** vixey joined
[21:17] <masak> mberends: why, what do you need?

[21:17] <masak> mberends: why not create a sub that mimics the behaviour of infix:<` `>?

[21:22] *** Limbic_Region left
[21:24] <rindolf> Did someone implement line numbers for run-time errors in Rakudo yet?

[21:27] <[particle]> no

[21:36] *** alester left
[21:38] <rindolf> [particle]: I seeee.

[21:41] *** dukeleto joined
[21:41] *** Whiteknight left
[21:46] <mberends> masak, I did hack something together with run() and output redirection to a temp

[21:48] <mberends> file, but it's ugly. The application is a web server, currently using netcat for TCP.

[21:48] *** kisu left
[21:48] *** eric2562 left
[21:49] <pugs_svn> r24715 | ruoso++ | [mildew] "is export" implemented, "is export(:DEFAULT)" still not implemented

[21:49] <ruoso> the (:DEFAULT) part is parsed in a more complicated way than I expected

[21:51] <[particle]> ruoso: what pugs dir do i need to check out to see all the mildew code?

[21:52] *** cspencer joined
[21:54] *** kisu joined
[21:56] <literal> are block/loop labels unimplemented in Rakudo?

[21:57] <[particle]> like loop: for @x -> $y { next loop unless $y > 5 }

[21:57] <[particle]> ?

[21:57] <literal> yeah

[21:57] <[particle]> i don't think so

[21:58] <[particle]> rakudo: my @x = 1,5,10; loop: for @x -> $y { next loop unless $y > 5 };

[21:58] <p6eval> rakudo 34724: OUTPUT«Statement not terminated properly at line 1, near ": for @x -"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤»

[21:58] <literal> that's the same thing I got

[21:58] <literal> statement not terminated properly

[21:58] <[particle]> yep, it's not parsing the label

[21:59] <mberends> nopaste?

[22:00] <[particle]> pasteling?

[22:00] <[particle]> use http://rafb.net iirc

[22:02] <azawawi> 2009 here finally ;-)

[22:02] * azawawi prepares world domination plans for 2009 ;-)

[22:03] <[particle]> can't wait till christmas.

[22:03] <mberends> masak, crude Rakudo qx{} implementation: http://rafb.net/p/em5i8592.html

[22:04] *** rindolf left
[22:07] *** Exodist left
[22:07] *** Exodist joined
[22:08] *** cspencer left
[22:14] *** eric2561 joined
[22:14] * eric2561 hates his ISP

[22:14] <eric2561> arg how did i get a 1 on my name! ;)

[22:15] *** DemoFreak joined
[22:16] <mberends> eric256(1), an IRC client often renames you if it thinks your nick is already online, to preserve uniqueness

[22:25] *** maerzhase left
[22:27] <eric2561> evil ;)

[22:34] *** Ehtyar joined
[22:37] *** hanekomu_ joined
[22:38] <azawawi> @tell moritz_ Moose 0.64 is released. Can you install it on feather1 please?

[22:38] <lambdabot> Consider it noted.

[22:39] <azawawi> Not bad, Moose 0.64 on the last day of 2008

[22:39] <azawawi> # this fixes win32 installation problem for Class::MOP

[22:41] *** hanekomu_ left
[22:45] <masak> mberends: nice.

[22:46] <masak> mberends: but I agree getting rid of the tempfile would be an improvement.

[22:46] <azawawi> masak: hi

[22:47] <masak> azawawi: greetings, earthling.

[22:47] <azawawi> masak: 2009!

[22:47] * azawawi 2009++

[22:47] <masak> azawawi: we're still waiting for it here :)

[22:48] <masak> ten minutes left.

[22:48] <azawawi> it is the same ;-)

[22:48] <azawawi> we had it 48 mins ago

[22:48] <masak> rakudo: 2009++

[22:48] <p6eval> rakudo 34725: OUTPUT«Unable to set lvalue on PAST::Val node␤current instr.: 'parrot;PAST;Val;lvalue' pc 556 (src/PAST/Node.pir:161)␤»

[22:49] <masak> azawawi: I think you have to put 2009 in a scalar, and then ++ the scalar :P

[22:49] <azawawi> lol

[22:50] <azawawi> rakudo: year2009++;

[22:50] <p6eval> rakudo 34725: OUTPUT«Could not find non-existent sub year2009␤current instr.: '_block14' pc 48 (EVAL_12:36)␤»

[22:50] <azawawi> rakudo: $year2009++;

[22:50] <p6eval> rakudo 34725: OUTPUT«Scope not found for PAST::Var '$year2009'␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤»

[22:50] <azawawi> rakudo: my $year = 2008; $year++;

[22:50] <p6eval> rakudo 34725: RESULT«2008»

[22:50] <azawawi> rakudo: my $year = 2008; ++$year;

[22:50] <p6eval> rakudo 34725: RESULT«2009»

[22:51] * azawawi reads about upcoming netbooks chipsets...

[22:54] *** eric2562 joined
[22:56] <masak> akh. if I had thought of it earlier, I would have made a Rakudo script that animated fireworks...

[23:05] <Matt-W> masak: I can hear lots going off here, i don't think you need to simulate any more

[23:09] <eric2562> masak:  you still can i've got 8 more hours to go till 2009 ;)

[23:10] <azawawi> # 2008 is yesterday's news here ;-)

[23:12] *** eric2561 left
[23:13] <masak> eric2562: Iäll keep that in mind :)

[23:16] *** Exodist left
[23:18] <literal> eric2562: what do I do if I want to push to perl6-examples?

[23:18] <eric2562> hey literal

[23:18] <eric2562> did you fork it on git? or just download the public clone?

[23:18] *** lichtkind left
[23:20] *** smtms joined
[23:20] *** jhorwitz left
[23:21] *** justatheory joined
[23:21] <eric2562> btw i've got a perl script to autoamticaly add colatborators..just need somewhere to host it...might host it on feather, but i'm not sure how to do that without making my password just a weee bit too public ;)

[23:21] <eric2562> but i can add you as a collabotor and then you can push directly to the repo, or you can fork it and submit a pull request

[23:22] <Juerd> shutdown -r now "HAPPY NEW YEAR" ;)

[23:23] *** smtms left
[23:24] <vixey> man

[23:28] *** justatheory left
[23:28] <literal> eric2562: haven't done either

[23:29] <eric2562> literal: then the choice is up to you, if you wanna register i'd be happy to add you as a collaborator (i.e. get you a commit bit)

[23:31] *** eric2561 joined
[23:38] *** armagad joined
[23:41] <TimToady> ruoso: storing packages under "Foo::" key seems okay to me, though presumably one could also store it magically within the Foo protoobject somehow

[23:45] <ruoso> TimToady, well, it is... Foo.WHO

[23:46] <TimToady> presumably the long name has all the version numbers too...

[23:46] <ruoso> [particle], pugs/v6/mildew 

[23:46] <TimToady> either that, or Foo::Bar::baz can mean different things in different scopes

[23:46] <ruoso> that's how it's implemented in mildew now

[23:47] <ruoso> the package name is always a local alias

[23:47] <TimToady> sounds good

[23:49] *** eric2562 left
[23:49] <TimToady> for some reason it's really easy for me to fall into P5-Think now and then... :)

[23:49] <ruoso> ;)

[23:50] <ruoso> the parsing of "is export(:DEFAULT)" surprised me

[23:50] <TimToady> equiv to :export(:DEFAULT) really

[23:50] <ruoso> the part between the parenthesis is a statement

[23:50] <TimToady> indeed, and :DEFAULT is just a term

[23:51] <ruoso> can it be simplified?

[23:51] <ruoso> or at least can I treat it as if it could be simplified?

[23:51] <TimToady> do we want to disallow :export($?FOO) is the question...

[23:51] <TimToady> is export<foo bar> is possible

[23:52] <ruoso> are those equivalent: "is export(:DEFAULT)" and "is export<DEFAULT>" 

[23:52] <TimToady> some value in preserving the pair "look" for consistency though

[23:53] <TimToady> no, not semantically

[23:53] <TimToady> would be more like is export('DEFAULT')

[23:53] <ruoso> I see... but... 

[23:54] <ruoso> what would "is export('DEFAULT')" mean then

[23:54] <ruoso> ?

[23:55] <TimToady> presumably the trait still has to poke an alias into ::EXPORT::DEFAULT

[23:55] <TimToady> but traits are active, not passive, so doesn't seem like a big problem

[23:56] <ruoso> so, if the later parse easier, can I use it

[23:56] <ruoso> ?

[23:56] <TimToady> I need to glare at S11 a bit and think about it, but maybe

[23:57] <TimToady> might need to reserve bare names for something else like aliases though

[23:57] <ruoso> btw... this export tagsets need some clarification

[23:57] <TimToady> doesn't everything?

[23:57] <ruoso> heh

[23:59] <ruoso> "is export<DEFAULT>" has a much cleaner parsing

