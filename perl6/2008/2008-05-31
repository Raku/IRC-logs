[00:00] <TimToady> part of the bug backlog is because I've been out of town, and part because I've been refactoring the quoting parser to use parametric roles, so I didn't want to check in something completely inoperative

[00:00] <TimToady> I'm sure I wouldn't mind small fixes by other people as long as they merge well with my code :)

[00:01] <mncharity> :)  so backlog is a transient, rather than a focus shift?

[00:01] <TimToady> but I do expect the code to stabilize somewhat once I get the quoting sorted out

[00:01] <TimToady> and I do expect to have more time in the next few weeks

[00:01] <mncharity> ok.  quoting will be nifty.

[00:03] <mncharity> It's the   grep NONSPEC std.rb | wc #=> 62  which is getting painful.

[00:03] <TimToady> basically, the LTM works fine for derived grammars, but there were various spots in STD that should have used derived grammars that didn't

[00:03] <TimToady> quoting, regex, etc

[00:04] <TimToady> and certainly some of your NONSPEC is due to lack of LTM, isn't it?

[00:05] <TimToady> STD will not only be making LTM possible, but relying on it

[00:05] <TimToady> as it already does, which is why there's no longer <nofat>, for example

[00:06] *** cognominal_ left
[00:06] *** alanhaggai left
[00:06] <mncharity> re '﻿due to lack of LTM?', my impression is mostly not.  more that random language feature x isn't parsed by the existing rules.

[00:07] *** alanhaggai joined
[00:07] <TimToady> how easy would it be to generate a list of those?

[00:07] * mncharity looks...

[00:07] <TimToady> (I realize many of them have floated past here already... :)

[00:09] <Eevee> how exactly does {*} work

[00:09] <mncharity> http://colabti.org/irclogger/irclogger_log_search/perl6?search=TimToady%3A+%28&action=search&timespan=&text=checked

[00:09] <lambdabot> Title: #perl6 irc log search, http://tinyurl.com/63x8or

[00:09] <TimToady> as far as the parser is concerned, it's just a closure that executes *

[00:10] *** armagad_ left
[00:10] <TimToady> which does nothing

[00:10] <TimToady> however, the idea is that it's an easily recognizable nothing that you can attach various reduction hooks to via preprocessing

[00:11] *** braceta left
[00:11] <Eevee> oh dear

[00:11] <TimToady> so any given compiler is allowed to substitute other reduction actions at that point

[00:11] <TimToady> presumably keyed by the comment out to the right

[00:12] <TimToady> as an official side effect, it's also equivalent to :: in terminating the longest token

[00:12] <TimToady> though it doesn't affect backtracking as :: does

[00:13] <mncharity> The  "TimToady: (" irc comments were this month's series.  There's more in the NONSPEC lines of std.rb, and they tend to explain themselves, though some have already been incorporated in STD.pm.

[00:14] *** cognominal_ joined
[00:17] <TimToady> biab & # decommuting from $dayjob

[00:17] *** alanhaggai left
[00:18] *** alanhaggai joined
[00:18] * Eevee skims through S05

[00:24] <pugs_svnbot> r20598 | putter++ | [STD_red] Unbreak statement modifiers.  Eg, 'say 3 if 0'.

[00:34] *** alanhaggai left
[00:36] *** jjore is now known as zz_jjore

[00:36] *** zz_jjore is now known as jjore

[00:37] *** bacek__ joined
[00:37] *** jferrero left
[00:40] *** Southen left
[00:41] <mncharity> TimToady: (n+1) The current STD.pm's quote:rx using quotenibble doesn't seem to permit adverbial modifiers, eg, 's:P5///'.

[00:43] <TimToady> that's part of the refactor

[00:44] <Juerd> What's a quotenibble?

[00:45] <TimToady> look for user-defined quotes, then nibble the insides

[00:45] <TimToady> but in my copy it has worn down to "quibble"  :)

[00:45] <TimToady> and the modifiers like :P5 are handled by derivation: <quibble(Perl::Q.tweak(:qq).tweak($<quote_mod>))>

[00:46] <TimToady> well, :P5 would be based on regex language, not qq language, but same basic idea

[00:48] *** tiglionabbit joined
[00:49] <TimToady> dinner &

[00:59] <mncharity> ok.  look forward to it.

[01:01] * spinclad also looks forward to TT's dinner  # dinner:2nd(:courtesy($TT))

[01:06] *** cls_bsd left
[01:06] * mncharity just can bring himself to add the 700 lines of Class::Multimethods inline into EmitSimpleP5.pm.  not sure how to proceed...

[01:06] *** alanhaggai joined
[01:06] <mncharity> edit elsewhere... rewrite in mostly p6... ...?

[01:06] <mncharity> *can't

[01:08] <mncharity> If anyone has a good grasp of how p6 core oo works, I'd love to sketch a p6 oo on javascript architecture...

[01:08] *** simcop2387 joined
[01:09] <mncharity> aside from "it runs in peoples' browsers", js is also just about the only prototype-based oo language in widespread use, and thus perhaps a natural for supporting p6 oo.

[01:11] <Eevee> mm, still don't like having vars named $/ and $¢

[01:11] <Eevee> p6 oo on js would be interesting

[01:11] <mncharity> ruby is another candidate, but it has a nasty habit of "almost but not quite real" "it looks like x, but it's faked".

[01:12] <mncharity> * s//x looks like an object/

[01:15] <mncharity> re js interesting, indeed.  could be notably better than my current ruby generating js games.

[01:16] <mncharity> speaking of which...

[01:19] <tiglionabbit> how do you mean ruby fakes things?

[01:19] <tiglionabbit> like how it doesn't have attributes, but accessors look and act just like them?

[01:20] *** ron joined
[01:20] <mncharity> hmm... it's clear elf has insufficient visibility at present.  rouso's wiki pages speaking of using kp6, which would be clearly silly at this point...

[01:20] <ron> rakudo: my $a2 = 3; $a2++ *= 5; say $a2;

[01:20] <exp_evalbot> rakudo r27950 OUTPUT[4␤]

[01:21] <tiglionabbit> also I'm with vee about being careful about allowing operators in variable names -- that makes some special cases in the parser, right?  (then again, I guess it doesn't matter if it's no longer interpreted)

[01:21] <mncharity> STD_gray should probably stall, waiting for a STD.pm update and STD_red sync timesink...

[01:22] <Auzon> mncharity: I've been thinking about blogging about elf, and I'd send it to the SoC2008 planet. Maybe I can get it quoted on Perlbuzz too, if you're interested in some visibility.

[01:22] <mncharity> ﻿tiglionabbit: sorry, I overlooked your question, let's see...

[01:24] <mncharity> re '﻿how do you mean ruby fakes things?', eg, methods pretend to be objects, unless you try to use them in a not-common-case manner, at which point you find they are an object-like facade around a more limited C core construct.

[01:25] <tiglionabbit> I think I need an example to understand what you mean there

[01:26] <mncharity> Yeah.  Trying to remember an example.  When doing anything aggressive you tend to keep hitting them... let's see...

[01:26] <tiglionabbit> hehe, aggressive

[01:27] <tiglionabbit> I'm trying to remember if/how you can refer to methods without executing them

[01:27] *** ron left
[01:28] <mncharity> ﻿Auzon: re visibility, the difficulty is how to get p6 compiler writer types excited about it, without generating a lot of interest by other people, for whom it will clearly be a disappointment (at least until named arguments and user objects are working better).

[01:28] *** ron joined
[01:29] <tiglionabbit> then again you can always wrap stuff with lambda

[01:29] *** wknight8111 joined
[01:30] *** Caelum left
[01:30] *** Caelum joined
[01:30] <tiglionabbit> or use __send__ ...

[01:30] <tiglionabbit> huh

[01:30] <tiglionabbit> funny how I didn't think about this when I was using ruby

[01:30] <mncharity> p6 has such noxious history out of parrot of saying things work when they don't, at least around Boston.pm and a few other samples, the primary characteristic of attitudes towards p6, is "I'll believe that bogus thing works when I actually see it".  So expectation management seems at this point critically important.

[01:30] *** cognominal_ left
[01:31] *** alanhaggai left
[01:31] <Auzon> I see.

[01:31] *** alanhaggai joined
[01:32] <mncharity> soo... not sure how to deal with that.

[01:32] <tiglionabbit> make stone soup

[01:32] *** cognominal_ joined
[01:32] <tiglionabbit> make it work but be crappy and slow, then get people excited enough to fix it up

[01:34] <mncharity> ﻿tiglionabbit: re slow, we've tried that... didn't work, people got burned out on it.

[01:34] <tiglionabbit> hm?

[01:35] <tiglionabbit> what do you mean?

[01:36] <mncharity> kp6 was another p6 implementation.  it was slow.  that seemed a key aspect of peoples' individual decisions to cease working on it.

[01:37] *** alanhaggai left
[01:37] <tiglionabbit> yeah but parrot has something else going for it, right?  The common language interface?

[01:37] *** alanhaggai joined
[01:38] <tiglionabbit> you just have to market it as tracer bullets.  Like, "We used some stupid solutions in various places.  Now good compiler designers can help us make it better"

[01:39] <tiglionabbit> it's not alive until it works

[01:39] <wknight8111> good compiler designers are key

[01:40] <tiglionabbit> why would people abandon kp6 for this, anyway?

[01:40] <tiglionabbit> other than the cli

[01:40] *** braceta joined
[01:41] <tiglionabbit> (for parrot I mean)

[01:42] <mncharity> re '﻿refer to methods without executing them', http://ruby-doc.org/core-1.9/classes/Module.html#M001273 , Method, etc.

[01:42] <lambdabot> Title: Class: Module

[01:44] <tiglionabbit> instance_method(symbol) okay

[01:44] <tiglionabbit> .bind(object).call ?

[01:44] <tiglionabbit> a bit obtuse, but oh well

[01:46] *** pmichaud left
[01:46] *** pmichaud joined
[01:47] <mncharity> ﻿Auzon: sooo.... not sure what to do.

[01:47] <mncharity> but end of day for me.

[01:47] <mncharity> good night all &

[01:47] *** mncharity left
[01:50] *** Caelum_ joined
[01:50] <tiglionabbit> I am kind of worried that the project is named after the dead parrot skit

[01:50] *** Caelum left
[01:50] *** wknight8111 left
[01:53] *** edpratomo joined
[01:59] *** alanhaggai left
[01:59] *** alanhaggai joined
[02:02] *** ron left
[02:03] <japhb> tiglionabbit: Parrot is not named after the python sketch, though of course that reference gets used at times.  It's named after an April Fool's joke.

[02:06] <tiglionabbit> I see

[02:06] *** Caelum_ is now known as Caelum

[02:06] <tiglionabbit> hahah, like how people like to put out virus alerts about viruses that don't exist yet so no one will suspect when they actually make the virus

[02:16] *** cls_bsd joined
[02:26] *** edpratomo left
[02:27] *** nipotan is now known as nipotaway

[02:29] *** pmichaud left
[02:30] *** pmichaud joined
[02:38] *** alanhaggai left
[02:40] <Khisanth> japhb: a joke gone bad seems worse :)

[02:43] <japhb> Khisanth: Parrot?  I think of it as the joke that made good.  :-)

[02:46] <Auzon> pugs: class Test {method Str {"qwerty"}}

[02:46] <exp_evalbot> RESULT[\method :($__SELF__ is rw is ref, @_, %_) "$_" := "Scalar" #<Scalar:0xb7b28354>␤                                         "@_" := "Array" #<Array:0xb7228d28>␤                                         "%_" := "Hash" #<Hash:0xb7b2835c>␤                                         "&?ROUTINE" :=

[02:46] <exp_evalbot> .."Sub" #<Sub:0xb6604cec>␤                            ...

[02:46] <Auzon> pugs: class Test {method Str {"qwerty"}}; my $t = Test.new; say ~$t;

[02:46] <exp_evalbot> OUTPUT[<obj:Test>␤]

[02:46] <Auzon> pugs: class Test {multi prefix:<~> is deep {"qwerty"}}; my $t = Test.new; say ~$t;

[02:46] <exp_evalbot> OUTPUT[<obj:Test>␤]

[02:47] <Auzon> pugs: class Test {multi prefix:<~> {"qwerty"}}; my $t = Test.new; say ~$t;

[02:47] <exp_evalbot> OUTPUT[<obj:Test>␤]

[02:52] *** justatheory left
[03:03] *** kanru left
[03:03] *** FurnaceBoy left
[03:04] *** elmex_ joined
[03:07] *** elmex_ left
[03:18] *** elmex left
[03:18] *** justatheory joined
[03:20] <Auzon> pugs: say 1_000

[03:20] <exp_evalbot> OUTPUT[1000␤]

[03:20] <Auzon> pugs: say 1_0_0_0_000

[03:20] <exp_evalbot> OUTPUT[1000000␤]

[03:26] <Auzon> TimToady: I don't see _ as a numeric separator mentioned in the spec explicitly, though it is used in the versioning comparison part of S02 (right before the heading "Context"). Is it still valid?

[03:27] <Eevee> could swear I've seen that in the spec somewhere

[03:29] <Eevee> http://perlcabal.org/syn/S02.html#Literals

[03:29] <lambdabot> Title: S02

[03:29] <Eevee> A single underscore is allowed only between any two digits in a literal number, where the definition of digit depends on the radix.

[03:29] <Auzon> doh. Sorry TimToady

[03:33] <pmichaud> @tell TimToady   where is 'does' parsed, as in "class ABC does XYZ { ... }"  ?

[03:33] <lambdabot> Consider it noted.

[03:34] <Eevee> how will the grammar handle lexically-scoped custom operators?

[03:36] <pmichaud> operators are just subs

[03:36] <pmichaud> so it's the same as lexically-scoped subs

[03:36] <pmichaud> operators just have a funny name.

[03:37] <Eevee> except sub names don't tend to be stuck together with no intermediate illegal character

[03:38] <pmichaud> all characters are legal in sub names :-)

[03:38] <Eevee> well okay yes, but not bare  :P

[03:38] <audreyt> pmichaud: "does" is parsed as trait_auxiliary, mentioned around S12:1436 (or did I miss what you were asking about?)

[03:38] <pmichaud> audreyt: I meant in STD.pm

[03:39] *** pbuetow_ joined
[03:39] <audreyt> it should be under rule trait_auxiliary:will in line 2607

[03:39] <audreyt> but it's probably just missing?

[03:39] <pmichaud> yes, I think it's missing.

[03:39] <pmichaud> thanks.

[03:39] <audreyt> or maybe it falls under the general (no special rule needed) trait_auxiliary rule

[03:40] <audreyt> line 335ish. not sure

[03:40] <pmichaud> hmmmmm

[03:40] <audreyt> i.e. it's parsed because it's defined in the symtable under the t_a categ

[03:40] <audreyt> instead of needing a special rule.

[03:40] <pmichaud> right.

[03:42] <pmichaud> seems like we should have a trait_auxiliary:general rule somewhere in STD.pm then

[03:42] <pmichaud> but you answered my question, thanks.

[03:46] *** fridim_ joined
[03:48] *** cognominal__ joined
[03:49] *** pbuetow left
[03:57] *** cognominal_ left
[04:03] *** braceta left
[04:06] *** alanhaggai joined
[04:07] <spinclad> {audreyt! wb!}.trigger

[04:08] *** eternaleye joined
[04:32] *** kanru joined
[04:55] *** pbuetow_ left
[05:17] *** justatheory left
[05:27] *** ikeda joined
[05:30] *** garnm joined
[05:42] *** ikeda_ joined
[05:44] *** fridim_ left
[05:51] *** ikeda left
[05:58] *** ikeda joined
[06:02] *** ikeda_ left
[06:13] *** ikeda_ joined
[06:23] *** ikeda left
[06:34] *** ikeda_ left
[06:38] *** alanhaggai left
[06:44] *** ikeda joined
[06:50] *** bnjmn-- joined
[06:54] *** meppl joined
[07:01] *** ikeda_ joined
[07:03] *** cognominal__ left
[07:07] *** bnjmn- left
[07:07] *** bnjmn-- is now known as bnjmn-

[07:13] *** ikeda left
[07:15] *** lisppaste3 left
[07:16] *** tiglionabbit left
[07:17] *** Ched- joined
[07:19] *** ikeda_ left
[07:22] *** meppl left
[07:24] *** meppl joined
[07:32] *** ikeda joined
[07:37] *** lisppaste3 joined
[07:47] *** ikeda_ joined
[07:51] *** ikeda left
[07:51] *** ikeda joined
[07:52] *** ikeda_ left
[08:06] *** cognominal_ joined
[08:07] *** ikeda_ joined
[08:08] *** ikeda left
[08:10] *** ikeda joined
[08:11] *** ikeda left
[08:13] *** iblechbot joined
[08:31] *** ikeda_ left
[08:50] *** schmalbe joined
[08:50] *** bacek__ left
[08:51] *** bacek__ joined
[08:52] *** dolmen joined
[08:57] <dolmen> perl6: say "Salut, les potes!!";

[08:57] <exp_evalbot> kp6 r20598: OUTPUT[Salut, les potes!!␤]

[08:57] <exp_evalbot> ..pugs: OUTPUT[Salut, les potes!!␤]

[08:57] <exp_evalbot> ..rakudo r27957: OUTPUT[Salut, les potes!!␤]

[08:57] <exp_evalbot> ..elf r20598: OUTPUT[Salut, les potes!!␤]

[08:58] <dolmen> perl6: say <1 2 3>.perl;

[08:58] <exp_evalbot> kp6 r20598: OUTPUT[( '1', '2', '3' )␤]

[08:58] <exp_evalbot> ..pugs: OUTPUT[("1", "2", "3")␤]

[08:58] <exp_evalbot> ..rakudo r27957: OUTPUT[["1", "2", "3"]␤]

[08:58] <exp_evalbot> ..elf r20598: OUTPUT[["1","2","3"]␤]

[09:08] <dolmen> perl6: say (1^..3).perl;

[09:08] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 4, line 1 column 4:␤say (1^..3).perl␤    ^ HERE␤]

[09:08] <exp_evalbot> ..pugs: OUTPUT[(2, 3)␤]

[09:08] <exp_evalbot> ..rakudo r27957: OUTPUT[Could not invoke non-existent sub infix:^..␤current instr.: '_block11' pc 35 (EVAL_11:19)␤

[09:08] <exp_evalbot> ..elf r20598: OUTPUT[syntax error at (eval 14) line 3, near "^.."␤ at ./elf_f_faster line 4492␤]

[09:10] <dolmen> elf?

[09:10] <cognominal_> comment allez vous yau de poele?

[09:10] <dolmen> ;)

[09:15] *** lg joined
[09:16] <lg> perl6 say hello

[09:16] <lg> perl6 say 'hello';

[09:16] <lg> perlbot say 'hello';

[09:16] <lg> perlbot: say 'hello';

[09:16] <lg> perl6: say 'hello';

[09:17] <exp_evalbot> kp6 r20598: OUTPUT[hello␤]

[09:17] <exp_evalbot> ..pugs: OUTPUT[hello␤]

[09:17] <exp_evalbot> ..rakudo r27957: OUTPUT[hello␤]

[09:17] <exp_evalbot> ..elf r20598: OUTPUT[hello␤]

[09:17] <dolmen> perl6: say (1^..3).perl;

[09:17] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 4, line 1 column 4:␤say (1^..3).perl␤    ^ HERE␤]

[09:17] <exp_evalbot> ..pugs: OUTPUT[(2, 3)␤]

[09:17] <exp_evalbot> ..rakudo r27957: OUTPUT[Could not invoke non-existent sub infix:^..␤current instr.: '_block11' pc 35 (EVAL_11:19)␤

[09:17] <exp_evalbot> ..elf r20598: OUTPUT[syntax error at (eval 14) line 3, near "^.."␤ at ./elf_f_faster line 4492␤]

[09:17] <dolmen> perl6: say (1..3).perl;

[09:17] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 4, line 1 column 4:␤say (1..3).perl␤    ^ HERE␤]

[09:17] <exp_evalbot> ..pugs: OUTPUT[(1, 2, 3)␤]

[09:17] <exp_evalbot> ..rakudo r27957: OUTPUT[[1, 2, 3]␤]

[09:17] <exp_evalbot> ..elf r20598: OUTPUT[Use of uninitialized value in range (or flip) at (eval 14) line 3.␤""␤]

[09:18] <dolmen> perl6: say (1..3).WHAT;

[09:18] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 4, line 1 column 4:␤say (1..3).WHAT␤    ^ HERE␤]

[09:18] <exp_evalbot> ..pugs: OUTPUT[Array␤]

[09:18] <exp_evalbot> ..rakudo r27957: OUTPUT[List␤]

[09:18] <exp_evalbot> ..elf r20598: OUTPUT[Use of uninitialized value in range (or flip) at (eval 14) line 3.␤Str␤]

[09:22] <dolmen> perl6: say 1..3 xx 2;

[09:22] <lg> perl6: my @stuff=1,2,4,foo;say @stuff[3]

[09:22] <lg> perl6: my @stuff=1,2,4,foo;say @stuff[3]

[09:22] *** exp_evalbot joined
[09:22] <dolmen> perl6: say (1..3 xx 2).perl;

[09:22] <lg> perl6: my @stuff=1,2,4,foo;say @stuff[3]

[09:22] *** exp_evalbot left
[09:22] *** exp_evalbot joined
[09:22] <lg> perl6: my @stuff=1,2,4,foo;say @stuff[3]

[09:22] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 11, line 1 column 11:␤my @stuff=1,2,4,foo;say @stuff[3␤           ^ HERE␤]

[09:22] <exp_evalbot> ..pugs: OUTPUT[*** No such subroutine: "&foo"␤    at /tmp/cbQGmKGN2b line 1, column 17-20␤]

[09:22] <exp_evalbot> ..rakudo r27957: OUTPUT[Could not invoke non-existent sub foo␤current instr.: '_block11' pc 42 (EVAL_11:23)␤

[09:22] <exp_evalbot> ..elf r20598: OUTPUT[Undefined subroutine &GLOBAL::foo called at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[09:23] <lg> perl6: my @stuff=1,2,4,'foo';say @stuff[3]

[09:23] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 11, line 1 column 11:␤my @stuff=1,2,4,'foo';say @stuff[3␤           ^ HERE␤]

[09:23] <exp_evalbot> ..pugs: OUTPUT[foo␤]

[09:23] <exp_evalbot> ..rakudo r27957: OUTPUT[foo␤]

[09:23] <exp_evalbot> ..elf r20598: OUTPUT[foo␤]

[09:25] *** Lorn left
[09:28] *** edpratomo joined
[09:29] <dolmen> perl6: class Toto { has $name; }

[09:30] <exp_evalbot> kp6 r20598: RESULT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824be04)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[09:30] <exp_evalbot> ..main::DISPATCH('HASH(0x824be04)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[09:30] <exp_evalbot> ..pugs: RESULT[undef]

[09:30] <exp_evalbot> ..rakudo r27957: RESULT[Method 'perl' not found for invocant of class 'Sub'␤current instr.: '_block11' pc 38 (EVAL_11:18)␤

[09:30] <exp_evalbot> ..elf r20598: RESULT[undef␤]

[09:30] <dolmen> perl6: class Toto { has $name; } say "Hello";

[09:30] <exp_evalbot> kp6 r20598: OUTPUT[Hello␤]

[09:30] <exp_evalbot> ..pugs: OUTPUT[Hello␤]

[09:30] <exp_evalbot> ..rakudo r27957: OUTPUT[Statement not terminated properly at line 1, near "say \"Hello"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:30] <exp_evalbot> ..elf r20598: OUTPUT[Parse error in: /tmp/RApF9p0jBM␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: class Toto { has $name; } say ␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[09:30] <exp_evalbot> ..STD_red/std.rb:210:in `_UNIT'␤  ./../STD_red/STD_red_run:108:in `...

[09:31] *** chris2 joined
[09:31] <dolmen> perl6: class Toto { has $.name; } say "Hello";

[09:32] <exp_evalbot> kp6 r20598: OUTPUT[Hello␤]

[09:32] <exp_evalbot> ..pugs: OUTPUT[Hello␤]

[09:32] <exp_evalbot> ..rakudo r27957: OUTPUT[Statement not terminated properly at line 1, near "say \"Hello"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:32] <exp_evalbot> ..elf r20598: OUTPUT[Parse error in: /tmp/ueGJQGwME9␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: class Toto { has $.name; } say␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[09:32] <exp_evalbot> ..STD_red/std.rb:210:in `_UNIT'␤  ./../STD_red/STD_red_run:108:in `...

[09:32] <dolmen> perl6: class Toto { has $.name; }; say "Hello";

[09:32] <exp_evalbot> kp6 r20598: OUTPUT[Hello␤]

[09:32] <exp_evalbot> ..pugs: OUTPUT[Hello␤]

[09:32] <exp_evalbot> ..rakudo r27957: OUTPUT[Hello␤]

[09:32] <exp_evalbot> ..elf r20598: OUTPUT[Hello␤]

[09:32] *** lisppaste3 left
[09:37] <dolmen> perl6: class Student { has $.name; }.new( name => 'Toto');

[09:37] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 29, line 1 column 29:␤class Student { has $.name; }.new( name => 'Toto')␤                             ^ HERE␤]

[09:37] <exp_evalbot> ..pugs: RESULT[Scalar.new(("name" => "Toto"),)]

[09:37] <exp_evalbot> ..rakudo r27957: OUTPUT[Statement not terminated properly at line 1, near ".new( name"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:37] <exp_evalbot> ..elf r20598: OUTPUT[Parse error in: /tmp/fWeD1io3iO␤panic at line 1 column 29 (pos 29): Statement not terminated properly␤WHERE: class Student { has $.name; }.new( name => 'Toto');␤WHERE:                             /\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:355:in

[09:37] <exp_evalbot> ..`eat_terminator'␤  STD_red/std.rb:269:in `block in statementlist'␤  STD_re...

[09:37] <dolmen> perl6: say class Student { has $.name; }.new( name => 'Toto' ).perl;

[09:37] <exp_evalbot> kp6 r20598: OUTPUT[DISPATCH: calling HASH(0x8e52364) on invalid object:$VAR1 = 'new';␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤     main::DISPATCH('new', 'HASH(0x8e52364)') called at - line 14␤]

[09:37] <exp_evalbot> ..pugs: OUTPUT[pugs: *** Can't modify constant item: VUndef␤    at /tmp/ACdcNXZnBc line 1, column 1␤]

[09:37] <exp_evalbot> ..rakudo r27957: OUTPUT[Statement not terminated properly at line 1, near ".new( name"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:37] <exp_evalbot> ..elf r20598: OUTPUT[Parse error in: /tmp/8eVeyGwezi␤panic at line 1 column 33 (pos 33): Statement not terminated properly␤WHERE:  class Student { has $.name; }.new( name => 'Toto' ).perl;␤WHERE:                              /\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:355:in

[09:38] <exp_evalbot> ..`eat_terminator'␤  STD_red/std.rb:269:in `block in statementlist'␤...

[09:38] <dolmen> perl6: say class { has $.name; }.new( name => 'Toto' ).perl;

[09:38] <exp_evalbot> kp6 r20598: OUTPUT[DISPATCH: calling HASH(0x8e53388) on invalid object:$VAR1 = 'new';␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤     main::DISPATCH('new', 'HASH(0x8e53388)') called at - line 13␤]

[09:38] <exp_evalbot> ..pugs: OUTPUT[pugs: *** Can't modify constant item: VUndef␤    at /tmp/MhIKvBsKgW line 1, column 1␤]

[09:38] <exp_evalbot> ..rakudo r27957: OUTPUT[attempt to define attribute '' outside of class at line 1, near "; }.new( n"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:38] <exp_evalbot> ..elf r20598: OUTPUT[Parse error in: /tmp/1E81VG1WFB␤panic at line 1 column 25 (pos 25): Statement not terminated properly␤WHERE: say class { has $.name; }.new( name => 'Toto' ).perl;␤WHERE:                         /\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:355:in

[09:38] <exp_evalbot> ..`eat_terminator'␤  STD_red/std.rb:269:in `block in statementlist'␤  STD_red/...

[09:51] <dolmen> perl6: sub noop { ; } ; say noop.perl;

[09:51] <exp_evalbot> kp6 r20598: OUTPUT[error in Block at compiled/perl5-kp6-mp6/lib/KindaPerl6/Grammar/Sub.pm line 362, <> line 1.␤*** Syntax Error in sub '': missing closing curly bracket ␤]

[09:51] <exp_evalbot> ..pugs: OUTPUT[undef␤]

[09:51] <exp_evalbot> ..rakudo r27957: OUTPUT[Missing '}' at line 1, near "; } ; say "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:51] <exp_evalbot> ..elf r20598: OUTPUT[Use of uninitialized value in join or string at ./elf_f_faster line 159.␤undef␤]

[09:52] <dolmen> perl6: sub noop {  } ; say noop.perl;

[09:52] <exp_evalbot> kp6 r20598: OUTPUT[DISPATCH: calling perl on invalid object:$VAR1 = undef;␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤        main::DISPATCH('undef', 'perl') called at - line 24␤]

[09:52] <exp_evalbot> ..pugs: OUTPUT[undef␤]

[09:52] <exp_evalbot> ..rakudo r27957: OUTPUT[Statement not terminated properly at line 1, near ".perl;"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:52] <exp_evalbot> ..elf r20598: OUTPUT[undef␤]

[09:53] <lg> perl6: class Glass { has $content=0; method fill { $content++ }; method empty {$content--}}; class Pint is a Glass {}

[09:53] *** exp_evalbot left
[09:53] *** exp_evalbot joined
[09:53] <dolmen> perl6: sub noop {  } ; say noop().perl;

[09:53] <exp_evalbot> kp6 r20598: OUTPUT[DISPATCH: calling perl on invalid object:$VAR1 = 0;␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤    main::DISPATCH(0, 'perl') called at - line 24␤]

[09:53] <exp_evalbot> ..pugs: OUTPUT[undef␤]

[09:53] <exp_evalbot> ..rakudo r27957: OUTPUT[Null PMC access in find_method()␤current instr.: '_block11' pc 35 (EVAL_10:16)␤

[09:53] <exp_evalbot> ..elf r20598: OUTPUT[undef␤]

[09:54] <dolmen> perl6: say (1..2).json;

[09:54] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 4, line 1 column 4:␤say (1..2).json␤    ^ HERE␤]

[09:54] <exp_evalbot> ..pugs: OUTPUT[*** No such method in class Array: "&json"␤    at /tmp/1utekgeVTE line 1, column 5-16␤]

[09:54] <exp_evalbot> ..rakudo r27957: OUTPUT[Method 'json' not found for invocant of class 'List'␤current instr.: '_block11' pc 49 (EVAL_13:20)␤

[09:54] <exp_evalbot> ..elf r20598: OUTPUT[Use of uninitialized value in range (or flip) at (eval 14) line 3.␤Can't call method "json" without a package or object reference at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[09:55] *** lisppaste3 joined
[09:59] <lg> perl6: say 'hi folks'.WHAT

[09:59] <exp_evalbot> kp6 r20598: OUTPUT[Str␤]

[09:59] <exp_evalbot> ..pugs: OUTPUT[Str␤]

[09:59] <exp_evalbot> ..rakudo r27957: OUTPUT[Str␤]

[09:59] <exp_evalbot> ..elf r20598: OUTPUT[Str␤]

[10:00] <lg> perl6: say Pari.WHAT

[10:00] <exp_evalbot> kp6 r20598: OUTPUT[DISPATCH: calling WHAT on invalid object:$VAR1 = undef;␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤        main::DISPATCH('undef', 'WHAT') called at - line 11␤]

[10:00] <exp_evalbot> ..pugs: OUTPUT[*** No such subroutine: "&Pari"␤    at /tmp/OCvysJRYjm line 1, column 5 - line 2, column 1␤]

[10:00] <exp_evalbot> ..rakudo r27957: OUTPUT[Null PMC access in find_method()␤current instr.: '_block11' pc 28 (EVAL_11:16)␤

[10:00] <exp_evalbot> ..elf r20598: OUTPUT[STRING␤]

[10:00] <dolmen> perl6: say Int.WHAT

[10:00] <exp_evalbot> kp6 r20598: OUTPUT[Int␤]

[10:00] <exp_evalbot> ..pugs: OUTPUT[Int␤]

[10:00] <exp_evalbot> ..rakudo r27957: OUTPUT[Int␤]

[10:00] <exp_evalbot> ..elf r20598: OUTPUT[STRING␤]

[10:00] <dolmen> perl6: say Num.WHAT

[10:00] <exp_evalbot> kp6 r20598: OUTPUT[Num␤]

[10:00] <exp_evalbot> ..pugs: OUTPUT[Num␤]

[10:00] <exp_evalbot> ..rakudo r27957: OUTPUT[Num␤]

[10:00] <exp_evalbot> ..elf r20598: OUTPUT[STRING␤]

[10:00] <lg> perl6: say Pair.WHAT

[10:00] <exp_evalbot> kp6 r20598: OUTPUT[Pair␤]

[10:00] <exp_evalbot> ..pugs: OUTPUT[Pair␤]

[10:00] <exp_evalbot> ..rakudo r27957: OUTPUT[Pair␤]

[10:00] <exp_evalbot> ..elf r20598: OUTPUT[STRING␤]

[10:03] *** edpratomo left
[10:03] <dolmen> perl6: say Role.WHAT

[10:03] <exp_evalbot> kp6 r20598: OUTPUT[Class␤]

[10:03] <exp_evalbot> ..pugs: OUTPUT[Role␤]

[10:03] <exp_evalbot> ..rakudo r27957: OUTPUT[./parrot: error while loading shared libraries: /home/evalenv/parrot/blib/lib/libparrot.so.0.6.2: invalid ELF header␤]

[10:03] <exp_evalbot> ..elf r20598: OUTPUT[STRING␤]

[10:03] <cognominal_> perl6: say hash( a =>1, :b<2>, c(3), :d, :!e )

[10:04] <dolmen> perl6: say Class.WHAT

[10:04] <exp_evalbot> kp6 r20598: OUTPUT[syntax error at position 8, line 1 column 8:␤say hash( a =>1, :b<2>, c(3), :d, :!e ␤        ^ HERE␤]

[10:04] <exp_evalbot> ..pugs: OUTPUT[*** No such subroutine: "&c"␤    at /tmp/rDm19B1sAv line 1, column 25-29␤]

[10:04] <exp_evalbot> ..rakudo r27957: OUTPUT[Could not invoke non-existent sub c␤current instr.: '_block11' pc 40 (EVAL_11:21)␤

[10:04] <exp_evalbot> ..elf r20598: OUTPUT[Undefined subroutine &GLOBAL::c called at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[10:04] <exp_evalbot> kp6 r20598: OUTPUT[Class␤]

[10:04] <exp_evalbot> ..pugs: OUTPUT[Class␤]

[10:04] <exp_evalbot> ..rakudo r27957: OUTPUT[Null PMC access in find_method()␤current instr.: 'parrot;P6object;WHAT' pc 107 (runtime/parrot/library/P6object.pir:123)␤

[10:04] <exp_evalbot> ..elf r20598: OUTPUT[STRING␤]

[10:05] <cognominal_> perl6: say hash( a =>1, :b<2>, :c(3), :d, :!e )

[10:05] *** exp_evalbot left
[10:05] <dolmen> il n'a pas aimé

[10:05] *** exp_evalbot joined
[10:05] <cognominal_> rakudo: say hash( a =>1, :b<2>, :c(3), :d, :!e )

[10:05] *** exp_evalbot left
[10:06] *** exp_evalbot joined
[10:06] <pmichaud> rakudo doesn't like that?  I'm a bit surprised.

[10:06] <dolmen> rakudo svn is currently broken

[10:06] <cognominal_> it works on my computer, that's rakudo from Friday morning

[10:07] <pmichaud> wow, that's old.

[10:07] <cognominal_> I mean the rakudo of Friday works well for that statement

[10:07] <pmichaud> right.

[10:07] <dolmen> current rev 27957 is broken

[10:07] <cognominal_> jonathan talks is going well

[10:07] <pmichaud> jonathan++

[10:07] <pmichaud> wish I was there.

[10:08] <cognominal_> jaws are dropping on the power of rakudo

[10:08] <pmichaud> is it rakudo or Perl 6 that jaws are dropping for?  ;-)

[10:08] <dolmen> Class 'Perl6Array' already registered!

[10:08] <cognominal_> he is demonstrating live

[10:08] <cognominal_> hopeful on a buid that works

[10:08] <dolmen> jonathan++

[10:10] <cognominal_> I did yesterday a live presentation on pct doing a simple grammar (no code generation), and that was fun

[10:10] <pmichaud> yes, pct is fun also.

[10:10] <cognominal_> Francois Perrad was there to help me to fix my mistakes

[10:10] <dolmen> pmichaud: sorry, make clean && make fixed the error 

[10:10] <pmichaud> dolmen: Whew!

[10:11] <dolmen> perl6: say True.WHAT;

[10:11] <exp_evalbot> kp6 r20598: OUTPUT[DISPATCH: calling WHAT on invalid object:$VAR1 = undef;␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤        main::DISPATCH('undef', 'WHAT') called at - line 11␤]

[10:11] <exp_evalbot> ..pugs: OUTPUT[Bool␤]

[10:11] <exp_evalbot> ..rakudo r27957: OUTPUT[Int␤]

[10:11] <exp_evalbot> ..elf r20598: OUTPUT[STRING␤]

[10:11] <dolmen> so, Bool or Int ?

[10:12] <pmichaud> S12 says:

[10:12] <pmichaud> Two built-in enums are:

[10:12] <pmichaud> our bit enum *bool <False True>; our bit enum *taint <Untainted Tainted>;

[10:12] <cognominal_> dolmen, I suppose that Bool is a subset of int

[10:12] <pmichaud> so that implies to me that True is a bit

[10:13] <dolmen> say (1 + (1 | 2)).perl;

[10:13] <dolmen> perl6: say (1 + (1 | 2)).perl;

[10:13] <exp_evalbot> kp6 r20598: OUTPUT[2␤3␤]

[10:13] <exp_evalbot> ..pugs: OUTPUT[(2 | 3)␤]

[10:13] <exp_evalbot> ..rakudo r27957: OUTPUT[any("2", "3")␤]

[10:13] <exp_evalbot> ..elf r20598: OUTPUT[4␤]

[10:14] <cognominal_> jonathan is localizing the example in his presentation.

[10:14] <dolmen> a stringification occured...

[10:14] <pmichaud> localizing?

[10:14] <cognominal_> I gave him a very bad pun

[10:14] <pmichaud> ahhhhh

[10:15] <cognominal_> yesterday he was telling me about him presenting some slide titled "No more SM"

[10:16] <cognominal_> about perl5  m//sm

[10:16] <cognominal_> so I did the same with a dominatrix picture

[10:25] <lg> perl6: say (1 + ((1|3) | 2)).perl

[10:25] <exp_evalbot> kp6 r20598: OUTPUT[2␤3␤4␤3␤]

[10:25] <exp_evalbot> ..pugs: OUTPUT[(2 | 3 | 4)␤]

[10:25] <exp_evalbot> ..rakudo r27960: OUTPUT[get_string() not implemented in class 'Junction'␤current instr.: 'infix_junction_helper' pc 6230 (src/gen_builtins.pir:4216)␤

[10:25] <exp_evalbot> ..elf r20598: OUTPUT[4␤]

[10:26] *** wknight8111 joined
[10:29] <lg> perl6: say (1 + (1|3 | 2)).perl

[10:29] <exp_evalbot> kp6 r20598: OUTPUT[2␤4␤2␤3␤]

[10:29] <exp_evalbot> ..pugs: OUTPUT[(2 | 3 | 4)␤]

[10:29] <exp_evalbot> ..rakudo r27960: OUTPUT[any("2", "4", "3")␤]

[10:29] <exp_evalbot> ..elf r20598: OUTPUT[4␤]

[10:30] *** cognominal_ left
[10:30] <lg> perl6: say ( (1|3 | 2)).perl

[10:30] <exp_evalbot> kp6 r20598: OUTPUT[1␤3␤1␤2␤]

[10:30] <exp_evalbot> ..pugs: OUTPUT[(1 | 2 | 3)␤]

[10:30] <exp_evalbot> ..rakudo r27960: OUTPUT[any(1, 3, 2)␤]

[10:30] <exp_evalbot> ..elf r20598: OUTPUT[3␤]

[10:31] <lg> perl6: say (1 + (1|3 | 2)).perl

[10:31] <exp_evalbot> kp6 r20598: OUTPUT[2␤4␤2␤3␤]

[10:31] <exp_evalbot> ..pugs: OUTPUT[(2 | 3 | 4)␤]

[10:31] <exp_evalbot> ..rakudo r27960: OUTPUT[any("2", "4", "3")␤]

[10:31] <exp_evalbot> ..elf r20598: OUTPUT[4␤]

[10:33] <dolmen> time for lunch...

[10:33] *** dolmen left
[10:52] *** alanhaggai joined
[10:55] *** masak joined
[11:17] *** alanhaggai left
[11:28] *** iblechbot left
[11:30] *** pbuetow joined
[11:43] <Juerd> Maybe this is a silly idea, but I find myself typing this a lot:

[11:43] <Juerd> return "foo bar baz" if -e "foo bar baz";

[11:44] <Juerd> Would be neat if you could write that as:

[11:44] <Juerd> return that if -e "foo bar baz";

[11:44] <Juerd> if -e "foo bar baz" { return that }

[11:44] <masak> Juerd: what about `return $_ if -e $_ for 'foo bar baz'`?

[11:44] <Juerd> Works but looks /worse/ than what I have no.

[11:45] <masak> hm

[11:45] <Juerd> s/no/now/

[11:45] <masak> so 'that' is the last thing sent in as a first argument to a function?

[11:46] <Juerd> Yep

[11:46] <Juerd> It would not be a variable.

[11:46] <masak> of course not. variables have sigils :)

[11:46] <Juerd> Well, in Perl 6 perhaps a twigil might make sense

[11:46] *** cognominal_ joined
[11:47] <Juerd> But I was thinking of "that" as a construct with very limited visibility.

[11:47] <Juerd> For all I care, it's just a macro that somehow knows the previous expression and evaluates it again.

[11:48] <wolverian> that sounds like a race condition anyway :)

[11:48] <Juerd> It is.

[11:48] <Juerd> But there's no way to prevent the race condition with these kinds of things *anyway*

[11:48] <Juerd> So adding another race doesn't bother me much.

[11:48] <Juerd> Anyway, I'm not sure if this is implementable at all. It has all the ingredients of $& to be scary.

[11:51] *** alanhaggai joined
[12:08] *** wknight8111 left
[12:09] *** pbuetow left
[12:12] *** gbacon left
[12:20] *** iblechbot joined
[12:22] *** IllvilJa left
[12:43] *** Blasi joined
[12:46] *** cognominal_ left
[12:55] *** dolmen joined
[12:57] *** cognominal_ joined
[13:02] *** lisppaste3 left
[13:02] *** meppl left
[13:04] *** dolmen left
[13:05] *** ron joined
[13:07] *** schmalbe left
[13:11] *** chris2 left
[13:12] *** lisppaste3 joined
[13:14] *** pbuetow joined
[13:15] *** meppl joined
[13:16] *** alanhaggai_ joined
[13:18] *** IllvilJa joined
[13:32] *** alanhaggai left
[13:43] <pmichaud> given 'foo bar baz' { -e $_ && return $_ }

[13:46] <pmichaud> "jaws are dropping"  :-)

[14:02] *** gbacon joined
[14:02] *** alanhaggai_ left
[14:17] *** wknight8111 joined
[14:33] *** alanhaggai joined
[14:34] <masak> pmichaud: I've revently been told that $_ can be clobbered within a given. what are your thoughts on that?

[14:34] <masak> s/revently/recently/

[14:50] *** poletti joined
[14:52] <masak> what's the semantics of an INIT block inside eval'ed code?

[14:53] <masak> S04 says "Code that is generated at run time can still fire off CHECK and INIT blocks, though of course those blocks can't do things that would require travel back in time."

[14:53] <masak> could someone give an example of a thing that would require such travel?

[14:53] <masak> also, what happens in such a case? runtime error? warning? nothing?

[14:55] * masak just found the tests that come along with that paragraph

[14:56] <pmichaud> given sets $_ for the block

[14:57] <masak> pmichaud: sure

[14:57] <masak> but other things inside the block might set it to other things

[15:01] <pmichaud> sure, they can do that

[15:02] <masak> I can see there's no danger in this case, but I got the impression that in larger given blocks there might be

[15:02] *** Limbic_Region joined
[15:06] <pmichaud> I suspect one can do    given $foo -> $_ { ... }  to make sure that $foo isn't modified.

[15:07] <masak> yes...

[15:07] <masak> gotta rush, see you

[15:08] *** masak left
[15:10] *** [particle] joined
[15:13] *** iblechbot left
[15:28] *** b_jonas joined
[15:29] *** [particle]1 left
[15:30] *** FurnaceBoy joined
[15:31] *** silug joined
[15:39] *** justatheory joined
[15:55] *** dolmen joined
[16:07] *** cognominal_ left
[16:10] *** Psyche^ joined
[16:13] <rakudo_svn> r27972 | pmichaud++ | [rakudo]:

[16:13] <rakudo_svn> r27972 | pmichaud++ | * Merge mutamerge + mutablerakudo branches into trunk.

[16:13] <rakudo_svn> r27972 | pmichaud++ | * All spectest_regression tests pass.

[16:13] <rakudo_svn> r27972 | pmichaud++ | * jonathan++ jonathan++ for Mutable implementation and merge help.

[16:14] *** dolmen left
[16:17] *** iblechbot joined
[16:23] *** Patterner left
[16:23] *** Psyche^ is now known as Patterner

[16:29] *** kanru left
[16:33] <rakudo_svn> r27973 | pmichaud++ | [rakudo]:

[16:33] <rakudo_svn> r27973 | pmichaud++ | * Fix "switch missing default case" warning reported by NotFound++ .

[16:45] *** cognominal_ joined
[16:47] *** b_jonas_ joined
[16:47] *** charsbar_ joined
[16:48] *** fullermd_ joined
[16:48] *** Patterner left
[16:48] *** xdg left
[16:48] *** thepler left
[16:48] *** pugs_svnbot left
[16:48] *** audreyt left
[16:48] *** tcliou left
[16:48] *** iblechbot left
[16:48] *** [particle] left
[16:48] *** alanhaggai left
[16:48] *** b_jonas left
[16:48] *** mj41_ left
[16:48] *** Jedai left
[16:48] *** yahooooo left
[16:48] *** fullermd left
[16:48] *** ilbot2 left
[16:48] *** allbery_b left
[16:48] *** TreyHarris left
[16:48] *** hcchien left
[16:48] *** gugod left
[16:48] *** charsbar left
[16:48] *** r0bby left
[16:48] *** buu left
[16:48] *** pasteling left
[16:48] *** b_jonas_ is now known as b_jonas

[16:49] *** hcchien joined
[16:49] *** gugod joined
[16:50] *** TreyHarris joined
[16:50] *** alanhaggai joined
[16:51] *** kanru joined
[16:51] *** yahooooo joined
[16:54] *** buu joined
[16:54] *** [particle]1 joined
[16:54] *** Torment joined
[16:54] *** Patterner joined
[16:54] *** xdg joined
[16:54] *** tcliou joined
[16:54] *** pugs_svnbot joined
[16:54] *** audreyt joined
[16:54] *** thepler joined
[17:00] *** pasteling joined
[17:05] *** allbery_b joined
[17:06] <pugs_svnbot> r20599 | diakopter++ | [yap6]

[17:06] <pugs_svnbot> r20599 | diakopter++ | I stole the name from smop's history.

[17:06] <pugs_svnbot> r20599 | diakopter++ | This is my functional/MJD approach to STD.pm

[17:06] <pugs_svnbot> r20599 | diakopter++ | ./yap6 will be autogenerated at some point;

[17:06] <pugs_svnbot> r20599 | diakopter++ | This is not ready for primetime or anything,

[17:06] <pugs_svnbot> r20599 | diakopter++ | but have fun playing with the toy calculator. 

[17:09] <diakopter> moritz_: irc logger?

[17:09] <diakopter> oh; it was netsplit. oh well

[17:13] *** Blasi left
[17:14] *** Blasi joined
[17:22] *** fullermd_ is now known as fullermd

[17:30] *** chris2 joined
[17:44] *** sri_work joined
[17:46] *** Limbic_Region is now known as asdfasfd

[17:47] *** asdfasfd left
[17:47] *** lichtkind joined
[17:48] *** Blasi left
[17:48] *** Limbic_Region joined
[17:51] *** chris2 left
[18:02] <lichtkind> TimToady: while yin() { yang() }  say "done";      # ILLEGAL

[18:02] <lichtkind> TimToady: i get whyt but its that not a bit incosistent since you said that every } has an inherit ;

[18:03] <pmichaud> no

[18:03] <pmichaud> every } at the end of a line is a statement terminator.

[18:03] <pmichaud> (if a statement terminator could occur there.)

[18:08] <lichtkind> pmichaud: thanks

[18:09] <pmichaud> you're welcome!

[18:18] <lichtkind> pmichaud: you i still writing the perl 6 tutorial series of articles, hopefully soon in english too :)

[18:19] <pmichaud> excellent!

[18:19] <pmichaud> rakudo even supports more of them now :-)

[18:21] *** jferrero joined
[18:28] <lichtkind> pmichaud: i know i talked with jonathan and tene

[18:38] *** FurnaceBoy left
[18:50] <garnm> anyone worked on ircds?

[18:51] <garnm> nevermin OT

[18:52] <pmichaud> just to copy a comment from #parrot to #perl6:

[18:53] <pmichaud> I _really_ like evalbot.  Thanks to the folks who set it up and maintain it.

[18:53] *** jferrero left
[18:55] <TimToady> I was just saying over there that it'd be cool if there was a mode in which you could get one-line summaries of the consensus answer (if any), and which engines are dissenting from that answer, with a link to the full report

[18:55] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[18:55] <TimToady> @messages

[18:55] <lambdabot> pmichaud said 15h 22m 31s ago: where is 'does' parsed, as in "class ABC does XYZ { ... }" ?

[18:56] <TimToady> yes, does is missing from the trait_auxilliary list

[18:57] <TimToady> s/ll/l/

[19:00] *** Blasi joined
[19:01] <pmichaud> audreyt++  helpfully suggested the answer

[19:16] <b_jonas> are p6 scalars like p5 scalars in that they may contain an integer, float, and string version of the data simultanously

[19:16] <b_jonas> ?

[19:24] <TimToady> p6 objects tend to think of themselves as having only one type, but that doesn't mean the implementation of a type couldn't cache other representations

[19:25] <TimToady> such cached values shouldn't have any influence on mutable/immutable decisions, though

[19:26] <b_jonas> if such caching happens, should the String, Float, Int etc classes do it, or the Scalar container itself?

[19:26] <b_jonas> having only one type... ah, so a string with a cached integer value and an integer with a cached string value is no longer the same?

[19:26] <b_jonas> I see

[19:27] <b_jonas> thanks

[19:29] <TimToady> Scalar might be a useful spot to hang a cached value but it might be difficult to maintain cache coherency for mutable values.

[19:29] <TimToady> would be fine for immutables, presumably

[19:29] *** braceta joined
[19:29] *** alanhaggai left
[19:30] <TimToady> I guess the question would be whether all access to the mutable value goes through Scalar...

[19:30] <b_jonas> hmm

[19:30] <TimToady> I'd be inclined to doubt it, unless proven otherwise

[19:30] <b_jonas> so then probably Int and Float and String will do the caching

[19:31] <b_jonas> that's more uniform anyway, since stringification and numification and integrification aren't cached for user objects by default anyway

[19:31] <TimToady> well, to the first approx those are roles rather than classes, so some classes based on them could cache, and others not

[19:31] <b_jonas> also String does more arcane kinds of caching, like strxfrm 

[19:31] <b_jonas> and substr helpers for variable-width encodings

[19:32] <b_jonas> hmm

[19:32] <TimToady> yes, strings get complicated wrt mutability

[19:32] <b_jonas> so you could just have a role you can use for anything to cache the stringification or any other context?

[19:32] <b_jonas> would make sense that way

[19:33] <TimToady> dunno if there's a decent way to do wrapper methods with a role, offhand...

[19:34] <b_jonas> strings are mutable?

[19:34] <TimToady> since you'd want the same method name for the cached version as the underlying uncached version...

[19:34] <b_jonas> they were immutable in perl5

[19:34] <TimToady> strings are mutable in p5

[19:34] <b_jonas> eek

[19:34] <b_jonas> but will usual methods mutate them in place?

[19:34] <b_jonas> I mean, why wasn't the perl5 way good for them?

[19:35] <TimToady> there are times you want mutable strings, and times you want immutable

[19:35] <b_jonas> perl5 could catch lots of cases when there's just one reference so it actually performed the mutation in place

[19:35] <b_jonas> if you just have a string in a mutable container, wouldn't that work?

[19:35] <TimToady> well, perl5 didn't really care whether there was more than one ref

[19:35] <b_jonas> semantically, yes

[19:35] <b_jonas> dunno

[19:36] <b_jonas> mutable strings also cause headaches for the c interface I think

[19:36] <TimToady> a mutable container doesn't help you if you want to change one character in the middle of a 18gigabyte string.

[19:36] <TimToady> but mutable strings make less sense with Unicode

[19:37] <b_jonas> I think that should happen transparently

[19:37] <b_jonas> that is, you just have an immutable string

[19:37] <TimToady> so mainly we'll just rely on the Str container to decide when to "mute" :)

[19:37] <b_jonas> and the compiler or interpreter knows you won't use the old copy when you do the 1-character change

[19:37] <b_jonas> but mutable string can be useful as well

[19:38] <TimToady> well, you'll note the S02 defines Str as immutable.

[19:38] <TimToady> and Buf as mutable

[19:39] *** edpratomo joined
[19:39] *** iblechbot joined
[19:39] *** alester joined
[19:39] *** aindilis joined
[19:39] *** mj41 joined
[19:39] *** ilbot2 joined
[19:42] *** eternaleye left
[19:43] <Juerd> TimToady: I'm under the impression that 18 GB text strings are, at best, very uncommon.

[19:44] *** poletti is now known as polettix

[19:44] <TimToady> you've got a whole bunch of 'em inside you

[19:44] <Juerd> They're encoded into some binary form.

[19:44] <TimToady> base 4, actually

[19:44] <Juerd> I decode parts back to text when I need them, and that's how I expect Perl use will be for the next few decades too.

[19:45] <Juerd> I don't understand why the length of a string makes it being mutable make less sense.

[19:46] <Juerd> I'd expect it to make MORE sense. You certainly don't want to COPY all those 18 gigabytes, to insert a single character.

[19:46] <TimToady> that was my point

[19:46] <Juerd> Then I don't understand why I interpreted what you said as the exact opposite.

[19:50] *** edpratomo left
[20:04] *** Blasi left
[20:05] *** polettix left
[20:06] *** Blasi joined
[20:09] <lichtkind> pmichaud++

[20:12] *** thestarslookdown joined
[20:16] *** r0bby joined
[20:29] <b_jonas> oh, that's better

[20:29] <b_jonas> I wonder if maybe both Str and Buf should be immutable by default, but there could be some mutable variants as well for when you want to optimize stuff

[20:30] *** Blasi left
[20:30] <b_jonas> just a few months ago, I wanted to implement the interface of a c function in ruby

[20:30] *** Blasi joined
[20:30] <b_jonas> the c function wants a string argument

[20:31] <b_jonas> and it can be blocking

[20:31] <b_jonas> like write

[20:31] <b_jonas> (but it wasn't write, write's already implemented)

[20:31] <b_jonas> now in such a case you don't want to copy the string because it could be large

[20:31] <b_jonas> but you also have to take care for ruby code could modify the string from another thread while you're blocking

[20:31] <b_jonas> so that's one place when immutable strings could be useful

[20:32] <b_jonas> otoh even if a string is immutable it might not seem so from c

[20:32] <b_jonas> so it's really a different matter

[20:32] <b_jonas> that's more the task of a real c interface

[20:32] <b_jonas> which ruby doesn't have

[20:34] <Patterner> Just learn from Java and have String and StringBuffer :)

[20:46] <pugs_svnbot> r20600 | diakopter++ | Lots o' changes. :)

[21:02] *** wknight8111 left
[21:11] *** meteorjay joined
[21:15] *** b_jonas left
[21:32] *** rindolf joined
[21:32] <rindolf> Hi all.

[21:32] <rindolf> TimToady: here?

[21:49] *** iblechbot left
[22:02] *** jisom joined
[22:30] <pbuetow> hi rindolf 

[22:32] <rindolf> Hi pbuetow 

[22:32] *** thestarslookdown left
[22:32] <rindolf> pbuetow: what's up?

[22:32] <rindolf> I think I'll shave before I go to sleep.

[22:32] <pbuetow> rindolf: not much! being lazy!

[22:33] <rindolf> I feel uncomfortable.

[22:33] <rindolf> pbuetow: so am I.

[22:33] <rindolf> pbuetow: what time is it there?

[22:33] <pbuetow> its 00:32am

[22:34] <pbuetow> only 1h difference :)

[22:34] *** jisom left
[22:39] <rindolf> pbuetow: ah.

[22:39] <rindolf> pbuetow: .eu, right?

[22:39] <rindolf> Or Africa.

[22:39] <pbuetow> yes, .de

[22:39] <rindolf> pbuetow: ah, cool.

[22:39] <pbuetow> no not africa, ve never been there :/

[22:40] <rindolf> pbuetow: well, it's Sunday tomorrow.

[22:40] <rindolf> pbuetow: I haven't been to Africa, either.

[22:40] <rindolf> Only Europe and NA.

[22:40] <rindolf> And Israel.

[22:40] <pbuetow> i ll be in bulgaria next week, for a week :)

[22:40] <rindolf> Which is technically in Asia.

[22:40] <rindolf> pbuetow: ah, cool.

[22:40] <rindolf> pbuetow: do you like Bulgaria.

[22:40] <rindolf> perlbot: .bu

[22:41] <rindolf> perlbot: .bl

[22:41] <pbuetow> perlbot: .bg

[22:41] <perlbot> .bg is Bulgaria

[22:41] <rindolf> .bg

[22:41] <rindolf> I see.

[22:41] <pbuetow> well its okay, but now it's better, because my GF is from .bg

[22:41] <rindolf> Can I get rindolf.bg?

[22:41] <rindolf> pbuetow: ah.

[22:41] <pbuetow> .bg domains are expensive

[22:41] <rindolf> pbuetow: crazy Europeans.

[22:41] <rindolf> pbuetow: ah.

[22:41] <rindolf> gimps.bg

[22:41] <pbuetow> .de are very cheap

[22:41] <rindolf> wallpapers.bgf

[22:41] <rindolf> pbuetow: yes.

[22:42] <pbuetow> loll

[22:42] <rindolf> I'd like a .to domain.

[22:42] <rindolf> I think they are cheap too.

[22:42] <rindolf> Already have shlomifish.org

[22:42] <pbuetow> i am okay with my .org and .net domains :)

[22:42] <rindolf> pbuetow: OK.

[22:42] <pbuetow> yes i know your site :)

[22:42] *** charsbar_ left
[22:42] *** cookys left
[22:42] *** Eevee left
[22:42] *** SamB left
[22:42] *** lambdabot left
[22:42] *** japhb left
[22:42] <pbuetow> well i dont use .de because i want to keep my content 'international', dont know if i gonna stay in .de

[22:43] <rindolf> pbuetow: I wanted to upload the Drupal for perl-speak.org today, but was too lazy.

[22:43] <rindolf> pbuetow: OK.

[22:43] <pbuetow> so i stay with generic SLDs

[22:43] <pbuetow> mine is buetow.org :)

[22:43] <rindolf> .co.uk etc. domains are also esteemed.

[22:44] *** charsbar_ joined
[22:44] *** cookys joined
[22:44] *** japhb joined
[22:44] *** Eevee joined
[22:44] *** lambdabot joined
[22:44] *** SamB joined
[22:44] <rindolf> Hmmm... seems like KDE is a moving target now in this MDV upgrade.

[22:44] <rindolf> buetow is nice and short.

[22:44] <pbuetow> hmm, i prefer FVWM + some gnome apps :)

[22:45] <rindolf> pbuetow: I'm a die-hard KDE user.

[22:45] <rindolf> At least KDE-3.5.x

[22:45] <pbuetow> do you like kde 4? or still using 3?

[22:45] <rindolf> Been using it since 2.0.x or so.

[22:45] <pbuetow> 4.1 is gonna be out soon

[22:45] <rindolf> pbuetow: still KDE3.

[22:45] <rindolf> pbuetow: yes.

[22:45] <rindolf> pbuetow: I didn't like 4.0.x

[22:45] <pbuetow> well you woll give 4.1 a shot i guess

[22:45] <rindolf> pbuetow: but 4.1.x should be better.

[22:45] <rindolf> pbuetow: yes, I will.

[22:45] <pbuetow> i used to use a lot of different desktops/windowmanagers

[22:45] <rindolf> 4.0.x was very buggy.

[22:46] <rindolf> pbuetow: ah.

[22:46] <pbuetow> but now i am sticking with fvwm since 2 years

[22:46] <rindolf> pbuetow: I personally could never configure FVWM to my liking.

[22:46] <rindolf> perlbot: .co

[22:46] <perlbot> .co is Colombia

[22:46] <rindolf> Colombia.

[22:46] <pbuetow> rindolf: configuring FVWM is like configuring sendmail :P

[22:46] <rindolf> Useful instead of .com

[22:46] <rindolf> There's also .cc

[22:46] <rindolf> pbuetow: ah.

[22:46] <pbuetow> (not the same syntax of course)

[22:47] <rindolf> pbuetow: when I need something lightweight, I use IceWM.

[22:47] <pbuetow> i've a perl module for my fvwm, which is managing the transparency of my windows.

[22:47] <rindolf> pbuetow: ah.

[22:47] <pbuetow> rindolf: i used to use WindowMaker and Fluxbox too a lot, as well as wmii

[22:47] <rindolf> pbuetow: MiGo has been doing some fvwm work.

[22:47] <rindolf> pbuetow: ah.

[22:48] <pbuetow> but my FVWM has now keybindings like evilwm + more

[22:48] <rindolf> pbuetow: well, I'm using many KDE apps, so running the desktop seems reasonanble.

[22:48] <pbuetow> rindolf: yeah

[22:48] <pbuetow> rindolf: at least you can do your job :)

[22:49] <rindolf> pbuetow: and I was able to run it comfortable on a P3-667MHz

[22:49] <rindolf> Of course it runs faster on my P4-2.4GHz.

[22:49] <pbuetow> rindolf: the newest version of KDE3?

[22:49] <rindolf> pbuetow: don't know.

[22:49] <rindolf> pbuetow: what was back then.

[22:50] <rindolf> I had to upgrade my mem from 0.5 GB to 2.5 GB though.

[22:50] <pbuetow> hehehe

[22:50] <pbuetow> ram is always good

[22:50] <rindolf> Because it seemed that 0.5 GB was a bit sluggish.

[22:50] <rindolf> Wwell, especially when I had Java.

[22:50] <pbuetow> my laptop now has 2gb of ram, not 512mb any more. but i never use as much.

[22:50] <pbuetow> well, 2gb of ram was a gift

[22:50] <rindolf> My new computer should be able to scale up to 12 GB or 16 GB or so.

[22:50] <rindolf> pbuetow: ah, from who?

[22:51] <rindolf> pbuetow: what does your gf do, BTW?

[22:51] <pbuetow> she is english teacher, nothing with computers :/ but well, i am ok with that :)

[22:52] <pbuetow> rindolf: from my father for xmas, the 2gb of ram

[22:52] <rindolf> pbuetow: ah.

[22:52] <rindolf> pbuetow: we still need teachers.

[22:52] <rindolf> pbuetow: computers are a poor substitute for teachers.

[22:52] <rindolf> pbuetow: well, when teachers are good.

[22:52] <pbuetow> rindolf: where?

[22:52] <rindolf> pbuetow: I mean humans need teachers.

[22:53] <pbuetow> yes ;)

[22:53] <rindolf> I had a really good English teacher at the 11th grade.

[22:53] <pbuetow> well i never was very good in english

[22:53] <rindolf> And my other English teachers were also good.

[22:53] <rindolf> pbuetow: does she speak German, too?

[22:53] <pbuetow> until i went to the US as an exchange student. now my english is much better, but still not perfect

[22:54] <rindolf> pbuetow: ah.

[22:54] <pbuetow> rindolf: she speaks english and bulagarian (fluently), german, french, russian enough to communicate

[22:54] <rindolf> pbuetow: my English has improved greatly after high-school.

[22:54] <rindolf> And still is.

[22:54] <rindolf> pbuetow: ah.

[22:54] <rindolf> pbuetow: so you communicate with her in English?

[22:54] <pbuetow> rindolf: and some other languages, which are similar to russian and bulagarian, i think serbian etc

[22:54] <rindolf> pbuetow: ah.

[22:55] <rindolf> I know a few kids from Croatia, Slovenia, etc.

[22:55] <pbuetow> rindolf: english is the easiest way, but once a while we teach each other german or bulgarian

[22:55] <rindolf> pbuetow: ah, I see.

[22:55] <pbuetow> i ve been in slovenia and croatia last year :)

[22:55] <rindolf> pbuetow: ah.

[22:55] <pbuetow> slovenia on drive through to croatia

[22:55] <rindolf> pbuetow: did you like it there?

[22:55] <rindolf> pbuetow: ah.

[22:55] <pbuetow> in coratia for vacations, it was nice :)

[22:56] <rindolf> pbuetow: ah.

[22:56] <pbuetow> slovenia, they have cheap gas

[22:56] <rindolf> pbuetow: I didn't know Dalmatia was in Croatia.

[22:56] <rindolf> I just knew there was a Dalmatian dog.

[22:56] <pbuetow> uh, me either

[22:56] <rindolf> pbuetow: "um, neither did I."

[22:56] <rindolf> pbuetow: I'm the grammar nazi.

[22:56] <pbuetow> hehehe

[22:57] <rindolf> http://www.ozyandmillie.org/d/20080528.html

[22:57] <lambdabot> Title: Ozy and Millie: Grammar Nazi

[22:57] <pbuetow> i think i ll learn bulgarian

[22:57] <rindolf> pbuetow: well, at least in Hebrew.

[22:57] <pbuetow> hehe

[22:58] <pbuetow> we could conversate in perl poetry :P

[22:58] <pbuetow> but here it's perl6, don't know perl6 good enough yet

[22:58] <rindolf> pbuetow: Perl is not as useful for human<->human conversation as English or whatever is.

[22:59] <rindolf> pbuetow: I'm not very versed in Perl 6 either.

[22:59] <pbuetow> well, at least it's fun

[22:59] <rindolf> pbuetow: and poetry can be harmful.

[22:59] <pbuetow> why can it be harmful?

[22:59] <rindolf> pbuetow: Plato identified Poetry as divine madness.

[23:00] <rindolf> pbuetow: Poetry is a right hemisphere function. Freeform Speech is a left hemisphere function.

[23:00] <pbuetow> ah

[23:00] <rindolf> perlbot: bicameral

[23:00] <rindolf> perlbot: jaynes

[23:00] <rindolf> perlbot: search for jaynes

[23:00] <perlbot> Sorry, no factoids contain the string "jaynes"

[23:00] <rindolf> perlbot: search for bicameral

[23:00] <perlbot> Sorry, no factoids contain the string "bicameral"

[23:01] <rindolf> How is that possible?

[23:02] <rindolf> pbuetow: http://en.wikipedia.org/wiki/Bicameralism_(psychology)

[23:03] <spinclad> perlbot: search with your other hemisphere

[23:03] <perlbot> Sorry, no factoids contain the string "with your other hemisphere"

[23:03] <pbuetow> rindolf: huh! i am not going to read that! i am too tired (and lazy) ;)

[23:03] <rindolf> pbuetow: anyway, the book is a very reocmmended read.

[23:03] <rindolf> pbuetow: you can read the article.

[23:03] <pbuetow> rindolf: maybe if i ve graduated (lots of stuff to do)

[23:04] <rindolf> pbuetow: or you can bookmark it.

[23:04] <pbuetow> in 3 months

[23:04] <rindolf> pbuetow: ah.

[23:04] <pbuetow> i ll be, i hope

[23:04] <rindolf> pbuetow: are you still an undergrad?

[23:04] <pbuetow> yes

[23:04] <pbuetow> i am writing on my diploma thesis atm

[23:04] <pbuetow> lots of work :/

[23:04] <rindolf> Konqi looks weird now.

[23:04] <pbuetow> rindolf: do you use LaTeX for your writings?

[23:04] <rindolf> It doesn't happen with gtk+/gnome apps.

[23:04] <rindolf> pbuetow: a bit.

[23:05] <rindolf> pbuetow: but also DocBook/XML, HTML, POD , etc.

[23:05] <pbuetow> rindolf: do you use a spell checker with LaTeX?

[23:05] <rindolf> pbuetow: LaTeX is problematic.

[23:05] <pbuetow> ispell/aspell?

[23:05] <rindolf> pbuetow: no, I don't.

[23:05] *** justatheory left
[23:05] <pbuetow> i need to

[23:05] <rindolf> pbuetow: I'm using aspell.

[23:05] <pbuetow> i am used to LaTeX

[23:05] <rindolf> pbuetow: for Englih.

[23:05] <pbuetow> but need to set up a spell checker

[23:05] <rindolf> Not for Hebrew.

[23:05] <pbuetow> well i m writing in german

[23:05] <rindolf> pbuetow: LaTeX is a kludge.

[23:05] <pbuetow> i start writing next week, my software for the thesis ist almost done

[23:06] <rindolf> pbuetow: there's no problem writing DB/XML in German.

[23:06] <pbuetow> now i ve to write those things down

[23:06] <rindolf> pbuetow: you can convert latex to DocBook/XML or HTML+MathML.

[23:06] <rindolf> pbuetow: using h4t

[23:06] <pbuetow> i think you can convert LaTeX to everything known in the universe :)

[23:07] <pbuetow> well i can use the spell checker of vim or an external spell checker like a spell. which also should support LaTeX.

[23:07] <pbuetow> s/a spell/aspell/

[23:09] <rindolf> pbuetow: I have an idea to write a post-modern typesetting system.

[23:09] <rindolf> As an alternative to TeX/LaTeX and Troff.

[23:09] <rindolf> A saner alternative.

[23:09] <pbuetow> can you complete it next week? :P

[23:09] <pbuetow> so i can use it.

[23:09] <pbuetow> (just kidding)

[23:23] <rindolf> pbuetow: it will take a while.

[23:23] <rindolf> I'm planning to generate XSL-FO, SVG, MathML, etc.

[23:24] <rindolf> To make my life easier.

[23:26] <pbuetow> rindolf: i understand, sounds interesting

[23:27] <pbuetow> rindolf: tell me, if you want testers

[23:27] *** dominiko joined
[23:28] <rindolf> pbuetow: sure.

[23:28] <rindolf> pbuetow: it's still pie-in-the-sky.

[23:28] <rindolf> pbuetow: I haven't written a single line of code yet.

[23:28] <rindolf> pbuetow: just have two docs.

[23:28] <pbuetow> rindolf: ok ;) planing is important

[23:28] <rindolf> pbuetow: it's one of my "world-domination projects"

[23:29] <pbuetow> lol

[23:29] <rindolf> Great ideas, but not enough motivation.

[23:35] <rindolf> Well, I'm going to sleep.

[23:35] <rindolf> Hopefully I can fall asleep easily.

[23:37] <pbuetow> rindolf: good night.

[23:37] <rindolf> pbuetow: night.

[23:37] <rindolf> Or maybe I'll eat something beforehand.

[23:38] <rindolf> I could prepare rice in the microwave.

[23:38] <pbuetow> i always need meat

[23:38] <rindolf> Maybe I should do cog. psy. exercises.

[23:38] <rindolf> pbuetow: meat makes you active.

[23:39] <dominiko> I'm new here, I thought this was about Perl.

[23:40] <pbuetow> dominiko: yes, it is about perl6

[23:40] <dominiko> ok good, not just about food then.

[23:41] <pbuetow> yes! 

[23:42] <dominiko> I've been ignoring Perl6 so far but I read a bit about it today, and ... it looks promising.

[23:42] <rindolf> dominiko: it looks very promising to me too.

[23:42] <rindolf> dominiko: not sure if I like the entire thing, but it has many excitign features.

[23:43] <rindolf> dominiko: I think we'll see ideas from it in many places.

[23:43] <dominiko> but gosh it takes time.  Are we seeing the light at the end of the tunnel?  I don't mean to say that as a criticism, all good things take time.

[23:43] <rindolf> dominiko: well, right now Rakudo seems like the way to go.

[23:43] <rindolf> dominiko: Pugs is mostly dead.

[23:43] <rindolf> dominiko: and is dog-slow.

[23:44] <rindolf> dominiko: I voiced some criticism against perl 6 in the past.

[23:44] <rindolf> perlbot: perl6-crit

[23:44] <rindolf> perlbot: search for crit

[23:44] <perlbot> Found 3 matches for "crit": port 2467, perl6crit, perl 6 critique

[23:44] <rindolf> perlbot: perl6crit

[23:44] <perlbot> rindolf's Perl6 critique: http://freshmeat.net/articles/view/1339 -- but be sure to read at least this comment too: http://freshmeat.net/articles/view/1339#comment-32746

[23:44] <lambdabot> Title: freshmeat.net: Editorials - Critique of Where Perl 6 is Heading

[23:44] <pbuetow> pugs used to be about 20 times slower than perl5, last time i tested it. dont really remember what i tested, some parsing stuff i think.

[23:45] <rindolf> pbuetow: yeah.

[23:45] <rindolf> pbuetow: it was also slow for the Graham Function.

[23:45] <dominiko> yes, I read... it's optmized for... fun

[23:45] <dominiko> instead of speed or memory

[23:45] <dominiko> but fun is important

[23:45] <pbuetow> but it's very nice to have had pugs!

[23:45] <rindolf> dominiko: but slow running code is not fun.

[23:45] <rindolf> dominiko: the faster a program runs, he happier you are.

[23:45] <rindolf> dominiko: wait a sec.

[23:46] <dominiko> won't there be a c or c++ implementation?

[23:46] <pbuetow> perl6 (rakudo) will uses a virtual machine, which itself is in C

[23:46] <rindolf> dominiko: http://shlomif.livejournal.com/52579.html - fun, happiness, etc.

[23:46] <pbuetow> -will

[23:46] <lambdabot> Title: shlomif: What Motivates People and How?

[23:47] <pbuetow> dominiko: http://www.parrotcode.org

[23:47] <lambdabot> Title: Parrot Virtual Machine - parrotcode

[23:47] <rindolf> Oooh... TimToady got op.

[23:47] <rindolf> A languages designer with power!

[23:47] <pbuetow> hehe.

[23:48] <rindolf> Is there spam or something?

[23:50] *** rindolf left
[23:51] *** bacek__ left
