[00:02] <meppl> good night

[00:03] <pugs_svn> r21842 | ruoso++ | [smop] adding the test for lexical scopes

[00:05] *** meppl left
[00:11] *** hercynium joined
[00:12] *** luqui joined
[00:13] *** luqui left
[00:14] *** elmex left
[00:25] *** Schwern joined
[00:33] *** jferrero left
[00:53] *** dduncan left
[00:53] *** Alias_ left
[00:54] *** nipotaway is now known as nipotan

[00:56] *** cmarcelo left
[01:09] <pugs_svn> r21843 | ruoso++ | [smop] lexical scope almost implemented! only the lookup implementation is missing!

[01:14] * ruoso sleep &

[01:16] *** ruoso left
[01:23] *** Schwern left
[01:27] *** Schwern joined
[01:28] *** Schwern left
[01:29] *** Schwern joined
[01:48] *** Blasi joined
[01:48] *** Blasi left
[01:57] *** alester joined
[01:58] *** Schwern left
[02:05] *** alanhaggai joined
[02:14] *** Schwern joined
[02:17] *** wknight8111 left
[02:19] *** Blasi joined
[02:20] *** Blasi left
[02:23] *** clochette joined
[02:24] *** clochette left
[02:26] *** fullermd joined
[02:37] *** sri_work joined
[03:39] *** fullermd left
[03:40] *** fullermd joined
[03:55] *** frobnitz left
[03:58] *** sri_work left
[03:58] *** sri_work joined
[03:59] *** sri_work left
[03:59] *** sri_work joined
[04:08] *** hercynium left
[04:10] *** Schwern left
[04:36] *** kanru left
[04:36] *** kanru joined
[04:45] *** Schwern joined
[05:08] *** masak joined
[05:08] *** araujo left
[05:22] *** Carrie joined
[05:25] <Carrie> Which sorts of buildings are more likely to house potentially harmful molds?

[05:26] <masak> Carrie: caves?

[05:27] <masak> anyways, this seems more of a Perl 5 question than a Perl 6 question to me

[05:28] *** TimToady sets mode: +b *!n=Webchat@*.reznet.ucalgary.ca

[05:28] *** Carrie was kicked by TimToady (TimToady))
[05:34] <TimToady> Webchat appears to be some kind of trollbot, actually; it's been here before...

[05:38] *** Psyche^ joined
[05:39] *** BinGOs_ joined
[05:40] *** kanru left
[05:42] *** penk joined
[05:43] *** BinGOs left
[05:44] <masak> it's 2008, and we have such things as trollbots. the present grows ever more futuristic. :)

[05:45] *** alester left
[05:47] *** Schwern left
[05:54] *** Patterner left
[05:54] *** Psyche^ is now known as Patterner

[05:59] <masak> what's the value of $0 at the start of a program/block, before any matches?

[06:00] <masak> or rather, is it legal to refer to it?

[06:09] *** luqui joined
[06:17] <pugs_svn> r21844 | bacek++ | [spec] Unfudge test for rakudo. Hash composer is implemented since r30104

[06:24] *** justatheory left
[06:33] *** kanru joined
[06:35] *** ashizawa joined
[06:39] *** BinGOs_ is now known as BinGOs

[06:49] <masak> would $str.subst('foo','bar') work like $str.subst(/foo/,'bar') or like $str.subst(rx:g/foo/,'bar') ?

[06:51] *** meppl joined
[07:08] *** kanru left
[07:08] *** kanru joined
[07:10] *** revdiablo joined
[07:44] *** kanru left
[07:46] *** mj41 left
[07:51] *** mj41 joined
[07:58] *** pmurias joined
[08:01] *** Schwern joined
[08:36] <pugs_svn> r21845 | pmurias++ | [STD] handles errors from an eval (grammars need a lineof)

[08:39] *** barney joined
[08:59] <pugs_svn> r21846 | pmurias++ | [sm0p] added a lineof method to unbrake it

[08:59] *** meppl left
[09:01] <pmurias> @tell ruoso the lexical pad is missing from the repo

[09:01] <lambdabot> Consider it noted.

[09:29] *** orafu joined
[09:32] *** orafu left
[09:37] <pugs_svn> r21847 | ruoso++ | [smop] ruoso-- keeps missing to add files

[09:39] *** iblechbot joined
[09:46] *** bbkr left
[09:46] *** bbkr joined
[09:47] *** pbuetow joined
[09:49] *** Alias_ joined
[09:50] *** orafu joined
[09:51] *** orafu left
[09:52] *** orafu joined
[09:52] *** orafu left
[09:57] *** riffraff joined
[09:58] <riffraff> hi

[09:58] *** orafu joined
[10:02] *** alanhaggai left
[10:07] *** pmurias left
[10:08] *** nipotan is now known as nipotaway

[10:15] *** kanru joined
[10:17] *** pjcj left
[10:19] *** penk left
[10:20] *** pjcj joined
[10:41] *** araujo joined
[10:55] *** kanru left
[10:58] *** pmurias joined
[11:00] <pmurias> @tell ruoso why did you make SMOP__ID__entries and SMOP__ID_lookup static, is there a rule?

[11:00] <lambdabot> Consider it noted.

[11:04] *** bacek left
[11:13] *** meppl joined
[11:15] *** whereiskurt__ left
[11:16] <pmurias> i'm porting the elf sm0p backend to m0ld for now, as i don't have enough pugs/haskell skills to come up with a working backend design

[11:21] *** sri_work left
[11:26] *** Schwern left
[11:26] *** frobnitz joined
[11:30] *** zamolxes joined
[11:47] *** kanru joined
[12:05] *** riffraff left
[12:08] *** wknight8111 joined
[12:25] *** Blasi joined
[12:25] *** Blasi left
[12:45] *** alester joined
[12:45] *** alanhaggai joined
[12:46] *** alester left
[12:49] *** kanru left
[13:02] *** rindolf joined
[13:04] *** ashizawa left
[13:05] <pmurias> what's the state of PIL2, i noticed that PIL2 generators are commented out and the ones which don't specify the  PIL version are marked deprecated

[13:05] <pmurias> s/,/?

[13:07] *** kanru joined
[13:07] *** alanhaggai left
[13:29] <pmurias> i get an useless use of constant warning when using -Cjson or -Cyaml

[13:29] *** cognominal_ left
[13:31] <pugs_svn> r21848 | pmurias++ | [pugs] a empty m0ld backend placeholder

[13:35] *** charsbar left
[13:36] <pmurias> and the output of -Cyaml containes a first line consisting of strange characters

[13:39] *** charsbar joined
[13:43] *** alanhaggai joined
[13:44] *** meppl left
[13:45] *** jan__ left
[13:52] *** TJCRI joined
[13:55] *** iblechbot left
[13:57] *** cmarcelo joined
[13:59] *** charsbar left
[13:59] *** AndyAway is now known as alester

[14:00] *** alanhaggai left
[14:00] *** alanhaggai joined
[14:02] *** charsbar joined
[14:27] *** charsbar left
[14:31] *** charsbar joined
[14:37] *** cosimo left
[14:37] <pugs_svn> r21849 | fglock++ | [PCR] added new-engine branch (at misc/pX/fglock/)

[14:40] <pugs_svn> r21850 | fglock++ | [PCR] clean up the release branch

[14:40] *** diakopter joined
[14:43] <pmurias> diakopter: hi!

[14:44] <diakopter> pmurias: ih

[14:45] <pmurias> what's up?

[14:46] <diakopter> my 9 day absence approached an event horizon

[14:46] *** jiing joined
[14:46] *** Jedai joined
[14:47] <pmurias> i don't understand

[14:48] <diakopter> I was away longer than anticipated

[14:49] <diakopter> from some frames of reference

[14:50] <diakopter> sudden home change, sudden marriage change, sudden job change, sudden health change

[14:50] <diakopter> (s)

[14:52] <pmurias> what's the state of yap6?

[14:53] * diakopter 7ups

[14:53] <diakopter> (svn ups)

[14:55] *** cmarcelo_ joined
[14:55] <diakopter> oops

[14:56] *** cmarcelo left
[14:57] *** cmarcelo_ is now known as cmarcelo

[14:57] *** cmarcelo left
[14:57] <diakopter> sry moritz_ for the blatant/destructive elevation of privileges & arbitrary execution security hole

[14:59] <pmurias> the security hole wasn't really important as it's easy to evalbot backends can execute anything they wont

[14:59] <pmurias> s/wont/want/g

[15:00] <speckbot> r14573 | larry++ | clarify that &foo is a real function even when representing a multiple dispatch

[15:00] <speckbot> r14573 | larry++ | s/q:code/quasi/

[15:01] *** elmex joined
[15:01] * diakopter backlogs a few tens of thousands of words

[15:10] <[particle]> TimToady: is there a way to see the list of signatures that are contained in &foo?

[15:10] <[particle]> like, would &foo.perl do it?

[15:10] <TimToady> erm

[15:11] <TimToady> that might give you the sigs and a whole lot more

[15:11] <[particle]> right, a lot more

[15:11] <[particle]> but it should list the sigs

[15:11] <[particle]> narrowing down, is there a way to get just the sigs?

[15:11] <TimToady> I suspect using .sig or whatever will just return a multisig

[15:12] <TimToady> it's just a property, after all

[15:12] <TimToady> well, a trait

[15:12] <TimToady> no such thing as properties in p6 really

[15:13] *** pmurias left
[15:13] <TimToady> possibly it's even a Junction of sigs, since the ordering is determined by the dispatcher

[15:14] <[particle]> so it's easy to get the info you need to write your own dispatcher

[15:14] <[particle]> ok, good.

[15:14] <[particle]> i like Junction, but Set may be ok, too

[15:15] <TimToady> presumably there's gotta be some way, or the standard dispatcher can't do it either  :)

[15:15] <TimToady> might be more useful to store a partial ordering

[15:16] <[particle]> hrmm, what about 'only'

[15:16] <TimToady> what about it?

[15:16] <[particle]> how is that distinguished?

[15:16] <[particle]> i mean, it can't be a junction

[15:17] <[particle]> it could be a Junction with a constraint of one alternative, if that's possible

[15:17] <[particle]> i don't know how to specify that subset, though

[15:17] <TimToady> the user shouldn't care how many things there are in a junction

[15:17] <TimToady> $foo ~~ $bar doesn't need to know the arity of $bar

[15:17] <TimToady> or the whateverity

[15:18] *** rindolf left
[15:18] *** justatheory joined
[15:18] <TimToady> $capture ~~ &foo.sig either works or doesn't

[15:18] <[particle]> when building up the multisigs, the compiler needs to know if it's allowable to add another sig to something that's previously been declared with 'only'

[15:18] <TimToady> regardless of whether .sig returns a junction or a signature

[15:18] <[particle]> this isn't dispatcher execution, really

[15:18] <TimToady> sure, but that's not info in the sigs

[15:19] <[particle]> ok

[15:19] <[particle]> it has to be stored somewhere, though

[15:19] <TimToady> well, at least till the end of scope in the compiler

[15:20] <[particle]> at runtime, can you add a sig to something previously declared as only?

[15:21] <TimToady> hmm, if you add a sig to an existing Code, it would depend on how the compiler wrote the call

[15:22] *** fridim_ joined
[15:22] <TimToady> if it uses the same dispatch mechanism, it would be transparent

[15:22] <TimToady> but only subs are more likely to be inlined

[15:22] <TimToady> in which case, I'd say it's erroneous to add a sig to the object

[15:23] <TimToady> I take onliness to be a strong hint that you can optimize the heck out of the calls

[15:24] <TimToady> esp for lexically scoped subs

[15:24] <[particle]> the 'inline' equivalent

[15:24] <[particle]> that's nice to have

[15:24] <TimToady> "is inline" is more of a warning to anyone who is reading the code; the compiler makes its own decision

[15:25] <[particle]> sure, that's the same in c

[15:25] <[particle]> gcc and msvc anyway

[15:26] <TimToady> possibly "is !inline" is more imprtant :)

[15:26] <[particle]> isnt inline

[15:26] <TimToady> "is " is really just sugar for ':'

[15:26] <[particle]> isnt could be sugar for :!

[15:27] <[particle]> i'm not quite sure that's getting carried away

[15:27] <TimToady> it bugs the proscriptive grammarian in me

[15:27] <[particle]> well, isn't could be made to work

[15:27] <[particle]> but 'tis uglier

[15:28] <TimToady> indeed, but spurious ' will confuse syntax highlighters

[15:28] <[particle]> unless they use the parse tree

[15:29] <TimToady> I suppose we could allow ' in identifiers generally as long as they're surrounded by \w

[15:29] <[particle]> as long as ' doesn't mean ::

[15:30] <TimToady> presumably same rule for - if we decided to be Lispish

[15:30] *** alanhaggai left
[15:30] <[particle]> yes, it'd be nice not no reach for that shift key so frequently

[15:30] <TimToady> $a-sqrt(2)

[15:31] <TimToady> can get away with more given strictural defaults

[15:31] <TimToady> "No such routine in scope "a-sqrt"

[15:32] <[particle]> true, it gives much better errors having strict as default

[15:32] *** Kishi joined
[15:32] <TimToady> and it would be nicer for poetry to have apostrophes

[15:33] <[particle]> i suppose then we could have .can't and .doesn't methods

[15:33] *** diakopter left
[15:33] <TimToady> someone whack me upside the head with a halibut before I do this  :)

[15:33] *** Kishi left
[15:34] <[particle]> sunday is my 35th birthday. do it for me :)

[15:34] <TimToady> q'foo' is a problem

[15:34] <[particle]> i don't see a way around that

[15:35] <TimToady> q 'foo'

[15:35] <[particle]> 'foo':q doesn't work

[15:35] <TimToady> 'foo':q too

[15:35] <[particle]> bad weighting

[15:35] <[particle]> that's the s///mg problem

[15:36] <TimToady> well, at least q'foo' is an immediate parse error on the second '

[15:36] <[particle]> ws works, but it's another big departure from perl 5

[15:36] <[particle]> not that there's anything wrong with that

[15:37] <TimToady> ws is important in English

[15:37] <[particle]> so an identifier couldn't end in ' ?

[15:37] <TimToady> correct

[15:37] <[particle]> ah, right, you said \w surrounding

[15:37] <TimToady> and 'tis would be Right Out

[15:37] <[particle]> yep, no irish poetry (which is some of the best)

[15:38] <[particle]> 'oer is gone too. cya shakespeare6

[15:38] <TimToady> 'twas the decade before Christmas, and all through the net...

[15:38] <TimToady> that o'er

[15:38] <TimToady> so okay

[15:38] <[particle]> ah yes, and e'er

[15:39] <TimToady> I should try putting it into STD and see what hiccups

[15:39] <TimToady> but it's sorta just like the _ rule in numbers

[15:40] <[particle]> nice to have a working parser

[15:40] <TimToady> I think restricting it to being before alpha would be wise

[15:40] <TimToady> no $foo-1

[15:41] <[particle]> agreed

[15:41] <[particle]> damian would have a field day with that

[15:42] <TimToady> use apostrophe < ' - + >

[15:42] *** jan_ joined
[15:42] *** meppl joined
[15:43] <[particle]> use inner_alpha < ' - + >

[15:43] <[particle]> apostrophe isn't really a grammatical category

[15:44] <[particle]> use mark < ' - + >

[15:45] <[particle]> or use apostrophic <...>

[15:45] <TimToady> blows up on line 3 of parsing STD  :)

[15:45] <[particle]> hee

[15:45] <TimToady> dunno why yet

[15:48] <TimToady> hmm, my LTMer is losing the * on [\w|<['-]><.alpha>]*

[15:53] <TimToady> hmm, that didn't work either...

[15:54] *** rdice joined
[15:55] <TimToady> okay, think I snuck it past the LTM using <.identish> [<[ ' \- ]><identish>]*

[15:56] <TimToady> I note that $x-$y is saved only by the presence of the second sigil

[15:57] <TimToady> whee, parses itself

[15:57] <TimToady> now to see how much of t/ we broke...

[15:58] <TimToady> passes all of sanity

[15:59] <TimToady> the fact that we already require space after listops and keywords is helping

[16:00] <TimToady> t/blocks is good

[16:02] <TimToady> t/builtins is good

[16:02] <[particle]> this is crazy. having a working parser is *awesome*

[16:03] <[particle]> this may be the first change to the language proven correct (to the extent that tests can prove anything)

[16:05] *** luqui left
[16:05] <TimToady> also have to prove it's parsing it correctly though :)

[16:05] <TimToady> but through examples now

[16:05] <[particle]> true enough

[16:06] <[particle]> what's your expectation as to the current correctness of the parsing overall?

[16:06] <[particle]> 93%?

[16:06] <TimToady> but the ident LTM is [_[:alpha:]]\w*(?:['\-][_[:alpha:]]\w*)* which looks right

[16:07] <TimToady> it'll be a lot higher after I get symbol tables and see what has been swept under the carpet of postdeclarations

[16:07] <[particle]> looks correct to me

[16:07] <TimToady> through macros, working on oo

[16:09] <TimToady> oo good

[16:10] *** Dfaure joined
[16:10] <[particle]> i've installed yaml and moose

[16:12] <[particle]> should 'make' be working in src/perl6 ?

[16:13] <[particle]> i get STD.pmc did not return a true value

[16:14] <[particle]> oh, make clean isn't really cleaning well

[16:14] <TimToady> operators good

[16:14] <[particle]> ok, got tre, too

[16:15] <TimToady> means the gimme5 failed

[16:15] <TimToady> or you don't have tre  :)

[16:15] <[particle]> I CAN HAZ STD!

[16:15] <[particle]> it's working.

[16:16] <TimToady> Really Hard™

[16:16] <[particle]> should make clean remove STD5.pm, STD.pmc, and try5.out?

[16:16] <TimToady> there is no STD5.pm anymore

[16:16] <TimToady> STD.pmc is the new black

[16:16] <TimToady> don't care about try5.out

[16:16] <[particle]> ah, ok, so that was old and laying about

[16:17] <[particle]> ok, then Makefile is fine

[16:17] *** iblechbot joined
[16:17] <TimToady> well, up to regex/propcharset, but that takes half of forever to parse

[16:18] <[particle]> do you parallelize at all?

[16:18] <TimToady> surprised I haven't found a q'foo' yet

[16:18] <TimToady> no

[16:18] <TimToady> race conditions in the LTM cache

[16:18] <TimToady> (disk cache, all the stuff down in lex/)

[16:19] <TimToady> need to clean all that up at some point

[16:19] *** cognominal_ joined
[16:20] <TimToady> rather than store each digraph in a separate file, I plan to have a single file with just lists of rule numbers that could match, and appending is easier to transactionalize

[16:20] <TimToady> might run faster too

[16:21] <pugs_svn> r21851 | particle++ | remove trailing tab from STD Makefile

[16:21] <TimToady> though NYTProf doesn't report all that much time slurping digraph data

[16:21] <[particle]> ok, now i know what to install next :)

[16:23] <[particle]> how are you running your examples, and profiling them?

[16:23] <[particle]> perl -d:NYTProf ???

[16:23] <[particle]> or have you an alias for that

[16:24] <TimToady> I've only ever profiled compiling STD

[16:25] <TimToady> but I'll probably do propcharset.t at some point just because it takes soooo loooong

[16:25] <TimToady> assuming I don't run out of disk space

[16:26] *** bd_ joined
[16:29] <[particle]> i ran out of disk while creating minicpan

[16:29] <[particle]> so i'll have to add another virtual disk to my vm

[16:31] <TimToady> so of *course* our TV blows up the night before the Olympics start...

[16:31] <[particle]> /\bq'/ only appears six times in t/ according to ack

[16:32] <[particle]> and 5 are 'q'

[16:32] <TimToady> what about \bq'[a-zA-Z]

[16:32] <[particle]> one is q'STUB: ...' in t/spec/S12-methods/calling_sets.t

[16:32] <[particle]> line 97

[16:33] <TimToady> okay, that one will blow up

[16:33] <TimToady> or should

[16:33] <[particle]> after half of forever, well find out

[16:33] <TimToady> done with that half of forever, working on properties.t now

[16:33] <[particle]> how do i run std against t/S12-methods/ ?

[16:34] <TimToady> which is about another 1/4 of forever

[16:34] <TimToady> tryfile t/spec/S12-methods/calling_sets.t

[16:34] <TimToady> well, make a t symlink first

[16:35] <[particle]> ah, ok. i'm running ./teststd modified to that dir

[16:35] <[particle]> but i'll do tryfile next time

[16:37] <TimToady> oh wait, yours won't blow up because I didn't check in the ident change

[16:39] *** Guest73782 joined
[16:41] <[particle]> er, duh.

[16:42] *** meppl left
[16:43] *** cognominal_ left
[16:43] *** masak left
[16:44] <[particle]> i could probably try myself

[16:45] <TimToady> well, it's already looking good enough I'm just gonna check it in and see what happens

[16:47] *** Dfaure left
[16:49] *** iblechbot left
[16:49] *** zamolxes left
[16:52] <pugs_svn> r21852 | lwall++ | [STD] allow ' and - in ident (but only before a letter)

[16:52] <TimToady> yes, it did blow up on t/spec/S12-methods/calling_sets.t nicely

[16:52] <TimToady> feel free to fix it

[16:53] <TimToady> shower &

[16:57] *** Guest73782 left
[16:58] <TimToady> t/unspecced/sort.t also fails q:to'stuff'

[17:00] <TimToady> done, those are the only two failures--looks like you get your "isn't"

[17:00] <TimToady> shower really &

[17:03] *** alester is now known as AndyLunch

[17:10] <[particle]> wow! i'll fix after my phone call

[17:11] *** eternaleye joined
[17:35] <speckbot> r14574 | larry++ | allow isolated ' and - in identifiers (only if followed by alpha)

[17:37] <[particle]> hrmm. $1-foo

[17:37] <[particle]> or make that $1-foo()

[17:42] <pugs_svn> r21853 | particle++ | update tests to match spec from previous commit (trystd++)

[17:42] <[particle]> stupid fingers, that should have been teststd++

[17:42] <TimToady> 1 isn't an identifier

[17:43] <TimToady> but it occurs to me that STD probably won't have caught many \w-\w errors

[17:43] <TimToady> so you probably want to ack for those

[17:44] <TimToady> 'tis possible that we enable only apostrophe:<'> by default, and just make it easy to add apostrophe:<->

[17:44] <TimToady> depending on how many problems you find

[17:45] <TimToady> biab &

[17:45] <audreyt> rehi

[17:46] *** fridim_ left
[17:46] <[particle]> howdy

[17:57] *** barney left
[17:57] *** pmurias joined
[17:57] <pasteling> "rhr" at 65.94.11.172 pasted "\w-\w from t" (9 lines, 647B) at http://sial.org/pbot/31839

[17:58] <rhr> all the \w-\w I can find in t are basically $foo-1

[17:58] <[particle]> and that's just fine

[18:00] <rhr> ah, I didn't realize the after-part needs to begin with alpha

[18:05] *** rindolf joined
[18:09] <pmurias> audreyt: you are aware of the useless use of constant in void context warnings?

[18:09] <pmurias> when using -Cyaml

[18:09] <audreyt> yes

[18:09] <audreyt> should be harmless

[18:10] <audreyt> oh

[18:10] <audreyt> hm, maybe not.

[18:10] <audreyt> ah, slight bitrot from compilation from pil1

[18:10] <audreyt> a sec. willfix in a bit

[18:12] <pmurias> the garbage line is more worring

[18:13] <pmurias> the one after the warning with strage chars

[18:14] <pmurias> s/worring/worrying/

[18:14] <pmurias> s/strage/strange/

[18:15] *** Schwern joined
[18:17] <audreyt> pmurias: write a hello_world.p6 in the m0ld dir?

[18:18] <audreyt> and write a test that calls pugs -CM0ld hello_world.p6 into a m0ld file and then a C file?

[18:18] <pmurias> audreyt: a failing one?

[18:20] <rindolf> Hi all.

[18:20] <rindolf> Hi audreyt 

[18:20] <rindolf> Hi pmurias 

[18:21] <audreyt> a failing one.

[18:22] *** ruoso joined
[18:22] <pmurias> my autotools skills really suck, i could easily put it in the smop t/

[18:23] <rindolf> pmurias: why aren't you using CMake?

[18:24] <rindolf> CMake++

[18:24] <ruoso> pmurias, about using static ID... I wanted to experiment a different approach, since smop-identifiers.h is becoming bloated...

[18:24] <lambdabot> ruoso: You have 2 new messages. '/msg lambdabot @messages' to read them.

[18:31] <pmurias> rindolf: dunno, ruoso chose autotools

[18:31] <rindolf> pmurias: ah.

[18:31] <rindolf> pmurias: for what?

[18:32] <ruoso> rindolf, basically, autotools was the way I knew for making C building portable...

[18:32] <ruoso> I know that there are Scons and CMake

[18:33] <rindolf> ruoso: ah.

[18:33] <ruoso> but as I didn't have any experience with them, and that setting up a basic autotools environment is pretty simple

[18:33] <ruoso> I didn't have much to think about...

[18:33] <ruoso> but I'm not against someone taking the job of setting up a different build system

[18:34] <ruoso> ;)

[18:34] <rindolf> ruoso: what is the project?

[18:34] <ruoso> rindolf, smop

[18:34] <rindolf> ruoso: URL?

[18:34] <rindolf> ruoso: ah.

[18:34] <pugs_svn> r21854 | pmurias++ | [m0ld] 26_m0ld_pugs.p6 - hopefull it meets audreyt++ request

[18:35] <pmurias> audreyt: sorry it took so long, fought with autotools too long

[18:35] <ruoso> rindolf, http://www.perlfoundation.org/perl6/index.cgi?smop

[18:35] <lambdabot> Title: SMOP / Perl 6

[18:37] <ruoso> pmurias, you're working on getting 'use v6' blocks ported to mold, right?

[18:37] <pmurias> i should be...

[18:38] <ruoso> do you think I should implement "if" in slime so I can get 'method lookup' implemented? or do you think I should be able to use if () {} else {}... in v6 blocks with mold soon...

[18:41] <pmurias> i don't think it makes sense to touch slime now, i'll force myself to write an elf backend, or audreyt will start a pugs one soon

[18:42] <pmurias> ruoso: a half-measure would be to enable q:m0ld blocks

[18:46] <rindolf> ruoso: Can't locate Cursor.pm in @INC

[18:46] <pugs_svn> r21855 | audreyt++ | * Do not insist on installing a profiling cabal-install dep chain.

[18:48] <rindolf> ruoso: http://search.cpan.org/search?mode=dist&query=Cursor

[18:48] <lambdabot> Title: The CPAN Search Site - search.cpan.org

[18:49] <rindolf> ruoso,. pmurias : ping.

[18:49] <pmurias> rindolf: pong

[18:49] <rindolf> pmurias: I cannot build SMOP.

[18:49] <pmurias> checking

[18:49] <rindolf> pmurias: it cannot find Cursor.pm

[18:49] <rindolf> pmurias: try "svn st"

[18:49] <pmurias> cd sm0p;sh brew

[18:50] <rindolf> pmurias: what?

[18:50] <pmurias> Cursor.pm is src/perl6/Cursor.pmc

[18:51] <rindolf> pmurias: I followed the instructions here - http://www.perlfoundation.org/perl6/index.cgi?smop_hacking

[18:51] <lambdabot> Title: SMOP Hacking / Perl 6

[18:51] <pmurias> rindolf: type that in the smop directory not everything is intergrated with the Makefile

[18:51] <rindolf> pmurias: oh. %-(

[18:51] <rindolf> pmurias: brew: line 3: cd: ../../../src/perl6/: No such file or directory

[18:51] <ruoso> rindolf, I think you need more elements from the pugs repository....

[18:51] <rindolf> ruoso: yes, so it seems.

[18:51] <rindolf> ruoso: please fix the Makefile.cvs

[18:52] <rindolf> Or the instructions at http://www.perlfoundation.org/perl6/index.cgi?smop_hacking

[18:52] <lambdabot> Title: SMOP Hacking / Perl 6

[18:52] <ruoso> rindolf, yes... the dependencies on ../../../src/perl6 are quite new...

[18:52] <pmurias> and quite temporary hopefully ;)

[18:53] <rindolf> ruoso: ah.

[18:55] <pugs_svn> r21856 | pmurias++ | [smop] make makes sm0p and m0ld

[18:57] *** AndyLunch left
[19:00] <ruoso> pmurias, I've added "have pugs compiled in the source tree" to the "In order to compile SMOP, you should:" list...

[19:00] <ruoso> is there a good link for a pugs compiling howto?

[19:01] *** cognominal_ joined
[19:01] <pugs_svn> r21857 | pmurias++ | [smop] merged brew into the (missing) Makefile

[19:01] <pmurias> ruoso: README in the repository root?

[19:01] <pmurias> ruoso: pugs is not needed yet

[19:02] <ruoso> it is, actually... since a recent commit you made ;)

[19:03] *** masak joined
[19:03] <pmurias> compiling that test never succeds as pugs -Cm0ld dosn't work yet

[19:04] <ruoso> hmm... maybe we should take it out of the default target then...

[19:04] <ruoso> (at least until it works)

[19:06] <rindolf> ruoso, pmurias : so what should I do?

[19:07] <ruoso> rindolf, does 'make all' work?

[19:08] <pmurias> ruoso: i'm fixing make test

[19:08] <rindolf> ruoso: let me try.

[19:08] <rindolf> ruoso: make all where?

[19:08] <ruoso> v6/smop

[19:09] <pugs_svn> r21858 | pmurias++ | [smop] make test runs (has failures)

[19:12] <ruoso> pmurias, I still can't make test

[19:13] <pmurias> ruoso: if you're blocked on the lexicals i can hack q:m0ld into sm0p.pl

[19:13] <ruoso> pmurias, please :)

[19:14] * ruoso anxious to have the first Perl 6 "if" in effective smop code ;)

[19:14] <pmurias> ruoso: what's your error?

[19:15] <ruoso> it tries to run ../../../pugs -Cm0ld 26_m0ld_pugs.p6 > 26_m0ld_pugs.m0ld

[19:15] <ruoso> and I don't have pugs built there

[19:16] <pmurias> it's in error ignoring mode

[19:16] <japhb> Is there a $Larry in the house?

[19:17] <pmurias> @seen TimToady #you mean

[19:17] <lambdabot> TimToady is in #perl6. I last heard TimToady speak 1h 32m 37s ago.

[19:17] <ruoso> pmurias, I have commented out the specific 26_... target and it worked

[19:18] <pmurias> to you have a - before the pugs line

[19:18] <ruoso> but that won't make it work... because you'll have an invalid 26_m0ld_pugs.m0ld file

[19:19] <pmurias> an empty one

[19:19] <pmurias> empty ones are valid now

[19:20] <ruoso> oh... I probably have a old mold

[19:20] <pmurias> ruoso: is a q:m0ld preferable to use m0ld;

[19:21] <ruoso> pmurias, feel free to choose... I think both are ok...

[19:22] <pugs_svn> r21859 | ruoso++ | [smop] make pugs m0ld compilation non-blocking on error (at least untill it works)

[19:23] <japhb> pmurias: I asked it the way I did (as $Larry) so that if he was watching the channel as a human, he would notice, but by not using his nick, I wouldn't trigger his IRC client to ping him.  Just trying to be less of an interruption ...

[19:24] * TimToady ponders whether he's here or not...

[19:24] <japhb> Like Schroedinger's assistant, you have just collapsed that wave function.

[19:25] *** sri_work joined
[19:26] <japhb> TimToady: I tried reading the backlog, but I'm confused why "can't" is more worthy of relief than "q'foo'"?

[19:27] *** alester joined
[19:27] <pugs_svn> r21860 | pmurias++ | [smop] use m0ld support for sm0p.pl

[19:28] <japhb> The concept of ident being conceptually "underscore/alpha, followed by \w+" is pretty damn ingrained in geek culture (and certainly in my brain), so this is a very odd one to me.  Mind you, oddness is not exactly something that Perl6 needs to avoid, I'm just curious why this seemed like a "no brainer", when my gut went the other way -- "this needs heavy thought"

[19:29] <ruoso> pmurias, which file naming should I use? should I still use .sm0p?

[19:29] <pmurias> yes

[19:30] * japhb reflects on Perl6 slowly adding Forth "features"

[19:31] <ruoso> pmurias, can I still reference values that are in the local C scope (like invocant), or should I get it from the capture in the 'use m0ld' block?

[19:32] <pmurias> you can use something like my $reg = $cvariable;

[19:32] <ruoso> right

[19:32] <pmurias> got to think of a syntax for c variables

[19:33] <ruoso> $¢variable?

[19:34] <pmurias> how to you type the cent?

[19:34] <ruoso> hmm.. in my keyboard... Compose, C, |

[19:34] <ruoso> but I use an unusual configuration

[19:34] * ruoso hate dead keys

[19:35] <pmurias> maybe just ¢variable?

[19:36] <pmurias> forcing ¢ on people dosn't feel right, otoh it C-K Ct in vim

[19:38] <pmurias> Can't we just use can_not instead of can't?

[19:39] <pmurias> In Perl 6

[19:40] <masak> I was surprised at the identifier/character change too 

[19:41] <pugs_svn> r21861 | ruoso++ | [smop] renaming lexicalscope to .sm0p so we can "use m0ld"

[19:41] <masak> does it work for variables as well? $will-this-work?

[19:41] <ruoso> pmurias, this is really m0ld, right? so I need to keep up with all the registers and stuff...

[19:42] <ruoso> pmurias, would you mind to port the lookup implementation in http://www.perlfoundation.org/perl6/index.cgi?smop_lexical_scope_implementation to smop_s1p_lexicalscope.sm0p?

[19:42] <lambdabot> Title: SMOP Lexical Scope Implementation / Perl 6, http://tinyurl.com/5ebhte

[19:42] * ruoso have to leave now... will get back later....

[19:42] *** ruoso left
[19:52] *** cognominal_ left
[19:57] <pmurias> audreyt: do you think syntax sugar like my $a = $b.$c(...) instead of my $a;$a = $b.$c(...); and $a = $b."c"(1) instead of $c="c";$d=1;$a = $b.$c($d) is desirable in m0ld?

[19:58] *** Alias__ joined
[20:04] *** rindolf left
[20:08] *** wknight8111 left
[20:09] <audreyt> pmurias: that particular sugar I think is good.

[20:10] <audreyt> basically I'd like Sugar>DeSugar mapping

[20:10] <audreyt> to have a clear DeSugar>Sugar choice on that level

[20:10] <audreyt> if there are two Sugar that generates the same DeSugar (not counting the DeSugar itself) then it's more questionable.

[20:10] <audreyt> making some sense?

[20:15] <pmurias> audreyt: yes

[20:15] *** Alias_ left
[20:18] *** Lorn left
[20:18] *** Lorn joined
[20:20] *** justatheory left
[20:23] <pmurias> btw. i read the quasi-quotes paper and the part 1 of SYB, and i think i'll be able to write the quasi-quotes once pugs switches to a ghc which supports it

[20:25] <audreyt> pmurias: most excellent

[20:25] <audreyt> pmurias: see regex-qq on hackage and lighttpd-conf-qq

[20:25] <audreyt> there's also a qq for hs itself!

[20:25] <audreyt> http://code.haskell.org/~morrow/code/haskell/metaquote/

[20:25] <lambdabot> Title: Index of /~morrow/code/haskell/metaquote

[20:26] <audreyt> the use of that is you can embed arbitrary haskell snippet in your dsl

[20:26] <audreyt> like of like "string { code } string" in p6 strings

[20:26] <audreyt> all in all, exciting stuff.

[20:27] *** rindolf joined
[20:28] *** scott__ joined
[20:28] *** scott__ is now known as scrottie

[20:32] *** scrottie left
[20:32] *** scott__ joined
[20:32] *** scott__ is now known as scrottie

[20:32] *** rindolf left
[20:32] *** alester is now known as AndyAway

[20:35] *** wknight8111 joined
[20:36] *** scrottie left
[20:40] *** scrottie joined
[20:40] *** cognominal_ joined
[20:42] *** fridim_ joined
[20:52] <pugs_svn> r21862 | pmurias++ | [m0ld] cleaner handling of labels

[20:53] *** mj41_ joined
[21:01] *** cognominal_ left
[21:02] *** cognominal_ joined
[21:08] *** AndyAway is now known as alester

[21:09] *** mj41 left
[21:13] *** Jamtech joined
[21:13] <pugs_svn> r21863 | pmurias++ | [m0ld] my $target = ...call.. syntax sugar

[21:13] *** mncharity joined
[21:14] <pmurias> mncharity: hi

[21:18] *** fridim_ left
[21:20] *** TJCRI left
[21:24] <pmurias> i the default haskell [Char] unicode capable, how do i read in utf8?

[21:24] *** Schwern left
[21:26] <pmurias> found what is was looking for

[21:28] <mncharity> hi pmurias

[21:28] <mncharity> "STD_red's AST output is broken and horrible", huh?

[21:28] *** rdice left
[21:32] <pugs_svn> r21864 | pmurias++ | [m0ld] Â¢foo is used to refer to the C variable Â¢foo

[21:32] * pmurias is looking at it again

[21:35] <pmurias> mncharity: if you have token baz {<foo>};token foo {<bar>};token bar {x}; and match baz against x the resulting Match has a bar Match under the key foo

[21:38] *** ron joined
[21:39] *** Jamtech left
[21:39] <ron> perl6: sub Fiddle { return 5;} say Fiddle;

[21:39] <p6eval> pugs: OUTPUT[5␤]

[21:39] <p6eval> ..rakudo 29834: OUTPUT[Statement not terminated properly at line 1, near "say Fiddle"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤]

[21:39] <p6eval> ..elf 21864: OUTPUT[Parse error in: /tmp/pnCD7AwoiG␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: sub Fiddle { return 5;} say Fi␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[21:39] <p6eval> ..STD_r...

[21:39] <pmurias> mncharity: it seems sometimes it does, sometimes it doesn't it annoyed me horribly when i attempted to write a STD5_dump_match equivalent for STD_red

[21:40] <ron> perl6: sub Faddle () { return 5;} say Faddle;

[21:40] <p6eval> elf 21864: OUTPUT[Parse error in: /tmp/dWmg7xwQFO␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: sub Faddle () { return 5;} say␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[21:40] <p6eval> ..STD_r...

[21:40] <p6eval> ..pugs: OUTPUT[5␤]

[21:40] <p6eval> ..rakudo 29834: OUTPUT[Statement not terminated properly at line 1, near "say Faddle"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤]

[21:40] <[particle]> is it legal to call without parens?

[21:41] <ron> shouldn't it be if fn is lower case ??

[21:41] <mncharity> oh, you're objecting to parse tree flattening?  pointless/unneeded nodes were removed for the obvious reason - kiss.    re "annoyed me horribly", oh, sorry about that.:(  you should mention such things.  switching to a regex-engine-equivalent Match tree was always a todo task for when actually swapping in a real regex-engine-based parser.

[21:41] <TimToady> case doesn't matter, but you need a semicolon after the }

[21:42] <mncharity> s/for when/to be done when/

[21:42] <ron> perl6: sub Fiddle { return 5;} ; say Fiddle;

[21:42] <p6eval> elf 21864, pugs: OUTPUT[5␤]

[21:42] <p6eval> ..rakudo 29834: OUTPUT[Fiddle␤]

[21:42] <ron> perl6: sub Faddle () { return 5;}; say Faddle;

[21:42] <p6eval> elf 21864, pugs: OUTPUT[5␤]

[21:42] <p6eval> ..rakudo 29834: OUTPUT[Faddle␤]

[21:42] <TimToady> ooh, rakudo is doing barewords.  ick

[21:42] <ron> sub faddle() { return 5;} ; say faddle;

[21:42] <TimToady> or it's assuming uppercase is a type

[21:42] <ron> perl6: sub faddle() { return 5;} ; say faddle;

[21:43] <p6eval> elf 21864, pugs, rakudo 29834: OUTPUT[5␤]

[21:43] <TimToady> looks like the latter is true

[21:43] <TimToady> still ick

[21:44] <ron> I'll look a little further for the moment.  Have a good weekend  all ...

[21:45] *** ron left
[21:47] <pmurias> mncharity: re horrible and annoying things the Call and Capture AST nodes deserve an unhonorable mention

[21:49] <mncharity> elaborate?

[21:51] <pmurias> mncharity look at the AST output of $foo.bar(1,2,3,a=>5)

[21:51] *** jferrero joined
[21:52] <mncharity> looking...

[21:55] <pmurias> the invocant is only defined in the wrong place,arguments receive an Apply(which should be merged with Call anyway) and the named and positionals arguments are stuffed together

[21:55] <pasteling> "mncharity" at 65.96.169.198 pasted "./elf_g -v -e '$foo.bar(1,2,3,a=>5)'" (151 lines, 5K) at http://sial.org/pbot/31841

[21:57] <pmurias> and the method is a string instead of an AST name

[21:57] <pmurias> s/name/node

[21:57] *** StephenJosephPol joined
[21:57] <pmurias> got to sleep now&

[21:57] *** pmurias left
[21:58] *** armagad joined
[21:58] *** elmex left
[22:00] <masak> there's a dead link http://rakudo.org/perl6/index.cgi?download_perl_6 from http://www.pugscode.org/

[22:01] <mncharity> Call has an invocant because $x.m($cap) $x is distinct from whatever invocant Capture $cap might have.  Apply'ing infix:, can't be merged without checking that the prelude's infix:, hasn't been overridden.  my understanding is named and positionals arguments are unavoidably stuffed together at this level.

[22:01] <mncharity> the AST output of STD_red no doubt has a great many problems.  but my impression is those 4 aren't among them.

[22:02] *** armagad left
[22:03] <mncharity> The name as string, yes, that's perhaps excessive kiss.

[22:04] <TimToady> how does $a.$b() come out?

[22:04] <mncharity> looking...

[22:08] <pasteling> "mncharity" at 65.96.169.198 pasted "./elf_g -v -e '$a.$b()'" (75 lines, 1.9K) at http://sial.org/pbot/31842

[22:08] *** masak left
[22:09] <mncharity> the parse tree looks plausible (this is the old STD expect_term post stuff), but I didn't (hand write) a Match node creation for that case, so it doesn't show up in the ast.

[22:10] *** Khisanth left
[22:11] *** Khisanth joined
[22:13] <mncharity> for anyone curious, the duplicate dotty entries result from the old STD's EXPR adding non-tree cross links to propagate around operator precedence.

[22:16] <mncharity> The Match tree (comp_unit...) is what STD_red generates.  The IR (CompUnit(...)) is created from the Match tree by IRx1_FromAST.pm.

[22:19] *** alester left
[22:19] *** alester joined
[22:22] <mncharity> elf calls the Match tree the AST, and the CompUnin(Var(...)) etc the IR.  rakudo calls the IR the AST.  pmurias's critiques were about the IR, rather than the AST, and thus not directly a STD_red issue (which only creates the Match AST).  Responding about the IR, I too called it the AST... which I herewith clarify. :)

[22:24] *** Alias_ joined
[22:30] <mncharity> Since I was just thinking "we really need to have more project/design discussion/deliberation, I'll sketch out what I see myself as working on.

[22:33] <mncharity> elf's backend (ie, compiler) is written in p6, but not it's frontend (parser), and most of the p5 runtime is written in p5.  My objective is to have frontend, backend, and most of the runtime, written in p6.  And to have a second, common lisp backend, both to force the runtime cleanup, and, because it has a

[22:35] <mncharity> very similar compiletime + dynamic-runtime story to p6, to get a *very* fast p6 implementation.  Eg, 10-100x faster than p5, rakudo, and pugs. 

[22:39] <mncharity> Near term goals are to create a STD_blue which uses STD to take code and dump a Match tree ast (as STD_red does), and then a new IRx1_FromAST2.pm which massages that ast into an IR tree.  I'm not sure whether to walk through STD.pm, attempting thorough IR coverage, or do "just enough to bootstrap, and then do a fleshing out pass later".

[22:41] *** Schwern joined
[22:42] *** Alias__ left
[22:45] <mncharity> STD is currently too slow to use as the primary elf parser.  So the next step is to use the STD_blue parsing of regex to get the rx_on_re working.  I'm hoping to fudge around needing longest-token, and leave that for someone else to do.  Once a STD_blue elf can compile STD.pm, a new elf variant (elf_h?) will discard STD_red and STD_bluee, and use compiled STD.pm directly.

[22:46] *** Khisanth left
[22:46] *** jiing left
[22:46] *** orafu left
[22:46] *** zostay left
[22:46] *** Ara4n left
[22:46] *** p6eval left
[22:46] *** Guest16015 left
[22:46] *** ilbot2 left
[22:46] *** gbacon left
[22:47] *** bbkr left
[22:47] <mncharity> At that point, everything but the runtime will be implemented in p6.  With some IR analysis and emitter cleanup, focus then shifts to the CL backend.  I'm hoping to do "real" p6 oo internals on the CL backend, but continue to fudge it on the p5 backend (I'll leave fighting perlbugs and such to someone else).

[22:48] <mncharity> Questions, comments, thoughts, whatever, welcome.

[22:49] *** Limbic_Region joined
[22:49] *** Khisanth joined
[22:49] *** jiing joined
[22:49] *** orafu joined
[22:49] *** zostay joined
[22:49] *** Ara4n joined
[22:49] *** p6eval joined
[22:49] *** gbacon joined
[22:49] *** Guest16015 joined
[22:49] *** ilbot2 joined
[22:49] *** moritz_ left
[22:50] *** xinming left
[22:50] *** xinming joined
[22:50] *** bbkr joined
[22:53] *** alester is now known as AndyAway

[22:57] *** apeiron_ joined
[23:01] *** jferrero left
[23:02] *** jferrero joined
[23:04] *** apeiron left
[23:05] <mncharity> (127 people in room, but so very quiet)

[23:07] <mncharity> &

[23:07] *** mncharity left
[23:09] *** jferrero left
[23:12] *** justatheory joined
[23:14] *** moritz_ joined
[23:19] * scrottie stiffles a sneeze

[23:21] * scrottie reads with carefully attention

[23:21] <Limbic_Region> whatcha reading?

[23:21] <scrottie> mncharity's state of the elf.

[23:22] <Limbic_Region> link?

[23:22] <scrottie> I was afk while he actually said it, doing a few laps on Ridge Racer R4 to clear my mind.

[23:22] *** moritz_ left
[23:22] *** moritz_ joined
[23:23] <scrottie> http://irclog.perlgeek.de/perl6/today

[23:23] <lambdabot> Title: IRC log for #perl6, 2008-08-08

[23:23] <scrottie> there it is.

[23:42] *** meppl joined
[23:50] <Limbic_Region> thanks

