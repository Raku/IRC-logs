[00:12] *** pedrob_ left
[00:13] *** cognominal left
[00:19] *** eternaleye joined
[00:24] <spx2> wayland76: wow,are you fro real ?

[00:29] *** xiaoyafeng_ left
[00:39] *** ab5tract left
[00:43] *** explorer left
[00:45] *** ab5tract joined
[00:49] *** Limbic_Region left
[00:58] *** wayland_ joined
[01:01] *** wayland76 left
[01:22] *** ab5tract left
[01:23] <meppl> good night

[01:24] *** meppl left
[01:33] *** Ontolog joined
[01:39] <wayland_> spx2: possibly.  If you could specify what you mean by "for real", I might be able to answer the question.  I'm assuming you're an American, and I'm aware that the use of "for real" in American slang may vary somewhat from what I'm used to (I live in Australia)

[01:43] <spx2> wayland_: I'm european actually :) ... I mean...I'm trying to be realistic and I'm looking for realistic views when I pose a question

[01:43] <spx2> wayland_: and I periodically pose this question here in the channel because I am interested to know when it's out,and it's no kind of journalistic interest..it's a personal interest

[01:53] <Ontolog> is someone already working on Hash.contains?

[02:01] *** smtms_ joined
[02:02] <wayland_> spx2: Well, I keep hearing reports of a Christmas deadline (for the basic language, not the libraries); assuming that's true, a number of the basic libraries should be implemented towards the end of January

[02:02] *** justatheory left
[02:02] <wayland_> spx2: oh, and apologies for assumption :)

[02:04] <wayland_> I'm using https://svn.perl.org/parrot/trunk/languages/perl6/ROADMAP (last updated in August) as the basis for my optimism :)

[02:05] *** Alias_ joined
[02:13] *** smtms left
[02:29] *** spx2_ joined
[02:30] *** spx2_ left
[02:30] *** spx2_ joined
[02:41] *** spx2 left
[02:48] *** alester_ joined
[02:49] *** alc joined
[03:42] *** bacek joined
[03:54] *** Psyche^ joined
[03:55] *** xinming left
[03:56] *** hercynium joined
[04:02] *** xinming joined
[04:09] *** Patterner left
[04:09] *** Psyche^ is now known as Patterner

[04:29] *** |Jedai| joined
[04:45] *** Jedai left
[04:46] *** Jedai joined
[04:47] *** _Jedai_ left
[05:05] *** agentzh left
[05:05] *** agentzh joined
[05:09] *** ab5tract joined
[05:17] *** ab5tract left
[05:17] *** Entonian joined
[05:19] *** ab5tract joined
[05:32] *** bacek left
[05:33] *** araujo left
[05:37] *** Entonian left
[05:39] *** Ehtyar left
[06:04] *** alester_ left
[06:07] <wayland_> @tell moritz_ I've been playing with a CSS2 grammar

[06:07] <lambdabot> Consider it noted.

[06:08] *** ab5tract left
[06:20] *** [1]Maghnus joined
[06:25] *** Maghnus left
[06:25] *** [1]Maghnus is now known as Maghnus

[06:29] *** smg left
[06:30] *** bacek joined
[06:31] *** Bzek joined
[06:33] *** Maghnus left
[06:34] *** ab5tract joined
[06:34] *** azawawi joined
[06:35] <azawawi> ping

[06:41] <crksht> pong

[06:46] <pugs_svn> r22835 | azawawi++ | [STD_syntax_highlight] dropped --simple DumpMatch in favor of the agile --redspans

[06:46] <crksht> ?

[06:47] <azawawi> hi crksht

[06:47] <crksht> hiya

[06:47] *** Maghnus joined
[06:55] <pugs_svn> r22836 | lwall++ | [Cursor] {_to} is gone, {_from} now set only on bound cursors, unbound cursors

[06:55] <pugs_svn> r22836 | lwall++ |     now only propagate {_pos} (will help optimization of simple traversals)

[06:56] <azawawi> TimToady: ping

[06:58] <TimToady> tennis

[06:58] <TimToady> er, pong

[06:58] <azawawi> ;-)

[06:59] <azawawi> TimToady: im going to replace DumpMatch with redspans today

[07:00] <azawawi> TimToady: im curious to know... why the name 'redspans'?

[07:00] <TimToady> well, it was reds for "reductions", then I added span for the from/to span calculations

[07:01] *** zamolxes joined
[07:01] <TimToady> it was only later I realized it might be confusing with redsix...

[07:01] <azawawi> ok

[07:02] <pugs_svn> r22837 | azawawi++ | [STD_syntax_highlight] ETOOMUCHTIME --simple => --redspans

[07:02] <TimToady> I'm not particularly attached to that name

[07:03] <azawawi> yeah im going to change it once im finished; STD_p6_hilite --output=html|ansi|txt -mode=simple|full

[07:04] <TimToady> I mean redspands, not E*

[07:05] * azawawi is seeing breakfast looming in the distance...

[07:05] * azawawi breakfast &

[07:05] <TimToady> wow, it's already tomorrow here...

[07:05] <azawawi> 9:05am here

[07:05] <azawawi> and it is a holiday btw

[07:06] <moritz_> we have the holiday tomorrow

[07:06] <lambdabot> moritz_: You have 2 new messages. '/msg lambdabot @messages' to read them.

[07:06] <azawawi> it is basically fri+sat here in jordan

[07:06] *** bacek left
[07:06] * azawawi breakfast... later &

[07:07] <TimToady> chow

[07:07] <TimToady> er, ciao

[07:07] <literal> pugs: [~] <m oo se>

[07:07] <p6eval> pugs: RESULT["moose"]

[07:08] <literal> pugs: [~^] <m oo se>

[07:08] <p6eval> pugs: RESULT["q\n"]

[07:09] <literal> is that a q and a newline or a q, backslash, n?

[07:09] <TimToady> I would think it would end up with 2 chars

[07:11] <TimToady> pugs: chars [~^] <m oo se>

[07:11] <p6eval> pugs: RESULT[2]

[07:21] *** ashizawa joined
[07:40] *** ab5tract left
[07:46] *** charsbar left
[07:46] *** charsbar joined
[07:59] *** smg joined
[08:01] *** Maghnus left
[08:01] *** [1]Maghnus joined
[08:02] *** [1]Maghnus is now known as Maghnus

[08:04] *** pbuetow joined
[08:06] *** Maghnus left
[08:06] *** Maghnus joined
[08:08] *** araujo joined
[08:13] *** elmex joined
[08:22] *** smg left
[08:30] *** pbuetow left
[08:31] *** cognominal joined
[08:34] *** jferrero joined
[08:36] *** Ontolog left
[08:41] *** pmurias joined
[08:46] *** iblechbot joined
[08:48] *** xinming left
[08:48] *** xinming joined
[08:52] *** masak joined
[08:53] <pmurias> wayland_: there's a huge gap between usefull for something and fully finished

[09:01] *** pmurias left
[09:05] <pugs_svn> r22838 | azawawi++ | [STD_syntax_highlight] no DumpMatch; #it is been 'nice' seeing ya

[09:05] <pugs_svn> r22838 | azawawi++ | [STD_syntax_highlight] no more javascript tree traversal; tree info is hidden in html 

[09:05] <pugs_svn> r22838 | azawawi++ | [STD_syntax_highlight] You can consider this an SP1 ;-)

[09:07] <azawawi> moritz_: DumpMatch.pm has been retired from service, DumpMatch.pm++

[09:10] <masak> DumpMatch.pm is dead, long live DumpMatch.pm!

[09:10] <azawawi> ;-)

[09:11] <pugs_svn> r22839 | azawawi++ | [STD_syntax_highlight] no more podchecker warnings;

[09:19] *** smtms_ is now known as smtms

[09:21] *** cosimo joined
[09:24] *** zamolxes left
[09:25] <azawawi> im seeing a constant load average of 5 on feather1 even though we have 3 users online

[09:26] * azawawi wishes for feather4 to be a supercomputer ;-)

[09:27] <azawawi> load avg cause so far is "sslh & readproctitle"

[09:29] <azawawi> @tell juerd load avg is 4-5 on feather; sslh + readproctitle are taking a lot of the cpu. thx [9:29 GMT]

[09:29] <lambdabot> Consider it noted.

[09:37] *** Lorn joined
[09:52] *** smg joined
[10:11] <masak> @tell TimToady In Java, the .contains method in Hashtable was considered a mistake in hindsight, becuase some people thought it was synonymous with .containsKey and some with .containsValue -- the newer class HashMap therefore has no .contains method, to avoid confusion. Do you foresee similar confusion in Perl 6? Also, why do we have both .contains and :exist, when they seem to do the same thing?

[10:11] <lambdabot> Consider it noted.

[10:14] *** pedrob joined
[10:20] *** tomyan joined
[10:30] *** Lorn left
[10:32] *** azawawi left
[10:33] *** crksht is now known as chkghst

[10:34] *** chkghst is now known as crkghst

[10:41] <wayland_> @tell pmurias I presume the comment about the gap between useful and finished relates to my advice to spx2, but I'm still not sure what you're saying :)

[10:41] <lambdabot> Consider it noted.

[10:53] *** pmurias joined
[10:55] *** ashizawa left
[10:58] <pmurias> wayland_: what i meant is that rakudo will become usefull much sooner than it support the whole of perl6

[10:58] <lambdabot> pmurias: You have 1 new message. '/msg lambdabot @messages' to read it.

[10:59] *** riffraff joined
[11:00] *** ruoso joined
[11:00] <masak> rakudo: sub alwaystrue { return 1 }; say 0 ~~ alwaystrue

[11:00] <p6eval> rakudo 31963: OUTPUT[0␤]

[11:00] <masak> that's wrong, isn't it?

[11:02] <masak> the match table in S03 seems to indicate that when a Code is smartmatched against in any context other than $, then it should ignore the lhs and return its own return value

[11:03] <moritz_> masak: but you have to write that as ~~ &allwaystrue in rakudo

[11:03] <masak> oh, that's right. sorry.

[11:04] <masak> rakudo: sub alwaystrue { return 1 }; say 0 ~~ &alwaystrue

[11:04] <p6eval> rakudo 31963: OUTPUT[1␤]

[11:04] <masak> that's better.

[11:04] <masak> false alarm.

[11:07] <masak> rakudo: class A { method alwaystrue { return 1 } }; given A.new { say "irrelevant" ~~ .alwaystrue }

[11:07] <p6eval> rakudo 31963: OUTPUT[0␤]

[11:07] <masak> that, however, seems wrong to me

[11:10] <masak> S03, again, says that Any ~~ .foo translates to ?.foo

[11:10] <masak> if that were the case above, we'd get a 1 back

[11:14] <wayland_> pmurias: yeah, I know; it's at least somewhat useful now (November :) ), but the code that I'm attempting to write, that nearly all other code that I want to write depends on, seems to require macros and operator overloading :)

[11:14] *** alc left
[11:14] <wayland_> And the one other piece of code I was working on ran into the recursion/for loop bug :)

[11:15] <masak> ah, that one. :)

[11:16] <masak> at least there's a light at the end of the tunnel regarding that bug, with the lex branch that pmichaud++ is working on

[11:16] <wayland_> Yup :)

[11:17] <wayland_> Basically, the bug hampered me when I was trying to turn Moritz' XML Grammar into a tree :)

[11:17] <wayland_> (that is, a DOM-style tree)

[11:17] <masak> I can imagine.

[11:17] <masak> (moritz_ has an XML grammar?)

[11:17] <wayland_> So the only code I have that doesn't seem to be running in to some sort of bug is the CSS parser :)

[11:17] <wayland_> well, kinda

[11:18] <masak> I might be interested in that.

[11:18] <masak> if it's for public eyes, that is.

[11:18] <wayland_> Well, what I've written so far isn't

[11:18] <moritz_> masak: it's on my blog

[11:18] <wayland_> But Moritz' stuff is

[11:19] <masak> moritz_: ah, that's why I haven't seen it. I'm behind on my firehose.

[11:20] *** Ontolog joined
[11:20] <moritz_> masak: it's nothing new... lessen 22 or 23 or something...

[11:20] <masak> oki, then I may have seen it but forgotten about it.

[11:21] <masak> my dream is to some day be able to do XSLT in Perl 6.

[11:21] <wayland_> All I did was attach a tree-building function to it

[11:21] <masak> then we could ditch HTML::Template entirely! :)

[11:21] <wayland_> and it doesn't work because of the bug :)

[11:22] <wayland_> When you say XSLT, do you mean actual XSLT, or just perform similar functions to XSLT?

[11:22] <masak> the real thing.

[11:23] <wayland_> The thing that I need operators and macros for is a Tree thing that will hopefully allow you to do tree transforms, and then spit out the tree as XML, or LDAP, or whatever you want to put in

[11:23] <wayland_> masak: ok.  I hated XSLT, but I love XPath :)

[11:23] <masak> I like both.

[11:23] <masak> the only thing I slightly dislike about XSLT is that it's a bit verbose.

[11:23] <wayland_> yeah, that's what I hated :)

[11:24] <masak> but the better I got at XPath, the smaller that problem seemed to become.

[11:24] <wayland_> and I also (don't laugh) thought that the syntax was naturally less readable than it could've been :)

[11:25] <masak> the syntax of XSLT or of XPath?

[11:26] <masak> to this day, I still sometimes write '/' instead of 'div' when trying to divide numbers in XPath

[11:26] <wayland_> XSLT; XPath is wonderful just the way it is, except I would like it if you could make it select an attribute by default rather than nodeName() :)

[11:26] <wayland_> http://search.cpan.org/dist/XML-XPathScript/lib/XML/XPathScript.pm

[11:26] <wayland_> Hae you seen XPathScript?

[11:27] <wayland_> Yeah, the multiple / meaning is a pain

[11:27] <wayland_> I wasted some time once designing the perfect keyboard.  Unfortunately it had over 180 keys, but you could to the division symbol on it

[11:28] <masak> moritz_: ah. found it: http://perlgeek.de/blog-en/perl-5-to-6/20-a-grammar-for-xml.writeback

[11:28] <lambdabot> Title: blog | Perlgeek.de Blog :: A grammar for (pseudo) XML, http://tinyurl.com/6kczpc

[11:28] <wayland_> the -:- sort of one

[11:28] <masak> wayland_: XPathScript: hadn't seen.

[11:29] <wayland_> You can do some pretty cool things with it :)

[11:29] <masak> wayland_: anyway, I think XSLT is a perfect fit for HTML templates.

[11:29] <masak> the challenge will be making it fast enough to be usable.

[11:29] <wayland_> :)

[11:30] <masak> preferably without resorting to C bindings, although that's certainly an alternative if All Else Fails.

[11:30] <masak> or will be, I don't know about the state of FFI in Parrot.

[11:31] <wayland_> Well, I put in an ugly piece of code to integrate it with Mason, and then I could write a template for each XML tag, and it all happened :)

[11:31] <wayland_> FFI?

[11:32] <wayland_> if you mean Native Call Interface, I tried to use their converter to turn .h files into the appropriate PIR, and it didn't work

[11:32] <masak> Foreign Function Interfact -- at least that's what I think it's called

[11:32] <wayland_> (tried to link the Enlightenment Widget Library to parrot :) )

[11:32] <masak> yeah, might be NCI I mean :)

[11:33] <wayland_> well, I only know because I played with it the day before yesterday for the first time

[11:33] <wayland_> :)

[11:39] <masak> maybe we should settle for calling xsltproc as an external process... I actually don't know how the cost of calling an external process compares against the cost of insisting on doing the whole recursive matching in Perl 6 ;)

[11:40] <masak> ...also, some people may rightly complain that xsltproc isn't written in Perl 6, and that November is meant to showcase Perl 6 features.

[11:40] *** pedrob left
[11:45] *** ejs joined
[11:57] <wayland_> Well, as the song says "You can't please everyone, so ya ... gotta please yourself".  

[11:57] <wayland_> :)

[11:58] <wayland_> Goodnight all (I learned my lesson well) :)

[11:58] <wayland_> betime &

[11:59] <masak> 'night

[12:02] *** smtms left
[12:16] *** sri_kraih joined
[12:23] *** zch051383471952 joined
[12:27] *** kane_ left
[12:31] *** sri_kraih_ left
[12:33] *** sri_kraih left
[12:33] *** kane_ joined
[12:34] *** sri_kraih joined
[13:01] <pmurias> ruoso: re "in optimizers i trust" how are they supposed to remove the overhead with the proposed smop/p5 integration?

[13:01] *** smtms joined
[13:03] <PerlJam> pmurias: I tend to view anything integrating with perl 5 guts as "hard" :-)  But other than that, it just seems like a lot of work in that there are several steps and you have to be careful to get them just right or you get lots of breakage.

[13:09] *** Lorn joined
[13:11] <[particle]> that's why you talk to p5p and make them do the hard work :)

[13:35] *** masak left
[13:38] <ruoso> pmurias, optimization is not an area that I know... but there are dark magics that I've heard of about detecting repeated patterns and avoiding repetitive tests...

[13:40] <pmurias> ROADMAP wise, it's not a thing we should be doing right now? 

[13:41] <PerlJam> get it working first, then get it working fast :)

[13:41] <ruoso> "all evil is premature optimization squared"

[13:42] <pmurias> what i meant more is the perl5 integration as a whole

[13:42] <ruoso> that's what I'm already experimenting...

[13:42] <ruoso> I've git clonned p5 just yesterday

[13:42] <PerlJam> pmurias: oh!  Why do you think not?

[13:43] <pmurias> PerlJam: is was thinking that we should bootstrap the metamodel first

[13:43] <pmurias> s/is/i/

[13:43] <PerlJam> Hmm

[13:43] <PerlJam> seems like that could happen in parallel

[13:43] <ruoso> I'm still tempted to 'use SMOP' to do that first

[13:44] <PerlJam> though, I guess, if you've got limited resources, you might want to optimize utilization of those resources ...

[13:44] <PerlJam> (that's the one case where premature optimization is NOT evil)

[13:44] <pmurias> perl5 integration would allow us to cheat during the bootstrap

[13:46] <pmurias> PerlJam: we have very limited resources but doing things in parrarel is more -Ofun ;)

[13:49] <ruoso> pmurias, I'm not sure yet if we need to cheat 

[13:52] <ruoso> pmurias, I do think we can bootstrap the metamodel with the things we have

[13:53] <ruoso> I think the thing to do now is to work on mildew to have it making the correct declarations

[13:54] <ruoso> I have a feeling that if we implement all built-in types in Perl 6

[13:54] <ruoso> mildew will have how to bootstrap the type system

[13:56] <PerlJam> ruoso: where's the p5 git repo?  (where did you clone from?)

[13:57] <ruoso> git clone git://perl5.git.perl.org/perl.git

[13:57] <PerlJam> hmm.  that's what I just used but it's saying connection refused.

[13:58] <pmurias> ruoso: are there any other uses of the C stack than having a inner runloop?

[13:58] <ruoso> pmurias, in p5?

[13:58] <pmurias> yes

[13:58] <ruoso> unfortunally, yes

[13:59] <ruoso> the evaluation of BEGIN recurses in the C stack

[13:59] <ruoso> while the code is still parsing

[14:00] <ruoso> as well as require

[14:01] <ruoso> er... the 'require' keyword, I mean...

[14:03] <ruoso> but I'm trying to keep hope that this can be fixed

[14:21] <spx2_> does perl6 have better non-adhoc/non-improvisational organized object-oriented features ?

[14:21] <spx2_> or will it have when it's out ?

[14:21] <PerlJam> spx2_: um ... yes?

[14:21] <[particle]> S11?

[14:21] <[particle]> er, S12

[14:21] <spx2_> PerlJam: can I please see a bit of code samples maybe ?

[14:22] <[particle]> http://perlcabal.org/syn/S12.html

[14:22] <lambdabot> Title: S12

[14:22] <spx2_> is Moose somehow part of Perl6 ? 

[14:22] <pmurias> spx2_: class Foo { has $.bar; method foo {say "foo"} }

[14:22] <spx2_> will there be Moose in Perl6 or will it be part of the core ?

[14:22] <PerlJam> spx2_: no.

[14:22] <spx2_> oh that's nice

[14:23] <PerlJam> spx2_: Moose is built from ideas stolen from Perl 6.

[14:23] <[particle]> also see files in directories starting with S12- in http://svn.pugscode.org/pugs/t/spec/

[14:23] <lambdabot> Title: pugs - Revision 22839: /t/spec

[14:24] <ruoso> spx2_, http://feather.perl6.nl/~azawawi/html_smop/src-s1p/Object.pm.html <-- this is already parseable by STD

[14:24] <lambdabot> Title: ../../v6/smop/src-s1p/Object.pm

[14:28] <spx2_> √

[14:28] <spx2_> ×

[14:28] <[particle]> stevan has said many times moose is a bridge to perl 6 oo, and will go away

[14:28] <spx2_> what are those symbols ? fail/ok tests ?

[14:28] <spx2_> wow,I've never been present at none of the times stevan said that

[14:29] <spx2_> but anyway

[14:29] *** jferrero left
[14:30] <PerlJam> spx2_: go to #moose and prod stevan into saying it again :)

[14:30] <spx2_> :)

[14:30] <PerlJam> [particle]: I think Moose will go away just as soon as there's a Perl 6ish replacement.  Otherwise, it's sticking around for a whle.

[14:30] <PerlJam> s/whle/while/

[14:35] <spx2_> is this perl6 syntax @object».meth(@args)  ?

[14:35] <spx2_> that character » ... that's not on my kb

[14:36] <ruoso> » means "do it in all elements of @object"

[14:39] <[particle]> for the unicode-impaired, you can use >>

[14:39] <[particle]> @object>>.meth()

[14:39] <lambdabot> Unknown command, try @list

[14:39] * [particle] @kicks lambabot

[14:39] *** Limbic_Region joined
[14:43] <pmurias> PerlJam: what are the features that Moose provides that Perl 6 doesn't have built in?

[14:44] <PerlJam> none that I know fo.

[14:44] <PerlJam> s/fo/of/

[14:49] <[particle]> perl 5 integration? ;)

[14:50] <PerlJam> [particle]++

[14:51] * araujo wonders what Moose is

[14:53] *** spx2_ left
[14:53] *** spx2 joined
[14:53] <PerlJam> araujo: perl 6 object model in perl 5.

[14:54] <araujo> aah, thanks PerlJam 

[14:58] <[particle]> perl 6-like object mode

[14:58] <[particle]> *model

[14:59] <PerlJam> perl 6 object model minus the things I don't really understand or see a need for  :)

[15:02] <PerlJam> mst actually asked me the other day what perl 6 had that moose needed and after reviewing S12, I couldn't find anything that fit the bill.

[15:02] <PerlJam> (other than actual language support for types, type signatures, etc. :)

[15:03] <Tene> Juerd isn't around, and I'm getting segfaults on feather3

[15:03] *** rdice joined
[15:05] <diakopter> Tene: /msg Juerd..

[15:05] <Tene> Oh, huh.  Thanks.

[15:06] <diakopter> he said he was cutting back on channels.  irc rehab, I guess.

[15:19] *** zch051383471952 left
[15:19] *** Alias_ left
[15:21] *** meppl joined
[15:21] <meppl> gugu

[15:27] *** eternaleye left
[15:28] *** Exodist joined
[15:33] *** adc_Penner joined
[15:35] *** hercynium left
[15:48] *** tak` joined
[15:48] *** tak` is now known as tak11

[15:53] <tak11> is there an estimated date on perl 6? =x

[15:55] *** tak11 left
[15:59] *** justatheory joined
[16:03] *** ejs left
[16:16] *** pmurias left
[16:32] *** anonymous_ left
[16:33] *** pedrob joined
[16:40] *** zamolxes joined
[16:57] *** mj41_ left
[17:02] *** mj41 joined
[17:02] *** rdice left
[17:16] *** azawawi joined
[17:19] *** tomyan left
[17:26] *** pedrob left
[17:29] <azawawi> ping -b

[17:34] <[particle]> sorry, i can't find -b in the dns.

[17:34] <[particle]> :P

[17:34] <azawawi> ;-)

[17:37] <azawawi> check this out: http://feather.perl6.nl/~azawawi/html/S05-mass/rx.t.simple.html

[17:37] <lambdabot> Title: Error

[17:37] <azawawi> ulimit++

[17:38] <[particle]> :)

[17:39] *** ab5tract joined
[17:46] <TimToady> we could probably cut down memory usage by not storing the tree if it's just going to be thrown away anyway.

[17:46] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:49] *** Southen joined
[17:50] <pugs_svn> r22840 | azawawi++ | [STD_syntax_highlight] changed the redspans* to simple*

[17:52] <azawawi> i cant benchmark correctly on feather1 since load avg seems to be between 3-5 all the time.

[17:53] <azawawi> TimToady: im actually embedding the tree in the full javascript html... 2 spans for each colored span

[17:53] <azawawi> http://feather.perl6.nl/~azawawi/html/S05-substitution/subst.t.html

[17:53] <lambdabot> Title: ../../t/spec/S05-substitution/subst.t, http://tinyurl.com/6qpvne

[17:54] *** bcornett joined
[17:55] <azawawi> since we call 

[17:56] *** pbuetow joined
[17:56] <azawawi> TimToady: since STD.pm calls AUTOLOAD to fill the @loc array, i think we can print it out on each call (to reduce memory usage)...

[18:00] <TimToady> I'm thinking of detecting a call to parsefile in void context, and throwing away all repeating elements, on the assumption that anything that checks a repeating element for its value is only interested in the final one.

[18:00] <TimToady> so it would throw away each statement when it has parsed another, for instance

[18:00] <TimToady> you'd still get all the action calls though

[18:01] * azawawi is working --ansi-color mode ;-)

[18:01] <TimToady> it'd be enough for redspans, or for checking that a file compiles correctly

[18:03] <TimToady> maybe just hardwire it to throw away old statements in void context

[18:03] <TimToady> might cut memory usage way down for files like rx.t

[18:09] *** mj41 left
[18:23] <ab5tract> what is a redspan?

[18:25] <[particle]> http://svn.pugscode.org/pugs/src/perl6/redspans

[18:25] <ab5tract> thanks [particle] 

[18:42] <pugs_svn> r22841 | azawawi++ | [STD_syntax_highlight] implemented --ansi-text to print out ANSI color escape sequences

[18:44] *** ZuLuuuuuu joined
[18:47] *** spx2 left
[19:01] *** pmurias joined
[19:02] <pmurias> ruoso: the SMOP perl5 bindings are powerfull enough for what mildew needs now?

[19:02] <ruoso> pmurias, I think so... I don't think we need to callback p5 to have the type system bootstrapped 

[19:06] *** ZuLuuuuuu left
[19:07] <pugs_svn> r22842 | azawawi++ | [STD_syntax_highlight] --simple-html=- is enabled by default if no other option is found

[19:08] <pmurias> ruoso: how should control flow be represented in the tree form of mold as seperate nodes for if,while...?

[19:09] <ruoso> pmurias, what do you mean?

[19:14] <pmurias> what should mildew turn while or an if into, mold has an unconditional and conditional jumps but it's inconvenient to have those in a tree 

[19:14] <pmurias> tree being the mildew AST

[19:15] *** lisppaste3 left
[19:15] *** pbuetow left
[19:15] *** lisppaste3 joined
[19:16] <ruoso> pmurias, oh... right... I think you can use the conditional branch, but still have the block as a new code object

[19:16] <ruoso> the alternative would be to have them as s1p types

[19:17] <ruoso> (I'm not sure if you can avoid a type with while...)

[19:17] * pmurias is confused

[19:17] <ruoso> the m0ld for an Perl 6 if would look like:

[19:17] <ruoso> if $cond { goto then; } else { goto else; };

[19:17] <ruoso> then:

[19:18] <ruoso> my $thencode = ¢SMOP__S1P__Code."new"();

[19:18] <ruoso> $thencode."postcircumfix:()"

[19:18] <ruoso> goto end:

[19:18] <ruoso> else:

[19:18] <ruoso> my $elsecode = ¢SMOP__S1P__Code."new"(...)

[19:18] <ruoso> $elsecode.()

[19:18] <ruoso> end:

[19:19] <ruoso> pmurias, do you see what I mean?

[19:19] <pmurias> yes

[19:19] <ruoso> but I'm not sure you can do that for while

[19:19] <ruoso> because I think while also return each value of the loop iirc

[19:20] <pmurias> what i'm unsure about how should should the if be represented in the treeified form of m0ld

[19:21] <ruoso> OP::If(then => mold { }, else => mold { })?

[19:21] <ruoso> actually

[19:21] <ruoso> OP::If(cond => { },then => mold { }, else => mold { })?

[19:21] <ruoso> or something like that

[19:21] *** riffraff left
[19:22] <pmurias> it

[19:23] <pmurias> 's the AST package now

[19:24] <ruoso> pmurias, right... but I think the idea would still be the same, right?

[19:28] *** LimbicRegion joined
[19:29] <azawawi> @seen TimToady

[19:29] <lambdabot> TimToady is in #perl6. I last heard TimToady speak 1h 25m 37s ago.

[19:30] <pugs_svn> r22843 | pmurias++ | [smop] bytecode length is calculated when creating a new Mold, smop_mold is also included

[19:31] <pmurias> ruoso: yes exactly the same, was unsure if labels wouldn't be saner but propably not

[19:31] <ruoso> pmurias, the problem with that is that each block is a new lexical scope

[19:32] <ruoso> so better use S1P__Code

[19:46] *** Limbic_Region left
[19:46] *** LimbicRegion is now known as Limbic_Region

[19:48] * ruoso later &

[19:48] *** ruoso left
[20:10] <azawawi> @tell TimToady i got it: Reduce @loc to contain string->tree instead of char->tree (i.e move code in redspans MAIN to AUTOLOAD...)

[20:10] <lambdabot> Consider it noted.

[20:12] <azawawi> @tell lambdabot try {my $to_be_nice;}

[20:12] <lambdabot> Nice try ;)

[20:25] <pugs_svn> r22844 | azawawi++ | [STD_syntax_highlight] fixed a typo [redspans->simple]

[20:31] <azawawi> good night &

[20:31] *** azawawi left
[20:38] *** bacek joined
[20:43] *** Lorn left
[20:46] *** Lorn joined
[20:46] *** ab5tract left
[21:05] *** zamolxes left
[21:09] *** renormalist joined
[21:18] *** dolmen joined
[21:33] *** crkghst is now known as crksht

[21:53] *** bacek left
[22:00] *** pedrob joined
[22:06] *** smg left
[22:37] *** adc_Penner left
[22:38] *** alester left
[22:40] *** Maghnus left
[22:44] *** REPLeffect left
[22:47] *** Lorn left
[22:52] *** iblechbot left
[22:59] *** masak joined
[23:07] *** Maghnus joined
[23:26] *** pmurias left
[23:28] <masak> happy November, everyone!

[23:33] <wayland_> Happy November to you too :)

[23:33] <masak> :-)

[23:34] <masak> 十一月快乐!

[23:34] <masak> I hope I got that right.

[23:35] <masak> perl6: say "十一月快乐".chars

[23:36] <p6eval> elf 22844, pugs, rakudo 31963: OUTPUT[5␤]

[23:36] <masak> eh, not bad.

[23:37] *** smg joined
[23:39] <wayland_> :)

[23:39] <wayland_> About all I can tell is it's asian :)

[23:39] <wayland_> Anyone know if there's a Data::Dumper equivalent for rakudo?

[23:40] <masak> wayland_: yes, I guess it's too short to rule out Japanese.

[23:40] <masak> wayland_: but you should recognize that it's not Hangul. :)

[23:40] *** Limbic_Region left
[23:40] <wayland_> I've never spent enough time looking at the asian languages to be able to tell the difference

[23:41] <wayland_> although I could probably pick the sanskrit-descended ones from the ones further east

[23:41] <masak> takes a few minutes to learn to tell them apart.

[23:41] <wayland_> and the other alphabetic ones; I think there's some in south-east asia

[23:41] <wayland_> masak: sounds easy.  Any tips where on the web I learn this?

[23:41] <masak> though learning to distinguish Simplified Chinese from Traditional is not always easy.

[23:42] <masak> wayland_: just hit the various articles on Wikipedia, they're usually good for stuff like this.

[23:42] <wayland_> Probably not that much harder than distinguishing bokmaal from nynorsk (which I doubt I can do either) :)

[23:42] <masak> me neither. :)

[23:45] <wayland_> ok, will try to remember to hit those wp articles

[23:45] <wayland_> Japanese, Chinese, Korean; any other major ones?

[23:46] <masak> I would call those the major ones. But my bias is in that area since I'm studying Chinese. :)

[23:47] <wayland_> Of course.  But there probably can't bee to many ideographic (???) languages around these days

[23:47] <masak> you will especially find the Korean characters refreshing; they were introduced by an enlightened king in the 15th century. very logical.

[23:48] <masak> wayland_: don't underestimate ideographic writing systems. :) they are way cool.

[23:48] <masak> I hear they are used by a couple of hundred million people in Asia.

[23:49] <wayland_> well, yes.  I know they have their advantages, I just don't know what they are :)

[23:49] *** sri_kraih left
[23:49] *** spx2 joined
[23:49] <wayland_> But the reason I said "these days" is because I know there were more in the ancient past

[23:50] <wayland_> but I'm at least somewhat aware of writing systems (having dabbled a little in linguistics), and figured I'd probably know if there were a big stack today :)

[23:51] <masak> wayland_: ideographic writing systems are more "natural" in the sense that it takes quite a big step to discover the alphabet-based way of doing things.

[23:51] <masak> that doesn't mean that they are either better or worse, of course.

[23:53] *** lizsac left
[23:53] *** lizsac joined
[23:53] <wayland_> From what I've been told, in the west, the Egyptians had an ideographic system, and either the Phoenecians or the Hebrews (depending on who you ask) made the transition to alphabetic

[23:54] *** alester joined
[23:54] <wayland_> I suspect, though, that alphabet-based systems lend themselves better to mechanisation, and make it simpler to learn new words

[23:55] <wayland_> Unfortunately, my browser doesn't seem to like the Korean :(

[23:55] <masak> oh, you're missing out.

[23:55] <masak> install a font or something.

[23:56] <meppl> good night

[23:56] <wayland_> I'm investigating; I have a couple of fonts that might do it, but I've never fiddled with changing the font of a web page before :)

[23:56] <wayland_> 'night, meppl 

[23:57] <meppl> ;)

[23:58] <masak> sleep tight,  meppl 

[23:58] <meppl> ;)

[23:59] *** meppl left
[23:59] <masak> wayland_: the browsers I typically use allow you to change default fonts in the Options pane.

