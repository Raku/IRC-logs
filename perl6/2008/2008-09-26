[00:11] *** Ontolog left
[00:30] <pugs_svn> r22373 | cjfields++ | [t/spec] fix closure test (variables not reset)

[01:29] *** meppuru joined
[01:44] *** meppl left
[01:45] *** funktio_ joined
[01:49] *** ptman joined
[01:51] *** xinming joined
[01:54] *** meppuru is now known as meppl

[01:55] *** xinming_ left
[01:56] *** Lichtkind joined
[01:57] <Lichtkind> how can i write a signature that except only in values greater that 0 ?

[01:57] *** TreyHarris joined
[01:58] <Lichtkind> i ask because i dont see anything in synopses

[01:58] <Lichtkind> but im shure there where something like that

[02:11] <Lichtkind> any hint?

[02:16] *** BinGOs_ joined
[02:26] *** alester joined
[02:26] *** xinming_ joined
[02:33] *** wknight8111 left
[02:37] *** meppl left
[02:42] *** xinming left
[02:46] *** agentzh joined
[02:53] *** Alias_ joined
[03:02] *** elmex_ joined
[03:14] <pugs_svn> r22374 | putter++ | [elfish/on_sbcl] More work on Array, Hash, and oo.  Parser.pm runs.

[03:14] <pugs_svn> r22374 | putter++ | [STD_red] Postcircumfix methods now parse.

[03:14] <pugs_svn> r22374 | putter++ | [elf] More backend neutrality.

[03:17] *** elmex left
[03:17] *** elmex_ is now known as elmex

[03:22] *** Ontolog joined
[04:19] <rakudo_svn> r31428 | pmichaud++ | [rakudo]:  Update dec_number to avoid split/join removal of underscores.

[04:23] *** xinming_ left
[04:27] *** xinming joined
[04:29] *** justatheory left
[04:37] *** xinming_ joined
[04:39] *** sail0r joined
[04:40] *** sail0r left
[04:45] <azawawi> hi

[04:45] *** xinming left
[04:48] <azawawi> how do i check p6 POD for warnings (like podchecker)?

[04:59] <azawawi> @tell moritz how do i check p6 POD for warnings (like podchecker)?

[04:59] <lambdabot> Consider it noted.

[05:05] *** alester left
[05:09] *** xinming_ left
[05:09] *** xinming joined
[05:14] <rakudo_svn> r31429 | pmichaud++ | [rakudo]:  Allow underscore in exponents.

[05:14] <pugs_svn> r22375 | pmichaud++ | Remove a #?rakudo skip on underscores in exponents.

[05:18] <pugs_svn> r22376 | azawawi++ | [pugs] PROBLEMS->PROBLEMS.pod

[05:22] <pugs_svn> r22377 | azawawi++ | Make some text bold

[05:33] <rakudo_svn> r31430 | pmichaud++ | [rakudo]:  Allow unspace before dotty ops.

[05:33] <pugs_svn> r22378 | pmichaud++ | S03-operators/binding-hashes.t:  unskip skipped tests for unspace

[05:34] *** khisanth_ joined
[05:35] *** khisanth_ is now known as Khisanth

[05:48] *** Psyche^ joined
[05:49] *** Ehtyar joined
[05:56] *** BinGOs_ left
[06:00] *** Patterner left
[06:00] *** Psyche^ is now known as Patterner

[06:00] *** sri_work joined
[06:03] <rakudo_svn> r31431 | pmichaud++ | [rakudo]: STD.pm convergence -- dotty postcircumfix and methodops

[06:03] *** BinGOs joined
[06:13] *** ashizawa joined
[06:15] <pugs_svn> r22379 | pmichaud++ | Unskip some tests where rakudo didn't like dots.

[06:15] *** REPLeffect joined
[06:21] *** Bzek joined
[06:25] *** Bzek left
[06:26] *** cognominal joined
[06:27] *** Bzek joined
[06:28] <rakudo_svn> r31432 | pmichaud++ | [rakudo]:  Leave .= to be parsed as infix for now.

[06:29] <pugs_svn> r22380 | azawawi++ | fixed PROBLEMS.pod, moved t/syntax/varnames.t into S02-names_and_variables and added a smartlink

[06:29] *** sri_work_ joined
[06:29] <pugs_svn> r22381 | pmichaud++ | S05-substitution/subst.t:  Two more passing tests

[06:41] <azawawi> can anyone cpan install Perl6::Perldoc on feather1?

[06:42] <pugs_svn> r22382 | pmichaud++ | Correct test in S29-str/pos.t, unskip it for rakudo.

[06:46] *** sri_work left
[06:54] *** pjcj left
[06:57] *** iblechbot joined
[07:03] *** zamolxes joined
[07:39] <pugs_svn> r22383 | moritz++ | [t/spec] some unfudges found by autunfudge.pl

[07:41] <azawawi> moritz: ?

[07:45] <pugs_svn> r22384 | azawawi++ | rakudo skip 'Null PMC access in type()' on varnames.t

[07:46] <moritz_> azawawi: yes, just a sec

[07:47] <azawawi> moritz_: ok

[07:49] <moritz_> [X] Done

[07:49] <azawawi> i have some questions regarding rakudo spectest and skips...

[07:50] <moritz_> go right ahead

[07:50] <azawawi> what is our policy for test skips?

[07:51] <moritz_> tests that either lead to abortion or that are unspecced are skipped

[07:51] <azawawi> so "Null PMC...", stack traces should be skipped right? 

[07:51] <moritz_> right

[07:51] <azawawi> cool so much fun to do then ;-)

[07:52] <moritz_> (but fudging only makes sense for test files where some tests pass)

[07:52] <azawawi> right

[07:54] <azawawi> so far they are either parse errors or Null PMC stacktraces

[07:54] *** baest joined
[07:54] <moritz_> what test are you working on?

[07:54] <azawawi> S02-*

[07:55] <azawawi> one more question about P6 POD format? is there something like podchecker for it?

[07:55] <moritz_> don't think so

[07:56] <azawawi> i needed in the morning to cpan install Perl::PerlDoc for smartlinks.pl, but i dont have sudo access

[07:57] <moritz_> uhm, on which feather does the smartlink cronjob run?

[07:57] <azawawi> dunno actually

[07:58] <azawawi> im developing on feather 1

[07:58] <moritz_> because I know there is a cronjob for it already

[08:11] <Juerd> It ought to run on 1

[08:11] <Juerd> 1 is the "normal" feather that everyone uses

[08:11] <Juerd> 2 is not in use yet

[08:11] <Juerd> 3 is for evalbots

[08:14] *** ptman left
[08:58] <pugs_svn> r22385 | azawawi++ | Skipped all tests since autovivication.t fails in rakudo

[09:00] <moritz_> azawawi: when you make changes to the test suite, please put [t] or [t/spec] in the commit message

[09:00] <azawawi> moritz: will do... thx

[09:04] *** masak joined
[09:08] *** kanru joined
[09:24] *** wknight8111 joined
[09:28] <pugs_svn> r22386 | azawawi++ | [t/spec] Skipped failing tests in capture.t for rakudo

[09:31] *** pmurias joined
[09:53] *** Alias_ left
[10:02] *** Lichtkind_ joined
[10:02] *** Bzek_ joined
[10:03] <azawawi> rakudo: my $ref = [ 42 ]

[10:03] <p6eval> rakudo 31432: RESULT[[42]]

[10:03] <azawawi> kp6: my $ref = [ 42 ]

[10:03] <p6eval> kp6 22386: RESULT[[ 42 ]]

[10:06] *** barbeqq1 joined
[10:06] <barbeqq1> I heard tommorow you will release Perl6 !

[10:07] <barbeqq1> could that be true ?

[10:11] <azawawi> rakudo: my $ref= { val => 42 }; $ref = [ 42 ];

[10:11] <p6eval> rakudo 31432: OUTPUT[Odd number of elements found where hash expected␤current instr.: 'parrot;List;hash' pc 2877 (src/gen_builtins.pir:1999)␤]

[10:11] <azawawi> kp6: my $ref= { val => 42 }; $ref = [ 42 ];

[10:12] <p6eval> kp6 22386: RESULT[[ 42 ]]

[10:14] <azawawi> @tell moritz_ is this a bug in rakudo 'my $ref= { val => 42 }; $ref = [ 42 ];' ?

[10:14] <lambdabot> Consider it noted.

[10:19] *** Bzek left
[10:20] *** Lichtkind left
[10:21] <pugs_svn> r22387 | azawawi++ | [t/spec] skipped 2 tests in catch_type_cast_mismatch.t for rakudo

[10:21] *** pmurias left
[10:24] <Ontolog> I don't really understand this $<something> syntax very well

[10:24] <Ontolog> we have $/ but $<something> is the same as $/<something>?

[10:24] <Ontolog> we have $/ but $<something> is the same as $/{something}?

[10:25] <Ontolog> how is it that we can ditch the forwardslash?

[10:27] *** zamolxes left
[10:28] <masak> Ontolog: it's just a special case

[10:29] <masak> besides, %h<foo> is the same as %h{'foo'}, with quotes

[10:29] <masak> in general <foo bar baz> desugars to ['foo', 'bar', 'baz']

[10:30] <Ontolog> i understand that

[10:30] <Ontolog> i just didn't understand why we are leaving out the /

[10:30] <masak> it's just a special case.

[10:30] <Ontolog> i see

[10:32] <masak> @() is also special cased to return all matches

[10:32] <lambdabot> Maybe you meant: . ? @ bf ft id pl rc v wn

[10:32] <masak> and $() is special cased to mean $($/)

[10:33] <masak> ditto %(), it seems

[10:34] <masak> same for Match objects further down in the tree, e.g. @<foo>

[10:34] <masak> actually, things make more sense in light of that last piece of syntax

[10:40] *** dmq joined
[10:47] *** Patterner left
[10:47] *** Ontolog left
[10:49] <pugs_svn> r22388 | azawawi++ | [t/spec] Fudged compact.t for "Scope not found"

[10:51] <moritz_> rakudo: my $ref= { val => 42 }; $ref = [ 42 ]; say $ref.perl

[10:51] <lambdabot> moritz_: You have 1 new message. '/msg lambdabot @messages' to read it.

[10:51] <p6eval> rakudo 31433: OUTPUT[Odd number of elements found where hash expected␤current instr.: 'parrot;List;hash' pc 2877 (src/gen_builtins.pir:1999)␤]

[10:53] <moritz_> rakudo: my $ref= { val => 42 }; say $ref.perl

[10:53] <p6eval> rakudo 31433: OUTPUT[{"val" => 42}␤]

[10:53] <moritz_> azawawi: certainly a bug, feel free to report to [email@hidden.address]
[10:54] <azawawi> moritz_: thx

[11:01] <barbeqq1> maybe it's time you release perl6 for real use ?

[11:01] <barbeqq1> moritz_: but those are bugs on pretty basic features...when do yo think perl6 will be done ?

[11:02] <moritz_> barbeqq1: it's done when it's done. If you help, it's done faster ;)

[11:03] <moritz_> barbeqq1: funnily enough nobody who was hackin on November (a Perl 6 wiki engine) found that bug

[11:03] <moritz_> because it happens surprisingly seldom in real world code

[11:04] <barbeqq1> moritz_: if those kinds of bugs(which are pretty basic language functions) are revealed after so much time this perl6 thing is going on ... that gives me an ideea of how much people are actively coding in perl6 and how much people are developing it ... could you comment on that a bit please ?

[11:05] <moritz_> barbeqq1: so much time - I don't quite understand. Rakudo isn't all that old

[11:06] <moritz_> barbeqq1: it only started to become somewhat usable half a year ago...

[11:06] <barbeqq1> moritz_: yes but could you comment on number of active users of perl6 ? and also on number of people developing it ?

[11:07] *** wknight8111 left
[11:07] <moritz_> barbeqq1: developerr... perhaps 6 to 10 on rakudo, 1/2 on pugs, 2 on smop, 3/2 on elf, an undefined number on the specs

[11:07] <barbeqq1> has someone written a draft for Perl6 language specification(like c++ has for example...or any other ISO standardized serious language) or are features added in an ad-hoc pot-smoking fashion ?

[11:07] <moritz_> barbeqq1: but that "6 to 10" includes causual contributers

[11:08] <moritz_> there are specs at http://spec.pugscode.org/, and much of the specs is also present in form of a test suite

[11:08] <avar> barbeqq1: the current spec isn't a std spec document, it's more ad-hoc

[11:08] <barbeqq1> moritz_: and are the specs stable ? or does someone come from time to time and say "OH I HAVE AN IDEAA !!!" :) ?

[11:08] <moritz_> (of which rakudo only runs 1/5 currently, and passes perhaps 1/6)

[11:09] <moritz_> barbeqq1: not frozen, but fairly stable

[11:09] <barbeqq1> so only 6-10 people are working on perl6 ?

[11:09] <moritz_> barbeqq1: there haven't been deep language changes in the last time, so it's mostly stable

[11:09] <moritz_> barbeqq1: I didn't say that. read again.

[11:10] <moritz_> rakudo neither is the only implementation, nor is it the only Perl 6 effort

[11:11] <pugs_svn> r22389 | azawawi++ | [t/spec] Fudged enum.t for rakudo

[11:11] <barbeqq1> can't the specs be frozen so developers can catch up with implementation ? it's rather ridiculous that the specs change often and the developers need to back up,make changes ,clean up etc...

[11:11] <moritz_> barbeqq1: that's by far one of the least pressing issues for developers

[11:12] <moritz_> barbeqq1: as I said, most language changes are fairly small

[11:12] <moritz_> barbeqq1: the problem is that Perl 6 is a very complex and very new kind of language

[11:12] <moritz_> anyway, gotta go now

[11:12] <barbeqq1> moritz_: more complex than haskell for example ?

[11:12] <moritz_> have the appropriate amount of fun

[11:12] <moritz_> barbeqq1: yes

[11:13] <barbeqq1> OMG

[11:24] <pugs_svn> r22390 | azawawi++ | [t/spec] Fudged infinity.t for rakudo

[11:24] *** rindolf joined
[11:26] *** wknight8111 joined
[11:28] *** zamolxes joined
[11:31] <masak> barbeqq1: not that that says much. even Haskell is more complex than Haskell :P

[11:34] <barbeqq1> :))

[11:36] *** barbeqq1 left
[11:58] *** Ontolog joined
[12:07] *** pmurias joined
[12:11] *** ashizawa left
[12:26] <pmurias> moritz_: haskell 98 isn't a very big language

[12:28] <masak> pmurias: the equations for specifying the Mandelbrot set aren't very big either

[12:28] <masak> but you can hardly deny it's complex :P

[12:33] *** Psyche^ joined
[12:33] *** Psyche^ is now known as Patterner

[12:35] <pmurias> masak: did you actually write anything in haskell?

[12:38] <masak> pmurias: aye

[12:39] <masak> not saying it's impossible, or even very difficult, just... different

[12:39] <masak> and the inherent complexity is very pleasant

[12:39] <masak> very algebra-like

[12:40] <pmurias> most of the imperative techniques have very similar equivalent in haskell

[12:41] <pmurias> having the mountain bike repair&

[12:41] <pmurias> * repaired

[12:46] <pugs_svn> r22391 | azawawi++ | [t/spec] Fudged multi_dimensional_array.t for rakudo

[12:50] <rakudo_svn> r31436 | pmichaud++ | [rakudo]:  spectest-progress.csv update: 180 files, 3897 passing tests

[12:50] <masak> pmurias: re imperative techniques: sure, just as even distantly related spoken languages solve things in very similar ways

[13:13] <Lichtkind_> how to declare subsets in signatures?

[13:14] <avar> I don't think a signature is the right way to declare a subtype

[13:14] *** Lichtkind_ is now known as lichtkind

[13:14] <lichtkind> so you have to declare it before with containes ?

[13:15] <lichtkind> sorry but i found no example in synopses just mentioning subsets

[13:17] <lichtkind> avar: you dont know any reference?

[13:18] <avar> I don't know the syntax but wouldn't this be something like:

[13:18] <avar> subset Kittens of Mammals where { self.squeak ~~ /meow }

[13:18] <avar> sub (Kittens $a_kitn) { ... }

[13:20] <lichtkind> avar: right right i think i check larrys slides again i think there were something like that

[13:22] *** BinGOs left
[13:24] *** BinGOs joined
[13:25] <pugs_svn> r22392 | azawawi++ | [t/spec] Paritally fudged mixed_multi_dimensional.t for rakudo 

[13:27] <masak> azawawi++ # test suite love

[13:28] <azawawi> masak: thx

[13:30] <azawawi> masak: how do know how to fudge a { faulty_code(), is_a(...) } ?

[13:30] <azawawi> masak: im sleepy now ;-)

[13:30] <masak> azawawi: no, I don't think I do. moritz_++ might.

[13:30] <masak> :)

[13:31] <azawawi> moritz_: do know how to fudge a { faulty_code(), is_a(...) } ?

[13:31] <moritz_> azawawi: a #?rakudo skip line will skip the whole block

[13:32] <azawawi> moritz_: something like mixed_multi_dimensional.t line 112

[13:34] <moritz_> if it dies, skip the whole block of code

[13:34] <azawawi> moritz_: thx, i'll try it now...

[13:38] <pmurias> avar: you can use anonymous subtypes

[13:38] *** fridim_ joined
[13:38] <pmurias> sub (Mammals where {self.squeak ~~ /meow/} $a) { ... }

[13:42] <lichtkind> pmurias: you where this french guy which we eat at the indian restaurant in kopenhagen?

[13:44] <pmurias> no

[13:44] <lichtkind> ah yes it was cognominal

[13:45] <moritz_> pmurias doesn't even have a french name ;)

[13:45] <lichtkind> pmurias: but you where in kopenhagen?

[13:45] <cognominal> I was not the only one...

[13:46] <pmurias> yes, i gave the "Perl6 is just a SMOP talk"

[13:47] <pmurias> cognominal: aren't you supposed to be eaten?

[13:48] <cognominal> at the indian, I was at the left of Karen Pauley if my memory serves me well.

[13:48] *** zamolxes left
[13:49] <cognominal> I think BooK and maddingue were at another table.

[13:49] <cognominal> is there photos somewhere?

[13:49] <Maddingue> I was in front of Karen

[13:49] <pmurias> lichtkind: did we talk at the yapc::eu

[13:49] <pmurias> ?

[13:52] <lichtkind> pmurias: yes i had the feeling thatswhy i ask

[13:53] <lichtkind> pmurias: sorry was in garden to get telephone

[13:53] <moritz_> in Germany telephones grow in the garden

[13:54] <lichtkind> moritz_: sometimes and sometimes the get in the garden when someone takes it there :)

[13:57] *** avar joined
[13:59] <pugs_svn> r22393 | moritz++ | [t/spec] varnames.t: use eval_lives_ok and eval_dies_ok

[14:01] *** TJCRI joined
[14:03] <pugs_svn> r22394 | moritz++ | [t/spec] fudged S03-operators/bit.t for rakudo

[14:04] <azawawi> moritz_: fudge does not comment '{ faulty_code(); is_a(...); }' if it has any leading whitespace. Is that the correct behavior?

[14:05] <moritz_> azawawi: usually it works (ie it comments it out)...

[14:06] <moritz_> but somtimes it has some nasty cornerns, and it doesn't do nested blocks

[14:06] <moritz_> ie if you're already inside a block, skipping another block won't work

[14:06] <azawawi> moritz_: it comments everything but the fauly_code()

[14:07] <moritz_> that's unfortunate ;)

[14:07] <azawawi> moritz: so fudge works as expected if inner braces are not indented

[14:07] <rakudo_svn> r31437 | moritz++ | [rakudo] add three more files to spectest_regression

[14:07] <rakudo_svn> r31437 | moritz++ | (azawawi++ for fudging two of them)

[14:08] <azawawi> moritz_: thx

[14:09] <lichtkind> allright code and block are perl 6 data types

[14:09] <pugs_svn> r22395 | moritz++ | [t/spec] fudged keys_values.t for rakudo

[14:22] <pugs_svn> r22396 | azawawi++ | [t/spec] Fudged mixed_multi_dimensional.t for rakudo

[14:25] *** jhorwitz joined
[14:25] *** eternaleye left
[14:30] <pmichaud> is there a mailing list for svn updates to svn.pugscode.org ?

[14:33] <pugs_svn> r22397 | azawawi++ | [t/spec] Fudged int-uint.t for rakudo

[14:33] <lichtkind> go patrick go :)

[14:38] *** mofino joined
[14:41] <moritz_> pmichaud: no :(

[14:41] <moritz_> pmichaud: what I do is backlog in IRC, and click on the changeset links

[14:42] <pmichaud> hard to filter that 

[14:42] <moritz_> search for pugs_svn

[14:42] <moritz_> but not optimal, yes

[14:45] <pugs_svn> r22398 | moritz++ | [t/spec] fudgex mixed_multi_dimensional.t a bit more

[14:46] <moritz_> azawawi: if you look at that commit... there's an evil hack with #?rakudo emit #

[14:46] <moritz_> azawawi: that can be used to disable some lines

[14:46] <azawawi> moritz_: cool

[14:47] <moritz_> but it's an even uglier hack than the normal fudging, and should be used only seldomly

[14:48] <moritz_> S29-num/rounders.t is a *very* evil example ;)

[14:48] <azawawi> lazy_lists.t is evil also

[14:50] *** pjcj joined
[14:50] <moritz_> that probably predates fudge

[14:55] *** kanru left
[14:55] <pugs_svn> r22399 | moritz++ | [t] closure.t uses different quoting delimiter, to eliminate the dependency on

[14:55] <pugs_svn> r22399 | moritz++ | parsing with nested brackets.

[14:56] *** kanru joined
[15:05] <rakudo_svn> r31438 | moritz++ | [rakudo] one more test for rakudo

[15:10] *** hercynium joined
[15:24] *** fengtou joined
[15:26] <pugs_svn> r22400 | azawawi++ | [t/spec] Fudged lazy_lists.t for rakudo

[15:26] *** masak left
[15:32] *** fengtou left
[15:46] *** kanru left
[15:47] *** kanru joined
[16:01] *** wknight8111 left
[16:09] <pugs_svn> r22401 | azawawi++ | [t/spec] Fully fudged lazy_lists.t for rakudo

[16:09] *** justatheory joined
[16:19] *** abra joined
[16:25] *** Exodist joined
[16:31] *** ruoso joined
[16:34] <ruoso> pmurias, hi

[16:34] <ruoso> I've been thinking...

[16:34] <ruoso> is it really possible to do $foo<abc> := 123?

[16:34] <ruoso> isn't binding something that happens in the lexical scope?

[16:35] <ruoso> perl6: my %a; %a<abc> := 123; say %a<abc>;

[16:35] <p6eval> elf 22401: OUTPUT[syntax error at (eval 117) line 4, near "} :"␤ at ./elf_f line 3861␤]

[16:35] <p6eval> ..pugs, rakudo 31438: OUTPUT[123␤]

[16:36] <ruoso> I mean... I know '$abc := $foo<abc>' is possible...

[16:37] <TimToady> pugs: my %a; %a<abc> := 123; %a<abc> = 456;

[16:37] <p6eval> pugs: OUTPUT[*** Can't modify constant item: VInt 123␤    at /tmp/1h6VtHGRxs line 1, column 24-37␤]

[16:38] <TimToady> pugs: my %a; %a<abc> = 123; %a<abc> = 456;

[16:38] <p6eval> pugs: RESULT[\456]

[16:38] *** `nipra joined
[16:39] *** xuser joined
[16:41] <TimToady> note also that symbol table manipulations are essentially %STAB<@var> := Array, more or less

[16:48] <ruoso> TimToady, that might fail, depending on the object that implements %a, right?

[16:48] <ruoso> pugs: my @a = (1,2,3); @a[0] := 2; say @a

[16:48] <ruoso> pugs: my @a := (1,2,3); @a[0] := 2; say @a

[16:48] <p6eval> pugs: OUTPUT[223␤]

[16:48] <p6eval> pugs: OUTPUT[*** Can't modify constant item: VUndef␤    at /tmp/L1IhYYpcAu line 1, column 19-29␤]

[16:48] <ruoso> S03:1374 seems to imply that it relates to "names"

[16:49] <ruoso> I'm not sure what '%a<abc> := 123' means to the Hash API

[16:50] <ruoso> TimToady, yes... but there are other implications about that...

[16:50] <ruoso> variables are things that can be syntatically identified

[16:51] <ruoso> for '%a<abc> := 123' it will depend on what's implemented by %a.postcircumfix:<{ }>

[16:51] <ruoso> for variables, I had planned to do a  double-boxing...

[16:51] <ruoso> which would mean that you would have %STAB<@var>.STORE(Array) as binding and %STAB<@var>.FETCH.STORE as assignement

[16:52] <ruoso> but that doesn't work for things that are not variables

[16:52] <ruoso> unless this double-boxing is replicated to *everything*

[16:52] <ruoso> which looks weird

[16:53] <TimToady> the outer box is nothing more than a pointer, really

[16:54] <TimToady> if an array is a C-ish array of pointers to containers

[16:54] <TimToady> then := is just replacing one of those poitners

[16:54] *** xiaoyafeng joined
[16:54] <TimToady> *pointers

[16:54] <ruoso> sure... but it would require doing that for every return value of every method call

[16:54] <TimToady> don't follow

[16:55] <ruoso> there's nothing really special about %a<abc>

[16:55] <ruoso> in runtime-sense

[16:55] <ruoso> it's just a method call 'postcircumfix:<{}>' on the value stored in the variable '%a"

[16:55] <pugs_svn> r22402 | moritz++ | [t/spec] fudged mixed_multi_dimensional.t for rakudo

[16:56] <TimToady> no, it has to know its context

[16:56] <TimToady> postcircumfix:<{ }> can't just pretent it's in rvalue context

[16:56] <TimToady> *pretend

[16:57] <TimToady> it's sort of a double-lvalue context

[16:57] <TimToady> on the left of a :=

[16:57] <moritz_> ah that's what meant with the "various container contexts" in S02/Contexts/

[16:58] <TimToady> maybe call it bvalue context

[16:59] <TimToady> it's kind the same context that exists and delete want

[16:59] <TimToady> *kinda

[16:59] <xiaoyafeng> Hi, everyone. I have confused about *lazy*

[16:59] <moritz_> TimToady: I thought there was no 'exists %h<item>' form anymore?

[17:00] <TimToady> still thinking about it...

[17:00] <xiaoyafeng> my $x = 1..10; @a = =@$x; say @a;    # 1?????

[17:00] <xiaoyafeng> why?

[17:00] <moritz_> xiaoyafeng: it seems that prefix:<=> basically translates to shift

[17:01] <TimToady> perl6:  my $x = 1..10; @a = =@$x; say @a;

[17:01] <moritz_> why would you want to use an iterator on a list in list context anyway?

[17:01] <p6eval> pugs: OUTPUT[*** ␤    Unexpected " ="␤    expecting "::"␤    Variable "@a" requires predeclaration or explicit package name␤    at /tmp/zxBmw8oDip line 1, column 18␤]

[17:01] <p6eval> ..rakudo 31439: OUTPUT[Statement not terminated properly at line 1, near "= =@$x; sa"␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[17:01] <p6eval> ..elf 22402: OUTPUT[Scalar found where operator expected at (eval 121) line 4, near "$a_$x"␤       (Missing operator before $x?)␤Global symbol "$a_a" requires explicit package name at (eval 121) line 4.␤Global symbol "$a_" requires explicit package name at (eval 121) line 4.␤syntax error at (eval

[17:01] <xiaoyafeng> for =@$x {.say}  # 1..10

[17:01] <p6eval> ..121) lin...

[17:01] <moritz_> xiaoyafeng: just for @list { ... }

[17:02] <TimToady> perl6:  my $x = 1..10; my @a = =@$x; say @a;

[17:02] <p6eval> elf 22402: OUTPUT[Scalar found where operator expected at (eval 121) line 4, near "$a_$x"␤       (Missing operator before $x?)␤Global symbol "$a_" requires explicit package name at (eval 121) line 4.␤syntax error at (eval 121) line 4, near "$a_$x"␤ at ./elf_f line 3861␤]

[17:02] <p6eval> ..rakudo 31439: OUTPUT[Statement not terminated properly at line 1, near "= =@$x; sa"␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[17:02] <p6eval> ..pugs: OUTPUT[*** Unsafe function '=' called under safe mode␤    at /tmp/XCVrTB7dAw line 1, column 24-28␤]

[17:02] <moritz_> ouch

[17:02] <moritz_> pugs thinks prefix:<=> is unsafe

[17:03] <[particle]> my @x = 1..10; say @$x;

[17:03] <[particle]> err

[17:03] <[particle]> rakudo: my @x = 1..10; say @$x;

[17:03] <p6eval> rakudo 31439: OUTPUT[Statement not terminated properly at line 1, near "@$x;"␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[17:03] <[particle]> as i suspected.

[17:04] <[particle]> rakudo: my @x = 1..10; say $x;

[17:04] <p6eval> rakudo 31439: OUTPUT[Scope not found for PAST::Var '$x'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤]

[17:05] <TimToady> moritz_: exists and delete are very convenient from the user perspective, but their bvalue nature requires some macroish behavior, which means you can't easily overload those words as normal subs

[17:06] <moritz_> TimToady: right, we discusses that once

[17:06] <moritz_> at which point you pondered t allow multi-subs with macro-ish behaviour when a certain trait is present

[17:07] <ruoso> right... in smop that's made in terms of 'late context propagation'... that's not the issue...

[17:07] <ruoso> putting it more clearly... which API a hash needs to implement to support %a<abc> := 123?

[17:07] <ruoso> TimToady, btw, 'method postcircumfix:<{}> is rw' right?

[17:07] <ruoso> postcircumfix:<{}> returns the container... so how is it going to replace itself inside the hash?

[17:07] <rakudo_svn> r31440 | moritz++ | [rakudo] one more test for spectest_regression

[17:11] <pmurias> TimToady: have you thought over whether packages are put in a global namespace by default?

[17:12] <ruoso> TimToady, seeing ':=' as a macro doesn't seem too bad...

[17:13] <ruoso> but it's a very smart macro...

[17:14] <ruoso> it takes the capture of the last call in the rside and use as the key of a pair to a BIND call on the object in which the call would otherwise be made

[17:15] <ruoso> so in order to support binding, the object would need to implement something like 'method BIND ($identifier, *%pairs)'

[17:22] <TimToady> pmurias: top-level packages *must* be put into some kind of a global namespace or they are useless, since the whole point of packages is to contain a public interface of some kind

[17:22] <TimToady> however, I think only longnames actually go into *

[17:22] <TimToady> and shortnames are lexically scoped aliases to some longname

[17:24] <pmurias> TimToady: the use could supply a package to be used as the topmost one in the file

[17:25] <pmurias> that's how i plan to implement it, the use then choose if to put the package in to the * or not

[17:26] <ruoso> thinking about bvalue context... maybe binding should be represented in terms of a different call

[17:26] <ruoso> a BIND call, which would be an alternative to a STORE call

[17:26] <ruoso> but that would require the object to be a bit smarter..

[17:26] <ruoso> meaning...

[17:26] <ruoso> postcircumfix:<{ }> would return a lazy-lookup object *even if there's already a container stored in the hash*

[17:26] <ruoso> (or at least when in b-value context)

[17:26] <ruoso> this special object would delegate FETCH and STORE calls directly to the effective container that is stored in the array

[17:26] <ruoso> but it would also support BIND calls, in which case it would access a private method in the hash to replace the actual container...

[17:26] <ruoso> that works out for regular lvalue methods, that would simply fail saying they don't know how to BIND

[17:26] <ruoso> and also would work out for special lvalue methods... bvalue methods... that would return a double-box...

[17:26] *** Bzek_ left
[17:27] <ruoso> TimToady, pmurias, moritz_, does it looks sane?

[17:28] <ruoso> pmurias, I think there could be a "load" operator, in addition to "require" and "use" which would simply create the local alias to a private copy of that package...

[17:29] *** rindolf left
[17:45] * ruoso *crickets*

[17:46] <TimToady> as long as we're careful not to compromise optimization of rvalues

[17:47] <ruoso> my theory is that 'lazy context propagation' leaves all the possible room for optimization...

[17:47] <TimToady> the lvalue/bvalue distinction is also part of what's going on with autovivification

[17:47] <ruoso> because as 'forward context propagation' is implemented, gradually less layers are needed...

[17:48] <TimToady> all I know is that backpointers and closures can get expensive

[17:49] <ruoso> as I said in previously... I expect very few objects to actually implement that kind of context-awareness

[17:50] <ruoso> and this objects can be implemented in a more low-level way...

[17:50] <ruoso> avoiding that much closures...

[17:51] <ruoso> most objects will take advantage of the context-awareness of the builtin types...

[17:53] <pmurias> ruoso: re load an :option to use would be enough, i can then just put a use use :noglobal on top of my code

[17:54] <ruoso> that looks like a very elegant solution... I'd use :private instead, tho

[17:54] <pmurias> :private seems better

[17:54] <ruoso> use Foo :private; 

[17:55] <TimToady> if another module loads the same thing, it has to have some kind of global pointer to the current one if it's going to avoid duplication

[17:55] <ruoso> TimToady, the point is actually doing the duplication...

[17:55] <ruoso> TimToady, to protect against monkey-patching...

[17:56] <TimToady> if someone wants to monkey patch they'll still find a way :)

[17:56] <pmurias> but they will have to find it

[17:57] <ruoso> ;)

[17:58] <[particle]> (security via obscurity)--

[17:58] <TimToady> I wonder how soon till someone puts the module on CPAN to do it...

[17:58] <TimToady> anyway, in the long run, it has to be enforced culturally

[17:59] <TimToady> if we make it really easy to export and import lexicals, most of the package vars go away anyway

[18:01] <TimToady> OO and lexical encapsulation are already giving you most of what you want, so I doubt I'll ever make package encapsulation the default

[18:02] <pmurias> i don't really what to forbid monkey patching i just want it to happen in a localised manner with global monkey-patching being an explicit choice

[18:07] *** cosimo left
[18:08] <ruoso> but it still has a use...

[18:08] <ruoso> which is... in an environment full of monkey-patching, it provides a *clean* view of the module

[18:08] <ruoso> if monkey-patching culturally is done one way, this would say "i want a private version of this module"

[18:08] <ruoso> this is usefull even for localized monkey-patching, actually

[18:08] <ruoso> "I want to monkey-patch this module, but only in this scope"...

[18:09] <ruoso> pmurias, btw... we need to change both hash and array to support bvalue context...

[18:09] <ruoso> as with 'late context propagation', this basically means that the lookups are always lazy, even if there's already a container there..

[18:09] <ruoso> FETCH and STORE are delegated directly to the actual container... but BIND replaces the actual container...

[18:09] <ruoso> indeed... supporting 'localized monkey-patching' is an interesting feature...

[18:09] <ruoso> more than trying to protect against it

[18:09] <pugs_svn> r22403 | azawawi++ | [t/spec] Fudged lists.t for rakudo

[18:12] <ruoso> pmurias, btw... supporting bvalue is the step that solves the autovivifcation as specced also... :)

[18:14] <TimToady> but is the monkeypatch clone shallow or deep?

[18:15] <TimToady> .oO(my use Foo)

[18:16] <pmurias> we need an entire Monkey::Patch module as there seems to be endless possibilities

[18:16] <TimToady> .oO(has use Foo)

[18:17] <TimToady> I guess that'd mean that every object keeps its own monkeypatch

[18:17] <TimToady> memory is getting cheaper, they say...

[18:19] <TimToady> .oO(state use Foo) # keep monkey patches in persistent database...

[18:20] <TimToady> but maybe there should be a different declarator for that lifetime

[18:22] * pmurias can live with use putting stuff * in global if he has the cool "declarator use" form 

[18:23] <pmurias> wouldn't the deep monkeypatching be "local use Foo"?

[18:24] <pmurias> "temp use Foo" sorry

[18:26] <pmurias> ruoso: re bvalue context - 'forward context propagation' seems to be getting even more tempting ;)

[18:27] <TimToady> temp is not a declarator

[18:27] <ruoso> (has use Foo)++

[18:28] <TimToady> it's just a bvalue macro like exists

[18:29] <ruoso> pmurias, I know I know... but hold your breath just a little longer... ;)

[18:29] <TimToady> ::!Foo::bar()

[18:30] <[particle]> is that ! as in !important in css?

[18:30] <TimToady> though I think we already claim that Foo can be virtual, so Foo::bar() might work

[18:31] <TimToady> well, maybe not for 6.0.0

[18:33] <pmurias> bizarre features attract implementors more than dull ones so it might be implemnted sooner than expected ;) 

[18:34] <pmurias> * implemented

[18:39] <pmichaud> especially jonathan++  :-)

[18:42] *** xiaoyafeng left
[18:42] <pugs_svn> r22404 | pmichaud++ | Dotty parsing probably wants non-capturing <.unspacey> instead of

[18:42] <pugs_svn> r22404 | pmichaud++ | zero-width <?unspacey>.

[18:45] <pmichaud> given that there's something that allows pugs_svn to be able to post updates to #perl6, how hard would it be to have a similar thing send email updates to a mailing list?

[18:45] <pmichaud> is it simply a lack of tuits, or something deeper?

[18:46] * ruoso later &

[18:47] *** zamolxes joined
[18:49] <[particle]> probably lack of tuits

[18:50] <[particle]> there may be a setting at http://trac.pugscode.org to handle it

[18:50] <lambdabot> Title: Pugs - Trac

[18:50] <[particle]> but i guess you'd want a new mailing list, not posted to an existing

[18:50] <pmichaud> ideally it would be a separate mailing list, yes, but I can certainly set one of those up if nobody else has one available.

[18:52] <[particle]> there is http://dev.pugscode.org/timeline, but it's not a ml

[18:52] <lambdabot> Title: Timeline - Pugs - Trac

[18:53] <[particle]> you can get a feed to that page, however

[18:53] <pmichaud> TimToady: we have both infix:<.=> and dotty:sym<.*> that can parse ".=" -- is there a difference between them, or should there be only one?  (Rakudo is currenty using infix:<.=>)

[18:53] <pmichaud> email is useful because it makes it easier to respond to individual patches on a mailing list -- much like what we've done with parrot-porters

[18:54] <pmichaud> and perl6-language

[18:54] *** riffraff joined
[18:57] <riffraff> hi

[19:02] <[particle]> http://svn.haxx.se/users/archive-2007-05/0402.shtml points to a commit-email.pl script for svn

[19:02] <lambdabot> Title: Subversion Users: Re: Post-commit issues using commit-email.pl

[19:02] <[particle]> somebody with basic svn admin knowledge and feather access can enable it

[19:03] <[particle]> 'course you need an ml set up first

[19:03] <pugs_svn> r22405 | azawawi++ | [t/spec] Fudged unicode.t for rakudo

[19:09] *** alester joined
[19:18] *** abra left
[19:34] *** justatheory left
[19:41] *** pmurias left
[19:58] <TimToady> pmichaud: I guess the only difference now is that the spaceless version suppresses p5 concat warnings if you say $obj.="method" and such

[19:58] <TimToady> don't know what that's worth...

[19:59] <TimToady> $job &

[19:59] *** hercynium left
[20:13] <pugs_svn> r22406 | moritz++ | [t] moved two tests to xx-uncategorized and deleted the now empty dirs

[20:20] <pugs_svn> r22407 | moritz++ | [t] cleaned up multi_named_vs_pos.p

[20:20] <pugs_svn> r22407 | moritz++ |  * removed try { } blocks that prenteded that try is a named unary. It's not.

[20:20] <pugs_svn> r22407 | moritz++ |  * removed seemingly random :todo<unspecced> markers

[20:30] <pugs_svn> r22408 | moritz++ | [t/spec] moved multi_named_vs_pos.t to spec/

[20:30] *** Limbic_Region joined
[20:35] <moritz_> rakudo: my $a = { a => 42 }; say 1; $a = [ 0 ]; say 2

[20:35] <p6eval> rakudo 31446: OUTPUT[1␤Odd number of elements found where hash expected␤current instr.: 'parrot;List;hash' pc 2877 (src/gen_builtins.pir:1999)␤]

[20:37] <moritz_> rakudo: my $a = { a => 42 }; say 1; $a = 2; say 2;  $a = [ 0 ]; say 2

[20:37] <p6eval> rakudo 31446: OUTPUT[1␤Odd number of elements found where hash expected␤current instr.: 'parrot;List;hash' pc 2877 (src/gen_builtins.pir:1999)␤]

[20:38] <moritz_> rakudo: my $a = { a => 42 }; say 1; $a = 2;

[20:38] <p6eval> rakudo 31446: OUTPUT[1␤Odd number of elements found where hash expected␤current instr.: 'parrot;List;hash' pc 2877 (src/gen_builtins.pir:1999)␤]

[20:38] <moritz_> rakudo: my $a = [0]; say 1; $a = 2;

[20:38] <p6eval> rakudo 31446: OUTPUT[1␤]

[20:38] <moritz_> rakudo: my $a = [0]; say 1; $a = 2; say $a.WHAT

[20:38] <p6eval> rakudo 31446: OUTPUT[1␤Array␤]

[20:40] <pmichaud> assignment is a bit broken in rakudo, still.

[20:40] <pmichaud> I thinks that $a = [ 0 ] is a Hash assignment because $a is a Hash

[20:40] <moritz_> yes, it should be a scalar holding a hash

[20:40] <pmichaud> this gets fixed when I get the new containers implementation in place (the draft I discussed with jonathan++ last week)

[20:40] <moritz_> I'll file a ticket, just in case

[20:41] <moritz_> and there's a test file for it also

[20:41] <pmichaud> tests++

[20:44] *** jferrero joined
[20:46] *** rindolf joined
[20:50] <pugs_svn> r22409 | moritz++ | [t/spec] fudged catch_type_cast_mismatch.t for rakudo, and added a few tests

[20:51] <moritz_> pmichaud: will add those tests to spectest_regression in the next commit - nice thing is that try { ... } catches those errors, so it's a TODO test rather then skip

[20:51] *** hercynium joined
[20:52] <moritz_> so once it's fixed, you'll immediately get two passing TODO tests ;)

[20:52] *** jhorwitz left
[20:53] <moritz_> (parallel testing)++

[20:55] <rakudo_svn> r31448 | moritz++ | [rakudo] add tests for RT #59382 to spectest_regression

[20:57] <pugs_svn> r22410 | moritz++ | [t/spec] fudged S29-scalar/defined.t for rakudo

[20:58] <moritz_> the new version of tools/update_passing_test_data.pl is very helpful

[20:58] <moritz_> I attribute it a few hundred passing tests spectests

[21:03] <rakudo_svn> r31449 | moritz++ | [rakudo] add tests for definedness to spectest_regression

[21:03] *** Limbic_Region left
[21:07] *** TJCRI left
[21:13] *** riffraff left
[21:14] *** hercynium left
[21:22] *** meppl joined
[21:22] <moritz_> std: role foo { has $.bar = 42 is rw }

[21:22] <p6eval> std 22410: OUTPUT[Unknown routines:␤     rw called at 1 ␤parsed␤]

[21:22] <pmichaud> S02-builtin_data_types/num.t:124 has

[21:22] <pmichaud>     my $a = "0d01.01";

[21:23] <pmichaud>     is(+$a, 1.01, "0d01.01 numifies to 1.01");

[21:23] <pmichaud> I don't think that the "0d" etc. prefixes are allowed to have decimals.

[21:23] <pmichaud> std:  0d01

[21:23] <p6eval> std 22410: OUTPUT[parsed␤]

[21:23] <pmichaud> std 0d01.01

[21:23] <pmichaud> std: 0d01.01

[21:23] <p6eval> std 22410: OUTPUT[parse failure␤]

[21:27] <moritz_> I haven't grokked all these number formats

[21:28] <pmichaud> shall I remove the test?

[21:28] <moritz_> pmichaud: but if you're confident that it's right, feel free to change the tests to eval_dies_ok

[21:28] <pmichaud> I'm confident that STD.pm currently doesn't allow it.  :-)

[21:29] <pmichaud> and that it is mentioned as being illegal as a constant

[21:29] <pmichaud> but in this case it shouldn't die -- it would numify to 1 instead of 1.01

[21:29] <moritz_> or that

[21:29] <moritz_> then correct it

[21:29] <pmichaud> okay, that seems reasonable-ish

[21:30] <pmichaud> I kinda worry with eval_dies_ok that we may be attempting to evaluate every possible thing that could go wrong (which seems a bit infinite :-)

[21:30] <moritz_> pmichaud: only the things of which somebody someday thought it was right

[21:30] <pmichaud> okay, works for me.

[21:31] <moritz_> pmichaud: and it's a common beginner's error to only test successes

[21:31] <pmichaud> so, basically keeping the negative patterns in the test files.  I like that.  :-)

[21:31] <moritz_> (especially when crafting regexes ;-)

[21:32] <pugs_svn> r22411 | pmichaud++ | [t/spec]:  Correct and unskip a numification test.

[21:32] <[particle]> ++

[21:35] <ruoso> STD has a dump_match of some sort, doesn't it?

[21:35] <ruoso> how do I use it?

[21:35] <[particle]> trystd iirc

[21:35] <moritz_> ruoso: perl5.10.0 STD5_dump_match $file

[21:36] <ruoso> hmmm... it seems I need a STD.pmc

[21:36] <moritz_> ruoso: 'make' builds it

[21:37] * ruoso just hopes that doesn't take hours to build :)

[21:37] <moritz_> ruoso: once you've got re::engine::TRE installed it's a piece of cake ;)

[21:38] <ruoso> it actually was quite fast...

[21:38] <moritz_> ruoso: oh, and some of these scripts assume taht you have a perl in /usr/local/bin/perl

[21:38] <ruoso> yeah... I had to make a link by hand

[21:38] <pmichaud> is anyone (moritz?) reviewing the spectest commits?  If I started making lots of changes based on my understanding of the spec, would anyone notice if I did something that didn't seem right?  ;-)

[21:39] <moritz_> pmichaud: I usually monitor them, aye

[21:39] <pmichaud> example:  I'm pretty sure that Junction.pick no longer does what it originally was thought to do

[21:39] <moritz_> aye

[21:39] <pugs_svn> r22412 | moritz++ | [t] merge and_precedence.t into precedence.t

[21:39] <pmichaud> it's not really worth preserving the tests, so I'm planning to just get rid of them

[21:39] * ruoso considering embedding SMOP in p5 to hack a SMOP backend for STD

[21:40] <moritz_> it probably autothreads on .values

[21:40] *** justatheory joined
[21:40] <moritz_> +1

[21:40] <pmichaud> well, latest discussion I heard was that all methods (including .values) autothread on junctions

[21:40] * ruoso . o O ( at least I hope that hacking in STD is easier than hacking in pugs )

[21:41] <moritz_> pmichaud: including .values? then how are you supposed to get a list of values?

[21:41] <pmichaud> I don't think that was ever decided completely.

[21:41] <pmichaud> but yes, .values needs to autothread, in case we have a junction of aggregates on which we want to get the .values :-)

[21:42] <ruoso> all methods, except the ones that have "Junctions" in their signature?

[21:42] <moritz_> ruoso: Object doesn't autothread either

[21:42] <pmichaud> ruoso: I'm talking about autothreading over the invocant

[21:42] <pmichaud> $junction.foo

[21:42] <PerlJam> autothreading seems very similar to laziness; there should be a way to explicitly thread or not  (IMHO)

[21:42] <ruoso> well... .values is a method of Junction, isn't it?

[21:42] <ruoso> so "Junction" is in the signature

[21:43] <pmichaud> ruoso: that wasn't where the discussion I had with TimToady ended up over the summer

[21:43] <moritz_> ruoso: that's the question - if values() is a method in class Junciton

[21:44] *** ryanc joined
[21:44] <moritz_> *Junction

[21:46] <pmichaud> how about things like...

[21:46] <pmichaud> ok(!(?(0&0) != ?(0&&0)), 'boolean context');

[21:46] <pmichaud> that doesn't seem to be a useful test... what exactly are we testing?

[21:47] *** wknight8111 joined
[21:48] *** rindolf left
[21:48] <moritz_> .oO( ... )

[21:48] <pmichaud> these are in S03-junctions/misc.t, btw

[21:48] <moritz_> fun with junction testing, part 4 of at least n²

[21:49] <moritz_> don't think it's useful - it's correct, though

[21:49] <moritz_> but I don't object to removing it

[21:50] <pmichaud> okay, that gives me enough guidance, I think.

[21:52] <ruoso> my initial sketch ideas on junctions autothreading is that the junction spawns the threads at the moment you try to use it in item context... I'm still not sure on how to join the threads back

[21:52] <ruoso> (although calling a method always imply context on the invocant...) hmmm

[21:52] <ruoso> maybe the autothreading process define a special CALLER that does the join... so it would initialize different interpreters (in smop every thread is a interpreter) set a clone of the current continuation in each one, but set the caller of the clones to be a special object... the "main" interpreter would then be blocked, waiting for the join, and building the result set...

[21:54] <moritz_> ruoso: note that they don't have to actually start a new thread (they may, though)

[21:54] <moritz_> ruoso: and afaict not every item context collapses them, only boolean context

[21:55] <ruoso> er... my $a = any(1,2,3); my $b = any(2,3,4); my $c = $a + $b;

[21:55] <ruoso> how is $c evaluated?

[21:56] <moritz_> ruoso: by first autothreading on one arg, then on the other

[21:57] <ruoso> exactly... because $a and $b were used in item context...

[21:57] <moritz_> (1|2|3) + (2|3|4) = any((1|2|3)+2, (1|2|3)+3, (1|2|3)+4)

[21:57] <moritz_> ruoso: I don't see the connection to item context

[21:57] <pmichaud> actually, it's   any(1 + (2|3|4), 2+(2|3|4), 3+(2|3|4))

[21:57] <ruoso> the bind to the signature of infix:<+>

[21:57] <pmichaud> (slightly different)

[21:57] <moritz_> ok, on the first arg first

[21:58] <pmichaud> leftmost all/none, followed by leftmost any/one

[21:58] <ruoso> the bind puts it in item context...

[21:58] <ruoso> and then the autothreading is triggered...

[21:58] <moritz_> that evaluates to any( 3|4|5, 4|5|6, 5|6|7)) == any(3..7)

[21:59] <moritz_> ruoso: junctions also autothreads on subs that provide list context, like print()

[22:00] <ruoso> but when you say print($c) it is item context, because of the sigil

[22:00] <moritz_> but $x = 1|2|3; print $x; behaves the same as print 1|2|3, no?

[22:01] <ruoso> it will autothread in the middle of the binding process

[22:01] <ruoso> and it will bind differently in each thread

[22:01] <pugs_svn> r22413 | moritz++ | [t/spec] undork test that failed if infix:<and> is actually short circuiting

[22:01] <moritz_> but from user POV there's no difference, right?

[22:08] <pugs_svn> r22414 | lwall++ | [STD] allow self-parse again

[22:12] <pugs_svn> r22415 | moritz++ | [t] merge blocks/implicit_parameters.t into spec/

[22:15] <pugs_svn> r22416 | moritz++ | [t/spec] re-fudged implicit-parameter.t for rakudo

[22:15] <moritz_> could somebody please take a look at the last test in t/spec/S04-declarations/implicit-parameter.t ?

[22:15] <moritz_> it seems wrong to me, but I'm not sure

[22:15] <pmichaud> $x = 1|2|3; print $x;  becomes   any(print(1), print(2), print(3))

[22:15] <moritz_> aye

[22:16] <TimToady> list contexts don't autothread

[22:17] <pmichaud> oh, at one time I thought they did.

[22:17] * moritz_ is confused

[22:20] <moritz_> @tell azawawi please don't fudge tests where the thing that's tested is not yet implemented - it doesn't help anybody

[22:20] <lambdabot> Consider it noted.

[22:20] *** ruoso left
[22:20] <pmichaud> whee, 36 more passing tests (next commit)

[22:20] <pmichaud> (running spectest_regression now)

[22:21] <pmichaud> moritz_: looking at implicit-parameter.t now

[22:21] <TimToady> see S09:1036 on junctions in slurpy context

[22:21] <TimToady> it looks pretty okay to me

[22:22] <TimToady> what do you mislike about it?

[22:22] <moritz_> you mean the test?

[22:23] <pmichaud> the test looks okay to me also.

[22:23] <pmichaud> yes, it should die -- $^foo not allowed in sub

[22:23] <moritz_> isn't the self-declared positional arg allowed in the inner sub?

[22:23] <pmichaud> in a block, yes, not in subs

[22:23] <moritz_> ah, right

[22:23] <pmichaud> sub { ^$foo }    # error

[22:23] <pmichaud> er, $^foo

[22:24] <moritz_> ok

[22:24] <pmichaud> sub { $^foo }    # error

[22:24] <pmichaud> { $^foo }   # ok

[22:24] <moritz_> but then it should be an eval_dies_ok, because detectable at compile time?

[22:25] <TimToady> semantic analysis time, so probably

[22:25] <s1n> moritz_: when you have a minute, i've got a quick question for ya

[22:25] <moritz_> s1n: go ahead

[22:26] <s1n> in reference to that get_number patch i submitted, i was going to add those tests to radix.t

[22:26] <pugs_svn> r22417 | moritz++ | [t/spec] s/dies_ok/eval_dies_ok/ on a test that will fail at compile time

[22:26] <TimToady> though I suppose we have to be careful about all the places where we've given latitude to the compiler to complain about things that it can deduced will be wrong at runtime

[22:26] <TimToady> latitude to complain is also latitude to not complain

[22:26] <s1n> is that the only place you want the tests? i can also add tests for other general number conversions somewhere else... maybe numerical_context.t?

[22:27] <TimToady> but eval_dies_ok is probably okay either way

[22:27] <s1n> moritz_: rt#59222

[22:27] <moritz_> s1n: there's also S03-operators/context-forcers.t which contain other str-to-num conversions

[22:27] <pmichaud> s1n:  have you adjusted the patch to avoid isxdigit ?

[22:28] <moritz_> s1n: maybe that's the better place

[22:28] <s1n> moritz_: okay that works for me as well

[22:28] <rakudo_svn> r31450 | pmichaud++ | [rakudo]:  Fix prefix:- and prefix:+ to better handle out-of-range Ints.

[22:28] <s1n> pmichaud: yes, see the ticket, i replaced them, was going to add tests to verify it works as it should

[22:29] <pmichaud> s1n++

[22:29] <pugs_svn> r22418 | moritz++ | [t/spec] unfudge previously corrected test

[22:29] <pugs_svn> r22419 | pmichaud++ | [t/spec]:  Unskip 32 arithmetic tests that now pass in Rakudo.

[22:29] <s1n> geez, you guys are committing machines

[22:30] <pmichaud> afk -- family time

[22:30] <s1n> moritz_: also, is there any area of the tests you'd like some help with?

[22:30] <s1n> i know you've really been cranking out work, so i was wondering if there was anything you had on your backburner

[22:31] <moritz_> s1n: just a sec...

[22:31] <moritz_> s1n: basically all the tests in oo/ need review, and need to be moved to spec/ if they are still correct

[22:31] *** bennymack joined
[22:32] *** alester left
[22:32] *** Limbic_Region joined
[22:32] <moritz_> s1n: apart from that, there are plenty tasks in t/TASKS

[22:32] <s1n> is this something i can do sporadically? my available time is spotty due to my schedule

[22:32] <s1n> okay, i can check tasks

[22:33] <s1n> oh, actually, there was one thing i did want to talk to you about

[22:33] <moritz_> the SINGLE TESTS section in TASKS contains smaller tasks

[22:33] <s1n> the undef references that are everywhere, have you looked into this yet?

[22:34] <moritz_> s1n: yes, and my current position is that it's not worth to tackle them until we have a mechanism to disable warnings

[22:34] <moritz_> s1n: many of them are valid but harmless, but it would be too much work to work around them

[22:34] <s1n> have you looked into this mechanism?

[22:34] <moritz_> no

[22:34] <s1n> yes, but they're on todo's mostly, so i was wondering if anyone had a plan on how to disable warnings

[22:35] <moritz_> I'll have to discuss that with pmichaud 

[22:35] <moritz_> anyway, have to go to bed know

[22:35] <moritz_> ciao

[22:35] <s1n> night

[23:18] *** iblechbot left
[23:32] *** Ontolog left
[23:37] *** Kitchy joined
[23:39] <Kitchy> @seen TimToady

[23:39] <lambdabot> TimToady is in #perl6. I last heard TimToady speak 1h 12m 3s ago.

[23:40] *** Exodist left
[23:42] <Kitchy> @seen Caelum

[23:42] <lambdabot> Caelum is in #math, #perl6 and #haskell. I don't know when Caelum last spoke.

[23:44] <Kitchy> @seen audreyt

[23:44] <lambdabot> audreyt is in #xmonad, #perl6, #haskell and #ghc. I don't know when audreyt last spoke.

[23:47] *** Pulpie joined
[23:47] *** Pulpie left
[23:51] <lichtkind> is yada forced upon anonymour routines?

[23:51] <Kitchy> Any idea when Merlyn's Perl 6 book is coming out? Is it even finishable yet?

[23:51] <lichtkind> nothing heard since month yout that

[23:54] *** justatheory left
[23:59] *** jferrero left
