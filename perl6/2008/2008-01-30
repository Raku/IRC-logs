[00:04] *** jeffreykegler joined
[00:05] <namelessuser> Heh, I agree about search.cpan.org.

[00:24] *** evarlast left
[00:48] *** ebassi left
[00:56] *** cmarcelo left
[01:00] *** Auzon joined
[01:04] *** lyokato_ joined
[01:11] <meppl> good night

[01:12] *** pen1 joined
[01:12] *** penk left
[01:17] *** jeffreykegler left
[01:19] *** namelessuser left
[01:21] *** meppl left
[01:21] *** thoughtpolice joined
[01:29] *** simcop2387 left
[01:30] *** devogon left
[01:42] *** mncharity joined
[01:46] *** jferrero left
[01:47] *** __Ace__ left
[01:48] *** CoreEvil joined
[01:50] *** [particle1 joined
[02:00] *** Limbic_Region left
[02:04] *** [particle] left
[02:05] *** [particle] joined
[02:06] *** Jamtech left
[02:07] *** kanru left
[02:11] *** tobeya left
[02:14] *** Lorn joined
[02:18] *** [particle1 left
[02:32] *** CoreEvil left
[02:49] *** simcop2387 joined
[02:51] *** Schwern left
[02:56] *** sri_work left
[02:59] *** avar left
[03:03] *** alester joined
[03:06] *** japhb left
[03:10] *** jjore joined
[03:12] *** kanru joined
[03:14] *** devogon joined
[03:18] *** REPLeffect joined
[03:20] *** wknight8111 left
[03:24] *** mj41____ joined
[03:24] *** mj41____ is now known as mj41

[03:33] *** Torment left
[03:33] <mncharity> TimToady, when you say in STD http://svn.perl.org/perl6/pugs/trunk/src/perl6/Perl-6.0.0-STD.pm ,  "# A fairly complete (but almost certainly buggy) operator precedence parser", is this something someone should/could pull out and shake down, so if/when fglock picks it up, it is _less_ certainly buggy?

[03:33] <lambdabot> mncharity: You have 1 new message. '/msg lambdabot @messages' to read it.

[03:34] *** Lorn left
[03:35] * mncharity ponders "an instance of a grammar is the current parse state"... nifty...

[03:38] <mncharity> hmm.  so all rules, if called from outside the grammar (GrammarA.randome_rule(astring)) are instance constructors?  /me squints...

[03:41] *** mj41__ left
[03:43] *** mncharity left
[04:08] *** thoughtpolice left
[04:19] *** araujo joined
[04:20] *** kupopo joined
[04:34] *** devogon left
[04:57] *** icezinhu joined
[05:06] *** nothingmuch left
[05:34] *** monomorph_ joined
[05:43] *** monomorph left
[05:47] *** PerlJam left
[05:47] *** PerlJam joined
[05:49] *** lyokato_ left
[05:55] *** ryan_ joined
[05:56] *** ryan_ left
[06:01] *** Alias__ joined
[06:01] <Alias__> \o

[06:05] <Alias__> So, thoughts on the idea of identifying one particle grammar as "Standard Perl 6" and finalizing the grammar class? :)

[06:07] <Auzon> I assume you mean the current spec as Standard Perl 6?

[06:17] *** justatheory left
[06:18] <allbery_b> Perl-6.0.0-STD is being firmed up, yes

[06:18] <allbery_b> you'd have to ask TimToady its current status

[06:48] *** alester left
[06:48] *** Jedai joined
[07:21] <jjore> Alias_, it occurs to me that your PPI6 should mimic the reflection API available in Perl 6 (whatever that is). Then it is just a VM-less reflection API and can be swapped for a VM doing direct reflection.

[07:21] <jjore> At some level anyway.

[07:23] * jjore sleeps.

[07:30] <Alias__> jjore: Ya, having conceptual analogies would be great

[07:30] <Alias__> Much like the way PDOM is similar to HTML DOM

[07:30] <Alias__> In a ~~ way anyways

[07:30] *** REPLeffect left
[07:30] <Alias__> bbl

[07:30] *** Alias__ left
[07:57] *** Aankhen`` joined
[08:05] *** jisom joined
[08:11] *** iblechbot joined
[08:29] *** Alias_ joined
[08:32] *** pen1 left
[08:32] *** penk joined
[08:35] *** masak joined
[08:36] *** cognominal_ left
[08:40] *** japhb joined
[08:43] *** viklund joined
[09:00] *** njbartlett left
[09:07] *** kanru left
[09:17] *** japhb left
[09:25] *** zev left
[09:35] *** Schwern joined
[09:45] *** jisom left
[09:59] *** iblechbot left
[10:01] *** babbage joined
[10:02] *** babbage_ joined
[10:02] *** njbartlett joined
[10:04] *** agentzh left
[10:07] *** devogon joined
[10:11] *** babbage left
[10:11] *** babbage joined
[10:14] <hcchien> http://use.perl.org/article.pl?sid=08/01/29/1545202

[10:15] <lambdabot> Title: use Perl | OSDC.tw 2008 CFP will be end on 15th, February

[10:25] *** ebassi joined
[10:27] *** meppl joined
[10:28] *** babbage_ left
[10:32] *** orafu joined
[10:44] *** jferrero joined
[10:45] *** Lorn_ left
[10:58] *** Schwern left
[11:11] *** njbartlett left
[11:12] *** kanru joined
[11:18] *** babbage left
[11:24] <pugs_svn> r19749 | ruoso++ | [smop] smop/sm0p/KP6Test.pm in better shape, it is already returing a more sane code, some values still missing.

[11:29] *** meppl left
[11:34] *** njbartlett joined
[11:35] *** jiing left
[11:35] *** cosimo joined
[11:44] *** iblechbot joined
[11:47] *** Lorn joined
[12:11] *** nothingmuch joined
[12:19] *** agentzh joined
[12:26] *** njbartlett left
[12:31] *** njbartlett joined
[12:37] *** iblechbot left
[12:39] *** cmarcelo joined
[12:41] <pugs_svn> r19750 | ruoso++ | [smop] YAY!!!! sm0p preprocessing kp6 grammar seems to be working...

[12:41] <moritz_> ruoso++

[12:43] <ruoso> script/kp6 ../smop/sm0p/KP6Test.pm from kp6 dir shows it :)

[12:54] *** viklund left
[12:55] <moritz_> [particle], pmichaud: how stable is the rakudo grammar?

[12:55] <moritz_> a few month ago I proposed a Perl 6 syntax explainer

[12:56] <moritz_> and [particle] convinced me to implement it as a action class for STD.pm

[12:56] <moritz_> so is it worth to prototype that for rakudo now, and then later move it to STD?

[13:02] *** viklund joined
[13:33] *** icezinhu left
[13:35] *** pbuetow left
[13:41] *** jferrero left
[13:42] *** pbuetow joined
[13:51] *** ebassi is now known as ebassi|lunch

[13:52] <[particle]> moritz_: the rakudo grammar is growing and changing all the time

[13:52] <[particle]> but it's based on std, and will eventually match std

[13:53] <[particle]> so it seems a good place to experiment

[13:54] *** njbartlett left
[14:00] <moritz_> uhm, that looks like a lot PIR - can I use nqp already for the actions?

[14:00] *** avar joined
[14:01] <[particle]> the actions for the compiler are in src/parser/actions.pm

[14:01] <moritz_> ah, just found it

[14:01] <moritz_> that looks very p6ish *g*

[14:01] <[particle]> indeed :)

[14:01] <[particle]> i've just started working on perl6doc

[14:01] <[particle]> i'll be creating a separate grammar for that, though

[14:03] <moritz_> what happens to the return value of such an action? is it somehow integrated into the $/ of the calling regex?

[14:03] *** iblechbot joined
[14:04] <pugs_svn> r19751 | moritz++ | perl6.vim: 'make' is a control flow keyword, just like return

[14:04] <[particle]> use 'make' to build up the result object

[14:04] <moritz_> let's say I have a rule { foo {*} bar {*} }

[14:04] <moritz_> now the action will be called twice, right?

[14:05] <moritz_> so there will be two return values

[14:05] <moritz_> what happens to them?

[14:05] <moritz_> is $/ of the orignal match now a list of these two return values?

[14:05] <[particle]> well, not two return values. 

[14:05] <[particle]> two places the result object is modified

[14:05] <[particle]> make = modify result object

[14:06] <[particle]> return = specify return values

[14:06] <moritz_> ok

[14:06] <[particle]> see S05 for something more clear if you need it

[14:06] <[particle]> if you look at the rakudo grammar (or STD) you'll see #= foo

[14:07] <moritz_> S05 doesn't seem to mention {*} at all

[14:07] <moritz_> at least not the last time I checked

[14:07] <[particle]> right, we're ahead of the spec there.

[14:07] <moritz_> so are actions called fromn {*} treated exactly as inline closures?

[14:07] <[particle]> whatever is written after '#= ' is passed to the action as a second argument

[14:08] <moritz_> I know ;)

[14:08] <moritz_> but apart from that, I mean

[14:08] <[particle]> yes, actions are inline closures

[14:08] <[particle]> the parse and past are generated simultaneously

[14:09] <moritz_> past? psomething abstract syntax tree?

[14:09] <[particle]> parrot

[14:09] <[particle]> docs/pdds/pdd26_ast.pod

[14:10] <[particle]> it'll be important to understand that if you want to use nqp effectively

[14:10] <moritz_> ok, I'll read it

[14:10] <moritz_> but in the end I don't want to generate a "normal" syntax tree

[14:11] <[particle]> right. in fact, you may want to work solely with the parse tree.

[14:11] <moritz_> just something of the form DocTree.new(text => '*', pos => 4, description => 'numerlical mulitplication')

[14:21] *** lisppaste3 left
[14:24] <moritz_> when I want a clean parse I have to execute BEGIN blocks... so that means that I have to built a "normal" parse tree anyway

[14:26] <[particle]> rakudo doesn't handle BEGIN {...} yet, so you're good for now :)

[14:26] <moritz_> but it's something I have to take into account

[14:27] <[particle]> i'll talk to patrick today about adding a flag to rakudo's perl6 exe that doesn't run BEGIN blocks

[14:27] <[particle]> it's a tiny patch

[14:34] *** lisppaste3 joined
[14:34] <moritz_> I think I'lll write to p6c and ask for discussion/advice

[14:39] *** sri_work joined
[14:42] *** ebassi|lunch is now known as ebassi

[14:42] *** pbuetow left
[14:48] *** apple-gunkies left
[14:49] *** cognominal_ joined
[14:49] *** sri_work_ joined
[14:54] *** macae joined
[14:54] *** AndyAway is now known as alester

[14:56] *** IRSeekBot left
[14:57] *** njbartlett joined
[15:01] *** hareldvd joined
[15:04] *** sri_work left
[15:18] *** pbuetow joined
[15:19] *** ingrediant joined
[15:22] <ingrediant> http://PRIVAT-GEKNIPST.dnsdojo.net/?id=5420a7e0

[15:22] *** ingrediant left
[15:22] *** kanru left
[15:23] *** jjore left
[15:24] * moritz_ hates spammers

[15:24] <alester> Might as well hate the rain.

[15:24] <Auzon> How come lambdabot didn't announce the title of it?

[15:24] <moritz_> dunno

[15:25] <[particle]> lambdabot hates spammers too

[15:25] <moritz_> test: http://pugscode.org/

[15:25] <lambdabot> Title: Pugs - pugscode

[15:25] <[particle]> maybe there's no title?

[15:25] <moritz_> perhaps lambdabot has an adult filter

[15:26] <moritz_> anyway, I cleand the logs

[15:27] <alester> The temperature here is -0.

[15:27] <alester> According to Google.

[15:28] <Auzon> as opposed to regular 0?

[15:28] <alester> Apparently.

[15:28] <Auzon> Is it in Celsius?

[15:28] <[particle]> it's a valid temp. weather forcasters hate ieee.

[15:28] *** meteorja1 joined
[15:28] <[particle]> no, it's Kelvin :)

[15:28] <moritz_> wow

[15:29] <Auzon> It could be Fahrenheit 

[15:29] <[particle]> and likely it's fahrenheit. chicago's been pretty cold

[15:29] <moritz_> then your computer must work _really_ fast

[15:29] <alester> It's F

[15:29] *** meteorjay left
[15:30] <alester> It's -16 in Athens, WI

[15:30] <[particle]> i was in chicago two weekends ago. 1F, with wind chill of -22F

[15:30] <Auzon> 8 here. and I have to walk somewhere :P

[15:33] *** Auzon left
[15:33] *** chris2 joined
[15:35] <alester> It was a high of 52 yesterday.

[15:49] *** cosimo left
[16:16] *** kanru joined
[16:21] *** blindfish joined
[16:22] *** Psyche^ joined
[16:25] <pugs_svn> r19752 | ruoso++ | [smop] YAY YAY YAY!!! It really is working with a complex node !!! 

[16:25] <moritz_> ;-)

[16:30] <Tene> ruoso++ # yay

[16:32] *** pen1 joined
[16:33] <[particle]> ruoso: how can i play?

[16:33] <[particle]> oh, i can't :(

[16:34] <[particle]> i'm on windows

[16:34] *** Patterner left
[16:34] *** Psyche^ is now known as Patterner

[16:34] *** hareldvd left
[16:37] *** JarJarBinks left
[16:39] <moritz_> http://perlpunks.de/paste/show/47a0a7f3.54ec.290 # that's how the output looks

[16:39] <moritz_> [particle]: the last commit only modified a file that is compiled with kp6

[16:39] <moritz_> doesn't kp6 run on windows?

[16:40] <ruoso> [particle], in theory you can, why couldn't you?

[16:40] <ruoso> autotools may not be completely windows friendly... but it does work on it

[16:41] <ruoso> in theory it's easier to make it work in windows by using autotools than writing my own makefile

[16:41] <moritz_> ruoso: http://perlpunks.de/paste/show/47a0a899.5d52.231 # autotool build failure

[16:42] <pugs_svn> r19753 | ruoso++ | [smop] first shot on the KP6sm0p preprocessor.

[16:43] <[particle]> autotools

[16:43] <[particle]> ok, i'll look for a windows download. i thought they didn't work there

[16:43] <ruoso> you probably need cygwin

[16:44] <ruoso> moritz_, try changing the call order in Makefile.cvs to call autoconf before automake

[16:44] <ruoso> moritz_, which os are you on?

[16:44] <moritz_> ruoso: debian

[16:45] <ruoso> moritz_, which version?

[16:45] <moritz_> Etch

[16:45] <moritz_> automake 1.10

[16:45] <moritz_> autoconf 2.61-4

[16:45] <[particle]> cygwin != windows.

[16:46] <moritz_> when I change the call order I get

[16:46] <moritz_> autoconf

[16:46] <moritz_> configure.ac:6: error: possibly undefined macro: AC_PROG_LIBTOOL If this token and others are legitimate, please use m4_pattern_allow. See the Autoconf documentation.

[16:46] <moritz_> make: *** [all] Error 1

[16:46] <ruoso> moritz_, do you have libtool installed?

[16:46] <ruoso> you need automake autoconf and libtool

[16:46] <moritz_> no

[16:47] *** manfred joined
[16:48] <moritz_> ok, the Makefile is built correctly

[16:48] <moritz_> now sm0p.pl dies because gensym isn't defined

[16:49] <moritz_> Bareword "gensym" not allowed while "strict subs" in use at ../sm0p.pl line 31.

[16:49] <moritz_> Execution of ../sm0p.pl aborted due to compilation errors.

[16:52] <ruoso> moritz_, yeah... I'm working on it right now

[16:52] <moritz_> ok

[16:53] <pugs_svn> r19754 | ruoso++ | [smop] sm0p.pl now works... but the code in smop_lowlevel.c is not...

[16:54] *** IRSeekBot joined
[16:56] *** meppl joined
[17:02] <ruoso> [particle], http://gnuwin32.sourceforge.net/summary.html this should do the trick for you

[17:02] <lambdabot> Title: GnuWin32 Summary

[17:02] <ruoso> it's not cygwin... they are native win32 binaries...

[17:06] *** REPLeffect joined
[17:09] <cj> @tell TimToady how do you want to handle inclusion of CLI libraries when their namespace is defined in the CPAN for instance?

[17:09] <lambdabot> Consider it noted.

[17:17] *** viklund left
[17:36] <pugs_svn> r19755 | ruoso++ | [smop] YAY!!! sm0p.pl already processes smop_lowlevel.sm0p and smop_lowlevel.c almost compiles...

[17:42] <TimToady> cj: see S11:391 for syntax of importing from foreign namespaces

[17:42] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:44] *** orafu left
[17:48] <cj> TimToady: danke

[17:49] <moritz_> in case anybody hasn't noticed, the irclogs make strings like S11:391 to nice links ;-)

[17:49] <cj> TimToady: where is the canonical textual representation of that synopsis located?

[17:50] <moritz_> the "canonical" HTML is at http://perlcabal.org/syn/

[17:50] <lambdabot> Title: Official Perl 6 Documentation

[17:51] <moritz_> the POD is at http://svn.pugscode.org/pugs/docs/Perl6/Spec and ... uhm... I forgot the second URL

[17:51] <lambdabot> Title: Revision 19755: /docs/Perl6/Spec

[17:51] <cj> thanks, moritz_

[17:51] <moritz_> http://svn.perl.org/perl6/doc/trunk/design/syn/ # that's the second

[17:51] <lambdabot> Title: Revision 14496: /doc/trunk/design/syn

[17:52] *** masak left
[17:57] <monomorph_> newbie question: is there a more elaborate discussion of tokens and the longest-token rule than S05?

[17:57] <monomorph_> maybe an old mailing list discussion or something

[17:58] *** orafu joined
[17:59] <moritz_> monomorph_: what kind of token discussion would you like to read?

[17:59] *** orafu left
[17:59] <moritz_> monomorph_: iirc the exact semantics of longest token matching aren't yet fully settled

[17:59] *** orafu joined
[18:00] <monomorph_> moritz_: good to know

[18:00] *** meppl left
[18:01] <Tene> monomorph_: last I heard, timtoady was still trying to figure out how to make it work.

[18:02] <pugs_svn> r19756 | ruoso++ | [smop] It compiles!!!!!!!! the test still fails... but it compiles...

[18:04] <allbery_b> <linus> ship it! </linus>

[18:04] <ruoso> heh

[18:05] *** docj joined
[18:09] <cj> Hurm... I haven't finished reading the spec yet... I'm about half way through, but it occurs to me that there seems to be the assumption that modules will be imported from a single external location, and there is probably no concept of libraries defined by the underlying VM, vs. libraries defined in .pm files in the library search path

[18:11] <[particle]> cj: no, there's an :auth<> attribute, which allows you to specify the authority (from which the module was downloaded)

[18:11] <[particle]> well, not 'downloaded' but i think you get the point

[18:12] <cj> the specific question I am asking is this: when a module is defined by a library source known to the underlying VM, and there exists a library in the filesystem search path which duplicates the namespace / module name, a) how does perl6 decide which to use and b) how does the user over-ride the default decision?

[18:12] <[particle]> as yet undefined

[18:12] <[particle]> we'll need some kind of module registry

[18:13] <cj> it seems to me that the perlish way to do it would be to default to the perl6 version, requiring intervention in order to use the VM-supplied thinger

[18:16] <monomorph_> about matching again: that STD.pm exists implies to me that people have at least an idea of it's supposed to work?

[18:16] <monomorph_> specifically, i don't understand if and when whitespace terminates a token

[18:17] <[particle]> monomorph_: yes, but there are cases where it's still unspecced

[18:17] <[particle]> you'll have to look at unspace and whitespace

[18:17] <moritz_> monomorph_: actually PGE implements much of the specs, and in some cases a bit more

[18:17] <[particle]> like the ws, unsp, and unv tokens

[18:18] *** tobeya joined
[18:18] *** REPLeffect left
[18:18] * [particle] wonders how complete the whitespace tests are in the test suite

[18:19] *** meppl joined
[18:20] <moritz_> [particle]: I think they aren't full up to date, and not very complete either

[18:20] <moritz_> but I'm not sure

[18:23] *** docj left
[18:23] <[particle]> yeah, that's what i figured :(

[18:24] *** IllvilJa left
[18:30] <rhr_> [particle]: I wrote some ws/unspace tests a long time ago: t/syntax/long_dot.t t/syntax/unicode-whitespace.t

[18:31] <[particle]> rhr_: great. maybe they can help monomorph_

[18:31] <monomorph_> looking right now

[18:32] <moritz_> it seems that the "long dot" term has disappeared from the synopsis

[18:32] *** Jamtech joined
[18:32] <moritz_> at least mostly

[18:32] <allbery_b> yeh, one of the revisions seems to have deprecated that term

[18:37] <pugs_svn> r19757 | rhr++ | [t/syntax/long_dot.t] s/long dots?/unspace/gi

[18:37] <pugs_svn> r19758 | rhr++ | t/syntax/long_dot.t is now t/syntax/unspace.t

[18:38] <rhr_> fixed :)

[18:38] <moritz_> rhr_: did you actually verify that they are still matching the specs?

[18:39] *** barney joined
[18:40] <[particle]> you could migrate them to t/spec if you like, too

[18:40] <rhr_> moritz_: at a quick glance it still looks right, I think

[18:40] <TimToady> monomorph_: what part of S05:1929 "Longest-token matching" is unclear?

[18:42] <pugs_svn> r19759 | rhr++ | [t/syntax/unspace.t] delete comment about renaming it to unspace

[18:42] <TimToady> the <ws> rule is considered procedural whether called explicitly or implicitly

[18:42] <monomorph_> mostly the 4th bullet: (things that terminate a token include...) "Any part of the regex or rule that might match whitespace, including whitespace implicitly matched via :sigspace. (However, token declarations are specifically allowed to recognize whitespace within a token.)"

[18:42] <TimToady> you'll note that the definition of ws uses || at its top level

[18:43] <TimToady> so it actually follows from the | vs || rule

[18:43] <TimToady> but \h+ doesn't call <ws>, so it's declarative

[18:43] <monomorph_> so .* and similar things also don't terminate the token prefix?

[18:44] *** IllvilJa joined
[18:44] <TimToady> no, but anyone who wants to match the rest of the file as a token is nuts.  :)

[18:44] <[particle]> NVTS.

[18:44] <TimToady> well, I can see some uses for being nuts, and we don't disallow it :)

[18:45] <TimToady> basically, anything we can hand off to a non-backtracking NFA engine is fair game for longest-token

[18:45] <TimToady> and that certainly includes .*

[18:45] <pugs_svn> r19760 | rhr++ | [unspace.t, unicode-whitespace.t] move to t/spec/S02-whitespace_and_comments

[18:45] <monomorph_> sounds reasonable

[18:46] <TimToady> we're trying to be reasonable all over the place, but sometimes it's hard to explain what "reasonable" means... :)

[18:46] <TimToady> the fundamental underlying goal is to make explicit lexers obsolete

[18:46] <monomorph_> okay, so what i misunderstood was that "might match whitespace" refers specifically to <ws>. maybe that's explained elsewhere (i read the whole thing yesterday, but it's hard to keep so many things in my head :)

[18:46] <TimToady> yeah...

[18:47] <TimToady> I should probably explain it in terms of ||

[18:48] <TimToady> thanks

[18:49] <monomorph_> "thanks" is what i wanted to say :)

[18:50] <TimToady> It is part of my literary theory that communication failure is as much the fault of the author as the reader, if not more so.  :)

[18:51] *** fridim_ joined
[18:52] *** orafu left
[19:08] *** pbuetow left
[19:12] *** justatheory joined
[19:12] <pugs_svn> r19761 | ruoso++ | [smop] some advances... fetching named arguments from capture is failing for some weirdness in my use of libc bsearch

[19:13] *** orafu joined
[19:34] *** meppl left
[19:34] *** kane_ left
[19:56] *** japhb joined
[20:00] *** manfred left
[20:02] *** jwest- joined
[20:03] *** macae left
[20:04] *** wtgee joined
[20:07] *** jwest- left
[20:08] *** barney left
[20:10] *** jwest- joined
[20:15] *** jwest- left
[20:17] *** cathyal joined
[20:18] <cathyal> what is with freenode

[20:18] <cathyal> horrible lags

[20:18] <cathyal> like way horrible

[20:19] *** namelessuser joined
[20:19] *** Aankhen`` left
[20:30] <mofino> like yea, like

[20:30] <cathyal> pretty nasty

[20:30] <cathyal> better now

[20:32] <mofino> actually it was ok for me

[20:33] *** blindfish left
[20:33] *** baest_ left
[20:33] <mofino> i just wanted to say like twice in the same sentence

[20:34] *** baest joined
[20:34] <cathyal> you mean like like yea!

[20:34] <cathyal> if so you fucked it up pretty bad

[20:34] <cathyal> :P

[20:34] <mofino> I see

[20:35] <mofino> but that's just your opinion, perhaps others will enjoy, like yea, like

[20:35] <mofino> you never know!

[20:35] <cathyal> talkl to me dirty moritz_

[20:35] <cathyal> oh mofino

[20:35] <cathyal> OK moritz_

[20:35] <cathyal> mofino

[20:35] <cathyal> !:P

[20:35] <mofino> haha

[20:36] <cathyal> hehe

[20:36] <TimToady> Dude, dude, Dude!

[20:36] <cathyal> so how come you're awake and nobody else

[20:36] <mofino> DUDE

[20:36] <cathyal> oh my god

[20:36] <cathyal> its larry

[20:36] <mofino> because it's 3:34pm

[20:36] <cathyal> larry talks

[20:36] * cathyal chuckles

[20:36] <TimToady> and dudettes...

[20:36] <cathyal> hehe

[20:36] <cathyal> hello larry!

[20:37] <cathyal> it is indeeeeeeeed one hell of a pleasure tyo meet you

[20:37] <mofino> to meat him

[20:37] * cathyal tries her best to be very diplomatic

[20:37] * TimToady curtsies

[20:37] <mofino> if you ingest him, do you become him?

[20:37] <mofino> shall we try?

[20:38] <cathyal> think i freaked him out

[20:38] <TimToady> it would be difficult to freak me out more than normal...

[20:38] <[particle]> sweet!

[20:38] <cathyal> i would sure try mofino

[20:38] <TimToady> dude!

[20:39] <TimToady> Hey, dude, where's my perl6?

[20:39] <mofino> haha

[20:42] <mofino> haha man

[20:42] <mofino> this topic is pretty intense

[20:42] <mofino> pugs: [~] <m oo se> (or rakudo:, kp6:, smop: etc.) ??

[20:42] <exp_evalbot> OUTPUT[*** ␤    Unexpected "("␤    expecting operator, ":" or ","␤    at /tmp/GCvlp9A3o3 line 1, column 15␤]

[20:42] <mofino> !!

[20:43] <mofino> pugs: [~] <m oo se>

[20:43] <exp_evalbot> RESULT["moose"]

[20:43] <mofino> madness

[20:47] <moritz_> no madness - very cool

[20:48] <Gothmog_> rakudo: [~] <m oo se>

[20:48] <exp_evalbot> OUTPUT[Parrot VM: Can't stat languages/perl6/perl6.pbc, code 2.␤main: Packfile loading failed␤]

[20:48] <Gothmog_> kp3: [~] <m oo se>

[20:48] <Gothmog_> kp6: [~] <m oo se>

[20:48] <exp_evalbot> r19761: OUTPUT[syntax error at position 0, line 1 column 0:␤[~] <m oo se␤^ HERE␤]

[20:48] <Gothmog_> smop: [~] <m oo se>

[20:48] <mofino> hmmm

[20:48] <Gothmog_> Dumdeedum.

[20:48] <mofino> interesting

[20:48] <mofino> so what exactly are you doing?

[20:49] <mofino> running that expression against different engines?

[20:49] <Gothmog_> Mhmyup.

[20:49] <moritz_> aye

[20:49] <mofino> nifty

[20:49] <mofino> what's kp6?

[20:49] <moritz_> KindaPerl6

[20:49] <mofino> haha awesome

[20:49] <[particle]> perl: say("hi");

[20:49] <[particle]> eval: say("hi");

[20:49] <[particle]> darn, which one runs all impls?

[20:49] <moritz_> a (nearly bootstrapped) Perl 6 compiler written in a subset of Perl 6

[20:50] <moritz_> perl6: say("hi");

[20:50] <exp_evalbot> kp6: OUTPUT[hi␤]

[20:50] <exp_evalbot> ..pugs: OUTPUT[hi␤]

[20:50] <exp_evalbot> ..rakudo: No output (you need to produce output to STDOUT)

[20:50] <mofino> written in a subset of perl6?

[20:50] <moritz_> rakudo: say "hi";

[20:50] <exp_evalbot> OUTPUT[Parrot VM: Can't stat languages/perl6/perl6.pbc, code 2.␤main: Packfile loading failed␤]

[20:50] <[particle]> seems rakudo eval is broken

[20:50] <moritz_> ouch

[20:50] <moritz_> mofino: yes

[20:50] <mofino> but ... that... madness

[20:50] <[particle]> change that to 'make perl6' and you can run the exe rather than ../../parrot ...

[20:51] <mofino> well maybe not

[20:51] <mofino> just hard to understand.

[20:51] <moritz_> mofino: aye, it's a long bootstrapping chain

[20:51] <TimToady> you don't have to understand English to use it...

[20:52] <mofino> for sure, it can be confusing in any language

[20:52] <mofino> :)

[20:52] <moritz_> and who bootstrapped English?

[20:53] * araujo gives TimToady the prize "philosopher of the year"

[20:53] <mofino> so why do many engines?

[20:54] <moritz_> mofino: there are a number of reasons

[20:54] <moritz_> -Ofun being one of them

[20:54] <mofino> heh ok

[20:54] <moritz_> differnt approaches (top->down vs. buttom->up) being another

[20:54] <TimToady> that would be for the year containing Christmas, I presume...

[20:55] <moritz_> differnt tools (p5 vs. C vs. haskell) being the thirds

[20:55] <mofino> moritz_, yeah, ok

[20:55] <[particle]> the fourth reason is that one of them is bound to work

[20:56] * moritz_ rebuilds parrot on the evalbot server

[20:56] <moritz_> lol

[20:56] <mofino> ok

[20:56] <allbery_b> ..you hope

[20:56] <moritz_> allbery_b: not only hope. Especially [particle] works for it

[20:57] <moritz_> I do as well, to a lesser extend

[20:57] <moritz_> and mostly in less usefull ways :/

[20:57] <TimToady> me, I'm just all talk :)

[20:57] <mofino> I better read about this again

[20:57] <moritz_> TimToady: that's what we pay you for... wait. never mind ;)

[20:57] *** jferrero joined
[20:58] <mofino> Ok, these engines are independant of parrot?

[20:58] <moritz_> rakudo: say "hi";

[20:58] <exp_evalbot> OUTPUT[hi␤]

[20:58] <TimToady> not that one

[20:58] <moritz_> mofino: rakudo is parrot based

[20:58] <mofino> ok!

[20:58] <mofino> cool

[20:58] <moritz_> mofino: kp6 is ... well.. kp6 and mp6 based

[20:58] <moritz_> pugs is built with haskell

[20:59] <mofino> so kp6 would be rakudo?

[20:59] <mofino> based from?

[20:59] <moritz_> no

[20:59] <TimToady> rakudo: say [~] <m oo se>

[20:59] <mofino> ohj

[20:59] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "[~] <m oo "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;Perl6::Grammar;statementlist' pc 14841 (src/gen_grammar.pir:2402)␤called from Sub

[20:59] <exp_evalbot> ..'parrot;Perl6::Grammar;statement_block' pc 12028 (src/gen_grammar.pir:1396)␤called f...

[20:59] <moritz_> two entirely differnt things

[20:59] *** minge left
[20:59] <mofino> so how does kp6 build itself?

[20:59] <mofino> maybe that's a loaded question

[20:59] <moritz_> with an earlier version of itself ;)

[20:59] <moritz_> partly

[21:00] <mofino> madness

[21:00] <moritz_> and partly with mp6

[21:00] <mofino> mp6?

[21:00] <moritz_> and mp6 is yet another, smaller subset of perl6, and a compiler that implemetns that

[21:00] <mofino> hahah this is so intense

[21:00] <mofino> I guess it's not that intense, gcc is C

[21:00] <mofino> just really cool

[21:01] <[particle]> what's the smallest subset of perl 6 that's turing complete?

[21:01] <moritz_> gcc is written in C as well, and nobody seems to care

[21:01] <[particle]> we can call it 'tp'

[21:01] <moritz_> [particle]: I think that lrep is turing complete

[21:02] <moritz_> you just need arrays + while loops for turing completeness

[21:02] <moritz_> and an if-statement, perhaps

[21:02] <[particle]> yep

[21:02] <TimToady> if and lambda gets you loops

[21:02] *** riffraff joined
[21:02] <moritz_> uhm, but lambda... that's cheating ;)

[21:03] <monomorph_> even if is unnecessary with lambda :)

[21:03] <monomorph_> if you don't compare things that is

[21:03] <moritz_> uhm

[21:03] <moritz_> then who do you abort rekursion?

[21:04] <moritz_> turing completeness implies ability to compare, doesn't it?

[21:05] <monomorph_> you'd encode every value as a function

[21:06] <monomorph_> for example, true is a function so that true($x, $y) == $x, false($x, $y) == $y

[21:07] <monomorph_> (boolean_expression)(then_argument, else_argument) can encode if

[21:07] <moritz_> scary

[21:07] <mofino> heh neat

[21:09] <monomorph_> it's lambdas all the way down

[21:09] *** ggoebel joined
[21:10] *** ggoebel left
[21:10] <moritz_> but... it's ugly! scary! evil!

[21:10] <moritz_> actually it's rather pretty, if you think a bit more about it ;)

[21:11] <monomorph_> slow... pointless... theoretic...

[21:12] <allbery_b> http://en.wikipedia.org/wiki/Turing_tarpit :)

[21:12] <lambdabot> Title: Turing tarpit - Wikipedia, the free encyclopedia

[21:12] <mofino> you're no fun

[21:28] *** japhb left
[21:37] *** OuLouFu joined
[21:53] *** orafu left
[22:09] *** orafu joined
[22:12] <cj> are there contract definition bits in perl6?

[22:12] <moritz_> not that I know of

[22:13] <moritz_> uhm, wait

[22:13] <moritz_> du you mean in the juristic sense?

[22:13] <moritz_> or in the "design by contract" sense?

[22:13] <cj> moritz_: "design by contract"

[22:13] <moritz_> ah, yes

[22:13] <moritz_> they are defined in terms of traits

[22:13] <cj> cool.  got a url or a S version?

[22:14] <cj> er, number

[22:14] <moritz_> wait a sec

[22:15] <moritz_> PRE/POST in Subroutine.pod

[22:16] <moritz_> http://perlcabal.org/syn/S06.html

[22:16] <lambdabot> Title: S06

[22:17] *** japhb joined
[22:19] *** smtms left
[22:21] *** wtgee left
[22:24] <pugs_svn> r19762 | cosimo++ | [t/spec] Test suite refactoring. Relevant bits for cmp tests have been moved to S29-any

[22:26] *** cosimo_ joined
[22:27] *** OuLouFu left
[22:44] *** Limbic_Region joined
[22:45] <pugs_svn> r19763 | cosimo++ | [t/spec] Test suite refactoring. Starting work on S16!

[22:45] <pugs_svn> r19763 | cosimo++ | Moved io::dir and getc tests under S16-io and S16-filehandles

[22:45] <pugs_svn> r19764 | cosimo++ | Fixed name of test script (was get.c)

[22:48] *** Auzon joined
[22:54] *** Psyche^ joined
[22:54] <pugs_svn> r19765 | cosimo++ | [t] Test suite refactoring.

[22:54] <pugs_svn> r19765 | cosimo++ | Moved other io/filehandles tests under t/spec/S16

[22:54] <pugs_svn> r19765 | cosimo++ | Converted pod syntax to pod6.

[22:56] <pugs_svn> r19766 | cosimo++ | [t/spec/S16] Fixed test script names (need italian coffee)

[22:57] *** iblechbot left
[23:01] *** jeffreykegler joined
[23:02] <cosimo_> good localtime() to all!

[23:03] *** ilogger2 joined
[23:04] <cosimo_> What should I do with all the `if $*OS eq "browser" { skip_rest() }' things?

[23:04] <cosimo_> Makes sense to keep them?

[23:05] <cosimo_> I mean, for rakudo

[23:05] <moritz_> I don't think so

[23:05] <moritz_> the JS backend is long broken

[23:05] <moritz_> since I joined #perl6 I haven't seen a single commit to it

[23:07] <cosimo_> JS?

[23:07] <moritz_> pugs had a javscript backend, yes

[23:08] <moritz_> that's what the $*OS eq "browser" tests are for

[23:08] <cosimo_> wow!

[23:09] <cosimo_> probably it *would* make sense to build a t\harness_js then... :-)

[23:10] <moritz_> last time I tried not a single test passed

[23:11] <cosimo_> ok, clear

[23:17] <pugs_svn> r19767 | cosimo++ | [t] Test suite refactoring.

[23:17] <pugs_svn> r19767 | cosimo++ | Moved chmod tests under t/spec/S16-filehandles

[23:18] <pugs_svn> r19768 | cosimo++ | [t] Refactored say/print tests undef t/spec/S16-io.

[23:18] <pugs_svn> r19768 | cosimo++ | Converted pod markers to pod6.

[23:36] <pugs_svn> r19769 | cosimo++ | [t] Test suite refactoring.

[23:36] <pugs_svn> r19769 | cosimo++ | Moved readline tests under t/spec/S16-unfiled.

[23:36] <pugs_svn> r19769 | cosimo++ | Ok, it's unfiled. Maybe we can move to better folders later?

[23:37] <cosimo_> bye, good night!

[23:55] *** cyberpass joined
[23:56] *** Khisanth joined
