[00:40] *** fridim_ left
[01:17] *** alester joined
[01:27] *** Ched left
[01:28] *** Ched joined
[01:34] *** Auzon joined
[01:52] *** alester left
[02:02] *** alester joined
[03:26] *** [particle1 joined
[03:30] *** alanhaggai joined
[03:33] *** [particle] left
[03:48] *** pbuetow left
[03:54] *** [particle1 is now known as [particle]

[04:09] *** Patterner left
[04:09] *** Psyche^ joined
[04:09] *** Psyche^ is now known as Patterner

[04:25] <mncharity> let's see...

[04:26] <mncharity> the new/current STD.pm EXPR regrettably generates cycles in the parse"tree".

[04:28] <mncharity> not clear how to proceed...

[04:33] *** alanhaggai left
[04:35] *** meteorjay left
[04:38] *** Psyche^ joined
[04:40] <mncharity> ah well.  kludge it with a (not very) deepcopy.

[04:53] <Tene> mncharity: add test coverage for what?

[04:53] <Tene> Ahh.

[04:53] <Tene> mncharity: t/spec/S06-signature/

[04:55] *** Patterner left
[04:55] *** Psyche^ is now known as Patterner

[04:55] *** drbean joined
[05:07] <mncharity> re signature, right.  having just implemented it, there's the opportunity to think up a truly nasty set of tests. :)

[05:07] <Auzon> Which implementation(s) does this affect?

[05:09] <mncharity> ﻿Auzon: "this"?

[05:09] <mncharity> Tene was working on rakudo.  but the tests would be implementation independent.

[05:10] <Auzon> Ah, ok

[05:13] <Tene> mncharity: When tests were being added for placeholder vars earlier, moritz++ told me that test files should be as minimal as possible, only testing one single thing at a time.  What should I name a test file that just has a glob of mixed up placeholder tests?

[05:20] *** alester left
[05:21] <mncharity> hmm...

[05:23] <mncharity> t/blocks/placeholders.t ?

[05:24] <mncharity> (sorry for the response lag - my sound was muted - fixed)

[05:26] <mncharity> for spec, perhaps create a naming convention for such a bag of tests...

[05:28] <Tene> Hm.  Will rakudo eventually be using all of pugs' t/?

[05:29] <Tene> Or will everything in t/ need to be reorganized into t/spec/?

[05:29] <mncharity> given the emphasis t/spec places on organization, when tests are being created, but not from the snn, it might be worth separating the steps of test creation and placement in spec, just so the test creation barrier doesn't discourage test creation.

[05:29] <mncharity> s/﻿test creation barrier/﻿test organization barrier/

[05:30] <mncharity> ﻿Tene: I'm unclear on the plan.  My very fuzzy impression is "maybe" and "I think that's the intent?".

[05:31] <Tene> Hm.

[05:32] <mncharity> the old vision, which I believe is still valid, is to tell people "put your new tests anywhere, named anything".  we can always move them later, once they exist.

[05:32] <Tene> I'm having trouble generating corner cases that are likely to break without breaking existing tests.

[05:33] <mncharity> ﻿"without breaking existing tests", ?  breaking test files?

[05:34] <mncharity> placeholder_stress_test.t  ?

[05:34] <mncharity> I didn't understand the ﻿"without breaking existing tests" part.

[05:35] <Tene> "causing existing tests to fail"

[05:36] <Tene> I'm having trouble coming up with ( test cases that could fail without existing tests failing ).

[05:37] <mncharity> sorry, you mean existing test files?  as in, adding the (failing) corner cases to an existing .t file will break parsing of the .t file?

[05:37] <revdiablo> Tene: You mean you're having trouble coming up with tests that are unique?

[05:37] * mncharity confuzed

[05:39] <mncharity> ahh.  redundancy seems fine.  especially outside of t/spec

[05:39] *** alanhaggai joined
[05:40] <mncharity> think of all the thousands of regexp tests.  their task is to catch the "oops, thought we handled that specific case correctly but didn't".

[05:41] <mncharity> ideally, rather than writing individual tests, we'd have a program which generates them randomly, and spend free cycles pounding that against implementations.

[05:42] *** alanhaggai left
[05:42] <mncharity> s/rather than/in addition to/

[05:42] * Tene nods.

[05:42] *** alanhaggai joined
[05:43] <Tene> Nobody currently runs rakudo against t/block/, and pugs can't even parse $:foo, iirc.

[05:43] <Tene> pugs: sub f { say $^foo, $:quxx, $^bar, @_[0], %_<frob> }; f(1, 2, 3, :quxx(4), :frob(5));

[05:43] <exp_evalbot> OUTPUT[*** ␤    Unexpected ":quxx"␤    expecting "::"␤    at /tmp/VIMECTklnu line 1, column 21␤]

[05:47] <mncharity> while pugs was under active development, there was sort of a low-level discouragement of adding tests "too far in advance" of current capabilities.  at this point, I'd say just go for it.  almost no one runs pugs, so spending time wrapping failing tests to make pugs happy seems unnecessary overhead.  ?

[05:48] <mncharity> especially if they are in a separate file

[05:48] *** ispy_ left
[05:49] <mncharity> at a minimum, it will help in shaking down STD.pm via STD_red.

[05:51] <mncharity> STD_red is being run against all of t/ , generating the stream of STD.pm bug reports which has been going by lately.

[05:54] <Tene> Okay.  Give me a filename to create.

[05:57] <mncharity> ﻿t/blocks/placeholders.t

[05:57] <mncharity> ﻿t/blocks/sub_placeholders.t

[05:58] <mncharity> eh, back to ﻿t/blocks/placeholders.t ;)

[05:59] <mncharity> yipes, 2am...

[06:00] <mncharity> getting elf_f working on the new parsetree is still a work in progress.  but the deepcopy hack seems to work, so hopefully it will just be a straightforward slog.  we'll see.  "tomorrow" I think.

[06:11] <mncharity> good night all &

[06:11] *** mncharity left
[06:35] *** [particle1 joined
[06:36] *** meppl joined
[06:53] *** [particle] left
[07:19] *** ludan joined
[07:30] *** alanhaggai_ joined
[07:31] *** rindolf joined
[07:39] *** bsb joined
[07:44] *** alanhaggai left
[07:45] *** fridim_ joined
[08:19] *** alanhaggai_ left
[08:29] *** alanhaggai joined
[08:41] *** vixey joined
[08:59] *** Helios- joined
[09:03] *** smtms joined
[09:36] *** smtms left
[09:41] *** smtms joined
[09:45] *** IllvilJa left
[09:50] *** schmalbe joined
[10:04] *** IllvilJa joined
[10:11] *** schmalbe left
[10:27] *** yewenbin joined
[10:29] *** penk joined
[10:33] *** schmalbe joined
[10:36] *** ludan left
[11:17] *** rindolf left
[11:28] *** iblechbot joined
[12:16] *** finger joined
[12:18] *** ispy_ joined
[12:26] *** yewenbin left
[12:41] *** masak joined
[12:46] *** finger left
[13:00] *** pbuetow joined
[13:06] *** rjbs joined
[13:06] <rjbs> Quick question!

[13:06] <rjbs> I don't even know if this will quite make sense, but:

[13:07] <rjbs> Given my $array, what must one do to get its elements in list context? 

[13:07] <rjbs> I'm asking mostly to get a sixish method name for something in Moose::Autobox.

[13:07] <masak> rjbs: @{$array}

[13:07] <rjbs> Is there a method?

[13:07] <pbuetow> or just @$array

[13:08] <masak> rjbs: not to my knowledge

[13:08] <rjbs> With Moose::Autobox, an array is always an arrayref, and there is currently no way but @{} to get it as a list.

[13:08] <rjbs> so, we want/need a method for that.

[13:08] <masak> write one.

[13:08] <rjbs> That's not the issue.

[13:08] <rjbs> The issue is: does Perl 6 have a method for this, the name of which we should use.

[13:08] *** pmurias joined
[13:09] <pmurias> rjbs: deference?

[13:09] <rjbs> Do you mean dereference?

[13:09] <pbuetow> deref

[13:09] <rjbs> Dereference is a lousy name, because you want to be able to call this on a Hash object, too

[13:09] *** BinGOs left
[13:09] <rjbs> but not a Code object

[13:09] <rjbs> even though a Code object is a reference (in this context)

[13:09] <pmurias> lunch&

[13:10] *** BinGOs joined
[13:10] <rjbs> enjoy

[13:10] <pmurias> ;)

[13:17] *** penk left
[13:17] *** penk joined
[13:26] *** BinGOs left
[13:27] *** BinGOs joined
[13:31] <pmurias> rjbs: you can't call @{} on a hash ref

[13:33] <rjbs> I never said I wanted to.

[13:33] <rjbs> but in Perl 5, a hash can be taken in list context

[13:34] <pmurias> maybe .list then

[13:34] <rjbs> Aha.  So there is a method called "list"?

[13:34] *** schmalbe left
[13:35] <masak> might not .array be more accurate here?

[13:35] <rjbs> I don't know what either of those methods do, per se.

[13:35] * rjbs has to run out the door, back in 30min.

[13:42] *** rdice joined
[13:47] *** alester joined
[13:48] *** jhorwitz joined
[14:13] *** cls_bsd joined
[14:17] *** eternaleye left
[14:23] *** alanhaggai left
[14:26] *** kyrbe joined
[14:29] *** kyrbe left
[14:37] *** schmalbe joined
[14:38] *** ruoso joined
[14:55] <[particle1> rjbs: .list

[14:55] *** [particle1 is now known as [particle]

[14:55] <rjbs> Thanks.

[14:56] <[particle]> np

[14:56] <[particle]> .hash and .item (scalar) may help too

[14:56] <rjbs> There was some debate on #moose which finally led to deciding on flatten.

[14:56] <rjbs> The problem with .list is that Moose::Autobox has a List role, which a Perl 5 list could not perform for probably obvious reasons.

[14:57] <rjbs> namely, that it is not a reified collection

[14:57] <rjbs> I had suggested ->perl_list, but there were unclear objections.

[14:57] <[particle]> are anonymous classes not created when a role is used in a context where a class is expected?

[14:58] <rjbs> In what language?

[14:58] <[particle]> moose

[14:58] <rjbs> I'm not sure, but if you're asking because of this problem, there's a more fundamental difficulty.

[14:58] <rjbs> which is that returning a list returns something on which you can't call a method in p5

[14:58] <rjbs> even with autobox

[14:58] <[particle]> sorry, you mentioned reified, i jumped to classes

[14:59] <[particle]> of course, you're right

[14:59] <rjbs> aha

[14:59] <stevan_> [particle]: no, we dont do that

[14:59] <stevan_> roles are not instantiable

[14:59] <[particle]> nor are they in perl 6

[14:59] <rjbs> instantiable is a fun word

[15:00] <[particle]> stevan_: could it be added to moose? to make the semantics more closely approximate perl 6?

[15:00] <[particle]> even if it's not core moose/

[15:00] <stevan_> not easily

[15:00] <[particle]> harumph

[15:00] *** alanhaggai joined
[15:00] <stevan_> My::ROle->new # method doesnt exist

[15:00] <stevan_> if you wanna put AUTOLOAD crap in there,.. be my guest :P

[15:00] <stevan_> just keep it away from my Moose :P

[15:00] <[particle]> whee!

[15:01] <PerlJam> [particle]: my Role $foo; creates an anonymous class though, right?  So they *seem* instantiable :)

[15:01] <[particle]> yes, anonymous class

[15:01] <stevan_> [particle]: I also never liked that 

[15:01] <[particle]> also, classes can be used like roles, sometimes

[15:01] <stevan_> blurs the distinction 

[15:01] <stevan_> already have enough problems with people treating roles like classes

[15:01] <PerlJam> stevan_: just like we're blurring the distinction between arrayrefs and arrays

[15:02] <stevan_> no, thats totally different

[15:02] <[particle]> it's quite dwimmy--so magical and scary

[15:02] <stevan_> dwim(even if it is wrong)

[15:02] <stevan_> :P

[15:02] <[particle]> i haven't used it any real code, so i can't say i've explored the dangers

[15:02] *** penk left
[15:03] <[particle]> but, i agree that it blurs the distinction

[15:03] <stevan_> [particle]: having played a LOT with roles for a while now (3+ years if you include the trait stuff)

[15:03] <[particle]> school me!

[15:03] <stevan_> I think that making a clear distinction is better then suppling some sugar

[15:03] <PerlJam> [particle]: I imagine that  my Role $foo; my Role $bar; could cause some grief if the user expects $foo eqv $bar  (or whatever the right verb is there)

[15:04] <stevan_> one of the first problems people have with Moose roles is that they cannot inherit them

[15:04] <stevan_> which is just a misuse 

[15:04] <stevan_> and even if we did support adding an "extends" to a role, it wouldnt work like they think

[15:05] <[particle]> umm, yeah, total misuse

[15:05] <PerlJam> stevan_: You tell people how it works and that's what they'll think  :)

[15:07] <stevan_> PerlJam: yeah,.. uhm... in which world do you live :P

[15:07] <stevan_> PerlJam: you are assuming people read docs,.. and pay attention

[15:07] <stevan_> and not trust their own "intuition"

[15:08] <PerlJam> yeah.   (so speaks the guy who was guessing at ruby syntax the other day rather than read the docs :)

[15:08] <PerlJam> in any case, this sounds like something that'll make it into a FAQ or cookbook or something.

[15:08] <[particle]> Moose's Law says that every 18-24 months the number of folks who get moose-oo wrong will roughly double

[15:09] <PerlJam> "How do I inherit a role?"   "Compose it into a class and inherit that silly"

[15:09] <stevan_> yeah

[15:13] *** masak left
[15:16] *** cmarcelo joined
[15:19] *** schmalbe left
[16:07] *** ludan joined
[16:08] *** justatheory joined
[16:27] *** ruoso left
[16:28] *** ruoso joined
[16:34] *** pugs_svnbot joined
[16:36] <diakopter> pugs_svnbot: welcome back

[16:42] *** ludan left
[16:48] *** jhorwitz_ joined
[16:50] *** REPLeffect_ is now known as REPLeffect

[17:04] *** jhorwitz left
[17:07] <pmurias> ruoso: the example at http://www.perlfoundation.org/perl6/index.cgi?smop_s1p_language isn't supposed to run?

[17:07] <lambdabot> Title: SMOP s1p Language / Perl 6

[17:08] <pmurias> i get a Bad sm0p code at fib.c at sm0p.pl line 50, <GEN13> line 1 error , when i try to compile it

[17:08] <pmurias> and i get spot at least one bug

[17:08] *** eternaleye joined
[17:10] *** kanru joined
[17:10] <pmurias> (the fib variable is use only one and not declared anywhere)

[17:11] *** rjbs left
[17:17] *** tobeya joined
[17:32] *** rindolf joined
[18:00] *** valkyrie- joined
[18:10] <ruoso> pmurias, I hadn't had the time to actually write it as code...

[18:10] <ruoso> that is some pseudocode to execute

[18:11] <ruoso> I'm not sure SMOP__OO_LOWL__Method is already implemented

[18:44] *** cls_bsd left
[19:10] <valkyrie-> I want aspath regex matching to work like (.+) ($1) ($1) so you can detect prepends and act upon them

[19:24] *** iblechbot left
[19:28] *** rindolf left
[19:28] <spinclad> valkyrie-: aspath regex matching ?

[19:42] <moritz_> re

[19:56] <valkyrie-> nothing

[19:58] <vixey> what phase is kp6 in now?

[20:01] <vixey> I gues that's not being worked on right now hten

[20:02] <moritz_> vixey: it's currently waiting for a faster backend, which should hopefully be smop

[20:02] <vixey> ok thanks

[20:05] <pmurias> vixey: why are you asking?

[20:06] <vixey> just looking around seeing if there's anything I'd be able to help with

[20:06] <vixey> (I did some on the kp6->lisp compiler a while back)

[20:07] <moritz_> if you feel like hacking, go ahead

[20:08] <moritz_> or you could hack on rakudo (the parrot based Perl 6 compiler)

[20:13] *** Psyche^ joined
[20:14] *** cotto joined
[20:17] <pmurias> vixey: if you like working in p5 you could look at elf

[20:18] <pmurias> vixey: you had a different nick before?

[20:18] <vixey> yeah fax

[20:18] <vixey> just looking at all this new stuff

[20:21] <pmurias> mncharity (formerly known as putter) is eager to help other people work on his elf compiler (misc/elf)

[20:22] <pmurias> shower&

[20:22] <moritz_> perhaps I should look at it a bit more, because I'm far more familiar with p5 than with parrot+PCT

[20:24] *** Patterner left
[20:24] *** Psyche^ is now known as Patterner

[20:28] *** japhb left
[20:32] <pmurias> moritz_: what's stopping you? ;)

[20:34] <moritz_> pmurias: too many other projects/stuff

[20:40] <ispy_> Hey guys, does rakudo use the @INC available to my local Perl copy I built it against?

[20:40] <[particle]> rakudo doesn't run perl 5

[20:40] <moritz_> ispy_: use it for what?

[20:41] <ispy_> Basically, how I can use the perl5 core modules available to my local perl 5.10 copy, with rakudo.

[20:41] <moritz_> you can't

[20:41] <ispy_> Or do I have to do it manually?

[20:42] <moritz_> because rakudo doesn't do any Perl 5 at all (not yet)

[20:42] <ispy_> ok.

[20:42] <ispy_> So as it stands now, no modules except ones I create in perl6.

[20:42] <moritz_> aye

[20:42] <ispy_> Cool, thanks for the clarification.

[20:43] <moritz_> btw there's a #parrot on irc.perl.org

[20:43] <moritz_> the parrot and rakudo hackers are mostly there

[20:43] <ispy_> thanks.

[20:43] <[particle]> we rakudo hackers prefer perl 6 stuff to stay in here

[20:43] <[particle]> but it does tend to bleed into #parrot a lot

[20:46] *** ispy_ left
[20:47] *** wknight8111 joined
[20:47] *** japhb joined
[20:54] <pmurias> is parrot stackless?

[20:55] <moritz_> yes

[20:55] <[particle]> well, it's trending that way. the user stack disappeared in the last release

[20:56] <pmurias> [particle]: i meant not using the c stack (much)

[20:56] <pmurias> not stack based vs register based

[20:57] <moritz_> it uses continuations for sub calls, not the stack

[21:00] *** ruoso left
[21:00] <[particle]> parrot still has a control stack

[21:01] <[particle]> it's going away, though

[21:01] *** Coke joined
[21:02] <Coke> Hio. Is there a FAQ to answer the question "If Perl 6 wasn't negatively impacting Perl 5 development, what caused the gap betwen Perl 5 releases?"

[21:03] <[particle]> the answer is "stability"

[21:04] <[particle]> which biologists call "death" ;)

[21:05] <Coke> we *really* need to improve our marketing. (5 -and- 6)

[21:05] <moritz_> I think there was a time when it did impact perl 5 development negatively, at least in the short term

[21:05] <moritz_> (but I don't know if I can say that publicly without getting shot)

[21:06] <PerlJam> moritz_: when was that time?  and why?

[21:06] <PerlJam> Coke: to paraphrase Nicholas "Perl isn't broken enough"

[21:07] <moritz_> PerlJam: the time when many former perl 5 developer set different priorities, partly Perl 6 specs (like Larray), partly with the parrot effort

[21:07] <moritz_> PerlJam: but since I wasn't interested in perl then, I can't really tell if that's true

[21:09] <PerlJam> moritz_: I didn't pay close attention to perl5 development but, it always seemed to me that p5p took the attitude that "we aren't waiting around for perl 6" and they just kept doing what they were doing.  There may have been some problems with cross pollenation, but I'm not really sure.

[21:14] *** pmurias left
[21:22] *** alanhaggai left
[21:24] <wknight8111> less frequent releases doesn't necessarily mean less development effort

[21:26] <Coke> wknight8111: let me sum up: "our marking department needs to be sacked."

[21:26] <PerlJam> Coke: you know how volunteerism works.  Are you going to take up the job?  :)

[21:26] <Coke> no.

[21:26] <Coke> I am merely pointing out a TODO task.

[21:27] <PerlJam> sure, but that's the real problem.

[21:27] <PerlJam> Everyone knows marketing sucks, but no one has the right stuff to fix it.

[21:27] <Coke> clearly other language commmunities do. =-)

[21:28] <Coke> perhaps I will donate some money to Lester and see if that works.

[21:28] <PerlJam> Coke: Sure, and the stock market always goes up.

[21:28] <[particle]> well, the stock market has never gone below 0, so there's some truth to that.

[21:29] <Coke> ... it is eerie that I'm getting lines here that remind of the anti-perl[5,6] I was just trying to defend against. 

[21:29] * [particle] agrees

[21:29] * Coke wanders off to think on this.

[21:29] *** Coke left
[21:30] <PerlJam> Does that mean I'm playing the part of hfb in this conversation?

[21:30] <PerlJam> no, I'm not ascerbic enough.  :)

[21:30] <[particle]> hfb?

[21:30] <PerlJam> Elaine

[21:30] <PerlJam> Jarkko's SO

[21:31] <[particle]> totally over my head

[21:31] <PerlJam> oh good.  Forget I mentioned it.

[21:31] <PerlJam> these are not the droids you are looking for.

[21:31] * [particle] has never followed p5p

[21:36] *** armagad joined
[21:45] *** cmarcelo left
[21:45] *** rdice left
[22:17] *** syle joined
[22:21] <pugs_svnbot> r20412 | lwall++ | [STD] just a snapshot of current state.  adds => as item assignment

[22:39] *** eternaleye left
[22:40] *** cls_bsd joined
[22:51] *** Limbic_Region joined
[23:08] *** syle left
[23:10] *** carlosf joined
[23:10] *** carlosf left
[23:35] <meppl> good night

[23:39] *** eternaleye joined
[23:39] *** meppl left
[23:50] *** armagad left
