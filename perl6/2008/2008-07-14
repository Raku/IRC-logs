[00:01] *** wknight8111 left
[00:01] *** wknight8111 joined
[00:02] *** rindolf joined
[00:14] <meppl> good night

[00:16] *** meppl left
[00:39] *** Alias_ left
[00:48] *** rindolf left
[00:54] *** jjore joined
[00:56] *** Limbic_Region left
[01:10] *** jjore left
[01:26] *** icwiener left
[01:47] *** kanru joined
[02:29] *** elmex left
[02:34] *** alester joined
[02:43] *** fullermd left
[03:49] *** ilogger2 joined
[05:03] *** tuxdna joined
[05:28] *** Psyche^ joined
[05:40] *** Psyche^ is now known as Patterner

[05:44] *** araujo joined
[05:52] *** zamanfou joined
[05:53] *** penk joined
[05:53] *** fullermd joined
[05:56] *** nipotaway is now known as nipotan

[06:07] *** Alias_ joined
[06:08] *** pbuetow joined
[06:23] <moritz_> there are cases where you can use either $_ or a self-declared implicit parameter like $^n

[06:26] *** fullermd left
[06:26] *** masak joined
[06:28] *** fullermd joined
[06:36] *** ashizawa joined
[06:37] *** masak left
[07:01] *** masak joined
[07:01] *** nipotan left
[07:01] *** nipotan joined
[07:09] *** pbuetow left
[07:34] *** justatheory joined
[07:37] *** justatheory left
[07:43] *** barney joined
[08:01] *** sri_work joined
[08:15] *** agentzh left
[08:34] *** Jedai joined
[08:38] <masak> hm, $obj.HOW.can($obj, "bark") ?

[08:38] <masak> usually, I consider Perl to follow the philosophy of DWIM quite well, but this...

[08:38] <moritz_> $obj.can('bark') ?

[08:38] <masak> yes, I hope that still works

[08:39] <masak> maybe I misunderstood the syn change

[08:39] <masak> yes, that's probably it: the latter delegates to the former under-the-hood

[08:57] *** rindolf joined
[09:04] *** jan_ joined
[09:07] *** elmex joined
[09:13] <ruoso> @tell pmurias libjit is a possibility, yes. llvm is also a good one. nothingmuch was sorting out how to work with llvm in p5. This would make it even easier to integrate the smop runloop with p5.

[09:13] <lambdabot> Consider it noted.

[09:14] <moritz_> ... at least if somebody manages to get XS modules working with llvm

[09:15] <ruoso> @tell pmurias I'm not sure how a file can be pure sm0p, since sm0p doesn't support nested blocks, and since you need initialization in C for sm0p blocks.

[09:15] <lambdabot> Consider it noted.

[09:29] *** wknight8111 joined
[09:33] *** meppl joined
[09:42] *** pmurias joined
[09:45] *** pmurias left
[09:45] *** GeJ joined
[10:09] *** chris2 joined
[10:14] *** meppl left
[10:32] *** wknight8111 left
[10:44] *** sri_work_ joined
[10:49] *** ludan joined
[10:52] *** sri_work left
[10:56] *** meppl joined
[11:19] *** ggoebel joined
[11:22] *** kanru joined
[11:44] *** wknight8111 joined
[11:55] *** jferrero joined
[12:08] *** iblechbot joined
[12:35] *** pbuetow joined
[12:44] <masak> perl6: my $b; { my $x=1; sub get_x() { return $x }; sub foo() { return &get_x }; $b = foo() } say $b()

[12:44] <p6eval> elf 21329: OUTPUT[Parse error in: /tmp/TDZpl37m9C␤panic at line 1 column 7 (pos 7): Can't understand next input--giving up␤WHERE: my $b; { my $x=1; sub get_x() { retur␤WHERE:       /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in

[12:44] <p6eval> ..`comp...

[12:44] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "say"␤    expecting operator␤    at /tmp/1dqB6ctABO line 1, column 88␤]

[12:44] <p6eval> ..rakudo 29426: OUTPUT[Statement not terminated properly at line 1, near "say $b()"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤]

[12:45] <masak> pugs: my $b; { my $x=1; sub get_x() { return $x }; sub foo() { return &get_x }; $b = foo() }; say $b()

[12:45] <p6eval> pugs: OUTPUT[1␤]

[12:45] <masak> rakudo: my $b; { my $x=1; sub get_x() { return $x }; sub foo() { return &get_x }; $b = foo() }; say $b()

[12:45] <p6eval> rakudo 29426: OUTPUT[␤]

[12:45] <masak> offhand, I'd say pugs has this one right.

[12:46] <masak> pugs++

[12:47] <zamanfou> can someone explain me something about perl6.. perl will become a programming language?

[12:49] <masak> zamanfou: Perl is a programming language. Perl 5 and Perl 6 are the two latest versions

[12:49] <masak> Perl 5 is very stable, Perl 6 is under development

[12:49] <zamanfou> masak, isnt perl 5 a scripting language?

[12:50] <masak> zamanfou: what do you consider the difference between a scripting language and a programming language to be?

[12:51] *** tuxdna_ joined
[12:52] <zamanfou> masak, you tell me :P

[12:52] <masak> zamanfou: 

[12:52] <masak> according to me, very little

[12:52] <masak> http://use.perl.org/~Ovid/journal/30565

[12:52] <lambdabot> Title: Journal of Ovid (2709)

[12:53] *** tuxdna left
[12:54] <masak> even more so, http://use.perl.org/~chromatic/journal/35804

[12:54] <lambdabot> Title: Journal of chromatic (983)

[12:54] <masak> the latter was the one I was actually looking for

[12:56] <masak> zamanfou: in summary, the programming/scripting difference is hazy at best. unless you find something important to separate them, you might as well consider scripting languages programming languages :)

[12:56] *** bacek joined
[12:59] <zamanfou> masak, I read lot of things about perl6, but I didnt understand what's the significant advantage. and the syntax is quite different than perl 5.

[12:59] <zamanfou> which will force me to learn the new syntax/functions/way of coding if I want to continue use perl.

[13:00] <masak> zamanfou: you don't have to switch

[13:00] <masak> perl 5 will be around for a long time

[13:00] <masak> but -- I have to add -- perl 6 is way cool, it's just not implemented yet

[13:00] <zamanfou> but as an outdated version of perl

[13:01] <masak> zamanfou: perl 5 is hardly outdated. 5.10 was released a few months ago

[13:03] <masak> perl 6 is just a sort of clean-slate upgrade incorporating backwards incompatible lessons learned since 1987

[13:04] <zamanfou> masak, so, is perl6 a low or high level programming language? :)

[13:05] <masak> zamanfou: I'd say it's on the higher end of the scale

[13:05] <masak> it sports closures, currying, lazy data structures and threading

[13:06] <zamanfou> I heard from people, perl is better than C. but I dont get why... I can code in perl ( I am quite good ) 

[13:06] <masak> (among other things, most of which escape me now)

[13:06] <masak> zamanfou: the sentence "Perl is better than C" is only meaningful if you also supply a context

[13:06] <masak> such as, which problem are you trying to solve

[13:07] <masak> without a context, the sentence is neither true nor false

[13:07] <zamanfou> I see, I just heard it from other coders , is not my personal opinion. Btw, my problem is, should I learn a new programming language or perl can do everything? 

[13:08] <zamanfou> this question sounds "stupid" but I really need an answer

[13:08] *** ashizawa left
[13:08] <masak> ok. I'll try to provide an answer. hold on

[13:08] <zamanfou> thank you

[13:08] <masak> when delving into Perl (5), you will find that many problems have already been solved for you

[13:08] * fullermd thinks the answer is "yes".

[13:09] <masak> zamanfou: have you heard of CPAN?

[13:09] <zamanfou> masak, I know almost every function in perl, using references, etc

[13:09] <zamanfou> I am not newbiew

[13:09] <masak> zamanfou: have you heard of CPAN?

[13:09] <zamanfou> yep

[13:09] <masak> and do you use it when coding in Perl?

[13:09] <zamanfou> hmm well, only when I need to install modules

[13:09] *** cmarcelo joined
[13:10] <masak> that was what I meant

[13:10] <zamanfou> I use CPAN's shell mostly

[13:10] <masak> so what is it then that you fear that Perl cannot do?

[13:10] <zamanfou> masak, I heard some things about "client hooking" , detours, ...

[13:11] * masak doesn't know about that

[13:11] <zamanfou> hmm

[13:12] <zamanfou> http://en.wikipedia.org/wiki/Dynamic_linker

[13:12] <lambdabot> Title: Dynamic linker - Wikipedia, the free encyclopedia

[13:12] <zamanfou> In C you can write libs and load them using LD_PRELOAD

[13:12] <zamanfou> the above link will explain it a bit

[13:12] <masak> zamanfou: I see. loading stuff into a program at runtime?

[13:13] <zamanfou> yes

[13:13] <masak> I haven't done much of that in Perl

[13:13] <masak> maybe you should ask around on #perl

[13:13] <masak> both here at freenode and over at irc.perl.org

[13:14] <zamanfou> mm how can I be specific for this question?

[13:17] <masak> zamanfou: ask "is it possible to load things dynamically in Perl, like with C'S LD_PRELOAD?"

[13:18] * zamanfou knows how to c&p :P

[13:18] <moritz_> perldoc DynaLoader # that stuff?

[13:19] <zamanfou> hmm

[13:22] *** penk left
[13:22] *** penk joined
[13:23] <masak> zamanfou: the reply you just got at #perl is because they think you are not yet aware about modules/CPAN

[13:23] <masak> ...and it might actually be the answer you're looking for, I don't know

[13:23] <zamanfou> masak, I am trying to get some informations to help them understand me

[13:24] <zamanfou> masak, http://www.nixcoders.org/forum/index.php?showtopic=50&pid=372&st=0&#entry372 this is what I am talking about

[13:24] <lambdabot> Title: [C/C++] LD_PRELOAD tutorial #1 - *C Board, http://tinyurl.com/6ddefl

[13:26] <masak> zamanfou: it feels like a very specific thing you want to do. I'm afraid I don't know enough C to understand exactly what it is you need. however, I'm pretty sure that Perl can load things at runtime, since runtime and compile time can be mixed through verious mechanisms

[13:28] <zamanfou> masak, then could you tell me, if its possible to "override" some of the functions of the program I wish to run? (some C program)

[13:28] <pugs_svn> r21330 | bacek++ | [spec] Fix fudging for rakudo

[13:29] <masak> zamanfou: I'm not sure I understand the question. but if it's a C question, you've now proceeded to become off-topic to the second degree :) you should try a C forum

[13:30] <masak> zamanfou: I'd like to help you, but I'm simply not qualified. people on the right forum might be able to help you.

[13:31] *** gbacon joined
[13:31] <zamanfou> you already helped me:)

[13:31] <zamanfou> thank you

[13:31] <masak> np

[13:31] <masak> and good luck

[13:35] *** jferrero left
[13:43] <pugs_svn> r21331 | moritz++ | [spec] remove bogus try{} in S29-num/trig.t

[13:46] <pugs_svn> r21332 | moritz++ | [spec] continued to remove bogus try {}

[13:46] *** pmurias joined
[13:48] <pmurias> zamanfou: do you want to load perl things into your perl program or c things into your perl program?

[13:48] <lambdabot> pmurias: You have 2 new messages. '/msg lambdabot @messages' to read them.

[13:51] *** Lorn joined
[13:51] *** hercynium joined
[13:52] <pugs_svn> r21333 | moritz++ | [t] added 'try' usage to deprecated-syntax.pod, bacek++ pmichaud++

[13:52] <pmurias> zamanfou: loading perl functions into a c program is possible but it would require you embedding a perl interpreter in the program you want to modify

[13:54] <zamanfou> pmurias, I want to override C functions before the program loads using perl. I also want to access a process at runtime.

[13:57] <pmurias> why do you want to use perl?

[13:58] <zamanfou> cause is the only programming language im good :-)

[13:58] <pmurias> you'll have to be good in c to use perl for that

[13:58] <moritz_> good reason ;)

[13:58] <zamanfou> "good" is relative. compared to you guys, I am still newbie. but w/e...

[13:59] <moritz_> zamanfou: if you don't know it already: http://www.perlmonks.org/

[13:59] <lambdabot> Title: PerlMonks - The Monastery Gates

[13:59] * pmurias dosn't know all perl functios for sure ;)

[14:00] <masak> Perl is build to take into account the fact that people will not learn everything about it

[14:00] *** donaldh joined
[14:00] <moritz_> very well stated, masak ;)

[14:00] <masak> it's a diagonal language, not an orthogonal one :)

[14:01] <pmurias> masak: aren't most languages like that?

[14:01] <masak> pmurias: to some degree, I guess

[14:01] <masak> but I'd say Perl makes a... thing out of it

[14:02] <masak> you can write FORTRAN in any language, but Perl encourages C style writing, Pascal style, Haskell style etc

[14:02] <moritz_> Perl actually encourages lisp-like writing, only the docs don't do it ;-)

[14:03] * pmurias dosn't know FORTRAN ;)

[14:03] <masak> moritz_: I thought we weren't supposed to mention the Perl/Lisp conspiracy... :P

[14:04] <masak> pmurias: those who don't know FORTRAN are doomed to reinvent it, poorly :)

[14:04] * masak doesn't either, actually

[14:05] * pmurias hopes sm0p dosn't turn into fortran any time soon

[14:05] *** icwiener joined
[14:05] <moritz_> pmurias: FOORTRAN perhaps, OO Fortran ;-)

[14:07] <masak> oO

[14:14] *** alester joined
[14:20] <pmichaud> pugs: my $a = foo(); { my $x = 1; sub get_x() { return $x; }; sub foo() { return &get_x; }; }; say $a();

[14:20] <p6eval> pugs: OUTPUT[1␤]

[14:20] <pmichaud> pugs: my $a = foo(); { my $x = 1; sub get_x() { return $x; }; sub foo() { return &get_x; }; }; say $a(); say foo()();

[14:20] <p6eval> pugs: OUTPUT[1␤1␤]

[14:22] <pmichaud> pugs: my @array; for 1..3 -> $x { sub get_x() { return $x; }; push @array, &get_x; }; for @array -> $f { say $f(); };

[14:22] <p6eval> pugs: OUTPUT[␤␤␤]

[14:22] <pmichaud> pugs: my @array; for 1..3 -> $x { my sub get_x() { return $x; }; push @array, &get_x; }; for @array -> $f { say $f(); };

[14:22] <p6eval> pugs: OUTPUT[␤␤␤]

[14:22] <pmichaud> pugs: my @array; for 1..3 -> $x { push @array, { return $x; }; }; for @array -> $f { say $f(); };

[14:22] <p6eval> pugs: No output (you need to produce output to STDOUT)

[14:23] <moritz_> pugs doesn't seem to do lexical subs

[14:23] <pmichaud> nor closures (from that last example, unless I'm misunderstanding something)

[14:24] <moritz_> pugs: { my $x ; sub foo { return ++$x }}; foo(); foo();

[14:24] <p6eval> pugs: RESULT[2]

[14:24] <moritz_> pugs: { my $x ; sub foo { say ++$x }}; foo(); foo();

[14:24] <p6eval> pugs: OUTPUT[1␤2␤]

[14:24] <moritz_> closures are implemented

[14:24] <pmichaud> that doesn't really demonstrate cloning a closure, though.

[14:25] <moritz_> but it doesn't seem to close over the new lexical pad in a loop

[14:25] <pmichaud> that just shows lexical scoping is working to some degree

[14:25] *** jhorwitz joined
[14:26] <pmichaud> pugs: my @array; for 1..3 -> $x { my $s = { return $x; }; push @array, $s; }; for @array -> $f { say $f(); };

[14:26] <p6eval> pugs: No output (you need to produce output to STDOUT)

[14:28] <masak> pugs: my @array; for 1..3 -> $x { my $s = { return $x; }; push @array, $s; say $_() for @array

[14:28] <p6eval> pugs: OUTPUT[*** ␤    Unexpected end of input␤    expecting operator or "}"␤    at /tmp/SX9Mw6qkth line 2, column 1␤]

[14:28] <masak> pugs: my @array; for 1..3 -> $x { my $s = { return $x; }; push @array, $s; }; say $_() for @array

[14:28] <p6eval> pugs: No output (you need to produce output to STDOUT)

[14:28] <masak> hm

[14:32] <pmurias> pugs: sub foo {my $x=0;-> {++$x}};say foo.();say foo.();

[14:33] <p6eval> pugs: OUTPUT[<SubPointy(<anon>)>␤<SubPointy(<anon>)>␤]

[14:33] <pmurias> pugs: sub foo {my $x=0;-> {++$x}};say foo().();say foo().();

[14:33] <p6eval> pugs: OUTPUT[1␤1␤]

[14:33] *** bacek left
[14:33] <masak> pugs: my @array; for 1..3 -> $x { my $s = { say $x; }; push @array, $s; }; $_() for @array

[14:33] <p6eval> pugs: OUTPUT[1␤2␤3␤]

[14:34] <masak> there you go.

[14:34] <pmichaud> pugs: my @array; for 1..3 -> $x { my $s = { return $x; }; push @array, $s; say 'x'; }; for @array -> $f { say $f(); };

[14:34] <p6eval> pugs: OUTPUT[x␤x␤x␤]

[14:34] <pmichaud> oops, wrong line

[14:34] <pmichaud> my @array; for 1..3 -> $x { my $s = { say $x; }; push @array, $s; say 'x'; }; $_() for @array

[14:35] <pmichaud> pugs: my @array; for 1..3 -> $x { my $s = { say $x; }; push @array, $s; say 'x'; }; $_() for @array

[14:35] <p6eval> pugs: OUTPUT[x␤x␤x␤1␤2␤3␤]

[14:35] <masak> also good.

[14:35] <pmichaud> oh, 'return' in a { ... }   isn't quite right

[14:35] <pmichaud> because { ... } isn't a sub

[14:35] <pmichaud> so

[14:35] <pmichaud> pugs: my @array; for 1..3 -> $x { my $s = sub { return $x; }; push @array, $s; say 'x'; }; for @array -> $f { say $f(); };

[14:35] <p6eval> pugs: OUTPUT[x␤x␤x␤1␤2␤3␤]

[14:35] <masak> aha!

[14:36] <masak> pugs++

[14:36] <pmichaud> pugs: my @array; for 1..3 -> $x { sub foo() { return $x; }; push @array, &foo; say 'x'; }; for @array -> $f { say $f(); };

[14:36] <p6eval> pugs: OUTPUT[x␤x␤x␤␤␤␤]

[14:36] <pmichaud> pugs: my @array; for 1..3 -> $x { my sub foo() { return $x; }; push @array, &foo; say 'x'; }; for @array -> $f { say $f(); };

[14:36] <p6eval> pugs: OUTPUT[x␤x␤x␤␤␤␤]

[14:37] <masak> not so good...

[14:37] <pmichaud> pugs: my @array; for 1..3 -> $x { my $s = { $x; }; push @array, $s; say 'x'; }; for @array -> $f { say $f(); };

[14:37] <p6eval> pugs: OUTPUT[x␤x␤x␤1␤2␤3␤]

[14:37] <pmichaud> pugs: my @array; for 1..3 -> $x { push @array, { $x; }; }; for @array -> $f { say $f(); };

[14:37] <p6eval> pugs: OUTPUT[1␤2␤3␤]

[14:38] <pmichaud> okay, those are better.  it's just the 'sub foo' case that has trouble (which, of course, is the case I'm interested in at the moment).

[14:38] <masak> yes.

[14:41] <pmurias> no

[14:41] <pmurias> ;)

[14:41] <pmurias> misunderstood :(

[14:48] *** tuxdna_ left
[14:48] *** tuxdna_ joined
[14:49] *** tuxdna_ is now known as tuxdna

[14:53] *** icwiener left
[14:54] *** pmurias left
[15:05] *** pmurias joined
[15:06] <pmurias> masak: re Perl is build to take into account, are there technical implications of that approach?

[15:07] <pmurias> besides it being used as an excuse for having System V shared memory routines in the core?

[15:07] <masak> I see now I meant s/build/built/, a slight typo

[15:08] <masak> pmurias: I'm not too well versed in System V, so I can't say anything about that

[15:08] <masak> by 'technical implications', do you mean things that affect different implementations?

[15:09] <pmurias> masak: neither am i

[15:10] <pmurias> just looked at perlfunc to see what functions i don't know ;)

[15:10] <masak> :)

[15:11] <pmurias> masak: i mean how does it actually affect the languager

[15:11] <masak> pmurias: I wasn't mainly talking about cross-platformness when I mentioned the diagonality thing

[15:12] <masak> I was talking about the fact that there are often several language primitives to help reach the same goal

[15:12] <masak> ...to, prehaps, a greater extent than in other languages

[15:13] <pmurias> s/languager/language

[15:13] <pmurias> typoes--

[15:13] <masak> yes :/

[15:16] <masak> pmurias: "If I'm in one corner of a park and the restrooms are in the opposite corner of the park, I don't walk due east and then due north. I go northeast -- unless there's a pond in the way or something." -- Larry Wall

[15:16] <masak> http://www.techgnosis.com/wall1.html

[15:16] <lambdabot> Title: Larry Wall Interview, by Erik Davis

[15:19] <nothingmuch> pmurias: IMAP on my server is dead right now, if you were using that you can use imap.gmail.com. mail *delivery* is not affected

[15:21] <pmurias> nothingmuch: hi

[15:22] <pmurias> nothingmuch: is mail forwarding affected?

[15:24] <nothingmuch> nope

[15:24] <nothingmuch> if you were using pasta.woobling.org for IMAP then that's shot now

[15:24] <nothingmuch> i'm still debating as to whether or not it's worth fixing now that gmail has IMAP

[15:24] <nothingmuch> if you used forwarding from gmail directly then that server has nothing to do with you

[15:24] <nothingmuch> if you used forwarding on that server then it should be working

[15:25] <nothingmuch> (using procmail presumably? i dunno)

[15:27] <pmurias> nothingmuch: i think i used gmail

[15:29] <pmurias> nothingmuch: what did you attempt with llvm and perl5?

[15:31] <pmurias> and what did you achive? ;)

[15:33] <nothingmuch> so far I achieved a clean compile of the perl tree with llvm-gcc to llvm bytecode

[15:33] <nothingmuch> what I hope to achieve is to use the opcode definitions that are now available as llvm bytecode

[15:33] <nothingmuch> at runtime

[15:34] <nothingmuch> the idea is to generate llvm bytecode that for perl subroutines

[15:34] <nothingmuch> that makes calls to the opcode definitions by symbol instead of by function pointer when pp_addr is not changed

[15:34] <nothingmuch> and that would allow llvm to do its famous interprocedural optimizations

[15:35] <nothingmuch> but too much $real_work is in the way so far

[15:35] <nothingmuch> and I'm kinda burnt out recently

[15:38] <pmurias> does llvm have a nice c interface or is it just llvm assembly manipulation?

[15:38] <pmurias> s/is it just/does it require/

[15:40] <masak> speaking of assembly (and slightly OT): I read http://canonical.org/~kragen/strlen-utf8.html with delight, and now I'm curious as to what generates output like the one in the second listing

[15:40] <lambdabot> Title: Counting Characters in UTF-8 Strings Is Fast

[15:41] <masak> i.e., given a binary, I want to show its assembly instructions

[15:41] <nothingmuch> it has very good C integration in the sense that it can call to C code, compile C code (with llvm-gcc), be embedded in C (it's in C++ but there are C headers and a C api to call link with the C++), etc

[15:41] <masak> I tried toying around with gdb, but didn't get very far

[15:42] *** tuxdna left
[15:43] <nothingmuch> that said generating LLVM assembly is probably much easier than generating C

[15:43] <nothingmuch> there's a very nice tutorial I followed

[15:43] <nothingmuch> i think it covers all my needs for compiling optrees dynamically at runtime

[15:46] <pmurias> moritz_: what's was the box you have me a shell account on called, and can i use it to test if my webserver is accessbile from outside my LAN?

[15:46] <moritz_> pmurias: timtowtdi.org

[15:47] <moritz_> pmurias: and you

[15:47] <moritz_> 're welcome to to do anything that's not harmful

[15:47] <moritz_> and doesn't suck up resources like hell ;)

[15:48] *** penk left
[15:49] *** jeremy-wrk joined
[15:52] *** Exodist joined
[15:52] <pmurias> nothingmuch: thanks, looked at the tutorial and it answered my questions

[16:11] * pmurias hates system administration

[16:12] *** icwiener joined
[16:34] *** chris2 left
[16:37] *** sri_work_ left
[16:52] *** REPLeffect joined
[16:53] *** donaldh left
[16:59] *** rpag joined
[17:00] <rpag> will perl6 ever be released?

[17:00] <moritz_> sure

[17:00] <moritz_> but don't ask when ;-)

[17:00] <armagad> When?

[17:00] <moritz_> on christmas

[17:01] <rpag> this year?

[17:01] <moritz_> not necessarily

[17:01] <moritz_> but once it's released every day will feel like christmas

[17:03] *** armagad joined
[17:04] *** kanru left
[17:15] *** REPLeffect left
[17:21] <pmurias> rpag: pugs had many releases

[17:21] <masak> actually, I think pugs and rakudo have enough features to make every day feel a little bit like christmas already

[17:21] <moritz_> parrot (+ rakudo) is going to have one tomorrow ;-)

[17:22] <masak> it can only get better for christmas :)

[17:22] <moritz_> masak: they have nice features, but both aren't suitable for every day programming

[17:25] *** justatheory joined
[17:29] <pmurias> usability for every day programmin is a lot less than full perl6ness

[17:29] <moritz_> aye

[17:30] *** masak left
[17:30] <pmurias> aye = yes?

[17:31] <moritz_> but for example modifiers in regexes are crucial for me

[17:31] <moritz_> s/in/on/

[17:31] <moritz_> aye = yes, aye ;-)

[17:33] <pmurias> you are refering to pugs?

[17:35] *** hercynium left
[17:49] <pmurias> moritz_: elf has them in a twisted and evil way

[17:54] *** jfredett_ joined
[18:11] *** awwaiid left
[18:13] *** awwaiid joined
[18:23] *** cjfields joined
[18:24] <pugs_svn> r21334 | pmurias++ | [smop]

[18:24] <pugs_svn> r21334 | pmurias++ | method calls and strings in s1p, variables are translated to c variables as we don't have namespaces yet

[18:24] <pugs_svn> r21334 | pmurias++ | test 13_io is moved to perl6 as traditional it memory leaks

[18:24] <pmurias> moritz_: you have a c compiler in the evalbot?

[18:24] *** pbuetow left
[18:25] *** pbuetow joined
[18:34] <pmurias> * do you

[18:43] *** ludan left
[18:49] *** rindolf left
[18:59] *** barney left
[19:12] <rakudo_svn> r29443 | pmichaud++ | [rakudo]: spectest-progress.csv update:  95 test files, 1691 passing tests

[19:36] *** hercynium joined
[19:43] *** icwiener left
[19:55] *** icwiener joined
[20:08] *** lisppaste3 joined
[20:34] <moritz_> pmurias: yes

[20:34] <moritz_> pmurias: re modifiers, rakudo and pugs

[20:35] <pmurias> moritz_: it might make sense too put s1p in the evalbot soon

[20:36] <moritz_> pmurias: no objections from me

[20:36] * moritz_ decides that security is overrated :/

[20:37] <pmurias> fake security is definitly overrated

[20:38] <pmurias> s1p is a perl6 implemenation, so it *might* get a safe mode in the far future

[20:39] <pmurias> it's an elf variant to be exact

[20:40] <pmurias> moritz_: you need regex modifier for perl5 regexes?

[20:40] <pmurias> you could use the (?flag...) syntax

[20:41] <moritz_> pmurias: no. The discussion was if perl6 feels like christmas today, and I just mentioned that for me it's not yet, because such crucial features are regex modifiers are missing from both pugs and rakudo - that's all

[20:42] * pmurias wonder how many people would actually like eternal christmas

[20:43] <pmurias> * wonders

[20:44] *** jhorwitz left
[20:47] *** r0bby joined
[20:48] <pmurias> what would be a good syntax for none \w+ constant identifiers?

[20:49] <moritz_> pmurias: what for?

[20:50] *** rpag left
[20:50] *** rpag joined
[20:52] <pmurias> moritz_: sm0p

[20:53] <moritz_> q:identifier[...] ?

[20:54] <moritz_> or $MY::('identifier with spaces') - I guess that's even valid Perl 6

[20:54] <moritz_> or something along these lines

[20:56] <pmurias> i was considering idconst.new("...")?

[20:59] *** bacek joined
[21:00] <pmurias> the second syntax issue is how should variables taken from the c namespace (?) be marked in perl6 code

[21:03] *** gugod left
[21:04] <pmurias> how is the place c identifiers are stored?

[21:05] <pmurias> s/?/ called ?/

[21:05] *** ingy left
[21:05] *** ingy joined
[21:05] *** gugod joined
[21:07] *** pmurias left
[21:08] *** jovs joined
[21:25] *** simcop2387 joined
[21:26] *** ingy left
[21:26] *** gugod left
[21:26] <spinclad> pugs: my @array; for 1..3 -> $x { push @array, sub { return $x; }; }; for @array -> &f { say f; };

[21:26] <p6eval> pugs: OUTPUT[1␤2␤3␤]

[21:26] <spinclad> pugs: my @array; for 1..3 -> $x { unshift @array, sub { return $x; }; }; for @array -> &f { say f; };

[21:26] <p6eval> pugs: OUTPUT[3␤2␤1␤]

[21:27] *** gugod joined
[21:27] <spinclad> pugs: my @array; for 1..3 -> $x { my sub f { return $x; }; push @array, &f; }; for @array -> &f { say f; };

[21:27] <p6eval> pugs: OUTPUT[␤␤␤]

[21:28] *** ingy joined
[21:28] <spinclad> pugs: my @array; for 1..3 -> $x { my &f = sub { return $x; }; push @array, &f; }; for @array -> &f { say f; };

[21:28] <p6eval> pugs: OUTPUT[*** Can't modify constant item: VStr "MkCode {isMulti = True, subName = \"&\", subType = SubPrim, subOuterPads = [], subInnerPad = MkPad (padToList []), subPackage = , subAssoc = AIrrelevantToParsing, subParams = [], subBindings = [], subSlurpLimit = [], subReturns = (mkType \"An...

[21:28] <spinclad> pugs: my @array; for 1..3 -> $x { my $f = sub { return $x; }; push @array, $f; }; for @array -> &f { say f; };

[21:28] <p6eval> pugs: OUTPUT[1␤2␤3␤]

[21:35] *** Alias__ joined
[21:36] *** Alias__ left
[21:37] *** jferrero joined
[21:39] *** planofish joined
[21:39] *** Limbic_Region joined
[21:39] *** jovs left
[21:41] *** rpag left
[21:55] *** cjfields left
[21:58] *** bacek left
[22:03] *** bacek joined
[22:18] *** |jedai| joined
[22:18] *** gugod_ joined
[22:18] *** ingyfoo joined
[22:18] *** ingy left
[22:19] *** Jedai left
[22:26] *** iblechbot left
[22:29] *** gugod left
[22:31] *** PZt joined
[22:32] *** gugod joined
[22:32] *** ingy joined
[22:32] *** ingyfoo left
[22:32] *** gugod_ left
[22:43] *** ingy left
[22:45] *** gugod left
[22:47] *** gugod joined
[22:51] *** alester left
[22:53] *** GeJ left
[22:54] *** gugod left
[22:54] *** ingy joined
[23:01] *** bacek_ joined
[23:04] *** armagad left
[23:12] *** bacek left
[23:14] *** rpag joined
[23:18] *** Alias_ left
[23:20] *** gugod joined
[23:22] *** gugod left
[23:24] *** rpag left
[23:26] *** cmarcelo left
[23:32] *** bacek joined
[23:38] *** Alias_ joined
[23:50] *** gugod joined
[23:51] *** eternaleye joined
[23:54] *** Exodist left
[23:54] *** bacek_ left
[23:55] *** hercynium left
