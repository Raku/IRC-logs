[00:00] *** meppl left
[00:01] <TimToady> and as [particle] was pointing out, captures really have nothing to do with that, since the purpose of | is to hide that info by inlining

[00:03] <wknight8111> Do you have a link for the best place to read the synopses? I feel like I always have to google search because I can never find them

[00:03] <wknight8111> or are they somewhere in the pugs repo?

[00:03] <wknight8111> shoot, i don't even have a checkout of pugs anymore

[00:05] *** bacek_ joined
[00:05] *** bacek left
[00:07] *** jhorwitz left
[00:08] <[particle]> http://spec.pugscode.org

[00:11] <TimToady> afk & # leaving for the samurai era...

[00:17] <wknight8111> thanks

[00:20] <wknight8111> I had read through all the apocalypses and synopses a long time ago. They're really fascinating

[00:23] *** Limbic_Region joined
[00:34] *** larsen_ left
[00:35] *** Chillance left
[00:35] *** jferrero joined
[00:38] *** meppl joined
[00:51] *** |alanhaggai| is now known as alanhaggai

[01:03] *** kanru left
[01:03] *** lambdabot left
[01:06] *** lambdabot joined
[01:20] *** jiing left
[01:26] *** jferrero left
[01:30] *** alester_ joined
[01:31] *** araujo joined
[01:31] *** Limbic_Region left
[01:33] *** ruoso left
[01:41] *** sri_work left
[01:55] *** cggoebel left
[02:20] *** wknight8111 left
[02:21] *** Lorn joined
[02:42] *** meppl left
[02:42] *** meppl joined
[02:55] *** alanhaggai left
[02:57] *** alanhaggai joined
[03:03] *** cognominal left
[03:05] *** salzh joined
[03:32] *** alanhaggai left
[03:32] *** alanhaggai joined
[03:58] *** Myoma left
[04:02] *** eternaleye left
[04:05] *** eternaleye joined
[04:10] *** eternaleye left
[04:15] *** eternaleye joined
[04:17] *** meppl left
[05:03] *** alester_ left
[05:13] *** bacek_ left
[05:16] *** bacek joined
[05:23] *** Psyche^ joined
[05:25] *** Patterner left
[05:25] *** Psyche^ is now known as Patterner

[05:29] *** bacek_ joined
[05:31] *** Lorn left
[05:38] *** Khisanth left
[05:38] *** bacek left
[05:39] *** Khisanth joined
[05:59] *** cataska joined
[06:19] *** eternaleye_ joined
[06:20] *** eternaleye left
[06:35] *** ashizawa joined
[06:38] *** masak joined
[06:49] *** alc joined
[06:49] *** bacek joined
[06:49] *** bacek_ left
[06:54] *** iblechbot joined
[06:54] *** eternaleye_ left
[06:54] *** eternaleye joined
[06:59] *** bacek left
[07:00] *** bacek joined
[07:16] *** eternaleye left
[07:17] *** eternaleye_ joined
[07:35] <pugs_svn> r22064 | moritz++ | [t/spec] some random unfudges and fixes

[07:36] *** AzureStone left
[07:46] *** jfredett_ joined
[07:53] *** viklund joined
[07:56] *** jfredett left
[07:59] *** AzureStone joined
[08:05] *** jfredett_ is now known as jfredett

[08:26] *** elmex joined
[08:27] <masak> I really hope {*} becomes a Perl 6 feature

[08:28] <masak> if not, I will write a module, as soon as that becomes possible, so that I can use it as if it were

[08:28] <TimToady> :)

[08:29] *** pmurias joined
[08:30] *** jfredett left
[08:30] <masak> we already do quite a bit of $/ tree traversal in the wiki. with {*}, even that code would go away.

[08:31] *** jfredett joined
[08:31] <moritz_> use Regex::Stubs;

[08:32] <masak> aye :)

[08:32] <masak> of course, I'm hoping I won't have to import anything

[08:32] <masak> I don't think the current semantics of {*} are worth protecting :)

[08:33] <masak> s/current/currently specced/

[08:39] <TimToady> well, the point is that it obviously does nothing by default except count as a side effect for LTM

[08:40] <masak> yes

[08:40] <TimToady> and since the builtin meaning is useless, there's no problem binding it to any behavior you like

[08:40] <masak> exactly

[08:41] <masak> it's the binding itself that I'm a bit unclear on

[08:41] <masak> if I had an idea on how to do that, I'd write to perl6-lang and propose to add it

[08:42] <masak> but in general terms, there's the grammar, the class that want's to hook in into the {*}s, and the match itself

[08:42] <masak> the binding could theoretically be done in any of these three locations

[08:43] <masak> ...but right now only the match location seems reasonable to me

[08:45] <moritz_> I think if we spec it, then it should somehow take named arguments instead of the semantik comments that STD.pm and PGE use now

[08:45] <masak> good point.

[08:45] <moritz_> so <stuff> {*}    #= this_stuff 

[08:45] <moritz_> should become <stuff> {*:this_stuff} or the like

[08:47] *** jfredett left
[08:48] *** pmurias left
[08:49] <moritz_> (which currently isn't valid Perl 6)

[08:51] *** jfredett joined
[08:51] *** jfredett left
[08:58] *** jfredett joined
[09:04] *** rindolf left
[09:13] <masak> gasp! .perl is not in S29!

[09:13] <moritz_> no, S02 or S03 iirc

[09:14] <masak> aye, S02

[09:14] <masak> (S29 needs some love)

[09:14] <moritz_> s/some/much/

[09:15] <masak> haha, .perl is specified on line 1337 of S02. how appropriate :)

[09:15] <moritz_> ;)

[09:15] <moritz_> S02:1337 # make the IRC logs link to it

[09:16] <masak> oh right

[09:16] <masak> I should force Emacs to do the same, actually

[09:16] <masak> it would pay off in productivity pretty quickly

[09:20] *** eternaleye_ left
[09:20] *** eternaleye joined
[09:25] <TimToady> well, {'this_stuff'} is just as usefully useless as {*}, but the main point of {*} is to keep the clutter out of the main code

[09:27] <masak> right. also, it loses its 'visual pill' feel if it's much longer than {*}

[09:27] <TimToady> though I suppose there's no reason {'foo'} can't be put over where the comment currently is, unless there are intervening tokens

[09:27] <TimToady> but then you have to specially recognize something variable

[09:28] <TimToady> I need a way of naming alternations too for better error messages than "expecting statement (alt 05)"

[09:29] <TimToady> maybe that could unify somehow

[09:30] <TimToady> bbl & # bangohan

[09:30] <masak> seems to me alternations, having no name, are only identified by what they match on.

[09:30] *** cataska left
[09:48] *** bacek left
[09:56] *** elmex left
[09:59] *** alc left
[10:01] *** salzh left
[10:04] *** sri_work joined
[10:04] *** elmex joined
[10:20] *** Jedai joined
[10:22] *** aindilis left
[10:23] *** araujo left
[10:25] *** Maghnus left
[10:29] *** wknight8111 joined
[10:31] *** araujo joined
[10:55] *** alanhaggai left
[11:02] <moritz_> masak: http://www.perlmonks.org/?node_id=707723

[11:02] <lambdabot> Title: November - a wiki written in Perl 6

[11:02] <moritz_> (not my doing)

[11:03] *** pmurias joined
[11:03] *** riffraff joined
[11:03] <riffraff> hi

[11:04] <moritz_> hi riffraff ;)

[11:04] <pmurias> riffraff: hi

[11:05] <masak> moritz_: thanks for the heads-up

[11:05] <masak> by the way, jonathan and pmichaud have been pinged for three hours now, which is like a week in internet time

[11:06] <moritz_> ping timeout ;)

[11:06] <moritz_> go ahead and publish, then ;)

[11:06] <masak> aye :)

[11:14] <pmurias> masak: i actually find writing actions directly inside {...} blocks and extracting them using a script instead of using {*} more fun

[11:16] <masak> pmurias: maybe we should write some imagined code and compare

[11:18] <pmurias> masak: if you want

[11:18] *** pjcj_ is now known as pjcj

[11:19] <moritz_> I think of grammars as an inverted templates...

[11:19] <moritz_> so inlining the closures is a bit like using Mason

[11:19] <moritz_> and using {*} is a bit more like using HTML::Template

[11:21] <moritz_> masak: if we had {*}, how would we know which part of %parameters we need to access?

[11:24] * masak gets hit by the impact of that problem

[11:24] <masak> don't know.

[11:24] <masak> how does PGE do it?

[11:24] <masak> I mean, the corresponding thing

[11:25] <moritz_> I think you can use a "global" variable thing

[11:25] <masak> an action method has to know about its surroundings somehow

[11:25] <moritz_> let's call it @stack

[11:25] <masak> hm...

[11:25] <moritz_> then a <TMPL_LOOP> would push @stack[*-1]{$<name>} onto @stack

[11:26] <masak> btw, my secret ideal in these matters is XSLT, which solves much of this adequately

[11:26] <moritz_> and the </TMPL_LOOP> would pop

[11:27] *** dr_df0 joined
[11:27] <moritz_> or more elegantly a dynamically scoped variable

[11:27] <moritz_> (like local() in perl 5)

[11:28] <masak> that sounds more like it

[11:28] <masak> can such a variable be shared between methods_

[11:28] <masak> ?

[11:29] <moritz_> why not?

[11:29] <moritz_> a grammar is just a class; I suspect it can have attributes

[11:31] *** cognominal joined
[11:33] *** alanhaggai joined
[11:36] *** iblechbot left
[11:37] <masak> http://use.perl.org/~masak/journal/37303

[11:37] <lambdabot> Title: Journal of masak (6289)

[11:40] *** BinGOs left
[11:42] <masak> hm, the title gets cut off in the journal...

[11:46] <masak> (use.perl.org)-- # crippled HTML

[11:47] <masak> no &mdash;. no &hellip;, no <h2>...

[11:47] <masak> might as well not have HTML-like markup at all

[11:47] <moritz_> (use.perl.org)++ # good publicitiy anyway ;)

[11:48] *** |alanhaggai| joined
[11:48] <masak> yes, but it could easily have been typographically correct publicity

[11:48] <masak> oh well.

[11:48] *** |alanhaggai| left
[11:49] <moritz_> ;)

[11:49] <moritz_> internet and typography seldom mix very well

[11:49] <moritz_> too seldom

[11:50] <masak> because of things like this :/

[11:50] <masak> tools that don't allow you to do it right

[11:51] <moritz_> heck, perlmonks.org can't even print non-Latin1-characters inside code sections

[11:51] <moritz_> perlmonks--

[11:51] <masak> hard to believe we're living in the 21th century

[11:53] <masak> so perlmonks is fundamentally incompatible with Perl 6, in other words

[11:53] <moritz_> yes

[11:53] <masak> perlmonks--

[11:53] <moritz_> (not only technically)

[11:56] <masak> culturally too?

[11:57] <masak> people are always against great changes, even good ones.

[11:57] <masak> it's because a change is such an easy target to criticize

[11:58] <moritz_> yes

[11:58] <cognominal> I don't know much perl site that looks like web 2.0 apart osx,isuthis.com?

[11:58] <cognominal> osx.iusethis.com!

[11:58] *** BinGOs joined
[11:59] <cognominal> it seems we ave a lack of expertise of stuff up in the stack : javascript librries, ajx, css...

[11:59] <masak> indeed.

[11:59] <cognominal> s/ava/have/

[11:59] <masak> I want the Web.pm module to fix that

[11:59] <masak> it will need some deep thinking, but it'll be fun, too!

[11:59] <cognominal> we are too happy to play with our beloved language when it is (so far) one element of the stack.

[11:59] <moritz_> masak: but on the other hand I received mostly positive feedback on perl 6 stuff that I wrote on perlmonks - maybe it'll better once truely usable versions of rakudo are being released

[12:00] <cognominal> It may change if parrot makes is ways on browers.

[12:00] <pmurias> cognominal: into IE?

[12:00] *** ashizawa left
[12:00] <moritz_> cognominal: slashdot.org is prettymuch web2.0ish

[12:00] <pmurias> masak: you need to be able to compile Perl 6 into javascript to have good web 2.0 support

[12:00] <masak> moritz_: yes, of course. people are only critical because they are uninformed about the state of affairs

[12:01] <masak> pmurias: why is that?

[12:01] <cognominal> I love perl6 and I am wait for rakudo to be usable : inline pir, class attributes initialization is my main griefs today.

[12:02] <cognominal> pmuris: in the iphone? the new trend is to have web on small devices

[12:02] <pmurias> cognominal: IE = internet explorer

[12:03] <masak> cognominal: right, I forgot to mention class attributes initialization! :)

[12:03] <cognominal> too bad the community cannot get jonathan work rakudo full-time

[12:03] <moritz_> that would be great ;)

[12:04] <moritz_> speaking of which, what's happening with Ian Hagues' donation atm?

[12:04] <cognominal> does pmichaid is full time on parrot?

[12:04] <moritz_> don't think so

[12:04] <cognominal> allison + pmichaud + jonathan full-time would mean rakduo this christmas

[12:05] *** abra joined
[12:05] <pmurias> masak: it's more of an opinion than a fact, but i find it hard to believe you will be able to push much of the logic into the client withought emitting to javascript

[12:05] <moritz_> cognominal: not quite :/

[12:06] <moritz_> pushing logic to the client is dangerous and overrated, IMVHO ;)

[12:06] <cognominal> pmurias, I don't care much of IE because  MS is so far behind in products, I am happy they employing people like spj though

[12:07] <cognominal> I am sas that the ecmascript will be less amitious, in someway it as perl 6 like.

[12:07] <cognominal> s/sas/sad/

[12:09] <masak> pmurias: isn't it enough just to allow _really_ good ties to js from the Web.pm module?

[12:11] <pmurias> if you are doing a google's maps app, i find doing the logic on the server side silly, if you just want js eye candy it's propably enough

[12:12] <moritz_> depends on what you mean by "logic" ;)

[12:17] <pmurias> moritz_: ui logic, if you click on this marker, and you fullfill the given conditions you will have your data presented in this way otherwise in a different one

[12:19] <masak> pmurias: in that case you have to emit js, yes. which means that the p6/js ties have to work as seamlessly as possible

[12:19] <masak> I don't find anything strange about that.

[12:20] <masak> we're moving towards a world where js is basically an assumption on the Web

[12:20] <moritz_> which I find really bad

[12:20] <masak> moritz_: well, yes and no

[12:21] <moritz_> because sometimes I just want to read stuff, not execute programs

[12:21] <masak> pmurias: also, I think many cases can be covered by co-opting jQuery, Prototype et al

[12:21] <moritz_> and when pages don't show any content without javascript, although they are at least 90% statical... I would like to shoot the responsible web developer

[12:21] <cognominal> I love JQuery

[12:21] <pmurias> masak: which are used for fancy effects or just general js helper

[12:22] <masak> moritz_: it's still up to the author of the page to be sensible. I don't think the classical web is under threat from js

[12:22] <moritz_> a positive example is gmail - it works without javascript (not as smooth, but as good as possible)

[12:22] <masak> pmurias: well, yes, in practice. but they can do the XmlHttpRequest stuff, too

[12:23] <moritz_> and I think the problem of the back-button in javascript needs to be solved

[12:23] <moritz_> that's something that only a handful of web apps do right

[12:24] <pmurias> moritz_: if something is a traditional desktop app just implemented using js it's not really resonable to expect it to be a web page

[12:25] <moritz_> I can understand that some things don't really work well without javascript; but for example reading emails is certainly not one of them

[12:26] <pmurias> you browse the web from you mobile?

[12:26] <moritz_> no

[12:27] <moritz_> I'm a bit retro, I guess. I don't even have a mobile

[12:27] *** abra_ joined
[12:27] <masak> moritz_++ # me neither!

[12:28] *** dr_df0 left
[12:29] <pmurias> mobiles are pretty cheap those days ;)

[12:29] * masak gets the hint

[12:29] <masak> don't want one.

[12:30] <masak> http://masak.org/carl/w/index.php/I_don%27t_want_a_mobile_phone

[12:30] <lambdabot> Title: I don't want a mobile phone - Carls wiki

[12:31] <moritz_> masak: for writing that you don't like chat you're pretty active here ;)

[12:31] <masak> moritz_: I meant the 2-person kind when I wrote that

[12:32] <masak> for some reason, IRC chatters are much more civil than people who chat one on one

[12:32] <cognominal> I don't want a mobile phone, I want a mobile web browser :)

[12:32] <masak> I guess it's a cultural thing

[12:32] *** abra left
[12:33] <cognominal> my mobile basic phone is dead but I am tighed six more month with my providers. I don't know if I want to jump on the iphone bandwagon riht now.

[12:34] <masak> the siren call of openmoko is actually getting to me of late: http://www.joachim-breitner.de/blog/archives/300-Xmonad-on-my-mobile-phone.html

[12:34] <lambdabot> Title: Xmonad on my mobile phone - nomeata’s mind shares, http://tinyurl.com/563fbu

[12:34] * pmurias stays clear of anything apple related

[12:34] <masak> pmurias: I can see the sense in that. and I'm writing this on a MacBook Pro.

[12:35] <cognominal> I used my macbook as a unix box for one year and got hooked to mac specific stuff.

[12:36] *** dr_df0 joined
[12:36] <cognominal> I don't know if I should be proud or ashamed of it though.

[12:37] <moritz_> cognominal: the answer is "yes", of course ;)

[12:37] <cognominal> But I note that the ruby on rails crowd is leveraging the power of textmate while we are stuck with vim and emacs

[12:38] <cognominal> moritz_, I don't like the lock in, but when it provides me with more power I fall for it.

[12:38] <cognominal> moritz_++

[12:39] <cognominal> so I added a FSF logo to deface my macbook.

[12:41] <moritz_> ;)

[12:41] <cognominal> I had not the courage to add the so bad test dynamic duo with unclear sexuality like all dynamic duos. : http://www.gnu.org/graphics/gnu-and-penguin-color-300x276.jpg

[12:41] <cognominal> s/test/taste/

[12:42] *** iblechbot joined
[12:43] <masak> cognominal: what do you mean "stuck with vim and emacs"? that's like saying "so I'm stuck with [some other state-of-the-art technology]"

[12:44] <masak> are you sure you're using vim and emacs correctly? :P

[12:44] <cognominal> emacs, state of the art?  I use it cause I am use to it but I know it is bad lazyness.

[12:45] <masak> a year or so ago, I read Steve Yegge's opinions about Emacs being the hundred-year editor

[12:45] <masak> I set out to get to know Emacs better.

[12:45] <masak> boy, is he right.

[12:46] <masak> not saying there couldn't be anything better, just that nothing else even comes close

[12:47] <moritz_> let's start an editor flamewar

[12:47] <masak> uhm, yes -- I see that I just provided the kindle

[12:47] <masak> sorry :P

[12:48] <masak> (but Emacs rocks!)

[12:49] <cognominal> elisp sucks so much... every single extension has different conventions.  Perl5 was a messy infix lisp, Perl6 is a clean lisp with a lot of new abstractions. The lisp crowd is now so bakward.   And, yea, I use emacs. One cannot be bleedin edge on everything. </flames>

[12:49] <masak> actually, I'm fully prepared to believe that there is not One Editor for everybody. that's why we have vim, too. :)

[12:50] <masak> cognominal: I agree that elisp is suboptimal on very many points. it's also, unfortunately, built into the editor forever.

[12:50] * pmurias should switch to yi from vim

[12:50] <masak> yes, yi looks intriguing

[12:51] <moritz_> wtf is yi?

[12:51] <moritz_> (except a province in China)

[12:51] <masak> http://www.cse.unsw.edu.au/~dons/yi.html

[12:51] <lambdabot> Title: yi text editor

[12:51] <masak> moritz_: and there's no province in China with that name, sorry

[12:52] <cognominal> textmate made the choice of external extension mechanism with a very smart interface partly  based on regexes and not of thru grammars. 

[12:52] <moritz_> masak: ah no, it's a poeple http://en.wikipedia.org/wiki/Yi_people

[12:52] <lambdabot> Title: Yi people - Wikipedia, the free encyclopedia

[12:52] <cognominal> soemtimes, less (here this interface) is better

[12:53] <masak> moritz_: right.

[12:53] <cognominal> yi, haskell, that cannot be bad.

[12:53] <masak> cognominal: with interfaces, less is the default direction of better, I'd say

[12:54] <moritz_> I don't like it when the editor is smarter than me

[12:54] <moritz_> and understands haskell, while I don't ;)

[12:55] <masak> is there a collective term for regex/token/rule constructs?

[12:55] <cognominal> when I see what audreyt did with haskell and my inability to grasp much I am ashamed.

[12:55] <masak> it's never too late!

[12:55] <moritz_> masak: rules

[12:56] <cognominal> masak, larry used the term "rule" but now I think he use "regex" as the collective term saying "regex are not regular expressions". I am not sure if he uses "regex" as the plural form though.

[12:57] <masak> I find both these suggestions ("regex", "rule") somewhat unsatisfactory

[12:57] <masak> note that they are exactly the same as one of the elements in the collective set they are describing

[12:58] <masak> I can see problems down that road. :P

[12:58] <masak> "but you said regex!" -- "yes, but I _meant_ it in the sense 'regex, token or rule'"

[12:58] <TimToady> we switched back to regex about a year ago

[12:59] <moritz_> maybe we should call them "patterns" ;)

[12:59] *** alester_ joined
[12:59] <TimToady> no, patterns are anything on the right side of ~~

[12:59] <masak> rakudo: "I am but a simple string" ~~ token { string }

[12:59] <p6eval> rakudo 30633: RESULT[{}]

[13:00] <TimToady> sigs are patterns 

[13:00] <moritz_> or "flas", "Formal LAnguage Specification" ;-)

[13:00] <cognominal> pattern is the stuff in TimToady. I sense there is a strong connexion with regex but I don't not quite which.

[13:00] *** alester_ left
[13:00] <moritz_> rakudo: "I am but a simple string" ~~ token { string }; say ~$/

[13:00] <cognominal> or huffmanize it in rex so we can say "rex rules".

[13:01] <p6eval> rakudo 30633: RESULT[string␤1]

[13:01] <moritz_> what's the 1 doing here?

[13:01] <cognominal> I thing there was a REX something, a tool or a language, but that is probably long gone.

[13:01] <TimToady> that's incorrect in any case

[13:01] <TimToady> REXX is a scripting language by Mike Cowlishaw

[13:01] <cognominal> I mean "patter the sutff in haskell"

[13:01] <TimToady> used mostly on IBM iron

[13:02] <TimToady> though a variant was on Amiga

[13:02] <cognominal> so we can use "rex" :)

[13:03] <TimToady> I think regex is a good enough generic term

[13:04] <moritz_> I know where the 1 come from in p6eval's output...

[13:04] <moritz_> the first execution of the script segfaulted

[13:04] <moritz_> then it was executed again, this time wrapped in (do { ... }).perl.print

[13:04] <masak> heh :)

[13:04] <TimToady> matching against token { foo } is specced to be equivalent to rx/ ^ foo $ /

[13:05] <moritz_> so it produced both "string\n" to STDOUT and then a 1 as the return value of say

[13:05] <TimToady> so it shouldn't have matched at all

[13:05] <cognominal> anyway, regex are what convinced me that Perl 6 is the way to go.  TimToady++

[13:06] *** abra_ left
[13:06] * moritz_ sense another rakudo bug

[13:06] *** alanhaggai left
[13:24] <pmurias> perltidy++ # "works" for haskell

[13:25] <pmurias> it works for -Cpil1 at leat

[13:25] <pmurias> * least ;)

[13:26] *** jhorwitz joined
[13:42] *** wknight8111 left
[13:45] <pmurias> audreyt: what's the state of PIL2?

[13:51] <pmurias> &

[13:51] *** pmurias left
[13:51] <moritz_> weekend &

[14:07] *** TJCRI joined
[14:12] *** dlocaus joined
[14:12] *** dlocaus left
[14:16] *** zamolxes left
[14:39] *** jiing joined
[14:57] *** Exodist joined
[15:04] <rakudo_svn> r30635 | pmichaud++ | [rakudo]: spectest-progress.csv update: 132 files, 2351 passing tests

[15:06] *** jiing left
[15:10] *** ggoebel joined
[15:12] *** masak left
[15:15] <dr_df0> weekend &

[15:15] *** dr_df0 left
[15:16] *** viklund left
[15:26] *** hercynium joined
[15:47] *** rindolf joined
[15:53] *** alanhaggai joined
[15:56] <rindolf> Hi all.

[16:00] *** bbkr left
[16:32] *** Myoma joined
[16:32] *** pmurias joined
[16:45] <audreyt> pmurias: on hold until ghc 6.10, as previously mentioned

[16:53] *** riffraff left
[16:59] *** pmurias left
[17:03] *** abra joined
[17:09] *** pmurias joined
[17:11] *** Jedai left
[17:12] <pmurias> audreyt: previously = on pugs.blogs.com

[17:13] <pmurias> ?

[17:13] *** jhorwitz left
[17:15] <pmurias> audreyt: i found out perltidy formats ./pugs -Cpil1 correctly ;)

[17:16] <audreyt> wow :)

[17:18] <pmurias> with --noadd-semicolons

[17:20] *** abra left
[17:23] *** Myoma` joined
[17:24] *** Myoma left
[17:24] *** Myoma` is now known as Myoma

[17:25] *** Chillance joined
[17:32] *** fullermd left
[17:41] *** pmurias left
[17:52] *** abra joined
[17:53] *** ingy left
[17:54] *** ingy joined
[17:54] *** ingy left
[17:54] *** ingy joined
[18:07] *** zamolxes joined
[18:22] *** [particle] left
[18:23] *** BinGOs left
[18:27] *** [particle] joined
[18:28] *** Myoma left
[18:28] *** Myoma joined
[18:30] *** BinGOs joined
[18:30] *** ron joined
[18:35] <ron> Anyone around for a parrot/pir type question on a builtin ?

[18:38] *** ron left
[18:48] *** ron joined
[18:49] <[particle]> i might be able to help

[18:49] *** Chillance left
[18:50] <ron> thx - working on rt problem 58150 split on empty $*IN.slurp - have at least part of the answer I think

[18:51] *** abra left
[18:51] <ron> on another part I noticed in Str.pir -.sub 'split' :method :multi('Perl6Str') - why the :multi ?? any idea it seems to cause some problems

[18:52] <[particle]> that split method works on the Perl6Str type

[18:53] <[particle]> you may want a different method if you get a 'String' type

[18:53] *** wknight8111 joined
[18:54] <ron> most of the stuff on the file works on some kind of string type.  For some reason reverse above uses :multi(String) and uc/lc don't use a multi declaration

[18:54] <ron> s/on/in

[18:55] <[particle]> native parrot strings and perl 6 strings behave a bit differently

[18:55] <[particle]> so we use multi to deal with that

[18:56] <ron> Just one last try before I try further research myself ... what makes split different from reverse / uc / lc ??

[18:58] <[particle]> i'm looking closer

[18:58] <ron> thx

[19:01] <[particle]> i wouldn't trust it... that code was written in jan'08 (r24771)

[19:01] <[particle]> much has changed since then, so it might not be accurate

[19:02] <[particle]> does it work without :multi?

[19:02] <ron> I have gottin <empty $*IN.slurp.split("\n") to work when I removed the multi and didn't see anything broken yet.

[19:02] *** riffraff joined
[19:06] <ron> thx again for looking -- didn't think of checking age since code changed ...

[19:07] <[particle]> np, that's what i'm here for :)

[19:07] *** riffraff left
[19:10] *** ruoso joined
[19:11] *** dmq joined
[19:18] *** ron left
[19:22] *** rindolf left
[19:50] *** pmurias joined
[19:51] <ruoso> pmurias, hi

[19:51] <pmurias> ruoso: hi

[19:51] <pmurias> the wifi works again ;), although i have to have the door opened and it's getting cold ;)

[19:52] <ruoso> heh... thick walls ;)

[19:53] <ruoso> btw... have you seen the wiki page on the capture merger?

[19:53] <pmurias> glimpsed at it looking again

[19:54] *** jfredett left
[19:54] * ruoso thinks &?BLOCK will change a lot the way he codes...

[19:54] *** jfredett joined
[19:56] * pmurias suspects loops should be used instead ;)

[19:57] <ruoso> pmurias, is the code that bad? ;)

[19:58] <pmurias> wiki page loading...

[19:59] <ruoso> btw... we need to sanitize the Capture API in SMOP...

[20:04] <ruoso> pmurias, so... do you think the approach is sane?

[20:11] *** pmurias left
[20:11] * ruoso home &

[20:11] *** ruoso left
[20:11] *** pmurias joined
[20:18] *** pmurias_ joined
[20:18] *** pmurias_ left
[20:18] *** pmurias_ joined
[20:20] *** pmurias left
[20:21] *** pmurias_ is now known as pmurias

[20:30] *** pmurias left
[20:36] *** Maghnus joined
[20:39] *** meppl joined
[20:40] *** ggoebel left
[20:47] *** aoeu joined
[20:47] *** aoeu left
[20:47] *** Myoma left
[20:48] *** Myoma joined
[21:08] *** TJCRI left
[21:12] <pugs_svn> r22065 | dr_df0++ | [spec] while.t moved from t/statements/modifies and fudged for rakudo

[21:18] <pugs_svn> r22066 | dr_df0++ | [t/statemets] deleted while.t modifier

[21:38] <pugs_svn> r22067 | dr_df0++ | [spec] moved all tests from t/statemens/modifiers into t/spec/S04-statement-modifiers/

[21:39] *** tessier__ joined
[21:39] <tessier__> Is perl6 still implemented in Haskell?

[21:42] *** dmq left
[21:54] *** lambdabot left
[21:55] *** iblechbot left
[21:58] *** lambdabot joined
[22:02] *** dduncan joined
[22:06] *** Limbic_Region joined
[22:07] <[particle]> tessier__: pugs is a perl 6 implementation written in haskell

[22:07] <[particle]> rakudo is a perl 6 implementation written in perl 6 and pir (a parrot language)

[22:08] <[particle]> there are others, written in ruby, c, perl 5, and perl 6

[22:08] <[particle]> ...all in various states of completion

[22:09] <tessier__> [particle]: Bug the pugs implementation is still the furthest along?

[22:09] <[particle]> yes but pugs development has stalled

[22:09] <tessier__> Odd that there are so many implementations. You may end up with a Lisp-like problem.

[22:09] <[particle]> and rakudo is passing 2300+ tests now

[22:10] <[particle]> there are ~19000 tests at the moment

[22:10] <[particle]> perl 6 has a well-defined spec, and test suite

[22:11] <[particle]> any implementation that passes the test suite is considered official perl 6

[22:11] <[particle]> if c had a test suite, would gcc and msvc and icc pass it?

[22:16] <smtms> of course, everybody would be using it as a regresssion test suite

[22:17] <tessier__> Assuming someone unbiased and with good intentions made the test suite.

[22:18] <tessier__> If Sun makes a Java test suite (actually, don't they?) guess what would happen?

[22:18] <[particle]> and wouldn't that be  grand. at least we're starting out with one :)

[22:19] <xinming_> tessier__: No one will write any implementation. :-)

[22:19] <[particle]> quality would improve?

[22:20] <pugs_svn> r22068 | dr_df0++ | [spec] t/spec/S04-statemet-modifiers/if.t merged from few files and fudged for rakudo

[22:20] <[particle]> ah, look at that. rakudo's passing more tests now :)

[22:21] <[particle]> dr_df0++

[22:25] *** jferrero joined
[22:33] *** Exodist left
[22:37] *** wknight8111 left
[22:48] *** hercynium left
[22:54] *** ruoso joined
[22:55] *** alester left
[22:55] *** Chillance joined
[23:00] *** cmdl1n3 joined
[23:04] <pugs_svn> r22069 | dr_df0++ | [spec] all tests in S04-statement-modifiers fudged for rakudo plus minor changes

[23:05] *** Lorn joined
[23:07] *** dduncan left
[23:07] *** fullermd joined
[23:14] <ruoso> Hello!

[23:14] <Limbic_Region> salutations

[23:19] *** dr_df0 joined
[23:19] <dr_df0> perl6: { my $a; $a++; say $a }

[23:19] <p6eval> rakudo 30642: OUTPUT[increment() not implemented in class 'Undef'␤current instr.: 'postfix:++' pc 14374 (src/gen_builtins.pir:9220)␤]

[23:19] <p6eval> ..elf 22069, pugs: OUTPUT[1␤]

[23:21] *** jferrero left
[23:26] *** ruoso left
[23:27] *** dr_df0 left
[23:27] *** dr_df0 joined
[23:28] <dr_df0> sleep &

[23:28] *** dr_df0 left
[23:55] *** cmdl1n3 left
