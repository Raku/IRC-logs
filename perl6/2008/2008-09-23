[00:05] *** Ontolog left
[00:08] *** Limbic_Region left
[00:11] *** elmex left
[00:15] *** explorer__ left
[00:17] <Khisanth> moritz_: for a community rewrite it seems to be keeping Larry pretty busy

[00:29] *** funktio left
[00:37] *** ptman left
[00:48] <PerlJam> Khisanth: He has the most experience in language design.

[00:49] *** Chillance left
[00:51] *** ptman joined
[00:57] *** ptotterm joined
[01:03] *** ptman left
[01:04] *** Exodist left
[01:14] *** Ontolog joined
[01:24] *** Alias_ joined
[01:50] *** Ontolog left
[01:55] *** Ontolog joined
[02:03] *** alester_ joined
[02:27] *** wknight8111 left
[02:52] *** meppl left
[02:53] *** meppl joined
[02:59] <meppl> good night

[03:01] *** meppl left
[03:13] *** ptotterm is now known as ptman

[03:15] *** jhorwitz left
[03:19] *** langri joined
[03:35] <Khisanth> PerlJam: for some things a dictatorship is better than a democracy :P

[03:36] <Khisanth> hmm dictatorship is the wrong word ...

[03:45] *** langri left
[04:01] <Ontolog> Khisanth: Technocracy?

[04:02] <Khisanth> I was looking for something that is like a dictatorship but not exactly 

[04:02] <Ontolog> Oligarchy?

[04:02] <Ontolog> like dictatorship but more than one person is at the top

[04:03] <Khisanth> no the one person at the top part is important :)

[04:03] <fullermd> Autocracy

[04:03] <Ontolog> yes that would be it

[04:03] <Ontolog> i guess it's the non-negative sounding form of 'dictatorship'?

[04:09] <Khisanth> enlightened despotism :)

[04:10] *** kanru joined
[04:31] *** Southen_ joined
[04:40] <diakopter> monarchy...?

[04:40] *** ChanServ sets mode: +o diakopter

[04:40] *** diakopter sets mode: -o TimToady

[04:40] <diakopter> there, monarchy. ;)

[04:41] *** diakopter sets mode: +o TimToady

[04:41] *** diakopter sets mode: -o diakopter

[04:43] <diakopter> [lack of] apologies in advance for the [OT] message.. but please PM me if you're interested in owning the perlblog.org domain name.  it's zero-currency to one I deem worthy, or even just willing.

[04:49] *** Southen left
[04:55] *** alester_ left
[05:17] *** iblechbot joined
[05:18] *** slavik joined
[05:19] <Ontolog> split patch incoming

[05:26] <slavik> does anyone have a working grammar example?

[05:29] <slavik> ie: how to match a string against a grammat

[05:29] <slavik> grammar*

[05:30] <Ontolog> pmichaud or moritz_ please see the reopened http://rt.perl.org/rt3/Ticket/Display.html?id=59184

[05:30] <lambdabot> Title: #59184: Some fixes to split methods

[05:30] <Ontolog> i added the new patch there

[05:35] <PerlJam> Ontolog: you're *still* hacking on split()?  I thought you had that finished.

[05:36] <Ontolog> PerlJam: nope, some things didn't work correctly

[05:36] <PerlJam> Well, Ontolog++ for all the split hacking.

[05:36] <PerlJam> And another Ontolog++ for good measure

[05:37] <Ontolog> haha :p thanks it's not a big deal

[05:37] <Ontolog> actually there is still some more split hacking to do

[05:37] <PerlJam> Ontolog: except that someone has to do it and it's you  :)

[05:37] <Ontolog> since now Str.split(Regex) can return a list of Match objects in the event that Regex contains capture groups

[05:37] <Ontolog> haha thanks

[05:38] <slavik> do grammars work in pugs?

[05:38] <PerlJam> Ontolog: doesn't it just return the one match object that corresponds to $/ and it turns into a list or whatever based on context?

[05:39] <PerlJam> (i.e., MMD could handle the listification I think)

[05:40] <Ontolog> oops I was getting it confused with comb

[05:40] <Ontolog> comb is the one that wants to return a list of Matches for capture groups

[05:40] <slavik> *** Cannot parse regex:  <word> 

[05:40] <slavik> err ... am I doing something wrong?

[05:40] <Ontolog> I see from S29 about split: As with Perl 5's split, if there is a capture in the pattern it is returned in alternation with the split values. Unlike with Perl 5, multiple such captures are returned in a single Match object.

[05:40] *** iblechbot left
[05:40] <Ontolog> this also isn't finished

[05:40] <PerlJam> slavik: I don't think pugs ever grew the ability to handle grammars and such.

[05:40] <Ontolog> so actually a bit of work still needs to be done on split

[05:41] <slavik> oh ... that would explain much ...

[05:41] <Ontolog> also some things about splitting filehandles and arrays and the like

[05:41] <Ontolog> slavik: Rakudo  has it pretty well implemented because it is a req. for Parrot itself

[05:41] <Ontolog> err I should say, Rakudo doesn't implement it since Parrot does

[05:42] <Ontolog> so, use Parrot / Rakudo ;-)

[05:42] <slavik> heh, rakudo is funny

[05:42] <slavik> printing only 10 characters of context ...

[05:42] <slavik> Statement not terminated properly at line 10, near "token sche"

[05:42] <Ontolog> Funny like "haha I'm a clown funny" or funny like your face?

[05:43] <slavik> it also seems to want semi-colons after closing brace

[05:43] <Ontolog> really??

[05:43] <slavik> I think so

[05:43] <Ontolog> i'm actually not so familiar with writing real perl 6 code in rakudo so i wouldn't know

[05:43] <Ontolog> but i'm pretty sure it doesn't need semi-colons after closing braces on things like if { } while { } etc

[05:44] <PerlJam> slavik: sometimes it does, but only when necesary  :)

[05:44] <Ontolog> you can see the code in the test suite

[05:44] <Ontolog> (which is in the pugs repo)

[05:44] <PerlJam> Ontolog: your diff has this ...

[05:44] <PerlJam> + if has_count goto handle_count

[05:44] <PerlJam> + handle_count:

[05:44] <PerlJam> wihch is weird  :)

[05:44] <PerlJam> s/wih/whi/

[05:44] <Ontolog> hm let me see

[05:46] *** Psyche^ joined
[05:47] <Ontolog> PerlJam: yeah that's wrong, thanks for catching that

[05:47] <Ontolog> PerlJam: it should read: unless has_count goto positive_count

[05:47] <Ontolog> i will update the ticket

[05:48] <PerlJam> make sure to do it in both places.

[05:48] <PerlJam> (i.e., I'm sure you realize that you use that same bit of code in two places)

[05:49] <PerlJam> anyway, I've got some other hacking to do tonight, but soon (next couple of weeks), I too should be hacking on rakudo (again)

[05:49] * PerlJam *poof*

[05:50] <Ontolog> cool, see you then ;-)

[05:57] <slavik> hmm, I make parrot crash :(

[05:58] <pasteling> Someone at 67.100.227.140 pasted "grammar attempt ..." (9 lines, 143B) at http://sial.org/pbot/32271

[05:58] <Ontolog> yes probably pretty easy to do that at this point

[05:58] <Ontolog> lots of things still going on

[05:58] <slavik> right

[05:58] <slavik> I mean, m:P5// works, but I want to try out grammars, 'cause they are friggin cool

[05:59] <slavik> that's my paste, am I doing something wrong?

[06:03] *** Patterner left
[06:03] *** Psyche^ is now known as Patterner

[06:23] <Ontolog> slavik: I'm not too sure... is test::chars right?

[06:23] <Ontolog> I thought :: was the namespace / class name seperator

[06:24] <Ontolog> would it be test.chars?

[06:24] <Ontolog> try that

[06:27] <slavik> nope

[06:28] <slavik> I think the pugs code for parsing Perl6 regex is not finished or something

[06:36] *** clintongormley joined
[06:39] <Ontolog> oh this is from pugs?

[06:39] <Ontolog> i said use Rakudo!!! 

[06:40] <slavik> parrot crashes

[06:41] <slavik> rather ... statement not properly terminates

[06:41] <slavik> terminated

[06:41] <pasteling> "slavik" at 67.100.227.140 pasted "#!/usr/local/bin/pugs my $str" (34 lines, 1.9K) at http://sial.org/pbot/32274

[06:50] <Ontolog> i was getting some issues aboutthat stuff before

[06:50] <Ontolog> slavik: try this: make realclean; make; cd languages/perl6; make; run your stuff again

[06:50] <Ontolog> no no

[06:50] <Ontolog> first

[06:50] <Ontolog> svn update

[06:50] <Ontolog> then do the above

[06:51] <slavik> you mean perl Makefile.PL, right?

[06:52] <Ontolog> oops no i mean this:

[06:53] <Ontolog> make realclean; svn update; perl Configure.pl; make

[06:53] <slavik> k

[06:53] <Ontolog> so that in the parrot directory

[06:53] <Ontolog> then: cd languages/perl6; make

[06:54] <slavik> can I do make reallyinstall? or

[06:54] <slavik> or no*?

[06:58] <slavik> This is Rakudo Perl 6, revision 31356 built on parrot 0.7.1-devel

[06:58] <slavik> too few arguments passed (1) - 2 params expected

[06:58] <slavik> err ...

[06:59] *** pjcj left
[07:00] <slavik> hmm, latest revision is broken?

[07:44] *** zamolxes left
[08:05] *** pmurias joined
[08:13] <slavik> any dreams about when a production perl6 interpreter is ready?

[08:13] *** braceta joined
[08:14] <moritz_> dreams... many

[08:15] <moritz_> "by christmas", but I fear not this christmas ;)

[08:20] <pmurias> slavik: depends what are you willing to use in production

[08:36] *** zamolxes joined
[08:37] *** Alias_ left
[08:43] *** smg left
[08:44] *** elmex joined
[09:03] <pmurias> moritz_: will you add smop to the evalbot once we have pugs -Bm0ld working?

[09:03] <moritz_> pmurias: sure

[09:06] <Ontolog> slavik: there is absolutely no "production" ready perl6, not now and not for a couple years imo

[09:07] <Ontolog> moritz_: do you think http://rt.perl.org/rt3/Ticket/Attachment/475076/221000/split.diff is good?

[09:07] <lambdabot> Title: Login

[09:08] <Ontolog> if so i am looking forward to a patch before i go on to implementing some other split features

[09:11] <moritz_> looks fine, from a quick glance

[09:14] <moritz_> Ontolog: with this patch three tests fails

[09:14] <moritz_> not ok 18 - values matched for: Negative limit returns empty List

[09:14] <moritz_> not ok 19 - split created the correct value amount for: Zero limit returns empty List

[09:14] <moritz_> not ok 20 - values matched for: Zero limit returns empty List

[09:14] <Ontolog> yes

[09:15] <Ontolog> because as you said those tests are wrong, gotta update them

[09:15] <moritz_> I never talked about zero limit

[09:16] <pugs_svn> r22314 | moritz++ | [t/spec] limited splits return the rest of the string in the last chunk

[09:16] <moritz_> I don't know what it's supposed to return

[09:16] <moritz_> I just know about the case with positive count

[09:17] *** iblechbot joined
[09:17] <moritz_> I'll ask p6l

[09:25] <moritz_> anyway, since it's a weird edge case I think it's ok for now to skip the tests, and apply the patch

[09:27] <pugs_svn> r22315 | moritz++ | [t/spec] fudge non-specced split tests

[09:28] <rakudo_svn> r31358 | moritz++ | [rakudo] correct Str.split with $limit argument, Ontolog++

[09:28] <rakudo_svn> r31358 | moritz++ | Patch courtesy by Chris Davaz

[09:31] <moritz_> Ontolog: you're now in parrot's CREDIT file ;)

[09:39] <pmurias> moritz_: does make test for pugs work for you?

[09:40] <moritz_> pmurias: you mean on p6eval's server?

[09:41] <pmurias> at all ;)

[09:41] * moritz_ tries

[09:42] <moritz_> on the laptoop where I usually work I don't have a new GHC6, so I have to check somewhere else...

[09:42] <moritz_> nope, does not

[09:42] <moritz_> make[1]: Entering directory `/home/evalenv/pugs/ext/Algorithm-TokenBucket'

[09:42] <moritz_> Makefile:521: *** target pattern contains no `%'.  Stop.

[09:42] <pmurias> a harness error?

[09:43] * pmurias hates generated Makefiles

[09:44] <moritz_> I'll try with a realclean on another machine

[09:46] <pmurias> audreyt: ping

[09:46] <Ontolog> cool, thanks. i'll update the test asap, btw, the case with limit = 0 is in perl 5 docs on split. If LIMIT is unspecified or zero, trailing null fields are stripped

[09:46] <Ontolog> which implies that 0 == as if limit was not specified

[09:46] <Ontolog> at least strongly infers it

[09:47] <moritz_> yes, but Perl 6 has a different mechanism of saying "as many as possible", so it doesn't make sense to use the old convention

[09:48] <moritz_> you can use a star * to mean "arbitrarily many"

[09:48] <moritz_> so it doesn't make sens to continue abusing the old way

[09:49] <moritz_> pmurias: on the other machine I get a harness error

[09:49] <moritz_> t/01-sanity/01-tap.......................................ok 1/10Can't use an undefined value as an ARRAY reference at inc/Test/Harness.pm line 344.

[09:50] <pmurias> same as i do

[10:13] *** smg joined
[10:17] *** zamolxes left
[10:19] <Ontolog> moritz_: did you update split-simple.t with something like <<<<<<< .mine ?

[10:20] <moritz_> Ontolog: no. That's because you made local modifications to the file in the same parts that I changed

[10:20] <moritz_> Ontolog: so you've got a merge conflict, which you have to fix manually

[10:20] <Ontolog> i thought i already commited my stuff before

[10:20] <Ontolog> ok

[10:21] <Ontolog> U    t/spec/S29-str/split-simple.t

[10:21] <Ontolog> shouldn't there be a different letter than U in case of a merge conflict?

[10:21] <moritz_> yes, a C

[10:23] <Ontolog> ohh i know what happened

[10:25] <Ontolog> moritz_: i see you updated the tests for me, is there anything else i should add there?

[10:26] <moritz_> Ontolog: we could use some tests with regexes that produce zero-width matches

[10:27] <moritz_> Ontolog: also tests where the regex has a capture, in which case the splitted items should be mixed with the match objects

[10:32] *** pmurias left
[10:33] <Ontolog> yes well the latter should certainly fail atm

[10:33] <Ontolog> this is one of the things i am to work on next

[10:33] * Ontolog also has to update comb to return lists of Match objects in case of capture groups

[10:34] <moritz_> well, that might block on one of the rakudo/PCT bugs

[10:40] *** kanru left
[10:43] <Ontolog> ooh that's too bad

[10:44] <Ontolog> but if it's possible with split why not comb?

[10:44] <Ontolog> in split we are interspersing Match objects but in comb we would return only Match objects

[10:45] <moritz_> I don't know if it would be possible with either

[10:45] <moritz_> but the tests should be written (and TODE'ed) anyway

[10:46] *** pmurias joined
[10:50] *** pjcj joined
[10:52] <Ontolog> i see

[10:52] <Ontolog> well time to go home!

[10:52] * Ontolog &

[10:53] *** Ontolog left
[10:56] *** wknight8111 joined
[11:13] *** pmurias_ joined
[11:14] *** charsbar_ left
[11:16] *** charsbar joined
[11:16] *** braceta left
[11:28] *** [1]Maghnus joined
[11:36] *** jferrero joined
[11:45] *** Maghnus left
[11:45] *** [1]Maghnus is now known as Maghnus

[11:54] *** Ontolog joined
[12:08] *** masak joined
[12:16] *** kanru joined
[12:20] *** braceta joined
[12:27] *** araujo left
[12:27] *** japhb left
[12:27] *** kolibrie left
[12:28] *** kolibrie joined
[12:29] *** araujo joined
[12:29] *** japhb joined
[12:29] *** araujo left
[12:30] *** araujo joined
[12:40] *** dalek left
[12:41] *** dalek joined
[12:44] *** xiaoyafeng joined
[12:53] *** pjcj left
[12:58] *** jferrero left
[13:10] *** justatheory left
[13:13] *** foenichs joined
[13:17] *** abra joined
[13:19] *** zamolxes joined
[13:22] *** justatheory joined
[13:25] *** kanru left
[13:37] *** sri_work left
[13:39] *** sri_work joined
[13:51] *** TJCRI joined
[13:55] *** ahmadz joined
[14:11] *** Lorn joined
[14:20] *** pjcj joined
[14:26] *** eternaleye left
[14:29] <rakudo_svn> r31360 | moritz++ | [rakudo] implement chr() and ord(), and add tests to spectest_regression

[14:29] <rakudo_svn> r31360 | moritz++ | Patch courtesy by Carl MÃ¤sak <cmasak at gmail dot com>, masak++

[14:30] <masak> time to update November, then :)

[14:31] <moritz_> let me guess, this patch broke November, because ord() and chr() in Impatience.pm collide with the built in ones

[14:31] <masak> something like that

[14:31] <masak> since I haven't re-compiled Parrot yet, I don't know what breaks

[14:31] <masak> but I do know that Impatience.pm is no longer needed :)

[14:33] <moritz_> I think it will be now and then

[14:33] <masak> not for our current purposes

[14:33] <masak> but, yes, maybe for other things

[14:34] <masak> though I prefer to nuke it completely now and revive it later rather than letting it loiter around and be forgotten

[14:34] <moritz_> aye

[14:37] *** eternaleye joined
[15:00] *** cjfields joined
[15:04] *** jhorwitz joined
[15:06] <bennymack-work> You guys are probably already aware of this but I just learned of it. Apparently JS also has a replacement for the Y combinator

[15:06] <bennymack-work> http://ejohn.org/apps/learn/#11

[15:06] <lambdabot> Title: Learning Advanced JavaScript

[15:06] <bennymack-work> not too shabby. possibly better than Perl6's ?&PROCEDURE or whatever it is

[15:08] <moritz_> what's shabby is that I can't see the page without javascript

[15:09] <moritz_> and it does use a name (here myNinja), so it's not an anonymous sub

[15:09] <bennymack-work> gonna have to step out of emacs for a sec?

[15:09] <bennymack-work> but myNinja is not accessible elsewhere so it seems like it is an anonymous sub (to me)

[15:10] <moritz_> it has a small scope, but it's not anonymous

[15:10] <masak> bennymack-work: I don't see how that code is related to Y combinators.

[15:10] <moritz_> it's the same as if you do this in perl 5: my $function = do { my $x; $x = sub { use $x here... }} except with a bit of syntactic sugar

[15:10] <bennymack-work> I thought it was essentially a way to specify a symbol in place of the ?&PROCEDURE compiler hint

[15:11] <bennymack-work> moritz_: then you're quickly going down the YC rabbit hole

[15:11] <moritz_> bennymack-work: it is, but as soon as you specify a symbol, you're giving it a name, thus it's not ananymous anymore

[15:11] <moritz_> bennymack-work: and the YC is all about recursiong into an anonymous sub

[15:12] <moritz_> but I guess that's more of a philosphical debate

[15:12] <bennymack-work> does seem a bit semantical

[15:13] *** eternaleye_ joined
[15:16] <bennymack-work> heheh this is an interesting presentation: http://ejohn.org/apps/learn/#15

[15:16] <lambdabot> Title: Learning Advanced JavaScript

[15:18] *** kanru joined
[15:23] *** foenichs left
[15:24] *** eternaleye left
[15:32] *** hercynium joined
[15:34] *** Lorn_ joined
[15:39] *** braceta left
[15:42] *** frobnitz left
[15:43] *** Exodist joined
[15:43] *** Exodist left
[15:43] <pugs_svn> r22316 | masak++ | [ord_and_chr.t] added tests for ord and chr methods

[15:43] *** Exodist joined
[15:44] <moritz_> masak: heh, I just did that locally, and started to try implement chr as a method

[15:44] <masak> moritz_: :)

[15:44] <masak> moritz_: running 'make spectest_regression' now, to see if I need to fudge the test file for rakudo

[15:44] *** braceta joined
[15:44] <masak> I suspect I do.

[15:45] <moritz_> and our changes were nearly identical, except that I tested .chr first, and with a space instead of an A ;)

[15:45] <cjfields> moritz_: would you like a quick patch to get .pairs working (nopaste), or should it go to RT?

[15:46] <moritz_> cjfields: RT please, I'm currently workiing on other stuff

[15:46] <cjfields> ok, posting

[15:46] <masak> cjfields++

[15:46] <moritz_> ok, chr() as method works here

[15:46] *** eternaleye_ left
[15:47] <moritz_> masak: no need to fudge, I think I'll have a fix soonish

[15:47] <moritz_> (aka in the next 15 minutes)

[15:47] <moritz_> running spectest_regression before commiting...

[15:47] <masak> gotcha. moritz_++

[15:49] <masak> perl6: my %h = test => ["foo", "bar"]; for %h.kv -> $k, $v { say $k; say $v; }

[15:49] <p6eval> rakudo 31364: OUTPUT[test␤foo␤StopIteration␤current instr.: '_block11' pc 112 (EVAL_14:33)␤]

[15:49] <p6eval> ..pugs: OUTPUT[*** Odd number of elements found where hash expected: VList [VStr "test",VRef <Array:0xb5efd0f5>]␤    at /tmp/CORBlBRnIZ line 1, column 1-31␤]

[15:49] <p6eval> ..elf 22316: OUTPUT[Can't locate object method "kv" via package "Pair" at (eval 121) line 4.␤ at ./elf_f line 3861␤]

[15:50] <moritz_> so elf doesn't promote the Pair to Hash

[15:50] <moritz_> pugs: my %h = test => ["foo", "bar"]; for %h.kv -> $k, $v { say  $k; say $v; }

[15:50] <p6eval> pugs: OUTPUT[*** Odd number of elements found where hash expected: VList [VStr "test",VRef <Array:0xb5dfd0f5>]␤    at /tmp/uCeEnNCH7q line 1, column 1-31␤]

[15:50] <moritz_> pugs: my %h = (test => ["foo", "bar"]); for %h.kv -> $k, $v { say  $k; say $v; }

[15:50] <p6eval> pugs: OUTPUT[*** Odd number of elements found where hash expected: VList [VStr "test",VRef <Array:0xb5ddcaa1>]␤    at /tmp/VpdgX27KFv line 1, column 1-33␤]

[15:50] <moritz_> that's what I wanted to do

[15:50] <moritz_> so not a parsing issue

[15:51] *** braceta_ joined
[15:56] <rakudo_svn> r31365 | moritz++ | [rakudo] make chr() and ord() methods of Any, and moved chr() to be in

[15:56] <rakudo_svn> r31365 | moritz++ | alphabetical order with the rest of the methods.

[15:58] <moritz_> cjfields: no $other_stuff is done... if you nopaste me the fix I'll take a look, nothing arrived yet in rt

[16:00] *** slavik left
[16:00] *** Lorn left
[16:01] <cjfields> nopaste?

[16:01] <cjfields> okay, got it

[16:02] <moritz_> http://sial.org/pbot/perl6

[16:02] <lambdabot> Title: sial.org Pastebot - pasteling

[16:02] <pasteling> "cjfield" at 128.174.127.121 pasted "simple .pairs implementation" (54 lines, 1.1K) at http://sial.org/pbot/32288

[16:02] *** braceta left
[16:04] <moritz_> cjfields: I think that new 'List' should actually be 'list'(), but I could be wrong

[16:05] <cjfields> that's possible; the method is a simple modification of .kv (changing a few things to allow PMC key/value)

[16:07] <moritz_> and I think that $P3 = get_hll_global 'Perl6Pair' could be moved out of the loop

[16:07] <moritz_> testing now...

[16:07] <cjfields> yes, true (about $P3).  

[16:08] *** iblechbot left
[16:09] * moritz_ wonders why the hell S29 doesn't list .pairs as a method but rather as a sub

[16:09] <cjfields> I noticed that .sort is borked with it (guessing we need to implement a specific 'infix:cmp' for Pairs).

[16:10] <moritz_> that would certainly DWIM

[16:12] <masak> can Rakudo call Perl 5 code?

[16:13] <moritz_> no.

[16:13] <masak> that was my impression as well.

[16:13] <rakudo_svn> r31366 | moritz++ | [rakudo] implement Hash.pairs, cjfields++. Patch courtesy by Chris Fields.

[16:13] *** AzureStone left
[16:13] <masak> but Pugs can?

[16:13] <moritz_> uhm.

[16:13] <masak> :)

[16:13] <moritz_> it had a sort-of working p5 bridge at one point

[16:14] <masak> but no longer?

[16:14] <moritz_> dunno

[16:14] <moritz_> last I tried it didn't went all too well

[16:14] <moritz_> but I don't know if that's due to bit rot, or if it was never better

[16:15] <masak> is system() called run() in Perl 6?

[16:15] <moritz_> yes

[16:15] <masak> dz

[16:15] <moritz_> but it's called system() in pugs ;/

[16:15] *** iblechbot joined
[16:15] *** eternaleye_ joined
[16:15] <masak> moritz_: that ought to be easy to change, though. I'll give it a shot.

[16:22] *** rorx joined
[16:23] <masak> moritz_: I changed what I think are all the right places, and it builds. that's enough for a commit, isn't it? even though I don't understand the Pugs source architecture very deeply

[16:23] <masak> http://pastebin.com/m55f2fa41

[16:23] <buubot> masak: The paste m55f2fa41 has been copied to http://erxz.com/pb/12310

[16:23] <masak> buubot: thanks, I guess.

[16:24] <moritz_> masak: dunno - I'm not really pugs guru, but I guess it's fine

[16:24] <masak> yes, it feels ok

[16:24] <pugs_svn> r22317 | masak++ | [Prim.hs] renamed s/system/run/

[16:25] <masak> I hope that someone takes me to task and shows me what I did wrong, in case I screwed that up entirely :)

[16:26] <[particle]> that is the pugs way

[16:26] <pugs_svn> r22318 | moritz++ | [t/spec] added a test to S29-hash/pairs.t, and fudged for rakudo

[16:26] <moritz_> [particle]: which works pretty well if you have a very active developer

[16:27] <[particle]> if nobody's using it, nobody will complain

[16:27] <masak> :)

[16:27] <moritz_> [particle]: pmurias uses it for pugs-m0ld ;)

[16:28] <masak> (trusting the anarchy)++

[16:32] <rakudo_svn> r31367 | moritz++ | [rakudo] added S29-hash/pairs.t to spectest_regression

[16:39] <cjfields> moritz++ # for adding pairs.t

[16:39] <moritz_> pugs: say Hash ~~ List

[16:39] <p6eval> pugs: OUTPUT[1␤]

[16:39] <moritz_> pugs; my %h = (a => 1, b => 2); say %h[0]

[16:40] <cjfields> pugs: my %h = (a => 1, b => 2); say %h[0]

[16:40] <p6eval> pugs: OUTPUT[a  1␤]

[16:40] <moritz_> what did I do wrong?

[16:40] * cjfields damnable semicolon

[16:40] <moritz_> ah

[16:42] *** zamolxes left
[16:44] *** sri_work left
[16:46] <pugs_svn> r22319 | moritz++ | [t/spec] unfudge tests in perl.t - rakudo's Str.perl now properly escapes

[16:46] <pugs_svn> r22319 | moritz++ | sigials and other stuff.

[16:47] <moritz_> autounfudge++

[16:47] <cjfields> moritz_: can't find this anywhere: are Pairs sorted by key value?

[16:48] <cjfields> (by default)

[16:48] *** Schwern joined
[16:48] <moritz_> cjfields: they are, and it's probably somehwere in S03

[16:48] <cjfields> thx

[16:49] <moritz_> cjfields: it's something like $a.key cmp $b.key || $a.value cmp $b.value

[16:49] <cjfields> okay.  I'll try to implement that.

[16:49] <TimToady> I doubt it's specced, but that seems reasonable

[16:50] <moritz_> I thought I read that somewhere, on sorting hashes

[16:50] <cjfields> same here

[16:50] *** jferrero joined
[16:50] <TimToady> could be

[16:51] <TimToady> I guess the interesting question is what cmp does with non-matching types

[16:52] <cjfields> exactly (I'm thinking of the mapping pairs you have for .trans in S05)

[16:52] <cjfields> Regex => Str, Str => Str, ...

[16:53] <moritz_> why would you want to compare those?

[16:54] <TimToady> more generally, how do you sort any list of arbitrarily typed objects?

[16:54] <cjfields> From S05 Transliteration : '$str.trans( %mapping.pairs.sort );'

[16:55] <cjfields> and : '$str.=trans( [/ \h /,   '<',    '>',    '&'    ] => ['&nbsp;', '&lt;', '&gt;', '&amp;' ]);'

[16:55] <pugs_svn> r22320 | moritz++ | [t/spec] unfudge one more test

[16:56] <cjfields> So I could see something like $str.=trans( / \h / => '&nbsp;',    '<' => '&lt;',   '>' => '&gt;',    '&' => '&amp;');

[16:56] *** AzureStone joined
[16:58] *** rorx left
[16:58] <cjfields> I could just use the stringified key/value for now

[16:59] <cjfields> Or maybe whatever .kv returns

[17:08] <masak> pmichaud, moritz_: now putting CLA in mailbox.

[17:08] *** masak left
[17:09] <moritz_> masak: very good. Now we only need approval from the other parrot hackers, and a bit of time for the snail mail...

[17:09] <[particle]> masak++ left the room

[17:09] <moritz_> I know, but I guess he'll backlog

[17:22] *** cosimo left
[17:27] *** zamolxes joined
[17:30] *** jferrero left
[17:32] *** eternaleye joined
[17:34] *** eternaleye_ left
[17:38] *** ruoso joined
[17:43] <pmurias_> ruoso: hi

[17:44] <ruoso> hi pmurias 

[17:47] <pmichaud> (sorting hashes) I thought that S09 said that hashes don't autosort by default, and that sorting is handled by overloading .iterator with a mixin or something.

[17:47] <pmichaud> oh, you're talking about sorting Pairs

[17:47] <pmichaud> sure, I think keys can be major sort order.

[17:48] <[particle]> but you can sort Apples and Oranges

[17:48] <[particle]> *can't

[17:48] <PerlJam> I can

[17:48] <PerlJam> Apples come before Oranges

[17:48] <[particle]> wrong locale.

[17:51] <cjfields> pmichaud: How do we handle mixed types (i.e. 'my %hash = (/\d+/ => 1, 'b' => 2, foo() => 3);')?  Use stringified keys/values?

[17:52] <pmichaud> cjfields: Parrot doesn't support non-string keys at the moment.

[17:52] <pmichaud> so, short answer is "we don't handle them until we come up with our own Hash implementation"

[17:53] <[particle]> which is easy enough to do.

[17:53] <[particle]> do we need it?

[17:54] <pmichaud> eventually we have to support non-string hash keys, yes.

[17:54] <[particle]> and Hash is a Set of Pairs?

[17:55] <pmichaud> conceptually, yes.  But we want to make sure that hash lookups continue to be efficient.

[17:55] <moritz_> there's a method for providing a string that can be used for hashing

[17:55] <[particle]> that's what pmc->cache is for

[17:55] <moritz_> one of the .HSOMETHING methods

[17:56] <cjfields> at the moment, %x.pairs.sort is broken

[17:56] <cjfields> but the following works:

[17:56] <pmurias_> ruoso: got an answer from #haskell how to link libsmop.so with pugs

[17:56] <cjfields> %hash.pairs.sort({ $^a.key cmp $^b.key || $^a.value  $^b.value })

[17:56] <pmichaud> we probably need to define 'cmp' on Pairs

[17:57] <moritz_> pmichaud: yes, I wrote a TODO RT for that

[17:57] <pmurias_> ruoso: do we need the RootNamespace once we have a lexical prelude?

[18:00] <ahmadz> hi

[18:01] <moritz_> hi

[18:02] <ahmadz> how r u moritz?

[18:02] <moritz_> hacking ;)

[18:02] <ahmadz> do u remember me?

[18:02] <moritz_> dimly

[18:03] <ahmadz> runpugs

[18:03] <moritz_> ah

[18:03] <ahmadz> so what's new? ;-) i've hibernating for 10 months

[18:04] <moritz_> audreyt announced that she'll be hacking pugs again once ghc6.10.1 is out

[18:04] <moritz_> and already cleaned up the build process

[18:04] <pmurias_> fixed

[18:04] <ahmadz> moritz: great

[18:04] <ahmadz> so where can i help? ;-)

[18:04] <pmurias_> the build process still isn't pretty ;)

[18:05] <moritz_> ahmadz: the test suite needs constant attention

[18:05] <moritz_> ahmadz: and I guess pugs does too, but I'm not qualified to recommend anything in that direction

[18:05] <pmurias_> ahmadz: what do you want to hack in?

[18:06] <ahmadz> test suite seems fine for a start

[18:06] <moritz_> there's t/TASKS which is a long (but not comprehensive) list of things that needs to be done

[18:07] <ahmadz> logging in to feather... ;-)

[18:07] <ruoso> pmurias, the RootNamespace is the global thingy... it's not subject to lexical scopes...

[18:07] <ruoso> although globals are mosly neglected in p6, they still exist...

[18:08] <ruoso> we'll need a strong effort to make people use context vars on the places they're used to use globals

[18:09] <ruoso> pmurias, about embedding smop in haskell... does that mean you know how to do it? :)

[18:09] <pmurias_> yes

[18:09] *** pmurias_ left
[18:09] *** pmurias left
[18:09] *** pmurias joined
[18:09] <ruoso> :)

[18:10] <rakudo_svn> r31368 | pmichaud++ | [rakudo]: spectest-progress.csv update: 167 files, 3434 passing tests

[18:10] <ruoso> pmurias, considering smop would be embedded, do you think it would be easier to create a mold in runtime and run it?

[18:10] <ruoso> without the need for a bytecode format and stuff..

[18:10] <pmurias> easier than?

[18:11] *** rafl joined
[18:11] <ruoso> easier then dlopen

[18:11] <Lorn_> moritz_: hi, where is this tests? pugs/t ? 

[18:11] <moritz_> Lorn_: TASKS? yes

[18:11] <pmurias> i have simple smop embedding in haskell (smop/haskell_ffi_bindings) already done

[18:12] <Lorn_> moritz_: ok, thanks

[18:12] <ruoso> pmurias, if I get it right, you just need 1) a haskell data structure that represents smop mold and 2) converting that data structure to the actual mold...

[18:13] <ruoso> and 3) running the mold (which I think is the easiest)

[18:15] <pmurias> i'll try to create the mold with SMOP_DISPATCH and the functions to create native types

[18:15] <ruoso> pmurias, I'm not sure it will be easier to do it with SMOP_DISPATCH, since you'll need to create more captures...

[18:15] <ruoso> it's probably better to special case Mold and Mold Frame

[18:16] <ruoso> and just use it directly...

[18:16] <pmurias> calling smop from haskell is easier than from C

[18:16] <ruoso> heh... how so?

[18:16] <pmurias> once you have the bindings that is

[18:17] <pmurias> haskell is a smarter language than C so you don't have the syntactic clutter

[18:18] <ruoso> ah... right... sure..

[18:18] <ruoso> :)

[18:22] <ruoso> pmurias, is the binding only the thing in ffi.hs?

[18:22] <ruoso> or is there something else?

[18:23] <ahmadz> where can i find ghc 6.8.x on feather3?

[18:23] <moritz_> $ which ghc6

[18:23] <moritz_> /usr/bin/ghc6

[18:23] <moritz_> oh wait...

[18:23] <moritz_> that's probably feather1

[18:24] <ahmadz> ghc --version -> 6.6.1

[18:24] <moritz_> that seems fairly out-of-date

[18:24] * ruoso fail entirely to parse haskell code...

[18:25] <moritz_> you need somebody with root access to do an upgrade

[18:25] <moritz_> (I'm only root on feather1)

[18:26] <ahmadz> but i can install it as user on my home directory right?

[18:26] <moritz_> you can, but I think an upgrade would be preferrable

[18:26] <moritz_> since no recent version of pugs compiles with ghc6.6.1 it's pretty pointless to have it

[18:30] <ahmadz> moritz: im a sudo-er on feather3, does that help?

[18:30] <moritz_> ahmadz: yes.

[18:30] <moritz_> ahmadz: sudo aptitude update

[18:30] <moritz_> ahmadz: sudo aptitude upgrade

[18:30] <pmurias> ruoso: there is also smop_haskell_ffi.c to wrap around macros

[18:30] <moritz_> sit back and wait...

[18:30] <ruoso> pmurias, if I read the ffi.hs code right... you're few steps from creating a mold object

[18:31] <ahmadz> moritz: thx

[18:31] <pmurias> ruoso: yes

[18:31] <moritz_> ahmadz: beware, if it's a largish update it might break things a bit

[18:31] <pmurias> i'm hooking the ffi.hs into Pugs now

[18:32] <ahmadz> moritz: not a lot of pkgs upgraded...

[18:32] <pmurias> ruoso: if you want to help with that you can add a .new to Mold and MoldFrame

[18:32] <ruoso> receiving arrays?

[18:32] <araujo> pmurias, ffi.hs ? .... a foreign interface between perl6 and haskell .. org ?

[18:33] <ruoso> araujo, worse than that... a ffi between pugs and smop ;)

[18:33] <moritz_> ahmadz: please do a 'grep deb /etc/apt/sources.list' and nopaste the output somewhere

[18:33] <ruoso> between p6 and p6

[18:33] <ruoso> heh

[18:33] <araujo> ruoso, aaah

[18:34] <ahmadz> moritz: will do in a min once upgrade is done

[18:35] <ruoso> pmurias, I'm kinda convinced it's better to create the Mold directly from C

[18:35] <pmurias> maybe

[18:35] <ruoso> pmurias, because I'll have to recurse into the C stack to traverse the array

[18:36] <ruoso> so it represents no effective gain, and will only work with the SMOP__S1P__Array implementation

[18:36] <ruoso> I think it would be better to implement it in high-level after typesystem bootstrap

[18:36] <pmurias> ok

[18:37] <ruoso> mold frame otoh makes sense to have a high-level "new"

[18:38] <ruoso> since it receives just a single positional argument

[18:38] <ahmadz> @moritz

[18:38] <lambdabot> Unknown command, try @list

[18:39] <ruoso> er... pmurias, mold frame already has .new...

[18:39] <ruoso> :P

[18:39] <pmurias> good ;)

[18:44] *** eternaleye left
[18:50] *** braceta_ left
[18:52] *** eternaleye joined
[18:58] *** cotto_work left
[18:58] *** baest left
[18:58] *** baest_ joined
[19:08] *** baest joined
[19:11] *** jovs joined
[19:13] <pmurias> ruoso: the bindings do not work when used from pugs, constant identifiers get mangled so maybe going through bytecode is saner

[19:14] *** clintongormley left
[19:21] *** baest_ left
[19:36] *** cjfields left
[19:42] <ruoso> pmurias, what do you mean by "constant identifiers get mangled"?

[19:43] *** eternaleye left
[19:49] <Lorn_> w/in 14

[19:52] *** TJCRI left
[20:05] <pmurias> ruoso: ___UNKNOW__METHOD___ dies instead of postcircumfix:{ } being called

[20:05] <ruoso> hmm...

[20:06] * ruoso later &

[20:06] *** ruoso left
[20:10] <ahmadz> How do i get past Cabal's "Cannot install zlib: 256" after "perl Makefile.PL"?

[20:11] <moritz_> ahmadz: did you install it manually, as described in pugs' INSTALL?

[20:11] *** abra left
[20:11] <ahmadz> moritz: yeah

[20:12] <moritz_> that's weird - if zlib is installed, why does it complain about not being able to install it?

[20:13] <ahmadz> moritz: i have an old pugs svn tree that i recently updated... i removed ~/.cabal and ~/.ghc

[20:13] <moritz_> ahmadz: did you also do a 'make realclean'?

[20:14] <ahmadz> "No rule..." error

[20:14] <moritz_> fun.

[20:19] *** jovs left
[20:22] <pasteling> "ahmadz" at 212.38.136.170 pasted "Build error" (32 lines, 2K) at http://sial.org/pbot/32295

[20:23] <ahmadz> moritz: Cleaned up ~/.cabal and ~/.ghc then perl Makefile.PL (i made sure that svn status returned nothing)

[20:24] <pmurias> @tell ruoso it turned out to be a typo with SMOP__NATIVE__idconst_create being used instead SMOP__NATIVE__idconst_createn

[20:24] <lambdabot> Consider it noted.

[20:25] *** |jedai| joined
[20:33] <pugs_svn> r22321 | pmurias++ | [pugs] start of embedding smop in pugs (disabled by default)

[20:39] <moritz_> rakudo: if 2 == any(1, 2, 3) { say "yes" } else { say "no" 

[20:39] <p6eval> rakudo 31370: OUTPUT[Missing '}' at line 1, near ""␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[20:39] <moritz_> rakudo: if 2 == any(1, 2, 3) { say "yes" } else { say "no" }

[20:39] <p6eval> rakudo 31370: OUTPUT[yes␤]

[20:41] *** Jedai left
[20:42] *** cjfields_ joined
[20:45] *** iblechbot left
[21:07] <pmurias> ahmadz: svn status --no-ignore

[21:10] <ahmadz> pmurias: thx, will try it now

[21:14] <moritz_> rakudo: my %h = (a => 1); say %h.pairs[0].value.WHAT

[21:14] <p6eval> rakudo 31371: OUTPUT[Int␤]

[21:14] <moritz_> rakudo: my %h = (a => 1); say %h.pairs[0].key.WHAT

[21:15] <p6eval> rakudo 31371: OUTPUT[Str␤]

[21:16] <moritz_> rakudo: my %h = (a => [1, 2, 3]); say %h.pairs[0].value.WHAT

[21:16] <p6eval> rakudo 31371: OUTPUT[Array␤]

[21:18] <cjfields_> rakudo: perl6: my %x=(('a' => 1, 'b' => 2), 'c' => { say 'foo'}, /\d/ => 3); for %x.pairs -> $y {say $y.WHAT; say $y.key.WHAT; say $y.value.WHAT; say}

[21:18] <p6eval> rakudo 31371: OUTPUT[Statement not terminated properly at line 1, near ": my %x=(("␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[21:19] <cjfields_> rakudo: my %x=(('a' => 1, 'b' => 2), 'c' => { say 'foo'}, /\d/ => 3); for %x.pairs -> $y {say $y.WHAT; say $y.key.WHAT; say $y.value.WHAT; say}

[21:19] <p6eval> rakudo 31371: OUTPUT[Pair␤Str␤Int␤␤Pair␤Str␤Int␤␤Pair␤Str␤Int␤␤Pair␤Str␤Block␤␤]

[21:19] <cjfields_> The key is always a Str

[21:19] *** cjfields_ is now known as cjfields

[21:20] <cjfields> pugs:  my %x=(('a' => 1, 'b' => 2), 'c' => { say 'foo'}, /\d/ => 3); for %x.pairs -> $y {say $y.WHAT; say $y.key.WHAT; say $y.value.WHAT; say}

[21:20] <p6eval> pugs: OUTPUT[Pair::HashSlice␤Str␤Block␤␤Pair::HashSlice␤Str␤Int␤␤Pair::HashSlice␤Str␤Int␤␤Pair::HashSlice␤Str␤Int␤␤]

[21:21] <cjfields> Same with pugs (hash pair order is different)

[21:22] <moritz_> cjfields: that's because you cast to a Hash

[21:23] <moritz_> rakudo: say (/a/ => 1).key.WHAT

[21:23] <p6eval> rakudo 31371: OUTPUT[Block␤]

[21:23] <moritz_> without building a hash it works fine

[21:34] *** justatheory left
[21:34] <pugs_svn> r22322 | moritz++ | [t/spec] added tests for transliteration with closures on the RHS

[21:35] <moritz_> cjfields: now there are some basic tests in t/spec/S05-transliteration/with-closure.t

[21:35] *** hercynium left
[21:36] <pugs_svn> r22323 | moritz++ | [t/spec] added missing closing bracket

[21:36] <moritz_> now rakudo can even parse it ;)

[21:38] <ahmadz> @tell Juerd feather3 is using sid now and ghc 6.8.2 is there

[21:38] <lambdabot> Consider it noted.

[21:39] <ahmadz> moritz: im still sucks at 'perl Makefile.PL' and that zlib error

[21:39] <moritz_> ahmadz: I'm afraid I can't help you with that one :(

[21:40] <moritz_> maybe you can ask the haskell crowd on how to check if a module is correctly installed

[21:41] <ahmadz> moritz_:  'ghc-pkg list'

[21:41] *** jhorwitz left
[21:42] <ahmadz> moritz_: and zlib is not there

[21:42] <Juerd> @messages

[21:42] <lambdabot> ahmadz said 3m 59s ago: feather3 is using sid now and ghc 6.8.2 is there

[21:42] <Juerd> Okay, thanks :)

[21:43] <ahmadz> np

[21:43] <pmurias> ahmadz: did you install zlib in ~/.cabal or in a system wide dir?

[21:43] <ahmadz> ~/.cabal

[21:43] <moritz_> ghc-pkg tries both locations

[21:44] <pmurias> it finds it in both places here

[21:45] *** pmurias left
[21:53] *** Schwern left
[22:00] <ahmadz> finally solved it [clumsy me ;-)]

[22:01] <moritz_> so what's the magic formula?

[22:01] <ahmadz> PATH

[22:01] <ahmadz> GHC-6.6 is used in /usr/local instead of /usr/bin

[22:01] <ahmadz> even if you set the GHC env var

[22:03] <ahmadz> should we remove the old 6.6 from feather?

[22:06] *** cjfields left
[22:06] <ahmadz> moritz_: should we remove the old 6.6 from feather just in case?

[22:07] <moritz_> ahmadz: dunno

[22:10] <Juerd> Please do NOT deviate from debian's ghc

[22:11] <Juerd> If you must install a different version, do so outside of $PATH, and let people decide for themselves if they want it.

[22:11] <ahmadz> agreed

[22:11] *** Lorn_ is now known as Lorn

[22:22] *** hercynium joined
[22:35] <pugs_svn> r22324 | moritz++ | [t/spec] some test fiddling with $x.stuff and isa_ok()

[22:37] <pugs_svn> r22325 | moritz++ | [t/spec] removed bogus test from charset.t

[22:44] *** hercynium left
[22:46] <ahmadz> Juerd: ?

[22:47] <Juerd> Yes?

[22:47] <ahmadz> I need Task::Smoke in feather1

[22:48] <ahmadz> plz ;-)

[22:48] <moritz_> I should be able to do that

[22:48] <ahmadz> moritz_: gr8

[22:50] <Juerd> http://cpandeps.cantrell.org.uk/?module=Task%3A%3ASmoke&perl=any+version&os=any+OS

[22:50] <Juerd> But... done.

[22:50] <moritz_> ahmadz: I guess you need only its dependencies?

[22:50] <moritz_> Juerd: I was about to install the debian packages of those deps

[22:51] <Juerd> Pointless. All debianized perl modules are installed, except those conflicting.

[22:51] <moritz_> libpetal-utils-perl wasn't ;-)

[22:51] <Juerd> Might be a very recent module then

[22:52] <ahmadz> perfect, smoke is running now... thx

[22:53] *** xiaoyafeng left
[22:53] *** xiaoyafeng joined
[22:55] <pugs_svn> r22326 | moritz++ | [t/spec] fudged chained-declarators.t

[22:59] <pugs_svn> r22327 | moritz++ | [t/spec] fudged S29-array/elems.t for rakudo

[23:05] <rakudo_svn> r31374 | moritz++ | [rakudo] 5 more test files for spectest_regression

[23:06] <pugs_svn> r22328 | moritz++ | [t/spec] fudged char-by-number.t

[23:08] *** silug left
[23:08] <pugs_svn> r22329 | moritz++ | [t/spec] pos.t fudged for rakudo

[23:11] *** xiaoyafeng left
[23:11] <pugs_svn> r22330 | moritz++ | [t/spec] deleted bogus syntax test

[23:18] <rakudo_svn> r31376 | moritz++ | [rakudo] three more tests for spectest_regression

[23:27] *** Lorn left
[23:43] *** justatheory joined
[23:53] *** Exodist left
[23:53] *** Exodist joined
[23:57] *** smg left
