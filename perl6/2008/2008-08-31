[00:01] *** awwaiid left
[00:05] *** kanru joined
[00:07] *** ting joined
[00:10] *** elmex left
[00:16] *** Caelum left
[00:18] *** sri_work left
[00:22] *** hercynium joined
[00:25] *** dduncan left
[00:34] *** Caelum joined
[00:43] *** Limbic_Region joined
[00:48] *** drbean left
[00:54] *** cmdl1n3 left
[01:21] *** eternaleye joined
[01:35] *** Auzon joined
[01:39] *** [particle] joined
[03:05] *** literal joined
[03:17] *** aindilis2 joined
[03:39] *** hercynium left
[03:39] *** alanhaggai__ is now known as alanhaggai

[03:42] *** sail0r joined
[03:50] *** spinclad left
[03:51] *** bacek_ joined
[03:52] *** bacek_ left
[03:54] *** Myoma left
[04:20] *** Limbic_Region left
[04:48] *** BinGOs left
[04:48] *** BinGOs joined
[04:54] *** BinGOs_ joined
[05:05] *** BinGOs_ left
[05:07] *** BinGOs left
[05:16] *** yahooooo left
[05:16] *** xuser joined
[05:27] *** Psyche^ joined
[05:36] *** sail0r left
[05:39] *** alanhaggai_ joined
[05:40] *** Patterner left
[05:40] *** Psyche^ is now known as Patterner

[05:41] *** alanhaggai left
[05:41] *** alanhaggai_ is now known as alanhaggai

[06:13] *** REPLeffect left
[06:41] *** Ehtyar left
[07:00] *** Jedai left
[07:03] *** Myoma joined
[07:37] *** abra joined
[07:46] *** iblechbot joined
[07:50] *** BinGOs joined
[07:55] *** zamolxes joined
[08:02] *** barney joined
[08:37] *** kowey joined
[08:42] *** pmurias joined
[08:44] *** Myoma left
[08:56] *** abra left
[09:05] *** masak joined
[09:30] *** rff joined
[09:31] *** iblechbot_ joined
[09:36] *** barney left
[09:41] *** elmex joined
[09:45] *** iblechbot left
[09:51] *** cmdl1n3 joined
[10:06] *** rff left
[10:07] *** rff joined
[10:17] *** jferrero joined
[10:20] *** pmurias left
[10:35] <masak> perl6: sub f($l) { $l <= 0 ?? '' !! map { $l ~ f($l-1) }, 1..3 }; f(2)

[10:35] <p6eval> pugs: RESULT[("21 1 1", "21 1 1", "21 1 1")]

[10:35] <p6eval> ..rakudo 30669: OUTPUT[maximum recursion depth exceeded␤current instr.: 'f' pc 179 (EVAL_17:69)␤]

[10:35] <p6eval> ..elf 22078: OUTPUT[Unknown rule: infix:conditional␤It needs to be added to ast_handlers.␤ at ./elf_f line 1918␤]

[10:42] <masak> perl6: sub f($l) { $l ?? 0 !! join ''. map { $l ~ f($l-1) }, 1..3 }; f(2)

[10:42] <p6eval> rakudo 30669: OUTPUT[Statement not terminated properly at line 1, near ". map { $l"␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[10:42] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected " map"␤    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript␤    at /tmp/hKwRQDZvZR line 1, column 32␤]

[10:42] <p6eval> ..elf 22078: OUTPUT[Parse error in: /tmp/T7jpRrFX0B␤panic at line 1 column 12 (pos 12): Missing right brace␤WHERE: sub f($l) { $l ?? 0 !! join ''. map { $l ~␤WHERE:            /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤  STD_red/std.rb:242:in `block in

[10:42] <p6eval> ..block'...

[10:43] <masak> perl6: sub f($l) { $l ?? 0 !! join '', map { $l ~ f($l-1) }, 1..3 }; f(2)

[10:43] <p6eval> elf 22078: OUTPUT[Unknown rule: infix:conditional␤It needs to be added to ast_handlers.␤ at ./elf_f line 1918␤]

[10:43] <p6eval> ..pugs, rakudo 30669: RESULT[0]

[10:50] *** eternaleye left
[10:51] *** rff left
[10:56] *** sri_work joined
[10:57] *** sri_work left
[10:57] *** sri_work joined
[11:04] *** xinming joined
[11:10] *** alanhaggai left
[11:13] *** xinming__ joined
[11:17] *** tessier__ joined
[11:17] *** xinming_ left
[11:18] *** tessier_ left
[11:25] *** xinming left
[12:27] *** ruoso joined
[12:27] *** alc joined
[12:31] *** abra joined
[12:32] *** iblechbot_ left
[12:37] *** Lichtkind joined
[12:45] *** kcwu left
[12:47] *** drbean joined
[13:08] <ruoso> Hello!

[13:13] *** xinming__ left
[13:16] *** xinming joined
[13:17] *** kcwu joined
[13:23] <masak> ruoso: greetings.

[13:23] *** hareldvd joined
[13:37] *** alanhaggai joined
[13:38] *** rindolf joined
[13:45] *** pmurias joined
[13:45] <pmurias> ruoso: Hi!

[13:46] <ruoso> hi masak, pmurias...

[13:46] <masak> slow Perl 6 day today.

[13:47] <masak> on #parrot too :/

[13:48] * ruoso getting some documentation up-to-date in a $work related projet

[13:48] * masak hacking away on the new HTML::Template, but mostly blocking on a Parrot bug

[13:50] <ruoso> pmurias, so.. what do you think about the capture expand thing?

[13:51] <pmurias> getting round to reading it&

[13:52] <pmurias> ruoso: i'm not sure if's better to do a proxy object instead of just merging captures

[13:53] * ruoso too ;)

[13:53] <ruoso> that's why I'm asking for other opinions... ;)

[13:54] <pmurias> most of the time captures will be IMHO small 

[13:54] <pmurias> so it might be faster to just merge them

[13:56] <ruoso> pmurias, would you like to write the p6 code that would do the merging?

[13:59] <pmurias> plus native captures are expected in a lot of places

[13:59] <pmurias> ruoso: what is simpler for you to implement?

[14:00] <pmurias> ruoso: have to some other $stuff first, i was away on a windsurfing camp this week 

[14:00] * pmurias tends to have less free time on weekends

[14:00] <ruoso> pmurias, I think keeping native captures is nice, although we have to deal with that some time...

[14:00] <ruoso> I was thinking on taking the "for" implementation

[14:01] *** hareldvd left
[14:01] <pmurias> i think kp6 implemented for in terms of map

[14:03] <ruoso> pmurias, "for" is actually simple... I just need to ask for .arity of the signature of the code and use the iterator api

[14:03] *** hercynium joined
[14:03] <pmurias> ruoso: you mean "map"?

[14:03] <ruoso> I understand prefix:<=> takes the next element... but I don't see how prefix:<=> will signalize the end of the iteration..

[14:04] <ruoso> pmurias, no... I did mean 'for'...

[14:07] <ruoso> s/prefix:<=> takes/prefix:<=> returns/

[14:10] *** Lorn left
[14:10] <pmurias> hm, for =$iterator {...} is possible, as prefix:<=> returns a lazy list in list context

[14:12] <pmurias> we can turn for @array {...} into @array.map(-> {...})

[14:14] <ruoso> hmmm

[14:14] <ruoso> but for @array is also lazy...

[14:14] <ruoso> I mean...

[14:14] <ruoso> if @array is lazy, obviously...

[14:15] <masak> does the evaluation of a for result in a value?

[14:15] <ruoso> but I was thinking on 'for' in terms of while ($value.has_next) { $code.($value.next) }

[14:15] <ruoso> masak, I don't think so...

[14:16] <masak> so you have to hide that as well. probably not too difficult, though.

[14:16] <pmurias> pugs: my @array = for (1,2,3) {$_};

[14:16] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "@array"␤    expecting "=", context, ":" or "("␤    postfix op␤    at /tmp/kT0buKHxVU line 1, column 4␤]

[14:17] <pmurias> masak: for is not an expression

[14:17] <masak> right. but map is.

[14:17] <pmurias> yes

[14:17] <masak> so there's a bit of an impedence mismatch.

[14:17] <pmurias> no

[14:18] <masak> ...in the sense that a for build on top of a map has to hide the value returned from the map

[14:18] <pmurias> no

[14:18] <masak> ok :)

[14:18] <pmurias> we have void context

[14:18] <masak> ah. ok.

[14:20] <pmurias> ruoso: iterators are just a less powerfull version of lists, so if you have a (lazy) list there is no point in treating it as one

[14:21] <ruoso> as a list you mean... you can treat it only as an iterator...

[14:21] <ruoso> and that's my plan...

[14:22] <ruoso> I mean...

[14:22] <ruoso> in the end I have two options...

[14:23] <ruoso> "for" might start with .[0] and end in the last element...

[14:23] <ruoso> and the other is having an iterator-like api

[14:23] <ruoso> which is .has_next and .next

[14:23] <ruoso> the reason I'm trying to push towards an iterator-like API

[14:24] <ruoso> is to allow navigating in iterators that are not representing index-oriented lists... or unordered lists...

[14:24] <ruoso> or streams...

[14:24] <ruoso> for instance...

[14:24] <ruoso> BerkeleyDB loses a lot of its efficiency if you have to support index-based access

[14:25] <ruoso> it's much more efficient when you have a cursor-based access...

[14:25] <ruoso> that's what I mean...

[14:26] *** rindolf left
[14:27] <pmurias> if we implemnt for as .map we still get the efficiency, and it's the simplest way

[14:29] <pmurias> as we have to implement .map anyway

[14:29] *** hercynium left
[14:29] <ruoso> right... 

[14:30] <ruoso> but anyway... that doesn't answer my question...

[14:30] <ruoso> .map needs to iterate the list anyway...

[14:30] <ruoso> ah...

[14:30] <ruoso> wait...

[14:30] <ruoso> map is implemented by the list itself...

[14:30] <ruoso> now I got it...

[14:30] <ruoso> it's easier...

[14:34] *** abra left
[14:34] <ruoso> pmurias++... I've just updated the roadmap... now we need unshift, grep and map in the list

[14:34] <ruoso> and for is just a call to .map

[14:35] <ruoso> pmurias, but...

[14:35] <ruoso> map is supposed to be lazy, isn't it?

[14:38] <ruoso> for is supposed to evaluate each item eagerly, isn't it?

[14:38] <ruoso> I mean...

[14:38] <ruoso> it won't expand the list before...

[14:39] <ruoso> but it will execute immediately the code block for every item..

[14:39] <ruoso> while map will only evaluate the block as the returned array is traversed...

[14:40] <ruoso> so that 'map { } grep { } map { } @foo' work as expected

[14:42] <ruoso> I even think that Perl 6 should warn about "useless use of map in void context..."

[14:43] <ruoso> to be clear that map is lazy

[14:44] *** jan_ left
[14:44] <pmurias> pugs: my @foo=(1,2,3,4);@foo.map(-> { say $_});

[14:44] <p6eval> pugs: OUTPUT[␤␤␤␤]

[14:44] <pmurias> pugs: my @foo=(1,2,3,4);@foo.map(->($arg) { say $arg});

[14:44] <p6eval> pugs: OUTPUT[1␤2␤3␤4␤]

[14:44] <pmurias> pugs: my @foo=(1,2,3,4);my @bar = @foo.map(->($arg) { say $arg});

[14:44] <p6eval> pugs: OUTPUT[1␤2␤3␤4␤]

[14:46] <ruoso> pugs: my @foo = (1,2,3,4); @foo.map(->($arg) { say $arg }); 'the last statement is returned...'

[14:46] <p6eval> pugs: OUTPUT[1␤2␤3␤4␤]

[14:46] <pmurias> pugs: my @foo=(1,2,3,4);my @bar = @foo.map(->($arg) { say $arg});'last'

[14:46] <p6eval> pugs: OUTPUT[1␤2␤3␤4␤]

[14:47] <pmurias> pugs might be wrong here

[14:48] <ruoso> I think it is...

[14:48] <pmurias> TimToady: does map in void context run the block at all?

[14:49] <pmurias> we can always use "eager @array.map {...}"

[14:50] <ruoso> eager simply iterates the list...

[14:51] <ruoso> causing the lazy list to be evaluated...

[14:51] <ruoso> which brings us to the same problem...

[14:51] <pmurias> all the code blocks will be executed

[14:51] <ruoso> OTOH... I could argue that "for" could be part of the Array API

[14:51] <ruoso> Array.for($code)

[14:52] <masak> pmurias++, ruoso++ # doing cool nitty-gritty stuff

[14:52] <ruoso> pmurias, the problem is how to iterate some list...

[14:53] <pmurias> using iterators you mean?

[14:53] <ruoso> yes...

[14:54] <ruoso> but... I think including .for in the Array API is a very much interesting option...

[14:55] *** jan_ joined
[14:58] <pmurias> ruoso: i don't now how to get the iterator for a list, iterators are barely specced and probably not encouraged in Perl 6

[14:58] <ruoso> pmurias, yeah... but I'm now convinced "for" should be a method of the Array API

[14:58] <ruoso> ;)

[14:59] <ruoso> and bare "for" is a global sub...

[15:00] <pmurias> a bare for can be just translated to a method call

[15:01] <ruoso> yeah... it's probably better, since it has a special syntax

[15:03] *** aindilis left
[15:03] * pmurias hates multi tasking, as he ends up doing one thing with half the brain power

[15:04] * ruoso out to by drinks for lunch...

[15:04] *** aindilis2 left
[15:05] *** rindolf joined
[15:13] *** pmurias left
[15:25] *** masak left
[15:30] *** aindilis joined
[15:43] *** meppl joined
[15:50] *** rindolf left
[15:54] *** idemal joined
[16:00] *** abra joined
[16:17] *** iblechbot joined
[16:22] *** fronty__ joined
[16:23] *** fronty__ is now known as Front_slash

[16:39] *** rindolf joined
[17:13] *** Myoma joined
[17:34] *** broquaint left
[17:35] <Khisanth> pugs: my $foo = [ 1 .. 10 ]; say $foo[ 3 .. 8 ]

[17:35] <p6eval> pugs: OUTPUT[456789␤]

[17:35] <Khisanth> pugs: my $foo = [ 1 .. 10 ]; say $foo[ 3 .. 8 ].join( " " )

[17:35] <p6eval> pugs: OUTPUT[4 5 6 7 8 9␤]

[17:36] <Khisanth> pugs: my $foo = [ 1 .. 10 ]; say $foo[ 3 .. $foo.end ].join( " " )

[17:36] <p6eval> pugs: OUTPUT[4 5 6 7 8 9 10␤]

[17:38] *** preflex left
[17:39] *** broquaint joined
[17:53] *** preflex joined
[17:59] *** Front_slash left
[18:02] *** lambdabot left
[18:05] *** lambdabot joined
[18:09] <moritz_> re

[18:09] *** eternaleye joined
[18:10] *** ilbot2 left
[18:10] *** ilbot2 joined
[18:22] *** abra left
[18:30] <rakudo_svn> r30671 | moritz++ | [rakudo] Str.subst can take a closure as second argument

[18:30] <pugs_svn> r22079 | moritz++ | [t/spec] unfudge subst.t for rakudo

[18:33] *** cmdl1n3 left
[18:34] *** lambdabot left
[18:36] *** lambdabot joined
[18:43] *** alc left
[18:54] *** khisanth_ joined
[18:55] *** khisanth_ left
[19:00] *** [1]Maghnus joined
[19:10] *** kanru left
[19:15] *** alanhaggai left
[19:17] *** Maghnus left
[19:17] *** [1]Maghnus is now known as Maghnus

[19:19] <moritz_> @tell dr_df0 very nice work on the test suite. In future try to separate words in file names with '-', not with '_'; but that's just a minor nit

[19:19] <lambdabot> Consider it noted.

[19:22] *** rindolf left
[19:25] *** alester joined
[19:27] *** rindolf joined
[19:54] *** rindolf left
[19:59] *** rindolf joined
[20:18] *** shlomif joined
[20:21] *** rindolf left
[20:22] *** lambdabot left
[20:23] <moritz_> anyway, dr_df0++ # test suite work

[20:24] <rakudo_svn> r30672 | moritz++ | [rakudo] add 8 more files to spectest_regression, dr_df0++ and others++

[20:24] *** shlomif is now known as rindolf

[20:25] *** lambdabot joined
[20:51] *** alester left
[20:58] <moritz_> on the train today I a few more posts for my perl-5-to-6 blog

[20:59] <moritz_> and I now I have to restrain myself from publishing them all at once

[20:59] <moritz_> (but I know that I won't have the time to write enough this week)

[20:59] <moritz_> ;-)

[21:10] *** wknight8111 joined
[21:12] *** ibo2go joined
[21:13] *** kowey is now known as koweyphone

[21:18] *** Chillance joined
[22:16] *** wknight8111 left
[22:22] *** iblechbot left
[22:25] *** ibo2go left
[22:40] *** lambdabot left
[22:44] *** lambdabot joined
[22:48] *** BinGOs left
[22:58] *** koweyphone is now known as kowey

[23:04] *** explorer__ joined
[23:07] *** BinGOs joined
[23:09] *** explorer__ left
[23:19] *** Lichtkind left
[23:19] *** jfredett left
[23:21] *** jferrero left
[23:22] *** rindolf left
[23:26] *** _Chillance_ joined
[23:28] *** _Chillance_ left
[23:29] *** _Chillance_ joined
[23:37] *** kowey left
[23:40] *** lambdabot left
[23:42] *** lambdabot joined
[23:43] *** Chillance left
[23:54] <meppl> good night

[23:56] *** meppl left
