[00:17] *** explorer left
[00:21] *** eternaleye joined
[00:26] *** eternaleye_ joined
[00:27] *** alester joined
[00:29] *** eternaleye left
[00:31] *** eternaleye joined
[00:31] *** eternaleye_ left
[00:33] *** ruoso left
[00:48] *** tobeya left
[01:04] *** justatheory joined
[01:05] *** cnhackTNT joined
[01:10] *** justatheory left
[01:13] *** thoughtp1lice joined
[01:14] *** wtgee joined
[01:17] <pugs_svnbot> r20174 | lwall++ | [STD] removed whatever token which duped term:sym<*>

[01:17] <pugs_svnbot> r20174 | lwall++ | various warning suppressions and lexer simplifications

[01:17] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20174

[01:18] <lambdabot> Title: Changeset 20174 - Pugs - Trac

[01:28] *** jeffreykegler joined
[01:28] *** Chillance left
[01:31] *** thoughtpolice left
[01:47] *** dmq joined
[01:57] *** __dylan__ joined
[02:00] *** __dylan__ left
[02:20] *** Limbic_Region left
[02:22] *** marmic left
[02:23] *** marmic joined
[02:24] *** meppl left
[02:26] *** meppl joined
[02:30] *** alester left
[02:30] *** Khisanth left
[02:31] *** r0bby left
[02:32] *** Khisanth joined
[02:34] *** r0bby joined
[02:53] <meppl> good night

[02:56] *** meppl left
[03:06] *** alester joined
[03:09] *** wtgee left
[03:13] *** Lorn_ joined
[03:20] *** jeffreykegler left
[03:24] *** wknight8111 is now known as wknight-away

[03:40] *** FurnaceBoy left
[03:44] *** wknight-away left
[04:00] *** LazyJim left
[04:05] *** elmex_ joined
[04:19] *** elmex left
[04:20] *** wtgee joined
[04:53] *** mncharity left
[04:55] *** mncharity joined
[05:12] *** wtgee left
[05:21] *** syle joined
[05:22] <syle> request, can we keep c type syntax, perl6 is looking like ruby and other crap

[05:22] *** alc joined
[05:24] <syle> its never been hard to code perl having c/c++ background , now code is looking like some tcl language

[06:03] *** wtgee joined
[06:06] <Khisanth> that doesn't sound like a very compelling reason

[06:15] <spinclad> oh, hardly like tcl.  believe me, i know from tcl.

[06:16] <spinclad> (though Coke, over on #parrot, knows far better than me.)

[06:30] <syle> what are thoughts on parallel computing?

[06:36] *** r0bby left
[06:45] *** alester left
[06:49] *** r0bby joined
[06:51] *** wtgee left
[07:40] *** Aankhen`` joined
[07:47] *** lichtkind joined
[08:10] *** iblechbot joined
[08:13] *** marmic left
[08:20] *** meteorjay left
[08:36] *** wknight-away joined
[09:20] *** ruoso joined
[09:33] *** thoughtpolice joined
[09:44] *** thoughtp1lice left
[09:49] *** masak joined
[09:58] *** alc left
[10:11] *** [particle] left
[10:13] *** Aankh|Clone joined
[10:31] *** wknight-away left
[10:31] *** Aankhen`` left
[10:54] *** lidden joined
[11:08] *** lisppaste3 left
[11:11] *** iblechbot_ joined
[11:15] *** thoughtpolice left
[11:21] *** lisppaste3 joined
[11:21] *** pmurias joined
[11:21] <pmurias> mncharity: hi

[11:22] *** [particle] joined
[11:25] *** iblechbot left
[11:25] *** stevan_ left
[11:25] <pmurias> there seems to be a bug or a at  least strangeness with the Match objects dumped by STD_red_run

[11:26] <pmurias> the str field referes to the part of the string left instead of the orginal string

[11:27] <pmurias> implemented the string sharing code but i didn't commit it as it makes no sense with the current design

[11:34] *** Lorn left
[11:34] *** cnhackTNT left
[11:39] *** Lorn joined
[11:40] *** wknight8111 joined
[11:40] *** [particle1 joined
[11:44] *** xinming joined
[11:48] *** masak left
[11:50] *** xinming left
[11:51] *** xinming joined
[11:54] *** Foke2 joined
[11:54] *** wknight8111 is now known as wknight-away

[12:01] *** Lorn__ joined
[12:02] *** Lorn left
[12:09] *** Lorn__ left
[12:09] *** mj41 joined
[12:11] *** IllvilJa left
[12:15] *** masak joined
[12:16] *** Lorn joined
[12:27] *** LazyJim joined
[12:27] *** wknight-away left
[12:39] *** Lorn__ joined
[12:46] *** Lorn left
[12:49] *** r0bby left
[12:56] *** Foke2 left
[13:09] *** Lorn__ left
[13:11] *** pmurias left
[13:15] *** cmarcelo joined
[13:21] *** [particle] left
[13:22] *** Lorn joined
[13:23] *** zamolxes joined
[13:37] *** eternaleye left
[13:37] <cognominal_> TimToady:  %a = { key => @a }   # is a array (or hash) as a value is allowed in a hash composer? I suppose that in that position we don't expand it.

[13:48] <ruoso> cognominal_, I think it's a matter of precedence, and who enforces the context... if it's the pair who enforces item precedence on the array, or the array which is expanded before that...

[13:48] <ruoso> I would argue that => is of a higher precedence, and enforces item context on the array

[13:49] <ruoso> s/item precedence/item context/

[14:06] *** alester joined
[14:07] *** pmurias joined
[14:09] <alester> Who is Mitchell?

[14:09] <alester> http://www.rakudo.org/2008/03/perl-6-design-notes-for-19-mar.html

[14:09] <lambdabot> Title: Perl 6 Design Notes for 19 March 2008 - Rakudo.org

[14:13] <pmurias> mncharity

[14:14] <pmurias> Mitchell N Charity, known in commit messages as putter

[14:19] <alester> Never heard of him.

[14:21] *** gbacon joined
[14:27] <spinclad> he's working on 'elf' (another bootstrap project, p6 to p5/ruby, STD parser to a commonish AST) and project management of this herd of cats

[14:28] <spinclad> hang around here and you'll meet soon enough

[14:59] <alester> ok

[15:15] *** masak left
[15:16] *** Lorn left
[15:17] *** Lorn joined
[16:00] *** Aankh|Clone left
[16:01] *** cognominal_ left
[16:04] *** cognominal_ joined
[16:07] *** Aankhen`` joined
[16:12] *** marmic joined
[16:29] *** IllvilJa joined
[16:29] *** wtgee joined
[16:33] *** peeps[work] joined
[16:40] *** rdice joined
[16:46] *** Jamtech joined
[16:49] *** Student joined
[16:56] *** pmurias left
[16:57] *** Jamtech left
[17:10] *** Lorn_ left
[17:11] *** eternaleye joined
[17:11] *** Lorn_ joined
[17:13] *** Jamtech joined
[17:24] *** cognominal_ left
[17:25] *** revdiablo left
[17:26] *** lidden left
[17:36] <mncharity> pmurias: hi

[17:37] <mncharity> the str field refers to the part of the string matched by the Match, no?

[17:38] <mncharity> the alternative is, at least in yaml land, to have an on_str field, which points to the original string, with yaml taking care of making that a reference rather than a copy, and Match on the p5 side then recreating str, either when created or on demand.

[17:40] *** b_jonas joined
[17:40] *** cognominal_ joined
[17:40] <mncharity> for --dump5, the simplest thing might be to just do  my $on_str = ...;   match(...$on_str...etc...);

[17:41] <mncharity> then Match under elf_a and elf_b would have to be set up to derive str from on_str plu from and to.

[17:48] *** audreyt_ is now known as audreyt

[17:49] <mncharity> I may have just missed it, but what are we buying?  ie, what is the need (reducing --dump5 size?  is it a problem?); how much does the solution address it? (ie, what is the payoff - eg, 40x size of source -> 20x?).

[17:51] *** BinGOs joined
[17:54] *** Foke2 joined
[17:55] <mncharity> saw a nifty talk yesterday on programming using a continuous spacial fields abstraction over meshes (sensors, robots, articulators, whatever).  no link. :/  author of goo (language).  so much to do...

[18:05] *** pmurias joined
[18:06] <pmurias> mncharity: already coded that for --dump5

[18:07] <pmurias> i think the .str should refere to the whole string matched on

[18:07] <pmurias> * refer

[18:08] <pmurias> re coded, the dump not the reading in

[18:09] *** wtgee left
[18:11] <pmurias> it's possible to extract the part the string matched on using .from and .to

[18:15] *** Student left
[18:15] *** Student joined
[18:19] *** pmurias left
[18:28] *** ofer joined
[18:42] *** meppl joined
[19:02] *** Psyche^ joined
[19:04] *** ruoso left
[19:14] *** Patterner left
[19:14] *** Psyche^ is now known as Patterner

[19:17] *** lidden joined
[19:21] *** zamolxes left
[19:22] *** r0bby joined
[19:27] *** TJCRI joined
[19:36] *** Aankhen`` left
[19:38] *** barney joined
[19:46] *** rindolf joined
[19:56] *** [particle] joined
[20:00] <TimToady> j

[20:00] <[particle]> l

[20:02] *** syle left
[20:02] *** TJCRI left
[20:13] <PerlJam> i

[20:16] *** pmurias joined
[20:16] <b_jonas> k

[20:17] <kolibrie> h

[20:27] *** barney left
[20:37] *** explorer joined
[20:39] *** ruoso joined
[20:52] *** Jamtech left
[20:57] <diakopter> heh

[21:00] *** wknight-away joined
[21:11] *** LazyJim left
[21:12] *** LazyJim joined
[21:21] *** wknight-away is now known as wknight8111

[21:21] *** BinGOs_ joined
[21:35] <mncharity> lol

[21:35] <pugs_svnbot> r20175 | putter++ | [elf] elf_b can now create and describe IR trees.

[21:35] <pugs_svnbot> r20175 | putter++ | [STD_red] bugfix r20172 sigil escaping.

[21:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20175

[21:35] *** wknight8111 left
[21:35] <lambdabot> Title: Changeset 20175 - Pugs - Trac

[21:36] *** BinGOs left
[21:38] *** pmurias left
[21:41] <mncharity> elf_b next step is ir -> emit_p5.  when that works, we'll technically have a backend bootstrap - a compiler demonstrably capable of compiling its own backend (ie, everything but STD_red).

[21:42] *** rindolf left
[21:44] <mncharity> elf_b is tightly tied to elf_a.  so the step after that may be to use elf_a/b (while continuing to tweak them), to create elf_c, also a bootstrapped backend, but standalone and free of the "derived from elf_a" constraints and scary magic.

[21:48] *** Student left
[21:51] <mncharity> longterm question: does anyone know of a language which gives useful line numbers despite having macros?  one basically wants the whole macro expansion history, for every character position, available when describing errors.

[21:52] <b_jonas> mncharity: uh, the full macro expansion history? interesting

[21:53] <b_jonas> that would mean a quadratic stack trace

[21:53] <b_jonas> like

[21:53] <b_jonas> died: foo problem (FooException)

[21:53] <b_jonas> from functoin1 prog.ext line 1 char 2 (expanded from line 3 char 4, line 5 char 6, ...)

[21:54] <b_jonas> called from function2 ...

[21:54] <b_jonas> that would be huge

[21:54] <mncharity> yes

[21:54] <b_jonas> no, I don't know of anything like that

[21:55] <b_jonas> also, ask for implementation instead of language

[21:55] <b_jonas> because e.g. scheme implementations differ very much in how good error messages they give

[21:55] <b_jonas> (though they differ greatly in other things too, but still)

[21:56] <mncharity> but otherwise  if foo($x.bar) {} , where statement_control:if and foo are macros, easily results in macro expanded p6 code, and then in compiled runtime code, where the connection between some error and that line is... obscure.

[21:56] <mncharity> re implementation, good point

[21:57] <b_jonas> well, you could easily supress "system" libraries

[21:57] <b_jonas> even if that would actually mean gaps in the expansion line

[21:57] <b_jonas> that's not confusing for you can think macros in system libraries are primitives

[21:58] <b_jonas> obviously, they would be supressed only unless you set a certain compiler option

[21:59] <b_jonas> perhaps ask on #scheme or #lisp

[21:59] <b_jonas> because those are the languages that have macros

[21:59] <b_jonas> apart from the C preprocessor

[21:59] *** Jamtech joined
[22:00] <mncharity> the p6 prelude is rather unprivileged.  so what you are describing is the ability to elide info from particular modules.  which is a good idea, but doesn't make the issue go away...

[22:00] <b_jonas> yep

[22:00] <b_jonas> by "system", I meant like the "system" headers in C

[22:01] <b_jonas> so whatever claims itself to be system

[22:01] <b_jonas> and bug-free

[22:01] <mncharity> re scheme/lisp, yeah, and check on what dylan ended up doing.  2nd(?) meeting of the Boston Lisp Users Group on Monday. :)

[22:01] <b_jonas> what's the connection between dyland and boston list users group?

[22:01] <b_jonas> s/dyland/dylan/

[22:02] <b_jonas> which is dylan btw? is that that other language with builtin syntax for coroutine-based iterators?

[22:03] <mncharity> scheme/lisp ~~ dylan, and BLUG is an opportunity to ask a bunch of scheme/CL/dylan folks, including several implementers, for thoughts.

[22:03] <mncharity> re  dylan?,

[22:03] <mncharity> http://en.wikipedia.org/wiki/Dylan_programming_language

[22:03] <lambdabot> Title: Dylan (programming language) - Wikipedia, the free encyclopedia

[22:04] <b_jonas> that's not the one I was thinking than

[22:05] <b_jonas> what language was that then?

[22:05] <b_jonas> wait, it might be the same

[22:05] <b_jonas> ah, I remember this

[22:06] <b_jonas> I started to read the reference manual but stopped soon because it's so dry as a standard

[22:06] <b_jonas> even though I like reference manuals

[22:07] *** wknight8111 joined
[22:08] <b_jonas> I can't follow all these languages

[22:09] <b_jonas> but yes, dylan has iterator syntax too

[22:10] <b_jonas> just like python and ruby

[22:10] <b_jonas> smalltalk++ for popularizing iterators

[22:13] <mncharity> dylan was sort of an attempt to be CL/scheme-next-generation, and be java (in the 'next big-time computing language') sense of 'be java'.  so it has a lot of carefully thought about and documented ideas.  so it can be a useful thing to check when considering how to do X where X is something lispish.

[22:23] <b_jonas> I see

[22:35] *** rdice left
[22:37] *** [particle2 joined
[22:40] *** Khisanth left
[22:41] *** eternaleye left
[22:44] *** Jamtech left
[22:50] *** Khisanth joined
[22:54] <pugs_svnbot> r20176 | putter++ | [elf_b] Copy elf_a's emit_p5.config, for hand translation into p6.

[22:54] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20176

[22:54] <lambdabot> Title: Changeset 20176 - Pugs - Trac

[22:55] *** LazyJim left
[22:58] *** meppl left
[23:01] *** [particle] left
[23:03] *** dalek joined
[23:05] *** meppl joined
[23:07] *** BinGOs_ is now known as BinGOs

[23:12] *** b_jonas left
[23:13] *** mj41__ joined
[23:13] *** [particle2 left
[23:19] *** meppl left
[23:22] <mncharity> anyone know what the current terse form of self.foo() is?  at one point it was  ./foo() , but I'm not seeing that in the Snn

[23:24] *** dalek left
[23:25] *** dalek joined
[23:29] *** peeps[work] left
[23:30] *** mj41 left
[23:38] *** iblechbot_ left
[23:39] *** stevan_ joined
[23:39] <TimToady> you're looking for $.foo()

[23:39] <TimToady> or @.foo(), or %.foo()

[23:40] <TimToady> shorthand for %(self.foo) etc.

[23:41] <TimToady> the outer sigil doesn't have to match the attribute declaration, just be consistent with it

[23:41] <TimToady> (or the method declaration)

[23:42] <TimToady> $.foo() has the benefit of interpolating, unlike ./foo()

[23:42] *** ChanServ sets mode: +o diakopter

[23:42] *** diakopter sets mode: +o TimToady

[23:42] *** diakopter sets mode: -o diakopter

[23:43] *** r0bby left
[23:43] <TimToady> diakopter: thanks

[23:44] *** Zygo left
[23:44] *** Zygo joined
[23:49] <mncharity> ah, ok.  thanks

[23:50] *** r0bby joined
[23:51] <diakopter> Infinoid got a new svnbot running in #parrot

[23:51] <mncharity> it even parses (in STD_red), albeit as a subcall.

[23:52] <mncharity> extra features?

[23:53] *** eternaleye joined
