[00:05] *** namelessuser joined
[00:05] *** devogon left
[00:29] *** icwiener left
[00:29] *** cognominal_ joined
[00:30] *** cognominal__ joined
[00:31] *** cognominal_ left
[00:34] *** Auzon left
[00:40] *** __Ace__ left
[00:45] *** silug left
[00:49] *** pbuetow left
[00:50] *** pbuetow joined
[00:50] *** Limbic_Region joined
[00:57] *** ruoso left
[01:09] *** nipotaway is now known as nipotan

[01:13] *** silug joined
[01:26] *** pbuetow left
[01:29] *** kanru joined
[01:30] *** wtgee joined
[01:30] <meppl> good night

[01:31] *** Limbic_Region left
[01:35] *** meppl left
[01:44] *** blindfish left
[01:44] *** justatheory left
[01:53] *** DaGo left
[01:58] *** rando joined
[01:59] *** Southen_ joined
[02:12] *** cathyal left
[02:20] *** Southen left
[02:26] *** rando left
[02:35] *** wtgee left
[02:50] *** namelessuser left
[03:26] *** justatheory joined
[03:32] *** justatheory left
[03:46] *** jferrero left
[05:03] *** meteorjay joined
[05:11] *** peeps[work] joined
[06:04] *** nothingmuch left
[06:08] *** njbartlett_ left
[06:24] *** buubot left
[06:24] *** buubot joined
[06:42] *** aindilis left
[06:44] *** peeps[work] left
[06:46] *** alester left
[06:49] *** PerlJam joined
[06:55] *** nothingmuch joined
[06:55] *** devogon joined
[07:23] *** psapo left
[07:24] *** psapo joined
[07:30] *** jisom joined
[07:30] *** ludan left
[07:35] <pugs_svn> r19830 | moritz++ | [t] moved regex/from_perl6_rules/pos_modifier.t to S05-modifier/,

[07:35] <pugs_svn> r19830 | moritz++ | cleaned up POD, inserted fudge directives

[07:44] <pugs_svn> r19831 | moritz++ | spec/S05-modifier/pos.t: .pos is now $/.to

[07:44] *** BinGOs left
[08:06] *** BinGOs joined
[08:07] *** renormalist left
[08:16] *** Aankhen`` joined
[08:23] *** iblechbot joined
[08:25] *** cosimo joined
[08:32] *** Schwern joined
[08:49] *** cosimo left
[08:51] *** meppl joined
[08:51] *** meppel-san joined
[08:51] *** meppel-san left
[08:57] *** pravus left
[09:14] *** pravus joined
[09:42] *** pravus left
[09:44] *** pravus joined
[09:48] *** ruoso joined
[09:49] *** jisom left
[10:02] *** ebassi joined
[10:03] *** smtms left
[10:07] *** jeffreykegler joined
[10:08] *** IllvilJa left
[10:10] *** jeffreykegler left
[10:11] *** jeffreykegler joined
[10:14] *** jeffreykegler left
[10:18] *** smtms joined
[10:27] *** IllvilJa joined
[10:33] <ruoso> pugs: class Foo { method a { "a" } }; class Bar is Foo { sub a { "b" } }; my $a = Bar.new(); say $a.a;

[10:33] <exp_evalbot> OUTPUT[b␤]

[10:34] <ruoso> pugs: class Foo { method a { "a" } }; class Bar is Foo { sub a { "b" } method b { self.a } }; my $a = Bar.new(); say $a.b;

[10:34] <exp_evalbot> OUTPUT[b␤]

[10:34] *** meppl left
[10:34] <ruoso> is this correct? Method call vs. Subroutine call in S12 seems to imply otherwise

[10:40] <moritz_> pugs: class F { sub a {'a' }} say F.new.a

[10:40] <exp_evalbot> OUTPUT[a␤]

[10:49] <ruoso> in theory, class F { sub a { 'a'} } actually register "a" in *package* F, and not in class F. Which means that "a" is not part or the F prototype. That would make it unavailable to the method resolution, and when the calling fall back to sub dispatch, it would, as being inside package F, have "a" declared in the scope, and so it could be called.

[10:50] <ruoso> but the question is, when it converts the method notation to sub dispatch, does it takes the sub from the object's package? as p5 would, for instance...

[10:50] *** cognominal_ joined
[10:51] *** cognominal__ left
[10:51] <ruoso> pugs: class F { sub a { "a" } }; my $f = F.new(); $f.a; F::a();

[10:51] <exp_evalbot> RESULT["a"]

[10:51] <ruoso> pugs: class F { sub a { "a" } }; my $f = F.new(); say join ',', $f.a; F::a();

[10:51] <exp_evalbot> OUTPUT[a␤]

[10:51] <ruoso> pugs: class F { sub a { "a" } }; my $f = F.new(); say join ',', F::a();

[10:51] *** blindfish joined
[10:51] <exp_evalbot> OUTPUT[a␤]

[10:51] <ruoso> pugs: class F { sub a { "a" } }; my $f = F.new(); say join ',', $f.a;

[10:51] <exp_evalbot> OUTPUT[a␤]

[10:51] <ruoso> pugs: class F { sub a { "a" } }; my $f = F.new(); say join ',', $f.a, F::a();

[10:51] <exp_evalbot> OUTPUT[a,a␤]

[10:52] <Alias_> hmm

[10:53] <Alias_> I need to finish LetMeIn so moritz_ can use something other than commitbit :)

[10:54] <pugs_svn> r19832 | moritz++ | [irclog] fixed double logging of /topic changes

[10:54] *** rff_ joined
[10:54] <moritz_> Alias_: I'm not the only commitbit user, I guess ;)

[10:54] <Alias_> Well, there's some history there

[10:55] <Alias_> In the beginning, there was Insurrection

[10:55] <Alias_> Which I used to use on my open repository, and lots of people liked

[10:55] <Alias_> But was absolutely impossible to install

[10:55] <Alias_> So after much wailing and gnashing of teeth (Jesse|Audrey) made a clone of it

[10:56] <Alias_> Thus, commitbit

[10:56] <Alias_> A clone of insurrection based on Jifty

[10:56] <Alias_> Only problem for me is I can't ever seem to get Jifty installed EITHER

[10:56] <moritz_> lol

[10:56] <Alias_> So I've made ANOTHER clone, using absolutely as little code and modules as possible

[10:56] <Alias_> Simple cgi only

[10:57] <Alias_> No look and feel, so it works on my mobile phone crappy browser

[10:57] <Alias_> Or on Nintendo Wii, or in EVE Online, Second Life, et al

[10:57] <Alias_> http://svn.ali.as/

[10:57] <Alias_> And it only has one file, and 2 dependencies

[10:57] <Alias_> All of which are pure perl

[10:58] <Alias_> And it doesn't need a database...

[10:58] <Alias_> Just works directly off the .htpasswd file that svn uses natively

[10:58] <moritz_> cool

[10:58] <Alias_> It's just not quite polished enough to release :)

[11:17] *** agentzh joined
[11:18] *** nipotan is now known as nipotaway

[11:20] *** chris2 joined
[11:36] <ruoso> would $foo.^addmethod(...) be the same as $foo.WHAT.^addmethod(...) ?

[11:37] <moritz_> ruoso: did you see my remark about vienna.pm's winter of code?

[11:37] <ruoso> I did... thanks... I'm just thinking a little longer on what I'll do...

[11:38] <moritz_> ok

[11:38] <ruoso> if we consider $obj.HOW !=== $obj.WHAT.HOW, that is a way to add a method to that object instance only, which may be usefull, and make the runtime composition more natural

[11:41] <ruoso> that causes the protoobject to have the same representation as the object, which is certainly a good thing

[11:42] <ruoso> and probably a mandatory feature for autovivification to work

[11:44] *** kanru left
[11:48] *** kanru joined
[11:58] *** monomorph joined
[12:09] *** DarkWolf84 joined
[12:21] *** zamolxes joined
[12:26] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop_p6opaque_implementation

[12:26] <lambdabot> Title: SMOP p6opaque Implementation / Perl 6, http://tinyurl.com/2z5spt

[12:26] <ruoso> I now have an interesting design of the p6opaque structure

[12:27] <ruoso> the object and the protoobject have the same structure

[12:28] <ruoso> and I have an interesting feature which is that an object might be its own prototype, when runtime composition is made in it...

[12:28] *** rff_ left
[12:37] *** cosimo joined
[12:41] *** pbuetow joined
[13:33] *** cmarcelo joined
[13:50] *** alester joined
[13:53] *** alester left
[14:33] *** njbartlett joined
[14:46] *** kyrbe joined
[14:47] *** kyrbe left
[14:51] *** DarkWolf84 left
[14:53] <kolibrie> TimToady: I've misplaced a script called 'uni' which I believe you wrote (for looking up unicode characters).  Is it available somewhere?

[15:04] *** spx2 joined
[15:04] <spx2> does perl6 understand how to add arrays like vectors in R^n ?

[15:05] <moritz_> yes, with hyper ops

[15:05] <spx2> moritz_, is it possible in perl5 as well ?

[15:05] <moritz_> pugs: say (1, 2, 3 »+« 9, 8, 7).perl

[15:05] <exp_evalbot> OUTPUT[decodeUTF8': bad data: '\187'␤decodeUTF8': bad data: '\171'␤*** Hyper OP only works on lists␤    at /tmp/v1t3iHfJI2 line 1, column 5 - line 2, column 1␤]

[15:06] <spx2> what key is that ?

[15:06] <spx2> >> ?

[15:06] <moritz_> pugs: say (1, 2, 3 >>+<< 9, 8, 7).perl

[15:06] <exp_evalbot> OUTPUT[*** Hyper OP only works on lists␤    at /tmp/JYOE9uJQ7I line 1, column 5 - line 2, column 1␤]

[15:06] *** njbartlett left
[15:06] <moritz_> pugs: say ((1, 2, 3) >>+<< (9, 8, 7)).perl

[15:06] <exp_evalbot> OUTPUT[(10, 10, 10)␤]

[15:06] <pasteling> "rhr" at 65.94.10.253 pasted "kolibrie: uni" (20 lines, 450B) at http://sial.org/pbot/30217

[15:06] <moritz_> spx2: in p5 you can use PDL

[15:06] <spx2> cool !

[15:06] <spx2> moritz_, thanks

[15:07] <moritz_> spx2: you're welcome

[15:07] <spx2> moritz_, I was thinking of using this in some golf conding but seeing they have only perl 5.8.8 I think I'll have to abandon the ideea...

[15:07] <spx2> the dudes hosting the contest are totally deprecated

[15:07] <moritz_> not totally, 5.10 is only 2 month old

[15:07] <spx2> I'm sure if they would install perl6 all contests would be won by perl6 people ...

[15:08] <moritz_> with the small caveat that p6 isn't yet ready

[15:08] <kolibrie> rhr: thank you!

[15:08] <spx2> moritz_, yes I'm waiting for it for some time

[15:09] <moritz_> spx2: don't wait, help!

[15:09] <spx2> moritz_, theres a book on perl6 out on apress do you think it would be a good read/help ?

[15:09] <moritz_> spx2: there's "Perl 6 and Parrot Essentials", but it's outdated

[15:10] <spx2> moritz_, yes someone told me that here before and thats sad

[15:10] <moritz_> and there are the synopsis here: http://perlcabal.org/syn/

[15:10] <lambdabot> Title: Official Perl 6 Documentation

[15:10] <spx2> moritz_, its sad because the manual/docs arent always as friendly as a book is

[15:10] <moritz_> the book is now open source, you can update it if you want

[15:11] <moritz_> the perl6 parts are somewhere in docs/ in the pugs repository

[15:11] *** gbacon left
[15:12] <spx2> I haven't closely watched of perl6 development

[15:12] <spx2> and no offence

[15:12] <moritz_> 'course

[15:13] <spx2> but I have the feeling of total chaos and disorganised people ...

[15:13] <spx2> very smart but totally disorganised

[15:13] <spx2> moritz_, what do you think about this ?

[15:14] <moritz_> spx2: well, it's a volunteer's effort, you can't tell people what to do

[15:14] <moritz_> spx2: the parrot part of the development is backed by TPF and well organized

[15:14] <spx2> moritz_, yes but I heard from a friend that perl6 people have received serious funding recently 

[15:15] <moritz_> that's the parrot part, yes

[15:15] <moritz_> The Perl Foundation seems to think that parrot is the one and only way to implement perl 6

[15:15] <moritz_> and I agree that it is likely to be successfull, but that diversity is also a good thing

[15:16] <spx2> diversity=>work dispersed across several directions leading to same things done differently

[15:16] <spx2> coagulation of work=>faster development of perl6

[15:17] <spx2> coagulation of work=>good estimates of when perl6 will be out

[15:17] <spx2> and we all want perl6 out !

[15:17] <moritz_> pugs proved that wrong

[15:17] <spx2> moritz_, how did it prove it wrong ?

[15:17] <moritz_> you can't spec a language without developing it

[15:18] <spx2> can't all the people work on the same stuff ?

[15:18] <moritz_> and the fast pugs development lead to big improvement in the specs

[15:18] <[particle]> there's no way to get a good estimate of (largely unpaid) volunteer effort

[15:18] <moritz_> which makes it easier for the parrot folks much more directed, and easier

[15:18] <spx2> [particle], but mozilla pumped some dough ...

[15:18] <moritz_> spx2: as I said, that mostly goes into parrot, which is well organized already

[15:18] <[particle]> mofo gave one man a grant for four months' work

[15:19] <[particle]> and that work is progressing nicely, we've already seen the benefits

[15:19] <moritz_> aye

[15:20] <[particle]> i'd *love* to see the other perl 6 implementations get more organized, and receive funding

[15:20] <ruoso> TimToady, when you have some time, could you please take a look at http://www.perlfoundation.org/perl6/index.cgi?smop_p6opaque_implementation ... I'm hoping that this model can implement P6 OO gracefully, but I really would appreciate your review

[15:20] <lambdabot> Title: SMOP p6opaque Implementation / Perl 6, http://tinyurl.com/2z5spt

[15:22] <moritz_> [particle]: do you know if PGE supports the <token> ** <other_token> syntax?

[15:22] *** renormalist joined
[15:22] <[particle]> i don't believe it does.

[15:22] <moritz_> ok, thanks

[15:22] <[particle]> what does that mean?

[15:22] *** TJCRI joined
[15:23] <moritz_> a sequence of <token>s separated by <othertoken>s

[15:23] <[particle]> ah, hrmm

[15:23] <moritz_> <item>**',' is a comma separated list

[15:23] <[particle]> nice syntax.

[15:24] <[particle]> no, you'll still have to do <item>? [ ',' <item> ]*

[15:24] *** kanru left
[15:24] <moritz_> without the first ?

[15:24] <[particle]> actually, for the example you gave, forget the ?

[15:24] <moritz_> ;)

[15:25] <[particle]> i think pge only gets <item> ** {3}

[15:28] *** rindolf joined
[15:28] *** spx2 left
[15:31] *** peeps[work] joined
[15:32] *** spx2 joined
[16:01] *** Aankhen`` left
[16:06] *** Aankhen`` joined
[16:09] *** cosimo left
[16:12] *** aindilis joined
[16:21] *** manfred joined
[16:27] *** DarkWolf84 joined
[16:29] *** Psyche^ joined
[16:34] *** cathyal joined
[16:35] *** namelessuser joined
[16:39] *** Patterner left
[16:39] *** Psyche^ is now known as Patterner

[16:42] *** kst left
[16:52] <cj> moin moin

[16:58] *** lisppaste3 left
[17:10] *** Helios- left
[17:12] *** renormalist left
[17:18] *** lisppaste3 joined
[17:23] <TimToady> bleah, it's way too early for it to be this late...

[17:23] <rindolf> Hi all.

[17:23] <rindolf> Hi TimToady 

[17:24] <TimToady> ruoso: the $a.a mess was a fossil from the old design of p6 that purposefully confused 0-argument methods with 1-argument subs

[17:24] <TimToady> that is now solved with "is export" on methods, so $a.a should never see a "sub a"

[17:24] <TimToady> so it's a pugs buglette

[17:25] *** spx2 left
[17:25] *** spx2 joined
[17:27] <pasteling> "TimToady" at 71.139.8.150 pasted "The uni script" (23 lines, 520B) at http://sial.org/pbot/30223

[17:28] <TimToady> kolibrie: see above

[17:28] <kolibrie> TimToady: thanks!

[17:28] <ruoso> so, method dispatch does not fallback to sub dispatch?

[17:28] <TimToady> never, we just install a sub alias if they explicitly say "is export"

[17:29] <ruoso> nice... that makes thing simpler

[17:29] <TimToady> which makes it easy to have both push(@array: 1,2,3) and push(@array, 1,2,3)

[17:29] <TimToady> with the same impl

[17:29] <bphillips> just curious (if anyone knows) is the current expectation that Audrey probably won't be able to return to the project?

[17:29] <TimToady> indeed, if anyone wants to fix pugs...

[17:30] <TimToady> I would not expect it; her health is much more important

[17:30] <ruoso> so, class F { sub a { "a" } method a { "b" } }; is valid...

[17:30] *** njbartlett joined
[17:30] <bphillips> TimToady: agreed - I just hadn't heard any news on that topic in a long time

[17:30] <ruoso> where the sub install it in the package and the method install it in the prototype

[17:32] <TimToady> I can argue it both ways

[17:32] <TimToady> I think anyone who installs both a sub and a method of hte same name is crazy

[17:32] <TimToady> and the package has always been the record of the public interface of a class

[17:32] <TimToady> in p5

[17:33] <ruoso> well... in fact, it's the same case as push(@array and @array.push

[17:33] <[particle]> ...enough rope...

[17:33] <[particle]> can you have a module and a class with the same name?

[17:33] <TimToady> yeah

[17:33] <TimToady> question is how you want someone external to the package to name methods

[17:33] <TimToady> (if you want to allow it)

[17:34] <TimToady> but that solution of course does not extend to anon classes

[17:34] <moritz_> is the double colon all gone?

[17:34] <TimToady> we still have ::

[17:34] <ruoso> isn't that the meaning of  HOW ?

[17:34] <ruoso> I mean... 

[17:34] <ruoso> HOW is the interface to mess with the class definition

[17:34] <ruoso> even if it is anonymous

[17:35] *** TJCRI left
[17:35] <TimToady> sure, and certainly that will be the primary way of looking up methods

[17:35] <TimToady> as I said, I can argue it either way

[17:35] *** namelessuser left
[17:35] <TimToady> for now assume that the method doesn't have to also live in the packge

[17:36] <TimToady> since that's simpler

[17:36] <ruoso> actually, that's how I'm planning to implement p6opaque

[17:36] <ruoso> in smo

[17:36] <TimToady> if someone wants to install such aliases for external use, we can think about it pragmatically later

[17:36] <ruoso> smop

[17:37] <ruoso> even an anon-class can have methods, that won't probably be in any package

[17:37] <[particle]> hrmm, i should implement 'is export' in rakudo. it'll clean up the sub wrappers we have around many of our methods

[17:38] <ruoso> TimToady, did you have a chance to see the sketches on the smop p6opaque implementation?

[17:40] <TimToady> I've skimmed it, but I'm not awake enough yet to think it through

[17:40] <ruoso> ok..

[17:40] <ruoso> btw... S12 needs to be updated to reflect the current status 

[17:40] <ruoso> Method call vs. Subroutine call

[17:42] *** meppl joined
[17:42] <ruoso> if I go on with the  current p6opaque plan, the following will be possible: my $foo = 0 but True; my $bar = $foo.new(); say $bar ?? "1" !! "0";  # the result is 1

[17:43] <moritz_> that's... astonishing ;)

[17:43] <TimToady> oh, I had forgotten about the failover from method to sub, so maybe it's not a pugs bug...

[17:43] *** cathyal left
[17:43] <TimToady> told you I wasn't awake yet...

[17:43] <ruoso> heh

[17:45] <ruoso> so... does the failover exist or not?

[17:46] <TimToady> for now it does, but you don't have to worry about unless the method dispatch fails completely first, so I wouldn't worry about it at all right now

[17:46] <ruoso> ok... but one important thing

[17:47] <ruoso> packages doesn't inherit from each other, right? classes do... does the fallback goes through the object hierarchy *again* trying to find the sub?

[17:47] <TimToady> no

[17:47] *** sri_work joined
[17:47] <TimToady> it's just a translation of $a.foo to foo($a) and try the multiple dispatcher

[17:47] <ruoso> that is possibly unexpected...

[17:47] *** lumi_ joined
[17:48] <TimToady> possibly

[17:48] <moritz_> but multi dispatch honors inheritance

[17:48] <ruoso> so, foo would have to be declared in the current scope?

[17:48] <ruoso> and not in the object's package

[17:48] <TimToady> only if you declared multi a, not sub a

[17:49] <ruoso> or would it be the same semantic as in p5... 

[17:49] <ruoso> where $foo.a translates to $($foo.WHO)::a()

[17:50] <TimToady> on your 0 but True example, it is supposed to work that way, but I think you're thinking of the protoobject as its own class, whereas I was thinking that "but" creates an anonymous class shared by $foo and $bar

[17:50] *** Helios- joined
[17:51] <ruoso> well... in my example, $bar is $foo

[17:51] <ruoso> :)

[17:51] <ruoso> and $foo is Int does True

[17:51] <ruoso> because my current plan allows the object itself to have more definitions

[17:51] <ruoso> and it become its own class

[17:52] <ruoso> when you do runtime composition

[17:52] <TimToady> but you can also just create a new anon class whenever you need to external to the object, if you want to implement it that way

[17:52] <TimToady> Q is whether your approach forces overhead onto classy objects unnecesarrily

[17:52] <TimToady> since most of them will share a class

[17:53] <ruoso> I see

[17:53] <TimToady> maybe we can have more than one P6opaque :)

[17:53] <ruoso> probably we will

[17:53] <TimToady> one optimized for prototype, one optimized for class-based

[17:54] *** jferrero joined
[17:54] <TimToady> whole point of having a representation knob is that it can have more than one setting

[17:55] <TimToady> but on the user side of .HOW you shouldn't easily be able to tell the difference

[17:56] <TimToady> and HOW is really a macro that can cheat as much as it likes

[17:56] <TimToady> so we probably have to restrict the set of possible representations to that known by the HOW in the current lexical scope

[17:56] <TimToady> which implies that an application might have to predeclare its representations

[17:56] <TimToady> before we can know what's safe to put into a HOW macro

[17:57] <ruoso> well... 

[17:57] <[particle]> HOWs fair if you predeclare

[17:57] <ruoso> the whole point in smop is enabling different representations

[17:59] <ruoso> the thing here really is that we are going to need an HOW API

[17:59] <ruoso> and a Representation API

[17:59] <ruoso> for them to be interchangeable

[18:00] <ruoso> I mean... during BUILD, the class will have to talk with the HOW, and the HOW will have to talk with the Representaiton

[18:00] <ruoso> and in the end, there must be a complete object, independent of its representation

[18:01] <ruoso> that's one of the most scary features of Perl 6, and the one I most like

[18:01] <ruoso> in theory, you can create a Int that uses a Glib representation

[18:03] <ruoso> it's insane, and I love it

[18:05] * TimToady bows, and gestures to the Cabal for their share of applause

[18:05] *** agentzh left
[18:13] <ruoso> heh

[18:28] *** ebassi left
[18:31] *** zamolxes left
[18:34] *** rindolf left
[18:44] *** justatheory joined
[18:49] *** Lorn_ joined
[19:01] *** Aankhen`` left
[19:01] *** Aankhen`` joined
[19:02] *** spx2 left
[19:02] *** spx2 joined
[19:05] *** Helios- left
[19:06] *** Lorn left
[19:06] *** Helios_ joined
[19:07] *** Helios_ is now known as Helios-

[19:09] *** fridim_ joined
[19:15] *** chris2 left
[19:17] *** gbacon joined
[19:27] *** sri_work left
[19:35] *** buchet joined
[19:40] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop_oo_api

[19:40] <lambdabot> Title: SMOP OO API / Perl 6

[19:40] <ruoso> first sketches on the Object/HOW/REPR API

[19:42] *** spx2 left
[19:43] <ruoso> as usual, any review is more than appreciated.

[19:44] <ruoso> home &

[19:52] *** njbartlett left
[20:05] *** manfred left
[20:07] <buchet> I try to write some tests for S17; so perhaps I need a commit bit. Do somebody have one for me?

[20:08] <[particle]> i can give you one

[20:08] <[particle]> is S17 in the pugs repo?

[20:09] *** zev left
[20:09] *** zev joined
[20:10] *** mofino_ joined
[20:10] <buchet> isn't it docs/Perl6/Spec/Concurrency.pod?

[20:10] *** avarab joined
[20:11] <jnthn> Concurrency tests? Oooh... :-)

[20:12] <buchet> I said: I will try....:-)

[20:13] <wolverian> is that up to date / official? 

[20:13] <[particle]> ok, gimme your email and username, i'll send you your bit

[20:14] *** mofino left
[20:15] *** mofino_ is now known as mofino

[20:21] *** avar left
[20:21] *** Aankhen`` left
[20:26] * moritz_ welcomes our new concurrency overlord

[20:28] <[particle]> buchet: email/username? i'd like to welcome our new overlord, too :)

[20:33] *** buchet left
[20:34] *** namelessuser joined
[20:40] *** TJCRI joined
[20:43] <TimToady> n

[20:43] * TimToady .oO(...)

[20:45] <cognominal_> you can use ... as argument of method call too?

[20:46] <moritz_> just as a prototype indicator

[20:46] <pugs_svn> r19833 | rhr++ | [irclog] add CPS and PCT to abbr.dat

[20:46] <cognominal_> if it commes with an array context, you may get away thx to lazyness :)

[20:47] <cognominal_> s/commes/comes/

[20:49] <cognominal_> it may translate in some sort of array thunk  that evaluates to an error :)

[20:49] * [particle] wonders what the oO() method on the current topic does. pull a news item from perl.org?

[20:51] <[particle]> > perl6 -e'.oO()'

[20:51] <lambdabot>  Improperly terminated character constant at "'" (column 15)

[20:51] <[particle]> This Week on perl 5-porters - 27 January-2 February 2008

[20:51] <[particle]> :)

[20:51] *** buchetc joined
[20:51] <cognominal_> grinder++

[20:54] <[particle]> buchetc: you need to '/msg nickserv identify buchetc'  in order to send private messages

[20:55] <cognominal_> I wish that irc could somehow use openids too

[20:56] <[particle]> that'd be nice, yeah.

[20:57] *** cj left
[21:04] <[particle]> buchetc: it's customary to add your name to AUTHORS to test your commit bit. welcome!

[21:05] <TimToady> buchetc: nevermind my email then, if it gets to you :)

[21:08] *** avarab is now known as avar

[21:19] <pugs_svn> r19834 | buchetc++ | test commit bit

[21:20] <moritz_> welcome buchetc ;)

[21:25] <TimToady> buchetc: feel free to ask questions about (or even edit) S17 as it seems appropriate

[21:26] *** Schwern left
[21:27] <moritz_> and this is a good read for inspiration: http://www.seas.upenn.edu/~lipeng/homepage/unify.html

[21:27] <lambdabot> Title: Unifying events and threads

[21:29] *** cathyal joined
[21:34] *** IllvilJa left
[21:39] <[particle]> parrot's concurrency pdd is a good read, too. especially because it has been implemented already :)

[21:46] <TimToady> so implement gather/take :)

[21:53] *** justatheory left
[21:55] <[particle]> TimToady: looking at S09, it's not clear what 'my @array[-5];' will do

[21:55] <[particle]> it think it's clear what it *should* do.

[21:56] <[particle]> how do i ask an array whether it's fixed size or not?

[21:58] *** buchetc left
[21:59] <TimToady> @array[-5] should always fail, probably at compile time

[21:59] <lambdabot> Unknown command, try @list

[21:59] <TimToady> oh, didn't see the "my"

[21:59] <TimToady> should still fail...

[22:00] *** njbartlett joined
[22:00] <[particle]> that's what i imagine.

[22:01] * jnthn returns from $REALLIfE

[22:01] <[particle]> but the spec is ambiguous by omission

[22:01] <TimToady> as for inspection, that's what .shape should tell you

[22:01] <[particle]> ah. shape. great.

[22:01] <[particle]> i'll ack that in the docs

[22:02] <TimToady> it's mentioned in S09

[22:03] <TimToady> the only argument for [-5] being allowed is the same reason we allow 0..-5 for a null range

[22:03] <TimToady> but it seems a stretch

[22:03] <[particle]> so 'my @array[5];' desugars to 'my @array = Array.new(:shape<5>)' or somesuch

[22:03] <[particle]> well, perhaps [0-5] or [*-5]

[22:04] <[particle]> but i think [-5] is bad

[22:04] <TimToady> well, more like my @array := Array.new

[22:04] <[particle]> right, sorry. should be bound.

[22:05] <TimToady> the type of the container includes its shape

[22:05] <[particle]> but how do i know that it can't be extended?

[22:05] <[particle]> shape doesn't tell me if it's fixed or resizable

[22:06] <TimToady> if it's a resizable dimension it uses * instead

[22:06] *** TJCRI left
[22:06] <[particle]> ok, so .shape would return Whatever in that dimension

[22:07] <TimToady> yes

[22:07] <[particle]> and i can fix an array's size after creation, using .shape(...)

[22:08] <[particle]> and if that makes the array smaller, does it return the values it's culled?

[22:08] *** meppl left
[22:09] *** buchetc joined
[22:12] <TimToady> well, you'd have to use .=shape, and it might well fail

[22:12] <[particle]> hrmm.

[22:13] <[particle]> so, 's possible .shape() can only set during bind

[22:13] <TimToady> .new really

[22:13] <[particle]> er, yeah. right-o.

[22:14] <[particle]> hrmm. my Array @x is ro;

[22:14] <[particle]> oops

[22:14] <[particle]> my Array @x[5] is ro;

[22:14] <[particle]> is that just the shape that's read-only, or the contents too?

[22:15] <TimToady> um, you've just declared an array of Array

[22:15] <[particle]> hee. so i have.

[22:15] <[particle]> my Foo ...

[22:15] <TimToady> but the ro is applied to @x as a whole

[22:16] <TimToady> "is" always aims at the entire declaratoin

[22:16] <[particle]> the container and the contents

[22:16] <TimToady> is applies the trait to the container, and the container may apply it to its contents if it wishes

[22:16] <[particle]> ok, so it seems much better to use 'constant' rather than 'is ro' on container.

[22:17] <TimToady> use readonly if you want to bind to something that varies at run time but you don't want to modify otherwise

[22:17] <TimToady> constant can't vary at run time even

[22:17] <TimToady> that's why parameters are readonly rather than constant

[22:18] <TimToady> they get rebound on each call

[22:18] <[particle]> ah

[22:18] <TimToady> but over the life of the call they're invariant

[22:18] <[particle]> i know some people like that

[22:19] <TimToady> well I should commute

[22:19] <TimToady> later &

[22:20] *** Limbic_Region joined
[22:44] *** monomorph left
[22:46] *** iblechbot left
[22:54] *** wknight8111 joined
[22:58] <rakudo_svn> r25590 | jonathan++ | [rakudo] Work around the class/role ordering issue for now, so people can play with OO in Rakudo until we work out a Real Solution.

[22:59] *** cmarcelo left
[23:01] *** justatheory joined
[23:06] *** avar is now known as avarab

[23:16] *** buchetc left
[23:20] *** BinGOs_ joined
[23:21] *** lambdabot left
[23:22] *** peeps[work] left
[23:25] *** BinGOs__ joined
[23:32] *** BinGOs left
[23:35] *** sri_work joined
[23:39] *** BinGOs_ left
[23:47] *** namelessuser left
[23:48] *** namelessuser joined
[23:57] *** avarab is now known as avar

[23:57] *** fridim_ left
[23:59] *** sri_work left
