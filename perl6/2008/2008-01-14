[00:19] *** Southen left
[00:28] *** Southen joined
[00:32] *** thoughtpolice left
[00:47] *** Limbic_Region joined
[00:47] *** riffraff left
[00:50] *** ruoso joined
[01:00] <meppuru> good night

[01:01] *** meppuru left
[01:02] *** _sprocket_ left
[01:02] *** cnhackTNT joined
[01:13] *** jferrero joined
[01:37] *** jisom left
[01:49] *** ruz joined
[01:56] *** Jedai joined
[01:57] <skids> perl5 embedded in pugs -- any way to get functions that modify parameters to work?

[01:58] <skids> e.g. IO::Socket::INET::recv($dat,1,0) modifies $dat, but it is not modified from perl6

[02:00] <allbery_b> you have to do something special to get variables propagated, IIRC, but I don't' recall what.  (and it may not be implemented yet, even; I foret)

[02:00] *** BinGOs_ joined
[02:02] *** BinGOs left
[02:05] *** BinGOs_ left
[02:05] *** BinGOs joined
[02:05] *** ruoso left
[02:12] *** xdg joined
[02:16] *** BinGOs left
[02:16] *** BinGOs joined
[02:22] *** BinGOs left
[02:23] *** BinGOs joined
[02:24] *** agentzh joined
[02:24] <agentzh> morning!

[02:24] <lambdabot> agentzh: You have 1 new message. '/msg lambdabot @messages' to read it.

[02:24] <agentzh> @message

[02:24] <lambdabot> Maybe you meant: messages messages?

[02:25] <agentzh> ....

[02:25] <agentzh> @messages

[02:25] <lambdabot> fglock said 1m 3d 11h 5m 17s ago: there is a v6.pm cpan-testers report with "t/01-sanity/02-counter...............greediness control not implemented: [ '\Â»' | . ]" - is this PCR related?

[02:25] <agentzh> fglock: not sure...

[02:26] <agentzh> 1m 3d...

[02:27] <Auzon> Hi

[02:31] *** BinGOs left
[02:31] *** BinGOs joined
[02:42] *** BinGOs left
[02:42] *** BinGOs joined
[02:49] *** BinGOs left
[02:49] *** BinGOs joined
[02:54] *** BinGOs left
[02:55] *** Limbic_Region left
[03:04] *** ntgrl joined
[03:10] *** integral left
[03:12] *** BinGOs joined
[03:15] *** penk joined
[03:31] *** lunatico left
[03:44] *** kanru joined
[03:46] *** kanru left
[04:08] *** jferrero left
[04:24] <Auzon> pugs: 1,2 X 3,4

[04:24] <exp_evalbot> RESULT[((1, 3), (1, 4), (2, 3), (2, 4))]

[04:25] <Auzon> pugs: (1,2) X (1,2)

[04:25] <exp_evalbot> RESULT[((1, 1), (1, 2), (2, 1), (2, 2))]

[04:25] <Auzon> pugs: 1,2 X 1,2 X 1,2

[04:25] <exp_evalbot> RESULT[((1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2), (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2))]

[04:25] <Auzon> excellent.

[04:25] <Auzon> pugs: 0,1,2 X 0,1,2 X 7,8,9

[04:25] <exp_evalbot> RESULT[((0, 0, 7), (0, 0, 8), (0, 0, 9), (0, 1, 7), (0, 1, 8), (0, 1, 9), (0, 2, 7), (0, 2, 8), (0, 2, 9), (1, 0, 7), (1, 0, 8), (1, 0, 9), (1, 1, 7), (1, 1, 8), (1, 1, 9), (1, 2, 7), (1, 2, 8), (1, 2, 9), (2, 0, 7), (2, 0, 8), (2, 0, 9), (2, 1, 7), (2, 1, 8), (2, 1, 9), (2, 2, 7), (2, 2, 8), (2,

[04:25] <exp_evalbot> ..2, 9))]

[04:37] <Auzon> pugs: 0,1,2 X 0,1,2 X 7,8,9,0

[04:37] <exp_evalbot> RESULT[((0, 0, 7), (0, 0, 8), (0, 0, 9), (0, 0, 0), (0, 1, 7), (0, 1, 8), (0, 1, 9), (0, 1, 0), (0, 2, 7), (0, 2, 8), (0, 2, 9), (0, 2, 0), (1, 0, 7), (1, 0, 8), (1, 0, 9), (1, 0, 0), (1, 1, 7), (1, 1, 8), (1, 1, 9), (1, 1, 0), (1, 2, 7), (1, 2, 8), (1, 2, 9), (1, 2, 0), (2, 0, 7), (2, 0, 8), (2,

[04:37] <exp_evalbot> ..0, 9), (2, 0, 0), (2, 1, 7), (2, 1, 8), (2, 1, 9)...

[04:37] <Auzon> pugs: 0 X 0,1,2 X 7,8,9,0

[04:37] <exp_evalbot> RESULT[((0, 0, 7), (0, 0, 8), (0, 0, 9), (0, 0, 0), (0, 1, 7), (0, 1, 8), (0, 1, 9), (0, 1, 0), (0, 2, 7), (0, 2, 8), (0, 2, 9), (0, 2, 0))]

[04:37] <Auzon> I love this feature.

[04:42] *** kanru joined
[04:55] *** cnhackTNT left
[05:16] *** pmccann joined
[05:20] *** coumbes joined
[05:23] *** lumi left
[05:45] *** cnhackTNT joined
[05:48] *** coumbes left
[05:57] *** pmccann left
[06:00] *** awwaiid left
[06:02] *** awwaiid joined
[06:04] *** alc joined
[06:38] *** devogon joined
[06:42] *** overlast left
[06:47] *** xinming_ left
[07:05] *** pen1 joined
[07:05] *** lyokato_ joined
[07:08] *** SCalimlim left
[07:16] *** mattz left
[07:16] *** pen2 joined
[07:16] *** overlast_ joined
[07:19] *** pen3 joined
[07:21] *** pen4 joined
[07:24] *** penk left
[07:35] *** pen1 left
[07:36] *** pen2 left
[07:41] *** pen3 left
[07:42] *** Aankhen`` joined
[07:45] *** iblechbot joined
[07:46] *** IllvilJa joined
[07:49] <Tene> So, question about method delegation.

[07:49] <Tene> S12 says "has $the_real_me handles *;"

[07:50] *** mattz joined
[07:50] <Tene> Is there any corresponding way to specify a function that gets called when no other function defined on the object matches?

[07:52] <Tene> I think ruby calls it method_missing or some such.

[07:52] <Tene> That seems like the sort of thing that should be possible in Perl 6's meta-model, but I can't find anything in the spec about it.

[07:56] <japhb_> Tene: I vaguely recall something like "AUTOMETHOD", though that's probably ancient spec-wise

[07:57] <Aankhen``> I coulda sworn there was an "AUTOMETHDEF" or something like that, but I can't find it in the spec.

[07:59] <Aankhen``> Okay, from <http://perlcabal.org/syn/S13.html#Fallbacks>: "If an attempt is made to dispatch to a declared but undefined routine, Perl will redispatch to an AUTODEF submethod [conjectural] as appropriate to define the routine."

[07:59] <Aankhen``> I guess it's not fleshed out yet.

[08:30] *** pen4 left
[08:31] *** xinming joined
[08:33] *** penk joined
[08:36] *** ntgrl is now known as integral

[09:03] *** riffraff joined
[09:05] *** riffraff left
[09:06] *** njbartlett_ left
[09:10] *** riffraff joined
[09:11] <riffraff> hi

[09:17] *** Khisanth left
[09:17] *** Khisanth joined
[09:19] <moritz_> hi riffraff 

[09:59] *** alc left
[10:13] *** drbean joined
[10:17] *** njbartlett_ joined
[10:21] *** ebassi joined
[10:22] *** drbean_ left
[10:27] *** cnhackTNT left
[10:28] *** bwisti joined
[10:45] *** njbartlett_ left
[10:47] *** pen1 joined
[10:58] *** njbartlett_ joined
[11:02] *** lyokato_ left
[11:05] *** penk left
[11:19] *** IllvilJa left
[11:29] *** polettix left
[11:41] <pugs_svn> r19474 | cosimo++ | Changed the todo mark with new compiler directives

[11:45] *** meppuru joined
[11:46] *** masak joined
[11:56] *** penk joined
[11:59] *** njbartlett_ left
[12:04] *** bwisti left
[12:14] *** polettix joined
[12:16] *** pen1 left
[12:29] *** Aankhen`` left
[12:30] *** Aankhen`` joined
[12:32] *** njbartlett_ joined
[12:55] *** ebassi is now known as ebassi|lunch

[12:56] *** ebassi|lunch left
[12:56] *** ebassi joined
[12:58] *** farmerjoe joined
[13:14] *** riffraff left
[13:30] *** njbartlett_ left
[13:40] *** farmerjoe left
[13:47] *** penk left
[13:50] *** polettix is now known as poletti

[13:51] *** poletti is now known as polettix

[13:52] *** cmarcelo joined
[13:58] *** falesca joined
[14:08] *** chris2 joined
[14:16] *** xinming_ joined
[14:22] *** xinming_ left
[14:22] *** falesca left
[14:22] *** iblechbot left
[14:22] *** kanru left
[14:22] *** alester left
[14:22] *** charsbar left
[14:22] *** skids left
[14:22] *** mncharity left
[14:22] *** silug left
[14:22] *** qmole_ left
[14:22] *** pbuetow left
[14:22] *** bloonix left
[14:22] *** Grrrr left
[14:22] *** avar left
[14:22] *** nnunley left
[14:22] *** GeJ left
[14:22] *** allbery_b left
[14:22] *** djm left
[14:22] *** broquaint left
[14:23] *** xinming_ joined
[14:23] *** falesca joined
[14:23] *** iblechbot joined
[14:23] *** kanru joined
[14:23] *** alester joined
[14:23] *** charsbar joined
[14:23] *** skids joined
[14:23] *** mncharity joined
[14:23] *** silug joined
[14:23] *** qmole_ joined
[14:23] *** pbuetow joined
[14:23] *** djm joined
[14:23] *** avar joined
[14:23] *** Grrrr joined
[14:23] *** broquaint joined
[14:23] *** bloonix joined
[14:23] *** allbery_b joined
[14:23] *** nnunley joined
[14:23] *** GeJ joined
[14:26] *** jhorwitz joined
[14:28] *** Aankh|Clone joined
[14:28] *** xinming left
[14:36] *** renormalist joined
[14:36] *** Auzon left
[14:36] *** renormalist left
[14:36] *** renormalist joined
[14:39] *** jferrero joined
[14:41] *** rdice joined
[14:44] *** Aankhen`` left
[15:12] *** TJCRI joined
[15:15] *** bphillip1 joined
[15:33] *** jjore left
[15:42] *** Khisanth left
[15:42] *** Khisanth joined
[15:43] *** pbuetow left
[15:43] *** pbuetow joined
[15:44] *** renormalist left
[15:46] *** jferrero left
[15:58] *** kanru left
[15:59] <pugs_svn> r19475 | particle++ | add todo markers to a few spec tests

[16:16] *** pmurias joined
[16:16] <pmurias> Aankh|Clone: CANDO

[16:19] <Aankh|Clone> Ah, thanks.

[16:19] *** Aankh|Clone is now known as Aankhen``

[16:22] *** ispy_ joined
[16:43] *** kanru joined
[16:46] *** barney joined
[16:48] <pasteling> "ruoso" at 195.23.61.1 pasted "I'm with limited internet access right now, but here is a piece of code where we program SMOP in SMOP... This is the code for CPS call to DESTROYALL done by gc." (38 lines, 1.9K) at http://sial.org/pbot/29849

[17:03] *** DarkWolf84 joined
[17:07] <moritz_> TimToady: any thoughts on the "For 5.12: named parameters + prototypes + methods + aliases" discussion on p5p?

[17:10] *** chris2 left
[17:11] *** xdg left
[17:11] *** cognominal_ left
[17:17] *** njbartlett_ joined
[17:22] *** pmurias left
[17:23] *** bwisti joined
[17:23] *** manfred joined
[17:24] *** IllvilJa joined
[17:29] *** BinGOs left
[17:33] *** aindilis left
[17:34] *** aindilis joined
[17:35] *** jjore joined
[17:37] *** BinGOs joined
[17:45] <TimToady> moritz_: I'm sure if I go and read the discussion it will give me high blood pressure  :)

[17:45] *** falesca left
[17:47] <moritz_> ;)

[18:06] *** Grrrr left
[18:07] *** Grrrr joined
[18:10] *** braceta joined
[18:26] *** polettix left
[18:27] *** TimToady left
[18:27] *** polettix joined
[18:27] *** TimToady joined
[18:30] *** ebassi left
[18:31] *** ruoso joined
[18:36] *** cognominal_ joined
[18:40] <rhr> TimToady: what's the default normalization form for Str.print, .normalize, .codes, and .ord?  should any of them fail by default?

[18:44] *** cognominal_ left
[18:45] *** cognominal_ joined
[18:52] *** Limbic_Region joined
[18:56] *** pmurias joined
[18:56] *** lambdabot left
[18:57] *** lambdabot joined
[19:04] *** rindolf joined
[19:08] <TimToady> print should know what its handle wants.

[19:08] <TimToady> I'm not sure .normalize is useful under graphemes

[19:09] <TimToady> .ord/.chr should probably be based on grapheme id normally, so NFC

[19:10] *** tobeya joined
[19:11] <TimToady> if "use codepoints" declares whether the default is nfc or nfd, maybe .normalize defaults to that

[19:11] <TimToady> (in that lexical scope)

[19:13] <TimToady> and maybe under use bytes you also get a default encoding, so .normalize.encode can take any Str and turn it into, say, :nf<d> :enc<utf-8>

[19:14] <TimToady> so maybe the defaults in Functions.pod are wrong, and should default to something in the lexical scope

[19:14] <TimToady> like $?NF and $?ENC

[19:14] <TimToady> I suppose open could also default to $?NF and $?ENC

[19:18] <TimToady> or maybe we don't tie it to "use bytes" and "use codepoints", but have "use nf 'c'" and "use enc 'utf-16le'" instead, since you also might want $?NF and $?ENC to default for other things like converting Str to Buf

[19:18] <TimToady> even under the grapheme view

[19:18] <TimToady> hmm, maybe it's just "constant $?NF = 'C'" in that case, and no use is required

[19:20] *** masak left
[19:20] <TimToady> but if the other arguments are :nf<> and :enc<>, then maybe "use uni :nf<kc> :enc<utf-32>" is what people would prefer to write to set their defaults

[19:20] <TimToady> for consistency

[19:21] *** stevan_ left
[19:21] *** stevan_ joined
[19:23] <ruoso> TimToady, is it ok for a specific environment to declare new $?FOO variables?

[19:23] <ruoso> I mean... smop will probably have a $?STACK

[19:24] <TimToady> why not?

[19:24] <TimToady> except that would imply that $?STACK is a compile-time constant

[19:24] <ruoso> I mean, I was just wondering if that was not something to be specced

[19:24] <TimToady> which I kinda doubt

[19:24] <ruoso> $?STACK is kinda a compile-time constant that means, the current stack on that block

[19:25] <ruoso> the value is not constant, but the meaning is

[19:25] <TimToady> as soon as you say "current" it's not a constant

[19:25] <TimToady> no, that's why we got rid of $?SELF

[19:25] <alester> afternoon all

[19:25] <TimToady> if it varies, you can use $*STACK

[19:25] <ruoso> but then it means it can be local

[19:25] <ruoso> and it's not the case

[19:26] <ruoso> better yet,

[19:26] <TimToady> maybe we need a dynamic sigil...

[19:26] <TimToady> *twigil

[19:26] <ruoso> the "current" stack only means something inside a block

[19:26] <ruoso> like http://sial.org/pbot/29849

[19:26] <lambdabot> Title: Paste #29849 from "ruoso" at 195.23.61.1

[19:26] <ruoso> it should probably be a macro, actually

[19:27] <TimToady> like "self" really

[19:27] <ruoso> but, should I use a plain bareword?

[19:27] <TimToady> __STACK__ if we reserve those for implementation details

[19:27] <rhr> doesn't $+ kind of do that?

[19:27] <ruoso> __STACK__ seems fine to me...

[19:28] <ruoso> weird enough to not cause any confusion

[19:28] <TimToady> $+ scans for a contextual variable

[19:28] <ruoso> I think the point is to get a pattern for this implementation-dependant macros

[19:28] <TimToady> rhr: did you see my unicode microrant above?

[19:29] <ruoso> I mean... HOW is available in all implementations, but __STACK__ isn't

[19:29] <rhr> yes, thanks

[19:29] <ruoso> I should probably follow the same pattern to RI

[19:29] <ruoso> __RI__(obj)

[19:29] <ruoso> or obj.__RI__

[19:29] <rhr> I was thinking .normalize would be used to tell a graph Str how to become a codepoint Str when asked, is there another way to do that?

[19:29] <ruoso> because it's only available in some Perl 6 implementations

[19:29] <TimToady> shades of python...

[19:30] <TimToady> I think it is probably not useful for a Str to know how to become a codepoint without knowing how it's going to be used

[19:31] <TimToady> it's the context that uses it that knows how it wants it

[19:31] <TimToady> and two contexts could want it differently

[19:32] <TimToady> you pass a Str into a module, and it's written in "use codepoint; use :nf<c>"; and then it sends it to a random handle which is set to :nf<d>

[19:32] * ruoso will consider the __FOO__ pattern for implementation-exclusive-macros from now on..

[19:32] *** rindolf left
[19:32] <TimToady> at each of those context switches it should do the right thing

[19:33] <rhr> OK, that sounds good

[19:33] <TimToady> note that you might have some trouble if you link in a python program and call $obj.__STACK__

[19:33] <TimToady> if you think it's a macro

[19:33] <TimToady> but python thinks it's an ordinary method

[19:34] <TimToady> maybe we should go with something newish

[19:34] <TimToady> maybe ___STACK___

[19:34] <ruoso> hmm... should I stick with __STACK__() only?

[19:34] <ruoso> I mean

[19:34] <ruoso> __FOO__() only

[19:34] <ruoso> __STACK__ doesn't get any parameter

[19:35] <ruoso> or __RI__(__STACK__)

[19:35] <ruoso> to get the responder interface of the current stack

[19:35] <TimToady> that would always dispatch mmd-wise so would stay in the Perl universe

[19:35] <TimToady> it's only the $obj.foo form that can interpret "foo" according to the language of $obj

[19:35] <TimToady> but I'd say just for avoiding cultural confusion to use triple underscore

[19:36] <TimToady> and since it's going to generally be hidden from the user

[19:36] <TimToady> and implementation vars are going to be fairly rare

[19:36] <TimToady> so longer is okay

[19:36] <ruoso> yeah... that is for very deep things, like implementing CPS in core

[19:36] <ruoso> probably some module will hide it away

[19:36] <TimToady> maybe for continuations we can use 52 underscores :)

[19:37] <ruoso> heh

[19:37] <ruoso> I mean, did you see the code snippet in the paste?

[19:37] <ruoso> that's how to implement CPS in SMOP... :)

[19:39] <TimToady> cool!

[19:39] <pugs_svn> r19476 | ruoso++ | [smop] starting to implement the first test. Small Perl 6 code snippet implementing Continuation-Passing-Style during object destruction

[19:42] <pugs_svn> r19477 | ruoso++ | [smop] implementation-specific-and-exclusive-macros follow the ___FOO___ name pattern, and can only be used as in ___FOO___(arg) and never as arg.___FOO___.

[19:43] * ruoso going to some bar & 

[19:44] * ruoso will backlog, as usual...

[19:44] *** ruoso left
[19:46] *** jisom joined
[19:54] *** manfred left
[20:01] *** bwisti left
[20:02] *** polettix left
[20:03] *** barney left
[20:07] *** meppuru left
[20:08] *** meppuru joined
[20:10] <pugs_svn> r19478 | lwall++ | Some updates to reflect distinctions between lexical graphemes/codepoints/bytes scopes

[20:11] *** Aankhen`` left
[20:18] <TimToady> I think I may also do away with the Uni type, since we now always have everything based on Int values, including grapheme ids

[20:19] <TimToady> and chr/ord simply to Int/Str as people would expect from p5

[20:19] <TimToady> s/to/do

[20:20] <TimToady> (least surprise, and all that...)

[20:27] *** jisom left
[20:31] *** thoughtpolice joined
[20:32] <rhr> TimToady: I find Uni to be somewhat confusing, so that would be cool with me

[20:35] *** shachaf left
[20:39] *** braceta left
[20:40] *** alester left
[20:40] *** Limbic_Region left
[20:46] *** alester joined
[20:47] <pugs_svn> r19479 | lwall++ | [Functions] did away with the Uni type

[20:49] *** polettix joined
[20:52] *** kane__ left
[20:53] *** meppuru is now known as meppl

[21:17] *** mnemonic joined
[21:17] <mnemonic> hi

[21:17] <moritz_> hi

[21:18] <pbuetow> hi

[21:18] <pmurias> hello

[21:18] <TimToady> lo

[21:23] <pbuetow> jo

[21:26] *** meppl left
[21:30] *** meppuru joined
[21:31] *** meppuru is now known as meppl

[21:31] *** meppl is now known as meppuru

[21:32] *** meppuru left
[21:34] *** ispy_ left
[21:52] *** shachaf joined
[22:14] *** dduncan joined
[22:14] *** dduncan left
[22:16] *** cosimo joined
[22:24] *** cmarcelo left
[22:24] *** meppl joined
[22:25] *** TJCRI left
[22:27] *** thoughtpolice left
[22:28] *** thoughtpolice joined
[22:28] *** Torment joined
[22:34] *** pmurias left
[22:36] *** rdice left
[22:44] *** Jedai left
[22:49] *** meppl left
[22:51] *** meppl joined
[22:54] *** braceta joined
[22:56] <pugs_svn> r19480 | cosimo++ | moved quotemeta.t to t/spec/S29-str/

[22:57] <moritz_> there is quotemeta in p6?

[22:57] <moritz_> for backward compatibility with p5 regexes?

[22:58] <pugs_svn> r19481 | cosimo++ | moved index.t to t/spec/S29-str/

[22:58] <moritz_> cosimo: that quotemeta commit just delete a file, it didn't add it in another place

[22:58] *** cmarcelo joined
[22:59] <moritz_> cosimo: same with index.t

[22:59] <moritz_> ALL UR TESTS ARE BEL0NG TO US!

[23:00] *** mnemonic left
[23:10] <pugs_svn> r19482 | cosimo++ | [t] Refactored reverse (Str & List) tests into t/spec/S29-list/reverse.t

[23:10] <pugs_svn> r19482 | cosimo++ | Changed todo marker to new compiler directive 

[23:11] <pugs_svn> r19483 | cosimo++ | Test suite refactoring. Moved index.t to t/spec/S29-str/

[23:13] <cosimo> Should be everything in place now.

[23:14] <cosimo> moritz_: thanks for the notice!

[23:16] *** iblechbot left
[23:17] *** jferrero joined
[23:21] <TimToady> still don't see quotemeta

[23:21] <TimToady> did you check in lower down than your "svn mv"?

[23:22] <cosimo> TimToady: yes, I see it here: http://svn.pugscode.org/pugs/t/spec/S29-str/quotemeta.t

[23:22] <TimToady> oh, nevermind, I see it

[23:22] <TimToady> it does A before D, which makes sense

[23:22] *** meppl left
[23:23] <cosimo> Seems to me that there's no missing file now

[23:25] <moritz_> confirmed

[23:25] *** ruoso joined
[23:29] <pugs_svn> r19484 | cosimo++ | Test suite refactoring.

[23:29] <pugs_svn> r19484 | cosimo++ | Moved ord & chr tests in t/spec/S29-conversions/ 

[23:36] <pugs_svn> r19485 | cosimo++ | Test suite refactoring.

[23:36] <pugs_svn> r19485 | cosimo++ | Removed chomp.t from builtins.

[23:36] <pugs_svn> r19485 | cosimo++ | Was already merged in t/spec/S29-str/chomp.t

[23:36] *** meppl joined
[23:42] *** cmarcelo left
[23:45] *** BillR joined
[23:50] *** braceta left
[23:53] *** braceta joined
[23:53] <pugs_svn> r19486 | cosimo++ | Changed todo markers with new compiler directives

[23:57] <pugs_svn> r19487 | cosimo++ | Changed todo markers to new compiler directives (S29-str/chop.t)

[23:58] *** BillR left
[23:59] <pugs_svn> r19488 | cosimo++ | Changed todo markers with new compiler directives (S29/comb.t)

[23:59] *** meppl left
