[00:14] *** jjore left
[00:22] *** stevan_ left
[00:24] *** Schwern joined
[00:35] *** jjore joined
[00:38] *** ashleyb_ joined
[00:39] *** stevan_ joined
[00:39] *** _sprocket_ left
[00:46] *** ashleyb left
[00:50] *** takanori left
[00:50] *** jjore left
[00:52] *** takanori joined
[01:00] <pugs_svn> r19582 | lwall++ | [fudge] fudging everything that needs fudging

[01:25] *** atobey left
[01:35] *** devogon left
[01:41] *** penk left
[01:42] *** penk joined
[01:45] <meppuru> good night

[01:50] *** meppuru left
[01:55] *** thoughtp1lice joined
[02:06] *** thoughtpolice left
[02:26] <pugs_svn> r19583 | lwall++ | [fudgeall] depugsify and delinuxify

[02:31] *** alester joined
[02:34] *** japhb left
[02:59] *** ajs_home joined
[02:59] *** ajs_home left
[03:02] *** japhb joined
[03:18] *** jferrero joined
[03:19] *** jferrero left
[03:23] *** thoughtp1lice left
[03:24] *** ashleyb_ left
[03:31] <pugs_svn> r19584 | particle++ | [fudgeall] delinuxify

[03:32] <pugs_svn> r19585 | particle++ | [fudge] prettify usage

[03:39] *** stevan_ left
[03:39] *** stevan_ joined
[03:46] *** penk left
[03:50] *** ashleyb joined
[04:00] <pugs_svn> r19586 | lwall++ | [t/spec] Some missing colons

[04:14] <[particle]> TimToady: does skip require a block?

[04:18] <[particle]> nm, i'm working on it

[04:26] *** orafu joined
[04:26] <pugs_svn> r19587 | particle++ | [fudgeall] windows doesn't seem to want globbing help

[04:36] <pugs_svn> r19588 | particle++ | [t/spec] add skip markers for rakudo

[04:38] <alester> Adriano's articles indexed here: http://www.perlfoundation.org/perl6/index.cgi?perl_6_microarticles

[04:38] <lambdabot> Title: Perl 6 microarticles / Perl 6, http://tinyurl.com/2t5546

[04:43] *** OuLouFu left
[04:58] *** lambdabot left
[05:04] <ingy> hi [particle] 

[05:04] <[particle]> hey ingy

[05:04] <ingy> did that meeting ever end? :)

[05:05] <[particle]> no, i'm still waiting to do my talk :)

[05:05] <ingy> haha

[05:05] <ingy> the 40 minute talks were... well

[05:05] <ingy> a little long for a 10 minute talk

[05:06] <[particle]> yeah, i think next time we need a gong

[05:07] <ingy> [particle]: did you ever notice that pugs is an anagram of spug?

[05:07] <[particle]> haha, no

[05:07] <ingy> P.U.G.S. Perl Users Group, Seattle

[05:08] <ingy> I just noticed it myself

[05:09] <ingy> maybe we'll have to start SHUG

[05:10] * [particle] SHRUGS

[05:10] <beppu> Just out of curiosity, where has audreyt been?

[05:10] <[particle]> curiosity killed the cat

[05:10] <ingy> I keep her in a jar.

[05:10] <[particle]> told ya.

[05:10] <beppu> Let her post a blog entry once in a while.

[05:11] <ingy> she's been begging me to switch her into a par.

[05:11] <ingy> can't stand that java.

[05:12] <[particle]> har

[05:12] <beppu> Are you trying to kill her?

[05:13] <[particle]> audrey kept reality in her system tray for a long time, and when she restored it, it consumed all cycles and memory

[05:13] <ingy> She's draws a good crowd in my museum of programming curiosities

[05:14] <ingy> Don't worry. I feed her bits and bytes. 

[05:15] <ingy> Reality bytes.

[05:16] <beppu> Reality is a funny thing.

[05:16] <ingy> [particle]: we should hang out and hack sometime

[05:17] <[particle]> ingy: that'd be cool

[05:18] <ingy> I think after Feb 3rd would be good

[05:18] <[particle]> that's better for me too

[05:18] <[particle]> i leave for dc in the morning

[05:18] <ingy> :)

[05:20] <Auzon> pugs: my @test = 1 .. 10; say "sorted!" if [<] @test;

[05:20] <exp_evalbot> OUTPUT[sorted!␤]

[05:20] <Auzon> pugs: my @test = 1 .. 10, 6; say "sorted!" if [<] @test;

[05:20] <exp_evalbot> RESULT[undef]

[05:53] *** BinGOs left
[05:55] <pugs_svn> r19589 | particle++ | [fudgeall] ignore previously fudged output files

[06:00] *** wknight8111 left
[06:00] *** BinGOs joined
[06:07] *** BinGOs left
[06:10] *** jjore joined
[06:16] *** lambdabot joined
[06:20] <TimToady> [particle]: skip does not require a block

[06:20] *** DarkWolf84 left
[06:20] <[particle]> figured that out, thanks

[06:20] <ingy> hi Tim

[06:20] <TimToady> and you can leave out the 1 on the "1 skip"

[06:21] <ingy> or do you prefer Mr Toady?

[06:21] <TimToady> if you say 3 skip a block only counts as 1

[06:21] <TimToady> I prefer "hey you!"

[06:21] <[particle]> aha

[06:21] <Auzon> Hue?

[06:21] <ingy> hi hey you

[06:21] <Auzon> :P

[06:21] <TimToady> hey me

[06:22] <allbery_b> "yo"?

[06:22] <TimToady> a statement counts as starting at a line with "is" et al, and terminating with a line with  ; (and optional comment)

[06:23] <pugs_svn> r19590 | particle++ | [t/spec] skip some unicode tests for rakudo until we can guarantee folks have icu installed

[06:23] <TimToady> I finally got my pugs smokes working again by skipping the tests that spat out malformed utf-8

[06:24] <TimToady> we probably need another verb in fudge like "inline" so we can just insert code to call "skip_rest" and such

[06:25] <allbery_b> pugs still losing for me.  I'm not sure if it's the darcs ghc or the new cabal, but the package.conf-mangling wrapper for ghc that pugs uses is failing to find any installed packages (like, say, bse)

[06:25] <allbery_b> er, base

[06:25] <TimToady> I made fudged files end with exit(1) so they come out "dubious" despite passing :)

[06:26] <TimToady> what version of ghc?

[06:26] <TimToady> (I use svn so can't help with darcs)

[06:26] <allbery_b> 6.9-* from darcs

[06:26] <TimToady> yow

[06:26] <allbery_b> (the equivalent of cvs/svn HEAD)

[06:27] <TimToady> still at 6.6.1 meself

[06:27] <[particle]> TimToady: rakudo is working with fudge now, so it's full steam ahead

[06:27] <TimToady> [particle]++

[06:27] <allbery_b> guess I'll try to find a 6.6.1 package for ppc then

[06:28] <allbery_b> (have 6.6.0 and recent 6.9s)

[06:28] <TimToady> It's actually quite fun to watch rakudo following in pugs footsteps wrt testing and development

[06:28] <TimToady> it's a concrete example of the good kind of cross-fertilization

[06:29] <TimToady> and a sign that we can use our differences as a strength rather than a weakness

[06:30] <TimToady> anyhoo, thanks for helping with fudge

[06:31] <TimToady> zzz &

[06:36] <[particle]> t\spec\S29-str\ucfirst.rakudo

[06:36] <[particle]>   Non-zero exit status: 1

[06:36] <[particle]> lovely of you to create fudge in the first place. all i had to do was complain properly, and there it was!

[06:38] <TimToady> you either want to drop the 2 or the block there

[06:39] <TimToady> the block only counts as 1 skip

[06:39] <[particle]> i'll fix that up

[06:39] <[particle]> just good to know it's running the .rakudo files now :)

[06:39] <[particle]> and giving exit(1)

[06:40] <TimToady> probably still need a way to say the following should be multiplied by N for loops and such

[06:41] <TimToady> maybe I should force the count on a block to be interpreted that way

[06:41] <TimToady> but I still think it's an attribute of the block, not the skip command

[06:41] <[particle]> as long as fudge handles the preprocessing, it's all good

[06:41] <TimToady> since it's shared by all platforms

[06:42] <[particle]> i suppose fudge could look ahead and generate the block count

[06:42] <TimToady> maybe a #?all: scale 5

[06:42] <TimToady> or some such

[06:42] <TimToady> I'll think about it overnight.

[06:43] <[particle]> i'm sure you'll come up with something. you always do.

[06:43] <TimToady> meanwhile, it really doesn't matter so much if the count gets off

[06:43] <[particle]> not for us yet, anyway. i just want to be able to get the files parsing properly

[06:44] <TimToady> well, didn't get a nap today, so really need to thunk...

[06:44] <TimToady> zzz really &

[06:44] <[particle]> enjoy

[06:47] *** jisom joined
[06:48] *** ashleyb left
[06:51] *** lisppaste3 left
[06:58] <pugs_svn> r19591 | particle++ | [t/spec] fix some incorrect test markers for rakudo

[07:03] *** alester left
[07:08] <[particle]> TimToady: skip throws off the line count without a block:

[07:08] <[particle]> #?rakudo: 2 skip "unicode"

[07:08] <[particle]> skip(1,"unicode"); # { is(uc("ß"), "SS", "uc() of non-ascii chars may result in two chars");

[07:08] <[particle]> #  }

[07:09] <[particle]> that extra # } is trouble. probably don't even need # { and # } for single lines

[07:09] <[particle]> bed &

[07:11] *** alester joined
[07:11] <pugs_svn> r19592 | putter++ | [kp6] Emit/Ruby.pm: a minor bit of transliterating

[07:13] *** lisppaste3 joined
[07:26] *** iblechbot joined
[07:32] <pugs_svn> r19593 | particle++ | [t/spec] rakudo markers

[07:33] *** alester left
[07:50] *** BinGOs joined
[07:57] *** Auzon left
[08:02] *** Aankhen`` joined
[08:17] *** iblechbot left
[08:19] *** kst joined
[08:24] *** agentzh joined
[08:32] *** meppuru joined
[08:34] *** iblechbot joined
[08:40] *** barney joined
[09:12] *** devogon joined
[09:27] *** jisom left
[09:46] *** barney left
[09:58] *** jjore left
[09:59] *** meppuru is now known as meppl

[10:16] *** ludan joined
[10:33] *** araujo left
[10:50] *** zhuzi joined
[10:53] *** zhuzi left
[11:03] *** nothingmuch joined
[11:24] *** zamolxes left
[11:25] *** chris2 joined
[11:45] *** pjcj_ left
[11:53] *** ruoso joined
[12:00] *** xinming left
[12:04] *** fglock joined
[12:06] <fglock> @tell obra re test prioritization, this looks interesting  http://mapstext.unl.edu/public/prioritization/

[12:06] <lambdabot> Consider it noted.

[12:13] *** lichtkind joined
[12:14] <lichtkind> i have problems witz the perl 6 wiki

[12:44] <fglock> how about adding severity/criticality to at least some of the tests?

[12:44] *** fglock left
[12:52] <integral> hmm, this month's MSDN magazine has an article on writing compilers from .NET (the hard way with manually written lexers and parsers :-)

[13:17] *** ebassi joined
[13:51] *** njbartlett__ joined
[13:54] *** njbartlett_ left
[14:07] *** alester joined
[14:07] *** stevan_ left
[14:09] *** stevan_ joined
[14:13] <meppl> http://search.cpan.org/~audreyt/

[14:13] <lambdabot> Title: &#9787; &#21776;&#40179; &#9786; - search.cpan.org

[14:13] <meppl> beautiful picture there

[14:14] <meppl> lambdabot, nice try

[14:24] *** stevan_ left
[14:26] *** alester left
[14:36] *** stevan_ joined
[14:36] *** kanru left
[14:38] *** stevan_ left
[14:44] *** jferrero joined
[14:45] *** icwiener joined
[14:47] *** stevan_ joined
[14:50] *** stevan_ left
[14:50] *** stevan_ joined
[14:58] *** kanru joined
[15:03] *** soisoisoi joined
[15:08] *** penk joined
[15:09] *** wknight-away joined
[15:16] *** alester joined
[15:25] <pugs_svn> r19594 | ruoso++ | [smop] adding a new test before starting to implement the interpreter logic

[15:28] <ruoso> fgl

[15:28] <ruoso> oops

[15:32] *** stevan_ left
[15:38] *** __Ace__ joined
[15:39] *** stevan_ joined
[15:39] *** stevan_ left
[15:40] *** stevan_ joined
[15:43] *** wknight-away left
[15:43] *** NathanE joined
[15:53] *** stevan_ left
[15:53] *** stevan_ joined
[15:54] *** stevan_ left
[15:54] *** stevan_ joined
[15:56] <pugs_svn> r19595 | particle++ | [t/spec] rakudo skip markers

[16:00] <ruoso> I've realised that delaying the gc implementation to the oo system hidden behind the responder interface brought me an unexpected important feature... I can have immortal values that are not subject to gc at all..

[16:00] <ruoso> the constant identifiers are some of them...

[16:02] <TimToady> hmm, does that work for native types, I wonder...

[16:04] <ruoso> TimToady, in theory, it can

[16:05] <ruoso> because native types cannot have their representation changed

[16:05] <ruoso> so we can just assume to know how they are

[16:05] <wolverian> http://www.theonion.com/content/news/earthquake_sets_japan_back_to_2147 quite OT, but funny, and I was led here via charles stross's blog, who has a section for perl on his site, so it's not quite completely OT, right..

[16:05] <lambdabot> Title: Earthquake Sets Japan Back To 2147 | The Onion - America's Finest News Source, http://tinyurl.com/yt4egq

[16:07] *** NathanE left
[16:07] *** ashleyb joined
[16:09] <ruoso> TimToady, you think having some constant ints pre-defined would have any impact?

[16:09] <ruoso> like.. everytime you use a 1, you can use the constant 1 value?

[16:10] *** ashleyb left
[16:10] <TimToady> well, you need to have a representation of the bits somewhere, and there's little point in duplicating if you don't have a machine code that inlines and forces indirection

[16:10] <TimToady> instead

[16:11] <TimToady> and as long as you keep your readonlyness straight, it works

[16:12] * ruoso interesting the fact that when I was putting the tags for smop in ohloh and it listed squeak as a related project...

[16:12] <ruoso> TimToady, ints are readonly by definition

[16:12] <ruoso> there's simply no way of "legally" changing its values

[16:13] <TimToady> well, it was easy enough to change them in Fortran

[16:14] <ruoso> I mean, the pointer is there, the structure is known, but the API doesn't expose it...

[16:14] <ruoso> I mean, not even the typedef is exposed to the public api

[16:14] <ruoso> it's all design by contract

[16:17] <ruoso> It's almost void* everywhere... it's SMOP__Object* everywhere...

[16:21] <ruoso> hmmm...

[16:22] <ruoso> ohloh really thinks smop is related to smalltalk... the two top related-by-tag projects to smop are squeak and smalltalk yx...

[16:26] *** jhorwitz joined
[16:45] *** netix joined
[16:45] <netix> Hi, I know it must be a borring question but, do you know any date about perl 6 release ? On Internet I saw "alpha in the begin of 2007 and maybe a release at next christmas"

[16:47] <TimToady> the Internet is a big place

[16:48] <icwiener> :)

[16:50] <TimToady> it's possible that there are universes in which Perl 6 is done already, and maybe the Internet leaks between universes.

[16:50] <netix> TimToady> like ONE with jet lee ? :)

[16:51] <TimToady> sorry, he's rocket lee in that universe

[16:52] <TimToady> it's a strange quirk of english that jets aren't rockets, but rockets use jet propulsion

[16:53] <netix> TimToady> anyways, any idea of a period for release ?

[16:53] <TimToady> we'll release as soon as we get up to about 40,000 passing regression tests.

[16:54] <TimToady> so you'd better get busy :)

[16:55] <netix> lol... thanks for help

[16:56] <pugs_svn> r19596 | ruoso++ | [smop] smop_interpreter.c. The instance that holds the current continuation. Some code done, but now I need to define the capture api

[16:59] *** DarkWolf84 joined
[16:59] <ruoso> TimToady, I know that the capture object is supposed to be used with prefix $, @ and % to get each value, but this seems a little too much overhead for the low-level... 

[17:00] <ruoso> do you think methods for getting explicitly the named and positional arguments should be part of the spec of the capture object?

[17:01] <TimToady> to the first approximation, a capture is just a list of generators

[17:01] <TimToady> some of which are marked as invocant or named, but to begin with they could just live in a list

[17:02] <TimToady> and the methods could comb them out of the list on demand

[17:02] <stevan_> this might be of interested to you p6 folks, we just added rudementary support for attribute "traits" in Moose

[17:02] <stevan_> http://code2.0beta.co.uk/moose/svn/Moose/trunk/t/020_attributes/015_attribute_traits.t

[17:02] <lambdabot> http://tinyurl.com/26s276

[17:03] <stevan_> basically it applys a set of roles to an anon-subclass of the attribute metaobject

[17:03] <stevan_> which should allow us to immitate some of the crazier p6 bits

[17:05] <ruoso> TimToady, I'm not yet dealing with the high-level capture object... I'll use design-by-contract to implement a native capture type that is compatible with the high-level capture, but that can be implemented simpler than the high-level capture object

[17:05] <ruoso> the only requirement is that both implements the same API

[17:05] <[particle]> farewell &

[17:06] *** [particle] left
[17:08] <ruoso> TimToady, for instance, the low-level Capture won't require the values to be inside containers for it to fetch

[17:08] <ruoso> as it will make avaiable a method for returning the actual value, instead of a container with the value

[17:10] <TimToady> well, $ @ % & are essentially just methods too

[17:10] <ruoso> yeah.. i know...

[17:10] <ruoso> but they return containers

[17:10] <ruoso> and that's an overhead I'd like to avoid 

[17:10] <ruoso> as I don't even have the containers yet in the low-level

[17:11] <TimToady> I don't see why they have to return containers

[17:11] <ruoso> I mean, I need a capture object to be able to initialize the Scalar prototype, for instance

[17:11] <TimToady> they're just context

[17:11] <ruoso> doesn't $ returns a Scalar?

[17:11] <TimToady> no, it returns an item

[17:12] <TimToady> and @ returns a list, not an Array

[17:12] <ruoso> isn't item a kind of a simpler container?

[17:12] <ruoso> like something I call FETCH?

[17:13] <TimToady> sure, but 1.STORE fails

[17:14] <ruoso> one way or another

[17:14] <ruoso> it is a container...

[17:14] <TimToady> only in the sense that everything is an object

[17:14] <ruoso> exactly

[17:14] <TimToady> and all objects are containers

[17:14] <ruoso> hm?

[17:15] <ruoso> int has a method FETCH?

[17:15] <ruoso> that returns itself?

[17:16] <TimToady> presumably FETCH would be a noop on a nonScalar item

[17:16] <ruoso> ok... let me see if I got it straight...

[17:16] <TimToady> you only need a Scalar when you have an lvalue, not an rvalue

[17:17] <TimToady> $foo = 42 requires a Scalar on the left

[17:17] <TimToady> if you say $foo := 42 then $foo isn't in fact a Scalar anymore

[17:17] <TimToady> and $foo = 1 will fail after the binding

[17:18] <ruoso> so Scalar is not really a class, it's more like a role

[17:19] <ruoso> or even, an interface

[17:19] <ruoso> an API actually

[17:19] <TimToady> just like Array or Hash, but not needing a subscript

[17:21] *** xinming joined
[17:22] <ruoso> ok... I need to figure out how that impacts in the capture...

[17:22] <ruoso> in the lowlevel, I have methods like

[17:23] <ruoso> smop_new_capture_for_some_method(SMOP__Object invocant, SMOP__Object thefirstpositional, SMOP__Object thenamedfoo)

[17:23] <ruoso> this would create a capture equivalent to

[17:23] <ruoso> ($invocant: $thefirstpositional, :foo($thenamedfoo))

[17:24] <TimToady> that's for creating an unbound call?

[17:25] <ruoso> That's what will be put as the parameter to the SMOP_DISPATCH(interpreter, responder, capture) call

[17:25] <ruoso> sorry

[17:25] <ruoso> SMOP_DISPATCH(interpreter, responder, identifier, capture)

[17:25] <ruoso> that's the deepest low-level thing

[17:25] <TimToady> seems reasonable; the syntax is designed so that you can sort out the inf/pos/named at compile time

[17:26] <ruoso> Ok... but which method identifiers should I use to fetch the values from the capture object?

[17:26] <ruoso> $ would return the invocant

[17:26] <ruoso> (I'm not doing any bindings in the low-level...

[17:27] <ruoso> @ would return a list to which I could ask for an item

[17:27] <TimToady> .item .list .hash are the corresponding context methods

[17:27] <ruoso> ok...

[17:27] <TimToady> (and .slice is a variant of .list)

[17:28] <ruoso> the question is... wouldn't it be nice to have a .named(identifier) and a .positional(index) methods?

[17:28] <ruoso> to avoid the eventual proxy object?

[17:30] <TimToady> well, sure, low-level binding needs to do whatever will be efficient

[17:30] <ruoso> the thing is that I won't even bind in the low-level

[17:30] <ruoso> all parameters are rw

[17:30] <TimToady> and even when binding to *@_ and *%_, those proxies are only the *remaining* args

[17:31] <TimToady> so shouldn't be confused with @($capture) or %($capture)

[17:32] *** araujo joined
[17:33] <TimToady> you do probably need to be careful that you have a way of preventing eventual assignment to a formal parameter that isn't declared "rw", even if the actual argument is "rw"

[17:33] <TimToady> but it's just something to be bear in mind

[17:33] *** qmole_ left
[17:34] <ruoso> ok.. but I'm working in deep low-level here.. so in fact they're not really rw... I just don't copy them...

[17:35] <TimToady> that's fine; is how all computers really work anyway...

[17:35] <TimToady> well, most of them

[17:36] <TimToady> there have been computers with fine-grained ro/rw attriubutes

[17:36] <ruoso> but this problem will probably be solved when I implement the Signature

[17:36] <ruoso> and then I can bind the capture to the signature and that's all

[17:37] <TimToady> sounds like you're on the right track

[17:38] <TimToady> certainly you want the mechanism to be fast when it can be proven that a formal parameter cannot be written to

[17:38] <TimToady> no point in protecting it if there's no threat

[17:38] <TimToady> if protecting it implies overhead

[17:39] <ruoso> ok.. so for the lowest-level calls, I will use .invocant(), .positional(index) and .named(identifier) to fetch the items of the capture

[17:41] <ruoso> and I'll have to use a trick to be able to not use a capture to fetch the item from a capture

[17:42] <ruoso> which is to pass the value itself as the capture to those methods

[17:42] <ruoso> instead of another capture

[17:42] <ruoso> like...

[17:43] <ruoso> .invocant(|1)

[17:43] <ruoso> .positional(|1)

[17:43] <ruoso> i mean

[17:43] <ruoso> but in fact it's something mor

[17:44] <ruoso> my $a = SMOP__CAPTURE__OPCAPTURE__postional_new($capture, 1); $capture.positional(|$a);

[17:45] <ruoso> where $capture.positional would refuse any other object type

[17:48] <ruoso> so it probably should be named as something else...

[17:51] <TimToady> have you thought about optimizing multiple dispatch yet?

[17:51] <ruoso> only that one way to do it is to check for known responder interfaces

[17:55] <ruoso> TimToady, is there any reason for Capture and Signature not being native?

[17:56] <ruoso> I mean... it makes things so harder

[17:56] <TimToady> depends on what you mean by native

[17:57] <ruoso> by not being possible to change its representation

[17:57] <TimToady> certainly captures and signatures are at the top level just values 

[17:57] <TimToady> it's only by indirection that you get generators or containers

[17:58] <ruoso> If I could count on knowing for sure the C structure of a capture (like I can with int)

[17:58] <ruoso> it would be much easier

[17:59] <TimToady> Signature and Capture are listed as immutable in S02

[17:59] <ruoso> but this doesn't mean that any thing can say true to .does(Capture)

[18:00] <TimToady> well, sometimes you have to box values

[18:00] <ruoso> I mean.. I can consider to be illegal for anything else to say true on .does(int)

[18:00] <TimToady> and most value types are punning with an identically named role

[18:01] <TimToady> well, in a sense there is no int type

[18:01] <TimToady> the type of int is Int

[18:01] *** meppl left
[18:01] <TimToady> but with restrictions on storage

[18:02] <ruoso> I mean... 

[18:02] <ruoso> I can count on every int to have *my* responder interface

[18:02] <ruoso> but I can't count on every Int to have the same responder interface

[18:03] <ruoso> I can have a perl5 and a parrot value claiming to be Int

[18:03] <TimToady> yes, Int is a role that can be mixed into make other RIs

[18:04] <TimToady> but we can restrict Capture/Signature, or call 'em capture/signature, if we need to

[18:04] <ruoso> pleeeeeeeeeeeease

[18:04] *** meppl joined
[18:04] <ruoso> having the possibility of a foreign object to pass parameters is overkill, imho

[18:05] <ruoso> i mean, using a sv* as a capture...

[18:05] <ruoso> for instance

[18:05] <TimToady> you don't have to convince me--I want dispatch to be fast

[18:06] <ruoso> so, can I consider the capture and the signature to be "native" in the same sense as "int"?

[18:07] <TimToady> the lowercase ones

[18:07] <TimToady> we still might like a Capture role that can mix

[18:07] <ruoso> Ok

[18:07] <TimToady> for instance, into Match objects

[18:07] <TimToady> but then you just have to unbox to capture

[18:07] <TimToady> if you use it that way

[18:08] <ruoso> seems perfect.

[18:09] <ruoso> and I think that for smop, the capture in SMOP_DISPATCH will always be the lowercase one... the language must unbox it before passing it to the method...

[18:09] <ruoso> this way I don't have to unbox everytime...

[18:10] <ruoso> or at least check if it needs to be unboxed 

[18:10] <wolverian> ruoso++ # I don't understand any of this but it is fascinating 

[18:10] <ruoso> heh

[18:10] <ruoso> I'm still in the beach trying to pull my boot straps to get out of the water...

[18:10] <TimToady> maybe the original boxed Capture goes through the invocant if you don't have one.

[18:10] <TimToady> maybe not

[18:10] *** chris2 left
[18:11] <TimToady> bbl &

[18:13] <ruoso> TimToady, that's the reason for the .^native(type) method, that I've declared in SMOP...

[18:13] *** ebassi left
[18:14] <ruoso> it actually shouldn't be called ^native, because that seems to be a method for the metaclass...

[18:15] <ruoso> maybe it can be delegated to the metaclass if the responder doesn't intercept it

[18:15] <ruoso> but the expected is that the responder interface intercepts it

[18:29] *** jisom joined
[18:32] <pugs_svn> r19597 | ruoso++ | [smop] Now we have the native capture type. This simplifies a *LOT* everything, as I can count on knowing the C structure of the capture in every call. TimToady++

[18:34] *** Khisanth left
[18:36] *** Khisanth joined
[18:36] *** khisanth_ joined
[18:36] *** khisanth_ left
[18:37] *** wknight-away joined
[18:41] *** alester left
[18:46] *** wtgee joined
[18:52] <lichtkind> TimToady: are your shure that the  reduction syntax [\ ] is optimal?

[18:56] <ruoso> for the record: http://www.perlfoundation.org/perl6/index.cgi?smop_boot_sequence documents what will happen in the smop_init() call.

[18:56] <lambdabot> Title: SMOP Boot Sequence / Perl 6

[18:59] <TimToady> lichtkind: optimal in which dimension or set of dimensions?

[19:00] <TimToady> (it's primarily optmized for the visual dimensionh)

[19:00] <lichtkind> TimToady: honestly the syntax is ugly

[19:00] <TimToady> it's an unusual thing to want to do

[19:00] <lichtkind> i know weird things should look weird

[19:01] <TimToady> and the triangle part of it is kinda pretty

[19:01] <lichtkind> triangle ?

[19:02] <TimToady> yes, the left vertical and the backslash suggest a triangle

[19:02] <TimToady> [\,] 1..10

[19:02] <TimToady> 1

[19:02] <TimToady> 1,2

[19:02] <TimToady> 1,2,3

[19:02] <TimToady> 1,2,3,4

[19:02] <TimToady> 1,2,3,4,5

[19:03] <TimToady> almost the same slope even

[19:03] <ruoso> brb &

[19:03] <lichtkind> TimToady: triangle numbers i see , i recently know them; since we boost the perl ratings in project euler a bit

[19:04] <lichtkind> TimToady: its about mathematic problems

[19:04] <lichtkind> TimToady: and during this tasks i many times wished to have perl 6 today

[19:04] <TimToady> well, you and me both :)

[19:05] <lichtkind> :)

[19:08] <lichtkind> TimToady: so this won't change ?

[19:09] <TimToady> not likely unless somebody comes up with something spectacularly better

[19:11] *** meppl left
[19:12] *** meppl joined
[19:12] <lichtkind> TimToady: im really tempted

[19:18] *** gbacon left
[19:19] *** gbacon joined
[19:19] *** soisoisoi left
[19:34] *** simcop2387 joined
[19:34] *** drrho joined
[19:36] *** kane_ left
[19:43] *** rindolf joined
[20:19] *** alester joined
[20:27] *** jjore joined
[20:35] *** kst left
[20:37] *** gbacon left
[20:37] *** gbacon joined
[20:38] *** kst joined
[20:39] *** kst left
[20:42] *** rindolf left
[20:45] *** Aankhen`` left
[20:48] <wolverian> hmm. building a nested set of sets of sets ... Set(Set(), Set(1, 2, Set(3, 4, ...))) is okay, I suppose, but I'm wondering if there's a less pythonic way.

[20:49] <wolverian> this isn't very relevant, really, since I don't foresee myself doing this in perl6. using maxima for now.. :)

[20:49] <wolverian> though I don't like maxima's lack of nice operators

[20:50] <wolverian> Set.new_recursively(@@(...))

[20:51] <wolverian> %%() almost makes sense here :p

[20:51] *** kst joined
[20:55] *** xinming left
[20:58] *** drrho left
[21:01] <wolverian> as a side note, you can't put a set object inside another set in python

[21:02] <wolverian> hm, ah, you can't put _mutable_ sets inside other sets

[21:03] <wolverian> that makes sense :)

[21:14] *** xinming joined
[21:17] *** kst left
[21:19] *** meppl left
[21:21] *** meppl joined
[22:00] *** alester left
[22:01] *** jhorwitz left
[22:05] *** ofer left
[22:12] *** Schwern left
[22:12] *** Schwern joined
[22:18] *** lodin joined
[22:18] *** lodin is now known as lodin0

[22:22] *** icwiener left
[22:28] *** alester joined
[22:35] *** iblechbot left
[22:39] *** macroron joined
[22:43] *** alester left
[22:46] *** Auzon joined
[22:50] *** jferrero left
[23:01] *** IllvilJa left
[23:18] *** justatheory joined
[23:35] <meppl> good night

[23:37] *** macroron left
[23:40] *** meppl left
[23:56] *** netix left
