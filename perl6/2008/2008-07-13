[00:02] *** icwiener_ left
[00:11] <pugs_svn> r21322 | ruoso++ | [smop] use sm0p labels in test/14... still with some memory leaks...

[00:14] *** Caelum joined
[01:01] *** alester left
[01:08] <pugs_svn> r21323 | ruoso++ | [smop] Some more changes trying to catch the memory leak... but this kind of debug is incredibly hard...

[01:10] *** alanhaggai_ is now known as alanhaggai

[01:12] *** alester joined
[01:15] <meppl> good night

[01:17] *** meppl left
[01:31] *** alester left
[01:36] *** wknight8111 left
[01:40] *** thepler_ left
[01:43] *** teejj joined
[01:50] *** thepler_ joined
[02:06] *** silug left
[02:07] *** thepler_ left
[02:07] *** Limbic_Region left
[02:12] *** sri_work left
[02:15] *** teejj left
[02:18] *** peepsalot joined
[02:34] *** thepler_ joined
[02:57] *** kanru2 is now known as kanru

[03:00] *** thepler_ left
[03:06] *** elmex_ joined
[03:07] *** ruoso left
[03:19] *** alester joined
[03:22] *** elmex left
[03:23] *** elmex_ is now known as elmex

[03:29] *** kanru left
[04:02] *** davidm123 left
[04:03] *** silug joined
[04:04] *** redicaps joined
[04:06] *** silug left
[04:08] *** kanru joined
[05:18] *** kanru left
[05:20] *** peepsalot left
[05:23] *** peepsalot joined
[05:28] *** Psyche^ joined
[05:40] *** Patterner left
[05:40] *** Psyche^ is now known as Patterner

[06:03] *** c9s joined
[06:03] *** silug joined
[06:09] *** silug left
[06:30] *** c9s left
[06:59] *** c1sung joined
[07:02] *** redicaps left
[07:07] *** alester left
[07:31] *** peepsalot left
[07:40] *** justatheory left
[07:43] *** pmurias joined
[07:43] *** sri_work joined
[07:58] *** kanru joined
[08:07] *** silug joined
[08:11] *** Caelum left
[08:11] *** lumi left
[08:11] *** jan__ left
[08:11] *** frobnitz left
[08:11] *** zostay left
[08:12] *** Caelum joined
[08:13] *** zostay joined
[08:13] *** frobnitz joined
[08:13] *** lumi joined
[08:22] *** jan__ joined
[08:23] *** barney joined
[08:24] *** iblechbot joined
[08:25] *** alanhaggai left
[08:28] *** jan__ left
[08:36] *** jan__ joined
[08:46] *** silug left
[08:51] *** barney left
[09:20] *** barney joined
[09:48] <pugs_svn> r21324 | pmurias++ | [sm0p] move_capturize is no longer a special case

[09:57] <pugs_svn> r21325 | pmurias++ | [sm0p] moved misc/sm0p to v6/smop/sm0p

[10:10] *** wknight8111 joined
[10:12] *** chris2 joined
[10:26] *** b0xd joined
[10:27] *** jovs joined
[10:31] *** b0xd left
[10:36] *** sri_work_ joined
[10:37] *** wknight8111 left
[10:42] *** rindolf joined
[10:44] *** silug joined
[10:48] *** silug left
[10:50] <pmurias> how should i get hold of the stack backtrace in c (i need to to get it to print where the reference counters get --/++) what's the best way to do it?

[10:51] <pmurias> using gdb, inline assembler, or gprof output are things which come to my mind

[10:52] *** sri_work left
[11:08] *** kanru left
[11:11] *** jfredett joined
[11:15] *** redicaps joined
[11:15] *** ruoso joined
[11:16] <pmurias> ruoso: hi

[11:16] <ruoso> pmurias, hi

[11:17] <pmurias> re copy, are you sure you haven't fixed something, it didn't work when i tried

[11:17] <ruoso> I've just changed the test count... you had 1..2 where you had only one tes

[11:17] <ruoso> test

[11:18] <ruoso> and I added a SMOP_RELEASE call for the value you initialized outside the sm0p block

[11:20] <pmurias> well i find things work strangely sometimes, evil spirits living inside my laptop most likely ;)

[11:20] *** meppl joined
[11:21] <pmurias> C

[11:21] <pmurias> SORRY

[11:21] <pmurias> (caps lock)--

[11:24] <pmurias> ruoso: regarding .call, implementing it would require lots of code duplication if it was possible to specifiy the responder interface would the move_* methods be required?

[11:24] *** jfredett_ left
[11:26] <ruoso> pmurias, doesn't move_* accept 0 as target parameter?

[11:29] <pmurias> ruoso: you mean making .call all the move_stuff?

[11:29] <ruoso> calling the move_* from the .call method

[11:29] <ruoso> moving to the current node...

[11:31] <pmurias> would it be possible to use a q:sm0p block for that?

[11:32] <ruoso> hmmm... I don't think so...

[11:36] <pmurias> what would be the main problem?

[11:36] <pmurias> (besides it being slow)

[11:38] <ruoso> the fact that you would need to recurse, and the CurrentFrame wouldn't be the frame you want to move the values from

[11:38] *** gbacon left
[11:41] *** kanru joined
[11:41] <pmurias> ruoso: i would use a diffrent frame

[11:41] <ruoso> yes... how would you move_responder from the original frame?

[11:43] <pmurias> the code duplication starts to look more inviting now ;)

[11:43] <ruoso> heh...

[11:43] <ruoso> but you can SMOP_DISPATCH manually

[11:43] <ruoso> and then you stay in the same frame

[11:44] <pmurias> doing SMOP_DISPATCH manually is horrible

[11:44] <ruoso> heh...

[11:46] <pmurias> so i think it's either having the move methods or call

[11:49] <pmurias> if nodes was an array we could have the move methods in sm0p/perl6

[11:49] *** pbuetow joined
[11:50] <ruoso> pmurias, the nodes are an array... you just need to expose the api

[12:04] *** jovs left
[12:19] <pmurias> i'm looking at libjit now, have you thought how are we going to do NCI?

[12:33] *** pbuetow left
[12:34] *** pbuetow joined
[12:45] *** silug joined
[12:50] *** silug left
[13:21] *** Pe_Elle joined
[13:35] *** snooper joined
[13:49] *** pbuetow left
[14:02] *** sri_work_ left
[14:02] *** sri_work joined
[14:47] *** rindolf left
[14:48] *** silug joined
[14:51] *** silug left
[14:59] *** redicaps left
[15:00] *** redicaps joined
[15:21] *** jan__ left
[15:29] <pugs_svn> r21326 | pmurias++ | sm0p was moved to v6/smop

[15:44] *** ruoso left
[16:05] *** justatheory joined
[16:14] *** justatheory left
[16:46] *** kanru left
[16:49] *** silug joined
[16:59] *** r0bby left
[17:05] *** jan_ joined
[17:17] *** barney left
[17:19] *** silug left
[17:30] *** sri_work left
[17:31] *** Limbic_Region joined
[17:36] *** icwiener joined
[17:54] *** xinming_ joined
[17:59] *** diakopter left
[18:07] *** xinming left
[18:13] *** snooper left
[18:27] *** xinming_ is now known as xinming

[18:34] *** Schwern joined
[18:44] *** ruoso joined
[18:52] *** Schwern left
[18:56] <Auzon> t/spec/S02-builtin_data_types/multi_dimensional_array.t seems to assume that $foo[0][0] means the same as $foo[0;0]. Is that correct? It doesn't seem like it to me.

[18:57] <Auzon> Also, is there any difference between using an array or an array stored in a scalar when it comes to multidimensional arrays?

[18:58] * moritz_ tries to check

[18:59] <Auzon> The spec was pretty silent about the [0][0] syntax

[18:59] <moritz_> the difference between an array and an array in a scalar is purely syntactical, because the array container forwards method calls to its content

[18:59] <moritz_> so my Array of Int @x declares an array of Arrays of Int

[19:00] <moritz_> whereas my Array of Int $x; declares an Array of Int (afaict)

[19:01] <Auzon> OK. As far as I can tell, @foo[0][0] or $foo[0][0] is like the Perl 5 style, but @foo[0;0] is true multidimensional (in the sense that it has a defined boundary) and isn't the same thing.

[19:02] <moritz_> those @array[0][0] tests are pretty old, if you look at svn blame

[19:02] <moritz_> r1653

[19:02] <Auzon> wow

[19:02] <moritz_> maybe send a mail to p6l asking for clarification

[19:03] <moritz_> autovivification.t has a lot of redundant smartlinks

[19:04] <moritz_> 5 consecutive smartlinks that are displayed in a row in the spec doc

[19:04] <Auzon> re mail, sounds good

[19:05] <Auzon> re smartlinks, I'll clean that up unless you've started on it already

[19:06] <moritz_> I haven't

[19:07] <Auzon> ok, done

[19:07] <moritz_> Auzon++

[19:07] <pugs_svn> r21327 | Auzon++ | [gsoc_spectest] smartlink cleanups

[19:09] *** Schwern joined
[19:10] <Auzon> hm. I was descriptive there ;)

[19:10] *** chris2 left
[19:10] <moritz_> sufficient ;)

[19:11] <Auzon> What is the terminology for $foo[0][0] in Perl 6? $foo is a capture of an array, and $foo[0] is also a capture of an array, right?

[19:12] <moritz_> I think so, yes

[19:12] <moritz_> or you can just say that both $foo and $foo[0] are Array objects

[19:12] <Auzon> and $foo[0;0] refers to a multidimensional array object, right?

[19:13] <moritz_> pugs: my @x = <a b c>; my $y = @x; my $z = \@x; say $y.perl, ' ', $z.perl

[19:13] <p6eval> pugs: OUTPUT[\\("a", "b", "c") \\("a", "b", "c")␤]

[19:13] <moritz_> $foo in $foo[0;0] referst to a multidim array object

[19:13] <Auzon> ok, create

[19:13] <Auzon> *great

[19:13] <moritz_> $foo[0;0] referst to a stored item

[19:14] <moritz_> s:first /st/t/

[19:14] * Auzon doesn't know how 'great' became 'create'

[19:14] *** iblechbot left
[19:15] <moritz_> my $str = 'create' ; # ;-)

[19:17] *** silug joined
[19:33] *** wknight8111 joined
[19:37] *** silug left
[19:57] <moritz_> Auzon: still around?

[19:57] *** wknight8111 left
[19:58] *** Schwern left
[19:59] <moritz_> rakudo: say ("a" ~~ m/a/).WHAT

[19:59] <p6eval> rakudo 29398: OUTPUT[Statement not terminated properly at line 1, near "/).WHAT"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤]

[20:01] *** Schwern joined
[20:04] <Auzon> moritz_: I am now.

[20:04] <moritz_> Auzon: I'm looking at rakudo's ROADMAP, and collecting stuff that's missing there

[20:05] <moritz_> http://nopaste.snit.ch/13574 this is what I've got so far

[20:05] <moritz_> Auzon: do you know other major stuff (from top of your head) that's missing?

[20:06] <Auzon> Something that's a big deal for the tests is that eval's scope is wrong (e.g. my $foo = 5; eval 'say $foo'; doesn't see $foo in the eval)

[20:07] <moritz_> that's a big annoyance, but nothing that has to appear in the roadmap; pmichaud is workiing on that (mostly parrot issues blocking)

[20:07] <Auzon> Right.

[20:07] <Auzon> I can't think of anything big missing.

[20:07] <moritz_> ok, thanks for looking

[20:16] <pmurias> ruoso: if libjit is GPL, can we use it?

[20:32] <moritz_> rakuo: say "abc".bytes

[20:32] <moritz_> rakudo: say "abc".bytes

[20:32] <p6eval> rakudo 29398: OUTPUT[Method 'bytes' not found for invocant of class 'Perl6Str'␤current instr.: '_block11' pc 21 (EVAL_13:13)␤]

[20:32] <moritz_> rakudo: say "abc".codes

[20:32] <p6eval> rakudo 29398: OUTPUT[Method 'codes' not found for invocant of class 'Perl6Str'␤current instr.: '_block11' pc 21 (EVAL_13:13)␤]

[20:32] <moritz_> rakudo: say "abc".graphs

[20:32] <p6eval> rakudo 29398: OUTPUT[Method 'graphs' not found for invocant of class 'Perl6Str'␤current instr.: '_block11' pc 21 (EVAL_13:13)␤]

[20:33] <Auzon> rakudo: say "abc".chars

[20:33] <p6eval> rakudo 29398: OUTPUT[3␤]

[20:33] <Auzon> At least it has one of them ;)

[20:34] <moritz_> rakudo: say "äü".chars

[20:34] <p6eval> rakudo 29398: OUTPUT[2␤]

[20:35] <moritz_> rakudo: say "A҄".chars

[20:35] <p6eval> rakudo 29398: OUTPUT[2␤]

[20:35] <moritz_> ok, current .chars corresponds to .codes actually

[20:36] <moritz_> (the A҄ was entered as two codepoints)

[20:37] <Auzon> ah

[20:37] <Auzon> Is there a one-char version of that?

[20:37] <moritz_> don't think so

[20:37] <moritz_> it's a cyrillic combining accent

[20:37] <moritz_> ;-)

[20:38] <moritz_> rakudo: say "a𝉄".chars

[20:38] <p6eval> rakudo 29398: OUTPUT[2␤]

[20:38] <moritz_> I have no font that would display it correctly ;)

[20:39] <moritz_> U+1D244 COMBINING GREEK MUSICAL PENTASEME

[20:40] *** donaldh joined
[20:40] <pugs_svn> r21328 | moritz++ | [irclog] dalek in #parrot is a bot

[20:42] <Auzon> ^ a statement of fact.

[20:48] *** jovs joined
[21:04] *** meppl left
[21:11] <pmurias> ruoso: how should pure sm0p file (without c) be distinguished a 'use sm0p;' at front or a heuristic?

[21:14] *** Schwern left
[21:20] *** donaldh left
[21:25] *** jovs left
[21:27] *** GeJ left
[21:28] *** pmurias left
[21:35] *** silug joined
[21:41] *** Alias_ joined
[21:54] *** eternaleye_ left
[21:58] *** justatheory joined
[22:29] *** araujo left
[22:44] *** meppl joined
[23:32] *** s1n left
[23:41] *** bacek joined
[23:42] *** wknight8111 joined
