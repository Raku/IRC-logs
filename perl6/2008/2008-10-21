[00:06] *** eternaleye left
[00:30] <pugs_svn> r22690 | ruoso++ | [smop] p6opaque no longer uses v6-sm0p, uses m0ld in its place. p6opaque comes with a default how that implements using the p6opaque as a value, something that is needed to allow you to set a how.

[00:33] <ruoso> @tell pmurias, there's a quasi-segfault in proto.ri... some place is making an excess release, valgrind is complaining about use of free'd data... 

[00:33] <lambdabot> Consider it noted.

[00:34] *** sri_work_ left
[00:35] <wayland76> @tell moritz_ Thanks for the article!

[00:35] <lambdabot> Consider it noted.

[00:35] * ruoso sleep &

[00:39] <wayland76> particle: Well, the ROADMAP file in the languages/perl6 directory was last updated in August, and I was interested to see if any of those tasks had been completed :)

[00:40] <wayland76> ruoso: G'night

[00:41] *** eternaleye joined
[00:55] *** ruoso left
[00:57] <wayland76> To answer literal's question the other day, rakudo gets released with Parrot, doesn't it?

[01:02] <literal> yeah, that's true

[01:08] <[particle]> yes

[01:13] *** hercynium_ joined
[01:21] <literal> if all(@newvals) > all(@oldvals) { print "These are all bigger than everything already seen." }

[01:21] <literal> can it also be written like this?   if all @newvals > all @oldvals { print "These are all bigger than everything already seen." }

[01:31] <pmichaud> literal: the > operation has higher precedence than list prefix (listop), so the second one would end up parsing as   all( @newvals > all(@oldvals) )

[01:31] <lambdabot> pmichaud: You have 1 new message. '/msg lambdabot @messages' to read it.

[01:31] <literal> ah

[01:31] <pmichaud> so the parens are required.

[01:32] <pmichaud> same with something like    say 3 > 1;    that's equivalent to   say( 3 > 1 )   and not   say(3) > 1

[01:32] <literal> now I'm curious, would this do the right thing? if [&] @newvals > [&] @oldvals { ... }

[01:32] <pmichaud> same issue -- [&] is a list prefix op

[01:33] <literal> ok

[01:52] <wayland76> [particle]: Was that "yes" related to my immediate previous comment, or to my comment about the ROADMAP?

[01:54] *** bsb joined
[01:57] *** wknight8111 left
[02:22] *** jhorwitz left
[02:41] *** ab5tract joined
[02:54] *** alanhaggai joined
[02:56] *** hercynium_ left
[02:58] *** eternaleye_ joined
[03:12] *** eternaleye left
[03:24] *** |Jedai| left
[03:24] *** Jedai joined
[03:24] *** _Jedai_ joined
[03:26] *** awwaiid joined
[03:30] *** spinclad left
[03:38] *** apeiron left
[03:41] *** hercynium_ joined
[03:41] *** Torment left
[03:42] *** apeiron joined
[03:44] *** adc_Penner joined
[04:11] *** allbery_b left
[04:11] *** allbery_b joined
[04:23] *** Psyche^ joined
[04:25] *** adc_Penner left
[04:34] *** Patterner left
[04:34] *** Psyche^ is now known as Patterner

[04:40] *** justatheory left
[04:44] *** alanhaggai left
[04:51] *** ihrd joined
[05:10] *** ab5tract left
[05:21] *** _Jedai_ left
[05:26] *** xinming left
[05:27] *** penk joined
[05:33] *** diakopter left
[05:38] *** TimToady left
[05:39] *** TimToady joined
[05:40] *** diakopter joined
[05:49] *** alanhaggai joined
[06:01] *** Ehtyar joined
[06:13] *** alanhaggai left
[06:17] *** elmex joined
[06:28] *** ashizawa joined
[06:33] *** silug left
[06:34] *** xinming joined
[06:42] <pugs_svn> r22691 | lwall++ | [Cursor] don't cache anonymous lexers

[06:42] <TimToady> (well, not on disk, anyway)

[06:43] *** Jansen_ joined
[06:43] *** Jansen_ left
[06:49] *** sri_work joined
[06:51] *** pbuetow joined
[06:59] *** bsb left
[07:06] *** spinclad joined
[07:19] <azawawi> rx.t took 5486 wallclock secs

[07:23] *** ihrd left
[07:30] *** cosimo joined
[07:36] *** pbuetow left
[07:56] *** iblechbot joined
[08:04] <azawawi> moritz_: ping

[08:05] *** zamolxes left
[08:05] <pasteling> "azawawi" at 212.38.144.4 pasted "Execution time of ETOOMUCHTIME (STD_Syntax_Highlighter)" (377 lines, 26K) at http://sial.org/pbot/32762

[08:07] <pasteling> "azawawi" at 212.38.144.4 pasted "ETOOMUCHTIME full output [includes errors]" (2216 lines, 73.2K) at http://sial.org/pbot/32763

[08:07] <wayland76> no-one here except us pigeons :)

[08:07] <azawawi> pong

[08:07] <azawawi> ;-)

[08:08] *** ejs joined
[08:08] <azawawi> what r u working on wayland76?

[08:15] <azawawi> @tell pmurias i attached the full output along with the summary in http://sial.org/pbot/32762 and http://sial.org/pbot/32763

[08:15] <lambdabot> Consider it noted.

[08:22] *** alanhaggai joined
[08:29] *** tomyan joined
[08:45] *** kanru left
[08:45] *** kanru joined
[09:03] <wayland76> azawawi: Well, mostly I'm waiting for operator overloading :)

[09:04] <azawawi> wayland76: that took some time ;-)

[09:04] <wayland76> In relation to perl6, I'm kinda keen to get some sort of path/globbing thing going for trees

[09:05] <wayland76> yeah, I only check IRC occasionally, although it's often running in the background somewhere

[09:06] <wayland76> But since I don't speak PIR or anything, it basically consisted of a) frantically write tree code for a few days, and b) realise that Perl6 (at least in its Rakudo form) wasn't up to doing what I wanted yet

[09:06] <wayland76> :)

[09:07] <wayland76> What I'd like is to be able to get my hands on the tree of something that's been read in by a grammar

[09:07] <wayland76> (could be XML, but could be something else; I don't mind at the moment :) )

[09:07] * azawawi fixing a nasty bug with firefox unload handler

[09:09] <wayland76> Everything else I want to do is pretty much waiting on the tree thing, which is waiting on operator overloading (and possibly macros, but I'm not sure of that)

[09:10] <wayland76> Basically, I have a number of different objects descended from a base object, and I want a different one to be instantiated depending on the parameters passed to the "new" routine

[09:10] <azawawi> i havent tried any of tree grammar stuff yet...

[09:10] <wayland76> The only way I could think of to implement it was in a similar way to the Perl5 DBI/DBD split

[09:11] <moritz_> that sounds a lot like the "factory" model

[09:11] <lambdabot> moritz_: You have 2 new messages. '/msg lambdabot @messages' to read them.

[09:11] <wayland76> and I think that might need macros

[09:11] <moritz_> @massages

[09:11] <lambdabot> azawawi_ said 22h 20m 57s ago: i added the js tree viewer that we talked about yesterday.

[09:11] <lambdabot> wayland76 said 8h 35m 34s ago: Thanks for the article!

[09:11] <wayland76> I assume you mean the factory pattern, but I'm not much up on patterns :)

[09:13] <moritz_> neither am I

[09:15] <wayland76> I've done similar things to this (ie. DBI/DBD split) before, and what I needed was an eval...

[09:15] <wayland76> which is why I think I might need macros

[09:16] <wayland76> Oh, moritz_ thanks not only for the recent summary article (which was what I was thanking you for above), but also the XML grammar one; I was about to try to write an XML grammar until I found your article :)

[09:17] <moritz_> you're welocme ;)

[09:18] <wayland76> moritz_: I don't suppose you know how to get at the internals of trees that come from grammars in rakudo, do you?

[09:18] <wayland76> Or even what I'd read to find out?

[09:19] <moritz_> you mean introspecting grammars? no idea...

[09:19] <moritz_> and I don't think they are trees, but I think they are a collection of subroutines compiled to PIR

[09:20] <wayland76> Not quite.  Say you have an XML grammar, and you run it on an XML fragment (say <xml><foo/></xml>), that should generate a tree of the XML document

[09:21] <wayland76> or wait...

[09:21] <moritz_> that's iin $/

[09:22] <wayland76> Ok

[09:22] <moritz_> http://perlcabal.org/syn/S05.html#Return_values_from_matches

[09:23] <lambdabot> Title: S05

[09:25] <wayland76> Hmm.  But that appears to be a string that was matched; I was hoping for a tree that was created :)

[09:26] <wayland76> [I'll be busy for maybe 45 minutes, but I'll be back :)]

[09:29] <moritz_> wayland76: you can use that thing as a hash or array to access it as a tree

[09:39] *** alanhaggai left
[09:47] *** zamolxes joined
[09:50] *** alanhaggai joined
[09:54] *** penk left
[10:05] *** kanru left
[10:06] *** kanru joined
[10:06] *** kanru left
[10:06] *** kanru joined
[10:12] *** aindilis left
[10:12] *** aindilis joined
[10:39] *** zamolxes_ joined
[10:39] *** zamolxes left
[10:46] <wayland76> Wonderful!  $M.keys() shows "xml".  But $M{xml}.keys complains :)

[10:46] <wayland76> "Could not find non-existent sub xml"

[10:58] <wayland76> Oops, that doesn't make sense.  I added an XML document stored in $s and the line my $M := $s ~~ XML::TOP; to the end of your XML example

[10:58] <wayland76> so $M should be the match item, which I'm trying to treat as a hash, but I guess I need to do a bit more reading of the Data Structures stuff :)

[11:01] *** azawawi left
[11:06] <wayland76> Hmm, I think I've overcome that problem

[11:06] <wayland76> But $M<xml>.kv() gives some strange output :)

[11:06] *** Bzek joined
[11:18] *** Bzek_ joined
[11:19] <wayland76> ...ok, no it doesn't.  It just surprised me by concatenating all the keys together :)

[11:23] <wayland76> Ok, I think I've got the hang of it now.  But it's not exactly my idea of great :)

[11:29] *** ruoso joined
[11:30] *** Bzek left
[11:32] *** masak joined
[11:37] <pasteling> "masak" at 130.238.45.242 pasted "I'm doing networking in Perl 6, should I follow this advice from perldoc perlop?" (13 lines, 863B) at http://sial.org/pbot/32768

[11:40] <wayland76> I'd say yes, if possible

[11:40] <wayland76> Basically, read the spec for whatever protocol you're implementing...

[11:41] <wayland76> ...and then emit whatever characters it says

[11:41] <ruoso> Hello!

[11:41] <wayland76> (I know about networking, but not a lot about Perl 6)

[11:41] <wayland76> ruoso: hi! :)

[11:44] *** ZuLuuuuuu joined
[11:48] *** [particle] left
[11:51] *** [particle] joined
[11:55] *** cosimo left
[11:58] <pugs_svn> r22692 | ruoso++ | [smop] makes s1p_multi test aware of lexically-defined multi variants

[12:02] <masak> wayland76: I should be more specific, I guess. In Perl 5, one is adviced not to use "\n" for networking because it might mean the wrong thing on certain platforms. does the same advice hold for Perl 6?

[12:03] <ruoso> masak, yes, I presume

[12:03] <masak> ok.

[12:03] *** Lorn joined
[12:04] <masak> some rewrites in November required then. :)

[12:04] <ruoso> masak, most runtime stuff should be the same as p5, unless stated otherwise

[12:04] <masak> I know.

[12:04] * moritz_ thinks that n should be fine

[12:04] <masak> moritz_: on what do you base that?

[12:04] <masak> I mean, given the advice in perldoc perlop

[12:04] <moritz_> and that the IO handles know how to convert that to whatever appropriate

[12:04] <masak> g'aah!

[12:05] <masak> but it's the conversion that's the problem.

[12:05] <moritz_> masak: in Perl 5 a string is a list of bytes. In Perl 6 it's a list characters.

[12:05] <ruoso> moritz_, yes... and that's the reason it's not acceptable

[12:05] <ruoso> ;)

[12:05] <ruoso> in a network protocol you want to know exactly what is being sent

[12:05] <moritz_> say() and print() need to handle that as well, somehow

[12:05] <moritz_> or the underlying IO object

[12:05] <moritz_> (except that no implementation so far cares about stuff like that)

[12:06] <ruoso> moritz_, it basically means that in the end, the string needs to be translated to some buf

[12:06] <ruoso> I think there are additional constraints (besides encoding) that rule this process 

[12:06] <moritz_> aye

[12:06] <moritz_> (like normalization form)

[12:07] <ruoso> moritz_, so you mean that there would be a "network normalization form" that would make "\n" always mean the same thing independent of the arch or any other constraints?

[12:07] <ruoso> in that specific IO object, I mean

[12:08] <moritz_> ruoso: that too. I was more referring to the Unicode normalization forms, though

[12:09] <ruoso> moritz_, yaeh... that was the part of "additional constraints" 

[12:09] <ruoso> besides encoding

[12:09] <ruoso> I should say "additional traits" probably

[12:09] <moritz_> ;)

[12:12] <ruoso> I wonder how to make that have a good performance

[12:13] <moritz_> do perl 5 IO layers have "good performance"?

[12:13] * masak still feels he'd better write a literal newline character instead of "n" when doing networking

[12:13] <masak> just to be safe.

[12:13] *** explorer joined
[12:14] <masak> it might also actually be more clear to the programmer what that means.

[12:14] <masak> especially one who has read that paragraph in perldoc perlop

[12:17] <ruoso> @tell pmurias how hard you think it would be to make a signature compiler that creates an AdhocSignature?

[12:17] <lambdabot> Consider it noted.

[12:18] <ruoso> @tell pmurias I'm considering using the syntax "%mildew postcircumfix:<( )> ($self: $capture)" in the RI DSL

[12:18] <lambdabot> Consider it noted.

[12:23] *** Limbic_Region joined
[12:26] *** gr1d joined
[12:29] *** abra joined
[12:29] <pugs_svn> r22693 | ruoso++ | [smop] proposed implementation of $multi.() in Perl 6. Needs modification of the RI DSL

[12:32] <ruoso> @tell pmurias, take a look at smop/src/s1p_multi.ri

[12:32] <lambdabot> Consider it noted.

[12:33] *** sri_work left
[12:41] *** abra left
[12:43] *** ZuLuuuuuu left
[12:54] * ruoso wonders if anyone is aware of  http://www.perlfoundation.org/perl6/index.cgi?distributionformat

[12:54] <lambdabot> Title: DistributionFormat / Perl 6

[12:58] *** alanhaggai left
[13:00] *** ashizawa left
[13:04] *** borondil joined
[13:05] <wayland76> My opinion on that is that we shouldn't limit ourselves to just Perl, but also support other Parrot-based languages in C6PAN (since if I understand correctly, we can change languages mid-file anyway :) )

[13:10] <ruoso> wayland76, well... that's one of the goals in the proposed format

[13:10] <ruoso> wayland76, see the "Basic Source Package Layout" section

[13:11] *** borondil left
[13:12] *** smg left
[13:15] *** xiaoyafeng joined
[13:16] *** jhorwitz joined
[13:18] *** pedrob joined
[13:25] *** Limbic_Region left
[13:31] *** gr1d left
[13:32] *** gr1d joined
[13:43] *** kst left
[13:51] *** hercynium_ left
[14:02] *** schmalbe joined
[14:04] * ruoso just realized that for multis and onlys to be interchangeable, every Code must implement .variants(), even if returning a list of itself

[14:06] *** abra joined
[14:07] *** pmurias joined
[14:08] <pmurias> ruoso: why not do the multi purely in mildew?

[14:08] <lambdabot> pmurias: You have 4 new messages. '/msg lambdabot @messages' to read them.

[14:08] <pmurias> @messages

[14:08] <lambdabot> mncharity said 6d 20h 5m 51s ago: re mildew as duplication (last night), I was wrong. eg, elf doesn'

[14:08] <lambdabot> azawawi said 5h 53m 42s ago: i attached the full output along with the summary in http://sial.org/pbot/32762 and http://sial.org/pbot/32763

[14:08] <lambdabot> ruoso said 1h 51m 4s ago: how hard you think it would be to make a signature compiler that creates an AdhocSignature?

[14:08] <lambdabot> ruoso said 1h 50m 24s ago: I'm considering using the syntax "%mildew postcircumfix:<( )> ($self: $capture)" in the RI DSL

[14:09] <ruoso> pmurias, hi

[14:09] <pmurias> ruoso: hi

[14:10] <ruoso> pmurias, well... having it entirely in mildew is not a bad idea at all... 

[14:10] <pmurias> &

[14:10] *** pmurias left
[14:12] <ruoso> @tell pmurias but I was considering this lowlevel implementation not using p6opaque, because a later high-level implementation should replace it at some point...

[14:12] <lambdabot> Consider it noted.

[14:13] *** TJCRI joined
[14:13] <ruoso> @tell pmurias because the high-level MultiContainer type will be inside the standard object hierarchy, which means it depends on Object being already there... the low-level types should solve that circularity

[14:13] *** pedrob left
[14:13] <lambdabot> Consider it noted.

[14:16] <ruoso> but maybe this circularity is not really a problem... considering all lookups are late, maybe we just need to have a multi-stage initialization in src-s1p

[14:16] *** alanhaggai joined
[14:17] <ruoso> 1 - prototype declaration, 2 - adding methods (and I think that's all)

[14:18] <ruoso> the solution probably resides in manipulating the p6opaque directly using the REPR api in src-s1p instead of using the MOP

[14:20] <ruoso> for the declaration I mean, later usage would always go through the MOP

[14:21] <ruoso> if we avoid using the MOP in src-s1p declaration, we can even have a single-stage loading of all types in src-s1p without causing any circularity

[14:22] <ruoso> avoid using the MOP and doing late lookup of all types

[14:23] <ruoso> actually that would mean that we should stop writing anything not in Perl 6

[14:23] <ruoso> (for SMOP, at least)

[14:24] <ruoso> because at the time that any of those types would be used, all methods would already be declared...

[14:24] <ruoso> and all types as well...

[14:24] <ruoso> and that's the type system bootstrap

[14:24] <ruoso> :D

[14:25] <ruoso> after that happens, all declarations go through the MOP

[14:27] <ruoso> that means green light for implementing all built-in types in Perl 6 and just trust that it will work :)

[14:27] *** adc_Penner joined
[14:29] *** eternaleye_ left
[14:38] *** jan_ left
[14:42] *** smg joined
[14:49] *** silug joined
[14:56] *** just_ joined
[14:58] *** viklund left
[15:02] *** xiaoyafeng left
[15:05] *** adc_Penner left
[15:09] *** adc_Penner joined
[15:12] *** lizsac joined
[15:12] <lizsac> transexual perhaps

[15:13] <masak> lizsac: no, just cross-platform and language-nonspecific :)

[15:13] <lizsac> i thought perl was english

[15:14] <masak> lizsac: well, most of the keywords are in English

[15:14] <masak> but by "language" I meant programming language

[15:15] <lizsac> i thought you was talking about perl

[15:15] <lizsac> i was talking about some chick in #perl

[15:15] <masak> I was.

[15:15] <lizsac> or maybe it was a dude

[15:15] <lizsac> i'm not sure ..

[15:15] <masak> lizsac: it wasn't very clear you was.

[15:15] <masak> anyway, this is #perl6, not #perl

[15:16] <lizsac> i was assuming everyone from #perl was in here

[15:16] <masak> why did you assume that? :)

[15:16] <lizsac> it's the same old perl stuff right?

[15:16] <lizsac> so what's new in 6?

[15:16] <masak> no...

[15:16] <masak> if only every perl user knew about Perl 6, that would be nice.

[15:16] <masak> lizsac: I'm glad you ask. :)

[15:16] <masak> a few things, actually.

[15:17] <masak> http://spec.pugscode.org/

[15:17] <lizsac> will i still be able to use my old perl scripts with perl6's interpreter?

[15:17] <masak> lizsac: you will be able to run your Perl 5 scripts on Parrot, yes

[15:17] <PerlJam> lizsac: http://dev.perl.org/perl6/faq.html

[15:17] <lambdabot> Title: Perl 6 FAQ - perl6

[15:17] <masak> don't know if Rakudo Perl 6 will ever recognize and run Perl 5.

[15:19] <[particle]> it's not a near-term goal for rakudo, anyway

[15:20] <lizsac> i'm kinda glad i don't know perl that well

[15:21] <lizsac> see i'm not really a programmer but i've played around with perl for the past 10 years or so

[15:21] <lizsac> lately i've been getting more into scripting though

[15:21] <lizsac> using perl

[15:21] <lizsac> but thinking maybe i should be using ruby or python

[15:22] <lizsac> well actually i should be using everything

[15:22] <masak> lizsac: all I can say is Perl 6 is really worth checking out

[15:22] * lizsac tosses some haskell into the basket

[15:22] <masak> lizsac: try downloading Parrot and running Rakudo

[15:23] <lizsac> well i'm more concerned about being correct and doing things the right way if i can

[15:23] <lizsac> so that way my programmer friends will stop making fun of me

[15:23] <PerlJam> lizsac: If given the choice between ruby and python today, I'd go with ruby.

[15:23] <PerlJam> ruby has a very perlish feel

[15:24] <lizsac> yeah i've heard all the testimonials

[15:24] <lizsac> read all the perl vs ruby vs pythonn flamewar blogs

[15:24] <lizsac> i saw a hardcore perl programmer turn ruby

[15:24] <lizsac> he stood up from his terminal one day

[15:24] <lizsac> all foaming at the mouth

[15:25] <lizsac> wouldn't stop talking about ruby

[15:25] <lizsac> rewrote all his scripts in ruby like overnight

[15:25] <lizsac> this was back in 2001

[15:25] <lizsac> hahah ruby was just coming out or something

[15:25] <lizsac> was really big in japan

[15:27] <lizsac> i don't really see a debian perl6 package ...

[15:27] <lizsac> :)

[15:28] <PerlJam> I seem to recall that there is a debian parrot package and since perl6 comes with parrot for now ...

[15:29] <[particle]> note that perl6 packages are out of date within a day of release

[15:29] <lizsac> i guess i could open up the apt a little bit

[15:29] <lizsac> bleh

[15:30] <[particle]> that is, if you want the newest features

[15:30] <lizsac> maybe i should just mess around in a dir from source

[15:30] <masak> lizsac: language flamewars are only interesting to a certain point. :)

[15:30] <lizsac> instead of bringin in packages in the system

[15:30] <masak> lizsac: if you ask me, you might just as well get Parrot by svn

[15:31] <[particle]> yes, svn is best for parrot/rakudo

[15:31] <PerlJam> [particle]: actually, I think git is  ;)

[15:32] <lizsac> yeah from the examples perl6 looks interesting

[15:33] <masak> lizsac: it is interesting. I use it every day, and I've never been happier.

[15:33] <lizsac> ruby/python like stuff

[15:33] <lizsac> whatever you want to call it

[15:33] <lizsac> structure

[15:33] <lizsac> elegance

[15:33] <PerlJam> perl 6 stuff

[15:33] <lizsac> heheh

[15:33] <masak> programming stuff

[15:33] <PerlJam> lizsac: if you aren't really a programmer, there are tons of features you may not really appreciate.

[15:34] <lizsac> well

[15:34] *** smg left
[15:34] <lizsac> probably

[15:34] <lizsac> heh advanced to me is hash of hashes

[15:34] *** jan_ joined
[15:34] <lizsac> i do a lot of web scraping and dbi stuff

[15:34] <lizsac> parsing html and xml

[15:34] <PerlJam> regex syntax/semantic revamp and improved object model are the two biggies IMHO

[15:35] <PerlJam> so, the regex stuff would definitely be of interest to you

[15:35] <masak> lizsac: Perl 6 parsing is wonderful.

[15:35] <masak> and much of it works in Rakudo today.

[15:35] <lizsac> i try to stay away from using regex but i do use it from time to time when i can't figure anything else out

[15:36] <lizsac> anyways like i sorta said before i'm getting more into the scripting/programming

[15:37] <lizsac> i've spent a consideral amount of time in the last month just tinkering around with perl

[15:37] <lizsac> more so than any other time in the past it seems like

[15:38] <lizsac> i just don't want to end up in the gutter like the rest of those perl programmers

[15:41] *** just_ left
[15:41] <PerlJam> "in the gutter"?

[15:41] <lizsac> one of the things i love about perl is all the modules

[15:41] <lizsac> does perl6 have any modules yet?

[15:42] <lizsac> i don't see any modules ...

[15:42] <masak> lizsac: there are modules.

[15:42] <masak> and classes, and roles...

[15:43] <lizsac> core modules, or cpan stuff?

[15:43] <lizsac> where?

[15:43] <masak> lizsac: also, I too object to being metaphorically placed in the gutter :)

[15:43] <lizsac> doh

[15:43] <lizsac> found em

[15:43] <masak> I'm a Perl programmer.

[15:43] <lizsac> on cpan even

[15:43] <masak> lizsac: you probably found the modules in the Perl6:: namespace

[15:44] <lizsac> well i didn't say all perl programmers were in the gutter

[15:44] *** pedrob joined
[15:44] <masak> those are really for Perl 5, for simulating Perl 6 behaviours

[15:44] <PerlJam> lizsac: the Perl6 namespace on CPAN are for Perl 5 modules that implement perl 6 stuff (for perl 5)

[15:44] <lizsac> ohh

[15:44] <lizsac> so 

[15:44] <lizsac> wtf

[15:44] <masak> lizsac: I know many Perl programmers, none of which are in gutters.

[15:44] <PerlJam> Though, there really should be an alias from Perl6::OOP  to Moose   :-)

[15:45] <masak> aye :)

[15:45] <masak> lizsac: most of Perl 6 development is off-CPAN right now

[15:45] <lizsac> will i be able to use perl6 for anything?

[15:45] <masak> lizsac: yes.

[15:45] <lizsac> heh

[15:45] <PerlJam> lizsac: That really depends on you more than anything else

[15:45] <lizsac> DBI

[15:45] <lizsac> HTML::TableExtract

[15:46] <masak> lizsac: we're a group who are writing a wiki engine in Perl 6 as we speak.

[15:46] <lizsac> XML::*

[15:46] <lizsac> i use these modules daily

[15:46] <lizsac> i need them to do anything

[15:46] <lizsac> though i could use perl6 to massage some text files i have laying around

[15:47] <PerlJam> lizsac: if you're comfortable with that, you should continue doing it.  Perl 6 won't be in a state for you to do comparable things with comparable ease for a little while yet.

[15:47] <masak> we expect to be able to use Perl 5 modules from Perl 6 eventually. not quite there yet, though.

[15:47] <masak> lizsac: with that said, be on the lookout for Perl 6. it's worth waiting for!

[15:47] <lizsac> well i want to check it out anyways i guess

[15:47] <PerlJam> lizsac: you could have a go at writing a XML module for perl 6  :)

[15:47] <lizsac> you say svn is the best way to get it?

[15:48] <lizsac> i'm currently working on this script to find duplicates in a hash of hashes

[15:48] <lizsac> not complete duplicates but partial

[15:49] <masak> lizsac: yes, I'd say svn is the best way to get it.

[15:49] <lizsac> and not disgarding the dupes but reporting on them

[15:49] <lizsac> kinda complicated for me

[15:50] <masak> lizsac: is there a way to map partial duplicates into the same representation?

[15:51] *** pedrob left
[15:51] <lizsac> i'm trying to find it on pastebin

[15:52] *** hercynium_ joined
[15:53] *** ejs left
[15:53] *** hercynium_ left
[15:54] *** justatheory joined
[15:55] <lizsac> http://pastebin.com/m494f5277

[15:55] <buubot> lizsac: The paste m494f5277 has been copied to http://erxz.com/pb/12884

[15:55] <lizsac> that's how i load the hashes up anyways

[15:55] <lizsac> i managed to do that without looking at anything which is amazing

[15:56] <lizsac> so i load up the hash of hashes and it's all good in the dumper

[15:57] <lizsac> now i just need to figure out how i'm going to roll through it

[15:57] *** hercynium left
[15:58] <lizsac> i was thinking of finding the same last_name,first_name,phone elements and if the address matches a little bit then keep the one with apt in it

[15:59] <lizsac> and is that a good way of setting up a hash of hashes?

[16:00] <masak> this is not really the right forum for discussing Perl 5 scripts.

[16:00] <lizsac> ok plz hold i'll install the perl6

[16:00] <masak> even though I must admit that it's tempting in this case...

[16:01] <lizsac> heh

[16:01] <lizsac> tempting?

[16:01] <masak> please refer to #perl on irc.perl.org for Perl 5-specific questions

[16:01] <masak> lizsac: yes, I think I would have had a comment or two

[16:01] <lizsac> irc.perl.org?

[16:01] <masak> yes, that server. they host a big #perl channel

[16:01] <lizsac> is that freenode?

[16:02] <BinGOs> masak: I think you might have that wrong.

[16:02] <masak> no, it's because it's not freenode that I specified it.

[16:02] <lizsac> heh

[16:02] <masak> BinGOs: possibly. have what wrong?

[16:02] <lizsac> gettin me the hell outta here 

[16:02] <lizsac> well masak it's not really perl5 specific is it?

[16:02] <masak> yes.

[16:02] <lizsac> i mean the hash would be created the same way in perl6 wouldn't it?

[16:02] <masak> it's a Perl 5 script.

[16:03] <BinGOs> The #perl on irc.perl.org is a den of depravity.

[16:03] <masak> BinGOs: that's true too

[16:03] <masak> BinGOs: but that doesn't mean that there aren't good people there who can give real advice

[16:03] <BinGOs> #perl on freenode is probably the best place and this gentleman is currently banned from there.

[16:03] <masak> oh.

[16:03] <masak> too bad.

[16:03] <lizsac> sssh!

[16:03] <BinGOs> and the #perl on efnet

[16:04] <lizsac> i would never ..

[16:04] <lizsac> the hate is ever present on all the networks!

[16:04] <masak> hate?

[16:05] <lizsac> yeah i guess

[16:05] <lizsac> hating on poor lizsac

[16:06] <lizsac> BinGOs: are you on efnet too?

[16:06] *** jfredett left
[16:07] <lizsac> Irssi: Unable to connect server irc.perl.org port 6666 [Connection refused]

[16:12] *** masak left
[16:22] *** Exodist joined
[16:32] *** zamolxes_ left
[16:41] <[particle]> lizsac: try 6667

[16:42] <lizsac> ohh i did

[16:43] <lizsac> err rather

[16:43] <lizsac> i connected to eldwist.darkuncle.net

[16:44] <lizsac> which was what irc.perl.org resolved to when i pinged it

[16:49] *** Bzek_ left
[16:56] <lizsac> pretty dead in there

[16:59] <pugs_svn> r22694 | lwall++ | [perl6/Makefile] remove leading indentation to save a quarter second on every STD startup

[16:59] <[particle]> yikes, soon you'll be removing semicolons and return statements

[16:59] *** pbuetow joined
[17:00] *** justatheory left
[17:00] <[particle]> yes, changing { return $foo; } to { $foo } can really save you cpu time in perl 5

[17:02] <lizsac> so why not just use python

[17:03] <[particle]> because it's not perl 6

[17:04] *** smg joined
[17:07] <lizsac> perl 6 is just the bestest?

[17:07] <lizsac> in the whole underverse

[17:08] <lizsac> i was reading how you can shorten the most used operators

[17:08] <lizsac> where you can call a method with .

[17:09] <lizsac> instead of =>

[17:09] <lizsac> err ->

[17:09] <lizsac> i think i saw that in some of the examples

[17:10] *** tomyan left
[17:10] <[particle]> yes

[17:11] <[particle]> there's a nice new idiom for creating an object: my SomeClass $x .= new;

[17:11] <xinming> lizsac: perl6 is definitely the best of best programming language on the earth. :-)

[17:12] <[particle]> where .= is 'inplace methodcall' op

[17:12] <lizsac> That aside... I do not have too much faith in Perl6 anyway. It has become too complex, too esoteric... And too vaporware :-(

[17:12] <lizsac> quote from blogcrap

[17:12] <[particle]> uninformed opinion

[17:13] <PerlJam> perl 6 is fairly complex though.

[17:13] <[particle]> p6 is less esoteric than p5, with fewer memorized exceptions

[17:13] <PerlJam> It's controlled complexity

[17:13] <xinming> lizsac: don't listen to that, read the synopsis, You'll know how advance perl 6 is. :-)

[17:13] <PerlJam> or perhaps structured complexity

[17:14] <[particle]> you only need to use the subset of p6 you are comfortable with, it's quite approachable piecemeal

[17:16] <xinming> PerlJam: No matter how complex, some one will make it. What I doubt for now is, perl 6 loses it's focus, and some might switch to other language, and perl 6 will become a theoretical programming language. No other language can defeat it. But no one implement it.

[17:16] <lizsac> i want to install it but don't know where to start

[17:16] <lizsac> i've never used svn before

[17:17] <xinming> lizsac: hmm, Just do 'svn co http://svn.pugscode.org/pugs/'

[17:17] *** justatheory joined
[17:17] <lizsac> i don't have svn

[17:17] <lizsac> trying to figure out which pkg to install to get it

[17:17] <[particle]> sudo apt-get install subversion

[17:17] <xinming> lizsac: But you have to do compilation your self for pugs

[17:17] <lizsac> ahh subversion

[17:18] <xinming> lizsac: what distribution you use?

[17:18] <lizsac> debian

[17:18] <xinming> then, It's easy to install

[17:18] *** pedrob joined
[17:18] <PerlJam> xinming: Yes, not having an implmentation that's ready for public consumption is a bit of a problem.

[17:21] *** araujo left
[17:21] <lizsac> wtf is pugs

[17:22] <xinming> lizsac: Ok, clarification begins, Perl 6 is a "book", Pugs is a example in real.

[17:22] <xinming> lizsac: perl 6 is just specification, and pugs is a current one of the implementations for perl 6.

[17:22] <PerlJam> lizsac: pugs is an implementation of Perl 6 written in Haskell.

[17:22] <lizsac> svn: REPORT of '/pugs/!svn/vcc/default': Could not read chunk size: connection was closed by server (http://svn.pugscode.org)

[17:23] <lambdabot> Title: pugs - Revision 22694: /

[17:23] <lizsac> is that normal?

[17:23] <xinming> lizsac: try again?

[17:23] <PerlJam> lizsac: There are 3 (or more) other implementations of Perl 6 

[17:23] <lizsac> implementations of perl 6 ...

[17:24] <xinming> lizsac: Did you ever read synopsis?

[17:24] <lizsac> which one

[17:24] <PerlJam> lizsac: have you every heard of IronPython, Jython, CPython, etc?  Those are all implementations of the programming language called "python"

[17:25] <xinming> http://dev.perl.org/perl6/doc/synopsis.html <-- If you are free, you really should read them as much as you can.

[17:25] <lambdabot> Title: Synopses - perl6

[17:25] <lizsac> i've been wanting to get into haskell

[17:26] <lizsac> yeah i didn't know the whole thing was a synopses

[17:27] <lizsac> i was reading individual synopses

[17:27] <lizsac> err synopsis

[17:27] <xinming> lizsac: synopsis covered most of basic thing for perl 6.

[17:28] <lizsac> ok my pugs is done

[17:29] <xinming> lizsac: And It's really an excited reading when looking at what perl 6 will be like. :-)

[17:29] <xinming> lizsac: hmm, do you have ghc installed?

[17:29] *** armagad joined
[17:29] <lizsac> haskell compiler?

[17:29] <xinming> hmm, yes, do 'sudo apt-get install ghc6'

[17:30] <[particle]> lizsac: also, if you're interested in parrot and rakudo, see http://www.parrotcode.org/docs/gettingstarted.html

[17:30] <lambdabot> Title: Parrot Developer FAQ - parrotcode

[17:30] <xinming> sorry, I am now in fedora, some thing might not be so accruate.

[17:31] <xinming> But read the INSTALL in pugs repository helps

[17:31] <lizsac> so parrot isn't pugs i take it

[17:31] <lizsac> heh

[17:33] <[particle]> pugs is a perl 6 implementation written in haskell

[17:33] <[particle]> parrot is a virtual machine written in c, and rakudo is a perl 6 implementation written for parrot

[17:34] <lizsac> i can build an embedded parrot interpretor in pugs

[17:34] <lizsac> or some shit

[17:34] <[particle]> no, that's bitrotten i'm afraid

[17:36] *** Lunchy joined
[17:37] <lizsac> lucky i'm in lenny i guess

[17:37] <lizsac> what it's really not telling me is how i specify where to install it

[17:39] <lizsac> doh it's normal i was getting all caught up in the cabal crap

[17:40] <lizsac> XXX NOTE!!!!!!!!

[17:40] <lizsac> PREFIX doesn't actually work right now. So ignore what I just said. But if

[17:40] <lizsac> it did work, that's how you would do it.

[17:46] *** pmurias joined
[17:46] <lizsac> this is an amazing pile of crapola

[17:46] <lizsac> you guys are hardcore

[17:47] <PerlJam> lizsac: you must be referring to pugs.

[17:47] <lizsac> yes

[17:47] <PerlJam> many of us no longer use pugs in favor of rakudo

[17:47] <lizsac> bah!

[17:47] <PerlJam> (or some other implementation of choice)

[17:47] <lizsac> but he just

[17:47] <lizsac> you

[17:48] <ruoso> hi pmurias, you're back  :D

[17:48] <lizsac> bastard

[17:48] <lizsac> i take it xinming is chinese

[17:48] <ruoso> lizsac, but pugs is still a very interesting playground for those discovering Perl 6

[17:49] <ruoso> lizsac, it's still the most feature-full implementation  (I think)

[17:49] <lizsac> well only thing i can think is good about it that i might play with haskell too

[17:50] <PerlJam> ruoso: I don't think so anymore.  

[17:50] <lizsac> heh 

[17:50] <lizsac> why not?

[17:50] <PerlJam> the down side of pugs too is that it has some features that aren't part of perl 6

[17:50] <lizsac> i ask in the middle of my pugs build

[17:50] <pmurias> ruoso: yes i'm back

[17:50] <lambdabot> pmurias: You have 2 new messages. '/msg lambdabot @messages' to read them.

[17:50] <pmurias> @messages

[17:50] <lambdabot> ruoso said 3h 38m 32s ago: but I was considering this lowlevel implementation not using p6opaque, because a later high-level implementation should replace it at some point...

[17:50] <lambdabot> ruoso said 3h 37m 32s ago: because the high-level MultiContainer type will be inside the standard object hierarchy, which means it depends on Object being already there... the low-level types should

[17:50] <lambdabot> solve that circularity

[17:50] <PerlJam> lizsac: rakudo does almost everything

[17:52] <lizsac>  maybe i will install that too

[17:52] <lizsac> with the ruby rails and python

[17:52] <lizsac> and whatever else i can fit on my hard drive

[17:52] <ruoso> pmurias, please also backlog... I went through some important insights after I sent you this messages

[17:52] <pmurias> ruoso: P6Meta could be tought how to assimilate PurePrototypeHow objects

[17:53] <ruoso> pmurias, in the end I realized that the "s1p" compiler should use the REPR API directly to solve the circularity 

[17:53] <ruoso> pmurias, so we can "declare" all builtin types that way

[17:53] <ruoso> and it will just work

[17:54] <ruoso> because of late lookup

[17:55] <pmurias> ruoso: we could teach P6Meta how to "assimilate" PurePrototypeHOW classes

[17:55] <pmurias> i think we shouldn't have multiple p6 compilers

[17:55] <ruoso> pmurias, but that's the 1st stage compiler

[17:55] *** explorer left
[17:55] <ruoso> that one we're going to need anyway

[17:55] <ruoso> to bootstrap the type system

[17:56] <pmurias> why does it need to be different?

[17:57] <ruoso> because it needs to get the types into the way they should look like

[17:57] <ruoso> even if doing it in a non-standard wayt

[17:57] <pmurias> it should do it in the standard way

[17:57] <ruoso> it doesn't need to

[17:58] <ruoso> it's a special compiler anyway

[17:58] <ruoso> it will build C files that comply to a "prelude plugin API" of some sort

[17:59] <pmurias> i still don't understand why does it need to be special in any way

[17:59] <ruoso> because this are the built-in types... you're compiling the types that are presumed in every other compilation

[18:00] <pmurias> builtin-in types != native types

[18:00] <ruoso> sure... but a Hash is not a native type, for instance

[18:00] <ruoso> nor is an Array

[18:00] <ruoso> or even a Str

[18:00] <ruoso> or an Int

[18:01] <pmurias> i'm against the idea of having "special" anything when it's not needed

[18:01] <avar> Perl 6 is a dialect of scheme :)

[18:01] <ruoso> ok, let me approach it other way...

[18:01] <avar> Who's working on the elf CL stuff again?

[18:01] <ruoso> pmurias, please explain what you have in mind...

[18:01] <pmurias> avar: mncharity

[18:02] <pmurias> ruoso: what i mean that the stuff in the Prelude isn't better in anyway if the user what's to use his own custom Array he should be able to

[18:03] <ruoso> pmurias, you mean overwriting the Prelude...

[18:03] <pmurias> or extending it

[18:03] <ruoso> pmurias, that's not a problem, specially after the built-in type was defined

[18:04] <ruoso> the issue here is not about making the types special

[18:04] <ruoso> but it's the exact opposite

[18:04] <ruoso> how to make then regular

[18:04] <ruoso> s/then/them\

[18:04] <ruoso> the idea of a different compiler to bring the built-in types up

[18:04] <ruoso> is so that in the end of the initialization, you can't tell that they were initialized by a different process

[18:05] <ruoso> because they will look exactly the same

[18:05] <pmurias> ruoso: do you have an example which needs a different compiler

[18:06] *** [particle] left
[18:06] <pmurias> ?

[18:06] *** [particle] joined
[18:07] <ruoso> pmurias, using the MOP to build the built-in types will require features from the built-in types...

[18:07] <ruoso> pmurias, using the REPR API directly avoids that

[18:07] <ruoso> and when you finally needs to use the MOP, the entire prelude will already be loaded

[18:08] <ruoso> and the type system bootstrapped

[18:08] <ruoso> so the features from the prelude will be there

[18:08] <pmurias> ruoso: we have PurePrototypeHOW don't we?

[18:08] <[particle]> ...MOP on aisle two...

[18:08] <ruoso> pmurias, the only class that will use that is P6Meta

[18:09] <pmurias> Hash and Array could use that

[18:10] <ruoso> pmurias, no, they can't... because Hash isa Object

[18:10] <ruoso> and Object uses P6Meta

[18:10] <pmurias> and we can then teach P6Meta to "assimilate" PurePrototypHOW classes

[18:10] <ruoso> what do you mean by assimilate>

[18:10] <pmurias> change the classe's HOW to itself

[18:11] <pmurias> s/itself/instance of itself/

[18:11] <ruoso> the problem is that PurePrototypeHOW will require Hash to have *all* methods in itself

[18:11] <ruoso> instead of inheriting them from Object

[18:11] <pmurias> PurePrototypeHOW uses S1P::Hash

[18:11] <ruoso> it's not just a matter of changing the HOW

[18:12] <ruoso> pmurias, not really... PurePrototypeHOW uses $foo.^!methods

[18:12] <ruoso> which, in the case of p6opaque, is a S1P::Hash

[18:12] <ruoso> but it doesn't need to be

[18:12] <pmurias> during bootstrap it is ;)

[18:13] <ruoso> I think I lost the point

[18:13] <ruoso> s/the/your/

[18:13] <ruoso> what do you mean...

[18:14] <ruoso> rephrasing.... how does the fact that PurePrototypeHow uses S1P::Hash changes the fact that it would require installing new, CREATE, BUILDALL into Hash also

[18:14] <ruoso> instead of just inheriting from Object

[18:14] <pmurias> what i mean after P6Meta is loaded (using PurePrototypeHOW where nessesary) we would replace all classes using PurePrototypeHOW with ones which use P6Meta

[18:15] <pmurias> s/using/which use/

[18:15] *** pedrob left
[18:15] <ruoso> pmurias, if you try to get lower-level with that approach you'll see that you have a circularity problem

[18:15] <ruoso> (by lower-level I mean actual code)

[18:16] <pmurias> metamodels are supposed to be circular

[18:16] <ruoso> in theory, yes

[18:16] <pmurias> P6Meta's .HOW is supposed to be a P6Meta instance

[18:16] * justatheory coughs

[18:16] <ruoso> but in practice, it needs to break the circularity somehow

[18:17] *** armagad left
[18:17] <ruoso> that's where 1st stage compilers comes in

[18:17] <pmurias> you can do it by handcoding the HOW

[18:17] <ruoso> pmurias, the problem is that the HOW itself depends on the other types that aren't already there

[18:18] <pmurias> first you create P6Meta metainstance then you define a .HOW method on it which returns it

[18:19] <ruoso> hm?

[18:19] <ruoso> I don't think I see what you mean...

[18:19] <ruoso> P6Meta is a regular class, that happens to use a different HOW

[18:19] <pmurias> the kp6 MOP was circular

[18:20] <ruoso> pmurias, and the circularity was broken by defining objects directly in p5 

[18:20] <ruoso> building the same data structure the rest of the runtime would expect

[18:20] <pmurias> yes...

[18:20] <ruoso> that's what I plan to do

[18:21] <pmurias> but we don't need a special compiler for that

[18:21] <ruoso> having the s1p compiler building the data structure as the rest of the runtime will expect them to be

[18:21] <pmurias> all the deep magic can be expressed in normal p6

[18:21] <ruoso> how do you call add_method in a class that needs to call add_method to be defined?

[18:22] * pmurias writes code to to that...

[18:23] <ruoso> pmurias, you mean you're doing it now?

[18:24] <ruoso> on the other hand, if the s1p compiler uses "my $class = ::p6opaque.CREATE(); $class.^!methods.<new> = method (...) {...}"

[18:24] <ruoso> the methods will be there without the need to call add_method, and you will be able to call add_method to create new classes

[18:25] <pmurias> why can we write the above code by hand

[18:25] <pmurias> ?

[18:25] <ruoso> you mean "why a compiler if we can write the above code by hand"?

[18:26] <pmurias> yes

[18:26] *** meppl joined
[18:26] <ruoso> well... just to keep the files in src-s1p written in plain Perl 6

[18:26] <ruoso> I agree it's a perfectionism of mien

[18:26] <ruoso> but we have to agree it would be pretty

[18:26] <ruoso> :P

[18:27] <pmurias> on the syntactic level yes ;)

[18:27] <ruoso> I think you see what I mean now :)

[18:29] <ruoso> pmurias, the insight I had was that if we compile all the built-in types in terms of REPR manipulation, it will break the circularity and we're bootstrapped

[18:29] <ruoso> (the type system, at least, which is an important step before compiler bootstrap)

[18:31] <pmurias> but having a seperate compiler mode is a bit complex

[18:31] <ruoso> maybe a Perl 6 preprocessor then ;)

[18:31] <ruoso> that turn plain Perl 6 into s1p Perl 6

[18:31] <pmurias> what we could do is create a part of P6Meta load Hash,Array and then load the rest of P6Meta

[18:32] <pmurias> i'm not sure obscuring the complexity of what's happening is a good thing

[18:32] <ruoso> it's not obscuring, just automating

[18:33] <ruoso> because the "my $class = ::p6opaque.CREATE()" part will be very repetitive...

[18:33] <ruoso> as well as every method definition and so on

[18:33] <pmurias> after you hand bootstrap add_method and a couple of things you can write normalish p6

[18:33] * ruoso sees a lot of circular-dependencies ahead...

[18:34] <pmurias> ::MyClass = ::p6opaque.CREATE() vs class MyClass?

[18:34] <pmurias> it's not more boilerplate then a C++ coder uses casually ;)

[18:35] <pmurias> if it turn out too horrible i'll change my mind and add support to mildew for it ;)

[18:36] <ruoso> heh...

[18:36] <pmurias> * turns

[18:36] * ruoso wonders if that's the reason people hates C++ so hard

[18:36] <ruoso> pmurias, ohkay

[18:37] <[particle]> s/hard/much/

[18:37] <ruoso> pmurias, but I still think doing the "compiler mode" would be less work

[18:38] <pmurias> so the plan is not to use PurePrototypeHOW?

[18:38] <ruoso> pmurias, PurePrototypeHOW is only the HOW for P6Meta

[18:38] <ruoso> so that p6meta can be a p6opaque

[18:39] <ruoso> otherwise it would need to be a low-level type

[18:39] *** zamolxes joined
[18:40] <pmurias> how does that relate to Hash?

[18:40] <pmurias> won't it be a p6opaque

[18:40] <ruoso> pmurias, yes, but it will also be a subclass of Object

[18:41] <ruoso> which means it's sane to use the same HOW as Object

[18:41] * ruoso remembers that we have a prototype based implementation in SMOP so far

[18:41] <ruoso> (prototype by delegation, not pure-prototype)

[18:42] <pmurias> the S1P::Hash should die

[18:42] <ruoso> not so fast... p6opaque uses it

[18:42] <ruoso> but S1P::Hash will be hidden in the gore lowlevel details 

[18:43] <ruoso> it won't be visible to the regular user

[18:43] <pmurias> ok it can live a relatively obscure existence as p6opaque's minion 

[18:43] <ruoso> and lexical scope's minion too

[18:44] <ruoso> but I think that's pretty much everyone that uses it

[18:46] <pmurias> we need signatures in smop before we can proceed to implementing P6Meta

[18:46] <ruoso> we can live with AdhocSignature, can't we?

[18:46] <pmurias> barely

[18:46] <ruoso> for P6Meta, at least

[18:46] <ruoso> or at least until we bootstrap the type system and go replacing backwards

[18:47] <ruoso> unless of course we design Signature 

[18:47] <ruoso> and build the object from scratch without using its methods

[18:47] <ruoso> that's indeed an "bootstrap-like option"

[18:49] <pmurias> theoreticly we could build :(*@_,*%_) using the default block signature

[18:49] <pmurias> and PurePrototypeHOW

[18:51] <pmurias> AdhocSignature is not very usable from p6 because it accepts mold blocks

[18:53] <ruoso> pmurias, I was thinking on having ":($foo, $bar)" compiled directly to AdhocSignature

[18:53] <ruoso> AdhocSignature would not be seen in P6 code

[18:55] <pmurias> we could use it for now 

[18:57] <pmurias> ruoso: have you looked at mildew code yet?

[18:58] <ruoso> yeah... somewhat...

[18:58] <ruoso> it looks like the codes that would benefit from a tree-grammar thing

[18:59] <pmurias> it definitly would benefit from some treeish syntax sugar

[19:00] <pmurias> it won't have any use from node matching as it should go through the whole thing

[19:04] *** ZuLuuuuuu joined
[19:05] <pmurias> ruoso: it would receive a generic 2x cleanup if translated to perl6 too

[19:07] <pmurias> ruoso: anything unclear? or any suggestion for cleanup withought using custom syntax?

[19:07] <ruoso> no... it's very straight-forward...

[19:08] <ruoso> I think we already have some expertise in building tree-transformers in p5... :)

[19:09] <ruoso> I think the first I recall started in 2004 or something like that

[19:09] *** schmalbe left
[19:10] <ruoso> (Perl 6 related tree-transformers implemented in Perl 5, I mean)

[19:17] *** xinming left
[19:19] *** pedrob joined
[19:24] *** xinming joined
[19:26] *** ZuLuuuuuu left
[19:36] *** eternaleye joined
[19:36] *** sri_work joined
[19:40] <ruoso> pmurias, btw... you noticed the memory issues I pointed? it's related to proto.ri

[19:41] <pmurias> yes

[19:41] <pmurias> checking once more

[19:42] <pmurias> ruoso: should make test use valgrind by default?

[19:42] <ruoso> pmurias, that would be ok

[19:42] <pmurias> it would take twice as long

[19:43] <ruoso> it's fairly quick now

[19:44] <pmurias> anyway the mildew and perl6 eventually will take over soon

[19:44] <pmurias> * test suits

[19:45] <ruoso> that even makes me wonder if we should make a boundary in "libsmop" to where it is now

[19:46] <ruoso> and have src-s1p as if it were a different project

[19:46] <pmurias> libsmop needs a lot of cleanup

[19:47] <ruoso> indeed

[19:47] <ruoso> removing slime is an important step

[19:48] *** araujo joined
[19:52] *** abra left
[19:53] *** zamolxes left
[19:53] *** justatheory left
[19:54] <ruoso> pmurias, in fact... I just realized smop core grew over what was needed... it was important to make a proof of concept, but even some of the s1p_* types doesn't really need to be there..

[19:54] <pmurias> perl6: (1,2,3) >>+<< (1,2,3,4,5,6,7)

[19:55] <p6eval> pugs: OUTPUT[/home/evalenv/pugs/pugs: error while loading shared libraries: libsmop.so: cannot open shared object file: No such file or directory␤]

[19:55] <p6eval> ..rakudo 31963: OUTPUT[Statement not terminated properly at line 1, near ">>+<< (1,2"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[19:55] <p6eval> ..elf 22694: OUTPUT[Out of memory!␤]

[19:55] <pmurias> i killed pugs :(

[19:55] <ruoso> heh

[19:57] <pmurias> is there a way to tell the hyper op to return a list which is the length of the shorter one?

[19:59] <pugs_svn> r22695 | pmurias++ | [mildew] spits m0ld when --exec is not present

[20:04] <pmurias> ruoso: do you think giving mildew a pugs-like interface would make sense?

[20:07] <pmurias> ruoso: the Invalid read seems to be SLIME releated

[20:07] *** pedrob_ joined
[20:08] <pmurias> as a dead SLIME Frame is accessed at native_capture

[20:09] *** alanhaggai left
[20:11] *** smg left
[20:11] <ruoso> pmurias, ok... we could kill SLIME... the only thing we need is something like the SLIME free operator

[20:11] <ruoso> pmurias, there are only two files that still use slime

[20:11] <ruoso> (besides a lot of tests)

[20:12] <ruoso> pmurias, but the invalid read is just a symptom of the problem

[20:13] <ruoso> pmurias, someone is doing an improper refcnt_dec 

[20:13] <ruoso> that is causing premature destruction, where the frame is still referenced....

[20:14] <ruoso> pmurias, the free operator could just be something that turns a register into NULL without doing a release

[20:14] <pmurias> could we catch using an undead object?

[20:14] *** kst joined
[20:14] <ruoso> pmurias, that's what valgrind does

[20:15] <ruoso> you'll catch the exact same poitn

[20:15] <pmurias> yes

[20:16] <ruoso> the question is who is killing the object at the wrong time?

[20:16] <ruoso> not who is accessing the undead object

[20:18] <pmurias> shower&

[20:23] *** pedrob left
[20:38] *** pmurias left
[20:41] *** ruoso left
[20:47] *** eternaleye left
[20:49] *** justatheory joined
[20:50] *** zostay joined
[20:50] *** eternaleye joined
[20:52] *** meppl left
[20:53] *** meteorja1 left
[20:54] *** eternaleye_ joined
[21:01] *** [particle]1 joined
[21:02] *** adc_Penner left
[21:03] *** TJCRI left
[21:08] *** iblechbot left
[21:12] *** alester is now known as AndyAway

[21:12] *** eternaleye left
[21:16] *** eternaleye_ left
[21:19] *** [particle] left
[21:22] *** araujo left
[21:23] *** mberends_ joined
[21:29] *** Lorn left
[21:36] *** wknight8111 joined
[21:41] *** smg joined
[21:43] *** aindilis left
[21:48] *** gr1d left
[21:51] *** hercynium joined
[21:55] *** mberends_ left
[22:14] *** eternaleye_ joined
[22:15] *** araujo joined
[22:17] *** cognominal_ joined
[22:21] *** Limbic_Region joined
[22:25] *** cognominal left
[22:29] *** bsb joined
[22:47] *** pedrob_ left
[22:56] <lizsac> /usr/bin/ld: cannot find -lperl

[22:56] <lizsac> collect2: ld returned 1 exit status

[22:56] <lizsac> make: *** [pugs] Error 1

[22:56] <lizsac> man right at the end too

[22:58] <lizsac> i dunno what that cannot find -lperl means

[22:58] <lizsac> i have all the perl stuffs

[23:04] *** eternaleye_ left
[23:07] *** aindilis joined
[23:20] *** pcbuetow joined
[23:21] *** pcbuetow left
[23:32] *** pbuetow left
[23:51] <wayland76> lizsac: It's looking for a library called "libperl"

[23:51] <wayland76> If "locate libperl" returns no results, then you need something else

[23:52] <wayland76> (incidentally, I agree with pmurias_ when he said :(*@_,*%_)

[23:52] <wayland76> :)

[23:59] <wayland76> rakudo: for 1..3 { if $_ == 2 { next; }; say $_; }

[23:59] <p6eval> rakudo 31963: OUTPUT[1␤3␤]

[23:59] <wayland76> Oh good :)

[23:59] <wayland76> On mine, it says Could not find non-existent sub next

[23:59] *** wknight8111 left
[23:59] <wayland76> So I'll eagerly await the parrot release later today :)

