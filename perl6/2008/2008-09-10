[00:00] *** jferrero joined
[00:00] *** sri_work_ joined
[00:03] *** Limbic_Region left
[00:05] *** ruoso joined
[00:06] <ruoso> Hello!

[00:06] <lambdabot> ruoso: You have 1 new message. '/msg lambdabot @messages' to read it.

[00:07] *** sri_work left
[00:10] <ruoso> @tell pmurias, memory leaks can eventually cause bugs... it's better to hunt them down...

[00:10] <lambdabot> Consider it noted.

[00:13] *** jferrero left
[00:51] *** kanru joined
[00:53] *** eternaleye left
[01:13] *** baest left
[01:13] *** baest joined
[01:21] * ruoso found out that there is a problem when a mold frame is executed with a slime frame as back...

[01:21] *** eternaleye joined
[01:22] <ruoso> there is some bug in mold that leaves an additional reference to the back frame...

[01:23] *** wknight8111 left
[01:25] *** Ehtyar joined
[01:27] *** xiaoyafeng_ joined
[01:29] *** xiaoyafeng__ joined
[01:41] *** wknight8111_ left
[01:42] *** wknight8111 joined
[01:46] *** xiaoyafeng left
[01:48] *** xiaoyafeng_ left
[01:51] *** [particle] joined
[01:59] *** alester left
[01:59] *** sri_work_ left
[02:02] *** wknight8111 left
[02:03] *** [particle]1 left
[02:06] *** xiaoyafeng joined
[02:13] *** xiaoyafeng_ joined
[02:14] *** xiaoyafeng__ left
[02:29] *** xiaoyafeng_ left
[02:29] <Khisanth> o_O :ratchet is the only flag without a short form?

[02:31] *** xiaoyafeng left
[02:33] *** a-jing joined
[02:33] *** a-jing left
[03:02] *** elmex_ joined
[03:11] *** alanhaggai joined
[03:15] *** drbean joined
[03:16] *** elmex left
[03:16] *** elmex_ is now known as elmex

[03:24] *** eternaleye left
[03:28] *** alester joined
[04:10] *** eternaleye joined
[04:18] *** [particle]1 joined
[04:21] *** ashizawa joined
[04:25] *** [particle] left
[04:55] *** justatheory joined
[05:12] *** PZt left
[05:18] *** PZt joined
[05:21] *** Auzon left
[05:21] *** Auzon joined
[05:22] *** Psyche^ joined
[05:24] *** REPLeffect left
[05:36] *** yves joined
[05:37] *** Patterner left
[05:37] *** Psyche^ is now known as Patterner

[05:47] <moritz_> Khisanth: it's implied in rule { } and in token { }

[06:07] *** masak joined
[06:10] *** dduncan left
[06:22] *** ashizawa left
[06:22] *** AzureStone joined
[06:22] *** ashizawa joined
[06:26] *** ashizawa_ joined
[06:30] *** ashizaw__ joined
[06:31] *** ashizaw__ left
[06:31] *** ashizawa left
[06:34] *** ashizawa joined
[06:36] *** ashizawa_ left
[06:42] <rakudo_svn> r30947 | moritz++ | [rakudo] make .rindex work on non-strings, closes RT #58644

[06:42] <rakudo_svn> r30947 | moritz++ | Patch courtesy by Vasily Chekalkin, bacek++

[06:43] <pugs_svn> r22197 | moritz++ | [t/spec] unfudged passing rindex patch for rakudo, added test for index() on

[06:43] <pugs_svn> r22197 | moritz++ | non-Str's

[06:44] *** alester left
[06:44] *** jferrero joined
[06:45] *** justatheory left
[06:46] *** Bierwagen joined
[06:46] <Bierwagen> hi

[06:46] <Bierwagen> can anybody help me?

[06:47] <moritz_> if you want Perl 6 help, probably yes

[06:48] *** jferrero left
[06:48] <masak> Bierwagen: don't ask to ask, just ask.

[06:49] <Bierwagen> where are the differences between perl and perl 6

[06:49] <moritz_> there are quite many, I tried to make some points here: http://perlgeek.de/blog-en/perl-5-to-6/

[06:49] <lambdabot> Title: blog | Perlgeek.de Blog :: Category Perl-5-to-6

[06:49] <masak> Bierwagen: http://svn.pugscode.org/pugs/docs/Perl6/Perl5/Differences.pod

[06:51] <Bierwagen> I´m a noob at perl

[06:51] <masak> gotta start somewhere :)

[06:51] <Bierwagen> so can anybody say me, whats wrong

[06:51] <Bierwagen> http://rafb.net/p/8nrPqg25.html

[06:51] <lambdabot> Title: Nopaste - No description

[06:51] <moritz_> Bierwagen: that's perl 5 code

[06:52] <masak> Bierwagen: better to ask at #perl

[06:52] <Bierwagen> oh

[06:52] <moritz_> or #perlhelp or so

[06:52] <Bierwagen> ok

[06:52] <Bierwagen> thanks

[06:52] <Bierwagen> bye

[06:52] <masak> Bierwagen: good luck!

[06:52] *** Bierwagen left
[06:52] *** sri_work joined
[06:52] * moritz_ was never in #perl himself, but heard some stories... scary

[06:53] <masak> yup.

[06:53] <moritz_> maybe I should have recommended #perlde on irc.perl.org, considering his nick...

[06:53] <moritz_> too late

[06:53] <masak> mm.

[07:13] <Khisanth> hmm maybe having %h<foo> the auto quoting version is a good thing after all ... less work for the right pinky :)

[07:19] *** araujo_ joined
[07:19] *** araujo left
[07:20] <literal> hey, I was wondering, will %h<$foo> interpolate?

[07:21] <moritz_> no

[07:21] *** araujo_ left
[07:21] <literal> ok

[07:21] <moritz_> that's what %h{$foo} is for

[07:21] <literal> yeah

[07:21] *** araujo joined
[07:21] <moritz_> you can use %h<<stuff_with_$ending>> though

[07:21] <moritz_> but that only works if $ending doesn't contain spaces, because <<...>> splits on spaces

[07:22] <literal> I see

[07:23] *** eternaleye left
[07:25] *** jferrero joined
[07:26] *** eternaleye joined
[07:31] <pugs_svn> r22198 | pmurias++ | [smop] mold_frame->back is RELEASEd

[07:40] *** iblechbot joined
[07:52] *** pmurias joined
[07:57] *** smg left
[08:03] *** agentzh joined
[08:03] *** ashizawa_ joined
[08:03] *** ashizawa left
[08:08] <pmurias> ruoso: hi

[08:28] *** a-jing joined
[08:28] *** a-jing left
[08:35] *** Maghnus joined
[08:45] *** zamolxes joined
[08:46] *** Maghnus left
[08:47] <masak> moritz_: shouldn't `m boob` be `m bood` ? :)

[08:47] *** wknight8111 joined
[08:47] * masak is suddenly overcome with relief that the Unicode consortium seemingly consists of sane people

[08:49] <moritz_> masak: ;)

[08:50] *** Maghnus joined
[08:51] *** barney joined
[08:59] *** jferrero left
[08:59] *** BinGOs left
[08:59] *** cosimo left
[08:59] *** s1n left
[08:59] *** Lunchy left
[09:00] *** jferrero joined
[09:00] *** BinGOs joined
[09:00] *** cosimo joined
[09:00] *** s1n joined
[09:00] *** Lunchy joined
[09:00] *** bennymack-work joined
[09:00] *** Guest16015 joined
[09:05] *** [1]Maghnus joined
[09:07] *** bennymack-work left
[09:07] *** s1n left
[09:07] *** cosimo left
[09:07] *** Lunchy left
[09:07] *** Guest16015 left
[09:07] *** BinGOs left
[09:07] *** jferrero left
[09:07] *** jferrero joined
[09:07] *** BinGOs joined
[09:07] *** cosimo joined
[09:07] *** s1n joined
[09:07] *** Lunchy joined
[09:07] *** bennymack-work joined
[09:07] *** Guest16015 joined
[09:21] *** Maghnus left
[09:21] *** [1]Maghnus is now known as Maghnus

[09:23] *** pmurias left
[09:27] *** smg joined
[09:27] *** wknight8111 left
[09:31] *** [1]Maghnus joined
[09:38] *** barney left
[09:39] <masak> rakudo: my @x = (1,2,3,4,5); @x.pop while @x.elems > 3; say @x.perl

[09:39] <p6eval> rakudo 30954: OUTPUT[[1, 2, 3]␤]

[09:40] <masak> any suggestions for an easier way to get the slice @x[0..2]? :)

[09:40] <moritz_> implement slices?

[09:40] <masak> "easier"

[09:40] <moritz_> I'll apply the patch ;)

[09:41] <masak> I'm in user mode now, not implementor mode :)

[09:42] <moritz_> mode.switch('hacker')

[09:42] * masak studies Chinese right now

[09:43] <masak> I've written a short script that rehearses words with me

[09:43] <masak> I need slices because it's more convenient to learn words 10 at a time

[09:45] <masak> oh well. the `.pop while` version works.

[09:47] *** Maghnus left
[09:47] *** [1]Maghnus is now known as Maghnus

[09:48] *** zamolxes left
[09:51] <moritz_> pugs: my $x = 5; { my $x = 2; say $OUTER::x; }

[09:51] <p6eval> pugs: OUTPUT[5␤]

[09:51] <moritz_> pugs: my $x = 5; { my $x = 2 *  $OUTER::x; say $x }

[09:51] <p6eval> pugs: OUTPUT[10␤]

[09:52] <moritz_> pugs: my $x = 5; { my $x = 2 * $x; say $x }

[09:52] <p6eval> pugs: OUTPUT[0␤]

[09:52] <moritz_> wow, all correct

[09:52] <moritz_> pugs++

[09:57] <masak> in a perfect world, should that last one get a warning?

[09:58] <moritz_> yes

[09:59] *** pmurias joined
[10:01] *** AzureStone left
[10:03] *** ruoso left
[10:05] *** AzureStone joined
[10:08] *** [particle]1 left
[10:08] *** masak left
[10:18] *** alanhaggai left
[10:25] *** alanhaggai joined
[10:33] *** xiaoyafeng joined
[10:33] <moritz_> Auzon: did the submission of your code to google work out?

[10:36] <Juerd> Someone requested a p3rl.org redirect but I forgot all about it

[10:36] <Juerd> Please repeat :)

[10:37] <moritz_> Juerd: smop to http://www.perlfoundation.org/perl6/index.cgi?smop

[10:37] <lambdabot> Title: SMOP / Perl 6

[10:37] <moritz_> Juerd: it was pmurias, I think

[10:37] <Juerd> Will do; thanks for repeating

[10:38] <Juerd> Now active

[10:39] <moritz_> works, thanks

[10:40] *** xiaoyafeng_ joined
[10:41] *** zamolxes joined
[10:47] *** xiaoyafeng__ joined
[10:49] *** xiaoyafeng___ joined
[10:55] <pmurias> Juerd: sorry, forgot to send the email

[10:55] <Juerd> That's okay

[10:56] <Juerd> I forgot I asked you to

[10:56] *** xiaoyafeng____ joined
[10:57] *** wknight8111 joined
[10:59] *** xiaoyafeng left
[10:59] *** xiaoyafeng____ is now known as xiaoyafeng

[11:04] *** iblechbot left
[11:06] *** xiaoyafeng_ left
[11:09] *** xiaoyafeng__ left
[11:12] *** ashizawa_ left
[11:13] *** xiaoyafeng___ left
[11:20] *** xiaoyafeng____ joined
[11:26] *** xiaoyafeng_ joined
[11:28] *** barney joined
[11:36] *** meppl joined
[11:39] *** xiaoyafeng left
[11:40] *** xiaoyafeng joined
[11:41] *** charsbar_ joined
[11:43] *** riffraff joined
[11:43] <riffraff> hi

[11:43] <moritz_> hi

[11:45] *** xiaoyafeng____ left
[11:56] *** charsbar_ left
[12:00] *** charsbar_ joined
[12:02] <smtms> win 19

[12:03] <moritz_> loose 19

[12:04] <moritz_> that's life ;)

[12:05] *** ashizawa joined
[12:07] *** sri_work left
[12:07] *** [particle] joined
[12:09] *** xiaoyafeng_ left
[12:12] *** jferrero left
[12:40] *** pmurias left
[12:42] *** iblechbot joined
[12:47] *** riffraff left
[12:47] *** barney left
[12:54] *** alester joined
[12:56] *** cosimo left
[13:00] *** xiaoyafeng_ joined
[13:01] *** a-jing joined
[13:01] *** a-jing left
[13:02] *** xiaoyafeng__ joined
[13:05] *** xiaoyafeng___ joined
[13:06] *** [particle] left
[13:07] *** xiaoyafeng____ joined
[13:07] *** alester left
[13:09] *** [particle] joined
[13:10] *** jferrero joined
[13:12] *** xiaoyafeng__ left
[13:13] *** xiaoyafeng__ joined
[13:15] *** ggoebel joined
[13:16] *** xiaoyafeng____ left
[13:17] *** xiaoyafeng____ joined
[13:18] *** xiaoyafeng left
[13:18] *** xiaoyafeng____ is now known as xiaoyafeng

[13:19] *** xiaoyafeng_ left
[13:19] *** Auzon1 joined
[13:19] *** Auzon left
[13:21] *** smg left
[13:21] *** smg joined
[13:21] *** kanru left
[13:23] *** jferrero left
[13:24] *** jferrero joined
[13:27] *** xiaoyafeng____ joined
[13:33] *** xiaoyafeng__ left
[13:33] *** xiaoyafeng_ joined
[13:36] *** xiaoyafeng__ joined
[13:37] *** xiaoyafeng___ left
[13:37] *** xiaoyafeng___ joined
[13:38] *** Auzon1 left
[13:48] *** Myoma left
[13:48] *** xiaoyafeng left
[13:48] *** Myoma joined
[13:52] *** xiaoyafeng____ left
[13:55] *** xiaoyafeng_ left
[13:55] *** xiaoyafeng__ left
[13:57] *** TJCRI joined
[14:00] *** alanhaggai left
[14:02] *** xiaoyafeng___ left
[14:03] <pugs_svn> r22199 | moritz++ | [t] moved char_by_name.t to spec/

[14:09] <pugs_svn> r22200 | moritz++ | [t] moved char_by_number.t to spec/

[14:12] <moritz_> TimToady: t/syntax/pairs.t uses [,] %hash to interpolate named arguments into a capture - is that still allowed?

[14:14] <moritz_> uhm, seems to be used in S03 as an example, so probably yes

[14:15] *** xiaoyafeng__ joined
[14:15] *** xiaoyafeng__ is now known as xiaoyafeng

[14:19] <pugs_svn> r22201 | moritz++ | [t] moved pairs.t to spec/, fudged a bit, added a test

[14:26] <rakudo_svn> r30966 | pmichaud++ | [rakudo]:  spectest-progress.csv update: 158 files, 3288 passing tests

[14:28] *** baest left
[14:28] *** baest joined
[14:32] <rakudo_svn> r30967 | pmichaud++ | [rakudo]:  Fix .kv method on Mapping to not stringify values (RT #58744)

[14:32] *** ashizawa left
[14:34] *** kanru joined
[14:35] *** rdice joined
[14:43] <pugs_svn> r22202 | moritz++ | [t] fudged pairs.t for rakudo

[14:52] *** nwc10 joined
[14:56] <rakudo_svn> r30968 | moritz++ | [rakudo] add tests for pairs to spectest_regression

[14:59] *** cookys joined
[15:00] *** alester joined
[15:01] *** xiaoyafeng__ joined
[15:01] <pugs_svn> r22203 | moritz++ | [t/spec] unfudged a test for rakudo

[15:05] *** alester left
[15:05] *** zamolxes left
[15:07] *** xiaoyafeng_ joined
[15:11] *** xiaoyafeng___ joined
[15:11] *** alanhaggai joined
[15:13] *** TJCRI left
[15:14] <speckbot> r14581 | pmichaud++ | Typo fix  "last" -> "list"

[15:16] *** xiaoyafeng____ joined
[15:18] *** viklund left
[15:25] *** xiaoyafeng__ left
[15:30] *** xiaoyafeng_ left
[15:31] *** xiaoyafeng left
[15:33] *** xiaoyafeng___ left
[15:36] *** justatheory joined
[15:37] *** Jedai left
[15:38] *** Jedai joined
[15:45] *** xinming_ left
[15:55] *** xiaoyafeng joined
[16:04] *** nwc10 left
[16:05] *** paz joined
[16:16] *** xiaoyafeng____ left
[16:16] *** armagad joined
[16:49] *** eternaleye left
[16:56] *** pmurias joined
[17:02] *** xiaoyafeng_ joined
[17:05] *** eternaleye joined
[17:09] *** xiaoyafeng__ joined
[17:11] *** xiaoyafeng___ joined
[17:17] *** xiaoyafeng____ joined
[17:21] *** xiaoyafeng left
[17:21] *** xiaoyafeng joined
[17:27] *** xiaoyafeng_ left
[17:30] *** xiaoyafeng__ left
[17:32] *** xiaoyafeng_ joined
[17:33] *** ruoso joined
[17:33] <ruoso> Hello!

[17:33] <ruoso> pmurias, hi

[17:35] *** xiaoyafeng__ joined
[17:36] *** xiaoyafeng___ left
[17:37] *** Myoma left
[17:37] *** xiaoyafeng___ joined
[17:38] <ruoso> pmurias++ one less test leaking ;)

[17:38] *** eternaleye left
[17:39] *** xiaoyafeng____ left
[17:40] *** Jedai left
[17:41] *** Jedai joined
[17:43] *** xiaoyafeng____ joined
[17:51] *** xiaoyafeng left
[17:51] *** pmurias left
[17:52] *** xiaoyafeng joined
[17:54] *** xiaoyafeng_ left
[17:55] *** xiaoyafeng__ left
[17:57] *** pbuetow joined
[18:02] *** xiaoyafeng___ left
[18:07] *** rdice left
[18:10] *** xiaoyafeng____ left
[18:21] *** TJCRI joined
[18:23] *** eternaleye joined
[18:32] *** Muixirt joined
[18:32] *** Muixirt left
[18:46] *** justatheory_ joined
[18:46] *** justatheory left
[18:49] <TimToady> moritz_: I don't see much use for attaching such extra semantic baggage to [,] anymore.  All it will do is confuse people, who are already confused enough by prefix:<|>

[18:50] <moritz_> aye

[18:50] <TimToady> well, maybe I'd better read S03 first  :)

[18:53] <TimToady> S03 contradicts itself; I'm so suprised...

[18:54] <TimToady> but I think [,] has to have "reduce" semantics, which means [,] 1,2,3 has to put 1,2,3 into item context, which implies it means [1,2,3], not \(1,2,3), by current spec

[18:55] <TimToady> so I'd go with the interpretation that says [,] @foo is equivalent to [@foo]

[18:55] <moritz_> anyway, the current semantics don't seem to make much sense

[18:58] *** Jedai left
[18:58] *** Jedai joined
[19:03] <speckbot> r14582 | larry++ | inconsistent meaning of [,] noticed by moritz++

[19:05] <ruoso> I'm having some trouble with the semantics of return values...  I mean... in SMOP I have "late context propagation". This means that the method doesn't really predict how its value will be used, but it returns a value that have the appropriate ability to be coerced to the expected contexts... this means that in "my @a = foo()" and "my $a = foo()", the sub foo will work the exact same way... but the runtime will call .List to get the value in list context and 

[19:05] <ruoso> .FETCH to get the value in item context...

[19:06] <ruoso> all this looks Ok at first...

[19:07] <ruoso> but then you have things like map

[19:07] <ruoso> which returns an iterator,

[19:08] <ruoso> that implements prefix:<=>

[19:08] <ruoso> hmm

[19:08] <ruoso> wait...

[19:08] *** armagad left
[19:08] <ruoso> ok... the problem is...

[19:08] <moritz_> map returns a lazy list, not an iterator

[19:09] <ruoso> moritz_, it returns a lazy list if used in list context

[19:09] <moritz_> ruoso: and in unkown context probably an object that stores the lazy list

[19:10] <moritz_> ruoso: and that knows how to respond to other contexts

[19:10] <ruoso> moritz_, have you read the wiki page about SMOP and map?

[19:10] <moritz_> ruoso: no

[19:11] <ruoso> take a look at it... 

[19:11] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop_map_operator

[19:11] <lambdabot> Title: SMOP map operator / Perl 6

[19:12] <ruoso> basically, the problem is that postcircumfix:<[ ]> is not very cursor-friendly

[19:12] <ruoso> or flow-friendly...

[19:12] <ruoso> for instance...

[19:13] <ruoso> if map returns a list and not an iterator, it will be very hard for it to find out when it can discard the items or when it can't

[19:13] <ruoso> a lazy list needs to store all the previously-computed-values

[19:13] <ruoso> an iterator doesn't

[19:13] <ruoso> thus a lazy list can be constructed using an iterator...

[19:14] <ruoso> and so can a lazy slice

[19:14] <PerlJam> ruoso: "needs to store" is an optimization

[19:15] <ruoso> PerlJam, if the lazy list is being produced from a network flow... 

[19:15] <ruoso> how do you have an actual list without storing the values?

[19:15] <ruoso> you can't always re-compute the values

[19:15] <ruoso> which I presume is what you meant...

[19:16] <ruoso> the problem is that you can't really know where your data is coming from...

[19:17] <ruoso> I think the feed operators stress that concept a lot

[19:18] <ruoso> but anyway...

[19:18] <ruoso> the map block might return an item or a list

[19:18] <ruoso> as well as any code block

[19:19] <ruoso> but eventually, you want to take it as a list, and it is just a single item

[19:20] <PerlJam> ruoso: that's what I was implying ... but I guess at some point you do have to know where your data is coming from.  (If you could, how would you query a list for its properties to know what it is and is not capable of?)

[19:21] <moritz_> so all this complexity because you don't have exceptions?

[19:21] <ruoso> PerlJam, considering all the polymorphism Perl 6 supports, you have to assume you can't infer where the data is coming from...

[19:21] <ruoso> moritz_, I don't get it... what do exceptions have to do with it?

[19:22] <moritz_> ruoso: they make the "proper" iterating scheme impossible, don't they?

[19:22] <ruoso> moritz_, they do? why?

[19:23] <moritz_> ruoso: because you can't just say "I want the next value" and catch the exception if it doesn't work?

[19:25] <ruoso> moritz_, sorry... I still don't see your point... the semantics I'm proposing presume exceptions in the future, they are not designed in a way to circumvent the absense of exceptions...

[19:25] <ruoso> the problem I'm facing is if I should assume that every return is, at first, a list of values...

[19:26] <PerlJam> moritz_: I think it's the "i want the next value" that's the problem.  (i.e., it's not the exceptional case that gives grief, but the common case)

[19:26] <ruoso> yes...

[19:26] <ruoso> specially when it's one value, no values or three values

[19:26] <ruoso> which is a common usage for map

[19:26] <ruoso> or grep...

[19:26] <PerlJam> or any lazy thing :)

[19:27] <ruoso> because in list context, that is flattened, but in slice context, you have the return of each individual iteration

[19:27] <ruoso> that is the tricky part

[19:27] <ruoso> and all that also lazy

[19:28] *** justatheory_ left
[19:29] <Khisanth> speaking of flattening ...

[19:29] <Khisanth> moritz_: why do you refer to that as interpolation instead?

[19:30] <moritz_> Khisanth: on the blog?

[19:30] <Khisanth> yes

[19:30] <moritz_> because that's what perl people call it :/

[19:30] <[particle]> what if lists are coroutines that yield values?

[19:31] <ruoso> considering "my $a = @a" allows you to access the array directly... how do you tell the difference between { my @a = (1,2,3); my $b = @a; $b } and { my @a = (1,2,3); my @b = @a; @b } ?

[19:31] <Khisanth> moritz_: erm perl 6 people?

[19:31] <ruoso> [particle], that doesn't solve the problem on how to iterate... only how to implement the iteration...

[19:32] <moritz_> Khisanth: also perl 5 people

[19:32] * Khisanth has never seen anyone call that interpolation

[19:32] * ruoso neither 

[19:33] <moritz_> have you never read the perl documentation?

[19:34] <moritz_> perldoc perlop

[19:34] <moritz_> search for interpolate

[19:35] <moritz_> same for various perl\d+delta.pod and perlre

[19:37] <Khisanth> erm that is all for "foo $bar" type stuff in perlop

[19:38] <moritz_> and it's not what I mean in the blog?

[19:38] * moritz_ is thoroughly confused

[19:39] <Khisanth> I am referring to "By default arrays aren't interpolated in argument lists, so unlike in Perl 5 you can write something like this:"

[19:39] <moritz_> ah, capture interpolation

[19:39] <moritz_> in perl 5 there is no such thing

[19:40] <moritz_> http://perlcabal.org/syn/S03.html#Argument_List_Interpolating # that's where I got the name from

[19:40] <lambdabot> Title: S03

[19:40] <pmichaud> ruoso:   my $b = @a;  is item assignment,  my @b = @a;  is list assignment

[19:41] *** Auzon joined
[19:41] <pmichaud> as such,  $b does not interpolate into a list, while @b will.

[19:44] * Khisanth wonders which of the meanings of calling functions with & the author of S03 is referring to

[19:44] <moritz_> pugs: my $x = (1, 2); say (3, $x, 4).perl

[19:44] <p6eval> pugs: OUTPUT[(3, \(1, 2), 4)␤]

[19:45] <moritz_> pugs: my $x = (1, 2); say (3, $x, 4).elems

[19:45] <p6eval> pugs: OUTPUT[3␤]

[19:45] <moritz_> Khisanth: maybe &func(@args) which turns off prototype checking

[19:45] <Khisanth> I am aware of that

[19:46] <ruoso> pmichaud, right... I get that... but how do I differentiate that in the lowlevel?

[19:47] <pmichaud> ruoso: I haven't completely figured that out myself yet.  That's why [1, [2, 3]] isn't working in Rakudo at the moment.

[19:47] <ruoso> should I assume that every return value is a list?

[19:47] <pmichaud> well, it acts mostly like an argument list

[19:48] <pmichaud> in particular,   return (3,4)    and return(3,4)  aren't exactly the same.  :-)

[19:49] <pmichaud> (same as   say (3,4)   and say(3,4)   do different things)

[19:49] <ruoso> they do?

[19:49] <ruoso> :D

[19:49] <moritz_> shouldn't it just return a capture that flattens in list context but not in slice context?

[19:49] <pmichaud> moritz:  that's my thinking, yes.

[19:50] <pmichaud> in other words, it's the same as any other call semantics, except 'return' is actually doing a "call back to the caller" and passing some arguments

[19:50] <[particle]> that's the cps-way

[19:50] <pmichaud> the caller then receives the arguments (conceptually in the form of a capture) and binds thems to the calling parameter list

[19:50] <[particle]> return is just call. there is no return.

[19:51] <ruoso> SMOP implements it as cps

[19:51] <[particle]> no *distinct* return

[19:52] *** kanru left
[19:52] *** xiaoyafeng_ joined
[19:52] <ruoso> pmichaud,  "[1,[2,3]]"  is actually a very precise example... how do I differentiate "[1,[2,3]]" from "(1,(2,3))"?

[19:53] * ruoso considering the first appears as a list of two items even in list context and the second a list of three items in list context

[19:53] <pmichaud> (2,3) is a List

[19:54] <pmichaud> [2,3] is an Array

[19:54] <moritz_> I think that the first one is actually an array

[19:54] <moritz_> right

[19:54] <pmichaud> [1,[2,3]]  is an Array of two elements

[19:54] <pmichaud> (1, (2, 3))  in list context is a List of three elements

[19:54] *** xiaoyafeng__ joined
[19:55] <ruoso> pmichaud, and [1,[2,3]] in List context?

[19:55] <pmichaud> is an Array -- equivalent to  [[1,[2,3]]]

[19:56] <pmichaud> (note extra brackets)

[19:56] <ruoso> so the distinction of Array and List is the stopper for the flattening?

[19:56] <pmichaud> not completely -- there's something more to it

[19:56] <moritz_> but otoh my @a = 1, 2; my @b = 3; @b.push(@a). Now @b == 3, right?

[19:57] <pmichaud> moritz_: I think not.

[19:57] <pmichaud> I think +@b == 2

[19:57] *** xiaoyafeng___ joined
[19:57] <pmichaud> oops, I'm wrong

[19:57] <pmichaud> @b == 3 because @a is evaluated in flattening list context

[19:57] <lambdabot> Maybe you meant: b52s babel bf bid botsnack brain bug . ? @ v

[19:58] <pmichaud> (because .push has a slurpy array parameter)

[19:58] <moritz_> ok, but @b.push([1,2]) would result in +@b == 2, right?

[19:58] <pmichaud> yes.

[19:58] <moritz_> but we push an exaclty equivalent array, aren't we?

[19:58] *** xiaoyafeng left
[19:59] <pmichaud> ruoso: the reason I think there's something more is that even if we say @b is an Array, @b will flatten in list context

[19:59] *** xiaoyafeng joined
[19:59] <ruoso> I think I found the confusing point...

[19:59] <pmichaud> ISTR that TimToady mentioned something about "scalar Arrays", so that [1,2] is a scalar Array, while @b is just an Array

[19:59] <ruoso> we have an indecision on how much power the sigil has

[20:00] <pmichaud> the sigil determines what the variable is allowed to bind to

[20:00] <pmichaud> $ can bind to anything.  @ binds to things that implement the Positional role.   % binds to things that have the Associative role.

[20:00] <ruoso> it also implies the potential contexts the variable can be used

[20:00] <ruoso>  @ implies flattening

[20:01] <moritz_> pugs: my @a = [1, 2]; say @a.elems

[20:01] <p6eval> pugs: OUTPUT[1␤]

[20:01] <moritz_> pugs: my @a := [1, 2]; say @a.elems

[20:01] <p6eval> pugs: OUTPUT[1␤]

[20:02] <pmichaud> pugs:  my @a = (1,2);  say elems @a;

[20:02] <p6eval> pugs: OUTPUT[2␤]

[20:02] *** xiaoyafeng_ left
[20:02] <pmichaud> pugs:  my @a := [1,2];  say elems @a;

[20:02] <p6eval> pugs: OUTPUT[1␤]

[20:02] <ruoso> pugs seems to use Array × List  as the key 

[20:03] <moritz_> rakudo: my @a := [1, 2]; say @a.elems

[20:03] <p6eval> rakudo 30973: OUTPUT[2␤]

[20:03] <moritz_> rakudo: my @a = [1, 2]; say @a.elems

[20:03] <p6eval> rakudo 30973: OUTPUT[1␤]

[20:03] <pmichaud> (phone)

[20:03] <moritz_> somewho rakudo's output feels right

[20:04] <ruoso> TimToady, is it?

[20:04] <moritz_> ruoso: they're having their design minutes now, perhaps they'll discuss it on phone

[20:05] <ruoso> oh... great...

[20:05] <ruoso> rakudo: my @a = (1,2) ; say elems @a;

[20:05] <p6eval> rakudo 30973: OUTPUT[2␤]

[20:05] <ruoso> just sanity checking ;)

[20:06] <ruoso> If that's correct... than List is a very special type...

[20:07] <ruoso> and I can assume that every item can be seen as a list of a single element...

[20:07] <ruoso> with the exception of the magical "List" type, which is the only thing that appears as an effective List

[20:08] <ruoso> and I think that solves all my questions...

[20:08] <ruoso> in SMOP, every value is a read-only scalar of itself and is also a list of itself...

[20:11] *** justatheory joined
[20:13] <ruoso> an Array in List context is also a list of a single element... a "scalar Array" as pmichaud pointed out that TimToady pointed out...

[20:13] <ruoso> ;)

[20:14] <ruoso> and that means I have my sanity back :D

[20:14] <ruoso> and with that... I should go home  &

[20:15] *** ruoso left
[20:17] *** xiaoyafeng___ left
[20:26] *** xiaoyafeng__ left
[21:00] *** iblechbot left
[21:01] *** paz left
[21:04] *** alester joined
[21:12] *** ggoebel left
[21:22] *** justatheory left
[21:22] *** justatheory joined
[21:28] *** Myoma joined
[21:37] *** zamolxes joined
[21:44] *** alester left
[21:46] *** pmurias joined
[21:47] *** TJCRI left
[21:52] *** zamolxes left
[22:00] *** ggoebel joined
[22:00] *** pbuetow left
[22:05] *** pmurias left
[22:18] *** justatheory left
[22:41] *** eternaleye_ joined
[22:47] *** meppl left
[22:54] *** eternaleye left
[22:56] *** Auzon left
[22:58] *** ruoso joined
[23:16] *** BinGOs_ joined
[23:28] *** BinGOs left
[23:31] *** Limbic_Region joined
[23:34] <wknight8111> where is the best source for Perl 6 info? Is it the synopses at this point?

[23:35] *** ruoso left
[23:36] <PerlJam> wknight8111: what sort of info do you want?

[23:37] *** ruoso_ joined
[23:39] *** lambdabot joined
[23:41] <literal> wknight8111: http://perlgeek.de/blog-en/perl-5-to-6/

[23:41] <lambdabot> Title: blog | Perlgeek.de Blog :: Category Perl-5-to-6

[23:43] <wknight8111> yeah, I've read over that entire series

[23:43] <wknight8111> that's a good source, thanks

[23:43] <Tene> synopses and test suite

[23:43] <PerlJam> wknight8111: there's also the various perl6 articles on perl.com

[23:44] <PerlJam> wknight8111: but the synopses are best for understanding the way the language should be.

[23:44] <wknight8111> I'm planning to start writing a book about Perl 6 on Wikibooks, and I want to make sure I'm getting all the best information about it

[23:44] <Tene> Synopses and the test suite

[23:45] <wknight8111> yeah, the dreaded test suite. 

[23:45] <PerlJam> wknight8111: what Tene said for sure then

[23:47] *** elmex left
