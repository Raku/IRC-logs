[00:33] <pugs_svn> r24382 | hinrik++ | [examples/euler] adjust the characters allowed in an identifer, support all variants of Â«Â»/<<>> hyperops, don't allow nonsensical sigil combinations

[00:36] <literal> er...that was supposed to be [util/perl6.vim] ....oh well

[00:54] *** gnuvince_ joined
[00:54] *** gnuvince_ left
[00:55] *** mpeter joined
[00:59] *** DemoFreak left
[01:05] *** simcop2387 left
[01:08] *** simcop2387 joined
[01:09] *** Chillance left
[01:22] *** tmaesaka joined
[01:28] *** liufeng joined
[01:32] *** alexn_org left
[01:48] *** stephens joined
[01:59] *** hercynium joined
[02:02] *** mpeters joined
[02:06] *** PZt joined
[02:07] *** mpeter left
[02:10] <rakudo_svn> r33907 | pmichaud++ | [rakudo]:  Merge associative branch into trunk.

[02:10] <rakudo_svn> r33907 | pmichaud++ | Rakudo now supports slicing on hashes.

[02:10] *** ChrisDavaz joined
[02:24] *** alech left
[02:28] *** alech joined
[02:29] *** mpeters is now known as mpeter

[02:30] *** alanhaggai left
[02:34] *** alanhaggai joined
[02:36] *** alc joined
[02:37] *** alc left
[02:39] *** alc joined
[02:39] *** alanhaggai left
[02:44] *** alanhaggai joined
[03:00] <mpeter> does perl 6 work yet

[03:02] <Hinrik> some of it does

[03:07] *** Psyche^ joined
[03:13] <alester> mpeter: Check out rakudo.org to check the key Perl 6 implementation, Rakudo Perl.

[03:18] *** Patterner left
[03:18] *** Psyche^ is now known as Patterner

[03:30] <mpeter> you guys have any example scripts yet?

[03:30] <mpeter> can we do functional code :)

[03:32] <Hinrik> mpeter: here's an application -> http://github.com/viklund/november/tree/master/p6w

[03:36] <Hinrik> mpeter: there's also the Perl 6 test suite -> http://svn.pugscode.org/pugs/t/spec/

[03:36] <mpeter> wikis are a fad ;)

[03:36] *** xinming left
[03:36] <mpeter> or at least wikipedia is

[03:37] *** xinming joined
[03:38] <mpeter> wikipedia sucks

[03:43] <mpeter> is pugs named after hugs

[03:43] <Hinrik> yeah

[03:45] <mpeter> i like haskell

[03:51] *** Limbic_Region left
[03:53] *** xinming left
[04:02] *** elmex_ joined
[04:05] *** Psyche^ joined
[04:06] *** smtms left
[04:07] *** meppl left
[04:07] *** meppl joined
[04:07] <pugs_svn> r24383 | hinrik++ | [util/perl6.vim] add more keywords, improve matching of reduce, hyperoperators, and angles, fix problem with package scope in some variables

[04:12] *** eternaleye left
[04:14] <alester> mpeter: Whehter wikis are fads or not, it's still good, working code.

[04:14] *** hercynium left
[04:15] *** Patterner left
[04:15] *** Psyche^ is now known as Patterner

[04:17] *** eternaleye joined
[04:17] *** elmex left
[04:17] *** elmex_ is now known as elmex

[04:32] <pugs_svn> r24384 | hinrik++ | [util/perl6.vim] highlight separators in Pod formatting codes such as | in L<>, (this is is now the second largest vim syntax file ever, yay)

[04:35] <Eevee> what's the largest?

[04:36] <Hinrik> baan.vim which is distributed with vim

[04:37] <Hinrik> no idea what baan is though

[04:37] <Hinrik> but I must say that it cheats by putting only one keyword per line, which takes up a lot of lines :)

[04:41] <pugs_svn> r24385 | leto++ | Tests for hyperbolic trig functions

[04:47] <meppl> good night

[04:48] *** meppl left
[05:08] *** stephens left
[05:11] <pugs_svn> r24386 | leto++ | Add tests for sec(), cosech() and cotanh()

[05:16] *** tmaesaka left
[05:21] <pugs_svn> r24387 | leto++ | Unfudge passing hash slice tests

[05:24] <pugs_svn> r24388 | leto++ | Unfudge passing hash reference tests

[05:30] <pugs_svn> r24389 | leto++ | Unfudge passing hash subscript tests in S02

[05:40] *** alester_ joined
[05:48] *** xinming joined
[06:02] <pugs_svn> r24390 | azawawi++ | [Syntax::Highlight::Perl6] Fixed a typo

[06:04] *** lumi_ joined
[06:06] <azawawi> good morning

[06:07] *** azawawi left
[06:10] *** xinming left
[06:11] <Hinrik> hi

[06:15] *** xinming joined
[06:17] *** lumi left
[06:20] <rakudo_svn> r33913 | tene++ | [rakudo]: Update warn() to use an exception.

[06:30] <rakudo_svn> r33915 | pmichaud++ | [rakudo]: spectest-progress.csv update: 249 files, 5101 passing, 0 failing

[06:43] *** ashizawa joined
[06:47] *** DemoFreak joined
[06:51] *** justatheory joined
[06:58] *** justatheory left
[06:59] *** justatheory joined
[07:06] *** sri_kraih joined
[07:18] *** adc_penner joined
[07:25] *** smtms joined
[07:28] *** eternaleye_ joined
[07:35] *** justatheory left
[07:45] *** alanhaggai left
[07:46] *** iblechbot joined
[07:58] *** bacek__ left
[08:05] *** pbuetow joined
[08:10] *** alanhaggai joined
[08:11] *** xinming left
[08:11] *** xinming joined
[08:28] *** alester_ left
[08:33] *** pbuetow left
[08:45] *** justatheory joined
[09:01] *** alanhaggai left
[09:08] *** adc_penner left
[09:10] *** adc_penner joined
[09:22] *** justatheory left
[09:27] *** adc_penner left
[09:40] *** ejs joined
[09:46] *** ejs left
[09:47] *** ejs joined
[09:52] *** donaldh joined
[10:16] *** ashizawa left
[10:17] *** sri_kraih_ joined
[10:17] *** alexn_org joined
[10:18] *** xinming left
[10:19] <baest> moritz_: ping, I just saw your tests in ws.t, and should the 'implicit <.ws> is overridden' capture 'axb'?

[10:20] <baest> moritz_: I thought the capture should contain 'ab'

[10:22] <moritz_> baest: $/ itself captures the whole matched string, not only those parts that were captured by a capturing subrule

[10:25] <baest> moritz_: ok, then I misunderstood it then. Then it work for me and my ticket describes the wrong problem as you said. But isn't it possible then to match something and throw it away again?

[10:25] *** sri_kraih left
[10:26] <moritz_> baest: I still think that your problem is related to ws overriding, even though my test case happens to work...

[10:27] <baest> moritz_: well, it matches correctly, but I just thought that I could have it remove the comments from the capture so I didn't have to bother with that

[10:28] *** alc left
[10:28] <moritz_> baest: I haven't worked through your example yet ... (more)

[10:29] <moritz_> baest: but if you don't want to bother about whitespaces, walk through all the captured subrules instead

[10:29] <baest> moritz_: it works like your test cases, so no need. Your example puzzles me :) 

[10:30] <moritz_> baest: so if you have rule foo { <bar> <baz> }, just walk through $<bar> and $<baz>

[10:33] <baest> moritz_: yes, you're right, I could do that, but that would also mean that I would have to have a sub rule for each "element", a bit annoying, but I guess that's the way to go

[10:37] <moritz_> baest: actually that's an open problem in the matching/capturing process, and TimToady is still thinking about it

[10:38] *** alexn_org left
[10:39] <baest> moritz_: good, that is good news, it didn't seem very perl6ish that I had to bother with that :) Maybe a flag that throws away everything matched in non capturing subrules

[10:41] <moritz_> baest: my proposed solution was more like an iterator over $/ that iterates over all captured elements in the order in which they appeared in the string

[10:41] <pugs_svn> r24391 | pmurias++ | [mildew]

[10:41] <pugs_svn> r24391 | pmurias++ | the last thing in a sub is returned

[10:41] <pugs_svn> r24391 | pmurias++ | removed clean from the default target

[10:41] *** ruoso left
[10:42] <baest> moritz_: that would also work for me

[10:42] *** pmurias joined
[11:03] *** justatheory joined
[11:11] *** pmurias left
[11:13] *** ChrisDavaz left
[11:14] *** mpeter left
[11:22] *** xinming joined
[11:24] *** xinming left
[11:24] *** xinming joined
[11:38] *** jferrero joined
[11:41] *** REPLeffect left
[11:44] *** Lorn joined
[11:47] *** alanhaggai joined
[11:51] *** alanhaggai left
[11:57] *** vixey joined
[12:00] *** magnarjg joined
[12:26] *** meppl joined
[12:27] *** alanhaggai joined
[12:27] *** xinming left
[12:48] *** iblechbot left
[13:00] <pmichaud> ....here's a question based on things I saw in the test suite last night.

[13:00] <pmichaud> Let's start with a simple case:

[13:00] <pmichaud> @array = [1, 2, 3];    #  @array has how many elements?

[13:00] <lambdabot> I'll crush ye barnacles!

[13:03] <jnthn> 1?

[13:03] <pmichaud> that's what I think also.  Now then:

[13:03] <pmichaud> @array = { a=>1, b=>2 };   #  @array has how many elements ?

[13:03] <lambdabot> Yo ho ho, and a bottle of rum!

[13:04] <moritz_> pmichaud: 1

[13:04] <pmichaud> okay, and with

[13:04] <jnthn> 1.

[13:04] <moritz_> funny number guessing :-)

[13:04] <pmichaud> %hash = { a => 1, b => 2 };   #  error?

[13:04] *** jferrero left
[13:04] <jnthn> Uneven number of elements.

[13:05] <moritz_> I think so, yess

[13:05] <moritz_> jnthn: that's called "odd" :-)

[13:05] <pmichaud> okay.  Test suite says otherwise in many places.

[13:05] <pmichaud> lots of places say   my %hash = { ... };

[13:05] <moritz_> however there's a special case, iirc

[13:05] <jnthn> moritz_: OH YEAH!

[13:05] <jnthn> :-)

[13:05] <moritz_> my %hash = hash{ ... }

[13:05] <moritz_> there is a hash constructor somewhere that uses curlies

[13:06] <moritz_> uhm..

[13:06] <moritz_> pmichaud: see S03, search for "hash composer"

[13:06] <pmichaud> I think that's actually the same issue:

[13:06] <moritz_> it lists '{ a => 42 }' as a hash composer

[13:07] <pmichaud> hash { ... }    # odd number of elements

[13:07] *** jferrero joined
[13:07] <pmichaud> sure, I have no problem with { a => 42 }  being a hash composer

[13:07] <pmichaud> my question is whether it creates a hash or a hashref

[13:08] <moritz_> perl6: my $x = 0; $x++ for { a => 1, b => 2 }; say $x

[13:08] <jnthn> In @a = { a => 42 }

[13:08] <p6eval> elf 24391: OUTPUT[Can't call method "flatten" on unblessed reference at (eval 117) line 4.␤ at ./elf_f line 3861␤]

[13:08] <p6eval> ..pugs: OUTPUT[2␤]

[13:08] <p6eval> ..rakudo 33915: OUTPUT[1␤]

[13:08] <jnthn> I would expect it to have an array of one hash element.

[13:08] <jnthn> Which implies hashref, as a hash would flatten there when put in list context, IIRC?

[13:08] <pmichaud> flattening hash produces a single pair 

[13:08] <pmichaud> (iirc)

[13:09] <pmichaud> I mean, flattening hash produces list of pairs

[13:10] <pmichaud> still, the question is whether the { ... } produce a hashref or no.

[13:11] <moritz_> pugs seems to think it's not a reference

[13:12] <moritz_> (and although it did many things wrong, the ref/nonref distinction was astongishly right most of the time)

[13:12] <moritz_> maybe ask p6l?

[13:13] <pmichaud> okay, I don't have a problem with "not a ref".  That's consistent with most of the existing test suite.

[13:14] <pmichaud> it does mean that  @array = { a=>1, b=>2 }  gives @array two elements and not one.

[13:14] <moritz_> it will feel very weird for many perl 5 programmers :-)

[13:15] <pmichaud> I have to get kids to school -- will post message when I get back

[13:18] *** xinming joined
[13:19] *** jferrero left
[13:27] *** pmurias joined
[13:29] *** alanhaggai left
[13:52] <pmichaud> I've been under the impression that a hash in list context produces a list of pairs... but I can't find confirmation of that in the synopses.  Can anyone else confirm somehow?  (e.g., synopsis reference or test?)

[14:02] *** iblechbot joined
[14:03] *** xinming left
[14:10] <pmichaud> aha, I see why rakudo has been working okay til now.  It's been giving hashref special treatment in the hash contextualizer.

[14:12] <pmichaud> that kinda makes sense, so maybe we'll stick with that for now.

[14:17] *** ruoso joined
[14:20] *** alanhaggai joined
[14:26] *** maerzhase joined
[14:32] *** alech left
[14:33] <ruoso> Hello!

[14:36] <moritz_> so maybe the hardest part of "implementing Perl 6" is "understanding Perl 6" :-)

[14:38] *** DemoFreak left
[14:38] *** thepler left
[14:38] *** lisppaste3 left
[14:38] *** gbacon left
[14:39] *** DemoFreak joined
[14:39] *** gbacon joined
[14:39] *** thepler joined
[14:42] <pmichaud> 20:33

[14:42] <pmichaud> 	TimToady

[14:42] <pmichaud> 	after all, Perl Philosphy is simply to torment the implementors on behalf of the user

[14:42] <pmichaud> grr, that didn't paste well.

[14:49] *** maerzhase left
[15:05] *** spx2 left
[15:06] *** spx2 joined
[15:08] *** alanhaggai_ joined
[15:09] *** ruoso left
[15:10] <rakudo_svn> r33916 | pmichaud++ | [rakudo]:  Refactor Array assignment.

[15:11] *** ruoso joined
[15:14] <pmurias> ruoso: hi

[15:14] <lambdabot> pmurias: You have 2 new messages. '/msg lambdabot @messages' to read them.

[15:17] <ruoso> hi pmichaud 

[15:17] <ruoso> hi pmurias 

[15:19] <pmurias> ruoso: we have the autovivifaction stuff nicely specced somwhere?

[15:20] <pmurias> .^!private_storage{$?CLASS} needs to be autovivified

[15:20] <ruoso> pmurias, well... after we have hash bvalue

[15:20] <ruoso> it's kinda ready to work

[15:21] <ruoso> the hard part now is the universal undef that becomes anythign

[15:22] <pmurias> we need to decide if we want to allow mutable RI's

[15:23] *** alanhaggai left
[15:24] *** jhorwitz joined
[15:33] <ruoso> pmurias, what do you mean?

[15:33] *** pmurias_ joined
[15:33] *** pmurias left
[15:34] <pmurias_> ruoso: can objects "morph" into a different RI?

[15:34] *** DemoFreak left
[15:34] <ruoso> well... conceptually the runtime is not aware of that...

[15:35] <ruoso> meaning that if you can handle it, it can be done

[15:35] <ruoso> but it could require a realloc

[15:35] <ruoso> which could lead to undesired effects

[15:35] <ruoso> i.e. the pointer being moved

[15:35] *** pmurias_ is now known as pmurias

[15:36] <pmurias> if the RI pointer was constant the optimiser could rely on it

[15:37] <ruoso> the RI pointer for most types currently implemented are constant

[15:38] <ruoso> but...

[15:38] <ruoso> it's important to realize that the way autovivification work doesn't require changing RI

[15:38] <ruoso> it requires a OO-capable RI

[15:38] <ruoso> i.e.: p6opaque

[15:38] *** SamB left
[15:38] <ruoso> so it can be blessed to something else

[15:39] <ruoso> but... 

[15:39] <ruoso> we probably can get away because of the bvalue object

[15:40] <ruoso> if the bvalue returns itself on FETCH (if the target hash doesn't have the key)

[15:40] <ruoso> and it also support .{} and .[]

[15:40] <ruoso> you can have Perl 6 autovivification semantics in SMOP rather easy

[15:40] <ruoso> actually, I think that's all you nee

[15:41] <ruoso> pmurias, make hash bvalue return itself if the actual hash doesn't contain the desired key on FETCH

[15:42] <ruoso> pmurias, then implement .{} and .[] returning a bvalue-of-bvalue object

[15:43] <ruoso> pmurias, and also implement .{} and .[] in bvalue-of-bvalue, returning another bvalue-of-bvalue... 

[15:43] <ruoso> when someone does %a{b}{c}[0][1] you'll get a chain of bvalue-of-bvalue objects

[15:44] <ruoso> and if then that is used as a target to STORE

[15:44] <pmurias> that would mean a non-bvalue object couldn't autovifiy

[15:45] <ruoso> hmm... it actually means that autovivifcation of hashes and arrays is special cased

[15:45] <ruoso> it doesn't change the use of WHENCE

[15:46] *** alanhaggai_ left
[15:46] <pmurias> WHENCE is a bit different

[15:46] <ruoso> yes

[15:46] <ruoso> it's the higher-level version of the thing I just described

[15:49] <ruoso> pmurias, but did you understand how that works as a lazy lookup mechanism

[15:49] <ruoso> ?

[15:49] <ruoso> and how it is collapsed in the end?

[15:49] <pmurias> pmurias: yes

[15:51] * ruoso .oO ( is pmurias trying to convince himself that he understood? )

[15:51] <pmurias> heh

[15:51] <pmurias> ruoso: yes

[15:53] <ruoso> the only thing blurred about that

[15:53] <ruoso> is how that chain is notified that it was a target of a bind

[15:53] <ruoso> my $a := %a{1}[2]{4}[5];

[15:53] <ruoso> or of a capture

[15:53] * ruoso going to re-re-read S09 on that matter

[15:53] <pmichaud> I think binding vivifies.  I seem to recall some tests that indicate that.

[15:55] <pmurias> the bvalue autovivifies it's container when it is a target of a .BIND or .STORE

[15:56] <ruoso> sure... that's when it's a lvalue

[15:56] <ruoso> but it also autovivifies if it's a rvalue of a BIND 

[15:57] <ruoso> but that probably is done by the bind code, not by the bvalue itself

[15:58] <pmurias> &

[15:58] *** pmurias left
[16:00] <rakudo_svn> r33917 | pmichaud++ | [rakudo]:  Refactor Scalar coercions.

[16:02] *** magnarjg left
[16:04] *** stephens joined
[16:06] *** donaldh left
[16:21] *** alexn_org joined
[16:23] *** liufeng left
[16:24] *** hercynium joined
[16:28] *** yves left
[16:28] *** Exodist joined
[16:32] *** yves joined
[16:33] *** araujo left
[16:40] *** ejs1 joined
[16:40] *** ejs1 left
[16:43] *** justatheory left
[16:48] *** ejs left
[16:50] <rakudo_svn> r33920 | infinoid++ | [cage] Fix the following codetest failures:

[16:50] <rakudo_svn> r33920 | infinoid++ | * t/codingstd/c_cppcomments.t

[16:50] <rakudo_svn> r33920 | infinoid++ | * t/codingstd/c_operator.t

[16:50] <rakudo_svn> r33920 | infinoid++ | * t/codingstd/trailing_space.t

[17:00] <rakudo_svn> r33922 | pmichaud++ | [rakudo]: Refactor hash construction and assignment.

[17:01] *** Exodist left
[17:01] *** Exodist joined
[17:02] *** Exodist left
[17:03] *** schmalbe joined
[17:04] *** pmurias joined
[17:14] *** alanhaggai joined
[17:21] *** azawawi joined
[17:21] <azawawi> hi there

[17:22] <pmurias> &

[17:22] *** pmurias left
[17:27] <azawawi> moritz_: Syntax::Highlight::Perl6 is going into Bundle::Perl6. The owner (Marcel Gr􏿽xFCnauer) promised me that he will do it soon.  

[17:43] <pugs_svn> r24392 | pmichaud++ | [t/spec]:  Fix one test to use ok() instead of is(), unfudge for rakudo.

[17:43] *** alexn_org left
[17:48] *** maerzhase joined
[17:53] *** khisanth_ joined
[17:53] *** khisanth_ left
[17:55] *** alanhaggai left
[18:01] *** PerlJam left
[18:03] *** PerlJam joined
[18:16] *** pbuetow joined
[18:20] *** DemoFreak joined
[18:24] *** simcop2387 left
[18:25] *** simcop2387 joined
[18:36] *** alanhaggai joined
[18:39] *** jan_ left
[18:40] *** araujo joined
[18:44] *** justatheory joined
[18:48] *** schmalbe left
[18:48] *** jan_ joined
[18:51] *** ryanc joined
[18:52] *** alester left
[18:55] *** cognominal left
[18:57] *** buubot left
[18:59] *** abebae joined
[18:59] *** buubot joined
[19:01] *** alech joined
[19:01] *** abebae left
[19:02] *** abebae joined
[19:08] *** mpeter joined
[19:12] *** ejs joined
[19:14] *** abebae left
[19:15] *** pcbuetow joined
[19:16] *** jferrero joined
[19:17] *** cognominal joined
[19:18] *** alester joined
[19:33] *** araujo left
[19:38] <Tene> So, how do I resume from an exception in Perl 6?

[19:39] <Tene> do { die 'omg'; say 'after the exception'; CATCH { say 'caught the exception'; <what goes here?> } }

[19:40] <ruoso> Tene, I don't think there's a spec on that already

[19:40] <Tene> Could it be $_.resume() ?

[19:40] <Tene> I also see no spec on that.

[19:40] <ruoso> I'd presume something like that

[19:42] <[particle]> .resume() looks nicer to me

[19:42] <lambdabot> [particle]: You have 1 new message. '/msg lambdabot @messages' to read it.

[19:43] <Tene> [particle]: same thing.

[19:43] <ruoso> Tene, please send this question to p6-l

[19:43] <[particle]> of course it is, it's just prettier

[19:44] <ruoso> there are some issues there waiting for TimToady already...

[19:44] <[particle]> however, i find ".resume;" less readable

[19:47] <Tene> Sent to p6l

[19:50] <rakudo_svn> r33930 | infinoid++ | [cage] More codingstd fixes.

[19:50] <rakudo_svn> r33930 | infinoid++ | * t/codingstd/perlcritic.t (ignore perl6 files based on containing "use v6;")

[19:50] <rakudo_svn> r33930 | infinoid++ | * t/codingstd/trailing_space.t (again)

[19:51] *** alech left
[19:51] *** alech joined
[19:51] *** sri_kraih_ left
[20:06] *** jferrero left
[20:14] *** rff joined
[20:16] *** araujo joined
[20:18] <rff> hi

[20:18] *** rff is now known as riffraff

[20:21] <Tene> Hi.

[20:48] *** hercynium left
[20:54] *** hercynium joined
[20:54] *** ryanc left
[20:55] *** adc_penner joined
[21:02] *** pcbuetow left
[21:16] <moritz_> re

[21:17] <azawawi> wb

[21:18] <azawawi> moritz_: i talked to szabgab today about Padre-Perl6 highlighting

[21:18] <azawawi> moritz_: the work will be a plug-in called Padre::Plugin::Perl6

[21:19] <moritz_> azawawi: cool

[21:19] <azawawi> moritz_: but we have some road-blocks ;-)

[21:20] <azawawi> moritz_: STD.pmc is hooked on 5.10 and Moose

[21:20] <PerlJam> azawawi: so ... what's the problem?  :)

[21:20] <azawawi> moritz_: and Padre can work on 5.8.x

[21:20] <moritz_> azawawi: well, STD.pm can't. So the plugin is only there for 5.10 or better.

[21:21] <azawawi> moritz_: any reason for STD.pm to work only on 5.10?

[21:21] <[particle]> 5.10 regex engine required

[21:22] <moritz_> azawawi: yes, state variables

[21:22] <azawawi> so 5.8.x compatibility is out of the question or would mean slower performance?

[21:22] <[particle]> out of the question

[21:23] <azawawi> [particle]: cool ;-)

[21:23] <azawawi> [particle]: less work

[21:24] * azawawi is communicating that info to #padre folks

[21:31] <azawawi> done, Padre::Plugin::Perl6 is >= 5.10

[21:33] <azawawi> anyway by the time Padre is stable, 5.10 install base will be larger

[21:43] *** adc_penner2 joined
[21:48] <moritz_> perl6: say a => '3'

[21:48] <p6eval> rakudo 33935: OUTPUT[␤]

[21:48] <p6eval> ..pugs: OUTPUT[*** Named argument found where no matched parameter expected: (a,Ann (Pos (MkPos "/tmp/b0NvBGYy08" 1 10 2 1)) (Val (VStr "3")))␤    at /tmp/b0NvBGYy08 line 1, column 1 - line 2, column 1␤]

[21:48] <p6eval> ..elf 24392: OUTPUT[a     3␤]

[21:48] <moritz_> perl6: say ((a => '3'))

[21:48] <p6eval> elf 24392, pugs, rakudo 33935: OUTPUT[a 3␤]

[21:52] *** ejs left
[21:53] *** ruoso left
[21:58] *** adc_penner left
[22:03] *** eternaleye_ left
[22:03] <Tene> My mail to p6l hasn't gone through

[22:04] <moritz_> Tene: then resend

[22:05] *** eternaleye_ joined
[22:05] <Tene> [email@hidden.address] ?

[22:06] <moritz_> aye

[22:06] <Tene> sent again

[22:07] <azawawi> mortiz_: fyi, performance of STD.pm on win32 during initial lex cache creation is prettty slow; otherwise it is fast

[22:08] * moritz_ doesn't really care about windows, since he doesn't have it available

[22:09] <azawawi> moritz_: and it seems we're using 'cp' inside STD.pm

[22:10] <pasteling> "azawawi" at 212.38.154.37 pasted "warnings from running on strawberry perl win32" (4 lines, 184B) at http://sial.org/pbot/33767

[22:10] <azawawi> you got to love those win32 warnings ;-)

[22:11] <azawawi> ...external command, "operable" program or batch file....

[22:11] *** Limbic_Region joined
[22:12] <[particle]> what's wrong with that?

[22:12] <[particle]> foo.pl is an inoperable program unless perl.exe in installed and there's a file association with *.pl

[22:14] <azawawi> the good thing is that it worked on win32 even with that warning, TimToady++ ;-)

[22:15] <azawawi> good night &

[22:16] *** hanekomu_ joined
[22:17] <pmichaud> sometimes messages to @perl.org get bottlenecked and take a while to process.  Also, sometimes they get moderated depending on how long it's been since your last post.

[22:24] <Tene> very long time, if ever

[22:29] *** maerzhase left
[22:31] *** liufeng joined
[22:37] *** jhorwitz left
[23:05] *** eric256 joined
[23:05] *** adc_penner2 left
[23:07] *** Lorn left
[23:08] *** iblechbot left
[23:09] <eric256> is there somewhere i can get a feel for how complete the perl6 specs are and how complete certain implementations are? like how far along rakudo and pugs are?

[23:10] <moritz_> eric256: for rakudo's progress please read http://www.rakudo.org/2008/12/rakudo-perl-now-passing-over-5.html

[23:10] <moritz_> eric256: specs are hard to say... IO, builtins and concurrency need a lot of love...

[23:11] <moritz_> and there are synopsis that no implementation hasn't tackled yet, so it's nearly impossiblt to tell if they are implementatble, and useful

[23:12] <eric256> hmmm okay.. been away from the project for a while and was hoping there where some milestones out in the future ;)

[23:12] <eric256> gonna play with rakudo some for sure

[23:12] <moritz_> well, there are new spec drafts

[23:12] <moritz_> S07, iterators and lazyness

[23:12] <moritz_> and S19, command line

[23:13] <pugs_svn> r24393 | moritz++ | [docs] list S19 in feather/syn_index.html

[23:13] <pugs_svn> r24394 | moritz++ | [util/smartlinks.pl] also generate synopsis that don't have any smartlinks yet

[23:15] *** Pirata joined
[23:15] <moritz_> and I've been collecting ideas for S24, Testing

[23:15] *** Pirata left
[23:16] <pmichaud> eric256: I'm drafting milestones for Rakudo this week.

[23:16] <pmichaud> basically I'm coming up with the plan for 2009.

[23:16] <eric256> cool and cool ;)

[23:16] <pmichaud> watch rakudo.org for details :-)

[23:17] <eric256> so i'm just reading about rakudo now, is it written in perl6 itself? or parrot? and whats the comparison of pugs vs rakudo? are they both moving ahead at full speed?

[23:17] <pmichaud> rakudo is part perl 6, part parrot.

[23:17] <pmichaud> we're slowly (more slowly than I like) moving more bits of it to perl 6

[23:17] <moritz_> pugs is sleeping, for quite some time now

[23:17] <eric256> lol alright, the haskell stuff in pugs always scared me

[23:17] <pmichaud> the main compiler components are perl 6.

[23:18] <pmichaud> the libraries are still principally PIR (parrot), but we're working on that.

[23:18] <[particle]> eric256: see my entry at http://www.rakudo.org/2008/12/rakudo-spec-test-coverage-char.html

[23:18] <eric256> oh thats kinda sad on pugs, it would have been interesting to have competeing implementations but probably not a good use of resources

[23:18] <jnthn> We still have that. :-)

[23:18] <jnthn> See elf, smop.

[23:19] <[particle]> and pugs is still competitive

[23:19] <[particle]> it passes more tests than rakudo

[23:19] <moritz_> and we've got an extensive test suite and much infrastructure out of pugs

[23:20] <eric256> yea got busy at work at lost track of perlmonks and perl6 so i'm playing some catchup

[23:20] <eric256> once i get caught up maybe i can help write some code or some tests at least

[23:20] <pmichaud> that would be excellent.

[23:20] <jnthn> Indeed.

[23:20] <moritz_> that would be great

[23:21] <[particle]> make it a resolution ;)

[23:21] *** riffraff left
[23:22] <moritz_> if you want to contribute to the test suite, we have a file t/TASKS in the pugs repo which contains way too many things that should be done ;-)

[23:22] <moritz_> (and I'm a mere human with a nearly full-time job and a girlfriend ;-)

[23:23] <moritz_> anyway, I have to go to bed now

[23:25] <xuser> girlfriends slows humanity

[23:28] <Tene> Who moderates p6l?

[23:31] * eric256 adds rakudo.org to his Viigo account ;) there now i can read about it on the bus in the morning ;)

[23:32] <pmichaud> there's also http://twitter.com/rakudoperl, if you follow twitter

[23:32] *** liufeng left
[23:32] <[particle]> tene: ask, i believe

[23:33] <pmichaud> I think there's a contact address for the mailing lists.

[23:37] <[particle]> hrmm, where's the index page for spec.pugscode.org?

[23:37] <[particle]> i'd like to add S19 there

[23:42] *** ruoso joined
[23:42] <ruoso> Hello!

[23:45] *** hanekomu_ left
[23:45] <ruoso> is TimToady back already?

[23:53] * eric256 watches parrot compile...should warnings during this worry me?

[23:53] <pmichaud> eric256: probably not.

[23:54] *** justatheory left
[23:58] <eric256> hehe running perl6 on the command line

[23:58] <eric256> that was a lot less painless than 18months ago

[23:58] <Tene> more painful?

[23:59] <eric256> lmao opps err more painless or less painfull 

[23:59] <eric256> hehe

[23:59] <eric256> moritz_: my t/ doesn't have a TASKS

[23:59] <eric256> oh woops you said in the pugs repo

