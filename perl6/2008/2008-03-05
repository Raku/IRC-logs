[00:16] *** aindilis left
[00:16] *** aindilis joined
[00:21] *** aindilis left
[00:21] *** aindilis joined
[00:37] *** aindilis left
[00:37] *** aindilis joined
[00:41] <TimToady> cognominal_: both the table and the section agree that list prefix is looser than comma.   I don't see a problem.

[00:42] *** thoughtpolice joined
[00:43] *** thoughtpolice left
[00:44] *** perljunkie left
[00:44] *** thoughtpolice joined
[00:49] *** cmarcelo joined
[00:51] *** aindilis left
[00:51] *** aindilis joined
[00:55] *** kanru left
[00:57] *** peeps[work] left
[01:00] *** nipotaway is now known as nipotan

[01:01] *** cnhackTNT joined
[01:15] *** lyokato joined
[01:16] *** aindilis left
[01:16] *** aindilis joined
[01:18] *** LimbicRegion joined
[01:20] *** aindilis left
[01:20] *** aindilis joined
[01:22] <diakopter> pugs: sleep 1

[01:22] <exp_evalbot> OUTPUT[*** Unsafe function 'sleep' called under safe mode␤    at /tmp/xleOeBb6xu line 1, column 1 - line 2, column 1␤]

[01:22] <diakopter> oh yeah

[01:22] *** tobeya left
[01:25] *** Limbic_Region left
[01:25] *** LimbicRegion is now known as Limbic_Region

[01:42] <katie_d> Sorry if this is a stupid question, but my knowledge of C is still very shallow. I'm trying to read the #define statements in config_h.in and there are a bunch of statements like "typedef @nv@" -- what do the @ symbols mean? I've never seen that in C code before.

[01:43] <[particle]> you probably want #perl, that is if you're looking at perl 5's source

[01:43] <[particle]> however, it's likely that what you're looking at is a template, and @foo@ is a template variable that will be replaced with some value

[01:44] <[particle]> i'm not familiar with perl 5 source, so i can't be certain

[01:44] <katie_d> [particle]: I was looking at Parrot sources. But thanks anyway -- it probably is a template variable. Do you happen to know what it's used by?

[01:44] <[particle]> heh, i'm quite familiar with parrot source :)

[01:44] <[particle]> which file?

[01:45] <[particle]> parroters hang out on irc.perl.org#parrot btw

[01:45] <katie_d> config/gen/config_h/config_h.in

[01:46] <[particle]> ok, that's a template file for the configure system

[01:46] <katie_d> I was trying to figure out what PARROT_API was for, and grep pointed me there

[01:46] <[particle]> do you use vim?

[01:46] *** justatheory left
[01:46] <katie_d> particle: no I use emacs

[01:47] <[particle]> ok. that'll work to, i think.

[01:47] <[particle]> make tags

[01:47] <[particle]> i only know how to navigate a tag stack in vi, but i'm sure you can do it with emacs

[01:48] <[particle]> you can put your cursor on PARROT_API, press a magic combination of buttons, and arrive at it's declaration/definition

[01:48] <[particle]> in vim, it's Ctrl-]

[01:48] <katie_d> Wow :) Thanks. I didn't know I could do that in emacs. I've been using Eclipse for that sort of thing, but for some reason the search feature is broken, so I've just gone back to using grep

[01:49] <katie_d> btw, what did you mean the parroters don't hang out in here? Is this mostly for pugs or something?

[01:50] <[particle]> anyway, that's a template file. after Configure.pl finishes running, a header file will be generated that contains #define PARROT_API

[01:50] <[particle]> it's so we can specify which functions are exported

[01:51] <[particle]> so embedders and extenders can use them

[01:51] <[particle]> see include/parrot/config.h about line 60

[01:52] *** obra left
[01:52] *** obra joined
[01:54] <katie_d> Thanks particle.

[01:55] <[particle]> glad to help!

[01:55] *** Quaver left
[02:01] <diakopter> [particle]: I noticed you put your name under the GSoC items.  Do you think they should be near the other Parrot/Perl 6 items (at the bottom of that page)?

[02:02] *** mj41__ joined
[02:04] *** aindilis left
[02:04] *** FurnaceBoy left
[02:04] *** qmole left
[02:04] *** IllvilJa left
[02:04] *** Botje left
[02:04] *** Qiang left
[02:04] *** [particle] left
[02:04] *** alester left
[02:04] *** kolibrie left
[02:04] *** pugsbot_r17185 left
[02:05] *** cognominal_ left
[02:05] *** kst left
[02:05] *** ycheng left
[02:05] *** cmarcelo left
[02:05] *** thoughtpolice left
[02:05] *** Patterner left
[02:05] *** mncharity left
[02:05] *** Zygo left
[02:05] *** jrockway left
[02:05] *** marmic left
[02:05] *** jjore left
[02:05] *** ead left
[02:05] *** drbean left
[02:05] *** penk left
[02:05] *** rakudo_svn left
[02:05] *** demq left
[02:05] *** xinming left
[02:05] *** GeJ left
[02:05] *** pmichaud left
[02:05] *** agentzh left
[02:05] *** buubot left
[02:05] *** shachaf left
[02:05] *** nipotan left
[02:05] *** silug left
[02:05] *** Limbic_Region left
[02:05] *** gbacon left
[02:05] *** sordith left
[02:05] *** bbkr__ left
[02:05] *** zev left
[02:05] *** rhr left
[02:05] *** mugwump left
[02:05] *** arguile left
[02:05] *** Caelum left
[02:05] *** allbery_b left
[02:05] *** buu left
[02:05] *** pasteling left
[02:05] *** kcwu left
[02:05] *** lambdabot left
[02:05] *** Helios left
[02:05] *** IRSeekBot left
[02:05] *** peepsalot left
[02:05] *** Jedai left
[02:05] *** integral left
[02:05] *** charsbar left
[02:05] *** pugs_svnbot left
[02:05] *** SamB left
[02:05] *** Lunchy left
[02:05] *** rafl left
[02:05] *** cnhackTNT left
[02:05] *** lisppaste3 left
[02:05] *** wknight8111 left
[02:05] *** avar left
[02:05] *** revdiablo left
[02:05] *** ting left
[02:05] *** yahooooo left
[02:05] *** Daveman left
[02:05] *** meteorjay left
[02:05] *** stevan_ left
[02:05] *** nothingmuch left
[02:05] *** moritz_ left
[02:05] *** nnunley left
[02:05] *** spinclad left
[02:05] *** TimToady left
[02:05] *** ruz_ left
[02:05] *** TreyHarris left
[02:05] *** wolverian left
[02:05] *** SubStack left
[02:05] *** Alias_ left
[02:05] *** mj41 left
[02:05] *** arcady left
[02:05] *** katie_d left
[02:05] *** Khisanth left
[02:05] *** RayMagini left
[02:05] *** whiteg left
[02:05] *** cj_ left
[02:05] *** cxreg left
[02:05] *** jnthn left
[02:05] *** mtve left
[02:05] *** Southen_ left
[02:05] *** Tene left
[02:05] *** zostay left
[02:05] *** RichiH left
[02:05] *** mj41__ is now known as mj41

[02:06] *** ting joined
[02:06] *** jnthn joined
[02:06] *** wolverian joined
[02:08] *** Alias_ joined
[02:09] *** meteorjay joined
[02:11] *** cnhackTN1 joined
[02:11] *** Alias_ left
[02:11] *** Alias__ joined
[02:11] *** ting left
[02:11] *** TimToady joined
[02:11] *** cnhackTNT joined
[02:11] *** lambdabot joined
[02:11] *** arcady joined
[02:11] *** lisppaste3 joined
[02:11] *** Helios joined
[02:11] *** wknight8111 joined
[02:11] *** drbean joined
[02:11] *** avar joined
[02:11] *** katie_d joined
[02:11] *** Khisanth joined
[02:11] *** RayMagini joined
[02:11] *** penk joined
[02:11] *** pmichaud joined
[02:11] *** buubot joined
[02:11] *** rakudo_svn joined
[02:11] *** shachaf joined
[02:11] *** demq joined
[02:11] *** nipotan joined
[02:11] *** xinming joined
[02:11] *** GeJ joined
[02:11] *** silug joined
[02:11] *** agentzh joined
[02:11] *** IRSeekBot joined
[02:11] *** revdiablo joined
[02:11] *** ting joined
[02:11] *** peepsalot joined
[02:11] *** yahooooo joined
[02:11] *** Daveman joined
[02:11] *** whiteg joined
[02:11] *** cj_ joined
[02:11] *** Jedai joined
[02:11] *** integral joined
[02:11] *** stevan_ joined
[02:11] *** nothingmuch joined
[02:11] *** charsbar joined
[02:11] *** ruz_ joined
[02:11] *** SamB joined
[02:11] *** zostay joined
[02:11] *** Lunchy joined
[02:11] *** TreyHarris joined
[02:11] *** spinclad joined
[02:11] *** Alias_ joined
[02:11] *** SubStack joined
[02:11] *** nnunley joined
[02:11] *** irc.freenode.net sets mode: +o TimToady

[02:11] *** Southen_ joined
[02:11] *** moritz_ joined
[02:11] *** cxreg joined
[02:11] *** pugs_svnbot joined
[02:11] *** Tene joined
[02:11] *** mtve joined
[02:11] *** rafl joined
[02:11] *** irc.freenode.net sets mode: +o Tene

[02:12] *** avar left
[02:12] *** TreyHarr1s joined
[02:12] *** Daveman left
[02:12] *** revdiablo left
[02:12] *** Tene left
[02:12] *** Alias_ left
[02:12] *** nnunley left
[02:12] *** nnunley joined
[02:12] *** TreyHarr2s joined
[02:12] *** cnhackTNT left
[02:12] *** cmarcelo joined
[02:12] *** thoughtpolice joined
[02:12] *** Patterner joined
[02:12] *** mncharity joined
[02:12] *** Zygo joined
[02:12] *** jrockway joined
[02:12] *** marmic joined
[02:12] *** jjore joined
[02:12] *** ead joined
[02:12] *** eternaleye joined
[02:13] *** avar joined
[02:13] *** aindilis joined
[02:13] *** FurnaceBoy joined
[02:13] *** qmole joined
[02:13] *** IllvilJa joined
[02:13] *** Botje joined
[02:13] *** Qiang joined
[02:13] *** [particle] joined
[02:13] *** alester joined
[02:13] *** kolibrie joined
[02:13] *** pugsbot_r17185 joined
[02:13] *** cognominal_ joined
[02:13] *** kst joined
[02:13] *** ycheng joined
[02:13] *** Limbic_Region joined
[02:13] *** gbacon joined
[02:13] *** sordith joined
[02:13] *** bbkr__ joined
[02:13] *** zev joined
[02:13] *** pasteling joined
[02:13] *** buu joined
[02:13] *** kcwu joined
[02:13] *** arguile joined
[02:13] *** allbery_b joined
[02:13] *** Caelum joined
[02:13] *** rhr joined
[02:13] *** mugwump joined
[02:13] *** ting_ joined
[02:17] *** TreyHarris left
[02:17] *** TreyHarr1s is now known as TreyHarris

[02:19] *** TreyHarr2s left
[02:20] *** eternaleye left
[02:21] *** eternaleye joined
[02:22] *** [particle1 joined
[02:23] *** ting left
[02:30] *** Southen joined
[02:31] *** mugwump left
[02:31] *** rhr left
[02:31] *** zev left
[02:31] *** bbkr__ left
[02:31] *** sordith left
[02:31] *** Limbic_Region left
[02:31] *** arguile left
[02:31] *** Caelum left
[02:31] *** allbery_b left
[02:31] *** buu left
[02:31] *** pasteling left
[02:31] *** kcwu left
[02:31] *** gbacon left
[02:31] *** Limbic_Region joined
[02:34] *** gbacon joined
[02:34] *** sordith joined
[02:34] *** bbkr__ joined
[02:34] *** zev joined
[02:34] *** pasteling joined
[02:34] *** buu joined
[02:34] *** kcwu joined
[02:34] *** arguile joined
[02:34] *** allbery_b joined
[02:34] *** Caelum joined
[02:34] *** rhr joined
[02:34] *** mugwump joined
[02:34] *** bbkr__ left
[02:34] *** bbkr__ joined
[02:35] *** zev left
[02:35] *** zev joined
[02:35] *** mugwump_ joined
[02:35] *** mugwump left
[02:36] *** [particle] left
[02:41] *** thoughtpolice left
[02:41] *** thoughtpolice joined
[02:42] *** dalek left
[02:48] *** dalek joined
[02:50] *** pugs_svnbot left
[02:50] *** Lunchy left
[02:50] *** Jedai left
[02:50] *** rafl left
[02:50] *** SamB left
[02:50] *** peepsalot left
[02:50] *** Helios left
[02:50] *** lambdabot left
[02:50] *** charsbar left
[02:50] *** integral left
[02:50] *** IRSeekBot left
[02:51] *** charsbar joined
[02:54] *** Helios joined
[02:55] *** lambdabot joined
[02:55] *** IRSeekBot joined
[02:55] *** peepsalot joined
[02:55] *** Jedai joined
[02:55] *** SamB joined
[02:55] *** Lunchy joined
[02:55] *** pugs_svnbot joined
[02:55] *** rafl joined
[02:55] *** integral joined
[02:56] *** IRSeekBot left
[02:56] *** Lunchy left
[02:59] *** Lunchy joined
[02:59] *** IRSeekBot joined
[03:00] *** Southen_ left
[03:21] *** stevan__ joined
[03:25] *** rimad left
[03:26] *** rimad joined
[03:29] *** alc joined
[03:31] *** stevan_ left
[03:46] *** aindilis left
[03:51] *** rindolf joined
[03:57] *** Jamtech joined
[03:58] *** jjore is now known as zz_jjore

[03:58] *** zz_jjore is now known as jjore

[03:58] *** Daveman joined
[04:07] *** alester_ joined
[04:07] *** Jamtech left
[04:09] *** lyokato left
[04:12] *** wknight8111 left
[04:15] *** mncharity left
[04:19] *** RayMagini left
[04:22] *** RayMagini joined
[04:31] *** dalek left
[04:31] *** stevan__ left
[04:31] *** integral left
[04:31] *** pugs_svnbot left
[04:31] *** peepsalot left
[04:31] *** Jedai left
[04:31] *** rafl left
[04:31] *** SamB left
[04:31] *** lambdabot left
[04:31] *** RayMagini left
[04:31] *** bbkr__ left
[04:32] *** rhr left
[04:32] *** sordith left
[04:32] *** arguile left
[04:32] *** Caelum left
[04:32] *** allbery_b left
[04:32] *** buu left
[04:32] *** pasteling left
[04:32] *** kcwu left
[04:32] *** gbacon left
[04:32] *** alester_ left
[04:32] *** IRSeekBot left
[04:32] *** charsbar left
[04:32] *** mugwump_ left
[04:32] *** Southen left
[04:32] *** pugsbot_r17185 left
[04:32] *** kolibrie left
[04:32] *** Qiang left
[04:32] *** qmole left
[04:32] *** alester left
[04:32] *** FurnaceBoy left
[04:32] *** Botje left
[04:32] *** cognominal_ left
[04:32] *** kst left
[04:32] *** IllvilJa left
[04:32] *** ycheng left
[04:32] *** avar left
[04:32] *** rindolf left
[04:32] *** eternaleye left
[04:32] *** jjore left
[04:32] *** marmic left
[04:32] *** Patterner left
[04:32] *** Zygo left
[04:32] *** ead left
[04:32] *** jrockway left
[04:32] *** cmarcelo left
[04:32] *** Lunchy left
[04:32] *** Helios left
[04:32] *** thoughtpolice left
[04:32] *** agentzh left
[04:32] *** rakudo_svn left
[04:32] *** pmichaud left
[04:32] *** penk left
[04:32] *** GeJ left
[04:32] *** buubot left
[04:32] *** shachaf left
[04:32] *** demq left
[04:32] *** xinming left
[04:32] *** nipotan left
[04:32] *** drbean left
[04:32] *** silug left
[04:32] *** Daveman left
[04:32] *** TreyHarris left
[04:32] *** TimToady left
[04:32] *** moritz_ left
[04:32] *** spinclad left
[04:32] *** ruz_ left
[04:32] *** nothingmuch left
[04:32] *** yahooooo left
[04:32] *** SubStack left
[04:32] *** lisppaste3 left
[04:32] *** ting_ left
[04:32] *** nnunley left
[04:32] *** mtve left
[04:32] *** cxreg left
[04:32] *** whiteg left
[04:32] *** katie_d left
[04:32] *** arcady left
[04:32] *** Khisanth left
[04:32] *** zostay left
[04:32] *** cj_ left
[04:32] *** alc left
[04:32] *** Limbic_Region left
[04:32] *** Alias__ left
[04:32] *** cnhackTN1 left
[04:32] *** lumi_ left
[04:32] *** Auzon left
[04:32] *** bockmabe left
[04:32] *** orafu left
[04:32] *** araujo left
[04:32] *** ruoso left
[04:32] *** BinGOs left
[04:32] *** gugod left
[04:32] *** r0bby left
[04:32] *** cosimo left
[04:32] *** lidden left
[04:32] *** PerlJam left
[04:32] *** baest left
[04:32] *** Juerd left
[04:32] *** Maddingue left
[04:32] *** rimad left
[04:32] *** mattz left
[04:32] *** cookys left
[04:32] *** kane__ left
[04:32] *** Eidolos left
[04:32] *** tewk left
[04:32] *** ilbot2 left
[04:32] *** jql left
[04:32] *** diakopter left
[04:32] *** sunnavy left
[04:32] *** thepler left
[04:32] *** obra left
[04:32] *** clkao left
[04:32] *** felipe left
[04:33] *** TimToady joined
[04:33] *** d4l3k_ joined
[04:33] *** RayMagini joined
[04:33] *** alester_ joined
[04:33] *** Daveman joined
[04:33] *** rindolf joined
[04:33] *** alc joined
[04:33] *** rimad joined
[04:33] *** stevan__ joined
[04:33] *** IRSeekBot joined
[04:33] *** Lunchy joined
[04:33] *** integral joined
[04:33] *** rafl joined
[04:33] *** pugs_svnbot joined
[04:33] *** SamB joined
[04:33] *** Jedai joined
[04:33] *** peepsalot joined
[04:33] *** lambdabot joined
[04:33] *** Helios joined
[04:33] *** charsbar joined
[04:33] *** thoughtpolice joined
[04:33] *** mugwump_ joined
[04:33] *** bbkr__ joined
[04:33] *** rhr joined
[04:33] *** Caelum joined
[04:33] *** allbery_b joined
[04:33] *** arguile joined
[04:33] *** kcwu joined
[04:33] *** buu joined
[04:33] *** pasteling joined
[04:33] *** sordith joined
[04:33] *** gbacon joined
[04:33] *** Limbic_Region joined
[04:33] *** Southen joined
[04:33] *** eternaleye joined
[04:33] *** ting_ joined
[04:33] *** ycheng joined
[04:33] *** kst joined
[04:33] *** cognominal_ joined
[04:33] *** pugsbot_r17185 joined
[04:33] *** kolibrie joined
[04:33] *** alester joined
[04:33] *** Qiang joined
[04:33] *** Botje joined
[04:33] *** IllvilJa joined
[04:33] *** qmole joined
[04:33] *** irc.freenode.net sets mode: +o TimToady

[04:33] *** FurnaceBoy joined
[04:33] *** avar joined
[04:33] *** ead joined
[04:33] *** jjore joined
[04:33] *** marmic joined
[04:33] *** jrockway joined
[04:33] *** Zygo joined
[04:33] *** Patterner joined
[04:33] *** cmarcelo joined
[04:33] *** nnunley joined
[04:33] *** TreyHarris joined
[04:33] *** mtve joined
[04:33] *** cxreg joined
[04:33] *** moritz_ joined
[04:33] *** SubStack joined
[04:33] *** spinclad joined
[04:33] *** zostay joined
[04:33] *** ruz_ joined
[04:33] *** nothingmuch joined
[04:33] *** cj_ joined
[04:33] *** whiteg joined
[04:33] *** yahooooo joined
[04:33] *** agentzh joined
[04:33] *** silug joined
[04:33] *** GeJ joined
[04:33] *** xinming joined
[04:33] *** nipotan joined
[04:33] *** demq joined
[04:33] *** shachaf joined
[04:33] *** rakudo_svn joined
[04:33] *** buubot joined
[04:33] *** pmichaud joined
[04:33] *** penk joined
[04:33] *** Khisanth joined
[04:33] *** katie_d joined
[04:33] *** drbean joined
[04:33] *** lisppaste3 joined
[04:33] *** arcady joined
[04:33] *** Alias__ joined
[04:33] *** cnhackTN1 joined
[04:33] *** obra joined
[04:33] *** lumi_ joined
[04:33] *** Auzon joined
[04:33] *** bockmabe joined
[04:33] *** orafu joined
[04:33] *** araujo joined
[04:33] *** ruoso joined
[04:33] *** cosimo joined
[04:33] *** mattz joined
[04:33] *** BinGOs joined
[04:33] *** gugod joined
[04:33] *** jql joined
[04:33] *** r0bby joined
[04:33] *** lidden joined
[04:33] *** cookys joined
[04:33] *** felipe joined
[04:33] *** clkao joined
[04:33] *** thepler joined
[04:33] *** sunnavy joined
[04:33] *** diakopter joined
[04:33] *** ilbot2 joined
[04:33] *** tewk joined
[04:33] *** Eidolos joined
[04:33] *** kane__ joined
[04:33] *** baest joined
[04:33] *** Maddingue joined
[04:33] *** PerlJam joined
[04:33] *** Juerd joined
[04:34] *** d4l3k_ is now known as dalek

[04:34] *** thoughtp1lice joined
[04:35] *** demq left
[04:35] *** demq joined
[04:38] *** rindolf left
[04:46] *** rakudo_svn left
[04:46] *** GeJ left
[04:46] *** agentzh left
[04:46] *** pmichaud left
[04:46] *** Helios left
[04:46] *** drbean left
[04:46] *** xinming left
[04:46] *** Lunchy left
[04:46] *** shachaf left
[04:46] *** thoughtpolice left
[04:46] *** penk left
[04:46] *** buubot left
[04:46] *** nipotan left
[04:46] *** silug left
[04:47] *** araujo left
[04:48] *** Limbic_Region left
[04:48] *** Helios joined
[04:48] *** Lunchy joined
[04:49] *** shachaf joined
[04:50] *** drbean joined
[04:50] *** thoughtpolice joined
[04:50] *** penk joined
[04:50] *** agentzh joined
[04:50] *** silug joined
[04:50] *** GeJ joined
[04:50] *** xinming joined
[04:50] *** nipotan joined
[04:50] *** rakudo_svn joined
[04:50] *** buubot joined
[04:50] *** pmichaud joined
[04:51] *** thoughtpolice left
[04:57] *** lyokato joined
[04:59] *** cnhackTN1 left
[05:00] *** cnhackTNT joined
[05:07] *** stevan__ left
[05:08] *** stevan_ joined
[05:10] *** cmarcelo left
[05:40] *** iblechbot joined
[05:41] *** stevan_ left
[06:01] *** Auzon left
[06:02] *** Auzon joined
[06:39] *** cnhackTNT left
[06:43] *** alester_ left
[06:45] *** BinGOs_ joined
[06:51] *** BinGOs left
[07:17] *** FurnaceBoy left
[07:17] *** BinGOs_ is now known as BinGOs

[07:20] *** rakudo_svn left
[07:20] *** xinming left
[07:20] *** GeJ left
[07:20] *** pmichaud left
[07:20] *** agentzh left
[07:20] *** buubot left
[07:20] *** penk left
[07:20] *** nipotan left
[07:20] *** silug left
[07:23] *** GeJ joined
[07:24] *** penk joined
[07:24] *** agentzh joined
[07:24] *** silug joined
[07:24] *** xinming joined
[07:24] *** nipotan joined
[07:24] *** rakudo_svn joined
[07:24] *** buubot joined
[07:24] *** pmichaud joined
[07:24] *** Alias__ left
[07:24] *** Alias__ joined
[07:25] *** baest left
[07:26] *** baest_ joined
[07:26] *** baest_ is now known as baest

[07:30] *** iblechbot left
[07:34] *** Alias_ joined
[07:35] *** Alias__ left
[07:35] *** Lunchy left
[07:35] *** Helios left
[07:35] *** pugs_svnbot left
[07:35] *** Jedai left
[07:35] *** peepsalot left
[07:35] *** rafl left
[07:35] *** SamB left
[07:35] *** lambdabot left
[07:35] *** integral left
[07:37] *** Helios joined
[07:38] *** Lunchy joined
[07:38] *** integral joined
[07:38] *** lambdabot joined
[07:38] *** peepsalot joined
[07:38] *** Jedai joined
[07:38] *** SamB joined
[07:38] *** pugs_svnbot joined
[07:38] *** rafl joined
[07:38] *** integral left
[07:38] *** integral joined
[07:39] *** Patterner left
[07:39] *** marmic left
[07:39] *** jjore left
[07:39] *** eternaleye left
[07:39] *** Zygo left
[07:39] *** ead left
[07:39] *** jrockway left
[07:40] *** eternaleye joined
[07:41] *** Psyche^ joined
[07:41] *** Psyche^ is now known as Patterner

[07:42] *** Zygo joined
[07:42] *** jrockway joined
[07:42] *** marmic joined
[07:42] *** jjore joined
[07:42] *** ead joined
[07:42] *** Zygo left
[07:47] *** ikeda joined
[07:55] *** ikeda left
[08:14] *** hareldvd joined
[08:14] *** hareldvd left
[08:16] *** thoughtp1lice left
[08:17] *** Aankhen`` joined
[08:24] *** rby joined
[08:27] *** ikeda joined
[08:37] *** ikeda left
[08:40] <cognominal_> Tim Toady, I beg to differ,  the = must bind looser than the comma  to bind the whole unparenthesed list.   I cant make sense of the sentence "the right side is looser than comma" because the right side is made of comma operator.

[08:42] <cognominal_> rakudo uses the S03 precedence table and gets it wrong too. One must parenthesize like in Perl5

[08:45] *** masak joined
[08:49] *** IllvilJa left
[08:51] *** DarkWolf84 joined
[08:51] *** araujo joined
[08:55] *** ikeda joined
[08:56] *** masak left
[09:07] *** IllvilJa joined
[09:10] *** laye joined
[09:17] *** agentzh left
[09:18] *** agentzh joined
[09:27] *** laye left
[09:28] *** ikeda left
[09:38] *** ebassi joined
[09:56] *** Schwern joined
[10:02] *** ruoso left
[10:10] *** Schwern left
[10:10] *** Schwern joined
[10:11] *** Schwern left
[10:11] *** Schwern joined
[10:22] *** hanekomu joined
[10:24] *** hanekomu left
[10:25] *** hanekomu joined
[10:46] <nothingmuch> @tell mncharity no, it's that you can't efficiently pass inherited attributes around if your parent<->child relationships aren't statically known, you need to dispatch them lazily.

[10:46] <lambdabot> Consider it noted.

[10:47] <nothingmuch> @tell mncharity for instance if you have a global index inherited/synthesized attribute, and some Node { has @.children } the value of that attr varies for each @.children[$n] based on the value of $n - 1, and it must be resolved 100% dynamically

[10:47] <lambdabot> Consider it noted.

[10:48] <nothingmuch> @tell mncharity furthermore there is no data in $node.children[$n] linking it to $node or vice versa. in MO each invocant on the stack is asked whether or not it is the parent of $some_child via a cached method call

[10:48] <lambdabot> Consider it noted.

[11:24] <spinclad> nothingmuch: 1) not statically known because  'has @.children' is added at runtime?  2) value varies based on index - 1 (why '- 1'?) because array contains independent containers, or because (being added at runtime) nothing is known about it statically?  3) no data in $node linking to .children[$n], no static data? since @.children itself links to each child (just not statically)...  4) or is my confusion more profound?

[11:26] *** ruoso joined
[11:31] <spinclad> II) why, when you see 'Node { has @.children }', can you not infer some things statically? because the API for the attribute definition (going through the MOP) is dynamic, not closed, and so not knowable statically?

[11:36] <spinclad> (/me -> bed, i'll backlog)

[11:37] *** alc left
[11:46] *** cmarcelo joined
[12:19] *** masak joined
[12:28] *** nipotan is now known as nipotaway

[12:33] *** zblaxell joined
[12:44] *** lyokato left
[12:48] *** ebassi is now known as ebassi|lunch

[12:53] *** pjcj left
[12:53] *** pjcj joined
[13:09] *** xinming_ joined
[13:12] *** xinming left
[13:28] *** ebassi|lunch is now known as ebassi

[13:38] *** ebassi left
[13:44] *** mncharity joined
[13:51] *** simcop2387-vnc joined
[13:53] *** simcop2387 left
[13:54] *** alester_ joined
[13:56] *** ebassi joined
[13:56] *** alester_ left
[13:57] *** simcop2387-vnc is now known as simcop2387

[14:00] *** meppl joined
[14:13] *** qmole left
[14:13] *** qmole joined
[14:39] <mncharity> two interesting papers: http://www.cs.ucla.edu/~awarth/papers/dls07.pdf from http://www.cs.ucla.edu/~awarth/ometa/ , and http://www.chrisseaton.com/katahdin/

[14:39] <lambdabot> mncharity: You have 3 new messages. '/msg lambdabot @messages' to read them.

[14:41] *** eternaleye left
[14:45] <mncharity> nothingmuch: re AG engines can't do p5/p6 because 'you can't efficiently pass inherited attributes around if your parent<->child relationships aren't statically known, you need to dispatch them lazily.', err, AG engines can't memoize?  That doesn't sound right.

[14:47] *** Psyche^ joined
[14:49] <mncharity> re 'there is no data in $node.children[$n] linking it to $node', ah, ok.  So one needs a system which permits node annotations.  Eg, oo on prolog (eg, Logtalk or FLORA) rather than just prolog.  I'm surprised none of the AG engines permit term annotation.  I don't understand the "or vice versa." part.

[14:49] <mncharity> So I'm still fuzzy on the constraints, but thanks.  Interesting.

[14:50] * ruoso . o O ( AG? )

[14:50] <mncharity> ruoso, how goes the smop "before and after" example?

[14:50] <mncharity> oh, hi ruoso :)

[14:50] <ruoso> mncharity, hi...

[14:50] <mncharity> Attribute Grammar (in the more recent instantiation of that phrase)

[14:50] <ruoso> ahh....

[14:51] <ruoso> ok...

[14:51] *** sh joined
[14:51] <ruoso> the example is not there yet..

[14:51] <mncharity> http://en.wikipedia.org/wiki/Attribute_grammar

[14:51] <ruoso> mostly because I still need the lowlevel types (method, attribute, code...)

[14:51] <ruoso> s/types/implementations/

[14:52] <mncharity> http://www.perlfoundation.org/perl6/index.cgi?smop_s1p_language is where it is landing?

[14:52] <lambdabot> Title: SMOP s1p Language / Perl 6

[14:52] <ruoso> yes...

[14:52] <ruoso> but anyway... the code -> frame translation can be made in sm0p terms

[14:52] <ruoso> I mean

[14:52] <ruoso> the body of a method is already a solved issue

[14:52] <mncharity> re low-level types, hmm.

[14:53] <mncharity> oh, could you do a fib() translation?

[14:53] <ruoso> maybe...

[14:53] <ruoso> would you like to put the example code in the s1p page?

[14:54] <sh> Does anyone know how to fix this pugs internal error: Invalid grammatical category: "Bool"

[14:55] <sh> From SVN revision 20063

[14:56] <sh> I get it during make of pugs

[14:56] <mncharity> sub fib($n) { if $n ==0 { 0 } elsif $n == 1 { 1 } else { fib($n-1) + fib($n-2) } }

[14:56] <mncharity> or whatever variation makes it easiest for your

[14:56] <sh> I have a pugs binary, but when I run it, I get the above error

[14:56] <mncharity> sh: it's the current way the pugs build is failing :(

[14:56] <mncharity> it's being worked on

[14:56] <sh> Thanks mcharity

[14:56] <mncharity> hmm, anyone know a version number to suggest for a working pugs?

[14:57] <sh> Good question, I'd be interested too!

[14:57] <mncharity> I fuzzily recall there is a way to ask the evalbot...

[14:57] <mncharity> pugs: 3

[14:57] <exp_evalbot> RESULT[3]

[14:57] <mncharity> pugs: $VERSION

[14:57] <exp_evalbot> OUTPUT[*** ␤    Unexpected end of input␤    expecting "::"␤    Variable "$VERSION" requires predeclaration or explicit package name␤    at /tmp/vLoV8UcmPB line 1, column 9␤]

[14:57] <mncharity> pugs: $PUGS_VERSION

[14:57] <exp_evalbot> RESULT[\"Perl6 User\'s Golfing System, version 6.2.13, October 17, 2006 (r18093)"]

[14:57] <mncharity> oooh, that's old.

[14:57] <mncharity> r18093

[14:58] <sh> Yeah, probably does not compile with GHC 6.8.2

[14:58] <ruoso> mncharity, Ok... the interesting thing here... is that you need an object that implements "if" and "=="

[14:58] <mncharity> right.  6.6.1 is your best bet.

[14:58] <ruoso> mncharity, after that... you just need to pile frame nodes in the sm0p sense...

[14:59] <mncharity> ruoso: :/  The compiler can't compile it into something simple before handing it to smop?

[14:59] <sh> Ok, I was already out to buy champagne after the pugs binary compiled with GHC 6.8.2, but then noticed it does not work at all

[14:59] <mncharity> s/The/My/

[14:59] <ruoso> mncharity, you can compile to a set of sm0p blocks

[15:00] <ruoso> "if" and "=="  must still be implemented anyway (but that's not related to your example... it's a general task)

[15:00] <mncharity> sh: yeah. :(  not quite yet.  got noticably closer yesterday thanks to gbacon.

[15:01] <ruoso> mncharity, so you can just name a public symbol (like SMOP__OP__if) with an API you can define, and use it inside a sm0p block

[15:01] <mncharity> ruoso: say I'm an optimizing compiler ("mncharity, you are an optimizing compiler"), couldn't if and == be inlined, and the $n type be native int?

[15:02] *** rdice joined
[15:02] *** hanekomu left
[15:02] <sh> mncharity: Thanks for your help! 

[15:03] <ruoso> the $n type must probably be native int.. (it's the only one implemented)...

[15:03] <mncharity> sh: np.  any help debugging would be most welcome. :)

[15:03] <ruoso> mncharity, the only thing that is defined is that the code you generate must comply to the http://www.perlfoundation.org/perl6/index.cgi?smop_interpreter_implementation_api

[15:04] <lambdabot> Title: SMOP Interpreter Implementation API / Perl 6, http://tinyurl.com/yv6sur

[15:04] <ruoso> you can use SLIME... which is the http://www.perlfoundation.org/perl6/index.cgi?default_smop_interpreter_implementation

[15:04] <lambdabot> Title: Default SMOP Interpreter Implementation / Perl 6, http://tinyurl.com/3328jg

[15:04] <sh> mncharity: :-) I'm unfortunately not in a position to make a contribution in terms of actual code; I'm happy to beta test though

[15:05] <mncharity> err, "SLIME" is already used as the name of a very nice lisp environment on emacs. :)

[15:05] *** Patterner left
[15:05] <SamB> yes it is

[15:06] <mncharity> sh: re beta test, ok, that would be useful.  stay tuned... :)

[15:06] <ruoso> mncharity, re slime... it's not really a problem... as it's an internal thing that probably no one will notice...

[15:06] <mncharity> ok :)

[15:06] <sh> mncharity: Thanks! I'm looking forward to it

[15:08] <mncharity> ruoso: basically, not having a clear direction in which to push on parsing this morning, I thought I'd poke at the ast phases.  given two paragraphs, one p6, one smop, I could explore turning one into the other.  as a "somewhat different that emitting to p5/ruby" case, to help shake down architecture choices.

[15:09] <ruoso> mncharity, please... keep trying on that...

[15:10] <mncharity> err, 'keep trying on ' which?

[15:11] *** tooo joined
[15:12] <gbacon> was hoping someone had a brilliant flash and fixed pugs

[15:13] <mncharity> lol

[15:14] <mncharity> :/

[15:14] *** chris2 joined
[15:15] *** Auzon left
[15:16] <ruoso> mncharity, on smop ;)

[15:17] <mncharity> Juerd: so it looks like the pugs evalbot is running r18093.  Does that mean something broke it in r18094, or that feather's ghc got upgraded?  Hmm, I'm basically just asking if feather's ghc version changed, and if so, when.  Thanks. :)

[15:17] *** pmurias joined
[15:17] <mncharity> addressed to Juerd, but anyone with a feather account could check...

[15:18] <mncharity> hi pmurias

[15:18] <pmurias> mncharity: hi

[15:18] <mncharity> ruoso: ah, ok :)

[15:19] *** simcop2387 is now known as boobot

[15:19] *** Psyche^ left
[15:19] *** boobot is now known as simcop2387

[15:20] <gbacon> mncharity: it's a weird thing.. when a Haskell program typechecks, it almost always runs as expected too

[15:20] *** stevan_ joined
[15:23] *** masak left
[15:23] <mncharity> gbacon: let me guess, and the corollary is, when it doesn't, you're then out on a very non-common-case branch, with no tools?

[15:26] <mncharity> I note that since the error still occurs with empty string input, it might perhaps be an initialization phase which is choking.  Which suggests one might approach it by shutting down parts of initialization (as they're not going to be needed) and see when it stops failing?

[15:26] <sordith> simcop2387: i see you

[15:26] <simcop2387> hello sordith

[15:27] <sordith> hi!

[15:27] <gbacon> yeah, I'm thinking it's a prelude problem

[15:27] <gbacon> parsing it, I mean

[15:28] <sordith> simcop2387: sorry for my private message earlier. did not want to ask on this channel for permission to do so. was curious about your opinion regarding a problem on another channel

[15:28] <mncharity> err, really?   The point which fails in the build is the prelude precompilation to yaml.  Which just runs ./pugs.  If you go... hmm... one sec...

[15:28] <simcop2387> sordith: lets take this back to pm

[15:28] <sordith> roger that

[15:32] <mncharity> gbacon: If I echo -n > src/perl6/Prelude.pm, and make, all the files named /Prelude/ seem to be updated, seemingly with the null input.  But the Bool error still occurs.

[15:33] * gbacon nods

[15:33] <mncharity> s/seemingly with the null input/ well, ./src/Pugs/Prelude.hs is has the "", the others, binary I just checked timestamps on and briefly eyeballed.

[15:33] *** iblechbot joined
[15:34] *** [particle1 is now known as [particle]

[15:34] *** rby left
[15:34] <mncharity> which suggests there is no trace of Prelude left in pugs itself.

[15:35] <mncharity> and then ./pugs -c -e ""  fails, suggesting it's not input either.

[15:35] <mncharity> which leaves internal initialization, no?

[15:37] <diakopter> mncharity: I think when the rebuild fails on feather, it keeps the Last Known Good build.

[15:39] *** FurnaceBoy joined
[15:42] <mncharity> diakopter: right.  I was wondering if feather is still using ghc 6.6.1 , in which case it's worth exploring around r18094 to see what changed in Pugs.   Or whether feather's ghc got upgraded, in which case being at r18093 is just an artifact.

[15:45] <mncharity> hmm... having looked at svn log,

[15:46] <mncharity> r18094 was a big change to _runpugs_.  So it looks like being stuck at r18093 is indeed an artifact, but of runpugs breaking.

[15:46] <mncharity> So the evalbot isn't the right guide to when pugs was last working.

[15:46] <mncharity> And we have another todo item, fixing evalbot.

[15:48] <mncharity> or instead, I could simply be babbling confusedly.  runpugs isn't the evalbot. sigh.  so rewinding...

[15:50] <mncharity> Looking at the svn log, it's not clear why the evalbot might have stopped updating at r18093.  So perhaps someone with a feather acount could check if the ghc version was changed, and if so, when.

[15:50] <mncharity> Just to perhaps provide a bit on additional insight into what is going on with pugs.

[15:50] <mncharity> *of

[15:52] *** cj_ is now known as cj

[15:53] <mncharity> and if feather has any kind of build log, knowing what the failures were would be great too.

[15:53] <rhr> fwiw, I use 6.6.1 and my pugs binary is r19220 - I haven't tried to build it since then

[15:53] <rhr> it wirks fine

[15:53] <rhr> *works

[15:54] <mncharity> Good to know.  Thanks! :)

[15:55] <gbacon> rhr: it'd be interesting to know whether you can build the current revision

[15:56] <gbacon> well, whether the resulting image can at least hobble along

[15:57] <rhr> gbacon: let me make a copy of my repo and give it a try

[15:59] <mncharity> My vague impression is it was the start of upgrading to 6.8.2 which broke it.

[15:59] <mncharity> Reading through log, "hey!  I forgot all about perl5/Pugs-Compiler-Perl6/ !".

[15:59] <mncharity> so many p6 implementations and fragments...

[16:01] <pasteling> "rhr" at 65.94.10.253 pasted "pugs build failure" (22 lines, 1.1K) at http://sial.org/pbot/30422

[16:01] <rhr> that's just the end

[16:02] *** Aankhen`` left
[16:02] <nothingmuch> mncharity: memoization is not as efficient

[16:02] <nothingmuch> "real" ag engines linearize the both-ways recursion

[16:02] *** Aankhen`` joined
[16:03] <nothingmuch> inherited attributes are passed only to the children that will need them for the synthesized attrs

[16:03] <nothingmuch> and this is done in advanc e

[16:03] <nothingmuch> whereas for dynamic languages you go down to the synth attr at the bottom, see what inherited attrs it needs, and then climb back up to the parent

[16:08] <pugs_svnbot> r20064 | pmurias++ | [kp6] --profile option

[16:08] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20064

[16:08] <lambdabot> Title: Changeset 20064 - Pugs - Trac

[16:10] <mncharity> ok, so I hypothesize pugs on 6.6.1 broke around r19956 - r19962, in the attempt to upgrade it to 6.8.1.  Which suggests r19955 is the most recent working version.

[16:12] <mncharity> pmurias: one thing you might add to kp6 is the ability to load one of it's own yaml dumps.  then you could parse, dump, save that, and repeatedly rerun your emitter, without having to parse again.  You would know better than I if that would actually be useful.

[16:12] <rhr> I can test that.  what's the most efficient way to get that rev from svn?

[16:12] <mncharity> svn up -r19955 ?

[16:12] <rhr> mncharity: OK, thanks

[16:13] * mncharity double checks... yep

[16:13] <mncharity> rhr: thanks! :)

[16:14] <rhr> it seems to be building OK [ 35 of 109]

[16:20] <mncharity> gbacon: so it might be worth eyeballing  svn diff -r19955:19963 ?  to see if something got broken in the upgrade attempt?

[16:21] <mncharity> I note svn diff -r19958:19959 modified Types, but I don't see anything obvious.

[16:21] *** Psyche^ joined
[16:21] *** Psyche^ is now known as Patterner

[16:21] <pmurias> mncharity: thought about it too, the time to recompile the file on changes would still be annoing

[16:21] <sh> I tried to also build r19955 using ghc-6.6.1 on Fedora 8, but it fails after building dependencies: "Setup: cannot satisfy dependency pugs-HsSyck-any"

[16:22] <mncharity> oh, right, the emitter is kp6. :/  well, could always use pugsx1/misc/winter_jig/backend_bare_perl5/ ;)

[16:24] <gbacon> mncharity: looks like a bunch of renamings

[16:24] <pmurias> mncharity: no, i'm talking about parsing the changed file

[16:24] <rhr> r19955 works, r19956 fails for me

[16:25] <pasteling> "rhr" at 65.94.10.253 pasted "r19956 failure (end)" (11 lines, 890B) at http://sial.org/pbot/30423

[16:25] <mncharity> sh: re 'fails after building', :(  re 19955-19956 transition, good to know.

[16:27] <gbacon> rhr: and your attempt to build HEAD failed also, right?

[16:28] <mncharity> re pugs-HsSyck-any, i wonder if you svn up to the version you had working, whether you can actually build it from scratch.

[16:29] <pmurias> mncharity: with --profile you can see what kp6 spends time on

[16:29] <pugs_svnbot> r20065 | pmurias++ | [kp6] kp6 doesn't print what's doing with profiling on

[16:29] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20065

[16:29] <lambdabot> Title: Changeset 20065 - Pugs - Trac

[16:30] <mncharity> The reason for the question is on my fedora 8, I noticed I now only have Cabal 1.2.3... and I'm not sure that's what ghc 6.6.1 came with.  Perhaps the fedora upgrade to 6.8.2 breaks pugs via Cabal.  In which case I would expect an attempt to do a  make clean  rebuild of -r19220 to fail similarly.

[16:30] <mncharity> pmurias: :) neat!  instrumentation++

[16:32] <pmurias> ;)

[16:32] <gbacon> mncharity: when we get it working, we really need to look at overhauling the pugs build

[16:33] <gbacon> via cabal, that is

[16:33] <mncharity> hmm, r19810 edited AST.hs

[16:33] <gbacon> as it sits, it's a pretty big mess

[16:34] <mncharity> that could be neat.

[16:35] <gbacon> mncharity: well, cabal ought to be doing more of the heavy lifting

[16:35] *** sordith_ joined
[16:35] <rhr> gbacon: yes, see http://sial.org/pbot/30422

[16:35] <lambdabot> Title: Paste #30422 from "rhr" at 65.94.10.253

[16:35] <gbacon> and the cabal folks seem willing to support us where we need them

[16:36] <mncharity> should also perhaps get a braindump from audreyt on whether, long term, the right thing is to incrementally improve pugs, or to rewrite.  ie, I don't know if "pugs isn't architected the right way" played any role in it's getting stuck.

[16:36] <gbacon> rhr: what version of Cabal do you have? ghc-pkg list Cabal

[16:36] <mncharity> s/a hypothetical "pugs isn't.../

[16:36] <rhr> Cabal-1.1.6.2

[16:36] <mncharity> 1.2.3

[16:37] <mncharity> curious

[16:37] <sh> fwiw, I have Cabal-1.1.6.2

[16:37] <rhr> I was doing a make realclean between each build

[16:37] <mncharity> sigh.  too many dimensions in this space.

[16:37] <sh> mncharity: I yum remove'd ghc and ghc-6.8.2 and symlinked /usr/bin/ghc-6.6.1 to /usr/bin/ghc

[16:38] * sh is trying realclean now

[16:38] * mncharity starts a build...

[16:39] * sh gets still the same problem

[16:40] <sh> I had this problem when I first tried it with ghc-6.8.1 a few weeks back, and found suggestions to edit some Cabal files and actually add dependencies

[16:41] <gbacon> doesn't Pugs.cabal require at least Cabal-1.2?

[16:42] <mncharity> [particle]: I had a dream last night that I woke up and there was a rakudo p6 -> yaml parser, and everything was happy. :)

[16:42] <SamB> they split a lot of packages off from base recently

[16:43] <sh> build_pugs.pl considers Cabal`1\.[1-9] to be $has_new_cabal

[16:44] <sh> SamB: Yes, but I think this was after ghc-6.6.1, wasn't it? I"m using 6.6.1 right now

[16:44] <SamB> yeah

[16:44] <gbacon> grep cabal-version Pugs.cabal*

[16:44] <SamB> I think so

[16:44] *** barney joined
[16:45] *** sordith left
[16:45] <SamB> apparantly recent cabal has some kind of alternatives thing if you want to make the .cabal file work for both GHC versions...

[16:45] *** sordith_ is now known as sordith

[16:45] <gbacon> SamB: it's kind of freaky: cabal files are Prolog programs :-)

[16:46] <gbacon> it fiddles with the values of flags until it finds a happy combination

[16:46] <sh> So many programming languages mixed just to get a Perl 6 compiler...

[16:46] <gbacon> rhr: the build error that you pasted is a cabal issue

[16:47] <SamB> but doesn't prolog have a "cut" thing?

[16:47] <SamB> that makes things nasty?

[16:47] <gbacon> SamB: yes, so not full-on, hairy, nasty, scary, Cirque du Soleil clown Prolog

[16:47] <cognominal_> sh, you want to be in too. :)   are you bourne or c?

[16:48] <ruoso> mncharity, http://www.perlfoundation.org/perl6/index.cgi?smop_s1p_language

[16:48] <lambdabot> Title: SMOP s1p Language / Perl 6

[16:48] <gbacon> just the nice bits

[16:48] <ruoso> in the end of the page, I added a full version of SMOP fib...

[16:48] <SamB> and the kinds of problems posed to cabal-get are a lot simpler than those posed to prolog interpreters...

[16:48] <sh> cognominal_: Hehe, I'm D

[16:48] <SamB> they have a lot less search breadth, I believe

[16:49] <sh> cognominal_: Yet another incomplete language

[16:50] <cognominal_> I think there is many D languages. /me checks the wp

[16:51] <cognominal_> indeed...

[16:51] <sh> Hehe

[16:52] <cognominal_> "there is" or "there are"? btw

[16:52] <cognominal_> in french we use singular "il a plusieurs langages..."

[16:52] <cognominal_> s/il a/il y a/

[16:53] <sh> there are

[16:53] <mncharity> re lots of languages, prolog, I yesterday rediscovered  http://svn.pugscode.org/pugs/misc/Grammars/snapshot_of_prolog_engine.pl :)

[16:53] <lambdabot> http://tinyurl.com/28x3jn

[16:54] * gbacon thought ilya was Russian

[16:55] <PerlJam> gbacon: he is.  :)

[16:55] <gbacon> PerlJam: I was kidding about cognominal_'s s/il a/il y a/

[16:56] <PerlJam> I know.  

[16:56] <sh> Lol

[16:56] <PerlJam> So much is lost in communication due to the limited bandwidth of IRC

[16:57] <PerlJam> luckily I hang around with a crowd where I can almost assume everything is sarcastic or condescending or whatever  :)

[16:57] <cognominal_> silly me,  I thought that was a non sequitur

[16:59] <gbacon> cognominal_: well, it would have been better for me to have /me thought ilya was Russian, not French

[16:59] <gbacon> it's all in the delivery *sigh*

[17:00] <cognominal_> you lost me

[17:01] * gbacon thought Ilya was Russian, not French

[17:01] <gbacon> would that have been more understandable?

[17:05] <cognominal_> I don't think Ilya is French

[17:05] <PerlJam> heh

[17:05] <cognominal_> ok you made me say it... :)

[17:06] <cognominal_> "il y a" is French but not Ilya

[17:06] <Juerd> mncharity: Yes, ghc got upgraded.

[17:06] <mncharity> ok, on an fedora 8, x86_64, I get a working pugs with ghc661-6.6.1-3.fc7 (for ghc), ghc682-6.8.2-8.fc8 (for Cabal 1.2.3), and pugs r19955.

[17:07] *** tooo left
[17:07] <mncharity> after hand repointing the /usr/bin/ghc(-pkg) symlinks at the 6.6.1 binaries.

[17:07] *** eternaleye joined
[17:08] <gbacon> cognominal_: yes, I realize that.. it was a (bad) joke

[17:08] *** baest_ joined
[17:09] *** barney left
[17:09] *** baest left
[17:09] *** rakudo_svn left
[17:09] *** pmichaud left
[17:09] *** buubot left
[17:09] *** penk left
[17:09] *** nipotaway left
[17:09] *** silug left
[17:09] <cognominal_> ...better than the ones parrot pulls on me :) :(

[17:10] *** barney joined
[17:10] *** penk joined
[17:10] *** silug joined
[17:10] *** nipotaway joined
[17:10] *** rakudo_svn joined
[17:10] *** buubot joined
[17:10] *** pmichaud joined
[17:10] *** schmalbe joined
[17:10] <mncharity> Juerd: around 2007-09-22 ?

[17:10] <Juerd> mncharity: No, a week or so ago

[17:10] <mncharity> (r18094)

[17:11] <rhr> Juerd: could you update from docs/feather/syn_index.html on feather?  It's supposed to happen automatically, but apparently hasn't happened for months

[17:11] <mncharity> hmm.  so we still don't know why evalbot is stuck.

[17:11] <gbacon> mncharity: at least pugs is compilant again :-)

[17:11] <Juerd> rhr: I don't know what the current way of making it happen automagically is

[17:11] <Juerd> rhr: I have insufficient tuits to track everyone's changes to feather :(

[17:12] <rhr> me either...

[17:12] <Juerd> rhr: In general it works like this: someone does something, after a while loses interest or tuits, and it breaks and does not get fixed.

[17:12] * [particle] considers opening a tuit factory

[17:12] <Juerd> rhr: I think we'll have to find ways of getting used to that.

[17:13] <Juerd> Alternatively, stop setting up new stuff when you do have tuits. Things that don't exist, don't break

[17:13] <Juerd> But that sounds even less attractive.

[17:13] <mncharity> s/so we still don't know why evalbot is stuck./so we still don't know why evalbot got stuck./  we know why it can work at the moment. :)

[17:13] <mncharity> *can't  sigh

[17:13] <Juerd> Anyone with tuits and clue can request sudo access.

[17:14] *** ebassi left
[17:14] *** ruoso left
[17:14] *** jjore left
[17:14] *** marmic left
[17:14] *** ead left
[17:14] *** jrockway left
[17:14] <mncharity> lol

[17:14] <gbacon> Juerd: short supply of such people :-)

[17:14] <Juerd> gbacon: Yes. There are many people with clue in our community

[17:14] <Juerd> Just not enough that also have tuits.

[17:14] <PerlJam> Juerd: why would anyone want sudo access?

[17:14] <Juerd> PerlJam: Because I maintain the base Debian system, and provide the machine itself

[17:14] *** pmurias left
[17:14] <Juerd> PerlJam: And I expect the community, the users, to handle everything else.

[17:15] <rhr> well, it's not getting changed very often, so we probably don't need to resurrect the auto-update machinery.  If someone with access could copy the current version that would be nice.

[17:15] <mncharity> re "why would anyone want sudo access?", to have feathered round tuits?

[17:15] <Juerd> I cannot be a regular sysadmin for a 100 login machine, sorry.

[17:16] <[particle]> ...but...but...we'll repay you with kindness, you beautiful sysadmin, you!

[17:16] <Juerd> And if I were a normal sysadmin for feather, I'd forbid almost all of what has happened to it :)

[17:16] <Juerd> So nah, that's not the right formula for feather.

[17:16] *** jrockway joined
[17:17] <mncharity> I wonder if the tech is at the point we could do a feather with virtualization, and each service gets its own "box".

[17:17] <Juerd> mncharity: We are at that point.

[17:17] <Juerd> mncharity: There is a separate VM *already* especially for all the more important services

[17:17] <Juerd> mncharity: But nobody has the time and knowledge to move those services there.

[17:17] <mncharity> ah, ok.  shiny. :)

[17:18] <Juerd> There's also a separate VM especially for evalbots and the like, just so they can't crash or breach the other VMs

[17:18] <Juerd> It was offline for a few weeks and nobody appears to have noticed.

[17:18] * PerlJam is especially glad he never asked for sudo access :)

[17:19] <Juerd> mncharity: If you need a VM for anything special, just ask for it.

[17:19] <Juerd> The hardware problem was solved

[17:19] *** ebassi joined
[17:19] *** ruoso joined
[17:19] *** marmic joined
[17:19] *** jjore joined
[17:19] *** ead joined
[17:19] <mncharity> thanks.  np.  just wondering if that would make your/our collective lives easier.  sounds like it already is. :)

[17:19] <Juerd> There's no longer a shortage of hardware resources

[17:19] <Juerd> Now to fix the people problem... :)

[17:19] <Juerd> Any suggestions?

[17:20] <mncharity> sigh.

[17:20] <Juerd> mncharity: No, it makes life harder.

[17:20] <Juerd> mncharity: Each VM is yet another linux box to maintain.

[17:20] *** jrockway left
[17:20] *** baest_ left
[17:20] *** sordith left
[17:20] *** Aankhen`` left
[17:20] *** FurnaceBoy left
[17:20] *** simcop2387 left
[17:20] *** IllvilJa left
[17:20] *** integral left
[17:20] *** pugs_svnbot left
[17:20] *** peepsalot left
[17:20] *** Jedai left
[17:20] *** rafl left
[17:20] *** SamB left
[17:20] *** lambdabot left
[17:20] <Juerd> But I'll gladly do it if other people take care of the actual services provided.

[17:20] <mncharity> that's keeps being the issue doesn't it.  the will to go out of business, and otherwise mangle things, is so strong.

[17:20] <ruoso> mncharity, I had review the s1p code example... and now it really looks like how the code generated by s1p should look like...

[17:21] <Juerd> mncharity: The fundamental problem is just people not being able to work on Perl 6.

[17:21] <mncharity> ruoso: oops, sorry, popped it in my browser and got distracted.  looking...

[17:22] *** baest joined
[17:22] <Juerd> mncharity: I have medical and personal problems myself, others may be kept occupied by their jobs, etcetera

[17:22] *** jrockway joined
[17:22] <Juerd> feather was originally a box you could compile your own pugs on. Someone thought it'd be great if feather just provided a *compiled* pugs.

[17:22] *** sordith joined
[17:22] <Juerd> That sort of thing is really nice while it lasts

[17:23] <Juerd> But eventually it will break, and the person who set it up is no longer active.

[17:23] <Juerd> I simply cannot maintain all of that. I tried, but I no longer will. Takes too much energy.

[17:23] <Juerd> I tried for a few months only. Feather has survived for years, so it's not all the big deal it may appear to be right now.

[17:24] *** baest_ joined
[17:24] *** Aankhen`` joined
[17:24] *** FurnaceBoy joined
[17:24] *** simcop2387 joined
[17:24] *** IllvilJa joined
[17:24] *** integral joined
[17:24] *** lambdabot joined
[17:24] *** peepsalot joined
[17:24] *** Jedai joined
[17:24] *** SamB joined
[17:24] *** pugs_svnbot joined
[17:24] *** rafl joined
[17:24] *** baest_ left
[17:24] *** integral left
[17:27] *** barney left
[17:27] *** Psyche^ joined
[17:27] *** Alias__ joined
[17:28] *** Alias_ left
[17:28] *** baest left
[17:28] *** baest_ joined
[17:28] <mncharity> Juerd: right.  It has been, and is, a very nifty part of the p6 ecosystem.   Defintely a source of warm fuzzies. :)

[17:29] <mncharity> ruoso: eep.  /me thinks I should have asked for something simpler. :)  But I shall grovel over it.

[17:29] *** alester is now known as AndyGibb

[17:30] *** AndyGibb is now known as alester

[17:30] *** integral joined
[17:36] <mncharity> re "The fundamental problem is just people not being able to work on Perl 6.", hmm, well, that, and a enormous effort gets dissipated in our "lost in development path space" style.  The confronted by so many options on what to eat, we starve.

[17:36] *** chris2 left
[17:37] <PerlJam> mncharity: who's lost?

[17:38] <mncharity> Well, perhaps not the parrot folks.  One may question the approach, but they have been slogging away at it.  Everyone else though?

[17:39] <cognominal_> not lost, just scattered...

[17:40] <mncharity> hmm, lost vs scattered...

[17:42] <mncharity> lost has a nice implication of lack of situational awareness (eg, failing to utilize existing tools), lack of clear view of how the development path will play out, and... there was something else...

[17:43] <mncharity> blank mind.  so scattered, definitely.  but I think also lost.

[17:43] *** devogon joined
[17:43] *** Patterner left
[17:43] *** Psyche^ is now known as Patterner

[17:44] <mncharity> lost: not quite knowing where you are, where you have been, how you got here, where you are going, how you are going to get there, or how to get back to where you have been. ;)

[17:51] <mncharity> oh, and why you are going there.  (I've had some odd conversation fragments with at least vaguely p6-ish people, in which key parts of "the whole point" have been missed).

[17:52] <ruoso> mncharity, that example is good because it exercises the use of inner blocks... 

[17:52] <mncharity> ok :)

[17:53] <ruoso> and the capturize thing

[17:53] <ruoso> which is what replaces registers in SLIME

[17:53] *** sh left
[17:54] *** Psyche^ joined
[17:54] <ruoso> and in case you didn't notice... the method was implemented using continuation passing style...

[17:54] <ruoso> which is just one of the options

[17:54] <mncharity> lol

[17:56] *** Patterner left
[17:56] *** Psyche^ is now known as Patterner

[17:59] *** Jamtech joined
[18:00] *** Jamtech left
[18:08] *** Schwern left
[18:10] *** Jamtech joined
[18:17] *** Psyche^ joined
[18:24] <cognominal_> is postcircumfix syntax allowed for functions call/methods call? if so I suppose the infix < necessitates a space.

[18:24] <TimToady> that is correct

[18:25] <cognominal_> which statament is correct?

[18:25] <TimToady> when S03 says "the right side of =", it is not talking about the comma, but the precedence context in which the comma is parsed

[18:25] <TimToady> that infix:['<'] necessitates a space

[18:26] <TimToady> foo()<bar> is a has subscript on whatever foo() returns

[18:26] <TimToady> *hash

[18:26] <TimToady> and that context is looser than comma

[18:27] <TimToady> (for list assignment, but not for item assignment)

[18:27] <cognominal_> ok

[18:28] <cognominal_> must reread S03.  but my last question was is    foo< bar > equivalent to foo( 'bar' )

[18:28] <cognominal_> ?

[18:28] <TimToady> no

[18:28] <cognominal_> ok

[18:29] <TimToady> and in fact foo< bar> is likely to be illegal syntax, since a function without () is treated as a listop, and listops require a space also

[18:29] <cognominal_> so     foo< bar >     does not parse?

[18:29] <cognominal_> ok

[18:30] *** qmole left
[18:30] <TimToady> on the other hand, .method<foo> is fine, since .method assumes no args in the absence of ()

[18:30] <TimToady> but it's still a hash deref

[18:30] <TimToady> not an arg to .method

[18:30] <cognominal_> ok

[18:30] *** qmole joined
[18:31] <TimToady> mncharity: sorry, have had negative tuits recently for responding...

[18:32] <cognominal_> so without the preceding @ sigil or a [], every allowed circumfix defaults to be a hash deref

[18:32] <TimToady> the problem with a backtracking STD is that it's very difficult to find an ordering that emulates longest token without introducing lots of negative lookaheads to rule out a longer token

[18:33] <TimToady> and negative lookaheads imply you know exactly what language your rule is being used as a part of

[18:33] *** Patterner left
[18:33] *** Psyche^ is now known as Patterner

[18:33] <TimToady> the same problems for casting into LR etc

[18:33] <TimToady> the same problems for using AG

[18:34] <TimToady> the whole point of STD is to get past having to know what language the current rule is being used in

[18:34] <mncharity> hi.  so completely ignoring when code blocks get run, I gather the negative lookaheads are needed to avoid successful but incorrect parses?

[18:34] <TimToady> but yes, it will also run a lot faster with LTM (I hope)

[18:34] <mncharity> :)

[18:34] * ruoso home &

[18:34] <mncharity> by ruoso, tnx

[18:35] *** ruoso left
[18:35] <TimToady> cognominal_: I didn't understand your question

[18:36] <TimToady> mncharity: I know there are places where the current STD falsely recognize a shorter token if you assume alternatives backtrack

[18:36] <mncharity> and that mis-recognition doesn't cause a later parsefail?

[18:36] <mncharity> (just to make sure I understand)

[18:37] <TimToady> might not

[18:37] *** ebassi left
[18:37] <mncharity> ok

[18:37] <TimToady> in theory

[18:37] <mncharity> hmm.

[18:37] <TimToady> for example, if you only recognize part of an infix

[18:37] <TimToady> then the rest might be recognizes as prefix to the next term

[18:38] <mncharity> token level longest isn't a problem.  it's the non-local longest-ness.

[18:38] <cognominal_> TimToady, thx. I think I got it.

[18:38] <mncharity> s/non-local in grammar/

[18:39] <TimToady> yes, and even within a known grammar, the transitive calculation of token pieces hoisted from subrules can be non-trivial to understand the implications of

[18:39] <mncharity> ok

[18:39] <mncharity> hmm

[18:40] <mncharity> err, wait.  I'm not so much worried about what the right language design is, as "if I take this as a shortcut, will I get burned when trying to parse peoples' not-too-hairy p6 code".

[18:41] <TimToady> you might, without a scattering of negative lookaheads, or reordering/splitting rules

[18:41] <TimToady> I already had to split the pair recognition into two subrules and put at opposite ends of noun for that reason

[18:42] <TimToady> I'm sure we'll run into many similar situations

[18:42] <TimToady> so <fatarrow> and <colonpair> have to be recognized early/late with respect to similar looking nouns

[18:43] <mncharity> ok.  sigh.  thanks.

[18:43] <TimToady> if | were LTM rather than backtracking, that wouldn't matter

[18:44] <mncharity> right.  but have backtrackers.  don't know if we have an LTM yet?

[18:44] <TimToady> Perl 5 thoroughly explored the space of evil hand-coded lexers, and Perl 6 is trying to make the opposite mistake

[18:44] <mncharity> lol  one for the quote book

[18:44] <TimToady> mostly have LTM

[18:45] <TimToady> still doesn't handle <foo>* <bar> quite right

[18:45] <TimToady> the other major infelicity is down in the matchify code, which doesn't properly track rule levels, so confuses priors that should be subrules from those that should result in a list within the top match object

[18:46] <TimToady> but that's not related to LTM

[18:48] <TimToady> when you run STD_run it uses gimme5 -fo which fails over to a backtracking match, so it tends to hide the current problems in LTM

[18:49] <TimToady> I run with -fo when I'm trying to debug LTM, because it makes it fail faster

[18:49] <TimToady> *without

[18:51] <mncharity> :)

[18:51] *** peeps[work] joined
[18:52] <mncharity> Turns out the effort to get a yaml parse tree from parrot/rakudo has stalled out for lack of tuits.

[18:52] <mncharity> :(

[18:52] <mncharity> So I'm back puzzling over what approach to take, trying to get a parser.

[18:52] <TimToady> well, there are always a surplus of antituits

[18:53] <mncharity> can I combine them with scattered tuits and get energy?

[18:53] <TimToady> depends on if you know how to photosynthesize from hard gammas

[18:54] <mncharity> lol :)

[18:54] <mncharity> ah, what a zoo.

[18:55] <TimToady> the only thing keeps us all going is stupid persistence

[18:55] <TimToady> and the main danger signal I saw in your README a week or so ago was that you sounded like you'd give up after a day or two if you didn't get immediate gratification :)

[18:55] <mncharity> I'm not sure what the smiley is for wry weary grin.

[18:56] <TimToady> yeah, there should be a smiley for gritted teeth...

[18:57] <mncharity> If one defines gratification as other people being involved, then I'm afraid, yes.  I'm done with solitary speculative p6 coding exercises.  Need customer/colleagues.

[18:57] <TimToady> on the other hand, everyone comes and goes on various rhythms, so we work with that too...

[18:58] <cognominal_> TimToady, in S03, list prefix precedence     "The right side is looser than comma."  ~~ s/right/left/    ?

[18:58] <TimToady> and it's just everyone's responsibility when they're "on" to recognize when two other people are not in sync when they could be...

[18:58] <cognominal_> or is stupid persitence from me?

[18:59] <TimToady> the right side of a list prefix is looser than comma

[18:59] <TimToady> print 1,2,3 the comma is tighter than the right side of the print

[18:59] <TimToady> so the print governs the comma

[19:00] <TimToady> again, "the right side of" is talking about the context, not the contents

[19:01] <cognominal_> ok, I am dense

[19:01] <cognominal_> anyay I got the idea

[19:01] <TimToady> basically, 1,2,3 is in the identical state after either "print " or "@foo ="

[19:01] * mncharity was just thinking "invisible prefix tokens" would be much easier to visualize if they were, well, visible.

[19:03] *** bocksp joined
[19:03] <cognominal_> :)

[19:04] <TimToady> which prefix tokens are you thinking are invisible?

[19:04] <mncharity> list prefix

[19:05] <TimToady> if you think of a list prefix as kinda like a (, it's really the other end that is an invisible )

[19:05] <cognominal_> the context act slike a invisible token

[19:05] <TimToady> 1 + 2 * 3

[19:05] <TimToady> that's what precedence is all about

[19:05] <TimToady> it's where all the invisible (...) go

[19:06] <TimToady> at least with list prefix the implied ( is next to the operator

[19:06] <TimToady> unlike the * above

[19:07] <TimToady> anyway, the listops vs commas work exactly the same in Perl 5

[19:08] <TimToady> the old examples of print 3,4, sort 2,1

[19:08] <cognominal_> but the = has a precedence wich varies with the context ?

[19:08] <cognominal_> s/wich/which/

[19:08] <TimToady> $x= is a different prefix than @x=

[19:08] <cognominal_> indeed

[19:08] <TimToady> that's different from P5, yes

[19:09] <mncharity> re rhythms, part of the problem is that while I believe I *should* be spending significant time on p6 at the moment, and basically am, I am failing to get myself in consultant mode, so it's unclear if that time is being spent at all well.  I knew I had a dependency on parrot yaml, but wasn't tracking progress.  A resource dependency on the parrot folks, but didn't

[19:09] <mncharity> make a point to know what I needed, and why it was important.

[19:09] <cognominal_> in lay man words    $a = 1, $b = 1   and  @a = 1, 2  both dwim

[19:10] <TimToady> yes.  we recently re-adjusted the dwimmery to simplify it

[19:10] <mncharity> s/to know/to let them know/

[19:12] <mncharity> we seem so close to making rapid progress, but how to close that gap... I've notes from 2005 that could have been written last week.

[19:12] <TimToady> mncharity: of course, letting them know why you think it's important still doesn't necessarily make it move up their priority list, since parrotfolk are naturally VM-centric rather than language-centric

[19:12] <mncharity> sure.  necessary, not necessarily sufficient.

[19:13] <TimToady> mncharity: well, I hate to sound cruel, but maybe we'd be better off if you had stuck around a little more in the meanwhile to keep us on track...

[19:13] <mncharity> well, perhaps not necessarily necessary, but... not doing the explanation indicates not really trying.

[19:14] <TimToady> but, again, I do understand the come-and-go thing, and don't mind working within that constraint

[19:14] <mncharity> yeah.  sigh,

[19:14] <TimToady> it's the nature of volunteer work that it involves volunteers...

[19:14] <TimToady> and nobody can keep going at their best pace constantly

[19:15] <TimToady> esp if they have to earn a living elsewise

[19:15] <TimToady> and/or have other interests they must pursue to stay sane

[19:15] <TimToady> or their health fails

[19:15] <TimToady> all of which slow me down

[19:16] <TimToady> it's a wonder I get anything done at all :)

[19:16] <mncharity> re wonder, :)

[19:18] <mncharity> re 'come-and-go thing', basically, it repeatedly seems I'm no longer on the critical path, so I go elsewhere, but later it turns out things got stuck.  If I really truly believed parrot would have a usable p6 by year end, my time would be better spent in OLPC land, or generating income.

[19:19] <mncharity> Not fully believing that, I'm trying to find some why to get non-parrot p6 to a self sustaining and moving state, quickly, before I really do have to go generate income.

[19:20] <mncharity> *way

[19:21] *** Aankhen`` left
[19:25] <TimToady> well, I think trying to find a consensus view of AST is very valuable to all projects

[19:25] <TimToady> just as the STD project started when I realized the various parsers were diverging rather than converging

[19:26] <mncharity> hey, redsix was no different than pugs. :)

[19:26] <TimToady> AST is not where my brain is right now, and I'm glad to see anyone else's brain there

[19:26] <mncharity> well, modulo the oop.

[19:29] <mncharity> re ast, yeah, but the real question is social.  we have, for instance, kp6.  and pugs, and redsix, and v6 mumble, and... .  But don't have people writing p6 code for them.  I know why *I'm* not, and hypothesize the same obstacles have discouraged others, but... that doesn't mean removing some or all of them, and which, will be sufficient to start having people care about my code. :)

[19:31] <TimToady> indeed, you have project management skills that are lacking in most of the rest of us

[19:31] <TimToady> I certainly learned long ago that I had to delegate all that

[19:31] <TimToady> which is the only project management skill I have...

[19:31] <mncharity> :)

[19:34] <cognominal_> redsix?

[19:35] <mncharity> misc/pX/Common/redsix/redsix

[19:36] <mncharity> ruby implementation of p6 from... 2006?   pugs-based grammar in mutant p5+subrules engine, ruby+p6 runtime.

[19:36] <cognominal_> mncharity, I am knee-deep in the rakduo compilation chain, I may able to write your yaml dumper within a week. No promise.

[19:37] <mncharity> I think it's high-water mark in test passing was something like 20%?  so weaker than pil2js, or pil-run.

[19:38] <mncharity> but mostly due to lack of pursuing "the slog to get tests to pass".

[19:38] <cognominal_> probably easier than the subclassing stuff where I hit wall after wall. And no one is interested to check-in the patch that works

[19:38] *** eternaleye left
[19:38] <mncharity> re knee deep in compilation chain, great image.

[19:38] <cognominal_> jonathan is not around . I could convince him

[19:39] <cognominal_> De Gaulle said  "Qd vous ete dans la merde jusuq'au cou, je n'en ai que jusqu'au genou"

[19:39] <cognominal_> when you have shit up to the neck, I am only knee deep in it

[19:40] *** eternaleye joined
[19:40] <cognominal_> mais je suis seulement un homme grand et pas un grand homme.

[19:41] <cognominal_> depending on the place of the adjectif "grand" it means you are really tall or metaphorically tall

[19:42] <mncharity> re week, I have to ponder.  I had planned on a "through the end of March" time frame.  I'm not comfortable getting exceptional effort from folks when I'm not fully clear on how it will pan out.

[19:43] <mncharity> re subclassing stuff?

[19:43] <cognominal_> well, subclassing pmc to make them real p6 classes.

[19:44] <mncharity> recently encountered the concept of being hardly able to refuse to follow someone into a filled basement to address a plugged sewer drain, when the person your following is half your height. ;)

[19:45] <cognominal_> also but the hash pmc have the same name as the Perl hash class.   "extended method" are called in the pmc instead of the p6 class :(

[19:45] <cognominal_> s/also//

[19:45] <mncharity> ah, ok.

[19:46] <cognominal_> I asked in #parrot and filled bugs but I think they know the problems but are after architectual stuff that may or may not fix the problems

[19:47] <mncharity> what's the next part, the thing which getting this done depends on?

[19:47] <cognominal_> you mean your yaml dumper?

[19:47] <cognominal_> I think nothing but my buddin skill

[19:48] <mncharity> err, no, if the subclassing stuff started working this afternoon,

[19:48] <mncharity> what would that enable you to do this evening?

[19:49] <cognominal_> well, I may fix it by inserting some code in the right place so I get to understand the compiling chain which makes possible to write your dumper

[19:49] <mncharity> I guess the question is, is it "I have this fix, and it's languishing", or "I have this fix, and I can't make progress on X unill...

[19:49] <cognominal_> so, it is probably easier to me to work on your stuff

[19:50] <cognominal_> I don't know if my fix will work for the subclassing.

[19:50] <mncharity> ok, /me confused. :)

[19:50] <cognominal_> pardon my french :)

[19:51] <mncharity> having a yaml dumper depends on this subclassing patch?  or the hash name decolliding?

[19:51] <cognominal_> no

[19:51] *** kane__ left
[19:51] <cognominal_> I don't think so.

[19:51] <mncharity> ok.  so I understand the have patch part, and basically what it's intended to address.  I'm missing the connection to yaml dumping.

[19:52] <cognominal_> none

[19:52] <mncharity> lol

[19:52] <cognominal_> except it makes me understand the compilation chain

[19:52] <cognominal_> that's the connexion

[19:52] <mncharity> yaml dumping is something entirely different you could work on, instead of pursuing patch, and whatever next task depends on patch.

[19:53] <mncharity> re understanding, ah...

[19:53] <cognominal_> yes

[19:53] *** schmalbe left
[19:53] <mncharity> just curious, is there are particular next task which depends on patch?  or is the patch simply general moving forward.

[19:54] <cognominal_> chasing the subclassing also involves getting in lot of C and pir code so you give me the occasion to focus only on the compilation chain

[19:55] <cognominal_> well, i want to make rakudo move forward but the parrot team is now involved in implementing role

[19:55] *** araujo left
[19:56] <cognominal_> and you, you want to get away without doing parsing?

[19:57] <mncharity> well, I'd be very happy to have a yaml dump from rakudo.  let's see, what are the risks...

[19:57] <mncharity> re "and you, you want to get away without doing parsing?",

[19:58] <mncharity> my objective is for people to be able to quickly compile, and have run fast, p6 written as if it were basically p5-semantics wrapped in p6 syntax.

[19:58] *** araujo joined
[19:59] <mncharity> to make it possible to start coding bigger things in p6.  specifically, parts of p6, like the prelude, and regex engine.

[20:00] <mncharity> the advantage of writing it in p6 being, even if one want's to through it away later, in favor of p6 which uses more language features, that it can be run on other p6-ish things, rather than being tightly tied to a particular parser-compiler-runtime-baselanguage.

[20:02] <mncharity> but that's a project risk there.  if you build a ball field where people can code simple (but richer tha kp6) p6, and make it easy to use (err, rather, quick to use - error reporting is likely to be suboptimal) and fast, will they come to use it.

[20:04] <mncharity> other possible parsers are STD_red, and redsix.  Both in ruby.  Both written by me.  Both as yet unused by anyone else.  Rakudo in contrast has the nice property of being a multiperson active effort that people care about.

[20:04] *** buchetc joined
[20:05] <mncharity> another parser is kp6, and one option is to do the same fast compile and run, but for kp6 dialect.  If that attracts interest, that would be sufficient to show this is a right path.  But if not, one doesn't learn much.

[20:06] <cognominal_> I just want to make rakudo as a perl5 with a better syntax. But the parrot team is aiming for mmd and roles. Static typing is not even at the horizon. Not that should be very difficult compared to role and mmd

[20:06] <mncharity> hmm, that might be an interesting low-hanging fruit.  have to play with the new --profile.

[20:07] <cognominal_> higher hanging than I tought

[20:07] <cognominal_> as always

[20:08] <mncharity> I actually like the mmd and roles approach.  I don't mention them only because they are fairly straightforward on ruby, and p5, backends.

[20:08] <mncharity> Also like macros, but can work around their absence with metaprogramming the p6 files.

[20:09] *** pmurias joined
[20:09] <mncharity> pmurias: re --profile, can you give a rough rule-of-thumb on where kp6 spends its time?

[20:10] <mncharity> s/kp6, and one option is to do the same fast compile/kp6, and one option is to do the same fast compile (well, slowish parse?)

[20:10] *** rdice left
[20:11] *** REPLeffect joined
[20:12] <mncharity> background, we have lots of starts at Prelude code.  Which got stuck on pugs not being able to deal with them.  It would be nice to have something which could start running them, and allow work on them to proceed.

[20:12] <mncharity> also assorted fragments from the various backends.

[20:13] <mncharity> I don't believe kp6 is a sufficiently large dialect for that.  Eg, assignment would be nice.

[20:14] <mncharity> hmm, that's not fair.  binding is basically working for assignment in kp6.  hmm, why *exactly*, in what way, is kp6 dialect insuficient for prelude work...?

[20:15] <mncharity> pmurias: so, any particular reasons why you're not writing big chunks of "p6" code to be run by kp6?

[20:16] <mncharity> :)

[20:17] * pmurias was backlogging ;)

[20:18] <pmurias> mncharity: kp6 has current high startup cost 1.3 sec (haven't looked yet why, it didn't the last time i added profiling)

[20:19] <mncharity> so anyway.  some risks of spending time on the yaml dumper are... () it's not clear anyone but me wants to use it, which makes me a pointfailure () the result might be such that one doesn't want to use it?  hmm, why... narrow coverage or bugs?  could manage that risk by running --target-parse over the t/spec and all t/ and see how it does.  hmm, that's an action item for me.

[20:19] <pmurias> the parsing takes most time on bigger tests

[20:21] <pmurias> mncharity: two reasons kp6 has a slow parsers and i have to be preparing for my end of secondary education math exam

[20:21] <mncharity> re 1 sec startup, pugs is similar, but people have still tried to use it...

[20:21] <mncharity> LOL

[20:21] <mncharity> and giving kp6 a faster emitter,runtime wouldn't help with the slow parse.

[20:22] <mncharity> ok, thanks. :)

[20:23] <mncharity> trying to figure out what a sort of kp6-like p6 implementation would need to do differently to get used more.  can't do anything about math exams, but can aim to be a faster parse. :)

[20:24] <mncharity> that's another risk which could be checked - time rakudo --target=parse.  make sure it's sufficiently fast.

[20:24] <mncharity> sigh, I'm in "oh, no, you really shouldn't" mode.

[20:25] <mncharity> cognominal_: it would be great if you could get the yaml dumping working.

[20:25] <mncharity> If I had it right now, I expect I would be using it right now.

[20:26] <mncharity> If you have any questions about what I'd like to do with it, or anything else, please just ask.

[20:27] <pmurias> mncharity: the yaml-ast could be fed to kp6 quite easily

[20:28] <pmurias> i think it's mostly an issue of fixing Pads

[20:28] <mncharity> what's unfixed about them?

[20:28] *** lichtkind joined
[20:29] <pmurias> evaluator

[20:29] <mncharity> and before that, a first question of, given your experience and timing measurements, would loading from yaml actually be helpful?

[20:29] <pmurias> mncharity: i didn't make much measurements

[20:29] <mncharity> right

[20:29] <mncharity> hmm...

[20:30] <mncharity> ok.  so need fuzzy/hypothetical.  "evaluator"?

[20:30] * mncharity looks at a dump...

[20:31] *** justatheory joined
[20:31] <pmurias> it's easy to recreate a closure for evaling code in so they get their scopes right

[20:33] <mncharity> eep.  Dumping code and helping it will work when it gets loaded.

[20:33] <mncharity> *hoping

[20:33] <mncharity> s/code/runtime subs/

[20:33] <pmurias> mncharity: i can try to get the loading of ast if it would be of help 

[20:34] <mncharity> I think that's one for the interesting idea list.  The next time someone has to wrestle with kp6, we have this as an option.

[20:34] <mncharity> err, the "interesting idea but let's not worry about it now" list. 

[20:35] <mncharity> the having to undump working subs converted it, for me, from a "oh, this should be easy", to "oh, lot's of pain, and it may never work".

[20:36] <pmurias> mncharity: the can be recreated

[20:38] <mncharity> but with only a fuzzy/hypothetical need, the effort can't be written off as "it's easy, let's just do it so we have it around later, in case it's needed".  spending real time which could instead go elsewhere, needs a real need, a real payoff, and we don't really have one for this, no?

[20:39] <mncharity> one buys software with chunks of peoples' lives.  which is a commodity one really wishes to spend carefully.

[20:39] <mncharity> even if doing so is not traditional :)

[20:40] <mncharity> friend with 6 hours of meetings a day comes to mind.  dilbert land.

[20:41] <pmurias> mncharity: you have to get the ast from somewhere in the first place

[20:41] <gbacon> meetings--

[20:41] <mncharity> right.  so the only role for a kp6 undumper would be to run the kp6 parser once, and the emitter multiple times (without having to rerun the parser).

[20:42] <mncharity> I don't think it feasible to generate dumped kp6 ast from another, non-kp6 source.

[20:42] <mncharity> which isn't enough payoff to be worth the effort, no?

[20:42] <pmurias> usefull for example when working on the emitter and recompiling the whole of kp6

[20:42] <mncharity> indeed

[20:44] <pmurias> mncharity: why?

[20:44] <pmurias> i mean why it's not feasible

[20:44] <pmichaud> (from scrollback: "parrot team is focusing on mmd and roles")   I'm not sure that's an entirely accurate assessment.  At the moment jonathan is the one with the most available tuits for doing work, and mmd and roles seems to be his particular focus at the moment.  But it would be a mistake to claim that this is a purposeful direction on the part of the team.

[20:45] <pmichaud> in my case, I'm low on tuits, but my focus will be on the tools and getting basic parsing to work and cleaning up the class/object implementation a bit

[20:46] <cognominal_> pmichaud, when you get time , please read my bugs report and commit my patch :)

[20:46] <cognominal_> I will be happy to contribute to you focus

[20:46] <cognominal_> s/you/your/

[20:46] <pmichaud> okay.  but see "low on tuits" above.  :-)

[20:47] <mncharity> pmichaud: re focus, thanks :)   hmm, maybe that paragraph should be cut and pasted to a wiki somewhere...

[20:47] <cognominal_> so the  "when you get time"

[20:48] <pmichaud> actually, things should get drastically better now (cross fingers, knock on wood, etc.)   Paula _finally_ made it to her 2nd round of chemotherapy yesterday (four weeks late) and she seems to be having almost no debilitating side effects.

[20:48] <cognominal_> ho, I forgot about that. Good luck 

[20:48] <pmichaud> thanks

[20:50] <pmurias> mncharity: writing a solid perl5 rule engine would solve most of kp6 problems

[20:50] <pmurias> but is a high time investment

[20:51] <cognominal_> it is missing an operator grammar parser.

[20:51] <cognominal_> I mean the perl5 engine

[20:51] <mncharity> re 'no debilitating side effects', that's really great.  having seen alternatives.

[20:52] <pmichaud> (paragraph cut and paste to wiki) -- yes, it might be good to do that.  I think that many times people interpret progress in a given area (e.g., mmd, roles) as being a deliberate choice of focus among the leaders.  But in many cases the things that move forward are simply those that scratch a particular implementor's itch.

[20:53] <pmichaud> and so the reason that rakudo has junctions, objects, mmd, roles, etc. is because we have one productive developer who really wants to focus on that.  It's not that we're deliberately targeting that -- that's just the way the tuits fall.  (I suspect this is true for many volunteer-based projects.)

[20:53] <cognominal_> suffering of severe atopic dermitis that is itchin as hell,  I hate that expression.  :)

[20:53] <pmichaud> and yes, I'm _very glad_ that jonathan is doing the work he is doing -- it's all helpful.

[20:53] <cognominal_> if I scratch my itch, I bleed.

[20:54] <pmichaud> cognominal_: sorry for the expression, I'll replace it with another if you have one handy for my future use :-)

[20:54] <mncharity> lol

[20:55] <cognominal_> this is not the bleeding edge I want to be in.

[20:55] <TimToady> I have been extremely itchy lately too, and was ruining some of my skin till I started putting steroids on it instead of scratching...

[20:56] <TimToady> the weirdest thing is to have an itch inside your lung--there's no way to scratch it even if you decided to...

[20:56] <pmichaud> oh, I've had that

[20:56] <cognominal_> beware of regular use of topical steroids, it ruined my skin.

[20:56] <TimToady> I'm very careful with steroids

[20:56] <pmichaud> itch in lung is awful -- keeps feeling like I needed to cough something up

[20:56] <cognominal_> occasionnal use is great so if you can keep it so.

[20:57] <TimToady> I basically ruined a cornea with steroids once (by necessity), so I'm quite familiar with the local and systemic effects of steroids, and just how much to use and how to taper off.

[20:58] <TimToady> back when I got shingles in my right eye, steroids were all there were for that.

[20:58] <TimToady> (acyclovir was only in clinical trials at that time)

[20:58] <cognominal_> hopefully for me there is now new molecules for my AD like tacrolimus, and old systemic medecine newly applied to AD like methotrextate.

[20:59] <cognominal_> methotrexate!

[21:00] <TimToady> my brother was on methotrexate for many years for psoriasis, but recently had to quit

[21:01] *** knewt_ joined
[21:01] <TimToady> anyway, eventually got the eye fixed with a cornea transplant, so that worked out, eventually...

[21:01] *** knewt_ left
[21:01] <cognominal_> hopefully we don;t have to integrate gattaca to program perl

[21:01] <TimToady> were eventually == after 14 years...

[21:02] <TimToady> I don't think my genome is terribly close to perfect...

[21:08] <mncharity> pmurias: re 'writing a solid perl5 rule engine would solve most of kp6 problems', well, there's misc/pX/Common/yet_another_regex_engine/Regexp_ModuleA.pm, but I wouldn't call it solid.  Passes almost all the p5 re_tests, and their p6 variants, but leaves lots of gaps, and known problems.  And while it has commits, i'm not sure it's set up to do ratcheting.

[21:09] <mncharity> s/but leaves/but that leaves/

[21:11] <mncharity> I'm not suggesting it's less solid than kp6... but likely differently non-solid, which could obviously be a difficulty in swapping it in for kp6's.

[21:11] <pmurias> mncharity: kp6 is really minimalistic

[21:12] <mncharity> it's support for grammar declarations is a definite kludge, very fragile, just enough to be able to write them when you know what you are expecting to parse them.  just a couple of line hack.  which could be addressed, but fyi.

[21:13] <mncharity> re minimalistic, it might indeed be feasible.  I suspect so.  I'd be glad to help someone else do it.  It's just never reached the top of my own todo list.  But I'd be glad to help.

[21:15] <pmurias> mncharity: do you think it will be fast enough

[21:15] <pmurias> is it ratchety?

[21:19] <mncharity> it's not at all ratchety, but its also quite fast.

[21:22] <mncharity> cd misc/pX/Common/yet_another_regex_engine

[21:22] <mncharity> prove t

[21:23] <mncharity> you used to be able to swap it in as the pugs regex engine, but I suspect that's bitrotted.

[21:24] *** kyrbe joined
[21:24] <mncharity> oh, but it looks like the t/regex tests can be run directly.  as long as they haven't changed much in form (it's a "file scraper" kludge).

[21:26] <mncharity> README has instructions, and a project history.

[21:27] <mncharity> biggest pain was p5 5... 5.6?  5.8?  was proving fragile, making one not want to refactor, because things might then undebuggably break.

[21:28] *** kyrbe left
[21:29] <pmurias> it look a bit opaque...

[21:29] <pmurias> * looks

[21:30] *** kane_ joined
[21:33] <mncharity> the p5 code, yes, rather.

[21:34] *** justatheory left
[21:37] *** luqui joined
[21:38] <mncharity> big picture is there's a backtracking engine factory, Match, a regex AST, which emitters which invoke the factory, a p5 syntax bootstrap, a p6 syntax bootstrap, and grammar api (implementation messy, but grammar interitance (p5) works, and rules are both executable, and objects (and so can be used for analysis and optimization)).

[21:39] <mncharity> so it does a lot, but yes, the "can't refactor without introduction subtle p5 bug tickling which the test suite has insufficient coverage to detect" left things ugly.

[21:41] <mncharity> Thus my hope to rewrite it in p6, or at least ruby.  :)  Though now with 5.10... who knows, perhaps would could simply do a cleanup path without danger.

[21:41] <mncharity> s/would/one/

[21:41] <mncharity> s/path/pass/  sigh

[21:43] <mncharity> (btw, apropos STD and redsix, I misremembered.  redsix was the year before.  it was the yet_another_regex_engine which had me flailing about for a p6 grammar).

[21:43] <mncharity> and correct OPP.

[21:43] *** justatheory joined
[21:52] *** silug_ joined
[21:57] <pugs_svnbot> r20066 | buchetc++ | [INSTALL] update ghc 6.6.1 workaround

[21:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20066

[21:57] <lambdabot> Title: Changeset 20066 - Pugs - Trac

[21:58] *** alester left
[22:09] *** silug left
[22:12] *** silug_ left
[22:27] <pugs_svnbot> r20067 | putter++ | misc/winter_jig/sixen/sixcmd: Deal more gracefully with the user not having created a rakudo exe.  And with an invalid implementation being requested.

[22:27] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20067

[22:27] <lambdabot> Title: Changeset 20067 - Pugs - Trac

[22:28] *** eternaleye left
[22:30] *** pmurias left
[22:34] *** Chillance joined
[22:34] <pugs_svnbot> r20068 | putter++ | misc/winter_jig/ast_rakudo/parse_t_spec.t: Created.  Runs rakudo --target=parse against pugs t/spec/ .t files.

[22:34] <pugs_svnbot> r20068 | putter++ | Currently 35 of 128 files are successfully parsed.  One non-terminates (S29-conversions/ord_and_chr.t).

[22:34] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20068

[22:34] <lambdabot> Title: Changeset 20068 - Pugs - Trac

[22:39] *** Quaver joined
[22:44] *** iblechbot left
[22:47] *** Jamtech left
[22:51] *** japhb joined
[22:52] *** cmarcelo left
[22:56] *** buchetc left
[23:04] <pugs_svnbot> r20069 | buchetc++ | [t/spec] coro examples

[23:04] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20069

[23:04] <lambdabot> Title: Changeset 20069 - Pugs - Trac

[23:15] *** Limbic_Region joined
[23:18] *** nipotaway is now known as nipotan

[23:21] *** alester joined
[23:23] <bockmabe> Hey, who's the current Pumking?

[23:31] <TimToady> of which pump?

[23:32] <bockmabe> perl6

[23:33] <TimToady> perl6 is too large for one pumpking to think about, so we have many of them

[23:33] <Limbic_Region> TimToady - perl 6 still binds rules on streams correct?/

[23:33] <bockmabe> Ah, I see.

[23:34] <bockmabe> I was trying to see if there is a correlation between the IRC social network in #perl6 and the Pumpkingyness of those in #perl6.

[23:34] <TimToady> Limbic_Region: that is currently specced to be mediate by cat objects that emulate lazy strings

[23:34] <TimToady> *mediated

[23:35] <Limbic_Region> effectively yes though

[23:35] <TimToady> there needs to be some way to do it

[23:35] <Limbic_Region> have you read the pm threads on the topic?

[23:36] <TimToady> bockmabe: um, in #perl6 a pumpking is anyone who will pick of one of the balls and run with it for a while

[23:36] <bockmabe> Gotcha.

[23:36] <TimToady> Limbic_Region: not that I recollect

[23:37] <TimToady> Limbic_Region: recent threads?

[23:37] <meppl> good night

[23:38] <TimToady> like Why does my Perl regex substitution for linebreak fail?

[23:38] <Limbic_Region> no, not recent threads

[23:38] <Limbic_Region> sorry, am bouncing betwen channels

[23:38] <Limbic_Region> TimToady - if you are interested, I could /msg you the ones in particular I was thinking of

[23:39] *** penk left
[23:40] <TimToady> well, I do have plenty of other things to think about with what little brain I have at the moment, so I don't really have cycles for handholding PMers at the moment...

[23:40] *** meppl left
[23:41] <TimToady> I barely have enough wind to walk at a steady pace currently, and it's slowing me down rather...

[23:41] <Limbic_Region> TimToady - handholding PMers isn't why I was going to suggest it.  Perhaps fresh ideas about implementation is all

[23:41] *** japhb left
[23:42] <TimToady> as long as there's some way eventually for a regex to ask for more string when it runs out, it doesn't much matter how

[23:42] <TimToady> but lazy strings are not really fundamental to p6, I don't think

[23:42] <TimToady> that's why we have Cat objects

[23:43] <Limbic_Region> ok

[23:43] <TimToady> which will make an iterator look like a flat string, hopefully, to the extent necessary

[23:44] <TimToady> cattable semantics may end up leaking back to normal strings if there's no overhead, but I'm not mandating it for now

[23:45] <TimToady> originally we were just going to allow @foo ~~ /pattern/ to autocat, but decided it was a bad idea

[23:53] *** silug_ joined
[23:55] *** MarcWeber joined
[23:55] *** MarcWeber left
