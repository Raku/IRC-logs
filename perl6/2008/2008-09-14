[00:00] <cognominal> perl6: class H::A { } class H::B is H::A { } 

[00:00] <p6eval> rakudo 31096: OUTPUT[Statement not terminated properly at line 1, near "class H::B"␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[00:00] <p6eval> ..elf 22236: OUTPUT[Parse error in: /tmp/tUtCVRjq7I␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: class H::A { } class H::B is H␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[00:00] <p6eval> ..STD_r...

[00:00] <p6eval> ..pugs: RESULT[undef]

[00:00] <cognominal> ouch

[00:01] <s1n> perl6: class H::A { };

[00:02] <p6eval> elf 22236: RESULT[undef␤]

[00:02] <p6eval> ..rakudo 31096: RESULT[{ ... }]

[00:02] <p6eval> ..pugs: RESULT[undef]

[00:03] <s1n> perl6: class H { }; class H::A { }; class H::B is H::A { }; say (new H::B).WHAT

[00:03] <p6eval> rakudo 31096: OUTPUT[Attempt to inherit from non-existent parent class␤current instr.: 'die' pc 12417 (src/gen_builtins.pir:7815)␤]

[00:03] <p6eval> ..elf 22236: OUTPUT[Parse error in: /tmp/TGQ7pa5tWe␤panic at line 1 column 29 (pos 29): Can't understand next input--giving up␤WHERE: class H { }; class H::A { }; class H::B is H::A { }; say (n␤WHERE:                             /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in

[00:03] <p6eval> ..`s...

[00:03] <p6eval> ..pugs: OUTPUT[H::B␤]

[00:03] <s1n> hmm bummer

[00:04] <cognominal> H is a package just like in Perl5.

[00:06] *** [particle]1 joined
[00:10] <cognominal> perl6:  class A {  my class B {}   method doit() {  say B.WHAT } }    A.new().doit()

[00:10] <TimToady> please get used to putting ; after } if you inline blocks like that

[00:10] <p6eval> rakudo 31096: OUTPUT[Statement not terminated properly at line 1, near "method doi"␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[00:10] <p6eval> ..elf 22236: OUTPUT[Parse error in: /tmp/p2gztHjwnK␤panic at line 1 column 11 (pos 11): Missing right brace␤WHERE: class A {  my class B {}   method doit() ␤WHERE:           /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:255:in `_block_rest'␤  STD_red/std.rb:242:in `block in block'␤

[00:10] <p6eval> .....

[00:10] <p6eval> ..pugs: OUTPUT[B␤]

[00:10] <cognominal> TimToady, thx

[00:11] <cognominal> are my expectations correct?

[00:11] <TimToady> H::B.WHAT should print H::B

[00:11] <TimToady> namespace are for naming things

[00:11] <TimToady> *namespaces

[00:11] <cognominal> perl6:  class A {  my class B {} ;  method doit() {  say B.WHAT } };    A.new().doit()

[00:11] <p6eval> pugs: OUTPUT[B␤]

[00:11] <p6eval> ..rakudo 31096: OUTPUT[Could not find non-existent sub my␤current instr.: 'parrot;A;_block25' pc 160 (EVAL_14:62)␤]

[00:11] <p6eval> ..elf 22236: OUTPUT[syntax error at (eval 121) line 6, near "{ package A::B"␤BEGIN not safe after errors--compilation aborted at (eval 121) line 7.␤ at ./elf_f line 3861␤]

[00:12] <TimToady> that should just print B, because it's rooted in a lexical scope, not in a package

[00:12] <cognominal> pugs++ # knows about inner classes

[00:13] <TimToady> s1n: naming has nothing to do with inheritance

[00:15] <cognominal> perl6: class H::A { };  class H::B is H::A { };  say H::B.WHAT

[00:16] <p6eval> rakudo 31096: OUTPUT[Attempt to inherit from non-existent parent class␤current instr.: 'die' pc 12417 (src/gen_builtins.pir:7815)␤]

[00:16] <p6eval> ..pugs: OUTPUT[H::B␤]

[00:16] <p6eval> ..elf 22236: OUTPUT[Parse error in: /tmp/zgGjJkQWU6␤panic at line 1 column 17 (pos 17): Can't understand next input--giving up␤WHERE: class H::A { };  class H::B is H::A { };  say H␤WHERE:                 /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤ 

[00:16] <p6eval> ..STD_r...

[00:16] *** [particle] left
[00:19] *** pbuetow joined
[00:41] *** braceta left
[00:41] *** sail0r joined
[00:49] *** sail0r left
[01:03] *** justatheory left
[01:08] *** barbeq1 joined
[01:09] *** jferrero left
[01:12] *** barbeq1 left
[01:39] *** wknight8111 joined
[01:59] *** pbuetow_ joined
[02:04] *** wknight8111 left
[02:10] *** pbuetow left
[02:20] *** meppl left
[02:36] *** Chillance left
[02:40] *** alester_ joined
[02:51] <s1n> how does the lambabot work?

[02:51] <s1n> lambdabot

[02:56] <s1n> nm

[02:56] <Myoma> s1n: It mostly doesn't

[02:56] <s1n> Myoma: does the tell command work?

[02:56] <Myoma> @tell s1n I don't know

[02:56] <lambdabot> Consider it noted.

[02:57] <s1n> how do i get those messages?

[02:57] <lambdabot> s1n: You have 2 new messages. '/msg lambdabot @messages' to read them.

[02:57] <s1n> ahh

[02:58] <s1n> @tell pmichaud i have most of it working, a few things need to be worked out, PM me, i have a few questions

[02:58] <lambdabot> Consider it noted.

[03:02] *** Limbic_Region left
[03:05] *** mbb joined
[03:09] *** mbb left
[03:15] *** eternaleye joined
[03:23] *** xinming joined
[03:37] *** snooper joined
[03:43] *** drbean_ joined
[03:44] *** drbean_ left
[03:45] *** demq joined
[03:49] *** pbuetow_ left
[04:09] *** jinjing joined
[04:42] *** ashizawa joined
[04:50] *** Maghnus joined
[05:18] *** alester_ left
[05:22] *** Psyche^ joined
[05:34] *** Psyche^ is now known as Patterner

[05:56] *** kanru joined
[06:08] *** araujo joined
[06:28] *** xinming left
[06:29] *** xinming joined
[06:56] *** Jedai joined
[07:01] *** ab5tract joined
[07:25] *** xiaoyafeng left
[07:26] *** eternaleye left
[07:28] *** eternaleye joined
[07:33] *** abra joined
[07:40] *** BinGOs joined
[07:57] *** ilogger2 joined
[08:08] *** charsbar_ joined
[08:19] *** hanekomu joined
[08:38] *** kanru joined
[08:41] *** schmalbe joined
[08:42] *** Jedai joined
[08:51] *** Ontolog joined
[08:51] <Ontolog> shit

[08:52] <Ontolog> anyone else get "svn: Decompression of svndiff data failed"  when doing a checkout?

[08:53] *** jinjing_ joined
[08:54] <Ontolog> Also for rakudo I can't `make perl6`, I get the error: Null PMC access in get_bool()

[08:59] <Ontolog> oops forget to mention the "svn: Decompression of svndiff data failed" error is for checking out pugs

[08:59] <Ontolog> so i'm screwed with both pugs and rakudo

[08:59] <Ontolog> no perl6 for me

[08:59] <Ontolog> anyone know of a working revision of either?

[09:00] <ewilhelm> is that error for checkout or update?

[09:00] <Ontolog> checkout, however I just ran it again and the error goes away... go figure

[09:01] <Ontolog> I still have the rakudo error though

[09:01] <ewilhelm> 31053 seemed to work about 24hrs ago

[09:02] *** xiaoyafeng joined
[09:02] <Ontolog> i see i'll check it out

[09:10] *** kanru left
[09:11] *** kanru joined
[09:16] *** pmurias joined
[09:25] *** xuser joined
[09:33] *** iblechbot joined
[09:41] *** eternaleye joined
[09:47] *** pmurias left
[09:47] *** pmurias joined
[09:47] *** eternaleye left
[09:51] *** larsen_ joined
[10:07] *** masak joined
[10:11] *** eternaleye joined
[10:13] *** eternaleye left
[10:15] *** eternaleye joined
[10:15] *** elmex joined
[10:20] *** zamolxes joined
[10:21] *** sri_work joined
[10:35] *** larsen_ left
[10:49] *** pbuetow_ joined
[10:49] <Ontolog> Does Rakudo need people to write any pure Perl stuff?

[10:49] <Ontolog> pure Perl6 stuff

[10:49] <Ontolog> I want to start writing Perl6 and I figured making some kind of contribution to Rakudo would be best

[10:50] <Ontolog> or Pugs for that matter (since it would be pure Perl6)

[10:52] *** Myoma joined
[10:58] <pmurias> Ontolog: would you be confortable with helping with the test suit

[10:58] <pmurias> ?

[10:58] <pmurias> * comfortable

[11:00] <Ontolog> sure

[11:00] <pmurias> moritz_: ping

[11:01] <pmurias> Ontolog: i'm not really a test suit hacker, so i can't really help you there 

[11:02] *** sri_work_ joined
[11:02] <Ontolog> haha ok

[11:02] <pmurias> Ontolog: there seem to be a t/TASKS

[11:05] <pmurias> Ontolog: but if you feel like hacking in C/haskell i'm sure i could find you a smop task

[11:10] <Ontolog> haha i'm not too well versed in either C or Haskell

[11:11] <Ontolog> actually my goal is just to start writing some Perl 6 code

[11:11] <Ontolog> so anything pure-perl needed for Perl 6 projects I can help

[11:12] <masak> Ontolog: have you checked out November? :)

[11:13] <masak> http://github.com/viklund/november/

[11:13] <lambdabot> Title: viklund's november at master — GitHub

[11:13] <masak> http://www.november-wiki.org/

[11:13] <lambdabot> Title: Main_Page

[11:19] <Ontolog> looks interesting

[11:20] <Ontolog> is Rakudo ready for a large project like a Wiki?

[11:20] <masak> Ontolog: yes and no

[11:20] <Ontolog> last time I checked it didn't actually implement much Perl 6 yet

[11:20] <masak> by trying it, we're making it more ready

[11:20] <masak> Ontolog: it does more than you think

[11:21] <masak> Ontolog: http://use.perl.org/~masak/journal/37303

[11:21] <lambdabot> Title: Journal of masak (6289)

[11:23] *** sri_work left
[11:26] <Ontolog> well, my goal really is to learn Perl 6, so I (selfishly) don't want to spend time encountering so many bugs or missing features

[11:26] <Ontolog> so i am using pugs for now

[11:27] <masak> sounds like a wise move

[11:27] <masak> but don't expect to avoid bugs just by using Pugs :)

[11:27] <masak> they're just distributed differently than in Rakudo

[11:29] <masak> as are the "not-yet-a-feature" and "it-shouldn't-work-exactly-like-this" areas

[11:38] *** abra joined
[11:38] *** xiaoyafeng left
[11:40] <Ontolog> many important modules in perl5 are implemented as XS modules; will this also be the case with Perl 6? and if so, how will 'XS' modules be implemented? As parrot vm code?

[11:46] <masak> hm, seems a bit slow here today,,, ordinarily, people would have jumped on such a question :)

[11:46] <masak> I'm not very qualified to answer, except that I don't think it will work like XS works in Perl 5

[11:47] <masak> it will probably work through Parrot in some way, yes

[11:47] <masak> &

[11:48] <Ontolog> i was hoping the need for writing XS modules would be lesser as Perl 6 is suppose to be a lot faster than Perl 5 yes? (if you strongly type everything, etC)

[11:51] *** pmurias left
[11:59] <Ontolog> I'v always wanted to do something like this: say $_ if $_ ~= /e/ for @names;

[11:59] <Ontolog> you see I have both a trailing if AND for

[11:59] <Ontolog> I want to be able to 'chain' this way 

[11:59] <Ontolog> is Perl 6 suppose to let me?

[12:24] *** larsen_ joined
[12:28] <masak> Ontolog: yes.

[12:29] <Ontolog> but it doesn't work on pugs :( can you see if that line works on rakudo?

[12:30] *** ashizawa joined
[12:31] <masak> perl6: .say if $_ % 2 for 1..10

[12:31] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "for"␤    expecting operator␤    at /tmp/11AVX361Yz line 1, column 16␤]

[12:31] <p6eval> ..elf 22236: OUTPUT[Use of uninitialized value in concatenation (.) or string at ./elf_f line 3408.␤syntax error at (eval 119) line 5, near "{␤->say"␤ at ./elf_f line 3861␤]

[12:31] <p6eval> ..rakudo 31102: RESULT[0]

[12:31] <Ontolog> haha

[12:31] <masak> hm, rakudo parses it

[12:31] <masak> but does the Wrong Thing

[12:37] <masak> actually, I find nothing in the specs or in the test suite right now about stacked if and for statement modifiers

[12:37] <masak> though I'm certain I've seen discussion about it over the mailing lists

[12:44] <Ontolog> man it would be great if we could chain those modifiers

[12:44] <Ontolog> it would really go a long way into making perl more like a natural language

[12:46] <masak> Ontolog: do you know about the modifiable grammar of Perl 6?

[12:46] <Ontolog> nope

[12:46] <masak> even if it's not allowed in Standard Perl 6 (and I think it is), you could fairly easily allow it in your programs

[12:47] <masak> just by modifying the compiler grammar at the start of the program

[12:48] <Ontolog> i see, that's interesting... but I really really hope it's in the standard because things like that (adding some non-standard grammar) would never fly in a corporate setting

[12:51] <masak> I can see why not in some cases, yes.

[12:53] <masak> though the Perl 6 design has been laid out so as to make this type of grammar changes very non-invasive (to other modules, or users of the module)

[12:53] <masak> anyway, we're not there yet. :)

[12:53] <Ontolog> where is the doc on this grammar stuff?

[12:53] <masak> modifying the grammar on-the-fly is far down on the lists of all the current implementations

[12:54] <Ontolog> ohhh

[12:54] <Ontolog> i see

[12:54] <masak> Ontolog: http://perlcabal.org/syn/S06.html#Macros

[12:54] <lambdabot> Title: S06

[12:54] <Ontolog> which is the official mailing list for Perl 6 devs? I would like to email about this chained modifiers thing

[12:57] <masak> Ontolog: perl6compiler has a lot of Perl 6 devs

[12:57] <masak> if you have time though, I'd advice you to hit the perl6language archives first

[12:58] <masak> just to see what the consensus was to this question

[12:59] *** meppl joined
[13:05] *** xiaoyafeng joined
[13:07] *** sri_work joined
[13:28] *** sri_work_ left
[13:34] <Ontolog> perl6: .say "Parent: $_" for ('Chris','Wendy','Deek') eq 'Chris'|'Wendy';

[13:34] <p6eval> rakudo 31112: OUTPUT[Statement not terminated properly at line 1, near "\"Parent: $"␤␤current instr.: 'parrot;PGE::Util;die' pc 119 (runtime/parrot/library/PGE/Util.pir:82)␤]

[13:34] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected "\""␤    expecting operator␤    at /tmp/ESkdXvrbwE line 1, column 6␤]

[13:34] <p6eval> ..elf 22236: OUTPUT[Parse error in: /tmp/jTmKTS0GW2␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: .say "Parent: $_" for ('Chris'␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[13:34] <p6eval> ..STD_r...

[13:35] <Ontolog> perl6: for ('Chris','Wendy','Deek') { if $_ eq 'Chris'|'Wendy' { say $_ } }

[13:35] <p6eval> elf 22236: RESULT[␤]

[13:35] <p6eval> ..pugs, rakudo 31112: OUTPUT[Chris␤Wendy␤]

[13:38] <masak> Ontolog: and you don't need parens around the list if you don't want to

[13:39] *** Jedai left
[13:39] *** schmalbe left
[13:40] *** Jedai joined
[13:45] *** missingthepoint joined
[13:47] *** larsen_ left
[13:48] <Ontolog> i see

[13:51] *** pmurias joined
[13:53] *** jinjing_ left
[13:53] <pmurias> Ontolog: re XS i think it will be implementation dependend

[13:54] <Ontolog> there will hopefully be a dominant implementation yes?

[13:54] <Ontolog> and i would imagine that is the parrot one

[13:54] <Ontolog> but who knows ... it seems there is still a lot to go

[13:54] <pmurias> parrot is a vm

[13:56] *** jinjing joined
[13:57] <pmurias> it is possible there will be only one implementation of the Perl 6 compiler in the future as the AST will have to be specced and the grammar shared

[14:02] *** alester_ joined
[14:02] *** Chillance joined
[14:03] <pmurias> Ontolog: why do you hope that there will be one dominant implementation?

[14:03] *** apeiron joined
[14:04] <Ontolog> for a couple reasons

[14:05] <pmurias> ;)

[14:05] <Ontolog> so, eventually, everyone who wants to contribute works on the one implementation

[14:05] <Ontolog> also, there is consistency among platforms

[14:06] <Ontolog> i can see a reason for having competing implementations during this phase but i don't see any reason for it in the future

[14:07] <pmurias> i think most of the components of the final Perl6es will be interchangable 

[14:08] <Ontolog> you mean most of the components will be pure perl 6?

[14:08] <pmurias> all of the components of the compiler should be pure perl 6

[14:09] <pmurias> and there a lots of reasons for running on other runtimes like the JVM,CLR or javascript

[14:09] <pmurias> s/reasons for/benefits of

[14:13] *** alester_ left
[14:22] *** jinjing left
[14:23] *** hanekomu left
[14:24] *** jinjing joined
[14:24] * masak wants Perl 6 on the JVM

[14:24] <masak> pretty please, with sugat on top?

[14:24] <masak> s/sugat/sugar/

[14:28] *** pbuetow_ left
[14:30] <pmurias> masak: why do you use the JVM?

[14:31] <masak> pmurias: in my work, we develop on top of it

[14:32] <masak> or rather on top of the Eclipse RCP platform

[14:32] <masak> I'm about to sneak some Groovy into the Java environment

[14:33] <masak> but sneaking in some Perl 6 would of course be even better :)

[14:33] <pmurias> have you tried Scala?

[14:33] <masak> not really

[14:33] <masak> just heard interesting things about it

[14:34] <pmurias> it seems to be a better java

[14:36] <masak> well, it's the usual situation with tools and market share, I guess

[14:36] <masak> Scala may be a better Java, but it doesn't have the Eclipse RCP platform

[14:36] <cognominal> RCP?

[14:37] <masak> "Rich Client Platform"

[14:37] <masak> that's what they call their extensible basis to Eclipse

[14:37] *** rindolf joined
[14:37] <pmurias> masak: can't Scala use everything java does?

[14:38] <masak> pmurias: I don't know. maybe in theory, it can.

[14:40] *** jan_ joined
[14:41] <ruoso> masak, I'm pretty confident that the JVM can't support Perl 6 features...

[14:41] <masak> ruoso: I believe you.

[14:42] <masak> still, even a cut-down version would probably rock

[14:42] <pmurias> ruoso: hi

[14:42] <ruoso> hi pmurias 

[14:43] *** zamolxes left
[14:43] <pmurias> ruoso: i'm writing a smop to haskell binding so i can write a mold debugger in haskell

[14:46] <pmurias> it's a bit funny that we are using both C and haskell which are opposites

[14:48] <cognominal> I found funny that the haskell and Perl community could mix together. Haskell was originally all about researh and Per about raw practicallity.

[14:49] <pmurias> the goals of the reasearch very propably to achieve praticallity

[14:49] *** jferrero joined
[14:50] <pmurias> s/very/were

[14:50] <pmurias> * practicallity

[14:51] * pmurias hates typos

[14:51] <cognominal> that rarely suceeds. In fact, until recently SPJ was not wanting his language to be too successful to avoid to deal with a user base.

[14:52] <ruoso> pmurias, I'm pretty curious to see how smop and haskell would look like :)

[14:52] * cognominal makes many typos and is bad at writing English

[14:52] <rindolf> cognominal: SPJ == Simon Peyton Jones?

[14:53] <cognominal> yup

[14:53] <cognominal> I meant his implementation

[14:55] *** larsen_ joined
[14:59] *** iblechbot left
[15:02] *** Ontolog left
[15:02] <pmurias> ruoso: where should i put the the smop in haskell embeding stuff when i check it in?

[15:02] <ruoso> it's embedding haskell? or being embedded in haskell?

[15:03] <pmurias> it's being embedded in haskell

[15:03] *** keepguessing joined
[15:03] * ruoso reading http://groups.google.com/group/perl.perl6.language/browse_thread/thread/4ab459051d7c381b/3f8efc31e4830f42?#3f8efc31e4830f42

[15:03] <lambdabot> Title: arrayref/hashref in spectest suite - perl.perl6.language | Google Groups, http://tinyurl.com/68okmh

[15:04] <ruoso> if @a = @b imply a copy of the array @b to the array @a... does that mean eager evaluation?

[15:04] <keepguessing> Please help me interpret the following RegEx in perl ([^\[]+)\s+

[15:06] <ruoso> I think '@a= @b' can't always mean a copy... otherwise 'my @a = map { ... }, @b' would always be eager...

[15:06] <pmurias> (anything except ]) one or more times and one or more whitespace

[15:06] <pmichaud> rakudo doesn't understand multi-level namespaces yet, I don't think.

[15:06] <lambdabot> pmichaud: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:07] <pmichaud> oops, sorry, was reading scrollback and didn't realize it was scrollback

[15:07] <keepguessing> thank you

[15:08] <keepguessing> pmurias: I think u meant (anything except [)

[15:08] <pmurias> keepguessing: yes ;)

[15:08] <keepguessing> alright thanks ...

[15:08] <pmurias> keepguessing: se perlre manual man page or Programming Perl for more detail

[15:09] <pmurias> * see

[15:14] *** Jedai left
[15:15] *** Jedai joined
[15:18] <keepguessing> thanks :)

[15:19] *** [particle] joined
[15:21] <pmurias> ruoso: we could require my @a := map {...},@b

[15:25] <pmurias> or @a = map {...},@b would do a COW

[15:26] *** iblechbot joined
[15:30] <pmurias> ruoso: got hello world working from haskell where should i put it in

[15:32] <rakudo_svn> r31116 | pmichaud++ | [rakudo]:  Make 'defined' into a named unary.  (See related RT #58830, masak++)

[15:36] *** [particle]1 joined
[15:39] *** jinjing left
[15:41] *** masak left
[15:41] *** Myoma left
[15:44] *** Myoma joined
[15:46] *** [particle] left
[15:51] *** cognominal joined
[15:54] *** kanru left
[16:05] *** keepguessing left
[16:18] *** missingthepoint left
[16:51] *** ab5tract joined
[16:53] *** smtms joined
[17:13] <moritz_> re

[17:16] *** wknight8111 joined
[17:24] *** mncharity joined
[17:28] <pmurias> mncharity: hi

[17:30] *** larsen_ left
[17:32] <pugs_svn> r22237 | putter++ | [elfish/on_sbcl] Fleshed out development environment.

[17:32] <pugs_svn> r22237 | putter++ | Synced with current elf_g (from elf_f).  Added CL-PPCRE download aid.

[17:32] <pugs_svn> r22237 | putter++ | fib() runs.

[17:33] <mncharity> hi pmurias :)

[17:33] <mncharity> btw, fib(37) is 10x p5 speed.

[17:34] <mncharity> http://www.weitz.de/cl-ppcre/

[17:34] <lambdabot> Title: CL-PPCRE - Portable Perl-compatible regular expressions for Common Lisp

[17:35] <mncharity> note http://www.weitz.de/cl-ppcre/#filters

[17:35] <lambdabot> Title: CL-PPCRE - Portable Perl-compatible regular expressions for Common Lisp

[17:38] <mncharity> well, that's my "nibble at p6" for the day.  cheers.

[17:41] <rakudo_svn> r31123 | pmichaud++ | [rakudo]: spectest-progress.csv update: 161 files, 3332 passing tests, 4 failing

[17:42] <pugs_svn> r22238 | moritz++ | [t/spec] fudged gather.t for rakudo

[17:43] <pmurias> mncharity: got to move a computer, i'll look at the commit later

[17:44] <mncharity> pmurias: so the current elf v STD.pm plan is for STD_blue to try using gimme5 directly, rather than creating a STD.pm {*} derivative.  Making tracking STD changes much easier.   Hopefully will be able to do that though 

[17:44] <mncharity> nifty :)

[17:45] <mncharity> ...through STD_blue becoming a STD_red equivalent (ie, elf can backend bootstrap on it), and ideally until elf can run STD.pm (or a tweak of it) itself (ie, elf frontend bootstrap).

[17:47] <mncharity> As STD_red became increasingly out of sync with STD.pm, it lost the ability to provide feedback to STD development.  Hopefully we have that back now.

[17:52] <mncharity> pmurias: apropos smop, I'd appreciate your thoughts on the sbcl backend doing true p6 oo.  Last time I checked, p6l was still arguing over what .WHAT() would return.  So I was leaning towards a p5-backend-like "anything simple which is good enough for now".  But unlike with p5,

[17:54] <mncharity> there isn't the pressing performance motivation to not do the right thing.  So... is the Right Thing oo wise, p6opaque, BUILD, etc, something which is currently well spec'ed?  Is anyone (smop) actually using it (ie, would it be a 1st-implementation spec debugging exercise)?

[17:56] <mncharity> tnx.  will backlog (eventually).

[17:56] *** mncharity left
[18:00] *** ashizawa left
[18:05] <pugs_svn> r22239 | moritz++ | [t/spec] unfudged type-based.t for rakudo

[18:05] *** pmurias left
[18:06] <pugs_svn> r22240 | moritz++ | [t/spec] split quoting.t into quoting.t and quoting-unicode.t

[18:06] <pugs_svn> r22240 | moritz++ | (This is so that non-Unicode aware implementations can run at least parts of

[18:06] <pugs_svn> r22240 | moritz++ | the tests). Also fudged a bit for rakudo

[18:13] <rakudo_svn> r31127 | moritz++ | [rakudo] add quoting tests to spectest_regression

[18:19] <pugs_svn> r22241 | cjfields++ | add simple test for RT# 58678 (along with TODO information re: possible smart matching changes with grammars, moritz++ )

[18:30] <ab5tract> where can i learn more about STD_red?

[18:31] <ab5tract> elf source, i assume, but wiki / website, etc?

[18:31] <moritz_> here, hopefullly ;)

[18:32] <moritz_> all I know is that 1) it's a ruby translation of STD.pm and 2) mncharity doesn't keep that much external documentation about his elf/ stuff

[18:32] <ab5tract> right on. thats what i was intuiting but you know what they say about about assuming

[18:33] <ab5tract> STD_red as the ruby translation of STD.pm, i mean

[18:35] <moritz_> perl6: my Str $x; $x ~= 'a'; say $x

[18:35] <p6eval> rakudo 31128: No output (you need to produce output to STDOUT)

[18:35] <p6eval> ..elf 22241: OUTPUT[Unknown rule: infix_postfix_meta_operator:=␤It needs to be added to ast_handlers.␤ at ./elf_f line 1918␤]

[18:35] <p6eval> ..pugs: OUTPUT[Stra␤]

[18:40] *** pmurias joined
[18:41] *** wknight8111 is now known as wknight-away

[18:48] *** luqui joined
[18:56] *** apple-gunkies joined
[18:56] *** apple-gunkies is now known as hudnix

[18:59] *** wknight-away left
[18:59] *** Auzon joined
[19:05] * ewilhelm thinks he's spotted a logic error in E06

[19:06] <moritz_> ewilhelm: only the Synopsis are maintained, iirc

[19:06] <ewilhelm> "if %person{title} ne $known_title" should be "unless %person{title} eq $known_title"

[19:07] <ewilhelm> moritz_, this appears to be the best explanation of junctions at the moment -- and it is a *logic* error, not a syntax change

[19:07] <moritz_> ewilhelm: I then guess "patches welcome" ;)

[19:08] <ewilhelm> perl6:  my $known_title = 'Mr' | 'Mrs' | 'Ms' | 'Dr' | 'Rev'; say "unknown" if "Mr" ne $known_title;

[19:08] <p6eval> elf 22241: OUTPUT[No viable candidate for call to multimethod infix__124($,$,$,$,$) at (eval 119) line 3␤ at ./elf_f line 3861␤]

[19:08] <p6eval> ..pugs, rakudo 31128: OUTPUT[unknown␤]

[19:08] <ewilhelm> moritz_, to where should the patch go?

[19:09] <moritz_> ewilhelm: to p6l

[19:09] <moritz_> source is at https://svn.perl.org/perl6/doc/trunk/design/exe/E05.pod

[19:10] <ewilhelm> thanks

[19:12] <ewilhelm> moritz_, should I update the print to say and such or just switch the logic?

[19:12] <pugs_svn> r22242 | pmurias++ | [smop] smop embedding in haskell, ony hello world atm

[19:13] <ewilhelm> perl6: my %hash = (a => 2); say "%hash{a}"

[19:13] <p6eval> rakudo 31130: OUTPUT[Could not find non-existent sub a␤current instr.: '_block19' pc 150 (EVAL_13:53)␤]

[19:13] <p6eval> ..elf 22241: OUTPUT[%hash{a}␤]

[19:13] <p6eval> ..pugs: OUTPUT[*** No such subroutine: "&a"␤    at /tmp/tsjPnvrN9B line 1, column 33-34␤]

[19:13] <pmichaud> ewilhelm: you probably mean %hash<a>

[19:13] <pmichaud> or %hash{'a'}

[19:13] <ewilhelm> for interpolation?

[19:14] <pmichaud> (rakudo doesn't recognize either of these at the moment, there it's  {%hash<a>}

[19:14] <pmichaud> yes, for interpolation

[19:14] <ewilhelm> perl6: my %hash = (a => 2); say "%hash{'a'}"

[19:14] <p6eval> rakudo 31130: OUTPUT[%hasha␤]

[19:14] <p6eval> ..elf 22241: OUTPUT[%hash{'a'}␤]

[19:14] <p6eval> ..pugs: OUTPUT[2␤]

[19:14] <ewilhelm> perl6: my %hash = (a => 2); say "%hash<a>"

[19:14] <p6eval> elf 22241, rakudo 31130: OUTPUT[%hash<a>␤]

[19:14] <p6eval> ..pugs: OUTPUT[2␤]

[19:14] <moritz_> pugs++

[19:14] <ewilhelm> perl6: my %hash = (a => 2); say "{%hash<a>}"

[19:14] <p6eval> elf 22241: OUTPUT[{%hash<a>}␤]

[19:14] <p6eval> ..pugs, rakudo 31130: OUTPUT[2␤]

[19:15] <ewilhelm> ah, so {a} is a sub call

[19:15] <pmichaud> anything in braces generally a closure.

[19:15] <pmichaud> *is generally

[19:15] <ewilhelm> so, what do you recommend for fixing this bit in E06?

[19:15] <ewilhelm> <strikethrough> ?

[19:16] <pmichaud> see the top of the file re: "update notes"

[19:16] <pmichaud> but moritz's note about being out of date definitely applies

[19:17] <ewilhelm> yeah.  argh.  So I'll just hope to fix the logic error in the explanation

[19:22] *** abra left
[19:24] *** pmurias left
[19:29] <pugs_svn> r22243 | moritz++ | [t/spec] unfudge tests for rakudo

[19:36] <moritz_> rakudo: sub x { take 4 }; say gather { x };

[19:36] <p6eval> rakudo 31131: OUTPUT[4␤]

[19:37] <moritz_> rakudo++ # lexically scooped gather/take

[19:37] <wolverian> scoop { ... }

[19:37] <moritz_> erm, dynamically

[19:39] *** luqui left
[19:42] *** larsen_ joined
[19:45] *** pmurias joined
[19:49] <ewilhelm> oh, {} not just in the interpolation, but for all hash addressing?

[19:49] <ewilhelm> perl6: my %a = (foo => 6); say %a{foo}

[19:49] <p6eval> rakudo 31131: OUTPUT[Could not find non-existent sub foo␤current instr.: '_block11' pc 41 (EVAL_13:17)␤]

[19:49] <p6eval> ..pugs: OUTPUT[*** No such subroutine: "&foo"␤    at /tmp/tRDvfIWmwb line 1, column 28-31␤]

[19:49] <p6eval> ..elf 22243: OUTPUT[Undefined subroutine &GLOBAL::foo called at (eval 119) line 4.␤ at ./elf_f line 3861␤]

[19:49] <ewilhelm> perl6: my %a = (foo => 6); say %a<foo>

[19:49] <p6eval> elf 22243, pugs, rakudo 31131: OUTPUT[6␤]

[19:50] *** Jedai left
[19:51] *** Jedai joined
[19:54] <pugs_svn> r22244 | pmurias++ | [m0ld] added a --print-bytecode to print bytecode

[19:59] *** hudnix left
[20:25] *** iblechbot left
[20:33] <pugs_svn> r22245 | pmurias++ | [m0ld] --print-bytecode prints out constants too

[20:34] *** eternaleye left
[20:37] <pugs_svn> r22246 | pmurias++ | [m0ld] fixed indentation bug

[20:51] *** eternaleye joined
[21:00] *** wknight8111 joined
[21:09] <rakudo_svn> r31136 | tene++ | [rakudo]

[21:09] <rakudo_svn> r31136 | tene++ | * Use a newclosure workaround for gather for moritz++.

[21:09] <rakudo_svn> r31136 | tene++ | * rt #58854

[21:18] *** wknight8111 left
[21:26] <pugs_svn> r22247 | tene++ | [t/spec]

[21:26] <pugs_svn> r22247 | tene++ | S04-statements/gather.t was also testing for proper behavior of nested for loops accessing outer variables.

[21:26] <pugs_svn> r22247 | tene++ | It now instead relies on Array.join().

[21:27] <Tene> Someone slap me if that was inappropriate.  I feel awkward changing the tests to avoid bugs in the implementation.  I think this is a bit more reasonable, though.

[21:27] <moritz_> Tene: it's fine as long as the buggy behaviour is tested elsewhere

[21:28] <pugs_svn> r22248 | moritz++ | [t/spec] unfudged gather.t a bit, Tene++

[21:29] <Tene> perl6: for 0..1 -> $i { for 0..1 -> $j { for 0..1 -> $k { print "$i$j$k " } } }

[21:30] <p6eval> pugs, rakudo 31136: OUTPUT[000 001 010 011 100 101 110 111 ]

[21:30] <p6eval> ..elf 22246: OUTPUT[$i$j$k $i$j$k $i$j$k $i$j$k $i$j$k $i$j$k $i$j$k $i$j$k ]

[21:30] <Tene> That works in rakudo?  Huh?  Weird.  I guess I don't understand the lexicals issue as well as i should.

[21:34] <pugs_svn> r22249 | pmurias++ | [smop]

[21:34] <pugs_svn> r22249 | pmurias++ | redeclaration in m0ld are ignore instead of causing a bug

[21:34] <pugs_svn> r22249 | pmurias++ | added failing test for modified output of pugs -Cm0ld '$*OUT.print("ok")' - trying to manually make it run see what's changes are needed to smop/pugs

[21:35] *** pmurias left
[21:35] *** pmurias_ joined
[21:38] <pmichaud> Tene: that works in rakudo because there aren't any closures involved

[21:38] <pmichaud> i.e., we aren't taking reference to a block and passing it to another function

[21:39] <pmichaud> the lexicals issue in Parrot and Rakudo is a really deep problem, which is why it's been around for months (years?)

[21:40] <pmichaud> the length of the discussion in #56398 gives some indication of why :-)

[21:40] <Tene> Rather.

[21:41] <Tene> Hmm.  Is http://rt.perl.org/rt3/Ticket/Display.html?id=58828 actually valid according to the spec?

[21:41] <lambdabot> Title: #58828: Make calleable &-sigil parameters work in rakudo

[21:41] *** pmurias_ left
[21:42] <Tene> perl6: my &foo = sub { say "foo" }; foo();

[21:42] <p6eval> elf 22249: OUTPUT[/home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:141:in `block in to_dump0': undefined method `to_dump0' for true:TrueClass (NoMethodError)␤     from /home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.rb:140:in `each'␤       from

[21:42] <p6eval> ../home/evalenv/pugs/misc/elf/elf_f_src/STD_red/match.r...

[21:42] <p6eval> ..rakudo 31136: OUTPUT[foo␤]

[21:42] <p6eval> ..pugs: OUTPUT[*** Can't modify constant item: VStr "MkCode {isMulti = True, subName = \"&\", subType = SubPrim, subOuterPads = [], subInnerPad = MkPad (padToList []), subPackage = , subAssoc = AIrrelevantToParsing, subParams = [], subBindings = [], subSlurpLimit = [], subReturns = (mkType \"An...

[21:42] <moritz_> pugs: my &foo := sub { say "foo" }; foo();

[21:42] <p6eval> pugs: OUTPUT[foo␤]

[21:42] *** jferrero left
[21:42] <moritz_> Tene: I think it should work, yes

[21:42] <Tene> Huh.  Okay.  That's surprising to me.

[21:42] <pmichaud> I think that Rakudo simply doesn't know how to process & in parameter definitions yet

[21:42] <pmichaud> one of the generic "parameters in Rakudo need a big-time refactor" issues

[21:43] <pmichaud> but yes, afaik anytime we have my &foo that should cause foo() to work.

[21:43] <moritz_> and the other way round

[21:43] <pmichaud> or, phrased differently -- there are plenty of examples in S29 where parameters are being declared as &foo :-)

[21:44] <moritz_> if you have 'sub foo', you can also reference &foo

[21:44] <pmichaud> I have to take family to library -- bbl

[21:58] *** larsen_ left
[22:00] *** ceasless joined
[22:12] *** jan_ left
[22:14] *** jan_ joined
[22:14] *** PZt joined
[22:17] *** justatheory joined
[22:19] *** alester joined
[22:25] *** ceasless left
[22:36] *** hanekomu joined
[22:42] *** rindolf left
[22:42] <rakudo_svn> r31138 | pmichaud++ | [rakudo]:  Convert :inline newclosure on gather to :pirop

[23:08] *** justatheory left
[23:09] <ewilhelm> is pugs/util/perl6.vim the most up-to-date vim syntax file?

[23:12] *** Limbic_Region joined
[23:25] *** jamtech joined
[23:26] *** jamtech left
[23:35] *** hanekomu left
[23:40] *** Jedai left
[23:41] *** Jedai joined
[23:45] *** Chillance left
[23:54] *** BinGOs_ joined
