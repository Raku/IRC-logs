[00:03] *** armagad_ left
[00:21] <Juerd> mncharity: Actually, I hope that Perl 6 will actually split on a string rather than regexify the string.

[00:22] <mncharity> ﻿Juerd: curious.  why?

[00:22] <mncharity> oh, you mean if it's a string, not an rx.  nm. :)

[00:23] <Juerd> split('|') should split on /\|/

[00:23] <Juerd> Or, well, the equivalent thereof. It'd be insane to actually use the regex engine for this :D

[00:29] <mncharity> use Dialect::Juerd;   ;)

[00:29] *** bacek_ left
[00:32] <Juerd> You mean #!/usr/bin/perlego :D

[00:37] *** Jedai left
[00:44] *** dolmen left
[00:54] *** FurnaceBoy left
[01:04] <Auzon> rakudo: package Foo {my $var = 1; say $Foo::var}

[01:04] <p6eval> rakudo r28448 OUTPUT[Statement not terminated properly at line 1, near "{my $var ="␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[01:04] <Auzon> rakudo: package Foo {my $var = 1; say $Foo::var};

[01:04] <p6eval> rakudo r28448 OUTPUT["load_bytecode" couldn't find file 'PGE.pbc'␤current instr.: 'parrot;Grammar;onload' pc 8247 (src/gen_builtins.pir:5366)␤

[01:04] <Auzon> rakudo: package Foo {my $var = 1; say $var};

[01:04] <p6eval> rakudo r28448 OUTPUT[Statement not terminated properly at line 1, near "{my $var ="␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[01:04] <Auzon> rakudo: package Foo {sub test {my $var = 1; say $var}}; Foo::test;

[01:04] <p6eval> rakudo r28448 OUTPUT[Statement not terminated properly at line 1, near "{sub test "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[01:04] <Auzon> rakudo: package Foo {sub test {my $var = 1; say $var;}}; Foo::test;

[01:05] <p6eval> rakudo r28448 OUTPUT[Statement not terminated properly at line 1, near "{sub test "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[01:05] <Auzon> rakudo: class Foo {sub test {my $var = 1; say $var;}}; Foo.test;

[01:05] <p6eval> rakudo r28448 OUTPUT[Method 'test' not found for invocant of class ''␤current instr.: '_block11' pc 34 (EVAL_11:19)␤

[01:05] <Auzon> I didn't imagine this would be so hard

[01:16] <mncharity> ﻿﻿Juerd: perlego?  oh, ego.  no - p6 is *supposed* to evolve.

[01:17] <mncharity> ﻿Auzon: which/what?

[01:17] <Auzon> getting Rakudo to let me define some package and refer to a var inside it by the full name

[01:17] <Auzon> maybe Rakudo fails it...?

[01:18] <mncharity> you are writing tests?  if so, does it matter what implementations are/aren't doing?

[01:18] <Juerd> mncharity: -eg-o, esperanto suffix for something that is greater than the original.

[01:18] <Juerd> s/original/stem/

[01:18] <mncharity> ahhhh :)

[01:18] <mncharity> nifty

[01:18] <Juerd> And it reads nicely as "per lego" ;)

[01:19] <Auzon> mncharity: Yes, I'm writing tests. I just could've sworn that this capability was present, and I like to sanity check myself.

[01:19] <mncharity> (my first parse:-)

[01:20] <mncharity> re sanity, *nod*.  sanity is nice, as long as the price is reasonable :P

[01:21] <Auzon> rakudo: class Foo {method test {my $var = 1; say $var;}}; Foo.new.test;

[01:21] <p6eval> rakudo r28448 OUTPUT[1␤]

[01:21] <Auzon> rakudo: class Foo {method test {my $var = 1; say $Foo::var;}}; Foo.new.test;

[01:21] <p6eval> rakudo r28448 OUTPUT[␤]

[01:21] <Auzon> Of course, that's not what I'm trying to actually test...

[01:23] <Auzon> perl6: package Foo {say 'ok';};

[01:23] <p6eval> kp6 r20842: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[01:23] <p6eval> ..pugs: OUTPUT[ok␤]

[01:23] <p6eval> ..rakudo r28448: OUTPUT[Statement not terminated properly at line 1, near "{say 'ok';"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[01:23] <p6eval> ..elf r20842: OUTPUT[syntax error at ./elf_f_faster line 3160, near ") ~"␤syntax error at ./elf_f_faster line 3161, near "))"␤syntax error at ./elf_f_faster line 3162, near "}elsif"␤Global symbol "$m" requires explicit package name at ./elf_f_faster line 3162.␤Execution of ./elf_f_faster aborted

[01:23] <p6eval> ..due to compila...

[01:24] <Auzon> pugs: package Foo {my $var = 'ok'; say $Foo::var

[01:24] <p6eval> OUTPUT[*** ␤    Unexpected end of input␤    expecting operator, ":", "," or "}"␤    at /tmp/OvBMHT12oe line 2, column 1␤]

[01:24] <Auzon> pugs: package Foo {my $var = 'ok'; say $Foo::var}

[01:24] <p6eval> OUTPUT[␤]

[01:24] <Auzon> pugs: package Foo {our $var = 'ok'; say $Foo::var}

[01:24] <p6eval> OUTPUT[␤]

[01:26] <Auzon> pugs: $Foo::var = 'ok'; say $Foo::var;

[01:26] <p6eval> OUTPUT[ok␤]

[01:26] <Auzon> perl6: $Foo::var = 'ok'; say $Foo::var;

[01:26] <p6eval> kp6 r20842: OUTPUT[ok␤]

[01:26] <p6eval> ..pugs: OUTPUT[ok␤]

[01:26] <p6eval> ..rakudo r28448: OUTPUT[ok␤]

[01:26] <p6eval> ..elf r20842: OUTPUT[syntax error at ./elf_f_faster line 3160, near ") ~"␤syntax error at ./elf_f_faster line 3161, near "))"␤syntax error at ./elf_f_faster line 3162, near "}elsif"␤Global symbol "$m" requires explicit package name at ./elf_f_faster line 3162.␤Execution of ./elf_f_faster aborted

[01:26] <p6eval> ..due to compila...

[01:28] <Auzon> That'll work

[01:30] *** Ched- joined
[01:37] <pugs_svnbot> r20843 | putter++ | [elf] Reverted the =~ to ~~ change.  Clarified the role of the list of elf "deviations"/idioms.  Extended the autobox->type api-breakage workaround - autobox <2.53 works again.  Test results updated.

[01:38] *** pbuetow left
[01:38] *** Kattana left
[01:46] <mncharity> say 3

[01:47] <mncharity> elf: say 3

[01:47] <p6eval> OUTPUT[3␤]

[01:47] <Auzon> yay mncharity++

[01:49] <pugs_svnbot> r20844 | Auzon++ | [gsoc_spectest] new tests for S02 (types and name syntax). (added 11 tests)

[01:49] <Auzon> night &

[02:21] <mncharity> 'night Auzon

[02:29] *** ruoso joined
[02:40] *** a-jing joined
[02:40] *** a-jing left
[02:51] *** Schwern joined
[02:51] *** Alias_ joined
[03:11] *** eternaleye_ is now known as eternaleye

[03:21] *** penk joined
[03:25] *** cjfields joined
[03:35] *** Auzon left
[03:45] *** BinGOs left
[04:08] *** CoduMonkey joined
[04:10] *** Alias__ joined
[04:13] <Eevee> rakudo: say 'aba'.split('b')

[04:13] <p6eval> rakudo r28454 OUTPUT[aa␤]

[04:14] <Eevee> rakudo: say ''.split('foo')

[04:14] <p6eval> rakudo r28454 OUTPUT[␤]

[04:16] *** Alias_ left
[04:24] * kolibrie commits his slides to http://feather.perl6.nl/~kolibrie/extraction.xul

[04:24] <kolibrie> please take a look and give comments or suggestions

[04:25] <kolibrie> I'll check back here after I sleep

[04:26] <kolibrie> TimToady: how do I specify the result object instead of the match object in my regex?

[04:27] <kolibrie> talk will be presented in 13.5 hours

[04:28] <kolibrie> &

[04:28] *** CoduMonkey left
[04:32] <pugs_svnbot> r20845 | putter++ | t/spec/S16-io/print.t: print a "1..12\n" plan line.

[04:40] <TimToady> kolibrie: depends on what you mean by "specify".  If you mean "refer to", it's just $$/ or $(), since it's the item slot within the Match object that is the result object.   If you mean "set", then you do that with either <( )> or with { make $result }

[04:43] <TimToady> mncharity: split on a string is specced to be literal string, not regex.  In fact, it's the very first sentence under "split" in Functions.pod

[04:44] <TimToady> aka S29

[04:44] <mncharity> ﻿Juerd: ^^

[04:45] <TimToady> ah, yes, I misread, thanks

[04:46] <mncharity> np :)

[04:55] <TimToady> kolibrie: these days I would probably write \< as '<', but that's just because quotes do a better job of saying "quote" to me than backslash does, esp with \< meaning word boundary in much of regex culture

[04:58] <mncharity> pugs: my @x[0] = 10000; ++@x

[04:58] <p6eval> RESULT[(2,)]

[04:59] <mncharity> pugs: my @x[0] = 10000; say ++@x; say +@x

[04:59] <p6eval> OUTPUT[2␤1␤]

[05:01] *** cjfields left
[05:11] <pugs_svnbot> r20846 | pmichaud++ | S02-builtin_data_types/type.t:

[05:11] <pugs_svnbot> r20846 | pmichaud++ | Add #?rakudo skip for int, num native type tests

[05:11] <rakudo_svn> r28455 | pmichaud++ | [rakudo]:

[05:11] <rakudo_svn> r28455 | pmichaud++ | * Make 'a'..'z' and other string magic autoincrements work.

[05:14] *** CoduMonkey joined
[05:20] *** kcwu left
[05:38] <mncharity> One way someone/anyone could help out with elf is to pour the Snn operator signatures into elf/elf_f_src/PrimitivesP5.pm.  Even if you don't write the sub bodies, simply having the ops defined will avoid 'infix:foo is undefined' test deaths.

[05:38] <pugs_svnbot> r20847 | putter++ | [elf] foofix: operators can now be defined as multis in the prelude.  The operators elf itself uses are still inlined.  Added assorted operators to PrimitivesP5.pm.  One real regression is n-ary infix invocation not being made 2-ary, and thus failing (eg '3 <= 4 <= 5').

[05:39] *** mncharity left
[05:42] *** BinGOs joined
[05:45] *** CoduMonkey left
[06:10] *** lambdabot left
[06:19] *** iblechbot joined
[06:39] <avar> What's split on a regex then?

[06:45] *** Jedai joined
[06:52] *** Psyche^ joined
[06:59] *** iblechbot left
[07:02] *** Schwern left
[07:04] *** xinming joined
[07:05] *** mj41_ joined
[07:08] *** Patterner left
[07:08] *** Psyche^ is now known as Patterner

[07:13] *** a-jing joined
[07:19] *** a-jing left
[07:20] *** xinming_ left
[07:21] *** mj41 left
[07:25] *** IllvilJa left
[07:34] *** mj41_ left
[07:38] *** xinming left
[07:45] *** Alias_ joined
[07:45] *** xinming joined
[07:53] *** eternaleye left
[07:53] *** lambdabot joined
[08:01] *** elmex joined
[08:02] *** Alias__ left
[08:11] *** ruoso left
[08:14] *** Jedai left
[08:18] *** mj41_ joined
[08:18] *** mj41_ is now known as mj41

[08:19] *** bacek_ joined
[08:21] *** bacek left
[08:21] *** pmurias joined
[08:33] *** sri_work left
[08:54] <pugs_svnbot> r20848 | pmurias++ | [STD5_dump_match] filename is now optional,usefull for ./STD5_dump_match <<< "say 1;"

[08:59] *** IllvilJa joined
[09:00] *** cognominal__ left
[09:01] *** cognominal_ joined
[09:01] *** cognominal_ left
[09:12] *** rindolf joined
[09:16] *** yahooooo left
[09:25] *** donaldh joined
[09:30] *** yahooooo joined
[09:31] *** pmurias left
[09:34] *** kcwu joined
[09:51] *** Kattana joined
[10:07] *** pmurias joined
[10:18] <pugs_svnbot> r20849 | pmurias++ | removed debugging leftover

[10:22] *** Jedai joined
[10:37] *** cognominal_ joined
[10:51] <pmurias> TimToady: have you seen agentz's rule tracer (pugs.blogs.com)? what do you think of it?

[11:01] *** penk left
[11:03] <bacek_>  pugs: my $l = -> $i { say "i $i" }; for (1..3) $l;

[11:03] <p6eval> OUTPUT[*** ␤    Unexpected "$l"␤    expecting operator or block construct␤    at /tmp/McgDpsSo8A line 1, column 42␤]

[11:03] <bacek_>  pugs: my $l = -> $i { say "i $i" }; for (1..3) -> $l;

[11:03] <p6eval> OUTPUT[*** ␤    Unexpected end of input␤    expecting formal parameter, trait or block␤    at /tmp/LdxavcNray line 2, column 1␤]

[11:04] <bacek_>  pugs: my $l = -> $i { say "i $i" }; for (1..3) &$l;

[11:04] <p6eval> OUTPUT[*** ␤    Unexpected ";"␤    expecting "::", term postfix, operator or block construct␤    at /tmp/YnWW4P8vel line 1, column 45␤]

[11:04] <moritz_> bacek_: perl 6 grammar requires { and }

[11:04] <bacek_>  pugs: my $l = -> $i { say "i $i" }; for (1..3) { &$l };

[11:04] <p6eval> RESULT[undef]

[11:04] <bacek_> strange...

[11:05] *** a-jing joined
[11:05] *** a-jing left
[11:05] <bacek_>  pugs: my $l = -> $i { say "i $i" }; for (1..3) { $l($_) };

[11:05] <p6eval> OUTPUT[i 1␤i 2␤i 3␤]

[11:06] *** luqui joined
[11:06] <bacek_> much better :)

[11:06] <moritz_> bacek_: &$l doesn't call $l

[11:08] <bacek_>  pugs: my $l := -> $i { say "i $i" }; for (1..3) { l($_) };

[11:08] <p6eval> OUTPUT[*** No such subroutine: "&l"␤    at /tmp/nXrJtDGER0 line 1, column 45-51␤]

[11:09] <moritz_> bacek_: use my &l := ...

[11:10] <bacek_>  pugs: my &l := -> $i { say "i $i" }; for (1..3) { l($_) };

[11:10] <p6eval> OUTPUT[i 1␤i 2␤i 3␤]

[11:10] * bacek_ is definitely stupid now... 

[11:11] <moritz_> why?

[11:12] <bacek_> hard day night...

[11:14] * pmurias is going to sleep before 11 today ;)

[11:15] <pmurias> s/11/23/

[11:16] <pmurias> pugs: my $l = -> $i { say "i $i"};$l.(1);

[11:16] <p6eval> OUTPUT[i 1␤]

[11:16] * bacek_ going to sleep very soon... And it's only 21:15...

[11:17] <bacek_> pugs:  my $i=1; my &s=sub { say $i}; $i=42; s();

[11:17] <p6eval> OUTPUT[*** s{...}{...} is deprecated; write s{...}='...' instead.␤    at /tmp/c0ugfhOxWh line 1, column 42␤*** ␤    Unexpected end of input␤    expecting block, "\\", variable name, ";" or "("␤    at /tmp/c0ugfhOxWh line 2, column 1␤]

[11:18] <bacek_> yak

[11:18] <bacek_> pugs:  my $i=1; my &s{} = { say $i}; $i=42; s();

[11:18] <p6eval> OUTPUT[*** s{...}{...} is deprecated; write s{...}='...' instead.␤    at /tmp/wfOELEDvhr line 1, column 42␤*** ␤    Unexpected end of input␤    expecting block, "\\", variable name, ";" or "("␤    at /tmp/wfOELEDvhr line 2, column 1␤]

[11:18] <bacek_> pugs:  my $i=1; my &s{} = -> { say $i}; $i=42; s();

[11:18] <p6eval> OUTPUT[*** s{...}{...} is deprecated; write s{...}='...' instead.␤    at /tmp/yE1vPs7W7B line 1, column 45␤*** ␤    Unexpected end of input␤    expecting block, "\\", variable name, ";" or "("␤    at /tmp/yE1vPs7W7B line 2, column 1␤]

[11:19] <bacek_> pugs:  my $i=1; my $s = -> { say $i}; $i=42; $s.();

[11:19] <p6eval> OUTPUT[42␤]

[11:20] <bacek_> hmm... Isn't lambda suppose to capture arguments?

[11:24] <spinclad_> no arguments there

[11:24] <spinclad_> $i is from outer scope

[11:24] *** xinming_ joined
[11:26] <bacek_> spinclad_, ok. Next question: 'Isn't lambda suppose to capture whole scope'?

[11:31] <pmurias> bacek_: lambdas are closures, so if i understand correclty yes

[11:31] <pmurias> * correctly

[11:32] <SamB> well, in a real functional language a lambda only needs to capture it's free variables

[11:34] <SamB> but I guess perl functions can have *all* of the variables free rather easily...

[11:34] <pmurias> SamB: i think in perl5 it's also that way

[11:34] <SamB> and Python...

[11:35] *** a-jing joined
[11:35] *** a-jing left
[11:36] *** redicaps joined
[11:42] *** xinming left
[11:47] *** krienke joined
[11:48] *** krienke left
[11:52] *** wknight8111 left
[11:56] *** pbuetow joined
[12:09] *** pmurias left
[12:14] *** cognominal_ left
[12:16] *** dmq joined
[12:23] *** iblechbot joined
[12:24] *** luqui left
[12:24] <spinclad_> bacek_: $i was captured, as a settable container.

[12:25] *** cognominal_ joined
[12:28] <spinclad_> pugs: my $i = 1; my $s = -> { $i = 42; }; say $i; $s.(); say $i;

[12:28] <p6eval> OUTPUT[1␤42␤]

[12:29] <spinclad_> pugs: my $i = 1; my $s = -> { say $i}; $s.(); $i = 42; $s.();

[12:29] <p6eval> OUTPUT[1␤42␤]

[12:32] <spinclad_> pugs: my $s = -> { my $i = 1; my $t = -> { say $i }; my $u = -> { $i = 42; }; return ($t, $u); }; my ($x, $y) = $s.(); $x.(); $y.(); $x.();

[12:32] <p6eval> No output (you need to produce output to STDOUT)

[12:33] <spinclad_> pugs: my ($a, $b) = (1, 2); say $a, $b;

[12:33] <p6eval> OUTPUT[12␤]

[12:34] <spinclad_> pugs: my $s = -> { my $i = 1; my $t = -> { say $i }; $t; }; my $x = $s.(); $x.();

[12:34] <p6eval> OUTPUT[1␤]

[12:35] <spinclad_> pugs: my $s = -> { my $i = 1; my $t = -> { say $i }; my $u = -> { $i = 42; }; ($t, $u); }; my ($x, $y) = $s.(); $x.(); $y.(); $x.();

[12:35] <p6eval> OUTPUT[1␤42␤]

[12:35] <spinclad_> perl6: my $s = -> { my $i = 1; my $t = -> { say $i }; my $u = -> { $i = 42; }; ($t, $u); }; my ($x, $y) = $s.(); $x.(); $y.(); $x.();

[12:35] <p6eval> kp6 r20849: OUTPUT[DISPATCH_VAR: calling .STORE on an invalid object: $VAR1 = {␤          '_methods' => {},␤          '_isa' => [␤                      {␤                        '_methods' => {␤                                        'PROTOTYPE' => {␤                                                

[12:35] <p6eval> ..        '...

[12:35] <p6eval> ..pugs: OUTPUT[1␤42␤]

[12:35] <p6eval> ..rakudo r28470: OUTPUT[Statement not terminated properly at line 1, near "= -> { my "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[12:35] <p6eval> ..elf r20849: OUTPUT[AST handler circumfix:pblock partially unimplemented at ./elf_f_faster line 3170␤]

[12:36] <TimToady> avar: if you want to split on a regex, just write it with /./ instead of '.'

[12:37] <spinclad_> rakudo: my ($a, $b) = (1, 2); say $a, $b;

[12:37] <p6eval> rakudo r28470 OUTPUT[Method 'lvalue' not found for invocant of class 'PAST::Stmts'␤current instr.: 'parrot;PAST::Compiler;as_post' pc 2787 (src/PAST/Compiler.pir:718)␤

[12:38] <spinclad_> rakudo: (my $a, my $b) = (1, 2); say $a, $b;

[12:38] <p6eval> rakudo r28470 OUTPUT[Method 'lvalue' not found for invocant of class 'PAST::Stmts'␤current instr.: 'parrot;PAST::Compiler;as_post' pc 2787 (src/PAST/Compiler.pir:718)␤

[12:39] <spinclad_> rakudo: my $s = -> { my $i = 1; my $t = -> { say $i; }; $t; }; my $x = $s.(); $x.();

[12:39] <p6eval> rakudo r28470 OUTPUT[Statement not terminated properly at line 1, near "= -> { my "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[12:40] <spinclad_> rakudo: my $s = sub { my $i = 1; my $t = sub { say $i; }; $t; }; my $x = $s.(); $x.();

[12:40] <p6eval> rakudo r28470 OUTPUT[Statement not terminated properly at line 1, near ".(); $x.()"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[12:40] <spinclad_> rakudo: my $s = sub { my $i = 1; my $t = sub { say $i; }; $t; }; my $x = $s(); $x();

[12:40] <p6eval> rakudo r28470 OUTPUT[1␤]

[12:41] <spinclad_> rakudo: my $a = (1, 2); say $a;

[12:41] <p6eval> rakudo r28470 OUTPUT[1 2␤]

[12:42] <spinclad_> rakudo: my $s = sub { my $i = 1; my $t = sub { say $i; }; my $u = sub { $i = 42; }; ($t, $u); }; my $x = $s(); $x[0](); $x[1](); $x[0]();

[12:42] <p6eval> rakudo r28470 OUTPUT[1␤42␤]

[12:42] <spinclad_> perl6: my $s = sub { my $i = 1; my $t = sub { say $i; }; my $u = sub { $i = 42; }; ($t, $u); }; my $x = $s(); $x[0](); $x[1](); $x[0]();

[12:42] <p6eval> kp6 r20849: RESULT[error in Block at compiled/perl5-kp6-mp6/lib/KindaPerl6/Grammar/Sub.pm line 753, <> line 1.␤*** Syntax Error in Block: missing closing curly bracket  ␤]

[12:42] <p6eval> ..pugs: OUTPUT[1␤42␤]

[12:42] <p6eval> ..rakudo r28470: OUTPUT[1␤42␤]

[12:42] <p6eval> ..elf r20849: OUTPUT[Not an ARRAY reference at (eval 119) line 8.␤ at ./elf_f_faster line 4656␤]

[12:43] <spinclad_> pugs+=2; rakudo+=1;

[12:47] <Juerd> TimToady++  # "these days I would probably write \< as '<'"

[12:48] <spinclad_> perl6: my $s = sub ($a) { my $i = $a; my $t = sub { say $i; }; my $u = sub ($b) { $i = $b; }; ($t, $u); }; my $x = $s(1); my $y = $s(2); $x[0](); $y[0](); $x[1](42); $y[1](43); $x[0](); $y[0]();

[12:48] <p6eval> kp6 r20849: RESULT[error in Block at compiled/perl5-kp6-mp6/lib/KindaPerl6/Grammar/Sub.pm line 753, <> line 1.␤*** Syntax Error in Block: missing closing curly bracket  ␤]

[12:48] <p6eval> ..pugs: OUTPUT[1␤2␤42␤43␤]

[12:48] <p6eval> ..rakudo r28470: OUTPUT[1␤2␤42␤43␤]

[12:48] <p6eval> ..elf r20849: OUTPUT[Not an ARRAY reference at (eval 119) line 11.␤ at ./elf_f_faster line 4656␤]

[12:48] <spinclad_> pugs++ rakudo++

[12:48] <spinclad_> well scoped!

[12:53] *** Helios- joined
[12:54] *** cmarcelo joined
[12:54] <spinclad_> (apologies for the spam)

[12:55] *** spinclad_ is now known as spinclad

[12:57] *** Jedai left
[13:04] <kolibrie> TimToady: thanks for the \< suggestion.  applied.

[13:05] <kolibrie> others, please feel free to look over my slides and offer comments: http://feather.perl6.nl/~kolibrie/extraction.xul

[13:05] <kolibrie> talk in 5 hours

[13:10] *** Helios` joined
[13:12] * PerlJam looks

[13:15] *** Lorn joined
[13:18] *** Helios- left
[13:19] <PerlJam> kolibrie: on slide 18 you match href literally, but you quote everything else (yes, I realize why).  It might me a good idea to quote href too (unless you're going to talk about the new run for regex meta characters :-)

[13:20] <spinclad> kolibrie: sorry, couldn't see it, even with js turned on; read the source, though, looks a good talk.

[13:21] <PerlJam> kolibrie: and since the talk is entitled "practical ..." I hope you're going to tell people how to get/install/run perl 6 at some point :)

[13:21] *** drbean left
[13:22] <spinclad> (i expect it's a local problem here, somehow i or firefox/iceweasel have forgotten how to xul.)

[13:22] <PerlJam> kolibrie: in any case, it does look like an excellent talk

[13:22] <PerlJam> kolibrie++

[13:23] <spinclad> kolibrie++

[13:26] *** toddr joined
[13:26] <kolibrie> spinclad: works in my iceweasel and galeon - not sure what would make it not work

[13:30] <kolibrie> PerlJam: re slide 18 - good ideas - thinking about about them

[13:31] *** wknight8111 joined
[13:31] <kolibrie> I'm hoping to show how to use grammars, but I'm not sure that any implementation can run my examples

[13:32] <PerlJam> rakudo probably can come close

[13:35] *** eternaleye joined
[13:45] *** toddr left
[13:53] <pugs_svnbot> r20850 | lwall++ | [STD5] some examples of "try" programs

[14:04] *** eternaleye left
[14:09] *** TJCRI joined
[14:17] *** toddr joined
[14:19] *** luqui joined
[14:23] *** wknight8111 left
[14:34] *** wknight8111 joined
[14:35] *** FrHenkie joined
[14:37] *** toddr left
[14:45] *** chris2 joined
[14:47] *** alc joined
[14:48] *** Exodist joined
[14:49] *** Schwern joined
[14:51] *** Schwern left
[14:53] *** Schwern joined
[14:56] *** Schwern left
[15:00] <TimToady> kolibrie: whoops, forgot to check it in...

[15:00] <pugs_svnbot> r20851 | lwall++ | [STD] implement <~~>

[15:00] *** pmurias joined
[15:00] *** FrHenkie left
[15:01] * kolibrie pulls

[15:03] *** toddr joined
[15:05] *** toddr left
[15:05] *** toddr joined
[15:06] <rindolf> TimToady: are you YAPCed?

[15:07] <PerlJam> rindolf: he is at yapc somewhere :)

[15:07] <rindolf> PerlJam: somewhere.

[15:07] <rindolf> Maybe I'll go biking now.

[15:07] <rindolf> When I return I'll download Firefox 3.0-Final.

[15:08] <PerlJam> oh, heh.  I see him at the front of the auditoriumm now.

[15:08] <PerlJam> s/mm/m

[15:10] *** bacek_ left
[15:12] *** drbean joined
[15:13] *** Jedai joined
[15:14] <pmurias> TimToady: should i added a --rule option to STD5_dump_match?

[15:22] *** toddr left
[15:24] <pugs_svnbot> r20852 | pmurias++ | [elf] remove the elf_p branch as it's broken and has a stupid name

[15:24] <pmurias> * removed

[15:24] *** toddr joined
[15:26] *** toddr left
[15:32] *** toddr joined
[15:35] *** luqui left
[15:41] *** toddr left
[15:46] <diakopter> pmurias: i'm claiming a virtual lock on the yap6 dir... I'm working on a major revamp/fix cycle and I can't/shouldn't check it in until it's a lot closer to done... it will be a few days probably.

[15:47] *** kcwu left
[15:48] <diakopter> audreyt++ suggested packaging the parser bits as Parse::Packrat, so I'm renaming/refactoring those components... and fixing the packrat-ness as a prereq.

[15:49] *** kcwu joined
[15:54] <pmurias> diakopter: fine, i'm playing mostly with STD now

[16:03] *** alc left
[16:04] *** alc joined
[16:13] *** alc left
[16:15] *** armagad_ joined
[16:17] *** Alias_ left
[16:19] <pmurias> diakopter: how do people at the yapc like yap6?

[16:19] <pmurias> s/people/the people

[16:30] <pugs_svnbot> r20853 | lwall++ | s/ok/is/ for pmichaud++

[16:32] *** renormalist left
[16:48] *** cjfields joined
[16:55] *** p6eval left
[16:55] *** p6eval joined
[16:55] *** p6eval left
[16:55] *** p6eval joined
[16:56] <apeiron> Hey, uhm, it seems if you privmsg peval with perl: [+] <1 2 3 4 5> it dies.

[16:56] <apeiron> er, perl6

[16:58] *** deq` joined
[17:05] <cjfields> apeiron: how are you msg'ing the perl6 evalbot?

[17:06] *** donaldh left
[17:07] *** eternaleye_ joined
[17:22] <pmurias> TimToady: make should set _reduced?

[17:29] *** barney joined
[17:36] *** borondil joined
[17:45] *** borondil left
[17:49] *** IllvilJa left
[17:52] *** kunwon1 left
[18:07] *** Jedai left
[18:08] <kolibrie> YAPC::NA says hello

[18:08] *** sri_work joined
[18:10] <Ara5n> hello YAPC::NA

[18:13] <Eevee> shouldn't there be a speaker over here?  -->

[18:13] <PerlJam> kolibrie: hello from the 14th row or so :)

[18:13] <kolibrie> PerlJam: hello

[18:13] <PerlJam> kolibrie: btw, according to the schedule you should have already started

[18:13] <kolibrie> yes, but no one introduced me

[18:13] <kolibrie> mayme I should start anyway

[18:13] <kolibrie> *maybe

[18:14] *** Ched- left
[18:14] <Eevee> are we your slides?

[18:14] * TimToady too

[18:14] <pmichaud> hi YAPC::NA!

[18:15] <apeiron> cjfields, /msg p6eval  perl6: [+] <1 2 3 4 5>

[18:16] * apeiron is on a fail battery so may detach unannounced

[18:16] <cjfields> apeiron++

[18:16] *** cjfields left
[18:18] *** beek_ joined
[18:18] *** deve1 joined
[18:19] *** beek_ left
[18:20] <PerlJam> perl6/rakudo aren't getting as much love from YAPC as I would have thought

[18:24] <deve1> Is it a lack of love, or are people intimidated by the complexity of the topic?

[18:24] *** beek_ joined
[18:25] *** deve1 left
[18:25] <Eevee> or does popular opinion see it as vaporware?

[18:25] *** deve1 joined
[18:25] *** deve1 is now known as deven_

[18:28] *** DietCoke joined
[18:29] <DietCoke> rakudo: say 'A'..'Z'

[18:29] <p6eval> rakudo r28476 OUTPUT[ABCDEFGHIJKLMNOPQRSTUVWXYZ␤]

[18:29] <PerlJam> dunno  but there aren't many people in the auditorium

[18:29] * DietCoke pats p6eval onna head.

[18:29] * DietCoke guesses about 30.

[18:29] <beek_> yeah, i wonder where everyone went.

[18:29] <pmichaud> I think intimidation.  Plus immediately after lunch.

[18:29] <pmichaud> I'll be sure to clear out the auditorium.  :-)

[18:30] <PerlJam> Jeff gets first shot at that

[18:30] <apeiron> rakudo: [+] <1 2 3 4 5>

[18:30] <p6eval> rakudo r28476 OUTPUT[Syntax error at line 1, near "[+] <1 2 3"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[18:31] <beek_> i'd kinda like to see what ingy is talking about at 2:50.

[18:32] <PerlJam> beek_: that's probably where I'm going too.  

[18:33] <pmichaud> what's ingy talking about at 2:50?  Maybe I should go.  :-)

[18:35] <PerlJam> pm: Perl + Javascript.  Con particle into giving your talk and you can go  :-)

[18:49] *** cjfields joined
[18:52] *** beek_ left
[18:54] *** beek_ joined
[18:54] * diakopter ponders left-recursive zero-width assertions

[18:54] *** beek_ left
[18:59] *** Alias_ joined
[19:02] *** deq` left
[19:02] <DietCoke> I volunteer... to attend ingy's talk.

[19:04] <PerlJam> DietCoke: you and I are going to desert Pm.  There won't be anyone left for his talk!

[19:04] <PerlJam> ;)

[19:05] *** Maghnus left
[19:05] *** TJCRI left
[19:10] <DietCoke> oh, alright, I'll stay.

[19:12] *** TJCRI joined
[19:14] *** schmalbe joined
[19:30] *** barney left
[19:35] <TimToady> I heard ingy's talk in Tokyo, so I'll stay

[19:40] *** rindolf left
[19:40] <pmurias> TimToady: make should put stuff into _reduced?

[19:42] *** schmalbe left
[19:43] <TimToady> pmurias: I just threw the _reduced tag in there to record that we hit a _REDUCE method, but it's not otherwise special

[19:44] <pmurias> so i should use _result

[19:44] <pmurias> ?

[19:44] <diakopter> I forgot to ask horwitz when he was going to rename mod_perl6 to mod_rakudo

[19:44] <TimToady> currently ->item is the scalar value of the Match object, and it sets the '' key

[19:44] <TimToady> and if the '' key isn't there, returns ->text

[19:44] <pmurias> i'll use that than

[19:45] <pmurias> is "1\n" valid perl6?

[19:47] <pmurias> i'll try to fix that if it is because std generates an error for that which is annoying

[19:47] <TimToady> why wouldn't it be valid?

[19:50] <pmurias> dunno

[19:51] <pmurias> i was overconfident in STD5 ;)

[19:51] *** b_jonas joined
[19:52] <pmurias> should perlhints be scattered around in STD.pm?

[19:54] <TimToady> I didn't put them there

[19:54] <TimToady> they do tend to clutter things

[19:55] <TimToady> looks like it was moritz put those in

[19:55] <b_jonas> really?

[19:56] <b_jonas> I mean, is it more cluttered than like plain.tex where it's just some memory optimizations?

[19:58] *** cognominal_ left
[19:58] <pmurias> b_jonas: rephrase please

[19:59] <pmurias> moritz_: can i move perlhints out of STD.pm?

[19:59] <b_jonas> pmurias: well, I'm not really sure what I wanted to ask either...

[19:59] *** Alias_ left
[19:59] <b_jonas> but it's like

[19:59] *** Alias_ joined
[20:00] <b_jonas> are there optimizations in there that are actually tricky to understand, not just ones that make it reading difficult because it clutters, but otherwise actually trivial to understand?

[20:03] *** cognominal_ joined
[20:04] *** Alias__ joined
[20:05] *** Alias_ left
[20:06] <pmurias> b_jonas: no, perlhints are not hints to the compiler but hints the the user

[20:07] <pmurias> something like pointing with the mouse in the future perl IDE, and the IDE telling you what that construct is

[20:07] <pmurias> TimToady: found a bug in eat_terminator

[20:07] <b_jonas> pmurias: I see

[20:08] <b_jonas> pmurias: what, it doesn't fail if you're not a metallivore?

[20:09] * pmurias laughs out loud

[20:10] <pmurias> TimToady: foo()!!1 is parsed as foo();!(!1)

[20:12] <pmurias> !! is a terminator

[20:12] <b_jonas> there's actually such a joke about Terminator's last word here, but it only works because metal theft is so common (there are lots of missing bronze statues)

[20:15] *** wknight8111 left
[20:21] *** jhorwitz joined
[20:26] <TimToady> !! shouldn't be a terminator except inside ??, I expect

[20:26] <TimToady>    About

[20:26] <TimToady>    Wiki

[20:26] <TimToady>    Sponsorship

[20:27] <TimToady> sorry, naughty pouch hit the paste button...

[20:32] * pmurias is giving up on the 1

[20:33] <pmurias> bug

[20:35] *** jhorwitz_ joined
[20:35] *** jhorwitz left
[20:35] *** jhorwitz_ is now known as jhorwitz

[20:36] *** kaether joined
[20:36] <pugs_svnbot> r20854 | lwall++ | [LazyMap] need eager() before we reverse a lazy list

[20:39] <pmurias> shower&

[20:40] *** wknight8111 joined
[20:54] *** Auzon joined
[20:54] *** bacek_ joined
[21:02] *** Jedai joined
[21:09] *** Alias_ joined
[21:10] *** Alias__ left
[21:13] <pugs_svnbot> r20855 | lwall++ | [gimme5] move s/say/print/ translation to un6()

[21:13] *** TJCRI left
[21:15] <deven_> did anyone catch the URL for the Parrot talk in the auditorium now?

[21:15] <pugs_svnbot> r20856 | pmurias++ | [sm0p] actions are printed out to a seperate file

[21:18] *** Schwern joined
[21:19] <kolibrie> deven_: the one entitled "‎Advanced control structures in Parrot‎"?

[21:20] <deven_> yes

[21:20] <deven_> looks like it should be http://rgrjr.dyndns.org/acsip/index.html but that is broken

[21:22] <kolibrie> he's using a local URL

[21:23] <kolibrie> file:///home.local/rogers/projects/web-site/perl/acsip/closures.html

[21:23] <deven_> He had a URL on the title page, but I didn't catch the whole thing.

[21:23] <deven_> I think he may not have put it online yet.

[21:23] <kolibrie> perhaps

[21:25] <deven_> magnachef__ on #yapc had the right URL: http://rgrjr.dyndns.org/perl/acsip/pir-basics.html

[21:25] <lambdabot> Title: Bob Rogers: ACSIP: PIR Basics

[21:33] <pugs_svnbot> r20857 | diakopter++ | [yap6] please disregard; just a check[in]point

[21:33] <pugs_svnbot> r20858 | diakopter++ | [yap6] please disregard; just a check[in]point

[21:41] *** jhorwitz left
[21:52] *** b_jonas left
[21:52] *** kaether left
[21:58] *** pmurias left
[22:02] *** cjfields left
[22:12] *** Schwern left
[22:18] *** chris2 left
[22:19] *** Alias__ joined
[22:20] *** Alias_ left
[22:28] *** Exodist left
[22:29] *** iblechbot left
[22:37] *** eternaleye_ left
[22:38] *** Alias_ joined
[22:40] *** Alias__ left
[22:44] *** armagad_ left
[22:48] *** eternaleye_ joined
[22:57] *** jferrero joined
[22:59] *** Alias_ left
[23:02] *** Jedai left
[23:39] *** Blasi joined
[23:47] *** Maghnus joined
[23:49] *** sri_work left
