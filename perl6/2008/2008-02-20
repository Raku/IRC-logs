[00:13] *** xinming left
[00:16] <meppel-san> good night

[00:17] *** meppel-san left
[00:26] *** Zygo- joined
[00:26] *** Zygo left
[00:27] *** Zygo- is now known as Zygo

[00:33] *** Zygo left
[00:33] *** Zygo joined
[00:36] *** iblechbot left
[00:40] *** wknight8111 is now known as wknight-away

[00:59] *** nipotaway is now known as nipotan

[01:04] *** lyokato_ joined
[01:08] *** Zygo- joined
[01:08] *** Zygo left
[01:09] *** ferrer joined
[01:09] *** Zygo- is now known as Zygo

[01:10] <cj> is the perl6 sprintf API the same as perl5's?

[01:19] *** cnhackTNT joined
[01:24] *** Zygo left
[01:24] *** Zygo joined
[01:28] *** alester is now known as AndyAway

[01:34] *** mattz left
[01:42] <TimToady> cj: probably still there, but mostly just use $x.fmt("%03d")

[01:51] *** devogon left
[01:58] *** kane__ left
[01:58] *** kane_ joined
[02:00] *** kane__ joined
[02:00] *** kane_ left
[02:01] *** kane__ left
[02:02] *** Zygo left
[02:02] *** kane_ joined
[02:04] *** kane__ joined
[02:04] *** kane_ left
[02:04] *** whooosh joined
[02:05] *** whooosh left
[02:10] *** demq left
[02:10] *** demq joined
[02:16] *** Zygo joined
[02:28] *** Zygo left
[02:29] *** Zygo joined
[02:29] *** Zygo is now known as ZygosGhost

[02:30] *** ZygosGhost is now known as Zygo

[02:32] *** Zygo left
[02:32] *** Zygo joined
[02:33] *** zakame joined
[02:35] <cj> TimToady: okay.  I'm tring to add something quick'n'dirty'accurate to http://svn.pugscode.org/pugs/v6/v6-MiniPerl6/lib/MiniPerl6/Perl5/Runtime.pm's Main::

[02:35] <lambdabot> http://tinyurl.com/385yzo

[02:36] <cj> there was supposed to be another 'n in there

[02:39] <cj> also, I want to inject values into a template

[02:40] <cj> *multiple* values

[02:42] *** zakame_ joined
[02:45] *** zakame left
[02:48] *** zakame__ joined
[02:49] *** zakame__ is now known as zakame

[02:54] *** Zygo left
[02:54] *** Zygo joined
[02:57] *** kanru left
[03:02] *** agentzh joined
[03:05] *** zakame_ left
[03:07] *** demerphq joined
[03:10] *** gwern joined
[03:17] <gwern> hm. I'm trying pugs from svn - is it bad that HsSyck doesn't build because of bytestring problems?

[03:17] <gwern> and pugs-hsregex too... yeah, that seems to kill my build

[03:18] <gwern> is pugs updated for 6.8.x, it occurs to me to ask...?

[03:19] *** dduncan joined
[03:21] *** demq left
[03:25] *** dduncan left
[03:35] *** [particle1 joined
[03:40] <TimToady> gwern: I'm still running 6.6.1 myself, and I don't think it's updated to 6.8 yet

[03:40] <TimToady> it could use some TLC on that score...

[03:41] <gwern> TimToady: how unforunate. I've got pugs-hsregex updated, but HsSyck looks a bit tricky because bytestring has changed a fair bit

[03:41] <gwern> TLC?

[03:41] <TimToady> Tender Loving Care

[03:41] <gwern> TimToady: ah. do you know who I should send my 'svn diff's to?

[03:42] *** mattz joined
[03:43] <allbery_b> I have ghc-pkg problems building pugs, fwiw.

[03:44] <gwern> allbery_b: how did you get HsSyck working?

[03:44] <allbery_b> I didn't, it fails configure on ghc-pkg errors

[03:44] <allbery_b> as I just said

[03:45] <gwern> hm. I assumed you meant pugs-pugs, not the libraries it uses

[03:45] <allbery_b> never gets around to checking if bytestring is the right version, ghc-pkg barfs on its parameters

[03:45] <allbery_b> no, the pugs repo

[03:46] <allbery_b> hrm, no, I misremembered.  doesn't error on params, just ignores the global package repo because of its params and then falls over because it can't find base

[03:46] <gwern> heh. my problem is that when it trys to build, it wants old functions like copyCStringLen

[03:47] *** [particle] left
[03:53] *** REPLeffect joined
[03:59] <gwern> ah, HsSyck wasn't so hard to fix. 'oleg cat says: see? ur type problem wasn't so hard'

[04:03] <TimToady> wouldn't it just be easier to give you a commit bit to pugs repo?

[04:04] * diakopter checks if CommitBit is running.

[04:04] <TimToady> it is

[04:04] <gwern> dunno. pugs seems to work out of svn and I'm not familiar with svn. I guess when I finish, I'll just send one big diff. 

[04:04] *** Limbic_Region left
[04:04] <TimToady> if you have a commit bit, you can just send it by saying "svn ci"

[04:05] <TimToady> just /msg me your email and I can give you a commit bit

[04:05] <gwern> hm. what is pugs-HsSyck useful for? it says it handles loading and dumping YAML, which is some data serialization format?

[04:05] <TimToady> yes

[04:06] <gwern> alrigh, but what do you actually do with it? is it good for post-mortem debugging or something?

[04:06] <TimToady> it uses yaml to save compiled images of Prelude.pm and Test.pm, at least

[04:07] <TimToady> speeds up startup a lot

[04:07] <TimToady> commit bit sent

[04:07] <TimToady> it's customary to add yourself to AUTHORS on first commit

[04:07] <gwern> ah. so Prelude.pm and Test.pm need to do a lot of data munging and this is used for caching the end products to disk?

[04:07] <TimToady> yes

[04:07] <gwern> TimToady: aight

[04:08] *** lyokato_ left
[04:11] *** alc joined
[04:12] *** lyokato_ joined
[04:12] <pugs_svnbot> r19953 | lwall++ | [gimme5] can now parse integer 42 running STD under Perl 5

[04:13] <pugs_svnbot> r19953 | lwall++ | [Cursor5,STD5] now strict and warnings clean

[04:13] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19953

[04:13] <lambdabot> Title: Changeset 19953 - Pugs - Trac

[04:13] <gwern> neat bot.  #haskell needs that for hackage uploads!

[04:15] <diakopter> the bot runs in pugs. Although a much simpler one could be made to check the rss feeds from the trac (or SVN::Web) site.

[04:15] <gwern> man, now I'm confused. hackage has hssyck 0.4, but the one in pugs is 0.2?

[04:18] *** RayMagini left
[04:20] *** wknight-away left
[04:21] *** RayMagini joined
[04:24] *** zakame_ joined
[04:27] * diakopter [OT] just discovered the VPSes at serveraxis.com.  Half the price of what I'm currently paying, and they're Xen, not VZ.

[04:29] <Tene> [OT] I can voich that http://www.neverblock.com/ has decent xen hosting, but I have no clue what the pricing looks like.

[04:29] <lambdabot> Title: Com.org - Only the best links ...

[04:30] *** jjore_ joined
[04:30] <diakopter> lambdabot's DNS lookup got hijacked

[04:30] <diakopter> or something

[04:30] <Auzon> http://google.com

[04:30] <lambdabot> Title: Google

[04:30] <Tene> Huh.  Spooky.

[04:31] <diakopter> http://www.endspa

[04:31] <diakopter> lambdabot: http://www.endspamemails.com/

[04:31] <diakopter> ok...

[04:32] <Auzon> Maybe it parsed it incorrectly.

[04:33] <diakopter> re: neverblock I need 8x more RAM than their VPSes provide

[04:36] *** pcbuetow joined
[04:39] *** zakame__ joined
[04:44] *** zakame left
[04:44] *** zakame__ left
[04:45] *** zakame__ joined
[04:45] *** zakame__ is now known as zakame

[04:46] *** zakame_ left
[04:49] *** pbuetow left
[04:52] *** zakame_ joined
[04:56] *** kst left
[04:58] <cj> diakopter: how does ec2 compare?

[05:02] <buu> serveraxis.com.

[05:02] <buu> http://www.neverblock.com/

[05:03] <buu> Uselss bot.

[05:03] <lambdabot> Title: NeverBlock Reliable Virtual Private Servers

[05:03] <Auzon> hah

[05:04] *** zakame left
[05:04] *** REPLeffect left
[05:21] <gwern> in case anyone was wondering, I've made it up to 56 of 109 in the build process thus far

[05:21] *** xinming joined
[05:21] *** pcbuetow left
[05:22] *** lyokato_ left
[05:23] <gwern> but I think I will call it a night here

[05:25] <Tene> g'night

[05:35] *** penk joined
[05:41] *** Zygo left
[05:41] *** Zygo joined
[05:46] *** monomorph joined
[05:54] *** njbartlett left
[05:55] *** monomorph left
[06:05] *** lyokato_ joined
[06:23] <spinclad> cj: re inject *multiple* value:  C< say "blah {$x.fmt('%a')} blah {$y.fmt('%b')} blah"; >  may improve on sprintf style in some ways (keeping value, injection point, and format together)

[06:24] *** zakame joined
[06:25] *** zakame left
[06:33] *** thoughtpolice left
[06:40] *** zakame_ left
[06:41] *** penk left
[06:44] *** zakame joined
[06:54] *** BinGOs left
[06:57] *** fmerges joined
[07:05] *** devogon joined
[07:15] *** BinGOs joined
[07:26] *** Daveman left
[07:37] *** Aankhen`` joined
[07:41] *** Daveman joined
[07:51] *** iblechbot joined
[07:55] *** stevan_ left
[07:58] *** jql left
[08:05] *** njbartlett joined
[08:06] *** penk joined
[08:22] *** fmerges left
[08:23] *** njbartlett_ joined
[08:26] *** fmerges joined
[08:33] *** njbartlett__ joined
[08:36] *** njbartlett left
[08:50] *** njbartlett_ left
[08:51] *** zamolxes joined
[08:52] *** GPenguin joined
[08:52] *** Gwern-away joined
[08:58] *** njbartlett__ left
[09:07] *** pravus left
[09:07] *** pravus joined
[09:07] *** sri_work joined
[09:11] *** hanekomu joined
[09:27] *** cognominal_ left
[09:28] *** cognominal_ joined
[09:29] *** cognominal_ left
[09:29] *** cognominal_ joined
[09:38] <pugs_svnbot> r19954 | lwall++ | [gimme5] some utf8 coercions to get around yaml yuck

[09:38] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19954

[09:38] <lambdabot> Title: Changeset 19954 - Pugs - Trac

[09:48] *** alc left
[09:57] *** cognominal_ left
[09:57] *** gwern left
[10:05] *** penk left
[10:17] *** penk joined
[10:21] <ruoso> TimToady, have you seen my questions about STM yesterday?

[10:22] *** cnhackTNT left
[10:27] *** penk left
[10:32] *** nipotan is now known as nipotaway

[10:33] *** Daveman left
[10:39] *** chris2 joined
[10:41] *** masak joined
[10:48] *** zakame left
[10:51] *** wknight-away joined
[10:53] *** Zygo left
[10:54] *** Zygo joined
[11:01] *** ebassi joined
[11:05] *** IllvilJa left
[11:11] *** GPenguin left
[11:25] *** IllvilJa joined
[11:29] *** dcnl joined
[11:34] *** cmarcelo joined
[11:35] *** dcnl left
[11:35] <ruoso> After a little more thinking about STM... I think it would be sane for it to be Object-based. Which means that only STM-aware objects are going to pay attention to the transaction... but I don't think side-effects should be tracked...

[11:36] <ruoso> the user must know that the code in a contend block is subject to retry, and that only STM-aware objects will be rolled back

[11:38] <ruoso> there's actually no way of keeping track of side effects... considering we can have unknown representations

[11:39] <ruoso> that can dispatch the method calls however they want...

[11:42] <ruoso> if we think this way... we can have a simple "autocommit" property on the current interpreter instance, where a STM-aware object would check and implement the transaction, knowing that the current interpreter is the transaction holder, and probably registering in the interpreter as commit-listener...

[11:43] <ruoso> but there's still the issue of making the commit atomic...

[11:43] <ruoso> probably implementing a distributed-transaction-like api could solve it

[11:46] *** Helios_ joined
[11:47] <ruoso> TimToady, can we have contend inside contends?

[11:47] *** Helios left
[11:47] *** Helios_ is now known as Helios

[11:51] <ruoso> if so, the interpreter would have to hold a "transaction" reference... that would be undef most of the time, and at that time, the objects would always auto-commit...

[11:51] <ruoso> and this transaction object would implement a distributed-transaction api where each object would hold its own transaction... 

[11:55] <ruoso> and this same api would implement the creation of a sub-transaction...

[11:55] <ruoso> but for all this, keeping track of side effects is still impossible

[11:59] <ruoso> in fact... keeping track of side effects is actually a bad idea...

[11:59] <ruoso> considering one STM-aware object might be an ORM objcet

[12:00] <ruoso> which means that it might actually be using IO to implement the transaction

[12:04] <ruoso> which means that there is no actual STM, but simply Distributed Transactions

[12:04] <ruoso> where the interpreter is simply the Distributed Transaction Coordinator

[12:04] *** lyokato_ left
[12:08] <ruoso> it may actually be more impressive to think about Perl 6 implementing the XA spec than using STM... specially for enterprise software development

[12:11] <ruoso> think about web-service objects that transparently integrate the transaction... where the perl code simply looks like a normal set of calls...

[12:12] *** wknight-away left
[12:16] *** cognominal_ joined
[12:21] <pugs_svnbot> r19955 | putter++ | [misc/STD_red] progress.  std.rb is now a careless mostly-non-working Match-free version of STD.pm in ruby.  next step is s/careless//.

[12:21] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19955

[12:21] <lambdabot> Title: Changeset 19955 - Pugs - Trac

[12:26] <mncharity> gwern: thanks for your work! :)

[12:34] *** chris2 left
[12:34] *** njbartlett joined
[12:40] *** njbartlett_ joined
[12:47] *** mncharity left
[12:56] *** hanekomu_ joined
[13:02] *** njbartlett left
[13:10] *** njbartlett_ left
[13:11] *** cognominal_ left
[13:12] *** hanekomu left
[13:13] *** cognominal_ joined
[13:15] *** penk joined
[13:24] *** cognominal__ joined
[13:32] *** cognominal_ left
[13:36] *** bphillips left
[13:36] *** orafu joined
[13:39] *** baest left
[13:40] *** baest joined
[13:44] *** pbuetow joined
[13:54] *** monomorph joined
[13:57] <wolverian> Juerd, I really like perluniadvice. do you have any thoughts on alternative XML processors, e.g. XML::LibXML; how does it handle unicode? 

[14:14] *** baest left
[14:15] *** baest joined
[14:16] <masak> why does a Match object have an "underlying result object"?

[14:16] *** stevan_ joined
[14:16] <masak> why aren't the two the same?

[14:20] *** marmic left
[14:20] <spinclad> masak, so it can still have positional and named submatches, no?

[14:22] <masak> the match? hm.

[14:22] <masak> I guess I'm just philosophically confused about the difference between a Match and a match result

[14:22] <spinclad> at least that's how i read the difference: the result object is the match's scalar value

[14:22] <masak> ah

[14:22] <masak> ok, that makes sense

[14:23] <masak> also, what exactly is a 'zen slice'?

[14:23] <masak> is it used outside of regexes?

[14:24] <masak> where is it spec:ed?

[14:25] <spinclad> mentioned in S05:2164 and S09:596

[14:26] <masak> spinclad: thx. I saw the mention in S05 and didn't really understand

[14:26] *** kanru joined
[14:26] <masak> but I'll go read the S09 mention now and maybe it'll get better

[14:27] <spinclad> a 'zen slice' is an empty slice: @x[], meaning @x[*] (all elements)

[14:27] <masak> hm, yes

[14:29] <spinclad> sorry, not === @x[*], but only the currently defined indices.

[14:29] <masak> yes

[14:30] <masak> would it be reasonable/desirable to disallow certain deep indexings of $/ based on the structure of the regex?

[14:31] *** marmic joined
[14:31] <masak> e.g. $4 is disallowed if there is no fifth group

[14:31] <masak> and $0[0][0] is disallowed if there is no triple nesting in the first group

[14:31] <spinclad> (ick. still haven't said it right. anyone listening, just see S09 for it.)

[14:32] <masak> spinclad: I thought that was it. but I will read S09 carefully

[14:32] <spinclad> s/defined/allocated/

[14:33] *** fmerges left
[14:33] <masak> right.

[14:33] <spinclad> re disallow, that sounds right.

[14:34] <masak> sounds like a natural consequence of regexes becoming more declarative

[14:34] *** Auzon left
[14:38] <cj> spinclad: is this implemented in mp6?

[14:38] <cj> spinclad: also, is there an sprintf in p6?

[14:40] <spinclad> re sprintf: there will be i expect, though not specced yet.

[14:44] <spinclad> :perl6 my $whom = 'world'; say "hello {$x.fmt(%s)}"

[14:44] <spinclad> perl6: my $whom = 'world'; say "hello {$x.fmt(%s)}"

[14:44] <exp_evalbot> kp6: OUTPUT[hello {.fmt(%s)}␤]

[14:44] <exp_evalbot> ..pugs: OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "$x" requires predeclaration or explicit package name␤    at /tmp/d9CBww4ueO line 1, column 35␤]

[14:44] <exp_evalbot> ..rakudo: OUTPUT[No scope found for PAST::Var '$x'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 158 (src/PCT/HLLCompiler.pir:103)␤called from Sub 'parrot;PAST::Compiler;post_children' pc 1117 (src/PAST/Compiler.pir:138)␤called from Sub 'parrot;PAST::Compiler;pirop' pc 1906

[14:44] <exp_evalbot> ..(src/PAST/Compiler.pir:423)␤called from Sub 'parrot;PAST::Compiler;post_child...

[14:44] <cj> panic!!!

[14:44] <spinclad> re implemented in mp6, you mean .fmt?  probably not.  i would not count on any existing implementation (pugs, kp6, rakudo...) being complete, particularly in details like this.

[14:45] <spinclad> (perl6: asks all three)

[14:45] <cj> spinclad: I expected as much.  If there is going to be a perl6 sprintf, I would like to add it to mp6 so that kp6's perl5 emitter work can be generalized

[14:46] <cj> TimToady.push("spec sprintf")

[14:46] <spinclad> perl6: my $whom = 'world'; say "hello {$whom.fmt(%s)}"  # third try

[14:46] <exp_evalbot> kp6: OUTPUT[substr outside of string at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MP6Runtime.pm line 98, <> line 1.␤substr outside of string at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MP6Runtime.pm line 98, <> line 1.␤substr outside of string at

[14:46] <exp_evalbot> ..compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MP6Runtime.pm line 98, <> line 1...

[14:46] <exp_evalbot> ..pugs: OUTPUT[*** ␤    Unexpected ")}\""␤    expecting "::"␤    Variable "%s" requires predeclaration or explicit package name␤    at /tmp/8woZAedi8E line 1, column 45␤]

[14:46] <exp_evalbot> ..rakudo: OUTPUT[hello {world.fmt(%s)}␤]

[14:47] <cj> you screwed up my irssi :)

[14:47] <spinclad> so, none of them.  some don't even do "string {expr}" interpolation

[14:47] <Juerd> wolverian: I have very limited experience with XML processors. I recall that XML::LibXML does it pretty well, but if I were sure it'd be on perluniadvice :)

[14:49] <spinclad> cj: sorry.  i see now i can /msg exp_evalbot for private queries.

[14:49] <cj> spinclad: :)

[14:51] *** rdice joined
[14:52] <spinclad> pugs actually wins

[14:52] <spinclad> pugs: my $x = 'world'; say "hello {$x.fmt('%s')}"

[14:52] <exp_evalbot> OUTPUT[hello world␤]

[14:54] <spinclad> the others miss both {...} and $x.method interpolation

[14:54] *** Lorn joined
[14:56] <spinclad> cj: better to leave mp6 fixed i fancy.  once kp6 bootstraps (come the day), it would make sense enough to add it there.

[14:56] <spinclad> though if it turns out to be easy...

[14:57] <cj>  -- Macro: AC_INIT (PACKAGE, VERSION, [BUG-REPORT], [TARNAME])

[14:57] <cj>      Process any command-line arguments and perform various

[14:57] <cj>      initializations and verifications.

[14:57] <cj> eep.  wrong channel.. sorry

[14:58] *** mattz left
[14:59] <spinclad> i think the intent of mp6 is to be strictly low-level: no interpolation at all; if you want to interpolate, you can paste the string together with ~ yourself.

[15:02] *** mattz joined
[15:06] <cj> spinclad: that's what they're doing now... it seems somewhat painful, but I guess it will work :)

[15:06] * cj makes a patch

[15:06] *** hanekomu_ left
[15:10] *** AndyAway is now known as alester

[15:13] <cj> if I wanted to create a class member (say, $newline), how would I a) declare it and b) reference it from a class method?

[15:20] *** Daveman joined
[15:23] *** GPenguin joined
[15:28] *** bphillips joined
[15:29] *** cognominal_ joined
[15:30] *** cognominal__ left
[15:41] <masak> in the following regex

[15:41] <masak> mm/ mv $0=<file>+ /

[15:41] <masak> what part or feature matches the spaces between files?

[15:42] <[particle1> from STD.pm, token quote:mm { <sym> <quotesnabber(':regex', ':s')> }

[15:43] <[particle1> so, mm// turns on :regex and :sigspace

[15:43] <masak> (hm, maybe none, because the subsequent example in S05 is m/ mv \s+ $<from>=(\S+ \s+)* /)

[15:43] <masak> yes

[15:43] *** [particle1 is now known as [particle]

[15:43] <masak> does that mean that spaces between <file>s are allowed?

[15:43] *** fridim_ joined
[15:43] *** cmarcelo left
[15:44] <masak> in that case, I've underestimated :sigspace

[15:44] <[particle]> i think so, but i'd need to test it to be sure

[15:44] <[particle]> pmichaud: ping

[15:44] <masak> if t'were mm/ mv <file> <file> /, I would not hesitate

[15:44] *** njbartlett joined
[15:44] *** cmarcelo joined
[15:45] <masak> but it's mm/ mv <file>+ /

[15:45] <[particle]> right

[15:48] <pmichaud> pong

[15:49] <pmichaud> $0=<file>+ doesn't match spaces between files (assuming that <file> doesn't eat spaces)

[15:49] <[particle]> ok, so spec bug

[15:49] <masak> that's what I thought

[15:49] <pmichaud> where is that particular instance?

[15:49] <[particle]> should be [<file><.ws>]+

[15:50] <masak> S05:2870

[15:50] <pmichaud> ah, in S05.  I thought we had already fixed those.

[15:50] <[particle]> S05:2648

[15:51] <[particle]> would [<file> ]+ work?

[15:51] <[particle]> probably not

[15:51] <pmichaud> sure, that works

[15:51] <masak> :)

[15:51] <[particle]> wow. dwim++

[15:55] <pmichaud> although I think I'd write it as  [ <file>]+ instead

[15:56] <pmichaud> for clarity it should probably be  [ <file> ]+

[15:57] <masak> would that guarantee that no space is required after the last <file>?

[15:57] <pmichaud> well, the normal meaning of :sigspace is "optional whitespace between tokens"

[15:57] <pmichaud> where it becomes "required whitespace between word tokens"

[15:59] *** orafu left
[15:59] <pmichaud> anyway,  [ <file> ]+  would capture one or more <file>s separated by spaces.  spaces would only be required between pairs of <files> that end/begin with a word character

[16:00] <[particle]> masak++ for spec bug hunting

[16:01] <pmichaud> believe it or not, in this particular case I believe it was proposed that we keep <file>+ even though it's technically incorrect

[16:01] <pmichaud> I'm checking my design team notes

[16:02] <masak> [particle]: I'm trying extra hard to internalize p6 rules right now

[16:03] <masak> pmichaud: I don't see what would be the point of keeping a regex which has been proven non-useful, even if it's just an example

[16:03] <[particle]> without a note about it, at least.

[16:03] <pmichaud> I agree -- that's why I'm re-checking my notes about it

[16:09] *** njbartlett left
[16:10] *** masak left
[16:13] <pmichaud> okay, found the thread, now to re-read it.

[16:14] *** cognominal_ left
[16:16] *** fridim_ left
[16:16] <pugs_svnbot> r19956 | gwern++ | This patch updates pugs-hsregex; it should work with both 6.6 and 6.8.2. However, backwards compatibility requires Cabal versions equal to or greater than 1.2 (so you can use the conditional syntax to change build-dependencies on base).

[16:16] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19956

[16:16] <lambdabot> Title: Changeset 19956 - Pugs - Trac

[16:19] <pugs_svnbot> r19957 | gwern++ | Update HsSyck to merge in the Haddock documentation and the Cabal sdist improvements which constituted 0.3 and 0.4. This version also updates hsSyck to work with modern ByteStrings, bytestring>=0.9.0.1, which is the oldest one packaged with GHC 6.8.x. (You can get this and hsregex on Hackage as well.)

[16:19] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19957

[16:19] <lambdabot> Title: Changeset 19957 - Pugs - Trac

[16:24] <pmichaud> hmmm, I can't find where we had that discussion in my mail archives.  Perhaps it was in a conference call, then.

[16:28] <pmichaud> afk, lunch & errands

[16:31] *** jjore_ left
[16:47] *** macae joined
[16:52] *** kyrbe joined
[16:53] *** pbuetow left
[16:53] *** pbuetow joined
[16:54] *** pbuetow left
[16:54] *** pbuetow joined
[16:56] *** DarkWolf84 joined
[16:59] *** kst joined
[17:03] *** kyrbe left
[17:05] *** cognominal_ joined
[17:11] *** pcbuetow joined
[17:11] *** pcbuetow left
[17:12] *** pbuetow left
[17:12] *** pbuetow joined
[17:13] *** pbuetow left
[17:16] *** pbuetow joined
[17:17] *** Patterner left
[17:17] *** Psyche^ joined
[17:17] *** Psyche^ is now known as Patterner

[17:25] <pugs_svnbot> r19958 | gwern++ | Update HsJudy's bytestring call, also update for split-base. As before, requires a more recent Cabal so can use conditionals, and as before, this package is now also on Hackage. While I was at it, I did some -Wall cleanup

[17:25] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19958

[17:26] *** pbuetow left
[17:26] <lambdabot> Title: Changeset 19958 - Pugs - Trac

[17:27] *** pbuetow joined
[17:34] *** meppl joined
[17:36] *** testing joined
[17:37] *** testing left
[17:38] *** testing_ joined
[17:38] *** testing_ left
[17:42] *** ferrer left
[17:42] *** cathya joined
[17:51] *** GPenguin left
[17:51] *** blindfish joined
[17:53] <pugs_svnbot> r19959 | gwern++ | Cleanup Str.hs and Types.hs, and add necessary bytestring updates

[17:53] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19959

[17:53] <lambdabot> Title: Changeset 19959 - Pugs - Trac

[17:56] *** njbartlett joined
[17:56] <pugs_svnbot> r19960 | gwern++ | Cleanup UTF8.hs for ByteString update

[17:56] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19960

[17:56] <lambdabot> Title: Changeset 19960 - Pugs - Trac

[17:57] *** njbartlett left
[17:57] <pugs_svnbot> r19961 | gwern++ | Update GHC 6.8.1 notes with my observations;

[17:57] <pugs_svnbot> r19961 | gwern++ | Add myself to AUTHORS;

[17:57] <pugs_svnbot> r19961 | gwern++ | Add my favorite book series to READTHEM;

[17:57] <pugs_svnbot> r19961 | gwern++ | Revamp the Pugs.cabal.in. This includes formatting, additional metadata, and adds a dependency on a more recent bytestring (to work with all the preceding patches), and also a Cabal, because we need that oldtime section syntax... for compatibility with GHC 6.6 & 6.8

[17:57] <pugs_svnbot> r19961 | gwern++ | Remove a regexp from util/build_pugs.pl because we can't have backwards compatbility with that old Cabals if we want 6.8.x as well, so it merely messes up the generated Cabal file.

[17:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19961

[17:57] <lambdabot> Title: Changeset 19961 - Pugs - Trac

[18:00] *** mncharity joined
[18:13] *** justatheory joined
[18:23] <mncharity> re sprintf, pugs has it.  it's in src/perl6/Prelude.pm.

[18:23] <mncharity> written a very long time ago to make some pugs t/ pass.

[18:24] <mncharity> wow, gwern++

[18:24] *** meppel-san joined
[18:25] <Gwern-away> don't count your chickens until they hatch; dunno how well my patches work for other peoplpe

[18:25] <mncharity> pugs> sprintf("%03d",4)

[18:26] <mncharity> Gwern-away: regardless, it's nice to see. :)

[18:26] <mncharity> 6: sprintf("%03d",3)

[18:27] <mncharity> (that last is ./misc/pX/Common/redsix/redsix -e 'sprintf("%03d",4)' )

[18:27] <mncharity> re sprintf being not spec'ed, wouldn't it fall under the "everything is the same as p5, unless it isn't" default?

[18:31] *** meppl left
[18:32] *** meppel-san is now known as meppl

[18:33] <spinclad> pugs: sprintf ('%03d', 4)

[18:33] <exp_evalbot> OUTPUT[*** Insufficient arguments to sprintf␤    at Prelude.pm line 668, column 13-53␤]

[18:33] <spinclad> pugs: sprintf('%03d', 4)

[18:33] <exp_evalbot> RESULT[\"004"]

[18:36] <rakudo_svn> r25904 | particle++ | [rakudo] bringing regex/token/rule support closer to correct -- everything still acts like regex

[18:36] <spinclad> re 'same as p5', yes... though we're more or less planning to move away from that dependency, in the long run.

[18:38] *** njbartlett joined
[18:39] *** njbartlett left
[18:40] *** bphillips left
[18:40] <spinclad> s/more or less//

[18:40] <mncharity> :)

[18:42] <spinclad> gwern++  # i'll give it a spin after lunch.  (still at ghc 6.6.1 this week)

[18:43] * mncharity contemplates @fate

[18:44] * spinclad goes off to eat &

[18:44] <TimToady> currently @fate is slightly oversimplified

[18:44] * spinclad lets & contemplate its own @fate

[18:44] * ruoso disturbed after reading about message-passing-concurrency

[18:45] <ruoso> TimToady, have you seen my comments on STM?

[18:45] <TimToady> yes

[18:45] <ruoso> so?

[18:45] <TimToady> I just wanted you to think about it, is all :)

[18:45] <ruoso> but I mean

[18:45] <TimToady> and you did!

[18:46] <ruoso> is the idea of not tracking side-effects at all acceptable?

[18:46] <TimToady> I don't see it in the spec anywhere  :)

[18:46] <ruoso> :)

[18:47] <TimToady> I think in the two layer model the upper layer is more STMish and the bottom layer more Erlangish

[18:47] <TimToady> you've seen the paper on that?

[18:47] *** rdice_ joined
[18:47] *** rdice_ left
[18:48] <ruoso> I've seen Joe Armstrong thesis (chapter 2 only, actually)

[18:48] <ruoso> not thesis, dissertation

[18:48] *** rdice left
[18:48] *** ebassi left
[18:48] <pmichaud> TimToady: (from scrollback)  there was discussion earlier about    mm/ mv <file>+ <file> /   in S05

[18:49] <pmichaud> in particular, the notion that <file>+ doesn't include any separators

[18:49] <ruoso> TimToady, two layer model?

[18:49] <pmichaud> should we fix S05 to read  mm/ mv [ <file> ]+ <file> /    ?

[18:49] * ruoso have his head spinning... so ideas are not getting out in the correct order...

[18:50] <TimToady> pmichaud: no, I just put in a note about assuming <file> is smart

[18:50] <pmichaud> okay, that works then.  thanks.

[18:50] <pmichaud> I agree that having <file>+ makes more sense from an illustrative perspective

[18:51] <TimToady> also decided ** \s+ was okay

[18:51] <TimToady> rather than disallowing quantifiers on the right side

[18:51] <ruoso> TimToady, what paper?

[18:51] <TimToady> I'm trying to remember where it is.

[18:52] <TimToady> it's a Haskell paper about running transactions on top of a monad that runs an event engine underneath

[18:52] <ruoso> ah... that one I certainly didn't see...

[18:53] <TimToady> something you should look at, if we can dig it up

[18:53] <pmichaud> From S05:  "Assume that our file subrule requires a real boundary at that point using..."   Actually, in order for the <file>**{2} and <file>+ examples to work later, the file subrule needs to eat the separators as well, yes?

[18:54] <ruoso> I was thinking, while reading armstrong's dissertation, about how we could mix the erlang's view on the idea of message queue for each object and an OO interpreter view

[18:55] <TimToady> oh, I was gonna change those to <file> ** 2 and forgot

[18:55] <TimToady> <.ws> will certainly eat the whitespace as long as <file> guarantees its there

[18:55] <TimToady> *it's

[18:56] <TimToady> this is my brain on flu, any questions...  :/

[18:56] <pmichaud> right.  perhaps cleaner is to say that "assume that our C<file> subrule handles any separators between elements"

[18:56] <pmichaud> flu--

[18:57] <ruoso> but in the end I realised this is a completely different question... and contend also relates to groups of messages... a problem I don't know if message-passing-concurrency solves

[18:57] <pmichaud> the flu around here cost me two weeks (4 days taking care of sick child, 2 days taking care of myself, six days with sick wife in hospital)

[18:57] <ruoso> but I'm pretty sure that it's very unlikely that we can have haskell-like stm in Perl 6, considering the support for different representations...

[18:59] <pmichaud> time for another errand.  I may be a few minutes late to today's phone call

[18:59] <TimToady> http://www.seas.upenn.edu/~lipeng/homepage/unify.html

[18:59] <lambdabot> Title: Unifying events and threads

[19:00] *** zamolxes left
[19:00] * ruoso will print and read in the way home

[19:00] <TimToady> it's not the paper, but it has a link

[19:00] *** Psyche^ joined
[19:01] <ruoso> yeah... i got it

[19:01] <ruoso> but I think I'm pretty happy with the native-XA idea

[19:01] <ruoso> instead of real STM

[19:02] <TimToady> what is XA?

[19:02] <ruoso> distributed transaction x/open api

[19:03] <TimToady> link?

[19:03] <ruoso> http://en.wikipedia.org/wiki/X/Open_XA

[19:03] <lambdabot> Title: X/Open XA - Wikipedia, the free encyclopedia

[19:04] <ruoso> but the basic idea is, since we can't presume to know the representation of the objects to implement STM,

[19:04] <ruoso> we implement distributed transactions coordinated by the current interpreter

[19:04] <ruoso> using an explicit API

[19:05] <ruoso> so the objects that are XA-aware will be rolled-back or commited...

[19:05] <ruoso> while everything else will simply be repeated

[19:07] <ruoso> so every XA-aware object is understood as a resource manager

[19:07] <ruoso> the contend block is the Application Program

[19:08] <ruoso> anyway...

[19:08] <ruoso> need to go...

[19:08] * ruoso will backlog, as usual...

[19:17] *** Patterner left
[19:17] *** Psyche^ is now known as Patterner

[19:19] *** Aankh|Clone joined
[19:19] <pugs_svnbot> r19962 | gwern++ | Move all uses of pugs-HsSyck to simply HsSyck; it's a package useful for more than Pugs, and this makes it easier to synch with Hackage.

[19:19] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19962

[19:19] <lambdabot> Title: Changeset 19962 - Pugs - Trac

[19:21] *** rdice joined
[19:22] *** Lunchy left
[19:22] *** Lunchy joined
[19:29] *** cognominal_ left
[19:35] *** fridim_ joined
[19:35] *** fridim__ joined
[19:35] *** fridim_ left
[19:36] *** testing joined
[19:36] *** Aankhen`` left
[19:37] *** GPenguin joined
[19:40] *** Aankh|Clone left
[19:56] *** macae left
[20:07] <testing> I'm looking for some help on bitwise operations of strings

[20:09] <testing> is this a good channel for getting help?

[20:10] <[particle]> yes, if you're patient. have you looked at the tests?

[20:10] <PerlJam> testing: and just to check ... this is #perl6, so we're assuming you're talking about perl6 bitwise ops :)

[20:13] <testing> PerlJam: thank you, I just checked and I am using perl5.8, I will move to #perl

[20:21] <TimToady> S02 mentions "identifier extensions" in the section describing adverbial

[20:22] *** jhorwitz joined
[20:25] <TimToady> oops, that was a paste error...

[20:26] *** testing left
[20:38] *** fakename joined
[20:46] *** fakename left
[20:53] <Tene> So, is there a way to operate on an entire array without using all(), any(), none(), etc?

[20:54] <Tene> Similar to a junction, but preserves both order and duplicates?

[20:54] <[particle]> for() ?

[20:54] <Tene> I'm hoping to have something I can just run function($a,$b)

[20:55] <Tene> Which works fine with junctions...

[20:55] <Tene> But fails when there are duplicate results.

[20:55] <Tene> For some definition of "fails"

[20:56] <Tene> I can do it manually using nested for loops.

[20:57] <Tene> I guess I could define an infix operator and use » and «

[21:05] <pmichaud> map?

[21:16] *** ron___ joined
[21:17] <pugs_svnbot> r19963 | lwall++ | [STD] put regex into its own subgrammar

[21:17] <pugs_svnbot> r19963 | lwall++ | eliminate assertstopper kludge in favor of virtual stdstopper

[21:17] <pugs_svnbot> r19963 | lwall++ | make ** separator quantifiable

[21:17] <pugs_svnbot> r19963 | lwall++ | override ws to match only if insignificant

[21:17] <pugs_svnbot> r19963 | lwall++ | significant whitespace is now a metacharacter

[21:17] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/19963

[21:17] <lambdabot> Title: Changeset 19963 - Pugs - Trac

[21:21] <ron___> perl6: say "hello"

[21:21] <exp_evalbot> kp6: OUTPUT[hello␤]

[21:21] <exp_evalbot> ..pugs: OUTPUT[hello␤]

[21:21] <exp_evalbot> ..rakudo: OUTPUT[hello␤]

[21:22] *** chris2 joined
[21:22] <ron___> perl6: sub fizzle ($must_fizzle, :$may_fuzzle) { say "definately time to $must_fizzle"; if ($may_fuzzle) { say "ok - also $may_fuzzle" } else { say "hey - no fuzzling" } } fizzle 'drizzle'; fizzle 'drizzle', 'dazzle'; fizzle 'druzzle', 'dazzle', 'chowder';

[21:22] <exp_evalbot> kp6: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤   KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824cabc)', 'APPLY', 'HASH(0x8e54160)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[21:22] <exp_evalbot> ..main::DISPATCH('HASH(0x824cabc)', 'APPLY', 'HASH(0x8e54160)') ca...

[21:22] <exp_evalbot> ..pugs: OUTPUT[definately time to drizzle␤hey - no fuzzling␤definately time to drizzle␤hey - no fuzzling␤*** No compatible multi variant found: "&fizzle"␤    at /tmp/NHLfTg2eq1 line 1, column 212-249␤]

[21:22] <exp_evalbot> ..rakudo: OUTPUT[Statement not terminated properly at line 1, near "fizzle 'dr"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;Perl6::Grammar;statementlist' pc 15013 (src/gen_grammar.pir:2402)␤called from Sub

[21:22] <exp_evalbot> ..'parrot;Perl6::Grammar;statement_block' pc 12200 (src/gen_grammar.pir:1396)␤called f...

[21:23] *** blindfish left
[21:23] <pmichaud> need a statement terminator after the sub's closing }

[21:24] <ron___> Am a bit of a novice.  Anyone: in pugs how come the second call with two parms is accepted but the third with three is rejected ?

[21:25] <pmichaud> because the sub only accepts two args?

[21:27] <pmichaud> the sub is defined as having one required, one optional (named) argument.

[21:27] <ron___> sorry - confused by named args but think I understand now.

[21:35] <ron___> perl6: sub fizzle ($must_fizzle) { say "definately time to $must_fizzle"; } fizzle 'drizzle'; fizzle 'drizzle', 'dazzle', 'chowder';

[21:35] <exp_evalbot> kp6: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤   KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824ca44)', 'APPLY', 'HASH(0x8e54af4)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[21:35] <exp_evalbot> ..main::DISPATCH('HASH(0x824ca44)', 'APPLY', 'HASH(0x8e54af4)') ca...

[21:35] <exp_evalbot> ..pugs: OUTPUT[definately time to drizzle␤definately time to drizzle␤]

[21:35] <exp_evalbot> ..rakudo: OUTPUT[Statement not terminated properly at line 1, near "fizzle 'dr"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;Perl6::Grammar;statementlist' pc 15013 (src/gen_grammar.pir:2402)␤called from Sub

[21:35] <exp_evalbot> ..'parrot;Perl6::Grammar;statement_block' pc 12200 (src/gen_grammar.pir:1396)␤called f...

[21:35] <TimToady> note that anyone that runs that successfully is not up to spec

[21:36] <[particle]> ron___: try "pugs:" for less noise

[21:36] <TimToady> as pmichaud said, the final } is required to have a ; if you're going to continue on the same line

[21:36] <TimToady> pugs is not correct to assume the ; there

[21:36] <ron___> That only takes one parameter but works with three. 

[21:37] <ron___> pugs: sub fizzle ($must_fizzle) { say "definately time to $must_fizzle"; } ; fizzle 'drizzle'; fizzle 'drizzle', 'dazzle', 'chowder';

[21:37] <exp_evalbot> OUTPUT[definately time to drizzle␤definately time to drizzle␤]

[21:38] <TimToady> that should also not be packing three args into one according to recent spec

[21:38] <[particle]> pugsbugs

[21:38] <ron___> Am a novice - should I take further action?

[21:38] <TimToady> well, that only changed last week, up till then sub foo ($x) made a unary function

[21:39] <TimToady> now it's just a list operator and fails to bind 3 args to one parameter

[21:39] <TimToady> but nobody implements that yet

[21:42] *** ron___ left
[21:48] *** fakename joined
[21:57] *** ron___ joined
[22:00] *** jhorwitz left
[22:01] *** ron___ left
[22:07] *** fakename left
[22:17] *** BinGOs left
[22:18] *** gbacon left
[22:20] *** Schwern joined
[22:23] *** IllvilJa left
[22:31] *** Limbic_Region joined
[22:32] *** wknight-away joined
[22:41] *** cmarcelo left
[22:43] *** cathya left
[22:56] *** alester_ joined
[23:00] *** gwern joined
[23:02] *** njbartlett joined
[23:02] *** BinGOs joined
[23:03] *** njbartlett left
[23:05] *** Gwern-away left
[23:05] *** Psyche^ joined
[23:07] *** fridim__ left
[23:09] *** fakename joined
[23:11] *** rdice left
[23:13] *** njbartlett joined
[23:20] *** nipotaway is now known as nipotan

[23:21] *** Patterner left
[23:21] *** Psyche^ is now known as Patterner

[23:22] *** wknight-away left
[23:23] *** sri_work left
[23:28] *** GPenguin left
[23:28] *** fakename left
[23:40] *** wknight-away joined
[23:54] *** alester_ left
[23:54] *** monomorph left
[23:54] *** Auzon joined
[23:58] *** Jedai joined
