[00:09] <pugs_svnbot> r20680 | Auzon++ | [gsoc_spectest] added some tasks for S29 so I don't forget them later.

[00:09] *** thestarslookdown joined
[00:21] <pugs_svnbot> r20681 | diakopter++ | [yap6]

[00:21] <pugs_svnbot> r20681 | diakopter++ | still diagnosing a very strange (to me) bug in expr...

[00:21] <pugs_svnbot> r20681 | diakopter++ | but lots of cleanup.

[00:51] *** FurnaceBoy joined
[00:54] *** japhb left
[01:00] <bacek> perl6: my Hash $h =  {a => {b => {c => 42}}}; say $h;

[01:00] <exp_evalbot> kp6 r20681: OUTPUT[a    b       c       42␤]

[01:00] <exp_evalbot> ..pugs: OUTPUT[a  b       c       42␤␤␤␤]

[01:00] <exp_evalbot> ..rakudo r28124: OUTPUT[Odd number of elements found where hash expected␤current instr.: 'parrot;List;hash' pc 1801 (src/gen_builtins.pir:1325)␤

[01:00] <exp_evalbot> ..elf r20681: OUTPUT[a    Pair=HASH(0x85e2518)␤]

[01:02] <pmichaud> rakudo doesn't understand { ... } as a hash composer yet.

[01:02] *** Blasi joined
[01:04] <bacek> pmichaud: yes... It treat it as code.

[01:05] <bacek> I can't fudge S29-list/reduce.t... Fudge incorrectly generate skip-count.

[01:06] <pmichaud> which part?

[01:08] <bacek> sub foo

[01:08] <bacek> fudge add one more test

[01:09] *** justatheory left
[01:09] <pmichaud> isn't it just   #?rakudo skip "{} hash composer unimplemented"    

[01:10] <bacek> you can try. And will get   Parse errors: Bad plan.  You planned 11 tests but ran 12.

[01:11] <pmichaud> do you have any other local changes?

[01:11] *** Minthe joined
[01:12] <bacek> pmichaud: yes. I'll commit them in few seconds

[01:12] <pmichaud> please commit and I'll look at it.

[01:12] *** Minthe left
[01:13] <bacek> done

[01:13] <pugs_svnbot> r20682 | bacek++ | [spec] Fudge few tests for rakudo.

[01:14] <bacek> pmichaud: #55368 with fixed List.reduce. It passed S29-list/reduce except num of tests

[01:15] <pmichaud> need to rebuild

[01:16] *** alester left
[01:16] <bacek> to rebuild rakudo? Or patch?

[01:16] <pmichaud> rebuild parrot + rakudo

[01:16] <pmichaud> (doing that now.)

[01:18] <pmichaud> TimToady: I think I'm being really dense (re: "Clarification on S12" thread on p6c)

[01:18] <pmichaud> either I'm not asking the questions right or I'm totally lost on the answers ;-|

[01:19] *** jhorwitz left
[01:22] <pmichaud> bacek:  on my system everything passes

[01:24] <bacek> hmm

[01:24] <pmichaud> just a sec, about to commit 55368

[01:24] <bacek> 11 tests?

[01:24] <pmichaud> yes, 11 tests.

[01:24] <pmichaud> All tests successful, 6 subtests skipped.

[01:24] <pmichaud> Files=1, Tests=11,  4 wallclock secs ( 4.73 cusr +  0.05 csys =  4.78 CPU)

[01:25] *** Ched- left
[01:25] <bacek> pmichaud: great!

[01:25] *** Ched- joined
[01:25] <bacek> may be its problem with perl on MacOSX...

[01:26] *** japhb joined
[01:34] <bacek> #?rakudo 4 skip 'parsefail'

[01:34] <bacek> skip(5, 'parsefail');# {

[01:34] <bacek> this this from reduce.rakudo...

[01:37] <rakudo_svn> r28125 | pmichaud++ | [rakudo]:

[01:37] <rakudo_svn> r28125 | pmichaud++ | * Improved List.reduce (bacek++)

[01:37] <rakudo_svn> r28125 | pmichaud++ | * Patch courtesy Vasily Chekalkin <bacek  at bacek.com>, RT#55368

[01:38] <pmichaud> mine has 

[01:38] <pmichaud> #?rakudo 4 skip 'parsefail'

[01:38] <pmichaud> skip(4, 'parsefail');# {

[01:38] <bacek> pmichaud: strange...

[01:46] *** Limbic_Region left
[01:47] <bacek> when I invoke 't/fudge' it create correct skip(4). But from fudgeall  it generates skip(5)...

[01:52] *** ps_2 left
[01:55] *** Chillance left
[02:15] *** luqui left
[02:18] <bacek> perl6: say [1..10].reduce: { $^a + $^b * $^c };

[02:18] <exp_evalbot> kp6 r20682: OUTPUT[syntax error at position 4, line 1 column 4:␤say [1..10].reduce: { $^a + $^b * $^c }␤    ^ HERE␤]

[02:18] <exp_evalbot> ..pugs: OUTPUT[141␤]

[02:18] <exp_evalbot> ..rakudo r28125: OUTPUT[141␤]

[02:18] <exp_evalbot> ..elf r20682: OUTPUT[Can't call method "reduce" on unblessed reference at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[02:18] <bacek> perl6: say [1..10].reduce: { $^c + $^b * $^a };

[02:19] <exp_evalbot> kp6 r20682: OUTPUT[syntax error at position 4, line 1 column 4:␤say [1..10].reduce: { $^c + $^b * $^a }␤    ^ HERE␤]

[02:19] <exp_evalbot> ..pugs: OUTPUT[10␤]

[02:19] <exp_evalbot> ..rakudo r28125: OUTPUT[12650␤]

[02:19] <exp_evalbot> ..elf r20682: OUTPUT[Can't call method "reduce" on unblessed reference at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[02:20] *** Psyche^ joined
[02:21] <bacek> perl6: say { $^a + $^d }.arity

[02:21] <exp_evalbot> kp6 r20682: OUTPUT[no method 'arity' in Class 'Int'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤      KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x8e5248c)', 'arity') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[02:21] <exp_evalbot> ..main::DISPATCH('HASH(0x8e5248c)', 'arity') called at - line 12␤]

[02:21] <exp_evalbot> ..pugs: OUTPUT[<SubBlock(<anon>)>␤*** No such method in class Bool: "&arity"␤    at /tmp/ci34qN29Sh line 1, column 1 - line 2, column 1␤]

[02:21] <exp_evalbot> ..rakudo r28125: OUTPUT[2␤]

[02:21] <exp_evalbot> ..elf r20682: OUTPUT[Parse error in: /tmp/QQLqReeQBe␤panic at line 1 column 17 (pos 17): Statement not terminated properly␤WHERE: say { $^a + $^d }.arity␤WHERE:                 /\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:355:in `eat_terminator'␤  STD_red/std.rb:269:in `block in

[02:21] <exp_evalbot> ..statementlist'␤  STD_red/prelude.rb:153:in `call'␤  STD_red/pre...

[02:21] *** ron left
[02:22] <bacek> perl6: my $s = sub { $^a + $^d }; say $s.arity;

[02:22] <exp_evalbot> kp6 r20682: OUTPUT[no method 'arity' in Class 'Code'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤     KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x8e52bd8)', 'arity') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[02:22] <exp_evalbot> ..main::DISPATCH('HASH(0x8e52bd8)', 'arity') called at compiled/perl5-kp6-mp6/lib/Kind...

[02:22] <exp_evalbot> ..pugs: OUTPUT[1␤]

[02:22] <exp_evalbot> ..rakudo r28125: OUTPUT[2␤]

[02:22] <exp_evalbot> ..elf r20682: OUTPUT[Global symbol "$d" requires explicit package name at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[02:22] <bacek> its weird... I expect "4"...

[02:23] <[particle]> why? you have two params?

[02:24] *** Patterner left
[02:24] *** Psyche^ is now known as Patterner

[02:28] <bacek> [particle]: 'DWIM' principe... I thinks that $^d is forth param.

[02:29] <[particle]> no no

[02:29] <[particle]> they're taken in alphabetical order

[02:30] <[particle]> rakudo: my $a = sub { $^something + $^some_other_thing }; say $a.arity

[02:30] <exp_evalbot> rakudo r28125 OUTPUT[2␤]

[02:30] <[particle]> would you expect that to be arity 7000000000000000000000000000000000000something?

[02:30] <bacek> [particle]: eek.

[02:31] <bacek> rakudo: say [1..10].reduce: { $^a + $^b * $^c };

[02:31] <exp_evalbot> rakudo r28125 OUTPUT[141␤]

[02:31] <bacek> rakudo: say [1..10].reduce: { $^c + $^b * $^a};

[02:31] <exp_evalbot> rakudo r28125 OUTPUT[12650␤]

[02:31] <bacek> why?

[02:33] <[particle]> because the first argument is the result of the previous call

[02:33] <[particle]> in one case, you add it

[02:33] <[particle]> in the second case, you multiply it

[02:33] <[particle]> $^a

[02:33] <bacek> [particle]: why arguments reordered? 

[02:34] <[particle]> { $^b + $^a } # the first arg goes into the lexicographically-sorted first param ($^a)

[02:34] <[particle]> second arg goes into second lexicographically-sorted param, $^b

[02:35] <[particle]> etc

[02:35] <[particle]> this allows you to use params in an order different from the order in which the args were passed

[02:36] <bacek> [particle]: not very intuitive. what about { $^a + $^Я }? Second arg is 'russian capital ya'

[02:36] <[particle]> unicode codepoint sorted

[02:36] <[particle]> it's in the spec

[02:37] <bacek> [particle]: which one?

[02:37] <[particle]> S06?

[02:37] <[particle]> have to check

[02:37] <bacek> [particle]: I'll read it...

[02:37] <bacek> afk, lunch time...

[02:38] <[particle]> yes, S06:1520

[02:48] *** Psyche^ joined
[02:52] *** alanhaggai joined
[03:00] *** Patterner left
[03:00] *** Psyche^ is now known as Patterner

[03:09] *** Alias_ joined
[03:12] *** BinGOs_ joined
[03:13] *** BinGOs left
[03:49] <Auzon> perl6: say undef.WHAT

[03:50] <exp_evalbot> kp6 r20682: OUTPUT[DISPATCH: calling WHAT on invalid object:$VAR1 = undef;␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤        main::DISPATCH('undef', 'WHAT') called at - line 11␤]

[03:50] <exp_evalbot> ..pugs: OUTPUT[Scalar␤]

[03:50] <exp_evalbot> ..rakudo r28127: OUTPUT[Failure␤]

[03:50] <exp_evalbot> ..elf r20682: OUTPUT[Undef␤]

[03:50] <Auzon> perl6: say undef.defined;

[03:50] <exp_evalbot> kp6 r20682: OUTPUT[DISPATCH: calling defined on invalid object:$VAR1 = undef;␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤     main::DISPATCH('undef', 'defined') called at - line 11␤]

[03:50] <exp_evalbot> ..pugs: OUTPUT[␤]

[03:50] <exp_evalbot> ..rakudo r28127: OUTPUT[Method 'defined' not found for invocant of class 'Failure'␤current instr.: '_block11' pc 37 (EVAL_10:17)␤

[03:50] <exp_evalbot> ..elf r20682: OUTPUT[Can't call method "defined" on an undefined value at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[03:53] *** agentzh left
[04:12] *** eternaleye joined
[04:16] *** sri_work joined
[04:17] *** thestarslookdown left
[04:24] *** mofino left
[04:24] *** xinming left
[04:41] <pugs_svnbot> r20683 | Auzon++ | [gsoc_spectest] Fixed typo in test. 1 modified test.

[04:42] *** luqui joined
[04:44] *** dazjorz left
[04:57] *** alanhaggai left
[05:01] *** xinming joined
[05:02] *** alanhaggai joined
[05:04] *** seagreen100 joined
[05:04] *** BinGOs_ is now known as BinGOs

[05:04] *** seagreen100 left
[05:11] *** nipotan is now known as nipotaway

[05:16] *** agentzh joined
[05:16] *** alanhaggai left
[05:21] *** dazjorz joined
[05:22] *** FurnaceBoy left
[05:22] *** ccube joined
[05:24] *** wknight8111 left
[05:28] *** araujo left
[05:46] *** meppl joined
[05:49] <moritz_> good morning

[05:50] <Auzon> good evening moritz_ :)

[05:53] <moritz_> our common uptime seems to be severly limited by the various time zones ;)

[05:54] <moritz_> Auzon: what's your localtime?

[05:54] <Auzon> mmm... 0053

[05:55] <Auzon> I think I did that right

[05:56] * Auzon usually doesn't use military time. But it's midnight, and I find am/pm to be weird with midnight/noon.

[05:57] <moritz_> ;)

[05:58] <moritz_> in Germany we use only the 0..23 range, but informally we sometimes say "5 o'clock noon"

[05:58] <moritz_> but you virtually never see that written down

[05:59] <Auzon> So you're what? 8 hours ahead of me?

[05:59] <moritz_> 7

[05:59] <moritz_> 7:58 here

[06:00] *** tuxdna joined
[06:03] *** alc joined
[06:05] *** pjcj_ joined
[06:05] *** Alias_ left
[06:05] *** crats left
[06:11] *** pjcj left
[06:26] *** Psyche^ joined
[06:26] *** Patterner left
[06:26] *** Psyche^ is now known as Patterner

[06:42] *** ccube left
[06:57] *** tuxdna left
[07:07] *** pmurias joined
[07:11] *** pmurias left
[07:14] *** iblechbot joined
[07:16] *** Auzon left
[07:17] *** ruoso left
[07:26] <moritz_> pugs: my $a = 1..5; my @b = $a; @b

[07:26] <exp_evalbot> RESULT[[[1, 2, 3, 4, 5],]]

[07:27] <moritz_> pugs: my $a = 1..5; my @b = $a; say @b.elems

[07:27] <exp_evalbot> OUTPUT[1␤]

[07:27] <moritz_> pugs: my $a = 1..5; my @b = $a; say @b[0].WHAT

[07:27] <exp_evalbot> OUTPUT[Array␤]

[07:29] <moritz_> rakudo: say 2, 3, 4..6, 7

[07:29] <exp_evalbot> rakudo r28127 OUTPUT[234567␤]

[07:29] <bacek> pugs: my $a = (1..5); my @b = $a; say 'One '~@b; @b = $a; say 'Two '~@b;

[07:29] <exp_evalbot> OUTPUT[One 1 2 3 4 5␤Two 1 2 3 4 5␤]

[07:33] <pugs_svnbot> r20684 | moritz++ | [t] updated TASKS

[07:45] *** kaether_ joined
[07:49] *** kaether left
[07:49] *** kaether_ is now known as kaether

[07:52] *** araujo joined
[07:54] *** elmex joined
[08:38] *** drbean left
[08:41] *** drbean joined
[08:47] *** meppl left
[08:54] <moritz_> rakudo: say 1 ~~ Num

[08:54] <exp_evalbot> rakudo r28127 OUTPUT[0␤]

[09:00] <moritz_> rakudo: say 1 ~~ Num|Int

[09:00] <exp_evalbot> rakudo r28127 OUTPUT[1␤]

[09:00] <moritz_> wow, I didn't expect that to work ;)

[09:04] <bacek> perl6: say 1 ~~ Item

[09:04] <exp_evalbot> kp6 r20684: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824be0c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[09:04] <exp_evalbot> ..main::DISPATCH('HASH(0x824be0c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[09:04] <exp_evalbot> ..pugs: OUTPUT[1␤]

[09:04] <exp_evalbot> ..rakudo r28127: OUTPUT[Method 'ACCEPTS' not found for invocant of class 'Failure'␤current instr.: 'infix:~~' pc 8638 (src/gen_builtins.pir:5845)␤

[09:04] <exp_evalbot> ..elf r20684: OUTPUT[syntax error at (eval 14) line 3, near "1 ~"␤ at ./elf_f_faster line 4492␤]

[09:04] <moritz_> is class Item specced somewhere?

[09:05] <moritz_> I think TimToady had to rethink if we need it

[09:05] <bacek> moritz_: no idea

[09:05] <moritz_> perl6: say 1 ~~ Any

[09:05] <exp_evalbot> kp6 r20684: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824be0c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[09:05] <exp_evalbot> ..main::DISPATCH('HASH(0x824be0c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[09:05] <exp_evalbot> ..pugs: OUTPUT[1␤]

[09:05] <exp_evalbot> ..rakudo r28127: OUTPUT[1␤]

[09:05] <bacek> perl6: say 1 ~~ Any

[09:05] <exp_evalbot> ..elf r20684: OUTPUT[syntax error at (eval 14) line 3, near "1 ~"␤ at ./elf_f_faster line 4492␤]

[09:05] <exp_evalbot> kp6 r20684: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824be0c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[09:05] <exp_evalbot> ..main::DISPATCH('HASH(0x824be0c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[09:05] <exp_evalbot> ..pugs: OUTPUT[1␤]

[09:05] <exp_evalbot> ..rakudo r28127: OUTPUT[1␤]

[09:05] * moritz_ was faster

[09:05] * bacek drop dead. Moritz was faster

[09:05] <exp_evalbot> ..elf r20684: OUTPUT[syntax error at (eval 14) line 3, near "1 ~"␤ at ./elf_f_faster line 4492␤]

[09:06] <bacek> moritz_: there is some ~~ Item in spectest

[09:06] <bacek> may be we should replace it.

[09:06] <moritz_> spec/S29-list/first.t

[09:06] <bacek> moritz_: exactly

[09:06] <moritz_> thinks so, yes

[09:07] <bacek> moritz_: DONT STEAL MY KARMA!

[09:07] <bacek> I'll fix it :)

[09:07] <moritz_> *lol*

[09:07] *** araujo left
[09:07] <moritz_> bacek: maybe just change it to Int, because that's what it is

[09:08] <moritz_> a test for Any isn't specific enough, because List ~~ Any

[09:09] <bacek> moritz_: died on test8...

[09:10] <bacek> heh

[09:10] <bacek> rakudo: say 1 ~~ Num

[09:10] <exp_evalbot> rakudo r28127 OUTPUT[0␤]

[09:10] <bacek> this is the problem :)

[09:10] <moritz_> that's why I said "Int, because that's what it is"

[09:11] <moritz_> rakudo: say Int ~~ Num

[09:11] <exp_evalbot> rakudo r28127 OUTPUT[0␤]

[09:11] <bacek> rakudo: say 1.0 ~~ Num

[09:11] <moritz_> Int is a subset of Num, not is a Num

[09:11] <exp_evalbot> rakudo r28127 OUTPUT[1␤]

[09:11] <bacek> rakudo: say 1.0 ~~ Float

[09:11] <exp_evalbot> rakudo r28127 OUTPUT[Method 'ACCEPTS' not found for invocant of class 'Float'␤current instr.: 'infix:~~' pc 8638 (src/gen_builtins.pir:5845)␤

[09:11] <bacek> yeek

[09:12] <moritz_> that's rakudoesk for "not Type 'Float' found"

[09:12] <moritz_> there's no Float in the specs

[09:13] <bacek> moritz_: yep. 

[09:13] <pugs_svnbot> r20685 | bacek++ | [spec] Replace ~~Item with ~~Int.

[09:14] <bacek> now we can add S29-list/first.t to spectest_regression

[09:14] <moritz_> not for me

[09:14] <moritz_> 1..9

[09:14] <moritz_> Method 'ACCEPTS' not found for invocant of class 'Failure'

[09:15] <moritz_> (make localtest)++

[09:15] <moritz_> uhm, wtf?

[09:15] <moritz_> now it works

[09:16] <moritz_> bacek: ok, send patch ;)

[09:18] * bacek thinks that update_passing_test_data.pl should output diff for spectest_regression.data

[09:18] <bacek> :)

[09:18] *** penk joined
[09:22] <bacek> Ok. TIme to go home

[09:22] <bacek> moritz_: canyou check S29-list/map_multy.t? It works for me

[09:23] <bacek> And grep.t aswell.

[09:23] <moritz_> bacek: will do (later today)

[09:23] <bacek> ok

[09:23] <bacek> see ya in couple of hours

[09:24] *** bacek left
[09:24] <moritz_> there's no map_mult(i|y).t

[09:27] *** luqui left
[09:31] *** araujo joined
[09:32] *** araujo left
[09:33] *** araujo joined
[09:43] *** masak joined
[09:43] <pugs_svnbot> r20686 | pmurias++ | [elf] pointed out more distastfull deviations from Perl 6 in the elf code base

[09:43] *** pmurias joined
[09:44] <moritz_> "distastefull deviations" nice description ;)

[09:44] <masak> http://en.wikipedia.org/wiki/Alliteration

[09:48] *** vsoni joined
[09:48] *** vsoni left
[09:48] *** ruoso joined
[09:54] *** b_jonas joined
[09:56] <b_jonas> ruby-1.8.7 came out last week

[09:56] <b_jonas> I'm installing it now

[09:56] <moritz_> b_jonas: cross-poster ;)

[09:56] <b_jonas> yeah

[09:56] <masak> what is elf, actually?

[09:56] <masak> I seem to have missed it among all implementations

[09:56] <moritz_> masak: yet another Perl 6 compiler

[09:57] <b_jonas> the executable format or the creature?

[09:57] <masak> moritz_: what's it do?

[09:57] <masak> I mean, in what way is it special?

[09:57] <moritz_> masak: it consists of a ruby translation of STD.pm

[09:57] <masak> ah, now I remember

[09:57] <moritz_> masak: and is bootstrapped with a Perl 5 backend (excpet the parsing)

[09:57] <masak> does ruby have grammars?

[09:58] <moritz_> don't think so

[09:59] <masak> then what was the advantage of translating STD.pm to ruby?

[09:59] <masak> why not perl 5, say?

[10:00] <moritz_> "escape bootstrapping hell"

[10:00] <moritz_> so when your emitter breaks something, the parser doesn't

[10:00] <moritz_> at least I think that was mncharity's reason

[10:00] <masak> ok

[10:02] *** orafu joined
[10:04] *** b_jonas_ joined
[10:04] *** mj41__ joined
[10:05] *** b_jonas left
[10:05] *** penk left
[10:05] *** drbean left
[10:05] *** iblechbot left
[10:05] *** agentzh left
[10:05] *** jan_ left
[10:05] *** rakudo_svn left
[10:05] *** nekobaka left
[10:05] *** cognominal_ left
[10:05] *** mj41 left
[10:05] *** vixey left
[10:05] *** mj41__ is now known as mj41

[10:07] *** drbean joined
[10:07] *** alc left
[10:07] *** b_jonas_ is now known as b_jonas

[10:09] *** rakudo_svn joined
[10:10] *** jan_ joined
[10:10] *** cognominal_ joined
[10:10] *** jan_ is now known as jan

[10:12] *** vixey joined
[10:19] *** b_jonas left
[10:21] *** agentzh joined
[10:26] *** penk joined
[10:27] *** sri_work left
[10:44] <moritz_> evalbot control version

[10:44] <exp_evalbot> This is evalbot revision 20674

[10:44] <moritz_> evalbot control restart

[10:44] *** exp_evalbot left
[10:44] <moritz_> evalbot control version

[10:44] *** exp_evalbot joined
[10:44] <exp_evalbot> This is evalbot revision 20686

[10:47] *** bacek joined
[11:05] *** wknight8111 joined
[11:39] *** alanhaggai joined
[11:41] *** wknight8111 left
[11:49] *** iblechbot joined
[12:07] *** barney joined
[12:12] *** alanhaggai left
[12:27] *** pen1 joined
[12:27] <pmurias> masak: why not perl5 than, i would guess mncharity likes ruby more than perl5

[12:28] <pmurias> moritz_:  "bootstraping hell" is a problem untill you're bootstraped

[12:29] <moritz_> pmurias: probably better re-phrase "recompilation hell"

[12:30] <pmurias> having a bootstraped grammar would be preferable, mncharity considered it, but it would be lots of boring work

[12:31] <pmurias> being boostraped is a positive quality, once your compiler isn't extremely doggy

[12:32] <moritz_> und unless it slows down too much

[12:32] <moritz_> s/^u/a/

[12:33] *** cjfields joined
[12:33] <cjfields> purl, bugs?

[12:34] <cjfields> bugs?

[12:34] <moritz_> no purl in #perl6 ;)

[12:34] <cjfields> ah, forgot which list I was on.

[12:34] <pmurias> s/doggy/dodgy/

[12:37] *** penk left
[12:49] *** alanhaggai joined
[13:02] *** lichtkind joined
[13:03] <lichtkind> moritz_: did you understand the concept of slurpy blocks?

[13:04] *** cjfields left
[13:04] *** pmurias left
[13:06] <rakudo_svn> r28129 | pmichaud++ | [rakudo]:

[13:06] <rakudo_svn> r28129 | pmichaud++ | * Handling cloning of ranges (RT#55400, bacek++)

[13:06] <rakudo_svn> r28129 | pmichaud++ | * Patch courtesy Vasily Chekalkin <bacek  at bacek.com>

[13:06] <rakudo_svn> r28129 | pmichaud++ | * Minor modifications by Pm

[13:09] *** corneliu2_ joined
[13:11] *** penk joined
[13:12] *** pen1 left
[13:22] <avar> pmichaud: is there a svn web thingy where one can view commits for rakudo?

[13:23] <pmichaud> avar: yes

[13:23] <pmichaud> it's the same as for parrot -- just a sec

[13:23] <pmichaud> http://www.parrotvm.org/svn/parrot/revision?rev=28129

[13:23] <lambdabot> Title: revision: /parrot (Rev: 28129, via SVN::Web)

[13:25] <avar> nomn nom nom

[13:25] *** wknight8111 joined
[13:25] *** sri_work joined
[13:26] <pmichaud> pugs:  my $a = 1..5;    for =$a { say $_; };    say $a;

[13:26] <exp_evalbot> OUTPUT[1␤2␤3␤4␤5␤1 2 3 4 5␤]

[13:27] *** TJCRI joined
[13:29] <moritz_> lichtkind: I know blocks with slurpy sigs - do you mean that?

[13:35] *** cmarcelo joined
[13:35] *** eternaleye left
[13:45] *** alester joined
[13:50] *** penk left
[13:50] *** penk joined
[13:51] *** jhorwitz joined
[13:51] *** alanhaggai left
[14:04] *** alanhaggai joined
[14:15] *** pen1 joined
[14:15] *** penk left
[14:15] <ruoso> pmichaud, did my last message on p6-compiler exposed the problem you were looking for?

[14:16] <pmichaud> ruoso: yes, many thanks.  Very well explained.

[14:19] <nothingmuch> ruoso: ditch work!

[14:20] <ruoso> :)

[14:28] *** mofino joined
[14:30] *** corneliu2_ left
[14:39] *** cmarcelo left
[14:44] *** chris2 joined
[14:50] *** cjfields joined
[14:57] *** fglock joined
[14:58] <fglock> hi!

[14:58] <moritz_> welcome back fglock ;)

[14:59] <fglock> moritz_: it's nice to be back :)

[14:59] *** vixey left
[15:02] *** dazjorz left
[15:03] <ruoso> fglock, hey :)

[15:04] <fglock> hi ruoso! how was your trip?

[15:04] <ruoso> nice... thanks... 

[15:05] <fglock> going home - I'll try to reconnect later &

[15:05] *** fglock left
[15:16] <cjfields> pugs: "ABC-DEF".trans(("- AB..Z" => "_ a..z"))

[15:16] <exp_evalbot> RESULT["abc_def"]

[15:17] *** sscaffidi joined
[15:25] <rakudo_svn> r28140 | Whiteknight++ | [Rakudo] update builtins to use ".namespace []" instead of ".namespace", as per #48549

[15:29] <rakudo_svn> r28141 | Whiteknight++ | [Rakudo] update classes to use ".namespace []" instead of ".namespace", as per #48549

[15:33] *** cjfields_ joined
[15:48] *** elmex left
[15:49] *** cjfields left
[15:58] *** cjfields_ is now known as cjfields

[16:10] *** barney left
[16:13] *** justatheory joined
[16:15] *** cosimo left
[16:16] *** Arathorn joined
[16:24] *** jferrero joined
[16:27] <moritz_> pugs: given (2) { say "yes" when 2 }

[16:27] <exp_evalbot> OUTPUT[*** ␤    Unexpected "when"␤    expecting operator, ":", "," or "}"␤    at /tmp/VIRe1UFRaJ line 1, column 23␤]

[16:27] <moritz_> pugs: given (2) { say "yes" when 2; }

[16:27] <exp_evalbot> OUTPUT[*** ␤    Unexpected "when"␤    expecting operator, ":", "," or "}"␤    at /tmp/8OePiLTMuQ line 1, column 23␤]

[16:27] <moritz_> ok, pugs doesn't allow when as a statement modifier

[16:32] <moritz_> rakudo: say |(1, 2, 3)

[16:32] <exp_evalbot> rakudo r28145 OUTPUT[␤get_bool() not implemented in class 'Junction'␤current instr.: 'parrot;PCT::HLLCompiler;command_line' pc 1288 (src/PCT/HLLCompiler.pir:688)␤

[16:32] <moritz_> pugs: say |(1, 2, 3)

[16:32] <exp_evalbot> OUTPUT[123␤]

[16:33] <[particle]> seems rakudo doesn't have prefix:|

[16:33] <[particle]> or is it the |() op?

[16:34] <moritz_> prefix:|

[16:35] <diakopter> wow; that was almost trivial

[16:36] <moritz_> diakopter: what, adding prefix:| to yap6?

[16:36] <diakopter> (adding infinite recursion detection to the recursive-descent-parser framework)

[16:36] * diakopter pats self on the back

[16:38] <diakopter> i'm surprised mjd didn't include it himself

[16:38] <moritz_> diakopter: I think there is something like that in HOP

[16:38] <moritz_> diakopter: at least for head-recursion

[16:38] <moritz_> (or is that called left-recursion? dunno)

[16:40] *** masak left
[16:40] <diakopter> there isn't something like that in the parser chapter.. it might be in the regex chapter

[16:41] <pugs_svnbot> r20687 | diakopter++ | [yap6]

[16:41] <pugs_svnbot> r20687 | diakopter++ | added infinite recursion detection to the parser

[16:41] <pugs_svnbot> r20687 | diakopter++ | fixed the expr rule problem from earlier

[16:41] <diakopter> anyway, I like my implementation :)

[16:41] <pugs_svnbot> r20687 | diakopter++ | moved some generic parser generator functions to Parser.pm

[16:41] <pugs_svnbot> r20687 | diakopter++ | merged in some more functions from HOP::Lexer to Lexer.pm

[16:41] <diakopter> moritz_: how soon before exp_evalbot updates its svn

[16:41] <[particle]> diakopter: can you add the svn diff links back to *_svnbot?

[16:41] <[particle]> i guess moritz_ could do it, too

[16:41] <diakopter> 11:35:37 < moritz_> (or is that called left-recursion? dunno)

[16:41] <diakopter> argh; mispaste again

[16:42] <moritz_> evalbot control restart

[16:42] *** exp_evalbot left
[16:42] <diakopter> stupid putty/rightmouseclick

[16:42] *** exp_evalbot joined
[16:42] <moritz_> evalbot control version

[16:42] <exp_evalbot> This is evalbot revision 20687

[16:42] *** nipotaway is now known as nipotan

[16:42] <moritz_> diakopter: lucky you ;)

[16:42] <diakopter> [particle]: I had it that way a few months ago but folks here complained that they didn't want them

[16:42] <moritz_> [particle]: people tend to use the links in the irc logs when they have a browser open anyway

[16:43] <[particle]> oh

[16:44] <[particle]> well, the most important links to me are for rakudo anyway, and i get those next door

[16:44] <moritz_> (at least I do some, and since I got very positive feedback after adding those I guess I'm not the only one)

[16:44] <pugs_svnbot> r20688 | diakopter++ | [yap6]

[16:44] <pugs_svnbot> r20688 | diakopter++ | fixing my dumb typos

[16:44] <diakopter> evalbot control version

[16:44] <exp_evalbot> This is evalbot revision 20687

[16:45] <moritz_> diakopter: btw the svn updates every three minutes

[16:45] <moritz_> sorry, 5

[16:45] *** olmazeg joined
[16:46] <diakopter> [particle]: what, you don't like to read my piddly commit diffs? :P

[16:46] <moritz_> yap6: say 42+3

[16:46] *** exp_evalbot left
[16:46] <diakopter> hee

[16:46] *** exp_evalbot joined
[16:46] <moritz_> Segmentation fault

[16:46] <diakopter> r20689 works

[16:47] <diakopter> evalbot control version

[16:47] <exp_evalbot> This is evalbot revision 20688

[16:47] <diakopter> evalbot control svnupdate

[16:48] <moritz_> diakopter: it can't do that, it doesn't have write permissions

[16:49] <diakopter> it could mark a semaphore file somewhere the updater controller can read?

[16:50] <moritz_> that would be possible

[16:50] <moritz_> (but not as easy as the other operations so far)

[16:52] <[particle]> diakopter: that's exactly what i wanted to do! to keep track of you and ruoso and fglock etc

[16:53] <pugs_svnbot> r20689 | diakopter++ | [yap6]

[16:53] <pugs_svnbot> r20689 | diakopter++ | removed more tracing cruft

[16:53] <[particle]> it's hard for me to manage 17 open ff tabs

[16:53] <moritz_> yap6: say 2+42

[16:53] *** exp_evalbot left
[16:53] *** exp_evalbot joined
[16:53] <moritz_> uhm, wtf does evalbot segfault?

[16:53] <[particle]> rakudo: say "hi"

[16:53] <exp_evalbot> rakudo r28145 OUTPUT[hi␤]

[16:53] <[particle]> yap6: say 1

[16:53] *** exp_evalbot left
[16:54] <[particle]> heh

[16:54] *** exp_evalbot joined
[16:54] <diakopter> evalbot control version

[16:54] <exp_evalbot> This is evalbot revision 20688

[16:55] <moritz_> rakudo: say 1

[16:55] <exp_evalbot> rakudo r28145 OUTPUT[1␤]

[16:55] <diakopter> pugs: say { say 3; };

[16:55] <exp_evalbot> OUTPUT[<SubBlock(<anon>)>␤]

[16:57] <diakopter> moritz_: yap6 won't parse say 42+3 yet because it doesn't yet do longest token matching.

[16:59] <moritz_> why doest it need LTM for parsing that?

[17:00] <diakopter> b/c it matches 42 as an expression

[17:00] <diakopter> and therefore plus(expr(say 42),3) doesn't parse

[17:01] <moritz_> why not?

[17:01] <moritz_> say 42 is also a valid expression ;)

[17:01] * diakopter follows the trace output

[17:03] *** ruoso left
[17:07] *** kaether_ joined
[17:07] <diakopter> oh.  hrm. :/

[17:09] <moritz_> if you rely on LTM for getting the precedence right you'll need exponential time in the number of tokens at worst

[17:11] <diakopter> moritz_: ok; thanks

[17:11] *** kaether left
[17:11] *** kaether_ is now known as kaether

[17:12] * moritz_ remembers reading about a cool interpreter with mutable syntax that did roughly that...

[17:12] <moritz_> nice paper

[17:12] <moritz_> the drawbacks were that it took about a minute to start the interpreter and parse/compile the prelude

[17:13] <diakopter> heh

[17:14] <Juerd> moritz_: Did you know who was behind tnx.nl/php? :)

[17:15] <moritz_> Juerd: no. you?

[17:15] <Juerd> Yea :)

[17:15] <moritz_> a whois is helpful ;)

[17:15] <diakopter> moritz_: oh... I see what I did wrong... alternate() shouldn't have infinite recursion detection, but concatenate() should.

[17:16] <diakopter> I just assumed.... instead of thinking through it :)

[17:16] <moritz_> (btw that virtual machine already did JITting - it was a few minutes before ;)

[17:17] <pugs_svnbot> r20690 | diakopter++ | [yap6]

[17:17] <pugs_svnbot> r20690 | diakopter++ | remove infinite recursion detection from alternate()

[17:22] <diakopter> btw, as of yesterday yap6 only outputs whether parse succeeded or failed.

[17:23] <moritz_> yap6: say 1

[17:23] <exp_evalbot> OUTPUT[Parse successful␤]

[17:23] <moritz_> ok

[17:23] <moritz_> yap6: say 1+2*3

[17:23] <exp_evalbot> OUTPUT[Parse successful␤]

[17:23] <moritz_> yap6: say(1+2*3,4)

[17:23] <exp_evalbot> OUTPUT[  Syntax Error near: "say"]

[17:23] <moritz_> yap6: say(1)

[17:23] <exp_evalbot> OUTPUT[Parse successful␤]

[17:24] <moritz_> yap6: say(1,2)

[17:24] <exp_evalbot> OUTPUT[  Syntax Error near: "say"]

[17:24] <diakopter> it doesn't do commas yet

[17:24] <moritz_> ok, no lists yet

[17:24] <diakopter> yap6: say(1+2*3**4)

[17:24] <exp_evalbot> OUTPUT[Parse successful␤]

[17:25] <diakopter> evalbot control version

[17:25] <exp_evalbot> This is evalbot revision 20688

[17:25] <moritz_> diakopter: that version is only evalbot's version, not yap6's

[17:25] <moritz_> kp6: say 0

[17:25] <exp_evalbot> kp6 r20690: OUTPUT[0␤]

[17:25] <moritz_> that's the svn repo's revision

[17:25] <diakopter> oh ok

[17:26] <moritz_> bbl &

[17:31] <diakopter> yap6: say 42+3+5+(((((((((((((((((((((((((((((((((say 4))))))))))))))))))))))))))))))))))

[17:31] <exp_evalbot> OUTPUT[  Syntax Error near: ")"]

[17:31] <diakopter> yap6: say 42+3+5+(((((((((((((((((((((((((((((((((say 4)))))))))))))))))))))))))))))))))

[17:31] <exp_evalbot> OUTPUT[Parse successful␤]

[17:32] <diakopter> yap6: my $sub1=multi sub { 4+5; my $q = 4452; say $q }

[17:32] <exp_evalbot> OUTPUT[Parse successful␤]

[17:43] <Khisanth> lisp? :P

[17:47] *** Southen joined
[17:54] *** iblechbot left
[18:17] *** meppl joined
[18:23] *** iblechbot joined
[18:24] *** ruoso joined
[18:29] <diakopter> I'm realizing that what I'm currently working on in yap6 is only a lexer with a little bit of syntax checking.  Full syntax checking will need to occur in another pass.

[18:30] <diakopter> well, semantics checking.

[18:49] *** sri_work left
[18:55] <ruoso> diakopter, even syntax is not that simple... because BEGIN code might change the future syntax...

[18:55] <ruoso> nothingmuch, around?

[19:00] <nothingmuch> iishish

[19:00] * nothingmuch is reasing

[19:00] <nothingmuch> reading

[19:00] <nothingmuch> before napping

[19:01] <diakopter> ruoso: right, so when the current parser detects something that changes the future syntax, the new parser is swapped in

[19:01] <ruoso> diakopter, the parser have a runtime state that is changeable

[19:01] <ruoso> it's not a new parser

[19:02] <ruoso> it's the same parser that morphs

[19:02] <diakopter> I mean, the morphed parser is swapped in for the rest of the parsing unit

[19:03] <diakopter> I meant "new parser" just to mean one that's even slightly different from the current

[19:03] <ruoso> nothingmuch, if cog's around, could you please ask him some suggestions on what I could do tomorrow between 5 am and someone getting up....

[19:03] *** chris2 left
[19:04] <ruoso> diakopter, i see... it's the same parser, but the changes are always localized (or not)

[19:05] *** wilx` joined
[19:05] <diakopter> ruoso: I've been talking about parse-time.  but you're saying the grammar can be changed arbitrarily at runtime, from some arbitrary IO... which means the parsing unit will need to be parsed just like an arbitrary eval

[19:06] <diakopter> so there's another parse-time

[19:06] <diakopter> what I've called a parsing unit

[19:06] <ruoso> BEGIN is at parse time

[19:06] <diakopter> in other words, BEGIN is parsed as the first parsing unit

[19:07] <diakopter> BEGIN had better occur before the new-syntax-code in the file, then. :) ...

[19:08] <diakopter> because otherwise it means, when the parser encounters the BEGIN block, it should immediately parse, semantic check, type check, compile/run/interpret the contents of the block, and apply any grammar changes as instructed.

[19:09] <ruoso> exactly

[19:09] <diakopter> and then somehow go back and parse stuff occuring before the BEGIN block with the new grammar

[19:09] <ruoso> exactly

[19:10] <diakopter> so which is it... can a BEGIN block affect syntax preceding it?  or not?

[19:10] <ruoso> preceding, i don't think so

[19:10] *** meppl left
[19:10] <diakopter> ok; that's all I meant by "BEGIN had better occur before the new-syntax-code in the file, then."

[19:11] <ruoso> yes

[19:11] <ruoso> :)

[19:12] <diakopter> alright, that's straightforward to implement in the yap6 framework

[19:13] <diakopter> (b/c all the data structures are streams, even the [imagined] AST and IR/IL

[19:13] <diakopter> )

[19:13] <ruoso> lazy parsing?

[19:13] <ruoso> that's a new one

[19:13] <ruoso> :)

[19:16] <diakopter> bbiaw

[19:20] *** wknight8111 left
[19:25] *** wilx` left
[19:35] <diakopter> moritz_: after studying it more, [operator] precedence levels should also be straightforward.  Each precedence level gets its own rule, with the shape of the rule representing the affixedness of the operator

[19:35] <diakopter> Each level is chained to the other

[19:36] <diakopter> where there are multiple shapes for a given precedence level, each is part of an alternative()

[19:36] <diakopter> alternate()

[19:45] <pugs_svnbot> r20691 | diakopter++ | [yap6]

[19:45] <pugs_svnbot> r20691 | diakopter++ | added a dieif() parser generator, which dies on success with the

[19:45] <pugs_svnbot> r20691 | diakopter++ | provided message.  Useful for implementing the deprecation errors

[19:45] <pugs_svnbot> r20691 | diakopter++ | in STD.pm.

[19:45] <pugs_svnbot> r20691 | diakopter++ | Added lots of syntax from S11 & S10

[19:45] <pugs_svnbot> r20691 | diakopter++ | removed two of the lexing categores (newline/usev6).  WS is next. :)

[19:45] <pugs_svnbot> r20691 | diakopter++ | Fixed some more precedence problems

[19:49] <diakopter> please, anyone, feel free to correct the inefficiencies represented in my very crude Perl 5 skills in yap6... I'm sure I have suboptimal algorithms & bad design all over the place.

[19:53] <diakopter> moritz_: and then, each operator precedence level includes as its last option the next higher precedence level, so expressions that don't include all of the precedence levels still work. :)

[19:58] <diakopter> for instance, see "rule op_numaddt" and "rule term" at http://www.parrotvm.org/svn/pugs/blame/misc/yap6/src/lib/Perl6in5/Grammar/STD_hand.pm

[19:58] <lambdabot> Title: blame: /pugs/misc/yap6/src/lib/Perl6in5/Grammar/STD_hand.pm (Rev: HEAD, via SVN: ..., http://tinyurl.com/6dxmbg

[20:01] <diakopter> hmm, now to choose an overload operator that represents "concatenate but with no intervening whitespace"  how about +

[20:02] <diakopter> yap6: my$a=3;

[20:02] <exp_evalbot> OUTPUT[Parse successful␤]

[20:02] <diakopter> heh

[20:04] <diakopter> yap6: package Bar { my $fee; multi method foo { say$fee;}; multi method blue { say 2234 } }

[20:04] <exp_evalbot> OUTPUT[Parse successful␤]

[20:05] <wolverian> yap6: package Bar {

[20:05] <exp_evalbot> OUTPUT[  Syntax Error near: "package"]

[20:05] <wolverian> well, near enough :)

[20:12] <diakopter> yap6: say say say 4; say (say (say (say (23+23432/2234+2234**5666))))

[20:12] <exp_evalbot> OUTPUT[Parse successful␤]

[20:16] <xinming> yap6: say if say if say if say if 0;

[20:16] <exp_evalbot> OUTPUT[  Syntax Error near: "if"]

[20:17] <xinming> yap6: say "hello" if 1;

[20:17] <exp_evalbot> OUTPUT[  Syntax Error near: "\""]

[20:17] <diakopter> xinming: it doesn't know "if" yet :)

[20:17] <xinming> err... Not implemented. :-)

[20:17] <diakopter> nor quotes :)

[20:17] <moritz_> diakopter: do you have a plan for context-sensitve lexing yet?

[20:18] <diakopter> such as quotes?

[20:18] <diakopter> or whatever the new name for qq{} is

[20:18] <diakopter> or <>

[20:18] <moritz_> quotes, regexes

[20:18] <moritz_> <...> are quotes in p6

[20:19] <diakopter> yep; just like the other rules... a recursive hierarchy of detection rules

[20:20] <diakopter> but when a parser enters a quoted region,  things are redefined... well actually, the parsers for the grammar variants are generated before parsing begins

[20:20] <diakopter> it's because of the several layers of indirection

[20:20] <diakopter> $base vs $base vs base()

[20:20] <diakopter> $base vs $Base vs base()

[20:21] <moritz_> how does that work with look-aheads?

[20:22] <diakopter> so, if " doesn't trigger a grammar shift within <>, it's treated just as bare text.

[20:22] <moritz_> I mean what happens with a lookahead into a part of a string that's handled by a different lexer?

[20:23] <diakopter> hey, how it's implemented by the thing that generates grammars from STD.pm is another question... I'm just concerned with parsing STD.pm... and I'm not convinced lookaheads are needed for that.

[20:24] <diakopter> what are lookaheads even used for in STD.pm?  I bet there's a way to represent the rule that doesn't need them...

[20:25] <moritz_> ok, I'll stop bugging you with non-productive questions ;)

[20:25] <diakopter> or, converts them to recursive descent syntax

[20:27] <diakopter> oh.  there's a much easier way to do infinite recursion detection.

[20:28] <diakopter> (so that degenerate grammars can be specified)

[20:28] <moritz_> actually most grammars that have a lookahead of $n can be reduced to a grammar of 1

[20:28] <moritz_> s:last/grammar/lookahead/

[20:28] <diakopter> that's what I intuitively figured

[20:28] <moritz_> and 1 token lookahead is no problem, because it doesn't go past DSL boundaries

[20:29] <moritz_> because each DSL boundary knows that it is one

[20:29] *** SamB left
[20:44] *** lichtkind_ joined
[20:45] <diakopter> actually, there wouldn't be another parsing "step", per se... the semantic checking would be done by the lexhandlers (one for each rule).

[20:46] <diakopter> s/step/pass/

[20:46] *** alanhaggai_ joined
[20:49] <diakopter> in the new syntax, "-" will continue to mean concatenate, but it also means with intervening whitespace allowed.  "+" will mean no whitespace allowed.

[20:52] * ruoso going to braga &

[20:52] *** ruoso left
[21:02] *** lichtkind left
[21:02] *** alanhaggai left
[21:15] *** meppl joined
[21:19] *** japhb left
[21:34] *** TJCRI left
[21:34] *** IllvilJa left
[21:39] *** sscaffidi left
[21:50] *** cjfields left
[21:52] *** IllvilJa joined
[21:55] <meppl> good night

[21:55] <diakopter> gnight

[21:56] <meppl> ;)

[21:57] *** meppl left
[21:59] * diakopter !home

[22:03] *** dolmen joined
[22:06] *** alester left
[22:07] <dolmen> perl6: my $a of int;

[22:07] <exp_evalbot> kp6 r20691: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bfb4)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[22:07] <exp_evalbot> ..main::DISPATCH('HASH(0x824bfb4)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[22:07] <exp_evalbot> ..pugs: OUTPUT[*** ␤    Unexpected "of"␤    expecting "?", "!", trait, "=", infix assignment or operator␤    at /tmp/ns2orSs70f line 1, column 7␤]

[22:07] <exp_evalbot> ..rakudo r28145: OUTPUT[Statement not terminated properly at line 1, near "of int;"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[22:07] <exp_evalbot> ..elf r20691: OUTPUT[Unknown rule: trait_verb:fulltypename␤It needs to be added to ast_handlers.␤ at ./elf_f_faster line 2674␤]

[22:07] <dolmen> perl6: my @a of int;

[22:07] <exp_evalbot> kp6 r20691: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bf1c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[22:07] <exp_evalbot> ..main::DISPATCH('HASH(0x824bf1c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[22:07] <exp_evalbot> ..pugs: OUTPUT[*** ␤    Unexpected "of"␤    expecting "?", "!", trait, "=", infix assignment or operator␤    at /tmp/vs6JNJwwge line 1, column 7␤]

[22:07] <exp_evalbot> ..rakudo r28145: OUTPUT[Statement not terminated properly at line 1, near "of int;"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[22:07] <exp_evalbot> ..elf r20691: OUTPUT[Unknown rule: trait_verb:fulltypename␤It needs to be added to ast_handlers.␤ at ./elf_f_faster line 2674␤]

[22:13] *** REPLeffect_ joined
[22:17] *** iblechbot left
[22:28] <dolmen> perl6: my $a of Int;

[22:28] <exp_evalbot> kp6 r20691: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bfb4)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[22:28] <exp_evalbot> ..main::DISPATCH('HASH(0x824bfb4)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[22:28] <exp_evalbot> ..pugs: OUTPUT[*** ␤    Unexpected "of"␤    expecting "?", "!", trait, "=", infix assignment or operator␤    at /tmp/La5bRJxF90 line 1, column 7␤]

[22:28] <exp_evalbot> ..rakudo r28145: OUTPUT['of' not implemented at line 1, near ";"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[22:28] <exp_evalbot> ..elf r20691: OUTPUT[Unknown rule: trait_verb:fulltypename␤It needs to be added to ast_handlers.␤ at ./elf_f_faster line 2674␤]

[22:29] <moritz_> still not implemented ;)

[22:30] *** SamB joined
[22:34] *** lichtkind_ left
[22:49] <rakudo_svn> r28146 | pmichaud++ | [rakudo]:

[22:49] <rakudo_svn> r28146 | pmichaud++ | * Fix .list and !flatten so they don't generate clones of the elements.

[22:49] <rakudo_svn> r28146 | pmichaud++ | * This also fixes Range.WHAT.

[22:55] *** REPLeffect_ left
[22:57] <dolmen> rakudo: say (1..2).WHAT;

[22:57] <exp_evalbot> rakudo r28146 OUTPUT[Range␤]

[22:57] <dolmen> rakudo: say (1..2).perl;

[22:57] <exp_evalbot> rakudo r28146 OUTPUT[1..2␤]

[22:57] <dolmen> rakudo: say (1..*).WHAT;

[22:57] <exp_evalbot> rakudo r28146 OUTPUT[Range␤]

[22:57] <dolmen> rakudo: say (1..*)[3];

[22:58] <exp_evalbot> rakudo r28146 OUTPUT[get_pmc_keyed() not implemented in class 'Range'␤current instr.: '_block11' pc 58 (EVAL_13:23)␤

[22:58] <dolmen> rakudo: say (1..8)[3];

[22:58] <exp_evalbot> rakudo r28146 OUTPUT[get_pmc_keyed() not implemented in class 'Range'␤current instr.: '_block11' pc 52 (EVAL_13:23)␤

[22:58] <dolmen> rakudo: say ((1..8)[3]);

[22:58] <exp_evalbot> rakudo r28146 OUTPUT[get_pmc_keyed() not implemented in class 'Range'␤current instr.: '_block11' pc 52 (EVAL_13:23)␤

[22:58] <dolmen> rakudo: say ((1..8)[0..3]);

[22:58] <exp_evalbot> rakudo r28146 OUTPUT[get_integer() not implemented in class 'Range'␤current instr.: 'parrot;Perl6Object;new' pc 337 (src/gen_builtins.pir:227)␤

[23:03] <dolmen> rakudo: my @a=1..8; say @a[0..3];

[23:03] <exp_evalbot> rakudo r28146 OUTPUT[get_integer() not implemented in class 'Range'␤current instr.: 'parrot;Perl6Object;new' pc 337 (src/gen_builtins.pir:227)␤

[23:03] <dolmen> rakudo: my @a=1..8;

[23:03] <exp_evalbot> rakudo r28146 RESULT[[1, 2, 3, 4, 5, 6, 7, 8]]

[23:03] <dolmen> rakudo: my @a=1..8; say @a[0..3].perl;

[23:03] <exp_evalbot> rakudo r28146 OUTPUT[get_integer() not implemented in class 'Range'␤current instr.: 'parrot;Perl6Object;new' pc 337 (src/gen_builtins.pir:227)␤

[23:03] <dolmen> rakudo: my @a=1..8; say @a[3].perl;

[23:03] <exp_evalbot> rakudo r28146 OUTPUT[4␤]

[23:03] <dolmen> rakudo: my @a=1..8; say @a[2,3].perl;

[23:03] <exp_evalbot> rakudo r28146 OUTPUT[3␤]

[23:04] <dolmen> rakudo: my @a=1..8; say @a[2].perl;

[23:04] <exp_evalbot> rakudo r28146 OUTPUT[3␤]

[23:04] <dolmen> rakudo: my @a=1..8; say @a[3].perl;

[23:04] <exp_evalbot> rakudo r28146 OUTPUT[4␤]

[23:04] <dolmen> rakudo: my @a=1..8; say @a[2,7].perl;

[23:04] <exp_evalbot> rakudo r28146 OUTPUT[3␤]

[23:04] <dolmen> rakudo: my @a=1..8; say @a[2.7].perl;

[23:04] <exp_evalbot> rakudo r28146 OUTPUT[3␤]

[23:04] <dolmen> rakudo: my @a=1..8; say @a[2.0].perl;

[23:04] <exp_evalbot> rakudo r28146 OUTPUT[3␤]

[23:04] <dolmen> rakudo: my @a=1..8; say @a[2.01].perl;

[23:04] <exp_evalbot> rakudo r28146 OUTPUT[3␤]

[23:12] *** corneliu2_ joined
[23:23] *** dolmen left
[23:37] *** corneliu2_ is now known as c9s

[23:39] *** eternaleye joined
[23:41] *** vixey joined
[23:42] *** xinming_ joined
[23:58] *** xinming left
