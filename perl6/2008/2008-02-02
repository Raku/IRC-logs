[00:04] *** gbacon left
[00:04] *** gbacon joined
[00:08] <meppl> good night

[00:10] *** jeffreykegler left
[00:10] *** Schwern joined
[00:11] *** meppl left
[00:30] *** BinGOs_ left
[00:30] *** BinGOs joined
[00:51] *** BinGOs left
[00:57] *** Schwern left
[01:03] *** rindolf joined
[01:04] *** cmarcelo left
[01:09] *** devogon left
[01:17] *** tobeya left
[01:27] *** pasteling joined
[01:27] *** cnhackTNT joined
[01:31] *** dduncan joined
[01:31] *** alester joined
[01:47] *** japhb left
[01:49] *** japhb joined
[01:55] *** rindolf left
[01:57] *** alester left
[01:58] *** alester joined
[02:05] *** namelessuser left
[02:30] *** cmarcelo joined
[02:37] *** justatheory joined
[03:19] *** peeps_ joined
[03:27] *** Auzon left
[03:35] *** justatheory left
[03:36] *** chacha_chaudhry joined
[03:45] *** charsbar joined
[03:49] *** rindolf joined
[03:58] *** alester left
[03:58] *** jjore joined
[04:04] *** peeps_ is now known as peepsalot

[04:08] *** cnhackTNT left
[04:09] *** dduncan left
[04:09] *** njbartlett left
[04:09] *** [particle] left
[04:09] *** zev left
[04:09] *** smtms left
[04:09] *** charsbar left
[04:09] *** gbacon left
[04:09] *** silug left
[04:09] *** lisppaste3 left
[04:09] *** allbery_b left
[04:09] *** kane_ left
[04:09] *** Khisanth left
[04:09] *** dmq left
[04:09] *** dmq joined
[04:09] *** gbacon joined
[04:10] *** charsbar joined
[04:11] *** GeJ joined
[04:11] *** djm joined
[04:11] *** bphillips joined
[04:12] *** broquaint joined
[04:12] *** bloonix joined
[04:16] *** chacha_chaudhry left
[04:16] *** kane_ joined
[04:17] *** qmole joined
[04:18] *** mugwump joined
[04:19] *** nnunley joined
[04:19] *** dduncan joined
[04:19] *** njbartlett joined
[04:19] *** [particle] joined
[04:19] *** zev joined
[04:19] *** smtms joined
[04:19] *** Helios- joined
[04:19] *** jrockway joined
[04:19] *** mofino joined
[04:19] *** shachaf joined
[04:19] *** yahooooo joined
[04:19] *** tcliou joined
[04:20] *** thestarslookdown joined
[04:24] *** Khisanth joined
[04:26] *** alester joined
[04:26] *** allbery_b joined
[04:27] *** OuLouFu joined
[04:38] *** rindolf left
[04:43] *** pbuetow left
[04:43] *** pbuetow joined
[04:44] *** orafu left
[05:15] *** manfred joined
[05:21] *** alester left
[05:26] *** japhb left
[05:48] *** kanru joined
[05:49] *** cmarcelo left
[05:50] *** lisppaste3 joined
[05:54] *** japhb joined
[06:02] *** macroron joined
[06:02] *** broquain1 joined
[06:03] *** broquaint left
[06:06] *** alester joined
[06:07] *** thestarslookdown left
[06:17] *** silug joined
[06:26] *** cnhackTNT joined
[07:01] *** macroron left
[07:16] *** alester left
[07:22] *** alester joined
[07:27] *** Auzon joined
[07:35] *** alester left
[07:54] *** Aankhen`` joined
[08:00] *** IRSeekBot left
[08:02] *** IRSeekBot joined
[08:22] *** devogon joined
[08:50] *** iblechbot joined
[08:57] *** BinGOs joined
[09:18] *** rindolf joined
[09:27] *** cosimo_ joined
[09:41] *** cosimo_ left
[09:44] *** riffraff joined
[10:11] *** cnhackTNT left
[10:47] *** Aankh|Clone joined
[10:47] *** blindfish joined
[10:50] *** meppl joined
[10:54] *** ruoso joined
[10:55] *** cognominal__ joined
[10:55] *** cognominal_ left
[11:05] *** Aankhen`` left
[11:08] *** Aankh|Clone left
[11:14] *** chris2 joined
[11:15] *** Aankhen`` joined
[11:19] *** monomorph joined
[11:22] *** barney joined
[11:31] *** dduncan left
[11:33] *** Jedai joined
[11:34] *** Aankhen`` left
[11:35] *** luqui joined
[11:46] *** chris2 left
[11:55] *** Belaf joined
[11:57] <pugs_svn> r19792 | ruoso++ | [smop] Now only one subtest is failing. I still have memory leaks, but I think they come from the sm0p nodes not being destroyed.

[12:16] <pugs_svn> r19793 | ruoso++ | [smop] adding two more trace messages...

[12:16] <ruoso> now it shows every alloc and free... sums the leaks in the end

[12:22] <rakudo_svn> r25427 | bernhard++ | [Rakudo]

[12:22] <rakudo_svn> r25427 | bernhard++ | Clean up src/utils/Makefile

[12:22] *** jiing left
[12:26] *** jiing joined
[13:24] *** luqui left
[13:30] *** cognominal_ joined
[13:31] *** cognominal__ left
[13:40] * ruoso found a way to break one of the bootstrap infinite loops. CPS destruction won't happen for the SLIME and NATIVE objects...

[13:42] *** Alias_ joined
[13:44] *** pbuetow left
[13:45] *** pbuetow joined
[13:50] *** zamolxes joined
[14:02] <pugs_svn> r19794 | cosimo++ | [t/spec/S16] Fudged chmod :todo tests

[14:03] <pugs_svn> r19795 | cosimo++ | [t/spec/S16] More fudging of :todo tests

[14:28] *** pbuetow left
[14:29] *** barney left
[14:37] *** pbuetow joined
[14:49] *** pcbuetow joined
[15:14] *** pbuetow left
[15:31] *** pcbuetow is now known as pbuetow

[15:57] *** alester joined
[15:58] <rakudo_svn> r25432 | jonathan++ | [rakudo] Very preliminary work on inheritance. Doesn't work unless you declare classes in reverse order, due to an ordering change in the PAST -> POST translation phase.

[16:07] *** Aankhen`` joined
[16:15] *** Psyche^ joined
[16:15] *** meppl left
[16:17] *** meppl joined
[16:23] *** xinming_ joined
[16:25] *** pbuetow left
[16:26] *** alester left
[16:27] *** Patterner left
[16:27] *** Psyche^ is now known as Patterner

[16:28] *** Aankhen`` left
[16:29] *** Aankhen`` joined
[16:37] *** rindolf left
[16:41] <TimToady> crumb, I just figgered out that binding should be <- and list assignment should be :=

[16:42] *** Aankh|Clone joined
[16:48] <peepsalot> i'm reading the perl6 faq, and I don't understand the method that perl6 would use to interpret this example:  if 1 <= $roll1 === $roll2 <= 6 { say "You rolled doubles!"; }

[16:48] *** kanru left
[16:49] <TimToady> that's an extension of the normal mathematical notation 1 <= $roll <= 6 

[16:49] <TimToady> with the additional constraint that both rolls have to be the same

[16:50] <TimToady> you can string together as many comparisons as you like in p6 that way

[16:50] <peepsalot> yeah, i think i got it right after I wrote it out

[16:50] <TimToady> otherwise you'd have to write

[16:50] <TimToady> okay, nevermind

[16:51] <TimToady> I don't want to write it out... :)

[16:51] <TimToady> although it shouldn't really be using === there when == would do

[16:51] <monomorph> there: 1 <= $roll1 and $roll1 == $roll2 and $roll2 <= 6

[16:51] <peepsalot> i will... so it's equivalent to:  (1 <= $roll1) && ($roll1 === $roll2) && ($roll2 <= 6)

[16:52] <monomorph> except that $roll1 is only evaluated once, i think

[16:55] <peepsalot> ok, thanks

[16:58] <monomorph> what was that remark about <- and := ? a joke i didn't get?

[17:00] *** Aankhen`` left
[17:01] *** pbuetow joined
[17:02] *** cognominal_ left
[17:03] *** pbuetow left
[17:05] <TimToady> no, it's a serious proposal to do away with the arcane disambiguation rules in S03's description of assignment

[17:09] <monomorph> this is about precedence in my @foo = 1, 2, 3 vs. my $foo = 1, $bar = 2, $baz = 3 right?

[17:12] <TimToady> yes

[17:13] <TimToady> the proposal is that = always be tighter than , and := always be looser

[17:13] <TimToady> (assuming the theft of := from binding)

[17:13] *** justatheory joined
[17:14] *** riffraff left
[17:15] <rhr_> what would ::= and =:= become?

[17:15] *** justatheory left
[17:15] <TimToady> ::= could be <<= but I dunno about =:=

[17:15] <monomorph> =><=

[17:15] <TimToady> <->

[17:15] <TimToady> oh wait... :)

[17:16] <TimToady> actually, <-> would work, I think

[17:16] <TimToady> it's <=> that wouldn't

[17:17] <TimToady> on the other hand, could just be VAR($x) === VAR($y) with no loss of clarity

[17:17] <TimToady> so we could probably just do away with =:=, cute though it is

[17:18] <TimToady> I can be a ruthless sob at times...

[17:18] <rhr_> that's true, I haven't seen much use for it

[17:18] <TimToady> biggest Q is how to get there from here, I think...

[17:19] <TimToady> first need to invent <-

[17:19] <TimToady> then switch all := to <-

[17:19] <TimToady> and when all platforms are clear of :=, switch that to list assignment

[17:19] <monomorph> <<= looks like left-shift assignment, even though it isn't in Perl6

[17:19] <TimToady> sure, shift all these values left and bind them :)

[17:19] *** devogon left
[17:20] <rhr_> <<= or <<- ?

[17:20] *** pbuetow joined
[17:20] <TimToady> <<-

[17:20] <TimToady> <<= is undefined currently, though <<== and <== are

[17:20] <TimToady> alas, we can't use <= for binding

[17:21] <peepsalot> why do zip and each functions separate parameters with semicolons instead of commas?

[17:21] <TimToady> so you can say zip(1,2,3;4,5,6)

[17:21] <TimToady> pugs: 1,2,3 Z 4,5,6

[17:22] <exp_evalbot> RESULT[((1, 4), (2, 5), (3, 6))]

[17:22] <peepsalot> oh

[17:23] <peepsalot> pugs: zip(1,2,3;4,5,6)

[17:23] <exp_evalbot> RESULT[((1, 2, 3, 4, 5, 6),)]

[17:23] <peepsalot> uh

[17:23] <TimToady> pugs is not up to date there

[17:24] <TimToady> it had an old zip from before we invented slice contexts (S09)

[17:25] <peepsalot> pugs: 1,2,3 Z 4,5,6 Z 7,8,9

[17:25] <exp_evalbot> RESULT[((1, 4, 7), (2, 5, 8), (3, 6, 9))]

[17:25] <TimToady> pugs: 1,2,3 X 4,5,6 X 7,8,9

[17:25] <exp_evalbot> RESULT[((1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 6, 7), (1, 6, 8), (1, 6, 9), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 6, 7), (2, 6, 8), (2, 6, 9), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 6, 7), (3, 6, 8), (3,

[17:25] <exp_evalbot> ..6, 9))]

[17:26] <monomorph> stop, you're gonna break it!

[17:26] <peepsalot> heh

[17:26] <TimToady> pugs: die

[17:26] <exp_evalbot> OUTPUT[*** Died␤    at /tmp/kj1oCGfM83 line 1, column 1 - line 2, column 1␤]

[17:26] <peepsalot> brutal

[17:26] <TimToady> pugs: die "again"

[17:26] <exp_evalbot> OUTPUT[*** again␤    at /tmp/iTmynkEZGZ line 1, column 1 - line 2, column 1␤]

[17:27] <monomorph> poor pugs

[17:29] *** cognominal_ joined
[17:29] <monomorph> so what about $a < -$b, space required before minus?

[17:29] <TimToady> yes

[17:29] <TimToady> but it's already required before

[17:29] <TimToady> or you have a postfix .<>

[17:30] <TimToady> I think people will already be consistently putting whitespace around their comparisons

[17:30] <TimToady> (and hopefully most other infix operators)

[17:30] <monomorph> *i* do that in any language

[17:32] <monomorph> crazy idea: if := is list assignment, make = list binding. it's available then, has the right precedence, and is consistent with how array assignment behaves in every language in widespread use except perl.

[17:32] <TimToady> er, binding already is list binding

[17:33] <TimToady> oh, you mean thrown out assignment :)

[17:33] <TimToady> *throw

[17:34] <TimToady> ain't gonna happen, I don't think

[17:34] <TimToady> assignment is important for distinguishing value semantics from reference semantics

[17:34] <monomorph> i mean that @a = @b could do what @a := @b does know, because @a := @b already does what @a = @b does now. not a serious proposal, just a quick idea

[17:35] <TimToady> @a = @b should *copy* the value of @b, not make @a and @b identical

[17:35] <lambdabot> Maybe you meant: activity activity-full admin all-dicts arr ask . ? @ v

[17:35] <TimToady> the fact that other languages confuse them results in FAQs for those languages

[17:36] <monomorph> that's true

[17:39] <monomorph> i like how @foo *is* an array, as opposed to *points to* an array

[17:39] *** zamolxes left
[17:40] <TimToady> well, it does both, depending on the operator, just as $x can be either numeric or string depending on the operator

[17:40] <monomorph> :)

[17:41] <peepsalot> pugs: my @a = 1,2,3,4; say @a;

[17:41] <exp_evalbot> OUTPUT[1234␤]

[17:41] <TimToady> but that's why we can get away with saying that p6 doesn't have references; it does, but it's all hidden away most of the time

[17:42] <peepsalot> pugs: my @a = (1,2,3,4); say @a;

[17:42] <exp_evalbot> OUTPUT[1234␤]

[17:42] <TimToady> you'd either have to use parens or := under the new regime

[17:44] *** [particle] left
[17:45] <peepsalot> the download link on pugscode.org is busted, what gives?

[17:45] <TimToady> well, actually, you could also say my @a = list 1,2,3,4

[17:48] <TimToady> dunno, something's busted on rakudo maybe

[17:49] <TimToady> but since rakudo is now the official name of parrot's perl6 implementation, we should probably redirect pugs download elsewhere

[17:49] <TimToady> just to avoid confusion

[17:52] <TimToady> afk & # errands

[18:03] *** [particle] joined
[18:05] *** drrho joined
[18:08] *** mncharity joined
[18:13] <peepsalot> what's the difference between "make" and "make soon" for pugs?

[18:13] *** sri_work joined
[18:24] *** icwiener joined
[18:24] *** jferrero joined
[18:33] *** rindolf joined
[18:42] *** Limbic_Region joined
[18:43] *** sri_work left
[18:52] <spinclad> so to  C< for @rhs -> lhs {...} >  we now give a converse,   C< lhs <- rhs; ... >.  this suggests C< foronce rhs -> lhs {...} >, or C< let rhs -> lhs {...} >, or would just C< rhs -> lhs {...} > be possible?  

[18:58] <spinclad> peepsalot: 'make soon' builds pugs unoptimized and unthreaded.

[18:58] <peepsalot> ok thx

[19:01] <spinclad> (re just C< rhs -> lhs {...} >):  of course not, that would be two terms in a row.

[19:02] <spinclad> (iiuc)

[19:12] *** literal joined
[19:19] *** DarkWolf84 joined
[19:19] *** sri_work joined
[19:28] * cognominal_ suddemly realize that the synopsis is not a prescriptive but descriptive. It attempts to describe how the people will use the language insteads

[19:28] <nothingmuch> spinclad: -> $foo {  } is a sub declaration IIRC

[19:28] <cognominal_> ... of prescribing how they should use it.

[19:28] <cognominal_> s/synopsis/synopses/

[19:29] <cognominal_> TimToady++

[19:30] <cognominal_> I suppose what he does is a capital crime in many circles.

[19:31] <cognominal_> linguist should be barred from computers... :)

[19:39] *** pmurias joined
[19:39] <pmurias> ruoso: hi

[19:43] <mncharity> ok, I'm puzzled.

[19:44] <Juerd> nothingmuch: It's a sub, not a 'declaration' iiuc

[19:44] <mncharity> am looking over misc/pX/Common/yet_another_regex/engine and it's README.

[19:44] <Juerd> cognominal_: My perception is that it is a bit of both

[19:46] <mncharity> it was written just under a year ago now.  and has largely been untouched since.

[19:46] <nothingmuch> Juerd: it doesnt' declare a named sub, you mean?

[19:46] <spinclad> nothingmuch: sure, a pointy block.  appears in C<< for <expr> <pblock> >>, and C<< <expr> <pblock> >> would be two terms side by side.

[19:46] <mncharity> it was passing perl5's re_tests, various similar p6 tests, and could be run as pugs's regex engine against the full pugs t/regex tests.

[19:46] <spinclad> (pointy block / pointy sub)

[19:46] <mncharity> fully backtracking, had commits, etc.

[19:47] <nothingmuch> spinclad: that is my understanding anyway

[19:47] *** cognominal__ joined
[19:47] <mncharity> though still missing lots of p6 rx support.

[19:47] <spinclad> nothingmuch: mine too

[19:48] <mncharity> code could use refactoring.  but code forking for refactoring was set up to be trivial, and was documented.

[19:48] <Juerd> nothingmuch: It "declares" as much as [] does for an array (still iiuc)

[19:48] <mncharity> it would seem to have been an obvious path to make STD work.

[19:48] *** cognominal_ left
[19:48] <mncharity> so... why hasn't it been touched since last year?

[19:49] <nothingmuch> Juerd: erm, i don't follow

[19:49] <Juerd> nothingmuch: IOW: yes :)

[19:49] <mncharity> (not understanding that, I doubt my ability to predict what will actually help us make progress towards xmas)

[19:50] <mncharity> so, yes.  /me puzzled.

[19:51] <spinclad> mncharity: it's possible once audrey got swallowed by $life, and TimToady took up the use of pugs, that noone was around and active and aware of yet_another_regex/engine.

[19:53] <spinclad> *yet_another_regex_engine

[19:54] <mncharity> http://svn.perl.org/perl6/pugs/trunk/misc/pX/Common/yet_another_regex_engine/

[19:54] <lambdabot> Title: Revision 14497: /pugs/trunk/misc/pX/Common/yet_another_regex_engine, http://tinyurl.com/yrdj69

[19:56] *** edenc left
[19:57] <mncharity> the README does suggest audrey seem to be coming back, which was part of why it got backburnered in favor of hs.  but TT was working on STD at the time.  so if lack of awareness is part of it, then the mechanism seems more likely to have been forgetting, rather than not originally knowing of it, no?

[20:01] <mncharity> err, that's odd.  is  http://svn.perl.org/  currently active?   it seems to have a significantly older version of README than I'm getting via svn up.

[20:01] <lambdabot> Title: Subversion Server - perl.org

[20:02] <wolverian> it doesn't seem to be updated.

[20:02] <spinclad> sadly, i wasn't aware of it (mostly offline around then).  can't speak for TT; ISTM he's been the only relevant party besides you (and audrey) in this.

[20:04] <pmurias> ruoso: is sm0p grammar intended to be diffrent from kp6's

[20:05] <mncharity> re http://svn.perl.org/perl6/ , yeah, 14497 vs 19795.  Does anyone know how to poke or kill off svn.perl.org/perl6?

[20:05] <lambdabot> Title: Revision 14497: /

[20:06] <pmurias> * different

[20:07] <mncharity> http://svn.pugscode.org/pugs/misc/pX/Common/yet_another_regex_engine/   <- "current" version

[20:07] <lambdabot> Title: Revision 19795: /misc/pX/Common/yet_another_regex_engine, http://tinyurl.com/2d96yh

[20:07] <pmurias> mncharity: it might have been the issue of Pugs::Compile::Rule taking the attention

[20:12] <pmurias> s/taking/getting/

[20:20] <spinclad> mncharity: [while i'm looking at its log: r15355 has an interesting log entry: 'Fixed one _very_ long standing "thinko" bug with repetition.  It dated back to the original regex engine spike a year ago.  So there are many variants of it scattered around Common. :('  Do you recall if you or others propagated this to relevant other engines?]

[20:21] <mncharity> re PCR, ok, that looks plausible.  PCR continues to be active (cpan shows updates through Nov'07).  and my fuzzy recollection is pugs uses PCR by default?  so pugs provides the test suite.

[20:22] *** macroron joined
[20:26] <mncharity> re thinko, my very fuzzy recollection is not completely.  but also the belief that it didn't matter, because none of them were being used anyway.  I believe all of fglock's work was unaffected, because he never wanted to extensively use anon subs, and so ended up with an independent code base.

[20:28] <rakudo_svn> r25446 | jonathan++ | [rakudo] Initial implementation of roles and compile time role composition. Has an ordering issue, as with the inheritance patch earlier, which may be a PAST -> POST translation bug. Simply compiles to use Parrot's role implementation directly.

[20:32] *** lichtkind joined
[20:32] <mncharity> re PCR, so... why hasn't STD ended up running on PCR?

[20:36] <mncharity> ie, why isn't  PCR+STD (with p6 code transliterated to p5) == full p6 parser running on p5?

[20:37] <lichtkind> @seen fglock

[20:37] <lambdabot> I haven't seen fglock.

[20:40] *** lichtkind left
[20:43] <spinclad> mncharity: good questions.  answers may lie in lack of project 'management' on this side of the pugs/parrot divide.  TT has written STD and shepherded it through pugs on his own.  (more)

[20:47] <spinclad> counter-question:  how can we get people in place to be aware of resources (code and people) and make these connections?

[20:48] * mncharity tries to picture web-based project management software to support anarchistic development...

[20:48] <mncharity> lol.  re counter-question, ^^

[20:49] <mncharity> more seriously, hmm... pondering...

[20:51] <spinclad> parrot has #parrotsketch, the Perl 6 project as a whole has a weekly phone call... who here could take part in that?

[20:51] *** LionWRK joined
[20:52] *** rindolf left
[20:52] <wolverian> LionWRK here is interested in making a perl6 compiler, though I don't know the specifics. please welcome him :)

[20:53] <LionWRK> heh hi

[20:53] <Auzon> Hi.

[20:53] <spinclad> welcome LionWRK.  where are you coming from, and where do you want to go?

[20:53] <LionWRK> nowhere / somewhere

[20:53] <Auzon> mncharity: it sounds like a wiki updated by the project leaders or maybe automatically (something like an SVN bot?)

[20:54] <Auzon> mncharity: there's also Hiveminder, which is awesome, but we never really used it

[20:55] <Auzon> I use Hiveminder for one of my own projects (plus my classwork) and it's great. I dunno how it'd scale with the amount of tasks that Perl 6 has, but it might be worth  a look since we have a group there already.

[20:57] <spinclad> LionWRK: are you aware of the various compilers already in what we like to think of as progress?

[20:57] <spinclad> pugs, kp6, rakudo

[20:58] *** araujo joined
[20:58] <spinclad> built on haskell, mp6/perl, and nqp/parrot respectively

[20:58] <LionWRK> spinclad,  yes

[20:58] <LionWRK> what interested me was the talk about perl6 on the CLR

[20:59] <LionWRK> it's mostly out of personal interest in writing compilers, which I've never done

[21:01] <pmurias> LionWRK: do you want do something from scratch or a backend?

[21:04] *** devogon joined
[21:05] <spinclad> or frontend work on adapting the P6 STD grammar to the various compilers?

[21:05] *** macroron left
[21:05] *** macroron joined
[21:05] *** macroron left
[21:06] <spinclad> kp6 has perhaps the most relevant plugin architecture currently for CLR backend work

[21:08] <spinclad> also needs middle-end work, as it were, to make it more useable

[21:09] <spinclad> kp6 and rakudo are largely written in P6 dialects

[21:10] *** acmoore joined
[21:11] <mncharity> re project management pondering, one observation is we seem to currently have a much easier task at present than originally.  more a minor matter of implementation, than the original 'design a language and implement it'.  even if the p6 language spec continues to change,

[21:11] <ruoso> pmurias, hi...

[21:11] <ruoso> sm0p grammar is just a macro expander

[21:11] <ruoso> and it's already working :)

[21:12] <spinclad> mncharity: agree

[21:12] *** drrho left
[21:13] <pmurias> ruoso: that's great

[21:13] <mncharity> as it may well need to once there starts to be real usage experience (a 5.999+i imaginary series?), there seems enough spec around to make it plausible one could now implement a p6-like language implementation, with a reasonable expectation it could easily track subsequent evolution.

[21:14] <ruoso> pmurias, almost all smop tests are passing now

[21:14] <ruoso> I'm just finishing the review on the refcount usage

[21:14] <ruoso> and I think I'll have the smop runtime bootstrapped

[21:15] <spinclad> and we have some tools built: nqp seems to be much nicer to work with than bare parrot, and mp6/kp6 in a similar position on the perl5/lisp/[other backend] side

[21:15] *** Aankh|Clone left
[21:15] <LionWRK> I haven't given that level of thought to it really

[21:16] <spinclad> that is, we have a couple such implementations going already

[21:16] <LionWRK> I'd start from scratch most likely though

[21:16] <ruoso> pmurias, after that, we'll be able to implement the p6opaque SMOP__ResponderInterface

[21:16] <ruoso> which is the default object system for Perl 6

[21:18] <ruoso> pmurias, take a look and run make -f Makefile.cvs build-world in smop

[21:19] *** explorer__ joined
[21:19] *** explorer__ left
[21:19] <spinclad> LionWRK: from scratch a plan might be:  look at STD and P6 regex language, build a regex engine, steal parts of existing compilers to build one you like

[21:20] *** jferrero left
[21:21] <spinclad> this might not be well distinguished from plugging in to existing compilers, but could have a different scope and focus

[21:21] *** jferrero joined
[21:21] <wolverian> do we have definitions of the various acronyms and such somewhere?

[21:21] <wolverian> e.g. STD 

[21:22] <obra> I believe pmichaud put together just such a thing

[21:22] * wolverian looks on teh wiki

[21:22] <wolverian> s/teh/the/

[21:22] <ruoso> wolverian, obra, I think the wiki has it

[21:23] <wolverian> http://www.perlfoundation.org/perl6/index.cgi?glossary_of_perl_6_terms_and_jargon is one, but doesn't have STD

[21:23] <lambdabot> Title: Glossary of Perl 6 Terms and Jargon / Perl 6, http://tinyurl.com/ytvdje

[21:24] <pmurias> ruoso: 1 failure here

[21:25] <wolverian> hum, I can't edit the wiki

[21:25] <wolverian> it stays at "Loading editor..." 

[21:26] <wolverian> I do have js enabled

[21:26] <ruoso> pmurias, yep.. just one :)... and that's a good thing

[21:27] <ruoso> it means that smop is almost bootstrapping its runtime

[21:27] <spinclad> STD appears to stand for 'proposed STanDard Perl 6 grammar in standard Perl 6' (or is that STandarD ?)

[21:28] <ruoso> and I can truly say that *everything* in smop is an object... including the interpreter...

[21:30] <Auzon> How far along does that put smop?

[21:30] <wolverian> could someone else add it to the wiki, since I can't? it's probably because I use ubuntu hardy, which has the development version of my browser, which isn't quite stable yet..

[21:30] <ruoso> Auzon, far enough to start implementing a backend for it in kp6 in a very short time

[21:31] <Auzon> so kp6 -> smop -> code runs?

[21:31] <ruoso> Auzon, yep

[21:32] <spinclad> smop++

[21:33] <spinclad> ( wolverian: don't know if i have access, will try )

[21:33] <wolverian> spinclad, thanks! 

[21:33] <wolverian> spinclad++

[21:33] <wolverian> it's very important to have the terminology accessible to newcomers

[21:34] <spinclad> agreed

[21:44] <mncharity> STD: http://svn.pugscode.org/pugs/src/perl6/STD.pm

[21:47] <wolverian> fudge should be added to the wiki page too

[21:50] <spinclad> (cheat and metholate as well, perhaps, under STD: they let STD run on pugs)

[21:50] <mncharity> Auzon: havn't forgotten your observation... still pondering...

[21:51] <mncharity> *good observation

[21:51] <spinclad> (by rewriting it, i believe)

[21:52] <mncharity> http://svn.pugscode.org/pugs/src/perl6/cheat  http://svn.pugscode.org/pugs/src/perl6/metholate

[21:52] <mncharity> link for fudge?

[21:54] <spinclad> ack-grep -f | grep fudge

[21:54] <spinclad> t/spec/fudgeall

[21:54] <spinclad> t/spec/fudge

[21:55] <spinclad> so http://svn.pugscode.org/pugs/t/spec/{fudge,fudgeall}

[21:55] <mncharity> http://svn.pugscode.org/pugs/t/spec/fudge  http://svn.pugscode.org/pugs/t/spec/fudgeall

[21:55] <spinclad> yes, better: those are clickable

[22:04] <mncharity> ok, the question was "how can we get people in place to be aware of resources (code and people) [...] ?"

[22:05] <mncharity> a possible response is "create the svn.pugscode file  code_and_people.txt".

[22:05] <mncharity> which seems a bit unsatisfying.

[22:05] <mncharity> in wiki variants as well.

[22:05] <mncharity> why?

[22:06] <mncharity> one possibility is, who's the target audience?

[22:06] <mncharity> "people working on the perl6 project"?

[22:07] <Auzon> I think that audience makes sense 

[22:07] <Auzon> maybe also include people wanting to help.

[22:09] <mncharity> which raises the question, "what perl6 project?".   There's the p6-language list.  There's parrot.  There is/was pugs.  pugs created/spun off/gave life to something like a p6 project.  A test suite, infrastructure (feather).  There's kp6.  There was redsix.

[22:09] <wolverian> they're included in that definition, surely :)

[22:10] *** jonathan4 joined
[22:10] <mncharity> If STD were what a "perl6 project" consists of now, than the target audience and answer would obviously be "email TimToady".

[22:10] *** jonathan4 is now known as jnthn

[22:10] *** ofer left
[22:10] <mncharity> which again, doesn't seem a very satisfying answer.

[22:11] <mncharity> If someone wanted to do a perl6 on perl5 project, I know what I would tell them.

[22:12] <mncharity> Here are the available people and resources.  Plan on working closely with the p5 core development team if you plan a long term project.  Plan on forking the core and putting significant effort into it if you have a shorter term one.

[22:14] <mncharity> If someone wanted to do a perl6 on ruby project, again, I'd know the people and resources to suggest.  And again, cautions like watch for 1.9.0 being potentially buggy, perhaps unlikely to be as challenging as the p5 case.

[22:15] <monomorph> i guess part of the problem is that there are conflicting visions

[22:15] <mncharity> If someone wanted to work on a perl6 project, well, there are some obvious suggestions.

[22:15] <monomorph> some people feel that parrot is not going anywhere. others think that an opensource project in haskell is doomed from the beginning. etc.

[22:16] <jnthn> I've kinda ended up just picking one and hacking on it. :-)

[22:16] <mncharity> There are a couple of parsers now which do or can output ast representations, all variously difficulty to deal with.  Put in some grunge time, create postprocessors for each, and emit simple, portable, common ast representation, to decouple front-end from compiler-and-runtime advancement.

[22:16] <spinclad> well, sure, some people don't know thing one about where parrot is going

[22:17] <mncharity> That's simple, not difficult, but not particularly interesting and fun.   Great for a "perl6 project" though.

[22:18] <pmurias> mncharity: you would have to design the common ast

[22:18] <mncharity> But non-exciting and fun tasks only get done if their context is exciting.  So the grunge bits are exciting by contagion.

[22:18] <mncharity> The "perl6 project" isn't doesn't seem to be exciting people just now.

[22:19] <mncharity> Though there seems an untapped reserve of interest.  Potentially a large one.

[22:19] <mncharity> So maybe it's just a lack of... project cheerleading-ness.

[22:19] * mncharity pauses to backlog comments...

[22:21] *** mj41 left
[22:23] <mncharity> re 'design the common ast', the ast's are not complex.  the entire original p5 backend took something like 2 person/calendar days.  one can do a p6 ast in a 100 lines of ruby code, perhaps 3x that in p5.

[22:23] *** manfred left
[22:23] <monomorph> mncharity: so you're suggesting more hype? parrot had quite a bit of hype back in 2003, i'm not sure if it helped...

[22:25] <pmurias> mncharity: "orginal p5 backend" = ?

[22:25] <wolverian> parrot didn't have the tools necessary for easy bootstrap back then

[22:25] <mncharity> re visions, I would have said "agreed" an hour ago.  now I'm getting a bit of traction by thinking of them as distinct projects.  but yes - Perl 6 as a cluster of somewhat overlapping projects with only somewhat overlapping visions of how to get to xmas, and little coordination between them.

[22:26] *** iblechbot left
[22:27] <mncharity> re "orginal p5 backend", pugs got a p5 and js backend within a few months of its creation, near its period of peak activity.  Spring of... whatever year it was.

[22:28] <mncharity> They both took only a day or two to write.  Taking pugs ast dump, reading it, emitting from the ast, and running it.

[22:29] <spinclad> spring of ... 2005?

[22:29] <mncharity> Not passing all that much of the test suite to start with.  But design or complexity of the ast was not a big issue.

[22:30] <mncharity> $ svn log -r 1    -> 2005-02-06 yes

[22:31] <spinclad> (birthday coming up!)

[22:31] <mncharity> lol :)

[22:31] <mncharity> what's 3 in people years?

[22:32] <Auzon> 100? :P

[22:32] <monomorph> isn't there a perl6 operator for that?

[22:32] <wolverian> Unknown unit 'people'

[22:32] <spinclad> 3, maybe:  it's finally on its feet, a bit unsteadily

[22:33] <spinclad> starting to talk up a storm

[22:33] <mncharity> :)

[22:35] <mncharity> early rapid infant development, followed by a lot of eating and sleeping, now...

[22:35] <Auzon> pugs: sleep

[22:35] <exp_evalbot> OUTPUT[*** ␤    Unexpected end of input␤    at /tmp/ZwcaaKn4x4 line 2, column 1␤]

[22:36] <Auzon> pugs: sleep 5;

[22:36] <exp_evalbot> OUTPUT[*** Unsafe function 'sleep' called under safe mode␤    at /tmp/7jlYg1NY3g line 1, column 1-8␤]

[22:36] <Auzon> heh.

[22:36] <spinclad> pugs: while 1 { sleep; }

[22:36] <exp_evalbot> OUTPUT[*** ␤    Unexpected ";"␤    at /tmp/hruPccxtf0 line 1, column 16␤]

[22:36] <spinclad> pugs: while 1 { sleep }

[22:36] <exp_evalbot> OUTPUT[*** ␤    Unexpected "}"␤    at /tmp/xUIMlS3I7n line 1, column 17␤]

[22:37] <spinclad> durn

[22:39] <spinclad> re glossary wiki page: my browser is like cold molasses, probably won't get to it before bed.  anyone else wants to, feel free.

[22:43] <mncharity> so I was going to say something like "so there are 142 people on the channel, and little two day projects which would obviously get us closer to xmas are left undone for years".  apropos massaging pugs ast dumps into something people can less painfully play with.

[22:45] <mncharity> but then there was pmurias question re the feasibility of doing that.  and I remember all the questioning of ruby as a nice backend.

[22:47] <mncharity> so perhaps there's an issue of "the big picture, or maybe the characteristics of some of its components, is not clearly visible".

[22:49] <mncharity> pmurias: here's http://svn.pugscode.org/pugs/perl5/PIL2JS/  and its ast  http://svn.pugscode.org/pugs/perl5/PIL2JS/lib/PIL/

[22:49] <lambdabot> Title: Revision 19795: /perl5/PIL2JS

[22:53] <wolverian> maybe pugs kind of scared people off, too. 

[22:53] <mncharity> the p5 backend was pil-run.  ast handling: http://svn.pugscode.org/pugs/misc/old_pugs_perl5_backend/PIL-Run/lib/PIL/Run/EvalX.pm

[22:53] <lambdabot> http://tinyurl.com/3acchl

[22:53] <wolverian> and it's only now picking up, when people are realising you don't _need_ to write in haskell to write a perl6 implementation. :)

[22:54] <mncharity> :) hmm...

[22:55] <Auzon> well yeah, now we can write it in Perl 6 :)

[22:56] <mncharity> there does potentially seem an issue of frozen-ness.  perhaps of negativity?  in order to explain the "there lots of people interested, but there aren't lots of people puttering about making small improvements".

[22:57] *** jjore left
[22:58] <pmurias> sleep&

[22:58] *** pmurias left
[22:59] <mncharity> eg, we've so lowered the barrier to entry (well, a (better) wiki might dramatically lower it further for some types of work), that coming up with explanations for why there aren't more people past the barrier and bouncing around, needs a bit more creativity.

[22:59] <mncharity> g'night pmurias

[23:00] <mncharity> started to say "I don't think I really understand it", but that should be a question instead.  "Why don't *you* spend more time on helping with p6?".  hmm, that might make an interesting survey.

[23:02] <mncharity> it's about that time of year where kids taking courses for which they have to conduct surveys are starting to think of topics.  perhaps we could get someone to survey current perl developer community attitudes towards p6, its development effort, and contributing to same.

[23:03] <mncharity> s/to/towards/

[23:04] <mncharity> no, to.  sigh.

[23:07] *** justatheory joined
[23:12] <peepsalot> i'm guessing all this [ol][li] crap is not supposed to be part of the perl examples? http://www.programmersheaven.com/2/Perl6-FAQ-Variables#hypothetical

[23:13] <Juerd> It's not

[23:13] <peepsalot> k, guess i will try to email the webmaster or somethign

[23:13] *** rwt joined
[23:15] <rwt> How do I get a current subroutine name and can I call subroutine by name?

[23:19] *** alester joined
[23:20] <Juerd> rwt: For what version of Perl?

[23:20] <rwt> 5.8.8

[23:21] <Juerd> We're building a future version of Perl here :)

[23:21] <rwt> Sorry.

[23:21] <Juerd> It's still somewhat hypothetical :)

[23:21] <Juerd> Try #perl

[23:21] <rwt> :)

[23:22] <jnthn> peepsalot: Erm, I work at that site.

[23:22] <jnthn> I'm *sure* I checked a fix for that bug in a while back...

[23:23] <jnthn> As in, quite a while back.

[23:23] <peepsalot> jnthn, well, its baaaack ;-)

[23:24] <jnthn> peepsalot: Or never got deployed...

[23:24] <peepsalot> set the building on fire!

[23:25] <peepsalot> that'll teach em to not deploy

[23:25] <peepsalot> well, anyways i already submitted a note via this form http://www.programmersheaven.com/other/contact_us.htm

[23:27] <jnthn> peepsalot: Thanks. Since I'm lead dev there now, I'm sure I'll find out about it on Monday. ;-)

[23:27] *** rwt left
[23:28] <jnthn> Thought it was a page markup bug at first, but the renderer is certainly fubar'd.

[23:31] *** jiing left
[23:31] * spinclad .eat($food).sleep(:hour(10))

[23:31] <spinclad> &

[23:31] <mncharity> spinclad: good night.  thanks for the interesting discussion.

[23:32] <spinclad> glad to contribute!

[23:32] <peepsalot> pugs: my @a = 1,2,3; @a,4;

[23:32] <exp_evalbot> RESULT[([1, 2, 3], 4)]

[23:34] *** jferrero left
[23:35] *** jiing joined
[23:35] *** IllvilJa joined
[23:36] <peepsalot> how does the reverse function work here? http://www.programmersheaven.com/2/Perl6-FAQ-Subroutines#slurpy

[23:36] <TimToady> that does not look correct to me

[23:37] <peepsalot> seems like it would return an array like [[[[[[1],2],3],4],5] or something

[23:37] <TimToady> should just flatten @a into the list

[23:37] <peepsalot> hmm, what's the difference between a list and an array?

[23:38] <peepsalot> TimToady, you mean the pugs result is not right?

[23:38] <peepsalot> or the example in the link?

[23:38] <TimToady> yes, that's what I mean

[23:38] <peepsalot> ok

[23:39] * jnthn is still confused about what is not right

[23:39] <jnthn> The link or the Pugs output?

[23:39] <TimToady> pugs is wrong, I think

[23:39] <jnthn> Ah, OK.

[23:39] <jnthn> The one that I'm not to blame for writing. PHew. :-)

[23:40] * jnthn is busy enough creating bugs to get blamed for in Rakudo

[23:40] <peepsalot> TimToady, how does perl decide to make it into one big list instead of nested ones?

[23:40] <TimToady> pugs: my @a = 1,2,3; (@a,4).join(':')

[23:40] <exp_evalbot> RESULT["1:2:3:4"]

[23:40] <Juerd> peepsalot: Context!

[23:40] <peepsalot> what if I wanted a nested list?

[23:40] <TimToady> it's probably just not in any valid context

[23:40] <Juerd> peepsalot: Then you don't use something with a @ or () in list context.

[23:41] <peepsalot> pugs: my @a = 1,2,3; (@a,4);

[23:41] <Juerd> But something with \@, $ or []

[23:41] <exp_evalbot> RESULT[([1, 2, 3], 4)]

[23:42] <Juerd> Or you put (,) in list context, which results in an array, and which I still think is a bad idea because it's utterly confusing and leads to questions like yours :)

[23:42] <TimToady> pugs: my $a = (1,2,3); ($a,4).join(':')

[23:42] <exp_evalbot> RESULT["1 2 3:4"]

[23:42] <TimToady> that one's still nested

[23:42] <Juerd> afk

[23:43] <Juerd> Actually, do we really need the list/array distinction?

[23:43] <peepsalot> where can i learn more about this context you speak of

[23:43] <Juerd> afk

[23:44] <peepsalot> this faq I am reading does not explain much about lists and arrays AFAIK

[23:47] <jnthn> peepsalot: The one on PH?

[23:48] <peepsalot> yes

[23:48] <jnthn> Yeah, agree it could say much more.

[23:49] <jnthn> Will see if I can get some time to work on it.

[23:49] <peepsalot> cool

[23:50] <jnthn> I wrote the FAQ originally, BTW.

[23:50] <jnthn> PH funded me to work on it.

[23:50] <jnthn> Think they'll be happy to fund me to update it some now too.

[23:51] <jnthn> There's been some design changes in bits of Perl 6 since it was written.

[23:52] *** jferrero joined
