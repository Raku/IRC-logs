[00:00] <diakopter> PerlJam: I still don't see your point :) ... do you mean that a }\n in a semi-list should or shouldn't terminate a statement in a semi-list?

[00:01] <PerlJam> diakopter: I would say it should.

[00:01] <diakopter> PerlJam: oh.. ;) my first guess was that it shouldn't

[00:02] *** toddr joined
[00:02] <PerlJam> cognominal_: I think <before: ...> is still zero-width (but capturing).  

[00:02] <PerlJam> diakopter: well, don't take my word for it, wait for TimToady to wake up and tell you definitively  :)

[00:03] <diakopter> PerlJam: or I guess I could take 30 min to find it in STD.pm

[00:04] <diakopter> if it's there

[00:04] <PerlJam> yeah, STD.pm is still unfleshed in a few places

[00:07] <cognominal_> PerlJam: that would make sense, but the examples in S05 don't support that thesis

[00:09] <PerlJam> cognominal_: well, <? and <! guarantee zero-width, there's nothing that says a rule that starts with an alpha can't be.

[00:09] *** wknight8111 joined
[00:09] <cognominal_> zero width but capturing. An interesting beast indeed. But that would desserve some explicite syntax.

[00:10] <diakopter> cognominal_: http://perlcabal.org/syn/S05.html#line_1537

[00:10] <lambdabot> Title: S05

[00:16] <cognominal_> bed time.

[00:21] *** japhb joined
[00:41] *** wknight8111 left
[00:41] <scrottie> Tene, re: why get pugs running, at the risk of having an opinion (smelly), all of my experience with virtual machines tells me that Parrot is a foul beast. The idea with pugs was to rewrite perl 6 in pugs and make it self hosting; Larry actually started that. In the interest of not having parrot be a central building block (it's okay if it's a part... eggs in oen basket and all that), I wanted to see if I could help with that.

[00:42] <scrottie> alright, with irssi, long lines just don't go through at all?

[00:42] <scrottie> or am I lagged?  blargh.  not used to this beast.  used to irc-II, but mine has been coredumping lately.  i'm guessing that means it's out of date.

[00:44] <diakopter> scrottie: we got the long msg

[00:44] <PerlJam> scrottie: pugs fell down a bit in that in order to write a language in perl 6, you need a parser that parses perl 6; pugs punted on the parser.

[00:44] <diakopter> PerlJam: I wasn't aware of that... i'm curious; explain more?

[00:45] *** pbuetow joined
[00:46] <scrottie> ooops.  typing doesn't knock irssi out of backscroll mode, apparently, and backscroll mode looks like regular mode.  hehe, I'm so stupid.

[00:46] <diakopter> so very :P

[00:47] *** zaphar_ps joined
[00:47] <allbery_b> that's tjhe second person I've seen today who did that

[00:47] <diakopter> scrottie: there are actually other attempts... smop/sm0p promises to reignite in early July when ruoso finishes his $project...  also there's the measly parser/interpreter I built and am actively working on

[00:48] <scrottie> herding frickin' cats.  not only does every developer insist on a different version control system, no two people will commit on the same project.

[00:49] <diakopter> well, there's also elf, which is a very fast implementation on Perl 5

[00:49] *** bacek left
[00:49] <scrottie> really!

[00:50] <diakopter> mncharity runs elf

[00:50] <scrottie> what state is that in, and whose project is that?  (I'm guessing their name is more unique and more easily googled than the project name.)

[00:50] <allbery_b> @larry wants multiple implementations

[00:50] <lambdabot> Maybe you meant: arr yarr

[00:51] <diakopter> elf is fairly complete, actually... I just can't read the code for the life of me or else I'd help out :)

[00:51] <scrottie> allbery_b:  one person projects are okay; multiple people doing the same work in one person projects is okay; people being unrealistic about the scope of work and trying to do everything rather than a reusable piece is problematic.  not to judge ya'll.  just sayin'.

[00:51] <PerlJam> diakopter: The idea for pugs (as I understood it), was to turn Parsec into Perl 6 parser, but no one ever quite got around to it.  But in the mean time, pugs ended up being a decent adhoc parser for parsing most of the "easy" perl 6 syntax

[00:51] <diakopter> PerlJam: thx; I'll read up on Parsec

[00:52] *** wknight8111 joined
[00:52] <diakopter> scrottie: pmurias and moritz_ help out with elf

[00:52] <allbery_b> scrottie: everyone has to redo the easy stuff in order to get to the hard stuff which everyone keeps running around on

[00:52] <scrottie> hits for mncharity+elf are primarily on irc logs.  does anyone know that homepage, offhand?

[00:53] <diakopter> dare I ask on which things rakudo will run around

[00:53] <diakopter> scrottie: the homepage is the irc logs :)

[00:53] <scrottie> allbery_b:  makes sense.

[00:53] <scrottie> diakopter:  and the source code is in a shar archive that people email around?

[00:54] <diakopter> scrottie: it doesn't have a homepage, I don't think... the source is in the pugscode svn, like every implementation but rakudo

[00:54] <scrottie> neato!  so I already have it!

[00:55] <diakopter> scrottie: there is also MP6/KP6, which is a (bootstrapped!) implementation in Perl 5... but apparently (I can't substantiate) it turned out to be quite slow... (probably not nearly as slow as yap6 will be).... fglock built that.

[00:56] <diakopter> yap6 is my little toy bitbox

[00:56] <diakopter> all it does is syntax check and tokenize at the moment.

[00:57] *** simcop2387 left
[00:58] *** simcop2387 joined
[01:01] <diakopter> so anyway, in order of activity, it goes rakudo, STD5 (Larry's parser), elf, yap6, smop, kp6, pugs.... but smop will shortly be 2nd/3rd again, I'm sure.  in order of completeness, it goes  pugs, elf/rakudo (not sure on that order), kp6, smop, yap6 (probably shouldn't be on this list yet)... I'm sure I've left out something somewhere...

[01:02] <scrottie> diakopter++

[01:02] <scrottie> diakopter:  mind if I quote you extensively to use.perl.org?

[01:02] <diakopter> scrottie: hrm

[01:03] <PerlJam> diakopter: how exactly are you defining "completeness"?

[01:03] <diakopter> PerlJam: in the usual hand-wavey way

[01:03] <PerlJam> As Larry says,  each implementation has different areas of focus.

[01:03] <diakopter> PerlJam: probably approximately to amount of work put in to-date...?

[01:04] <scrottie> diakopter:  "I'd prefer not" is valid and acceptable.  But, imo, this is very good info.

[01:05] <diakopter> scrottie: I don't mind, no... just let me know the url so I can post comments/clarifications if necessary :P

[01:05] <diakopter> or retractions

[01:05] <diakopter> :D

[01:06] <pasteling> "scrottie" at 130.13.73.133 pasted "quoting" (24 lines, 1.7K) at http://sial.org/pbot/31366

[01:06] <scrottie> that's my draft

[01:06] <scrottie> not going to do too much with it... just log it as a personal blog.

[01:06] <scrottie> feel free to edit and nopaste again.

[01:06] <pmichaud> I thought that larry's tokenizer is in P5...?

[01:07] <diakopter> Larry's program is more than a tokenizer.. it produces nested Match objects.. it's a full-fledged parser.. and yeah it runs on P5, and it's not in v6/ ; it's in src/perl6

[01:07] <diakopter> scrottie: here's some more history on STD5

[01:08] <diakopter> at one point TimToady had a program that would convert STD.pm to a dialect pugs could understand... but nowadays his script takes it all the way to Perl 5

[01:08] <scrottie> diakopter:  this is the program he presented at YAPC::NA this year?  looked pretty p6 to me, with :stuff and whatnot.

[01:09] <diakopter> STD.pm is in Perl 6

[01:09] <pmichaud> what it parses is P6, yes.

[01:09] <pmichaud> but the program itself is P5.

[01:09] <PerlJam> uses Moose even

[01:09] <pmichaud> by that reckoning, what rakudo and the parrot compiler tools parse is P6.  :-)

[01:10] <diakopter> scrottie: what you saw on the screen was STD.pm, I'm pretty sure.

[01:10] <diakopter> the Perl 6 standard grammar (slash parser generation instructions)

[01:11] <scrottie> first line of Perl-6.0.0-STD.pm is: grammar Perl:ver<6.0.0.alpha>:auth<http://perl.org>;

[01:11] <scrottie> I think he said something about this being marked .alpha, but in the p6 it parses, that's not legal.

[01:11] <pmichaud> afaik, nothing actually runs STD.pm yet.

[01:12] <PerlJam> not an unmodified STD.pm

[01:12] <diakopter> scrottie: there shouldn't be a Perl-6.0.0-STD.pm

[01:12] *** Auzon joined
[01:12] <scrottie> I'm looking at pugs/src/perl6/Perl-6.0.0-STD.pm ... worng thing?

[01:12] <scrottie> it looks awfully familiar...

[01:12] <pmichaud> I don't see a Perl-6.0.0-STD.pm in the repo.  Just STD.pm .

[01:13] <pmichaud> however, STD.pm does start with  grammar Perl:ver<6.0.0.alpha>:auth<http://perl.org>;

[01:13] <scrottie> alright, I might have gotten something old by mistake.  where do I need to pull from?

[01:13] <diakopter> http://www.perlcabal.org/svn/pugs/browse/src/perl6

[01:13] <lambdabot> Title: browse: /pugs/src/perl6 (Rev: HEAD, via SVN::Web)

[01:13] <diakopter> svn export/checkout http://svn.pugscode.org/pugs

[01:13] <lambdabot> Title: Revision 20922: /

[01:14] <PerlJam> http://svn.pugscode.org/pugs works as well

[01:14] <lambdabot> Title: Revision 20922: /

[01:14] <pmichaud> (I tend to browse through the url PerlJam just gave, fwiw.)

[01:14] <diakopter> that's the one I gave too :P

[01:14] <pmichaud> I'm not familiar with the "/browse/" component, though.

[01:15] <diakopter> I sent two urls

[01:15] <diakopter> the first is SVN::Web; second was the svn repo itself

[01:15] <pmichaud> right.

[01:16] <pmichaud> bbl.

[01:17] * scrottie co's

[01:18] <scrottie> diakopter, http://use.perl.org/~scrottie/journal/36739 ... I can make corrections directly too.

[01:18] <lambdabot> Title: Journal of scrottie (4167)

[01:18] <rindolf> Hi scrottie 

[01:18] <rindolf> scrottie: hi.

[01:18] <scrottie> hi rindolf

[01:18] <rindolf> scrottie: have you seen the fuss on use.perl.org about my "Closed books" essay?

[01:18] <scrottie> rindolf, how do you fit into this neat little puzzle these people have created?

[01:18] <rindolf> chromatic++

[01:18] <scrottie> rindofl:  no, sounds boring.

[01:19] <rindolf> scrottie: which one?

[01:19] <rindolf> scrottie: which puzzle?

[01:19] <diakopter> scrottie: the first two sentences are incorrect

[01:20] <scrottie> alright, I'm still confused on that point.  why did he track down a working pugs to run it?

[01:21] <diakopter> scrottie: also, another correction, STD.pm is *the* Perl 6 grammar; Larry's effort is separate from that - his effort is comprised of gimme5/Cursor5, which together produce STD5.pm from STD.pm

[01:21] <scrottie> and I think I'm getting conflicting opinions on that here

[01:21] <diakopter> scrottie: he didn't track down a working pugs to run it; he tracked down a working pugs to demo a Perl 6 feature

[01:21] <diakopter> scrottie: re: conflicting opinions; no, no one's disagreed on these points

[01:23] <scrottie> svn: REPORT request failed on '/pugs/!svn/vcc/default' ... svn: REPORT of '/pugs/!svn/vcc/default': Chunk delimiter was invalid (http://svn.pugscode.org)

[01:23] <lambdabot> Title: Revision 20922: /

[01:24] <scrottie> dammit.  this stuff is so confusing, svn can't even check it out =P

[01:24] <diakopter> "Larry Wall, at YAPC, demo'd his Perl 6 tokenizer written in the perl 6 dialect spoken by pugs. That's v6/ in the pugs source code."  --> "Larry Wall, at YAPC, demo'd his Perl 6 parser (generated into Perl 5 from STD.pm (Perl 6) by gimme5/Cursor5). That's src/perl6/*5.* in the pugs source code."

[01:25] <diakopter> src/perl6/metholate was the converter from Perl 6 to pugs-P6, but not updated in 4 months b/c that's not what Larry uses anymore

[01:26] <diakopter> all I can suggest about the svn checkout problem is to try again, or to export instead of checkout

[01:26] <scrottie> edited (thanks for corrections).

[01:26] <PerlJam> scrottie: what version of svn are you using?

[01:26] <Auzon> Note that elf, like many P6 implementations, is partially written in Perl 6.

[01:27] <scrottie> 1.3.2 (r19776)

[01:27] <PerlJam> you might want to try a newer svn

[01:28] <PerlJam> (I was all set to give fitz and sussman grief about svn 1.5 at yapc but apparently it's actually out now :)

[01:30] *** toddr left
[01:30] <rindolf> PerlJam: were they present there?

[01:30] <scrottie> rindolf, re: puzzle, the puzzle formed by all of these projects.  how do you fit in to that?  in other words, what are you working on?

[01:30] <diakopter> scrottie: to clarify further, Larry's programs require perl 5.10

[01:31] <rindolf> scrottie: lots of stuff.

[01:31] <rindolf> scrottie: CPAN modules.

[01:31] <rindolf> scrottie: and some stuff in the perl5-core.

[01:31] <rindolf> scrottie: and a bit on Parrot. (Very little).

[01:31] <scrottie> rindof, neat, didn't know that about you.  I thought you just wrote essays that annoyed people ;)

[01:31] <rindolf> scrottie: I'm here because of the discussion.

[01:31] <rindolf> scrottie: nah.

[01:32] <rindolf> scrottie: http://www.shlomifish.org/open-source/ - knock yourself out.

[01:32] <lambdabot> Title: Open Source Software I wrote

[01:32] *** rindolf left
[01:32] <scrottie> okay, but you're not working on the perl 6 "puzzle" (my words)?  you're just here for the discussion?  everyone has CPAN modules.  only every other person has a perl 6 parser.

[01:33] <scrottie> bleah

[01:34] <scrottie> afk a bit, heading to the laundramat

[01:34] <scrottie> laundromat

[01:37] <diakopter> heh

[01:38] <scrottie> but when I get there I'll get back online >=)

[02:14] *** mjk left
[02:24] <diakopter> TimToady: typo at S03:175

[02:27] <diakopter> TimToady: S03:220 has a trailing semicolon whereas the other examples don't

[02:28] <diakopter> TimToady: inconsistent spacing at S05:1502

[02:28] <diakopter> TimToady: spello at S05:2069

[02:39] <pugs_svnbot> r20923 | pmichaud++ | S02-literals/autoref.t:  Fix rakudo skip message.

[02:53] *** alester joined
[02:54] *** alester left
[02:54] <diakopter> TimToady: I assume postfix !meth has the same precedence as the other postfix method calls...?

[02:55] <diakopter> pmichaud: or you.. ^^

[02:57] <rakudo_svn> r28588 | pmichaud++ | [rakudo]:

[02:57] <rakudo_svn> r28588 | pmichaud++ | * Update tools/test_summary.pl to summarize skipped tests.

[02:57] <pugs_svnbot> r20924 | pmichaud++ | S04-statements/try.t:  Fix skip messages.

[02:59] <speckbot> r14553 | pmichaud++ | typo fixes by diakopter++

[03:00] <speckbot> r14554 | pmichaud++ | typo fixes by diakopter++

[03:02] *** wknight8111 left
[03:04] *** elmex_ joined
[03:07] <diakopter> pmichaud: I don't know if you saw; I created this parametric regex/token/rule (template) function; I think it could actually be a neat language feature that could benefit Perl 6, too.

[03:08] <diakopter> it's a pretty simple concept, but its implementation in Perl 5 was kindof heinous.

[03:08] <scrottie> rindolf, you never send me a link to the page you're talking about, but instead a page that links to the page, and that page always serves to convince me that I don't want to go to that page after all.

[03:09] <pmichaud> diakopter: hadn't seen it yet, no.  May take a look tomorrow.  :-)

[03:09] <pugs_svnbot> r20925 | pmichaud++ | Fix typo in <radint>:  <?before :> should be <?before ':'> .

[03:13] <spinclad> (ftr, larry didn't start pugs; autrijus ==> audreyt did.)

[03:14] <spinclad> scrottie: ^

[03:19] <diakopter> pmichaud: I'm just about done with the top-down portion of the Perl6in5::Grammar engine... now I'm working on the operator precedence engine/generators... I'm going to try to approach the capability of pge (but not the syntax, obviously) in those regards...

[03:19] *** elmex_ is now known as elmex

[03:25] <Auzon> elf: say ''

[03:25] <p6eval> OUTPUT[␤]

[03:26] *** bacek joined
[03:27] <bacek> rakudo: my ($a, $b); $a=42; say $a

[03:27] <p6eval> rakudo r28589 OUTPUT[Scope  not found for PAST::Var '$a'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤

[03:38] * diakopter adds 'use B::Generate;' to yap6; lol

[03:41] *** pbuetow_ joined
[03:46] <s1n> so is rakudo supposed to now be the main perl6 implementation?

[03:48] <diakopter> s1n: it's the most active currently, by far...

[03:49] <diakopter> s1n: here are some recent comments... http://use.perl.org/~scrottie/journal/36739

[03:49] <lambdabot> Title: Journal of scrottie (4167)

[03:51] <s1n> i was reading about the recent grant for the smop implementation

[03:52] <s1n> i'd like to start playing with/on perl6, but i don't want to waste time on an implementation that gets neglected (pugs)

[03:52] <diakopter> I'd look into rakudo if I were you, then

[03:53] *** pbuetow left
[03:53] <scrottie> spinclad, yeah, I was just under the impression that his current work was based on top of it, and that people were still hacking on it (it = pugs)

[03:53] <diakopter> it certainly has the most funding/cheerleaders/potential

[03:54] <s1n> i was thinking of helping with getting some of the spectests working again in rakudo, but i'd be pissed if that went the way of pugs

[03:55] <diakopter> s1n: the only way that would happen is if major design/implementation flaws/limitations were discovered in parrot that weren't reasonably insurmountable... 

[03:55] <scrottie> pugs at least had numerous backends, parrot being just one of them.  with pugs translated to perl6 to be made self-hosting (as was the.. er, a.. plan), it would be independant of VM.

[03:55] <diakopter> s1n: but I sincerely doubt that's the case...

[03:56] <s1n> what exactly was wrong with pugs that caused people to stop working on it?

[03:57] <diakopter> nothing; its primary author/maintainer became otherwise occupied

[03:58] <diakopter> but there is a multitude of people familiar with parrot/pge/pct/rakudo internals... plenty to survive such buses

[03:58] <s1n> does rakudo have a similar structure (primary-developer-gets-hit-by-bus-and-project-dies-too syndrome)?

[03:58] <s1n> heh ok

[03:58] <diakopter> s1n: no; there are lots... see #parrot on irc.perl.org

[03:59] <s1n> what about the mention of elf?

[03:59] *** alester joined
[03:59] <s1n> it sounds complete, if it's complete, why has it not gotten any attention?

[03:59] <Auzon> It's not complete.

[03:59] <Auzon> elf: say 1 ~~ Int

[03:59] <p6eval> OUTPUT[Can't call method "Str" on an undefined value at ./elf_f line 649.␤ at ./elf_f line 3854␤]

[03:59] <diakopter> it's not complete..

[04:00] <Auzon> elf: say [*] 1 .. 5

[04:00] <p6eval> OUTPUT[Parse error in: /tmp/Da3FHqReLH␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: say [*] 1 .. 5␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤  STD_red/std.rb:210:in...

[04:00] <diakopter> s1n: but it hasn't gotten much attention because no one has written/talked about it anywhere but on this irc channel

[04:00] <s1n> does that make it inferior?

[04:01] <diakopter> in terms of publicity, yeah... but not otherwise, of course.

[04:01] <diakopter> a Perl 6 implementation is measured/defined by its handling of the official test suite

[04:02] <s1n> the pugs suite?

[04:02] <Tene> The pugs suite is gradually being organized better.  It's going to grow into the official test suite.

[04:02] <diakopter> and, I suppose, also its cross-platform-ness.  and also, I suppose, the availability/free-ness of its dependencies.  and also, I suppose, which open-source license it's available under

[04:03] <s1n> okay, we're making progress here. i now have a definition of a metric of an implementation and what will ultimately be the test suite.

[04:03] <Auzon> s1n: From what I hear, the test suite is roughly 18000 tests.

[04:04] <s1n> is rakudo more complete than elf? should i even spend time on any other implementation?

[04:05] <diakopter> I can't make that explicit recommendation; after all, I have my own infantile implementation (that's primarily for my own amusement/education)... but if I weren't me, I'd recommend diving into rakudo/parrot

[04:06] <s1n> okay, does the current test suite in pugs still need any work or is it pretty complete?

[04:06] <diakopter> Auzon?

[04:06] <Auzon> It'll always need work :)

[04:07] <Auzon> I'm hoping to add 1000 tests by the end of the summer

[04:07] <Auzon> A few tests are outdated.

[04:07] <Auzon> More recent things are lacking, such as sameaccent.

[04:08] <Auzon> But the test suite is further along than all the implementations combined, which is the goal

[04:08] <s1n> okay great, that was what i needed to know

[04:08] <diakopter> Larry estimates the test suite is 20-50% complete, I think...?

[04:09] <Auzon> I heard the estimate of 40000 tests for 6.0.0 of the first implementation

[04:09] <s1n> i'll probably start by hacking on learning the language, playing with the test suite, and then move into fixing stuff in rakudo

[04:09] <s1n> lots of new perl6 features :)

[04:09] <Auzon> s1n: If you're looking for untested areas on the suite, I've listed them in t/TASKS

[04:09] <diakopter> s1n: rakudo is implemented in PIR and NQP (nearly Perl 6 syntax)

[04:10] <s1n> Auzon: thanks

[04:10] <Auzon> Some of them, at least.

[04:10] <diakopter> s1n: do you want a commitbit?  (svn commit access)

[04:10] <s1n> i tried doing the spectest and it just blew up on me (ended up running all night)

[04:10] <s1n> to parrot?

[04:10] <Auzon> Yeah, you can't run it.

[04:10] <diakopter> no, to pugscode, where the test suite is

[04:11] <s1n> diakopter: wouldn't hurt :)

[04:11] <diakopter>  /msg me your email address and desired username...

[04:11] <Auzon> the pugs repo holds a lot of implementations as well, such as elf, yap6, smop, pugs...

[04:11] <Auzon> And the test suite

[04:11] <diakopter> and the standard grammar (STD.pm) and Larry's parser based on the standard grammar... :)

[04:12] <s1n> hmm okay

[04:12] <Auzon> It's pretty lacking for committing rules.

[04:12] <Auzon> The Parrot repo is a lot stricter

[04:12] * diakopter kicks jifty

[04:13] <s1n> there seems to be a lack of documentation on getting a good dev. environment up and running, i read about feather, should i get an account there or just hack on it on my machine?

[04:13] <Auzon> It depends on your goal

[04:13] <s1n> what would be my goal if i used feather?

[04:14] <Auzon> I'm a Google summer of code student, and my project is the test suite. Locally, I only have Rakudo running

[04:14] <s1n> i have parrot svn compiled locally, i was going to just use that

[04:15] <diakopter> there we go; jifty responded well to SIGHUP

[04:15] <Auzon> Yeah, that's what I do. The rakudo_svn bot here announced commits to the Rakudo section of the Parrot repo

[04:16] <s1n> okay, but the test suite is through pugscode, so i guess i should check that out too

[04:16] <diakopter> s1n: invitation sent

[04:17] <s1n> diakopter: thanks for that

[04:17] <diakopter> s1n: generally to get commit access to parrot/rakudo, you become known as a reliable submitter of good (working) patches... then you get invited; then you sign a form regarding IP...

[04:17] <s1n> i'll probably start slowly, maybe a handful of minutes a night :)

[04:18] <diakopter> but apparently at some point rakudo will get its own repository/home somewhere

[04:18] <Auzon> s1n: My setup has a few repos checked out. I have the Pugs repo (for the test suite), the Parrot repo (for Rakudo), and the synopsis repo checked out (for searching the synopses).

[04:18] <diakopter> since parrot eventually won't be released with all the HLLs (high level languages)

[04:19] <Auzon> s1n: If you just want to run the test suite with Rakudo, there's a target for make in languages/perl6 that does it.

[04:19] <s1n> diakopter: okay, so you just gave me commitbit to pugscode, which i'll use for the test suite, right?

[04:19] <diakopter> s1n: yep

[04:19] <s1n> Auzon: yeah i was playing with that

[04:19] <Auzon> If you want to hack on the test suite, then you'll want a setup kinda like mine

[04:19] <diakopter> or starting your own implementation ;)

[04:19] <diakopter> scrottie: ^

[04:20] <s1n> diakopter: heh don't have time for that, like Auzon, i'm a student

[04:20] <diakopter> ha; students have more time than anybody...

[04:20] <s1n> i work full time and part-time gradschool

[04:20] <diakopter> ok, then :D

[04:20] <diakopter> students *who don't work fulltime* ... :)

[04:21] <Auzon> s1n: There's also syntax highlighting for vim and presumably emacs in the pugs repo

[04:21] <diakopter> s1n: what OS do you use

[04:21] <s1n> mainly, i want perl6 because i want to be able to try and convince my boss to switch our dated perl5 junk to perl6 :)

[04:21] <s1n> gentoo ~amd64

[04:21] <Auzon> mmm, that's a ways off yet

[04:21] <s1n> yeah, but the more i help, the closer it gets

[04:21] <cj> s1n: hey, perl5's not so bad

[04:22] <diakopter> s1n: that's a great attitude; you'll go far.

[04:22] <s1n> cj: no, i love it, but perl6 makes my mouth water

[04:22] <Auzon> Oh, don't forget the redsix implementation :P

[04:22] <diakopter> oh! I knew I'd left something out...

[04:23] <Auzon> Don't bother with it though

[04:23] <Auzon> I don't know of anything it does better than elf or rakudo

[04:23] <s1n> i was reading about mixins in perl6 and on the rakudo blog and my heart started beating fast, then i read about generics and it was too much to handle

[04:23] <Auzon> s1n: Have you seen the evalbot in here?

[04:23] <s1n> Auzon: i've seen people use it

[04:23] <s1n> impl: code

[04:24] <Auzon> Yeah. I do a lot of testing with that, actually.

[04:24] <s1n> rakudo: say "Hello World"

[04:24] <p6eval> rakudo r28591 OUTPUT[Hello World␤]

[04:24] <Auzon> You can also privmsg it if you don't want to flood the channel or something

[04:24] <diakopter> rakudo: 'Hello Cosmos'

[04:24] <p6eval> rakudo r28591 RESULT["Hello Cosmos"]

[04:24] <Auzon> p6eval is a very easy way to play with Pugs and KP6, too.

[04:25] *** japhb left
[04:25] <s1n> okay, i'll have to set up my environment tomorrow, thanks for everything guys

[04:25] *** japhb joined
[04:25] <Auzon> OK. I'm available to lend a hand if you want.

[04:26] <s1n> i gotta get up a the butt-crack of dawn tomorrow to go run then work some ot

[04:26] <Auzon> I suggest getting elf and rakudo running, as they're pretty easy

[04:26] <s1n> Auzon: thanks

[04:26] <s1n> Auzon: i have rakudo working now

[04:26] <cj> what is rakudo?

[04:26] <Auzon> elf is just Perl 5.10, Ruby 1.9 and some Perl modules

[04:26] <Auzon> cj: Rakudo is Perl 6 on Parrot

[04:26] <cj> ah.  it's got a name now, eh?

[04:26] <Auzon> elf: say $?PERLVER

[04:26] <cj> when did that happen?

[04:26] <p6eval> OUTPUT[elf / perl 5.8.8 / EmitSimpleP5␤]

[04:26] <diakopter> cj: www.rakudo.org

[04:27] <Auzon> elf also runs on Perl 5.8.8 too, but it's slower.

[04:27] <Auzon> not much though

[04:27] <cj> elf must be perl6 on perl5

[04:27] <diakopter> one of the 3-4

[04:27] <s1n> im out, thanks for the deets and help

[04:27] <Auzon> cj: Yes. It uses STD_red (Ruby translation of STD.pm) for the AST, I think

[04:27] <Auzon> see you, s1n

[04:29] <scrottie> oh, then there's elf_on_rakudo.

[04:29] <Auzon> and elf on smop, and kp6 on smop, and... :P

[04:29] <scrottie> you guys are f'n nuts.

[04:29] <Auzon> I swear, I learn about a new P6 implementation every few days

[04:30] <diakopter> or at least target permutation

[04:30] <Auzon> scrottie: Well, if you have an implementation of P6 written in P6, a good test for both would be to run it on another P6 implementation.

[04:30] <Auzon> and it might help with bootstrapping.

[04:30] <diakopter> lol

[04:31] <diakopter> "if you have a bootstrapped Perl 6, it might help with bootstrapping to run it on a non-bootstrapped Perl 6"...?

[04:31] <scrottie> ... and elf uses STD_red... the _Ruby_ translation of STD.pm?  Is there logic in there somewhere?

[04:32] <diakopter> scrottie: yes b/c redsix did a good job parsing STD(_old).pm I think

[04:32] <Auzon> scrottie: Apparently it works. Elf is pretty fast and complete for how little time it's around.

[04:32] <Auzon> Is STD_red hand or machine translated?

[04:34] <scrottie> ... it hasn't been around long, and it already has several implementations (elf_a, elf_b, elf_c, ... elf_f)...?

[04:34] <Auzon> 2008-03-20 is the first commit

[04:35] <diakopter> Auzon: well, maybe yap6 can replace its parser...

[04:36] <scrottie> attempting (and failing) to think, outloud.  they *immediately* bootstrapped themselves by rewritting the parser into the language they parsed...?  props there.  neato.

[04:36] <Auzon> scrottie: elf_a was pure P5. Then elf_b was written in P6 that elf_a could understand. Then elf_b was hacked on, and then made into elf_c when a milestone happened.

[04:36] <diakopter> I mean, who am I kidding that I can write my own runtime/object model

[04:36] <Auzon> and so on with each milestone for elf_c .. elf_f

[04:36] <scrottie> Auzon:  neat!

[04:37] <diakopter> scrottie: want a commit bit?

[04:37] <scrottie> um... I might have one.  how would I know?

[04:37] <Auzon> It's probably a bit more complicated, but it's awesome for only 3 months and fast for P5

[04:37] <Auzon> scrottie: http://commitbit.pugscode.org/ and login

[04:37] <lambdabot> Title: Welcome to CommitBit for PugsCode

[04:37] <diakopter> scrottie: email address?

[04:37] <Auzon> or ask diakopter.

[04:37] <scrottie> [email@hidden.address]
[04:37] <diakopter> nope

[04:38] <diakopter> invitation sent

[04:38] <scrottie> ahhh.  audreyt was slinging them when I was around, long ago, but apparently missed me.

[04:40] <bacek> pugs: my ($a,$b); $a=42; say $a;

[04:40] <diakopter> Auzon: I think we have new 365-day record for irclog length for the past 24 hours...

[04:40] <p6eval> OUTPUT[42␤]

[04:40] <Auzon> diakopter: I've noticed that IRC has been a lot more active this spring/summer than last winter

[04:41] <Auzon> Hopefully it's a sign of more P6 momentum.

[04:41] <diakopter> scrottie: why doesn't your article appear on use.perl.org recent post list

[04:44] <Auzon> diakopter: Are you aiming for a general purpose P6 parser now with yap6?

[04:45] <diakopter> Auzon: yeah... well actually, as flexible as pge, hopefully

[04:45] <diakopter> just not its syntax

[04:51] <diakopter> Auzon: do you have any thoughts on that?

[04:52] <Auzon> I don't know PGE well enough to comment about comparison of PGE and yap6.

[04:53] <diakopter> PGE basically has nearly-Perl 6 rule/token/regex declaration syntax

[04:53] <diakopter> just not all the features

[04:53] <diakopter> but lots

[04:54] <Auzon> I'm interested a way to check if P6 is valid for personal selfish reasons, since it would catch typos and other things easily

[04:56] <Auzon> Depending on the output of such a parser, I could find a few uses for it in code unrelated to P6 development

[04:56] <diakopter> interesting

[04:56] <Auzon> But this all supposes that a parser is orders of magnitude easier to write than the corresponding implementation

[04:57] <Auzon> Replacing STD_red in elf and perhaps other implementations could be beneficial too

[04:58] <Auzon> If it does what I think it does, I could adjust the smartlinks tool to provide accurate syntax highlighting for the synopses.

[04:58] <diakopter> ooo

[04:59] <diakopter> ha

[04:59] <diakopter> even for STD.pm's gradual grammar... ;)

[05:07] *** alester left
[05:08] <scrottie> diakopter:  I thought I saw the article there... sudden mass posting immediately afterwards?  dunno

[05:13] *** smtms left
[05:16] *** Psyche^ joined
[05:29] *** Patterner left
[05:29] *** Psyche^ is now known as Patterner

[05:46] *** kanru left
[05:50] *** a-jing joined
[05:50] *** a-jing left
[05:52] *** njm joined
[05:56] <bacek> pugs: my $a; my $a; $a=42; say $a

[05:56] <p6eval> OUTPUT[42␤]

[05:56] <bacek> pugs: my $a; $a=42; my $a; say $a

[05:56] <p6eval> OUTPUT[42␤]

[06:04] *** xinming joined
[06:07] <scrottie> here yak, yak, yak... I won't hurt you... nevermind this knife... it's just a razor blade...

[06:35] *** sri_work_ left
[06:41] *** japhb left
[06:41] *** pbuetow_ left
[06:41] *** bacek left
[06:41] *** simcop2387 left
[06:41] *** pjcj left
[06:41] *** cognominal_ left
[06:41] *** Grrrr left
[06:41] *** s1n left
[06:41] *** diakopter left
[06:41] *** TimToady left
[06:41] *** cls_bsd left
[06:41] *** Patterner left
[06:41] *** njm left
[06:41] *** zaphar_ps left
[06:42] *** xinming left
[06:42] *** p6eval left
[06:42] *** elmex left
[06:42] *** Southen_ left
[06:42] *** pengrate left
[06:42] *** Auzon left
[06:42] *** araujo left
[06:42] *** hcchien left
[06:43] *** ingy joined
[06:43] *** Alias_ joined
[06:43] *** xinming joined
[06:43] *** njm joined
[06:43] *** Patterner joined
[06:43] *** japhb joined
[06:43] *** pbuetow_ joined
[06:43] *** bacek joined
[06:43] *** elmex joined
[06:43] *** Auzon joined
[06:43] *** simcop2387 joined
[06:43] *** zaphar_ps joined
[06:43] *** Southen_ joined
[06:43] *** pjcj joined
[06:43] *** cognominal_ joined
[06:43] *** araujo joined
[06:43] *** p6eval joined
[06:43] *** Grrrr joined
[06:43] *** pengrate joined
[06:43] *** lambdabot joined
[06:43] *** drbean_ joined
[06:43] *** BinGOs joined
[06:43] *** stevan_ joined
[06:43] *** cookys joined
[06:43] *** revdiablo joined
[06:43] *** wolverian joined
[06:43] *** jan__ joined
[06:43] *** Ara4n joined
[06:43] *** Maghnus joined
[06:43] *** SamB joined
[06:43] *** felipe joined
[06:43] *** eternaleye_ joined
[06:43] *** gbacon joined
[06:43] *** lumi joined
[06:43] *** Lunchy joined
[06:43] *** kcwu joined
[06:43] *** dmq joined
[06:43] *** Kattana joined
[06:43] *** yahooooo joined
[06:43] *** mj41 joined
[06:43] *** SubStack joined
[06:43] *** perlbot joined
[06:43] *** pugs_svnbot joined
[06:43] *** beppu joined
[06:43] *** TreyHarris joined
[06:43] *** yves joined
[06:43] *** ilbot2 joined
[06:43] *** rafl joined
[06:43] *** kolibrie joined
[06:43] *** mtve joined
[06:43] *** irc.freenode.net sets mode: +o ingy

[06:43] *** obra joined
[06:43] *** buubot joined
[06:43] *** speckbot joined
[06:43] *** Tene joined
[06:43] *** nipotaway joined
[06:43] *** IRSeekBot joined
[06:43] *** Maddingue joined
[06:43] *** arguile joined
[06:43] *** jrockway joined
[06:43] *** jjore joined
[06:43] *** Juerd joined
[06:43] *** clkao joined
[06:43] *** buu joined
[06:43] *** audreyt joined
[06:43] *** allbery_b joined
[06:43] *** nnunley joined
[06:43] *** moritz_ joined
[06:43] *** avar joined
[06:43] *** lisppaste3 joined
[06:43] *** yath joined
[06:43] *** rakudo_svn joined
[06:43] *** broquaint joined
[06:43] *** kane_ joined
[06:43] *** charsbar joined
[06:43] *** awwaiid joined
[06:43] *** osfameron joined
[06:43] *** Gothmog_ joined
[06:43] *** Khisanth joined
[06:43] *** zostay joined
[06:43] *** nothingmuch joined
[06:43] *** pmichaud joined
[06:43] *** PerlJam joined
[06:43] *** Ingmar joined
[06:43] *** qmole_ joined
[06:43] *** jiing joined
[06:43] *** fullermd joined
[06:43] *** apeiron joined
[06:43] *** Caelum joined
[06:43] *** cj joined
[06:43] *** rhr_ joined
[06:43] *** Coleoid joined
[06:43] *** dalek joined
[06:43] *** mofino joined
[06:43] *** spinclad joined
[06:43] *** pasteling joined
[06:43] *** gugod joined
[06:43] *** silug joined
[06:43] *** cls_bsd joined
[06:43] *** diakopter joined
[06:43] *** s1n joined
[06:43] *** TimToady joined
[06:43] *** irc.freenode.net sets mode: +o TimToady

[06:43] *** hcchien joined
[06:44] *** Jedai joined
[06:56] <Patterner> occam's?

[07:25] *** iblechbot joined
[07:26] *** Alias__ joined
[07:27] *** Alias_ left
[07:40] *** cornelius_ joined
[07:40] *** cornelius_ is now known as c9s

[07:57] *** bacek left
[07:59] *** xinming left
[07:59] *** xinming joined
[08:02] *** njm left
[08:03] *** barney joined
[08:16] *** c9s left
[08:16] *** jan__ left
[08:16] *** ilbot2 left
[08:16] *** yves left
[08:16] *** rafl left
[08:16] *** Lunchy left
[08:16] *** Jedai left
[08:16] *** s1n left
[08:16] *** Grrrr left
[08:16] *** pbuetow_ left
[08:16] *** japhb left
[08:16] *** pjcj left
[08:16] *** eternaleye_ left
[08:16] *** cognominal_ left
[08:16] *** simcop2387 left
[08:16] *** xinming left
[08:16] *** diakopter left
[08:16] *** wolverian left
[08:16] *** TimToady left
[08:16] *** stevan_ left
[08:16] *** cls_bsd left
[08:16] *** lambdabot left
[08:16] *** Patterner left
[08:16] *** lumi left
[08:16] *** SamB left
[08:16] *** iblechbot left
[08:16] *** fullermd left
[08:16] *** qmole_ left
[08:16] *** kolibrie left
[08:16] *** zaphar_ps left
[08:16] *** ingy left
[08:16] *** pmichaud left
[08:16] *** charsbar left
[08:16] *** mj41 left
[08:16] *** pugs_svnbot left
[08:16] *** dmq left
[08:16] *** mofino left
[08:16] *** jiing left
[08:16] *** yahooooo left
[08:16] *** dalek left
[08:16] *** Caelum left
[08:16] *** BinGOs left
[08:16] *** hcchien left
[08:16] *** Coleoid left
[08:16] *** p6eval left
[08:16] *** buu left
[08:16] *** gbacon left
[08:16] *** zostay left
[08:16] *** Khisanth left
[08:16] *** audreyt left
[08:16] *** perlbot left
[08:16] *** barney left
[08:16] *** apeiron left
[08:16] *** Gothmog_ left
[08:16] *** yath left
[08:16] *** Ara4n left
[08:16] *** jjore left
[08:16] *** nnunley left
[08:16] *** Juerd left
[08:16] *** Ingmar left
[08:16] *** lisppaste3 left
[08:16] *** revdiablo left
[08:16] *** felipe left
[08:16] *** rakudo_svn left
[08:16] *** arguile left
[08:16] *** Maghnus left
[08:16] *** silug left
[08:16] *** SubStack left
[08:16] *** awwaiid left
[08:16] *** PerlJam left
[08:16] *** drbean_ left
[08:16] *** osfameron left
[08:16] *** allbery_b left
[08:16] *** Maddingue left
[08:16] *** pasteling left
[08:16] *** elmex left
[08:16] *** Alias__ left
[08:16] *** rhr_ left
[08:16] *** kane_ left
[08:16] *** broquaint left
[08:16] *** kcwu left
[08:16] *** Southen_ left
[08:16] *** pengrate left
[08:16] *** Tene left
[08:16] *** cj left
[08:16] *** avar left
[08:16] *** mtve left
[08:16] *** buubot left
[08:16] *** gugod left
[08:16] *** speckbot left
[08:16] *** beppu left
[08:16] *** nothingmuch left
[08:16] *** Kattana left
[08:16] *** spinclad left
[08:16] *** moritz_ left
[08:16] *** Auzon left
[08:16] *** jrockway left
[08:16] *** TreyHarris left
[08:16] *** araujo left
[08:16] *** IRSeekBot left
[08:16] *** obra left
[08:16] *** clkao left
[08:16] *** cookys left
[08:16] *** nipotaway left
[08:18] *** ingy joined
[08:18] *** xinming joined
[08:18] *** c9s joined
[08:18] *** Alias__ joined
[08:18] *** iblechbot joined
[08:18] *** Jedai joined
[08:18] *** hcchien joined
[08:18] *** Patterner joined
[08:18] *** japhb joined
[08:18] *** pbuetow_ joined
[08:18] *** elmex joined
[08:18] *** Auzon joined
[08:18] *** simcop2387 joined
[08:18] *** zaphar_ps joined
[08:18] *** Southen_ joined
[08:18] *** pjcj joined
[08:18] *** cognominal_ joined
[08:18] *** araujo joined
[08:18] *** p6eval joined
[08:18] *** Grrrr joined
[08:18] *** pengrate joined
[08:18] *** lambdabot joined
[08:18] *** drbean_ joined
[08:18] *** BinGOs joined
[08:18] *** stevan_ joined
[08:18] *** cookys joined
[08:18] *** revdiablo joined
[08:18] *** wolverian joined
[08:18] *** jan__ joined
[08:18] *** Ara4n joined
[08:18] *** Maghnus joined
[08:18] *** SamB joined
[08:18] *** felipe joined
[08:18] *** eternaleye_ joined
[08:18] *** gbacon joined
[08:18] *** lumi joined
[08:18] *** Lunchy joined
[08:18] *** kcwu joined
[08:18] *** dmq joined
[08:18] *** Kattana joined
[08:18] *** yahooooo joined
[08:18] *** mj41 joined
[08:18] *** SubStack joined
[08:18] *** perlbot joined
[08:18] *** pugs_svnbot joined
[08:18] *** beppu joined
[08:18] *** TreyHarris joined
[08:18] *** yves joined
[08:18] *** ilbot2 joined
[08:18] *** irc.freenode.net sets mode: +o ingy

[08:18] *** rafl joined
[08:18] *** kolibrie joined
[08:18] *** mtve joined
[08:18] *** obra joined
[08:18] *** buubot joined
[08:18] *** speckbot joined
[08:18] *** Tene joined
[08:18] *** nipotaway joined
[08:18] *** IRSeekBot joined
[08:18] *** Maddingue joined
[08:18] *** arguile joined
[08:18] *** jrockway joined
[08:18] *** jjore joined
[08:18] *** Juerd joined
[08:18] *** clkao joined
[08:18] *** buu joined
[08:18] *** audreyt joined
[08:18] *** allbery_b joined
[08:18] *** nnunley joined
[08:18] *** moritz_ joined
[08:18] *** avar joined
[08:18] *** lisppaste3 joined
[08:18] *** yath joined
[08:18] *** rakudo_svn joined
[08:18] *** broquaint joined
[08:18] *** kane_ joined
[08:18] *** charsbar joined
[08:18] *** awwaiid joined
[08:18] *** osfameron joined
[08:18] *** Gothmog_ joined
[08:18] *** Khisanth joined
[08:18] *** zostay joined
[08:18] *** nothingmuch joined
[08:18] *** pmichaud joined
[08:18] *** PerlJam joined
[08:18] *** Ingmar joined
[08:18] *** qmole_ joined
[08:18] *** jiing joined
[08:18] *** fullermd joined
[08:18] *** apeiron joined
[08:18] *** Caelum joined
[08:18] *** cj joined
[08:18] *** rhr_ joined
[08:18] *** Coleoid joined
[08:18] *** dalek joined
[08:18] *** mofino joined
[08:18] *** spinclad joined
[08:18] *** pasteling joined
[08:18] *** gugod joined
[08:18] *** silug joined
[08:18] *** cls_bsd joined
[08:18] *** diakopter joined
[08:18] *** s1n joined
[08:18] *** TimToady joined
[08:18] *** irc.freenode.net sets mode: +o TimToady

[08:38] *** masak joined
[09:02] *** agentzh joined
[09:15] *** Jedai left
[09:34] *** ruoso joined
[09:44] *** redicaps joined
[10:03] *** Alias__ left
[10:18] <pugs_svnbot> r20926 | masak++ | corrected a few grammatical errors

[10:19] <masak> can I do `next` in a sub called from within a for loop?

[10:19] *** iblechbot left
[10:24] *** wknight8111 joined
[10:28] *** meppl joined
[10:35] *** BinGOs left
[10:35] *** Jedai joined
[10:51] *** a-jing joined
[10:51] *** a-jing left
[10:53] *** BinGOs joined
[10:57] *** wknight8111 left
[11:03] *** iblechbot joined
[11:35] *** alanhaggai joined
[11:42] *** Harleaquin joined
[11:42] *** Harleaquin left
[11:58] *** Coleoid left
[12:01] *** alanhaggai left
[12:25] *** alanhaggai joined
[12:55] *** alanhaggai left
[12:55] *** alanhaggai joined
[13:10] *** iblechbot left
[13:28] *** pbuetow_ left
[13:28] *** pbuetow joined
[13:36] *** ruoso left
[13:54] *** xinming_ joined
[13:58] *** ruoso joined
[14:04] *** alanhaggai left
[14:07] *** xinming left
[14:15] <rakudo_svn> r28594 | pmichaud++ | [rakudo]:

[14:15] <rakudo_svn> r28594 | pmichaud++ | * Update spectest-progress

[14:15] <rakudo_svn> r28594 | pmichaud++ | * 65 files, 794 passing tests

[14:19] <rakudo_svn> r28595 | pmichaud++ | [rakudo]:

[14:19] <rakudo_svn> r28595 | pmichaud++ | * Update README.

[14:37] *** alanhaggai joined
[14:47] *** iblechbot joined
[14:52] <pugs_svnbot> r20927 | pmichaud++ | Add some tests for statement termination and empty statements

[14:52] <pugs_svnbot> r20927 | pmichaud++ | (contributed by Ronald Schmidt)

[14:55] *** Limbic_Region joined
[14:57] <rakudo_svn> r28596 | pmichaud++ | [rakudo]:

[14:57] <rakudo_svn> r28596 | pmichaud++ | * Set svn:ignore properties on src/ops .

[14:58] <rakudo_svn> r28597 | pmichaud++ | [rakudo]:

[14:58] <rakudo_svn> r28597 | pmichaud++ | * Handle empty statements (RT#55594)

[14:58] <rakudo_svn> r28597 | pmichaud++ | * Patch courtesy Ronald Schmidt <ronaldxs@software-path.com>

[15:08] <rakudo_svn> r28598 | pmichaud++ | [rakudo]:

[15:08] <rakudo_svn> r28598 | pmichaud++ | * Allow 'make spectest_regression' to work even when "svn up" fails on t/spec.

[15:08] <rakudo_svn> r28598 | pmichaud++ | * RT#56050 patch courtesy Deven T. Corzine [email@hidden.address]
[15:17] *** Alias_ joined
[15:20] <rakudo_svn> r28599 | pmichaud++ | [rakudo]:

[15:20] <rakudo_svn> r28599 | pmichaud++ | * Add chop.t and remove comb.t from spectest_regression (RT#56068, moritz++)

[15:20] <rakudo_svn> r28599 | pmichaud++ | * Patch courtesy Moritz Lenz [email@hidden.address]
[15:27] *** Alias_ left
[15:27] <pugs_svnbot> r20928 | pmichaud++ | Test suite TASKS: Conflict between S29 and rand.t

[15:31] *** cognominal_ left
[15:35] <masak> I have GHC 6.8.3. what's my best chance of compiling a pugs binary?

[15:37] <audreyt> masak: install Cabal 1.4.0.1 and cabal-install 0.5.1 from hackage

[15:37] <audreyt> (which will in turn need zlib and HTTP)

[15:37] <audreyt> and then see if "cabal update ; cabal install pugs-compat" works

[15:37] <audreyt> if it works, "cabal install Pugs" will work.

[15:38] <masak> audreyt: thank you

[15:38] <audreyt> where "will" means, like, 20 hours from now.

[15:38] <masak> I found the hackage page

[15:38] <masak> let's see if I can figure out how to install things...

[15:38] <audreyt> let cabal-install handle it for you

[15:39] <masak> audreyt: ok, looking for Cabal

[15:39] <audreyt> I'm not yet done with partitioning pugs (7 parts so far, about 5 to go)

[15:39] <audreyt> but the parts already on hackage should build cleanly.

[15:39] <masak> audreyt: you're working on pugs? that's good news

[15:39] <masak> audreyt++

[15:39] <audreyt> I'm not... I'm just partitioning it :)

[15:40] <diakopter> audreyt: wow.  talk about JIT - Sat Jun 21 08:15:21 PDT 2008 AudreyTang pugs-compat 0.0.1

[15:40] <audreyt> :)

[15:41] <audreyt> don't have any expectations though. this is just me cannibalizing parts of pugs for $job projects :)

[15:41] <diakopter> expectations-- while expectations

[15:41] <audreyt> the few pugs-related code I'm coding won't make any sense until 5.^Wghc 6.10.

[15:42] <masak> what happens then?

[15:43] <diakopter> masak: expectations-- while expectations :P

[15:43] <masak> diakopter: righty-ho.

[15:45] <diakopter> cool... http://hackage.haskell.org/packages/archive/pkg-list.html#cat:Pugs

[15:46] <lambdabot> http://tinyurl.com/yqov7f

[15:47] <masak> where do I get HTTP and zlib?

[15:47] <masak> nvm, found http://www.haskell.org/http/

[15:47] <lambdabot> Title: Haskell HTTP package

[15:48] <diakopter> masak: cabal install http

[15:48] <diakopter> I think

[15:48] <masak> diakopter: well, I'm building cabal-install, so...

[15:48] <diakopter> oh; heh

[15:48] <diakopter> sorry

[15:48] <masak> but thanks

[15:49] * diakopter tries the same exercise

[15:54] * Limbic_Region rubs his eyes and sees audreyt speaking and thinks he must be dreaming

[15:54] <diakopter> Limbic_Region: you're dreaming; go back to sleep ;)

[15:55] <diakopter> Limbic_Region: btw, I'm sorry I didn't introduce myself at yapc :/

[15:55] <Limbic_Region> no worries

[15:55] <Limbic_Region> I did meet lots of people

[15:56] <Limbic_Region> I am hoping to meet a lot more next year - since it will be relatively close

[15:56] <diakopter> Pitt's Borough

[15:57] <Limbic_Region> yeah, it is a 4 hour drive from here

[15:57] <Limbic_Region> and Jean should be driving by then

[15:57] <Limbic_Region> so I should be able to be there for pre and post activities

[15:58] * Limbic_Region is going to upload YAPC photos tonight as well as one more blog post on all the people he met

[16:00] <masak> audreyt: pugs-compat landed just fine. crossing fingers for 20 hours

[16:01] <audreyt> masak: cool thanks!

[16:02] *** masak left
[16:17] <yath> hum

[16:17] <yath> i'm just trying to build pugs on debian and get http://paste.debian.net/7081/

[16:18] <yath> am i missing something?

[16:18] <TimToady> audreyt++ for learning hard lessons on Sustainability :)

[16:22] *** Jedai left
[16:29] *** sri_work joined
[16:37] *** fridim joined
[16:39] <fridim> hi

[16:39] <fridim> There is a dead link on pugscode.org :   wiki  ->  http://rakudo.org/perl6/

[16:40] <diakopter> fridim: if you'd like, you can fix it... :) you just need a commitbit for pugscode svn

[16:41] <diakopter> otherwise I'll fix it...  it should point to http://perlfoundation.org/perl6

[16:41] <lambdabot> Title: Perl 6 / Perl 6

[16:42] <Auzon> I'll get it :)

[16:43] <pmichaud> fridim++  # reporting broken links

[16:43] <pugs_svnbot> r20929 | Auzon++ | [pugscode.org] fixed bad URL

[16:44] <Auzon> Yes, fridim++

[16:44] <pmichaud> Auzon++ # fixing broken links

[16:46] *** kanru joined
[16:46] *** stevan_ left
[16:59] *** zaphar_ps left
[16:59] *** stevan_ joined
[17:23] * diakopter runs cabal install pugs-compat

[17:24] <diakopter> audreyt: if I muck around in pugs' parser... how conflicted will I be when I merge in your (eventual) commit(s)..?

[17:27] *** hanekomu joined
[17:50] *** alanhaggai_ joined
[17:50] *** Jedai joined
[18:04] *** lichtkind joined
[18:04] *** alanhaggai left
[18:11] *** sri_work_ joined
[18:13] *** polettix joined
[18:15] *** sri_work left
[18:18] *** Khisanth left
[18:21] *** Khisanth joined
[18:25] *** explorer joined
[18:29] <pugs_svnbot> r20930 | pmichaud++ | S04-statements/try.t:  Link #?rakudo skip to RT#56184.

[18:32] <pugs_svnbot> r20931 | pmichaud++ | S29-num/roots.t:  update error message, avoid needless eval.

[18:33] *** polettix left
[18:33] <pugs_svnbot> r20932 | pmichaud++ | S29-num/exp.t: correct skip message for rakudo

[18:35] <lichtkind> expression in if statement is evaled into bool scalar  context?

[18:36] <spinclad> lichtkind, sounds right

[18:36] *** alanhaggai__ joined
[18:42] *** lichtkind_ joined
[18:43] <lichtkind_> spinclad: thought too but a phrase in syn 4 irritates me

[18:52] *** alanhaggai_ left
[18:54] <Auzon> perl6: say list().WHAT

[18:54] <p6eval> kp6 r20932: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[18:54] <p6eval> ..pugs: OUTPUT[Array␤]

[18:54] <p6eval> ..rakudo r28599: OUTPUT[List␤]

[18:54] <p6eval> ..elf r20932: OUTPUT[Undefined subroutine &GLOBAL::list called at (eval 117) line 3.␤ at ./elf_f line 3854␤]

[18:54] <Auzon> perl6: say list().WHAT ~~ List

[18:54] <p6eval> kp6 r20932: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[18:54] <p6eval> ..pugs: OUTPUT[1␤]

[18:54] <p6eval> ..rakudo r28599: OUTPUT[1␤]

[18:54] <p6eval> ..elf r20932: OUTPUT[Undefined subroutine &GLOBAL::list called at (eval 121) line 3.␤ at ./elf_f line 3854␤]

[19:00] *** lichtkind left
[19:14] <Auzon> perl6: my $a = 5; say list($a).perl; say list($a) == $a;

[19:14] <p6eval> kp6 r20932: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[19:14] <p6eval> ..pugs: OUTPUT[\5␤5␤]

[19:14] <p6eval> ..rakudo r28599: OUTPUT[[5]␤0␤]

[19:14] <p6eval> ..elf r20932: OUTPUT[Undefined subroutine &GLOBAL::list called at (eval 121) line 4.␤ at ./elf_f line 3854␤]

[19:16] <Auzon> perl6: my $a = 5; say list($a) ~~ $a

[19:16] <p6eval> kp6 r20932: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[19:16] <p6eval> ..pugs: OUTPUT[5␤]

[19:16] <p6eval> ..rakudo r28599: OUTPUT[0␤]

[19:16] <p6eval> ..elf r20932: OUTPUT[Undefined subroutine &GLOBAL::list called at (eval 121) line 4.␤ at ./elf_f line 3854␤]

[19:18] <Auzon> perl6: say ''.defined

[19:18] <p6eval> kp6 r20932: OUTPUT[1␤]

[19:18] <p6eval> ..pugs: OUTPUT[1␤]

[19:18] <p6eval> ..rakudo r28600: OUTPUT[Method 'defined' not found for invocant of class 'Perl6Str'␤current instr.: '_block11' pc 31 (EVAL_13:17)␤

[19:18] <p6eval> ..elf r20932: OUTPUT[Can't call method "defined" without a package or object reference at (eval 115) line 3.␤ at ./elf_f line 3854␤]

[19:18] <Auzon> perl6: say undef.defined

[19:18] <p6eval> kp6 r20932: OUTPUT[DISPATCH: calling defined on invalid object:$VAR1 = undef;␤␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 128␤     main::DISPATCH('undef', 'defined') called at - line 11␤]

[19:18] <p6eval> ..pugs: OUTPUT[␤]

[19:18] <p6eval> ..rakudo r28600: OUTPUT[Method 'defined' not found for invocant of class 'Failure'␤current instr.: '_block11' pc 37 (EVAL_13:17)␤

[19:18] <p6eval> ..elf r20932: OUTPUT[Can't call method "defined" on an undefined value at (eval 117) line 3.␤ at ./elf_f line 3854␤]

[19:27] *** c9s left
[19:32] *** smtms joined
[19:33] *** smokemachine joined
[19:33] <Auzon> perl6: say list(5) == (5,)

[19:33] <p6eval> kp6 r20932: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[19:33] <p6eval> ..pugs: OUTPUT[␤]

[19:33] <p6eval> ..rakudo r28601: OUTPUT[1␤]

[19:33] <p6eval> ..elf r20932: OUTPUT[Undefined subroutine &GLOBAL::list called at (eval 117) line 3.␤ at ./elf_f line 3854␤]

[19:41] *** xinming_ left
[19:41] *** xinming joined
[19:52] *** cognominal_ joined
[19:53] <Auzon> rakudo: ;

[19:53] <p6eval> rakudo r28602 RESULT[Null PMC access in find_method()␤current instr.: '_block11' pc 38 (EVAL_13:18)␤

[19:53] <Auzon> rakudo:;

[19:54] <pmichaud> that's odd.

[19:55] <Auzon> Which one?

[19:55] <pmichaud> $ ./parrot perl6.pbc -e ';'

[19:55] <pmichaud> $

[19:55] <Auzon> The second one might not match evalbot's pattern

[19:56] <pmichaud> right, but simply sending rakudo a semicolon shouldn't result in the find_method error.

[19:56] <Auzon> odd

[19:56] <pmichaud> i.e., it should work.  It works in my version of rakudo.

[19:56] <Auzon> If it was a recent Parrot change, it may not be rebuilt yet

[19:56] <pmichaud> shouldn't require a Parrot change, though.

[19:56] <Auzon> odd

[19:57] <Auzon> oh

[19:57] <Auzon> Evalbot was probably wrapping it weirdly

[19:58] <Auzon> It wraps it with this is there is no output to STDOUT: '( ( do { ' . $program . "\n} ).perl ).print"

[19:59] <pmichaud> ah, and we can't find the .perl method on a non-existent object.

[19:59] <pmichaud> since  { ; }  doesn't actually return anything.

[20:00] <Auzon> right. (do {;}).perl is enough

[20:07] *** Alias_ joined
[20:08] *** ruoso left
[20:10] <Auzon> rakudo: say @(1,2)

[20:11] <p6eval> rakudo r28602 OUTPUT[12␤]

[20:11] <Auzon> rakudo: say 1,2 Z 3,4

[20:11] <p6eval> rakudo r28602 OUTPUT[132 4␤]

[20:11] <Auzon> rakudo: say @(1,2 Z 3,4)

[20:11] <p6eval> rakudo r28602 OUTPUT[132 4␤]

[20:11] <Auzon> rakudo: say @((1,2) Z (3,4))

[20:11] <p6eval> rakudo r28602 OUTPUT[132 4␤]

[20:11] <Auzon> rakudo: say @((1,2) Z (3,4)).perl

[20:11] <p6eval> rakudo r28602 OUTPUT[[1, 3, [2, 4]]␤]

[20:11] <Auzon> that's weird

[20:12] <Auzon> rakudo: ((1,2) Z (3,4)).perl.say

[20:12] <p6eval> rakudo r28602 OUTPUT[[1, 3, [2, 4]]␤]

[20:13] *** lichtkind_ is now known as lichtkind

[20:13] <Auzon> rkaudo: item(1,2).perl.say

[20:13] <Auzon> rakudo: item(1,2).perl.say

[20:13] <p6eval> rakudo r28606 OUTPUT[Could not find non-existent sub item␤current instr.: '_block11' pc 35 (EVAL_12:19)␤

[20:13] *** ruoso joined
[20:13] <Auzon> rakudo: item(1).perl.say

[20:13] <p6eval> rakudo r28606 OUTPUT[Could not find non-existent sub item␤current instr.: '_block11' pc 28 (EVAL_12:17)␤

[20:16] <Auzon> rakudo: $(1).say

[20:16] <p6eval> rakudo r28606 OUTPUT[1␤]

[20:16] <Auzon> rakudo: $(1,2).say

[20:16] <p6eval> rakudo r28606 OUTPUT[1 2␤]

[20:17] <Auzon> There might be some low hanging fruit with getting item() working here.

[20:19] *** lichtkind left
[20:25] <Auzon> rakudo: say @@ 1

[20:25] <p6eval> rakudo r28607 OUTPUT[Statement not terminated properly at line 1, near "@@ 1"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:25] <Auzon> rakudo: say @@(1)

[20:25] <p6eval> rakudo r28607 OUTPUT[Statement not terminated properly at line 1, near "@@(1)"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:26] <pmichaud> there's a problem with ZIP.

[20:26] <pmichaud> getting item() to work should be no problem.

[20:27] <Auzon> rakudo: list(1,2 X 3,4).perl

[20:27] <p6eval> rakudo r28607 RESULT["[1, 3, 1, 4, 2, 3, [2, 4]]"]

[20:27] <pmichaud> same with X

[20:27] <pmichaud> I don't know who implemented those, but they're seriously broken.

[20:28] <Auzon> I'll fudge them, then. Presumably, Rakudo will be able to run the new file I'm making

[20:31] <Auzon> rakudo: say (% 1,2).perl

[20:31] <p6eval> rakudo r28608 OUTPUT[Statement not terminated properly at line 1, near "(% 1,2).pe"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:31] <Auzon> rakudo: say (%(1,2)).perl

[20:31] <p6eval> rakudo r28608 OUTPUT[{"1" => 2}␤]

[20:31] <Auzon> rakudo: say (hash(1,2)).perl

[20:31] <p6eval> rakudo r28608 OUTPUT[{"1" => 2}␤]

[20:32] <pmichaud> I'm a little surprised that %(1,2) worked.  :-)

[20:32] <Auzon> Me too.

[20:32] *** smokemachine left
[20:32] <pmichaud> rakudo:  say %(1,2).WHAT;

[20:32] <p6eval> rakudo r28608 OUTPUT[Hash␤]

[20:32] <Auzon> I am finding quite a few things that are untested that work in Rakudo, which is always nice

[20:33] <pmichaud> what should   item()   return?

[20:33] <Auzon> item() and $() should be exactly the same.

[20:34] <pmichaud> so item() would return $/.item() ?

[20:34] <pmichaud> that seems, weird.

[20:34] <pmichaud> by that argument   list() and @() should be the same, so   list() should return $/.list ?

[20:34] <Auzon> "To force a non-flattening item context, use the "item" operator."

[20:35] <pmichaud> oh, so item is really prefix:item, then?

[20:35] <Auzon> Yeah, sorry, I just had to keep parens for proper precedence in my tests

[20:35] <Auzon> I think it's prefix anyway.

[20:36] *** jhorwitz joined
[20:36] <pmichaud> item $a, $b  would be the same as   item($a), $b  and not  item($a,$b)  then?

[20:36] <Auzon> scroll down until you see 'the item contextualizer' :  http://perlcabal.org/syn/S03.html#List_prefix_precedence

[20:36] <lambdabot> Title: S03

[20:37] <Auzon> the 'Sigils as contextualizer listops' section is also good

[20:38] <pmichaud> yes, but we also have in S05:  $() is a shorthand for $($/).

[20:38] <pmichaud> and

[20:38] <pmichaud> Use @() as a shorthand for @($/) to flatten the positional captures under list context.

[20:38] <pmichaud> so I'm pretty sure that list() is not _exactly_ equivalent to @()

[20:39] <pmichaud> (although list(...) would be equivalent to @(...) )

[20:39] <Auzon> S03 says that the item contextualizer is 'equivalent to $()'

[20:39] <pmichaud> I know that.

[20:39] <pmichaud> I'm saying that S03 is likely imprecise there.

[20:40] <pmichaud> because S03 also says that list() is equivalent to @()

[20:40] <Auzon> Oh, ok.

[20:40] <pmichaud> and S05 says that @() is a shorthand for @($/)

[20:40] <pmichaud> which would mean that list() is a shorthand for @($/)

[20:40] <pmichaud> and I'm pretty sure that's not what is intended.

[20:42] <pmichaud> (and leaves unanswered the question of "what should item() return?")

[20:44] <pmichaud> I'm going to guess that item() returns an empty Array for now.

[20:45] <Auzon> Sounds just as good as anything else.

[20:46] *** rindolf joined
[20:46] <rindolf> Hello good people! Fine Sabbath to you.

[20:46] <Auzon> Hi rindolf.

[20:47] <rindolf> Hi Auzon 

[20:47] <pmichaud> $ ./parrot perl6.pbc

[20:47] <pmichaud> > say item(3).WHAT;

[20:47] <pmichaud> Int

[20:47] <pmichaud> > say item(3,4).WHAT;

[20:47] <pmichaud> Array

[20:47] <lambdabot>  Parse error at ";" (column 17)

[20:47] <lambdabot>  Parse error at ";" (column 19)

[20:47] <pmichaud> > say item().WHAT;

[20:47] <lambdabot>  Parse error at ";" (column 16)

[20:47] <pmichaud> Array

[20:47] <pmichaud> >

[20:49] <pmichaud> Auzon: shall I send a message to p6l for clarification of list(), item(), etc.?

[20:52] <Auzon> That'd be nice

[20:54] <Auzon> rakudo: hash(1).perl.say

[20:54] <p6eval> rakudo r28610 OUTPUT[Odd number of elements found where hash expected␤current instr.: 'parrot;List;hash' pc 2120 (src/gen_builtins.pir:1553)␤

[20:54] <pmichaud> can't create a hash from a list of one element.

[20:54] <pmichaud> pugs: hash(1).perl.say

[20:54] <p6eval> OUTPUT[*** Odd number of elements found where hash expected: VList [VInt 1]␤    at /tmp/FT0j0JEEK5 line 1, column 1 - line 2, column 1␤]

[20:55] <Auzon> Right, that's what I'm testing

[20:55] <pmichaud> okay. :-)

[20:57] *** alanhaggai__ left
[20:58] <Auzon> rakudo: (@ 1).WHAT.say

[20:58] <p6eval> rakudo r28610 OUTPUT[Syntax error at line 1, near "(@ 1).WHAT"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:58] <pmichaud> rakudo doesn't know prefix:@ yet.

[20:58] <Auzon> rakudo: (@ 1,2).WHAT.say

[20:58] <p6eval> rakudo r28610 OUTPUT[Syntax error at line 1, near "(@ 1,2).WH"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[20:59] <Auzon> rakudo: (@(1,2)).WHAT.say

[20:59] <p6eval> rakudo r28610 OUTPUT[List␤]

[20:59] <Auzon> It should work either way, from what I can tell

[21:00] <pmichaud> prefix:<@> is parsed differently from circumfix:<@( )>

[21:02] <pmichaud> oops

[21:02] <pmichaud> it's term:sigil

[21:02] *** rindolf left
[21:02] <pmichaud> still, they're parsed differently.  :-)

[21:03] <pmichaud> (which is why rakudo supports one and not the other thus far :-)

[21:04] <Auzon> How hard is it to support the other version? Is it just a matter of adding a rule somewhere, or is it more complicated than that?

[21:04] <rakudo_svn> r28611 | pmichaud++ | [rakudo]:

[21:04] <rakudo_svn> r28611 | pmichaud++ | * Fix trailing space problem in src/parser/actions.pm .

[21:04] <pmichaud> at the moment it's a little more complicated, because it's a little difficult to get term:<something> parsing correctly.

[21:04] <pmichaud> that's one of my "planned to do this weekend" items.

[21:05] <Auzon> Why is @(values) parsed as a circumfix instead of a term:sigil in front of some parenthesized values?

[21:05] <rakudo_svn> r28612 | pmichaud++ | [rakudo]:

[21:05] <rakudo_svn> r28612 | pmichaud++ | * Add item() function.

[21:05] <diakopter> pmurias++ # making the yap6 parser combinators even more lazily created

[21:06] <pmichaud> I don't know the reason off-hand, but I'm sure there probably is one.

[21:08] <pmichaud> afk # lunch

[21:08] <Auzon> Thanks for item by the way.

[21:21] *** Alias__ joined
[21:22] *** Alias_ left
[21:36] <diakopter> rakudo: sub say { undef.say }; say();

[21:36] <p6eval> rakudo r28612 OUTPUT[[oops; continuation 0xb76b03e0 of type 21 is trying to jump from runloop 1429 to runloop 98]␤[oops; continuation 0xb76b09c8 of type 21 is trying to jump from runloop 1429 to runloop 98]␤[oops; continuation 0xb76b0fb0 of type 21 is trying to jump from runloop 1429 to runloop

[21:36] <p6eval> ..98]␤[...

[21:36] * diakopter guffaws, but only briefly

[21:37] *** Alias__ left
[21:38] *** Jedai left
[21:40] <diakopter> omg

[21:48] <diakopter> rakudo: my $a = sub { 3.say }; $a();

[21:48] <p6eval> rakudo r28615 OUTPUT[3␤]

[22:07] *** simcop2387 left
[22:07] *** simcop2387 joined
[22:09] *** simcop2387 left
[22:09] *** simcop2387 joined
[22:16] <pmichaud> pugs:  sub foo {};   say foo().WHAT;

[22:16] <p6eval> OUTPUT[Scalar␤]

[22:16] <pugs_svnbot> r20933 | diakopter++ | [yap6] generalized the lambda-rule parser combinator generator, so lrule is now just rule.  speedups ensue.

[22:16] <pugs_svnbot> r20933 | diakopter++ | Any rule can now serve as a meta-rule constructor, which paves the way for token() & regex() rule generators... 

[22:17] <diakopter> note this hilarity... ;)   no warnings qw{ reserved closure recursion };

[22:17] <diakopter> wait, sorry, it's   no warnings qw{ reserved closure recursion prototype };

[22:19] <diakopter> to explain line 2 of that commit message...

[22:23] <diakopter> your components of a :ratchet (match a.m.a.p.) pattern or a regex pattern would be passed into the regex() constructor, which takes the component rules as parameters and applies the appropriate whitespace or chaining rules.

[22:24] <diakopter> TimToady: any thoughts on this idea of a rule template? 

[22:25] *** iblechbot left
[22:27] <diakopter> another application of this abstraction would be the creation of sublanguages, such as quoted spans.  the items that behave differently in quote context would be the only items needing to be substituted in the patterns in which they appear... the rest of the rules can remain as-is.  Another application would be the detection of a balanced *something* within a single pattern, which would serve as a good replacement/equivalent for backreferences.

[22:28] *** meppl left
[22:32] <diakopter> ..and for parametrized n-ary pattern constructors, you just add 'shift;' at the front of the rule if you don't want it to be head-call...

[22:32] <diakopter> (and use map({something},@_)

[22:32] <diakopter> )

[22:35] *** meppl joined
[22:39] <rakudo_svn> r28616 | pmichaud++ | [rakudo]:

[22:39] <rakudo_svn> r28616 | pmichaud++ | * Update rakudo's grammar with various changes to STD.pm .

[22:53] *** simcop2387 left
[22:54] *** simcop2387 joined
[23:02] <diakopter> .oO( ...another application of the parametric/templated patterns would be the opp/expression engine. Each precedence layer would be represented as a parametric pattern (for each shape/symbol), with the argument placeholders representing the next layer down... and then if someone wants to insert another layer, the declarative op table is merely regenerated from the new list, without any funny business necessary.  If that style of operator precedence ...

[23:03] <diakopter> ... turns out to be too inefficient, then it wouldn't be as helpful.... )

[23:07] *** hanekomu_ joined
[23:14] <pugs_svnbot> r20934 | cjfields++ | Add more tests, latest RT patch passes all but tr///

[23:18] *** hanekomu left
[23:18] *** cjfields joined
[23:31] <pmichaud> diakopter: fwiw, when writing PGE I was personally very surprised at how much more efficient an operator precedence parser is compared to rec-descent, even for a small number (6) of precedence levels.

[23:31] <pmichaud> the parser for p6 regexes was originally rec-descent, but I switched it over to opp after seeing how slow rec-descent was.

[23:31] <diakopter> pmichaud: did you use a precedence climbing algorithm or shunt-yard

[23:32] <pmichaud> for the opp?

[23:32] <diakopter> ye

[23:32] <diakopter> s

[23:32] <pmichaud> I don't know the terms "precedence climbing" versus "shunt-yard"

[23:32] <pmichaud> it's a pretty standard shift/reduce bottom-up parser.

[23:33] <diakopter> http://en.wikipedia.org/wiki/Operator-precedence_parser mentions the shunting-yard algorithm and your PGE, as well as has a footnote to the prec-climbing one

[23:35] <diakopter> http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm is the "climbing" one...

[23:35] <lambdabot> Title:

[23:36] <diakopter> I've been concerned that I can't elegantly shoehorn the shift-reduce one into this functional/combinator approach, so I was looking at alternatives

[23:37] <pmichaud> pge's opp is a shunting yard algorithm according to the exp_parsing.htm description.

[23:37] <diakopter> however, that wikipedia article needs work/clarification.... oh, okay.. that helps.

[23:37] <diakopter> thanks :)

[23:38] <diakopter> I assume circumfix precedence isn't really treated as its own precedence level, right? 

[23:38] *** Eevee joined
[23:39] <pmichaud> well, circumfix: is a syntactic category, not a precedence level

[23:39] <pmichaud> but it tends to occur on or about the same level as "term"

[23:40] <diakopter> ok; that's what I thought.. oh, nm, I was misreading S03.  /slapself

[23:47] <diakopter> pmichaud: would the C source or the PIR?? source be easier for me to read if I can read C marginally better than PIR (zero)..?

[23:47] <diakopter> for PGE I mean

[23:48] *** hanekomu_ left
[23:49] <diakopter> or is it written in PASM...?

[23:52] <pmichaud> PGE is written in PIR.

[23:53] <pmichaud> (which, in retrospect, writing PGE in PIR was far easier than trying to do it in C.)

[23:54] <diakopter> I guess I could take a look at the source of Parse::Yapp

[23:55] * Limbic_Region rather likes Parse::Yapp but he has only used it for one toy project

[23:55] <Limbic_Region> what I liked about it was that it handled both precedence and associativity out of the box with no need to eliminate left recursion

[23:55] <Limbic_Region> which all 3 were problems that I needed for my toy project

[23:56] <Limbic_Region> and P::RD sucked in those regards

[23:56] <diakopter> Limbic_Region: my toy project solves all but the inefficient precedence part

[23:56] <diakopter> yet..

[23:56] <diakopter> (you can express left associate operators in the natural way)

[23:56] <Limbic_Region> diakopter - is your intention to make the parser part of the project for general use?

[23:56] <diakopter> associative

[23:57] <diakopter> Limbic_Region: well, I've run into a theoretical snag

[23:57] <diakopter> you can't have both memoization and look-behind.

[23:57] <diakopter> and memoization is key to "Packrat" parsing

[23:58] <diakopter> so hrm

[23:58] <diakopter> now that I verbalized the problem, I see the solution

[23:59] <Limbic_Region> diakopter - have you looked at the Earley Parsing algorithm?

[23:59] <diakopter> just have the memotable lookup be aware of when it's "in" a look-behind, probably by a global variable... and have it always redo the scan at that position for that pattern

[23:59] <diakopter> Limbic_Region: I read about it yesterday a bit

