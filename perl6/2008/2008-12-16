[00:00] <rakudo_svn> r33939 | pmichaud++ | [rakudo]:  Remove obsolete 'hash' method from List.

[00:00] <rakudo_svn> r33940 | pmichaud++ | [rakudo]:  Make sure Protoobjects don't participate in list flattening.

[00:00] *** DemoFreak left
[00:01] *** pbuetow left
[00:04] *** buubot left
[00:05] *** buubot joined
[00:11] *** jferrero joined
[00:16] *** vixey left
[00:17] <pugs_svn> r24395 | azawawi++ | [Syntax::Highlight::Perl6] More POD fixes

[00:20] *** mpeters joined
[00:22] *** SamB joined
[00:29] <pugs_svn> r24396 | azawawi++ | [Syntax::Highlight::Perl6] Bumped version to 0.026 + POD updates.... Releasing to CPAN

[00:32] <mpeters> what's the difference between perl6 and plan9

[00:33] <mpeters> about 2 letters and 3 increments! ha-ha-ha

[00:33] *** mpeter left
[00:36] <mpeters> hmm

[00:37] *** mpeters left
[00:37] *** mpeter joined
[00:37] <mpeter> hmm

[00:40] *** jgustavo joined
[00:42] *** bacek__ joined
[00:46] *** alech left
[00:48] *** alech joined
[00:51] *** jgustavo left
[00:52] <pugs_svn> r24397 | ruoso++ | [smop/lowdoc] The 01_base.pod document can be considered ready... please review it ;) 

[00:52] <ruoso> doesn't svn substitute $id$? 

[00:54] * ruoso sleep & 

[00:58] *** ejs joined
[01:00] <eternaleye_> Hmm. S17 has $obj.wake_on_either_readable_or_writable_or_passed_time(3); # fixme fixme - might this be possible to solve with junctions? IE $obj.wake_on:{.readable|.writable|.passed_time(3)}}

[01:01] <eternaleye_> s/}$//

[01:06] <eternaleye_> Hm, although it's probably need to be a junction of closures, so $obj.wake_on:({.readable}|{.writable}|{.passed_time(3)})

[01:13] *** hercynium left
[01:19] *** jferrero left
[01:26] *** mpeters joined
[01:34] *** alech left
[01:43] *** mpeter left
[01:48] *** Limbic_Region left
[02:00] *** apeiron left
[02:00] *** apeiron_ joined
[02:07] <pugs_svn> r24398 | tene++ | Unfudge several given/when tests for rakudo.

[02:10] <rakudo_svn> r33942 | tene++ | [rakudo]: Basic support for continue and break in given/when.

[02:13] *** ejs1 joined
[02:22] *** apeiron_ is now known as apeiron

[02:25] *** ejs left
[02:30] *** ejs1 left
[02:30] <rakudo_svn> r33943 | tene++ | [rakudo]: Refactor some copypasta out of my last commit.

[02:30] *** ejs1 joined
[02:35] *** mpeters is now known as mpeter

[02:38] *** alanhaggai left
[02:45] *** apeiron_ joined
[02:53] *** ejs1 left
[02:56] *** apeiron left
[03:00] *** apeiron_ is now known as apeiron

[03:27] *** alc joined
[03:35] *** alc left
[03:39] *** liufeng joined
[03:40] *** mncharity joined
[03:43] *** liufeng left
[03:47] *** eternaleye_ left
[03:48] *** meppuru joined
[03:50] <meppuru> good night

[03:52] *** meppuru left
[03:55] *** Khisanth left
[03:57] *** alester left
[03:59] *** Khisanth joined
[03:59] <mncharity> meppuru: good night :)

[04:02] *** elmex_ joined
[04:03] *** Psyche^ joined
[04:05] *** meppl left
[04:06] <mncharity> <X::foo>  is parsing as a :foo colonpair.  :) lol   np to work around...

[04:08] *** Khisanth left
[04:09] *** Khisanth joined
[04:10] <rakudo_svn> r33945 | tene++ | [rakudo]: Remove more copypasta.

[04:10] <mncharity> rakudo: token foo { a }; ("a" ~~ /<foo>/){'foo'}

[04:10] <p6eval> rakudo 33944: RESULT[Method 'perl' not found for invocant of class 'PGE;Match'␤current instr.: '_block11' pc 29 (EVAL_14:16)␤]

[04:10] <mncharity> }rakudo: token foo { . }; say  ("a" ~~ /<foo>/){'foo'}

[04:11] <mncharity> rakudo: token foo { . }; say  ("a" ~~ /<foo>/){'foo'}

[04:11] <p6eval> rakudo 33944: OUTPUT[a␤]

[04:11] <mncharity> rakudo: grammar X { token foo { . } }; say  ("a" ~~ /<X::foo>/){'foo'}

[04:11] <p6eval> rakudo 33944: OUTPUT[Use of uninitialized value␤␤]

[04:11] <mncharity> rakudo: grammar X { token foo { . } }; say  ("a" ~~ /<X::foo>/){'X::foo'}

[04:11] <p6eval> rakudo 33944: OUTPUT[a␤]

[04:15] *** Patterner left
[04:15] *** Psyche^ is now known as Patterner

[04:17] *** elmex left
[04:17] *** elmex_ is now known as elmex

[04:21] *** ChrisDavaz joined
[04:23] *** eric2561 joined
[04:23] * eric2561 prepares to ask a stupid question

[04:24] <eric2561> where do i find the test suite for rakudo?

[04:24] <[particle]> cd languages/perl6 && make t/spec

[04:24] <[particle]> cd t/spec && svn info

[04:24] <[particle]> errands &

[04:28] <eric2561> ahh didn't know i needed to make it

[04:28] <eric2561> btw it looks like a lot of the wikis are out of date

[04:29] <eric2561> they say there is no perl6 executable and have stuff about pbc's which looks like it as all been fixed

[04:29] *** fuzzbox joined
[04:29] <eric2561> ahh stealing pugs tests

[04:29] <eric2561> lol

[04:30] <mncharity> the pugs repo is currently the home of the implementation independent test suite. :)

[04:31] <mncharity> the "is it p6?" language defining test suite...

[04:33] <eric2561> sounds good

[04:35] *** kcwu left
[04:37] *** alester joined
[04:40] <eric2561> i don't suppose there is a how to help page on the wiki somewhere?  i want to be able to run some of these tests and see what is working, and htere used to be a report that linked the synopsis with the tests (and vice versa) to get an idea of what still needed tests written and whats covered

[04:40] *** eternaleye_ joined
[04:40] <mncharity> looking...

[04:41] *** eternaleye left
[04:41] <mncharity> http://feather.perl6.nl/syn/ is the Snn->tests,

[04:43] *** stephens left
[04:43] <mncharity> http://www.perlfoundation.org/perl6/index.cgi is a wiki, though I believe I saw something go by about a move off of it being in progress,

[04:44] <mncharity> there's a parrot regression test / list of what works, ...somewhere (sorry, I'm not the person to ask for that:),

[04:44] <mncharity> and that's what I know.

[04:45] <eric2561> hehe okay

[04:45] <eric2561> thanks

[04:45] <eric2561> the test think was pretty close to what i was looking for

[04:45] <eric2561> actualy its exactly it

[04:45] <pmichaud> t/spectests.data  identifies the test files that rakudo runs

[04:46] <pmichaud> can run  tools/test_summary.pl  to get a different view of what's passing and failing (and why)

[04:46] <eric2561> mind if a put a link to the tests on the perl6 wiki page?

[04:46] <pmichaud> it's a wiki -- please do!

[04:47] <mncharity> TimToady: Oh channel operator, I suggest /topic http://pugscode.org/ http://planetsix.perl.org/ | nopaste: http://sial.org/pbot/perl6 | pugs: [~] <m oo se> (or rakudo:, kp6:, elf: etc.) (or perl6: for all) | irclog: http://irc.pugscode.org/ | http://feather.perl6.nl/syn/ http://www.perlfoundation.org/perl6/index.cgi

[04:47] <Tene> rakudo: [~] <m oo se>

[04:47] <p6eval> rakudo 33945: RESULT["moose"]

[04:48] <eric2561> rakudo: [+]<1 2 3>

[04:48] <p6eval> rakudo 33945: RESULT[6]

[04:49] <pmichaud> rakudo:  'rakuda do'.subst('a d', '')

[04:49] <p6eval> rakudo 33945: RESULT["rakudo"]

[04:49] <mncharity> TimToady: that is, the addition of spec and wiki links.

[04:50] <rakudo_svn> r33946 | pmichaud++ | [rakudo]:  Minor update to Capture -- it's still wrong, though.

[04:50] <eric2561> oh i finaly found the links already on the wiki

[04:51] <mncharity> pmichaud: in rakudo, given   say ("a" ~~ /a/).mumble  , is there currently a mumble which will give me a dump of the match tree?  tnx

[04:51] <pmichaud> best we have so far is  _dumper($/);   I think

[04:51] <mncharity> ooo, thanks

[04:52] <mncharity> rakudo: say _dumper("a" ~~ /a/)

[04:52] <p6eval> rakudo 33945: OUTPUT["VAR1" => PMC 'PGE;Match' => "a" @ 0␤Null PMC access in isa()␤current instr.: 'parrot;List;!flatten' pc 3549 (src/classes/List.pir:184)␤]

[04:52] <pmichaud> I need to bring Match more fully into the rakudo runtime.

[04:52] <pmichaud> rakudo:  'a' ~~ /(a)/;  _dumper($/);

[04:52] <p6eval> rakudo 33945: OUTPUT["VAR1" => PMC 'PGE;Match' => "a" @ 0 {␤    [0] => PMC 'PGE;Match' => "a" @ 0␤}␤]

[04:52] <pmichaud> it's not entirely clear how .perl should look for Match objects.

[04:53] <mncharity> ah, ok.  thanks.  nice to have an executable spec reference.

[04:53] <eric2561> rakudo: (1+1).perl

[04:53] <p6eval> rakudo 33945: RESULT["2"]

[04:53] <pmichaud> rakudo: (~(1+1)).perl;

[04:53] <eric2561> rakudo: ({this=>'that'}).perl

[04:53] <p6eval> rakudo 33945: RESULT["\"2\""]

[04:53] <p6eval> rakudo 33945: RESULT["\{\"this\" => \"that\"}"]

[04:54] <mncharity> re how look,  Match.new(...)?  :)    hmm.  .orig :/  ...   {my $gensym = "orig";  Match.new(...) }  ?

[04:55] <pmichaud> yes, Match.new might work, although it has both positional and named components.

[04:55] <pmichaud> and a result component

[04:55] <eric2561> those dynamic syn's on feather arn't linked to any results ;(

[04:55] <pmichaud> so perhaps  Match.new( list => (...), hash => { ... }, ...? )

[04:56] <pmichaud> eric2561: afaik, the dynamic syns are only tied to pugs' test results, not rakudo's.

[04:56] <pmichaud> although if someone wants to work on tying them to rakudo's results, I'll be _very_ happy.

[04:57] <eric2561> i'll sleep on it ;)

[04:57] <eric2561> i'd love to help anyway i can though, and that sounds quite challenging ;) sense i have looked at any of this in quite a while

[04:58] <eric2561> off to sleep for now

[04:58] * mncharity wonders if feather is actually still tracking pugs (eg, updated to new ghc, etc).

[04:58] <pmichaud> mncharity: I'm guessing "no"

[04:58] <mncharity> eric2561: thanks for coming by

[04:58] <mncharity> :/

[04:58] <eric2561> i gotta remember to log off at work so i'm not 256 there and 2561 here

[04:58] <eric2561> hehe

[04:58] <eric2561> later

[05:00] <mncharity> :) 2561314...

[05:02] <mncharity> oh, the temptations of fudging bootstrap... on little line to suck in a rx prelude... written in p5.  vs bunch of work to translate it into p6. :/   ah well, bunch of work.

[05:03] <mncharity> s/on/one

[05:04] *** eric2561 left
[05:10] <rakudo_svn> r33947 | pmichaud++ | [rakudo]:  Fix hash interpolation into lists.

[05:29] <pugs_svn> r24399 | pmichaud++ | [t/spec]:  rakudo fudging and test fixes

[05:32] <mncharity> If anyone wanted to work on STD.pm,  regex alpha {:P5 [[:alpha:]]}  parsing as a group with an :alpha modifier and a commit... well, perhaps I'm misunderstanding how to get into p5 re.

[05:33] <mncharity> rakudo: " a" ~~ /:P5 [[:alpha:]]/; _dumper($/)

[05:33] <p6eval> rakudo 33947: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset -1, found ')'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[05:33] <mncharity> rakudo: "a" ~~ /:P5::[[:alpha:]]/; _dumper($/)

[05:33] <p6eval> rakudo 33947: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset -1, found ')'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[05:34] <mncharity> rakudo: "a" ~~ /:P5(1)[[:alpha:]]/; _dumper($/)

[05:34] <p6eval> rakudo 33947: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset -1, found ')'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[05:34] <mncharity> rakudo: regex foo :P5 /[[:alpha:]]/; "a" ~~ /<foo>/

[05:34] <p6eval> rakudo 33947: OUTPUT[Statement not terminated properly at line 1, near ":]]/; \"a\" "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[05:34] <pmichaud> rakudo doesn't support p5 yet.

[05:35] <mncharity> ah, ok

[05:35] <pmichaud> (and PGE's p5 regexes don't understand [[:alpha:]] yet.)

[05:35] <pmichaud> std:  my Int $a;

[05:35] <p6eval> std 24399: OUTPUT[00:05 79m␤]

[05:36] <pmichaud> ummm, okay.

[05:36] <mncharity> does  /:P5 [[:alpha:]]/  look like plausible p6?  what's the "right thing", regardless of whether it's working?

[05:37] <mncharity> /:P5::[[:alpha:]]/

[05:37] <pmichaud> that looks right to me.

[05:37] <pmichaud>  /:P5 [[:alpha:]]/, that is.

[05:37] <mncharity> ah, ok, :)  thanks

[05:37] <pmichaud> I'm not seeing how/where STD is parsing   "my Int $a"

[05:38] <pugs_svn> r24400 | leto++ | Unfudge passing autoref tests

[05:38] <pmichaud> I get as far as the <scoped> rule, but don't see the typename parse after that.

[05:38] <azawawi> http://www.nntp.perl.org/group/perl.cpan.testers/2008/12/msg2836602.html

[05:39] <azawawi> interesting 'out of memory' on netbsd 4.0 for STD.pm

[05:40] <rakudo_svn> r33948 | pmichaud++ | [rakudo]:  Fix list assignment when rhs is short of elements (RT #61336)

[05:41] <mncharity> wooops.  re my STD..."regex alpha {:P5 [[:alpha:]]}  parsing as a group with an :alpha modifier and a commit...", NOT.  I was looking at the wrong parser.  never mind.

[05:41] <pugs_svn> r24401 | leto++ | Unfudge passing tests relating to === on references

[05:42] <pmichaud> ah, never mind, I see it.

[05:42] <pmichaud> It's in multi_declarator.

[05:46] <dukeleto> i have test 57 in t/spec/S29-list/map.rakudo failing in trunk

[05:47] <azawawi> moritz_: finally Syntax::Highlight::Perl6 got listed on search.cpan.org catalogue under 'string processing...' category ;-)

[05:47] <mncharity> hmm.  what part to I have wrong here:  /<print>/ exists, rules are in the same namespace as subs, and ...  print "hi" and <print> are distinguished via print being a multi???

[05:48] <mncharity> Syntax::Highlight::Perl6++

[05:49] <mncharity> err, azawawi++

[05:49] <azawawi> @karma Syntax::Highlight::Perl6

[05:49] <lambdabot> Syntax::Highlight::Perl6 has a karma of 1

[05:49] <azawawi> lol

[05:55] <pmichaud> in PGE,  <print> is distinguished by virtue of being a method in the "grammar"

[05:55] <pmichaud> in Rakudo,  .... I'm not exactly sure what /<print>/ would do.

[05:56] <pmichaud> dukeleto: (test 57)  -- I think I fixed that in r24399

[05:57] <pmichaud> might try 'svn up' on t/spec

[05:58] <pugs_svn> r24402 | pmichaud++ | [t/spec]: Unfudge passing tests with returning references.

[06:00] <dukeleto> pmchaud: yep!

[06:00] <mncharity> lol #re karma

[06:01] <mncharity> karma on cpan packages... wow...

[06:02] <mncharity> pmichaud: thanks... so the key is  regex print is a method, which would collide with a non-existent method Any::print, but doesn't collide with multi sub GLOBAL::print.  thanks :)

[06:10] *** azawawi left
[06:33] *** eternaleye_ left
[06:34] *** eternaleye joined
[06:34] *** alech joined
[06:41] *** justatheory joined
[06:49] *** ashizawa joined
[06:58] *** SamB left
[07:01] <pugs_svn> r24403 | putter++ | [rx_on_re] Rx decls: core bugfix, and inital support.  New rx prelude in p6.

[07:01] <pugs_svn> r24403 | putter++ | [STD_blue] More rx/re IR work.

[07:02] <mncharity> it's going to be *painful* to eval() all of the rx prelude character classes every time elfx runs... have to kludge a separate compilation for that...

[07:03] <mncharity> good night all &

[07:03] *** mncharity left
[07:04] *** kcwu joined
[07:05] *** yjh joined
[07:14] *** iblechbot joined
[07:36] *** alester left
[07:40] *** justatheory left
[07:44] *** alech left
[08:05] *** justatheory joined
[08:12] *** DemoFreak joined
[08:21] *** bacek__ left
[08:33] *** alech joined
[08:34] *** sri_kraih joined
[08:41] <pugs_svn> r24404 | azawawi++ | [Syntax::Highlight::Perl6] Updated to latest perl6.vim

[08:41] <pugs_svn> r24404 | azawawi++ | [Syntax::Highlight::Perl6] Added script syntax-highlight-p6 to distribution

[08:41] <pugs_svn> r24404 | azawawi++ | [Syntax::Highlight::Perl6] instead of STD_syntax_highlight

[08:41] <pugs_svn> r24404 | azawawi++ | [Syntax::Highlight::Perl6] cleaned up syntax-highlight-p6

[08:46] *** mpeters joined
[08:47] <pugs_svn> r24405 | azawawi++ | [Syntax::Highlight::Perl6] moved syntax-highlight-p6 to bin/ and updated 

[08:47] <pugs_svn> r24405 | azawawi++ | [Syntax::Highlight::Perl6] installation scripts.

[08:51] *** mpeter left
[08:57] *** mpeters is now known as mpeter

[09:08] *** araujo left
[09:12] *** iblechbot left
[09:13] <pugs_svn> r24406 | azawawi++ | [Syntax::Highlight::Perl6] Passed most important perlcritic --harsh (-1)

[09:13] <pugs_svn> r24406 | azawawi++ | [Syntax::Highlight::Perl6] for bin/syntax-highlight-p6

[09:13] <pugs_svn> r24406 | azawawi++ | [Syntax::Highlight::Perl6] updated Changes... Releasing 0.027 to CPAN

[09:16] *** jferrero joined
[09:17] *** jferrero left
[09:17] *** jferrero joined
[09:32] *** Southen_ joined
[09:36] *** DemoFreak left
[09:50] *** ejs joined
[09:52] *** Southen left
[09:59] *** ejs1 joined
[10:01] <pugs_svn> r24407 | moritz++ | [t/spec/] unfudge a few tests for rakudo

[10:08] *** ejs left
[10:09] *** riffraff joined
[10:10] *** justatheory left
[10:11] *** sri_kraih left
[10:13] *** ejs1 left
[10:13] *** ejs joined
[10:14] *** sri_kraih joined
[10:25] *** justatheory joined
[10:27] *** justatheory left
[10:31] *** spx2 left
[10:31] *** spx2 joined
[10:39] *** ChrisDavaz left
[10:42] *** DemoFreak joined
[10:44] *** ruoso left
[10:47] *** alech left
[10:50] <moritz_> rakudo: grammar A { token a { :ig <b> }; token b { <c> }; token c { 'c'}; }; say "C" ~~ m/<A::a>/ ?? "yes" !! "no";

[10:50] <p6eval> rakudo 33951: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset 23, found 'i'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[10:50] <moritz_> rakudo: grammar A { token a { :i <b> }; token b { <c> }; token c { 'c'}; }; say "C" ~~ m/<A::a>/ ?? "yes" !! "no";

[10:50] <p6eval> rakudo 33951: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset 23, found 'i'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[10:51] <moritz_> rakudo: grammar A { token a { :i <b> }; token b { <c> }; token c { 'c'}; }; say "C" ~~ /<A::a>/ ?? "yes" !! "no";

[10:51] <p6eval> rakudo 33951: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset 23, found 'i'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[10:52] <moritz_> rakudo: grammar A { token a { :i <b> }; token b { <c> }; token c { 'c'}; }; if  "C" ~~ /<A::a>/ { say "yes" } else { say "no" }

[10:52] *** jferrero left
[10:52] <p6eval> rakudo 33951: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset 23, found 'i'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[10:53] <moritz_> rakudo: grammar A { token a {  <b> }; token b { <c> }; token c { 'c'}; }; if  "C" ~~ /<A::a>/ { say "yes" } else { say "no" }

[10:53] *** jferrero joined
[10:53] <p6eval> rakudo 33951: OUTPUT[no␤]

[10:53] *** alech joined
[10:53] <moritz_> rakudo: grammar A { token a { [ :i <b> ] }; token b { <c> }; token c { 'c'}; }; if  "C" ~~ /<A::a>/ { say "yes" } else { say "no" }

[10:53] <p6eval> rakudo 33951: OUTPUT[perl6regex parse error: Quantifier follows nothing in regex at offset 25, found 'i'␤current instr.: 'parrot;PGE;Perl6Regex;parse_error' pc 9840 (compilers/pge/PGE/Perl6Regex.pir:1161)␤]

[11:05] *** ruoso joined
[11:13] *** maerzhase joined
[11:42] *** riffraff left
[11:44] <ruoso> @tell TimToady there are two open issues in p6-l that would require your attention... please, take a look at the "Where does Foo::Bar.EXPORTALL come from" and "Out of CONTROL" threads...

[11:44] <lambdabot> Consider it noted.

[11:55] *** alech left
[11:59] <pugs_svn> r24408 | ruoso++ | [smop/lowdoc] 02_interpreter.pod documents what an interpreter is supposed to do in SMOP

[12:14] *** FerranZzZz joined
[12:18] *** iblechbot joined
[12:20] *** ejs1 joined
[12:29] *** ejs left
[12:32] *** Art7PK joined
[12:47] *** Lorn joined
[12:48] <pugs_svn> r24409 | ruoso++ | [smop/lowdoc] start of 03_native_types.pod...

[12:49] *** ejs1 left
[12:50] *** ejs1 joined
[12:53] <pugs_svn> r24410 | ruoso++ | [mildew/ROADMAP] fix misuse of given/when

[12:54] *** Art7PK left
[12:59] *** yjhz joined
[13:08] *** yjh left
[13:15] *** cognominal left
[13:17] *** meppl joined
[13:21] *** ejs1 left
[13:25] *** ejs1 joined
[13:25] *** SamB joined
[13:30] <moritz_> ruoso: re svn substituting $Id$, only if the svn props are set accordingly for that file

[13:31] <ruoso> moritz_, do you know how to set that up? is that possible for an entire directory?

[13:34] * ruoso just sent a mail to p6-l with a proposal to make @a and @@a different variable

[13:34] <ruoso> s

[13:38] <moritz_> ruoso: I just know that it's tested in parrot in t/distro/file_metadata.t

[13:40] <moritz_> ruoso: svn propset svn:keywords 'Id Revision' file.pl

[13:41] <moritz_> ruoso: http://wiki.preshweb.co.uk/doku.php?id=svn:propset

[13:41] *** cognominal joined
[13:47] *** mberends joined
[13:50] <ruoso> moritz_++ #thanks

[13:58] *** ashizawa left
[14:00] <pugs_svn> r24411 | ruoso++ | [smop/lowdoc] it is $Id$, not $id$.;

[14:01] *** vixey joined
[14:03] * ruoso later &

[14:03] *** ruoso left
[14:15] *** justatheory joined
[14:20] <rakudo_svn> r33952 | pmichaud++ | [rakudo]: spectest-progress.csv update: 249 files, 5139 passing, 0 failing

[14:28] *** alexn_org joined
[14:35] *** alanhaggai joined
[14:54] *** rindolf joined
[15:04] *** yjhz left
[15:05] *** apeiron left
[15:09] *** broquaint left
[15:10] <eric256> some/most of the wiki is horribly out of date! ;( the smart linking status is as of Sept 11th 2006

[15:11] <PerlJam> eric256: patches welcome!  :)

[15:11] <eric256> yea i'm updating the wiki as I go, adding links etc

[15:12] *** alester joined
[15:25] *** exodist_ joined
[15:26] <eric256> any idea where the script that generalyts the smartlinked S's lives?

[15:26] <eric256> wanted to see if its running pugs or raduko

[15:26] <eric256> err rakudo

[15:26] <eric256> lol

[15:26] <jnthn> eric256: My first commit to Rakudo called it the wrong thing, don't worry. ;-)

[15:27] <eric256> how do i get a commit bit for the repo?

[15:27] <moritz_> eric256: submit many good patches, then you'll get one

[15:28] <moritz_> eric256: for the pugs repo (with the test suite) it's easier: just ask ;-)

[15:29] <eric256> and how do you submit patches?

[15:29] <eric256> or where i should say

[15:30] <moritz_> eric256: mail to [email@hidden.address] with [PATCH] in the subject

[15:31] <eric256> is there then a way to see a list of pending patches?

[15:31] * eric256 is updating the getting_involved wiki with this info

[15:32] *** duke_leto joined
[15:38] <eric256> hmmm looks like smartlink.pl requires pugs

[15:38] <moritz_> aye, rakudo can't report tests with line numbers

[15:39] <eric256> ohhh that makes it a bit harder ;) then i guess i'll focus on smartlinking

[15:39] <eric256> unless there is something that can be done to help with line numbers

[15:40] <moritz_> no, that's deep bytecode magic

[15:40] <eric256> figures hehe

[15:41] <eric256> what about alist of pending patches? 

[15:44] <moritz_> eric256: http://rt.perl.org/rt3/Search/Results.html?Rows=50&Format=%0A%20%20%20'%3Cb%3E%3Ca%20href%3D%22%2Frt3%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__id__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3A%23'%2C%0A%20%20%20'%3Cb%3E%3Ca%20href%3D%22%2Frt3%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__Subject__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3ASubject'%2C%0A%20%20%20Status%2C%0A%20%20%20QueueName%2C%20%0A%20%20%20OwnerName%2C%20%0A%20%20%20Priority%2C%20%0A%20%20%20'__NEWLIN

[15:44] <moritz_> urgl, I hate long URLs :(

[15:44] <moritz_> http://tinyurl.com/5uv4af

[15:45] <[particle]> eric256++ smartlinking++

[15:46] <[particle]> that will help us when we get hll line number reporting in parrot, which is within 60 days according to our roadmap

[15:46] <eric256> [particle]: we'll see i of coures immediatly hit tests that i can't find in the Syn anywhere...is there a link syntax to indicate tests that need a new documentation created?

[15:46] <[particle]> eric256: i don't think you've been pointed to https://trac.parrot.org/parrot/wiki/ but you should know it's there

[15:47] <[particle]> eric256: all tests in t/spec should be related to a synopsis

[15:47] <[particle]> those outside t/spec are old pugs tests, and haven't yet been converted to official perl 6 tests

[15:50] <moritz_> [particle]: with the exception of t/spec/integration, which don't need smartlinks

[15:50] *** ruoso joined
[15:50] <eric256> S02-builtin_data_types/array_extending ... i can't find anything about it in S02 (searching agian just to be sure)

[15:52] <moritz_> eric256: you could also check S09 for this one (that's data types=

[15:53] <[particle]> yeah, it's possible the tests were misclassified

[15:53] <eric256> ohh i was blindly following the folder

[15:53] * eric256 slaps himself with a fish

[15:53] <[particle]> might check svn log on the file to see who moved it

[15:53] <[particle]> or, at least, what the comment was.

[15:53] <moritz_> perhaps I was

[15:53] <moritz_> sadly the sorting isn't always optimal

[15:54] <moritz_> eric256: http://rt.perl.org/rt3/Search/Results.html?Order=DESC%7CASC%7CASC%7CASC&Query=%20%20(%20%20Queue%20%3D%20'perl6'%20)%20AND%20%20(%20%20Subject%20LIKE%20'%5BPATCH%5D'%20)%20AND%20%20(%20%20Status%20%3D%20'new'%20OR%20Status%20%3D%20'open'%20)&Rows=100&OrderBy=Created%7C%7C%7C&Page=1&Format='%20%20%20%3Cb%3E%3Ca%20href%3D%22%2Frt3%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__id__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3A%23'%2C%0A'%3Cb%3E%3Ca%20href%3D%22%2Frt

[15:54] <moritz_> self--

[15:55] <moritz_> http://tinyurl.com/59wzfg # much better

[15:56] <eric256> whats that list?

[15:56] <moritz_> not-yet-applied patches in RT

[15:57] <eric256> ahh

[15:58] <eric256> added a "Hacking Rakudo" section http://www.perlfoundation.org/perl6/index.cgi?getting_involved

[15:58] <eric256> might be a better place for it, but at least its something

[15:59] <eric256> looks likx Auzon just bulk moved a directory

[15:59] <ruoso> [particle], pmichaud, could you please take a look at the message I just posted to p6-languages about @a and @@a? I'd like to understand what implications that would have in parrot/rakudo...

[16:00] <pmichaud> ruoso: I don't think it has any major implications -- we can support either interpretation.

[16:01] <ruoso> cool... 

[16:01] <[particle]> eric256: do you have a pugs commit bit?

[16:02] <eric256> i used to

[16:02] <eric256> i'm guessing it should still work

[16:02] <[particle]> they don't expire

[16:02] <[particle]> ok, well, it seems you have a commit bit, round tuits, and a solid direction.

[16:02] <eric256> oddly i can't find any documents describing array extending the way these tests do

[16:03] <[particle]> if you need anything else, don't hesitate to ask.

[16:03] <eric256> sure thing, can i just start a wiki with these tests that need some documentation created (or found at least)?

[16:03] <moritz_> eric256: the premise is "anything that's not specced works as in perl 5"

[16:03] <moritz_> eric256: we have t/TASKS in the pugs repo for such things

[16:03] <eric256> which isn't specced either.../me thumps head on wall

[16:03] <eric256> okay

[16:04] <moritz_> eric256: the master plan is to specify everything in the end, but it takes up lots of resources. In case of doubt the test cases serve as spec

[16:05] <eric256> okay so cases like this? mark in the TASKS? or leave as is for now?

[16:05] *** broquaint joined
[16:06] <eric256> :q

[16:07] <moritz_> I'd make a new section "needs smartlinks, but can't find a spec" in t/TASKS and list it there

[16:08] <eric256> thanks

[16:16] *** alanhaggai_ joined
[16:16] <[particle]> i'd put a comment above that paragraph of tests

[16:17] <[particle]> put comments close to the code, or the context will be lost

[16:18] *** jhorwitz joined
[16:19] <eric256> something like ?#[TODO] Needs smartlinks but can't find a spec 

[16:19] <moritz_> start it with a # please ;-)

[16:19] <eric256> the ? was suppost to eb with the like ;(

[16:19] * eric256 goes to get the morning cocoa

[16:20] <[particle]> don't use #? that syntax has special meaning

[16:20] <[particle]> #@[TODO] maybe

[16:20] <[particle]> or #@TODO

[16:20] <moritz_> or just # TODO: 

[16:20] <[particle]> ...if you must use a "comment twigil"

[16:20] <[particle]> i think # TODO will work best

[16:22] *** alech joined
[16:23] <moritz_> http://thedailywtf.com/Articles/Open-Sesame.aspx what a nice hack ;-)

[16:23] *** apeiron joined
[16:25] <eric256> lol

[16:26] <jnthn> hah!

[16:26] <pmichaud> I don't see a problem with using #?TODO   or #?smartlinks   or something like that, though.

[16:26] <pmichaud> the point of the identifier following the '#?' was that there could be multiple of them for different implementations.

[16:26] <pmichaud> "smartlinks" is just another p6 implementation with a very specific purpose.

[16:26] <moritz_> ... until somebody writes a perl 6 compiler named TODO

[16:27] <moritz_> pmichaud: but if the things that follows isn't a fudge directive, it doesn't make much sense

[16:27] <pmichaud> "smartlinks" is a compiler, it just does something slightly different than parse Perl 6 :-)

[16:27] <pmichaud> yes, it might not make sense in terms of fudging.

[16:28] *** alanhaggai left
[16:28] <pmichaud> actually, there ought to be a way to put TODO directly into the smartlinks syntax.

[16:28] *** alanhaggai_ is now known as alanhaggai

[16:28] <pmichaud> i.e., simply create a smartlink to a "todo section"

[16:28] <pmichaud> then we can find everything that's marked "todo"

[16:28] <moritz_> S00/TODO/

[16:28] <pmichaud> or maybe S99

[16:31] *** riffraff joined
[16:31] *** stephens joined
[16:32] <riffraff> hi

[16:34] *** kanru left
[16:45] *** rindolf left
[16:46] <pugs_svn> r24412 | eric256++ | Adding test file count

[16:48] <pasteling> "riffraff" at 93.145.85.253 pasted "behaviour of rules I do not understand" (10 lines, 335B) at http://sial.org/pbot/33800

[16:49] <riffraff> could someone explain me why this snippet just prints "three" ?

[16:49] <riffraff> if I define a rule foo as a simple wrapper of bar I'd expect that foo foo should match where bar bar does

[16:49] <riffraff> I'm afraid I'm missing something huge :/

[16:51] <moritz_> what exactly is <word>?

[16:51] <riffraff> <ident> as dfined before

[16:52] <riffraff> actually I had defined differently but I'm trying to understand why this doesn't match

[16:52] <moritz_> ah, <.ws> <ident>

[16:52] <riffraff> mh, yes, I think the definition through rule implies <.ws> 

[16:52] <riffraff> (I hope I am right)

[16:52] <PerlJam> yes.

[16:52] <moritz_> riffraff: it's all related to whitespaces. If you change s/rule/regex/ in the first three lines all rules match

[16:53] <moritz_> rakudo: say 'ab' ~~ m/<ident>/

[16:53] <p6eval> rakudo 33957: OUTPUT[ab␤]

[16:54] *** azawawi joined
[16:54] <azawawi> hi

[16:54] *** azawawi left
[16:55] <PerlJam> moritz_: Are you *sure* it's related to whitespace?  It looks like greed to me.

[16:55] *** azawawi joined
[16:55] <moritz_> PerlJam: oh wait, rules don't backtrack, right?

[16:55] <PerlJam> rules also have :rachet(1) so there's no backtracking.   <adj>* eats all identifiers

[16:55] <PerlJam> right

[16:55] <PerlJam> s/identifier/word/  you get what I'm saying though

[16:56] *** azawawi left
[16:56] <moritz_> still, if you dlete the whitespace from 'rule word' all three match

[16:56] <pmichaud> actually,  the 'an' will never match.

[16:56] <moritz_> yes, but that's not the issue here, I think

[16:56] <pmichaud> true.

[16:57] <pmichaud> (rakudobug, ltm, I know.)

[16:57] <riffraff> mh, if I remove the whitespace and leave everything as rule it works, but why? isn't that whitespace supposed to be insignificant ?

[16:57] <moritz_> it's both greed and ws. s/rule sent2/regex sent2/ also works

[16:57] <pmichaud> whitespace is significant in 'rule'

[16:58] *** azawawi joined
[16:58] <riffraff> yes I tried that too and checked

[16:58] <pmichaud> it's not significant in 'regex' or 'token'

[16:58] <PerlJam> riffraff: s/insignificant/significant/  :)

[16:58] <riffraff> ah I see, I had it reversed :)

[16:59] <pmichaud> anyway, they don't match because of ratcheting.

[17:00] <pmichaud> I don't know why it says 'three', though.

[17:00] <moritz_> some the difference is that <word> greedily matches a ws, and doesn't give it back

[17:00] <eric256> shouldn't they all fail because of the leading whitespace in the rules?

[17:00] <moritz_> where as <ident> does not

[17:00] <pmichaud> the default ws is *optional* ws

[17:01] <moritz_> ... unless between two identifier characters, where it's not optional

[17:01] <pmichaud> to me, they should all fail.

[17:02] <moritz_> pmichaud: the third should not, because <ident>* can match only once

[17:02] <pmichaud> ah, you're correct.

[17:02] <pmichaud> <ident> doesn't eat ws

[17:02] *** ruoso left
[17:02] <pmichaud> but <word> does.

[17:02] <moritz_> that explains it

[17:02] *** ruoso joined
[17:02] <moritz_> in this case <ident>* is equivalent to <ident>?

[17:03] <moritz_> wheres if you wrote [ <ident>]* you'd have the same behaviour as in the first two examples

[17:04] <pugs_svn> r24413 | pmichaud++ | [t/spec]:  Unfudge stable sort tests.

[17:04] <riffraff> thanks everyone 

[17:05] <riffraff> and sorry if I sound dumb, but if the ws in rules is significant how is the indentation in rules possible? 

[17:05] <pmichaud> whitespace in a rule becomes <.ws>

[17:05] <moritz_> riffraff: often you write tokens instead of rules, there it's not significant...

[17:06] <pmichaud> the default definition of <ws>  says to match \s*, but not between two word characters.

[17:06] <moritz_> riffraff: and when you write rules, it doesn't matter how many whitespaces there are in a row, just if or not 

[17:06] <riffraff> ah, gotcha

[17:06] <riffraff> thanks again

[17:06] <moritz_> np

[17:08] <moritz_> rakudo: my $x = -> { 3; }; say 2

[17:08] <p6eval> rakudo 33957: OUTPUT[Statement not terminated properly at line 1, near "= -> { 3; "␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[17:08] <pmichaud> rakudo still can't parse -> in term position.

[17:09] <moritz_> that's what I just tested :)

[17:09] *** alanhaggai left
[17:10] <rakudo_svn> r33959 | pmichaud++ | [rakudo]:  Update 'sort' to be a stable sort, and perform infix:cmp on Pairs.

[17:11] *** calin joined
[17:12] <moritz_> I think we had another test that uses infix:<mp> on pairs

[17:12] <moritz_> let's see if autounfudge can find it...

[17:13] <pmichaud> there's a few

[17:13] <pmichaud> I'm about to commit another unfudge

[17:13] *** ejs1 left
[17:14] <pmichaud> hmmm... need to do a make spectest first.

[17:15] * moritz_ wants more cores for faster testing

[17:16] *** justatheory_ joined
[17:16] *** alanhaggai joined
[17:16] *** justatheory left
[17:18] *** justatheory_ is now known as justatheory

[17:19] <pmichaud> I'm thinking I want faster tests.  :-)

[17:20] <moritz_> pmichaud: what about a motivational challenge? you make rakudo faster, and I add so many tests that the overall test run doesn't become shorter ;-)

[17:21] <pmichaud> heh.  Give me a month and then you're on.

[17:21] <pmichaud> (the month is to get the other pge refactors in place first.)

[17:22] <duke_leto> sorry for showing my ignorance, but what *is* unfudging...?

[17:22] <moritz_> duke_leto: 'fudging' means marking tests as TODO or even skip them

[17:22] <pmichaud> duke_leto: removing the #?rakudo skip   markers from test files when tests pass

[17:22] <moritz_> so unfudging is enabling them to run again

[17:22] <eric256> is there anyway to link to test files from the wiki?

[17:23] <duke_leto> i see... thx :-)

[17:23] <moritz_> eric256: you can get the svn URL with 'svn info $filename', and link to that URL

[17:23] <eric256> gracias ;)

[17:29] <pugs_svn> r24414 | pmichaud++ | [t/spec]:  Unfudge some more tests in S29-hash/pairs.t

[17:30] <rakudo_svn> r33963 | pmichaud++ | [rakudo]:  Add Pair.pairs (RT #59394, bacek++).

[17:30] <eric256> http://www.perlfoundation.org/perl6/index.cgi?smart_linking  now has a todo list of test files missing links ;)

[17:31] <pmichaud> eric256++

[17:31] <moritz_> like the one generated from utils/smartlinks.pl --check --missing --dir t/ ?

[17:32] <moritz_> ah no, with clickable links. Much easier for the lazy contributor ;-)

[17:33] <eric256> exactly ;)

[17:35] <eric256> i added a --wiki flag to smartlinks

[17:35] <moritz_> did you commit it?

[17:35] <eric256> gonna see about adding a flag to generate a list of files with # TODO as well

[17:35] <eric256> not yet

[17:35] <moritz_> commit early, commit often ;-)

[17:37] <eric256> there of coures now i am thinking about having it make a wiki table

[17:37] <pugs_svn> r24415 | eric256++ | smartlinks.pl - Added --wiki flag and --count flags to show a wiki friendly list of files missing links and a count of links per file respectivly

[17:46] *** calin left
[17:48] *** adc_penner joined
[17:49] * eric256 gets more scared of smartlink.pl the more he looks at it

[17:49] <eric256> lol

[17:50] <moritz_> eric256: some of it is quite hacky, but usually you only have to understand a small part ot get your job done

[17:53] *** maerzhase left
[17:53] *** alexn_org left
[17:53] <eric256> #?smartlinksneedeed

[17:54] <eric256> i was thinking of using #?TODO but thats not real specific about what needs done

[17:56] <eric256> #?TODO smartlink 'needs documentation created'   

[17:56] <[particle]> why the ?

[17:56] <eric256> kinda follow the #?rakudo skip 'reason'

[17:56] <[particle]> #? syntax should be reserved for fudge

[17:57] <eric256> any reason?

[17:57] <eric256> (not arguing, just learning all this, figured #? would help set it appart from generic comments

[17:58] <moritz_> because it's a diffent thing, and different things should look different

[17:58] <eric256> #?rakudo and #?TODO do look different

[17:58] <moritz_> that's subject to disagreement ;-)

[17:58] <[particle]> todo comments are generic

[17:59] <moritz_> basically '#?something' tells us to run tests differently

[17:59] <[particle]> #?rakudo direct the fudge preprocessor to perform actions on the file

[17:59] <eric256> so #? is reserved for things taht modified tests?

[17:59] <[particle]> yes

[17:59] <eric256> fine by me, is there somewhere in a wiki describing the different #? options?

[18:00] <moritz_> eric256: the output of t/spec/fudge is the best we have

[18:00] <moritz_> (when called without options)

[18:01] *** jferrero left
[18:01] <[particle]> http://www.pmichaud.com/2008/pres/oscon-rakudo/slides/slide26a.html

[18:02] <moritz_> (and think s/ok/is/ in the examples...)

[18:02] <pmichaud> oops!

[18:02] <pmichaud> I'd better fix that.

[18:02] <pmichaud> later.

[18:03] <pmichaud> (added to hiveminder so I won't forget)

[18:07] *** justatheory left
[18:07] <eric256> http://www.perlfoundation.org/perl6/index.cgi?test_suite_refactoring that a good place for it? or at least as good as any?

[18:08] * eric256 is realy trying to be helpfull and NOT a pain in the ass hehe

[18:08] * jnthn wonders if we ahve any tests for "use"

[18:08] <eric256> and reading the stuff from fudge explains the issues with #? too btw in case anyone else ends up similarly confused as i was

[18:08] <jnthn> I suspect they're not the easiest to write, but it'd be great to have some.

[18:09] <moritz_> eric256: it's fine. I personally would put it into the repo so I don't loose sight of it, but that's personal preference

[18:09] <jnthn> ,

[18:10] <eric256> i think new users though will have to go throught the wiki (like me) before they even find the repo

[18:10] <eric256> lol

[18:10] <moritz_> then it's fine

[18:11] <moritz_> eric256: please discourage 'svn cp' alltogether, it's rather harmful on tests (duplicates effort when fixing)

[18:12] <[particle]> jnthn: they're not super easy to write, but i started some in S11

[18:12] <eric256> yea that was existing, done.

[18:13] <eric256> does the pugs stuff still apply?

[18:13] <moritz_> well, you add it to the test suite, not to pugs

[18:13] <moritz_> but it lives in the pugs repo

[18:14] *** rindolf joined
[18:14] <moritz_> (svn props are still important, yes)

[18:14] <jnthn> [particle]/moritz_: I'm especially after tests for using classes in other files.

[18:14] <jnthn> use Foo; # where Foo has a class

[18:14] <moritz_> jnthn: I can take a look after #ps

[18:15] *** maerzhase joined
[18:15] <jnthn> I can only imagine having to do a use t::spec::S11-thingy::TestModule

[18:15] <jnthn> But not sure that's the Right Thing.

[18:16] <moritz_> or BEGIN { @*INC.unshift: 't/spec/S11-thingy' }; use TestModule;

[18:16] <jnthn> If Rakudo supports that...yes.

[18:16] <jnthn> It may well do so.

[18:16] <jnthn> If it does, awesome.

[18:18] <eric256> sorry should have been more specific i meant the puts add-svn-props.sh bit

[18:19] <moritz_> yes, taht's still fine

[18:26] * eric256 crashed the website lol

[18:26] *** alanhaggai_ joined
[18:27] *** timbunce joined
[18:27] *** timbunce left
[18:27] *** timbunce joined
[18:28] <ruoso> rakudo: { say $^a; say $a }.()

[18:28] <p6eval> rakudo 33967: OUTPUT[Scope not found for PAST::Var '$a'␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (src/PCT/HLLCompiler.pir:102)␤]

[18:29] <jnthn> ruoso: That should work, I believe.

[18:29] <jnthn> (As in, should be made to work - it's correct Perl 6.)

[18:29] <jnthn> Rakudo doesn't get that right yet.

[18:29] <ruoso> yeah... I was wondering if $^a declares $a

[18:29] <ruoso> pugs: { say $^a; say $a }.()

[18:29] <p6eval> pugs: OUTPUT[*** Missing required parameters: $a␤    at /tmp/QrJLiPueDS line 1, column 1 - line 2, column 1␤]

[18:29] <moritz_> it does (aka should)

[18:30] <ruoso> right... that makes the example code I'm using in the reply to p6-l much prettier

[18:30] <jnthn> ruoso: From the discussion, it should.

[18:30] *** alanhaggai left
[18:31] <ruoso> std: map { $^a == 2 ?? map { $^b == 2 ?? map { $^c == 2 && $b == 2 && $a == 2 ?? (1,2,3) !! () }, 1, 2, 3 !! () }, 1, 2, 3 !! () }, 1, 2, 3;

[18:31] <p6eval> std 24415: RESULT[Use of uninitialized value in hash element at Cursor.pm line 804.␤Use of uninitialized value in concatenation (.) or string at Cursor.pm line 866.␤Use of uninitialized value in hash element at Cursor.pm line 804.␤############# PARSE FAILED #############␤Unable to parse

[18:31] <p6eval> ..parenthesi...

[18:31] <eric256> std?

[18:32] <moritz_> std.pm is the standard Perl 6 grammar

[18:32] *** riffraff left
[18:33] <ruoso> std: map { $^a == 2 ?? map { $^b == 2 ?? map { $^c == 2 && $b == 2 && $a == 2 ?? (1,2,3) !! () }, 1, 2, 3 !! () }, 1, 2, 3 !! () }, 1, 2, 3;

[18:33] <p6eval> std 24415: OUTPUT[Use of uninitialized value in hash element at Cursor.pm line 804.␤Use of uninitialized value in concatenation (.) or string at Cursor.pm line 866.␤Use of uninitialized value in hash element at Cursor.pm line 804.␤############# PARSE FAILED #############␤Unable to parse

[18:33] <p6eval> ..parenthesi...

[18:33] <ruoso> meh... where's the error?

[18:34] <ruoso> std: map { $^a == 2 ?? map { $^b == 2 ?? map { ($^c == 2 && $b == 2 && $a == 2) ?? (1,2,3) !! () }, 1, 2, 3 !! () }, 1, 2, 3 !! () }, 1, 2, 3;

[18:34] <p6eval> std 24415: OUTPUT[Use of uninitialized value in hash element at Cursor.pm line 804.␤Use of uninitialized value in concatenation (.) or string at Cursor.pm line 866.␤Use of uninitialized value in hash element at Cursor.pm line 804.␤############# PARSE FAILED #############␤Unable to parse

[18:34] <p6eval> ..parenthesi...

[18:35] <avar> /w/w 13

[18:36] <eric256> rakudo: map { say $^a } 1,2,3

[18:36] <p6eval> rakudo 33969: OUTPUT[Statement not terminated properly at line 1, near "1,2,3"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[18:36] <eric256> rakudo: map { say $^a } 1,2,3;

[18:36] <p6eval> rakudo 33969: OUTPUT[Statement not terminated properly at line 1, near "1,2,3;"␤␤current instr.: 'parrot;PGE;Util;die' pc 129 (runtime/parrot/library/PGE/Util.pir:83)␤]

[18:36] <ruoso> rakudo: map { say $^a }, 1, 2, 3

[18:36] <p6eval> rakudo 33969: OUTPUT[1␤2␤3␤]

[18:36] <eric256> duh

[18:36] <eric256> lol

[18:37] *** jferrero joined
[18:37] <ruoso> I'll just send the mail with that code anyway... I can't find what's wrong with it...

[18:38] <eric256> ummm the wiki just saved the error page over the refactoring page...that was odd

[18:38] <moritz_> socialtext--

[18:40] <rakudo_svn> r33972 | infinoid++ | [cage] Fix trailing whitespace.

[18:49] <pugs_svn> r24416 | moritz++ | [t/spec] add tests for using modules that contain a class

[18:50] <pugs_svn> r24417 | moritz++ | [t/spec] forgot svn props again, moritz--

[18:50] <eric256> any ideas where to find the definition of +@array and +$arrayref?

[18:51] <pmichaud> leading + always means "as a number"

[18:51] <moritz_> eric256: S03 (they are exactly the same, prefix:<+> )

[18:51] <eric256> ahh gotcha

[18:51] <pmichaud> so    +@array is the number of elements in the array

[18:51] <pmichaud>   +$foo is $foo evaluated in a numeric context

[18:51] <eric256> looking for a good place to link http://svn.pugscode.org/pugs/t/spec/S02-builtin_data_types/nested_arrays.t to

[18:52] <moritz_> list assignment is described in S02, I think

[18:53] <eric256> right now i'm learning that for every one thing spec-ed there are 10 that arn't. 

[18:53] <eric256> yea i'm cruising S02 and S03 right now.

[18:53] <eric256> might end up just printing them all out for a good read, get myself re aquainted

[18:54] <[particle]> eric256: things unspecced are important to note somewhere.

[18:56] <eric256> hey maybe thats better than # TODO i could add a # UNSPECCED  makes it easy, and i can add a flag to smartlinks to have it aggregate those as well

[18:58] *** Codeman|pe joined
[18:59] <Codeman|pe> hallo

[18:59] <moritz_> hi

[19:00] <Codeman|pe> do you speak german?

[19:03] <Codeman|pe> hab hier ein kleines perl linux kommandozeilen problem ;)

[19:03] <moritz_> Codeman|pe: yes, but #perlde on irc.perl.org is much more appropriate

[19:04] *** azawawi left
[19:04] <moritz_> Codeman|pe: this channel is about developing Perl 6, not about answering Perl 5 questions

[19:04] <Codeman|pe> ok thx

[19:05] *** Codeman|pe left
[19:06] *** alech_ joined
[19:08] *** alech left
[19:13] *** smtms left
[19:14] <pugs_svn> r24418 | eric256++ | [tests] Adding UNSPECCED and smartlinks

[19:21] *** justatheory joined
[19:31] *** eternaleye left
[19:33] *** ejs joined
[19:37] *** dukeleto left
[19:37] *** dukeleto joined
[19:40] <Tene> pmichaud: the pending issue on p6l is whether CONTROL catches return or not, yes?

[19:40] <pmichaud> no.

[19:40] <pmichaud> we know that CONTROL catches return. The question is whether there's one CONTROL block for all returns or each Routine has its own control handler to catch them.

[19:41] <Tene> Which thread is that in?

[19:41] <[particle]> is there a thread? if so, ruoso started it

[19:41] <pmichaud> http://groups.google.com/group/perl.perl6.language/browse_thread/thread/e91adf0fa2752187#

[19:42] <pmichaud> and no, I started it.  :-)

[19:43] <[particle]> troublemaker

[19:44] <pugs_svn> r24419 | moritz++ | [t/spec] simplify 'use' test to work with current rakudo

[19:44] <pmichaud> afk # working on presentation, must finish soon.

[19:46] *** Khisanth left
[19:48] *** sri_kraih left
[19:50] *** Khisanth joined
[19:51] <TimToady> each routine must have a return handler, though that does not necessarily imply a CONTROL block with the same weight as the user-defined CONTROL block

[19:51] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[19:52] <[particle]> welcome back, o fearless receiver of gifts

[19:53] <TimToady> s/fearless/courageous/ :)

[19:53] *** eternaleye joined
[19:53] <moritz_> ;)

[19:54] <pugs_svn> r24420 | moritz++ | [t/spec] more extensive testing of using "imported" classes

[19:54] *** timbunce left
[19:55] *** comun1ty joined
[19:55] <comun1ty> I want to play with perl6 on my linux machine what should I use parrot or pugs or something else?

[19:55] <comun1ty> is one superior?

[19:56] <[particle]> yes, and so is the other.

[19:56] <comun1ty> which would you recommened using?

[19:56] <moritz_> comun1ty: pugs implements more features still, but rakudo is actively developed

[19:56] <[particle]> pugs is getting harder to build these days, you need an old version of ghc

[19:56] <moritz_> comun1ty: I use rakudo these days

[19:56] <[particle]> 6.6.1 iirc

[19:56] <[particle]> i use rakudo, too

[19:57] <moritz_> [particle]: pugs needs 6.8.1 or higher

[19:57] <comun1ty> then rakudo it is :)

[19:57] <[particle]> there will be a release in ~7 hours, but it's best to use svn head

[19:57] <comun1ty> awesome thank you fellas

[19:57] *** comun1ty left
[19:57] <[particle]> moritz_: i thought that build was broken, thanks for the update

[20:00] <moritz_> [particle]: worked via the cabal route last I tried

[20:07] *** alech_ left
[20:10] <rakudo_svn> r33978 | moritz++ | [rakudo] add a file (classes that are defined in use'd modules) to t/spectest.data

[20:18] *** alanhaggai__ joined
[20:24] * ruoso commute &

[20:32] *** alech joined
[20:33] *** alanhaggai_ left
[20:34] *** ruoso left
[20:36] <eric256> is there any reason that postfix and prefix ++/-- are defined in parrot in stead of perl6?

[20:36] <Tene> eric256: eh?

[20:37] <Tene> pmichaud: can you explain what TT's response means for implementation?

[20:37] <eric256> once you define + and = you can defined ++ in terms of them, so why not?

[20:37] <moritz_> eric256: no, ++ is much more magical

[20:37] <moritz_> rakudo: my $x = 'abc001'; say ++$x

[20:37] <p6eval> rakudo 33979: OUTPUT[abc002␤]

[20:37] <moritz_> eric256: also note that ++ and -- autovivify scalars, while + doesn't

[20:38] <eric256> rakudo: say 'abc001' +  1

[20:38] <p6eval> rakudo 33979: OUTPUT[1␤]

[20:38] <eric256> hmmm

[20:39] <eric256> couldn't you just expost .inc and .dec then and get the same results (autovivifying can be handled in perl as is i would think)

[20:40] <moritz_> there's more than one way to do it ;)

[20:41] <TimToady> .inc is spelled .=succ

[20:42] *** abebae joined
[20:43] *** azawawi joined
[20:44] <eric256> searchings the S's doesn't return anything about .=succ

[20:44] <moritz_> eric256: search for .succ instead

[20:44] <moritz_> eric256: $obj = $obj.method is shortened to $obj.=method

[20:44] <eric256> not that either

[20:44] <TimToady> then you're not searching correctly

[20:45] <eric256> yea i just searched for .succ

[20:45] <eric256> no doubt about that TimToady

[20:45] <TimToady> because S03-operators.pod contains .=succ

[20:45] <eric256> http://www.google.com/search?hl=en&domains=perlcabal.org&sitesearch=perlcabal.org%2Fsyn%2F&q=.succ&btnG=Search

[20:45] <eric256> i'm guessing then that the online docs are out of date  or out of sync

[20:45] <moritz_> eric256: in your pugs copy, go to to docs/Perl6/Spec, and grep '\.succ'

[20:45] <eric256> hmmm there there are in S03

[20:46] <eric256> man google search has been letting me down big time today

[20:46] <eric256> ;)

[20:46] <TimToady> please use the docs in the http://svn.pugscode.org/pugs/docs/Perl6/Spec if you want the most recent

[20:46] <TimToady> google is not about perfection

[20:47] <moritz_> and Perl 6 is? ;-)

[20:47] <eric256> been using the search at the top of http://feather.perl6.nl/syn/ so that is probably not a good idea

[20:47] *** masak joined
[20:47] <azawawi> hi there

[20:48] <masak> OH HAI

[20:50] <eric256> perl6

[20:50] <eric256> err....wrong window

[20:51] *** alech left
[20:56] *** spx2 left
[20:56] *** spx2 joined
[20:57] <eric256> is there any documentation on how to help with raduko programming? i.e. i just modified some stuff in op.pir but the changes don't have any effect even after a make clean && make perl6 ... just compiles and works like i didn't do anything

[20:58] <moritz_> eric256: run 'make spectest' to see if it broke anything...

[20:58] *** mncharity joined
[20:58] <moritz_> eric256: and if you implement a new feature, test it

[20:59] <eric256> well i changed ++ to start at 10 instead of 0 and it didn't do it at all, and yes definitly about the testing

[20:59] <mncharity> joining just in time to see "and if you implement a new feature, test it", /me reflexively chimes in "if it isn't tested, it doesn't work".

[21:00] <eric256> and if you test it build a test file (if it doesn't exist) and link it to a SYN ;)

[21:00] <eric256> right?

[21:00] <moritz_> right

[21:01] <mncharity> hmm... sort of.  one is more an observation on the universe, like Murphy's.  the other is more ideal project practice.

[21:01] *** lisppaste3 joined
[21:02] <mncharity> karma lisppaste3

[21:02] <moritz_> perlbot, karma lisppaste3

[21:02] <perlbot> lisppaste3 doesn't have any karma

[21:03] <mncharity> danke

[21:06] * eric256 bows down to moritz_....i hard linked to perl6 and the old link i was executing was pointing to a whole different executable

[21:06] <eric256> i realy shouldn't be allowed near computers some days

[21:08] <eric256> running tests spotted it eventualy ;)

[21:09] <moritz_> we do know why embraced test driven development ;-)

[21:09] *** Jedai left
[21:10] * eric256 created a succ sub, now to figure out how to make methods /me goes exploring

[21:11] <eric256> and yes i realize this is of little overall utility, its more of a learning thing for me than anything

[21:12] *** awwaiid joined
[21:21] *** c9s joined
[21:21] *** duke_leto left
[21:22] *** Jedai joined
[21:23] <pugs_svn> r24421 | putter++ | [STD.pm] Added p5 re token backslash:p .

[21:25] *** rindolf left
[21:28] <mncharity> sigh.  can't actually *use* it without either building a patch mechanism, forking STD.pm, reverting r24080 on STD.pm, or figuring out what went wrong with it and how to fix that.  sigh.

[21:29] <moritz_> mncharity: the structure of the Cursor object changed quite a bit, maybe you got hit by that?

[21:30] * eric256 implemented a .succ that works ;)  thats very exciting

[21:30] <mncharity> :)

[21:30] <mncharity> moritz_: no, it was just:

[21:31] <mncharity> token term:identifier changed from <identifier> to <identifier> <?before ['.'?'(']?> , intended I believe to make  not(3)  parse as  not(3)  rather than  prefix:not(3).

[21:33] *** alech joined
[21:33] <mncharity> but...  also sometimes breaks sub decls.  'sub' is reported as an applied but undefined function.

[21:33] <mncharity> time to dig up a test case...

[21:33] <azawawi> moritz_: what a nice and simple command line name for syntax-highlight-p6 (aka STD_syntax_highlight)?

[21:33] <azawawi> moritz_: s/what/what's/

[21:34] <moritz_> high6light?

[21:34] <moritz_> dunno, I've never been good with names

[21:34] <PerlJam> azawawi: 6light

[21:35] <azawawi> hmmm

[21:35] <PerlJam> azawawi: high6

[21:35] <azawawi> hilite6

[21:35] <moritz_> high5++

[21:36] <azawawi> ;-)

[21:36] <masak> Lumo VI

[21:36] *** c9s_ left
[21:36] <moritz_> that's nice

[21:37] <moritz_> but takes a while to understand

[21:37] <masak> just shorten it to 'lumovi'

[21:37] * azawawi is testing variations using Text::TypingEffort

[21:38] <moritz_> man, is there a task for which there's no module on CPAN?

[21:38] *** alester left
[21:38] <pmichaud> Tene:  (TT's response)  I read it that the approach Rakudo has been taking is the correct one, so go ahead with CONTROL.

[21:39] <Tene> Okay.

[21:39] <pmichaud> (at your convenience or whatever is -Ofun for you :-)

[21:39] *** masak left
[21:39] <azawawi> moritz_: actually that module failed to install on win32 :-(

[21:40] <mncharity> rakudo: (sub($x){$x+3}).(2)

[21:40] <p6eval> rakudo 33979: RESULT[5]

[21:40] <eric256> how can i run a single test file?

[21:40] <moritz_> let's hope that Alias' pet project reduces such failures in long run

[21:40] <moritz_> eric256: 'make t/spec/path/to/file.t'

[21:40] <pmichaud> eric256: make t/spec/....

[21:41] <mncharity> so that's the problem.  STD.pm is now parsing  sub(){...} as a function application of some 'sub'.

[21:41] <eric256> thanks

[21:41] <azawawi> moritz_: and Padre::Plugin::Perl6 dev effort has just started on #padre

[21:46] <azawawi> good night &

[21:48] <mncharity> pugs: (sub($x){3}).(4)

[21:48] <p6eval> pugs: RESULT[3]

[21:48] <mncharity> azawawi: good night :)

[21:51] <mncharity> http://padre.perlide.org/  http://news.perlfoundation.org/2008/11/2008q4_grant_proposal_perl_deb.html

[21:51] *** mberends left
[21:52] *** jhorwitz left
[21:52] <mncharity> http://padre.perlide.org/wiki/Screenshots

[21:53] <mncharity> http://padre.perlide.org/wiki/Articles

[21:56] <mncharity> @tell TimToady re "force identifier(), identifier.(), etc. to be a function call always", does that mean  sub($x){4}  is no longer valid p6?

[21:56] <lambdabot> Consider it noted.

[21:57] <eric256> alright i created .succ and .pred methods for the Object.pir but should they go in Scalar? /me doesn't realy know, did that and 4 tests though

[21:58] <moritz_> eric256: dunno. If you don't get a good answer here, ask in #parrot on irc.perl.org

[22:00] <rakudo_svn> r33984 | tene++ | [rakudo]

[22:00] <rakudo_svn> r33984 | tene++ | * move Exception clas sinto a new file

[22:00] <rakudo_svn> r33984 | tene++ | * add resume() and rethrow() to Exception

[22:06] <eric256> rakudo: my $x = '000'; $x.succ; say $x;

[22:06] <p6eval> rakudo 33980: OUTPUT[Method 'succ' not found for invocant of class 'Str'␤current instr.: '_block11' pc 45 (EVAL_12:22)␤]

[22:08] *** alanhaggai joined
[22:09] <TimToady> mncharity: sub($x){4} is valid Perl, it's just not a sub def

[22:09] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[22:10] <jnthn> TimToady: Did you get my message about S14?

[22:11] <TimToady> sent how?

[22:11] <jnthn> lambdabot

[22:12] <jnthn> Few days back, when you were travelling, mind...

[22:12] <TimToady> it would appear to have miscarried

[22:13] <jnthn> Aha.

[22:13] <jnthn> It was short, I can repeat. :-)

[22:13] <jnthn> I'm going to be reviewing a lot of the stuff it relates to through doing parametric roles over the coming couple of months.

[22:14] <moritz_> http://irclog.perlgeek.de/perl6/2008-12-12#i_757009

[22:14] <jnthn> I wondered if you wanted to handle S14 yourself, or if you'd like me to take a crack.

[22:14] <TimToady> I am happy to delegate anything that is happpy to be delegated  :)

[22:14] <jnthn> If you you would, do you want me to move stuff in other synopses that I think belongs in S14 to there, or just to copy and reference it so you can review it?

[22:15] <TimToady> feel free to move stuff

[22:15] <jnthn> OK.

[22:16] * jnthn will work on it

[22:19] <mncharity> TimToady:  re sub($x){4} isn't a sub def, ah, ok.  that makes life easy... thanks.

[22:20] <moritz_> so for anonymous subs you need a space after sub?

[22:21] *** ejs left
[22:24] <TimToady> moritz_: yes

[22:25] * moritz_ detects that his Perl 6 parsing very, very slowly converges to that of STD.pm

[22:26] <TimToady> and good style puts a space before the block too, though I don't think STD enforces that except in block-oriented control flow

[22:27] <TimToady> we're trying to consistently read prespaceless brackets as postfixes

[22:28] *** alanhaggai__ left
[22:30] <rakudo_svn> r33988 | tene++ | MANIFEST and metadata updates for new file.

[22:30] <rakudo_svn> r33989 | tene++ | [rakudo]: CONTROL blocks

[22:32] <TimToady> and it's basically an extensibility thing to make foo() ignore reserved words and always call a function, so that's an invariant across perlish languages

[22:34] <TimToady> Jet lag hits.  --more--

[22:34] * TimToady falls alseep &

[22:36] *** maerzhase left
[22:37] *** pbuetow joined
[22:40] *** FerranZzZz is now known as Ferran

[22:48] <eric256> if i'm making spectest to check a change i made, is there anyway to tell failing tests that are normal from ones i've just added?

[22:49] <moritz_> eric256: there shouldn't be any failing tests in 'spectest'

[22:50] <moritz_> eric256: so all failures are new failures

[22:50] <eric256> hmm i had failing ones right from a fresh svn

[22:50] <eric256> i'll revert and make clean and see what i get

[22:50] <pugs_svn> r24422 | putter++ | [elf] Sync with r24080: anonymous subs now require a space after 'sub'.  STD_blue synced with STD.pm.

[22:52] <mncharity> That was easy.  But a lot of time got wasted first. :/

[22:56] *** alanhaggai_ joined
[22:58] <eric256> man a lot happens in a day, needed an svn up on the source..all better

[23:03] <mncharity> rakudo: Int.isa(Any)

[23:03] <p6eval> rakudo 33990: RESULT[1]

[23:03] <mncharity> rakudo: Main.isa(Any)

[23:03] <p6eval> rakudo 33990: RESULT[1]

[23:04] <eric256> t/spec/S04-statements/do..................................argument doesn't array  hmm

[23:04] *** iblechbot left
[23:05] <mncharity> so Main is a module rather than just a package?

[23:06] <moritz_> I've never quite understood the difference

[23:06] <jnthn> rakudo: say Main.WHAT

[23:06] <p6eval> rakudo 33990: OUTPUT[Failure␤]

[23:06] <jnthn> say Failure.isa(Any)

[23:06] <jnthn> rakudo: say Failure.isa(Any)

[23:06] <p6eval> rakudo 33990: OUTPUT[1␤]

[23:06] <jnthn> Heh. :-)

[23:07] <jnthn> I thought we didn't have a symbol Main defined.

[23:07] <mncharity> moritz_: my fuzzy impression was that packages were simply namespaces, and couldn't participate in inheritance.

[23:07] <jnthn> Modules don't participate in inheritance, as such.

[23:07] <jnthn> At least, not in the way classes do.

[23:08] <jnthn> I thought Module isa Package isa Any

[23:08] <jnthn> In the type hierarchy.

[23:08] <jnthn> Would have to check S02 to be sure...

[23:09] <mncharity> sounds plausible...

[23:09] <[particle]> the only types outside Any are Object and Junction

[23:09] *** justatheory left
[23:09] <moritz_> jnthn: sounds sane, but it doesn't quite explain what a Module has that a Package does not

[23:10] <mncharity> http://feather.perl6.nl/syn/S10.html http://feather.perl6.nl/syn/S11.html

[23:11] *** adc_penner left
[23:11] *** alanhaggai left
[23:12] <eric256> how do i write a test for  Int.succ such that it wont crash because .succ isn't defined yet?

[23:12] <mncharity> package provides basics and autoload.  module provides versioning and export.

[23:12] <Hinrik> eric256: eval it?

[23:12] <moritz_> eric256: if you write a new test file, just let it crash, and we only start running it when we pass it

[23:12] <eric256> i tried is eval('my $x = "a"; $x.succ'), 'b'

[23:13] <moritz_> eric256: if you add it to an existing file, skip that block with '#?rakudo skip "todo: .succ"' or something

[23:13] <eric256> moritz_: is that the prefered method?

[23:13] <moritz_> depends. If you have only a few tests that fit well into another file, add it there

[23:13] <eric256> k its only 6 tests so i'll leave it thanks

[23:14] <mncharity> elf was missing  package Main is Any;  fixed.

[23:14] <mncharity> thanks for the help :)

[23:15] *** ruoso joined
[23:15] <mncharity> wait, no, now I'm confused again...  methods are defined on classes but not packages or modules, no?  so, if regex are methods, how does the regex prelude show up in Main...?

[23:16] <ruoso> Hello!

[23:17] <moritz_> mncharity: prelude subs and methods are in a scope that is lookup up independently of the module/namespace you're in...

[23:17] <moritz_> mncharity: and I think that regexes can be both subs and methods

[23:17] <mncharity> ruoso: hi ruoso :)

[23:17] <moritz_> (methods in grammars, and subs otherwise)

[23:17] *** abebae left
[23:18] <moritz_> but I guess that jnthn has put more thought into it than I did

[23:18] <mncharity> moritz_: that's... interesting.

[23:18] <jnthn> regexes can behave like subs and methods, yes

[23:19] <jnthn> I've left those details to pm ;-)

[23:19] <mncharity> lol

[23:19] <mncharity> ok, thanks

[23:22] <ruoso> mncharity, it seems that methods go to the package also

[23:29] <mncharity> that's... unexpected.

[23:32] *** bacek__ joined
[23:33] *** elmex left
[23:34] *** pbuetow left
[23:35] <eric256> so am i correct in assuming that i need to hand run "./fuged rakudo S03-operators/autoincrement.t" or was there an easier way?

[23:36] <[particle]> make t/S03-operators/autoincrement.t

[23:36] <[particle]> vim t/localtest.data && make localtest

[23:36] <eric256> i did that and it just ran the tests even though they had it

[23:37] <pugs_svn> r24423 | putter++ | [STD.pm] Accept non-ident names in p5 re \p, eg \p{BidiClass:L}.

[23:37] <[particle]> i can't use the first method on windows, so i'm not sure if it fudges, i'd have to check the makefile

[23:37] <moritz_> it does.

[23:37] <[particle]> thanks, that's what i thought.

[23:37] <[particle]> eric256: what's "it" that they had?

[23:38] <eric256> oh jeez it does work right.  i wonder why it didn't the first time

[23:39] <eric256> now it skips right even after i delete the autoincrement.rakudo  i swear i tried just a straight make the first time

[23:39] *** DemoFreak left
[23:39] * eric256 burries his head 

[23:41] <mncharity>  /me notes in pass in that Main in elf was working... I was just confused.

[23:41] <mncharity>  /me notes buried head.   curious.

[23:44] <pugs_svn> r24424 | eric256++ | [tests] Added tests for .succ and .pred for Int, Str and Num and marked as TODO

[23:44] *** alanhaggai_ left
[23:45] *** alanhaggai_ joined
[23:45] <pugs_svn> r24425 | putter++ | [elfish/rx_on_re] Build elfx with a rx prelude written in p6.

[23:45] <pugs_svn> r24425 | putter++ | [elfish/STD_blue] Generate IR for p5 re \p{...}.

[23:46] <mncharity> not quite a full prelude yet.  after/before notably absent.

[23:47] <eric256> http://rt.perl.org/rt3/Public/Bug/Display.html?id=61420 <-- patch to make tests actualy work ;)

[23:47] <eric256> not too bad, probably woulda taken one of you like 5 minues, but hey, i'm new ! ;)

[23:48] <mncharity> but STD_blue is synced with STD.pm, so that's a relief.

[23:48] * mncharity looks...

[23:51] <mncharity> neat.  re the 5 minute folks on parrot, yeah, but there are only a few of them, and that's been a bottleneck.  now one less fewer... err, or something like that.

[23:51] <mncharity> g'night all.  Thanks for the assorted assistance.  &

[23:52] *** mncharity left
