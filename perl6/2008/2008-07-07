[00:01] *** Chillance left
[00:10] *** icwiener-_- joined
[00:10] *** icwiener-_- is now known as icwiener

[00:17] *** icwiener left
[00:26] *** icwiener_ left
[00:27] *** bacek joined
[00:28] *** bacek left
[00:35] *** justatheory left
[01:05] *** yves left
[01:06] *** yves_ joined
[01:13] *** bacek joined
[01:17] *** araujo joined
[01:23] *** jferrero left
[01:35] *** agentzh left
[02:13] *** agentzh joined
[02:34] *** kadallas joined
[02:35] *** kadallas left
[02:35] *** kadallas joined
[02:38] *** kadallas left
[02:38] *** kadallas joined
[02:42] *** kadallas left
[02:46] *** agentzh left
[02:47] *** agentzh joined
[02:55] *** kanru left
[03:45] <pugs_svn> r21245 | Auzon++ | [gsoc_spectest] perl.t is fudged for Rakudo. perl2.t is gone.

[03:45] <Auzon> wow, that was fast of pugs_svn

[03:46] <Auzon> pmichaud or someone else:  t/spec/S02-names_and_variables/perl.t should be ready for spectest_regression.

[03:46] <Auzon> I noticed a few other files weren't working, so I'm investigating

[03:47] <Auzon> of course, it might just be me.

[03:51] *** s1n joined
[03:51] *** wknight8111 left
[03:53] <s1n> Auzon: i've been working on something that has been bugging me but i think i'm getting confused. is the test suite _only_ the t/spec folder?

[03:54] <Auzon> Kind of.

[03:54] <Auzon> t/spec is the test suite that has been reviewed semi-recently and organized somewhat by synopsis.

[03:54] <Auzon> Rakudo's spectest_regression pulls a handful of tests from t/spec.

[03:54] <s1n> yeah, the spectest_regression.dat file has the list

[03:55] <s1n> is the harness script a part of the pugs repo or parrot?

[03:55] *** kanru joined
[03:55] <Auzon> The parts of t/ that aren't in t/spec is about twice the size of t/spec, and some of it is Pugs specific. Most of it just isn't reorganized/rechecked yet

[03:55] <Auzon> The harness is a part of the Makefile for each project

[03:56] <s1n> well, the actual file, i can't remember which repo it's in

[03:56] <s1n> i've got a change to make to it, if it's in pugs, then i'll just do it

[03:57] <Auzon> What are you wanting to change?

[03:58] <s1n> well, i'm still working on the actual fix

[04:03] <s1n> uh so is it in the pugs repo or not?

[04:04] <Auzon> Depends what "it" is :)

[04:04] <s1n> t/harness

[04:04] <Auzon> That's in parrot

[04:04] <s1n> okay

[04:04] <Auzon> specifically, languages/perl6/t/

[04:04] <s1n> do they still prefer ml patches?

[04:04] <s1n> yes

[04:05] <Auzon> I think so

[04:06] <s1n> alright, thanks

[04:17] *** cjfields joined
[04:21] *** Eevee joined
[04:27] *** cjfields left
[04:45] <s1n> Auzon: have you guys been moving a bunch of the tests into spec?

[04:45] <s1n> Files=90, Tests=2164, 510 wallclock secs

[04:45] <Auzon> Yes.

[04:45] <Auzon> http://www.pmichaud.com/perl6/rakudo-tests-2008-07-05.png

[04:46] <Auzon> Look at the previous week

[04:46] <Auzon> I'm guessing that I added ~500 tests to the total

[04:47] *** bacek_ joined
[04:48] <Auzon> That seems like a lot, but I did add a file with nearly 200 tests last week, another one with 58 tests today, and probably some more that I can't remember

[04:48] <s1n> wow

[04:49] <Auzon> oh, a 64 test file too.

[04:49] *** rindolf joined
[04:52] *** rindolf left
[04:53] <s1n> well, i'm still trying to get used to the code, i wanted to find some task to start working on

[04:54] <Auzon> s1n: If you are looking for something to do in the test suite, pugs/t/TASKS has quite a few things

[04:54] <s1n> i noticed 3 things: there are tons of things being skipped, there are a handful of todos that are now passing, and it looks like the tests are mostly only testing the things that should work and not the things that shouldnt

[04:56] <Auzon> The things being skipped is a direct result of the fudging

[04:56] <s1n> yes, but are they being worked into not being skipped?

[04:56] <Auzon> A lot of files pass except for just one or two tests. Fudging lets us have the benefit of the tests that do work

[04:56] <Auzon> Yes. Fudged tests are supposed to have an RT issue associated with them somewhere

[04:57] <Auzon> I'm about to send in a few that I spotted earlier

[04:58] <s1n> checkout assign, tons of skips

[04:59] <s1n> well, you guys are working on the test suite way more actively than i, if i could spend a few hours a week working on this, where would you (or anyone you're working with) prefer the help?

[05:00] <s1n> the todo? writing the rt tickets? adding more tests?

[05:00] <Auzon> TASKS mainly refers to writing new tests. That's helpful, but I find it time consuming since you have to hunt out something that isn't well-tested

[05:01] <Auzon> One of the most rewarding things, I find, is reorganizing and fudging the tests so that Rakudo will run them. Have you seen the daily graphs of that?

[05:01] <s1n> yes i have

[05:01] *** rindolf joined
[05:01] <s1n> i would rather help work towards a common goal. what you're working on has to be done so we can get on to fixing the skips and adding the missing tests

[05:02] <s1n> so wherever my help is needed most. i just want to help move things along

[05:02] <Auzon> According to my schedule, I'll be hunting for tests in S09 this next week...

[05:04] <s1n> okay, i'm not picky about the work i do, i find moving perl6 along as rewarding and that takes all kinds of work

[05:04] <Auzon> I dunno. I guess I'd look for reasons on what causes tests to be skipped

[05:05] <s1n> okay, i'll start looking into that. should i file rt BUGs if i figure it out?

[05:05] *** bacek left
[05:05] <Auzon> Definitely, if there isn't a bug already.

[05:06] <s1n> reference the rt ticket number in the skipped comment?

[05:06] <Auzon> Yep.

[05:06] <s1n> any area you recommend to start in?

[05:07] <Auzon> I'm not sure, honestly.

[05:07] <s1n> okay, well, i'll try to start small

[05:08] <Auzon> Part of the problem is that over half of the tests are still not in t/spec.

[05:08] <Auzon> S29 might be a decent place

[05:08] <s1n> im going to bed for tonight, thanks for the tip, night

[05:08] <Auzon> OK, see you next time :)

[05:15] *** [particle] joined
[05:16] *** buu left
[05:16] *** buu joined
[05:30] *** Psyche^ joined
[05:30] *** Patterner left
[05:30] *** Psyche^ is now known as Patterner

[05:33] *** alester_ left
[05:35] *** [particle]1 joined
[05:47] *** [particle] left
[06:02] *** rindolf left
[06:12] *** rindolf joined
[06:13] *** Alias_ left
[06:13] *** Alias_ joined
[06:25] *** stef_ joined
[06:27] *** stef_ left
[06:30] *** Ashizawa joined
[06:52] *** cosimo joined
[06:57] *** xinming joined
[07:11] *** xinming left
[07:12] *** buubot left
[07:12] *** xinming joined
[07:29] *** buu left
[07:30] <rakudo_svn> r29116 | moritz++ | [rakudo] t/harness warns on no-existiing test files.

[07:30] <rakudo_svn> r29116 | moritz++ | Patch curtesy of Jason Switzer [email@hidden.address] j1s++

[07:30] *** ludan joined
[07:30] *** elmex joined
[07:55] <rakudo_svn> r29117 | moritz++ | [rakudo] added .perl tests to spectest_regression, Auzon++

[08:00] <pugs_svn> r21246 | moritz++ | [spec] more array.t tweaks

[08:16] *** rho joined
[08:23] <rakudo_svn> r29118 | moritz++ | [rakudo] one more test file for spectest_regression

[08:25] *** pmurias joined
[08:40] *** barney joined
[08:40] *** pmurias left
[08:43] *** bacek_ left
[08:44] *** alanhaggai left
[08:49] *** xinming left
[08:54] *** xinming joined
[09:17] *** a-jing1 joined
[09:17] *** a-jing1 left
[09:32] *** wknight8111 joined
[09:34] *** jferrero joined
[09:41] *** iblechbot joined
[09:45] *** stef__ joined
[09:50] *** bacek joined
[09:55] *** meppl joined
[10:03] *** ruoso left
[10:04] *** chris2 joined
[10:07] *** wknight8111 left
[10:07] *** pmurias joined
[10:08] <pmurias> re

[10:13] *** meppl left
[10:15] *** icwiener joined
[10:24] *** buubot joined
[10:34] *** stef__ left
[10:34] *** meppl joined
[10:43] *** xinming left
[10:49] *** redicaps joined
[10:53] *** pbuetow joined
[10:53] <pmurias> OT: what OpenGL book would people here recommend?

[10:54] <icwiener> RedBook or SuperBible... Both seem pretty complete.

[10:55] <icwiener> Or did you mean Perl-related?

[10:55] <pmurias> icwiener: which one do you prefere?

[10:56] <icwiener> pmurias: I think the SuperBible.

[10:56] <pmurias> icwiener: is there a Perl-related one?

[10:56] <icwiener> I do not know. :)

[10:57] <pmurias> both the RedBook and SuperBible have example in c?

[10:58] <icwiener> Yes

[10:58] <rakudo_svn> r29121 | moritz++ | [rakudo] use Test::Diff in autounfudge.pl to avoid non-perl dependencies

[10:58] <icwiener> The SuperBible is C++ as well.

[10:58] <pmurias> icwiener: RedBook is OpenGL(R) Programming Guide: The Official Guide to Learning OpenGL(R), Version 2.1 (6th Edition) (OpenGL) (Paperback)?

[10:58] <icwiener> pmurias: Yes.

[10:59] <pmurias> i'm ok with small quanties of C++ ;)

[11:00] <pmurias> s/i'm ok with/i can tolerate/

[11:00] <pmurias> icwiener: thanks for help

[11:00] <icwiener> hehe

[11:00] <icwiener> no problem.

[11:02] <pmurias> does it make sense to buy them both?

[11:03] <icwiener> Hehe, given you do not care much about money. :)

[11:03] *** rho left
[11:03] <icwiener> I think one of them does it. I have them both borrowed from the library, so I have them both. :)

[11:05] <icwiener> But as far as I read them it's basically the same. The bible has more background information and gives more examples from what I saw.

[11:06] <pmurias> icwiener: you have a good library

[11:06] <icwiener> pmurias: Actually I convinced them to buy them. :D

[11:06] <moritz_> ;)

[11:07] <icwiener> It's the university's library so they listen to the students.

[11:08] *** Schwern joined
[11:12] *** xinming joined
[11:27] <icwiener> pmurias: I just found out that the errata and code samples pages on the web page of the redbook are not updated although the book is out for ober six month now. That's definitely a plus for the bible. :D

[11:35] <pmurias> icwiener: do you read erratas?

[11:36] <icwiener> pmurias: Yes. In my own books (the one I bought myself) I read them first and correct them on the book.

[11:39] <icwiener> *in the book that is. :)

[11:41] *** iblechbot left
[11:42] *** pmurias left
[11:43] *** pmurias joined
[11:46] *** rindolf left
[11:55] <moritz_> rakudo: my $x = 3; eval 'say $x'

[11:55] <p6eval> rakudo 29121: OUTPUT[Scope not found for PAST::Var '$x'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 156 (src/PCT/HLLCompiler.pir:103)␤]

[11:56] <pmurias> rakudo_svn: eval 'say 3'

[11:56] <pmurias> rakudo: eval 'say 3'

[11:56] <p6eval> rakudo 29121: OUTPUT[3␤]

[11:57] <moritz_> pmurias: it's a problem with accessing variables in outer scopes

[11:57] <moritz_> pmurias: pmichaud is working on it irrc

[12:02] *** rindolf joined
[12:04] *** pbuetow left
[12:04] *** kanru left
[12:07] <pmurias> rindolf: hi

[12:07] <rindolf> Hi pmurias 

[12:08] <pmurias> rindolf: i haven't noticed you elf/smop question yesterday, sorry ;)

[12:08] <rindolf> pmurias: your

[12:09] <pmurias> yes

[12:10] <pmurias> elf is mncharity's perl6 to perl5 (hopefully smop too soon) compiler, and smop is rouso's object oriented runtime

[12:11] <pmurias> they live in v6/smop and misc/elf (misc/elfish/elfX for my fork) in the pugs repo

[12:14] <pmurias> any more questions?

[12:23] *** iblechbot joined
[12:24] *** redicaps left
[12:45] *** FurnaceBoy joined
[12:46] *** wknight8111 joined
[12:54] <pmurias> rindolf: if you feel like hacking on either elf/smop, and have any question feel free to ask me, although i'll be of more help with elf

[12:57] <rindolf> pmurias: OK.

[13:01] * pmurias shouldn't propably bother people with "if you want to get involved..." style project propaganda

[13:01] *** kanru joined
[13:19] *** cmarcelo joined
[13:21] *** rho joined
[13:26] *** rindolf left
[13:31] *** alester_ joined
[13:31] *** Alias_ left
[13:33] *** alester_ left
[13:34] *** meppl left
[13:34] *** rindolf joined
[13:36] *** meppl joined
[13:39] *** icwiener left
[13:39] *** icwiener joined
[13:40] <rakudo_svn> r29123 | moritz++ | [rakudo] reverted r29111 and added a TODO comment, pmichaud++

[13:40] *** rho left
[13:41] *** rho` joined
[13:41] *** jhorwitz joined
[13:51] *** ruoso joined
[13:51] <pugs_svn> r21247 | moritz++ | [spec] re-fudge S02-names_and_variables.t, 

[13:51] <pugs_svn> r21247 | moritz++ | rakudo doesn't escape '{' and '$' in Str.perl

[13:52] *** FurnaceBoy left
[13:59] *** rdice joined
[14:02] *** Lorn joined
[14:05] *** Ashizawa left
[14:10] <pmurias> ruoso: ping

[14:17] <ruoso> pmurias, pong

[14:21] *** rindolf left
[14:25] <pmurias> ruoso: i'm trying to add basic io to smop, one problematic thing is that methods need a fair amount of boilerplate

[14:26] <ruoso> yeah... and sm0p blocks

[14:26] <pmurias> food&

[14:27] <rakudo_svn> r29124 | pmichaud++ | [rakudo]: spectest-progress.csv update: 90 files, 1618 passing tests

[14:27] *** icwiener left
[14:28] <pmurias> the MESSAGE subs need a lot of boilerplate

[14:28] <ruoso> that's where s1p will help

[14:29] <pmurias> convert the capture to a native one, convert string identifiers to constant ones, raise an exception if there is no such methods

[14:29] <pmurias> ...

[14:29] <pmurias> wouldn't it be better to have the tests in a pure sm0p format instead of mixing sm0p and c?

[14:31] *** donaldh joined
[14:32] *** explorer__ joined
[14:33] <ruoso> pmurias, I think s1p is about that

[14:33] *** explorer__ left
[14:33] <pmurias> one problem with elf, is that it's current parser (STD_red) won't handle everything in src-s1p

[14:33] *** explorer__ joined
[14:34] *** explorer__ left
[14:36] <ruoso> it doesn't need to

[14:36] <pmurias> ok

[14:36] <ruoso> they don't need to be based on Object and P6Meta

[14:37] <ruoso> we could even have a q:inline-c { } quasiquote

[14:37] <ruoso> to allow native implementations...

[14:39] <pmurias> something like class Foo {method foo {use C;\n;int a = 3;printf("%d\n",a);}}?

[14:39] <ruoso> yeah...

[14:39] <ruoso> but I would arque using the quasiquote syntax

[14:39] <pmurias> quasiquotes return c ast to you

[14:41] <pmurias> syntax is not that important for now ;)

[14:42] <pmurias> the thing that bothers me is using the c namespace for storing smop objects

[14:43] <pmurias> is that only used because we don't have smop namespaces yet?

[14:46] <pmurias> food for real&

[14:53] *** jferrero left
[14:59] *** armagad joined
[15:01] <pmurias> ruoso: 12_p6opaque hangs, is it expected?

[15:01] <ruoso> nope

[15:01] <ruoso> run it with valgrind...

[15:01] <ruoso> are you sure you're up-to-date/

[15:01] <ruoso> ?

[15:02] <pmurias> i svn up'ed

[15:02] <ruoso> (misc/sm0p has been changed also)

[15:02] <ruoso> you need to re-brew

[15:03] <pmurias> should i rename brew to compile?

[15:04] <moritz_> Q: do you usually brew or compile pixies? A: you roast them ;-)

[15:04] <pmurias> :)

[15:07] <pmurias> ruoso: a clean checkout works

[15:08] <ruoso> there have been some bugfixes in misc/sm0p

[15:09] <pmurias> make clean dosn't remove generated .c files

[15:09] <ruoso> that's a boring thing I simply doesn't understand

[15:14] *** Alias_ joined
[15:17] *** cls_bsd left
[15:17] <pmurias> i could make misc/sm0p/sm0p.pm a dependency of each file generated from .sm0p

[15:18] <pmurias> ruoso: as i understand we need s1p ASAP?

[15:19] <ruoso> pmurias, maybe even move misc/sm0p inside smop

[15:19] <ruoso> pmurias, yes... s1p is really close to be a blocker...

[15:20] <ruoso> as soon as I finish writing the REPR API in p6opaque it will be a blocker...

[15:20] *** meppl left
[15:22] <pmurias> i have an idea, how to do it, the part i'm unsure about is if the ast should be turned into sm0p nodes(via a workaround untill bootstrap) or sm0p code

[15:22] *** armagad left
[15:23] <pmurias> the big picture would be source->AST->simplified AST->(unsure)

[15:23] <pmurias> source->AST is already done in elf

[15:24] *** redicaps joined
[15:26] *** redicaps left
[15:29] *** meteorjay joined
[15:31] *** jfredett left
[15:32] *** jfredett joined
[15:33] <pmurias> native strings aren't implemented yet :(

[15:41] *** icwiener joined
[15:42] *** justatheory joined
[15:44] <pugs_svn> r21248 | pmurias++ | [smop] start of an io implementation, nothing works properly yet, don't know how to get rid of the memory leak

[15:47] <pmichaud> is there a good way to get an estimate of the total number of tests in t/spec ?

[15:48] <[particle]1> better than adding digits after 'plan '?

[15:48] <moritz_> pmichaud: didn't we discuss that the other day? ack '^plan.*?\d+' + sum over all numbers

[15:48] *** [particle]1 is now known as [particle]

[15:48] <pmichaud> okay, I'll go for that then.

[15:48] <pmichaud> I didn't think of that conversation in the context of all spectests -- I was only thinking spectest_regression at the time.

[15:48] <[particle]> :)

[15:48] <pmichaud> I'm thinking I want to chart the size of the spectest suite, as well as spectest_regression

[15:49] <[particle]> i'm pretty sure i provided my line here, if you want to check the logs

[15:49] <[particle]> pmichaud++ that'd be great to see

[15:49] * moritz_ doubts the usefulnes, at least for the charts

[15:49] <moritz_> http://irclog.perlgeek.de/perl6/2008-07-01#i_374835

[15:49] <lambdabot> Title: IRC log for #perl6, 2008-07-01

[15:50] <pmichaud> it's useful because it gives us an idea of the overall progress of spectest conversion, as opposed to just those that make it into spectest_regression

[15:51] <moritz_> ok, good point

[15:51] <moritz_> 5272

[15:52] <pmichaud> another way of thinking of it is that Rakudo is currently skipping approximately 3600 tests

[15:52] <moritz_> d'oh, the search in the IRC logs gives context from wrong channels sometimes

[15:52] <pmichaud> it's just that some "skips" are because we didn't include the test file into spectest_regression :-)

[15:53] <pmichaud> I'll probably add it as a column to spectest-progress.csv

[15:54] <moritz_> please add it at the end, so that existing tools won't be confused ;)

[15:54] <pmichaud> okay.  :-)

[15:54] <pmichaud> I thought it'd be more fun to confuse the existing tools :-)

[15:54] <moritz_> heh, you didn't write those tools ;-)

[15:55] *** rho` left
[15:55] <pmichaud> hey, if @Larry gets to change the spec (causing me to have to rewrite my code), then when do I get to change something that makes others do work?!?  ;-) :-)

[15:55] <moritz_> pmichaud: @Larry.push('pmichaud') might be acceptable ;-)

[15:56] <pmichaud> oh, I suppose I've made a few spec suggestions that have caused others to have to change things, now that you mention it.  :-)

[15:56] <pmichaud> t/spec/S16-io/say.t doesn't use  "plan"   -- should it?

[15:57] <moritz_> no

[15:57] <moritz_> because it doesn't use Test.pm at all

[15:58] <moritz_> use Test.pm; plan 5; say 'ok 1 - ...'; -> "you planned 5 tests, but only ran 0"

[15:58] <pmichaud> right.

[15:58] <pmichaud> okay.  It's just that the total ends up being off by 5 all the time :-)

[15:59] <moritz_> that's 0.1% error only

[15:59] <moritz_> as a physicist I have to add that the errors intrisic to our counting method are much larger ;-)

[16:00] *** pmurias left
[16:05] *** donaldh left
[16:12] *** rindolf joined
[16:23] *** Schwern left
[16:25] *** Schwern joined
[16:26] <ruoso> @tell pmurias if you have literal strings, you can always use the constant identifier, since that string will be available for the end of the execution... there isn't a String API very well defined yet... 

[16:26] <lambdabot> Consider it noted.

[16:38] <pugs_svn> r21249 | moritz++ | [spec] simple tests for named parameters

[16:49] *** Schwern left
[16:55] *** meteorjay left
[16:55] <pugs_svn> r21250 | moritz++ | [spec] more tests for named parameters, and fudged them for rakudo

[16:56] *** jjore joined
[16:58] *** ujwalic joined
[17:04] <pugs_svn> r21251 | moritz++ | [t] more TODO

[17:05] <rakudo_svn> r29128 | moritz++ | [rakudo] one more test file for spectest_regression, +2 pass +1 skip

[17:07] <japhb> @tell pmurias re: OpenGL books, the 4th Ed. Superbible is pretty decent, but I certainly think the Red Book is necessary too -- both are necessarily incomplete (just as a matter of limited page count), and they cover OpenGL from different angles.  For example, the Superbible tries to give the reader a taste of more different things, while the red book tries to be more precise about what it does cover.

[17:07] <lambdabot> Consider it noted.

[17:10] <japhb> @tell pmurias also, after you've gotten through those, you will probably need to pick up the Orange Book (OpenGL Shading Language, Second Edition).  One uber-annoying thing about the Orange Book, however, is that the author is from 3Dlabs (creators of GLSL), and he unashamedly requires features in his examples that only 3Dlabs supports, and no other vendor.  After that, you're in GPU Gems territory (1-3 in that series are out so far)

[17:10] <lambdabot> Consider it noted.

[17:12] *** ludan left
[17:23] *** pbuetow joined
[17:26] *** Alias_ left
[17:26] * moritz_ is (again) amazed at the variety of skills that the various #perl6 hackers have

[17:29] *** ruoso left
[17:30] *** meppl joined
[17:39] *** mj41_ joined
[17:55] *** mj41 left
[18:57] *** buubot left
[19:00] *** buubot joined
[19:03] *** pmurias joined
[19:03] <pmurias> japhb: thanks

[19:03] <lambdabot> pmurias: You have 3 new messages. '/msg lambdabot @messages' to read them.

[19:09] <japhb> pmurias: you're welcome!

[19:10] *** pbuetow left
[19:11] *** pbuetow joined
[19:40] *** barney left
[19:46] *** rindolf left
[20:32] * Auzon is amused that 'plan Inf' prints '1..' instead of '1..Inf' or crashing

[20:33] <moritz_> Auzon: it's just passed around as an Int, and rakudo probably thinks it's undef or something

[20:34] <Auzon> If you ever see 'plan Inf' in a committed test, it's probably me forgetting the to add the number at the end :)

[20:34] <moritz_> ;)

[20:35] <Auzon> S09 says "An implementation of Perl is not required to support 64-bit integer types or 128-bit floating-point types unless the underlying architecture supports them". Is there any way to determine if they should be supported?

[20:36] <[particle]> you need to ask runtime-specific questions of perl in order to answer that

[20:36] *** icwiener left
[20:37] <[particle]> so, it's worth noting in a comment, at least

[20:37] <moritz_> and I don't think that's specced yet

[20:38] *** icwiener joined
[20:39] <[particle]> you may be able to get at it via $?RUNTIME or 'defined %?RUNTIME<int64>' or somesuch

[20:39] <[particle]> it's not well specced, if at all

[20:39] <Auzon> I can just see if the types are supported at all for now

[20:39] <Auzon> and just skip at runtime if not.

[20:42] *** cjfields joined
[20:54] *** pbuetow left
[20:56] *** iblechbot left
[21:09] <pmurias> shouldn't int64 be faked?

[21:09] <pmurias> if it's not supported

[21:10] <moritz_> pmurias: why would you fake low-level types?

[21:10] <moritz_> pmurias: if you don't care about low-level representation, you just use Int

[21:10] <moritz_> pmurias: and if you care, you don't want to be fooled

[21:16] <pmurias> moritz_: if you port your code it's better to be fooled then to receive an exception

[21:16] <moritz_> pmurias: if you care about portability you won't use low level types

[21:19] <pmurias> moritz_: int32 is portable

[21:21] <Auzon> Int isn't portable, though, I don't think

[21:21] <Auzon> and my earlier question was in the context of testing the availability and range of those types

[21:22] <moritz_> isn't Int transparently upgraded to bigint?

[21:23] <Auzon> oh

[21:23] <Auzon> Yes, it is. sprintf gave me problems, not Int

[21:23] <pmurias> moritz_: int64 is faster than a bigint even on 32bit architectures

[21:27] <moritz_> ok, I wasn't very clear. The implementation is free to chose the most efficient type for Int, and transparently upgrade and downgrade the low level types

[21:27] <moritz_> so if a variable is an Int, and it's internall int32, and it overflows, it can transparently upgrade to int64 if available, and bigint otherwise

[21:28] <Auzon> Does that mean that "my int1 $foo = 12" is valid?

[21:28] <Auzon> or just the Int objects?

[21:29] <moritz_> Auzon: int1 won't upgrade, only Int does

[21:29] <Auzon> ok, great :)

[21:37] *** chris2 left
[21:43] *** jferrero joined
[21:51] <pugs_svn> r21252 | Auzon++ | [gsoc_spectest] test for int\d+ and uint\d+ low level types for S09. (added 49 tests)

[21:52] *** cggoebel joined
[21:56] *** rdice left
[21:57] * Auzon can't count

[21:57] <Auzon> it's actually 98 tests

[21:57] <moritz_> a clean factor of 2 ;-)

[21:58] <Auzon> yep

[21:58] <Auzon> I forgot to count both int and uint in my earlier count

[21:58] <Auzon> There's only actually 7 tests, just looped for 14 data types

[21:58] <moritz_> sadly no implemention does low level types yet (iirc)

[21:58] <Auzon> KP6 and Pugs accept them but don't constrain them

[21:59] <moritz_> I think they just alias them to Int

[21:59] <moritz_> which gets some tests pass, but that's hardly what low level types are about ;)

[21:59] <Auzon> Right

[22:00] <Auzon> The ones I wrote specifically test the boundary tests to make sure that it's correct

[22:00] <moritz_> Auzon++

[22:00] <moritz_> Auzon: which part of the specs was must fun to test, so far?

[22:01] <Auzon> Besides fudging, the objects

[22:01] <moritz_> ok

[22:02] <moritz_> getting to a point where a file can be included in spectest_regression is quite satisfactory ;)

[22:10] <[particle]> i wish getting it into spectest was as much fun :(

[22:11] <moritz_> aye

[22:11] <rakudo_svn> r29129 | pmichaud++ | [rakudo]:  Remove obsolete $?PERL6SCALAR from src/parser/actions.pm

[22:20] *** cjfields left
[22:21] <pugs_svn> r21253 | moritz++ | [t] fixed syntax in builitns/my.t

[22:24] <rakudo_svn> r29130 | pmichaud++ | [rakudo]:  Parameter initializations belong in the params node of

[22:24] <rakudo_svn> r29130 | pmichaud++ | a block (not in the mainline).

[22:25] <moritz_> rakudo: say if 1 { 1 }

[22:25] <p6eval> rakudo 29129: OUTPUT[Statement not terminated properly at line 1, near "{ 1 }"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤]

[22:29] *** ruoso joined
[22:31] <pugs_svn> r21254 | moritz++ | [t] updated 'my' tests

[22:32] <pugs_svn> r21255 | moritz++ | [t] more updates to t/var/my.t

[22:35] *** pmurias left
[22:35] <moritz_> rakudo: $x; my $x; say 1

[22:35] <p6eval> rakudo 29130: OUTPUT[1␤]

[22:39] *** alester is now known as AndyAway

[22:41] <pugs_svn> r21256 | moritz++ | [spec] added my.t in spec/, which currently contains tests borrowed

[22:41] <pugs_svn> r21256 | moritz++ | t/var/my.t. TODO: review and and merge the rest of that file, plus

[22:41] <pugs_svn> r21256 | moritz++ | blocks/my.t into the one in spec/

[22:41] <pugs_svn> r21257 | moritz++ | [t] remove duplicate tests

[22:42] <pugs_svn> r21258 | moritz++ | [spec] fudged my.t

[22:48] <pugs_svn> r21259 | moritz++ | [spec] more my.t tests moved

[22:48] <pugs_svn> r21260 | moritz++ | [t] removed duplicate my.t tests

[22:50] *** cognominal_ left
[22:52] *** Alias_ joined
[23:01] <meppl> good night

[23:01] <pugs_svn> r21261 | moritz++ | [spec] moved some tests from builtins/my.t to spec/

[23:01] <pugs_svn> r21262 | moritz++ | [t] removed duplicate tests

[23:04] <rakudo_svn> r29131 | moritz++ | [rakudo] add my.t to spectest_regression, +15 fail, +3 todo, +12 skip

[23:05] *** meppl left
[23:08] <moritz_> time for bed &

[23:17] *** Alias_ left
[23:23] *** Coleoid left
[23:42] *** elmex left
[23:45] *** Coleoid joined
[23:47] *** apeiron_ joined
[23:52] *** bacek_ joined
[23:53] *** ujwalic_ joined
[23:55] *** ujwalic_ left
[23:57] *** icwiener left
[23:59] *** jferrero left
[23:59] *** baest left
