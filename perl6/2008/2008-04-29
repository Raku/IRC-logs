[00:02] *** Limbic_Region left
[00:18] *** aindilis joined
[00:19] *** rdice left
[00:19] *** armagad left
[00:22] *** stevan_ left
[00:36] *** stevan_ joined
[00:43] *** kanru left
[00:54] *** AgeofRuin joined
[00:55] <AgeofRuin> can anyone point me in the direction of a good tutorial for perl

[00:57] <Eevee> perl 5?

[00:57] <Eevee> or 6

[00:58] <AgeofRuin> 6

[00:59] <Eevee> I haven't seen anything very in-depth or tutorial-like online, but there's this: http://www.oreilly.com/catalog/059600737X/

[00:59] <lambdabot> Title: O'Reilly Media | Perl 6 and Parrot Essentials

[01:00] <AgeofRuin> thanks

[01:00] *** ead left
[01:00] <Eevee> np

[01:04] *** alanhaggai_ joined
[01:06] *** syle2 left
[01:06] <obra> Eevee: that book is..old. and has been freed. there's a copy of it in parrot svn

[01:06] <Eevee> oh seriously

[01:07] <Eevee> I've just been watching parrot/perl6 from the outside so I can never tell what's up to date

[01:16] *** Torment joined
[01:19] *** Grrrr left
[01:19] *** Grrrr joined
[01:20] *** alanhaggai left
[01:27] *** mj41 left
[01:28] *** yewenbin joined
[01:30] *** Schwern joined
[01:32] *** Jedai left
[01:35] *** quarkcs left
[01:38] *** justatheory joined
[01:55] *** [particle] left
[02:04] *** [particle] joined
[02:15] *** [particle] left
[02:16] *** [particle] joined
[02:47] *** quarkcs joined
[02:54] *** alanhaggai__ joined
[02:57] *** [particle] left
[02:58] *** [particle] joined
[03:06] *** [particle1 joined
[03:09] *** alanhaggai_ left
[03:12] *** [particle2 joined
[03:14] *** [particle3 joined
[03:15] *** [particle] left
[03:16] *** AgeofRuin left
[03:21] *** d4l3k_ joined
[03:22] *** baest left
[03:22] *** baest joined
[03:23] *** dalek left
[03:23] *** d4l3k_ is now known as dalek

[03:31] *** [particle2 left
[03:40] *** [particle1 left
[03:43] *** Auzon joined
[03:49] *** wknight8111 left
[03:51] *** [particle3 left
[03:52] *** [particle] joined
[03:53] *** alanhaggai_ joined
[04:08] *** alanhaggai__ left
[04:16] *** [particle2 joined
[04:20] *** [particle2 left
[04:20] *** [particle2 joined
[04:24] *** Schwern left
[04:25] *** [particle2 left
[04:25] *** [particle] left
[04:26] *** [particle] joined
[04:30] *** [particle] left
[04:31] *** [particle] joined
[04:32] *** Psyche^ joined
[04:38] *** [particle1 joined
[04:45] *** Zaba joined
[04:49] *** Patterner left
[04:49] *** Psyche^ is now known as Patterner

[04:52] *** alanhaggai_ left
[04:59] *** Zaba_ left
[05:04] *** [particle] left
[05:07] *** alanhaggai joined
[05:07] *** Auzon left
[05:14] *** Caelum left
[05:30] *** alanhaggai_ joined
[05:38] *** Caelum joined
[05:45] *** alanhaggai left
[06:10] *** justatheory left
[06:15] *** nipotan is now known as nipotaway

[06:21] *** IllvilJa left
[06:23] *** IllvilJa joined
[06:41] *** Eidolos left
[06:49] *** Eidolos joined
[07:08] *** iblechbot joined
[07:10] *** elmex joined
[07:15] *** jan_______ joined
[07:22] *** jan______ left
[07:27] *** jisom joined
[07:27] *** jisom left
[07:27] *** alc joined
[07:30] *** quarkcs left
[07:32] *** quarkcs joined
[07:46] *** Zaba_ joined
[07:48] *** alanhaggai_ left
[07:52] *** Zaba__ joined
[07:54] *** quarkcs left
[07:54] *** kst left
[07:58] *** Zaba left
[08:04] *** Zaba_ left
[08:14] *** meppl joined
[08:28] *** ruoso joined
[08:28] *** alc left
[08:50] *** IllvilJa left
[08:56] *** masak joined
[09:08] *** IllvilJa joined
[10:39] *** wknight8111 joined
[10:50] *** penk left
[10:50] *** rdice joined
[10:55] *** Zaba__ is now known as Zaba

[11:05] *** rdice left
[11:11] *** riffraff joined
[11:11] <riffraff> hi

[11:15] *** syle joined
[11:23] *** drfaustus joined
[11:24] *** alc joined
[11:40] *** fridim_ left
[12:20] *** drfaustus left
[12:24] *** masak left
[12:26] *** alc left
[12:30] *** alanhaggai joined
[12:35] *** masak joined
[12:44] *** iblechbot left
[12:52] *** renormalist joined
[12:56] *** alc joined
[13:11] *** Limbic_Region joined
[13:13] <Limbic_Region> ?eval sub foo { state $bar = "one"; my $temp = $bar; $bar = "two"; return $temp; } my $msg = foo() ~ foo(); say $msg; 

[13:18] <Limbic_Region> it has been too long - what is the proper fu to get the evalbot to run p6 code?

[13:19] *** rdice joined
[13:21] <masak> Limbic_Region: see the topic

[13:22] <masak> either `pugs:`, or `kp6:`, or `rakudo:`, or...

[13:23] <Limbic_Region> danke

[13:23] <Limbic_Region> pugs: sub foo { state $bar = "one"; my $temp = $bar; $bar = "two"; return $temp; } my $msg = foo() ~ foo(); say  $msg;

[13:24] <exp_evalbot> OUTPUT[oneone␤]

[13:24] <Limbic_Region> when did pugs implementation of state variables get broken?

[13:28] *** jhorwitz joined
[13:29] *** eternaleye left
[13:46] *** TJCRI joined
[14:00] *** iblechbot joined
[14:14] *** masak left
[14:16] *** alester joined
[14:27] *** bsb left
[14:38] *** chris2 joined
[14:49] *** yewenbin left
[14:49] *** yewenbin joined
[14:53] *** mncharity joined
[14:59] <mncharity> TimToady: re S06#Macros "syntax tree form is generally preferred because it allows the parser and debugger to give better error messages.  Textual substitution on the other hand tends to yield error messages that are opaque to the user. Syntax trees are also better in general because they are reversible, so things like syntax highlighters can get back to the original language and know which parts of the derived program come from which

[15:03] <mncharity> textual substitution can yield good error messages - you just use a string class which remembers where its various characters came from.  Similarly, that history permits showing the user the original language and where it came from.  To get similar results from syntax trees, also have to teach them to preserve history, else you have a tree, and you know where parts were originally from, but you have no idea how they were massaged into

[15:04] <mncharity> now I love tree macros, but find string macros are much maligned.

[15:04] <mncharity> ;)

[15:05] <mncharity> wrote such a string class years ago for p5.  performance wasn't even horrible.

[15:08] <mncharity> hmm, STD.pm regex rules are unchanged from last week.  guess I'll move downstream.  rx ir and emitter.

[15:19] *** pmurias joined
[15:21] <pmurias> mncharity: it might make sense to turn rules into NFAs instead of turning them into code directly

[15:23] <mncharity> hi ﻿pmurias,

[15:24] <pmurias> hi

[15:24] <mncharity> you mean in the current elf parser (STD_red), or in general?

[15:24] <pmurias> i'm having doubts if it would really be a good idea

[15:25] <pmurias> but in an ast transformation stage

[15:28] <mncharity> I was puzzling a few minutes ago how to go forward with parsing.  some options include () create a p6 version of STD_red (handwritten or metaprogrammed subs-or-methods); ()

[15:28] *** Schwern joined
[15:28] <mncharity> () continue to use STD_red while STD matures; ()

[15:28] <mncharity> ()

[15:29] <mncharity> () try to massage STD.pm (STD_deconstructed or STD_scrape)? into a form which can be run on a regex engine.

[15:30] <mncharity> actually, the "set up for metaprogramming" and "use engine rather than hack" are somewhat orthogonal.

[15:30] <pmurias> metaprogrammed = code-generated

[15:30] <pmurias> ?

[15:31] <pmurias> ;)

[15:31] <mncharity> yeah.  ﻿STD_deconstructed or STD_scrape -> manageable p6 code.

[15:31] <mncharity> the equivalent of  gimme5 et al in src/perl6

[15:32] <mncharity> and gimme

[15:35] <pmurias> the first option dosn't seem very good

[15:38] <pmurias> i think the choice depends on how long will Larry's effort to bootstrap STD.pm take

[15:38] <mncharity> re ﻿first option, has advantages of low development risk (known to work, known to be fast enough), completes bootstrap (ie, so elf could become a cpan module).  disadds of lots of manual grunge work.

[15:39] <pmurias> do you understand how to implement the longest token stuff?

[15:40] <mncharity> re depends, indeed.  and whether the resulting performance permits it to be used for everything, as the day-to-day parser, or just as a bootstrap tool.

[15:41] <mncharity> re ﻿"longest token stuff", no.  I've been waiting for it to work&mature before looking closely at it.

[15:41] *** kanru joined
[15:43] <mncharity> it's still an open question whether the ﻿longest token stuff will be a prerequisite for a "good" parse, for some value of good, or whether one can continue fudging it.  my impression is one can start making inroads into the pugs t/ while fudging it, or I might prioritize it differently.

[15:43] <pmurias> i read the TDFA paper, but don't full understand what parts of perl6 rules get turned into a DFA and when

[15:43] * TimToady is back, finally...

[15:44] <TimToady> STD.pm has the changes in, but not checked in because I have my match object contstruction in little bits at the moment

[15:44] <TimToady> but I could probably check in STD.pm separately

[15:44] <TimToady> (was out yesterday at the Dr, but that's overwith now)

[15:45] <mncharity> re depends, another issue is how large a role the ruby-ness of STD_red is playing in people not using elf yet.  If it was p6, and thus emitted p5, it wouldn't be an issue.  but if "elf isn't usefully running against t/ yet, so it's hard to tell what's working" is the bottleneck, then replacing STD_red wouldn't actually help.

[15:47] <mncharity> re little bits, :)  np.  not worth extra effort to buy a day or two.  there is other stuff which needs banging on.

[15:48] <pmurias> i think it's the problem of elf not being complete enough

[15:48] <TimToady> I also changed the fate/binding parameterage, so I need to check in changes together, unless people want to see the newest STD.pm just for reference

[15:49] <TimToady> but I'm probably still the only one actually trying to run STD5_run...

[15:49] <TimToady> which probably means the right thing is to just check in a snapshot of where I am regardless of match breakage

[15:49] <[particle1> TimToady++

[15:50] *** [particle1 is now known as [particle]

[15:52] <pugs_svnbot> r20316 | lwall++ | [STD] various tweaks suggested by mncharity++

[15:52] <pugs_svnbot> r20316 | lwall++ | [gimme et al] new parameter passing regime

[15:52] <pugs_svnbot> r20316 | lwall++ | [cheat] now emits intermediate multi-faking rules as proto tokens

[15:52] <pugs_svnbot> r20316 | lwall++ | [Cursor5] half-refactored match object construction

[15:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20316

[15:52] <lambdabot> Title: Changeset 20316 - Pugs - Trac

[15:53] <TimToady> mncharity: I'm sure there are some questions you had about STD that I didn't entirely address yet, but I've forgotten the ones that didn't result in a tweak to STD

[15:54] <TimToady> a busy weekend followed by a day under anesthesia will do that to you...

[15:55] <kolibrie> TimToady: I tried running STD5_run once, but have not gotten back to it yet - will need to at some point, but I have no problem with it being broken for a few days

[15:55] <pugs_svnbot> r20317 | putter++ | [elf_e] Non-scalars, @a and %h, in my() and has(), are no longer left uninitialized.  But only in elf_e - elf_e_nomoose doesn't do defaults yet.

[15:55] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20317

[15:55] <lambdabot> Title: Changeset 20317 - Pugs - Trac

[15:56] <mncharity> re ﻿anesthesia, eep

[15:56] <TimToady> ah, yes, it was regex_assertion:sym<.>, which is already handled by regex_assertion:method

[15:57] <meppl> good night

[16:01] <mncharity> good night meppl :)

[16:01] <meppl> ;)

[16:01] *** meppl left
[16:02] <pmurias> TimToady: is longest token stuff fully speced out or still being experimented upon?

[16:02] *** justatheory joined
[16:02] <TimToady> it's mostly specced out, though I'm still discovering some interesting holes as I implement

[16:02] <pugs_svnbot> r20318 | putter++ | [elf] EmitRegexYare.pm sketch: expand_backtrack_macros() translated into p6.

[16:02] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20318

[16:02] <lambdabot> Title: Changeset 20318 - Pugs - Trac

[16:03] <TimToady> speaking of which, I also didn't answer the []: question...

[16:04] <TimToady> or the "veryify" question--but I think pge is probably wrong there

[16:04] <TimToady> *verify, grr

[16:05] <TimToady> one LTM area that's not specced yet is when a subrule can be a part of a longer token, if the subrule is partly pure and partly impure

[16:05] <pugs_svnbot> r20319 | pmurias++ | [elf] removed .node_name

[16:05] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20319

[16:05] <lambdabot> Title: Changeset 20319 - Pugs - Trac

[16:08] *** lisppaste3 left
[16:10] <TimToady> I think the meaning of []: is clear--you can't backtrack into the [], since it's the previous atom controlled by a bare ':' backtrack controller

[16:10] <pmurias> mncharity: does /misc/pX/Common/yet_another_regex_engine work for you?

[16:10] <TimToady> and the q about ' : ' in isolation is just the same backtrack controller applies to previous atom

[16:11] <pmurias> mncharity: i mena pass any tests

[16:11] <TimToady> and that's why if: is wrong, because there's no backtracking possible into 'f'

[16:14] *** alc left
[16:15] <mncharity> ﻿pmurias: why ﻿r20319?

[16:15] *** yewenbin left
[16:16] <mncharity> re "﻿yet_another_regex_engine work for you?", yes, on both 5.8.8 and 5.10.  not for you?

[16:16] <TimToady> mncharity: did I answer all your q's?

[16:17] <TimToady> well, all your STD q's, anyway...

[16:17] <pmurias> mncharity: no

[16:17] <mncharity> re q's, sorry, got distracted.  let's see...

[16:17] <pmurias> mncharity: it dosn't work

[16:18] <mncharity> re yare doesn't work, ok, that will be third on my stack to explore.

[16:18] <mncharity> why ﻿r20319?

[16:18] <TimToady> shave *my* yak! shave *my* ya!   :)

[16:18] <TimToady> *yak

[16:18] <mncharity> lol :)

[16:19] *** pbuetow joined
[16:19] <TimToady> take your time really, going off to read perlmonks...

[16:19] <pmurias> if i type "prove t/re_tests.t" i get mostly errors

[16:34] <pasteling> "mncharity" at 71.232.7.10 pasted "/usr/bin/prove t/re_tests.t 96.25% okay." (15 lines, 1.3K) at http://sial.org/pbot/30912

[16:34] <mncharity> ﻿pmurias: what does your  perl -w Regexp_ModuleA.pm --test  output look like?

[16:37] *** renormalist left
[16:38] <mncharity> re ﻿node_name, that namespace ("CompUnit", etc) is used to describe nodes independently of what package they happen to appear in.  Eg, by IRx1_InfoForP5.pm.  Though not much code uses it yet.

[16:42] *** lisppaste3 joined
[16:44] *** gbacon left
[16:48] <mncharity> ﻿pmurias: or you can use  perl -w Regexp_ModuleA.pm --repl  to run single cases.

[16:49] <mncharity> http://svn.pugscode.org/pugs/misc/pX/Common/yet_another_regex_engine/README

[16:49] <lambdabot> http://tinyurl.com/6cevls

[16:56] <pugs_svnbot> r20320 | putter++ | [elf_e] expand_backtrack_macros() now works.  Tweaked p5 prelude regexp helpers.

[16:56] <pugs_svnbot> r20320 | putter++ | Reverted r20319 - though not yet much used, the node_name names are needed.

[16:56] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20320

[16:56] <lambdabot> Title: Changeset 20320 - Pugs - Trac

[16:59] <pugs_svnbot> r20321 | putter++ | [elf] Reverted r20319 - though not yet much used, the node_name names are needed.  r20320 intended to revert it, but didn't.

[16:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20321

[16:59] <lambdabot> Title: Changeset 20321 - Pugs - Trac

[17:04] <pmurias> pugs: class Foo::Bar {};my $foo = Foo::Bar.new();say $foo.WHAT

[17:04] <exp_evalbot> OUTPUT[Foo::Bar␤]

[17:04] <mncharity> ﻿pmurias: re node_name, if you think it should be renamed, or really think it should be gone, just let me know.

[17:04] <pmurias> pugs: class Foo::Bar {};my $foo = Foo::Bar.new();say $foo.WHO

[17:04] <exp_evalbot> OUTPUT[*** No such method in class Foo::Bar: "&WHO"␤    at /tmp/1Mh5fVGNA7 line 1, column 48 - line 2, column 1␤]

[17:04] <pmurias> what is the short name for an object?

[17:05] <pmurias> * prototype object

[17:06] <pmurias> mncharity: compile "abc" failed: Not a HASH reference at Regexp_ModuleA.pm line 2189

[17:06] * ruoso wonders if people is following the polymorphism thread in p6-lang

[17:06] <mncharity> ﻿pmurias: perl -v ?

[17:07] <pmurias> 5.8.8

[17:07] <mncharity> very odd

[17:07] <mncharity> hi ﻿ruoso.  when you would like to start compiling p6 to smop, just let me know.

[17:08] <ruoso> mncharity, I still need to write p6opaque...

[17:08] <ruoso> but the compilation could start earlier actually...

[17:08] <ruoso> you wouldn't be able to test it, tho

[17:08] <ruoso> but it would already allow writing the p6 types in p6

[17:09] <ruoso> which is a requirement for SMOP

[17:09] *** alanhaggai_ joined
[17:09] <ruoso> the classes available in the global namespace

[17:09] <ruoso> like String

[17:09] <ruoso> will be the ones implemented in Perl 6

[17:09] <ruoso> SMOP might use a low-level implementation when you simply do "foo"

[17:10] *** zostay_ joined
[17:10] <ruoso> but the Integer type needs to be there...

[17:10] *** nipotaway is now known as nipotan

[17:11] <pmurias> mncharity: wouldn't it be possible to retrieve node_name from .WHO or .WHAT?

[17:14] *** alanhaggai left
[17:16] <mncharity> ﻿ruoso: ok.  I started on http://svn.pugscode.org/pugs/misc/elfish_smop/ , but got distracted.  Just let me know when it would be good to have it working.

[17:17] <lambdabot> Title: Revision 20321: /misc/elfish_smop

[17:18] *** barney joined
[17:18] <ruoso> mncharity, oh... that one can be working right away...

[17:18] <ruoso> it doesn't even depend on p6opaque...

[17:19] <ruoso> and it could be a way to benchmark how bad SLIME would perform ;)

[17:19] <mncharity> ﻿pmurias: ﻿re 'wouldn't it be possible to retrieve node_name from', yes, but then, eg, for CompUnit, you would need to trim off the IRx1:: or Whatever::It::Happens::ToBe::  prefix yourself.

[17:21] *** gbacon joined
[17:22] <mncharity> ﻿ruoso: could you set it up so that given the target code, it actually compiles and runs?  that would let the generated code be tested, even when it's "not quite identical, but believed equivalent to" the target.

[17:22] <ruoso> mncharity, actually... I won't be able to do it right now...

[17:22] <ruoso> real life struggles

[17:23] <ruoso> but if you like... it won't be that hard making it work...

[17:23] <mncharity> ah.  :/  ok.  whenever you get a chance.

[17:23] *** zostay left
[17:25] <mncharity> since it's main purpose is to help you pursue smop, it's usefulness/interestingness rather depends on your planning to pursue smop. :)

[17:25] <mncharity> I'm not sure anyone else is set up to pursue it at the moment.

[17:26] <mncharity> bummer about not getting funding.

[17:26] <mncharity> audreyt had the same problem. :/

[17:27] <mncharity> ah, TPF.  sigh.

[17:33] <rdice> sorry, what?

[17:34] <ruoso> mncharity, I've re-posted SMOP to TPF GC

[17:34] <ruoso> rdice made a good job in dealing a new process in the GC

[17:35] <rdice> we're trying to make things run better.

[17:35] <ruoso> the proposals will be open for community comments and peer review

[17:35] <rdice> and ruoso, I understand you made a new submission.  

[17:35] <ruoso> rdice, yes... I did...

[17:35] <rdice> We were talking about that yesterday.  

[17:35] <rdice> And we wanted to make sure that it received appropriate public comment.

[17:36] <rdice> I have to admit, I try to stay out of the GC's business as much as I can.  It is semi-autonomous and has its own rules and regulations.  But based on recent experiences they have asked for my help in making some improvements.

[17:36] <rdice> So these things should work their way through the system over the next few months.

[17:38] * ruoso always read garbage collection for GC for a few seconds....

[17:38] *** Schwern left
[17:40] <ruoso> rdice, it's in much better shape from what I could see... good job...

[17:42] <rdice> Please give 99% of the credit to ambs. :-)  I just help him where I can.  Wish I could do more, but I have no many different things in TPF that need attention that none of them get as much as what would make things perfect.

[17:42] *** eternaleye joined
[17:42] *** sunnavy_ joined
[17:42] <pugs_svnbot> r20322 | putter++ | [STD_red] Unbreak STD_red_run read-eval-print-loop.

[17:42] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20322

[17:42] <lambdabot> Title: Changeset 20322 - Pugs - Trac

[17:43] *** sunnavy_ left
[17:46] <[particle]> ambs++ rdice-- :P

[17:47] *** sunnavy_ joined
[17:50] <Eevee> so if I were potentially interested in contributing..  which of the myriad of perl 6 interpreters in progress should I be looking at

[17:51] *** sunnavy_ left
[17:53] <obra> That's a good question. Right now, Rakudo has the most momentum

[17:54] <obra> Though if working on the test suite floats your boat, that's a nice, shared resource

[17:55] <Eevee> rakudo's in the parrot repo and the test suite is largely in pugs, right?

[17:55] * ruoso later &

[17:55] *** ruoso left
[17:56] <obra> correct

[17:56] <[particle]> the test suite is *entirely* in pugs

[17:57] <[particle]> t/spec/ is the official test suite, and many tests in t/ need to be migrated there

[17:58] <rdice> [particle] Thanks.  

[17:59] <[particle]> anytime, rdice :)

[18:00] <Eevee> what's in parrot/languages/perl6/t/spec then?  just an older copy of pugs/t/spec?

[18:00] <[particle]> an svn co

[18:01] <[particle]> check languages/perl 6/Makefile

[18:01] <[particle]> *perl6

[18:01] <Eevee> oh, ha

[18:03] <Eevee> how complete is the test suite?

[18:03] <[particle]> it's hard to say, but probably about 25%

[18:04] <[particle]> we have a GSoC student, Auzon, working this summer on adding ~1000 tests

[18:10] <mncharity> re 25%, I'd guess more like 5%.  or less.  it's currently more of a "feature exists" checklist, than a "complex feature is handling all the edge cases right" validation suite.

[18:11] <Eevee> ouch

[18:11] <Eevee> do any implementations do much not covered by the test suite?

[18:11] *** alinbsp joined
[18:11] <mncharity> p6 is a very big and complex language.

[18:12] <mncharity> re ﻿do much not covered, no, 

[18:12] <Eevee> I know, terrible question, but it's hard to get a grasp of where things are

[18:13] <mncharity> while not quite test driven development, there has been a focus on avoiding regressions, so features tend to get test cases.

[18:13] <mncharity> re grasp, one might look at...

[18:16] <mncharity>  /me struggles to find the smoke test url...

[18:18] <mncharity> wee... ok, http://m19s28.dyndns.org/cgi-bin/pugs-smokeserv.pl will

[18:18] <lambdabot> Title: Pugs Smoke Reports

[18:18] <Eevee> intuitive

[18:18] *** elmex left
[18:19] <mncharity> give you some idea what is definitely not working.

[18:19] <Eevee> are there smoke tests for rakudo, etc?

[18:20] <mncharity> other than that, looking at the tests, and at the p6 modules in ext/ .

[18:20] <mncharity> re "﻿smoke tests for rakudo", I don't know.  anyone?

[18:21] *** elmex joined
[18:21] <Eevee> google's not turning much up except "we need rakudo smoke tests"

[18:22] <mncharity> so that's for pugs.  for kp6, which is much more limited, the kp6 t/, and itself (it (is intended to)? self-compile).

[18:22] <[particle]> eevee: auzon will be concentrating on making sure the test suite covers the spec, which is the best way imo

[18:23] <[particle]> i'm talking to microsoft about using their infrastructure for parrot and rakudo smokes

[18:23] <mncharity> for elf, nothing yet but it's own code (it self compiles) and a list of passing tests.

[18:23] <mncharity> ﻿microsoft, eep

[18:24] *** ispy_ joined
[18:25] *** alinbsp left
[18:26] *** alinbsp joined
[18:26] *** alinbsp left
[18:26] <mncharity> TimToady: ok, so the residue looks like  (1) regex_mod_internal missing nth x etc.  (2) regex_metachar:sym<$> needs an alternative to the <before>, so it can match at eos (eor?:). (3) regex_assertion <alpha-[x]> doesn't seem to parse without an additional regex_assertion:ident clause. (4) re regex_assertion:sym<.>, <.ident> is parsed as a method?!?

[18:27] <Eevee> wish all this stuff were more consolidated

[18:27] <[particle]> Eevee: what stuff? the info you're asking about?

[18:27] <mncharity> re ext/, that's http://svn.pugscode.org/pugs/ext/

[18:27] <lambdabot> Title: Revision 20322: /ext

[18:27] <[particle]> consult the perl 6 wiki, and if it's not there... it's a wiki!

[18:27] <Eevee> everything related to perl 6, really

[18:27] <mncharity> once upon a time it was mostly running.  current mileage may vary.

[18:28] <pmichaud> "everything related to perl 6" is pretty big.  But I think the general consensus is that we'd like that to be organized on the wiki

[18:28] <obra> Eevee: helping us get things back to a single coherent whole would be higely useful

[18:28] <pmichaud> extremely useful, yes

[18:29] <pmichaud> I tend to find the perl6 wiki start page a bit overwhelming, also

[18:29] <Eevee> there is also the opposite problem of taking down everything that's moved or outdated, which is a bit harder

[18:30] <[particle]> well, it can be marked for review

[18:30] <obra> starting to make a list would be a reasonable beginning

[18:31] <mncharity>  http://www.perlfoundation.org/perl6/index.cgi

[18:31] <lambdabot> Title: Perl 6 / Perl 6

[18:32] <mncharity> and feedback would be useful too.  there's some concern (well, *I'm* concerned;) that socialtext is currently too weak a wiki engine for the task (eg, no discussion/Talk pages associated with each "article" page).

[18:33] <ispy_> mncharity: I wouldn't have chosen SocielText, honestly.  For that exact purpose.

[18:33] <pmichaud> is there an rss feed for the Perl 6 wiki ?

[18:33] <mncharity> s/is/may be/

[18:33] <Eevee> haha, did anything ever come of that old offer for someone to write a wiki in perl 6?

[18:33] <ispy_> I have been looking for a project for perl6, but I might be over booking myself.

[18:34] <obra> the community needs to outgrow the wiki that was set up for free before it's really worth the effort of replacing it ;)

[18:34] <mncharity> re '﻿wiki in perl 6', :)  not that I know of.  elf might actually be strong and fast enough to do it now

[18:34] <ispy_> I am planning on re-writing my news portal in Perl6

[18:34] *** elmex_ joined
[18:34] <mncharity> s/to do it/to make it feasible/

[18:34] <ispy_> obra: I think we should go ahead and prepare a more scalable solution now, before it becomes a more difficult task later.

[18:35] <pmichaud> I see a mythical "we"

[18:35] <ispy_> haha...

[18:36] <Eevee> what is elf exactly

[18:39] <mncharity> ﻿obra: re 'the community needs to outgrow ﻿the wiki', the problem is growing a wiki community is a very non-trivial and fragile endeavor.  so having engine problems... "we'll live on mustard gas for a while, until we out grow it, and then consider moving to oxygen".

[18:40] <[particle]> if rakudo supported sockets, i think it'd be possible to write a wiki engine. actually, with mod_perl6 already working, you won't need sockets

[18:41] <Juerd> Is there a feature matrix for rakudo somewhere?

[18:42] <[particle]> there's a roadmap!

[18:42] <mncharity> even on mediawiki, with a focus and great variety of things intended to help make community easy and attractive, most wikis fail to achieve community critical mass and eventually evaporate.

[18:42] <[particle]> http://svn.perl.org/parrot/trunk/languages/perl 6/\\

[18:42] <[particle]> grr

[18:42] <[particle]> http://svn.perl.org/parrot/trunk/languages/perl6/ROADMAP

[18:42] <Juerd> [particle]: I'm looking for an itenerary, not a roadmap :)

[18:43] <TimToady> mncharity: re (1), I think nth and x are just dups of ** internally, so not necessary, and dubious because they imply a .*? in any case

[18:43] <Eevee> [particle]: why sockets?  can always cgi it

[18:44] <Juerd> BTW, re wikis, I have a creole wiki grammar

[18:44] <Juerd> But I never tried to compile it because I don't know where to start

[18:44] <Juerd> http://feather.perl6.nl/~juerd/creole

[18:44] <[particle]> Eevee: yes, i was thinking about the whole engine. don't need sockets.

[18:44] <TimToady> re (2), I didn't think $ was necessary because you can't have a regex at end-of-file, but then I thought about indirect <$rule>, which can be a string, so yes, it's missing.

[18:45] *** elmex left
[18:45] <TimToady> re (3) the intent is that if you're going to do set manipulation you must start with <+ or <-

[18:45] <Eevee> maybe I should give that a try

[18:46] *** elmex_ is now known as elmex

[18:47] <TimToady> re (4), the current regex_assertion parsing .ident as a P6 expression, though a postfix would probably be more appropriate there.

[18:48] <mncharity> obra: wrapping up, my one (few?) attempts to edit the wiki bogged down on "what I really want to do is start an out-of-band discussion, not deal with throwing away or substantially changing someone else's nicely edited text".  left me with a "don't bother trying that again" feeling, despite a long and strong inclination towards wikis.

[18:48] *** Auzon joined
[18:48] <mncharity> or some such

[18:49] <[particle]> Eevee: i suggest you try mod_perl6

[18:50] <Eevee> oh, wait a minute

[18:50] <Eevee> are there any database bindings for perl 6?

[18:52] <pugs_svnbot> r20323 | lwall++ | [STD] couple more tweaks from mncharity++

[18:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20323

[18:52] <lambdabot> Title: Changeset 20323 - Pugs - Trac

[18:52] <pmichaud> mncharity: can the out-of-band discussion go on a mailing list somewhere?

[18:52] <[particle]> Eevee: there's no DBI yet

[18:52] <pmichaud> mncharity: yes, I agree it's not as nice as having the oob discussion in the same place as the wiki

[18:53] <Eevee> not even wrappers for an api?

[18:53] <Eevee> that would make a perl 6 wiki a little more problematic

[18:53] <mncharity> re (1), looks like http://svn.perl.org/viewvc/parrot/trunk/t/compilers/pge/perl6regex/rx_modifiers needs to be tweaked then.

[18:53] <lambdabot> Title: 1 [ 6 parrot 1 ] 1 35 Log of /trunk/t/compilers/pge/perl6regex/rx_modifiers 30, http://tinyurl.com/6rqbtd

[18:54] * [particle] tries to remember if 'system' is implemented in rakudo

[18:54] <[particle]> one could *at least* use svn as a wiki backing store with system

[18:55] <pmichaud> fwiw, PmWiki uses text files as its database.  Works well, for small scales.

[18:56] <pmichaud> although there are some PmWiki installations with 200K+ pages 

[18:56] <Eevee> ouch

[18:56] <mncharity> ﻿Eevee: re db, elf compiles to p5. :)  I've intentionally kept it slightly inconvenient to inline p5, just to avoid sloppiness in doing the bootstrap, but would be happy to change that. :)

[18:58] <mncharity> might start writing p6 the way you would want to, and then complain to me and rakudo folks when things don't work. :)

[18:59] <pmichaud> yes, exactly

[18:59] <pmichaud> I'm still a bit slow about responding to things (dayjob), but bug reports and feature requests definitely get higher priority than other things

[19:01] <Eevee> well!  maybe I will give it a shot

[19:01] <Eevee> might just have to go with flatfiles to keep it simple  (fsvo "simple")

[19:02] <Juerd> BTW, which channel is most appropriate for Rakudo discussion? #perl6 or #parrot?

[19:02] <[particle]> i think flatfiles will work well

[19:02] <TimToady> [particle]: there is no system() in p6

[19:02] <[particle]> juerd: i prefer #perl6

[19:02] <[particle]> TimToady: what's the equivalent?

[19:03] <TimToady> it is renamed to run() to avoid return value confusion

[19:03] <[particle]> ah, right. thx

[19:03] <mncharity> ﻿pmichaud: re "﻿go on a mailing list somewhere?" and "﻿not as nice as", that seems a really big barrier.  even just requiring logging in and account creation is can be deadly, albeit unavoidable until the community is large enough for 24x7 spam watch.  hmm, except for "a few writers are collaborating here on a project" use, vs "the community is maintaining this".  

[19:03] <Eevee> TimToady: return value will dtrt when cast to boolean?

[19:03] <TimToady> documented in S29:1815

[19:04] <TimToady> Eevee: yes

[19:04] <Eevee> hooray

[19:04] <TimToady> success should always be true

[19:06] *** elmex_ joined
[19:07] <pmichaud> mncharity: ultimately I agree with you that the wiki as currently implemented isn't exactly conducive to what we're trying to accomplish

[19:07] <Eevee> what does the wiki really need

[19:07] <Eevee> besides talk pages

[19:09] <pmichaud> at this point I think it needs reorganization.  It feels like there's too much competing to be on the top level page

[19:09] <mncharity> ﻿pmichaud: I don't know that I've ever seen real data, but my fuzzy impression is the issue is people do escalating commitment.  With first edits rarely being major.  A spelling correction noted in passing, leads to a sentence edit, leads to... etc.  Or minor tasks - url mentioned on irc gets added to a page, etc.  So one wants that slippery slope as smooth as possible. :)

[19:11] <mncharity> ﻿Eevee: there was talk of perhaps tweaking socialtext to include Talk pages.  it might even not be hard.

[19:14] <mncharity> re what else ﻿does the wiki really need, hmm.  I kind of got stuck on the talk issue.  drat, don't remember, sorry.

[19:17] <Eevee> I doubt hacking talk pages into any wiki engine would be hard

[19:17] <mncharity> ﻿re (3), ﻿ah, ok, so http://svn.perl.org/viewvc/parrot/trunk/t/compilers/pge/perl6regex/rx_subrules?revision=22145&view=markup needs to be tweaked.  <alpha-[Jj]>+

[19:17] <lambdabot> Title: 1 [ 6 parrot 1 ] 1 35 View of /trunk/t/compilers/pge/perl6regex/rx_subrules 30, http://tinyurl.com/5ssqaf

[19:17] *** elmex left
[19:19] *** elmex_ is now known as elmex

[19:20] <mncharity> ﻿TimToady: re (4), "﻿the current regex_assertion parsing .ident as a P6 expression, though a postfix would probably be more appropriate there.", what about <.before \w+?>  ?

[19:21] <mncharity> it seems . should be ? and ! like, no?

[19:21] *** ruoso joined
[19:22] *** IllvilJa left
[19:22] <mncharity> anyway, I have a workaround.  so resolution is not pressing.  just flagging it as a potential issue.

[19:25] *** IllvilJa joined
[19:31] *** aindilis left
[19:31] <pugs_svnbot> r20324 | putter++ | [STD_red] Tweaked regex parsing to reflect STD.pm changes.

[19:31] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20324

[19:31] <lambdabot> Title: Changeset 20324 - Pugs - Trac

[19:31] *** aindilis joined
[19:36] <mncharity> ﻿pmurias: re perl -v, what OS?

[19:39] <pmurias> gentoo linux

[19:40] <pugs_svnbot> r20325 | nothingmuch++ | remove overloading from Data::Capture

[19:40] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20325

[19:40] <lambdabot> Title: Changeset 20325 - Pugs - Trac

[19:41] <mncharity> and -w didn't have any complaints?  (5.10 should be making (perhaps bogus) "Variable "$s" is not available" (and "$x") complaints).

[19:41] <pmurias> i'll eat some food, as it's getting cold &

[19:43] <mncharity> ok.  yeah, I seem to have missed brkfast+lunch.  bbiab. :)

[19:45] *** meppl joined
[19:45] <mncharity> with 5.8.8,  perl -w Regexp_ModuleA.pm --repl  should be -w silent and well behaved.

[19:49] <pmurias> i get a prompt what should i type to check if it works

[19:49] <pmurias> ?

[19:51] <mncharity> if abc is failing,  perhaps  abc  and then a string of  xabc  ?

[19:51] <TimToady> mncharity: that must be written <.before(/\w+/)>.  the . means "call this in method syntax" which happens to have the side effect of not capturing because . is not alphabetic

[19:52] <TimToady> not that <.before ...> makes any sense anyway...

[19:56] <TimToady> but the idea is that if it looks like a method call, it is one.

[19:56] <pasteling> "mncharity" at 71.232.7.10 pasted "perl -w Regexp_ModuleA.pm --repl abc" (9 lines, 288B) at http://sial.org/pbot/30913

[19:56] <TimToady> but yes, that contradicts what S05 says currently.  :)

[19:56] <TimToady> so I guess we can still decide based on whether there's a ( after the ident

[19:56] <pmurias> mncharity: have you ci'ed everything? please check sv(n|k) status?

[19:57] <mncharity> re ﻿"side effect of not capturing", S05, :)  ok, np - I left the "﻿( after the ident" hack in std.rb for now.

[19:58] <pmurias> mncharity: checking if it works on feather

[19:58] <mncharity> ﻿pmurias: rechecking...

[20:00] <mncharity> re status, rm -rf'ed, checked out fresh, moved to /tmp, and run as not-me user.

[20:00] <pugs_svnbot> r20326 | lwall++ | [STD] allow both <.foo regex> and <.foo(@args)>

[20:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20326

[20:00] <lambdabot> Title: Changeset 20326 - Pugs - Trac

[20:01] *** armagad joined
[20:03] <pugs_svnbot> r20327 | lwall++ | [STD] but also allow <.$indirect()> forms of method call...

[20:03] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20327

[20:03] <lambdabot> Title: Changeset 20327 - Pugs - Trac

[20:05] <TimToady> now I can picture someone expecting <.foo: 1,2,3> to work the way they expect it to, which says maybe that our current use of : is wrong in assertions...

[20:06] <mncharity> ﻿pmurias: that said, ﻿Regexp_ModuleA has been observed to cease working if "should have no effect" code reordering is done.  a check for that specific case should warn you the perlbug workaround has failed.  but I could well believe some other bug is being tickled.  p5 support for anon subs seems not entirely robust.  and I'm 64 bit to your 32.

[20:09] <TimToady> which would mean we'd need to write <panic: 'message'> with quotes rather than relying on > for final quote

[20:10] <TimToady> that seems a bit saner than the current use of :

[20:10] <TimToady> pmichaud: see above speculation about <foo: args>

[20:11] <pmurias> mncharity: fail on feather too

[20:11] <mncharity> re yare, so there's a development risk for the current effort to add the yet_another_regex_engine core to elf.  any flakiness may continue to exist.  Long ago I looked at the two 5.10 warnings, but the simpler of the two seemed to be a 5.10 bug.

[20:11] <mncharity> re feather, I start to say :(, but that should be a :) .

[20:12] <mncharity> Juerd: after all these years... can I get a feather account? :)

[20:12] <pmurias> mncharity: why a :) ? 

[20:12] <pmurias> * fails

[20:13] <mncharity> a replicable problem is a happy problem

[20:13] <pmurias> true

[20:14] <pmurias> maybe emitting an NFA (with extra bits) wouldn't be a bad idea after all

[20:15] <pmichaud> TimToady: I don't have a problem with <foo: 'args'>

[20:16] * [particle] finds peace in <foo: 'args'>

[20:17] <pmichaud> that does seem to fit the indirect method syntax somehow, also

[20:18] <mncharity> re alternate core, oh, certainly.  I'm just concerned with bootstrap.  have working code, in a domain famous for "it's way harder to get this stuff working than you think", so using it.  would be nice to use 5.10 reentrancy if its bugs are avoidable, or have an engine coded in p6 which can be compiled down to C, or... etc.

[20:18] <pmichaud> might not be a desirable pun

[20:18] <pmurias> s/bad/that bad/

[20:18] *** elmex left
[20:19] <mncharity> s/an engine/a vm engine/

[20:20] *** Zaba_ joined
[20:25] *** Limbic_Region left
[20:26] <pmurias> mncharity: are you familiar with NFAs and DFAs?

[20:33] *** Zaba left
[20:35] <mncharity> re familiar, not really.  the hard part is all the optimization games.  I've read the odd paper, but no more.  actually, my hope/intent is that p6 moves towards providing a general parser.  ie, there's intense grammar analysis, a potentially heterogeneous mix of parsing strategies is emitted, but the user doesn't have to be care about parsing theory when writing a grammar.

[20:36] <mncharity> no "oh, I have to rewrite this all as (non) left-recursive because the engine is doing x".  you should just be able to write a grammar, run it, and if it's not fast enough, ask for hints on where the time is going and how to improve.

[20:37] *** smtms left
[20:43] *** elmex joined
[20:43] <pmurias> mncharity: a subcall for each char would be too slow?

[20:44] *** barney left
[20:47] <mncharity> at runtime, definitely.  p5 subcall is ~few hundred us.  a C subcall would be faster.  but the p5 engine does significantly better.

[20:48] <mncharity> 200 microseconds means you only get 5000 of them per second.

[20:49] <pmurias> i thought about changing the transitions array of NFA state to a closure

[20:49] <pugs_svnbot> r20328 | lwall++ | [STD] syntax of <panic: "message"> now requires quotes

[20:49] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20328

[20:49] <lambdabot> Title: Changeset 20328 - Pugs - Trac

[20:51] <mncharity> using closures on backends (eg, a hypothetical Common Lisp backend) which can aggressively compile

[20:51] *** araujo left
[20:51] <mncharity> things down could be a win.

[20:51] <mncharity> on p5... you would have to profile it.

[20:51] <mncharity> you're trying to avoid all the object creation of the (current?) STD5 ?

[20:55] <mncharity> my hope is once the first rx engine in elf is working, it will be easy to experiment with adding additional ones.  much of the IR analysis will be shared, and you may be able support the same runtime or compile time apis, and thus can start with partial implementations (either only supporting some features, or only working when some problematic rx constrict doesn't appear).

[20:55] <pmurias> no just thinking about the simplest way to make the NFA none regular,

[20:55] <pmurias> and cheat around unicode

[20:56] <mncharity> ah, ok.

[20:56] <Juerd> If Perl 5's regex engine source was less messy I'd say: look at Perl 5's regex engine for inspiration re cheating around unicode

[20:57] <mncharity> hi ﻿Juerd.  so what's the current recipe for requesting a feather account?

[20:59] <mncharity> re p5 engine, I've not see it since the 5.10 changes & cleanup.  worth looking at just to appreciate the scale of the task.  though my fuzzy recollection is it's actually a bit dumb in some respects.

[21:00] <mncharity> ﻿Juerd: nm, found it.  tnx

[21:00] <Juerd> mncharity: Email me your real name and preferred username

[21:01] <mncharity> thanks

[21:04] *** TJCRI left
[21:04] <mncharity> bbl

[21:05] *** ispy_ left
[21:06] <pmurias> mncharity: once you get yare working with elf it should be possible to benchmark other idea's against it

[21:07] <pmurias> anyway i should go to sleep now as i don't think clearly enough now ;) &

[21:07] *** pmurias left
[21:15] *** jhorwitz left
[21:21] <mncharity> that's the hope.  we'll see.  g'night. :)

[21:21] <pugs_svnbot> r20329 | nothingmuch++ | split Capture into ::Overload and normal class, and use it in prepare_binding in Data::Bind

[21:21] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20329

[21:21] <lambdabot> Title: Changeset 20329 - Pugs - Trac

[21:21] <mncharity> http://eprints.utas.edu.au/644/

[21:21] <lambdabot> Title: UTas ePrints - A New General Parser for Extensible Languages

[21:21] <mncharity> http://citeseer.ist.psu.edu/tratt04compiletime.html

[21:21] <lambdabot> Title: Compile-time meta-programming in Converge (ResearchIndex)

[21:21] <mncharity> random papers

[21:24] <mncharity> Ian Lewis ("A New General...") is shifting to packrat.

[21:24] <pugs_svnbot> r20330 | nothingmuch++ | split Capture into ::Overload and normal class, and use it in prepare_binding in Data::Bind

[21:24] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20330

[21:24] <lambdabot> Title: Changeset 20330 - Pugs - Trac

[21:39] <pugs_svnbot> r20331 | nothingmuch++ | all_variable_names fixes

[21:39] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20331

[21:39] <lambdabot> Title: Changeset 20331 - Pugs - Trac

[21:49] *** rdice left
[21:56] *** eternaleye_ joined
[21:57] *** eternaleye left
[22:02] *** [particle1 joined
[22:19] *** iblechbot left
[22:19] *** luqui joined
[22:20] *** [particle] left
[22:32] *** Jamtech joined
[22:36] *** sscaffidi left
[22:37] *** smtms joined
[22:40] *** bsb joined
[22:44] *** Jamtech left
[22:48] *** eternaleye_ left
[23:06] *** luqui left
[23:15] *** luqui joined
[23:34] *** Limbic_Region joined
[23:35] *** syle left
[23:37] *** elmex left
[23:49] *** chris2 left
