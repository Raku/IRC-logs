[00:06] *** grtnam1 joined
[00:10] *** _Chillance_ left
[00:34] *** kanru left
[00:36] <rakudo_svn> r28657 | coke++ | RT#56076 ([PATCH] MACOSX_DEPLOYMENT_TARGET not defined during OSX PPC Rakudo build)

[00:36] <rakudo_svn> r28657 | coke++ | 

[00:36] <rakudo_svn> r28657 | coke++ | This adds (proactively, in some cases) the MACOSX_DEPLOYMENT_TARGET env. var

[00:36] <rakudo_svn> r28657 | coke++ | to the various languge builds; we've found this to be required on OSX with

[00:36] <rakudo_svn> r28657 | coke++ | the current code base.

[00:36] <rakudo_svn> r28657 | coke++ | 

[00:36] <rakudo_svn> r28657 | coke++ | Patch courtesy Packy Anderson (packy++ at dardan dot com)

[00:39] <rakudo_svn> r28658 | jkeenan++ | Correct POD formatting errors.

[00:39] *** cmarcelo left
[00:41] *** JoshuaTree left
[00:44] *** JoshuaTree joined
[00:50] *** Limbic_Region left
[01:00] *** jjore left
[01:02] *** polettix left
[01:39] *** deq` left
[01:40] *** alanhaggai left
[01:41] *** penk joined
[01:49] *** ting joined
[01:49] *** ting left
[01:54] *** eternaleye_ left
[01:54] *** eternaleye_ joined
[01:54] *** justatheory joined
[01:59] *** JoshuaTree left
[02:00] *** JoshuaK joined
[02:00] *** JoshuaK is now known as JoshuaPK

[02:00] *** JoshuaPK left
[02:09] *** GeJ joined
[02:22] *** explorer left
[02:30] *** cjfields joined
[02:32] *** eternaleye joined
[02:34] <cjfields> pugs: say 'ABC'.trans('A-Z' => 'a-z');

[02:34] <p6eval> OUTPUT[aBC␤]

[02:34] <diakopter> ran some load tests on the packrat parser

[02:35] <diakopter> :( it's still broken

[02:35] <diakopter> disabling it for now... as with the opp, it won't need left recursive rules

[02:36] <diakopter> without it enabled, parse times are n**2+n+3, where n is 50 statements

[02:38] *** eternaleye_ left
[02:39] <cjfields> pugs: say "\b\n".trans('\b' => 'A', '\n' => 'B');

[02:39] <p6eval> OUTPUT[AB␤]

[02:39] <cjfields> oi...

[02:40] <cjfields> pugs: say "\b\n".trans("\b" => 'A', "\n" => 'B');

[02:40] <p6eval> OUTPUT[A␤␤]

[02:40] <cjfields> oi oi oi...

[02:45] *** justatheory left
[02:45] *** Eevee joined
[02:51] <cjfields> pugs: say "\b\n\n".trans("\b" => 'A', "\n" => 'B');

[02:51] <p6eval> OUTPUT[A␤␤␤]

[02:51] <cjfields> pugs: print "\b\n".trans("\b" => 'A', "\n" => 'B');

[02:51] <p6eval> OUTPUT[A␤]

[02:52] <diakopter> so it stringifies the key in qq

[02:53] *** a-jing joined
[02:53] *** a-jing left
[02:56] *** cjfields left
[03:03] *** justatheory joined
[03:05] *** elmex_ joined
[03:19] *** elmex left
[03:19] *** grtnam1 left
[03:19] *** elmex_ is now known as elmex

[03:28] *** cjfields joined
[03:43] <cjfields> back

[03:45] <cjfields> diakopter: 'so it stringifies the key in qq'; well, pugs does so only partially (works with /b,leaves out /n).  However, it interprets escaped chars in qw (single quotes) as if they are qq.

[03:46] <cjfields> so it's a mixed bag, really, but I'm not expecting the correct answer from pugs...

[03:46] <cjfields> just a close to correct one!

[03:51] <cjfields> speaking of pugs, nice to see a renewed effort to get it running again using the latest ghc 

[03:59] *** eternaleye left
[03:59] *** eternaleye joined
[04:03] *** eternaleye_ joined
[04:04] *** sri_work joined
[04:04] *** eternaleye left
[04:04] *** eternaleye_ is now known as eternaleye

[04:27] *** cjfields left
[05:06] *** eternaleye left
[05:14] *** Psyche^ joined
[05:26] *** Patterner left
[05:26] *** Psyche^ is now known as Patterner

[05:39] <scrottie> "speaking of pugs, nice to see a renewed effort to get it running again using the latest ghc" -- yay!

[05:57] *** wknight8111 left
[06:00] *** BinGOs_ is now known as BinGOs

[06:03] <diakopter> scrottie: see the updated INSTALL file

[06:04] <diakopter> it works

[06:04] * diakopter amending my previous performance statements

[06:04] <diakopter> fixed the packratness; got rid of a bunch of WRONG premature optimization... and then did some other kinds of RIGHT premature optimization

[06:05] <diakopter> regression line for time vs input is 0.09n**2+0.9n+0.1

[06:06] <diakopter> so, a slight polynomial term but dominated by linear.

[06:10] <diakopter> so, 1200 chars in 12 seconds.  now it's only 1/20 the speed of STD5

[06:12] *** apeiron left
[06:13] *** Jedai joined
[06:26] *** apeiron joined
[06:38] *** eternaleye joined
[06:53] *** alester left
[06:58] *** iblechbot joined
[07:02] *** polettix joined
[07:05] <pugs_svnbot> r20968 | diakopter++ | [yap6]

[07:05] <pugs_svnbot> r20968 | diakopter++ | * LOTS of performanc improvements; it's actually usable, barely.

[07:23] *** cosimo joined
[07:23] <pugs_svnbot> r20969 | moritz++ | [spec] finer graded fudging of complex.t

[07:29] <bacek_> moritz_:  its actually bug in Test.pm

[07:29] <bacek_> in 'approx'

[07:29] <moritz_> bacek_: how so?

[07:29] <bacek_> abs($x-$y)

[07:30] <moritz_> and no abs(Complex) multi?

[07:30] <bacek_> yes

[07:30] <moritz_> frome the mathematical POW it looks fine

[07:30] <bacek_> perl6: say cis(3*pi/2)

[07:30] <p6eval> kp6 r20969: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[07:30] <p6eval> ..pugs: OUTPUT[*** No such subroutine: "&cis"␤    at /tmp/T6jpJZSr7l line 1, column 5 - line 2, column 1␤]

[07:30] <p6eval> ..rakudo r28667: OUTPUT[-1.83691e-16-1i␤]

[07:30] <p6eval> ..elf r20969: OUTPUT[Undefined subroutine &GLOBAL::pi called at (eval 119) line 3.␤ at ./elf_f line 3854␤]

[07:31] <bacek_> he. Looks like rakudo right about result.

[07:31] <bacek_> So its just test wrong. It should be -1i

[07:32] <moritz_> aye

[07:34] <moritz_> bacek_: are you going to fix it?

[07:35] *** Jedai left
[07:36] <moritz_> pmichaud: btw as long as method fallback is still active, rand($Num) is valid syntax (as fallback for $Num.rand)

[07:38] <bacek_> moritz_: no... I'm not 100% sure...

[07:39] <moritz_> bacek_: but I am ;)

[07:39] <bacek_> perl6: my $arg = 3*pi/2; say cis($arg); say cos($arg) + 1i*sin($arg)

[07:39] <p6eval> kp6 r20969: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[07:39] <p6eval> ..pugs: OUTPUT[*** No such subroutine: "&cis"␤    at /tmp/e8ObffV8hK line 1, column 23-32␤]

[07:39] <p6eval> ..rakudo r28667: OUTPUT[-1.83691e-16-1i␤-1.83691e-16-1i␤]

[07:39] <p6eval> ..elf r20969: OUTPUT[Undefined subroutine &GLOBAL::pi called at (eval 127) line 3.␤ at ./elf_f line 3854␤]

[07:39] <moritz_> and I'm the one who broke it in the first place ;)

[07:40] <bacek_> moritz_: yeap. test is wrong

[07:40] <bacek_> rakudo: say -1i

[07:40] <p6eval> rakudo r28667 OUTPUT[-1␤]

[07:40] <bacek_> but we can't unfudge it yet :)

[07:41] <moritz_> yes, it's missing the prefix:<->

[07:41] <moritz_> which you've submitted a patch for iirc

[07:41] <bacek_> #56540 iirc :)

[07:42] * moritz_ doesn't remeber ticket numbers ;)

[07:42] <bacek_> #56230. Just checked my inbox :)

[07:44] <pugs_svnbot> r20970 | bacek++ | [spec] Fix test and fudge reason in complex.t

[07:44] * bacek_ steal little bit of karma from moritz

[07:45] <moritz_> you can have all of my #perl6 karma if you implement perl 6 for me ;)

[07:45] <bacek_> moritz_: in progress :)

[07:46] <moritz_> I know ;)

[07:46] <bacek_> r28610... There is Num.unpolar already... 

[07:47] <bacek_> rakudo: say 1.unploar(1i)

[07:47] <p6eval> rakudo r28667 OUTPUT[Method 'unploar' not found for invocant of class 'Int'␤current instr.: '_block11' pc 49 (EVAL_13:20)␤

[07:48] <bacek_> rakudo: say 1.unpolar(1)

[07:48] <p6eval> rakudo r28667 OUTPUT[Method 'unpolar' not found for invocant of class 'Int'␤current instr.: '_block11' pc 38 (EVAL_13:19)␤

[07:48] <moritz_> rakudo: say (1.1).unpolar(1)

[07:48] <p6eval> rakudo r28667 OUTPUT[0.594333+0.925618i␤]

[07:48] <bacek_> yak... Its Int ot Num promotion problem

[07:49] <bacek_> rakudo: say 1.0.unpolar(2)

[07:49] <p6eval> rakudo r28667 OUTPUT[-0.416147+0.909297i␤]

[07:49] * moritz_ woders if Num shouldn't just be a role that all numeric types do

[07:49] <bacek_> moritz_: +1.

[07:49] <bacek_> Why you calculate $angle in complex.t?

[07:50] <moritz_> I was too lazy to write 110 tests manually

[07:52] <moritz_> sigh, why do some of my pages don't display correctly in FF3?

[07:54] <bacek_> but $angle not used...

[07:54] <moritz_> in the first block, yes

[07:54] <moritz_> that's not intentional

[07:56] <bacek_> You steal my cpu-cicles!!! :)

[07:57] <moritz_> bacek_: but only to prevent you from sending more spam (/me ducks)

[07:57] <moritz_> ;-)

[07:58] <bacek_> but my spam contains patches for rakudo!

[07:58] <bacek_> ok. time to go home. See you in couple of hours.

[07:58] *** bacek_ left
[07:58] <moritz_> ciao

[08:07] *** sri_work left
[08:07] *** sri_work joined
[08:08] *** sri_work left
[08:08] *** sri_work joined
[08:10] *** sri_work left
[08:11] *** sri_work joined
[08:11] *** sri_work left
[08:12] *** sri_work joined
[08:15] *** luqui joined
[08:19] *** bsb joined
[08:22] *** masak joined
[08:22] *** masak left
[08:34] *** masak joined
[08:35] *** meppl joined
[08:58] *** drbean left
[09:02] *** xinming joined
[09:10] *** jfredett left
[09:12] *** jfredett joined
[09:16] *** xinming_ left
[09:31] <moritz_> rakudo: say pi / 2

[09:31] <p6eval> rakudo r28667 OUTPUT[1.5708␤]

[09:41] *** drbean joined
[09:55] *** Jedai joined
[10:20] <moritz_> bacek++ # bringing my attention to uc.t

[10:20] <pugs_svnbot> r20971 | moritz++ | [spec] S29-str/uc.t

[10:20] <pugs_svnbot> r20971 | moritz++ |  * comment one test that is likely to be out of date 

[10:20] <pugs_svnbot> r20971 | moritz++ |    (wrt newer Unicode versions)

[10:20] <pugs_svnbot> r20971 | moritz++ |  * improved fudging - now ready for inclusion in spectest_regression

[10:21] <moritz_> uhm, why did I think it's ready for spectest_regression? still reports number of tests wrongly

[10:26] <pugs_svnbot> r20972 | moritz++ | [spec] S29-uc.t: fixed test count in fudged output

[10:34] *** meppl left
[10:38] *** polettix left
[11:07] *** ilbot2 left
[11:07] *** yves left
[11:07] *** rafl left
[11:07] *** Lunchy left
[11:07] *** Jedai left
[11:07] *** drbean left
[11:07] *** bsb left
[11:07] *** luqui left
[11:07] *** eternaleye left
[11:07] *** aindilis left
[11:07] *** s1n left
[11:07] *** Grrrr left
[11:07] *** japhb left
[11:07] *** pjcj left
[11:07] *** sri_work left
[11:07] *** buubot left
[11:07] *** diakopter left
[11:07] *** wolverian left
[11:07] *** TimToady left
[11:07] *** cls_bsd left
[11:07] *** lambdabot left
[11:07] *** GeJ left
[11:07] *** p6eval left
[11:07] *** yahooooo2 left
[11:07] *** lumi left
[11:07] *** SamB left
[11:07] *** masak left
[11:07] *** iblechbot left
[11:07] *** Eevee left
[11:07] *** penk left
[11:07] *** r0bby left
[11:07] *** agentzh left
[11:07] *** stevan_ left
[11:07] *** fullermd left
[11:07] *** qmole_ left
[11:07] *** kolibrie left
[11:07] *** ingy left
[11:07] *** pmichaud left
[11:07] *** charsbar left
[11:07] *** mj41 left
[11:07] *** simcop2387 left
[11:07] *** xinming left
[11:07] *** apeiron left
[11:07] *** elmex left
[11:07] *** justatheory left
[11:07] *** Coleoid left
[11:07] *** jan__ left
[11:07] *** Khisanth left
[11:07] *** pugs_svnbot left
[11:07] *** dmq left
[11:07] *** mofino left
[11:07] *** jiing left
[11:07] *** dalek left
[11:07] *** Caelum left
[11:07] *** hcchien left
[11:07] *** buu left
[11:07] *** zostay left
[11:07] *** fridim left
[11:07] *** audreyt left
[11:07] *** perlbot left
[11:07] *** BinGOs left
[11:07] *** funktio left
[11:07] *** jfredett left
[11:07] *** Gothmog_ left
[11:07] *** cognominal_ left
[11:07] *** yath left
[11:07] *** Ara4n left
[11:07] *** nnunley left
[11:07] *** Juerd left
[11:07] *** Ingmar left
[11:07] *** lisppaste3 left
[11:07] *** revdiablo left
[11:07] *** felipe left
[11:07] *** cosimo left
[11:07] *** ruoso left
[11:07] *** rakudo_svn left
[11:07] *** arguile left
[11:07] *** Maghnus left
[11:07] *** silug left
[11:07] *** SubStack left
[11:07] *** awwaiid left
[11:07] *** PerlJam left
[11:07] *** osfameron left
[11:07] *** allbery_b left
[11:07] *** Maddingue left
[11:07] *** pasteling left
[11:07] *** Patterner left
[11:07] *** araujo left
[11:07] *** Tene left
[11:07] *** smtms left
[11:07] *** rhr_ left
[11:07] *** kane_ left
[11:07] *** broquaint left
[11:07] *** kcwu left
[11:07] *** Southen_ left
[11:07] *** pengrate left
[11:07] *** cj left
[11:07] *** avar left
[11:07] *** mtve left
[11:07] *** gugod left
[11:07] *** bacek left
[11:07] *** vixey left
[11:07] *** speckbot left
[11:07] *** beppu left
[11:07] *** nothingmuch left
[11:07] *** Kattana left
[11:07] *** spinclad left
[11:07] *** moritz_ left
[11:07] *** Auzon left
[11:07] *** jrockway left
[11:07] *** TreyHarris left
[11:07] *** IRSeekBot left
[11:07] *** obra left
[11:07] *** clkao left
[11:07] *** cookys left
[11:07] *** nipotaway left
[11:09] *** jfredett joined
[11:09] *** xinming joined
[11:09] *** apeiron joined
[11:09] *** elmex joined
[11:09] *** justatheory joined
[11:09] *** BinGOs joined
[11:09] *** Gothmog_ joined
[11:09] *** Coleoid joined
[11:09] *** simcop2387 joined
[11:09] *** funktio joined
[11:09] *** jan__ joined
[11:09] *** cognominal_ joined
[11:09] *** Khisanth joined
[11:09] *** fridim joined
[11:09] *** hcchien joined
[11:09] *** revdiablo joined
[11:09] *** Ara4n joined
[11:09] *** felipe joined
[11:09] *** dmq joined
[11:09] *** perlbot joined
[11:09] *** pugs_svnbot joined
[11:09] *** mofino joined
[11:09] *** dalek joined
[11:09] *** Caelum joined
[11:09] *** jiing joined
[11:09] *** Ingmar joined
[11:09] *** Juerd joined
[11:09] *** buu joined
[11:09] *** audreyt joined
[11:09] *** nnunley joined
[11:09] *** lisppaste3 joined
[11:09] *** yath joined
[11:09] *** zostay joined
[11:09] *** GeJ joined
[11:09] *** p6eval joined
[11:09] *** yahooooo2 joined
[11:09] *** SamB joined
[11:09] *** lumi joined
[11:09] *** smtms joined
[11:09] *** jrockway joined
[11:09] *** obra joined
[11:09] *** broquaint joined
[11:10] *** nothingmuch joined
[11:12] *** broquaint left
[11:12] *** Patterner joined
[11:12] *** bacek joined
[11:12] *** Tene joined
[11:12] *** vixey joined
[11:12] *** Auzon joined
[11:12] *** Southen_ joined
[11:12] *** pengrate joined
[11:12] *** Kattana joined
[11:12] *** TreyHarris joined
[11:12] *** gugod joined
[11:12] *** spinclad joined
[11:12] *** rhr_ joined
[11:12] *** cj joined
[11:12] *** kane_ joined
[11:12] *** broquaint joined
[11:12] *** avar joined
[11:12] *** moritz_ joined
[11:12] *** nipotaway joined
[11:12] *** mtve joined
[11:12] *** spinclad left
[11:12] *** rhr_ left
[11:12] *** Patterner left
[11:12] *** Tene_ joined
[11:12] *** gugod left
[11:13] *** Lunchy joined
[11:13] *** rafl joined
[11:13] *** ilbot2 joined
[11:13] *** yves joined
[11:13] *** TimToady joined
[11:13] *** Patterner joined
[11:13] *** sri_work joined
[11:13] *** buubot joined
[11:13] *** lambdabot joined
[11:13] *** wolverian joined
[11:13] *** diakopter joined
[11:13] *** cls_bsd joined
[11:13] *** irc.freenode.net sets mode: +o TimToady

[11:13] *** broquaint left
[11:13] *** moritz_ left
[11:13] *** ingy joined
[11:13] *** cookys joined
[11:13] *** Southen joined
[11:13] *** masak joined
[11:13] *** iblechbot joined
[11:13] *** Eevee joined
[11:13] *** penk joined
[11:13] *** r0bby joined
[11:13] *** agentzh joined
[11:13] *** stevan_ joined
[11:13] *** mj41 joined
[11:13] *** kolibrie joined
[11:13] *** fullermd joined
[11:13] *** qmole_ joined
[11:13] *** pmichaud joined
[11:13] *** charsbar joined
[11:13] *** irc.freenode.net sets mode: +o ingy

[11:13] *** gugod joined
[11:13] *** cosimo joined
[11:13] *** ruoso joined
[11:13] *** Maghnus joined
[11:13] *** SubStack joined
[11:13] *** silug joined
[11:13] *** pasteling joined
[11:13] *** PerlJam joined
[11:13] *** osfameron joined
[11:13] *** awwaiid joined
[11:13] *** rakudo_svn joined
[11:13] *** allbery_b joined
[11:13] *** Maddingue joined
[11:13] *** arguile joined
[11:13] *** broquain1 joined
[11:13] *** Jedai joined
[11:13] *** drbean joined
[11:13] *** bsb joined
[11:13] *** luqui joined
[11:13] *** eternaleye joined
[11:13] *** aindilis joined
[11:13] *** japhb joined
[11:13] *** pjcj joined
[11:13] *** Grrrr joined
[11:13] *** s1n joined
[11:14] *** moritz joined
[11:14] *** TreyHarris left
[11:14] *** avar left
[11:14] *** avarab joined
[11:14] *** cognominal_ left
[11:15] *** a-jing joined
[11:15] *** a-jing left
[11:17] *** eternaleye left
[11:17] *** cj_ joined
[11:17] *** eternaleye joined
[11:17] *** TreyHarris joined
[11:18] *** spinclad joined
[11:19] *** moritz left
[11:20] *** moritz_ joined
[11:21] *** araujo joined
[11:21] *** Auzon left
[11:21] *** Auzon joined
[11:22] *** cj left
[11:23] *** Tene left
[11:24] <moritz_> freenode had a hiccup ;)

[11:25] *** cognominal_ joined
[11:25] *** eternaleye left
[11:25] *** Grrrr left
[11:25] *** s1n left
[11:25] *** japhb left
[11:25] *** luqui left
[11:25] *** pjcj left
[11:25] *** bsb left
[11:25] *** Jedai left
[11:25] *** aindilis left
[11:25] *** drbean left
[11:26] *** eternaleye joined
[11:26] *** Jedai joined
[11:26] *** drbean joined
[11:26] *** bsb joined
[11:26] *** luqui joined
[11:26] *** aindilis joined
[11:26] *** japhb joined
[11:26] *** pjcj joined
[11:26] *** Grrrr joined
[11:26] *** s1n joined
[11:26] *** Southen_ left
[11:33] *** iblechbot left
[11:42] *** pbuetow joined
[11:57] *** FurnaceBoy joined
[12:01] *** edpratomo joined
[12:01] *** FurnaceBoy left
[12:06] *** pbuetow left
[12:06] *** Grrrr left
[12:06] *** s1n left
[12:06] *** japhb left
[12:06] *** luqui left
[12:06] *** pjcj left
[12:06] *** bsb left
[12:06] *** eternaleye left
[12:06] *** Jedai left
[12:06] *** aindilis left
[12:06] *** drbean left
[12:07] *** Tene_ left
[12:07] *** Tene joined
[12:07] *** avarab left
[12:08] *** avar joined
[12:10] *** pbuetow joined
[12:10] *** eternaleye joined
[12:10] *** Jedai joined
[12:10] *** drbean joined
[12:10] *** bsb joined
[12:10] *** luqui joined
[12:10] *** aindilis joined
[12:10] *** japhb joined
[12:10] *** pjcj joined
[12:10] *** Grrrr joined
[12:10] *** s1n joined
[12:17] *** chris2 joined
[12:30] *** cognominal_ left
[12:38] *** Ingmar left
[12:39] *** kanru joined
[12:40] *** cognominal_ joined
[12:43] *** cmarcelo joined
[12:44] *** wknight8111 joined
[12:47] *** gbacon joined
[12:53] *** DietCoke joined
[13:01] *** pbuetow_ joined
[13:02] *** edpratomo left
[13:08] <jfredett>  /who

[13:08] <jfredett> oops

[13:09] <DietCoke> ME!

[13:09] *** pbuetow left
[13:10] *** diakopter is now known as oops

[13:10] *** oops is now known as diakopter

[13:16] <moritz_>  /nick TooMuchTimeCoke ;-)

[13:19] <diakopter> I like VanillaZero, myself

[13:29] *** iblechbot joined
[13:29] *** vixey left
[13:30] *** vixey joined
[13:35] *** TJCRI joined
[13:40] *** Coleoid_ joined
[13:45] *** rhr joined
[13:46] *** a-jing joined
[13:46] *** a-jing left
[13:47] *** penk left
[14:01] *** Coleoid left
[14:06] *** jhorwitz joined
[14:12] <pmichaud> 07:33 <moritz_> pmichaud: btw as long as method fallback is still active, rand($Num) is valid syntax (as fallback for $Num.rand)

[14:12] <pmichaud> I don't think that's correct.

[14:12] <pmichaud> method fallback says that   given  $x.foo(), if no 'foo' method is found for $x then it will try foo($x)

[14:12] *** hanekomu joined
[14:12] <pmichaud> it doesn't say that because $x.foo() exists then foo($x) must also exist.

[14:14] <pmichaud> i.e., method fallback doesn't mean that   foo($x)  will try $x.foo()

[14:14] *** Lorn joined
[14:15] *** cjfields joined
[14:18] *** luqui left
[14:20] <moritz_> pmichaud: uhm yes, you're right

[14:21] *** alester joined
[14:45] *** ilogger2 joined
[14:46] *** avar joined
[14:46] *** avar left
[14:50] *** avar joined
[14:52] *** avar left
[14:52] *** avar joined
[14:53] *** avar left
[14:53] *** avar joined
[14:59] *** pbuetow joined
[15:02] *** meteorjay left
[15:03] *** hercynium joined
[15:10] *** vixey joined
[15:22] <pugs_svnbot> r20973 | diakopter++ | [yap6] fix stupid bugs from yesterday.

[15:22] <pugs_svnbot> r20973 | diakopter++ | now that the speed is tolerable, working on the opp.

[15:38] *** alanhaggai joined
[16:01] *** meteorjay joined
[16:02] *** TJCRI joined
[16:02] *** alanhaggai left
[16:04] *** meppl joined
[16:57] *** Jamtech joined
[16:59] *** Jamtech left
[17:04] *** kanru joined
[17:04] *** Khisanth joined
[17:08] *** meppl left
[17:15] <cognominal_> what is the perl6 way to  get to the last element of an array?

[17:16] <moritz_> cognominal_: @array[*-1]

[17:16] <cognominal_> works in rakudo?

[17:16] <moritz_> nope

[17:16] <cognominal_> ok

[17:16] <moritz_> rakudo: my @a = <a b c>; say @a[@a.end]

[17:16] <p6eval> rakudo r28668 OUTPUT[Method 'end' not found for invocant of class 'Perl6Array'␤current instr.: '_block11' pc 77 (EVAL_13:29)␤

[17:16] <moritz_> rakudo: my @a = <a b c>; say @a[@a.last]

[17:16] <p6eval> rakudo r28668 OUTPUT[Method 'last' not found for invocant of class 'Perl6Array'␤current instr.: '_block11' pc 77 (EVAL_13:29)␤

[17:17] <moritz_> pugs: my @a = <a b c>; say @a[@a.end]

[17:17] <p6eval> OUTPUT[c␤]

[17:17] <cognominal_> rakudo: my @a = <a b c>; say @a[@a.top]

[17:17] <p6eval> rakudo r28668 OUTPUT[Method 'top' not found for invocant of class 'Perl6Array'␤current instr.: '_block11' pc 77 (EVAL_13:29)␤

[17:17] <pmichaud> top/end/last not implemented :-)

[17:17] <moritz_> TODO: implement List.lend

[17:17] <moritz_> s/lend/end/

[17:17] <cognominal_> in fact I was asking for NQP :)

[17:17] <pmichaud> ...NQP?

[17:18] <moritz_> nqp: my @a = <a b c>; say @a[@a.end]

[17:18] <p6eval> OUTPUT[Statement not terminated properly at line 1, near "= <a b c>;"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 3940 (src/Grammar_gen.pir:1362)␤called from Sub 'parrot;NQP::Grammar;state...

[17:18] <moritz_> nqp: my @a = (1, 2, 3); say @a[@a.end]

[17:18] <p6eval> OUTPUT[Statement not terminated properly at line 1, near "= (1, 2, 3"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 3940 (src/Grammar_gen.pir:1362)␤called from Sub 'parrot;NQP::Grammar;state...

[17:18] <pmichaud> nqp doesn't support '='.  all functions require parens.

[17:18] <moritz_> nqp: my @a := (1, 2, 3); say @a[@a.end()]

[17:18] <p6eval> OUTPUT[Statement not terminated properly at line 1, near "@a[@a.end("␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 3940 (src/Grammar_gen.pir:1362)␤called from Sub 'parrot;NQP::Grammar;state...

[17:19] <pmichaud> all functions (including 'say') require parens :-)

[17:19] <moritz_> nqp: my @a := (1, 2, 3); say(@a[@a.end()]);

[17:19] <diakopter> I can't believe I'm actually *using* an Acme module for something useful

[17:19] <p6eval> OUTPUT[Method 'end' not found for invocant of class 'ResizablePMCArray'␤current instr.: '_block11' pc 27 (EVAL_3:13)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 806 (src/PCT/HLLCompiler.pir:481)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1088 (src/PCT/HLLCompiler.pir:6...

[17:19] <moritz_> pmichaud: thanks ;)

[17:19] <pmichaud> didn't know that p6eval supported nqp :-)

[17:20] <cognominal_> these two, := and paren, I know even if I still trip over them

[17:25] <pmichaud> I should probably have infix:<=> throw a more useful excecption.

[17:25] <pmichaud> *exception.

[17:25] <moritz_> pmichaud: it supports nearly everything that suports 'say("hi")' - except perl 5.10, of course ;)

[17:25] <moritz_> evalbot control restart

[17:25] <pugs_svnbot> r20974 | moritz++ | [evalbot] truncate stack traces in NQP output - we need a more general

[17:25] <pugs_svnbot> r20974 | moritz++ | solution for filtering

[17:25] *** p6eval joined
[17:25] <moritz_> nqp: say foo bar

[17:25] <p6eval> nqp: OUTPUT[Statement not terminated properly at line 1, near "foo bar"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[17:25] <moritz_> ok, truncation works

[17:27] <moritz_> afk

[17:29] *** pbuetow_ joined
[17:32] *** Khisanth left
[17:33] <cognominal_> nqp: my %a; %a{'a'}++

[17:33] <p6eval> nqp: OUTPUT[increment() not implemented in class 'Undef'␤current instr.: '_block11' pc 25 (EVAL_4:16)␤

[17:33] <cognominal_> nqp: my %a; %a{'a'}.defined()

[17:33] <p6eval> nqp: OUTPUT[Method 'defined' not found for invocant of class 'Undef'␤current instr.: '_block11' pc 28 (EVAL_4:14)␤

[17:34] <cognominal_> nqp: my %a; say(%a{'a'}.WHAT())

[17:34] <p6eval> nqp: OUTPUT[Method 'WHAT' not found for invocant of class 'Undef'␤current instr.: '_block11' pc 28 (EVAL_4:14)␤

[17:36] *** hercynium left
[17:39] *** Khisanth joined
[17:40] *** pbuetow left
[17:40] <cognominal_> nqp: my %a;  %a<a> := 0 ;  say ++%a{'a'}

[17:40] <p6eval> nqp: OUTPUT[increment() not implemented in class 'Sub'␤current instr.: '_block11' pc 31 (EVAL_4:17)␤

[17:40] <cognominal_> nqp: my %a;  %a<a> := 0 ;  say( ++%a{'a'} )

[17:41] <p6eval> nqp: OUTPUT[0␤]

[17:41] <cognominal_> nqp: my %a;  %a<a> := 0 ;  say( %a<a> := %a<a> + 1 )

[17:41] <p6eval> nqp: OUTPUT[1␤]

[17:51] *** meppl joined
[17:54] *** chinsans joined
[18:08] *** chinsans left
[18:38] *** wknight8111 joined
[18:38] <pugs_svnbot> r20975 | diakopter++ | [yap6]

[18:38] <pugs_svnbot> r20975 | diakopter++ | * a banillion more speed/memory usage premature optimizations. :)

[18:42] *** Jedai joined
[18:43] <Auzon> pugs: say 'A' .. 'ZZ'

[18:43] <p6eval> OUTPUT[ABCDEFGHIJKLMNOPQRSTUVWXYZAAABACADAEAFAGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZBABBBCBDBEBFBGBHBIBJBKBLBMBNBOBPBQBRBSBTBUBVBWBXBYBZCACBCCCDCECFCGCHCICJCKCLCMCNCOCPCQCRCSCTCUCVCWCXCYCZDADBDCDDDEDFDGDHDIDJDKDLDMDNDODPDQDRDSDTDUDVDWDXDYDZEAEBECEDEEEFEGEHEIEJEKELEMENEOEPEQERESETEUEVEW...

[18:46] <rakudo_svn> r28670 | pmichaud++ | [rakudo]:

[18:46] <rakudo_svn> r28670 | pmichaud++ | * Fix problem with 'sprintf' method appearing in wrong namespace.

[18:46] <rakudo_svn> r28670 | pmichaud++ | * Oddly, the problem appeared because running 'perl6.pir' gave

[18:46] <rakudo_svn> r28670 | pmichaud++ |   different results (an exception) from running 'perl6.pbc'.  I

[18:46] <rakudo_svn> r28670 | pmichaud++ |   have no clue why the difference existed.

[18:47] <pmichaud> pugs: say 'A' .. 'BB'

[18:47] <p6eval> OUTPUT[ABCDEFGHIJKLMNOPQRSTUVWXYZAAABACADAEAFAGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZBABB␤]

[18:47] <pmichaud> rakudo: say 'A' .. 'BB'

[18:47] <p6eval> rakudo r28669 OUTPUT[AB␤]

[18:47] <pmichaud> hrm.

[18:48] <pmichaud> it stops at 'C' because it thinks that 'C' is greater than 'BB'.

[18:48] <pmichaud> that's.... interesting.

[18:49] <pmichaud> pugs: say 'B' ^.. 'BB'

[18:49] <p6eval> OUTPUT[CDEFGHIJKLMNOPQRSTUVWXYZAAABACADAEAFAGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZBABB␤]

[18:49] <pmichaud> pugs:  say 'B' ^..^ 'BB'

[18:49] <p6eval> OUTPUT[CDEFGHIJKLMNOPQRSTUVWXYZAAABACADAEAFAGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZBA␤]

[18:49] *** REPLeffect joined
[18:50] <pmichaud> pugs:  say 'B' ^..^ 'AG'

[18:50] <p6eval> OUTPUT[CDEFGHIJKLMNOPQRSTUVWXYZAAABACADAEAF␤]

[18:51] <pmichaud> say '0' .. '19'

[18:51] <pmichaud> pugs: say '0' .. '19'

[18:51] <p6eval> OUTPUT[012345678910111213141516171819␤]

[18:51] <pmichaud> pugs:  say '0' .. '00'

[18:51] <p6eval> OUTPUT[0123456789␤]

[18:51] <pmichaud> pugs:  say '0'..'01'

[18:51] <p6eval> OUTPUT[0123456789␤]

[18:52] <diakopter> pugs: say '0A'..'1A'

[18:52] <p6eval> OUTPUT[0A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z1A␤]

[18:53] <diakopter> pugs: say 'A0'..'Z0'

[18:53] <p6eval> OUTPUT[A0A1A2A3A4A5A6A7A8A9B0B1B2B3B4B5B6B7B8B9C0C1C2C3C4C5C6C7C8C9D0D1D2D3D4D5D6D7D8D9E0E1E2E3E4E5E6E7E8E9F0F1F2F3F4F5F6F7F8F9G0G1G2G3G4G5G6G7G8G9H0H1H2H3H4H5H6H7H8H9I0I1I2I3I4I5I6I7I8I9J0J1J2J3J4J5J6J7J8J9K0K1K2K3K4K5K6K7K8K9L0L1L2L3L4L5L6L7L8L9M0M1M2M3M4M5M6M7M8M9N0N1N2N3N4N5N6N7N8N9...

[18:53] <diakopter> weird

[18:54] <Auzon> What's weird?

[18:54] *** pmurias joined
[18:54] <diakopter> Auzon: nm :/

[18:54] *** pzt joined
[18:55] <TimToady> '0' .. '00' seems incorrect

[18:55] <pugs_svnbot> r20976 | diakopter++ | [yap6]

[18:55] <pugs_svnbot> r20976 | diakopter++ | * less grammar recursion; more speed improvements.

[18:55] <pugs_svnbot> r20976 | diakopter++ | * memoizing fully fixed now...

[18:55] <pmurias> diakopter: hi

[18:55] <rakudo_svn> r28671 | pmichaud++ | [rakudo]:

[18:55] <rakudo_svn> r28671 | pmichaud++ | * Fix ranges on incrementing strings (e.g., 'A'..'BK')

[18:55] <TimToady> it should be equivalent to '0' .. '99'

[18:56] <diakopter> pugs: say '0A'..'1A0'

[18:56] <p6eval> OUTPUT[0A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z2A2B2C2D2E2F2G2H2I2J2K2L2M2N2O2P2Q2R2S2T2U2V2W2X2Y2Z3A3B3C3D3E3F3G3H3I3J3K3L3M3N3O3P3Q3R3S3T3U3V3W3X3Y3Z4A4B4C4D4E4F4G4H4I4J4K4L4M4N4O4P4Q4R4S4T4U4V4W4X4Y4Z5A5B5C5D5E5F5G5H5I5J...

[18:56] <TimToady> (by the exceed-the-length rule)

[18:56] <pmurias> TimToady: did you see my changes?

[18:56] <pmichaud> TimToady: does it _only_ check length?

[18:56] <TimToady> if it doesn't get an exact match, it only checks lengths, like p5

[18:57] <pmichaud> ah, length or exact match

[18:57] * pmurias should go fetch his laptop instead of talking via cgi-irc

[18:57] <pmichaud> hrm.

[18:57] <diakopter> hm; evalbot's perl 5.8 doesn't like my qr||sp

[18:57] <TimToady> you can't rely on anything other than equality

[18:58] <pmichaud> so, 'A'..'Bz'  would be the same a 'A' .. 'ZZ' ?

[18:58] <diakopter> oh; that's b/c I don't need the p suffix

[18:58] <TimToady> pmichaud: yes

[18:58] <pmichaud> okay.  That complicates things a bit, but I guess we can get there.

[18:58] <TimToady> I think it simplifies things

[18:59] <pmichaud> currently I think pugs does:   if length smaller, always increment

[18:59] <pmichaud> if length bigger, stop

[18:59] <pmichaud> if length equal, compare

[18:59] <TimToady> that seems sane, as long as compare only means test-for-equality

[18:59] <diakopter> hey, more speed ^

[19:00] <pmichaud> how would we check if $z ~~ 'A' .. 'AA'  ?

[19:00] <pugs_svnbot> r20977 | diakopter++ | [yap6]

[19:00] <pugs_svnbot> r20977 | diakopter++ | * don't need 5.10 p suffix

[19:00] <pmichaud> iterate through the range looking for $z ?

[19:00] * ruoso wonders if TimToady have some time to think about the metamethods thing... (I know I'm being annoying with that)

[19:01] <TimToady> no, I'm only stealing some lunch time from $dayjob to try to catch up here, and still haven't even read any email today

[19:02] * diakopter snaps his fingers at p6eval

[19:02] <ruoso> ok... I'm not in a rush also... just making sure it stays on topic...

[19:04] <TimToady> I think Mooseyfolk are likelier to give you good feedback on that.  I installed the .HOW Curtain for a reason...

[19:04] <TimToady> which is that I mostly don't want to think about it. :)

[19:05] <pmurias> TimToady: seen my commits to STD yet? pmichaud raised some objections about them

[19:06] <pmichaud> more questions than objections.  :-)

[19:06] <TimToady> what did you do?

[19:06] <ruoso> TimToady, that is already peer-reviewed with nothingmuch... I think it's just a matter of 'is this the way to go?'

[19:06] <pmurias> fixed EXPR a bit

[19:06] <pmurias> listops generate proper match objects

[19:07] <pmurias> and EXPR receives a string instead of a hash as passing hashes is broken in gimme5

[19:07] <pmurias> and EXPR respects the initial precedence

[19:08] <pmurias> it's one commit  really

[19:08] <TimToady> I don't know what "initial precedence" means.  the precedence that is passed in is not "initial", it's the limit on precedence looseness

[19:09] <diakopter> qr/^(\Q$want\E)/s

[19:09] <diakopter> oops

[19:09] <pmurias> TimToady: didn't know how to phrase it correctly

[19:09] <TimToady> is there an example to think about?

[19:09] <diakopter> initial meaning innermost?

[19:10] <diakopter> or outermost?

[19:10] <pmichaud> effectively the change is that EXPR() now accepts a precedence level as an argument instead of a hash containing %preclim<prec>

[19:10] <TimToady> it's used for things like preventing you from saying $a ?? $b = 2 !! $c

[19:10] <TimToady> it will treat = like a terminator

[19:10] <pmichaud> i.e., it receives $preclim directly instead of setting $preclim to %preclim<prec>

[19:11] <TimToady> not quibbling about the string, as long as we only need the precedence, but we might want other things later

[19:11] <pmichaud> (I'm neither for nor against the change -- I was simply wondering about it.)

[19:11] <pmichaud> (fwiw, Rakudo has already been using a simple string as its argument instead of a hash.)

[19:12] <TimToady> I'd be more inclined to fix gimme5 to pass a hash correctly

[19:12] <pmichaud> that was my guess.  :-)

[19:12] <TimToady> but it's no great shakes either way

[19:12] *** pmurias left
[19:12] <pmichaud> okay, works for me!

[19:12] <pmichaud> afk # lunch for real this time.

[19:13] *** pmurias joined
[19:15] <pmurias> re example to think about was it directed to me?

[19:16] <pmurias> the think i wanted it to work was => which was broken but now works

[19:17] <TimToady> => should simply be parsed as item assignment, which is tighter than comma

[19:19] *** barney joined
[19:20] *** pmurias_ joined
[19:21] *** pmurias left
[19:21] <TimToady> pmurias_: => should simply be parsed as item assignment, which is tighter than comma

[19:23] <pmurias_> TimToady: it's parsed by fatarrow which calls EXPR with a limit

[19:23] <pmurias_> i didn't change that but i made EXPR respect the limit

[19:24] <pmurias_> TimToady: when does autoquoting happen?

[19:25] <pmurias_> the synopsis state that the left side can be anything

[19:25] <TimToady> fatarrow is only for bare identifiers, but yes, it needs to know the precedence in EXPR

[19:26] <TimToady> ordinary => is defined down with the other binary assignment ops

[19:27] *** eternaleye joined
[19:27] *** barney left
[19:27] <pmurias_> 1=>2; dosn't work

[19:28] <TimToady> at line 2724

[19:28] <TimToady> well, there's lots of things don't work yet.  :)

[19:29] *** hercynium joined
[19:29] <pmurias_> TimToady: 2724 in the current revision?

[19:29] <TimToady> yes

[19:31] <pmurias_> 20956?

[19:31] <TimToady> how does your current code distinguish item assignment from list assignment?

[19:32] <TimToady> 20977

[19:32] <TimToady> oh, wait, it did a merge

[19:32] *** pmurias joined
[19:33] <TimToady> so my line numbers are probably off

[19:33] <TimToady> about 30 lines off, probably

[19:33] <TimToady> anyway, just a few lines below where you commented out the makes

[19:34] *** pmurias left
[19:40] *** pmurias joined
[19:40] <TimToady> I went ahead and checked in my current copy, even though it's messing up on final curlies right now

[19:40] <pugs_svnbot> r20978 | lwall++ | [STD] current snapshot, some things break

[19:40] *** sscaffidi_ joined
[19:40] *** sscaffidi_ is now known as sscaffidi

[19:40] <pmurias> sorry my laptop hanged strangely

[19:40] <pmurias> i just commented the stuff in infix:<=> as it was creating errors

[19:40] <pmurias> i didn't fix it properly

[19:40] <pmurias> TimToady: what would you prefere me to work on getting agentz's tracer to work with STD5 or feeding STD's parse tree into elf?

[19:40] <TimToady> when I get off $job I'll be working on a more general memoizing capability, which will hopefully fix the current problem with block endings, and the hardwired stopper state check

[19:41] <TimToady> elf sounds like it's more on some kind of critical path

[19:41] <TimToady> and I doubt the format of the parse tree will change rapidly

[19:41] <pmurias> i already started on that one ;)

[19:41] <pmurias> i actually plan to use {*} hook points

[19:42] <TimToady> it'll be nice to get the canonical *cough* parser up on evalbot at some point

[19:42] <TimToady> well, that's what the {*} are there for

[19:43] <pmurias> diakopter asked for putting STD into evalbot but it creates a lot of output

[19:43] <diakopter> TimToady: p6eval runs 5.8

[19:43] <TimToady> I was thinking more on the level of say "howdy"

[19:43] <Auzon> Is file input the current best way to get an iterator that terminates?

[19:43] <TimToady> not parse tree output

[19:44] <pmurias> i'll head of to work than ;)

[19:44] <TimToady> Auzon: seem to be missing some context...

[19:45] <Auzon> I'm trying to test the eager operator.

[19:45] <TimToady> well, if 

[19:45] <TimToady> if Range objects worked...

[19:46] <TimToady> though maybe that doesn't help

[19:46] *** pmurias left
[19:46] <Auzon> I guess I need some way to determine that the iterator is fully read, too.

[19:46] <TimToady> gather/take would be good for that, if implemented

[19:47] <TimToady> since it runs arbitrary code on the take end

[19:47] <TimToady> or you could do eager 1..* and see if you run out of memory :P

[19:49] <Auzon> I don't see a runs_out_of_resource_ok() subroutine. I'd need to implement that first.

[19:49] <TimToady> I think file io might be the best bet for now

[19:50] <TimToady> assuming *that* is implemented  :)

[19:52] *** hercynium left
[19:52] *** pmurias_ left
[19:53] *** cjfields joined
[19:59] <diakopter> canonical

[20:05] <pmichaud> (more general memoizer)++

[20:05] <pmichaud> I've been thinking a similar thing for PCT's grammars.

[20:06] *** REPLeffect left
[20:07] *** REPLeffect joined
[20:07] <Auzon> rakudo: gather {}

[20:07] <p6eval> rakudo r28671 OUTPUT[Null PMC access in type()␤current instr.: 'parrot;Perl6;Grammar;Actions;statement_prefix' pc 123897 (src/gen_actions.pir:11710)␤

[20:07] <pmichaud> gather not implemented yet.

[20:07] <Auzon> That's what I was checking

[20:07] <pmichaud> and empty closures still return null :-|

[20:08] <cjfields> On S05 transliteration:  Are we using 'A..Z'  for range values instead of 'A-Z' (or both)?

[20:08] <pmichaud> cjfields: Perl 6 no longer uses '-' to indicate ranges.

[20:08] * cjfields cheers!

[20:09] *** eternaleye_ joined
[20:11] <cjfields> Also, are we planning on supporting the tr/// p5 options: (c)omplement, (d)elete, (s)quash)?  Couldn't find anything to verify one way or the other...

[20:11] <Auzon> and here was me thinking that tr///c meant 'count' :P

[20:14] *** eternaleye left
[20:22] *** Alias_ joined
[20:24] * cjfields looking at A05...

[20:29] *** simcop2387 joined
[20:35] <cjfields> Nope, nothing there.  Though I can see issues with implementing 'complement' if we want many-to-one...

[20:37] <moritz_> I think the general sentiment is "don't worry too much about transliteration, we have powerful regexes" ;)

[20:38] <Auzon> Somewhat related: Can we have glob() use regexes? (The format for $pattern is not specified in S16)

[20:39] <moritz_> Auzon: I think glob() will call the underlying system (?) call

[20:39] <PerlJam> That would *so* confuse people!

[20:39] <PerlJam> glob does globbing, not regex

[20:39] <moritz_> Auzon: you can still use grep rx$regex/, readdir; or some such

[20:40] <PerlJam> that said, having some sort of file selector thing (not called glob) with a switchable pattern matcher would be nice.

[20:40] <moritz_> and it's nice if you can do stuff like @*ARGV = glob @*ARGV if $on_windows;

[20:41] <moritz_> PerlJam: what's wrong with regexes + grep? ;)

[20:41] <PerlJam> Hmm..  I wonder if we could get m:glob/.../ just like we have m:p5/.../  :-)

[20:41] <moritz_> you can write regex modifiers as macros

[20:41] <moritz_> shouldn't be too hard to write one that translates globs to regexes

[20:42] <Auzon> moritz_: readdir can't mimic glob('*/*') :-/

[20:43] <moritz_> Auzon: right.

[20:43] <PerlJam> well, PGE already had parsers for p5, p6, and glob  (I wrote some of the glob one actually)

[20:48] <PerlJam> s/had/has/

[20:48] <pmichaud> more likely is

[20:48] <pmichaud> use STDPatterns;

[20:48] <pmichaud> @a = grep &STDPatterns::glob, @list;

[20:48] <lambdabot> Maybe you meant: activity activity-full admin all-dicts arr ask . ? @ v

[20:48] <pmichaud> or <glob>, or something like that.

[20:48] <pmichaud> or even    glob('pattern')  to return a regex that does globbing the way you want :-)

[20:48] <Auzon> I guess it'd be really easy to implement a regexglob()

[20:48] <pmichaud> q:glob/ ... /;

[20:48] <pmichaud> anyway, it can be easily done as a library :-)

[20:48] <moritz_> pmichaud: or just m/:glob/.../

[20:48] <pmichaud> after that it's just a matter of syntax.

[20:52] *** REPLeffect left
[20:56] *** rdice joined
[21:00] *** rdice left
[21:01] *** eternaleye_ left
[21:08] <pugs_svnbot> r20979 | Auzon++ | [gsoc_spectest] Some tests for eager and hyper (8 new tests added)

[21:08] <pugs_svnbot> r20979 | Auzon++ | Added more TASKS for S03 and one for S16

[21:11] *** ruoso joined
[21:17] *** Alias_ left
[21:18] *** Alias_ joined
[21:22] *** bacek_ joined
[21:31] <moritz_> does prefix:<=> consume an Range?

[21:31] *** gbacon joined
[21:32] <Auzon> moritz_: It iterates a range

[21:33] <moritz_> Auzon: yes, but iteration != consumation

[21:33] <moritz_> Auzon: in p5, each %hash also iteratets over the hash without destroying it

[21:33] <moritz_> Auzon: so unless it's in spec I doubt that your test cases are right

[21:34] <moritz_> I'd suggest a different scheme 

[21:34] <moritz_> my $counter = 0;  my @test = gather { for 1 .. 5 { take 1; $couter++ } }

[21:34] <moritz_> is @test[0], 1;

[21:35] <moritz_> is $counter, 1, 'only one iteration' # that's the test for lazyness

[21:35] <moritz_> then my @second_test = eager gather {... same code here }

[21:35] <moritz_> is $counter, 5, 'eager is eager'; 

[21:35] <moritz_> I fear that the Range object hides its lazyness too well te be tested for

[21:37] <Auzon> Alright, yeah, that looks a lot better. So is gather the way to build a generic iterator object?

[21:38] <moritz_> it's one of the easiest

[21:38] *** Alias_ left
[21:38] <moritz_> (it's actually used for iterators, continuations, coroutines - whatever you want to call it)

[21:39] <moritz_> bascially for anything that should be lazily executed and returns more than one value

[21:39] *** bacek joined
[21:40] <Auzon> ok, thanks moritz_ :)

[21:44] *** cmarcelo joined
[21:45] *** Jedai left
[21:45] <moritz_> IIRC kp6 has a similar lazyness test already

[21:46] <moritz_> btw gather...take can be used for implementing lazy builtins quite nicely

[21:46] <moritz_> sub infix:<xx>(@ary, Num $count) { return gather { take @ary for ^$count } }

