[00:14] <bacek> perl6: say (1..Inf)[5]

[00:14] <p6eval> kp6 r20713: OUTPUT[syntax error at position 4, line 1 column 4:␤say (1..Inf)[5␤    ^ HERE␤]

[00:14] <p6eval> ..pugs: OUTPUT[6␤]

[00:14] <p6eval> ..rakudo r28172: OUTPUT[get_pmc_keyed() not implemented in class 'Range'␤current instr.: '_block11' pc 55 (EVAL_14:25)␤

[00:14] <p6eval> ..elf r20713: OUTPUT[Use of uninitialized value in range (or flip) at (eval 14) line 3.␤Can't use string ("") as an ARRAY ref while "strict refs" in use at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[00:56] *** justatheory_ is now known as justatheory

[01:03] *** alanhaggai joined
[01:18] *** simcop2387 joined
[01:18] *** bacek left
[01:21] <Auzon> rakudo: my @arr = <foo bar baz>; @arr .= chomp; @arr.perl.say;

[01:21] <p6eval> rakudo r28172 OUTPUT[Method 'chomp' not found for invocant of class 'Perl6Array'␤current instr.: '_block11' pc 77 (EVAL_10:29)␤

[01:21] <Auzon> rakudo: my @arr = <foo bar baz>; @arr.chomp; @arr.perl.say;

[01:21] <p6eval> rakudo r28172 OUTPUT[Method 'chomp' not found for invocant of class 'Perl6Array'␤current instr.: '_block11' pc 76 (EVAL_9:29)␤

[01:23] <Auzon> rakudo: $_ = "HI"; .lc; .say;

[01:23] <p6eval> rakudo r28172 OUTPUT[No result object␤current instr.: 'parrot;PCT::Grammar;item' pc 48 (src/PCT/Grammar.pir:64)␤

[01:23] <Auzon> rakudo: $_ = "HI"; $_.lc; $_.say;

[01:23] <p6eval> rakudo r28172 OUTPUT[too few arguments passed (0) - 1 params expected␤current instr.: '_block11' pc 0 (EVAL_8:3)␤

[01:23] <Auzon> rakudo: $_ = "HI"; say lc($_)

[01:23] <p6eval> rakudo r28172 OUTPUT[too few arguments passed (0) - 1 params expected␤current instr.: '_block11' pc 0 (EVAL_12:3)␤

[01:23] <Auzon> rakudo: say lc("HI")

[01:23] <p6eval> rakudo r28172 OUTPUT[hi␤]

[01:26] *** Ched- left
[01:27] *** Ched- joined
[01:29] *** rhr left
[01:30] *** bacek joined
[01:37] *** simcop2387 left
[01:41] *** Limbic_Region left
[01:45] *** pen1 left
[01:45] *** Eevee left
[01:46] <diakopter> converting yap6 to continuation passing style so parsers can mutate themselves at parse time even more freely/easily.

[01:47] <diakopter> (and yes, that's from HOP too)

[01:52] <nothingmuch> @tell ruoso http://www.ccs.neu.edu/scheme/pubs/stackhack4.html

[01:52] <lambdabot> Consider it noted.

[01:54] <nothingmuch> @tell ruoso that link should illustrate how to build a CPS with SLIMEy frame abstractions over C/llvm using setjmp or llvm's exceptions

[01:54] <lambdabot> Consider it noted.

[02:03] <pugs_svnbot> r20714 | Auzon++ | [gsoc_spectest] Adding new tests for samebase in S29. (7 tests added)

[02:03] <Auzon> S29 is so huge. I've looked over it around 8 times, and I usually see one or two things to add each time

[02:14] <Auzon> perl6: say +<a b c d>

[02:15] <p6eval> kp6 r20714: OUTPUT[␤]

[02:15] <p6eval> ..pugs: OUTPUT[4␤]

[02:15] <p6eval> ..rakudo r28172: OUTPUT[4␤]

[02:15] <p6eval> ..elf r20714: OUTPUT[4␤]

[02:16] *** justatheory left
[02:24] <pugs_svnbot> r20715 | Auzon++ | [gsoc_spectest] added mention of pos and length to deprecated-syntax.pod. Also added a test to check that Str.pos is gone. (added 1 test)

[02:26] *** jferrero left
[02:43] *** kanru joined
[03:09] *** stevan_ left
[03:16] *** alanhaggai left
[03:17] *** eternaleye joined
[03:28] *** simcop2387 joined
[03:32] *** drbean left
[03:33] *** drbean joined
[03:34] *** sri_work joined
[03:34] *** rhr joined
[03:37] *** FurnaceBoy left
[03:38] *** sri_work_ joined
[03:49] *** justatheory joined
[03:55] *** sri_work left
[03:58] *** stevan_ joined
[04:04] *** stevan_ left
[04:05] *** stevan_ joined
[04:08] *** alester joined
[04:09] *** justatheory left
[04:18] <pmichaud> Auzon, moritz: ping

[04:37] <pmichaud> never mind ping -- sent question to p6c instead  ('split' in S29)

[04:37] <pmichaud> afk, sleep

[04:41] *** sri_work_ is now known as sri_work

[04:42] *** kanru left
[04:46] *** bacek left
[05:12] *** kaether left
[05:13] *** kaether_ joined
[05:14] *** kaether_ is now known as kaether

[05:22] *** simcop2387 left
[05:28] <pugs_svnbot> r20716 | lwall++ | [STD5] quote start/stop now uses parametric roles

[05:28] <pugs_svnbot> r20716 | lwall++ | rule ast is now stored per-package including evaled role packages

[05:28] <pugs_svnbot> r20716 | lwall++ | lexer cache now uses separate subdirectories for every sublanguage

[05:29] *** simcop2387 joined
[05:29] <pugs_svnbot> r20717 | lwall++ | [cheat] subsumed into gimme5

[05:31] *** simcop2387 left
[05:43] *** simcop2387 joined
[05:55] *** pen1 joined
[05:56] *** alester left
[06:08] *** ikeda joined
[06:09] *** Jedai joined
[06:18] *** ikeda_ joined
[06:19] *** ikeda left
[06:21] *** Psyche^ joined
[06:30] *** Jedai left
[06:36] *** Patterner left
[06:36] *** Psyche^ is now known as Patterner

[06:52] *** alanhaggai joined
[07:04] *** rindolf joined
[07:11] *** rindolf left
[07:15] <pugs_svnbot> r20718 | moritz++ | [spec] removed "unspecced" marking of grep tests that mutate $_

[07:15] <pugs_svnbot> r20718 | moritz++ | The same has been discussed for map.t already

[07:17] *** meppl joined
[07:41] *** kaether_ joined
[07:41] *** iblechbot joined
[07:45] *** kaether left
[07:45] *** kaether_ is now known as kaether

[08:00] *** meppl left
[08:09] *** barney joined
[08:44] *** ikeda_ left
[09:15] *** barney left
[09:33] *** alanhaggai left
[09:33] *** alanhaggai joined
[09:50] *** ruoso joined
[09:55] *** kst left
[09:58] *** kst joined
[10:02] *** alanhaggai left
[10:07] *** sri_work left
[10:08] *** sri_work joined
[10:21] *** edpratomo joined
[10:28] *** ddwagnz joined
[10:29] *** ddwagnz left
[10:39] *** mjk joined
[10:40] *** bacek joined
[10:45] *** sri_work_ joined
[10:45] *** sri_work left
[10:50] *** mjk left
[10:52] *** mjk joined
[10:52] *** mjk left
[10:52] *** mjk joined
[10:58] *** alanhaggai joined
[11:03] *** broquain1 joined
[11:14] *** broquaint left
[11:16] *** edpratomo left
[11:19] *** kaether left
[11:21] <bacek> perl6: say elems(1,2,3,4)

[11:21] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bdfc)', 'APPLY', 'HASH(0x8e4df08)', 'HASH(0x8e52500)', 'HASH(0x8e52554)', 'HASH(0x8e525a8)') called at

[11:21] <p6eval> ..compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  main::D...

[11:21] <p6eval> ..pugs: OUTPUT[*** No compatible multi variant found: "&elems"␤    at /tmp/xkrJ733Arw line 1, column 5 - line 2, column 1␤]

[11:21] <p6eval> ..rakudo r28182: OUTPUT[4␤]

[11:21] <p6eval> ..elf r20718: OUTPUT[Undefined subroutine &GLOBAL::elems called at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[11:21] <bacek> perl6: say elems (1,2,3,4)

[11:21] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824be0c)', 'APPLY', 'HASH(0x8e52670)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[11:21] <p6eval> ..main::DISPATCH('HASH(0x824be0c)', 'APPLY', 'HASH(0x8e52670)') ca...

[11:21] <p6eval> ..pugs: OUTPUT[4␤]

[11:21] <p6eval> ..rakudo r28182: OUTPUT[4␤]

[11:22] <p6eval> ..elf r20718: OUTPUT[Undefined subroutine &GLOBAL::elems called at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[11:22] <bacek> hmm...

[11:34] *** Jedai joined
[11:35] *** sri_work_ left
[11:35] *** sri_work joined
[11:46] <bacek> perl6: say  <5 -3 7 0 1 -9>[0].WHAT

[11:46] <p6eval> kp6 r20718: OUTPUT[5␤]

[11:46] <p6eval> ..pugs: OUTPUT[Str␤]

[11:46] <p6eval> ..rakudo r28182: OUTPUT[Str␤]

[11:46] <p6eval> ..elf r20718: OUTPUT[Str␤]

[11:47] <bacek> perl6: my @a= <5 -3 7 0 1 -9>; say @a[1] cmp @a[5];

[11:47] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824c0e4)', 'APPLY', 'HASH(0x8e57cd4)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[11:47] <p6eval> ..main::DISPATCH('HASH(0x824c0e4)', 'APPLY', 'HASH(0x8e57cd4)') ca...

[11:47] <p6eval> ..pugs: OUTPUT[-1␤]

[11:47] <p6eval> ..rakudo r28182: OUTPUT[-1␤]

[11:47] <p6eval> ..elf r20718: OUTPUT[-1␤]

[11:48] <bacek> perl6: say -3 cmp -9

[11:48] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824c06c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[11:49] <p6eval> ..main::DISPATCH('HASH(0x824c06c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[11:49] <p6eval> ..pugs: OUTPUT[1␤]

[11:49] <p6eval> ..rakudo r28182: OUTPUT[1␤]

[11:49] <p6eval> ..elf r20718: OUTPUT[-1␤]

[11:49] <bacek> perl6: my @a= <5 -3 7 0 1 -9>; say @a[1], ' , @a[5];say @a[1] cmp @a[5];

[11:49] <bacek> perl6: my @a= <5 -3 7 0 1 -9>; say @a[1], ' ', @a[5];say @a[1] cmp @a[5];

[11:50] <p6eval> kp6 r20718: No output (you need to produce output to STDOUT)

[11:50] <p6eval> ..pugs: OUTPUT[*** ␤    Unexpected end of input␤    expecting "\\", variable name or "'"␤    at /tmp/K2fkwUCmIZ line 2, column 1␤]

[11:50] <p6eval> ..rakudo r28182: OUTPUT[Statement not terminated properly at line 1, near "' , @a[5];"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[11:50] <p6eval> ..elf r20718: OUTPUT[Parse error in: /tmp/mhlCTcMi13␤panic at line 1 column 36 (pos 36): Error in quotesnabber␤WHERE:  <5 -3 7 0 1 -9>; say @a[1], ' , @a[5];say @a[1] cmp @a[5];␤WHERE:                              /\<-- HERE␤  STD_red/prelude.rb:98:in `panic'␤  STD_red/std.rb:1286:in

[11:50] <moritz_> ENOCLOSING '

[11:50] <p6eval> ..`quotesnabber'␤  (eval):1:in `__quote_4317723'␤  STD_red/prelude.rb:404:in `...

[11:50] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824c1b4)', 'APPLY', 'HASH(0x8e5a49c)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[11:50] <p6eval> ..main::DISPATCH('HASH(0x824c1b4)', 'APPLY', 'HASH(0x8e5a49c)') ca...

[11:50] <p6eval> ..pugs: OUTPUT[-3 -9␤-1␤]

[11:50] <p6eval> ..rakudo r28182: OUTPUT[-3 -9␤-1␤]

[11:50] <p6eval> ..elf r20718: OUTPUT[-3␤ ␤-9␤-1␤]

[11:54] <bacek> pugs: my @a= <5 -3 7 0 1 -9>; say @a.min

[11:54] <p6eval> OUTPUT[-9␤]

[12:05] <bacek> perl6: say "-1".abs

[12:05] <p6eval> kp6 r20718: OUTPUT[no method 'abs' in Class 'Str'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤        KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x8e4ec54)', 'abs') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤       

[12:05] <p6eval> ..main::DISPATCH('HASH(0x8e4ec54)', 'abs') called at - line 11␤]

[12:05] <p6eval> ..pugs: OUTPUT[1␤]

[12:05] <p6eval> ..rakudo r28182: OUTPUT[Method 'abs' not found for invocant of class 'Perl6Str'␤current instr.: '_block11' pc 31 (EVAL_12:17)␤

[12:05] <p6eval> ..elf r20718: OUTPUT[Can't call method "abs" without a package or object reference at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[12:05] <bacek> perl6: say abs("-1")

[12:05] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bda4)', 'APPLY', 'HASH(0x8e4db34)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[12:05] <p6eval> ..main::DISPATCH('HASH(0x824bda4)', 'APPLY', 'HASH(0x8e4db34)') ca...

[12:05] <p6eval> ..pugs: OUTPUT[1␤]

[12:05] <p6eval> ..rakudo r28182: OUTPUT[absolute() not implemented in class 'Perl6Str'␤current instr.: '_block11' pc 25 (EVAL_12:17)␤

[12:05] <p6eval> ..elf r20718: OUTPUT[Undefined subroutine &GLOBAL::abs called at (eval 14) line 3.␤ at ./elf_f_faster line 4492␤]

[12:27] <bacek> rakudo: say (1..3).join;

[12:27] <p6eval> rakudo r28182 OUTPUT[Method 'join' not found for invocant of class 'Range'␤current instr.: '_block11' pc 49 (EVAL_13:20)␤

[12:27] <bacek> yak...

[12:29] <bacek> rakudo: say "".reverse

[12:29] <p6eval> rakudo r28182 OUTPUT[Method 'join' not found for invocant of class 'List'␤current instr.: 'parrot;Perl6Str;reverse' pc 725 (src/gen_builtins.pir:477)␤

[12:29] <moritz_> ouch

[12:29] <moritz_> rakudo: say "abc".reverse

[12:29] <p6eval> rakudo r28182 OUTPUT[Method 'join' not found for invocant of class 'List'␤current instr.: 'parrot;Perl6Str;reverse' pc 725 (src/gen_builtins.pir:477)␤

[12:30] <bacek> someone commited List.pir with 'join' commented out.

[12:30] <bacek> rakudo: say reverse("")

[12:30] <p6eval> rakudo r28182 OUTPUT[␤]

[12:31] <bacek> rakudo: say reverse('Pugs')

[12:31] <p6eval> rakudo r28182 OUTPUT[Pugs␤]

[12:31] <bacek> great...

[12:37] *** sri_work left
[12:40] <bacek> rakudo: say item(reverse('foo'))

[12:40] <p6eval> rakudo r28182 OUTPUT[Could not find non-existent sub item␤current instr.: '_block11' pc 39 (EVAL_12:18)␤

[12:40] *** sri_work joined
[12:49] *** sri_work left
[12:51] <diakopter> anyone know how to execute an inline block *that returns something* in Perl 5?

[12:52] <moritz_> do { ... }

[12:52] <moritz_> my $x = do { ... };

[12:53] <diakopter> oh :)  that was too easy.

[12:53] <moritz_> ;)

[12:54] *** sri_work joined
[12:57] *** pmurias joined
[12:58] *** sri_work left
[12:59] *** sri_work joined
[12:59] *** sri_work left
[13:00] <diakopter> moritz_: ok, extend that question with: and then immediately executes an anonymous subroutine that's returned by the block *without assigning the anonymous subroutine to a coderef*

[13:00] <diakopter> (b/c I don't want to have to use eval to invent a unique coderef name

[13:00] <moritz_> (do { ...} )->()

[13:00] <diakopter> )

[13:00] <diakopter> hrmf

[13:01] <moritz_> buubot: eval: print ( do { sub { 3}  })->()

[13:01] <buubot> moritz_:  CODE(0x86fe948)undef

[13:01] <moritz_> buubot: eval: print +( do { sub { 3}  })->()

[13:01] <buubot> moritz_:  31

[13:01] <moritz_> buubot: eval:  +( do { sub { 3}  })->()

[13:01] <buubot> moritz_:  3

[13:01] <pmurias> diakopter: why don't you use . for concatenate?

[13:01] <pmurias> diakopter: re overloading

[13:01] <diakopter> pmurias: it is, now

[13:02] <diakopter> for concatenate with no intervening whitespace allowed

[13:02] <diakopter> | allows optional whitespace; - enforces the presence of whitespace

[13:02] <diakopter> and I'm adding two more now

[13:03] <diakopter> postfix autoincrement will signify mandatory trailing whitespace

[13:03] <diakopter> and postfix autodecrement will signify optional trailing whitespace

[13:04] *** meteorjay left
[13:04] *** meteorjay joined
[13:05] *** sri_work joined
[13:05] *** sri_work left
[13:07] <diakopter> to make constructs like this prettier:  token1 + o(o(p6ws) + token2)  becomes  token1 + o(~token2)   and  o(token2 + p6ws) + token1  becomes  o(token2++) + token1    etc

[13:08] <diakopter> hopefully the rule p6ws won't ever have to be directly referenced

[13:08] <diakopter> also I'll overload ! to be the negative lookahead

[13:09] <diakopter> you don't need positive lookahead (obviously) in RD parsers

[13:09] <diakopter> since that's all it ever does....

[13:10] <diakopter> pmurias: ok?

[13:12] <diakopter> I'm trying to optimize this syntax not just for readability of the STD_hand grammar, but also the future readability of the grammars generated (from both STD.pm and from inline operation mutation/creation and grammar declaration/application)

[13:12] <pmurias> diakopter: seems ok

[13:13] <pmurias> shouldn't | mean perl6 longest token alteration?

[13:13] <diakopter> now I just finished converting all the parser generators over to CPS, so that they can modify both the input stream and the continuation parser/handler itself

[13:14] <diakopter> pmurias: it does!  now :) which I haven't checked in

[13:14] <diakopter> I added longest-token-matching (by default) to alternate()

[13:14] <diakopter> that will obviously slow it down LOTS

[13:15] <diakopter> I added that a few hours ago

[13:15] <diakopter> I guess & could mean first match

[13:16] <diakopter> since it's at the same Perl 5 operator precedence level

[13:16] <moritz_> & has a meaning of its own in p6 regexes

[13:16] <diakopter> right, but this isn't even the translation stage, yet

[13:16] <diakopter> I'm not trying to replicate the Perl 6 syntax in Perl 5

[13:17] <diakopter> just make it easier to express RD grammars in Perl 5

[13:18] <diakopter> in the translation stage, we'll use STD_hand to read STD.pm, and then generate a Perl6in5::Grammar from it, called STD_auto.pm

[13:18] <diakopter> similar to what TimToady is doing in gimme5

[13:19] *** p6eval left
[13:19] *** p6eval joined
[13:21] <diakopter> I'm attending YAPC::NA again this year, and I want to have STD_hand done (so that it can at least generate an AST from STD.pm) by then... so maybe people there will take an interest and pitch in to implement the marriage with elf/smop/whatever

[13:22] <diakopter> can pugs implement grammar-switching/mutation in BEGIN {}?

[13:23] <diakopter> I know it does inline operators

[13:23] <pmurias> don't think so

[13:23] <pmurias> pugs grammar is coded in haskell

[13:24] <diakopter> can any of the other implementations do that yet?

[13:24] <moritz_> no

[13:24] <diakopter> then one of my goals is for yap6 to be the first to prove that concept

[13:24] <moritz_> kp6 does BEGIN blocks, but they don't modify the grammar

[13:25] <moritz_> btw what's the syntax for grammar switching?

[13:25] <moritz_> I think pugs has limited support for macros, though

[13:30] <diakopter> I don't think there will be a Perl6in5::Grammar syntax for grammar switching; it'll built into some special parser constructor/handler.  if a "use GrammarX" (I think that's the Perl 6 syntax???) statement is encountered, special parse-time handling will occur to interpret/evaluate (using the grammar-translation continuation handlers) that particular branch of the AST (and probably everything up to it, which is why it's good for ...

[13:30] <diakopter> ... such things to be in a BEGIN block) to generate the new/modified grammar, and use that instead of the continuation parser that was passed to the "use GrammarX" parser.  Macros would work the same way.  Same with quoting (including balanced stop character detection).

[13:31] <diakopter> where "that particular branch of the AST" is the previously declared  grammar GrammarX {} or whatever

[13:31] <bacek> perl6: say 'a' <=> 'b'

[13:31] <p6eval> kp6 r20718: OUTPUT[0␤]

[13:31] <p6eval> ..pugs: OUTPUT[0␤]

[13:31] <p6eval> ..rakudo r28182: OUTPUT[0␤]

[13:31] <p6eval> ..elf r20718: OUTPUT[Argument "b" isn't numeric in numeric comparison (<=>) at (eval 14) line 3.␤Argument "a" isn't numeric in numeric comparison (<=>) at (eval 14) line 3.␤0␤]

[13:31] <bacek> perl6: say 'a' <=> 'a'

[13:31] <p6eval> kp6 r20718: OUTPUT[0␤]

[13:31] <p6eval> ..pugs: OUTPUT[0␤]

[13:31] <p6eval> ..rakudo r28182: OUTPUT[0␤]

[13:31] <p6eval> ..elf r20718: OUTPUT[Argument "a" isn't numeric in numeric comparison (<=>) at (eval 14) line 3.␤Argument "a" isn't numeric in numeric comparison (<=>) at (eval 14) line 3.␤0␤]

[13:32] <bacek> perl6: say 'a' cmp 'b'

[13:32] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bf44)', 'APPLY', 'HASH(0x8e56c0c)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[13:32] <p6eval> ..main::DISPATCH('HASH(0x824bf44)', 'APPLY', 'HASH(0x8e56c0c)') ca...

[13:32] <p6eval> ..pugs: OUTPUT[-1␤]

[13:32] <p6eval> ..rakudo r28182: OUTPUT[-1␤]

[13:32] <p6eval> ..elf r20718: OUTPUT[-1␤]

[13:32] <bacek> perl6: say 'b' cmp 'b'

[13:32] <p6eval> kp6 r20718: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824bf44)', 'APPLY', 'HASH(0x8e56c0c)') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤  

[13:32] <p6eval> ..main::DISPATCH('HASH(0x824bf44)', 'APPLY', 'HASH(0x8e56c0c)') ca...

[13:32] <p6eval> ..pugs: OUTPUT[0␤]

[13:32] <p6eval> ..rakudo r28182: OUTPUT[0␤]

[13:32] <p6eval> ..elf r20718: OUTPUT[0␤]

[13:32] <diakopter> bacek: would you message p6eval directly while a conversation is occuring please?

[13:33] <diakopter> esp if you're using perl6:

[13:33] <moritz_> diakopter: I was refering to the Perl 6 syntax for grammar switching - and I think you're right that it's somehow done through 'use'

[13:35] <diakopter> and since 'use' statements need (still) to be applied at parse-time anyway (as in Perl 5) in their own compilation unit (just like BEGIN), that same "use" handler would be "use"d.

[13:37] <diakopter> and as TimToady said previously, "use" statements fall into the category of things that halt the longest-token-matcher and commit to a branch immediately

[13:37] <diakopter> at least, if my understanding of what he said is correct.

[13:38] <moritz_> evalbot control restart

[13:38] *** p6eval left
[13:38] <pugs_svnbot> r20719 | moritz++ | [evalobt] truncate noisy kp6 error messages

[13:38] <moritz_> diakopter: makes sense to me

[13:38] *** p6eval joined
[13:39] * diakopter listens to the rain

[13:41] <diakopter> so, it seems that anything that requires the cessation of the current compilation unit requires an execute-up-till-this-point jump, including eval{}

[13:41] <pmurias> moritz_: what debian branch should i use on a new laptop?

[13:41] <moritz_> uhm, there is no eval {} anymore, just eval '...'

[13:42] <diakopter> right, whichever :D

[13:42] <moritz_> pmurias: lenny is pretty good atm, I use it on my desktop for some time now

[13:42] <pmurias> diakopter: it's try {}

[13:42] <diakopter> pmurias, I know, I still mean eval ""

[13:42] <moritz_> pmurias: Etch is likely to be outdated, but you can use Etch + EtchAndHalf for newer drivers

[13:43] * moritz_ doesn't recommend sid though. Sid is evil ;)

[13:43] <pmurias> lenny is testing?

[13:43] * yath forgot to report a bug early enough to get it into etchandahalf :-(

[13:44] <yath> so i'll have to recompile kernels every time now

[13:44] <yath> *sigh*

[13:44] <diakopter> I really need to deprecate/fix this stupid gt0() function I created... it's rather broken

[13:45] <moritz_> yath: not so bad. If you run stable, you don't need to recompile your kernel very often

[13:45] <moritz_> yath: and most of the time it's simply a matter of running make-kpkg

[13:45] <yath> moritz_: in the last four weeks there were about five or six DSAs just dealing with kernel stuff :(

[13:46] <moritz_> yath: I know, but most didn't affect desktop machines

[13:46] <yath> moritz_: it's not that compiling a kernel on POWER6 takes long, but it's just an extra step instead of apt-get update && apt-get upgrade

[13:46] <moritz_> yath: ok, I agree with that. So use Lenny instead ;-)

[13:47] <diakopter> I kindof want to kill pugs_svnbot and replace with dalek, since dalek has decent flood prevention, so my longer commit messages work :)

[13:47] <yath> moritz_: not until it's stable :P problem is, in our corporate network i have no direct internet access, so i have to have to get the new packages from security.d.o all the time, run dpkg-scanpackages and so forth

[13:47] <moritz_> yath: ok, $work is a good reason :/

[13:48] <yath> fortunately i have limited access to a DMZ. so i wrote a perl-ten-liner that merges the output of ls /mirror with Packages.gz and builds a zip with the new packages ;)

[13:48] <moritz_> hey, we need #os_perl where perl people can discuss and rant about various OS ;)

[13:48] <yath> .o(emacs--)

[13:49] <moritz_> ;-)

[13:49] <diakopter> pmurias: OOPS I got my operators wrong when telling them to you earlier.... SLAP forehead.  "." enforces no whitespace, "+" enforces whitespace, "-" allows optional whitespace

[13:50] <diakopter> that way, ++ and -- are consistent as the trailing ones

[13:52] *** jan_ left
[13:52] <diakopter> I guess ~ will be the optional leading whitespace, and ^ for mandatory leading whitespace (even though that meaning is nearly opposite its other meanings; oh well)

[13:53] <diakopter> oh wait, no, can't be ^

[13:53] * diakopter looks for a unary prefix that's so far unused

[13:54] <diakopter> I wonder if there's any way to overload unary + and - ....?

[13:54] <moritz_> @tell Auzon re t/spec/S29-str/pos.t dies_ok needs a code ref, so either use eval_dies_ok or dies_ok({$str.pos}) instead. I'm going to fix and enhance it...

[13:54] <lambdabot> Consider it noted.

[13:54] * diakopter reads perlovl

[13:56] <bacek> perl6:  say  <a b A c b d>.sort: { lc $^a eq lc $^b }

[13:56] <pugs_svnbot> r20720 | moritz++ | [spec] fixed pos.t test that used a dies_ok() inappropriately

[13:56] <p6eval> kp6 r20719: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤    

[13:56] <p6eval> ..pugs: OUTPUT[abAcbd␤]

[13:56] <p6eval> ..rakudo r28182: OUTPUT[bdacAb␤]

[13:56] <p6eval> ..elf r20719: OUTPUT[Aabbcd␤]

[13:56] <moritz_> uhm, sorting with 'eq' doesn't make much sense ;)

[13:56] <bacek> moritz_, it's from S29-list/uniq.t...

[13:57] <bacek> perl6:  say  <a b A c b d>.sort: { lc $^a cmp lc $^b }

[13:57] <p6eval> kp6 r20720: OUTPUT[error in Block at compiled/perl5-kp6-mp6/lib/KindaPerl6/Grammar/Sub.pm line 753, <> line 1.␤*** Syntax Error in Block: missing closing curly bracket  ␤]

[13:57] <p6eval> ..pugs: OUTPUT[aAbbcd␤]

[13:57] <p6eval> ..rakudo r28182: OUTPUT[aAbbcd␤]

[13:57] <p6eval> ..elf r20720: OUTPUT[Aabbcd␤]

[13:57] <moritz_> bacek: it does make sense for unique()

[13:58] <bacek> moritz_, why?

[13:58] <moritz_> bacek: because uniqueness doesn't need a total ordering ;)

[13:59] <moritz_> you just have to know if two items are identical to return a unique subset

[13:59] <bacek> moritz_, too bad... I try to reimplement quadratic algo with something better...

[14:00] <moritz_> bacek: you can only do that for the default comparator

[14:00] <moritz_> and for sane cases like numbers and strings

[14:01] <yath> oh. just read that package'var is gone.

[14:01] <yath> so no Acme::don't anymore :(

[14:01] <pmurias> yath: suprised? ;)

[14:01] <yath> pmurias: well, not really :) ' was perl4, wasn't it?

[14:03] <pmurias> cannt tell i'm not old enough to rememer '

[14:05] <pugs_svnbot> r20721 | moritz++ | [t] more content for deprecated-syntax.pod:

[14:05] <pugs_svnbot> r20721 | moritz++ |  * (in)correct usage of dies_ok

[14:05] <pugs_svnbot> r20721 | moritz++ |  * "my" in pointy block signatures

[14:05] <diakopter> oh good, I think unary +- are overloadable... just need a dispatch handler to tell if the 2nd argument is undef...

[14:06] <moritz_> ... and hope that there's no legal case with the 2nd arg being undef ;)

[14:06] <diakopter> moritz_: there can't be; all of the parser generators must return a valid parser.. if they don't, they're broken

[14:07] <diakopter> the root level parser generators aren't dynamic...

[14:07] <moritz_> diakopter: good ;)

[14:07] <diakopter> now, the ones that are parameterized... those can fail on invalid input

[14:08] <diakopter> so they'll have to trap such errors

[14:12] *** jhorwitz joined
[14:16] <diakopter> the biggest benefit of these infix concatenate variants is that they always expect two and only two argument parsers.  This makes a lot of the recursion in the parser generators unnecessary; the recursion is handled by Perl 5's operator precedence levels.

[14:25] <diakopter> hunh.  I wonder if this means that perl5: "string" + undef does the same thing as +"string"

[14:26] <moritz_> uhm, yes. Both return 0 + optionally a warning

[14:27] <diakopter> buubot: eval: ("42" + undef)

[14:27] <buubot> diakopter:  42

[14:27] <diakopter> buubot: eval: (+"42")

[14:27] <buubot> diakopter:  42

[14:27] <diakopter> buubot: eval: ("42")

[14:27] <buubot> diakopter:  42

[14:27] *** kst left
[14:28] <diakopter> ok, I guess it intifies it regardless

[14:30] <bacek> moritz_, in which spec uniq defined? I can't find it in http://svn.pugscode.org/pugs/docs/Perl6/Spec/Functions.pod

[14:32] * diakopter tries to imagine how to detect infinite recursion in CPS

[14:33] <moritz_> bacek: doesn't seem to be specced at all ;)

[14:34] *** araujo left
[14:37] <bacek> moritz_, ouch...

[14:37] *** chris2 joined
[14:38] <pmurias> diakopter: how do you do in a "normal" setting?

[14:40] <diakopter> pmurias: how do I do?

[14:40] *** jan_ joined
[14:41] <pmurias> diakopter: how do you detect infinite recursion in a "normal setting"?

[14:41] <pmurias> ;)

[14:43] *** mjk left
[14:43] <diakopter> pmurias: oh; previously, depth for each parser_coderef+input_arrayref was stored in a global hash, and if a given parser detected it had descended within itself too many items on the exact same input, it returned false

[14:43] <diakopter> too many times

[14:43] <diakopter> where too many was 50 or 500

[14:43] <diakopter> or whatever

[14:45] <diakopter> hm, I guess to do it in CPS would be the same thing; the received continuation would just be ignored for this purpose.

[14:45] <bacek> rakudo: say 'a' <=> 'b'

[14:45] <p6eval> rakudo r28182 OUTPUT[0␤]

[14:47] <moritz_> that is currect

[14:50] <diakopter> pmurias: does that sound okay?

[14:50] <diakopter> obviously it places a limit on detectable nested expressions

[14:50] <diakopter> I should say, detectable right-associated expressions

[14:51] <diakopter> detectable right-associated nested expressions

[15:04] <bacek> rakudo: my $a = []; say $a.join;

[15:04] <p6eval> rakudo r28182 OUTPUT[Method 'join' not found for invocant of class 'Arrayref'␤current instr.: '_block11' pc 56 (EVAL_10:23)␤

[15:04] <pmurias> diakopter: sounds vagely ok

[15:11] <bacek> pugs: say ~@array.uniq: { lc $^a eq lc $^b },  "a b c d", "method form of uniq with own comparator works";

[15:11] <p6eval> OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "@array" requires predeclaration or explicit package name␤    at /tmp/p0qq2X0lcV line 1, column 12␤]

[15:11] <bacek> pugs: say ~@array.uniq:{ lc $^a eq lc $^b },  "a b c d", "method form of uniq with own comparator works";

[15:11] <p6eval> OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "@array" requires predeclaration or explicit package name␤    at /tmp/9TTM5Ldixp line 1, column 12␤]

[15:12] <bacek> pugs: say (~@array.uniq: { lc $^a eq lc $^b }),  "a b c d", "method form of uniq with own comparator works";

[15:12] <p6eval> OUTPUT[*** ␤    Unexpected "."␤    expecting "::"␤    Variable "@array" requires predeclaration or explicit package name␤    at /tmp/k22X1qGyQi line 1, column 13␤]

[15:12] <bacek> pugs: my @array=<a b A c b d>; say ~@array.uniq: { lc $^a eq lc $^b },  "a b c d", "method form of uniq with own comparator works";

[15:12] <p6eval> OUTPUT[a b A c d <SubBlock(<anon>)> a b c d method form of uniq with own comparator works␤]

[15:25] *** kcwu joined
[15:27] *** mncharity joined
[15:30] <pmurias> mncharity: hi

[15:30] *** Jedai left
[15:43] *** dominiko joined
[15:48] <pmurias> mncharity: does STD_red lack much to parse STD.pm?

[15:57] *** polettix joined
[16:14] *** sri_work joined
[16:52] *** justatheory joined
[16:58] <pmurias> TimToady: there is a bug in gimme5, regex foo { (aa|a) a } dosn't match 'aa' as || is always ratchety even with $MAYBACKTRACK

[17:04] *** sri_work left
[17:04] *** ruoso left
[17:06] *** Lorn left
[17:18] *** if joined
[17:29] <rakudo_svn> r28183 | pmichaud++ | [rakudo]:

[17:29] <rakudo_svn> r28183 | pmichaud++ | * Update 'join' semantics.

[17:31] *** if is now known as FurnaceBoy

[17:31] <pugs_svnbot> r20722 | pmichaud++ | S29: List.join should have @values as the invocant.

[17:33] *** justatheory left
[17:50] <pugs_svnbot> r20723 | diakopter++ | [yap6] checking in changes; I have literally no idea

[17:50] <pugs_svnbot> r20723 | diakopter++ | how much of this is going to work.

[17:50] <diakopter> (don't yap6: for a while; I'm sure there are syntax errors all over)

[17:56] <moritz_> diakopter: I'm prepare a perlmonks meditation as an update to this node: http://www.perlmonks.org/?node_id=628746 - should I mention yap6 there?

[17:56] <lambdabot> Title: Getting Involved with Perl 6

[17:56] <moritz_> or would you rather prefer to work quietly until you have something to show?

[17:56] <moritz_> s/something/something more/

[17:58] <pmichaud> the last four lines of S29-list/join.t look odd to me.  At any rate I think the last two tests are incorrect.

[17:59] * moritz_ is totally confused about what is allowed and what isn't

[17:59] <pmichaud> I don't think there's a .join method on Str invocants.

[18:01] <diakopter> moritz_: you might as well mention it as an experiment in recursive descent grammars towards mutable grammars for Perl 6

[18:02] <moritz_> pmichaud:  our Str multi method join ( $separator: @values )

[18:02] <moritz_> pmichaud: from S29

[18:02] <pmichaud> moritz_  isn't that in the section on List methods?

[18:03] <moritz_> pmichaud: does it matter?

[18:03] <moritz_> $seperator: is a scalar, and marked as invocant

[18:03] <pmichaud> I think that's actually incorrect in S29 -- I think it should be   our Str multi method join ( @values : $separator )

[18:03] <pmichaud> otherwise   @values.join(';')  doesn't work 

[18:04] <pmichaud> (in r20722 I even changed S29 to read that way.)

[18:04] <diakopter> hey moritz_: can anonymous subs be lvalue subs?

[18:05] <moritz_> diakopter: dunno, you have to try it ;)

[18:05] <diakopter> ok

[18:05] <moritz_> it burns down to "can anonymouns subs have :attributes?"

[18:05] <moritz_> s/burns/boils/ ;-)

[18:08] *** Jedai joined
[18:10] <diakopter> I'm hoping that the lvalue-ness checking of postfix in/decrement is all that remains after overloading... I don't want my overloaded ++ &routine's result to be assigned back to the object of the ++.

[18:11] <pmichaud> okay, I retract my earlier statement.  The tests are correct as written.

[18:11] <pmichaud> (method fallback causes it to work.)

[18:12] <pmichaud> thus  "foo".join(@values)   falls back to join("foo", @values)

[18:13] *** dominiko left
[18:16] <pmichaud> but the test descriptions are wrong then,  as  'foo'.join(':')  is equivalent to join('foo', ':')  and not join(':', 'foo')

[18:16] <pmichaud> and, come to think of it, so is the output.  hrm.

[18:17] <pmichaud> I'll add a note to S29-list/join.t and maybe Auzon can clear it up :-)

[18:17] <moritz_> well, if you're sure the test is wrong I can clean it up now

[18:17] <pmichaud> I'm not completely sure of anything except that what is in the test file didn't match S29 (either before my change or after)

[18:18] *** meppl joined
[18:19] <pmichaud> I think I tend to be (overly) cautious when it comes to perceived ambiguities or errors in the spec -- as often as not I'm surprised by the actual answer.

[18:21] *** bacek left
[18:32] <pugs_svnbot> r20724 | pmichaud++ | S29-list/join.t

[18:32] <pugs_svnbot> r20724 | pmichaud++ | * Add a #?rakudo skip to the last two tests, and a note that the

[18:32] <pugs_svnbot> r20724 | pmichaud++ |   tests themselves may be incorrect.

[18:36] <mncharity> ﻿pmurias: hi.  re "﻿does STD_red lack much to parse STD.pm?", my guess is yes, but I don't really know.  I'd be interested in hearing.

[18:38] <Auzon> pong?

[18:38] <lambdabot> Auzon: You have 1 new message. '/msg lambdabot @messages' to read it.

[18:38] <mncharity> you might grab an old copy of STD.pm, and apply misc/STD/STD_extract , to break STD up into pieces, and then check how many of the pieces parse.  or perhaps update STD_extract to handle the current STD.pm.

[18:38] <Auzon> @messages

[18:38] <lambdabot> moritz_ said 4h 43m 50s ago: re t/spec/S29-str/pos.t dies_ok needs a code ref, so either use eval_dies_ok or dies_ok({$str.pos}) instead. I'm going to fix and enhance it...

[18:42] <Auzon> away &

[18:42] <pugs_svnbot> r20725 | Auzon++ | [gsoc_spectest] More TASKS and fixed use of dies_ok (moritz++ for catching the other bad use of it. 1 changed test.)

[18:43] <moritz_> http://www.perlmonks.org/?node_id=632816 # "Perl 6 Updates" meditation draft on my scratchpad. any comments before I post it for real?

[18:43] <lambdabot> Title: moritz's scratchpad

[19:04] *** eternaleye left
[19:04] *** eternaleye joined
[19:05] *** kst joined
[19:06] <mncharity> @tell fax Thanks for your work on elf! :)

[19:06] <lambdabot> Consider it noted.

[19:06] <mncharity> better late than never :/

[19:07] <moritz_> aye ;)

[19:17] <Auzon> moritz_: I suggest mentioning a recent revision that is known to compile cleanly

[19:17] <Auzon> of Pugs, that is

[19:17] <moritz_> Auzon: ok, will do

[19:18] <Auzon> also, the link for ruoso's grant is broken

[19:19] <Auzon> in the elf paragraph: "join #perl6 on and" should be "join #perl6 on irc.freenode.net and"

[19:20] <pasteling> "diakopter" at 209.9.237.164 pasted "fun with overloading operators on coderefs - the proof of concept works!" (26 lines, 515B) at http://sial.org/pbot/31245

[19:21] <moritz_> diakopter: woo that looks scary

[19:21] <diakopter> pmichaud: if you want a laugh; check out http://sial.org/pbot/31245

[19:21] <lambdabot> Title: Paste #31245 from "diakopter" at 209.9.237.164

[19:21] <moritz_> Auzon: thanks, fixed all of those

[19:22] <moritz_> I published it now as http://www.perlmonks.org/?node_id=690945

[19:22] <lambdabot> Title: Getting Involved with Perl 6 - an Update

[19:22] <Auzon> nice work moritz++

[19:22] <Auzon> pugs: say $?PUGS_VERSION

[19:22] <p6eval> OUTPUT[Perl6 User's Golfing System, version 6.2.13, October 17, 2006 (r18093)␤]

[19:22] <moritz_> thanks

[19:23] <moritz_> actually "last revision" is a bit exaggerated

[19:23] <moritz_> but nothing reallly happend to pugs inbetween :/

[19:23] <diakopter> further interesting - if you add an empty signature to bar (), bar still receives the argument .oO

[19:24] <Auzon> Ah, I was wondering about the revision differences

[19:24] <moritz_> Auzon: probably lots of kp6 commits ;)

[19:24] <Auzon> elf: say 1

[19:24] <p6eval> OUTPUT[1␤]

[19:24] <Auzon> perl6: say 1

[19:24] <p6eval> kp6 r20725: OUTPUT[1␤]

[19:24] <p6eval> ..pugs: OUTPUT[1␤]

[19:24] <p6eval> ..rakudo r28183: OUTPUT[1␤]

[19:24] <p6eval> ..elf r20725: OUTPUT[1␤]

[19:25] *** Chillance joined
[19:26] <Auzon> perl6: say "{1+1}"

[19:26] <p6eval> kp6 r20725: OUTPUT[{1+1}␤]

[19:26] <p6eval> ..pugs: OUTPUT[2␤]

[19:26] <p6eval> ..rakudo r28183: OUTPUT[{1+1}␤]

[19:26] <p6eval> ..elf r20725: OUTPUT[{1+1}␤]

[19:26] <moritz_> pugs++

[19:26] <Auzon> That's the biggest "in your face" change that I keep forgetting.

[19:28] <moritz_> same for me

[19:28] <moritz_> and that arrays don't interpolate anymore by default

[19:29] *** eternaleye left
[19:29] <Auzon> I never really used that part of P5.

[19:30] <pmichaud> I wonder if I can get interpolation to work in rakudo.  :-)

[19:30] <pmichaud> er, closure interpolation.  the hooks are there already --just need to fill them in.

[19:31] <moritz_> pmichaud: why not? seems like "a jonathan" to me ;)

[19:31] <pmichaud> heh.

[19:31] <pmichaud> okay, I'll do it then!  Why should jonathan++ have all the fun?  ;-)

[19:31] <Auzon> I imagine elf could understand them without too much work either...

[19:31] <moritz_> (I hope you don't mind me paraphrasing you out of context ;)

[19:31] <pmichaud> not at all :-)

[19:32] <pmichaud> I paraphrase Larry all the time (hope he doesn't mind it :-)

[19:32] <moritz_> Auzon: probably, but I think mncharity and pmurias will wait for TimToady++'s refactor of the quoting stuff

[19:33] <moritz_> in STD.pm, that is

[19:33] <Auzon> Makes sense. Rakudo doesn't use STD.pm, does it?

[19:33] <moritz_> no, but its parser is modeled after STD

[19:35] <pmichaud> I'm aiming for STD.pm.  I'm hoping/expecting that we'll be using STD.pm by the end of summer.

[19:36] <pmichaud> I think I should have protoregexes working by mid-to-late June.  That'll take care of the biggest part of it.

[19:36] <pmichaud> longest token matching sometime in july or august

[19:37] <Auzon> moritz_: Did you look at my test cases for samebase?

[19:38] <moritz_> Auzon: no. Will do now.

[19:39] <Auzon> The spec is a bit rough there, so I made some assumptions based off of samecase

[19:39] <moritz_> uhm, where did you get all these fancy unicode chars from?

[19:40] <moritz_> ;)

[19:40] <moritz_> btw it might be helpful to add a smartlink that points to S05 as well

[19:40] <Auzon> KDE's character map :)

[19:41] <Auzon> I just searched for "with stroke" and got several that matched

[19:41] <moritz_> uhm wait

[19:41] <moritz_> is there a "combining stroke" char?

[19:41] <Auzon> I don't understand unicode that much so the can probably be improved.

[19:42] <moritz_> problem is, combining chars can be placed onto any base char

[19:42] <Auzon>  yes, there is. U+0335 and U+0336

[19:42] <moritz_> which means that F + stroke can just be written as "F\x{0335}2C"

[19:43] <moritz_> s/2C//

[19:43] <Auzon> So I need to find something without a combining character, correct?

[19:43] <moritz_> no

[19:44] <moritz_> it's just a case that doesn't occur in unicode world

[19:44] <Auzon> Oh. OK, then I can change the test

[19:44] * moritz_ tries to get his head straight

[19:45] <moritz_> actually I don't know if it's worth the effort for you to read about unicode stuff

[19:45] <moritz_> maybe I should take over that test, and consult with Juerd where I'm unclear

[19:45] <Juerd> Ｕｎｉｃｏｄｅ ｒｏｃｋｓ ：）

[19:46] <moritz_> Juerd: it does, indeed. But it't hard to write tests for if you don't grok it

[19:46] <moritz_> (which I think we can't expect from Auzon++)

[19:47] <Juerd> It's also hard to write tests for if you do :)

[19:47] <moritz_> indeed

[19:47] <Juerd> Encodings are pretty easy, but Unicode is hard.

[19:47] <Auzon> I just haven't dealt with it so far (except in the sense of making it store and display correctly in my webapps)

[19:48] <Juerd> Auzon: That's what I meant :)

[19:48] <moritz_> heh ;)

[19:48] <moritz_> actually the spec is unclear here

[19:49] <moritz_> at least for "samecase"

[19:49] <moritz_> there are two versions of the :samecase regex modifiers

[19:49] <moritz_> one "dump" which copies on a per-grapheme base

[19:50] <moritz_> and one "smart" which tries to detect a pattern (uc, lc, ucfirst, lcfirst, capitalize) and applies that pattern to the second string

[19:50] <moritz_> S29 is silent about which the function/method samebase() refers to

[19:50] * moritz_ composes mail to list

[19:51] <pmichaud> moritz/auzon:  Does sending questions about spec interpretation seem to work best for you?

[19:52] <pmichaud> (er, sending questions "to the list")

[19:52] <Auzon> samebase and samecase are relatively new to the spec.

[19:52] <moritz_> pmichaud: so far not very well

[19:52] <pmichaud> takes too long to get answers?

[19:52] <moritz_> one isn't clarified at all

[19:52] <moritz_> the one about inconsitencies with private method syntax in roles and classes

[19:52] <Auzon> pmichaud: I've primarily been asking in here, which has been sufficient so far for me.

[19:53] <moritz_> other... dunno. many warnocked, though I don't remeber more specific cases

[19:53] <pugs_svnbot> r20726 | putter++ | [elf] Revert r20618 and r20628 (the refactoring of *$emitter etal into Compiler).  Perserved r20637.  The Compiler ugliness and globals had a purpose - emitter and parser are now again hot-swappable.

[19:53] <pugs_svnbot> r20726 | putter++ | Updated test results.

[19:53] <moritz_> seldom got clear answers either way

[19:53] <pmichaud> that's somewhat my experience as well.  I'm wondering how we can improve it.

[19:54] <diakopter> Bus error

[19:56] <moritz_> get a spec grant for either TimToady or audreyt, if one of them were willing?

[19:56] <pmichaud> heh.  I can't speak authoritatively for TimToady, but I think he might not be available for a grant at the moment.

[19:57] <moritz_> presumably. I'm just collecting ideas...

[19:57] <diakopter> Bus error

[19:57] <pmichaud> I'd be willing to act as arbiter and decision maker, but I fear I'd decide wrongly as often as not.

[19:57] <diakopter> sry; ww

[19:59] <moritz_> did I understand it right that same*base* actually carries *accent* information?

[20:00] <moritz_> whereas same*case* carries *case* information?

[20:01] <pmurias> mncharity: it was still possible to do hot-swapping with the refactoring $*compiler0.emitter = ...;

[20:03] <moritz_> ok, mail sent to p6l - hopefully I won't get warnocked this time

[20:03] <pugs_svnbot> r20727 | putter++ | [elfish/rx_on_re] Project start - create an all-p6 regex engine from the p5 yet_another_regex_engine, by "keep it working" incremental migration.  t/ and Regexp_ModuleA.pm copied from yare; crufty old EmitRegexYare.pm moved from elf_e_src.

[20:04] <mncharity> ﻿pmurias: re still possible, doh, did I just bungle that?  pondering...

[20:04] *** jhorwitz left
[20:06] *** cognominal_ left
[20:06] *** cognominal_ joined
[20:07] <pmurias> re rx_on_re, what i think now would be worth considering would be to use Cursor5

[20:07] <pmurias> it seems to be designed cleanly, and shaking any bugs in that would (presumably) help TimToady

[20:09] <pmichaud> $ ./parrot perl6.pbc -e 'say "{1+1}";'

[20:09] <pmichaud> 2

[20:09] <moritz_> woot

[20:09] <moritz_> pmichaud++

[20:10] <moritz_> of course all interpolation tests are still outside of spec/

[20:12] *** Lorn joined
[20:13] <pmichaud> no problem, I'm just glad it works :-)

[20:13] <moritz_> wait 'til you access a variable in the closure

[20:13] <moritz_> does it blow up? ;-)

[20:13] <mncharity> ﻿re hot-swap, so the hypothesis is one could revert the initialization changes while regaining hot-swapping by saying '*$emitter1 = ' to '*$compiler1.emitter = '...  that works for swapping parser and emitter but not compiler, no?  ./elf_f_faster NewCompiler.pm -e '...' wouldn't work.

[20:14] <pmichaud> > my $a = 'hello';   say " {$a} world "; hello world

[20:14] <pmichaud> > my $a = 'hello';   say " { substr($a, 2, 2) } world "; ll world

[20:14] <lambdabot>  Parse error at "=" (column 7)

[20:14] <pmichaud> er, irc formatted that wrong for me.

[20:14] <pmichaud> but yes, it works.

[20:15] <moritz_> pmichaud++ again ;)

[20:15] <pmurias> mncharity: hot swapping (monkey patching that is) the compiler would take 2 more lines

[20:15] <pmichaud> > my $a = 'hello';   say "foo {$a} world ";

[20:15] <pmichaud> foo hello world

[20:15] <pmichaud> > my $a = 'hello';   say "foo { substr($a, 2, 2) } world ";

[20:15] <pmichaud> foo ll world

[20:15] <lambdabot>  Parse error at "=" (column 7)

[20:15] <moritz_> sombody shot a goal

[20:16] <pmurias> moritz_: yes 

[20:16] <moritz_> (it's europeen soccer championship, and I heard the cheers throughout the whole street)

[20:16] <pmichaud> I always figured to look for the cars burning in the streets.  :-)

[20:17] <pmurias> mncharity: my $emitter = $*compiler.emitter;$parser = $*compiler.parser;$*compiler = Compiler.new(emitter=>$emitter,parser=>$parser)

[20:17] <moritz_> pmurias: hey, this is Würzburg, not Paris ;)

[20:17] <moritz_> uhm, I meant pmichaud 

[20:17] <moritz_> sorry

[20:17] <pmichaud> moritz_: good point.  :-)

[20:17] <pmichaud> ooh, I need to see about booking travel to YAPC::EU

[20:18] <pmichaud> although I should probably wait until Tuesday (better fares mid-week than weekend)

[20:18] <mncharity> the introduction of everyone having non-local knowledge of how a compiler is assembled and customized is very not worth a few lines shortened Compiler.

[20:19] <pugs_svnbot> r20728 | pmichaud++ | S02-literals/autoref.t:

[20:19] <pugs_svnbot> r20728 | pmichaud++ | * {} interpolates in double quotes, so use single quotes to display '{}'.

[20:19] <rakudo_svn> r28184 | pmichaud++ | [rakudo]:

[20:19] <rakudo_svn> r28184 | pmichaud++ | * Add {closure} interpolation to double-quoted strings.

[20:19] <mncharity> but, feel free to create an elfish/elf_the_way_it_should_be/ .  i almost created one to preserve the change before reverting, but decided it would be easy enough for you to do if you wished to.

[20:23] <Auzon> pmichaud++

[20:23] <Auzon> That was fast!

[20:23] *** eternaleye_ joined
[20:23] <pmichaud> well, like I said, the hooks were already there -- just needed to fill them in.

[20:24] <Auzon> rakudo: say "{1+1}"

[20:24] <p6eval> rakudo r28184 OUTPUT[2␤]

[20:25] <pmichaud> rakudo:  my @a = 1..5;  say "countdown: { @a.reverse }";

[20:25] <p6eval> rakudo r28184 OUTPUT[countdown: 5 4 3 2 1␤]

[20:25] <Auzon> Um. I just now noticed that I did the wrong spec this week for my SoC project.

[20:26] <moritz_> Auzon: never mind ;)

[20:26] <moritz_> but please add s small blog post about your progress

[20:26] <pmurias> mncharity: replacing the architecture of elf will need to be done sometime, but i hesitate to start it withought a large continous chunk of free time

[20:27] <moritz_> you can just just copy&past the lines from your #perl6-soc report if you want

[20:27] <moritz_> Auzon: it's just to keep the community informed that you're still doing things ;)

[20:27] <mncharity> ﻿pmurias: re Cursor5, it does look interesting, and modulo checking with TimToady, I encourage folks to work on it.  It could be neat to run it against a test suite, to get some idea of coverage and performance.  Absent that, it's unclear whether it could be an alternative to yare.

[20:27] <Auzon> moritz_: I'm writing up an end of week report now. I had something keeping me busy all of Friday and half of yesterday

[20:27] <moritz_> Auzon: ok, thats fine

[20:28] <mncharity> re Cursor5, actually, p6 versions might be more interesting than the p5 versions - could run it on non-p5 backends.

[20:29] <pmurias> in the long run yes, but the p5 version of Cursor5 works better i guess

[20:30] <pmurias> as TimToady is actively trying to get it to run

[20:30] <mncharity> re works better, indeed, I believe that's where the recent focus has been

[20:30] <mncharity> *nod*

[20:30] <pmurias> got to still understand the fate handling

[20:31] <pmurias> mncharity: to you understand how fates work in Cursor5?

[20:32] <mncharity> no, I have little understanding of fate.

[20:32] *** chris2 left
[20:32] <pmurias> i'm installing debian on my new laptop so i'll soon see how elf performes on it ;)

[20:32] <Auzon> moritz_: I think that S29 also needs more details for pack/unpack. At the least, the P5 documentation should be added.

[20:33] <pmurias> i accidently press space, and all the useless Desktop packages are installing :(

[20:34] <moritz_> pmurias: that's what the good lord invented 'aptitude purge' for. But of course it takes a while first to install them :(

[20:34] <mncharity> ﻿pmurias: ooh, good reminder.  could you recheck... well, I guess you can't do a real recheck now, but... fyi, yare is believed to no longer have the failure mode you observed, which I speculate was caused by having an old Regex::Common.

[20:35] * mncharity wonders if he has ever managed to do a fedora install without rerunning it at least once...

[20:35] <moritz_> Auzon: aye. But don't wait for it :(

[20:36] <pmurias> what should i run?, i'm using my sluggish desktop machine now

[20:36] <Auzon> I added it to TASKS and I can send an email if that'd help

[20:36] <mncharity> ﻿pmurias: re 'replacing the architecture of elf will need to be done sometime', <pause>

[20:36] <moritz_> Auzon: don't wast your time on the email. If it's in the spec as a TODO, it's known and will eventually be worked on.

[20:37] <Auzon> ok

[20:37] <pmichaud> istr that pack/unpack got some discussion on p6l in the not-too-distant past.  

[20:37] <mncharity> re run, cd misc/pX/Common/yet_another_regex_engine/; prove t/re_tests.t .   it will probably require you to update your Regexp::Common from cpan.

[20:37] <pmichaud> might check the archives.

[20:39] <moritz_> pmichaud: I think they discussed how objects can be serialized, or how they can serialize themselves or some freaky stuff

[20:39] <mncharity> re ﻿'replacing the architecture of elf will need to be done sometime', the elf architecture undergoes continuous replacement. :)  Next steps are likely 'move IR analysis out of Emit' and... hmm, that may reduce the importance of moving to multimethods internally... so, not clear what after that.

[20:40] <pmurias> re replacing architecture doing BEGIN correctly requires compiling the whole program piecemeal, and then serialising it to disc

[20:40] <mncharity> why?

[20:41] <pmurias> sub foo {...};BEGIN {foo()};

[20:41] <pmurias> my $var;BEGIN {$var = 123};

[20:41] <pmurias> my $var;BEGIN {$var = 123};say $var;

[20:41] <mncharity> why would that require any change in how the disk is touched?

[20:42] <pmurias> s/to disc//

[20:42] <Auzon> Will Perl 6 emulate sprintf like Perl 5 did?

[20:42] <pmurias> i should double check what i write

[20:44] <pmurias> it easier to implement some thing when you just creat stuff at runtime and the serialise it

[20:46] <mncharity> my impression is BEGIN requires running things at compiletime (as do macros) - not hard, and observing side effects - hard.  Containers might help, plus other observers... BEGIN{eval('our $*foo;')}...  it might be easiest to have an emitter variant which logs changes as they go by.

[20:47] <pmurias> that's the way kp6 did it

[20:47] <pmurias> it ended up rather messy

[20:47] <mncharity> variant, or containers?

[20:47] <Auzon> away&

[20:47] <mncharity> ﻿Auzon: chao

[20:48] <pmurias> mncharity: special containers

[20:48] <pmurias> and some magic in the emitter, if i rememer correctly

[20:49] <pmurias> but i would go with the serilize everything aproach

[20:49] <pmurias> mncharity: the error stayed

[20:49] <pmurias> in re_test.t

[20:49] <pmurias> * re_tests.t

[20:50] <mncharity> ok.  so... I have no idea what mix static analysis, emitter additions, and compile-runtime magic will be needed for BEGIN.  basically, if we can't do ruby-like eval-based metaprogramming in BEGIN's, we have a problem.  todo list. ;)

[20:51] <yath> yay, just reading through S02: Heredocs allow optional whitespace both before and after terminating delimiter. Leading whitespace equivalent to the indentation of the delimiter will be removed from all preceding lines

[20:51] <yath> i wanted this for AGES

[20:51] <mncharity> re '﻿the error stayed', bizarre.  it's been tested now on a variety of platforms.

[20:51] <yath> \o/

[20:51] <mncharity> :)

[20:52] <mncharity> ﻿pmurias: what version of Regexp::Common are you using?

[20:53] <pmurias> 2.122

[20:53] <mncharity> re ﻿serializing the universe... eep, there has to be a better way.

[20:55] <pmurias> it's simple

[20:55] <mncharity> re ﻿2.122 :(  sigh.  oh well.  then issue still not understood.  but established not to occur on a variety of linux distributions, MacOS, and assorted hardware.  :/

[20:55] <pmichaud> re:   20:40 <pmurias> my $var;BEGIN {$var = 123};say $var;

[20:55] <pmichaud> S04 still says:  Some closures produce Code objects at compile time that cannot be cloned, because they're not attached to any runtime code that can actually clone them. BEGIN, CHECK, INIT, and END blocks fall into this category. Therefore you can't reliably refer to run-time variables from these closures even if they appear to be in the scope. (The compile-time closure may, in fact, see some kind of permanent copy of the variable for some storage clas

[20:56] <pmurias> pmichaud: it's possible to do it with some trick or other in order for use to work

[20:57] <mncharity> s/﻿(if we can't do ruby-like eval-based metaprogramming) in BEGIN's/$1/   ;)  yay, macros.

[20:57] <pmurias> mncharity: why are you against serializing the universe ?

[20:59] <mncharity> because I don't understand what it means

[20:59] <mncharity> bbiab

[21:03] <mncharity> how can END do cleanup if if can't access runtime variables?  what purpose does it then serve?

[21:04] <mncharity> unless subs aren't considered variables?  anyway &

[21:04] <pmichaud> they can access runtime variables, just not lexical ones.  :-)

[21:04] <pmichaud> i.e., package variables and file-scoped lexicals are okay.

[21:04] *** perl7 joined
[21:05] <mncharity> ah, ok.  sounds like an S04 'insert "lexical"' edit request, unless I just missed it, or the paragraph's context makes it clear.

[21:06] <pmurias> dosn't it only refer to cloned closures?

[21:06] <mncharity> unless "runtime" variable is an alias for "lexical" variable?

[21:07] <pmichaud> I'm not sure that it's referring only to lexical variables.

[21:07] <pmichaud> and yes, that may be only for cloned closures.

[21:11] <pmurias> cloning TimToady would help ;)

[21:19] <rakudo_svn> r28185 | jonathan++ | [rakudo] Fix sleep.

[21:21] * moritz_ envies rakudo

[21:24] <rakudo_svn> r28186 | pmichaud++ | [rakudo]:

[21:24] <rakudo_svn> r28186 | pmichaud++ | * A different version of sleep.

[21:25] *** perl7 left
[21:39] <meppl> good night

[21:43] *** meppl left
[21:47] *** iblechbot left
[21:48] *** alanhaggai left
[21:49] *** meppl joined
[21:53] *** justatheory joined
[21:56] *** eternaleye_ left
[21:58] *** FurnaceBoy left
[22:00] *** justatheory left
[22:00] *** polettix left
[22:01] *** meppl left
[22:10] *** ofer joined
[22:11] *** polettix joined
[22:14] *** Lorn left
[22:18] *** pmurias left
[22:22] *** Jedai left
[22:49] *** Eevee joined
[22:51] *** Limbic_Region joined
[22:53] *** meteorjay left
[22:57] *** [particle] left
[23:04] *** jjore is now known as zz_jjore

[23:04] *** zz_jjore is now known as jjore

[23:07] <spinclad> diakopter: re leading whitespace operators: why not prefix ++ and -- ?  "(++spaced+out++)"

[23:13] *** jisom joined
[23:20] <diakopter> spinclad: I took a look at that; I couldn't get the overload handler to distinguish between them... also, I couldn't use the real postfix ++/-- either

[23:21] <diakopter> so I ended up using a source filter :)

[23:21] <diakopter> (again)

[23:25] <diakopter> spinclad: but, it was fun, along the way, I caused a segfault in perl as well as a Bus error

[23:48] *** araujo joined
[23:52] <spinclad> ooo, segfaults and bus errors, excellent!

[23:56] *** wknight8111 joined
[23:58] <diakopter> ugh; osx.5.3 update is 420MB

