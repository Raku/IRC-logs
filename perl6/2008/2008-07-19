[00:01] *** Alias__ left
[00:02] *** Alias__ joined
[00:20] *** c1sung left
[00:20] *** c1sung joined
[00:25] *** ikeda left
[00:28] *** Schwern joined
[00:34] *** Alias_ joined
[00:34] *** Alias_ left
[00:52] *** icwiener left
[00:59] *** ingy left
[01:15] *** PZt left
[01:16] *** HadleyTheFox joined
[01:35] <pugs_svn> r21390 | s1n++ | [pugs_s02] added stationary and decreasing ranges (though not specced or 

[01:35] <pugs_svn> r21390 | s1n++ | passing)

[01:38] <Auzon> s1n: Last night TimToady++ mentioned that it was specced

[01:38] *** kcwu_ is now known as kcwu

[01:39] <s1n> Auzon: the .perl is specced?

[01:39] <s1n> or the decreasing ranges?

[01:39] <Auzon> yes. S03:2641

[01:39] <Auzon> err, .perl

[01:39] <s1n> how do i read that, what is that after the colon?

[01:39] <Auzon> by decreasing ranges, do you mean like 5 .. 1? If so, that's not valid

[01:40] <s1n> yeah, i discussed decreasing ranges with bacek last night

[01:40] <Auzon> The value after the colon is the line number (presumably because he acked or grepped for it)

[01:40] <Auzon> The line number in the .pod that is

[01:41] <s1n> we flipped through the spec and didn't see any specific mention that they have to be monotonically increasing

[01:41] <s1n> where's std.pm stashed so i can look this up?

[01:42] <Auzon> pugs/src/perl6/STD.pm ?

[01:42] <s1n> btw, the .perl discussion came up because moritz_ told me it wasn't specced, i didn't see TimToady's comment

[01:43] *** thorat joined
[01:43] <Auzon> Yeah, you pinged out, and missed it in #parrot

[01:44] <s1n> err, i don't really know how to read this, and it looks like it's using a unicode character op, so i'll take his word that it's safe to do the .perl in tests

[01:46] <s1n> anyways, the decreasing ranges thing came up becausei wanted to try it (the synopsis only described them in a general sense), and it didn't work, i talked some with bacek, and we agreed to just add them in skipped

[01:46] <s1n> we can remove them later if need be i suppose

[01:46] *** peeps[work] left
[02:03] <Auzon> They're not allowed in P6 though :-/

[02:03] *** jfredett_ joined
[02:03] <s1n> where does it say they're specifically not allowed?

[02:03] <s1n> i.e. they are strictly monotonically increasing

[02:04] <Auzon> "Ranges are not autoreversing: 2..1 is always a null range. Likewise, 1^..^2 produces no values when iterated, but does represent the interval from 1 to 2 excluding the endpoints when used as a pattern."

[02:04] <Auzon> first paragraph under http://perlcabal.org/syn/S03.html#Range_semantics

[02:04] <lambdabot> Title: S03

[02:05] <s1n> hmm

[02:05] <s1n> where'd you find this, what is perlcabal?

[02:06] <s1n> well, ok, i'll revise the tests to verify these things

[02:06] <Auzon> perlcabal.org is the webserver running on Feather, a community development server

[02:06] <s1n> i knew what feather was, just didn't know it hosted up the spec

[02:06] <Auzon> They have the suite crossrefed with the tests. It's very useful.

[02:08] <s1n> why are the semantics of ranges tested in S02 and S03?

[02:09] <Auzon> the tests in S02 refer to the data structure. The tests in S03 refer to the operator used to construct them

[02:09] <Auzon> I suppose they probably should be combined, but it might be a bit lengthy then

[02:09] <s1n> yeah but there are a number of tests in common

[02:10] <s1n> they're testing basic stuff like .. in both places

[02:10] <s1n> i didn't know about S03-operators/range.t doing this as well, i basically shouldn't have added those tests and probably think we should remove the duplicate tests

[02:11] <Auzon> Combining and reducing duplicates would be good as long as coverage is still good

[02:12] <s1n> sigh, nothing like having to roll back your first change

[02:13] <Auzon> Don't rollback, just revise ;)

[02:13] *** meppl left
[02:13] <s1n> what needs revising, i was testing the semantics, which s02 doesn't really do

[02:14] <s1n> take a look at those changes and what's being tested in s03-operators and tell me what you think should be modified here

[02:16] *** bacek joined
[02:17] *** bacek left
[02:18] *** bacek joined
[02:18] <Auzon> I don't see many (if any) tests for reversed ranges in S03, so you can either split them between S02 and S03, leave them be, or combine S02/S03.

[02:19] <Auzon> As for your tests, you can change them to check if they fail, or write them using 'reverse' or ':by(-1)' (if numeric).

[02:19] *** alanhaggai_ left
[02:19] *** jfredett left
[02:20] <Auzon> also, a heads up: <a b c> is the same as qw(a b c) so you should not include the commas. You can also omit the square brackets if you want

[02:23] *** wknight8111 left
[02:24] *** allbery_b joined
[02:25] *** allbery_b left
[02:25] *** eviltwin_b joined
[02:28] *** eviltwin_b is now known as allbery_b

[02:33] <s1n> okay well, i could move the autoreversing range tests to s03, have them check for failure, and leave the data-type specific tests in s02

[02:35] *** meppl joined
[02:35] *** hanekomu joined
[02:36] *** hanekomu left
[02:40] *** hanekomu joined
[02:50] <s1n> Auzon: should I have the s02 tests just do the .perl tests and have s03 test autoreversing ranges?

[02:51] <s1n> it looks like the tests i added for autoreversing ranges really could be moved over to s03, but i can leave them there testing .perl

[03:02] <Auzon> That's fine

[03:02] <Auzon> If they work in either, just leave them where they are.

[03:04] <s1n> well, the tests i added to s02 had to be skipped because i didn't know autoreversing arrays were specifically not supported

[03:05] <s1n> i'm basically going to change the s02 tests to just test .perl, and only the basics and let s03 test the details

[03:05] <Auzon> Sounds good.

[03:06] <Auzon> hm. The Rakudo test graph hasn't updated since 7-15...

[03:14] *** Limbic_Region left
[03:14] *** thorat left
[03:23] *** hanekomu left
[03:28] *** PZt joined
[03:31] *** ingy joined
[04:39] *** justatheory left
[04:59] *** kanru left
[05:08] *** pugs_svn joined
[05:11] *** Psyche^ joined
[05:23] *** Patterner left
[05:23] *** Psyche^ is now known as Patterner

[05:23] *** pugs_svn left
[05:23] *** pugs_svn joined
[05:24] *** dalek left
[05:24] *** dalek joined
[05:27] *** ingyfoo joined
[05:28] *** ingyfoo left
[05:29] *** ingy left
[05:34] *** eternaleye_ left
[05:59] *** smtms joined
[06:05] *** Psyche^ joined
[06:14] *** justatheory joined
[06:20] *** ashizawa joined
[06:22] *** Patterner left
[06:22] *** Psyche^ is now known as Patterner

[06:25] *** kanru joined
[06:45] *** justatheory left
[06:53] *** eternaleye_ joined
[07:04] *** ingy joined
[07:21] *** ikeda_ joined
[07:22] *** Grrrr joined
[07:23] <pugs_svn> r21391 | lwall++ | [STD] much improved error reporting, many buglets fixed

[07:25] <TimToady> oh, and it parses "use v6;" correctly now :)

[07:28] *** orphean joined
[07:37] *** ikeda_ left
[07:42] *** ikeda_ joined
[07:44] *** eternaleye_ left
[07:44] *** kanru left
[07:44] *** Patterner left
[07:44] *** scrottie left
[07:44] *** moritz_ left
[07:44] *** pmichaud left
[07:44] *** eternaleye_ joined
[07:44] *** kanru joined
[07:44] *** Patterner joined
[07:44] *** scrottie joined
[07:44] *** breinbaas joined
[07:44] *** pmichaud joined
[07:44] *** moritz_ joined
[07:51] *** scrottie_ joined
[07:56] <pugs_svn> r21392 | lwall++ | [STD] implement :P5

[07:56] <pugs_svn> r21392 | lwall++ | [S02-magicals] various cleanups mostly involving rand 1000

[07:59] <bacek> TimToady++

[08:05] *** ikeda_ left
[08:09] *** scrottie left
[08:19] *** bacek left
[08:31] *** eternaleye_ left
[08:49] *** hanekomu joined
[09:04] *** Alias_ joined
[09:04] *** Alias__ left
[09:13] *** tuxdna joined
[09:40] *** iblechbot joined
[10:13] *** masak joined
[10:48] *** pmurias joined
[10:48] *** araujo left
[10:58] *** fridim_ joined
[11:01] *** ruoso joined
[11:03] <pmurias> ruoso: hi

[11:04] <ruoso> pmurias, hi

[11:04] <pmurias> ^!methods serves only as information for the metaclass?

[11:06] <ruoso> pmurias, I thought ^!methods as the RW api for adding methods... 

[11:06] <ruoso> it's declared as an Array... but it should probably be a Hash of Array of Method

[11:07] <pmurias> but only the metaobject interprets the ^!methods?

[11:09] <pmurias> p6opaque passes all method calls to the metaclass, not looking at what is stored in ^!methods?

[11:12] <ruoso> yes... p6opaque directly delegates to the metaclass

[11:12] <ruoso> it only intercepts the .^! calls

[11:12] <ruoso> it's up to the metaclass to decide how to dispatch the method call

[11:13] *** hanekomu left
[11:14] <pmurias> could we store the metadata in instance storage?

[11:16] <pmurias> istance storage being also called private storage

[11:19] <ruoso> pmurias, hmmm... the instance storage is package-oriented

[11:19] <ruoso> the metadata is prototype/class oriented

[11:19] <pmurias> it's a HoH?

[11:20] <ruoso> the instance storage? yes...

[11:20] <ruoso> because each package has a "private  namespace" in the object

[11:20] <ruoso> that's how $!a works

[11:21] <ruoso> the methods, otoh, are not package oriented

[11:21] <ruoso> and are inheritable

[11:21] <ruoso> that's how $.a works

[11:22] <ruoso> if we were talking about strict prototype-based OO, we could have simply "instance storage"

[11:22] <ruoso> but even then... the notion of "defined"ness would be messed up

[11:22] <ruoso> by default, in p6opaque, an object is defined if it has instance storage

[11:22] <pmurias> what i mean is that the metaclass might deside to store methods in an entirely different format than the supplied metaclass?

[11:22] <pugs_svn> r21393 | masak++ | [various test files] fixed a few spelling errors and a missing semicolon

[11:23] <pmurias> s/?/

[11:23] <ruoso> pmurias, supplied by the object, you mean...

[11:23] <pmurias> yes

[11:23] <ruoso> yes... it can

[11:23] <pugs_svn> r21394 | masak++ | [t/spec/S29-list/pick.t] answered challenge by Auzon++:

[11:23] <pugs_svn> r21394 | masak++ | "There should be a better way to write this"

[11:23] <ruoso> it can have a WSDL document stored somewhere

[11:23] <pmurias> sorry meant metadara

[11:24] <ruoso> methods is part of the metadata

[11:24] <pmurias> * metadata

[11:24] <pmurias> and the metadata structure is hard coded

[11:24] <ruoso> but you can inherit objects that have different structures

[11:26] *** hanekomu joined
[11:28] <pmurias> http://search.cpan.org/~sartak/Class-MOP-0.63/lib/Class/MOP.pm#About_Metaclass_compatibility

[11:28] <lambdabot> Title: Class::MOP - A Meta Object Protocol for Perl 5 - search.cpan.org, http://tinyurl.com/6gywk7

[11:30] *** dmq left
[11:32] <pmurias> re package oriented we migh have a metadata pseudo-package

[11:33] *** ruoso left
[11:34] *** hanekomu left
[11:39] <pmurias> i'll work on Arrays untill we think it out

[11:40] *** ruoso joined
[11:40] * ruoso had a network problem

[11:41] <ruoso> re metadata package... that's why there's a REPR api

[11:41] <ruoso> to make that independent on how the object is laid out

[11:42] <ruoso> pmurias, the thing is that the HOW will ask the object using the REPR api

[11:42] <ruoso> there are three "sections" of the REPR api...

[11:43] <ruoso> the first is about WHENCE and WHAT

[11:43] <ruoso> instanceof === WHAT

[11:43] <ruoso> (no instanceof means that object is its own WHAT)

[11:44] <ruoso> pugs: say Int.WHAT

[11:44] <p6eval> pugs: OUTPUT[Int␤]

[11:46] <ruoso> then you have the meta data (which includes isa, does, HOW, WHO, methods and attribute metadata)

[11:46] <ruoso> and also the intance storage ( HoH, holding private storage for each package)

[11:47] <pmurias> where does the list of prototypes the object inherits from live?

[11:50] <ruoso> pmurias, we could have a mixture, meaning that an object could both have instance data *and* metadata

[11:50] <ruoso> but we would have a problem that de user could call Object.BUILDALL()

[11:51] <ruoso> and undef would be defined

[11:52] <pmurias> is it forbiden by the spec?

[11:52] <ruoso> that's why we're considering restrict it in a way that an object either has metadata or instance data

[11:52] <ruoso> pmurias, it's underspecced

[11:52] <ruoso> but TimToady also agreed that this restriction could be sane..

[11:53] <pmurias> in prototype oo an object has both

[11:53] <ruoso> meaning that $foo does Dog would create a new anon prototype 

[11:53] <ruoso> pmurias, except if you have prototype-oo by delegation

[11:53] <ruoso> but I'm not really sure that restriction should be set

[11:54] <pmurias> what is prototyoe-oo not by delegation

[11:54] <pmurias> * prototype

[11:54] <ruoso> where every method is inside the object itself

[11:54] <ruoso> and you clone instead of inherit

[11:57] * ruoso brb&

[12:00] *** iblechbot left
[12:01] *** chris2 joined
[12:41] *** hanekomu joined
[12:41] *** hanekomu left
[13:04] *** meppl left
[13:11] *** meppl joined
[13:25] *** kanru left
[13:32] *** ashizawa left
[13:39] *** kanru joined
[13:43] *** wknight8111 joined
[13:57] *** bacek joined
[13:58] <bacek> pugs: say "$"

[13:58] <p6eval> pugs: OUTPUT[$␤]

[14:05] *** meppl left
[14:06] *** chris2 left
[14:07] *** meppl joined
[14:07] <masak> bacek: arguably it could be a syntax error too, as in Perl 5

[14:07] <bacek> masak: agreed.

[14:09] <pmurias> elf: eval_perl5(' print " $" ";')

[14:09] <p6eval> elf 21394: OUTPUT[String found where operator expected at (eval 118) line 1, at end of line␤     (Missing operator before ?)␤Can't find string terminator '"' anywhere before EOF at (eval 118) line 1.␤ at (eval 117) line 3␤ at ./elf_f line 3861␤]

[14:12] *** kanru left
[14:13] *** kanru joined
[14:15] *** ruoso left
[14:33] *** polettix joined
[14:38] <TimToady> Obsolete use of $" variable; in Perl 6 please use .join() method instead at line 1:

[14:38] <TimToady> ------> "$" ";"

[14:39] *** Jedai joined
[14:40] <pmurias> TimToady: eval_perl5 evals perl5

[14:40] <masak> TimToady: I'm sure rakudo was about to say that right before it hung

[14:40] <TimToady> yes, I was just telling you what STD says

[14:40] <TimToady> only the "$" comes out green and the ";" comes out red

[14:42] <TimToady> I suppose within double quotes $" could give a different error

[14:42] <TimToady> surprisingly easy to arrange these days :)

[14:48] <TimToady> Now says "Can't use a $ in the last position of a string at line 1:

[14:48] <pmurias> TimToady: do i have to switch on anything to get the colors? (or do i have to hack them in myself ;)

[14:49] *** rhr_ joined
[14:50] <pmurias> sorry, didn't svn up;make

[14:51] <TimToady> should just work if you have ANSI::Color

[14:52] <pugs_svn> r21395 | lwall++ | [STD] more tweaks, catch final $"

[14:53] <masak> TimToady++

[14:54] <pmurias> ththe obsolete thing being green is arguably wrong ;)

[14:54] <pmurias> * the

[14:54] <TimToady> the part it thought it parsed is green

[14:55] <TimToady> but yeah, could fix that...

[14:55] <pmurias> i can do it ;)

[14:56] <TimToady> or maybe I should set it up so we can highlight something in the middle with yellow

[14:59] <TimToady> 'course, I've picked the worst colors for anyone who is RG colorblind...

[15:03] <TimToady> well, I should really be getting subscript declarations to parse, or maybe heredocs

[15:05] <TimToady> I was originally just going to parse a subscript declaration as a subscript, but last night I ran into:

[15:05] <TimToady> Failed to parse a required term at line 270:

[15:05] <TimToady> ------>     my @arr[-->Num] = <1 2.1 3.2>;

[15:05] <TimToady> and -->Num isn't a normal lvalue :(

[15:05] <TimToady> *rvalue

[15:06] <TimToady> well, probably want a special rule for it anyway, since subscript declation is a rather restricted language

[15:07] *** tuxdna left
[15:28] *** jhorwitz joined
[15:34] *** iblechbot joined
[15:35] *** kanru left
[15:37] *** cjfields joined
[15:37] <cjfields> rakudo: my sub foo() {}

[15:37] <p6eval> rakudo 29608: OUTPUT[Null PMC access in type()␤current instr.: 'parrot;Perl6;Grammar;Actions;scope_declarator' pc 114555 (src/gen_actions.pir:6310)␤]

[15:39] *** cjfields left
[15:40] *** rhr_ is now known as rhr

[15:58] *** rindolf joined
[16:02] *** kanru joined
[16:09] *** zamanfou is now known as zamanf

[16:22] *** kane_ left
[17:08] <pugs_svn> r21396 | lwall++ | [STD] infrastructure needed by heredocs

[17:10] *** kchys joined
[17:11] *** rindolf left
[17:14] *** masak left
[17:27] *** jfredett joined
[17:43] *** jfredett_ left
[17:59] *** kchys left
[18:00] *** kchys joined
[18:00] *** kchys left
[18:00] *** kchys joined
[18:01] *** kchys left
[18:01] *** kchys joined
[18:04] *** polettix left
[18:05] *** polettix joined
[18:28] *** rindolf joined
[18:35] *** kanru left
[18:38] <pugs_svn> r21397 | lwall++ | [STD] correctly parse 'multi f() {}' when there's no trailing newline

[18:43] *** polettix left
[19:01] *** aindilis joined
[19:08] *** kanru joined
[19:11] <pmurias> TimToady: is there a TODO list for STD, or do you fix bugs as soon as you find them?

[19:23] <rindolf> Hi all.

[19:23] <rindolf> TimToady: here?

[19:25] <pmurias> rindolf: hi

[19:25] <rindolf> pmurias: hi.

[19:26] <rindolf> pmurias: I got a killer idea for a website today, but it has a technical problem.

[19:26] *** justatheory joined
[19:26] <pmurias> what is your idea?

[19:26] <rindolf> pmurias: a site for collectively working on subtitle for videos in YT/Metacafe/etc.

[19:27] <pmurias> rindolf: do you know anybody who works on subtitles?

[19:28] <rindolf> pmurias: for movies, etc.?

[19:28] <rindolf> pmurias: I worked on transcribing talks and audiocasts.

[19:28] <rindolf> I transcribed TimToady's "Present Continuous - Future Perfect" talk.

[19:29] <rindolf> After he gave it on OSDC::Israel::2006

[19:29] <pmurias> why?

[19:29] <rindolf> pmurias: well, we initiated this transcription on request of a deaf FOSS activist.

[19:29] <rindolf> We collaborated on a wiki.

[19:29] <pmurias> i see

[19:29] <pmurias> and for movies?

[19:30] <rindolf> http://wiki.osdc.org.il/index.php/Larry_Wall_-_Present_Continuous,_Future_Perfect

[19:30] <lambdabot> Title: Larry Wall - Present Continuous, Future Perfect - Perl, http://tinyurl.com/5cqzz3

[19:30] <rindolf> pmurias: no, not for movies, yet.

[19:30] <rindolf> pmurias: most FOSS-related movies have awful quality.

[19:30] <rindolf> Like videos of talks.

[19:30] <rindolf> pmurias: enjoy! ^^^ It's great , as most things TimToady 

[19:30] <pmurias> what's you technical problem?

[19:31] <rindolf> pmurias: well, the ##freebsd guy argued that the subtitle will be very small.

[19:31] <rindolf> subtitles.

[19:31] <rindolf> I was told of a tool to add subtitles to Flash videos though.

[19:32] <rindolf> I'll see.

[19:34] <pmurias> re Larry's presentation thanks, i'm *listning* to it now

[19:42] <rindolf> pmurias: ah.

[19:42] <rindolf> pmurias: OK.

[19:42] <rindolf> pmurias: I prefer reading.

[19:42] <rindolf> pmurias: normally.

[19:42] <rindolf> pmurias: but you're welcome.

[19:42] <rindolf> pmurias: we use.perl.org'ed it.

[19:42] <rindolf> Back at 2006.

[19:43] <pmurias> i don't like to read from computer screens

[19:44] <rindolf> Ah.

[19:44] <rindolf> I'm writing a "FOSS Licences Wars" article now.

[19:45] <pmurias> dosn't sound usefull

[19:45] <rindolf> pmurias: it's not.

[19:46] <rindolf> pmurias: but it's something I need to get out of my system.

[19:46] <rindolf> pmurias: are you using the X11L for all your software?

[19:47] <pmurias> i don't really know

[19:47] <pmurias> i just put my open source stuff in the pugs repo

[19:47] <rindolf> pmurias: you just commit it.

[19:48] <rindolf> pmurias: ah.

[19:48] <rindolf> pmurias: well, I think the Pugs core is X11L.

[19:48] <rindolf> Or at least that's what Audreyt wanted.

[19:48] <rindolf> But the Perl 6 code is Artistic.

[19:49] <rindolf> pmurias: maybe I should work on code instead.

[19:49] <pmurias> ye

[19:49] <pmurias> s

[19:49] <rindolf> My homepage and Google are neutralised for a few hours.

[19:49] <pmurias> i mostly worked on other peoples stuff, so it's what they prefere

[19:49] <rindolf> I can work on my Solitaire verifier.

[19:49] <rindolf> Ah.

[19:49] <rindolf> pmurias: you can disclaim ownership.

[19:49] <rindolf> I have a lot of original FOSS code.

[19:49] <pmurias> why?

[19:49] <rindolf> Projects I started from scratch.

[19:50] <rindolf> pmurias: so they (or whoever) won't have to consult you when re-licensing.

[19:51] <pmurias> if the people i'm working with deside to GPL stuff i'll do it with my code too

[19:51] <rindolf> pmurias: ah.

[19:51] *** jhorwitz left
[19:51] <rindolf> pmurias: but then if they decide to make it LGPL (or whatever), then they'll have to ask you.

[19:52] <pmurias> it's not to much to them

[19:52] <pmurias> s/to/for/

[19:53] <rindolf> pmurias: yes, but if you have 1000's of contributors like the Linux kernel does, and they want to convert to a different licence, you got a mess.

[19:53] <pmurias> * it's not very much effort for them

[19:53] <rindolf> Mozilla tried it.

[19:55] <pmurias> it's possible to convert from X11 to anything, and converting from GPL is a thing is should agree to

[19:55] <rindolf> pmurias: right.

[19:56] <rindolf> pmurias: that's why I like the X11L.

[19:56] <rindolf> Also converting from GPL-v2-only to GPL-v2-and-above or GPL-v3-only.

[19:57] <pmurias> GPL-v2-only is not a very good choice

[19:58] <pmurias> but i generally agree with FSF on non-technical matters

[20:02] <rindolf> pmurias: ah.

[20:02] <rindolf> pmurias: GPL-v2 is Linux kernel.

[20:02] <rindolf> And Ghostscript.

[20:02] <rindolf> And stuff.

[20:02] <rindolf> That's why they started GNU PDF.

[20:02] <rindolf> Which is GPLv3+

[20:03] * rindolf is going to start bsdl-violations.org

[20:03] <rindolf> or x11l-violations.org

[20:04] * rindolf is writing some code.

[20:04] <rindolf> Fist! The tests!

[20:04] <rindolf> And noo - de Moose!

[20:04] <rindolf> Actually I'm not using Moose.

[20:04] <rindolf> I'm using C::A.

[20:04] <rindolf> Class::Accessor.

[20:04] <rindolf> But now I have to write the code to pass the tests.

[20:05] *** stevan_ left
[20:06] <pmurias> you're talking about your Solitare verifier?

[20:07] <rindolf> pmurias: yes.

[20:07] <rindolf> I'm not adding Baker's Game support.

[20:07] <rindolf> Only have Freecell now.

[20:09] *** pbuetow joined
[20:10] * pmurias has an *extremely* low opinion of solitare 

[20:12] *** Blasi joined
[20:26] <pugs_svn> r21398 | putter++ | misc/elf/planning/: Created.  With a dependency graph sketch.

[20:28] * pmurias wonders if it's an abuse of subversion to use it to msg people ;)

[20:28] <rindolf> pmurias: are you Putter?

[20:28] <rindolf> pmurias: have you ever played Freecell?

[20:28] <rindolf> pmurias: Solitaire is more than Klondike you know.

[20:30] <pmurias> rindolf: i'm pmurias, mncharity is putter

[20:31] <rindolf> pmurias: ah.

[20:31] <rindolf> pmurias: so - Solitaire is a large collection of one-player French card games.

[20:31] <pmurias> rindolf: i would even consider installing solitare

[20:31] <pmurias> * wouldn't

[20:32] <rindolf> pmurias: and Freecell and related variants have been the object of a lot of research.

[20:32] <rindolf> Solving Freecell was shown to be NP-complete.

[20:32] <rindolf> pmurias: You mean something like PySolFC?

[20:33] <pmurias> i mean i wouldn't want to play any sort of a card game

[20:33] <rindolf> pmurias: not even Poker?

[20:33] <pmurias> no

[20:33] <rindolf> pmurias: which kind of games do you like?

[20:34] <rindolf> pmurias: computer or otherwise.

[20:34] <pmurias> starcraft, glest

[20:35] <pmurias> real style strategies

[20:35] *** apeiron joined
[20:36] <pmurias> * real time strategies

[20:36] <pmurias> ;)

[20:36] <pmurias> i enjoy various board games like settlers of ctan, risk

[20:39] <rindolf> pmurias: ah.

[20:39] <rindolf> pmurias: I like WarCraft 2.

[20:39] <rindolf> pmurias: finished it.

[20:39] <rindolf> pmurias: and I also like WC 3, but it's too damn long.

[20:39] <rindolf> I had to start again.

[20:39] <rindolf> pmurias: ah.

[20:39] <rindolf> pmurias: don't you like puzzle games?

[20:40] <pmurias> like sudoku?

[20:40] <rindolf> pmurias: maybe you'll enjoy Nurikabe.

[20:40] <rindolf> perlbot: nurikabe

[20:40] <pmurias> i hate sudoku

[20:40] <rindolf> pmurias: Sudoku, Sokoban, Nurikabe.

[20:40] <rindolf> Kakuro

[20:40] <rindolf> They're all different.

[20:40] <rindolf> pmurias: I hate sudoku too.

[20:41] <pmurias> doing math exercises is much more enjoyable than sudoku

[20:43] <pugs_svn> r21399 | lwall++ | [STD] get heredoc method back to parseable

[20:47] *** awwaiid left
[20:48] *** araujo joined
[20:50] *** PZt left
[20:55] <rindolf> pmurias: I guess.

[20:55] <rindolf> pmurias: more challenging too.

[20:55] <rindolf> pmurias: I like math exercises.

[20:55] <rindolf> pmurias: but some of the math riddles are positively difficult.

[20:55] <orphean> i don't see the point of sudoku. you just churn through an algorithm to fill it out.

[20:55] <orphean> its like having fun making logarithm charts by hand :(

[20:55] <rindolf> And in the Technion my friend and I used to sit for days on end on some of our assiggments.

[20:56] <rindolf> Solving two questions a day.

[20:56] <rindolf> orphean: a computer can solve Sudoku.

[20:56] <rindolf> A few ISrael.pm'ers wrote a Sudoko solver.

[20:56] <orphean> that's my point exactly

[20:56] <rindolf> One wrote it in JS.

[20:56] <rindolf> But a computer can solve Freecell too usually, but it's still fun.

[20:57] <rindolf> Because a computer just DFSes through the states' graph.

[20:58] <orphean> yeah but that's just the computer brute forcing the game in essence

[20:58] <rindolf> orphean: yeah.

[20:58] <orphean> sudoku is, in a sense, more trivial since there's a well formed algorithm in place that a human can follow just as well (albeit slower)

[21:00] <rindolf> orphean: yeah.

[21:00] <rindolf> As the numbre of columns expands Sudoku become NP-complete.

[21:07] *** Limbic_Region joined
[21:09] <rindolf> orphean: I think Nurikabe would be harder to write a solver for.

[21:12] *** pbuetow left
[21:13] <rindolf> orphean: http://en.wikipedia.org/wiki/Nurikabe

[21:13] <lambdabot> Title: Nurikabe - Wikipedia, the free encyclopedia

[21:14] <rindolf> orphean: thing is - this spatial deduction is easy for a human with some practice, but it's insanely complex to implement in a computer's program.

[21:15] <orphean> hm that's interesting

[21:16] <rindolf> I had some ideas for how to write a Nurikabe solver, but I neglected to start working on it.

[21:17] <rindolf> wanted to write it in CL.

[21:17] <orphean> CL seems like a logical choice

[21:17] <rindolf> Partly because it can be compiled and because Perl may be much slower.

[21:17] <rindolf> orphean: C is much more suitable than CL for Freecell, though.

[21:17] <rindolf> And someone wrote a Freecell solver in x86 Assembly.

[21:17] <rindolf> For DOS.

[21:18] <rindolf> Using his own Macro assembler written in itself.

[21:18] <orphean> I guess its true that some people have a lot of free time on their hands

[21:18] <rindolf> Which originated from 8080 and CP/M or something like that.

[21:18] <rindolf> It's only 15 KB.

[21:18] <rindolf> orphean: that's nothing in comparison to libavl2.

[21:19] <rindolf> It's a 600 pages book about balanced binary trees.

[21:19] *** PZt joined
[21:19] <rindolf> http://www.stanford.edu/~blp/avl/

[21:19] <lambdabot> Title: Ben Pfaff: GNU libavl

[21:19] <rindolf> He's a graduate student BTW.

[21:20] <rindolf> In Stanford.

[21:20] <orphean> one can get the fact its about balanced binary trees from the name alone i would hope

[21:20] <rindolf> He knows Knuth.

[21:21] *** lumi joined
[21:27] *** lumi left
[21:28] *** lumi joined
[21:32] <rindolf> orphean: yes.

[21:32] <rindolf> orphean: well, it also does many RedBlack stuff.

[21:33] <rindolf> It's a literate programming using Texinfo.

[21:33] <rindolf> I compiled it into a PDF several times.

[21:33] <rindolf> Just for the heck of it.

[21:33] *** lumi left
[21:34] <rindolf> http://www.stanford.edu/~blp/avl/libavl.html/ - hmmm....

[21:34] <lambdabot> Title: GNU libavl 2.0.2

[21:34] *** lumi joined
[21:37] *** kchys left
[21:37] *** kchys joined
[21:42] *** lumi left
[21:45] *** lumi joined
[21:50] *** Alias_ left
[21:50] *** Alias__ joined
[21:53] *** Schwern left
[21:54] *** lumi left
[21:54] *** lumi joined
[21:55] <pmurias> rindolf: why do you mention libavl?

[21:55] <rindolf> pmurias: because orphean said some people have too much time on their hands.

[21:56] * pmurias has lots of free time now

[21:57] <rindolf> pmurias: then re-implement libavl2 as X11Led code.

[21:57] <rindolf> ;-)

[21:57] <pmurias> what is it licence now?

[21:57] <rindolf> It's GPLed.

[21:58] <pmurias> didn't i tell you i prefer GPL?

[21:58] <rindolf> pmurias: ah.

[21:58] <pmurias> ;)

[22:00] <pmurias> and reimplementing and open source thing is very demotivating

[22:00] <pmurias> s/and/an/

[22:00] <rindolf> pmurias: yeah, I get you.

[22:00] <rindolf> But tell it to Ovid and ANDYA.

[22:01] <rindolf> They re-implemented Test::Harness.

[22:01] <pmurias> \

[22:01] <rindolf> While I slaved on refactoring/revamping it as Test::Run.

[22:05] <pmurias> g'night

[22:05] *** pmurias left
[22:08] *** iblechbot_ joined
[22:10] <rindolf> orphean: here?

[22:10] *** wknight8111 left
[22:13] *** iblechbot left
[22:16] *** ikeda joined
[22:23] *** Limbic_Region left
[22:29] *** iblechbot_ left
[22:39] *** ikeda_ joined
[22:39] *** ikeda left
[22:53] *** wknight8111 joined
[22:54] *** ikeda__ joined
[22:59] *** rindolf left
[23:01] *** ikeda joined
[23:01] *** ikeda_ left
[23:06] *** ikeda__ left
[23:06] *** ikeda_ joined
[23:06] *** ikeda left
[23:14] *** ikeda_ left
[23:17] *** ikeda joined
[23:24] *** fridim_ left
[23:33] *** ikeda_ joined
[23:40] *** ikeda left
[23:56] *** mtrimpe joined
[23:59] *** wknight8111 left
