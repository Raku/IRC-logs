[00:00] <mncharity> me neither.  for pugs t/ as "test suite to detect pugs regressions", clearly wrong.  for pugs t/ as "current spec", updating to something is clearly right.  i suspect the first use is already better served by "check out revision x of t/".  and second use is the current intent.  so Right I suspect.

[00:00] <mncharity> I've just kludge a workaround for now.

[00:00] <mncharity> *kludged

[00:04] <mncharity> pugs: int rand 1000

[00:04] <exp_evalbot> RESULT[623]

[00:04] <mncharity> rakudo: int rand 1000

[00:04] <exp_evalbot> RESULT[Method 'perl' not found for invocant of class 'Float'␤current instr.: '_block10' pc 35 (EVAL_11:16)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 785 (src/PCT/HLLCompiler.pir:458)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1067 (src/PCT/HLLCompiler.pir:587)␤called from Sub

[00:04] <exp_evalbot> ..'parrot;PCT::HLLCompiler;command_line' pc 1246 (sr...

[00:10] *** cjfields joined
[00:10] <mncharity> TimToady: (6) int is a typename.  also apparently something you can say 'int 3.2' with?   no guidance from STD5.  any thoughts?

[00:11] <[particle2> i think =begin description ... =end description

[00:12] <[particle2> is better than =begin pod

[00:12] <[particle2> it seems more... descriptive

[00:13] <mncharity> :)

[00:14] *** cjfields left
[00:16] <mncharity> hmm.  it's starting to look like my going through pugs t/ looking at STD_red parsefails is going to turn up assorted obsolete p6 in tests.  I'm not quite sure how to handle that.  :/

[00:18] *** [particle2 left
[00:18] <mncharity> (t1) t/02-test-pm/use_ok_test.pm's module name use_ok_test-0.0.1 appears obsolete.

[00:19] <mncharity> (t2) lots of test files have an obsolete =kwid...=cut construct.

[00:19] <mncharity> (tN) is my new "issues noticed in pugs t/" series.

[00:19] *** [particle1 joined
[00:19] <[particle1> 2) notify the mailing list of the problems so somebody else can fix

[00:19] <[particle1> wireless--

[00:20] *** [particle1 is now known as [particle]ventus

[00:21] <mncharity> (t3) various test files have an obsolete =pod...=cut construct.

[00:22] <mncharity> re '﻿notify the mailing list', #perl6 is logged... anyone welcome to fix... I'll puzzle over what to do with the list later...

[00:23] <[particle]ventus> i suppose you could also modify your parser to deal with perl 5 pod

[00:24] *** cmarcelo left
[00:25] <mncharity> happily STD_red_run provides a nice place to s///g the oddball pod comments away.

[00:26] <mncharity> hmm.  which breaks line numbering (at least as currently simply implemented).  ah well.  hasn't been an issue yet.

[00:27] *** cjfields_ left
[00:27] <[particle]ventus> then fix line numbering by commenting out the pod rather than deleting it

[00:31] *** nipotan is now known as nipotaway

[00:32] *** Eevee_ left
[00:33] <mncharity> ﻿[particle]ventus: oh, right.  duh.  tnx

[00:34] <mncharity> still breaks character numbering, but that's less important.  usual solution is to tr/.\n/ \n/ or some such.

[00:46] *** alester_ joined
[00:54] <mncharity> TimToady: (7) Is 'f(:x(1) :y(2))', no comma, still valid?  if STD.pm parses it, could you give me a hint?  tnx.

[01:04] *** Eevee joined
[01:09] <mncharity> pugs: \42

[01:09] <exp_evalbot> RESULT[\42]

[01:09] <mncharity> rakudo: \42

[01:09] <exp_evalbot> OUTPUT[Syntax error at line 1, near "\\42"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;Perl6::Grammar;TOP' pc 11308 (src/gen_grammar.pir:249)␤called from Sub 'parrot;PCT::HLLCompiler;parse' pc 564

[01:09] <exp_evalbot> ..(src/PCT/HLLCompiler.pir:348)␤called from Sub 'parrot;PCT::HLLCompiler;compile' pc ...

[01:10] <mncharity> (t

[01:11] <mncharity> (t4) t/builtins/perl.t has a '# References to scalars' section.  do those exist anymore?

[01:23] <mncharity> (t5) t/oo/from_moose/ is a year-old collection of p5 code, apparently awaiting translation to p6.  curious.

[01:24] *** tobeya left
[01:27] <Eevee> bah I should really take a shot at that whole test migration thing

[01:27] <Eevee> I think I am shy about touching "someone else's" code

[01:29] <mncharity> could start with ﻿t/oo/from_moose/ :)   get your feet wet.  update the p5 files from the current Moose, and then start translating... though...

[01:29] <mncharity> that said, there may be a reason why things apparently stalled out a year ago.  ie, it may be hard.  or non-useful?  or... something.

[01:30] *** justatheory left
[01:30] <mncharity> yiyihu: ^^^ any guidance?

[01:30] <Eevee> or everyone was busy with something deemed more useful than writing tests?  :P  a pitfall I frequently (if not constantly) fall into

[01:30] <mncharity> could be :)

[01:31] *** Ched- left
[01:31] *** Ched- joined
[01:34] <Eevee> holy

[01:34] <Eevee> there are a lot of tests in here

[01:35] *** kanru left
[01:35] <Eevee> oh, all tiny

[01:41] <mncharity> and the ones I glanced at seem to become even smaller in p6

[01:42] <Eevee> and all of them are .orig except the first

[01:42] <Eevee> someone had grandiose plans and promptly abandoned them

[01:45] <mncharity> or perhaps the plan was to set things up so someone else could work on it. ;)

[01:47] *** [particle]ventus left
[01:54] <Eevee> hum.  svn log claims the tests are synced with moose's repo

[01:56] <mncharity> I believe that's a intent/policy, rather than mechanism.  Moose now 0.23. :)

[01:57] <Eevee> there are also no "hey automatically syncing" sorts of commits

[01:57] <Eevee> of course, if these are all translated to p6 there's not much hope of keeping them sync'd any more

[02:01] <mncharity> I suspect the idea was "here is a set of p6-like oo tests we can copy/translate from, rather than having to think of them ourselves".  so a close sync isn't really needed.

[02:04] <Eevee> moose is now 0.*4*3

[02:04] <mncharity> I point you at ﻿from_moose only because it seemed one way to avoid dealing with ﻿"someone else's" code.  all this can be yours...  don't know if it's an "optimal" task.  but if taken lightly (ie, look for any low hanging fruit; don't get bogged down or discouraged), it could be a "get your feet wet" thing to play with for a bit.

[02:05] <mncharity> and a way to learn Moose :)

[02:06] <Eevee> and a way to learn p6's object system, which is no doubt almost, but not quite, entirely unlike what I remember

[02:07] <mncharity> for any value of remember :)

[02:08] <mncharity> my recent favorite was   my Int $I_am_undef;  say $I_am_undef;  #=> "Int"

[02:09] <mncharity> or something vaguely like that

[02:09] <mncharity>  

[02:09] <Eevee> yeah I saw discussion of that either here or in #parrot

[02:09] <mncharity> svnbot looks to be on vacation.  could someone poke it?

[02:10] <Eevee> given how many undef warnings I see even now in production perl5, that might not be a good idea for default behaviour..  especially if it doesn't even warn

[02:12] <mncharity> my impression is all sorts of interesting and helpful behavior can be available, both at compile and runtime.

[02:14] *** eternaleye left
[02:15] <mncharity> ok.  brain is toast.  current dev path is () keep banging STD_red against t/ until ~80% of tests are not noisily and obviously parsefailing (vs current 40%).  then () start banging elf against t/, attempting to actually pass them.

[02:15] <Eevee> how much OO does rakudo support anyway?

[02:16] <mncharity> assuming the misparses and tree defects aren't too bad, that second part may actually be fun. :)

[02:16] <mncharity> re oo rakudo, I've little idea, sorry.

[02:17] * Eevee make spectest then

[02:20] <mncharity> elf oo is still quite primitive (no submethod's, etc, etc).

[02:20] *** eternaleye joined
[02:20] *** nipotaway is now known as nipotan

[02:21] <mncharity> and in some respects, is likely to remain so until someone else takes it on.  I'm more focused on passing t/ as a way of getting people interested/started, so p6opaque and really conformant oo is not on my agenda.

[02:22] <Eevee> it occurs to me that there should be a perl 6 glossary

[02:22] <mncharity> "enough fast fake p6 oo for you to write a p6 compiler in it"

[02:22] <mncharity> I believe there is one, let's see...

[02:22] <Eevee> the perl culture likes to invent clever terms not commonly used elsewhere

[02:22] *** agentzh left
[02:23] <mncharity> http://www.perlfoundation.org/perl6/index.cgi?glossary_of_perl_6_terms_and_jargon

[02:23] <lambdabot> Title: Glossary of Perl 6 Terms and Jargon / Perl 6, http://tinyurl.com/ytvdje

[02:23] <Eevee> I've seen that, but I mean things like submethod/metaoperator/hyperoperator/multimethod/etc

[02:24] *** agentzh joined
[02:24] <mncharity> ah, sort of an index into  http://feather.perl6.nl/syn/

[02:24] <lambdabot> Title: Official Perl 6 Documentation

[02:24] <wknight8111> I second that motion, there are a lot of clever terms, and it takes a while for people to get up to speed

[02:24] <wknight8111> I'm a living example, I still can't decipher half the stuff that gets said around here

[02:25] <Eevee> yeah

[02:25] <mncharity> motion carried unanimously

[02:25] <Eevee> I think even some of the synopses talk about invented vernacular as though the reader had heard it before

[02:25] <Eevee> which is a bit silly when the synopses invented it in the first place

[02:26] *** alester_ left
[02:27] <mncharity> "Getting started with the ﻿Official Perl 6 Documentation - a orienting glossary and introduction" ? :)

[02:28] <mncharity> ﻿elf - "enough fast fake p6 oo for you to *happily* write a p6 compiler in it"

[02:29] <mncharity> end of day.  good night all &

[02:29] <Eevee> night

[02:29] *** mncharity left
[02:32] *** alester_ joined
[02:38] *** Limbic_Region joined
[02:44] *** alester_ left
[03:26] *** alester_ joined
[03:27] *** yewenbin joined
[03:34] *** nipotan is now known as nipotaway

[03:57] *** klle left
[04:02] *** Limbic_Region left
[04:05] *** wknight8111 is now known as wknight-away

[04:07] *** alester_ left
[04:08] *** alanhaggai joined
[04:21] *** mncharity joined
[04:25] *** wknight-away left
[04:28] <mncharity> ﻿TimToady: (8) given '3 if 4;', statement calls <?stdstopper>, which is true because it checks <statement_mod_cond>.  but because ﻿<?stdstopper> is true, we never get to the || branch which would actually parse ﻿<statement_mod_cond>.  or am I missing something?

[04:29] <mncharity> &

[04:29] *** mncharity left
[04:30] *** thestarslookdown joined
[04:37] *** Auzon joined
[04:45] *** Psyche^ joined
[04:56] *** Patterner left
[04:56] *** Psyche^ is now known as Patterner

[05:10] *** gugod_ joined
[05:14] *** gugod left
[05:16] *** gugod_ is now known as gugod

[05:18] *** eternaleye_ joined
[05:18] *** eternaleye left
[05:19] *** eternaleye_ is now known as eternaleye

[05:59] *** meppl joined
[06:01] *** BinGOs_ joined
[06:01] *** BinGOs left
[06:01] *** BinGOs_ is now known as BinGOs

[06:09] *** thestarslookdown left
[06:10] *** alanhaggai left
[06:17] *** REPLeffect left
[06:18] *** REPLeffect joined
[06:49] *** Khisanth left
[06:51] *** Khisanth joined
[06:52] *** cognominal_ joined
[07:06] *** iblechbot joined
[08:02] <moritz_> nqp: my $x = 3; say $($x)

[08:02] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "= 3; say $"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block'

[08:02] <exp_evalbot> ..pc 2928 (src/Grammar_gen.pir:1037)␤called from S...

[08:02] <moritz_> nqp: my $x = 3; say $($x);

[08:02] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "= 3; say $"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block'

[08:02] <exp_evalbot> ..pc 2928 (src/Grammar_gen.pir:1037)␤called from S...

[08:02] <moritz_> nqp: my $x := 3; say $($x);

[08:02] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "$($x);"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block' pc

[08:02] <exp_evalbot> ..2928 (src/Grammar_gen.pir:1037)␤called from Sub '...

[08:09] *** alanhaggai joined
[08:32] *** meppl left
[08:34] *** riffraff joined
[08:36] <riffraff> hi

[08:38] <moritz_> hi riffraff, what's up?

[08:51] *** Eidolos left
[08:53] *** Sartak joined
[08:53] *** cognominal_ left
[09:04] *** masak joined
[09:13] *** Psyche^ joined
[09:25] *** Auzon left
[09:27] *** penk joined
[09:30] *** Patterner left
[09:30] *** Psyche^ is now known as Patterner

[09:45] *** wknight8111 joined
[10:15] *** alanhaggai left
[10:28] *** alanhaggai joined
[10:52] *** BinGOs left
[11:00] *** overlast left
[11:03] *** wknight8111 left
[11:08] *** Alias_ joined
[11:14] *** cognominal_ joined
[11:22] *** overlast joined
[11:27] *** chris2 joined
[11:27] *** lisppaste3 left
[11:30] *** sscaffidi joined
[11:39] *** aindilis left
[11:39] *** aindilis joined
[11:43] *** lisppaste3 joined
[11:58] *** BinGOs joined
[12:16] <masak> mofino: is `my @a, @b;` really legal Perl 6?

[12:17] <moritz_> masak: did you mean me? ;-)

[12:17] <masak> yes :/

[12:17] <masak> perl -w -Mstrict -e 'my @a, @b;' # gives error

[12:17] *** agentzh left
[12:18] <moritz_> perl 5 needs parenthesis around some of these lists

[12:18] <moritz_> my (@a, @b); works

[12:18] <masak> yes, I know

[12:18] <masak> I was referring to the parentheses

[12:18] <masak> can you leave them out in p6?

[12:18] <moritz_> and Perl 6 removes the need for all those list constructing arrays

[12:19] <moritz_> just like you can say 'for 1, 2, 3, 4 { ... }'

[12:19] <masak> so `my $a, $b, $c = 1, 2, 3;` does what I mean?

[12:19] <moritz_> pugs: my $a, $b, $c = 1, 2, 3; say $b

[12:19] <exp_evalbot> OUTPUT[*** ␤    Unexpected ","␤    expecting "::"␤    Variable "$b" requires predeclaration or explicit package name␤    at /tmp/O5R76RsF9u line 1, column 10␤]

[12:20] <moritz_> uhm

[12:20] <masak> paraphrasing Yegge: pugs is not a perfect perl 6

[12:20] <moritz_> right

[12:20] <masak> but essentially, that's the same error I got from p5

[12:20] <moritz_> but I'm looking at STD.pm right now

[12:21] <moritz_> and I don't see how it could handle that either

[12:21] <masak> heh

[12:21] <moritz_> pugs: my ($a, $b, $c) = (1, 2, 3); say $b

[12:21] <exp_evalbot> OUTPUT[2␤]

[12:21] <moritz_> pugs: my ($a, $b, $c) = 1, 2, 3; say $b

[12:21] <exp_evalbot> OUTPUT[2␤]

[12:21] <masak> yes, that much is clear to me too

[12:22] <masak> (besides, let's hope that no-one ever logs in as 'pugs' on this channel)

[12:22] *** agentzh joined
[12:23] <moritz_> I think diakopter took care of registering 'pugs', 'rakudo' and 'nqp' as freenode nicks

[12:24] <moritz_> rakudo: my $a, $b; say 2

[12:24] <exp_evalbot> OUTPUT[Scope  not found for PAST::Var '$b'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 158 (src/PCT/HLLCompiler.pir:103)␤called from Sub 'parrot;PAST::Compiler;post_children' pc 1226 (src/PAST/Compiler.pir:144)␤called from Sub 'parrot;PAST::Compiler;call' pc 2274

[12:24] <exp_evalbot> ..(src/PAST/Compiler.pir:525)␤called from Sub 'parrot;PAST::Compiler;post_chil...

[12:24] <moritz_> rakudo: my ($a, $b); say 2

[12:24] <exp_evalbot> OUTPUT[Scope  not found for PAST::Var '$a'␤current instr.: 'parrot;PCT::HLLCompiler;panic' pc 158 (src/PCT/HLLCompiler.pir:103)␤called from Sub 'parrot;PAST::Compiler;post_children' pc 1226 (src/PAST/Compiler.pir:144)␤called from Sub 'parrot;PAST::Compiler;call' pc 2274

[12:24] <exp_evalbot> ..(src/PAST/Compiler.pir:525)␤called from Sub 'parrot;PAST::Compiler;post_chil...

[12:30] <masak> pugs: sub bar($x) { $x = 3; }

[12:30] <exp_evalbot> RESULT[\sub :($x) "$_" := "Scalar" #<Scalar:0xb71c8ed4>␤          "$x" := "Scalar" #<Scalar:0xb71c79dc>␤          "&?ROUTINE" := "Sub" #<Sub:0xb6604cec>␤          "&?BLOCK" := "Sub" #<Sub:0xb6604cec> {"&bar" := "Sub" #<Sub:0xb715fa30>, "$_" := "Scalar" #<Scalar:0xb7170d44>␤                         

[12:30] <exp_evalbot> ..                                               ...

[12:31] <masak> pugs: sub bar($x) { $x = 3; say $x; } my $a = 2; bar($a);

[12:31] <exp_evalbot> OUTPUT[*** Can't modify constant item: VRef <Scalar:0xb68c7a40>␤    at /tmp/0yVkn5MZ73 line 1, column 15-21␤]

[12:31] <masak> couldn't that be a compile-time error?

[12:36] *** alanhaggai left
[12:38] *** alanhaggai joined
[12:40] *** wknight8111 joined
[12:45] <moritz_> it could, if you'd invest enough energy in the semantic analysis

[12:47] <masak> moritz_: I'm almost of the opinion that a correct Perl 6 compiler should disallow such a program

[12:47] <masak> it's not _that_ much semantic analysis

[12:48] <masak> what we're looking for is an assignment to a variable declared as read-only

[12:49] <moritz_> masak: you're right, it's *very* desirable

[12:49] <masak> is this not nailed down yet?

[12:49] <masak> if it isn't I'm writing to perl6-lang

[12:51] <moritz_> I don't know

[12:51] * masak greps synopses first

[12:53] *** BinGOs left
[12:55] *** penk left
[13:01] *** BinGOs joined
[13:04] *** Sartak is now known as Eidolos

[13:06] *** BinGOs left
[13:07] *** BinGOs joined
[13:09] <masak> there, mail sent

[14:04] *** ilogger2 joined
[14:10] *** TJCRI joined
[14:21] *** meppl joined
[14:40] *** riffraff joined
[14:49] *** rff joined
[14:51] <spinclad> nqp: my $x := 3; say ($($x))

[14:51] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "($($x))"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block' pc

[14:51] <exp_evalbot> ..2928 (src/Grammar_gen.pir:1037)␤called from Sub ...

[14:51] <spinclad> nqp: my $x := 3; say ($($x));

[14:51] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "($($x));"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block' pc

[14:51] <exp_evalbot> ..2928 (src/Grammar_gen.pir:1037)␤called from Sub...

[14:52] <spinclad> nqp: my $x := 3; say ($x);

[14:52] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "($x);"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block' pc

[14:52] <exp_evalbot> ..2928 (src/Grammar_gen.pir:1037)␤called from Sub 'p...

[14:52] <[particle]> no space after say

[14:52] <spinclad> nqp: my $x := 3; say($($x))

[14:52] <exp_evalbot> OUTPUT[Method 'get_scalar' not found for invocant of class 'Integer'␤current instr.: '_block10' pc 21 (EVAL_4:11)␤called from Sub 'parrot;PCT::HLLCompiler;eval' pc 785 (src/PCT/HLLCompiler.pir:458)␤called from Sub 'parrot;PCT::HLLCompiler;evalfiles' pc 1067 (src/PCT/HLLCompiler.pir:587)␤called from

[14:52] <exp_evalbot> ..Sub 'parrot;PCT::HLLCompiler;command_line' pc 1...

[14:52] <spinclad> right

[14:52] <[particle]> that's better.

[14:55] <[particle]> nqp: class Integer { method get_scalar() { say 'hi' } }; my $x := 3; say( $($x) );

[14:55] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "'hi' } }; "␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block'

[14:55] <exp_evalbot> ..pc 2928 (src/Grammar_gen.pir:1037)␤called from S...

[14:56] <[particle]> nqp: class Integer { method get_scalar() { say 'hi' }; }; my $x := 3; say( $($x) );

[14:56] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "'hi' }; };"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block'

[14:56] <exp_evalbot> ..pc 2928 (src/Grammar_gen.pir:1037)␤called from S...

[14:56] <spinclad> nqp: class Integer { method get_scalar() { say 'hi'; }; }; my $x := 3; say( $($x) );

[14:56] <exp_evalbot> OUTPUT[Statement not terminated properly at line 1, near "'hi'; }; }"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 4364 (src/Grammar_gen.pir:1522)␤called from Sub 'parrot;NQP::Grammar;statement_block'

[14:56] <exp_evalbot> ..pc 2928 (src/Grammar_gen.pir:1037)␤called from S...

[14:57] <spinclad> nqp: class Integer { method get_scalar() { say('hi') } }; my $x := 3; say( $($x) );

[14:57] <exp_evalbot> OUTPUT[hi␤1␤]

[14:57] *** riffraff left
[14:57] <masak> spinclad: cool!

[14:57] <spinclad> 1?

[14:58] <masak> spinclad: probably the result from 'say'

[14:58] <[particle]> yep

[14:58] <spinclad> cool beans indeed.

[14:58] <masak> nqp: class Integer { method get_scalar() { 'hi' } }; my $x := 3; say( $($x) );

[14:58] <exp_evalbot> OUTPUT[hi␤]

[14:59] <[particle]> nqp has no runtime, so to get $() and @() working, you need to add the functions to the runtime

[14:59] <[particle]> s/functions/methods/

[14:59] <spinclad> yummy cool beans!  must try them in some more recipes

[15:00] <masak> salads usually contain cool beans

[15:01] <spinclad> sadly they must get re-added on every line, with evalbot

[15:01] <[particle]> yes, but you have a command line somewhere, i'm sure!

[15:01] <[particle]> like, feather?

[15:01] <spinclad> like home even, true

[15:02] <spinclad> but for playing in public for our mutual delectation

[15:03] <spinclad> or just spamming the channel

[15:42] *** meppl left
[15:44] *** rdice joined
[15:55] *** jhorwitz joined
[15:55] *** pbuetow joined
[16:07] *** stevan_ joined
[16:07] *** meppl joined
[16:11] *** justatheory joined
[16:22] *** kanru joined
[16:24] *** yewenbin joined
[16:27] *** [particle1 joined
[16:49] *** chris2_ joined
[16:51] *** chris2_ is now known as chris2

[16:55] *** [particle]ventus joined
[16:58] *** PerlJam joined
[17:11] *** dalek joined
[17:21] *** [particle]ventus left
[17:22] *** [particle]ventus joined
[17:41] *** FurnaceBoy joined
[17:50] *** pmurias joined
[17:52] *** FurnaceBoy left
[18:01] <pmurias> ruoso: how should code using smop be compiled?

[18:06] <ruoso> you mean using smop as a library?

[18:07] <ruoso> pmurias, if so, you can just -lsmop... no special requirements...

[18:07] <ruoso> take a look at the tests, they are all stand-alone programs that are compiled agains libsmop

[18:08] *** turrepurre joined
[18:09] <pmurias> trying

[18:14] <pmurias> how do i specifiy where should gcc look for the object file?

[18:14] <ruoso> -L

[18:14] <ruoso> iirc

[18:23] <pmurias> prepending /bin/sh libtool works ;)

[18:24] <ruoso> I really like autotools ;)

[18:24] *** japhb joined
[18:24] <ruoso> not that I undertand them...

[18:24] <ruoso> ;)

[18:25] <pmurias> i hate autotools

[18:25] <pmurias> ;)

[18:27] *** araujo joined
[18:29] <ruoso> pmurias, I'm curious... what sort of things are you experimenting?

[18:31] <pmurias> i'm thinking of doing an smop elf backend

[18:31] <ruoso> elf?

[18:32] <pmurias> the thing mncharity was working on

[18:33] * ruoso a little outdated...

[18:34] <pmurias> it's a perl6 implementation with a hand-translitarated from STD parser in ruby

[18:34] <pmurias> the none backend part is bootstraped

[18:34] <ruoso> ahm... sounds interesting... 

[18:34] <pmurias> misc/elf

[18:35] <ruoso> I should have some time to get back in the end of this month

[18:35] <ruoso> than I'll be able to get up-to-date on all of this

[18:36] *** [particle] joined
[18:37] <pmurias> i'll have my school exams over soon, so i'll have more free time at the end of them month too

[18:39] <pmurias> ruoso: how are thing going for fglock? he hasn't been on irc lately

[18:39] <ruoso> pmurias, he had recently moved to amsterdam

[18:43] *** rindolf joined
[18:46] *** qmole joined
[18:48] <pmurias> &

[18:49] *** yewenbin left
[18:51] *** [particle1 left
[18:57] *** chris2 left
[19:03] *** lambdabot joined
[19:17] *** barney joined
[19:25] *** sscaffidi joined
[19:29] *** FurnaceBoy joined
[19:39] *** barney left
[19:45] *** FurnaceBoy left
[19:47] *** japhb left
[19:47] *** [particle]ventus left
[20:04] *** pmichaud joined
[20:07] *** [particle1 joined
[20:07] <rindolf> Hi all.

[20:15] *** kyrbe joined
[20:18] *** japhb joined
[20:18] <pmurias> rindolf: hi

[20:19] <rindolf> Hi pmurias 

[20:23] *** armagad joined
[20:24] *** armagad left
[20:28] *** kyrbe left
[20:32] *** tobeya joined
[20:40] *** eternaleye joined
[21:00] *** rindolf left
[21:05] *** sscaffidi left
[21:05] *** sscaffidi joined
[21:05] *** justatheory_ joined
[21:21] *** justatheory left
[21:25] *** rdice left
[21:43] *** TJCRI left
[21:43] *** rff left
[21:45] *** Jamtech joined
[21:48] *** Jamtech left
[21:48] *** jhorwitz left
[21:48] *** riffraff joined
[21:49] *** FurnaceBoy joined
[22:08] *** mncharity joined
[22:10] *** riffraff left
[22:11] * mncharity notes "ruoso: elf?", concludes he's doing something very wrong. :/

[22:12] <mncharity> so let's see, no commits?  or svnbot still broken?

[22:13] <pmurias> mncharity: hi

[22:14] <mncharity> hi ﻿pmurias. :)

[22:14] <mncharity> no commits. :(

[22:14] *** riffraff joined
[22:16] <pmurias> g'night

[22:16] *** pmurias left
[22:18] <mncharity> ﻿pmurias: re elf and "was working on", still am...  just been focused on parsing lately.

[22:18] <mncharity> doh.  good night...

[22:19] *** FurnaceBoy left
[22:31] *** eternaleye left
[22:33] *** riffraff left
[22:36] *** eternaleye joined
[22:49] <mncharity> it's kind of neat that  +=  is just   infix:<+>  followed by  infix_postfix_meta_operator:<=> .

[22:52] <mncharity> +≐  :)

[22:53] <mncharity> wow.  that even parses (if added as a second ﻿infix_postfix_meta_operator).  /me waits for test to finish... twiddles thumbs...

[22:55] <mncharity> have to do some profiling, perhaps add some memoization... it seems things might be slower now.  perhaps the seemingly increased use of complex lookaheads.

[23:01] <mncharity> need to get parameterized classes working.  they seem the p6 mechanism for declarative modules, eg, one which says   eqn(F = m a);  and leaves it up to the parameter how to interpret this declaration.

[23:02] *** boles joined
[23:07] *** stevan_ left
[23:18] <mncharity> TimToady: (9) in statement, <statement_mod_loop> and _cond are followed by EXPR calls... but they already have a <modifier_expr> built into them.  typo?

[23:31] *** stevan_ joined
[23:37] <mncharity> TimToady: (10) should circumfix:sigil be '<sigil>+'?  t/data_types/hash.t has a '@%(...)'.

[23:41] *** syle joined
[23:41] <syle> anyone got any docs on writing code pertaining to multi-core processers?

[23:47] *** Laedrus joined
[23:48] *** Auzon joined
[23:51] <mncharity> ﻿syle: array ops in p6 are designed with parallelization in mind.  and there are threads.  but other than that... maybe someone should write an article?  :)

[23:53] <mncharity> TimToady: (11) in rad_number, the <[ 0..9 a..z A..Z ]> doesn't let one use _ .  typo?  :2<1_0.1>

