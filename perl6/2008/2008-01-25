[00:01] *** thoughtpolice left
[00:01] *** thoughtp1lice is now known as thoughtpolice

[00:11] <pugs_svn> r19677 | lwall++ | [Test.pm] typo

[00:16] *** njbartlett left
[00:18] *** njbartlett joined
[00:28] *** njbartlett left
[00:38] *** ruz joined
[00:43] *** njbartlett joined
[01:04] <xinming> se noai

[01:04] <xinming> a.:se ai

[01:05] <xinming> oops, sorry, I'm testing my keyboard. >_<

[01:07] *** polettix left
[01:11] *** c9s left
[01:11] *** c9s joined
[01:15] *** cnhackTNT joined
[01:17] *** lyokato_ joined
[01:18] <avar> does the ruby backend have no runtime files?

[01:35] *** Limbic_Region left
[01:46] *** devogon left
[02:14] *** OuLouFu joined
[02:20] *** orafu left
[02:38] <mncharity> hi avar :)

[02:38] <mncharity> re does the ruby backend have no runtime files?, just...

[02:39] <mncharity> compiled/ruby-kp6-mp6/kp6_runtime.rb

[02:39] <avar> it would be better to keep it in src/ :)

[02:41] <pugs_svn> r19678 | putter++ | [kp6] ruby backend: update todo.  2 more tests pass.

[02:43] *** kanru left
[02:43] <mncharity> indeed.  I deferred the task of determining if make would automagically copy it, and if not, of fighting with make.  also makes the edit test cycle one step shorter. :)  feel free to move it.

[02:44] <mncharity> v6-KindaPerl6/docs/ruby_backend.txt is actually pretty much up to date.

[02:45] *** Tene joined
[02:46] <avar> mm, does kp6-kp6 even run?

[02:46] <mncharity> kp6-kp6?  looking...

[02:47] <avar> 'r|runtime=s' => \( $opt{runtime} = 'mp6' ),    # or 'kp6'

[02:47] <avar> re the ruby_backend.txt doc

[02:47] *** atobey left
[02:47] <avar> I thought the biggest obstacle to kp6-kp6 was getting kp6-kp6 to bootstrap at all

[02:48] *** cnhackTNT left
[02:49] <mncharity> avar: re biggest obstacle, I sure hope not.  fglock said it was performance.  no?

[02:53] <avar> Yeah, but to be honest I think that's a bit whack:)

[02:54] <mncharity> hmm... do you have a feel for what aspect of the bootstrap isn't quite working?

[02:54] <mncharity> :)

[02:55] <avar> I mean, -Ofun and all but it was never so bad that it was actually very hard to hack it since you can do small parts at a time, and it's much easier IMO to optimize once you have something slow and working than fast and nonfunctional

[02:55] <avar> I haven't hacked in a while but part of the runtime is still in p5

[02:55] <avar> so those parts are obviously not bootstrapped:)

[02:55] <mncharity> lol

[02:57] <mncharity> p5 runtime i'm not so worried about.  rb gives a much higher floor to stand on, and then is arguably a better language to hack it in.  I'm more worried about

[02:58] <mncharity> kp6's p6 code being non- or incorrectly parsed/compiled, for subtle reasons that require kp6 debugging.

[02:58] <avar> the p5 runtime is the most complete, and as long as parts of it are in pure-p5 as opposed to p6 that means we don't have bootstrap

[03:00] <mncharity> my understanding is the kp6-mp6 applied to the kp6 p6 source, emits p5 code which is unusably glacial.  no?

[03:01] <avar> yeah

[03:01] <avar> or so I've heard, I can't remember the last time I ran it, or if I ever did

[03:02] <mncharity> so the hypothesis was that kp6-mp6 applied to the kp6 p6 source might conceivably emit ruby which was non-glacial.

[03:03] <pugs_svn> r19679 | avar++ | use $^X not perl

[03:04] <mncharity> ruby oo being both faster than p5 oo, and hypothetically being close enough to p6 that it can be used somewhat directly, rather than requiring a somewhat heavy additional layer on top of the native oo.

[03:07] <mncharity> This exercise is only useful if (1) a replacement of mp6 by the ruby backend is not very difficult, (2) the result is faster than mp6, (3) there are folks pursuing kp6 development whom this would help.

[03:08] <avar> $ perl script/kp6 -r kp6 t/kp6/01-tap.t

[03:08] <avar> Bareword "DISPATCH" not allowed while "strict subs" in use at compiled/perl5-kp6-kp6/lib/KindaPerl6/Grammar/Regex.pm line 28.

[03:08] <avar> yes but afaikt kp6-kp6 still doesn't work at all and needs some more work so you'll be running nothing very fast:)

[03:09] *** sri_work left
[03:10] <mncharity> which would be a very great waste of time. :)

[03:10] <mncharity> hmm...

[03:10] <mncharity> s/waste/misallocation/

[03:11] <mncharity> ok, a key question is,

[03:12] <mncharity> how much of any current obstacles to kp6 compiling itself are behind the ast?  ie, Emit/Perl5 and the perl5 runtime.

[03:13] <mncharity> the ruby backend replaces all that, so it's not an issue.

[03:13] <mncharity> if kp6 can create a valid ast for the kp6 p6 code, then the ruby backend is all set.

[03:14] <mncharity> any idea whether kp6 can create a valid ast for the kp6 p6 code?

[03:16] * mncharity notes we are still dancing the story of "Once a p6 implementation with oo exists, it will be straightforward to write a p6 implementation in p6.  Until then... a world of pain."

[03:19] <mncharity> avar: any idea whether kp6 can create a valid ast for the kp6 p6 code?

[03:19] *** jhorwitz left
[03:20] <avar> yes, since kp6-mp6 parser kp6

[03:20] <mncharity> "kp6-mp6 parser kp6"?

[03:21] <avar> parses

[03:23] <avar> But anyway, I'm not saying you can't rewrite everything in ruby, just that things would be easier for all the backends if more stuff was in p6 so we wouldn't have to churn out all the same code for each backend

[03:23] <avar> Like all the Pad handling et al

[03:29] <mncharity> hmm... so why don't I buy that vision... let's see...

[03:39] <mncharity> Perhaps the key concept is the following.  Given a usable p6 (correct-or-debuggable, generates usably fast code, oo, macros), and a language spec, one can write, a complete fast p6 implementation, from scratch (ie, using nothing from the "usable p6", but certainly snarfing lots of stuff from elsewhere), in a person week or few.

[03:39] <mncharity> If you buy that, what makes other backends easy to write now, on non-"usable p6", completely doesn't matter.

[03:39] <mncharity> s/what/then what/

[03:41] <mncharity> Basically, if pugs had gotten oo that first summer, I believe we would have had a real p6 by end of year, and official xmas the next.

[03:42] <mncharity> But pugs ended up not becoming that "usable p6", so we are still in bootstrap hell.

[03:43] <mncharity> avar: I'd be very interested what you thought of: Given a usable p6 (correct-or-debuggable, generates usably fast code, oo, macros), and a language spec, one can write, a complete fast p6 implementation, from scratch (ie, using nothing from the "usable p6", but certainly snarfing lots of stuff from elsewhere), in a person week or few.

[03:43] *** wtgee_ joined
[03:45] <mncharity> it seems to suggest a model where one should sacrifice anything to get to a "usable p6"+ language spec.  you'll want to throw all the code away once it can be written in real p6 anyway.  so it's all a throwaway bootstrap.

[03:45] <mncharity> thoughts?

[03:45] <mncharity> anyone? :)

[03:54] *** kanru joined
[04:05] <mncharity> just to illustrate that that wasn't intended as a strawman... or insane, i note: If you can compile p6 down to CL or scheme you've won, as they have nice compilers.  They, and everyone, have perl-compatible-regular-expression engines.  Which mostly don't permit subrules (including apparently perl 5.10).  Wrapping a PCRE to get subrules, and thense p6 rx, takes an amount of code proportional to the language's ability to define and grov

[04:11] <mncharity> macros or other metaprogramming, and multimethods, help.  in a nice language, it's a high-order 100 lines of code.  A prolog one is nicely compact.  A ruby or p6 one too.  A p5 one, those hurt.  given a p5 pcre + subrules, it's trivial to do p6 re.  The hardest front-end issues have always been getting a p6re engine (or atleast p5re+subrules) for platform X, and having a p6 grammar.  Now STD hypotetically takes care of having a gramma

[04:14] <mncharity> p6 requires very little compiler wizziness.  Except for multimethod dispatch, types can be largely ignored, and the language treated as dynamically typed.  That said, there are a lot of details, and those remain largely undocumented.  Eg, given a few lines of pseudo code saying "here's how to bootstrap a p6 oo system", one can easily implemented.  Now one has to contemplate peering hopefully into Moose.

[04:15] *** cspencer joined
[04:15] <mncharity> anyway.  end of hand-waving.

[04:22] <mncharity> More concretely, the hard parts of redsix were () wrapping its pcre (because it's anon subs were slow and didn't compile away, motivating tossing a simple approach for a hairy one), () deriving a p6 grammar from the guts of pugs (because STD didn't exist), () writing the sandwich parser (because it was ill defined at the time, making it a research project), and () signatures and captures (either because the weren't spec'ed or I didn't

[04:22] <mncharity> oo came fairly cheaply (redsix was ruby).

[04:22] <mncharity> Also more concretely, the hard parts of the first perl5 backend were

[04:23] <Tene> mncharity: cut off after "or I didn't..."

[04:23] *** orafu joined
[04:23] <Tene> also a few other messages got cut off

[04:23] <mncharity> :(

[04:24] <mncharity> or I didn't understand them).

[04:24] <mncharity> define and grovel over ast's.

[04:24] <ingy> hi mncharity 

[04:24] <mncharity> any others?

[04:24] <mncharity> hi ingy :)

[04:24] <ingy> :)

[04:25] *** Botje left
[04:25] <Tene> "language's ability to define and grov..."   "takes care of having a gramma..."

[04:28] <mncharity> the hard parts of the first perl5 backend were () unpacking the serialized pugs ast, () getting a full ast (no oo - the killer).  fglock spent a lot of effort getting laziness working on p5.  and () getting oo spec'ed, and () getting p6 oo implemented (with I believe fighting p5 bugs and performance being the defining characteristics).

[04:29] <mncharity> language's ability to define and grovel over ast's.

[04:29] <mncharity>  takes care of having a grammar.

[04:29] *** Botje joined
[04:30] <mncharity> so to wrap up, note how every one of those obstacles goes away with "a usable p6 (correct-or-debuggable, generates usably fast code, oo, macros), and a language spec".

[04:33] <mncharity> pugs + oo + sufficient lambda folk to provide "debuggable", could have been a "usable p6".

[04:40] *** OuLouFu left
[04:45] <mncharity> all of which could be taken as a way of saying "p6 is neat!". :)    ruby 2 and python 3000 aren't the right analogies.  maybe rubinius and pypy.  the p6 implementation exercise is very sensitive to "getting the representation right".  repeated instances of 'to do task Y, if the language being used has feature Z, then it's a no-brainer.  but if it doesn't... shudder... piles of code and pain'.

[04:46] <mncharity> don't have multimethods? - enjoy visitors.  can't compile away abstractions? - pretend you are a compiler.

[04:47] <mncharity> anyway.

[04:48] <mncharity> don't have macros? - enjoy cut and paste.

[04:52] *** wtgee_ left
[04:57] <mncharity> oh, for the redsix difficulty list, also () using an evolving and buggy development version of ruby 1.9 (because ruby 1.8 doesn't have normal lexical scoping, the faking of which would have been even more pain (see "if the language being used has feature Z"...:)).

[04:57] *** wknight8111 left
[05:30] *** lisppaste3 left
[05:39] *** Kattana left
[05:40] *** lisppaste3 joined
[05:47] *** chacha_chaudhry joined
[05:52] *** alc joined
[06:03] <pugs_svn> r19680 | putter++ | [kp6] ruby backend: instance variables fleshed out.  run_tests thru t/kp6/28 pass.

[06:12] *** Jedai joined
[06:20] *** jjore joined
[06:25] *** mncharity left
[06:29] *** devogon joined
[06:45] *** cosimo_ joined
[06:48] *** thoughtpolice left
[07:04] *** cspencer left
[07:13] *** cosimo_ left
[07:21] *** Kattana joined
[07:27] *** IllvilJa joined
[07:40] *** jisom joined
[07:50] *** Aankhen`` joined
[08:02] *** riffraff joined
[08:30] *** ruz left
[08:31] *** chacha_chaudhry left
[08:31] *** chris2 joined
[08:33] *** `nipra joined
[08:45] *** iblechbot joined
[08:45] *** ruz joined
[09:02] *** BinGOs left
[09:04] *** ruz_ joined
[09:04] *** ruz left
[09:07] *** BinGOs joined
[09:18] *** jisom left
[09:19] *** kanru left
[09:26] *** riffraff left
[09:39] *** meteorjay left
[09:46] *** meteorjay joined
[10:19] *** IllvilJa left
[10:22] *** polettix joined
[10:28] *** njbartlett left
[10:35] *** masak joined
[10:47] *** bigpresh joined
[10:50] *** Botje left
[10:50] *** Botje joined
[10:59] *** kanru joined
[10:59] *** iblechbot left
[11:14] *** polettix left
[11:14] *** Aankhen`` left
[11:14] *** cognominal_ joined
[11:23] *** pmurias joined
[11:27] *** chris2_ joined
[11:29] <pmurias> avar: you have to have some parts of the runtime in the target language

[11:34] *** chris2 left
[11:55] *** Aankhen`` joined
[11:57] *** `nipra left
[11:59] *** ting joined
[12:01] *** njbartlett joined
[12:07] *** alc left
[12:12] *** mncharity joined
[12:30] <mncharity> It looks like script/kp6 -Cast fails for the following files: src/KindaPerl6/Grammar.pm src/KindaPerl6/Grammar/Quote.pm src/KindaPerl6/Grammar/Regex.pm src/KindaPerl6/Grammar/Term.pm src/KindaPerl6/Grammar/Token.pm .

[12:32] *** ebassi joined
[12:34] <pmurias> mncharity: looking

[12:38] *** rindolf joined
[12:39] <pmurias> they work, it's just perltidy which dosn't like the output

[12:42] *** iblechbot joined
[12:43] *** cmarcelo joined
[12:43] <pugs_svn> r19681 | putter++ | [kp6] created compiled/ast-kp6-mp6/, to make it easier to analyze the ast's needed for bootstrap.  Created by hand - it would be nice to have a make target for it.

[12:45] <pugs_svn> r19682 | putter++ | [kp6] created empty compiled/ruby-kp6-mp6/lib directory tree.

[12:49] <pugs_svn> r19683 | ruoso++ | [smop] All tests compile... some tests even pass, but most of them segfault for now...

[12:53] <ruoso> Failed 4/7 test scripts, 42.86% okay. 0/13 subtests failed, 100.00% okay.

[12:53] <ruoso> cool

[12:53] <ruoso> :P

[12:54] <ruoso> and it really seems that the segfaults are related to the fact that sm0p.pl is still not implemented...

[12:54] <ruoso> ./test/01_smop_lowlevel.t segfaults only when it was supposed to destroy the variable, which is when sm0p code should be executed...

[12:55] <ruoso> test/01 is ok in 4 of 6... and test/04 is ok in 7 of 9 :P

[12:56] *** mattz left
[12:57] *** mattz joined
[12:57] *** blindfish joined
[12:58] <pugs_svn> r19684 | ruoso++ | [smop] one less segfault... :)

[13:00] *** macae joined
[13:00] <ruoso> SMOP_LOWLEVEL_MEM_TRACE is effectively able to show memory leaks :) :) :) :)

[13:03] <ruoso> lunch &

[13:07] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop_hacking has a quick tour on comiling and running the tests...

[13:07] <lambdabot> Title: SMOP Hacking / Perl 6

[13:13] *** chris2_ left
[13:33] <pugs_svn> r19685 | putter++ | [kp6] ruby-kp6-mp6/kp6_runtime.rb: less ghastly (but still ugly) approach to instance variable initialization.

[13:34] *** blindfish left
[13:35] <pugs_svn> r19686 | putter++ | [kp6] tweak 19685.

[13:36] <mncharity> pmurias: ah, great.  thanks.

[13:41] *** zamolxes joined
[13:41] <mncharity> If anyone would like to set up the infrastructure so one can  make mumble, or script/mumble, or whatever is appropriate, to create the compiled/ruby-kp6-mp6/lib/*.rb files, that would be great.  And whatever thing one then runs to hand it 'say 3' and watch it explode in ruby errors.  And document it in docs/ruby_backend.txt. :)

[13:41] <mncharity> that would be most helpful.  thanks.

[13:44] <mncharity> pmurias: re... there was something I wanted to mention or ask you... blank brain.  maybe later.

[13:44] <mncharity> be back this evening, or over the weekend. cheers. &

[13:44] *** ispy_ joined
[13:44] *** mncharity left
[13:45] *** lyokato_ left
[13:46] <rindolf> Hi ispy_ 

[13:54] *** zf8 joined
[13:54] *** iblechbot left
[13:54] *** zf8 left
[13:56] <ispy_> yo

[13:58] *** jhorwitz joined
[14:01] *** zamolxes left
[14:02] *** zamolxes joined
[14:04] *** rindolf left
[14:08] *** Caelum joined
[14:16] *** Lorn joined
[14:28] *** cspencer joined
[14:37] *** macae left
[14:40] <agentzh> howdy!

[14:40] *** devogon left
[14:40] *** devogon joined
[14:40] <cspencer> if i define a block like so:  my $x = { say "Arg was: " ~ $_ };

[14:41] <cspencer> will "$_" be bound to arguments to the block?

[14:41] <cspencer> ie) if i call it as: $x(2)

[14:41] <cspencer> does $_ get set to 2?

[14:43] <agentzh> cspencer: i doubt it.

[14:43] <cspencer> hmmm ok

[14:44] <agentzh> ?my $x = { say "Arg was: " ~ $_ }; $x(2);

[14:44] <lambdabot> Maybe you meant: . ? @ bf ft id map msg pl rc v wn

[14:44] <agentzh> oh...

[14:44] <agentzh> forgot the syntax...

[14:45] <agentzh> cspencer: $func = { .print if $^a eq $^b } 

[14:45] <agentzh> $^a and $^b are two arguments

[14:45] <agentzh> *parameters

[14:45] <agentzh> cspencer: and $func = -> $a, $b { .print if $a eq $b };

[14:45] <cspencer> oh, ok. that looks right now. :)

[14:45] <agentzh> ie. the pointy block syntax

[14:45] <agentzh> cspencer: see S04 for more info ;)

[14:46] <cspencer> how would that differ from:

[14:46] <cspencer> my @result = grep { ($_ % 2) }, @list;

[14:46] <cspencer> is the block being passed into grep parsed differently?

[14:47] <agentzh> cspencer: "A bare closure without placeholder arguments that uses $_ (either explicitly or implicitly) is treated as though $_ were a formal parameter:"

[14:47] <agentzh> cspencer: okay, it seems i was wrong ;)

[14:47] <agentzh> sorry about that ;)

[14:47] <cspencer> was that in S04 too?

[14:47] <agentzh> yup

[14:47] <cspencer> that's alright :)

[14:48] <cspencer> which section was that in?

[14:48] <agentzh> cspencer: http://perlcabal.org/syn/S04.html#The_Relationship_of_Blocks_and_Declarations

[14:48] <lambdabot> Title: S04, http://tinyurl.com/y5beho

[14:48] <cspencer> great, thank you!!

[14:48] <agentzh> you're welcome ;)

[14:53] *** sri_work joined
[15:00] *** ofer0 joined
[15:05] <pmurias> perl6: ?my $x = { say "Arg was: " ~ $_ }; $x(2);

[15:05] <exp_evalbot> kp6: OUTPUT[syntax error at position 0, line 1 column 0:␤?my $x = { say "Arg was: " ~ $_ }; $x(2)␤^ HERE␤]

[15:05] <exp_evalbot> ..pugs: OUTPUT[Arg was: 2␤]

[15:05] <exp_evalbot> ..p6: No output (you need to produce output to STDOUT)

[15:07] *** exp_evalbot left
[15:07] *** exp_evalbot joined
[15:15] *** stevan_ joined
[15:25] *** turrepurre joined
[15:41] *** alester joined
[15:43] *** dmq joined
[15:47] *** pen1 joined
[15:51] <mofino> Are we there yet?

[15:52] * mofino goes back to watching Dora 

[15:53] <moritz_> mofino: where?

[15:53] <mofino> The road to perl6

[15:54] <moritz_> yes, we're there (on the road)

[15:54] <mofino> but are we there yet?

[15:54] <mofino> (no)

[15:54] <mofino> heh

[15:54] <mofino> you ruined my joke, you know

[15:54] <mofino> but it's ok, it was bad to begin with

[15:56] <moritz_> it's a question we read too often here

[15:56] <mofino> haha

[15:56] <mofino> I bet

[15:56] *** pen1 is now known as penk_

[15:57] <mofino> perhaps the answer is to make perl6 less exciting

[15:57] <mofino> that way people won't anticipate it so much

[15:58] <moritz_> but that's not -Ofun

[15:59] <mofino> i think it's impossible, perl6's awesome comes from the core

[15:59] <moritz_> we work on Perl 6 because it is exicting, and we want it to be exciting

[15:59] <mofino> hehe i know

[15:59] <mofino> I just can

[15:59] <mofino> I just can't wait

[15:59] <mofino> going to be fantastic

[16:05] *** barney joined
[16:15] *** cspencer left
[16:17] *** rdice joined
[16:18] *** jjore left
[16:21] *** Lorn left
[16:22] *** iblechbot joined
[16:47] <ruoso> mofino, do you program C?

[16:48] <ruoso> (even if with very little experience)

[16:48] <mofino> yeah I do

[16:48] <mofino> well, I can

[16:49] <mofino> with much rust, of course

[16:58] *** masak left
[17:01] *** meppuru joined
[17:01] *** meppuru is now known as meppl

[17:04] *** ruz_ left
[17:05] <ruoso> mofino, want to help in smop?

[17:05] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop

[17:05] <lambdabot> Title: SMOP / Perl 6

[17:05] <mofino> hmm

[17:07] <mofino> looks complex!

[17:07] <ruoso> it's as simple as I could get it :)

[17:07] <mofino> then we have a bit of problem...

[17:07] <mofino> ;)

[17:09] <pugs_svn> r19687 | ruoso++ | [smop] adding a proper format to the "leaking variable" message in smop_lowlevel.

[17:12] <mofino> I'll check this out though

[17:16] *** ahmadz joined
[17:17] *** ahmadz left
[17:20] <pugs_svn> r19688 | ruoso++ | [smop] give a compilation warning in sm0p, while it still does not generate C code...

[17:21] <moritz_> @tell fglock I finally fixed the "Can't locate Text/Table.pm in @INC" bug in the irclogs, thanks for reporting

[17:21] <lambdabot> Consider it noted.

[17:25] <pugs_svn> r19689 | moritz++ | [irclog] fix search link on channel index page

[17:26] *** penk_ left
[17:26] <pugs_svn> r19690 | moritz++ | [irclog] previous commit broke everything else, fixed that

[17:27] <pugs_svn> r19691 | moritz++ | [irclog] another template knit

[17:28] <moritz_> three commits needed for one small fix - d'oh

[17:28] *** pen1 joined
[17:29] *** CookieDingler joined
[17:29] <CookieDingler> hello

[17:30] <moritz_> hi CookieDingler 

[17:30] <CookieDingler> hi Moritz

[17:31] <pugs_svn> r19692 | ruoso++ | [smop] sm0p.pl now has a placeholder method with the code to be translated as argument.

[17:32] <CookieDingler> it's the first time i come on this chan, so first i'd like to say thanks to everybody for the work made on perl6

[17:32] <moritz_> whoa, somebody who's first question is _not_ "when will it be ready?" ;-)

[17:32] <moritz_> CookieDingler++

[17:33] <CookieDingler> heh, well i've read the various FAQs and i consider it will be ready when it will be ready

[17:33] <moritz_> aye

[17:33] <CookieDingler> i'm quite impatient though

[17:34] <CookieDingler> but i LOVE perl, so let it takes whatever time it takes

[17:34] <moritz_> you can help if you want

[17:34] <ruoso> CookieDingler, we can always use some help

[17:34] <ruoso> :)

[17:35] <CookieDingler> i'm no good with programming i mainly use perl or assembly language (various CPU), it's not the time for optimisations

[17:36] <moritz_> TimToady: could you please update /topic to new evalbot syntax (s/\?eval/pugs: /)? you're the only channel op atm ;)

[17:40] <Tene> ?eval [~] <m oo se>

[17:40] <Tene> HAY IT DOESNT WORK

[17:41] <Tene> Hm.  Do we still "do Haskell, too"?

[17:42] <moritz_> pugs: [~] <m oo se>

[17:42] <exp_evalbot> RESULT["moose"]

[17:42] <moritz_> Tene: depends on your notion of "we"

[17:42] <moritz_> rakudo: say "hi"

[17:42] <exp_evalbot> OUTPUT[hi␤]

[17:44] *** meppl left
[17:45] *** meppl joined
[17:45] <CookieDingler> ruoso, i just tried parrot 0.5.2 today, and it's a really an interesting platform. i've looked at the compiled sources a little. i think i can remove a BUNCH ("un troupeau", a lot of, in french) of branches for the cpu. Sadly i don't think it's the time to implement that kind of stuff. Perhaps later, and i'll be around ;-) i know quite well the x86 32/64 architecture and the main OSes (win/lin) and i'd be happy to help on corn

[17:45] <CookieDingler> er cases.

[17:45] <Tene> moritz_: enough "we"s for it to stay in the channel topic?  I haven't seen haskell mentioned in quite a while.

[17:48] <ruoso> CookieDingler, considering your processor lowlevel background... could you please take a look at smop architecture to spot future rooms for optimizations?

[17:48] <moritz_> Tene: not enough, probably :/

[17:48] * PerlJam starts a campaign for gratutious mention of haskell on #perl6

[17:58] <Botje> [+] (1..5)

[17:58] <Botje> argh

[17:58] <Botje> pugs: [+] (1..5)

[17:58] <exp_evalbot> RESULT[15]

[17:59] <Botje> pugs: (5,10,42) >>+ 1

[17:59] <exp_evalbot> OUTPUT[*** ␤    Unexpected ">>+"␤    expecting operator␤    at /tmp/s0rqrQeFP3 line 1, column 11␤]

[17:59] <Botje> pugs: (5,10,42) >>+<< 1

[17:59] <exp_evalbot> RESULT[(6, 11, 43)]

[18:00] <CookieDingler> ruoso, SMOP?

[18:02] <CookieDingler> ruoso, optimizations are relative to one processor

[18:03] <CookieDingler> ruoso, are you talking about "Small Matter of Programming" (SMOP) from wikipedia?

[18:09] <ruoso> CookieDingler, http://www.perlfoundation.org/perl6/index.cgi?smop

[18:09] <lambdabot> Title: SMOP / Perl 6

[18:10] <ruoso> CookieDingler, I mean "room for optimization" in general... not specific optimizations...

[18:21] *** ebassi left
[18:25] *** zamolxes left
[18:28] *** TimToady changes topic to: http://pugscode.org | nopaste: http://sial.org/pbot/perl6 | pugs: [

[18:28] <TimToady> oops, finger slipped

[18:29] *** TimToady changes topic to: http://pugscode.org/ | nopaste: http://sial.org/pbot/perl6 | pugs: [~] <m oo se> (or rakudo:, kp6:, smop: etc.) || We do Haskell, too | > reverse . show $ foldl1 (*) [1..4] | irclog: http://irc.pugscode.org/

[18:30] <TimToady> I think /topic should have a way of just replacing one bit of it...

[18:31] <TimToady> a bot with oper privs could handle s/foo/bar/ maybe, if it's not insecure...

[18:33] <ruoso> TimToady, #p5p and #moose have an op bot that "trusts" certain people...

[18:33] <ruoso> it's quite smart...

[18:33] <TimToady> and if a p6 bot, could say s:2nd/\|.*?\|/xxx/

[18:34] <ruoso> http://www.perlfoundation.org/perl6/index.cgi?smop_sm0p_language updated... now it explains some rules on the preprocessing...

[18:34] <lambdabot> Title: SMOP sm0p Language / Perl 6

[18:36] <TimToady> 'course, could define my own irssi script to do that maybe...

[18:36] <TimToady> in my Copious Free Time (where Copious is taken as an absolute value :/ )

[18:40] <CookieDingler> ruoso, if i understand well, SMOP is just a quick way to talk about pointers? for what i know about compilers, you've got 3 phases: parsing, type casting, and translation to another language on reguard to the cpu architecture and the OS (let it be asm for a particular cpu).

[18:40] *** IllvilJa joined
[18:41] <ruoso> CookieDingler, in a sense SMOP is just an architecture for anything...

[18:41] <ruoso> which basically means that the type casting is not needed...

[18:41] <CookieDingler> i'm curious to see how a vm like perl could relate to a cpu?

[18:42] <ruoso> well... you can watch it with perl5

[18:42] *** manfred joined
[18:43] <CookieDingler> well, you've got probably more knowledge than me about vm, and of course if the programmer is good type casting isn't necessary... yet someone have to show me that aptitude....

[18:44] <CookieDingler> after all type casting is the same as "use warnings"... (or i'm missing something?)

[18:45] <ruoso> not really...

[18:46] <ruoso> type casting means to know the layout of a value

[18:46] <ruoso> and smop is all about delaying that knowledge by using the "Responder Interface" concept...

[18:47] <CookieDingler> TimToady: i'm really happy to see you are online. I'd like to say a "BIG" thanks for perl, i hope you are well, and i hope you'll help us to get perl6 be the next-gen language

[18:47] <ruoso> Perl 6 already is the next-gen language... at least until it's released... then it'll be this-gen's language :P

[18:48] <CookieDingler> ruoso, i'd like to help perl6

[18:49] <CookieDingler> i'm not quite sure it's the next gen language, but it's one i like

[18:49] <CookieDingler> i learned assembly programming 20 years ago

[18:50] <CookieDingler> and perl is the only thing/jewel that let me do that quickly

[18:50] *** ludan joined
[18:50] <ruoso> CookieDingler, well... you you program haskel, you can help pugs... if you program Perl 5 you can help kp6, if you program ruby you can help kp6-ruby, if you program lisp you can help kp6-lisp, if you program C you can help smop and parrot (did I forgot to mention anything?) :)

[18:51] <ruoso> s/you you/if you/

[18:51] <ludan> hi

[18:51] <ruoso> ludan, hi

[18:57] <mofino> CookieDingler, p6 seems to be pretty "next gen"

[19:01] <ruoso> home &

[19:01] *** ruoso left
[19:19] *** ispy_ left
[19:30] *** jjore-w joined
[19:35] *** japhb left
[19:44] *** orafu left
[20:00] *** Jamtech joined
[20:05] *** drrho joined
[20:17] *** Limbic_Region joined
[20:18] *** CookieDingler left
[20:18] *** rindolf joined
[20:33] *** drrho left
[20:50] *** thoughtpolice joined
[20:55] *** rindolf left
[21:05] *** Aankhen`` left
[21:28] *** thoughtp1lice joined
[21:35] *** pmurias left
[21:39] *** thoughtpolice left
[21:43] *** manfred left
[22:07] <pugs_svn> r19693 | lwall++ | s/eval/skip/ because rakudo doesn't do eval yet

[22:13] *** bigpresh left
[22:17] *** barney left
[22:20] *** iblechbot left
[22:26] *** rdice left
[22:29] *** cosimo_ joined
[22:34] *** cmarcelo left
[22:37] <pugs_svn> r19694 | lwall++ | radix conversions of numbers should use decimal string representation

[22:41] *** jhorwitz left
[22:44] <pugs_svn> r19695 | lwall++ | remove unnecessary rakudo tries

[22:57] <pugs_svn> r19696 | lwall++ | [fudge] use block syntax of try rather than function call syntax

[23:00] *** Jamtech left
[23:03] *** thoughtp1lice is now known as thoughtpolice

[23:12] *** alester left
[23:13] *** devogon left
[23:13] *** devogon joined
[23:13] *** devogon left
[23:25] *** justatheory joined
[23:27] *** thoughtpolice left
[23:35] *** devogon joined
[23:35] *** devogon left
[23:35] *** devogon joined
[23:36] *** devogon left
[23:37] *** devogon joined
