[00:10] *** kulp_ joined
[00:10] *** kulp left
[00:16] *** justatheory left
[00:22] *** kulp_ left
[00:27] *** alester left
[00:28] *** alester joined
[00:32] <speckbot> r14592 | pmichaud++ | typo fix in S02

[00:34] <pmichaud> TimToady++     I _like_ the new adverb approach.

[00:34] *** alester left
[00:35] *** Ontolog left
[00:36] *** alanhaggai joined
[00:45] *** jhorwitz left
[00:52] <pmichaud> std:  my $foo;   ::($foo)::handler()

[00:52] <p6eval> std 22560: OUTPUT[parsed␤]

[00:55] *** hercynium joined
[00:56] *** alester joined
[00:59] *** eternaleye joined
[01:06] *** alanhaggai_ joined
[01:07] *** alanhaggai left
[01:07] *** alanhaggai_ is now known as alanhaggai

[01:16] *** BinGOs_ joined
[01:22] *** wknight8111 left
[01:29] *** ab5tract left
[01:30] *** BinGOs left
[01:41] <TimToady> pmichaud: well, it does make life simpler for us  :)

[02:05] <meppl> good night

[02:08] *** meppl left
[02:11] *** araujo left
[02:17] *** bjakb left
[02:21] *** alester left
[02:27] *** Lorn joined
[02:39] *** Limbic_Region left
[03:05] *** cls_bsd left
[03:06] *** justatheory joined
[03:11] *** Lorn left
[03:33] *** Bzek joined
[03:40] <pmichaud> TimToady: so, what happened to "Perl Philosophy is simply to torment the implementors on behalf of the user"?  ;-)

[03:42] *** alanhaggai_ joined
[03:42] <pmichaud> although, I'm sure Perl will come up with even better torments.

[03:49] *** alanhaggai left
[03:49] *** z80ASM joined
[04:07] *** alanhaggai_ is now known as alanhaggai

[04:08] <TimToady> well, we *do* have to implement the changes, it's just simpler over the long term

[04:10] <rakudo_svn> r31845 | pmichaud++ | [rakudo]:  remove perl.t test for now until it can be re-fudged.

[04:13] <pmichaud> I'm eager to see the STD.pm changes for it :-)

[04:14] *** justatheory left
[04:17] *** alester joined
[04:19] *** alanhaggai_ joined
[04:21] *** alanhaggai left
[04:34] <TimToady> just about done, actually

[04:34] *** Alias_ joined
[04:36] <TimToady> assuming it works...

[04:37] <TimToady> which, of course, it doesn't

[04:38] <TimToady> but the general plan is to move adverb recognition into the infixish alternation so we don't pay for it as an extra check

[04:39] <TimToady> it returns it to EXPR as an infix labelled fake, and if EXPR notices a fake infix (after reducing), it shoves it into the appropriate node 

[04:39] <TimToady> then tries again for an infix

[04:43] <rakudo_svn> r31846 | pmichaud++ | [rakudo]:  Adjust $?NS handling.

[04:46] *** sri_work joined
[04:47] <TimToady> think I got it, but running the test suite

[04:53] *** sail0r joined
[04:54] *** z80ASM left
[04:55] *** sail0r left
[05:00] *** zamolxes left
[05:05] *** Ontolog joined
[05:08] *** Psyche^ joined
[05:11] *** sail0r joined
[05:11] *** sail0r left
[05:19] *** Patterner left
[05:19] *** Psyche^ is now known as Patterner

[05:24] *** alanhaggai_ is now known as alanhaggai

[05:32] *** alester left
[05:54] *** BinGOs_ left
[06:06] *** Psyche^ joined
[06:16] *** Patterner left
[06:16] *** Psyche^ is now known as Patterner

[06:19] *** azawawi joined
[06:31] *** azawawi left
[06:35] *** pbuetow joined
[06:35] <rakudo_svn> r31855 | pmichaud++ | [rakudo]:  Bring namespace parsing into closer alignment with STD.pm.

[06:35] <rakudo_svn> r31855 | pmichaud++ | This also adds the 'parse_name' method to Perl6::Compiler, and allows

[06:35] <rakudo_svn> r31855 | pmichaud++ | us to eliminate some inline PIR from actions.pm.

[06:39] <moritz_> pmichaud: please don't blindly trust p6eval's std: target - it sometimes reports false positives :(

[06:41] *** pmurias joined
[06:44] <pmurias> is the new adverb form considered better or is it choosen due to "ease" of implementation

[06:45] <moritz_> pmurias: I think it's related to our discussion on built-in test operators which work as adverbs

[06:45] <pmichaud> moritz_: it's just a first approximation for me

[06:45] <moritz_> http://irclog.perlgeek.de/perl6/2008-10-09#i_613602 an onwards

[06:45] <lambdabot> Title: IRC log for #perl6, 2008-10-09

[06:45] <pmichaud> if std.pm comes back with "false" then I can stop looking for a bit

[06:45] <pmichaud> pmurias: ease of implementation wasn't really the consideration, I don't think

[06:46] <pmichaud> it does help with implementation a bit, but that's not what led us to it.

[06:50] *** masak joined
[06:50] <pugs_svn> r22561 | lwall++ | [STD] move adverb parsing into infixish and EXPR with loose_unary prec

[06:53] <TimToady> it's really more about sanity than ease of implementation

[06:53] <masak> sanity++

[06:54] <masak> TimToady: "Note also that existence and deletion are now simply adverbs on subscript operators." what were they before?

[06:54] <TimToady> %hash.:delete<key>

[06:54] <masak> ah, right.

[06:54] <masak> aye, the current one is arguably better

[06:55] <TimToady> but I think it's very valuable to keep the subscript looking the same for rvalues and delete/exist

[06:55] <masak> aye

[06:55] <TimToady> it also keeps those words free for use by users

[06:56] <masak> Perl 6: fewer reserverd words than you think

[06:56] <moritz_> sub if { say "I'm crazy" }

[06:57] <masak> if if { if }

[06:58] <moritz_> you're evil, I love you ;)

[06:58] <masak> :)

[06:58] <masak> rakudo: sub if { 1 }; if if { say "whoa" }

[06:58] <p6eval> rakudo 31855: RESULT[1]

[06:59] <masak> that's not right.

[06:59] <moritz_> rakudo: sub if { 1 }; if if() { say "whoa"; }

[06:59] <p6eval> rakudo 31855: OUTPUT[whoa␤]

[06:59] <masak> whoa.

[06:59] <moritz_> now *that's* wright

[06:59] <masak> what's the difference?

[06:59] <moritz_> if -> if()

[06:59] <masak> semantically, smartass

[06:59] <TimToady> pugs: sub if { 1 }; if if { say "whoa" }

[06:59] <p6eval> pugs: OUTPUT[*** ␤    Unexpected "if"␤    expecting "=" or conditional expression␤    postfix op␤    at /tmp/88WOMSkORo line 1, column 18␤]

[07:00] <moritz_> masak: I don't know if 'if if' is allowed, but if() forced the second to be interpreted as a sub call

[07:00] <moritz_> which is why you can't say qw(a b c); any more

[07:00] <masak> my questions is "why does it matter?", I guess

[07:01] <masak> why wouldn't 'if' be treated as a sub call here?

[07:01] <masak> (the second one)

[07:01] <moritz_> std: if if { 1 }

[07:01] <p6eval> std 22561: OUTPUT[parse failure␤]

[07:02] <moritz_> std: sub if { 1 }; if if { 1 }

[07:02] <p6eval> std 22561: OUTPUT[parsed␤]

[07:02] <masak> it parses, but what does it mean? :)

[07:02] <pmurias> TimToady: is it worth converting mildew from a rule_name() style recursive traversal to a VAST::emit_m0ld one?

[07:02] <TimToady> currently STD parses it as if() if { say "whoa" }, which is probably not right

[07:03] <TimToady> pmurias: no kloo

[07:03] <TimToady> VAST is still mutating rather rapidly

[07:04] <masak> ah. didn't even see that possibility. that's what you get for defining if() :)

[07:05] <TimToady> it ought to prefer the statement_control there, not sure why it didn't

[07:05] *** BinGOs joined
[07:06] * moritz_ sense the need for another test, but has to depart soon to his doom (aka diploma exams)

[07:07] <moritz_> s/to/for/

[07:07] <TimToady> well, have the appropriate amount of fun

[07:07] <moritz_> thanks ;)

[07:13] *** pbuetow left
[07:19] <masak> moritz_: good luck on the exams!

[07:19] <masak> after that, you'll learn more about the Spin Hall effect and then tell me ;)

[07:24] *** orafu left
[07:31] *** kanru left
[07:32] *** kanru joined
[07:32] *** viklund joined
[07:35] <moritz_> masak: that's only after the second exam ;/

[07:35] <masak> I realize that. good luck with all of 'em.

[07:36] *** iblechbot joined
[07:36] <moritz_> now I have to wait 20 minutes, good opportunity to go mad ;)

[07:37] <masak> you're in good company for that ;)

[07:38] <masak> (we're developing Perl 6, at least that takes a certain strain of non-mainstream-ness)

[07:51] *** meppl joined
[07:54] *** cosimo joined
[07:54] <masak> the link under the heading "caller" in S29 is broken.

[07:54] <masak> http://perlcabal.org/syn/S29.html

[07:54] <lambdabot> Title: S29

[07:54] <masak> what's generating that page?

[07:55] *** kanru left
[07:55] *** alanhaggai left
[07:56] <TimToady> well, source is from pugs/docs/Perl6/Spec/Functions.pod

[07:57] <TimToady> don't know what's doing the formatting to html

[07:57] <masak> nothing wrong with the source

[07:57] <masak> but the formatter seems to believe in a no-longer-extant CPAN package

[07:58] <pugs_svn> r22562 | lwall++ | [gimme5,STD] switch exists and delete to new form

[08:00] *** kanru joined
[08:02] <masak> hm, who likely knows which formatter is generating the S?? documents in perlcabal.org/syn/ ?

[08:03] *** elmex joined
[08:06] *** [particle]1 joined
[08:22] *** [particle] left
[08:24] *** smtms left
[08:54] *** jferrero joined
[09:05] <moritz_> masak: tools/smartlinks.pl

[09:06] <masak> moritz_: dz

[09:07] *** schmalbe joined
[09:12] <masak> moritz_: are you sure? it's not a smartlink I'm talking about, but an L<> link to an external resource.

[09:14] <moritz_> masak: smartlinks.pl turns the *pod files into the *.html that are displayed on perlcabal.org/syn/

[09:14] <masak> oki

[09:14] <masak> good.

[09:14] <moritz_> it has a variety of options

[09:14] * masak will peruse it more when he has time

[09:14] <masak> I don't see any quick way to fix the link

[09:15] *** drbean joined
[09:21] <pmurias> TimToady: what are zygs?

[09:23] <masak> Take off every 'ZYG'!!

[09:24] * pmurias is even more confused

[09:26] <masak> pmurias: sorry, that was an obscure cultural reference. please ignore ad lib.

[09:33] *** [particle]1 left
[09:34] *** [particle] joined
[09:37] *** tomyan joined
[09:48] *** [particle]1 joined
[10:00] *** justatheory joined
[10:01] *** smtms joined
[10:02] *** bjakb joined
[10:05] *** Ontolog left
[10:07] *** [particle] left
[10:13] *** cls_bsd joined
[10:16] *** viklund left
[10:16] *** zamolxes joined
[10:28] *** riffraff joined
[10:28] <riffraff> hi

[10:29] <masak> riffraff: y0

[10:32] *** meppl left
[10:38] *** donaldh joined
[10:39] *** ihrd joined
[10:42] *** dzema joined
[10:46] <masak> rakudo: say "welcome, ihrd and dzma :)"

[10:46] <p6eval> rakudo 31857: OUTPUT[welcome, ihrd and dzma :)␤]

[10:46] <masak> oops. s/dzma/dzema/

[10:51] *** araujo joined
[10:53] <masak> perl6: {"OH HAI".$^action}.(&say)

[10:53] <p6eval> elf 22562: OUTPUT[Parse error in: /tmp/Jlbr4xmnQE␤panic at line 1 column 19 (pos 19): Statement not terminated properly␤WHERE: {"OH HAI".$^action}.(&say)␤WHERE:                   /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:355:in `eat_terminator'␤  STD_red/std.rb:269:in `block

[10:53] <p6eval> ..i...

[10:53] <p6eval> ..pugs: OUTPUT[*** Cannot bind to non-existing variable: "$action"␤    at /tmp/9ex56TGViX line 1, column 1 - line 2, column 1␤]

[10:53] <p6eval> ..rakudo 31857: OUTPUT[OH HAI␤]

[10:53] *** tomyan left
[10:53] *** tomyan joined
[10:54] <masak> should the above really work, or is it a coincidence in Rakudo that it does?

[11:03] <pmurias> perl6: {"OH HAI".$^action}.(sub($arg) {say ">>>$arg<<<"})

[11:03] <p6eval> elf 22562: OUTPUT[Parse error in: /tmp/goNpxUy10u␤panic at line 1 column 19 (pos 19): Statement not terminated properly␤WHERE: {"OH HAI".$^action}.(sub($arg) {say ">>>$arg<<<"}␤WHERE:                   /\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:355:in `eat_terminator'␤ 

[11:03] <p6eval> ..STD_red...

[11:03] <p6eval> ..pugs: OUTPUT[*** Cannot bind to non-existing variable: "$action"␤    at /tmp/Ni2Ohkwuc7 line 1, column 1 - line 2, column 1␤]

[11:03] <p6eval> ..rakudo 31857: OUTPUT[>>>OH HAI<<<␤]

[11:04] *** rff joined
[11:08] *** [particle] joined
[11:20] *** riffraff left
[11:21] *** kst left
[11:21] *** kst joined
[11:25] *** tomyan left
[11:25] *** [particle]1 left
[11:30] *** donaldh left
[11:32] *** alanhaggai joined
[11:33] <moritz_> masak: I think it should work

[11:34] *** pmurias left
[11:38] *** pmurias joined
[11:42] *** dzema left
[11:46] *** ashizawa joined
[11:48] *** kst left
[11:48] *** kst joined
[12:10] *** MMnet05 joined
[12:12] *** kst left
[12:12] *** kst joined
[12:13] *** MMnet05 is now known as DJ-DONGDOT

[12:18] *** BinGOs left
[12:18] *** BinGOs joined
[12:21] *** DJ-DONGDOT left
[12:26] *** ihrd left
[12:37] *** kst left
[12:38] *** kst joined
[12:46] *** zamolxes left
[12:49] *** z80ASM joined
[13:01] *** kst left
[13:01] *** kst joined
[13:06] *** Lorn joined
[13:15] *** jan_ left
[13:18] *** ihrd joined
[13:18] *** schmalbe left
[13:27] *** rff left
[13:29] *** jhorwitz joined
[13:46] <pmurias> TimToady: what would be usefull in AST is some way to retrive the orginal Match object for a given node or at least the .from and .to information to set the line information for error messages

[13:47] *** ruoso joined
[13:49] *** TJCRI joined
[13:52] <pmurias> ruoso: hi

[13:53] <ruoso> hi pmurias 

[13:57] *** kst left
[13:57] *** kst joined
[14:01] *** jferrero left
[14:13] <pmurias> ruoso: are you blocking on anything?

[14:14] *** alester joined
[14:19] <ruoso> pmurias, not really.. I'm just getting all my ideas straight on how to implement multi sub dispatch

[14:19] <pugs_svn> r22563 | pmurias++ | [mildew] switch from a simple recursive traversal to viv and VAST and traversing with emit_m0ld

[14:20] *** PZt left
[14:27] *** z80ASM left
[14:27] <pmurias> ruoso: i think we will need signature comparison, to choose the most specific variant

[14:28] <ruoso> pmurias, yeah... I've been trying to figure out an easy way to do that...

[14:29] <pmurias> it's hard to compare closures... so i suppose we need a Signature with some structure

[14:29] <ruoso> or some more specific API

[14:30] *** Pzt3 joined
[14:30] <ruoso> maybe $signature[0] gets the type of the first parameter...

[14:30] <ruoso> and $signature{foo} gets the type of the name parameter 'foo'

[14:31] <ruoso> (doing it in terms of API instead of structure is more polymorphic... that's important, since Signature is not a native type)

[14:32] <pmurias> the API sounds sensible

[14:34] <ruoso> too bad for the AdhocSignature... :(

[14:36] <pmurias> we need to handle slurpy named and positionals too

[14:37] <pmurias> and sub foo(

[14:37] <pmurias> |$capture) {...}

[14:38] *** jan_ joined
[14:40] <ruoso> sub foo(|$capture) is already implemented 

[14:40] <ruoso> by a lowlevel one

[14:40] <ruoso> bindcapture

[14:40] <ruoso> which is actually :(|$_)

[14:41] <ruoso> pmurias, hmmm... slurpy named and positionals looks like trouble...

[14:42] <ruoso> how to check the type of a slurpy without causing the eager evaluation?

[14:42] <moritz_> ruoso: lazily, if possible.

[14:42] *** hercynium left
[14:42] <moritz_> ruoso: as long as you have no tie-breakers in slurpy params that shouldn't be a problem

[14:43] <ruoso> so we need to make very clear that (Array of Int *@a) causes eager evaluation

[14:44] <moritz_> for most dispatches it should be enough to evaluate the first item of @a

[14:45] <moritz_> but perhaps you have to attach type checks to @a

[14:45] <moritz_> that are run when @a's generator produces more items

[14:52] <pmurias> ruoso: it think it would be ok if we didn't support (typed) slurpies in the S1P::Signature

[14:52] <ruoso> typed slurpies maybe... but we do need slurpies

[14:55] *** jhorwitz left
[15:04] *** Exodist joined
[15:04] *** apeiron left
[15:11] *** apeiron_ joined
[15:30] *** zamolxes joined
[15:33] <TimToady> pmurias: I tend to use "zygotes" for "kids" because it sorts later in the yaml output :)

[15:34] <TimToady> and yes, there needs to be match info in the ast, but I was leaving it out for the moment so that I didn't have to read through *both* trees intermingled

[15:34] <TimToady> maybe we could have options on ast generation

[15:34] <[particle]> yes please!

[15:35] <moritz_> if so, maybe I finally manage to write a syntax hilighter based on it ;)

[15:35] <TimToady> gah, users!!!

[15:36] <moritz_> heh ;)

[15:37] <moritz_> TimToady: think of it as a "visual aid to evaluate correctness of the AST"

[15:39] <TimToady> but users are even pickier than a Haskell compiler, and less consistent!

[15:40] <moritz_> but users don't complain at compile time ;)

[15:41] * PerlJam was wondering what zygs where in viv's output

[15:41] <pmurias> moritz_: that's a bad thing

[15:41] *** ofer joined
[15:42] <[particle]> users don't complain at runtime, either--only after it doesn't run

[15:43] <TimToady> yes, they tend to harbor unthrown exceptions

[15:43] <TimToady> which is probably the solution to binding lazy lists to typed slurpies

[15:44] <TimToady> the type is a promise to turn type mismatches into unthrown exceptions

[15:44] <TimToady> it's not a promise to catch all mismatches at bind time

[15:44] <ofer> Heya Larry!

[15:44] <TimToady> howdy doody

[15:47] <pmurias> TimToady: what is --p6 supposed to output? identical p6 or clearer p6 or properly indented p6?

[15:47] *** eternaleye left
[15:47] <[particle]> hrmm

[15:48] <moritz_> or uglier p6? ;-)

[15:50] *** ihrd left
[15:51] <TimToady> the idea was to spit out identical to make sure I hadn't lost an info

[15:51] <TimToady> which means I need to attach whitespace info as well somehow, if only by ref to the _ array

[15:51] <TimToady> *any info

[15:59] <pmurias> and --p5 is supposed to spit out perl 5 "good enough" to run STD?

[16:03] <TimToady> initially it's supposed to do everything gimme5 does

[16:03] <TimToady> only correctly

[16:04] *** alanhaggai left
[16:04] <pugs_svn> r22564 | lwall++ | [viv] add --pos option

[16:06] <TimToady> I figured there wasn't much point in working on --p5 before --p6 works, since the ast will keep mutating till that happens

[16:07] <TimToady> and making --p6 work involves not forgetting anything, which is a self-imposed requirement these days

[16:07] <TimToady> (after having to make p5 not forget via MAD)

[16:07] <TimToady> I'd rather not forget up front rather than having to unforget later

[16:14] <moritz_> TimToady: is there a good reason for using a hand-rolled command liine parser instead of GetOpt::Long?

[16:22] <[particle]> i believe he knows how to use the hand-rolled code without reading any pod :)

[16:25] <TimToady> I enjoy rolling my own. :)

[16:26] <PerlJam> TimToady: admit it.  you're obsessive compulsive about certain things (command lines being one)

[16:26] <PerlJam> :-)

[16:27] <ruoso> TimToady, re "the type is a promise to turn type mismatches into unthrown exceptions".... PLEASE!!! :)

[16:31] <[particle]> yes, i like that too, ruoso

[16:31] <[particle]> very much, in fact

[16:31] <pugs_svn> r22565 | lwall++ | [viv] add whitespace-before info under --pos

[16:32] <ruoso> [particle], The People against Eager Evaluation ;)

[16:32] *** alanhaggai joined
[16:34] <TimToady> PerlJam: certainly, I have a productive blend of OCD and AS, with occasional fits of a

[16:34] <TimToady> ADHD and OD

[16:35] <[particle]> the drug companies want you for clinical trials of a new pill

[16:35] <TimToady> but sometimes SWMBO is also involved

[16:37] <pugs_svn> r22566 | putter++ | [on_sbcl] README: Add TODO section.

[16:37] <pugs_svn> r22566 | putter++ | [elf_h] Sync test results with current t/.

[16:37] <TimToady> but yeah, you can't really make it in my business without OCD

[16:38] *** masak left
[16:38] <TimToady> the only way I ever let it go is by going and obsessing about something else for a while

[16:41] * ruoso later &

[16:41] *** ruoso left
[16:43] <pugs_svn> r22567 | lwall++ | [viv] --match to attach match objects

[16:44] <TimToady> okay, I've probably obsessed about that enough for now...

[16:46] *** meppl joined
[16:47] <pugs_svn> r22568 | pmurias++ | changed require to do to avoid having to add an 1; to viv

[16:48] *** ashizawa left
[16:53] <pugs_svn> r22569 | lwall++ | [viv] change MAIN to take @ARGV args as arguments

[16:53] <TimToady> pmurias: see above

[16:54] *** schmalbe joined
[17:05] <pmurias> TimToady: you mean 22569?

[17:07] *** arguile left
[17:08] <TimToady> yes, in case you want to call into MAIN

[17:08] <pmurias> i don't invoke MAIN

[17:08] <TimToady> but maybe you need the args processor separate

[17:09] <TimToady> well, feel free to whack on viv's API

[17:09] <pmurias> i just need an extra --m0ld

[17:09] <TimToady> or split out some of it into a viv.pm

[17:10] <pmurias> i propably should do it as "do 'viv'" is a bit hackish...

[17:11] *** Pzt3 left
[17:13] *** zamolxes left
[17:14] <pmurias> TimToady: does --match meet the no info is lost criteria?

[17:14] <pmurias> &

[17:15] *** Pzt3 joined
[17:37] *** Alias_ left
[17:47] *** alanhaggai left
[17:47] *** Lorn__ joined
[17:48] <TimToady> pmurias: yes, presuming the match tree itself has not lost any info.  but there's a lot of duplicate data

[17:48] <TimToady> I don't think we have a ref back to the rule that matched yet either.  It's a bit tricky since subs aren't real objects in Perl 5...

[17:49] *** ofer left
[17:50] <TimToady> but _reduced at least tells you the reduction tag for each rule

[17:56] *** rdice joined
[17:59] *** Lorn_ left
[18:00] *** Lorn left
[18:10] *** justatheory left
[18:12] *** sri_work_ joined
[18:12] *** apeiron_ is now known as apeiron

[18:15] *** hercynium joined
[18:22] *** sri_work left
[18:23] <rakudo_svn> r31862 | tene++ | Merge hllmagic branch into trunk.

[18:23] <rakudo_svn> r31862 | tene++ | Mostly looks okay.

[18:23] <rakudo_svn> r31862 | tene++ | If anyone runs into problems fixing the last few issues with their languages, address issues to Tene or pmichaud.

[18:31] *** Bzek left
[18:40] *** cosimo left
[18:52] *** meppl left
[19:03] *** [particle]1 joined
[19:06] *** TreyHarris left
[19:06] *** TreyHarris joined
[19:10] *** lambdabot left
[19:10] *** Lorn joined
[19:12] *** lambdabot joined
[19:20] *** [particle] left
[19:22] *** Lorn__ left
[19:29] *** sirhc left
[19:29] *** sirhc joined
[19:31] <pugs_svn> r22570 | moritz++ | [t/TASKS] remove some outdated tasks

[19:57] *** [particle] joined
[20:12] *** [particle]1 left
[20:22] *** [particle]1 joined
[20:36] *** [particle] left
[20:41] *** schmalbe left
[20:43] <pugs_svn> r22571 | lwall++ | [t] excise exists and delete functions

[20:45] <pugs_svn> r22572 | lwall++ | [STD] add missing TEMP block

[20:48] *** araujo left
[20:49] *** araujo joined
[21:10] *** TJCRI left
[21:23] *** iblechbot left
[21:23] *** rdice left
[21:26] <rakudo_svn> r31868 | moritz++ | [rakudo] remove S29-hash/delete.t from spectest_regression. Its syntax has

[21:26] <rakudo_svn> r31868 | moritz++ | changed, and is not yet supported. I'll open a TODO ticket.

[21:33] *** Limbic_Region joined
[21:48] *** Lorn_ joined
[21:48] *** zamolxes joined
[22:02] <Juerd> I have to shutdown feather0

[22:02] <Juerd> Which means that feather1..3 will be paused

[22:03] <Juerd> When using an ssh session, don't press any keys and it will probably survive the outage

[22:04] *** Lorn left
[22:10] <Juerd> (Oh, by the way, it's back up)

[22:17] *** Pzt3 left
[22:23] *** wknight8111 joined
[22:25] *** zamolxes left
[22:36] *** Pzt3 joined
[22:37] *** Pzt3 is now known as PZt

[22:37] *** alester left
[22:44] *** cj is now known as da_man

[22:44] *** da_man is now known as cj

[22:53] *** justatheory joined
[23:04] *** hercynium left
[23:08] *** Exodist left
[23:46] *** rdice joined
[23:53] *** justatheory left
[23:54] *** eternaleye joined
[23:57] *** alanhaggai joined
