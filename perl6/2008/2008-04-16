[00:04] <mncharity> re STD.pm, are :: and ::: getting parsed?  I'm not immediately seeing it.

[00:05] <TimToady> haven't had much chance to work on it, what with $dayjob being ferocious at the moment...

[00:06] <mncharity> ah :/

[00:09] <TimToady> I don't think it does parse :: and ::: at the moment, sb a regex_metachar, but it's not there

[00:09] <mncharity> ok, thanks

[00:10] *** Auzon joined
[00:31] *** wtgee joined
[00:36] *** chris2 left
[01:07] *** ajs_home left
[01:11] *** wtgee left
[01:16] *** yewenbin joined
[01:17] <pugs_svnbot> r20293 | putter++ | elf_e_src/EmitRegexYare.pm: Sketching what needs to be done.

[01:17] <pugs_svnbot> r20293 | putter++ | Backtracking api changes from a Filter::Simple to a s/// method.

[01:17] <pugs_svnbot> r20293 | putter++ | Engine core becomes a prelude.

[01:17] <pugs_svnbot> r20293 | putter++ | Emitters become p6, emitting p5 source.

[01:17] <pugs_svnbot> r20293 | putter++ | IR analysis becomes p6.

[01:17] <pugs_svnbot> r20293 | putter++ | The regexp and regex parsers are temporarily retained, as some of the action logic will need to end up in IRx1_FromAST or elsewhere.

[01:17] <pugs_svnbot> r20293 | putter++ | And the unicode rules will need to be metaprogrammed in p6.

[01:17] <pugs_svnbot> r20293 | putter++ | Discarded:

[01:17] <pugs_svnbot> r20293 | putter++ |  Match - no need for painful 'use overload' games.

[01:17] <pugs_svnbot> r20293 | putter++ |  Functional regex representations - we're bootstrapping on STD.

[01:17] <pugs_svnbot> r20293 | putter++ |  Api and Filter packages - emitter has understanding and control of the code.

[01:17] <pugs_svnbot> r20293 | putter++ |  Interactive shell and command line - though may again need something like it for testing.

[01:20] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20293

[01:20] *** armagad left
[01:20] <lambdabot> Title: Changeset 20293 - Pugs - Trac

[01:20] <Auzon> ... wow.

[01:20] *** bradb joined
[01:22] <mncharity> yeah.  some commit messages are just not meant for irc. ;)

[01:23] <mncharity> good night all &

[01:23] *** mncharity left
[01:30] *** meppl joined
[01:38] *** silug joined
[01:38] *** silug left
[01:39] *** silug joined
[02:03] *** alanhaggai joined
[02:13] *** justatheory left
[02:16] *** tobeya left
[02:22] *** alanhaggai left
[02:25] *** alanhaggai joined
[02:32] *** rindolf joined
[02:34] *** cognominal_ joined
[02:35] *** thoughtpolice left
[02:36] *** silug left
[02:45] <TimToady> ooh, we'll have to allow small comments with ⋕ and even tinier ones with ⌗

[02:46] <rindolf> TimToady: heh.

[02:46] <rindolf> TimToady: hi.

[02:46] <rindolf> Hi all.

[02:47] *** bradb left
[02:47] <rindolf> I'm going crazy without my home email.

[02:47] <rindolf> I hope I won't get unsubscribed from a lot of mailing lists.

[02:48] <TimToady> I think I might go sane without my home email...

[02:51] <rindolf> TimToady: heh.

[02:51] <rindolf> "Can't live with it. Can't live without it."

[02:57] <rindolf> TimToady: what's up?

[02:57] <rindolf> TimToady: BTW, can you tell me how do you make your living now?

[03:02] *** wknight8111 is now known as wknight-away

[03:03] <TimToady> I'm working for a company called Netlogic Microsystems

[03:03] <rindolf> TimToady: ah.

[03:03] <TimToady> they do pattern matching in hardware, among other things

[03:03] <rindolf> TimToady: hmm... interesting.

[03:03] <TimToady> and somehow they thought I knew something about pattern matching...

[03:03] *** Limbic_Region left
[03:04] <rindolf> TimToady: imagine that!

[03:05] <Auzon> So... like regexes in hardware?

[03:05] *** elmex_ joined
[03:05] <rindolf> TimToady: many modern Greek speakers can speak ancient Greek, right?

[03:05] *** elmex_ left
[03:05] <TimToady> they can read it, at least...

[03:06] <rindolf> Someone I talked with once wanted to have a C compiler in hardware.

[03:06] <rindolf> He used Gentoo.

[03:06] <Auzon> Makes sense now.

[03:06] <TimToady> Auzon: yeah, like that

[03:07] <rindolf> TimToady: how much memory can they afford to use?

[03:07] <TimToady> they try to avoid using memory, which is slow...

[03:07] <rindolf> Because compiling a regex into a state machine can take a lot of memory.

[03:07] <rindolf> TimToady: ah.

[03:08] <rindolf> TimToady: not computer memory - on-chip memory.

[03:08] <TimToady> yeah, well, now you're getting into NDA territory :)

[03:08] <rindolf> TimToady: oh sorry.

[03:08] <rindolf> TimToady: NDA or NFA?

[03:09] * TimToady snickers

[03:09] <rindolf> J/K.

[03:09] <rindolf> Non-finite Automata.

[03:09] <TimToady> flipflopping on the question, are you?

[03:09] <rindolf> TimToady: heh.

[03:10] <rindolf> TimToady: J/K flip-flop, right.

[03:10] <rindolf> TimToady: can't remember any others.

[03:10] <rindolf> RS Flip-flop.

[03:10] <rindolf> I think.

[03:10] <TimToady> Radio Shack?

[03:10] <rindolf> TimToady: :-)

[03:10] <rindolf> TimToady: I studied EE for 6 years. Well, one year was composed of two vacation semesters.

[03:10] <rindolf> TimToady: I only have a B.Sc. in EE.

[03:11] <rindolf> But it would be a stretch to call me an EEer.

[03:11] <TimToady> well, my family is calling me, so I'd better go...

[03:12] <TimToady> not sure I want to know what they're calling me...

[03:12] <Auzon> See you.

[03:12] <TimToady> bbl &

[03:12] <rindolf> TimToady: bye.

[03:17] <rindolf> We still need to compose the words for "I'm the real TimToady".

[03:18] <rindolf> To be sang by the Randal Schwartz Condition.

[03:20] *** elmex left
[03:22] *** wknight-away left
[03:46] *** wtgee joined
[03:48] <PerlJam> blah, too late for TimToady

[03:48] <rindolf> PerlJam: hi.

[03:49] <PerlJam> hello rindolf

[03:49] <rindolf> PerlJam: are you on San-fran.pm?

[03:49] <PerlJam> nope.

[03:49] <rindolf> PerlJam: oh, so you missed the funny thread.

[03:49] <rindolf> Too bad.

[03:49] <PerlJam> do you happen to know how to use the msg bot? It's one of those things I've done maybe once, so it didn't stick in my long term memory.

[03:49] <rindolf> PerlJam: /msg MemoServ HELP

[03:50] *** wtgee left
[03:50] <rindolf> PerlJam: or do you mean lambdabot?

[03:50] <rindolf> lambdabot: help

[03:50] <Auzon> I think lambdabot is just @tell whoever whatever

[03:50] <PerlJam> whichever

[03:50] <rindolf> PerlJam: I can grep my logs.

[03:51] <PerlJam> heh, I've stopped keeping logs of IRC.  I rarely ever went back and searched them for anything.

[03:51] *** meppl left
[03:52] <PerlJam> @tell TimToady I think the definition of statement or stdstopper is wrong in STD.pm.  stdstopper includes statement_mod_loop and statement_mod_cond.  Coupled with the definition of statement, that lets us have 2 statement_mod_cond in a row and I thought that's now allowed.

[03:52] <lambdabot> Consider it noted.

[03:53] <PerlJam> Grr.  s/(.*)now/${1}not/

[03:54] <PerlJam> trying to implement more of STD.pm for rakudo is ... trying  :)

[03:59] *** meppl joined
[04:02] *** alanhaggai left
[04:06] *** alanhaggai joined
[04:10] *** alanhaggai left
[04:21] *** wtgee joined
[04:35] *** silug joined
[04:35] *** eternaleye joined
[04:44] *** silug left
[04:57] *** Psyche^ joined
[05:13] *** Patterner left
[05:13] *** Psyche^ is now known as Patterner

[05:23] *** wtgee left
[05:30] *** rindolf left
[05:39] *** cmarcelo left
[05:43] *** meppl left
[06:17] *** BinGOs joined
[06:23] *** eternaleye left
[06:33] *** syle joined
[06:33] <syle> I notice memory is never freed on a variable when you use concatenation on it in perl5, is that normal?

[06:38] *** Alias_ joined
[06:42] *** silug joined
[07:06] *** iblechbot joined
[07:11] <spinclad> syle: this is a perl6 channel.  for perl5 help, try #perl here on freenode, or #perl-help on irc.perl.org or #perlhelp on EFnet (or so purl tells me).

[07:53] *** IllvilJa left
[07:58] *** wknight8111 joined
[08:10] *** wknight8111 left
[09:14] *** IllvilJa joined
[09:23] *** ruoso joined
[09:33] *** hanekomu joined
[09:37] *** elmex joined
[09:46] *** hanekomu left
[09:52] *** agentzh left
[09:53] *** agentzh joined
[10:01] *** Psyche^ joined
[10:03] *** DarkWolf84 left
[10:05] *** Patterner left
[10:05] *** Psyche^ is now known as Patterner

[10:19] *** chris2 joined
[11:16] *** meppl joined
[11:25] *** iblechbot left
[11:26] *** Alias__ joined
[11:27] *** Alias_ left
[11:29] *** riffraff joined
[11:35] *** xinming left
[11:38] *** xinming joined
[11:39] *** masak joined
[11:57] *** chris2 left
[12:07] *** c9s left
[12:15] *** iblechbot joined
[12:17] *** Daveman left
[12:26] <moritz_> ... and a log crumbles through the gate

[12:37] *** pmurias joined
[12:40] *** BinGOs left
[12:40] *** BinGOs joined
[12:44] *** Southen left
[12:44] *** nipotan is now known as nipotaway

[12:47] *** BinGOs left
[12:47] *** BinGOs joined
[12:47] *** dalek left
[12:48] *** dalek joined
[12:51] *** Juerd_ joined
[12:53] *** Juerd left
[12:56] *** Zygo left
[12:56] *** Zygo joined
[13:00] *** mtkatwork joined
[13:02] *** mtkatwork left
[13:48] *** BinGOs left
[13:48] *** BinGOs joined
[13:55] *** rdice joined
[13:57] *** TJCRI joined
[14:03] *** alester joined
[14:08] *** Auzo1 joined
[14:08] *** Auzon left
[14:23] *** Auzo1 left
[14:32] *** REPLeffect left
[14:44] *** REPLeffect joined
[14:45] *** jhorwitz joined
[15:03] *** kcwu left
[15:04] *** kcwu joined
[15:14] *** lisppaste3 left
[15:16] *** peeps[work] joined
[15:19] <moritz_> any kp6 developer around?

[15:19] <moritz_> I noticed a possible problem with gather { ... take }

[15:20] <moritz_> take() just calls Coro::cede

[15:20] <moritz_> which has no control over which coro is being executed

[15:20] <moritz_> so if you have more than one coro, you end up triggering the wrong one

[15:20] <moritz_> one possible solution could be Coro::Channel

[15:25] *** lisppaste3 joined
[15:30] <awwaiid> if you know exactly which coro you want to run isntead, you could do transfer()

[15:31] *** brbpack joined
[15:31] <moritz_> awwaiid: aye, but then you have the problem that take() has to redispatch to the previous Coro::State object

[15:31] <moritz_> awwaiid: I tried that with Perl6::GatherTake (now on CPAN), but I didn't succeed

[15:32] <awwaiid> ah

[15:32] <moritz_> but it could be that kp6's abstraction layer helps here, and makes ->transfer() possible

[15:33] <moritz_> for the p5 implementation I used a tied, quasi-lazy array

[15:33] <moritz_> which is kinda ugly

[15:33] <awwaiid> I'm completely unfamiliar with the kp6's architecture, I was just making a completely uneducated suggestion :)

[15:35] <moritz_> it was certainly educated ;-)

[15:35] <moritz_> I'n not familiar enough to fix it, I just noticed that kp6 might have a problem

[15:41] <awwaiid> moritz_, see http://thelackthereof.org/projects/perl/Continuity-Widget/lib/Continuity/Coro/Continuation.pm (though a glance at it suggests that the scope of @yieldstack needs to be more limited)

[15:41] <lambdabot> http://tinyurl.com/6a8dbg

[15:42] *** japhb left
[15:42] <awwaiid> maybe you can use that to effectively transfer only back to the caller

[15:42] <awwaiid> Coro used to have Coro::Cont that did this better

[15:43] <moritz_> awwaiid: I think I'd need a hash that maps the coro reference to the array I'm filling

[15:43] <moritz_> awwaiid: but something like this might work, thanks for the hint

[15:45] <awwaiid> np

[15:47] *** japhb joined
[15:51] <pmurias> moritz_: hi

[15:52] <moritz_> hi pmurias 

[15:53] <pmurias> i think kp6 is frozen/dead right now so i don't suppose the bug will be fixed

[15:53] <moritz_> what is it blocking on? smop?

[15:53] <moritz_> $no_free_time?

[15:56] <avar> fglock disappeared and development pretty much dried up after that

[15:56] <moritz_> too bad

[15:57] <pmurias> and the default backend proved too slow to be usefull

[16:01] <pmurias> on the positive side nested gather works ;)

[16:01] <moritz_> that surprises me a bit

[16:03] <moritz_> but it's great ;-)

[16:04] <pasteling> "pmurias" at 81.168.228.98 pasted "nested gather test case" (14 lines, 269B) at http://sial.org/pbot/30835

[16:06] *** yewenbin left
[16:08] <pmurias> moritz_: i'm afraid i was over enthusiastic :(

[16:08] <pmurias> the inner gather is called more times then it should

[16:09] *** masak left
[16:11] *** justatheory joined
[16:11] *** Daveman joined
[16:21] <awwaiid> moritz_, I looked at that code I sent you and now re-understand why using a global yieldstack is ok. the yieldstack holds the caller, so the only reason it is a stack at all is for nested continuations

[16:22] <awwaiid> (s/continuations/generators/ if you like)

[16:22] <moritz_> awwaiid: ok, so as long as I don't do *really* evil things like threads it should all be fine

[16:22] <moritz_> but I think that Coro and threads conflict anyway

[16:22] <awwaiid> Coro, afaik, is thread safe as long as it is wholly contained in a single thread

[16:23] <moritz_> which is not my definition of "thread safety" ;-)

[16:23] <awwaiid> I think you can use my code directly, and add your hash cache as wrapping code

[16:24] <awwaiid> er, array

[16:25] <moritz_> thanks

[16:25] <awwaiid> Actually I should just bundle this properly as Coro::Generator

[16:27] *** wtgee joined
[16:27] * awwaiid adds it to the TODO list

[16:35] <pugs_svnbot> r20294 | moritz++ | [irclog] filter [off] comments (the logging bot should have don it, but

[16:35] <pugs_svnbot> r20294 | moritz++ | it seems not to work reliably)

[16:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20294

[16:35] <lambdabot> Title: Changeset 20294 - Pugs - Trac

[16:40] *** [particle3 left
[16:46] *** rindolf joined
[17:06] *** Auzon joined
[17:33] *** tobeya joined
[17:40] *** barney joined
[17:43] *** kane_ left
[17:47] *** eternaleye joined
[17:50] *** Auzon left
[17:54] *** mj41 joined
[17:55] *** rindolf left
[17:58] *** overlast joined
[18:00] *** mj41 left
[18:13] *** rff joined
[18:21] *** riffraff left
[18:27] *** barney left
[18:35] *** Tene joined
[18:35] *** Tene left
[18:37] *** Tene joined
[18:47] *** [particle] joined
[18:49] *** eternaleye left
[19:04] *** lichtkind joined
[19:08] <lichtkind> TimToady: is it right that basically in perl 6 are only 4 namespaces: $%@ and that for (sub)routines ?

[19:09] *** Alias__ left
[19:10] <moritz_> there's the :: sigil for namespaces, isn't

[19:12] <TimToady> arguably there's only packages and lexical scopes, and the sigils are just part of the name

[19:12] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[19:14] *** ruoso left
[19:16] <moritz_> TimToady: is there a 'real' @@ sigil?

[19:16] <TimToady> depends on what you mean by 'real'

[19:16] <moritz_> TimToady: STD.pm considers it to be a sigil, but it's not listed in the synopsis as a sigil, iirc

[19:17] <moritz_> TimToady: having @@a being a different variable from @a

[19:17] <TimToady> it parses as a separate sigil, but @@foo and @foo are the same array as it is currently specced

[19:17] <moritz_> ok

[19:17] <TimToady> all it really controls is the list vs slice context if you bind to it

[19:18] <PerlJam> moritz: http://dev.perl.org/perl6/doc/design/syn/S02.html#Names_and_Variables

[19:18] <lambdabot> Title: Synopsis 2: Bits and Pieces - perl6, http://tinyurl.com/y648lg

[19:19] <PerlJam> The :: sigil seems to have an aweful lot of conceptual weight put upon it as I look at that list.

[19:19] <moritz_> PerlJam: slice view of @, that's what I missed

[19:20] <PerlJam> though maybe that's just because I don't quite think of all of those items as specializations of the same thing yet.

[19:21] <PerlJam> package/module/class/grammar all go together in my head, but the others don't quite

[19:21] <lichtkind> TimToady: le me put it this way: filehandle, format name, and dirhandle namespaces are gone and captures and pairs and junctions are "simple" skalars?

[19:22] <TimToady> PerlJam: the statement token prevents you from having two conditional modifiers in a row; the stdstoppers are a superset of what the parser will accept at that point (though there are other issues with transient terminators that need fixing)

[19:23] <TimToady> lichtkind: that's a fair statement of the situation

[19:24] <lichtkind> TimToady: thanks

[19:24] <PerlJam> TimToady: I'll have to look at it again, but it seemed like a statement could be parsed as <expr> <statement_mod_cond> <stdstopper>  and stdstopper could be parsed as <statement_mod_cond> thus you'd get two in a row.

[19:24] *** b_jonas joined
[19:25] <PerlJam> anyway, it was late for me when I looked.  Maybe my eyes were blurry and my brain fuzzy  :)

[19:25] <TimToady> PerlJam: I'd say :: is really type space, and some types happen to map to what we used to think of as packages

[19:25] <TimToady> stdstopper is only doing lookahead

[19:26] <PerlJam> ah, I completely missed that then.

[19:26] <PerlJam> I may implement that in rakudo next if I can figure out how. :)

[19:26] <TimToady> note that all calls to stdstopper are of the form <?stdstopper> or <!stdstopper>

[19:27] <lichtkind> TimToady: what do you know about kurila

[19:27] <TimToady> neither of those consume chars

[19:27] * allbery_b sees and understands (cf. mailing list yesterday)

[19:28] <TimToady> as I've mentioned, stoppers need some reworking in order to be properly dynamic

[19:30] <PerlJam> TimToady: aye.  Maybe I won't attempt it just yet.  I only have a limited amount of time to hack these evenings and meager brain power.

[19:31] <TimToady> lichtkind: I ignore kurila, for the most part.  I'm not very interested in half-baked fixes to Perl.

[19:32] <lichtkind> TimToady: that was a straight statement of the situation :)

[19:32] *** bockmabe_ joined
[19:32] *** bockmabe left
[19:33] <Coke_> TimToady: ... that's quite a straight line there... =-)

[19:35] *** buchetc joined
[19:44] *** lidden_ joined
[19:45] *** lidden left
[19:54] *** jhorwitz left
[19:58] *** justatheory left
[19:58] *** Juerd_ left
[19:58] *** agentzh left
[19:58] *** jan_ left
[19:58] *** xdg left
[19:59] *** justatheory joined
[19:59] *** Juerd_ joined
[19:59] *** agentzh joined
[19:59] *** jan_ joined
[19:59] *** xdg joined
[20:01] *** armagad joined
[20:01] *** armagad left
[20:14] *** buchetc left
[20:17] *** b_jonas left
[20:23] *** mj41 joined
[20:31] *** aindilis left
[20:32] *** justatheory left
[20:33] *** justatheory joined
[20:35] *** brbpack left
[20:39] *** elmex left
[20:40] *** elmex joined
[20:41] *** larsen_ joined
[20:42] *** jan_ left
[20:44] *** jan_ joined
[20:46] *** ruoso joined
[20:47] *** syle left
[20:48] *** eternaleye joined
[20:57] *** jferrero joined
[21:11] *** rff left
[21:11] *** rdice left
[21:11] <pugs_svnbot> r20295 | moritz++ | [t/spec] s/use v6-alpha;/use v6;/

[21:11] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20295

[21:11] <lambdabot> Title: Changeset 20295 - Pugs - Trac

[21:12] <Coke_> ... I mean in parrot.

[21:13] <moritz_> Coke_: but in p6 it's not necessary either, is it?

[21:14] <moritz_> Module.pod say "Before the full specification of Perl 6.0.0 is released, you can use C<alpha>

[21:14] <moritz_> to denote a program using syntax that is still subject

[21:14] <moritz_> to change"

[21:15] <moritz_> but since the tests should always reflect the current status of the language I see no need for it

[21:15] <moritz_> if anybody objects I can reverse that commit

[21:18] <Coke_> I just didn't want to suddenly have all of pugs tests failing, is all.

[21:18] *** TJCRI left
[21:19] <moritz_> since pugs doesn't run in current versions of the repo that's no a good point

[21:19] <moritz_> and compatibilty to the implementations should be achieved with fudge

[21:19] <moritz_> but I can understand your concern

[21:20] <Coke_> Just trying to be a good neighbor.

[21:20] <moritz_> aye

[21:20] <moritz_> we do appreciate that ;)

[21:23] *** rdice joined
[21:23] *** rdice left
[21:27] *** jferrero left
[21:38] *** ruoso left
[21:39] *** larsen_ left
[21:42] *** r0bby left
[21:46] *** wtgee left
[21:50] *** eternaleye left
[21:57] *** lichtkind left
[22:01] *** japhb left
[22:10] *** kane_ joined
[22:18] *** wknight8111 joined
[22:19] *** pmurias left
[22:21] *** iblechbot left
[22:23] *** eternaleye joined
[22:34] *** r0bby joined
[22:40] <meppl> good night

[22:43] *** meppl left
[22:51] *** eternaleye left
[23:47] *** r0bby left
[23:58] *** alester_ joined
