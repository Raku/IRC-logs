[00:00] *** Eevee__ left
[00:07] *** donaldh left
[00:08] *** donaldh joined
[00:12] *** sri_work left
[00:15] *** bacek_ joined
[00:15] *** bacek_ left
[00:16] *** bacek_ joined
[00:18] *** pbuetow_ left
[00:18] *** eternaleye_ left
[00:18] *** eternaleye_ joined
[00:26] *** wknight8111 joined
[00:27] *** lambdabot left
[00:27] *** Chillance left
[00:28] *** lambdabot joined
[00:46] *** IllvilJa left
[00:56] *** Limbic_Region left
[00:59] *** r0bby_ joined
[00:59] *** bacek__ joined
[01:04] *** r0bby left
[01:04] *** r0bby_ is now known as r0bby

[01:17] *** bacek_ left
[01:25] *** ruoso left
[01:27] *** lambdabot left
[01:28] *** lambdabot joined
[01:29] *** Ched- joined
[01:37] *** alanhaggai joined
[01:43] *** Ara4n joined
[01:50] *** rian_ joined
[01:50] <rian_> moritz_: r u here

[01:50] <rian_> moritz_: i want to use ur irc bot

[01:51] <rian_> i'm confused about the lib directory being above the cgi directory

[01:51] <rian_> the index.pl scripts aren't finding lib

[02:00] * rian_ says hello

[02:01] *** rian_ left
[02:02] *** rian joined
[02:03] <rian> moritz_: ping ping

[02:03] <Auzon> I imagine he's asleep.

[02:03] <rian> yeah i guessed that

[02:04] <rian> lol actually not really

[02:04] <rian> is he in europe?

[02:05] *** eternaleye_ left
[02:05] *** justatheory left
[02:06] <Auzon> Yes.

[02:06] <Auzon> Actually... he's out of town anyway.

[02:06] <Auzon> But I can probably help you.

[02:23] *** [particle]1 joined
[02:23] *** Eevee__ joined
[02:25] *** Eevee_ left
[02:26] *** eternaleye_ joined
[02:26] <diakopter> you know it's bad when you can't remember how/why you wrote some code earlier the same day.

[02:27] *** rian left
[02:38] *** [particle] left
[02:42] <Patterner> read the comments.

[02:43] <vixey> comments o_o

[03:03] *** wknight8111 left
[03:23] <diakopter> Patterner: lol

[03:25] <diakopter> <- refactored yap6 to use an immutable input string and a cursor; as a bonus it got line/pos numbers for syntax errors/warnings/panics.

[03:37] *** nixfu joined
[03:37] *** nixfu left
[03:41] *** alester_ joined
[03:46] <pugs_svnbot> r20758 | diakopter++ | [yap6] lots still broken from the refactor, but

[03:46] <pugs_svnbot> r20758 | diakopter++ | everything is oodles faster....

[03:51] <diakopter> must escape refactor hexone

[04:09] <Auzon> yap6: {}

[04:09] <p6eval> yap6 r20758 OUTPUT[parse successful␤]

[04:18] <diakopter> yap6: s88s8s8s88s

[04:18] <p6eval> yap6 r20758 OUTPUT[parse successful␤]

[04:18] <diakopter> heh

[04:18] <diakopter> yap6:

[04:18] <diakopter> yap6: 

[04:19] <diakopter> yap6: .

[04:19] <p6eval> yap6 r20758 OUTPUT[incomplete statement near "."␤]

[04:19] <diakopter> yap6: ;

[04:19] <p6eval> yap6 r20758 OUTPUT[parse successful␤]

[04:23] *** rian_ joined
[04:58] *** meppl joined
[04:58] <rian_> Auzon: are you still around?

[04:58] <Auzon> For a few moments, yes.

[04:58] <rian_> to answer my ilbot.pl question :(

[04:59] <rian_> so i fixed the lib problem

[04:59] <Auzon> What's your question? I'm not familiar with it, but I can look

[04:59] <rian_> i just symlinked the lib dir from the parent dir into the cgi  dir

[04:59] <rian_> so my problem was that i have the cgi directory symlinked to from my cgi-bin dir

[05:00] <rian_> but a lot of the files that the scripts in ./cgi need are in its parent folder

[05:00] <rian_> like lib, database.conf prolly the other .confs

[05:00] <rian_> i guess i can keep symlinking

[05:00] <rian_> but is that what you guys do?

[05:02] <Auzon> I haven't seen that server, sorry. I suggest sending moritz a message using lambdabot's offline message feature thing

[05:02] <Auzon> just say @tell moritz_ message here

[05:02] <Auzon> I thought you were asking about evalbot

[05:02] <rian_> oh lol nope

[05:02] <rian_> okay thx

[05:03] <rian_> p6eval: print "hello\n";

[05:03] <rian_> Auzon: did i do it wrong?

[05:03] <Auzon> rakudo: say "hi"

[05:03] <p6eval> rakudo r28229 OUTPUT[hi␤]

[05:04] <Auzon> p6eval listens for several Perl 6 implementation names, such as rakudo, elf, pugs, kp6, nqp, and yap6.

[05:04] <Auzon> pugs: say [*] 1 .. 6

[05:04] <p6eval> OUTPUT[720␤]

[05:04] <rian_> Auzon: have to start with "say"?

[05:05] <rian_> rakudo_svn: say "hello"

[05:05] <Auzon> No, but it runs faster/more reliably if you produce output to STDOUT

[05:05] <Auzon> and say is the traditional Perl 6 way

[05:05] <Auzon> say is roughly print plus a newline

[05:05] <rian_> Auzon: ohh yeah i haven't kept up to date with all the perl 6isms

[05:05] <rian_> rakudo: say [+] 0 .. 100

[05:06] <p6eval> rakudo r28229 OUTPUT[Statement not terminated properly at line 1, near "[+] 0 .. 1"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[05:06] <Auzon> Try it with Pugs.

[05:06] <rian_> Auzon: how can i do a lambda in perl6?

[05:06] <rian_> i'm guessing [+] 0 .. 100 is a fold

[05:07] <rian_> pugs: say 1 .. 6

[05:07] <p6eval> OUTPUT[123456␤]

[05:07] <Auzon> [whatever] (list) is a reduce using the whatever operator on list

[05:07] <Auzon> pugs: multi postfix:<!> (Int $final) {[*] 1 .. $final}; say 5!

[05:07] <p6eval> OUTPUT[120␤]

[05:07] <Auzon> factorial operator, implemented in Perl 6

[05:08] <rian_> lol so operators are first class in perl6

[05:08] <rian_> pugs: [+]

[05:08] <p6eval> RESULT[0]

[05:08] <Auzon> Lots of things are first class

[05:08] <rian_> pugs: say [+]

[05:08] <p6eval> OUTPUT[0␤]

[05:08] <rian_> pugs: say +

[05:09] <p6eval> OUTPUT[*** ␤    Unexpected end of input␤    at /tmp/miz3FUlje3 line 2, column 1␤]

[05:09] <rian_> oh i guess + is still syntactic

[05:09] <Auzon> pugs: say infix:<+>.WHAT

[05:09] <p6eval> OUTPUT[*** No compatible multi variant found: "&infix:+"␤    at /tmp/qPE5r6hcpy line 1, column 5 - line 2, column 1␤]

[05:09] <Auzon> pugs: say (infix:<+>).WHAT

[05:09] <p6eval> OUTPUT[*** No compatible multi variant found: "&infix:+"␤    at /tmp/83sUCA21mN line 1, column 6-15␤]

[05:09] <Auzon> hm

[05:09] <Auzon> pugs: multi postfix:<!> (Int $final) {[*] 1 .. $final}; say (postfix:<!>).WHAT

[05:09] <p6eval> OUTPUT[*** No compatible multi variant found: "&postfix:!"␤    at /tmp/GN1VLRMWvq line 1, column 56-67␤]

[05:10] *** parallax joined
[05:10] <Auzon> .WHAT is the "tell me what type it is" thing

[05:10] <Auzon> pugs: "hello, world".WHAT

[05:10] <p6eval> RESULT[::Str]

[05:10] <Auzon> rakudo: class Foo {}; say Foo.new.WHAT

[05:10] <p6eval> rakudo r28229 OUTPUT[Foo␤]

[05:11] <parallax> rakudo: $_

[05:11] <p6eval> rakudo r28229 OUTPUT[too few arguments passed (0) - 1 params expected␤current instr.: '_block11' pc 0 (EVAL_8:3)␤

[05:11] <rian_> pugs: say (infix:<+>).WHAT

[05:11] <p6eval> OUTPUT[*** No compatible multi variant found: "&infix:+"␤    at /tmp/yKwvltAE87 line 1, column 6-15␤]

[05:11] <rian_> pugs: say infix:<+>

[05:11] <p6eval> OUTPUT[*** No compatible multi variant found: "&infix:+"␤    at /tmp/WoxLxjDb0K line 1, column 5 - line 2, column 1␤]

[05:12] <rian_> Auzon: can you define new subroutines?

[05:12] <Auzon> sure.

[05:12] <Auzon> pugs: sub foo {say "hi"}; foo

[05:12] <p6eval> OUTPUT[hi␤]

[05:12] <rian_> pugs: foo

[05:12] <p6eval> OUTPUT[*** No such subroutine: "&foo"␤    at /tmp/fhhtrh32vR line 1, column 1 - line 2, column 1␤]

[05:13] <Auzon> Everything is compartmentalized.

[05:13] <rian_> pugs: sub foo {$hi = [+] 0 .. 6; say $hi;}; foo

[05:13] <p6eval> OUTPUT[*** ␤    Unexpected " ="␤    expecting "::"␤    Variable "$hi" requires predeclaration or explicit package name␤    at /tmp/cOSVzfyHCl line 1, column 13␤]

[05:13] <Auzon> Perl 6 is strict.

[05:13] <rian_> my 

[05:14] <rian_> my $hi?

[05:14] <parallax> how do you turn off strict mode in perl 6?

[05:14] <Auzon> pugs: sub foo {my $hi = [+] 0 .. 6; say $hi;}; foo

[05:14] <p6eval> OUTPUT[21␤]

[05:14] <Auzon> parallax: generally, you don't. 'no strict' might work.

[05:14] <rian_> pugs: sub foo {my $hi; $hi = [+] 0 .. 6; say $hi;}; foo

[05:14] <p6eval> OUTPUT[21␤]

[05:14] <Auzon> But why wouldn't you want strict? :-/

[05:15] <parallax> i prefer concise code

[05:16] <Auzon> Well, a module for disabling strict should be pretty easy once Perl 6 is done, since Perl 6 is typically written in Perl 6

[05:17] <Auzon> Here's something that you might find surprising.

[05:17] <Auzon> rakudo: say "{1+1}"

[05:17] <p6eval> rakudo r28229 OUTPUT[2␤]

[05:18] <rian_> Auzon: do you know off-hand where that is from?

[05:19] <rian_> Auzon: i've seen another language that has eval in strings with brackets

[05:19] <Auzon> Nope, I'm not sure.

[05:19] * Auzon checks Ruby

[05:20] <Auzon> Not Ruby. It wouldn't be Python or PHP or C, either

[05:20] <Auzon> My guess is that it came from the Perl 5 habit of "@{[1+1]}"

[05:21] <rian_> oh this is killing me

[05:21] <rian_> oh lol

[05:21] <rian_> i'm thinking of bash

[05:21] <rian_> makes sense

[05:21] <Auzon> Not in bash that I can tell

[05:22] <rian_> Auzon: hmm ur right

[05:23] <Auzon> not csh or zsh

[05:24] <rian_> Auzon: maybe i'm thinking of `(,(+ 1 1)) in scheme

[05:25] <Auzon> The general trend is to use curlies for as much interpolation as possible beyond the simple cases

[05:27] <rian_> Auzon: lol you know what, i could just be remembering an old perl 6 doc i read a year ago or something haha

[05:27] <Auzon> you can still say stuff like "$foo", and "\x49", but most of the rest is gone (especially the disambiguation syntax of ${foo})

[05:30] <Auzon> Anyway, I must be going. Good night

[05:30] <parallax> Good night!

[05:32] <rian_> Auzon: thx for ur help

[05:40] *** rian_ left
[05:40] *** rian joined
[05:41] <TimToady> pugs: say &infix:<+>.WHAT

[05:41] <p6eval> OUTPUT[Sub␤]

[05:41] <TimToady> have to use & sigil to treat the verb as a noun

[05:52] *** alc joined
[05:56] *** penk joined
[05:57] *** Eevee_ joined
[05:58] *** Eevee__ left
[06:01] *** donaldh left
[06:02] *** donaldh joined
[06:08] *** alester_ left
[06:17] *** Eevee__ joined
[06:18] *** Eevee_ left
[06:21] *** penk left
[06:21] *** penk joined
[06:22] *** Psyche^ joined
[06:29] *** nipotan is now known as nipotaway

[06:33] *** oltec joined
[06:34] *** Patterner left
[06:34] *** Psyche^ is now known as Patterner

[06:37] *** Eevee__ left
[06:37] *** Eevee__ joined
[06:53] *** eternaleye_ left
[06:54] *** eternaleye_ joined
[07:00] *** parallax left
[07:02] *** Ched- left
[07:04] *** Ched- joined
[07:04] *** Ched- left
[07:09] *** iblechbot joined
[07:13] *** meppl left
[07:16] *** oltec left
[07:16] *** oltec joined
[07:19] *** nipotaway is now known as nipotan

[07:22] *** alc left
[07:24] *** ruoso joined
[07:29] *** bsb left
[07:37] *** alc joined
[07:49] <spinclad> pugs: say (1 infix:<+> 2)

[07:49] <p6eval> OUTPUT[*** ␤    Unexpected "infix"␤    expecting operator or ")"␤    at /tmp/6spEh5ppx6 line 1, column 8␤]

[07:49] <spinclad> say infix:<+>(1,2)

[07:49] <spinclad> pugs: say infix:<+>(1,2)

[07:49] <p6eval> OUTPUT[3␤]

[07:54] *** elmex joined
[07:55] <vixey> pugs: say "ＢＯＮＡＮＺＡ"

[07:55] <p6eval> OUTPUT[ï¼¢ï¼¯ï¼®ï¼¡ï¼®ï¼ºï¼¡␤]

[08:03] *** eternaleye_ left
[08:11] *** araujo left
[08:19] *** Lorn left
[08:27] *** pbuetow joined
[08:33] *** braceta joined
[08:42] *** Eevee__ left
[08:43] *** alanhaggai left
[08:43] *** alanhaggai joined
[08:44] *** alanhaggai left
[08:47] *** alanhaggai joined
[08:59] <drbean> perl6: say "ＢＯＮＡＮＺＡ"

[08:59] <p6eval> kp6 r20758: OUTPUT[ï¼¢ï¼¯ï¼®ï¼¡ï¼®ï¼ºï¼¡␤]

[08:59] <p6eval> ..pugs: OUTPUT[ï¼¢ï¼¯ï¼®ï¼¡ï¼®ï¼ºï¼¡␤]

[08:59] <p6eval> ..rakudo r28231: OUTPUT[Ã¯Â¼Â¢Ã¯Â¼Â¯Ã¯Â¼Â®Ã¯Â¼Â¡Ã¯Â¼Â®Ã¯Â¼ÂºÃ¯Â¼Â¡␤]

[08:59] <p6eval> ..elf r20758: OUTPUT[ï¼¢ï¼¯ï¼®ï¼¡ï¼®ï¼ºï¼¡␤]

[09:01] <drbean> rakudo is the odd one out there, but none of them are returning the Unicode wide characters.

[09:01] <drbean> Or is that my system?

[09:02] <vixey> actually the problem is IRC

[09:02] <vixey> pugs> say "ＢＯＮＡＮＺＡ"

[09:02] <vixey> ＢＯＮＡＮＺＡ

[09:03] <spinclad> looks like they may be, but with the wrong encoding

[09:03] <spinclad> or rather: evalbot isn't preserving the encoding

[09:04] <vixey> if they were working in a totally different encoding to me, then maybe what they did is correct behavoir

[09:04] <spinclad> rakudo: utf8 -> 8bit twice?

[09:04] <p6eval> rakudo r28231 OUTPUT[Statement not terminated properly at line 1, near "-> 8bit tw"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[09:05] <spinclad> (sorry, evalbot, that wasn't really for you)

[09:09] <drbean> Freenode supports UTF-8, so it must be evalbot.

[09:11] <drbean> perl6: say "你好, 世界。"

[09:11] <p6eval> kp6 r20758: OUTPUT[ä½ å¥½, ä¸çã␤]

[09:11] <p6eval> ..pugs: OUTPUT[ä½ å¥½, ä¸çã␤]

[09:11] <p6eval> ..rakudo r28231: OUTPUT[Ã¤Â½Â Ã¥Â¥Â½, Ã¤Â¸ÂÃ§ÂÂÃ£ÂÂ␤]

[09:11] <p6eval> ..elf r20758: OUTPUT[ä½ å¥½, ä¸çã␤]

[09:15] *** bacek__ left
[09:18] <vixey> you could use a different encoding on freenode

[09:18] <vixey> UTF-8 is just the usual

[09:23] *** pmurias joined
[09:24] <pmurias> rian,Auzon: ruby has puts "#{1+2}"

[09:37] *** |Jedai| joined
[09:38] *** pmurias left
[09:47] *** pjcj joined
[09:54] *** chris2 joined
[09:55] *** Jedai left
[10:16] *** alc left
[10:18] *** [particle]1 left
[10:37] *** alanhaggai_ joined
[10:44] *** |Jedai| is now known as Jedai

[10:52] *** alanhaggai left
[11:08] <ruoso> hmmm... I'll have to unsubscribe p6-all and subscribe each individual list... :( my posts keep being held for too long...

[11:18] <oltec> whose on windows

[11:23] *** vixey left
[11:30] *** mjk joined
[11:36] *** pbuetow left
[11:56] *** acmoore left
[11:58] *** chris2 left
[12:04] *** braceta left
[12:17] *** iblechbot left
[12:37] *** r0bby left
[12:42] *** IllvilJa joined
[12:48] *** cmarcelo joined
[13:00] *** IllvilJa left
[13:06] *** IllvilJa joined
[13:12] *** jhorwitz joined
[13:15] *** iblechbot joined
[13:28] *** sri_work joined
[13:31] *** eternaleye_ joined
[13:32] *** IllvilJa left
[13:36] <pasteling> "kolibrie" at 66.239.158.3 pasted "TimToady: results of running Bogus.pm through gimme5 (blowup)" (196 lines, 4.4K) at http://sial.org/pbot/31279

[13:47] *** nipotan is now known as nipotaway

[13:49] *** [particle] joined
[14:00] *** IllvilJa joined
[14:01] *** nipotaway is now known as nipotan

[14:05] *** eternaleye_ left
[14:11] *** wknight8111 joined
[14:15] *** ron joined
[14:17] *** sscaffidi joined
[14:31] *** [particle1 joined
[14:31] *** IllvilJa left
[14:32] *** penk left
[14:35] *** rdice joined
[14:37] * diakopter begrudgingly acknowledges the necessity of another [few] round[s] of refactoring (for yap6).

[14:38] *** Jedai left
[14:45] *** pmurias joined
[14:45] <pmurias> diakopter: you don't like refactoring? ;)

[14:49] <pmurias> cycling&

[14:49] *** [particle] left
[14:57] *** Ched- joined
[15:02] *** Jedai joined
[15:03] *** Ched- left
[15:07] *** bacek left
[15:08] *** Eevee joined
[15:34] *** alanhaggai_ left
[15:35] <diakopter> TimToady: to continue from yesterday and to more fully answer your question, yap6 implementations of <?before > and <?after > would make use of iff() and unmore() (get it? it's not quite "unless"), but aren't identical.

[15:43] *** lumi joined
[15:45] *** IllvilJa joined
[15:45] *** pbuetow joined
[15:48] *** Lorn joined
[15:54] *** eternaleye_ joined
[15:54] *** ron left
[15:56] <pugs_svnbot> r20759 | lwall++ | [gimme5] remove another Perl dependency

[15:59] *** IllvilJa left
[16:01] *** TJCRI joined
[16:06] *** |Jedai| joined
[16:11] *** mjk left
[16:12] *** lumi left
[16:13] *** lumi joined
[16:15] <[particle1> TimToady: ping

[16:16] *** [particle1 is now known as [particle]

[16:19] *** lumi left
[16:20] *** lumi joined
[16:24] *** peepsalot joined
[16:24] *** Jedai left
[16:25] *** lumi left
[16:26] *** lumi joined
[16:37] *** tye joined
[16:39] <pugs_svnbot> r20760 | lwall++ | [Cursor5] add basic ws rule for non-Perl grammars to use

[16:40] <[particle]> TimToady: tye and i were just discussing lazy lists in p5

[16:40] <[particle]> i'm not sure i gave him all your requirements

[16:42] *** lumi left
[16:42] *** nothingmuch left
[16:42] <[particle]> seems an important bit i forgot is that you need lists to remain lazy even after return @foo or @bar = @foo

[16:43] <tye> ah, return @foo is harder

[16:43] *** justatheory joined
[16:43] *** nothingmuch joined
[16:44] <[particle]> what goes on with return?

[16:44] <tye> tie won't even save you with return @foo

[16:44] *** lumi joined
[16:45] *** nothingmuch left
[16:45] <tye> @bar= @foo; has a similar problem but it is easier to work around with some source-code munging

[16:45] <lambdabot> Maybe you meant: arr part yarr

[16:46] * [particle] kicks lambdabot

[16:47] <tye> reworking the code to return \@foo; might be a lot of work.

[16:47] *** lumi left
[16:48] <TimToady> here

[16:48] <[particle]> scalar+iterator would work everywhere, i assume

[16:48] *** nothingmuch joined
[16:48] <[particle]> it's just a hassle to convert

[16:48] <[particle]> is that right, TimToady?

[16:48] <TimToady> correct

[16:49] <diakopter> TimToady: is <ws> parsetime mutable?

[16:49] <TimToady> was already planning to go that direction eventually

[16:49] <TimToady> diakopter: it's overridable...

[16:49] <[particle]> ...but true lazy lists in p5 would save you from the conversion

[16:50] *** eternaleye_ left
[16:50] <TimToady> kolibrie: your bogus grammar should work now

[16:50] *** alanhaggai joined
[16:50] <TimToady> but real lazy lists that survive return etc. would involve core hackery

[16:51] <TimToady> you'd need some kind of special closure return that you could put at the end of a list, and everything that wants the rest of the list would have to know to call it at the right time

[16:52] <tye> @foo= @bar; could even be handled with optree rewriting. return @foo; seems a much tougher nut.

[16:52] <lambdabot> Unknown command, try @list

[16:52] <TimToady> yeah, sigh...

[16:53] *** nothingmuch left
[16:53] <tye> ooh, that's a neat idea. you could define an array magic for lazy arrays that calls that closure when extending the array.

[16:53] *** lumi joined
[16:54] <tye> except magic doesn't get copied.

[16:54] <tye> I'm not sure if there is already hooks for adding magic to arrays by default like for overloaded constants

[16:55] <[particle]> could the special kind of closure use sub attributes?

[16:55] <tye> you don't need lazy grep/map ?

[16:56] <TimToady> the problem is that there is no way to pass an array object through the stack except via a reference

[16:56] <TimToady> if you just pass all the values, the array is denatured

[16:57] <tye> so the "no tie" requirement was more than just "too slow", as I was lead to believe :)

[16:57] <TimToady> if the last element in the list was magical such that it did something special when put *back* into an array, that might be sufficient

[16:57] <TimToady> yeah, tie depends on OO, and perl 5's stack isn't

[16:58] <[particle]> will there ever be unevaluated elements anywhere but at the end?

[16:58] *** Eevee left
[16:59] *** lumi left
[16:59] <tye> that the standard for lazy lists, so "no"

[16:59] <TimToady> not for normal lazy lists, though range objects can be iterated on either end

[16:59] <[particle]> i'm thinking about range

[16:59] <[particle]> is that a requirement for your work, TimToady?

[16:59] <TimToady> no

[16:59] <[particle]> ok, fab

[17:00] <tye> seems a small change to have av_store check for magic such that a scalar value's magic could infect the array

[17:01] <ruoso> TimToady, my post still didn't made into p6-language... but have you seen the patch I've sent you on S12 for the HOW thing?

[17:01] <TimToady> yes, just haven't gotten back into spec mode lately...

[17:01] *** Maghnus joined
[17:02] <TimToady> takes more brainpower than mere STD debugging, it seems...

[17:05] *** lumi joined
[17:05] <TimToady> or at least a different brainstate than I've been in recently

[17:09] * kolibrie pulls TimToady's recent patches

[17:11] <kolibrie> looks good

[17:12] <kolibrie> now if I want to play with my match object, I suppose I can do that, rather than calling 'hash' on it?

[17:13] <TimToady> sure

[17:13] *** lumi left
[17:14] <kolibrie> okay, I'll play with it

[17:14] <TimToady> there's lots of extra gunk in there though because it's really a Cursor

[17:15] <kolibrie> it follows the the interface described in the synopsis?

[17:15] <TimToady> kinda

[17:15] <TimToady> positionals are really hashed 0, 1, etc

[17:16] *** tye left
[17:16] <TimToady> and I'm not sure what it does with "make" yet

[17:16] <TimToady> it's a little hard to get a Perl 5 object to actually behave like a Capture

[17:16] <kolibrie> to get the string value a rule matched, just use the rule name as a method, I'm guessing

[17:17] <TimToady> currently, use ->text

[17:17] <kolibrie> okay

[17:17] <kolibrie> how about things captured via () or <()>

[17:18] <TimToady> ->list

[17:18] *** Eevee joined
[17:18] <TimToady> ->item is supposed to return the "result" object

[17:18] <kolibrie> okay, and result is where <()> goes

[17:18] <TimToady> neither of those are heavily tested

[17:19] <TimToady> dunno if <()> is implemented right yet, untested

[17:19] *** zostay joined
[17:20] <TimToady> probably will just find missing methods

[17:20] *** Lorn left
[17:20] *** Lorn joined
[17:20] <kolibrie> maybe I can exercise this stuff a bit - or maybe not - driving to NH tomorrow, then inlaws without Internet, then YAPC

[17:22] <TimToady> try to avoid .* too if you mean, say, \N*

[17:22] <kolibrie> ok

[17:22] <TimToady> .* will make cursor objects for every possible position for the rest of the file

[17:22] <TimToady> because p5 isn't lazy enough

[17:23] <TimToady> biab &

[17:23] *** eternaleye_ joined
[17:25] *** rian left
[17:26] *** stef_ joined
[17:26] *** stef_ left
[17:28] *** rian joined
[17:31] *** sscaffidi left
[17:31] *** sscaffidi_ joined
[17:35] *** nothingmuch joined
[17:40] *** nothingmuch left
[17:42] *** nothingmuch joined
[17:42] *** nothingmuch left
[17:42] *** nothingmuch joined
[17:42] *** barney joined
[17:49] *** oltec left
[17:49] *** IllvilJa joined
[17:52] *** lumi joined
[17:54] *** alester left
[17:58] <Auzon> rakudo: say 10 ** 1.8

[17:58] <p6eval> rakudo r28238 OUTPUT[63.0957␤]

[17:58] *** IllvilJa left
[18:01] *** donaldh left
[18:01] *** lumi left
[18:02] *** donaldh joined
[18:04] *** rdice left
[18:04] *** drbean left
[18:05] *** rdice joined
[18:05] *** drbean joined
[18:06] *** drbean left
[18:06] *** drbean joined
[18:07] *** lumi joined
[18:12] <pugs_svnbot> r20761 | lwall++ | [STD] move ws caching logic to Cursor

[18:14] *** lumi left
[18:14] *** lumi joined
[18:23] *** rindolf joined
[18:23] *** rdice left
[18:24] *** integral left
[18:24] *** rindolf left
[18:25] *** integral joined
[18:26] *** rdice joined
[18:45] *** dmq joined
[18:45] *** Eevee_ joined
[18:47] *** Eevee left
[18:51] <kolibrie> TimToady: my $r = Bogus->new($text)->$what()->text; # shows substr that matched

[18:51] <kolibrie> my $r = Bogus->new($text)->$what()->hash; # shows subrules that matched

[18:51] <kolibrie> my $r = Bogus->new($text)->$what()->greeting; # returns undey

[18:51] <kolibrie> undef

[18:53] <kolibrie> my $r = Bogus->new($text)->$what()->$what()->greeting; # also returns undef

[18:53] <kolibrie> $/<main><greeting>, is what I thought that would translate to

[18:53] <pmurias> ruoso: in http://www.nntp.perl.org/group/perl.perl6.language/2008/06/msg29270.html you meant that it's not possible to detect side effects?

[18:53] <lambdabot> Title: Re: Google index and subsets (two topics for the price of one!) - nntp.perl.org, http://tinyurl.com/6gnq94

[18:54] <pmurias> or that it only possible to throw an exception when they occur in pure code?

[18:54] <ruoso> pmurias, I meant that you have absolutely no control on what happens inside a method call

[18:55] <pmurias> tha't implementation specific

[18:55] <ruoso> that call might be dispatching a c library call, for instance, there's no way to keep track of side effects

[18:55] <ruoso> pmurias, not really... 

[18:55] <pmurias> one could use a modified valgrind

[18:55] <pmurias> (in the c case)

[18:55] <ruoso> I think it's a false assumption that any implementation might have control of a method call

[18:56] *** rdice left
[18:58] *** rdice joined
[19:04] *** rdice left
[19:07] *** rdice joined
[19:09] *** rindolf joined
[19:10] <TimToady> kolibrie: dump it out in yaml and see what's there

[19:11] <TimToady> you probably need a ->{greeting} somewhere in p5-land

[19:14] <kolibrie> TimToady: my $r = Bogus->new($text)->$what()->{greeting}; # has stuff in it, but ...

[19:14] <kolibrie> hmm

[19:14] <kolibrie> now it's working

[19:14] <kolibrie> my $r = Bogus->new($text)->$what()->{greeting}->text

[19:15] <kolibrie> that makes me feel better

[19:15] *** felipe left
[19:16] <kolibrie> but you are right, make does not work (seems to be ignored), and <()> does not work (blows up)

[19:17] <TimToady> basically, I've only been implementing things I need for STD  :)

[19:17] <TimToady> well, I've been implementing more than that, but mostly only testing what STD wants

[19:17] <kolibrie> and I've been trying to figure out how to need only what you've been needing (simplify my needs)

[19:17] <TimToady> though, to be sure, STD wants a lot...

[19:18] <TimToady> Cursor5 is intended for more general use, but gimme5 is really only for translate STD until STD can translate itself

[19:20] <kolibrie> so should I be using Cursor5 directly?

[19:20] * kolibrie likes being able to get back working code from gimme5

[19:23] <TimToady> gimme5 is useful for transliterating a subset of p6 to p5-on-Cursor5

[19:24] <TimToady> and as you can see from the output, the p5 you want to write on Cursor5 is not intuitively obvious

[19:24] <kolibrie> and I'd rather write perl 6, if I'm writing grammars especially

[19:24] <TimToady> though it would look prettier if p5 had the primitives to write it in the correct order

[19:25] *** japhb left
[19:25] <kolibrie> so I'm happy with gimme5 so far - much faster than any of the other implementations I've played with

[19:26] <TimToady> or once we switch to iterator objects, we can probably come up with constructs that pass values left-to-right rather than right-to-left

[19:26] <TimToady> actually, the lists can go left-to-right if you use foreach instead of map, and it used to be that way

[19:27] <TimToady> except that p5 doesn't return all the loop values

[19:27] <kolibrie> bummer

[19:28] *** araujo joined
[19:38] *** IllvilJa joined
[19:38] *** |Jedai| left
[19:44] *** Jedai joined
[19:55] *** renormalist joined
[19:57] *** felipe joined
[20:05] *** rdice left
[20:05] *** drbean left
[20:05] *** ruoso left
[20:05] *** apeiron left
[20:05] *** rian left
[20:05] *** wknight8111 left
[20:05] *** cookys left
[20:05] *** rafl left
[20:05] *** kanru left
[20:05] *** gbacon left
[20:05] *** baest left
[20:05] *** Jedai left
[20:05] *** Eevee_ left
[20:05] *** sscaffidi_ left
[20:05] *** eternaleye_ left
[20:05] *** pbuetow left
[20:05] *** cmarcelo left
[20:05] *** silug left
[20:05] *** qmole left
[20:05] *** donaldh left
[20:05] *** alanhaggai left
[20:05] *** TJCRI left
[20:06] *** iblechbot left
[20:06] *** ting left
[20:06] *** aindilis left
[20:06] *** charsbar left
[20:06] *** sri_work left
[20:06] *** lambdabot left
[20:06] *** tobeya left
[20:06] *** kst left
[20:06] *** zostay left
[20:06] *** Maghnus left
[20:06] *** peepsalot left
[20:06] *** elmex left
[20:06] *** Khisanth left
[20:06] *** jan left
[20:06] *** pugs_svnbot left
[20:06] *** cosimo left
[20:06] *** xdg left
[20:06] *** thepler left
[20:06] *** wolverian left
[20:06] *** audreyt left
[20:06] *** buu left
[20:06] *** felipe left
[20:06] *** rindolf left
[20:06] *** pjcj left
[20:06] *** Gothmog_ left
[20:06] *** stevan_ left
[20:06] *** xinming left
[20:06] *** yahooooo left
[20:06] *** mj41 left
[20:06] *** BinGOs left
[20:06] *** Grrrr left
[20:06] *** jjore left
[20:06] *** yath left
[20:06] *** nnunley left
[20:06] *** Juerd left
[20:06] *** lisppaste3 left
[20:06] *** lumi left
[20:06] *** cognominal_ left
[20:06] *** osfameron left
[20:06] *** awwaiid left
[20:06] *** bnjmn-- left
[20:06] *** c1sung left
[20:06] *** fullermd left
[20:06] *** arguile left
[20:06] *** Caelum left
[20:06] *** allbery_b left
[20:06] *** erikh left
[20:06] *** Maddingue left
[20:06] *** IllvilJa left
[20:06] *** araujo left
[20:06] *** Lorn left
[20:06] *** jhorwitz left
[20:06] *** p6eval left
[20:06] *** kane_ left
[20:06] *** mtve left
[20:06] *** jiing left
[20:06] *** tcliou_ left
[20:06] *** cj left
[20:06] *** buubot left
[20:06] *** Tene left
[20:06] *** avar left
[20:06] *** renormalist left
[20:06] *** dmq left
[20:06] *** nothingmuch left
[20:06] *** justatheory left
[20:06] *** pmurias left
[20:06] *** [particle] left
[20:06] *** Patterner left
[20:06] *** agentzh left
[20:06] *** smtms left
[20:06] *** speckbot left
[20:06] *** clkao left
[20:06] *** jrockway left
[20:06] *** obra left
[20:06] *** moritz_ left
[20:06] *** IRSeekBot left
[20:06] *** LCamel left
[20:06] *** SubStack left
[20:06] *** nipotan left
[20:09] *** TimToady joined
[20:09] *** felipe joined
[20:09] *** renormalist joined
[20:09] *** Jedai joined
[20:09] *** IllvilJa joined
[20:09] *** araujo joined
[20:09] *** rindolf joined
[20:09] *** Eevee_ joined
[20:09] *** dmq joined
[20:09] *** lumi joined
[20:09] *** drbean joined
[20:09] *** donaldh joined
[20:09] *** nothingmuch joined
[20:09] *** sscaffidi_ joined
[20:09] *** rian joined
[20:09] *** eternaleye_ joined
[20:09] *** Lorn joined
[20:09] *** zostay joined
[20:09] *** Maghnus joined
[20:09] *** alanhaggai joined
[20:09] *** justatheory joined
[20:09] *** peepsalot joined
[20:09] *** TJCRI joined
[20:09] *** pbuetow joined
[20:09] *** pmurias joined
[20:09] *** [particle] joined
[20:09] *** wknight8111 joined
[20:09] *** sri_work joined
[20:09] *** iblechbot joined
[20:09] *** jhorwitz joined
[20:09] *** cmarcelo joined
[20:09] *** pjcj joined
[20:09] *** elmex joined
[20:09] *** ruoso joined
[20:09] *** Patterner joined
[20:09] *** lambdabot joined
[20:09] *** apeiron joined
[20:09] *** Khisanth joined
[20:09] *** Gothmog_ joined
[20:09] *** cognominal_ joined
[20:09] *** tobeya joined
[20:09] *** agentzh joined
[20:09] *** ting joined
[20:09] *** stevan_ joined
[20:09] *** jan joined
[20:09] *** osfameron joined
[20:09] *** irc.freenode.net sets mode: +o TimToady

[20:09] *** xinming joined
[20:09] *** cookys joined
[20:09] *** pugs_svnbot joined
[20:09] *** bnjmn-- joined
[20:09] *** rafl joined
[20:09] *** kst joined
[20:09] *** kanru joined
[20:09] *** p6eval joined
[20:09] *** silug joined
[20:09] *** yahooooo joined
[20:09] *** aindilis joined
[20:09] *** cosimo joined
[20:09] *** smtms joined
[20:09] *** gbacon joined
[20:09] *** awwaiid joined
[20:09] *** charsbar joined
[20:09] *** qmole joined
[20:09] *** kane_ joined
[20:09] *** baest joined
[20:09] *** bbkr_ joined
[20:09] *** dalek joined
[20:09] *** viklund joined
[20:09] *** spinclad joined
[20:09] *** yves joined
[20:09] *** pmichaud joined
[20:09] *** pasteling joined
[20:09] *** ilbot2 joined
[20:09] *** meteorjay joined
[20:09] *** broquaint joined
[20:09] *** kcwu joined
[20:09] *** simcop2387 joined
[20:09] *** rhr joined
[20:09] *** perlbot joined
[20:09] *** diakopter joined
[20:09] *** PerlJam joined
[20:09] *** gugod joined
[20:09] *** kolibrie joined
[20:09] *** Auzon joined
[20:09] *** cls_bsd_ joined
[20:09] *** TreyHarris joined
[20:09] *** ingy joined
[20:09] *** hcchien joined
[20:09] *** SamB joined
[20:09] *** Southen joined
[20:09] *** rakudo_svn joined
[20:09] *** mj41 joined
[20:09] *** BinGOs joined
[20:09] *** tcliou_ joined
[20:09] *** erikh joined
[20:09] *** yath joined
[20:09] *** c1sung joined
[20:09] *** fullermd joined
[20:09] *** lisppaste3 joined
[20:09] *** avar joined
[20:09] *** jiing joined
[20:09] *** wolverian joined
[20:09] *** moritz_ joined
[20:09] *** nnunley joined
[20:09] *** allbery_b joined
[20:09] *** thepler joined
[20:09] *** audreyt joined
[20:09] *** xdg joined
[20:09] *** buu joined
[20:09] *** Caelum joined
[20:09] *** clkao joined
[20:09] *** Juerd joined
[20:09] *** jjore joined
[20:09] *** mtve joined
[20:09] *** SubStack joined
[20:09] *** cj joined
[20:09] *** obra joined
[20:09] *** buubot joined
[20:09] *** speckbot joined
[20:09] *** Tene joined
[20:09] *** nipotan joined
[20:09] *** IRSeekBot joined
[20:09] *** LCamel joined
[20:09] *** Maddingue joined
[20:09] *** arguile joined
[20:09] *** jrockway joined
[20:09] *** Grrrr joined
[20:09] *** Jedai left
[20:10] *** Jedai joined
[20:11] *** rdice joined
[20:11] *** cjfields joined
[20:12] <pugs_svnbot> r20762 | diakopter++ | [yap6] finished the refactoring to cursoriness.

[20:12] <pugs_svnbot> r20762 | diakopter++ | Next modification is to adopt the pruning caching specified

[20:12] <pugs_svnbot> r20762 | diakopter++ | here: http://cs.uwindsor.ca/~hafiz/PADL_PAPER_FINAL.pdfx

[20:12] *** schmalbe joined
[20:12] *** barney left
[20:12] *** alanhaggai left
[20:12] <diakopter> without the trailing x in that url

[20:12] <diakopter> silly EDIT.COM

[20:12] *** donaldh left
[20:13] *** pmurias left
[20:14] <stevan_> hmm, is STD in svn somewhere?

[20:14] <[particle]> yesa

[20:14] <[particle]> http://svn.pugscode.org/pugs/src/perl6/STD.pm

[20:14] <stevan_> excellent, thank [particle] 

[20:15] *** Eevee__ joined
[20:17] *** Eevee_ left
[20:19] *** IllvilJa left
[20:19] <diakopter> TimToady: I've been struggling to eliminate the cyclicalcy of this grammar...

[20:24] <xinming> hyy@G7u

[20:25] <xinming> Oops. sorry. wrong channel. 

[20:30] <pugs_svnbot> r20763 | diakopter++ | [yap6]

[20:30] <pugs_svnbot> r20763 | diakopter++ | off-by-1 error in syntax error line numbers

[20:30] <pugs_svnbot> r20763 | diakopter++ | typo in Parser 

[20:30] <TimToady> I find most cycles are broken by EXPR

[20:31] <diakopter> I find most cycles are created by EXPR :P

[20:31] <diakopter> at least, my edition

[20:31] <diakopter> which is admittedly vastly different

[20:32] *** rindolf left
[20:34] <TimToady> your EXPR is top-down, is it not?

[20:34] <diakopter> yeah

[20:58] *** schmalbe left
[21:03] *** peepsalot left
[21:08] *** rdice left
[21:09] *** renormalist left
[21:11] <speckbot> r14547 | larry++ | change most left-associative short-circuit ops to list-associative

[21:11] <speckbot> r14547 | larry++ | x and xx are now left associative

[21:11] <speckbot> r14547 | larry++ | define what associativity means for unary ops

[21:18] *** meppl joined
[21:33] <spinclad> TimToady: 'Similar to the C<[^^]> reduce operator, but short-circuits in the sense'...: s/[^^]/[^]/ ?

[21:34] *** pmurias joined
[21:34] <pmurias> yap6: 1

[21:35] <p6eval> yap6 r20763 No output (you need to produce output to STDOUT)

[21:35] <pmurias> elf: say 1

[21:35] <p6eval> OUTPUT[1␤]

[21:35] <pmurias> yap6: say 1

[21:35] <diakopter> pmurias: yap6 is broken; please disregard it for now

[21:35] *** perl7 joined
[21:35] <diakopter> :) still fixing

[21:35] <pmurias> diakopter: yap6: or yap6

[21:35] <p6eval> yap6 r20763 No output (you need to produce output to STDOUT)

[21:35] <diakopter> both

[21:35] <diakopter> :P

[21:37] * pmurias can't wait to add the strictures in

[21:37] <pmurias> ;)

[21:41] <diakopter> strictures?

[21:41] <pmurias> use strict

[21:41] <diakopter> oh; heh

[21:44] <spinclad> TimToady: (^  at S03:1206)

[21:47] <pmurias> sleep&

[21:47] *** pmurias left
[21:49] <diakopter> aww

[21:50] <pugs_svnbot> r20764 | diakopter++ | [yap6] unrelaxed strictures pmurias+++++++++++++++++++

[21:50] <pugs_svnbot> r20764 | diakopter++ | fixed a few more things; yap6 still not ready for yap6:

[22:02] *** perl7 left
[22:04] *** [particle] left
[22:05] *** meppl left
[22:05] *** cjfields left
[22:06] *** armagad joined
[22:07] *** meppl joined
[22:07] *** justatheory left
[22:09] *** Limbic_Region joined
[22:13] *** sscaffidi_ left
[22:15] *** TJCRI left
[22:18] <meppl> good night

[22:18] *** Auzon left
[22:19] *** meppl left
[22:20] *** Auzon joined
[22:20] *** iblechbot left
[22:24] *** jhorwitz left
[22:30] *** simcop2387 left
[22:33] *** sscaffidi joined
[22:42] *** eternaleye_ left
[22:52] *** yahooooo left
[22:53] *** yahooooo joined
[23:01] *** japhb joined
[23:04] *** cmarcelo left
[23:04] <Auzon> perl6: (1..^6).perl.say

[23:04] <p6eval> kp6 r20764: OUTPUT[syntax error at position 0, line 1 column 0:␤(1..^6).perl.sa␤^ HERE␤]

[23:04] <p6eval> ..pugs: OUTPUT[(1, 2, 3, 4, 5)␤]

[23:04] <p6eval> ..rakudo r28245: OUTPUT[./parrot: error while loading shared libraries: /home/evalenv/parrot/blib/lib/libparrot.so.0.6.2: invalid ELF header␤]

[23:04] <p6eval> ..elf r20764: OUTPUT[syntax error at (eval 14) line 3, near "..^"␤ at ./elf_f_faster line 4496␤]

[23:05] <Auzon> rakudo: say "are you broken?"

[23:05] <p6eval> rakudo r28245 OUTPUT[are you broken?␤]

[23:05] <Auzon> rakudo: (1..^6).perl.say

[23:05] <p6eval> rakudo r28245 OUTPUT[Could not find non-existent sub infix:..^␤current instr.: '_block11' pc 35 (EVAL_14:19)␤

[23:05] <Auzon> rakudo: (1 ..^ 6).perl.say

[23:05] <p6eval> rakudo r28245 OUTPUT[Could not find non-existent sub infix:..^␤current instr.: '_block11' pc 35 (EVAL_12:19)␤

[23:05] <Auzon> rakudo: (1 .. ^6).perl.say

[23:05] <p6eval> rakudo r28245 OUTPUT[1..0..5␤]

[23:12] *** [particle] joined
[23:13] * diakopter gave up removing cyclicality; implementing instead http://cs.uwindsor.ca/~hafiz/PADL_PAPER_FINAL.pdf (as earlier mentioned)

[23:15] *** IllvilJa joined
[23:16] <Auzon> rakudo: my @a = 1 .. 6; @a>>++; @a.perl.say

[23:16] <p6eval> rakudo r28245 OUTPUT[Statement not terminated properly at line 1, near ">>++; @a.p"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[23:16] <Auzon> rakudo: my @a = 1 .. 6; @a.>>.++; @a.perl.say

[23:16] <p6eval> rakudo r28245 OUTPUT[Statement not terminated properly at line 1, near ".>>.++; @a"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[23:16] <Auzon> pugs: my @a = 1 .. 6; @a.>>.++; @a.perl.say

[23:16] <p6eval> OUTPUT[[1, 2, 3, 4, 5, 6]␤]

[23:17] <Auzon> pugs: my @a = 1 .. 6; @a>>++; @a.perl.say

[23:17] <p6eval> OUTPUT[[1, 2, 3, 4, 5, 6]␤]

[23:17] <Auzon> pugs: my @a = 1 .. 6; @a = @a>>++; @a.perl.say

[23:17] <p6eval> OUTPUT[[*** Can't modify constant item: VInt 1␤    at /tmp/V5w9e66xGf line 1, column 22-28, *** Can't modify constant item: VInt 2␤    at /tmp/V5w9e66xGf line 1, column 22-28, *** Can't modify constant item: VInt 3␤    at /tmp/V5w9e66xGf line 1, column 22-28, *** Can't modify constant item: VInt 4␤

[23:17] <p6eval> ..   at /tmp/V5w9e66xGf line 1, column 22-28, ***...

[23:19] <Auzon> pugs: my @a = 1 .. 6; @a = @a>>.++; @a.perl.say

[23:19] <p6eval> OUTPUT[[*** Can't modify constant item: VInt 1␤    at /tmp/deEyccQH9k line 1, column 22-29, *** Can't modify constant item: VInt 2␤    at /tmp/deEyccQH9k line 1, column 22-29, *** Can't modify constant item: VInt 3␤    at /tmp/deEyccQH9k line 1, column 22-29, *** Can't modify constant item: VInt 4␤

[23:19] <p6eval> ..   at /tmp/deEyccQH9k line 1, column 22-29, ***...

[23:19] <Auzon> pugs: my @a = 1 .. 6; @a>>.++; @a.perl.say

[23:19] <p6eval> OUTPUT[[1, 2, 3, 4, 5, 6]␤]

[23:20] <Auzon> bzzt, wrong :-/

[23:23] *** yahooooo2 joined
[23:24] *** yahooooo left
[23:25] *** IllvilJa left
[23:27] *** Lunchy left
[23:27] *** Lunchy joined
[23:28] <speckbot> r14548 | larry++ | clarification of reduced short-circuit ops

[23:35] *** sscaffidi left
[23:50] <Auzon> perl6: say (1,2,3,4) >>+<< (1,2,3,4)

[23:50] <p6eval> kp6 r20764: OUTPUT[syntax error at position 14, line 1 column 14:␤say (1,2,3,4) >>+<< (1,2,3,4␤              ^ HERE␤]

[23:50] <p6eval> ..pugs: OUTPUT[2468␤]

[23:50] <p6eval> ..rakudo r28245: OUTPUT[Statement not terminated properly at line 1, near ">>+<< (1,2"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤

[23:50] <p6eval> ..elf r20764: OUTPUT[Useless use of a constant in void context at (eval 14) line 3.␤Useless use of a constant in void context at (eval 14) line 3.␤2␤]

[23:51] <speckbot> r14549 | larry++ | Fixes suggested by Ryan++

[23:51] * diakopter tries to help memoize() battle it out with weaken()

[23:52] *** bacek joined
[23:53] *** IllvilJa joined
[23:55] <Auzon> rakudo: class Foo {my $i = 0; has $.id = $i++;}; my $o = Foo.new; say $o.id;

[23:55] <p6eval> rakudo r28245 OUTPUT[Method 'lvalue' not found for invocant of class 'PAST::Stmts'␤current instr.: 'parrot;PAST::Compiler;as_post' pc 2787 (src/PAST/Compiler.pir:719)␤

[23:55] <Auzon> rakudo: class Foo {my $i = 0; has $.id; $.id = $i++;}; my $o = Foo.new; say $o.id;

[23:55] *** p6eval left
[23:55] *** p6eval joined
[23:56] <Auzon> pugs: class Foo {my $i = 0; has $.id; $.id = $i++;}; my $o = Foo.new; say $o.id;

[23:56] <p6eval> OUTPUT[*** Undeclared variable: ("$__SELF__",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xb69b7c24>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xb69b8074>}),("@_",PELexical {pe_type = (mkType "Array"), pe_proto = <Array:0xb69b7ca4>,

[23:56] <p6eval> ..pe_flags = MkEntryFlags {ef_isContext = False}, pe_st...

[23:57] <Auzon> pugs: class Foo {my $i = 0; has $.id = $i++;}; my $o = Foo.new; say $o.id;

[23:57] <p6eval> OUTPUT[0␤]

[23:57] <Auzon> pugs: class Foo {my $i = 0; has $.id = $i++;}; my $o = Foo.new; my $p = Foo.new; say $p.id;

[23:57] <p6eval> OUTPUT[0␤]

[23:59] <Auzon> pugs: class Foo {my $i = 0; has $.id = $i++;}; (1..2).map({Foo.new}).perl.say

[23:59] <p6eval> OUTPUT[(Foo.new(("id" => 0),), Foo.new(("id" => 0),))␤]

