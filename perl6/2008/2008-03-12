[00:02] *** cmarcelo joined
[01:00] *** ikeda joined
[01:06] *** ikeda_ joined
[01:08] <meppl> good night

[02:05] *** [particle1 joined
[02:10] *** araujo joined
[02:53] *** stevan__ joined
[03:10] *** BinGOs joined
[03:30] *** simcop2387-vnc joined
[03:35] <pugs_svnbot> r20110 | putter++ | [elf_on_rakudo] -e 'class A {has $.y; method m(){$.y}}' is plausible.  -e '3+4' goes boom.

[03:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20110

[03:35] <lambdabot> Title: Changeset 20110 - Pugs - Trac

[03:35] <mncharity> good night &

[03:37] *** cmarcelo joined
[03:40] *** r0bby joined
[03:45] *** pjcj joined
[04:01] *** _SamB_ joined
[04:03] *** schemacs joined
[04:04] *** SamB joined
[04:20] *** RayMagini joined
[04:26] *** stevan_ joined
[04:41] *** Jaywalker joined
[04:41] *** justatheory joined
[04:47] *** pcbuetow joined
[04:50] *** lyokato_ joined
[05:31] *** schemacs left
[05:59] <rakudo_svn> r26321 | duff++ | [rakudo] implement auto{increment,decrement} semantics as per S03

[06:02] *** penk joined
[06:27] *** devogon joined
[06:38] *** bsb left
[06:38] *** kst joined
[06:43] *** kst` joined
[07:36] *** yahooooo joined
[07:42] *** araujo joined
[07:46] *** cognominal_ joined
[07:48] *** cognominal_ joined
[07:57] *** Aankhen`` joined
[08:01] *** Daveman joined
[08:10] *** iblechbot joined
[08:13] *** wknight8111 joined
[08:15] *** agentzh joined
[08:17] *** renormalist joined
[08:21] *** alc joined
[08:35] *** kane_ joined
[09:00] *** mj41_ joined
[09:16] *** IRSeekBot joined
[09:17] *** lyokato_ joined
[09:19] *** meppl joined
[09:29] *** smtms joined
[09:34] *** BinGOs joined
[10:07] *** clintongormley joined
[10:11] *** agentzh left
[10:17] *** wknight8111 joined
[10:22] *** ebassi joined
[10:39] *** agentzh joined
[10:53] *** chris2 joined
[10:58] *** ruoso joined
[11:22] *** araujo joined
[11:35] *** ruz_ joined
[12:04] *** iblechbot joined
[12:06] *** araujo joined
[12:21] *** ebassi joined
[12:35] *** justatheory joined
[12:48] *** Aankhen`` joined
[12:55] *** cosimo_ joined
[13:09] *** cmarcelo joined
[13:09] *** pmurias joined
[13:13] <pmurias> ruoso: REFERENCE and RELEASE is boilerplate for objects which don't do refcounting?

[13:13] <ruoso> yes...

[13:14] <ruoso> REFERENCE and RELEASE is just the delegation of the refcounting... not the refcounting per se

[13:14] <pmurias> the same function could be used everywhere right?

[13:16] <pmurias> instead of a new one doing the same thing being part of the boilerplate?

[13:17] *** FurnaceBoy joined
[13:17] <ruoso> hmmm... maybe... yes...

[13:23] <pmurias> the next thing according to the ROADMAP is lowlevel arrays should they live in lowlevel_array.c?

[13:23] <ruoso> I actually have to rename lowlevel_method.c, I decided to call them smop_s1p_foo.c

[13:23] <ruoso> like smop_s1p_scalar.c

[13:24] <ruoso> so array would be smop_s1p_array.c

[13:24] <pmurias> how should _release and _reference functions be called?

[13:24] <ruoso> SMOP_REFERENCE(interpreter,value)

[13:25] <ruoso> SMOP_RELEASE(interpreter,value)

[13:25] <ruoso> they are macros defined in include/smop_base.h

[13:25] <pmurias> ;) named

[13:25] <ruoso> ah

[13:25] <ruoso> ok..

[13:26] <ruoso> I need to take an extra look on that to avoid symbol clashing... but you can just have them called smop_s1p_array_reference

[13:26] <ruoso> that's safe...

[13:27] <ruoso> and as they can be static, I don't think they can actually cause symbol clashing...

[13:29] *** Psyche^ joined
[13:29] <pmurias> ruoso: what i mean they should be shared between diffrent responder interfaces

[13:29] <ruoso> ah... I see..

[13:30] <ruoso> well... they are related to the default smop lowlevel implementation... so you could name them smop_lowlevel_generic_reference

[13:31] <ruoso> and add it into the smop_lowlevel.h include

[13:31] <pmurias> ok

[13:43] <pmurias> sm0p.pl is slow :(

[13:47] <pmurias> ruoso: why do you end some string literals with '\0'?

[13:48] <ruoso> no reason at all

[13:48] <ruoso> just dumbness of my part

[13:56] *** wknight8111 joined
[14:00] <pugs_svnbot> r20111 | pmurias++ | [smop]

[14:00] <pugs_svnbot> r20111 | pmurias++ | smop_lowlevel_generic_{release,reference}

[14:00] <pugs_svnbot> r20111 | pmurias++ | array stub

[14:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20111

[14:00] <lambdabot> Title: Changeset 20111 - Pugs - Trac

[14:01] *** masak joined
[14:04] <ruoso> pmurias, about sm0p.pl... that's why I've been asking [particle1 to fix the bug in rakudo so i can run it using it...

[14:07] <ruoso> pmurias, btw... I'm setting a convention on this lowlevel types symbol names

[14:07] <ruoso> it should be SMOP__S1P__Array instead of SMOP__LOWLEVEL__array

[14:12] <pugs_svnbot> r20112 | pmurias++ | [smop] fixed according to naming convection

[14:12] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20112

[14:12] <lambdabot> Title: Changeset 20112 - Pugs - Trac

[14:13] <ruoso> pmurias, you missed the __LOWLEVEL__ part

[14:13] <ruoso> it should be __S1P__

[14:13] <ruoso> because this is just *one* lowlevel implementation

[14:13] <ruoso> not *the* lowlevel implementation... as there might be many others...

[14:18] <pugs_svnbot> r20113 | pmurias++ | [smop] realy fixed the name

[14:18] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20113

[14:18] <lambdabot> Title: Changeset 20113 - Pugs - Trac

[14:19] *** Psyche^ joined
[14:25] *** TJCRI joined
[14:30] <ruoso> pmurias++

[14:35] *** Alias__ joined
[15:02] <pmurias> ;)

[15:29] *** alester joined
[15:34] *** hcchien joined
[15:35] *** kanru joined
[16:12] *** kst`` joined
[16:49] *** ikeda joined
[16:53] *** clintongormley left
[16:55] *** BrutusIunius joined
[16:58] *** BrutusIunius joined
[17:02] *** eternaleye joined
[17:09] *** ikeda_ joined
[17:10] *** justatheory joined
[17:16] *** smtms joined
[17:18] *** TJCRI joined
[17:24] *** meppl joined
[17:24] *** ikeda joined
[17:37] *** BrutusIunius joined
[17:40] *** ikeda joined
[17:43] *** eternaleye_ joined
[17:46] <rakudo_svn> r26335 | particle++ | [rakudo] remove accidentally committed test code by duff

[17:50] <cognominal_> is when cases are supposed to fall thru like in C?

[17:51] *** Helios joined
[17:56] *** ikeda joined
[17:56] *** Helios_ joined
[18:00] *** rindolf joined
[18:00] *** ikeda joined
[18:07] <eternaleye_> cognominal_: I don't believe so; from what I've seen you need to use `next' to do that.

[18:08] *** pjcj joined
[18:10] *** rdice joined
[18:16] *** ikeda joined
[18:16] <cognominal_> hum, rakudo falls thru

[18:19] <cognominal_> that's the missing expression business

[18:19] <cognominal_> s/expression/exception/

[18:20] *** spx2 joined
[18:31] *** ikeda joined
[18:43] *** Psyche^ joined
[18:47] *** ikeda joined
[18:47] *** GabrielVieira joined
[18:49] <pugs_svnbot> r20114 | putter++ | [elf_on_rakudo] +basic exprs.  -e 'my $x = (2+3)*4' handled.

[18:49] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20114

[18:49] <lambdabot> Title: Changeset 20114 - Pugs - Trac

[18:55] *** IllvilJa joined
[19:03] *** ikeda joined
[19:07] *** Tedd1 joined
[19:18] *** ikeda joined
[19:20] *** ikeda joined
[19:21] *** renormalist joined
[19:23] *** barney joined
[19:29] *** ikeda joined
[19:37] *** ikeda joined
[19:45] *** BrutusIunius joined
[19:45] *** dduncan joined
[19:51] *** r0bby joined
[20:03] *** dduncan left
[20:15] *** Jamtech joined
[20:40] *** TJCRI joined
[20:53] *** Psyche^ joined
[21:25] *** Lorn joined
[21:38] <pugs_svnbot> r20115 | putter++ | [elf_on_rakudo] +simple quotes and parameters.

[21:38] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20115

[21:38] <lambdabot> Title: Changeset 20115 - Pugs - Trac

[21:49] <mncharity> A while back someone pointed to a CPAN module which permitted defining methods on non-blessed references (eg, on ARRAY.  so my $a = [];  $a->mumble(); can work).  Anyone remember what it is called?

[21:53] <mncharity> http://search.cpan.org/~chocolate/autobox-2.23/autobox.pod and http://search.cpan.org/~stevan/Moose-Autobox-0.06/lib/Moose/Autobox.pm

[21:53] <lambdabot> Title: autobox - call methods on builtin types - search.cpan.org

[22:02] <mncharity> I wonder if one could use an autobox-like approach to make lexical overriding of blessed classes possible.  So an object blessed Foo might behave as if it were blessed Bar instead (generally Bar will @ISA Foo), permitting lexically scoped extension and overriding of an object's method vocabulary.

[22:26] *** Lorn joined
[22:32] *** eternaleye joined
[23:17] *** jferrero joined
[23:31] <meppl> good night

[23:35] <pugs_svnbot> r20116 | putter++ | [elf_on_rakudo] +method calls.  self.m(3) .m(3) $x.m(3)

[23:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/20116

[23:35] <lambdabot> Title: Changeset 20116 - Pugs - Trac

[23:58] *** eternaleye_ joined
