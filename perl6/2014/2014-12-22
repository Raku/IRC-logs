[00:01] *** nige left
[00:14] <raiph> vendethiel: i'm using chrome; some key stuff isn't displaying right

[00:14] <vendethiel> raiph: explain?

[00:16] <raiph> "... 3 usages, when there’s only one.\n $ perl6 ./main.p6 --help \n Usage: \n tmp.p6  \n tmp.p6  (File)"

[00:16] <raiph> er

[00:16] <vendethiel> not sure I get it

[00:16] <raiph> i'm wrong

[00:17] <raiph> er

[00:17] <raiph> no, i think i'm right

[00:17] *** telex left
[00:17] <vendethiel> can you screenshot it?

[00:17] <vendethiel> I'm not sure I Get what's wrong

[00:18] <raiph> gimme a mo

[00:18] <raiph> (will screenshot)

[00:18] *** telex joined
[00:21] <vendethiel> thanks!

[00:26] *** Mso150 left
[00:27] <raiph> vendethiel: The first couple screenshot apps aren't working for me

[00:28] <vendethiel> raiph: how old is your rakudo :-)?

[00:29] <raiph> here's what the html source is for one bit: "<pre>$ perl6 ./main.p6 --help Usage: tmp.p6</pre>"

[00:29] <raiph> that's from your advent

[00:30] <raiph> immediately preceded by "<p>And now, the USAGE is correct:</p>"

[00:30] <vendethiel> raiph: how old is your rakudo :-)?

[00:30] <raiph> not the gist, but http://perl6advent.wordpress.com/2014/12/22/the-cool-subset-of-main/

[00:31] <vendethiel> raiph: how old is your rakudo ?

[00:31] <raiph> i last rakudobrew'd yesterday but why is that relevant?

[00:31] <raiph> i'm not using it in relation to your advent

[00:32] <raiph> i'm just reading the page

[00:32] <vendethiel> ôh...

[00:32] <raiph> and some of the text that was in your gist is missing on wordpress

[00:32] <vendethiel> I get it now

[00:33] <vendethiel> those are considered HTML tags

[00:34] <vendethiel> raiph: should be fixed

[00:35] <raiph> \o/

[00:35] *** Mso150 joined
[00:36] <vendethiel> raiph: I copy-pasted as HTML, and obviously the outputted <..> got in :-)

[00:37] *** atroxaper joined
[00:37] <raiph> :)

[00:39] <raiph> vendethiel: how far off am I thinking `subset` might reasonably have been called `ducktype`?

[00:39] <vendethiel> it's not part of it

[00:40] <raiph> completely unrelated?

[00:40] <vendethiel> it's part of it*. My bad.

[00:41] *** atroxaper left
[00:42] <vendethiel> raiph: you can see subset as 1) type alias 2) untagged type union/intersection 3) duck typing (.^can) 4)...

[00:43] <raiph> ok, yeah, that's the sort of thing i was thinking, thx

[00:44] <raiph> yeah, ducktype would not do subset justice, thx

[00:44] <raiph> what's 4)... ? :)

[00:47] <vendethiel> something like the custom wheres

[00:48] <vendethiel> I don't consider "* > 10" to be "duck typing"

[00:52] *** Rounin joined
[00:57] <Timbus> its like... the opposite? youre somewhat saying it specifically cannot quack..

[00:58] <Timbus> but its not really to do with object interfaces at that point

[00:58] *** cibs left
[00:59] <Timbus> i think i should have just said 'its very different.'

[01:00] *** anaeem1 joined
[01:00] *** anaeem1 left
[01:31] *** pmurias left
[01:35] *** census joined
[02:17] *** rmgk_ joined
[02:17] *** rmgk is now known as Guest10007

[02:17] *** Guest10007 left
[02:17] *** rmgk_ is now known as rmgk

[02:26] *** raiph left
[02:27] *** atroxaper joined
[02:33] *** atroxaper left
[02:33] *** Mso150 left
[02:34] *** Mso150 joined
[02:50] *** Rounin left
[02:56] *** koo6 joined
[03:06] *** vanila left
[03:26] *** adu joined
[03:29] *** BenGoldberg left
[03:45] *** Mouq joined
[03:45] <Mouq> vendethiel++: Your post should use #| instead of #= towards the end, on adding descriptive comments :)

[03:51] *** Mso150 left
[03:55] *** noganex_ joined
[03:56] *** xinming joined
[03:57] *** noganex left
[03:58] *** cibs joined
[04:02] *** atroxaper joined
[04:07] *** atroxaper left
[04:14] *** petercommand left
[04:15] *** petercommand joined
[04:16] *** petercommand is now known as Guest52641

[04:23] *** Mouq left
[04:46] *** jack_rabbit joined
[04:51] *** kst left
[04:54] *** kst joined
[05:04] *** kaare_ joined
[05:04] *** erkan left
[05:05] *** erkan joined
[05:06] *** [Coke] left
[05:06] *** [Coke]_ joined
[05:10] *** charsbar_____ joined
[05:10] *** yeltzooo9 joined
[05:11] *** ivan`` left
[05:11] *** charsbar____ left
[05:12] *** hugme joined
[05:12] *** ChanServ sets mode: +v hugme

[05:13] <census> anybody around?

[05:13] <bcode> i'm not around sorry :(

[05:13] *** ivan`` joined
[05:14] *** lestrrat joined
[05:22] *** anaeem1 joined
[05:40] *** kst left
[05:49] *** nige joined
[05:53] *** atroxaper joined
[05:54] *** noganex_ left
[05:58] *** atroxaper left
[06:05] *** noganex joined
[06:11] *** kaare_ left
[06:17] <lumimies> vendethiel++: Nice advent article! In the usage example, you have: {{{“” is because the arguments}}}, I think the fancyquotes need to be &lt;Any&gt; instead

[06:17] *** mr-foobar left
[06:27] *** denis_boyun_ joined
[06:29] <dsm> What's the best way to convert utf8 object into Buf object?

[06:34] *** dayangkun joined
[06:38] *** kaare_ joined
[06:45] *** anaeem1 left
[06:46] *** anaeem1_ joined
[06:49] *** denis_boyun_ left
[06:50] *** denis_boyun_ joined
[06:57] *** dayangkun left
[07:11] *** adu left
[07:13] *** Guest52641 left
[07:13] *** Guest52641 joined
[07:13] *** Guest52641 is now known as petercommand

[07:16] *** denis_boyun_ left
[07:31] *** kaleem joined
[07:32] *** kaleem left
[07:32] *** kaleem joined
[07:33] *** FROGGS joined
[07:33] <FROGGS> good morning

[07:33] <moritz> \o

[07:34] <moritz> http://doc.perl6.org/type/Lock # review welcome

[07:35] <dsm> m: Buf.new: "raw characters\r\n".encode

[07:35] <camelia> rakudo-moar 284c09: ( no output )

[07:35] <moritz> m: say Buf.new: "raw characters\r\n".encode

[07:35] <camelia> rakudo-moar 284c09: OUTPUT«Buf:0x<72 61 77 20 63 68 61 72 61 63 74 65 72 73 0d 0a>␤»

[07:37] <dsm> are there any better ways to convert utf8 type into Buf type? 

[07:38] <moritz> I'm not aware of any

[07:38] <Juerd> dsm: What do you mean by better?

[07:39] <dsm> encode string directly into Buf type maybe?

[07:40] *** kaleem left
[07:40] *** kaleem joined
[07:41] <moritz> Juerd: the feather replacement server is now running, and the perl6.org DNS has been updated to point to the new server

[07:41] <Juerd> moritz: That's great!

[07:41] <moritz> Juerd: but the DNS has max-TTL of 7 days, which will end on Christmas Eve

[07:42] <moritz> Juerd: so my plan is to then shut down apache on feather, see if anybody complains

[07:42] <moritz> Juerd: also add a notice to the MOTD that feather will be shut down

[07:42] <FROGGS> m: say "raw characters\r\n".encode

[07:42] <camelia> rakudo-moar 284c09: OUTPUT«Buf:0x<72 61 77 20 63 68 61 72 61 63 74 65 72 73 0d 0a>␤»

[07:43] <FROGGS> dsm: ^^

[07:43] <moritz> that's just Buf -> Buf :-)

[07:43] <Juerd> moritz: How about 2 and 3?

[07:43] <moritz> Juerd: 3 was only used for dalek, that one is migrated

[07:43] <moritz> Juerd: 2 hosted the perl6.org websites, so that's also covered

[07:43] <Juerd> Dalek had its own virtual server? Haha :)

[07:43] <dsm> m: sub f(Buf $b) {}; f("raw characters\r\n".encode)

[07:43] <camelia> rakudo-moar 284c09: OUTPUT«Type check failed in binding $b; expected 'Buf' but got 'utf8'␤  in sub f at /tmp/rFYl1buBq9:1␤  in block <unit> at /tmp/rFYl1buBq9:1␤␤»

[07:44] <Juerd> moritz: Thanks for taking care of all this

[07:44] <moritz> Juerd: 1 is what worries me a bit, because it has > 100 user accounts, and we have < 10 on the new server

[07:44] <Juerd> It never did come with any guarantees

[07:44] <moritz> Juerd: do you have the infrastructure to archive the homes on feather1 for a few months?

[07:44] <Juerd> Of course

[07:45] <Juerd> I'll simply tgz the home dirs

[07:45] <Juerd> Or txz perhaps :)

[07:46] <dsm> m: sub f(Buf $b) {}; f(Buf.new: "raw characters\r\n".encode)

[07:46] <camelia> rakudo-moar 284c09: ( no output )

[07:48] <dsm> are there a reason why utf8 type exists?

[07:48] <moritz> dsm: yes; to encode the information that a byte stream is valid UTF-8

[07:49] <Juerd> Is, or is supposed to be?

[07:49] <moritz> is

[07:49] *** rindolf joined
[07:49] <dsm> then if I want to pass byte stream which is valid UTF-8 into function like 'f' above, should I convert it to Buf type everytime? 

[07:49] <Juerd> 'cause Perl 5's "utf8 flag" sort of encodes the same information, and having it on data that isn't actually valid UTF-8 can lead to security holes.

[07:50] <Juerd> Also, "encode" is a weird term for going from bytes-with-metadata to bytes-without-metadata.

[07:50] <Juerd> Are you sure it's utf8 we're talking about, not unicode?

[07:51] <moritz> Str (on which you call "encode") isn't bytes

[07:51] <moritz> it's list of codepoints, and in future list of graphemes

[07:51] <Juerd> Str isn't utf8 either

[07:52] <moritz> correct

[07:52] <Juerd> Don't call it that, or allow others to call it that. It scares me to death :P

[07:57] <moritz> the .ccache dirs in the feather homes make up a total of 2.5G :-)

[07:59] <Juerd> Yeah, they used to be shared 

[07:59] <Juerd> Which theoretically shouldn't be an issue, but in practice lead to weird bugs

[08:00] * moritz deletes all of those that haven't been touched in half a year

[08:01] <dsm> I'm talking about compatibility of utf8 type and Buf type

[08:01] <Juerd> dsm: As I understand it, there is no utf8 type.

[08:01] <Juerd> dsm: Do you mean Str?

[08:01] <moritz> Juerd: there is an utf8 type

[08:01] <moritz> Juerd: it's a buffer type that enforces utf-8 validity

[08:01] <dsm> m: "raw characters\r\n".encode.WHAT.say

[08:01] <camelia> rakudo-moar 284c09: OUTPUT«(utf8)␤»

[08:02] <moritz> m: say utf8 ~~ Blob

[08:02] <camelia> rakudo-moar 284c09: OUTPUT«True␤»

[08:02] <Juerd> I see

[08:02] *** kst joined
[08:02] <Juerd> Why is it called utf8, not Utf8?

[08:02] <dsm> sorry

[08:02] <moritz> because it's a native/low-level/packed type

[08:02] <Juerd> Ah

[08:03] <moritz> just like int vs. Int

[08:03] <Juerd> Low level, but it does enforce things. Sounds a bit odd.

[08:03] <dsm> if I want to pass type constraint, should I convert it into Buf type everytime?

[08:03] <moritz> dsm: what type constraint should it pass?

[08:03] <moritz> dsm: and why is that type contraint Buf and not Blob?

[08:03] <dsm> pass a type constraint? sorry about my English

[08:04] <moritz> dsm: who made the type constraint?

[08:04] <dsm> https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket/Async.pm here write method

[08:05] <moritz> dsm: should probably be corrected to Blob

[08:05] <dsm> thanks

[08:06] <moritz> dsm: can you test it locally if it works when changed to Blob?

[08:06] <dsm> i'll try

[08:14] *** nige left
[08:16] *** darutoko joined
[08:18] <dsm> I think it's working(don't need to convert manually)

[08:19] <mathw> good $localtime

[08:23] *** brrt joined
[08:25] *** abraxxa joined
[08:30] *** KCL_ joined
[08:37] *** erkan left
[08:39] *** erkan joined
[08:40] *** erkan left
[08:40] *** erkan joined
[08:41] *** Akagi201 joined
[08:44] *** FROGGS left
[09:01] *** nige joined
[09:06] *** kjs_ joined
[09:13] *** spider-mario joined
[09:16] *** KCL_ left
[09:18] *** Akagi201_ joined
[09:19] *** dakkar joined
[09:19] *** chenryn joined
[09:21] <woolfy> Juerd++  moritz++   

[09:21] *** Akagi201 left
[09:21] <woolfy> Juerd & moritz so much thanks for the servers and the work and the time!!!

[09:21] <Juerd> moritz is doing all the work now :)

[09:22] <woolfy> Juerd: you have done a lot of work too, and now you have spend some time again here to discussi things with moritz, so the thanks are just!

[09:22] <Juerd> And although I never did mind much, I'm glad I won't have to fix feather anymore :)

[09:22] <woolfy> feather can be an angel...

[09:22] *** Mso150 joined
[09:23] <Juerd> It looks like feather won't live to be 10 years old.

[09:23] <Juerd> It will die at 9.

[09:32] *** atroxaper joined
[09:35] *** fhelmberger joined
[09:38] *** FROGGS joined
[09:38] *** atroxaper left
[09:48] *** gfldex joined
[09:52] *** mvuets joined
[09:52] *** telex left
[09:54] * moritz wonders how much work it is to deploy and configure selinux to a level where it actually improves security noticably

[09:54] *** telex joined
[09:55] <mathw> Usually it just gets in the way it seems :(

[09:56] <moritz> mathw: well, it seems mostly to separate service, for example prevent accidentally serving files on the www

[09:57] <moritz> mathw: ... which is pretty pointless if you have an extra VM for the web server

[09:58] <mathw> well... it's still nice

[09:58] *** FROGGS left
[09:59] <mathw> mostly I've found it to be annoying because Fedora went through a phase of shipping core packages without appropriate SELinux profiles so there were warnings triggering regularly for utterly benign things.

[09:59] *** erkan left
[10:02] *** erkan joined
[10:02] *** dalek joined
[10:02] *** ChanServ sets mode: +v dalek

[10:02] *** dalek left
[10:02] *** dalek joined
[10:02] *** ChanServ sets mode: +v dalek

[10:03] <moritz> I've just given dalek its own private /tmp and /var/tmp

[10:03] <moritz> let's see if it still works

[10:03] <dalek> doc/test: 379f6a7 | moritz++ | META.info:

[10:03] <dalek> doc/test: Test commit

[10:03] <dalek> doc/test: review: https://github.com/perl6/doc/commit/379f6a7c28

[10:05] <dalek> doc/test: e2aa35d | moritz++ | util/new-type.p6:

[10:05] <dalek> doc/test: Another test

[10:05] <dalek> doc/test: review: https://github.com/perl6/doc/commit/e2aa35df19

[10:06] <dalek> doc/test: fcd4bec | moritz++ | util/new-type.p6:

[10:06] <dalek> doc/test: Revert "Another test"

[10:06] <dalek> doc/test: 

[10:06] <dalek> doc/test: This reverts commit e2aa35df198abc215a60c7ee1598759499ee7f34.

[10:06] <dalek> doc/test: review: https://github.com/perl6/doc/commit/fcd4becc0f

[10:08] *** ptc_p6 joined
[10:09] *** dalek left
[10:09] *** dalek joined
[10:09] *** ChanServ sets mode: +v dalek

[10:09] <dalek> doc/test: 9d7b761 | moritz++ | META.info:

[10:09] <dalek> doc/test: Revert "Test commit"

[10:09] <dalek> doc/test: 

[10:09] <dalek> doc/test: This reverts commit 379f6a7c28ba1943b6f74df5b309d7c3ddae322a.

[10:09] <dalek> doc/test: review: https://github.com/perl6/doc/commit/9d7b7610b9

[10:11] <nwc10> moritz: so that it can't DOS the machine by filling the real /tmp ?

[10:12] <moritz> nwc10: or if it's compromised, read other people's /tmp/ files, or try IPC via socket files in /tmp (for example with mysql)

[10:12] <moritz> I'm stepping throw http://0pointer.net/public/systemd-nluug-2014.pdf

[10:13] <nwc10> aha, interesting. thanks

[10:14] <moritz> I've now given both dalek services (IRC and HTTP) PrivateTmp=yes, PrivateDevices=yes, ProtectSystem=full, NoNewPrivileges=yes

[10:14] <moritz> the ProtectSystem=full prevents write access to /usr and /etc

[10:17] <moritz> now I'd just need mode that supervises a process to see what resources it uses in normal operation, and then suggests capabilities to restrict

[10:20] *** virtualsue joined
[10:21] <moritz> iirc AppArmor has such a mode

[10:23] *** psch joined
[10:24] <mathw> ah that stuff is really cool

[10:24] <mathw> especially as almost nothing actually needs to write to /usr or /etc

[10:25] <psch> hi #perl6 

[10:27] <mathw> hi psch

[10:27] <psch> o/ mathw 

[10:28] <psch> i have to revise my statement re: what's missing for jvm-interop - i had forgotten about marshalling of arrays :/

[10:29] <itz> anyone building new servers might be interest in StartSSL which offers free certs

[10:30] <itz> I was able to easily add https to pl6anet.org within a few mins

[10:30] <psch> a more complete list is 1) field accessors 2) method resolution from widest to narrowest fitting type 3) array marshalling 4) metamodel-y things 5) Cool things

[10:30] <psch> which is actually kinda much, looking at it... :)

[10:31] *** FROGGS joined
[10:33] *** koo6 left
[10:38] <masak> good antenoon, #perl6

[10:39] <moritz> \o masak

[10:39] <psch> hi masak 

[10:39] <masak> census: nice to see you back on the channel :)

[10:45] *** erkan left
[10:47] <mathw> psch: doesn't look easy

[10:47] <mathw> from the little I know about it the method resolution stuff could be quite tricky

[10:47] *** rindolf left
[10:48] *** erkan joined
[10:48] *** chenryn left
[10:48] <psch> mathw: there was a comment on my advent post.  i think the cleanest solution would be always treating our Int as long and require native int coercion for narrower types

[10:48] <psch> mathw: although that'd mean using BigInts towards Java needs to always work with the Java BigInts, whatever they're called

[10:49] <psch> but i guess shoving our Int into a Java BigInt constructor could be made to work somehow, probably with a module though

[10:49] *** rurban joined
[10:50] <mathw> I think they are called BigInt

[10:50] <mathw> my Java's a bit hazy though

[10:50] <mathw> I did SCJP years ago and it put me right off :)

[10:51] <brrt> java.math.BigInteger :-)

[10:56] *** Alula left
[10:57] *** lizmat joined
[10:58] <psch> i guess i could special-case BigInteger as well

[10:58] <psch> as in, just treat it as a possible marshalling target for Int, assuming we need it to match a method

[10:59] *** kjs_ left
[11:00] *** sqirrel joined
[11:01] <mathw> how would you choose between void foo(long a) and void foo(BigInteger a)

[11:02] <psch> it depends :)

[11:02] <psch> i mean, our Int are arbitrarily sized, i.e. pretty much BigInts

[11:02] *** Mso150 left
[11:03] <psch> so if we can/have to we probably should marshal them to BigInteger on the Java size

[11:04] <psch> and explicitly choosing the long candidate would be with $cl.foo(int64($myInt))

[11:05] <psch> i'm not sure if that coercer works on the perl6-side yet though, but it definitely isn't implemented for the interop

[11:08] <psch> if we didn't want to rely on BigInteger as a default-marshalling target we'd always go take the long candidate and calling the BigInteger candidate would mean creating a java BigInteger object first

[11:09] <psch> although i'm fairly sure it'd be safe to assume that any jvm we run on has BigInteger

[11:20] *** nige left
[11:24] *** atroxaper joined
[11:31] *** atroxaper left
[11:31] *** kaare_ left
[11:33] *** kaare_ joined
[11:34] *** denis_boyun_ joined
[11:39] *** Alina-malina left
[11:41] *** erkan left
[11:43] *** erkan joined
[11:43] *** erkan left
[11:43] *** erkan joined
[11:43] <dalek> mu: 1481153 | lizmat++ | misc/perl6advent-2014/schedule:

[11:43] <dalek> mu: Bring schedule up to date

[11:43] <dalek> mu: review: https://github.com/perl6/mu/commit/1481153793

[11:44] *** denis_boyun_ left
[11:44] *** Alina-malina joined
[11:46] *** chenryn joined
[11:56] *** nebuchad` joined
[11:56] *** nebuchadnezzar left
[12:04] <dalek> Heuristic branch merge: pushed 16 commits to rakudo/newio by lizmat

[12:09] *** kjs_ joined
[12:11] *** sqirrel left
[12:14] *** Woodi joined
[12:17] *** erkan left
[12:18] *** rindolf joined
[12:20] *** erkan joined
[12:20] *** erkan left
[12:20] *** erkan joined
[12:25] <dalek> roast: bccc45e | lizmat++ | S06-signature/positional-placeholders.t:

[12:25] <dalek> roast: Fudge block $a vs $^a on JVM and Parrot

[12:25] <dalek> roast: 

[12:25] <dalek> roast: They're throwing like AdHoc, not X::Placeholder::NonPlaceholder

[12:25] <dalek> roast: review: https://github.com/perl6/roast/commit/bccc45eb9d

[12:39] *** japhb joined
[12:42] *** BenGoldberg joined
[12:43] *** koo6 joined
[12:45] <dalek> roast/newio: e7857a4 | lizmat++ | integration/advent2014-day13.t:

[12:45] <dalek> roast/newio: Add tests for advent day #13

[12:45] <dalek> roast/newio: review: https://github.com/perl6/roast/commit/e7857a4bae

[12:45] <dalek> roast/newio: 89a9309 | lizmat++ | integration/advent2014-day16.t:

[12:45] <dalek> roast/newio: Add tests for advent day #16

[12:45] *** dalek left
[12:45] <lizmat> sorry dalek

[12:45] *** itz joined
[12:45] *** dalek joined
[12:45] *** ChanServ sets mode: +v dalek

[12:47] <Juerd> moritz: It's much less trouble to set up separate services on a dozen separate virtual servers, than to properly use selinux on a single one :)

[12:48] <moritz> Juerd: i get that impression too, especially if you have some sort of automated configuration management

[12:49] <Juerd> Which config management tool do you use? I like Ansible.

[12:49] <moritz> none privately; $work uses puppet

[12:49] <moritz> (but at work I don't do ops, so I'm in little contact with it)

[12:50] <Juerd> Didn't want Puppet myself because it requires Ruby on the servers and it uses a pull model.

[12:51] <Juerd> So I haven't even tried it

[12:52] *** rurban left
[12:52] *** nebuchad` is now known as nebuchadnezzar

[12:52] <moritz> jnthn, lizmat, other concurrency experts: what's the rationale for having both 'done' and 'quit' in Supply? (both as method and callbacks)

[12:52] <moritz> they seem to do quit similar things

[12:53] <moritz> Juerd: do you have a feeling how many hosts you need for Ansible to pay off?

[12:53] <Juerd> moritz: 1

[12:53] <lizmat> moritz: starting to dig into that

[12:54] <Juerd> moritz: First time I used it was on a small cluster of 3 hosts. After 4 hours of reading docs and writing "playbooks" (Ansible scripts), I felt I was done and spent roughly as much time as I would have, had I done it manually.

[12:54] *** BenGoldberg left
[12:54] <dalek> rakudo/newio: e51bead | lizmat++ | src/core/IO/Dir.pm:

[12:54] <dalek> rakudo/newio: Fix type constraint

[12:54] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/e51bead085

[12:54] <dalek> rakudo/newio: 84c7427 | lizmat++ | src/core/IOU.pm:

[12:54] <dalek> rakudo/newio: Fix error message

[12:54] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/84c74278c8

[12:55] <Juerd> moritz: After that, I think it has definitely saved me a lot of time.

[12:55] <moritz> Juerd: I guess I should investigate it then

[12:55] <Juerd> Especially with things like the shellshock bug, it was definitely worth having around.

[12:55] <psch> from S17:Supplies it looks like quit is an implicit CATCH block, while end is a LEAVE block

[12:55] <synopsebot> Link: http://perlcabal.org/syn/S17.html#Supplies_it_looks_like_quit_is_an_implicit_CATCH_block

[12:55] <lizmat> moritz: done is for a clean shutdown, and quit is for an shutdown thorugh an exception

[12:56] <lizmat> *though

[12:56] <lizmat> *through

[12:56] <lizmat> *sigh*

[12:56] <psch> not sure i like what synopsebot did there o.o

[12:56] <lizmat> S17:Supplies   more spaces

[12:56] <synopsebot> Link: http://perlcabal.org/syn/S17.html#Supplies___more_spaces

[12:57] <lizmat> not sure either

[12:57] <Juerd> moritz: You don't have to use Ansible for everything to benefit from having it. Just keep separate playbooks (or roles) for hosts that are fully Ansible-managed, and for those that were installed manually.

[12:57] *** chenryn left
[12:58] *** kaleem left
[13:08] *** kaleem joined
[13:15] *** Alula joined
[13:17] *** atroxaper joined
[13:18] <vendethiel> lumimies++ # thanks, nice catch :)

[13:21] *** erkan left
[13:22] *** [Sno] left
[13:23] *** atroxaper left
[13:23] *** erkan joined
[13:25] <moritz> psch: then patch it

[13:25] *** atroxaper joined
[13:26] <psch> moritz: in a bit, i'm just testing primitive array marshalling :)

[13:32] <dalek> rakudo/newio: 7b20782 | lizmat++ | src/core/IO.pm:

[13:32] <dalek> rakudo/newio: Remove FILETEST-ALL for now, it was a bad idea

[13:32] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/7b20782808

[13:37] *** [Sno] joined
[13:40] <abraxxa> 39 5515

[13:40] <lizmat> 39 5155  # close, but no cigar

[13:40] <abraxxa> sorry, wrong tab

[13:41] *** mvuets left
[13:42] <moritz> lizmat: (re quit vs. done) then what's the difference between .close and .done?

[13:42] <lizmat> close either closes the indicated tap, or all taps

[13:43] <lizmat> it does *not* do anything with the supply

[13:43] <lizmat> you can still create new taps after a .close

[13:46] <moritz> .done also doesn't shut down the supply

[13:50] *** koo6 left
[13:50] *** kjs_ left
[13:58] <lizmat> moritz: hmmmm.... indeed....   don't see a diff either from functioning either, maybe jnthn has better insight

[13:58] <lizmat> *pov

[13:59] <psch> m: my $sup = Supply.new; my ($t1, $t2) = $sup.tap({ say "t1: $^a"}, done => { say "t1 done" }), $sup.tap({ say "t2: $^a"}, done => { say "t2 done" }); $sup.emit(1); $t1.close; $sup.emit(2); $sup.done 

[13:59] <camelia> rakudo-moar 284c09: OUTPUT«t1: 1␤t2: 1␤t2: 2␤t2 done␤»

[14:00] <psch> the done callback on a tap happens when .done is closed and the tap isn't closed yet

[14:00] <psch> s/is closed/is called on the Supply/

[14:01] *** kjs_ joined
[14:01] <psch> Tap doesn't have a .done method afaics

[14:02] <psch> maybe i'm missing the point here, but it seems clear to me... :)

[14:03] <psch> m: my $s = Supply.new; my $t = $s.tap(&say); $s.close; $s.emit(1);

[14:03] <camelia> rakudo-moar 284c09: ( no output )

[14:03] *** Rounin joined
[14:05] <census> good to see you too masak

[14:05] <dalek> rakudo/newio: c4b4821 | lizmat++ | t/01-sanity/ (5 files):

[14:05] <dalek> rakudo/newio: Add sanity tests for filetest primitives

[14:05] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/c4b4821525

[14:06] <psch> although i wonder if emit()ting on a closed Supply should complain...

[14:08] <moritz> m: say Tap.^methods

[14:08] <camelia> rakudo-moar 284c09: OUTPUT«close <anon> <anon> <anon> <anon> <anon>␤»

[14:09] <psch> and .close on a Supply doesn't run :done on the Taps

[14:09] <moritz> psch: Tap has &.emit, &.done, &.quit, &.closing

[14:09] *** kaare_ left
[14:09] <moritz> psch: it runs .closing on the Tap

[14:10] <dalek> infrastructure-doc: 970d55f | moritz++ | hosts/ (2 files):

[14:10] <dalek> infrastructure-doc: Mention git for /etc

[14:10] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/970d55f6e3

[14:10] *** rurban joined
[14:11] <psch> m: my $s = Supply.new; my $t = $s.tap({ .say }, done => { say "done" }); $t.done()(); $s.emit(1); $s.done

[14:11] <camelia> rakudo-moar 284c09: OUTPUT«done␤1␤done␤»

[14:12] <moritz> reading S17, I get the impression that there's just one .close / .done

[14:12] <moritz> but it's called .done on the Supply and .close on the Tap

[14:12] <itz> I just ran rakudobrew and panda seg faults

[14:12] <itz> is this a known issue?

[14:13] <psch> moritz: i'm afraid i still don't see the problem.  &.done, &.emit, &.quit, &.closing get called on a Tap when the tapped Supply is called with methods of the same name

[14:13] <psch> s/methods of the same name/methods of the corresponding semantics/

[14:13] <lizmat> moritz: I recently added a bare .close on Supply, maybe I shouldn't have

[14:13] <moritz> lizmat: it's not just that, it's also the callbacks

[14:14] <moritz> I'll open some tickets

[14:14] *** atroxaper left
[14:20] <dalek> rakudo/newio: 3fd4600 | lizmat++ | t/01-sanity/5 (2 files):

[14:20] <dalek> rakudo/newio: Should probably test path primitives first

[14:20] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/3fd4600c52

[14:21] *** anaeem1_ left
[14:21] *** anaeem1 joined
[14:24] <moritz> lizmat: could it be that .done is a Supply operation ("this whole stream is closing down"), while .close is a Tap operation? ("We're closing just this tap, but the whole stream keeps going")?

[14:24] *** anaeem1 left
[14:24] <moritz> lizmat: if so, it would make sense for .done to forbid further .emit() calls

[14:26] <moritz> https://github.com/perl6/specs/issues/77 opened

[14:26] <psch> oh

[14:26] <lizmat> moritz: fwiw, if a tap is done, it should not longer allow emits

[14:26] <psch> so issue was in S17, not in "how does it work in rakudo atm?"

[14:27] <moritz> psch: both

[14:27] <moritz> psch: I'm trying to write documentation, and I'm thoroughly confused by both the implementation and the specs

[14:27] <moritz> lizmat: did you mean s/tap/supply/ ?

[14:27] *** rindolf left
[14:27] <psch> alternatively s/allow// 

[14:28] <lizmat> ah, duh, yes

[14:28] <psch> and s/s$// 

[14:28] *** mullagain joined
[14:28] <moritz> lizmat: I see nothing in Supply.emit or Supply.done that would prevent further emits

[14:28] <lizmat> pls rakudobug that

[14:29] <lizmat> my mind is really on other things atm  :-)

[14:29] <psch> m: my $s = Supply.new; my $t = $s.tap(&say); $s.emit(1); $s.done; $s.emit(2)

[14:29] <camelia> rakudo-moar 284c09: OUTPUT«1␤2␤»

[14:29] <psch> m: my $s = Supply.new; my $t = $s.tap(&say); $s.emit(1); $s.close; $s.emit(2)

[14:29] <camelia> rakudo-moar 284c09: OUTPUT«1␤»

[14:29] *** erkan left
[14:29] <psch> moritz++ for documentation and clarifications

[14:30] <moritz> lizmat: willdo

[14:31] <lizmat> thinking about it more: .done basically marks all current taps as done

[14:31] <mullagain> so i perl6 stable enough for me to start development on a new project that will be released next year?

[14:31] <masak> mullagain: it all depends.

[14:31] <lizmat> it doesn't say anything on future taps

[14:32] <moritz> so does close, it seems

[14:32] <masak> mullagain: best answer to that is to figure out the level of stability you need, and then compare with the level we can provide right now.

[14:32] <moritz> and neither actually terminates anything

[14:32] <lizmat> m: my $s = Supply.new; my $t = $s.tap(&say); $s.emit(1); $s.done; sat $t.done

[14:32] <camelia> rakudo-moar 284c09: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/W5ImKDhvXM␤Undeclared routine:␤    sat used at line 1. Did you mean 'say', 'set'?␤␤»

[14:32] <lizmat> m: my $s = Supply.new; my $t = $s.tap(&say); $s.emit(1); $s.done; say $t.done

[14:32] <camelia> rakudo-moar 284c09: OUTPUT«1␤(Callable)␤»

[14:32] <lizmat> hmmm....

[14:32] <lizmat> ah, duh

[14:32] <mullagain> stability was a bad choice of words. I am more worried about if the code with work in the future or not.

[14:32] <mullagain> like syntax changes, etc.

[14:32] *** erkan joined
[14:32] *** erkan left
[14:32] *** erkan joined
[14:32] <masak> right.

[14:32] <masak> I took your meaning that way.

[14:33] <moritz> m: my $s = Supply.new; $s.tap(&say); $s.done; $s.emit('still here')

[14:33] <mullagain> ok

[14:33] <camelia> rakudo-moar 284c09: OUTPUT«still here␤»

[14:33] <masak> don't see any syntax changes on the horizon these days.

[14:33] <moritz> m: my $s = Supply.new; $s.tap(&say); $s.close; $s.emit('still here')

[14:33] <masak> we know how to spell Perl 6 now. :)

[14:33] <camelia> rakudo-moar 284c09: ( no output )

[14:33] <masak> but there are a few semantic changes planned, and I don't think anyone knows exactly how deep they'll go.

[14:33] <lizmat> masak: well, but there may be subtle changes because of the GLR

[14:34] <lizmat> indeed

[14:34] <masak> was thinking of the GLR.

[14:34] <masak> "Great List Refactor", for those just tuning in.

[14:34] <mullagain> hmm, ok

[14:35] <lizmat> any syntax changes will be handled by a year of deprecation and very clear deprecation messages

[14:35] <lizmat> listing the locations in the source that need changes and what needs changed

[14:35] <masak> that includes things such as API changes, subs and methods changing.

[14:35] <masak> so that's not the problem.

[14:36] <masak> the GLR will have *some* sort of measurable effect on the code out there. hard to say what.

[14:36] <lizmat> well, speedup for one  :-)

[14:36] <lizmat> we're not doing this just because we can

[14:37] <masak> right.

[14:37] <moritz> and clearer distinction about what flattens and what doesn't

[14:41] <moritz> m: my $s = Supply.new; $s.tap(&say); $s.quit('oh noez'); $s.emit(42)

[14:41] <camelia> rakudo-moar 284c09: OUTPUT«oh noez␤  in block  at src/gen/m-CORE.setting:21121␤  in method quit at src/gen/m-CORE.setting:21180␤  in block <unit> at /tmp/x4aVtg67nq:1␤␤»

[14:42] <moritz> m: my $s = Supply.new; $s.tap(&say, :quit({})); $s.quit('oh noez'); $s.emit(42)

[14:42] <camelia> rakudo-moar 284c09: OUTPUT«Type check failed in binding &quit; expected 'Callable' but got 'Hash'␤  in method tap at src/gen/m-CORE.setting:21121␤  in block <unit> at /tmp/ckWpCA0bB0:1␤␤»

[14:42] <moritz> m: my $s = Supply.new; $s.tap(&say, :quit(-> $ex {})); $s.quit('oh noez'); $s.emit(42)

[14:42] <camelia> rakudo-moar 284c09: OUTPUT«42␤»

[14:43] *** FROGGS[mobile] joined
[14:50] <dalek> doc: 1c2bb13 | moritz++ | lib/Type/Supply.pod:

[14:50] <dalek> doc: Start to document Supply

[14:50] <dalek> doc: 

[14:50] <dalek> doc: my, is this confusing (and much to do)

[14:50] <dalek> doc: review: https://github.com/perl6/doc/commit/1c2bb13395

[14:50] <lizmat> moritz++

[14:57] *** raiph joined
[15:08] *** sqirrel joined
[15:12] *** ninjazach joined
[15:12] *** kaleem left
[15:14] *** colomon left
[15:15] *** atroxaper joined
[15:16] *** atroxaper left
[15:16] *** atroxaper joined
[15:19] *** isBEKaml joined
[15:19] *** erkan left
[15:19] *** kjs_ left
[15:21] *** kaare_ joined
[15:22] *** erkan joined
[15:22] *** erkan left
[15:22] *** erkan joined
[15:29] <dalek> specs: 213ff41 | lumimies++ | S17-concurrency.pod:

[15:29] <dalek> specs: Fix broken markup

[15:29] <dalek> specs: review: https://github.com/perl6/specs/commit/213ff41122

[15:31] *** colomon joined
[15:36] *** mr-foobar joined
[15:37] *** fhelmberger left
[15:45] *** mrcko joined
[15:45] <mrcko> can someone help me?

[15:45] <lizmat> good *, mrcko: depends on what the problem is

[15:45] <mrcko> how to split this string intro an array? "1 v=3362&t=2420&h=4400";

[15:46] <mrcko> i try everything but it doesnt work

[15:46] <mrcko> i have to work with split and regex, right?

[15:46] <lizmat> split on what ?

[15:47] <mrcko> spit into $data[0], $data[1] and so on

[15:47] *** kjs_ joined
[15:47] <colomon> ack.  $work script broke because $*DISTRO no longer returns some form of "linux".  is there a replacement for that?

[15:47] <mrcko> so $data[0] is 1, and $data[1] is 3362

[15:48] <lizmat> colomon: $*KERNEL.name ?

[15:48] <mrcko> $data[2] 2420 and so on

[15:48] <lizmat> m: $*KERNEL.name ?

[15:48] <camelia> rakudo-moar 284c09: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/EyCNXvRfms␤Two terms in a row␤at /tmp/EyCNXvRfms:1␤------> [32m$*KERNEL.name [33m⏏[31m?[0m␤    expecting any of:␤        infix stopper␤        infix or meta-infix␤        stateme…»

[15:48] <lizmat> m: $*KERNEL.name

[15:48] <camelia> rakudo-moar 284c09: ( no output )

[15:48] <lizmat> m: say $*KERNEL.name

[15:48] <camelia> rakudo-moar 284c09: OUTPUT«linux␤»

[15:48] <colomon> mrcko: try comb(/\d+)

[15:48] <colomon> lizmat: > $*KERNEL.name

[15:48] <colomon> unknown

[15:48] <lizmat> also with recent?

[15:49] <colomon> lizmat: trying to build a new rakudo-moar now

[15:50] <lizmat> m: say "1 v=3362&t=2420&h=4400".comb(/\d+/)

[15:50] <camelia> rakudo-moar 284c09: OUTPUT«1 3362 2420 4400␤»

[15:50] <mrcko> will try

[15:51] <lizmat> m: may @a = "1 v=3362&t=2420&h=4400".comb(/\d+/); say @a.perl

[15:51] <camelia> rakudo-moar 284c09: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/WNSU5V1w6n␤Variable '@a' is not declared␤at /tmp/WNSU5V1w6n:1␤------> [32mmay @a[33m⏏[31m = "1 v=3362&t=2420&h=4400".comb(/\d+/);[0m␤    expecting any of:␤        postfix␤»

[15:51] <lizmat> m: my @a = "1 v=3362&t=2420&h=4400".comb(/\d+/); say @a.perl

[15:51] <camelia> rakudo-moar 284c09: OUTPUT«Array.new("1", "3362", "2420", "4400")␤»

[15:52] <colomon> lizmat: I see that latest moar (which I have built for user smoker on the same machine) has $*KERNEL.linux.  lizmat++

[15:52] <lizmat> yw, TimToady++ for those changes, I thnk

[15:52] <lizmat> *think

[15:52] <colomon> lizmat: you told me about them, that's worth a ++

[15:52] <lizmat> :-)

[15:54] <mullagain> is there anything out there to convert perl5 modules to perl6?

[15:55] * colomon is having yet another one of those days where everything he does leads to something else that needs to be done first, and so on recursively.  meant to do some "fun" $work this morning, ending up rebuilding moar in order to get $*KERNEL.name in order to get $work script running in order to build $work libraries in order to test not fun $work stuff properly...

[15:55] <psch> mullagain: there's currently no way to generate a perl6 module from a perl5 module, but you can use perl5 modules with v5 or Inline::Perl5

[15:55] *** ptc_p6 left
[15:56] <psch> Inline::Perl5 is probably the more sensible solution at the moment, as it runs perl5 code with perl5

[15:56] <psch> v5 is a reimplementation and far from finished

[15:59] <mrcko> lizmat, how to get and csv like string like "1,3362,2420,4400" ? iam not familiar with perl :) thank you.

[15:59] <psch> hm, i'm actually not sure how far from finished v5 is, but i think FROGGS++ has had other things on his plate recently

[16:00] <colomon> mrcko: if all you want to do is extract the integers from a string, comb(/\d+/) should work well

[16:00] *** zakharyas joined
[16:00] <lizmat> m: say "1 v=3362&t=2420&h=4400".comb(/\d+/).join(",")  # mrcko 

[16:00] <camelia> rakudo-moar 284c09: OUTPUT«1,3362,2420,4400␤»

[16:00] <colomon> mrcko: if you want to get whatever separated by commas, then split(",") is an approach.

[16:00] * colomon realizes he may be answering the wrong question.

[16:08] <dalek> rakudo/newio: c43d3b0 | lizmat++ | src/core/CompUnitRepo/Locally.pm:

[16:08] <dalek> rakudo/newio: CHANGE-DIRECTORY only takes Str

[16:08] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/c43d3b084f

[16:08] <dalek> rakudo/newio: c08b117 | lizmat++ | src/core/IOU.pm:

[16:08] <dalek> rakudo/newio: MAKE-ABSOLUTE-PATH only takes Str

[16:08] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/c08b117e78

[16:09] <mrcko> this doesnt work in perl5, right?

[16:10] <lizmat> no, this is perl 6

[16:10] <isBEKaml> mrcko: no -- were you looking at perl5 code?

[16:10] <lizmat> the fact that you must use . instead of -> to call a method

[16:10] <lizmat> should have told you that  :-)

[16:11] <isBEKaml> lizmat: perl5 doesn't have comb :-)

[16:11] <mrcko> This is perl 5, version 14, subversion 2 (v5.14.2)

[16:11] <lizmat> mrcko: then you're on the wrong channel  :-(

[16:11] <isBEKaml> mrcko: ah, you'd get a lot more help if you ask on #perl

[16:11] <mrcko> omg :(

[16:11] <isBEKaml> mrcko: perl5 and perl6 are two very different beasts. 

[16:12] <mrcko> ok, nobody has an answer in perl5  :)

[16:12] <isBEKaml> mrcko: that's because we don't want to stray too far off-topic :-)

[16:14] <mrcko> thanks anyway guys

[16:14] *** zakharyas left
[16:15] * colomon thinks it shouldn't be too hard to implement comb in p5...

[16:15] <lizmat> mrcko: you're welcome, hope to see you back when you're ready for Perl 6

[16:15] <mrcko> yes. cheers

[16:15] *** colomon left
[16:15] *** mrcko left
[16:16] *** virtualsue left
[16:25] *** abraxxa left
[16:26] *** rurban left
[16:32] *** brrt left
[16:33] <psch> hm, we have something for converting in one direction i think? istr that's only perl5 regex to perl6 regex...?

[16:34] <isBEKaml> psch: I'm not sure - there may be something in mu repo

[16:36] *** koo6 joined
[16:36] <lizmat> m: say "foo" ~~ m:P5/\w+/  # psch isBEKaml  you don't mean this?

[16:36] <camelia> rakudo-moar 284c09: OUTPUT«｢foo｣␤␤»

[16:36] *** colomon joined
[16:38] <isBEKaml> lizmat: I thought psch meant something like v6 to v5. I surely recall m:P5, which was somewhat non-existent a couple years or so ago

[16:39] * isBEKaml should fix irssi highlighter

[16:40] <psch> isBEKaml, lizmat: i was looking for p56/p5-to-p6 for camelia

[16:40] <psch> seeing as mullagain was asking about converting perl5 modules to perl6

[16:40] <TimToady> to translate v6 regex to v5 you pretty much have to ignore v5 regex and just translate to lazy lists of closures as STD does

[16:41] <TimToady> that direction should be easier

[16:41] <psch> although i don't know whether big-ish modules would convert well

[16:41] <psch> where "big-ish" probably means "production ready" :)

[16:42] <TimToady> depends on what percent of esoteric P5 features it takes advantage of

[16:42] <TimToady> and what style of OO it uses...

[16:44] <isBEKaml> psch: okay - my information is a little out of date :-)

[16:44] *** gfldex left
[16:45] <psch> p56: $_="krJhruaesrltre c a cnp,ohet";$_.=$1,print$2while s/(..)(.)//; 

[16:45] <camelia> p5-to-p6 : OUTPUT«$_ = 'krJhruaesrltre c a cnp,ohet';␤$_ ~= $0, print($1)␤    while s:P5!(..)(.)!!␤»

[16:45] <psch> m: $_ = 'krJhruaesrltre c a cnp,ohet';␤$_ ~= $0, print($1)␤    while s:P5!(..)(.)!!␤

[16:45] <camelia> rakudo-moar 284c09: OUTPUT«Just another perl hacker,»

[16:45] <psch> that's probably really far from esoteric :)

[16:45] *** Alula left
[16:46] *** Alula joined
[16:47] <psch> .tell mullagain you could check converting perl5 modules to perl6 modules with perlito, see the following link for how camelia does it here https://github.com/perl6/evalbot/blob/94f9effcd7c09369b8ca89f38e6886cfc044f8c9/evalbot.pl#L182

[16:47] <yoleaux> psch: I'll pass your message to mullagain.

[16:50] *** sqirrel left
[16:50] <psch> now back to figuring out how i can sensibly marshal different array types for non-mmd interop methods...

[16:51] <dalek> rakudo/newio: 7e4d70f | lizmat++ | src/core/IO.pm:

[16:51] <dalek> rakudo/newio: Fix/Optimize MAKE-ABSOLUTE-PATH using native str

[16:51] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/7e4d70fbec

[16:51] *** gfldex joined
[16:52] <dalek> rakudo/newio: f182b5e | lizmat++ | t/01-sanity/50-path.t:

[16:52] <dalek> rakudo/newio: Initial batch of path sanity tests

[16:52] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/f182b5e43c

[16:52] *** anaeem1 joined
[16:53] *** anaeem1 left
[16:53] <lizmat> dinner&

[16:56] *** kjs_ left
[16:59] *** denis_boyun_ joined
[17:00] <mullagain> is there a IO::Socket::INET module for perl6?

[17:00] <yoleaux> 16:47Z <psch> mullagain: you could check converting perl5 modules to perl6 modules with perlito, see the following link for how camelia does it here https://github.com/perl6/evalbot/blob/94f9effcd7c09369b8ca89f38e6886cfc044f8c9/evalbot.pl#L182

[17:02] <FROGGS> m: say IO::Socket::INET

[17:02] <camelia> rakudo-moar 284c09: OUTPUT«(IO::Socket::INET)␤»

[17:02] <FROGGS> mullagain: yes ---- ^

[17:05] <mullagain> hmm, I cant "use" it and I didnt see it listed in the modules list.

[17:06] <psch> m: my $sock = IO::Socket::INET.new

[17:06] <camelia> rakudo-moar 284c09: OUTPUT«Unhandled exception: Nothing given for new socket to connect or bind to␤   at <unknown>:1  (/home/camelia/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:13877  (/home/camelia/rakudo-inst-2/langu…»

[17:07] * psch thinks with params it'll complain as well, 'cause RESTRICTED

[17:10] <mullagain> what about Data::Dumper?

[17:13] *** ninjazach left
[17:14] <masak> mullagain: that's a Perl 5 module.

[17:14] <masak> mullagain: in Perl 6, you have .perl

[17:17] *** anaeem1 joined
[17:17] *** denis_boyun_ left
[17:20] *** clkao_ is now known as clkao

[17:20] *** denis_boyun_ joined
[17:21] *** hekmek joined
[17:23] *** rurban joined
[17:30] *** rindolf joined
[17:30] *** erkan left
[17:33] *** erkan joined
[17:36] *** kjs_ joined
[17:48] *** telex left
[17:50] *** telex joined
[17:55] *** kjs_ left
[17:55] *** dakkar left
[17:56] *** kjs_ joined
[18:06] <moritz> m: my $s = Supply.new; $s.interval(0.1).tap(&say); sleep 1; $s.done;

[18:06] <camelia> rakudo-moar 284c09: OUTPUT«Invocant requires a type object, but an object instance was passed␤  in method interval at src/gen/m-CORE.setting:21260␤  in block <unit> at /tmp/stycUi053v:1␤␤»

[18:07] <moritz> m: my $s = Supply.interval(0.1).tap(&say); sleep 1; $s.done;

[18:07] <camelia> rakudo-moar 284c09: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[18:09] <isBEKaml> What would the error message look like if a method parameter were to be a type object? (Rare, I know, just curious)

[18:09] <moritz> m: my $s = Supply.interval(0.1).tap({.say; $s.done }); sleep 0.3; $s.done;

[18:09] <camelia> rakudo-moar 284c09: OUTPUT«0␤1␤2␤3␤»

[18:09] <moritz> m: class A { method x(Int:U) { } }; A.new.x(42) # for isBEKaml 

[18:09] <camelia> rakudo-moar 284c09: OUTPUT«Parameter '<anon>' requires a type object, but an object instance was passed␤  in method x at /tmp/3QcxMCRxS9:1␤  in block <unit> at /tmp/3QcxMCRxS9:1␤␤»

[18:10] <isBEKaml> moritz: thanks

[18:11] <dalek> rakudo/nom: f57427b | moritz++ | src/core/Supply.pm:

[18:11] <dalek> rakudo/nom: Simplify Supply.list

[18:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f57427b140

[18:12] *** FROGGS[mobile] left
[18:12] *** FROGGS[mobile] joined
[18:15] *** isBEKaml left
[18:16] *** Rounin left
[18:17] *** Rounin joined
[18:18] *** molaf joined
[18:25] <raydiak> good morning #perl6

[18:28] *** atroxaper left
[18:31] *** Vlavv joined
[18:37] *** mullagain left
[18:37] *** perturbation joined
[18:41] *** Mso150 joined
[18:45] *** JimmyZ joined
[18:51] <masak> ahoy, raydiak.

[18:52] *** telex left
[18:53] *** telex joined
[18:55] <lizmat> moritz: good catch on Supply.list

[18:56] <lizmat> moritz: from your testing, should I assume you think it's a good idea to run .interval on an instantiated Supply ?

[18:57] <lizmat> if so, I guess it should "inherit" its scheduler, right >

[18:57] <lizmat> ?

[19:01] *** cognominal joined
[19:03] *** hekmek left
[19:07] *** erkan left
[19:10] * masak saves the day using lots and lots of debug say statements

[19:11] *** erkan joined
[19:11] *** erkan left
[19:11] *** erkan joined
[19:11] *** erkan left
[19:11] *** erkan joined
[19:11] <masak> moritz: everything on track for tomorrow's post?

[19:11] <masak> TimToady: how's day-after-tomorrow's post going? :)

[19:17] <lizmat> masak: I think moritz' post is already scheduled

[19:17] <masak> ooh

[19:17] * masak reads it

[19:18] * lizmat has put on some old Joe Cocker

[19:20] *** kjs_ left
[19:20] <lizmat> http://en.wikipedia.org/wiki/Joe_Cocker#Personal_life   :-(

[19:20] <TimToady> masak: I have some ideas

[19:22] *** anaeem1 left
[19:22] *** rindolf left
[19:22] <masak> looking forward to it.

[19:23] * masak fixed a minor whitespace typo in moritz++' scheduled post

[19:24] *** erkan left
[19:24] * masak enjoyed http://research.swtch.com/yaccalive

[19:27] *** erkan joined
[19:27] *** erkan left
[19:27] *** erkan joined
[19:28] *** anaeem1 joined
[19:28] *** atroxaper joined
[19:31] *** anaeem1 left
[19:34] *** anaeem1 joined
[19:35] *** atroxaper left
[19:35] <moritz> masak++ # whitespace fix

[19:39] *** erkan left
[19:42] *** raiph left
[19:43] *** erkan joined
[19:43] *** erkan left
[19:43] *** erkan joined
[19:43] <dalek> doc: cb087f6 | moritz++ | lib/Type/Supply.pod:

[19:43] <dalek> doc: [Supply] document more methods

[19:43] <dalek> doc: review: https://github.com/perl6/doc/commit/cb087f6c24

[19:48] *** FROGGS_ joined
[19:52] <lizmat> hmmm.... in light of the GLR, having a method .for on Supply, may be confusing

[19:52] *** FROGGS left
[19:52] <moritz> lizmat: aye

[19:52] <moritz> lizmat: what does it do anyway?

[19:53] <lizmat> it basically emits all the values

[19:54] *** Mso150_i joined
[19:54] *** Mso150 left
[19:55] <lizmat> so maybe "emit-for" would be a better name

[19:56] <lizmat> ah, and it creates a supply with the emitted values

[19:56] <lizmat> hmmm.... emit-for would be a bad name

[19:58] <lizmat> hmmm... maybe .with?   Supply.with( 1..10 )

[20:03] <moritz> .from

[20:03] *** [Coke]_ is now known as [Coke]

[20:03] <moritz> Supply.from( 1..10 )

[20:04] <lizmat> won't that interfere with some of TimToady's recent changes?

[20:04] <lizmat> I like it, but...  :-)

[20:06] *** mvuets joined
[20:07] <moritz> which recent changes?

[20:07] * moritz feels out-of-the-loop

[20:07] *** spider-mario left
[20:10] *** cognominal left
[20:15] <lizmat> moritz: 1eb7fada843b75468e15d7e29b90008d68327ea4

[20:16] <moritz> lizmat: eeks

[20:16] <moritz> lizmat: ok, List.Supply

[20:17] <lizmat> it probably won't interfere technically, but it will in conceptually I think

[20:17] <lizmat> *interfere

[20:17] *** darutoko left
[20:20] <moritz> .from-list

[20:20] <moritz> .seeded

[20:22] *** Roonin joined
[20:22] *** spider-mario joined
[20:22] *** Rounin left
[20:24] <lizmat> from-list feels best, I guess

[20:32] *** Roonin is now known as Rounin

[20:33] <lizmat> m: for 1,2,3, { .say }

[20:33] *** erkan left
[20:33] <camelia> rakudo-moar f57427: OUTPUT«[31m===[0mSORRY![31m===[0m␤Expression needs parens to avoid gobbling block␤at /tmp/H5RjtMfuYi:1␤------> [32mfor 1,2,3, { .say }[33m⏏[31m<EOL>[0m␤Missing block (apparently taken by expression)␤at /tmp/H5RjtMfuYi:1␤------> [32mfor 1,2,…»

[20:34] <lizmat> I guess here we miss the for () parens  :-)

[20:34] <moritz> aye

[20:36] *** erkan joined
[20:37] <psch> m: for 1,2,3,() { .say } # these () ?

[20:37] <camelia> rakudo-moar f57427: OUTPUT«1␤2␤3␤»

[20:37] <psch> ooh

[20:38] <psch> nevermind that

[20:38] <moritz> psch: for (1, 2, 3) { .say } # i guess lizmat++ meant those

[20:38] <psch> yeah

[20:38] * moritz too slow

[20:38] <lizmat> psch++  another way to fix my problem

[20:39] * psch didn't realize he could've played this as witty instead of misreading the problem :)

[20:39] *** denis_boyun_ left
[20:39] *** jack_rabbit left
[20:41] <psch> lizmat: could Deprecations be accessible/instantiatable in ModuleLoader.nqp? i'm not quite sure how to look into getting the deprecation for :from<java> proper

[20:41] <dalek> rakudo/newio: 885d6ab | lizmat++ | src/core/IO.pm:

[20:41] <dalek> rakudo/newio: Fix /foo/../../ case

[20:41] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/885d6ab1b4

[20:42] <psch> currently i'm just nqp::say()ing a message similar to the one from Deprecations, but that's clearly LTA

[20:42] <lizmat> psch: I'm actually not sure how to access P6 things inside NQP...

[20:42] <lizmat> something with hllsym comes to mind...  but am foggy about that right now

[20:43] <psch> thanks lizmat++, i think i can get somewhere with that

[20:43] *** rurban left
[20:43] <lizmat> ++psch

[20:43] <psch> still have to figure out the array-from-a-non-mmd-interop-method thingy

[20:44] <psch> but nqp::say()ing for a deprecation of the interop mechanic isn't really great, considering we advertise jakudo for long-running multi threaded scripts... 

[20:44] <dalek> doc: 128499a | moritz++ | type-graph.txt:

[20:44] <dalek> doc: PromiseStatus is an enum, not class

[20:44] <dalek> doc: review: https://github.com/perl6/doc/commit/128499a42d

[20:45] <lizmat> psch: agree

[20:45] <dalek> doc: d3311df | moritz++ | util/new-type.p6:

[20:45] <dalek> doc: make new-type utility executable

[20:45] <dalek> doc: review: https://github.com/perl6/doc/commit/d3311df672

[20:51] <dalek> rakudo/newio: 85c2fa3 | lizmat++ | src/core/IO.pm:

[20:51] <dalek> rakudo/newio: Don't linger on empty //

[20:51] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/85c2fa3bc5

[20:51] *** perturbation left
[20:53] *** perturbation joined
[20:57] * [Coke] reads a few chapters of the Modula-3 book.

[21:00] <masak> [Coke]: tell us more :)

[21:04] <dalek> doc: 7d7d839 | moritz++ | lib/Type/ (2 files):

[21:04] <dalek> doc: Document type Tap

[21:04] <dalek> doc: 

[21:04] <dalek> doc: one of the few types we have covered completely, I believe :-)

[21:04] <dalek> doc: review: https://github.com/perl6/doc/commit/7d7d839549

[21:05] * moritz guesses he should make a website for the community server at some point, including mirrors to use, acknowledgements for the donors and all that

[21:07] *** mvuets left
[21:09] * masak .oO( you certainly tapped that one for what it was worth )

[21:11] *** bjz_ left
[21:15] *** anaeem1 left
[21:18] * [Coke] was thinking about a perl 6 book, and so was reading the "competition". It was pretty awesome for the time.

[21:22] *** rurban joined
[21:23] <masak> m: sub foo($*x) { bar }; sub bar { say $*x }; foo("OH HAI")

[21:23] <camelia> rakudo-moar f57427: OUTPUT«OH HAI␤»

[21:23] * masak <3 Perl 6

[21:24] <masak> I was like "ooh, will this work?" -- and it does!

[21:24] <psch> masak++ # for brane-bendy application of known concepts

[21:24] <masak> m: sub foo(:$*x) { bar }; sub bar { say $*x }; foo(:x("OH HAI"))

[21:24] <camelia> rakudo-moar f57427: OUTPUT«OH HAI␤»

[21:24] <lizmat> masak: it works in BUILD, why wouldn't it there ?

[21:25] <psch> BUILD uses dynvars?

[21:25] <lizmat> submethod BUILD(:$!foo) {}

[21:25] <masak> I've never done dynamic params in a BUILD either.

[21:25] <lizmat> no, vars with tiwgils

[21:25] <masak> well, that's a completely different twigil :)

[21:25] <lizmat> *twigils

[21:25] <masak> I guess I wasn't sure how special-cased it was...

[21:25] <masak> I wouldn't have been that surprised if dynamicals wouldn't work like that.

[21:26] <[Coke]> now that jnthn++ fixed os x, upgrading xcode...

[21:26] <lizmat> I guess in a way, they're the easiest, as they're completely runtime

[21:26] <[Coke]> lizmat: unless you'd recommend against?

[21:26] <lizmat> well... let me double check with a fresh tarball

[21:27] <psch> for me, the surprising bit is probably easiest summarized as "signature declarations are actually the same as explicit declarations"

[21:28] <psch> which has "dynvars work" as fallout, and could've been obvious with BUILD

[21:29] <psch> the *-sigil is somewhat trait-y, and thus we get what masak demonstrated

[21:29] <lizmat> [Coke]: are you on Mavericks or Yosemite ?

[21:30] <lizmat> seems the problem I had was only with the new Xcode on Mavericks

[21:30] <lizmat> now that I've moved to Yosemite, rakudo builds out of the box

[21:30] *** erkan left
[21:32] *** kjs_ joined
[21:33] *** erkan joined
[21:34] <masak> 'night, #perl6

[21:34] <lizmat> gnight, masak

[21:35] <psch> gnight, masak

[21:36] *** kaare_ left
[21:37] <El_Che> moritz: I stopped ntpd while waiting the debian update

[21:38] <El_Che> moritz: on hack

[21:39] <El_Che> moritz: http://support.ntp.org/bin/view/Main/SecurityNotice#Buffer_overflow_in_ctl_putdata

[21:39] <lizmat> http://support.apple.com/kb/DL1782   # update for NTP vulnaribility

[21:46] <dalek> rakudo/newio: f5e8dfe | lizmat++ | t/01-sanity/50-path.t:

[21:46] <dalek> rakudo/newio: Add more path related sanity checks

[21:46] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/f5e8dfee0c

[21:52] *** awoodland joined
[21:55] <lizmat> *vulnerability 

[22:01] <dalek> rakudo/newio: f4d46c0 | lizmat++ | src/core/ (4 files):

[22:01] <dalek> rakudo/newio: MAKE-ABSOLUTE-PATH only takes Str,Str

[22:01] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/f4d46c0eed

[22:09] <moritz> El_Che: thanks

[22:09] <moritz> El_Che: wait, ntpd, or openntpd?

[22:10] <moritz> El_Che: I thought I didn't have ntpd running

[22:10] <dalek> rakudo/nom: 828d0df | lizmat++ | src/core/Supply (2 files):

[22:10] <dalek> rakudo/nom: Deprecate Supply.for in favour of .from-list

[22:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/828d0df4e7

[22:13] <dalek> rakudo/nom: d45c53a | lizmat++ | docs/ChangeLog:

[22:13] <dalek> rakudo/nom: Update ChangeLog for Supply.from-list

[22:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d45c53a61b

[22:16] <lizmat> .tell jnthn I'm thinking about prefixing "on-" to all Tap attributes so that you get a better message when e.g. trying to emit on a tap

[22:16] <yoleaux> lizmat: I'll pass your message to jnthn.

[22:17] <lizmat> m: Supply.new.tap.emit(42)

[22:17] <camelia> rakudo-moar f57427: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in method <anon> at src/gen/m-CORE.setting:3277␤  in block <unit> at /tmp/dBWoquEjHY:1␤␤»

[22:18] <lizmat> .tell jnthn manufactured case: m: Supply.new.tap.emit(42) # should complain about not having an emit method

[22:18] <yoleaux> lizmat: I'll pass your message to jnthn.

[22:18] <[Coke]> lizmat: mav

[22:19] <lizmat> then I would not recommend upgrading Xcode

[22:19] <[Coke]> k. thanks!

[22:19] <lizmat> fwiw, upgrade to Yosemite worked out ok

[22:19] <lizmat> it just took long (about 3.5 hours on my MBP)

[22:24] <lizmat> .tell jnthn http://www.engadget.com/2014/12/22/the-problem-solver-beer-creativity/   # served / available in Copenhagen :-)

[22:24] <yoleaux> lizmat: I'll pass your message to jnthn.

[22:25] *** Mso150_i left
[22:26] <lizmat> gnight, #perl6!

[22:29] <psch> g'night, lizmat

[22:32] *** telex left
[22:34] *** telex joined
[22:55] *** cognominal joined
[22:55] *** rurban left
[22:58] *** kjs_ left
[23:03] * colomon is recording the Good Omens radio show for future study.  

[23:04] *** ab5tract joined
[23:06] *** kjs_ joined
[23:08] *** atroxaper joined
[23:09] *** perturbation left
[23:10] *** ninjazach joined
[23:10] *** ninjazach left
[23:13] *** kjs_ left
[23:16] *** atroxaper left
[23:22] *** BenGoldberg joined
[23:26] *** ninjazach joined
[23:33] *** erkan left
[23:34] *** cognominal left
[23:34] *** cognominal joined
[23:35] *** erkan joined
[23:40] *** virtualsue joined
[23:42] *** raiph joined
[23:49] *** adu joined
[23:59] *** spider-mario left
