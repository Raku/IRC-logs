[00:03] *** rurban joined
[00:05] *** MikeFair_ joined
[00:18] *** jerrycheung joined
[00:26] *** nbrown joined
[00:30] *** kurahaupo_ left
[00:32] *** nbrown left
[00:33] *** kurahaupo_ joined
[00:43] *** nbrown joined
[00:47] *** nbrown left
[00:50] *** nbrown joined
[00:52] *** jerrycheung left
[00:54] *** nbrown left
[00:55] *** BenGoldberg joined
[01:01] *** FROGGS_ joined
[01:01] *** rurban left
[01:02] *** yeahnoob joined
[01:04] *** FROGGS left
[01:15] *** Mso150 joined
[01:21] *** leont left
[01:23] <dalek> perl6-roast-data: 5d9f418 | coke++ | bin/rakudo. (4 files):

[01:23] <dalek> perl6-roast-data: remove useless . in PERL6LIB

[01:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5d9f41805f

[01:23] <dalek> perl6-roast-data: 3a6f7d8 | coke++ | / (5 files):

[01:23] <dalek> perl6-roast-data: today (automated commit)

[01:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3a6f7d871b

[01:41] *** grondilu left
[01:46] *** nbrown joined
[01:54] *** Mso150 left
[01:54] *** prevost left
[01:55] *** xenoterracide joined
[02:00] *** tinyblak left
[02:01] *** tinyblak joined
[02:05] *** tinyblak left
[02:11] *** chenryn joined
[02:13] *** noganex_ joined
[02:16] *** noganex left
[02:23] *** kurahaupo left
[02:25] *** risou_ left
[02:25] *** risou_awy joined
[02:25] *** risou_awy is now known as risou

[02:27] *** risou left
[02:27] *** risou_awy joined
[02:27] *** risou_awy left
[02:28] *** risou joined
[02:58] *** MikeFair_ left
[03:05] *** nbrown left
[03:16] *** nbrown joined
[03:20] *** nbrown left
[03:23] *** BenGoldberg left
[03:28] *** xenoterracide left
[03:31] * TimToady now in Woodward, OK

[03:33] <TimToady> 5

[03:33] <TimToady> terrible internet lag though...

[03:38] <yeahnoob> more than my 0.6s lag in china's GFW?

[03:40] <TimToady> my last sentence took about 2 minutes

[03:41] *** ifim joined
[03:43] *** jerrycheung joined
[03:47] *** nbrown joined
[03:49] <yeahnoob> Why the book face of "Around the world in 80 Day" suddenly appeared in my mind...:)

[03:53] *** nbrown left
[03:55] *** [Sno] left
[03:56] *** nbrown joined
[04:03] *** aborazmeh joined
[04:05] *** nbrown left
[04:07] *** kaare_ joined
[04:15] *** kurahaupo joined
[04:26] *** rindolf joined
[04:26] *** chenryn left
[04:35] *** chenryn joined
[04:48] *** nbrown joined
[04:51] *** dayangkun joined
[04:51] *** colomon left
[04:52] *** colomon joined
[04:52] *** nbrown left
[04:53] *** kaare_ left
[04:54] *** firefish5000 joined
[05:09] *** mr-foobar left
[05:21] *** kaare_ joined
[05:24] *** [Sno] joined
[05:27] *** mberends left
[05:33] *** tinyblak joined
[05:35] *** dayangkun left
[05:40] *** SamuraiJack joined
[05:46] *** Alina-malina left
[05:47] *** gfldex joined
[05:48] *** nbrown joined
[05:49] *** ssutch left
[05:50] *** ssutch joined
[05:50] *** Alina-malina joined
[05:50] *** ifim left
[05:51] *** tinyblak left
[05:52] *** dayangkun joined
[05:53] *** nbrown left
[05:56] *** gfldex left
[05:57] *** kaleem joined
[06:02] *** yeahnoob left
[06:04] *** bjz joined
[06:07] <firefish5000> :m say "I'm the evalbot!";

[06:08] <firefish5000> .seen camelia

[06:08] <yoleaux> I saw camelia 24 Sep 2014 19:51Z in #perl6: <camelia> rakudo-parrot 5d8eeb: OUTPUT¬´(timeout)¬ª

[06:09] <moritz> firefish5000: camelia is currently broken

[06:11] *** dayangkun left
[06:11] <firefish5000> Alright, I hope she gets better soon!

[06:11] * firefish5000 recognizes camelia as a female butterfly

[06:11] *** bartolin joined
[06:13] *** SamuraiJack left
[06:17] *** camelia joined
[06:17] <moritz> m: 1

[06:18] *** ChanServ sets mode: +v camelia

[06:18] <camelia> rakudo-moar 5d8eeb: ( no output )

[06:21] *** mr-foobar joined
[06:25] *** bjz left
[06:25] *** bjz_ joined
[06:26] <moritz>    

[06:26] *** camelia left
[06:27] *** camelia joined
[06:27] <moritz> m: 1

[06:28] *** ChanServ sets mode: +v camelia

[06:28] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´_auto_execute 2 at lib/EvalbotExecuter.pm line 178.‚ê§_auto_execute 3 at lib/EvalbotExecuter.pm line 198.‚ê§_auto_execute 4 at lib/EvalbotExecuter.pm line 207.‚ê§¬ª

[06:29] <moritz> eeks :-)

[06:29] *** camelia left
[06:29] *** camelia joined
[06:29] <moritz> m: say 42

[06:30] <moritz> curiously, the debug output shows that execution happens pretty much immediately

[06:30] *** aborazmeh left
[06:30] <moritz> so the delay is somewhere between execution and reporting to the channel

[06:31] *** ChanServ sets mode: +v camelia

[06:31] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´42‚ê§¬ª

[06:31] <moritz> m: say 42

[06:31] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´42‚ê§¬ª

[06:34] *** telex left
[06:34] <nine> moritz: will you be at the APW?

[06:34] *** telex joined
[06:37] <moritz> nine: I don't know yet :(

[06:38] <FROGGS_> moritz: would be nice to meet you :o)

[06:44] *** SamuraiJack joined
[06:44] <moritz> FROGGS_: same here :-)

[06:49] *** nbrown joined
[06:50] *** FROGGS_ left
[06:51] *** brrt joined
[06:51] <brrt> \o

[06:54] *** nbrown left
[06:58] *** virtualsue joined
[07:04] *** darutoko joined
[07:06] *** FROGGS_ joined
[07:13] *** FROGGS_ is now known as FROGGS

[07:14] <nine> Good morning brrt!

[07:15] <brrt> hi nine :-)

[07:15] <brrt> how is Inline::Perl5 doing

[07:15] <brrt> or rather

[07:15] <brrt> how are the boundaries holding up?

[07:15] *** ssutch left
[07:15] <nine> They are on a fast retreat ;)

[07:16] *** ssutch joined
[07:17] <FROGGS> jnthn: I finally found the bad commit that broke NativeCall on JVM: https://gist.github.com/FROGGS/0d4b5c771c7d9eb4f5b6

[07:21] <brrt> nice

[07:22] <nine> Instead of technical challanges I'm more and more faced with issues of good API design for the sugar.

[07:26] <brrt> tbh, relevance(good api design) < relevance(working code)

[07:26] <brrt> :-)

[07:26] *** anaeem1_ joined
[07:27] <nine> But it would be a shame to have such a nicely designed language and butt ugly interop ;)

[07:28] <nine> In any case I'm currently on the other side, trying to use Inline::Perl5 to get a better feeling for the use cases and also to get some demonstration material for my talk at the APW.

[07:29] *** ghostlin_ joined
[07:32] <brrt> current western culture is not so certain about the ugliness of butts

[07:32] <brrt> in fact they have come into a re-appreciation of sorts

[07:32] <FROGGS> jnthn: it is surprising, but that indeed helps:

[07:32] <FROGGS> @@ -2531,1 +2531,1 @@ class Perl6::Actions is HLL::Actions does STDActions {

[07:32] <FROGGS> -        my $clone := !($outer =:= $*UNIT);

[07:32] <FROGGS> +        my $clone := 1; #!($outer =:= $*UNIT);

[07:38] *** fhelmberger joined
[07:43] *** Mso150 joined
[07:50] *** nbrown joined
[07:54] *** nbrown left
[07:55] <lizmat> good *, #perl6!

[08:03] <FROGGS> hi lizmat 

[08:03] <lizmat> FROGGS o/

[08:13] *** dolmen joined
[08:17] <sergot> hi lizmat o/

[08:17] <sergot> hi #perl6 o/

[08:17] <FROGGS> hi sergot 

[08:17] <sergot> o/ FROGGS 

[08:18] *** meisl joined
[08:22] *** meisl left
[08:25] *** Alina-malina left
[08:29] *** yeahnoob joined
[08:31] <lizmat> afk for a few hours&

[08:32] *** zakharyas joined
[08:34] *** mr-foobar left
[08:40] *** Alina-malina joined
[08:48] *** Mso150 left
[08:51] *** nbrown joined
[08:52] *** ghostli__ joined
[08:52] *** ghostlin_ left
[08:55] *** nbrown left
[09:00] *** vladtz left
[09:02] *** jerrycheung left
[09:07] *** vladtz joined
[09:08] *** _slade_ left
[09:09] *** denis_boyun_ joined
[09:15] *** ghostli__ left
[09:15] *** ghostlin_ joined
[09:16] *** ghostlin_ left
[09:19] *** chenryn left
[09:23] *** chenryn joined
[09:30] *** mberends joined
[09:30] *** yeahnoob left
[09:30] *** cognome joined
[09:31] *** pecastro joined
[09:32] *** colomon left
[09:37] *** virtualsue left
[09:43] <dalek> roast: 5e95e5d | usev6++ | S0 (2 files):

[09:43] <dalek> roast: Moving test for RT #77158 to S06-signature/types.t

[09:43] <dalek> roast: it lived in S02-types/77158.t which was not included in t/spectest.data

[09:43] <dalek> roast: test was added with https://github.com/perl6/roast/commit/b4fc0fe9f11bb34e4442da7e1f945e8740d07c7c

[09:43] <dalek> roast: review: https://github.com/perl6/roast/commit/5e95e5dca3

[09:43] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77158

[09:43] *** yeahnoob joined
[09:48] *** Alina-malina left
[09:51] *** nbrown joined
[09:56] *** ghostlin_ joined
[09:56] *** nbrown left
[10:05] *** avuserow left
[10:11] *** cosimo joined
[10:15] *** cognome left
[10:15] *** cognome joined
[10:20] *** cognome left
[10:21] <dalek> roast: 6a8904c | usev6++ | S02- (2 files):

[10:21] <dalek> roast: Moved test for RT #76608 to S02-literals/misc-interpolation.t

[10:21] <dalek> roast: it lived in S02-names-var/76608.t which was not included in t/spectest.data

[10:21] <dalek> roast: test was added with https://github.com/perl6/roast/commit/b4fc0fe9f11bb34e4442da7e1f945e8740d07c7c

[10:21] <dalek> roast: review: https://github.com/perl6/roast/commit/6a8904c461

[10:21] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76608

[10:33] *** brrt left
[10:41] *** yeahnoob left
[10:42] *** nbrown joined
[10:42] *** virtualsue joined
[10:42] *** prevost joined
[10:43] *** ribasushi joined
[10:44] *** cosimo left
[10:46] *** cognome joined
[10:46] *** nbrown left
[10:47] *** cognome left
[10:47] *** cognome joined
[10:48] <lizmat> I know not many people use perl 6 in production, but maybe it would be an idea to not "take" environment variables into %*ENV of which the value starts with "() {" ?

[10:48] <lizmat> see e.g. http://lcamtuf.blogspot.nl/2014/09/quick-notes-about-bash-bug-its-impact.html

[10:48] <moritz> lizmat: that's the entirely wrong level to fix that

[10:49] <lizmat> why?

[10:49] <lizmat> if somebody is using HTTP::Async::Server ?

[10:50] *** avuserow joined
[10:50] <moritz> lizmat: then they should upgrade their bash, not their rakudo, to fix the security hole

[10:51] <jnthn> lizmat: In the time they could spend updating their Rakudo to band-aid the problem, they could probably have updated their bash... :)

[10:51] <yoleaux> 24 Sep 2014 17:00Z <lizmat> jnthn: this fixes the build breakage for me: https://github.com/rakudo/rakudo/commit/5d8eebfdc7

[10:51] <lizmat> the way I understand it, is that the bash fix isn't 100% safe yet

[10:51] <moritz> lizmat: we don't want to provide them with a false sense of security, and have them forget about other paths that invoke bash

[10:51] <moritz> lizmat: there will be a better fix Very Soon[tm], I'm sure

[10:51] *** cosimo joined
[10:52] <lizmat> ok, just wanted to make sure we're doing everything we can in that respect

[10:52] <nine> Sounds more like a really good argument for taint mode

[10:52] <lizmat> true

[10:53] *** cognome left
[10:53] <nine> Just to make sure: Perl 6 doesn't have a taint mode, doesn't it?

[10:53] *** leont joined
[10:54] <lizmat> nope

[10:55] <jnthn> FROGGS: Hm, that surprised me too...

[10:56] <lizmat> jnthn: did you see my fix for yesterday's build crash on OS X

[10:57] *** chenryn left
[10:59] <jnthn> dinner &

[11:04] *** mr-foobar joined
[11:11] *** rindolf left
[11:11] *** chenryn joined
[11:12] *** jerrycheung joined
[11:17] *** prevost_ joined
[11:19] <dalek> roast: 06d044d | usev6++ | S03-operators/misc.t:

[11:19] <dalek> roast: added RT (122849) ticket number for fudged test

[11:19] <dalek> roast: review: https://github.com/perl6/roast/commit/06d044d220

[11:19] *** kurahaupo_ left
[11:21] *** prevost_ left
[11:21] *** camelia left
[11:21] *** camelia joined
[11:22] <moritz> m: say 42

[11:22] *** ChanServ sets mode: +v camelia

[11:22] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´42‚ê§¬ª

[11:22] <moritz> it seems the slowness in executing the first statement is in Bot::BasicBot somewhere

[11:24] <tadzik> yes, I have the same thing with dinnerbot at work

[11:24] <tadzik> the first query to it is sloow

[11:25] <moritz> tadzik: oh, that's interesting

[11:26] <tadzik> (that bot is in perl 5)

[11:26] <tadzik> (still)

[11:28] <moritz> tadzik: and makes me confident enough to report a bug against Bot::BasicBot

[11:33] <moritz> but first I'm trying to reproduce it with a minimal example

[11:33] <moritz> tadzik: does your dinnerbot join multiple channels?

[11:33] <tadzik> moritz: no

[11:33] <lizmat> does this ring a bell with anybody: "eof requires an object with REPR MVMOSHandle" ??

[11:34] <FROGGS> lizmat: no

[11:34] <moritz> lizmat: might be a read-after-close or so

[11:35] <lizmat> hmmm....

[11:35] <lizmat> laziness.... gather   ...  hmmmm...

[11:38] <moritz> tadzik: I can't reproduce it in a simplistic example :(

[11:38] <tadzik> hm :/

[11:39] <moritz> tadzik: does your bot execute any shell commands?

[11:41] <tadzik> moritz: no

[11:41] *** mberends left
[11:42] <lizmat> ok, interesting problem:

[11:42] <tadzik> it does some sqlite 

[11:42] <lizmat> I have a gather / take loop while reading from a file

[11:42] <lizmat> and I want to close the handle to the file when the gather/take loop is done

[11:42] <lizmat> how do I do that?

[11:42] *** nbrown joined
[11:43] <moritz> gather { loop { ... }; $fh.close };

[11:43] <lizmat> ah, but if the gather is the return value of a method ?

[11:44] <lizmat> aka: IO::Path:D:.lines

[11:44] <moritz> that doesn't matter, afaict

[11:44] <moritz> you can still do it inside the gather

[11:44] <moritz> the return value from gather is the list of take()s, not the last statement

[11:44] <lizmat> ah, hhmmm... ok

[11:45] <lizmat> good point  :-)

[11:45] <lizmat> moritz++ moritz++ (yes, twice in a row)

[11:45] *** mberends joined
[11:47] *** nbrown left
[11:48] *** cognome joined
[11:52] <moritz> tadzik: https://rt.cpan.org/Ticket/Display.html?id=99133 I've also CC'ed you on the bug report

[11:53] *** cognome left
[11:53] *** kurahaupo left
[11:58] <TimToady> yes, the inside of a gather is technically a sink

[12:05] <lizmat> good morning, TimToady 

[12:08] <moritz> m: gather { (class { method sink { say 'sunk' } }).new }

[12:08] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´sunk‚ê§¬ª

[12:08] <moritz> not just technically :-)

[12:12] *** yeahnoob joined
[12:12] <dalek> roast: bc10238 | (Elizabeth Mattijsen)++ | S03-operators/misc.t:

[12:12] <dalek> roast: Fix unquoted fudge message

[12:12] <dalek> roast: review: https://github.com/perl6/roast/commit/bc10238747

[12:19] <lizmat> open() shouldn't work on directories at all, right ?

[12:23] *** kurahaupo joined
[12:31] *** cognome joined
[12:34] *** Ven joined
[12:34] <Ven> is panda known to be borked?

[12:35] <Ven> o/, #perl6

[12:35] <Ven> my rakudo is from Mon Sep 22 11:57:21 2014

[12:36] *** cognome left
[12:37] *** SamuraiJack left
[12:38] <Ven> Compiling lib/Shell/Command.pm to mbc ===SORRY!=== When pre-compiling a module, its dependencies must be pre-compiled first. Please pre-compile /Users/raphaelkarpinski/os/rakudo/install/languages/perl6/site/lib/File/Find.pm

[12:38] <Ven> well, guess the jig's up

[12:38] * moritz tries

[12:39] <masak> Ven: right now and for the remainder of September, trying to have a synchronous conversation with me is basically very difficult. I will make an honest attempt to answer asynchronously, though.

[12:40] <Ven> masak: fair enough :). IRL is hard!

[12:41] <moritz> Ven: panda just bootstrapped fine for me, on a rakudo from yesterday

[12:41] <Ven> uh-oh.

[12:42] * Ven cleans and retries...

[12:42] <Ven> moritz: will you be at APW?

[12:42] *** SamuraiJack joined
[12:42] *** jerrycheung left
[12:43] *** nbrown joined
[12:44] <moritz> Ven: ENOIDEAYET

[12:44] <Ven> EFAIRENOUGH

[12:46] <Ven> (btw, works now with panda)

[12:46] <lizmat> EWIPEISGOOD

[12:46] *** cognome joined
[12:47] *** nbrown left
[12:48] *** kaleem left
[12:50] *** Ven left
[12:50] *** cognome left
[12:55] *** raiph left
[12:55] * TimToady -> Bella Vista, AR &

[12:55] <lizmat> safe travels, TimToady!

[12:59] *** molaf joined
[12:59] *** jerrycheung joined
[12:59] <jnthn> .oO( a mother in AR )

[13:00] <jnthn> lizmat: Yes, saw the fix, though...not sure why it helped...

[13:00] <jnthn> lizmat: And have a feeling it just changed enough to hid the heisenbug...

[13:02] <lizmat> suggestions for me to try and get more info?

[13:02] <jnthn> lizmat: I think it may have been related to the long-standing inlining bug...

[13:03] <jnthn> lizmat: You could try reverting it and doing a build with ASAN if you use clang to compile

[13:03] <lizmat> at nqp level?

[13:03] <jnthn> MoarVM doesn't care if the code is NQP of Perl 6 when it goes inlining :)

[13:03] <jnthn> *or

[13:03] <lizmat> do we have a how-to with ASAN somewhere ?

[13:03] <jnthn> It's a configure flag to Moar

[13:04] <lizmat> ah, ok, will look

[13:04] <jnthn> I...thought so anyway

[13:04] <moritz> perl Configure.pl --asan

[13:04] <moritz> not documented though

[13:04] <jnthn> It's not menitoned in Configure.pl --help :(

[13:05] * moritz docpatche

[13:05] <moritz> s

[13:06] <jnthn> oh...me too ;)

[13:06] <jnthn> Go for yours :)

[13:08] <moritz> gone :-)

[13:09] <jnthn> moritz++

[13:13] <moritz> also, there's --instrument

[13:13] <moritz> which seems to do roughly the same

[13:15] *** erkan left
[13:17] <lizmat> adding --moar-option=--asan should be enough, right ?

[13:17] <moritz> lizmat: I don't think that will force a moar rebuild

[13:17] <lizmat> after I nuke install, it will :-)

[13:18] <lizmat> clang: error: unsupported argument 'address' to option 'fsanitize='

[13:18] <jnthn> Aww...Copenhagen - Salzburg is too long to be conveniently trainable.

[13:18] <lizmat> Munich - Salzburg is

[13:18] <lizmat> flying to Munich shouldn't be too much of a pb

[13:19] <lizmat> flying to Salzburg may be more problematic ?

[13:19] <nwc10> Jost Krieger's opinion is that Munich Airport is only accessible by air.

[13:19] *** Alina-malina joined
[13:19] <nwc10> He has a point.

[13:19] <nwc10> it's faffy

[13:19] <nwc10> OK, it's all rail-based transport. But it's still annoying.

[13:20] <nwc10> they wisely decided not to build the monorail

[13:20] <jnthn> lizmat: Well, it's a change of plane to Salzburg. There are sane options 

[13:20] <jnthn> But was fishing around for alternatives :)

[13:20] <jnthn> Yeah, may consider Munich

[13:20] <lizmat> Munich -> Salzburg is about 1 hour by car

[13:21] <jnthn> yeah, train looks not long :)

[13:21] <nwc10> airport to Salburg is probably more like 2 by public transport

[13:21] <jnthn> *nod*

[13:21] <nwc10> airport is on the wrong side of town

[13:21] <FROGGS> I'm training all the way down from Berlin :o)

[13:21] <jnthn> bbiab :)

[13:21] <nwc10> IIRC it's S1 or S8 to hbf, then 1 hour to Salzburg

[13:22] *** kaare_ left
[13:27] <lizmat> am I missing something in my clang???  "clang: error: unsupported argument 'address' to option 'fsanitize=':

[13:29] <moritz> lizmat: what's your clang version?

[13:29] <lizmat> Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)

[13:29] <lizmat> Target: x86_64-apple-darwin13.3.0

[13:29] <lizmat> Thread model: posix

[13:31] <pmichaud> good morning, #perl6

[13:31] <moritz> \o pmichaud 

[13:31] *** chenryn left
[13:31] <lizmat> good morning, pmichaud 

[13:32] <pmichaud> I'm still trying to work out details for coming to salzburg.  I have a meeting conflict on Oct 11 that I'm trying to work out.

[13:32] <lizmat> cool!

[13:32] <lizmat> (that you're trying to work it out, I mean :-)

[13:32] <pmichaud> where are people staying ... what hotel should I reserve?

[13:33] <moritz> lizmat, nine, FROGGS: turns out I'm not coming to APW :(. But if any of you want to make a stop in the N√ºrnberg area on your travels to or from Salzburg, I'd be happy to arrange a meeting

[13:33] <moritz> also nwc10 ^^

[13:35] <FROGGS> :o(

[13:36] <FROGGS> moritz: it's unlike that I jump out the the ICE near Nuremberg though :/

[13:36] <FROGGS> of*

[13:44] *** grondilu joined
[13:44] *** nbrown joined
[13:45] <grondilu> m: class Foo {...}; constant foo = Foo.new; class Foo {}

[13:45] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´===SORRY!===‚ê§No such method 'new' for invocant of type 'Foo'‚ê§¬ª

[13:45] <grondilu> n: class Foo {...}; constant foo = Foo.new; class Foo {}

[13:45] <camelia> niecza : OUTPUT¬´Cannot open assembly './run/Niecza.exe': No such file or directory.‚ê§¬ª

[13:45] <grondilu> r-j: class Foo {...}; constant foo = Foo.new; class Foo {}

[13:45] <camelia> rakudo-jvm 5d8eeb: OUTPUT¬´Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.‚ê§¬ª

[13:46] <moritz> grondilu: this can't ever work

[13:46] <grondilu> why not?

[13:46] <lizmat> constant is compiile time?

[13:46] *** kjs_ joined
[13:46] *** cognome joined
[13:47] <moritz> grondilu: the constant expression is evaluated at compile time; at that point, Foo is only stubbed, the class definition hasn't been parsed yet

[13:47] <moritz> grondilu: so Foo doesn't even have a method new inherited from Mu yet

[13:47] <grondilu> it works with functions, doesn't it?

[13:48] <grondilu> m: constant foo = f();   sub f() { pi }; say foo

[13:48] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´===SORRY!===‚ê§Cannot invoke null object‚ê§¬ª

[13:48] * grondilu thought that would work

[13:49] <grondilu> m: sub f {...}; constant foo = f();   sub f() { pi }; say foo

[13:49] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/4FTeIi6JkW‚ê§Redeclaration of routine f‚ê§at /tmp/4FTeIi6JkW:1‚ê§------> [32m.}; constant foo = f();   sub f() { pi }[33m‚èè[31m; say foo[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        s‚Ä¶¬ª

[13:50] <grondilu> :/

[13:50] *** raiph joined
[13:51] *** cognome left
[13:51] <grondilu> Foo is stubbed but it still inherits from Any, doesn't it?  So it should have the default new candidate, shouldn't it?

[13:52] *** nbrown left
[13:53] <grondilu> there has to be a way to define a constant instance, right?  I would have sweared I already done something like that.

[13:53] <moritz> it only starts to inherit from any once the } of the actual class definition is parsed

[13:53] <moritz> (that is, at class composition time)

[13:54] <grondilu> so no constant instance is possible at all??

[13:54] <moritz> it is, after the actual declaration

[13:55] <grondilu> :/

[13:55] <grondilu> not great

[13:55] <moritz> sadly, Perl 6 doesn't have support for time travelling.

[13:55] <bartolin> I've got a question about t/spec/S03-smartmatch/hash-hash.t 

[13:55] <bartolin> the file was recently removed from t/spectest.data (IIRC since it didn't pass)

[13:55] <bartolin> also, the spec changed recently (https://github.com/perl6/specs/commit/b99ecf40b7cd8197086a07ee857c5f1f91fad489) and it looks like the new semantics are NYI.

[13:55] <bartolin> so, should the old tests be replaced (and fudged 'NYI')?

[13:55] <moritz> (you can solve NP problems in P by time travelling, so that would be really nice feature)

[13:55] <bartolin> does it make sense to write a ticket about this or how are spec changes like this handled?

[13:56] <moritz> bartolin: the best approach is to just adapt the tests to what the specs now

[13:56] <moritz> bartolin: so yes, replace tests

[13:56] <moritz> bartolin: and then ask somebody (or issue a pull request) to add it to t/spectest.data again in rakudo

[13:57] <bartolin> moritz: thanks!

[13:57] <grondilu> m: say time-travel;  sub time-travel { "no, that's not time travel" }

[13:57] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´no, that's not time travel‚ê§¬ª

[13:58] <moritz> not quite :-)

[13:58] <grondilu> I guess that works because there is no such thing as a "function compilation phase"

[13:58] <bartolin> moritz: Currently parrot and jvm throw exceptions when smart-matching hashes. but there are new tests, the file could probably bei added with '# moar' to t/spectest.data

[13:58] <grondilu> it's a bit annoying that I can't place my constant declarations wherever I want.

[13:59] <bartolin> *when there are new tests

[13:59] * grondilu would like to put them at the beginning of the module, where they are well visible.

[14:00] <dalek> rakudo-star-daily: 6182413 | coke++ | log/ (14 files):

[14:00] <dalek> rakudo-star-daily: today (automated commit)

[14:00] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/6182413e7e

[14:00] <moritz> grondilu: then you should put the class declaration in a separate file, and 'use' it before doing the constant declaration

[14:01] <grondilu> hum... that's a good point actually

[14:01] *** colomon joined
[14:02] * colomon has no idea why Inline::Perl5 keeps on failing.

[14:02] <colomon> (in smoke, works fine when I install it manually)

[14:03] *** mberends left
[14:05] <grondilu> though my class is actually using the constant in one of its methods :/

[14:05] <[Coke]> running in cron? different path, missng env vars...

[14:05] <moritz> is there a perlbrew involved?

[14:06] *** jerrycheung left
[14:06] <colomon> moritz: perlbrew, yes.  cron, yes.

[14:07] *** jerrycheung joined
[14:07] <colomon> Trying to isolate for mini-smoke

[14:07] <moritz> colomon: does the cron thingy source the perlbrew bashrc?

[14:07] <[Coke]> colomon: try running a cron job that just does "env" to show the environment you're using (saving the output somewhere) then you can try to limit your normal runtime to that until things break.

[14:08] <[Coke]> ... but moritz++ probably just found the issue. :)

[14:08] *** aborazmeh joined
[14:10] <colomon> fails even outside of a cron.  ;)

[14:10] <colomon> but the perlbrew thing may indeed be the issue here.

[14:10] <moritz> colomon: what's the error message?

[14:10] <colomon> ux/CORE/libperl.a(op.o): relocation R_X86_64_32S against `PL_sv_yes' can not be used when making a shared object; recompile with -fPIC

[14:12] <[Coke]> Any reason not to make JIT the default and get rid of --enable-jit ?

[14:12] <[Coke]> (or make it warn with "of course, silly!")

[14:12] <moritz> colomon: you need a perlbrew with -Duseshrplib 

[14:13] *** aborazmeh left
[14:14] <colomon> trying to install 5.18.1 with -Duseshrplib now

[14:15] *** bartolin left
[14:15] *** davido__ left
[14:17] *** davido__ joined
[14:19] *** Sqirrel joined
[14:19] *** treehug88 joined
[14:20] <moritz> also there's 5.20.1 now

[14:21] *** kaleem joined
[14:22] <colomon> moritz: 5.18.1 is what I have Inline;:Perl5 working on on my other account.  :)

[14:24] <colomon> panda needs a "fetch and test but don't install" mode.  

[14:26] <FROGGS> true

[14:29] <moritz> colomon: did you see my private message?

[14:42] <nine> Wow....some guy sent me - out of the blue - some pull requests to make Inline::Python compatible with Python 3. (Free Software)++

[14:43] *** SamuraiJack_ joined
[14:44] *** SamuraiJack left
[14:46] *** cognome joined
[14:48] *** nbrown joined
[14:51] *** cognome left
[14:52] *** nbrown left
[14:55] <moritz> nine: that's way cool

[14:56] <lizmat> .oO( inter-operating Python 2 and Python 3 through Perl 5 in Perl 6 )

[14:57] <lizmat> what is not to like :-)

[14:57] *** yeahnoob left
[14:58] <nwc10> can we have both Python 2 *and* Python 3 inlined into the same process yet? (by some amount of trickery, if essential)

[14:59] <nine> If we could have that, the Python guys could as well

[15:00] *** kaleem_ joined
[15:00] <nine> Apparently Python 2 and 3 are so closely related, that just two #defines suffice to make Inline::Python compatible with both even at C level without any #if whatsoever.

[15:00] *** kaleem left
[15:01] <nine> What would still be possible is running both in different processes. That's the solution they have obviously not found yet :)

[15:01] <nwc10> that was what I was sort of intimating by "Trickeryy"

[15:02] <moritz> py2-over-ip-over-py3 :-)

[15:03] <nine> py2-over-ip-over-avian-carriers-over-py3

[15:03] *** raiph left
[15:04] *** SamuraiJack_ left
[15:07] *** telex left
[15:08] *** telex joined
[15:10] *** mberends joined
[15:13] *** jerrycheung left
[15:14] <gtodd> nine: cool py2+3 in perl5+6 !  ... but do you still have to do all the careful  indents and stuff ? ;-)

[15:19] *** [Sno] left
[15:21] <dalek> rakudo/nom: 17a13c7 | (Elizabeth Mattijsen)++ | src/core/ (4 files):

[15:21] <dalek> rakudo/nom: First part of making IO up to spec

[15:21] <dalek> rakudo/nom: 

[15:21] <dalek> rakudo/nom: with S16 | S32/IO synopsis updates.

[15:21] <dalek> rakudo/nom: 

[15:21] <dalek> rakudo/nom: This set of changes makes the .IO coercer return an IO::Path, rather than an

[15:21] <dalek> rakudo/nom: (unopened) IO::Handle.  Minor roast changes were necessary, but just because

[15:21] <dalek> rakudo/nom: the spec changed.  Hope that any problems in the ecosystem, will become clear

[15:21] <dalek> rakudo/nom: quickly: I don't expect many issues, though, apart from some features now

[15:21] <dalek> rakudo/nom: actually working  :-)

[15:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17a13c7a31

[15:22] <dalek> roast: 114dd17 | (Elizabeth Mattijsen)++ | S (3 files):

[15:22] <dalek> roast: Minor IO related tweaks

[15:22] <dalek> roast: review: https://github.com/perl6/roast/commit/114dd17f01

[15:23] <moritz> m: sub native(Sub $x) { }; native sub foo() { say 42 }; foo

[15:23] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/0MlIyWykQV‚ê§Unable to parse native definition‚ê§at /tmp/0MlIyWykQV:1‚ê§------> [32msub native(Sub $x) { }; native sub [33m‚èè[31mfoo() { say 42 }; foo[0m‚ê§    expecting any of:‚ê§        state‚Ä¶¬ª

[15:23] <moritz> why doesn't that work?

[15:23] <moritz> m: sub n(Sub $x) { }; n sub foo() { say 42 }; foo

[15:23] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´42‚ê§¬ª

[15:23] <jnthn> moritz: Because native is a package declarator

[15:23] <moritz> oh, is 'native' reserv... ah.

[15:23] *** Alina-malina left
[15:23] <moritz> :(

[15:26] <lizmat> so far, nobody has objected to my work on S16 & S32/IO, so I'm steaming ahead with the implementation  :-)

[15:27] *** dolmen left
[15:28] <colomon> moritz++

[15:28] <moritz> public service announcement: smoke results are now at http://host08.perl6.com:8080/report (used to be host07

[15:28] *** Ven joined
[15:28] <moritz> I'll try to come up with a redirect for the transition period

[15:28] *** colomon left
[15:29] <[Coke]> moritz: is the smoker now running on host08 as well, or is it just the reports being posted there?

[15:30] <moritz> [Coke]: the latter, afaict. colomon++ does that part

[15:30] *** Ven left
[15:31] <lizmat> cycling&

[15:32] <[Coke]> someone pointed out we're getting some test failures now that "." is no longer in PERL6LIB.

[15:32] <[Coke]> should it be? Or should roast tests that require modifications to the library path modify it themselves?

[15:32] <[Coke]> also, not all backends failed that test, which makes me think that we need another test that insures we don't auto-include . in the path.

[15:33] <[Coke]> Christian Bartolom√§us, it was.

[15:34] <moritz> [Coke]: it's fine to require 'use lib ".";' in tests

[15:35] <leont> lizmat: looks sensible to me

[15:35] <[Coke]> moritz: ok. Then any recent failures on the dailies might need fixups in roast.

[15:37] <japhb> timotimo: Are you skipping the p6weekly this week?

[15:37] <timotimo> i think i am

[15:39] *** bartolin joined
[15:39] <japhb> .oO( I think I can, I think I can! )

[15:40] <[Coke]> aooogh. host08 has moved on to the jvm build/test for the day

[15:42] *** breinbaas joined
[15:43] <[Coke]> lizmat: what's curupdir?

[15:43] <[Coke]> oh, nevermind. 

[15:43] *** FROGGS left
[15:44] <gtodd> timotimo: if you skip this week then next week will be even better :)

[15:46] *** cognome joined
[15:47] *** raiph joined
[15:47] *** kaleem_ left
[15:48] *** guru joined
[15:48] <jnthn> "The future will be better tomorrow!"

[15:48] *** ghostlin_ left
[15:48] <bartolin> regarding the PERL6LIB question: If you are running t/spec/test_summary, you have to include '.' in PERL6LIB -- in addition to 'lib'

[15:48] *** guru is now known as Guest47988

[15:49] *** Guest47988 is now known as ajr_

[15:49] <bartolin> Otherwise a few tests fail -- e.g. S11-modules/import-tag.t which has a "use t::spec::packages::S11-modules::Foo"

[15:49] *** nbrown joined
[15:49] <bartolin> that's found in '.'

[15:49] <moritz> then test_summary should include the . in PERL6LIB

[15:49] <moritz> or the tests should be fixed, even better

[15:50] *** Akagi201 left
[15:50] <jnthn> iirc, t/harness does include it

[15:50] *** FROGGS[mobile] joined
[15:50] <moritz> though I'd be happy to get rid of it

[15:50] <moritz> it's way too confusing if you have an A.pm or a Foo.pm in your rakudo dir for testing some stuff

[15:51] *** Akagi201 joined
[15:51] <moritz> and the test run preferes that over the ones in t/spec/packages

[15:51] <bartolin> well there was some trouble with moar segfaulting, wenn setting PERL6LIB to "$(pwd)/lib:." (via environmental variable) before calling t/test_summary:

[15:51] <bartolin> see: RT #122842

[15:51] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122842

[15:51] *** cognome left
[15:52] <bartolin> but "export PERL6LIB=$(pwd)/lib:$(pwd) works

[15:52] <bartolin> (works in the sense of "no segfault and all tests run")

[15:53] *** zakharyas left
[15:54] *** nbrown left
[15:57] <bartolin> probably we should have both: tests relying on "." in PERL6LIB should be fixed and adding "." to PERL6LIB shouldn't segfault?

[15:59] *** Alina-malina joined
[15:59] <moritz> bartolin: agreed

[15:59] <bartolin> I'll try to take care of the first thing ;-)

[16:00] <moritz> m: say Nil.elems

[16:00] <camelia> rakudo-moar 5d8eeb: OUTPUT¬´0‚ê§¬ª

[16:01] <dalek> rakudo/nom: 7469aad | moritz++ | lib/Test.pm:

[16:01] <dalek> rakudo/nom: [Test.pm] avoid a warning in throws_like

[16:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7469aadfd2

[16:01] *** fhelmberger left
[16:02] <PerlJam> bartolin++

[16:02] <bartolin> moritz++ (I looked at that, but didn't know how to fix it.)

[16:03] <PerlJam> and it's not adding . to PERL6LIB that causes the segfault is it?  I mean, there are examples that do not segfault and do have . in PERL6LIB

[16:03] <bartolin> Yes, it only segfaults in one very specific case.

[16:04] <bartolin> (see ticket)

[16:04] <dalek> roast: e9469ac | moritz++ | S1 (5 files):

[16:04] <dalek> roast: add "use lib '.';" to tests that need it

[16:04] <dalek> roast: review: https://github.com/perl6/roast/commit/e9469ac9c0

[16:04] <moritz> ok, I hope I didn't mess up anything

[16:05] <bartolin> oh, that was quick. moritz++

[16:05] *** rurban joined
[16:06] *** denis_boyun_ left
[16:07] *** mberends left
[16:09] *** colomon joined
[16:09] <gtodd> If I "strings" some random library and then use NativeCall I can see that it is finding the library ........... eg:

[16:09] <gtodd> perl6 -MNativeCall -e ' sub H5get_libversion is native("libhdf5") { * }; say H5get_libversion '

[16:09] <gtodd> blah gives meaningless rsult :-)

[16:09] <gtodd> but 

[16:10] *** SamuraiJack_ joined
[16:10] <gtodd> with iInline::Perl5 I get Unhandled exception: Cannot locate native library '/home/gtodd/perl6/languages/perl6/site/lib/Inline/p5helper.so'

[16:10] <gtodd> is that telling me it can not find libperl.so?

[16:10] <moritz> gtodd: nope

[16:11] <moritz> gtodd: p5helper.so is a helper library that's shipped with Inline::Perl5

[16:11] <gtodd> yeah but it is there

[16:15] *** ssutch_ joined
[16:19] *** Mso150 joined
[16:25] <gtodd> and it did work in an earlier iteration ....   I must have built it with one of my p5 brew environments turned on ...

[16:26] *** Mso150 left
[16:26] *** Mso150_u joined
[16:29] <raiph> #perl6: Is the P6 use of the term "gradual typing" consistent with http://en.wikipedia.org/wiki/Gradual_typing ?

[16:29] <yoleaux> 22 Sep 2014 09:27Z <lizmat> raiph: please read up on S11:01 and S22:01: basically each CompUnitRepo is responsible for its own installation management

[16:29] <synopsebot> Link: http://perlcabal.org/syn/S11.html#line_01

[16:29] <yoleaux> 22 Sep 2014 09:27Z <lizmat> raiph: in Perl 6, there is no global distribution management

[16:29] <yoleaux> 22 Sep 2014 09:28Z <lizmat> raiph: anybody can write their own distribution manager (CompUnitRepo) as long as it adheres to the specced API

[16:31] *** _slade_ joined
[16:33] *** colomon left
[16:34] *** ssutch_ left
[16:35] *** SamuraiJack_ left
[16:37] *** pecastro left
[16:46] *** cognome joined
[16:47] *** FROGGS joined
[16:47] <rurban> raiph: "gradual typing" mostly, but not strictly. default dynamically typed variables, with optional static compile-time checks and opts. Same as in Common LISP, they were the first, just didnt call it this way. Gradual would call Any dynamic, our Any can be Static.

[16:47] <yoleaux> 19 Sep 2014 12:02Z <bartolin> rurban: I was able to build parrot and perl6-p an OpenBSD 5.5. On NetBSD 6.1.4 I had two problems with dyncall. I just created a pull request which should fix these issues.

[16:47] <yoleaux> 19 Sep 2014 12:04Z <bartolin> rurban: (The pull request is for nqp: https://github.com/perl6/nqp/pull/183)

[16:47] <yoleaux> 20 Sep 2014 20:37Z <raiph> rurban: Does it make sense to remove http://github.com/perl6/nqp-rx ?

[16:48] *** jdv79_ joined
[16:48] <jdv79_> where is the planet site now?  or at least the weekly updates site.

[16:48] <rurban> raiph: yes, you can remove perl6/nqp-rx. parrot has it's own copy, and perl6 uses its better nqp

[16:48] *** jdv79_ is now known as jdv79

[16:48] <rurban> but it's need to be decided by the list

[16:49] <moritz> actually parrot's copy of nqp is the iteration before nqp-rx (iirc)

[16:49] *** erkan joined
[16:50] *** kaare_ joined
[16:50] *** nbrown joined
[16:50] <moritz> I guess nqp-rx can stay on github as a historical document, as long as the README is sufficently clear

[16:50] <rurban> so parrot should update it's nqp-rx to this?

[16:50] <PerlJam> parrot should use the same nqp that rakudo uses IMHO

[16:50] <rurban> Last time I checked I backported changes from parrot to this one

[16:51] *** cognome left
[16:51] <rurban> PerlJam: That's an entirely different task TODO. I started with it, but got stuck

[16:51] <PerlJam> aye, I imagine it's some work.

[16:52] <rurban> parrot should use no nqp-rx at all imho. one is enough. but we have some bootstrapping tools relying on it.

[16:52] <rurban> esp. the ops2c compiler and the profiler. only opsc2 is important

[16:53] <rurban> but not really needed in parrot core. only needed for bootstrapping so we could get rid if it. no big deal.

[16:53] <moritz> rurban: IMHO it doesn't matter much if parrot uses nqp-rx or not; the rakudo folks neither maintain it, nor do they maintain the one that aprrot uses now

[16:53] <rurban> yes, exactly.

[16:54] <rurban> it might be useful to have a better and the standard nqp used within parrot though. 

[16:54] <PerlJam> no need to worry about upgrades if it never changes ;)

[16:54] *** nbrown left
[16:55] <raiph> rurban, moritz: thx, added link to your comments to "Remove unneeded repos from github/perl6" https://questhub.io/realm/perl/quest/534571eabbd0bed24e00006d

[16:55] *** kaleem joined
[16:55] <rurban> I wanted to enhance ops2c to add line number info, but never got through. so I rather thinking of removing nqp-rx at all, and use the old perl5 compiler which supported the old jit and runcores. but this is a long-term project.

[16:56] <raiph> pl6anet.org

[16:56] <rurban> raiph, please don't delete yet. I want to backcheck if it's really better than our.

[16:57] <raiph> rurban: sure, thx for addressing this

[16:58] <dalek> nqp-rx: 46f8df2 | moritz++ | README (2 files):

[16:58] <dalek> nqp-rx: move README to README.pod

[16:58] <dalek> nqp-rx: 

[16:58] <dalek> nqp-rx: that way, github will render it

[16:58] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/46f8df26e1

[16:58] <dalek> nqp-rx: 1a676dc | moritz++ | README.pod:

[16:58] <dalek> nqp-rx: add deprecation notice to README

[16:58] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/1a676dc55c

[16:58] <raiph> jdv79: planet --> pl6anet.org

[16:59] <PerlJam> raiph: did you ask pmichaud about nqpbook via email?   That's probably the better way to get in touch with him.

[16:59] <rurban> moritz: looks good, thanks

[16:59] <raiph> jdv79: prolly no p6weekly this week but would be at http://p6weekly.wordpress.com

[17:02] <rurban> moritz: I see, yes. parrot's nqp-rx is older. we need to update to get rid of this version

[17:02] *** kaleem left
[17:04] *** virtualsue left
[17:04] <rurban> so please keep it. I started with that Dec 2012 I see.

[17:06] <moritz> rurban: I'm in no hurry to remove old stuff, as long as there's no chance to mix them up

[17:10] <vendethiel-> .oO( the Cool #perl6 - re CL gradual typing )

[17:10] <jdv79> thanks

[17:10] <vendethiel-> (altho most CL implementations have a typing inference algorithm)

[17:23] *** vukcrni left
[17:27] *** itz is now known as itz2

[17:27] *** itz2 is now known as itz

[17:28] *** vukcrni joined
[17:28] *** [Sno] joined
[17:31] *** kjs_ left
[17:37] <[Coke]> (nqp-rx) there was a goal at one point to replace nqp-rx scripts in parrot build with the other language. I would recommend that approach, still

[17:38] <dalek> nqp-rx: 788d2e5 | coke++ | README.pod:

[17:38] <dalek> nqp-rx: fix typo

[17:38] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/788d2e52b7

[17:39] <PerlJam> [Coke]: winxed?  

[17:40] <rurban> [Coke]: => #parrot

[17:42] <[Coke]> rurban: I was just following up the convo that already happened here.

[17:44] <raiph> vendethiel-: Am I right that typed racket is not gradually typed, by either the P6 or wikipedia definitions? "In general, variables in Typed Racket must be annotated with their type."

[17:44] <vendethiel-> raiph: right, it's not, but you can "cross boundaries"

[17:46] <moritz> [Coke]: winxed isn't maintained either :-)

[17:46] *** cognome joined
[17:47] <[Coke]> moritz: no, but I stand by my thought that it's better to rely on one(winxed,nqp-rx) than all()

[17:48] <moritz> [Coke]: or simply acknoledge that moarvm is the better road forward

[17:49] <moritz> but I guess that's an entirely different topic

[17:49] *** SamuraiJack_ joined
[17:50] *** nbrown joined
[17:51] *** cognome left
[17:55] *** nbrown left
[17:55] <dalek> roast: b1b8887 | usev6++ | S (4 files):

[17:55] <dalek> roast: add "use lib '.';" to some more tests that need it

[17:55] <dalek> roast: review: https://github.com/perl6/roast/commit/b1b888798a

[17:56] <raiph> vendethiel-: Aiui "gradual typing" is a P6 strength which we'll want to start talking about a lot in, say, 2016. But unfortunately there's confusion in the noosphere about what "gradual typing" is. Forex, would it be reasonable to challenge typed racket's inclusion on the wikipedia "gradual typing" page or does its ability to "cross boundaries" jus

[17:56] <raiph> tify its inclusion? Should P6 be added to the list?

[17:56] <vendethiel-> I strongly disagree, tbh.

[17:57] <vendethiel-> Every language and its dog is adding gradual typing. guido to python, facebook to php, etc.

[17:57] <raiph> vendethiel-: er, OK. :) To what?

[17:57] <vendethiel-> ?

[17:58] *** kjs_ joined
[17:58] <raiph> vendethiel-: But aren't there huge variations on what exactly "gradual typing" gets you?

[17:59] <vendethiel-> not sure what you mean. The type systems might be very different (handling of structural typing, high-order types, etc), but it still can be gradual

[18:00] <[Coke]> moritz: yes, that's an entirely different topic which has nothing to do with the way to maintain parrot.

[18:00] <raiph> vendethiel-: let's stick to TR for a moment. The doc says if you use it you *have* to annotate most/all of your variables. How is that "gradual"?

[18:01] <vendethiel-> raiph: I *think* you can use lang/racket's functions from typed-racket

[18:01] <vendethiel-> which means you can use untyped ones, etc.

[18:01] <vendethiel-> also, racket has first class contracts

[18:01] <vendethiel-> (which are late ensured)

[18:04] *** cognome joined
[18:07] *** _slade_ left
[18:10] *** PZt joined
[18:13] *** kjs_ left
[18:13] *** SamuraiJack_ left
[18:17] *** kjs_ joined
[18:24] *** molaf_ joined
[18:27] *** molaf left
[18:32] *** kjs_ left
[18:34] <raiph> vendethiel-: "Jeremy invented the gradual typing approach" http://homes.soic.indiana.edu/jsiek/ Really?

[18:35] <vendethiel-> I don't know :o)

[18:39] <nine> I think he uses a slightly different definition

[18:39] <nine> He even mentions Perl 6

[18:40] <vendethiel-> where?

[18:40] <nine> http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/

[18:42] *** raiph left
[18:44] *** darutoko left
[18:44] <vendethiel-> oh, alright

[18:47] *** jmtrespalacios joined
[18:49] <FROGGS> use of uninitialized value %ANON_VAR__2 of type Any in string context  in block  at tools/build/panda-state.p6:7

[18:49] <FROGGS> O.o

[18:49] <rurban> he basically requires a dynamic type for subtyping, for the Any problem

[18:49] <FROGGS> %ANON_VAR__2 seems to be a leaking internal

[18:50] *** jmtrespalacios is now known as JM3

[18:51] <dalek> roast: d48582d | usev6++ | S03-smartmatch/hash-hash.t:

[18:51] <dalek> roast: adaptation to spec changes

[18:51] <dalek> roast: smart matching for hashes no longer compares keys

[18:51] <dalek> roast: (cmp. https://github.com/perl6/specs/commit/b99ecf40b7cd8197086a07ee857c5f1f91fad489)

[18:51] <dalek> roast: 

[18:51] <dalek> roast: This file is currently not in t/spectest.data.

[18:51] <dalek> roast: Since rakudo on parrot/jvm currently can't run the tests, it should only be

[18:51] <dalek> roast: added for moar (if at all). And please have a close look at the new tests

[18:51] <dalek> roast: before adding them to t/spectest.data

[18:51] <dalek> roast: review: https://github.com/perl6/roast/commit/d48582d929

[18:51] *** nbrown joined
[18:56] *** noganex_ left
[18:56] *** nbrown left
[19:00] <dalek> perl6-roast-data: 519bdab | coke++ | / (5 files):

[19:00] <dalek> perl6-roast-data: today (automated commit)

[19:00] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/519bdab481

[19:01] <[Coke]> commit messages shouldn't include todo items

[19:01] <[Coke]> add a comment to the PR or open a ticket. IMO.

[19:02] *** colomon joined
[19:03] <bartolin> okay, I'will do that in the future

[19:04] *** Mso150_u left
[19:04] *** Mso150_u joined
[19:05] *** dwarring joined
[19:06] *** ssutch_ joined
[19:07] *** pecastro joined
[19:08] *** Ven joined
[19:10] *** treehug88 left
[19:25] *** treehug88 joined
[19:38] *** noganex joined
[19:41] <dalek> star: 54b69eb | (Tobias Leich)++ | tools/ (2 files):

[19:41] <dalek> star: add script that creates panda state file

[19:41] <dalek> star: 

[19:41] <dalek> star: So after installing star panda will know what modules are installed.

[19:41] <dalek> star: When someone then will install a module that depends on a shipped module,

[19:41] <dalek> star: the shipped (and known working) dependency will be used by default.

[19:41] <dalek> star: review: https://github.com/rakudo/star/commit/54b69eba81

[19:45] *** Psyche^ joined
[19:49] *** treehug88 left
[19:50] *** Psyche^_ left
[19:52] *** nbrown joined
[19:52] <FROGGS> rakudo-star-2014.09$ install/bin/panda --installed list

[19:52] <FROGGS> Bailador                   [installed] 

[19:52] <FROGGS> DBIish                     [installed] 

[19:52] <FROGGS> ...

[19:52] <FROGGS> I like it :o)

[19:53] <PerlJam> FROGGS++

[19:53] * gtodd wants to learn how to write test that can close a PR 

[19:54] <gtodd> jnth seemingly fixed the issue https://rt.perl.org/Ticket/Display.html?id=122810 

[19:55] *** treehug88 joined
[19:55] <dalek> star: f14ee0f | (Tobias Leich)++ | tools/ (2 files):

[19:55] <dalek> star: update versions to 2014.09

[19:55] <dalek> star: review: https://github.com/rakudo/star/commit/f14ee0fd3c

[19:56] <dalek> star: 25a687b | (Tobias Leich)++ | modules/ (8 files):

[19:56] <dalek> star: update submodule revisions

[19:56] <dalek> star: review: https://github.com/rakudo/star/commit/25a687b006

[19:56] * grondilu deeply rewrote https://github.com/grondilu/clifford with a Class structure that hopefully makes more sense.

[19:56] <moritz> gtodd: the first step would be to build an older rakudo, where the problem is still there

[19:56] *** nbrown left
[19:57] <gtodd> but now I'm not sure what the bug is or the test should be :-)  should it test for bag() and mix() operators being able to handle massive numbers of slurped in args ...?

[19:57] <moritz> gtodd: and then reproduce the problem

[19:57] <vendethiel-> https://github.com/grondilu/clifford/commit/55ada29934978f60b7f369eef02b3b95565499f0#diff-ec673b1911692c89fe9c2a53e53fded1R20 could use ==>

[19:57] <moritz> gtodd: and once you have it reproduced, you can start to remove things, until you know where the problem was actually triggered

[19:59] <gtodd> moritz: I'm halfway there :-)  I seem only able to reproduce with large files ... but since there's a bag and slurp involved I guess I could create a giant array and stuff it in a bag with the old flattening behaviour and see it that breaks I a similar way

[20:01] <moritz> gtodd: aye; creating a giant array is usually an easy  my @a = 'abc' xx 20000;  # or so

[20:01] <colomon> moritz: just ran a manual full smoke test, and host08 was correctly updated.

[20:01] <colomon> moritz:  ‚Ä¶ though it looks like Nonongram failed this time around?

[20:01] *** tinyblak joined
[20:02] <gtodd> moritz:  ok good the file seemed to provoke things ( when Bag flattening occurred ) at given size ... cheers

[20:02] *** colomon left
[20:03] <gtodd> yippee I can try my mad git skillz 

[20:04] <moritz> msg colomon Nonogram fails too for me: "Heap corruption detected: pointer 0x7fc9fa2067f0 to past fromspace" (with JIT)

[20:05] <vendethiel-> msg moritz noted :p

[20:05] <moritz> argl, I'm too old to remember the various message bots we had over time, and which one is the current

[20:06] *** virtualsue joined
[20:07] <FROGGS> .tell something

[20:07] <yoleaux> FROGGS: I don't know what you want me to say to something.

[20:07] <nwc10> .tell ilmari lunch

[20:07] <yoleaux> nwc10: I'll pass your message to ilmari.

[20:09] <moritz> .tell colomon the Nonogram failure you see seems to be a genuine MoarVM spesh+inlining bug

[20:09] <yoleaux> moritz: I'll pass your message to colomon.

[20:10] *** xragnar is now known as Guest99853

[20:10] *** xragnar_ joined
[20:10] *** Guest99853 left
[20:10] *** xragnar_ is now known as xragnar

[20:11] *** brrt joined
[20:12] *** mberends joined
[20:13] *** gfldex joined
[20:14] <FROGGS> damn, Template-Mojo and 'doc' fails on perl6-p star additionally to json-rp :/

[20:18] *** daxim__ left
[20:22] <gtodd> in  RT# 122810  the error comes from .say for (bag slurp.words).pairs.sort(*.value).reverse[^10]

[20:23] <gtodd> reading from a file .... not sure how to make a funny Array  to mimic that ... 

[20:24] <FROGGS> p: my &foo = EVAL 'sub foo($a) { }'; &foo()

[20:24] <camelia> rakudo-parrot 7469aa: OUTPUT¬´Not enough positional parameters passed; got 0 but expected 1‚ê§  in sub foo at EVAL_0:1‚ê§  in block <unit> at /tmp/PrnTlSB43c:1‚ê§‚ê§¬ª

[20:24] <FROGGS> since when do we pass parameters?

[20:25] <moritz> gtodd: maybe use ('aaa' ... 'zzz') or something similar?

[20:25] *** Mso150_u left
[20:25] <lizmat> m: say :foo".IO.WHAT

[20:25] <camelia> rakudo-moar 7469aa: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/pQFq3uYNIp‚ê§Two terms in a row‚ê§at /tmp/pQFq3uYNIp:1‚ê§------> [32msay :foo[33m‚èè[31m".IO.WHAT[0m‚ê§    expecting any of:‚ê§        pair value‚ê§        postfix‚ê§        infix stopper‚ê§    ‚Ä¶¬ª

[20:25] <lizmat> m: say "foo".IO.WHAT

[20:25] <camelia> rakudo-moar 7469aa: OUTPUT¬´(IO::Path)‚ê§¬ª

[20:26] <lizmat> m: say "foo".IO.open.WHAT

[20:26] <camelia> rakudo-moar 7469aa: OUTPUT¬´Failed to open file: no such file or directory‚ê§  in method open at src/gen/m-CORE.setting:14786‚ê§  in method open at src/gen/m-CORE.setting:15335‚ê§  in block <unit> at /tmp/Gpx07Zu7Bi:1‚ê§‚ê§¬ª

[20:26] <gtodd> moritz: I did  my @a3 = 'abc' xx 100000, 'def' xx 50000;  etc etc but it won't fail :-)

[20:26] <moritz> gtodd: maybe not enough different entries

[20:31] <moritz> gtodd: also, when you leave out the for loop, does it still fail?

[20:31] <gtodd> hmm yes

[20:32] <moritz> gtodd: also if you remove the .reverse?

[20:34] <moritz> and so on

[20:34] <gtodd> yeah :-)

[20:34] <gtodd> I'm pretty sure it was the number of args that caused it to fall over

[20:34] <FROGGS> damn, modules/doc fails exactly like modules/json-rpc :o(

[20:34] <moritz> but number of args of what routine?

[20:34] <gtodd> it seemd to be a moar only thing 

[20:35] <gtodd> the bag bit

[20:35] <moritz> FROGGS: on the upside, you have a commit bit for doc :-)

[20:35] <gtodd> at least jnthn's fix to bag and mix straightened it out ...but then ... why did parrot and jvm not fail hmm

[20:36] <moritz> gtodd: so just   bag slurp.words   on its own fails?

[20:36] <gtodd> oh well this is just a learning process for me at this point ...

[20:36] <FROGGS> moritz: it is something in the innards of rakudo/nqp/parrot

[20:36] <gtodd> yes with a large enough file

[20:36] <moritz> m: say ('a'...*)[^1000].elems

[20:36] <camelia> rakudo-moar 7469aa: OUTPUT¬´1000‚ê§¬ª

[20:37] <FROGGS> tadzik: if you please :o)  https://github.com/tadzik/Template-Mojo/pull/10

[20:37] <moritz> gtodd: ^^ that's a recipe for getting an arbitrarily-sized list of distinct values. Maybe that helps.

[20:37] <gtodd> thanks

[20:38] <vendethiel-> wow, SBCL (steel bank's common lisp) is *really* fast.

[20:38] <vendethiel-> same order of magnitude as C++

[20:39] <gtodd> vendethiel-: :-)  

[20:39] *** kurahaupo1 joined
[20:40] <moritz> vendethiel-: iirc fglock once wrote a CL backend for kp6, the precursor to perlito

[20:40] <vendethiel-> oh, did he?

[20:41] <moritz> vendethiel-: though kp6-emitted code was slow due to design issues

[20:41] <vendethiel-> well, I don't think rakudo-js will be very fast either :-)

[20:41] *** asdfg joined
[20:45] *** rurban left
[20:48] *** mberends left
[20:53] *** nbrown joined
[20:53] <dalek> rakudo/nom: 9a57a36 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[20:53] <dalek> rakudo/nom: bump nqp rev for C global support on parrot/jvm

[20:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a57a36bfe

[20:54] <lizmat> hmm... seems that a XCode upgrade gave me a new clang:  Apple LLVM version 6.0 (clang-600.0.51) (based on LLVM 3.5svn)

[20:55] <dalek> rakudo/nom: 85c4c02 | (Elizabeth Mattijsen)++ | src/core/IO/Spec.pm:

[20:55] <dalek> rakudo/nom: Temporary unlazy introduction of $*SPEC

[20:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/85c4c02d1c

[20:55] *** kjs_ joined
[20:56] <lizmat> alas, apparently still no asan support: clang: error: unsupported argument 'address' to option 'fsanitize='

[20:57] *** nbrown left
[20:59] * brrt afk

[20:59] *** brrt left
[21:00] *** asdfg left
[21:02] <timotimo> er, wasn't asan developed by the clang people in the first place?

[21:02] <vendethiel-> yea;

[21:02] <lizmat> yup, but apparently it's not available on OS X like that

[21:02] <timotimo> huh.

[21:02] <timotimo> maybe it needs the -dev package to use that?

[21:03] *** kaare_ left
[21:03] <timotimo> i mean, a package that has "the asan stuff"

[21:03] <timotimo> maybe the version is too old?

[21:05] <timotimo> an osx-savvy friend suggests using homebrew to build the latest clang version

[21:06] <timotimo> or your xcode is too old, as that apparently doesn't get updated with the OS itself

[21:08] <lizmat> I just updated to 6.0.1

[21:09] <timotimo> before trying that command with -fsanitize=address?

[21:12] *** JM3 left
[21:14] <lizmat> stackoverflow has several 1-2 year old recipes...

[21:14] <timotimo> :\

[21:14] <lizmat> they all feel all too dangerous to my normal work environment

[21:15] <timotimo> >_<

[21:15] <dalek> roast: 0da8543 | usev6++ | S03-sequence/nonnumeric.t:

[21:15] <dalek> roast: replace two fudged bogus tests with working tests

[21:15] <dalek> roast: review: https://github.com/perl6/roast/commit/0da85436f9

[21:16] *** Ven left
[21:16] <lizmat> since jnthn feels it was just a heisenbug, I don't feel like risking not being able to work for a significant amount of time

[21:17] *** JM3 joined
[21:22] *** flussence left
[21:22] *** flussence joined
[21:26] *** BenGoldberg joined
[21:26] <tadzik> FROGGS: I feel pleased :D

[21:27] *** DarthGandalf left
[21:30] *** DarthGandalf joined
[21:32] *** _slade_ joined
[21:34] *** telex left
[21:36] *** gfldex left
[21:36] *** telex joined
[21:38] *** bartolin left
[21:43] *** kurahaupo1 left
[21:51] <lizmat> argh: Stage mbc        : At Frame 5526, Instruction 75, op 'decont', operand 1, MAST::Local of wrong type (7) specified; expected 8

[21:51] *** BenGoldberg left
[21:51] *** BenGoldberg joined
[21:53] *** ssutch_ left
[21:53] *** nbrown joined
[21:55] <cognome> lizmat++, I am trying to keep pace with your changes. In S32/IO.pod, should not the @text be slurpy?

[21:57] <dalek> specs: 2dcaf6d | (Elizabeth Mattijsen)++ | S32-setting-library/IO.pod:

[21:57] <dalek> specs: @text should be slurpy, cognome++

[21:57] <dalek> specs: review: https://github.com/perl6/specs/commit/2dcaf6d633

[21:58] *** nbrown left
[22:04] <lizmat> m: sub a { say %_.perl }; my %h = a => 42; a( |%h, :a<foo> )   # expecting a => 'foo', is that a wrong thought ?

[22:04] <camelia> rakudo-moar 85c4c0: OUTPUT¬´("a" => 42).hash‚ê§¬ª

[22:08] <lizmat> m: sub a { say %_.perl }; a( :a<foo>, :a<bar> )  # here the later overwrites the earlier

[22:08] <camelia> rakudo-moar 85c4c0: OUTPUT¬´("a" => "bar").hash‚ê§¬ª

[22:11] <lizmat> feels like a rakudobug?

[22:11] <lizmat> std: sub a { say %_.perl }; a( :a<foo>, :a<bar> )

[22:11] <camelia> std fc92e1e: OUTPUT¬´ok 00:01 146m‚ê§¬ª

[22:11] <lizmat> p: sub a { say %_.perl }; a( :a<foo>, :a<bar> )

[22:11] <camelia> rakudo-parrot 85c4c0: OUTPUT¬´("a" => "bar").hash‚ê§¬ª

[22:11] <lizmat> p: sub a { say %_.perl }; my %h = a => 42; a( |%h, :a<foo> ) 

[22:11] <camelia> rakudo-parrot 85c4c0: OUTPUT¬´duplicate named argument in call‚ê§  in block <unit> at /tmp/033oQCXowt:1‚ê§‚ê§¬ª

[22:12] * lizmat is tired

[22:12] <lizmat> and sleeps on it&

[22:12] *** cosimo left
[22:13] *** cosimo joined
[22:17] *** treehug88 left
[22:19] *** kjs_ left
[22:20] *** kurahaupo1 joined
[22:26] *** virtualsue left
[22:28] *** ajr_ left
[22:30] *** rurban joined
[22:34] *** cognome left
[22:34] *** cognome joined
[22:39] *** cognome left
[22:51] <firefish5000> Though not P6 related, everyone may wish to update their bash implementation(lookup bash ShellShock). I'm currently writing bash grammar, so.. you know.

[22:54] *** nbrown joined
[22:59] *** nbrown left
[22:59] *** Ben_Goldberg joined
[23:01] * geekosaur only too aware...

[23:02] *** BenGoldberg left
[23:05] *** ivanshmakov left
[23:08] *** Ben_Goldberg is now known as BenGoldberg

[23:10] *** nbrown joined
[23:14] *** ivanshmakov joined
[23:18] *** nbrown left
[23:21] *** ifim joined
[23:24] *** rurban left
[23:30] *** kurahaupo1 left
