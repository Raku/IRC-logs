[00:00] *** lizmat joined
[00:01] *** lizmat_ joined
[00:01] *** lizmat left
[00:02] *** Hor|zon left
[00:05] * azawawi sleep &

[00:05] *** azawawi left
[00:08] *** xenoterracide left
[00:12] *** fhelmberger joined
[00:12] *** ajr_ left
[00:16] *** fhelmberger left
[00:22] *** treehug88 left
[00:27] *** xenoterracide joined
[00:33] *** xenoterracide left
[00:43] *** xenoterracide joined
[01:01] *** lizmat joined
[01:01] *** lizmat_ left
[01:06] *** tinyblak joined
[01:15] *** Mso150 joined
[01:17] *** yeahnoob joined
[01:24] *** xenoterracide left
[01:25] *** lichtkind left
[01:27] *** Mso150 left
[01:28] *** Mso150 joined
[01:32] *** chipotle joined
[01:34] *** hagiri left
[01:36] *** xenoterracide joined
[01:41] *** Sqirrel left
[01:41] *** Sqirrel joined
[01:49] *** tinyblak_ joined
[01:49] *** Mso150 left
[01:51] *** colomon left
[01:52] *** colomon joined
[01:53] *** tinyblak left
[01:58] *** tinyblak_ left
[01:58] *** Hor|zon joined
[02:00] *** tinyblak joined
[02:03] *** Hor|zon left
[02:04] *** xenoterracide left
[02:10] *** xenoterracide joined
[02:35] *** JimmyZ joined
[02:45] *** JimmyZ left
[02:53] *** noganex_ joined
[02:57] *** noganex left
[03:07] *** molaf joined
[03:18] *** chenryn joined
[03:23] *** kurahaupo_ joined
[03:25] *** tinyblak left
[03:30] *** dwarring joined
[03:31] *** dj_goku left
[03:31] *** esaym153 left
[03:33] *** esaym153 joined
[03:35] *** dj_goku joined
[03:35] *** dj_goku left
[03:35] *** dj_goku joined
[03:48] *** BenGoldberg left
[03:49] *** [Sno] left
[03:50] *** [Sno] joined
[03:59] *** Hor|zon joined
[03:59] *** chipotle left
[04:04] *** Hor|zon left
[04:04] <dwarring> r: say (567700/1048575 * 32 ** 40).base(32)

[04:04] <camelia> rakudo-{parrot,moar} d3a284: OUTPUT«HACKHACKHACKHACKHACKHACKHACKHACKHACKHACK.HACKHA␤»

[04:08] <grondilu> cute

[04:10] <dwarring> got the idea from here http://www.reddit.com/r/math/comments/13nye1/make_it_stop_make_it_stop_make_it_stop/

[04:11] *** molaf left
[04:12] *** fhelmberger joined
[04:15] <grondilu> can you write the inverse function?

[04:16] <dwarring> r: say (2264129042459209/3656158440062975*36**50).base(36)

[04:16] <camelia> rakudo-{parrot,moar} d3a284: OUTPUT«MAKEITSTOPMAKEITSTOPMAKEITSTOPMAKEITSTOPMAKEITSTOP.MAKEITSTOPM␤»

[04:16] <grondilu> I meant:  string -> number

[04:17] *** fhelmberger left
[04:17] <grondilu> or sub (Str --> Rat) {...}  in proper P6

[04:18] <dwarring> invese in scala and python http://www.reddit.com/r/math/comments/13nye1/make_it_stop_make_it_stop_make_it_stop/c75qpd7

[04:25] <dwarring> inverse in perl6 https://gist.github.com/dwarring/73687cc3c23f067f58da

[04:31] *** tinyblak joined
[04:32] *** tinyblak left
[04:44] *** Alina-malina joined
[04:45] *** ggoebel1111115 joined
[04:47] *** ggoebel1111114 left
[04:48] *** chenryn left
[04:48] *** kaare_ joined
[04:50] *** ezra1 joined
[04:52] *** erkan joined
[04:52] *** erkan left
[04:52] *** erkan joined
[04:54] *** immortal left
[05:01] *** xenoterracide left
[05:02] *** chenryn joined
[05:04] *** ezra1 left
[05:24] *** ezra1 joined
[05:34] *** kyun joined
[05:38] *** yeahnoob left
[05:41] *** _slade_ left
[05:41] *** _slade_ joined
[05:45] *** ezra1 left
[05:48] *** kaleem joined
[05:54] *** kurahaupo_ left
[06:00] *** Hor|zon joined
[06:05] *** Hor|zon left
[06:11] *** krunen joined
[06:12] *** ifim left
[06:13] *** SamuraiJack joined
[06:16] <timotimo> o/

[06:17] *** gfldex joined
[06:21] *** leont joined
[06:23] *** leont left
[06:23] *** leont_ joined
[06:24] *** anaeem1_ joined
[06:26] *** gfldex left
[06:26] <leont_> Morning *

[06:26] <timotimo> oh hey leont_ 

[06:27] <timotimo> are we going to enjoy breakfast together?

[06:29] *** isacloud______ is now known as isacloud

[06:30] *** darutoko joined
[06:30] *** Ven joined
[06:30] <timotimo> ven and i are ready to go do breakfast right now

[06:33] <leont_> I'm showering first

[06:33] <timotimo> ah ok

[06:34] <timotimo> we'll wait for you

[06:34] *** ghostlines joined
[06:34] *** ghostlines left
[06:34] *** lizmat left
[06:36] <kyun> There is any editor for write perl6?

[06:36] <xiaomiao> kyun: you don't need a special editor for it

[06:37] <kyun> I mean a perl6-mode in emacs

[06:40] <xiaomiao> I have no idea, but that's a very different question

[06:41] <kyun> XD

[06:41] <timotimo> well, vim has perl6 syntax highlighting which also sets things like the "identifier regex" or whatever that's called

[06:45] <kyun> Hey, I just need syntax highlighting XD

[06:46] *** anaeem1_ left
[06:48] <Ven> kyun: vim is good to go :)

[06:49] <kyun> I use emacs with evil-mode Xd

[06:49] <kyun> XD

[06:49] <timotimo> leont_: just tell us when you're going and we'll make it happen

[06:50] *** rindolf joined
[06:50] *** anaeem1_ joined
[06:51] *** pepl joined
[06:52] *** lizmat joined
[06:53] <masak> hello hello #perl6

[06:53] <masak> ...from...

[06:53] <masak> ...A TRAIN \o/

[06:53] <timotimo> HOW IS IT POSSIBLE

[06:53] <timotimo> could it be a train towards austria?

[06:53] *** mauke joined
[06:53] * lizmat commutes to venue&

[06:54] * mauke waves to japhb 

[06:54] *** lizmat left
[06:54] <masak> in a loose sense, yes. but no :/

[06:54] <masak> I vowed to be present spiritually for the APW and the hackathon -- mostly by hanging around here on IRC and keeping close tabs.

[06:54] *** b2gills left
[06:55] <masak> but then, predictably, my weekend gets booked up by well-meaning forces.

[06:55] <masak> I will still do my best to keep up, though.

[06:55] <timotimo> OK

[06:55] <Ven> not nice, teasing us like that

[06:55] <Ven> :P

[06:56] <timotimo> would have been a pretty amazing surprise, but a masak in spirit is nice, too

[06:56] <masak> a pickled masak is nice, too.

[06:56] <timotimo> mhm mhm

[06:56] <Ven> .o( please remove your spiritual hands off of my beer )

[06:56] <masak> anyway, let me start here: https://gist.github.com/masak/ba8196437d1e48809758

[06:56] <masak> please peruse said gist

[06:56] <masak> it's my take on "how production ready is perl 6?"

[06:57] <masak> modeled after http://html5please.com/ -- I really like that page for its simplicity-yet-detail

[06:57] <Ven> .o( there is web support, but where is air support? )

[06:57] *** bartolin joined
[06:57] <masak> what's missing from my gist is some future milestones, marked by XXX

[06:58] <masak> also, there needs to be a rigorous explanation of what each thing *is*

[06:58] <japhb> mauke: Sorry, was backlogging.  :-)

[06:58] <masak> for example, people who I've shown it to aren't 100% clear on what the difference is between "Learning materials" and "Onramps"

[06:58] <leont_> timotimo: down in 5

[06:58] <timotimo> aha!

[06:59] <masak> the difference is clear-ish to me, but it needs to be explained

[06:59] <masak> and so do all of them, really, to give some context

[06:59] <dalek> roast: eeb03d5 | usev6++ | S32-array/delete.t:

[06:59] <dalek> roast: Refine test for RT #116695

[06:59] <dalek> roast: review: https://github.com/perl6/roast/commit/eeb03d5621

[06:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=116695

[07:00] <masak> by the way, for the milestones, what I'm looking for is a kind of "observable" that is either objectively true/false, or so nearly so that it's not the subject of intense debate.

[07:01] *** Ven left
[07:02] <masak> oh, and I hope it doesn't need saying, but: I don't purport to be "official" or "single source of truth" in any way. I just happen to think we need this kind of framework to orient ourselves in the direction of production-readiness.

[07:02] <japhb> masak: I like the format, and generally agree with what you've got so far.

[07:02] <masak> other people are welcome to evolve other frameworks -- or help with this one.

[07:02] <masak> japhb: cool! patches welcome.

[07:03] * japhb is still attempting to fully activate his brain -- patches might be a tad delayed.  :-)

[07:03] *** xenowoolfy joined
[07:04] <masak> in fact, maybe I should transfer what I have to a github repository instead.

[07:06] <masak> done -- https://github.com/masak/perl6-production-readiness

[07:06] <masak> redirecting gist.

[07:06] <japhb> Not a bad idea, though a gist already *is* a repo.  Just doesn't look like one.  :-)

[07:06] *** leont_ left
[07:08] <masak> japhb: oh, I know. I used that when I moved it.

[07:09] <masak> japhb: but this way, I can accept PRs and/or add collaborators.

[07:10] *** b2gills joined
[07:11] *** zakharyas joined
[07:12] <dalek> specs: 8702be6 | (Helmut Wollmersdorfer)++ | S15-unicode.pod:

[07:12] <dalek> specs: graphemes confirm to Unicode Grapheme Cluser Boundaries extended

[07:12] <dalek> specs: review: https://github.com/perl6/specs/commit/8702be6188

[07:12] <dalek> specs: 625f5d5 | (Helmut Wollmersdorfer)++ | / (13 files):

[07:12] <dalek> specs: Merge branch 'master' of github.com:perl6/specs

[07:12] <dalek> specs: review: https://github.com/perl6/specs/commit/625f5d5f71

[07:12] <japhb> masak: Fair enough.

[07:13] <masak> I will keep making improvements during the day, hopefully.

[07:13] <japhb> I wonder if there's a way to actually get an alert on my mac when I get highlighted in my ssh'ed irssi session ...

[07:14] *** Mouq joined
[07:14] <moritz> masak: there seems to be no mention of some kind of reference documentation a la doc.perl6.org

[07:15] <masak> moritz: I think I mentally included that under "Onramps" -- i.e. people who learn on their own with the materials available off the web and on IRC.

[07:16] <masak> moritz: adding it to the description of "Onramps" for now.

[07:17] <masak> moritz: if you have a suggestion for a better name for this than "onramps", I'm listening :)

[07:18] *** xenowoolfy left
[07:20] <moritz> "Learning facilities"? "Ways to get started"?

[07:20] * moritz isn't good with naming

[07:20] *** azawawi joined
[07:21] *** b2gills left
[07:21] <azawawi> .tell PerlJam finally found an example @ https://github.com/perl6/roast/blob/master/S17-procasync/print.t . Thanks :)

[07:21] <yoleaux> azawawi: I'll pass your message to PerlJam.

[07:24] *** anaeem1_ left
[07:26] <dalek> specs: 05b6dfd | Mouq++ | S15-unicode.pod:

[07:26] <dalek> specs: Fix email links; bump version; ensure valid Pod6

[07:26] <dalek> specs: review: https://github.com/perl6/specs/commit/05b6dfddc7

[07:26] * azawawi downloads all of jnthn++ YouTube talks for later viewing

[07:27] <Mouq> (Not that the email links actually work, since I still haven't figured out making formatting codes work in tables.. it hurts my head)

[07:28] *** kaleem left
[07:31] <masak> moritz: I renamed "Learning materials" to "A Perl 6 Book", and "Onramps" to "Ways to get started". moritz++

[07:33] *** rurban joined
[07:33] <masak> moritz: oh, and ooc, would you say that doc.perl6.org is "ready", or if not, why not? can the readiness be stated in the type of observable I'm after?

[07:33] <Mouq> masak: Does better Buf/Blob support fall under Unicode?

[07:33] <Mouq> I don't think doc.perl6.org is ready

[07:34] <Mouq> It's very incomplete, and much of the parts that are fleshed out are outdated

[07:35] *** b2gills joined
[07:35] <Mouq> It's also a tad disorganized yet, in terms of tutorials etc.

[07:35] <Mouq> Where it has them

[07:36] <moritz> I know that doc.perl6.org isn't ready

[07:36] <moritz> but IMHO it's essential to have and improve

[07:37] *** brrt joined
[07:37] <BSc_tadzik> agreed

[07:38] <BSc_tadzik> do we have anything that's *ready*? :)

[07:38] *** [Tux] left
[07:38] <masak> yes, we do.

[07:38] <masak> that was one of the surprises of formulating that resource.

[07:38] <masak> on https://github.com/masak/perl6-production-readiness/blob/master/README.md -- the first three things are READY

[07:39] <masak> and I stand by that.

[07:39] <BSc_tadzik> ohh, I messed that document

[07:39] <BSc_tadzik> I was thinking in terms of docs,vm,compiler,ecosystem etc

[07:39] <masak> we have production-quality general features, grammars and parsin, and object orientation.

[07:39] *** [Sno] left
[07:39] <masak> BSc_tadzik: right.

[07:39] <BSc_tadzik> that we can both agree on :)

[07:39] <brrt> tadzik has a BSc now?

[07:39] <BSc_tadzik> brrt: aye :)

[07:39] <brrt> very BSc_tadzik++

[07:39] <masak> BSc_tadzik: that's just because we're looking *forward* most of the time, which is sensible.

[07:40] <BSc_tadzik> masak: naturally

[07:40] <BSc_tadzik> brrt: thank you :)

[07:40] <masak> so BSc_tadzik++

[07:40] <BSc_tadzik> masak++ for the document

[07:40] *** lizmat joined
[07:40] <brrt> yeah, agreed

[07:40] <brrt> inode.at :-)

[07:40] * masak ponders whether to reify "VM" or "compiler" or "ecosystem" into headings of their own

[07:40] *** [Tux] joined
[07:41] *** anaeem1 joined
[07:42] *** anaeem1 left
[07:43] <Mouq> m: sub postfix:<rocks> { say "hell yeah!" }; Perl rocks

[07:43] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/OCfu2Pz7Wk␤Two terms in a row␤at /tmp/OCfu2Pz7Wk:1␤------> tfix:<rocks> { say "hell yeah!" }; Perl ⏏rocks␤    expecting any of:␤        postfix␤        infix stopper…»

[07:43] <Mouq> m: sub postfix:<rocks> { say "hell yeah!" }; Perl\ rocks

[07:43] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/tpGVPpPsr7␤Calling 'postfix:<rocks>' will never work with argument types (Perl)␤    Expected: :()␤at /tmp/tpGVPpPsr7:1␤------> fix:<rocks> { say "hell yeah!" }; Perl\ ⏏rocks…»

[07:43] <Mouq> Aww

[07:43] <Mouq> m: sub postfix:<rocks> ($_) { say "hell yeah!" }; Perl\ rocks

[07:43] <camelia> rakudo-moar d3a284: OUTPUT«hell yeah!␤»

[07:43] <Mouq> \o/

[07:43] <masak> japhb, moritz, BSc_tadzik, Mouq: I just added you as contributors to the prod-ready document. no strings attached.

[07:43] <masak> anyone who so much as breathes in the direction of the document will get a commitbit.

[07:44] <Mouq> masak++ btw

[07:44] *** Mso150 joined
[07:45] <japhb> .oO( "I swear if you so much as LOOK at me funny, I WILL COMMIT(BIT) YOU!" )

[07:45] <moritz> the good old pugs policy of commit bits (which I try to apply to the perl6 github organization too)

[07:46] <masak> that's the one.

[07:46] <xiaomiao> I've used a similar strategy in the past, it seems to work well

[07:47] <masak> brrt: what's your github user name?

[07:47] *** rurban1 joined
[07:47] *** anaeem1_ joined
[07:47] <brrt> masak: bdw

[07:47] <BSc_tadzik> I still have mixed feelings after a non-reviewed commit broke panda bootstrap at some point

[07:48] <brrt> brrt was taken iirc

[07:48] <masak> brrt: I bit you too. :)

[07:48] <japhb> masak: Ecosystem should definitely be part of prod-ready, but in addition we may want certain groups of modules we would expect in the ecosystem: protocols, data formats, bindings, and so forth

[07:48] <brrt> :-)

[07:48] <Mouq> m: say Bool.HOW; say EVAL Bool.HOW # :(

[07:48] <camelia> rakudo-moar d3a284: OUTPUT«Perl6::Metamodel::ClassHOW.new()␤Cannot call 'EVAL'; none of these signatures match:␤:(Cool $code, Any :lang($lang) = { ... }, PseudoStash :context($context))␤  in block <unit> at /tmp/4HmdvvAS8U:1␤␤»

[07:48] <Mouq> m: say Bool.HOW; say EVAL ~Bool.HOW # :(

[07:48] <camelia> rakudo-moar d3a284: OUTPUT«Perl6::Metamodel::ClassHOW.new()␤Could not find symbol '&ClassHOW'␤  in method <anon> at src/gen/m-CORE.setting:13678␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2662␤  in any find_method at src/gen/m-Metamodel.nqp:972␤  in block <un…»

[07:48] <masak> japhb: the latter one sounds *much* more amenable to having an observable than the former one.

[07:49] <masak> japhb: unless the former one means something like "Toolchain (for distributing modules)" or whatever

[07:49] <japhb> masak: Well, there's ecosystem *infrastructure*, and then there's things *in* the ecosystem

[07:49] <japhb> yeah, that

[07:49] <masak> right.

[07:49] <Mouq> We report Perl6::Metamodel::ClassHOW, but can only get at it as Metamodel::ClassHOW. Is the former name the 'correct' one?

[07:50] <masak> japhb: on reflection I think I'd much rather see individual sections for "Protocols", "Data formats", etc, than just "Ecosystem"

[07:50] <masak> japhb: there are almost countably infinite demands could be put on the ecosystem.

[07:51] <japhb> Mouq: ISTR the Perl6:: namespace had special handling, and that jnthn wasn't 100% happy with the current difference between implementation and self-reported name, but I don't recall how he wanted to resolve that.

[07:51] *** rurban left
[07:51] <japhb> masak: That's what I was trying to mean.  Brain fuzzy.

[07:51] <japhb> If the cafe was open, I'd self medicate with caffeine.  :-)

[07:51] <masak> "Toolchain" is a bit tricky. I can't really tell if what we have today (panda + stuff) counts as "ready for production". maybe our resident BSc has an opinion on that. :)

[07:52] <BSc_tadzik> I wouldn't say it is :)

[07:52] <masak> I mean, I still see a future where Perl 6 is more officially integrated into CPAN.

[07:52] <timotimo> at le venue, with le internets

[07:52] <BSc_tadzik> at best it's in the maturing state, as immature :P

[07:52] <timotimo> yays

[07:52] <Mouq> japhb: :/ kk, thanks. I was trying to determine which types the docs are missing even typegraphs of and was confused by that

[07:52] <japhb> No, it's not.  Improving at least, because FROGGS et al., but last I checked that stuff wasn't merged.

[07:53] *** Ven joined
[07:53] *** Mso150 left
[07:54] <masak> timotimo: congratulations! you just got write access to https://github.com/masak/perl6-production-readiness/ ! :)

[07:54] <japhb> heh

[07:54] *** Mso150 joined
[07:54] * masak .oO( EXCEPT IN NEBRASKA! )

[07:54] <Ven> congrats

[07:54] * Ven waves the "production ready" flag

[07:55] <Ven> we need a lot of those XXX.

[07:55] *** anaeem1_ left
[07:55] <timotimo> :)

[07:55] <timotimo> maybe we should register "perl6.xxx"?

[07:55] <japhb> masak: The problem with giving states enough power that some can be forward thinking is that, well ... others aren't.  :-P

[07:55] <FROGGS> >>> Is somebody lost and can't find the way to the venue? <<<

[07:55] <timotimo> i wonder how much that costs. probably half a fortune :\

[07:56] <timotimo> FROGGS: where do you sit?

[07:56] <BSc_tadzik> timotimo: I thought perl6 will be xs free :)

[07:56] <japhb> timotimo: perl6.xxx can just be a gif of a butterfly emerging from its chrysalis.  :-)

[07:56] <FROGGS> timotimo: at the OMV gas station

[07:57] <japhb> FROGGS: Do you see the sign on the sidewalk pointing towards the venue?

[07:57] <BSc_tadzik> or just cool code examples, like in those subreddits: /r/natureporn, /r/scienceporn... there's even /r/humanporn, all SFW

[07:57] <japhb> (Or do you already know how to get here and are directing people?)

[07:58] <timotimo> probably the latter

[07:58] <Mouq> "why not both?"

[07:58] <FROGGS> japhb: yes, because *I* know where the venue is :o)

[07:58] <japhb> Ah, OK, good

[07:59] <Ven> where are you seated, japhb :)?

[07:59] *** anaeem1 joined
[07:59] <FROGGS> is jnthn already in da house?

[07:59] <japhb> Third row, dead center.  :-)

[07:59] <Ven> don't think so

[08:00] <Ven> FROGGS: did you guys catch larry?

[08:00] *** azawawi left
[08:00] <japhb> Larry is second chair in from the left in my row.

[08:01] <timotimo> japhb: are you counting rows from the front or back? :)

[08:01] *** Hor|zon joined
[08:01] <japhb> timotimo: The third row is the same either way.  ;-)

[08:01] <timotimo> o/

[08:02] <FROGGS> okay, I do not spot anybody that looks lost... I'm coming in now too

[08:03] <lizmat> Ven: japhb is sitting behind timotimo 

[08:03] <dalek> specs: e940cd6 | (Helmut Wollmersdorfer)++ | S15-unicode.pod:

[08:03] <dalek> specs: added reference to Unicode standard

[08:03] <dalek> specs: review: https://github.com/perl6/specs/commit/e940cd68c9

[08:03] <dalek> specs: 58611c3 | (Helmut Wollmersdorfer)++ | S15-unicode.pod:

[08:03] <dalek> specs: Merge branch 'master' of github.com:perl6/specs

[08:03] <dalek> specs: review: https://github.com/perl6/specs/commit/58611c3808

[08:03] <dalek> specs: 7a8127b | (Helmut Wollmersdorfer)++ | S15-unicode.pod:

[08:03] <dalek> specs: added reference to Unicode document

[08:03] <dalek> specs: review: https://github.com/perl6/specs/commit/7a8127bc83

[08:03] <Ven> lizmat: I know. he's behing me as well :)

[08:03] <lizmat> okokok

[08:03] <lizmat> :-)

[08:03] <Ven> behind*.

[08:03] *** virtualsue joined
[08:03] <pmichaud> TimToady:  RE: GLR   I find your ideas intriguing and I would like to subscribe to your newsletter.

[08:03] <japhb> Instead of spacial coordinates, clearly we need to represent this room using a relative location graph.

[08:03] <japhb> *spatial

[08:04] <japhb> pmichaud: :-D

[08:05] <brrt> in a way these are equivalent of course

[08:05] * japhb imagines constraints on the seating graph: if $speaker === TheDamian { @rows.avoid(1) }

[08:06] *** Hor|zon left
[08:09] <Ven> it's staaarting

[08:10] *** ghostlines joined
[08:13] * [Tux] wishes every visitor of the Austrian Perl Workshop a fantastic time!

[08:14] *** anaeem1 left
[08:15] *** chenryn left
[08:15] *** leont_ joined
[08:16] <[Tux]> Method catpath (from IO::Spec) called at:

[08:16] <[Tux]>   /pro/3gl/CPAN/rakudobrew/moar-HEAD/panda/lib/Panda/Fetcher.pm, lines 48,50,52

[08:16] <[Tux]> Please use $*SPEC.catpath instead.

[08:16] <[Tux]> --------------------------------------------------------------------------------

[08:16] <[Tux]> Please contact the author to have these calls to deprecated code adapted,

[08:16] <FROGGS> [Tux]: yes, we are waiting for after the next compiler release to change it

[08:16] <[Tux]> and a few more in rakudobrew build moar

[08:17] <lizmat> otherwise we will break panda for the people who are not in blead

[08:17] *** chenryn joined
[08:17] <[Tux]> ok, just passing the message I seem to be requested :P

[08:17] <lizmat> [Tux]++ :-)

[08:18] * [Tux] would have loved to be there too, but $work :(

[08:18] <moritz> IWBN to wait with the dreprecation until we can switch to a new method that works with the last compiler release

[08:21] <japhb> Yes, between release N and N+1, the new feature should be there, and the old one not actively showing deprecations, then between N+1 and N+2, show deprecation, and after N+2, remove old.  But ... thats's more the ideal than what we cactually do.

[08:21] <japhb> GAH the lag ahhhhhh

[08:22] *** kst joined
[08:23] *** cognome joined
[08:24] *** anaeem1 joined
[08:25] *** rurban joined
[08:25] *** Hor|zon joined
[08:27] <masak> Ven: what's your github name again? just remember that it's not like your IRC nick :)

[08:27] <Ven> masak: nami-doc

[08:27] *** rurban1 left
[08:27] <Ven> (why, may I ask?)

[08:30] *** chenryn_ joined
[08:30] *** chenryn left
[08:31] <cognome> Ven: why do you ask? may I ask? Have all fun in Salzburg btw.

[08:31] <Ven> cognome: I'm having lots! thanks

[08:31] *** [Sno] joined
[08:31] <masak> Ven: giving you write access to https://github.com/masak/perl6-production-readiness/

[08:31] <masak> (done)

[08:31] <Ven> oh, alright. thanks

[08:31] <Ven> well, for me it's production ready anyway :)

[08:31] *** anaeem1 left
[08:32] *** kaleem joined
[08:32] <timotimo> did jnthn make it to the venue in the mean time?

[08:32] *** Mso150 left
[08:32] <cognome> masak, is it necessary to create another repository not in the perl6 organization area?

[08:33] <cognome> thx, anyway

[08:35] <leont_> masak: you may want to add toolchaining to that list

[08:36] *** Hor|zon left
[08:36] *** ecocode joined
[08:36] <cognome> masak: may be deserves an entry on strings because it is the forte of Perl 5 (even if partly covered in other entries). They are not lazy yet.  I am waiting for the day I can do  a   grep split  on a pipe to show how string laziness and array laziness are two sides of the same coin.

[08:37] <masak> Ven: for me too. but there are certainly aspects where we could do better, and those aspects may be showstoppers for people, making them not consider Perl 6 production-ready.

[08:38] <dalek> specs: 305e05e | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[08:38] <dalek> specs: Add IWBN lemma

[08:38] <dalek> specs: review: https://github.com/perl6/specs/commit/305e05e44a

[08:38] <masak> cognome: I don't care -- that feels like a meta-thing right now. the important thing is to collaborate over the content.

[08:38] <japhb> It is really interesting hearing this talk in German, especially which words end up being borrowed words.

[08:38] *** Hor|zon joined
[08:38] <masak> cognome: (about the perl6 organization thing)

[08:38] <cognome> ok

[08:38] <dalek> rakudo/nom: 48b1336 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[08:38] <dalek> rakudo/nom: Prevents double deprecation warning for spurt()

[08:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48b13364a1

[08:38] <dalek> rakudo/nom: 95be122 | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm:

[08:38] <dalek> rakudo/nom: Temporarily remove deprecation removal

[08:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95be122ffc

[08:38] <dalek> rakudo/nom: 5ca5fe8 | (Elizabeth Mattijsen)++ | src/core/IO/Spec/Unix.pm:

[08:38] <dalek> rakudo/nom: Temporarily remove deprecation removal

[08:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ca5fe859f

[08:38] <dalek> rakudo/nom: c35341e | (Elizabeth Mattijsen)++ | src/core/ (5 files):

[08:38] <dalek> rakudo/nom: Undeprecate recently deprecated IO ops

[08:39] <dalek> rakudo/nom: 

[08:39] <dalek> rakudo/nom: Please revert this commit after release of 2014.10

[08:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c35341ea46

[08:39] <FROGGS> timotimo: I can't spot him

[08:39] <lizmat> moritz: ^^^

[08:39] <masak> cognome: re strings -- laziness is an important point. I'm just not sure I consider it on any kind of critical path for production readiness. willing to be swayed by argument.

[08:39] <masak> cognome: I do have Unicode as a heading already.

[08:40] <timotimo> OK :(

[08:40] <masak> leont_: I'm sure you know 100x more than I do about toolchaining. could you give me a few details/subheadings? what is a toolchain and in what ways can it be production ready?

[08:40] <timotimo> liz is so dilligent! :)

[08:40] *** _slade_ left
[08:40] * masak .oO( dillizent )

[08:41] <dalek> roast: 9acc51a | usev6++ | S02-names-vars/list_array_perl.t:

[08:41] <dalek> roast: Add test for RT #117481

[08:41] <dalek> roast: review: https://github.com/perl6/roast/commit/9acc51a8d9

[08:41] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117481

[08:41] <cognome> masak: so you should have a category LATER for things not deemed worthy of 6.0 so as to distinguish LATER thing from things missing from your document.

[08:41] <leont_> The toolchain is everything you use to build/test/install(and arguably author) modules

[08:41] <FROGGS> lizmat / others: what if we would make the deprecation conditionally? could we fudge deprecations according to the current VERSION file?

[08:42] <pmichaud> did the "is DEPRECATED" trait disappear?

[08:42] <lizmat> no

[08:42] <lizmat> but it doesn't work in the settings

[08:42] <FROGGS> it does not work in the setting :/

[08:42] <pmichaud> it used to

[08:42] <pmichaud> I mean, that was the whole reason it was created -- to mark deprecated things in the setting

[08:43] <masak> cognome: but this document is about production readiness... why would I include things that are outside of its scope?

[08:43] <lizmat> well, in my experience, it never worked in the setting

[08:43] <masak> cognome: you must be thinking of another document :P

[08:43] <lizmat> strange errors, either on all VM's or just parrot, I don't really recall

[08:43] <pmichaud> okay.

[08:43] <lizmat> putting the DEPRECATED call in the sub was at least optically equivalent

[08:44] <lizmat> and more flexible  :-)

[08:44] <masak> oh, and by the way: usev6++

[08:44] <masak> it's so nice to see a lot of movement in the RT queue.

[08:44] <cognome> masak: to distinguish things people has not thought yet for your document from those that don't pertain to it. :)

[08:44] <masak> cognome: ok. I see.

[08:45] <masak> cognome: I still would prefer to focus on answering the question "Is Perl 6 production ready?"

[08:45] <pmichaud> well, the nice thing about "is DEPRECATED" is it can catch things at compile-time.  I guess the sub form could do that also.

[08:45] <masak> cognome: if someone wants to collect information about ""what happens after 6.0?", then they're welcome to do so in a separate file somewhere.

[08:46] <pmichaud> I think it's important to not conflate "6.0" and "production ready" as being somehow equivalent.

[08:46] *** daxim_ left
[08:47] <masak> ok.

[08:47] <bartolin> thanks, masak++

[08:47] <bartolin> I wish all of you a lot of fun at the APW

[08:47] <masak> well, in that case, I'm talking about "production ready", not "6.0".

[08:47] <pmichaud> masak: exactly. 

[08:47] <masak> and yes, I see what you mean, pmichaud.

[08:48] <cognome> masak: I understand you don't want your list to become some kind of Borgesian labyrinth :)

[08:48] <masak> surely the "production ready" discussion will extend beyond "6.0", if all goes well with the 6.0 thing.

[08:48] <japhb> It might be useful to mark things that are specifically prioritized or deprioritized -- if we can even make that distinction in a project as anarchic as this one, though the 6.0 discussion may point to that.

[08:48] <lizmat> wrt to DEPRECATED: maybe it should also mention in which (blead) version of Perl6 it will be removed

[08:48] <masak> cognome: yeah, I picture it as this list of level-1 headings, like html5please

[08:48] <cognome> Perl things often tend to end up this way.

[08:49] <lizmat> fwiw, there are now several DEPRECATED things in Perl6 that have been there for more than a year now

[08:49] <pmichaud> at one time we also noted that rakudo (the compiler) could be more aggressive on deprecation than Rakudo Star

[08:49] <lizmat> m: my %h; say %h<a>.exists

[08:49] <camelia> rakudo-moar d3a284: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in method exists at src/gen/m-CORE.setting:1601␤  in block <unit> at /tmp/vbmymcC7La:1␤␤»

[08:50] <lizmat> m: my %h; say %h.exists('a')

[08:50] <camelia> rakudo-moar d3a284: OUTPUT«False␤Saw 1 call to deprecated code during execution.␤================================================================================␤Method exists (from EnumMap) called at:␤  /tmp/3_hKY_jcoM, line 1␤Please use the :exists adverb with postcircum…»

[08:50] <pmichaud> i.e., the compiler is allowed to deprecate things aggressively, and Rakudo Star works to provide deprecation cycles

[08:50] <lizmat> is one such deprecation

[08:50] <FROGGS> lizmat: yeah, pass the version to DEPRECATED that tells since when it is deprecated (which could be a future date), and pass a version when it will be removed

[08:51] <FROGGS> and we could hide the deprecation before $version1, and do warnings for authors for after $version2

[08:51] <lizmat> and how do we check the version in blead ?

[08:51] <FROGGS> lizmat: the VERSION file

[08:51] <pmichaud> I'm pretty sure Perl 6 defines a Version type  :-)

[08:52] <pmichaud> m:   say v6.0.0.WHAT

[08:52] <camelia> rakudo-moar d3a284: OUTPUT«(Version)␤»

[08:52] <FROGGS> and fudge could take care of fiddling with deprecation messages in some way

[08:52] <pmichaud> maybe we should use it.  :)

[08:52] <lizmat> ok, how do we *compare* the version in blead sensibly ?

[08:52] <FROGGS> lizmat: you can compare versions, on?

[08:53] <pmichaud> m:  say v6.0.0 after v5.9.9

[08:53] <camelia> rakudo-moar d3a284: OUTPUT«True␤»

[08:53] *** anaeem1_ joined
[08:53] <Ven> http://act.useperl.at/apw2014/talk/5833 apparently

[08:53] <FROGGS> pmichaud: right now we would use the compiler versions like 2014.10, but yeah

[08:53] *** jack_rabbit left
[08:53] <masak> it's interesting how we have at least three "axes" of versioning, but really only one dimension along which to express it.

[08:53] <lizmat> m: say $*VM.version

[08:53] <camelia> rakudo-moar d3a284: OUTPUT«v2014.9.14.g.0.df.2.d.6.f␤»

[08:53] <FROGGS> (because that's all we have)

[08:53] <pmichaud> isn't the compiler version available somewhere already, though?

[08:53] <FROGGS> m: say $*VM.version cmp v2014.10

[08:53] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/gKuhEGsVtz␤Missing semicolon.␤at /tmp/gKuhEGsVtz:1␤------> say $*VM.version cmp v2014.⏏10␤    expecting any of:␤        argument list␤        postfix␤        dotty…»

[08:53] <lizmat> m: say $*VM.version < v2014.10

[08:53] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/CTZNMbU80X␤Missing semicolon.␤at /tmp/CTZNMbU80X:1␤------> say $*VM.version < v2014.⏏10␤    expecting any of:␤        argument list␤        postfix␤        dotty m…»

[08:54] <masak> axis one: Perl 6 is the "next" thing after Perl 5. (that's the unpopular axis.)

[08:54] <masak> axis two: the spec keeps evolving, and will eventually hit 6.0

[08:54] <lizmat> m: say $*VM.version cmp v2014.10

[08:54] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/os8FrFwzHX␤Missing semicolon.␤at /tmp/os8FrFwzHX:1␤------> say $*VM.version cmp v2014.⏏10␤    expecting any of:␤        argument list␤        postfix␤        dotty…»

[08:54] <pmichaud> m: say $*VM.version after v2014.10

[08:54] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/ZvfwZtMgab␤Missing semicolon.␤at /tmp/ZvfwZtMgab:1␤------> say $*VM.version after v2014.⏏10␤    expecting any of:␤        argument list␤        postfix␤        dot…»

[08:54] <FROGGS> m: say $*VM.version cmp v2014.10.0

[08:54] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/H7htjAkmA4␤Missing semicolon.␤at /tmp/H7htjAkmA4:1␤------> say $*VM.version cmp v2014.⏏10.0␤    expecting any of:␤        argument list␤        postfix␤        dot…»

[08:54] <masak> axis three: the compiler(s) keep evolving.

[08:54] <FROGGS> ?

[08:54] <lizmat> yuck?

[08:54] <pmichaud> m: say $*VM.version.WHAT

[08:54] <camelia> rakudo-moar d3a284: OUTPUT«(Version)␤»

[08:54] <FROGGS> m: say $*VM.version cmp version.new('2014.10')

[08:54] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/bxgzNw7qVU␤Undeclared routine:␤    version used at line 1␤␤»

[08:54] <FROGGS> m: say $*VM.version cmp Version.new('2014.10')

[08:54] <camelia> rakudo-moar d3a284: OUTPUT«Less␤»

[08:54] <FROGGS> m: say $*VM.version cmp Version.new('2014.09')

[08:54] <camelia> rakudo-moar d3a284: OUTPUT«More␤»

[08:55] <pmichaud> m: say $*VM.version after v2014.10

[08:55] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/7wAWLodWxu␤Missing semicolon.␤at /tmp/7wAWLodWxu:1␤------> say $*VM.version after v2014.⏏10␤    expecting any of:␤        argument list␤        postfix␤        dot…»

[08:55] <FROGGS> that's weird

[08:55] <pmichaud> feels like a rakudobug

[08:55] * masak submits rakuodbug

[08:55] <lizmat> that's looks like a parsing issue 

[08:55] <FROGGS> m: say v1.2

[08:55] <camelia> rakudo-moar d3a284: OUTPUT«v1.2␤»

[08:55] <lizmat> m: say v2014.10

[08:55] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/sJ0f9YfLJQ␤Missing semicolon.␤at /tmp/sJ0f9YfLJQ:1␤------> say v2014.⏏10␤    expecting any of:␤        argument list␤        postfix␤        dotty method or postfi…»

[08:55] <pmichaud> m: say v2014.10 before $*VM.version

[08:55] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/5WTerG1xJe␤Missing semicolon.␤at /tmp/5WTerG1xJe:1␤------> say v2014.⏏10 before $*VM.version␤    expecting any of:␤        argument list␤        postfix␤        do…»

[08:55] <FROGGS> m: say v10.2

[08:55] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/WHm04xB1jm␤Missing semicolon.␤at /tmp/WHm04xB1jm:1␤------> say v10.⏏2␤    expecting any of:␤        argument list␤        postfix␤        dotty method or postfix␤»

[08:55] <FROGGS> only one digit allowed??

[08:55] <FROGGS>  /o\ we are doomed

[08:56] <pmichaud> m: say v10.2 afer v10.1

[08:56] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/ehy82TiQIy␤Missing semicolon.␤at /tmp/ehy82TiQIy:1␤------> say v10.⏏2 afer v10.1␤    expecting any of:␤        argument list␤        postfix␤        dotty method o…»

[08:56] <pmichaud> m: say v10.2 after v10.1

[08:56] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/l5I8nAWHiL␤Missing semicolon.␤at /tmp/l5I8nAWHiL:1␤------> say v10.⏏2 after v10.1␤    expecting any of:␤        argument list␤        postfix␤        dotty method …»

[08:56] *** anaeem1_ left
[08:56] <pmichaud> I think it's the "after" operator that is confusing things

[08:56] <pmichaud> or maybe not

[08:57] <pmichaud> masak: last night at dinner I was propounding that the "6.0 spec" should be an extraction of roast tests 

[08:58] <FROGGS> pmichaud: no, it is about two digits before the .

[08:58] <lizmat> pmichaud: an interesting thought  :-)

[08:59] <masak> pmichaud: ooh

[08:59] <masak> pmichaud: I like that.

[08:59] <pmichaud> I'm still on my "synopses are not spec" soapbox

[08:59] <masak> :)

[08:59] <masak> yeah.

[08:59] <pmichaud> the "spec" is defined by tests.

[08:59] <masak> roast being spec feels very precise in a way.

[08:59] <pmichaud> so, we should figure out what tests in roast we feel are key to 6.0, and memorialize that.

[08:59] <FROGGS> std has 'v' <?before \d> :: <vnum> +% '.' '+'?, and we miss the ::

[09:00] *** anaeem1_ joined
[09:00] <masak> pmichaud++

[09:00] <pmichaud> (and it explicitly should *not* be simply a tag on the roast repo... it should be a curated extraction of tests)

[09:00] <pmichaud> (at least until roast matures)

[09:00] <FROGGS> pmichaud: yeah, which includes fudged tests where we still have bugs or open TODOs, but that is totally valid

[09:01] *** Hor|zon left
[09:01] <FROGGS> if we could attach meta information to test files some how...

[09:01] <timotimo> Cannot call 'Numeric'; none of these signatures match:  -  in sub WINNER at src/gen/m-CORE.setting:21472 ... meh :\

[09:02] <FROGGS> O.o

[09:02] <lizmat> technically, though, we would need to change the skip handling so it can account for being an unimplemented, required feature

[09:03] <pmichaud> shouldn't be any skip handling

[09:03] <pmichaud> well.... okay, I could see having skip handling

[09:03] * Ven really wants to change the name of "winner" before 6.0 :)

[09:03] <Ven> ...and maybe "more" as well

[09:03] <timotimo> yeah

[09:03] <timotimo> it's kinda awkward

[09:03] *** woolfy joined
[09:04] <lizmat> .oO( the other day, I had thought of an alternative for more, but I seem to have forgotten it now )

[09:04] * lizmat also doesn't like winner(), or the whole setup there in S17

[09:05] <lizmat> but I heven't been able to come up with a better way and/or convince jnthn

[09:05] <FROGGS> lizmat: I think about skips that they are a) the compiler fault and the test is meant to pass in order to comply to the spec or b) the test is bogus and need to be (re)moved

[09:05] <jnthn> Well, I was more convinced by my original sugar-less API that I could remember :)

[09:05] <FROGGS> jnthn: you're preparing your talk in secrecy?

[09:05] <timotimo> oh hai jnthn 

[09:06] <jnthn> FROGGS: Well, folks sat behind me might get sneak pees... :)

[09:06] <jnthn> gah, peeks

[09:06] <mauke> I can't even see your screen

[09:06] <lizmat> .oO( sneek peas )

[09:06] <mauke> just your back

[09:07] <FROGGS> jnthn: you are at the venue?

[09:07] <timotimo> i don't even see where jnthn sits :S

[09:07] <jnthn> yes

[09:07] <mauke> behind Larry

[09:07] <jnthn> I sneaked in 

[09:07] <jnthn> After sleeping altogether too well.

[09:07] <FROGGS> ahh, I saw your arm!

[09:08] <masak> wow, it's almost like being there in person! I can picture everyone sitting on a line behind each other!

[09:08] <jnthn> Made up for sleeping less than well in Stockholm, I guess :)

[09:08] <timotimo> OK :)

[09:08] <japhb> The desire to change features that are currently canonized in tests "before 6.0" points also to my feeling that choosing tests that are not frozen (or don't even having a working implementation) as being part of 6.0 seems a tad premature.  Though we could say "definitely in 6.0", "in 6.0 but will likely change", and "wanted in 6.0 but not frozen"

[09:08] <FROGGS> masak: *g*

[09:08] <pmichaud> japhb: yes, that's why I claim it needs to be an extraction of tests

[09:08] <pmichaud> (if I'm understanding what you just wrote correctly)

[09:09] <japhb> pmichaud: And I'm arguing for more than one extraction.

[09:09] <Mouq> lizmat: I think we could maybe get more feedback and brainpower on concurrency things with better documentation *hint* ;)

[09:09] <Ven> ha, jnthn indeed sneaked in

[09:09] <pmichaud> I'm not sure I agree with "wanted in 6.0 but not frozen"

[09:09] <FROGGS> sounds like "needs clarification"

[09:09] <lizmat> Mouq: better than S17 ?  :-)

[09:09] <pmichaud> I think 6.0 should be "definitely in", with wishlists reserved to later versions

[09:10] <masak> with all the sneaking jnthn is doing, is he wearing sneakers? :P

[09:11] <Mouq> I actually have found S17 really readable, but it'd be nice to have stuff on doc.perl6.org, which can include more tutorials/examples and stuff too. I'm adding the S17 types to the typegraph document now

[09:11] <japhb> pmichaud: Well, for example, I'm not sure I can sell 6.0 without really complete sockets functionality.  But I don't think all of that is even tested, let alone implemented.

[09:11] <pmichaud> and "in 6.0 but will likely change" sounds to me like we should simply not include it as part of 6.0

[09:11] <masak> I also think 6.0 should be "definitely in".

[09:12] <masak> which seems to suggest that macros, in their to-be-designed new clothes, will be post-6.0 :/

[09:12] <japhb> OK, so is "winner" in, if lots of people dislike it, but we really need something like it?

[09:12] <timotimo> argh

[09:12] <pmichaud> japhb: I'm not sure about that phrase "sell 6.0".   

[09:12] <timotimo> Cannot find method 'gist': no method cache and no .^find_method

[09:12] <Ven> masak: I dont think it's that bad

[09:12] <pmichaud> there's also a difference between "sell 6.0" and "sell Perl 6"

[09:13] <Ven> it's not what people go for

[09:13] <japhb> pmichaud: My use case is "Can I with a straight face discuss 6.0 as a first 'complete' release in a decade and a half, with this big thing missing?"

[09:14] <pmichaud> is "6.0" intended to mean "complete"? 

[09:14] <timotimo> &WINNER.wrap(-> |args { say args; callwith(|args) });

[09:14] *** SamuraiJack left
[09:14] <timotimo> "how the heck is the winner sub called?"

[09:14] <timotimo> i can't tell

[09:14] <timotimo> because of that error

[09:14] <timotimo> BUT

[09:14] <japhb> And I agree about that difference.  I have no trouble selling Perl 6 to interested parties.  "6.0" would be harder, right now.

[09:14] <pmichaud> it's those sorts of unspoken equivalencies that really bother me at times

[09:14] <timotimo> i can just call a little in-line sub with that capture and have it print its args and kwargs

[09:15] <masak> pmichaud++ # "unspoken equivalences"

[09:15] <japhb> pmichaud: "complete" is perhaps a bad choice of words.  Basically, I want to avoid the "Well we called it .0, but really, you ought to wait for .1" thing.  I hate that.

[09:15] <Ven> he :P

[09:15] <masak> pmichaud: fwiw, I think the outside of the echo chamber is about twice as bad with the unspoken equivalences as we are here on the inside.

[09:15] <pmichaud> japhb: interesting.  I still come from the era when everyone knew that a ".0" release was never the one to use... wait for the .1

[09:16] <masak> pmichaud: and worse, the outside cannot always be convinced to care.

[09:16] <masak> (about the distinctions)

[09:16] <pmichaud> masak: yes, I agree that we have to acknowledge that the equivalencies exist 

[09:16] <japhb> I'm down the hall at work from the Go language team.  I think of there 1.0 threshold when I think of Perl 6.0

[09:17] <pmichaud> japhb: if we want that sort of definition of 6.0, I think we have to say that "6.0" is at least another year away, if not longer.

[09:17] <japhb> And I think that's still reasonable (I'm not wedded to it, I just think it's reasonable as a choice to make)

[09:17] <pmichaud> (and I'd be okay with that, although I know many would not.)

[09:18] <masak> pmichaud: case in point, recently at client: <devs> of course, this is just a *prototype*, not the real thing. <client> OMG, the devs already finished the thing -- we need to give them more things to do!

[09:18] <masak> :P

[09:19] <pmichaud> I'm also fine with us coming up with an extracted checkpoint that we give a pre-6.0 version identifier

[09:19] <timotimo> why don't i has methods? :(

[09:19] <jnthn> .HOW.name the thingy that you've got

[09:19] <pmichaud> v6.0-pre1  works for me

[09:19] <timotimo> k

[09:19] <masak> sounds OK, and might give a nice roadmap-like feel

[09:20] <timotimo> Array and Hash

[09:20] <japhb> Yeah, I like that idea

[09:21] <jnthn> timotimo: wat...

[09:21] <timotimo> should i come over? ;)

[09:21] <timotimo> i could try to golf this

[09:21] <jnthn> you can try

[09:21] <pmichaud> rakudo: say v6.0.0pre1   # checking

[09:22] <pmichaud> m: say v6.0.0pre1   # checking

[09:22] <camelia> rakudo-{parrot,moar} d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Confused␤at /tmp/tmpfile:1␤------> say v6.0.0⏏pre1   # checking␤    expecting any of:␤        whitespace␤»

[09:22] <camelia> rakudo-moar d3a284: OUTPUT«===SORRY!=== Error while compiling /tmp/p1mXe369ta␤Confused␤at /tmp/p1mXe369ta:1␤------> say v6.0.0⏏pre1   # checking␤    expecting any of:␤        whitespace␤»

[09:22] <pmichaud> wha....?   that used to work.

[09:22] <timotimo> in a one-liner it does work no-problem; maybe it has to do with being called from a callback in NativeCall?

[09:22] <moritz> m: say v6.0.0.pre1

[09:22] <camelia> rakudo-moar d3a284: OUTPUT«No such method 'pre1' for invocant of type 'Version'␤  in block <unit> at /tmp/tE7JrbZya5:1␤␤»

[09:22] <masak> pmichaud: 

[09:22] <masak> v1.2.3beta                  # illegal

[09:23] <jnthn> heh, for a moment I expected "did you mean .perl" :)

[09:23] <masak> Version('1.2.3beta')        # okay

[09:23] <pmichaud> masak: danke

[09:23] <pmichaud> yeah, that's right

[09:23] <masak> "Only integers and certain wildcards are allowed; for anything fancier you must coerce a string to a C<Version>"

[09:24] <pmichaud> anyway, if we go with the "6.0.0 needs to be complete" approach, then perhaps we can reasonably talk about things like "6.0.0pre1"

[09:24] * masak misses sorear sometimes

[09:24] <masak> this feeling brought to you by glancing at S02 and seeing the word "Allomorphic" in one of the headings :)

[09:25] <masak> pmichaud: any reason to prefer "pre1" to the (more established, IMO) "RC1" ?

[09:25] <pmichaud> "RC1" sounds more like a software product to me.

[09:25] <timotimo> waaaaait a minute

[09:25] <timotimo>     my Num $until = $wait ?? nqp::time_n() + $wait !! Nil;

[09:26] <pmichaud> I'm worried it conflates "language spec" and "compiler" too closely.

[09:26] <japhb> Because an RC is "if no one objects, we'll just change the name to final" as opposed to "this is a WIP pre-release"

[09:26] <masak> fair enough.

[09:26] <timotimo> that's BS; $wait is not the time to wait, it's the code to call if we waited instead of winning something

[09:26] <lizmat> indeed, RC-* are usually short lived

[09:26] <pmichaud> japhb beat me to the other aspect... "RC" nominally means "release candidate", whereas we're talking about something we've explicitly decided isn't "complete" enough to be our notion of a release.

[09:27] <lizmat> 6.0.0pre1 would be live for at least a month, I would think

[09:27] *** bjz joined
[09:28] <pmichaud> well, longer if we're holding 6.0.0 for "needed features that haven't been fully explored yet"

[09:28] <japhb> We can have pre2, pre3, etc.

[09:29] <masak> how do we make sure we don't get "stuck" in releasing more preN things?

[09:29] <masak> sometihng like a convergence criterion...

[09:29] <masak> or a loop variant

[09:30] <pmichaud> the .pre0 series should have placeholders for "tests" yet to be written to make 6.0 complete

[09:30] <japhb> ... that's why I had my multiple categories above, for a way to say "this is what we expect we will converge to, but we don't have finalized tests written yet"

[09:30] *** mephinet joined
[09:31] <timotimo> is winner actually tested at all? >_<

[09:31] *** Hor|zon joined
[09:32] <masak> japhb, pmichaud: yes, it seems you're somehow saying the same thing.

[09:32] <moritz> timotimo: S17-channel/winner.t and integration/advent2013-day14.t

[09:32] <masak> though those bits are all for the known unknowns.

[09:32] <pmichaud> well, except that I'm not convinced that "6.0.0" needs to be complete

[09:32] *** JimmyZ joined
[09:32] <masak> it seems that the biggest threat to 6.0 convergence at the end of a -pre0 sequence would be unknown unknowns, things we fail to plan for now.

[09:33] <pmichaud> I am certain that a 6.0.0 (no-preN) spec should be "definitely in" and not "we want to be in"

[09:33] <timotimo> m: $nqp::time(); # this is obviously wrong, right?

[09:33] <masak> but realize during the -pre0 journey that we need for 6.0

[09:33] <camelia> rakudo-moar c35341: OUTPUT«Cannot find method 'Any'␤  in block <unit> at /tmp/kwUVYeyK9J:1␤␤»

[09:33] <masak> timotimo: looks obviously wrong to me.

[09:33] <japhb> And I think that threat is part of why implementation really matters to me for 6.0.0 things.  We've too often had to make major changes when we realized implementation would be painful or guaranteed-slow.

[09:34] <JimmyZ> hello, I don't mind what's the name is... but I hope the high priority in https://github.com/masak/perl6-production-readiness will be achieveed :)

[09:34] <JimmyZ> the name is not the key part ..

[09:34] <FROGGS> pmichaud: +1 to "definitely in" and not to include a list of wishes that might is going to take ages

[09:35] <JimmyZ> but +1 to ...pre1... preX

[09:35] <jnthn> timotimo: Yeah, there are no nqp variables...

[09:36] <Mouq> m: CompUnitRepo::Locally.^name

[09:36] <camelia> rakudo-moar c35341: OUTPUT«Method 'install' must be implemented by CompUnitRepo::Locally because it is required by a role␤  in any compose_method_table at src/gen/m-Metamodel.nqp:2362␤  in any apply at src/gen/m-Metamodel.nqp:2372␤  in any compose at src/gen/m-Metamodel.nqp:25…»

[09:36] <timotimo> booya

[09:36] <Ven> timotimo++

[09:36] <timotimo> i have something working

[09:36] <Ven> I saw it live – and first – *g*

[09:36] <masak> JimmyZ: you just got added as a collaborator to https://github.com/masak/perl6-production-readiness/

[09:37] <masak> pmichaud: you too :)

[09:37] <pmichaud> masak++

[09:37] <JimmyZ> masak: thanks

[09:37] <japhb> FROGGS, pmichaud: I agree that all 6.* specs should be "definitely in", I just think we need the "want to be in" or "will be in, but changing soon" categories to guide the -preN path.

[09:37] *** Hor|zon left
[09:37] <masak> FROGGS: you too :)

[09:37] <pmichaud> japhb: yes, I'm fine with that notion.

[09:37] <dalek> doc: 9f1b25c | Mouq++ | / (4 files):

[09:37] <dalek> doc: Attempt to update type-graph.txt

[09:37] <dalek> doc: review: https://github.com/perl6/doc/commit/9f1b25cea9

[09:37] <FROGGS> masak: thanks :o)

[09:37] <nine> If you're at the APW and see a segfault during my talk, please remind me to kill the Catalyst server

[09:38] <pepl> a segfault at your box, I assume ;-)

[09:38] <nine> I guess "never do live demos" really means *never* ;)

[09:38] <nine> pepl: yep

[09:38] <FROGGS> japhb: when we state that something will be definitely in in 6.0.1, we don't have to state that it might change, because that can/will always happen

[09:38] <huf> record live demo, learn exact movements to make it look live

[09:38] *** pecastro joined
[09:38] <pmichaud> masak: I'm sure it's perhaps more work than it's worth (or you intended), but "production-ready" feels like it wants a features-matrix treatment (for display)

[09:39] <japhb> FROGGS: I should have said "for the 6.0-preN series", apologies.

[09:39] <JimmyZ> other thing is: new feature or unmature feature may be defined as experiment feature 

[09:39] <Ven> http://www.pcgamer.com/how-gamecubewii-emulator-dolphin-got-a-turbocharge/ even dolphin has a JIT nowadays! :P

[09:40] <pmichaud> I think experimental features should be part of compilers, not language spec.

[09:40] <FROGGS> japhb: the same applies for 6.0-pre3 for example... we don't have to state that the synopsis (or tests if we have any) can change until it is done

[09:40] <pmichaud> I somewhat like the RFC approach to standards -- standards are adopted *after* implementations, not before.

[09:40] <JimmyZ> which implied we may remove the experimental feature next release :)

[09:41] <pmichaud> JimmyZ: that sounds like something belonging in compiler, not language spec :)

[09:41] <Ven> timotimo: ^ did you see my link?

[09:42] <timotimo> didn't look, no :(

[09:42] <JimmyZ> pmichaud: aye, but I wouldn't personally mind language spec feature is marked as experiment, since we may think we added wrong language spec which may influence other  language specs

[09:43] <JimmyZ> *some

[09:43] <japhb> pmichaud: agreed re: RFC approach

[09:44] *** Sqirrel left
[09:44] *** Sqirrel joined
[09:44] <pmichaud> also, it seems to me a judicious use of fudge could handle the test extraction for the 6.* definition

[09:44] <JimmyZ> +1

[09:44] <timotimo> jnthn: how come we get "Cannot call 'AUTOGEN'; none of these signatures match:" when we try to call a NativeCall sub? as in: why does it say only "AUTOGEN" instead of the name of the sub we tried to call?

[09:45] <pmichaud> i.e., tests can be marked with suitable #?spec  markers to indicate what is "in" or "out" of our working set of roast

[09:45] <JimmyZ> a release of roast :)

[09:45] <Ven> http://blogs.msdn.com/b/ie/archive/2014/10/09/announcing-key-advances-to-javascript-performance-in-windows-10-technical-preview.aspx more jit!

[09:46] <pmichaud> and an equivalent of t/spec/spectest.data for file-level selection 

[09:46] <pmichaud> er, t/spectest.data

[09:47] <japhb> pmichaud: Agreed on both points

[09:47] <FROGGS> I like it too :o)

[09:48] <lizmat> wouldn't this make roast more implementation aware than it should be ?

[09:48] <FROGGS> though, that means we tag stuff per file in rakudo and not in roast

[09:48] <pmichaud> lizmat: I don't understand

[09:48] <FROGGS> we'd probably need a kind-of spectest.data in roast that gets the tags

[09:48] <pmichaud> yes, what FROGGS said

[09:49] <FROGGS> and then it wouldn't be compiler aware :o)

[09:49] <lizmat> ok, so the files in roast itself would not be changed for this

[09:49] <japhb> Right, that's what we meant

[09:49] <FROGGS> lizmat: the files in roast *will* be changed, because roast is the spec

[09:49] <pmichaud> well, I think the files in roast would be changed to add markers identifying tests that are (not) part of spec

[09:50] <Ven> actually I'm running out of battery...

[09:50] <FROGGS> a spec coverage tool would be nice after all the tagging

[09:50] <timotimo> jnthn:             GTK::Simple::Scheduler.cue( { $statuslabel.text = "evaling the code now ..." } );

[09:50] <pmichaud> roast belongs to the language, not to rakudo.  :)

[09:50] <timotimo> this should set the text of $statuslabel ASAP, shouldn't it?

[09:50] <pmichaud> (or any other implementation)

[09:51] <pmichaud> my battery is 6%... I should seek power also 

[09:51] <Ven> 8%! ha!

[09:51] <FROGGS> 86% in the main battery, and 100% in the bay battery :o)

[09:51] <Ven> .oO( I SEEK  POWEEEER )

[09:51] <FROGGS> (so I don't have to stop compiling rakudo :o)

[09:51] <Ven> FROGGS: forgot to charge my laptop...

[09:52] <moritz> you should have used python (batteries included!) :-)

[09:52] <FROGGS> *g*

[09:52] <timotimo> i can't follow the talk, my coding *and* the irc >_<

[09:52] <Ven> \o/

[09:52] <timotimo> ah, 8% is your laptop battery

[09:52] <timotimo> i still have about 20 minutes left in my battery :|

[09:52] <Ven> it's saying 45min for mine buuut I don't believe it

[09:53] *** leont_ left
[09:53] *** SamuraiJack joined
[09:54] <timotimo> heh, yeah macbook airs

[09:54] <timotimo> they are amazing devices from that standpoint

[09:54] *** kyun left
[09:55] <dalek> rakudo/nom: d083173 | (Timo Paulssen)++ | src/core/asyncops.pm:

[09:55] <dalek> rakudo/nom: fix a few wrongs with WINNER

[09:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d083173e0c

[09:55] <lizmat> timotimo++  good cacth (I think :-)

[09:55] <lizmat> *catch rather

[09:56] <lizmat> m: say $nqp::time_n()

[09:56] <camelia> rakudo-moar c35341: OUTPUT«Cannot find method 'Any'␤  in block <unit> at /tmp/8K4cziqyid:1␤␤»

[09:59] <lizmat> odd that that doesn't blow up at compilation

[10:00] <lizmat> m: say "hi"; say $nqp::time_n()

[10:00] <camelia> rakudo-moar c35341: OUTPUT«hi␤Cannot find method 'Any'␤  in block <unit> at /tmp/6fnDwRsCLL:1␤␤»

[10:00] <jnthn> timotimo: It's odd the AUTOGEN name would escape

[10:00] <jnthn> timotimo: I just checked the MOP code and it does $proto.set_name($name);

[10:00] * FROGGS tries now to implement <cut>, to get into regexes again... http://perlcabal.org/syn/S05.html#line_2578

[10:01] <jnthn> lizmat: It's a package var lookup

[10:02] <jnthn> lizmat: Then calling the var

[10:02] *** brrt left
[10:02] <TimToady> where are the most recent timing charts?

[10:02] <FROGGS> TimToady: timings of what?

[10:03] <TimToady> oh, versions of rakudo

[10:03] <jnthn> TimToady: You mean perl6-bench output? My last run I did/uploaded was http://jnthn.net/perl6/bench/2014-08-20.html

[10:03] <TimToady> perl6-bench things to show in my talk, basically

[10:04] *** Hor|zon joined
[10:04] <jnthn> Those are the ones I used in my perf talk at YAPC::EU

[10:04] <jnthn> Well, some of them

[10:04] <jnthn> I used some from timotimo++ too

[10:04] <TimToady> I don't need detail, just concept, so that should do

[10:04] <FROGGS> is  "foobar" ~~ / foo <( bar /  and  "foobar" ~~ / foo <cut> bar /  considered to be identical?

[10:06] <TimToady> no, <cut> mutates a string

[10:06] <FROGGS> (wrt to the matched text, not backtracking)

[10:06] <FROGGS> hmmm

[10:06] <FROGGS> TimToady: the input string?

[10:06] <masak> cognome: added you to prod-readiness repo, too.

[10:07] <TimToady> yes, it's supposed to throw prefix stuff away; we haven't really figured out how to do that yet

[10:07] <TimToady> but the idea is to be able to do continuous matching on an input stream

[10:07] <TimToady> without keeping the whole thing in memory

[10:08] <cognome> masak. thx. 

[10:08] <masak> pmichaud: features-matrix might be interesting for some perl6-community-internal production-ready resource, but it would contravene the purpose of what I want to create with the prod-readiness document: a simple list, with simple levels, for outsiders to read and get a quick overview.

[10:08] <FROGGS> TimToady: got it

[10:08] <masak> pmichaud: the document is explicitly directed to curious outsiders asking the quesiton "Is Perl 6 ready?"

[10:09] <timotimo> i have THE POWER

[10:09] <masak> and the answer should be more detailed than "Yes" or "No", but not burdened down with details either.

[10:10] <Ven> is there a difference between `@ [$a, $b]` and `@ ($a, $b)` (wrt destructuring)?

[10:10] * Ven has the power too, now

[10:10] <masak> Ven: no, I don't think so.

[10:10] <Ven> kayyy.

[10:11] <masak> Ven: I only ever use the former, though.

[10:11] <timotimo> TimToady: http://t.h8.lv/p6bench/2014-09-26-many_rakudos_history_nop5.html - this may be of interest?

[10:11] <Ven> masak: I saw the other one on timotimo 's screen

[10:11] <jnthn> Ven: If you use the former then it implies the sigil

[10:12] <jnthn> So you don't need to write @ [$a, $b], just write [$a, $b] and it will make the nominal type Positional.

[10:12] <jnthn> Just like @ does

[10:12] *** virtualsue left
[10:12] <timotimo> http://t.h8.lv/p6bench/2014-09-25-many_rakudos.html - this one is a bit hard to read because of the many many captions on the side making the graph itself narrower

[10:12] <Ven> alright, then `@foo [$a, $b]` vs `@foo ($a, $b)`?

[10:12] <jnthn> Those are same

[10:13] <timotimo> ah and @foo [$a, $b] and just [$a, $b] are the same, too?

[10:13] <jnthn> Well, the latter doesn't bind the actual thingy into @foo :P

[10:13] <masak> jnthn: what other things except positionals could match agains `($a, $b)` ?

[10:13] <masak> against*

[10:13] *** fhelmberger joined
[10:13] <jnthn> masak: Anything that knows how to .Capture and produce positionals 

[10:14] <timotimo> oooh nine is up!

[10:14] <jnthn> masak: You can make anything destructurable by implementing .Capture

[10:14] <jnthn> ooh, yay...the nine talk \o/

[10:14] <masak> ooh, nine is up!

[10:14] <masak> it's like I'm there and can see it...

[10:14] <masak> nine walking up on stage... the crowd going wild!

[10:15] <masak> what's he doing? is he stage-diving?

[10:15] <TimToady> there's no stage :)

[10:15] <cognome> is there a video feed for APW?

[10:15] * masak bonks his receiver on the side

[10:16] <pepl> cognome: no feed, only recording

[10:16] <cognome> pepl++

[10:17] <pepl> lizmat++, woolfy++, vienna.pm++ # sponsoring this

[10:18] <Ven> lizmat++; woolfy++; vienna.pm++

[10:18] *** fhelmberger left
[10:18] <TuxCM> lizmat++; woolfy++; vienna.pm++

[10:18] <Ven> live demo *g*

[10:18] <masak> so... what's nine talking about? is there, like, a project he's been working on since YAPC::EU or something? :P

[10:18] <colomon> o/

[10:18] *** pmurias joined
[10:19] <Ven> masak: catalyst application in p6

[10:19] <Ven> :')

[10:19] <masak> colomon: thanks for showing an interest in https://github.com/masak/perl6-production-readiness/ ! :P

[10:19] <masak> colomon: you have been added as a collaborator

[10:22] <pmurias> masak: re production readiness, one thing which lack of is really annoying for me is automatic precompilation of modules

[10:22] <masak> pmurias: you have been added as a collaborator

[10:22] <masak> pmurias: sounds like a "Toolchain" thing, I guess.

[10:24] <pmurias> "Toolchain" thing? It's something rakudo should do automatically

[10:24] <pmurias> like python compile .py file to .pyc

[10:24] <Ven> nine passing a string as a role parameter for fun and profit *g*

[10:24] <masak> right -- just wondering where it belongs in the sections we have

[10:24] <masak> Ven: passing strings as a role parameter is nice. I do it sometimes :)

[10:25] <pmurias> having to write Makefiles is something that doesn't belong in any vaguely modern language

[10:26] <Ven> "our role" eh.

[10:26] <Ven> pmurias: I feel you :P

[10:26] *** Hor|zon left
[10:26] <masak> agreed.

[10:28] <Mouq> Thought: syntax vs. desugared-code benchmarks in perl6-bench

[10:29] *** Hor|zon joined
[10:29] <Mouq> s/syntax/idiomatic-/

[10:30] <Ven> masak: niner.name/talks/Inline-Perl5

[10:30] <Ven> also, for other people

[10:30] <masak> http://niner.name/talks/Inline-Perl5 # so that I can click on it from the terminal :)

[10:30] <masak> Ven++

[10:31] <Ven> ha, mine highlighted it correctly :P

[10:31] <masak> I only see .pl and .pm/.pm6 files in that directory though.

[10:31] <masak> there's no actual talk?

[10:32] <masak> or, let me rephrase, what do I do with these files? :)

[10:32] <pmichaud> masak: (production ready)  well, I agree the answer should be more than 2-state "yes/no", but what you have so far seems to be 3-state (ish):  "improving/maturing/ready"

[10:32] <Ven> eating&

[10:32] *** Ven left
[10:32] <pmichaud> and reading the textual list doesn't give me a quick sense of things

[10:33] <Mouq> masak: the content file

[10:33] <pmichaud> or, at least, it's not as impactful as I think it would be if we had the items in a more compact list than the way github currently displays it

[10:33] <masak> pmichaud: the ideal is a presentation like that of http://html5please.com/

[10:33] <pmichaud> looking

[10:33] <masak> pmichaud: with red/yellow/green for the levels

[10:33] <masak> pmichaud: and more detailed descriptions (with links) if you click to expand

[10:33] *** slavik left
[10:33] <pmichaud> masak: okay, that's what I was looking for

[10:33] <masak> Mouq: ooh -- nice.

[10:34] <masak> pmichaud: I'll put that in the description of the github repo -- thanks.

[10:34] <pmichaud> by 'features matrix' i was thinking the "color indicators and concise presentation" more than the "matrix" part.

[10:34] <pmichaud> the textual list doesn't do it for me at the moment

[10:34] <masak> ok, then we again agree violently.

[10:34] <pmichaud> \o/

[10:35] *** JimmyZ left
[10:35] <pmichaud> okay, lunchtime here.

[10:35] <pmichaud> bbiaw

[10:35] *** chenryn_ left
[10:36] <masak> nine++

[10:36] <masak> nine++

[10:36] <masak> nine++ # just on general principle

[10:36] *** mauke left
[10:38] *** Sqirrel left
[10:42] <masak> detrain &

[10:44] *** daxim_ joined
[10:46] *** Sqirrel joined
[10:46] *** slavik joined
[10:47] *** kjs_ joined
[10:50] *** rurban left
[10:51] *** rurban joined
[10:55] <dalek> doc: f4a6590 | Mouq++ | lib/Type/Signature.pod:

[10:55] <dalek> doc: Signature.pod tweaks

[10:55] <dalek> doc: review: https://github.com/perl6/doc/commit/f4a6590b0a

[10:56] *** [Sno] left
[11:01] *** SamuraiJack left
[11:01] *** kurahaupo joined
[11:05] *** chenryn_ joined
[11:09] *** brrt joined
[11:11] *** chenryn_ left
[11:13] *** azawawi joined
[11:16] <dalek> roast: 3cee096 | usev6++ | S19-command-line/arguments.t:

[11:16] <dalek> roast: Add test for RT #112988

[11:16] <dalek> roast: review: https://github.com/perl6/roast/commit/3cee096456

[11:16] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=112988

[11:19] *** ghostlines left
[11:20] *** ghostlines joined
[11:23] *** [Sno] joined
[11:24] <brrt> i'm a bit in two minds about the 'web support' thingy

[11:24] <brrt> what do we want in that regards

[11:24] <brrt> mod_perl6?

[11:24] <brrt> a psgi server? fastcgi server?

[11:25] <brrt> html templating?

[11:25] <colomon> what was nine++'s presentation on?

[11:25] <brrt> websockets?

[11:25] <rurban> Inline::Perl5 probably

[11:25] <brrt> web is big these days, much bigger than CGI

[11:26] <brrt> on the other hand..... the 'modern' thing is static html + js + a json api

[11:26] <brrt> which is a much simpler thing in a way

[11:26] <Mouq> colomon: http://niner.name/talks/Inline-Perl5 and http://niner.name/talks/Inline-Perl5/content

[11:27] <colomon> Mouq++

[11:29] <dalek> doc: 5d3615d | Mouq++ | lib/Type/Signature.pod:

[11:29] <dalek> doc: Add a bit about destructuring

[11:29] <dalek> doc: review: https://github.com/perl6/doc/commit/5d3615d022

[11:30] <brrt> also, i think sergot a gsoc project of that just this summer

[11:30] <brrt> sergot++ i might add... so we should add the results of that to our 'production readiness' thingy

[11:31] <pmurias> brrt: a psgi server would use p5?

[11:31] *** Ven joined
[11:32] <brrt> hmm.. yeah, i mean something similar for p6

[11:32] <brrt> it's not like it's this magic idea that we have to find. it's just something we have to agree on

[11:35] <timotimo> had noms. good noms.

[11:35] *** leont_ joined
[11:37] <pmurias> brrt: we don't have to agree on a single idea

[11:37] <pmurias> brrt: having a bunch of options seems like what we want in the long run

[11:40] *** mauke joined
[11:41] <timotimo> brrt: websockets will want a bit of implementation work, yeah

[11:41] <timotimo> but with "web support" we should do a big bunch of stuff; not only serverside either.

[11:42] <brrt> ... run perl6 on the client? please forget that now

[11:42] <brrt> :-p

[11:42] <timotimo> m)

[11:42] <timotimo> bleeehh why do i feel so tired? i've had lots of sleep last night and the night before that :\

[11:44] <FROGGS> timotimo: you need moar fresh air?

[11:45] <brrt> json, btw, compresses well

[11:45] *** prevost joined
[11:46] <brrt> pmurias - sure, but that's where diversity and selection are for

[11:46] <brrt> it will never hurt for us to say 'want to use perl6 for web? use @stack'

[11:47] <brrt> some people will rant and say '@stack doesn't solve my use case! what an community of $plural-expletive'

[11:47] <brrt> and... make something better

[11:47] <brrt> and that's... ok :-)

[11:47] *** virtualsue joined
[11:49] *** anaeem1_ left
[11:50] *** ghostlines left
[11:51] <dalek> rakudo/nom: 233cb0b | (Elizabeth Mattijsen)++ | src/core/ (7 files):

[11:51] <dalek> rakudo/nom: Remove *.exists

[11:51] <dalek> rakudo/nom: 

[11:51] <dalek> rakudo/nom: It has been deprecated for > 1 year

[11:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/233cb0b643

[11:51] <dalek> rakudo/nom: 217428c | (Elizabeth Mattijsen)++ | src/core/ (9 files):

[11:51] <dalek> rakudo/nom: Remove *.delete

[11:51] <dalek> rakudo/nom: 

[11:51] <dalek> rakudo/nom: It has been deprecated for > 1 year

[11:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/217428c325

[11:51] *** ghostlines joined
[11:53] <dalek> rakudo/nom: 764c981 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[11:53] <dalek> rakudo/nom: Mention removal of .exists|.delete

[11:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/764c981795

[11:53] *** bjz left
[11:54] <carlin> if you try to call .exists/.delete will the error tell you what you're supposed to use?

[11:54] <jnthn> carlin: We've had it doing that for the last year, iirc.

[11:55] <nine> brrt: for web apps, PSGI really is the way to go nowadays

[11:56] <carlin> jnthn: right, but that was the deprecation warning which is now gone

[11:57] <dalek> roast: d1326f2 | (Elizabeth Mattijsen)++ | S02-types/deprecations.t:

[11:57] <dalek> roast: Tests for deprecated features that were removed

[11:57] <dalek> roast: review: https://github.com/perl6/roast/commit/d1326f27c5

[11:58] <lizmat> carlin: no, it will just tell you you tried to call a method that does not exist

[11:58] <brrt> nine: yeah, i think so too, it'll just have to be adapted a bit

[11:59] <nine> To all: sorry for my slides not being properly HTMLized yet. What's online right now is just what I used for presenting. Didn't have enough time to clean it up.

[11:59] *** chenryn_ joined
[12:01] *** bjz joined
[12:01] <azawawi> hi #perl6

[12:01] <brrt> hi azawawi

[12:01] * azawawi reads http://perlcabal.org/syn/S17.html#Inter-Process_Communication_exposed_as_Promises_and_Supplies for the perl6 repl feature

[12:02] <timotimo> azawawi: do you know the "EventSource" js thingie?

[12:03] <azawawi> timotimo: example plz?

[12:03] *** virtualsue left
[12:04] <azawawi> timotimo: initial ansi color sequence output display are in the latest farabi6, btw

[12:04] *** bartolin left
[12:04] <timotimo> https://developer.mozilla.org/en-US/docs/Web/API/EventSource - it's nicer than polling again and again for example

[12:05] <timotimo> a much simpler way to push a stream of data from the server to the client

[12:05] <timotimo> damn, this toy i made is fun to play with m)

[12:06] <dalek> rakudo/nom: fcc04eb | (Elizabeth Mattijsen)++ | src/core/Cool.pm:

[12:06] <jnthn> :)

[12:06] <dalek> rakudo/nom: Remove ucfirst, it has been deprecated > 1 year

[12:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fcc04eb3a9

[12:06] <azawawi> timotimo: http://caniuse.com/#search=EventSource

[12:07] <azawawi> timotimo: doesnt websockets cover that part?

[12:07] <dalek> roast: 512c987 | (Elizabeth Mattijsen)++ | S02-types/deprecations.t:

[12:07] <dalek> roast: Tests for deprecated ucfirst that were removed

[12:07] <dalek> roast: review: https://github.com/perl6/roast/commit/512c9871e3

[12:09] <timotimo> yes, but you don't have websockets, do you? :)

[12:09] <azawawi> btw, why was IO::Spec changed to $*SPEC. Any reason behind that change?

[12:09] <azawawi> timotimo: trust me, websockets complicates a web app a lot

[12:10] <azawawi> timotimo: while building something, do it as ajax and then switch when nearly finished to websockets if needed

[12:10] <azawawi> timotimo: and it has its quirks here & there when cross browser support is needed

[12:11] <lizmat> azawawi: it was part of a much wider change speeding up IO and have the right attributes for objects live at the right place

[12:12] <brrt> eventsource is a 'good enough for most use cases' version of websockets 

[12:12] <brrt> and muuuuch simpler

[12:12] <timotimo> and only one direction, not two

[12:12] <azawawi> lizmat: i see

[12:12] <lizmat> by putting the IO::Spec info in $*SPEC, you can now easily change default file system semantics in a scope

[12:13] <azawawi> lizmat: cool thanks for the explanation

[12:13] <lizmat> and it should be better optimizable in the future

[12:14] <azawawi> btw, how can i profile perl 6 code under rakudo?

[12:15] <lizmat> --profile

[12:15] <lizmat> will generate an HTML file for you to peruse

[12:15] <azawawi> cool thanks

[12:16] <azawawi> im already using --doc=HTML to generate POD for currently selected code in farabi6

[12:16] <azawawi> nice i will add that option

[12:17] <azawawi> im using Farabi (Perl 5, Mojolicious) to develop farabi6 until farabi6 is capable of fully editing its own code :)

[12:17] *** Hor|zon left
[12:18] *** Guest80734 left
[12:19] <azawawi> brrt: Regarding EventSource, it is good enough until you hit the cross-browser support wall. Please see http://caniuse.com/#search=EventSource

[12:20] <dalek> rakudo-star-daily: 5e688d1 | coke++ | log/MoarVM-version.log:

[12:20] <dalek> rakudo-star-daily: today (automated commit)

[12:20] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5e688d1217

[12:21] <brrt> fair enough.

[12:21] * brrt isn't wedded to the idea :-)

[12:21] <brrt> it's just a nice inbetween solution

[12:21] <azawawi> i will try it though :)

[12:21] *** bowtie joined
[12:21] <timotimo> this rather simple animation already maxes out 1 of my cores :\

[12:21] <azawawi> that's what i like about #perl6. Always new ideas

[12:22] *** bowtie is now known as Guest76896

[12:22] <timotimo> at 25fps

[12:22] <Ven> nice

[12:22] <Ven> is it web scale?

[12:23] <azawawi> im running on an AMD FX-8150 (with only two enabled cores out of 8 available cores) for heat problems... lol

[12:23] <timotimo> m)

[12:23] <azawawi> The fan is already at 6k rpm

[12:24] * azawawi mental note next time, buy an i5...

[12:25] * masak is back from lunch

[12:25] <masak> what did I miss? did nine unveil Inline::Perl7?

[12:26] <brrt> azawawi - i advice cleaning up the fans.. that helped a lot on a machine i had at home

[12:26] <brrt> :-)

[12:26] <brrt> buy an i7 :-P

[12:27] <timotimo> jnthn: it seems like trying to profile my thingie will explodify with a segfault; rpobably because it does multithreading?

[12:28] <timotimo> it actually explodes even before it compiles my custom frame code

[12:29] <nine> masak: use v6-inline; and Perl6::MOP should be the most interesting parts

[12:29] <timotimo> this throttle mechanism looks like our "squish" supply operator

[12:30] <timotimo> i wonder if we should build a variant of squish that will also somehow plop a "squished this many samey messages" and we'd pretty much immediately have an RLE implementation

[12:33] *** ghostlines left
[12:34] <masak> brrt: thanks for your input on the "web support" bit. here's my take: a language in 2014 needs to relate *somehow* to the web. think of languages like Go or Rust. they have libraries and stacks for serving web pages/sites/apps. and that's part of what makes those languages "production ready" (to the extent they are).

[12:34] <masak> completely agree that there can be several solutions, not just one.

[12:35] <masak> but the sum of those solutions and how stable/useful they are definitely forms a part of the "production readiness" of Perl 6 IMO, at least for a certain type of people.

[12:35] <masak> I think we've seen that during the Rakudo era of Perl 6's development, that people aim for the web when they're developing things.

[12:35] *** ghostlines joined
[12:36] <dalek> nqp: e1635d7 | (Tobias Leich)++ | src/QRegex/Cursor.nqp:

[12:36] <dalek> nqp: eliminate two no-ops

[12:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e1635d792c

[12:36] <masak> brrt: re Perl 6 on the client: I'm still waiting for that. I have high hopes for pmurias++' work on getting nqp to target JavaScript.

[12:36] <brrt> i have a long story to write about the relation between go and rust, by the way

[12:37] <masak> even nqp on the client would be pretty cool, actually.

[12:37] <brrt> that would definitively have a cool side yeah :-)

[12:37] <brrt> the web is where the (wild) things are

[12:38] <pmichaud> std:  say v2013.4.5

[12:38] <camelia> std fc92e1e: OUTPUT«===SORRY!===␤Confused at /tmp/W0MHCqFo4M line 1:␤------> say v2013.⏏4.5␤    expecting any of:␤ dotty method or postfix␤        postcircumfix␤  postfix_prefix_meta_operator␤   postop␤Undeclared routine:␤     'v2013' used …»

[12:38] <pmichaud> aha

[12:38] <lizmat> :-)

[12:38] <pmichaud> looks like STD and Rakudo agree here about multi-digit version numbers

[12:38] <masak> I recognize this failure mode.

[12:38] <masak> we've encountered it before

[12:38] <brrt> then again, an ORM is for some people also a necessary thing

[12:38] <pmichaud> it's a longest-token-matching issue

[12:38] <masak> (not just earlier today)

[12:38] <masak> I bet there is an RT ticket with it somewhere

[12:39] * masak goes hunting for it

[12:39] <masak> nine: no need to apologize at all -- as soon as I found http://niner.name/talks/Inline-Perl5/content , I was totally content :P

[12:39] <pmichaud> I suspect that   v123.10   ends up with "v123" as identifier over 'v1'

[12:39] <masak> *nod*

[12:39] <pmichaud> because the grammar rule is

[12:39] <pmichaud> token version:sym<v> {

[12:39] <pmichaud>         'v' <?before \d> :: <vnum> +% '.' '+'?

[12:39] <pmichaud>     }

[12:40] <pmichaud> which means LTM stops at the ::

[12:40] <masak> https://rt.perl.org/Ticket/Display.html?id=116016

[12:40] <masak> is that one related?

[12:41] <masak> it's from 2012

[12:41] <pmichaud> yes, it looks exactly the same

[12:41] * masak merges the two tickets

[12:42] <pmichaud> I wonder why we need the <?before \d> ::  part

[12:43] <pmichaud> well, <?before \d>  is guarding against  "v*.3.4"  as a version identifier

[12:43] <pmichaud> I wonder what happens if we get rid of the '::'

[12:43] <FROGGS> and the :: commits to that token, no?

[12:43] *** Hor|zon joined
[12:43] <masak> brrt: re ORM -- some "Database" section should probably be in there

[12:43] <FROGGS> so it won't try other rules, at least in theory

[12:44] <pmichaud> no

[12:44] <pmichaud> :: commits to an alternation

[12:44] <leont_> I think I could have filled 20 minutes on TAP::Harness if had actually prepared properly. Maybe next time.

[12:44] <pmichaud> there are no alternations in the version rule, which means the '::' was intended to stop LTM

[12:44] <brrt> but are ORM's really all that relevant in our web-scale world?

[12:44] *** ibo2perl6 left
[12:45] <brrt> i think it's difficult. sqlite is probably a must-have

[12:45] <masak> brrt: that's why I said "Databases", not "ORMs" :)

[12:45] *** xenoterracide joined
[12:45] <masak> brrt: people are going to come to this page asking "will I be able to use Perl 6 for <X>?"

[12:45] <brrt> basically .. do we want a batteries-included approach to it?

[12:45] <FROGGS> pmichaud: so the :: only effects using version literals in use/need statements

[12:46] <masak> brrt: that question feels orthogonal to me.

[12:46] <FROGGS> pmichaud: but it doesn't help us when parsing a value

[12:46] <masak> brrt: the concern isn't "are all these things included?" -- it's "can I do it at all?"

[12:46] <FROGGS> because we just have many value candidates like token value:sym<version> { <version> }, but no alternation at all

[12:46] <brrt> hmm

[12:46] <nine> Speaking of ORM. I should have mentioned, that the stuff I did to make Catalyst usable can be applied to DBIx::Class as well.

[12:46] <masak> nine: ooh

[12:46] <brrt> you can do everything you want, if you're motivated enough

[12:47] <pmichaud> FROGGS: so, in use/need statements there's a need for other identifiers starting with 'v' to be chosen over this one?

[12:47] *** kaare_ left
[12:47] <nine> Especially use v6-inline and Perl5Parent

[12:47] <masak> brrt: ok, I'm talking about practically available solutions that an outsider can pick up and use, with the right instructions.

[12:47] <masak> brrt: "follow these steps and you're up and running"

[12:47] <timotimo> .o( when i said "perl6 on the client side of the web" i actually meant stuff like LibWWWPerl UserAgent, WWW::Mechanize, PhantomJS, ...)

[12:47] *** Hor|zon left
[12:48] <lizmat> leont: not even a lightning talk ?

[12:48] <masak> I'm not talking about the "here are all the pieces, this problem is theoretically solvable but no-one has done it before, you're on your own" kind of possibilities

[12:48] <FROGGS> pmichaud: the opposite... in use/need we want to parse versions when we hit a /v\d/, as I understand it

[12:48] <FROGGS> m: use v1234

[12:48] <masak> timotimo: ooh! yes, that's important, too.

[12:48] <camelia> rakudo-moar fcc04e: OUTPUT«===SORRY!===␤Could not find v1234 in any of: /home/p6eval/rakudo-inst-2/languages/perl6/lib, /home/p6eval/rakudo-inst-2/languages/perl6␤»

[12:48] <masak> timotimo: we need a different term for that than "client side", I think.

[12:48] <timotimo> probably

[12:48] <FROGGS> m: use v1234-bar

[12:48] <camelia> rakudo-moar fcc04e: OUTPUT«===SORRY!===␤Could not find v1234-bar in any of: /home/p6eval/rakudo-inst-2/languages/perl6/lib, /home/p6eval/rakudo-inst-2/languages/perl6␤»

[12:48] <pmichaud> FROGGS: how does the :: help that?

[12:48] <masak> timotimo: maybe "agent side"? :)

[12:49] <timotimo> 134136  timotimo │ but with "web support" we should do a big bunch of stuff; not only serverside either.

[12:49] <timotimo> my original message didn't mention "client side" or anything similar :)

[12:49] <FROGGS> pmichaud: it would look it down to the alternation that started to match a version, and it would not even try to match a module name

[12:49] <masak> oh, it was brrt coming to conclusions. I see :)

[12:50] <FROGGS> am I missing something essential?

[12:50] <pmichaud> FROGGS:  oh, I see.  So following use|need we need a 'v' bareword to not be parsed as a version.

[12:50] <nine> masak: I think you are spot on. A year ago I was asking for a "how do I do web dev in Perl 6?" howto. A real step by step guide of what to install, what modules to use and how to put them together to put something online

[12:50] <leont_> lizmat: lightning talk is being written now, that's how I noticed I had too much stuff

[12:51] <FROGGS> std: use v1234-bar # though I wonder why that does fail that way in std

[12:51] <camelia> std fc92e1e: OUTPUT«===SORRY!===␤Cannot locate module v1234-bar at /tmp/eKOoORPnNn line 1 (EOF):␤------> onder why that does fail that way in std⏏<EOL>␤Check failed␤FAILED 00:01 138m␤»

[12:51] <FROGGS> I *think* it should parsefail a version when :: would work correctly

[12:51] <pmichaud> in this case the :: isn't being used to fail a parse

[12:52] <pmichaud> it's being used to prioritize one alternation over another

[12:52] <lizmat> leont_++

[12:52] <FROGGS> pmichaud: the -bar in my wrongish version literal should make it fail to parse a version

[12:52] <brrt> aha i see

[12:52] <brrt> yeah then i agree timotimo :-)

[12:53] <pmichaud> FROGGS: in the case of a 'use' statement, it's never attempting to parse a version. (more)

[12:53] <pmichaud> when you tell "std" to "use v1234-bar", it's trying to locate that (and cannot)

[12:53] <pmichaud> std:  use nosuchthing;

[12:53] <camelia> std fc92e1e: OUTPUT«===SORRY!===␤Cannot locate module nosuchthing at /tmp/3wU6pecHep line 1:␤------> use nosuchthing⏏;␤Check failed␤FAILED 00:01 137m␤»

[12:54] <pmichaud> the error message there has nothing to do with versions (because we aren't parsing a version number)

[12:55] <FROGGS>     token statement_control:use {

[12:55] <FROGGS>         || <version> <?{ substr($<version>.Str,0,2) eq 'v6' }>

[12:55] <FROGGS>         || <version> <?{ substr($<version>.Str,0,2) eq 'v5' }> [

[12:55] <FROGGS> that's a stripped version from STD.pm6

[12:55] <FROGGS> though, the sequential matching does not make sense in combination with ::

[12:55] *** pepl left
[12:56] <pmichaud> "use v1234-bar" doesn't match either of those alternations

[12:56] <pmichaud> neither does "use v1234"

[12:56] <FROGGS> when there was a ::> instead of ::, then what I was saying would be correct I think :o)

[12:57] *** Hor|zon joined
[12:57] <FROGGS> pmichaud: sorry for the confusion, I had rakudo's <use> implementation in mind

[12:57] <pmichaud> well, rakudo seems to be using | alternation

[12:57] <pmichaud> we should probably switch to ||

[12:57] <FROGGS> m: use v1234

[12:57] <camelia> rakudo-moar fcc04e: OUTPUT«===SORRY!===␤Could not find v1234 in any of: /home/p6eval/rakudo-inst-2/languages/perl6/lib, /home/p6eval/rakudo-inst-2/languages/perl6␤»

[12:58] <FROGGS> m: use v1

[12:58] <camelia> rakudo-moar fcc04e: ( no output )

[12:58] *** azawawi left
[12:58] <pmichaud> I see where the problem is now.

[12:58] <pmichaud> except I don't see why STD.pm6 uses the ::

[12:58] <FROGGS> me neither

[12:59] <pmichaud> maybe fossil?

[12:59] <[Coke]> so much to do. so little motivation

[12:59] <FROGGS> [Coke]: get a cup of coffee and just start with the first task without thinking of the rest :o)

[12:59] <masak> nine: yeah, I'm really really trying to think about this from the perspective of the person who is curious about "how do I <X>, today, in Perl 6?"

[13:00] <pmichaud> STD.pm6's  <need> statement is using | alternation, though... maybe it needs to be switched to || also

[13:00] <masak> nine: and I'm inspired by html5please, which I like and have used for this kind of purpose many times.

[13:00] <FROGGS> ahh

[13:00] <pmichaud> what's the meaning of "need v5", ooc?    /me looks.

[13:01] <FROGGS> you just load v5, without importing anything... and probably without switching the slang

[13:02] *** azawawi joined
[13:03] *** brrt left
[13:03] <pmichaud> I wonder if   a better formulation would be

[13:04] <pmichaud>      <?before v<[56]> > <version>

[13:04] <pmichaud> std:  use v617;

[13:04] <camelia> std fc92e1e: OUTPUT«ok 00:01 137m␤»

[13:04] <pmichaud> heh

[13:04] <pmichaud> std: use v717;

[13:04] <FROGGS> hehe

[13:04] <camelia> std fc92e1e: OUTPUT«===SORRY!===␤Cannot locate module v717 at /tmp/TYunYMKueo line 1:␤------> use v717⏏;␤Check failed␤FAILED 00:01 137m␤»

[13:05] <FROGGS> std: no v7

[13:05] <camelia> std fc92e1e: OUTPUT«ok 00:01 138m␤»

[13:05] <FROGGS> \o/

[13:05] <mauke> std: use v6v6;

[13:05] <camelia> std fc92e1e: OUTPUT«===SORRY!===␤Whitespace is required between alphanumeric tokens at /tmp/zMdoyRtdSb line 1:␤------> use v6⏏v6;␤Confused at /tmp/zMdoyRtdSb line 1:␤------> use v6⏏v6;␤    expecting any of:␤ fee…»

[13:05] <azawawi> lizmat: ping

[13:05] * mauke deletes v6v6.pm

[13:06] <pmichaud> okay.  I think using the '::' as LTM control in version is going the wrong way ish... let me see if I can refactor to fix it.

[13:07] *** chenryn_ left
[13:08] <lizmat> azawawi: pong

[13:08] <azawawi> lizmat: the current deprecated messages are great for non-server processes. I did not see farabi6 deprecation warnings until the server died. When you Ctrl-C, you dont get any deprecation messages on a server process. Only when it dies or segfaults

[13:08] *** brrt joined
[13:09] <leont_> Does anyone know the resolution of the projector?

[13:09] <nine> leont_: full hd

[13:10] <azawawi> lizmat: is it by design shown on END { }

[13:10] <leont_> If my laptop doesn't screw up, I might not have to shorten my lines then :-p

[13:10] <timotimo> oh, pepl is not on irc any more, even though i perhaps wanted to reserve a second slot for a lightning talk

[13:11] <lizmat> if you want a Control-c to also show deprecations, and handle all END processing, this will work on moar:

[13:11] <lizmat> signal(SIGINT).tap( {die} )

[13:11] <lizmat> it will tap the Control-C and change it into a normal die()

[13:11] <nine> leont_: and 100 % of the screen area is actually usable. That's quite a luxury.

[13:11] <lizmat> this causing END processing, thus showing the deprecation messages

[13:11] <leont_> You mean unlike Sofia? ;-)

[13:12] <pmichaud> my refactor seems to work... spectesting now

[13:12] <pmichaud> should I patch STD.pm6 also?  

[13:12] <leont_> If signals are delayed like in perl5 (I assume they are), tapping them can cause serious delays to the point of it not working if inside a piece of C code

[13:13] <lizmat> yup, YMMV  :-)

[13:13] <timotimo> FROGGS: did jnthn finish his work? :)

[13:13] <FROGGS> pmichaud: TimToady would be happy I guess :o)

[13:13] <timotimo> i can't sneak any peeks at his monitor any more now :(

[13:13] <lizmat> it really depends on how libuv does it underneath

[13:13] <pmichaud> FROGGS: I'd have to figure out how to spectest STD.pm6

[13:13] <FROGGS> timotimo: he's not hacking anymore for a while now... but I can't tell :o)

[13:13] <timotimo> OK

[13:14] <FROGGS> pmichaud: I have now idea if that's possible at all

[13:14] <azawawi> lizmat: thanks for info. i will try it now. im using MoarVM for development

[13:14] <timotimo> ooooh did these people just bring gratuitous amounts of candy? :D

[13:15] <pmichaud> FROGGS: looks like "make snaptest"

[13:16] *** virtualsue joined
[13:17] <Ven> .tell masak http://www.cs.cmu.edu/~aldrich/papers/ecoop14-tsls.pdf if you havn't read it

[13:17] <yoleaux> Ven: I'll pass your message to masak.

[13:18] <Ven> or anybody interested in composable reader macros.

[13:18] * masak is right here :)

[13:18] <yoleaux> 13:17Z <Ven> masak: http://www.cs.cmu.edu/~aldrich/papers/ecoop14-tsls.pdf if you havn't read it

[13:18] <dalek> nqp-js: 9de723d | (Pawel Murias)++ | t/nqp/53-knowhow.t:

[13:18] <dalek> nqp-js: Fix test to check for that the knowhow name is correct.

[13:18] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/9de723dde7

[13:18] <masak> Ven: thanks :)

[13:18] <Ven> well, I wasn't sure :)

[13:18] <timotimo> yes! they did!

[13:18] <masak> Ven: oh yes, I've seen this one before.

[13:19] <masak> Ven: I was intrigued by it, and I think we have some learnings for slangs in there.

[13:19] <Ven> masak: have you seen sugarJ and others?

[13:19] <masak> Ven: notably, they manage to combine MOP and slangs in interesting ways.

[13:19] <masak> Ven: have not seen sugarJ.

[13:19] <Ven> oh and I realized I never talked about idris/agda-like "patterns"... Which are interested because they are in a somewhat more disciplined style (since the language itself is *VERY* strongly typed)

[13:22] *** guru joined
[13:22] <masak> among problems that I don't have: a lack of source material and things to process. :)

[13:22] *** guru is now known as Guest94293

[13:22] *** Guest94293 left
[13:23] *** xenoterracide left
[13:23] <masak> anyway, I think the central idea of "type-specific language" in that paper is very much a kind of distinctiveness something that Perl 6 should add to its own.

[13:24] *** ajr joined
[13:24] <colomon> I ran another smoke test after lizmat++ removed .exists and .delete, and Adventure::Engine, IO::Socket::SSL, IoC (???), and OpenSSL all started failing, presumably because of that change.

[13:24] *** ajr is now known as Guest59856

[13:24] *** Guest59856 is now known as ajr_

[13:25] <BSc_tadzik> Inversion of Control, a Bread::Board like thingy

[13:25] <BSc_tadzik> pretty nice

[13:26] <japhb> Conjecture: perl6-bench isn't perfect, but it's good enough for people to use and add tests as desired; what we really need now is serious concurrency stress testing, with the goal of trying to find relatively small programs that can trigger segfault/crash/incorrect results/etc. on r-j or r-m.

[13:26] <japhb> Thoughts on said conjecture?

[13:26] <moritz> what's the relation between stress testing and perl6-bench?

[13:26] <colomon> seems like … what moritz++ said

[13:27] <colomon> (two correct thoughts that I don't understand the relationship between)

[13:27] <japhb> Oh, sorry.  "my time"

[13:27] <moritz> oh

[13:28] <moritz> +1

[13:28] <japhb> Meaning, it seems more valuable for me to switch my hacking focus.

[13:30] *** kaleem left
[13:34] <Ven> m: my $a = 5; say 9x$a

[13:34] <camelia> rakudo-moar fcc04e: OUTPUT«(timeout)»

[13:36] <moritz> Ven: need whitespace around alphanumeric ops

[13:36] <Ven> m: my $a = 5; say 9 x$a

[13:36] <camelia> rakudo-moar fcc04e: OUTPUT«99999␤»

[13:36] <Ven> moritz: some whitespace :)

[13:37] *** virtualsue left
[13:38] *** pepl joined
[13:39] *** Hor|zon left
[13:39] <masak> colomon: looking at Adventure::Engine now.

[13:39] <moritz> golven!

[13:39] <masak> golven?

[13:40] <colomon> japhb: +1 

[13:40] <masak> yup, three instances of .delete

[13:40] <moritz> masak: the German word for "to golf" is "golfen", so Ven does golven

[13:41] <moritz> (actually "Golf spielen", but "golfen" coloquially is OK)

[13:41] *** Hor|zon joined
[13:41] <masak> aha :)

[13:42] <masak> in Swedish, "golven" just means "the floors"... so I was confused. :)

[13:43] *** kaleem joined
[13:44] <masak> colomon: fix'd. https://github.com/masak/Adventure-Engine/commit/5bb5425a2db05ba608a54905ce7747cf559ac4e8

[13:45] *** cmac joined
[13:45] <colomon> masak++

[13:45] *** anaeem1 joined
[13:45] *** anaeem1 left
[13:46] *** cmac left
[13:56] *** PotatoGim^Home joined
[13:57] *** kaleem left
[13:57] *** ajr_ left
[13:58] <Ven> masak: I'm pretty good at doing the floors, as well

[13:58] <Ven> (doing as in, cleaning, I guess?)

[13:58] <masak> :P

[13:58] <masak> lizmat++ # haven't really paid attention to the S16 editing, but I'm reading it now and it looks gorgeous

[13:59] *** [Sno] left
[13:59] <Ven> lizmat++ # reasons

[14:00] *** ajr_ joined
[14:01] *** treehug88 joined
[14:03] <dalek> rakudo/nom: fd017a0 | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[14:03] <dalek> rakudo/nom: Remove KeySet/KeyBag, deprecated > 1 year ago

[14:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fd017a0013

[14:04] <Ven> profiling my game of life o/

[14:04] * masak .oO( aren't we all ) :P

[14:04] <lizmat> colomon: yuck

[14:05] <mephinet> hi! first time looking at perl6, using http://perl6maven.com/tutorial/

[14:05] *** treehug88 left
[14:05] <mephinet> one thing I can't figure out (at first sight at least) - is the example in http://perl6maven.com/tutorial/perl6-string-functions-substr

[14:05] <masak> mephinet: welcome!

[14:05] <mephinet> what does $z = substr $s, 4, *-11; mein?

[14:05] <mephinet> ^ mean

[14:05] * colomon launches another smoke test

[14:05] <masak> mephinet: "substring of $s, from position 4 to position 11 from the end"

[14:06] <mephinet> how is *-11 parsed?

[14:06] <masak> mephinet: `*-11` means "whatever minus 11"

[14:06] <mephinet> why not just -11

[14:06] <masak> mephinet: and the "whatever" bit depends on context

[14:06] <FROGGS> mephinet: * is magically "converted" to the amount of chars of the string

[14:06] <Ven> welcome mephinet ! :)

[14:06] <masak> mephinet: because strings don't have negative indices :)

[14:06] <lizmat> colomon: OpenSSL installs fine for me

[14:06] <colomon> lizmat: hmm.

[14:06] <colomon> we still have occasional transiant failures, could have been that, I guess.

[14:07] <masak> mephinet: a more serious answer is that Perl 5 does it that way, and it's turned out to have some worrisome/unfortunate corner cases.

[14:07] <mephinet> masak, FROGGS: thanks for the explanation...

[14:07] <Ven> (it's just a closuuure)

[14:07] <masak> mephinet: Python also uses negative numbers for indexing from the end.

[14:07] <mephinet> see, that's why it presents as WhateverCode.new()

[14:07] <masak> mephinet: it's subtle, but the "discontinuity" around 0 is problematic.

[14:07] <mephinet> masak: yeah, I know this from Python, too

[14:08] <mephinet> thanks, guys, I'll keep on reading in the direction of closures...

[14:08] <jnthn> m: my $x = *-11; say $x(53) # isolated example

[14:08] <camelia> rakudo-moar fcc04e: OUTPUT«42␤»

[14:09] <FROGGS> mephinet: have fun :o)

[14:10] <mephinet> thanks, jnthn! (you're sitting five meters to my left)

[14:10] <jnthn> oh :)

[14:10] <FROGGS> *g*

[14:10] <jnthn> Small world... :)

[14:10] <Ven> and you're sitting five meters to mine, mephinet 

[14:10] <FROGGS> <-- is really grinning *g*

[14:10] <Ven> same here :-)

[14:10] <jnthn> netcra^Wjnthn confirms it!

[14:10] <mauke> I think I can see you

[14:11] <FROGGS> ohh, 10m already makes for a middle sized world

[14:11] <masak> especially on a logarithmic scale

[14:11] *** ajr_ left
[14:12] *** ajr_ joined
[14:14] *** Timbus joined
[14:14] *** fhelmberger joined
[14:14] <dalek> nqp-js: 93f12ae | (Pawel Murias)++ | src/vm/js/ (4 files):

[14:14] <dalek> nqp-js: Deserialize a KnowHOWREPR.

[14:14] <dalek> nqp-js: 

[14:14] <dalek> nqp-js: Make .HOW.name work on knowhows.

[14:14] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/93f12ae14c

[14:14] *** sunnavy_ left
[14:15] <Ven> Reify is responsible for 1/4 of my GoL run

[14:15] <Ven> uh-h

[14:15] <Ven> pmurias: do you already have containers implemented?

[14:15] <timotimo> japhb: i already forgot what you look like :o

[14:15] <FROGGS> Ven: that'll hopefully change in one direction or the other :o)

[14:16] <Ven> I hope so. It's just .map I think

[14:16] <timotimo> japhb: you're not staying for the hackathon?

[14:17] *** brrt left
[14:18] <Ven> sorry 30% of it is .reify. 23% on ListIter, 7% on mapiter

[14:18] <Ven> +4% gimme +another reify 4% hahah

[14:18] *** fhelmberger left
[14:19] <dalek> roast: 39b4869 | (Elizabeth Mattijsen)++ | S02-types/deprecations.t:

[14:19] <dalek> roast: Remove test for obsolete deprecations

[14:19] <dalek> roast: review: https://github.com/perl6/roast/commit/39b48693f8

[14:19] <jnthn> $dom.process: PlaneSettingPlan, 1, *.choose-seat('2A', 'jnthn');$dom.process: PlaneSettingPlan, 1, *.choose-seat('2A', 'jnthn');

[14:19] * colomon gave up on building Rakudo on the PowerPC G3 iMac after about 70 hours of "stage parse"

[14:19] <jnthn> oops

[14:20] <FROGGS> hehe

[14:20] * jnthn should not lean on the paste button :)

[14:20] <FROGGS> colomon: you need a faster hard disk when you only have 256MB RAM :o)

[14:21] <colomon> FROGGS: are you implying I need to switch the 2001 iMac to using an SSD?  ;)

[14:22] * colomon is actually impressed at how well the machine runs when it's not swapping madly.

[14:22] <FROGGS> colomon: *g*

[14:22] <FROGGS> I have no idea :o)

[14:22] <BSc_tadzik> back then computers were slower, but the software was faster :)

[14:23] <dalek> Inline-Perl5: e39f4c9 | nine++ | / (2 files):

[14:23] <dalek> Inline-Perl5: Allow subclassing an existing P5 object.

[14:23] <dalek> Inline-Perl5: 

[14:23] <dalek> Inline-Perl5: Sometimes we have already an instance of the P5 class (e.g. a Catalyst

[14:23] <dalek> Inline-Perl5: controller) that we want to subclass in P6. So allow passing the parent

[14:23] <dalek> Inline-Perl5: to the constructor instead of insisting in creating a new object there.

[14:23] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/e39f4c9271

[14:23] <nine> Ah, fells good to be committing again :)

[14:23] *** sunnavy joined
[14:23] <timotimo> nine: i hear you have the t440p

[14:23] <timotimo> it has a discrete graphics card in it, doesn't it?

[14:24] <nine> timotimo: not mine. I made sure to not have to suffer nvidia.

[14:24] <nine> timotimo: IOW it's optional

[14:25] *** chenryn joined
[14:25] <timotimo> ah

[14:25] *** Ven left
[14:28] *** chenryn left
[14:30] *** JimmyZ joined
[14:35] *** pyrimidine joined
[14:36] *** abraxxa left
[14:37] <FROGGS> pmichaud: FYI, the version parsing oddness is identical across backends

[14:42] <dalek> Inline-Perl5: bb47fec | nine++ | / (2 files):

[14:42] <dalek> Inline-Perl5: Support can on wrapped Perl 6 objects

[14:42] <dalek> Inline-Perl5: 

[14:42] <dalek> Inline-Perl5: This allows to call $p6obj->can in Perl 5 and get a sensible result.

[14:42] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/bb47fecc4a

[14:43] *** treehug88 joined
[14:43] *** bartolin joined
[14:43] *** chenryn joined
[14:48] *** chenryn left
[14:50] <FROGGS> jnthn: okay, the grammar candidates weirdness I mentioned earlier is fixed indeed: https://github.com/perl6/nqp/commit/5015755ac33c10ccac84b0d7e17edcbd82c6f312

[14:51] <FROGGS> so, the version oddness is just back to normal oddness

[14:51] *** chenryn joined
[14:52] <jnthn> phew...ish :)

[14:52] *** anaeem1 joined
[14:54] <dalek> Inline-Perl5: e30e685 | nine++ | / (3 files):

[14:54] <dalek> Inline-Perl5: Allow modules loaded by Perl 5 to be written in Perl 6.

[14:54] <dalek> Inline-Perl5: 

[14:54] <dalek> Inline-Perl5: Support use v6-inline; in Perl 5 code to pass a module's code

[14:54] <dalek> Inline-Perl5: back to Perl 6 which then creates a Perl 6 module of it.

[14:54] <dalek> Inline-Perl5: 

[14:54] <dalek> Inline-Perl5: This may improve use cases where a Perl 5 framework autoloads modules

[14:54] <dalek> Inline-Perl5: that may now be written in Perl 6.

[14:54] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/e30e6850a4

[14:54] <dalek> Inline-Perl5: 951c776 | nine++ | / (3 files):

[14:54] <dalek> Inline-Perl5: Fix instancing classes created by v6-inline;

[14:54] <dalek> Inline-Perl5: 

[14:54] <dalek> Inline-Perl5: Needs current Rakudo HEAD.

[14:54] <dalek> Inline-Perl5: Thanks to jnthn++ for implementing GLOBAL::

[14:54] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/951c776aac

[14:56] *** Ven joined
[14:56] *** cognome left
[14:56] <timotimo> jnthn: oh btw, the AUTOGEN thing might actually not be NativeCall's fault

[14:56] <timotimo> which confuses me even more

[14:56] <jnthn> oh...

[14:57] <jnthn> timotimo: Where're you getting it?

[14:57] <timotimo> i shall investigate it properly

[14:57] *** cognome joined
[14:57] <Ven> okayy, so my perl Configure.pl --gen-moar did not gen moar

[14:58] <FROGGS> Ven: so it thinks it is up-to-date

[14:58] <FROGGS> Ven: try unlink install/bin/moar

[14:58] <Ven> it probably does... but it's a 09.14...

[14:59] *** anaeem1 left
[14:59] <timotimo> so i'm trying to call $cairo_context.fill(1); (which is not supposed to work, as fill would only accept no arguments or a named argument "preserve"

[14:59] <timotimo> Cannot call 'AUTOGEN'; none of these signatures match:

[14:59] <timotimo> :(Cairo::Context: *%_)

[14:59] <timotimo> :(Cairo::Context: Any :preserve($preserve)!, *%_)

[15:00] <timotimo> now i've tried it outside the EVALd code and it still says "AUTOGEN"

[15:00] <Ven> %)

[15:00] *** ecocode left
[15:00] <timotimo> maybe a precompilation issue?!

[15:00] <jnthn> That'd be kinda odd...multis are quite common.

[15:01] <timotimo> aye. there's no multi method in GTK-Simple, so i will have to make some up

[15:01] <jnthn> Imore meant "in lots of other modules"

[15:01] *** cognome left
[15:02] <jnthn> And probably woulda seen it come up already 

[15:02] <jnthn> So yeah, something...unusual.

[15:02] <timotimo> well, now i'm using -I ../cairo/lib and it gives me the method name

[15:03] <timotimo> er... actually ... a different error though

[15:04] <timotimo> aye, with -I ../blah/lib i get Cannot call 'stroke'; none of these signatures match:

[15:05] <timotimo> without -I blah/lib i do indeed get AUTOGEN

[15:06] <FROGGS> pmichaud: btw:

[15:06] <FROGGS> 'v' <?[\d]>   $<vstr>=[<vnum>+ % '.' '+'?] # works for v1, not for v12

[15:06] <FROGGS> 'v' <?[0..9]> $<vstr>=[<vnum>+ % '.' '+'?] # works for v12, not for v1

[15:07] <pmichaud> FROGGS: interesting.  There's clearly a problem with Rakudo's current implementation of LTM and zero-width assertions, I think

[15:07] *** anaeem1_ joined
[15:07] *** chenryn left
[15:07] <pmichaud> 'v' $vstr=[<vnum>+ % '.' '+'?]       # works for v1 and v12

[15:08] <pmichaud> but also allows v*.3.7

[15:08] <mephinet> say :r ;

[15:08] <mephinet> makes my perl6 (rakudo) segfault. Something to report? Or rather something to simply not do?

[15:08] <FROGGS> mephinet: how recent is your rakudo?

[15:08] <JimmyZ> m: say :r

[15:09] <mephinet> This is perl6 version 2014.09 built on parrot 6.8.0 revision 0

[15:09] <pmichaud> 'v' <![*]> $vstr=[<vnum>+ % '.' '+'?]       # should do _exactly_ the same as above for v1 and v12, but doesn't.

[15:09] <camelia> rakudo-moar fcc04e: OUTPUT«(timeout)»

[15:09] <FROGGS> perl6-m -e 'say :r ;'

[15:09] <FROGGS> Unexpected named parameter 'r' passed

[15:09] <FROGGS> mephinet: that works for me...

[15:10] <jnthn> Same for me

[15:10] <jnthn> And REPL doesn't explode either

[15:10] <jnthn> Oh...but we're trying it on MoarVM

[15:10] <pmichaud> note that rakudo on parrot's repl is is broken

[15:11] <FROGGS> he's running a script (I sit next to him luckily)

[15:11] <pmichaud> okay then, that's not it :)

[15:12] <mephinet> code to reproduce: http://paste.scsys.co.uk/429141

[15:13] <mephinet> works for FROGGS, I'll just live with it for now...

[15:13] <jnthn> Works here too, fwiw

[15:14] <pmichaud> I think I have a parrot build available.. just a sec

[15:15] *** chenryn joined
[15:15] <pmichaud> I get the segfault.

[15:15] <pmichaud> (in parrot)

[15:16] *** [Sno] joined
[15:16] <FROGGS> yeah, I saw it too right now, though that's not a parrot debug build

[15:17] <pmurias> Ven: re containers, not yet. NQP doesn't use containers

[15:18] <Ven> pmurias: oh right. you only have :=

[15:18] <Ven> pmurias: ... do you know how you're gonna do it?

[15:19] *** Hor|zon left
[15:19] *** chenryn left
[15:20] <pmurias> the only solution I can think of is having a container object

[15:21] *** PotatoGim^Home left
[15:21] * mephinet is rebuilding parrot

[15:22] *** ajr_ left
[15:22] <timotimo> .o( or get MoarVM instead if you can )

[15:22] *** cognome joined
[15:22] <jnthn> mephinet: You might find Moar a faster/more stable experience...

[15:22] <jnthn> pmurias: Well, every other backend does that way too :)

[15:23] <Ven> pmurias: right. yes :(

[15:23] <pmichaud> http://paste.scsys.co.uk/429142

[15:23] <pmichaud> golfed

[15:23] *** guru joined
[15:24] <pmichaud> that gives me a segfault

[15:24] <FROGGS> Program received signal SIGSEGV, Segmentation fault.

[15:24] <FROGGS> 0x00007ffff2c0d767 in find_in_cache (interp=interp@entry=0x60f050, cache=0xb936320, capture=capture@entry=0xb94a930, num_args=num_args@entry=0) at multi_dispatch.c:71

[15:24] <FROGGS> 71	                return cache->arity_caches[num_args - 1].results[i];

[15:24] *** guru is now known as Guest83521

[15:24] *** Guest83521 is now known as ajr_

[15:24] <timotimo> perl6-m --ll-exception -e 'use NativeCall; sub gtk_source_view_new() returns OpaquePointer is native('gtksourceview-3.0') {*}; say gtk_source_view_new()'

[15:24] <timotimo> Cannot invoke null object

[15:24] *** Hor|zon joined
[15:24] <timotimo> it seems like the exception comes from inside the world

[15:25] <timotimo> inside finish_code_object

[15:25] <mephinet> timotimo, jnthn:  will try moarvm too, in the evening (unless our dinner prohibits further hacking)

[15:25] <timotimo> so it's using compile_in_context somehow? o_O

[15:27] <jnthn> timotimo: Maybe it's the trait?

[15:28] <jnthn> timotimo: but no idea why it'd fail...

[15:28] <timotimo> http://paste.scsys.co.uk/429143

[15:28] <Ven> Ooh.

[15:28] <Ven> I just realized LiveScript actually has something like perl6's junctions!

[15:29] <Ven> and it's awful.

[15:29] <jnthn> timotimo: Yeah, it's applying the trait at the time

[15:29] <timotimo> ooh the NSA

[15:29] <timotimo> we gotta beat that

[15:30] *** chenryn joined
[15:30] *** Mouq left
[15:33] *** colomon left
[15:33] <jnthn> oh, hah... :)

[15:34] <timotimo> um

[15:34] <timotimo> yeah

[15:34] <Ven> heh.

[15:34] <pmurias> Ven: I feel containers are something that will need to be optimized at a higher level static analysis pass

[15:34] <timotimo> it's not so clever to have the single-quoted string end in the middle of the -e

[15:34] * Ven wants to write `my @a{Months; 1..28}` :DDD

[15:34] <timotimo> Cannot locate native library 'gtksourceview-3.0'

[15:34] <timotimo> that's what i get now

[15:35] <timotimo> how do i tell "is native" about libgtksourceview-3.0.so.0?

[15:35] <pmurias> Ven: link for livescript junctions?

[15:35] <timotimo> without having .so in there?

[15:35] <Ven> pmurias: it's ... not really documented. it's under the match experimental feature

[15:35] <timotimo> oh?

[15:35] <Ven> pmurias: basically, you can do `(f and g) args`

[15:35] <Ven> or `(f or g) args`

[15:36] *** ghostlines left
[15:36] <timotimo> one could say we *are* divining the concept of eagerness

[15:37] <Ven> `sink all hyper lazy silo {}` # Valid Perl6™

[15:39] <nine> Good: I know where the segfault shown in my talk comes from and I have a trivial fix for it.

[15:39] <timotimo> so all sink hyper lazy given silo?

[15:39] <lizmat> nine++

[15:39] <Ven> oh :D

[15:39] <nine> Bad: I fail to write a test for this :/ It should always fail, but it seems, sometimes Perl 5 copes with it.

[15:39] <Ven> nine++

[15:39] <timotimo> what cool thing did nine end up doing this time?

[15:40] <timotimo> not saying he doesn't deserve praise anyway

[15:41] <Ven> .o( we actually just want him to maintain our perl 6 catalyst applications )

[15:41] <timotimo> %)

[15:42] <timotimo> i'll suspend my laptop now

[15:42] *** FROGGS left
[15:43] <mauke> I,I "strictly lazy"

[15:43] <Ven> okay, dinner time, but the git didn't finish

[15:43] <Ven> sigh.

[15:43] *** Ven left
[15:43] <chenryn> where is the latest perl6-bench result?

[15:45] *** zakharyas left
[15:46] *** leont_ left
[15:47] *** JimmyZ left
[15:48] *** mauke left
[15:49] *** lizmat left
[15:50] *** erkan left
[15:51] <[Coke]> the parrot build is hosed on the daily run.

[15:51] <[Coke]> it's been stuck in stage parse.

[15:51] <[Coke]> er, stage optimize, sorry

[15:52] *** erkan joined
[15:52] *** erkan left
[15:52] *** erkan joined
[15:52] <[Coke]> according to htop, that ./perl6-p command has been running for nearly 4 hours.

[15:53] *** Hor|zon left
[15:53] *** woolfy left
[15:56] *** anaeem1_ left
[16:07] *** Hor|zon joined
[16:07] <dalek> perl6-roast-data: f80f98e | coke++ | / (4 files):

[16:07] <dalek> perl6-roast-data: today (automated commit)

[16:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f80f98e591

[16:16] <pmurias> does it make sense for me to work on a HACK or a LHF (low hanging fruit) docs for nqp-js?

[16:17] <bartolin> [Coke]: I had the same problem (parrot not building) since five days: https://github.com/usev6/perl6-roast-data/blob/master/perl6_pass_rates.csv

[16:18] <bartolin> [Coke]: But I'm building with --gen-parrot=master since only that builds on freebsd. I hoped the problem would disappear when this PR is merged: https://github.com/rakudo/rakudo/pull/320

[16:18] *** leont_ joined
[16:19] *** pepl left
[16:19] *** rurban1 joined
[16:19] *** Ven joined
[16:19] *** dwarring left
[16:20] <bartolin> [Coke]: but I didn't look closer yet

[16:20] *** rurban left
[16:20] *** Ven_ joined
[16:23] *** Mso150 joined
[16:23] *** rurban1 left
[16:24] *** Ven left
[16:35] <japhb> chenryn: If you look in the irclog, you can find some perl6-bench urls posted by timotimo, which I think are the most recent publicly posted results.

[16:36] <Ven_> pmurias: what would be the next thing a currently-outsider could do for nqp-js?

[16:36] *** Hor|zon left
[16:36] <Ven_> pmurias: (maybe something specific from the TODO)

[16:36] <japhb> chenryn: We should have something do runs daily and plot the results in arewefastyet form (which is what I designed the history function of perl6-bench for), but right now I don't think anyone has resources they can dedicate to that task.  :-(

[16:41] <chenryn> well, how did timotimo determine whether to bench or not in one day? for weekly? start release? or just "seem this commit has a large improve">

[16:46] <japhb> timotimo: Not to speak for him, but the most common thing people do is "every release, plus nom/HEAD as of the current date", and people are more likely to do the nom/HEAD runs at the end of a day of performance hacking, or when there's a reasonable question about whether an optimization for one thing makes other tests worse.

[16:46] <japhb> Er, chenryn: Not to speak for timotimo, ...

[16:47] <japhb> I'd love to have daily or per-commit runs, but ENOHARDWARE

[16:47] *** Hor|zon joined
[16:47] * japhb wanders off to dinner

[16:47] <japhb> &

[16:48] <Ven_> same for us I guess then

[16:52] *** Ven_ left
[16:54] *** pmurias left
[17:05] *** Hor|zon left
[17:13] *** ajr_ left
[17:15] *** guru joined
[17:15] *** guru is now known as ajr_

[17:16] *** molaf joined
[17:18] *** pecastro left
[17:21] *** ajr_ left
[17:23] *** guru joined
[17:23] *** guru left
[17:24] *** guru joined
[17:25] *** guru is now known as Guest30209

[17:26] *** Guest30209 is now known as ajr_

[17:28] *** Hor|zon joined
[17:31] *** ajr_ left
[17:32] *** ajr joined
[17:32] *** Hor|zon left
[17:32] *** ajr left
[17:33] *** leont_ left
[17:33] *** kaleem joined
[17:33] *** ajr joined
[17:34] *** ajr is now known as Guest55062

[17:35] *** Guest55062 is now known as ajr_

[17:42] *** ajr_ left
[17:46] *** kaleem left
[17:48] *** cognome left
[17:51] *** molaf left
[17:52] *** gfldex joined
[17:53] *** chenryn left
[17:54] *** cognome joined
[18:01] *** xfix is now known as notfix

[18:05] *** brrt joined
[18:10] *** muraiki left
[18:11] *** muraiki joined
[18:14] *** kaare_ joined
[18:14] *** fhelmberger joined
[18:15] *** [particle] left
[18:18] *** ghostlines joined
[18:18] *** bartolin left
[18:18] *** ghostlines left
[18:19] *** fhelmberger left
[18:19] *** ghostlines joined
[18:23] *** guru joined
[18:23] *** guru is now known as Guest54387

[18:23] *** Guest54387 is now known as ajr_

[18:24] *** rhr joined
[18:25] *** rindolf left
[18:28] *** chipotle joined
[18:39] *** ghostlines left
[18:41] *** brrt left
[18:42] *** rindolf joined
[18:44] *** chipotle left
[18:45] *** molaf joined
[18:45] *** treehug8_ joined
[18:46] *** PotatoGim^Home joined
[18:48] *** treehug88 left
[18:51] *** jack_rabbit joined
[18:55] *** kaare_ left
[19:01] *** brrt joined
[19:04] *** Mso150 left
[19:08] *** kjs_ left
[19:12] *** darutoko left
[19:22] *** PotatoGim^Home left
[19:24] *** beastd joined
[19:28] *** Hor|zon joined
[19:29] *** prevost left
[19:30] *** colomon joined
[19:31] *** immortal joined
[19:31] *** immortal left
[19:31] *** immortal joined
[19:33] *** Hor|zon left
[19:33] *** erkan left
[19:34] *** _slade_ joined
[19:50] *** [particle] joined
[19:58] *** Hor|zon joined
[20:03] *** anaeem1 joined
[20:04] *** Hor|zon left
[20:04] *** isBEKaml joined
[20:08] <azawawi> farabi6 with ANSI colors output pane support http://img.vim-cn.com/6b/55f3f2a04aec25a1eb50818fe641a36e419766.png

[20:13] <[Coke]> man, it takes forever just to delete directories on host08.

[20:13] <[Coke]> wonder if there -is- some strange IO config regarding disk access.

[20:15] *** rmgk_ joined
[20:15] *** rmgk left
[20:15] *** rmgk_ is now known as rmgk

[20:16] *** isBEKaml left
[20:17] *** Hor|zon joined
[20:18] <timotimo> http://t.h8.lv/p6bench/2014-10-10-huge_history.html

[20:18] <timotimo> this contains almost all of 2014 for rakudo-parrot, rakudo-moar and a few bits of rakudo-moar-jit

[20:19] <moritz> [Coke]: non-cached IO is very slow, yes :(

[20:22] *** FROGGS joined
[20:23] *** gtodd joined
[20:23] *** Hor|zon left
[20:23] * azawawi wonders how to generate a p6doc index

[20:25] <itz> p6doc-index build

[20:25] <itz> I think the p6doc -f lookup is currently broken .. It did work a few weeks back

[20:26] * itz is intending to look at it RSN

[20:27] <timotimo> hoelzro: did you know you can have a "sub MAIN_HELPER($retval) is export { }" in your Subcommander module and replace the whole logic of finding nameds vs positionals and generating the usage?

[20:28] <azawawi> itz: i noticed that and the index file is an empty hash

[20:28] <itz> I was getting the index populated correctly

[20:30] <itz> (under rakudobrew .. p6doc-index list returns results correctly)

[20:32] * moritz just learned about the   open 0; print <0>  quine trick in p5

[20:35] *** lizmat joined
[20:40] *** muraiki left
[20:41] <gtodd> moritz: thanks to APW ?

[20:42] <moritz> gtodd: thanks to reddit

[20:42] <pyrimidine> azawawi: I could easily seeing farabi6 being extendable to lots of cool things; e.g. ipython notebook

[20:43] *** brrt left
[20:43] *** Mso150 joined
[20:44] *** kjs_ joined
[20:44] <pyrimidine> I should say: similar to ipython notebook

[20:44] *** chipotle joined
[20:44] <azawawi> pyrimidine: it is going into that direction. May later #PDL integration :)

[20:45] <pyrimidine> azawawi: Nice!

[20:47] <[Coke]> is host08 a virtual box?

[20:49] *** Hor|zon joined
[20:49] <azawawi> perl6: my @dirs = IO::Spec.splitdir($*EXECUTABLE);

[20:50] <azawawi> std: my @dirs = IO::Spec.splitdir($*EXECUTABLE);

[20:50] <camelia> rakudo-moar fd017a: ( no output )

[20:50] <camelia> ..rakudo-parrot fd017a: OUTPUT«(timeout)»

[20:50] <camelia> std fc92e1e: OUTPUT«===SORRY!===␤Undeclared name:␤    'IO::Spec' used at line 1␤Check failed␤FAILED 00:01 141m␤»

[20:50] <azawawi> moar: my @dirs = IO::Spec.splitdir($*EXECUTABLE);

[20:50] *** grondilu left
[20:50] <azawawi> rakudo-moar: my @dirs = IO::Spec.splitdir($*EXECUTABLE);

[20:50] <camelia> rakudo-moar fd017a: ( no output )

[20:51] *** Ven joined
[20:54] *** Hor|zon left
[20:56] <Ven> \o

[20:56] *** hoelzro_phone joined
[20:57] <hoelzro_phone> timotimo: I did know that, but I wanted to make sure that Subcommander was not rakudo specific, and I think I wanted features that MAIN_HELPER didn't provide

[20:58] *** kurahaupo left
[20:59] <azawawi> lizmat: ping

[20:59] <itz> azawawi: probably still at AWP dinner

[21:00] <itz> ^ APW

[21:00] *** _slade_ left
[21:01] <lizmat> itz azawawi Ven o/

[21:01] <Ven> \o

[21:01] <lizmat> back in my room, but about to go to bed

[21:01] <Ven> no, she wasn't

[21:01] <lizmat> azawawi pong

[21:02] <Ven> hehe actually, timo got back to the hotel, so I needed to run back

[21:02] <Ven> because I forgot my own key..

[21:03] *** Mso150 left
[21:04] <azawawi> lizmat: I was wondering why un-deprecate a deprecated thing and then i read the commit comment https://github.com/rakudo/rakudo/commit/c35341ea464b53f166f87c75cfd37d3aa44ad488  :)

[21:05] <azawawi> lizmat: i build rakudo a lot and was trying the Ctrl-C trap solution and suddenly perl6 didnt complain lol

[21:06] <azawawi> lizmat: so not a big deal. Sorry for the ping.

[21:07] *** denis_boyun joined
[21:12] *** hoelzro_phone left
[21:13] *** Mso150 joined
[21:14] <lizmat> sleep&

[21:17] *** rurban joined
[21:19] *** ajr_ left
[21:20] *** Ven left
[21:21] *** guru joined
[21:21] *** guru is now known as Guest53029

[21:21] <dalek> doc: ecd4aca | (Steve Mynott)++ | bin/p6doc:

[21:21] <dalek> doc: unbreak example

[21:21] <dalek> doc: review: https://github.com/perl6/doc/commit/ecd4aca1db

[21:21] *** Guest53029 is now known as ajr_

[21:22] <itz> azawawi: thats one issue fixed .. I suspect you are seeing a path issue which I shall look at another day

[21:22] <azawawi> itz: thanks

[21:22] <azawawi> itz++

[21:30] *** kjs_ left
[21:32] *** denis_boyun left
[21:35] *** azawawi left
[21:42] *** rurban left
[21:42] *** chipotle left
[21:45] <tony-o> BSc_tadzik: does panda's Installer.pm the thing that builds the .moar files?

[21:46] <BSc_tadzik> tony-o: that's builder

[21:46] <BSc_tadzik> installer only copies stuff

[21:46] <BSc_tadzik> builder responsible for appropriate stuff to land in blib, in appropriate form

[21:46] <BSc_tadzik> for .pm files that's turning them into .moar

[21:48] <tony-o> is there a way to preserve the build log from panda ?

[21:50] <tony-o> BSc_tadzik: i'm getting a .moar file that behaves differently from just a PP .pm6.  I'm trying to run the .moar manually and getting an exception that i'm not getting/seeing with panda

[21:50] <tony-o> the .moar build ^

[21:55] <BSc_tadzik> PP?

[21:55] <tony-o> pure perl6

[21:55] <tony-o> actually it works if i manually rebuild the mbc, it fails with panda

[21:56] <tony-o> 2e7767b291587394255216deb5ed88b0  Pandapack.pm6.moar

[21:56] <tony-o> c65ef5aac476a52044c74a30aea69da2  Pandapack.pm6.moarvm2

[21:57] <tony-o> first one is built manually, second is built via panda (both with the same build command, I hacked panda Builder to echo the actual command run and rebootstrapped)

[21:58] <BSc_tadzik> wow

[21:58] <tony-o> wow @ md5sums or the result?

[21:58] <tony-o> i feel like i'm taking crazy pills for the last 3 days

[21:58] <BSc_tadzik> well, md5sums first

[21:59] <tony-o> moarvm2 is 4 bytes larger

[21:59] <BSc_tadzik> but well, if you ran exactly the same command as panda did and got a different result, I don't think it's panda's fault

[21:59] <BSc_tadzik> something is super weird

[22:00] *** BenGoldberg joined
[22:00] *** pyrimidine left
[22:03] *** anaeem1 left
[22:03] *** pmurias joined
[22:05] *** gfldex left
[22:06] <tony-o> yea i'm not accusing panda of anything, i just don't know where to go to get better info

[22:06] <tony-o> to whoever needs it

[22:07] *** _slade_ joined
[22:07] <tony-o> it's very consistent though

[22:08] <tony-o> does it happen for you?  I'm building the .pm6 included with pandapack, here: https://github.com/tony-o/perl6-pandapack

[22:09] *** Alina-malina left
[22:10] *** Alina-malina joined
[22:14] <BSc_tadzik> I'll check in the morning, now I need some sleeps :)

[22:14] *** FROGGS left
[22:14] <BSc_tadzik> thanks for letting me know

[22:18] *** treehug8_ left
[22:22] <arnsholt> tony-o: If the size delta is only four bytes, it could very well be that the only difference is an inserted four-byte thing

[22:23] <arnsholt> So maybe you could diff them? I don't think diff likes binary files, but if you diff the hexdumps, it should be pretty easy to see if there are many or few differences

[22:24] *** leont_ joined
[22:34] *** Mso150 left
[22:41] *** ajr_ left
[22:46] *** guru joined
[22:46] *** guru is now known as Guest5959

[22:46] *** Guest5959 is now known as ajr_

[22:47] <ajr_> cmp tells you where there's a difference in binaries.

[22:49] *** pmurias left
[22:50] *** Hor|zon joined
[22:50] <tony-o> cmp diffs them at char 53 line 2

[22:50] <tony-o> i don't really know what to do with that info

[22:51] <tony-o> i can see if they're different after that too

[22:51] *** avuserow left
[22:53] <tony-o> hex dump diffs reveal the files are pretty different

[22:53] <arnsholt> tony-o: It's pretty useless to us mere mortals

[22:53] <arnsholt> But hopefully it'll be useful info to the likes of jnthn 

[22:54] <arnsholt> Who actually know the bytecode format =)

[22:54] *** Hor|zon left
[22:54] <tony-o> i can replicate the issue on my macbook

[22:57] <tony-o> .tell BSc_tadzik https://gist.github.com/tony-o/b8eca866073128527c15

[22:57] <yoleaux> tony-o: I'll pass your message to BSc_tadzik.

[23:09] *** beastd left
[23:14] *** chipotle joined
[23:19] *** Hor|zon joined
[23:21] *** chipotle left
[23:21] *** Mso150 joined
[23:25] *** chipotle joined
[23:25] *** Hor|zon left
[23:35] *** rindolf left
[23:45] *** bjz left
[23:50] *** leont_ left
