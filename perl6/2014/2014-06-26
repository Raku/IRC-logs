[00:00] *** fhelmberger left
[00:01] *** icetooth joined
[00:04] <emilper> just in case it is important: tested gsl and cblas (gslcblas in fact) from C with the functions that I need and it works;  from p6 on moar it crashes apparently at random, either here: 

[00:04] <emilper> stat("/home/emilper/bin/rakudo/install/languages/perl6/lib/dynext/libperl6_ops_moar.so", 0x7fffdb607040) = -1 ENOENT (No such file or directory)

[00:04] <emilper> stat("/home/emilper/bin/rakudo/install/languages/perl6/runtime/dynext/libperl6_ops_moar.so", {st_mode=S_IFREG|0664, st_size=35474, ...}) = 0

[00:04] <emilper> --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_ACCERR, si_addr=0x7f861f4a80f0} ---

[00:04] <emilper> +++ killed by SIGSEGV +++

[00:04] <emilper> or here: 

[00:04] <emilper> mmap(NULL, 2164320, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 10, 0) = 0x7fe6cce68000

[00:04] <emilper> mprotect(0x7fe6cce77000, 2093056, PROT_NONE) = 0

[00:04] <emilper> mmap(0x7fe6cd076000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 10, 0xe000) = 0x7fe6cd076000

[00:04] <emilper> close(10)                               = 0

[00:05] <emilper> mprotect(0x7fe6cd076000, 8192, PROT_READ) = 0

[00:05] <emilper> --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x2} ---

[00:05] <emilper> +++ killed by SIGSEGV +++

[00:05] <emilper>  ... in case it matters :) 

[00:05] <timotimo> a gdb backtrace would probably be more helpful

[00:05] <timotimo> maybe a build with ASAN?

[00:05] <emilper> ... how do I do that ?  literate in just c enough to read the code 

[00:06] <timotimo> ah

[00:06] <emilper>  ... I can find out :) and come back tomorrow 

[00:06] <timotimo> if you configure.pl your moarvm with --debug=3 --optimize=0 you can just start your moarvm with "gdb --args /.../.../moar blah.moarvm --foobar --barbaz"

[00:07] <timotimo> then type "run" and when it crashes, "bt full"

[00:08] <emilper> will do and return tomorrow, very late her e

[00:08] <timotimo> good night! :)

[00:08] <timotimo> and thanks for your time

[00:08] <emilper> thank you 

[00:09] *** emilper left
[00:10] <psch> only the proper return missing for tr///, but that really seems the hardest to me by now...

[00:10] <psch> i mean, i guess i could slap a .distance or something onto Str and call that with a :op<callmethod> or somesuch, but i'm not sure that's the right way

[00:11] <psch> the other way i can think of is building an ast that computes the distance, which i think looks even wronger as a solution 

[00:11] <psch> am i missing something obvious?

[00:13] <timotimo> it'd probably be nicer to calculate the distance as you're doing the changes

[00:13] <psch> tr/// calls trough to .trans

[00:13] <timotimo> oh

[00:13] <psch> so that's kinda hard

[00:14] <timotimo> well, if you do it after .trans is finished, you can return an object that can do less work if it's evaluated as .Bool vs .Int

[00:15] <psch> m: my $s = 'abc'; say $s.trans: 'a..c' => 'd..f'

[00:15] <camelia> rakudo-moar a7b4cb: OUTPUT«def␤»

[00:15] *** thou left
[00:15] <psch> so i guess that still works if i evaluate it as .Int from .trans

[00:16] <psch> it's just hard for me to tell when i can put changes into higher-level parts of rakudo and when they should stay in the grammar or actions

[00:17] <psch> hm, does that actually sound sensible though? having Str.trans return Str or Int

[00:18] <psch> timotimo: or am i misunderstanding your suggestion?

[00:19] <timotimo> the return value is supposed to be an int, right?

[00:19] <timotimo> that tells how much the string changed?

[00:19] <psch> yes, for tr///, which effectively is always in smartmatch context

[00:19] <psch> as in, i can't think of a way to use tr/// that's not either implicite against $_ or explicite with ~~

[00:20] *** Ben_Goldberg joined
[00:20] *** BenGoldberg left
[00:20] *** Ben_Goldberg is now known as BenGoldberg

[00:20] <timotimo> so if we only look at the result in a boolean context, we can skip lengthy calculations of the actual value

[00:23] *** ajr_ left
[00:24] <psch> well i'm not yet doing the calculations for the cases where they have to be done

[00:24] <psch> i assume you mean code like "if tr/// { }" could skip them, which makes sense

[00:24] <psch> but "$c = $f ~~ tr///" obviously needs them and i don't know how to do them

[00:25] <psch> well, except for the two ideas, which i don't feel competend enough to decide between

[00:28] <psch> maybe i should just sleep on it... :)

[00:32] <timotimo> sounds good

[00:34] <psch> how'd i do that though? i mean, returning an object that only does the calculation if it stands in a context that wants an Int

[00:35] <psch> eh, never mind that now. i actually should rather sleep

[00:35] <psch> thanks for the input though timotimo++

[00:35] *** psch left
[00:36] <timotimo> well, the object could store the original string and the result string. in .Int it could return $!result //= do { #`( calculate ) };

[00:37] *** raiph left
[00:41] <BenGoldberg> Isn't that what Proxy is for?

[00:54] *** jnap1 joined
[00:54] *** jnap left
[00:57] *** thou joined
[01:01] <icetooth> is perl6 going to eventually be used for web apps?

[01:01] <tadzik> I'd expect so

[01:01] <tadzik> it already is for some

[01:04] *** FROGGS_ left
[01:04] <icetooth> i'm trying to figure out what language to use for learning about web programming, but i can't find any solid info on how to use perl6 with apache, i'm assuming its not there yet?

[01:05] <tadzik> oh, you're looking in the wrong directon

[01:05] <tadzik> you shouldn't ever be concerned with apache when doing web development

[01:05] <tadzik> that's a different layer of things, not your problem

[01:06] <tadzik> I recommend reading up on PSGI, if you're a Perl-son

[01:06] <tadzik> Perl perlson

[01:06] <tadzik> ah, you get the idea

[01:06] <tadzik> anyway, there's this new fancy trend these days, to keep your web app abstracted away from the way it's later being deployed

[01:07] <tadzik> we have several PSGI implementations in Perl 6 too

[01:07] <tadzik> https://github.com/tadzik/bailador is something I pulled off, which is quite useful

[01:08] <icetooth> ahh interesting, i was only familiar with the mod_whatever scripting method

[01:08] <tadzik> yeah, everyone's kinda moving away from that

[01:08] <tadzik> PSGI is a wonderful idea

[01:10] <icetooth> looks like its going to be another long night for me. thanks for the info!

[01:13] *** Su-Shee left
[01:13] *** klapperl_ joined
[01:13] <tadzik> have fun :) I really have to call this night a night

[01:15] *** Su-Shee joined
[01:16] *** Khisanth left
[01:17] *** klapperl left
[01:17] *** FROGGS_ joined
[01:17] *** Khisanth joined
[01:18] *** jnap1 left
[01:22] <BenGoldberg> icetooth, If you're writing web apps in perl, and you if *really* want to use Apache to deploy it, there exists a mod_psgi.

[01:23] <BenGoldberg> That's for perl5, though, not perl6 (yet).

[01:24] <icetooth> i'm reading their readme right now actually,  was thinking about using it for simplicity sake.  since i seem to be stuck in the early 00's and all

[01:24] <icetooth> doh

[01:25] *** Akagi201_ joined
[01:27] <timotimo> actually

[01:27] <timotimo> i see a new trend where you run a little web server with your app and just let another web server handle stuff like caching and such

[01:27] <timotimo> so you'll have something like mod_proxy hand your requests to your we bapp

[01:27] <timotimo> web app*

[01:28] <timotimo> because why have another protocol if we can just use http all the way through

[01:31] *** uniejo joined
[01:34] <icetooth> all i wanted was a nice little exercise in learning sql and a new scripting language, now its getting ridiculous :[

[01:36] <dalek> perl6-examples: aeddf63 | (Yanick Champoux)++ | 99-problems/P06-scottp.pl:

[01:36] <dalek> perl6-examples: typo in comment

[01:36] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/aeddf63b81

[01:36] <dalek> perl6-examples: d051dac | timo++ | 99-problems/P06-scottp.pl:

[01:36] <dalek> perl6-examples: Merge pull request #16 from yanick/patch-1

[01:36] <dalek> perl6-examples: 

[01:36] <dalek> perl6-examples: typo in comment

[01:36] <dalek> perl6-examples: 

[01:36] <dalek> perl6-examples: thank you!

[01:36] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/d051dacfdb

[01:40] *** thou left
[01:40] *** thou joined
[01:44] *** btyler left
[02:16] *** raiph joined
[02:18] *** jlaire left
[02:19] *** jlaire joined
[02:20] *** xiaomiao left
[02:25] *** xiaomiao joined
[02:27] *** telex left
[02:28] *** telex joined
[02:30] *** noganex joined
[02:31] *** BenGoldberg left
[02:33] *** noganex_ left
[02:44] <timotimo> something i just thought of (while trying to fall asleep): i don't think we have a way to call function pointers from NativeCall yet

[02:44] <timotimo> but binding OpenGL, for example, will require us to take function pointers and call them, because that's how you use OpenGL extensions

[02:49] *** logie joined
[03:02] *** kaare_ joined
[03:04] *** grondilu joined
[03:11] *** araujo left
[03:17] *** molaf joined
[03:21] *** xragnar_ joined
[03:21] *** xragnar left
[03:21] *** xragnar_ is now known as xragnar

[03:22] *** rindolf joined
[03:24] *** vendethiel left
[03:24] *** kaleem joined
[03:25] *** vendethiel joined
[03:27] <grondilu> timotimo: isn't that what is done in 08-callbacks?

[03:32] *** molaf left
[03:35] *** btyler joined
[03:37] *** [Sno] joined
[03:38] *** uniejo left
[03:40] *** logie left
[03:42] *** kaleem left
[03:42] *** kaleem joined
[03:43] *** orafu joined
[03:50] *** SamuraiJack joined
[03:52] <segomos_> timotimo: id promise.new doesnt start a new thread, what is the threadpoolschwduler.loads telling me? i thought that was a threadpool and it seems to increase with every new connection and promise created  .  . what am i misunderstanding (so i can go read more)?

[03:53] <segomos_> if / threadpoolscheduler

[04:02] *** kaare_ left
[04:08] *** btyler left
[04:16] *** anaeem1 joined
[04:17] *** anaeem1 left
[04:17] *** anaeem1 joined
[04:23] *** [Sno] left
[04:26] *** kaare_ joined
[04:28] *** chenryn joined
[04:31] *** rurban joined
[04:36] *** Alula_ left
[04:38] <thou> icetooth: if you're still around, there's an older implementation of a pretty full Plack (perl5 PSGI stack) in perl6 which, I think, hasn't gotten enough awareness. https://github.com/lopnor/p6-plackdo

[04:38] <yoleaux> 12:43 MDT <raiph> thou: Your blog says "Let me know" but I see no obvious way to comment. What I'm sure anyone reading it wants to know is what you found out about control of your grammar's backtracking.

[04:48] <thou> Yay, I got Perl6 added to http://mustache.github.io/ .

[04:49] *** Alula_ joined
[04:49] *** dayangkun joined
[04:49] *** vendethiel left
[04:50] <sjohnson> howdy.

[04:50] *** rurban left
[04:55] *** rurban joined
[04:55] *** rhr joined
[05:03] *** rurban left
[05:05] *** kaleem left
[05:05] *** rurban joined
[05:06] *** kaleem joined
[05:07] *** rurban left
[05:10] *** rurban joined
[05:12] *** rurban left
[05:14] *** rurban joined
[05:16] *** rurban left
[05:17] *** raiph left
[05:25] *** kaleem left
[05:26] *** anaeem1 left
[05:26] *** anaeem___ joined
[05:28] *** rurban joined
[05:32] *** gfldex joined
[05:33] *** rurban left
[05:33] *** grondilu_ joined
[05:34] *** anaeem___ left
[05:34] *** anaeem1 joined
[05:36] *** grondilu left
[05:38] *** vendethiel joined
[05:48] *** rurban joined
[05:50] *** [Sno] joined
[05:53] *** rurban left
[05:53] *** woolfy joined
[06:05] *** lizmat left
[06:05] *** kurahaupo joined
[06:06] *** Alina-malina left
[06:06] *** woolfy left
[06:07] *** frettled joined
[06:08] *** ivanshmakov left
[06:20] *** denis_boyun_ joined
[06:29] <dalek> rakudo/nom: ffe6391 | coke++ | tools/autounfudge.pl:

[06:29] <dalek> rakudo/nom: enable autounfudge of moar, ala JVM

[06:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ffe63913c0

[06:29] <dalek> rakudo/nom: 813f6cf | coke++ | t/spectest.data:

[06:29] <dalek> rakudo/nom: run more spectest files

[06:29] <dalek> rakudo/nom: 

[06:29] <dalek> rakudo/nom: (all tested on moar)

[06:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/813f6cffb6

[06:31] *** dayangkun left
[06:34] *** dayangkun joined
[06:44] *** FROGGS_ left
[06:45] *** rindolf left
[06:48] *** rindolf joined
[06:49] *** rurban joined
[06:54] *** rurban left
[07:01] <masak> morning, #perl6

[07:01] *** Alina-malina joined
[07:02] *** dayangkun left
[07:06] *** dayangkun joined
[07:09] *** FROGGS joined
[07:09] *** zakharyas joined
[07:11] *** ivanshmakov joined
[07:13] *** mr-foobar left
[07:17] *** igorsutton joined
[07:18] *** darutoko joined
[07:19] *** properl6y joined
[07:20] *** properl6y left
[07:20] *** properl6y joined
[07:21] *** dmol joined
[07:26] <PerlJam> good morning masak

[07:34] *** virtualsue joined
[07:36] *** mr-foobar joined
[07:44] *** SamuraiJack left
[07:50] *** gtodd left
[07:50] *** rurban joined
[07:51] *** gtodd joined
[07:53] *** rurban1 joined
[07:54] *** rurban left
[07:55] *** SevenWolf left
[07:57] *** rurban1 left
[07:57] *** brrt joined
[08:01] *** ivanshmakov left
[08:01] *** ivanshmakov joined
[08:01] *** SamuraiJack joined
[08:02] *** SamuraiJack left
[08:07] *** SamuraiJack joined
[08:09] *** SamuraiJack left
[08:09] *** SamuraiJack joined
[08:17] *** Woodi left
[08:17] *** Woodi joined
[08:23] *** icetooth left
[08:27] *** Alina-malina left
[08:28] *** pecastro joined
[08:31] *** dakkar joined
[08:31] *** hoverboard left
[08:41] *** tommi joined
[08:49] *** denis_boyun_ left
[08:49] <timotimo> grondilu_: no, 08-callbacks is about turning a perl6-level sub into something that looks like a function pointer to C things

[08:49] *** properl6y left
[08:49] <timotimo> grondilu_: i want to cast a function pointer i get from a C-bound sub (so, essentially a 64bit integer) into a sub callable from perl6

[08:50] <timotimo> segomos_: Promise is just the interface to get to know if/when a task has finished. in addition, the "then" method exists to kick off another task when a promise gets fulfilled and this also creates a new promise on the side

[08:51] <timotimo> so in this case we always have a Callable that gets .cue'd to the Scheduler alongside a Promise to signal what happens in that Callable

[08:51] <timotimo> i hope that helps a bit?

[08:52] *** tommi left
[08:54] *** rurban joined
[08:58] *** rurban left
[08:58] *** spider-mario joined
[08:59] *** anaeem1 left
[09:08] *** mr-foobar left
[09:08] *** fhelmberger joined
[09:13] <grondilu_> timotimo: 

[09:13] <grondilu_> timotimo: ok

[09:13] *** grondilu_ is now known as grondilu

[09:14] *** grondilu left
[09:14] *** grondilu joined
[09:30] <timotimo> jnthn: is there some easy way to teach zavolaj to do function pointers -> sub call "casting"?

[09:32] *** stux left
[09:32] <jnthn> Oh...if we get a function pointer returned?

[09:32] <jnthn> I...think that is NYI and not quite trivial.

[09:32] <jnthn> But possible.

[09:33] <timotimo> OK

[09:33] <timotimo> use case is OpenGL extensions

[09:41] *** stux joined
[09:41] *** kaleem joined
[09:42] *** denis_boyun_ joined
[09:49] <grondilu> .oO( having an OpenGL port in Perl6 would be pretty cool )

[09:51] <timotimo> it'll be somewhat useless without good mutable native arrays, though

[09:52] <timotimo> especially since the glBegin + glVertex/glColor/glTexCoord/... + glEnd pattern has been deprecated for a long time now.

[09:54] <timotimo> i'm suspecting native/compact/sized arrays will harmonize very well with our jit

[09:54] *** rurban joined
[09:56] <jnthn> I'm sure we can harmonize them. :)

[09:58] <grondilu> r: sub prefix:<^^>(Int $n) { 1 .. $n }; say ^^10

[09:59] <camelia> rakudo-jvm 813f6c: OUTPUT«(timeout)»

[09:59] <camelia> ..rakudo-{parrot,moar} 813f6c: OUTPUT«1..10␤»

[09:59] *** rurban left
[10:01] *** pochi joined
[10:02] *** pochi_ left
[10:09] <dalek> nqp/osr: cb1ed30 | jonathan++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[10:09] <dalek> nqp/osr: Emit osrpoint OSR hint ops in loop bodies.

[10:09] <dalek> nqp/osr: review: https://github.com/perl6/nqp/commit/cb1ed30728

[10:09] <timotimo> j: say "alive"

[10:09] <camelia> rakudo-jvm 813f6c: OUTPUT«alive␤»

[10:21] *** FROGGS left
[10:23] *** FROGGS joined
[10:24] *** Alina-malina joined
[10:26] *** carlin joined
[10:29] *** Alina-malina left
[10:29] *** Alina-malina joined
[10:34] *** chenryn left
[10:38] *** chenryn joined
[10:48] *** kaleem left
[10:56] *** rurban joined
[10:57] *** brrt left
[11:00] *** rurban left
[11:03] <nwc10> https://www.blogger.com/comment.g?blogID=3971202189709462152&postID=3765964217640322884 -- As far as I know, a majority of the benchmarks we use have never been ported to Python 3. So it's far more complicated than just push a switch.

[11:04] *** kaleem joined
[11:06] *** logie joined
[11:15] *** SamuraiJack left
[11:17] *** uniejo joined
[11:22] *** rindolf left
[11:24] *** dmol left
[11:29] *** uniejo left
[11:29] *** uniejo joined
[11:41] *** uniejo left
[11:46] *** logie left
[11:54] *** pdcawley left
[11:57] *** rurban joined
[12:00] <tadzik> hmm

[12:00] <tadzik> feather seems to be ipv6-dead

[12:01] <tadzik> I could only connect via v4

[12:01] *** uniejo joined
[12:01] <tadzik> (talk about first world problems)

[12:01] *** rurban left
[12:03] *** uniejo left
[12:03] *** uniejo joined
[12:04] *** dolmen joined
[12:10] <moritz> tadzik: ssh -6 feather # works fine for me

[12:10] <tadzik> hm, I had to go through -4

[12:10] *** chenryn left
[12:10] <tadzik> may be the office connection then

[12:10] <moritz> tadzik: nopaste traceroute6 feather.perl6.nl output?

[12:11] <moritz> you can also try a 'ping6 google.com'

[12:11] <moritz> they are pretty reliable :-)

[12:11] <tadzik> https://gist.github.com/tadzik/aa203978950b4422a1cc

[12:11] <tadzik> ping to google works alright

[12:12] <moritz> tadzik: traceroute looks pretty much the same for me starting from gw-atom86, but for me it works

[12:13] <moritz> tadzik: looks like it's actually a problem with feather

[12:13] <FROGGS> moritz: does feather support polish ipv6?

[12:13] <tadzik> do we have a special ipv6? :D

[12:13] <tadzik> it always worked

[12:13] <FROGGS> *g*

[12:15] <moritz> ip6tables -nvL on feather doesn't show any suspicious rules

[12:15] <moritz> just

[12:15] <moritz> Chain INPUT (policy ACCEPT 2510K packets, 362M bytes) pkts bytes target     prot opt in     out     source               destination         

[12:15] <moritz> 3549K  482M sshguard   all      *      *       ::/0                 ::/0                

[12:17] *** chenryn joined
[12:20] *** lizmat joined
[12:20] *** woolfy joined
[12:23] *** Ven_ joined
[12:27] *** logie joined
[12:29] *** kaare_ left
[12:33] *** chenryn left
[12:33] *** Alina-malina left
[12:34] <zengargoyle> is sshguard similar to fail2ban?  did you muck your password enough to get blocked? :P

[12:37] *** dmol joined
[12:38] *** brrt joined
[12:43] <lizmat> good *, #perl6!

[12:44] *** guru joined
[12:44] *** guru is now known as Guest5826

[12:44] *** uniejo left
[12:44] * lizmat wonders whether there is a way to EVAL a string into a serialized format, like you get with --output

[12:45] <lizmat> so that you can later just load the bytecode ?

[12:45] *** Guest5826 is now known as ajr_

[12:45] <Ven_> lizmat: --output isn't just like shell's > ?

[12:45] <lizmat> no, not afaik

[12:47] *** logie left
[12:47] <Ven_> oh, I should try it sometimes then.

[12:47] <Ven_> Having a specced AST format would help, I guess

[12:47] *** logie joined
[12:48] <moritz> a big difference is that if you use a redirect, and compilation fails, you truncate the output file (if it existed before)

[12:48] <timotimo> lizmat: with nqp::getcomp you can get an instance of the Compiler object

[12:48] <Ven_> because EVAL() dumping bytecode would make it impossible to be ported anywhere

[12:48] *** mr-foobar joined
[12:48] <timotimo> then you can do the stages by yourself

[12:48] *** jnap joined
[12:48] <Ven_> well, you're working on inner stuff :-).

[12:49] <lizmat> I guess I could write the EVALcode to a file called Foo.pm, then shell out and do a ./perl6-m --target=mbc --output=Foo.moarvm Foo.pm

[12:49] *** SamuraiJack joined
[12:49] <lizmat> timotimo: ok, I'll look in that direction

[12:50] <lizmat> the reason I'm asking, is that I'm thinking of having the internal index for a CURL::Installation to be serialized code

[12:53] *** logie left
[12:54] *** sqirrel joined
[12:55] <timotimo> serialized code always has a security implication to it, but this is about installing code from places, so ... maybe not that important

[12:59] *** rurban joined
[13:00] <lizmat> timotimo: actually, this is a very good point  :-(

[13:01] <lizmat> I guess I have to make triple sure that no executable code is leaking from the META6.json file

[13:02] <lizmat> into this index

[13:03] *** rurban left
[13:06] *** chenryn joined
[13:12] <TimToady> top o' the * to you

[13:13] <moritz> \o

[13:13] <lizmat> TimToady o/

[13:13] <lizmat> moritz o/

[13:14] *** LLamaRider joined
[13:17] * lizmat will be heading down to hackathon room around 10am (OLT)

[13:17] <lizmat> (Orlando Local Time)

[13:19] *** chenryn left
[13:21] *** cosimo left
[13:22] *** cosimo joined
[13:24] *** chenryn joined
[13:26] <FROGGS> lizmat: is it important at this stage to turn the CURL::Installation database into something not human readable?

[13:27] *** Alina-malina joined
[13:29] *** rurban joined
[13:29] <lizmat> yes, out of performance reasons

[13:29] <Ven_> which reminds me, are there low-hanging fruits ?

[13:29] <lizmat> Ven_: yes

[13:29] <lizmat> someone suggested yesterday that it might be a good idea to create a list of links to the Synopses

[13:30] <Ven_> a list of links ?

[13:30] <lizmat> for a newbie to use to learn Perl 6

[13:30] <colomon> jnthn, etc: module smoke testing is still mostly to completely broken under parrot and moar.  It's been over a week since I had a successful complete smoke run.

[13:30] *** cosimo left
[13:30] <Ven_> lizmat: oh, hmm.

[13:30] <lizmat> :-)

[13:30] *** cosimo joined
[13:30] <Ven_> well, that goes in the scope of my talk

[13:31] <lizmat> you having gone through that process recently, seem like a good candidate  :-)

[13:31] <FROGGS> colomon: that is very weird, since I never have problem running the star module tests for these platforms for example

[13:31] <Ven_> yes, yes. I also point to people when I try and get them into it.

[13:31] <Ven_> Should I make it a tour, rather, though ?

[13:31] <colomon> FROGGS: how are you running the star module tests?

[13:31] <Ven_> "what do you want to learn if you're new here"

[13:31] <lizmat> yup, sounds good  :-)

[13:32] <colomon> FROGGS: I've had failures building panda under parrot at least 75% of the time I've tried.

[13:32] <FROGGS> I fork star, also fork MoarVM/nqp/rakudo into the star dir, and fake up a star release, unpack that tarball and compile and test

[13:32] <Ven_> Which makes me think I should write a non-p5-beginner tutorial, because we don't have those.

[13:32] <colomon> FROGGS: define "test"?

[13:33] <FROGGS> make modules-test

[13:33] <lizmat> ++Ven_

[13:33] * Ven_ has finished his medical appointment week and now will have time to do stuff before sleeping o/

[13:34] <colomon> FROGGS: hmmm.  not sure how that works.  I think it's possible that, of the two errors I'm seeing, neither would should up in your procedure.

[13:34] <Ven_> lizmat: where'd you post such a tutorial ?

[13:34] <Ven_> That probably can be in a blog

[13:34] <FROGGS> colomon: that might exlpain it, yeah

[13:34] <FROGGS> so it might be that the problem is somewhere in between of you testing infrastructure and rakudo

[13:35] <FROGGS> brb

[13:39] <TimToady> lizmat: where is the hackathon?

[13:42] <lizmat> one of the rooms on the other side of the corridor from where the YAPC::NA was

[13:42] <colomon> FROGGS: hmmm, problem may have been because rakudobrew was giving me an error that didn't show up in my log?  Tweaked smoke script and trying again.

[13:43] <lizmat> on the second floor

[13:43] *** chenryn left
[13:44] <colomon> FROGGS: nope, that didn'

[13:44] <colomon> that didn't help at all.

[13:47] <colomon> shift_pmc() not implemented in class 'Continuation'

[13:47] <colomon>   in block  at bin/panda:21

[13:47] <colomon>   in sub MAIN at bin/panda:19

[13:47] *** chenryn joined
[13:50] <colomon> arrrgh

[13:50] <colomon> none of these errors are consistent

[13:50] *** rurban left
[13:51] <colomon> I'm running   "rakudobrew build-panda"   and sometimes it works and sometimes it gives an error like the above.

[13:52] *** btyler joined
[13:52] <colomon> ==> Installing JSON::Tiny

[13:52] <colomon> Segmentation fault (core dumped)

[13:52] <colomon> that's new

[13:52] <tadzik> :)

[13:53] <timotimo> wow :S

[13:54] <colomon> next run, successful install

[13:56] <colomon> next run, shift_pmc() not implemented in class 'Continuation'

[13:56] <moritz> and why would it be implemented in that class :-)

[14:00] *** kaare_ joined
[14:02] <timotimo> arnsholt: will you have tuit supply in the future? there's lots and lots of unresolved issues in zavolaj that may benefit from a quick status update at the very least

[14:04] <timotimo> for example, does this still apply? https://gist.github.com/arnsholt/4963237

[14:06] *** chenryn left
[14:06] *** araujo joined
[14:06] <colomon> next run, successful install  :\

[14:07] <FROGGS> colomon: that shift_pmc thingy is a new "feature" of parrot 6.5.0 I think

[14:08] <colomon> next run, shift_pmc() not implemented in class 'Int' in block  at bin/panda:21

[14:13] *** treehug88 joined
[14:13] <colomon> FROGGS: hmm… and my last successful smoke test was the day parrot 6.5.0 was released...

[14:13] <FROGGS> that does not explain your moar problems though

[14:14] <FROGGS> though, we should ticket the parrot regression

[14:16] <colomon> FROGGS: moar problem seems to be the same one from months ago -- installing File::Find from panda breaks the universe.

[14:17] <colomon> FROGGS: I would feel better if someone else could duplicate the parrot problem.

[14:17] <FROGGS> colomon: do you export/set PERL6LIB or RAKUDOLIB by any chance?

[14:17] <colomon> FROGGS: nope

[14:20] *** sqirrel left
[14:21] *** chenryn joined
[14:24] <Ven_> oh, introductory tutorial on github. That could be a good idea.

[14:27] *** virtualsue left
[14:29] *** [Sno] left
[14:29] * colomon tries to build parrot rakudo on his Mac see if the issue occrus there, and discovers he cannot because of some sort of libiconv.2.dylib issue.  :\

[14:31] <FROGGS> ohh yes, the pain of working with a mac...

[14:31] <timotimo> joys*

[14:32] *** virtualsue joined
[14:33] *** rindolf joined
[14:34] <colomon> jvm build fails with java.lang.OutOfMemoryError: Java heap space

[14:34] <colomon>   in run (gen/jvm/stage2/QRegex.nqp:395)

[14:34] *** molaf joined
[14:35] <colomon> starting to think this is a conspiracy to make everyone run moar….

[14:38] *** bluescreen10 joined
[14:39] *** chenryn left
[14:40] <hoelzro> ahoy #perl6

[14:40] <colomon> o/

[14:41] <Ven_> o/

[14:45] *** kaleem left
[14:45] *** ajr_ left
[14:45] *** guru joined
[14:45] *** guru is now known as Guest87331

[14:45] * colomon hopes the hackathon is going well

[14:46] *** Guest87331 is now known as ajr_

[14:48] *** chenryn joined
[14:54] <TimToady> well, lizmat++ seems to have wandered off

[14:54] <TimToady> we didn't get there till 10:30

[14:55] <TimToady> so pretty much I'm the P6 hackathon at the moment...

[14:57] <jnthn> Well, then you'll just have to be crazy productive :P

[14:57] <masak> you can do it!

[14:58] <PerlJam> TimToady: so .... what are you hacking on?  :)

[15:01] <TimToady> I'm looking at ren1us++'s gist

[15:01] <TimToady> which does indeed seem to indicate a bug

[15:01] <jnthn> link? :)

[15:01] <masak> url? :)

[15:01] *** chenryn left
[15:01] <jnthn> öl? :)

[15:01] <TimToady> https://gist.githubusercontent.com/ChoHag/e1a910d6ac454aadb7b3/raw/ce98b6fcc303491e7ca0e5c64c9c3e79eb60c6b9/gistfile1.p6

[15:02] <TimToady> if I add 'is rw' to the attribute, doesn't make any difference

[15:02] <ChoHag> Oooh fix that one :)

[15:02] <TimToady> if I change nextsame to callsame and try to get its return, it seems to be returning 0 args

[15:02] <ChoHag> That's my blocker.

[15:03] <TimToady> oops, that was ChoHag++

[15:03] <TimToady> sorry, mixing up my P6 fuzzers :)

[15:03] <jnthn> uh, where is that nextsame meant to be going?

[15:03] <moritz> what does that nextsame dispatches to?

[15:03] <jnthn> oh, it's being used to wrap

[15:03] <TimToady> the accessor

[15:04] <TimToady> which wants to be a rw wrapper

[15:04] <TimToady> as I said, the attr should be marked 'is rw is wtf', but still doesn't work with that

[15:05] <ChoHag> Yeah I tried that.

[15:06] *** denis_boyun_ left
[15:07] <jnthn> Agree it needs the "is rw". Also agree it appears to be a bug.

[15:10] <jnthn> Well, 2 bugs...

[15:10] <TimToady> I'm surprised callsame seems busted

[15:10] <TimToady> you'd think we'd have a test for its return value

[15:11] <ChoHag> I *think* it's the wrap which strips the container somehow.

[15:11] <ChoHag> I've no idea what I'm looking at though.

[15:12] * TimToady thinks its the callsame/nextsame

[15:13] <TimToady> because my (\c) = callsame complains about expected 1 but got 0

[15:13] <dalek> rakudo/nom: ef3bb15 | jnthn++ | src/core/Routine.pm:

[15:13] <dalek> rakudo/nom: wrap should not force decontainerization.

[15:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ef3bb15a41

[15:14] <jnthn> With that patch, it works with callsame.

[15:14] <TimToady> jnthn++

[15:14] <jnthn> I can see nextsame/nextwith are wrong in this regard; the fix isn't immediately obvious. Will have to poke a bit more.

[15:15] <jnthn> spectest(s) for this welcome :)

[15:16] *** raiph joined
[15:16] <TimToady> well, my (\c) ::= callsame, I meant

[15:17] <jnthn> bbiab

[15:18] *** igorsutton left
[15:22] <gtodd> lizmat: "Introduction to NQP" ?

[15:23] <gtodd> lizmat: oops sorry I had scrolled back in my terminal and Ctrl-s'ed I think that conversation was from days ago 

[15:24] <TimToady> jnthn: the wrapper still seems to integer with BUILD and default values, though assignment works now

[15:24] <TimToady> s/integer/interfere/ #grr

[15:24] <TimToady> what's up with my brane?

[15:25] <Ven_> it's being hacked on

[15:25] <gtodd> overzealous spell-checking ? (at biological level)

[15:26] *** Ven_ left
[15:27] <gtodd> your brain assumes you mean to type integer .. a word you have used more often than interfere ... your biologically innate sorting algorithms interfered with typing

[15:27] * lizmat was held up at breakfast but will be joining shortly

[15:28] <TimToady> well, the program was using integers, anyway

[15:28] *** woolfy left
[15:29] *** lizmat left
[15:30] *** zakharyas left
[15:30] <moritz> integer interference

[15:31] <carlin> integerference

[15:31] *** sqirrel joined
[15:32] *** lizmat joined
[15:36] *** chenryn joined
[15:42] *** labster joined
[15:43] *** chenryn left
[15:44] *** slavik left
[15:45] *** hoverboard joined
[15:46] * lizmat is spectesting jnthn latest patch

[15:46] *** SamuraiJack_ joined
[15:47] <ajr_> Google are apparently replacing their Dalvik VM with a new one called "ART". They claim it's entirely compatible.

[15:48] <ajr_> http://www.theregister.co.uk/2014/06/26/google_promises_android_wrist_car_living_room_and_beyond/

[15:48] <ajr_> We'll see.

[15:48] *** chenryn joined
[15:49] *** slavik joined
[15:49] *** virtualsue left
[15:50] *** SamuraiJack left
[15:50] <dalek> roast: e257fed | TimToady++ | S06-advanced/wrap.t:

[15:50] <dalek> roast: add tests for wrapped rw accessors

[15:50] <dalek> roast: review: https://github.com/perl6/roast/commit/e257fede35

[15:51] <timotimo> ajr_: you can already use ART if you activate the developer options on your phones

[15:51] <timotimo> i've already run it for a few months on my nex4 and have equipped my newer devices with ART as well

[15:51] <ajr_> Good.

[15:51] <timotimo> i didn't do measurements at all, but allegedly it gives a nice speed boost

[15:52] <ajr_> Obviously not an issue then. 

[15:53] <timotimo> it *seems* stable enough

[15:59] *** kaleem joined
[16:05] *** brrt left
[16:05] *** fhelmberger left
[16:05] *** chenryn left
[16:06] *** kaleem left
[16:06] *** virtualsue joined
[16:08] *** chenryn joined
[16:09] *** SamuraiJack_ left
[16:09] *** SamuraiJack_ joined
[16:11] <gtodd> carlin: integerference ++ ... that makes two people who have used this word :)

[16:17] <gtodd> if we can create a coherent definition meme creation  will be facilitated ... since people mix integers and reals/floats in code all the time (when rounding and numbers for time and duration - didn't Knuth once say 100 * 0.1  is rarely equal to 10 or something?) this phenomena could be called "integerference" perhaps?  But IANAM

[16:17] *** dayangkun left
[16:18] *** rindolf left
[16:19] <dalek> roast: 6f33411 | (Elizabeth Mattijsen)++ | S02-magicals/ (3 files):

[16:19] <dalek> roast: Fudge DISTRO/PERL/VM for parrot

[16:19] <dalek> roast: 

[16:19] <dalek> roast: For some reason, only a todo seems to corrupt the internal state, and thus

[16:19] <dalek> roast: cause segfaults

[16:19] <dalek> roast: review: https://github.com/perl6/roast/commit/6f33411d8c

[16:22] *** Rotwang joined
[16:22] *** Rotwang left
[16:22] *** Rotwang joined
[16:26] *** chenryn left
[16:28] <ChoHag> Given https://gist.github.com/ChoHag/e1a910d6ac454aadb7b3, which now works (thanks!), is there any way I can tell that SomeTrait has been applied to the $!x attribute?

[16:30] <moritz> ChoHag: well, you can introspect the attributes, and check if it does the role with ~~ SomeTrait

[16:30] *** molaf_ joined
[16:31] <moritz> foo.^attributes.grep(*.name eq '$!x) ~~ SomeTrait

[16:32] <TimToady> s/')'/')/

[16:33] *** molaf left
[16:33] <TimToady> and your new gist doesn't work here...

[16:36] *** FROGGS left
[16:36] *** MilkmanDan left
[16:37] *** MilkmanDan joined
[16:37] <TimToady> oh, I never noticed that the wtf trait was trying to set rw instead of an 'is rw'

[16:37] <TimToady> but anyway, doesn't work here with that either...

[16:38] *** dakkar left
[16:38] <gtodd> timotimo: with my Android 4.4 system I needed to tap 7 times on a secret button to turn on developer options ... which I only turned on because I thought it was necessary for perl  ;-)  (it is not)

[16:39] *** dmol left
[16:39] <segomos_> gotta get that new amazon phone

[16:39] <TimToady> works if I change the 'nextsame' to 'callsame' and return it implicitly

[16:40] <TimToady> doesn't work with an explicit 'return callsame;'

[16:40] *** chenryn joined
[16:45] <jnthn> Is the thing the callsame's in marked "is rw"?

[16:47] *** guru joined
[16:48] *** guru is now known as Guest32177

[16:49] *** ajr_ left
[16:49] *** chenryn left
[16:49] *** SamuraiJack_ left
[16:50] *** SamuraiJack_ joined
[16:51] <dalek> roast: d48718f | TimToady++ | S06-advanced/wrap.t:

[16:51] <dalek> roast: test more ways of returning a wrapped rw accessor

[16:51] <dalek> roast: review: https://github.com/perl6/roast/commit/d48718f743

[16:51] <TimToady> the wrapper is marked 'is rw'

[16:52] <TimToady> I dunno what calls apply_handles...

[16:52] *** virtualsue left
[16:52] <TimToady> I presume that's deep magic of some sort

[16:52] *** Guest32177 left
[16:57] *** xinming left
[16:57] <jnthn> method compose in Attribute, iirc

[16:58] *** SamuraiJack_ left
[16:58] *** xinming joined
[17:00] *** lizmat left
[17:00] *** lizmat joined
[17:00] <ChoHag> Can I overwrite the equivalent of the set accessor of an attribute?

[17:01] <jnthn> There is no set accessor

[17:01] <jnthn> There's just accessors that "is rw" and ones that ain't.

[17:01] <vendethiel> only a writable container :P

[17:01] <jnthn> Right, it returns the container.

[17:02] *** treehug88 left
[17:03] <lizmat> lunch&

[17:05] *** labster left
[17:06] * jnthn goes to acquire noms

[17:07] *** rindolf joined
[17:11] *** carlin left
[17:11] *** klapperl joined
[17:12] *** labster joined
[17:12] *** klapperl_ left
[17:19] <segomos_> btyler: i was able to get wrk to run 10 connections on 10 threads against HTTP::Server::Async

[17:19] *** virtualsue joined
[17:19] *** troydm left
[17:20] <segomos_> with p6-j

[17:22] *** labster left
[17:23] *** dmol joined
[17:25] *** wookie joined
[17:25] <timotimo> gtodd: yes, i think it's usually the "build number" in the "about phone" section

[17:25] <timotimo> i activated dev options because i want to do a bit of android development

[17:26] *** carlin joined
[17:28] <timotimo> wrk?

[17:29] <segomos_> ab replacement that is supposed to be better, btyler found it

[17:29] <btyler> like ab, but better

[17:29] <segomos_> https://github.com/wg/wrk

[17:30] <segomos_> it's on mac brew if you have osx

[17:30] <vendethiel> where could I publish an equivalent to "p5 to p6" for non-p5ers ? Or a good tool for writing that

[17:30] <timotimo> oh, neato.

[17:30] <vendethiel> ST is pretty bad at that game ...

[17:30] <segomos_> probably on aptitude or linux package managers too if you have linux

[17:30] * masak is listening to Knutsen & Ludvigsen

[17:31] <moritz> masak: Ronja has discovered them recently, so I've been listening to them alot recently

[17:31] <gtodd> timotimo: it took about 20 mintues to reboot :)

[17:32] <timotimo> "ST"?

[17:32] <vendethiel> timotimo: sublime text

[17:32] <masak> moritz: I queued them up when I saw you listening to them in the backlog. they've now rolled around.

[17:32] <segomos_> btyler: moarvm still craps out but it looks like some kind of unhandled, nonresumable, thread error.  haven't really dug into it

[17:32] <masak> moritz: tell Ronja I ratherr enjoy their music ;)

[17:33] <masak> rather*

[17:33] <masak> vendethiel: publish it somewhere where people can link to it :)

[17:34] <masak> vendethiel: a blog post, a gist, a wiki page...

[17:34] <vendethiel> i don't have a blog, though

[17:34] <segomos_> vim and git blog

[17:35] <vendethiel> no vim

[17:35] <masak> what segomos_ said.

[17:35] <masak> no vim!? that's sad :/

[17:35] <masak> here, have a nickel. buy yourself a vim.

[17:35] <vendethiel> like, emacs I can tolerate; vim no way.

[17:35] <carlin> heretic!

[17:36] * masak likes both

[17:36] <segomos_> haven't ever used emacs

[17:37] <masak> Emacs gets the programmability really right.

[17:37] <masak> vim nails composable actions.

[17:37] <gtodd> http://www.perl6.org/compilers/  !! the curvy rounded drop shadow bits are missing from the red and yellow squares!!

[17:37] <segomos_> programmability?

[17:37] <segomos_> meaning the ease at which you can write plugins for it?

[17:38] <gtodd> masak: and Vim::X by yannick :)

[17:38] <btyler> segomos_: I can still repeatably hang by having wrk connect with more connections than the number of threads in rakudo

[17:38] <segomos_> vendethiel: scriptogr.am is something i've been checking out, you can blog with markdown

[17:39] <segomos_> btyler: did you pull down the latest?

[17:39] <masak> segomos_: Emacs is in a very real sense an introspectable programming environment with a text editor implemented on top of it.

[17:39] * vendethiel doesn't customize emacs

[17:40] <masak> o.O

[17:40] <btyler> segomos_: yep, this is with latest

[17:40] <vendethiel> well, I knew I'd only use it for 3 weeks, soo.

[17:40] <carlin> emacs is a great operating system, if only it had a decent text editor

[17:40] <btyler> and an up-to-date rakudo-j

[17:40] <masak> carlin: I for one rather like its text editor.

[17:40] <segomos_> let me rebuild rakudo-j and retry

[17:41] <gtodd> there might be either a vim  programmable via perl6 extension ... or an editor written perl6  ... but that would still be different than Emacs ...

[17:43] <segomos_> ctrl+r in vim is usually good enough for me

[17:45] <segomos_> ctrl+n rather

[17:45] *** labster joined
[17:49] <masak> I used to think that.

[17:49] <segomos_> maybe i'll give emacs a try

[17:50] *** labster left
[17:51] *** guru joined
[17:51] *** guru is now known as Guest20834

[17:51] <gtodd> sometimes if you squint scala code almost looks like is should actually run with perl6 ... http://docs.scala-lang.org/cheatsheets/ 

[17:52] *** Guest20834 is now known as ajr_

[17:55] <carlin> needs sigils

[17:56] <segomos_> btyler: odd.. https://gist.github.com/tony-o/65e8d9b880e86b2ea8b6

[17:56] <carlin> they even use $_ but without the $

[17:56] <segomos_> after burn in on the jvm that time ratchets down to 50ms area for me

[17:56] <btyler> segomos_: is that with the RAKUDO_MAXTHREADS env?

[17:57] <segomos_> nah, i have that variable unset

[17:57] <btyler> ok

[17:57] <btyler> likewise

[18:01] <segomos_> got an idea, i'lll check back in later

[18:01] <btyler> segomos_: ok -- let me know if there's anything I can do to help get some insight

[18:02] *** FROGGS joined
[18:03] <FROGGS> o/

[18:06] *** treehug88 joined
[18:08] <vendethiel> segomos_: thanks, I'll try that

[18:09] <vendethiel> I'm pretty much just looking for a blog to publish

[18:09] <vendethiel> I'll maybe translate it in french. at that point, I translated a terrifyingly big fork of phpBB, LiveScript's documentation, so I might as well... :)

[18:23] *** dayangkun joined
[18:23] *** smls joined
[18:37] *** [Sno] joined
[18:37] *** chenryn joined
[18:41] *** darutoko left
[18:45] *** chenryn left
[18:45] *** [Sno] left
[18:45] *** dayangkun left
[18:45] *** dmol left
[18:45] *** rindolf left
[18:45] *** molaf_ left
[18:45] *** LLamaRider left
[18:45] *** gfldex left
[18:45] *** jlaire left
[18:45] *** zengargoyle left
[18:45] *** vike left
[18:45] *** sivoais left
[18:45] *** nebuchadnezzar left
[18:45] *** ggoebel111116 left
[18:45] *** jercos left
[18:45] *** treehug88 left
[18:45] *** MilkmanDan left
[18:45] *** slavik left
[18:45] *** bluescreen10 left
[18:45] *** cosimo left
[18:45] *** mr-foobar left
[18:45] *** gtodd left
[18:45] *** frettled left
[18:45] *** kurahaupo left
[18:45] *** telex left
[18:45] *** Khisanth left
[18:45] *** thilp left
[18:45] *** erkan left
[18:45] *** robinsmidsrod left
[18:45] *** mtj_ left
[18:45] *** ChoHag left
[18:45] *** nnunley left
[18:45] *** raydiak left
[18:45] *** mhasch left
[18:45] *** ilbot3 left
[18:45] *** djanatyn left
[18:45] *** perigrin left
[18:45] *** ccverg left
[18:45] *** timotimo left
[18:45] *** REPLeffect left
[18:45] *** atrodo left
[18:45] *** yogan left
[18:45] *** tokuhirom left
[18:45] *** muraiki left
[18:45] *** go|dfish left
[18:45] *** firnsy left
[18:45] *** FOAD left
[18:45] *** pmichaud left
[18:45] *** hugme left
[18:45] *** retupmoca left
[18:45] *** Bucciarati left
[18:45] *** TimToady left
[18:45] *** lestrrat left
[18:46] *** chenryn joined
[18:46] *** [Sno] joined
[18:46] *** dayangkun joined
[18:46] *** treehug88 joined
[18:46] *** dmol joined
[18:46] *** rindolf joined
[18:46] *** MilkmanDan joined
[18:46] *** molaf_ joined
[18:46] *** slavik joined
[18:46] *** bluescreen10 joined
[18:46] *** cosimo joined
[18:46] *** LLamaRider joined
[18:46] *** mr-foobar joined
[18:46] *** gtodd joined
[18:46] *** frettled joined
[18:46] *** kurahaupo joined
[18:46] *** gfldex joined
[18:46] *** telex joined
[18:46] *** jlaire joined
[18:46] *** Khisanth joined
[18:46] *** thilp joined
[18:46] *** erkan joined
[18:46] *** zengargoyle joined
[18:46] *** timotimo joined
[18:46] *** robinsmidsrod joined
[18:46] *** ChoHag joined
[18:46] *** REPLeffect joined
[18:46] *** vike joined
[18:46] *** sivoais joined
[18:46] *** atrodo joined
[18:46] *** mtj_ joined
[18:46] *** nebuchadnezzar joined
[18:46] *** ggoebel111116 joined
[18:46] *** nnunley joined
[18:46] *** raydiak joined
[18:46] *** yogan joined
[18:46] *** ccverg joined
[18:46] *** tokuhirom joined
[18:46] *** jercos joined
[18:46] *** mhasch joined
[18:46] *** ilbot3 joined
[18:46] *** djanatyn joined
[18:46] *** perigrin joined
[18:46] *** muraiki joined
[18:46] *** go|dfish joined
[18:46] *** firnsy joined
[18:46] *** lestrrat joined
[18:46] *** TimToady joined
[18:46] *** Bucciarati joined
[18:46] *** retupmoca joined
[18:46] *** hugme joined
[18:46] *** pmichaud joined
[18:46] *** FOAD joined
[18:46] *** wilhelm.freenode.net sets mode: +v hugme

[18:46] *** telex left
[18:47] *** telex joined
[18:48] *** zamolxes left
[18:48] *** apejens left
[18:48] *** rjbs left
[18:48] *** [Coke] joined
[18:48] *** apejens joined
[18:48] *** segomos joined
[18:48] *** rjbs joined
[18:48] *** PerlJam joined
[18:48] *** zamolxes joined
[18:48] *** broquaint joined
[18:48] *** Rounin joined
[18:48] *** nickpatch joined
[18:48] *** jtpalmer joined
[18:51] *** LLamaRid1r joined
[18:51] *** sivoais_ joined
[18:51] *** jercos_ joined
[18:51] *** zengargo1le joined
[18:52] *** jlaire_ joined
[18:52] *** gfldex_ joined
[18:53] *** telex left
[18:56] *** hoverboard is now known as totesboard

[18:56] *** totesboard is now known as hoverboard

[18:56] *** chenryn left
[18:56] *** [Sno] left
[18:56] *** dayangkun left
[18:56] *** dmol left
[18:56] *** rindolf left
[18:56] *** molaf_ left
[18:56] *** LLamaRider left
[18:56] *** gfldex left
[18:56] *** jlaire left
[18:56] *** zengargoyle left
[18:56] *** vike left
[18:56] *** sivoais left
[18:56] *** nebuchadnezzar left
[18:56] *** ggoebel111116 left
[18:56] *** jercos left
[18:58] *** donaldh joined
[18:59] *** vike joined
[18:59] *** rindolf joined
[18:59] *** dayangkun joined
[19:00] *** telex joined
[19:01] *** anaeem1_ joined
[19:05] *** PerlJam left
[19:05] *** sqirrel left
[19:05] *** kid_ joined
[19:06] <dalek> rakudo-star-daily: b3af78f | coke++ | log/ (13 files):

[19:06] <dalek> rakudo-star-daily: today (automated commit)

[19:06] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/b3af78f8ca

[19:06] <dalek> perl6-roast-data: 93003b6 | coke++ | / (4 files):

[19:06] <dalek> perl6-roast-data: today (automated commit)

[19:06] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/93003b68e7

[19:11] *** raiph left
[19:14] *** rindolf left
[19:14] <vendethiel> okay, scriptogr.am is exactly why I dislike client js.

[19:17] <segomos> vendethiel: ?

[19:17] <vendethiel> segomos: their dashboard stuff is soooo slow.

[19:18] <moritz> ooh, looks like there's a new .pm group, 'hardware.pm'

[19:18] <moritz> a new candidate for a release name :-)

[19:19] *** chenryn joined
[19:19] *** [Sno] joined
[19:19] *** dmol joined
[19:19] *** molaf_ joined
[19:19] *** ggoebel111116 joined
[19:20] * TimToady used to use emacs, but it wore out his pinky finger

[19:22] <segomos> "58 useful emacs shortcut keys" lol..only 58 :-)

[19:23] <dalek> roast: 9bb5c8c | (Elizabeth Mattijsen)++ | S06-advanced/wrap.t:

[19:23] <dalek> roast: Adjust text count

[19:23] <dalek> roast: review: https://github.com/perl6/roast/commit/9bb5c8cfda

[19:23] *** nebuchadnezzar joined
[19:23] <masak> TimToady: what did you use the pinky finger for in Emacs? I'm curious.

[19:23] <vendethiel> masak: ctrl ?

[19:23] <TimToady> ^N ^P

[19:24] <TimToady> this was kinda before they invented arrow keys :)

[19:24] <masak> oh. I have my Caps Lock rewired as Ctrl.

[19:24] <vendethiel> masak: I have my pinky for both caps lock and ctrl, though

[19:24] <TimToady> well, my Ctrl was already in the right spot, but that didn't help :)

[19:24] <masak> :)

[19:24] <vendethiel> (well, it's probably less stressful for the pinky)

[19:24] <vendethiel> and I can't quite imagine not having arrow keys, haha

[19:26] <TimToady> it's not so much the occasional Ctrl keys, but having to hold it down while pounding other keys

[19:26] <TimToady> so, for instance, in vim I type Ctrl-] in preference to Esc

[19:26] <TimToady> but that's brief

[19:26] <TimToady> and doesn't induce RSI

[19:27] <segomos> no problems with shift+; ?

[19:27] <TimToady> I don't type ::::::::::: very often

[19:27] <segomos> that is p common for me, maybe i'm overly enthusiastic about modifying the buffer with perldo though

[19:28] * vendethiel thought about typing ctrl-] everytime on his french keyboard

[19:28] <segomos> to exit emacs i do ctrl+c and then ctrl+x ?  is that really the best way?

[19:28] *** itz joined
[19:29] <TimToady> that's the only way I know

[19:29] <jdv79> is that the same as :wq?

[19:29] <geekosaur> other way around

[19:29] <TimToady> ZZ makes a little more sense :)

[19:29] <geekosaur> ctrl-x, ctrl-c

[19:29] <segomos> it's the same as just :q and if you've modified the buffer then it comes with a bunch of prompts

[19:30] <geekosaur> it will prompt for you to save any unsaved buffers

[19:30] * TimToady always has autosave set, so even a ^Z to suspend will save

[19:30] <jdv79> suffering

[19:30] <TimToady> yes, ZZ is basically :wq, but faster

[19:31] <TimToady> ZZ also works in less

[19:31] <Juerd> 21:26 < TimToady> so, for instance, in vim I type Ctrl-] in preference to Esc

[19:31] <Juerd> Interesting. I often use esc to avoid typing alt :P

[19:32] <Juerd> Got better with my new thinkpad though, where Esc is left of F1 instead of one row above it.

[19:32] <TimToady> well, I'll use my Compose key to write «» in preference to ^K in vim :)

[19:32] <Juerd> I never really use ^K because it only works in vim :)

[19:32] *** [particle] joined
[19:32] <Juerd> Compose works in irssi and everywhere else

[19:33] *** [particle]1 left
[19:35] <segomos> ahh in vim i can just use alt+\ and alt+shift+\ to type «»

[19:35] <segomos> actually outside of vim i can do that too

[19:35] *** jlaire_ is now known as jlaire

[19:36] <anocelot> I didn't know alt+\ worked!  :)

[19:37] <segomos> alt+; does the three dots too …

[19:37] *** chenryn left
[19:40] *** hoverboard left
[19:41] <TimToady> I think most Usians think that using a Compose key is somehow unamerican...

[19:41] <segomos> m: $*SCHEDULER = ThreadPoolScheduler.new(:max_threads(Inf)); my $p = Promise.new;  start { sleep 500; $p.keep(True); }; await $p;

[19:41] <camelia> rakudo-moar ef3bb1: OUTPUT«Failed to unbox object to integer␤  in method new at src/gen/m-CORE.setting:17977␤  in method initialize at src/gen/m-CORE.setting:18161␤  in method cue at src/gen/m-CORE.setting:18114␤  in method start at src/gen/m-CORE.setting:18341␤  in sub st…»

[19:42] <vendethiel> can I say that Rakudo* is (contains) "a stable version of Perl 6"?

[19:42] <vendethiel> or is that wishful thinking :) ?

[19:42] <vendethiel> (soon-to-be)?

[19:42] <lizmat> *is

[19:42] <lizmat> it's stable in most parts

[19:42] <segomos> r: $*SCHEDULER = ThreadPoolScheduler.new(:max_threads(Inf)); my $p = Promise.new;  start { sleep 500; $p.keep(True); }; await $p;

[19:42] <vendethiel> lizmat: my sentence is actually "r* is a distribution containing stable p6 and modules"

[19:42] <lizmat> just the async has still some quirks, I would say

[19:43] <camelia> rakudo-jvm ef3bb1: OUTPUT«Cannot unbox argument to '$permits' as a native int␤  in method new at gen/jvm/CORE.setting:17918␤  in method initialize at gen/jvm/CORE.setting:18102␤  in method cue at gen/jvm/CORE.setting:18055␤  in method start at gen/jvm/CORE.setting:18282␤  …»

[19:43] <camelia> ..rakudo-parrot ef3bb1: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Undeclared names:␤    Promise used at line 1␤    ThreadPoolScheduler used at line 1␤Undeclared routines:␤    await used at line 1␤    start used at line 1. Did you mean 'spurt'…»

[19:43] <camelia> ..rakudo-moar ef3bb1: OUTPUT«Failed to unbox object to integer␤  in method new at src/gen/m-CORE.setting:17977␤  in method initialize at src/gen/m-CORE.setting:18161␤  in method cue at src/gen/m-CORE.setting:18114␤  in method start at src/gen/m-CORE.setting:18341␤  in sub st…»

[19:44] <segomos> is that a bug or can i not really set ThreadPoolScheduler max_threads to Inf ?

[19:44] <vendethiel> oh, it's been 2 months since the last R* ?

[19:44] <vendethiel> is there a list of modules comprised in r* ?

[19:46] * TimToady was trying to figure out why we were talking about the R language here...

[19:46] <segomos> rakudo *

[19:46] <vendethiel> TimToady: I've left perl and am doing infographics now :)

[19:46] <segomos> i don't think he's talking about the statistical software

[19:47] <TimToady> well, I suppose it's potentially just a dialect of P6

[19:47] <vendethiel> so you're going to abduct me anyhow, eh ?

[19:47] <jnthn> segomos: YOu can't pass Inf there.

[19:48] <jnthn> segomos: No, I'm not going to fix that. That's insane.

[19:48] <segomos> i thought you or timotimo suggested i try doing that

[19:48] <jnthn> Should probably shove a type constraint in to make it fail sooner though.

[19:48] *** labster joined
[19:48] <jnthn> I'm allowed to be insane some of the time... :P I thought I suggested hunting what was hogging threads... :)

[19:48] <vendethiel> I don't understand why you can't use Inf as a native Int, really ;-). There's only one letter that's different :P

[19:49] <segomos> jnthn: you did and i traced that down and fixed that part, i still hang waiting on promises to return

[19:49] <segomos> vendethiel: it fails on a comparison of int to inf

[19:50] <vendethiel> segomos: I'm kidding :)

[19:50] <TimToady> it's only, what, 25¢ different

[19:50] *** kid_ left
[19:50] <segomos> lol

[19:51] <vendethiel> TimToady: considering here, "France Telecom" had "unlimited 300 mo 3g" phone subs, I need to correct you

[19:51] <TimToady> m: say ord('F') +^ ord('T')

[19:51] <camelia> rakudo-moar ef3bb1: OUTPUT«18␤»

[19:51] <TimToady> yeah, 25¢

[19:51] <TimToady> (2 bits)

[19:53] <TimToady> m: say (ord('F') +^ ord('T')).base(2)

[19:53] <camelia> rakudo-moar ef3bb1: OUTPUT«10010␤»

[19:53] <TimToady> there we go

[19:54] <segomos> that looks like -2

[19:56] <TimToady> in spots

[19:57] <TimToady> well, at least in two spots

[19:57] <TimToady> m: say (-2).base(2);  # curious

[19:57] <camelia> rakudo-moar ef3bb1: OUTPUT«-10␤»

[19:57] <segomos> btyler: i've added, in the ab.pl6 file, how to increase the threadpool available for the server - that should work for now

[19:58] <segomos> doesn't do 2s compliment?

[19:58] *** dayangkun left
[19:58] <TimToady> yes, but it's hard to print an infinite number of 1's

[19:58] <segomos> gues 2s compliment of 10010 is actually -14

[19:59] <segomos> m: Inf.base(2).say

[19:59] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!===␤Cannot coerce Inf or NaN to an Int␤»

[19:59] <segomos> m: (Inf - 1).base(2).say

[19:59] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!===␤Cannot coerce Inf or NaN to an Int␤»

[20:00] <TimToady> our arbitrary Int is 2's complement, and it's a trade secret how we store the infinite sequence of 0's for positive or 1's for negative :)

[20:01] <segomos> lol

[20:02] <segomos> i think i'm good with http::server::async for right now..it's not great but it's usable

[20:04] <segomos> ie, i'd like to figure out how to make it handle not exhausting the threadpool 

[20:04] *** donaldh left
[20:05] <segomos> jnthn: can $!max_threads be exposed in ThreadPoolScheduler?  

[20:05] <jnthn> segomos: Yes, no problem with that being introspectable

[20:05] *** brrt joined
[20:06] *** fhelmberger joined
[20:07] <TimToady> m: say so -1 +& $_ for 1,2,4,8....*

[20:07] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!=== Error while compiling /tmp/nf7Z9KFd6m␤Confused␤at /tmp/nf7Z9KFd6m:1␤------> say so -1 +& $_ for 1,2,4,8....*⏏<EOL>␤    expecting any of:␤        dotty method or postfix␤»

[20:07] *** breinbaa1 joined
[20:07] <TimToady> m: say so -1 +& $_ for 1,2,4,8...*

[20:07] <camelia> rakudo-moar ef3bb1: OUTPUT«(timeout)True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤True␤Tr…»

[20:07] <TimToady> m: say +so -1 +& $_ for 1,2,4,8...*

[20:07] <camelia> rakudo-moar ef3bb1: OUTPUT«(timeout)1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1…»

[20:07] <segomos> jnthn: not sure i understand that

[20:07] <TimToady> see, it's 1's all the wy up :)

[20:08] <TimToady> *way

[20:10] *** fhelmberger left
[20:10] <FROGGS> it is one's more all the way right

[20:11] *** itz left
[20:12] <TimToady> well, irc is vertically challenged

[20:12] *** jercos_ is now known as jercos

[20:12] <jnthn> segomos: I'll just patch it :)

[20:12] <TimToady> lizmat++ for turning her laptop on end :D

[20:13] <segomos> i've been trying some of the ^.attributes.get_value

[20:15] * FROGGS goes back to Archive::Tar

[20:15] <segomos> ahh..should be ^.attributes[].get_value

[20:15] <lizmat> FROGGS++

[20:16] <TimToady> you mean .^ ?

[20:16] <segomos> m: say $*SCHEDULER.^attributes

[20:16] <camelia> rakudo-moar ef3bb1: OUTPUT«Mu $!queue Mu $!thread_start_semaphore int $!loads Mu $!loads_lock Mu $!initial_threads Mu $!max_threads int $!started_any Callable &!uncaught_handler␤»

[20:16] <segomos> yea that is what i mean

[20:18] <segomos> m: say ThreadPoolScheduler.^attributes[5].get_value($*SCHEDULER)

[20:18] <camelia> rakudo-moar ef3bb1: OUTPUT«16␤»

[20:18] *** orafu left
[20:19] <dalek> rakudo/nom: ca77a3d | jnthn++ | src/core/ThreadPoolScheduler.pm:

[20:19] <dalek> rakudo/nom: Make initial/max threads introspectable.

[20:19] <dalek> rakudo/nom: 

[20:19] <dalek> rakudo/nom: As requested by segomos++.

[20:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ca77a3db56

[20:19] <dalek> rakudo/nom: f2060ea | jnthn++ | src/core/ThreadPoolScheduler.pm:

[20:19] <dalek> rakudo/nom: Ensure thread counts are Ints.

[20:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f2060eac50

[20:19] <segomos> thank you jnthn 

[20:19] *** orafu joined
[20:21] <vendethiel> scriptogram's code rendering is :(

[20:22] <vendethiel> it doesn't handle GHM, it seems

[20:22] *** dayangkun joined
[20:23] *** brrt left
[20:23] *** orafu left
[20:24] *** orafu joined
[20:26] *** molaf_ left
[20:29] <lizmat> vendethiel: example ?

[20:33] *** kaare_ left
[20:34] <timotimo> GHM is github flavored markdown?

[20:35] *** smls left
[20:37] <vendethiel> timotimo: yeah, GFM* would be more correcT.

[20:37] <FROGGS> fsdo correcT :P

[20:38] <vendethiel> lizmat: that's supposed to be on different lines : http://i.imgur.com/TgyAk0O.png

[20:38] *** orafu left
[20:38] *** orafu joined
[20:39] <vendethiel> m: say Inf.WHAT

[20:39] <camelia> rakudo-moar ef3bb1: OUTPUT«(Num)␤»

[20:40] <lizmat> m: say $Inf.WHAT

[20:40] <camelia> rakudo-moar ef3bb1: OUTPUT«(Num)␤»

[20:41] <masak> m: say $$Inf.WHAT

[20:41] <camelia> rakudo-moar ef3bb1: OUTPUT«(Num)␤»

[20:41] <masak> m: say $$$Inf.WHAT

[20:41] <camelia> rakudo-moar ef3bb1: OUTPUT«(Num)␤»

[20:42] <vendethiel> $$$ ? what is this, perl ?

[20:42] <masak> m: for 0..Inf -> $N { EVAL 'say ' ~ '$' x $N ~ 'Inf.WHAT' }

[20:43] <camelia> rakudo-moar ef3bb1: OUTPUT«(timeout)(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)␤(Num)…»

[20:43] <masak> om num num

[20:43] <jnthn> :P

[20:43] <vendethiel> .oO( It must've taken a pretty high number of tries to iterate on that joke )

[20:43] <TimToady> m: my term:<∞> = Inf;  say ∞

[20:43] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!===␤Type 'term:<∞>' is not declared␤at /tmp/uGyYl3px1l:1␤------> my term:<∞>⏏ = Inf;  say ∞␤Malformed my␤at /tmp/uGyYl3px1l:1␤------> my term:<⏏∞> = Inf;  say ∞␤  …»

[20:43] * masak is a bit tired

[20:43] <labster> m: $Inf = 3

[20:43] <yoleaux> 13 May 2014 22:07Z <retupmoca> labster: take a look at https://github.com/labster/perl6-File-Find-Duplicates/pull/2 when you get a chance :)

[20:43] <camelia> rakudo-moar ef3bb1: ( no output )

[20:43] <TimToady> m: my \term:<∞> = Inf;  say ∞

[20:43] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!=== Error while compiling /tmp/pTkPHQJGma␤Term definition requires an initializer␤at /tmp/pTkPHQJGma:1␤------> my \term⏏:<∞> = Inf;  say ∞␤    expecting any of:␤        scoped declarator␤»

[20:44] <jnthn> Hmm

[20:44] <TimToady> n: my \term:<∞> = Inf;  say ∞

[20:44] <camelia> niecza v24-109-g48a8de3: OUTPUT«Inf␤»

[20:44] <TimToady> niecza++

[20:44] <jnthn> m: my \∞ = Inf; say ∞

[20:44] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!=== Error while compiling /tmp/wd6G8_w9VB␤Malformed my␤at /tmp/wd6G8_w9VB:1␤------> my ⏏\∞ = Inf; say ∞␤    expecting any of:␤        scoped declarator␤»

[20:44] <labster> oh hi yoleaux (merged that a while back)

[20:44] <FROGGS> hi labster 

[20:45] <labster> hi FROGGS.  I’m here at YAPC::NA, trying to hack Lingua::Number back into working shape.

[20:45] <TimToady> m: sub term:<∞>() { Inf }; say ∞

[20:45] <camelia> rakudo-moar ef3bb1: OUTPUT«Inf␤»

[20:45] <TimToady> m: sub term:<∞>() { Inf }; say ∞()

[20:45] <camelia> rakudo-moar ef3bb1: OUTPUT«Cannot find method 'postcircumfix:<( )>'␤  in block  at /tmp/hg37I7T1cR:1␤␤»

[20:45] <vendethiel> I'm not sure if the tutorial should be newbie-oriented or developer-oriented

[20:46] <FROGGS> labster: is it fun? I can't tell :o)

[20:46] <vendethiel> maybe I should make a learnXinYminutes version ?

[20:46] <lizmat> XinY sounds fine to me

[20:46] <labster> That’s your problem for not coming this year :P

[20:46] <vendethiel> I'll finish writing that introductory one for now :)

[20:46] <FROGGS> labster: I know :/

[20:47] <lizmat> I once started on some Lightning Talks called "Perl 5 -> 6 Nuggets"

[20:47] <FROGGS> but making a trip that far is kinda hard for me

[20:47] <FROGGS> (small kids, small woman, you see)

[20:47] <vendethiel> is there a multiline-input stuff for the REPL ?

[20:47] <vendethiel> like ^J ?

[20:48] <FROGGS> ␤ <-- ?

[20:48] <FROGGS> or does that only work here?

[20:48] <vendethiel> FROGGS: no clue how to do that on windows :/

[20:48] <lizmat> m: say $Nan.WHAT

[20:48] <moritz> that's a camelia feature

[20:48] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!=== Error while compiling /tmp/OshV0vaW9t␤Variable '$Nan' is not declared␤at /tmp/OshV0vaW9t:1␤------> say $Nan.WHAT⏏<EOL>␤    expecting any of:␤        method arguments␤»

[20:48] <TimToady> I think that's only for irc

[20:48] <lizmat> m: say $NaN.WHAT

[20:48] <camelia> rakudo-moar ef3bb1: OUTPUT«(Num)␤»

[20:48] <TimToady> the REPL is really kind of done wrongish

[20:49] <TimToady> it should be called out of the parser when it knows it's at a suitable state to interpret

[20:50] *** Rotwang left
[20:50] <TimToady> it's rather like intuiting ; in those languages that do

[20:50] <labster> m: $NaN = "definitely not a number”; say $NaN

[20:50] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!=== Error while compiling /tmp/Ckvomnz5ab␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/Ckvomnz5ab:1␤------> aN = "definitely not a number”; say $NaN⏏<EOL>␤    expect…»

[20:50] *** orafu left
[20:50] <labster> m: $NaN = "definitely not a number"; say $NaN

[20:50] <camelia> rakudo-moar ef3bb1: OUTPUT«definitely not a number␤»

[20:51] <timotimo> m: my \NaN = "definitely not a number"; say NaN;

[20:51] <camelia> rakudo-moar ef3bb1: OUTPUT«NaN␤»

[20:51] <timotimo> m: my term:<NaN> { "nope" }; say NaN

[20:51] <camelia> rakudo-moar ef3bb1: OUTPUT«===SORRY!===␤Type 'term:<NaN>' is not declared␤at /tmp/vhjBvOJGer:1␤------> my term:<NaN>⏏ { "nope" }; say NaN␤Malformed my␤at /tmp/vhjBvOJGer:1␤------> my term:<Na⏏N> { "nope" }; say NaN…»

[20:51] <timotimo> m: my sub term:<NaN> { "nope" }; say NaN

[20:51] <camelia> rakudo-moar ef3bb1: OUTPUT«nope␤»

[20:53] *** raiph joined
[20:56] <vendethiel> okay, so, that's my first take on what I want it to look like : http://scriptogr.am/vendethiel/post/and-perl-6-came-forth

[20:56] <vendethiel> fell free to .tell me my mistakes, cause I sure made a lot

[20:56] <vendethiel> (I decided to keep the name I used for my presentation, because I like the sound. not sure why ...)

[20:58] <jnthn> "you can use say, like so" - but code below uses print instead.

[20:59] <vendethiel> oh, hahaha. thanks :)

[20:59] <vendethiel> I should've expected this

[20:59] <jnthn> Also, in the operator examples, we tend to put whitespace around infixes in Perl 6 by default

[20:59] <jnthn> May be wise to set newbies off in that direction too

[21:00] * vendethiel almost pasted all his blogpost in IRC

[21:00] <vendethiel> fixed, as well

[21:01] *** orafu joined
[21:04] <segomos> vendethiel: your second code block mentions 'say' and then uses 'print'

[21:04] <vendethiel> segomos: jnthn++ made me fix this already :)

[21:05] <segomos> ah missed that

[21:08] <FROGGS> continue BLOCK in P5 is like a LAST phaser?

[21:09] <segomos> phaser?

[21:09] <FROGGS> m: for ^3 { say $_; LAST { say 42 } }

[21:09] <camelia> rakudo-moar ef3bb1: OUTPUT«0␤1␤2␤42␤»

[21:09] <FROGGS> m: for ^3 { say $_; FIRST { say 42 } }

[21:09] <camelia> rakudo-moar ef3bb1: OUTPUT«42␤0␤1␤2␤»

[21:09] <FROGGS> m: for ^3 { say $_; NEXT { say 42 } }

[21:09] <camelia> rakudo-moar ef3bb1: OUTPUT«0␤42␤1␤42␤2␤42␤»

[21:10] <segomos> interesting

[21:10] <FROGGS> ahh no, continue is like NEXT

[21:10] <lizmat> indeed, check perldoc -f continue

[21:11] *** Alula_ left
[21:12] *** Alula_ joined
[21:12] *** uniejo joined
[21:13] *** rurban joined
[21:14] <segomos> btyler: with jnthn's change, you should be able to run HTTP-Server-Async with a sane number of max_threads on the scheduler (the default) without it hanging in jvm.  no matter what wrk settings you use.  you will get a lot of errors if you try to use it with high concurrency and low threads

[21:14] <btyler> segomos: that mirrors what I found poking at it this afternoon

[21:15] <btyler> oh, I need to update :)

[21:15] <labster> w00t, unbusted Lingua::Number

[21:16] <FROGGS> labster++

[21:16] <labster> FROGGS: anything I can do for Archive::Tar?

[21:17] <FROGGS> labster: well, if you want to port it when I am sleeping :o)

[21:17] <FROGGS> it is here: https://github.com/FROGGS/p6-Archive-Tar

[21:17] <labster> ok will do lol

[21:18] <FROGGS> the test I use is: https://gist.github.com/FROGGS/b0104f6f211880db6a07

[21:19] <FROGGS> about 50% of the code is translated, and it already does something

[21:19] <FROGGS> (for that simple test)

[21:19] *** rurban left
[21:20] <dalek> rakudo/nom: 36265c2 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[21:20] <dalek> rakudo/nom: Remove hack for $NaN: constant: seems to work now

[21:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36265c2a4a

[21:23] *** uniejo left
[21:23] *** uniejo joined
[21:23] *** amkrankruleuen left
[21:28] <labster> thanks for the commit bit FROGGS, hopefully I’ll be able to use it

[21:28] <FROGGS> :o)

[21:28] <FROGGS> I am trying to list the content of that tar now...

[21:29] *** virtualsue left
[21:30] <labster> I’m currently reading S11 so I can fix the module compunit stuff that lizmat broke for me

[21:32] *** PerlJam joined
[21:36] <FROGGS> cool, except for a wrongish encoded filename I can get the of files...

[21:36] <FROGGS> and something is not a number but should one it seems...

[21:36] <FROGGS> gnight o/

[21:39] <lizmat> gnight FROGGS 

[21:45] <timotimo> .tell vendethiel "Just enter submit to evaluate the code you typed." that "enter submit" sounds weird/wrong

[21:45] <yoleaux> timotimo: I'll pass your message to vendethiel.

[21:46] <timotimo> .tell vendethiel i'm not sure if this is the right thing to tell a newbie, but the reason why { say "hello world!" } only outputs "hello world!" and not 1 (the return value of say) is because that piece of code wrote something to stdout and then the return value will not be printed

[21:46] <yoleaux> timotimo: I'll pass your message to vendethiel.

[21:46] *** ren1us joined
[21:47] *** emilper joined
[21:49] <segomos> oo nativecall+libxml, cool!

[21:50] <sergot> m: sub a(*%x) { say %x; }; a(b => 'b'); a('a' => 'a');

[21:50] <camelia> rakudo-moar f2060e: OUTPUT«("b" => "b").hash␤Too many positional parameters passed; got 1 but expected 0␤  in sub a at /tmp/22U3tLLD0h:1␤  in block  at /tmp/22U3tLLD0h:1␤␤»

[21:51] <sergot> is it ok?

[21:51] <jnthn> Yes; if you quote the left hand side it's no longer a named arg.

[21:52] <jnthn> But instead a (positional) Pair argument

[21:52] <jnthn> Whether you find that ok is an entirely different matter I guess, but it's how it is... ;-)

[21:55] <sergot> jnthn++ thanks

[21:56] *** brrt joined
[21:56] <lizmat> gnight jnthn!

[21:56] <brrt> i guess good night too :-)

[21:57] <emilper> hello

[21:57] <emilper> here are the details about the p6 segmentation fault when using libgsl with NativeCall that I mentioned yesterday:  https://gist.github.com/emil-perhinschi/5ad12510fa05af7f7439 

[21:58] <PerlJam> sergot: that's one of the reasons I tend to prefer the colon pair form.  You're slightly less likely to accidentally quote the LHS  ;)

[21:59] <brrt> so, in deserialisation

[22:00] <brrt> i'll see if i can spot something fishy

[22:01] <timotimo> data=0x0

[22:01] <timotimo> looks fishy to me

[22:01] <dalek> rakudo/nom: f445f8a | (Elizabeth Mattijsen)++ | src/core/ (15 files):

[22:01] <dalek> rakudo/nom: Get rid of the $Inf hack

[22:01] <dalek> rakudo/nom: 

[22:01] <dalek> rakudo/nom: Turns out +Inf breaks in the early settings somehow in the "mast" stage with:

[22:01] <dalek> rakudo/nom: Code ref does not exist in serialization context

[22:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f445f8ad32

[22:03] *** ajr_ left
[22:03] *** LLamaRid1r left
[22:04] *** breinbaa1 left
[22:04] <brrt> no, data may be 0

[22:04] <brrt> if it's zero it is taken from the current compilation unit

[22:05] <brrt> is that silly... maybe yes

[22:05] <timotimo> OK

[22:06] <sergot> PerlJam++: right, thanks :)

[22:09] <brrt> so, stables are deserialized before objects, but after closures

[22:12] <brrt> ok, direct problem is that cc is 0

[22:12] <brrt> cc is MVMContainerConfiguration

[22:12] <brrt> it is acquired by a string key, that string key is read from the serialized data

[22:13] <brrt> supposing that it isn't the whole stream that is corrupt, i'd like to know what that string is

[22:14] <brrt> and.. i'd also like to know what keys are in fact in the container registry

[22:15] <emilper> is that something I can do ? don't know much gdb

[22:18] <brrt> you could set a conditional breakpoint on line 2137 of src/6model/serialization.c when i is 9

[22:18] <brrt> then step until line 1937 (or set a breakpoint there)

[22:20] *** Bucciarati left
[22:21] *** Bucciarati joined
[22:22] <brrt> emilper - it may also help if you make this an issue rather than a gist :-)

[22:24] <emilper>  ... in which project ? moarvm ?

[22:24] <brrt> yes

[22:26] <brrt> it seems to me that nativecall is either creating corrupt serialized bytecode or that it relies on a container configuration that isn't yet setup

[22:26] *** bluescreen10 left
[22:26] <brrt> but that depends on the value of our string :-)

[22:27] <brrt> if it's something weird like null, then it's likely to be bytecode corruption earlier

[22:27] <brrt> if it is a human-readable string, it's likely a setup issue

[22:28] <brrt> or even a typo issue, those happen :-)

[22:28] <brrt> and i sure hope it is the latter

[22:31] <emilper> if it is not obvious I never messed up with moarvm code before or written much C either 

[22:32] <emilper> https://github.com/MoarVM/MoarVM/issues/108

[22:32] *** uniejo left
[22:32] <brrt> well, fortunately there are people who have :-)

[22:32] *** rurban joined
[22:33] <brrt> seriously you've been a help just finding this out :-)

[22:33] <brrt> and posting the stack trace, etc

[22:34] *** uniejo joined
[22:35] <brrt> not quite enough people are using perl6-on-moarvm-with-NativeCall for us to have found all bugs just yet

[22:37] <timotimo> definitely

[22:39] *** vendethiel- joined
[22:40] *** vendethiel left
[22:40] *** treehug88 left
[22:41] *** lizmat left
[22:43] <emilper> (gdb) break src/6model/serialization.c:2137 if i = 9

[22:43] <emilper> Breakpoint 1 at 0x7ffff79b56c5: file src/6model/serialization.c, line 2137.

[22:43] <emilper> (gdb) break src/6model/serialization.c:1937

[22:43] <emilper> Breakpoint 2 at 0x7ffff79b4b28: file src/6model/serialization.c, line 1937.

[22:43] <emilper> (gdb) run

[22:43] <emilper> Starting program: /home/emilper/safedelete/bin/moar --libpath=/home/emilper/safedelete/languages/nqp/lib/ --libpath=/home/emilper/safedelete/languages/perl6/runtime --libpath=/home/emilper/safedelete/languages/nqp/lib/ /home/emilper/testing_ground/perl6/native_call.moarvm

[22:43] <emilper> [Thread debugging using libthread_db enabled]

[22:43] <emilper> Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

[22:44] <emilper> Breakpoint 1, MVM_serialization_deserialize (tc=0x6035e0, sc=0x7ffff62f69a8, string_heap=0x7ffff62f6ae0, codes_static=0x7ffff62f6b18, repo_conflicts=0x7ffff62f6aa8, data=0x0) at src/6model/serialization.c:2137

[22:44] <emilper> 2137	        deserialize_stable(tc, reader, i, MVM_sc_get_stable(tc, sc, i));

[22:44] <emilper> (gdb) c

[22:44] <emilper> Continuing.

[22:44] <emilper> Unhandled exception: No STable at index 9

[22:44] <emilper>    at <unknown>:1  (/home/emilper/safedelete/languages/nqp/lib/ModuleLoader.moarvm::36)

[22:44] *** vendethiel- left
[22:44] <emilper>  from <unknown>:1  (/home/emilper/testing_ground/perl6/native_call.moarvm::7)

[22:44] <emilper> [Inferior 1 (process 10982) exited with code 01]

[22:44] <emilper> (gdb) 

[22:44] <emilper> The program is not being run.

[22:45] *** uniejo left
[22:48] <emilper> perl6-on-moarvm-with-NativeCall is gorgeous, it makes it worth my time to learn C 

[22:49] *** labster left
[22:50] <brrt> grumpy me would say that C already makes it worth your time to learn C :-)

[22:51] <brrt> hmm

[22:51] <brrt> that.... looks a bit more like corruption, then, to me

[22:51] <brrt> because first the STable was there an now it isn't

[22:52] *** spider-mario left
[22:52] *** lizmat joined
[22:52] <emilper> you are right, just perl 5 helps more with deadlines :-/

[22:53] <brrt> that is probably true :-)

[22:53] * brrt knows deadline stress only too well]

[23:03] *** gfldex_ is now known as gfldex

[23:05] *** btyler left
[23:05] <emilper> NativeCall looks to me like the "killer app" for p6 

[23:05] *** wookie left
[23:08] <brrt> really? that's really cool to hear :-)

[23:08] <brrt> i wasn't involved in nativecall, mind you, but still

[23:09] *** logie joined
[23:11] *** matija left
[23:11] *** sjohnson left
[23:11] *** tadzik left
[23:11] *** sjohnson joined
[23:12] *** stux left
[23:12] *** tadzik joined
[23:12] *** stux joined
[23:13] *** matija joined
[23:13] *** logie__ joined
[23:13] *** logie__ left
[23:16] *** brrt left
[23:18] *** logie__ joined
[23:18] *** logie__ left
[23:22] *** rurban left
[23:24] *** brrt joined
[23:24] *** brrt left
[23:33] *** immortal joined
[23:35] *** erkan left
[23:38] *** xenoterracide joined
[23:42] *** gfldex left
[23:53] *** jnap left
[23:53] *** logie left
[23:58] *** epochbell joined
