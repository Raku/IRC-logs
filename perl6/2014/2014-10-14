[00:03] *** Hor|zon left
[00:23] *** ifim` joined
[00:25] *** ifim left
[00:37] *** BenGoldberg joined
[00:47] *** _slade_ joined
[00:48] *** raiph left
[00:58] *** ifim` left
[01:10] *** pdcawley left
[01:10] *** pdcawley joined
[01:11] *** Sqirrel left
[01:21] *** Mso150 joined
[01:44] *** Mso150 left
[01:45] *** Mso150 joined
[01:48] *** pdcawley left
[01:49] *** pdcawley joined
[01:54] *** Mso150 left
[01:58] *** kurahaupo joined
[01:58] *** _slade_ left
[01:59] *** _slade_ joined
[01:59] *** Hor|zon joined
[02:04] *** Hor|zon left
[02:20] *** cognome left
[02:20] *** chenryn joined
[02:22] *** lucs joined
[02:30] <gtodd> azawawi: I don't know about an API but masak did something like this for his blog posts:

[02:30] <gtodd> m: sub REPL($line) {say "> $line"; my $result = EVAL $line; say $result if defined $result; } ; REPL "('a'.. 'd') <<~<<  ^6;";

[02:30] <camelia> rakudo-moar 8b3e8c: OUTPUT«> ('a'.. 'd') <<~<<  ^6;␤a0 b1 c2 d3 a4 b5␤»

[02:30] <gtodd> ;-)

[02:44] <gtodd> see https://gist.github.com/masak/f865b7d9dd33e535b501  

[02:45] *** colomon_ joined
[02:45] *** baest_ joined
[02:46] <gtodd> azawawi: farabi6++  ;-)

[02:47] *** clkao_ joined
[02:48] *** bcode left
[02:48] *** bcode_ joined
[02:48] *** broquain1 joined
[02:48] *** retupmoc1 joined
[02:49] *** lucs_ joined
[02:49] *** isacloud______ joined
[02:49] *** Ulti_ joined
[02:49] *** apejens_ joined
[02:49] *** noganex joined
[02:49] *** sjn_ joined
[02:49] *** dagurval_ joined
[02:49] *** xfix joined
[02:50] *** bonsaikitten joined
[02:50] *** jercos_ joined
[02:50] *** bcode_ is now known as bcode

[02:50] *** nine_ joined
[02:50] *** simcop2387_ joined
[02:51] *** pdcawley_ joined
[02:51] *** japhb_ joined
[02:51] *** Juerd_ joined
[02:51] *** hoelzro_ joined
[02:51] *** sftp_ joined
[02:52] *** sorear_ joined
[02:52] *** exodist_ joined
[02:53] *** ntln- joined
[02:54] *** pdcawley left
[02:54] *** camelia left
[02:54] *** Exodist left
[02:54] *** lucs left
[02:54] *** sftp left
[02:54] *** apejens left
[02:54] *** geekosaur left
[02:54] *** sjn left
[02:54] *** hobbs left
[02:54] *** integral left
[02:54] *** hoelzro left
[02:54] *** jercos left
[02:54] *** exodist_ is now known as Exodist

[02:54] *** sftp_ is now known as sftp

[02:54] *** colomon_ is now known as colomon

[02:54] *** simcop2387_ is now known as simcop2387

[02:54] *** Juerd_ is now known as Juerd

[02:54] *** mtj joined
[02:55] *** isacloud______ is now known as isacloud

[02:55] *** clkao_ is now known as clkao

[02:56] *** apejens_ is now known as apejens

[02:57] *** geekosaur joined
[02:58] *** avuserow joined
[03:00] *** mephinet joined
[03:00] *** lue joined
[03:02] *** eternaleye left
[03:05] *** vukcrni joined
[03:06] *** eternaleye joined
[03:06] *** [Tux] joined
[03:09] *** camelia joined
[03:10] *** ChanServ sets mode: +v camelia

[03:11] *** ezra1 joined
[03:14] *** ezra1 left
[03:15] *** [[[j4jackj]]] joined
[03:17] *** cibs left
[03:20] *** mauke_ joined
[03:20] *** mauke_ left
[03:20] *** mauke_ joined
[03:21] *** [[[j4jackj]]] is now known as j4jackj

[03:21] *** dylanwh joined
[03:21] *** oetiker joined
[03:23] *** hobbs joined
[03:24] *** cibs joined
[03:24] *** chenryn left
[03:24] *** mauke left
[03:27] *** sorear_ left
[03:28] *** mauke_ is now known as mauke

[03:28] *** PZt joined
[03:30] *** molaf left
[03:33] *** integral joined
[03:34] *** sorear joined
[03:35] *** bjz joined
[03:42] *** kaare_ joined
[03:50] *** xenoterracide__ left
[03:51] *** cognome joined
[03:54] *** chenryn joined
[04:01] *** Hor|zon joined
[04:01] *** chenryn left
[04:05] *** pmnexus joined
[04:05] *** labster joined
[04:05] *** _slade_ left
[04:05] *** _slade joined
[04:05] *** _slade is now known as _slade_

[04:06] <pmnexus> Good morning #perl6

[04:06] *** Hor|zon left
[04:10] *** kaleem joined
[04:10] *** jack_rabbit joined
[04:15] *** pyrimidine joined
[04:17] <pyrimidine> FROGGS: about?

[04:19] <pyrimidine> .tell FROGGS I filed RT #122971 re: the :nl parameter in IO.open.  

[04:19] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122971

[04:19] <yoleaux> pyrimidine: I'll pass your message to FROGGS.

[04:20] *** pyrimidine left
[04:21] *** kaare_ left
[04:26] *** anaeem1_ joined
[04:31] *** xenoterracide__ joined
[04:32] <pmnexus> Afk, szg->fra

[04:39] *** pmnexus left
[04:42] *** BenGoldberg left
[04:45] *** ggoebel1111119 joined
[04:57] <timotimo> o/ from an early morning

[04:57] *** chenryn joined
[04:58] *** anaeem___ joined
[04:58] *** anaeem1_ left
[05:02] *** chenryn left
[05:02] *** eternaleye left
[05:03] *** eternaleye joined
[05:08] *** kaleem left
[05:15] *** bjz left
[05:18] *** flaviusb joined
[05:18] *** xenoterracide__ left
[05:18] *** chenryn joined
[05:19] *** kaare_ joined
[05:40] *** chenryn left
[05:40] *** lue left
[05:40] *** simcop2387 left
[05:46] *** chenryn joined
[05:46] *** lue joined
[05:46] *** simcop2387 joined
[05:46] *** dj_goku joined
[05:46] *** Util joined
[05:46] *** ugexe joined
[05:46] *** btyler_ joined
[05:46] *** salv0 joined
[05:46] *** cotto joined
[05:48] *** anaeem___ left
[05:52] *** anaeem1 joined
[05:54] *** chenryn left
[05:58] *** anaeem1 left
[06:01] *** chenryn joined
[06:01] *** Hor|zon joined
[06:01] *** anaeem1 joined
[06:03] *** anaeem1__ joined
[06:04] *** SamuraiJack joined
[06:05] *** gfldex joined
[06:05] *** anaeem1 left
[06:06] *** pmnexus joined
[06:06] *** Hor|zon left
[06:06] *** pepl joined
[06:10] <pmnexus> Good morning #perl6

[06:11] *** anaeem1__ left
[06:12] *** baest_ is now known as baest

[06:12] *** bartolin joined
[06:12] *** anaeem1_ joined
[06:13] *** mephinet left
[06:15] *** yeahnoob joined
[06:18] *** xfix is now known as notfix

[06:19] *** anaeem1_ left
[06:20] *** gfldex left
[06:20] *** anaeem1 joined
[06:24] *** kaleem joined
[06:26] *** pepl left
[06:32] *** darutoko joined
[06:34] <FROGGS> .botsnack

[06:34] <yoleaux> 04:19Z <pyrimidine> FROGGS: I filed RT #122971 re: the :nl parameter in IO.open.

[06:34] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122971

[06:34] <yoleaux> :D

[06:35] *** broquain1 is now known as broquaint

[06:37] <dalek> roast: ae245a6 | usev6++ | S05-match/capturing-contexts.t:

[06:37] <dalek> roast: Add test for RT #83508

[06:37] <dalek> roast: review: https://github.com/perl6/roast/commit/ae245a65f6

[06:37] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=83508

[06:37] *** mephinet joined
[06:38] <FROGGS> morning o/

[06:39] <bartolin> good morning FROGGS \o

[06:40] <FROGGS> morning bartolin 

[06:42] *** rindolf joined
[06:58] *** abraxxa joined
[07:00] <tadzik> morning

[07:00] <FROGGS> tadzik: morning, I have missed you :o)

[07:00] <tadzik> :)

[07:00] <tadzik> I wasn't away that long :)

[07:00] <tadzik> or maybe I was

[07:00] <tadzik> maybe I slept through the last 3 months

[07:01] <FROGGS> well, you were not in Salzburg

[07:01] <tadzik> ah, that's true :(

[07:04] *** pepl joined
[07:06] <dalek> roast: 7396503 | usev6++ | S32-exceptions/misc.t:

[07:06] <dalek> roast: Add test for RT #88748

[07:06] <dalek> roast: review: https://github.com/perl6/roast/commit/7396503e24

[07:06] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=88748

[07:06] *** Mso150 joined
[07:09] *** rurban joined
[07:12] *** azawawi joined
[07:12] <azawawi> good morning #perl6

[07:12] <yoleaux> 02:14Z <gtodd> azawawi: I guess it is not a REPL "API" but masak did this -->  https://gist.github.com/masak/f865b7d9dd33e535b501   :-D

[07:13] <azawawi> gtodd: true but does it hold state? or remember variables?

[07:14] *** cognome left
[07:14] *** zakharyas joined
[07:15] *** cognome joined
[07:16] <timotimo> o/

[07:17] <pmnexus> o/

[07:17] <FROGGS> o/

[07:18] *** cognome_ joined
[07:18] <pmnexus> In case people missed it in scrollback : https://gist.github.com/pmichaud/460bc17afcc5ca93b6b1

[07:19] *** cognome left
[07:19] *** lizmat joined
[07:19] <FROGGS> ahh, it's you! :D

[07:19] * FROGGS is reading now

[07:20] <masak> pmichaud++ # draft report

[07:20] <pmnexus> Yes, I'm logged in from my phone :-)

[07:20] <pmnexus> Awaiting boarding of flight fra->dfw

[07:21] <masak> (morgens, #perl6)

[07:21] *** leont joined
[07:22] <timotimo> we seem to not have any tests for proto tokens in grammars with multiple implementations

[07:23] <timotimo> er, i mean, with multi tokens that have signatures

[07:24] *** woolfy joined
[07:24] <pmnexus> I'm hoping to have power outlet on plane for extended writing.  dfw->fra had power outlet, so there's hope

[07:26] <timotimo> pmnexus: i see what you did there: "people are eager for it"

[07:26] *** FROGGS_ joined
[07:26] *** FROGGS left
[07:27] <pmnexus> timotimo: :-D

[07:28] <timotimo> m: youhave: my $word and my @xe &(my &bow);

[07:28] <camelia> rakudo-moar 8b3e8c: ( no output )

[07:28] <timotimo> actually, |bow seems more appropriate

[07:28] <timotimo> m: youhave: my $word and my @xe &(my |bow);

[07:28] <camelia> rakudo-moar 8b3e8c: OUTPUT«===SORRY!=== Error while compiling /tmp/zLkmjNDkyD␤Malformed my␤at /tmp/zLkmjNDkyD:1␤------> youhave: my $word and my @xe &(my ⏏|bow);␤    expecting any of:␤        scoped declarator␤»

[07:28] <timotimo> hah, yeah

[07:28] <timotimo> m: youhave: my $word and my @xe and (my |bow);

[07:28] <camelia> rakudo-moar 8b3e8c: OUTPUT«===SORRY!=== Error while compiling /tmp/MAumbZZOAV␤Malformed my␤at /tmp/MAumbZZOAV:1␤------> youhave: my $word and my @xe and (my ⏏|bow);␤    expecting any of:␤        scoped declarator␤»

[07:28] <timotimo> interesting, we can only get a capture in a signature list then

[07:29] <timotimo> yeah that makes sense

[07:29] <timotimo> m: youhave: my $word and my @xe and (my \bow);

[07:29] <camelia> rakudo-moar 8b3e8c: OUTPUT«===SORRY!=== Error while compiling /tmp/GECODjIN_z␤Term definition requires an initializer␤at /tmp/GECODjIN_z:1␤------> ouhave: my $word and my @xe and (my \bow⏏);␤    expecting any of:␤        scoped declar…»

[07:29] <timotimo> m: youhave: my $word and my @xe and (my \bow =0)

[07:29] <camelia> rakudo-moar 8b3e8c: ( no output )

[07:29] *** FROGGS_ is now known as FROGGS

[07:30] <timotimo> m: class You { has $word; has @xe; has &bow }

[07:30] <camelia> rakudo-moar 8b3e8c: ( no output )

[07:31] *** _slade_ left
[07:34] <dalek> Perlito: ef7a08d | (Flavio S. Glock)++ | misc/typeglob/import.pl:

[07:34] *** azawawi left
[07:34] <dalek> Perlito: Perlito5 - typeglob vs. import behaviour investigation

[07:34] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/ef7a08d327

[07:37] *** Mso150 left
[07:38] *** virtualsue joined
[07:38] *** FROGGS left
[07:38] *** Mso150 joined
[07:45] *** kjs_ joined
[07:46] *** grondilu joined
[07:47] <timotimo> m: grammar Test { proto token Foo(Int) {*}; token Foo:sym<a>(Int $a) { "a" }; token Foo:sym<b>(Int $a) { "b" } }; say Test.parse("a", :rule<Foo>);

[07:48] <camelia> rakudo-moar 8b3e8c: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in regex Foo at /tmp/kAsQHX1NCU:1␤  in method parse at src/gen/m-CORE.setting:14040␤  in block <unit> at /tmp/kAsQHX1NCU:1␤␤»

[07:48] <timotimo> ven++ stumbled upon this

[07:51] * masak submits rakudobug

[07:53] *** araujo left
[07:55] <masak> waitwait.

[07:55] <masak> why would you expect any different above?

[07:56] <masak> .parse calls rule Foo as the entry point. it does so in the default way, with no extra arguments.

[07:56] <masak> hence, since Foo takes one parameter, there are too few positionals passed.

[07:56] <timotimo> oh, derp.

[07:56] <timotimo> gimme a second.

[07:57] <timotimo> m: grammar Test { token TOP { <Foo(1)> }; proto token Foo(Int) {*}; token Foo:sym<a>(Int $a) { "a" }; token Foo:sym<b>(Int $a) { "b" } }; say Test.parse("a", :rule<Foo>);

[07:57] <camelia> rakudo-moar 8b3e8c: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in regex Foo at /tmp/gavfFhMioV:1␤  in method parse at src/gen/m-CORE.setting:14040␤  in block <unit> at /tmp/gavfFhMioV:1␤␤»

[07:57] <timotimo> m: grammar Test { token TOP { <Foo(1)> }; proto token Foo(Int) {*}; token Foo:sym<a>(Int $a) { "a" }; token Foo:sym<b>(Int $a) { "b" } }; say Test.parse("a");

[07:57] <camelia> rakudo-moar 8b3e8c: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in regex Foo:sym<a> at /tmp/4zOxzv1wQ9:1␤  in any !protoregex at gen/moar/stage2/QRegex.nqp:809␤  in regex Foo at /tmp/4zOxzv1wQ9:1␤  in regex TOP at /tmp/4zOxzv1wQ9:1␤  in method parse…»

[07:57] <masak> I think if you want to call Foo with arguments, you have to do it from within the grammar.

[07:57] <timotimo> that should work, right?

[07:57] <masak> oh, ok.

[07:59] <masak> yes.

[07:59] <pmnexus> It's very likely to be NYI, I think

[07:59] <masak> reporting it now.

[07:59] <timotimo> huh

[07:59] <timotimo> aren't we using something like that in rakudo's own grammar all the time?

[08:00] <timotimo> also, ven++ found this:

[08:00] <pmnexus> A proto regex with params? Could be, but v it'd be new to me

[08:00] *** ptc_p6 joined
[08:01] <timotimo> m: role A[::T] { subset Test of Int }; say A[Int]::Test; # is this the right way to write this?

[08:01] <pmnexus> Also, Rakudo doesn't compile Rakudo's grammar. :-)

[08:01] <camelia> rakudo-moar 8b3e8c: OUTPUT«===SORRY!=== Error while compiling /tmp/XqDHJFTQEu␤Two terms in a row␤at /tmp/XqDHJFTQEu:1␤------> [::T] { subset Test of Int }; say A[Int]⏏::Test; # is this the right way to write␤    expecting any of:␤    …»

[08:01] <timotimo> pmnexus: that's true as well :)

[08:01] *** araujo joined
[08:01] *** abraxxa left
[08:02] *** Hor|zon joined
[08:02] <masak> m: role A[::T] { subset Test of Int }; say A::Test

[08:02] <camelia> rakudo-moar 8b3e8c: OUTPUT«Could not find symbol '&Test'␤  in method <anon> at src/gen/m-CORE.setting:13622␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2725␤  in any find_method at src/gen/m-Metamodel.nqp:988␤  in block <unit> at /tmp/3cm_yHSIJR:1␤␤»

[08:03] *** azawawi joined
[08:03] *** zakharyas left
[08:04] <masak> intuitively I'd expect A[Int]::Test to work.

[08:04] *** denis_boyun_ joined
[08:04] *** ghostlines joined
[08:05] *** abraxxa joined
[08:06] <timotimo> me, too. and ven, too

[08:06] *** azawawi left
[08:06] *** Hor|zon left
[08:06] * masak submits rakudobug

[08:09] <pmnexus> They're boarding the flight 15 people at a time... This may take a while.

[08:10] *** kjs_ left
[08:10] * masak .oO( decaquintuplishly )

[08:11] <moritz> pmnexus: congestion avoidance, probably

[08:12] *** Hor|zon joined
[08:12] <pmnexus> Has something to do with plane arriving late and needing cleaning, according to the announcements

[08:13] <tadzik> heheh, I've seen that

[08:13] <tadzik> "we're sorry, the flight will be delayed because it arrived a wee bit late"

[08:13] <tadzik> and through the window you can see the airport stuff forcing the plane door open...

[08:13] <tadzik> s/stuff/staff/

[08:14] * masak .oO( if you're the lucky one among your group of 15, you get to clean your section! whee! )

[08:17] *** psch joined
[08:18] <psch> hi #perl6 o/

[08:18] *** lizmat left
[08:20] <psch> i saw the proto with args thing, and thought i knew something about that

[08:20] <psch> but what i know fails as well, albeit differently

[08:20] <psch> m: grammar Test { proto token Foo(Int) {*}; token Foo:sym<a>(Int $a) { "a" }; token Foo:sym<b>(Int $a) { "b" } }; say Test.parse("a", :rule<Foo>, :args(5))

[08:20] <camelia> rakudo-moar 8b3e8c: OUTPUT«Type check failed in binding $args; expected 'Parcel' but got 'Int'␤  in method parse at src/gen/m-CORE.setting:14038␤  in block <unit> at /tmp/OXbquIFgXu:1␤␤»

[08:20] <psch> namely :args for .parse

[08:20] <pmnexus> They let me on the plane. :-)

[08:21] *** woolfy left
[08:21] *** woolfy joined
[08:21] *** lizmat joined
[08:21] *** notfix is now known as xfix

[08:22] <pmnexus> And yes, the seat seems to have power outlet.

[08:22] <timotimo> \o/

[08:23] <masak> power to the pm! \o/

[08:24] <moritz> power to the nexus!

[08:24] *** FROGGS joined
[08:25] <FROGGS> m: grammar Test { token TOP { <Foo(1)> }; proto token Foo(Int) {*}; token Foo:sym<a>(Int $a) { "a" }; token Foo:sym<b>(Int $a) { "b" } }; say Test.parse("a", :rule<Foo>, :args(1));

[08:25] <camelia> rakudo-moar 8b3e8c: OUTPUT«Type check failed in binding $args; expected 'Parcel' but got 'Int'␤  in method parse at src/gen/m-CORE.setting:14038␤  in block <unit> at /tmp/NCMXHAK5A5:1␤␤»

[08:25] <pmnexus> Alas, the nexus must now be turned off.  See you all l

[08:25] <tadzik> all available power to the phasers!

[08:26] <pmnexus> See you all later from the other side of the Atlantic.

[08:26] <lizmat> safe travels, pmnexus 

[08:26] <timotimo> safe travels!

[08:26] <timotimo> i hopei hope the atlanteans don't shoot down the plane with their 

[08:26] <dalek> roast: c855d94 | usev6++ | S04-declarations/constant.t:

[08:26] <dalek> roast: Add test for RT #111734

[08:26] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=111734

[08:26] <dalek> roast: review: https://github.com/perl6/roast/commit/c855d94be4

[08:26] <timotimo> lightning-powered tridents

[08:27] *** FROGGS_ joined
[08:30] *** dakkar joined
[08:30] *** FROGGS left
[08:30] <FROGGS_> m: grammar Test { token TOP { <Foo(1)> }; token Foo(Int $a) { "a" } }; say Test.parse("a", :rule<Foo>, :args(1,));

[08:30] <camelia> rakudo-moar 8b3e8c: OUTPUT«｢a｣␤␤»

[08:31] <FROGGS_> timotimo / masak: you can pass args like that, it just does not seem to work with protos

[08:31] <FROGGS_> see:

[08:31] <FROGGS_> m: grammar Test { token TOP { <Foo(1)> }; proto token Foo(Int) {*}; token Foo:sym<a>(Int $a) { "a" }; token Foo:sym<b>(Int $a) { "b" } }; say Test.parse("a", :rule<Foo>, :args(1,));

[08:31] <camelia> rakudo-moar 8b3e8c: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in regex Foo:sym<a> at /tmp/zhNVOed8KH:1␤  in any !protoregex at gen/moar/stage2/QRegex.nqp:808␤  in regex Foo at /tmp/zhNVOed8KH:1␤  in method parse at src/gen/m-CORE.setting:14040␤  i…»

[08:31] <pmnexus> Yes, nyi

[08:32] <FROGGS_> masak: very important: http://irclog.perlgeek.de/perl6/2014-09-14#i_9356238

[08:32] <psch> i had used that when fiddling with the cliopt stuff with an array, which explains why i didn't encounter the "expected Parcel" error i guess

[08:32] <psch> as in, passing an array into :args

[08:33] <FROGGS_> pmnexus: I am just saying that :args in .parse *was* implemented lately, besides that issue with protos of course

[08:34] <masak> maybe try :args with protos?

[08:34] <pmnexus> Froggs: yes, I meant proto'd parameters nyi.   We're in agreement.

[08:35] <pmnexus> Actually, I'm in a plane. :-)

[08:36] *** cognome_ left
[08:36] *** jack_rabbit left
[08:36] <pmnexus> ... And I'll bbl.

[08:36] *** pmnexus left
[08:36] <FROGGS_> k :o)

[08:38] *** Hor|zon left
[08:39] *** Ulti_ is now known as Ulti

[08:40] *** cognome joined
[08:42] *** cognome left
[08:44] *** flaviusb left
[08:45] *** flaviusb joined
[08:46] *** kjs_ joined
[08:48] *** zakharyas joined
[08:49] <timotimo> FROGGS_: it doesn't work with protos or regular multis either

[08:50] *** ptc_p6 left
[08:50] <timotimo> GTK::Simple::TextView::⏏$!gtk_widget - this is not how i access the private attribute of a class that trusts mine?

[08:51] *** ptc_p6 joined
[08:51] <timotimo> that's TTIAR

[08:51] <moritz> timotimo: uhm, classes don't have attributes, object have

[08:51] <FROGGS_> the sigil is never in between

[08:52] <timotimo> mor er, yes.

[08:52] <timotimo> with the sigil in front it works

[08:52] <timotimo> how do i import our-scoped subs of my parent class into my current class to use them without any prefixes?

[08:52] <masak> m: constant True = 42; say True

[08:52] <camelia> rakudo-moar 8b3e8c: OUTPUT«42␤»

[08:52] <timotimo> i tried "import My::Super::Class;"

[08:53] <moritz> constant &mything = &My::Super::class::mything

[08:53] <masak> \o/

[08:54] <psch> .tell TimToady http://irclog.perlgeek.de/perl6/2014-10-13#i_9499127 might have been http://irclog.perlgeek.de/perl6/2014-08-15#i_9188841 

[08:54] <yoleaux> psch: I'll pass your message to TimToady.

[08:55] <psch> also, seeing as LSM in .trans was a temporal solution i could probably close my PR for the adverbs

[08:55] *** Hor|zon joined
[08:55] <timotimo> i think i'll want to decouple the gtk structs from the GTK::Simple classes

[08:55] <timotimo> well, "the gtk pointers" really

[09:02] <timotimo> bleh how can it be so hard to "is native" a library

[09:02] <timotimo> Cannot locate native library 'libgtksourceview-3.0.so.1.so'

[09:03] *** Ven joined
[09:03] <Ven> o/ timotimo 

[09:03] *** virtualsue left
[09:03] *** Mso150 left
[09:03] <Ven> It's nice I'm able to talk to you from IRC, considering you're sitting in front of me!

[09:03] <timotimo> yes

[09:03] <timotimo> Cannot locate native library 'libgtksourceview-3.0.so.1.so'

[09:03] <timotimo> what do i need to type to make this crap work? :P

[09:05] <Ven> timotimo: talk to it more nicely

[09:06] <timotimo> srsly though.

[09:07] <Ven> https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition/blob/f9c8ae452922e1f9d97ddc7ee46b8de47e1e6976/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/math/arithmetics/IntegerDivider.java <- this is why tim's idea of java2perl6 might not be what we want :P

[09:09] <timotimo> Cannot locate native library '/usr/lib64/gtksourceview-3.0.so.1.1.0.so'

[09:09] <timotimo> damn you, nativecall

[09:09] <Ven> ... he went back to sleep :P

[09:11] <psch> timotimo: you could hack around NativeCall by setting $*VM.config<load_ext> i guess? although that's kind of horrible

[09:11] <timotimo> ugh :)

[09:12] <timotimo> yes, it is

[09:12] <timotimo> thank you

[09:12] <psch> improving &guess_library_name would probably the sensible way...

[09:13] <timotimo> changing it to "" gives me Cannot locate native library 'libgtk-3'

[09:13] <Ven> is there a RT for the grammar bug thingie?

[09:13] <Ven> oooh, we actually have "earliest" now :P

[09:13] <timotimo> instead

[09:13] <Ven> m: anon class is native {}

[09:13] <camelia> rakudo-moar 8b3e8c: OUTPUT«===SORRY!=== Error while compiling /tmp/U8LXcbVUCh␤Unable to parse class definition␤at /tmp/U8LXcbVUCh:1␤------> anon class is ⏏native {}␤    expecting any of:␤        scoped declarator␤        generic rol…»

[09:13] <timotimo> bleh.

[09:13] <timotimo> need star: use NativeCall

[09:14] <psch> timotimo: looking at &guess_library_name and assuming you want to link 'libgtksourceview-3.0.so.1' i'd say pass 'libgtksourceview-3.0.so.' and set $*VM.config<load_ext> = 1

[09:14] <FROGGS_> star-m: anon class is native {}

[09:15] <camelia> star-m 2014.08: OUTPUT«===SORRY!=== Error while compiling /tmp/aSEThRLyOJ␤Unable to parse class definition␤at /tmp/aSEThRLyOJ:1␤------> anon class is ⏏native {}␤    expecting any of:␤        scoped declarator␤        generic role␤»

[09:15] <FROGGS_> star-m: use NativeCall; anon class is native {}

[09:15] <camelia> star-m 2014.08: OUTPUT«===SORRY!=== Error while compiling /tmp/hBuIGVq8jE␤Unable to parse class definition␤at /tmp/hBuIGVq8jE:1␤------> use NativeCall; anon class is ⏏native {}␤    expecting any of:␤        scoped declarator␤       …»

[09:15] <psch> ...which is definitely all kinds of internals-leaking horrible...

[09:16] <FROGGS_> timotimo: I guess it should not append load_ext when the libname already contains load_ext (followed by optional digits and dots)

[09:17] <psch> m: say $*VM.config<load_ext>; # but load_ext isn't neccessarily set

[09:17] <camelia> rakudo-moar 8b3e8c: OUTPUT«(Any)␤»

[09:17] *** rmgk_ joined
[09:17] *** rmgk_ is now known as rmgk

[09:18] <FROGGS_> psch: how is that possible?

[09:18] <psch> FROGGS_: i don't know.  it's the same on my local install

[09:18] <psch> i haven't look into it

[09:18] *** Ven left
[09:18] <FROGGS_> m: say $*VM; say $*VM.config<load_ext>;

[09:18] <camelia> rakudo-moar 8b3e8c: OUTPUT«moar (2014.9.54.g.3.ac.9.a.7)␤(Any)␤»

[09:18] <FROGGS_> m: say $*VM; say $*VM.config.keys;

[09:18] <camelia> rakudo-moar 8b3e8c: OUTPUT«moar (2014.9.54.g.3.ac.9.a.7)␤crossconf staticdir defs[0] defs[1] dcbclean asmout dcclean lnclean auxclean shaincludedir dcblib exe dlllocal name ar versionmajor dclib jit lnlib laolib ccdef cppswitch dynasmlua ccinstflags dcrule ldsys cincludes asmswitc…»

[09:19] <psch> fwiw, an old R* install on windows (where $*VM is still a hash.. i should upgrade) has .dll in there

[09:19] <psch> maybe it broke during migration, no idea

[09:21] <timotimo> FROGGS_: ŷou need "anon class :: is native"

[09:21] <timotimo> it says so in the specs

[09:21] <FROGGS_> yeah, load_ext is gone somehow

[09:21] <psch> m: say grep /^l/, $*VM.config.keys

[09:21] <camelia> rakudo-moar 8b3e8c: OUTPUT«lnclean lnlib laolib ldsys ld ldoptiflags lnobjects lddebugflags lib lddir ldinstflags ldmiscflags ldflags lnrule ldimp ldout laoclean ldrpath laorule lua ldlibs laoobjects ldshared ldusr␤»

[09:22] <FROGGS_> psch: I have nothing with '.so' as a value in there

[09:22] <FROGGS_> that might be a parrot thing?

[09:22] <FROGGS_> p: say $*VM; say $*VM.config<load_ext>;

[09:22] <camelia> rakudo-parrot 8b3e8c: OUTPUT«parrot (6.8.0)␤.so␤»

[09:23] <FROGGS_> seems so

[09:23] <psch> right

[09:24] <psch> the windows R* i have is parrot as well

[09:24] <psch> maybe moar never had load_ext

[09:24] <FROGGS_> right, that's what I am thinking

[09:27] *** Ven joined
[09:28] *** yeahnoob left
[09:28] *** denis_boyun_ left
[09:30] *** pdcawley_ left
[09:30] *** Ven left
[09:30] *** pdcawley joined
[09:31] <timotimo> so i thought hooking up gtksourceview to my live coding environment would only take five minutes or so

[09:31] <timotimo> ... i at least have a gtksourceview in my window now. but it looks exactly like a regular gtk text view

[09:31] <timotimo> now i'll have to bind a whole lot of crap to make syntax highlighting and font selection work

[09:36] <psch> m: say $*VM.config<dll>

[09:36] <camelia> rakudo-moar 8b3e8c: OUTPUT«lib%s.so␤»

[09:37] <psch> right, so that's where the '.so' comes from, not the else in &guess_library_name

[09:38] <psch> makes me wonder how sensible and standardized the numeric postfixes for shared objects really are

[09:38] <psch> i'm far from a sysadmin though, and it's probably documented somewhere why it's done

[09:42] <psch> timotimo: on debian, the package libgtksourceview-dev contains a libgtksourceview-3.0.so, which is probably a symlink, which should make NativeCall find it i think?

[09:42] <timotimo> nativecall is awesome, but this is painful.

[09:42] <timotimo> really, really painful.

[09:42] <psch> i don't know if you're on debian though :)

[09:43] <timotimo> i'm on fus-roh-da 20

[09:43] *** bjz joined
[09:44] <FROGGS_> psch: yes, the patterns of such a library name have some sort of rules across unixes... you sometimes see patterns showing up in configure scripts that locate libs

[09:46] <FROGGS_> that's from a P5 module I was involved with:

[09:46] <FROGGS_>       ($found_dll) = find_file($ld, qr/[\/\\]lib\Q$lib\E[\-\d\.]*\.($dlext[\d\.]*|so|dll)$/);

[09:46] <FROGGS_>       $found_dll   = $1 if $found_dll && $found_dll =~/^(.+($dlext|so|dll))/ && -e $1;

[09:46] <FROGGS_>       ($found_lib) = find_file($ld, qr/[\/\\]lib\Q$lib\E[\-\d\.]*\.($dlext[\d\.]*|a|dll.a)$/);

[09:46] <timotimo> blergh

[09:47] <psch> timotimo: http://rpm.pbone.net/index.php3/stat/6/idpl/26639518/dir/fedora_20/com/gtksourceview3-devel-3.10.3-1.fc20.x86_64.rpm has a libgtksourceview-3.0.so

[09:47] <FROGGS_> $lib is something like 'gtk' if you had a libgtk.so, and $dlext is something like 'la' or 'so' or 'so|dylib|bundle'

[09:48] <timotimo> timo@schmetterling ~/p/e/gtk_cairo_shooter (master)> rpm -ql gtksourceview3 | grep \\.so

[09:48] <timotimo> /usr/lib64/libgtksourceview-3.0.so.1

[09:48] <timotimo> /usr/lib64/libgtksourceview-3.0.so.1.1.0

[09:48] <timotimo> btw, we ought to check out /etc/ld.so.conf (.d/*)

[09:48] <FROGGS_> we have to do that on our own? that sounds unlikelyish

[09:53] <timotimo> right. maybe ld has something for that.

[09:54] <FROGGS_> dlopen should find your lib when just feed it 'gtksourceview', no?

[09:54] <FROGGS_> I guess we just mess with the libname in the wrong way before passing it off

[09:55] <psch> fwiu, we shouldn't have to mess with the libname at all on *nixes, exactly because ld and such exist, no?

[09:56] <psch> oh wait, we're not linking in the usual sense of the word, we're just loading the .so

[09:56] <timotimo> just a day after APW2014, someone started the Anty Poverty Week 2014

[09:57] <FROGGS_> timotimo: but there is no angry mob yet in Salzburg?

[09:58] <timotimo> that's not where they started that

[09:58] <FROGGS_> k, that gives room for hope

[09:58] <timotimo> ven is off the train again, won't have mobile network connection until he reaches france

[09:58] *** virtualsue joined
[09:59] <tadzik> Anti-poverty week? Angry mob?

[10:01] *** SamuraiJack left
[10:01] <FROGGS_> tadzik: jnthn and/or masak cause trouble when they leave from somewhere

[10:01] <tadzik> heh

[10:02] <FROGGS_> tadzik: and when there is no outrage this time in Salzburg, then probably masak is to blame :o)

[10:02] <FROGGS_> so, we'll know more in about a week

[10:02] <timotimo> tadzik: have you checked out my game yet?

[10:03] <tadzik> timotimo: not really :( I couldn't figure out what my system is missing, and now I got caught up with $work

[10:03] <timotimo> all your system needed was cairo and gtk3

[10:03] <tadzik> hm

[10:03] <tadzik> will see

[10:04] <tadzik> but all this confusion made me think that perhaps we want something that will make it both easier for developers to write nativecall code, so they don't have to write all this "libglib-2.0-dev.so.42", and for the users looking for stuff they have or don't have installed

[10:05] <timotimo> yes

[10:06] <timotimo> of course we do.

[10:07] <timotimo> at some time someone suggested we'd have something like a module configuration class that you can derive from and pass to "native" or something like that

[10:08] *** Hor|zon left
[10:09] <FROGGS_> that might also help us to define fallbacks

[10:09] <FROGGS_> i.e. fall back to a pure perl implementation when a C lib is not available

[10:10] <tadzik> or fetch and compile that C lib, like Alient

[10:11] <timotimo> that sounds like a ... great idea

[10:12] <tadzik> and lots of work :)

[10:12] <psch> apparently dlopen needs the full libraryname, while e.g. ld would construct it with prepending 'lib' and $ext and potentially versioning.  which means we have to figure out the whole name, which means we have to know what we need :/

[10:13] <psch> unless i'm misunderstanding something that means we have to ask the ldconfig cache or duplicate it's functionality..?

[10:14] *** Hor|zon joined
[10:14] *** leont left
[10:17] * psch has a feeling he's articulating intermediate steps that have been thought further by tadzik++ and FROGGS_++ and resulted in thing said by those two shortly before he wrote them

[10:17] <psch> also i gotta run, later #perl6 o/

[10:17] *** yeahnoob joined
[10:17] <FROGGS_> psch: see you :o)

[10:21] *** psch left
[10:24] *** anaeem1 left
[10:24] *** anaeem1 joined
[10:30] <moritz> (re library names) we aren't the only one who have those problems, right? How do other dyncall users solve this?

[10:32] <FROGGS_> I have no answer (yet) :o)

[10:32] <FROGGS_> I might have time for that in the next days, but more likely at the weekend

[10:40] <FROGGS_> damn it, I've got somebody sitting right next to me that is mumbling while reading his newspaper

[10:40] <tadzik> reply to him

[10:40] <tadzik> "oh, interestin!"

[10:40] <tadzik> "hmm, really?"

[10:40] <FROGGS_> and when I have bad luck I have to cope with that for another 4+ hours

[10:41] <FROGGS_> tadzik: no, I fear he and one person sitting in front to me are mentally ill, so I probably just wince quietly

[10:43] <tadzik> :o

[10:44] *** SamuraiJack joined
[10:44] *** denis_boyun_ joined
[10:46] *** rindolf left
[10:48] <dalek> roast: 09ff536 | usev6++ | S02-lexical-conventions/sub-block-parsing.t:

[10:48] <dalek> roast: Add test for RT #114456

[10:48] <dalek> roast: review: https://github.com/perl6/roast/commit/09ff5366a3

[10:48] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=114456

[10:49] *** abraxxa left
[10:55] <timotimo> i feel a little down... getting up so early is not for me...

[10:55] <ptc_p6> timotimo: what's early for you?

[10:59] <ptc_p6> normally, I mean ...

[10:59] <timotimo> heh.

[10:59] <timotimo> like 9

[11:00] <ptc_p6> ah, ok.  :-)

[11:00] <timotimo> https://twitter.com/aminize/status/521426254902206464 - discuss

[11:03] <tadzik> "u wot m8"

[11:06] <moritz> ...

[11:06] *** Hor|zon left
[11:07] <timotimo> why can't we have data structures that have other data structures in them? :(

[11:07] <timotimo> seems like that's a rather important feature for programming languages

[11:07] <timotimo> still perl6 has nothing like that

[11:07] <timotimo> that's sad

[11:07] <tadzik> well, we just got rid of one (Parcels), right? :P

[11:08] <tadzik> I think what aminize means is "lists flatten and arrayrefs don't and it's confusing"

[11:09] <tadzik> compared to python that only has dicts and lists, right? No confusing tuples or anyting

[11:09] <timotimo> in perl5?

[11:09] <tadzik> timotimo: yeah

[11:09] <timotimo> ah

[11:10] *** FROGGS_ is now known as FROGGS

[11:10] <FROGGS> .tell leont: so, did I understand you right that I would need to look deeper into how IO::Uncompress::Gunzip achieves platformability in P5?

[11:10] <yoleaux> FROGGS: What kind of a name is "leont:"?!

[11:10] <FROGGS> .tell leont so, did I understand you right that I would need to look deeper into how IO::Uncompress::Gunzip achieves platformability in P5?

[11:10] <yoleaux> FROGGS: I'll pass your message to leont.

[11:10] <FROGGS> meh

[11:10] *** Sqirrel joined
[11:11] *** chenryn left
[11:11] <colomon> pmichaud++ # draft report

[11:11] *** pecastro left
[11:12] * colomon still thinks there probably should be a list concatenation operator.  

[11:13] <colomon> something that distinguishes between @a, @b (list of two array refs) and @a SOMETHING @b (list is @a then @b)

[11:13] <moritz> colomon: +1

[11:14] *** Hor|zon joined
[11:14] <colomon> probably should be lazy, too.

[11:14] <moritz> maybe infix:<,,> ?

[11:14] <colomon> infix:<++> ?

[11:14] * colomon has no feel on what it should look like.

[11:15] *** kjs_ left
[11:15] *** kurahaupo left
[11:16] <colomon> though it's possible my thinking is backwards, and @a, @b is now @a then @b, and you need to say $@a, $@b to get a list of two array refs.

[11:18] *** pecastro joined
[11:20] <FROGGS> colomon: as I understand it it is about the context in which @a, @b are used

[11:20] <FROGGS> the comma does nothing on its own

[11:20] <FROGGS> [@a, @b] is an array constructor, and thus it will flatten one level, aka joining them

[11:21] <FROGGS> (@a, @b) is equal to @a, @b and does nothing

[11:22] <timotimo> aye

[11:23] <timotimo> assigning to a list will also flatten, like @c = @a, @b

[11:23] <FROGGS> which is like constructing an array :o)

[11:24] <timotimo> yes

[11:24] <timotimo> and $a = @b, @c ? 

[11:25] <timotimo> sounds like that will just create a list that will wait for a context to flatten or itemize 

[11:26] <FROGGS> you just drop the @c on the floor there

[11:27] <timotimo> mhm

[11:27] <timotimo> I thought that says for binding 

[11:27] <timotimo> was*

[11:28] *** ptc_p6 left
[11:31] *** ptc_p6 joined
[11:35] *** abraxxa joined
[11:35] *** pepl left
[11:36] <FROGGS> $a = (@b, @c) probably does what you meant

[11:37] <timotimo> but parenthesis is supposed to not make a difference!  :P

[11:47] *** abraxxa left
[11:48] *** abraxxa joined
[11:51] <tadzik> what was that term for "inventing things before they're needed"?

[11:51] <tadzik> I think I learned it here

[11:53] <FROGGS> timotimo: yay, let's get rid of precedence and let it just dwim instead :P

[12:11] *** kaleem left
[12:12] *** pdcawley left
[12:12] *** pdcawley_ joined
[12:13] <masak> re https://twitter.com/aminize/status/521426254902206464 -- flattening is a fairly unconventional design decision, yes. but it's not 100% bad -- a lot of nice things that we like fall out of it too.

[12:13] <masak> and concluding that we can't have nested things because of it is just... misinformed.

[12:15] *** Hor|zon left
[12:17] <nine_> I often miss flattening in Python code and even in Perl 6.

[12:18] <masak> you miss flattening in Perl 6?

[12:18] <nine_> masak: easy flattening :)

[12:19] <masak> m: my @a = 1, 2, 3; my @b = 4, 5; my @c = @a, @b; say @c.perl

[12:19] <camelia> rakudo-moar 8b3e8c: OUTPUT«Array.new(1, 2, 3, 4, 5)␤»

[12:19] <masak> look, it's easy.

[12:19] <masak> it's easy, and it flattens. it's easy flattening.

[12:21] <nine_> masak: then there's three more:

[12:21] <nine_> -> \self, |args { $.parent.perl5.invoke($package, $.parent.ptr, $name, self, args.list); }

[12:21] <nine_> my $av = p5_call_package_method($!p5, $package, $function, |self!setup_arguments(@args));

[12:21] <nine_> multi method invoke(OpaquePointer $obj, Str $function, *@args) { self.invoke(Str, $obj, $function, @args.list); }

[12:22] <nine_> Three different ways to make it flatten where in Perl 5 there's really only one.

[12:22] <masak> well, when you put it like that...

[12:23] <dalek> rakudo-star-daily: 5d4a377 | coke++ | log/MoarVM-version.log:

[12:23] <dalek> rakudo-star-daily: today (automated commit)

[12:23] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5d4a3779b1

[12:23] <dalek> perl6-roast-data: 6f41da6 | coke++ | / (4 files):

[12:23] <dalek> perl6-roast-data: today (automated commit)

[12:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/6f41da6721

[12:24] <masak> it would help if we could at least have the same symbol for all those three cases.

[12:24] <masak> once upon a time we did (`*`), but then we got two.

[12:24] <nine_> This would really belong into a 5 to 6 guide.

[12:25] <masak> I never quite managed to internalize why. Python makes do with just one (for positional flattening on both caller and callee sides).

[12:25] <nine_> Oh and then there's method postcircumfix:<( )>(\args) { $.perl5.execute($.ptr, |args); }

[12:26] <nine_> In Inline::Perl5 alone I use three different ways to pass on arguments to a function.

[12:26] <nine_> And not by choice :) It's somehow required. Though I'm not entirely sure why.

[12:31] *** Mouq joined
[12:33] <dalek> roast: 1c4c535 | usev6++ | S04-statements/terminator.t:

[12:33] <dalek> roast: Add tests for RT #115842

[12:33] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=115842

[12:33] <dalek> roast: review: https://github.com/perl6/roast/commit/1c4c5355d9

[12:36] *** immortal joined
[12:36] *** immortal left
[12:36] *** immortal joined
[12:42] *** Hor|zon joined
[12:42] *** laben joined
[12:43] <laben> hello #perl6'ers, how was APW hackaton?

[12:48] <FROGGS> very enjoyable :o)

[12:48] <FROGGS> and for some even productive I guess

[12:48] <FROGGS> I was only semi produtive

[12:48] <FROGGS> +c

[12:49] *** kjs_ joined
[12:54] <nine_> I was even productive after going home :)

[12:55] <nine_> Conference Driven Development FTW ;)

[12:55] *** carlin joined
[12:55] <laben> nine_: can i ask you something about Inline::Python?

[12:58] <nine_> laben: go on

[12:59] <laben> to build the module i do perl6 configure.pl6 and then test with make test, is that right? or should i use panda?

[12:59] *** anaeem___ joined
[13:00] <nine_> laben: that's exactly what I do when developing

[13:01] *** xenoterracide__ joined
[13:01] *** bbkr_ joined
[13:01] *** anaeem1 left
[13:01] *** kaleem joined
[13:01] <laben> nine_: thanks, that reassures me. I saw there was a Build.pm file so i thought there might be some panda action there i was missing

[13:02] <nine_> laben: btw. your interest boosts my motivation to continue developing :)

[13:03] *** pepl joined
[13:03] <laben> nine_: i get then a test failure in call.t at test 8

[13:03] *** kaare_ left
[13:04] <laben> No such method 'test' for invocant of type 'Any' at line 107

[13:04] *** guru joined
[13:04] *** guru is now known as ajr_

[13:05] <nine_> laben: that's expected. Supporting objects is next on my list to implement. I ported the tests from Inline::Perl5. That's why some still fail. But I'll make sure master always has passing tests from now on.

[13:06] *** flaviusb left
[13:06] <laben> nine_: honestly i think that I::P5 is a good way to backward compatibility, while I::Py is the way to conquer a good share

[13:06] <gtodd> nine_: Inline::Perl5 is fantastic :-D

[13:06] <nine_> gtodd: :)

[13:07] *** pepl left
[13:09] <gtodd> If this was a private corporation  >50% "compatibility" of scripts would mean:  "runs the majority of perl5 scripts"

[13:09] <gtodd> just sayin' :-)

[13:10] <laben> gtodd: only 50%? what are the current limitations of I::P5? i thought only modules with stranger things (like source filters) would be problematic

[13:11] *** kaleem left
[13:13] *** bjz left
[13:15] *** FROGGS left
[13:15] *** xenoterracide__ left
[13:22] *** pepl joined
[13:22] <nine_> laben: I guess modules named Perl6::* will not work ;)

[13:23] *** Hor|zon left
[13:24] *** bjz joined
[13:25] *** laben left
[13:27] <gtodd> laben: it is higher here ... I'm just using silly marketing terminology :-) ... some method for getting perl6 to autoload I::P5  v5 or whatever when it "discovers" you're trying to load a script with perl5  code would allow for lots of real world tests and possibly a large number of bug reports :-D

[13:28] *** FROGGS joined
[13:33] <nine_> gtodd: that's what S01:108 wants

[13:33] <synopsebot> Link: http://perlcabal.org/syn/S01.html#line_108

[13:34] *** chenryn joined
[13:35] *** laben joined
[13:35] *** FROGGS left
[13:38] <masak> m: $_ = 2; when 2 { say "OH HAI" }; say "alive?"

[13:38] <camelia> rakudo-moar 8b3e8c: OUTPUT«OH HAI␤»

[13:39] <masak> should the mainline block allow `when` statements like that?

[13:39] <masak> is it reasonable for execution to end when a `when` block in the mainline succeeds?

[13:40] <masak> S04: "If the smart match succeeds, C<when>'s

[13:40] <masak> associated block is executed, and the innermost surrounding block

[13:40] <masak> that has C<$_> as one of its formal parameters (either explicit

[13:40] <laben> masak: i'm but a simple user, but i wouldn't expect it to stop there

[13:40] <masak> or implicit) is automatically broken out of."

[13:41] <masak> I think it comes down to "does the mainline have a $_ formal parameter?"

[13:41] *** rurban left
[13:41] <masak> and as far as I know, it doesn't. so it shouldn't work at all.

[13:42] <masak> it's just that we currently don't have static detection of a `when` outside of a topicalizer block. there's nothing in theory preventing us from having it.

[13:42] <masak> I would dearly like a second opinion, though :)

[13:43] <laben> i see it as a code of block, just like an if or if chain. i wouldn't expect "when" to end the execution there, breaking out of the surrounding block

[13:44] <masak> m: given 42 { when 1 { say "one" }; when 42 { say "forty-two" }; when * { say "ANYTHING!!!" } }

[13:44] <camelia> rakudo-moar 8b3e8c: OUTPUT«forty-two␤»

[13:45] <masak> laben: but you are familiar with the above behavior, right? when a `when` succeeds, it stops looking inside the `given`.

[13:45] <masak> (otherwise it would have matched that last `when *`)

[13:46] <laben> masak: yes, but that's because of the given

[13:46] <masak> nope.

[13:46] <masak> it's because of the `when` succeeding.

[13:46] <laben> i'm all right with taht, no falling down like C switch

[13:46] <masak> which also explains why it exits the mainline.

[13:47] <masak> which also explains why it exits the mainline.

[13:47] <masak> m: for 7, 42, 1 { say "iterate"; when 1 { say "one" }; when 42 { say "forty-two" }; when * { say "ANYTHING!!!" } }

[13:47] <camelia> rakudo-moar 8b3e8c: OUTPUT«iterate␤ANYTHING!!!␤iterate␤forty-two␤iterate␤one␤»

[13:47] <laben> masak: i understand that's because "when" succeeds, what i'm saying is that it should do that inside a given, not everywhere

[13:48] <masak> here you also see the succeed-means-exit-topicalizer-block semantics, but without the `given` block.

[13:48] <laben> to me a lone "when" is like sugar over if smartmatch

[13:48] *** FROGGS joined
[13:49] <masak> laben: well, I I'm arguing that the fundamental problem is that `when` is allowed outside of a topicalizer block, not that it has that semantics there.

[13:49] <masak> to me a lone `when` is an error. preferably a compile-time error.

[13:49] <masak> note: only the block form. the statement modifier form is fine and works like you prescribe.

[13:50] <laben> ofc you could disallow when outside of given, after all if smartmatch works fine

[13:50] <masak> I'm suggesting that what I want is already spec. except that the spec doesn't go all the way and say `hen` is forbidden outside of a topicalizer block.

[13:50] <laben> masak: is there another way outside of  given to have a topicalizer block?

[13:51] <masak> laben: `given`, `for`, pointy block with $_ parameter, routine with $_ parameter, `CATCH`, `CONTROL`

[13:52] <masak> those are the ones that come to mind :)

[13:53] <laben> mmh, but inside a for it doesn't exit the for which to me seems the surrounding block...

[13:53] <laben> blegh, need some coffee

[13:54] <masak> it exits the block, which cuts short the iteration

[13:54] <masak> then the next iteration begins :)

[13:54] <peteretep> or else it gets the hose again

[13:54] <laben> basically like calling next

[13:54] *** Hor|zon joined
[13:54] <masak> yes, `succeed` and `next` are synonymous with for/when.

[13:55] <laben> mh, i'm not sure i don't want when inside a for

[13:55] <PerlJam> good morning #perl6

[13:56] <laben> o/ PerlJam

[13:56] *** FROGGS left
[13:58] <PerlJam> masak: that when-in-mainline behavior is surprising to me.

[13:59] <masak> laben: that's OK -- I'm sure I want it :)

[13:59] <masak> PerlJam: a number of bugs have been discovered in which the mainline acts a bit too much like a block that can be returned from.

[14:00] <masak> m: return 42; say "hello?"

[14:00] <camelia> rakudo-moar 8b3e8c: ( no output )

[14:01] <PerlJam> seems like that could be a feature though (if we nailed it down sufficiently)

[14:02] <laben> masak: right, and you're advocating to remove the possibility of having a when block outside a topicalizer since it brings that strange behaviour. if i understand your position correctly, i completely agree

[14:02] *** leont joined
[14:03] *** kaleem joined
[14:06] *** ptc_p6 left
[14:07] <PerlJam> m: return 42; say "hello?";  sub MAIN { say "hi" }

[14:07] <camelia> rakudo-moar 8b3e8c: ( no output )

[14:07] <Mouq> m: say "hello?";  sub MAIN { say "hi" }; return 42

[14:07] <yoleaux> 13 Oct 2014 16:27Z <moritz> Mouq: I finally installed your ssh key for perl6/doc - sorry that it took me so long

[14:07] <camelia> rakudo-moar 8b3e8c: OUTPUT«hello?␤»

[14:07] <Mouq> moritz: Thanks!

[14:08] <PerlJam> m: $_ = 42;  when 42 { say "hello?"; }  sub MAIN { say "hi" }

[14:08] <camelia> rakudo-moar 8b3e8c: OUTPUT«===SORRY!=== Error while compiling /tmp/S9h0hAVs85␤Missing semicolon.␤at /tmp/S9h0hAVs85:1␤------> $_ = 42;  when 42 { say "hello?"; }  ⏏sub MAIN { say "hi" }␤    expecting any of:␤        postfix␤        …»

[14:08] <PerlJam> m: $_ = 42;  when 42 { say "hello?"; };  sub MAIN { say "hi" }

[14:08] <camelia> rakudo-moar 8b3e8c: OUTPUT«hello?␤»

[14:09] <masak> m: say "one"; sub MAIN { say "two" }

[14:09] <camelia> rakudo-moar 8b3e8c: OUTPUT«one␤two␤»

[14:10] *** laben left
[14:11] <gtodd> would bugs where mainline acts like returning from a block go away with a little more strictless and less "sugary"  'when'?

[14:11] <gtodd> strictness

[14:12] <PerlJam> gtodd: it would go away if the mainline didn't act like a topicalizer and if we did some static analysis during compilation that forbade "when" outside of a topicalizer

[14:12] <masak> I don't think the mainline is acting like a topicalizer, even.

[14:12] <masak> it's just that we don't check.

[14:13] <PerlJam> right. 

[14:13] <PerlJam> I was trying to be explicit in that we don't *want* the mainline to act as a topicalizer

[14:14] <masak> *nod*

[14:14] <gtodd> I didn't realize it was doing that

[14:14] <masak> there's nothing in the spec to indicate it does, or should.

[14:16] *** FROGGS joined
[14:16] <PerlJam> in a bifurcated universe, we could have the mainline act as topicalizer and support when-in-mainline as a feature.   Not sure if there's enough upside to even think about it though.

[14:16] <Mouq> m: given 42 { { say "test"; when 42 { }; say "test2" }; say "test3" }

[14:17] <gtodd> and if there's no million line program being used in some giant bank that depends on that ...

[14:17] <camelia> rakudo-moar 8b3e8c: OUTPUT«test␤test3␤»

[14:17] <masak> PerlJam: pretty sure there isn't.

[14:17] <masak> :q

[14:17] * hugme hugs masak, good vi(m) user!

[14:17] <masak> :)

[14:17] <gtodd> hehe

[14:17] <Mouq> I think that should only output "test"?

[14:17] <gtodd> :w 

[14:17] * masak , just like Perl 6, tries to quit the wrong thing

[14:18] <Mouq> m: given 42 { ->{ say "test"; when 42 { }; say "test2" }(); say "test3" } # should *definitely* only be "test"

[14:18] <camelia> rakudo-moar 8b3e8c: OUTPUT«(timeout)»

[14:19] <PerlJam> Mouq: I think *all* blocks get a $_ parameter and this is part of the problem

[14:19] <PerlJam> (maybe)

[14:20] <Mouq> m: {;}.signature.say; ->{}.signature.say

[14:20] <camelia> rakudo-moar 8b3e8c: OUTPUT«(timeout)»

[14:20] <Mouq> :($_? is parcel)

[14:20] <Mouq> :()

[14:21] *** Hor|zon left
[14:21] <PerlJam> huh.

[14:22] *** xfix is now known as notfix

[14:24] *** abraxxa left
[14:27] *** Hor|zon joined
[14:28] *** chenryn left
[14:28] *** sjn_ is now known as sjn

[14:29] *** flaviusb joined
[14:35] *** Mouq left
[14:40] *** notfix is now known as xfix

[14:41] *** treehug88 joined
[14:42] *** yeahnoob left
[14:48] *** kaleem left
[14:51] *** _slade_ joined
[14:52] <tadzik> Today is World Standards Day.  Except in the US, which celebrates it on the 23rd

[14:52] <FROGGS> :D

[14:52] *** chenryn joined
[14:53] <masak> ^ autopun

[14:53] <tadzik> it's also true

[14:53] <tadzik> http://en.wikipedia.org/wiki/World_Standards_Day

[14:54] <FROGGS> that's sad

[14:55] *** rurban joined
[14:57] *** pepl left
[15:01] <carlin> I would like to wish everyone a happy World Standards Day

[15:01] <carlin> but I can't find the RFC that specifies the protocol for doing so

[15:04] <FROGGS> :S

[15:05] *** jepeway joined
[15:06] <gtodd>  

[15:09] *** FROGGS left
[15:10] *** molaf joined
[15:11] *** rurban left
[15:12] * gtodd looks on rosettacode for examples of "continuations" 

[15:12] <gtodd> ... a continuation sandwich in perl6

[15:20] *** araujo left
[15:20] *** pmurias joined
[15:20] *** denis_boyun_ left
[15:20] <masak> m: macro M() {}; say &M

[15:21] <camelia> rakudo-moar 8b3e8c: OUTPUT«macro M () { #`(Macro|74368744) ... }␤»

[15:22] *** rurban joined
[15:22] *** rurban1 joined
[15:22] *** araujo joined
[15:23] *** rurban left
[15:26] <[Coke]> even more parrot failures: S06-signature/slurpy-params.rakudo.parrot aborted 57 test(s)

[15:26] <dalek> perl6-roast-data: cfa87b8 | coke++ | / (4 files):

[15:26] <dalek> perl6-roast-data: today (automated commit)

[15:26] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/cfa87b8c84

[15:26] <[Coke]> this on top of the two failures we've been getting for some time

[15:28] *** rurban1 left
[15:33] <masak> lol, I blogged! http://strangelyconsistent.org/blog/macros-nesting-macros

[15:33] <masak> I probably shouldn't expect the same awesome feedback as yesterday, when lots of people were collected at a #hackathon :)

[15:33] *** FROGGS[mobile] joined
[15:33] <masak> but, as always, feedback appreciated.

[15:36] *** azawawi joined
[15:39] *** zakharyas left
[15:40] *** azawawi left
[15:43] <gtodd> masak: keep up the good work ... oh wait maybe you wanted useful feedback ... anyway your blogs are like a short grad course in CS so ++

[15:43] <gtodd> :)

[15:43] *** kaare_ joined
[15:44] <colomon> ye gads, masak's done three blog posts already this week!?!

[15:44] <masak> gtodd: as someone who never really did a CS degree, I am very flattered.

[15:45] <gtodd> heh me neither

[15:45] * colomon did a CS degree, but it was back in the dark ages when they thought it was a good idea to make IBM mainframe assembly language a required course.

[15:46] *** chenryn left
[15:46] *** ghostlines left
[15:46] *** chenryn joined
[15:47] <masak> colomon: expect blogging to slow down from now on. I've been a bit lucky these past two days with $work not interfering too much with my Perl 6 time.

[15:48] <colomon> ou'

[15:48] <colomon> you're not going to be average 1.5 blog posts a day forever?  Damn.

[15:49] <masak> :)

[15:50] <dalek> Inline-Python: a64f55a | nine++ | / (3 files):

[15:50] <dalek> Inline-Python: Todo failing tests for now and add some more.

[15:50] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/a64f55a08b

[15:59] <dalek> Inline-Python: 252bf41 | nine++ | / (3 files):

[15:59] <dalek> Inline-Python: Support passing Python dictionaries back to Perl 6.

[16:00] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/252bf41080

[16:00] <tadzik> "The {{{ }}} syntax being universally hated" -- that should now be your signature masak :P

[16:03] *** treehug8_ joined
[16:04] <dalek> Inline-Python: 5852ce2 | nine++ | t/py_to_p6.t:

[16:04] <dalek> Inline-Python: Fix UTF-8 test and un-todo it.

[16:04] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/5852ce2b12

[16:05] *** treehug88 left
[16:06] <dalek> Inline-Python: cd96b59 | nine++ | t/py_to_p6.t:

[16:06] <dalek> Inline-Python: Add one more test for passing non-Unicode strings back to Perl 6

[16:06] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/cd96b590d4

[16:06] *** anaeem___ left
[16:08] *** Hor|zon left
[16:09] <dalek> Perlito: 89bf744 | (Flavio S. Glock)++ | misc/typeglob/import.pl:

[16:09] <dalek> Perlito: Perlito5 - typeglob vs. import behaviour investigation

[16:09] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/89bf74480a

[16:13] *** Hor|zon joined
[16:14] *** kurahaupo joined
[16:15] *** Mouq joined
[16:17] <pmurias> masak: my thought on the blog: https://gist.github.com/pmurias/e341037f5e8495aaf457

[16:18] <dalek> Perlito: 9b70863 | (Flavio S. Glock)++ | / (2 files):

[16:18] <dalek> Perlito: Perlito5 - create $Perlito5::PHASE

[16:18] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/9b70863384

[16:20] *** vendethiel joined
[16:20] <vendethiel> Home! whew.

[16:20] <vendethiel> masak: my Text::Intended is complete

[16:21] *** anaeem1 joined
[16:21] <vendethiel> ...I was more complete during that train ride than during those 2 hackaton days :-)

[16:21] <vendethiel> I guess getting rid of timo gave me an energy boost :P

[16:21] *** anaeem1 left
[16:22] <dalek> Inline-Python: a65b7df | nine++ | / (3 files):

[16:22] <dalek> Inline-Python: Support passing Bufs to Python

[16:22] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/a65b7dfb69

[16:22] <vendethiel> nine_++

[16:23] <vendethiel> I'll push it. I'm pretty happy with it, considering it's my 2nd grammar (the first one was when trying to explain actions to nine)

[16:24] *** fhelmberger left
[16:25] *** anaeem1 joined
[16:29] *** anaeem1 left
[16:30] <dalek> Inline-Python: 351e2b9 | nine++ | / (3 files):

[16:30] <dalek> Inline-Python: Support passing Rats to Python

[16:30] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/351e2b90ab

[16:33] *** anaeem1 joined
[16:33] *** chenryn left
[16:33] <dalek> Inline-Python: da0ed60 | nine++ | lib/Inline/Python.pm6:

[16:33] <dalek> Inline-Python: Remove unused method unpack_return_values

[16:33] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/da0ed60b43

[16:34] *** anaeem1 left
[16:37] *** flaviusb left
[16:39] <gtodd> vendethiel: is it Text::Intended or Text::Indented .... :-)

[16:39] <vendethiel> gtodd: It's Intended to be Indented :)

[16:40] *** Mso150 joined
[16:40] <gtodd> I personally would like a Text::Intended ... indented of course ... that would write things as I intended 

[16:43] <gtodd> instead of DWIM  a sort of  "do what I meant to do" ... it parses my applications and groks the overall intent and suggests fixes ... PBP and perlcritic but with a kind of neural network enhanced intelligence 

[16:43] <vendethiel> that seems terrible :-)

[16:43] <gtodd> heheh

[16:44] <vendethiel> there's a reason we don't write in natural languages

[16:44] *** immortal left
[16:46] *** erkan joined
[16:47] <dalek> Inline-Python: 95b6488 | nine++ | / (3 files):

[16:47] <dalek> Inline-Python: Support passing floats from Python to Perl

[16:47] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/95b64882dd

[16:47] <gtodd> :-)  users will perhaps need to choose a voice for perl6 in a future version ... at install time

[16:48] <dalek> Inline-Python: 8849d3f | nine++ | / (2 files):

[16:48] <dalek> Inline-Python: Support passing Nums from Perl to Python

[16:48] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/8849d3f1fd

[16:51] *** rindolf joined
[16:52] <gtodd> n: say "are you dead?"

[16:52] <camelia> niecza : OUTPUT«Cannot open assembly './run/Niecza.exe': No such file or directory.␤»

[16:52] <gtodd> k

[16:55] *** pmurias left
[16:55] <[Coke]> niecza doesn't build on mono 3

[16:57] <gtodd> rats

[16:58] <nine_> Is there some simple way to iterate over a list and get the index as well?

[16:58] <gtodd> since it wasn't a rakudo backend I only ever had it running once or twice

[16:58] <colomon> nine_: .kv

[16:58] <colomon> m: my @a = 132..138; say @a.kv

[16:58] <camelia> rakudo-moar 8b3e8c: OUTPUT«0 132 1 133 2 134 3 135 4 136 5 137 6 138␤»

[16:59] <nine_> colomon: excellent! thanks

[17:00] <timotimo> vendethiel: i'm sorry i didn't jump off the train earlier

[17:00] *** slavik joined
[17:01] <dalek> Inline-Python: 46c420b | nine++ | / (3 files):

[17:01] <dalek> Inline-Python: Support passing arrays to Python

[17:01] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/46c420b1b9

[17:01] <vendethiel> timotimo: don't be :)

[17:02] <timotimo> on the train i was sort of spitballing something like this:

[17:02] *** ajr_ left
[17:03] *** rurban joined
[17:03] <timotimo> proto method foobar is proxy { * }; method foobar() { $!frobfrob * 2 }; method foobar($val) { $!frobfrob = $val div 2 } 

[17:03] *** guru joined
[17:04] *** guru is now known as Guest55848

[17:04] *** Guest55848 left
[17:05] <timotimo> it seems like that's already doable with regular traits and a bit of wrap

[17:06] *** dakkar left
[17:06] <gtodd> .kv is so cool :-)  it's one of those "little things" that is very nice about perl6 ... of course you can do keys and values on an array in perl5 too (say "$_ $a[$_]" for keys @a ;  #errm or something) but 

[17:07] <vendethiel> timotimo: maybe =)

[17:07] *** ajr joined
[17:07] *** Hor|zon left
[17:07] *** virtualsue left
[17:07] <timotimo> gtodd: now here's a mind-boggler for you:

[17:07] <timotimo> m: say "hello".kv

[17:07] <camelia> rakudo-moar 8b3e8c: OUTPUT«0 hello␤»

[17:08] *** ajr left
[17:08] <dalek> Inline-Python: efc8caa | nine++ | / (3 files):

[17:08] <dalek> Inline-Python: Support passing hashes to Python

[17:08] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/efc8caa2be

[17:08] *** gfldex joined
[17:09] <gtodd> heheh

[17:10] *** Mouq left
[17:10] <gtodd> m: say "hello person".kv

[17:10] <camelia> rakudo-moar 8b3e8c: OUTPUT«0 hello person␤»

[17:10] <gtodd> doh

[17:11] <gtodd> m: say <hello person persons>.kv

[17:11] <camelia> rakudo-moar 8b3e8c: OUTPUT«0 hello 1 person 2 persons␤»

[17:11] *** kjs_ left
[17:12] *** leont left
[17:12] <dalek> Inline-Python: caf7b40 | nine++ | / (3 files):

[17:12] <dalek> Inline-Python: Support passing Any to Python (ends up as None)

[17:12] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/caf7b40a38

[17:15] <dalek> Inline-Python: a0c7035 | nine++ | t/ (3 files):

[17:15] <dalek> Inline-Python: Add test for precompilation

[17:15] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/a0c7035782

[17:25] *** isBEKaml joined
[17:29] *** ptc_p6 joined
[17:29] *** anaeem1 joined
[17:29] *** anaeem1 left
[17:30] <gtodd> if you try to reverse a hash in p6 %hash.reverse nothing happens and you have to remember .inverse ...  should there be an error message?

[17:30] <colomon> warning, anyway, I'd say

[17:31] <gtodd> I say this because the autocreating of arrays (so dup keys don't clash) part of .inverse is just *awesome*

[17:31] <vendethiel> can't really do anything. This is in the bag of "everything on any"

[17:32] <gtodd> this will make people want inverse in perl5 or ... add "inverse" to their growing list of perl6 lovely things

[17:32] <gtodd> colomon: oops yeah I meant a SORRY! :-) 

[17:33] *** grettis joined
[17:33] *** Hor|zon joined
[17:34] <gtodd> I could add an issue somewhere ... just to watch it get added so I can learn about warnings :-)

[17:37] <gtodd> or perhaps the plan is to eventually merge slip/reverse/invert into a some kind of overloaded data type aware version of reverse ?

[17:39] <colomon> hashes aren't ordered, reverse never makes sense on them.

[17:39] <vendethiel> m: my $a = 1; say $a.push(3).perl # gtodd

[17:39] <camelia> rakudo-moar 8b3e8c: OUTPUT«Cannot call 'push'; none of these signatures match:␤:(Any:U \SELF: *@values, *%_)␤  in block <unit> at /tmp/tXY5UZk0DY:1␤␤»

[17:39] <vendethiel> meh

[17:39] *** Hor|zon left
[17:41] *** CRM114 joined
[17:41] <gtodd> ok good

[17:41] *** jercos_ is now known as jercos

[17:43] <isBEKaml> heh. reverse on hashes. :-)

[17:44] <isBEKaml> yeah, what colomon said - hashes don't have any ordered nature like lists/arrays do. So reverse doesn't make any sense. 

[17:44] *** camelia left
[17:45] <isBEKaml> where's camelia?

[17:45] <dalek> Inline-Perl5: 2f51f44 | nine++ | / (3 files):

[17:45] <dalek> Inline-Perl5: Support import list in $p5.use

[17:45] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/2f51f4410a

[17:46] <isBEKaml> m: say 42

[17:47] <gtodd> isBEKaml: agreed ... reverse becomes flip/reverse/invert ( of course I meant "flip" above ) and the invert makes more sense (I think people even talk about inverting hashes with reverse in perl5)

[17:48] <vendethiel> m: 1.push(3).perl.say; #gtodd

[17:48] <vendethiel> :( camelia

[17:49] *** SamuraiJack left
[17:50] *** camelia joined
[17:51] *** ChanServ sets mode: +v camelia

[17:52] *** Mouq joined
[17:52] <gtodd> the term invert is consistent, lovely and worthy of being highlighted when someone tries to reverse a hash :)

[17:52] <isBEKaml> gtodd: :-)

[17:53] <vendethiel> m: 1.push(3).perl.say; #gtodd

[17:53] <camelia> rakudo-moar 8b3e8c: OUTPUT«Cannot call 'push'; none of these signatures match:␤:(Any:U \SELF: *@values, *%_)␤  in block <unit> at /tmp/w4EikOzYpf:1␤␤»

[17:53] <vendethiel> what was it again :P

[17:53] <isBEKaml> gtodd: I somehow confuse you with tobyink on perlmonks. No idea why :-)

[17:55] * PerlJam can't stand much perlmonks these days ... too much NodeReaper and other such nonsense

[17:56] <Mouq> m: my @a = 132..138; say @a[@a.keys.pick(3)]:kv # gtodd

[17:56] <camelia> rakudo-moar 8b3e8c: OUTPUT«3 135 4 136 5 137␤»

[17:58] *** nwc10 left
[18:03] *** isBEKaml left
[18:03] *** dwarring joined
[18:04] *** ggherdov left
[18:06] *** Rounin left
[18:07] *** Rounin joined
[18:07] *** ggherdov joined
[18:07] *** isacloud left
[18:08] *** isacloud______ joined
[18:11] *** kjs_ joined
[18:16] *** SamuraiJack joined
[18:16] * jnthn is home safely

[18:19] <vendethiel> nice:) !

[18:20] <gtodd> m: "hair".flip  # pay stylist

[18:20] <camelia> rakudo-moar 8b3e8c: ( no output )

[18:20] *** Mso150 left
[18:20] <gtodd> m: "hair".flip.say # pay stylist

[18:20] <camelia> rakudo-moar 8b3e8c: OUTPUT«riah␤»

[18:21] <jnthn> The headwind that gave me a tight connection on the way out was a tailwind on the way home, so we were 25 mins early landing at CPH :)

[18:21] *** SamuraiJack left
[18:21] <gtodd> m: "hair".comb.reverse.join.say # do it yourself

[18:21] <camelia> rakudo-moar 8b3e8c: OUTPUT«riah␤»

[18:22] *** lucs_ is now known as lucs

[18:27] <tony-o> m: 'hair'.comb.perl.say;

[18:27] <camelia> rakudo-moar 8b3e8c: OUTPUT«("h", "a", "i", "r").list␤»

[18:30] *** kjs_ left
[18:30] *** Mso150 joined
[18:34] *** anaeem1_ joined
[18:36] *** Mso150 left
[18:37] *** Mso150 joined
[18:37] *** kjs_ joined
[18:38] *** Mso150 left
[18:39] *** Mso150 joined
[18:39] *** itz_ joined
[18:41] *** grondilu left
[18:43] *** grondilu joined
[18:45] *** ptc_p6 left
[18:47] <bartolin> I want to use something like the "std: <CODE>" locally. I checked out and built perl6/std from github, but I don't get an executable 'tools/std'

[18:47] <bartolin> is the following mostly equivalent?

[18:47] <bartolin> $ viv -c -e '<CODE>'

[18:48] <bartolin> or how would I do that?

[18:48] *** kjs_ left
[18:48] <masak> hm, I guess the question is "how does camelia do it?"

[18:49] <bartolin> yes, that's what I mean ;-)

[18:49] <masak> https://github.com/perl6/evalbot/blob/master/evalbot.pl#L178

[18:50] <bartolin> aha, thanks!

[18:50] * bartolin looks

[18:50] *** _slade_ left
[18:52] *** Hor|zon joined
[18:54] <moritz> (camelia never passes actual code on the command line, because of quoting trouble

[18:54] <moritz> )

[18:55] <vendethiel> kwotes

[18:59] *** xfix is now known as notfix

[19:15] *** Hor|zon left
[19:19] *** Mso150 left
[19:20] *** Mso150 joined
[19:22] *** darutoko left
[19:29] *** virtualsue joined
[19:31] <masak> pmurias: re https://gist.github.com/pmurias/e341037f5e8495aaf457 -- yep.

[19:32] <masak> pmurias: from the blog post: "I think any more complicated than this and it'd be a slang. In fact, I don't mind if there's a nice, sliding scale, so that you can essentially evolve a cluster of macros of this type into a slang if you want."

[19:40] *** molaf left
[19:42] *** kjs_ joined
[19:43] <gtodd> m:  my @powers-of-two := 1, 2, 4 ... *; 1;   @powers-of-two[^10] # from http://perl6advent.wordpress.com/2010/12/04/the-sequence-operator/ 

[19:43] <camelia> rakudo-moar 8b3e8c: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[19:43] <gtodd> does the syntax from http://perl6advent.wordpress.com/2010/12/04/the-sequence-operator/  need updating in a comment?

[19:46] <colomon> m:  my @powers-of-two := 1, 2, 4 ... *; say  @powers-of-two[^10]

[19:46] <camelia> rakudo-moar 8b3e8c: OUTPUT«1 2 4 8 16 32 64 128 256 512␤»

[19:46] <colomon> the sequences are fine, I think

[19:46] <colomon> the 1l was there to make the REPL happy.

[19:46] <gtodd>  in the REPL I get

[19:46] <gtodd> @powers-of-two[^5]

[19:46] <gtodd> Cannot call 'postcircumfix:<[ ]>'; none of these signatures match:

[19:46] <gtodd> :(Any \SELF, int $pos)

[19:47] <gtodd> ...

[19:49] <PerlJam> gtodd: did you put "my @powers-of-two := ..." and "@powers-of-two[^5]"  on separate lines in the REPL?

[19:49] <gtodd> let me look

[19:49] <PerlJam> I think there's some bug there, but I'm not sure.

[19:50] <PerlJam> yeah ...

[19:51] <PerlJam> > my @x := 5,8

[19:51] <PerlJam> 5 8

[19:51] <PerlJam> > say @x;

[19:51] <PerlJam> (Mu)

[19:51] <gtodd> hmm yes and I got WARNINGS: Useless use of constant integer 1 in sink context (line 1)  ... then I ran it again on separate lines :-|

[19:51] <gtodd> on one line it works

[19:52] <gtodd> so is it easier to comment on the advent blog or fix any perl6 bug :)

[19:54] <gtodd> later is probably more useful ... wasn't sure if it was an already reported bug  

[19:54] <PerlJam> RT#12294 btw

[19:54] <gtodd> ok thanks

[19:54] <PerlJam> er, #122914

[19:54] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122914

[19:58] <gtodd> relatively new ... or newly reported ...  

[20:01] *** guru joined
[20:01] *** guru is now known as Guest71001

[20:04] *** Guest71001 is now known as ajr_

[20:05] *** virtualsue left
[20:06] *** rindolf left
[20:09] *** rindolf joined
[20:11] *** leont joined
[20:12] *** Sqirrel left
[20:15] *** new_listener joined
[20:15] *** new_listener left
[20:20] *** Mso150 left
[20:20] <pmichaud> good afternoon, #perl6

[20:21] <jepeway> good pm, pm.

[20:21] *** kaare_ left
[20:23] <jepeway> so...got a q re .WHAT: i don't know how to append it to a string.

[20:23] <jepeway> m: say 1.WHAT

[20:23] <camelia> rakudo-moar 8b3e8c: OUTPUT«(Int)␤»

[20:23] <jepeway> m: say 1 ~ "eek"

[20:23] <camelia> rakudo-moar 8b3e8c: OUTPUT«1eek␤»

[20:23] <dalek> Inline-Python: 8d6a813 | nine++ | / (3 files):

[20:23] <dalek> Inline-Python: Support passing Python objects through Perl space and calling methods

[20:23] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/8d6a81300a

[20:23] <dalek> Inline-Python: 8b44f1c | nine++ | / (3 files):

[20:23] <dalek> Inline-Python: Allow passing Any to Python methods

[20:23] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/8b44f1cdf1

[20:23] <jepeway> m: say 1.WHAT ~ "eek"

[20:23] <camelia> rakudo-moar 8b3e8c: OUTPUT«use of uninitialized value of type Int in string context  in block <unit> at /tmp/TQgFvxvwGk:1␤␤eek␤»

[20:23] <jepeway> hrm?

[20:25] <moritz> m: say 1.^name ~ "eek"

[20:26] <camelia> rakudo-moar 8b3e8c: OUTPUT«Inteek␤»

[20:26] <moritz> jepeway: .WHAT returns the actual type object. say() knows how to print it, but it's the empty string (+ warning) in string context

[20:26] <jepeway> aha.

[20:27] <moritz> to get the class name, use the 'name' method of the metaclass

[20:27] <moritz> and .^method calls a method on the meta class object

[20:27] <jepeway> aha-er - say doesn't impose string context.

[20:27] <moritz> no, it calls .gist

[20:28] *** rurban left
[20:28] *** zakharyas joined
[20:28] <pmichaud> So, I have a blog article drafted about the GLR, but before I post it.... anyone else besides me have any qualms (or answers) to the potential code breakage we're about to inflict on existing Perl 6 users...?

[20:29] <jepeway> m: say 1.WHAT.gist ~ "eek"

[20:29] <camelia> rakudo-moar 8b3e8c: OUTPUT«(Int)eek␤»

[20:29] <jepeway> ok.  ty, moritz++

[20:31] *** azawawi joined
[20:31] <azawawi> hi #perl6

[20:32] <masak> pmichaud: oh, I'm never looking forward to this kind of overarching changes... but I do believe we're in a better position than ever before to detect and handle the ecosystem upheaval.

[20:32] <masak> pmichaud: and I do believe that it will be "worth it" for the consistency and performance benefits.

[20:33] <colomon> pmichaud: as an existing p6 user, I have some qualms.

[20:33] <[Coke]> I would recommend any changes for the GLR be done in a branch.

[20:33] <colomon> pmichaud: but if we do it all at once, it shouldn't be too bad.

[20:33] <[Coke]> then when we're closing to done, we can worry about bringing it back into nom.

[20:33] <[Coke]> *close to

[20:33] *** Hor|zon joined
[20:33] <dalek> Inline-Python: 3f06038 | nine++ | t/call.t:

[20:33] <dalek> Inline-Python: Fix and enable test for passing hashes to Python methods

[20:33] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/3f060380e1

[20:34] <colomon> [Coke]: yes, absolutely.

[20:34] <colomon> and I can easily hack the module smoke tester to work in a branch, so we can check out the changes against the ecosystem before merging them into nom.

[20:34] *** CRM114 left
[20:35] *** treehug88 joined
[20:35] <masak> 'night, #perl6

[20:35] <colomon> o/

[20:35] *** treehug8_ left
[20:37] <[Coke]> I can also update the daily spectest runs to cope.

[20:38] <dalek> Inline-Python: d708019 | nine++ | / (2 files):

[20:38] <dalek> Inline-Python: Support passing Python objects to Python methods from Perl 6

[20:38] <dalek> Inline-Python: review: https://github.com/niner/Inline-Python/commit/d708019687

[20:38] *** Hor|zon left
[20:39] <[Coke]> someone's being productive.

[20:39] <jnthn> pmichaud: Guess you made it back home? :)

[20:41] *** virtualsue joined
[20:41] <jnthn> pmichaud: While I doubt the Parcel going away will be a big impact, I find it much harder to estimate how big an impact the flattening changes are going to have...

[20:41] <jnthn> pmichaud: And I'm wondering how well we can know without "implement, run tests, run ecosystem code"

[20:42] <colomon> jnthn: see what I was saying above -- do it in a branch and I'll hack the ecosystem smoking to run on the branch

[20:42] <colomon> guess we'll have to branch roast, too.

[20:43] <jnthn> *nod*

[20:44] <vendethiel> m&z²:1

[20:44] <vendethiel> ermm...

[20:44] <vendethiel> masak: my text::indented is here: https://github.com/nami-doc/nephrite

[20:44] <vendethiel> masak: sorry - https://github.com/nami-doc/nephrite.pl 

[20:54] *** bjz_ joined
[20:55] *** bjz left
[20:57] *** colomon left
[20:58] <vendethiel> (I am very unhappy of how newlines are handled...)

[20:58] *** virtualsue left
[20:59] <gtodd> pmichaud: answers++ but if there is a comments section that might be useful for q/a as well

[21:01] <timotimo> i'm glad pm and jnthn made it back safely

[21:03] <gtodd> one question I will have will be does GLR changes effect the pretty amazing level of feature parity for the backends  -m -p -j ... answer: probably no way to know until the switch is thrown :-D

[21:05] <jnthn> gtodd: It will mostly be changes in CORE.setting, so in terms of feature parity I don't think there will be a big change here. 

[21:06] <gtodd> ++ 

[21:06] <pmichaud> sorry, got called away

[21:06] <pmichaud> yes, I made it home

[21:06] <pmichaud> yes, GLR changes will happen in a branch.  I'm more concerned about massive breakage of stuff... such as we're changing the semantics of .map a bit so that it doesn't flatten its invocant.

[21:06] <pmichaud> That's the one that concerns me the most, actually.

[21:06] <timotimo> gtodd: there's a reason why we have .flip, .reverse, .invert; it's the same reason why we have + and ~ instead of just +

[21:08] <pmichaud> [Coke]: btw, I'm planning to claim the blog post as a status update for the grant.  :)

[21:08] <jnthn> pmichaud: Yes, that seems the most likely source of pain.

[21:09] <jnthn> pmichaud: otoh, any .map on an Array (a common case) will likely be OK in a lot of cases, in so far as the assignment to the array is flattening.

[21:09] <pmichaud> jnthn: oh, that's likely true.  I'm thinking of things where we do  .foo.bar.map

[21:09] <jnthn> pmichaud: Indeed. 

[21:09] <gtodd> timotimo: I wondered about adding a SORRY warning for use of .reverse on a hash

[21:11] <pmichaud> 20:32 <masak> pmichaud: and I do believe that it will be "worth it" for the consistency and performance benefits.

[21:11] *** azawawi left
[21:11] <pmichaud> oh, I don't doubt that consistency and performance will win in the long run, I'm just wondering if we'll get a lot of initial blowback about how we're often burning our existing userbase by introducing incompatible changes

[21:11] * leont still isn't sure he understands the GLR

[21:11] <yoleaux> 11:10Z <FROGGS> leont: so, did I understand you right that I would need to look deeper into how IO::Uncompress::Gunzip achieves platformability in P5?

[21:11] <pmichaud> but hearing you say it's probably worth it is helpful :)

[21:12] <pmichaud> leont: that's what my blog post will hopefully clarify.  :)

[21:12] <pmichaud> and, fwiw, I was able to do an almost complete draft on the plane, as opposed to only select pieces.

[21:12] <pmichaud> bbiab

[21:13] *** azawawi joined
[21:14] <timotimo> i like the sound of that

[21:18] <azawawi> what sound? :)

[21:19] <jnthn> pmichaud: fwiw, I just went quickly over my own set of modules looking for uses of .map and .grep. I dunno it's an especially representative sample, but it is code I could look at quickly. I found only one place that I couldn't rule out needing an s/map/for/, but I think it probably would be fine without that anyway...

[21:20] *** bartolin left
[21:20] <leont> The only uses I had doubts about were range.map and split.map, though I suspect they'd both still work

[21:21] <jnthn> I think they'd be unaffected.

[21:21] *** jack_rabbit joined
[21:21] *** colomon joined
[21:22] *** zakharyas left
[21:25] <timotimo> azawawi: your irc client joining #perl6 of course ;)

[21:26] *** gfldex left
[21:27] *** denis_boyun_ joined
[21:28] * azawawi is working on git diff/log/status support in farabi6 :)

[21:28] <timotimo> oh wow

[21:28] <timotimo> farabi6 is really learning a bunch of tricks

[21:29] <timotimo> since you're looking to put farabi6 into star, would you be interested in giving farabi6 a conditionally active asynchronous ... thing?

[21:29] *** rindolf left
[21:29] *** leont left
[21:30] <timotimo> if i understand correctly, running a long-running script will make farabi6's server-side features unavailable?

[21:30] <timotimo> like, farabi6 would be blocked after executing some code would finish?

[21:31] *** kjs_ left
[21:32] *** broquaint left
[21:35] <[Coke]> pmichaud: (blog post, grant) Thank you for posting a status update.

[21:35] <azawawi> timotimo: add an issue? :)

[21:37] <masak> pmichaud: well, I never was in the group of people who might potentially complain about burning our existing userbase by introducing incompatible changes in the first place :)

[21:39] <timotimo> we shall unleash some righteous perlfire on those who believe the list stuff would be fine staying the way it is now ...

[21:42] <colomon> has pmichaud actually posted his blog post?

[21:45] <timotimo> didn't see it yet

[21:47] <pmichaud> range.map will be unaffected, definitely.  split.map should be unaffected.

[21:47] <pmichaud> I've not posted it yet.

[21:48] <pmichaud> It's drafted, but I need to attend to some formatting issues, and I drafted it while in a long metal tube next to what appeared to be a contagiously sick elderly russian woman, so I should make sure what I wrote makes grammatical and semantic sense.  :)

[21:50] *** ajr_ left
[21:50] <jnthn> О нет! Hope you didn't catch anything...

[21:51] <pmichaud> I don't feel like I've caught anything, but it's a little soon to tell.  I'll know by this evening.  I do know I loaded up on orange juice as a result.  :)

[21:51] <arnsholt> jnthn: Let's just hope he didn't catch that weird one that makes people forget how definiteness works =)

[21:51] <timotimo> agreed

[21:52] <pmichaud> ...definiteness?

[21:52] <masak> neither being elderly nor being Russian tends to be contagious...

[21:52] <timotimo> you think being elderly is not contagious?

[21:52] <masak> timotimo: it's more of an inherited thing.

[21:52] <pmichaud> I know hanging around youthful people is contagious.  :)

[21:52] <timotimo> it seems like it's extremely easy to contract, but often has a very long incubation time

[21:52] <arnsholt> pmichaud: Overly specific language joke, sorry =)

[21:53] <pmichaud> arnsholt: phew.  I was afraid I might've forgotten it already.

[21:53] <masak> I guess it's related to Russian not having an article.

[21:53] <masak> er, I mean "Russian not having article".

[21:53] <jnthn> masak: That's the good theory, yes. :)

[21:53] *** BenGoldberg joined
[21:54] * masak .oO( or is it "the article"? )

[21:54] <arnsholt> That's good theory, yeah =)

[21:54] *** anaeem1_ left
[21:54] * pmichaud reviews what he wrote on the plane.

[21:55] <arnsholt> I had a Ukranian researcher on the neighbouring desk for a few weeks. She occasionally asked me for advice on definite/indefinite corner cases

[21:55] * masak .oO( all the missing articles from Russian are counterbalanced by people who have to feed the the cat )

[21:56] <arnsholt> *whoosh*

[21:56] <arnsholt> Turnabout's fair play, I guess =)

[21:56] <BenGoldberg> Even native English speakers will overlook the the, if one the is on one line and the other the is on the next.

[21:57] <jnthn> It's a the the cat like the nyan cat?

[21:57] <masak> arnsholt: hint: count the words in "feed the the cat"

[21:57] <arnsholt> Oh. Derp =D

[21:57] *** colomon left
[21:57] <masak> :P

[21:57] <arnsholt> i rid reel gud

[21:57] <masak> it's frightfully easy to just slip over

[21:57] <mauke> /\<\(\w\+\)\s\+\1\>

[21:57] <masak> indeed

[21:57] <timotimo> oh lord

[21:58] <timotimo> mauke: why would you do this %)

[21:58] <mauke> oops, make that \_s

[21:58] <arnsholt> Interestingly, definite/indefinite isn't cross-linguistically completely fixed. There are some examples (that escape me ATM) where English and Scandinavian disagree

[21:58] <mauke> timotimo: not a vim fan? :-)

[21:58] <masak> arnsholt: an easy one: en:"Nature"/sv:"naturen"

[21:59] <timotimo> mauke: in my vim i can have \v and \V

[21:59] <masak> arnsholt: another one: en:"life"/sv:"livet"

[21:59] <arnsholt> Yeah, those are good ones

[21:59] <mauke> en: "life is short" vs. de: "das leben ist kurz"

[21:59] <jnthn> .oO( Well, that settles the nature/nurture debate... :P )

[21:59] <mauke> also, "back to school"

[22:00] <mauke> german would use a definite article (or is that "the definite article"?)

[22:00] <masak> "the the" :)

[22:01] *** treehug88 left
[22:10] *** Hor|zon joined
[22:17] *** Hor|zon left
[22:22] *** azawawi left
[22:22] *** FROGGS[mobile] left
[22:23] *** FROGGS[mobile] joined
[22:35] *** kurahaupo left
[22:35] *** FROGGS[mobile] left
[22:40] *** grettis left
[22:43] *** denis_boyun_ left
[22:47] *** colomon joined
[22:52] *** grettis joined
[22:58] *** dayangkun joined
[23:14] *** bjz_ left
[23:29] *** kurahaupo joined
