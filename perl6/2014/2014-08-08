[00:00] *** immortal left
[00:00] *** immortal joined
[00:00] * lue imagines the more bossy grammar modifications will disable the use statement or something similarly drastic to prevent issues with mixing.

[00:01] <Mouq> I think mixing will be fine if the slangs are constrained to only add to certain categories

[00:01] *** erkan left
[00:01] <lue> Mouq: as an example, operators (IIRC) are considered a form of grammar modification.

[00:01] <Mouq> I think maybe the distinction should be made between slangs and languages

[00:02] <lue> yeah, I actually don't think "slang" is a useful concept anymore, at least not how it's currently defined.

[00:02] *** thou left
[00:02] <Mouq> lue: It's defined? :P

[00:03] <lue> The grammar part of language modification doesn't concern me nearly so much as the actions part, by the way. o_e

[00:06] * lue afk

[00:10] *** iarna joined
[00:12] <dalek> doc: aa56705 | Mouq++ | / (2 files):

[00:12] <dalek> doc: Make sure urls are uri_escape'd

[00:12] <dalek> doc: 

[00:12] <dalek> doc: Fixes problems with links to operators like % and / being unescaped.

[00:12] <dalek> doc: review: https://github.com/perl6/doc/commit/aa56705ee0

[00:12] <Mouq> Sorry for taking so long with that '<

[00:23] *** jnap left
[00:29] *** kurahaupo left
[00:33] *** rurban joined
[00:33] *** virtualsue left
[00:37] *** rurban left
[00:44] <dalek> roast: fd29f2b | Mouq++ | S02-types/multi_dimensional_array.t:

[00:44] <dalek> roast: More comprehensive multi-dim tests

[00:44] <dalek> roast: review: https://github.com/perl6/roast/commit/fd29f2b463

[00:49] *** iarna left
[00:50] *** iarna joined
[00:50] *** fling left
[00:55] *** nbrown___ joined
[01:00] <dalek> roast: d870e42 | Mouq++ | S02-types/multi_dimensional_array.t:

[01:00] <dalek> roast: Add tests for multi-dim slice assignment

[01:00] <dalek> roast: review: https://github.com/perl6/roast/commit/d870e42066

[01:01] *** fling joined
[01:02] *** egrep left
[01:06] <hoelzro> wow, CORE.setting parsed in 38 seconds o_O

[01:07] <hoelzro> next thing you know mokudo will make the kessel run in 12 parsecs!

[01:10] *** egrep joined
[01:10] *** thou joined
[01:15] *** thou left
[01:15] *** BenGoldberg joined
[01:17] <dalek> rakudo/nom: 356d57a | Mouq++ | src/core/ (2 files):

[01:17] <dalek> rakudo/nom: Fix multi-dim slice assignment

[01:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/356d57aabb

[01:17] <dalek> roast: 5f72f88 | Mouq++ | S02-types/multi_dimensional_array.t:

[01:17] <dalek> roast: Unfudge multi-dim slice assignment on Rakudo

[01:17] <dalek> roast: review: https://github.com/perl6/roast/commit/5f72f889d9

[01:21] <BenGoldberg> m: infix<d>($n,$s) { [+] (1..$s).roll($n) }; say 3 d 6;

[01:21] <camelia> rakudo-moar 6117d5: OUTPUT«===SORRY!=== Error while compiling /tmp/FbI1bA9izz␤Variable '$n' is not declared␤at /tmp/FbI1bA9izz:1␤------> infix<d>($n⏏,$s) { [+] (1..$s).roll($n) }; say 3 d 6␤    expecting any of:␤        postfix␤»

[01:21] <BenGoldberg> m: infix:<d>($n,$s) { [+] (1..$s).roll($n) }; say 3 d 6;

[01:21] <camelia> rakudo-moar 6117d5: OUTPUT«===SORRY!=== Error while compiling /tmp/a2POEoRiaS␤Variable '$n' is not declared␤at /tmp/a2POEoRiaS:1␤------> infix:<d>($n⏏,$s) { [+] (1..$s).roll($n) }; say 3 d 6␤    expecting any of:␤        postfix␤»

[01:21] <hoelzro> BenGoldberg: prefix with sub?

[01:21] <hoelzro> m: sub infix:<d>($n,$s) { [+] (1..$s).roll($n) }; say 3 d 6;

[01:21] <BenGoldberg> m: sub infix:<d>($n,$s) { [+] (1..$s).roll($n) }; say 3 d 6; # I knew that ;)

[01:21] <camelia> rakudo-moar 6117d5: OUTPUT«13␤»

[01:22] <camelia> rakudo-moar 6117d5: OUTPUT«11␤»

[01:22] <hoelzro> ;)

[01:32] *** dayangkun joined
[01:33] *** klapperl_ joined
[01:34] *** FROGGS_ joined
[01:34] *** rurban joined
[01:36] *** klapperl left
[01:37] *** zakharyas joined
[01:37] *** FROGGS left
[01:38] *** rurban left
[01:44] *** ilbot3 left
[01:46] *** ilbot3 joined
[01:46] <japhb> Wild, I leave the infix:<d> idea as the last thing I say in this channel yesterday, I come back, and it's the most recent thing someone else has said.  :-)

[01:49] *** nbrown___ left
[01:56] *** lustlife joined
[02:00] *** rurban joined
[02:08] <dalek> ecosystem: 14c993b | (Rob Hoelz)++ | META.list:

[02:08] <dalek> ecosystem: Add IO::String to META.list

[02:08] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/14c993bf8f

[02:08] *** dayangkun left
[02:09] *** iarna left
[02:09] <hoelzro> has anyone else had trouble installing panda lately?

[02:10] <hoelzro> I get this: When pre-compiling a module, its dependencies must be pre-compiled first

[02:11] *** Mouq left
[02:12] <hoelzro> oh, nvm

[02:12] <hoelzro> I think I found a fixer-upper commit

[02:15] *** rurban left
[02:16] *** dayangkun joined
[02:18] *** BenGoldberg left
[02:18] *** BenGoldberg joined
[02:24] *** chenryn__ joined
[02:26] *** iarna joined
[02:32] <dalek> ecosystem: 97da7e1 | (Rob Hoelz)++ | META.list:

[02:32] <dalek> ecosystem: Add Algorithm::LCS to META.list

[02:32] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/97da7e1487

[02:36] *** iarna left
[02:48] <[Coke]> Files=912, Tests=32074, 151 wallclock secs ( 7.28 usr  2.61 sys + 989.20 cusr 110.46 csys = 1109.55 CPU)

[02:49] <[Coke]> not bad for a spectest run. (new box)

[02:55] *** croque joined
[02:55] <croque> TimToady hello

[02:55] <croque> hello all.

[02:58] <[Coke]> ~~

[02:58] *** iarna joined
[02:59] *** thou joined
[03:00] *** noganex_ joined
[03:01] *** dayangkun left
[03:01] <BenGoldberg> m: sub gcd { $^b ?? gcd($^b, $^a % $^b) !! $^a }; say gcd( 12345, 67890 );

[03:02] <camelia> rakudo-moar 356d57: OUTPUT«15␤»

[03:03] *** Mouq joined
[03:03] *** noganex left
[03:04] *** iarna left
[03:04] *** thou left
[03:05] <hoelzro> croque: hello

[03:10] <croque> hoelzro Am looking for an easy tutorial for me to learn to program in Perl 6 and would like to know what this language can do? : P

[03:10] <croque> :)

[03:10] *** xragnar left
[03:11] <PerlJam> croque: There are some link on perl6.org under Documentation and Community

[03:11] <PerlJam> s/link/links/

[03:11] *** sivoais_ left
[03:12] <croque> PerlJam ok man, thanks :)

[03:12] <croque> rs

[03:13] <PerlJam> croque: I've also got some docs at https://github.com/perlpilot/perl6-docs/tree/master/intro that I wrote a while ago

[03:13] <btyler> croque: there's also http://learnxinyminutes.com/docs/perl6/ which was written in the last few weeks

[03:13] <croque> PerlJam ok bro, very good :P

[03:13] <croque> ..

[03:13] <croque> btyler thanks

[03:13] <croque> :D

[03:14] *** dayangkun joined
[03:14] <PerlJam> That should probably be on perl6.org too if it's not already.

[03:15] *** xragnar joined
[03:15] <croque> I'm Brazilian, I do not know much English, however I will dedicate myself, learn English and perl, thanks for strength! ^ ^

[03:15] <croque> ok

[03:17] <BenGoldberg> We need to get a bot on this channel that can be told to answer common questions... like perlbot does on #perl

[03:17] <PerlJam> croque: There's also perl6advent.wordpress.com that goes back to 2009

[03:17] <croque> BenGoldberg ye

[03:17] <croque> ;)

[03:18] <PerlJam> croque: maybe you can help translate some of this stuff to portuguese  :)

[03:21] <croque> PerlJam ye, Learning, translated to my countrymen and other Portuguese-speaking countries .. :)

[03:22] *** sivoais joined
[03:28] *** Mouq left
[03:32] *** BenGoldberg left
[03:51] *** xenoterracide left
[04:01] *** kaare_ joined
[04:04] *** SevenWolf joined
[04:16] *** thou joined
[04:38] *** xinming left
[04:40] *** croque left
[04:46] *** rurban joined
[04:52] *** kaare_ left
[04:54] *** [Sno] left
[04:58] *** gfldex joined
[05:01] *** xinming joined
[05:07] *** kst left
[05:08] *** dwarring left
[05:09] *** chenryn__ left
[05:09] *** chenryn__ joined
[05:11] *** kst joined
[05:12] *** kaare_ joined
[05:15] *** chenryn__ left
[05:16] *** immortal left
[05:16] *** erkan joined
[05:19] *** immortal joined
[05:20] *** immortal left
[05:20] *** immortal joined
[05:21] *** erkan left
[05:24] *** rurban left
[05:27] *** zakharyas left
[05:30] *** chenryn__ joined
[05:35] *** SevenWolf left
[05:36] *** darutoko joined
[05:41] *** kaleem joined
[05:42] *** cognome left
[05:42] *** cognome joined
[05:47] *** cognome left
[05:53] *** thou left
[05:56] *** kaleem left
[06:03] *** virtualsue joined
[06:05] *** Akagi201 joined
[06:09] *** kaleem joined
[06:11] *** denis_boyun_ joined
[06:14] *** baest left
[06:16] *** aoseki joined
[06:19] *** akaseki left
[06:29] *** kurahaupo joined
[06:35] *** Alina-malina left
[06:36] *** Alina-malina joined
[06:37] *** kaleem left
[06:39] <sergot> o/

[06:51] <SHODAN> are we there yet?

[06:51] *** anaeem1_ joined
[06:52] * egrep looks out of the windows

[06:52] <egrep> Nope. We're not in Devon yet.

[06:55] *** dmol joined
[06:56] <SHODAN> :(

[06:59] *** dmol left
[06:59] <sergot> http://www.twitch.tv/fishplayspokemon oh, a fish that plays pokemon.. 

[07:01] *** akaseki joined
[07:01] *** kurahaupo left
[07:04] *** aoseki left
[07:04] <masak> morningz, #perl6

[07:05] <sergot> hi masak 

[07:05] <moritz> \o *

[07:08] <timotimo> o/

[07:08] *** thou joined
[07:13] *** thou left
[07:17] *** [Sno] joined
[07:24] *** lizmat joined
[07:24] *** kaleem joined
[07:26] *** dmol joined
[07:28] *** FROGGS_ is now known as FROGGS

[07:31] <FROGGS> .tell cognome I can explain what FOREIGN_LANG does

[07:31] <yoleaux> FROGGS: I'll pass your message to cognome.

[07:37] *** virtualsue left
[07:46] *** brrt joined
[07:49] *** baest joined
[07:51] *** kivutar joined
[07:53] *** aoseki joined
[07:55] *** akaseki left
[08:02] *** aoseki is now known as SailorTsundere

[08:02] *** tzictli joined
[08:10] <timotimo> hm, it doesn't seem like inlining works after my patch last night

[08:14] *** SailorTsundere is now known as midoriseki

[08:21] <timotimo> jnthn: i think my last patch goes in the right direction, but i'd probably have to litter the code with log statements or so to see where exactly it goes wrong now

[08:22] *** lizmat left
[08:22] *** lizmat joined
[08:22] <timotimo> and moarvm bytecode dumping doesn't work either

[08:23] <jnthn> Hm, I fixed the dumping

[08:23] <jnthn> Oh, but I think I put the patch in moar-jit

[08:33] *** fhelmberger joined
[08:39] *** immortal left
[08:44] *** akaseki joined
[08:46] *** midoriseki left
[08:53] *** virtualsue joined
[08:56] *** thou joined
[08:59] *** salv0 left
[09:00] *** mr-foobar left
[09:00] *** mr-foobar joined
[09:01] *** thou left
[09:03] *** lizmat left
[09:04] *** lizmat joined
[09:05] *** lizmat left
[09:05] *** lizmat joined
[09:18] *** telex left
[09:19] *** salv0 joined
[09:20] *** spider-mario joined
[09:20] *** telex joined
[09:24] *** PotatoGim left
[09:25] *** tzictli left
[09:29] *** akaseki left
[09:33] *** akaseki joined
[09:34] *** brrt left
[09:41] *** aoseki joined
[09:44] *** akaseki left
[09:44] <masak> someone want to add Perl 6's "operators are just functions" approach to https://en.wikipedia.org/wiki/Operator_overloading#Timeline_of_operator_overloading ?

[09:56] *** nbrown___ joined
[09:59] <lizmat> afk until way tomorrow&

[09:59] *** lizmat left
[10:01] <colomon> Unhandled exception: While looking for 'ModuleLoader.moarvm': no such file or directory

[10:01] <colomon>    at <unknown>:1  (/home/smoker/.rakudobrew/moar-HEAD/install/languages/perl6/runtime/perl6.moarvm::7)

[10:01] <colomon> Segmentation fault (core dumped)

[10:04] *** kivutar left
[10:05] <FROGGS> it should be in /home/smoker/.rakudobrew/moar-HEAD/install/languages/nqp/lib/Perl6

[10:08] <timotimo> the cat wants some of my cheesecake

[10:08] *** chenryn__ left
[10:16] <FROGGS> bad kitty!

[10:18] *** pecastro left
[10:19] <timotimo> had to grab him and put him back down on the floor like four times %)

[10:20] <timotimo> twice from the left, twice from the right

[10:20] *** [particle]1 joined
[10:20] <psch> hi #perl6 o/

[10:20] <timotimo> because if he's not allowed to go at the cheesecake from the left, maybe he's allowed from the right?

[10:21] *** cooper__ joined
[10:21] *** ssutch joined
[10:21] <FROGGS> timotimo: well, and then that is his cheesecake since you are just a guest

[10:22] <timotimo> that's right

[10:22] *** colomon_ joined
[10:22] <timotimo> i *am* only a guest

[10:22] <timotimo> jnthn: changing the clone stuff to use QAST::Children's shallow_clone if it's of that type gives me the error Unknown QAST node type QAST::InlinePlaceholder

[10:23] *** colomon left
[10:23] *** [particle] left
[10:23] *** brrt joined
[10:23] <timotimo> but aren't InlinePlaceholders supposed to be replaced with vars by the time we in-line?

[10:23] *** colomon_ is now known as colomon

[10:23] *** firnsy left
[10:23] *** sam_ left
[10:23] *** Alina-malina left
[10:23] *** yakudza left
[10:23] *** sftp left
[10:23] *** cooper_ left
[10:23] *** yakudzo joined
[10:24] *** Alina-malina joined
[10:24] *** lustlife left
[10:25] *** firnsy joined
[10:25] *** firnsy left
[10:25] *** firnsy joined
[10:25] *** sftp joined
[10:29] *** akaseki joined
[10:30] <timotimo> hm, it might want to learn about QAST::NodeList?

[10:31] *** aoseki left
[10:32] * timotimo throws hands up in air

[10:32] *** pecastro joined
[10:33] <psch> better the hands than the cat or cheesecake!

[10:33] <timotimo> :)

[10:33] <timotimo> maybe the cat would enjoy being thrown up in the air?

[10:33] <timotimo> the cat would definitely enjoy me throwing the cheesecake on the floor

[10:33] <timotimo> that would be quite the meal %)

[10:33] <timotimo> AFK

[10:36] *** aoseki joined
[10:39] *** chenryn__ joined
[10:40] *** akaseki left
[10:42] *** kuroseki joined
[10:45] *** aoseki left
[10:45] *** thou joined
[10:46] <FROGGS> jnthn: I have a null object during stage parse in rakudo when I add debugging output to the nfa

[10:46] *** chenryn__ left
[10:46] <FROGGS> jnthn: it explodes in op decont, and it seems to be str $name in mergesubrule

[10:49] *** thou left
[10:52] *** akaseki joined
[10:53] <FROGGS> the obj itself is not NULL, but it points to NULLish memory

[10:55] *** aoseki joined
[10:55] *** kuroseki left
[10:57] *** akaseki left
[10:59] <FROGGS> hmmm, it is not str $name... it might be $meth (returned by .NFA)

[11:01] *** brrt left
[11:03] *** erkan joined
[11:10] *** Akagi201 left
[11:17] <FROGGS> err, returned by find_method

[11:25] *** Ven joined
[11:25] <Ven> o/, #perl6.

[11:26] *** akaseki joined
[11:26] <FROGGS> hi Ven

[11:27] <Ven> I should probably PR perl6.org to add the LearnXinY

[11:28] <masak> +1

[11:28] *** aoseki left
[11:28] <Ven> sjn: I'll merge your PR manually by tomorrow, because I want it to be done before I leave

[11:29] <jnthn> FROGGS: And does that happen on other backends?

[11:34] *** kaleem left
[11:35] *** Alula_ left
[11:36] *** Alula_ joined
[11:36] *** BenGoldberg joined
[11:40] *** araujo left
[11:42] *** chenryn__ joined
[11:43] *** araujo joined
[11:43] <FROGGS> jnthn: will check

[11:47] *** chenryn__ left
[11:52] *** kurahaupo joined
[11:59] *** kivutar joined
[12:02] *** chenryn__ joined
[12:04] *** akaseki left
[12:04] *** akaseki joined
[12:05] *** kaleem joined
[12:10] *** Mouq joined
[12:10] <Mouq> r: macro new_sub ($body) { quasi { sub { {{{$body}}} } } } # masak

[12:10] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!===␤Unknown QAST node type QAST::Unquote␤»

[12:10] <camelia> ..rakudo-jvm 356d57: OUTPUT«(timeout)»

[12:10] <camelia> ..rakudo-parrot 356d57: OUTPUT«===SORRY!===␤Error while compiling op p6decontrv: Unknown QAST node type QAST::Unquote␤»

[12:11] *** Mouq left
[12:12] *** kurahaupo left
[12:13] <masak> interesting.

[12:13] * masak submits rakudobug

[12:13] *** aoseki joined
[12:13] *** kurahaupo joined
[12:16] *** akaseki left
[12:19] *** aoseki left
[12:20] <FROGGS> jnthn: does not happen on parrot

[12:21] <BenGoldberg> n: macro new_sub ($body) { quasi { sub { {{{$body}}} } } } # masak

[12:21] <camelia> niecza v24-109-g48a8de3: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1355 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval…»

[12:21] *** brrt joined
[12:25] *** Ven left
[12:27] <FROGGS> BenGoldberg: but that's niecza

[12:27] *** chenryn__ left
[12:28] <BenGoldberg> I just wondered what it would do ;)

[12:28] *** cognome joined
[12:29] <FROGGS> :o)

[12:31] <BenGoldberg> rn: my %c; %c{~[12,'12a',2].pick(*).sort} += 1 for 1..1e3; say %c;

[12:32] <camelia> rakudo-jvm 356d57: OUTPUT«(timeout)»

[12:32] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1389 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 301 (Any.Numeric @ 8) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/tmpfile line…»

[12:32] <camelia> ..rakudo-moar 356d57: OUTPUT«("12 12a 2" => 377, "12a 2 12" => 316, "2 12 12a" => 307).hash␤»

[12:32] <camelia> ..rakudo-parrot 356d57: OUTPUT«("12 12a 2" => 344, "12a 2 12" => 318, "2 12 12a" => 338).hash␤»

[12:33] *** thou joined
[12:34] <BenGoldberg> n: my %c; %c{[12, '12a', 2].pick(*).sort} += 1 for 1..1e3; say %c;

[12:34] <camelia> niecza v24-109-g48a8de3: OUTPUT«{"12" => Any, "12a" => Any, "2" => 4}␤»

[12:38] <FROGGS> jnthn: here is the bt: https://gist.github.com/FROGGS/be085ebc2da2a4167497

[12:38] *** thou left
[12:43] <FROGGS> jnthn: I don't know how to continue from here :/

[12:50] *** dayangkun left
[12:53] *** jnap joined
[12:55] <dalek> roast/S26-WHY: f5eef00 | (Rob Hoelz)++ | S26-documentation/why-trailing.t:

[12:55] <dalek> roast/S26-WHY: S26: Add test for trailing comments on roles, grammars, etc

[12:55] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/f5eef00528

[12:55] <dalek> roast/S26-WHY: 34f6287 | (Rob Hoelz)++ | S26-TODO.md:

[12:55] <dalek> roast/S26-WHY: More checking off of what's been done (test-wise)

[12:55] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/34f6287503

[12:55] <dalek> roast/S26-WHY: 180f2d8 | (Rob Hoelz)++ | S26-TODO.md:

[12:55] <dalek> roast/S26-WHY: Make note to test with precompilation

[12:55] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/180f2d8254

[12:56] *** anaeem1_ left
[12:57] <PerlJam> buenos tardes mis amigos

[12:58] *** itz_ joined
[12:58] <[Coke]> hola; ¿que tal?

[12:58] <PerlJam> well ... it's afternoon somewhere :)  

[12:58] <Ulti> where I am right now

[12:59] *** itz left
[13:00] <PerlJam> (the european contingent are always later in the day, so I thought I'd edge my greeting more in their direction :)

[13:00] <PerlJam> Coke: I'm still waking up.  slowly.  (been up for a couple of hours, but I don't feel like it)

[13:01] <jnthn> Si; es la tarde aqui :)

[13:01] *** [Sno] left
[13:01] * jnthn wonders how fail that was :)

[13:01] <jnthn> Haven't used Spanish at all for over 2 years...

[13:01] <PerlJam> jnthn: it got the meaning across, so ... no fail :)

[13:02] *** jnap left
[13:02] *** dayangkun joined
[13:03] <jnthn> Yeah. tbh I mostly used it to enable me to go eat at local restaurants rather than tourist traps when in Argentina. :)

[13:04] <jnthn> When I lived in Spain, about 7 years ago now, I was somewhat more competent. Alas, lack of use = forgetting... :(

[13:05] *** jnap joined
[13:05] <PerlJam> food does seem to be a driving force in language learning.  (I mean, I know much more food stuff in spanish than I do other random conversational things)

[13:06] <[Coke]> bieru o-kudasai!

[13:07] <PerlJam> I can guess that first word, but google translate will have to help me with the rest.

[13:08] <PerlJam> well, maybe not.  stupid translator.

[13:08] *** kaare_ left
[13:09] <jnthn> "Beer please" innit?

[13:09] <timotimo> una cervesa por favor

[13:10] <timotimo> cerveza, apparently

[13:10] <jnthn> yes :)

[13:10] <nwc10> I can't spell it, but "pivo mowlem"

[13:10] <nwc10> summon mberends to correct me

[13:10] <jnthn> nwc10: Croatian? :)

[13:11] <nwc10> yes

[13:11] <nwc10> how many slavic languages are similar

[13:11] <nwc10> ?

[13:11] <Ulti> mia birra parakalo

[13:11] <PerlJam> all of them?

[13:11] <nwc10> IIRC, also "øl tag"

[13:11] <jnthn> Well, there's west, east, and south slavic subgroups

[13:12] <jnthn> Croatian being in the south, which is the group I'm most ignorant about :)

[13:12] <nwc10> because of all that nasty warm weather?

[13:12] <[Coke]> "fosters, mate?"

[13:13] <jnthn> Just haven't been there so much

[13:13] <jnthn> I lived in a country speaking a west slavic language for a bit :)

[13:14] <jnthn> And traveled and had a g/f in a country speaking an east slavic one :)

[13:14] <jnthn> But only visited Slovenia and Croatia for a few days each.

[13:14] <jnthn> Pity. It's really nice down there.

[13:15] <nwc10> "hack"athon next year? :-)

[13:15] <jnthn> ooh

[13:15] <jnthn> I'd do it :)

[13:16] <nwc10> the smiley was meant to show that "I'm not organising one".

[13:16] <nwc10> I'm not even really managing to organise this one: http://act.useperl.at/apw2014/talk/5565

[13:18] <PerlJam> nwc10: There's no date scheduled, but you know it's going to be on a Sunday?

[13:20] *** Ven joined
[13:20] <nwc10> Odd. Act knows that it's on the 12th

[13:21] <nwc10> OK. http://act.useperl.at/apw2014/schedule?day=2014-10-12

[13:21] <nwc10> "The schedule is not ready to be seen." unless you are logged in as an admin

[13:22] *** FROGGS[mobile] joined
[13:22] *** dayangkun left
[13:22] *** rurban joined
[13:22] <Ven> I just realized -- we don't have a `!when` ?

[13:22] <nwc10> PerlJam: it does say "Sunday" and "Monday" on http://act.useperl.at/apw2014/index.html

[13:22] <PerlJam> Ven: why would we?

[13:23] <nwc10> PerlJam: but you're right, it doesn't say that on the page for the "presentation"

[13:23] <Ven> PerlJam: `.say whenot /a/ for @a`

[13:23] *** brrt left
[13:24] *** guru joined
[13:25] <[Coke]> same reason you'd have if ! complicated(thing) { # common case } ?

[13:25] *** guru is now known as Guest92059

[13:25] <PerlJam> Ven: why use when there at all instead of if/unless?

[13:25] *** Guest92059 is now known as ajr_

[13:25] <PerlJam> m: .say unless /a/ for <foo bar baz goober>;

[13:25] <camelia> rakudo-moar 356d57: OUTPUT«foo␤goober␤»

[13:25] <[Coke]> PerlJam: why have when at all if we have if/unlesss?

[13:26] <moritz> the real question is: what would the !when thingy be called?

[13:26] <Ven> PerlJam: that only works with regexps

[13:26] <cognome> FROGGS, so what FOREIGN_LANG does?

[13:26] <yoleaux> 07:31Z <FROGGS> cognome: I can explain what FOREIGN_LANG does

[13:26] <moritz> because !when is clearly no advantage over when !

[13:26] <Ven> m: .say when 5 for ^10; say unless 20 when ^30;

[13:26] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!=== Error while compiling /tmp/_Inx9hIkVk␤Missing semicolon.␤at /tmp/_Inx9hIkVk:1␤------> .say when 5 for ^10; say unless 20 ⏏when ^30;␤    expecting any of:␤        postfix␤»

[13:26] <Ven> m: .say when 5 for ^10; say when !20 for ^30;

[13:26] <camelia> rakudo-moar 356d57: OUTPUT«5␤»

[13:26] <Ven> moritz: ^.

[13:27] <moritz> Ven: I see the use case, but still not a good name

[13:27] <[Coke]> moritz: I don't think when ! foo would work the same as when not foo.

[13:27] <Ven> ($s.split('') X=> ('a'..z') xx *).map(* ne *)[0].key; <- my code for what I wanted to do

[13:27] <Ven> moritz: oh, ofc, terrible name :)

[13:27] <[Coke]> er, whennot.

[13:27] <BenGoldberg> m: .say when none(5) for ^10;

[13:28] <camelia> rakudo-moar 356d57: OUTPUT«0␤1␤2␤3␤4␤6␤7␤8␤9␤»

[13:28] <moritz> [Coke]: right, it's a smart match

[13:28] <moritz> BenGoldberg++

[13:28] <moritz> yes, a junction works for negating a smart match

[13:28] <Ven> yeah, thought about it :)

[13:28] <[Coke]> I tried to write "when !~" just now.

[13:28] <BenGoldberg> Is there a linenoise version of none, though?

[13:28] <Ven> BenGoldberg: none doesn't have one

[13:29] *** MilkmanDan left
[13:30] *** MilkmanDan joined
[13:30] <Ven> they're binaries anyway

[13:30] <Ven> (though list associative)

[13:32] *** kaleem left
[13:32] *** kaleem joined
[13:35] <PerlJam> I don't see the need for increasing the sugar content to get a "not when".  "when" is already sugary enough by itself.  IF you need "not when", then just use the "if" forms.  (IMHO)

[13:35] <Ven> PerlJam: unless $_ ~~, actually.

[13:35] *** dayangkun joined
[13:36] <PerlJam> well,   "unless $_ ~~ ..."  or  "if $_ !~~ ...",  whichever makes you happiest.  :)

[13:36] <Ven> Oh, I can use >>[=>]>> instead of ('a'..'z') xx *

[13:37] *** dayangkun left
[13:37] *** dayangkun joined
[13:38] *** dayangkun left
[13:39] *** dayangkun joined
[13:39] <Ven> m: sub infix:<< <(((°> >>($s) { $s }; say <(((°> "foo"

[13:39] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!=== Error while compiling /tmp/bFZNlL9n8F␤Two terms in a row␤at /tmp/bFZNlL9n8F:1␤------> fix:<< <(((°> >>($s) { $s }; say <(((°> ⏏"foo"␤    expecting any of:␤        postfix␤        infix stopp…»

[13:39] <Ven> we lost the fish.

[13:40] *** chenryn joined
[13:40] <PerlJam> something was wrong with his tail anyway

[13:41] <moritz> well, if you declare it as an infix, you must use it as an infix :-)

[13:41] <BenGoldberg> m: sub prefix:<< <(((􏿽xB0> >>($s) { $s }; say <(((􏿽xB0> "foo"

[13:41] <camelia> rakudo-moar 356d57: OUTPUT«foo␤»

[13:41] <moritz>  m: sub infix:<< <(((°> >>($a, $b) { $a ~ $b }; say 'bar' <(((°> "foo"

[13:41] <camelia> rakudo-moar 356d57: OUTPUT«barfoo␤»

[13:42] <moritz> U+424242 RIGHT-FACING FISH

[13:42] <PerlJam> 424242?  What I tell you three times is true?

[13:43] <Timbus> <°)⋊

[13:44] <PerlJam> .oO( Next I'll show that Jesus is clearly the answer because he is often associated with the symbol of a fish :-)

[13:44] <BenGoldberg> rn: say 0x424242.chr

[13:44] <camelia> rakudo-jvm 356d57: OUTPUT«java.lang.IllegalArgumentException␤  in method chr at gen/jvm/CORE.setting:4498␤  in block  at /tmp/tmpfile:1␤␤»

[13:44] <camelia> ..rakudo-moar 356d57: OUTPUT«(signal )»

[13:44] <camelia> ..rakudo-parrot 356d57: OUTPUT«Invalid character for UTF-8 encoding␤␤  in method chr at gen/parrot/CORE.setting:4503␤  in block  at /tmp/tmpfile:1␤␤»

[13:44] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«(Any)␤»

[13:45] <BenGoldberg> Ouch

[13:46] <Ven> BenGoldberg++ :D # fish<3

[13:48] <BenGoldberg> m: sub prefix:<< ⋉((°> >> { say $^a }; ⋉((°> 'a fish';

[13:48] <camelia> rakudo-moar 356d57: OUTPUT«a fish␤»

[13:50] <Timbus> <°)͜͡˒ ⋊

[13:52] <Timbus> imagine if i used my talents for evil

[13:52] <Ven> we'd love it.

[13:54] <[Coke]> draw me phineas & ferb!

[13:54] *** fhelmberger_ joined
[13:54] *** fhelmberger_ left
[13:55] <Timbus> heh

[13:56] <PerlJam> would that be using his talents for evil or not?

[13:57] *** rurban left
[13:57] *** fhelmberger left
[13:58] <[Coke]> only to help take over the tri-state area!

[13:58] <Timbus> ∞⃤

[13:58] <Timbus> never used that triangle..

[13:58] <PerlJam> Timbus is Doofenshmirtz?

[14:01] *** thou joined
[14:02] *** ajr_ left
[14:02] <carlin> Stage parse      :  26.848

[14:03] <carlin> :o \o/

[14:03] <Ven> .u ∞⃤

[14:03] <yoleaux> U+20E4 COMBINING ENCLOSING UPWARD POINTING TRIANGLE [Me] (◌⃤)

[14:03] <yoleaux> U+221E INFINITY [Sm] (∞)

[14:07] *** rurban joined
[14:08] *** brrt joined
[14:16] *** akaseki joined
[14:22] <dalek> rakudo-star-daily: 7a35757 | coke++ | log/ (14 files):

[14:22] <dalek> rakudo-star-daily: today (automated commit)

[14:22] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7a35757db0

[14:23] *** Possum left
[14:24] *** Alula_ left
[14:31] *** kaare_ joined
[14:33] *** Possum joined
[14:36] *** dayangkun left
[14:36] *** kaleem left
[14:38] *** Alula_ joined
[14:39] *** guru joined
[14:39] *** guru is now known as Guest15157

[14:39] *** Guest15157 is now known as ajr_

[14:40] *** treehug88 joined
[14:41] *** ggoebel1111111 joined
[14:43] *** ggoebel1111110 left
[14:51] *** [Sno] joined
[15:01] <dalek> perl6-roast-data: 499ae6d | coke++ | / (5 files):

[15:01] <dalek> perl6-roast-data: today (automated commit)

[15:01] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/499ae6d10e

[15:03] <[Coke]> virtually no changes in daily test failures; all 4 implementations need fudging or tickets.

[15:04] *** treehug88 left
[15:05] *** PZt joined
[15:08] <Ven> m: say @*ARGVFILES

[15:08] <camelia> rakudo-moar 356d57: OUTPUT«Dynamic variable @*ARGVFILES not found␤  in method gist at src/gen/m-CORE.setting:12932␤  in sub say at src/gen/m-CORE.setting:13870␤  in block  at /tmp/IQVFvgMlR0:1␤␤»

[15:08] <Ven> trying to read one line off 2 files at the same time

[15:09] *** nbrown____ joined
[15:09] *** denis_boyun_ left
[15:09] *** nbrown___ left
[15:10] <PerlJam> You want ARGFILES  (no V)

[15:10] <[Coke]> m: say $?ARGLEBARGLEFILES

[15:10] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!=== Error while compiling /tmp/f91p5gxVMM␤Variable '$?ARGLEBARGLEFILES' is not declared␤at /tmp/f91p5gxVMM:1␤------> say $?ARGLEBARGLEFILES⏏<EOL>␤    expecting any of:␤        postfix␤»

[15:14] <PerlJam> Ven: wait ... 2 files at the same time?  You don't want $*ARGFILES at all.  It's just a filehandle.  You probably want to process @*ARGS yourself.

[15:14] <masak> maybe even MAIN

[15:16] *** MilkmanDan left
[15:17] *** zakharyas joined
[15:17] <PerlJam> who here has access to feather3?

[15:19] <Ven> no, I just want a really simple script.

[15:19] <Ven> just a one-liner,a ctually

[15:20] *** kurahaupo left
[15:20] *** BenGoldberg left
[15:22] <Ven> tried to use p5, but I guess I'm too bad.

[15:24] *** ajr joined
[15:24] *** ajr_ left
[15:24] *** ajr is now known as Guest16943

[15:24] <Ven> why is this so hard.

[15:24] <Ven> well, whatever, editor to the rescue

[15:25] <PerlJam> Ven: why do you want to read multiple files in parallel?

[15:25] <cognome> so am I, I try to figure out all these interlevel language stuff like FOREIGN_LANG, and magic in the ModuleLoader. I have not yet a global picture of how everything fit together.

[15:25] <Ven> PerlJam: why ask

[15:25] <Ven> does reading from 2 different files seem that crazy ???

[15:26] <PerlJam> Ven: no, just curious.  Trying to obtain more information about what you're doing to get some context.

[15:27] <Ven> gave up on doing it programmatically.

[15:27] <Ven> I even tried `while (<file>) { print }` and it just printed the name of the file :D

[15:28] <FROGGS> cognome: it checks that the target grammar is NQPish or Perl 6ish, and then marshals to Perl 6 and creates an NQP cursor to return if the target is Perl 6ish

[15:30] <Ven> oh, I gotta use a filehandle stuff

[15:32] <PerlJam> Ven: @*ARGS».IO».get».say  # output the first line of all the files in @*ARGS

[15:36] *** haroldwu left
[15:36] *** haroldwu joined
[15:37] *** haroldwu left
[15:37] *** haroldwu joined
[15:39] <cognome> FROGGS: If I want to write a toy language, should I use nqp or perl6. Apparently you are using nqp for p5

[15:40] *** iarna joined
[15:40] <cognome> say, can I use EXPR from Perl 6?

[15:40] <cognome> if yes, how?

[15:44] *** Akagi201 joined
[15:45] <cognome> I mean, from a Perl 6 grammar.

[15:47] <cognome> Ven, you are mixing Perl 5 and Perl 6 idioms

[15:47] *** Ven left
[15:48] <TimToady> m: while (<file>) { print }

[15:48] <camelia> rakudo-moar 356d57: OUTPUT«(timeout)»

[15:48] <TimToady> std: while (<file>) { print }

[15:48] <camelia> std 0f2049c: OUTPUT«===SORRY!===␤This appears to be Perl 5 code at /tmp/05STc6uy1p line 1:␤------> while ⏏(<file>) { print }␤Parse failed␤FAILED 00:01 120m␤»

[15:50] <TimToady> std: print

[15:50] <camelia> std 0f2049c: OUTPUT«===SORRY!===␤Unsupported use of bare 'print'; in Perl 6 please use .print if you meant $_, or use an explicit invocant or argument at /tmp/Yr5TYwXWlk line 1:␤------> print⏏<EOL>␤Check failed␤FAILED 00:00 120m␤»

[15:50] <TimToady> m: print

[15:50] *** pecastro left
[15:50] <camelia> rakudo-moar 356d57: ( no output )

[15:50] <TimToady> and that one

[15:51] *** pecastro joined
[15:52] <Ulti> m: $*IN.lines>>.say

[15:52] <camelia> rakudo-moar 356d57: OUTPUT«Atá beo go buan gan bhuairt gan ghruaim fá ghleanntáin ghlas’ Ghaoth Dobhair. ␤Is do d’fheara breáth’ in am an ghá nár úmhlaigh riamh roimh Ghall;␤␤'S deireadh mo shaoil a chaitheamh lem ghaoil,␤Ach trom lámh Gall, le cluain 's le fea…»

[15:52] <TimToady> m: .say for lines

[15:52] <camelia> rakudo-moar 356d57: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[15:52] <Ulti> out of interest does the above suck in all of the file first or do it in an iterative way?

[15:53] <TimToady> it *should* suck it all in first, because hypers aren't lazy

[15:53] *** zakharyas left
[15:53] <Ulti> TimToady: in your version what is lines :S a sub?

[15:54] <TimToady> yes

[15:54] <TimToady> with no arguments it defaults to the input

[15:55] <TimToady> but note:

[15:55] * Ulti takes note

[15:55] <TimToady> std: for lines { .say }

[15:55] <camelia> std 0f2049c: OUTPUT«===SORRY!===␤Function 'lines' needs parens to avoid gobbling block at /tmp/bSCheyWxQ4 line 1:␤------> for lines⏏ { .say }␤Missing block (apparently gobbled by 'lines') at /tmp/bSCheyWxQ4 line 1:␤------> for line…»

[15:55] <TimToady> std: for lines() { .say }

[15:55] <camelia> std 0f2049c: OUTPUT«ok 00:01 124m␤»

[15:55] <TimToady> m: for lines() { .say }

[15:55] <camelia> rakudo-moar 356d57: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[15:56] <Ulti> otherwise it assumes the {} is the first parameter

[15:56] <TimToady> m: for lines { .say }

[15:56] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!===␤Function lines needs parens to avoid gobbling block␤at /tmp/edRZUcRsJ9:1␤------> for lines { .say }⏏<EOL>␤Missing block (apparently taken by 'lines')␤at /tmp/edRZUcRsJ9:1␤------> for line…»

[15:56] <TimToady> m: for (lines) { .say } # also works

[15:56] <camelia> rakudo-moar 356d57: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[15:57] <Ulti> but not for(lines) :)

[15:59] <TimToady> sure, if you write a definition for the function :P

[15:59] <TimToady> but then you can't put a block after it

[16:01] <PerlJam> macros to the rescue!  ;)

[16:01] <Ulti> heh

[16:05] *** Guest16943 left
[16:11] <carlin> oh dear, perldoc.perl6.org's <noscript /> message calls IE8 a "modern web browser"

[16:12] <carlin> *perldoc.perl.org

[16:12] *** kurahaupo joined
[16:12] <cognome> Perl is postmodern

[16:13] <[Coke]> oooooh. with the new ie8 EOL announcement, we no longer have to go out of our way to support it. :)

[16:13] <[Coke]> which also reminds me, moritz, you about?

[16:13] *** virtualsue left
[16:13] <[Coke]> .seen moritz 

[16:13] <yoleaux> I saw moritz 13:41Z in #perl6: <moritz> U+424242 RIGHT-FACING FISH

[16:13] <carlin> now IE9 just has to EOL. 10 is where it starts getting sane.

[16:14] <[Coke]> and 10 is only on old OSes. 11 is fine to target, IMO.

[16:14] <[Coke]> we can "support" older versions with "working-but-ugly"

[16:15] <TimToady> 𒈾

[16:16] * carlin can't see that character

[16:27] <moritz> [Coke]: I'm here now

[16:28] *** guru joined
[16:28] *** guru is now known as Guest96350

[16:29] <moritz> [Coke]: do you know some usage stats of IE8?

[16:29] *** denis_boyun joined
[16:33] *** kurahaupo left
[16:33] <moritz> http://www.w3counter.com/globalstats.php?year=2014&month=7 says 3.78%

[16:33] <moritz> I'm fine with dropping support for it.

[16:37] *** kurahaupo joined
[16:47] *** chenryn left
[16:48] *** chenryn joined
[16:52] *** chenryn left
[16:53] <dalek> perl6-bench: 87e809d | (Geoffrey Broadwell)++ | analyze:

[16:53] <dalek> perl6-bench: Add new test conf keys found when merging timings files

[16:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/87e809d1fd

[16:53] <dalek> perl6-bench: 58ca1fa | (Geoffrey Broadwell)++ | analyze:

[16:53] <dalek> perl6-bench: Don't always mix test score into summary + bug fix in summary score calc

[16:53] <dalek> perl6-bench: 

[16:53] <dalek> perl6-bench: Some tests, such as empty loops, don't represent a structure that

[16:53] <dalek> perl6-bench: would ever appear in real code but which can be very heavily optimized

[16:53] <dalek> perl6-bench: by some compilers, thus skewing summary scores unrealistically.  This

[16:53] <dalek> perl6-bench: change provides a way for tests to be opted-out of the summary score.

[16:53] <dalek> perl6-bench: 

[16:53] <dalek> perl6-bench: Also, fix a bug where the geometric mean would use a power calculated

[16:53] <dalek> perl6-bench: for *all* tests, not just the ones actually included in the summary

[16:53] <dalek> perl6-bench: score (which has been inaccurate ever since incomplete results were

[16:53] <dalek> perl6-bench: auto-skipped).

[16:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/58ca1fa9dc

[16:53] <dalek> perl6-bench: 5fcc275 | (Geoffrey Broadwell)++ | microbenchmarks.pl:

[16:53] <dalek> perl6-bench: Opt out several microbenchmarks from summary score calculations

[16:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/5fcc2758bc

[16:54] *** anaeem1 joined
[16:54] *** chenryn joined
[16:55] <japhb> timotimo: After the above, you'll want to rerun your HEAD tests, so that the new summary-skipping configs will be picked up.  Note that sadly due to the bug fix, the scores for Rakudo and NQP are much more accurate in most cases, but depressingly lower.

[16:55] *** kaare_ left
[16:55] * japhb would rather have an unhappy truth than a happy lie though

[16:56] * TimToady notes that the @a.push(1) test does not test what he fixed yesterday, which shows up more under @a.push(@a)

[16:56] <TimToady> or @a.push(1,2,3,4,5)

[16:57] <japhb> TimToady: Are you referring to perl6-bench?

[16:57] <TimToady> or push anything longer than 1

[16:57] <TimToady> yes

[16:57] <japhb> Ah, OK.

[16:57] <TimToady> I don't think there's a test for pushing something long onto something long

[16:58] *** chenryn left
[16:58] <japhb> Yes, I'd like to have more complete testing of two major classes of things: 1) Optimizations that we currently have and don't want to regress on, and 2) the edge cases that *don't* get optimized, so we can be realistic about what average users will face when they step off the paved walkway

[16:58] *** chenryn joined
[16:58] *** denis_boyun___ joined
[16:58] <japhb> Would you like a commitbit, so you can fill in the cases you're interested in?

[16:59] <japhb> I'm rather short of test-writing time this month ....

[16:59] * TimToady is having a bit more time this month than he expected a month ago :/

[16:59] <japhb> Is that a good or bad thing?

[16:59] <TimToady> well, when it's the result of a complex detached retina...

[17:00] *** denis_boyun left
[17:00] <TimToady> so I guess I wouldn't mind a commitbit

[17:01] <japhb> Granted.  :-)

[17:01] <japhb> Bleah, sorry to hear about retinal issues

[17:01] <TimToady> not sure how to SCALE something that doubles in size every time though...

[17:01] <TimToady> which is what @a.push(@a) does...

[17:02] <japhb> TimToady: Define a work function, which tells it how to compute the actual work done based on the scale

[17:02] <japhb> And you might want to tell it to grow SCALE linearly

[17:02] <japhb> (And set the work function to e.g. sub { 2 ** $_[0] }

[17:02] <japhb> )

[17:03] *** kill joined
[17:03] *** kill is now known as amkrankruleuen

[17:03] <TimToady> okay, will try to look at that later today

[17:03] *** amkrankruleuen left
[17:03] *** amkrankruleuen joined
[17:03] *** chenryn left
[17:03] <japhb> afk to change buildings

[17:04] <japhb> Yeah, just ping me if you have issues (better to ping on #moarvm or via PM if I haven't spoken up here recently).

[17:04] <TimToady> .oO(what if the buildings don't want to change?)

[17:05] *** chenryn joined
[17:06] *** chenryn left
[17:06] *** Guest96350 left
[17:08] *** BenGoldberg joined
[17:08] <[Coke]> moritz: wanted to ask you if you woudl be opposed to switching perl6.org to a simple mojo app (I'm mainly hoping to improve developer turnaround time when making changes)

[17:09] *** denis_boyun___ left
[17:09] <nwc10> [Coke]: not that I think I have anything to add, but I'm curious - what is it currently?

[17:09] <[Coke]> (mojo5 for now, and then dogfooding it on mojo6 when that's a thing)

[17:09] <nwc10> and I was guessing that mojo6 might be part of this

[17:10] <[Coke]> nwc10: it's using moritz's module to pre-render the site, then is served as a static site.

[17:10] <nwc10> ah right

[17:12] <FROGGS> cognome: in v5 in the nqp_to_perl6 branch there is a Perl 6 version of EXPR

[17:13] <flussence> .oO( I guess nowadays the "prerender everything" model is seen as old fashioned - you could just use a caching reverse proxy to achieve the same thing instead. )

[17:14] <FROGGS> cognome: in near future I want to put all these things like EXPR in a module, which should make buildings slangs a lot easier

[17:14] <PerlJam> Coke: +1 (perl6.org as mojo app)

[17:15] * PerlJam waits to see moritz's reaction.

[17:16] *** Alina-malina left
[17:16] *** anaeem1 left
[17:18] <hoelzro> mojo++

[17:18] <hoelzro> [Coke]: you started working on Mojo::Util for mojo6, right?

[17:20] *** brrt left
[17:21] *** kaleem joined
[17:22] *** Alina-malina joined
[17:22] *** cognominal joined
[17:24] *** Alina-malina left
[17:25] *** Alina-malina joined
[17:27] <cognome> FROGGS: thx for the info

[17:28] *** anaeem1_ joined
[17:28] <cognome> FROGGS: I did not realize how much was going in p5

[17:29] *** dmol left
[17:29] <cognome> s/p5/v5/

[17:30] *** kaleem left
[17:31] <japhb> flussence: There is still a use for prerender everything -- much reduced attack surface, which matters if there's no one to constantly monitor for vulnerabilities and patch quickly.

[17:31] <japhb> (I'm not saying that's an overriding concern here, just that it matters for a non-trivial use case.)

[17:33] <flussence> yeah, that's a good point. One reason why I wish browsers would hurry up and support <iframe seamless>, so the dynamic bits of a site could be the bare minimum necessary :)

[17:33] <TimToady> [Coke]: it would be spelled 'biiru' in more typical Japanese orthography, unless it was spelled ビール or びいる; 'bieru' would mean something more like 'gain beauty' :)

[17:33] <TimToady> you can't mix Japanese and German orthography like that :P

[17:36] <japhb> "Can't" is a pretty strong word coming from a linguist.  :-)

[17:39] <cognome> FROGGS: I did not realize I was already on the nqp_to_perl6 branch. No wonder my complaining about v5 installation did not make any sense

[17:42] <[Coke]> hoelzro: I dabbled for a bit. only worked on converting some of the trivial util stuff, haven't done anything meaty yet.

[17:42] <[Coke]> TimToady: Yes, my bad. though I could use some of that too!

[17:44] <PerlJam> [Coke]: aren't you married?  :)

[17:46] <[Coke]> I mean for myself!

[17:54] *** lichtkind joined
[17:55] <lichtkind> thank gos i finally understood make

[17:55] <lichtkind> s/gos/god/

[17:55] <lichtkind> but  why o why perl 6 tells me a mathc object is any?

[17:56] <lichtkind> of that type

[17:56] <lichtkind> did everything as in a text file

[17:56] <PerlJam> lichtkind: Are you sure it's a match object?

[17:57] <lichtkind> yes didnt do anything but my $match = Lingua::DEU.parse($num_str, ); #:actions($a)

[17:57] <lichtkind> say "result = ", $match;

[17:59] <FROGGS[mobile]> cognome: ahh, now I see... run: perl6-m Build.pm clean && perl6-m Build.pm build

[18:01] <FROGGS[mobile]> that is what panda will use, though I commented the panda support so I do not need to rebootstrap panda all the time 

[18:04] <hoelzro> [Coke]: alright; I'm just very intrigued by a Mojo6 port

[18:04] <hoelzro> so I could check some of the existing stuff out in the future

[18:05] *** japhb joined
[18:07] *** mr-foobar left
[18:07] <lichtkind> its maybe a bug

[18:08] <lichtkind> bevcause i do some regex stuff in fron on same string

[18:09] <lichtkind> nope

[18:09] <lichtkind> but i recompile now

[18:09] <lichtkind> maybe fixed

[18:12] *** dmol joined
[18:13] *** denis_boyun_ joined
[18:19] <vendethiel> cognome: no, I'm not mixing Perl 5 and 6 idioms ;)

[18:19] <vendethiel> I literally tried it to do in p5.

[18:19] <vendethiel> I'm learning p5 with a book woolfy++ gave me :P

[18:21] <cognome> woolfy++

[18:22] <vendethiel> reading it made me realize a big difference between how the book is written and how I write

[18:23] <vendethiel> (admittedly, they're writing a WHOLE HUGE BOOK WITH PAGES, but I'd still try to stick with it if I were as well)

[18:23] <vendethiel> they're showing a lot of stuff you have no clue about. Like eval. If you knew another language, to you, eval would be soo different. They didn't explai nwhat references are but are using them quite a bit. etc

[18:24] *** colomon left
[18:24] <vendethiel> .o( If the language isn't sane, why would the book have to be sane? )

[18:24] <vendethiel> .oO( Is that why all programming books are insane ? )

[18:24] <cognome> vendethiel: what book are you reading?

[18:24] <vendethiel> cognome: erm, programming perl the fourth.

[18:26] <TimToady> and we had to cut some things out to keep it down to about 1000 pages...

[18:26] <vendethiel> well,it's no question that p5 is a big lang anyway :).

[18:26] <vendethiel> I get funny looks when I open it up in public transports :P.

[18:26] <PerlJam> TimToady: I can't imagine what you'll have to cut out to keep "Programming Perl 6" down that small  :)

[18:26] <vendethiel> PerlJam: not a lot.

[18:27] <cognome> I knew very well the first and the second edition. Probably the first edition was the first O'Reilly I read with an animal on it.  Then I lost track.

[18:27] <vendethiel> PerlJam: for the size it has, my tutorial explains a lot of stuff, for example.

[18:27] <TimToady> pink camel was pink, except for the camel

[18:27] <vendethiel> Perl6 is easier to explain because you don't need to explain all these corner cases :P

[18:28] <PerlJam> vendethiel: sure, but that's more stuff in the language to explain.

[18:28] <vendethiel> which reminds me -- when I switched to perl5 highlighting on github, I had to comment $abc'def because it highlighted incorrectly

[18:28] *** denis_boyun___ joined
[18:28] <vendethiel> BUT THAT ACTUALLY EXISTS IN P5 TOO! (though deprecated)

[18:28] <cognome> Before that, I had bought the books about X11. Being utter crap, the technology, not the books. TimToady's book was shiny.

[18:28] <vendethiel> PerlJam: I think you really underestimate the amount of preparation one needs to explain some corner case

[18:28] <lichtkind> PerlJam: so you have no further ideas?

[18:29] <TimToady> well, it was raising the bar on the state of the art when Tim O allowed us to put in jokes

[18:29] <lichtkind> thank you anyway :)

[18:29] <vendethiel> PerlJam: just being able to say "oh yea here it works like in for" is just so incredible

[18:29] <PerlJam> lichtkind: not without more info.  Where's your code/input/output?

[18:29] *** denis_boyun_ left
[18:29] <lichtkind> not on the net but i fiddle for a while and ask when i gave up :)

[18:31] <cognome> vendethiel: if you learn Perl 5, you got to submit an entry to http://paris.mongueurs.net/aplusplus.html to revive the page.

[18:32] <vendethiel> I'm not that much into the timtoady spirit ;)

[18:32] <vendethiel> (the lowercase one :p)

[18:32] <cognome> that page is a compendium of edge Perl 5 cases :)

[18:32] <PerlJam> vendethiel: maybe you should use python.  it too is not very much into tmtowtdi.

[18:33] <vendethiel> PerlJam: python is terrible and I hate guido quite a bit, so no thanks.

[18:33] <vendethiel> well, "hate" is certainly far too strong, but I don't give him any credit.

[18:34] *** kaare_ joined
[18:34] <PerlJam> vendethiel: P5 stole (part of) its object system from Python, so there's got to be some redeeming qualities to Guido  ;)

[18:35] <vendethiel> PerlJam: it's not like python invented its object system to start with...

[18:38] <lichtkind> r: grammar t { rule TOP {d} } say t.parse("ddd");

[18:38] <camelia> rakudo-{parrot,jvm,moar} 356d57: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Two terms in a row␤at /tmp/tmpfile:1␤------> grammar t { rule TOP {d} } ⏏say t.parse("ddd");␤    expecting any of:␤        statement list␤      …»

[18:39] <lichtkind> r: grammar t { rule TOP {d} }; say t.parse("ddd");

[18:39] <camelia> rakudo-{parrot,jvm,moar} 356d57: OUTPUT«(Any)␤»

[18:39] <lichtkind> it says any too

[18:39] <FROGGS> lichtkind: because it fails to match

[18:39] <PerlJam> it also doesn't match  :)

[18:40] <FROGGS> r: grammar t { rule TOP { ddd } }; say t.parse("ddd");

[18:40] <camelia> rakudo-{parrot,jvm,moar} 356d57: OUTPUT«｢ddd｣␤␤»

[18:40] <FROGGS> m: grammar t { rule TOP { d } }; say t.subparse("ddd");

[18:40] <camelia> rakudo-moar 356d57: OUTPUT«#<failed match>␤»

[18:40] <FROGGS> m: grammar t { rule TOP { ddd } }; say t.subparse("d");

[18:40] <camelia> rakudo-moar 356d57: OUTPUT«#<failed match>␤»

[18:40] <FROGGS> err

[18:40] <lichtkind> i understood

[18:40] <lichtkind> thank you

[18:41] <FROGGS> m: grammar t { rule TOP {d} }; say t.subparse("ddd");

[18:41] <camelia> rakudo-moar 356d57: OUTPUT«｢d｣␤␤»

[18:41] *** darutoko left
[18:41] <PerlJam> ah, I was worried for a second.

[18:42] <PerlJam> It's because you used rule rather than token the first time

[18:42] <cognome> hum, what .subparse?

[18:43] <TimToady> it's because <.ws> implied after the d can't match between dd

[18:43] <PerlJam> cognome: .parse() anchors the match with ^ and $, .subparse() does not.

[18:43] <cognome> ho, it's in S05

[18:43] <TimToady> well, subparse anchors at ^

[18:44] <cognome> the day where I will know all of it has not come.

[18:44] <TimToady> well, technically, they both anchor at :p, which defaults to 0

[18:44] <nwc10> cognome: could you test this one: ++${*{$::{do{$^X =~ m!([^/]+)!; substr "1" ^ $1, $[, 1}}}{SCALAR}};

[18:45] <TimToady> cognome: the day that comes, you will have forgotten something very important :)

[18:46] <cognome> nwc10: gives Can't use an undefined value as a symbol reference at (eval 7)[/System/Library/Perl/5.16/perl5db.pl:646] line 2. 

[18:47] <nwc10> ah OK. seems that you need to start with a valid $::A

[18:47] <cognome> maybe need to test with -e

[18:47] <nwc10> aha. you need an $A somewhere

[18:47] <cognome> well the rules of that contest are not well defined.

[18:47] <nwc10> :-)

[18:47] *** pmurias joined
[18:48] <nwc10> $ perl -le 'use strict; $::A = 5; ++${*{$::{do{$^X =~ m!([^/]+)!; substr "1" ^ $1, $[, 1}}}{SCALAR}}; print $::A'                          

[18:48] <nwc10> 6

[18:48] *** brrt joined
[18:48] <nwc10> strict and warnings, if you have an $A somewhere.

[18:48] <pmurias> hi

[18:49] <nwc10> but does trip up on what is one of the niggly annoyances of Perl 5 - there's no way to create a proper typeglob for the symbol table, other than a soft reference

[18:49] <nwc10> or the compiler

[18:49] <nwc10> (ie eval)

[18:49] <cognome> I forgot what $::A is in Perl 5

[18:49] *** guru joined
[18:49] <pmurias> jnthn: why do the various QAST::Compiler's use a $*WANT if as_* has a :$want argument?

[18:49] <nwc10> cognome: $A, but expressed in a way that strict doesn't object to

[18:49] *** guru is now known as Guest88228

[18:49] *** Guest88228 is now known as ajr_

[18:49] <nwc10> pmurias: as seen on #moarvm earlier:

[18:49] <nwc10> 14:22  * jnthn will be away for some time

[18:49] <nwc10> 14:22 < jnthn> &

[18:50] <cognome> ok, I will ask Maddingue to add your submission to the page

[18:50] <nwc10> if you and maddingue think that it's valid within the "rules"

[18:52] *** denis_boyun_ joined
[18:53] *** denis_boyun___ left
[18:54] <cognome> it is certainly disgusting enough to fit in :)

[18:55] <nwc10> I'm glad I correctly understood the style guide.

[18:55] <cognome> :)

[18:56] <nwc10> I'm not sure how many ugly/vile/deprecated Perl 5 features it uses

[18:56] <nwc10> it's got typeglob dereference, reliance on string ^ rather than numeric ^, grautious use of $[

[18:57] <nwc10> and nothing use strict objects to

[18:57] <cognome> I forgot what $^X is, too

[18:57] <nwc10> executable name

[18:57] <vendethiel> nwc10: does $'A work instead of $::A ?

[18:57] <nwc10> basically, I wondered if I could get "A" from one of the letters of "perl", and went from there

[18:57] <nwc10> vendethiel: yes, probably

[18:58] <nwc10> mmm, strange, seems not

[18:58] <cognome> now, I think I understand the gist of it

[18:58] <vendethiel> nwc10: maybe it has to be qualified on both sides

[18:58] <nwc10> that might be a bug in the perl 5 parser

[18:59] *** brrt left
[19:00] *** pecastro left
[19:00] <nwc10> oops, correction needed

[19:01] <nwc10> perl -wle 'use strict; $::A = 5; ++${*{$::{do{$^X =~ m!([^/]+)$!; substr "1" ^ $1, $[, 1}}}{SCALAR}}; print $::A'

[19:01] <nwc10> still 6, but needs that to work if run with /usr/bin/perl

[19:02] *** pecastro joined
[19:16] <nwc10> cognome: could you test ${chr ($] + ord ($"^$;))}++;

[19:17] <vendethiel> oh right, $] is a variable ._.

[19:17] <nwc10> cognome: actually, I think I prefer the whitespace free: ${chr($]+ord($"^$;))}++;

[19:20] <nwc10> cognome: er, maybe I like this variant best: ${$;^=$";chr$]+ord$;}++;

[19:22] *** ren1us left
[19:23] <cognome> nwc10: I will read the backlog to see what you settle with. And you can submit many entries. And I should probe BooK to submit a bilingual one Perl[56] as well. :)

[19:24] <nwc10> wise move, waiting for me to stop changing my mind

[19:24] <nwc10> not only won't that one parse under Perl 6, if it did it would be $B++

[19:25] <nwc10> please don't try to test it on EBCDIC

[19:25] <masak> augh

[19:25] <nwc10> was that something I said?

[19:25] <nwc10> EBCDIC

[19:25] <masak> ick

[19:27] <japhb> What's with all the p5 line noise and obfu today?

[19:28] <nwc10> japhb: http://irclog.perlgeek.de/perl6/2014-08-08#i_9155554

[19:28] <nwc10> FROGGS: I'm not expecting that v5 is ever going to get those "right"

[19:28] <japhb> nwc10: Oh the horror.

[19:29] <nwc10> Even if it's theoretically possible, I doubt that it's worth the effort to make it work

[19:29] <japhb> I wondered if y'all were creating edge cases for use v5 or something ....

[19:29] <FROGGS> nwc10: well, I would still accept a bug report about that :o)

[19:29] <nwc10> symbol tables, typeglobs, default values of obscure magic variables?

[19:30] <FROGGS> well, v5 has to fake some of them

[19:30] * japhb wonders what makes any particular magic variable more obscure ...

[19:31] <pmurias> how often they are used?

[19:32] <japhb> pmurias: Fair enough.  Though almost no one uses $[, but it's probably less obscure than others because of all the warnings saying "FOR THE LOVE OF PETE, DON'T USE THIS!"

[19:33] *** cosimo left
[19:33] <FROGGS> jnthn: I have a "fix" for the NFA bug...

[19:34] <nwc10> pmurias: I don't know. Mostly I think in "one" liners, or obfuscations

[19:38] <pmurias> I don't think v5 needs to worry about obfuscations

[19:40] <japhb> After a quick review of perlvar, I think the most obscure non-format magic var is $^F.

[19:40] <japhb> (I exclude the format ones because either you use formats and might know them, or don't and never would have seen them, which isn't entirely fair.)

[19:40] <pmurias> does v5 handle any real perl5 modules?

[19:40] <nwc10> I think it's reasonable to treat the format ones differently

[19:41] <[Coke]> whee. running TEST_JOBS=8 make spectest with rakudo-jvm, no swap being used anywhere on the box. ahhhh.

[19:42] <japhb> [Coke]: Oooh, how low did you get the r-j memory usage to?

[19:42] <FROGGS> pmurias: pragma 'if' :o)

[19:42] <FROGGS> pmurias: not much else because of deps

[19:43] *** anaeem1_ left
[19:43] *** iarna left
[19:43] *** cibs left
[19:43] *** iarna joined
[19:43] *** cibs joined
[19:43] *** anaeem1 joined
[19:45] *** cosimo joined
[19:48] *** treehug88 joined
[19:54] <pmurias> FROGGS: do you think v5 is a viable way to bring perl5 modules to perl6 land or is everything to inter connected?

[19:55] <FROGGS> pmurias: I still think that this can work out, yes

[19:58] <dalek> nqp-js: 33fd75c | (Pawel Murias)++ | src/vm/js/bin/run_tests:

[19:58] <dalek> nqp-js: Remove the first serialization test from run_tests.

[19:58] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/33fd75c0af

[19:58] <dalek> nqp-js: b5835f0 | (Pawel Murias)++ | / (6 files):

[19:58] <dalek> nqp-js: Start a refactor/rewrite of the nqp-js code emitter.

[19:58] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/b5835f06ba

[20:00] <japhb> pmurias: What's the current state of nqp-js?  (I haven't kept up with it since we first added it to perl6-bench.)

[20:01] <pmurias> it was added to perl6-bench?

[20:02] <pmurias> japhb: I have started rewriting/refactoring the code emitter to emit sensible code

[20:03] <japhb> pmurias: A long time ago, yes: 17254162 (Geoffrey Broadwell 2012-12-20 14:52:29 -0800  42)     "nqp-js": {

[20:03] <japhb> Apparently I didn't update the TODO correctly, though, sigh.

[20:04] *** wtw left
[20:04] <dalek> perl6-bench: 68f3ffe | (Geoffrey Broadwell)++ | TODO:

[20:04] <dalek> perl6-bench: Fix ancient and misleading TODO item

[20:04] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/68f3ffe73b

[20:05] <pmurias> in the current HEAD nothing works, but in the previous commit it passed a bunch of nqp test, and it was integrated in the nqp build system

[20:05] <japhb> pmurias: But how complete is the port?  Can I consider nqp-js to be on par with nqp-jvm or nqp-moar?

[20:05] <vendethiel> japhb: oh, pmurias++'s nqp-js is benched somewhere?

[20:05] <pmurias> it's horribly utterly slow

[20:06] <japhb> vendethiel: It was added to perl6-bench as a known component a long time ago, but it's been quite a while since I tried to benchmark it.

[20:07] <pmurias> I have started rewriting parts of it to make it emit decent code

[20:07] <[Coke]> java.lang.OutOfMemoryError: GC overhead limit exceeded at java.util.concurrent.LinkedBlockingQueue.offer(LinkedBlockingQueue.java:415) at java.util.AbstractQueue.add(AbstractQueue.java:95) at org.perl6.nqp.runtime.Ops$AddToQueueTimerTask.run(Ops.java:4396)

[20:07] <vendethiel> nice :-)

[20:07] <pmurias> japhb: it's complete enough to compile an nqp to js and have the compiled nqp run a bunch of tests

[20:07] <[Coke]> japhb: not low enough. (didn't tweak it at all. I just have 16G on this box()

[20:07] <vendethiel> (not the error, obviously)

[20:09] <[Coke]> ... and now lots of tests are dying, now that I hit that.

[20:09] <japhb> [Coke]: Awww.  I was hoping that the memory savings jnthn++ had found in NQP and Rakudo had made a huge difference to r-j.

[20:10] <[Coke]> japhb: I haven't been able to even build r-j on my old laptop with 4G

[20:10] <[Coke]> new laptop with 16G it builds, but apparently is still not 100% using the eval server under high load.

[20:11] <japhb> pmurias: Is there an easy way to describe the set of tests it *can't* run?  And for the tests that fail, are they crashes/parsefails/etc. or just wrong results?

[20:11] <japhb> [Coke]: Hmmmm, OK

[20:12] * japhb is thinking of getting a new personal laptop (my current one is darn near ancient), and it sounds like "lots of RAM" still needs to be high on the requirements list.

[20:13] *** dmol left
[20:14] *** kaare_ left
[20:18] *** tzictli joined
[20:19] <pmurias> japhb: atm, it runs zero tests as I'm rewriting things

[20:20] <japhb> pmurias: Do you tag "good" revs (or releases, if you have them) before ripping things apart?

[20:21] <pmurias> japhb: https://github.com/pmurias/nqp-js/blob/master/src/vm/js/bin/run_tests - the comment out line is the set of tests it used to run

[20:22] <pmurias> japhb: not yet as I don't think anybody is using nqp-js for anything atm

[20:22] <pmurias> after the rewrite I propably will start doing it

[20:25] <japhb> That would be quite helpful.  As well as doing major breakage in a branch, so master is always buildable.

[20:27] *** jnap left
[20:29] *** jnap joined
[20:32] *** gr33n7007h left
[20:32] *** gr33n7007h joined
[20:34] *** cognominal left
[20:35] *** treehug88 left
[20:38] *** pecastro left
[20:39] *** pecastro joined
[20:40] *** wtw joined
[20:40] *** dmol joined
[20:42] <lichtkind> thanks it works now :)

[20:49] <FROGGS> perl6-m -Ilib -e 'my %*ENV; say shell("ls")'

[20:49] <FROGGS> Cannot iterate object with P6opaque representation

[20:49] <FROGGS>   in sub shell at src/gen/m-CORE.setting:728

[20:49] <FROGGS> does that count as a bug?

[20:50] <PerlJam> Whoever is going to the next YAPC ... I ran across https://www.youtube.com/watch?v=tCel6lpDTZI just now and it seems like it might be time to revisit the subject of rakudo performance again  :)

[20:50] <nwc10> cognome: $ perl -wle '@INC=(sub{sub{ref($_=pop@INC)}},q{++$A}); $::A = 5; do it; print $::A'

[20:50] <nwc10> 6

[20:51] <nwc10> that one stops being valid under use strict at some point after 5.12.0

[20:51] <nwc10> C<do it> needs to become C<do "it">

[20:52] <FROGGS> PerlJam: http://act.yapc.eu/ye2014/talk/5633

[20:52] <nwc10> no string evals.

[20:52] <PerlJam> ah, jnthn++

[20:52] <PerlJam> FROGGS: btw, that seems like a bug to me.

[20:52] <FROGGS> to me too, aye

[20:53] <FROGGS> will probably fix that tomorrow-ish, because I need that working for v5

[20:55] *** virtualsue joined
[20:56] *** cognominal joined
[21:02] <nwc10> cognominal: This is sort of the same thing:

[21:02] <nwc10> $ perl -wle '@INC=sub{shift;$a=\@_;sub{defined($_=shift@$a)}}; $::A = 5; do q{++$A}; print $::A'                                          

[21:02] <nwc10> 6

[21:03] *** rurban left
[21:07] *** grondilu joined
[21:09] <grondilu> TimToady: I added http://rosettacode.org/wiki/Gaussian_elimination#Perl_6.  IIRC you wanted to wait for multi-dimensional arrays for these kinds of stuff but the lack of Perl 6 entry for this task nagged me a bit so I translated C for now.  Hope it's ok.

[21:10] <TimToady> Mouq++ just hacked in 2-D subscript notation, fwiw

[21:10] <timotimo> i think you want to have the language be "Perl 6" instead of "perl6"

[21:10] <timotimo> then it'll syntax-highlight iirc

[21:10] <timotimo> ah, already fixed

[21:10] <TimToady> but in general I'm in favor of something rather than nothing, when it comes to RC

[21:11] <timotimo> m: my @a = < 1.0  2.0  3.0  4.0 >; say @a[1].WHAT

[21:11] <camelia> rakudo-moar 356d57: OUTPUT«(Str)␤»

[21:11] <timotimo> m: my Rat @a = < 1.0  2.0  3.0  4.0 >; say @a[1].WHAT

[21:11] <camelia> rakudo-moar 356d57: OUTPUT«Type check failed in assignment to '@a'; expected 'Rat' but got 'Str'␤  in method REIFY at src/gen/m-CORE.setting:8880␤  in method reify at src/gen/m-CORE.setting:7624␤  in method gimme at src/gen/m-CORE.setting:8119␤  in method exists_pos at src/g…»

[21:11] <timotimo> "var" semantics are 6.0.0, right?

[21:12] <pmurias> "var" semantics?

[21:13] <TimToady> m: my @a = [<a b c>], [<d e f>], [<g h i>]; say @a[*;1]

[21:13] <camelia> rakudo-moar 356d57: OUTPUT«b e h␤»

[21:13] *** gfldex left
[21:13] <TimToady> grondilu: ^^

[21:13] <timotimo> m: my $foo = < 1.0 > # this is supposed to be a Rat (or RatStr or something)

[21:13] <camelia> rakudo-moar 356d57: ( no output )

[21:13] <japhb> timotimo: Are you thinking of 'val()' ?

[21:13] <TimToady> maybe we should call in VAL, to go with EVAL :)

[21:14] <lue> n: my @a = < 1.0  2.0  3.0  4.0 >; say @a[1].WHAT

[21:14] <camelia> niecza v24-109-g48a8de3: OUTPUT«(RatStr)␤»

[21:14] <TimToady> m: my $foo = <1/0>; say $foo.WHAT

[21:14] <lue> niecza's been getting it right for a while now :)

[21:14] <camelia> rakudo-moar 356d57: OUTPUT«(Str)␤»

[21:14] <TimToady> yes

[21:14] <japhb> Because we lack dualvars ({Bool,Int,Num,Rat}Str), val() is unimplemented (except the ugly hack-val() that is used for MAIN) 

[21:14] <japhb> s/we lack/Rakudo lacks/

[21:15] <TimToady> it's just MI, iirc how niecza does it

[21:15] <timotimo> aye, niecza++

[21:15] <japhb> TimToady: For Rakudo, IIUC it needs to be more than because of VM/NQP-level coercion

[21:16] <japhb> s/more than/more than just MI/

[21:16] <TimToady> m: class IntStr is Int is Str {}; say IntStr.^mro

[21:16] <camelia> rakudo-moar 356d57: OUTPUT«(IntStr) (Int) (Str) (Cool) (Any) (Mu)␤»

[21:16] *** beastd joined
[21:17] <japhb> It's about prefix:<+>, assignment, and so on.

[21:17] <japhb> boxing and unboxing

[21:17] <timotimo> hmm.

[21:18] <japhb> I don't think it's *hard*, rather that it required more knowledge than I ever had time to get in my head all at once (I tend to get rather short hack sessions, sigh)

[21:18] <TimToady> but there's really no excuse for the literal forms <1/2> or <1+2i> not existing yet, since those do not need MI

[21:18] <japhb> No argument there.

[21:18] <timotimo> m: class IntStr is Int is Str { has bigint $!number is boxing_target; has str $!string is boxing_target; }; # how do we handle with something that can box 2 things?

[21:18] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!===␤Type 'bigint' is not declared␤at /tmp/7928a657xA:1␤------> class IntStr is Int is Str { has bigint⏏ $!number is boxing_target; has str $!st␤Malformed has␤at /tmp/7928a657xA:1␤------> clas…»

[21:18] <japhb> box_target, I think, not boxing_target

[21:18] <timotimo> oh, yes

[21:19] <TimToady> n: say i

[21:19] <camelia> niecza v24-109-g48a8de3: OUTPUT«0+1i␤»

[21:19] <timotimo> m: my knowhow bigint is repr('P6bigint') { }; class IntStr is Int is Str { has bigint $!number is box_target; has str $!string is box_target; }; # how do we handle with something that can box 2 things?

[21:19] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!===␤Duplicate box_target for native int␤»

[21:19] *** brrt joined
[21:19] <TimToady> n: say i.perl

[21:19] <camelia> niecza v24-109-g48a8de3: OUTPUT«<0+1i>␤»

[21:20] <japhb> timotimo: ... and now you're starting to see the stuff I saw before I went "I have lower-hanging fruit to look at"

[21:20] <TimToady> note niecza++ even adds the <> for .perl

[21:20] <TimToady> n: say .5.perl

[21:20] <camelia> niecza v24-109-g48a8de3: OUTPUT«0.5␤»

[21:20] <japhb> r: say i.perl

[21:20] <camelia> rakudo-{parrot,jvm,moar} 356d57: OUTPUT«Complex.new(0, 1)␤»

[21:20] <japhb> Heh

[21:20] <timotimo> japhb: :))

[21:20] *** pmurias left
[21:20] <TimToady> n: say (22/7).perl

[21:20] <camelia> niecza v24-109-g48a8de3: OUTPUT«<22/7>␤»

[21:20] <BenGoldberg> m: say .5.perl

[21:20] <camelia> rakudo-moar 356d57: OUTPUT«0.5␤»

[21:21] <BenGoldberg> m: say <22/7>.perl

[21:21] <TimToady> does it as decimal if it can do it exactly

[21:21] <camelia> rakudo-moar 356d57: OUTPUT«"22/7"␤»

[21:21] <BenGoldberg> m: say [/] <22/7>

[21:21] <camelia> rakudo-moar 356d57: OUTPUT«3.142857␤»

[21:21] <TimToady> moar just needs the <> for the literal forms of those

[21:21] * timotimo looks at the implementation of box_target

[21:21] <BenGoldberg> m: say [/] 22/7

[21:21] <camelia> rakudo-moar 356d57: OUTPUT«3.142857␤»

[21:22] <TimToady> m: say [/] '22/7'

[21:22] <camelia> rakudo-moar 356d57: OUTPUT«3.142857␤»

[21:22] <TimToady> that's how it's cheating

[21:22] <BenGoldberg> wft?

[21:22] <TimToady> <22/7> is just a string to rakudo

[21:22] <lichtkind> why i cant do $match.WHAT eq

[21:22] <lichtkind> i thaought WHAT produces a string

[21:22] <TimToady> no, never did tht

[21:22] <lichtkind> oh

[21:22] <BenGoldberg> m: 3.WHAT.WHAT.say

[21:22] <camelia> rakudo-moar 356d57: OUTPUT«(Int)␤»

[21:23] <BenGoldberg> m: 3.WHAT.WHAT.WHAT.say

[21:23] <camelia> rakudo-moar 356d57: OUTPUT«(Int)␤»

[21:23] <BenGoldberg> m: 3.WHAT.WHAT.WHAT.perl.say

[21:23] <TimToady> it has always produced a type object

[21:23] <camelia> rakudo-moar 356d57: OUTPUT«Int␤»

[21:23] <lichtkind> so so how i stringify it?

[21:23] <TimToady> isn't that what BenGoldberg++ just did?

[21:24] <lichtkind> i tried 3 ways

[21:24] <BenGoldberg> m: (Class).say

[21:24] <camelia> rakudo-moar 356d57: OUTPUT«===SORRY!=== Error while compiling /tmp/mxr1nvoPyJ␤Undeclared name:␤    Class used at line 1␤␤»

[21:24] <BenGoldberg> m: 3.WHAT.gist.say

[21:24] <camelia> rakudo-moar 356d57: OUTPUT«(Int)␤»

[21:24] <FROGGS> m: say 3.^name

[21:24] <camelia> rakudo-moar 356d57: OUTPUT«Int␤»

[21:24] <TimToady> there's three ways to do it now

[21:24] <japhb> p6: ':16«f.8*:4[2]**:2[1,0,0]»/​-:60[1,0]'.Numeric.perl.say

[21:25] <camelia> rakudo-{jvm,moar} 356d57: OUTPUT«Failure.new(exception => X::Str::Numeric.new(source => ":16«f.8*:4[2]**:2[1,0,0]»/​-:60[1,0]", pos => 26, reason => "base-10 number must begin with valid digits or '.'"))␤»

[21:25] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Cannot parse number: :16«f.8*:4[2]**:2[1,0,0]»/​-:60[1,0]␤  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3757 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.…»

[21:25] <camelia> ..rakudo-parrot 356d57: OUTPUT«Failure.new(exception => X::Str::Numeric.new(source => ":16«f.8*:4[2]**:2[1,0,0]»/\x[200b]-:60[1,0]", pos => 26, reason => "base-10 number must begin with valid digits or '.'"))␤»

[21:25] <BenGoldberg> What does .WHAT on a type object return the object itself?  Surely it should return the type object for type objects...

[21:25] <BenGoldberg> s/What does/Why does/

[21:25] <TimToady> that *is* the type object for the type object

[21:25] <TimToady> maybe you're thinking of the metaclass?

[21:26] <BenGoldberg> Probably

[21:26] <lichtkind> thank you BenGoldberg++

[21:26] <BenGoldberg> m: say Int

[21:26] <camelia> rakudo-moar 356d57: OUTPUT«(Int)␤»

[21:27] <BenGoldberg> m: my @foo = (Int, Rat, Str); say @foo

[21:27] <camelia> rakudo-moar 356d57: OUTPUT«(Int) (Rat) (Str)␤»

[21:27] <vendethiel> mmh, could we imagine a `is impossible` that'd be checked as compile-time if we can establish it as being called statically ?

[21:27] <TimToady> m: class Man {}; my $socrates = Man.new; say $socrates ~~ Man

[21:27] <camelia> rakudo-moar 356d57: OUTPUT«True␤»

[21:27] * vendethiel 's thinking of idris and co

[21:28] <TimToady> m: class Man is Cool {}; my $socrates = Man.new; say $socrates ~~ Cool; say Man ~~ Cool

[21:28] <camelia> rakudo-moar 356d57: OUTPUT«True␤True␤»

[21:29] <japhb> p6: ':16<f.8*:4[2]**:2[1,0,0]>/-:60[1,0]'.Numeric.perl.say

[21:29] <camelia> niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Cannot parse number: :16<f.8*:4[2]**:2[1,0,0]>/-:60[1,0]␤  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3757 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setti…»

[21:29] <camelia> ..rakudo-{parrot,jvm,moar} 356d57: OUTPUT«<-62/15>␤»

[21:30] <vendethiel> :o)

[21:32] <raydiak> \o

[21:34] <japhb> o/

[21:35] <masak> \oo/

[21:35] <timotimo> o/\o

[21:35] <japhb> masak: Well hello, Zaphod, I didn't see you there ...

[21:36] <TimToady> ◡/  <-- brane exploded

[21:37] <raydiak> it's just mirror tricks :)

[21:37] <BenGoldberg> \_o/ <-- relaxing with laptop

[21:38] <TimToady> ◡  <-- cheshire kitty

[21:38] <BenGoldberg> That looks more like a wink than a smile :)

[21:39] <TimToady> ◡◠   <-- inverted sine wave

[21:40] *** gr33n7007h left
[21:40] *** gr33n7007h joined
[21:40] <raydiak> you guys are awesome, first thing to make me smile today

[21:40] <vendethiel> smiling++

[21:40] <japhb> BenGoldberg: I like the relaxing with the laptop one

[21:40] <lue> ∿ <-- actual sine wave :)

[21:40] <vendethiel> raydiak: the first thing to make me smile today was ... when I realized I WAS ON HOLIDAYS! yay :P

[21:40] <japhb> vendethiel: Heh.

[21:41] <vendethiel> japhb: want some :P ?

[21:41] <timotimo> vendethiel: now you have all the time to write docs! ;)

[21:41] <japhb> vendethiel: holidays?  Yes, do you have some to spare?

[21:41] <vendethiel> japhb: these 3 weeks are the only ones I have this year, so no, not really :P

[21:42] <TimToady> ⏔

[21:42] <vendethiel> timotimo: sadly, I won't have an internet connection, and since I edit directly from github ;)

[21:44] <timotimo> ah, fair enough ;)

[21:44] <vendethiel> timotimo: I'll probably write some, but hey, it's still holidays, soo :)

[21:44] <timotimo> right, it's important to unwind, too

[21:44] <vendethiel> m: sub myplus($a,$b) { ($a + $b) * 10 }; say (1..5) <<[[&myplus]]>> (1..10);

[21:44] <camelia> rakudo-moar 356d57: OUTPUT«20 40 60 80 100 70 90 110 130 150␤»

[21:45] *** brrt left
[21:45] <vendethiel> yay :-)

[21:45] <vendethiel> that doesn't work on my 2014.03-p locally :P

[21:45] <vendethiel> I think FROGGS++ fixed that

[21:45] <masak> not bad for a language that doesn't exist.

[21:46] <timotimo> why the F do you have a rakudo from this march? %)

[21:46] <timotimo> that's not our latest star, is it?

[21:46] <vendethiel> masak: cool off :-)

[21:46] <vendethiel> timotimo: it is

[21:46] <timotimo> damn it %)

[21:46] <timotimo> avuserow: can we help you at the moment?

[21:47] <vendethiel> and since my macbook is on holidays (and have been for a week), I can't test it but with camelia++ :P

[21:47] * masak performs some evaporative cooling

[21:47] * vendethiel was going to let off some steam anyway :P

[21:48] * masak whistles

[21:48] * japhb refills his bottle of coolant

[21:48] <vendethiel> masak: were you the one that liked to watch speedruns here :P ?

[21:48] <vendethiel> who was it already

[21:48] <vendethiel> why is my tongue so much out, is it really that hot?

[21:48] <masak> no, not me.

[21:48] * TimToady wonders if rakudo star is an F star

[21:51] <masak> I like how, in https://upload.wikimedia.org/wikipedia/commons/8/8b/Morgan-Keenan_spectral_classification.png they've put the stars on a reflecting glass surface, because that's the typical treatment of stars when you display them next to each other.

[21:51] *** beastd left
[21:52] <TimToady> Oh Be A Fine Girl Kiss Mirror?

[21:52] <lue> SunGlass®, so good it can touch the sun!™

[21:53] <avuserow> timotimo: I suppose I should give a status report to people here regarding r*

[21:53] <japhb> masak: Well geez, that's what I'd expect.  I mean, a reflective surface large enough to fit underneath all those stars wouldn't have *any* effect on the shape of the stars either ....

[21:53] *** denis_boyun_ left
[21:53] <avuserow> give me a few minutes though, in a $dayjob meeting :|

[21:54] <lue> Also, now for some reason I see »ö« as an ö-class (modified O-class ?) star that's become a pulsar :P

[21:54] <timotimo> that's no problem

[21:54] <masak> japhb: :)

[21:55] <japhb> lue: I kinda like that interpretation

[21:55] <japhb> Pulse frequency: approximately once a month

[21:55] *** spider-mario left
[21:55] * TimToady is a little surprised the stars aren't stretched out toward each other...

[21:56] <japhb> TimToady: I was thinking something similar.  Then I started thinking about chaotic effects ....

[21:57] * TimToady wonders if there has ever been a star system in that configuration...

[21:57] *** FROGGS[mobile] left
[21:57] <TimToady> for sure it'd be chaotic shortly thereafter

[21:58] *** jnap left
[21:59] *** kivutar left
[22:00] <TimToady> we oughta be able to find one, if there is, though--just draw a line through all the colinear stars, and then grep out the ones that are in order, and then look for the shortest line segment

[22:00] <TimToady> extra credit, determine if they're gravitationally bound

[22:01] <vendethiel> I like that, when explaining what >>[=>]<<, I was just able to say

[22:01] <avuserow> timotimo: so I'm blocked at present with some parrot issues where I get random segfaults. Moar is happy as expected. IIRC these failures were seen in previous star attempts?

[22:01] <avuserow> let me fish up the gist

[22:01] *** tzictli left
[22:01] <avuserow> timotimo: https://gist.github.com/avuserow/5da7dc1a8a0d8211bdf3

[22:01] <vendethiel> "well, really, it's just << and its reversed version >>, plus the [] to group it (ambiguity). Oh, and, the [[&sub]] that works for Z and stuff ? yeah, 'tworks here too"

[22:02] <lue> TimToady: and if you can't get anything, look at the stars from another planet :)

[22:03] *** cognominal left
[22:04] <BenGoldberg> m: say 0xffff.chr; # what causes this?

[22:04] <camelia> rakudo-moar 356d57: OUTPUT«(signal )»

[22:05] <japhb> m: say 0xfff0.chr;

[22:05] <camelia> rakudo-moar 356d57: OUTPUT«￰␤»

[22:05] <japhb> BenGoldberg: 0xffff isn't a Unicode character, IIRC

[22:05] <TimToady> p: say 0xffff.chr

[22:05] <camelia> rakudo-parrot 356d57: OUTPUT«Invalid character for UTF-8 encoding␤␤  in method chr at gen/parrot/CORE.setting:4503␤  in block  at /tmp/oZu6g77Nlw:1␤␤»

[22:05] <TimToady> but you'd expect something more like that

[22:05] <japhb> But yeah, signaling is a bad way to report the error ...

[22:06] <BenGoldberg> Exceptions good, signals bad

[22:06] <TimToady> though why the message mentions UTF-8 is beyound me

[22:06] <BenGoldberg> n: say 0xffff.chr;

[22:06] <camelia> niecza v24-109-g48a8de3: OUTPUT«\x{FFFF}␤»

[22:06] <BenGoldberg> P: say 0xffff.chr;

[22:06] <camelia> pugs: OUTPUT«\x{FFFF}␤»

[22:06] <timotimo> avuserow: darn :(

[22:06] <TimToady> j: say 0xffff.chr

[22:06] <camelia> rakudo-jvm 356d57: OUTPUT«\x{FFFF}␤»

[22:06] <TimToady> heh

[22:06] <japhb> TimToady: Because of characters that can't be represented in other encodings of Unicode, so the message is overly generic?

[22:07] <BenGoldberg> It should maybe say 'unicode', not 'utf8'

[22:07] <japhb> BenGoldberg: But UCS-2.

[22:07] <TimToady> well, and there's no encoding going on

[22:07] <avuserow> timotimo: that's how I feel about it too :(

[22:08] <timotimo> avuserow: how about offering a star for only moar and jvm? %)

[22:08] <japhb> TimToady: Right, I'm just hypothesizing how it got that odd wording.

[22:08] <avuserow> well jvm wasn't fully there in previous releases

[22:08] *** dmol left
[22:08] <avuserow> I guess I should golf the parrot problem and see how bad it is. If it's just a few modules, then maybe we can just mention it in errata

[22:08] <timotimo> mhm :\

[22:08] <avuserow> if it's a common construct, then that's not going to fly

[22:09] <avuserow> I did consider suggesting a "rakudo-luna" with just moar though :P

[22:09] <timotimo> mhm

[22:09] <avuserow> bbiab &

[22:10] *** anaeem1 left
[22:10] <timotimo> everybody is free to do their own perl 6 release or rakudo release (given they give it a different name)

[22:13] <japhb> Speaking of r*, does it do all module installs via panda yet?

[22:14] <masak> 'night, #perl6

[22:17] *** rurban joined
[22:17] <timotimo> hmm, don't know actually

[22:18] <timotimo> if it does, it'll have to install from local paths, for version reasons

[22:27] *** cognominal joined
[22:30] *** rurban left
[22:30] <japhb> timotimo: Sure, that makes sense.  Or start including revspecs in the r* copy of the ecosystem list.

[22:31] *** grondilu left
[22:32] <timotimo> hm, i wonder if panda understands that

[22:32] <timotimo> but we bundle all the repositorie's up-to-date-as-of-release content anyway

[22:34] <japhb> timotimo: In the future, we may not want to just bundle HEAD, but rather bundle a chosen tag/rev of each.

[22:34] <timotimo> er

[22:34] <timotimo> excuse me. that's what we do

[22:34] <timotimo> we have git submodules which we set to a specific revision

[22:35] <japhb> And if a module regresses (not because of deprecations in Rakudo, but because of changes in the module), we can just avoid changing the expected tag

[22:35] <japhb> Oh!  Well, OK then.  :-)

[22:38] *** ajr_ left
[22:42] *** rurban joined
[22:45] *** rurban left
[22:51] *** iarna left
[22:57] *** araujo left
[22:58] *** araujo joined
[23:09] *** woolfy joined
[23:18] *** nbrown____ left
[23:31] *** telex left
[23:32] *** telex joined
[23:33] *** lizmat joined
[23:34] *** virtualsue left
[23:34] <lichtkind> good night

[23:34] <lichtkind> my parder unoptimised is ready

[23:35] <lichtkind> perl 6 is so great but i have some suggestion of a helper function tthat would help easy things up

[23:38] *** woolfy left
[23:47] *** lichtkind left
[23:51] *** pecastro left
[23:52] *** kurahaupo left
