[00:09] *** kurahaupo1 joined
[00:11] *** nbrown joined
[00:12] *** JM3 left
[00:18] *** nbrown left
[00:19] <timotimo> http://t.h8.lv/p6bench/2014-09-26-many_rakudos_history.html - still rather humbling ... this one is more sensible to look at: http://t.h8.lv/p6bench/2014-09-26-many_rakudos_history_nop5.html

[00:19] *** grondilu left
[00:23] *** jerrycheung joined
[00:23] <timotimo> in the summary we're not even reaching 1/10 of the score of perl5 ...

[00:34] *** ssutch_ joined
[00:49] *** dayangkun joined
[00:51] *** leont left
[00:59] *** FROGGS_ joined
[01:02] *** Sqirrel left
[01:02] *** FROGGS left
[01:17] *** Mso150_u joined
[01:20] *** yeahnoob joined
[01:23] *** yeahnoob left
[01:36] *** yeahnoob joined
[01:50] *** Mso150_u left
[01:51] *** ssutch_ left
[01:53] *** ssutch_ joined
[01:55] * TimToady in Bella Vista, AR

[02:00] *** FROGGS__ joined
[02:00] *** Sqirrel joined
[02:04] *** FROGGS_ left
[02:10] *** dayangkun left
[02:11] *** vendethiel joined
[02:12] *** prevost left
[02:12] *** vendethiel- left
[02:13] *** noganex_ joined
[02:16] *** noganex left
[02:17] *** aborazmeh joined
[02:47] *** dwarring left
[02:56] <dalek> roast: aa5ffd7 | (David Warring [email@hidden.address] | integration/99problems-41-to-50.t:

[02:56] <dalek> roast: [integration/99-problems] solve P48 Truth tables for logical expressions (3).

[02:56] <dalek> roast: 

[02:56] <dalek> roast: Added basic operator precedence logic.

[02:56] <dalek> roast: review: https://github.com/perl6/roast/commit/aa5ffd77ae

[03:06] *** eMBee left
[03:06] *** jerrycheung left
[03:11] *** xenoterracide joined
[03:12] *** ssutch_ left
[03:12] <dalek> roast: 5a471e8 | (David Warring [email@hidden.address] | integration/99problems-41-to-50.t:

[03:12] <dalek> roast: [integration/99-problems] P48 removed precedence cheat - no long needed

[03:12] <dalek> roast: review: https://github.com/perl6/roast/commit/5a471e8d9d

[03:15] *** ssutch_ joined
[03:17] *** immortal joined
[03:17] *** erkan left
[03:17] *** aborazmeh left
[03:22] *** jerrycheung joined
[03:24] *** Ben_Goldberg joined
[03:26] *** BenGoldberg left
[03:26] *** Ben_Goldberg is now known as BenGoldberg

[03:28] *** molaf_ left
[03:30] *** nbrown joined
[03:32] *** zeropool joined
[03:34] *** nbrown left
[03:35] *** anaeem1_ left
[03:48] *** [Sno] left
[03:58] *** firefish5000 left
[04:02] *** ifim left
[04:08] *** anaeem1_ joined
[04:08] *** mberends joined
[04:14] *** colomon joined
[04:14] *** anaeem1_ left
[04:15] *** anaeem1 joined
[04:19] *** yeahnoob_ joined
[04:19] *** SevenWolf joined
[04:19] *** SevenWolf left
[04:21] *** yeahnoob_ left
[04:22] *** yeahnoob_ joined
[04:22] *** yeahnoob left
[04:22] *** yeahnoob_ is now known as yeahnoob

[04:27] *** colomon left
[04:29] *** yeahnoob left
[04:32] *** araujo left
[04:34] *** kurahaupo left
[04:37] *** kurahaupo joined
[04:37] *** kurahaupo left
[04:41] *** kaare_ joined
[04:41] *** anaeem1 left
[04:43] *** BenGoldberg left
[04:49] *** anaeem1_ joined
[04:53] *** anaeem1_ left
[04:55] *** anaeem1_ joined
[04:55] *** tinyblak left
[04:57] *** mr-foobar left
[05:00] *** SamuraiJack_ joined
[05:02] *** tinyblak joined
[05:03] *** tinyblak left
[05:03] *** xenoterracide left
[05:03] *** tinyblak joined
[05:11] *** tinyblak left
[05:11] *** tinyblak joined
[05:15] *** SamuraiJack_ left
[05:20] *** tinyblak left
[05:21] *** tinyblak joined
[05:22] *** [Sno] joined
[05:25] *** tinyblak left
[05:26] *** mberends left
[05:30] *** kurahaupo1 is now known as kurahaupo

[05:38] *** ggoebel2 joined
[05:39] *** yeahnoob joined
[05:41] *** ggoebel left
[05:46] *** mr-foobar joined
[05:52] *** gfldex joined
[05:53] <FROGGS[mobile]> firefish5000: already done yesterday :o)

[05:54] <FROGGS[mobile]> TimToady: what is AR?

[06:06] *** mr-foobar left
[06:07] *** virtualsue joined
[06:08] *** gfldex left
[06:10] *** telex left
[06:12] *** telex joined
[06:18] *** immortal left
[06:28] *** d4l3k_ joined
[06:28] *** atta left
[06:29] *** atta joined
[06:29] *** vukcrni left
[06:29] *** vukcrni joined
[06:29] *** Psyche^ left
[06:29] *** dalek left
[06:30] *** Psyche^ joined
[06:30] *** d4l3k_ is now known as dalek

[06:31] *** broquaint joined
[06:31] *** exixt joined
[06:31] *** exixt left
[06:31] *** exixt joined
[06:32] <dalek> star: d73e079 | (Tobias Leich)++ | modules/Template-Mojo:

[06:32] <dalek> star: update revision of Template-Mojo

[06:32] <dalek> star: review: https://github.com/rakudo/star/commit/d73e079361

[06:35] *** Mso150_u joined
[06:36] *** Bucciarati joined
[06:37] *** FROGGS__ left
[06:59] *** brrt joined
[07:02] *** darutoko joined
[07:06] *** FROGGS joined
[07:08] *** yeahnoob left
[07:11] *** mberends joined
[07:15] *** yeahnoob joined
[07:15] *** vukcrni left
[07:16] *** vukcrni joined
[07:39] *** ghostlin_ joined
[07:48] <nine> timotimo: If we were already close to Perl 5, we would have less room for improvement than we really have. Which would be a shame since we're really slow at times :) But we will get there eventually.

[07:51] <brrt> nine: it is my personal suspicion that getting to perl5-level will take some serious rethinking of the GLR type :-)

[07:51] <brrt> which is ok

[07:51] <brrt> keeps us from the streets

[07:51] <brrt> but boy would it be nice to have a full-time team on this

[07:55] <nine> It would :) But don't go there. Even the Perl 5 world has almost no paid support despite the language making billions around the world. Wishing such things can only end in frustration.

[07:56] *** yeahnoob left
[07:56] <nine> But as I see it: we only started pushing performance a year ago. And most of the work was basics like porting to MoarVM, spesh and the JIT. I guess there's loads of optimizations waiting to be implemented on top of these basics.

[07:59] *** _slade_ left
[08:02] *** pmurias joined
[08:03] <pmurias> GLR type?

[08:04] <brrt> well.. i'd also add that our JIT is the worlds most toyish production JIT

[08:05] <brrt> but yeah, you're not wrong, there's still a lot that we can do

[08:05] <brrt> both on the high and low levels

[08:05] <brrt> but very few of these are low-hanging fruits

[08:09] <nine> pmurias: the great list refactor

[08:10] <pmurias> are lazy lists a big performance bottleneck?

[08:12] <nine> seems so

[08:14] *** kurahaupo left
[08:14] *** kurahaupo joined
[08:30] *** Ven joined
[08:30] <Ven> o/, #perl6.

[08:31] *** kjs_ joined
[08:31] <moritz> pmurias: yes

[08:33] *** kurahaupo left
[08:33] <brrt>  \o Ven

[08:33] *** kaleem joined
[08:33] *** daxim joined
[08:34] *** kurahaupo joined
[08:36] *** kjs_ left
[08:38] <moritz> pmurias: in most profiles I've seen,  ListIter.reify and MapIter.reify together make up at least 20% of the time, often more

[08:38] <dalek> roast: 06d3aa3 | usev6++ | S (5 files):

[08:38] <dalek> roast: Avoid some warnings and a few cosmetic changes

[08:38] <dalek> roast: review: https://github.com/perl6/roast/commit/06d3aa38cc

[08:39] <brrt> well, that means a 10 fold speed increase will take at most 18% of the total runtime

[08:39] <moritz> brrt: the 20% is more of a lower boundary

[08:40] <brrt> fair enough

[08:40] *** bartolin joined
[08:40] <moritz> brrt: just as another databpoint,  for lines() { }  is limited by CPU, not IO

[08:40] <brrt> what

[08:40] <brrt> o.O

[08:40] <brrt> not jitted yet probably?

[08:41] <moritz> dunno, I profiled without JIT

[08:41] <brrt> i'd be interested :-)

[08:42] *** fhelmberger joined
[08:49] *** virtualsue left
[08:56] *** Mso150_u left
[09:02] *** jerrycheung left
[09:03] *** kjs_ joined
[09:11] *** vendethiel left
[09:17] <lizmat> Good *, #perl6!

[09:17] <lizmat> FROGGS[mobile]: AR = Arizona

[09:22] <brrt> \o lizmat

[09:22] <lizmat> \o brrt 

[09:25] <moritz> brrt: https://gist.github.com/moritz/71e80df7a6756ac5251e

[09:25] <brrt> very excellent :-)

[09:26] <brrt> is see

[09:26] <brrt> i see

[09:26] <brrt> wow

[09:26] <brrt> we should JIT better :-)

[09:26] <moritz> that's the bottom-up approach

[09:27] <brrt> true

[09:27] <moritz> if we spend >60% in list iteration code, we're doing things utterly wrong.

[09:27] <nine> Improving the JIT for this case probably will improve other cases as well...

[09:27] <moritz> though TBH I don't know how to make them better

[09:28] <nwc10> this is a short example demonstrating the need/acting as a test case for the Grand List Refactor?

[09:28] <brrt> i'd say

[09:28] <moritz> yes

[09:29] <brrt> this is especially annoying since timotimo and i already optimized-and-jitted list iteration on the moarvm level

[09:31] <brrt> here's.. the thing though

[09:31] <brrt> because of many reasons, the frame invocation code is a pretty slow path

[09:32] <brrt> anything that relies on a lot of calls to a lot of subroutines is going to hurt

[09:32] <moritz> aye

[09:32] <moritz> there are 99k lines here in /usr/share/dict/words

[09:33] <moritz> and it seems we have at least 5x as many invocations

[09:33] <dalek> roast: 4b5dd97 | (Elizabeth Mattijsen)++ | S16-filehandles/open.t:

[09:33] <dalek> roast: Unfudge now passing test on rakudo

[09:33] <dalek> roast: review: https://github.com/perl6/roast/commit/4b5dd97584

[09:33] <moritz> actually, a lot more

[09:34] <moritz> just looking at the numbers, we seem to invoke ~13 frames per list item

[09:34] <Ven> :(

[09:35] <moritz> on the plus side, we spend only 11% of the time GC-ing

[09:35] <moritz> that's quite good, IMHO

[09:36] <dalek> roast: 3164e55 | usev6++ | S03-operators/autoincrement.t:

[09:36] <dalek> roast: Add test for RT #99732

[09:36] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=99732

[09:36] <dalek> roast: review: https://github.com/perl6/roast/commit/3164e55750

[09:36] <brrt> that's not bad, no :-)

[09:36] <brrt> i think i argued for frame allocation optimising (as in, making optimistic) some time ago on #moarvm

[09:37] <brrt> i'd argue for that again but it is mightily complex

[09:38] *** denis_boyun_ joined
[09:48] *** pmurias left
[09:49] *** virtualsue joined
[09:52] *** Alina-malina left
[09:53] *** Alina-malina joined
[09:55] *** pecastro left
[09:56] *** mberends left
[10:00] *** mberends joined
[10:01] *** pecastro joined
[10:19] <dalek> roast: 2b143b6 | usev6++ | S03-operators/misc.t:

[10:19] <dalek> roast: Remove duplicate test

[10:19] <dalek> roast: 

[10:19] <dalek> roast: There is already a test for this in S03-metaops/zip.t

[10:19] <dalek> roast: review: https://github.com/perl6/roast/commit/2b143b6f31

[10:19] * brrt afk

[10:19] *** brrt left
[10:20] <nine> Interesting way to "fix" ShellShock: http://lwn.net/Articles/613346/

[10:22] *** xinming joined
[10:23] *** erkan joined
[10:24] *** jerrycheung joined
[10:25] *** xinming_ left
[10:35] *** grondilu joined
[10:36] <grondilu> shouldn't grep conserve typing?

[10:36] <grondilu> m: my Real %a; %a{^3}»++; say %a.grep(*.key %% 2).perl

[10:36] <camelia> rakudo-moar 85c4c0: OUTPUT«("2" => 1, "0" => 1).list␤»

[10:37] <grondilu> m: my Real %a; %a{^3}»++; say %a.perl

[10:37] <camelia> rakudo-moar 85c4c0: OUTPUT«Hash[Real].new("2" => 1, "0" => 1, "1" => 1)␤»

[10:37] <grondilu> see what I mean?

[10:37] <lizmat> I think it's more a deficiency in Hash.perl

[10:38] <lizmat> or even Pair.perl

[10:38] <grondilu> m: my Real %a{Int}; %a{^3}»++; %a.=grep(*.key %% 2); say %a.perl

[10:38] <camelia> rakudo-moar 85c4c0: OUTPUT«Hash[Real,Int].new(2 => 1, 0 => 1)␤»

[10:39] <grondilu> not sure

[10:39] *** Ven left
[10:42] *** pecastro left
[10:43] *** pecastro joined
[10:50] *** yeahnoob joined
[11:03] *** erkan left
[11:04] *** erkan joined
[11:04] *** erkan left
[11:04] *** erkan joined
[11:13] *** colomon joined
[11:26] <carlin> is it possible to declare a MAIN sub with two commands, so something like `multi MAIN('foo'|'bar') { }` so that both foo and bar run the same sub

[11:27] *** kurahaupo left
[11:27] *** prevost joined
[11:28] <FROGGS> m: multi MAIN($ where 'foo'|'bar') { say 42 }; MAIN('foo');  MAIN('bar');  MAIN('baz'); 

[11:28] <camelia> rakudo-moar 85c4c0: OUTPUT«42␤42␤Cannot call 'MAIN'; none of these signatures match:␤:(Any $ where { ... })␤  in sub MAIN at /tmp/2_B1So36Hz:1␤  in block <unit> at /tmp/2_B1So36Hz:1␤␤»

[11:28] <FROGGS> carlin: ^^

[11:30] <carlin> thanks FROGGS++

[11:30] <carlin> that makes the Usage a bit weird though

[11:30] *** leont joined
[11:30] <carlin> Usage: test.pl6 -> ($_) { #`(Block|52813472) ... } 

[11:31] <FROGGS> yeah...

[11:31] <FROGGS> we'd need to improve how such code blocks gistify

[11:31] <FROGGS> m: multi MAIN($ any <foo bar>) { say 42 }

[11:31] <camelia> rakudo-moar 85c4c0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/VJYPbsk006␤Missing block␤at /tmp/VJYPbsk006:1␤------> [32mmulti MAIN($ [33m⏏[31many <foo bar>) { say 42 }[0m␤    expecting any of:␤        statement list␤        prefix or term␤ …»

[11:31] <FROGGS> m: multi MAIN($ where any <foo bar>) { say 42 }

[11:31] <camelia> rakudo-moar 85c4c0: OUTPUT«Usage:␤  /tmp/5iAw9KyYvp -> ($_) { #`(Block|50648384) ... } ␤»

[11:32] <FROGGS> :/

[11:32] *** colomon left
[11:37] *** scumdog1 joined
[11:41] <TimToady> FROGGS: Arkansas

[11:41] <lizmat> oops

[11:42] <lizmat> AZ is Arizona, right ?

[11:42] <TimToady> yup

[11:42] <lizmat> FROGGS: sorry for the FUD

[11:42] <lizmat> errands&

[11:42] <nine> I'd hope that TimToady visiting Arizona would not instill fear :)

[11:43] *** scumdog1 left
[11:43] <FROGGS> Arrr! :o)

[11:44] <grondilu> std: my Real %{Int}; # testing anonymous typed hashes

[11:44] <camelia> std fc92e1e: OUTPUT«ok 00:01 142m␤»

[11:44] <grondilu> m: my Real %{Int}; # testing anonymous typed hashes

[11:44] <camelia> rakudo-moar 85c4c0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/SBgaMBykC_␤Unsupported use of %{Int}; in Perl 6 please use %Int␤at /tmp/SBgaMBykC_:1␤------> [32mmy Real %{Int}[33m⏏[31m; # testing anonymous typed hashes[0m␤»

[11:45] *** kurahaupo joined
[11:45] *** yeahnoob left
[11:47] *** yeahnoob joined
[11:51] *** pmurias_ joined
[11:51] *** pmurias joined
[11:51] <dalek> nqp-js: 489db46 | (Pawel Murias)++ | src/vm/js/ (3 files):

[11:51] <dalek> nqp-js: A tiny bit of progress on deserializing objects.

[11:51] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/489db46fa0

[11:51] <dalek> nqp-js: 9158711 | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (2 files):

[11:51] <dalek> nqp-js: A tiny bit more progress.

[11:51] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/915871132c

[11:51] <dalek> nqp-js: c2f2d39 | (Pawel Murias)++ | / (6 files):

[11:51] <dalek> nqp-js: Wrap subs in a CodeRef object.

[11:51] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/c2f2d39fa5

[11:54] *** anaeem1__ joined
[11:55] *** anaeem1__ left
[11:55] * TimToady -> LA (the state, not the city)

[11:56] *** anaeem___ joined
[11:57] *** anaeem1_ left
[11:59] <nwc10> TimToady: implying that you've made it past Texas?

[12:00] <nwc10> I honestly don't know if Texas is a hard place to get out of

[12:00] *** pmurias_ left
[12:06] <nine> I sometimes have the feeling that Perl 6 is overengineered and overcomplicated. But then I just tried to explain to a developer the difference between a function call and a method call in Perl 5 and why you should never call a method as a function without the prefixed $self->.

[12:07] *** kaleem left
[12:12] <dalek> nqp-js: ac78dbd | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (2 files):

[12:12] <dalek> nqp-js: Start of methods support.

[12:12] <dalek> nqp-js: 

[12:12] <dalek> nqp-js: knowhow Foo {

[12:12] <dalek> nqp-js:     method lol() {

[12:12] <dalek> nqp-js:         say("yay, this works");

[12:12] <dalek> nqp-js:     }

[12:12] <nine> OTOH Perl 5 seems very consistent in that it's always the user deciding what something is: sub foo {} foo() # a function; $self->foo() # a method; Foo->foo() # a static method. $a + $b # numbers! $a . $b # strings!

[12:12] <dalek> nqp-js: }

[12:12] <dalek> nqp-js: Foo.lol();

[12:12] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/ac78dbd1dd

[12:14] *** PZt left
[12:16] *** zeropool left
[12:16] <FROGGS> nine: foo bar # method!

[12:16] <FROGGS> (static, even, maybe)

[12:16] <nwc10> are you sure? I think it ends up depending whether bar has been opened as a file handle

[12:17] <nine> FROGGS: you mean indirect object syntax?

[12:17] <FROGGS> nine: yes

[12:17] <FROGGS> nwc10: that's not restricted to filehandles, is it?

[12:17] <nine> FROGGS: well that's still the caller deciding, not the writer of the sub

[12:18] <nwc10> FROGGS: I can't remember. I know that there are various bits of syntax which are determined by heuristics, and I (a) can't remember exactly which syntax (b) can't remember exactly what the heuristics are

[12:18] <FROGGS> nine: which leaves room for confusion and errors

[12:18] <nwc10> but it's ugly

[12:18] <FROGGS> perl -E 'package Foo { sub bar { say 42 } }; bar Foo'

[12:18] <nine> In Perl 6 we still have operators deciding the operation. $a + $b will always be an addition, not string concatenation. But a method is a method and cannot be called as a function anymore.

[12:18] <FROGGS> 42

[12:19] *** lue left
[12:20] <nwc10> perl -E 'sub Foo::bar { say 42 }; bar Foo'

[12:20] <nwc10> 42

[12:20] <FROGGS> nine: which is good IMO

[12:20] <nine> In Perl 5 it's the -> operator deciding. There's no method without the method call operator. All in all very consistent. Ugly (in the case of indirect object syntax), surprising to foreigners, but at least consistent.

[12:20] <nwc10> $ perl -E 'open bar, "</dev/null"; sub Foo::bar { say 42 }; bar Foo'

[12:20] <nwc10> Bareword found where operator expected at -e line 1, near "bar Foo" (Do you need to predeclare bar?)

[12:20] <nwc10> syntax error at -e line 1, near "bar Foo

[12:20] <nwc10> "

[12:20] <nwc10> Execution of -e aborted due to compilation errors.

[12:25] <FROGGS> nine: I prefer introspection over using methods as subs... so there must be some distinction

[12:26] <FROGGS> though, you can kinda mix them:

[12:26] <FROGGS> m: class Foo { method bar is export { say 42 } }; import Foo; bar(Foo)

[12:26] <camelia> rakudo-moar 85c4c0: OUTPUT«42␤»

[12:26] <FROGGS> (only kinda)

[12:26] <nine> FROGGS: the bottomline probably is: language design is really hard.

[12:27] <FROGGS> very very true

[12:27] <nine> Though I like Perl 5's consistency in this regard, I've a hard time explaining to the beginner :)

[12:27] <FROGGS> I have the feeling though that Perl 6 is easier to learn, because it has less warts

[12:28] <FROGGS> but... rakudo has other Stolpersteine

[12:29] <nine> FROGGS: maybe. At the same time I _still_ don't know how to pass on a variable list of parameters to another function call. And all the talk about Parcels, Captures and slurpy arguments and | and * and whatnot does not make it easier. In Perl 5 it's sub foo { my ($self, $foo, @rest); bar(@rest); } and I'm done.

[12:29] <FROGGS> like, try to explain this wart:

[12:29] <FROGGS> perl -E 'say 1 .beer'

[12:29] <FROGGS> 1beer

[12:30] <FROGGS> nine: true... it always felt like there were to many array-ish primitives for example

[12:30] <nine> FROGGS: that's why _everyone_ repeats the use strict; use warnings; mantra to newbies.

[12:31] <FROGGS> maybe it will be the default in 5.30 :o)

[12:31] <nine> Sure list context still bites me after 15 years of Perl, but at least it's a simple concept.

[12:32] *** anaeem___ left
[12:32] <nine> And it never bites me when passing parameters. Just on return values of functions.

[12:32] *** lue joined
[12:34] *** anaeem1_ joined
[12:34] *** kaare_ left
[12:37] *** anaeem1_ left
[12:37] *** yeahnoob left
[12:38] *** rurban joined
[12:43] *** rjbs joined
[12:43] <rjbs> Yow, I don't have this channel on auto-rejoin.  For shame.

[12:44] <timotimo> meep meep

[12:45] <[Coke]> r: sub a($a,$b,$c,$d) { say "$a $b $c $d" } ; my @things=3,4; a(1,2,|@things);

[12:45] <camelia> rakudo-jvm 85c4c0: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[12:45] <camelia> ..rakudo-{parrot,moar} 85c4c0: OUTPUT«1 2 3 4␤»

[12:46] <[Coke]> mnemonic: | flattens

[12:47] <FROGGS[mobile]> and * is for Whatever I shall get

[12:50] *** cognome joined
[12:50] <nine> but there's also @things.list?

[12:51] *** yeahnoob joined
[12:51] <[Coke]> r: my @things=1,2; { |@.things }.perl.say

[12:51] <camelia> rakudo-jvm 85c4c0: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[12:51] <camelia> ..rakudo-{parrot,moar} 85c4c0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Variable @.things used where no 'self' is available␤at /tmp/tmpfile:1␤------> [32mmy @things=1,2; { |@.things[33m⏏[31m }.perl.say[0m␤    expecting any of:␤        st…»

[12:51] <FROGGS> that does not flatten

[12:52] <[Coke]> ^^ | isn't valid generically, I don't think.

[12:52] <FROGGS> m: my @things=1,2; { |@things }.perl.say

[12:52] <camelia> rakudo-moar 85c4c0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/w8ttO3OGl3␤Variable '&prefix:<|>' is not declared␤at /tmp/w8ttO3OGl3:1␤------> [32mmy @things=1,2; { [33m⏏[31m|@things }.perl.say[0m␤»

[12:52] <FROGGS> [Coke]: only valid in a call/return

[12:53] <[Coke]> right.

[12:54] <nine> There's also:  method postcircumfix:<( )>(\args) {

[12:54] <nine>         $.perl5.execute($.ptr, |args);

[12:54] <nine>     }

[12:54] <nine> and: -> \self, |args {

[12:54] <nine>                 $.parent.perl5.invoke($package, $.parent.ptr, $name, self, args.list);

[12:54] <nine>             }

[12:55] <nine> That's already three different and non-interchangeable ways to pass on those parameters

[12:55] <[Coke]> |args is the same as @args as far as flattening.

[12:55] <[Coke]> er:

[12:56] <[Coke]> |args is the same as |@args as far as flattening.

[12:56] <[Coke]> (the lack of the @ is a separate issue)

[12:59] <nine> As far as I understood there's differences in how named arguments are handled.

[13:00] <gtodd> nine: hmm is it normally the case in perl that things are sort of more interchangeable  ?

[13:01] <PerlJam> good * #perl6

[13:01] <FROGGS> hi PerlJam 

[13:03] <nine> gtodd: you mean the there's more than one way thing? Yes. But in this case it's not exactly the same thing. There are subtle differences. And subtlety makes learning harder.

[13:03] <gtodd> yes

[13:03] <nine> Of course most people probably don't learn a language by writing a generic bridge to another language :)

[13:04] <nine> So my hurdles where quite a bit different to the usual ones I'd guess.

[13:04] <PerlJam> nine: actually .... I bet they do.  It's just the bridge live in their head :)

[13:04] <gtodd> otoh once you learn something like perl5's idea of "context "  you have new powers :-)

[13:04] <gtodd> even though context is hard for beginners

[13:05] <gtodd> nothing matters now though ...  since  " #cyber attacks start to exploit #Shellshock bug and threaten critical infrastructure  "

[13:05] <PerlJam> gtodd: context is hard for experts sometimes too  :)

[13:05] *** yeahnoob_ joined
[13:06] <gtodd> true

[13:06] *** bjz_ left
[13:07] *** bjz joined
[13:08] <timotimo> i'm actually not entirely sure why method postcircumfix:<( )> takes a single argument named args

[13:08] <timotimo> the \ just says "i don't want to impose a sigil on this variable"

[13:08] *** yeahnoob_ left
[13:08] *** yeahnoob left
[13:08] *** SamuraiJack_ joined
[13:12] *** yeahnoob joined
[13:18] *** molaf joined
[13:22] *** yeahnoob left
[13:26] <[Coke]> I would say not impose context.

[13:32] *** yeahnoob joined
[13:34] *** kurahaupo left
[13:35] *** yeahnoob left
[13:38] <timotimo> right

[13:43] *** cognome left
[13:44] *** cognome joined
[13:46] *** yeahnoob joined
[13:49] *** cognome left
[13:53] *** kurahaupo joined
[13:57] *** Alula joined
[13:58] *** [Sno] left
[14:11] <grondilu> m: role A { multi method gist(A:) { "A!" } }; say 1 but A;

[14:11] <camelia> rakudo-moar 85c4c0: OUTPUT«Ambiguous call to 'gist'; these signatures all match:␤:(Numeric:D: *%_)␤:(A: *%_)␤  in sub say at src/gen/m-CORE.setting:15503␤  in block <unit> at /tmp/HGoXy7liH4:1␤␤»

[14:11] <grondilu> m: role A { multi method gist { "A!" } }; say 1 but A;

[14:11] <camelia> rakudo-moar 85c4c0: OUTPUT«A!␤»

[14:12] <jnthn> grondilu: And that's the reason that the invocant type is generic in roles ;)

[14:14] * grondilu doesn't quite understand

[14:15] <grondilu> does that mean I should never use invocant polymorphism for roles?

[14:15] <dalek> Inline-Perl5: aa27ba0 | moritz++ | lib/Inline/Perl5.pm6:

[14:15] <dalek> Inline-Perl5: Cache path to p5helper.so in a state variable

[14:15] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/aa27ba0f2f

[14:15] <grondilu> the thing is I had a subset of a role, and I wanted a specific gist for this subset

[14:15] <dalek> Inline-Perl5: b639c31 | moritz++ | lib/Inline/Perl5.pm6:

[14:15] <dalek> Inline-Perl5: remove exception type that is not used anymore

[14:15] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/b639c319ca

[14:15] <grondilu> It didn't quite work, for it triggered the "ambigious call" error

[14:16] <jnthn> grondilu: It's funny you call it invocant polymorphism when it's exactly the polymorphism that you're removing by writing the A there ;-)

[14:17] <jnthn> role Foo { method m() { } }

[14:17] <jnthn> Is really

[14:17] <grondilu> I was thinking of the longuest example:

[14:17] <grondilu> m: role A is Cool {...}; subset B of A where * %% 2; role A { multi method gist { "A!" }; multi method gist (B:) { "B!!" } }; say 2 but A;

[14:17] <camelia> rakudo-moar 85c4c0: OUTPUT«A!␤»

[14:17] <jnthn> role Foo { method m(::?CLASS:) { } }

[14:17] * grondilu was expecting B!

[14:17] <grondilu> or rather 'B!!'

[14:18] * grondilu realises Cool is not needed here

[14:18] <grondilu> m: role A {...}; subset B of A where * %% 2; role A { multi method gist { "A!" }; multi method gist (B:) { "B!!" } }; say 2 but A;

[14:18] <camelia> rakudo-moar 85c4c0: OUTPUT«A!␤»

[14:18] <grondilu> m: role A {...}; subset B of A where * %% 2; role A { multi method gist { "A!" }; multi method gist (B:) { "B!!" } }; say (2 but A) ~~ B;

[14:18] <camelia> rakudo-moar 85c4c0: OUTPUT«True␤»

[14:18] <grondilu> ^see?

[14:19] <jnthn> Hmm, interesting. 

[14:20] <dalek> Inline-Perl5: 6a57058 | moritz++ | lib/Inline/Perl5.pm6:

[14:20] <dalek> Inline-Perl5: be a bit more idiomatic

[14:20] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/6a57058ef8

[14:20] <dalek> Inline-Perl5: 964a9cb | moritz++ | lib/Inline/Perl5.pm6:

[14:20] <dalek> Inline-Perl5: Use a native int for iterating

[14:20] <dalek> Inline-Perl5: 

[14:20] <dalek> Inline-Perl5: it might be a bit faster

[14:20] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/964a9cbe64

[14:21] <Woodi> hallo #perl6 :)

[14:21] <jnthn> grondilu: Yeah, that one surprises me a bit. I mean, I know it wil pick the subset apart into a nominal part and a constraint part.

[14:22] <jnthn> grondilu: I *think* it could be a bug that you don't get B there. I can't think about a bunch of stuff that happens, but none of it seems to explain the B candidate not winning.

[14:25] <Woodi> it's good shellbleed was uncovered now :)  but seence ~2001 when libresolver from always-buggy-BIND DNS soft was uncovered I just assume all things are remote hackable :)

[14:25] <Woodi> and, sadly, perl5 is not exception...

[14:27] <Woodi> but I have perl6-redis library a bit unrotted, I need to put it on github or something to share ? 

[14:27] <jnthn> Woodi: Github is the place most modules live

[14:28] <nine> moritz++ # cleaning up

[14:29] <Woodi> sorry, I just need to learn git usage... i have git cloned repo on disk but not in github ? i need to clone from source on github and then somehow merge local changes ?

[14:30] <moritz> Woodi: does the repo already exist on github?

[14:30] <Woodi> not on my account

[14:31] <moritz> Woodi: then you should probably fork it into your account on github

[14:31] <moritz> Woodi: and then in your local copy, run 'git remote add woodi <url to your github repo>'

[14:32] <moritz> Woodi: and then you can 'git push woodi master', for example, to push your local master branch to your new github repo

[14:32] <dalek> rakudo-star-daily: 6b5b81d | coke++ | log/ (15 files):

[14:32] <dalek> rakudo-star-daily: today (automated commit)

[14:32] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/6b5b81dd60

[14:32] <Woodi> that's a moment when incantations starts :) ok, i will try. thank you very much :)

[14:32] <dalek> Inline-Perl5: 0762b31 | moritz++ | lib/Inline/Perl5.pm6:

[14:32] <dalek> Inline-Perl5: hide handle_p5_exception from backtraces

[14:32] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/0762b31834

[14:32] <dalek> Inline-Perl5: d6fe199 | moritz++ | lib/Inline/Perl5.pm6:

[14:32] <dalek> Inline-Perl5: micro optimizations

[14:32] <dalek> Inline-Perl5: 

[14:32] <dalek> Inline-Perl5: I think that return at the end of a routiine is not optimized out

[14:32] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/d6fe1990cd

[14:34] *** Alula left
[14:34] *** Alula joined
[14:38] *** kaare_ joined
[14:38] *** sqirrel_ joined
[14:40] *** rurban left
[14:41] <nine> moritz: regarding d6fe199: as Inline::Perl5 is bound to be slow in any case I'm not sure if reducing readability for slightly better performance is really worth it.

[14:43] <moritz> nine: if you find it less readable this way, feel free to revert it

[14:44] <dalek> panda: 2a0f08f | (Tobias Leich)++ | lib/Panda/ (3 files):

[14:44] <dalek> panda: use $*DISTRO.is-win instead of $*OS

[14:44] <dalek> panda: 

[14:44] <dalek> panda: The usage of $*OS was buggy anyway because it gives "mswin32" instead "MSWin32" nowadays.

[14:44] <dalek> panda: review: https://github.com/tadzik/panda/commit/2a0f08f44e

[14:44] <moritz> nine: I'm quite used to the last-value-returned thing

[14:45] <nine> moritz: missing explicit return statement is a level 5 (highest) issue in perlcritic. Mostly because it's often surprising what ends up as being the last value evaluated.

[14:46] <nine> But I better get back to fixing those bugs I just discovered ;)

[14:47] *** muraiki left
[14:47] *** kurahaupo left
[14:48] *** SamuraiJack_ left
[14:48] <timotimo> i seem to recall FROGGS worked on "remove return at the very end of a statementlist" optimization

[14:49] <dalek> panda: 51fc726 | (Tobias Leich)++ | lib/Panda.pm:

[14:49] <dalek> panda: create tempdir so we do not rely on git doing it

[14:49] <dalek> panda: 

[14:49] <dalek> panda: Seems like git on windows does not want to do it, so we do instead.

[14:49] <dalek> panda: review: https://github.com/tadzik/panda/commit/51fc726008

[14:49] <FROGGS> timotimo: no...

[14:49] <FROGGS> I just stripped it from some internal subs/methods :o)

[14:49] <FROGGS> I've never implemented an optimization, really

[14:50] <timotimo> oh

[14:50] <timotimo> it kind of sounds like a simple optimization to do, no?

[14:51] <jnthn> I thought somebody did it...

[14:51] <jnthn> Maybe it was moritz++? :)

[14:52] *** muraiki joined
[14:53] <nine> jnthn: if it were moritz, he wouldn't have stripped the return from Inline::Perl5's methods ;)

[14:53] <jnthn> oh...good point

[14:53] <jnthn> <== tired :)

[14:53] <moritz> I'm sure it was discussed a few weeks ago

[14:53] <dalek> star: 7b959aa | (Tobias Leich)++ | modules/panda:

[14:53] <dalek> star: use a panda that also works on windows

[14:53] <dalek> star: review: https://github.com/rakudo/star/commit/7b959aa766

[14:54] <moritz> and I mentioned that it has to be aware of lexical overrides of &return

[14:54] <moritz> m: my &return = -> $x { $x * 2 }; sub a { return 21 }; say a

[14:54] <camelia> rakudo-moar 85c4c0: OUTPUT«42␤»

[14:54] *** SamuraiJack joined
[14:58] <timotimo> .tell japhb when we are fast enough or use a sufficiently high --enough-time, won't the benchmarks that do native integer loops overflow their counter and infinitely loop?

[14:58] <yoleaux> timotimo: I'll pass your message to japhb.

[14:59] <jnthn> timotimo: On 64-bit?

[14:59] *** mberends left
[14:59] *** brrt joined
[15:00] <jnthn> timotimo: I think I once calcuated how long it'd take for a C program doing x++ on a 64-bit integer to overflow

[15:00] *** kurahaupo joined
[15:01] <nine> Could there be some limit to levels of callbacks NativeCall survives?

[15:01] *** ghostlin_ left
[15:02] <brrt> i think i tried that too and it's far longer than you would imagine

[15:02] <jnthn> timotimo: And, uh, I'm pretty sure that unless anti-aging technology comes a long way we don't need to worry about it during our lifetimes :P

[15:03] <timotimo> OK :)

[15:03] *** treehug88 joined
[15:04] *** bartolin left
[15:04] *** ghostlin_ joined
[15:05] *** telex left
[15:05] *** kjs_ left
[15:06] *** telex joined
[15:06] *** sqirrel_ left
[15:08] <leont> Hehe. Reminds me of certain cryptographic cases, where "we couldn't brute force this if all atoms in the universe were trying a million keys per second until the heat-death of the universe"

[15:08] <timotimo> right, that's a thing

[15:09] <jnthn> It's not *that* big a value, but it's quite some orders of magnitude beyond where we need to be worrying about perl6-bench overflowing it :)

[15:10] <dalek> star: b79eb13 | (Tobias Leich)++ | tools/build/panda-state.p6:

[15:10] <dalek> star: just try to mkdir (in case it exists)

[15:10] <dalek> star: review: https://github.com/rakudo/star/commit/b79eb13811

[15:10] <jnthn> FROGGS: Does that fix the annoying long-standing windows panda bug I occasionally see? :)

[15:11] <FROGGS> jnthn: yes, panda actually works now :o)

[15:11] *** denis_boyun_ left
[15:12] <PerlJam> I don't know what optimizations have been done this week, but whatever it is, is awesome

[15:12] *** denis_boyun_ joined
[15:12] <FROGGS> jnthn: and it knows what is installed, so it won't reinstall shipped modules just because

[15:12] <FROGGS> PerlJam: there were any?

[15:13] <PerlJam> I have a one-liner that processes a large file.  When I ran it earlier in the week it took 10 minutes.  Today I ran it again (because I wanted to see the difference between with jit and without jit) and without jit it took ~4 minutes.

[15:13] <PerlJam> with jit its just shy of 3 minutes

[15:14] <FROGGS> that might have been lizmat++, though I'm not sure :o)

[15:14] <PerlJam> yeah, I think so too

[15:14] <lizmat> PerlJam: you might want to sprinkle in :eager if you're using lines or words  :-)

[15:15] <moritz> FROGGS++ optimized match object creation, no?

[15:15] <FROGGS> hehe, well

[15:16] <moritz> and jnthn++ optimized Array.push

[15:16] <FROGGS> that did not improve anything... .MATCH is not slightly slower than before

[15:16] <FROGGS> now*

[15:16] <FROGGS> damn fat fingers

[15:16] *** brrt left
[15:16] <PerlJam> well, my one liner is using slurp, comb, match, map, and substr.  Something in there got faster.

[15:18] *** denis_boyun_ left
[15:18] *** kurahaupo left
[15:18] <lizmat> PerlJam: I would think match then, in that case

[15:18] *** SamuraiJack left
[15:22] <b2gills> Is there a good reason `* + *` doesn't just return `&infix:<+>`

[15:24] <PerlJam> b2gills: what do you mean "return"?

[15:24] *** Kaliber46 joined
[15:25] <moritz> b2gills: there's a reason, but probably not a good one: the type should be WhateverCode, not Sub

[15:26] <moritz> b2gills: also, &infix:<+> is a multi that supports separate arities; *+* must accept exactly two arguments

[15:26] <moritz> m: say &infix:<+>()

[15:26] <camelia> rakudo-moar 85c4c0: OUTPUT«0␤»

[15:26] <moritz> m: say &infix:<+>(42)

[15:26] <camelia> rakudo-moar 85c4c0: OUTPUT«42␤»

[15:26] <moritz> m: say &infix:<+>(20 + 22)

[15:26] <camelia> rakudo-moar 85c4c0: OUTPUT«42␤»

[15:26] <moritz> m: say &infix:<+>(20,  22)

[15:26] <camelia> rakudo-moar 85c4c0: OUTPUT«42␤»

[15:27] <jnthn> Those are quite good reasons :)

[15:27] <b2gills> moritz: I thought about that immediately after posting.

[15:27] <jnthn> I don't think we cache whatever closures

[15:27] <jnthn> and compile a differnet one each time

[15:28] <jnthn> Which is perhaps vaguely naive at first, but probably means the dynamic optimizer has a good shot at inlining.

[15:28] <jnthn> (Since types at a given usage site tend to vary little)

[15:29] <jnthn> So perhaps we needn't worry about the cost of the extra level of call :)

[15:31] *** BenGoldberg joined
[15:32] *** kurahaupo joined
[15:33] <timotimo> http://t.h8.lv/p6bench/2014-09-26-many_rakudos_history_nop5.html - updated to go back to january

[15:35] *** ssutch_ left
[15:35] *** kjs_ joined
[15:35] *** FROGGS left
[15:37] <b2gills> I think in something like  `@array.map( sub ($a,$b) returns Int { $a + $b } )` map could check the .returns method of the sub to help determine that the resultant list would have the same .infinate value as the @array.

[15:41] <b2gills> and it would be good if `@array.map(*+*)` could too. 

[15:43] *** Kaliber46 left
[15:51] *** tinyblak joined
[15:53] *** kjs_ left
[15:53] <moritz> b2gills: that's not quite sound reasoning

[15:54] <moritz> b2gills: and infinite list can be mapped with a sub that returns Int, and returns a finite list by calling "last"

[15:56] <gtodd> see RT #122810

[15:56] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122810

[15:56] <gtodd> moritz: I wrote a "test" that works for that bug

[15:57] *** FROGGS joined
[15:58] <gtodd> moritz: well something that fails for the old build and works for post jnthn fix to not flatten args to bags

[15:59] <gtodd> errrm Bags.new

[15:59] <moritz> gtodd: does it need anything more than the bag() call?

[15:59] <b2gills> moritz: in the general case yes. Perhaps the compiler can annotate the sub indicating it doesn't appear to do things like that

[16:01] *** Mso150_u joined
[16:01] *** fhelmberger left
[16:03] *** Ben_Goldberg joined
[16:04] *** ghostlin_ left
[16:05] *** BenGoldberg left
[16:05] *** Ben_Goldberg is now known as BenGoldberg

[16:05] <gtodd> moritz: it builds a big array as per your hint/recipe from yesterday ... but I have no idea where to put it or if the test is really needed in this case or not ... since it fails  which then just confirms his fix (??)  maybe  roast/S03-operators/bag.t ?

[16:06] <b2gills> moritz: Perhaps it is rather far off before such a minor optimization is worthwhile

[16:06] <gtodd> moritz:  I had something like this:

[16:06] <gtodd>   lives_ok { (bag @large_arr.words).pairs.sort(*.value).reverse[^5] } , "large array goes into a bag";

[16:07] <gtodd> with  ....   my @large_arr = ('a'...*)[^50000] ;   in there somewhere

[16:07] *** bjz left
[16:07] *** bjz joined
[16:09] *** ssutch_ joined
[16:10] <[Coke]> https://github.com/mrhdias/perl6-GD/issues/3 - GD build busted.

[16:12] <gtodd> moritz:  here it would fail at ^49151 ...   largish, but I thought the test should really be more to see that Bags can handle a large array as args .... now that jnthn made ir so Bag args aren't flattened that fixes the issue but it's not what we'd want test for. This issue could have been Moar backend related (this wasn't breaking under jvm or parrot ) 

[16:13] *** jerrycheung left
[16:13] <FROGGS> [Coke]: mrhdias is not very active btw

[16:15] *** kaleem joined
[16:16] <gtodd> moritz: I will see if I can simplify the failing case ... and then I guess make a pull request on bag.t ?

[16:17] <moritz> gtodd: or push it directly... what's your github username?

[16:18] <gtodd> grtodd likely :-)

[16:20] <moritz> gtodd: then you can already push directly to perl6/roast

[16:22] <gtodd> ok thanks

[16:25] *** erkan left
[16:27] *** tinyblak left
[16:28] <[Coke]> (duplicate RTs) there i s a way to combine multiple RTs into a single ticket.

[16:28] *** yeahnoob left
[16:28] *** pmurias left
[16:28] *** lsm-desktop left
[16:30] <moritz> "Links" -> "Merge into"

[16:31] *** kaare_ left
[16:39] *** lsm-desktop joined
[16:40] *** tinyblak joined
[16:40] *** SamuraiJack joined
[16:43] *** virtualsue left
[16:48] *** ab5tract joined
[16:48] <ab5tract> ahoy #perl6!

[16:48] <FROGGS> hi ab5tract 

[16:49] <ab5tract> i'm currently hacking on a small HTML parsing library

[16:50] <ab5tract> and just wanted to double check that i am not duplicating efforts

[16:51] <FROGGS> I am working on XML::LibXML wich can do that too

[16:51] *** Psyche^ left
[16:52] <tony-o> i started on an XML::LibXML because i saw a squirrel ;-)

[16:52] <tony-o> and quit because^

[16:52] *** Psyche^ joined
[16:52] <FROGGS> *g*

[16:52] <tony-o> there is a pp6 HTML Parser tho

[16:52] <tony-o> and i'm happy to take pulls ab5tract 

[16:53] <tony-o> or if you rewrite it better i'll transfer the repo to you 

[16:54] <tony-o> ab5tract: https://github.com/tony-o/perl6-html-parser-xml

[16:54] <dalek> roast: 6cb7067 | moritz++ | S03-operators/misc.t:

[16:54] <dalek> roast: fix test plan for S03-operators/misc.t

[16:54] <dalek> roast: 

[16:54] <dalek> roast: a test was removed in 2b143b6f, so need to decrease the plan too

[16:54] <dalek> roast: review: https://github.com/perl6/roast/commit/6cb70671e3

[16:56] <[Coke]> 12:54 < [Coke]> yay, GD fixed.

[16:56] <[Coke]> 12:55 < [Coke]> looks like someone else submitted a patch for one of the issues back on Jun 10

[16:56] <[Coke]> 12:55 < [Coke]> we should probably change the modules version to point elsewhere, I guess.

[16:56] <[Coke]> 12:56 < [Coke]> or talk it about it, anyway

[16:57] *** erkan joined
[16:58] *** erkan left
[16:59] *** DarthGandalf left
[16:59] *** vendethiel joined
[17:01] *** erkan joined
[17:01] *** erkan left
[17:01] *** erkan joined
[17:01] *** kurahaupo left
[17:01] *** sam__ joined
[17:01] *** DarthGandalf joined
[17:02] <[Coke]> FROGGS: if someone reports a bug to star instead of RT, I'd probably move the bug myself and make them a watcher and put a reference in the star ticket. 

[17:02] <[Coke]> (ideally) ; we don't make it easy for people to figure out where to go.

[17:02] <[Coke]> (I mean, unless it's already someone we know

[17:03] *** ssutch left
[17:03] <FROGGS> [Coke]: I had done that if it was somebody unknown/new, aye

[17:03] <ab5tract> tony-o: thanks for the link

[17:05] <ab5tract> i have something slightly different in mind

[17:05] <tony-o> whatre you up to?

[17:07] <ab5tract> i was thinking of a simple interface that can be used for testing or otherwise munging about with html structures

[17:07] <tony-o> what kind of testing?

[17:08] <timotimo> .tell japhb do you have a good idea for a design that'd let us cover moarvm rakudos before the configure.pl unification?

[17:08] <yoleaux> timotimo: I'll pass your message to japhb.

[17:08] <ab5tract> you could use it to wire up content tests, presence-of-tags tests, attribute values, etc

[17:08] <tony-o> https://github.com/supernovus/perl6-xml-query/

[17:08] <tony-o> there is that one, it sounds like yours is slightly different tho

[17:09] <tony-o> i wrote the html parser so i could plug in html to that module ^

[17:09] <ab5tract> yes, but not much i think

[17:09] <ab5tract> ah, i see :)

[17:09] <tony-o> then i wrote web scraper so i could scraper the webs :-)

[17:10] *** colomon joined
[17:10] <tony-o> https://github.com/tony-o/perl6-web-scraper

[17:11] <ab5tract> nice one

[17:11] <tony-o> xpath would be a much welcomed module

[17:11] <ab5tract> i have a similar plan

[17:11] <tony-o> whether it was PP or lib

[17:11] <FROGGS> XML::LibXML would have xpath support

[17:12] <ab5tract> sorry, i'm not grokking PP yet

[17:12] <tony-o> pure perl

[17:12] <ab5tract> ah

[17:12] <tony-o> FROGGS: forgot about that, 

[17:13] * vendethiel tried to parse XML yesterday using p6, but eventually fell back to ruby...

[17:13] <ab5tract> FROGGS: how is that going? NativeCall looks super slick, but i haven't gotten a chance to use it yet

[17:13] <vendethiel> though all my other text-processing scripts of that day were written in p6.

[17:14] <FROGGS> ab5tract: nicely, look at:

[17:14] <FROGGS> https://github.com/FROGGS/p6-XML-LibXML/blob/master/lib/XML/LibXML/CStructs.pm

[17:14] *** tinyblak_ joined
[17:14] <FROGGS> and https://github.com/FROGGS/p6-XML-LibXML/blob/master/lib/XML/LibXML/Parser.pm

[17:14] *** mberends joined
[17:15] <FROGGS> I wanna make 1:1 bindings in the CStructs.pm without much Perl 6 magic, and all the sugar in their packages

[17:15] <FROGGS> or rather classes

[17:15] <ab5tract> makes sense to me

[17:15] <tony-o> does that work so far ?

[17:15] <dalek> roast: d720ab5 | (Graham Todd)++ | S03-operators/bag.t:

[17:15] <FROGGS> ideally one could autogenerate the CStructs.pm, at least partial

[17:15] <dalek> roast: Ensure bag() can take a large Array as argument.

[17:15] <dalek> roast: review: https://github.com/perl6/roast/commit/d720ab5371

[17:15] *** tinyblak left
[17:15] <FROGGS> tony-o: I think so

[17:16] <tony-o> the struct thing was failing when i tried but that was months ago

[17:16] <FROGGS> tony-o: nowadays we have nativecast support, that helps a lot

[17:17] <tony-o> ah

[17:17] <ab5tract> man, NativeCall is wild. perl 6 is totally 'butterflies all the way down'

[17:17] <FROGGS> yeah :o)

[17:17] <ab5tract> loving it

[17:17] <FROGGS> I really wanna steal more stuff from JNI/JNA

[17:17] <ab5tract> i program p5 for my day job

[17:17] <ab5tract> and i love it too

[17:17] <ab5tract> but perl 6 is really special

[17:17] <FROGGS> like adding .alloc and .free to OpaquePointer

[17:17] <ab5tract> "perl without borders"

[17:18] <FROGGS> that's an easy task... but time is limited

[17:18] <tony-o> lol

[17:20] <dalek> perl6-most-wanted: 2e991de | tony-o++ | most-wanted/modules.md:

[17:20] <dalek> perl6-most-wanted: Update modules.md

[17:20] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/2e991dea30

[17:20] <timotimo> FROGGS: but for that you'd need the sizeof the thing you're representing

[17:20] <timotimo> which is, to my knowledge, what we wanted to avoid doing in the first place

[17:21] <gtodd> moritz: FROGGS: timotimo:  hope that was ok --> https://github.com/perl6/roast/commit/d720ab5371 just trying to learn the process without breaking anything

[17:21] <FROGGS> timotimo: aye

[17:21] <timotimo> m: say ("a"...*)[^10]

[17:22] <camelia> rakudo-moar 85c4c0: OUTPUT«a b c d e f g h i j␤»

[17:22] <FROGGS> timotimo: NativeCall can unpack into a CStruct, so we must be able to calc its size

[17:22] <timotimo> FROGGS: other than that, you could just use malloc and free. except if you're in C++ land ...

[17:22] <timotimo> what? it is? how is that even possible without the .h file?

[17:23] <gtodd> plus I want masak's cool wordcount golf to continue to work on massive numbers of text files ;-)

[17:23] <timotimo> gtodd: at first glance, that commit looks good

[17:23] <timotimo> fwiw, i've committed at least 20 separate commits that'd break the plan >_<

[17:23] *** SamuraiJack left
[17:24] <FROGGS> timotimo: we never have the .h file when we have a native sub that unpacks into a CStruct

[17:24] <timotimo> em, what?

[17:24] <timotimo> how does a native sub unpack? into a cstruct? huh?

[17:25] <FROGGS> class Foo is repr('CStruct') { has int8 $foo } <-- we know how this is laid out in memory

[17:25] <tony-o> does ruby do logging modules right?  is there a good perl one i can port to p6?

[17:25] <FROGGS> we know the offsets for every attribute

[17:25] <japhb> botsnack

[17:25] <yoleaux> 14:58Z <timotimo> japhb: when we are fast enough or use a sufficiently high --enough-time, won't the benchmarks that do native integer loops overflow their counter and infinitely loop?

[17:25] <yoleaux> 17:08Z <timotimo> japhb: do you have a good idea for a design that'd let us cover moarvm rakudos before the configure.pl unification?

[17:25] <timotimo> FROGGS: yeah, but if we have a "is repr('Opaque

[17:25] <timotimo> Pointer') the point to it is that we don't have the has int8 $foo

[17:26] <timotimo> it's opaque, that's what makes it nice to have

[17:26] *** ssutch_ left
[17:26] <FROGGS> timotimo: that's true

[17:26] <timotimo> but it's also impossible to allocate an instance of that thing without knowing the size itself

[17:26] <FROGGS> timotimo: but do we talk about that right now?

[17:26] <timotimo> i thought you were talking about that?

[17:26] <FROGGS> no

[17:26] <timotimo> you wanted to add .alloc and .free to OpaquePointer

[17:26] <FROGGS> true

[17:27] *** kaleem left
[17:28] *** kaleem joined
[17:28] <FROGGS> pseudodcode: class Foo is repr('CStruct') { has int8 $foo }; my $p = OpaquePointer.malloc( Foo.size-of ); then pass it around or so

[17:28] <japhb> timotimo: If something manages to overflow a 64 bit int during a benchmark run, I think we'll be over the moon with joy.  Remember, if you were running the benchmark on a CPU core that could do 2 ** 32 ops per second, you'd still take 2**31 seconds to overflow a signed counter.  That's a LONG DAMN TIME.  Now 32-bit testing ... yeah, it's plausible we could get a native empty loop running so fast we'd have troubles with overflowing 2 ** 31.

[17:28] *** kaleem left
[17:29] <japhb> timotimo: I don't understand your other question.  Context?

[17:29] <FROGGS> timotimo: and .free in case we get a piece of mem from C land *we* are responsible for

[17:30] *** ssutch joined
[17:30] <timotimo> japhb: versions of rakudo-moar before 2014.01 require a different set of build steps to compile

[17:31] <japhb> Oh, I see, yes, that's an issue.

[17:31] <japhb> Are versions before 2014.01 sufficiently feature-complete as to be able to run the whole benchmark suite?

[17:32] <gtodd> timotimo: ok thanks 

[17:32] <japhb> (That was a known issue, BTW, I just figured 2014.01 was a defensible stake in the ground anyway, so it got deprioritized)

[17:32] <FROGGS> timotimo: also stuff like memset might be useful to have

[17:32] *** prevost left
[17:32] <FROGGS> timotimo: though, I don't wanna add 100 moarvm+nqp ops for that...

[17:33] <gtodd> everyone has a good weekend ... it's supposed to be 25+ degrees and sunny here  :)

[17:33] <gtodd> p6++

[17:33] <timotimo> japhb: not 100% sure

[17:33] <gtodd> o/

[17:33] *** gtodd left
[17:33] <ab5tract> se of uninitialized value of type Any in string context  in any  at src/Perl6/World.nqp:1702 

[17:34] <ab5tract> does this error look familiar to anyone?

[17:34] <timotimo> FROGGS: C compilers already have stuff like "this code looks like it could be replaced my a memset"; we could do this in the jit, too.

[17:34] <japhb> timotimo: you can use bench to extract, then go in and compile manually, then continue testing as normal.  All that's borken for old versions is `bench build`

[17:36] <FROGGS> timotimo: I'll make sure to ask about details before starting to work on that then :o)

[17:36] <FROGGS> for*

[17:38] *** Alina-malina left
[17:38] <timotimo> ok

[17:39] *** Alina-malina joined
[17:46] *** colomon left
[17:47] *** lichtkind joined
[17:48] <ab5tract> tadzik++; #thanks for rakudobrew !

[17:50] <timotimo> aye, rakudobrew is nice

[17:51] *** virtualsue joined
[17:52] *** colomon joined
[17:54] *** FROGGS[mobile] left
[17:55] <timotimo> japhb: that's a good idea, i'll do that later today and make some older benchmark runs available in the history comparison thingie

[17:55] <timotimo> maybe i'll add parrot, too

[17:56] <ab5tract> timotimo: i think parrot would be cool to see on there

[17:56] <ab5tract> are you covering niecza?

[17:56] <japhb> (disentangled, composable UI design)++

[17:56] <timotimo> no, i couldn't build it the last time i tried

[17:56] <timotimo> AFK for a bit

[17:56] <ab5tract> :(

[17:56] <japhb> ab5tract: niecza had been working for quite a while, but I think at some point it stopped working on newer mono/.NET

[17:57] <ab5tract> if it were working, how far behind rakudo is it at this point?

[17:57] <dalek> modules.perl6.org: ea26fb6 | asb-cpan++ | web/ (2 files):

[17:57] <dalek> modules.perl6.org: added search box and legend

[17:57] <dalek> modules.perl6.org: 

[17:57] <dalek> modules.perl6.org: * added some sort of limited search box using lustjs

[17:57] <dalek> modules.perl6.org: * added icon legend at the bottom of the table

[17:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/ea26fb6796

[17:58] <dalek> modules.perl6.org: 22c9446 | asb-cpan++ | web/README:

[17:58] <dalek> modules.perl6.org: added some details about the github token

[17:58] <dalek> modules.perl6.org: 

[17:58] <dalek> modules.perl6.org: I didn't know about GitHub tokens. I do now and as the script requires

[17:58] <dalek> modules.perl6.org: such a token, we should mention it somewhere.

[17:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/22c9446a09

[17:58] <dalek> modules.perl6.org: 713089c | moritz++ | web/ (3 files):

[17:58] <dalek> modules.perl6.org: Merge pull request #4 from asb-capfan/master

[17:58] <ab5tract> for a while it was ahead in a few areas

[17:58] <japhb> There are a few things it still does better than Rakudo, but I'd say it would be behind on quite a few things -- probably could do most of the perl6-bench suite, though.

[17:58] <japhb> (And current perl6-bench is much more resilient to a compiler failing individual tests, as long as it doesn't infiniloop)

[17:59] <ab5tract> that's good :)

[17:59] <ab5tract> i'm really interested to see the historical data

[18:00] <ab5tract> the evolution of rakudo over time, as told through benchmarks :)

[18:00] <japhb> :-)

[18:00] <PerlJam> sounsd like a good talk for YAPC or something  :)

[18:00] <PerlJam> maybe a lightning talk

[18:01] <ab5tract> PerlJam: i am stewing on a presentation about the history of perl

[18:02] <ab5tract> through the context of "perl" as i understand the philosophy, community, etc

[18:02] <ab5tract> so being able to have such an illustration would be great when discussing specifically the 'rakudo' corner of the perliverse

[18:03] <ab5tract> (oh, and i count python, ruby, and php as all perls ;)

[18:03] <lichtkind> jnthn: ping

[18:04] <nwc10> lichtkind: I believe that he's gone to bed.

[18:04] <lichtkind> thanks

[18:04] <PerlJam> speaking about benchmarks .... I remember a time I was leery of Perl 5 because it was slower than Perl 4.  That seems so ridiculous today :)

[18:04] <ab5tract> won't spend much time on them, but discussing them provides a very smooth segway into perl 6 syntax ;)

[18:04] <lichtkind> are there mahor changes upcoming the next weeks ?

[18:05] <moritz> lichtkind: I know that lizmat++ is working on some IO changes

[18:05] <moritz> lichtkind: dunno if they qualify as "mahor"

[18:06] <ab5tract> ah, i was not around for that transition! i found perl around 5.004, when i was 15 ... my the time has passed ...

[18:09] *** lichtkind left
[18:10] *** lichtkind joined
[18:10] <[Coke]> FROGGS++ # thanks for bugmongering

[18:10] <timotimo> actually, 2013.12 didn't have moar support

[18:11] <japhb> timotimo: Ah, I thought you were looking into that past to compare against old r-j or r-p

[18:12] <timotimo> yeah, i thought so, too ...

[18:12] *** sqirrel_ joined
[18:12] <timotimo> well, anyway ... i'll do parrot and jvm runs for this evening

[18:12] <timotimo> i'll have a guest crash on my couch over night, so i won't be running the desktop over night

[18:13] <japhb> heh

[18:13] <japhb> So might as well spin up the CPUs and provide a space heater for your guest?  ;-)

[18:13] <timotimo> sadly it also provides a space noisifier

[18:14] <japhb> (quiet computing)++

[18:15] * japhb fondly remembers the sudden piece when he got his first workstation with shock mounted everything and wide-bore slow spinning fans ... aaaah.

[18:15] <japhb> *peace

[18:16] <timotimo> oooh

[18:22] <dalek> star: 2a32ff7 | (Tobias Leich)++ | docs/announce/2014.09.md:

[18:22] <dalek> star: add release announcement for 2014.09

[18:22] <dalek> star: review: https://github.com/rakudo/star/commit/2a32ff7bae

[18:24] <dalek> star: 5a050f0 | (Tobias Leich)++ | README:

[18:24] <dalek> star: update release number in README

[18:24] <dalek> star: review: https://github.com/rakudo/star/commit/5a050f0d1c

[18:25] *** molaf_ joined
[18:26] <timotimo> building so many rakudo-parrots now ...

[18:26] *** gfldex joined
[18:28] <ab5tract> it seems that on moar i cannot do this when defining a class: has $!answer is Bool;

[18:28] *** molaf left
[18:28] <ab5tract> nor in method signatures

[18:28] <ab5tract> am i doing something wrong or is it broken?

[18:29] <FROGGS> m: class Foo { has $!answer is Bool; }

[18:30] <FROGGS> m: class Foo { has Bool $!answer }

[18:31] *** xinming left
[18:31] <camelia> rakudo-moar 85c4c0: OUTPUT«(timeout)»

[18:31] <camelia> rakudo-moar 85c4c0: OUTPUT«(timeout)»

[18:31] <FROGGS> m: say 1

[18:31] <camelia> rakudo-moar 85c4c0: OUTPUT«1␤»

[18:31] <FROGGS> m: class Foo { has Bool $!answer }

[18:31] <camelia> rakudo-moar 85c4c0: ( no output )

[18:31] <FROGGS> m: class Foo { has $!answer is Bool; }

[18:31] <camelia> rakudo-moar 85c4c0: OUTPUT«use of uninitialized value of type Any in string context  in any  at src/Perl6/World.nqp:1702␤␤Unhandled exception: No exception handler located for warn␤   at <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:print…»

[18:31] <ab5tract> that's the one

[18:31] <FROGGS> yeah... has Bool $!answer works though

[18:31] <ab5tract> ok

[18:32] <FROGGS> is 'has $!answer is Bool' supposed to wokr?

[18:32] <FROGGS> work*

[18:33] <ab5tract> FROGGS: perhaps not. i thought i had seen it somewhere though

[18:34] <lizmat> lichtkind: the main changes in the coming weeks are mainly under the hood

[18:35] <lizmat> 1. .IO now gives an IO::Path rather than an IO::Handle

[18:35] <FROGGS> under the hood but not "unter Dach und Fach" yet :o)

[18:36] <lizmat> 2. $*SPEC contains the default IO::Spec::xxx class for path munging

[18:36] <lizmat> 3. IO::Path object contains the $*SPEC at creation

[18:36] <lizmat> 4: IO::Handle contains the IO::Path at creation

[18:37] <lizmat> 5. IO::FileTestable role will be usurped by IO::Path

[18:37] <lizmat> 6. file tests on IO::Handle are handled by the IO::Path in it

[18:37] *** dwarring joined
[18:38] <lizmat> the result: faster file tests, faster IO::Handel.get and .getc (the won't need to check to open the handle at each invocation anymore)

[18:39] *** sqirrel__ joined
[18:39] <lizmat> FROGGS: no, I'm currently looking at a bug that makes perl6 build ok, but makes it hang on startup  :-(

[18:39] *** FROGGS_ joined
[18:39] <FROGGS_> :/

[18:40] *** FROGGS left
[18:40] <FROGGS_> I don't like this kind of bugs...

[18:40] <FROGGS_> I prefere a nice big explosion

[18:40] * lizmat neither

[18:40] <lizmat> yup

[18:40] *** FROGGS_ is now known as FROGGS

[18:40] *** AndChat-458964 joined
[18:40] *** sqirrel_ left
[18:40] *** Sqirrel left
[18:41] <lizmat> also, I found out that "handles" doesn't work in the settings :-(

[18:42] <ab5tract> FROGGS: on reflection, i don't think 'has .. is .. ' is in the spec

[18:43] <FROGGS> ab5tract: yeah, would be weird... 'is' outside of a package declaration is just a trait (a subroutine) and not about inheritance or types in general

[18:43] <ab5tract> so: just me doing it wrong then

[18:43] <ab5tract> right makese sense

[18:43] <FROGGS> like it would be confusion to mix it like: has $.foo is rw is Bool

[18:44] <ab5tract> FROGGS: yes that's it! i saw that syntax and assumed i could also use it for types

[18:44] <ab5tract> makes sense in attribute context it doesn't work

[18:50] *** bartolin joined
[18:50] *** Pleiades` joined
[18:51] <leont> lizmat: filetests sometimes make sense without an IO::Path

[18:51] <leont> Like in fstat and such

[18:51] *** Pleiades` left
[18:52] <lizmat> IO::Path is just an encapsulation of methods, really

[18:52] *** Pleiades` joined
[18:52] <lizmat> we don't want fstat just on strings

[18:52] <lizmat> "foo".IO.e is the shortest we can offer

[18:52] <lichtkind> lizmat are there also other changes?

[18:52] <lizmat> there's a new .all method on IO::Path

[18:53] <lizmat> that allows you to chain file tests:

[18:53] <lizmat> "foo".IO.all( <r w x> )  would be true for a file that you can read, write and execute

[18:53] <lizmat> actually: "foo".IO.all( <f r w x> )

[18:54] <BenGoldberg> What the f?

[18:54] <lizmat> to make sure it's a "file"

[18:54] <lizmat> and not a "directory" :-)

[18:54] <lizmat> "foo".IO.all( <d r w x> )  would be true for a directory with full access

[18:54] <BenGoldberg> Ok.  I just *had* to say that, though, it just came out... ;)

[18:55] *** psch joined
[18:55] *** Pleiades` left
[18:55] <leont> Apparently one of the reasons for PHP to skip version 6 is «Version 6 is generally associated with failure in the world of dynamic languages. PHP 6 was a failure; Perl 6 was a failure»

[18:56] *** Pleiades` joined
[18:56] <leont> :-/

[18:56] <japhb> lizmat, I thought leont was talking about wanting to do: my $foo = open("FOO"); say so $foo.all(< f r >);

[18:56] <leont> yes, what japhb said

[18:56] <lizmat> well, that will work too

[18:57] <leont> It makes sense for IO::Handle to be FileTestable but not a Path

[18:57] <psch> hi #perl6 o/

[18:57] <lizmat> because under the hood, the open() creates an IO::Path for you to be put inside the IO::Handle

[18:57] <leont> Some handles will not have a path, for example sockets

[18:57] <lizmat> why wouldn't a Path be FileTestable ?

[18:57] <[Coke]> Anyone mind if I make my fork the "official" one in the ecosystem? We've had some delays in original author's response to tickets. (pull request fixing a bug unfixed since June)

[18:57] <[Coke]> er, for "GD"

[18:58] <japhb> lizmat: OK, then how about: say so $*ERR.w

[18:58] <timotimo> leont: being called a failure by the PHP community is a strange feeling

[18:58] *** Pleiades` left
[18:58] <lizmat> japhb: lemme check that

[18:59] <timotimo> did they actually end up skipping version 6?

[18:59] <japhb> lunch &

[18:59] <nine> Darn...I think my Perl stack gets corrupted somewhere :/

[18:59] <[Coke]> psch: hi

[19:00] <psch> hi [Coke]

[19:01] <nine> When doing P6 -> call P5 function -> call P6 method -> call P5 function the latter ends up calling a P6 method again although it should only return 1;

[19:01] <psch> i'm still not settled, but wanted to drop by.  moving is more troublesome than was expected.

[19:02] <FROGGS> hi psch 

[19:02] <psch> hey FROGGS

[19:02] <lizmat> m: say $*ERR.w

[19:02] <psch> FROGGS: i've had a play with cglobals, and i'm impressed 

[19:02] <camelia> rakudo-moar 85c4c0: OUTPUT«Type check failed in binding $s; expected 'Cool' but got 'Any'␤  in sub substr at src/gen/m-CORE.setting:4043␤  in method is-absolute at src/gen/m-CORE.setting:14156␤  in method rel2abs at src/gen/m-CORE.setting:14271␤  in method rel2abs at src/gen…»

[19:02] <FROGGS> psch: why impressed?

[19:03] <lizmat> japhb: that *will* work in the future  :-)

[19:03] <FROGGS> psch: by the shortness of the patch?

[19:03] <FROGGS> :o)

[19:03] <psch> FROGGS: because it works and i'm easily impressed :)

[19:03] <FROGGS> *g*

[19:04] <psch> i've played around with building an autocomplete capable REPL via gnu-readline bindings, but doing that completely in p6 land is slow and cumbersome

[19:04] <lizmat> japhb: probably by poking a special IO::Path version into the IO::Handle.$!path slot

[19:05] <lizmat> leont: I'm still working on integrating the sockets...   suggestions welcome (see S16 and S32/IO)

[19:10] *** Mso150_u_n joined
[19:10] *** sqirrel__ left
[19:11] *** Mso150_u left
[19:17] <timotimo> psch: we need a lot more work to make the repl awesome

[19:18] <timotimo> an almost fundamental re-think of the way we do the "pieces of code at a time"

[19:18] <psch> timotimo: yeah, i was really just exploring

[19:18] <psch> in a rather high-level, messy way

[19:18] <timotimo> the "nested scopes" thing ... naaah

[19:19] *** darutoko left
[19:22] <timotimo> japhb: how do you feel about putting timestamps in front of the outputs of p6bench?

[19:23] <japhb> timotimo: To give you an idea how it's progressing?

[19:23] <timotimo> and how long things take and such

[19:23] <timotimo> also to help figure out "is this hanging?"

[19:23] <timotimo> "this one has been running for 10 hours now, i don't think it'll finish" etc

[19:24] <japhb> No particular objection.  I thought of something like that a while ago, realized I was just patching over a problem at the time (certain tests running egregiously long), and set about to make that better.  But since I've plucked the LHF on that front, go right ahead

[19:24] *** bjz left
[19:24] *** bjz_ joined
[19:24] *** ssutch left
[19:25] <timotimo> mhm

[19:25] <timotimo> actually ... how do you feel about printing status lines that overwrite themselves with \r whenever something changes?

[19:26] <timotimo> because time -v spams enormously, but without -v it's not as much info as i'd like to have

[19:26] <lizmat> timotimo: only if .t is true, though

[19:26] <timotimo> that's for "is stdout a tty"?

[19:26] *** kurahaupo joined
[19:27] <lizmat> yes, if there is a human watching most likely

[19:27] <timotimo> m: say $*OUT.t

[19:27] <camelia> rakudo-moar 85c4c0: OUTPUT«Cannot find method 'isatty': no method cache and no .^find_method␤  in method t at src/gen/m-CORE.setting:15125␤  in block <unit> at /tmp/KMBQmTd11c:1␤␤»

[19:27] <timotimo> :o

[19:28] <timotimo> i get that locally, too

[19:28] <lizmat> yup

[19:28] <lizmat> I didn't change that yet, I don't think

[19:29] <lizmat> "self.opened && nqp::p6bool($!PIO.isatty)"

[19:29] <japhb> timotimo: Well, we could do the \r trick -- but then we have to do cleanup and trimming when the new line is shorter than the old.  I avoided that in favor of simplicity.  I still like the idea of just timestamps.  Or perhaps turn verbosity into levels (-v, -v -v, etc. in Perl 5 parlance)

[19:30] <timotimo> ah

[19:30] <japhb> lizmat: re: stuffing a magic IO::Path into IO::Handle!path when the handle wasn't generated from a file seems like a serious design smell.  When you can be checking r/w bits on pipes, sockets, and other beasties, pathed filesystems are just one case among many, not the primary case.

[19:31] <timotimo> well, we could just have the "39/64 testing split_string_constant ..." in a line and below that we have a line that displays the current scale and the how many'th time we're running this exact iteration this is

[19:32] <lizmat> japhb: then I suggest you have a look at S16 | S32/IO  and comment  :-)

[19:32] <nine> Ok, I now reduced it to P6 -> call P5 function -> XS -> call P5 function which loops endlessly

[19:32] <lizmat> so far, *nobody* has made *any* comment about it

[19:32] <timotimo> ah, finally that test has advanced to the next one

[19:32] <lizmat> japhb: I only know that the current implementation is a gnarly web of interdependencies

[19:33] <japhb> timotimo: Sure, that could work -- but remember that you have to be careful not to let TTY/terminal emulator scrolling delays and stdio buffer flushing alter the timing of short runs, or you turn the left side of every graph to garbage.

[19:33] <lizmat> and is most definitely sub-par performance wise (especially $handle.getc, which at the moment check whether the handle is opened or not *every* time)

[19:33] <timotimo> oh, hmm.

[19:35] <japhb> lizmat: My apologies.  My work has been approximately as time consuming as jnthn's (this week I've simultaneously had oncall rotation, ticket duty, and performance reviews to write, so basically zero coding time at all, and precious little of *any* personal time until today.)

[19:35] <lizmat> japhb: no need to apologize

[19:35] <lizmat> there aren't many people in the luxury situation that I'm in...

[19:35] <japhb> And I'm off on vacation for a few days after this, so ... I probably wouldn't be able to review until late next week.

[19:35] <japhb> True.

[19:36] <moritz> bartolin++ # tests, closing lots of tickets

[19:36] <lizmat> japhb: so, enjoy your vacation

[19:36] <colomon> lizmat++

[19:36] <yoleaux> 25 Sep 2014 20:09Z <moritz> colomon: the Nonogram failure you see seems to be a genuine MoarVM spesh+inlining bug

[19:36] <japhb> I plan to.  :-)

[19:36] *** prevost joined
[19:37] <lizmat> meanwhile I'll have leont and others preventing me from making a bigger mess of it than it already is  :-)

[19:37] <dalek> modules.perl6.org: 24c0a75 | moritz++ | web/build-project-list.pl:

[19:37] <dalek> modules.perl6.org: copy js folder to the output folder

[19:37] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/24c0a75d35

[19:39] *** ssutch joined
[19:43] <dalek> modules.perl6.org: 13d2664 | moritz++ | web/build-project-list.pl:

[19:43] <dalek> modules.perl6.org: do not try to copy now-dead medals

[19:43] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/13d266465c

[19:45] <ab5tract> colomon: poke :)

[19:45] *** Psyche^_ joined
[19:45] *** Psyche^ left
[19:46] <colomon>  ab5tract: not a good time, alas.  sorry!  e-mail me at my id at gmail.com ?

[19:46] <ab5tract> sure

[19:47] <colomon> ab5tract++

[19:49] <lizmat> FROGGS: found the loop

[19:49] <lizmat> initializing $*CWD needed $*CWD  :-)

[19:50] <FROGGS> *g*

[19:50] <mberends> lizmat++

[19:51] *** colomon left
[19:53] *** ab5tract left
[19:56] <japhb> There's something philosophical about needing to know where you are in order to figure out where you are ....

[19:57] <lizmat> yeah, that was not lost on me... :-)

[19:58] *** Ven joined
[19:58] <tadzik> ab<TAB><TAB> :(

[19:58] <tadzik> I missed satisfied customer

[19:59] *** colomon joined
[19:59] <lizmat> m: say nqp::cwd()

[19:59] <camelia> rakudo-moar 85c4c0: OUTPUT«/home/p6eval␤»

[19:59] <lizmat> p: say nqp::cwd()

[19:59] <camelia> rakudo-parrot 85c4c0: OUTPUT«/home/p6eval␤»

[20:00] <lizmat> huh, locally I get something else ?

[20:01] <lizmat> *sigh*   -e helps  :-)

[20:02] <colomon> also, isn't your directory path different?  ;)

[20:02] <FROGGS> lizmat: that sounds like it is time for something else :o)

[20:02] <lizmat> :-)  yes, perhaps

[20:04] * lizmat goes off for a fresh cuppa

[20:10] *** xragnar_ joined
[20:10] *** xragnar is now known as Guest95010

[20:10] *** Guest95010 left
[20:10] *** xragnar_ is now known as xragnar

[20:11] <lichtkind> lizmat: thank you i hope we can have a talk the next days

[20:11] *** Pleiades` joined
[20:14] <dalek> star: 5eadd16 | (Tobias Leich)++ | docs/announce/2014.09.md:

[20:14] <dalek> star: update release announcement

[20:14] <dalek> star: review: https://github.com/rakudo/star/commit/5eadd16141

[20:14] <Ven> .seen cognome

[20:14] <yoleaux> I saw cognome 25 Sep 2014 21:55Z in #perl6: <cognome> lizmat++, I am trying to keep pace with your changes. In S32/IO.pod, should not the @text be slurpy?

[20:14] <lizmat> FROGGS++

[20:15] <lizmat> .seen cognome

[20:15] <yoleaux> I saw cognome 25 Sep 2014 21:55Z in #perl6: <cognome> lizmat++, I am trying to keep pace with your changes. In S32/IO.pod, should not the @text be slurpy?

[20:15] <lizmat> selfupping karma  :-)

[20:15] <Ven> take it :)

[20:16] <dalek> rakudo/nom: 1613b0b | (Elizabeth Mattijsen)++ | src/core/Env.pm:

[20:16] <dalek> rakudo/nom: Remove old parrot wart

[20:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1613b0bbc6

[20:16] <[Coke]> ^^ fixing that would get you more karam!

[20:16] <[Coke]> ... karma.

[20:17] <lizmat> .oO( karamba karma! )

[20:20] *** ssutch left
[20:20] *** njmurphy joined
[20:20] <[Coke]> ... ay karmaba.

[20:21] <tadzik> ayy lamo

[20:21] <tadzik> er, *

[20:23] <itz> l

[20:41] *** Ven left
[20:41] *** kurahaupo left
[20:46] *** colomon left
[20:46] *** denis_boyun joined
[20:53] *** denis_boyun left
[21:01] <FROGGS> https://github.com/coke/rakudo-star-daily/commit/6b5b81dd608c4f9b357193224d7e4bc0d8eaccae :o(

[21:01] <FROGGS> [Coke]: have you seen that already?

[21:01] <FROGGS> +===SORRY!===

[21:01] <FROGGS> +I see a .git directory here -- you appear to be trying

[21:01] <FROGGS> +to run Configure.pl from a clone of the Rakudo Star git

[21:01] <FROGGS> +repository.

[21:02] *** rindolf joined
[21:02] <rindolf> Hi all. Shanah Tovah & Gmar Hatimah Tovah to all Perl6ers.

[21:03] <FROGGS> o/

[21:06] *** noganex_ left
[21:09] *** muraiki_ joined
[21:10] *** muraiki left
[21:16] *** Ven joined
[21:16] *** ssutch_ joined
[21:16] *** noganex joined
[21:18] <[Coke]> FROGGS: nope. that sounds new.

[21:19] <[Coke]> btw, https://github.com/coke/rakudo-star-daily/blob/6b5b81dd608c4f9b357193224d7e4bc0d8eaccae/log/MoarVM-build.log would be a much easier to read version of "there's a problem" :)

[21:19] <[Coke]> note that when I build rakudo star, I believe I cheat slightly.

[21:19] <[Coke]> (at least, I did when it was just parrot)

[21:21] * [Coke] kicks off another build...

[21:23] *** Mso150_u_n left
[21:24] <[Coke]> ./bin/star.sh: 60: cd: can't cd to MODULES.txt

[21:24] <[Coke]> perl6 tools/build/panda-state.p6 >>MANIFEST

[21:26] <[Coke]> Looks like you broke it with 54b69eba8141785d1839ade4e161e7d06fb6a800

[21:26] *** Mso150 joined
[21:26] <[Coke]> Is there really a perl6 available in the build process at this point?

[21:26] <[Coke]> (if so, use the full path)

[21:30] *** psch left
[21:35] *** Mso150_l joined
[21:37] *** Mso150 left
[21:39] *** Ven left
[21:44] <rindolf> FROGGS: what's up?

[21:47] <lizmat> FROGGS++ just did a Rakudo * release, what did you do, rindolf ?

[21:49] <rindolf> lizmat: I've posted to /r/writing about challenges facing me in my quest to become the next big author and got quite a few comments.

[21:50] <rindolf> lizmat: and I also came to Emma Watson's defence on /r/TheRedPill.

[21:50] <rindolf> People accused her of being a hypocrite.

[21:51] <lizmat> I'm sure that Emma is really happy with that

[21:51] <rindolf> https://bugzilla.mozilla.org/show_bug.cgi?id=981378 - and this bug got closed despite the fact  that it's real. the mozilla.org people are unbelievable.

[21:52] <rindolf> lizmat: don't know if she noticed.

[21:52] <rindolf> I don't think she has a reddit.com presence.

[21:52] <rindolf> She's active on Twitter and Facebook though.

[21:54] *** telex left
[21:56] <lizmat> people close bugs without looking at them all the time

[21:56] <lizmat> the other day, that happened to FROGGS as well

[21:56] *** telex joined
[21:58] *** lichtkind left
[22:00] *** ggoebel2 left
[22:06] *** treehug88 left
[22:08] *** bartolin left
[22:11] *** gfldex left
[22:23] <lizmat> sleep&

[22:25] *** BenGoldberg left
[22:44] *** crncosta joined
[22:49] *** virtualsue left
[22:51] *** Pleiades` left
[22:54] *** jerrycheung joined
[22:57] *** Pleiades` joined
[23:12] <grondilu> std: my $x //= do { $x = 1; $x += rand }; say $x; # checking syntax

[23:12] <camelia> std fc92e1e: OUTPUT«ok 00:01 144m␤»

[23:38] *** nebuchadnezzar joined
[23:39] <tony-o> there any known bugs with nativecall & moar?

[23:40] <tony-o> ==> Building NativeCall

[23:40] <tony-o> Compiling lib/NativeCall.pm6 to mbc

[23:40] <tony-o> ===SORRY!===

[23:40] <tony-o> No registered operation handler for 'nativecallglobal'

[23:42] <arnsholt> I think global variables are only implemented on Parrot and JVM

[23:44] <[Coke]> tony-o: you need a newere moar.

[23:44] <tony-o> is that new in nativecall?

[23:44] <tony-o> i had it installed months ago

[23:44] <tony-o> [Coke]: building a new one now :-)

[23:44] <[Coke]> months is a SUPER long time in moar development.

[23:45] <tony-o> i rebuilt moar a few weeks ago

[23:45] <tony-o> just not nativecall

[23:45] <[Coke]> when you configure, try --enable-jit.

[23:45] <[Coke]> (unrelated, but faster)

[23:45] <[Coke]> weeks is probably only kind of a long time.

[23:45] <[Coke]> we don't have a tagging system yet where panda can grab the latest "approved" version for your rakudo or anything.

[23:46] <tony-o> when i run perl Configure?  I don't --enable-jit as an option

[23:46] <[Coke]> one sec.

[23:46] <[Coke]> perl Configure.pl --gen-moar --moar-option=--enable-jit --gen-nqp --backends=moar

[23:47] <[Coke]> assuming you build from a rakudo checkout.

[23:47] <tony-o> thank you

[23:47] <tony-o> i am

[23:55] <tony-o> [Coke]: that worked, ty

[23:58] *** BenGoldberg joined
