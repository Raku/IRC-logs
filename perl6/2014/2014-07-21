[00:01] *** nbrown left
[00:03] <avuserow> timotimo: I'm trying to fix that... so far finishing a test of the modules to see how painful they are. looks promising so far

[00:04] <avuserow> also it looks like rakudo.org doesn't mention any releases beyond April's R*. Does the Rakudo compiler release typically get mentioned there?

[00:04] *** kurahaupo joined
[00:06] <timotimo> no

[00:07] <timotimo> at some point a decision was made to announce the rakudo compiler releases only to the perl6.compiler mailing list as to not confuse outsiders 

[00:07] <avuserow> that makes sense

[00:09] <avuserow> I don't think I have a commitbit for rakudo. Can I just fork the rakudo/star repo and send PRs?

[00:11] <timotimo> hm, there was a CLA needed for one of the repos, i forgot which

[00:11] <timotimo> was that NQP?

[00:11] <avuserow> I think rakudo

[00:11] <timotimo> i think it was nqp because that used to be a part of parrot or something like that?

[00:11] <timotimo> but yeah, pull requests also work fine

[00:12] *** nbrown joined
[00:13] <avuserow> okay cool. I'll start down that path now and think about handling the CLA in the future

[00:23] *** BenGoldberg joined
[00:25] *** dayangkun joined
[00:27] *** ivanshmakov left
[00:32] *** ivanshmakov joined
[00:33] *** atroxaper joined
[00:37] *** atroxaper left
[00:41] *** xenoterracide_ left
[00:42] *** dmol left
[00:43] <avuserow> please review my star announcement draft: https://github.com/avuserow/star/blob/master/docs/announce/2014.07.md

[00:43] <avuserow> I'm not planning on doing the release proper for another day or two so it's okay to give me feedback tomorrow

[00:45] <avuserow> (I realize many people have probably just left for the evening, but that's typical of timezones)

[00:45] <timotimo> did you look at all rakudo releases between 04 and this one to collect the changes?

[00:45] <timotimo> usually the list of changes is a subset of the things that have actually changed

[00:46] <avuserow> oh, no I did not 

[00:46] <avuserow> I will do that, and filter out some of the less exciting changes then

[00:48] *** SevenWolf left
[00:48] <avuserow> did we want to add any modules to R* this time around?

[00:49] <avuserow> the 2014.05 changelog mentions v5 will soon be available as a part of R*

[00:54] <timotimo> if i recall correctly, froggs still has to pick up a lot of pieces to make v5 work on rakudo again after he switched it from being implemented in nqp to being implemented in perl6

[01:05] *** xinming_ joined
[01:05] *** anaeem1 joined
[01:07] *** xinming left
[01:09] *** anaeem1 left
[01:18] *** FROGGS__ joined
[01:21] *** Sqirrel left
[01:22] *** FROGGS_ left
[01:23] *** Akagi201 joined
[01:23] *** thou joined
[01:27] *** thou left
[01:35] *** kurahaupo left
[01:45] *** thilp joined
[01:50] *** klapperl joined
[01:53] *** klapperl_ left
[01:54] *** Sqirrel joined
[01:57] *** dayangkun left
[01:57] *** chenryn joined
[02:06] *** araujo joined
[02:12] *** noganex_ joined
[02:15] *** noganex left
[02:22] *** ventica joined
[02:34] *** atroxaper joined
[02:39] *** atroxaper left
[02:47] *** hoverboard left
[02:49] *** hoverboard joined
[02:54] *** jack_rabbit joined
[02:55] *** atroxaper joined
[03:06] *** dayangkun joined
[03:07] *** nbrown left
[03:10] *** jack_rabbit left
[03:11] *** thou joined
[03:14] *** raydiak left
[03:14] *** BenGoldberg left
[03:15] *** thou left
[03:20] <dalek> roast/S26-WHY: 74bb756 | (Rob Hoelz)++ | S26-TODO:

[03:20] <dalek> roast/S26-WHY: Notes notes notes

[03:20] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/74bb756de6

[03:20] <dalek> roast/S26-WHY: 97a1482 | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[03:20] <dalek> roast/S26-WHY: More leading doc parameter tests

[03:20] *** molaf left
[03:20] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/97a148219d

[03:55] *** xenoterracide_ joined
[04:00] *** xenoterracide_ left
[04:01] *** anaeem1 joined
[04:04] *** kaare_ joined
[04:05] *** anaeem1 left
[04:21] *** Vlavv left
[04:23] *** Vlavv joined
[04:27] *** raydiak joined
[04:28] *** btyler left
[04:40] *** kaare_ left
[04:44] *** ventica left
[04:57] *** Alina-malina left
[04:59] *** Alina-malina joined
[04:59] *** thou joined
[05:04] *** thou left
[05:09] *** virtualsue left
[05:13] *** kaare_ joined
[05:17] *** ventica joined
[05:24] *** woolfy joined
[05:25] *** dayangkun left
[05:25] *** dayangkun joined
[05:26] *** araujo left
[05:28] *** lizmat joined
[05:31] *** xragnar_ joined
[05:31] *** xragnar left
[05:31] *** xragnar_ is now known as xragnar

[06:05] *** dayangkun left
[06:07] *** kaleem joined
[06:07] *** woolfy left
[06:08] *** denis_boyun joined
[06:13] *** atroxaper left
[06:27] *** anaeem1_ joined
[06:29] <sergot> morning o/

[06:38] *** SamuraiJack joined
[06:39] *** [Sno] left
[06:46] *** Alina-malina left
[06:47] *** Alina-malina joined
[06:47] *** thou joined
[06:52] *** thou left
[06:52] <xiaomiao> btw - nqp seems to fail building  3rdparty/dyncall with newer gcc on linux

[06:52] <xiaomiao> the fix I've found is to hammer out a few of the gcc warnings-as-errors

[06:52] <xiaomiao> very fragile ...

[07:00] *** zengargo1le joined
[07:02] *** zengargoyle left
[07:08] *** dayangkun joined
[07:14] <FROGGS__> xiaomiao: what gcc are we talking about?

[07:14] <xiaomiao> FROGGS__: 4.8+ I think, 4.9 goes boom

[07:14] *** zakharyas joined
[07:14] <xiaomiao> sed -i -e 's/-Werror=missing-prototypes//' Makefile 

[07:15] *** dayangkun left
[07:15] <xiaomiao> sed -i -e 's/-Werror=missing-declarations//' Makefile

[07:15] <xiaomiao> sed -i -e 's/-Werror=strict-prototypes//' Makefile

[07:15] <xiaomiao> ^^ minimal dirty hackfix as those bits don't work anymore

[07:16] *** darutoko joined
[07:17] *** Ven joined
[07:17] <Ven> o/, #perl6 and beyond.

[07:17] <FROGGS__> hi Ven

[07:18] <FROGGS__> xiaomiao: that sounds like this is about nqp@parrot... I'm sure we find a better way than using sed :o)

[07:18] <xiaomiao> FROGGS__: the default cflags are too optimistic, I just carved away enough to make it compile

[07:18] <xiaomiao> not a "clean" fix by any means, but at least it doesn't fail :D

[07:27] *** dayangkun joined
[07:29] <Ven> m: my $a = "FooBar"; say $a ~~ tr/A..Z/a..z/;

[07:29] <camelia> rakudo-moar 97882c: OUTPUT«StrDistance.new(before => "FooBar", after => "foobar")␤»

[07:30] <Ven> Does this "just" takes the A..Z's index and get that same index on a..z ?

[07:34] <FROGGS__> Ven: yes

[07:34] <Ven> dascool. Powerful :-)

[07:34] *** pecastro left
[07:34] <FROGGS__> and I also love it how it gistifies...

[07:35] <FROGGS__> psch++ # right?

[07:35] <Ven> think so :-)

[07:45] *** nKiNG121 joined
[07:47] <Ven> uh, so even perl 5 has a "use overload"? Can I find a feature that perl 5 doesn't actually have ? (bad idea to ask this on #perl6, I guess)

[07:48] *** nKiNG121 left
[07:50] *** virtualsue joined
[07:52] *** Guest35753 left
[08:00] *** [Sno] joined
[08:02] *** ventica left
[08:03] *** hoverboard left
[08:13] *** psch joined
[08:14] <psch> hi #perl6 

[08:15] <psch> Ven: perl5 doesn't do 1:n transliteration, for example

[08:15] <psch> m: my $a = 'abc'.trans: ['a', 'b', 'c'] => ['a23', 'b23', 'c23']; $a.say

[08:15] <camelia> rakudo-moar 97882c: OUTPUT«a23b23c23␤»

[08:15] *** spider-mario joined
[08:16] <psch> (tr/// in neither does that, fwiw)

[08:16] *** fhelmberger joined
[08:16] <psch> that's the only thing i can recall off-hand though, and only because i've been near it recently

[08:18] *** ventica1 joined
[08:23] *** dakkar joined
[08:26] *** bowtie joined
[08:26] *** bowtie is now known as Guest20578

[08:29] *** dayangkun left
[08:32] *** dmol joined
[08:32] *** dayangkun joined
[08:35] <Ven> m: multi sub infix:<%> (Us $us, Them $them) is deep { mymod($us,$them) }

[08:35] <camelia> rakudo-moar 97882c: OUTPUT«===SORRY!=== Error while compiling /tmp/Za1m9lu31j␤Invalid typename 'Us' in parameter declaration.␤at /tmp/Za1m9lu31j:1␤------> multi sub infix:<%> (Us⏏ $us, Them $them) is deep { mymod($us,$t␤»

[08:35] <Ven> m: multi sub infix:<%> (Int $us, Int $them) is deep { 1 

[08:35] <camelia> rakudo-moar 97882c: OUTPUT«===SORRY!=== Error while compiling /tmp/tBs6ZJoP1Z␤Unable to parse expression in block; couldn't find final '}' ␤at /tmp/tBs6ZJoP1Z:1␤------> fix:<%> (Int $us, Int $them) is deep { 1⏏<EOL>␤    expecting any of…»

[08:36] *** thou joined
[08:37] *** brrt joined
[08:38] <Ven> I guess `is deep` is NYI

[08:39] *** Guest20578 left
[08:40] *** thou left
[08:42] *** robinsmidsrod left
[08:42] <nwc10> FROGGS__: what happened to your nqp/charrange branch?

[08:43] <FROGGS__> nwc10: got merged

[08:43] <nwc10> OK, I can't see dalek reporting that it was deleted

[08:43] <nwc10> merged as 1 commit?

[08:43] *** telex left
[08:43] <FROGGS__> nwc10: dalek does not show that

[08:43] <FROGGS__> as one commit, aye

[08:44] <FROGGS__> well, squished into one

[08:44] *** telex joined
[08:45] *** robinsmidsrod joined
[08:46] *** bowtie_ joined
[08:54] *** dayangkun left
[08:54] *** kurahaupo joined
[08:59] <masak> antenoon, #perl6

[09:01] *** pecastro joined
[09:02] *** brrt left
[09:11] *** virtualsue left
[09:12] *** dayangkun joined
[09:15] *** SamuraiJack left
[09:24] *** pmurias joined
[09:29] *** anaeem1_ left
[09:30] *** anaeem1_ joined
[09:37] <sergot> masak: o/

[09:43] *** pecastro left
[09:45] *** pecastro joined
[09:47] *** Psyche^_ joined
[09:51] *** Psyche^ left
[10:06] *** pmurias left
[10:08] *** virtualsue joined
[10:09] *** pecastro left
[10:11] *** pecastro joined
[10:12] *** brrt joined
[10:24] *** thou joined
[10:26] *** Ven left
[10:29] *** thou left
[10:30] *** chenryn left
[10:40] *** brrt left
[10:59] *** xenoterracide_ joined
[11:00] *** Ven joined
[11:00] *** chenryn joined
[11:05] *** chenryn left
[11:10] *** chenryn joined
[11:10] *** kurahaupo left
[11:32] *** dayangkun left
[11:32] *** colomon left
[11:40] *** mr-foobar left
[11:40] *** mr-foobar joined
[11:44] *** ponbiki left
[11:45] <dalek> nqp: 5027534 | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[11:45] <dalek> nqp: bump moar rev for char name aliases

[11:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/50275346a4

[11:45] <dalek> rakudo/nom: 8649121 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[11:45] <dalek> rakudo/nom: bump nqp/moar rev for char name aliases

[11:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/864912198c

[11:46] *** ponbiki joined
[11:46] *** ponbiki is now known as Guest99623

[11:47] *** kivutar joined
[11:48] <dalek> roast: 7bf2927 | (Tobias Leich)++ | S05-mass/named-chars.t:

[11:48] <dalek> roast: RT #122353 fudge LF,FF,CR,NEL tests for parrot/jvm only

[11:48] <dalek> roast: review: https://github.com/perl6/roast/commit/7bf29277d4

[11:48] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122353

[11:49] *** spider-mario left
[11:54] *** Ulti_ is now known as Ulti

[11:57] *** spider-mario joined
[11:58] *** chenryn left
[12:05] *** Guest99623 left
[12:08] *** colomon joined
[12:08] *** spider-mario left
[12:12] *** thou joined
[12:13] *** ponbiki_ joined
[12:16] *** Ven left
[12:17] *** thou left
[12:17] <dalek> rakudo-star-daily: d6be400 | coke++ | log/ (14 files):

[12:17] <dalek> rakudo-star-daily: today (automated commit)

[12:17] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d6be400a9b

[12:20] *** jnap joined
[12:33] *** Sqirrel left
[12:33] <dalek> nqp: 908d8a0 | (Tobias Leich)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[12:33] <dalek> nqp: [jvm] add char name lookup aliases (LF,FF,CR and NEL)

[12:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/908d8a0b3e

[12:33] <dalek> rakudo/nom: e56d94d | (Tobias Leich)++ | tools/build/NQP_REVISION:

[12:33] <dalek> rakudo/nom: bump nqp/jvm rev for char name aliases

[12:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e56d94da6d

[12:38] <dalek> roast: 2c677bc | (Tobias Leich)++ | S05-mass/named-chars.t:

[12:38] <dalek> roast: RT #122353 unfudge LF,FF,CR,NEL tests for jvm

[12:38] <dalek> roast: review: https://github.com/perl6/roast/commit/2c677bc9d5

[12:38] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122353

[12:43] *** xenoterracide_ left
[12:45] *** colomon left
[12:51] *** gfldex joined
[12:53] <dalek> roast/S26-WHY: e7f0ef2 | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[12:53] <dalek> roast/S26-WHY: Stop skipping WHEREFORE tests

[12:53] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/e7f0ef2d4b

[12:53] <dalek> roast/S26-WHY: f0a296a | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[12:53] <dalek> roast/S26-WHY: Fix a bad test

[12:53] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/f0a296add2

[12:53] *** atroxaper joined
[12:56] *** Akagi201 left
[13:10] *** guru joined
[13:10] *** guru is now known as Guest91352

[13:10] *** Guest91352 is now known as ajr_

[13:16] *** raiph joined
[13:16] *** colomon joined
[13:22] *** kaare_ left
[13:26] <cognominal> SOP?

[13:27] <cognominal> oops

[13:38] *** mr-foobar left
[13:39] *** SamuraiJack joined
[13:41] *** Akagi201 joined
[13:42] *** jnap left
[13:45] *** mr-foobar joined
[13:45] *** jnap joined
[13:52] *** FROGGS[mobile] joined
[14:01] *** thou joined
[14:03] *** jimmyz joined
[14:03] <jimmyz> > my $thread = Thread.start: { print 'hello'; } helloThread.new(app_lifetime => Bool::False, name => "<anon>") > $thread.run Unhandled exception: Cannot invoke null object

[14:04] <hoelzro> morning #perl6

[14:04] *** jimmyz left
[14:05] *** brrt joined
[14:05] *** thou left
[14:06] *** kaleem left
[14:07] <hoelzro> does lib/Test.pm have its own tests somewhere?

[14:08] *** SamuraiJack_ joined
[14:08] *** thou joined
[14:14] *** SamuraiJack_ left
[14:15] *** molaf joined
[14:16] *** guru joined
[14:16] *** guru is now known as Guest12547

[14:17] *** ajr_ left
[14:17] *** Guest12547 is now known as ajr_

[14:23] *** xylixy joined
[14:33] *** ivanshmakov left
[14:33] *** ivanshmakov joined
[14:33] *** virtualsue left
[14:33] *** virtualsue_ joined
[14:33] *** kaare_ joined
[14:37] *** araujo joined
[14:38] <ChoHag> If I have a sub which can callsame, how can I define an anonymous sub within that sub which uses the same callsame?

[14:38] <ChoHag> Because there is an inner scope around the callsame call, I get the error: callsame is not in the dynamic scope of a dispatcher

[14:39] <masak> m: multi foo { say "outer" }; { multi foo { say "inner"; callsame }; foo }

[14:39] <camelia> rakudo-moar e56d94: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:()␤:()␤  in sub foo at /tmp/OwPehmegbc:1␤  in block  at /tmp/OwPehmegbc:1␤␤»

[14:39] <masak> hrm.

[14:39] <ChoHag> sub oldattempt { val = callsame } --> sub newattempt { my $fn = sub { val = callsame }; $fn.() }

[14:39] <masak> m: multi foo($) { say "outer" }; { multi foo(Int) { say "inner"; callsame }; foo(5) }

[14:40] <camelia> rakudo-moar e56d94: OUTPUT«inner␤outer␤»

[14:40] <masak> m: multi foo($) { say "outer" }; { multi foo(Int) { say "inner"; my &b = -> { callsame }; &b() }; foo(5) }

[14:40] <camelia> rakudo-moar e56d94: OUTPUT«inner␤outer␤»

[14:40] <masak> ChoHag: there you go.

[14:40] <masak> m: multi foo($) { say "outer" }; { multi foo(Int) { say "inner"; return -> { callsame } }; my &b = foo(5); &b() }

[14:41] <camelia> rakudo-moar e56d94: OUTPUT«inner␤callsame is not in the dynamic scope of a dispatcher␤  in block  at src/gen/m-CORE.setting:632␤  in block  at /tmp/dR_cmebgnM:1␤  in block  at /tmp/dR_cmebgnM:1␤␤»

[14:41] *** carlin joined
[14:41] <masak> seems that `callsame` doesn't "bind" the way return does, though.

[14:41] <masak> pity -- I could see some uses of it doing so.

[14:43] *** jnap left
[14:43] *** dayangkun joined
[14:50] *** jnap joined
[14:53] *** Alina-malina left
[14:53] *** Alina-malina joined
[14:54] <ChoHag> Woo. Bug squashed.

[14:54] <ChoHag> Now to work out why the next bug makes moar chew up all my cores.

[14:54] *** brrt left
[14:56] <ChoHag> Also: Fuck the OOM killer.

[14:57] *** Alina-malina left
[14:58] *** Alina-malina joined
[14:58] <dalek> nqp: f1b098f | (Tobias Leich)++ | / (2 files):

[14:58] <dalek> nqp: RT #122341 [moar,jvm] handle all line separators

[14:58] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f1b098fea6

[14:58] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122341

[14:59] <dalek> rakudo/nom: 0f73b73 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[14:59] <dalek> rakudo/nom: bump nqp/{jvm,moar} rev for line sep fixes

[14:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f73b73468

[14:59] *** atroxaper left
[15:01] *** treehug88 joined
[15:09] *** ajr_ left
[15:10] *** denis_boyun left
[15:10] *** guru joined
[15:11] *** rurban1 joined
[15:11] *** guru is now known as Guest94476

[15:11] *** Guest94476 is now known as ajr_

[15:13] *** chenryn joined
[15:14] * masak wonders whether to point out that ChoHag's use of strong language outs him strongly as a fiver among sixers... :)

[15:15] <hoelzro> I feel similarly about the OOM killer =)

[15:16] <masak> that's orthogonal.

[15:16] *** rindolf joined
[15:18] <hoelzro> to strong language?

[15:18] <hoelzro> is the strong language present to make up for the weak type system? =P

[15:19] <dalek> roast: efcdc6b | (Tobias Leich)++ | S02-lexical-conventions/unicode.t:

[15:19] <dalek> roast: RT #122341 add/fudge unicode linesep tests for parrot only

[15:19] <dalek> roast: review: https://github.com/perl6/roast/commit/efcdc6b724

[15:19] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122341

[15:19] <masak> m: role FuckThe[::T] {}; class OomKiller {}; say FuckThe[OomKiller]

[15:19] <camelia> rakudo-moar e56d94: OUTPUT«(FuckThe[OomKiller])␤»

[15:20] <masak> Perl 6 can be as strongly typed/worded as you want. :)

[15:20] <ChoHag> masak: Not even that. I'm a programmer of any language and administrator of any system. My vocabulary is 33% expletives.

[15:20] <hoelzro> haha

[15:21] <masak> ChoHag: I was very careful in my wording above so you wouldn't immediately peg me as some kind of puritan. but it is unusual in here.

[15:21] <masak> my observation was more descriptive than prescriptive.

[15:21] *** kaleem joined
[15:22] <ChoHag> I don't give a shit :)

[15:22] <masak> ;)

[15:22] <ChoHag> Nobody has complained, or even come close.

[15:22] <masak> *nod*

[15:22] <ChoHag> They did in some other channels, so I left.

[15:23] <ChoHag> So if y'all decide you don't want me ...

[15:23] <masak> fwiw, I can't recall that *ever* happening in here.

[15:23] <ChoHag> Perl is too pragmatic.

[15:23] <masak> (the channel saying "we don't want you")

[15:23] <ChoHag> Life can't be fixed, you just have to roll with it.

[15:24] <masak> agreed.

[15:24] <masak> and strong language is language, and Perl is all about language.

[15:25] * masak .oO( the race to publish the FUCK phaser in the ecosystem )

[15:25] <FROGGS__> >.<

[15:25] *** fhelmberger left
[15:25] *** jnap left
[15:25] <psch> "use Vulgar;" - because what perl5 had as "use English" is semi-backed-in by now

[15:25] <psch> *baked

[15:26] <psch> FUCK { } could be UNDO there i guess? :)

[15:26] *** zakharyas left
[15:26] <ChoHag> FUCKIT

[15:27] <ChoHag> Or should FUCKIT be a try { ... } CATCH { True; }?

[15:27] <FROGGS__> I could imagine having a 'damn' token that does a 'exit 1'

[15:27] <FROGGS__> but that would be just another BF then :o)

[15:27] <FROGGS__> or was it LOLCODE?

[15:28] <masak> since CPAN has Lingua::Perligata, I wouldn't mind Perl 6 having a mode for programming in Girl Genius jägerkin language. :)

[15:28] *** jnap joined
[15:28] * masak .oO( DEM! )

[15:36] *** dayangkun left
[15:39] *** dmol left
[15:42] *** bluescreen10 joined
[15:45] *** kaleem left
[15:46] *** brrt joined
[15:47] *** xylixy left
[15:49] *** brrt left
[15:55] *** chenryn left
[15:59] *** atroxaper joined
[16:04] *** kaleem joined
[16:05] *** kaleem left
[16:05] *** [Sno] left
[16:15] <hoelzro> in Perl 5, one can assign to $? in an END block to alter a program's exit status.  Is there an analogous construct in Perl 6?

[16:16] <masak> hoelzro: `exit($status);`

[16:16] *** jnap left
[16:17] <masak> hm, `END exit(5)` hangs locally.

[16:17] <masak> m: END exit(5)

[16:17] <hoelzro> masak: that's what I tried, and also discovered =)

[16:17] <camelia> rakudo-moar e56d94: OUTPUT«(timeout)»

[16:17] <masak> r: END exit(5)

[16:17] *** jnap joined
[16:18] <camelia> rakudo-{parrot,moar} e56d94: OUTPUT«(timeout)»

[16:18] <camelia> ..rakudo-jvm e56d94: OUTPUT«(timeout)Unhandled exception: java.lang.StackOverflowError␤  in  (/tmp/tmpfile:1)␤  in  (/tmp/tmpfile:1)␤  in infix:<!=> (gen/jvm/CORE.setting:692)␤  in infix:<!=> (gen/jvm/CORE.setting:7677)␤  in isNaN (gen/jvm/CORE.setting:7600)␤  in ACCEPTS (…»

[16:18] * masak submits rakudobug

[16:22] *** kaiserpathos joined
[16:24] *** brrt joined
[16:25] *** go|dfish left
[16:27] <hoelzro> r: END say(1); END say (2)

[16:27] *** go|dfish joined
[16:27] <camelia> rakudo-{parrot,jvm,moar} e56d94: OUTPUT«2␤1␤»

[16:27] <hoelzro> r: END die(1); END say (2)

[16:27] <camelia> rakudo-jvm e56d94: OUTPUT«2␤===SORRY!===␤1␤2␤Unhandled exception: 1␤  in print_exception (gen/jvm/CORE.setting:11488)␤  in <anon> (gen/jvm/CORE.setting:11529)␤  in  (gen/jvm/main.nqp:48)␤  in  (gen/jvm/main.nqp)␤  in throw (gen/jvm/CORE.setting:11349)␤  in die (g…»

[16:27] <camelia> ..rakudo-moar e56d94: OUTPUT«2␤===SORRY!===␤1␤2␤Unhandled exception: 1␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ from src/gen/m-CORE.setting:11588  (/home/p6eval/rakudo-inst-2/languages/perl6/run…»

[16:27] <camelia> ..rakudo-parrot e56d94: OUTPUT«2␤===SORRY!===␤1␤2␤1␤current instr.: 'print_exception' pc 139840 (src/gen/p-CORE.setting.pir:59520) (gen/parrot/CORE.setting:11483)␤called from Sub 'throw' pc 428662 (src/gen/p-CORE.setting.pir:178677) (gen/parrot/CORE.setting:11339)␤called…»

[16:27] <hoelzro> r: END say(1); END die(2)

[16:27] <camelia> rakudo-moar e56d94: OUTPUT«===SORRY!===␤2␤Unhandled exception: 2␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ from src/gen/m-CORE.setting:11588  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/COR…»

[16:27] <camelia> ..rakudo-parrot e56d94: OUTPUT«===SORRY!===␤2␤2␤current instr.: 'print_exception' pc 139840 (src/gen/p-CORE.setting.pir:59520) (gen/parrot/CORE.setting:11483)␤called from Sub 'throw' pc 428662 (src/gen/p-CORE.setting.pir:178677) (gen/parrot/CORE.setting:11339)␤called from Su…»

[16:27] <camelia> ..rakudo-jvm e56d94: OUTPUT«===SORRY!===␤2␤Unhandled exception: 2␤  in print_exception (gen/jvm/CORE.setting:11488)␤  in <anon> (gen/jvm/CORE.setting:11529)␤  in  (gen/jvm/main.nqp:48)␤  in  (gen/jvm/main.nqp)␤  in throw (gen/jvm/CORE.setting:11349)␤  in die (gen/jvm/C…»

[16:28] <hoelzro> hmm

[16:28] <masak> in Perl 5, all END blocks run.

[16:29] <masak> though Perl 5 says "END failed--call queue aborted", and I don't really know what that means since it keeps running END blocks.

[16:29] <masak> food &

[16:29] <PerlJam> masak: did you perlbug it? ;)

[16:34] *** btyler joined
[16:34] *** treehug88 left
[16:35] *** ventica1 left
[16:39] *** kaiserpathos left
[16:43] *** kaleem joined
[16:52] *** woolfy joined
[16:54] <lizmat> r: my @a := nqp::hllize(nqp::getcurhllsym("@END_PHASERS")); say @a.WHAT

[16:54] <camelia> rakudo-{parrot,jvm,moar} e56d94: OUTPUT«(Parcel)␤»

[16:55] <lizmat> If this would be an Array, we could unshift from it in sub exit()

[16:56] <dalek> perl6-roast-data: b0f122b | coke++ | / (5 files):

[16:56] <dalek> perl6-roast-data: today (automated commit)

[16:56] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b0f122b357

[16:56] <[Coke]> rakudo.parrot clean; failures in moar & jvm.

[16:57] *** anaeem1_ left
[16:57] *** kaleem left
[16:58] <lizmat> r: my @a := nqp::hllize(nqp::getcurhllsym("@END_PHASERS")); while @a.shift -> $end {  $end() }

[16:58] <camelia> rakudo-{parrot,jvm,moar} e56d94: OUTPUT«No such method 'shift' for invocant of type 'Parcel'␤  in block  at /tmp/tmpfile:1␤␤»

[16:59] <lizmat> FWIW, I think it is useful to be able to push/unshift blocks to the END_PHASERS programmatically

[17:05] *** dakkar left
[17:08] <hoelzro> lizmat: I had the same thought

[17:08] <[Coke]> FROGGS__: on RT #122341 - why do you have \x85 and \x{2028} ? (wondering why we need the braces on the second one.)

[17:08] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122341

[17:09] <[Coke]> (for the parrot fix)

[17:09] <vendethiel> lizmat: what's the use case ?

[17:10] *** ajr_ left
[17:10] *** guru joined
[17:10] *** guru is now known as ajr_

[17:10] <lizmat> being able to load a module that writes out statistics by adding an END block to be executed after all other END blocks have finished

[17:11] <lizmat> in perl 5 I've used this to be able to run code *after* global destruction  (by forking in the END block :-)

[17:12] <lizmat> loading a module with an END block would make it execute first, rather than last

[17:12] <vendethiel> looks like perl stuff alright :p

[17:16] *** hoverboard joined
[17:16] *** Ulti left
[17:16] <hoelzro> lizmat: do you know what the steps would be to make END_PHASERS not a Parcel?

[17:16] <FROGGS__> [Coke]: \x{2028} was just an attempt to fix the bug, becaue I thought \x might only gobble perhaps two digits...

[17:17] <lizmat> hoelzro: no, that's why I posted it here, in the hopes that FROGGS__ or jnthn or moritz would have some insight

[17:18] <FROGGS__> m: my @a = nqp::hllize(nqp::getcurhllsym("@END_PHASERS")); say @a.WHAT

[17:18] <camelia> rakudo-moar e56d94: OUTPUT«(Array)␤»

[17:19] <lizmat> FROGGS__: but makes a copy: calling exit() again in an END block would then get the same original list

[17:20] <lizmat> which is what the bug is that masak rakudobugged

[17:20] <lizmat> breakfast&

[17:21] <FROGGS__> m: say nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu).WHAT # WHAT about that?

[17:21] <camelia> rakudo-moar e56d94: OUTPUT«(Array)␤»

[17:29] <masak> PerlJam: not at all convinced it's a Perl 5 bug. I just don't understand the warning/error message.

[17:29] <masak> PerlJam: but I did submit the rakudobug.

[17:29] <psch> m: say nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu).WHAT

[17:29] <camelia> rakudo-moar e56d94: OUTPUT«(Array)␤»

[17:29] <psch> ererr

[17:30] <psch> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu).WHAT; @a.push: { say "foo" }

[17:30] <camelia> rakudo-moar e56d94: OUTPUT«Cannot bind attributes in a type object␤  in method STORE at src/gen/m-CORE.setting:8865␤  in method push at src/gen/m-CORE.setting:1586␤  in block  at /tmp/n5jqRBam4Q:1␤␤»

[17:30] <FROGGS__> psch: remove the .WHAT

[17:30] <psch> FROGGS__: the 'Mu' should be something else to push to it?

[17:30] <psch> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); @a.push: { say "foo" }

[17:30] <camelia> rakudo-moar e56d94: ( no output )

[17:30] * psch duhs :)

[17:31] <FROGGS__> psch: the last argument is whether it flattens or not, its a flag

[17:32] <psch> FROGGS__: the REPL gives me "Cannot call method 'push' on a null object"

[17:32] <psch> is that a REPL thing? no @END_PHASERS?

[17:32] <FROGGS__> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); @a.push: { say "foo" }; say @a

[17:32] <camelia> rakudo-moar e56d94: OUTPUT«-> () { #`(Block|53006288) ... } -> ($_? is parcel) { #`(Block|140060623053864) ... }␤»

[17:32] <[Coke]> FROGGS++ 

[17:33] <FROGGS__> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); @a.push: { say "foo" }; say +@a

[17:33] <camelia> rakudo-moar e56d94: OUTPUT«2␤»

[17:33] <FROGGS__> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); say +@a

[17:33] <camelia> rakudo-moar e56d94: OUTPUT«1␤»

[17:33] <FROGGS__> it seems to work...

[17:33] <FROGGS__> psch: I guess that's a repl bug

[17:33] <FROGGS__> there are quite a few repl bugs actually :o(

[17:33] *** FROGGS__ is now known as FROGGS

[17:34] <psch> fwiw, a file that only binds @END_PHASERS and pushes { say "foo" } into it doesn't say "foo" either

[17:34] <psch> that's probably not the same issue as the REPL not creating an object properly

[17:35] <FROGGS> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); @a.push: { say "foo" }; exit 0

[17:35] <camelia> rakudo-moar e56d94: ( no output )

[17:35] <FROGGS> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); @a.push: -> { say "foo" }; exit 0

[17:35] <camelia> rakudo-moar e56d94: ( no output )

[17:35] *** pecastro left
[17:37] *** spider-mario joined
[17:37] <psch> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); END { say "foo" }; say +@a;

[17:37] <camelia> rakudo-moar e56d94: OUTPUT«2␤»

[17:37] <psch> m: my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); END { say "foo" }; say +@a; exit 0

[17:37] <camelia> rakudo-moar e56d94: OUTPUT«2␤»

[17:37] <FROGGS> m: nqp::bindcurhllsym('@END_PHASERS', -> { say "foo" }); exit 0

[17:37] <camelia> rakudo-moar e56d94: OUTPUT«foo␤»

[17:37] <FROGGS> perhaps we have to rebind it?

[17:39] *** ajr_ left
[17:39] <FROGGS> m: use Perl6::World:from<NQP>; nqp::bindcurhllsym('@END_PHASERS', nqp::gethllsym('nqp', 'nqplist')({ say "foo" }))

[17:39] <camelia> rakudo-moar e56d94: OUTPUT«foo␤»

[17:40] *** virtualsue_ left
[17:41] *** treehug88 joined
[17:42] <FROGGS> we can also mix in a role that states that a phaser was already run

[17:43] *** Sqirrel joined
[17:45] *** atroxaper left
[17:47] <timotimo> m: END (state $) = exit(4); say "foobar"; END say "goodbye";

[17:47] <camelia> rakudo-moar e56d94: OUTPUT«===SORRY!=== Error while compiling /tmp/CzVlhrOtEV␤Unsupported use of $) variable; in Perl 6 please use $*EGID␤at /tmp/CzVlhrOtEV:1␤------> END (state $)⏏ = exit(4); say "foobar"; END say "goodb␤»

[17:47] <timotimo> m: END (state $ ) = exit(4); say "foobar"; END say "goodbye";

[17:47] <camelia> rakudo-moar e56d94: OUTPUT«(timeout)foobar␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye␤goodbye…»

[17:47] <psch> m: use Perl6::World:from<NQP>; my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); END { say "foo" }; say +@a; @a[0] -> { say "bar" }; nqp::bindcurhllsym('@END_PHASERS', nqp::gethllsym('nqp', 'nqplist')(@a)); exit 0

[17:48] <camelia> rakudo-moar e56d94: OUTPUT«===SORRY!=== Error while compiling /tmp/bKGFROXxTf␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?)␤at /tmp/bKGFROXxTf:1␤------>  Mu); END { say "foo" }; say +@a; @a[0] ⏏…»

[17:48] <psch> m: use Perl6::World:from<NQP>; my @a := nqp::p6list(nqp::getcurhllsym("@END_PHASERS"), Array, Mu); END { say "foo" }; say +@a; @a[0] = -> { say "bar" }; nqp::bindcurhllsym('@END_PHASERS', nqp::gethllsym('nqp', 'nqplist')(@a)); exit 0

[17:48] <camelia> rakudo-moar e56d94: OUTPUT«2␤bar␤»

[17:49] <psch> set phasers to uhm

[17:49] <psch> or maybe huh

[17:50] <psch> in any case, i don't know if that should be easier

[17:50] * lizmat is testing a patch to fix exit within exit or END

[17:50] <psch> or less fiddly, rather

[17:51] <psch> i'm leaning towards "probably not"

[17:51] <lizmat> $ 6 'END { exit(42) }'

[17:51] <lizmat> $ echo $?

[17:51] <lizmat> 42

[17:52] <hoelzro> lizmat++

[17:53] <hoelzro> lizmat: what about die()?

[17:53] <hoelzro> do (should?) the other phasers get run?

[17:54] *** [Sno] joined
[17:54] <lizmat> there were two places where the END_PHASERS we're being run: on in Exception, and one in sub exit()

[17:55] <lizmat> I've covered those two places

[17:55] <FROGGS> lizmat: MAIN also runs these phasers

[17:55] <hoelzro> lizmat: I mean what if an END block die()s

[17:55] <dalek> rakudo/nom: 043cc03 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[17:55] <dalek> rakudo/nom: Fix for #122355

[17:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/043cc03065

[17:55] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122355

[17:55] <FROGGS>     # Run any END blocks before exiting.

[17:55] <FROGGS>     for nqp::gethllsym('perl6', '@END_PHASERS') {

[17:55] <FROGGS>         $result := $_();

[17:56] <lizmat> I've placed the END block handling in a global sub called &THE_END

[17:56] <lizmat> this is run in two places: an END block is removed before it is being run

[17:56] <lizmat> so any END block will only run once

[17:57] <lizmat> whichever way you decide to die / exit in an END block

[17:57] <hoelzro> lizmat: wouldn't die()ing from an END block cause a later running phaser to not run at all?

[17:58] <lizmat> when an END block is being run, all other phasers have already run

[17:58] <lizmat> it's the last one (hence the name: END  :-)

[17:58] <hoelzro> sorry, I mean to say another END block

[17:58] <hoelzro> ex. if I do END say(1); END die(2); END say(3)

[17:58] *** carlin left
[17:59] <psch> m: END say 1; END die 2; END say 3

[17:59] <camelia> rakudo-moar e56d94: OUTPUT«3␤===SORRY!===␤2␤3␤Unhandled exception: 2␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ from src/gen/m-CORE.setting:11588  (/home/p6eval/rakudo-inst-2/languages/perl6/run…»

[17:59] <hoelzro> I'm wondering if the END block with 'say 1' should run or not

[18:00] <lizmat> r: END die(2)

[18:00] <camelia> rakudo-moar e56d94: OUTPUT«===SORRY!===␤2␤Unhandled exception: 2␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ from src/gen/m-CORE.setting:11588  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/COR…»

[18:00] <camelia> ..rakudo-jvm e56d94: OUTPUT«===SORRY!===␤2␤Unhandled exception: 2␤  in print_exception (gen/jvm/CORE.setting:11488)␤  in <anon> (gen/jvm/CORE.setting:11529)␤  in  (gen/jvm/main.nqp:48)␤  in  (gen/jvm/main.nqp)␤  in throw (gen/jvm/CORE.setting:11349)␤  in die (gen/jvm/C…»

[18:00] <camelia> ..rakudo-parrot e56d94: OUTPUT«===SORRY!===␤2␤2␤current instr.: 'print_exception' pc 139840 (src/gen/p-CORE.setting.pir:59520) (gen/parrot/CORE.setting:11483)␤called from Sub 'throw' pc 428662 (src/gen/p-CORE.setting.pir:178677) (gen/parrot/CORE.setting:11339)␤called from Su…»

[18:01] <lizmat> seems we have a problem with die in an END block anyways  :-(

[18:01] <lizmat> m: END exit(42)

[18:02] <timotimo> can we do things like next, last, redo in END blocks? :)

[18:02] <camelia> rakudo-moar e56d94: OUTPUT«(timeout)»

[18:02] <timotimo> as they are probably run by a loop a dynamic frame outside

[18:03] <lizmat> hoelzro: my patch only fixes 'END exit 42'

[18:06] <lizmat> m: END next

[18:06] <camelia> rakudo-moar e56d94: OUTPUT«===SORRY!===␤Cannot invoke this object (REPR: Null, cs = 0)␤Unhandled exception: Cannot invoke this object (REPR: Null, cs = 0)␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ …»

[18:06] <lizmat> m: END next; 1

[18:06] <camelia> rakudo-moar e56d94: OUTPUT«===SORRY!===␤Cannot invoke this object (REPR: Null, cs = 0)␤Unhandled exception: Cannot invoke this object (REPR: Null, cs = 0)␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:print_exception:4294967295)␤ …»

[18:06] *** brrt left
[18:07] <hoelzro> lizmat: good for now =)

[18:09] <lizmat> $ 6 'END say(1); END exit(42); END say(3)' # still something spooky going on

[18:09] <lizmat> 3

[18:11] *** Akagi201 left
[18:15] *** atroxaper joined
[18:17] *** rindolf left
[18:18] *** rindolf joined
[18:20] *** atroxaper left
[18:20] <hoelzro> interesting

[18:22] *** dwarring joined
[18:22] *** rurban1 left
[18:24] *** molaf left
[18:26] *** rindolf left
[18:26] *** bowtie_ left
[18:27] *** rindolf joined
[18:27] *** ventica joined
[18:28] *** woolfy left
[18:34] <lizmat> looks like somewhere in the bowels, something is executing the END phasers before THE_END() starts...

[18:35] <lizmat> need to go now, errands and oscon&

[18:35] *** lizmat left
[18:36] *** bowtie joined
[18:36] *** bowtie is now known as Guest77354

[18:38] <hoelzro> lizmat: have fun!

[18:39] *** ponbiki_ left
[18:42] *** ponbiki joined
[18:42] *** ponbiki is now known as Guest82181

[18:47] *** Guest77354 left
[18:50] *** rurban1 joined
[18:51] *** jnap left
[18:53] *** Guest82181 is now known as ponpon

[18:54] *** raiph left
[18:59] *** jnap joined
[19:04] *** brrt joined
[19:05] <vendethiel> masak: a take on assert https://github.com/manastech/crystal/issues/167#issuecomment-49621834

[19:06] *** bowtie_ joined
[19:08] *** hummeleB1 joined
[19:11] *** carlin joined
[19:12] *** SamuraiJack left
[19:14] <masak> vendethiel: nice.

[19:14] <masak> vendethiel: .stringify is what I fixed the other day -- spelled .Str in Perl 6.

[19:14] <vendethiel> masak++: yeah, I saw it =). Makes macros much more useful

[19:15] <masak> vendethiel: I want us to have .inspect too -- thinking of calling it .eval, because I think that's what it does, only from an AST, not from a Str.

[19:15] <masak> oh, I guess it's .EVAL these days :(

[19:15] <vendethiel> you must mean EVIL

[19:16] <masak> I'm mostly weary of all the voodoo-mystical fearmongering around EVAL.

[19:16] <masak> then again, I've grown mostly weary of Crockford's insistence on staying off JavaScript's "bad parts", too.

[19:17] <ventica> does JavaScript have any good parts??

[19:17] <masak> oh, it does.

[19:17] <masak> but it's a much thinner book ;)

[19:17] * vendethiel is mostly weary of crockford

[19:17] <vendethiel> that's one bad guy I don't want to be associated with, eh.

[19:18] <vendethiel> Well, when I get asked "when is eval a good solution", I usually answer "if you're asking, it's not one."

[19:18] <masak> *nod*

[19:18] *** darutoko left
[19:19] *** rindolf left
[19:19] *** rindolf joined
[19:19] <masak> Crockford is very hit-and-miss. I consider http://json.org/ to be an obvious hit, and http://dec64.com/ to be a (less obvious) miss.

[19:21] *** ventica left
[19:22] <vendethiel> masak: my main gripe with him is that he thinks he's so superior he can insult anybody and get away with it. Usually doesn't go well with me :-)

[19:22] <vendethiel> well, not saying he didn't do anything correct though. Json is cool, indeed.

[19:22] <masak> yes, his public image has a hefty mix of superiority mixed into it.

[19:23] <masak> I can endure it as long as he's right about stuff ;)

[19:23] *** dmol joined
[19:23] <masak> but some of his pet peeves are... weird. like his distaste for ++ and --

[19:24] <vendethiel> I can't. I want people to stop acting like jerks just because (they think) they're right. It also happens soooo effin' muuuuch in the FP community

[19:24] <vendethiel> and it's really limitating it, up to the point where, when somebody links to scalaz, people answer "yea but these guys are morons". Too bad

[19:24] <masak> :/

[19:24] <vendethiel> (not picking on scalaz' guys especially, it's just one example that I see happen very often)

[19:25] <vendethiel> and they're not wrong. They truly are bigots, they insult other people, and they don't use to give ways for others to improve. Which doesn't mean what they're doing isn't great -- it is. But I really fix you need to fix your behavior

[19:25] <vendethiel> "I'll say it again, one more time: Respect is not, never was, never will, an option."

[19:25] <vendethiel> (fp joke not intended, btw :P)

[19:26] *** bowtie_ left
[19:27] <vendethiel> Well, whatever. We'll see how it goes. WRT macros, they're still a tiny bit limitated ATM in perl 6

[19:28] <vendethiel> I was trying to do one thing last time to no avail, don't know where I've put it. Something from racket or whatnot

[19:29] <vendethiel> .oO( I'll have one masak, thanks. I need to work on some macros )

[19:38] *** rindolf left
[19:39] *** bowtie joined
[19:39] *** bowtie is now known as Guest73976

[19:48] *** Guest73976 left
[19:54] *** ponpon is now known as ponbiki

[19:55] <dalek> roast: 512b47f | (David Warring [email@hidden.address] | integration/advent2009-day23.t:

[19:55] <dalek> roast: reduced scope of rakudo fudge. added tests

[19:55] <dalek> roast: review: https://github.com/perl6/roast/commit/512b47fa48

[19:56] <[Coke]> note that fudges don't have to start the line. (I've seen both styles in roast)

[19:58] <dwarring> ok

[19:59] *** guru joined
[19:59] *** guru is now known as Guest18415

[19:59] *** Guest18415 is now known as ajr_

[20:03] *** rindolf joined
[20:04] <dalek> roast: dc1d29b | (David Warring [email@hidden.address] | integration/advent2009-day23.t:

[20:04] <dalek> roast: indent fudge directive

[20:04] <dalek> roast: review: https://github.com/perl6/roast/commit/dc1d29ba97

[20:04] *** treehug88 left
[20:05] <psch> https://github.com/rakudo/rakudo/pull/293 # RT #122349 

[20:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122349

[20:05] <psch> spectest looks cleans from here

[20:06] <psch> clean*

[20:06] <psch> (i've mistakenly chased that down to HLL::Grammar and back...)

[20:06] *** rurban1 left
[20:07] <dwarring> [Coke]: you can add intetegration/advent2009-day24.t to spectest.data

[20:07] *** ventica joined
[20:07] *** rurban1 joined
[20:07] <dwarring> it now contains tests

[20:09] <masak> dwarring++

[20:15] *** bowtie_ joined
[20:17] *** ponbiki left
[20:17] *** atroxaper joined
[20:17] <dalek> rakudo/nom: d940f0c | (Pepe Schwarz)++ | src/Perl6/Grammar.nqp:

[20:17] <dalek> rakudo/nom: Don't parse <sigil> <rxstopper> as a variable in the search pattern for s///.

[20:17] <dalek> rakudo/nom: 

[20:17] <dalek> rakudo/nom: This fixes RT #122349.

[20:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d940f0c355

[20:17] <dalek> rakudo/nom: e40ffeb | (Tobias Leich)++ | src/Perl6/Grammar.nqp:

[20:17] <dalek> rakudo/nom: Merge pull request #293 from peschwa/rt122349

[20:17] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122349

[20:17] <dalek> rakudo/nom: 

[20:17] <dalek> rakudo/nom: Don't parse <sigil> <rxstopper> as a variable in the search pattern for s///.

[20:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e40ffeb943

[20:21] <psch> FROGGS: you want to do the tests this time? :)

[20:21] *** atroxaper left
[20:23] *** rindolf left
[20:23] <FROGGS> psch: do I have to? :o)

[20:24] *** ponbiki joined
[20:24] *** ponbiki is now known as Guest46958

[20:25] *** dmol left
[20:28] *** dmol joined
[20:29] *** bowtie_ left
[20:30] *** Ven joined
[20:32] <Ven> so, do I explain scoping or modules first :D

[20:32] * Ven starts with scoping, right after subs

[20:33] *** pecastro joined
[20:33] *** WAATBQ1 joined
[20:34] *** tadzik joined
[20:34] <hoelzro> I've noticed in my S26 work that Test.pm is rather rudimentary.  Is that to keep a core test library small, or due to lack of time to make it better?

[20:35] *** ab5tract joined
[20:35] *** bowtie joined
[20:35] <dalek> roast: 8a43069 | (Pepe Schwarz)++ | S05-substitution/subst.t:

[20:35] <dalek> roast: Add test for RT #122349

[20:35] <dalek> roast: review: https://github.com/perl6/roast/commit/8a43069968

[20:35] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122349

[20:36] *** bowtie is now known as Guest40159

[20:38] <Ven> m: { our sub a { 5 } }; a

[20:38] <camelia> rakudo-moar 043cc0: OUTPUT«===SORRY!=== Error while compiling /tmp/3g3F86Hw4a␤Undeclared routine:␤    a used at line 1␤␤»

[20:39] <Ven> m: class A { sub foo { 5 }  }; say A::foo; # our sub is default, it is

[20:39] <camelia> rakudo-moar 043cc0: OUTPUT«Could not find symbol '&foo'␤  in method <anon> at src/gen/m-CORE.setting:12876␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2604␤  in any find_method at src/gen/m-Metamodel.nqp:934␤  in block  at /tmp/DNHxAfpyJt:1␤␤»

[20:39] <Ven> m: class A { our sub a { 5 } } #???

[20:39] <camelia> rakudo-moar 043cc0: ( no output )

[20:39] <Ven> I'm getting "cannot find method is_composed" locally

[20:40] <sergot> night o/

[20:40] <FROGGS> Ven: in the repl?

[20:40] <Ven> FROGGS: yep

[20:41] <FROGGS> Ven: seems to be a repl bug

[20:41] *** kaare_ left
[20:41] <Ven> where are declarators described in the specs ?

[20:41] <FROGGS> I do not use the repl, I use camelia...

[20:42] <FROGGS> I dunno

[20:42] <Ven> s03

[20:43] *** dmol left
[20:43] <TimToady> coredump on the 6th line: https://gist.github.com/anonymous/0873fd7dd630a9deb6f2

[20:44] *** dmol joined
[20:44] <TimToady> (attempting to find the 6th line of output, that is)

[20:45] <TimToady> (on moarvm, works on jvm)

[20:46] <FROGGS> ohh, again a coredump that is related to flip...

[20:46] *** ventica left
[20:46] <TimToady> yes, it does appear to be the flip

[20:47] <Ven> "Perl 6 has another scoping ..." <- what is the term ? variant ? mode ?

[20:47] <TimToady> has another kind of scope?

[20:47] <Ven> that works, thanks

[20:47] <Ven> I was going to write "from lisp", but I think lexical scope is also from lisp ...

[20:49] <ab5tract> hey all

[20:49] <FROGGS> TimToady: yeah, an object in MoarVM is just garbage

[20:49] <FROGGS> hi ab5tract 

[20:49] <ab5tract> i've just re-compiled rakudo after a while

[20:49] <FROGGS> TimToady: that is a nice script to debug that flip problem

[20:49] <ab5tract> pretty cool, compiling perl to multiple backends

[20:50] <ab5tract> :)

[20:50] <FROGGS> :o)

[20:50] <FROGGS> yeah...

[20:50] <ab5tract> and moarvm startup is quick!

[20:50] <FROGGS> and it runs moar and moar quickly

[20:50] <TimToady> it's about 4 times faster the current entry for http://rosettacode.org/wiki/Find_palindromic_numbers_in_both_binary_and_ternary_bases#Perl_6

[20:51] <ab5tract> indeed, the Thread Apocalypse is upon us...

[20:51] <ab5tract> must feel pretty good :)

[20:51] <FROGGS> it's also getting a JIT this summer, besides other awesome optimizations

[20:51] * TimToady doesn't feel all that good about the thread apocalypse since his firefox is chewing up more than 100% of a cpu just sitting there :/

[20:52] <FROGGS> TimToady: but it looks cute while sitting there, really

[20:52] *** Guest46958 is now known as ponpon

[20:52] *** japhb_ left
[20:53] <FROGGS> I have like 50+ tabs open, and many pages reload theirself

[20:53] *** dmol left
[20:54] <ab5tract> maybe it's just having trouble keeping it's promises?

[20:54] *** virtualsue joined
[20:55] <brrt> .tell jnthn is this normal? i suspect it's part of inlining: https://gist.github.com/bdw/e5b606499aa6435f7e72

[20:55] <yoleaux> brrt: I'll pass your message to jnthn.

[21:02] <ab5tract> more precisely though, i mean to congratulate everyone here on perl 6 (and anyone else who deserves it who isn't). i've been lurking around the project since forever, and it's really great to see the foundations being laid on synopsis 17

[21:03] *** dmol joined
[21:03] * TimToady has now updated the entry, since it does work under jvm, if not under moarvm

[21:04] <ab5tract> if/when you are ever in Amsterdam, i owe you a %favorite<drink>

[21:05] *** japhb_ joined
[21:05] <masak> m: say ($_ ** 17 + 9) gcd (($_ + 1) ** 17 + 9) for 0..*

[21:06] <camelia> rakudo-moar 043cc0: OUTPUT«(timeout)1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1…»

[21:06] * masak just learned that that formula keeps repeating 1 until $_ == 8424432925592889329288197322308900672459420460792433

[21:06] <masak> (which is kind of hilarious if you think about it)

[21:06] <masak> http://math.stackexchange.com/questions/111440/examples-of-apparent-patterns-that-eventually-fail

[21:07] <TimToady> you've overflowed one of the universes registers

[21:07] <masak> clearly.

[21:07] <TimToady> *universe's

[21:07] <TimToady> either that, or someone flubbed the powers of 17 tables somewhere

[21:12] * masak proceeds to discover that tchrist++ writes great answers on english.stackexchange.com, too

[21:12] <Ven> TimToady: we were wondering yesterday ... Why both package and module ?

[21:13] <Ven> (somebody suggested for perl 5 similarity)

[21:13] * masak 

[21:14] <Ven> the six model is class, role, module, ?

[21:14] <TimToady> package is just a global(ish) location for variables that can be used by other things like modules

[21:14] <masak> TimToady: we also talked about indirect method calls, and whether you had somehow given up on them as a feature.

[21:15] <TimToady> modules imply exportation, packages don't

[21:15] <TimToady> I haven't given up on them

[21:15] <TimToady> std: print $*OUT: 1,2,3

[21:15] <camelia> std 0f2049c: OUTPUT«ok 00:01 125m␤»

[21:15] <masak> \o/

[21:15] <masak> and /o\

[21:15] *** Guest40159 left
[21:15] <masak> :P

[21:16] <Ven> TimToady: modules imply exportation ?

[21:16] <Ven> s10 is pretty vague about this, tbh

[21:17] <TimToady> S10 is not about modules :P

[21:17] <Ven> true, it's about packages :)

[21:17] <Ven> so, S11 is about modules, and s10 about packages, right ?

[21:18] <TimToady> modules can behave as packages, just as classes can behave as modules

[21:18] <Ven> I got to go for now, but I'll love to know where I have to look for in the syns to find more about that :)

[21:19] <TimToady> but there could be other things that have packages that are neither modules nor classes

[21:19] <TimToady> maybe roles fall in that category

[21:19] <dalek> rakudo/nom: 333bce4 | coke++ | t/spectest.data:

[21:19] <dalek> rakudo/nom: run this test file

[21:19] <dalek> rakudo/nom: 

[21:19] <dalek> rakudo/nom: dwarring++

[21:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/333bce4081

[21:20] <TimToady> p6: role Foo { our $x = 42; }; say Foo::<$x>

[21:20] <Ven> TimToady: so packages are the "lowest denominator"?

[21:20] <TimToady> yeah

[21:20] <camelia> rakudo-jvm 043cc0: OUTPUT«(timeout)»

[21:20] <camelia> ..rakudo-{parrot,moar} 043cc0, niecza v24-109-g48a8de3: OUTPUT«(Any)␤»

[21:20] <Ven> if they're indeed useful, it seems pretty sad to me you're not allowed to `package Foo;`.

[21:20] *** ventica joined
[21:20] <TimToady> hmm, arguably our should initialize at INIT time regardless of the role genericity

[21:20] <Ven> well, I still don't really get what's the diff. between package VS module (semantically)

[21:21] *** Ven left
[21:21] <FROGGS> TimToady: there is already an RT ticket for that

[21:21] <TimToady> okay

[21:22] *** cibs left
[21:24] *** cibs joined
[21:24] *** FROGGS[mobile] left
[21:30] *** ponpon left
[21:31] *** spider-mario left
[21:33] *** bowtie joined
[21:34] *** bowtie is now known as Guest76836

[21:40] *** xenoterracide_ joined
[21:41] *** brrt left
[21:41] *** kivutar left
[21:43] <masak> m: package Foo;

[21:43] <camelia> rakudo-moar 043cc0: OUTPUT«===SORRY!=== Error while compiling /tmp/biRqo37e8E␤This appears to be Perl 5 code. If you intended it to be Perl 6 code, please use a Perl 6 style package block like "package Foo { ... }", or "module Foo; ...".␤at /tmp/biRqo37e8E:1␤…»

[21:43] <masak> m: say 42; package Foo;

[21:43] <camelia> rakudo-moar 043cc0: OUTPUT«===SORRY!=== Error while compiling /tmp/A_kRDyuDL8␤This appears to be Perl 5 code. If you intended it to be Perl 6 code, please use a Perl 6 style package block like "package Foo { ... }", or "module Foo; ...".␤at /tmp/A_kRDyuDL8:1␤…»

[21:43] *** kivutar joined
[21:44] <TimToady> std: say 42; package Foo;

[21:44] <camelia> std 0f2049c: OUTPUT«===SORRY!===␤Semicolon form of package definition indicates a Perl 5 module; unfortunately,␤  STD doesn't know how to parse Perl 5 code yet at /tmp/M9VbrIM5iQ line 1:␤------> say 42; package Foo⏏;␤    expecting any o…»

[21:44] <TimToady> hmm

[21:45] <TimToady> that seems like a semi-obsolescent message

[21:45] * masak semi-submits rakudobug

[21:45] <TimToady> of course, that whole heuristic will break when P5 adds module or class keywords...

[21:45] <masak> oh, or is STD the obsolescent one?

[21:46] <TimToady> well, v5 is based on STD's STD_P5

[21:47] <TimToady> so on some level, STD does know how ot parse P5...

[21:47] <TimToady> but I'm sure it's much more rudimentary than v5 these days

[21:47] *** treehug88 joined
[21:48] <TimToady> well, STD is getting pretty close to obsolete it's own self these days

[21:48] <masak> in some sense, that's cause for rejoicing.

[21:49] <TimToady> indeed

[21:49] <masak> Perl 6 implementations are now so far advanced that the cheating employed by STD doesn't inform things as much anymore.

[21:49] <TimToady> except where they cheat wrong :)

[21:50] *** hoverboard left
[21:51] * masak .oO( err, and err, and err; but less, and less, and less )

[21:51] <TimToady> alas, that strategy does not preclude hitting local minima

[21:52] <masak> nor ever converging on a zero error rate.

[21:52] <TimToady> well, even knuth had to cap the size of his payouts :)

[21:53] <masak> even "local minima" presupposes that tradeoffs always have a right choice ;)

[21:54] <japhb> .oO( local saddle point )

[21:54] <TimToady> just ask the dinosaurs

[21:54] <japhb> Become chickens?

[21:55] <masak> clearly the dinosaurs didn't invest enough effort in asteroid defense

[21:55] <TimToady> the only way to succeed is to provide a large enough gene pool that most of the ways to fail != all the ways to fail

[21:55] * japhb wonders which bird genera are closest to their "classic dinosaur" roots

[21:56] <japhb> .oO( Dinosaur Classic (tm), now with Real Sugar! )

[21:56] <TimToady> some of the dinosaurs survived the changing fitness function

[21:56] <masak> japhb: the Dodo. oops. :P

[21:56] <japhb> masak: :-D

[21:57] <TimToady> a a book I'm reading (or "reading", since it's on CDs to rest my eyes), they have pet regenerated dodos.

[21:57] <TimToady> not to be confused with regenerated pet dodos

[21:58] <masak> sounds like a nice book.

[21:58] * japhb suddenly realizes that after asking his current music service to play Up On Cripple Creek, it has now decided to play all songs in its library with the words "Cripple Creek" in the title.  It's a longer list than I expected.

[21:59] <masak> japhb: so one might rightfully say you're "up Cripple Creek with no paddle" :P

[22:00] * masak ponders whether his doubtful mastery of English idiom is funny, or merely confusing

[22:01] <TimToady> .oO(Surely being down the creek without a paddle would be a bigger problem...)

[22:02] <masak> for some reason in that idiom, people are always up the creek.

[22:03] <japhb> masak: Well, you got half a smirk from use of the idiom at all, but then I got confused as I tried to figure out what the paddle represented.  :-)

[22:03] <TimToady> just don't get sent up the river

[22:04] <TimToady> (to Sing Sing, presumably)

[22:04] <masak> better than being sold down the river.

[22:06] <japhb> On of the idiom sources I came across said that being sent up the river was part of the start of the idiom, based on a naval hospital where the patients were kept as prisoners so as not to desert while being treated.

[22:06] <japhb> *One of

[22:07] <[Coke]> wait, are you streaming these songs?

[22:07] <TimToady> nap &

[22:07] <masak> [Coke]: :P

[22:09] *** yeltzooo left
[22:11] *** yeltzooo joined
[22:11] *** Guest76836 left
[22:14] *** bluescreen10 left
[22:14] <japhb> [Coke]: Are you talking to me?

[22:15] <japhb> And, FWIW: :-P

[22:15] <[Coke]> c'mon, that was GOLD!

[22:16] <[Coke]> :)

[22:16] <carlin> on OpenBSD the slurp() on a directory test in S32-io/slurp.t doesn't pass, because slurp() on a directory doesn't die on OpenBSD... for some reason

[22:17] <psch> is #82108 actually decided as "Str but Bool is ok for s///"?  because that's what i've implemented now.  i think i should've asked for clarification first... :)

[22:17] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=82108

[22:17] <masak> carlin: please submit a rakudobug with what you just said.

[22:17] <psch> i don't think a similar approach as for tr/// makes much sense here, unless a "BoolyStr" class makes sense, which i don't think it does

[22:17] <carlin> masak: okie dokie

[22:18] <[Coke]> carlin: please include which VM you're using (in case it's relevant)

[22:18] *** atroxaper joined
[22:19] *** kivutar left
[22:19] *** dmol left
[22:22] <timotimo> o/

[22:22] <timotimo> glad to hear TimToady is well enough to see core dumps again

[22:23] *** atroxaper left
[22:26] <masak> 'night, #perl6

[22:27] *** sjohnson left
[22:28] <psch> night masak, hi timotimo o/

[22:33] *** ventica left
[22:34] *** gfldex left
[22:35] *** treehug88 left
[22:39] *** xenoterracide_ left
[22:40] <timotimo> hi psch

[22:43] <carlin> m: say $*PERL.DISTROnames

[22:43] <camelia> rakudo-moar 333bce: OUTPUT«macosx linux mswin32␤»

[22:43] *** xenoterracide_ joined
[22:43] <carlin> BSD users are people too!

[22:52] *** rurban1 left
[23:00] <japhb> carlin: Sometimes I wonder if "Perl 6 is production ready" really means "Rakudo contains all the hacks and workarounds that perl5 needs to run on just about anything with a >=32-bit CPU" to some people.  ;-)

[23:01] * japhb remembers the old TPJ cover with Configure running on a typewriter ...

[23:02] <timotimo> m)

[23:04] <japhb> Found it:  http://www.flickr.com/photos/bjepson/139075091/

[23:06] *** BenGoldberg joined
[23:07] <timotimo> is that a regular typewriter or an ancient-looking teletype?

[23:08] <japhb> A classic Underwood typewriter.

[23:09] <japhb> perl5 was (justifiably) famous for being able to compile on stuff you would never believe could possibly support it.

[23:09] <japhb> And Jon Orwant has a good sense of humor.  :-)

[23:09] <timotimo> ah, ok

[23:10] <timotimo> back then it wasn't toasters that are the canonical example? :)

[23:10] *** rurban1 joined
[23:11] <japhb> I remember after having gone through some of the old ports, being actually surprised that someone hadn't ported it to a 16-bit CPU just for the glory of the hack.  It had been ported to DOS, though.

[23:11] *** rurban2 joined
[23:11] <japhb> And Amiga, and ...

[23:14] *** rurban1 left
[23:14] *** btyler left
[23:20] *** virtualsue left
[23:22] *** ivanshmakov is now known as ivanshmakov|RST

[23:27] *** ab5tract left
[23:29] *** ivanshmakov joined
[23:31] *** ventica joined
[23:35] *** ab5tract joined
[23:36] *** ivanshmakov left
[23:36] *** ivanshmakov joined
[23:37] *** ajr_ left
[23:42] *** ivanshmakov|RST left
[23:49] *** ab5tract left
[23:55] *** jnap left
[23:56] *** ventica left
[23:57] *** xenoterracide_ left
