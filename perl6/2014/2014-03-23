[00:00] <vendethiel> https://github.com/Nami-Doc/Typeclassopedia.pl6/blob/master/lib/Typeclassopedia.pm6

[00:00] <Mouq> r: my &a = {$^a; False}; my &b = {$^b; True}; say (&a|&b)(1)

[00:00] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´any(False, True)‚ê§¬ª

[00:00] <Mouq> r: my &a = {$^a; False}; my &b = {$^b; True}; say so (&a|&b)(1)

[00:00] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´True‚ê§¬ª

[00:02] *** denis_boyun left
[00:14] *** dmol left
[00:16] <masak> lol, me blogged! http://strangelyconsistent.org/blog/parsing-indented-text

[00:16] <masak> (doesn't happen often these days)

[00:17] <timotimo> i'm glad :)

[00:21] <timotimo> masak: would have wished for a tiny bit more explanation for my $partial_indent = ~$1;

[00:21] <timotimo> oh, when you look at the commit, it's much clearer

[00:22] <dalek> ecosystem: 6c42a57 | (Carl M√§sak)++ | META.list:

[00:22] <dalek> ecosystem: [META.list] add Text::Indented

[00:22] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/6c42a57503

[00:22] <lue> masak:    elsif $newindent < indent() { decreaseindent; }    isn't code-styled

[00:22] <masak> lue: thank you. fixing.

[00:23] <masak> it wasn't indented properly... ironically enough.

[00:24] <lue> :)

[00:25] <masak> hm, I wonder if the test cases are better off without their surrounding block braces...

[00:25] <timotimo> just indent them instead

[00:26] <masak> good idea.

[00:26] <Mouq> std: mi//

[00:26] <camelia> std 09dda5b: OUTPUT¬´===SORRY!===‚ê§Bogus term at /tmp/tBQzgJCKnP line 1 (EOF):‚ê§------> mi//‚èè<EOL>‚ê§Undeclared routine:‚ê§       'mi' used at line 1‚ê§Parse failed‚ê§FAILED 00:00 123m‚ê§¬ª

[00:29] <masak> curlies removed: http://strangelyconsistent.org/blog/parsing-indented-text

[00:32] *** hoverboard joined
[00:32] <masak> 'night, #perl6

[00:34] <lue> ‚ôû masak o/

[00:35] <timotimo> 'night masak 

[00:39] <timotimo> i would like a "use NativeCall::Library $path;" for use in blocks where all sub declarations are supposed to be "is native($path)"

[00:39] <timotimo> hm, but then wouldn't these subs have to be "our" scoped?

[00:39] <timotimo> r: { sub foo() { say "hi" } }; foo

[00:40] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Undeclared routine:‚ê§    foo used at line 1‚ê§‚ê§¬ª

[00:40] <timotimo> r: { our sub foo() { say "hi" } }; foo

[00:40] *** cognominal left
[00:40] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Undeclared routine:‚ê§    foo used at line 1‚ê§‚ê§¬ª

[00:40] <timotimo> er ...

[00:41] <vendethiel> Mouq, how did you look up a unicode char by its name already ? please :)

[00:47] <Mouq> vendethiel: I didn

[00:47] <Mouq> 't :)

[00:48] <Mouq> I grep'ped through all the characters and selected the ones that matched what I was looking for

[00:48] <Mouq> m: say (.base(16),.chr,.&uniname) if .&uniname ~~ /A/|/B/ for 0..0xffff

[00:49] <camelia> rakudo-moar ffa572: OUTPUT¬´(timeout)1  START OF HEADING‚ê§2  START OF TEXT‚ê§4  END OF TRANSMISSION‚ê§6  ACKNOWLEDGE‚ê§7  BELL‚ê§8  BACKSPACE‚ê§9      CHARACTER TABULATION‚ê§B  LINE TABULATION‚ê§D 

[00:49] <timotimo> oh my, boldface

[00:49] <vendethiel>  m: say (.base(16),.chr,.&uniname) if .&uniname ~~ /kiss/ for 0..0xffff

[00:49] <camelia> rakudo-moar ffa572: ( no output )

[00:49] <vendethiel>  m: say (.base(16),.chr,.&uniname) if .&uniname ~~ /KISS/ for 0..0xffff

[00:49] <camelia> rakudo-moar ffa572: ( no output )

[00:49] <Mouq> Haha

[00:49] <timotimo> why would you ~~ /A/|/B/ rather than /A|B/?

[00:49] <Mouq> Mine is blinking

[00:49] <tadzik> RESISTANCE IS FUTILE‚ê§YOU WILL BE ASSIMILATED

[00:49] <vendethiel> should match U+1F48B, U+1F48F, U+1F618

[00:50] <Mouq>  m: say (.base(16),.chr,.&uniname) if .&uniname ~~ /KISS/ for 0..0x1ffff

[00:50] <camelia> rakudo-moar ffa572: OUTPUT¬´1F48B üíã KISS MARK‚ê§1F48F üíè KISS‚ê§1F617 üòó KISSING FACE‚ê§1F618 üòò FACE THROWING A KISS‚ê§1F619 üòô KISSING FACE WITH SMILING EYES‚ê§1F61A üòö KISSING FACE WITH CLOSED EYES‚ê§1F63D üòΩ KISSING CAT FACE WITH CLOSED EYES‚ê§¬ª

[00:50] <vendethiel> Mouq++ # hugs n kisses

[00:51] <Mouq> üòò

[00:55] <Mouq>  m: say (.base(16),.chr,.&uniname) if .&uniname ~~ /MU/ for 0..0x1ffff

[00:55] <camelia> rakudo-moar ffa572: OUTPUT¬´D7 √ó MULTIPLICATION SIGN‚ê§39C Œú GREEK CAPITAL LETTER MU‚ê§3BC Œº GREEK SMALL LETTER MU‚ê§59D ÷ù HEBREW ACCENT GERESH MUQDAM‚ê§5A3 ÷£ HEBREW ACCENT MUNAH‚ê§749 ›â SYRIAC MUSIC‚ê§789 ﬁâ THAANA LETTER MEEMU‚ê§78D ﬁç THAANA LETTER LAAMU‚ê§A01 ‡®Å GURMUKHI S‚Ä¶¬ª

[00:56] <Mouq>  m: say (.base(16),.chr,.&uniname) if .&uniname ~~ /\bMU\b/ for 0..0x1ffff

[00:56] <camelia> rakudo-moar ffa572: ( no output )

[00:56] <Mouq> m: say "ÁÑ°".&uniname # ah

[00:57] <camelia> rakudo-moar ffa572: OUTPUT¬´<CJK Ideograph>‚ê§¬ª

[00:58] *** jnap left
[00:59] <lue> Its name should rather be <CJK UNIFIED IDEOGRAPH-7121> IIRC

[00:59] <timotimo> so uniname needs to have special handling if the name is "CJK Ideograph"?

[01:01] <lue> timotimo: well, there are ranges of codepoints where the name has to be generated. Forget the specific form for unified ideographs, but it's something like what I said.

[01:01] <timotimo> fair enough

[01:01] *** BenGoldberg left
[01:01] <timotimo> make tests? :3

[01:01] <lue> hopefully the name would be there from the start, instead a special handler in the name retrieval function :)

[01:02] <timotimo> well, this way the unicode database will be a bit smaller

[01:02] <timotimo> and if the names are just "CJK UNIFIED IDEOGRAPH-0001" through "CJK UNIFIED IDEOGRAPH-9999", that's quite a lot of space saved

[01:02] <lue> true

[01:03] <timotimo> that database isn't compressed in memory, mind you

[01:05] <timotimo> hoelzro: are you working on the vim syntax highlighting at all? it seems like "has $.y is rw" starts some kind of quoting at the y

[01:05] <timotimo> actually

[01:05] <timotimo> it thinks the i is a delimiter for a y/// quote, that's why the next 3 is are bold and after the third i it goes back to normal again m)

[01:07] <lue> we don't have y/// in the first place, unless I'm mistaken.

[01:07] <timotimo> right

[01:07] <timotimo> but the vim syntax highlighting sure thinks we do :)

[01:07] *** BenGoldberg joined
[01:17] <timotimo> well, if i write "has $.m is foo" it'll do the same thing

[01:18] <timotimo> r: given "hi there" { when sithereiwherei { say "oh" } }

[01:18] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!===‚ê§Function 'sithereiwherei' needs parens to avoid taking the block‚ê§at /tmp/tmpfile:1‚ê§------> here" { when sithereiwherei { say "oh" }‚èè }‚ê§Missing block (appar‚Ä¶¬ª

[01:18] <timotimo> so characters like these are not actually valid as terminators

[01:19] <timotimo> so it shouldn't even do it then

[01:19] <lue> timotimo: I also think variable names should be interpreted as variable names :)

[01:19] <timotimo> interestingly, it also recognizes $.y) as the beginning of a y/// and thinks the next ) is the second / in there

[01:19] <timotimo> yes, they should, but there's only so much you can do with just a lexer :P

[01:21] <timotimo> oh

[01:21] <timotimo> haha

[01:21] <timotimo> it was using the perl5 syntax highlighter all along

[01:22] <timotimo> with the p6 highlighter it works

[01:24] <lue> timotimo: you mentioning lexers reminds me that I'm reluctant to touch my p6-mode for emacs because it needs to effectively parse, not lex, Perl 6, and I worry that I can't do that without unavoidable slowdown :/

[01:25] <timotimo> yeah

[01:25] <lue> timotimo: do you have a link to the p6 highlighter? Might be helpful for me as a reference.

[01:25] <timotimo> i'm also kind of worried about my QtCreator integration project

[01:26] <timotimo> it comes pre-installed with vim

[01:26] <lue> ah, OK.

[01:26] <timotimo> er. at least i think it does

[01:29] *** jnap joined
[01:29] <lue> looking at perl6.vim: Various tricks depending on context. I.e. we can't know when Perl

[01:29] <lue> " expects ¬´*¬ª to be a string or a hyperoperator.

[01:31] <Mouq> lue: https://github.com/petdance/vim-perl

[01:31] <Mouq> j/k

[01:31] <Mouq> https://github.com/vim-perl/vim-perl

[01:32] <lue> I seriously wonder if implementing Perl6-scripting support for emacs (alongside ELisp) would be just as complex (or maybe even less so) than trying to write an ELisp-based Perl 6 mode :P

[01:32] <lue> Mouq: already found it :)

[01:32] *** BenGoldberg left
[01:33] *** jnap left
[01:38] *** raiph joined
[01:41] *** BenGoldberg joined
[02:01] <Mouq> r: sub infix:<pl-eq> is equiv<eq> ($a,$b) { True }

[02:01] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Missing block‚ê§at /tmp/tmpfile:1‚ê§------> sub infix:<pl-eq> is equiv<eq> ‚èè($a,$b) { True }‚ê§    expecting any of:‚ê§       ‚Ä¶¬ª

[02:01] <Mouq> r: sub infix:<pl-eq> is equiv(&[eq]) ($a,$b) { True }

[02:01] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Missing block‚ê§at /tmp/tmpfile:1‚ê§------> sub infix:<pl-eq> is equiv(&[eq]) ‚èè($a,$b) { True }‚ê§    expecting any of:‚ê§    ‚Ä¶¬ª

[02:01] <Mouq> r: sub infix:<pl-eq> ($a,$b) is equiv(&[eq]) { True }

[02:01] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: ( no output )

[02:02] <Mouq> r: sub infix:<pl-eq> ($a,$b) is equiv(&[eq]) { say ($a, $b) }; say "ship" pl-eq "ships" and "test" pl-eq "tests"

[02:02] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´ship ships‚ê§True‚ê§test tests‚ê§¬ª

[02:02] *** cognominal joined
[02:02] <Mouq> r: sub infix:<pl-eq> ($a,$b) { say ($a, $b) }; say "ship" pl-eq "ships" and "test" pl-eq "tests"

[02:02] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´ship ships‚ê§True‚ê§test tests‚ê§¬ª

[02:03] <Mouq> r: sub infix:<pl-eq> ($a,$b) { say ($a, $b) }; say "ship" pl-eq "ships" && "test" pl-eq "tests"

[02:03] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´ship ships‚ê§test tests‚ê§True‚ê§¬ª

[02:04] <Mouq> r: sub infix:<pl-eq> ($a,$b) { say ($a, $b) }; say "ship" pl-eq "ships" & "test" pl-eq "tests"

[02:04] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´ship ships‚ê§test tests‚ê§all(True, True)‚ê§¬ª

[02:04] <Mouq> r: sub infix:<pl-eq> ($a,$b) is equiv(&[eq]) { say ($a, $b) }; say "ship" pl-eq "ships" & "test" pl-eq "tests"

[02:04] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´ship ships‚ê§ship test‚ê§ships tests‚ê§test tests‚ê§all(True, True)‚ê§¬ª

[02:04] <Mouq> So it does work!

[02:04] <Mouq> \o/

[02:05] <Mouq> r: sub infix:<pl-eq> ($a,$b) is equiv<eq> { say ($a, $b) }; say "ship" pl-eq "ships" & "test" pl-eq "tests"

[02:05] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Can't use unknown trait 'is equiv' in a sub+{precedence} declaration.‚ê§at /tmp/tmpfile:1‚ê§------> ‚ê§    expecting any of:‚ê§        rw parcel hi‚Ä¶¬ª

[02:14] *** pecastro joined
[02:16] <TimToady> neither .parse nor .subparse will do scanning for you, because parsing doesn't scan unless you tell it to

[02:16] <TimToady> don't confuse parsing with what m// and s/// do

[02:18] <Mouq> Compare: http://api.metacpan.org/source/DCONWAY/Lingua-EN-Inflect-1.895/t/inflections.t and the hopeful https://gist.github.com/Mouq/dfe7388636027e527e86

[02:18] <TimToady> and .subparse is really just the old .parse semantics that didn't care about $ at the end

[02:19] <TimToady> arguably, .subparse should allow a :c option and .parse shouldn't :)

[02:20] <lue> TimToady: ah, and I see S05 implies that ^ is still a thing by mentioning "You may pass a :pos argument to start parsing at some position other than 0"

[02:20] <timotimo> ah, so subparse anchors $, but not ^?

[02:20] <lue> timotimo: other way

[02:20] <timotimo> er

[02:20] <timotimo> i think it may very well be helpful to speak of scanning or nonscanning behavior 

[02:21] <TimToady> basically, if you want to scan, put .*? <( at the front of your grammar

[02:21] <lue> timotimo: as I said, S05 implies (by way of talking about passing :pos) that ^ anchoring is a thing.

[02:21] <timotimo> oke

[02:21] <lue> Though in fairness it should be more explicit, and the preceding sentence saying "If you wish to parse a portion of a text, then use the .subparse method instead." almost defeats the implication by :pos

[02:21] <TimToady> well, since it doesn't scan. .parse (without a :pos) is automatically anchored

[02:22] <TimToady> but I dunno if it's really a good idea to restrict use of :pos to .subparse

[02:23] <TimToady> it's really more .parse-to-completion and .parse-to-somewhere

[02:23] <lue> You can use :p and :c with m// and friends, last I checked.

[02:25] *** xragnar_ joined
[02:25] *** xragnar left
[02:25] *** xragnar_ is now known as xragnar

[02:30] *** jnap joined
[02:34] *** jnap left
[02:35] <Mouq> p6: my $_ = $3 // '';

[02:35] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Potential difficulties:‚ê§  Useless redeclaration of variable $_ (see  line 0) at /tmp/tmpfile line 1:‚ê§------> my $_ ‚èè= $3 // '';‚ê§‚ê§¬ª

[02:35] <camelia> ..rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´Potential difficulties:‚ê§    Redeclaration of symbol $_‚ê§    at /tmp/tmpfile:1‚ê§    ------> my $_ ‚èè= $3 // '';‚ê§¬ª

[02:36] <Mouq> r: my $_ = $3 // ''; m/test/

[02:36] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´Potential difficulties:‚ê§    Redeclaration of symbol $_‚ê§    at /tmp/tmpfile:1‚ê§    ------> my $_ ‚èè= $3 // ''; m/test/‚ê§¬ª

[02:37] <Mouq> I wonder why I'm getting a LTA error for that

[02:37] <TimToady> well, you are redeclaring $_ uselessly

[02:38] <Mouq> TimToady: Yeah, but I'm getting

[02:38] <Mouq> ===SORRY!===

[02:38] <Mouq> Cannot find method 'value'

[02:38] <Mouq> And I'm having trouble golfing it

[02:38] <TimToady> r: my multi $_ = $3 // ''; m/test/

[02:38] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´Potential difficulties:‚ê§    Redeclaration of symbol $_‚ê§    at /tmp/tmpfile:1‚ê§    ------> my multi $_ ‚èè= $3 // ''; m/test/‚ê§¬ª

[02:38] <TimToady> n: my multi $_ = $3 // ''; m/test/

[02:38] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´===SORRY!===‚ê§‚ê§Multi variables NYI at /tmp/5d_L1gaITr line 1:‚ê§------> my multi $_ ‚èè= $3 // ''; m/test/‚ê§‚ê§Potential difficulties:‚ê§  Useless redeclaration of variable $_ (see  line 0) at /tmp/5d_L1gaITr l‚Ä¶¬ª

[02:39] <Mouq> (Solved by using `given` in this case, but that error is awful)

[02:39] <TimToady> m: $_ = $3 // ''; m/test/

[02:39] <camelia> rakudo-moar ffa572: ( no output )

[02:44] *** klapperl joined
[02:47] *** klapperl_ left
[02:48] *** FROGGS_ joined
[02:51] *** Sqirrel left
[02:52] *** FROGGS left
[02:52] *** Sqirrel joined
[03:06] *** iolympian joined
[03:06] *** iolympian left
[03:24] *** raiph left
[03:28] *** rurban1 joined
[03:30] *** jnap joined
[03:35] *** jnap left
[03:41] *** logie_ joined
[03:58] *** xenoterracide left
[04:11] *** hoverboard left
[04:18] *** thou joined
[04:31] *** jnap joined
[04:35] *** jnap left
[04:40] *** adu joined
[04:44] *** kaare__ joined
[04:47] *** xenoterracide joined
[04:52] *** xenoterracide left
[04:55] *** japhb joined
[04:59] *** japhb_ joined
[05:09] *** xenoterracide joined
[05:18] *** yves__ joined
[05:20] *** rurban1 left
[05:28] *** adu left
[05:32] *** jnap joined
[05:36] *** jnap left
[05:38] *** darutoko joined
[05:40] *** thou left
[05:43] *** Guest97287 is now known as ponbiki

[05:45] *** Mouq left
[06:02] *** rurban1 joined
[06:03] *** slavik left
[06:04] *** SamuraiJack_ joined
[06:06] *** rurban1 left
[06:33] *** jnap joined
[06:37] *** jnap left
[06:38] *** SamuraiJack_ left
[06:43] <moritz> good morning

[06:43] <moritz> http://dilbert.com/fast/2014-03-23/ apples to oranges!

[06:44] *** Mouq joined
[06:49] *** Mouq left
[06:54] *** japhb_ left
[06:55] *** japhb left
[06:57] *** japhb joined
[06:59] *** japhb_ joined
[07:03] *** rurban1 joined
[07:07] *** rurban1 left
[07:34] *** jnap joined
[07:38] *** jnap left
[07:40] *** BenGoldberg left
[08:03] *** rurban1 joined
[08:03] *** Fg_ left
[08:08] *** rurban1 left
[08:15] *** xenoterracide left
[08:30] *** rindolf joined
[08:34] *** jnap joined
[08:35] *** nagu left
[08:39] *** jnap left
[08:40] *** kivutar left
[08:40] *** sqirrel_ joined
[08:54] *** virtualsue joined
[09:04] *** rurban1 joined
[09:09] *** rurban1 left
[09:12] *** rindolf left
[09:19] *** kurahaupo joined
[09:19] *** dmol joined
[09:24] *** mls_ joined
[09:27] *** mls left
[09:27] *** SamuraiJack_ joined
[09:34] *** virtualsue left
[09:34] <masak> antenoon, #perl6

[09:34] <masak> today's autopun spotting: https://twitter.com/indec/status/447201158222712832

[09:35] *** bjz left
[09:35] <moritz> \o masak 

[09:35] *** jnap joined
[09:35] *** bjz joined
[09:35] <moritz> nice one

[09:35] <masak> best response to that one so far: 'wait, where is the second tweet?'

[09:36] <FROGGS_> :o)

[09:36] *** mls joined
[09:37] *** rindolf joined
[09:40] *** mls_ left
[09:40] *** jnap left
[09:40] *** pippo_ joined
[09:40] *** denis_boyun joined
[09:41] *** mls_ joined
[09:44] *** mls left
[09:46] *** virtualsue joined
[09:46] *** mls joined
[09:47] *** mls_ left
[09:56] *** daniel-s left
[09:57] *** daniel-s joined
[10:07] *** rurban1 joined
[10:07] *** dagurval left
[10:08] *** dagurval joined
[10:09] *** Gothmog_ left
[10:10] *** Gothmog_ joined
[10:11] *** rurban1 left
[10:12] *** mls_ joined
[10:15] *** mls left
[10:17] *** mls joined
[10:18] *** mls_ left
[10:22] *** mls_ joined
[10:24] *** mls left
[10:26] *** mls_ left
[10:27] *** mls joined
[10:28] *** slavik joined
[10:36] *** jnap joined
[10:40] *** jnap left
[10:41] <vendethiel> masak: in your blog post, header "multi-step de-indents", you say `is $root.items.elems, 3, 'three things on the top level';`, when it looks to me there's only 2

[10:44] *** spider-mario joined
[10:49] *** JimmyZ_ joined
[10:51] <nwc10> .tell arnsholt was "cmd: Rounded run time per iteration: 1.5828e+02 +/- 7.2e-01 (0.5%)", jastcompiler "cmd: Rounded run time per iteration: 1.457e+02 +/- 1.5e+00 (1.0%)"

[10:51] <yoleaux> nwc10: I'll pass your message to arnsholt.

[10:52] *** sjn_ joined
[10:52] *** virtualsue left
[10:53] <masak> vendethiel: the three "things" are (a) a line, (b) a suite, (c) another line.

[10:53] <masak> vendethiel: suites are "located" in the indentation level above them.

[10:53] <masak> vendethiel: put differently a suite is a sequence of Str|Suite objects.

[10:53] <masak> actually, I wanted to declare @.items as a subtype of Any where { Str | Suite }

[10:53] <masak> but I found no way to use the subtype "early enough", before the class block was closed.

[10:53] <vendethiel> ah, alright

[10:54] <masak> m: class Foo { subtype Item of Any where Str | Foo; has Item @.items }; say "alive"

[10:54] <masak> camelia, you there?

[10:54] *** sjn left
[10:54] <camelia> rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/a5P3aMpZbG‚ê§Two terms in a row‚ê§at /tmp/a5P3aMpZbG:1‚ê§------> class Foo { subtype Item of Any ‚èèwhere Str | Foo; has Item @.items }; say‚ê§    expecting any of:‚ê§        post‚Ä¶¬ª

[10:55] *** hugme left
[10:55] <masak> vendethiel: conceptually, it makes sense, I think.

[10:55] *** hugme joined
[10:55] *** ChanServ sets mode: +v hugme

[10:55] <masak> vendethiel: because a suite is "grouped together" and in some sense gets treated the same way as one line.

[10:55] *** Bucciarati joined
[10:55] <vendethiel> it does, it does

[10:55] <masak> m: class Foo { subset Item of Any where Str | Foo; has Item @.items }; say "alive"

[10:55] <camelia> rakudo-moar ffa572: OUTPUT¬´alive‚ê§¬ª

[10:55] <masak> huh.

[10:56] <masak> m: class Foo { subset Item of Any where Str | Foo; has Item @.items }; given Foo.new { .items.push("foo"); .items.push(Foo.new); .items.push(42) }; say "alive"

[10:56] <camelia> rakudo-moar ffa572: OUTPUT¬´Type check failed in .push; expected 'Item' but got 'Int'‚ê§  in block  at src/gen/m-CORE.setting:7967‚ê§  in method push at src/gen/m-CORE.setting:7953‚ê§  in method push at src/gen/m-CORE.setting:1610‚ê§  in block  at /tmp/komlFzrLWG:1‚ê§‚ê§¬ª

[10:56] <masak> ooh, it works.

[10:56] * masak adds it to the code

[10:57] *** anocelot left
[10:57] *** anocelot joined
[10:57] <masak> m: class Foo { subset Item where Str | Foo; has Item @.items }

[10:57] <camelia> rakudo-moar ffa572: ( no output )

[10:57] <masak> ooh, even that works.

[10:58] <vendethiel> well, of Any is implicit

[10:58] <masak> apparently.

[10:59] <masak> sometimes I suffer from old war wounds and PTSD of earlier iterations of Rakudo :P

[11:00] <masak> what's a nice way to turn the string "PartialIndent" into "partial indent" in Perl 6?

[11:00] <FROGGS_> good that I joined that late :o)

[11:01] <masak> for that matter, how do I match on uppercase?

[11:01] <vendethiel> [:upper:] ?

[11:01] <FROGGS_> m: say 'PartialIndent'.split(/<?:Lu>/)

[11:01] <camelia> rakudo-moar ffa572: OUTPUT¬´ Partial Indent‚ê§¬ª

[11:02] <masak> m: say "PartialIndent".comb(/<:Lu><:Ll>+/)

[11:02] <camelia> rakudo-moar ffa572: OUTPUT¬´Partial Indent‚ê§¬ª

[11:02] <FROGGS_> m: say 'PartialIndent'.split(/<?:Lu>/)>>.lc.grep(?*).join(' ')

[11:02] <camelia> rakudo-moar ffa572: OUTPUT¬´partial indent‚ê§¬ª

[11:02] <masak> yeah.

[11:02] <masak> FROGGS_++

[11:03] <masak> m: say "PartialIndent".comb(/<:Lu><:Ll>+/)>>.lc.join(' ')

[11:03] <camelia> rakudo-moar ffa572: OUTPUT¬´partial indent‚ê§¬ª

[11:04] <masak> hehe, I've never used a call to an inner sub in a parameter default before :) it works.

[11:06] <masak> m: class PartialIndent {}; sub say-nicely($c, $message = format-nicely $c.^name) { sub format-nicely($string) { $string.comb(/<:Lu><:Ll>+/)>>.lc.join(' ') }; say $message }; say-nicely PartialIndent

[11:06] <camelia> rakudo-moar ffa572: OUTPUT¬´partial indent‚ê§¬ª

[11:07] *** rurban1 joined
[11:08] <FROGGS_> interesting O.o

[11:08] <vendethiel> Perl6++

[11:09] <vendethiel> looks more like an implem. detail to me, though ?

[11:09] <vendethiel> Is it speced that way ?

[11:09] <FROGGS_> n: class PartialIndent {}; sub say-nicely($c, $message = format-nicely $c.^name) { sub format-nicely($string) { $string.comb(/<:Lu><:Ll>+/)>>.lc.join(' ') }; say $message }; say-nicely PartialIndent

[11:09] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´partial indent‚ê§¬ª

[11:11] <FROGGS_> why does that even work?

[11:12] <vendethiel> probably because the "default" is pushed inside the body

[11:12] *** rurban1 left
[11:13] <FROGGS_> it only works for subs, not for vars btw

[11:13] <vendethiel> probably because of that

[11:13] <vendethiel> r: say $a; my $a = 5;

[11:13] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Variable '$a' is not declared‚ê§at /tmp/tmpfile:1‚ê§------> say $a‚èè; my $a = 5;‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[11:13] <vendethiel> r: say a; sub a { 5; }

[11:13] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´5‚ê§¬ª

[11:13] <FROGGS_> r: say a; { sub a { 5; } }

[11:14] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Undeclared routine:‚ê§    a used at line 1‚ê§‚ê§¬ª

[11:14] <FROGGS_> that should happen

[11:14] <vendethiel> subs are hoisted, so even if compilers transform `sub stuff($foo = a) { sub a { 5 }; say $foo; }`

[11:14] <vendethiel> to `sub stuff($foo = a) { sub a { 5 }; $foo = a; say $foo; }`

[11:14] <vendethiel> this will work - that's my guess, at least.

[11:16] <vendethiel> I meant, transform it to `sub stuff($foo?) { $foo = a; sub a { 5 }; say $foo; }`

[11:16] <FROGGS_> hmmm

[11:20] *** xenoterracide joined
[11:24] *** Ulti_ joined
[11:27] *** hoelzro_ joined
[11:28] *** tokuhirom_ joined
[11:29] *** pecastro_ joined
[11:29] *** hugme left
[11:29] *** Gothmog_ left
[11:29] *** dagurval left
[11:29] *** rindolf left
[11:29] *** kurahaupo left
[11:29] *** pecastro left
[11:29] *** araujo left
[11:29] *** dalek left
[11:29] *** masak left
[11:29] *** Yappo__________8 left
[11:29] *** sjohnson left
[11:29] *** cosimo left
[11:30] *** tokuhirom_ is now known as tokuhirom

[11:30] *** dalek joined
[11:30] *** ChanServ sets mode: +v dalek

[11:30] *** Gothmog_ joined
[11:31] *** denis_boyun left
[11:31] *** ilbot3 joined
[11:32] *** breinbaas joined
[11:32] *** araujo joined
[11:32] *** jlaire joined
[11:33] *** masak joined
[11:34] *** masak is now known as Guest23182

[11:37] *** jnap joined
[11:37] *** cosimo joined
[11:37] *** Yappo__________8 joined
[11:37] *** jtpalmer joined
[11:39] *** hugme joined
[11:39] *** ChanServ sets mode: +v hugme

[11:41] *** rindolf joined
[11:41] *** jnap left
[11:43] *** kivutar joined
[11:43] *** rurban joined
[11:44] *** sjohnson joined
[11:45] *** Guest23182 is now known as masak_

[11:45] <masak_> grrr.

[11:45] *** dagurval joined
[11:45] *** dagurval left
[11:45] *** dagurval_ joined
[11:48] <masak_> vendethiel: no, Perl 6 doesn't do sub hoisting.

[11:48] <vendethiel> masak_: how do you call it then ?

[11:48] <masak_> vendethiel: it's just that you can call a sub before you declare it.

[11:48] <vendethiel> r: say a; sub a { 5 }

[11:48] *** rurban1 joined
[11:48] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´5‚ê§¬ª

[11:48] <masak_> vendethiel: as long as it's visible in the scope where you're calling it.

[11:48] *** IllvilJa left
[11:48] <vendethiel> that's what I call hoisting, yes

[11:49] <masak_> vendethiel: and subs in the big sub are visible from its parameter list.

[11:49] <masak_> vendethiel: well, in JavaScript where they talk about hoisting, there's an actual separation between declaration and initialization sometimes.

[11:49] <masak_> vendethiel: nothing of that sort happens in Perl 6.

[11:50] <masak_> vendethiel: a sub declared with the 'sub' keyword is simply visible within its scope at all times. it doesn't get assigned at the top of the block, not even conceptually.

[11:50] <masak_> it just is.

[11:51] <vendethiel> in JS, variables declarations (only the name) are hoisted, but named functions are hoisted (with their body) - that's the difference

[11:51] <vendethiel> doesn't mean "hoisting" is a less fit word for what perl6 is doing, is it ?

[11:52] <masak_> to me it's a bad fit, because I associate it with pieces of code (conceptually) moving around in the source during compilation.

[11:52] <masak_> that doesn't happen in Perl 6.

[11:53] <masak_> instead, the parser assumes that the thing you called which it doesn't recognize is a sub that you will declare later. if you don't -- error.

[11:53] <vendethiel> that's a bit of an implementation detail though

[11:54] <vendethiel> but that's why I asked how you'd call it

[11:56] <masak_> "calling a sub before it's declared" :)

[11:56] <masak_> &

[11:56] <vendethiel> well - fair enough then

[11:58] *** pippo__ joined
[11:58] *** pippo__ left
[12:00] *** sqirrel_ left
[12:03] *** virtualsue joined
[12:14] *** IllvilJa joined
[12:14] *** xenoterracide left
[12:19] *** brrt joined
[12:37] *** jnap joined
[12:41] *** Sqirrel left
[12:42] *** jnap left
[12:45] *** Sqirrel joined
[12:50] *** masak_ is now known as masak

[12:51] *** masak is now known as Guest64457

[12:51] *** Guest64457 is now known as masak_

[12:59] *** Mouq joined
[13:00] *** Sqirrel left
[13:06] <tadzik> Cannot call 'Real'; none of these signatures match:

[13:06] <tadzik> :(Mu:U \v: *%_)

[13:06] <tadzik> wat

[13:06] <tadzik> I don't even know where to look :o

[13:06] <FROGGS_> --ll-exception?

[13:06] *** Sqirrel joined
[13:07] <colomon> Text::Indented!  \o/

[13:07] <FROGGS_> tadzik: btw, do you have a nqp-2014.03 tarball that an be uploaded by someone who has perms?

[13:07] <tadzik> oh, forgot about that

[13:07] * FROGGS_ .oO( Pun::Intended? )

[13:07] <tadzik> no, I have to create one

[13:08] <FROGGS_> k, because I no permissions to upload it, otherwise I had tried

[13:08] <FROGGS_> ahh, and tag MoarVM perhaps?

[13:08] <FROGGS_> I think this did not happened yet

[13:08] <FROGGS_> did not happen*

[13:08] <tadzik> I thought jnthn did that

[13:08] <tadzik> he was releasing moarvm

[13:09] <tadzik> btw, my game is aweosme

[13:09] <tadzik> I'll release and blog about it in the coming hours :)

[13:09] <FROGGS_> https://github.com/MoarVM/MoarVM/releases

[13:09] <tadzik> and I'll do a contest of sorts

[13:09] <FROGGS_> yay!

[13:09] <tadzik> stay tuned!

[13:09] <FROGGS_> tadzik++

[13:09] <FROGGS_> I will :o)

[13:09] <FROGGS_> and btw, I think my slides are going to be awesome :o)

[13:11] *** Sqirrel left
[13:12] <masak_> colomon: I like it when five-minute "hm, this shouldn't be so hard..." hack sessions turn into a 3-hour adventure.

[13:12] *** Timbus left
[13:12] <masak_> colomon: I should do more of that :)

[13:12] <colomon> +1

[13:13] * colomon hates it when five-minute "hm, this shouldn't be so hard..." hack sessions turn into weeks of (unbillable) $work

[13:13] <JimmyZ_> tadzik: I played your game, and I got segfault when free the game

[13:14] <masak_> I should add that it was three hours of *straightforward* hacking. no blockers anywhere, really.

[13:14] <tadzik> JimmyZ_: which one?

[13:14] <tadzik> JimmyZ_: and, you probably need to update your moarvm

[13:14] <dalek> nqp: 9ef5690 | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[13:14] <dalek> nqp: bumped moar revision

[13:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9ef5690691

[13:15] <JimmyZ_> tadzik: segfault at https://github.com/tadzik/p6steroids/blob/master/test.pl#L289

[13:16] <tadzik> JimmyZ_: is it on moarvm?

[13:16] <JimmyZ_> yeah

[13:16] <tadzik> if yes, then is moarvm up to date?

[13:16] <tadzik> because I've seen that before, and it goes away when you update moarvm

[13:16] <tadzik> (or use a different backend :))

[13:17] <JimmyZ_> not sure, I can confirm it tomorrow

[13:17] *** JimmyZ_ is now known as JimmyZ

[13:17] <colomon> nativecall is working well enough on Moar to use SDL?!?

[13:18] <JimmyZ> yeah

[13:18] <colomon> \o/

[13:19] <tadzik> colomon: sure it is

[13:19] <tadzik> colomon: wait till you see my gaem :D

[13:20] <colomon> hmmm, sdl for mac....

[13:20] <tadzik> sdl2

[13:20] <colomon> SDL2-2.0.3.dmg downloading...

[13:21] <tadzik> :)

[13:21] * colomon should really be $working...

[13:21] <tadzik> FROGGS_: uploaded

[13:21] <tadzik> thanks for the reminder

[13:21] <FROGGS_> tadzik++

[13:22] <colomon> updating my rakudo...

[13:23] *** lue joined
[13:23] *** sjn_ is now known as sjn

[13:24] * colomon has figured out a way to duplicate his $work bug not on Windows Vista!  o/

[13:24] <tadzik> \o/

[13:25] <FROGGS_> \o/

[13:25] <colomon> now the only step left to fixing it before the deadline today is "a miracle occurs".

[13:26] <FROGGS_> :/

[13:26] <FROGGS_> turn it off and on again?

[13:28] <Mouq> colomon: You may need to get SDL_gfx

[13:28] <colomon> errr‚Ä¶ ^D doesn't work to exit the perl6-m REPL on OS X?

[13:28] <Mouq> ^C ?

[13:29] <colomon> Mouq: yes, that did it.  ^Z didn't, weirdly enough.

[13:30] <colomon> sdlwrapper.c:2:10: fatal error: 'SDL_gfxPrimitives.h' file not found

[13:30] <colomon> sounds like Mouq was right

[13:31] <tadzik> oh, that's a different game

[13:31] <tadzik> behold! https://github.com/tadzik/ThroughTheWindow

[13:31] <tadzik> colomon: this one is sdl2, no other deps

[13:31] <tadzik> please give it a try

[13:31] <tadzik> and do play the manual soundtrack, it's an important part

[13:32] *** Sqirrel joined
[13:34] <tadzik> github did weird things to the readme

[13:34] <colomon> ld: library not found for -lnsl

[13:35] * colomon does not remember if he has heard Me First etc do this one before.

[13:35] <tadzik> :o

[13:35] <masak_> tadzik: looks like you wanted README.md

[13:35] <tadzik> masak_: yeah, that too

[13:35] <tadzik> colomon: ah, the flags may be different on a mac :|

[13:35] <geekosaur> nsl? that's a solaris thing

[13:35] <tadzik> there is some arcane incantation in zavolaj's repo

[13:35] <geekosaur> most other systems have it in libc

[13:38] * colomon is totally failing to get this makefile to work.

[13:38] *** jnap joined
[13:39] *** Sqirrel left
[13:41] <tadzik> colomon: have no fear

[13:41] <tadzik> I'm putting together a Configure.pl that'll work

[13:42] <Mouq> tadzik++

[13:42] <Mouq> (I can't either)

[13:42] *** jnap left
[13:44] <colomon> \o/

[13:44] <timotimo> well, i could install and play the beta version yesterday

[13:44] *** daniel-s left
[13:45] * Mouq got further by adding "-I/Library/Frameworks/SDL.framework/Headers -framework SDL"

[13:45] <tadzik> colomon: should work now

[13:45] <timotimo> Mouq: isn't sdl2-config supposed to do that for you?

[13:45] * colomon had added -I~/Frameowkrs/SDL2.framework/Headers to his makefile

[13:46] <colomon> make: sdl2-config: Command not found

[13:46] <Mouq> Bluh, SDL2 would probably be a good idea

[13:46] <tadzik> bah

[13:47] <tadzik> those macs

[13:47] <tadzik> is there a dev-package for macs, like libsdl2-dev for debians?

[13:48] <colomon> tadzik: checking it now

[13:48] <tadzik> cross-platformism, y u so hard

[13:49] <colomon> the alleged devel platform doesn't have it either.

[13:50] <colomon> I'm going to try building from source

[13:51] <tadzik> :|

[13:52] <tadzik> colomon: did you check /sw/bin and /opt/local/bin?

[13:52] *** dmol left
[13:52] <colomon> tadzik: it's a framework, everything is in ~/Library

[13:52] <tadzik> internet says it might be there

[13:52] <tadzik> ah

[13:52] <colomon> I'm going to use the Source

[13:53] <Mouq> I definitely don't have a `sdl2-config`

[13:54] <colomon> okay, make worked this time

[13:54] <colomon> starting music...

[13:54] <colomon> doh, no nativecall!

[13:56] *** kaare__ left
[13:56] *** guru joined
[13:57] *** guru is now known as Guest97139

[13:57] *** Guest97139 is now known as ajr_

[13:58] *** kaare__ joined
[13:58] *** kaare__ is now known as kaare_

[13:59] <Mouq> Haha, tadzik++

[13:59] <Mouq> Got it working after installing from the SDL2 source

[13:59] *** SamuraiJack_ left
[14:00] <tadzik> :)

[14:02] <colomon> ===========================================

[14:02] <colomon>  Game over! You traveled 532 pixels

[14:02] <colomon> ===========================================

[14:02] <colomon> 2684 ticks in 533 iterations

[14:02] <colomon> That's 5.035647 ticks per update

[14:02] <colomon> Longest frame took 49 ticks

[14:02] <colomon> 13 frames skipped

[14:03] *** dmol joined
[14:03] <colomon> tadzik++

[14:03] <tadzik> :)

[14:03] <tadzik> Congratulations :)

[14:07] <masak_> tadzik++

[14:07] *** masak_ is now known as masak

[14:10] *** iolympian1 joined
[14:10] *** FROGGS_ is now known as FROGGS

[14:11] <Mouq> tadzik: https://gist.github.com/Mouq/0eddb558f2dbf3b1b1c0

[14:12] <tadzik> ah :)

[14:12] <tadzik> nice improvement

[14:13] <tadzik> I'll apply it as soon as I finish writing the blog post

[14:13] <Mouq> Well, except that you can just hop in the air continuously :)

[14:13] <tadzik> wait, I don't immediately get it

[14:13] <tadzik> what does it do?

[14:13] <tadzik> I thought it's "press longer to jump higher"

[14:14] <tadzik> but now I'm not sure :)

[14:14] <Mouq> Yeah, but I didn't fix it to make it only work once

[14:16] <tadzik> wordpress is crazy

[14:16] * lizmat just had to get back to Perl 5 to prevent a CPAN module getting bumped from Debian

[14:22] <Mouq> Haha, this is actually harder than the original https://gist.github.com/Mouq/a12b912ecbd7999bd5c4

[14:22] *** Sqirrel joined
[14:23] <Mouq> (Well, assuming you don't just hold <space> indefinitely :P)

[14:34] *** denis_boyun joined
[14:36] <tadzik> lol, I blug: http://ttjjss.wordpress.com/2014/03/23/perl-6-on-steroids-through-the-window/

[14:37] <vendethiel> tadzik++ # lots of people making that same mistakes right now ;-)

[14:37] <tadzik> :)

[14:38] <Mouq> tadzik++

[14:38] <vendethiel> "I chose Perl 6 for performance reasons! Ain‚Äôt that something to tell my grandkids about." Ha !

[14:39] *** jnap joined
[14:39] <vendethiel> tadzik: aren't dashes more perl6-y than underscore, though ?

[14:40] * vendethiel .oO(Hoping that won't start a flame war ...)

[14:40] <masak> it's a matter of taste, IMHO.

[14:40] <vendethiel> definitely, but it's nice to have conventions

[14:40] <masak> some people say that "dashes are for high-level APIs, underscores for low-level APIs"

[14:40] <moritz> it_kinda_is

[14:40] <masak> but even that is a rule of thumb.

[14:41] <masak> personally, I like the highlighting that vim gives me when I use underscores :>

[14:41] <tadzik> vendethiel: yeah, they are. Did I leave _ somewhere?

[14:41] <vendethiel> "vim driven development"

[14:41] <Mouq> tadzik: The only thing major thing I've run into was that if you set a velocity to a non-Int/int, it breaks mysteriously because x and y expect to be Int. Easy fix, but was annoying when I ran into it

[14:41] <masak> vendethiel: Perl 6 has conventions, but mostly it leaves you to go forth and be a responsible adult. :)

[14:42] <vendethiel> tadzik: I mean the method names

[14:42] <tadzik> Mouq: oh, also you may get stuck in a ground at some point :)

[14:42] <tadzik> vendethiel: oh, indeed

[14:42] <Mouq> tadzik: Hasn't happened yet :)

[14:43] <tadzik> Mouq: the proper way to handle this would be to, in physics(), move everything pixel-by-pixel, checking events every time

[14:43] <tadzik> otherwise, you may get right through an obstacle, and the collision detection will never kick in

[14:43] <tadzik> I got away without it because the jump always ends exactly at the ground level, not lower :P

[14:43] <moritz> tadzik++ # blog, game

[14:44] <timotimo> it'll be easy to turn that game into FlappyRunner

[14:44] *** jnap left
[14:44] <tadzik> yep :)

[14:44] <moritz> I see that tadzik got the essentials of game programming correct already: cheat wherever you can :-)

[14:45] <vendethiel> I remember that from a game called TeeWorlds. If you went really, really fast, you'd just get through obstacles :D.

[14:45] <tadzik> I did my homework :P

[14:45] <tadzik> ha, Teeworlds!

[14:48] <timotimo> teeworlds is cool

[14:48] *** iolympian1 left
[14:50] <vendethiel> They don't really have that much dev though, iirc

[14:52] <Mouq> Isn't there a way to round a number to a certain precision in Perl 6?

[14:52] <Mouq> Oh, round

[14:52] <Mouq> :P

[14:53] <tadzik> hah

[14:53] * masak .oO( couldn't they have given it a more intuitive name? ) :P

[14:53] <tadzik> I think C++ has set_precision or something

[14:53] <tadzik> someone should have round_to_precision

[14:55] <Mouq> tadzik: btw, are you putting steroids into the ecosystem?

[14:55] *** brrt left
[14:55] <tadzik> Mouq: at some point, yes

[14:56] <Mouq> tadzik: Sweet :)

[14:56] <colomon> dash!  dash!  dash!

[14:56] <tadzik> now, a new challenge

[14:56] <tadzik> package moarvm, rakudo along with the game, to distribute a single executable

[14:56] * colomon was apparently backlogging without realizing it...

[15:00] <masak> colomon: that discussion was so 20 minutes ago! :P

[15:01] <tadzik> nice, I can bundle moarvm and rakudo with the game, and it only weights 22 MBs

[15:01] <tadzik> I wonder if it works though

[15:01] <moritz> is Moar relocatable?

[15:02] <tadzik> yes

[15:02] <tadzik> apparently

[15:02] <tadzik> I'll try to run it a new user account

[15:02] <tadzik> heh, I have a user "timo" here

[15:03] *** thou joined
[15:03] <tadzik> yep, it works :)

[15:03] * moritz has a user "tjs" here

[15:03] * moritz deletes

[15:04] <moritz> oh wait, I was on feather

[15:04] <timotimo> \o/

[15:04] <moritz> (just kidding)

[15:04] <timotimo> only 22 megabytes for the whole game!

[15:04] <timotimo> is that compressed?

[15:05] <tadzik> :D

[15:05] <tadzik> no, uncompressed

[15:05] <tadzik> I just copied a some moarvm files

[15:06] <tadzik> https://gist.github.com/tadzik/9724234

[15:06] <tadzik> who'll be the first to write a bundler? :)

[15:06] <moritz> au usually is :-)

[15:06] <tadzik> :)

[15:07] <tadzik> ah, it's dynlinked to /home/tadzik/.rakudobrew/moar-HEAD/install/lib/libmoar.so

[15:08] <tadzik> booo

[15:08] <tadzik> so, +3.5 megabytes

[15:08] <tadzik> also, semi-relocatable :/

[15:08] <timotimo> well, that's quite a bit of cost for boilerplate, but i'd assume it grows very slowly

[15:09] <timotimo> due to the expressiveness of Perl‚ÄØ6 code :P

[15:09] <tadzik> :)

[15:10] <timotimo> it's not quite a 96k game, that's for sure

[15:10] <tadzik> not with the runtime :)

[15:11] *** breinbaas left
[15:13] *** breinbaas joined
[15:18] *** virtualsue left
[15:19] *** brrt joined
[15:19] *** jnap joined
[15:23] <moritz> well, the 96k games also don't contain the complete design of the processor and the operating system

[15:25] <timotimo> :)

[15:26] *** zakharyas joined
[15:26] <Mouq> This is pretty awesome to be able to play around with. tadzik++

[15:29] *** rindolf left
[15:30] <tadzik> :) thank you

[15:37] *** jnap left
[15:39] *** rindolf joined
[15:46] *** denis_boyun left
[15:47] *** spider-mario left
[15:47] <Mouq> Finally got hold-to-jump right https://github.com/Mouq/ThroughTheWindow

[15:48] <Mouq> .oO( What, I was planning on doing things today? No. Nope, not anymore :P )

[15:49] *** rindolf left
[15:53] <tadzik> :)

[15:54] <tadzik> I see that you're getting ready for the contest :)

[15:54] <masak> tadzik: ss/I'll be better <(of)>/off/

[15:55] *** Timbus joined
[15:58] <tadzik> oh, thank you

[16:05] *** mtk left
[16:16] <moritz> masak: that )> was redundant :-)

[16:17] <masak> hah. :)

[16:20] *** kivutar left
[16:21] <itz__> does panda have moar-support merged I forget?

[16:22] <Mouq> itz__: It does :)

[16:30] *** SamuraiJack_ joined
[16:34] *** kurahaupo joined
[16:46] *** Ulti_ is now known as Ulti

[17:18] *** kurahaupo left
[17:20] *** pmurias joined
[17:21] <pmurias> tadzik: MoarVM is faster then typescript?

[17:22] <masak> pmurias: I honestly don't know by which measure TypeScript would be "slow". it compiles down to JavaScript, mostly by erasure.

[17:23] <timotimo> pmurias: only compile-time wise ;)

[17:23] <pmurias> that's what I suspected

[17:24] <pmurias> timotimo: so the compiler startup is slow?

[17:25] <pmurias> (when not using an IDE for it?)

[17:25] *** mls_ joined
[17:26] <moritz> well, generated javascript could also be suffciently indirect to be slow

[17:27] <timotimo> that's kind of hard for javascript

[17:27] <timotimo> given how crazy v8 and friends are

[17:28] *** mls left
[17:30] <moritz> how fast is nqp-js?

[17:33] <timotimo> oh ... well ...

[17:33] <timotimo> you may have a point there :)

[17:36] <vendethiel> though js might be the fastest backend

[17:40] *** ajr_ left
[17:40] *** guru joined
[17:41] *** kurahaupo joined
[17:41] *** guru is now known as Guest65722

[17:41] *** Guest65722 is now known as ajr_

[17:51] *** kurahaupo left
[17:52] *** xenoterracide joined
[17:53] *** brrt left
[17:56] *** ajr_ left
[17:59] *** kurahaupo joined
[18:04] *** xenoterracide left
[18:10] *** xenoterracide joined
[18:11] *** hoverboard joined
[18:15] *** SamuraiJack_ left
[18:19] *** avar joined
[18:19] *** avar left
[18:20] *** avar joined
[18:21] *** kurahaupo left
[18:28] *** ajr_ joined
[18:34] <timotimo> how should i implement :chomp for quoting?

[18:35] <timotimo> so far, there's a "method postprocess", for things like run, var, words, ...

[18:35] <timotimo> it would probably make sense to implement it as a postprocessor, but the current model only envisions a single postprocessor to exist

[18:36] <jnthn> With mixins, same as the other adverbs.

[18:36] <timotimo> yeah, but when i mixin a method postprocessor, it will only call that

[18:36] <jnthn> Then just check if the language has a .chomp or so

[18:37] <timotimo> i thought of that, too, but i thought it would pessimize all quotings

[18:37] <jnthn> The postprocessor can look at other properties, no?

[18:37] <timotimo> i'm not sure i understand

[18:37] <timotimo> you mean i should teach all postprocessors to look if there's a .chomp?

[18:37] <jnthn> ah, I see what you mean...it wants to work with all of them.

[18:37] <jnthn> Hmmm.

[18:38] <timotimo> yes, it does

[18:38] <jnthn> Maybe it can happen somewhere around the place that calls the postprocessor?

[18:38] <timotimo> i'm glad i'm not just too dumb :P

[18:38] <jnthn> Well, it's been a while since I hacked on this :)

[18:38] <timotimo> it could, aye

[18:39] <timotimo> so, the :chomp adverb shouldn't introduce an actual chomp call that would remove newlines from the very end if the user interpolates something?

[18:39] <timotimo> i.E. q:chomp"hello there, $foo"; with $foo = "timo\n";, will that result in "hello there, timo\n" or "hello there, timo"?

[18:43] *** moukeddar joined
[18:43] <moukeddar> o/ #perl6

[18:43] <Mouq> o/ moukeddar 

[18:44] <timotimo> i just got a mail with broken umlauts/utf8 from the GPW team

[18:44] <timotimo> >_<

[18:46] <FROGGS> timotimo: it is from barbie not from the gpw orga

[18:46] <jnthn> It's a good job German doesn't use umlauts...oh, wait...

[18:46] <FROGGS> :P

[18:46] <jnthn> timotimo: Well, I'd hope in the constant string case we can do it automatically

[18:46] <FROGGS> jnthn: you don't even use lauts!

[18:47] <FROGGS> (at least not in your name)

[18:47] <jnthn> They're overrated :P

[18:47] <timotimo> jnthn: yes, that's exactly what i'm hoping to make

[18:47] <jnthn> timotimo: but yeah, call back to .chomp call or so.

[18:47] <timotimo> just like when i fixed heredoc dedenting some time ago

[18:48] <timotimo> so, :chomp on a quoter should also chomp from interpolated strings?

[18:48] <Mouq> timotimo: You could model it off of postprocess_words

[18:48] <timotimo> before i implement it, i'd like to spec that

[18:48] <timotimo> Mouq: postprocess_words is b0rked, though :P

[18:48] <jnthn> That'd seem reasonable...

[18:48] <Mouq> Oh

[18:48] <timotimo> it would be quite a challenge to make that thing work properly

[18:49] <jnthn> b0rked? Really?

[18:49] <jnthn> Example?

[18:49] <timotimo> r: say <<foo\ bar>>.elems

[18:49] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´2‚ê§¬ª

[18:49] <Mouq> timotimo: That's postprocess_quotewords

[18:49] <timotimo> oh!

[18:49] <timotimo> oops :)

[18:50] <timotimo> so postprocess_words is just <foo bar baz>?

[18:50] <Mouq> yeah

[18:50] <timotimo> r: say <foo bar\ baz>.elems

[18:50] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´3‚ê§¬ª

[18:50] <timotimo> but that should have 2 elems, shouldn't it?

[18:50] <jnthn> I'm not actually sure :)

[18:50] <Mouq> I was just saying with respect to using $past.has_compile_time_value

[18:50] <FROGGS> r: say < $< $> >.elems

[18:50] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´1‚ê§¬ª

[18:50] <FROGGS> this should have two :o)

[18:51] *** darutoko left
[18:51] <timotimo> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L13 ‚Üê Mouq, i'm responsible for most of this code, so i know how this should be implemented ... probably :)

[18:51] <Mouq> timotimo: Heh, ok :)

[18:52] <timotimo> you see, i'm an expert!

[18:52] <Mouq> And timotimo++

[18:54] *** kurahaupo joined
[18:55] *** ssutch joined
[18:57] *** Sqirrel left
[18:58] <Mouq> r: say <a \qq<bc d {1+14} \q:w<$not interpolated>> e>

[18:58] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´a bc d 15 $not interpolated e‚ê§¬ª

[18:58] <Mouq> r: say <a \qq<bc d {1+14} \q:w<$not interpolated>> e>.perl

[18:58] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´("a", "bc", "d", "15", "\$not", "interpolated", "e").list‚ê§¬ª

[18:59] <Mouq> Huh

[18:59] <Mouq> My thought is that would be "a", "bc d 15 $not interpolated", "e"

[18:59] <Mouq> n: say <a \qq<bc d {1+14} \q:w<$not interpolated>> e>.perl

[18:59] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´("a", "bc", "d", val("15"), "\$not", "interpolated", "e").list‚ê§¬ª

[18:59] <timotimo> i don't think i know anything about how all that is supposed to work o_O

[19:01] <Mouq> n: say <a \q:to/INTERPOLATED_HERDOC/ e>.perl‚ê§  b  c‚ê§ d ‚ê§INTERPOLATED_HEREDOC

[19:01] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´===SORRY!===‚ê§‚ê§Ending delimiter INTERPOLATED_HERDOC not found at /tmp/tix8puJe45 line 2:‚ê§------> <BOL>‚èè  b  c‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[19:01] <Mouq> r: say <a \q:to/INTERPOLATED_HERDOC/ e>.perl‚ê§  b  c‚ê§ d ‚ê§INTERPOLATED_HEREDOC

[19:01] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Ending delimiter INTERPOLATED_HERDOC not found‚ê§at /tmp/tmpfile:4‚ê§------> INTERPOLATED_HEREDOC‚èè<EOL>‚ê§    expecting any of‚Ä¶¬ª

[19:02] <Mouq> r: say <a \q:to/INTERPOLATED_HERDOC/ e>.perl;‚ê§  b  c‚ê§ d ‚ê§INTERPOLATED_HEREDOC

[19:02] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Ending delimiter INTERPOLATED_HERDOC not found‚ê§at /tmp/tmpfile:4‚ê§------> INTERPOLATED_HEREDOC‚èè<EOL>‚ê§    expecting any of‚Ä¶¬ª

[19:02] <Mouq> r: say <a {q:to/INTERPOLATED_HERDOC/} e>.perl;‚ê§  b  c‚ê§ d ‚ê§INTERPOLATED_HEREDOC

[19:02] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Undeclared name:‚ê§    INTERPOLATED_HEREDOC used at line 4‚ê§Undeclared routines:‚ê§    b used at line 2‚ê§    c used at line 2‚ê§    d used at lin‚Ä¶¬ª

[19:02] <Mouq> Bluh

[19:02] <Mouq> r: say <a \qq<{q:to/INTERPOLATED_HERDOC/}> e>.perl;‚ê§  b  c‚ê§ d ‚ê§INTERPOLATED_HEREDOC

[19:02] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Ending delimiter INTERPOLATED_HERDOC not found‚ê§at /tmp/tmpfile:4‚ê§------> INTERPOLATED_HEREDOC‚èè<EOL>‚ê§    expecting any of‚Ä¶¬ª

[19:03] <Mouq> Admittedly, anyone doing that in actual code deserves to be punched.

[19:03] <Mouq> r: say <a \qq<{q:to/INTERPOLATED_HEREDOC/}> e>.perl;‚ê§  b  c‚ê§ d ‚ê§INTERPOLATED_HEREDOC

[19:03] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´("a", "b", "c", "d", "e").list‚ê§¬ª

[19:04] <Mouq> Yay!

[19:04] <Mouq> r: say <a \q:to/INTERPOLATED_HEREDOC/ e>.perl;‚ê§  b  c‚ê§ d ‚ê§INTERPOLATED_HEREDOC

[19:04] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´("a", "b", "c", "d", "e").list‚ê§¬ª

[19:04] * Mouq is done spamming :P

[19:07] <vendethiel> r: say < $< $> >

[19:07] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´$<$>‚ê§¬ª

[19:07] <vendethiel> r: say < $< $> >.perl

[19:07] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´"\$<\$>"‚ê§¬ª

[19:07] <Mouq> std: < $< $> >

[19:07] <camelia> std 09dda5b: OUTPUT¬´ok 00:00 121m‚ê§¬ª

[19:07] <Mouq> Why does that even parse?

[19:07] <pmurias> moritz: have you measured the performance of nqp-js?

[19:08] <pmurias> moritz: the code it currently generates is extremely stupid atm

[19:10] <Mouq> Oh, duh <nibbler> is recursive, and so matching braces are fine

[19:11] <Mouq> r: say < anything < $> >.perl

[19:11] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´("anything", "<\$>").list‚ê§¬ª

[19:11] <Mouq> r: say < anything < some thing else > >.perl

[19:11] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´("anything", "<some", "thing", "else>").list‚ê§¬ª

[19:11] <pmurias> I haven't intentionally measure the performance of nqp-js yet, but early self hosting seems to be significantly faster then the equaly stupid perl5 code kp6 emitted

[19:11] *** hoverboard left
[19:13] <Mouq> r: say < anything \< some thing else \> >.perl

[19:13] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´("anything", "\\<", "some", "thing", "else", ">")‚ê§¬ª

[19:13] <Mouq> r: say < anything <  some thing else \> >.perl

[19:13] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´===SORRY!=== Error while compiling /tmp/tmpfile‚ê§Unable to parse expression in quote words; couldn't find final '>'‚ê§        ‚ê§at /tmp/tmpfile:1‚ê§------>  < anything <  some thing else \> ‚Ä¶¬ª

[19:13] <Mouq> std: say < anything <  some thing else \> >.perl

[19:13] <camelia> std 09dda5b: OUTPUT¬´===SORRY!===‚ê§Unable to parse quote words at /tmp/zYGCu_alcc line 1:‚ê§------> say ‚èè< anything <  some thing else \> >.perl‚ê§Couldn't find final '>'; gave up at /tmp/zYGCu_alcc line 1 (EOF):‚ê§------>  < anything <  s‚Ä¶¬ª

[19:15] <moritz> pmurias: no, I haven't; that's why I asked

[19:16] <Mouq> .ask TimToady Should :q be able to escape its starter? This is the same as asking if, e.g. "< \< >" should produce "<" or "\<", considering that "< < >" is a syntax error

[19:16] <yoleaux> Mouq: I'll pass your message to TimToady.

[19:17] <FROGGS> "< \< >" has to produce '<' IMO

[19:17] *** zakharyas left
[19:21] *** hoverboard joined
[19:21] <Mouq> n: < \< >.say

[19:21] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´\<‚ê§¬ª

[19:27] * Mouq doesn't understand what's wrong with ¬´ ¬ª

[19:27] <Mouq> p6: ¬´ 'a thing'  b ¬ª.perl.say # nietza is wrong here

[19:27] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´("a thing", "b")‚ê§¬ª

[19:27] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´("'a", "thing'", "b")‚ê§¬ª

[19:27] <Mouq> *niecza

[19:28] *** Sqirrel joined
[19:28] <Mouq> p6: say ¬´ :Mon(1) Tue Wed Thu Fri Sat Sun ¬ª

[19:28] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´Tue Wed Thu Fri Sat Sun‚ê§¬ª

[19:28] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´:Mon(1) Tue Wed Thu Fri Sat Sun‚ê§¬ª

[19:28] <Mouq> p6: say enum ¬´ :Mon(1) Tue Wed Thu Fri Sat Sun ¬ª

[19:28] <camelia> rakudo-jvm ffa572: OUTPUT¬´EnumMap.new("Thu", 2, "Sun", 5, "Wed", 1, "Sat", 4, "Fri", 3, "Tue", 0, "Mon", 1, )‚ê§¬ª

[19:28] <camelia> ..rakudo-parrot ffa572, rakudo-moar ffa572: OUTPUT¬´EnumMap.new("Mon", 1, "Tue", 0, "Wed", 1, "Thu", 2, "Fri", 3, "Sat", 4, "Sun", 5, )‚ê§¬ª

[19:28] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´Use of uninitialized value in string context‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1355 (warn @ 5) ‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /home/p6eval‚Ä¶¬ª

[19:30] *** rindolf joined
[19:31] *** virtualsue joined
[19:32] *** pmurias left
[19:37] <nwc10> timotimo: I got that mail too. The source is wierd. It's not obvious how it is messed up.

[19:37] <nwc10> Seems to contain munged escape codes

[19:40] <timotimo> hmm

[19:41] <timotimo> i wonder how hard it is to write a simulator for reaction-diffusion systems

[19:41] <nwc10> aha, no, that's something stupid my setup is doing locally

[19:41] <nwc10> it's double encoded, I think.

[19:42] <Mouq> .ask TimToady And is "In addition, the double angles allow for comments beginning with #. These comments work exactly like ordinary comments in Perl code" still valid and just NYI?

[19:42] <yoleaux> Mouq: I'll pass your message to TimToady.

[19:51] <FROGGS> Program received signal SIGSEGV, Segmentation fault.

[19:51] <FROGGS> #1  MVM_frame_inc_ref (tc=tc@entry=0x603500, frame=0x0) at src/core/frame.c:43

[19:51] <FROGGS> #2  0x00007ffff588a1e4 in p6captureouters (tc=0x603500) at src/vm/moar/ops/perl6_ops.c:502

[19:52] <FROGGS> :(

[19:52] <timotimo> y?

[19:53] *** Ihasntgotnosandw joined
[19:53] <Ihasntgotnosandw> greetins, ladies and gentlemen

[19:53] <Ihasntgotnosandw> I'm new on this perl 6 thing, what's it about?

[19:54] <timotimo> does your name mean you don't have any sand?

[19:54] <Mouq> Well, it's an awesome programming language

[19:55] <Ihasntgotnosandw> my name means that I don't have no sandwich

[19:55] <timotimo> ah!

[19:55] <Ihasntgotnosandw> I'm concidering to try perl out

[19:55] <timotimo> it seems the irc server cut off the sandwich part of your name :(

[19:55] <timotimo> so you really don't have a sandwich

[19:55] <timotimo> not even in your name

[19:55] <timotimo> somehow that's pretty fitting

[19:55] <FROGGS> hehe

[19:56] <Ihasntgotnosandw> well, it's a double negative

[19:56] <Ihasntgotnosandw> I don't have no sandwich

[19:56] <FROGGS> timotimo: btw, I run into that problem when compiling v5

[19:56] <timotimo> FROGGS: ;(

[19:56] <timotimo> maybe you're trying to capture outers, but there is no outer frame?

[19:58] <moritz> r: say 'Ihasntgotnosandw' ~~ 'has no sandwich'

[19:58] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´False‚ê§¬ª

[19:58] <moritz> r: say 'Ihasntgotnosandw' ~~ 'has a sandwich'

[19:58] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´False‚ê§¬ª

[19:59] <FROGGS> timotimo: I am throwing an exception now, I hope the backtrace shows something useful

[19:59] <timotimo> Ihasntgotnosandw: so, do you already have experience with programming languages?

[20:00] <Mouq> r: say 'Ihasntgotnosandw'.lc.comb ‚äá <has no sandwich>¬ª.comb

[20:00] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´False‚ê§¬ª

[20:00] <Ihasntgotnosandw> I do have experience with some programming languages, but not perl

[20:00] <Mouq> r: say 'Ihasntgotnosandw'.lc.comb,'c' ‚äá <has no sandwich>¬ª.comb

[20:00] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´i h a s n t g o t n o s a n d wFalse‚ê§¬ª

[20:00] <Ihasntgotnosandw> I'm new with perl, it will be amazing to get started with it

[20:00] <Mouq> r: say ('Ihasntgotnosandw'.lc.comb,'c' ‚äá <has no sandwich>¬ª.comb)

[20:00] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´i h a s n t g o t n o s a n d w False‚ê§¬ª

[20:00] <timotimo> perl6: my $alpha = "foo"; my $beta = "bar"; qww[$alpha $beta];

[20:00] <Mouq> Oh

[20:00] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: ( no output )

[20:00] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´Potential difficulties:‚ê§  $alpha is declared but not used at /tmp/tmpfile line 1:‚ê§------> my ‚èè$alpha = "foo"; my $beta = "bar"; qww[$a‚ê§  $beta is declared but not used at /tmp/tmpfile line 1:‚ê§------> my $alpha = "foo"‚Ä¶¬ª

[20:00] <Mouq> r: say ('Ihasntgotnosandw'.lc.comb,'c') ‚äá <has no sandwich>¬ª.comb

[20:00] *** kivutar joined
[20:00] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572: OUTPUT¬´True‚ê§¬ª

[20:01] <Mouq> There

[20:01] <Mouq> So you almost has no sandwich

[20:01] *** Ihasntgotnosandw left
[20:01] <timotimo> :o

[20:01] <timotimo> perl6: my $alpha = "foo"; my $beta = "bar"; say qww[$alpha $beta]; $alpha ~ $beta;

[20:02] <camelia> rakudo-parrot ffa572, rakudo-jvm ffa572, rakudo-moar ffa572, niecza v24-109-g48a8de3: OUTPUT¬´$alpha $beta‚ê§¬ª

[20:03] *** mtk joined
[20:03] <FROGGS> hmmm, it is the invocation of: rakudo/src/Perl6/World.nqp:1717:  nqp::p6captureouters2([$code], nqp::getstaticcode($!resolved));

[20:04] *** toebu joined
[20:04] <FROGGS> (when loading Perl5::Terms from Perl5::Config)

[20:05] *** brrt joined
[20:06] <Mouq> FROGGS: Do you think it's related to segfaults I was getting with Pod::To::HTML?

[20:06] <FROGGS> Mouq: yes

[20:06] <FROGGS> though, it is hard for me to golf down

[20:06] <FROGGS> because there is a lot of magic happening in v5

[20:07] <FROGGS> might be easier to golf down Pod::To::HTML

[20:07] <jnthn> It'll be almost certainly golfable to something involving roles, I imagine.

[20:07] *** hoverboard left
[20:08] <FROGGS> there are roles in Perl5::Terms, yes

[20:09] <timotimo> roles: does anybody even use them? should we strip them from the language?

[20:09] <FROGGS> Perl5::Config does not touch these roles though, it just loads Perl5::Terms in EXPORT

[20:09] <FROGGS> timotimo: :P

[20:12] <dalek> roast: a62e0ae | (Timo Paulssen)++ | S02-literals/quoting.t:

[20:12] <dalek> roast: rakudo.moar doesn't need to skip openpipe any more.

[20:12] <dalek> roast: review: https://github.com/perl6/roast/commit/a62e0ae28c

[20:12] <timotimo> more passing tests for rakudo.moar!

[20:13] *** denis_boyun joined
[20:16] <FROGGS> timotimo++

[20:16] *** sisar joined
[20:17] <Mouq> Can http://perl6.org/compilers/features be updated as well? ("run, qx")

[20:18] <FROGGS> hmmm, I thought TimToady++ did that

[20:18] <Mouq> Oh, he did

[20:18] <FROGGS> https://github.com/perl6/features/commit/55fe624035ddac9fd4d0b9cebd4c968bea4d2f17

[20:18] <FROGGS> yeah

[20:18] <Mouq> " The page itself was updated Sun Mar 2 07:12:01 2014 "

[20:19] <FROGGS> The data to generate this page was last updated Fri Jan 17 02:42:02 2014 ; The page itself was updated Sun Mar 2 07:12:01 2014 

[20:19] <Mouq> I think there were a bunch of cron jobs that used to be run and no longer are (e.g. modules.perl6.org)

[20:19] *** BenGoldberg joined
[20:20] <moritz> cron on feather2 still runs though :)

[20:20] <FROGGS> jnthn: damn, I was hoping to be able to compile v5 when I just do not inc that frame when it is NULL, but now it hangs where is segfaulted before :/

[20:20] <jnthn> FROGGS: Yeah, I was figuring if that thing comes out null something else is adrift...it shoulnd't happen.

[20:21] <FROGGS> jnthn: would it be of any help when I would golf it down for you?

[20:22] <jnthn> FROGGS: Yes. I'll be home by this time tomorrow and will have a decentish tuit supply this week.

[20:22] * moritz checks the various cron jobs

[20:22] <FROGGS> well, I am going to give a v5 talk on wednesday, but no pressure *g*

[20:23] <jnthn> oh, should probably unbust that then :)

[20:23] <FROGGS> well, I could go back by a week, but when I can golf it it would be nice anyway

[20:24] <FROGGS> Mouq: you just compiled Pod::To::HTML to get that problem?

[20:24] <Mouq> Yeah

[20:24] <Mouq> panda install --notests Pod::To::HTML

[20:25] <Mouq> perl6 -MPod::To::HTML -e1

[20:25] <FROGGS> k

[20:25] <Mouq> Segfaults for me

[20:25] <FROGGS> thanks

[20:25] <moritz> http://perlpunks.de/paste/show/532f4323.4de6.32b output from the modules.perl6.org cron job

[20:26] <moritz> oh my

[20:26] <moritz> the script that calls it starts with  git-pull -x -f

[20:26] <moritz> erm, -q -f

[20:26] <moritz> but, current versions of debian don't put the dashed git commands into $PATH

[20:26] <moritz> so It has to be called as git pull

[20:27] <timotimo> we need monitoring :)

[20:27] *** Araq joined
[20:27] <FROGGS> nagios \o/

[20:27] <timotimo> kanla \o/

[20:27] <lizmat> FROGGS++ for v5

[20:28] <Mouq> moritz++

[20:28] <FROGGS> lizmat: the pause patches got applied, now only the indexer is left TBD :o)

[20:29] <lizmat> do you mean that panda can install from CPAN already ??

[20:29] <FROGGS> no

[20:29] <lizmat> okok

[20:29] <FROGGS> we need the indexer for that

[20:29] <lizmat> no pressure  :-)

[20:29] <lizmat> why ?  we need a recommendation manager, afaics

[20:30] <FROGGS> but you can upload a Perl 6 dist, it goes into the Perl6/ subdir, and it will not get picked up for Perl5ish indexing

[20:30] <lizmat> or am I missing something ?

[20:30] <lizmat> indeed, that was the plan  :-)

[20:30] <FROGGS> you also need to find dists by name (or provides)

[20:30] <lizmat> indeed, so we need a recommendation manager

[20:30] <FROGGS> and that is what we need to provide: 02packages like list of all dists as json or so

[20:31] <lizmat> which is what a recommendation manager is, to an extent

[20:31] <FROGGS> no, even without recommendations you need to know what tarballs are there

[20:31] <lizmat> ah, ok

[20:31] <lizmat> yeah, got ya

[20:32] <lizmat> basically, an "available distributions"  list

[20:32] <moritz> "features" cronjob likewise fixed

[20:32] <FROGGS> lizmat: yes, exactly

[20:32] <FROGGS> moritz++

[20:32] <lizmat> FROGGS++  :-)

[20:32] <FROGGS> :o)

[20:33] *** sisar left
[20:34] <masak> FROGGS++ lizmat++ moritz++

[20:35] <Araq> any release date for Perl 6?

[20:36] <moritz> Araq: well, the compiler has monthly releases; no release date for the language spec yet

[20:37] <Araq> so what does the compiler implement then?

[20:37] <lizmat> 90+% of the spec ?

[20:37] <lizmat> .oO( lies, damn lies and statistics )

[20:38] <lizmat> 30.6K spectests ?

[20:38] <lizmat> 3 backends ?

[20:39] <Mouq> *3.5 backends ?

[20:39] <Mouq> :)

[20:39] <moritz> Araq: the unreleased spec

[20:39] <lizmat> isn't number of backends a native int ?

[20:40] <moritz> Araq: we haven't released the specs; they escaped

[20:41] <Araq> well what's missing? and why not call it 1.0 already?

[20:42] * Mouq wanted to throw nqp-js in too

[20:43] <lizmat> which would mean that nqp has 4 backends, and rakudo 3 (so far)

[20:44] <lizmat> looking forward to adding js to the rakudo backend list!

[20:44] <jnthn> Araq: Parts of the spec we perhaps could. But just freezing and throwing out the spec in whatever form it happens to be in, regardless of where implementations of it are at, would be enormously unhelpful.

[20:45] <jnthn> Araq: Most of what drives spec changes now is implementations saying "hang on, that bit...it's nuts" :)

[20:46] <FROGGS> or like the concurrency implementation that was done recently, and was specced afterwards (you cannot really spec that out of thin air)

[20:46] <jnthn> Araq: It's not a waterfall model. Spec and implementation learn from each other.

[20:46] *** brrt left
[20:46] <timotimo> it's more a whirlpool

[20:47] <FROGGS> *g*

[20:47] <FROGGS> nice and warm :o)

[20:47] <Araq> well what's missing? what about some examples?

[20:47] <timotimo> only arcane parts :P

[20:48] <FROGGS> Araq: here are some details: https://ethercalc.org/i982ooyabg.html

[20:48] <timotimo> that spreadsheet is weird to me

[20:48] <FROGGS> I dunno if that list is really helpful for you though

[20:48] <Mouq> http://perlcabal.org/syn/ "[DRAFT]" and "(TBD)"

[20:48] <FROGGS> yeah

[20:49] <FROGGS> Mouq: it is not that easy though, because some are marked draft where I don't really see that these are so slushy

[20:49] <lizmat> As far as I'm concerned, [DRAFT] could be removed from S22

[20:49] <FROGGS> then do it :o)

[20:50] *** baest joined
[20:50] <Mouq> FROGGS: True. I don't really see S14 as a draft either at this point

[20:50] <FROGGS> Araq: this might be easier to read: https://github.com/rakudo/rakudo/blob/nom/docs/ROADMAP

[20:50] <lizmat> FROGGS: where does that page live ?

[20:50] *** Rotwang joined
[20:50] <lizmat> found it

[20:51] *** ajr_ left
[20:54] <dalek> mu: 1c70bc0 | (Elizabeth Mattijsen)++ | docs/feather/syn_index.html:

[20:54] <dalek> mu: Fix references of S22 and S11

[20:54] <dalek> mu: review: https://github.com/perl6/mu/commit/1c70bc04d0

[20:54] <Mouq> Is S18-Compiling really something that needs its own Synopsis at this point?

[20:54] <Mouq> lizmat++

[20:56] <lue> Mouq: since the synopses are based off that one Perl book, my guess is that it's related to compiling Perl 6.

[20:56] <dalek> mu: 3930588 | (Elizabeth Mattijsen)++ | docs/feather/syn_index.html:

[20:56] <dalek> mu: Refine reference to S17 (hardly a draft anymore)

[20:56] <dalek> mu: review: https://github.com/perl6/mu/commit/393058821e

[20:57] <dalek> specs: 991c0bf | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[20:57] <dalek> specs: Undraft S17

[20:57] <dalek> specs: review: https://github.com/perl6/specs/commit/991c0bface

[20:58] <FROGGS> jnthn: I golfed it for Pod::To::HTML

[20:58] <FROGGS> it is just:

[20:58] <FROGGS> #= hi

[20:58] <FROGGS> sub hallo { }

[20:58] <lue> Mouq: S27 seems similarly useless :)

[20:58] <FROGGS> jnthn: precompile, and use that

[20:59] <FROGGS> jnthn: v5 must be something else though

[21:00] <Mouq> FROGGS++

[21:00] <Mouq> It might be a symptom of the same thing though

[21:00] *** virtualsue left
[21:02] *** moukeddar left
[21:02] <FROGGS> might be, yeah

[21:03] * Mouq wonders if S29 and S32 can/ought to be merged

[21:05] <timotimo> hmm

[21:05] <timotimo> one is mostly for classes and methods, the other mostly for subs

[21:05] <lue> Mouq: looks to me S29 needs to be thrown out and replaced.

[21:09] *** kurahaupo left
[21:09] *** kaare_ left
[21:19] *** brrt joined
[21:20] *** brrt left
[21:25] *** hoverboard joined
[21:26] <FROGGS> jnthn: two very very simple test cases: https://github.com/FROGGS/frame_inc

[21:32] <masak> Mouq: in fact, S32 was pulled out of S29 once.

[21:32] <masak> Mouq: but I agree since then S32 has gotten more love. and maybe S29 fills no need anymore.

[21:33] <moritz> S29 is mostly builtins that aren't yet properly put into classes

[21:36] *** Mouq left
[21:37] <colomon> hey, no need to class-ify everything.  that's java-think.

[21:38] <vendethiel> colomon: java-think is to factorify everything ;)

[21:41] *** telex left
[21:41] <FROGGS> colomon: I like that you can choose whether you call it as a sub or as a method (like I prefer to call 'item' as a method)

[21:42] *** telex joined
[21:45] <colomon> FROGGS: I think the point is that the S29 things don't have method forms yet.

[21:46] <FROGGS> colomon: exactly, and I try to say that I like to have methods forms for most built-ins

[21:47] <colomon> Ah.  I'm trying to say that, while I like it for most (all?) of the ones we have methods for -- I too prefer method form -- I don't think everything has to be a method.

[21:47] <FROGGS> only if it makes sense, aye

[21:47] <colomon> the example I'm thinking of is "shell"

[21:48] <FROGGS> yes, or 42.sleep

[21:48] <FROGGS> I would never write that

[21:49] <colomon> erxactly!

[21:49] <colomon> exactly!

[21:50] <vendethiel> "42.sleep" is not a java-ish way, though

[21:52] <FROGGS> I am not familiar with Java

[21:52] <jnthn> PillowFactory.getPillow().sleep(new WinksValueObject(40)); /* there! */

[21:53] <vendethiel> java-ish way would be `Factory sleepFactory = new sleepFactory(); var sleep = sleepFactory.createSleepObject(); sleep.sleepForDuration(sleep.convertSeconds(42));`

[21:53] <lue> I think S29 could be useful, it's just got a lot of oldisms, and a general "this hasn't been updated for years" feel.

[21:53] <jnthn> FROGGS: Thanks for the extra cases

[21:53] <jnthn> FROGGS: cloned them locally in case I've energy to look en route

[21:54] *** Araq left
[21:54] <FROGGS> jnthn++

[21:54] <FROGGS> :o)

[21:54] *** Sqirrel left
[22:01] *** pippo_ left
[22:06] *** Mouq joined
[22:06] <masak> FROGGS: 42.sleep feels distinctively Rubyish to me.

[22:07] <masak> FROGGS: Ruby does have the 42.times method, among other things. because ints should totally be responsible for control flow :)

[22:07] <vendethiel> *and* ruby for loops get translated to `x.times`

[22:07] <vendethiel> or `.each`, for that matters

[22:07] <jnthn> Control flow is an integral part of any programming language... :P

[22:07] <FROGGS> I perhaps get more in touch with ruby this year ("in touch at all" I should say)

[22:11] *** Sqirrel joined
[22:14] *** colomon left
[22:20] *** Sqirrel left
[22:21] *** Sqirrel joined
[22:23] *** colomon joined
[22:34] <Mouq> r: .say for CORE::.pairs

[22:34] <camelia> rakudo-parrot ffa572: OUTPUT¬´"\&bag" => 3927‚ê§"\&mix" => 3931‚ê§"Version" => 3935‚ê§"\&infix:<=>" => 3939‚ê§"\&infix:<does>" => 3943‚ê§"\&infix:<but>" => 3947‚ê§"\&SEQUENCE" => 3951‚ê§"\&WHAT" => 3955‚ê§"\&VAR" => 3959‚ê§"\&infix:<...>" => 3963‚ê§"\&infix:<...^>" => 4367‚ê§"\&undef‚Ä¶¬ª

[22:34] <camelia> ..rakudo-jvm ffa572: OUTPUT¬´"Supply" => Mu‚ê§"Iterator" => Mu‚ê§"\&infix:<||>" => Mu‚ê§"\&infix:<~>>" => Mu‚ê§"\&WHAT" => Mu‚ê§"\&all" => Mu‚ê§"\&postcircumfix:<[ ]>" => Mu‚ê§"\&THROW" => Mu‚ê§"\&slurp" => Mu‚ê§"\&gist" => Mu‚ê§"\$WINNER_KIND_MORE" => Mu‚ê§"\&infix:<‚àã>" => Mu‚ê§"Has‚Ä¶¬ª

[22:34] <camelia> ..rakudo-moar ffa572: OUTPUT¬´"\%DEPRECATIONS" => Mu‚ê§"\&fail" => Mu‚ê§"\&zip" => Mu‚ê§"\%pvalcodecache" => Mu‚ê§"\%propcodecache" => Mu‚ê§"\$?TABSTOP" => Mu‚ê§"\$UINT64_UPPER" => Mu‚ê§"\$sprintfHandlerInitialized" => Mu‚ê§"\$default" => Mu‚ê§"\$NaN" => Mu‚ê§"\$Inf" => Mu‚ê§"\&samewit‚Ä¶¬ª

[22:40] *** Sqirrel left
[22:42] *** Sqirrel joined
[22:46] *** denis_boyun left
[22:56] *** Sqirrel left
[23:03] <lizmat> gnight, #perl6!

[23:05] <Mouq> night lizmat!

[23:05] <masak> 'night, #perl6

[23:05] <Mouq> night masak!

[23:08] *** mtk left
[23:09] *** Rotwang left
[23:10] *** Psyche^ left
[23:14] *** Sqirrel joined
[23:19] <timotimo> gnite

[23:25] *** dmol left
[23:36] *** hoverboard left
[23:36] <timotimo> numberwang-2048 is the best 2048 i've seen so far

[23:40] <colomon> numberwang!

[23:43] <tadzik> pmu<TAB><TAB>

[23:43] <tadzik> :|

[23:43] *** Sqirrel left
[23:44] *** Sqirrel joined
[23:48] <timotimo> pmuchaud?

[23:49] *** ssutch_ joined
[23:51] <tadzik> pmurias :)

[23:51] <tadzik> re moarvm faster than typescript: because of ~3-seconds-long compile times with typescript, the development cycle on moarvm was just a lot more pleasant

[23:52] <tadzik> hah, someone reddited it: http://www.reddit.com/r/perl/comments/216d1y/p6_perl_6_on_steroids_through_the_window_one_week/

[23:52] <tadzik> raiph++

[23:54] <ssutch_> i clicked that link at exactly the same time you posted it

[23:54] <ssutch_> but on reddit

[23:54] *** Mouq left
[23:55] *** sftp joined
[23:57] <tadzik> :)

[23:57] *** Mouq joined
[23:58] <timotimo> ohai ssutch_ 

[23:58] <ssutch_> hello!

[23:58] <timotimo> will you be taking part in the game contest?

[23:58] <ssutch_> there's a game contest?

[23:58] <tadzik> yep

[23:58] <tadzik> at the bottom of the post

[23:59] <ssutch_> ah cool, i haven't finished it yet

[23:59] <timotimo> no need to finish the contest right now

[23:59] <ssutch_> (the post)

