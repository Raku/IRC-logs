[00:01] *** martinzaremba joined
[00:13] * lizmat feels all alone and also calls it a day

[00:13] <lizmat> sleep&

[00:13] <japhb> lizmat: Not all alone,

[00:13] <woolfy> lizmat is definitely not alone!

[00:13] <japhb> just all the people still around are multitasking or eating dinner or somesuch

[00:13] * woolfy is 1,5 meter away

[00:14] * woolfy hits lizmat

[00:14] * japhb guesses a table between.

[00:14] <japhb> With something 1,6 meter long?

[00:14] <lizmat> ouch!

[00:14] <woolfy> I juest leaned over and smacked her on her shoulder

[00:14] <woolfy> alone...  puh!

[00:15] <japhb> It's a true geek that responds to being smacked in meatspace with "ouch!" in IRC space

[00:16] <woolfy> yeah, here it was complete silence (except from he sniggering softly)

[00:16] <woolfy> s/he/she/  darn...

[00:17] <japhb> I mentally s/he/her/

[00:17] <woolfy> shite

[00:17] <woolfy> her indeed

[00:17] <woolfy> English is fiddicult

[00:17] <woolfy> sleep well all

[00:19] *** martinzaremba left
[00:20] *** martinzaremba joined
[00:22] <japhb> same to you

[00:24] *** rurban joined
[00:25] *** martinzaremba left
[00:28] *** rurban left
[00:29] *** eternaleye left
[00:30] *** eternaleye joined
[00:36] *** hoverboard joined
[00:50] *** fhelmberger joined
[00:55] *** fhelmberger left
[01:00] *** anaeem1 joined
[01:05] *** anaeem1 left
[01:19] *** SevenWolf left
[01:29] *** Sqirrel left
[01:30] *** FROGGS left
[01:36] *** wooden joined
[01:36] *** wooden left
[01:36] *** wooden joined
[01:36] *** Su-Shee_ joined
[01:39] *** Su-Shee left
[01:41] *** xenoterracide joined
[01:42] *** FROGGS joined
[01:43] *** jnap left
[01:50] *** klapperl_ joined
[01:53] <TimToady> http://rosettacode.org/wiki/Stable_marriage_problem#Perl_6  <-- wish the highlighting knew about ' inside identifiers...

[01:53] *** klapperl left
[01:59] <TimToady> with the recent additions by Grondilu++ and FROGGS++ we have now passed both C and J, and are now in 4th place :)

[02:01] <colomon> \o/

[02:02] *** hoverboard left
[02:09] *** Pleiades` left
[02:17] *** Pleiades` joined
[02:23] *** Pleiades` left
[02:24] *** eternaleye left
[02:28] *** eternaleye joined
[02:33] *** eternaleye left
[02:34] *** kaare_ joined
[02:37] *** xragnar_ joined
[02:37] *** xragnar is now known as Guest43817

[02:37] *** Guest43817 left
[02:37] *** xragnar_ is now known as xragnar

[02:39] *** sorear left
[02:42] *** eternaleye joined
[02:43] *** sorear joined
[02:47] *** sorear left
[02:48] *** molaf joined
[02:50] *** fhelmberger joined
[02:53] *** sorear joined
[02:55] *** fhelmberger left
[02:58] *** sorear left
[03:03] *** sorear joined
[03:08] *** raiph joined
[03:09] *** SevenWolf joined
[03:09] *** molaf left
[03:10] * japhb agrees with colomon

[03:12] *** sorear left
[03:15] *** sorear joined
[03:22] *** martinzaremba joined
[03:24] *** johnjohn101 joined
[03:25] <johnjohn101> hi perl 6

[03:25] *** Alula left
[03:28] *** raiph left
[03:32] *** martinzaremba left
[03:33] *** martinzaremba joined
[03:36] <TimToady> howdy johnjohn101

[03:36] *** Alula joined
[03:36] <johnjohn101> what's the word on perl 6? 

[03:37] <TimToady> exciting

[03:37] <johnjohn101> moarvm is now the latest?

[03:37] *** hoverboard joined
[03:37] <TimToady> that would be more than one word :P

[03:37] <TimToady> but yes, it's getting to be the leader

[03:39] <TimToady> but in another sense, all the backends are the "latest", since we're developing in parallel

[03:39] <TimToady> r: say $*VM.name

[03:39] <camelia> rakudo-moar d78b63: OUTPUT«moar␤»

[03:39] <johnjohn101> what ever happened to perl 6 on java vm?

[03:39] <camelia> ..rakudo-jvm d78b63: OUTPUT«jvm␤»

[03:39] <camelia> ..rakudo-parrot d78b63: OUTPUT«parrot␤»

[03:39] <TimToady> there it is ^^

[03:40] <johnjohn101> is there going to be an official release soon?

[03:40] <TimToady> what is this word, "official"?

[03:41] * TimToady looks around for officers...

[03:41] <johnjohn101> meaning it's considered production ready, i guess

[03:41] <TimToady> we'll just keep making it better, and eventually you won't be able to stand not using it... :)

[03:43] <TimToady> when it's production ready depends on what you're producing...

[03:43] <TimToady> I probably wouldn't use it for plane avionics just yet

[03:43] <johnjohn101> is odbc available for it yet?

[03:44] <johnjohn101> probably the biggest part of my perl 5 coding

[03:44] <TimToady> not sure whether DBIish supports that yet, but yeah, that is important

[03:46] <TimToady> could probably get at JDBC via jvm

[03:47] <TimToady> I think Tim Bunce has some plans for what he wants to do with Perl 6, but not sure where he is on that...

[03:48] <TimToady> but I'm sure we could always use more help to push the db stuff forward

[03:48] <johnjohn101> he's done a good job with perl 5 for sure

[03:50] <TimToady> we don't really have many dbfolk here on channel, since we're mostly in eat-your-own-dogfood mode still, and compilers don't need much in the way of databases

[03:50] <TimToady> so DBIish is what we have so far

[03:51] *** kaare_ left
[03:52] <TimToady> looks like it supports mysql, pg, and sqlite currently (and TestMock)

[03:52] <TimToady> there's a lot of TODO comments in it, though

[03:53] <TimToady> so I'd consider it more of a proof of concept

[03:53] <johnjohn101> thanks, i may get some time in july on vacation to mess with it

[03:53] <TimToady> cool

[03:59] *** hoverboard is now known as totescalientebab

[04:00] *** totescalientebab is now known as pinklipsbaby

[04:08] *** pinklipsbaby is now known as hoverboard

[04:16] *** BenGoldberg left
[04:18] *** SamuraiJack joined
[04:20] *** xenoterracide left
[04:23] *** anaeem1 joined
[04:23] *** kaare_ joined
[04:23] *** johnjohn101 left
[04:27] *** perigrin left
[04:48] *** perigrin joined
[04:49] *** perigrin left
[04:50] *** perigrin joined
[04:51] *** fhelmberger joined
[04:51] *** anaeem1 left
[04:52] *** thou left
[04:54] *** anaeem1_ joined
[04:55] *** fhelmberger left
[04:57] *** REPLeffect joined
[05:04] *** rurban_ left
[05:07] *** rurban_ joined
[05:17] *** araujo left
[05:36] *** xinming_ left
[05:37] *** hoverboard left
[05:37] *** FROGGS left
[05:40] *** jack_rabbit left
[05:41] *** jack_rabbit joined
[05:42] *** xinming joined
[05:55] *** kurahaupo joined
[05:56] *** woosley joined
[05:56] *** hoverboard joined
[05:59] *** bjz joined
[06:04] *** jack_rabbit left
[06:17] *** kaleem joined
[06:22] *** jsn_ joined
[06:22] *** bjz left
[06:23] *** bjz joined
[06:25] *** FROGGS joined
[06:26] <FROGGS> o/

[06:27] <TimToady> \o

[06:49] *** bjz left
[06:50] <jnthn> o/

[06:50] *** rindolf joined
[06:51] *** fhelmberger joined
[06:54] *** anaeem1_ left
[06:54] *** martinzaremba left
[06:55] *** anaeem1_ joined
[06:56] *** fhelmberger left
[07:01] *** dayangkun left
[07:02] *** dayangkun joined
[07:05] <sergot> morning o/

[07:06] *** zakharyas joined
[07:10] <yakudza> r: say $*VM.name

[07:10] <camelia> rakudo-moar d78b63: OUTPUT«moar␤»

[07:10] <camelia> ..rakudo-jvm d78b63: OUTPUT«jvm␤»

[07:10] <camelia> ..rakudo-parrot d78b63: OUTPUT«parrot␤»

[07:11] *** darutoko joined
[07:12] *** ilbot3 joined
[07:15] <sergot> m: if 1 { LAST { say "run me!" } }

[07:15] <camelia> rakudo-moar d78b63: ( no output )

[07:15] <jnthn> That only makes sense in a loop.

[07:16] <sergot> right :)

[07:16] <jnthn> (You can attach phasers to whatever block you like, I guess, but for LAST something has to be there to actually fire it.)

[07:20] *** dmol joined
[07:28] <sergot> jnthn++ thanks

[07:28] *** pdcawley left
[07:30] *** igorsutton joined
[07:30] *** pdcawley joined
[07:33] *** jsn_ left
[07:33] *** spider-mario joined
[07:36] *** pecastro left
[07:39] *** woolfy left
[07:39] *** woolfy joined
[07:40] <nwc10> Why did Apple honour Python as the dynamic language to (effectively) dump on? Are people more likely to be writing iPhone apps in Python than (say) Ruby?

[07:42] <jnthn> nwc10: They dumped on it?

[07:42] <igorsutton> nwc10: Support for Python was available way before Ruby. I remember having Python/PyObjC as an option to write Mac apps in the past.

[07:42] * jnthn musta missed something...

[07:43] * jnthn hasn't read the new language's manual yet. :)

[07:43] <igorsutton> nwc10: Made by Sofa from Amsterdam had a Mac application written in Python.

[07:43] <nwc10> jnthn: Apple announced a new language, named Swift, which is (sort of) "Objective-C without the C."

[07:43] <igorsutton> nwc10: And AFAICS Swift is much more like Go than Python.

[07:43] <jnthn> nwc10: Yes, that bit I know...it's the Python connection that isn't clear to me.

[07:44] <nwc10> and the slides from WWDC show speed comparisons with Python and IIRC Objective C

[07:44] <jnthn> Oh.

[07:44] <nwc10> yes

[07:44] <jnthn> OK.

[07:44] <jnthn> Now I understand :)

[07:44] <igorsutton> nwc10: Although some of its syntax reminds PyObjC bindings.

[07:44] <nwc10> now you understand what I don't understand

[07:44] <nwc10> er, add () to make that make sense

[07:45] <igorsutton> nwc10: As I said, people have used PyObjC to make Mac apps in the past.

[07:46] <nwc10> http://www.cnet.com/news/apples-swift-explained-what-it-is-and-what-it-means/ -- The other concern, which isn't much of a worry in my mind, is that by lowering the barrier of entry with an easier to learn, easier to use language, you'll result in more rookie developers launching apps that simply aren't very good.

[07:46] <nwc10> so, SWIFT? :-)

[07:46] *** virtualsue joined
[07:46] <igorsutton> nwc10: This happens all the time, i.e. PHP

[07:48] <nwc10> I was thinking more https://metacpan.org/release/JMCNAMARA/Acme-Inline-PERL-0.01

[07:49] *** hoverboard left
[07:51] *** denis_boyun_ joined
[07:55] *** Su-Shee_ is now known as Su-Shee

[08:04] * jnthn notices that Swift dropped the parens around conditions in conditionals/loops, like Perl 6.

[08:11] *** bjz joined
[08:12] *** rindolf left
[08:13] *** rindolf joined
[08:14] *** Sqirrel joined
[08:14] *** denis_boyun_ left
[08:23] *** zakharyas left
[08:23] *** zakharyas joined
[08:27] <igorsutton> jnthn: yes! :)

[08:28] <igorsutton> jnthn: And dropped also the semicolons as well :D

[08:29] <jnthn> igorsutton: I don't really care for that choice, tbh.

[08:29] <igorsutton> jnthn: Less is more IMO

[08:30] <jnthn> I'd say this is one place where it isn't. :)

[08:30] <jnthn> C# really needs to steal "let x = ...;" outside of Linq queries. I've wanted that for ages.

[08:30] <igorsutton> Why?

[08:30] <igorsutton> (about the semicolons)

[08:31] <timotimo> nwc10: make the language as hard as possible, otherwise all the newbies will be publishing their code!

[08:31] <igorsutton> timotimo++

[08:31] *** donaldh joined
[08:31] <jnthn> Makes it obvious what's happening in a multi-line expression, and provides a clear visual indication of "end of utterance", just like natural languages typically do with a "."

[08:33] <igorsutton> jnthn: That's true, but usually when writing code you use one line per statement anyways.

[08:34] <jnthn> That becomes less and less true for me, as my code generally tends to become less and less imperative. YMMV.

[08:34] <igorsutton> jnthn: Right, I do see that. But usually like that you're more chaining operations than inlining them in one line.

[08:35] *** dakkar joined
[08:35] <igorsutton> jnthn: Do you have an example so I understand?

[08:36] <jnthn> Anyway, don't see anything earth-shattering in Swift. It's got some nice ideas; happy to see destructuring, a not-busted-like-C#/Java string model, type inference, lambdas. Not so fond of the lambda syntax, mind.

[08:37] <nwc10> why are C# strings busted, and is it the same reason as Java?

[08:37] <igorsutton> jnthn: I don't consider it earth-shattering, but it is good to get refreshed :)

[08:38] <igorsutton> I particularly liked the let/var model

[08:38] <jnthn> igorsutton: https://github.com/jnthn/perl6-reactive-samples/blob/master/golf-helper/golf-helper.p6 is full of multi-line statements.

[08:39] <jnthn> nwc10: Yes. UTF-16.

[08:39] <nwc10> aha

[08:39] <nwc10> So, like JavaScript too?

[08:39] <arnsholt> No, JS is UCS-2, which is terrible

[08:40] <nwc10> er, so it can't even think about Red Apples and Green Apples?

[08:40] <arnsholt> Why is UTF-16 a problem, beyond being no-actually-fixed-width and such?

[08:40] <nwc10> what a 0xD83D 0xDCA9

[08:40] <arnsholt> Yeah, UCS-2 is fixed width 16-bit, while UTF-16 encodes astral characters with surrogate pairs

[08:41] <ren1us> I'm actually just skimming the language specs now, but one thing jumped out at me as just being a weird thing to bother with

[08:41] <ren1us> "To use a reserved word as an identifier, put a backtick (`) before and after it. For example, class is not a valid identifier, but `class` is valid. The backticks are not considered part of the identifier; `x` and x have the same meaning."

[08:41] <igorsutton> jnthn: They're multi-line statements, true. But usually one statement per line neverthless.

[08:42] <arnsholt> ren1us: I dunno, might be nice. Sometimes you really do want a variable with the same name as a reserved word

[08:42] <jnthn> arnsholt: It's a problem if you ask for the length of a string and get the number of 16-bit things. Or you do a substring operation and can chop a surrogate pair in half....

[08:42] <jnthn> ren1us: Such things are very useful in any code-gen scenario.

[08:42] <arnsholt> When doing metaprogrammy stuff in Java, you frequently want a variable "class", for example (usually called clazz in Java, IIRC)

[08:43] <arnsholt> jnthn: Yeah, that's bad. But more of a problem with the implementation than UTF-16 though, no?

[08:43] <jnthn> C# provides @ for this...

[08:43] <masak> antenoon, #perl6

[08:43] <jnthn> @class, for example

[08:43] <arnsholt> "Oh, UTF-16 isn't fixed width after all? Let's patch it up as best we can..."

[08:44] <jnthn> arnsholt: It's not UTF-16 that's bad, it's not distinguishing between opaque strings that are at least at codepoint level vs. an array of 16-bit numbers

[08:44] <arnsholt> *That* I can agree is a problem! =

[08:44] <arnsholt> =)

[08:44] <arnsholt> With the potential for causing some pretty nasty bugs too, I suspect

[08:45] <igorsutton> Usually in ObjC you get a reference for the data as UTF8String or something. Being strings in Swift NSStrings, I think you get the same sort of access.

[08:46] <nwc10> jnthn: we are live with hackathon: http://act.useperl.at/apw2014/talk/5565 http://act.useperl.at/apw2014/talk/5566

[08:47] <jnthn> yay

[08:47] <jnthn> ooh, and up to September to decide what to talk about. yay.

[08:48] *** SevenWolf left
[08:48] <nwc10> might be useful for scheduling if you submit a talk that is a placeholder/teaser, and we can put it live

[08:48] <nwc10> details to be confirmed later

[08:49] <timotimo> salzburg is 6 hours by train, 4.5 hours by car :|

[08:49] <nwc10> where are you?

[08:49] <nwc10> Who can you share a ride with?

[08:50] <timotimo> i'm in karlsruhe; potentially jean AKA corecatcher might go there

[08:51] *** pippo joined
[08:51] <jnthn> 6 hours isn't an especially long train trip... :)

[08:51] <lizmat> good *, #perl6!

[08:52] *** fhelmberger joined
[08:52] <lizmat> timotimo: we're going by car, and usually pass by Mannheim anyway, so Karlsruhe may just be short detour for us

[08:52] <timotimo> jnthn: if you're used to it! :)

[08:52] <timotimo> lizmat: i shall ponder my attendence

[08:52] <lizmat> cool!

[08:52] <jnthn> timotimo: do the trans-sib some day, that'll get you used to it :P

[08:52] <timotimo> how many days is that again?

[08:53] *** pecastro joined
[08:53] <jnthn> 6-7 I think, though it's more fun to get off every so often and look around a bit :)

[08:53] <timotimo> mhm

[08:53] * jnthn dragged it out over 3 weeks, and the longest chunk of time actually spent on the train was 36 hours or so

[08:54] <timotimo> it goes mostly cold places, doesn't it?

[08:54] <jnthn> Wouldn't mind doing it again, though will probably do the BAM or Trans-Mongolian next time... :)

[08:54] <jnthn> timotimo: Depends on time of year. :)

[08:55] <timotimo> mhh, look at the time, i ought to get going.

[08:55] <nwc10> 5 was a drag from Vienna to Erlangen

[08:56] <moritz> nwc10: when you're next in or around Erlangen, please ping me :-)

[08:56] <nwc10> I think that the real drag part was that the ICE wasn't very E

[08:56] *** denis_boyun_ joined
[08:56] *** fhelmberger left
[08:56] * moritz didn't read backlog, just responds semic-mechanically to location names

[08:56] <nwc10> trains should not be slower than cars

[08:56] <timotimo> you got dragged? wow, that sounds really uncomfortable!

[08:58] *** denis_boyun_ left
[09:08] *** anaeem1_ left
[09:09] *** anaeem1_ joined
[09:11] *** anaeem1_ left
[09:12] *** anaeem1_ joined
[09:13] <dalek> Perlito: 647112c | (Flavio S. Glock)++ | / (3 files):

[09:13] <dalek> Perlito: Perlito5 - parser - localize compiler state before BEGIN

[09:13] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/647112c3be

[09:13] *** anaeem1 joined
[09:13] *** anaeem1_ left
[09:18] <dalek> rakudo/nom: 17f0230 | (Elizabeth Mattijsen)++ | src/core/Process.pm:

[09:18] <dalek> rakudo/nom: Take #2 on implementing $*USER and $*GROUP

[09:18] <dalek> rakudo/nom: 

[09:18] <dalek> rakudo/nom: Please note that this adds one qx() for every start.  Somehow, I can't get

[09:18] <dalek> rakudo/nom: this to be on-demand using Proxy.  Pointers in that direction welcome!

[09:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17f02304af

[09:19] *** woolfy left
[09:21] <masak> m: month

[09:21] <camelia> rakudo-moar d78b63: OUTPUT«===SORRY!=== Error while compiling /tmp/LaTRxwVvWt␤Undeclared routine:␤    month used at line 1␤␤»

[09:21] <masak> m: constant m = month

[09:21] <camelia> rakudo-moar d78b63: OUTPUT«===SORRY!===␤Cannot invoke null object␤»

[09:21] * masak submits LTA rakudobug

[09:21] <masak> r: constant m = month

[09:21] <camelia> rakudo-moar d78b63: OUTPUT«===SORRY!===␤Cannot invoke null object␤»

[09:21] <camelia> ..rakudo-parrot d78b63: OUTPUT«===SORRY!===␤Could not find sub &month␤»

[09:21] <camelia> ..rakudo-jvm d78b63: OUTPUT«===SORRY!===␤java.lang.NullPointerException␤»

[09:24] <jnthn> lizmat: uh, that's not going to be good for our startup time :(

[09:24] <jnthn> Not to mention it's unportable.

[09:24] <jnthn> lizmat: Why not just make the class obtain the information if requested?

[09:24] <masak> could it be made on-demand in some way?

[09:25] <masak> right.

[09:25] <timotimo> 0.00user 0.00system 0:00.00elapsed 100%CPU (0avgtext+0avgdata 1016maxresident)k  ← a run of "id" :P

[09:25] <timotimo> so it'll all be our qx overhead

[09:25] <masak> oh, lizmat++ even uses the word 'on-demand' in her commit comment :)

[09:25] <lizmat> did you read the commit message ?

[09:25] <lizmat> I *tried* to get it to use Proxy.new

[09:25] * masak read the commit message on-demand :P

[09:25] <jnthn> lizmat: Yes, did you read what I said?

[09:25] <jnthn> lizmat: I said the *class* should obtain the info on demand.

[09:26] <jnthn> Why does it need Proxy?

[09:26] <timotimo> to react to an access to the scalar

[09:26] <timotimo> though if we have an object

[09:26] <lizmat> hmmm... I though of IdName as a generic class, not specific for $*USER

[09:27] <jnthn> So give it a constructor arg that populates things on demand?

[09:27] <lizmat> ah, ok, I see what you mean (I think)

[09:28] <lizmat> will ponder that during the day

[09:28] <jnthn> This is the kind of commit where I'd rather we didn't have the feature at all than have it done this way...sorry.

[09:28] <lizmat> well, I agree... hence my request for pointers  :-)

[09:29] <jnthn> Anyway, passing a generator to the class that it triggers on .id or .name being used for the first time is probably enough.

[09:29] <lizmat> jnthn: do you want me to revert it now or can you wait until I fix this later today ?

[09:29] <jnthn> lizmat: If you'll fix it later today, that's fine.

[09:29] <jnthn> (as in, I can wait)

[09:29] <lizmat> okidoki, might be past midnight local, but still before midnight UTC  :-)

[09:30] <jnthn> :)

[09:30] <lizmat> sightseeing&

[09:30] <jnthn> have fun o/

[09:30] *** lizmat left
[09:45] *** denis_boyun joined
[09:47] *** pecastro left
[09:50] <masak> m: my @foo = <abc def ghi>; .say for @foo.map(*.subst(/^./, '').uc)

[09:50] <camelia> rakudo-moar d78b63: OUTPUT«BC␤EF␤HI␤»

[09:52] <moritz> m: say for <abc def ghi>.map(*.substr(1).uc)

[09:52] <camelia> rakudo-moar d78b63: OUTPUT«␤␤␤»

[09:53] <moritz> m: .say for <abc def ghi>.map(*.substr(1).uc)

[09:53] <camelia> rakudo-moar d78b63: OUTPUT«BC␤EF␤HI␤»

[09:53] *** pecastro joined
[09:57] *** kurahaupo left
[09:59] <timotimo> m: .substr(1).uc.say for <abc def ghi>

[09:59] <camelia> rakudo-moar d78b63: OUTPUT«BC␤EF␤HI␤»

[10:00] *** virtualsue left
[10:01] *** rindolf left
[10:05] <nwc10> jnthn: gah. I can create a placeholder talk for you, but I can't hide it from the public, and if I delete it, you stop being a confirmed attendee

[10:05] <nwc10> er, "committed"

[10:05] <nwc10> ACT can commit you without your consent :-)

[10:06] <nwc10> but it seems that ACT (at least the web admin interface) can't sign someone up for the conference without their consent

[10:07] <jnthn> nwc10: Hm, I joined the conf...

[10:07] <jnthn> nwc10: Does that mean you need me to submit the placeholder?

[10:07] *** dwarring left
[10:07] <nwc10> yes, you joined. But I can't mark you as "confirmed" and make your bold

[10:07] <nwc10> {your name,you} bold

[10:11] *** anaeem___ joined
[10:13] *** anaeem1 left
[10:14] *** anaeem___ left
[10:17] *** anaeem1 joined
[10:23] <jnthn> nwc10: Well, filed you a placeholder one in case it's useful.

[10:28] *** donaldh left
[10:30] <nwc10> jnthn: I think "yes" (we may change our mind, but for now it is accepted)

[10:30] <nwc10> it was more "I can't make you a placeholder without putting words into your mouth"

[10:31] *** donaldh joined
[10:33] <masak> TIL the term 'upvar': a variable rooted not in the currently executing routine's lexpad.

[10:33] <masak> a quick search seems to indicate that Tcl uses this term a lot.

[10:34] * moritz would just call it an "outer"

[10:36] <jnthn> iirc lua uses that terminology too

[10:37] *** virtualsue joined
[10:41] *** fhelmberger joined
[10:49] <Woodi> hi today :)

[10:49] <Woodi> masak: how you think, what functionalities ufo4c should have ?

[11:09] *** synopsebot left
[11:10] *** masak left
[11:10] *** d4l3k_ joined
[11:10] *** pmichaud left
[11:10] *** Util joined
[11:10] *** PerlJam joined
[11:10] *** dalek left
[11:10] *** pmichaud joined
[11:10] *** d4l3k_ is now known as dalek

[11:11] *** tadzik joined
[11:11] *** sergot joined
[11:12] *** masak joined
[11:12] *** masak is now known as Guest21530

[11:13] *** FROGGS left
[11:27] *** synopsebot joined
[11:45] *** anaeem1 left
[11:45] *** anaeem1__ joined
[11:50] *** vendethiel left
[11:51] *** anaeem1__ left
[11:52] *** anaeem1_ joined
[11:57] *** ppabian joined
[11:57] *** ppabian is now known as bbkr_

[11:59] *** Sqirrel left
[12:00] *** vendethiel joined
[12:01] *** FROGGS joined
[12:05] *** pecastro left
[12:06] *** kivutar joined
[12:10] *** anaeem___ joined
[12:12] *** Guest21530 is now known as masak

[12:13] *** anaeem1_ left
[12:21] <masak> <Woodi> masak: how you think, what functionalities ufo4c should have ?

[12:21] <masak> Woodi: what is ufo4c?

[12:21] *** sqirrel joined
[12:21] <jnthn> Presumably, a ufo but for C :)

[12:23] <tadzik> so, a headerizer?

[12:23] <tadzik> I'd love myself a C++ headerizer

[12:24] <tadzik> it may just make working with C++ a bit more bearable

[12:26] <masak> jnthn: that was my guess, too.

[12:26] <masak> I just wanted to make sure. I haven't heard about this project before.

[12:27] <masak> not really sure why Woodi is asking me this ;)

[12:27] <masak> I mean, if he's scratching an itch, shouldn't the features be pretty clear already?

[12:28] <masak> if not, what's the goal of the project? who is the prospective end user? maybe ask them, not me? :)

[12:28] *** pecastro joined
[12:33] <bbkr_> rakudo: my $x = 3; print $x.WHAT

[12:33] <camelia> rakudo-{jvm,moar} 17f023: OUTPUT«use of uninitialized value of type Int in string context␤»

[12:33] <camelia> ..rakudo-parrot 17f023: OUTPUT«use of uninitialized value of type Int in string context  in block  at /tmp/tmpfile:1␤␤»

[12:34] <bbkr_> hm, why print behaves differently than say?

[12:34] <jnthn> Because print does .Str and say does .gist

[12:35] <jnthn> (No, I don't know why. Yes, I did argue for both to do .gist. No, I didn't win that debate. :))

[12:36] <bbkr_> ah, some old context that say=print+"\n" was stuck in my head. thanks for explanation

[12:36] <jnthn> Well, that's how I always used to have it too, and part of me wishes it were so simple :)

[12:36] <jnthn> Alas, it's not...

[12:36] <masak> ISTR it had something to do with printing to filehandles.

[12:37] <masak> which needs to be low-level enough.

[12:37] <masak> I *think* that was the reason.

[12:37] <masak> I don't like it.

[12:37] <masak> we have too many ways to stringify things.

[12:37] <jnthn> The Str/gist distinction makes sense *in general*.

[12:38] <jnthn> This is just a place I was a bit surprised to see it crop up.

[12:38] *** guru joined
[12:38] <masak> aye.

[12:38] *** guru is now known as Guest74357

[12:38] <masak> but we have not just Str and gist, we also have pretty and DUMP.

[12:39] *** Guest74357 is now known as ajr_

[12:39] <masak> and probably some fifth one I can't recall right now.

[12:39] <jnthn> DUMP is a Rakudo-specific debugging aid. And .pretty...uh...is that actually a thing?

[12:39] <jnthn> r: say "foo".pretty

[12:40] <camelia> rakudo-{parrot,jvm,moar} 17f023: OUTPUT«No such method 'pretty' for invocant of type 'Str'␤  in block  at /tmp/tmpfile:1␤␤»

[12:40] * [Coke] sees tcl & upvar in the backlog. squee!

[12:40] <FROGGS> *g*

[12:40] <jnthn> I know .pretty has been discussed. I don't recall it making spec.

[12:41] <masak> oh, phew.

[12:41] <[Coke]> -1 on yet another .Str variant. :)

[12:41] <masak> this is one of the places where I think Python's got it very right.

[12:41] <[Coke]> (if we need a pretty print, I think .perl(:pretty) would be better.)

[12:41] <jnthn> No mention of .pretty in S02, anyway.

[12:42] <masak> m: say [1, 2, {foo => 3}]

[12:42] <camelia> rakudo-moar 17f023: OUTPUT«1 2 {"foo" => 3}␤»

[12:42] <masak> o.O

[12:42] <masak> do the same thing in Python, and it automatically does (the analogue) of .gist on the array.

[12:43] <masak> >>> print [1, 2, { 'foo': 3 }]

[12:43] <masak> [1, 2, {'foo': 3}]

[12:43] <masak> that is, stringification *is* .gist *is* .perl

[12:43] *** kaare_ left
[12:43] <masak> it's hard to argue with the simplicity of that.

[12:43] <dalek> Perlito: 00aef6f | (Flavio S. Glock)++ | / (3 files):

[12:43] <dalek> Perlito: Perlito5 - js - optimize throw() calls

[12:43] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/00aef6f59d

[12:43] <masak> I also find it hard to defend the default stringification of Perl 6.

[12:44] <masak> in some sense, I feel that is a relic of Perl 5 that we didn't get rid of yet.

[12:44] <masak> we did manage to get rid of it with True and False \o/

[12:45] <masak> also -- and I *guess* this is an argument in my favor -- the out put is OUTPUT«1 2 {"foo" => 3}␤» these days. it used to be OUTPUT«1 2 "foo"\t3␤»

[12:45] <masak> don't know when it changed or why. maybe it just happened.

[12:45] <masak> but it is converging on the sanity I'd prefer.

[12:45] *** jnap joined
[12:52] <masak> jnthn: re Swift and semicolons, it seems that the consequence for Swift programs is long lines of code: https://github.com/fullstackio/FlappySwift/blob/master/FlappyBird/GameScene.swift

[12:53] <masak> so you could call Swift a "horizontall-scroll-bar-oriented language"

[12:55] <sergot> http://searchengineland.com/big-win-duckduckgo-apple-adding-safari-private-search-option-193081

[12:58] *** pdcawley left
[12:59] *** anaeem___ left
[13:00] *** pdcawley joined
[13:04] <jnthn> masak: Maybe the plan is to drive sales of a forthcoming ultra-widescreen product :P

[13:04] <[Coke]> I also am not a fan of having multiple methods of stringification. (4 if you count pretty .perl, which I would rather have than .gist or .perl)

[13:09] *** thou joined
[13:10] <[Coke]> m: my $b=[]; say \$b # unrelated

[13:10] <camelia> rakudo-moar 17f023: OUTPUT«:()␤»

[13:13] *** thou left
[13:15] <masak> :() <-- monkey smiley

[13:16] *** [particle] joined
[13:21] <dalek> rakudo-star-daily: d8197f9 | coke++ | log/ (13 files):

[13:21] <dalek> rakudo-star-daily: today (automated commit)

[13:21] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d8197f94d9

[13:22] <[Coke]> no change in modules status. (moar & jvm still have module failurs)

[13:22] *** vendethiel left
[13:24] *** vendethiel joined
[13:28] *** [particle] left
[13:42] *** vendethiel left
[13:43] *** zengargoyle joined
[13:45] *** vendethiel joined
[13:47] *** btyler joined
[13:47] *** ajr_ left
[13:48] *** guru joined
[13:48] *** guru is now known as Guest39451

[13:49] *** Guest39451 is now known as ajr_

[13:58] *** zengargoyle left
[14:00] *** thou joined
[14:02] *** ajr_ left
[14:02] *** skids left
[14:03] *** sqirrel left
[14:03] *** ajr joined
[14:04] *** ajr is now known as Guest75201

[14:05] *** Guest75201 is now known as ajr_

[14:05] *** uniejo joined
[14:10] *** pecastro left
[14:12] *** uniejo_ joined
[14:15] *** Alula left
[14:15] *** rurban joined
[14:16] *** Alula joined
[14:16] *** pecastro joined
[14:16] *** Gothmog_ left
[14:18] *** rurban left
[14:19] <bbkr_> sergot++ # HTTP stuff 

[14:20] * Woodi is back

[14:21] <dalek> Perlito: e36dc1a | (Flavio S. Glock)++ | / (3 files):

[14:21] <dalek> Perlito: Perlito5 - js - code cleanup

[14:21] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/e36dc1afa5

[14:21] <Woodi> headizier ? what's headizier ?

[14:22] <Woodi> but OK, question was way to simple... I'm sory for that...

[14:22] * moritz only knows "headerizer"

[14:22] <Woodi> ok, what is das ? :)

[14:22] <masak> Woodi: not too simple, no. out-of-context, yes.

[14:23] <Woodi> ah, right :)

[14:23] <moritz> Woodi: in the parrot sources, it's a tool that writes header files for you

[14:23] <masak> Woodi: for comparison, I would have been similarly confused if you had asked me what features the projects "Elephants on Stilts" should have.

[14:23] <Woodi> scan .c and write .h ? nice :)

[14:23] *** [particle] joined
[14:24] *** pecastro left
[14:24] <moritz> iirc it scans op definitions

[14:24] <moritz> not .c files

[14:24] <jnthn> masak: I know you're confused, but please tell us! :D

[14:25] <masak> jnthn: well, if it's anything like Ruby on Rails, I guess it's a web MVC framework.

[14:25] <moritz> so, what features should it have?

[14:25] <moritz> :-)

[14:25] <masak> jnthn: but it somehow involves... elephants? I dunno. here is where the confusion begins in earnest.

[14:25] <masak> jnthn: maybe they are there to remind you not to write bloated controllers?

[14:25] <Woodi> Elephants on Stilts project is... hmm.. self describing

[14:26] <moritz> elephants are blobs that might contain huge object graphs, obviously

[14:26] <masak> Woodi: now, see, this is where our disagreements begin.

[14:26] <jnthn> Maybe the stilts reflect layered architecture.

[14:26] <masak> Woodi: to me, the name only creates more questions.

[14:26] <masak> Woodi: as did the project name "ufo4c".

[14:28] <Woodi> ok, I was just lazy and imagined it to not write makefile manually... my bad for laziness ;)

[14:30] <colomon> laziness is good.

[14:30] *** uniejo left
[14:31] *** kaare_ joined
[14:32] *** uniejo_ left
[14:32] *** Gothmog_ joined
[14:32] *** anaeem1 joined
[14:36] <moritz> Woodi: there are tools that aim to allow that

[14:36] <moritz> cmake is one of them

[14:40] <FROGGS> I don't like cmake

[14:40] <moritz> also, automake

[14:42] * colomon has a Perl 5 script to do that sort of thing for $work

[14:42] *** dmol left
[14:43] *** oetiker_ left
[14:43] *** oetiker_ joined
[14:43] *** oetiker_ left
[14:44] <tadzik> a friend of mine wrote a makefile generator which works pretty well

[14:44] <tadzik> Woodi: https://github.com/Vifon/vfnmake it may come to your liking

[14:44] <tadzik> it even supports qt weirdness

[14:45] <tadzik> I like it because it's zero-conf

[14:48] *** oetiker__ joined
[14:48] *** oetiker__ left
[14:49] <moritz> you like that up to the point where you need conf :-)

[14:49] * moritz is just being sarcastic

[14:51] *** crazed- joined
[14:51] *** crazed- left
[14:52] *** crazed- joined
[14:52] *** oetiker left
[14:53] <sergot> bbkr_++ thanks :)

[14:53] *** oetiker joined
[14:53] *** oetiker left
[14:53] *** telex left
[14:53] *** oetiker joined
[14:54] *** telex joined
[14:54] *** oetiker left
[14:55] *** oetiker joined
[14:55] *** crazedpsyc left
[14:55] *** crazed- is now known as crazedpsyc

[14:57] *** oetiker left
[14:58] *** oetiker_ joined
[14:59] *** oetiker joined
[15:00] *** rurban joined
[15:03] *** kaleem left
[15:04] <masak> m: class D {}; class C { has Array[D] %.ds; method foo { %.ds<bar>.push: D.new } }; C.new.foo

[15:04] <camelia> rakudo-moar 17f023: OUTPUT«Type check failed in assignment to '%!ds'; expected 'Array[D]' but got 'Array'␤  in method push at src/gen/m-CORE.setting:1623␤  in method foo at /tmp/o9AcgHoKoI:1␤  in block  at /tmp/o9AcgHoKoI:1␤␤»

[15:05] <masak> status report on typed containers: not there yet. :/

[15:05] <masak> as far as I can understand, the above fails because the auto-vivification helpfully creates an Array for me.

[15:06] <masak> and that Array is not an Array[D], so the typecheck fails.

[15:06] * masak submits rakudobug

[15:06] *** denis_boyun left
[15:07] <masak> m: class D {}; my Array[D] %ds; %ds<bar>.push: D.new # golf'd

[15:07] <camelia> rakudo-moar 17f023: OUTPUT«Type check failed in assignment to '%ds'; expected 'Array[D]' but got 'Array'␤  in method push at src/gen/m-CORE.setting:1623␤  in block  at /tmp/xN_lIMlwRy:1␤␤»

[15:10] <jnthn> m: class D {}; my Array[D] %ds; say %ds<bar>

[15:10] <camelia> rakudo-moar 17f023: OUTPUT«(Array[D])␤»

[15:10] <jnthn> Ah, good, so we do know the type...

[15:14] *** skids joined
[15:22] *** anaeem1 left
[15:23] <Woodi> tadzik: wow, vfnmake looks quite nice :) just name need to be changed :)

[15:24] *** anaeem1 joined
[15:24] *** cognominal left
[15:24] <tadzik> I think the author is actually actively looking for a new one :)

[15:25] *** cognominal joined
[15:26] <Woodi> :)

[15:29] *** sqirrel joined
[15:30] *** igorsutton left
[15:31] <Woodi> but to be on topic: I think UDP is state of art in games industry, at least in last ~20 years :) before telnet was used for reliable gaming :)

[15:35] *** treehug88 joined
[15:35] *** pecastro joined
[15:36] <Woodi> and about asm/jit and some such: djb maked some asm code generator, he use(d) it to implement fast cryptography algos and wining some contests :)  http://cr.yp.to/qhasm.html  maybe some speedups could be borrowed ?

[15:38] *** thou left
[15:41] *** thou joined
[15:41] *** bjz left
[15:43] *** zakharyas left
[15:46] <TimToady> re: "upvar", I believe it is dynamic, not lexical

[15:46] <TimToady> so I wouldn't call it "outer"

[15:49] <[Coke]> each proc in tcl has its own var scope. That's not lexical?

[15:51] <[Coke]> set a 3 ; proc barf {} { puts $a } ; barf ; #barfs

[15:52] <TimToady> it talks about the "caller"; if you go "up" do you get to the caller or the outer scope?  doesn't help distinguish when those are the same scope

[15:55] *** fhelmberger left
[15:56] *** SamuraiJack left
[15:57] <[Coke]> ah, yes, it's all based on caller.

[16:02] *** araujo joined
[16:03] *** bbkr_ left
[16:05] <masak> oh, ok.

[16:05] <masak> a bit disappointed at that. I like the term better when I misunderstood it.

[16:08] <TimToady> If only the world would conform to our misunderstandings, we'd all be much happier, except for when we talk to each other.

[16:09] <TimToady> Except, of course, when we all misunderstand the same way...

[16:10] *** denis_boyun_ joined
[16:12] <masak> :)

[16:13] <masak> I think I understand what you mean.

[16:17] <masak> m: class Tail { method wag {} }; class Dog { has Tail $.tail handles 'wag' .= new(|%_) }; say "alive"

[16:17] <camelia> rakudo-moar 17f023: OUTPUT«===SORRY!=== Error while compiling /tmp/sSxBHybie8␤Cannot use .= to initialize an attribute␤at /tmp/sSxBHybie8:1␤------> as Tail $.tail handles 'wag' .= new(|%_)⏏ }; say "alive"␤»

[16:18] <masak> this is directly from S12:1456.

[16:18] <synopsebot> Link: http://perlcabal.org/syn/S12.html#line_1456

[16:18] <masak> which one is right, S12 or Rakudo?

[16:19] <jnthn> Well, Rakudo is right in so far as you cannot actually do it right now :P

[16:19] <jnthn> I saw an RT about it last night when browsing, though, so you're not the first to want it. :)

[16:19] <donaldh> I'm getting a race condition / deadlock in async IO on both JVM and Moar: https://gist.github.com/donaldh/090b39bb1f4732ad4b82

[16:20] <masak> jnthn: S12 is the first to want it ;)

[16:20] <masak> jnthn: ok, then I know it's a NYI.

[16:20] <jnthn> donaldh: I'm aware of like at least two of those that I didn't get around to dealing with yet. :) So probably. :)

[16:21] <jnthn> masak: Yeah. I guess it may be a mildly tricky transform.

[16:21] <donaldh> jnthn: okay. any pointers and I can help investigate.

[16:21] <jnthn> donaldh: Well, it's mostly a missing bit of Supply infrastructure that needs writing.

[16:22] <jnthn> So that it doesn't start trying to give you the packets until you .tap'd.

[16:22] <jnthn> shopping, bbiab

[16:25] <donaldh> yes, sleep 0.1 after connecting allows it to run through. Will look at pending supply jnthn++

[16:28] <masak> detrain &

[16:28] *** denis_boyun_ left
[16:28] *** fhelmberger joined
[16:30] *** donaldh left
[16:32] *** lizmat joined
[16:36] *** lizmat left
[16:39] *** fhelmberger left
[16:41] *** guru joined
[16:41] *** sqirrel left
[16:42] *** guru is now known as Guest30712

[16:43] *** ajr_ left
[16:48] *** Rotwang joined
[16:49] *** dakkar left
[16:49] <dalek> Perlito: 4022f76 | (Flavio S. Glock)++ | src5/lib/Perlito5/ (2 files):

[16:49] <dalek> Perlito: Perlito5 - js - move context code to subroutine

[16:49] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/4022f76ee3

[16:49] <dalek> Perlito: 9b990c5 | (Flavio S. Glock)++ | src5/lib/Perlito5/constant.pm:

[16:49] <dalek> Perlito: Perlito5 - fix last commit

[16:49] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/9b990c505a

[16:51] *** Guest30712 left
[16:53] *** virtualsue left
[16:55] <cognominal> I have a question about protoregex (in nqp, but it may apply to Perl 6 because relying mostly on the same code).  Is there a way to know which regex matched in the proto group. And, given a protomatch list the submatches. In nq/nqp/32-protoregex.t,  if I add   say(+%( $<symbols> )), it barks :  Cannot find method 'hash'

[16:55] <cognominal> https://github.com/perl6/nqp/blob/master/t/nqp/32-protoregex.t

[16:56] <cognominal> I want to fix nqp --target=parse and that seems one of the problems

[16:58] <cognominal> I suppose, in some sense, there is no such thing as a protomatch, and not a way to access the real match

[17:01] *** treehug8_ joined
[17:03] *** treehug88 left
[17:04] *** treehug88 joined
[17:06] *** treehug8_ left
[17:06] <TimToady> $<sym> should countain the symbol that matched

[17:06] <TimToady> *contain

[17:08] <cognominal> the following test succeeds:  ok( $<symbols><sym> eq 'abc', 'correct proto candidate match' );

[17:09] <TimToady> okay $<symbols><sym> then :)

[17:09] <cognominal> but for dumping I need to enumerate the $<symbols> submatches, that means enumerate some form of hash and array

[17:10] <cognominal> here only the hash is relevant because there is no positional capture

[17:11] <cognominal> I will update the test so we can discuss from there.

[17:14] <cognominal> TimToaday : my first question is about the spec. Is there a way to identify what rule matched in a proto regex group?

[17:16] *** sqirrel joined
[17:24] *** go|dfish left
[17:26] *** pecastro left
[17:26] *** xfix joined
[17:27] *** go|dfish joined
[17:33] * timotimo has solid ground under his feet again

[17:37] *** hoverboard joined
[17:40] <cognominal> https://github.com/cognominal/nqp/compare/perl6:master...patch-1?quick_pull=1

[17:42] <cognominal> This is quite different from what I said to TimToady,  put problems indeed,  I was probably lead astray by other problems when trying to dump the parse.

[17:45] <dalek> rakudo/nom: 68060fe | (Tobias Leich)++ | src/core/JSON/Pretty.pm:

[17:45] <dalek> rakudo/nom: strip a call to eval (leftover from assimilating JSON::Pretty)

[17:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/68060fe803

[17:46] *** spider-mario left
[17:47] <TimToady> in general, which rule matched is only implicit in the returned match data (as "sym"), and we don't provide any kind of pointer by default to which rule matched, since that would be useless most of the time, much like an automatic index on for loops would impose overhead on everyone whether they use it or not

[17:48] <jnthn> +1

[17:48] <TimToady> if you need to know in a particular instance, you can always install an action to record it

[17:49] <cognominal> ok

[17:49] *** kaare_ left
[17:49] <cognominal> now there is the problem of unrecorded positional matches

[17:50] * TimToady doesn't understand what you expect to be recorded if you didn't tell it to record it...

[17:51] *** spider-mario joined
[17:52] <cognominal> oops

[17:52] *** kaare_ joined
[17:52] *** kaare_ left
[17:52] <cognominal> good, I added four successful test thens :)

[17:53] * cognominal updates the patch

[17:54] <TimToady> otoh, there's also .caps and .chunks, which may provide you some more ways to see what matched

[17:55] <dalek> Perlito: 8264620 | (Flavio S. Glock)++ | / (59 files):

[17:55] <dalek> Perlito: Perlito5 - js - use more regular syntax

[17:55] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/82646208ca

[17:55] <dalek> Perlito: 57d21d2 | (Flavio S. Glock)++ | t5/ (57 files):

[17:55] <dalek> Perlito: Perlito5 - fix last commit

[17:55] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/57d21d259f

[17:56] <TimToady> those will return matches in textual order rather than as a tree

[17:56] *** dmol joined
[17:57] <TimToady> I believe they don't impose any extra overhead on normal matches, since they can be constructed by traversing the existing tree and then sorting; dunno if the current implementation is doing that though

[17:58] <cognominal> https://github.com/cognominal/nqp/compare/perl6:master...patch-2?quick_pull=1

[17:58] <masak> yes, they do.

[17:58] <masak> s/they do/it does/

[17:58] <cognominal> Don't know how to cancel my previous pull request.

[17:59] *** Alina-malina left
[18:00] <cognominal> sorry for wasting your precious time

[18:01] <masak> not at all.

[18:02] <masak> flood-filling algos need to have a certain degree of redundancy.

[18:02] <TimToady> +1

[18:03] <TimToady> the ants only have to be pulling the food toward the nest on average, not always individually :)

[18:04] <TimToady> I believe that's even specced...

[18:06] <TimToady> S01 sez: "Mostly, we're just a bunch of ants all cooperating (sort of) to haul food toward the nest (on average)."

[18:08] *** ren1us left
[18:08] <masak> that's a sentence with three hedges in it :)

[18:09] *** cognominal__ joined
[18:09] <masak> I'd only paid attention to the last two until today.

[18:09] <TimToady> ants don't find hedges to be much of a barrier

[18:09] <masak> s/hedges/caveats/

[18:09] * TimToady doesn't know how to tie a caveat...

[18:10] * jnthn ties a caveat on a hedge

[18:11] <TimToady> the ants hope there's gravy on the caveat

[18:11] *** cognominal left
[18:12] * masak .oO( it's very exclusive caveat, it's Russian )

[18:12] <TimToady> that's *caviat*, silly

[18:13] <jnthn> .oO( should putin more effort with these puns... )

[18:13] * masak looked at "caviat", and his brain immediately suggested "demacsog"

[18:14] * TimToady should take somethign for my ukraine

[18:14] <masak> maybe u craned your neck too much?

[18:15] <TimToady> it ain't no crimea

[18:15] <TimToady> .oO(black sea humor...)

[18:15] <masak> haha

[18:17] * masak .oO( Май work here is дан )

[18:17] * PerlJam keeps looking for the pun in "haha"

[18:17] <TimToady> it was a "your mom" joke in Japanese

[18:18] <vendethiel> well hello, cheerful people.

[18:18] <TimToady> what about the rest of us?

[18:18] <masak> vendethiel!

[18:18] <vendethiel> o/, masak !

[18:18] * masak tries not to think about anything in Latin

[18:19] <vendethiel> oh c'mon, just do whatever :). It was childish of me to make a snarky comment

[18:19] <jnthn> masak: What happens in Vegas :P

[18:19] <masak> jnthn: :D

[18:19] <masak> jnthn: that must be your favorite Latin proverb...

[18:19] <jnthn> Yes :)

[18:19] <TimToady> that would be at Caesar's, right?

[18:20] * masak .oO( what happens at Caesar's is total craps )

[18:20] *** Alina-malina joined
[18:21] <TimToady> masak is hoovering up all the nevada puns...

[18:21] <jnthn> Dam it.

[18:21] *** denis_boyun_ joined
[18:21] <masak> no puns left for desert.

[18:22] <TimToady> but at least we've had a blast

[18:22] <masak> hey, it's easy, with a bit of Investigation, to make Hoover puns.

[18:22] <dylanwh> this is just all night buffett of puns.

[18:23] <jnthn> masak: You could really clean the floor with them...

[18:23] <vendethiel> though a bit stodgy for bad english speakers trying to understand them :P

[18:23] <masak> jnthn: except, that would suck.

[18:24] <TimToady> a vacuum abhors nature too

[18:24] *** eiro left
[18:25] <TimToady> sorry I mentioned Hoover, it set a bad president...

[18:25] *** eiro joined
[18:26] * [Coke] wonders if "comprehension" is another word for thunk.

[18:27] <PerlJam> [Coke]: like in the phrase "list comprehension"?  I've occacionally wondered about that usage myself.

[18:27] <TimToady> .oO(He comprehended after I thunk him upside the head.)

[18:27] <jnthn> Well, I comprehend things better after I've thunk about them... :)

[18:27] * [Coke] sees someone talking about comprehensions in re: swift, and in context, sounded like a thunk.

[18:27] <jnthn> [Coke]: I've not seen it as another word for it, though if for is map then I guess the body of the comprehension is thunked...

[18:29] <TimToady> I'd just take it as a word meaning "consider all these bits together as a unit"

[18:30] *** dmol left
[18:30] <TimToady> that's all I apprehend in the term

[18:32] *** sqirrel left
[18:33] <TimToady> 3. Logic The sum of meanings and corresponding implications inherent in a term.

[18:34] <TimToady> so I think it means something more like "list generator"

[18:34] <TimToady> or "list as defined by this term"

[18:35] <TimToady> But who can comprehend what mathematicians mean when they use terms differently from mere mortals?

[18:35] * TimToady knows what roots are, and most of 'em aren't square.

[18:36] <PerlJam> TimToady--the Punniator.

[18:36] <TimToady> and "graph" means "writing"

[18:37] <TimToady> that Trogdor Punninator to you

[18:38] *** guru joined
[18:38] *** guru is now known as ajr_

[18:40] <masak> m: class Widget { has $.x; method set_x { has $!x_set; die "Already set" if $!x_set++; say "Setting x" } }; given Widget.new { .set_x; .set_x }

[18:40] <camelia> rakudo-moar 17f023: OUTPUT«Setting x␤Already set␤  in method set_x at /tmp/eNF8phGCaJ:1␤  in block  at /tmp/eNF8phGCaJ:1␤␤»

[18:40] <masak> this pattern just occurred to me.

[18:40] <masak> declaring the attribute inside of the method, if it's only used in that method anyway.

[18:41] <TimToady> heh, I didn't even notice till you mentioned it :)

[18:41] <masak> though this is probably better expressed as a 'is once_only' trait or something.

[18:41] <jnthn> Yeah, some people were like "argh why not forbid this", and here's a nice use case :P

[18:42] <masak> yeah.

[18:42] <TimToady> There is no pattern so good that someone, somewhere, won't turn it into an antipattern.

[18:44] <TimToady> which pretty much explains the entire course of western theology :)

[18:47] *** dwarring joined
[18:47] *** cognominal joined
[18:49] *** cognominal__ left
[18:50] <dalek> Perlito: a81c661 | (Flavio S. Glock)++ | / (4 files):

[18:50] <dalek> Perlito: Perlito5 - js - use more regular syntax; more 'eval' tests

[18:50] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/a81c661b5f

[18:53] *** virtualsue joined
[18:54] <[Coke]> wait, there are non-anti-patterns in theology?

[18:57] <vendethiel> (aren't non-anti-patterns just patterns ?)

[19:05] <masak> only if you believe in the law of the excluded middle.

[19:08] *** darutoko left
[19:08] *** kivutar left
[19:08] *** kaare_ joined
[19:14] <dalek> perl6-roast-data: 1e2fe9c | coke++ | / (6 files):

[19:14] <dalek> perl6-roast-data: today (automated commit)

[19:14] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1e2fe9ce62

[19:14] <[Coke]> still no clean rakudo runs. :|

[19:24] <[Coke]> S02-magicals/pid.rakudo.jvm........................   1    0    1    0    2 1 todo PASSED: assigning to $*PID does not die

[19:24] <[Coke]> that todo passes on jvm & parrot if someone wants to re-fudge for moar.

[19:24] <FROGGS> r: $*PID = 2

[19:25] <camelia> rakudo-moar 68060f: OUTPUT«Cannot modify an immutable Int␤  in block  at /tmp/tmpfile:1␤␤»

[19:25] <camelia> ..rakudo-{parrot,jvm} 68060f: OUTPUT«Cannot modify an immutable value␤  in block  at /tmp/tmpfile:1␤␤»

[19:25] <TimToady> r: my $*PID = 2;

[19:25] <camelia> rakudo-{parrot,jvm,moar} 68060f: ( no output )

[19:25] <FROGGS> s/assigning/declaring/ or so

[19:26] * [Coke] was just going off presence of TODO PASSED in logoutput

[19:26] <TimToady> most things in PROCESS should be considered immutable

[19:26] <TimToady> r: GLOBAL::<$PID> = 2; say $*PID

[19:27] <camelia> rakudo-{parrot,jvm,moar} 68060f: OUTPUT«2␤»

[19:27] <TimToady> r: PROCESS::<$PID> = 2;

[19:27] <camelia> rakudo-moar 68060f: OUTPUT«Cannot modify an immutable Int␤  in method assign_key at src/gen/m-CORE.setting:9412␤  in sub postcircumfix:<{ }> at src/gen/m-CORE.setting:2690␤  in block  at /tmp/tmpfile:1␤␤»

[19:27] <camelia> ..rakudo-jvm 68060f: OUTPUT«Cannot modify an immutable value␤  in method assign_key at gen/jvm/CORE.setting:9353␤  in sub postcircumfix:<{ }> at gen/jvm/CORE.setting:2690␤  in block  at /tmp/tmpfile:1␤␤»

[19:27] <camelia> ..rakudo-parrot 68060f: OUTPUT«Cannot modify an immutable value␤  in method assign_key at gen/parrot/CORE.setting:9343␤  in method assign_key at gen/parrot/CORE.setting:1828␤  in sub postcircumfix:<{ }> at gen/parrot/CORE.setting:2694␤  in sub postcircumfix:<{ }> at gen/parrot…»

[19:27] <TimToady> cool

[19:27] *** virtualsue left
[19:29] *** skids left
[19:33] <masak> how do I ask "are $o1 and $o2 of exactly the same type?" ?

[19:34] <masak> $o1.WHAT === $o2.WHAT ?

[19:38] <jnthn> masak: Should work, I think.

[19:39] <moritz> m: say Mu === Mu

[19:39] <camelia> rakudo-moar 68060f: OUTPUT«Type check failed in binding <anon>; expected 'Any' but got 'Mu'␤  in block  at /tmp/9XOP341fMS:1␤␤»

[19:39] <moritz> no, doesn't work

[19:40] <moritz> because === must autothread

[19:40] <jnthn> Oh...

[19:40] <moritz> $o1.WHAT.WHICH === $o2.WHAT.WHICH should work though

[19:40] <moritz>  m: say Mu.WHICH === Mu.WHICH

[19:40] <camelia> rakudo-moar 68060f: OUTPUT«True␤»

[19:41] <moritz> m: say (Mu but role { }).WHICH === (Mu but role { }).WHICH

[19:41] <camelia> rakudo-moar 68060f: OUTPUT«True␤»

[19:41] <moritz> m: say (Any but role { }) === (Any but role { })

[19:41] <camelia> rakudo-moar 68060f: OUTPUT«True␤»

[19:41] <jnthn> Apart from .WHICH never got fixed to properly factor in "what metaclass is this

[19:41] <moritz> huh.

[19:42] <moritz> m: say (Any but role { }) ~~ (Any but role { })

[19:42] <camelia> rakudo-moar 68060f: OUTPUT«False␤»

[19:42] <moritz> what? they don't smart-match, but they are identical? WTF?

[19:42] <moritz> I believe that (Any but role { }) === (Any but role { }) returning True is a bug

[19:42] <jnthn> moritz: They're not identical.

[19:42] <jnthn> Right, me too

[19:43] <jnthn> As I said, it's .WHICH to blame.

[19:46] *** [particle] left
[19:47] <mr-foobar> very interesting talk on c++ http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2014/Keynote #tangent

[19:50] * FROGGS will watch after $dayjob

[19:50] <moritz> FROGGS: still at $dayjob? :(

[19:51] <FROGGS> moritz: doing server maintenance from home

[19:51] <Su-Shee> hey, why is there no noah's arc emoji perl6 example to counter swift? ;)

[19:51] *** [particle] joined
[19:56] *** kaare_ left
[19:56] *** martinzaremba joined
[20:04] <vendethiel> which reminds me, masak, are you coming to les journées perl :) ?

[20:05] <vendethiel> (or, really, anybody here is free to answer, I'd love to physically chat a bit with y'all)

[20:05] <vendethiel> (except for you, camelia.)

[20:06] <mr-foobar> m: my \♥;

[20:06] <camelia> rakudo-moar 68060f: OUTPUT«===SORRY!=== Error while compiling /tmp/j9fRiEjeBi␤Malformed my␤at /tmp/j9fRiEjeBi:1␤------> my ⏏\♥;␤    expecting any of:␤        scoped declarator␤»

[20:07] <masak> vendethiel: would love to come, but can't this year.

[20:07] <vendethiel> ah, too bad, must a meta-monad in your way :)

[20:08] *** skids joined
[20:08] <mr-foobar> \ was a unicode escaping thingy right ? 

[20:09] <vendethiel> it's just a sigil-less variable, innit ?

[20:10] <masak> the latter.

[20:11] <masak> mr-foobar: you have to define 'sub term:<♥> {}', I think.

[20:11] <masak> which is reasonable, since you're using a non-alphanumeric character.

[20:14] <mr-foobar> masak: any example program ? I'd like `♥("foo")` to print `I ♥ foo`

[20:15] <vendethiel> m: sub prefix:<♥>(Str $love) { say "I ♥ $love"; }; ♥("foo");

[20:15] <camelia> rakudo-moar 68060f: OUTPUT«I ♥ foo␤»

[20:15] <vendethiel> :D

[20:15] * vendethiel can peurlsiks now

[20:15] <mr-foobar> vendethiel++ 

[20:17] *** lizmat joined
[20:20] <masak> m: sub prefix:<♥>(Str $love) { say "I ♥ $love"; }; ♥"foo"

[20:20] <camelia> rakudo-moar 68060f: OUTPUT«I ♥ foo␤»

[20:20] <masak> parentheses not required.

[20:25] <mr-foobar> Su-Shee ^^ 

[20:28] <Su-Shee> oh I know, it works :) 

[20:29] <mr-foobar> m: sub prefix:<😂>(Str $hate) { say "😂 $hate"; }; 😂"bash"

[20:29] <camelia> rakudo-moar 68060f: OUTPUT«😂 bash␤»

[20:29] <Su-Shee> it even works (only half-legit) in perl 5.. so I don't really see what the fuss about swift is..

[20:30] <Su-Shee> looks like I have to write it myself.. though I need an editor which actually can display the stupid unicode emoji-ranges..

[20:30] <mr-foobar> err wrong unicode .. well swift has optional typing which is great

[20:31] <mr-foobar> it's written by the llvm people

[20:31] <Su-Shee> "wrong unicode"? there is a right one now? ;) 

[20:32] <masak> Perl 6 has optional typing too.

[20:32] <masak> we like to call it "gradual typing", though.

[20:32] *** hoverboard left
[20:33] <dalek> Perlito: b98377f | (Flavio S. Glock)++ | / (3 files):

[20:33] <dalek> Perlito: Perlito5 - js - code cleanup

[20:33] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/b98377fd3a

[20:34] <jnthn> masak: I think what swift is calling optional typing is what you'd call monad me maybe...

[20:34] <Su-Shee> masak: well I'd say we don't need to make a fuss about swift feature-wise..

[20:34] *** rurban left
[20:34] <jnthn> masak: The language is statically typed, with type inference to ease the burden.

[20:34] <masak> oh, nullable types. :)

[20:35] <masak> yes, those are very nice.

[20:35] <mr-foobar> Su-Shee: I should have used 😭 

[20:37] *** martinzaremba left
[20:38] <mr-foobar> my half-reading of the swift book tells me they are using the wrong unicode (utf-16)

[20:38] <FROGGS> now I'd like to .split(/\r\n\r\n/) a Buf :/

[20:38] *** martinzaremba joined
[20:39] <Su-Shee> mr-foobar: javascript is utf-16 too if I remember correctly.

[20:39] <masak> mr-foobar: if you wish to contribute to Unicode enlightenment, please say "the wrong encoding", and not "the wrong unicode"...

[20:40] <Su-Shee> mr-foobar: also, that's the encoding, unicode is the standard/consortium... 

[20:42] <mr-foobar> masak: wokay. I kinda think of unicoding as a verb ( as code part is common with encode )

[20:42] *** kivutar joined
[20:42] <Su-Shee> mr-foobar: don't. unicode comes in many encodings. 

[20:44] <masak> what Su-Shee++ said.

[20:44] <dalek> Perlito: 65f462d | (Flavio S. Glock)++ | / (3 files):

[20:44] <dalek> Perlito: Perlito5 - js - code cleanup

[20:44] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/65f462deba

[20:44] <FROGGS> how do I find the position of a sequence of numbers in a list?

[20:45] <mr-foobar> europeans :) 

[20:45] *** kurahaupo joined
[20:46] *** kivutar left
[20:47] *** japhb_ joined
[20:49] <Su-Shee> mr-foobar: actually, the unicode consortium came from the US.. there's also ISO 10646.

[20:51] <masak> FROGGS: not a single number, but a sequence of them?

[20:52] <jnthn> m: my @a = 1, 3, 5, 9, 42, 69, 2; my @b = 9, 42; say @a.first-index({ @a[state $i .. $i++ + @b] ~~ @b }) + 1 # or something...

[20:52] <camelia> rakudo-moar 68060f: OUTPUT«3␤»

[20:52] <FROGGS> masak: yes

[20:52] *** Rotwang left
[20:53] <FROGGS> jnthn++

[20:53] <jnthn> oh, that isn't quite right

[20:53] <FROGGS> ohh?

[20:54] <jnthn> my @a = 1, 3, 5, 9, 42, 69, 2; my @b = 3, 5; say @a.first-index({ @a[(state $i = -1) .. $i++ + @b] ~~ @b })

[20:55] <jnthn> m: my @a = 1, 3, 5, 9, 42, 69, 2; my @b = 3, 5; say @a.first-index({ @a[(state $i = -1) .. $i++ + @b] ~~ @b })

[20:55] <camelia> rakudo-moar 68060f: OUTPUT«1␤»

[20:55] <jnthn> m: my @a = 1, 3, 5, 9, 42, 69, 2; my @b = 1, 3, 5; say @a.first-index({ @a[(state $i = -1) .. $i++ + @b] ~~ @b })

[20:55] <camelia> rakudo-moar 68060f: OUTPUT«0␤»

[20:55] <FROGGS> I like it :o)

[20:55] <jnthn> Previous one got the wrong answer if it was at the start of the array 'cus I compensated for the off-by-one wrongly.

[20:55] <FROGGS> yeah, I see it

[20:56] <FROGGS> now I can fake up my Buf splitting :o)

[20:56] <FROGGS> thanks

[21:01] *** dayangkun left
[21:03] <dalek> Perlito: a5b388d | (Flavio S. Glock)++ | / (3 files):

[21:03] <dalek> Perlito: Perlito5 - js - code cleanup

[21:03] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/a5b388d5db

[21:05] *** rurban joined
[21:05] *** lizmat left
[21:06] *** skids left
[21:07] *** kurahaupo left
[21:11] *** firnsy joined
[21:11] *** firnsy left
[21:11] *** firnsy joined
[21:17] *** dayangkun joined
[21:18] *** martinzaremba left
[21:19] *** martinzaremba joined
[21:28] <masak> 'night, #perl6

[21:31] <jnthn> 'night, masak

[21:36] *** lizmat joined
[21:38] *** martinzaremba left
[21:40] *** treehug88 left
[21:41] *** martinzaremba joined
[21:42] *** martinzaremba left
[21:43] *** rurban left
[21:51] *** woolfy joined
[21:56] *** LLamaRider joined
[21:58] *** rurban joined
[21:58] *** martinzaremba joined
[21:59] *** SevenWolf joined
[22:04] *** hoverboard joined
[22:05] *** donaldh joined
[22:11] *** ajr_ left
[22:12] *** pippo left
[22:13] *** virtualsue joined
[22:15] *** spider-mario left
[22:18] *** LLamaRider left
[22:22] *** anaeem1 left
[22:25] <donaldh> jnthn: I fixed the Supply more/tap race https://github.com/rakudo/rakudo/pull/274

[22:25] <donaldh> jnthn: you already had code for a paused Supply

[22:25] *** virtualsue left
[22:26] <jnthn> donaldh: oh, but I don't like/want that solution :(

[22:26] <donaldh> oh. 

[22:26] <donaldh> Well it corrects the current solution :)

[22:26] <jnthn> Yeah, but it adds a dependency on something I don't think is the right way to solve the problem...

[22:27] <donaldh> okay. np

[22:27] <lizmat> could we at least pull this? so at least this solution doesn't race ?

[22:27] <jnthn> Knowing that fixes it for you is worthwhile, though...since it means the thing I have in mind (Supply.on_demand(-> $s { ... }) will do it.

[22:27] <donaldh> I didn't realise you had bigger change planned.

[22:28] <lizmat> so, shall I pull it ?  For now ?

[22:28] <jnthn> lizmat: So I can revert it and replace it in a day or two's time?

[22:28] <donaldh> It allows me to get on with writing spectests for Async io

[22:28] <jnthn> donaldh: True, though you could do that with it applied locally :)

[22:28] <donaldh> Yep. Happy to.

[22:29] *** BenGoldberg joined
[22:29] <lizmat> if it's only a day or two, then by all means, don't let me stop you   :-)

[22:29] <jnthn> Yeah. I have a full day for Perl 6 things on Thursday so can certainly get to it then.

[22:30] <lizmat> cool

[22:30] <donaldh> jnthn++

[22:33] *** denis_boyun_ left
[22:34] *** denis_boyun_ joined
[22:36] <dalek> rakudo/nom: a8798f7 | (Elizabeth Mattijsen)++ | src/core/Process.pm:

[22:36] <dalek> rakudo/nom: Don't bother trying to set $*USER/GROUP on Windows

[22:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8798f77f1

[22:37] *** martinzaremba left
[22:42] *** hoverboard is now known as water

[22:43] *** PZt joined
[22:49] *** dmol joined
[22:54] *** skids joined
[22:54] *** rurban left
[22:56] <jnthn> 'night, #perl6

[22:57] <lizmat> good night jnthn 

[22:57] <donaldh> 'night

[22:57] * donaldh also

[22:57] <lizmat> night donaldh !

[22:57] *** donaldh left
[23:03] *** dayangkun left
[23:06] *** woolfy left
[23:07] *** denis_boyun_ left
[23:10] *** water left
[23:10] *** btyler left
[23:16] *** ugexe_ joined
[23:16] *** Gothmog_1 joined
[23:16] *** Tene_ joined
[23:16] *** Tene_ left
[23:16] *** Tene_ joined
[23:16] *** erdic_ joined
[23:20] *** dylanwh_ joined
[23:20] *** clkao left
[23:20] *** Gothmog_ left
[23:20] *** Gothmog_1 is now known as Gothmog_

[23:20] *** erdic left
[23:20] *** integral left
[23:20] *** djanatyn left
[23:20] *** dylanwh left
[23:20] *** dylanwh_ is now known as dylanwh

[23:20] *** erdic_ is now known as erdic

[23:20] *** djanatyn joined
[23:20] *** integral joined
[23:20] *** integral left
[23:20] *** integral joined
[23:22] *** clkao joined
[23:23] *** water joined
[23:25] *** water is now known as hoverboard

[23:31] *** BenGoldberg left
[23:33] *** BenGoldberg joined
[23:35] <timotimo> well, in the next few hours i'll sleep, but maybe i'll write the p6weekly after that

[23:38] *** rurban joined
[23:39] <lizmat> gnight timotimo 

[23:39] * lizmat will go to bed soon as well

[23:40] <colomon> \o

[23:46] <lizmat> sleep&

[23:46] *** lizmat left
[23:50] <timotimo> sergot: i'm not saying you should be the one to do it, but HTTP::Message could implement the hash interface so that we can have {'Vary'}:delete for example

[23:50] <timotimo> or say $my_message<Vary Date Content-Type>:kv

[23:52] <timotimo> it may be as easy as putting "has %!headers handles "postcircumfix:<{ }>" or something

[23:52] <timotimo> er, with proper quotes of course

[23:56] *** hoverboard left
[23:57] *** BenGoldberg left
[23:59] *** lizmat joined
