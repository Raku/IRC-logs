[00:01] <Mouq> lue: Rakudobrew?

[00:01] <lue> I do not know what that is. /me checks

[00:02] <timotimo> you're in for a nice surprise

[00:03] <lue> Nah, won't work for me, I don't do --gen-*

[00:04] <lue> (and besides, I would hope panda/rakudo would be able to take care of what (at least for the non-precomp'd files) is way too granular a versioning scheme :/)

[00:06] <timotimo> the things refer to each other with "cuids", so that's problematic

[00:07] <lue> ooc, any reason rakudobrew is being remarkably un-Perl6 with its non-use of MAIN?

[00:09] <Mouq> lue: Well, it's p5…

[00:10] <lue> that would explain it :)

[00:11] <lue> But like I said, it won't work for me, I like taking care of the build process and everything myself, it's just that panda should be smarter about this "upgrading" thing.

[00:19] <dalek> rakudo/nom: 6ab0e24 | (Tim Smith)++ | src/core/Main.pm:

[00:19] <dalek> rakudo/nom: Simplify program name in $?USAGE if in PATH

[00:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ab0e2491b

[00:19] <dalek> rakudo/nom: 7cf9cad | (Alexander Moquin)++ | src/core/Main.pm:

[00:19] <dalek> rakudo/nom: Merge pull request #265 from softmoth/usage-prog-name

[00:19] <dalek> rakudo/nom: 

[00:19] <dalek> rakudo/nom: Simplify program name in $?USAGE if in PATH

[00:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7cf9cad990

[00:20] <Mouq> thou++ # scratching itches

[00:21] <thou> Thanks, Mouq!

[00:21] <Mouq> thou: Thank you!

[00:29] * lue afk

[00:37] <Mouq> std: .say for"a".."z"

[00:37] <camelia> std e347792: OUTPUT«ok 00:01 123m␤»

[00:40] *** gdey left
[00:42] *** raiph left
[00:56] *** adu left
[01:08] *** klapperl_ joined
[01:10] *** hoverboard joined
[01:11] *** klapperl left
[01:12] *** BenGoldberg left
[01:13] *** btyler joined
[01:13] *** BenGoldberg joined
[01:31] *** hoverboard left
[01:32] *** FROGGS_ joined
[01:33] *** dragon_d left
[01:35] *** gdey joined
[01:35] *** Sqirrel_ left
[01:36] *** FROGGS left
[01:39] *** dayangkun_ left
[02:03] *** telex left
[02:04] *** telex joined
[02:10] *** virtualsue joined
[02:31] *** dragon_d joined
[02:31] *** xragnar_ joined
[02:31] *** xragnar left
[02:31] *** xragnar_ is now known as xragnar

[02:38] *** dayangkun joined
[02:51] *** dayangkun left
[03:01] *** gdey left
[03:04] *** gdey joined
[03:08] *** dayangkun joined
[03:09] *** ggoebel111111 joined
[03:09] *** dayangkun left
[03:10] *** labster left
[03:12] *** plobsing joined
[03:24] *** zz_nhayashi is now known as nhayashi

[03:25] *** bjz left
[03:25] *** gdey left
[03:26] *** xenoterracide_ left
[03:31] *** bjz joined
[03:35] *** daniel-s_ joined
[03:37] *** BenGoldberg left
[03:40] *** daniel-s_ left
[03:44] *** gtodd left
[03:44] *** Deepak joined
[03:45] *** adu joined
[03:49] <adu> Mouq++

[03:49] *** virtualsue left
[03:50] *** Alina-malina left
[03:58] *** raiph joined
[04:00] *** labster joined
[04:01] *** hoverboard joined
[04:05] *** Deepak left
[04:06] *** dayangkun joined
[04:08] *** hoverboard left
[04:11] *** anaeem1_ joined
[04:12] <Mouq> r: say (:a<4>,:b<7>,:c<4>).min(*.value)

[04:12] <camelia> rakudo-parrot 7cf9ca, rakudo-jvm 7cf9ca, rakudo-moar 7cf9ca: OUTPUT«"a" => "4"␤»

[04:12] <Mouq> r: say (:c<4>,:b<7>,:a<4>).min(*.value)

[04:12] <camelia> rakudo-parrot 7cf9ca, rakudo-jvm 7cf9ca, rakudo-moar 7cf9ca: OUTPUT«"c" => "4"␤»

[04:13] <TimToady> r: say (:a<4>,:b<17>,:c<4>).min(*.value)

[04:13] <camelia> rakudo-parrot 7cf9ca, rakudo-jvm 7cf9ca, rakudo-moar 7cf9ca: OUTPUT«"b" => "17"␤»

[04:13] <TimToady> n: say (:a<4>,:b<17>,:c<4>).min(*.value)

[04:13] <camelia> niecza v24-109-g48a8de3: OUTPUT«"a" => 4␤»

[04:16] <Mouq> I feel like I'm just going to keep wanting to solve 2d problems with complex numbers until we have [1;2] semantics in place in Rakudo

[04:16] <Mouq> *solve all

[04:16] <lue> Complex numbers are a nice way to do 2D though :)

[04:17] <Mouq> lue: They really are :)

[04:17] <lue> .oO( @grid{1+2i} )

[04:20] <Mouq> TimToady: Is [1;2] supposed to be eqv to [$((1,),(2,))]?

[04:20] <lue> heh, good thing I decided on a last-minute better test file for a fix to rakudo :)

[04:20] <TimToady> Mouq: depends on what you mean by eqv

[04:21] <TimToady> is more like [lol (1,), (2,)]

[04:21] <Mouq> Okay

[04:21] <TimToady> or [$(1,), $(2,)]

[04:22] <TimToady> but with some knowledge that it actually is a 2-dimensional subscript

[04:22] <lue> I don't suppose there's a way to test if I'm in a delimited code block (vs. paragraph or abbreviated) without adding a new dynvar, right?

[04:22] <TimToady> so just passing a list of slices is not quite good enough

[04:22] <lue> (the existing CODE_BLOCK just distinguishes between explicit/implicit)

[04:22] *** btyler left
[04:23] <Mouq> so then multi postcircumfix:<[ ]> should have a (LoL @) candidate?

[04:23] <Mouq> r: say lol((1,), (2,)).perl

[04:23] <Mouq> n: say lol((1,), (2,)).perl

[04:23] <camelia> rakudo-parrot 7cf9ca, rakudo-jvm 7cf9ca, rakudo-moar 7cf9ca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Undeclared routine:␤    lol used at line 1. Did you mean 'log'?␤␤»

[04:23] <camelia> niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤    'lol' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_u…»

[04:24] <Mouq>  /o\

[04:24] <Mouq> lue: What do you mean?

[04:24] *** hoverboard joined
[04:24] <Mouq> lue: In Perl6::Grammar.nqp?

[04:24] <lue> Mouq: yes

[04:24] <Mouq> Uhh, why?

[04:24] <TimToady> that's really the only reason for having that type

[04:24] <TimToady> otherwise it would be pure structure

[04:24] <TimToady> rakudo doesn't really do lol yet

[04:24] <TimToady> and .tree behaves rather like .lol is supposed to

[04:25] <Mouq> TimToady: Okay, thank you for clearing that up for me :)

[04:25] <lue> Mouq: explicit code block with multiline formatting code with lines starting with a pod directive causes errors where not surrounding the same in a formatting code works.

[04:25] <lue> (well, "warnings", but the output formatting ends up being not-totally-right)

[04:26] *** gdey joined
[04:26] <Mouq> r: =begin code :allow<B>␤B< a b␤c d e␤f g>␤=end code

[04:26] <camelia> rakudo-parrot 7cf9ca, rakudo-jvm 7cf9ca, rakudo-moar 7cf9ca: ( no output )

[04:27] <Mouq> r: =begin code :allow<B>␤B< a b␤=para␤c d e␤␤f g>␤=end code

[04:27] <camelia> rakudo-parrot 7cf9ca, rakudo-jvm 7cf9ca, rakudo-moar 7cf9ca: OUTPUT«Potential difficulties:␤    Pod formatting code B missing endtag '>'.␤    at /tmp/tmpfile:2␤    ------> [32mB< a b[33m⏏[31m<EOL>[0m␤»

[04:27] <Mouq> :/

[04:28] <Mouq> Have fun with that :P

[04:29] <Mouq> We can just make it so directives are always allowed in formatting codes in an =code-type context

[04:29] <lue> Mouq: I had it, I just needed to introduce a new dynamic variable to distinguish between =begin code and =for code/=code, because otherwise you could do =for code :allow<B>\nB<line 1\n=head1 line2>  which is inconsistent with non-fc'd stuff in =for code

[04:29] <Mouq> Yeah

[04:29] <Mouq> Well lue++ :)

[04:31] <lue> *sigh* panda's being the most annoying part of this :/ (I could just use --doc, but it's so much easier to see what goes on in the test file with --doc=HTML)

[04:31] *** kaare__ joined
[04:31] <Mouq> lue: say $=pod.perl?

[04:32] <lue> Mouq: seeing =head1 commands that are either plaintext and bold or big blue headers is much faster :P

[04:32] <Mouq> lue: Fair point

[04:34] <thou> Anyone here that can merge into evalbot & restart?

[04:34] <thou> https://github.com/perl6/evalbot/pull/5

[04:35] <Mouq> thou++

[04:37] <Mouq> looks solid

[04:38] <thou> *NB* I tested the format_names() sub, but not full evalbot!

[04:39] <Mouq> thou: I'll merge it and take the blame if it doesn't work :) Though I'm pretty sure it does

[04:39] <dalek> evalbot: 1a8a83e | (Tim Smith)++ | evalbot.pl:

[04:39] <dalek> evalbot: Combine eval names sharing prefix & rev

[04:39] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/1a8a83e55d

[04:39] <dalek> evalbot: 0ef6d11 | (Alexander Moquin)++ | evalbot.pl:

[04:39] <dalek> evalbot: Merge pull request #5 from softmoth/combine-eval-names

[04:39] <dalek> evalbot: 

[04:39] <dalek> evalbot: Combine eval names sharing prefix & rev

[04:39] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/0ef6d119e9

[04:41] <dalek> rakudo/nom: e63497d | lue++ | src/Perl6/Grammar.nqp:

[04:41] <dalek> rakudo/nom: Fix pod directives formatting codes in delimited code blocks.

[04:42] <dalek> rakudo/nom: 

[04:42] <dalek> rakudo/nom: This makes handling of pod directives in code blocks consistent whether

[04:42] <dalek> rakudo/nom: or not you've wrapped it in a multi-line (and :allow'd) formatting code.

[04:42] <dalek> rakudo/nom: 

[04:42] <dalek> rakudo/nom: In delimited code blocks, the only pod directive that can't be stuffed

[04:42] <dalek> rakudo/nom: in formatting codes is the same one that can't be in a delimited code

[04:42] <dalek> rakudo/nom: block in the first place: =end code. For other code blocks and that pod

[04:42] <dalek> rakudo/nom: directive in particular, you'll need to keep = from being the first

[04:42] <dalek> rakudo/nom: non-whitespace character, same as before.

[04:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e63497d3e6

[04:42] <lue> I lost a preposition the summary :)

[04:44] <Mouq> lue++

[04:45] <Mouq> Much message. Very git. Six.

[05:11] *** raiph left
[05:11] <Mouq> r: class Foo { has @.board; method at_pos (Complex $c) is rw { @.board[$c.re][$c.im] } }; Foo.new[4i] # :(

[05:12] <camelia> rakudo-jvm 7cf9ca: OUTPUT«Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1212␤  in sub infix:<<> at gen/jvm/CORE.setting:4222␤  in sub infix:<<> at gen/jvm/CORE.setting:4222␤  in sub postcircumfix:<[ ]> at gen/jvm/COR…»

[05:12] <camelia> ..rakudo-moar 7cf9ca: OUTPUT«Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in sub infix:<<> at src/gen/m-CORE.setting:4222␤  in sub infix:<<> at src/gen/m-CORE.setting:4222␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:2405␤  in block  at /tm…»

[05:12] <camelia> ..rakudo-parrot 7cf9ca: OUTPUT«Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1219␤  in method Real at gen/parrot/CORE.setting:1032␤  in sub infix:<<> at gen/parrot/CORE.setting:4226␤  in sub infix:<<> at gen/parrot/…»

[05:14] *** lue joined
[05:14] <lue> ♘ #perl6 o/

[05:15] <Mouq> 'night lue! sleep well

[05:20] *** dragon_d left
[05:26] *** gdey left
[05:38] *** dayangkun left
[05:50] *** hoverboard left
[05:54] *** molaf joined
[05:57] *** Sqirrel joined
[05:58] <masak> sending p6c announcement now.

[06:01] <masak> sent.

[06:01] <masak> updating Wikipedia page.

[06:07] <masak> updated.

[06:07] <masak> this concludes the release process. thank you all, especially PerlJam++.

[06:08] * masak celebrates with the appropriate amount of breakfast

[06:09] <masak> though the final run of stresstest seems to be stuck on this part of the JVM tests:

[06:10] <masak> t/spec/S17-concurrency/supply.rakudo.jvm ..................... 12/36

[06:11] <Mouq> masak++

[06:11] * masak tries to run it outside of the test harness

[06:14] <masak> outside of the test harness, it gets past 12, but it currently seems stuck after 34...

[06:18] *** denis_boyun_ joined
[06:19] *** grep0r joined
[06:20] *** bjz left
[06:20] *** bjz joined
[06:22] *** kaleem joined
[06:24] <sergot> morning o/  !

[06:25] <FROGGS_> morning

[06:35] <dalek> rakudo/nom: 921615b | (Tobias Leich)++ | tools/build/NQP_REVISION:

[06:35] <dalek> rakudo/nom: bump nqp rev for jvm buf16.decode fix

[06:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/921615b60a

[06:39] <FROGGS_> hmmm, I killed camelia >.<

[06:39] <FROGGS_> moritz: halp ó.ò

[06:43] *** Alina-malina joined
[06:49] *** SunilJoshi joined
[06:52] <masak> consistently on my box, `./perl6-j -Ilib t/spec/S17-concurrency/supply.rakudo.jvm` hangs after 'ok 34'.

[06:52] <masak> can anyone duplicate that?

[07:03] *** kurahaupo left
[07:04] *** dayangkun joined
[07:06] *** bjz left
[07:06] *** thou left
[07:13] <FROGGS_> masak: I also had a hanging test about S17... I'll check if it is that one after breakfast

[07:15] *** Ven joined
[07:18] <masak> FROGGS_: nice.

[07:23] *** Mouq left
[07:27] *** Ven_ joined
[07:31] *** Alina-malina left
[07:32] *** fhelmberger joined
[07:32] *** Alina-malina joined
[07:34] *** Ven left
[07:35] *** rindolf joined
[07:36] *** denis_boyun_ left
[07:40] *** treehug88 left
[07:45] *** Rotwang joined
[07:50] *** bjz joined
[07:51] *** molaf left
[07:51] *** bjz_ joined
[07:53] *** darutoko joined
[07:55] *** bjz left
[07:58] <dalek> evalbot: 28fad69 | (Tobias Leich)++ | evalbot.pl:

[07:58] <dalek> evalbot: declare loop variable $p

[07:58] <dalek> evalbot: 

[07:58] <dalek> evalbot: this hopefully unbreaks the evalbot

[07:58] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/28fad69b10

[07:59] <nwc10> masak: yes, I can duplicate it

[08:09] <FROGGS_> is here somebody else who can pull camelia on featherX and the start it?

[08:10] <nwc10> sshd───bash─┬─emacs └─make───perl─┬─java───50*[{java}] └─perl

[08:10] <nwc10> oops

[08:10] <nwc10> let's try that again without irssi being helpful

[08:10] <FROGGS_> hmmm, that looks kinda interesting :o)

[08:10] <nwc10> sshd───bash─┬─emacs

[08:10] <nwc10>             └─make───perl─┬─java───50*[{java}]

[08:11] <nwc10>                           └─perl

[08:11] <nwc10> but anway, 50 is too many to try using strace to work out what they are up to

[08:11] *** snarkyboojum joined
[08:11] <nwc10> but whatever it is, it's not using CPU

[08:11] * nwc10 suspects deadlock of some sort

[08:12] <FROGGS_> yeah, it hangs when cleaning up and shutting down the threads I guess

[08:12] <apejens> related to the concurrecny tests hanging maybe?

[08:13] <FROGGS_> it is a concurrency test, aye

[08:13] <FROGGS_> bbiab

[08:17] *** kaare__ left
[08:25] <Ven_> perl6: my @a = <a b c>; @a Z[~=] <x y z>; say @a

[08:26] <Ven_> oh, camelia is down

[08:31] <Ven_> what's the difference between `$v <<[==]>> @set` vs `$v <<[Z==]>> @set` ?

[08:33] <Ven_> (and between `$v ==  any(@a)` and `$v <<[==]>> @a`)

[08:33] *** dmol joined
[08:39] *** kurahaupo joined
[08:48] *** snarkyboojum left
[08:51] *** Alula_ left
[08:51] *** adu left
[08:51] *** Alula_ joined
[09:02] *** camelia joined
[09:03] <moritz> m: say 42

[09:03] *** ChanServ sets mode: +v camelia

[09:03] <camelia> rakudo-moar 921615: OUTPUT«42␤»

[09:03] <Ven_> perl6: my @a = <a b c>; @a Z[~=] <x y z>; say @a

[09:04] <camelia> rakudo-jvm 921615: OUTPUT«(timeout)»

[09:04] <camelia> ..rakudo-{parrot,moar} 921615, niecza v24-109-g48a8de3: OUTPUT«ax by cz␤»

[09:04] <Ven_> bracketed++

[09:05] <moritz> j: say 1

[09:05] <camelia> rakudo-jvm 921615: OUTPUT«1␤»

[09:12] <sergot> j: print 1 for ^100;

[09:12] <camelia> rakudo-jvm 921615: OUTPUT«1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111»

[09:13] <sergot> j: print '' for ^100;

[09:13] <camelia> rakudo-jvm 921615: ( no output )

[09:13] <sergot> j: print '' for ^10000;

[09:13] <camelia> rakudo-jvm 921615: ( no output )

[09:14] <sergot> j: my @a = <a b c>; @a Z[~=] <x y z>; say @a

[09:14] <camelia> rakudo-jvm 921615: OUTPUT«ax by cz␤»

[09:17] <Ven_> stress-testing r-j

[09:18] <Ven_> .oO( was `EVAL` made uppercase for golfing ? )

[09:18] <moritz> masak++ # Rakudo release, "Really"

[09:19] <Ven_> Seems like I'm the only one who didnt set up his name on github, eh

[09:19] *** kivutar joined
[09:19] <moritz> Ven_: lue hasn't either, iirc

[09:20] <moritz> it's fine by us if you want to stay anonymous/pseudonymous

[09:20] <moritz> just if you want to contribute to rakudo on a larger scale, you'll need to submit a signed CLA

[09:25] <Ven_> Yeah. bad things happened last time I put my name up somewhere, so I'll leave it as that for now

[09:25] <Ven_> (I get the need for a CLA, though, obviously)

[09:35] *** Alina-malina left
[09:35] <timotimo> tadzik: you'll have to build a bunch more stuff for steroids if you want to present it :P

[09:36] <tadzik> timotimo: I know :P

[09:38] *** Alina-malina joined
[09:39] <Woodi> hallo :)

[09:39] <Woodi> masak++  # R*++

[09:40] <Woodi> btw. anyone remembers that link to Rakudo Easter Eggs page ?

[09:46] *** Rotwang left
[09:49] *** kurahaupo left
[10:03] *** SunilJoshi left
[10:04] *** nhayashi is now known as zz_nhayashi

[10:09] *** woosley left
[10:12] *** dayangkun left
[10:24] *** Ven_ left
[10:31] *** denis_boyun joined
[10:40] *** cibs joined
[10:46] *** kurahaupo joined
[10:55] *** havenwood left
[10:56] <timotimo> happy ishtar, friends

[11:10] <woolfy1> Have a nice weekend

[11:11] *** kurahaupo_mobile joined
[11:12] *** kurahaupo left
[11:12] *** nebuchadnezzar left
[11:15] <jnthn> o/

[11:15] *** kurahaupo_mobile left
[11:18] *** labster left
[11:19] *** nebuchadnezzar joined
[11:21] *** rindolf left
[11:39] <JimmyZ> \o

[11:43] *** beastd joined
[11:47] *** zakharyas joined
[11:48] <moritz> Woodi: https://rt.perl.org/ # rakudo easter eggs documented here

[11:50] <Woodi> oo, Bitcard, look nice :)

[11:51] <Woodi> jnthn++ also !

[11:52] *** Ven joined
[11:54] <Woodi> btw. I wonder if we (IT) are reinventing processes with infrastructure in threads with stuff form...

[11:56] * moritz can't make sense of "with stuff form"

[11:57] <Woodi> moritz: just some bad "poetic" description... excuse for not being precise realy :)

[11:57] <Ven> m: say ("a".."z).roll(1) x 5

[11:57] <camelia> rakudo-moar 921615: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/9Bc6tKm0Zx␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/9Bc6tKm0Zx:1␤------> [32msay ("a".."z).roll(1) x 5[33m⏏[31m<EOL>[0m␤    expecting any of:␤   …»

[11:57] <Ven> m: say ("a".."z").roll(1) x 5

[11:57] <camelia> rakudo-moar 921615: OUTPUT«ccccc␤»

[11:58] <moritz> m: say ("a".."z").roll(1) xx 5

[11:58] <camelia> rakudo-moar 921615: OUTPUT«y b k u n␤»

[11:58] <Ven> mmh, I guess it makes sense for x not to "thunk" (correct word here ?)

[11:58] <moritz> right

[11:59] <Ven> just a bit of a surprise

[12:02] * Ven just convinced 2 new friends of how expressive perl 6 is

[12:02] <Ven> Well, it's not like it's any hard :-)

[12:03] <Ven> I just show them "$a == 1 | 3" and they're "OH WOW - That's right, we're in 2014 !"

[12:09] <Ven> uuh, is perl6.org down ?

[12:10] *** xenoterracide_ joined
[12:10] <jnthn> works for me

[12:10] <dalek> star: b1fd704 | moritz++ | tools/star/Makefile:

[12:10] <dalek> star: [Makefile] bump some revisions

[12:10] <dalek> star: review: https://github.com/rakudo/star/commit/b1fd70421c

[12:10] <moritz> jnthn++ is signed up as R* release manager, I'm just doing some initial preparations

[12:11] <jnthn> Go for it! :)

[12:12] <Ven> uuuh wat

[12:12] <Ven> Works with curl, but chrome fails

[12:12] * jnthn just got it in chrome...

[12:13] <huf> works in chrome from here...

[12:13] <moritz> Ven: maybe IPv4/IPv6 issue?

[12:13] <jnthn> Hmm...current HEAD of Rakudo fails some spectests in stuff related to usage message generating.

[12:13] <Ven> Works it in safari, and I don't get it with chrome. WAT.

[12:13] <huf> welp, stop using chrome, it's not a very good browser anyway :D

[12:13] <moritz> Ven: try curl -4 and curl -6

[12:13] <Ven> curl -6 fails

[12:14] <moritz> argl

[12:14] <moritz> we have recursive submodules in star

[12:15] <nwc10> you mean mutually recursive dependencies?

[12:15] <moritz> now modules/panda says that ext/File__Find and ext/JSON__Tiny have new commits

[12:15] <moritz> I guess that means we shouldn't update them, because they are under panda's control, right?

[12:16] <dalek> star: 55ec7c1 | moritz++ | modules/doc:

[12:16] <dalek> star: Update modules/doc

[12:16] <dalek> star: review: https://github.com/rakudo/star/commit/55ec7c1672

[12:19] <Ven> r: / : /

[12:19] <camelia> rakudo-{parrot,jvm,moar} 921615: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter : (must be quoted to match literally)␤at /tmp/tmpfile:1␤------> [32m/ :[33m⏏[31m /[0m␤Unrecognized regex metacharacter   (must be quoted to match literally)␤at /tm…»

[12:19] <Ven> std: / : /

[12:19] <camelia> std e347792: OUTPUT«[31m===[0mSORRY![31m===[0m␤Backtrack control ':' does not seem to have a preceding atom to control at /tmp/qkzhi2_drm line 1:␤------> [32m/ :[33m⏏[31m /[0m␤Parse failed␤FAILED 00:01 122m␤»

[12:19] <Ven> https://rt.perl.org/Public/Bug/Display.html?id=77786 seems that is (at least) fixed ?

[12:20] <moritz> yes, can be fixed with unit tests

[12:21] <Ven> Ohhh, now I get a bunch of nullchars on perl6.org. Progress !

[12:21] <moritz> m: try EVAL q[/:/]; say $!.perl

[12:21] <camelia> rakudo-moar 921615: OUTPUT«X::Syntax::Regex::UnrecognizedMetachar.new(metachar => ":", filename => "eval_0", line => 1, column => Any, modules => Array.new(), is-compile-time => 1, pre => "/:", post => "/", highexpect => Array.new("statement list", "prefix or term", "prefix or meta-…»

[12:23] <dalek> star: db23938 | moritz++ | docs/announce/2014.04:

[12:23] <dalek> star: Draft release announcement 2014.04

[12:23] <dalek> star: review: https://github.com/rakudo/star/commit/db23938695

[12:26] <moritz> does anybody know the package name of the openjdk 7 JDK on RedHat/Fedora/CentOS?

[12:29] <dalek> star: 6abe271 | moritz++ | / (2 files):

[12:29] <dalek> star: udpate README, and version in Makefile.in

[12:29] <dalek> star: 

[12:29] <dalek> star: README is still not quite tristar ready

[12:29] <dalek> star: review: https://github.com/rakudo/star/commit/6abe2713be

[12:29] *** treehug88 joined
[12:32] *** anaeem1_ left
[12:32] *** anaeem1__ joined
[12:42] <dalek> star: 4d33dbc | moritz++ | Configure.pl:

[12:42] <dalek> star: [Configure.pl] support --backends=all

[12:42] <dalek> star: review: https://github.com/rakudo/star/commit/4d33dbcf8c

[12:43] <Ven> r: my %h = a => 1; say %h{a};

[12:44] <camelia> rakudo-{parrot,jvm,moar} 921615: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Undeclared routine:␤    a used at line 1␤␤»

[12:44] <Ven> oh, perl5

[12:44] <moritz> Ven: use %h<a> to get automatic quoting

[12:45] <Ven> moritz: No no, I was just weirded out from a change then I realized it was  Configure.pl and it was perl5

[12:45] <moritz> R*'s --gen-moar doesn't seem to work

[12:46] <moritz> ah no, I forgot to specify --gen-moar

[12:46] *** anaeem1__ left
[12:47] *** anaeem1 joined
[12:49] <dalek> roast: 195d9c0 | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[12:49] <dalek> roast: Fudge Supply.merge test for JVM also

[12:49] <dalek> roast: 

[12:49] <dalek> roast: So at least we know the problem is in rakudo, not in the VM (most likely)

[12:49] <dalek> roast: review: https://github.com/perl6/roast/commit/195d9c0dec

[12:50] *** treehug88 left
[12:51] *** treehug88 joined
[12:51] *** anaeem1 left
[12:52] *** treehug88 left
[12:52] *** SamuraiJack joined
[12:54] *** xenoterracide_ is now known as xenoterracide

[12:55] <dalek> rakudo/nom: 1b47edb | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[12:55] <dalek> rakudo/nom: Don't hide problems in Supply.mergs -> more handling

[12:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1b47edb602

[12:56] <xenoterracide> does p6 have any kind of "namespace" support? I don't think that it does...

[12:57] <xenoterracide> r: module Foo; class Bar { }

[12:57] <camelia> rakudo-{parrot,jvm,moar} 921615: ( no output )

[12:57] <xenoterracide> not sure that that would actually be DWIM

[12:58] *** mtj_ joined
[12:58] <lizmat> r: package Zop {}; grammar DonkeyKong {}

[12:58] <Ven> m: module Foo { our $bar = 1; }

[12:58] <camelia> rakudo-{parrot,jvm,moar} 921615: ( no output )

[12:58] <camelia> rakudo-moar 921615: ( no output )

[12:58] <Ven> m: module Foo { our $bar = 1; }; say Foo::$bar;

[12:58] <camelia> rakudo-moar 921615: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/3KPyYnh5wi␤Two terms in a row␤at /tmp/3KPyYnh5wi:1␤------> [32mmodule Foo { our $bar = 1; }; say Foo::[33m⏏[31m$bar;[0m␤    expecting any of:␤        postfix␤        infix stopper…»

[12:58] <jnthn> Wants to be $Foo::bar

[12:58] <Ven> m: module Foo { our $bar = 1; }; say $Foo::bar;

[12:58] <camelia> rakudo-moar 921615: OUTPUT«1␤»

[12:59] * Ven kinda guessed so, but wasn't sure

[12:59] <lizmat> jnthn: when using the EnumMap variant of "on"

[12:59] <lizmat> we somehow lose the supply being passed to the "more" code

[12:59] <lizmat> resulting in this:

[12:59] <lizmat> https://gist.github.com/lizmat/11042880

[12:59] <jnthn> lizmat: On JVM and Moar, or just on Moar?

[13:00] <lizmat> apparently on both, since the same test hangs on the JVM, as masak found out

[13:00] <jnthn> ah

[13:00] <lizmat> the CATCH was hiding the problem, which is another issue we need to think about, I guess

[13:03] *** LLamaRider joined
[13:03] * Ven somehow got on a oct2000 perl6 thread

[13:03] <lizmat> jnthn: feels a bit like an over-eager optimization to me

[13:04] <jnthn> lizmat: Not sure how, in so far as the CATCH appears to propagate the error...

[13:04] <jnthn> lizmat: Optimization at what level?

[13:04] <lizmat> rakudo level

[13:05] <lizmat> wrt to the CATCH: without  https://github.com/rakudo/rakudo/commit/1b47edb602

[13:05] <lizmat> you don't see the problem at *all*

[13:05] <lizmat> which caused me quite some headbanging in the past days :-(

[13:05] <xenoterracide> r: module LM::Model; class Activity is export { }

[13:05] <camelia> rakudo-{parrot,jvm,moar} 921615: ( no output )

[13:07] <jnthn> lizmat: The problem isn't there. The problem is that whatever subscribed to the supply doesn't throw.

[13:07] <jnthn> uh, tapped it, even.

[13:08] <jnthn> Supply.tap, in the absence of a "quit" handler, should probably add a default one that dies with anything it receives.

[13:09] <jnthn> lizmat: I mean in Supply.pm, around line 21

[13:09] <jnthn> method tap(&more, :&done, :&quit) {

[13:09] <jnthn> Could be more like

[13:09] <jnthn> method tap(&more, :&done, :&quit = { die $_ }) {

[13:10] <Ven> m: sub foo(&bar) { bar?() }; foo(-> {say 'a'})

[13:10] <camelia> rakudo-moar 921615: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/9KT04iri12␤Two terms in a row␤at /tmp/9KT04iri12:1␤------> [32msub foo(&bar) { bar[33m⏏[31m?() }; foo(-> {say 'a'})[0m␤    expecting any of:␤        argument list␤        postfix…»

[13:10] <lizmat> trying that

[13:11] <moritz> why not &quite = &die ?

[13:11] <jnthn> lizmat: Not sure if it'll work right off, but I think we want to have a general fix for not dropping errors on the floor.

[13:11] <jnthn> moritz: uh, 'cus i didn't think of it :)

[13:11] <jnthn> moritz: That's better :)

[13:11] *** eternaleye left
[13:13] *** xenoterracide left
[13:13] <lizmat> Type check failed in binding &quit; expected 'Callable' but got 'Sub+{<anon>}'

[13:13] <lizmat> guess not better :-(

[13:14] <jnthn> wtf...

[13:14] <lizmat> r: my &foo = &die

[13:15] <camelia> rakudo-{parrot,jvm,moar} 921615: OUTPUT«Type check failed in assignment to '&foo'; expected 'Callable' but got 'Sub+{<anon>}'␤  in block  at /tmp/tmpfile:1␤␤»

[13:15] <lizmat> seems pretty consistent  :-)

[13:16] <lizmat> wouldn't :&quit = {.throw} be better ?

[13:16] <jnthn> Wouldn't work on a string error, is all

[13:16] *** eternaleye joined
[13:16] <moritz> the +{<anon>} likely comes from the is hidden_from_backtrace

[13:17] <moritz> but it shouldn't type-check fail

[13:17] <lizmat> r: sub a is hidden_from_backtrace {}; my &b = &a

[13:17] <camelia> rakudo-{parrot,jvm,moar} 921615: ( no output )

[13:24] <dalek> rakudo/nom: 2180049 | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[13:24] <dalek> rakudo/nom: Properly throw exceptions in taps

[13:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/21800496f2

[13:26] <dalek> roast: 20aa4f3 | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[13:26] <dalek> roast: Better guard supply tests against hangs

[13:26] <dalek> roast: review: https://github.com/perl6/roast/commit/20aa4f38a8

[13:30] *** fhelmberger left
[13:31] <lizmat> jnthn: fwiw, I'm at a loss to fix the "on" EnumMap case problem, so would appreciate any feedback  :-)

[13:33] <jnthn> lizmat: I don't immediately see what's going on either

[13:34] <jnthn> lizmat: I'll have to dig a bit deeper

[13:36] <lizmat> ok, I'll focus on getting other Supply methods working

[13:38] <jnthn> OK, great. I'm currently taking a look at timers, and getting rid of the last JVM-specific bits in ThreadPoolScheduler.

[13:40] <lizmat> timers would be cool  :-)

[13:40] <jnthn> Yeah. Doing the nqp:: abstraction stuff first.

[13:40] <jnthn> And then will look at the Moar impl.

[13:46] *** bluescreen10 joined
[13:48] <lizmat> r: Exception.die

[13:48] <camelia> rakudo-jvm 1b47ed: OUTPUT«(timeout)»

[13:48] <camelia> ..rakudo-{parrot,moar} 1b47ed: OUTPUT«No such method 'die' for invocant of type 'Exception'␤  in block  at /tmp/tmpfile:1␤␤»

[13:49] <lizmat> jnthn: any objections on adding a "method die { die(self) }" to src/core/Exception ?

[13:50] *** btyler joined
[13:53] <jnthn> lizmat: There's already a .throw?

[13:53] <lizmat> jnthn: another datapoint: changed signature from "sub ($val) {...}" to -> ($val) {...}, gives:

[13:53] *** anaeem1_ joined
[13:53] <lizmat> Not enough positional parameters passed; got 0 but expected 1 in sub-signature

[13:53] <lizmat> (https://gist.github.com/lizmat/11042880)

[13:54] <jnthn> lizmat: Uh, why the parens?

[13:54] <lizmat> ah, copy pasto

[13:55] <jnthn> :)

[13:55] *** FROGGS[mobile] joined
[13:55] <jnthn> The "in sub-signature" was probably the best clue :)

[13:55] <lizmat> There's an Exception.throw, if that is what you meant

[13:56] *** kaleem left
[13:56] <lizmat> changing it to -> $var gives the same error  :-)

[13:59] *** anaeem1_ left
[14:00] *** anaeem1 joined
[14:01] *** thou joined
[14:04] *** treehug88 joined
[14:04] *** anaeem1 left
[14:06] <dalek> rakudo/nom: 99ff702 | (Elizabeth Mattijsen)++ | src/core/Exception.pm:

[14:06] <dalek> rakudo/nom: Implement Exception.die for convenience in handlers

[14:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/99ff702ba7

[14:08] <jnthn> lizmat: scheduler.t doesn't seem to compile?

[14:08] <jnthn> Two terms in a row

[14:08] <jnthn> at t\spec\S17-concurrency\scheduler.t:103

[14:08] <jnthn> Near some cas thingy?

[14:09] <lizmat> ah, those tests are skipped now, right?

[14:09] <lizmat> so I didn't see any errors...  lemme check

[14:09] <jnthn> They're skipped on Moar.

[14:10] <jnthn> JVM doesn't have any skips in there

[14:10] <jnthn> Anyway, it's certainly a syntax error

[14:10] <jnthn> I guess missing semi?

[14:11] <dalek> roast: 6a7443a | (Elizabeth Mattijsen)++ | S17-concurrency/scheduler.t:

[14:11] <dalek> roast: Fix compilation typo

[14:11] <dalek> roast: review: https://github.com/perl6/roast/commit/6a7443a9be

[14:11] <lizmat> should compile now

[14:12] *** Ven left
[14:14] <FROGGS_> r: say nqp::p6box_s(nqp::decode(Buf.new(0x03, 0x26), "utf16"))

[14:14] <camelia> rakudo-{parrot,jvm,moar} 1b47ed: OUTPUT«☃␤»

[14:14] <jnthn> It does, though fails

[14:14] <jnthn> #      got: '1scatch2s'

[14:14] <jnthn> # expected: '1s1scatch2s'

[14:15] <lizmat> hmmm...

[14:15] <jnthn> Lemme check it' snot my changes though

[14:16] <FROGGS_> jnthn: I updated https://gist.github.com/FROGGS/0ea5537eb675588baaa2 (MIME::Base64 passes now on jvm too)

[14:16] <lizmat> looks to me like the "more" is not done in the "die" case

[14:17] <lizmat> scratch that

[14:18] <lizmat> looks like the die is preventing the cas from completion ?

[14:18] <jnthn> yeah, I got something wrong...

[14:18] <jnthn> lizmat: of course it will

[14:18] <timotimo> do we package perl6/docs within star, btw?

[14:19] <jnthn> lizmat: The die happens while computing the new value to cas 

[14:19] <jnthn> The die should be outside of the block passed to cas, as a statement after it, I think?

[14:19] <jnthn> { cas $tracker, {$_ ~ '1s'; die } },

[14:19] <jnthn> should be

[14:19] <jnthn> { cas $tracker, {$_ ~ '1s' }; die },

[14:20] <lizmat> yup, indeed

[14:20] <lizmat> will fix

[14:20] <jnthn> My second fail looks like a thinko in my changes to use nqp::timer

[14:21] <dalek> roast: 0f2e91b | (Elizabeth Mattijsen)++ | S17-concurrency/scheduler.t:

[14:21] <dalek> roast: Fix thinko, spotted by jnthn++

[14:21] <dalek> roast: review: https://github.com/perl6/roast/commit/0f2e91b8d9

[14:29] <jnthn> lizmat: That helps, but now I get:

[14:29] <jnthn> not ok 24 - Cue on ThreadPoolScheduler with :times(10)

[14:30] <jnthn> r: my $tracker; say $tracker.succ

[14:30] <camelia> rakudo-{parrot,jvm,moar} 1b47ed: OUTPUT«No such method 'succ' for invocant of type 'Any'␤  in block  at /tmp/tmpfile:1␤␤»

[14:30] <jnthn> ah

[14:31] <dalek> nqp/asyncops: d958b6b | jnthn++ | src/vm/jvm/QAST/Compiler.nqp:

[14:31] <dalek> nqp/asyncops: Stub in timer and cancel ops on JVM backend.

[14:31] <dalek> nqp/asyncops: review: https://github.com/perl6/nqp/commit/d958b6b29e

[14:31] <dalek> nqp/asyncops: 3b3ccda | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ (2 files):

[14:31] <dalek> nqp/asyncops: Partially implement nqp::timer.

[14:31] <dalek> nqp/asyncops: 

[14:31] <dalek> nqp/asyncops: Missing cancellation-related bits so far.

[14:31] <dalek> nqp/asyncops: review: https://github.com/perl6/nqp/commit/3b3ccda971

[14:32] <dalek> roast: 83438f8 | jnthn++ | S17-concurrency/scheduler.t:

[14:32] <dalek> roast: Correct :times test to initialize $tracker.

[14:32] <dalek> roast: review: https://github.com/perl6/roast/commit/83438f800a

[14:33] <lizmat> jnthn++

[14:33] <dalek> rakudo/async: a71eccd | jnthn++ | src/core/ThreadPoolScheduler.pm:

[14:33] <dalek> rakudo/async: Switch ThreadPoolScheduler to use nqp::timer op.

[14:33] <dalek> rakudo/async: review: https://github.com/rakudo/rakudo/commit/a71eccdda1

[14:33] <jnthn> That now fully passes scheduler.t on JVM.

[14:33] *** anaeem1 joined
[14:34] <lizmat> cool!

[14:34] <jnthn> (And breaks Moar build for now, which is why it's in a branch.)

[14:40] *** zakharyas left
[14:41] <dalek> rakudo/nom: 3922904 | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[14:41] <dalek> rakudo/nom: Remove unneeded lexicals

[14:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39229049b2

[14:42] *** anaeem1 left
[14:42] *** anaeem1 joined
[14:45] *** raiph joined
[14:46] *** anaeem1 left
[14:54] *** guru joined
[14:54] *** guru is now known as ajr_

[15:05] *** hoelzro joined
[15:05] <hoelzro> ahoy #perl6!

[15:06] <vendethiel> o/ hoelzro

[15:08] *** kaare__ joined
[15:09] *** denis_boyun left
[15:12] <lizmat> hoelzro, vendethiel  o/

[15:18] <[Coke]> masak: (S17-concurrency) this test was hanging on the daily runs occasionally, yes.

[15:19] <hoelzro> jnthn: are you around?

[15:19] <hoelzro> I have some questions about your FOSDEM talk that I forgot to ask when I was UTC+1

[15:21] <FROGGS_> masak: it looks like test 15 hangs

[15:21] <dalek> roast: 76dc363 | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[15:21] <dalek> roast: Use slightly more sensible variable names

[15:21] <dalek> roast: review: https://github.com/perl6/roast/commit/76dc363a48

[15:21] <lizmat> FROGGS_: S17 tests should not hang anymore: fail maybe, but not hang

[15:22] <FROGGS_> ahh, cool

[15:22] <FROGGS_> then I need to pull/rebuild

[15:23] <lizmat> if a test fails because things that are being expected do not arrive, it should now wait at most 5 seconds

[15:24] <[Coke]> lizmat: yay.

[15:25] <lizmat> please let me know if I missed any hangs  :-)

[15:25] <[Coke]> today's run is already running, we'll know tomorrowish.

[15:26] <[Coke]> (I am adding in the ulimit timer now, will try another run sooner, actually)

[15:26] <jnthn> hoelzro: Am now.

[15:31] *** rindolf joined
[15:34] <hoelzro> excellent =)

[15:35] <hoelzro> so there's this syntax:

[15:35] <hoelzro> method !calculate(YearlyStatistics: &thing-to-do)

[15:35] <hoelzro> what's the colon mean there?

[15:35] <hoelzro> oh

[15:35] <jnthn> Invocant.

[15:35] <hoelzro> or is it just calculate(YS :&thing-to-do)?

[15:35] <hoelzro> hmm

[15:36] <jnthn> No, it's for some reason specifying the invocant type explicitly.

[15:36] <hoelzro> so if you specify the invocant, you don't need to specify the name, then?

[15:36] <jnthn> No

[15:36] <hoelzro> interesting

[15:36] <jnthn> Well, same for any param really

[15:36] <jnthn> r: sub foo(Int) { }; foo(42)

[15:36] <camelia> rakudo-jvm 99ff70: OUTPUT«(timeout)»

[15:36] <camelia> ..rakudo-{parrot,moar} 99ff70: ( no output )

[15:37] <hoelzro> then there was this bit in the Grammar/actions

[15:37] <hoelzro> $<observation>.map(*.ast).grep(*.value.none <= -99)

[15:37] <hoelzro> that wildcard expr is awesome, but I couldn't figure out where none is coming from

[15:38] <jnthn> Any

[15:38] <jnthn> It's the method form of the none(...) sub

[15:38] <jnthn> which constructs a junction.

[15:38] <hoelzro> oooooohhhhh

[15:38] <hoelzro> I see

[15:38] <hoelzro> thanks =)

[15:38] <jnthn> np :)

[15:42] <timotimo> i could have answered all those questions :P

[15:42] <raiph> m: say "hello world" #6now #helloworld (please ignore; I'm just cooking something up)

[15:42] <camelia> rakudo-moar 99ff70: OUTPUT«hello world␤»

[15:43] <raiph> http://irclog.perlgeek.de/perl6/2014-04-18#i_8607530 #6now

[15:44] <timotimo> you're tweeting everything with that hashtag automatically from the irclog? :)

[15:44] <timotimo> and that hashtag is not yet taken for anything else?

[15:49] <timotimo> 654s for moar

[15:50] <jnthn> timotimo: To do what? :)

[15:50] <dalek> perl6-examples: 4ac6dea | (Shlomi Fish)++ | euler/prob168-shlomif.p6:

[15:50] <dalek> perl6-examples: [Euler] Add solution for #168.

[15:50] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/4ac6dea472

[15:56] <raiph> timotimo: Tweeting is only a minor part (and my thinking is there'll be nothing automatic in that regard unless the exact right incantation comes from the TimToady nick). I'll explain what I'm thinking in a while.

[15:57] <[Coke]> print "asdf\n" is better said as say "asdf" ^^

[15:57] *** kaare__ is now known as kaare_

[16:01] <vendethiel> r: 5.none

[16:02] <camelia> rakudo-jvm 392290: OUTPUT«(timeout)»

[16:02] <camelia> ..rakudo-{parrot,moar} 392290: ( no output )

[16:02] <vendethiel> m: (5).none == 3

[16:02] <camelia> rakudo-moar 392290: ( no output )

[16:02] <vendethiel> m: say (5).none == 3

[16:02] <camelia> rakudo-moar 392290: OUTPUT«none(False)␤»

[16:02] <vendethiel> m: say (5).any == 3

[16:02] <camelia> rakudo-moar 392290: OUTPUT«any(False)␤»

[16:07] <timotimo> 965 for parrot

[16:07] <timotimo> jnthn: a highly randomness-dependent benchmark

[16:18] *** obra_ is now known as obra

[16:18] *** dwarring left
[16:19] *** raiph left
[16:19] <moritz> Testing modules/zavolaj...

[16:19] <moritz> t/01-argless.t ......... /bin/sh: 1: PREFIX: not found

[16:19] <moritz> (in star 'make module-test')

[16:19] <moritz> the tests pass anyway

[16:22] <retupmoca> m: say $*VM<config><ldflags> # pretty sure this is where that comes from

[16:22] <camelia> rakudo-moar 392290: OUTPUT« -O1 -DNDEBUG -Wl,-rpath,$(PREFIX)/lib␤»

[16:24] <FROGGS_> yes

[16:24] <FROGGS_> I thought I fixed that though...

[16:29] <moritz> the LWP::Simple tests fail on the JVM

[16:29] <moritz> java.lang.NullPointerException in sub scheme_port at /home/moritz/p6/star/rakudo-star-2014.04/install/languages/perl6/lib/URI/DefaultPort.pm:32

[16:30] <FROGGS_> moritz: here is the test out: https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[16:31] <FROGGS_> (stripped down to failures)

[16:32] <moritz> why the heck do the DBIish mock tests fail on the JVM, when they are the ones that should be most platform independent?

[16:33] <retupmoca> moritz: none of the other tests actually run unless you have the right environment set up for them

[16:33] <retupmoca> moritz: otherwise they just skip(), iirc

[16:35] <moritz> retupmoca: ah, fair point

[16:42] <dalek> star: a6cac5b | moritz++ | tools/build/modules-test.pl:

[16:42] <dalek> star: Include $perl6 in testing output

[16:42] <dalek> star: review: https://github.com/rakudo/star/commit/a6cac5b692

[16:43] <FROGGS_> moritz / retupmoca: the warnings about PREFIX are gone now

[16:43] <retupmoca> FROGGS++

[16:43] <moritz> FROGGS_: what did you patch?

[16:43] <FROGGS_> see #moarvm

[16:44] <moritz> ah, so in the next release

[16:44] <FROGGS_> we need to bump revisions though

[16:44] <FROGGS_> yes

[16:45] *** xenoterracide_ joined
[16:48] *** havenwood joined
[16:50] *** Mouq joined
[16:52] <timotimo> that benchmark i had used was the rosettacode task "Brownian Tree", btw

[16:53] <timotimo> i would have liked it to be much faster, but whatevs :)

[16:54] <TimToady> it would seem like a random walk algorithm would not be sufficiently predictable to serve as a decent benchmark, but maybe with enough points...

[16:56] <moritz> or with fixed srand()

[16:57] *** Mouq left
[16:58] *** xenoterracide_ left
[16:58] *** xenoterracide__ joined
[16:59] *** woolfy1 left
[16:59] *** woolfy joined
[17:08] <timotimo> that's right. though, if moar was 10x faster than rakudo, it'd still be visible :P

[17:08] *** Mouq joined
[17:08] <timotimo> or 100x

[17:08] <timotimo> er, faster than parrot i meant

[17:09] <timotimo> well, i did turn off spesh, because locally i have the not-yet-functional named-to-positional branch

[17:10] <Mouq> is this R* realease going to include all the backends? :#

[17:10] <Mouq> :3

[17:11] <vendethiel> .u ☃

[17:11] <yoleaux> U+2603 SNOWMAN [So] (☃)

[17:11] <FROGGS_> Mouq: it will be more likely be r-p* and r-m*

[17:12] <Mouq> FROGGS_: Sweeeeet :) What's wrong with r-j*?

[17:16] *** anaeem1 joined
[17:16] *** rindolf left
[17:17] <FROGGS_> Mouq: see https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[17:19] <Mouq> FROGGS_: I see :| Thanks!

[17:22] *** arturo joined
[17:24] <arturo> hello #perl6. I was wondering, how does one become a perl6 rakudo contributor? As in, someone who works on implementing the rakudo itself?

[17:27] <jnthn> arturo: Find something interesting (to you) to work on - probably something smallish at first. And then dig in, ask questions, etc. The compiler tools and overall internals can be learned through the course material at https://github.com/edumentab/rakudo-and-nqp-internals-course

[17:28] *** anaeem1 left
[17:29] *** anaeem1 joined
[17:33] <lizmat> then fork rakudo and create pull requests, right?

[17:34] <jnthn> Right. :)

[17:34] *** anaeem1 left
[17:34] <arturo> jhthn: Thanks! Is there a developer guide or "getting started" document?

[17:35] *** xenoterracide__ left
[17:35] *** xinming joined
[17:36] <lizmat> jnthn: ^^^  :-)

[17:37] <jnthn> arturo: Well, the course I linked to is by far the best set of documentation on how stuff works.

[17:37] <jnthn> arturo: It was created explicitly to help people get into working on Rakudo.

[17:38] *** xinming__ left
[17:38] <timotimo> oh

[17:38] *** xenoterracide__ joined
[17:39] <timotimo> we neglected to mention that there's also good performance improvements on non-moarvm rakudos in this release

[17:39] <jnthn> timotimo: Well, can mention it in the Star announce :)

[17:40] *** denis_boyun joined
[17:40] *** rindolf joined
[17:41] <timotimo> aye

[17:43] *** xenoterracide__ left
[17:44] <arturo> jhthn: I didn't notice it was a course. Thanks so much, I'll take a look and get involved.

[17:45] <lizmat> arturo welcome!  

[17:46] <lizmat> arturo: it's jnthn , not jhthn by the way  :-)

[17:46] <arturo> lizmat: I know, I typed too fast :-P

[17:46] <lizmat> helps getting someone's attention if you spell the name right

[17:46] <lizmat> most IRC clients have auto-completion on names

[17:46] <lizmat> jn<TAB> is usually enough

[17:47] <arturo> lizmat: cool! This is my first time using IRC, tab expansions is definitely helpful.

[17:47] <arturo> expansion*

[17:49] *** vincent21 joined
[17:56] <Mouq> arturo: Welcome :) Something that helped me when I first joined was watching commits flow and trying to understand what they did and how

[17:56] <Mouq> I don't know if that's helpful anyone besides myself

[17:57] <Mouq> (a simple one: https://github.com/rakudo/rakudo/commit/99ff702 )

[17:58] <FROGGS_> also it might be easier for some ppl to start by fixing bugs, that is by looking at rt.perl.org

[17:58] <FROGGS_> others might want to implement something, these could make use of https://github.com/rakudo/rakudo/blob/nom/docs/ROADMAP

[17:59] *** raiph joined
[17:59] <raiph> timotimo: https://questhub.io/realm/perl/quest/53516384bbd0beef19000022

[18:00] *** denis_boyun left
[18:04] *** Rotwang joined
[18:10] *** SamuraiJack left
[18:15] *** kurahaupo joined
[18:18] <timotimo> mhm mhm

[18:19] *** vincent21 left
[18:23] <lizmat> guten Appetit!

[18:23] *** ldthien0 left
[18:30] *** treehug88 left
[18:33] <cognominal> G grand a petit

[18:33] *** treehug88 joined
[18:33] *** treehug88 left
[18:34] *** treehug88 joined
[18:39] <vendethiel> what

[18:39] <arturo> Mouq: thanks, thats a good idea. I'll keep an eye on those

[18:42] *** ajr_ left
[18:42] *** vincent21 joined
[18:43] <raiph> timotimo: I'm not sure if it's obvious to others based on my notes in that quest, but my intent is that these one liners serve many purposes: becoming a complement to roast; being a pedagogy DB; being a FAQ DB; being a source for the one liner videos if you/someone wants to do them; for attracting folk to #perl6 now via twitter; and more

[18:45] <cognominal> a data point: when bzip2-ed  the moar core setting drops from ~10MB to ~1.5MB

[18:47] <timotimo> aye

[18:50] * TimToady blames all the inlining, or maybe Unicode, or maybe something else :)

[18:50] <dalek> rakudo/nom: 9ce36b9 | (Elizabeth Mattijsen)++ | src/core/Supply (2 files):

[18:50] <dalek> rakudo/nom: Implement Supply.uniq

[18:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ce36b9461

[18:50] <btyler> I know folks here have generally enjoyed SpaceX streams -- there's a launch going off in 35 minutes

[18:50] <dalek> roast: 647d15e | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[18:50] <dalek> roast: Reorganize tests, add tests for Supply.uniq

[18:50] <dalek> roast: review: https://github.com/perl6/roast/commit/647d15efd2

[18:52] <raiph> timotimo: was that aye addressed to cognominal++ or me? if me, are you saying the five purposes all made good sense to you?

[18:52] <dalek> rakudo/nom: 647a777 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[18:52] <dalek> rakudo/nom: Update ChangeLog

[18:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/647a77749d

[18:53] <cognominal> ralph, I like the idea of a Perl 6 twitter feed composed of oneliners.

[18:55] *** vincent21 left
[18:55] <TimToady> well, tweets don't have to be one line

[18:56] <raiph> what about being a complement to roast?

[18:56] <cognominal> on the other hand, some very short tweets can be explained in one tweet.

[18:57] <raiph> one of the ideas is that the tweet links back to the irclog

[18:57] <raiph> and on channel context and discussion explains the tweet

[18:57] <raiph> and/or a short khan academy like video explains it

[18:58] <timotimo> raiph: applicable to both :)

[18:59] <raiph> i've written up a quest that tries to explain how easily we could do this and how many things we could get out of it

[18:59] <raiph> https://questhub.io/realm/perl/quest/53516384bbd0beef19000022

[19:02] <tadzik> oh-oh, https://github.com/hoelzro/sahara-sync

[19:04] <raiph> cognominal, timotimo: as TimToady notes this isn't really just about one liners either (our evalbots take gists, tweets can link)

[19:04] <timotimo> right

[19:04] <timotimo> and my videos can have more stuff than just a single line in them :)

[19:04] <raiph> right

[19:05] <raiph> a key thing is it's initially just some simple conventions for comments so we could start doing it today

[19:06] <hoelzro> tadzik: ?

[19:06] <tadzik> hoelzro: I like that :)

[19:06] <hoelzro> thanks =)

[19:06] <hoelzro> I was thinking about it today, and I had some pretty good ideas

[19:06] <hoelzro> too bad I stopped working on it when I moved to Europe =/

[19:07] <lizmat> now you're back in the US, do you have time for it now ?

[19:07] <dalek> Perlito: f4c2b3e | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Regex5.pm:

[19:07] <dalek> Perlito: Perlito5 - Perlito5::Grammar::Regex5 more details

[19:07] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f4c2b3e73c

[19:09] *** thou left
[19:09] <raiph> i have to run for an hour or three but I'd really appreciate knowing that at least two folk have read ALL of my quest -- it's not really that long or complicated -- *especially* if one of them were TimToady and he gave it his blessing and/or commented on it.

[19:09] <hoelzro> lizmat: it wasn't a time thing in NL; it was a lack of need for it

[19:09] <hoelzro> I only had my own laptop, so I had nothing to sync

[19:10] <hoelzro> now I have 2 laptops and a desktop =/

[19:10] <hoelzro> so I *do* have need for it now

[19:10] <hoelzro> so I'm considering reviving it

[19:10] <lizmat> hehe... ok

[19:10] <lizmat> seems the world could be ready for it

[19:10] <timotimo> hoelzro: will you work on the kate syntax highlighter first? :3

[19:10] <hoelzro> hahahaha

[19:10] <hoelzro> timotimo: yes

[19:10] <timotimo> yay

[19:10] <hoelzro> SS will be a huge time sink

[19:10] <hoelzro> pun intended ;)

[19:11] <timotimo> i'ven't done anything new with regards to qtcreator in the mean time :\

[19:11] <hoelzro> that's cool; otherwise I'd feel guilty

[19:11] <timotimo> it's just such a huge blob of work and i don't know where to grab it and i get discouraged

[19:11] <hoelzro> I just rebuilt my machine last night

[19:11] <timotimo> my desktop is due for a system re-install, too :|

[19:11] <hoelzro> and I've been taking classes and playing Dragon's Crown/Rogue Legacy

[19:11] <hoelzro> but I've beaten both of them now, so I should have time =)

[19:12] <timotimo> haha, at first i read that as "taking classes on playing" :D

[19:12] <hoelzro> hahaha

[19:13] <Mouq> raiph++ :)

[19:14] *** Rotwang left
[19:20] <lizmat> T minus 5

[19:20] <nwc10> T-5 minutes: http://www.spacex.com/webcast/

[19:22] *** darutoko left
[19:25] <lizmat> T minus 30 secs

[19:32] *** rindolf left
[19:34] *** ssutch joined
[19:35] *** labster joined
[19:38] *** kivutar left
[19:39] <dalek> Perlito: 3eecee9 | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Regex5.pm:

[19:39] <dalek> Perlito: Perlito5 - Perlito5::Grammar::Regex5 more details

[19:39] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/3eecee9ed1

[19:40] *** kivutar joined
[19:43] *** kaare_ left
[19:45] *** gaussblurinc_ joined
[19:45] <gaussblurinc_> hi! does perl 6 have stable version now?

[19:45] <gaussblurinc_> I want to write grammar parser with it

[19:46] <lizmat> that should probably work  :-)

[19:46] <timotimo> except for occasional bugs and a small amount of not yet implemented little things, you can already use rakudo

[19:46] <FROGGS_> gaussblurinc_: yes, it should work very well for that kind of thing

[19:47] <Mouq> gaussblurinc_: Perl 6 grammars and regexes are very stable. Especially considering that Rakudo Perl 6 uses a Perl 6 grammar to parse Perl 6 programs

[19:47] <tadzik> parsers are pretty well battle-tested

[19:47] <FROGGS_> there are parsers for Perl5, C99, JSON, XML, YAML and some more things already

[19:47] <jnthn> Aye, grammars are one of the really stable bits in so far as little changes there any more, and we ue the same engine to parse Perl 6 programs also. :)

[19:47] <timotimo> but the yaml parser doesn't run its tests because testml isn't working :P

[19:47] <jnthn> *se

[19:47] <Mouq> FROGGS_: No YAML Parser actually :(

[19:47] <FROGGS_> ewww :/

[19:47] <jnthn> *use

[19:48] <FROGGS_> Mouq: ohh, okay

[19:48] <Mouq> FROGGS_: Just a YAML Dumper

[19:48] <FROGGS_> k

[19:48] <_sri> maybe you shouldn't oversell rakudo all the time, people will only end up disappointed

[19:48] <FROGGS_> _sri: did we?

[19:49] <gaussblurinc_> great one! and how about core modules like File::* ? They are good enough?

[19:49] <_sri> can something be stable if you don't have any guaranteed backwards compatibility?

[19:49] <_sri> imo it's better to undersell and overdeliver

[19:49] * vendethiel just sells perl6 to people, rakudo just happens to be here

[19:49] <FROGGS_> _sri: just read what timotimo and jnthn said

[19:50] <FROGGS_> gaussblurinc_: stuff like File::Spec is built into the language... what else do you need?

[19:50] <FROGGS_> (and File::Slurp also fwiw)

[19:50] <tadzik> gaussblurinc_: well, some of them work, some apparently have test failures

[19:50] <tadzik> so: it varies

[19:50] <gaussblurinc_> File::Find

[19:51] <FROGGS_> File::Find is there in the ecosystem (modules.perl6.org)

[19:51] <_sri> FROGGS: most people consider stable = i can bet my business on it, not stable = lots of stuff kinda works

[19:51] <FROGGS_> though, it is kinda slow I think

[19:51] <Mouq> _sri: NQP's bootstrapping guarantees backwards compatibility pretty strongly :P

[19:51] <FROGGS_> _sri: that is what we said. there are bugs and NYI's but grammars work fine

[19:52] <FROGGS_> so one can judge on its own if that is enough or not

[19:52] <dalek> rakudo-star-daily: 0c509c8 | coke++ | log/ (5 files):

[19:52] <dalek> rakudo-star-daily: today (automated commit)

[19:52] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/0c509c8fd9

[19:52] <timotimo> Mouq: no, it does not. we sometimes do update the stage0s

[19:52] <FROGGS_> because there is no true answer when you do not really know what it the problem to solve

[19:53] <Mouq> timotimo: I was being a little hyperbolic, but it still really disincentivizes breaking changes to grammars

[19:54] <lizmat> regarding backwards compatibiity: we heve several "is DEPRECATED"| features already

[19:54] <lizmat> and you can mark your own:

[19:54] <FROGGS_> heck, Perl 5 does not "guarantee" backwards compat to 100% there is a deprecation cycle (like for given/when)... but of course the deprecation cycle is shorter because the language itself is younger

[19:54] <FROGGS_> but this will grow and grow longer

[19:54] <lizmat> r: sub a is DEPRECATED { say "foo" }; a

[19:55] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«foo␤Saw 1 call to deprecated code during execution.␤================================================================================␤Sub a (from GLOBAL) called at:␤  /tmp/tmpfile, line 1␤Please use something else instead.␤---------…»

[19:55] <timotimo> that wouldn't catch semantic changes to rules, for example

[19:55] <_sri> suggestion: adopt stability levels for features like node.js that are pointed out in documentation http://nodejs.org/api/http.html#http_http

[19:55] <lizmat> r: sub a is DEPRECATED("b") { say "foo" }; a

[19:55] <timotimo> which is the hardest piece to guard against

[19:55] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«foo␤Saw 1 call to deprecated code during execution.␤================================================================================␤Sub a (from GLOBAL) called at:␤  /tmp/tmpfile, line 1␤Please use b instead.␤----------------------…»

[19:55] <timotimo> and we still have things that make you think a bit about the structure of your stuff

[19:55] <timotimo> like recently we chagned that private attributes from inside roles get visible to the classes that the roles are applied to

[19:56] <FROGGS_> _sri: that is an excellent idea

[19:56] <lizmat> let me just say that in Perl 6, we already anticipated changes to be made in the future

[19:56] <tadzik> OOOH

[19:56] <tadzik> did we finally?

[19:56] <timotimo> tadzik: i think so

[19:56] <timotimo> or something in that direction anyway

[19:56] <tadzik> there is this refactoring of sets/bags that I started back on gpw 2012 or so

[19:56] <lizmat> tadzik: only one level

[19:57] <tadzik> probably someone else did it already though

[19:57] <FROGGS_> _sri: in fact we should mark all sections of the spec that way... @TimToady: do you agree? (because it might be your job then :O)

[19:57] <lizmat> colomon did niecza, I did rakudo mostly

[19:57] <FROGGS_> err, :P even

[19:57] * sjn wouldn't mind having made "is DEPRECATED" and such into a generic code annotation tool

[19:57] <timotimo> r: role attrd { has $!foo }; class foo is attrd { method test { say $!foo } }; foo.new.test

[19:57] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Attribute $!foo not declared in class foo␤at /tmp/tmpfile:1␤------> [32mo is attrd { method test { say $!foo } }[33m⏏[31m; foo.new.test[0m␤    expecting any of:␤…»

[19:57] <timotimo> i'm obviously wrong

[19:57] <btyler> can "is DEPRECATED" point to the suggested newer alternative?

[19:57] <lizmat> s/is/does ?

[19:58] <lizmat> r: sub a is DEPRECATED("a NEWER alternative") { say "foo" }; a

[19:58] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«foo␤Saw 1 call to deprecated code during execution.␤================================================================================␤Sub a (from GLOBAL) called at:␤  /tmp/tmpfile, line 1␤Please use a NEWER alternative instead.␤----…»

[19:58] <tadzik> sad panda

[19:58] <lizmat> btyler: yes

[19:58] <retupmoca> r: role attrd { has $!foo }; class foo does attrd { method test { say $!foo } }; foo.new.test

[19:59] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«(Any)␤»

[19:59] <sjn> is FEATURE_FROM_VERSION("1.0")

[19:59] <FROGGS_> Mouq / lue: do we have background colouring in Pod? like in the spec pages?

[20:00] <jnthn> sjn: They're just traits; you can define your own 

[20:00] <sjn> jnthn: yeah, I know

[20:00] <jnthn> ah, k :)

[20:00] <sjn> jnthn: I'm just contemplating if there's a generic code annotation feature hidden in there somewhere :)

[20:00] <gaussblurinc_> thanks for help, guys! good evening!

[20:01] <sjn> that one could query

[20:01] <FROGGS_> o/

[20:01] <sjn> or attach callbacks to

[20:01] <lue> FROGGS_: the doc pages have it, but perlcabal.org/syn has yet to get the better stylesheet

[20:01] <lizmat> in any case,I would like to point out that is DEPRECATED tells you *where* the deprecated code is called

[20:01] <tadzik> sjn: maybe that can be done with #= somehow

[20:01] <FROGGS_> sjn: there is nothing specced/implemented like that yet

[20:01] <lizmat> and what you should use instead

[20:01] <lizmat> r: "foo".ucfirst.say

[20:01] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«Foo␤Saw 1 call to deprecated code during execution.␤================================================================================␤Method ucfirst (from Cool) called at:␤  /tmp/tmpfile, line 1␤Please use 'tc' instead.␤------------…»

[20:02] <FROGGS_> lue: and so we can have sections in Pod like "stable"/"somethinginbetween"/"slushy" and "draft", which we can render then differently?

[20:03] <lue> FROGGS_: there's nothing programmatically distinguishing things of various stableness, and I doubt anyone wants to try :)

[20:04] <timotimo> retupmoca: thanks! i made a dumb mistake :)

[20:04] <FROGGS_> lue: no, I am more thinking of wrapping sections of Pod into some kind of layer, that gets the property (==CSS class) "stable" then

[20:04] <timotimo> tadzik: no reason to be sad panda!

[20:05] <lizmat> r: my $b = KeyBag.new; say $b

[20:05] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Undeclared name:␤    KeyBag used at line 1␤␤»

[20:05] <lizmat> hmmmm...

[20:05] <lue> You'll have to see Pod::To::HTML about that. I know it at least does =Image and some generic <div> construct, but that's all I know.

[20:06] *** gaussblurinc_ left
[20:06] <FROGGS_> lue: kthx

[20:06] <lizmat> r: my $b = <a b b c>.KeyBag; say $b

[20:06] <camelia> rakudo-jvm 647a77: OUTPUT«BagHash.new(b(2), a, c)␤Saw 1 call to deprecated code during execution.␤================================================================================␤Method KeyBag (from Any) called at:␤  /tmp/tmpfile, line 1␤Please use 'BagHash' instead.␤---…»

[20:06] <camelia> ..rakudo-{parrot,moar} 647a77: OUTPUT«BagHash.new(a, b(2), c)␤Saw 1 call to deprecated code during execution.␤================================================================================␤Method KeyBag (from Any) called at:␤  /tmp/tmpfile, line 1␤Please use 'BagHash' inst…»

[20:06] <FROGGS_> I am waiting for TimToady++ for his opinion first

[20:08] *** raiph left
[20:08] <lue> it'd have to be something like =begin Css though, not CSS :)

[20:10] *** telex left
[20:12] *** telex joined
[20:13] <FROGGS_> k

[20:14] <lue> Actually, if you just want to specify a rule for a stylesheet, some sort of :class<> attribute would work better.

[20:15] *** gaussblurinc_ joined
[20:16] <lue> Which AFAICT Pod::To::HTML supports for =pod but nothing else.

[20:32] *** gaussblurinc_ left
[20:33] *** vendethiel left
[20:34] <dalek> Perlito: b9c2191 | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Regex5.pm:

[20:34] <dalek> Perlito: Perlito5 - Perlito5::Grammar::Regex5 more details

[20:34] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/b9c219132f

[20:37] *** vendethiel joined
[20:39] <Mouq> FROGGS_: Pod-To-HTML::pod2html has a :head attribute that is used to pass style information

[20:40] <Mouq> FROGGS_: And yeah, =pod supports a :class<> attribute

[20:40] <Mouq> FROGGS_: That's it though

[20:40] <FROGGS_> atm I'd just add css classes to sections/paragraphs, and the external CSS should then format it nicely

[20:40] <lue> Mouq: O_o why's it called :head?

[20:41] <FROGGS_> I do not want to embed CSS in Pod, just things that end up being class names

[20:42] <Mouq> lue: as in pod2html $pod, :head(q[<link rel="blabla"/>]), :header(q[<p>An awesome page from my documentation:</p>])

[20:42] <lue> ah, OK.

[20:43] <Mouq> FROGGS_: Note that you can add arbitrary configuration info (like :stability<3>) and have a postprocessor do something with it

[20:43] <FROGGS_> Mouq: that sounds like the right thing todo :o)

[20:44] <Mouq> It only sounds moderately painful :|

[20:44] <FROGGS_> we'll see

[20:47] <Mouq> lue: Are there any blocking problems with pod-vvi that we could move the synopses to Pod6?

[20:50] <lue> Mouq: not that I'm aware of. I don't think we need to update branch pod6ify that way though, but let me check

[20:50] *** bluescreen10 left
[20:50] *** kivutar left
[20:52] *** kivutar joined
[20:55] <lue> Mouq: I'm in the process of merging right now, if it turns out to be too much of a headache then running pod-vvi on everything again would be the thing to do.

[20:57] *** bluescreen10 joined
[20:57] <Mouq> lue++

[20:58] <lizmat> fg

[20:58] <lizmat> oops

[21:02] <lue> mergetool + kdiff3 makes this nice to do :)

[21:05] <lizmat> r: sub a (:&b = &[===]) { b.gist.say }; a  # expected something like sub infix:<===>(Any $?, Any $?) { #`(Sub+{<anon>}+{Precedence}|4564337744) ... }

[21:05] <camelia> rakudo-{parrot,jvm,moar} 647a77: OUTPUT«True␤»

[21:06] <btyler> lizmat: from earlier - cool! didn't know that about "is DEPRECATED" :)

[21:06] <dalek> nqp/asyncops: 362e7a4 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[21:06] <dalek> nqp/asyncops: Map nqp::timer for MoarVM.

[21:06] <dalek> nqp/asyncops: review: https://github.com/perl6/nqp/commit/362e7a46f2

[21:07] <lizmat> jnthn++

[21:08] <dalek> rakudo/async: 3814ab3 | jnthn++ | src/core/ThreadPoolScheduler.pm:

[21:08] <dalek> rakudo/async: Pass an arg for the async handle to nqp::timer.

[21:08] <dalek> rakudo/async: 

[21:08] <dalek> rakudo/async: It's already required on Moar in order to use nqp::timer at all. Will

[21:08] <dalek> rakudo/async: need some JVM work to get this in place also.

[21:08] <dalek> rakudo/async: review: https://github.com/rakudo/rakudo/commit/3814ab3346

[21:08] <lue> .oO(This merge is showing how S11 has changed a bunch recently. I hope I don't accidentally leave in old-S11 cruft)

[21:11] <Mouq> r: sub a (:&b = &[===]) { &b.gist.say }; a # FTFY

[21:11] <camelia> rakudo-jvm 647a77: OUTPUT«sub infix:<===>(Any $?, Any $?) { #`(Sub+{<anon>}+{Precedence}|1173705505) ... }␤»

[21:11] <camelia> ..rakudo-moar 647a77: OUTPUT«sub infix:<===>(Any $?, Any $?) { #`(Sub+{<anon>}+{Precedence}|140599306857920) ... }␤»

[21:11] <camelia> ..rakudo-parrot 647a77: OUTPUT«sub infix:<===>(Any $?, Any $?) { #`(Sub+{<anon>}+{Precedence}|7813026685060425491) ... }␤»

[21:12] *** btyler left
[21:16] <lizmat> Mouq: do you have an explanation for the difference?

[21:17] *** kivutar left
[21:18] <Mouq> lizmat: b vs &b. b calls &b()

[21:18] *** BenGoldberg joined
[21:20] <lizmat> ah, duh  :-)

[21:24] *** raiph joined
[21:29] <dalek> rakudo/nom: 22fbedc | (Elizabeth Mattijsen)++ | src/core/Supply (2 files):

[21:29] <dalek> rakudo/nom: Implement Supply.squish

[21:29] <dalek> rakudo/nom: 

[21:29] <dalek> rakudo/nom: Although this does not seem to work without :with parameter: somehow the

[21:29] <dalek> rakudo/nom: default &[===] does *not* get set.  Giving that up for now.

[21:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22fbedce3d

[21:29] <dalek> roast: a902f51 | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[21:29] <dalek> roast: Tests for Supply.squish

[21:29] <dalek> roast: review: https://github.com/perl6/roast/commit/a902f51b36

[21:29] <dalek> perl6-roast-data: 5b1b6a5 | coke++ | bin/rakudo. (3 files):

[21:29] <dalek> perl6-roast-data: standardize ulimit for rakudo

[21:29] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5b1b6a5d2f

[21:29] <dalek> perl6-roast-data: d04eb61 | coke++ | bin/ (2 files):

[21:29] <dalek> perl6-roast-data: no longer need a separate roast dir

[21:29] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d04eb610da

[21:30] <lizmat> on that note: enough done for today, good *, #perl6!

[21:30] <FROGGS_> gnight lizmat 

[21:31] <Mouq> night lizmat++

[21:31] <[Coke]> ~~

[21:32] *** thou joined
[21:37] <jnthn> 'night, lizmat++

[21:38] <[Coke]> rakudobrew probably shouldn't be pushing -gen-moar=master, but relying on the last known good version from rakudo.

[21:38] <[Coke]> (didn't actually broke a few weeks ago, yes?)

[21:38] <tadzik> ah, yes

[21:39] <tadzik> fixed

[21:39] <tadzik> [Coke]++

[21:41] <[Coke]> tadzik: rakudobrew list with nothing installed gives you a p5 error.

[21:41] <tadzik> oh :)

[21:42] <tadzik> on it

[21:42] <[Coke]> rehash gives many more.

[21:42] <tadzik> [Coke]: no it doesn't :)

[21:42] <tadzik> git pull?

[21:42] <tadzik> rehash does, yes

[21:43] <[Coke]> killed a moar build so I could get your latest rakudobrew fix. now rakudobrew build moar dies with an error in the build (no clean target)

[21:43] <[Coke]> make: *** No rule to make target `m-clean', needed by `clean'.  Stop.

[21:43] <[Coke]> (I'll just remove moar-HEAD for now)

[21:44] <[Coke]> tadzik: 'list' is still dying for me, tw.

[21:44] <tadzik>  (╯‵Д′)╯彡┻━┻

[21:44] <tadzik> the makefiles and clean things are such a mess

[21:44] <tadzik> [Coke]: can you show me? I can't reproduce it

[21:45] <[Coke]> $ rakudobrew list

[21:45] <[Coke]> Use of uninitialized value $cur in string eq at /Users/willcoleda/.rakudobrew/bin/rakudobrew line 33. moar-HEAD

[21:45] <[Coke]> I don't think you pushed

[21:46] <[Coke]> last commit is "arglebargle"

[21:46] <tadzik> nope

[21:46] <tadzik> not yet

[21:47] <[Coke]> btw, tadzik++ for doing this. I am now throwing away my ugly shell script that does something like this.

[21:47] <tadzik> :)

[21:47] <[Coke]> (and nowhere near as well. :)

[21:47] <tadzik> [Coke]: pushed now

[21:48] <lue> I hate how committing a merge assumes you want to go on if you back out of the message-writing step, unlike *every other commit I ever make*. (╯‵Д′)╯彡┻━┻

[21:49] *** ggoebel111111 left
[21:49] *** Mouq left
[21:49] *** ggoebel111111 joined
[21:50] <[Coke]> yes.

[21:50] <[Coke]> I was bit by that doing some git-svn surgery yesterday!

[21:51] <[Coke]> hurm. the list is now already showing moar-HEAD despite the fact it's not done building yet. :)

[21:51] <lue> Fortunately git commit --amend lets me fix it.

[21:51] <lue> ( I seriously wonder who on the git team thought such inconsistent behavior was a good thing :/ )

[21:51] <tadzik> hehe

[21:53] <[Coke]> arglebargle

[21:53] <[Coke]> moar build still fails on osx with write error - fine when I'm doing it myself, redoing 'make' fixes it. not with rakudobrew...

[21:54] *** colomon left
[21:55] <FROGGS_> my bet is that it fails when it is invoked as a subprocess that redirects stdout/stderr

[21:55] <FROGGS_> or so

[21:55] <dalek> Heuristic branch merge: pushed 71 commits to specs/pod6ify by lue

[21:56] <tadzik> [Coke]: ah, that's probably because of realclean :/

[21:56] <tadzik> well, you can go into the dir and 'make'

[21:56] *** pippo joined
[21:57] <dalek> perl6-roast-data: 9ab21f8 | coke++ | / (6 files):

[21:57] <dalek> perl6-roast-data: today (automated commit)

[21:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/9ab21f8439

[21:59] <[Coke]> 'make -d' is -segfaulting.

[21:59] *** colomon joined
[22:00] <timotimo> the lead moarvm has is getting bigger and bigger o_O

[22:00] * lue thinks he should probably merge into pod6ify a tiny bit more often :)

[22:00] <timotimo> someone™ should port the unicode database to java

[22:01] * FROGGS_ hides

[22:01] <tadzik> hmm

[22:01] <lue> The Oracle's a tough one to trick though; he's an, uh, oracle.

[22:01] <timotimo> it has the weird thing with 16 bits going on

[22:01] *** gaussblurinc_ joined
[22:02] <lue> I blame UCS-2 for that :)

[22:03] *** treehug88 left
[22:05] *** dmol left
[22:10] *** colomon left
[22:10] <[Coke]> googling for bugs in 'make' is not easy/ :P

[22:10] <tadzik> hah

[22:11] * [Coke] has to head out. laters.

[22:11] <[Coke]> tadzik++ again.

[22:17] *** gaussblurinc_ left
[22:20] *** adu joined
[22:26] *** FROGGS[mobile] left
[22:27] *** Mouq joined
[22:30] *** xenoterracide__ joined
[22:34] <lue> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $_<foo> for $/;  # I assume there's a reason this doesn't work anymore?

[22:34] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«(Any)␤»

[22:37] <lue> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $_<foo> for $<bar>; # *this* is the problem

[22:37] <camelia> rakudo-moar 22fbed: OUTPUT«===SORRY!===␤postcircumfix:<{ }> not defined for type Array␤»

[22:37] <camelia> ..rakudo-jvm 22fbed: OUTPUT«postcircumfix:<{ }> not defined for type Array␤  in method gist at gen/jvm/CORE.setting:12585␤  in sub say at gen/jvm/CORE.setting:13498␤  in block  at /tmp/tmpfile:1␤␤»

[22:37] <camelia> ..rakudo-parrot 22fbed: OUTPUT«postcircumfix:<{ }> not defined for type Array␤  in method gist at gen/parrot/CORE.setting:12606␤  in method gist at gen/parrot/CORE.setting:1056␤  in sub say at gen/parrot/CORE.setting:13540␤  in block  at /tmp/tmpfile:1␤␤»

[22:39] <Mouq> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $_<foo> for @<bar>;

[22:39] <Mouq> :/

[22:39] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«(Any)␤»

[22:39] <Mouq> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $_»<foo> for @<bar>;

[22:39] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«(Any)␤»

[22:40] <Mouq> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $_ for @<bar>;

[22:40] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«｢ABC｣␤ 0 => ｢A｣␤  foo => ｢A｣␤ 0 => ｢B｣␤  foo => ｢B｣␤ 0 => ｢C｣␤  foo => ｢C｣␤␤»

[22:40] <lue> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $<bar>[0]<foo>

[22:40] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«(Any)␤»

[22:40] <lue> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $<bar>[0][0]<foo>

[22:40] <camelia> rakudo-moar 22fbed: OUTPUT«===SORRY!===␤postcircumfix:<{ }> not defined for type Array␤»

[22:40] <camelia> ..rakudo-jvm 22fbed: OUTPUT«postcircumfix:<{ }> not defined for type Array␤  in method gist at gen/jvm/CORE.setting:12585␤  in sub say at gen/jvm/CORE.setting:13498␤  in block  at /tmp/tmpfile:1␤␤»

[22:40] <camelia> ..rakudo-parrot 22fbed: OUTPUT«postcircumfix:<{ }> not defined for type Array␤  in method gist at gen/parrot/CORE.setting:12606␤  in method gist at gen/parrot/CORE.setting:1056␤  in sub say at gen/parrot/CORE.setting:13540␤  in block  at /tmp/tmpfile:1␤␤»

[22:40] <lue> r: my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/; say $<bar>[0][0][0]<foo>

[22:40] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«｢A｣␤␤»

[22:40] <lue> I refuse to believe two extra [0]'s is even close to correct.

[22:41] *** arturo left
[22:41] <Mouq> And it failing like it does with $<bar>[0][0]<foo> is definitely wrong

[22:41] *** kurahaupo left
[22:42] <lue> r: my regex foo { \N }; my regex bar { (<.foo>)+ };  "ABC" ~~ /<bar>+/; say $<bar>[0][0][0]

[22:42] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«｢A｣␤␤»

[22:43] <lue> r: my regex bar { (\N)+ };  "ABC" ~~ /<bar>+/; say $<bar>[0][0][0]

[22:43] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«｢A｣␤␤»

[22:43] <lue> r: "ABC" ~~ /(\N)+/; say $0; say $0[0]; say $0[0][0]; # here you only need two subscripts (the implicit one in $0 counted)

[22:43] <camelia> rakudo-{parrot,jvm,moar} 22fbed: OUTPUT«｢A｣␤ ｢B｣␤ ｢C｣␤␤｢A｣␤␤(Any)␤»

[22:45] <lue> Nice to know it's not pod_vvi's fault itself is broken though :)

[22:47] <Mouq> lue: See the difference between $/ in `my regex foo { \N }; my regex bar { (<foo>)+ };  "ABC" ~~ /<bar>+/;` and `"ABC" ~~ /$<bar>=[(<foo=[\N]>)+]+/;`

[22:48] <Mouq> Oh, nvm

[22:51] <lue> So, when a named rule of any kind (including $<foo>= , which I just checked locally) is involved, you need to subscript thrice, but if there is no name (just  (\N)+  for instance), then it takes two.

[22:52] <lue> The thrice case includes (<.foo>)+, even though its eqv. to (\N)+

[22:52] <lue> O_O        :$!list(Parcel<7>(:$!storage(BOOTArray<8>(▶Array<9>(

[22:53] <lue> Parcel of BOOTArray of Array ‽

[22:54] <lue> (that's  ($<foo>=(\N))+  )

[22:57] * lue will soon paste a gist showing off what all the DUMPs look like

[23:01] *** thou left
[23:11] *** pippo left
[23:11] <lue> Gah, I know where the third layer comes in now; it's from the + on <bar> (which is understandable)

[23:12] *** Mouq left
[23:13] *** beastd left
[23:15] <lue> Here's the script to test this with: https://gist.github.com/lue/11068143

[23:20] <lue> I think I just found it. Am I right in seeing that Rakudo currently does    $<current_rule>[positional capture construct][construct capture no]    instead of $<current_rule>[rule-global capture no]

[23:35] <lue> O_o I'm reading S05 and since when were $0 and $1 specced to hold an array of the construct's matches?

[23:37] *** kurahaupo joined
[23:39] <lue> Bisecting rakudo doesn't show me different results when I expect, which means I somehow managed to have code back in February that worked but doesn't now. Grah.

[23:49] <lue> .ask TimToady I thought subpattern captures used to just fill up the array (  (\N)+ would fill $0, $1, $2, etc.  ), but now code of mine that assumes this (which worked in February) is broken and S05 has apparently been against this notion the whole time. I don't suppose you're to ask as to why this is?

[23:49] <yoleaux> lue: I'll pass your message to TimToady.

[23:51] <lue> .tell TimToady my discovery starts here, for reference: http://irclog.perlgeek.de/perl6/2014-04-18#i_8609501

[23:51] <yoleaux> lue: I'll pass your message to TimToady.

