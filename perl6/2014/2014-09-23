[00:10] *** nbrown joined
[00:15] *** nbrown left
[00:21] *** xenoterracide_ left
[00:25] *** xenoterracide joined
[00:35] *** dayangkun joined
[00:49] *** dayangkun left
[00:59] *** _slade_ joined
[01:05] *** FROGGS_ joined
[01:08] *** FROGGS left
[01:11] *** nbrown joined
[01:11] *** yeahnoob joined
[01:13] *** eupcan277 joined
[01:15] *** nbrown left
[01:20] *** tinyblak joined
[01:21] *** _slade_ left
[01:21] *** _slade_ joined
[01:34] *** tinyblak left
[01:46] *** tinyblak joined
[01:49] *** eupcan277 left
[01:50] *** xenoterracide left
[02:06] *** bjz left
[02:12] *** nbrown joined
[02:16] *** nbrown left
[02:16] *** noganex_ joined
[02:18] <[Coke]> googled how to add swap, done. host08 now has as much as 07 did.

[02:19] *** noganex left
[02:20] *** chenryn joined
[02:30] *** xenoterracide joined
[02:32] *** xenoterracide left
[02:32] *** xenoterracide joined
[02:32] *** jerrycheung joined
[02:33] *** [Sno] left
[02:34] *** [Sno] joined
[02:34] *** xenoterracide left
[02:34] *** xenoterracide joined
[02:35] *** jerrycheung left
[02:41] *** pyrimidine joined
[02:53] * TimToady now near Torrey, UT

[02:54] <TimToady> went over 9000ft with no eye problems, yay

[03:12] *** nbrown joined
[03:16] <[Coke]> yay!

[03:17] *** nbrown left
[03:17] <[Coke]> m: say 3; #you still here, c?

[03:19] <camelia> rakudo-moar 0412f5: OUTPUT«3␤»

[03:19] <[Coke]> just barely, it seems.

[03:20] <BenGoldberg> std: say 42;

[03:20] <[Coke]> nine,diakopter: if that's how slow camelia is going to be when the rakudo.jvm tests are running, then yah, maybe we should move the daily run to nine's box instead of 8

[03:20] <camelia> std fc92e1e: OUTPUT«ok 00:01 139m␤»

[03:20] *** bcode joined
[03:21] <japhb> [Coke]: How much RAM would make Camelia and the rebuilders and other support structure happy?

[03:22] *** yeahnoob left
[03:23] *** raiph left
[03:25] *** kaleem joined
[03:33] *** leont left
[03:35] *** pyrimidine left
[03:39] <[Coke]> dunno. just the rakudo.jvm spectest tends to kill 1-2 cpus and about 5.4G

[03:39] <[Coke]> (assuming that 66% includes swap - if not, then 2.8G)

[03:40] *** [Sno] left
[03:40] *** [Sno] joined
[03:46] *** MikeFair_ joined
[03:54] *** _slade_ left
[04:12] *** araujo left
[04:13] *** BenGoldberg left
[04:13] *** nbrown joined
[04:15] *** anaeem1 joined
[04:18] *** nbrown left
[04:18] *** sftp left
[04:20] *** tinyblak left
[04:20] <[Coke]> m: say 6

[04:20] <camelia> rakudo-moar 0412f5: OUTPUT«6␤»

[04:21] <dalek> perl6-roast-data: 525a94e | coke++ | bin/ (2 files):

[04:21] <dalek> perl6-roast-data: Re-enable rakudo.jvm runs

[04:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/525a94ec0a

[04:21] <dalek> perl6-roast-data: 08f93fe | coke++ | / (2 files):

[04:21] <dalek> perl6-roast-data: Belatedy run the rakudo.jvm daily.

[04:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/08f93febad

[04:32] *** tinyblak joined
[04:32] *** sftp joined
[04:35] *** _slade_ joined
[04:47] *** kaleem left
[04:50] *** mr-foobar left
[04:50] *** chenryn left
[04:52] *** tinyblak left
[05:05] *** xenoterracide left
[05:06] *** xenoterracide joined
[05:11] *** vladtz joined
[05:13] <dalek> specs: 626b042 | (Elizabeth Mattijsen)++ | S16-io.pod:

[05:13] <dalek> specs: Added some stragglers

[05:13] <dalek> specs: review: https://github.com/perl6/specs/commit/626b0426ae

[05:13] <dalek> rakudo/nom: e5e9286 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[05:13] <dalek> rakudo/nom: Minor streamline of prompt()

[05:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e5e928604c

[05:14] *** nbrown joined
[05:14] <lizmat> LHF: there are apparently no tests for prompt()

[05:17] <dalek> specs: eaffff8 | (Elizabeth Mattijsen)++ | S32-setting-library/IO-OLD.pod:

[05:17] <dalek> specs: Old version of S32/IO, for future reference

[05:17] <dalek> specs: review: https://github.com/perl6/specs/commit/eaffff8acf

[05:18] *** nbrown left
[05:21] *** chenryn joined
[05:28] *** kaare_ joined
[05:29] *** dolmen joined
[05:34] *** vladtz left
[05:34] *** yeahnoob joined
[05:34] *** vladtz joined
[05:36] *** vladtz left
[05:36] *** gfldex joined
[05:36] *** vladtz joined
[05:37] *** vladtz left
[05:39] *** vladtz joined
[05:40] *** xenoterracide left
[05:40] *** FROGGS[mobile]2 left
[05:41] *** jerrycheung joined
[05:45] *** dolmen left
[05:53] *** camelia left
[05:55] *** camelia joined
[05:57] *** ChanServ sets mode: +v camelia

[05:58] *** mr-foobar joined
[06:15] *** nbrown joined
[06:16] *** colomon left
[06:18] *** colomon joined
[06:20] *** nbrown left
[06:20] *** gfldex left
[06:21] *** FROGGS_ left
[06:25] *** baest_ is now known as baest

[06:32] <yeahnoob> It don't have any time-performance tests in the Perl 6's rakudo-star for now, is that so?

[06:32] <lizmat> I'm not aware of the existence of any, only of the compiler itself

[06:32] *** _slade_ left
[06:34] <lizmat> mp: sub a ($a --> True) { say $a }; a "foo"     #  :-)

[06:35] <lizmat> m: sub a ($a --> True) { say $a }; a "foo"     #  :-)

[06:35] <camelia> rakudo-moar e5e928: OUTPUT«foo␤Type check failed for return value; expected 'Bool' but got 'Bool'␤  in any return_error at src/vm/moar/Perl6/Ops.nqp:646␤  in sub a at /tmp/hwC4u7_sRq:1␤  in block <unit> at /tmp/hwC4u7_sRq:1␤␤»

[06:35] <yeahnoob> Will the "Time-Performance test suite" be there in sometime future?

[06:35] <lizmat> .oO( must not say "Well volunteered", must not, must not )

[06:36] <nine> yeahnoob: well volunteered!

[06:38] *** eupcan277 joined
[06:42] <yeahnoob> Oh, well...I use my old test code with the latest git-pull today, and get a slower result. So I think about it should be a performance-test somewhere in Github. 

[06:44] *** _slade_ joined
[06:45] *** kaleem joined
[06:45] *** eiro joined
[06:45] <yeahnoob> Test result with the older rakudo-moar, https://code.csdn.net/snippets/473433

[06:46] <yeahnoob> and https://code.csdn.net/snippets/473431

[06:46] <yeahnoob> the newer become slower..

[06:49] <lizmat> yeahnoob: what is the code executed ?

[06:49] <yeahnoob> it's my old test code

[06:49] <yeahnoob> said here before

[06:50] <yeahnoob> from https://github.com/yeahnoob/perl6-perf/blob/master/cp-mod.pl

[06:50] <lizmat> ah, I think you're suffering from .words becoming lazy

[06:51] <lizmat> could you try with .words(:eager) ?

[06:51] *** SamuraiJack_ joined
[06:51] <yeahnoob> sorry , i paste the old code

[06:52] <yeahnoob> oh ? what's the eager mean?

[06:52] <lizmat> not lazy

[06:53] <yeahnoob> ok , i will try it 

[06:53] <lizmat> meaning that it will create all words it can

[06:53] <lizmat> without waiting for return

[06:53] <lizmat> also, if your text file consists of just words in pairs

[06:54] *** darutoko joined
[06:54] <lizmat> you might want to try something like:

[06:55] <lizmat> for "wordpairs.text".IO.words(:eager) -> $a, $b { push %dict{$a} = $b; }

[06:56] <yeahnoob> Thanks for your patient :) I'm trying it now

[07:02] *** mr-foobar left
[07:02] <yeahnoob> Wow...It's much faster with the way you said.

[07:02] <yeahnoob> 2.87s user 0.07s system 99% cpu 2.933 total

[07:04] *** zakharyas joined
[07:05] *** FROGGS joined
[07:05] <yeahnoob> lizmat: Ola, It surprised me. You should know my old code running about 20sec...

[07:06] *** mr-foobar joined
[07:07] *** [Sno] left
[07:10] <lizmat> cool  :-)

[07:10] <lizmat> so about 7x as fast, not bad  :-)

[07:12] *** ghostlines joined
[07:16] *** nbrown joined
[07:16] <lizmat> TimToady: an idea: print prints to whatever $*OUT is

[07:16] <lizmat> take takes to whatever the inner gather is

[07:16] <lizmat> $*OUT allows for lexical override

[07:16] <lizmat> take does not

[07:17] <lizmat> I was thinking that maybe "take" should be overridable and allow that mechanism to instead .more it to a Supply

[07:17] <lizmat> I think we will have many situations in modules, or core settings for that matter

[07:18] <lizmat> where it would be nice to get a Supply of something, rather than a lazy list

[07:18] *** kjs__ joined
[07:18] <lizmat> something to keep in mind for the GLR ?

[07:20] *** nbrown left
[07:22] *** chenryn left
[07:22] *** tinyblak joined
[07:22] <lizmat> examples in the core: lines, words, dir, combinations, permutations, match

[07:24] *** Akagi201 joined
[07:24] *** pflanze left
[07:25] <lizmat> others: uniq, squish, rotor  (which would make current specific Supply methods possibly obsolete)

[07:25] *** virtualsue joined
[07:26] *** chenryn joined
[07:28] *** tinyblak left
[07:28] <dalek> specs: 0ba7481 | (Elizabeth Mattijsen)++ | S16-io.pod:

[07:28] <dalek> specs: Some minor movement, tweaks

[07:28] <dalek> specs: review: https://github.com/perl6/specs/commit/0ba7481e43

[07:28] <dalek> specs: 9d5747d | (Elizabeth Mattijsen)++ | S16-io.pod:

[07:28] <dalek> specs: Not sure we need glob at all

[07:28] <dalek> specs: 

[07:28] <dalek> specs: If you really want a systems's glob() semantics, we should probably just do

[07:28] <dalek> specs: a Proc::Async to the file system and return a lazy .lines from that.

[07:28] <dalek> specs: review: https://github.com/perl6/specs/commit/9d5747d3d8

[07:28] *** kjs__ left
[07:28] *** chenryn left
[07:31] *** chenryn joined
[07:36] <dalek> specs: da6c654 | (Elizabeth Mattijsen)++ | S16-io.pod:

[07:36] <dalek> specs: Oops, forgot one Testable -> FileTestable

[07:36] <dalek> specs: review: https://github.com/perl6/specs/commit/da6c654e7c

[07:43] *** Ven joined
[07:44] <Ven> o/, #perl6

[07:45] <lizmat> Ven o/

[07:52] *** ghostlines left
[08:01] *** _slade_ left
[08:02] <dalek> specs: abb19a5 | (Elizabeth Mattijsen)++ | S16-io.pod:

[08:02] <dalek> specs: Add "extension"

[08:02] <dalek> specs: review: https://github.com/perl6/specs/commit/abb19a588a

[08:13] *** kjs__ joined
[08:13] *** fhelmberger joined
[08:16] *** nbrown joined
[08:17] *** ghostlines joined
[08:17] *** virtualsue left
[08:21] *** nbrown left
[08:23] <dalek> specs: 594cb70 | (Elizabeth Mattijsen)++ | S16-io.pod:

[08:23] <dalek> specs: Eradicate IO::FileTestable role

[08:23] <dalek> specs: 

[08:23] <dalek> specs: There is no point keeping this functionality in a role, as it only just works

[08:23] <dalek> specs: on an IO::Path really.  In the IO::Handle case, it works on the $!path of the

[08:23] <dalek> specs: IO::Handle object: which should be easily installable with "handles".

[08:23] <dalek> specs: review: https://github.com/perl6/specs/commit/594cb70b17

[08:23] *** kjs__ left
[08:25] *** chenryn left
[08:27] *** chenryn joined
[08:27] <dalek> specs: a2a2524 | (Elizabeth Mattijsen)++ | S32-setting-library/IO.pod:

[08:27] <dalek> specs: Part 1 of S32/IO revamp

[08:27] <dalek> specs: 

[08:27] <dalek> specs: Got as far as slurp()

[08:27] <dalek> specs: review: https://github.com/perl6/specs/commit/a2a25246d1

[08:27] *** dakkar joined
[08:27] <lizmat> afk for a few hours&

[08:34] *** brrt joined
[08:38] *** [Sno] joined
[08:39] *** eupcan277 left
[08:50] *** kjs__ joined
[08:51] *** brrt left
[08:59] *** jerrycheung left
[09:03] *** yeahnoob left
[09:11] <dalek> rakudo/optimatch: 8bdc777 | (Tobias Leich)++ | src/core/Cursor.pm:

[09:11] <dalek> rakudo/optimatch: fix spectest fallout on parrot

[09:11] <dalek> rakudo/optimatch: review: https://github.com/rakudo/rakudo/commit/8bdc777f04

[09:15] *** yeahnoob joined
[09:17] *** nbrown joined
[09:21] *** nbrown left
[09:29] *** yeahnoob left
[09:30] *** virtualsue joined
[09:35] *** bjz joined
[09:38] *** telex left
[09:40] *** telex joined
[09:58] *** anaeem1 left
[09:59] *** anaeem1_ joined
[10:02] *** mr-foobar left
[10:04] *** mr-foobar joined
[10:10] *** kaleem left
[10:18] *** nbrown joined
[10:22] *** nbrown left
[10:28] *** mr-foobar left
[10:34] *** Ven left
[10:47] *** bartolin joined
[10:47] *** xenoterracide joined
[10:56] *** xenoterracide left
[10:57] *** itz_ joined
[10:59] <bartolin> m: 1 ... ()

[10:59] <camelia> rakudo-moar e5e928: OUTPUT«Unhandled exception: Element shifted from empty list␤   at <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:13627  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CO…»

[10:59] <bartolin> m: my @a; my $foo = @a.shift

[10:59] <camelia> rakudo-moar e5e928: OUTPUT«Unhandled exception: Element shifted from empty list␤   at <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:13636  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CO…»

[10:59] *** itz left
[11:00] <bartolin> both look good to me. The first one is from RT #75316

[11:00] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75316

[11:01] <bartolin> there is a test in S03-sequence/basic.t which is marked TODO and tests unsucessfully for a Failure object

[11:01] <bartolin> use Test; isa_ok ( 1 ... () ), Failure, 'empty list on right side of sequence operator does not cause infinite loop'

[11:01] <bartolin> m: use Test; isa_ok ( 1 ... () ), Failure, 'empty list on right side of sequence operator does not cause infinite loop'

[11:01] <camelia> rakudo-moar e5e928: OUTPUT«not ok 1 - empty list on right side of sequence operator does not cause infinite loop␤␤# Failed test 'empty list on right side of sequence operator does not cause infinite loop'␤# at /tmp/cOHPJZ_Tbt line 1␤# Actual type: List␤»

[11:01] <bartolin> m:  use Test; dies_ok { 1 ... () }, 'catchable exception';

[11:01] <camelia> rakudo-moar e5e928: OUTPUT«ok 1 - catchable exception␤»

[11:02] <bartolin> do you agree that the second test looks better?

[11:04] <lizmat> bartolin: throws_like may be better, if it is a specific type of exception (so not X::AdHoc)

[11:04] <bartolin> okay, I'll have a look at that.

[11:05] <nine> How can I declare a package GLOBAL::Foo from code EVALed in class Inline::Perl5::Perl6PackageCreator?

[11:05] *** prevost joined
[11:06] <lizmat> GLOBAL::<Foo> = package {} ?

[11:07] <bartolin> lizmat: What is the best way to add some information to the ticket? Or: Can I get a login for the request tracker? I'd like to start contributing by looking at tickets and test.

[11:08] <lizmat> a login you would need to create yourself, afaik

[11:08] <lizmat> getting access to the tickets, is something masak or moritz can take care of, afaik

[11:08] <bartolin> Okay. Then I'll start with creating an account ;-)

[11:08] <bartolin> Thanks!

[11:09] <nine> lizmat: thanks, that works!

[11:10] <lizmat> .oO( it helps if everything is an object :-)

[11:11] *** Sqirrel joined
[11:11] <dalek> panda: a65a03f | Carlin++ | lib/Panda/Tester.pm:

[11:11] <dalek> panda: run tests normally if Build.pm is not a Tester

[11:11] <dalek> panda: 

[11:11] <dalek> panda: If the Build.pm is not Panda::Tester the tests will be run as normal.

[11:11] <dalek> panda: Currently if a Build.pm file exists but does not supply a test method

[11:11] <dalek> panda: no tests are being run. This means many Nativecall reliant modules are

[11:11] <dalek> panda: not being tested in the smoketests etc.

[11:11] <dalek> panda: review: https://github.com/tadzik/panda/commit/a65a03f8aa

[11:11] <dalek> panda: 26cb64f | colomon++ | lib/Panda/Tester.pm:

[11:11] <dalek> panda: Merge pull request #102 from carbin/panda-test

[11:11] <dalek> panda: 

[11:11] <dalek> panda: run tests normally if Build.pm is not a Tester

[11:11] <dalek> panda: 

[11:11] <dalek> panda: Looks solid, and it's easier for me to test once merged.  ;)

[11:11] <dalek> panda: review: https://github.com/tadzik/panda/commit/26cb64fafe

[11:12] * colomon commences smoke run with new panda.

[11:18] *** nbrown joined
[11:21] *** SamuraiJack_ left
[11:22] *** salv0 left
[11:22] *** chenryn left
[11:23] *** nbrown left
[11:24] *** bjz left
[11:24] *** bjz joined
[11:28] <bartolin> r: use Test; throws_like { 1 ... () }, X::AdHoc, 'catchable exception'

[11:28] <camelia> rakudo-parrot e5e928: OUTPUT«use of uninitialized value of type Nil in numeric context  in sub throws_like at lib/Test.pm:294␤␤    1..2␤    ok 1 - code dies␤    ok 2 - right exception type (X::AdHoc)␤ok 1 - catchable exception␤»

[11:28] <camelia> ..rakudo-moar e5e928: OUTPUT«    1..2␤    ok 1 - code dies␤    ok 2 - right exception type (X::AdHoc)␤ok 1 - catchable exception␤»

[11:28] <camelia> ..rakudo-jvm e5e928: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[11:29] <lizmat> bartolin++

[11:29] <bartolin> ;-) && lizmat++

[11:30] *** leont joined
[11:35] *** Ven joined
[11:39] *** salv0 joined
[11:39] *** kaare_ left
[11:40] <Ven> Alright, I don't think we have a backbone manager in p6? I wanted something like that

[11:40] <Ven> Probably using tadzik++'s Template::Mojo

[11:41] * lizmat wonders what a backbone manager is

[11:41] <lizmat> something that middle management doesn't have ?

[11:43] <Ven> lizmat: basically, a directory structure generator. i.e., I want a perl6 module, I run `6bones gen perl6/module --name=Lib::Foo`. It then clones perl6/module, parses all files (that need it) using Template::Mojo, and cleans off the .git

[11:43] <Ven> you create a backbone once, and you can reuse them. kinda like g8 and stuff

[11:44] * lizmat usually just looks at her projects, then uses cp -rp and removes / cleans stuff she doesn't need

[11:44] *** brrt joined
[11:45] <Ven> .ask tadzik what's that .values for? https://github.com/tadzik/Template-Mojo/blob/master/lib/Template/Mojo.pm#L194

[11:45] <yoleaux> Ven: I'll pass your message to tadzik.

[11:45] *** kaleem joined
[11:45] <Ven> lizmat: right, but then you're not really letting other people use your wisdom :)

[11:45] <FROGGS> carlin++ # thanks for fixing my mess

[11:45] <lizmat> Ven: true

[11:46] <lizmat> I keep a lot to myself  :-)

[11:47] <tadzik> Ven: hmm, not sure

[11:47] <yoleaux> 11:45Z <Ven> tadzik: what's that .values for? https://github.com/tadzik/Template-Mojo/blob/master/lib/Template/Mojo.pm#L194

[11:47] <tadzik> Ven: does it work without it?

[11:47] <tadzik> :)

[11:48] <Ven> can't try right now :)

[11:48] <tadzik> also, I didn't write that, szabgab++ did :)

[11:48] <Ven> szabgab++

[11:49] <Ven> (don't imply I should be git blaming!)

[11:49] <tadzik> I checked because I don't recall writing the docs at all :D

[11:51] <Ven> well I was gonna look at t/ but then I saw that little eg/ folder and thought "I know what that means.."

[11:53] *** itz joined
[11:55] *** itz_ left
[11:56] <timotimo> m: my %foo = <me singular us plural>; for %foo { say $_.perl }

[11:56] <camelia> rakudo-moar e5e928: OUTPUT«"me" => "singular"␤"us" => "plural"␤»

[11:56] <timotimo> m: my %foo = <me singular us plural>; for %foo.values { say $_.perl }

[11:56] <camelia> rakudo-moar e5e928: OUTPUT«"singular"␤"plural"␤»

[11:56] <timotimo> it would appear you would need the .values there, no?

[11:56] *** skids left
[11:58] <Ven> timotimo: no, it's on %foo<me>

[11:58] <Ven> so it's doing Array#values

[11:58] *** itz_ joined
[11:59] <Ven> m: say (my %)

[11:59] <camelia> rakudo-moar e5e928: OUTPUT«␤»

[11:59] <Ven> %)

[11:59] *** prevost left
[11:59] <Ven> (timotimo ™)

[11:59] <timotimo> oh, ok

[11:59] *** itz left
[12:00] <timotimo> timotimo™™

[12:00] <Ven> %)

[12:00] *** Woodi_ left
[12:00] * Ven used to do this smiley all the time, but then became _grrr :P

[12:01] <timotimo> ven_grrr?

[12:01] *** mr-foobar joined
[12:01] <timotimo> .o( i still haven't watched marvel's The A Ven_grrrs )

[12:02] <Ven> wow, you're going pretty far

[12:02] *** Woodi joined
[12:06] <bartolin> okay, one last try ;-)

[12:06] <bartolin> r: use Test; throws_like { 1 ... () }, X::AdHoc, "catchable exception", message => "Element shifted from empty list"

[12:06] <camelia> rakudo-jvm e5e928: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[12:06] <camelia> ..rakudo-{parrot,moar} e5e928: OUTPUT«    1..3␤    ok 1 - code dies␤    ok 2 - right exception type (X::AdHoc)␤    ok 3 - .message matches Element shifted from empty list␤ok 1 - catchable exception␤»

[12:07] <bartolin> :-/

[12:07] <lizmat> eh?  what is the problem ?

[12:08] <bartolin> I hoped to got around the jvm error 

[12:08] <lizmat> camelia on the jvm is not really well

[12:08] <lizmat> that's not your fault

[12:08] <lizmat> j: say 42

[12:08] <camelia> rakudo-jvm e5e928: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[12:08] <bartolin> Oh! That broken!

[12:08] <lizmat> yup, *that* broken

[12:08] <lizmat> j: i

[12:08] <camelia> rakudo-jvm e5e928: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[12:09] <lizmat> .oO( golfed down )

[12:09] <bartolin> niecza: use Test; throws_like { 1 ... () }, X::AdHoc, "catchable exception", message => "Element shifted from empty list"

[12:09] <camelia> niecza : OUTPUT«Cannot open assembly './run/Niecza.exe': No such file or directory.␤»

[12:10] <bartolin> Hmm.

[12:10] <colomon> Hmmm, six new failures with the Panda patch.

[12:10] <bartolin> (I'm trying this because I want to know what I have to fudge in the test file.)

[12:12] <lizmat> assume no fudging is needed on JVM, or maybe better: also build rakudo on JVM for yourself  :-)

[12:13] <bartolin> It works locally with perl6-j. So I'll do no fudging. Thanks again!

[12:19] *** nbrown joined
[12:24] *** nbrown left
[12:24] *** denis_boyun joined
[12:27] <[Coke]> (access to tickets) I think that's just me and pmichaud at this point.

[12:29] <bartolin> do you have (something like) a policy for that?

[12:29] <[Coke]> ok, I fixed (I hope) the daily runs of rakudo-star-daily & perl6-roast-data; I may be forced to look into camelia before moritz returns from vacation. :)

[12:30] <[Coke]> something like "applicant must present some interest". What's your RT userid?

[12:30] <FROGGS> colomon: sadly that's not because of the patch :/

[12:30] <bartolin> [Coke]: I don't have one yet. I'll ping you when I created my account, okay?

[12:31] <colomon> FROGGS: really?  you know the cause, then?

[12:31] * colomon was rebuilding rakudo to test on a different machine, but got sidetracked

[12:31] <FROGGS> colomon: these modules were not tested... so the problem is just that we were blind for some time :o(

[12:32] *** jerrycheung joined
[12:32] <bartolin> [Coke]: BTW, Google led me to this list https://gist.github.com/coke/ac078396e8f216b83e9a

[12:33] <bartolin> [Coke]: Is it still valid?

[12:33] <colomon> FROGGS: well, then that is because of the patch -- it exposed the problems to the light.

[12:33] <bartolin> s/still//

[12:33] <[Coke]> bartolin: ok. when commenting on tickets, default towards clicking the 'cc perl6' button. tickets that don't have a test are marked testneeded. if closing a test marked testneeded, say where the test is. Make sure when adding tests based on tickets you include "RT #" in the fudge comment (if todo/skip) or with a straight # RT <id>    comment around the block.

[12:33] <colomon> as always, here is the link -- http://host07.perl6.com:8080/report -- the one day failures at the top all "passed" 8.5 hours ago.

[12:34] <[Coke]> bartolin: holy crap, google knows everything.

[12:34] <[Coke]> colomon: host07 is going away. does that need to move to host07?

[12:34] <bartolin> [Coke]: ;-)

[12:34] <[Coke]> er, host07, host08

[12:34] <colomon> [Coke]: yes

[12:34] <colomon> I guess

[12:34] <[Coke]> bartolin: yes, everything on that list is still good, though lizmat has committed some stuff to nqp which causes it to pass tests by cheating.

[12:35] *** raiph joined
[12:35] <[Coke]> (adding a stub for docs quiets the test but doesn't doc)

[12:35] <bartolin> [Coke]: Okay. Thanks for the pointers about tickets/tests.

[12:35] *** ggoebel joined
[12:36] <[Coke]> bartolin: happy to answer any questions you have about that list, thank you for your service. :)

[12:36] <[Coke]> I can put that somewhere more editable if we need to fix the gist.

[12:37] *** SamuraiJack_ joined
[12:38] *** ggoebel2 left
[12:40] * [Coke] wonders how sixers can continue to use perlmonks for sixstuff when half of the comments are bitching about perl6 and the rest are complaining about the bitching or trying to hug the trolls.

[12:42] <brrt> maybe make a 6monks? but that only reinforces the split

[12:42] <brrt> except that the split is already here, of course

[12:43] <Ven> [Coke]: do you have a post in mind?

[12:44] <colomon> FROGGS: hmmm, you're definitely right for Inline::Perl5.  It's now running the tests, and one fails.

[12:44] <lizmat> [Coke]: I only committed doc patches to nqp lately ?

[12:44] <lizmat> ah, ok

[12:45] <lizmat> [Coke]: intended them to be a nudge towards jnthn, as I needed them  :-)

[12:46] <[Coke]> lizmat: I need to have 2 kinds of test failures: no docs, and stubs only, because stubs are a step in the right direction.

[12:46] <[Coke]> lizmat++

[12:47] <lizmat> I think a stub could be more inducing to fixiing than a failing test somewhere  

[12:47] <lizmat> *inducive

[12:47] <[Coke]> ven: the recent dbi5/6 thread, for starters.

[12:47] <lizmat> *fixing

[12:48] <[Coke]> lizmat: I can't get people to fix failing tests at all, it seems, so I tentatively agree with you. :)

[12:50] <[Coke]> ven: anything with cdr, for example.

[12:50] <Ven> [Coke]: cdr?

[12:50] <Ven> I know that from lisp, but.. :)

[12:53] <[Coke]> Ven: deliberately not using his pm psuedo.

[12:55] *** anaeem1_ left
[12:55] *** anaeem1_ joined
[12:56] *** anaeem1_ left
[12:56] <brrt> i think it's a careful balance we'd have to strike between differentiating the p6 community from the p5 one

[12:58] <Ven> right. Just don't feed the trolls :)

[12:58] <brrt> because there are still a lot of people from the p5 community that are interested in p6

[12:58] <brrt> just that many of them might have gotten burn scars from p6 being not-quite-ready when they tried before

[12:58] *** Ven left
[12:59] *** guru joined
[12:59] *** guru is now known as Guest34483

[12:59] *** Guest34483 is now known as ajr_

[13:00] *** virtualsue left
[13:05] * leont keeps being surprised people still put up with perlmonks at all, regardless of version preference

[13:05] <lizmat> to me, these perlmonks visitors, are dead people (in the Walking Dead sense)

[13:06] <lizmat> to be avoided

[13:07] <lizmat> http://flavorwire.files.wordpress.com/2013/10/2013-05-23-the_walking_dead.jpg

[13:08] <lizmat> I still hope we can find a cure...  :-)

[13:13] *** kaare_ joined
[13:15] <timotimo> don't dead, open inside

[13:18] <brrt> empathy of course is always a cure

[13:18] <brrt> and the realisation that all the work on perl6 does not take anything from perl5, and vice versa

[13:18] <geekosaur> perlmonks has been devoid of empathy for years

[13:18] <brrt> empathy is a superpower

[13:20] *** nbrown joined
[13:21] <Woodi> but, to some degree, they are right - Perl6 is pre-existing language :) to make peace we must give something :)

[13:21] <Woodi> Hi today :)

[13:21] <brrt> hi Woodi

[13:21] <brrt> we don't need to make peace because there is no war

[13:22] <brrt> there's just misunderstanding and FUD

[13:22] *** skids joined
[13:23] <brrt> perl5 is still a language that - in no small part due to CPAN - has a large amount of whipuptitude and manipulexity

[13:23] <brrt> and... i think perl6 has better manipulexity, especially for stuff that we do today that we didn't do 10 years ago

[13:24] <Woodi> I'm still amazed that that kind conflict/misunderstanding have a place... I even have no idea what are the rational obiections (except that many time passed...)

[13:25] *** nbrown left
[13:27] <brrt> funnily enough, i saw a ticket fly by a few days ago about scheduling being sometimes lousy.. and i was amazed about how far we'd come that we're even effectively talking about scheduling threads in perl6

[13:28] * geekosaur is firmly of the opinion that sometime in the 1990s a group of perl5 hackers traded their humanity for a deep internal understanding of perl5, and this led to perlmonks *and* to the general perception that perl5 is "dead". something is deeply rotten in that community

[13:30] *** panchiniak joined
[13:32] <Woodi> probably such fhilosophical discusions one day ends with wanting Perl6 being officially announced and then it will be great or will fail mass-testing fire :)

[13:32] <PerlJam> Woodi: I doubt it.  Humans are icky that way.

[13:35] <nwc10> I'm not confident that the evidence supports that theory

[13:36] <nwc10> there are quite a few folks on perlmonks who *think* that they understand the internals, but don't actually contribute code, and if their answers/explanations are examined closely, don't actually know as much as they think that they know

[13:37] <geekosaur> that's kinda a given at this point

[13:37] <geekosaur> start with the core, get the hangers-on over time

[13:37] <geekosaur> my point is that there's a community rot level that started in the mid 90s (with evidence on p5-p before that)

[13:38] <geekosaur> and it's actively corrosive

[13:39] <Woodi> anyway, would be nice to have some hidden and hardcore-working v6 app(s) somewhere in production... heavy-hardcore working app... and compiler itself do not count in that case :)

[13:40] <nwc10> agree/well volunteered/is the IRC logger Perl 6 yet?

[13:40] <nwc10> that last one is a serious suggestion, as the code is logging a bunch of specifically perl 5 channels too

[13:40] <Woodi> heh

[13:40] <nwc10> including http://irclog.perlgeek.de/onionsketch/

[13:41] <nwc10> hop to it, then :-)

[13:41] <PerlJam> nwc10: I wrote https://github.com/perlpilot/synopsebot/blob/master/synopsebot.p6 though it's not in production anywhere that I know of.

[13:41] <PerlJam> (but it could be!)

[13:41] <Woodi> but some .so/.tgz flavor would be nice...

[13:42] <lizmat> maybe camelia should be P6 running the latest released version ?

[13:43] <Woodi> I think that some xml/json/everything else converter would be nice. some web form or iconv-commandline-like 

[13:43] <timotimo> boooor lana

[13:44] <timotimo> er, ww i guess?

[13:45] <Woodi> anyone uses log parser written in v6 ?

[13:45] <dalek> rakudo-star-daily: 0510aa2 | coke++ | log/ (14 files):

[13:45] <dalek> rakudo-star-daily: today (automated commit)

[13:45] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/0510aa2ea3

[13:46] <lizmat> Woodi: not sure, but if the log is finite, lines(:eager) should be pretty fast now

[13:48] <lizmat> $ time perl6 -e '"words".IO.lines(:eager).elems.say'

[13:48] <lizmat> 235886

[13:48] <lizmat> real	0m0.778s

[13:50] <bartolin> timotimo: I found your post at last years p6 advent calendar (perl6advent.wordpress.com/2013/12/17/) and took the chance to implement it: https://github.com/perl6/roast/pull/46

[13:50] <Woodi> btw. our first gues is text files mangling :) maybe something binary mangling or serial/parallel port or USB/ or just something with hardvare flavor like /proc info gatherer ?

[13:51] <bartolin> timotimo: Thanks for guidance to get started!

[13:51] <Woodi> or full IDE for Perl6 ;)

[13:52] <timotimo> ooooh

[13:53] <Woodi> something with icons moved by mouse becouse we like vim anyway :)

[13:54] <Woodi> supply construction kit on Windows ? ;)

[13:56] <Woodi> how hard would be to do Skype clone ? some network and multimedia codecs via nativecalls... what with displaying stuff ?

[13:58] <Woodi> chat part routed via irc server, roster could be just channel list :)

[14:01] <Woodi> and of course working phpBB clone is needed or full CMS even ;) 

[14:02] <[Coke]> S05-transliteration/trans.rakudo.moar aborted 56 test(s) (unpushed daily run)

[14:03] <Woodi> we already have some SQL Injection - proof code :)

[14:04] *** toysrough left
[14:05] <dalek> roast: cf3bf2b | usev6++ | S05-capture/match-object.t:

[14:05] <dalek> roast: RT #76998 was testneeded should be closeable

[14:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76998

[14:05] <dalek> roast: all credits to timotimo++

[14:05] <dalek> roast: http://perl6advent.wordpress.com/2013/12/10/day-10-adverbly-adverby-adverbs/

[14:05] <dalek> roast: review: https://github.com/perl6/roast/commit/cf3bf2bef0

[14:05] <dalek> roast: 82267c1 | usev6++ | S03-sequence/basic.t:

[14:05] <dalek> roast: changed test for RT #75316

[14:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75316

[14:05] <dalek> roast: The old test didn't do the right thing (I think).

[14:05] <dalek> roast: According to S03 the infix:<...> operator starts by getting the first value of

[14:05] <dalek> roast: the righthand list. Since this is an empty list, this leads to an exception.

[14:05] <dalek> roast: 

[14:05] <dalek> roast: I'll add this information to ticket #75316.

[14:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75316

[14:05] <dalek> roast: review: https://github.com/perl6/roast/commit/82267c17e1

[14:05] <dalek> roast: 57ea4c8 | usev6++ | S03-sequence/basic.t:

[14:05] <dalek> roast: Re-added fudging for niecza (Type exceptions NYI)

[14:05] <dalek> roast: review: https://github.com/perl6/roast/commit/57ea4c87ea

[14:05] <dalek> roast: 15cd5a8 | (Tobias Leich)++ | S0 (2 files):

[14:05] <dalek> roast: Merge pull request #46 from usev6/master

[14:05] <dalek> roast: 

[14:05] <dalek> roast: RT #76998 was testneeded should be closeable

[14:05] <dalek> roast: review: https://github.com/perl6/roast/commit/15cd5a89f8

[14:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76998

[14:06] *** treehug88 joined
[14:09] <bartolin> bye, #perl6

[14:10] *** bartolin left
[14:12] *** fiefish5000 joined
[14:12] *** vendethiel- joined
[14:12] *** itz joined
[14:12] *** vendethiel left
[14:14] <fiefish5000> Good day #perl6!

[14:15] *** itz_ left
[14:17] <fiefish5000> Out of curiosity, can we do something like <<multi sub infix<=> (Person $a, Age $b) { $a.age=$b; } >>? (Got infix:<+> working but infix:<=> seems to be ignored)

[14:19] <leont> AFAIK '=' works on containers, not on values

[14:19] *** vendethiel joined
[14:20] <brrt> hi fiefish5000

[14:21] *** fiefish5000 is now known as firefish5000

[14:21] *** nbrown joined
[14:21] *** vendethiel- left
[14:24] <jnthn> = also is complied directly rather than multi-dispatched

[14:24] <yoleaux> 22 Sep 2014 19:20Z <brrt> jnthn: that my interest in 'native' arrays is really cheap JIT access, and that i'd personally hapilly sacrifice safety for that

[14:24] <yoleaux> 22 Sep 2014 19:21Z <brrt> jnthn: that i think it'll be possible to find a compromise :-)

[14:25] <jnthn> Along with a bunch of case analysis to avoid emitting generic code that has to check stuff

[14:25] <firefish5000> so it should be $a.age($b)?

[14:26] *** nbrown left
[14:26] * firefish5000 is unfortunatly on a computer without p6 at the moment

[14:26] <jnthn> firefish5000: That normally loks like $a.age = $b 

[14:26] <jnthn> m: class Dugong { has $.age is rw }; my $dan = Dugong.new; $da.age = 42; say $dan.perl

[14:26] <camelia> rakudo-moar e5e928: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/4M8BqmhS3n␤Variable '$da' is not declared␤at /tmp/4M8BqmhS3n:1␤------> [32me is rw }; my $dan = Dugong.new; $da.age[33m⏏[31m = 42; say $dan.perl[0m␤    expecting any of:␤        meth…»

[14:27] <jnthn> m: class Dugong { has $.age is rw }; my $dan = Dugong.new; $dan.age = 42; say $dan.perl

[14:27] <camelia> rakudo-moar e5e928: OUTPUT«Dugong.new(age => 42)␤»

[14:28] <brrt> \o jnthn

[14:28] <jnthn> o/ brrt

[14:29] <brrt> maybe we should take it to #moarvm, or maybe we should do it some day we both actually have free time, but ehm... i'd love to help make native / fast arrays :-)

[14:29] <brrt> and i'm really wondering what your tradeoff goals are

[14:29] <FROGGS> ++brrt # !!

[14:29] <firefish5000> m: class Person{ has $.age is rw }; my $dan = Person.new; $dan.age = 42; multi sub infix:<=>  (Person $a, Int $b) { $a.age = $b; }; $dan=32; $dan.perl.say; #wonders if this is bad practice

[14:29] <camelia> rakudo-moar e5e928: OUTPUT«32␤»

[14:29] *** SamuraiJack joined
[14:29] <jnthn> Well, the usual rules apply: aside from if you're messing with nativecall, it shouldn't be possible ot SEGV the VM, and if you can then it's a bug...

[14:30] <brrt> FROGGS: what can i say, processing speed is like a drug

[14:30] <jnthn> firefish5000: Yes. :)

[14:30] <FROGGS> *g*

[14:30] *** SamuraiJack_ left
[14:30] <brrt> there's a reason we have something like a speed junkie

[14:31] <brrt> hmmm...... including reading out of bounds?

[14:31] <firefish5000> jnthn: yes=bad practice?

[14:31] <brrt> because if that is a given, you really can't do much better than current mvmarray

[14:31] <brrt> you could remove size dispatches

[14:31] <jnthn> brrt: You can do quite a lot better in terms of removing the virtual calling and so forth

[14:32] <brrt> note that - afaik - under ieee$whatever floating point, 0.0 simply is 0x0 in hex

[14:32] <jnthn> And yes, can do an index computation.

[14:32] <firefish5000> camelia: open in tab

[14:32] <firefish5000> oops

[14:32] *** FROGGS[mobile] joined
[14:32] *** ghostlines left
[14:32] <brrt> have you seen the spesh-array-access branch? that could be a start i think

[14:32] *** FROGGS left
[14:32] <brrt> except that i don't really know how to get the facts on the array format just yet

[14:33] <jnthn> firefish5000: Given that = is treated specially by the compiler, triying to write an infix:<=> is not going to end well at all.

[14:33] <brrt> and that i have to do the bounds check as well

[14:33] <brrt> also note that given that we have to check bounds we can't use conditional move for loading the value either

[14:34] <brrt> as in, we're forced to do a jumpy conditional

[14:34] *** ghostlines joined
[14:34] <brrt> hmmm

[14:34] <jnthn> brrt: If we can get rid of the costs we have now *except* the obunds check, that's already a huge win.

[14:34] <jnthn> *bounds

[14:34] <brrt> very well

[14:34] <brrt> ehm, in that respect, i have a simple question

[14:34] <firefish5000> all right, I giveup on that path then. Thanks jnthn++

[14:35] <jnthn> Beyond that, I think we'll be able to recognize various forms of loop or iteration that we can see will not ever go past the end.

[14:35] <brrt> if i get the type object from the spesh facts, will this contain the size of the array as well?

[14:35] <brrt> i believe it is stored in REPR_data currently

[14:35] <brrt> but is that also part of the type object?

[14:35] <brrt> (size of array = size of elems)

[14:37] <jnthn> brrt: I'm glad you find it simple :P

[14:37] *** kaleem left
[14:37] <jnthn> brrt: That question kinda drives to the heart of what I'm hesitating over at the moment.

[14:38] <jnthn> brrt: My answer is kinda "yes, but hmm"

[14:38] <brrt> well... given that you can't optimize mvmarray much further without removing functionality (such as the start idx and the bounds check) there is little else to do

[14:38] <brrt> why?

[14:38] <brrt> but hardcode the logic into the interpreter / jit

[14:38] <jnthn> brrt: As in, yes putting it on the type is quite natural, and that means different STable, but STables are...not tiny

[14:39] <brrt> i see

[14:40] <jnthn> It looks awfully like a reified generics kinda problem

[14:41] <jnthn> In which case it's probably best that I go read up on that so I don't invent an entirely stupid scheme. :)

[14:42] *** rindolf joined
[14:46] *** ghostlines left
[14:47] <jnthn> brrt: This time next week I'll be finished with consulting gig here and will have a lot more brain space and energy for Perl 6 and MoarVM things.

[14:47] <hoelzro> raiph++ # investigating my own issues

[14:48] *** treehug88 left
[14:48] <brrt> reified generics..... that's when you make a generic class that you specialise for a type instance

[14:48] <brrt> right?

[14:49] <brrt> :-) jnthn++ for being the driving force of moarvm development

[14:51] <jnthn> brrt: Yeah. Well, if you think about void Foo<T>() { T[] n = new T[64]; } in C#, where it can specialize the code on int/long/double/a struct/a reference...it's in just the same problem space

[14:52] <brrt> right. but will we do that a lot except for arrays?

[14:52] <jnthn> I can easily imagine wanting it for hashes too

[14:52] <brrt> hmm yes

[14:52] <brrt> i agree

[14:53] <brrt> is there maybe a jit hacking thingy we can do for that? as in, when we have a typed array, implement an op in the JIT that directly implements atpos for these things?

[14:53] <jnthn> Even if we do consider it "just" for arrays, we still have to solve the same kind of problem - which is that we want to JIT specializations.

[14:54] <brrt> uhuh

[14:54] <brrt> the good news is though that mvmarray defaults to 0 / null / 0.0 for out-of-bounds access, and these are all the same

[14:54] <brrt> except for objects, in which case you have vmnull

[14:54] <brrt> but we can special-case that too

[14:54] <leont> Are attributes supposed to work in Grammars or not?

[14:55] <jnthn> leont: Not unless you are sepecting one per cursor.

[14:55] <jnthn> *expecting

[14:55] <jnthn> (Which you typically are not)

[14:55] <leont> Right

[14:55] <jnthn> YourGrammar <: Grammar <: Cursor

[14:55] *** FROGGS joined
[14:55] <leont> I need to maintain state (indentation level), how do I do that?

[14:56] <jnthn> So it's actually an instance of your grammar that is created once per cursor, which means once per rule

[14:56] <leont> Without globals or something like that I mean

[14:56] <jnthn> Dynamic variables

[14:56] <leont> Hmmm

[14:56] <jnthn> That's how Rakudo's grammar does it, and STD too, if you're curious how well the approach scales :)

[14:57] <brrt> my 2c is: if you can optimize it to something that can easily be written in C (without function calls),

[14:57] *** pippo joined
[14:57] <brrt> then it is easy to write in assembly too

[14:58] <pippo> Hello #perl6!

[14:58] <brrt> and often in a way that is efficient as well :-)

[14:58] <brrt> hi pippo

[14:58] <jnthn> brrt: that's a pretty decent guideline.

[14:58] *** virtualsue joined
[14:59] <pippo> Can anybody help on the s/// operator? how can I re-use in the replacement part something captured in the math part?

[14:59] *** ajr_ left
[15:00] *** treehug88 joined
[15:00] *** guru joined
[15:00] <pippo> my $s = "Hello World"; $s ~~ s:s/(\w+) (\w+)/{$0 $1}/; say $s

[15:00] <pippo> m: my $s = "Hello World"; $s ~~ s:s/(\w+) (\w+)/{$0 $1}/; say $s

[15:00] <camelia> rakudo-moar e5e928: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Qkq9NEiQfB␤Two terms in a row␤at /tmp/Qkq9NEiQfB:1␤------> [32mHello World"; $s ~~ s:s/(\w+) (\w+)/{$0 [33m⏏[31m$1}/; say $s[0m␤    expecting any of:␤        postfix␤        infix …»

[15:00] *** guru is now known as Guest97766

[15:00] <pippo> m: my $s = "Hello World"; $s ~~ s:s/(\w+) (\w+)/{$0}/; say $s

[15:00] <camelia> rakudo-moar e5e928: OUTPUT«Hello␤»

[15:01] <pippo> m: my $s = "Hello World"; $s ~~ s:s/(\w+) (\w+)/{$1}/; say $s

[15:01] <camelia> rakudo-moar e5e928: OUTPUT«World␤»

[15:01] *** Guest97766 is now known as ajr_

[15:01] <jnthn> m: my $x = 'The skill of slaughter'; $x ~~ s:g/s(\w+)/$0/; say $x;

[15:01] <camelia> rakudo-moar e5e928: OUTPUT«The kill of laughter␤»

[15:01] <pippo> m: my $s = "Hello World"; $s ~~ s:s/(\w+) (\w+)/{$1}{$0}/; say $s

[15:01] <camelia> rakudo-moar e5e928: OUTPUT«WorldHello␤»

[15:01] <jnthn> The RHS is already a qq

[15:01] *** anaeem1 joined
[15:02] *** virtualsue left
[15:02] <pippo> m: my $s = "Hello World"; $s ~~ s:s/(\w+) (\w+)/$1--$0/; say $s

[15:02] <camelia> rakudo-moar e5e928: OUTPUT«World--Hello␤»

[15:03] <pippo> jnthn: OK. Thank you very much!

[15:03] *** virtualsue joined
[15:05] <pippo> o/ #perl6!

[15:05] *** pippo left
[15:11] *** denis_boyun left
[15:19] *** anaeem1 left
[15:21] *** nbrown joined
[15:26] *** nbrown left
[15:26] *** mr-foobar left
[15:27] *** SamuraiJack_ joined
[15:28] *** SamuraiJack left
[15:29] *** mr-foobar joined
[15:30] *** SamuraiJack_ left
[15:32] *** SamuraiJack joined
[15:35] *** brrt left
[15:39] <dalek> Inline-Perl5/v6: c40a285 | nine++ | / (3 files):

[15:39] <dalek> Inline-Perl5/v6: Allow modules loaded by Perl 5 to be written in Perl 6.

[15:39] <dalek> Inline-Perl5/v6: 

[15:39] <dalek> Inline-Perl5/v6: Support use v6-inline; in Perl 5 code to pass a module's code

[15:39] <dalek> Inline-Perl5/v6: back to Perl 6 which then creates a Perl 6 module of it.

[15:39] <dalek> Inline-Perl5/v6: 

[15:39] <dalek> Inline-Perl5/v6: This may improve use cases where a Perl 5 framework autoloads modules

[15:39] <dalek> Inline-Perl5/v6: that may now be written in Perl 6.

[15:39] <dalek> Inline-Perl5/v6: review: https://github.com/niner/Inline-Perl5/commit/c40a2852a4

[15:41] *** zakharyas left
[15:44] *** treehug88 left
[15:45] <japhb> nine: Do you have an example of what that commit allows?

[15:46] <japhb> Oh never mind, I see the test in the commit

[15:48] <japhb> Better question then is whether perl5 can now directly use v6-inline, or whether you have to use Inline::Perl5 from perl6 and only then are able to load v6-inline from the Inline::Perl5 instance?

[15:52] *** FROGGS left
[15:54] *** jerrycheung left
[15:55] *** treehug88 joined
[16:02] <[Coke]> is LWP::Simple.getprint expected to use http_proxy if present?

[16:03] <[Coke]> s/.getprint//

[16:04] <[Coke]> ah, no reference in the repo.

[16:07] <nine> japhb: the latter. It only works when Perl 5 is loaded by Inline::Perl5

[16:07] <nine> japhb: goal is to allow using a framework like Catalyst in Perl 6 without having to go through too many hoops. v6-inline is an experiment in that direction.

[16:13] *** pmurias joined
[16:13] *** eupcan277 joined
[16:22] *** nbrown joined
[16:26] *** rindolf left
[16:27] *** nbrown left
[16:29] *** rindolf joined
[16:29] *** ajr_ left
[16:33] *** kjs__ left
[16:34] <nine> [Coke]: just ran a rakudo-j spectest on my server and according to collectd at worst case it used about 4 GiB of RAM and left about 3 GiB free (+ lots of untouched swap).

[16:38] *** spider-mario joined
[16:39] *** virtualsue left
[16:40] <colomon> nine: t/inherit.t is failing for me when I try it here.

[16:40] <nine> colomon: you on current git of Inline::Perl5?

[16:41] <colomon> nine: that was a panda install launched in the last ten minutes...

[16:41] <ggoebel> nine++ for bluring the line between perl5 and perl6. When we can all use v5 from v6 and v6 from v5... maybe more folks will realize that timtowtdi

[16:41] <colomon> yes, nine++ indeed!

[16:42] <colomon> nine: just launched it again, and it still fails.

[16:42] <nine> colomon: which tests exactly?

[16:43] <colomon> t/inherit.t ............... 1/5 # Looks like you planned 5 tests, but ran 2

[16:43] <nine> colomon: I'd guess that it segfaults. Can you run it in gdb and show me a backtrace?

[16:43] <colomon> nine: what's the git repo?  I'll try building it by "hand"...

[16:45] <[Coke]> when making a list of lists, how to push a list onto an existing list of lists as the last element?

[16:46] *** telex left
[16:46] <[Coke]> m: my @data; my @row = (1,2,3); say +@row; @data.push:@row; say +@data;

[16:46] <camelia> rakudo-moar e5e928: OUTPUT«3␤0␤»

[16:47] * leont can now parse nested TAP subtests (something I think no other TAP harness can do yet) :-)

[16:48] *** [Sno] left
[16:48] *** telex joined
[16:48] <dalek> specs: cd1ca78 | (Elizabeth Mattijsen)++ | S16-io.pod:

[16:48] <dalek> specs: Eradicate chtmpdir/chhomedir in favour of chdir

[16:48] <dalek> specs: 

[16:48] <dalek> specs: With extra :test capability.

[16:48] <dalek> specs: review: https://github.com/perl6/specs/commit/cd1ca780c1

[16:50] <colomon> nine: how do you build Inline::Perl5 by hand?

[16:50] * colomon thinks it has gotten more complicated since the last time he tried

[16:50] <[Coke]> m: my @data; my @row = (1,2,3); say +@row; @data.push([@row]); say +@data;

[16:50] <camelia> rakudo-moar e5e928: OUTPUT«3␤1␤»

[16:52] <nine> colomon: git clone from [email@hidden.address]
[16:52] <nine> colomon: then run perl6 configure.pl6

[16:53] <nine> leont++ # sounds great!

[16:53] <colomon> nine: 

[16:53] <colomon> t/inherit.t ..

[16:53] <colomon> 1..5

[16:53] <colomon> ok 1 - # SKIP Perl 5 Moose module not available

[16:53] <colomon> ok 2 - # SKIP Perl 5 Moose module not available

[16:53] <colomon> # Looks like you planned 5 tests, but ran 2

[16:53] <nine> colomon: oh! You just don't have Moose installed

[16:54] <colomon> nine: and your fudge is broken.  :)

[16:54] <colomon>   skip('Perl 5 Moose module not available',2);

[16:54] <colomon> should be 5 now, right?

[16:54] <dalek> Inline-Perl5: 5d014db | nine++ | t/inherit.t:

[16:54] <dalek> Inline-Perl5: Update skip count in t/inherit.t to match the plan

[16:54] <dalek> Inline-Perl5: 

[16:54] <dalek> Inline-Perl5: Thanks to colomon++ for debugging this!

[16:54] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/5d014db152

[16:55] <nine> colomon: yep

[16:55] <colomon> and now it passes.  nine++

[16:59] *** kaleem joined
[16:59] <ingy> I just edited http://rosettacode.org/wiki/FizzBuzz#Perl_6 to win the golf at 44 strokes

[16:59] <ingy> then I beat that myself by 9 more strokes :P

[17:00] <ingy> (in my 2015 language :)

[17:00] <pmurias> does you 2015 language compile?

[17:01] *** raiph left
[17:01] <ingy> pmurias: of course

[17:01] <ingy> but not until ~2015

[17:02] <pmurias> heh

[17:02] <ingy> say -Fizz*-%3+-Buzz*-%5|- for 1:100

[17:04] <pmurias> that's your translate to everything language?

[17:04] <dalek> specs: 5741ebe | (Elizabeth Mattijsen)++ | S16-io.pod:

[17:04] <dalek> specs: Remove islink/readlink, add L (readlink) file test

[17:04] <dalek> specs: review: https://github.com/perl6/specs/commit/5741ebe43b

[17:04] <ingy> I had it as: 1:100.for{say{(%3)&s+='Fizz';(%5)&s+='Buzz';s|-}

[17:05] <ingy> but then saw the p6 genius

[17:05] <ingy> pmurias: yes

[17:05] <ingy> translate to many things

[17:05] <nine> I have to admit I rather like some of the Python solutions. Especially the random one :)

[17:07] <[Coke]> we don't currently have a way to sort E and É identically, do we?

[17:07] <ingy> nine: 'range(1, 101)' just smells of Guido :)

[17:08] <dalek> nqp-js: 3568311 | (Pawel Murias)++ | src/vm/js/ (2 files):

[17:08] <dalek> nqp-js: Implment nqp::{mkdir, rmdir, chdir}.

[17:08] <dalek> nqp-js: 

[17:08] <dalek> nqp-js: Raise an error when an op receives to much arguments.

[17:08] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/3568311c17

[17:08] <dalek> nqp-js: ac5f390 | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[17:08] <dalek> nqp-js: A stub nqp::getcomp('nqp') to make nqp::getcomp('nqp').backend.name work.

[17:08] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/ac5f390a4c

[17:08] <dalek> nqp-js: 222d5fd | (Pawel Murias)++ | / (9 files):

[17:08] <dalek> nqp-js: Pass test 63, work towards passing 78.

[17:08] <dalek> nqp-js: 

[17:08] <dalek> nqp-js: Implement cwd, shell, getenvhash ops.

[17:08] <dalek> nqp-js: Put a bunch of subs into the mini setting.

[17:08] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/222d5fdb8c

[17:08] <dalek> nqp-js: 352434c | (Pawel Murias)++ | src/vm/js/nqp-runtime/io.js:

[17:08] <dalek> nqp-js: Fix bug.

[17:08] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/352434cbbc

[17:08] <dalek> nqp-js: 7131624 | (Pawel Murias)++ | src/vm/js/ (4 files):

[17:08] <dalek> nqp-js: Pass test 37.

[17:08] <dalek> nqp-js: 

[17:08] <dalek> nqp-js: Support slurpy named parameters.

[17:08] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/71316240c1

[17:08] <dalek> nqp-js: cf8fe3d | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[17:08] <dalek> nqp-js: Remove debug statements.

[17:08] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/cf8fe3d9e4

[17:08] *** dakkar left
[17:09] <ingy> Python is 100% right (but you have to think in 1990 Dutch)

[17:09] *** kaleem left
[17:11] <pmurias> ingy: why are you so interested into the 'translate to multiple languages' thing? do you use a wide variety of languages often?

[17:12] <[Coke]> m: say "What t".fc

[17:12] <camelia> rakudo-moar e5e928: OUTPUT«(timeout)»

[17:14] *** fhelmberger left
[17:15] *** fhelmberger joined
[17:18] * [Coke] hurls https://github.com/coke/famflags/commit/2fded59ec871400ceb228efa5903611565791fce for some baby perl 6 in the wild.

[17:18] <[Coke]> of course, it's evil and parsing html with grammars...

[17:20] *** fhelmberger left
[17:21] <colomon> pmurias: I can't speak for ingy, but my impression is he's (very reasonably) distressed at the amount of work that goes on in parallel in the different language communities.  Being able to, say, write a library once and have it work in Ruby, Perl 5, Perl 6, Python, etc would be great for all of those languages communities.

[17:21] *** PZt left
[17:22] <nine> interesting observation: Perl 6 is the only language that can use libraries written in all of the mentioned languages via Perl 5's Inline::Ruby, Inline::Python and Perl 6's Inline::Perl5.

[17:23] *** nbrown joined
[17:24] <lizmat> nine: and if you're running on the JVM, java libraries  :-)

[17:24] <nine> oh yeah!

[17:25] <lizmat> don't we have an Inline::Java in P5 worlds ?

[17:25] <lizmat> *world

[17:25] *** raiph joined
[17:27] <lizmat> raiph++

[17:27] <nine> lizmat: yes, we do

[17:27] * lizmat took a 10 minute tour of perlmonks today

[17:27] *** nbrown left
[17:29] *** raiph left
[17:33] *** FROGGS joined
[17:37] <lizmat> [Coke]: I wonder whether you could run .lines on $response, instead of split "\n"

[17:48] *** brrt joined
[17:55] *** kjs_ joined
[17:55] <[Coke]> lizmat: done.

[17:55] <[Coke]> lizmat++

[17:56] <lizmat> cool  :-)

[18:16] <lizmat> jnthn: I wonder if we could gain some performance if you could indicate per method / per class that you don't need a "self" ?

[18:16] <lizmat> or that it does so automatically ?

[18:16] <lizmat> use case: class methods in classes like IO::Spec::UNix

[18:22] <dalek> nqp: 34bd425 | skids++ | src/vm/parrot/ops/nqp_bigint.ops:

[18:22] <dalek> nqp: Fix bigint bitops.  This should fix RT#115966 on perl6-p.

[18:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/34bd42590c

[18:22] <dalek> nqp: 8319266 | (Tobias Leich)++ | src/vm/parrot/ops/nqp_bigint.ops:

[18:22] <dalek> nqp: Merge pull request #169 from skids/master

[18:22] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=115966

[18:22] <dalek> nqp: 

[18:22] <dalek> nqp: Fix bigint bitops.  This should fix RT#115966 on perl6-p.

[18:22] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=115966

[18:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/83192665f8

[18:22] *** kjs_ left
[18:23] <dalek> rakudo/nom: 2cd4fad | (Tobias Leich)++ | tools/build/NQP_REVISION:

[18:23] *** molaf_ left
[18:23] <dalek> rakudo/nom: bump nqp rev for parrot bigint fix, skids++

[18:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2cd4fade12

[18:23] * lizmat goes testing

[18:23] *** gfldex joined
[18:23] *** molaf_ joined
[18:24] *** nbrown joined
[18:24] *** bartolin joined
[18:26] <dalek> roast: 8ceaf34 | (Tobias Leich)++ | S03-operators/bit.t:

[18:26] <dalek> roast: unfuge now passing test, skids++

[18:26] <dalek> roast: review: https://github.com/perl6/roast/commit/8ceaf348ca

[18:27] *** SamuraiJack left
[18:28] <dalek> rakudo/optimatch: 9aa8f6e | (Elizabeth Mattijsen)++ | src/core/IO/Spec/Win32.pm:

[18:28] <dalek> rakudo/optimatch: Fix another case of double slurpy

[18:28] <dalek> rakudo/optimatch: 

[18:28] <dalek> rakudo/optimatch: There shouldn't be any more in the core now.

[18:28] <dalek> rakudo/optimatch: review: https://github.com/rakudo/rakudo/commit/9aa8f6e442

[18:28] *** dalek left
[18:29] *** nbrown left
[18:29] *** dalek joined
[18:29] *** ChanServ sets mode: +v dalek

[18:30] *** _slade_ joined
[18:31] *** [Sno] joined
[18:35] <skids> \o/ now I can upload Sum::Tiger.  Well, at next star I guess.

[18:35] *** _slade_ left
[18:37] *** dragon_d joined
[18:37] *** dragon_d is now known as _slade_

[18:37] <skids> Anyone put any thought into getting Test to test some of the only-when-compiled bugs?

[18:39] *** mberends joined
[18:40] <lizmat> fwiw, CompUnit.new($path).precomp  will precompile any script / module for you

[18:40] <lizmat> dinner&

[18:41] *** _slade_ left
[18:43] *** telex left
[18:44] <FROGGS> that seems to be a pretty recent fail I think (on jvm):

[18:44] <FROGGS> t/spec/S02-types/lazy-lists.t ................................ 

[18:44] <FROGGS> Failed 1/23 subtests 

[18:45] *** erdic joined
[18:45] *** telex joined
[18:46] *** jepeway left
[18:47] *** jepeway joined
[18:48] <FROGGS> skids: yeah, like lizmat++ said you can .precomp stuff, and we already have tests for that in roast... so just grep for .precomp :o)

[18:50] *** darutoko left
[18:52] *** kurahaupo joined
[18:53] <dalek> perl6-roast-data: 4dea258 | coke++ | / (5 files):

[18:53] <dalek> perl6-roast-data: today (automated commit)

[18:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4dea258970

[18:54] <[Coke]> parrot is clean; moar&jit both abort S05-transliteration/trans.rakudo.moar (still); moar+jit dies on S17-procasync/print.rakudo.moar#15; rakudo.jvm failing 8 tests.

[18:55] <[Coke]> 3 of the java failures are "finished in time" which I suspect are just overly ambitious when running on rakudo.jvm on a loaded box.

[18:56] <FROGGS> [Coke]: I'm spectesting jvm right now too, and I shut everything down except xchat... so we'll see

[18:56] *** firefish5000 left
[19:04] *** eupcan277 left
[19:15] *** Karianne_Kertzma joined
[19:15] <lizmat> FROGGS: that fail on JVM was caused by jnthn's last push opts

[19:15] <lizmat> at least, it doesn't fail with the commit just before those

[19:16] <nine> Now that's an interesting error message: "Object of type <anon> in QAST::WVal, but not in SC"

[19:16] <lizmat> FROGGS: so either c0e55a1db3e1 or abc97dbcc2fe

[19:16] <lizmat> the latter seems more likely, judging from the commit message

[19:17] *** molaf_ left
[19:18] <nine> m: BEGIN GLOBAL::<Test> = class { }; Test.new;

[19:18] <camelia> rakudo-moar e5e928: OUTPUT«===SORRY!===␤Object of type <anon> in QAST::WVal, but not in SC␤»

[19:20] <lizmat> nine: I guess that "class Test {}" does something more than GLOBAL::<Test> = class { }

[19:22] <dalek> roast: 9e8d44e | (Elizabeth Mattijsen)++ | S03-operators/numeric-shift.t:

[19:22] <dalek> roast: Unfudge now passing test on parrot

[19:22] <dalek> roast: review: https://github.com/perl6/roast/commit/9e8d44ef89

[19:25] <vendethiel> o/, #perl6

[19:25] *** nbrown joined
[19:25] *** Karianne_Kertzma left
[19:28] *** rurban joined
[19:28] <lizmat> vendethiel o/

[19:29] *** nbrown left
[19:29] *** pippo joined
[19:30] <pippo> o/ #perl6!

[19:30] <lizmat> pippo o/

[19:30] <pippo> Hi lizmat!

[19:31] <pippo> m: my $c = 'AB'; $c ~~ s/^(.)B/$0/; say $c;

[19:31] <camelia> rakudo-moar e5e928: OUTPUT«A␤»

[19:31] <pippo> m: my @a = 1; my $c; for @a {$c = 'AB'; $c ~~ s/^(.)B/$0/; say $c}

[19:31] <camelia> rakudo-moar e5e928: OUTPUT«␤»

[19:32] <pippo> ^^ anybody knows why I did not get the A as in previous command?

[19:32] <FROGGS> pippo: there is an RT ticket for that

[19:32] <FROGGS> the match variable $/ does not get updated in a for loop for some reason

[19:33] <pippo> FROGGS: Haaa. I was thinking I was becoming mad! :-))

[19:33] <FROGGS> m: my @a = 1; my $c; for @a {my $/; $c = 'AB'; $c ~~ s/^(.)B/$0/; say $c}

[19:33] <camelia> rakudo-moar e5e928: OUTPUT«A␤»

[19:33] <FROGGS> see

[19:33] <FROGGS> a weird bug that is :o)

[19:33] <lizmat> feels like a code gen issue ?

[19:33] <pippo> FROGGS: Is all day I am trying to golf it :-))))

[19:34] *** guru joined
[19:34] <pippo> FROGGS: Thank you!

[19:34] *** guru is now known as Guest11555

[19:34] <FROGGS> lizmat: no, I think the problem is that we try to write to the outer outer $/ in the .match method... and doing that in a loop is unsafe

[19:34] *** Guest11555 is now known as ajr_

[19:35] <FROGGS> pippo: :o)

[19:35] <lizmat> ah, ok

[19:35] *** Mso150 joined
[19:37] <pippo> FROGGS: also jakudo is affected? 

[19:38] <pippo> j: my @a = 1; my $c; for @a {$c = 'AB'; $c ~~ s/^(.)B/$0/; say $c}

[19:38] <camelia> rakudo-jvm e5e928: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[19:38] *** brrt left
[19:38] <FROGGS> pippo: I would expect that it affects all backends, but I'm just guessing

[19:39] <pippo> FROGGS: Thanks. I'll use your workaround above until it is corrected.

[19:40] <vendethiel> ingy: nice fizzbuzz :). I love the LS one as well

[19:41] <pippo> BTW. moar REPL has a similar problem (not updating $/) between two successive commands. Perhaps they are related.

[19:42] <vendethiel> I love when I do long backlogs. Means stuff happened :-)

[19:43] <vendethiel> and talking about indent-based stuff, I said I'd to a jade-like template engine, and I still gotta do it

[19:44] <FROGGS> pippo: year, that is possible...

[19:44] <vendethiel> .o( yarrr! It's happenin )

[19:45] *** Psyche^ joined
[19:45] <nine> S10 says "Use GLOBAL:: to declare a global package name.". But "package GLOBAL::Example::Controller::Root" still puts the package into Inline::Perl5::Perl6PackageCreator

[19:46] <lizmat> hmmm.. that could be considered a bug or a NYI

[19:46] <vendethiel> masak, we don't have macros generating macros, right?

[19:46] <vendethiel> m: macro a($){}; a(foo);

[19:46] <camelia> rakudo-moar 2cd4fa: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/F7U1mLAwhj␤Undeclared routine:␤    foo used at line 1␤␤»

[19:46] <vendethiel> I think this is an issue, tbh

[19:48] <pippo> night #perl6!

[19:48] <dalek> rakudo/nom: 682e035 | (Tobias Leich)++ | src/core/Cursor.pm:

[19:48] <dalek> rakudo/nom: optimize .MATCH by about 25%

[19:48] <dalek> rakudo/nom: 

[19:48] <dalek> rakudo/nom: We are still slower than the code before that called into .CAPHASH from nqp.

[19:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/682e0351e3

[19:48] *** pippo left
[19:49] *** Psyche^_ left
[19:49] *** pmurias left
[19:53] <dalek> roast: 606523b | (Tobias Leich)++ | S05-mass/ (2 files):

[19:53] <dalek> roast: unfudge now passing parrot unicode tests

[19:53] <dalek> roast: review: https://github.com/perl6/roast/commit/606523b3e5

[20:02] *** PZt joined
[20:02] *** SamuraiJack joined
[20:03] *** mberends left
[20:04] *** spider-mario left
[20:07] *** mberends joined
[20:07] *** xragnar_ joined
[20:07] *** xragnar is now known as Guest10311

[20:07] *** Guest10311 left
[20:07] *** xragnar_ is now known as xragnar

[20:09] <vendethiel> ooooh, intellij to give ides freely to students.

[20:09] *** brrt joined
[20:12] *** vladtz left
[20:12] *** brrt left
[20:13] *** kjs_ joined
[20:15] <lizmat> ides ?

[20:16] <[Coke]> IDEs

[20:18] <lizmat> ah...  I was thinking some French word I didn't understand

[20:18] <lizmat> beware the ides of March !

[20:18] *** brrt joined
[20:21] *** Mso150 left
[20:22] *** brrt left
[20:26] *** nbrown joined
[20:27] <vendethiel> we have "idées", but outside of that...

[20:28] *** dd_ joined
[20:29] *** dd_ left
[20:29] *** Ven joined
[20:30] *** nbrown left
[20:40] <Ven> erm, CONTROL isn't implemented, right?

[20:41] <Ven> m: sub f{ die 1; CONTROL { say 1 } }()

[20:41] <camelia> rakudo-moar 2cd4fa: OUTPUT«1␤  in sub f at /tmp/TI9GLOJC_g:1␤  in block <unit> at /tmp/TI9GLOJC_g:1␤␤»

[20:41] <Ven> oh, I stand corrected I guess.

[20:41] <Ven> it's for control exceptions instead of exceptions... Eh.

[20:42] <lizmat> yup, like die, warn and the like

[20:42] <Ven> I'm not really up-to-date to these. Re-reading s04 :)

[20:42] <Ven> m: for ^5 { .say; next if 3; CONTROL { say "on $_" } }

[20:42] <camelia> rakudo-moar 2cd4fa: OUTPUT«(signal )0␤»

[20:42] <Ven> alright. Nice.

[20:42] <lizmat> some of it may still be at various stages of NYI

[20:43] <Ven> should that signal :P? ^

[20:45] <lizmat> don't think so  :-)

[20:49] *** raiph joined
[20:50] <Ven> is that golfed down enough?

[20:50] <Ven> m: for ^5 { next if 3; CONTROL { } }

[20:50] <camelia> rakudo-moar 682e03: OUTPUT«(signal )»

[20:50] <Ven> m: for ^5 { last if 3; CONTROL { } }

[20:50] <camelia> rakudo-moar 682e03: OUTPUT«(signal )»

[20:50] <Ven> m: for ^5 { say if 3; CONTROL { } }

[20:50] <camelia> rakudo-moar 682e03: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/13kmPhVIms␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument␤at /tmp/13kmPhVIms:1␤------> [32mfor ^5 { say [33m⏏[31mif 3; C…»

[20:50] <Ven> m: for ^5 { .say if 3; CONTROL { } } # dammit steve

[20:50] <camelia> rakudo-moar 682e03: OUTPUT«0␤1␤2␤3␤4␤»

[20:50] <Ven> so, CONTROL + loop control op = segfault :P.

[20:51] <vendethiel> (isn't CONTROL supposed to deal with those?)

[20:51] <vendethiel> (gotta go back to the spec..)

[20:52] <lizmat> looks like a rakudobug to me

[20:57] <Ven> m: SIMPLECATCH {}

[20:57] <camelia> rakudo-moar 682e03: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/mpQ9hbFWDK␤Undeclared name:␤    SIMPLECATCH used at line 1␤␤»

[20:57] <Ven> NYI then? or implem. details?

[20:58] <lizmat> NYI/rakudobug: probably NYI

[20:59] <FROGGS> gnight

[20:59] *** gfldex left
[21:00] *** FROGGS left
[21:02] <dalek> specs: 7ddb1f4 | (Elizabeth Mattijsen)++ | S16-io.pod:

[21:02] <dalek> specs: Fix alphabetical ordero

[21:02] <dalek> specs: review: https://github.com/perl6/specs/commit/7ddb1f463d

[21:05] <lizmat> good night, FROGGS!

[21:09] *** kjs_ left
[21:13] *** skids left
[21:19] *** ssutch joined
[21:20] *** bartolin left
[21:20] *** pmqs joined
[21:20] *** telex left
[21:22] *** telex joined
[21:23] <Ven> Not even sure what fail vs die

[21:26] <Ven> hehe "THE_END"

[21:26] *** nbrown joined
[21:28] <Ven> kay, that's a bit more explanations WRT exceptions

[21:28] *** Ven left
[21:31] *** nbrown left
[21:32] *** SamuraiJack left
[21:36] <dalek> specs: 785ccf7 | (Elizabeth Mattijsen)++ | S16-io.pod:

[21:36] <dalek> specs: Added curupdir

[21:36] <dalek> specs: 

[21:36] <dalek> specs: As alternative to no-parent-or-current-test

[21:36] <dalek> specs: review: https://github.com/perl6/specs/commit/785ccf7d8f

[21:36] <dalek> specs: 6c22187 | (Elizabeth Mattijsen)++ | S32-setting-library/IO.pod:

[21:36] <dalek> specs: Part 2 of S32/IO revamp

[21:36] <dalek> specs: 

[21:36] <dalek> specs: Got as far as doing all of IO::Spec.  IO::Path and IO::Handle still to follow.

[21:36] <dalek> specs: review: https://github.com/perl6/specs/commit/6c221879ac

[21:37] * lizmat can't wait to start implementing all this  ^^^

[21:37] <lizmat> but first, some sleep

[21:37] <lizmat> so good night, #perl6!

[21:39] <[Coke]> lizmat++~~

[21:44] *** _slade_ joined
[21:47] *** rindolf left
[21:48] *** kaare_ left
[21:48] *** kjs_ joined
[21:49] *** kjs_ left
[21:51] *** kurahaupo1 joined
[21:59] *** brrt joined
[22:03] *** treehug88 left
[22:04] *** brrt left
[22:10] <japhb> If someone wanted to donate resources to "the Perl 6 effort", and preferred tax-deductible, who would they actually donate to?

[22:13] <[Coke]> the perl foundation, I would expect.

[22:13] *** kjs_ joined
[22:13] *** kjs_ left
[22:21] <japhb> In the form of, say, cloud platform services, what kind of hardware would we need to satisfy our needs in the short-to-medium term?  I got the feeling that "2 CPUs and 8 GB RAM" is probably the minimum just to run camelia and the rebuilders, but what about also doing spec test runs, local logins, and such at the same time?

[22:22] <japhb> (There's a small(!) chance I can interest someone in donating this kind of thing, but I want to be able to explain our real needs when I make my pitch.)

[22:25] *** dayangkun joined
[22:27] *** nbrown joined
[22:31] *** kjs_ joined
[22:31] <japhb> ... don't everyone shout at once.  :-)

[22:31] *** nbrown left
[22:33] <leont> "".IO.stat doesn't seem to work, is there any way to get to the parts of stat that don't have a filetest thingie?

[22:33] <leont> Or is that NYI?

[22:34] *** kjs_ left
[22:34] *** dayangkun left
[22:40] <japhb> Seems NYI.  The NQP interface for stat'ing seems to want to do one test at a time, rather than just grabbing a stat struct.  Portability reasons, maybe?

[22:41] *** skids joined
[22:49] *** ajr_ left
[23:20] *** Sqirrel left
[23:28] *** nbrown joined
[23:32] *** nbrown left
[23:35] *** rurban left
[23:48] *** aborazmeh joined
[23:52] *** Lelia_McKenzie47 joined
