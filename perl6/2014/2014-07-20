[00:06] *** thou joined
[00:11] *** thou left
[00:23] *** lichtkind left
[00:23] *** ivanshmakov left
[00:32] *** ivanshmakov joined
[00:34] <timotimo> yes, compose is nyi

[00:34] *** dmol left
[00:56] <cognominal> m:   my $ab = 'a b';  say @( << $ab c d $ab >> ).perl

[00:56] <camelia> rakudo-moar 866817: OUTPUT«("a", "b", ("c", "d"), "a", "b").list␤»

[00:56] *** silug left
[00:57] <cognominal> how do I flatten that?

[00:58] <cognominal> m:   my $ab = 'a b';  say (flat << $ab c d $ab >> ).perl

[00:58] <camelia> rakudo-moar 866817: OUTPUT«("a", "b", "c", "d", "a", "b").list␤»

[00:58] <cognominal> ok

[01:00] <cognominal> "Normal flat list context ignores parcel boundaries and flattens the list. Slice context turns any parcel objects into C<Seq> objects." Not sure what is a "normal flat context" mentionned in S04 though

[01:00] *** jnap joined
[01:01] *** jnap left
[01:02] *** oJustDust joined
[01:05] *** ivanshmakov left
[01:09] *** ivanshmakov joined
[01:09] *** silug joined
[01:20] *** FROGGS_ joined
[01:24] *** FROGGS left
[01:26] *** bjz joined
[01:34] *** Akagi201 joined
[01:51] *** klapperl_ joined
[01:54] *** klapperl left
[01:55] *** thou joined
[01:56] *** xenoterracide_ joined
[01:59] *** thou left
[01:59] *** vendethiel left
[01:59] *** vendethiel joined
[02:06] *** xenoterracide_ left
[02:06] *** xenoterracide_ joined
[02:10] *** nbrown left
[02:13] *** noganex joined
[02:16] *** noganex_ left
[02:31] *** nbrown joined
[02:36] *** BenGoldberg left
[02:40] *** kurahaupo joined
[02:52] *** oJustDust left
[02:59] *** rindolf joined
[03:03] *** kaare_ joined
[03:06] *** xenoterracide_ left
[03:22] *** xenoterracide_ joined
[03:32] *** xenoterracide_ left
[03:43] *** thou joined
[03:47] *** thou left
[03:48] *** nbrown left
[03:49] *** nbrown joined
[03:49] *** nbrown left
[04:39] *** kurahaupo left
[04:43] *** atroxaper joined
[05:04] *** rindolf left
[05:07] *** btyler left
[05:13] *** atroxaper left
[05:31] *** xragnar left
[05:31] *** xragnar joined
[05:31] *** thou joined
[05:36] *** thou left
[06:13] *** atroxaper joined
[06:18] *** atroxaper left
[06:22] *** zengargoyle joined
[06:24] *** zengargo1le left
[07:11] *** akaseki is now known as AnataNoImouto

[07:11] *** AnataNoImouto is now known as akaseki

[07:20] *** thou joined
[07:24] *** thou left
[07:31] *** Isp-sec joined
[07:39] *** brrt joined
[07:39] *** kweetal joined
[07:43] *** atroxaper joined
[07:47] *** atroxaper left
[08:07] <dalek> roast: c73bd06 | (Pepe Schwarz)++ | S32-exceptions/misc.t:

[08:07] <dalek> roast: Add corresponding ticket for two tests.

[08:07] <dalek> roast: review: https://github.com/perl6/roast/commit/c73bd06b23

[08:07] <dalek> roast: feeea52 | (Pepe Schwarz)++ | S32-exceptions/misc.t:

[08:07] <dalek> roast: Add test for RT #75320.

[08:07] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75320

[08:07] <dalek> roast: review: https://github.com/perl6/roast/commit/feeea52346

[08:07] <psch> ...with that, greetings #perl6 :)

[08:10] <vendethiel> o/

[08:11] *** Ven joined
[08:28] *** molaf joined
[08:33] *** darutoko joined
[08:37] *** Akagi201 left
[08:40] *** atroxaper joined
[08:45] *** virtualsue joined
[08:50] *** Isp-sec left
[08:51] *** lizmat joined
[08:54] *** atroxaper left
[08:56] <masak> good antenoon, #perl6

[08:56] <psch> masak o/

[08:57] *** molaf left
[08:57] *** woolfy joined
[09:08] *** thou joined
[09:12] *** thou left
[09:13] *** PotatoGim joined
[09:16] *** kaare_ left
[09:17] *** Ven left
[09:18] *** kivutar joined
[09:19] *** Ven joined
[09:20] <Ven> mmh, also, flip flop ranges don't get much description in the synopses

[09:22] <masak> they don't.

[09:22] <masak> the spectests are a much better source in that case.

[09:24] *** dakkar joined
[09:24] <psch> ff (and fff) are what .. did in scalar context in perl5, right?

[09:27] <masak> ff is what .. did in scalar context.

[09:27] <masak> fff is what ... did in scalar context.

[09:27] <masak> from a Perl 6 perspective, it's quite crazy that infix:<...> was wasted on infix:<fff> of all things :P

[09:28] *** dmol joined
[09:29] <psch> right, i unintentionally omitted "(and ...)", thanks

[09:30] <psch> it's crazy that perl5 uses ... as infix:<fff>? 

[09:32] <masak> it's crazy to waste such an accessible operator on such an unusual semantics.

[09:32] <masak> compare how versatile infix:<...> is in Perl 6.

[09:34] *** Ven left
[09:35] *** rindolf joined
[09:35] <FROGGS_> I... don't understand p6bench :/

[09:36] <masak> FROGGS_: are you able to condense something into a question?

[09:37] <FROGGS_> masak: I run a single microbenchmark, get a json output file with the timings, but the output html does not show the graph

[09:38] <FROGGS_> and also, the benchmark gets an SCALE argument as input, which results in a string length... the longer the string the slower it gets

[09:39] <FROGGS_> but my visible graph for one test looks like as is it is the slower the smaller the string is

[09:42] *** spider-mario joined
[09:46] *** spider-mario left
[09:47] *** Psyche^ joined
[09:49] *** beastd joined
[09:50] <FROGGS_> hmmm, these plots also start at 0/0... http://jnthn.net/perl6/bench/2014-07-15.html

[09:50] <FROGGS_> but why?

[09:51] *** spider-mario joined
[09:51] *** Psyche^_ left
[09:54] *** atroxaper joined
[09:54] *** brrt left
[09:58] *** atroxaper left
[09:59] <FROGGS_> ahh, it ignored the compile time, and that is what I wanna bench

[10:00] <masak> oh!

[10:01] <FROGGS_> and the bench script offers --ignore-compile, so I guessed the default wrong

[10:02] *** rindolf left
[10:08] *** kivutar left
[10:12] *** rindolf joined
[10:15] <vendethiel> masak: it's versatile, but I found out that it completly depends on what I'm doing. Sometimes I'll use it many times in one project, other times I won't use it at all

[10:19] <vendethiel> m: say if 'B' ff 'B' for <A B C B A>

[10:19] <camelia> rakudo-moar 866817: OUTPUT«␤␤␤␤␤»

[10:20] <vendethiel> m: .say if 'B' ff 'B' for <A B C B A> # erm

[10:20] <camelia> rakudo-moar 866817: OUTPUT«A␤B␤C␤B␤A␤»

[10:21] <vendethiel> so, basically, ff checks its rhs even though it just checked its lhs ?

[10:25] <masak> vendethiel: oh, for sure.

[10:28] <vendethiel> then, ... is probably what I'll be using most of the time

[10:29] <psch> m: .say if 'B' fff 'B' for <A B C B A>

[10:29] <camelia> rakudo-moar 866817: OUTPUT«A␤B␤C␤B␤A␤»

[10:29] <psch> i'm not really sure i understand those fully, anyway :)

[10:30] <vendethiel> the behavior on camelia is incorrect, fwiw

[10:32] *** brrt joined
[10:35] *** CuriousSpectator joined
[10:37] *** molaf joined
[10:39] *** CuriousSpectator left
[10:39] *** molaf left
[10:40] *** spider-mario left
[10:40] <masak> vendethiel: this is my favorite use of infix:<...> ever: https://github.com/masak/dlx-simple/blob/b430a62808b86224f2bbf38ff2215877e7566ed7/perl6/lib/Solver/DancingLinks.pm#L57

[10:41] <masak> vendethiel: re 'behavior on camelia is incorrect' -- you're assuming smartmatch semantics.

[10:41] <masak> vendethiel: (which is not the case in Perl 6)

[10:43] *** spider-mario joined
[10:44] <psch> S03:2929

[10:44] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_2929

[10:44] *** denis_boyun_ joined
[10:44] *** anaeem1 joined
[10:44] <psch> masak: that says "smartmatch against $_"

[10:45] <masak> huh -- so it does.

[10:46] <masak> and it's been that way since May last year. :)

[10:46] <masak> TimToady++

[10:51] *** araujo left
[10:54] *** denis_boyun_ left
[10:55] *** salv0 left
[10:56] *** thou joined
[11:01] *** thou left
[11:02] *** denis_boyun_ joined
[11:08] *** Akagi201 joined
[11:12] *** salv0 joined
[11:29] *** SamuraiJack joined
[11:36] *** telex left
[11:38] *** telex joined
[11:42] <colomon> if I want to parse an HTML file and extrace bits from it, is there a module for that?

[11:43] <FROGGS_> there is an XML parser

[11:44] *** atroxaper joined
[11:44] <masak> https://github.com/tony-o/perl6-html-parser-xml/

[11:44] <FROGGS_> oi, nice

[11:45] <colomon> I don't want an XML document at the end, though.  I just want to be be able to scrape this web site.

[11:46] <masak> ok, could you define "extract bits" a bit more clearly?

[11:46] <_sri> Mojo::DOM might be rather easy to port to perl6

[11:47] <colomon> masak: Here's (one of) the pages: http://thesession.org/recordings/387

[11:47] <colomon> I just need to get at the track listing so I can tag MP3 files with it.

[11:48] <masak> well, I see three paths:

[11:48] <colomon> I guess I could build a simple parser myself

[11:48] <masak> (a) hack -- forget HTML parsing, and just read line-by-line, pulling things out by regex

[11:48] *** atroxaper left
[11:48] <masak> (b) DOM -- parse the whole document, then access what you want with an XPath-like expression

[11:49] <_sri> with perl5 ;p

[11:49] <_sri> perl -Mojo -E 'g("http://thesession.org/recordings/387")->dom->find(".manifest-item-title a")->text->join("\n")->encode->say'

[11:49] <masak> (c) SAX -- find or build a parser that emits events on opening and closing tags, and use it to build a small state machine that picks up the content that you want.

[11:49] <masak> I guess what _sri++ just posted (which is awesome, by the way) is an instance of (b).

[11:49] <masak> we should totally have that in Perl 6.

[11:50] * masak is jealous, in a good way :)

[11:50] <_sri> :D

[11:53] <masak> Perl 5 has a number of things where it can brag superiority to Perl 6. Mojo is one of them.

[11:53] <_sri> the command line testing tool can do it too actually "mojo get http://thesession.org/recordings/387 ".manifest-item-title a" text"

[11:53] <masak> wow.

[11:55] * colomon is hacking up a simple grammar

[11:57] *** carlin joined
[12:02] <carlin> panda doesn't seem to want to build on Windows, as JSON::Tiny is failing tests with; No such method 'package' for invocant of type 'NQPAttribute'

[12:03] <masak> o.O

[12:03] <masak> carlin: could you catch the relevant output from that and put it up as a gist?

[12:10] <carlin> when I run them manually they work fine, but during panda bootstrap they fail

[12:10] <carlin> https://gist.github.com/carbin/0b3de07de9fa3b93b61a

[12:11] <carlin> I'll try compiling them and running the tests again in a bit

[12:11] <carlin> to see if that's the problem

[12:11] <masak> carlin++

[12:12] <masak> could be a precompilation problem, yes.

[12:20] *** brrt left
[12:25] *** jnap joined
[12:26] *** jnap left
[12:26] <FROGGS_> benchmark for the charrange fixes: http://froggs.de/perl6/charrange.html

[12:31] <timotimo> wowza.

[12:31] <timotimo> it's very hard to read, as all pre-charrange implementations just abort to the very left %)

[12:34] <dalek> nqp: a0842ef | (Tobias Leich)++ | / (9 files):

[12:34] <dalek> nqp: RT #67122 fix slowdown in large character ranges in regexes

[12:34] <dalek> nqp: 

[12:34] <dalek> nqp: On all platforms it built a string with every codepoint of the given range,

[12:34] <dalek> nqp: and when :i was in effect it built that string with uppercase and lowercase

[12:34] <dalek> nqp: codepoints to do a "cheap" character lookup later. Building this string is

[12:34] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=67122

[12:34] <dalek> nqp: very expensive and might even crash on long ranges.

[12:34] <dalek> nqp: Now it just checks if a char is within the range, (lower <= char <= upper).

[12:34] <dalek> nqp: 

[12:34] <dalek> nqp: Benchmark: http://froggs.de/perl6/charrange.html

[12:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a0842ef500

[12:34] <FROGGS_> timotimo: true, because they failed to turned invalid codepoints into chars :o)

[12:35] <FROGGS_> but one can see that there is a critical point, where the performance drops

[12:36] <timotimo> i can't really see anything there :)

[12:36] <FROGGS_> O.o

[12:36] <timotimo> i mean

[12:36] <FROGGS_> only look at 2014.07, and you'll see that it looks like /`

[12:36] <timotimo> ... i don't know

[12:37] <timotimo> yeah

[12:37] <timotimo> but the "angle" seems the same as in the charrange version, just further down

[12:37] <FROGGS_> on the last shown dot the moar/2014.07 is three times slower than moar/charrange

[12:38] <timotimo> ah, ok

[12:38] <FROGGS_> for the case insensitive version it is six times slower, which is kinda predictable :o)

[12:39] <timotimo> ya :)

[12:39] <FROGGS_> also, the charrange version has a constant compile+execution time of 0.055s, the 2014.07 takes about 0.3s on the longest range testable

[12:42] <FROGGS_> also:

[12:42] <FROGGS_> /usr/bin/time components/nqp-moar/2014.07/install/bin/nqp-m -e '"\c[50000]" ~~ /:i<[\c0..\c[50000]]>/'

[12:42] <FROGGS_> 0.24user 0.06system 0:00.30elapsed 99%CPU (0avgtext+0avgdata 219804maxresident)k

[12:42] <FROGGS_> compared to:

[12:42] <FROGGS_> /usr/bin/time components/nqp-moar/charrange/install/bin/nqp-m -e '"\c[50000]" ~~ /:i<[\c0..\c[50000]]>/'

[12:42] <FROGGS_> 0.04user 0.01system 0:00.06elapsed 98%CPU (0avgtext+0avgdata 23740maxresident)k

[12:42] <FROGGS_> the maxresident part

[12:44] <dalek> rakudo/nom: bbdcfd6 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[12:44] <dalek> rakudo/nom: bump nqp rev to get charrange improvements

[12:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bbdcfd668e

[12:44] *** thou joined
[12:45] *** BenGoldberg joined
[12:45] *** atroxaper joined
[12:46] <psch> https://github.com/rakudo/rakudo/pull/292 # flip-flop.t passes as before, with a bunch of "unitialized value of type Any in string context", but i think the tests actually rely on that

[12:46] <timotimo> oooooh

[12:48] <timotimo> psch: now i can't ~~ a different variable against a flipflop any more?

[12:48] <psch> timotimo: i haven't tested that.  do you have a snippet handy?

[12:49] <psch> timotimo: fwiw, ff and fff should smartmatch against $_, according to S03:2929

[12:49] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_2929

[12:49] *** thou left
[12:50] *** atroxaper left
[12:50] <psch> although the wording seems a bit unclear to me, "against $_" seems to imply $_ as rhs to ~~, which doesn't really make sense in my opinion

[12:52] <timotimo> oh

[12:52] <timotimo> so it's a spec question really

[12:52] <timotimo> can i $foo ~~ "A" ff "B"?

[12:52] *** kivutar joined
[12:52] <masak> interesting question.

[12:53] <psch> ~~ sets lhs as $_

[12:53] <psch> so that should still work

[12:53] <masak> I think that would end up involving two smartmatches, semantically.

[12:53] <masak> one from the ~~ and one from the ff

[12:54] <psch> $foo ~~ "A" ff "B" binds $_ to $foo for the ff and "A" and "B" get smartmatched against that

[12:54] <psch> that's how i understand it at least, from poking around in make_smartmatch for tr///

[12:54] <timotimo> hm, ok

[12:56] <masak> precedence problem.

[12:56] <masak> ff binds looser than ~~

[12:56] <masak> so you'd need parens.

[12:56] <masak> (I had to check S03 to be sure)

[13:00] <colomon> Grammar::Debugger still broken.  :(

[13:01] <carlin> that JSON::Tiny problem does only happen when compiled

[13:03] <carlin> and it's only JSON::Tiny itself. JSON::Tiny::Actions and ::Grammar still work

[13:03] <masak> and only on Windows?

[13:03] <masak> which backend? Moar?

[13:04] <carlin> moar, Windows 7 64-bit

[13:04] <carlin> is working fine in Linux 64

[13:05] <masak> it sounds to me like you have the perfect prerequisites for golfing the problem down.

[13:05] * masak attempts to build Rakudo/Moar on Windows 7 64-bit

[13:10] <masak> carlin: how did you install Rakudo?

[13:12] <carlin> git clone, strawberry perl, MS VC compiler

[13:13] <masak> ok.

[13:13] *** brrt joined
[13:18] *** denis_boyun_ left
[13:21] *** ivanshmakov left
[13:24] *** ivanshmakov joined
[13:25] *** chenryn joined
[13:26] *** ponbiki left
[13:26] *** chenryn left
[13:28] *** kurahaupo joined
[13:33] *** ponbiki joined
[13:33] *** ponbiki is now known as Guest94700

[13:35] *** BenGoldberg left
[13:37] <masak> building on Windows wasn't completely unproblematic. will continue later.

[13:37] <masak> walk &

[13:39] <carlin> yeah I find getting it to build on Windows isn't as straight-forward as on Unixy OSes

[13:39] <carlin> when I manually compile each module it works... so it must be something specific to what panda does

[13:43] <carlin> and `perl6 -e "use JSON::Tiny"` is enough to get the error

[13:51] <carlin> ah ha

[13:51] <carlin> it's the build order

[13:52] <carlin> panda compiles in the order: JSON::Tiny --> JSON::Tiny::Actions --> JSON::Tiny::Grammar

[13:52] <carlin> when I manually compile in that order it breaks, but if you do JSON::Tiny last it works fine

[13:53] <carlin> now that I've figured out that I can try and golf it :)

[13:55] <dalek> roast: bea8d27 | (Tobias Leich)++ | S05-metasyntax/charset.t:

[13:55] <dalek> roast: RT #67122 unfudge tests but use valid codepoints

[13:55] <dalek> roast: review: https://github.com/perl6/roast/commit/bea8d27bce

[13:55] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=67122

[13:59] *** denis_boyun_ joined
[13:59] *** dmol left
[14:02] *** guru joined
[14:03] *** guru is now known as Guest86561

[14:03] *** Guest86561 is now known as ajr_

[14:06] *** atroxaper joined
[14:06] *** chenryn joined
[14:08] <FROGGS_> .tell jnthn Is that a valid patch about rooting? https://gist.github.com/FROGGS/534f320aa548e12f75c4

[14:08] <yoleaux> FROGGS_: I'll pass your message to jnthn.

[14:08] *** brrt left
[14:13] *** zakharyas joined
[14:14] *** Akagi201 left
[14:18] * colomon has his script working now.  :)

[14:20] *** Akagi201 joined
[14:23] *** rindolf left
[14:24] *** chenryn left
[14:25] *** bjz left
[14:26] *** chenryn joined
[14:27] *** kivutar left
[14:31] *** brrt joined
[14:33] *** thou joined
[14:33] <carlin> masak: here's a golf: https://gist.github.com/carbin/a808d2eb91e1a2ea56ba

[14:34] *** denis_boyun_ left
[14:37] *** thou left
[14:49] <dalek> roast: ff5bd05 | (Tobias Leich)++ | S05-metasyntax/regex.t:

[14:49] <dalek> roast: RT #118985 test lexical regexes in classes

[14:49] <dalek> roast: review: https://github.com/perl6/roast/commit/ff5bd050c0

[14:49] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=118985

[14:52] <FROGGS_> carlin: does it still fail when you add a multi baz also?

[14:56] <carlin> FROGGS_: yes it does

[14:57] <FROGGS_> hmmm

[14:57] <FROGGS_> ohh, perhaps because Foo is a module and not also a class?

[14:59] <carlin> changing Foo to a class, the error becomes: No STable at index 5

[14:59] <FROGGS_> ó.ò

[15:00] <FROGGS_> you have recompiled both?

[15:00] <carlin> yip

[15:03] *** kivutar joined
[15:18] <dalek> roast: c6e4b9b | (Tobias Leich)++ | S02-types/hash.t:

[15:18] <dalek> roast: RT #117431 test hash itemization

[15:18] <dalek> roast: review: https://github.com/perl6/roast/commit/c6e4b9bc86

[15:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117431

[15:19] *** molaf joined
[15:24] <dalek> roast: 2e900e5 | (Tobias Leich)++ | S02-types/set.t:

[15:24] <dalek> roast: RT #117103 test metaop set assign

[15:24] <dalek> roast: review: https://github.com/perl6/roast/commit/2e900e5d4b

[15:24] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117103

[15:30] <dalek> roast: 4da54d8 | (Tobias Leich)++ | S05-metasyntax/litvar.t:

[15:30] <dalek> roast: RT #117091 test vars in :i in interpolation/assertion

[15:30] <dalek> roast: review: https://github.com/perl6/roast/commit/4da54d891f

[15:30] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117091

[15:40] *** chenryn left
[15:43] *** chenryn joined
[15:46] <carlin> it's panda's fault. On Windows it compiles the modules in a different order than on Linux

[15:47] <carlin> https://gist.github.com/carbin/d0dff5de558279350be6

[15:47] *** nbrown joined
[15:49] <[Coke]> masak: aha, but http://host07.perl6.com:8080/report/coke is all green! (of course, that's a pretty teeny single module)

[15:52] <flussence> I'm having a really un-fun day debugging this bit of code; can anyone take a minute to see if the test failures are reproducable (via panda install or whatever)? https://github.com/flussence/Test-Corpus/blob/24465a223e3059b37c9a905e42d630401782a409/lib/Test/Corpus.pm#L33

[15:53] <flussence> (it'll do different things depending on an env var, but right now *all* of them fail/crash/segfault...)

[15:54] <dalek> rakudo-star-daily: 55e661f | coke++ | log/ (14 files):

[15:54] <dalek> rakudo-star-daily: today (automated commit)

[15:54] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/55e661ffbe

[15:54] <dalek> perl6-roast-data: aba5c7c | coke++ | / (5 files):

[15:54] <dalek> perl6-roast-data: today (automated commit)

[15:54] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/aba5c7c989

[15:56] <[Coke]> ugh, I can't believe this quest has taken SIX months: https://questhub.io/realm/perl/quest/52e802c019eee0996000001b

[15:56] * [Coke] will finish it today, curses.

[15:57] *** kurahaupo left
[16:00] <[Coke]> .seen petdance

[16:00] <yoleaux> I haven't seen petdance around.

[16:00] *** chenryn left
[16:01] *** ajr_ left
[16:02] *** guru joined
[16:02] *** guru is now known as Guest75382

[16:02] *** Guest75382 is now known as ajr_

[16:10] <[Coke]> m: my %h; %h<bar><baz> := 'zoom'

[16:10] <camelia> rakudo-moar bbdcfd: ( no output )

[16:10] *** ajr_ left
[16:11] <[Coke]> m: my %h; %h<bar><baz> := 'zoom' ; say %h.perl

[16:11] <camelia> rakudo-moar bbdcfd: OUTPUT«("bar" => {"baz" => "zoom"}).hash␤»

[16:11] <flussence> ...do "»." things do real threading now? That'd explain these new failures...

[16:12] <flussence> "Internal error: zeroed target thread ID in work pass"

[16:12] *** btyler joined
[16:13] <timotimo> no, they do not

[16:14] *** ajr joined
[16:14] *** dmol joined
[16:14] <dalek> roast: b77befe | coke++ | S02-types/hash.t:

[16:14] <dalek> roast: mention RT in todo

[16:14] <dalek> roast: review: https://github.com/perl6/roast/commit/b77befe573

[16:14] *** ajr is now known as Guest64379

[16:19] <dalek> roast: e5dbea7 | coke++ | TODO:

[16:19] <dalek> roast: Add a note about RTs.

[16:19] <dalek> roast: review: https://github.com/perl6/roast/commit/e5dbea7826

[16:20] <carlin> I found the panda problem!

[16:20] <carlin> https://github.com/tadzik/panda/blob/master/lib/Panda/Builder.pm#L28

[16:20] <carlin> that doesn't account for the paths containing backslashes

[16:21] <carlin> so the it tries to find deps for things like "lib\JSON\Tiny" instead of "JSON::Tiny" and ends up compiling the modules in the wrong order

[16:21] *** thou joined
[16:22] <[Coke]> m: my %hash = :a(1), :b(2), :c(3), :d(4); my @slice := %hash<b c>; say @slice.perl

[16:22] <camelia> rakudo-moar bbdcfd: OUTPUT«(2, 3)␤»

[16:22] *** brrt left
[16:25] <[Coke]> m: my %hash = :a(1), :b(2), :c(3), :d(4); my @slice := %hash<b c>; say ((@slice,*) = <A B C D>).perl;

[16:25] <camelia> rakudo-moar bbdcfd: OUTPUT«(("A", "B"), *)␤»

[16:26] *** thou left
[16:26] <[Coke]> ^^ there's a test that expects that to be just "A", "B"; I suspect whatever handling in this case might have mutated since the test was written.

[16:26] * [Coke] updates the test to match camelia, since that seems reasonable here.

[16:26] <[Coke]> m: my %hash = :a(1), :b(2), :c(3), :d(4); my @slice := %hash<b c>; say ((@slice,*) = <A B C D>).perl; say @slice.perl;

[16:26] <camelia> rakudo-moar bbdcfd: OUTPUT«(("A", "B"), *)␤("A", "B")␤»

[16:32] *** Mouq left
[16:33] <dalek> roast: 28f9dba | coke++ | S32-hash/slice.t:

[16:33] <dalek> roast: Fix test - validating @slice, not @slice && *

[16:33] <dalek> roast: review: https://github.com/perl6/roast/commit/28f9dba94c

[16:35] * [Coke] wonders where this is defined:

[16:35] <[Coke]> m: import PROCESS <%ENV>;

[16:35] <camelia> rakudo-moar bbdcfd: ( no output )

[16:36] <[Coke]> r: import PROCESS <%ENV>;

[16:36] <camelia> rakudo-{parrot,jvm,moar} bbdcfd: ( no output )

[16:36] <[Coke]> (er, the import works, but there is no "%ENV" after import.

[16:40] *** Guest94700 is now known as ponbiki

[16:42] *** bjz joined
[16:43] <[Coke]> m: my $पहला = 1;

[16:43] <camelia> rakudo-moar bbdcfd: OUTPUT«===SORRY!=== Error while compiling /tmp/Txc2zns0pX␤Two terms in a row␤at /tmp/Txc2zns0pX:1␤------> my $पहल⏏[31mा = 1;␤    expecting any of:␤        scoped declarator␤        constraint␤        postfi…»

[16:47] *** SamuraiJack left
[16:47] <[Coke]> m: say uniname(0x2029)

[16:47] <camelia> rakudo-moar bbdcfd: OUTPUT«PARAGRAPH SEPARATOR␤»

[16:49] *** dmol left
[16:49] <dalek> roast: d4a402b | coke++ | S02- (2 files):

[16:49] <dalek> roast: Refer to newly-created RTs

[16:49] <dalek> roast: review: https://github.com/perl6/roast/commit/d4a402b5eb

[16:51] <[Coke]> m: $_ = "aaaa"; .++.say while 1

[16:51] <camelia> rakudo-moar bbdcfd: OUTPUT«(timeout)aaaa␤aaab␤aaac␤aaad␤aaae␤aaaf␤aaag␤aaah␤aaai␤aaaj␤aaak␤aaal␤aaam␤aaan␤aaao␤aaap␤aaaq␤aaar␤aaas␤aaat␤aaau␤aaav␤aaaw␤aaax␤aaay␤aaaz␤aaba␤aabb␤aabc␤aabd␤aabe␤aabf␤aabg␤aabh␤aabi␤aa…»

[16:52] <[Coke]> m: my @array = 1,2,3; @array>>\      .++ ; say @array

[16:52] <camelia> rakudo-moar bbdcfd: OUTPUT«Cannot find method 'postcircumfix:<( )>'␤  in sub METAOP_HYPER_CALL at src/gen/m-CORE.setting:17538␤  in block  at /tmp/1qE1RsIlEN:1␤␤»

[16:52] <[Coke]> m: my @array = 1,2,3; @array>>.++ ; say @array

[16:52] <camelia> rakudo-moar bbdcfd: OUTPUT«Cannot find method 'postcircumfix:<( )>'␤  in sub METAOP_HYPER_CALL at src/gen/m-CORE.setting:17538␤  in block  at /tmp/MYp0yFPj5U:1␤␤»

[16:52] <[Coke]> m: my @array = 1,2,3; @array>>.sqrt ; say @array

[16:52] <camelia> rakudo-moar bbdcfd: OUTPUT«1 2 3␤»

[16:55] *** SamuraiJack joined
[16:55] *** atroxaper left
[16:57] <dalek> roast: 657c54a | coke++ | S0 (2 files):

[16:57] <dalek> roast: Link to RT #122342

[16:57] <dalek> roast: review: https://github.com/perl6/roast/commit/657c54ac56

[16:57] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122342

[17:00] <masak> carlin: nice golf!

[17:00] <masak> carlin++

[17:02] <masak> carlin: heh, and I saw the different build order on Windows, and thought "it's probably because of the backslashes" :)

[17:02] <masak> carlin: well debugged!

[17:03] <masak> carlin, tadzik: that line, https://github.com/tadzik/panda/blob/master/lib/Panda/Builder.pm#L28 -- is there a way to have IO::Path handle some of that, for great compatibility?

[17:04] <masak> haha *sob* -- and that subroutine is straight out of ufo, so it's ultimately "my fault" ;(

[17:04] <[Coke]> m: use MONKEY_TYPING: augment class Code{method xyzzy(Code $x: *@y) { $x.(@y) }}; say (xyzzy { @^x }: 1, 2, 3)

[17:04] <camelia> rakudo-moar bbdcfd: OUTPUT«===SORRY!=== Error while compiling /tmp/ON_0uohFWk␤Confused␤at /tmp/ON_0uohFWk:1␤------> use MONKEY_TYPING⏏: augment class Code{method xyzzy(Code $␤    expecting any of:␤        statement list␤»

[17:04] <[Coke]> m: use MONKEY_TYPING; augment class Code{method xyzzy(Code $x: *@y) { $x.(@y) }}; say (xyzzy { @^x }: 1, 2, 3)

[17:04] <camelia> rakudo-moar bbdcfd: OUTPUT«===SORRY!=== Error while compiling /tmp/NyubD3Pthw␤Two terms in a row␤at /tmp/NyubD3Pthw:1␤------> x: *@y) { $x.(@y) }}; say (xyzzy { @^x }⏏: 1, 2, 3)␤    expecting any of:␤        postfix␤        statemen…»

[17:05] <[Coke]> ^^^ does that look like it should work?

[17:05] <[Coke]> m: use MONKEY_TYPING; augment class Code{method xyzzy(Code $x: *@y) { $x.(@y) }}; say (xyzzy { @^x },: 1, 2, 3)

[17:05] *** Guest64379 left
[17:05] <camelia> rakudo-moar bbdcfd: OUTPUT«===SORRY!=== Error while compiling /tmp/4vy8mNT5xI␤Two terms in a row␤at /tmp/4vy8mNT5xI:1␤------> : *@y) { $x.(@y) }}; say (xyzzy { @^x },⏏: 1, 2, 3)␤    expecting any of:␤        postfix␤        statemen…»

[17:06] <carlin> masak: my suggest fix was going to be this: https://github.com/carbin/panda/commit/ff45e43212ab3862c489e60efb527322656247ed

[17:06] <masak> [Coke]: what, wuh...

[17:06] <[Coke]> S02-lexical-conventions/unspace.t

[17:06] <masak> [Coke]: I don't see what that colon even tries to do there.

[17:07] <masak> carlin: yes, I like that as a stopgap solution.

[17:07] <[Coke]> there's a test for that first one, and a few variations of how to write the colon: ":", "\ :", and " :"

[17:07] *** guru joined
[17:07] *** guru is now known as ajr_

[17:07] <[Coke]> Looks like it was "we are passing a named argument, here, have a colon".

[17:07] <masak> carlin: but the underlying problem is we're treating an interesting problem (paths on different platforms) with blunt tools (strings and regexes)

[17:08] <[Coke]> oh. test says "indirect method calls"

[17:08] <masak> oh!

[17:08] <[Coke]> We don't have those, yes?

[17:08] <masak> and we're augmenting Code. I see.

[17:08] <masak> no, we don't have those, AFAIR.

[17:08] *** xinming joined
[17:08] <masak> it's the same as would allow the syntax `say $*ERR: 1, 2, 3`

[17:08] <[Coke]> killing test…

[17:09] <[Coke]> m: say $*ERR: 1, 2, 3

[17:09] <masak> [Coke]: um, as in "NYI".

[17:09] <camelia> rakudo-moar bbdcfd: OUTPUT«===SORRY!=== Error while compiling /tmp/M1gHkcgZzU␤Two terms in a row␤at /tmp/M1gHkcgZzU:1␤------> say $*ERR⏏: 1, 2, 3␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-in…»

[17:09] <masak> [Coke]: don't know if they should be killed.

[17:09] <masak> niecza: say $*OUT: 1, 2, 3

[17:09] <[Coke]> masak: indirect method calls appear only once in the spec, and not in a way that makes me think they're coming

[17:09] <camelia> niecza v24-109-g48a8de3: OUTPUT«===SORRY!===␤␤Invocant handling is NYI at /tmp/Y0_UecSxpU line 1 (EOF):␤------> say $*OUT: 1, 2, 3⏏<EOL>␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 …»

[17:10] <[Coke]> ok. I'll open a ticket and let someone else decide. no worries.

[17:10] <masak> [Coke]: I think I recall TimToady wistfully hoping for that feature.

[17:10] <masak> I do note that it doesn't have its own table row on http://perl6.org/compilers/features though.

[17:10] * masak adds one

[17:12] <dalek> roast: fd13f17 | coke++ | S02-lexical-conventions/unspace.t:

[17:12] <dalek> roast: link to RT #122343

[17:12] <dalek> roast: review: https://github.com/perl6/roast/commit/fd13f17f59

[17:12] <dalek> roast: 49d414d | coke++ | S02-lexical-conventions/unspace.t:

[17:12] <dalek> roast: Link to RT #122344

[17:12] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122343

[17:12] <dalek> roast: review: https://github.com/perl6/roast/commit/49d414d334

[17:12] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122344

[17:13] <carlin> https://github.com/tadzik/panda/pull/91 # there's a pull request for now

[17:13] <carlin> I'm not sure what a IO::Path solution would be at this point

[17:15] <dalek> features: 9847622 | (Carl Mäsak)++ | features.json:

[17:15] <dalek> features: [features.json] add "Indirect method calls"

[17:15] <dalek> features: 

[17:15] <dalek> features: Which currently are Not Yet Implemented on Niecza as well as Rakudo, all backends.

[17:15] <dalek> features: review: https://github.com/perl6/features/commit/9847622183

[17:16] *** SamuraiJack left
[17:17] <masak> carlin: me neither.

[17:17] <dalek> roast: 75cd875 | coke++ | S02-literals/char-by-name.t:

[17:17] <dalek> roast: link to RT #117683

[17:17] <dalek> roast: review: https://github.com/perl6/roast/commit/75cd875600

[17:17] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117683

[17:17] <masak> but I think the long-term right solution is to delegate to IO::Path.

[17:17] <masak> because this is a problem that should be solved centrally, not in userland.

[17:18] <carlin> it would be a much nicer solution

[17:18] <masak> in fact, why not have a 'path-to-module' builtin?

[17:19] *** dmol joined
[17:19] *** nbrown left
[17:19] * masak admires the pure evil of RT #122325

[17:19] * synopsebot Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122325

[17:19] <masak> FROGGS++

[17:20] <masak> oh, maybe FROGGS-- didn't originate it; only reported it.

[17:20] <dalek> roast: aa03827 | coke++ | S02-literals/listquote-whitespace.t:

[17:20] <dalek> roast: Link to RT #122285

[17:20] <dalek> roast: 

[17:20] <dalek> roast: (this makes it easier to skip these emit lines when looking for TODOs)

[17:20] <dalek> roast: review: https://github.com/perl6/roast/commit/aa03827897

[17:20] *** ajr_ left
[17:20] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122285

[17:20] <masak> sorear++ is the author of that test.

[17:21] *** denis_boyun_ joined
[17:21] <masak> it also says "Test primarily aimed at Niecza", but it seems to have caught a Parrotbug. nice.

[17:21] * [Coke] wonders if he can get the non RT/NYI/unspecced fudges down under 800 today.

[17:21] *** SamuraiJack joined
[17:21] *** guru joined
[17:22] *** guru is now known as Guest38578

[17:22] *** Guest38578 is now known as ajr_

[17:22] <masak> r: for 1, 2, 3 { sub foo($x = next) { $x }; say foo }; say "alive"

[17:22] <camelia> rakudo-{jvm,moar} bbdcfd: OUTPUT«alive␤»

[17:22] <camelia> ..rakudo-parrot bbdcfd: OUTPUT«alive␤Nominal type check failed for parameter '$x'; expected Any but got Mu instead␤»

[17:23] <masak> haha, Parrot, you silly.

[17:23] <masak> r: sub { sub foo($x = return) { $x }; say foo }(); say "alive"

[17:23] <camelia> rakudo-jvm bbdcfd: OUTPUT«alive␤»

[17:23] <camelia> ..rakudo-moar bbdcfd: OUTPUT«Attempt to return outside of any Routine␤  in block  at src/gen/m-CORE.setting:556␤  in sub foo at /tmp/tmpfile:1␤  in sub  at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[17:23] <camelia> ..rakudo-parrot bbdcfd: OUTPUT«alive␤Nominal type check failed for parameter '$x'; expected Any but got Mu instead␤»

[17:23] <masak> same trick works in many shapes.

[17:23] <masak> hey, but that's a moarbug right there...

[17:23] <[Coke]> masak: check out https://github.com/perl6/roast/blob/master/S02-names-vars/variables-and-packages.t#L93

[17:23] *** bowtie_ left
[17:24] * masak submits moarbug

[17:24] <masak> [Coke]: yeees...?

[17:24] <[Coke]> looks like it's expecting the first call to foo() to be undefined? 

[17:25] <masak> because $a is

[17:25] <masak> makes sense to me.

[17:25] <masak> at least that's one way I could've argued it.

[17:25] <masak> (the other way being that foo() returns 0 the first time)

[17:25] <[Coke]> m: say foo; my $a; sub foo() { $a++}

[17:25] <camelia> rakudo-moar bbdcfd: OUTPUT«0␤»

[17:26] <masak> right, that way.

[17:26] <[Coke]> m: say foo, foo, foo; my $a; sub foo() { $a++}

[17:26] <camelia> rakudo-moar bbdcfd: OUTPUT«012␤»

[17:26] *** atroxaper joined
[17:26] <[Coke]> so if you could argue it either way, what next? :)

[17:26] <[Coke]> spec question?

[17:26] <[Coke]> or let jnthn++ decide?

[17:28] <[Coke]> (there are 3 "nom regressions" in that file which are all basically the same issue)

[17:28] <FROGGS_> masak: aye, I've only filed RT #122325

[17:28] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122325

[17:29] <FROGGS_> eww, t/spec/S02-magicals/args.t fails only in m-spectests here, and is a speshbug :(

[17:29] <[Coke]> masak: opening a ticket on that one.

[17:30] <masak> [Coke]: "spec question" sounds good to me.

[17:30] *** atroxaper left
[17:32] *** SamuraiJack left
[17:33] <masak> [Coke]++ # opening RT tickets for failing tests

[17:33] <masak> I know that can't be fun work, but it's *very useful*.

[17:34] <dalek> roast: 9c096d9 | coke++ | S02-names-vars/variables-and-packages.t:

[17:34] <dalek> roast: link to RT #122346

[17:34] <dalek> roast: review: https://github.com/perl6/roast/commit/9c096d9ebe

[17:34] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122346

[17:35] <masak> re flapping tests, by the way: http://martinfowler.com/articles/nonDeterminism.html -- required reading. I've always liked this one.

[17:35] *** spider-mario left
[17:38] *** spider-mario joined
[17:38] *** Akagi201 left
[17:39] *** Akagi201 joined
[17:39] <dalek> roast: 5717a50 | coke++ | S02-types/capture.t:

[17:39] <dalek> roast: Reduce scope of skip

[17:39] <dalek> roast: review: https://github.com/perl6/roast/commit/5717a50480

[17:40] <[Coke]> r: my buf8 $buffer = ('A' .. 'Z').map({sprintf('%08d', .ord)}).cat;

[17:40] <camelia> rakudo-{parrot,jvm,moar} bbdcfd: OUTPUT«No such method 'cat' for invocant of type 'List'␤  in block  at /tmp/tmpfile:1␤␤»

[17:41] *** brrt joined
[17:43] <[Coke]> masak: how do you feel about fudges in files that aren't in t/spectest.data ?

[17:43] *** Akagi201 left
[17:44] <[Coke]> I am leaning towards a "keep it in a branch if you're working on a new feature" policy so that master is "clean". (and I don't spend time trying to fix directives for stuff that is obviously not done.)

[17:47] *** carlin left
[17:50] *** lizmat left
[17:50] *** xenoterracide_ joined
[17:51] <[Coke]> m: my Complex $namcu =1.3; say $namcu.WHAT;

[17:51] <camelia> rakudo-moar bbdcfd: OUTPUT«Type check failed in assignment to '$namcu'; expected 'Complex' but got 'Rat'␤  in block  at /tmp/RwaUOyDQ9D:1␤␤»

[17:52] *** ajr_ left
[17:53] *** woolfy left
[17:54] <[Coke]> m: my Module $a;

[17:54] <camelia> rakudo-moar bbdcfd: OUTPUT«===SORRY!===␤Type 'Module' is not declared␤at /tmp/S0G6RhnFs9:1␤------> my Module⏏ $a;␤Malformed my␤at /tmp/S0G6RhnFs9:1␤------> my ⏏Module $a;␤    expecting any of:␤        scoped…»

[17:55] <FROGGS_> wth... I closed a bunch of RT tickets and now it grew again :o(

[17:56] <FROGGS_> eight more tickets

[17:56] *** nbrown joined
[17:56] <[Coke]> Only about 800 more to go.

[17:56] <[Coke]> (there's lots of stuff with no tickets in roast)

[17:57] *** zakharyas left
[17:57] *** bowtie joined
[17:58] *** bowtie is now known as Guest35753

[18:01] <[Coke]> do we have a standard way to refer to github issues? We have "RT #foo" for RTs...

[18:01] *** mr-foobar left
[18:01] <[Coke]> MoarVM #87 ?

[18:02] *** slavik left
[18:04] *** mr-foobar joined
[18:05] *** nbrown left
[18:06] *** denis_boyun_ left
[18:07] *** denis_boyun joined
[18:09] *** thou joined
[18:10] *** Ven joined
[18:11] *** denis_boyun___ joined
[18:12] *** denis_boyun left
[18:14] *** thou left
[18:26] *** Sqirrel joined
[18:31] *** ventica joined
[18:33] *** hoverboard joined
[18:40] <dalek> roast: 9ef729f | coke++ | S02-types/declare.t:

[18:40] <dalek> roast: link to RT; use "NYI"

[18:40] <dalek> roast: review: https://github.com/perl6/roast/commit/9ef729f9f3

[18:40] <dalek> roast: a63adf3 | coke++ | S32-str/lc.t:

[18:40] <dalek> roast: use <system> #<number>

[18:40] <dalek> roast: review: https://github.com/perl6/roast/commit/a63adf3587

[18:42] *** Ven left
[18:47] <masak> [Coke]: keeping master clean is something I'm 100% on board with.

[18:47] <masak> [Coke]: fudges in un-spectest.data'd files -- no particular opinion.

[18:48] <[Coke]> ok. Plenty of other stuff for me to clean in the meantime.

[18:49] <[Coke]> er:

[18:49] <[Coke]> m: "what the" ~~ / (<[a..z]>)+ <ws> (\d+)? <ws> (<[a..z]>)+ / ; say $/;

[18:49] <camelia> rakudo-moar bbdcfd: OUTPUT«No such method 'from' for invocant of type 'Any'␤  in method caps at src/gen/m-CORE.setting:12942␤  in method gist at src/gen/m-CORE.setting:12973␤  in sub say at src/gen/m-CORE.setting:13793␤  in block  at /tmp/KdkIh8lqiA:1␤␤»

[18:50] <[Coke]> the +'s are in the wrong place, but that seems like an odd error.

[18:50] <[Coke]> (same error if you move them inside the ()'s, so that's not it..

[18:50] <FROGGS_> now that is weird

[18:52] *** Ven joined
[18:52] <FROGGS_> m: "what the" ~~ / (<[a..z]>)+ <ws> (\d+)? <ws> (<[a..z]>)+ / ; say $/.perl

[18:52] <camelia> rakudo-moar bbdcfd: OUTPUT«Match.new(orig => "what the", from => 0, to => 8, ast => Any, list => ([Match.new(orig => "what the", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "what the", from => 1, to => 2, ast => Any, list => ().list, ha…»

[19:00] *** hoverboard is now known as cholby

[19:00] *** cholby is now known as hoverboard

[19:01] * [Coke] wonders why S01-perl-5-integration/basic.t is in t/spectest.data - we skip everything but a few simple assignments.

[19:02] <[Coke]> (everything is fudged AND skip_rest'd)

[19:03] <[Coke]> FROGGS_: that looks like it's your file. How to proceed? (leave it alone? remove from the list of things to test..?)

[19:04] <FROGGS_> I'd rip it out because I that is something fits in star but not the compiler itself

[19:05] *** zakharyas joined
[19:08] *** darutoko left
[19:09] *** Akagi201 joined
[19:11] * Ven wrote a little something about ff vs fff, but still think it might be confusing

[19:13] *** denis_boyun___ left
[19:14] *** Akagi201 left
[19:15] *** denis_boyun_ joined
[19:16] <Ven> timotimo: erm, are the `orelse` tests okay now :P ?

[19:17] <dalek> rakudo/nom: a8cfa19 | coke++ | t/spectest.data:

[19:17] <dalek> rakudo/nom: Remove file that runs no tests.

[19:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8cfa19d39

[19:19] <Ven> 600 lines already, uh.

[19:22] *** anaeem1 left
[19:22] *** denis_boyun_ left
[19:23] *** denis_boyun_ joined
[19:33] *** denis_boyun_ left
[19:33] *** dakkar left
[19:35] <avuserow> [Coke]++ # unending test improvements

[19:36] <FROGGS_> masak: I've got a patch for RT #122332

[19:37] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122332

[19:37] <[Coke]> avuserow: I think they are ending. :)

[19:38] <Ven> It's "fun" to read RTs from 2008, even back then it was really different

[19:38] <masak> FROGGS_: nice!

[19:41] <dalek> roast: f35b982 | (Tobias Leich)++ | S13-overloading/metaoperators.t:

[19:41] <dalek> roast: RT #122332 test for sub as infix op between []

[19:41] <dalek> roast: review: https://github.com/perl6/roast/commit/f35b982ff4

[19:41] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122332

[19:41] <Ven> (reading stuff from 2002/2003 perl monks posts and seeing now ... well!)

[19:43] *** brrt left
[19:44] *** denis_boyun_ joined
[19:45] <masak> ooh, perlmonks posts from 2002/2003? what were people saying? :)

[19:46] <Ven> well, I think I linked it back then (I was barely starting on perl 6, and either you or moritz++ pointed out it was from 2003 ..)

[19:46] <masak> ok. :) I don't remember that.

[19:46] <Ven> I can probably find it again, though.

[19:46] <masak> would be interesting, if it's not too onerous.

[19:47] <Ven> (can you filter by year on google ?)

[19:47] <masak> no idea.

[19:47] <Ven> http://www.perlmonks.org/index.pl?node_id=253366 found it :)

[19:47] * masak looks

[19:48] <Ven> ha, it still had the diamond :P

[19:48] <masak> oh, I remember using the diamond, I think.

[19:48] <Ven> it had ??::, $x+(-1)

[19:48] <masak> it was cute that =<> looked like a fish.

[19:48] <Ven> damn, that keyboard's enter is not where I think it is.

[19:48] <masak> or a jellyfish or something.

[19:49] *** kaare_ joined
[19:49] <Ven> but it already had any/none back then ... Other languages are so far behind :P

[19:49] <dalek> rakudo/nom: fc0cbb1 | (Tobias Leich)++ | src/Perl6/ (2 files):

[19:49] <dalek> rakudo/nom: fix sub as infix op like in `2 [&add] 4`

[19:49] <dalek> rakudo/nom: 

[19:49] <dalek> rakudo/nom: We have to wrap it in another QAST::Op, so that additional arguments to

[19:49] <dalek> rakudo/nom: the infix sub will be pushed to the added QAST::Op, and not to the QAST::Op

[19:49] <dalek> rakudo/nom: that does the lookup of the &add sub we wanna call.

[19:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc0cbb138c

[19:49] *** zengargoyle left
[19:52] <Ven> also, http://www.perl.com/pub/2003/04/p6pdigest/20030427.html

[19:52] <avuserow> what is the state of moarvm support for star? I'm poking around with a star release and wondering if I can do my testing on moarvm first for speed, and then parrot (and jvm if needed?)

[19:52] <Ven> avuserow: I think moar is in

[19:53] <avuserow> (poking around with trying to *make* a 2014.07 star release)

[19:54] *** zengargoyle joined
[19:55] *** denis_boyun_ left
[19:55] <masak> "Of cours"Of course as Perl 6 doesn't exist yet [...]" -- it *did*, but the PR efforts from Parrot's side were nonexistent.

[19:56] *** zakharyas left
[19:57] * masak does a quick translation of that script to Today's Perl 6

[19:58] *** thou joined
[20:02] *** thou left
[20:06] *** Ven left
[20:08] *** Ven joined
[20:10] *** Akagi201 joined
[20:11] <dalek> rakudo/nom: 9a9f357 | (Pepe Schwarz)++ | src/Perl6/Grammar.nqp:

[20:11] <dalek> rakudo/nom: Added reason "Missing semicolon" for RT #75230.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a9f357fea

[20:11] <dalek> rakudo/nom: aa15259 | (Tobias Leich)++ | src/Perl6/Grammar.nqp:

[20:11] <dalek> rakudo/nom: Merge pull request #291 from peschwa/rt75230

[20:11] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75230

[20:11] <dalek> rakudo/nom: 

[20:11] <dalek> rakudo/nom: Added reason "Missing semicolon" for RT #75230.

[20:11] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75230

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa15259244

[20:14] <dalek> roast: 6811e52 | (Pepe Schwarz)++ | S32-exceptions/misc.t:

[20:14] <dalek> roast: Match the reason, compare Rakudo PR #291 and commit aa15259.

[20:14] <dalek> roast: review: https://github.com/perl6/roast/commit/6811e5268e

[20:14] <psch> thanks FROGGS++

[20:14] *** Akagi201 left
[20:15] <FROGGS_> ahh, I was about to adjust the test :o)

[20:15] <masak> ok, here's my translation: https://gist.github.com/masak/f74ce61b40ea996b9583

[20:15] <masak> haven't tried to run it yet -- trying now :)

[20:15] <psch> FROGGS_: you can update the ticket, if you want :)

[20:16] <FROGGS_> psch: was about to ask that :o)

[20:16] <FROGGS_> psch: done

[20:19] <FROGGS_> .u a

[20:19] <yoleaux> U+0061 LATIN SMALL LETTER A [Ll] (a)

[20:21] <masak> ok, it runs now, a couple of changes later.

[20:21] <masak> it doesn't advance the board, though.

[20:22] <Ven> (why can't we have package foo; like in p5 ?)

[20:22] * Ven is reading S10 to explain modules in his learnxiny

[20:23] <Ven> masak: you decided to go with fixed pos, uh ?

[20:24] <FROGGS_> Ven: package foo; is disallowed to detect P5 early

[20:24] <Ven> (instead of for ^$.dimension->$x ... for ^$.dimension->$y, why not ^$.dimension X ^$.dimension ?)

[20:24] <masak> no real reason.

[20:24] <masak> just staying close to the original on that one.

[20:24] <Ven> FROGGS_: seems like something quite useful, though ? maybe allow it if there's a use v6 ?

[20:25] <masak> Ven: I think X still has a bit of a performance penalty, too. not 100% sure, though.

[20:25] <Ven> masak: fwiw, https://github.com/Nami-Doc/GameOfLife/blob/master/gol.pl, my first perl 6 script

[20:25] <Ven> when I first ran it, it ran at maybe 1 fps :P

[20:26] <FROGGS_> Ven: you can still use module Foo; or class Foo;

[20:26] <masak> ok, now it works.

[20:26] <Ven> FROGGS_: why have both package and module, then ?

[20:26] <Ven> (it looks like s10 is missing some bits)

[20:26] <FROGGS_> m: package Foo { }

[20:26] <camelia> rakudo-moar bbdcfd: ( no output )

[20:26] <FROGGS_> I dunno, really

[20:26] <Ven> uh

[20:27] <[Coke]> I think blaming "the pr efforts from parrot's side" is... not right.

[20:27] <masak> having both package and module always confused me, too.

[20:28] <Ven> so, humm, nobody deep into perl 6 really knows why :P ? *waits for somebody else to pop up with the answer*

[20:29] <masak> I think 'package' is there mostly for side-compat with Perl 5.

[20:29] <Ven> makes sense. But then, I'll probably avoid explaining it.

[20:30] <dalek> roast: 425f65c | (David Warring [email@hidden.address] | / (2 files):

[20:30] <dalek> roast: Corrected and unfudged tests. Added proto to multisub example.

[20:30] <dalek> roast: review: https://github.com/perl6/roast/commit/425f65cabc

[20:30] <masak> sounds good to me.

[20:33] *** hoverboard is now known as moistcherry

[20:33] *** tgt joined
[20:34] *** avuserow left
[20:34] *** avuserow joined
[20:34] <masak> Ven: very interesting reading. I read the rest of the thread too.

[20:37] <dalek> nqp: fc99946 | (Tobias Leich)++ | src/QRegex/P6Regex/Actions.nqp:

[20:37] <dalek> nqp: RT #122245 fix \C[...] (negated \c)

[20:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fc99946fee

[20:37] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122245

[20:47] *** virtualsue left
[20:49] *** virtualsue joined
[20:50] <dalek> roast: 9e3a259 | (David Warring [email@hidden.address] | integration/advent2009-day14.t:

[20:50] <dalek> roast: is() => is_deeply() on type tests

[20:50] <dalek> roast: review: https://github.com/perl6/roast/commit/9e3a2594be

[20:55] <dalek> rakudo/nom: 97882c3 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[20:55] <dalek> rakudo/nom: bump nqp rev for <[\C[...]]> fix

[20:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/97882c3191

[20:56] <dalek> roast: 29abad5 | (Tobias Leich)++ | S05-mass/named-chars.t:

[20:56] <dalek> roast: RT #122245 unfudge now passing \C tests

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/29abad5d52

[20:56] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122245

[20:57] <Ven> ooh, around 66 fudges ! FROGGS_ ++

[20:57] <psch> m: say "abc" ~~ s/c$// # uhm...

[20:57] <camelia> rakudo-moar fc0cbb: OUTPUT«Cannot modify an immutable Str␤  in sub infix:<=> at src/gen/m-CORE.setting:16978␤  in block  at /tmp/BP7SmnVwsQ:1␤␤»

[20:57] * psch duhs

[20:58] <psch> m: my $a ="abc"; say $a ~~ s/c$// # uhm...

[20:58] <camelia> rakudo-moar fc0cbb: OUTPUT«True␤»

[20:58] <Ven> psch: well, you clearly assigned to this poor `"abc"`

[20:58] *** akaseki left
[20:58] <psch> m: my $a ="abc"; $a ~~ s/c$//; say $a # uhm...

[20:58] <camelia> rakudo-moar fc0cbb: OUTPUT«ab␤»

[20:58] <psch> that's curious

[20:58] <psch> m: my $a ="abc"; $a ~~ s/c$/i/; say $a 

[20:58] <camelia> rakudo-moar fc0cbb: OUTPUT«===SORRY!=== Error while compiling /tmp/VYmw2fyuzc␤Malformed replacement part; couldn't find final /␤at /tmp/VYmw2fyuzc:1␤------> my $a ="abc"; $a ~~ s/c$/i/; say $a⏏<EOL>␤    expecting any of:␤        postf…»

[20:58] <psch> aha

[20:59] <psch> suddenly $/

[20:59] <psch> m: my $a ="abc"; $a ~~ s/c$ /i/; say $a 

[20:59] <camelia> rakudo-moar fc0cbb: OUTPUT«abi␤»

[21:00] *** Ven left
[21:00] *** moistcherry left
[21:01] <psch> for reference, that came from RT #82108 but clearly has another problem than the one in the ticket

[21:01] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=82108

[21:01] *** ventica left
[21:02] <dalek> roast: 2946712 | (David Warring [email@hidden.address] | integration/advent2009-day17.t:

[21:02] <dalek> roast: tweak. 'our' no longer needed

[21:02] <dalek> roast: review: https://github.com/perl6/roast/commit/2946712f21

[21:03] *** akaseki joined
[21:08] *** nbrown joined
[21:14] *** tgt left
[21:15] *** spider-mario left
[21:17] *** kivutar left
[21:19] <masak> m: my $a = "abc"; say $a ~~ /c$/

[21:19] <camelia> rakudo-moar fc0cbb: OUTPUT«｢c｣␤␤»

[21:19] <masak> arguably, that's a bit inconsistent.

[21:19] <masak> if // can handle $ appearing right by the end of the pattern, why not s/// ?

[21:28] *** gfldex left
[21:28] <psch> m: my $a = 'abc'; $a ~~ s/c$/ /; say $a.perl # this is fine too

[21:28] <camelia> rakudo-moar fc0cbb: OUTPUT«"ab "␤»

[21:29] <psch> masak: i agree, it should work

[21:32] <masak> psch: feel free to submit a rakudobug about it.

[21:32] *** SevenWolf joined
[21:34] <psch> masak: i'll do that; i'll look at it a bit more, but i doubt i'll get it today; and even if, having a ticket is better than not

[21:35] <masak> aye -- ticket regardless ;)

[21:37] *** kaare_ left
[21:46] *** thou joined
[21:51] *** thou left
[21:57] *** kurahaupo joined
[22:11] *** kweetal left
[22:19] <masak> 'night, #perl6

[22:26] *** hoverboard joined
[22:27] *** nbrown left
[22:27] *** psch left
[22:27] *** nbrown joined
[22:31] *** atroxaper joined
[22:35] *** xenoterracide_ left
[22:36] *** atroxaper left
[22:37] *** beastd left
[22:39] *** labster left
[22:39] *** aoseki joined
[22:41] *** akaseki left
[22:46] <[Coke]> m: 0.1234567891011121314151617181920.Rat.say

[22:46] <camelia> rakudo-moar 97882c: OUTPUT«0.123456789101112129891646418400␤»

[22:47] <[Coke]> m: 0.1234567891011121314151617181920.Rat.WHAT.say

[22:47] <camelia> rakudo-moar 97882c: OUTPUT«(Rat)␤»

[22:47] <[Coke]> m: 0.1234567891011121314151617181920.Rat.perl.say

[22:47] <camelia> rakudo-moar 97882c: OUTPUT«0.123456789101112129891646418400␤»

[22:48] <Ulti_> what's the difference between str and Str?

[22:48] <Ulti_> other than one is native :P

[22:48] <Ulti_> how is str represented differently?

[22:49] <[Coke]> m: my str $hi;

[22:49] <camelia> rakudo-moar 97882c: ( no output )

[22:49] <[Coke]> huh, I was guessing NYI

[22:51] <Ulti_> http://jnthn.net/perl6/bench/2014-07-13.html it's in some of the code examples in the benchmark of jnthns string magic

[22:51] <[Coke]> in general, natives are immutable and are represented with native data types. (I am not sure if str follows that latter)

[22:52] <Ulti_> well the value might not be mutable but the variable is getting changed

[22:52] <Ulti_> for_concat_2_native vs the non native one

[22:53] <Ulti_> I have some tests that take 35 seconds atm that might get suddenly fast if just switching to 'str' instead of 'Str' works out

[22:54] *** labster joined
[22:54] <Ulti_> though the concatenation isn't in a for loop but I can just make it like that

[22:58] *** nbrown left
[23:06] <dalek> roast: def56cb | (David Warring [email@hidden.address] | integration/advent2009-day18.t:

[23:06] <dalek> roast: enable/unfudge parametric role tests

[23:06] <dalek> roast: review: https://github.com/perl6/roast/commit/def56cbf16

[23:27] *** bjz left
[23:34] *** thou joined
[23:36] <timotimo> oh, huh. we haven't had a Rakudo Star release since 2014.04?

[23:39] *** thou left
[23:40] *** kurahaupo left
[23:45] *** nbrown_ joined
[23:50] *** xenoterracide_ joined
[23:51] *** nbrown_ left
[23:51] *** akaseki joined
[23:52] *** aoseki left
[23:57] *** nbrown joined
