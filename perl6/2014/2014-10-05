[00:16] *** Hor|zon joined
[00:20] *** Hor|zon left
[00:24] *** MikeFair_away is now known as MikeFair

[00:47] *** Exodist left
[01:11] *** Mso150 left
[01:23] *** Mso150 joined
[01:35] *** gtodd left
[01:43] *** MikeFair is now known as MikeFair_away

[01:49] *** FROGGS_ joined
[01:52] *** FROGGS left
[02:02] *** noganex_ joined
[02:03] *** vendethiel- joined
[02:04] *** vendethiel left
[02:05] *** noganex left
[02:11] *** vendethiel joined
[02:13] *** vendethiel- left
[02:17] *** Hor|zon joined
[02:21] *** jepeway_ left
[02:21] *** Hor|zon left
[02:27] *** _slade_ left
[02:27] *** _slade_ joined
[02:28] *** kurahaupo left
[02:39] *** beastd left
[02:51] *** Exodist joined
[03:00] *** noganex joined
[03:02] *** noganex_ left
[03:19] *** pat_js joined
[03:25] *** gtodd joined
[03:37] *** BenGoldberg left
[04:18] *** Hor|zon joined
[04:22] *** Hor|zon left
[04:39] *** rindolf joined
[04:44] *** ggoebel1111110 joined
[04:47] *** ggoebel111119 left
[04:59] *** petercommand joined
[05:22] *** fhelmberger joined
[05:26] *** fhelmberger left
[05:40] *** MikeFair_away left
[05:47] *** rurban joined
[05:58] *** bjz left
[05:58] *** bjz joined
[06:03] *** darutoko joined
[06:07] *** notfix is now known as xfix

[06:19] *** Hor|zon joined
[06:24] *** Hor|zon left
[06:27] *** yeahnoob joined
[06:30] *** yeahnoob left
[06:59] *** SamuraiJack_ joined
[07:02] <masak> alohamorning, #perl6

[07:02] *** ribasushi left
[07:12] <dalek> book: 0f87d07 | masak++ | src/regexes.pod:

[07:12] <dalek> book: fix quantifier modifier thinko

[07:12] <dalek> book: 

[07:12] <dalek> book: Discovered by 宋文泰 in https://rt.perl.org/Ticket/Display.html?id=122904

[07:12] <dalek> book: review: https://github.com/perl6/book/commit/0f87d07103

[07:13] *** ribasushi joined
[07:17] *** rurban left
[07:17] *** rurban joined
[07:34] <masak> a quick skim of http://www.cs.cmu.edu/~aldrich/papers/objects-essay.pdf indicates that it'd be of interest to people here.

[07:35] <masak> HN discussion: https://news.ycombinator.com/item?id=8411225

[07:38] <vendethiel> o/.

[07:47] * masak .oO( is that a ping-pong ball? don't crush it! )

[07:49] <rurban> left a comment at HN

[07:50] <rurban> defending functional over objects of course

[07:51] <masak> uhm.

[07:52] <masak> I really really like functional, but I'm not sure I believe it subsumes OO to the point of making it irrelevant.

[07:52] <masak> in the end it comes down to different focus.

[07:53] <rurban> sure it does. it's not irrelevant because its standard industry practice. worse is better. but is not inevitable. see e.g. CLOS

[07:54] <rurban> langs without even a lambda or method dispatch on arg types are doomed to have only objects

[07:55] <rurban> in potion objects are implemented as functions e.g. even variables are functions

[07:58] *** spider-mario joined
[07:59] *** spider-mario left
[08:02] *** kurahaupo joined
[08:04] *** spider-mario joined
[08:10] *** kurahaupo left
[08:20] *** Hor|zon joined
[08:25] *** Hor|zon left
[08:34] *** psch joined
[08:35] <psch> hi #perl6 o/

[08:38] *** jack_rabbit joined
[08:39] <lizmat> psch \o

[08:40] <jnthn> o/ psch, lizmat 

[08:40] <lizmat> jnthn \o

[08:41] <psch> jnthn, lizmat \o

[08:41] <psch> i found the tests for -e :)

[08:41] <psch> they still fail with my patch :(

[08:45] *** gfldex joined
[08:45] <rurban> got strange results for t/spec/S03-junctions/autothreading.t Failed 76/89 subtests but manually all tests pass with parrot and moar

[08:45] <lizmat> rurban: on various builds I've seen various stable tests flap when doing spectest

[08:46] <lizmat> I assume we still have a few heisengremlins in moar / libuv

[08:46] <jnthn> lizmat: afaik, the only ones we have left in moar since the inlining/gc/continuations bug I fixed the other day are S17 ones...lemme know if you're seeing anything other than that.

[08:47] <lizmat> jnthn: will do

[08:47] *** jack_rabbit left
[08:47] <jnthn> (Because all I have here are S17 flappers, and a small number of repeatable Win32 issues.)

[08:48] <jnthn> lizmat: Did you ever get to the bottom of the io-spec-cygwin.t issue, ooc?

[08:49] <lizmat> eh, I think I did...it went away afaict

[08:49] * jnthn pulls stuff and gets a new spectest run

[08:50] <lizmat> fwiw, I'm about to unleash new chdir and indir :-)

[08:53] <jnthn> Cool

[08:54] <vendethiel> rurban: I strongly believe the only reason java has all these factories is because they didn't have lambdas :-)

[08:54] <vendethiel> (also, when people say "dependency injection", I tend to correct by saying "argument passing")

[08:55] <jnthn> It's partly cultural too.

[08:55] <jnthn> Before C# got lambdas, I don't remember it having a huge culture of factory writing.

[08:56] <vendethiel> jnthn: I think c# guys go with the "provider" stuff instead of factories?

[08:56] <jnthn> There's something about the Java way of API design that seems to embrace/encourage putting pattern names in class names, and using plenty of them...

[08:57] <jnthn> vendethiel: Go with all sorts; convention-based DI containers amongst them...

[08:57] <vendethiel> heehhe https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition/ :-)

[08:57] <rurban> well, "dependency injection" is manipulating @ISA, the method dispatch

[08:58] <rurban> which forbids compile-time optimization of method dispatch

[08:58] <jnthn> rurban: That isn't what it's meant on any codebase I've worked on.

[08:58] <rurban> i.e. use oo :final forbidden in libs

[08:58] <vendethiel> me neither

[08:59] <jnthn> Typically I see it being used to refer to techniques like constructor injection

[08:59] <rurban> interesting. how do you inject deps via argument passing?

[09:00] <jnthn> And then arranging for said DI framework to be in charge of creating the "entry point" (for example, controllers in an MVC app).

[09:00] <rurban> Ah, I see. java style

[09:00] <jnthn> Much wider than that.

[09:00] <vendethiel> rurban: you just pass you "db connection" as an argument instead of storing it on the object

[09:00] <rurban> yes, I see. you need that for static languages.

[09:00] <jnthn> vendethiel: Well, more important is that something outside of the object creates it

[09:01] <vendethiel> jnthn: I just mean - DI is argument passing glorified.

[09:01] <nine> Dependency injection is just "programming to an interface, not to an implementation" followed through.

[09:02] <jnthn> vendethiel: Operationally, yes. The reasons I tend to spend time talking about it in classes is because, done right, you get looser coupling and much better testability.

[09:03] <jnthn> nine: Yes, it's a concrete way of achieving that.

[09:03] <vendethiel> jnthn: Compared to singleton/globals, sure. Compared to argument passing, no.

[09:03] <vendethiel> If I give you your db connection through an argument or through some instance variable, it's the *same*

[09:03] <vendethiel> actually, the argument one is less coupled, even :-)

[09:05] <jnthn> vendethiel: Again, technically yes, but from an engineering point of view, making a decision once at object construction time when it will likely need to hold over the object's entire lifetime is likely a better design than relying on code interacting with the object to come up with an appropriate argument to pass each time.

[09:05] *** FROGGS[mobile] joined
[09:05] <vendethiel> jnthn: in an OO world, certainly :-). In a more functional world, you don't even have a choice

[09:05] <vendethiel> jnthn: lots of language provide some kind of option to even ease that further, from monadic stuff to implicit arguments (scala and idris/agda-like)

[09:06] *** kurahaupo joined
[09:07] <lizmat> jnthn: non S17 flapper:

[09:07] <lizmat> t/spec/S04-phasers/first.t                                  (Wstat: 65280 Tests: 1 Failed: 0)

[09:07] <lizmat>   Non-zero exit status: 255

[09:07] <lizmat>   Parse errors: Bad plan.  You planned 4 tests but ran 1.

[09:07] <lizmat> Files=922, Tests=33883, 176 wallclock secs ( 9.15 usr  3.47 sys + 1068.72 cusr 158.26 csys = 1239.60 CPU)

[09:07] <lizmat> runs fine by itself

[09:08] <lizmat> but fails under make

[09:08] <jnthn> Grr, I hadn't seen that issue for a long time...

[09:08] <lizmat> reliably, so I guess technically, it's not a flapper

[09:09] <jnthn> vendethiel: Agree, there are non-object ways to solve the same issue, but if you have objects to hand, might as well use them to their strengths. :)

[09:10] <dalek> rakudo/nom: a1da1f5 | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm:

[09:10] <dalek> rakudo/nom: Add  IO::Path.chdir

[09:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a1da1f5f1d

[09:10] <dalek> rakudo/nom: de6cb3e | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[09:10] <dalek> rakudo/nom: Update chdir(), add indir()

[09:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de6cb3e38b

[09:14] * jnthn needs to get himself back into MOP stuff again in prep for working on native arrays, typed array improvements, etc, and figures he'll take on http://perlcabal.org/syn/S12.html#Custom_Meta-objects :)

[09:15] *** FROGGS_ is now known as FROGGS

[09:15] *** _slade_ left
[09:15] <FROGGS> eww, the following borks my terminal on moar: perl6-m -e 'my $fh = open(~$*EXECUTABLE, :w, :p); $fh.print: "say 42"; $fh.close'

[09:16] <jnthn> Due to handles being inherited, mebbe?

[09:17] <FROGGS> jnthn: the custom metaop sounds highly "interesting"

[09:17] <FROGGS> jnthn: I guess so

[09:17] <FROGGS> we probably inherit and therefore close our own stdout

[09:19] <jnthn> FROGGS: I don't think it'll be so hard to do, which is why I'm taking it as a warm-up task ahead of diving into some deeper 6model extensions :)

[09:19] <FROGGS> jnthn: if you say so... I'm just scared about all these things :o)

[09:19] <FROGGS> seems like not to study CS does not pay off :o)

[09:22] *** bartolin joined
[09:25] *** Mso150 left
[09:27] <dalek> rakudo/nom: 7968c69 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[09:27] <dalek> rakudo/nom: Bring chdir up to spec

[09:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7968c694ee

[09:27] <dalek> rakudo/nom: 7dec9a9 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[09:27] <dalek> rakudo/nom: Make sure we don't lose failures

[09:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7dec9a9540

[09:34] <rurban> darwin had the same utf8 issues as the other bsd's. e.g. t/spec/S05-mass/charsets.rakudo.parrot. fixed right now

[09:45] <dalek> roast: ada98bc | usev6++ | S14-roles/parameterized-type.t:

[09:45] <dalek> roast: Add test for RT #112970

[09:45] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=112970

[09:45] <dalek> roast: review: https://github.com/perl6/roast/commit/ada98bc5f1

[09:45] *** tinyblak joined
[09:47] <timotimo> o/

[09:48] <FROGGS> o/

[09:49] <lizmat> $ perl6 -e '$CWD = 42; say $*CWD'

[09:49] <lizmat> 42

[09:49] <lizmat> this seems an unwanted side effect of no strict

[09:49] <lizmat> FROGGS timotimo o\

[09:50] <jnthn> lizmat: Programs start out in GLOBAL, and $*FOO lookup falls back to $GLOBAL::FOO

[09:50] <FROGGS> lizmat: at least surprising, aye

[09:51] <lizmat> aha... hmmm....

[09:51] <FROGGS> I tripped over that in v5 too

[09:51] <lizmat> jnthn: even if the var in GLOBAL is not marked as dynamic ?

[09:51] <lizmat> $ perl6 -e '$CWD = 42; say $CWD.VAR.dynamic'

[09:51] <lizmat> False

[09:52] <jnthn> lizmat: Yes, dynamic is all about visibility through the lexpad

[09:52] <jnthn> lizmat: But this is about package lookup, and packages are just glorified hashes...

[09:52] <lizmat> hmmm..... yeah, gotcha

[09:52] *** kaare_ joined
[09:52] <jnthn> But yeah, it's a curious interaction of a few things that each make sense :)

[09:53] <lizmat> maybe auto-defined vars should be in their own package, not visible to dynamic lookup ?

[09:53] <jnthn> We could consider re-visiting if "our" scope is the right thing for undeclared variables.

[09:53] <lizmat> :-)

[09:53] *** virtualsue joined
[09:53] <jnthn> Or if maybe they should be lexicals in UNIT or so

[09:54] <lizmat> wouldn't that break a lot of opts ?

[09:54] <jnthn> Not that I can see...are you thinking of anything in particular?

[09:54] <jnthn> Note that it's the compiler that spots the variable is undeclared and goes off to declare it for us

[09:54] <lizmat> true

[09:55] <lizmat> or is it?

[09:55] <jnthn> So it doesn't violate the "lexpad keys immutable at runtime" thing.

[09:55] <lizmat> even if we're doing an EVAL inside a no strict block ?

[09:55] <jnthn> Hmm

[09:56] <jnthn> An EVAL has its own UNIT

[09:56] <lizmat> ah, yup

[09:56] <psch> re lax mode: S19:430 says -e doesn't default to lax mode

[09:56] <synopsebot> Link: http://perlcabal.org/syn/S19.html#line_430

[09:56] <jnthn> So it's true, but probably identifies the downfall of the approahc I suggested

[09:56] <FROGGS> I really like to get a backtrace here:

[09:56] <FROGGS> $ perl6-p

[09:56] <FROGGS> > 1

[09:56] <FROGGS> Null PMC access in get_string()

[09:56] <FROGGS> :/

[09:56] <psch> FROGGS, timotimo o/

[09:56] <FROGGS> hi psch 

[09:56] <jnthn> FROGGS: Maybe comment out a CATCH somewhere in HLL::Compiler?

[09:57] * FROGGS tries

[09:57] <jnthn> lizmat: (To be clear, if we declare them in UNIT, then an undeclared variable inside of an EVAL evaluated in lax mode would not be visible outside of the EVAL)

[09:58] <jnthn> (I'm also not sure if that's a bad thing... :)

[09:58] <lizmat> that just sounds about right to me  :-)

[09:58] <lizmat> otherwise we *would* be violating the immutability rule, right ?

[09:58] *** virtualsue left
[09:59] <jnthn> lizmat: Yes. Well, the alternative is to leave things as they are today and declare them our-scoped, and get the surprise you just ran into. :)

[09:59] <dalek> rakudo/nom: 3962ee5 | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm:

[09:59] <dalek> rakudo/nom: Make IO::Path.chdir also a class method

[09:59] <dalek> rakudo/nom: 

[09:59] <dalek> rakudo/nom: For the so inclined, it's basically $*CWD.chdir

[09:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3962ee51d9

[10:00] <jnthn> Auto-declaration is generally surprising in some way, as I tend to find out each time I end up writing Python. :)

[10:00] <timotimo> hm, do we currently do mixtures of multiple -e correctly in rakudo?

[10:00] <FROGGS> timotimo: there is a PR about that

[10:00] <jnthn> timotimo: No, which I think is why there's a bunch of discussion around it ATM :)

[10:01] <FROGGS> $ perl6-m -e 'say 1' -e 'say 2'

[10:01] <FROGGS> 1

[10:01] <psch> i'm still on that

[10:01] <psch> HLL::CommandLine::Parser is getting in my way a bit

[10:01] <timotimo> more importantly, i think -e 'say "init"' -pe 'say "do something"' -e 'say "done"' is nicer than using phasers ...

[10:01] <psch> -e'say 1;' -e'say 2;' e.g. works

[10:01] *** kjs_ joined
[10:01] <psch> but -e 'say 1;' -e 'say 2;' doesn't

[10:02] <psch> because the space after e does something about how the rest is parsed

[10:02] <timotimo> ah, i remember looking at that!

[10:04] * nine finds it odd that the implementation of a language that takes parsing to whole new levels fails at parsing its command line...

[10:06] <vendethiel> hahaha

[10:09] <jnthn> If only we implemented the langauge in itself, then we could use its parsing technology to parse its command line... :P

[10:10] <timotimo> we should just concatenate the options with spaces again, then we would be able to parse it in one go! :P

[10:10] *** slavik left
[10:13] *** xinming joined
[10:15] *** xinming_ left
[10:15] <jnthn> With spaces is a bad idea, but with some other sentinel (NULL) might even be feasible

[10:15] *** tinyblak_ joined
[10:15] <timotimo> does our parsing work properly with that kind of thing?

[10:18] <jnthn> m: say "ab\0c\0de" ~~ / [\w+]+ % \0 /

[10:18] <camelia> rakudo-moar 9c807f: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Ra70SZ9ICO␤Unrecognized backslash sequence: '\0'␤at /tmp/Ra70SZ9ICO:1␤------> [32msay "ab\0c\0de" ~~ / [\w+]+ % \[33m⏏[31m0 /[0m␤    expecting any of:␤        postfix␤        infix…»

[10:18] <jnthn> m: say "ab\0c\0de" ~~ / [\w+]+ % \x0 /

[10:18] <camelia> rakudo-moar 9c807f: OUTPUT«｢ab␀c␀de｣␤␤»

[10:18] <jnthn> m: say "ab\0c\0de" ~~ / [(\w+)]+ % \x0 /

[10:18] <camelia> rakudo-moar 9c807f: OUTPUT«｢ab␀c␀de｣␤ 0 => ｢ab｣␤ 0 => ｢c｣␤ 0 => ｢de｣␤␤»

[10:18] <timotimo> ah. this could actually work.

[10:19] *** tinyblak left
[10:20] *** denis_boyun_ joined
[10:21] *** Hor|zon joined
[10:21] <jnthn> Well, maybe. Just saying that if we really are struggling with scaling the current parsing, we might want to look into using the parsing tech we have :)

[10:22] <lizmat> fwiw, I would not be in favour of allowing \0 in *code*

[10:22] <lizmat> rurban has some pretty string ideas about that, I think

[10:22] <lizmat> problem is that code with \0 may hide code after it in some (dumb) situations

[10:22] <lizmat> because \0 is C's end of string marker

[10:23] <lizmat> and would thus be an attack vector

[10:23] *** slavik joined
[10:23] <timotimo> this may be a good opportunity to make sure we're null-byte-clean

[10:25] *** Hor|zon left
[10:26] <jnthn> It's mostly an issue if you're passing strings off to C-land

[10:26] <timotimo> aye

[10:27] <jnthn> And yeah, there are some interesting attacks around that. But if anything we'd be reducing risk here, not increasing it... :)

[10:27] <jnthn> My favorite attack of that kind was in combination with a badly written UTF8 decoder

[10:27] <timotimo> IIRC, the Nintendo Wii got "pwned" because they were comparing the code's signature with strcpm instead of memcmp and the signature was "the binary" instead of "hexadecimal as ASCII"

[10:27] <jnthn> Such that you could smuggle null bytes into places by giving the thing some invalid UTF8, which caused it to emit nulls as it decoded :)

[10:28] <timotimo> so all you had to do was find a legit game that has a null byte near the beginning of its signature and you could brute force a colliding payload for the same signature

[10:29] <jnthn> cute :)

[10:32] <jnthn> Yay. My bag is packed for today's trip up to Stockholm, I've had lunch, and now I've got some free time to code :)

[10:33] <FROGGS> sounds good :o)

[10:37] *** tinyblak_ left
[10:37] *** tinyblak joined
[10:50] <lizmat> m: say $*CWD.WHAT; say nqp::iscont($*CWD)   # seems to work ok

[10:50] <camelia> rakudo-moar 3962ee: OUTPUT«(timeout)»

[10:50] <lizmat> :-(

[10:50] <lizmat> $ 6 'say $*CWD.WHAT; say nqp::iscont($*CWD)'

[10:50] <lizmat> (IO::Path)

[10:50] <lizmat> 1

[10:51] <lizmat> $ 6 'say $*TMPDIR.WHAT; say nqp::iscont($*TMPDIR)'

[10:51] <lizmat> (IO::Path)

[10:51] <lizmat> 0

[10:51] <lizmat> so why is one IO::Path a cont, and the other isn't ?

[10:51] <lizmat> jnthn:  ^^^ any ideas ?

[10:51] <timotimo> "is a cont" vs "is in a cont"

[10:52] <timotimo> as in: the IO::Path itself isn't "the cont"

[10:52] <lizmat> $ 6 'temp $*TMPDIR'

[10:52] <lizmat> Can only use 'temp' on a container

[10:52] <lizmat> $ 6 'temp $*CWD'

[10:52] <lizmat> (works fine)

[10:53] <FROGGS> I guess TMPDIR gets bound to PROCESS and CWD not?

[10:53] <rurban> lizmat: do you really say "string ideas", not strong ideas?

[10:53] <lizmat> rurban: sorry, strong ideas  :-)

[10:53] <FROGGS> hehe

[10:53] <rurban> or stringent idea

[10:54] <lizmat> strong has the shortest StrDistance

[10:55] <jnthn> lizmat: Probably just because one ends up getting bound into PROCESS or so, while the other is assigned.

[10:55] <jnthn> lizmat: I doubt there's a strong design reason for those two...

[10:56] <lizmat> aha... I see what you mean... 

[10:57] <timotimo> fwiw

[10:57] <timotimo> timo@schmand ~/p/rakudo (nom)> perl6-m -e 'say $*CWD.VAR.WHAT'

[10:57] <timotimo> (Scalar)

[10:57] <timotimo> timo@schmand ~/p/rakudo (nom)> perl6-m -e 'say $*TMPDIR.VAR.WHAT'

[10:57] <timotimo> (IO::Path)

[10:58] <dalek> specs: 37874f2 | (Elizabeth Mattijsen)++ | S16-io.pod:

[10:58] <dalek> specs: Re-introduce tmpdir() and homedir(), update chdir()

[10:58] <dalek> specs: 

[10:58] <dalek> specs: The original idea behind unifying them into a single chdir() usage, becomes

[10:58] <dalek> specs: very cumbersome in the implementation.  Therefore we're going back to these

[10:58] <dalek> specs: functions.

[10:58] <dalek> specs: review: https://github.com/perl6/specs/commit/37874f2cb4

[10:58] <dalek> rakudo/nom: d033738 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[10:58] <dalek> rakudo/nom: Reintroduce tmpdir(), homedir(), update chdir()

[10:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d0337384ac

[11:03] <bartolin> rurban: this morning I tested rakudo on latest parrot from master on freebsd. the two non-ASCII tests from S19-command-line/dash-e.t fail with non-utf8 locale, but run fine otherwise. (same result as on netbsd and linux)

[11:04] <dalek> nqp: b79b20c | (Tobias Leich)++ | src/vm/parrot/QAST/Operations.nqp:

[11:04] <dalek> nqp: remove eof on parrot that breaks on streams

[11:04] <dalek> nqp: 

[11:04] <dalek> nqp: This was meant to unify the behaviour on all backends so that we detect EOF already

[11:04] <dalek> nqp: before we attempted to read past it. Sadly this does not work out here and we have to

[11:04] <dalek> nqp: take care about that in rakudo again.

[11:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b79b20c4d6

[11:07] <dalek> rakudo/nom: 58cd6f1 | (Tobias Leich)++ | / (2 files):

[11:07] <dalek> rakudo/nom: nqp::eoffh on parrot does not detect EOF early

[11:07] <dalek> rakudo/nom: 

[11:07] <dalek> rakudo/nom: This re-introduced code that checks if we are at EOF. Also bump nqp for nqp::eoffh fix.

[11:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/58cd6f1a77

[11:11] <dalek> rakudo/nom: 71b9822 | (Tobias Leich)++ | src/Perl6/Grammar.nqp:

[11:11] <dalek> rakudo/nom: fix repl on parrot and jvm

[11:11] <dalek> rakudo/nom: 

[11:11] <dalek> rakudo/nom: $?FILES can be NULLish and we have to check instead of strcmping it against something.

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/71b98224ad

[11:11] <lizmat> FROGGS++

[11:11] <FROGGS> pmichaud: that should fix the REPL

[11:13] <FROGGS> will now run tests (again) and then respond to tickets/mails

[11:15] <FROGGS> lizmat: about eof on parrot... please keep in mind that you have to check .DEFINITE like I did in order not not have additional empty strings at the end of slurped files...

[11:16] <lizmat> is that a parrot only thing ?

[11:17] <FROGGS> lizmat: it was a parrot and jvm thing before I hacked nqp::eoffh three weeks ago, then it was not a thing and now it is a parrot thing again :o)

[11:17] <lizmat> so, .lines and .slurp would be affected, right ?

[11:17] <lizmat> (and .words in the future)

[11:17] *** tinyblak_ joined
[11:17] <lizmat> or until we have nqp::readcharsfh on parrot, right ?

[11:18] *** tinyblak_ left
[11:21] *** tinyblak left
[11:23] *** fhelmberger joined
[11:25] *** bjz left
[11:25] *** bjz joined
[11:26] *** FROGGS[mobile] left
[11:26] *** FROGGS[mobile] joined
[11:26] <psch> it occurs to me that we have two kinds of stoppers for cli args.  with -e we want to stop at the last one, with -- we want to stop at the first

[11:26] <lizmat> m: 42

[11:26] <camelia> rakudo-moar 3962ee: ( no output )

[11:27] <lizmat> m: $*TMPDIR = 42

[11:27] <camelia> rakudo-moar 3962ee: OUTPUT«Cannot modify an immutable IO::Path␤  in block <unit> at /tmp/etMnEm2meM:1␤␤»

[11:27] <lizmat> m: $*TMPDIR; $*TMPDIR = 42'

[11:27] <camelia> rakudo-moar 3962ee: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/zsJPeybRvA␤Two terms in a row␤at /tmp/zsJPeybRvA:1␤------> [32m$*TMPDIR; $*TMPDIR = 42[33m⏏[31m'[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or m…»

[11:27] <lizmat> m: $*TMPDIR; $*TMPDIR = 42

[11:27] *** fhelmberger left
[11:27] <camelia> rakudo-moar 3962ee: OUTPUT«Cannot modify an immutable IO::Path␤  in block <unit> at /tmp/P00tgYuGLq:1␤␤»

[11:28] <psch> although i think that solves itself with the grammar i'm putting together anyway, as any stopper option is an option first...

[11:29] <dalek> rakudo/nom: e5884bf | (Elizabeth Mattijsen)++ | src/core/Process.pm:

[11:29] <dalek> rakudo/nom: First step in fixing $*TMPDIR

[11:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e5884bf46e

[11:30] <lizmat> jnthn timotimo: the $*TMPDIR problem is the lazy evaluation of it

[11:31] <lizmat> once it is initialized, a subsequent attempt to change works

[11:31] <lizmat> $ 6 '$*TMPDIR; $*TMPDIR=42; say $*TMPDIR.VAR.WHAT'

[11:31] <lizmat> (Scalar)

[11:36] <lizmat> jnthn timotimo: maybe some magic in Actions/make_variable_from_parts is needed ?

[11:37] *** vendethiel left
[11:38] <jnthn> lizmat: I don't think so...that sounds like a level mixup..

[11:38] <jnthn> Feels more like we're losing the container somewhere we ought not be

[11:39] <lizmat> testing a fix

[11:44] <FROGGS> lizmat: I only saw fallout in .lines... but I'm not sure if that means much

[11:47] <dalek> roast: de7eb2d | jnthn++ | S12-meta/ (5 files):

[11:47] <dalek> roast: Some initial tests for EXPORTHOW.

[11:47] <dalek> roast: review: https://github.com/perl6/roast/commit/de7eb2d8ca

[11:57] <dalek> rakudo/nom: 2b2bafa | jnthn++ | src/ (2 files):

[11:57] <dalek> rakudo/nom: Implement EXPORTHOW::SUPERSEDE.

[11:57] <dalek> rakudo/nom: 

[11:57] <dalek> rakudo/nom: Also detect and complain about invalid directives, and report DECLARE

[11:57] <dalek> rakudo/nom: and COMPOSE as NYI so far. Keep existing things working for now; we

[11:57] <dalek> rakudo/nom: can start issuing a deprecation warning in the future for a plain use

[11:57] <dalek> rakudo/nom: of EXPORTHOW::class, and remove it a bit further into the future.

[11:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b2bafa4a1

[11:57] <dalek> rakudo/nom: 2662e01 | jnthn++ | t/spectest.data:

[11:57] <dalek> rakudo/nom: Run S12-meta/exporthow.t.

[11:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2662e01c1c

[11:58] *** robinsmidsrod left
[11:59] <jnthn> train &

[11:59] *** Alula left
[12:00] *** robinsmidsrod joined
[12:00] <FROGGS[mobile]> jnthn: have a nice time in Stockholm :o)

[12:03] *** Alula joined
[12:18] *** cognome joined
[12:22] *** cognome left
[12:22] *** Hor|zon joined
[12:22] *** BenGoldberg joined
[12:23] *** cognome joined
[12:27] *** Hor|zon left
[12:33] *** yeahnoob joined
[12:38] * lizmat gives up on the $*TMPDIR container issue

[12:38] <lizmat> the workaround is simple: just mention it before in your code, and it works

[12:39] <lizmat> because that *will* initialize and make subsequent accesses work

[12:39] *** bjz left
[12:39] <FROGGS> huh

[12:39] <FROGGS> t/spec/S17-procasync/print.rakudo.moar                      (Wstat: 256 Tests: 16 Failed: 1)

[12:39] <FROGGS>   Failed test:  15

[12:39] <FROGGS>   TODO passed:   12-14

[12:39] <FROGGS> was that me?

[12:39] <lizmat> (the reason $*CWD already works, is that it currently is non lazily initialized)

[12:39] <lizmat> no

[12:39] <lizmat> that's a flap

[12:39] *** bjz joined
[12:39] <FROGGS> ohh, that one too

[12:40] <lizmat> yup: all async features have flapping tests  :-(

[12:40] <FROGGS> :/

[12:40] <lizmat> meanwhile I'm bisecting parrot breakage

[12:40] <FROGGS> t/spec/S16-filehandles/io.t                                   (Wstat: 139 Tests: 23 Failed: 0)

[12:40] <FROGGS>   Non-zero wait status: 139

[12:40] <FROGGS>   Parse errors: Bad plan.  You planned 87 tests but ran 23.

[12:40] <FROGGS> this?

[12:41] <lizmat> yup, a segfault

[12:41] <FROGGS> lizmat: so you had that already before my commits today?

[12:42] <lizmat> looks like it

[12:42] <FROGGS> okay...

[12:43] <FROGGS> I've got not much time right now, but I can help this evening, in case there is still some breakage that needs fixing

[12:53] *** araujo joined
[12:53] *** araujo left
[12:53] *** araujo joined
[12:55] *** guru joined
[12:55] *** guru is now known as ajr_

[12:57] <[TuxCM]> where can I find the docs about the difference between Str and Str:D and what it is used for

[12:58] <BenGoldberg> Str is a type.

[12:58] <BenGoldberg> :D is a modifier used in a parameter list.

[12:58] <lizmat> it means a defined Str

[12:58] <lizmat> m: say Str.DEFINITE

[12:58] <camelia> rakudo-moar 2662e0: OUTPUT«False␤»

[12:58] <BenGoldberg> The :D can be applied to any parameter type, not just Str.

[12:59] <lizmat> m: say "foo".DEFINITE

[12:59] <camelia> rakudo-moar 2662e0: OUTPUT«True␤»

[12:59] <BenGoldberg> It's a way for the person writing the code to not have to worry about what to do if passed an undefined value.

[13:00] *** laben joined
[13:00] <laben> hai #perl6 o/

[13:00] *** kaare_ left
[13:00] <lizmat> laben BenGoldberg [TuxCM]  \o

[13:01] <BenGoldberg> o/

[13:01] <BenGoldberg> :)

[13:02] <laben> today is a good day for updates, just a little thing needs to be fixed

[13:02] <laben> lizmat: could you give a look at the build of Inline::Perl5?

[13:03] *** vendethiel joined
[13:03] <laben> lizmat: seems like LibraryMake broke, i get this when building I::P5 => No such method 'chdir' for invocant of type Str

[13:04] <laben> panda seems to work fine

[13:04] <lizmat> this is probably somewhere a .path that needs to be replaced by a .IO

[13:05] <laben> need to dig a bit deeper in my logs to find the whole error trace

[13:06] <lizmat> something is setting $*CWD to a Str, rather than an IO::Path

[13:08] <laben> lizmat: can you reproduce it? or is it only me?

[13:08] <lizmat> reproduced

[13:14] <dalek> rakudo/nom: 205b588 | (Elizabeth Mattijsen)++ | src/core/IO/Spec/Unix.pm:

[13:14] <dalek> rakudo/nom: Add naive $*SPEC.extension for basenames

[13:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/205b588121

[13:14] <dalek> rakudo/nom: 762d947 | (Elizabeth Mattijsen)++ | src/core/CompUnit.pm:

[13:14] <dalek> rakudo/nom: Properly use basename/extension

[13:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/762d94750c

[13:17] *** PotatoGim^Home joined
[13:19] *** kjs_ left
[13:24] *** kjs_ joined
[13:28] *** lue left
[13:29] <dalek> panda: e3fb048 | (Elizabeth Mattijsen)++ | lib/Panda/Common.pm:

[13:29] <dalek> panda: Temporary solution to Inline::Perl5 breakage

[13:29] <dalek> panda: review: https://github.com/tadzik/panda/commit/e3fb048df3

[13:30] *** BenGoldberg left
[13:30] <dalek> rakudo/nom: 66cd275 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[13:30] <dalek> rakudo/nom: Put a canary in chdir()

[13:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66cd275b01

[13:30] <lizmat> laben: could you verify that the above panda update fixes your problem ?

[13:31] *** kjs_ left
[13:32] <nine> Why am I trying to figure out how to get syntax highlighted code into a presentation program instead of just using vim for the presentation?

[13:32] <laben> lizmat: on it! i've started rebuilding rakudo etc right now

[13:33] *** vendethiel- joined
[13:35] <dalek> rakudo/nom: f7dc3c3 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[13:35] <dalek> rakudo/nom: Fix typo

[13:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f7dc3c39d8

[13:35] *** vendethiel left
[13:36] <awwaiid> nine: well, you could also use vim to output html

[13:36] <awwaiid> (if your presenter takes html)

[13:38] <timotimo> that's right, with the :hc tool, no?

[13:39] <laben> lizmat: everything fine now :-)

[13:40] <lizmat> cool!

[13:40] <nine> awwaiid: you'd think that after 15 years of using vim one would just assume that there's some feature like that available :)

[13:41] *** lue joined
[13:42] *** FROGGS[mobile] left
[13:42] *** FROGGS[mobile] joined
[13:43] <timotimo> nine: if you output to html, you can usually copy&paste the formatted stuff into many gui presentation tools, like google docs presentations for example

[13:45] <nine> timotimo: but obviously not into LibreOffice Impress. At least not without a detour through Writer.

[13:49] <timotimo> oh :\

[13:50] *** laben left
[13:53] <dalek> specs: d8869f8 | (Elizabeth Mattijsen)++ | S02-bits.pod:

[13:53] <dalek> specs: Pod would be an IO::Handle, not an IO::Path

[13:53] <dalek> specs: review: https://github.com/perl6/specs/commit/d8869f83c6

[13:53] <dalek> specs: a5df488 | (Elizabeth Mattijsen)++ | S16-io.pod:

[13:53] <dalek> specs: Add indir/tmpdir/homedir to overview

[13:53] <dalek> specs: review: https://github.com/perl6/specs/commit/a5df488e95

[14:02] *** denis_boyun___ joined
[14:03] *** denis_boyun_ left
[14:04] <dalek> rakudo/nom: e418ce8 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[14:04] <dalek> rakudo/nom: Correct defaults for tmpdir() and homedir()

[14:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e418ce8f52

[14:04] <dalek> rakudo/nom: c503e01 | (Elizabeth Mattijsen)++ | src/core/Main.pm:

[14:04] <dalek> rakudo/nom: Remove bare IO::Spec calls from Main

[14:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c503e01fb5

[14:07] *** rindolf left
[14:10] <dalek> rakudo/nom: bb0f9a3 | (Elizabeth Mattijsen)++ | src/core/IO/Handle.pm:

[14:10] <dalek> rakudo/nom: Remove bare IO::Spec calles from IO::Handle

[14:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb0f9a39c4

[14:10] <lizmat> afk for a bit

[14:13] *** Ven_ joined
[14:15] <jnthn> FROGGS[mobile]: Thanks. Going for a few days concurrency teaching :)

[14:15] * jnthn is enjoying the autumn colors out the train window

[14:17] <FROGGS[mobile]> jnthn: that sounds like fun and fun at the same time :o)

[14:17] *** zakharyas joined
[14:18] <timotimo> %)

[14:19] *** denis_boyun___ left
[14:19] <dalek> rakudo/nom: a4d933a | jonathan++ | Configure.pl:

[14:19] <dalek> rakudo/nom: Find .exe/.bat in prefix on Windows.

[14:19] <dalek> rakudo/nom: 

[14:19] <dalek> rakudo/nom: Means a Configure with --prefix is sufficient; before an explicit

[14:19] <dalek> rakudo/nom: --backend was always needed.

[14:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4d933a3ee

[14:21] <jnthn> oh, *that's* why things were darn slow...a hung iTunes swallwing a while core...

[14:22] *** FROGGS[mobile] left
[14:22] *** anaeem1_ joined
[14:22] *** FROGGS[mobile] joined
[14:23] *** Hor|zon joined
[14:27] *** FROGGS[mobile]2 joined
[14:27] *** Hor|zon left
[14:28] <Ven_> jnthn: why is itunes so godamn terrible, I wonder /

[14:28] *** FROGGS[mobile] left
[14:29] <jnthn> Ven_: tbh, I don't normally have a big problem with it

[14:29] <jnthn> Ven_: Just now and then it does...stupid things.

[14:30] <Ven_> jnthn: Really? Everytime I use it, it's awkward and slow. I'm not even talking about the bad UI, but just in itself, it's a big blob of wtf

[14:30] <jnthn> I'm often a bit surprised how much memory it wants

[14:30] <grondilu> m: say .elems given my @ = <foo bar>

[14:30] <jnthn> But at least on the hardware I have it's snappy enough not to bother me...

[14:30] <camelia> rakudo-moar 2662e0: OUTPUT«(timeout)»

[14:30] <nine> Ven_: why do people use itunes I wonder

[14:31] <Ven_> nine: 'cause we have apple phones

[14:31] <timotimo> grondilu: the result is 2 on my local box

[14:31] <jnthn> nine: It's the lazy/easy way to shove stuff onto most beloved iPhone :)

[14:32] <Ven_> eh. this phone is the only one I ever had, and it still works pretty well after 4 years :)

[14:33] *** spider-mario left
[14:33] <grondilu> m: say .elems given constant @a = <foo bar>

[14:33] <camelia> rakudo-moar 2662e0: OUTPUT«2␤»

[14:34] *** [TuxCM] left
[14:35] *** kaare_ joined
[14:36] <grondilu> m: my @a = "a", <b c>; say @a.elems;  # here I expect 3

[14:36] <camelia> rakudo-moar 2662e0: OUTPUT«3␤»

[14:37] <grondilu> m: constant @a = "a", <b c>; say @a.elems;  # here I would *also* expect 3

[14:37] <camelia> rakudo-moar 2662e0: OUTPUT«2␤»

[14:37] <timotimo> oh, i think our constants don't do "proper" list assignment yet

[14:37] <grondilu> ok, good to know.

[14:39] <Ven_> erm.

[14:39] <Ven_> m: say ("a", <b c>).elems

[14:39] <camelia> rakudo-moar c503e0: OUTPUT«2␤»

[14:39] <Ven_> I think TimToady++ changed it not long ago

[14:41] <timotimo> m: constant %foo = "a", "b", "hi", 2, "foo", 3; say %foo.perl; say %foo.elems;

[14:41] <camelia> rakudo-moar c503e0: OUTPUT«("a", "b", "hi", 2, "foo", 3)␤6␤»

[14:41] <timotimo> that's what i mean.

[14:41] <timotimo> .o( put that in your pipe and smoke it )

[14:43] <lizmat> S02:4690 : "    integer     int     Integral int" regarding integer item context

[14:43] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_4690

[14:43] <lizmat> feels like a fossil

[14:44] <lizmat> or is this just a matter of Integral and int() being NYI ?

[14:46] *** [TuxCM] joined
[14:50] <jnthn> lizmat: Well, int(...) would be a type coercion if it exists

[14:50] <lizmat> but do you think it is a fossil or not?

[14:53] <jnthn> lizmat: tbh, I don't know. 

[14:53] <jnthn> lizmat: Worth checking with TimToady 

[14:56] *** xfix is now known as notfix

[15:01] <dalek> rakudo/nom: f9c4d07 | jonathan++ | src/Perl6/Grammar.nqp:

[15:01] <dalek> rakudo/nom: Implement EXPORTHOW::DECLARE.

[15:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9c4d079b8

[15:02] *** lizmat_ joined
[15:02] *** lizmat left
[15:02] *** lizmat_ is now known as lizmat

[15:02] <dalek> roast: c335b12 | jonathan++ | S12-meta/ (3 files):

[15:02] <dalek> roast: Tests for EXPORTHOW::DECLARE.

[15:02] <dalek> roast: review: https://github.com/perl6/roast/commit/c335b125bd

[15:03] <timotimo> does that mean we can now export a "foobar" in EXPORTHOW::DECLARE and in the code using it have a foobar { ... } that creates a type with our given metaobject?

[15:04] <timotimo> $<sym>=[$declarator] <.end_keyword> <package_def>  ← that certainly suggests it

[15:05] <jnthn> Yes

[15:05] <jnthn> See the test

[15:05] <timotimo> token ::($meth_name) {  -  this is pretty cool, i wasn't aware we can do it just like that

[15:05] <timotimo> is that available in perl6 as well as nqp?

[15:06] <jnthn> That's how all the grammar additions work... :)

[15:06] <jnthn> Not sure if it works in Perl 6 yet...I probably meant to do it then didn't get around to it, 'cus unlike with NQP I didn't have a pressing need for it :)

[15:06] *** zakharyas left
[15:07] <jnthn> Oh...also the NQP way is a bit cheaty :)

[15:08] <pmichaud> good morning, #perl6

[15:08] <pmichaud> constants don't understand list assignment

[15:08] <jnthn> Anyway, that's SUPERSEDE and DECLARE done. COMPOSE is the trickier one... :)

[15:08] <jnthn> o/ pmichaud 

[15:08] <pmichaud> at least they don't appear to

[15:09] <pmichaud> well... hrm.

[15:09] <Ven_> well, they have a special list assignment that doesn't flatten :P

[15:09] <jnthn> pmichaud: The spec hasn't been too concrete about what sigils on constants mean afaik

[15:09] <jnthn> Ven_: It's called "binding" :P

[15:09] <jnthn> Trouble is, 

[15:10] *** cognome left
[15:10] <jnthn> TimToady seems to also want it so we can mention a constant on its RHS and have stuff work out

[15:10] <Ven_> conjecture: .flat.elems might be a bit counterproductive

[15:10] <jnthn> And I *really* dunno how to make that one work out

[15:10] <Ven_> I mean, for the compiler. it shouldn't need to flatten it

[15:10] <Ven_> not sure what you mean?

[15:10] *** cognome joined
[15:10] <Ven_> a constant on its RHS?

[15:11] <jnthn> constant @foo = 1, @foo; # it wasn't exactly this, but there was *some* sequence that could be defined elegantly that way...

[15:11] <jnthn> I don't actually see how that can be made to work, alas...

[15:12] <jnthn> We could say that constant @foo = blah; really does blah.list

[15:12] <pmichaud> I'm thinking the problem may be in the parse

[15:12] <jnthn> And constant %foo = blah; really does blah.hash

[15:12] <Ven_> jnthn: ah, the haskell-like one...

[15:12] <pmichaud> i.e.,   I'm wondering if   constant @ = 1, <b c>     is using "item assignment" or "list assignment"

[15:12] <jnthn> pmichaud: Oh, we might parse it at the wrong precedence? That'd also not surprise me...

[15:13] <pmichaud> (and truthfully, I don't like calling this "assignment" -- it's really "initialization")

[15:13] <Ven_> jnthn: maybe make constants immutable only after they've been init? I'm probably talking nonsense here

[15:13] <jnthn> pmichaud: But if so that's only half the problem - and the easy half, at that...

[15:13] <jnthn> Ven_: Yes, "make immutable" is, uh, rather under-specified.

[15:13] <Ven_> fair enough.

[15:14] <pmichaud> jnthn: why would it be only half the problem?  (not disagreeing, wanting to know)

[15:14] <jnthn> What constant REALLY means in Perl 6 is "evalute the RHS at BEGIN time"

[15:14] <jnthn> pmichaud: If I do

[15:14] *** mr-foobar2 joined
[15:14] <jnthn> my @foo = 1,2,3;

[15:14] <jnthn> I know what @foo.WHAT is (Array)

[15:14] <jnthn> If I do

[15:14] <jnthn> constant @foo = 1,2,3;

[15:14] <jnthn> What is @foo.WHAT?

[15:14] <Ven_> Parcel or Array

[15:15] <pmichaud> not Parcel.

[15:15] <jnthn> Well, if it's Parcel that we don't flatten right

[15:15] <jnthn> And Array is...very mutable :)

[15:15] <Ven_> "constant @foo = 1, 2, 3;" <- array before ";", parcel after :P

[15:15] <jnthn> I can live with it being Array, and the "assignment" done at BEGIN time.

[15:16] <jnthn> Ven_: That won't work out, since a Parcel isn't lazy

[15:16] <pmichaud> jnthn: well, which part of Array being mutable are you concerned about?

[15:16] *** SamuraiJack_ left
[15:16] <pmichaud> the individual elements, the array, or both?

[15:16] <jnthn> pmichaud: I'm not sure. I'm well aware that List is mutable in its own way too.

[15:16] <pmichaud> I mean, we can certainly come up wtih Lists that aren't mutable

[15:17] <jnthn> pmichaud: So maybe I should stpo worrying about it. I just feel a bit odd with the keyword "constant" giving me an immediately mutable data structure.

[15:17] *** brrt joined
[15:18] *** mr-foobar2_ joined
[15:18] <pmichaud> well, I think I'd prefer    constant  @foo = ....    to at least give @foo the proper contents (if mutable), rather than silently give the incorrect contents

[15:18] <jnthn> I think users will expect flattening semantics of constnat @foo = ... to match those of my @foo = ... though.

[15:18] *** mr-foobar2 left
[15:18] <Ven_> I guess so

[15:18] <pmichaud> i.e., I'd prefer a bug report saying  "constant @foo isn't"   to a bug report saying  "constant @foo improperly initialized"

[15:18] <jnthn> Which is not the case right now if you aren't very careful what you put on the right hand side.

[15:19] <jnthn> pmichaud: Yes, good point.

[15:19] <jnthn> Well, if that's what we want, then it's probably quite fixable.

[15:19] <pmichaud> OTOH, I just proved that the problem isn't just a parsing one

[15:19] <jnthn> "fixable" :)

[15:19] <pmichaud> oh, wait, no I didn't.

[15:20] <pmichaud> hrmmmmm.....

[15:20] <jnthn> I...don't see constant doing much about $*LEFTSIGIL

[15:20] <pmichaud> I'll look into it more sometime.  What's the grammar rule that handles the '=' in scope declarations?

[15:20] <pmichaud> *scoped*

[15:20] <jnthn> oh...

[15:20] <jnthn> pmichaud: initializer

[15:21] <jnthn> It's a proto iirc

[15:21] <pmichaud> got it

[15:21] <jnthn> Yes, and constant calls that

[15:21] <jnthn> Thing is

[15:21] <jnthn> It looks at $*LEFTSIGIL

[15:21] <pmichaud> right

[15:21] <jnthn> and constant calls variable, which sets $*LEFTSIGIL

[15:22] <jnthn> But we don't declare it in constant itself

[15:22] <pmichaud> oh, because 'constant' isn't a scope declarator

[15:23] *** virtualsue joined
[15:23] <jnthn> Right, it's a type declarator

[15:23] <pmichaud> looking.

[15:23] <jnthn> my constant foo = ...; # lexically scoped constant

[15:23] <jnthn> m: constant @foo = 1,2,3; say @foo.perl

[15:23] <camelia> rakudo-moar c503e0: OUTPUT«(timeout)»

[15:23] <pmichaud> so <declarator>  ends up calling <type_declarator>

[15:23] <jnthn> m: constant @foo = 1,2,3; say @foo.perl

[15:23] <camelia> rakudo-moar c503e0: OUTPUT«(1, 2, 3)␤»

[15:24] <jnthn> m: constant $foo = 1,2,3; say $foo.perl

[15:24] <camelia> rakudo-moar c503e0: OUTPUT«(timeout)»

[15:24] <pmichaud> uh oh  :)

[15:24] <jnthn> m: constant $foo = 1,2,3; say $foo.perl

[15:24] <camelia> rakudo-moar c503e0: OUTPUT«(1, 2, 3)␤»

[15:24] <jnthn> *sigh* camelia is...

[15:25] <Ven_> tired

[15:25] <jnthn> ...a little slow sometimes these days.

[15:25] <pmichaud> anyway, I think that constant needs to become $*LEFTSIGIL aware

[15:26] <jnthn> Agree

[15:26] <pmichaud> it might be that we need a scope_declarator:sym<constant>  in addition to type_declarator

[15:27] <pmichaud> token scope_declarator:sym<constant> { <?sym> <scoped('my')> }    might do it :-)

[15:27] * jnthn doesn't immediately see why

[15:27] <pmichaud> because "constant @foo = ".... is equivalent to "my constant @foo = ..."

[15:27] <jnthn> Well, the defualt is our, iirc.

[15:27] <pmichaud> i.e., when "constant" is the leading keyword, it's both a scope declarator and a type declarator

[15:27] <pmichaud> okay, "our" then :-)

[15:28] <jnthn> True, though I think term is open to both

[15:28] <pmichaud> ??

[15:28] <jnthn> constant @foo = ...; already parses today

[15:28] <pmichaud> right, but it does so because   <declarator>   falls through to <type_declarator>

[15:28] <jnthn> and it's the type_declarator that'd need to declare $*LEFTSIGIL, so far as I can see

[15:29] <jnthn> Yes

[15:29] <jnthn> Is that a problem?

[15:29] <pmichaud> looking

[15:30] <jnthn> oh, wow

[15:30] <jnthn>     token multi_declarator:sym<null> {

[15:30] <jnthn>         :my $*MULTINESS := '';

[15:30] <jnthn>         <declarator>

[15:30] <jnthn>     }

[15:30] <jnthn> *that* is how we end up in declarator from term, iiuc

[15:30] <pmichaud> I'm trying to avoid having type_declarator do the $*LEFTSIGIL setting... that feels very wrong.

[15:31] <jnthn> setting, or declaring for other things below it to set?

[15:31] *** JimmyZ joined
[15:31] <pmichaud> declaring for other things below it to set

[15:31] <pmichaud> but perhaps it's okay... still figuring out how these fit together :)

[15:31] <jnthn> Oh...

[15:32] <mr-foobar2_> http://queue.acm.org/detail.cfm?id=1039534 ( Extensible Programming for the 21st Century )

[15:32] <jnthn> The only thing I see declaring it is EXPR

[15:32] <jnthn> and comp_unit

[15:32] <jnthn> So maybe we don't need to, after all...

[15:33] <jnthn> Then, why doesn't it already do the right thing...

[15:34] <jnthn> (As in, it gets the list case right, but not the constant $foo case...)

[15:34] <pmichaud> perhaps I'm wrong about it being an incorrect parse.

[15:34] <pmichaud> it may just be that it's not flattening properly

[15:34] <jnthn> Yes, the latter is certainly a problem

[15:34] <jnthn> Because it just binds what it gets to the symbol

[15:34] <pmichaud> m:  (constant @ = 1, <b c>).perl.say

[15:34] <camelia> rakudo-moar c503e0: OUTPUT«(1, ("b", "c"))␤»

[15:34] <jnthn> Rather than enforcing any context on it

[15:34] <pmichaud> well, that didn't tell me anything :-(

[15:35] <pmichaud> m:  (constant @ = 1, <b c>).WHAT.say

[15:35] <jnthn> Well, contrast it to my

[15:35] <camelia> rakudo-moar c503e0: OUTPUT«(Parcel)␤»

[15:35] *** yeahnoob left
[15:35] <jnthn> m:  (my @ = 1, <b c>).perl.say

[15:35] <camelia> rakudo-moar c503e0: OUTPUT«Array.new(1, "b", "c")␤»

[15:35] *** yeahnoob joined
[15:36] <pmichaud> but I don't know if I'm getting a Parcel with an anonymous constant, or an anonymous constant that is a Parcel

[15:36] <jnthn> Oh...

[15:36] <jnthn> But a named constant will tell

[15:36] <jnthn> m: constant @a = 1, <b c>; say @a.WHAT

[15:36] <camelia> rakudo-moar c503e0: OUTPUT«(Parcel)␤»

[15:37] <jnthn> m: constant @a = 1, <b c>; say @a.perl

[15:37] <camelia> rakudo-moar c503e0: OUTPUT«(1, ("b", "c"))␤»

[15:38] <pmichaud> so, what is it that binds @a to an Array in  "my @a" ?

[15:39] <pmichaud> or "our @a" 

[15:40] <jnthn> For the my case, it's that the lexpad is set up with an Array instance, and configured to clone it per scope.

[15:40] <pmichaud> the 'our' case is probably more apropos

[15:41] <jnthn> our is the same plus code is generated to re-bind it

[15:41] <jnthn> But for the case we have here, we really want to create an Array at compile time and call .STORE with the thing the RHS produced

[15:41] <pmichaud> yup.  probably a similar issue for constant hashes

[15:41] <jnthn> Right

[15:41] <pmichaud> okay.

[15:42] <pmichaud> anyway, I've convinced myself it's not a parsing issue, so definitely not an easy fix

[15:42] <jnthn> Aye, though I think not a terribly hard one either

[15:42] <pmichaud> agreed

[15:42] <jnthn> The infrastructure for doing stuff at BEGIN time these days is quite decent :)

[15:42] *** Ven_ left
[15:42] <pmichaud> sadly, I have to run other errands for a while, and prepare for a soccer match

[15:43] *** Alula left
[15:43] <jnthn> k...guess my train journey ain't for much longer too. And when I get off I'll want to do dinner :)

[15:43] <pmichaud> see you later, or on Thursday :)

[15:43] <pmichaud> (or Friday)

[15:43] *** Alula joined
[15:43] *** brrt left
[15:43] *** anaeem1_ left
[15:43] <jnthn> Yeah, I get in on Thursday early afternoon, iirc :)

[15:44] *** brrt joined
[15:44] <pmichaud> me too, I arrive 13:00 ish

[15:44] <lizmat> which is earlier than we will

[15:44] <jnthn> Oh...

[15:44] <jnthn> pmichaud: Uh, not because you're changing at Frankfurt, by any chance?

[15:44] *** brrt left
[15:44] <pmichaud> I'm changing at Frankfurt, yes :)

[15:44] <jnthn> Oh

[15:44] <pmichaud> LH1104 FRA to SZG

[15:44] <jnthn> Then we might see each other at the gate for that flight :)

[15:45] <pmichaud> that would be very awesome

[15:45] <pmichaud> likely, since I have 4 hrs in FRA

[15:45] <pmichaud> well, depending on how close your connection is 

[15:46] <jnthn> Oh, I think I'm wrong...

[15:46] <jnthn> oh no, I misread

[15:46] <pmichaud> APW will be the first perl event I've attended in 12 years where I don't have to prepare a talk :)  I'm looking forward to it

[15:46] <jnthn> My flight is the 12:50 one out of FRA

[15:46] <pmichaud> that's mine

[15:47] <pmichaud> LH 1104 departs FRA 12:50 arrives SZG 13:45

[15:47] <jnthn> It's an SAS codeshare, thus my momentary confusion :)

[15:47] <pmichaud> anyway, I'll look for you at the gate

[15:47] <jnthn> But yeah, exact same times, and says operated by Lufthansa. So it's the same one.

[15:47] <jnthn> I get in from CPH at 11:45

[15:47] <pmichaud> I arrive FRA from DFW at 08:50

[15:48] <jnthn> Though Terminal 3, and we go out of Terminal 1, so I guess I'll have a bit of walking to do.

[15:48] <pmichaud> anyway, great to know we're on the same flight -- we can navigate from SZG to hotel together too :)

[15:48] <lizmat> yup, you're in the same hotel  :-)

[15:49] <pmichaud> lizmat++

[15:50] <pmichaud> anyway, I'd better get my other tasks done or I will miss a deadline here.

[15:50] <jnthn> Sure. See you somewhere in FRA on Thursday :)

[15:50] <pmichaud> afk

[15:50] <jnthn> lizmat: Are you flying in also, or driving it?

[15:50] <lizmat> driving...  with a small detour  :-)

[15:51] <jnthn> OK :)

[15:51] * jnthn will see if there's a sane public transport option from airport to hotel for him and Pm 

[15:52] <jnthn> If not, I think the airport is close enough to town to taxi it at a sane enough price :)

[15:57] <lizmat> jnthn: the airport is about 5km from the center

[15:57] <lizmat> it is *really* close

[15:57] <lizmat> (and not too large either, only 1 runway)

[15:57] *** Ven_ joined
[15:58] <jnthn> ah, cool

[16:03] <gtodd> depending on luggage, weather and the surrounding environment, 5km is pleasant walk.  

[16:04] *** JimmyZ left
[16:12] *** yeahnoob left
[16:13] *** rurban left
[16:16] *** brrt joined
[16:18] <psch> alright, the cli-opts grammar prototype seems to work, maybe i can get it into HLL-space during next week.  i'm out of brain for today :)

[16:19] <b2gills> m: $*HOME

[16:19] <camelia> rakudo-moar f9c4d0: OUTPUT«Unhandled exception: Dynamic variable $*HOME not found␤   at <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:13680  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/…»

[16:19] *** dwarring left
[16:19] <psch> i will probably ask about ways to improve it as well, because i don't really feel particularly confident with grammars

[16:19] <psch> but that's for somewhen next week as well o/

[16:19] <psch> for now, ttyl #perl6 

[16:19] <jnthn> o/ psch

[16:20] <jnthn> psch++ # working on getting command line stuff more in shape

[16:20] *** pmichaud left
[16:20] *** PerlJam left
[16:20] <timotimo> mhhh. is line a shape?

[16:21] <lizmat> hmmm...  seems dalek is not getting update info

[16:21] <lizmat> just did: https://github.com/rakudo/rakudo/commit/0c53bfea29971c6aa59993e13d0fbd45487a2183

[16:22] *** sergot_ left
[16:22] *** [Coke] left
[16:22] *** dalek left
[16:23] *** dalek joined
[16:23] *** ChanServ sets mode: +v dalek

[16:23] *** [Coke] joined
[16:23] *** psch left
[16:24] *** Hor|zon joined
[16:25] *** pmichaud joined
[16:27] *** njmurphy left
[16:27] *** PerlJam joined
[16:28] *** sergot joined
[16:28] <gtodd> do any p6-istas have a REPL history mechanism worked out?

[16:28] *** Util joined
[16:28] *** Hor|zon left
[16:29] <gtodd> I mean a method for preserving it to a file ...  I can arrow up and down through it but was wondering how I could access it as a list in the repl itself ... possible with nqp magic or something?

[16:32] *** brrt left
[16:43] *** notfix is now known as xfix

[16:44] <carlin> "$*CWD is a Str, not an IO::Path!!!"

[16:44] <carlin> 3 exclaimation points, must be serious

[16:47] <FROGGS[mobile]2> gtodd: that stuff happens at VM level, so it is not accessible

[16:49] *** tadzik joined
[16:49] *** [Sno]_ left
[16:50] <FROGGS[mobile]2> lizmat: what's the hotel name the Perl 6 crew is staying?

[16:50] <lizmat> define Perl 6 crew ?

[16:52] <FROGGS[mobile]2> I dunno... you, wendy, Pm and jnthn?

[16:52] *** ajr_ left
[16:53] <FROGGS> I'm in hotel Plainbrücke

[16:53] <lizmat> http://act.useperl.at/apw2014/wiki?node=Who%20stays%20where

[16:53] * timotimo is in "hotel guter hirte"

[16:53] <timotimo> together with vendethiel

[16:54] <lizmat> afaik, nwc10 is thare as well

[16:54] <lizmat> *there

[16:54] <FROGGS> well, we're are at last at the same venue :o)

[16:54] <vendethiel-> yarr

[16:54] *** vendethiel- is now known as vendethiel

[16:56] *** psch joined
[16:57] <psch> ...i can't not read the clog, and gtodd's question is intriguing :)

[16:58] <psch> gtodd: as it is right now you'd have to patch nqp

[16:58] <timotimo> we'll eventually want something much cleverer than just a little readline-based thingie (or in this case linenoise)

[16:58] <psch> gtodd: more precisely, you'd have to add some check (like and env-var) for a filename and add "write the line of code to that file" in HLL::Compiler::interactive

[16:59] <psch> s:1st/and/an/

[17:00] <psch> timotimo: i have (very minimalistic) binding for gnu-readline on github (http://github.com/peschwa/readline-gnu, but "which readline" probably isn't the biggest thing to think about... :)

[17:00] <gtodd> OK I had some amateurish notion that since nqp had "linenoise inside" I could somehow access whatever it was doing biut that it would be at a sort deeper/llower than the repl itsell

[17:01] <psch> in my understand we want subparse for every line and... that's kind of as far as i thought about it :)

[17:01] <timotimo> iirc moarvm just offers an "interactive readline" nqp:: op for you

[17:01] <gtodd> :-)

[17:02] *** pat_js left
[17:02] <gtodd> so at this point it wouldn't be as easy as "loading a package" that writes to a file ...

[17:02] *** pat_js joined
[17:03] <psch> gtodd: no.  nqp reads the fh for the repl

[17:03] <psch> line 70 in nqp/src/HLL/Compiler.nqp

[17:04] <pat_js> are there some deltas (apart from the git logs) for rakudo? I haven't looked at perl 6 for some time now and want to know what the changes are implemented now and what crucial changes to the language have happend.

[17:05] *** kjs_ joined
[17:06] <gtodd> the easy approach of REPLHelper.pm or repl-trick for "shortcuts"  isn't going to work at this point so unless I dig into nqp ... :-) 

[17:06] <psch> pat_js: as for "what works now", http://perl6.org/compilers/features is probably most comprehensive

[17:07] <psch> pat_js: wrt "what started working when", that's probably only via git

[17:08] <psch> pat_js: oh, except for timotimo++'s http://p6weekly.wordpress.com although that only goes back about half a year or so i think

[17:09] <pat_js> psch: thanks, but that's too short, I'm looking for a rundown of the last two years, then i'm looking into the git logs.

[17:09] *** Mso150 joined
[17:11] <timotimo> pat_js: what's your favourite part of perl6?

[17:11] <timotimo> the last two years is basically all the time i spent with perl6 so far

[17:11] <timotimo> performance improved in a big way

[17:12] <timotimo> stage parse for the core setting used to be about 120 seconds on my machine, now it's below 30

[17:12] <timotimo> in part thanks to moarvm, in part thanks to targeted optimizations all over the place

[17:12] <timotimo> we got inlining to work on the AST level for all backends, too

[17:13] <colomon> Threading

[17:13] <timotimo> about 2 years ago, there were still loads and loads of tickets marked "nom regression"

[17:13] <colomon> Sets and Bags

[17:13] <timotimo> aye, the JVM and MoarVM backends appeared and got multithreading and asynchronous IO

[17:14] <timotimo> niecza stopped being moved forward, pugs has been removed from the daily test runs

[17:15] <gtodd> psch: of course running the repl in tmux or in emacs buffer offers a different way to save history ... but you can't really "load" the file ...

[17:15] <gtodd> anyway thanks

[17:15] <timotimo> rlwrap*

[17:16] <timotimo> i mean: rlwrap is a workable alternative

[17:16] <pat_js> timotimo: not sure, I really liked the full utf8 support and all those operators. method dispatch was pretty nice. the Meta-Programming posibilities had some nice touch to it.

[17:17] <timotimo> our unicode support is still lacking; we'll still have to build NFG before that'll truly rock your socks off

[17:17] <timotimo> but method dispatching, meta programming, the operators ... that's all in good shape; i think it was in good shape before, too

[17:18] <pat_js> thanks a lot, that's some directions. Is the parcel/listy stuff now working?

[17:18] *** [Sno] joined
[17:18] <psch> it's up next, i think

[17:18] <psch> well, the performance part of it

[17:18] <timotimo> there'll still be the Great List Refactor that'll be a pretty huge deal when it comes to performance at least

[17:18] <timotimo> a portion of that is going to happen during the APW2014 which happens next weekend

[17:19] <psch> right, that reminds me, i should probably add that one use case i discovered when hacking m:g// to the meta ticket

[17:19] <timotimo> yay

[17:20] <psch> m: class A { method Str() { "foo" } method List() { (1, 2, 3) } }; for A.new { .say }

[17:21] <camelia> rakudo-moar f9c4d0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/kXO2S_REWT␤Two terms in a row␤at /tmp/kXO2S_REWT:1␤------> [32mclass A { method Str() { "foo" } [33m⏏[31mmethod List() { (1, 2, 3) } }; for A.new[0m␤    expecting any of:␤        pos…»

[17:21] <psch> m: class A { method Str() { "foo" }; method List() { (1, 2, 3) } }; for A.new { .say }

[17:21] <camelia> rakudo-moar f9c4d0: OUTPUT«A.new()␤»

[17:21] * psch shakes fist at TTIAR

[17:21] *** zakharyas joined
[17:21] <psch> that case is arguably correct, but 'for m:g/$pat/ { ... }' likely wants .list implicitely...

[17:22] <psch> welp, i'll add it to the ticket and let the smart people worry about it :)

[17:23] *** molaf joined
[17:23] *** fhelmberger joined
[17:24] <bartolin> I've got a question regarding unicode: on a box with debian stable (7.6) I get spectest failures with rakudo on parrot in S05-mass/charsets.t and S05-mass/properties-general.t (the failures stem from the recently unfudged tests, cmp. https://github.com/perl6/roast/commit/606523b3e5d9ba10bc67bb7705b0530ff5ce049c)

[17:24] <bartolin> I *think* I understand why those tests fail: debian stable comes with libicu version 4.8 which is used by parrot. libicu 4.8 only has the data from Unicode 6.0 -- but the failing tests check definitions from Unicode 6.1

[17:24] <bartolin> can you confirm this interpretation?

[17:26] *** denis_boyun_ joined
[17:28] *** fhelmberger left
[17:30] *** zakharyas left
[17:31] *** Ven_ left
[17:31] *** zakharyas joined
[17:33] <dalek> specs: e9650c0 | (Elizabeth Mattijsen)++ | S32-setting-library/IO.pod:

[17:33] <dalek> specs: All negated letters also in IO::Path.all

[17:33] <dalek> specs: review: https://github.com/perl6/specs/commit/e9650c02f4

[17:39] <dalek> rakudo/nom: 0d7664f | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm:

[17:39] <dalek> rakudo/nom: Implement IO::Path.all

[17:39] <dalek> rakudo/nom: 

[17:39] <dalek> rakudo/nom: So now you can say "foo".IO.all: <!d r w x s> to get the size of something

[17:39] <dalek> rakudo/nom: that is *not* a directory, but is readable/writable/executable.

[17:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d7664f7ff

[17:40] *** ghostlines joined
[17:42] *** Ven_ joined
[17:42] *** dwarring joined
[17:43] *** ghostlines left
[17:46] <lizmat> is it me, or is the spectest significantly faster after my latest IO::Path work ?

[17:46] <lizmat> Files=923, Tests=33895, 173 wallclock secs ( 9.02 usr  3.39 sys + 1041.16 cusr 158.50 csys = 1212.07 CPU)

[17:47] <colomon> is it that or JIT becoming mainstream?

[17:48] * colomon has definitely seen a noticeable ~3% decrease in stage parse times this week...

[17:49] <lizmat> colomon: there is temporarily more code in the setting while I move stuff around

[17:50] <lizmat> IO:FileTestable is about to be removed :-)

[17:50] <colomon> lizmat: sorry, didn't say that right.

[17:50] <colomon> parse times this week are the fastest I've ever seen

[17:50] <lizmat> ah, even better!

[17:50] <colomon> 26.2 overnight.

[17:50] <colomon> it was 27 or os just a few days ago.

[17:51] <colomon> it had gotten down to something like 26.5 before a while ago, then retreated back to 27, but the last few days have been great.

[17:52] <dalek> rakudo/nom: 1a0e4a0 | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm:

[17:52] <dalek> rakudo/nom: Optimize IO..Path.all: <e !e>

[17:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a0e4a0398

[17:52] <dalek> rakudo/nom: 5065a05 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[17:52] <dalek> rakudo/nom: Update ChangeLog with some new features

[17:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5065a05c45

[17:52] <colomon> lizmat: I really don't have any idea whether it's your code or JIT -- my timings are all with the default Moar rakudobrew gives you.

[17:53] <colomon> I had just assumed JIT because the timing seemed about right.

[17:53] <lizmat> mine as well

[17:53] *** kjs_ left
[17:53] <lizmat> then you have now JIT where you didn't have that before

[17:53] <colomon> right

[17:53] <lizmat> I've been working with JIT enabled for several weeks now

[17:53] <colomon> that's why I assume JIT was responsible for the speedup.  :)

[17:53] <lizmat> well, expect a little more on top of that for the spectest

[17:54] <lizmat> by the looks of it now

[17:54] <colomon> \o/

[17:55] <dalek> rakudo/nom: 47f8a12 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[17:55] <dalek> rakudo/nom: Add blurb about IO::Path.modified|accessed|changed

[17:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47f8a12ff4

[17:56] <gtodd> bartolin: I hope someone confirms that deduction :-)  

[17:56] <gtodd> bartolin: that would mean failing parrot tests might magically start to pass !

[17:59] <flussence> gtodd: not sure about that - I've seen S05 tests persistently fail even though I'm on a Gentoo with shiny new ICU versions...

[18:07] *** psch left
[18:11] *** zakharyas left
[18:17] <dalek> rakudo/nom: 6661df6 | (Elizabeth Mattijsen)++ | src/core/ (4 files):

[18:17] <dalek> rakudo/nom: Bring $*SPEC.tmpdir up to spec, and $*TMPDIR init

[18:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6661df6580

[18:18] <lizmat> could be noise, but this is looking good: Files=923, Tests=33895, 170 wallclock secs ( 8.91 usr  3.39 sys + 1029.64 cusr 156.33 csys = 1198.27 CPU)

[18:18] <lizmat> below 1200 CPU again

[18:21] *** ivanshmakov left
[18:21] *** ivanshmakov joined
[18:22] *** virtualsue left
[18:22] *** vladtz joined
[18:24] *** virtualsue joined
[18:25] *** Hor|zon joined
[18:28] <dwarring> bartolin: S05-mass/chars.t is failing for me under unicode version 5.2

[18:29] <dwarring> https://gist.github.com/dwarring/e60d5e134dd980a9aab2

[18:29] *** Hor|zon left
[18:30] <dwarring> I think this is unicode version dependant

[18:30] <lizmat> bartolin stated earlier that the failing tests were for Unicode 6.1

[18:31] <dwarring> can anyone reproduce that with 6.3 onwards?

[18:32] <bartolin> I'm not really sure, all of them are from 6.1. (the comments for fudging said so)

[18:32] <bartolin> dwarring: icu-config --unicode-version <- nice to know!

[18:33] <dwarring> I think the comment could be wrong (I wrote it)

[18:33] <bartolin> on debian stable it gives 6.0 and I got test failures. on freebsd 10.0 it gives 6.3 and I have a clean spectest

[18:33] <bartolin> ;-)

[18:34] * dwarring bisecting unicode versions

[18:34] <bartolin> dwarring: at least for the test in S05-mass/charsets.t ('Punctuation chars') the added characters are from 6.1 (just looked that up).

[18:35] *** PotatoGim^Home left
[18:35] <dalek> rakudo/nom: 603a994 | usev6++ | tools/lib/NQP/Configure.pm:

[18:35] <dalek> rakudo/nom: Fix open command

[18:35] <dalek> rakudo/nom:  could contain a space (e.g. when installing in dir with space)

[18:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/603a994874

[18:35] <dalek> rakudo/nom: 2e30a3b | (Tobias Leich)++ | tools/lib/NQP/Configure.pm:

[18:35] <dalek> rakudo/nom: Merge pull request #316 from usev6/nom

[18:35] <dalek> rakudo/nom: 

[18:35] <dalek> rakudo/nom: Fix open command

[18:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2e30a3b8d2

[18:35] *** [TuxCM] left
[18:35] *** Ven_ left
[18:36] <bartolin> http://www.unicode.org/versions/Unicode6.1.0/ mentions U+00A7 and U+00B6 and those appear in S05-mass/chars.t

[18:36] <dalek> nqp: 52c4e54 | usev6++ | tools/lib/NQP/Configure.pm:

[18:36] <dalek> nqp: Fix open command

[18:36] <dalek> nqp:  could contain a space (e.g. when installing in dir with space)

[18:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/52c4e54f02

[18:36] <dalek> nqp: 0bd419f | (Tobias Leich)++ | tools/lib/NQP/Configure.pm:

[18:36] <dalek> nqp: Merge pull request #188 from usev6/master

[18:36] <dalek> nqp: 

[18:36] <dalek> nqp: Fix open command

[18:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0bd419f713

[18:36] *** Mouq joined
[18:36] <dwarring> bartolin: I'll refudge, this with a more accurate comment

[18:36] <lizmat> FROGGS[mobile]2: should be up NQP_REVISION?

[18:37] <lizmat> *we

[18:37] * dwarring $?UNICODE would be nice to have - nyi

[18:37] <dalek> doc: bdbc61e | Mouq++ | lib/Language/variables.pod:

[18:37] <dalek> doc: Clarify some of the twigil docs

[18:37] <dalek> doc: review: https://github.com/perl6/doc/commit/bdbc61ea4f

[18:37] <dalek> doc: c986f43 | Mouq++ | lib/Language/variables.pod:

[18:37] <dalek> doc: Stub Variable Declarator section

[18:37] <dalek> doc: 

[18:37] <dalek> doc: Though perhaps declarators and/or scope deserve their own document(s)? At

[18:37] <dalek> doc: the very least, though, they should be mentioned in variables.pod.

[18:37] <dalek> doc: review: https://github.com/perl6/doc/commit/c986f43015

[18:37] <FROGGS> lizmat: yes, but I don't think it is very urgent

[18:38] <bartolin> lizmat: the fixes FROGGS++ just merged don't help without further changes

[18:39] *** rindolf joined
[18:39] <lizmat> ah, ok

[18:39] <bartolin> lizmat: I probably shouldn't have created a pull request just for those.

[18:40] <lizmat> no worries, I was just thinking about releasing early and often :-)

[18:40] *** [Tux] joined
[18:40] <dalek> doc: 08bc0fd | Mouq++ | lib/Language/variables.pod:

[18:40] <dalek> doc: Call twigils "twigils" in headers

[18:40] <dalek> doc: review: https://github.com/perl6/doc/commit/08bc0fd567

[18:41] <bartolin> dwarring: We don't have a way to fudge according to an second criterion (apart from backend), do we? (say OS version)

[18:43] *** kjs_ joined
[18:45] *** kjs_ left
[18:45] <dwarring> bartolin: not that I know of

[18:46] <FROGGS> bartolin: no

[18:47] <lizmat> could it be that nqp::loadbytecode($path); creates an IO::Handle with a Str in its $!path  ??

[18:48] <bartolin> maybe the tests could stay unfudged but get comments describing the issue?

[18:48] <lizmat> if so, how can I change the Str $path in load_setting to an IO::Path ?

[18:48] *** pepl joined
[18:48] <lizmat> FROGGS:  any ideas?  ^^

[18:49] <FROGGS> hmmm

[18:49] <lizmat> I could fudge it for now in IO::Handle.open, but that seems the wrong way  :-)

[18:51] <FROGGS> I don't think that nqp::loadbytecode can create a Perl 6 level class

[18:52] <lizmat> aaaahhhh  FROGGS++  yup, I see what the problem is

[18:53] <lizmat> open('-', :w)

[18:55] *** denis_boyun_ left
[18:56] <dalek> roast: 5dc7e0d | (David Warring [email@hidden.address] | S05-mass/charsets.t:

[18:56] <dalek> roast: refudged unicode-version dependant test on parrot. Correct comments - need unicode 6.1 bartolin++

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/5dc7e0d098

[18:56] <FROGGS> why don't we use nqp::getstdout/in there?

[18:56] <lizmat> we do, deeper in the code

[18:58] *** darutoko left
[18:59] * lizmat is trying to not break too much at once

[19:00] <jnthn> evening, #perl6

[19:00] <lizmat> jnthn o/

[19:01] <FROGGS> lizmat: btw, the segfault in lines.t (and perhaps others) is due to my repl fix... and I think I just solved that

[19:01] <FROGGS> hi jnthn 

[19:01] <lizmat> FROGGS++

[19:03] * jnthn is safely in Stockholm, ate a curry, and went for a walk :)

[19:03] <jnthn> It's nice to be in a European city again :)

[19:03] *** Mso150_h joined
[19:03] *** Mso150 left
[19:04] <lizmat> I bet it's a bit cooler  :-)

[19:05] <jnthn> Oh yes :D

[19:05] <jnthn> It's actually comfortable to go for an evening stroll here :)

[19:05] <FROGGS> jnthn: does that work on windows? perl6-p -e 'say shell("echo \"exit(42)\" | $*EXECUTABLE")'

[19:06] <FROGGS> (I guess not)

[19:07] *** xfix is now known as notfix

[19:07] <jnthn> C:\consulting\rakudo>perl6-m -e "say shell('echo ""exit(42)"" | ' ~ $*EXECUTABLE)"

[19:07] <jnthn> exit(42)

[19:07] <jnthn> Proc::Status.new(exit => 0, pid => Any, signal => 0)

[19:08] <jnthn> Though note:

[19:08] <jnthn> C:\consulting\rakudo>perl6-m -e "say shell('echo exit(42) | ' ~ $*EXECUTABLE)"

[19:08] <jnthn> Proc::Status.new(exit => 42, pid => Any, signal => 0)

[19:08] <FROGGS> hmmm

[19:08] <jnthn> The first one actually includs the quotes in what it echos :D

[19:08] <moritz> \o

[19:08] <lizmat> moritz o/

[19:09] <jnthn> C:\consulting\rakudo>echo "WHY, ffs!"

[19:09] <jnthn> "WHY, ffs!"

[19:09] <jnthn> :D

[19:09] <FROGGS> bah

[19:09] <FROGGS> *g*

[19:09] <FROGGS> but I can live with that :o)

[19:09] <jnthn> o/ moritz 

[19:09] <FROGGS> thanks

[19:09] *** guru joined
[19:10] *** guru is now known as Guest7437

[19:10] *** Guest7437 is now known as ajr_

[19:11] <dalek> doc: ea84e6c | Mouq++ | lib/Language/variables.pod:

[19:11] <dalek> doc: Attempt to explain lexical scope

[19:11] <dalek> doc: review: https://github.com/perl6/doc/commit/ea84e6c4bb

[19:13] <pat_js> is there a way to "apply" a parcel to a signature?

[19:13] *** Ven_ joined
[19:14] <pat_js> or create a subroutine with a given Signature as it's signature

[19:14] <Mouq> pat_js: What do you mean by "apply"?

[19:15] *** kaare_ left
[19:15] *** kjs_ joined
[19:17] <moritz> you can interpolate it

[19:17] <moritz> m: my @parcel := (4, 1); say 'abcdefghijk'.substr(|@parcel);

[19:17] <camelia> rakudo-moar 47f8a1: OUTPUT«e␤»

[19:17] <jnthn> In the unlikely even reading the question too literally actually helps...

[19:18] <jnthn> m: sub swas($sig) { return sub (|c where $sig) { say 'oh yeah!!!' } }; my $c = swas(:(Int $a, Str $b)); $c(1, "omg"); $c(2, 69);

[19:18] <camelia> rakudo-moar 47f8a1: OUTPUT«oh yeah!!!␤Constraint type check failed for parameter 'c'␤  in sub  at /tmp/2R4AbM7uGQ:1␤  in block <unit> at /tmp/2R4AbM7uGQ:1␤␤»

[19:18] <pat_js> yeah thatnks, that's what I wanted. 

[19:18] <jnthn> ...what for?! :D

[19:18] <pat_js> curiosity

[19:18] <jnthn> Ah :)

[19:18] <jnthn> As I was writing it I was thinking...what on earth could this be good for... :)

[19:19] <pat_js> i thought if everything is an object

[19:19] <jnthn> *nod*

[19:19] <jnthn> Yeah, sigs are objects...

[19:20] <pat_js> and Parcels are sort of the "keys" to the Signature "locks", this should work in some way

[19:21] <Mouq> m: say (1, "omg") ~~ :(Int $a, Str $b)

[19:21] <camelia> rakudo-moar 47f8a1: OUTPUT«True␤»

[19:21] <Mouq> m: say (2, 69) ~~ :(Int $a, Str $b)

[19:21] <camelia> rakudo-moar 47f8a1: OUTPUT«False␤»

[19:22] <pat_js> but there is no way to do variable binding with it, right?

[19:22] *** kjs_ left
[19:23] *** SamuraiJack_ joined
[19:23] <jnthn> You mean, use it for destructuring?

[19:23] <pat_js> yeah, I thought about some pattern matching

[19:23] <jnthn> Hmm

[19:23] <jnthn> Well

[19:24] <pat_js> but it feels like leaking scopes.

[19:24] <jnthn> m: sub foo() { return 12, "dugong"; }; my (Int $a, Str $b) = foo(); # there's this...

[19:24] <camelia> rakudo-moar 47f8a1: ( no output )

[19:24] <jnthn> m: sub foo() { return 12, "dugong"; }; my (Int $a, Str $b) = foo(); say $a; say $b;

[19:24] <camelia> rakudo-moar 47f8a1: OUTPUT«12␤dugong␤»

[19:24] <dalek> rakudo/nom: 2e4dca6 | (Elizabeth Mattijsen)++ | / (4 files):

[19:24] <dalek> rakudo/nom: Add IO::Path::Special for STDIN/STDOUT/STDERR etc

[19:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2e4dca68fa

[19:25] <Mouq> It doesn't really make sense to have first-class variable declarations :P IMO

[19:25] <pat_js> yeah i have found that

[19:25] *** kjs_ joined
[19:26] *** jack_rabbit joined
[19:26] <jnthn> One of the cute things you can do with the syntax is unpack object attributes

[19:26] <jnthn> my (:$numerator, :$denominator) := 4.2; say $numerator; say $dominator

[19:26] <jnthn> m: my (:$numerator, :$denominator) := 4.2; say $numerator; say $dominator

[19:26] <camelia> rakudo-moar 47f8a1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_OoupbHq82␤Variable '$dominator' is not declared. Did you mean '$denominator'?␤at /tmp/_OoupbHq82:1␤------> [32m) := 4.2; say $numerator; say $dominator[33m⏏[31m<EOL>[0m␤    expecting …»

[19:27] <jnthn> uh, yes, I *did* mean...

[19:27] <jnthn> m: my (:$numerator, :$denominator) := 4.2; say $numerator; say $denominator

[19:27] <camelia> rakudo-moar 47f8a1: OUTPUT«21␤5␤»

[19:27] <dalek> roast: ac5e8d4 | (Tobias Leich)++ | S19-command-line/repl.t:

[19:27] <dalek> roast: add sanity test for the REPL

[19:27] <dalek> roast: review: https://github.com/perl6/roast/commit/ac5e8d4e35

[19:28] <jnthn> And can do them nested too

[19:32] <jnthn> FROGGS: That test fails here :(

[19:32] <pat_js> m: my(:$re,:$im) = 3+4i; $im.say

[19:32] <camelia> rakudo-moar 47f8a1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/CxX0G6tvtw␤Variable '$re' is not declared␤at /tmp/CxX0G6tvtw:1␤------> [32mmy(:$re[33m⏏[31m,:$im) = 3+4i; $im.say[0m␤»

[19:32] *** robinsmidsrod left
[19:32] <jnthn> oh, no wonder!

[19:32] <dalek> roast: 18fc4b8 | jonathan++ | S19-command-line/repl.t:

[19:32] <dalek> roast: Fix a tyop.

[19:32] <dalek> roast: review: https://github.com/perl6/roast/commit/18fc4b8e6a

[19:32] <FROGGS> ohh nose!

[19:32] <jnthn> Now it passes just fine.

[19:34] <pat_js> m: my (:$im) := 3+4i; $im.say

[19:34] <camelia> rakudo-moar 47f8a1: OUTPUT«␤  in block <unit> at /tmp/CdfqrSeiYS:1␤␤»

[19:34] <FROGGS> no wonder it passed here :o)

[19:34] *** robinsmidsrod joined
[19:35] <lizmat> jnthn: nqp::bindattr(self, IO::Handle, '$!PIO', $foo) is just $!PIO := $foo, no?

[19:35] <moritz> if the current class is IO::Handle, yes

[19:35] <jnthn> lizmat: Yeah

[19:35] <jnthn> Well, what moritz said

[19:35] <lizmat> that's what I thought

[19:36] <lizmat> another cleanup coming :-)

[19:39] <Mouq> m: my (:$re,:$im) = 3+4i; $im.say

[19:39] <camelia> rakudo-moar 47f8a1: OUTPUT«(Any)␤»

[19:39] <Mouq> m: my (:$re,:$im) := 3+4i; $im.say

[19:39] <camelia> rakudo-moar 47f8a1: OUTPUT«4␤»

[19:39] <Mouq> pat_js: You were missing a space between `my` and `(` that caused it to be treated like a function

[19:42] *** molaf left
[19:42] <Mouq> masak: It would be awesome to be able to do something like: sub where ($v, *@subs) { my @whens = @subs.map({ quasi {when {{{$_}}}.signature { $_ ~~ {{{$_}}} } } }); quasi { given {{{$v}}} { {{{@whens}}} } } }

[19:44] <jnthn> FROGGS: don't forget to add it to spectest.data, btw :)

[19:45] *** MilkmanDan left
[19:45] *** MilkmanDan joined
[19:47] <timotimo> m: say &my

[19:47] <camelia> rakudo-moar 47f8a1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/2v6oWMy48G␤Undeclared routine:␤    &my used at line 1␤␤»

[19:47] <FROGGS> jnthn: will do after more testing

[19:47] <timotimo> maybe it should output the worries after a sorry, too?

[19:47] <timotimo> in that case it'd complain about the "undefined routine my used"

[19:48] <jnthn> FROGGS: ah, cool :)

[19:49] <jnthn> hm, why on earth do my laptop and phone have an hour's difference on what time it is...

[19:50] <jnthn> All the same, I'm happy to discover I've an hour more of evening than I was thinking... :)

[19:51] <timotimo> \o/

[19:52] *** anaeem1_ joined
[19:53] *** anaeem1_ left
[19:55] *** anaeem1 joined
[19:56] <dalek> rakudo/nom: 94a64fb | (Tobias Leich)++ | src/core/IO/Handle.pm:

[19:56] <dalek> rakudo/nom: fix .lines on parrot

[19:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/94a64fba41

[19:57] *** xenoterracide joined
[19:57] *** anaeem1 left
[20:00] *** anaeem1 joined
[20:01] *** FROGGS[mobile]2 left
[20:01] *** anaeem1 left
[20:08] *** xenoterracide left
[20:09] *** SamuraiJack_ left
[20:09] <dalek> doc: 0810e68 | Mouq++ | lib/Language/variables.pod:

[20:09] <dalek> doc: Clarify special vars section

[20:09] <dalek> doc: review: https://github.com/perl6/doc/commit/0810e68dca

[20:09] <dalek> doc: ed0ba4d | Mouq++ | lib/Language/variables.pod:

[20:09] <dalek> doc: Explain temp

[20:10] <dalek> doc: review: https://github.com/perl6/doc/commit/ed0ba4d4e1

[20:11] *** beastd joined
[20:13] *** rmgk_ joined
[20:13] *** rmgk left
[20:13] *** rmgk_ is now known as rmgk

[20:14] *** anaeem1 joined
[20:15] *** anaeem1 left
[20:23] *** Mso150_h left
[20:24] *** denis_boyun_ joined
[20:25] *** mr-foobar2_ left
[20:26] *** Hor|zon joined
[20:27] *** anaeem1 joined
[20:27] *** _slade_ joined
[20:30] *** Hor|zon left
[20:36] <lizmat> S03:279 : so what is a 'signature literal' ??   :(Dog $self:)

[20:36] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_279

[20:40] <jnthn> m: say :(Int $x).WHAT

[20:40] <camelia> rakudo-moar 94a64f: OUTPUT«(Signature)␤»

[20:42] <lizmat> just a short way to create a signature ?

[20:42] <jnthn> a way to create a standalone signature, independent of any sub, method, block, etc.

[20:43] *** kjs_ left
[20:47] <lizmat> ack

[20:47] <japhb> lizmat, FROGGS: Are we currently in a place where path/IO stuff is working, in that e.g. panda, REPL, etc. is unbroken?

[20:47] <lizmat> it was earlier today, lemme check now

[20:48] <japhb> I've been seeing enough bug fixes that I'm not sure if now is a good time to build a perl6 that I plan to keep around for a few days (I generally like to have at least one built that I can rely on working, even when HEAD builds are various levels of broken)

[20:48] <japhb> lizmat: thank you.  :-)

[20:49] <jnthn> japhb: You might want to hold off a little.

[20:49] <japhb> jnthn: Oh?

[20:49] <jnthn> japhb: If you're after less churn, at least.

[20:50] <japhb> Was there any discussion of the merits of keeping nom a little less churn-y?

[20:50] <lizmat> HEAD currently rebootstraps panda fine, even with Inline::Perl5 and its dependencies

[20:50] <japhb> It seems like the past month or so, it's been "jungles of Borneo"

[20:51] <lizmat> but we're getting a faster IO and filetests for it  :-)

[20:52] <japhb> Oh sure, but it seems like enough change that, well, panda and the REPL need regular love.  I'm wondering if I'm alone in thinking nom should be "always shippable", so to speak, or if we've made the conscious decision that only monthly releases can be considered that reliable.

[20:53] <jnthn> japhb: It's a difficult trade-off. For various reasons, a lot of people track HEAD rather than releases, so there's some demand to keep HEAD stable. OTOH, putting stuff off in branches is a great way to take a long time to discover breakage...

[20:54] <jnthn> japhb: Given that doing so greatly reduces the amount of testing stuff gets.

[20:54] <japhb> Yeah, I agree with that.

[20:54] <lizmat> japhb: it also shows roast deficiencies

[20:54] <jnthn> Right, that too.

[20:54] <lizmat> last week, spectest was fine, but panda was severely borked

[20:54] <jnthn> the daily roast for both spectests and modules uses nom

[20:54] *** odc left
[20:55] * japhb wonders if there's value in keeping a pointer (branch, moving tag, what have you) of not-quite-churny-but-close-to-HEAD.  Kindof like Firefox Aurora

[20:55] <jnthn> I guess the issue is, a bunch of things are set up such that you get more value, as a developer, for comitting might-be-OK stuff to nom, than putting it in a branch...

[20:56] <japhb> Well, I'm not suggesting putting new code in a branch, because I pretty much agree with the reasons that doesn't really work for us except for e.g. major refactors.

[20:56] <jnthn> Aye. The "moving pointer" idea ain't a bad one.

[20:56] <japhb> I'm thinking more having a way for people to get something between monthly and nom in both recency and risk.

[20:57] *** denis_boyun_ left
[20:57] <jnthn> I mean, we already have MOAR_REVISION/NQP_REVISION to give us some control there.

[20:57] <japhb> Yeah, actually, that's kinda what I want, but for Rakudo itself.

[20:57] <jnthn> Right.

[20:58] *** ajr_ left
[20:58] <jnthn> It's an interesting idea. I'm not totally sure how to set things up so the incentive system is right to get it to have the right stability/recency trade-off...

[20:58] <lizmat> but that would be the equivalent of putting all code after such a point in a branch and untested

[20:59] <japhb> But since {MOAR,NQP}_REVISION exist in the next higher repo in the implementation stack, but Rakudo is already the top of the stack, you'd probably end up needing something like a git tag to get the same functionality in a usable way.

[20:59] <jnthn> lizmat: Only if everybody suddenly jumped to using that branch insted of nom.

[21:00] <jnthn> lizmat: and I'm pretty sure the idea is not to switch roasts, evalbot, etc over do it.

[21:00] <lizmat> ah, ok the other way around

[21:00] <jnthn> japhb: Do you think an automated approach may be viable?

[21:00] <lizmat> but that could cause roast failures in a tagged "safe" version

[21:01] <japhb> lizmat: I don't think so, because I feel like we've got several different risk/recency tradeoffs:  monthly (stable but as old as we go), branch (likely broken, or we'd merge it), nom (may be broken, but the best place for patches and such), and tag (probably not broken, may be a few days old, good for people working on features that don't want to get broken builds while they work)

[21:01] <jnthn> japhb: That is, clean roast + panda verified as working in some sense = branch moved

[21:02] <jnthn> Or some similar criteria.

[21:02] <pat_js> m: sub infix:<←> (&f, $b){->(|c){f($b,c)}};my &add = *+*;my &add_1 = &add ← 1;say add_1(5)

[21:02] <camelia> rakudo-moar 94a64f: OUTPUT«1␤»

[21:02] <pat_js> why isn't that 6?

[21:02] <japhb> jnthn: Yeah, I think that could actually work for us.  Sortof a "no unknown regressions" tag/branch

[21:03] <jnthn> Also making it automatable/objective makes it rather predictable what it provides.

[21:03] <jnthn> (And what the boundaries of what it can promise are.)

[21:03] <japhb> Agreed, and agreed that's a good thing.

[21:03] *** kjs_ joined
[21:03] *** kjs_ left
[21:04] *** anaeem1 left
[21:04] <jnthn> pat_js: Did you want |c in the call too, to flatten the capture there?

[21:05] <jnthn> pat_js: Also I don't think you want parens around the signature of the pointy

[21:05] <pat_js> jnthn: yeah, basically i wanted some kind of curry operator

[21:05] <timotimo> pat_js: do you hate whitespace? :)

[21:05] <Mouq> -> |c { f($b, |c) }

[21:05] <japhb> [Coke]: Would you consider making that part of your roasting?  If the roast is clean, and panda can rebootstrap with some set of "expected always working" modules, then your scripts push the tag/branch pointer ahead?

[21:05] <pat_js> Mouq: no, not at all

[21:05] <Mouq> Orrrr, &f.assuming($b)

[21:06] <jnthn> I was gonna say, try assuming :)

[21:06] <dalek> rakudo/nom: 7c74f70 | jonathan++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[21:06] <dalek> rakudo/nom: Allow build to be set in Attribute.new(...).

[21:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c74f7067f

[21:06] <timotimo> m: my &infix:<←> = { $^a.assuming($^b) }; my &add = * + *; my &add_1 = &add ← 1; say add_1(5); # ? :)

[21:06] <camelia> rakudo-moar 94a64f: OUTPUT«No such method 'assuming' for invocant of type 'WhateverCode'␤  in block <unit> at /tmp/sQy1uAJXgq:1␤␤»

[21:07] <jnthn> Use &[+] instead of *+*, I think

[21:07] <timotimo> m: my &infix:<←> = { $^a.assuming($^b) }; my &add = &[+]; my &add_1 = &add ← 1; say add_1(5); # ? :)

[21:07] <camelia> rakudo-moar 94a64f: OUTPUT«6␤»

[21:07] <timotimo> m: my &infix:<←> = { $^a.assuming($^b) }; my &add = &infix:<+>; my &add_1 = &add ← 1; say add_1(5); # ? :)

[21:07] <camelia> rakudo-moar 94a64f: OUTPUT«6␤»

[21:07] <timotimo> i think we really want WhateverCode to be able to assuming, too

[21:08] <jnthn> I'm not sure we do...

[21:08] <japhb> Agreed.

[21:08] <japhb> jnthn: Why not?

[21:08] <japhb> Why wouldn't any Callable not be able to .assuming

[21:08] <Mouq> m: say (my $= * + *).^mro; say &[+].^mro

[21:08] <camelia> rakudo-moar 94a64f: OUTPUT«(WhateverCode) (Code) (Any) (Mu)␤(Sub+{<anon>}+{Precedence}) (Sub+{<anon>}) (Sub) (Routine) (Block) (Code) (Any) (Mu)␤»

[21:08] <japhb> ?

[21:08] <jnthn> Oh, wait... .assuming, not .wrap...

[21:08] <jnthn> Yeah, sorry, I was just confusing things :)

[21:09] <jnthn> No objection to .assuming working more widely.

[21:09] <timotimo> how about Int.assuming? :)

[21:09] <Mouq> .assuming is defined in Routine

[21:09] <jnthn> m: say WhateverCode.^mro

[21:09] <camelia> rakudo-moar 94a64f: OUTPUT«===SORRY!===␤Internal error: failed to remove block␤»

[21:09] <jnthn> um...pardon?

[21:10] <timotimo> we must factor it out into a routine named CanAssume? HasAssumptions? :)

[21:10] <jnthn> m: say (my $a = WhateverCode).^mro

[21:10] <camelia> rakudo-moar 94a64f: OUTPUT«(WhateverCode) (Code) (Any) (Mu)␤»

[21:10] *** kjs_ joined
[21:10] *** Ven_ left
[21:10] <jnthn> Hm, it'd have to go in Code to have it in a common base class...

[21:10] <pat_js> hmm, thanks a lot

[21:10] <japhb> .ask [Coke] What do you think of http://irclog.perlgeek.de/perl6/2014-10-05#i_9460362 through http://irclog.perlgeek.de/perl6/2014-10-05#i_9460432 ?

[21:10] <yoleaux> japhb: I'll pass your message to [Coke].

[21:11] <Mouq> m: say (Whatever + Whatever)(4, 5)

[21:11] <camelia> rakudo-moar 94a64f: OUTPUT«9␤»

[21:15] *** jdj is now known as j4jackj

[21:15] <dalek> modules.perl6.org: 6c2fce9 | asb-cpan++ | web/index.tmpl:

[21:15] <dalek> modules.perl6.org: fixed width for badges column

[21:15] <dalek> modules.perl6.org: 

[21:15] <dalek> modules.perl6.org: adding fixed width to badges column to avoid linebreaks between badges

[21:15] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/6c2fce9ca5

[21:16] *** kjs_ left
[21:24] *** fhelmberger joined
[21:29] *** PZt left
[21:29] *** fhelmberger left
[21:30] *** leont joined
[21:32] <dalek> doc: f4353ee | Mouq++ | / (3 files):

[21:32] <dalek> doc: Generalize definition detection

[21:32] <dalek> doc: 

[21:32] <dalek> doc: Now allows more generalized forms. In the future, should also look for

[21:32] <dalek> doc: X<infix,foo> or some such in the header.

[21:32] <dalek> doc: review: https://github.com/perl6/doc/commit/f4353ee6e5

[21:33] *** pat_js left
[21:35] <jnthn> Mouq++ # working on doc \o/

[21:36] <jnthn> 'night, #perl6

[21:36] <japhb> o/ # night, jnthn 

[21:38] *** rindolf left
[21:38] *** virtualsue left
[21:39] <lizmat> gnight jnthn 

[21:39] <dalek> rakudo/nom: bc6de57 | (Tobias Leich)++ | t/spectest.data:

[21:39] <dalek> rakudo/nom: run S19-command-line/repl.t

[21:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc6de5743a

[21:40] <Mouq> 'night jnthn! :)

[21:40] <FROGGS> gnight all

[21:40] <leont> Been mostly AFK this weekend. What was the way out of the panda issues mentioned on Friday? Upgrade panda or upgrade rakudo?

[21:41] <FROGGS> leont: both

[21:41] <FROGGS> &

[21:41] <timotimo> .o( and don't forget to upgrade nqp, too )

[21:42] *** PZt joined
[21:43] *** bartolin left
[21:48] *** gfldex left
[21:54] *** beastd left
[21:55] *** pat_js joined
[22:07] *** jack_rabbit left
[22:20] <Mouq> "Failed to open file: no such file or directory"

[22:21] <Mouq> SUCH an annoying error that I've been getting recently. What did I fail to open?

[22:24] <lizmat> Mouq: is that on HEAD ?

[22:24] <lizmat> if so, how did you do that ?

[22:26] <Mouq> Looks like I tried to spurt to "html/$/.html"

[22:27] *** Hor|zon joined
[22:28] <dalek> rakudo/nom: 4b78763 | (Elizabeth Mattijsen)++ | src/core/IO/Handle.pm:

[22:28] <dalek> rakudo/nom: Cleanup Part #1 of IO::Handle

[22:28] <dalek> rakudo/nom: 

[22:28] <dalek> rakudo/nom: - no longer does IO::FileTestable, has its own "handlers" now

[22:28] <dalek> rakudo/nom: - added support for IO::Special paths

[22:28] <dalek> rakudo/nom: - simplified a lot of unneccesary nqp::bindattr calls

[22:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b78763fb0

[22:28] <dalek> rakudo/nom: 146c6f8 | (Elizabeth Mattijsen)++ | src/core/IO/Path/Special.pm:

[22:28] <dalek> rakudo/nom: IO::Path::Special -> IO::Special

[22:28] <dalek> rakudo/nom: 

[22:28] <dalek> rakudo/nom: No need to inherit from IO::Path, so this is a better name

[22:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/146c6f8a44

[22:28] <dalek> rakudo/nom: d748851 | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm:

[22:28] <dalek> rakudo/nom: Fix IO::Path.open

[22:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7488511ac

[22:28] <dalek> rakudo/nom: 6e01187 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[22:28] <dalek> rakudo/nom: Fix open() and initialization of $*IN|OUT|ERR

[22:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e01187f74

[22:29] <lizmat> Mouq: earlier today there *was* a problem in HEAD for a while... 

[22:29] <lizmat> if I remember correctly...

[22:29] <Mouq> lizmat: Ahh, you know what, I'm not on HEAD

[22:29] <lizmat> ah... then all bets are off  :-)

[22:29] <Mouq> :)

[22:30] *** cosimo left
[22:30] *** cosimo joined
[22:31] *** Hor|zon left
[22:31] <dalek> rakudo/nom: 8ca6460 | (Elizabeth Mattijsen)++ | / (5 files):

[22:31] <dalek> rakudo/nom: Move IO::Special to the correct location

[22:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ca6460e25

[22:35] <Mouq> perl6 -e'spurt "html/$/.html", "uhhh"'

[22:35] <Mouq> Failed to open file: no such file or directory

[22:35] <Mouq> Which is LTA

[22:35] <lizmat> yup

[22:35] <lizmat> checking...

[22:35] <Mouq> lizmat++ for all this IO work in any case :)

[22:37] <lizmat> ah, does the "html" directory exist ?

[22:38] <Mouq> lizmat: Oh, no, I did that in the Rakudo dir

[22:39] <carlin> m: say "html/$/.html"

[22:39] <camelia> rakudo-moar bc6de5: OUTPUT«html/.html␤»

[22:40] <Mouq> carlin: Yeah..

[22:40] <lizmat> carlin: still a valid file name

[22:40] <lizmat> but if the "html" directory does not exist

[22:40] <Mouq> lizmat: The issue is that $/ was interpolating where I meant literal <html/$/.html>

[22:40] <Mouq> Either way, it's from the directory not existing

[22:41] <lizmat> yup

[22:41] <lizmat> LTA, but handling open() errors is already marked as "todo" in the code  :-)

[22:42] <Mouq> lizmat: Okay :)

[22:50] <Mouq> Of course, on HEAD doc/htmlify.p6 SEGFAULTS :(

[22:51] * lizmat tries 

[22:51] <dalek> doc: bf302b8 | Mouq++ | htmlify.p6:

[22:51] <dalek> doc: Fix for last commit; add syntactics to search

[22:51] <dalek> doc: review: https://github.com/perl6/doc/commit/bf302b83da

[22:51] <dalek> doc: fdf4522 | Mouq++ | / (2 files):

[22:51] <dalek> doc: Fix issue with $/.html being attempted to be created

[22:51] <dalek> doc: review: https://github.com/perl6/doc/commit/fdf45228dd

[22:55] <lizmat> Mouq: I get: ===SORRY!=== Error while compiling ./htmlify.p6

[22:55] <lizmat> Unsupported use of - as character range; in Perl 6 please use .. for range, for explicit - in character class, escape it or place it as the first or last thing

[22:55] <lizmat> at ./htmlify.p6:538

[22:55] *** avuserow_ left
[22:56] <Mouq> O_o

[22:57] <tony-o> who is carbin?

[22:58] <carlin> tony-o: me, thanks for merging my pull req

[22:59] <lizmat> Mouq: what VM are you on ?

[23:00] <Mouq> lizmat: Moar, gimme a few minutes to recompile

[23:01] <lizmat> I just found that I broke the parrot build

[23:01] <lizmat> testing a fix now

[23:02] <lizmat> .oO( don't you hate VM specific code in the setting )

[23:06] *** leont left
[23:09] <lizmat> hmmm..  doesn't fix it...

[23:10] *** jack_rabbit joined
[23:12] <Mouq> Oh, I'm dumb...

[23:13] <Mouq> I need to rebootstrap Panda. I think it used to give a better error than just segfaulting, though

[23:13] <lizmat> maybe a reconfig is in order as well

[23:13] <lizmat> I added a file to the core

[23:13] <dalek> rakudo/nom: 7c86547 | (Elizabeth Mattijsen)++ | src/core/IO/Handle.pm:

[23:13] <dalek> rakudo/nom: Make sure standard handles have proper encoding

[23:13] <dalek> rakudo/nom: 

[23:13] <dalek> rakudo/nom: And we only need one .open

[23:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c86547ef8

[23:14] <Mouq> lizmat: yeah, `make install` complains and dies if you don't reconfigure after that

[23:15] *** avuserow_ joined
[23:15] <lizmat> if this doesn't fix the parrot build, I will have to look at it tomorrow

[23:15] <lizmat> well, in ~ 8 hours from now

[23:16] <dalek> doc: 8ea4be9 | Mouq++ | htmlify.p6:

[23:16] <dalek> doc: Fix issues with .subst call

[23:16] <dalek> doc: review: https://github.com/perl6/doc/commit/8ea4be93d0

[23:18] <Mouq> Though, come to think of it I should probably just be using uri_escape

[23:18] *** avuserow joined
[23:18] <lizmat> building the restricted setting on parrot is broken atm

[23:18] <lizmat> will look at it in ~ 8 hours

[23:19] <lizmat> need some sleep now

[23:19] <lizmat> good night, #perl6!

[23:19] <lizmat> &

[23:19] <Mouq> 'night lizmat++

[23:19] *** avuserow_ left
[23:25] *** BenGoldberg joined
[23:28] *** pepl left
[23:30] *** cosimo left
[23:31] *** cosimo joined
[23:46] <[Coke]> timotimo: niecza also removed from daily runs

[23:46] <yoleaux> 21:10Z <japhb> [Coke]: What do you think of http://irclog.perlgeek.de/perl6/2014-10-05#i_9460362 through http://irclog.perlgeek.de/perl6/2014-10-05#i_9460432 ?

